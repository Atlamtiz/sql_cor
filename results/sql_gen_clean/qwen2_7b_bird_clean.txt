SELECT movie_title FROM movies WHERE movie_release_year = 1945 ORDER BY movie_popularity DESC;
SELECT      m.movie_title,     m.movie_release_year,     d.director_name FROM      movies m JOIN      directors d ON m.director_id = d.director_id WHERE      m.movie_popularity = (SELECT MAX(popularity) FROM (SELECT MAX(movie_popularity) AS popularity FROM movies) AS max_pop)
SELECT movie_title, movie_release_year  FROM movies  WHERE LENGTH(movie_title) = (SELECT MAX(LENGTH(movie_title)) FROM movies);
SELECT movie_title FROM movies WHERE movie_id = (     SELECT movie_id      FROM ratings      GROUP BY movie_id      ORDER BY SUM(rating_score) DESC      LIMIT 1 );
SELECT      AVG(movie_popularity) AS avg_popularity  FROM      movies  WHERE      director_name = 'Stanley Kubrick';
SELECT      AVG(T3.rating_score) AS average_rating FROM      movies AS T1  JOIN      ratings AS T3 ON T1.movie_id = T3.movie_id  WHERE      T1.movie_title = 'When Will I Be Loved';
SELECT      ru.user_avatar_image_url,     MAX(r.rating_timestamp_utc) as latest_rating_date,     m.movie_title FROM      ratings_users ru JOIN      ratings r ON ru.user_id = r.user_id JOIN      movies m ON r.movie_id = m.movie_id WHERE      ru.user_id = 41579158 GROUP BY      ru.user_avatar_image_url, m.movie_title
SELECT      (SUM(CASE WHEN u.user_subscriber = 1 THEN 1 ELSE 0 END) / NULLIF(SUM(rating_score), 0)) * 100 AS subscriber_rating_percentage FROM      ratings r JOIN      ratings_users ru ON r.rating_id = ru.rating_id JOIN      users u ON ru.user_id = u.user_id;
SELECT m.movie_title  FROM movies m  JOIN ratings r ON m.movie_id = r.movie_id  WHERE r.rating_timestamp_utc LIKE '%2020-04-%' AND r.user_trialist = 1;
SELECT      r.user_id  FROM      ratings AS r JOIN      movies AS m ON r.movie_id = m.movie_id WHERE      m.movie_title = 'Love Will Tear Us Apart' AND      r.rating_score = 1;
SELECT m.movie_title, m.movie_popularity  FROM movies m JOIN ratings r ON m.movie_id = r.movie_id  WHERE r.rating_score = 5;
SELECT m.movie_title  FROM movies m  JOIN ratings r ON m.movie_id = r.movie_id  WHERE r.rating_timestamp_utc LIKE '%2020%' AND r.rating_score >= 4;
SELECT      m.movie_title,     ru.user_id,     r.rating_score,     r.critic_comments FROM      movies m JOIN      ratings r ON m.movie_id = r.movie_id JOIN      lists_users lu ON m.movie_id = lu.list_id JOIN      ratings_users ru ON lu.user_id = ru.user_id AND r.rating_id = ru.rating_id WHERE      r.critic IS NOT NULL;
SELECT      (SUM(CASE WHEN rating_score = 5 THEN 1 ELSE 0 END) * 100.0 / COUNT(rating_score)) as percentage FROM      ratings WHERE      movie_title = 'Welcome to the Dollhouse';
SELECT      (SUM(CASE WHEN movie.release_year = 2021 THEN 1 ELSE 0 END) * 100 / COUNT(ratings.rating_id)) AS percentage_2021_movies FROM      ratings JOIN      movies ON ratings.movie_id = movies.movie_id;
SELECT director_name FROM movies WHERE movie_title = 'Sex, Drink and Bloodshed';
SELECT list_title FROM lists WHERE list_followers = (SELECT MAX(list_followers) FROM lists);
SELECT list_url  FROM lists  WHERE list_followers BETWEEN 1 AND 2  AND list_update_timestamp_utc BETWEEN '2012-01-01' AND '2012-12-31';
SELECT list_id FROM lists_users WHERE user_id = 85981819 ORDER BY list_creation_date_utc ASC LIMIT 1;
SELECT COUNT(*)  FROM ratings  WHERE movie_id = 1269  AND user_has_payment_method = 1  AND user_eligible_for_trial = 1  AND rating_score <= 2;
SELECT      movie_title,     movie_popularity FROM      movies WHERE      movie_release_year = 2021 AND director_id IN (SELECT director_id FROM movies WHERE director_name = 'Steven Spielberg');
SELECT      m.movie_release_year,     d.director_name FROM      movies m JOIN      directors d ON m.director_id = d.director_id WHERE      m.movie_release_year = (SELECT MIN(movie_release_year) FROM movies);
SELECT user_id  FROM lists_users  WHERE user_subscriber = 1  AND list_creation_date_utc >= DATE_SUB(CURRENT_DATE(), INTERVAL 10 YEAR) AND list_creation_date_utc < DATE_SUB(CURRENT_DATE(), INTERVAL 9 YEAR);
SELECT COUNT(*)  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  WHERE movies.movie_title = 'Pavee Lackeen: The Traveller Girl' AND ratings.rating_score = 4;
SELECT      CASE          WHEN lists.user_eligible_for_trial = 1 THEN 'Yes'         ELSE 'No'     END AS eligible_for_trial,     lists.list_followers FROM      lists JOIN      movies ON lists.list_movie_number = movies.movie_id WHERE      lists.list_title = 'World War 2 and Kids';
SELECT      m.movie_release_year,     ru.user_id FROM      movies m JOIN      directors d ON m.director_id = d.director_id JOIN      lists l ON m.movie_id = l.movie_id JOIN      lists_users lu ON l.list_id = lu.list_id JOIN      ratings r ON m.movie_id = r.movie_id WHERE      d.director_name = 'Quentin Tarantino' AND      r.rating_score = 4 AND      l.list_movie_number = 3;
SELECT director_url FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE user_id = 2452551 AND critic_likes = 39;
SELECT      AVG(r.rating_score) AS average_rating,     l.director_name FROM      movies m JOIN      lists_movies lm ON m.movie_id = lm.movie_id JOIN      lists l ON lm.list_id = l.list_id JOIN      ratings r ON m.movie_id = r.movie_id WHERE      m.movie_title = 'When Will I Be Loved' GROUP BY      l.director_name;
SELECT COUNT(*) AS num_movies_added,        COALESCE(user_has_payment_method, 0) AS was_paying_subscriber FROM lists WHERE list_movie_number = (SELECT MAX(list_movie_number) FROM lists);
SELECT m.movie_title  FROM movies m  JOIN ratings r ON m.movie_id = r.movie_id  JOIN ratings_users ru ON r.user_id = ru.user_id  JOIN lists_users lu ON ru.user_id = lu.user_id  JOIN (     SELECT critic, MAX(critic_likes) as max_likes     FROM ratings     GROUP BY critic ) critic_max_likes ON r.critic = critic_max_likes.critic AND r.critic_likes = critic_max_likes.max_likes;
SELECT      m.movie_title,     m.movie_popularity,     r.rating_timestamp_utc FROM      movies m JOIN      ratings r ON m.movie_id = r.movie_id WHERE      m.movie_release_year BETWEEN 1920 AND 1929     AND m.movie_popularity = (         SELECT              MAX(popularity)          FROM              movies          WHERE              movie_release_year BETWEEN 1920 AND 1929     )     AND r.rating_score = 1     AND r.user_has_payment_method = 1 ORDER BY      r.rating_timestamp_utc ASC LIMIT 1;
SELECT      m.movie_title,     MAX(rl.critic_likes) AS max_critic_likes_per_movie FROM      movies m JOIN      ratings r ON m.movie_id = r.movie_id JOIN      lists l ON l.movie_id = m.movie_id JOIN      directors d ON d.director_id = m.director_id JOIN      ratings_users ru ON ru.user_id = r.user_id WHERE      d.director_name = 'Francis Ford Coppola' AND      m.movie_popularity > 1000 GROUP BY      m.movie_title;
SELECT ratings.user_avatar_image_url  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  WHERE movies.movie_id = 1103 AND ratings.rating_score = 5 AND ratings.rating_timestamp_utc = '2020-04-19 00:00:00';
SELECT      list_title,     list_followers,     user_subscriber FROM      lists  JOIN      lists_users ON lists.user_id = lists_users.user_id AND lists.list_id = lists_users.list_id WHERE      lists.user_id = 4208563 ORDER BY      list_followers DESC LIMIT 1;
SELECT      MIN(movie_release_year) AS least_year,     movie_title FROM      movies  WHERE      movie_id IN (         SELECT              movie_id         FROM              ratings          WHERE              rating_score = 1         GROUP BY              movie_id         ORDER BY              COUNT(*) DESC          LIMIT 1     )
SELECT COUNT(*)  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  JOIN ratings_users ON ratings.user_id = ratings_users.user_id  WHERE movies.movie_release_year = 1924  AND movies.director_name = 'Erich von Stroheim'  AND ratings.rating_score = 5  AND ratings_users.user_has_payment_method = 1;
SELECT      AVG(T1.list_movie_number) AS average_movies_added,     T2.user_avatar_image_url FROM      lists AS T1 JOIN      lists_users AS T2 ON T1.list_id = T2.list_id JOIN      ratings_users AS T3 ON T2.user_id = T3.user_id WHERE      T3.user_id = 8516503;
SELECT COUNT(rating_url) AS num_ratings, rating_url  FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'The Magnificent Ambersons') AND rating_score < 2;
SELECT COUNT(*) AS num_of_users,        user_id FROM lists_users WHERE list_creation_date_utc BETWEEN '2016-02-01' AND '2016-02-29'   AND user_eligible_for_trial = 1 GROUP BY user_id ORDER BY list_followers DESC LIMIT 1;
SELECT rating_url  FROM ratings  WHERE movie_title = 'Riff-Raff' AND user_id = 22030372;
SELECT d.director_name, COUNT(*) AS num_movies, m.movie_title FROM directors d JOIN movies m ON d.director_id = m.director_id WHERE m.movie_release_year BETWEEN 1960 AND 1985 GROUP BY d.director_name HAVING COUNT(*) >= 10 JOIN (     SELECT movie_id, MAX(rating_score) AS max_rating     FROM ratings     WHERE rating_score = 5     GROUP BY movie_id ) r ON r.movie_id = m.movie_id GROUP BY d.director_name;
SELECT COUNT(DISTINCT r.user_id)  FROM ratings r JOIN movies m ON r.movie_id = m.movie_id  WHERE m.movie_title = 'The South' AND r.rating_score < 2 AND r.user_trialist = 0;
SELECT SUM(critic_likes)  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  WHERE movies.movie_title = 'Apocalypse Now' AND ratings.rating_score = 5;
SELECT AVG(ratings.rating_score), directors.director_name  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  JOIN directors ON movies.director_id = directors.director_id  WHERE movies.movie_title = 'The Crowd';
SELECT      m.movie_release_year,     l.user_id FROM      movies m JOIN      (         SELECT              director_id,             COUNT(movie_id) as num_movies_directed         FROM              movies         GROUP BY              director_id         ORDER BY              num_movies_directed DESC         LIMIT 1     ) max_movies_directed ON m.director_id = max_movies_directed.director_id JOIN      (         SELECT              critic_comments,             user_id         FROM              ratings         ORDER BY              critic_comments DESC         LIMIT 1     ) most_comments_on_critic ON r.critic = most_comments_on_critic.user_id JOIN      ratings r ON m.movie_id = r.movie_id JOIN      lists l ON r.list_id = l.list_id
SELECT m.movie_title, MAX(r.rating_score) AS highest_rating_score FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_popularity BETWEEN 400 AND 500 GROUP BY m.movie_title;
SELECT rating_url  FROM ratings  WHERE user_id = 45579900  AND movie_title = 'The Vertical Ray of the Sun'  AND critic_likes = '20';
SELECT      m.movie_title,     AVG(l.movie_popularity) AS avg_popularity,     COUNT(r.rating_id) FILTER (WHERE r.rating_score = 5 AND m.director_name = 'Christopher Nolan') AS highest_fives FROM      movies m JOIN      lists l ON m.movie_id = l.movie_id JOIN      ratings r ON m.movie_id = r.movie_id WHERE      m.director_name = 'Christopher Nolan' GROUP BY      m.movie_title ORDER BY      highest_fives DESC;
SELECT      m.movie_title  FROM      movie_platform.movies m  JOIN      movie_platform.ratings r ON m.movie_id = r.movie_id  JOIN      movie_platform.lists l ON r.user_id = l.user_id AND l.list_title = '100 Greatest Living American Filmmakers'  WHERE      r.rating_timestamp_utc BETWEEN '2013-01-01' AND '2013-12-31' GROUP BY      m.movie_title;
SELECT AVG(rating.score)  FROM movie_platform.movies  JOIN movie_platform.ratings  ON movies.movie_id = ratings.movie_id  WHERE movies.movie_title = 'Pavee Lackeen: The Traveller Girl';
SELECT COUNT(*)  FROM lists  WHERE list_update_timestamp_utc > (list_creation_timestamp_utc + INTERVAL '10 year');
SELECT l.list_description  FROM lists AS l  JOIN lists_users AS lu ON l.user_id = lu.user_id AND l.list_id = lu.list_id  WHERE l.list_title = 'Short and pretty damn sweet';
SELECT l.list_url  FROM lists AS l  JOIN movies AS m ON l.list_movie_number = m.movie_id  WHERE l.list_title = 'Short and pretty damn sweet';
SELECT COUNT(*)  FROM lists  WHERE list_update_timestamp_utc > '2010-01-01'  AND list_followers > 200;
SELECT COUNT(*)  FROM lists  JOIN lists_users ON lists.user_id = lists_users.user_id  WHERE lists_users.user_id = 83373278 AND lists_users.user_subscriber = 1;
SELECT movie_release_year  FROM movies  WHERE movie_title = 'La Antena';
SELECT movie_url  FROM movies  WHERE movie_title = 'La Antena';
SELECT      movie_title FROM      movies WHERE      movie_title IN ('The General', 'Il grido') ORDER BY      movie_popularity DESC LIMIT 1;
SELECT COUNT(*)  FROM movies  WHERE movie_title_language = 'English' AND director_name = 'Hong Sang-soo';
SELECT      ru.user_id  FROM      lists l  JOIN      lists_users lu ON l.list_id = lu.list_id  JOIN      ratings_users ru ON lu.user_id = ru.user_id  WHERE      l.list_title = '250 Favourite Films' AND      ru.user_trialist = 1;
SELECT l.list_title  FROM lists AS l  JOIN lists_users AS lu ON l.user_id = lu.user_id  WHERE lu.user_id = 32172230 AND lu.user_eligible_for_trial = 1;
SELECT COUNT(*)  FROM lists  JOIN lists_users ON lists.user_id = lists_users.user_id AND lists.list_id = lists_users.list_id  WHERE lists.user_id = 85981819 AND lists_movie_number > 100 AND lists_users.user_has_payment_method = 1;
SELECT list_description  FROM lists  WHERE user_id = 85981819  ORDER BY list_followers DESC  LIMIT 1;
SELECT list_update_date_utc  FROM lists  WHERE list_title = '250 Favourite Films';
SELECT user_avatar_image_url  FROM lists  JOIN lists_users ON lists.user_id = lists_users.user_id  JOIN movies ON lists.movie_id = movies.movie_id  WHERE list_title = '250 Favourite Films';
SELECT COUNT(*)  FROM lists  WHERE user_id = (SELECT user_id FROM lists WHERE list_title = '250 Favourite Films')  AND list_title = '250 Favourite Films';
SELECT COUNT(*)  FROM ratings  WHERE movie_title = 'A Way of Life' AND rating_score = 5;
SELECT critic  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  WHERE movies.movie_title = 'A Way of Life';
SELECT COUNT(*)  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  WHERE movies.movie_title = 'Imitation of Life' AND critic_likes > 1;
SELECT r.user_id  FROM ratings AS r  JOIN movies AS m ON r.movie_id = m.movie_id  WHERE m.movie_title = 'When Will I Be Loved' AND r.critic_comments = 2;
SELECT rating_timestamp_utc  FROM ratings  WHERE user_id = 39115684 AND movie_id IN (     SELECT movie_id      FROM movies      WHERE movie_title = 'A Way of Life' );
SELECT T3.rating_url  FROM movies AS T1  JOIN ratings AS T3 ON T1.movie_id = T3.movie_id  JOIN lists_users AS T2 ON T2.user_id = 39115684 AND T1.movie_title = 'When Will I Be Loved'  WHERE T1.movie_title = 'A Way of Life';
SELECT      critic  FROM      ratings  WHERE      movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'A Way of Life') AND      user_id = 39115684 AND      user_trialist = 1;
SELECT COUNT(*)  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  WHERE movies.movie_title = 'A Way of Life' AND ratings.user_trialist = 1;
SELECT rating_url FROM ratings WHERE movie_id = (     SELECT movie_id      FROM movies      WHERE movie_title = 'A Way of Life' ) AND critic IS NOT NULL;
SELECT COUNT(*)  FROM ratings  WHERE movie_id = (SELECT movie_id FROM movies WHERE max(movie_popularity));
SELECT m.movie_title  FROM movies m  JOIN ratings r ON m.movie_id = r.movie_id  JOIN ratings_users ru ON r.rating_id = ru.rating_id  WHERE ru.user_id = 58149469 AND r.critic_likes = 1 AND r.critic_comments = 2;
SELECT COUNT(*)  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  WHERE movies.movie_title = 'When Will I Be Loved'  AND ratings.user_trialist = 1  AND ratings.rating_score = 1;
SELECT COUNT(*)  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  WHERE movies.movie_title = 'A Way of Life' AND rating_timestamp_utc > '2011-01-01 00:00:00';
SELECT      r.rating_score  FROM      movie_platform.movies m  JOIN      movie_platform.lists l ON m.movie_title = 'Innocence Unprotected' AND l.list_title = '250 Favourite Films'  JOIN      movie_platform.lists_users lu ON l.user_id = lu.user_id  JOIN      movie_platform.ratings r ON m.movie_id = r.movie_id  WHERE      lu.user_id = (SELECT user_id FROM movie_platform.lists WHERE list_title = '250 Favourite Films');
SELECT m.movie_title  FROM movies m  JOIN ratings r ON m.movie_id = r.movie_id  JOIN lists l ON l.movie_id = m.movie_id  JOIN lists_users lu ON lu.list_id = l.list_id  WHERE l.list_title = '250 Favourite Films' AND lu.user_id = (SELECT user_id FROM lists WHERE list_title = '250 Favourite Films');
SELECT AVG(T2.rating_score)  FROM movies AS T1  JOIN ratings AS T2 ON T1.movie_id = T2.movie_id  WHERE T1.movie_title = 'A Way of Life';
SELECT      (COUNT(CASE WHEN r.rating_score = 1 THEN 1 END) * 100.0 / COUNT(r.rating_id)) as percentage FROM      ratings r JOIN      movies m ON r.movie_id = m.movie_id WHERE      m.movie_title = 'When Will I Be Loved';
SELECT      AVG(CASE WHEN m.movie_title = 'Innocence Unprotected' THEN r.rating_score END) AS avg_innocence,     AVG(CASE WHEN m.movie_title = 'When Will I Be Loved' THEN r.rating_score END) AS avg_loved,     ABS(avg_innocence - avg_loved) AS score_difference FROM     movies m JOIN     ratings r ON m.movie_id = r.movie_id;
SELECT director_name FROM movies WHERE movie_title = 'Tokyo Eyes';
SELECT COUNT(*)  FROM movies  WHERE movie_release_year = 2007;
SELECT      m.movie_title  FROM      movies m  WHERE      m.movie_release_year = 2006      AND m.movie_popularity = (SELECT MAX(mp) FROM          (SELECT MAX(movie_popularity) AS mp FROM movies WHERE movie_release_year = 2006) subquery);
SELECT COUNT(*)  FROM movies  JOIN lists ON movies.movie_id = lists.movie_id  WHERE lists.user_id IN (     SELECT user_id FROM lists_users WHERE director_name = 'Åke Sandgren' ) AND movies.director_name = 'Åke Sandgren';
SELECT m.movie_title  FROM movies m  JOIN lists l ON m.director_id = l.user_id  JOIN lists_users lu ON l.list_id = lu.list_id  WHERE m.director_name = 'Álex de la Iclesia'  AND lu.user_trialist = 1  AND lu.user_subscriber = 1  AND m.movie_popularity = (SELECT MAX(movie_popularity) FROM movies);
SELECT movie_release_year  FROM movies  WHERE movie_title = 'Cops';
SELECT director_id FROM movies WHERE movie_title = 'It\'s Winter';
SELECT user_id FROM lists WHERE list_followers = (SELECT MAX(followers) FROM (SELECT MAX(list_followers) AS followers FROM lists) AS max_followers);
SELECT list_title FROM lists WHERE list_comments = (SELECT MAX(list_comments) FROM lists);
SELECT m.movie_title, MAX(r.rating_score) as highest_score FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_release_year = 2008;
SELECT m.movie_title  FROM movies m  JOIN ratings r ON m.movie_id = r.movie_id  WHERE r.critic_likes = (SELECT MAX(`critic_likes`) FROM ratings) LIMIT 3;
SELECT COUNT(DISTINCT user_id)  FROM lists  WHERE list_followers > 100 AND list_creation_date_utc BETWEEN '2009-01-01' AND '2009-12-31';
SELECT COUNT(DISTINCT r.user_id) FROM ratings AS r JOIN movies AS m ON r.movie_id = m.movie_id WHERE m.movie_title = 'White Night Wedding' AND r.rating_score = 5;
SELECT user_cover_image_url  FROM lists  JOIN lists_users ON lists.user_id = lists_users.user_id  JOIN movies ON lists.movie_id = movies.movie_id  WHERE lists.list_title = 'Georgia related films';
SELECT COUNT(*)  FROM lists  WHERE user_avatar_image_url = 'https://assets.mivicdn.net/images/avatars/74983/images-w150.jpg?1523895214';
SELECT m.movie_title  FROM movies m  JOIN ratings r ON m.movie_id = r.movie_id  WHERE r.user_id = 94978 AND r.rating_score = 5;
SELECT movie_title FROM movies JOIN ratings ON movies.movie_id = ratings.movie_id WHERE movies.movie_release_year = 2003 AND ratings.user_id = 2941;
SELECT COUNT(*)  FROM ratings  JOIN lists_users ON ratings.user_id = lists_users.user_id  JOIN movies ON ratings.movie_id = movies.movie_id  WHERE movies.movie_title = 'Patti Smith: Dream of Life' AND lists_users.user_trialist = 0;
SELECT m.movie_title  FROM movies m  JOIN ratings r ON m.movie_id = r.movie_id  GROUP BY m.movie_id, m.movie_title  ORDER BY AVG(r.rating_score) DESC  LIMIT 1;
SELECT      m.movie_title  FROM      movies m  JOIN      ratings r ON m.movie_id = r.movie_id  WHERE      r.critic IS NOT NULL  GROUP BY      r.movie_id, m.movie_title  ORDER BY      SUM(r.critic_comments) DESC  LIMIT 3;
SELECT      lists.list_title,     lists.user_avatar_image_url FROM      lists JOIN      lists_users ON lists.user_id = lists_users.user_id AND lists.list_creation_date_utc = MIN(lists.list_creation_date_utc) WHERE      lists_users.user_id = 85981819;
SELECT m.movie_title  FROM movies m  JOIN ratings r ON m.movie_id = r.movie_id  WHERE r.rating_timestamp_utc LIKE '2020%'  GROUP BY m.movie_id, m.movie_title  ORDER BY COUNT(r.rating_id) DESC  LIMIT 1;
SELECT AVG(rating_score)  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  WHERE movies.movie_title = 'Versailles Rive-Gauche';
SELECT m.movie_title  FROM movies m  JOIN ratings r ON m.movie_id = r.movie_id  WHERE r.user_id = 59988436 AND r.critic_comments = 21;
SELECT m.movie_title  FROM movies m  JOIN ratings r ON m.movie_id = r.movie_id  WHERE r.critic_likes > 20;
SELECT AVG(rating_score)  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  WHERE movies.movie_title = 'The Fall of Berlin' AND movies.movie_release_year=2019;
SELECT      (COUNT(CASE WHEN rating_score > 3 THEN 1 END) * 100.0 / COUNT(rating_score)) AS percentage FROM      ratings WHERE      movie_title = 'Patti Smith: Dream of Life';
SELECT m.movie_title, AVG(r.rating_score) as average_score FROM movies m JOIN ratings r ON m.movie_id = r.movie_id JOIN directors d ON m.director_id = d.director_id WHERE d.director_name = 'Abbas Kiarostami' GROUP BY m.movie_id, m.movie_title ORDER BY average_score DESC LIMIT 1;
SELECT movie_release_year, COUNT(movie_id) as release_count FROM movies GROUP BY movie_release_year ORDER BY release_count DESC LIMIT 1;
SELECT director_id FROM movies GROUP BY director_id ORDER BY COUNT(movie_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM movies  WHERE director_id = (SELECT director_id FROM movies WHERE movie_popularity = (SELECT MAX(movie_popularity) FROM movies));
SELECT COUNT(*)  FROM ratings_users ru  JOIN ratings r ON ru.user_id = r.user_id  WHERE ru.user_has_payment_method = 1 AND r.rating_timestamp_utc > '2014-01-01 00:00:00'
SELECT user_id  FROM lists_users  WHERE list_creation_date_utc = (SELECT MIN(list_creation_timestamp_utc) FROM lists)  AND user_subscriber = 0;
SELECT COUNT(*)  FROM lists_users  WHERE user_id = (SELECT user_id                   FROM lists                   GROUP BY user_id                   ORDER BY COUNT(list_id) DESC                   LIMIT 1);
SELECT list_followers  FROM lists  WHERE list_title = 'Non-American Films about World War II';
SELECT COUNT(*)  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  WHERE movies.movie_title = 'Downfall' AND ratings.rating_score = 4;
SELECT m.movie_title  FROM movies m  JOIN ratings r ON m.movie_id = r.movie_id  WHERE r.rating_score = 5  GROUP BY m.movie_id, m.movie_title  ORDER BY COUNT(r.rating_id) DESC  LIMIT 1;
SELECT m.movie_title  FROM movies m  JOIN ratings r ON m.movie_id = r.movie_id  WHERE r.critic_comments = (SELECT MAX(critic_comments) FROM ratings)
SELECT ratings.user_avatar_image_url  FROM ratings  WHERE ratings.rating_timestamp_utc = '2019-10-17 01:36:36';
SELECT ru.user_avatar_image_url  FROM lists l  JOIN lists_users lu ON l.list_id = lu.list_id  JOIN ratings_users ru ON lu.user_id = ru.user_id  WHERE l.list_title = 'Vladimir Vladimirovich Nabokov';
SELECT      lu.user_id,     u.user_has_payment_method FROM lists AS l JOIN lists_users AS lu ON l.list_id = lu.list_id JOIN ratings AS r ON r.movie_id = ANY(l.movies) JOIN movies AS m ON m.movie_id = r.movie_id GROUP BY lu.user_id, u.user_has_payment_method HAVING COUNT(DISTINCT m.movie_id) = (     SELECT MAX(movie_number)     FROM (         SELECT              l.list_id,             COUNT(DISTINCT m.movie_id) AS movie_number         FROM lists AS l         JOIN lists_users AS lu ON l.list_id = lu.list_id         JOIN ratings AS r ON r.movie_id = ANY(l.movies)         JOIN movies AS m ON m.movie_id = r.movie_id         GROUP BY l.list_id     ) AS max_movies_lists );
SELECT user_avatar_image_url  FROM ratings  WHERE rating_score = 5  GROUP BY user_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM ratings  WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_popularity = (SELECT MAX(movie_popularity) FROM movies));
SELECT user_id  FROM ratings  WHERE movie_title = 'Freaks'  AND rating_timestamp_utc = '2013-05-04 06:33:32'  AND rating_score = 4;
SELECT movie_url  FROM ratings  WHERE rating_score = 5 AND rating_timestamp_utc = '2013-05-03 05:11:17';
SELECT COUNT(*)  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  WHERE movies.movie_release_year = '1998' AND movies.movie_popularity = (SELECT MAX(movie_popularity) FROM movies WHERE movie_release_year = '1998') AND ratings.rating_score = 4;
SELECT m.movie_title  FROM movies m  WHERE m.movie_popularity > 13000  JOIN ratings r ON m.movie_id = r.movie_id  GROUP BY m.movie_id, m.movie_title  ORDER BY AVG(r.rating_score) ASC  LIMIT 1;
SELECT COUNT(*)  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  JOIN ratings_users ON ratings.user_id = ratings_users.user_id  WHERE movies.movie_title = 'One Flew Over the Cuckoo''s Nest' AND ratings_users.user_has_payment_method = 1;
SELECT COUNT(*)  FROM lists  JOIN lists_users ON lists.user_id = lists_users.user_id  WHERE lists_followers > 3000 AND lists_users.user_has_payment_method = 1;
SELECT m.movie_title  FROM movies m  JOIN ratings r ON m.movie_id = r.movie_id  WHERE m.movie_release_year = '1988'  GROUP BY m.movie_id, m.movie_title  ORDER BY COUNT(r.rating_score) DESC  LIMIT 1;
SELECT COUNT(*)  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  WHERE movies.movie_release_year = '1995' AND movies.movie_popularity = (SELECT MAX(movie_popularity) FROM movies) AND rating_score < 3;
SELECT      (COUNT(CASE WHEN rating_score = 5 THEN 1 END) * 100.0 / COUNT(rating_score)) AS percentage FROM      ratings WHERE      movie_title = 'Go Go Tales';
SELECT      (COUNT(CASE WHEN T4.user_subscriber = 1 THEN 1 ELSE NULL END) / COUNT(T4.user_subscriber)) * 100 AS percentage FROM      movies AS T1 JOIN      ratings AS T2 ON T1.movie_id = T2.movie_id JOIN      lists_users AS T3 ON T3.movie_id = T1.movie_id JOIN      ratings_users AS T4 ON T4.movie_id = T1.movie_id WHERE      T1.movie_title = 'G.I. Jane';
SELECT      (COUNT(CASE WHEN T4.user_has_payment_method = 1 THEN 1 END) * 100.0 / COUNT(T4.user_has_payment_method)) AS percentage FROM      movies AS T1 JOIN      ratings AS T2 ON T1.movie_id = T2.movie_id JOIN      lists_users AS T3 ON T2.user_id = T3.user_id JOIN      ratings_users AS T4 ON T2.user_id = T4.user_id WHERE      T1.movie_title = 'A Shot in the Dark';
SELECT list_title FROM lists WHERE user_id = 4208563;
SELECT      l.list_id,     l.list_title FROM     lists l WHERE     l.list_creation_timestamp_utc LIKE '2016%'     AND l.list_update_timestamp_utc IN (         SELECT MAX(update_time)          FROM (             SELECT list_update_timestamp_utc as update_time             FROM lists             WHERE list_creation_timestamp_utc LIKE '2016%'             GROUP BY list_update_timestamp_utc         ) as updates     )
SELECT      (COUNT(CASE WHEN u.user_subscriber = 1 THEN 1 END) / COUNT(l.list_id)) * 100 AS percentage FROM      lists_users l  JOIN      ratings_users u ON l.user_id = u.user_id WHERE      u.user_subscriber = 1;
SELECT      l.list_id,      l.list_title,      l.list_movie_number,     l.list_update_timestamp_utc,     l.list_creation_timestamp_utc FROM      lists AS l JOIN      lists_users AS lu ON l.user_id = lu.user_id WHERE      lu.user_subscriber = 1;
SELECT l.list_title  FROM lists AS l  JOIN lists_users AS lu ON l.user_id = lu.user_id  WHERE lu.user_eligible_for_trial = 1;
SELECT COUNT(*)  FROM lists  WHERE list_followers >= 1  AND EXISTS (     SELECT 1      FROM lists_users lu      WHERE lu.list_id = lists.list_id      AND lu.user_subscriber = 1 )
SELECT AVG(list_followers)  FROM lists  WHERE list_movie_number > 200;
SELECT l.list_title  FROM lists AS l  JOIN lists_users AS lu ON l.user_id = lu.user_id  WHERE lu.user_subscriber = 1 AND l.list_movie_number < 50;
SELECT      list_title,     SUBTRACT(CURRENT_TIMESTAMP, list_update_timestamp_utc) AS time_not_updated FROM      lists ORDER BY      list_update_timestamp_utc ASC LIMIT 1;
SELECT user_id, user_subscriber  FROM lists  WHERE list_title = 'Sound and Vision';
SELECT list_title, EXTRACT(YEAR FROM AGE(CURRENT_TIMESTAMP, list_creation_timestamp_utc)) AS years_since_creation FROM lists WHERE list_followers > 200;
SELECT      (COUNT(l.movie_id) - COUNT(DISTINCT r.movie_id)) * 100.0 / COUNT(l.movie_id) AS percentage_never_rated FROM      lists l JOIN      movies m ON l.movie_id = m.movie_id LEFT JOIN      ratings r ON l.movie_id = r.movie_id;
SELECT m.movie_title, r.rating_timestamp_utc, r.rating_score FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.user_id = 39115684;
SELECT COUNT(movie_id)  FROM movies  WHERE movie_release_year BETWEEN 1970 AND 1980  AND movie_popularity > 11000;
SELECT COUNT(*)  FROM movies  WHERE director_name = 'Felipe Cazals' AND movie_release_year = 1976;
SELECT director_url  FROM movies  WHERE movie_title = 'Red Blooded American Girl';
SELECT list_title FROM lists WHERE list_update_timestamp_utc = (SELECT MAX(list_update_timestamp_utc) FROM lists);
SELECT user_id  FROM lists  WHERE list_comments = 142;
SELECT      m.movie_title,     AVG(r.rating_score) AS average_rating_score FROM      movies m JOIN      ratings_movies rm ON m.movie_id = rm.movie_id JOIN      directors d ON m.director_id = d.director_id JOIN      ratings r ON rm.rating_id = r.rating_id WHERE      d.director_name = 'Jeannot Szwarc' GROUP BY      m.movie_id ORDER BY      m.movie_popularity DESC LIMIT 1;
SELECT T2.director_name, MAX(T4.rating_score) AS max_rating_score FROM movies AS T1 JOIN director AS T2 ON T1.director_id = T2.director_id JOIN ratings AS T4 ON T1.movie_id = T4.movie_id WHERE T1.movie_release_year BETWEEN 1970 AND 1979 GROUP BY T2.director_name ORDER BY COUNT(T1.movie_id) DESC, max_rating_score DESC LIMIT 1;
SELECT COUNT(*)  FROM ratings  JOIN movies ON ratings.movie_id = movies.movie_id  JOIN lists_users ON ratings.user_id = lists_users.user_id  WHERE rating_timestamp_utc BETWEEN '2010-01-01%' AND '2020-12-31%'  AND user_trialist = 1  AND movie_title = 'The Secret Life of Words'  AND rating_score = 3;
SELECT      m.movie_title,     r.rating_url FROM      movies m JOIN      ratings r ON m.movie_id = r.movie_id WHERE      r.critic_likes = (SELECT MAX(critic_likes) FROM ratings);
SELECT m.movie_title, COUNT(r.rating_id) as num_ratings FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_release_year >= 2000 AND r.rating_score = 5 GROUP BY m.movie_id ORDER BY m.movie_popularity DESC LIMIT 5;
SELECT AVG(T1.list_followers)  FROM lists AS T1  JOIN lists_users AS T2 ON T1.user_id = T2.user_id  JOIN ratings AS T3 ON T1.movie_id = T3.movie_id  WHERE T3.movie_title = 'Pavee Lackeen: The Traveller Girl'  AND T3.rating_timestamp_utc = '2011-03-27 02:06:34'
SELECT COUNT(DISTINCT r.user_id) AS eligible_for_trial_users,        m.movie_image_url  FROM ratings r  JOIN movies m ON r.movie_id = m.movie_id  WHERE r.rating_timestamp_utc BETWEEN '2017-01-01 00:00:00' AND '2017-12-31 00:00:00'  AND m.movie_title = 'Patti Smith: Dream of Life'  AND r.user_eligible_for_trial = 1;
SELECT      AVG(T1.list_movie_number) AS average_number_of_movies,     COUNT(*) AS number_of_movies_with_rating_5 FROM      lists T1 JOIN      lists_users T2 ON T1.user_id = T2.user_id AND T1.list_id = T2.list_id JOIN      ratings T3 ON T3.movie_id = T1.movie_id AND T3.user_id = 8516503 WHERE      T2.user_id = 8516503 AND      T3.rating_score = 5;
SELECT      d.director_name,     m.movie_release_year,     AVG(r.rating_score) as avg_trialist_rating_score FROM      movies m JOIN      directors d ON m.director_id = d.director_id JOIN      ratings r ON m.movie_id = r.movie_id WHERE      r.user_trialist = 1 GROUP BY      m.movie_id, m.movie_title, m.movie_release_year ORDER BY      m.movie_popularity DESC LIMIT 1;
SELECT m.movie_title  FROM movies m  JOIN ratings r ON m.movie_id = r.movie_id  WHERE r.user_id = 57756708  AND r.rating_timestamp_utc = (SELECT MAX(r2.rating_timestamp_utc) FROM ratings r2 WHERE r2.user_id = 57756708);
SELECT      T1.movie_title,     AVG(T2.rating_score) AS average_rating_score,     T1.director_name,     T1.movie_release_year FROM      movies AS T1 JOIN      ratings AS T2 ON T1.movie_id = T2.movie_id GROUP BY      T1.movie_title,     T1.director_name,     T1.movie_release_year ORDER BY      T1.movie_release_year ASC LIMIT 10;
SELECT ord_date, SUM(qty) as total_order_quantity FROM sales GROUP BY ord_date ORDER BY total_order_quantity DESC LIMIT 1;
SELECT title.title FROM sales JOIN titles ON sales.title_id = titles.title_id WHERE YEAR(sales.ord_date) = 1992 GROUP BY titles.title_id ORDER BY SUM(sales.qty) DESC LIMIT 1;
SELECT title.title, title.price, title.pubdate  FROM sales JOIN titles ON sales.title_id = titles.title_id WHERE sales.payterms = 'ON invoice';
SELECT title  FROM titles  JOIN roysched ON titles.title_id = roysched.title_id  WHERE royalty >= 10 AND lorange <> 0;
SELECT title.title,royosched.royaltyper  FROM titles  JOIN roysched ON titles.title_id = roysched.title_id  WHERE titles.title_id = 'BU2075' AND roysched.lorange > 10000 AND roysched.hirange < 12000;
SELECT title.title, MIN(roysched.lorange) AS min_range  FROM titles title  JOIN roysched ON title.title_id = roysched.title_id  WHERE roysched.royaltyper = (SELECT MAX(royaltyper) FROM roysched)
SELECT T1.title, T3.pub_name  FROM titles AS T1  JOIN publishers AS T3 ON T1.pub_id = T3.pub_id  WHERE T3.country = 'USA';
SELECT T3.royaltyper  FROM titles AS T1 JOIN roysched AS T3 ON T1.title_id = T3.title_id WHERE T3.hirange < 20000 ORDER BY T1.ytd_sales DESC  LIMIT 1;
SELECT      t.title,     t.notes,     p.pub_name FROM      titles t JOIN      publishers p ON t.pub_id = p.pub_id WHERE      YEAR(t.pubdate) = 1991;
SELECT title.title FROM sales JOIN titles ON sales.title_id = titles.title_id JOIN stores ON sales.stor_id = stores.stor_id WHERE stores.state = 'CA' AND sales.qty > 20;
SELECT      s.stor_name AS 'store_with_highest_quantity',     MAX(sa.qty) AS 'highest_quantity',     MIN(sa.qty) AS 'least_quantity_title' FROM      stores s JOIN      sales sa ON s.stor_id = sa.stor_id;
SELECT T1.title, T3.pub_name, T4.au_ord, T4.royaltyper  FROM titles AS T1  JOIN titleauthor AS T4 ON T1.title_id = T4.title_id  JOIN authors AS T2 ON T2.au_id = T4.au_id  JOIN roysched AS T3 ON T1.title_id = T3.title_id  WHERE T1.title_id = 'BU 2075';
SELECT      stor_name,     (SUM(CASE WHEN payterms = 'Net 30' THEN qty ELSE 0 END) / SUM(qty)) * 100 AS percentage_net30 FROM      stores JOIN      sales ON stores.stor_id = sales.stor_id WHERE      stores.stor_id = '7066'
SELECT pub.pub_name, AVG(titles.ytd_sales)  FROM publishers pub  JOIN titles ON pub.pub_id = titles.pub_id  WHERE pub.pub_id = 877;
SELECT fname, lname  FROM employee  WHERE YEAR(hire_date) < 1990;
SELECT e.fname, e.lname, e.hire_date  FROM employee e  WHERE (SELECT MIN(job_lvl) FROM employee);
SELECT YEAR(hire_date) as year_with_most_hired_employees FROM employee GROUP BY YEAR(hire_date) ORDER BY COUNT(emp_id) DESC LIMIT 1;
SELECT e.fname, e.minit, e.lname  FROM employee e JOIN jobs j ON e.job_id = j.job_id WHERE j.max_lvl = (SELECT MAX(max_lvl) FROM jobs)
SELECT e.fname, e.minit, e.lname, e.hire_date  FROM employee e  JOIN jobs j ON e.job_id = j.job_id  WHERE j.job_desc = 'Chief Executive Officer';
SELECT e.fname, e.lname, p.pub_name  FROM employee e JOIN publishers p ON e.pub_id = p.pub_id WHERE p.country != 'USA';
SELECT e.fname, e.minit, e.lname, j.job_desc FROM employee e JOIN jobs j ON e.job_id = j.job_id JOIN publishers p ON e.pub_id = p.pub_id WHERE p.pub_name = 'GGG&G';
SELECT      p.pub_name,     t.type FROM      publishers p JOIN      titles t ON p.pub_id = t.pub_id GROUP BY      p.pub_name, t.type ORDER BY      p.pub_name;
SELECT pub_name FROM publishers p JOIN titles t ON p.pub_id = t.pub_id WHERE YEAR(t.pubdate) = 1991 GROUP BY p.pub_name ORDER BY COUNT(t.title_id) DESC LIMIT 1;
SELECT title  FROM titles  JOIN publishers ON titles.pub_id = publishers.pub_id  WHERE publishers.pub_name = 'Binnet & Hardley'  ORDER BY price DESC LIMIT 1;
SELECT e.fname, e.minit, e.lname, j.job_desc FROM employee e JOIN jobs j ON e.job_id = j.job_id WHERE j.min_lvl < 200 AND e.job_lvl > 200;
SELECT T3.au_lname, T3.au_fname  FROM titles AS T1  JOIN roysched AS T2 ON T1.title_id = T2.title_id  JOIN titleauthor AS T3 ON T1.title_id = T3.title_id  WHERE T1.type = 'business';
SELECT T1.title, T1.ytd_sales  FROM titles AS T1  JOIN titleauthor AS T2 ON T1.title_id = T2.title_id  JOIN authors AS T3 ON T3.au_id = T2.au_id  WHERE T3.contract = 0;
SELECT T3.title  FROM authors AS T1  JOIN titleauthor AS T2 ON T1.au_id = T2.au_id  JOIN titles AS T3 ON T3.title_id = T2.title_id  WHERE T1.state = 'CA' AND T1.contract = 0  ORDER BY T3.ytd_sales DESC  LIMIT 1;
SELECT au_fname, au_lname  FROM authors  JOIN titleauthor ON authors.au_id = titleauthor.au_id  JOIN titles ON titleauthor.title_id = titles.title_id  WHERE titles.title = 'Sushi, Anyone?' AND titles.ytd_sales = (SELECT MAX(ytd_sales) FROM titles) AND authors.contract = 1;
SELECT      (COUNT(CASE WHEN job_desc IN ('Editor', 'Designer') THEN emp_id END)      / CAST(TOTAL COUNT(emp_id) AS REAL)) * 100 AS percentage_of_employees FROM      jobs JOIN employee ON jobs.job_id = employee.job_id;
SELECT title.title, title.pub_id, AVG(title.ytd_sales) AS avg_ytd_sales FROM titles title WHERE title.ytd_sales > (SELECT AVG(ytd_sales) FROM titles) GROUP BY title.title, title.pub_id ORDER BY title.pub_id;
SELECT COUNT(*)  FROM publishers  WHERE state = 'USA';
SELECT pub_name, city, state, country  FROM publishers  WHERE pub_name = 'New Moon Books';
SELECT e.fname FROM employee e JOIN jobs j ON e.job_id = j.job_id WHERE j.job_desc = 'Managing Editor';
SELECT      MAX(e.job_lvl) AS highest_job_level FROM      employee e WHERE      e.hire_date = (SELECT MIN(hire_date) FROM employee);
SELECT T3.stor_address, T3.city  FROM sales AS T1  JOIN titles AS T2 ON T1.title_id = T2.title_id  JOIN stores AS T3 ON T1.stor_id = T3.stor_id  WHERE T1.qty = (SELECT MAX(qty) FROM sales)
SELECT title.price FROM titles JOIN sales ON titles.title_id = sales.title_id WHERE sales.qty = (SELECT MAX(qty) FROM sales);
SELECT T3.stor_name  FROM titles AS T1  JOIN titleauthor AS T2 ON T1.title_id = T2.title_id  JOIN sales AS T3 ON T2.au_id = T3.title_id  WHERE T1.title = 'Life Without Fear';
SELECT COUNT(*)  FROM stores  WHERE stor_id IN (     SELECT DISTINCT stor_id      FROM sales      JOIN titles ON sales.title_id = titles.title_id      WHERE title = 'Life Without Fear'  )  AND state = 'Massachusetts';
SELECT T3.country  FROM titles AS T1  JOIN publishers AS T3 ON T1.pub_id = T3.pub_id  WHERE T1.title = 'Life Without Fear';
SELECT pub.pub_name  FROM publishers pub  JOIN titles tit ON pub.pub_id = tit.pub_id  WHERE tit.price = (SELECT MAX(price) FROM titles)
SELECT COUNT(DISTINCT pu.pub_id) FROM publishers pu JOIN titles ti ON pu.pub_id = ti.pub_id WHERE pu.country = 'USA' AND ti.price > 15;
SELECT      t.title,     t.pub_id,     SUM(s.qty) as total_sales FROM      titles t JOIN      sales s ON t.title_id = s.title_id GROUP BY      t.title_id ORDER BY      total_sales DESC LIMIT 3;
SELECT COUNT(*)  FROM sales  JOIN titles ON sales.title_id = titles.title_id  JOIN titleauthor ON titles.title_id = titleauthor.title_id  JOIN authors ON titleauthor.au_id = authors.au_id  WHERE titles.type = 'business' AND authors.state = 'MA' AND stores.state = 'MA';
SELECT AVG(qty) AS average_quantity_order FROM sales WHERE title_id IN (     SELECT title_id     FROM titles     WHERE title = 'Life Without Fear' );
SELECT      (MAX(jl.job_lvl) - AVG(employees.job_lvl)) AS LevelsBetweenAverageAndMax,     AVG(employees.job_lvl) AS AverageJobLevel FROM      jobs jl JOIN      employee e ON jl.job_id = e.job_id WHERE      jl.job_desc = 'Managing Editor';
SELECT title.title, title.price  FROM titles title  JOIN roysched rs ON title.title_id = rs.title_id  WHERE title.type = 'business'  ORDER BY title.price ASC  LIMIT 1;
SELECT type  FROM titles  WHERE advance = (SELECT MAX(advance) FROM titles);
SELECT T1.royalty  FROM titles AS T1  JOIN sales AS T2 ON T1.title_id = T2.title_id  WHERE T2.qty = (SELECT MAX(qty) FROM sales);
SELECT job_lvl FROM employee WHERE lname = 'O''Rourke';
SELECT emp_id FROM employee WHERE minit IS NULL AND job_lvl = (SELECT MAX(job_lvl) FROM employee);
SELECT      t.title_id  FROM      titles t  JOIN      titleauthor ta ON t.title_id = ta.title_id  JOIN      authors a ON ta.au_id = a.au_id  WHERE      t.title = 'Sushi, Anyone?'  AND      EXISTS (         SELECT              1          FROM              roysched rs          WHERE              rs.title_id = t.title_id      ) AND      a.contract = 1;
SELECT e.fname, e.minit, e.lname  FROM employee AS e  JOIN jobs AS j ON e.job_id = j.job_id  WHERE j.max_lvl = (SELECT MAX(min_lvl) FROM jobs)
SELECT job_desc  FROM employee  JOIN authors ON employee.lname = authors.au_lname  WHERE authors.au_lname = 'S Afonso' AND authors.au_fname = 'Pedro';
SELECT      MAX(job_lvl) - emp.job_lvl AS level_left_to_reach_max FROM      employee emp WHERE      emp.lname = 'Roel' AND emp.minit = 'W';
SELECT notes  FROM sales  WHERE ord_date = '1994-09-14'
SELECT title.type  FROM titles  JOIN sales ON titles.title_id = sales.title_id  WHERE sales.ord_date = '1993-05-29';
SELECT * FROM publishers  WHERE country = 'France';
SELECT pub_name  FROM publishers  JOIN titles ON publishers.pub_id = titles.pub_id  WHERE title = 'Silicon Valley Gastronomic Treats';
SELECT T3.city  FROM authors AS T1  JOIN employee AS T2 ON T1.au_id = T2.emp_id  JOIN publishers AS T3 ON T2.pub_id = T3.pub_id  WHERE T1.au_lname = 'P Ashworth' AND T1.au_fname = 'Victoria';
SELECT COUNT(*)  FROM sales  JOIN stores ON sales.stor_id = stores.stor_id  WHERE stores.city = 'Remulade';
SELECT      (SUM(CASE WHEN T2.city = 'Fremont' AND YEAR(T1.ord_date) = 1993 THEN T2.qty ELSE 0 END) -       SUM(CASE WHEN T2.city = 'Portland' AND YEAR(T1.ord_date) = 1993 THEN T2.qty ELSE 0 END)) /      SUM(CASE WHEN T2.city = 'Fremont' AND YEAR(T1.ord_date) = 1993 THEN T2.qty ELSE 0 END) * 100 AS percent_more_sold FROM      sales T1 JOIN      stores T2 ON T1.stor_id = T2.stor_id
SELECT      (100 * (SUM(CASE WHEN job_desc = 'publisher' THEN 1 ELSE 0 END) - SUM(CASE WHEN job_desc = 'designer' THEN 1 ELSE 0 END))) /      (SUM(CASE WHEN job_desc = 'designer' THEN 1 ELSE 0 END)) AS percentage_more FROM      employee WHERE      emp_id IS NOT NULL;
SELECT CONCAT(fname, ' ', lname) AS full_name  FROM employee  WHERE YEAR(hire_date) BETWEEN 1990 AND 1995  ORDER BY job_lvl DESC;
SELECT title.title, title.type, title.price  FROM titles title JOIN roysched rs ON title.title_id = rs.title_id WHERE (SUM(rs.royalty) / COUNT(rs.title_id)) > (SELECT AVG(royalty) FROM roysched);
SELECT title.title, title.type, title.price  FROM titles title JOIN sales sale ON title.title_id = sale.title_id WHERE YEAR(sale.ord_date) = 1994  AND sale.qty < (SELECT AVG(qty) FROM sales WHERE YEAR(ord_date) = 1994)
SELECT title, type, price  FROM titles  JOIN publishers ON titles.pub_id = publishers.pub_id  WHERE publishers.pub_name = 'New Moon Books'  ORDER BY price ASC;
SELECT title.title, title.price, title.advance, title.royalty FROM titles AS title  JOIN publishers AS pub ON title.pub_id = pub.pub_id   WHERE pub.country = 'USA' ORDER BY title.royalty DESC;
SELECT      (AVG(T.ratio_royalty_us) - AVG(T.ratio_royalty_non_us)) as royalty_difference FROM     (SELECT          AVG(T.royalty) as ratio_royalty_us      FROM          `book_publishing_company.titles` T      JOIN `book_publishing_company.publishers` P ON T.pub_id = P.pub_id      WHERE          P.country = 'USA') as T us,     (SELECT          AVG(T.royalty) as ratio_royalty_non_us      FROM          `book_publishing_company.titles` T      JOIN `book_publishing_company.publishers` P ON T.pub_id = P.pub_id      WHERE          P.country != 'USA') as T non_us;
SELECT      AVG(US_job_lvl) - AVG(non_US_job_lvl) AS avg_level_diff  FROM      (SELECT emp.job_lvl AS job_lvl FROM employee emp      JOIN jobs j ON emp.job_id = j.job_id      JOIN publishers pb ON emp.pub_id = pb.pub_id      WHERE j.job_desc = 'Marketing manager' AND pb.country = 'USA') AS US_data,     (SELECT emp.job_lvl AS job_lvl FROM employee emp      JOIN jobs j ON emp.job_id = j.job_id      JOIN publishers pb ON emp.pub_id = pb.pub_id      WHERE j.job_desc = 'Marketing manager' AND pb.country != 'USA') AS non_US_data;
SELECT title, pub_id, price  FROM titles  JOIN titleauthor ON titles.title_id = titleauthor.title_id  WHERE notes LIKE '%helpful hints on how to use your electronic resources%';
SELECT title.title, title.pub_id, title.ytd_sales  FROM titles AS title  JOIN titleauthor AS ta ON title.title_id = ta.title_id  JOIN authors AS auth ON ta.au_id = auth.au_id  JOIN pub_info AS pi ON title.pub_id = pi.pub_id  WHERE auth.notes LIKE '%Carefully researched study of the effects of strong emotions on the body%';
SELECT title.title, SUM(sales.qty) as total_sales FROM titles title JOIN sales ON title.title_id = sales.title_id JOIN stores ON sales.stor_id = stores.stor_id WHERE stores.state = 'CA' GROUP BY title.title HAVING total_sales > (SELECT AVG(qty) FROM sales) ORDER BY total_sales DESC LIMIT 5;
SELECT Date_received FROM callcenterlogs WHERE ser_time = (SELECT MAX(ser_time) FROM callcenterlogs);
SELECT MIN(events.ser_start)  FROM events  WHERE events.Date_received = '2017-03-22';
SELECT      complaintID FROM      callcenterlogs WHERE      priority = (SELECT MAX(priority) FROM callcenterlogs WHERE complaintID IN ('CR2400594', 'CR2405641'))
SELECT first, middle, last  FROM client  WHERE sex = 'Male' AND year > 1990;
SELECT COUNT(*)  FROM clients  WHERE first = 'Diesel' AND last = 'Galloway';
SELECT `Sub-product`  FROM `events`  WHERE `Consumer complaint narrative` LIKE '%Diesel Galloway%'  AND `Date received` = '2014-07-03';
SELECT      c.Complaint_ID  FROM      callcenterlogs c JOIN      clients cl ON c.rand_client = cl.client_id JOIN      events ev ON c.Complaint_ID = ev.Complaint_ID WHERE      cl.first = 'Matthew'      AND cl.last = 'Pierce'      AND ev.Date_received = '2016-10-28'      AND ev.Tags IS NOT NULL      AND ev.Consumer_consent_provided <> 'N/A'      AND ev.Consumer_consent_provided <> ''     AND ev.Consumer_disputed = 'N'
SELECT      TIMESTAMPDIFF(DAY, `events.Date sent to company`, `callcenterlogs.Date received`) AS delay_days  FROM      retail_complains.client  JOIN      retail_complains.callcenterlogs ON client.client_id = callcenterlogs.rand_client  JOIN      retail_complains.events ON callcenterlogs.Complaint ID = events.Complaint ID  WHERE      client.first = 'Matthew'  AND      client.middle = 'Pierce'  AND      events.Date received = '2016-10-28';
SELECT first, middle, last  FROM client  JOIN events ON client.client_id = events.client_id  WHERE Date_received = '2017-03-27' AND server = 'MICHAL';
SELECT ser_time  FROM callcenterlogs  WHERE Date_received = '2017-03-27'  AND first = 'Rachel'  AND last = 'Hicks';
SELECT COUNT(*)  FROM client  JOIN district ON client.district_id = district.district_id  WHERE district.city = 'New York' AND events.Issue = 'Deposits and withdrawals' AND events.Sub-issue IS NULL;
SELECT first, middle, last  FROM client  JOIN events ON client.client_id = events.client_id  WHERE events.Company_response_to_consumer = 'In progress';
SELECT COUNT(*)  FROM retail_complains.client  JOIN retail_complains.events ON client.client_id = events.client_id  WHERE events.Timely_response = 'Yes' AND client.city = 'New York';
SELECT COUNT(*)  FROM retail_complains.events  JOIN retail_complains.client ON retail_complains.events.client_id = retail_complains.client.client_id  WHERE retail_complains.events.Product = 'Credit card' AND YEAR(retail_complains.events.Date_received) = 2016 AND retail_complains.client.sex = 'Male';
SELECT `Division` FROM `district` JOIN `client` ON `district.district_id` = `client.district_id` WHERE `first` = 'Diesel' AND `last` = 'Galloway';
SELECT first, middle, last  FROM client  JOIN district ON client.district_id = district.district_id  WHERE sex = 'Male' AND division = 'Pacific';
SELECT      AVG(e.ComplaintID) AS AverageComplaints FROM      events e  JOIN      client c ON e.ClientID = c.ClientID JOIN      state s ON c.State = s.StateCode JOIN      district d ON c.DistrictID = d.DistrictID WHERE      e.Product = 'Credit card'     AND s.City = 'New York'     AND e.DateReceived BETWEEN 2015 AND 2017;
SELECT      (SUM(CASE WHEN year(`Date received`) = 2017 AND city = 'New York' THEN 1 ELSE 0 END) -       SUM(CASE WHEN year(`Date received`) = 2016 AND city = 'New York' THEN 1 ELSE 0 END)) * 1.0 /      SUM(CASE WHEN year(`Date received`) = 2016 AND city = 'New York' THEN 1 ELSE 0 END) * 100 AS percentage_increase FROM retail_complains.callcenterlogs
SELECT ser_time  FROM callcenterlogs  WHERE rand_client = 'C00007127' AND Date_received = '2017-02-22';
SELECT state.Name  FROM state  JOIN client ON state.StateCode = client.state  WHERE client.email = 'wyatt.collins@gmail.com';
SELECT `Sub-product`  FROM `events`  JOIN `client` ON `events`.`Client_ID` = `client`.`client_id`  WHERE `client`.`first` = 'Lennox' AND `client`.`middle` = 'Oliver' AND `client`.`last` = 'Drake' AND `client`.`sex` = 'Male';
SELECT      events.Subissue  FROM      events  JOIN      client ON events.Client_ID = client.client_id  WHERE      client.First = 'Gunner'      AND client.Middle = 'Omer'      AND client.Last = 'Fuller'      AND client.Sex = 'Male';
SELECT `Consumer consent provided?` FROM `events` WHERE `Client_ID` IN (     SELECT `Complaint ID`     FROM `callcenterlogs`     WHERE `rand client` = 'Ms. Lyric Emely Taylor' )  AND `Date received` = '2016-05-20';
SELECT      EXTRACT(DAY FROM (FROM_UNIXTIME(events.date_sent_to_company) - FROM_UNIXTIME(callcenterlogs.date_received))) AS days_delay FROM      retail_complains.callcenterlogs JOIN      retail_complains.client ON callcenterlogs.rand_client = client.client_id JOIN      retail_complains.events ON callcenterlogs.Complaint_ID = events.Complaint_ID WHERE      client.first = 'Brantley'      AND client.middle = 'Julian'     AND client.last = 'Stanley'     AND client.sex = 'Male'     AND DATE_FORMAT(callcenterlogs.date_received, '%Y-%m-%d') = '2012-05-18';
SELECT T3.city  FROM reviews AS T1  JOIN district AS T3 ON T1.district_id = T3.district_id  WHERE T1.Date = '2017-07-22';
SELECT Reviews  FROM reviews  JOIN district ON reviews.district_id = district.district_id  WHERE city = 'Jacksonville' AND Date = '2017-07-22';
SELECT Product  FROM reviews  JOIN district ON reviews.district_id = district.district_id  WHERE Date = '2016-10-07' AND district.city = 'Indianapolis';
SELECT `Stars` FROM `reviews` WHERE `Product` = 'Eagle Capital' AND `district_id` IN (     SELECT `district_id`     FROM `district`     WHERE `city` = 'Little Rock' ) AND `Date` = '2013-04-04';
SELECT `year`, `month`, `day`  FROM `client`  WHERE `client_id` IN (     SELECT `rand client`      FROM `callcenterlogs`      WHERE `Complaint ID` = 'CR0217298' );
SELECT `phone`  FROM `client` WHERE `client_id` = (   SELECT `rand client`    FROM `callcenterlogs`   WHERE `Complaint ID` = 'CR0100432' );
SELECT      (SUM(CASE WHEN `sex` = 'Female' THEN 1 ELSE 0 END) * 1.0 / COUNT(`client_id`)) * 100 AS female_percentage FROM `callcenterlogs` JOIN `client` ON `callcenterlogs.rand_client` = `client.client_id` WHERE `Date received` = '2017-03-27'
SELECT      (SUM(CASE WHEN c.sex = 'Male' AND c.first = 'Mr' AND c.middle = 'Mason' AND c.last = 'Lopez' THEN CASE WHEN el."Consumer consent provided?" = 'Consent provided' THEN 1 ELSE 0 END ELSE 0 END)      / COUNT(c.client_id)) * 1.0 AS percentage FROM      client c JOIN      events el ON c.client_id = el.client_ID;
SELECT `Complaint ID` FROM callcenterlogs WHERE `Date received` BETWEEN '2017-01-01' AND '2017-01-31' AND `priority` = 2;
SELECT      first,     middle,     last,     year,     month,     day,     email FROM      client WHERE      age > 65 ORDER BY      age DESC;
SELECT Product, COUNT(*) AS FiveStarCount FROM reviews WHERE Stars = 5 GROUP BY Product ORDER BY FiveStarCount DESC LIMIT 1;
SELECT DISTINCT state FROM state WHERE Region = 'South';
SELECT T1.email  FROM client AS T1  JOIN callcenterlogs AS T2  ON T1.client_id = T2.rand_client  WHERE T2.outcome = 'Hang';
SELECT AVG(T2.age)  FROM state AS T1  JOIN client AS T2 ON T1.StateCode = T2.state  JOIN district AS T3 ON T3.district_id = T2.district_id  WHERE T1.Region = 'Midwest'
SELECT first, middle, last, phone FROM client JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client WHERE `Submitted via` = 'fax';
SELECT DISTINCT d.city, d.state_abbrev FROM district d JOIN reviews r ON d.district_id = r.district_id WHERE r.Product = 'Eagle Capital' AND r.Stars < (SELECT AVG(r2.Stars) FROM reviews r2 WHERE r2.Product = 'Eagle Capital')
SELECT COUNT(*)  FROM client  JOIN district ON client.district_id = district.district_id  WHERE district.division = 'mountain'  AND client.age BETWEEN 12 AND 20;
SELECT COUNT(*)  FROM retail_complains.client  JOIN retail_complains.events ON client.client_id = events.client_id  WHERE events.Product = 'Credit card' AND client.sex = 'female';
SELECT first, middle, last  FROM client  WHERE birth_year BETWEEN 1980 AND 2000  AND sex = 'Male'  AND events.event = 'Referral'
SELECT      MAX(Complaint_ID) AS max_complaints,     SUM(CASE WHEN state = 'florida' THEN 1 ELSE 0 END) AS florida_complaints_count,     SUM(CASE WHEN Submitted_via = 'form' THEN 1 ELSE 0 END) AS form_complaints_count,     SUM(CASE WHEN Submitted_via = 'email' THEN 1 ELSE 0 END) AS email_complaints_count,     SUM(CASE WHEN Submitted_via = 'social_media' THEN 1 ELSE 0 END) AS social_media_complaints_count FROM      callcenterlogs JOIN      events ON callcenterlogs.Complaint_ID = events.Complaint_ID WHERE      state = 'florida';
SELECT      YEAR(Date received) AS ComplaintYear,     AVG(Complaint ID) AS AverageComplaintsPerYear FROM      callcenterlogs JOIN      state ON city = 'New Bedford' WHERE      state.State = 'Massachusetts' -- Assuming New Bedford is in Massachusetts GROUP BY      ComplaintYear;
SELECT      (SUM(CASE WHEN `Consumer disputed?` = 'Yes' AND `city` = 'Houston' THEN 1 ELSE 0 END) * 1.0 / COUNT(`client_id`)) * 100 AS percentage_disputed_houston_consumers FROM `callcenterlogs` JOIN `client` ON `callcenterlogs.rand client` = `client.client_id` JOIN `district` ON `client.district_id` = `district.district_id` WHERE `district.city` = 'Houston';
SELECT COUNT(DISTINCT client.client_id) FROM client JOIN district ON client.district_id = district.district_id WHERE district.city = 'Syracuse';
SELECT      (SUM(CASE WHEN state = 'California' AND priority = 1 THEN 1 ELSE 0 END) * 1.0 / COUNT(CASE WHEN state = 'California' THEN 'California' END)) * 100 AS priority_one_percentage FROM      callcenterlogs JOIN      state ON callcenterlogs.state = state.StateCode;
SELECT      (AVG(client.age) - AVG(client.age)) AS AgeDifference FROM      client JOIN      state ON client.state = state.StateCode WHERE      client.age > 65 AND state.Region = 'Northeast' UNION ALL SELECT      (AVG(client.age) - AVG(client.age)) AS AgeDifference FROM      client JOIN      state ON client.state = state.StateCode WHERE      (client.age BETWEEN 35 AND 55) AND state.Region = 'Northeast';
SELECT `Complaint ID`  FROM `callcenterlogs`  ORDER BY `ser_time` DESC  LIMIT 3;
SELECT COUNT(*)  FROM client  WHERE email NOT LIKE '%@gmail.com';
SELECT client_id FROM callcenterlogs WHERE `Consumer consent provided?` IS NULL OR `Consumer consent provided?` = 'N/A' OR `Consumer consent provided?` = '';
SELECT      c.Complaint_ID  FROM      callcenterlogs c JOIN      events e ON c.Complaint_ID = e.Complaint_ID WHERE      e.Date_sent_to_company = '2014-09-25' ORDER BY      DATEDIFF(e.Date_sent_to_company, c.Date_received) DESC  LIMIT 1;
SELECT `Date received`, `Complaint ID`  FROM `callcenterlogs`  WHERE `priority` = 2  ORDER BY `Date received`;
SELECT COUNT(*)  FROM callcenterlogs  WHERE `outcome` != 'AGENT';
SELECT COUNT(*)  FROM callcenterlogs  JOIN client ON callcenterlogs.rand_client = client.client_id  JOIN events ON callcenterlogs.Complaint_id = events.Complaint_id  WHERE client.first = 'Sharon' AND events.Product = 'Credit Card';
SELECT      state.Region FROM      reviews JOIN      district ON reviews.district_id = district.district_id JOIN      state ON district.state_abbrev = state.StateCode WHERE      reviews.Stars = 1 GROUP BY      state.Region ORDER BY      COUNT(reviews.Stars) DESC LIMIT 1;
SELECT      DISTINCT YEAR(client.year)  FROM      client JOIN      events ON client.client_id = events.client_id WHERE      events.Sub-product = '(CD) Certificate of deposit'
SELECT COUNT(*)  FROM events  WHERE `Issue` = 'Billing disputes' AND `Division` = 'Mountain';
SELECT COUNT(*)  FROM client  JOIN state ON client.state = state.StateCode  WHERE sex = 'Male' AND state.State = 'Massachusetts';
SELECT c.last FROM client c JOIN callcenterlogs cc ON c.client_id = cc.rand_client WHERE cc.type = 'PS' AND cc.server = 'TOVA'
SELECT COUNT(*)  FROM reviews  JOIN client ON reviews.district_id = client.district_id  WHERE age < 35 AND Product = 'Eagle National Mortgage' AND Stars = 1;
SELECT COUNT(*)  FROM client  WHERE sex = 'Male' AND YEAR(year) = 1977 AND priority = 0;
SELECT first  FROM client  JOIN events ON client.client_id = events.Client_ID  WHERE events.Tags = 'Older American' AND events."Consumer consent provided?" NOT IN ('N/A', null, 'empty');
SELECT state.State FROM state JOIN callcenterlogs ON state.StateCode = callcenterlogs.state  WHERE callcenterlogs.priority = 0 GROUP BY state.State ORDER BY COUNT(callcenterlogs.ComplaintID) DESC LIMIT 1;
SELECT COUNT(*)  FROM callcenterlogs  JOIN client ON callcenterlogs.rand_client = client.client_id  JOIN events ON callcenterlogs.Complaint_id = events.Complaint_id  WHERE client.sex = 'Female'  AND callcenterlogs.ser_time BETWEEN '15:00:01' AND '23:59:59'  AND events.Timely_response = 'Yes';
SELECT COUNT(*)  FROM callcenterlogs  WHERE server = 'DORIT'  AND ser_time < '00:05:00'  AND `Company response to consumer` = 'Closed with explanation'  AND `Submitted via` = 'phone';
SELECT COUNT(*)  FROM client  WHERE last = 'Alvarado' AND state = 'MD';
SELECT COUNT(*)  FROM reviews  WHERE age BETWEEN 30 AND 50  AND Review LIKE '%Great%'
SELECT      c.address_1,     COALESCE(c.address_2, '') AS address_2 FROM      client c JOIN      events e ON c.client_id = e.client_id WHERE      e.Timely_response = 'Yes' AND      e."Consumer disputed?" = 'Yes';
SELECT COUNT(*)  FROM retail_complains.client  JOIN retail_complains.events ON client.client_id = events.client_id  WHERE client.sex = 'Female'  AND YEAR(events.year) = 2000  AND events.Submitted_via != 'Web';
SELECT `Consumer complaint narrative` FROM `events` JOIN `client` ON `client.client_id` = `events.client_ID` WHERE `first` = 'Brenda' AND `middle` = '' AND `last` = 'Mayer';
SELECT COUNT(*)  FROM callcenterlogs  JOIN client ON callcenterlogs.rand_client = client.client_id  WHERE client.email LIKE '%gmail.com'  AND callcenterlogs.Date_received BETWEEN '2017-01-02' AND '2017-02-28';
SELECT      AVG(Reviews) AS average_stars FROM      reviews r JOIN      district d ON r.district_id = d.district_id JOIN      state s ON d.state = s.State WHERE      s.State = 'Oregon';
SELECT      (SUM(CASE WHEN client.sex = 'M' AND client.age >= 50 THEN 1 ELSE 0 END) * 100.0 / SUM(CASE WHEN client.sex IS NOT NULL THEN 1 ELSE 0 END)) AS percentage FROM      client JOIN      events ON client.client_id = events.client_id WHERE      events.Submitted_via = 'Postal mail';
SELECT AVG(T2.age)  FROM state AS T1  JOIN client AS T2 ON T1.StateCode = T2.state  JOIN district AS T3 ON T3.district_id = T2.district_id  WHERE T1.State = 'CT' AND T3.city = 'Norwalk'
SELECT COUNT(*)  FROM reviews  WHERE District_id IN (     SELECT district_id      FROM district      WHERE State = 'Missouri' AND city = 'Kansas City' ) AND Stars = 1;
SELECT state.State FROM state JOIN district ON state.StateCode = district.state_abbrev JOIN reviews ON district.district_id = reviews.district_id WHERE reviews.stars = 5 GROUP BY state.State ORDER BY COUNT(reviews.client_id) DESC LIMIT 1;
SELECT state.Region  FROM client  JOIN state ON client.state = state.StateCode  WHERE client.first = 'Noah' AND client.middle = 'Thompson';
SELECT `Submitted via`  FROM retail_complains.events  WHERE `first` = 'Kyran' AND `last` = 'Muller';
SELECT DISTINCT e.Product  FROM events e  JOIN client c ON e.client_id = c.client_id  WHERE c.year > 2005;
SELECT ser_time  FROM callcenterlogs  JOIN client ON callcenterlogs.rand_client = client.client_id  WHERE first = 'Kendall' AND middle = 'Allen' AND Product = 'Credit Card';
SELECT `Issue` FROM `events` WHERE `ser_time` = (SELECT MAX(`ser_time`) FROM `callcenterlogs`);
SELECT COUNT(*)  FROM client  JOIN state ON client.state = state.StateCode  JOIN district ON client.district_id = district.district_id  WHERE state.State = 'New York' AND district.city = 'New York' AND client.Submitted_via = 'Fax';
SELECT      (SUM(CASE WHEN client.sex = 'Male' THEN 1 ELSE 0 END) * 1.0 / COUNT(client.client_id)) * 100 AS percentage_credit_card_complaints FROM      retail_complains.events          INNER JOIN      retail_complains.client ON events.client_id = client.client_id WHERE      events.Product = 'Credit card';
SELECT first, middle, last  FROM client  JOIN events ON client.client_id = events.client_id  WHERE full_names IN ('first, middle, last') AND events.Tags LIKE '%Older American%' AND (CONSUMER_CONSENT_PROVIDED IS NULL OR CONSUMER_CONSENT_PROVIDED = '' OR CONSUMER_CONSENT_PROVIDED = 'N/A');
SELECT      MAX(year) AS year,     MAX(month) AS month,     MAX(day) AS day FROM      client;
SELECT COUNT(*)  FROM events  WHERE Consumer_disputed? = 'No'  AND Timely_response? = 'No'
SELECT COUNT(*)  FROM callcenterlogs  WHERE ser_time > '00:15:00';
SELECT      Issue  FROM      events  WHERE      priority = 2  GROUP BY      Issue  ORDER BY      COUNT(Issue) DESC  LIMIT 1;
SELECT first, last  FROM client  JOIN district ON client.district_id = district.district_id  WHERE division = 'Pacific'
SELECT T1.social  FROM client AS T1  JOIN events AS T2 ON T1.client_id = T2.Client_ID  WHERE T1.social IS NOT NULL GROUP BY T1.client_id  ORDER BY COUNT(T2.Client_ID) DESC  LIMIT 1;
SELECT d.city FROM district d JOIN reviews r ON d.district_id = r.district_id WHERE r.Stars = 1 GROUP BY d.city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT      c.address_1,     c.address_2 FROM      retail_complains.client c JOIN      retail_complains.events e ON c.client_id = e.client_id WHERE      e.Submittevd_via = 'Postal mail' AND      e.Date_received = '2012-03-14';
SELECT COUNT(*)  FROM client  JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client  WHERE client.sex = 'Female' AND callcenterlogs.priority = 1;
SELECT DISTINCT e.server  FROM events e  JOIN callcenterlogs c ON e.Complaint_ID = c.Complaint_ID  WHERE c.Submitted_via = 'Phone' AND e.Timely_response = 'No';
SELECT      issues.Issue  FROM      issues  JOIN      events ON issues.Complaint_ID = events.Complaint_ID  JOIN      client ON events.Client_ID = client.client_id  WHERE      client.first = 'Kaitlyn' AND client.middle = 'Eliza' AND client.last = 'Elliott';
SELECT state.State  FROM client  JOIN state ON client.state = state.StateCode  WHERE client.email = 'skylar.ramirez@gmail.com';
SELECT      state.Region FROM      client JOIN      state ON client.state = state.StateCode GROUP BY      state.Region ORDER BY      COUNT(client.client_id) DESC LIMIT 1 OFFSET 1;
SELECT c.first, c.middle, c.last  FROM callcenterlogs cl  JOIN client c ON cl.rand_client = c.client_id  WHERE cl.server = 'MORIAH' AND cl.Date_received = '2013-09-11';
SELECT      CASE          WHEN `client.age` BETWEEN 13 AND 19 THEN 'teenager'         WHEN `client.age` BETWEEN 19 AND 65 THEN 'adult'         ELSE 'elder'     END AS age_group,     AVG(`events.ser_time` / 60) AS avg_time_in_minutes FROM `retail_complains.client` JOIN `retail_complains.callcenterlogs` ON `client.client_id` = `callcenterlogs.rand_client` JOIN `retail_complains.events` ON `callcenterlogs.Complaint ID` = `events.Complaint ID` GROUP BY age_group;
SELECT      (SUM(CASE WHEN client.age <= 65 THEN 1 ELSE 0 END) / COUNT(client.client_id)) * 100 AS percentage_of_complaints_from_elderly FROM      client JOIN      callcenterlogs ON client.client_id = callcenterlogs.rand_client
SELECT      (COUNT(CASE WHEN client.sex = 'Male' AND client.city = 'Indianapolis' THEN client.client_id END)      / NULLIF(COUNT(client.client_id), 0)) * 100 AS percentage_male_clients FROM      client JOIN      district ON client.district_id = district.district_id WHERE      district.city = 'Indianapolis';
SELECT      CASE          WHEN RIGHT(email, LEN('%@gmail.com')) = '%@gmail.com' THEN 'Google Account'         ELSE 'Microsoft Account'     END AS AccountType,     COUNT(*) AS ClientCount FROM      client WHERE      age BETWEEN 13 AND 19     AND (email LIKE '%@gmail.com' OR email LIKE '%@outlook.com') GROUP BY      CASE          WHEN RIGHT(email, LEN('%@gmail.com')) = '%@gmail.com' THEN 'Google Account'         ELSE 'Microsoft Account'     END ORDER BY      ClientCount DESC;
SELECT first, middle, last  FROM client  WHERE email = 'emily.garcia43@outlook.com';
SELECT first  FROM client  WHERE priority = 2;
SELECT T2.email  FROM callcenterlogs AS T1  JOIN client AS T2 ON T1.rand_client = T2.client_id  WHERE T1.type = 'PS'
SELECT `last` FROM `client` JOIN `state` ON `client.state` = `state.StateCode` WHERE `client.age` <= 65 AND `events.server` = 'YIFAT'
SELECT COUNT(*)  FROM client  JOIN state ON client.state = state.StateCode  WHERE state.State = 'New York'  AND city = 'New York City'  AND outcome = 'AGENT';
SELECT first, middle, last  FROM client  JOIN events ON client.client_id = events.client_id  WHERE Consumer_disputed? = 'Yes';
SELECT `Complaint ID` FROM `client` WHERE `year` = 1931;
SELECT      (COUNT(CASE WHEN T2.email LIKE '%@gmail.com' THEN T1.Complaint_ID ELSE NULL END)      / COUNT(T1.Complaint_ID)) * 100 AS google_account_percentage FROM      callcenterlogs T1 JOIN      client T2 ON      T1.rand_client = T2.client_id WHERE      T2.email LIKE '%@gmail.com' AND      T1.server = 'ZOHARI';
SELECT first, middle, last  FROM client  JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client  WHERE callcenterlogs.ser_time LIKE '%:20:00';
SELECT `last`  FROM client  WHERE `priority` = 0;
SELECT call_id FROM callcenterlogs WHERE first LIKE 'B%';
SELECT `Product` FROM `events` JOIN `client` ON `events.Client_ID` = `client.client_id` WHERE `first` = 'Alexander' AND `middle` = 'Bronx' AND `last` = 'Lewis';
SELECT first  FROM client  WHERE sex = 'Male'  AND EXISTS (   SELECT 1    FROM callcenterlogs    WHERE call_id = client.client_id    AND Timely response? = 'No' );
SELECT e.Product FROM events e JOIN client c ON e.client_ID = c.client_id WHERE c.age > 65 GROUP BY e.Product ORDER BY COUNT(DISTINCT e.client_ID) DESC LIMIT 1;
SELECT      c.age,     COUNT(*) AS complaints_count FROM      retail_complains.events e JOIN      retail_complains.client c ON e.Client_ID = c.client_id WHERE      e.Product = 'Credit Card' GROUP BY      CASE          WHEN c.age > 19 AND c.age <= 65 THEN 'adult'         WHEN c.age > 12 AND c.age <= 19 THEN 'teenager'         ELSE 'elder'     END ORDER BY      complaints_count DESC;
SELECT DISTINCT e.Issue, e.Sub_issue  FROM events e JOIN callcenterlogs c ON e.Complaint_ID = c.Complaint_ID WHERE c.ser_time < '00:10:00';
SELECT Date_received FROM callcenterlogs WHERE `Submitted via` = 'Fax';
SELECT first, middle, last  FROM client  JOIN events ON client.client_id = events.client_id  WHERE Issue = 'Balance transfer';
SELECT T1.email  FROM client AS T1  JOIN events AS T2  ON T1.client_id = T2.Client_ID  WHERE T2.Submitted_via = 'Postal mail';
SELECT AVG(T2.age)  FROM `callcenterlogs` AS T1  JOIN `client` AS T2  ON T1.rand_client = T2.client_id  WHERE T1.server = 'Closed with relief';
SELECT AVG(T2.age)  FROM `callcenterlogs` AS T1  JOIN `client` AS T2  ON T1.rand_client = T2.client_id  WHERE T1.type = 'TT'
SELECT      c.Complaint_ID,     c.call_id,     c.phonefinal FROM      callcenterlogs c JOIN      events e ON c.Complaint_ID = e.Complaint_ID WHERE      c.server = 'AVIDAN' AND      c.Date_received BETWEEN '2014-01-01' AND '2014-12-30';
SELECT AVG(events.ser_time)  FROM callcenterlogs  JOIN events ON callcenterlogs.Complaint_ID = events.Complaint_ID  WHERE events.server = 'DARMON' AND events.Date_received BETWEEN '2017-01-01' AND '2017-04-01';
SELECT COUNT(*) AS yearly_complaints FROM events WHERE product = 'Credit card' AND issue = 'Overlimit fee';
SELECT COUNT(*)  FROM client  JOIN district ON client.district_id = district.district_id  WHERE district.division = 'Middle Atlantic'  AND client.sex = 'Female'  AND client.age < 18;
SELECT      MAX(CAST(SUBSTRING(address_1, CHARINDEX(',', REVERSE(address_1)) + 1 AS INT)) * 100 + SUBSTRING(address_1, CHARINDEX(',', address_1) + 1, CHARINDEX(' ', address_1, CHARINDEX(',', address_1)) - CHARINDEX(',', address_1) - 1)) as DAY,     year,     month,     email,     phone FROM      client JOIN      district ON client.district_id = district.district_id WHERE      city = 'Indianapolis' ORDER BY      year DESC,     MONTH DESC,     DAY DESC LIMIT 1;
SELECT      d.city,     COUNT(r.reviews) AS reviews_count FROM      district d JOIN      reviews r ON d.district_id = r.district_id WHERE      r.Stars = 5 AND r.Date LIKE '2016%' GROUP BY      d.city ORDER BY      reviews_count DESC LIMIT 5;
SELECT MAX(ser_time)  FROM callcenterlogs  WHERE type = 'arbitration';
SELECT `social`, `State`  FROM `client`  WHERE `phone` = '100-121-8371';
SELECT      c.first,      c.middle,      c.last,     c.phone FROM      client c JOIN      district d ON c.district_id = d.district_id WHERE      c.first IS NOT NULL AND     c.middle IS NOT NULL AND     c.last IS NOT NULL AND     d.division = 'Pacific';
SELECT      c.social,     e."Date sent to company",     e."Date received",     e."Company response to consumer",     (e."Date sent to company" - e."Date received") AS "Days of Delay" FROM      retail_complains.callcenterlogs cl JOIN      retail_complains.client c ON cl.rand_client = c.client_id JOIN      retail_complains.events e ON cl.Complaint ID = e.Complaint ID WHERE      (e."Date sent to company" - e."Date received") =      (SELECT MAX(Date_sent_to_company - Date_received)       FROM retail_complains.events);
SELECT COUNT(*)  FROM client  WHERE sex = 'Female' AND age > 30;
SELECT first, last  FROM client  JOIN state ON client.state = state.StateCode  WHERE state.State = 'New York' AND state.City = 'New York City';
SELECT MAX(age) AS oldest_age FROM client WHERE sex = 'Male';
SELECT      d.division      , COUNT(DISTINCT c.client_id) AS num_clients  FROM      client c      JOIN district d ON c.district_id = d.district_id  GROUP BY      d.division;
SELECT      (COUNT(CASE WHEN client.sex = 'Female' AND client.division = 'Middle Atlantic' THEN client.client_id END)      / COUNT(CASE WHEN client.division = 'Middle Atlantic' THEN client.client_id END)) * 100 AS percentage_female_clients FROM      client;
SELECT AVG(T2.age)  FROM state AS T1  JOIN client AS T2 ON T1.StateCode = T2.state  JOIN district AS T3 ON T3.district_id = T2.district_id  WHERE T1.Region = 'South Atlantic'
SELECT d.city FROM district d JOIN client c ON d.district_id = c.district_id JOIN state s ON d.state_abbrev = s.StateCode WHERE s.Region = 'Midwest' GROUP BY d.city ORDER BY COUNT(c.client_id) ASC LIMIT 1;
SELECT COUNT(*)  FROM client  JOIN state ON client.state = state.StateCode  WHERE state.Region = 'Northeast'  AND client.email LIKE '%@outlook.com';
SELECT      d.city FROM      state s JOIN      district d ON s.StateCode = d.state_id JOIN      client c ON d.district_id = c.district_id WHERE      s.Region = 'West North Central' AND      c.age > 60 GROUP BY      d.city ORDER BY      COUNT(c.client_id) DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN T2.priority = 2 AND T1.year(Date_received) = 2017 THEN T2.Complaint_ID ELSE NULL END) * 100.0 / COUNT(T2.Complaint_ID)) AS percentage FROM      retail_complains.events AS T1 JOIN      retail_complains.callcenterlogs AS T2 ON T1.Complaint_ID = T2.Complaint_ID;
SELECT state_abbrev, MAX(COUNT(city)) as most_cities FROM district GROUP BY state_abbrev;
SELECT first, phone  FROM client  WHERE client_id = (SELECT client_id FROM callcenterlogs WHERE Complaint_ID = 'CR0922485');
SELECT email  FROM client  JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client  WHERE Date_received = '2014-07-03';
SELECT COUNT(*)  FROM retail_complains.events  JOIN retail_complains.client ON retail_complains.events.client_id = retail_complains.client.client_id  JOIN retail_complains.district ON retail_complains.client.district_id = retail_complains.district.district_id  WHERE DATE(retail_complains.events.Date_received) LIKE '2012%' AND retail_complains.district.city = 'Omaha' AND retail_complains.events.Product = 'Credit card'
SELECT COUNT(*)  FROM callcenterlogs  JOIN client ON callcenterlogs.rand_client = client.client_id  JOIN state ON client.state = state.StateCode  WHERE Date_received BETWEEN 2012 AND 2015  AND Submitted_via = 'Email'  AND sex = 'Female';
SELECT DISTINCT c.phone, e.Complaint_ID FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Company_response_to_consumer = 'In progress'
SELECT COUNT(*)  FROM retail_complains.events  JOIN retail_complains.client ON retail_complains.events.client_id = retail_complains.client.client_id  JOIN retail_complains.district ON retail_complains.client.district_id = retail_complains.district.district_id  WHERE DATE(retail_complains.events.Date_received) LIKE '2015%' AND retail_complains.events.Issue = 'Billing disputes' AND retail_complains.district.city = 'Portland'
SELECT      (COUNT(CASE          WHEN DATEDIFF(`Date sent to company`, `Date received`) > 5 THEN `Complaint ID` END)      / COUNT(`Complaint ID`)) * 100 AS percentage FROM `callcenterlogs` JOIN `events` ON `callcenterlogs.Complaint ID` = `events.Complaint ID` JOIN `client` ON `callcenterlogs.rand client` = `client.client_id` JOIN `district` ON `client.district_id` = `district.district_id` WHERE YEAR(`Date received`) = 2014 AND `city` = 'Houston'
SELECT COUNT(*)  FROM callcenterlogs  JOIN events ON callcenterlogs.Complaint ID = events.Complaint ID  WHERE Date received LIKE '2012%' AND Submitted via = 'Email';
SELECT T1.client_id  FROM callcenterlogs AS T1 JOIN events AS T2 ON T1.Complaint_ID = T2.Complaint_ID WHERE T1.[Date received] = '2014-04-16' AND T2.Submitted_via = 'Fax';
SELECT ReviewDate FROM reviews JOIN district ON reviews.district_id = district.district_id WHERE Product = 'Eagle Capital' AND district.city = 'Indianapolis' AND district.state_abbrev = 'IN';
SELECT COUNT(*)  FROM callcenterlogs  JOIN events ON callcenterlogs.Complaint ID = events.Complaint ID  WHERE Date received LIKE '2015%' AND Timely response? = 'Yes' AND `Company response to consumer` = 'Closed with explanation';
SELECT `Date received` FROM `callcenterlogs` JOIN `client` ON `callcenterlogs.rand client` = `client.client_id` WHERE `client.sex` = 'Female' AND `client.age` BETWEEN 20 AND 40;
SELECT Product  FROM reviews  WHERE Stars = 1 AND Date = '2016-03-14' AND city = 'Newton' AND state_abbrev = 'MA';
SELECT COUNT(*)  FROM reviews  JOIN district ON reviews.district_id = district.district_id  WHERE Product = 'Eagle National Bank'  AND Stars = 5  AND city = 'Nashville'  AND state_abbrev = 'TN';
SELECT      e.Issue  FROM      events e  JOIN      client c ON e.Client_ID = c.client_id  WHERE      c.sex = 'Male' AND c.age < 25;
SELECT DISTINCT T2.Product  FROM reviews AS T1  JOIN district AS T3 ON T1.district_id = T3.district_id  JOIN state AS T4 ON T3.state_abbrev = T4.State  WHERE T4.Region = 'midwest' AND T1.Stars = 1;
SELECT DISTINCT e.Product  FROM events e  JOIN callcenterlogs c ON e.Complaint_ID = c.Complaint_ID  WHERE c.Date_received LIKE '%03%' AND c.Date_received LIKE '2017%'  AND c.server = 'TOVA';
SELECT T3.division  FROM reviews AS T1  JOIN district AS T3 ON T1.district_id = T3.district_id  WHERE T1.Stars = 5 AND T1.Date = '2017-12-17' AND T1.Product = 'Eagle National Mortgage';
SELECT T3.phone  FROM events AS T1  JOIN client AS T3 ON T1.client_ID = T3.client_id  WHERE T1.Product = 'credit card'  AND T3.age = (SELECT MAX(age) FROM client WHERE client_id IN (SELECT client_id FROM events WHERE Product = 'credit card'))
SELECT COUNT(*)  FROM callcenterlogs  WHERE Date_received LIKE '2014%' AND Submitted_via = 'Phone';
SELECT      e.Product,     e.Sub-issue FROM      events e JOIN      client c ON e.client_id = c.client_id WHERE      c.age > (SELECT AVG(age) * 0.6 FROM client)
SELECT      (COUNT(CASE WHEN d.division = 'East North Central' THEN r.district_id ELSE NULL END) / COUNT(r.district_id)) * 100 AS percentage FROM      reviews r JOIN      district d ON r.district_id = d.district_id WHERE      r.Stars = 5;
SELECT T2.company_name  FROM movie_company AS T1  JOIN production_company AS T2 ON T1.company_id = T2.company_id  JOIN movie AS T3 ON T1.movie_id = T3.movie_id  WHERE T3.title = 'Four Rooms';
SELECT COUNT(DISTINCT T3.company_id)  FROM movie AS T1  JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id  JOIN production_company AS T3 ON T2.company_id = T3.company_id  WHERE T1.title = 'Four Rooms'
SELECT title  FROM movie  JOIN movie_company ON movie.movie_id = movie_company.movie_id  WHERE company_id IN (     SELECT company_id      FROM production_company      WHERE company_name = 'Universal Pictures' );
SELECT title  FROM movie  JOIN movie_company mc ON movie.movie_id = mc.movie_id  JOIN production_company pc ON pc.company_id = mc.company_id  WHERE pc.company_name = 'Universal Pictures'  ORDER BY movie.release_date DESC  LIMIT 1;
SELECT p.person_name  FROM movie_crew mc  JOIN person p ON mc.person_id = p.person_id  WHERE mc.movie_id IN (     SELECT m.movie_id      FROM movie m      WHERE m.title = 'Pirates of the Caribbean: At World''s End' ) AND mc.job = 'Director of Photography';
SELECT mc.job  FROM movie_crew mc  JOIN person p ON mc.person_id = p.person_id  JOIN movie m ON mc.movie_id = m.movie_id  WHERE p.person_name = 'Dariusz Wolski' AND m.title = 'Pirates of the Caribbean: At World''s End';
SELECT T3.person_name  FROM movie_crew AS T1  JOIN person AS T3 ON T1.person_id = T3.person_id  JOIN movie AS T2 ON T2.movie_id = T1.movie_id  WHERE T2.title = 'Pirates of the Caribbean: At World''s End';
SELECT COUNT(*)  FROM movie_crew  WHERE movie_id = (SELECT movie_id FROM movie WHERE title = 'Pirates of the Caribbean: At World''s End')  AND job = 'Producer';
SELECT p.person_name  FROM person p  JOIN movie_crew mc ON p.person_id = mc.person_id  WHERE mc.movie_id IN (     SELECT m.movie_id      FROM movie m      WHERE m.title = 'Pirates of the Caribbean: At World''s End' ) AND mc.job = 'Producer';
SELECT COUNT(*)  FROM movie_crew  WHERE person_id IN (     SELECT person_id      FROM person      WHERE person_name = 'Dariusz Wolski' ) AND job = 'Director of Photography';
SELECT title  FROM movie  JOIN movie_crew ON movie.movie_id = movie_crew.movie_id  WHERE movie_crew.job = 'Director of Photography' AND movie_crew.person_id IN (     SELECT person_id      FROM person      JOIN movie_crew ON person.person_id = movie_crew.person_id      WHERE person_name = 'Dariusz Wolski' ) AND vote_average = (     SELECT MAX(vote_average)      FROM movie  )
SELECT      m.release_date  FROM      movie_crew mc  JOIN      person p ON mc.person_id = p.person_id  JOIN      movie m ON mc.movie_id = m.movie_id  WHERE      p.person_name = 'Dariusz Wolski' AND      mc.job = 'Crew Member' AND      m.release_date = (SELECT MAX(release_date) FROM movie);
SELECT      (COUNT(CASE WHEN T2.vote_average > 5 THEN 1 END) / COUNT(T2.movie_id)) * 100 AS percentage FROM      movie_crew AS T1 JOIN      movie AS T2 ON T1.movie_id = T2.movie_id WHERE      T1.person_id IN (         SELECT              T3.person_id          FROM              person AS T3          WHERE              T3.person_name = 'Dariusz Wolski' AND T3.department_id = (                 SELECT                      T4.department_id                  FROM                      department AS T4                  WHERE                      T4.department_name = 'Director of Photography'             )     );
SELECT AVG(T2.revenue)  FROM movie_crew AS T1  JOIN movie AS T2 ON T1.movie_id = T2.movie_id  JOIN department AS T3 ON T1.department_id = T3.department_id  WHERE T3.department_name = 'Directing' AND T1.job = 'Director of Photography';
SELECT title  FROM movie  WHERE revenue = '559852396';
SELECT mc.job FROM movie_crew AS mc JOIN person AS p ON mc.person_id = p.person_id WHERE p.person_name = 'David Rubin' AND mc.movie_id IN (SELECT m.movie_id FROM movie AS m WHERE m.title = 'Days of Thunder');
SELECT COUNT(*)  FROM movie_crew  WHERE movie_id IN (     SELECT movie_id FROM movie      WHERE EXISTS (         SELECT * FROM person WHERE person.person_name = 'Michael Bay' AND person_id = movie_crew.person_id AND job = 'Director'     ) );
SELECT COUNT(T2.keyword_id)  FROM movie Keywords T1  JOIN movie_keywords T2 ON T1.movie_id = T2.movie_id  WHERE T1.title = 'I Hope They Serve Beer in Hell';
SELECT person_name  FROM movie_crew  WHERE movie_id IN (     SELECT movie_id      FROM movie      WHERE title = 'Land of the Dead' ) AND department_id IN (     SELECT department_id      FROM department      WHERE department_name = 'Directing' ) AND job = 'Director';
SELECT COUNT(*)  FROM movie  JOIN movie_company ON movie.movie_id = movie_company.movie_id  WHERE movie_company.company_id = (SELECT company_id FROM production_company WHERE company_name = 'Paramount Animation');
SELECT COUNT(*)  FROM movie_cast  WHERE movie_id IN (     SELECT movie_id      FROM movie      WHERE title = 'Spider-Man 3' ) AND gender_id IN (     SELECT gender_id      FROM gender      WHERE gender = 'Female' );
SELECT      keyword.keyword_name  FROM      movie_keywords  GROUP BY      keyword.keyword_id  ORDER BY      COUNT(movie.movie_id) DESC  LIMIT 1;
SELECT COUNT(*)  FROM movie_crew  WHERE movie_id = (   SELECT movie_id    FROM movie    WHERE title = 'The Amityville Horror' ) AND department_id IN (   SELECT department_id    FROM department    WHERE department_name = 'Production' ) AND job = 'Producer';
SELECT T3.company_name FROM movie_company AS T1 JOIN production_company AS T2 ON T1.company_id = T2.company_id JOIN movie AS T3 ON T3.movie_id = T1.movie_id WHERE T3.title = 'Crazy Heart';
SELECT COUNT(*)  FROM movie_keywords  JOIN keyword ON movie_keywords.keyword_id = keyword.keyword_id  WHERE keyword.keyword_name = 'saving the world';
SELECT title  FROM movie  JOIN movie_company mc ON movie.movie_id = mc.movie_id  JOIN production_company pc ON pc.company_id = mc.company_id  WHERE pc.company_name = 'Cruel and Unusual Films'  ORDER BY movie.popularity DESC  LIMIT 1;
SELECT T3.department_name FROM movie AS T1 JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id JOIN person AS T4 ON T2.person_id = T4.person_id JOIN department AS T3 ON T2.department_id = T3.department_id WHERE T1.title = 'Reign of Fire' AND T4.person_name = 'Marcia Ross';
SELECT AVG(m.movie.budget)  FROM movie m  JOIN movie_crew mc ON m.movie_id = mc.movie_id  JOIN person p ON mc.person_id = p.person_id  WHERE p.person_name = 'Jaume Collet-Serra' AND mc.job = 'Director'
SELECT      (SUM(CASE WHEN p.gender_id = (SELECT gender_id FROM gender WHERE gender = 'Male') THEN 1 ELSE 0 END) / COUNT(p.gender_id)) * 100 AS percentage FROM      movie_cast mc JOIN      person p ON mc.person_id = p.person_id JOIN      movie m ON mc.movie_id = m.movie_id JOIN      gender g ON p.gender_id = g.gender_id WHERE      m.title = 'Bride Wars'
SELECT title  FROM movie  WHERE budget = (SELECT MAX(budget) FROM movie);
SELECT COUNT(*)  FROM movie  WHERE revenue > 1000000000;
SELECT MIN(`release_date`)  FROM `movie`;
SELECT COUNT(*)  FROM person  WHERE person_name = 'John Young';
SELECT title  FROM movie  WHERE vote_average * vote_count = (SELECT MAX(vote_average * vote_count) FROM movie);
SELECT person_name  FROM movie_crew  WHERE person_id = 1325273;
SELECT T1.company_name  FROM production_company AS T1  JOIN movie_company AS T2 ON T1.company_id = T2.company_id  GROUP BY T1.company_name  ORDER BY COUNT(T2.movie_id) DESC  LIMIT 1;
SELECT p.person_name  FROM movie_cast mc  JOIN person p ON mc.person_id = p.person_id  JOIN movie m ON mc.movie_id = m.movie_id  JOIN movie_cast mc2 ON mc2.movie_id = m.movie_id  JOIN person p2 ON mc2.person_id = p2.person_id  WHERE mc.character_name = 'Captain Jack Sparrow' AND mc2.character_name = 'Captain Jack Sparrow' AND m.title LIKE 'Pirates of the Carribbean%'  GROUP BY p.person_id  HAVING COUNT(DISTINCT mc.movie_id) = (SELECT COUNT(*) FROM movie WHERE title LIKE 'Pirates of the Carribbean%');
SELECT m.title FROM movie AS m JOIN movie_company AS mc ON m.movie_id = mc.movie_id JOIN production_company AS pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Walt Disney Pictures' ORDER BY m.popularity DESC LIMIT 1;
SELECT COUNT(*)  FROM movie  JOIN movie_company ON movie.movie_id = movie_company.movie_id  WHERE movie_company.company_id = (SELECT company_id FROM production_company WHERE company_name = 'Universal Studios');
SELECT T3.company_name FROM movie AS T1 JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id JOIN production_company AS T3 ON T2.company_id = T3.company_id WHERE T1.revenue = (SELECT MAX(revenue) FROM movie)
SELECT COUNT(*)  FROM movie_crew  JOIN person ON movie_crew.person_id = person.person_id  JOIN gender ON person.gender_id = gender.gender_id  WHERE movie_crew.movie_id IN (     SELECT movie_id      FROM movie      WHERE title = 'Mr. Smith Goes to Washington' )  AND gender.gender = 'Female';
SELECT p.company_name  FROM production_company p  JOIN movie_company mc ON p.company_id = mc.company_id  GROUP BY p.company_name  HAVING COUNT(mc.movie_id) >= 200;
SELECT COUNT(*)  FROM movie_cast  JOIN person ON movie_cast.person_id = person.person_id  WHERE person_name = 'Harrison Ford'
SELECT m.title  FROM movie m  JOIN movie_cast mc ON m.movie_id = mc.movie_id  JOIN person p ON mc.person_id = p.person_id  WHERE p.person_name = 'Jamie Foxx'  ORDER BY m.release_date DESC  LIMIT 1;
SELECT COUNT(*)  FROM movie  JOIN movie_cast ON movie.movie_id = movie_cast.movie_id  JOIN person ON movie_cast.person_id = person.person_id  WHERE movie.release_date LIKE '%,1995%' AND person.person_name = 'Quentin Tarantino';
SELECT title  FROM movie  JOIN movie_genres ON movie.movie_id = movie_genres.movie_id  JOIN genre ON movie_genres.genre_id = genre.genre_id  WHERE min(release_date) = (SELECT min(release_date) FROM movie WHERE genre_name = 'Crime')  AND genre_name = 'Crime';
SELECT COUNT(*)  FROM movie  JOIN movie_genres ON movie.movie_id = movie_genres.movie_id  JOIN genre ON movie_genres.genre_id = genre.genre_id  WHERE genre.genre_name = 'Horror';
SELECT person_id  FROM movie_crew  WHERE movie_id = 12  AND job = 'Second Film Editor';
SELECT COUNT(*)  FROM movie_crew  WHERE movie_id = 129 AND job = 'Animation';
SELECT COUNT(T2.person_id), T2.job  FROM movie C  JOIN movie_crew T1 ON C.movie_id = T1.movie_id  JOIN person T2 ON T2.person_id = T1.person_id  JOIN department T3 ON T3.department_id = T1.department_id  WHERE C.movie_id = 19 AND T3.department_id = 7;
SELECT `person_id`, `character_name` FROM `movie_cast` WHERE `movie_id` = 285 AND `cast_order` BETWEEN 1 AND 10;
SELECT COUNT(*)  FROM movie_crew  WHERE person_name = 'Bob Peterson';
SELECT m.movie_id, c.character_name  FROM movie_cast AS m  JOIN person AS p ON m.person_id = p.person_id  JOIN gender AS g ON m.gender_id = g.gender_id  WHERE p.person_name = 'Jim Carrey';
SELECT p.person_name  FROM movie_cast mc  JOIN person p ON mc.person_id = p.person_id  JOIN gender g ON g.gender_id = mc.gender_id  WHERE mc.movie_id = 1865 AND g.gender = 'Female';
SELECT m.title  FROM movie_cast mc  JOIN person p ON mc.person_id = p.person_id  JOIN movie m ON mc.movie_id = m.movie_id  WHERE p.person_name = 'Jim Carrey';
SELECT T3.person_name  FROM movie AS T1  JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id  JOIN person AS T3 ON T2.person_id = T3.person_id  WHERE T2.job = 'Director' AND T1.release_date BETWEEN '1916-01-02' AND '1925-12-30';
SELECT COUNT(*)  FROM movie  JOIN movie_cast ON movie.movie_id = movie_cast.movie_id  JOIN person ON movie_cast.person_id = person.person_id  WHERE movie.release_date BETWEEN '1990-01-02' AND '2000-12-30'  AND person.person_name = 'Uma Thurman';
SELECT title  FROM movies_4.movie  JOIN movies_4.movie_genres ON movie.movie_id = movie_genres.movie_id  JOIN movies_4.genre ON movie_genres.genre_id = genre.genre_id  WHERE genre.genre_name = 'Horror' AND movie.vote_average > 7;
SELECT genre.genre_name, m.popularity  FROM movie AS m JOIN movie_genres AS mg ON m.movie_id = mg.movie_id JOIN genre ON mg.genre_id = genre.genre_id WHERE m.revenue >= 120000000  AND m.release_date BETWEEN '2012-01-01' AND '2015-12-31';
SELECT COUNT(*)  FROM movies_4.movie  JOIN movies_4.production_country ON movies_4.movie.movie_id = movies_4.production_country.movie_id  JOIN movies_4.country ON movies_4.production_country.country_id = movies_4.country.country_id  WHERE movies_4.country.country_name = 'India'  AND movies_4.movie.release_date BETWEEN '1990-01-02' AND '2003-12-30'  AND movies_4.movie.revenue > 75000000  AND movies_4.movie.popularity >= 20;
SELECT title, revenue, country_name  FROM movie  JOIN production_country ON movie.movie_id = production_country.movie_id  WHERE budget = (SELECT MAX(budget) FROM movie)  LIMIT 1;
SELECT title  FROM movie  JOIN movie_languages ON movie.movie_id = movie_languages.movie_id  JOIN language ON movie_languages.language_id = language.language_id  WHERE language_name = 'Latin'  AND release_date BETWEEN '1990-01-01' AND '1995-12-31';
SELECT AVG(T1.revenue)  FROM movies_4.movie AS T1  JOIN movies_4.production_country AS T2 ON T1.movie_id = T2.movie_id  JOIN movies_4.country AS T3 ON T2.country_id = T3.country_id  WHERE T3.country_name = 'United States of America' AND T1.release_date LIKE '2006%'
SELECT      (SUM(CASE WHEN c.country_name = 'United States of America' THEN m.revenue ELSE 0 END) / COUNT(CASE WHEN c.country_name = 'United States of America' THEN m.movie_id END)) -      (SUM(CASE WHEN c.country_name = 'India' THEN m.revenue ELSE 0 END) / COUNT(CASE WHEN c.country_name = 'India' THEN m.movie_id END)) AS RevenueGap FROM      movies_4.movie m JOIN      movies_4.production_country p ON p.movie_id = m.movie_id JOIN      movies_4.country c ON c.country_id = p.country_id WHERE      m.release_date LIKE '2016%'
SELECT      (COUNT(CASE          WHEN m.genre_id IN (SELECT genre_id FROM genre WHERE genre_name = 'Romance')          THEN m.movie_id      END) * 100.0 / COUNT(m.movie_id)) AS percentage FROM      movie m JOIN      movie_genres mg ON m.movie_id = mg.movie_id JOIN      genre g ON mg.genre_id = g.genre_id JOIN      production_country pc ON m.movie_id = pc.movie_id JOIN      country c ON pc.country_id = c.country_id WHERE      c.country_name = 'India' AND      m.release_date BETWEEN '2015-01-01' AND '2015-12-31';
SELECT p.person_name  FROM movie_cast mc  JOIN person p ON mc.person_id = p.person_id  JOIN movie m ON mc.movie_id = m.movie_id  JOIN movie_cast mc2 ON m.movie_id = mc2.movie_id  JOIN person p2 ON mc2.person_id = p2.person_id  WHERE m.title = 'Transformers' AND mc.character_name = 'Bumblebee (voice)' AND mc2.character_name = 'Optimus Prime (voice)';
SELECT p.gender FROM person p JOIN movie_cast mc ON p.person_id = mc.person_id WHERE mc.character_name = 'USAF Master Sgt. Epps';
SELECT T3.company_name FROM movie_company AS T1 JOIN production_company AS T3 ON T1.company_id = T3.company_id JOIN movie AS T2 ON T1.movie_id = T2.movie_id WHERE T2.title = 'Ultramarines: A Warhammer 40,000 Movie';
SELECT m.title FROM movie_company mc JOIN production_company pc ON mc.company_id = pc.company_id JOIN movie m ON mc.movie_id = m.movie_id WHERE pc.company_name = 'Radiant Film GmbH';
SELECT genre.genre_name  FROM movie  JOIN movie_genres ON movie.movie_id = movie_genres.movie_id  JOIN genre ON movie_genres.genre_id = genre.genre_id  WHERE movie.title = 'Sky Captain and the World of Tomorrow';
SELECT kw.keyword_name  FROM movie_keywords mk  JOIN keyword kw ON mk.keyword_id = kw.keyword_id  JOIN movie m ON mk.movie_id = m.movie_id  WHERE m.title = 'Sky Captain and the World of Tomorrow'
SELECT T3.country_name FROM movie AS T1 JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id JOIN production_country AS T3 ON T2.company_id = T3.company_id WHERE T1.title = 'Gojira ni-sen mireniamu';
SELECT m.title  FROM movie_keywords mk  JOIN movie m ON mk.movie_id = m.movie_id  JOIN keyword k ON mk.keyword_id = k.keyword_id  WHERE k.keyword_name = 'extremis';
SELECT title  FROM movies_4.movie  JOIN movies_4.production_country ON movies_4.movie.movie_id = movies_4.production_country.movie_id  WHERE movies_4.production_country.country_id = (     SELECT country_id      FROM movies_4.country      WHERE country_name = 'France' )  LIMIT 10;
SELECT p.person_name  FROM movie_mastertable m  JOIN movie_crew mc ON m.movie_id = mc.movie_id  JOIN person p ON mc.person_id = p.person_id  WHERE m.title = 'Transformers' AND mc.job = 'Director';
SELECT p.person_name, mc.job  FROM person p  JOIN movie_crew mc ON p.person_id = mc.person_id  WHERE p.person_name = 'Mad Max: Fury Road' AND mc.job IS NOT NULL  LIMIT 10;
SELECT      (COUNT(CASE WHEN T2.genre_name = 'animation' THEN T1.movie_id ELSE NULL END)      / COUNT(T1.movie_id)) * 100 AS percentage FROM      movies_4.production_country AS T1 JOIN      movies_4.genre AS T2 ON T1.movie_id = T2.movie_id JOIN      movies_4.country AS T3 ON T1.country_id = T3.country_id WHERE      T3.country_name = 'Japan'
SELECT      (COUNT(CASE WHEN gender = 'Female' AND gender IS NOT NULL THEN 1 END) /      COUNT(CASE WHEN gender = 'Male' AND gender IS NOT NULL THEN 1 END)) as ratio FROM      movie_cast WHERE      movie_id = (         SELECT movie_id FROM movie WHERE title = 'Iron Man'     )     AND gender IN ('Male', 'Female');
SELECT title  FROM movie  WHERE release_date < '2000-01-01'  LIMIT 5;
SELECT keyword_id  FROM movie_keywords  JOIN movie ON movie_keywords.movie_id = movie.movie_id  WHERE title = 'Sin City';
SELECT title  FROM movie  JOIN movie_keywords ON movie.movie_id = movie_keywords.movie_id  JOIN keyword ON movie_keywords.keyword_id = keyword.keyword_id  WHERE keyword_name = 'angel';
SELECT kw.keyword_name  FROM movie_keywords mk  JOIN keyword kw ON mk.keyword_id = kw.keyword_id  JOIN movie m ON mk.movie_id = m.movie_id  WHERE m.popularity = (SELECT MAX(pop) FROM movie AS pop)
SELECT genre_id  FROM movie  JOIN movie_genres ON movie.movie_id = movie_genres.movie_id  WHERE title = 'The Dark Knight';
SELECT title  FROM movies_4.movie  JOIN movies_4.movie_genres ON movies_4.movie.movie_id = movies_4.movie_genres.movie_id  JOIN movies_4.genre ON movies_4.movie_genres.genre_id = movies_4.genre.genre_id  WHERE movies_4.genre.genre_name = 'Thriller';
SELECT title  FROM movie  JOIN movie_genres ON movie.movie_id = movie_genres.movie_id  JOIN genre ON movie_genres.genre_id = genre.genre_id  WHERE movie.movie_status = 'rumoured' AND genre.genre_name = 'Drama'  LIMIT 5;
SELECT genre.genre_name  FROM movie  JOIN movie_genres ON movie.movie_id = movie_genres.movie_id  JOIN genre ON movie_genres.genre_id = genre.genre_id  WHERE movie.revenue = (SELECT MIN(revenue) FROM movie)
SELECT T3.genre_name  FROM movie AS T1  JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id  JOIN genre AS T3 ON T2.genre_id = T3.genre_id  WHERE T1.runtime = 14;
SELECT genre.genre_name  FROM movie  JOIN movie_genres ON movie.movie_id = movie_genres.movie_id  JOIN genre ON movie_genres.genre_id = genre.genre_id  WHERE movie.vote_average = (SELECT MAX(vote_average) FROM movie)  AND movie.revenue = (SELECT MIN(revenue) FROM movie);
SELECT genre.genre_name  FROM movie  JOIN movie_genres ON movie.movie_id = movie_genres.movie_id  JOIN genre ON movie_genres.genre_id = genre.genre_id  WHERE movie.tagline = 'A long time ago in a galaxy far, far away…';
SELECT T3.country_id  FROM movie AS T1  JOIN production_country AS T2 ON T1.movie_id = T2.movie_id  JOIN country AS T3 ON T2.country_id = T3.country_id  WHERE T1.title = 'Pirates of the Caribbean: Dead Man''s Chest'
SELECT title  FROM movies_4.movie  JOIN movies_4.production_country ON movies_4.movie.movie_id = movies_4.production_country.movie_id  WHERE movies_4.production_country.country_id = (SELECT country_id FROM movies_4.country WHERE country_name = 'Canada');
SELECT SUM(m.movie.budget)  FROM movies_4.movie m  JOIN movies_4.movie_keywords mk ON m.movie_id = mk.movie_id  JOIN movies_4.keyword k ON mk.keyword_id = k.keyword_id  WHERE k.keyword_name = 'video game';
SELECT AVG(T2.revenue)  FROM movie_keywords AS T1  JOIN movie AS T2 ON T1.movie_id = T2.movie_id  JOIN keyword AS T3 ON T1.keyword_id = T3.keyword_id  WHERE T3.keyword_name = 'civil war';
SELECT title, vote_count, popularity  FROM movie  WHERE vote_count = (SELECT MAX(vote_count) FROM movie);
SELECT title  FROM movie  WHERE budget = 0  AND revenue = (SELECT MAX(revenue) FROM movie);
SELECT movie_company.company_id  FROM movie  JOIN movie_production_company ON movie.movie_id = movie_production_company.movie_id  JOIN production_company ON movie_production_company.company_id = production_company.company_id  WHERE movie.title = 'Gladiator';
SELECT DISTINCT p.company_id FROM production_company p JOIN movie m ON p.company_id = m.company_id WHERE m.release_date LIKE '1916%';
SELECT title  FROM movies  JOIN movie_company ON movies.movie_id = movie_company.movie_id  WHERE company_name = 'Lucasfilm';
SELECT title  FROM movie  JOIN movie_company ON movie.movie_id = movie_company.movie_id  JOIN production_company ON movie_company.company_id = production_company.company_id  WHERE production_company.company_name = 'Warner Bros. Pictures'  ORDER BY revenue DESC  LIMIT 1;
SELECT release_date  FROM movie  JOIN movie_company ON movie.movie_id = movie_company.movie_id  WHERE company_id IN (     SELECT company_id      FROM production_company      WHERE company_name = 'Twentieth Century Fox Film Corporation' );
SELECT language_id FROM movie_languages  JOIN movie ON movie.movie_id = movie_languages.movie_id  WHERE title = 'Walk the Line';
SELECT language_id FROM movie WHERE popularity = (SELECT MAX(popularity) FROM movie);
SELECT language_name  FROM language  JOIN movie_languages ON language.language_id = movie_languages.language_id  JOIN movie ON movie.movie_id = movie_languages.movie_id  WHERE movie.title = 'C''era una volta il West';
SELECT COUNT(*)  FROM movie  JOIN movie_languages ON movie.movie_id = movie_languages.movie_id  JOIN language ON movie_languages.language_id = language.language_id  WHERE movie.movie_status = 'Post Production'  AND language.language_name = 'Nederlands';
SELECT title, tagline  FROM movie  JOIN movie_languages ON movie.movie_id = movie_languages.movie_id  JOIN language ON movie_languages.language_id = language.language_id  WHERE language_name = 'Polski';
SELECT title, homepage  FROM movie  JOIN movie_languages ON movie.movie_id = movie_languages.movie_id  JOIN language ON movie_languages.language_id = language.language_id  WHERE language_name = 'Bahasa Indonesia';
SELECT      (SUM(CASE WHEN l.language_name = 'English' THEN m.revenue ELSE 0 END) -      SUM(CASE WHEN l.language_name = 'Latin' THEN m.revenue ELSE 0 END)) AS revenue_difference FROM      movies_4.movie m JOIN      movies_4.movie_languages ml ON m.movie_id = ml.movie_id JOIN      movies_4.language l ON ml.language_id = l.language_id
SELECT SUM(m.revenue)  FROM movie m  JOIN movie_company mc ON m.movie_id = mc.movie_id  JOIN production_company pc ON mc.company_id = pc.company_id  WHERE pc.company_name IN ('Fantasy Films', 'Live Entertainment');
SELECT AVG(T2.revenue)  FROM movie_languages AS T1  JOIN movie AS T2 ON T1.movie_id = T2.movie_id  JOIN language AS T3 ON T1.language_id = T3.language_id  WHERE T3.language_name = 'Latin';
SELECT person_name FROM person WHERE row_number = 1 ORDER BY count(person_name) DESC;
SELECT      AVG(COUNT(person_id)) AS average_crews_per_movie FROM      movie_crew;
SELECT keyword_name  FROM keyword  WHERE keyword_name LIKE '%christmas%';
SELECT MAX(runtime) AS longest_runtime  FROM movie;
SELECT country_iso_code  FROM country  WHERE country_name = 'Kyrgyz Republic';
SELECT overview  FROM movie  WHERE title = 'The Pacifier';
SELECT COUNT(*)  FROM movie_company  WHERE company_id IN      (SELECT company_id FROM production_company WHERE company_name = 'Eddie Murphy Productions');
SELECT DISTINCT p.person_name FROM person p JOIN movie_cast mc ON p.person_id = mc.person_id WHERE mc.character_name LIKE '%captain%'
SELECT      keyword.keyword_name  FROM      movie  JOIN      movie_keywords ON movie.movie_id = movie_keywords.movie_id  JOIN      keyword ON movie_keywords.keyword_id = keyword.keyword_id  WHERE      movie.release_date LIKE '%2006%' GROUP BY      keyword.keyword_name ORDER BY      COUNT(keyword.keyword_name) DESC LIMIT 1;
SELECT COUNT(*)  FROM language  WHERE language_code = 'vi';
SELECT genre_name FROM (   SELECT genre_name, COUNT(*) as count_genre   FROM movie_genres   JOIN genre ON movie_genres.genre_id = genre.genre_id   GROUP BY genre_name   ORDER BY count_genre ASC ) as least_common_genres LIMIT 1 OFFSET 2;
SELECT T3.language_name  FROM movie AS T1  JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id  JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id  JOIN movie_languages AS T4 ON T1.movie_id = T4.movie_id  JOIN language AS T5 ON T4.language_id = T5.language_id  WHERE T1.tagline = 'An offer you can\'t refuse.' AND T5.language_role = 'Original';
SELECT AVG(T2.revenue)  FROM movies_4.movie AS T1  JOIN movies_4.movie_languages AS T2 ON T1.movie_id = T2.movie_id  JOIN movies_4.country AS T3 ON T3.country_id = T2.language_role_id  WHERE T3.country_name = 'France';
SELECT character_name  FROM movie_cast  WHERE gender_id IS NULL;
SELECT      p.person_name  FROM      movie_crew mc  JOIN      person p ON mc.person_id = p.person_id  WHERE      mc.job = 'Director'  GROUP BY      p.person_name  ORDER BY      SUM(mc.movie_id) DESC  LIMIT 5;
SELECT m.genre_id, MAX(m.budget), g.genre_name, m.title  FROM movie m  JOIN movie_genres mg ON m.movie_id = mg.movie_id  JOIN genre g ON mg.genre_id = g.genre_id  GROUP BY m.genre_id, g.genre_name, m.title;
SELECT title  FROM movie  JOIN movie_keywords ON movie.movie_id = movie_keywords.movie_id  GROUP BY movie.movie_id  ORDER BY COUNT(movie_keywords.keyword_id) DESC  LIMIT 1;
SELECT department_name FROM department WHERE department_id = (     SELECT department_id      FROM person      GROUP BY department_id      ORDER BY COUNT(person_id) DESC      LIMIT 1 );
SELECT      (SUM(CASE WHEN c.country_iso_code = 'US' THEN 1 ELSE 0 END)      / COUNT(c.country_id)) * 100 AS us_percentage  FROM      movies_4.movie  JOIN      movies_4.production_country AS c  ON      movies_4.movie.movie_id = c.movie_id;
SELECT      (SUM(CASE WHEN p.gender = 'Female' THEN 1 ELSE 0 END) / SUM(CASE WHEN p.gender = 'Male' THEN 1 ELSE 0 END)) *      (SUM(CASE WHEN p.gender = 'Female' THEN 1 ELSE 0 END) / COUNT(DISTINCT m.movie_id)) AS avg_female_to_male_ratio FROM      person p  JOIN      movie_cast mc ON p.person_id = mc.person_id  JOIN      movie m ON m.movie_id = mc.movie_id  JOIN      gender g ON g.gender_id = p.gender_id  WHERE      g.gender IN ('Female', 'Male');
SELECT title  FROM movie  WHERE release_date LIKE '1945%';
SELECT country_id, country_iso_code  FROM country  WHERE country_name = 'Belgium';
SELECT `character_name`  FROM `movie_cast`  JOIN `person` ON `movie_cast.person_id` = `person.person_id`  WHERE `person.person_name` = 'Catherine Deneuve';
SELECT title  FROM movie  JOIN movie_languages ON movie.movie_id = movie_languages.movie_id  JOIN language ON movie_languages.language_id = language.language_id  WHERE language.language_code = 'so'
SELECT release_date, language_name  FROM movie  JOIN movie_languages ON movie.movie_id = movie_languages.movie_id  JOIN language ON movie_languages.language_id = language.language_id  WHERE popularity = (SELECT MAX(popularity) FROM movie);
SELECT T3.language_name FROM movie AS T1 JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id JOIN language AS T3 ON T2.language_id = T3.language_id JOIN movie_genres AS T4 ON T1.movie_id = T4.movie_id JOIN genre AS T5 ON T4.genre_id = T5.genre_id WHERE T5.genre_name = 'Drama' AND T1.title = 'Four Rooms' AND T3.language_role = 'Original';
SELECT character_name  FROM movie_cast  JOIN movie ON movie.movie_id = movie_cast.movie_id  WHERE title = 'Open Water';
SELECT person_name  FROM movie_cast  JOIN person ON movie_cast.person_id = person.person_id  WHERE title = 'Pirates of the Caribbean: At World''s End'  AND gender_id = (SELECT gender_id FROM gender WHERE gender = 'Male')  AND Min(cast_order);
SELECT p.person_name  FROM person p  JOIN movie_crew mc ON p.person_id = mc.person_id  WHERE mc.department_id IN (SELECT department_id FROM department WHERE department_name = 'Camera') AND mc.job = 'Camera Supervisor';
SELECT mc.job FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Sally Menke'
SELECT p.person_name, d.department_name  FROM movie  JOIN movie_crew mc ON movie.movie_id = mc.movie_id  JOIN person p ON mc.person_id = p.person_id  JOIN department d ON mc.department_id = d.department_id  WHERE movie.title = 'Pirates of the Caribbean: At World''s End' AND mc.job = 'Music Editor';
SELECT title, revenue  FROM movie  JOIN movie_company ON movie.movie_id = movie_company.movie_id  JOIN production_company ON production_company.company_id = movie_company.company_id  WHERE production_company.company_name = 'DreamWorks';
SELECT COUNT(*)  FROM movie  JOIN production_country ON movie.movie_id = production_country.movie_id  WHERE production_country.country_id = (SELECT country_id FROM country WHERE country_name = 'Canada');
SELECT T3.genre_name  FROM movie AS T1  JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id  JOIN genre AS T3 ON T2.genre_id = T3.genre_id  WHERE T1.title = 'Forrest Gump';
SELECT DISTINCT p.company_name FROM production_company AS p JOIN movie AS m ON p.movie_id = m.movie_id WHERE m.release_date LIKE '2016%' AND (m.runtime - AVG(m.runtime) OVER ()) / AVG(m.runtime) * 100 > 35
SELECT      (SUM(CASE WHEN movie_keywords.keyword_id = (SELECT keyword_id FROM keyword WHERE keyword_name = 'woman director') THEN 1 ELSE 0 END)      - SUM(CASE WHEN movie_keywords.keyword_id = (SELECT keyword_id FROM keyword WHERE keyword_name = 'independent film') THEN 1 ELSE 0 END)) /      (COUNT(*) OVER () * 1.0) * 100 AS percentage_diff FROM      movie, movie_keywords WHERE      movie.movie_id = movie_keywords.movie_id;
SELECT genre.genre_name  FROM movie  JOIN movie_genres ON movie.movie_id = movie_genres.movie_id  JOIN genre ON movie_genres.genre_id = genre.genre_id  WHERE movie.title = 'Dancer in the Dark';
SELECT COUNT(*)  FROM movie  JOIN movie_genres ON movie.movie_id = movie_genres.movie_id  JOIN genre ON movie_genres.genre_id = genre.genre_id  WHERE genre.genre_name = 'Adventure' AND movie.release_date LIKE '2000%';
SELECT title  FROM movie  JOIN production_company ON movie.movie_id = production_company.movie_id  WHERE company_name = 'Paramount Pictures' AND release_date LIKE '2000%';
SELECT keyword_name  FROM movie_keywords  JOIN keyword ON movie_keywords.keyword_id = keyword.keyword_id  WHERE title = 'Finding Nemo';
SELECT m.title FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'horror' AND m.vote_average > 7;
SELECT COUNT(DISTINCT pc.company_id) FROM movie_company mc JOIN production_company pc ON mc.company_id = pc.company_id GROUP BY pc.company_id HAVING COUNT(mc.movie_id) > 150;
SELECT language_role FROM person JOIN movie_crew ON person.person_id = movie_crew.person_id JOIN department ON movie_crew.department_id = department.department_id WHERE person_name = 'Mark Hammel';
SELECT COUNT(*)  FROM movie_cast  WHERE movie_id = (     SELECT movie_id      FROM movie      WHERE title = 'Pirates of the Caribbean: At World''s End' )  AND gender_id = (     SELECT gender_id      FROM gender      WHERE gender = 'male' )  AND cast_order = 1;
SELECT m.title FROM movie AS m JOIN movie_cast AS mc ON m.movie_id = mc.movie_id JOIN person AS p ON mc.person_id = p.person_id WHERE p.person_name = 'Harrison Ford';
SELECT character_name  FROM movie_cast  JOIN person ON movie_cast.person_id = person.person_id  WHERE title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND person_name = 'Orlando Bloom';
SELECT      AVG(COUNT(mg.movie_id)) AS avg_horror_movies  FROM      movie_genres mg  WHERE      mg.genre_id = (SELECT genre_id FROM genre WHERE genre_name = 'horror');
SELECT p.person_name  FROM person p  JOIN movie_crew mc ON p.person_id = mc.person_id  WHERE mc.movie_id IN (     SELECT m.movie_id      FROM movie m      WHERE m.title = 'Pirates of the Caribbean: The Curse of the Black Pearl'     AND EXISTS (         SELECT *          FROM movie_genres mg          WHERE mg.movie_id = m.movie_id          AND EXISTS (             SELECT *              FROM genre g              WHERE g.genre_id = mg.genre_id              AND g.genre_name = 'Adventure')     )     AND EXISTS (         SELECT *          FROM department d          WHERE d.department_id = mc.department_id          AND d.department_name = 'Production') )  AND mc.job = 'Producer';
SELECT title  FROM movies_4.movie  JOIN movie_keywords ON movie.movie_id = movie_keywords.movie_id  JOIN keyword ON movie_keywords.keyword_id = keyword.keyword_id  WHERE keyword.keyword_name = 'paris'
SELECT COUNT(*)  FROM codebase_comments.Method  WHERE Lang = 'en' AND CommentIsXml = 1;
SELECT      Method.Name AS MethodName,      SUBSTRING_INDEX(Method.NameTokenized, '.', 2) AS Task  FROM      Method  WHERE      Method.NameTokenized LIKE '%online median filter test median window filling%'
SELECT MAX(SampledAt), SolutionId  FROM Solution  WHERE Solution.Id = (SELECT Id FROM Solution ORDER BY SampledAt DESC LIMIT 1);
SELECT Url  FROM Repo  WHERE Forks = (SELECT MAX(Forks) FROM Repo);
SELECT RepoId FROM Solution WHERE Path = (SELECT MAX(COUNT(Path)) FROM Solution);
SELECT Url, Stars  FROM Repo  WHERE Stars = (SELECT MAX(Stars) FROM Repo);
SELECT Path  FROM Solution  WHERE ProcessedTime = (SELECT MAX(ProcessedTime) FROM Solution);
SELECT MAX(R.ProcessedTime) AS DownloadedTime FROM Repo R WHERE R.Watchers = (     SELECT MAX(Watchers) FROM Repo )
SELECT Repo.Url  FROM Solution  JOIN Repo ON Solution.RepoId = Repo.Id  WHERE Solution.Path = 'nofear_Mara\Mara.sln';
SELECT R.Url, S.WasCompiled  FROM Repo R  JOIN Solution S ON R.Id = S.RepoId  WHERE S.ProcessedTime = (SELECT MAX(ProcessedTime) FROM Repo)  AND S.WasCompiled = 1;
SELECT Method.NameTokenized  FROM Solution  JOIN Method ON Solution.Id = Method.SolutionId  WHERE Solution.Path = 'maravillas_linq-to-delicious\tasty.sln';
SELECT R.Url, MAX(COUNT(S.Path)) AS NumOfPaths, COUNT(S.Path) AS NumOfNotCompiledPaths  FROM Repo R  JOIN Solution S ON R.Id = S.RepoId  WHERE R.Stars BETWEEN 6000 AND 9000  GROUP BY R.Id  ORDER BY NumOfPaths DESC, NumOfNotCompiledPaths DESC  LIMIT 1;
SELECT DISTINCT m.Name  FROM Method m  JOIN Repo r ON m.RepoId = r.Id  WHERE r.Url = 'https://github.com/wallerdev/htmlsharp.git'  ORDER BY m.ApiCalls;
SELECT COUNT(*)  FROM Solution  WHERE RepoId = (     SELECT Id      FROM Repo      WHERE Watchers =          (SELECT MAX(Watchers)           FROM Repo           WHERE Id != (SELECT Id FROM Repo LIMIT 1)) )
SELECT AVG(Solution.ProcessedTime)  FROM Solution  JOIN Repo ON Solution.RepoId = Repo.Id  WHERE Repo.Url = 'https://github.com/zphingphong/DiscardCustomerApp.git';
SELECT      c.FullComment  FROM      codebase_comments.c  JOIN      codebase_comments.m ON c.Id = m.SolutionId  JOIN      codebase_comments.r ON m.RepoId = r.Id  JOIN      codebase_comments.s ON r.Id = s.RepoId  WHERE      s.Path = 'bmatzelle_nini\Source\Nini.sln'  AND      m.NameTokenized = 'alias text add alias';
SELECT      Method.Name AS MethodName,     Method.ApiCalls AS LinearizedSequenceOfAPICalls FROM      Method     JOIN Solution ON Method.SolutionId = Solution.Id WHERE      Solution.Path = 'mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln';
SELECT COUNT(*)  FROM Solution  WHERE RepoId IN (     SELECT Id      FROM Repo      WHERE Url = 'https://github.com/jeffdik/tachy.git' ) AND WasCompiled = 0;
SELECT M.Lang, MAX(S.ProcessedTime) AS ProcessedTime FROM Method M JOIN Solution S ON M.RepoId = S.RepoId JOIN MethodParameter MP ON M.Id = MP.MethodId WHERE M.NameTokenized = 'about box1 dispose' GROUP BY M.Lang;
SELECT Method.SampledAt  FROM Method  JOIN Repo ON Method.RepoId = Repo.Id  JOIN Solution ON Repo.Id = Solution.RepoId  WHERE Solution.Path = 'maxild_playground\Playground.sln' AND Method.Name = 'GitHubRepo.Cli.GitHubClientWrapper.GetReleases';
SELECT Method.Lang  FROM Solution  JOIN Method ON Solution.Id = Method.SolutionId  WHERE Solution.Path = 'opendns_diagnosticapp\windows\OpenDnsDiagnostic.sln';
SELECT      Method.Name AS MethodName,      SUBSTRING_INDEX(Method.NameTokenized, '.', 2) AS Task  FROM      Method  WHERE      Method.NameTokenized LIKE '%html parser feed.%';
SELECT      Method.Name FROM      Method JOIN      Solution ON Method.SolutionId = Solution.Id WHERE      Method.Name = 'HtmlSharp.HtmlParser.Feed' AND      Method.CommentIsXml = 1;
SELECT m.Id, m.Name  FROM Method m  JOIN Solution s ON m.SolutionId = s.Id  WHERE m.Summary = 'Write a command to the log';
SELECT COUNT(*)  FROM Solution  WHERE RepoId IN (     SELECT Id      FROM Repo      WHERE Stars = (SELECT MAX(Stars) FROM Repo) )
SELECT      s.Path  FROM      Solution s  JOIN      Repo r ON s.RepoId = r.Id  WHERE      r.Stars = (SELECT MAX(Stars) FROM Repo);
SELECT Repo.Url  FROM Solution  JOIN Repo ON Solution.RepoId = Repo.Id  WHERE Solution.Id = 12;
SELECT COUNT(*)  FROM Solution  JOIN Repo ON Solution.RepoId = Repo.Id  WHERE Repo.Forks > 1000 AND Solution.WasCompiled = 1;
SELECT      s.RepoId  FROM      Solution s WHERE      (s.Id = 18 AND EXISTS (         SELECT * FROM Repo r WHERE r.Stars > (SELECT Stars FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 19))     ))     OR      (s.Id = 19 AND EXISTS (         SELECT * FROM Repo r WHERE r.Stars > (SELECT Stars FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 18))     ));
SELECT COUNT(*)  FROM Solution  WHERE ProcessedTime = (SELECT MAX(ProcessedTime) FROM Solution)  AND WasCompiled = 0;
SELECT `ProcessedTime`  FROM `Solution`  JOIN `Repo` ON `Solution.RepoId` = `Repo.Id`  WHERE `Solution.Path` = 'jeffdik_tachy\src\Tachy.sln';
SELECT Repo.Url  FROM Solution  JOIN Repo ON Solution.RepoId = Repo.Id  WHERE Solution.Id = 9;
SELECT DISTINCT s.Path  FROM Solution s  JOIN Repo r ON s.RepoId = r.Id  WHERE r.Url = 'https://github.com/maxild/playground.git';
SELECT COUNT(*)  FROM Solution  JOIN Repo ON Repo.Id = Solution.RepoId  WHERE Repo.Stars > 200 AND Solution.ProcessedTime < 636439500080712000;
SELECT DISTINCT s.Id  FROM Solution s  JOIN Repo r ON s.RepoId = r.Id  WHERE r.Stars + r.Forks >= ALL (     SELECT SUM(r2.Stars + r2.Forks)      FROM Repo r2      WHERE r2.ProcessedTime < r.ProcessedTime      ORDER BY SUM(r2.Stars + r2.Forks) DESC      LIMIT 3 )
SELECT AVG(Solution.ProcessedTime)  FROM Solution  JOIN Repo ON Solution.RepoId = Repo.Id  WHERE Repo.Url = 'https://github.com/jeffdik/tachy.git'
SELECT      ((COUNT(CASE WHEN s1.Id = 18 THEN s1.Forks END) - COUNT(CASE WHEN s2.Id = 18 THEN s2.Forks END)) /      COUNT(CASE WHEN s2.Id = 19 THEN s2.Forks END)) * 100 AS ForksPercentageDifference FROM      Solution s1 JOIN      Solution s2 ON 1 = 1 WHERE      s1.Id = 18 AND s2.Id = 19;
SELECT Lang  FROM Method  WHERE Name = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn';
SELECT FullComment  FROM codebase_comments.Method  WHERE Name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows';
SELECT Summary  FROM Method  WHERE Name = 'Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection';
SELECT `NameTokenized`  FROM `Method`  WHERE `Name` = 'Supay.Irc.Messages.KnockMessage.GetTokens';
SELECT `Stars`  FROM `Repo`  WHERE `Id` = (SELECT `RepoId` FROM `Solution` WHERE `Id` = 45997);
SELECT COUNT(*)  FROM Solution  WHERE RepoId IN (SELECT Id FROM Repo WHERE Stars = 8094);
SELECT      s.Path  FROM      Method m  JOIN      Solution s ON m.SolutionId = s.Id  WHERE      m.Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally';
SELECT      S.ProcessedTime  FROM      CodebaseComments.Method M  JOIN      CodebaseComments.Solution S ON M.SolutionId = S.Id  WHERE      M.NameTokenized = 'interp parser expr';
SELECT r.Id AS RepositoryNumber  FROM Solution s  JOIN Method m ON s.Id = m.SolutionId  JOIN Repo r ON s.RepoId = r.Id  WHERE m.Name = 'SCore.Poisson.ngtIndex';
SELECT `Solution.Path`  FROM `Solution`  JOIN `Method` ON `Solution.Id` = `Method.SolutionId`  WHERE `Method.Name` = 'ExportToRTF.RTFStyleSheet.H6Write';
SELECT COUNT(*)  FROM Solution  WHERE RepoId IN (SELECT Id FROM Repo WHERE Watchers = 8094);
SELECT Url  FROM Repo  WHERE Id = (SELECT RepoId              FROM Solution              GROUP BY RepoId              ORDER BY COUNT(*) DESC              LIMIT 1);
SELECT COUNT(*)  FROM Solution  WHERE Solution.RepoId IN (     SELECT Id      FROM Repo      WHERE Forks = 1445 )
SELECT Path  FROM Solution  JOIN Method ON Solution.Id = Method.SolutionId  WHERE Method.Lang = 'zh-cn'  GROUP BY Path  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM Solution  JOIN Repo ON Solution.RepoId = Repo.Id  WHERE Solution.Id = 338082  AND Solution.ProCESStime IS NOT NULL;
SELECT COUNT(*)  FROM Solution  JOIN Repo ON Solution.RepoId = Repo.Id  WHERE Repo.Stars = 189 AND Solution.WasCompiled = 0;
SELECT      s.Path  FROM      Solution s  JOIN      Method m ON s.Id = m.SolutionId  WHERE      m.Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy';
SELECT s.ProcessedTime  FROM Method m  JOIN Solution s ON m.SolutionId = s.Id  WHERE m.NameTokenized = 't jadwal entity get single mpic';
SELECT DISTINCT r.Id AS RepositoryID  FROM Solution s  JOIN Method m ON s.Id = m.SolutionId  JOIN Repo r ON s.RepoId = r.Id  WHERE m.Name = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal';
SELECT      s.Path FROM      Method m JOIN      Solution s ON m.SolutionId = s.Id WHERE      m.Summary = 'Refetches the Entity from the persistent storage. Refetch is used to re-load an Entity which is marked "Out-of-sync", due to a save action. Refetching an empty Entity has no effect.';
SELECT COUNT(*)  FROM Solution  WHERE Solution.RepoId IN (     SELECT Id      FROM Repo      WHERE Stars = 3060 )
SELECT s.Path  FROM Solution s  JOIN Method m ON s.Id = m.SolutionId  WHERE m.Lang = 'sw'  GROUP BY s.Id, s.Path  HAVING COUNT(m.Id) = (SELECT MAX(method_sw_count) FROM (SELECT COUNT(*) AS method_sw_count FROM Solution s2 JOIN Method m2 ON s2.Id = m2.SolutionId WHERE m2.Lang = 'sw') subquery)
SELECT      ((COUNT(CASE WHEN S.RepoId IN (         SELECT R.id FROM `repo` R JOIN `solution` S ON R.id = S.RepoId WHERE S.Id = 83855 AND S.ProcessedTime = (SELECT MAX(`processedtime`) FROM `solution` WHERE `id` = 83855)     ) AND S.id = 83855) - COUNT(CASE WHEN S.RepoId IN (         SELECT R.id FROM `repo` R JOIN `solution` S ON R.id = S.RepoId WHERE S.Id = 1502 AND S.ProcessedTime = (SELECT MAX(`processedtime`) FROM `solution` WHERE `id` = 1502)     )) * 100) / COUNT(CASE WHEN S.RepoId IN (         SELECT R.id FROM `repo` R JOIN `solution` S ON R.id = S.RepoId WHERE S.Id = 1502 AND S.ProcessedTime = (SELECT MAX(`processedtime`) FROM `solution` WHERE `id` = 1502)     ))) AS watcher_percent_increase FROM `solution` S;
SELECT      ( (SUM(CASE WHEN Solution.Id = 51424 THEN Repo.Stars ELSE 0 END) - SUM(CASE WHEN Solution.Id = 167053 THEN Repo.Stars ELSE 0 END)) * 100 / SUM(CASE WHEN Solution.Id = 167053 THEN Repo.Stars ELSE 1 END) ) AS percentage FROM      Solution  JOIN      Repo ON Solution.RepoId = Repo.Id;
SELECT      ((COUNT(CASE WHEN s.Id = 53546 THEN r.Forks ELSE NULL END)      - COUNT(CASE WHEN s.Id = 1502 THEN r.Forks ELSE NULL END)) * 100) /      COUNT(CASE WHEN s.Id = 1502 THEN r.Forks ELSE NULL END) AS percentage FROM      Solution s JOIN      Repo r ON s.RepoId = r.Id;
SELECT m.Name FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.ProcessedTime = 636449700980488000;
SELECT COUNT(*)  FROM Solution  WHERE Url = 'https://github.com/derickbailey/presentations-and-training.git';
SELECT SUM(solution.ProcessedTime)  FROM Solution solution  JOIN Repo repo ON solution.RepoId = repo.Id  WHERE repo.Forks = (SELECT MAX(Forks) FROM Repo);
SELECT s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.Lang = 'it';
SELECT s.Path  FROM Solution s  JOIN Method m ON s.Id = m.SolutionId  WHERE m.Name = 'spinachLexer.mT__55';
SELECT Method.Name FROM Method JOIN Solution ON Method.SolutionId = Solution.Id JOIN Repo ON Solution.RepoId = Repo.Id WHERE Method.Lang = 'en' AND Repo.Id = 1093;
SELECT Solution.Path  FROM Solution  JOIN Repo ON Solution.RepoId = Repo.Id  WHERE Repo.Url = 'https://github.com/ecoffey/Bebop.git';
SELECT DISTINCT r.Id AS RepoId  FROM Solution s  JOIN Method m ON s.Id = m.SolutionId  JOIN Repo r ON s.RepoId = r.Id  WHERE m.Lang = 'ro';
SELECT RepoId FROM Method WHERE NameTokenized = 'crc parameters get hash code';
SELECT COUNT(*)  FROM Solution  WHERE Path = 'maravillas_linq-to-delicious\tasty.sln';
SELECT DISTINCT s.Id  FROM Solution s  WHERE s.ProcessedTime = 636430969128176000;
SELECT R.Url  FROM Repo R  JOIN Solution S ON R.Id = S.RepoId  WHERE S.ProcessedTime = (SELECT MAX(ProcessedTime) FROM Solution);
SELECT s.Id AS SolutionId FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Forks > (r.Watchers / 2);
SELECT      (MAX(T1.Forks) / MAX(T1.Stars)) * 100 AS PercentageOfForksToStars FROM      Solution AS T2 JOIN      Repo AS T1 ON T1.Id = T2.RepoId WHERE      T2.Id = 104086;
SELECT `Url` FROM `Repo` WHERE `Stars` = (SELECT MAX(`Stars`) FROM `Repo`);
SELECT Solution.Path  FROM Solution  JOIN Method ON Solution.Id = Method.SolutionId  WHERE Method.Name = 'HtmlSharp.HtmlParser.Feed';
SELECT COUNT(*)  FROM Solution  JOIN Repo ON Solution.RepoId = Repo.Id  WHERE Solution.Id = 35;
SELECT s.Id  FROM Solution s  JOIN Repo r ON s.RepoId = r.Id  WHERE r.Watchers = (SELECT MAX(Watchers) FROM Repo);
SELECT Stars  FROM Repo  WHERE Id IN (     SELECT RepoId      FROM Solution      WHERE Id = 20 );
SELECT COUNT(M.Id) AS MethodCount,         (S.WasCompiled = 0) AS NeedsCompilation FROM Method M JOIN Solution S ON M.SolutionId = S.Id WHERE S.Id = 1;
SELECT      (SUM(CASE WHEN s.WasCompiled = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(m.Id)) as PercentageOfMethodsNeedCompilation FROM      Method m JOIN      Solution s ON m.SolutionId = s.Id WHERE      m.CommentIsXml = 1;
SELECT Method.Name FROM Method JOIN Solution ON Method.SolutionId = Solution.Id WHERE Solution.Path = 'wallerdev_htmlsharp\HtmlSharp.sln'
SELECT      (COUNT(CASE WHEN Stars > 2000 THEN 1 END) * 100.0 / COUNT(Repo.Id)) AS percentage FROM Repo;
SELECT `Url`  FROM `Repo`  JOIN `Solution` ON `Repo.Id` = `Solution.RepoId`  WHERE `Solution.Id` = 1;
SELECT R.Id FROM Repo R WHERE R.Forks = (     SELECT MAX(Forks)     FROM Repo     WHERE Stars = 21 );
SELECT      (COUNT(*) FILTER (WHERE Method.lang = 'en' AND Method.CommentIsXml = 1) * 100.0 / COUNT(*)) AS EnglishMethodsPercentage FROM      codebase_comments.Method
SELECT s.Path  FROM Solution s  JOIN Method m ON s.Id = m.SolutionId  WHERE m.NameTokenized = 'html parser feed';
SELECT DISTINCT s.Id  FROM Solution s  JOIN Repo r ON s.RepoId = r.Id  WHERE r.Forks = 238;
SELECT Method.NameTokenized  FROM Method  JOIN Repo ON Method.RepoId = Repo.Id  JOIN Solution ON Repo.Id = Solution.RepoId  WHERE Method.Lang = 'en' AND Solution.WasCompiled = 0;
SELECT COUNT(*)  FROM Solution  WHERE (Repo.Stars * 1/3) > Repo.Forks;
SELECT s.Path  FROM codebase_comments.Method m  JOIN codebase_comments.Solution s ON m.SolutionId = s.Id  WHERE m.FullComment = 'Feeds data into the parser';
SELECT COUNT(*)  FROM codebase_comments.Method  JOIN codebase_comments.Repo ON Method.RepoId = Repo.Id  WHERE Repo.Id = 3 AND Method.CommentIsXml = 1;
SELECT      (SUM(CASE WHEN s.WasCompiled = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(s.Id)) as PercentageOfSolutionsToBeCompiledInEnglish FROM      Solution s JOIN      Method m ON s.Id = m.SolutionId WHERE      m.Lang = 'en';
SELECT      ((SUM(CASE WHEN Solution.Id = 1 THEN Repo.Stars ELSE 0 END) - SUM(CASE WHEN Solution.Id = 2 THEN Repo.Stars ELSE 0 END)) * 100 / SUM(CASE WHEN Solution.Id = 2 THEN Repo.Stars ELSE 1 END)) AS stars_percentage_difference FROM      Solution JOIN      Repo ON Solution.RepoId = Repo.Id;
SELECT COUNT(*)  FROM Solution  WHERE RepoId IN (     SELECT Id      FROM Repo      WHERE Stars > DIVIDE(Forks, 3) );
SELECT      SUBSTRING_INDEX(M.Name, '.', 2) AS Task FROM      Method M WHERE      M.Id = 2;
SELECT `FullComment`, `Summary`, `CommentIsXml`  FROM `Method_100k`  WHERE `Id` = 8;
SELECT Url  FROM Repo  WHERE Watchers = (SELECT MAX(Watchers) FROM Repo);
SELECT      Method.Name,      SUBSTRING_INDEX(SUBSTRING_INDEX(Method.Name, '.', -1), ':', 1) AS Task FROM      Method WHERE      Method.Lang = 'cs';
SELECT `Path`  FROM `Solution`  JOIN `Method` ON `Solution`.`Id` = `Method`.`SolutionId`  WHERE `Method`.`Id` = 3;
SELECT `Lang`  FROM `Method_100k`  JOIN `Solution` ON `Method_100k`.`Id` = `Solution`.`MethodId`  JOIN `Repo` ON `Solution`.`RepoId` = `Repo`.`Id`  WHERE `Method_100k`.`Id` = 28 AND `Repo`.`Id` = 3;
SELECT      s.ProcessedTime,     COUNT(*) AS Number_of_Methods FROM      Solution s WHERE      s.Id = 1
SELECT COUNT(*)  FROM Method  WHERE NameTokenized LIKE 'query language%'  AND RepoId = (SELECT RepoId FROM Repo);
SELECT      Method.ApiCalls  FROM      Method  JOIN      Method_100k ON Method.Id = Method_100k.Id  WHERE      Method_100k.Id = 10;
SELECT COUNT(*)  FROM Method  WHERE RepoId = 150 AND FullComment IS NULL AND Summary IS NULL;
SELECT      Method.Name, Method.FullComment, Method.CommentIsXml  FROM      Method  JOIN      Solution ON Method.SolutionId = Solution.Id  WHERE      Method.Id = 50 AND      Solution.Path = 'managedfusion_managedfusion\ManagedFusion.sln';
SELECT      Method.Name AS TaskMethod  FROM      Method  JOIN      Solution ON Method.SolutionId = Solution.Id  WHERE      Method.NameTokenized = 'string extensions to pascal case' AND      SUBSTRING(Method.Name, PATINDEX('%.%', Method.Name) + 1, LEN(Method.Name)) = 'StringExtensionsToPascalCase'
SELECT `NameTokenized` FROM `Method` WHERE `Name` = 'Sky.Excel.ExcelBook.TypeConvert';
SELECT COUNT(*)  FROM Repo  WHERE Url = 'https://github.com/jeffdik/tachy.git'
SELECT Watchers  FROM Repo  WHERE Path = 'maff_se3ue7\US7.sln';
SELECT DISTINCT r.Url  FROM Solution s  JOIN Repo r ON s.RepoId = r.Id  WHERE s.WasCompiled = 1  LIMIT 5;
SELECT      s.Path  FROM      Method m  JOIN      MethodParameter mp ON m.Id = mp.MethodId  JOIN      Solution s ON m.SolutionId = s.Id  WHERE      m.NameTokenized = 'matrix multiply';
SELECT COUNT(*)  FROM codebase_comments.Method  JOIN codebase_comments.Repo ON Method.RepoId = Repo.Id  WHERE Repo.Url = 'https://github.com/dogeth/vss2git.git' AND Method.CommentIsXml = 1;
SELECT      s.Path  FROM      Solution s  JOIN      Method m ON s.Id = m.SolutionId  WHERE      m.SampledAt = '636431758961741000'  LIMIT 5;
SELECT R.Url  FROM Solution S  JOIN Repo R ON S.RepoId = R.Id  WHERE S.Path = 'joeyrobert_bloomfilter\DataTypes.BloomFilter.sln';
SELECT Method.Name FROM Solution JOIN Method ON Solution.Id = Method.SolutionId WHERE Solution.Path = 'graffen_NLog.Targets.Syslog\src\NLog.Targets.Syslog.sln';
SELECT Method.NameTokenized FROM Method JOIN Repo ON Method.RepoId = Repo.Id JOIN Solution ON Repo.Id = Solution.RepoId WHERE Solution.Path = 'jurney_P4Backup\P4Backup\P4Backup.sln';
SELECT R.Url  FROM Solution S  JOIN Method M ON S.Id = M.RepoId  JOIN Repo R ON S.RepoId = R.Id  WHERE M.Summary = 'A test for Decompose';
SELECT COUNT(*)  FROM Solution  WHERE Path = 'ninject_Ninject\Ninject.sln';
SELECT COUNT(*)  FROM Solution  WHERE RepoId IN (     SELECT Id      FROM Repo      WHERE Stars = 111 AND Forks = 58 AND Watchers = 111 )  AND Path IS NOT NULL;
SELECT AVG(Solution.ProcessedTime)  FROM Solution  JOIN Repo ON Solution.RepoId = Repo.Id  WHERE Repo.Stars = 254 AND Repo.Forks = 88 AND Repo.Watchers = 254;
SELECT COUNT(*)  FROM Solution  JOIN Repo ON Solution.RepoId = Repo.Id  WHERE Repo.Url = 'https://github.com/managedfusion/managedfusion.git'
SELECT COUNT(*)  FROM trains  WHERE direction = 'east';
SELECT COUNT(*)  FROM cars  WHERE train_id = 1;
SELECT cars.shape  FROM cars  JOIN trains ON cars.train_id = trains.id  WHERE trains.id = 1 AND cars.position = 4;
SELECT DISTINCT t.id  FROM trains t  JOIN cars c ON t.id = c.train_id  WHERE c.shape IN ('elipse', 'bucket')
SELECT COUNT(*)  FROM cars  WHERE train_id = 1 AND roof = 'none';
SELECT cars.id  FROM cars  JOIN trains ON cars.train_id = trains.id  WHERE trains.id = 1 AND cars.wheels = 2;
SELECT COUNT(*)  FROM (   SELECT DISTINCT t.id    FROM trains t    JOIN cars c ON t.id = c.train_id    WHERE t.direction = 'east' AND c.shape IN ('elipse', 'bucket') ) as inner_query;
SELECT t.id FROM trains t JOIN (     SELECT train_id     FROM cars     GROUP BY train_id     HAVING COUNT(*) < 4 ) c ON t.id = c.train_id WHERE t.direction = 'east';
SELECT c.id  FROM cars c  JOIN trains t ON c.train_id = t.id  WHERE c.sides = 'double' AND t.direction = 'west';
SELECT COUNT(*)  FROM (   SELECT t.id    FROM trains t    JOIN (     SELECT train_id, COUNT(*) as longCarsNum      FROM cars      WHERE shape = 'long'      GROUP BY train_id   ) c ON t.id = c.train_id   WHERE t.direction = 'east'   AND c.longCarsNum > 2 ) sub;
SELECT t.direction FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.load_num = 0;
SELECT t.direction  FROM trains t  JOIN cars c ON t.id = c.train_id  WHERE c.shape = 'ellipse';
SELECT COUNT(*)  FROM cars c  JOIN trains t ON c.train_id = t.id  WHERE t.direction = 'east' AND c.len = 'short'
SELECT DISTINCT c.shape  FROM cars c  JOIN trains t ON c.train_id = t.id  WHERE t.direction = 'east' AND c.position = 1;
SELECT COUNT(*)  FROM cars  JOIN trains ON cars.train_id = trains.id  WHERE trains.direction = 'east' AND cars.roof = 'flat';
SELECT COUNT(*)  FROM cars c  JOIN trains t ON c.train_id = t.id  WHERE t.direction = 'east'  AND c.roof = 'flat'  AND c.load_shape = 'circle';
SELECT      t.direction,     CASE          WHEN MAX(CASE                      WHEN c.shape = 'rectangle' THEN 1                      ELSE 0                  END) > MAX(CASE                                  WHEN c1.shape = 'rectangle' THEN 1                                  ELSE 0                              END) THEN 'Yes'         ELSE 'No'     END AS has_more_rectangular_cars FROM      trains t JOIN      cars c ON t.id = c.train_id JOIN      trains t1 ON t.id != t1.id JOIN      cars c1 ON t1.id = c1.train_id GROUP BY      t.direction;
SELECT t.direction  FROM trains t  JOIN cars c ON t.id = c.train_id  WHERE c.len = 'short' AND c.position = 4;
SELECT      (COUNT(trains.id) / COUNT(cars.train_id)) AS avg_cars_per_train FROM      trains JOIN      cars ON trains.id = cars.train_id WHERE      trains.direction = 'east';
SELECT      (COUNT(CASE WHEN t2.direction = 'east' THEN t1.train_id END) * 100.0 / COUNT(t1.train_id)) as percentage FROM      cars t1 JOIN      trains t2 ON t1.train_id = t2.id WHERE      t1.shape IN ('bucket', 'ellipse')
SELECT COUNT(*)  FROM cars  WHERE len = 'short' AND shape = 'hexagon';
SELECT COUNT(*)  FROM trains  WHERE trains.direction = 'west';
SELECT load_shape FROM cars WHERE shape = 'ellipse' AND len = 'short';
SELECT t.id FROM trains t JOIN cars c ON t.id = c.train_id WHERE t.direction = 'east';
SELECT COUNT(*)  FROM cars  WHERE shape = 'car' AND len = 'long' AND sides = 'closed' AND wheels > 0;
SELECT      trains.direction FROM      trains JOIN      cars ON trains.id = cars.train_id GROUP BY      trains.direction HAVING      COUNT(cars.id) >= (         SELECT              MAX(count(id))         FROM              trains JOIN cars ON trains.id = cars.train_id         GROUP BY              trains.direction     ) / 2;
SELECT COUNT(*)  FROM (   SELECT t.id    FROM trains t    JOIN cars c ON t.id = c.train_id    WHERE t.direction = 'east'    GROUP BY t.id    HAVING COUNT(c.id) >= 4 ) AS subquery;
SELECT t.direction  FROM trains t  JOIN (     SELECT train_id, COUNT(*) as count_id      FROM cars      WHERE shape = 'rectangle' AND position = 2      GROUP BY train_id ) c ON t.id = c.train_id  WHERE c.count_id = (SELECT MAX(count_id) FROM (     SELECT COUNT(*) as count_id      FROM cars      WHERE shape = 'rectangle' AND position = 2      GROUP BY train_id ));
SELECT COUNT(*)  FROM (SELECT t.id        FROM trains t        INNER JOIN cars c ON t.id = c.train_id        WHERE t.direction = 'west'        AND c.position = 3        AND c.sides = 'double') AS train_cars
SELECT COUNT(*)  FROM (   SELECT t.id    FROM trains t    JOIN cars c ON t.id = c.train_id    WHERE t.direction = 'east' AND c.position = 1 AND c.shape = 'rectangle' ) AS result;
SELECT COUNT(t.id)  FROM trains t  JOIN cars c ON t.id = c.train_id  WHERE t.direction = 'west' AND c.roof = 'none';
SELECT      t.direction  FROM      trains t  JOIN      (SELECT          train_id, COUNT(*) as carsNum       FROM           cars       GROUP BY           train_id       HAVING           carsNum = 3) c  ON      t.id = c.train_id  GROUP BY      t.direction  ORDER BY      COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM (   SELECT t.id    FROM trains t    JOIN cars c ON t.id = c.train_id    WHERE c.position = 1 AND c.load_num = 3 AND t.direction = 'east' ) AS train_subset;
SELECT COUNT(*)  FROM (SELECT * FROM cars WHERE train_id IN (SELECT id FROM trains WHERE direction = 'east')        AND position = 'trailPosi'        AND sides = 'double') as subquery;
SELECT DISTINCT t.direction  FROM trains t  JOIN cars c ON t.id = c.train_id  WHERE c.load_num = 0;
SELECT t.direction  FROM trains t  JOIN cars c ON t.id = c.train_id  WHERE c.position = 2 AND c.shape = 'diamond';
SELECT COUNT(*)  FROM (   SELECT DISTINCT t.id    FROM trains t    JOIN cars c ON t.id = c.train_id    WHERE t.direction = 'west' AND c.wheels = 3 AND c.roof = 'jagged' ) AS train_cars
SELECT t.direction FROM trains t JOIN (     SELECT train_id, COUNT(*) AS car_count     FROM cars     GROUP BY train_id     HAVING car_count <= 2 ) c ON t.id = c.train_id;
SELECT      t.direction,     (COUNT(CASE WHEN c.train_id = t.id AND c.train_posi >= 4 THEN c.id END) * 100.0 / COUNT(t.id)) as percentage FROM      trains t JOIN      cars c ON t.id = c.train_id GROUP BY      t.direction;
SELECT      t.id,     t.direction,     c.load_shape,     COUNT(CASE WHEN t.direction = 'east' THEN t.id END) * 100.0 / COUNT(t.id) as percentage FROM      trains t JOIN      cars c ON t.id = c.train_id WHERE      c.position = 1 GROUP BY      t.id,      c.load_shape HAVING      COUNT(CASE WHEN t.direction = 'east' AND c.position = 1 THEN t.id END) = (         SELECT COUNT(*)          FROM (             SELECT                  t.id,                 c.load_shape             FROM                  trains t             JOIN                  cars c ON t.id = c.train_id             WHERE                  c.position = 1) AS sub_query         GROUP BY              c.load_shape         ORDER BY              COUNT(*) DESC         LIMIT 1     )
SELECT T3.CharacterName FROM movie AS T1 JOIN characters AS T2 ON T1.MovieID = T2.MovieID JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Look Who''s Talking';
SELECT c.CharacterName  FROM characters c  JOIN movie m ON c.MovieID = m.MovieID  WHERE m.Title = 'Batman' AND c.screentime = (SELECT MAX(screentime) FROM characters WHERE MovieID = c.MovieID);
SELECT a.Name FROM actor a JOIN characters c ON a.ActorID = c.ActorID WHERE c.CharacterName = 'Joker' AND c.MovieID IN (     SELECT m.MovieID      FROM movie m      WHERE m.Title = 'Batman' );
SELECT T1.Name  FROM actor AS T1  JOIN characters AS T2 ON T1.ActorID = T2.ActorID  JOIN movie AS T3 ON T3.MovieID = T2.MovieID  WHERE T3.Title = 'Batman';
SELECT m.Title FROM movie m JOIN characters c ON m.MovieID = c.MovieID WHERE c.Character_Name = 'Dr. Archibald ''Moonlight'' Graham';
SELECT m.Title FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON a.ActorID = c.ActorID WHERE a.Name = 'Tom Cruise';
SELECT COUNT(*)  FROM movie  JOIN characters ON movie.MovieID = characters.MovieID  JOIN actor ON characters.ActorID = actor.ActorID  WHERE actor.Name = 'Morgan Freeman' AND movie.MPAA_Rating = 'PG';
SELECT m.Title FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Name = 'Tom Cruise' AND m.Rating = (     SELECT MAX(rating) FROM movie );
SELECT c.CharacterName  FROM characters ch  JOIN movie m ON ch.MovieID = m.MovieID  JOIN actor a ON ch.ActorID = a.ActorID  WHERE a.Name = 'Tom Cruise' AND m.Title = 'Born on the Fourth of July';
SELECT T3.CharacterName FROM actor AS T1 JOIN characters AS T3 ON T1.ActorID = T3.ActorID JOIN movie AS T2 ON T3.MovieID = T2.MovieID WHERE T1.Name = 'Tom Cruise';
SELECT actor.Name FROM actor JOIN characters ON actor.ActorID = characters.ActorID JOIN movie ON characters.MovieID = movie.MovieID WHERE movie.Title = 'Batman' AND actor.Height_inches = (     SELECT MAX(Height_inches)     FROM actor )
SELECT COUNT(DISTINCT m.MovieID) FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON a.ActorID = c.ActorID WHERE a.Gender = 'Male' AND a.Ethnicity = 'African American';
SELECT      AVG(m.rating) AS AverageRating FROM      actor a JOIN      characters c ON a.ActorID = c.ActorID JOIN      movie m ON m.MovieID = c.MovieID WHERE      a.Name = 'Tom Cruise'
SELECT      ((MAX(c.screentime) - MIN(c.screentime)) / MIN(c.screentime)) * 100 AS PercentageDifference FROM      characters c JOIN      movie m ON c.MovieID = m.MovieID WHERE      m.Title = 'Batman';
SELECT Title  FROM movie  WHERE Budget = (SELECT MAX(Budget) FROM movie);
SELECT T2.MPAA_Rating  FROM characters AS T1  JOIN movie AS T2 ON T1.MovieID = T2.MovieID  WHERE T1.Character_Name = 'Peter Quill';
SELECT c.CharacterName  FROM characters AS c  JOIN movie AS m ON c.MovieID = m.MovieID  WHERE m.Genre = 'Thriller' AND m.Rating = (SELECT MAX(Rating) FROM movie WHERE Genre = 'Thriller') AND c.creditOrder = 1;
SELECT a.Name FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Batman' AND c.screentime = (SELECT MAX(screentime) FROM characters WHERE MovieID = m.MovieID)
SELECT COUNT(*)  FROM movie  JOIN characters ON movie.MovieID = characters.MovieID  JOIN actor ON characters.ActorID = actor.ActorID  WHERE actor.NetWorth = (SELECT MAX(NetWorth) FROM actor)
SELECT a.Name FROM actor a JOIN characters c ON a.ActorID = c.ActorID WHERE c.CharacterName = 'Chanice Kobolowski';
SELECT `Date of Birth` FROM actor JOIN characters ON actor.ActorID = characters.ActorID WHERE characters.Character Name = 'Sully';
SELECT `Birth City`  FROM actor  JOIN characters ON actor.ActorID = characters.ActorID  WHERE characters.Character Name = 'Gabriel Martin';
SELECT `Biography`  FROM actor  JOIN characters ON actor.ActorID = characters.ActorID  WHERE characters.CharacterName = 'Michael Moscovitz';
SELECT T1.Height_Inches  FROM actor AS T1  JOIN characters AS T2 ON T1.ActorID = T2.ActorID  WHERE T2.Character_Name = 'Lurch';
SELECT `Character Name`  FROM characters  WHERE `MovieID` IN (   SELECT `MovieID`    FROM movie    WHERE `Title` = 'G.I. Joe: The Rise of Cobra' ) AND `creditOrder` = 3;
SELECT T3.Name  FROM characters AS T1  JOIN movie AS T2 ON T1.MovieID = T2.MovieID  JOIN actor AS T3 ON T3.ActorID = T1.ActorID  WHERE T1.MovieID = (SELECT MovieID FROM movie WHERE Title = 'American Hustle') AND T1.creditOrder = 2;
SELECT T3.Name  FROM characters AS T1  JOIN movie AS T2 ON T1.MovieID = T2.MovieID  JOIN actor AS T3 ON T1.ActorID = T3.ActorID  WHERE T2.Release_Date = '2015-10-26' AND T1.creditOrder = 1;
SELECT      (COUNT(CASE WHEN c.BirthCountry = 'USA' THEN c.ActorID END) / COUNT(c.ActorID)) * 100 AS PercentageUSAActors FROM      actor a JOIN      characters c ON a.ActorID = c.ActorID JOIN      movie m ON m.MovieID = c.MovieID WHERE      m.Title = 'Mrs. Doubtfire';
SELECT      (COUNT(CASE WHEN c.DateOfBirth > '1970-01-01' THEN c.ActorID END) / NULLIF(COUNT(a.ActorID), 0)) * 100 AS Percentage FROM      actor a JOIN      characters c ON a.ActorID = c.ActorID JOIN      movie m ON m.MovieID = c.MovieID WHERE      m.Title = 'Dawn of the Planet of the Apes'
SELECT MovieID FROM movie WHERE Budget = 15000000 AND Rating BETWEEN 7 AND 8;
SELECT COUNT(*)  FROM movie  WHERE MPAA_Rating = 'PG'  AND Release_Date BETWEEN '1990-06-01' AND '1990-06-30';
SELECT Name  FROM actor  WHERE ActorID = 439 AND Gender = 'Male' AND Ethnicity = 'White';
SELECT T2.Genre FROM actor AS T1 JOIN characters AS T3 ON T1.ActorID = T3.ActorID JOIN movie AS T2 ON T2.MovieID = T3.MovieID WHERE T1.Birth City = 'New York City' AND T2.Rating > 5;
SELECT COUNT(*)  FROM movie  JOIN characters ON movie.MovieID = characters.MovieID  JOIN actor ON characters.ActorID = actor.ActorID  WHERE movie.Genre = 'Romance' AND actor.Name = 'John Travolta';
SELECT actor.Height, actor.NetWorth  FROM actor  JOIN characters ON actor.ActorID = characters.ActorID  JOIN movie ON movie.MovieID = characters.MovieID  WHERE movie.Title = 'Three Men and a Little Lady';
SELECT m.Genre  FROM movie m  JOIN movie_actor ma ON m.MovieID = ma.MovieID  JOIN actor a ON ma.ActorID = a.ActorID  WHERE m.MPAA_Rating = 'PG' AND a.NetWorth = (SELECT MAX(NetWorth) FROM actor)
SELECT T1.NetWorth  FROM actor AS T1  JOIN characters AS T2 ON T1.ActorID = T2.ActorID  JOIN movie AS T3 ON T3.MovieID = T2.MovieID  WHERE T3.Title = 'Misery'  AND T1.Height BETWEEN 60 AND 70;
SELECT COUNT(*)  FROM actor  JOIN characters ON actor.ActorID = characters.ActorID  JOIN movie ON characters.MovieID = movie.MovieID  WHERE actor.Gender = 'Male' AND actor.BirthCountry = 'USA' AND movie.Title = 'Ghost';
SELECT m.Title, m.MPAA_Rating  FROM movie m  JOIN characters c ON m.MovieID = c.MovieID  JOIN actor a ON a.ActorID = c.ActorID  WHERE a.Name = 'Leonardo DiCaprio'  AND m.Budget = (SELECT MAX(budget) FROM movie);
SELECT actor.Name, actor.Date_of_Birth, actor.NetWorth  FROM actor  JOIN characters ON actor.ActorID = characters.ActorID  JOIN movie ON movie.MovieID = characters.MovieID  WHERE movie.Title = 'Die Hard 2' AND actor.Height BETWEEN 60 AND 65;
SELECT T2.Runtime  FROM actor AS T1  JOIN characters AS T3 ON T1.ActorID = T3.ActorID  JOIN movie AS T2 ON T2.MovieID = T3.MovieID  WHERE T1.Ethnicity = 'African American' AND T1.DateOfBirth = '1954-12-28'
SELECT T3.Name  FROM characters AS T1  JOIN movie AS T2 ON T1.MovieID = T2.MovieID  JOIN actor AS T3 ON T3.ActorID = T1.ActorID  WHERE T1.Character_Name = 'Don Altobello' AND T2.Genre = 'Drama' AND T2.Gross = 136766062;
SELECT m.Gross  FROM movie m  JOIN movie_characters mc ON m.MovieID = mc.MovieID  JOIN actor a ON a.ActorID = mc.ActorID  WHERE m.Genre = 'Comedy' AND m.Rating < 7 AND a.NetWorth > '$375,000,000.00';
SELECT m.Runtime  FROM movie m  JOIN characters c ON m.MovieID = c.MovieID  JOIN actor a ON c.ActorID = a.ActorID  WHERE a.Name = 'Jackie Chan' AND m.Rating > 7;
SELECT      (COUNT(CASE WHEN T1.NetWorth > 400000000 THEN T2.MovieID ELSE NULL END) / COUNT(T2.MovieID)) * 100 AS Percentage FROM      actor T1  JOIN      movie T2 ON T1.ActorID IN (         SELECT              T3.ActorID          FROM              characters T3          WHERE              T3.MovieID IN (SELECT MovieID FROM movie WHERE Genre = 'Drama')     )  WHERE      T1.NetWorth > 400000000;
SELECT c.CharacterName  FROM characters AS c  JOIN actor AS a ON c.ActorID = a.ActorID  JOIN movie AS m ON c.MovieID = m.MovieID  WHERE a.Gender = 'Female'  AND a.BirthCity = 'Sherman Oaks'  AND m.Title = 'Bruce Almighty'  AND a.Height > (SELECT AVG(a2.Height) * 0.5 FROM actor AS a2);
SELECT COUNT(*)  FROM twitter  WHERE Lang = 'en';
SELECT text  FROM twitter  WHERE IsReshare = 'TRUE';
SELECT COUNT(*)  FROM twitter  WHERE Reach > 1000;
SELECT COUNT(*)  FROM twitter  WHERE Sentiment > 0 AND Weekday = 'Thursday';
SELECT text  FROM twitter  WHERE Likes = (SELECT MAX(Likes) FROM twitter);
SELECT DISTINCT City  FROM location  WHERE Country = 'Argentina';
SELECT COUNT(*)  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE location.Country = 'Argentina';
SELECT l.City, COUNT(t.TweetID) as TweetCount FROM location l JOIN twitter t ON l.LocationID = t.LocationID WHERE l.Country = 'Argentina' GROUP BY l.City ORDER BY TweetCount DESC LIMIT 1;
SELECT COUNT(*)  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE IsReshare = 'TRUE' AND location.City = 'Buenos Aires';
SELECT twitter.text  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE location.City = 'Buenos Aires' AND twitter.Sentiment > 0;
SELECT Country  FROM social_media.twitter  JOIN social_media.location ON twitter.LocationID = location.LocationID  GROUP BY Country  ORDER BY SUM(Likes) DESC  LIMIT 1;
SELECT      CASE          WHEN COUNT(CASE WHEN T1.Country = 'Argentina' THEN T2.TweetID END) >               COUNT(CASE WHEN T1.Country = 'Australia' THEN T2.TweetID END) THEN 'Argentina'         ELSE 'Australia'     END AS CountryWithMorePositiveTweets FROM      location AS T1 JOIN      twitter AS T2 ON T1.LocationID = T2.LocationID WHERE      T1.Country IN ('Argentina', 'Australia') AND     T2.Sentiment > 0;
SELECT COUNT(*)  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE location.City = 'Buenos Aires' AND twitter.Weekday = 'Thursday';
SELECT COUNT(*)  FROM user  WHERE UserID IN (     SELECT UserID      FROM twitter      WHERE Likes > 1000 );
SELECT COUNT(*)  FROM twitter  WHERE UserID IN (SELECT UserID FROM user WHERE Gender = 'Male')
SELECT u.Gender  FROM user u  JOIN twitter t ON u.UserID = t.UserID  GROUP BY u.Gender  HAVING MAX(t.Reach) = (SELECT MAX(Reach) FROM twitter);
SELECT COUNT(*)  FROM twitter t  JOIN user u ON t.UserID = u.UserID  JOIN location l ON t.LocationID = l.LocationID  WHERE l.Country = 'Argentina' AND u.Gender = 'Male';
SELECT twitter.text  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  JOIN user ON twitter.UserID = user.UserID  WHERE location.City = 'Buenos Aires' AND user.Gender = 'Male';
SELECT AVG(t.TweetID)  FROM twitter t  JOIN location l ON t.LocationID = l.LocationID  WHERE l.Country = 'Argentina'  GROUP BY l.City;
SELECT      (COUNT(CASE WHEN u.Gender = 'Male' THEN t.TweetID END) * 100.0 / COUNT(t.TweetID)) as Percentage FROM      twitter t JOIN      user u ON t.UserID = u.UserID WHERE      t.Sentiment > 0;
SELECT COUNT(*)  FROM user  WHERE Gender = 'Unknown';
SELECT COUNT(DISTINCT State)  FROM location  WHERE Country = 'United Kingdom';
SELECT StateCode  FROM location  WHERE City = 'Gwynedd';
SELECT LocationID FROM location WHERE State = 'West Sussex';
SELECT COUNT(*)  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE location.State = 'Texas' AND IsReshare = 'TRUE'
SELECT T3.Country  FROM twitter AS T1  JOIN location AS T3 ON T1.LocationID = T3.LocationID  WHERE T1.Reach = 547851;
SELECT COUNT(*)  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE location.State = 'Ha Noi' AND twitter.Sentiment > 0;
SELECT text  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE location.State = 'Connecticut'  ORDER BY Klout DESC  LIMIT 1;
SELECT COUNT(*)  FROM user  JOIN twitter ON user.UserID = twitter.UserID  JOIN location ON twitter.LocationID = location.LocationID  WHERE location.Country = 'United States' AND location.State = 'Wisconsin' AND user.Gender = 'Female';
SELECT user.Gender  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  JOIN user ON twitter.UserID = user.UserID  WHERE twitter.TweetID = 'tw-715909161071091712';
SELECT l.City  FROM twitter t  JOIN location l ON t.LocationID = l.LocationID  WHERE t.text = 'One of our favorite stories is @FINRA_News%27s move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a';
SELECT user.Gender  FROM twitter  JOIN user ON twitter.UserID = user.UserID  WHERE twitter.RetweetCount = 535;
SELECT user.Gender  FROM user  JOIN twitter ON user.UserID = twitter.UserID  WHERE twitter.Weekday = 'Wednesday'  AND twitter.Klout = (SELECT MAX(Klout) FROM twitter);
SELECT u.Gender  FROM twitter t  JOIN user u ON t.UserID = u.UserID  WHERE t.Likes = (SELECT MAX(Likes) FROM twitter)
SELECT COUNT(T.TweetID)  FROM twitter T  JOIN location L ON T.LocationID = L.LocationID  WHERE L.State = 'Michigan' AND T.Weekday = 'Thursday';
SELECT StateCode FROM location WHERE LocationID = (SELECT LocationID FROM twitter WHERE TweetID = 'tw-685681052912873473');
SELECT      (COUNT(CASE WHEN u.Gender = 'Male' THEN 1 END)       OVER () * 100.0 / COUNT(*) OVER ()) AS percentage FROM      user u JOIN      location l ON u.LocationID = l.LocationID WHERE      l.State = 'Florida';
SELECT      (COUNT(CASE WHEN T2.Sentiment > 0 THEN 1 END) / COUNT(T1.TweetID)) * 100 AS PositiveTweetsPercentage FROM      twitter AS T1 JOIN      location AS T2 ON T1.LocationID = T2.LocationID WHERE      T2.State = 'California'
SELECT Weekday FROM twitter WHERE TweetID = 'tw-682712873332805633';
SELECT COUNT(DISTINCT Reach)  FROM twitter  WHERE text = 'Happy New Year to all those AWS instances of ours!'
SELECT COUNT(TweetID)  FROM twitter  WHERE Lang = 'en';
SELECT COUNT(*)  FROM twitter  WHERE TweetID = 'tw-682714048199311366' AND LocationID = 3751;
SELECT COUNT(TweetID)  FROM twitter  WHERE Weekday = 'Wednesday';
SELECT text  FROM twitter  WHERE Weekday = 'Thursday';
SELECT user.Gender  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  JOIN user ON twitter.UserID = user.UserID  WHERE twitter.TweetID = 'tw-682714583044243456';
SELECT twitter.text FROM twitter JOIN user ON twitter.UserID = user.UserID WHERE user.Gender = 'Unknown';
SELECT COUNT(*)  FROM user  WHERE Gender = 'Male'  AND UserID IN (SELECT UserID FROM twitter);
SELECT u.Gender  FROM user u  JOIN twitter t ON u.UserID = t.UserID  WHERE t.Lang = 'en'  GROUP BY u.Gender  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT u.Gender  FROM user u  JOIN twitter t ON u.UserID = t.UserID  WHERE t.RetweetCount > 30;
SELECT COUNT(*)  FROM user  WHERE Gender = 'Female'  AND EXISTS (     SELECT 1      FROM twitter      WHERE user.UserID = twitter.UserID      AND IsReshare = 'TRUE' );
SELECT Country  FROM social_media.twitter  JOIN social_media.location ON twitter.LocationID = location.LocationID  GROUP BY Country  ORDER BY SUM(Likes) DESC  LIMIT 1;
SELECT `Country`  FROM social_media.location  JOIN social_media.twitter ON location.LocationID = twitter.LocationID  WHERE twitter.TweetID = 'tw-682723090279841798';
SELECT text  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE location.Country = 'Australia';
SELECT twitter.text  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE location.Country = 'Malaysia' AND location.State = 'Selangor' AND location.City = 'Rawang';
SELECT DISTINCT t.Lang  FROM twitter t  JOIN location l ON t.LocationID = l.LocationID  WHERE l.Country = 'Brazil';
SELECT Country  FROM location l  JOIN twitter t ON l.LocationID = t.LocationID  WHERE t.Sentiment > 0  GROUP BY l.Country  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT SUM(twitter.Likes)  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  JOIN user ON twitter.UserID = user.UserID  WHERE location.Lang = 'ru' AND user.Gender = 'Male';
SELECT      AVG(Count_Tweets_Per_Week) AS Average_Male_Tweets_in_a_Week FROM  (     SELECT          UserID,         COUNT(TweetID) AS Count_Tweets_Per_Week     FROM          twitter     INNER JOIN          user ON twitter.UserID = user.UserID     WHERE          user.Gender = 'Male'     GROUP BY          UserID ) AS Male_Tweets
SELECT COUNT(*)  FROM twitter  WHERE Klout > 50;
SELECT text  FROM twitter  WHERE Lang <> 'en'
SELECT UserID  FROM twitter  GROUP BY UserID  ORDER BY COUNT(TweetID) DESC  LIMIT 1;
SELECT COUNT(*)  FROM twitter  WHERE Weekday = 'Monday' AND IsReshare = 'TRUE';
SELECT t.text  FROM twitter t  JOIN (     SELECT LocationID, UserID, MAX(Reach) as max_unique_users      FROM twitter      GROUP BY LocationID, UserID ) max_reach ON t.LocationID = max_reach.LocationID AND t.UserID = max_reach.UserID ORDER BY max_reach.max_unique_users DESC  LIMIT 3;
SELECT COUNT(*)  FROM twitter  WHERE IsReshare = 'TRUE' AND Likes > 100;
SELECT COUNT(T.tweetID)  FROM twitter T  JOIN user U ON T.userID = U.userID  WHERE U.gender = 'Male' AND T.weekday = 'Monday';
SELECT u.Gender  FROM user u  JOIN twitter t ON u.UserID = t.UserID  WHERE t.Likes = (SELECT MAX(Likes) FROM twitter)
SELECT twitter.text  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  JOIN user ON twitter.UserID = user.UserID  WHERE location.Lang = 'fr' AND user.Gender = 'Male';
SELECT COUNT(*)  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE location.Country = 'Australia'  AND twitter.Lang = 'fr';
SELECT COUNT(*)  FROM twitter t  JOIN user u ON t.UserID = u.UserID  JOIN location l ON t.LocationID = l.LocationID  WHERE t.Sentiment > 0 AND u.Gender = 'Male' AND l.Country = 'Australia';
SELECT      (COUNT(CASE WHEN TW.Sentiment > 0 THEN 1 END) - COUNT(CASE WHEN TW.Sentiment = 0 THEN 1 END)) AS Difference FROM      twitter TW JOIN      user U ON TW.UserID = U.UserID WHERE      U.Gender = 'Male';
SELECT l.City  FROM location l  JOIN twitter t ON l.LocationID = t.LocationID  WHERE t.RetweetCount = MAX(t.RetweetCount)  LIMIT 1;
SELECT      T1.City  FROM      location AS T1  JOIN      twitter AS T2  ON      T1.LocationID = T2.LocationID  WHERE      T1.City IN ('Bangkok', 'Chiang Mai')  GROUP BY      T1.City  ORDER BY      COUNT(T2.TweetID) DESC  LIMIT 1;
SELECT COUNT(*)  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE location.Country = 'Argentina'  AND location.State = 'Sante Fe'  AND DAY = 31;
SELECT      L.City,      COUNT(T.TweetID) AS TweetCount FROM      location L JOIN      twitter T ON L.LocationID = T.LocationID WHERE      L.Country = 'Canada' GROUP BY      L.City ORDER BY      TweetCount DESC LIMIT 3;
SELECT DISTINCT location.City  FROM location  JOIN twitter ON location.LocationID = twitter.LocationID  WHERE twitter.Sentiment = 0;
SELECT t.text  FROM twitter t  JOIN user u ON t.UserID = u.UserID  JOIN location l ON t.LocationID = l.LocationID  WHERE u.Gender = 'Male' AND l.Country = 'Argentina'  AND t.Likes = (SELECT MAX(Likes) FROM twitter WHERE UserID IN (SELECT UserID FROM user WHERE Gender = 'Male') AND LocationID IN (SELECT LocationID FROM location WHERE Country = 'Argentina'))
SELECT AVG(t.Likes)  FROM twitter t  JOIN user u ON t.UserID = u.UserID  WHERE u.Gender = 'Male' AND t.Weekday = 'Monday';
SELECT      T1.City,     AVG(T2.Likes) AS AvgLikes FROM      location AS T1 JOIN      twitter AS T2 ON T1.LocationID = T2.LocationID WHERE      T1.City IN ('Bangkok', 'Chiang Mai') GROUP BY      T1.City ORDER BY      AvgLikes DESC LIMIT 1;
SELECT name  FROM course  WHERE name = 'Intro to BlockChain' OR name = 'Computer Network' ORDER BY diff DESC  LIMIT 1;
SELECT name  FROM course  WHERE diff = 'Machine Learning Theory' AND credit < (SELECT MAX(credit) FROM course);
SELECT COUNT(*)  FROM prof  WHERE popularity > (SELECT popularity FROM prof WHERE last_name = 'Zhou' AND first_name = 'Zhihua');
SELECT phone_number  FROM student  WHERE f_name = 'Kerry' AND l_name = 'Pryor';
SELECT p.first_name, p.last_name  FROM prof p  JOIN RA r ON p.prof_id = r.prof_id  JOIN student s ON r.student_id = s.student_id  WHERE s.f_name = 'Faina' AND s.l_name = 'Mallinar';
SELECT COUNT(*)  FROM RA  JOIN student ON RA.student_id = student.student_id  JOIN prof ON RA.prof_id = prof.prof_id  WHERE prof.last_name = 'Skyme' AND prof.first_name = 'Sauveur';
SELECT s.f_name, s.l_name  FROM student s  JOIN RA r ON s.student_id = r.student_id  WHERE r.capability = 5;
SELECT AVG(RA.salary)  FROM RA  JOIN professor ON RA.prof_id = professor.prof_id  WHERE professor.first_name = 'Ogdon' AND professor.last_name = 'Zywicki' AND RA.salary = 'med';
SELECT f_name, l_name  FROM student  JOIN registration ON student.student_id = registration.student_id  JOIN course ON registration.course_id = course.course_id  WHERE course.name = 'Machine Learning Theory';
SELECT COUNT(*)  FROM student  JOIN registration ON student.student_id = registration.student_id  WHERE registration.grade = 'B'  AND registration.course_id IN (     SELECT course_id      FROM course      WHERE name = 'Machine Learning Theory' )  AND student.gpa > 3;
SELECT c.name  FROM course AS c  JOIN registration AS r ON c.course_id = r.course_id  JOIN student AS s ON r.student_id = s.student_id  WHERE s.f_name = 'Laughton' AND s.l_name = 'Antonio';
SELECT f_name, l_name  FROM student  JOIN registration ON student.student_id = registration.student_id  WHERE registration.course_id = (SELECT course_id FROM course WHERE name = 'Intro to Database 2')  AND grade IS NULL;
SELECT s.f_name, s.l_name  FROM student AS s JOIN registration AS r ON s.student_id = r.student_id WHERE r.course_id = (SELECT course_id FROM course WHERE name = 'Machine Learning Theory') AND (s.student_id IN (     SELECT r.student_id FROM registration AS r      WHERE r.course_id = (SELECT course_id FROM course WHERE name = 'Machine Learning Theory')      AND r.student_id = (         SELECT student_id FROM student WHERE f_name = 'Willie' AND l_name = 'Rechert'     )      ORDER BY r.sat DESC LIMIT 1 ) OR s.student_id = (     SELECT student_id FROM student WHERE f_name = 'Laughton' AND l_name = 'Antonio' )) ;
SELECT COUNT(DISTINCT p.prof_id) FROM prof p JOIN RA r ON p.prof_id = r.prof_id WHERE COUNT(r.student_id) > 3 AND p.gender = 'M';
SELECT COUNT(*)  FROM student  JOIN registration ON student.student_id = registration.student_id  JOIN course ON registration.course_id = course.course_id  WHERE course.name = 'Machine Learning Theory' AND student.type = 'UG';
SELECT p.first_name, p.last_name  FROM prof p  JOIN RA r ON p.prof_id = r.prof_id  JOIN student s ON r.student_id = s.student_id  WHERE s.f_name = 'Willie' AND s.l_name = 'Rechert';
SELECT AVG(student.gpa)  FROM student  JOIN RA ON student.student_id = RA.student_id  WHERE RA.prof_id = (SELECT prof_id FROM prof WHERE first_name = 'Ogdon' AND last_name = 'Zywicki')
SELECT AVG(sat)  FROM registration  WHERE name = 'Machine Learning Theory';
SELECT COUNT(*)  FROM student  WHERE type = 'RPG';
SELECT f_name, l_name  FROM student  WHERE gpa = (SELECT MAX(gpa) FROM student);
SELECT COUNT(*)  FROM registration  JOIN course ON registration.course_id = course.course_id  WHERE course.diff = 1 AND course.credit = '3' AND registration.grade = 'A';
SELECT COUNT(*)  FROM student  WHERE student_id IN (     SELECT student_id      FROM registration      WHERE course_id IN (         SELECT course_id          FROM course          WHERE diff = 5     ) );
SELECT p.first_name, p.last_name  FROM prof p  JOIN RA r ON p.prof_id = r.prof_id  WHERE r.student_id IN (     SELECT s.student_id      FROM student s      WHERE s.f_name = 'Oliy' AND s.l_name = 'Spratling' );
SELECT p.popularity  FROM prof p  JOIN RA r ON p.prof_id = r.prof_id  JOIN student s ON r.student_id = s.student_id  WHERE s.f_name = 'Harrietta' AND s.l_name = 'Lydford';
SELECT COUNT(*)  FROM RA  JOIN prof ON RA.prof_id = prof.prof_id  WHERE prof.gender = 'F'  AND prof.teachingability = (SELECT MIN(teachingability) FROM prof);
SELECT p.first_name, p.last_name  FROM prof p  JOIN RA r ON p.prof_id = r.prof_id  WHERE r.student_id IN (     SELECT s.student_id      FROM student s      JOIN registration reg ON s.student_id = reg.student_id      GROUP BY s.student_id      HAVING COUNT(DISTINCT reg.course_id) > 2 )  AND p.teachingability = (     SELECT MAX(teachingability)      FROM prof      WHERE prof.prof_id = r.prof_id );
SELECT r.grade  FROM course c  JOIN registration r ON c.course_id = r.course_id  JOIN student s ON r.student_id = s.student_id  WHERE s.f_name = 'Rik' AND s.l_name = 'Unsworth' AND c.name = 'Computer Network';
SELECT COUNT(*)  FROM course  JOIN registration ON course.course_id = registration.course_id  JOIN student ON registration.student_id = student.student_id  WHERE student.f_name = 'Alvera' AND student.l_name = 'McQuillin';
SELECT s.f_name, s.l_name  FROM student s  JOIN RA r ON s.student_id = r.student_id  JOIN prof p ON r.prof_id = p.prof_id  WHERE p.last_name = 'Zhou' AND p.type = 'Research Assistant' AND s.type = 'RPG';
SELECT COUNT(*)  FROM student  JOIN registration ON student.student_id = registration.student_id  JOIN course ON registration.course_id = course.course_id  WHERE course.name = 'Statistical Learning';
SELECT s.f_name, s.l_name  FROM student AS s JOIN registration AS r ON s.student_id = r.student_id WHERE r.course_id IN (     SELECT c.course_id      FROM course AS c      WHERE c.name = 'Applied Deep Learning' ) AND r.grade IS NULL;
SELECT s.phone_number  FROM student AS s  JOIN registration AS r ON s.student_id = r.student_id  WHERE r.grade = 'A' AND r.course_id IN (     SELECT c.course_id      FROM course AS c      WHERE c.name = 'Intro to BlockChain' )
SELECT      (COUNT(CASE WHEN s.type = 'TPG' THEN 1 END)       OVER ()      / COUNT(*) OVER ()      * 100) AS percentage FROM      RA r  JOIN      student s ON r.student_id = s.student_id  WHERE      r.prof_id IN (         SELECT prof_id          FROM prof          WHERE first_name = 'Ogdon' AND last_name = 'Zywicki'     );
SELECT      (COUNT(CASE WHEN r.grade = 'B' AND c.name = 'Computer Network' THEN s.student_id END)      / NULLIF(COUNT(s.student_id), 0)) * 100 AS percentage FROM      course c JOIN      registration r ON c.course_id = r.course_id JOIN      student s ON r.student_id = s.student_id;
SELECT COUNT(*)  FROM course  WHERE diff = 5;
SELECT p.first_name, p.last_name  FROM prof p  JOIN graduate_from gf ON p.prof_id = gf.prof_id  WHERE gf.university IN ('Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University');
SELECT name  FROM course  WHERE diff = (SELECT MAX(diff) FROM course WHERE credit = (SELECT MAX(credit) FROM course));
SELECT COUNT(*)  FROM student  WHERE type = 'UG' AND intelligence = (SELECT MAX(intelligence) FROM student WHERE type = 'UG');
SELECT COUNT(*)  FROM prof  WHERE gender = 'female' AND popularity = (SELECT MAX(popularity) FROM prof);
SELECT COUNT(*)  FROM student  WHERE type = 'RPG';
SELECT COUNT(*)  FROM registration  JOIN student ON registration.student_id = student.student_id  WHERE course_id = (SELECT course_id FROM course WHERE name = 'Applied Deep Learning') AND grade = 'A';
SELECT s.gpa  FROM student s  JOIN RA r ON s.student_id = r.student_id  WHERE r.salary = 'free';
SELECT c.name  FROM course c  JOIN (     SELECT course_id      FROM registration      WHERE grade = 'A'      GROUP BY course_id      ORDER BY COUNT(*) DESC      LIMIT 1 ) r ON c.course_id = r.course_id  WHERE c.diff = 1;
SELECT COUNT(*)  FROM registration r  JOIN student s ON r.student_id = s.student_id  WHERE s.gpa = (SELECT MAX(gpa) FROM student)
SELECT COUNT(*)  FROM RA  JOIN prof ON RA.prof_id = prof.prof_id  WHERE prof.first_name = 'Ogdon' AND prof.last_name = 'Zywicki';
SELECT c.name  FROM course c  JOIN registration r ON c.course_id = r.course_id  WHERE r.sat = 5  ORDER BY r.sat DESC  LIMIT 1;
SELECT c.name FROM course c JOIN (     SELECT r.student_id, s.intelligence, r.grade     FROM registration r     JOIN student s ON r.student_id = s.student_id ) AS subq ON c.course_id = subq.student_id WHERE subq.intelligence = (SELECT MIN(intelligence) FROM student) AND subq.grade = 1;
SELECT c1.name, COUNT(*) as num_As  FROM (     SELECT r.course_id      FROM registration r      JOIN course c ON r.course_id = c.course_id      WHERE c.name IN ('Advanced Operating System', 'Intro to BlockChain')          AND r.grade = 'A' ) AS r  JOIN course c1 ON r.course_id = c1.course_id  GROUP BY c1.name  ORDER BY num_As DESC  LIMIT 1;
SELECT p.popularity  FROM prof p  JOIN RA r ON p.prof_id = r.prof_id  WHERE r.capability = (SELECT MAX(capability) FROM RA) AND p.prof_id IN (     SELECT r.prof_id      FROM RA r     JOIN student s ON r.student_id = s.student_id     WHERE s.type = 'RA'     GROUP BY r.prof_id     HAVING COUNT(DISTINCT s.student_id) = (         SELECT COUNT(DISTINCT student_id)          FROM RA          GROUP BY prof_id          ORDER BY COUNT(DISTINCT student_id) DESC          LIMIT 1     ) );
SELECT      AVG(cnt_students) AS avg_students_per_course FROM (     SELECT          COUNT(registration.student_id) AS cnt_students,         course.course_id     FROM          course     WHERE          course.diff = 4     GROUP BY          course.course_id ) subquery
SELECT COUNT(*)  FROM student  JOIN registration ON student.student_id = registration.student_id  WHERE student.gpa BETWEEN 3 AND 4 AND registration.grade IS NULL;
SELECT COUNT(*)  FROM student  JOIN registration ON student.student_id = registration.student_id  JOIN course ON registration.course_id = course.course_id  WHERE student.type = 'UG' AND course.diff = 'Easy' AND registration.grade = 'A';
SELECT s.f_name, s.l_name  FROM student AS s JOIN RA AS r ON s.student_id = r.student_id WHERE r.capability = 5 AND r.salary = 'high' GROUP BY s.student_id HAVING AVG(s.gpa) > 0;
SELECT R.prof_id, S.student_id  FROM RA R  JOIN (     SELECT prof_id, MIN(capability) as min_capability      FROM RA      GROUP BY prof_id ) R_min ON R.prof_id = R_min.prof_id AND R.capability = R_min.min_capability JOIN registration Z ON R.course_id = Z.course_id AND Z.grade = 'sat' JOIN course C ON Z.course_id = C.course_id AND C.diff = 'easy' JOIN student S ON Z.student_id = S.student_id
SELECT first_name, last_name  FROM prof  WHERE graduate_from = 'University of Boston';
SELECT c.course_id, s.student_id FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE r.grade IS NULL OR r.grade = '';
SELECT      (COUNT(CASE WHEN gender = 'Male' THEN prof_id END) :: REAL) /      (COUNT(CASE WHEN gender = 'Female' THEN prof_id END) :: REAL) AS male_female_ratio FROM      prof;
SELECT name, credit  FROM course  WHERE diff = (SELECT MIN(diff) FROM course);
SELECT s.f_name, s.l_name, s.gpa  FROM student s  JOIN registration r ON s.student_id = r.student_id  JOIN course c ON r.course_id = c.course_id  JOIN RA ra ON c.prof_id = ra.prof_id  WHERE ra.prof_id IN (     SELECT p.prof_id      FROM prof p      ORDER BY p.popularity DESC      LIMIT 1 );
SELECT f_name, l_name, email  FROM student  JOIN RA ON student.student_id = RA.student_id  WHERE RA.salary = 'free';
SELECT s.f_name, s.l_name, r.capability, st.gpa  FROM student s  JOIN RA r ON s.student_id = r.student_id  JOIN prof p ON r.prof_id = p.prof_id  WHERE p.last_name = 'Conkay' AND p.first_name = 'Merwyn';
SELECT student.f_name, student.l_name, registration.grade  FROM student  JOIN registration ON student.student_id = registration.student_id  JOIN course ON registration.course_id = course.course_id  WHERE course.name = 'Intro to Blockchain';
SELECT s.f_name, s.l_name  FROM student s JOIN registration r ON s.student_id = r.student_id WHERE r.course_id = (SELECT course_id FROM course WHERE diff = (SELECT MAX(diff) FROM course))  AND r.grade = 'A'
SELECT p.first_name, p.last_name, p.g gradient_from FROM prof p JOIN RA r ON p.prof_id = r.prof_id JOIN student s ON r.student_id = s.student_id WHERE s.f_name = 'Olia' AND s.l_name = 'Rabier';
SELECT f_name, l_name  FROM student  JOIN registration ON student.student_id = registration.student_id  JOIN course ON course.course_id = registration.course_id  WHERE name = 'Advanced Database Systems' AND sat = (SELECT MAX(sat) FROM registration WHERE course_id = course.course_id);
SELECT      s.gpa  FROM      student AS s JOIN      registration AS r ON s.student_id = r.student_id WHERE      s.f_name = 'Laughton' AND s.l_name = 'Antonio';
SELECT c.name  FROM course c  JOIN registration r ON c.course_id = r.course_id  JOIN student s ON r.student_id = s.student_id  WHERE s.type = 'UG' AND s.gpa > 3.7;
SELECT      s.f_name,     s.l_name,     RA.capability FROM      student AS s JOIN      RA ON s.student_id = RA.student_id JOIN      prof AS p ON RA.prof_id = p.prof_id WHERE      p.graduate_from = 'University of Washington';
SELECT f_name, l_name, email, intelligence  FROM student JOIN RA ON student.student_id = RA.student_id WHERE RA.salary = 'high' AND RA.capability = (SELECT MAX(capability) FROM RA)
SELECT c.name, c.credit  FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id JOIN RA ra ON s.student_id = ra.student_id AND ra.prof_id = (SELECT p.prof_id FROM prof p WHERE p.gender = 'Female' ORDER BY p.teachingability DESC LIMIT 1)
SELECT COUNT(*)  FROM prof  WHERE gender = 'Female';
SELECT name  FROM course  WHERE diff = (SELECT MAX(diff) FROM course);
SELECT COUNT(*)  FROM student  WHERE gpa BETWEEN 3.1 AND 3.7  AND type = 'UG';
SELECT credit  FROM course  WHERE name = 'Computer Vision';
SELECT s.student_id  FROM student AS s  JOIN registration AS r ON s.student_id = r.student_id  WHERE s.gpa = 2.5 AND r.course_id IN (SELECT course_id FROM course WHERE name = 'C for Programmers')
SELECT T3.l_name FROM course AS T1 JOIN registration AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.name = 'Intro to Database 2' ORDER BY T2.sat DESC LIMIT 1;
SELECT COUNT(*)  FROM (SELECT * FROM RA WHERE salary = 'high') AS highSalaryRAs JOIN student ON RA.student_id = student.student_id WHERE student.gpa > 3;
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.type = 'UG' ORDER BY r.sat DESC LIMIT 1;
SELECT RA.capability  FROM student  JOIN RA ON student.student_id = RA.student_id  WHERE student.type = 'RPG' AND student.intelligence >= 4;
SELECT COUNT(*)  FROM student s  JOIN registration r ON s.student_id = r.student_id  WHERE r.grade = 'B' AND s.intelligence = 3;
SELECT c.diff  FROM course c  JOIN registration r ON c.course_id = r.course_id  WHERE r.student_id IN (     SELECT s.student_id      FROM student s      WHERE s.intelligence = 5 AND r.grade = 'A' );
SELECT COUNT(*)  FROM (SELECT r.student_id        FROM RA r        JOIN prof p ON r.prof_id = p.prof_id        WHERE p.popularity = (SELECT MAX(popularity) FROM prof)) s  JOIN student st ON s.student_id = st.student_id  WHERE st.type = 'Research Assistant' AND st.intelligence >= 5;
SELECT c.name  FROM course c  JOIN registration r ON c.course_id = r.course_id  WHERE r.grade = 'D';
SELECT RA.capability  FROM student  JOIN RA ON student.student_id = RA.student_id  WHERE student.f_name = 'Alvera' AND student.l_name = 'McQuillin';
SELECT COUNT(*)  FROM course  JOIN registration ON course.course_id = registration.course_id  JOIN student ON registration.student_id = student.student_id  WHERE course.credit = 3 AND student.gpa = 3.2;
SELECT COUNT(*)  FROM RA  WHERE salary = 'low' AND student_id IN (     SELECT student_id      FROM student      WHERE gpa = 3.5 )
SELECT s.email  FROM student s  JOIN registration r ON s.student_id = r.student_id  WHERE r.grade = 'B' AND c.diff > (SELECT AVG(diff) * 0.8 FROM course c);
SELECT      (COUNT(CASE WHEN R.salary = 'low' THEN 1 END) * 1.0 / COUNT(R.salary)) * 100 AS percentage FROM      RA R JOIN      prof P ON R.prof_id = P.prof_id WHERE      P.teachingability <= 3;
SELECT course.name, course.credit, course.diff  FROM course  WHERE course.credit = (SELECT MAX(credit) FROM course) AND course.diff = (SELECT MAX(diff) FROM course);
SELECT AVG(p.teachingability)  FROM prof p  WHERE p.popularity = (SELECT MAX(popularity) FROM prof);
SELECT      AVG(CEIL(r.sat)) AS avg_satisfaction FROM      registration r JOIN      student s ON r.student_id = s.student_id WHERE      r.grade = 'B' AND s.type = 'good_student';
SELECT f_name, l_name, phone_number  FROM student  WHERE intelligence < 4 AND gpa > 3;
SELECT f_name, l_name  FROM student  WHERE student_id IN (     SELECT student_id      FROM RA      WHERE capability > (SELECT AVG(capability) FROM RA) );
SELECT s.f_name, s.l_name, c.name  FROM student AS s  JOIN registration AS r ON s.student_id = r.student_id  JOIN course AS c ON r.course_id = c.course_id  WHERE s.intelligence = 5 AND r.grade < 3;
SELECT AVG(RA.capability)  FROM RA  JOIN student ON RA.student_id = student.student_id  WHERE student.gpa < 2.5;
SELECT p.first_name, p.last_name  FROM prof p  JOIN RA r ON p.prof_id = r.prof_id  JOIN student s ON r.student_id = s.student_id  WHERE s.intelligence = 1;
SELECT      (AVG(s.gpa) - AVG(s.gpa)) AS GPA_Difference  FROM      student s      JOIN registration r ON s.student_id = r.student_id      JOIN course c ON r.course_id = c.course_id  WHERE      c.diff = (SELECT MAX(diff) FROM course)  UNION  SELECT      (AVG(s.gpa) - AVG(s.gpa)) AS GPA_Difference  FROM      student s      JOIN registration r ON s.student_id = r.student_id      JOIN course c ON r.course_id = c.course_id  UNION  SELECT      (AVG(s.gpa) - AVG(s.gpa)) AS GPA_Difference  FROM      student s      JOIN registration r ON s.student_id = r.student_id      JOIN course c ON r.course_id = c.course_id  WHERE      c.diff = (SELECT MIN(diff) FROM course)
SELECT s.f_name, s.l_name, r.capability FROM student s JOIN registration r ON s.student_id = r.student_id WHERE r.grade IS NULL;
SELECT COUNT(*)  FROM (registration        JOIN student ON registration.student_id = student.student_id)        JOIN course ON registration.course_id = course.course_id  WHERE course.name = 'computer vision'  AND student.salary = 'High';
SELECT p.first_name, p.last_name, p.popularity  FROM prof p  JOIN RA r ON p.prof_id = r.prof_id  GROUP BY p.prof_id, p.first_name, p.last_name  ORDER BY COUNT(r.student_id) DESC  LIMIT 1;
SELECT c.name, s.f_name, s.l_name  FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE r.grade = 'A' GROUP BY c.course_id HAVING COUNT(r.student_id) = (     SELECT MAX(count_val)     FROM (         SELECT COUNT(*) as count_val         FROM registration r2         JOIN course c2 ON r2.course_id = c2.course_id         WHERE r2.grade = 'A'         GROUP BY c2.course_id     ) subquery )
SELECT      (AVG(ra.salary = 'high') - AVG(ra.salary = 'free')) as avg_satisfaction_diff  FROM      RA ra;
SELECT T2.graduate_from  FROM registration AS T1  JOIN course AS T3 ON T1.course_id = T3.course_id  JOIN prof AS T2 ON T2.prof_id = T1.prof_id  JOIN student AS T4 ON T4.student_id = T1.student_id  WHERE T4.type = 'UG'  GROUP BY T2.graduate_from  ORDER BY COUNT(T1.student_id) DESC  LIMIT 1;
SELECT p.first_name, p.last_name, p.email  FROM prof AS p  JOIN RA AS r ON p.prof_id = r.prof_id  WHERE p.teachingability > (SELECT AVG(teachingability) FROM prof)  GROUP BY p.prof_id, p.first_name, p.last_name  HAVING COUNT(r.student_id) >= 2;
SELECT      (COUNT(CASE WHEN r.grade = 'MAX(sat)' THEN s.student_id END) * 1.0 / COUNT(DISTINCT s.student_id)) * 100 AS percentage FROM      registration r JOIN      course c ON r.course_id = c.course_id JOIN      student s ON r.student_id = s.student_id WHERE      c.name = 'Intro to Database 2';
SELECT f_name, l_name  FROM student  WHERE gpa = (SELECT MAX(gpa) FROM student);
SELECT COUNT(*)  FROM RA r  JOIN prof p ON r.prof_id = p.prof_id  WHERE p.teachingability = (SELECT MAX(teachingability) FROM prof)  AND r.salary = 'high';
SELECT MIN.RA_salary, MAX.RA_salary  FROM RA JOIN student ON RA.student_id = student.student_id WHERE student.email = 'grosellg@hku.hk';
SELECT COUNT(*)  FROM student  JOIN registration ON student.student_id = registration.student_id  WHERE registration.sat = 4 AND name = 'Statistical Learning' AND student.gpa = 3.8;
SELECT COUNT(*)  FROM student  JOIN registration ON student.student_id = registration.student_id  JOIN course ON registration.course_id = course.course_id  WHERE course.diff = 3 AND student.intelligence = 2;
SELECT f_name, l_name  FROM student  JOIN registration ON student.student_id = registration.student_id  WHERE registration.grade = 'C' AND course.name = 'Applied Deep Learning';
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.type = 'RPG' AND r.sat = 1;
SELECT      (COUNT(CASE WHEN type = 'UG' THEN 1 END) - COUNT(CASE WHEN type = 'RPG' THEN 1 END)) as difference FROM      RA r JOIN      student s ON r.student_id = s.student_id WHERE      r.capability < 3;
SELECT      T1.p_id_dummy,     AVG(COUNT(T1.p_id)) AS avg_students_advised FROM      advisedBy AS T1 GROUP BY      T1.p_id_dummy;
SELECT COUNT(*)  FROM taughtBy  WHERE course_id = 18;
SELECT course.course_id  FROM course  WHERE course.courseLevel = 'Level_500';
SELECT COUNT(course.course_id)  FROM course  WHERE courseLevel = 'Level_300';
SELECT DISTINCT p.p_id  FROM person p JOIN taughtBy t ON p.p_id = t.p_id WHERE p.professor = 1 AND p.hasPosition = 0;
SELECT DISTINCT taughtBy.p_id  FROM taughtBy  JOIN course ON course.course_id = taughtBy.course_id  WHERE course.courseLevel = 'Level_400';
SELECT DISTINCT c.course_id FROM course c JOIN taughtBy t ON c.course_id = t.course_id JOIN advisedBy a ON t.p_id = a.p_id_dummy JOIN person p ON a.p_id = p.p_id WHERE p.student = 376;
SELECT T1.professor FROM person AS T1 JOIN advisedBy AS T2 ON T1.p_id = T2.p_id_dummy WHERE T1.yearsInProgram = 'Year_3';
SELECT course.course_id, courseLevel  FROM course  JOIN taughtBy ON course.course_id = taughtBy.course_id  WHERE taughtBy.p_id = 297;
SELECT T2.professor  FROM course AS T1  JOIN taughtBy AS T2 ON T1.course_id = T2.course_id  WHERE T1.course_id = 165;
SELECT s.p_id, s.yearsInProgram  FROM person AS s JOIN advisedBy AS ab ON s.p_id = ab.p_id WHERE ab.p_id_dummy = 5;
SELECT c.course_id, c.courseLevel  FROM course c  JOIN taughtBy tb ON c.course_id = tb.course_id  JOIN person p ON tb.p_id = p.p_id  WHERE p.hasPosition = 'Faculty_eme' AND p.professor = 1;
SELECT      advisedBy.p_id_dummy AS AdvisorID,     COUNT(DISTINCT course.courseLevel) AS NumberOfLevelsTaught FROM      advisedBy JOIN      person ON advisedBy.p_id = person.p_id AND person.student = 1 JOIN      taughtBy ON advisedBy.p_id_dummy = taughtBy.p_id JOIN      course ON taughtBy.course_id = course.course_id WHERE      advisedBy.p_id = 80 GROUP BY      advisedBy.p_id_dummy;
SELECT DISTINCT t2.p_id  FROM taughtBy t2  JOIN course t1 ON t2.course_id = t1.course_id  WHERE t1.courseLevel = 'Level_400'  INTERSECT  SELECT DISTINCT t2.p_id  FROM taughtBy t2  JOIN course t1 ON t2.course_id = t1.course_id  WHERE t1.courseLevel = 'Level_500';
SELECT DISTINCT p.professor FROM person p JOIN advisedBy ab ON p.p_id = ab.p_id_dummy WHERE p.yearsInProgram = 'Year_12';
SELECT course.course_id, courseLevel  FROM course  JOIN (     SELECT COUNT(p_id) AS prof_count, course_id      FROM taughtBy      GROUP BY course_id      HAVING COUNT(p_id) = (         SELECT MAX(prof_count)          FROM (             SELECT COUNT(p_id) AS prof_count, course_id              FROM taughtBy              GROUP BY course_id         )     ) ) AS subquery ON course.course_id = subquery.course_id;
SELECT COUNT(*)  FROM course  WHERE courseLevel = 'Level_300'
SELECT COUNT(*)  FROM taughtBy  WHERE course_id = 11;
SELECT      course_id,      COUNT(DISTINCT taughtBy.p_id) AS num_teachers FROM      course JOIN      taughtBy ON course.course_id = taughtBy.course_id WHERE      course.course_id IN (16, 18) GROUP BY      course.course_id ORDER BY      num_teachers DESC;
SELECT COUNT(*)  FROM person  WHERE professor = 1 AND hasPosition = 'Faculty_eme';
SELECT DISTINCT p_id  FROM advisedBy  GROUP BY p_id  HAVING COUNT(p_id_dummy) > 4;
SELECT COUNT(*)  FROM course  JOIN taughtBy ON course.course_id = taughtBy.course_id  JOIN person ON taughtBy.p_id = person.p_id  WHERE course.courseLevel = 'Level_300' AND person.professor = 1
SELECT DISTINCT p_id  FROM taughtBy  JOIN course ON taughtBy.course_id = course.course_id  WHERE course.courseLevel IN ('Level_300', 'Level_400')  AND p_id IN (     SELECT p_id      FROM person      WHERE hasPosition = 'Faculty_eme' );
SELECT COUNT(*)  FROM taughtBy  JOIN person ON taughtBy.p_id = person.p_id  WHERE taughtBy.course_id = 9 AND person.hasPosition != 0;
SELECT c.courseLevel  FROM course c  JOIN taughtBy tb ON c.course_id = tb.course_id  WHERE tb.p_id = 79;
SELECT T1.p_id  FROM person AS T1  JOIN advisedBy AS T2 ON T1.p_id = T2.p_id  WHERE T1.yearsInProgram = 'Year_5';
SELECT COUNT(*)  FROM (SELECT ab.p_id        FROM advisedBy ab        JOIN person p ON ab.p_id = p.p_id        JOIN course c ON c.course_id = taughtBy.course_id        WHERE c.courseLevel = 'Level_300') AS subquery  JOIN person p ON subquery.p_id = p.p_id AND p.professor = 1;
SELECT COUNT(*)  FROM course  JOIN taughtBy ON course.course_id = taughtBy.course_id  WHERE courseLevel = 'Level_300' AND taughtBy.p_id IS NOT NULL;
SELECT taughtBy.course_id  FROM advisedBy  JOIN person ON advisedBy.p_id_dummy = person.p_id  JOIN taughtBy ON taughtBy.p_id = person.p_id  WHERE person.student = 6 AND person.professor = 1;
SELECT course.courseLevel  FROM course  JOIN (     SELECT course_id      FROM taughtBy      GROUP BY course_id      HAVING COUNT(p_id) = (SELECT COUNT(p_id) FROM taughtBy GROUP BY course_id ORDER BY COUNT(p_id) DESC LIMIT 1) ) AS max_teachers ON course.course_id = max_teachers.course_id;
SELECT taughtBy.p_id  FROM taughtBy  JOIN person ON taughtBy.p_id = person.p_id  WHERE person.professor = 1  GROUP BY taughtBy.p_id  HAVING COUNT(course_id) > 3;
SELECT p_id, professor  FROM taughtBy  JOIN person ON taughtBy.p_id = person.p_id  WHERE professor = 1  GROUP BY p_id  ORDER BY COUNT(course_id) DESC  LIMIT 3;
SELECT COUNT(DISTINCT advisedBy.p_id_dummy) AS num_professors_advising FROM advisedBy JOIN person ON advisedBy.p_id = person.p_id WHERE person.inPhase = 'Year_3';
SELECT AVG(COUNT(taughtBy.course_id) / COUNT(DISTINCT taughtBy.p_id)) AS avg_courses_taught_by_professor FROM person JOIN taughtBy ON person.p_id = taughtBy.p_id WHERE person.professor = 1;
SELECT      (COUNT(CASE WHEN person.professor = 1 THEN person.p_id END) / NULLIF(COUNT(CASE WHEN person.student = 1 THEN person.p_id END), 0)) AS ratio FROM      person;
SELECT      (COUNT(CASE WHEN c.courseLevel = 'Level_400' THEN c.course_id END)      / COUNT(c.course_id)) * 100 AS high_level_percentage FROM      course c
SELECT taughtBy.p_id  FROM taughtBy  WHERE taughtBy.course_id = 18;
SELECT p.hasPosition, advisedBy.p_id_dummy  FROM person AS p  JOIN advisedBy ON p.p_id = advisedBy.p_id  WHERE advisedBy.p_id = 303;
SELECT p.p_id, c.courseLevel  FROM person p  JOIN taughtBy tb ON p.p_id = tb.p_id  JOIN course c ON tb.course_id = c.course_id  WHERE p.professor = 1 AND p.hasPosition = 'Faculty_aff';
SELECT p.inPhase, p.yearsInProgram  FROM person AS p JOIN advisedBy AS ab ON p.p_id = ab.p_id WHERE ab.p_id_dummy = (   SELECT MAX(COUNT(p_id))    FROM advisedBy )
SELECT      person.p_id as 'advised_student_id',     advisedBy.p_id_dummy as 'employing_professor_id' FROM      person JOIN      advisedBy ON person.p_id = advisedBy.p_id WHERE      person.hasPosition = 'Faculty_eme';
SELECT course.course_id, course.courseLevel  FROM course  JOIN taughtBy ON course.course_id = taughtBy.course_id  WHERE taughtBy.p_id BETWEEN 40 AND 50;
SELECT T2.p_id  FROM course  JOIN taughtBy AS T2  ON course.course_id = T2.course_id  WHERE course.course_id = 147;
SELECT person.p_id  FROM person  JOIN taughtBy ON person.p_id = taughtBy.p_id  WHERE taughtBy.course_id = 104 AND person.professor = 1 AND person.hasPosition != 0;
SELECT p.p_id, p.hasPosition  FROM person p  JOIN taughtBy tb ON p.p_id = tb.p_id  JOIN course c ON tb.course_id = c.course_id  WHERE c.courseLevel = 'Level_400' AND c.course_id < 10
SELECT DISTINCT taughtBy.p_id  FROM course, taughtBy  WHERE course.course_id BETWEEN 121 AND 130  AND course.courseLevel = 'Level_300'  AND taughtBy.course_id = course.course_id;
SELECT DISTINCT advisedBy.p_id_dummy  FROM advisedBy  JOIN person ON advisedBy.p_id = person.p_id  WHERE person.inPhase = 'Year_8' AND person.hasPosition = 1 AND person.professor = 1;
SELECT ct.course_id, ct.p_id  FROM course ct  JOIN taughtBy tb ON ct.course_id = tb.course_id  WHERE ct.courseLevel = 'Level_500'  LIMIT 5;
SELECT COUNT(*)  FROM advisedBy  WHERE p_id_dummy = 415;
SELECT COUNT(*)  FROM course  WHERE courseLevel = 'Level_500'
SELECT COUNT(*)  FROM person  WHERE hasPosition = 0 AND inPhase = 0;
SELECT professor  FROM taughtBy  JOIN person ON taughtBy.p_id = person.p_id  GROUP BY professor  ORDER BY COUNT(course_id) ASC  LIMIT 1;
SELECT COUNT(*)  FROM person  JOIN advisedBy ON person.p_id = advisedBy.p_id  WHERE advisedBy.p_id_dummy = 5 AND person.yearsInProgram = 'Year_5';
SELECT T.p_id AS professor  FROM taughtBy T  JOIN course C ON T.course_id = C.course_id  WHERE C.courseLevel = 'Level_500'  GROUP BY T.p_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(DISTINCT t1.p_id)  FROM person AS t1  JOIN taughtBy AS t2 ON t1.p_id = t2.p_id  JOIN course AS t3 ON t2.course_id = t3.course_id  WHERE t1.professor = 1 AND t1.hasPosition = 'Faculty_aff' AND t3.courseLevel IN ('Level_500', 'Level_600');
SELECT p.professor  FROM person p  JOIN taughtBy tb ON p.p_id = tb.p_id  JOIN course c ON tb.course_id = c.course_id  WHERE c.courseLevel = 'Level_500'  GROUP BY p.professor  ORDER BY COUNT(*) DESC  LIMIT 5;
SELECT COUNT(DISTINCT p_id)  FROM advisedBy  WHERE p_id_dummy IN (     SELECT p_id      FROM person      WHERE student = 1 AND yearsInProgram = 'Year_1' );
SELECT COUNT(DISTINCT t1.p_id) FROM taughtBy t1 JOIN course t2 ON t1.course_id = t2.course_id WHERE t2.courseLevel = 'Level_400' GROUP BY t1.p_id HAVING COUNT(t1.course_id) <= 2;
SELECT DISTINCT p_id  FROM person  JOIN taughtBy ON person.p_id = taughtBy.p_id  JOIN course ON taughtBy.course_id = course.course_id  WHERE person.hasPosition = 'Faculty_eme' AND course.courseLevel = 'Level_400';
SELECT `hasPosition`  FROM `person`  WHERE `professor` = 1  AND `p_id` IN (     SELECT `p_id`      FROM `taughtBy`      GROUP BY `p_id`      ORDER BY COUNT(`course_id`) DESC      LIMIT 1 );
SELECT inPhase FROM person WHERE p_id IN (     SELECT p_id      FROM advisedBy      GROUP BY p_id      HAVING COUNT(p_id_dummy) > 2 );
SELECT COUNT(DISTINCT t1.p_id)  FROM taughtBy AS t1  JOIN course AS t2 ON t1.course_id = t2.course_id  WHERE t2.courseLevel = 'Level_300'
SELECT      s.student,     MAX(COUNT(s.yearsInProgram)) AS max_advised_years FROM      (SELECT          a.p_id AS p_id,         p.yearsInProgram,         COUNT(a.p_id) AS count_p_id      FROM           advisedBy a      JOIN           person p ON a.p_id = p.p_id      WHERE           p.inPhase = 1      GROUP BY           a.p_id, p.yearsInProgram      HAVING           COUNT(a.p_id) > COUNT(DISTINCT a.p_id_dummy)     ) AS subquery JOIN      person s ON subquery.p_id = s.p_id GROUP BY      s.student;
SELECT COUNT(*)  FROM person  WHERE student = 1 AND inPhase = 'Pre-Quals' AND p_id IN (SELECT p_id FROM advisedBy);
SELECT      p_id,      AVG(CASE WHEN courseLevel = 'Level_500' THEN 1 ELSE 0 END) AS avg_professional_or_master_courses FROM      taughtBy GROUP BY      p_id;
SELECT COUNT(*)  FROM (   SELECT taughtBy.course_id    FROM taughtBy    GROUP BY taughtBy.course_id    HAVING COUNT(taughtBy.p_id) > 4 ) AS subquery;
SELECT course.course_id  FROM course  JOIN person ON course.course_id = person.p_id  WHERE course.courseLevel = 'Level_500';
SELECT SUM(     CASE          WHEN p_id IN (SELECT p_id FROM person WHERE yearsInProgram = 'Year_1') THEN 1         WHEN p_id IN (SELECT p_id FROM person WHERE yearsInProgram = 'Year_2') THEN 1         ELSE 0     END ) AS sum_year1_and_year2_students FROM person;
SELECT COUNT(DISTINCT t1.course_id)  FROM course AS t1  JOIN taughtBy AS t2 ON t1.course_id = t2.course_id  JOIN person AS t3 ON t3.p_id = t2.p_id  WHERE t3.hasPosition <> 0 AND t3.professor = 1;
SELECT T.p_id AS professor, T.hasPosition AS position  FROM (     SELECT taughtBy.p_id, COUNT(*) as course_count      FROM taughtBy      GROUP BY taughtBy.p_id      ORDER BY course_count DESC      LIMIT 1 ) AS T;
SELECT c.course_id  FROM course c  JOIN taughtBy tb ON c.course_id = tb.course_id  JOIN person p ON tb.p_id = p.p_id  WHERE p.hasPosition = 0;
SELECT T.p_id, T.professor, COUNT(T.course_id) AS num_courses, AVG(CASE WHEN T2.courseLevel = 'Undergraduate' THEN 1 ELSE 0 END) AS avg_undergrad_level, AVG(CASE WHEN T2.courseLevel = 'Graduate' THEN 1 ELSE 0 END) AS avg_grad_level FROM taughtBy AS T JOIN course AS T2 ON T.course_id = T2.course_id JOIN person AS T3 ON T.p_id = T3.p_id AND T3.hasPosition != 0 GROUP BY T.p_id, T.professor ORDER BY num_courses DESC LIMIT 1;
SELECT device_id FROM gender_age WHERE age = (SELECT MAX(age) FROM gender_age);
SELECT COUNT(event_id)  FROM events  WHERE longitude = 97 AND latitude = 40;
SELECT COUNT(*)  FROM gender_age  WHERE gender = 'M' AND group = 'M32-38';
SELECT COUNT(*)  FROM gender_age  WHERE gender = 'F' AND age > 50;
SELECT COUNT(event_id)  FROM app_events  WHERE event_id = 2 AND is_active = 1;
SELECT gender  FROM gender_age  WHERE age = (SELECT MIN(age) FROM gender_age);
SELECT category  FROM label_categories  WHERE label_id = (     SELECT label_id      FROM (         SELECT label_id, COUNT(app_id) AS user_count          FROM app_labels          GROUP BY label_id          ORDER BY user_count DESC          LIMIT 1     ) subquery );
SELECT p.device_model  FROM phone_brand_device_model2 p  JOIN gender_age g ON p.device_id = g.device_id  WHERE g.age = (SELECT MAX(age) FROM gender_age)  LIMIT 1;
SELECT COUNT(DISTINCT app_id)  FROM app_labels  JOIN app_all ON app_labels.app_id = app_all.app_id  JOIN label_categories ON app_labels.label_id = label_categories.label_id  WHERE label_categories.category = 'Home Decoration';
SELECT COUNT(*)  FROM gender_age  JOIN events ON gender_age.device_id = events.device_id  WHERE gender = 'M' AND is_active = 1 AND events.timestamp LIKE '2016-05-01%'
SELECT COUNT(*)  FROM gender_age  JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id  WHERE gender = 'F' AND phone_brand_device_model2.device_model = 'ZenFone 5';
SELECT MAX(ga.age)  FROM gender_age ga  JOIN events e ON ga.device_id = e.device_id  WHERE e.longitude = 121 AND e.latitude = 31 AND ga.is_active = 1 AND DATE(e.timestamp) = '2016-05-06';
SELECT      p.device_model  FROM      phone_brand_device_model2 p  JOIN      gender_age g ON p.device_id = g.device_id  WHERE      g.gender = 'F' AND g.group = 'F27-28'  GROUP BY      p.device_model  ORDER BY      COUNT(p.device_id) DESC  LIMIT 1;
SELECT T1.category  FROM label_categories AS T1  JOIN (     SELECT event_id, device_id, timestamp      FROM events      ORDER BY timestamp ASC      LIMIT 2 ) AS T2 ON T1.label_id = (     SELECT T3.label_id      FROM (         SELECT T4.label_id          FROM (             SELECT events.event_id, device_id, timestamp              FROM events              ORDER BY timestamp ASC              LIMIT 1         ) AS T4          JOIN label_categories ON T4.label_id = T4.category          GROUP BY T4.label_id          ORDER BY COUNT(*) DESC          LIMIT 1     ) AS T5      UNION      SELECT T4.label_id      FROM (         SELECT events.event_id, device_id, timestamp          FROM events          ORDER BY timestamp ASC          LIMIT 1 OFFSET 1     ) AS T4      JOIN label_categories ON T4.label_id = T4.category      GROUP BY T4.label_id      ORDER BY COUNT(*) DESC      LIMIT 1 ) ;
SELECT      gender  FROM      gender_age  JOIN      phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id  WHERE      phone_brand_device_model2.phone_brand = 'vivo'  GROUP BY      gender  ORDER BY      COUNT(gender) DESC  LIMIT 1;
SELECT category  FROM label_categories  WHERE label_id = (     SELECT label_id      FROM (         SELECT label_id, ROW_NUMBER() OVER (ORDER BY COUNT(DISTINCT app_id) DESC) as rn          FROM app_labels          GROUP BY label_id     ) t      WHERE rn = 1 );
SELECT COUNT(DISTINCT app_id)  FROM app_labels  JOIN app_all ON app_labels.app_id = app_all.app_id  JOIN label_categories ON app_labels.label_id = label_categories.label_id  WHERE label_categories.category = 'MOBA';
SELECT      (COUNT(CASE WHEN gender = 'F' THEN device_id END) * 100.0 / COUNT(device_id)) AS female_percentage,     (COUNT(CASE WHEN gender = 'M' THEN device_id END) * 100.0 / COUNT(device_id)) AS male_percentage FROM      phone_brand_device_model2 WHERE      phone_brand = 'OPPO';
SELECT longitude, latitude  FROM events  WHERE timestamp LIKE '2016-05-08%'
SELECT app_id, is_installed  FROM app_events  WHERE event_id = 844;
SELECT COUNT(event_id)  FROM events  WHERE timestamp LIKE '2016-04-30%';
SELECT COUNT(*)  FROM phone_brand_device_model2  WHERE phone_brand = 'vivo' AND device_model = 'Xplay3S';
SELECT      (COUNT(CASE WHEN gender = 'M' AND `group` = 'F27-28' THEN 1 END) /       COUNT(CASE WHEN gender = 'F' AND `group` = 'F27-28' THEN 1 END)) as ratio FROM gender_age
SELECT label_id FROM label_categories WHERE category = 'online shopping' OR category = 'online malls';
SELECT      p.phone_brand  FROM      phone_brand_device_model2 p  JOIN      events e ON p.device_id = e.device_id  WHERE      DATE(e.timestamp) = '2016-05-05'      AND e.longitude = 112      AND e.latitude = 44;
SELECT app_all.app_id, events.timestamp  FROM app_all  JOIN app_events ON app_all.app_id = app_events.app_id  JOIN events ON app_events.event_id = events.event_id  WHERE app_events.event_id = 82;
SELECT      g.gender,     g.age, FROM      gender_age AS g JOIN      events AS e ON g.device_id = e.device_id WHERE      e.event_id = 15251;
SELECT COUNT(events.event_id)  FROM events  JOIN gender_age ON events.device_id = gender_age.device_id  WHERE gender_age.age = 88 AND gender_age.gender = 'M' AND events.timestamp LIKE '2016-05-04%'
SELECT      g.group,     g.gender,     COUNT(DISTINCT e.device_id) AS event_participants FROM      gender_age g JOIN      events e ON g.device_id = e.device_id WHERE      e.longitude = -102 AND e.latitude = 38 GROUP BY      g.group, g.gender;
SELECT      phone_brand_device_model2.phone_brand,      phone_brand_device_model2.device_model  FROM      phone_brand_device_model2  JOIN      events  ON      phone_brand_device_model2.device_id = events.device_id  WHERE      events.longitude = 80 AND events.latitude = 44;
SELECT DISTINCT category  FROM events  WHERE event_id = 155;
SELECT device_id  FROM phone_brand_device_model2  WHERE phone_brand = 'HTC' AND device_model = 'Butterfly' AND gender = 'F'  LIMIT 5;
SELECT COUNT(DISTINCT app_id)  FROM app_labels  JOIN label_categories ON app_labels.label_id = label_categories.label_id  WHERE label_categories.category = 'science fiction';
SELECT gender, age  FROM phone_brand_device_model2  WHERE phone_brand = 'LG' AND device_model = 'L70';
SELECT      (COUNT(CASE WHEN app_labels.label_id IN (SELECT label_id FROM label_categories WHERE category = 'Industry tag') THEN app_all.app_id END) * 100 / COUNT(app_all.app_id)) AS percentage FROM      app_all;
SELECT      (COUNT(CASE WHEN T1.device_model = 'Nexus 5' THEN T1.device_id ELSE NULL END) * 100 / COUNT(T1.device_id)) AS percentage,     (COUNT(CASE WHEN T1.device_model = 'Nexus 5' AND T1.gender = 'M' THEN T1.device_id ELSE NULL END) / COUNT(CASE WHEN T1.device_model = 'Nexus 5' AND T1.gender = 'F' THEN T1.device_id ELSE NULL END)) AS ratio FROM      phone_brand_device_model2 AS T1 WHERE      T1.phone_brand = 'LG';
SELECT COUNT(*)  FROM app_events  WHERE event_id = 2 AND is_active = 0;
SELECT COUNT(event_id)  FROM events  WHERE DATE_FORMAT(timestamp, '%Y') = 2016;
SELECT COUNT(event_id)  FROM events  WHERE device_id = 29182687948017100 AND timestamp LIKE '2016%';
SELECT COUNT(*)  FROM gender_age  WHERE gender = 'M';
SELECT MAX(age)  FROM gender_age;
SELECT COUNT(*)  FROM gender_age  WHERE gender = 'F' AND age < 30;
SELECT COUNT(*)  FROM phone_brand_device_model2  JOIN gender_age ON phone_brand_device_model2.device_id = gender_age.device_id  WHERE phone_brand_device_model2.device_model = 'Galaxy Note 2' AND gender_age.gender = 'F';
SELECT ga.age FROM gender_age ga JOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id WHERE pbdm.device_model = 'Galaxy Note 2';
SELECT pbdm.device_model  FROM phone_brand_device_model2 pbdm  JOIN gender_age ga ON pbdm.device_id = ga.device_id  WHERE ga.age = (SELECT MAX(age) FROM gender_age)
SELECT      g.group FROM      gender_age g JOIN      phone_brand_device_model2 p ON g.device_id = p.device_id WHERE      p.phone_brand = 'vivo' GROUP BY      g.group ORDER BY      COUNT(g.device_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT app_id)  FROM app_labels  JOIN label_categories ON app_labels.label_id = label_categories.label_id  WHERE label_categories.category = 'Securities';
SELECT label_categories.category  FROM app_all  JOIN app_labels ON app_all.app_id = app_labels.app_id  JOIN label_categories ON app_labels.label_id = label_categories.label_id  WHERE app_all.app_id = 1977658975649780000;
SELECT DISTINCT l.category  FROM label_categories l  JOIN app_events ae ON l.label_id = ae.label_id  WHERE ae.event_id = 2 AND ae.is_active = 0;
SELECT T1.longitude, T1.latitude  FROM events AS T1  JOIN app_events AS T2 ON T1.event_id = T2.event_id  WHERE T2.is_active = 0 AND T2.is_installed = 1 AND T1.event_id = 2;
SELECT MIN(events.timestamp)  FROM `events`  JOIN `app_events` ON `events.event_id` = `app_events.event_id`  WHERE `app_events.is_active` = 0 AND `app_events.event_id` = 2;
SELECT e.event_id  FROM events e  JOIN phone_brand_device_model2 pbdm ON e.device_id = pbdm.device_id  WHERE pbdm.phone_brand = 'vivo';
SELECT COUNT(*)  FROM app_events  JOIN phone_brand_device_model2 ON app_events.event_id = events.event_id  JOIN events ON app_events.device_id = events.device_id  WHERE app_events.event_id = 2  AND phone_brand_device_model2.phone_brand = 'vivo';
SELECT timestamp  FROM events  JOIN phone_brand_device_model2 ON events.device_id = phone_brand_device_model2.device_id  WHERE event_id = '2' AND phone_brand = 'vivo';
SELECT COUNT(event_id) FROM events JOIN phone_brand_device_model2 ON events.device_id = phone_brand_device_model2.device_id WHERE phone_brand = 'vivo' AND year(events.timestamp) = 2016;
SELECT COUNT(*)  FROM gender_age  JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id  WHERE phone_brand_device_model2.phone_brand = 'vivo'  AND gender_age.gender = 'F'  AND gender_age.age < 30;
SELECT category  FROM label_categories  WHERE label_id = (     SELECT label_id      FROM (         SELECT label_id, COUNT(app_id) AS user_count          FROM app_labels          GROUP BY label_id          ORDER BY user_count DESC          LIMIT 1     ) subquery );
SELECT      p.phone_brand  FROM      gender_age g JOIN      phone_brand_device_model2 p ON g.device_id = p.device_id WHERE      g.gender = 'F'  AND      g.age = (SELECT MIN(age) FROM gender_age WHERE gender = 'F')
SELECT COUNT(*)  FROM phone_brand_device_model2  JOIN gender_age ON phone_brand_device_model2.device_id = gender_age.device_id  WHERE gender_age.group = 'M23-26' AND phone_brand_device_model2.phone_brand = 'vivo';
SELECT      (COUNT(CASE WHEN tb1.group = 'M23-26' THEN 1 ELSE NULL END)       OVER () * 100.0 / COUNT(*) OVER ()) AS percentage FROM      phone_brand_device_model2 AS tb1 WHERE      tb1.phone_brand = 'vivo';
SELECT      (SUM(CASE WHEN phone_brand = 'vivo' THEN 1 ELSE 0 END) OVER () * 100 / COUNT(device_id) OVER ()) FROM      events_relevant e JOIN      phone_brand_device_model2 p ON e.device_id = p.device_id WHERE      e.event_id = '2';
SELECT AVG(age)  FROM gender_age  JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id  WHERE phone_brand_device_model2.phone_brand = 'vivo';
SELECT COUNT(*)  FROM gender_age  WHERE gender = 'F' AND `group` = 'F27-28';
SELECT MAX(age)  FROM gender_age  WHERE gender = 'M';
SELECT COUNT(*)  FROM app_events  WHERE is_installed = 1 AND is_active = 0;
SELECT MIN(age)  FROM gender_age  WHERE gender = 'F';
SELECT COUNT(*)  FROM phone_brand_device_model2  WHERE phone_brand = 'VIVO';
SELECT device_model FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO' LIMIT 15;
SELECT      DISTINCT pbdm.device_model  FROM      phone_brand_device_model2 pbdm JOIN      gender_age ga ON pbdm.device_id = ga.device_id WHERE      ga.gender = 'M' AND ga.age = 'M39+';
SELECT DISTINCT pbdm.device_model  FROM phone_brand_device_model2 AS pbdm JOIN app_events AS ae ON ae.app_id = (     SELECT al.app_id FROM app_labels AS al WHERE al.label_id = (         SELECT lc.category_id FROM label_categories AS lc WHERE lc.category = 'install'     ) )  WHERE ae.is_installed = 1 AND ae.is_active = 1;
SELECT COUNT(DISTINCT app_id)  FROM app_labels  JOIN app_all ON app_labels.app_id = app_all.app_id  JOIN label_categories ON app_labels.label_id = label_categories.label_id  WHERE label_categories.category = 'Financial Information';
SELECT COUNT(DISTINCT app_id)  FROM app_labels  JOIN app_all ON app_labels.app_id = app_all.app_id  JOIN label_categories ON app_labels.label_id = label_categories.label_id  WHERE label_categories.category = 'game-Art Style';
SELECT COUNT(*)  FROM gender_age  JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id  WHERE gender = 'Male' AND phone_brand = 'OPPO';
SELECT p.phone_brand  FROM gender_age g  JOIN phone_brand_device_model2 p ON g.device_id = p.device_id  WHERE g.age = (SELECT MIN(age) FROM gender_age)
SELECT category  FROM label_categories  WHERE (SELECT COUNT(label_id) FROM label_categories lc WHERE lc.category = label_categories.category)      IN (SELECT COUNT(label_id) FROM label_categories ORDER BY COUNT(label_id) ASC LIMIT 3);
SELECT COUNT(*)  FROM phone_brand_device_model2  WHERE gender = 'M' AND device_model = 'Galaxy Ace Plus';
SELECT T1.age  FROM gender_age AS T1  JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id  WHERE T2.phone_brand = 'OPPO'  GROUP BY T1.group  ORDER BY COUNT(T1.device_id) DESC  LIMIT 1;
SELECT      device_model FROM      phone_brand_device_model2 JOIN      gender_age  ON      phone_brand_device_model2.device_id = gender_age.device_id WHERE      gender = 'F' GROUP BY      device_model ORDER BY      COUNT(device_model) DESC LIMIT 5;
SELECT      (SUM(CASE WHEN category = '80s Japanese comic' THEN 1 ELSE 0 END) * 100.0 / COUNT(app_id)) AS '80s_Japanese_Comic_Ratio',     (SUM(CASE WHEN category = '90s Japanese comic' THEN 1 ELSE 0 END) * 100.0 / COUNT(app_id)) AS '90s_Japanese_Comic_Ratio' FROM      app_labels JOIN      label_categories ON app_labels.label_id = label_categories.label_id WHERE      label_categories.category IN ('80s Japanese comic', '90s Japanese comic');
SELECT      (COUNT(CASE          WHEN t1.gender = 'F' AND t2.device_model = 'R815T' AND t1.phone_brand = 'OPPO'          THEN 1      END) * 1.0 / COUNT(CASE          WHEN t2.device_model = 'R815T' AND t1.phone_brand = 'OPPO'          THEN 1      END)) * 100 AS percentage  FROM      gender_age t1  JOIN      phone_brand_device_model2 t2 ON t1.device_id = t2.device_id;
SELECT T1.phone_brand FROM `phone_brand_device_model2` AS T1 WHERE T1.device_model = '坚果手机'
SELECT COUNT(DISTINCT device_model)  FROM phone_brand_device_model2  WHERE phone_brand = '中兴';
SELECT `group`  FROM gender_age  WHERE `age` = 24;
SELECT timestamp  FROM events  WHERE event_id = '887711';
SELECT COUNT(event_id)  FROM events  WHERE DATE(timestamp) = '2016-05-06'
SELECT pbdm.device_model  FROM events e  JOIN gender_age ga ON e.device_id = ga.device_id  JOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id  WHERE e.timestamp = '2016/5/7 23:55:16'  AND e.longitude = '113'  AND e.latitude = '28';
SELECT COUNT(DISTINCT app_id)  FROM app_labels  WHERE label_id IN (     SELECT label_id FROM label_categories WHERE category = 'game-Fishing' );
SELECT COUNT(*)  FROM phone_brand_device_model2 pbdm JOIN gender_age gage ON pbdm.device_id = gage.device_id WHERE pbdm.device_model = '魅蓝Note 2' AND gage.gender = 'F' AND gage.age BETWEEN 29 AND 32;
SELECT COUNT(*)  FROM gender_age  JOIN events ON gender_age.device_id = events.device_id  WHERE gender_age.age = '30' AND events.is_active = 1 AND events.timestamp LIKE '2016-05-02 %';
SELECT COUNT(*)  FROM app_events  JOIN events ON app_events.event_id = events.event_id  WHERE events.timestamp = '2016/5/6 23:33:34' AND app_events.is_installed = 1;
SELECT COUNT(*)  FROM gender_age  JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id  WHERE gender = 'F' AND phone_brand_device_model2.phone_brand = 'E派'
SELECT COUNT(*)  FROM phone_brand_device_model2 pbdm JOIN gender_age gage ON pbdm.device_id = gage.device_id WHERE pbdm.phone_brand = 'Samsung' AND pbdm.device_model = 'Galaxy S5' AND gage.gender = 'M';
SELECT COUNT(*)  FROM gender_age  JOIN events ON gender_age.device_id = events.device_id  WHERE gender_age.group = 'F29-32'  AND events.is_active = '1'  AND events.timestamp LIKE '2016-05-07 %'
SELECT label_category.category  FROM app_all  JOIN app_labels ON app_all.app_id = app_labels.app_id  WHERE app_all.app_id = '894384172610331000';
SELECT COUNT(*)  FROM events  WHERE timestamp = '2016/5/6 14:09:49'  AND longitude = '116'  AND latitude = '40'  AND is_active = '1';
SELECT      DIVIDE(         (SELECT COUNT(*) FROM events e WHERE e.timestamp = '2016/5/2 7:50:28' AND e.is_active = 1),         (SELECT COUNT(*) FROM events e WHERE e.timestamp = '2016/5/2 7:41:03' AND e.is_active = 1)     ) AS ActiveAppsRatio;
SELECT COUNT(*)  FROM phone_brand_device_model2  WHERE phone_brand = 'vivo';
SELECT      (SUM(CASE WHEN phone_brand = 'vivo' THEN 1 ELSE 0 END) - SUM(CASE WHEN phone_brand = 'LG' THEN 1 ELSE 0 END)) AS vivo_more_than_LG FROM      phone_brand_device_model2;
SELECT device_id FROM gender_age WHERE age = (SELECT MIN(age) FROM gender_age);
SELECT COUNT(*)  FROM gender_age  WHERE gender = 'F' AND age > 30;
SELECT      gender  FROM      gender_age  WHERE      age = (SELECT MAX(age) FROM gender_age);
SELECT MIN(age)  FROM gender_age  WHERE gender = 'F';
SELECT MIN(age)  FROM gender_age  JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id  WHERE phone_brand = 'vivo';
SELECT DISTINCT A.app_id  FROM app_all A  JOIN app_labels L ON A.app_id = L.app_id  JOIN label_categories C ON L.label_id = C.label_id  WHERE C.category = 'Securities';
SELECT gender  FROM events  WHERE timestamp = '2016-05-01 00:55:25';
SELECT COUNT(*)  FROM events  WHERE year(events.timestamp) = 2016  AND device_id IN (     SELECT device_id      FROM gender_age      WHERE `group` = 'M23-26' )
SELECT      p.phone_brand  FROM      gender_age g JOIN      phone_brand_device_model2 p ON g.device_id = p.device_id WHERE      g.group = 'M23-26' GROUP BY      p.phone_brand ORDER BY      COUNT(g.device_id) DESC LIMIT 1;
SELECT e.longitude, e.latitude  FROM events AS e  JOIN phone_brand_device_model2 AS p  ON e.device_id = p.device_id  WHERE p.phone_brand = 'Samsung' AND p.device_model = 'Galaxy Note 2';
SELECT      phone_brand_device_model2.device_model  FROM      phone_brand_device_model2  JOIN      gender_age  ON      phone_brand_device_model2.device_id = gender_age.device_id  WHERE      gender_age.gender = 'F';
SELECT T1.category  FROM label_categories AS T1  JOIN app_labels AS T2 ON T1.label_id = T2.label_id  WHERE T2.app_id = 7324884708820020000;
SELECT COUNT(*)  FROM app_events  WHERE app_events.event_id = 2  AND app_events.is_active = 0  JOIN app_labels ON app_events.app_id = app_labels.app_id  JOIN label_categories ON app_labels.label_id = label_categories.label_id  WHERE label_categories.category = 'Property Industry 1.0';
SELECT COUNT(DISTINCT label_id)  FROM app_events  WHERE app_events.event_id = 2 AND app_events.is_active = 0;
SELECT pbdm.device_model  FROM phone_brand_device_model2 pbdm  JOIN gender_age ga ON pbdm.device_id = ga.device_id  WHERE ga.gender = 'F' AND ga.age > 30  GROUP BY pbdm.device_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT      phone_brand_device_model2.device_model  FROM      phone_brand_device_model2  JOIN      events  ON      phone_brand_device_model2.device_id = events.device_id  WHERE      events.longitude = 121 AND events.latitude = 31;
SELECT      label_id,      category  FROM      label_categories  GROUP BY      label_id,      category  ORDER BY      SUM(COUNT(app_id)) DESC  LIMIT 3;
SELECT e.event_id  FROM events e  JOIN gender_age ga ON e.device_id = ga.device_id  WHERE ga.age = (SELECT MAX(age) FROM gender_age)
SELECT COUNT(event_id)  FROM events  JOIN gender_age ON events.device_id = gender_age.device_id  WHERE gender = 'F'  AND age = (SELECT MIN(age) FROM gender_age WHERE gender = 'F');
SELECT COUNT(DISTINCT g.device_id)  FROM gender_age AS g  JOIN events AS e ON g.device_id = e.device_id  WHERE e.timestamp = '2016-05-01' AND g.gender = 'M';
SELECT      CASE          WHEN SUM(CASE WHEN category = 'Securities' THEN 1 ELSE 0 END) > SUM(CASE WHEN category = 'Finance' THEN 1 ELSE 0 END) THEN 'Securities'         ELSE 'Finance'     END AS 'more_app_users_category' FROM      label_categories;
SELECT      pbdm.device_model  FROM      gender_age ga  JOIN      phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id  WHERE      ga.group = 'M23-26';
SELECT AVG(age)  FROM gender_age  JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id  WHERE gender = 'F' AND phone_brand = 'vivo';
SELECT      (SUM(CASE WHEN gender = 'F' AND phone_brand = 'vivo' THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN gender = 'M' AND phone_brand = 'vivo' THEN 1 ELSE 0 END), 0)) as female_to_male_ratio FROM      phone_brand_device_model2;
SELECT      (SUM(CASE WHEN label_categories.category = 'Securities' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN label_categories.category = 'Finance' THEN 1 ELSE 0 END)) as ratio FROM      label_categories;
SELECT label_id FROM label_categories WHERE category = 'Third-party card management';
SELECT      (SUM(CASE WHEN `is_active` = 1 THEN 1 ELSE 0 END) / SUM(CASE WHEN `is_active` = 0 THEN 1 ELSE 0 END)) as ratio FROM      `app_events` WHERE      `event_id` = 58;
SELECT COUNT(event_id)  FROM events  WHERE device_id = '3915082290673130000'
SELECT      (SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) * 100.0 / COUNT(device_id)) as percentage FROM      gender_age;
SELECT COUNT(*)  FROM events  WHERE longitude = -156;
SELECT COUNT(*)  FROM app_all  JOIN app_labels ON app_all.app_id = app_labels.app_id  WHERE app_labels.label_id = 48;
SELECT COUNT(*)  FROM label_categories  WHERE category LIKE 'game%';
SELECT COUNT(event_id) FROM events WHERE longitude = 80 AND latitude = 37;
SELECT label_id, category  FROM app_labels  WHERE app_id = '5758400314709850000';
SELECT app_id  FROM app_labels  JOIN label_categories ON app_labels.label_id = label_categories.label_id  WHERE label_categories.category = 'game-rowing';
SELECT label_id, app_id  FROM label_categories  WHERE category = 'Chinese Classical Mythology';
SELECT COUNT(DISTINCT app_id) AS num_app_ids, COUNT(*) AS total_locations FROM (     SELECT event_id, longitude, latitude     FROM events     WHERE event_id = 79641     UNION ALL     SELECT event_id, longitude, latitude     FROM events_relevant     WHERE event_id = 79641 ) subquery;
SELECT events.longitude, events.latitude, events.timestamp  FROM events  JOIN app_events ON events.event_id = app_events.event_id  WHERE app_events.app_id = '8715964299802120000';
SELECT COUNT(*)  FROM app_all  JOIN phone_brand_device_model2 ON app_all.app_id = phone_brand_device_model2.device_id  JOIN events ON app_all.app_id = events.event_id  WHERE phone_brand_device_model2.phone_brand = 'OPPO'  AND events.timestamp BETWEEN '2016-05-01 00:00:00' AND '2016-05-01 00:59:59';
SELECT      (SUM(CASE WHEN gender = 'M' AND phone_brand = 'vivo' AND device_model = 'X5Pro' THEN 1 ELSE 0 END)) /      (SUM(CASE WHEN gender = 'F' AND phone_brand = 'vivo' AND device_model = 'X5Pro' THEN 1 ELSE 0 END)) AS ratio FROM      phone_brand_device_model2;
SELECT COUNT(*)  FROM gender_age  JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id  JOIN sample_submission ON gender_age.device_id = sample_submission.device_id  WHERE gender = 'F'  AND phone_brand = 'ZUK'  AND device_model = 'Z1'  AND `group` = 'F23-'
SELECT      p.phone_brand,     p.device_model FROM      phone_brand_device_model2 p JOIN      gender_age g ON p.device_id = g.device_id WHERE      g.age < 10;
SELECT      (SUM(CASE WHEN gender = 'F' AND age > 80 THEN 1 ELSE 0 END)      OVER () * 100.0 / COUNT(device_id) OVER ()) as percentage FROM      phone_brand_device_model2 JOIN      gender_age  ON      phone_brand_device_model2.device_id = gender_age.device_id WHERE      phone_brand_device_model2.phone_brand = 'HTC'
SELECT phone_brand, device_model  FROM phone_brand_device_model2  WHERE device_id = (SELECT device_id FROM events WHERE event_id = '6701')
SELECT      gender, age  FROM      gender_age  WHERE      device_id BETWEEN -9215352913819630000 AND -9222956879900150000  ORDER BY      COUNT(event_id) DESC  LIMIT 1;
SELECT timestamp  FROM events  WHERE event_id = 12;
SELECT COUNT(event_id)  FROM app_events  WHERE is_active = 1;
SELECT COUNT(*)  FROM phone_brand_device_model2  WHERE `device_model` = 'A51'
SELECT gender  FROM gender_age  WHERE device_id = '-9222956879900150000';
SELECT COUNT(*)  FROM label_categories  WHERE category = 'game-card';
SELECT gender_age.group  FROM phone_brand_device_model2  JOIN gender_age ON phone_brand_device_model2.device_id = gender_age.device_id  WHERE phone_brand_device_model2.phone_brand = 'vivo';
SELECT COUNT(*)  FROM gender_age  JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id  WHERE gender_age.age < 30 AND phone_brand_device_model2.device_model = 'Galaxy Note 2';
SELECT      (SUM(CASE WHEN age < 50 THEN 1 ELSE 0 END) / COUNT(device_id)) * 1.0 AS percentage FROM      phone_brand_device_model2  JOIN      gender_age  ON      phone_brand_device_model2.device_id = gender_age.device_id  WHERE      phone_brand_device_model2.phone_brand = 'OPPO'  AND      gender_age.age < 50;
SELECT AVG(age)  FROM gender_age  JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id  WHERE phone_brand_device_model2.device_model LIKE 'R7'
SELECT label_categories.category  FROM app_all  JOIN app_labels ON app_all.app_id = app_labels.app_id  JOIN label_categories ON app_labels.label_id = label_categories.label_id  WHERE app_all.app_id = '5902120154267990000';
SELECT      g.group FROM      gender_age AS g JOIN      phone_brand_device_model2 AS p ON g.device_id = p.device_id WHERE      p.phone_brand = 'LG';
SELECT label.category  FROM app_labels  JOIN label_categories ON app_labels.label_id = label_categories.label_id  WHERE app_labels.app_id = 4955831798976240000;
SELECT COUNT(*)  FROM gender_age  JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id  WHERE gender = 'F' AND phone_brand_device_model2.device_model = 'MI 3';
SELECT COUNT(*)  FROM phone_brand_device_model2 pbdm JOIN gender_age g_a ON pbdm.device_id = g_a.device_id WHERE g_a.gender = 'M' AND pbdm.device_model = 'Desire 820';
SELECT COUNT(*)  FROM gender_age  WHERE gender = 'F' OR gender = 'M'  AND age > 20  AND device_model LIKE '%ELIFE E7 Mini%';
SELECT COUNT(*)  FROM gender_age  WHERE age BETWEEN 20 AND 50  AND device_model = 'Galaxy Premier';
SELECT COUNT(*)  FROM gender_age  JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id  WHERE gender = 'M' AND phone_brand = 'HTC';
SELECT COUNT(*)  FROM gender_age  JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id  WHERE gender_age.age BETWEEN 20 AND 60  AND phone_brand_device_model2.phone_brand = 'TCL';
SELECT      (SUM(CASE WHEN age > 20 THEN 1 ELSE 0 END) / COUNT(device_id)) * 1.0 AS percentage FROM      phone_brand_device_model2  JOIN      gender_age  ON      phone_brand_device_model2.device_id = gender_age.device_id  WHERE      phone_brand_device_model2.phone_brand = 'SUGAR'
SELECT      event_id,      device_id,      longitude,      latitude  FROM      events  WHERE      timestamp BETWEEN '2016-04-30 00:00:00' AND '2016-04-30 23:59:59';
SELECT COUNT(DISTINCT phone_brand_device_model2.device_model) FROM phone_brand_device_model2 WHERE phone_brand_device_model2.phone_brand = 'HTC';
SELECT app_id FROM app_events WHERE is_installed = 1 AND is_active = 1;
SELECT COUNT(*)  FROM app_all  JOIN app_labels ON app_all.app_id = app_labels.app_id  WHERE app_labels.label_id = 7;
SELECT device_id  FROM gender_age  WHERE gender = 'F' AND age BETWEEN 29 AND 31;
SELECT app_id  FROM app_labels  JOIN label_categories ON app_labels.label_id = label_categories.label_id  WHERE category = 'game-stress reliever';
SELECT      DATE(timestamp) as event_date FROM      talkingdata.gender_age JOIN      talkingdata.events ON talkingdata.gender_age.device_id = talkingdata.events.device_id WHERE      talkingdata.gender_age.age = 40 AND talkingdata.gender_age.gender = 'M' GROUP BY      DATE(timestamp) ORDER BY      COUNT(talkingdata.events.event_id) DESC LIMIT 1;
SELECT      p.phone_brand  FROM      phone_brand_device_model2 p  JOIN      app_all a ON p.device_id = a.app_id  JOIN      app_events ae ON a.app_id = ae.app_id AND ae.is_installed = 1  GROUP BY      p.phone_brand  ORDER BY      COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM app_all  JOIN gender_age ON app_all.app_id = gender_age.device_id  WHERE gender_age.gender = 'M' AND gender_age.age < 23 AND app_all.is_installed = 1 AND app_all.is_active = 0;
SELECT COUNT(*)  FROM app_all  JOIN app_labels ON app_all.app_id = app_labels.app_id  JOIN label_categories ON app_labels.label_id = label_categories.label_id  WHERE app_all.gender = 'F' AND label_categories.category = 'game-Finding fault' AND app_all.is_installed = 1;
SELECT      gender  FROM      events  WHERE      timestamp BETWEEN '2016-05-01 00:00:00' AND '2016-05-10 23:59:59' GROUP BY      gender  ORDER BY      COUNT(*) DESC  LIMIT 1;
SELECT T1.group  FROM gender_age AS T1  JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id  WHERE T2.device_model = 'SM-T2558'  GROUP BY T1.group  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM gender_age  WHERE gender = 'M'  AND age > 50  AND phone_brand != 'HTC'  AND device_model != 'One M8 Eye'
SELECT e.device_id, e.timestamp, e.longitude, e.latitude FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE ga.gender = 'F' AND ga.age < 30;
SELECT      (SUM(CASE WHEN gender = 'F' AND app_all.is_installed = 0 THEN 1 ELSE 0 END) * 1.0 /       SUM(CASE WHEN gender = 'M' AND app_all.is_installed = 0 THEN 1 ELSE 0 END)) * 100 AS percentage_not_installed_women FROM      app_all JOIN      gender_age ON app_all.app_id = gender_age.device_id;
SELECT AVG(ga.age)  FROM gender_age ga  JOIN app_events ae ON ga.device_id = ae.device_id  WHERE ae.is_installed = 1 AND ae.is_active = 0;
SELECT event_id, device_id, timestamp, longitude, latitude  FROM events  WHERE timestamp LIKE '2016-05-01%' AND latitude = 31;
SELECT event_id FROM events WHERE longitude = 0 AND latitude = 0 LIMIT 3;
SELECT      difference  FROM      (SELECT          COUNT(*) AS sum_located,          COUNT(*) - SUM(*) FILTER (WHERE latitude = 0 AND longitude = 0) AS sum_not_located       FROM           events       WHERE           device_id = -922956879900150000) AS counted_events;
SELECT device_id  FROM gender_age  WHERE gender = 'F'  LIMIT 3;
SELECT label_id FROM label_categories WHERE category LIKE '%game%' LIMIT 5;
SELECT device_model  FROM phone_brand_device_model2  WHERE phone_brand = 'OPPO'  LIMIT 3;
SELECT      (SUM(CASE WHEN app_events.is_installed = 1 AND app_events.is_active = 0 THEN 1 ELSE 0 END) / COUNT(app_events.app_id)) * 1.0 AS percentage FROM      app_events WHERE      app_events.event_id = 6;
SELECT      IF(SUM(T1.gender = 'M') > SUM(T1.gender = 'F'), 'M', 'F') AS gender_owns_more FROM      gender_age T1  JOIN      phone_brand_device_model2 T2 ON T1.device_id = T2.device_id  WHERE      T2.phone_brand_device_model LIKE '%Galaxy Note 2%'  GROUP BY      T1.gender;
SELECT e.timestamp, COUNT(DISTINCT e.device_id) FROM events AS e WHERE e.event_id = 2 AND e.is_active = 1;
SELECT category FROM label_categories WHERE label_id IN (     SELECT label_id FROM app_labels WHERE app_id = 5902120154267990000 );
SELECT COUNT(*)  FROM label_categories  WHERE category = 'comics';
SELECT gender, age  FROM gender_age  WHERE device_id = 29182687948017100;
SELECT COUNT(*)  FROM gender_age  JOIN events ON gender_age.device_id = events.device_id  WHERE gender = 'M' AND events.longitude = 114;
SELECT timestamp  FROM events  WHERE event_id = 7 AND device_id = -8022267440849930000;
SELECT category  FROM label_categories  WHERE label_id IN (     SELECT label_id      FROM app_labels      WHERE app_id = -9222198347540750000 );
SELECT ga.group FROM gender_age ga JOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id WHERE pbdm.phone_brand = 'LG' AND pbdm.device_model = 'Nexus 4';
SELECT      gender  FROM      phone_brand_device_model2  WHERE      phone_brand = 'HTC' AND device_model = 'Desire 826';
SELECT      (SUM(CASE WHEN category = 'Academic Information' THEN 1 ELSE 0 END) * 1.0 / COUNT(app_id)) * 100 AS percentage FROM      app_labels JOIN      label_categories ON app_labels.label_id = label_categories.label_id WHERE      category = 'Academic Information';
SELECT      (SUM(CASE WHEN `group` = 'F27-28' THEN 1 ELSE 0 END) / COUNT(device_id)) * 1.0 AS percentage  FROM      gender_age  WHERE      timestamp = '2016-05-03%'
SELECT COUNT(*)  FROM phone_brand_device_model2  WHERE phone_brand = 'OPPO';
SELECT `group`  FROM gender_age  GROUP BY `group`  ORDER BY COUNT(`group`) DESC  LIMIT 1;
SELECT COUNT(event_id)  FROM events  WHERE device_id = '4069764298338760000'
SELECT COUNT(DISTINCT app_id)  FROM app_labels  JOIN label_categories ON app_labels.label_id = label_categories.label_id  WHERE label_categories.category = 'Equity Fund';
SELECT T1.device_id, T1.longitude, T1.latitude FROM gender_age AS T1  WHERE T1.gender = 'F' AND T1.group = 'F24-26';
SELECT COUNT(*)  FROM phone_brand_device_model2  WHERE gender = 'M' AND device_model = 'Galaxy Note 3';
SELECT      phone_brand,      device_model  FROM      phone_brand_device_model2  WHERE      timestamp = '2016-05-07 06:03:22';
SELECT      phone_brand FROM      gender_age WHERE      age BETWEEN 20 AND 30 GROUP BY      phone_brand ORDER BY      COUNT(phone_brand) DESC LIMIT 1;
SELECT      (SUM((gender = NULL AND age = NULL AND `group` = NULL) AND phone_brand = 'vivo')::FLOAT / COUNT(device_id)) * 100 AS percentage FROM      phone_brand_device_model2
SELECT T2.keyword  FROM Episode AS T1  JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id  WHERE T1.title = 'Refuge: Part 1';
SELECT COUNT(*)  FROM Episode  JOIN Keyword ON Episode.episode_id = Keyword.episode_id  WHERE Episode.series = 'law_and_order' AND Episode.season = 9 AND Episode.episode = 23;
SELECT title  FROM Episode  JOIN Keyword ON Episode.episode_id = Keyword.episode_id  WHERE Keyword.keyword = 'laundering money';
SELECT T1.keyword  FROM Keyword AS T1  JOIN Episode AS T2 ON T1.episode_id = T2.episode_id  WHERE T2.rating > 8;
SELECT COUNT(*)  FROM Vote  WHERE episode_id IN (     SELECT episode_id      FROM Episode      WHERE title = 'Cherished' ) AND stars = 10;
SELECT SUM(votes)  FROM law_episode.Vote  WHERE law_episode.Episode.title = 'Cherished';
SELECT title  FROM Episode  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE stars = 10  GROUP BY title  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT C.role  FROM Credit AS C  JOIN Person AS P ON C.person_id = P.person_id  JOIN Episode AS E ON C.episode_id = E.episode_id  WHERE P.name = 'Park Dietz' AND E.title = 'Cherished' AND C.credited = 'true';
SELECT COUNT(*)  FROM Person  WHERE person_id IN (     SELECT person_id      FROM Credit      WHERE episode_id IN (         SELECT episode_id          FROM Episode          WHERE title = 'Cherished'     )      AND credited = '' );
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.role = 'technical advisor' AND c.category = 'cast' AND c.credited = 'true' AND e.title = 'Cherished';
SELECT COUNT(*)  FROM Credit  JOIN Person ON Credit.person_id = Person.person_id  WHERE Person.name = 'Park Dietz' AND Credit.credited = 'true';
SELECT e.title FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'Park Dietz' AND c.category = 'Actor' AND c.credited = 'true';
SELECT      c.credited  FROM      Episode e JOIN      Credit c ON e.episode_id = c.episode_id JOIN      Person p ON p.person_id = c.person_id WHERE      e.episode_id = 'tt0629204' AND      p.name = 'Anthony Azzara'
SELECT COUNT(*)  FROM Keyword  JOIN Episode ON Keyword.episode_id = Episode.episode_id  WHERE Episode.title = 'Disciple';
SELECT e.title FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = '1' ORDER BY v.votes DESC LIMIT 1;
SELECT COUNT(*)  FROM Episode e  JOIN Credit c ON e.episode_id = c.episode_id  JOIN Award a ON a.episode_id = e.episode_id  WHERE e.series = 'Law and Order'  AND e.season = 9  AND e.episode = 20  AND a.result = 'Nominee';
SELECT COUNT(*)  FROM Credit  JOIN Episode ON Credit.episode_id = Episode.episode_id  WHERE Episode.series = 'Law and Order' AND Episode.season = 9 AND Episode.episode = 17 AND Credit.credited = 'true';
SELECT Episode.summary  FROM Episode  JOIN Award ON Episode.episode_id = Award.episode_id  WHERE Award.award_id = '296';
SELECT `role` FROM `Credit` JOIN `Person` ON `Credit.person_id` = `Person.person_id` WHERE `Person.name` = 'Joseph Blair';
SELECT COUNT(*)  FROM Award  JOIN Person ON Award.person_id = Person.person_id  WHERE Person.name = 'Rene Balcer';
SELECT air_date  FROM Episode  WHERE episode_id = (SELECT episode_id FROM Vote GROUP BY episode_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT p.name  FROM Person p  JOIN Award a ON p.person_id = a.person_id  WHERE a.award_id = '313'
SELECT COUNT(*)  FROM Episode  JOIN Credit ON Episode.episode_id = Credit.episode_id  JOIN Person ON Credit.person_id = Person.person_id  WHERE name = 'J.K. Simmons';
SELECT COUNT(*)  FROM Episode  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE title = 'Sideshow' AND stars = '9'
SELECT      (COUNT(k.keyword) IN (         SELECT COUNT(*)          FROM Keyword k          JOIN Episode e ON k.episode_id = e.episode_id         WHERE e.title = 'Refuge: Part 1'     )) /      (COUNT(k.keyword) IN (         SELECT COUNT(*)          FROM Keyword k          JOIN Episode e ON k.episode_id = e.episode_id         WHERE e.title = 'Shield'     )) AS times FROM      Keyword k JOIN      Episode e ON k.episode_id = e.episode_id;
SELECT      COUNT(CASE          WHEN category = 'Cast' AND credited = 'TRUE'          THEN episode_id      END) / 9.0 AS average_cast_members FROM      Credit WHERE      number_in_series BETWEEN 185 AND 193;
SELECT p.name  FROM Person p  JOIN Credit c ON p.person_id = c.person_id  WHERE c.credited = ''  AND c.episode_id = 'tt0629391';
SELECT COUNT(DISTINCT person_id)  FROM Award  WHERE result = 'Winner' AND episode_id IS NOT NULL  GROUP BY person_id  HAVING COUNT(*) > 3;
SELECT p.name FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON p.person_id = c.person_id WHERE e.title = 'tt0629204' AND c.role = 'Script Supervisor';
SELECT COUNT(*)  FROM Award  JOIN Person ON Award.person_id = Person.person_id  WHERE Person.name = 'Julia Roberts' AND Award.result = 'Nominee';
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.category = 'Camera Operator' AND c.role = 'camera operator' AND p.height_meters = (SELECT MAX(height_meters) FROM Person WHERE role = 'camera operator');
SELECT COUNT(*)  FROM Person  WHERE birth_country = 'Canada'  AND EXISTS (     SELECT 1      FROM Award      WHERE Award.person_id = Person.person_id      AND Award.year = 1999 )
SELECT COUNT(*)  FROM Episode e  JOIN Credit c ON e.episode_id = c.episode_id  JOIN Vote v ON e.episode_id = v.episode_id  WHERE v.stars = 10 AND e.rating = (SELECT MAX(rating) FROM Episode);
SELECT T2.keyword  FROM Episode AS T1  JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id  WHERE T1.title = 'Shield'
SELECT      (COUNT(CASE WHEN v.stars = 1 THEN v.episode_id END) / COUNT(v.episode_id)) * 100 AS percentage FROM      Vote v JOIN      Episode e ON v.episode_id = e.episode_id WHERE      e.title = 'True North';
SELECT e.title FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id GROUP BY e.episode_id ORDER BY COUNT(k.keyword) DESC LIMIT 1;
SELECT COUNT(*)  FROM Episode  JOIN Award ON Episode.episode_id = Award.episode_id  WHERE SUBSTR(`air_date`, 1, 4) = '1998'  AND Award.result = 'Winner'  AND Award.organization = 'International Monitor Awards';
SELECT COUNT(*)  FROM Episode  JOIN Award ON Episode.episode_id = Award.episode_id  WHERE title = 'Agony' AND result = 'Winner'
SELECT COUNT(*) AS total_episodes_in_season_9,        (SELECT COUNT(DISTINCT person_id) FROM Credit WHERE episode_id IN (SELECT episode_id FROM Episode WHERE season = 9 AND series = 'Law and Order')) / COUNT(DISTINCT episode_id FROM Episode WHERE season = 9 AND series = 'Law and Order') AS avg_casts_per_season FROM Episode WHERE season = 9 AND series = 'Law and Order';
SELECT T3.keyword  FROM Episode AS T1  JOIN Vote AS T2 ON T1.episode_id = T2.episode_id  JOIN Keyword AS T3 ON T1.episode_id = T3.episode_id  WHERE T2.votes = (     SELECT MAX(votes) FROM Vote WHERE votes < (         SELECT MAX(votes) FROM Vote     ) ) ORDER BY T2.votes DESC  LIMIT 1;
SELECT COUNT(*)  FROM Award  JOIN Episode ON Award.episode_id = Episode.episode_id  WHERE Episode.title = 'Agony' AND Award.result = 'Winner';
SELECT p.name FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON p.person_id = c.person_id WHERE e.title = 'Flight' AND c.role = 'Narrator';
SELECT A.organization  FROM Award A  JOIN Person P ON A.person_id = P.person_id  WHERE P.name = 'Constantine Makris' AND A.result = 'Winner'  GROUP BY A.organization  ORDER BY COUNT(A.award_id) DESC  LIMIT 1;
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.episode_id = (SELECT episode_id FROM Episode WHERE season = 1 AND episode = 3) AND c.role = 'stunt coordinator';
SELECT COUNT(*)  FROM Person  WHERE NOT EXISTS (     SELECT *      FROM Credit      WHERE Person.person_id = Credit.person_id AND title = 'Admissions' AND credited = '' )
SELECT title  FROM Episode  JOIN Credit ON Episode.episode_id = Credit.episode_id  WHERE Credit.category = 'Art Department'  GROUP BY Credit.episode_id  HAVING COUNT(Credit.person_id) = (SELECT MAX(count_persons) FROM  (SELECT COUNT(person_id) as count_persons  FROM Credit  WHERE category = 'Art Department'  GROUP BY episode_id) sub_query)
SELECT COUNT(*)  FROM Person  JOIN Credit ON Person.person_id = Credit.person_id  WHERE name = 'Julia Roberts' AND series IS NOT NULL;
SELECT title  FROM Episode  WHERE episode_id IN (     SELECT episode_id      FROM Vote      WHERE stars = 10 AND votes >= 30 ) ORDER BY votes DESC  LIMIT 3;
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.role = 'Clerk' AND p.birthdate = (SELECT MAX(birthdate) FROM Person);
SELECT COUNT(*)  FROM Episode e  JOIN Credit c ON e.episode_id = c.episode_id  JOIN Vote v ON e.episode_id = v.episode_id  WHERE e.episode = 24 AND v.stars = 1
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.category = 'Cast';
SELECT      p.name,     (COUNT(c.person_id) * 100.0 / (SELECT COUNT(*) FROM Credit c)) AS appearance_percentage FROM      Credit c JOIN      Person p ON c.person_id = p.person_id GROUP BY      p.person_id, p.name ORDER BY      appearance_percentage DESC LIMIT 1;
SELECT e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id JOIN Person p ON a.person_id = p.person_id WHERE a.award_category LIKE 'Primetime Emmy' AND a.award = 'Nominee' AND p.name LIKE 'Law & Order';
SELECT COUNT(*)  FROM Episode  WHERE episode_id NOT IN (     SELECT DISTINCT e.episode_id      FROM Episode e      JOIN Award a ON e.episode_id = a.episode_id      WHERE a.result = 'Winner' AND a.series = 'Law & Order' );
SELECT DISTINCT c.role  FROM Credit c  WHERE c.credited = ''
SELECT title  FROM Episode  WHERE rating = (SELECT MIN(rating) FROM Episode)  ORDER BY rating ASC LIMIT 3;
SELECT      birth_place,      birth_region  FROM      Person  WHERE      birth_name = 'Rene Chenevert Balcer';
SELECT p.name FROM Person p JOIN Keyword k ON p.person_id = k.person_id WHERE k.keyword = 'actor' AND p.birth_country = 'USA';
SELECT title  FROM Episode  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE Vote.stars = 1  GROUP BY title  ORDER BY COUNT(*) ASC  LIMIT 1;
SELECT p.name  FROM Person p  JOIN Award a ON p.person_id = a.person_id  WHERE a.role = 'director' AND a.result = 'Winner'  LIMIT 2;
SELECT votes  FROM Episode  WHERE title = 'Juvenile';
SELECT e.title FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'Anthony Azzara' AND c.credited = ''
SELECT DISTINCT A.year  FROM Episode E  JOIN Award A ON E.episode_id = A.episode_id  WHERE E.title = 'DWB' AND A.result = 'Winner';
SELECT T3.birth_region FROM Credit AS T1 JOIN Person AS T3 ON T1.person_id = T3.person_id WHERE T1.category = 'Production' AND T1.role = 'Assistant Location Manager';
SELECT COUNT(*)  FROM Episode  JOIN Credit ON Episode.episode_id = Credit.episode_id  WHERE name = 'Donna Villella';
SELECT `role` FROM `Award` JOIN `Person` ON `Award.person_id` = `Person.person_id` WHERE `Person.name` = 'Julia Roberts' AND `Award.result` = 'Nominee';
SELECT C.role FROM Person P  JOIN Credit C ON P.person_id = C.person_id WHERE P.height_meters = (SELECT MAX(height_meters) FROM Person)
SELECT e.title  FROM Episode e  JOIN Award a ON e.episode_id = a.episode_id  WHERE a.result = 'Nominee'  GROUP BY e.episode_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Episode.rating FROM Episode JOIN Credit ON Episode.episode_id = Credit.episode_id WHERE Credit.person_id IN (     SELECT Person.person_id     FROM Person     WHERE name = 'Jace Alexander' )
SELECT DISTINCT p.name  FROM Person p  JOIN Credit c ON p.person_id = c.person_id  WHERE c.category IN ('actor', 'director', 'writer') AND c.episode_id IN (     SELECT e.episode_id      FROM Episode e      WHERE e.season = 9 AND e.episode = 19 )
SELECT      AVG(T3.stars) AS average_rating FROM      Credit AS T1  JOIN      Person AS T2 ON T1.person_id = T2.person_id  JOIN      Vote AS T3 ON T3.episode_id = T1.episode_id  WHERE      T2.name = 'Jim Bracchitta'
SELECT      (COUNT(CASE WHEN credit.role = 'Additional Crew' THEN 1 END)       OVER() / COUNT(*) OVER() * 100) as percentage FROM      Credit  JOIN      Episode ON Credit.episode_id = Episode.episode_id  WHERE      Episode.title = 'True North';
SELECT title, summary, air_date  FROM Episode  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE Vote.stars = 10 AND Vote.votes = 72;
SELECT COUNT(Vote.votes), Episode.air_date, Episode.rating FROM Episode JOIN Vote ON Episode.episode_id = Vote.episode_id WHERE Episode.episode_id = 12 AND Vote.stars = 6;
SELECT p.name, c.role  FROM Award a  JOIN Person p ON a.person_id = p.person_id  JOIN Credit c ON a.episode_id = c.episode_id  WHERE a.award = 'Best Television Episode'  AND a.award_category = 'Edgar'  AND a.year = 2000  AND a.result = 'Winner';
SELECT      A.organization, A.year, A.award, A.award_category FROM      Award AS A     JOIN Person AS P ON A.person_id = P.person_id WHERE      P.name = 'Rene Balcer' AND A.result = 'Winner';
SELECT      A.year, A.episode_id FROM      Award AS A JOIN      Person AS P ON A.person_id = P.person_id WHERE      P.name = 'Constantine Makris' AND      A.award = 'Television' AND      A.award_category = 'Silver Gavel Award' AND      A.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' AND      A.result = 'Winner' AND      (SELECT COUNT(*) FROM Award WHERE year = A.year - 1 AND person_id = A.person_id AND award = 'Television' AND award_category = 'Silver Gavel Award' AND organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' AND result = 'Winner') = 1;
SELECT p.name FROM Person p JOIN Award a ON p.person_id = a.person_id WHERE p.role = 'writer' AND a.result = 'Winner' AND a.award_category = 'Silver Gavel Award' AND a.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' AND (a.series LIKE '%Law and Order%' OR a.episode_id IN (     SELECT e.episode_id      FROM Episode e      WHERE e.summary LIKE '%Law and Order%' ));
SELECT COUNT(*)  FROM Episode e  JOIN Credit c ON e.episode_id = c.episode_id  JOIN Award a ON a.episode_id = e.episode_id  WHERE e.series = 'Law and Order'  AND a.organization = 'Primetime Emmy Awards'  AND a.year = 1999  AND a.result = 'nominee'  AND e.number_in_series = 20;
SELECT      e.episode_id,     e.title,     c.role FROM      Episode e JOIN      Award a ON e.episode_id = a.episode_id JOIN      Credit c ON e.episode_id = c.episode_id JOIN      Person p ON c.person_id = p.person_id WHERE      p.name = 'Julia Roberts' AND      a.award = 'Outstanding Guest Actress in a Drama Series' AND      a.result = 'Winner' AND      a.year = 1999 AND      a.organization = 'Primetime Emmy Awards';
SELECT title, air_date  FROM Episode  JOIN Credit ON Episode.episode_id = Credit.episode_id  JOIN Person ON Credit.person_id = Person.person_id  WHERE Person.name = 'Billy Fox' AND Credit.role = 'producer';
SELECT COUNT(*)  FROM Person  JOIN Credit ON Person.person_id = Credit.person_id  WHERE Person.birth_country = 'USA' AND Person.name = Credit.role AND Credit.credited = '' AND Episode.episode_id = 'tt0629228'
SELECT `role` FROM `Credit` JOIN `Person` ON `Credit.person_id` = `Person.person_id` WHERE `Person.name` = 'Jason Kuschner' AND `Episode.episode` = 9;
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.role = 'president of NBC West Coast' AND c.episode_id IN (SELECT e.episode_id FROM Episode e WHERE e.season = 1 AND e.episode = 1);
SELECT title FROM Episode JOIN Vote ON Episode.episode_id = Vote.episode_id WHERE (SUM(Vote.stars * Vote.percent) / 100) >= 0 ORDER BY (SUM(Vote.stars * Vote.percent) / 100) DESC LIMIT 3;
SELECT      COUNT(*) AS total_casts,     SUM(CASE WHEN T1.birth_country = 'USA' THEN 1 ELSE 0 END) AS american_casts_count,     (SUM(CASE WHEN T1.birth_country = 'USA' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS american_casts_ratio FROM Person AS T1 JOIN Credit AS T2 ON T1.person_id = T2.person_id WHERE T2.category = 'Cast' AND T2.episode_id = (SELECT episode_id FROM Episode WHERE series = 'YourSeriesName' AND season = 1 AND episode = 2);
SELECT COUNT(*)  FROM Person  WHERE birth_country = 'Canada'  AND EXISTS (     SELECT 1      FROM Award      WHERE Award.person_id = Person.person_id AND award IS NOT NULL );
SELECT COUNT(*)  FROM Episode  JOIN Credit ON Episode.episode_id = Credit.episode_id   JOIN Person ON Person.person_id = Credit.person_id   WHERE name = 'Jerry Orbach'
SELECT T3.name  FROM Credit AS T1  JOIN Person AS T3 ON T1.person_id = T3.person_id  WHERE T1.episode_id = (SELECT episode_id FROM Episode WHERE number_in_series = 9)
SELECT A.award  FROM Award A  JOIN Keyword K ON A.episode_id = K.episode_id  WHERE K.keyword = 'episode' AND K.value = '20' AND A.result IN ('Winner', 'Nominee');
SELECT DISTINCT p.name  FROM Person p  JOIN Award a ON p.person_id = a.person_id  WHERE a.result = 'Winner' AND a.award_id IN (     SELECT a2.award_id      FROM Award a2      WHERE a2.episode_id = a.episode_id AND a2.result = 'Winner'      GROUP BY a2.episode_id      HAVING COUNT(*) > 1 ) AND a.series = <entire_season>
SELECT DISTINCT p.name  FROM Person p  JOIN Award a ON p.person_id = a.person_id  WHERE a.role = 'director' AND a.result = 'Winner';
SELECT e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.result = 'Nominee';
SELECT      e.episode_id,     AVG(e.rating) AS average_rating FROM      Episode e WHERE      e.season = 9 GROUP BY      e.episode_id;
SELECT      (votes WHERE episode = 1 AND stars = 10) - (votes WHERE episode = 24 AND stars = 10) AS vote_difference;
SELECT Episode.rating FROM Episode JOIN Award ON Episode.episode_id = Award.episode_id WHERE Award.result = 'Winner' ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*)  FROM Credit  WHERE episode_id >= 1 AND episode_id <= 10  AND credited = 'true';
SELECT Episode.episode_id FROM Episode JOIN Keyword ON Episode.episode_id = Keyword.episode_id WHERE Keyword.keyword = 'mafia';
SELECT      AVG(T2.stars) AS avg_star  FROM      Award AS T1  JOIN      Vote AS T2 ON T1.episode_id = T2.episode_id  WHERE      T1.result = 'Winner'  GROUP BY      T1.episode_id ORDER BY      T2.percent DESC  LIMIT 1;
SELECT      AVG(T1.rating) AS average_ranking FROM      Episode AS T1  JOIN      Award AS T2 ON T1.episode_id = T2.episode_id  WHERE      T2.result = 'Nominee';
SELECT COUNT(*)  FROM Award  WHERE result = 'Winner' AND        award_category = 'Television' AND        organization = 'American Bar Association Silver Gavel Awards for Media and the Arts';
SELECT birth_continent  FROM Person  WHERE name = 'Michael Preston';
SELECT p.name  FROM Person p  JOIN Credit c ON p.person_id = c.person_id  JOIN Episode e ON c.episode_id = e.episode_id  JOIN Award a ON a.episode_id = e.episode_id  WHERE c.role = 'Katrina Ludlow' AND c.category = 'Actress' AND a.result = 'Nominee';
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id JOIN Episode e ON c.episode_id = e.episode_id JOIN Award a ON a.episode_id = e.episode_id AND e.episode_id = a.episode_id WHERE c.role = 'teleplay' AND a.result = 'Winner' AND a.award = 'Best Television Episode';
SELECT p.birthdate  FROM Person p  JOIN Credit c ON p.person_id = c.person_id  WHERE c.role = 'writer' AND c.category = 'actor';
SELECT e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.award = 'Outstanding Costume Design for a Series';
SELECT title  FROM Episode  JOIN Vote ON Episode.episode_id = Vote.episode_id  GROUP BY title  ORDER BY SUM(votes) DESC  LIMIT 1;
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.role = 'Alex Brown' AND c.credited = 'true'
SELECT T3.birth_place  FROM Person AS T1  JOIN Credit AS T2 ON T1.person_id = T2.person_id  JOIN Person AS T3 ON T3.person_id = T1.person_id  WHERE T1.person_id = 'nm0007064' AND T2.credited = '' AND T2.role = 'narrator'
SELECT T2.keyword  FROM Episode AS T1  JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id  WHERE T1.title = 'Shield'
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id JOIN Episode e ON c.episode_id = e.episode_id JOIN Award a ON a.episode_id = e.episode_id WHERE p.height_meters > 1.80 AND a.result = 'Winner';
SELECT title  FROM Episode  JOIN Keyword ON Episode.episode_id = Keyword.episode_id  WHERE Keyword.keyword IN ('nun', 'priest') GROUP BY title HAVING COUNT(DISTINCT Keyword.keyword) = 2;
SELECT e.episode  FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Award a ON a.episode_id = e.episode_id AND a.award = 'Best Television Episode' AND a.result = 'Winner' WHERE e.rating = 8.5 ORDER BY e.rating DESC LIMIT 1, 1
SELECT title  FROM Episode  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE Vote.stars = 10  LIMIT 3;
SELECT value  FROM observations  WHERE date = '2008-03-11'  AND patient IN      (SELECT patient       FROM patients       WHERE first = 'Elly' AND last = 'Koss')  AND code = 'DESCRIPTION = \'Body Height\'';
SELECT      (MAX(obs.units) - MIN(obs.units)) AS weight_increase FROM      observations obs WHERE      obs.patient = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss')     AND obs.DESCRIPTION = 'Body Weight'     AND ((obs.DATE LIKE '2009%' AND obs.units IS NOT NULL) OR (obs.DATE LIKE '2008%' AND obs.units IS NOT NULL));
SELECT MAX(O.value) AS max_sbp FROM observations O JOIN patients P ON O.patient = P.patient WHERE P.first = 'Elly' AND P.last = 'Koss' AND O.code = 'Systolic Blood Pressure';
SELECT COUNT(*)  FROM observations  WHERE DESCRIPTION = 'Systolic Blood Pressure' AND patient = (SELECT id FROM patients WHERE first = 'Elly' AND last = 'Koss');
SELECT first, last  FROM patients  WHERE id = (     SELECT observation.patient      FROM observations      WHERE DESCRIPTION = 'Systolic Blood Pressure'      ORDER BY VALUE DESC      LIMIT 1 );
SELECT SUM(     CASE          WHEN DESCRIPTION LIKE '%Acetaminophen%' THEN              DATETIME('now') - STOP          ELSE              0     END ) AS Duration_Taking_Acetaminophen FROM medications WHERE first = 'Elly' AND last = 'Koss';
SELECT medications.DESCRIPTION  FROM medications  JOIN patients ON medications.PATIENT = patients.patient  WHERE patients.first = 'Elly' AND patients.last = 'Koss';
SELECT      m.REASONDESCRIPTION  FROM      medications m JOIN      patients p ON m.PATIENT = p.patient WHERE      p.first = 'Elly' AND p.last = 'Koss' AND m.DESCRIPTION LIKE '%Acetaminophen%';
SELECT m.DESCRIPTION  FROM medications m  JOIN encounters e ON m.ENCOUNTER = e.ID  WHERE e.REASONDESCRIPTION LIKE '%Streptococcal sore throat%'  AND m.DESCRIPTION IS NOT NULL  AND p.first = 'Elly'  AND p.last = 'Koss';
SELECT p.first, p.last  FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE m.DESCRIPTION LIKE '%Acetaminophen%';
SELECT DESCRIPTION  FROM conditions  WHERE START = '2009-01-08' AND PATIENT IN  (     SELECT patient      FROM patients      WHERE first = 'Elly' AND last = 'Koss' );
SELECT SUM(     CASE          WHEN c.DESCRIPTION = 'Cystitis' THEN              DATETIME('2000-01-01') +              (strftime('%Y', STOP) - strftime('%Y', START)) * 365 +              (strftime('%m', STOP) - strftime('%m', START)) * 30 +              strftime('%d', STOP) - strftime('%d', START)         ELSE 0     END ) AS duration_in_days FROM conditions AS c JOIN patients AS p ON c.PATIENT = p.patient WHERE p.first = 'Elly' AND p.last = 'Koss';
SELECT      AVG(O.Value) AS average_weight FROM      observations O JOIN      patients P ON O.patient = P.patient WHERE      P.first = 'Elly' AND P.last = 'Koss' AND O.description = 'Body Weight'
SELECT      (COUNT(CASE WHEN p.marital = 'M' THEN p.patient END)       / COUNT(p.patient)) * 100 AS percentage FROM      patients p  JOIN      conditions c ON p.patient = c.PATIENT  WHERE      c.DESCRIPTION = 'Cystitis';
SELECT value, units  FROM observations  WHERE date = '2010-08-02'  AND patient IN (SELECT patient FROM patients WHERE first = 'Vincent' AND last = 'Wyman')  AND code = (SELECT id FROM observations WHERE date = '2010-08-02' AND patient IN (SELECT patient FROM patients WHERE first = 'Vincent' AND last = 'Wyman') AND description = 'Body Height');
SELECT COUNT(*)  FROM careplans  JOIN patients ON careplans.PATIENT = patients.patient  WHERE patients.first = 'Norman' AND patients.last = 'Berge';
SELECT      c.REASONDESCRIPTION  FROM      claims AS cl  JOIN      procedures AS p ON cl.ID = p.CLAIM  JOIN      careplans AS cp ON p.ID = cp.PROCEDURE  JOIN      medications AS m ON cp.ID = m.CAREPLAN  WHERE      cl.PATIENT = (SELECT patient FROM patients WHERE first = 'Annabelle' AND last = 'Pouros')  AND      p.DATE = '1970-12-19'  AND      m.DESCRIPTION = 'Leucovorin 100 MG Injection';
SELECT PREVALENCE_PERCENTAGE  FROM conditions  WHERE CODE = '64859006';
SELECT PREVALENCE_RATE  FROM conditions  WHERE CODE = '368581000119106';
SELECT DESCRIPTION  FROM procedures  WHERE DATE = '2009-08-09' AND PATIENT IN      (SELECT ID FROM patients WHERE first = 'Jacquelyn' AND last = 'Shanahan')
SELECT COUNT(*)  FROM claims  WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Abbie' AND last = 'Cole')  AND BILLABLEPERIOD BETWEEN '2010-12-31' AND '2012-01-01';
SELECT COUNT(*)  FROM allergies  WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Saundra' AND last = 'Monahan');
SELECT p.first, p.last  FROM patients p  JOIN claims c ON p.patient = c.PATIENT  WHERE c.BILLABLEPERIOD = '1947-09-11';
SELECT DESCRIPTION  FROM encounters  WHERE DATE = '2008-10-25' AND PATIENT IN      (SELECT patient FROM patients WHERE first = 'Hubert' AND last = 'Baumbach')
SELECT c.DESCRIPTION  FROM conditions c  JOIN encounters e ON c.ENCOUNTER = e.ID  WHERE c.PATIENT IN (     SELECT p.patient      FROM patients p      WHERE p.first = 'Keven' AND p.last = 'Kuhn' )  AND c.START >= '2016-09-24'  AND c.STOP <= '2016-10-10';
SELECT procedures.DATE FROM procedures JOIN patients ON procedures.PATIENT = patients.patient WHERE patients.first = 'Ira' AND patients.last = 'Deckow' AND procedures.DESCRIPTION = 'Standard pregnancy test';
SELECT AVG(DATE(stop) - DATE(start)) / COUNT(ID) FROM careplans WHERE first = 'Wesley' AND last = 'Lemke';
SELECT      AVG(DATE_DIFF(stop, start, DAY)) AS average_pregnancy_period FROM      encounters WHERE      PATIENT IN (         SELECT patient          FROM patients          WHERE first = 'Angelena' AND last = 'Kertzmann'     ) AND DESCRIPTION = 'Normal pregnancy';
SELECT T1.patient  FROM allergies T1  WHERE (EXTRACT(YEAR FROM STOP) -         CASE WHEN SUBSTR(STOP, -2, 1) = '9' THEN EXTRACT(YEAR FROM (SUBSTR(STOP, LENGTH(STOP) - 1) + 1900)) ELSE EXTRACT(YEAR FROM (SUBSTR(STOP, LENGTH(STOP) - 1) + 2000)) END) -        (EXTRACT(YEAR FROM START) -          CASE WHEN SUBSTR(START, -2, 1) = '9' THEN EXTRACT(YEAR FROM (SUBSTR(START, LENGTH(START) - 1) + 1900)) ELSE EXTRACT(YEAR FROM (SUBSTR(START, LENGTH(START) - 1) + 2000)) END) =        (SELECT MAX(T2.duration) FROM         (SELECT T3.patient, (EXTRACT(YEAR FROM T3.STOP) -          CASE WHEN SUBSTR(T3.STOP, -2, 1) = '9' THEN EXTRACT(YEAR FROM (SUBSTR(T3.STOP, LENGTH(T3.STOP) - 1) + 1900)) ELSE EXTRACT(YEAR FROM (SUBSTR(T3.STOP, LENGTH(T3.STOP) - 1) + 2000)) END) -         (EXTRACT(YEAR FROM T3.START) -           CASE WHEN SUBSTR(T3.START, -2, 1) = '9' THEN EXTRACT(YEAR FROM (SUBSTR(T3.START, LENGTH(T3.START) - 1) + 1900)) ELSE EXTRACT(YEAR FROM (SUBSTR(T3.START, LENGTH(T3.START) - 1) + 2000)) END) AS duration         FROM allergies T3         WHERE T3.STOP IS NOT NULL) T2)
SELECT COUNT(*)  FROM conditions  WHERE DESCRIPTION = 'Diabetes' AND START LIKE '1988%'
SELECT COUNT(DISTINCT patient)  FROM allergies  WHERE DESCRIPTION = 'Allergy to eggs';
SELECT PATIENT  FROM conditions  WHERE DESCRIPTION = 'Hypertension'  ORDER BY START DESC  LIMIT 1;
SELECT DESCRIPTION  FROM allergies  GROUP BY DESCRIPTION  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T1.ID  FROM patients AS T1  JOIN observations AS T2  ON T1.patient = T2.PATIENT  WHERE T2.DESCRIPTION = 'Body Height'  ORDER BY T2.VALUE DESC  LIMIT 1;
SELECT MAX(COUNT(DESCRIPTION))  FROM conditions  WHERE PATIENT IN (   SELECT patient    FROM patients    WHERE gender = 'F' AND ethnicity = 'american' )
SELECT COUNT(*)  FROM medications  WHERE DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet'  AND START LIKE '2016%'  AND ethnicity = 'dominican'  AND SUBTRACT(strftime('%m', STOP), strftime('%m', START)) = 1;
SELECT COUNT(*)  FROM patients  WHERE birthdate LIKE '192%' AND EXISTS (     SELECT 1      FROM conditions      WHERE conditions.PATIENT = patients.patient      AND conditions.DESCRIPTION = 'Pneumonia' )
SELECT p.first, p.last  FROM patients p  JOIN medications m ON p.patient = m.PATIENT  WHERE m.DESCRIPTION = 'Yaz 28 Day Pack' AND m.START LIKE '2011%'
SELECT COUNT(*)  FROM patients  JOIN immunizations ON patients.patient = immunizations.PATIENT  WHERE patients.race = 'black' AND immunizations.DESCRIPTION = 'DTaP' AND immunizations.DATE LIKE '2013%'
SELECT COUNT(*)  FROM immunizations i  JOIN (     SELECT patient      FROM conditions c       WHERE c.START = (SELECT MAX(prevalence.start) FROM all_prevalences prevalence WHERE c.CODE = prevalence.ITEM) ) p ON i.PATIENT = p.patient  WHERE i.START = (SELECT MAX(condition.start) FROM conditions condition WHERE condition.PATIENT = p.patient);
SELECT COUNT(DISTINCT p.patient)  FROM patients p  JOIN all_prevalences ap ON p.patient = ap.PATIENT  WHERE ap.PREVALENCE_RATE = (SELECT MAX(prevalence_rate) FROM all_prevalences);
SELECT      c.DESCRIPTION  FROM      conditions AS c JOIN      immunizations AS i ON c.PATIENT = i.PATIENT AND c.START BETWEEN i.DATE AND i.STOP WHERE      i.DESCRIPTION = 'Influenza seasonal injectable preservative free' GROUP BY      c.DESCRIPTION ORDER BY      COUNT(*) DESC LIMIT 1;
SELECT DISTINCT c.PATIENT  FROM conditions c  JOIN all_prevalences ap ON c.CODE = ap.ITEM  WHERE ap.PREVALENCE_PERCENTAGE = 18.8;
SELECT COUNT(*)  FROM conditions  WHERE DESCRIPTION = 'Tyree Eichmann';
SELECT COUNT(*)  FROM patients  JOIN immunizations ON patients.ID = immunizations.PATIENT  JOIN conditions ON patients.ID = conditions.PATIENT  WHERE immunizations.DESCRIPTION = 'meningococcal MCV4P'  AND conditions.DESCRIPTION = 'Viral sinusitis (disorder)';
SELECT COUNT(*)  FROM patients  JOIN conditions ON patients.patient = conditions.PATIENT  WHERE conditions.DESCRIPTION = 'Prediabetes' AND patients.gender = 'F';
SELECT p.first, p.last  FROM patients p JOIN observations o ON p.patient = o.PATIENT WHERE o.DESCRIPTION = 'Body Mass Index' AND o.VALUE = (SELECT MIN(VALUE) FROM observations WHERE DESCRIPTION = 'Body Mass Index' AND UNITS = 'kg/m2');
SELECT      strftime('%Y', deathdate) - strftime('%Y', birthdate) as age  FROM      patients  JOIN      conditions ON patients.patient = conditions.PATIENT  WHERE      patients.first = 'Giovanni' AND      patients.last = 'Russel' AND      conditions.DESCRIPTION = 'Hypertension';
SELECT COUNT(*)  FROM patients  JOIN medications ON patients.patient = medications.PATIENT  WHERE patients.gender = 'F'  AND medications.DESCRIPTION = 'oxaliplatin 5 MG/ML [Eloxatin]';
SELECT COUNT(*)  FROM patients  JOIN conditions ON patients.patient = conditions.PATIENT  WHERE conditions.DESCRIPTION = 'Stroke' AND patients.deathdate IS NULL;
SELECT COUNT(*)  FROM patients  WHERE race LIKE 'asian%'  AND EXISTS (     SELECT 1      FROM allergies      WHERE allergies.PATIENT = patients.patient      AND allergies.DESCRIPTION = 'Allergy to peanuts' );
SELECT AVG(T2.VALUE)  FROM patients AS T1  JOIN observations AS T2 ON T1.patient = T2.PATIENT  WHERE T1.DESCRIPTION = 'Hypertension' AND T2.DESCRIPTION = 'Diastolic Blood Pressure';
SELECT DESCRIPTION  FROM medications  WHERE PATIENT IN (     SELECT patient      FROM patients      WHERE ssn = '999-94-3751' );
SELECT p.ssn  FROM patients p  JOIN allergies a ON p.patient = a.PATIENT  WHERE p.gender = 'F' AND p.ethnicity = 'irish' AND a.DESCRIPTION = 'Allergy to grass pollen';
SELECT p.first, p.last  FROM patients p  JOIN careplans cp ON p.patient = cp.PATIENT  WHERE cp.CODE = '311791003';
SELECT      c.DESCRIPTION  FROM      patients p  JOIN      encounters e ON p.patient = e.PATIENT  JOIN      conditions c ON p.patient = c.PATIENT AND e.ID = c.ENCOUNTER  WHERE      p.deathdate IS NOT NULL  ORDER BY      strftime('%Y', p.deathdate) - strftime('%Y', p.birthdate) DESC  LIMIT 1;
SELECT CODE  FROM all_prevalences  WHERE OCCURRENCES = (SELECT MAX(OCCURRENCES) FROM all_prevalences);
SELECT o.VALUE, o.UNITS  FROM observations o  JOIN patients p ON o.PATIENT = p.patient  WHERE p.address = '365 Della Crossroad Suite 202 Deerfield MA 01342 US' AND o.DESCRIPTION = 'Glucose';
SELECT p.ssn  FROM patients p JOIN all_prevalences ap ON p.patient = ap.ITEM WHERE ap.PREVALENCE_PERCENTAGE < (0.3 * (SELECT AVG(PREVALENCE_PERCENTAGE) FROM all_prevalences)) LIMIT 5;
SELECT      (COUNT(CASE WHEN T2.gender = 'F' AND T2.race = 'asian' THEN T1.patient ELSE NULL END)      / COUNT(T1.patient)) * 100 AS percentage FROM      conditions AS T1 JOIN      patients AS T2 ON T1.patient = T2.patient WHERE      T1.DESCRIPTION = 'Acute bronchitis (disorder)';
SELECT COUNT(*)  FROM encounters  WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Major' AND last = 'D''Amore');
SELECT procedures.DESCRIPTION  FROM procedures  JOIN encounters ON procedures.ENCOUNTER = encounters.ID  JOIN patients ON encounters.PATIENT = patients.patient  WHERE patients.first = 'Emmy' AND patients.last = 'Waelchi';
SELECT p.first, p.last  FROM patients p  JOIN encounters e ON p.patient = e.PATIENT  JOIN procedures pr ON e.ID = pr.ENCOUNTER  WHERE pr.DESCRIPTION = 'Extraction of wisdom tooth';
SELECT o.VALUE, o.UNITS  FROM observations o  JOIN patients p ON o.PATIENT = p.patient  WHERE p.first = 'Elly' AND p.last = 'Koss'  AND o.DESCRIPTION = 'Body Weight';
SELECT DISTINCT p.first, p.last  FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE a.DESCRIPTION = 'Allergy to soya';
SELECT COUNT(*)  FROM immunizations  JOIN patients ON immunizations.PATIENT = patients.patient  WHERE patients.first = 'Keven'  AND patients.last = 'Kuhn'  AND immunizations.DESCRIPTION = 'DTaP';
SELECT p.first, p.last  FROM patients p  JOIN encounters e ON p.patient = e.PATIENT  JOIN medications m ON e.ID = m.ENCOUNTER  WHERE m.DESCRIPTION = 'Clopidogrel 75 MG Oral Tablet' AND        SUBTRACT(STRFTIME('%Y', m.STOP), STRFTIME('%Y', m.START)) > 10;
SELECT procedures.DESCRIPTION, medications.DESCRIPTION  FROM procedures  JOIN patients ON procedures.PATIENT = patients.patient  JOIN conditions ON procedures.ENCOUNTER = conditions.ID  WHERE conditions.DESCRIPTION = 'Third degree burn'  UNION  SELECT medications.DESCRIPTION  FROM medications  JOIN patients ON medications.PATIENT = patients.patient  JOIN conditions ON medications.ENCOUNTER = conditions.ID  WHERE conditions.DESCRIPTION = 'Third degree burn';
SELECT m.DESCRIPTION  FROM medications m  JOIN allergies a ON m.PATIENT = a.PATIENT  WHERE a.DESCRIPTION = 'Allergy to mould'  AND m.START = '6/6/16';
SELECT DISTINCT c.DESCRIPTION  FROM careplans AS c  JOIN encounters AS e ON c.ENCOUNTER = e.ID  JOIN conditions AS co ON co.PATIENT = c.PATIENT AND co.DESCRIPTION = 'Secondary malignant neoplasm of colon';
SELECT      c.DESCRIPTION,      COUNT(*) OVER() AS total_population_count,     SUM(CASE WHEN c.START = '5/9/2014' THEN 1 ELSE 0 END) OVER() AS occurrences_on_5_9_2014 FROM      conditions c WHERE      c.START = '5/9/2014';
SELECT      p.first,      p.last,      DATEDIFF('2011-01-01', p.birthdate) AS age FROM      patients p JOIN      observations o ON p.patient = o.PATIENT WHERE      o.DESCRIPTION = 'Systolic Blood Pressure' AND      o.VALUE = 200 AND      o.UNITS = 'mmHg' AND      o.DATE LIKE '2011%'
SELECT      (COUNT(CASE WHEN DESCRIPTION = 'Influenza seasonal injectable preservative free' THEN PATIENT ELSE NULL END)      / COUNT(DISTINCT PATIENT)) * 100 AS percentage,     COUNT(CASE WHEN DESCRIPTION = 'Influenza seasonal injectable preservative free' AND ETHNICITY = 'english' THEN PATIENT ELSE NULL END) AS english_patients FROM      immunizations WHERE      strftime('%Y', DATE) = '2017';
SELECT p.first FROM patients p JOIN encounters e ON p.patient = e.PATIENT WHERE e.REASONDESCRIPTION = 'Normal pregnancy';
SELECT p.birthdate  FROM patients p  JOIN careplans cp ON p.patient = cp.PATIENT  WHERE cp.DESCRIPTION = 'Outpatient Encounter';
SELECT p.first FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Cystitis';
SELECT COUNT(*)  FROM patients  WHERE marital = 'M' AND EXISTS (   SELECT *    FROM conditions    WHERE conditions.patient = patients.patient AND DESCRIPTION = 'Stroke' );
SELECT address  FROM patients  WHERE EXISTS (     SELECT *      FROM claims      WHERE claims.patient = patients.patient      AND billableperiod >= '2010-01-01'      AND billableperiod <= '2010-12-31' )
SELECT last  FROM patients JOIN allergies ON patients.patient = allergies.PATIENT WHERE allergies.DESCRIPTION = 'Allergy to dairy product';
SELECT `START` FROM allergies JOIN patients ON allergies.PATIENT = patients.patient WHERE `first` = 'Angelo' AND `last` = 'Buckridge';
SELECT COUNT(*)  FROM patients  JOIN allergies ON patients.patient = allergies.PATIENT  WHERE patients.gender = 'M'  AND allergies.DESCRIPTION = 'House dust mite allergy';
SELECT      MAX(COUNT(DESCRIPTION))  FROM      allergies  JOIN      patients ON allergies.PATIENT = patients.patient  WHERE      patients.race = 'white';
SELECT p.first FROM patients p JOIN immunizations i ON p.patient = i.PATIENT WHERE i.DESCRIPTION = 'Influenza seasonal injectable preservative free';
SELECT COUNT(*)  FROM patients  JOIN immunizations ON patients.patient = immunizations.PATIENT  WHERE patients.gender = 'F'  AND immunizations.DESCRIPTION = 'HPV quadrivalent';
SELECT e.DESCRIPTION  FROM encounters e  JOIN patients p ON e.PATIENT = p.patient  WHERE p.birthplace = 'Pittsfield MA US';
SELECT COUNT(DISTINCT a.DESCRIPTION) FROM allergies a JOIN patients p ON a.PATIENT = p.patient WHERE p.ethnicity = 'german';
SELECT AVG(YEAR(CURRENT_DATE) - YEAR(patients.birthdate)) as average_age FROM patients JOIN careplans ON patients.patient = careplans.PATIENT WHERE careplans.REASONDESCRIPTION = 'Prediabetes';
SELECT COUNT(*)  FROM patients  WHERE EXISTS (     SELECT *      FROM medications      WHERE medications.PATIENT = patients.patient      AND medications.REASONDESCRIPTION = 'Coronary Heart Disease'      AND medications.STOP IS NOT NULL )  AND patients.deathdate IS NULL;
SELECT COUNT(DISTINCT p.patient)  FROM patients p  JOIN procedures proc ON p.patient = proc.PATIENT  WHERE proc.DESCRIPTION = 'Bone immobilization' AND p.drivers IS NOT NULL;
SELECT p.first, p.last  FROM patients p  JOIN allergies a ON p.patient = a.PATIENT  GROUP BY p.patient, p.first, p.last  HAVING COUNT(a.DESCRIPTION) > 3;
SELECT COUNT(DISTINCT p.patient)  FROM patients p  JOIN allergies a ON p.patient = a.PATIENT  JOIN immunizations i ON p.patient = i.PATIENT  WHERE a.DESCRIPTION = 'Allergy to eggs'  AND i.DESCRIPTION = 'Td (adult) preservative free';
SELECT COUNT(DISTINCT p.patient)  FROM patients p  JOIN encounters e ON p.patient = e.PATIENT  JOIN observations o ON p.patient = o.PATIENT AND o.DATE = e.DATE  JOIN careplans cp ON p.patient = cp.PATIENT AND e.ID = cp.ENCOUNTER  WHERE o.DESCRIPTION = 'Body Weight' AND o.VALUE > 100 AND o.UNITS = 'kg' AND cp.DESCRIPTION = 'Diabetes self management plan';
SELECT      MAX(COUNT(p.gender)) AS max_count,     p.gender FROM      patients p JOIN      allergies a ON p.patient = a.PATIENT WHERE      a.DESCRIPTION = 'Dander (animal) allergy';
SELECT DISTINCT BillablePeriod.start_date  FROM claims  WHERE claims.patient IN (   SELECT patients.patient    FROM patients    WHERE patients.last = 'Dickinson' ) AND claims.BILLABLEPERIOD IS NOT NULL;
SELECT first, last  FROM patients  JOIN conditions ON patients.patient = conditions.PATIENT  WHERE conditions.DESCRIPTION = 'Otitis media';
SELECT COUNT(*)  FROM patients  JOIN conditions ON patients.patient = conditions.PATIENT  JOIN medications ON patients.patient = medications.PATIENT  WHERE conditions.DESCRIPTION = 'Myocardial Infarction'  AND patients.ethnicity = 'Irish'  AND medications.REASONDESCRIPTION = 'Myocardial Infarction';
SELECT COUNT(*)  FROM patients  JOIN careplans ON patients.patient = careplans.PATIENT  WHERE careplans.DESCRIPTION = 'Concussion with loss of consciousness' AND patients.marital = 'M';
SELECT COUNT(DISTINCT p.patient)  FROM patients p  JOIN immunizations i ON p.patient = i.PATIENT  JOIN careplans cp ON p.patient = cp.PATIENT  WHERE i.DESCRIPTION = 'rotavirus monovalent' AND cp.STOP = '2013-11-23';
SELECT COUNT(*)  FROM patients  JOIN medications ON patients.patient = medications.PATIENT  WHERE patients.gender = 'F'  AND medications.DESCRIPTION = 'Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual]';
SELECT      (SUM(CASE WHEN a.DESCRIPTION = 'Allergy to grass pollen' THEN 1 ELSE 0 END) * 100.0 / COUNT(p.patient)) AS percentage FROM      patients p JOIN      allergies a ON p.patient = a.PATIENT WHERE      p.birthplace = 'Pembroke MA US';
SELECT AVG(o.VALUE)  FROM observations o  JOIN patients p ON o.PATIENT = p.patient  WHERE p.race = 'asian' AND o.DESCRIPTION = 'Body Weight' AND o.UNITS = 'kg';
SELECT patients.ssn  FROM patients  JOIN allergies ON patients.patient = allergies.PATIENT  WHERE allergies.DESCRIPTION = 'Latex allergy';
SELECT      (a.STOP - a.START) AS duration,     a.DESCRIPTION AS allergy_type FROM      allergies a JOIN      patients p ON a.PATIENT = p.patient WHERE      p.first = 'Isadora' AND p.last = 'Moen';
SELECT COUNT(*)  FROM careplans  WHERE patient IN (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss')  AND careplans.START BETWEEN '2009-11-01' AND '2010-10-23';
SELECT p.patient FROM patients p JOIN careplans cp ON p.ID = cp.PATIENT WHERE cp.START >= '2009-01-01' AND cp.STOP <= '2009-12-31'  AND p.marital = 'M'  AND DATEDIFF(cp.STOP, cp.START) > 60;
SELECT immunizations.DATE  FROM immunizations  JOIN patients ON immunizations.PATIENT = patients.patient  WHERE patients.first = 'Elly' AND patients.last = 'Koss' AND immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free';
SELECT COUNT(*)  FROM immunizations  JOIN patients ON immunizations.PATIENT = patients.patient  WHERE immunizations.DESCRIPTION = 'meningococcal MCV4P'  AND patients.race = 'black'  AND immunizations.DATE BETWEEN '2010-07-09' AND '2013-10-29';
SELECT immunizations.CODE, immunizations.DATE  FROM immunizations  JOIN patients ON immunizations.PATIENT = patients.patient  WHERE patients.first = 'Jacquelyn' AND patients.last = 'Shanahan' AND immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free';
SELECT      EXTRACT(YEAR FROM medications.STOP) - EXTRACT(YEAR FROM medications.START) AS duration_years,     EXTRACT(MONTH FROM medications.STOP) - EXTRACT(MONTH FROM medications.START) AS duration_months,     EXTRACT(DAY FROM medications.STOP) - EXTRACT(DAY FROM medications.START) AS duration_days FROM      medications JOIN      patients ON medications.PATIENT = patients.patient WHERE      patients.first = 'Berry' AND      patients.last = 'Keebler' AND      medications.DESCRIPTION = 'Acetaminophen 160 MG' AND      medications.REASONDESCRIPTION = 'Acute bronchitis (disorder)';
SELECT COUNT(*)  FROM medications  WHERE medications.DESCRIPTION = 'Nitrofurantoin 5 MG/ML [Furadantin]'  AND medications.REASONDESCRIPTION = 'Cystitis'  AND substr(medications.START, 1, 4) = '2010'  AND substr(medications.STOP, 1, 4) = '2010'  AND patients.marital = 'Single';
SELECT encounters.REASONDESCRIPTION  FROM encounters  WHERE encounters.PATIENT = (SELECT patient FROM patients WHERE first = 'Lavelle' AND last = 'Vandervort')  AND encounters.DATE = '2013-11-20';
SELECT COUNT(*)  FROM encounters  JOIN patients ON encounters.PATIENT = patients.patient  WHERE encounters.DATE BETWEEN '2011-09-01' AND '2012-08-29'  AND patients.ethnicity = 'german'  AND encounters.DESCRIPTION = 'Outpatient Encounter';
SELECT patients.ssn, patients.address  FROM patients  JOIN encounters ON patients.patient = encounters.PATIENT  WHERE encounters.REASONDESCRIPTION = 'Viral sinusitis (disorder)' AND encounters.DATE = '2008-06-13';
SELECT      medications.REASONDESCRIPTION AS 'Reason',      medications.DESCRIPTION AS 'Drug Name',      STRFTIME('%j', medications.STOP) - STRFTIME('%j', medications.START) AS 'Duration (Days)' FROM      medications JOIN      encounters ON medications.ENCOUNTER = encounters.ID JOIN      patients ON encounters.PATIENT = patients.patient WHERE      encounters.ID = '23c293ec-dbae-4a22-896e-f12cf3c8bac3' AND      COALESCE(patients.deathdate, '9999-12-31') > CURRENT_DATE;
SELECT first, last  FROM patients  JOIN allergies ON patients.patient = allergies.PATIENT  WHERE allergies.DESCRIPTION = 'Shellfish allergy'  AND DIVIDE(SUBTRACT(JULIANDAY(patients.deathdate), JULIANDAY(patients.birthdate)), 365) < 12;
SELECT      MAX(medications.START) AS StartDate,      MIN(medications.STOP) AS StopDate  FROM      medications  WHERE      medications.patient = (SELECT patient FROM patients WHERE first = 'Major' AND last = 'D''Amore')      AND medications.DESCRIPTION = 'Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]'      ; SELECT      STOP - START AS Duration  FROM      (     SELECT          MAX(medications.START) AS StartDate,          MIN(medications.STOP) AS StopDate      FROM          medications      WHERE          medications.patient = (SELECT patient FROM patients WHERE first = 'Major' AND last = 'D''Amore')          AND medications.DESCRIPTION = 'Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]'     ) AS Dates ;
SELECT COUNT(DISTINCT medications.DESCRIPTION)  FROM medications  JOIN encounters ON medications.ENCOUNTER = encounters.ID  WHERE encounters.PATIENT = 'Major D''Amore' AND medications.STOP IS NULL AND encounters.DESCRIPTION = 'hospital visit';
SELECT      o.DESCRIPTION,     o.VALUE,     o.UNITS FROM      observations o JOIN      patients p ON o.PATIENT = p.patient WHERE      p.first = 'Bella' AND p.last = 'Rolfson';
SELECT first, last  FROM patients  JOIN observations ON patients.patient = observations.patient  WHERE observations.DESCRIPTION = 'Calcium' AND observations.VALUE < 8.6;
SELECT conditions.DESCRIPTION  FROM conditions  JOIN patients ON conditions.PATIENT = patients.patient  JOIN observations ON conditions.PATIENT = observations.PATIENT  WHERE observations.DESCRIPTION = 'Body Mass Index' AND observations.VALUE = (SELECT MIN(value) FROM observations WHERE DESCRIPTION = 'Body Mass Index')  GROUP BY conditions.DESCRIPTION  ORDER BY COUNT(conditions.DESCRIPTION) DESC  LIMIT 5;
SELECT COUNT(*)  FROM patients  JOIN encounters ON patients.patient = encounters.PATIENT  WHERE patients.gender = 'F'  AND encounters.REASONDESCRIPTION = 'Normal pregnancy'  AND EXISTS (     SELECT *      FROM immunizations      WHERE immunizations.PATIENT = encounters.PATIENT );
SELECT careplans.DESCRIPTION FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.first = 'Elly' AND patients.last = 'Koss' AND substr(careplans.START, 1, 4) = '1970' AND substr(careplans.STOP, 1, 4) = '1970';
SELECT      cp.DESCRIPTION AS 'Care Plan',     pr.DESCRIPTION AS 'Procedure',     md.DESCRIPTION AS 'Medication',     CONCAT(p.first, ' ', p.last) AS 'Patient Full Name' FROM      careplans cp JOIN      encounters e ON cp.ENCOUNTER = e.ID JOIN      patients p ON e.PATIENT = p.patient JOIN      procedures pr ON e.ID = pr.ENCOUNTER JOIN      medications md ON e.ID = md.ENCOUNTER WHERE      e.ID = '6f2e3935-b203-493e-a9c0-f23e847b9798';
SELECT      COUNT(*) AS number_of_male_patients,     COUNT(p.patient) AS number_of_female_patients FROM      patients p JOIN      conditions c ON p.patient = c.PATIENT WHERE      p.gender = 'M' AND c.DESCRIPTION = 'Hypertension';      UNION ALL  SELECT      COUNT(*) AS number_of_male_patients,     COUNT(p.patient) AS number_of_female_patients FROM      patients p JOIN      conditions c ON p.patient = c.PATIENT WHERE      p.gender = 'F' AND c.DESCRIPTION = 'Hypertension';
SELECT COUNT(*)  FROM patients  WHERE marital = 'S' AND gender = 'F'  AND encounters.REASONDESCRIPTION = 'normal pregnancy';
SELECT procedures.DESCRIPTION AS Procedure, medications.DESCRIPTION AS MedicinePrescribed FROM procedures JOIN encounters ON procedures.ID = encounters.ID JOIN medications ON procedures.PATIENT = medications.PATIENT WHERE encounters.REASONDESCRIPTION = 'Drug overdose';
SELECT      AVG(Obs.BodyMassIndex) AS AvgBMI FROM      (SELECT          observations.VALUE AS BodyMassIndex      FROM           observations      WHERE           observations.DESCRIPTION = 'Body Mass Index'          AND observations.VALUE >= 200) AS Obs
SELECT      (SUM(CASE WHEN DATEDIFF(t2.DATE, t1.birthdate) BETWEEN 20 AND 29 THEN t2.VALUE ELSE 0 END) / COUNT(CASE WHEN DATEDIFF(t2.DATE, t1.birthdate) BETWEEN 20 AND 29 THEN t2.PATIENT ELSE NULL END)) -      (SUM(CASE WHEN DATEDIFF(t2.DATE, t1.birthdate) BETWEEN 50 AND 59 THEN t2.VALUE ELSE 0 END) / COUNT(CASE WHEN DATEDIFF(t2.DATE, t1.birthdate) BETWEEN 50 AND 59 THEN t2.PATIENT ELSE NULL END)) AS glucose_diff FROM      patients t1     JOIN observations t2 ON t1.patient = t2.PATIENT;
SELECT      (SUM(CASE WHEN MAX(conditions.DESCRIPTION) THEN 1 ELSE 0 END) * 100.0 / COUNT(patients.patient)) as prevalence_percentage FROM      patients JOIN      encounters ON patients.ID = encounters.PATIENT JOIN      conditions ON encounters.ID = conditions.ENCOUNTER WHERE      SUBTRACT(conditions.START, patients.birthdate) >= 60;
SELECT encounters.REASONDESCRIPTION  FROM encounters  JOIN patients ON encounters.PATIENT = patients.patient  WHERE patients.first = 'Walter' AND patients.last = 'Bahringer' AND SUBSTR(encounters.DATE, 1, 7) = '2009-07';
SELECT      MIN(e.encounters.DATE) - p.birthdate AS age_at_admission FROM      patients p JOIN      encounters e ON p.patient = e.PATIENT WHERE      p.first = 'Stacy' AND p.last = 'Morar' AND e.REASONDESCRIPTION = 'Drug overdose';
SELECT m.DESCRIPTION  FROM medications m  JOIN encounters e ON m.ENCOUNTER = e.ID  WHERE m.REASONDESCRIPTION = 'Child attention deficit disorder'  GROUP BY m.DESCRIPTION  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT p.first, p.last  FROM patients p  JOIN encounters e ON p.patient = e.PATIENT  JOIN procedures pr ON e.ID = pr.ENCOUNTER  WHERE pr.DESCRIPTION = 'Transplant of lung (procedure)';
SELECT      COUNT(DISTINCT p.patient) AS average_patients FROM      patients p JOIN      procedures pr ON p.patient = pr.PATIENT WHERE      pr.DESCRIPTION = 'Combined chemotherapy and radiation therapy (procedure)';
SELECT      MIN(careplans.START) AS most_recent_start,     careplans.DESCRIPTION AS care_plan_details FROM      careplans JOIN      patients ON careplans.PATIENT = patients.patient WHERE      patients.first = 'Jacquelyn' AND patients.last = 'Shanahan';
SELECT      allergies.START,     allergies.STOP,     allergies.DESCRIPTION FROM      patients  JOIN      allergies ON patients.patient = allergies.PATIENT WHERE      patients.first = 'Isadora' AND      patients.last = 'Moen';
SELECT      MIN(e.Date) AS encounter_date,     p.birthday AS patient_birthday FROM      encounters e JOIN      patients p ON e.patient = p.patient WHERE      p.first = 'Laronda' AND p.last = 'Bernier' ORDER BY      encounter_date DESC LIMIT 1;
SELECT conditions.DESCRIPTION  FROM conditions  JOIN encounters ON conditions.ENCOUNTER = encounters.ID  WHERE substr(conditions.START, 1, 4) = '2017' AND conditions.PATIENT = (SELECT patient FROM patients WHERE first = 'Joye' AND last = 'Homenick');
SELECT MAX(i.DATE)  FROM immunizations i  JOIN patients p ON i.PATIENT = p.patient  WHERE p.first = 'Joye' AND p.last = 'Homenick'  AND i.DESCRIPTION = 'Influenza seasonal injectable preservative free';
SELECT      EXTRACT(YEAR FROM (medications.stop - medications.start)) AS years,     EXTRACT(MONTH FROM (medications.stop - medications.start)) AS months,     EXTRACT(DAY FROM (medications.stop - medications.start)) AS days FROM      medications JOIN      patients ON medications.patient = patients.patient WHERE      patients.first = 'Elly' AND      patients.last = 'Koss' AND      medications.DESCRIPTION = 'Acetaminophen 160 MG';
SELECT COUNT(DISTINCT p.patient)  FROM patients p  JOIN encounters e ON p.patient = e.PATIENT  WHERE e.code = 'second-degree burn' AND e.reasondescription = 'Second degree burn';
SELECT      (COUNT(CASE WHEN gender = 'F' AND encounters.DATE LIKE '2010%' AND encounters.REASONDESCRIPTION = 'Contact dermatitis' THEN 1 END)      * 1.0 / COUNT(CASE WHEN encounters.DATE LIKE '2010%' AND encounters.REASONDESCRIPTION = 'Contact dermatitis' THEN 1 END)) * 100 AS percentage_female FROM      encounters JOIN      patients ON encounters.PATIENT = patients.patient;
SELECT    COUNT(encounters.ID) AS total_encounters,   (COUNT(encounters.ID) FILTER (WHERE encounters.DESCRIPTION = 'Prenatal visit') / COUNT(encounters.ID)) * 100 AS prenatal_visit_percentage FROM    encounters JOIN    patients ON encounters.PATIENT = patients.patient WHERE    substr(encounters.DATE, 1, 4) BETWEEN '2010' AND '2017' AND    patients.first = 'Lorri' AND    patients.last = 'Simons';
SELECT medications.DESCRIPTION  FROM medications  JOIN patients ON medications.PATIENT = patients.patient  WHERE patients.first = 'Joe' AND patients.last = 'Homenick';
SELECT careplans.START  FROM patients  JOIN careplans ON patients.patient = careplans.PATIENT  WHERE patients.maiden = 'Adams';
SELECT p.first, p.last  FROM patients p JOIN careplans cp ON p.patient = cp.PATIENT WHERE p.gender = 'M' ORDER BY cp.START ASC LIMIT 1;
SELECT      (COUNT(CASE WHEN cp.ethnicity = 'hispanic' THEN cp.patient END) /       COUNT(cp.patient)) * 1.0 AS hispanic_percentage FROM      careplans cp WHERE      cp.stop LIKE '2011%'
SELECT careplans.REASONDESCRIPTION  FROM careplans  JOIN encounters ON careplans.ENCOUNTER = encounters.ID  JOIN patients ON encounters.PATIENT = patients.patient  WHERE patients.first = 'Angelo' AND patients.last = 'Buckridge';
SELECT careplans.DESCRIPTION  FROM careplans  JOIN patients ON careplans.PATIENT = patients.patient  WHERE patients.ethnicity = 'american';
SELECT DISTINCT c.ID  FROM encounters e  JOIN patients p ON e.PATIENT = p.patient  JOIN careplans c ON e.ID = c.ENCOUNTER  WHERE p.birthplace = 'Pembroke MA US';
SELECT careplans.START  FROM careplans  JOIN patients ON careplans.PATIENT = patients.patient  WHERE patients.deathdate IS NULL;
SELECT COUNT(*)  FROM patients  WHERE patients.race = 'white'  AND EXISTS (     SELECT 1      FROM careplans      WHERE careplans.patient = patients.patient      AND careplans.REASONCODE = '10509002' );
SELECT p.first, p.last  FROM patients p JOIN careplans cp ON p.patient = cp.PATIENT WHERE cp.DESCRIPTION = 'Diabetic diet';
SELECT cp.STOP  FROM careplans cp  JOIN patients p ON cp.PATIENT = p.patient  WHERE p.deathdate IS NOT NULL;
SELECT COUNT(*)  FROM patients  WHERE ethnicity = 'italian'  AND EXISTS (     SELECT 1      FROM careplans      WHERE careplans.patient = patients.patient      AND careplans.code = 304510005 );
SELECT      (COUNT(CASE WHEN p.gender = 'F' AND cp.START LIKE '2010%' THEN p.patient ELSE NULL END)      / COUNT(CASE WHEN cp.START LIKE '2010%' THEN cp.patient ELSE NULL END)) * 100 AS percentage FROM      patients p JOIN      careplans cp ON p.patient = cp.PATIENT;
SELECT COUNT(*)  FROM patients  JOIN careplans ON patients.patient = careplans.PATIENT  WHERE patients.race = 'black' AND SUBSTR(careplans.STOP, 1, 4) = '2017';
SELECT COUNT(*)  FROM patients  WHERE gender = 'M' AND EXISTS (   SELECT *    FROM conditions    WHERE conditions.PATIENT = patients.patient AND conditions.DESCRIPTION = 'Prediabetes' );
SELECT p.first, p.last  FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE a.DESCRIPTION = 'Allergy to nut';
SELECT      c.start, c.stop, c.code, c.description FROM      conditions c JOIN      patients p ON c.patient = p.patient WHERE      p.first = 'Wilmer' AND p.last = 'Koepp';
SELECT      gender,     COUNT(*) as affected_count FROM     conditions JOIN     patients ON conditions.PATIENT = patients.patient WHERE     conditions.DESCRIPTION = 'Viral sinusitis (disorder)' GROUP BY     gender ORDER BY     affected_count DESC LIMIT 1;
SELECT first, last  FROM patients  JOIN medications ON patients.patient = medications.PATIENT  WHERE medications.DESCRIPTION = 'Penicillin V Potassium 250 MG' AND SUBSTR(medications.START, 1, 4) >= '1948';
SELECT COUNT(*)  FROM patients  JOIN conditions ON patients.patient = conditions.PATIENT  WHERE patients.race = 'white'  AND SUBSTRING(patients.birthdate, 1, 4) = '1935'  AND conditions.DESCRIPTION = 'Stroke';
SELECT DISTINCT c.DESCRIPTION  FROM conditions c  JOIN immunizations i ON c.START <= i.DATE AND c.STOP >= i.DATE  WHERE i.DESCRIPTION = 'IPV';
SELECT patients.patient FROM patients JOIN all_prevalences ON patients.patient = all_prevalences.ITEM WHERE all_prevalences.OCCURRENCES = (SELECT MAX(OCCURRENCES) FROM all_prevalences)
SELECT first, last  FROM patients  JOIN conditions ON patients.patient = conditions.PATIENT  WHERE conditions.DESCRIPTION = 'Cystitis';
SELECT COUNT(*)  FROM patients  WHERE patients.gender = 'M'  AND immunizations.DESCRIPTION = 'HPV quadrivalent';
SELECT careplans.START  FROM patients  JOIN careplans ON patients.patient = careplans.PATIENT  WHERE patients.first = 'Walter' AND patients.last = 'Bahringer';
SELECT cp.ID, cp.START, cp.STOP, cp.DESCRIPTION  FROM careplans AS cp  JOIN patients AS p ON cp.PATIENT = p.patient  WHERE p.first = 'Major' AND p.last = 'D''Amore';
SELECT      (COUNT(CASE WHEN p.gender = 'M' AND c.DESCRIPTION = 'Viral sinusitis (disorder)' THEN p.patient END) * 100 / COUNT(p.patient)) as percentage FROM      patients p JOIN      conditions c ON p.patient = c.PATIENT;
SELECT      (COUNT(CASE WHEN p.gender = 'F' THEN p.patient END) * 100.0 / COUNT(m.patient)) AS female_percentage FROM      patients p  JOIN      medications m ON p.patient = m.PATIENT  WHERE      m.DESCRIPTION = 'Penicillin V Potassium 250 MG';
SELECT      AVG(Obs.VALUE) AS average_body_height FROM      observations Obs JOIN      patients Pat ON Obs.PATIENT = Pat.patient WHERE      Pat.race = 'white' AND     Obs.DESCRIPTION = 'Body Height';
SELECT cp.DESCRIPTION  FROM careplans cp  JOIN patients p ON cp.PATIENT = p.patient  WHERE p.address = '179 Sydni Roads Taunton MA 02780 US';
SELECT T3.DESCRIPTION  FROM patients AS T1  JOIN allergies AS T3 ON T1.patient = T3.PATIENT  WHERE T1.first = 'Dirk' AND T1.last = 'Languish' AND T1.birthplace = 'Dominican';
SELECT COUNT(DISTINCT pa.patient)  FROM patients pa  JOIN allergies al ON pa.patient = al.PATIENT  JOIN conditions c ON pa.patient = c.PATIENT  WHERE al.DESCRIPTION = 'Allergy to peanuts' AND c.DESCRIPTION = 'Asthma';
SELECT p.patient FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE p.age = 44 AND c.DESCRIPTION = 'drug overdose';
SELECT p.ssn  FROM patients p JOIN observations o ON p.patient = o.PATIENT  WHERE o.DESCRIPTION = 'Systolic Blood Pressure' AND o.VALUE = (SELECT MAX(value) FROM observations WHERE DESCRIPTION = 'Systolic Blood Pressure');
SELECT cp.DESCRIPTION  FROM all_prevalences ap  JOIN careplans cp ON ap.ITEM = cp.CODE  WHERE ap.PREVALENCE_PERCENTAGE = (SELECT MAX(PREVALENCE_PERCENTAGE) FROM all_prevalences);
SELECT careplans.DESCRIPTION  FROM careplans  JOIN patients ON careplans.PATIENT = patients.patient  WHERE patients.ssn = '999-15-3685';
SELECT AVG(JULIANDAY(CASE WHEN `deathdate` IS NULL THEN CURRENT_DATE ELSE `deathdate`) - JULIANDAY(`birthdate`)) AS average_age FROM `patients` JOIN `conditions` ON `patients.ID` = `conditions.PATIENT` WHERE `gender` = 'M' AND `conditions.DESCRIPTION` = 'Hypertension'
SELECT p.first, p.last  FROM patients p JOIN encounters e ON p.patient = e.PATIENT JOIN conditions c ON e.ID = c.ENCOUNTER WHERE c.DESCRIPTION = 'Streptococcal sore throat (disorder)' AND c.REASONDESCRIPTION = 'Streptococcal sore throat (disorder)';
SELECT patients.* FROM patients JOIN observations ON patients.patient = observations.PATIENT WHERE observations.DESCRIPTION = 'Body Weight' AND observations.VALUE = 61.97 AND observations.UNITS = 'kg';
SELECT DISTINCT p.birthdate  FROM patients p  JOIN medications m ON p.patient = m.PATIENT  WHERE p.gender = 'M' AND m.DESCRIPTION = 'Penicillin V Potassium 250 MG'  LIMIT 5;
SELECT p.first, p.last  FROM patients p JOIN encounters e ON p.patient = e.PATIENT JOIN all_prevalences ap ON ap.ITEM = e.CODE AND ap.POPULATION_TYPE = 'irish' WHERE p.ethnicity = 'irish' AND ap.OCCURRENCES > (AVG(ap.OCCURRENCES * 0.96));
SELECT      (SELECT COUNT(*) FROM patients WHERE marital = 'M') -      (SELECT COUNT(*) FROM patients WHERE marital = 'S' AND conditions.DESCRIPTION = 'Diabetes') AS difference;
SELECT country, COUNT(*) AS num_customers FROM customers GROUP BY country;
SELECT      p.productVendor,     SUM(od.quantityOrdered * (pd.MSRP - pd.buyPrice)) AS estimated_earnings FROM      orders o JOIN      orderdetails od ON o.orderNumber = od.orderNumber JOIN      products pd ON od.productCode = pd.productCode JOIN      productlines pl ON pd.productLine = pl.productLine JOIN      employees e ON o.salesRepEmployeeNumber = e.employeeNumber JOIN      customers c ON e.reportsTo = c.customerNumber JOIN      payments p ON c.orderNumber = p.orderNumber GROUP BY      p.productVendor ORDER BY      estimated_earnings DESC LIMIT 1;
SELECT      c.salesRepEmployeeNumber  FROM      customers AS c JOIN      payments AS p ON c.customerNumber = p.customerNumber WHERE      YEAR(p.paymentDate) = 2004 GROUP BY      c.customerNumber ORDER BY      SUM(p.amount) DESC LIMIT 1 JOIN      employees AS e ON c.salesRepEmployeeNumber = e.employeeNumber;
SELECT SUM(od.quantityOrdered * od.priceEach) AS TotalPrice FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN customers c ON o.customerNumber = c.customerNumber WHERE c.customerName = 'Rovelli Gifts Distributors Ltd.'   AND o.shippedDate BETWEEN '2003-01-01' AND '2003-12-31';
SELECT COUNT(*)  FROM employees  WHERE officeCode IN (SELECT officeCode FROM offices WHERE city = 'Sydney')  AND jobTitle LIKE '%sales agent%' OR jobTitle LIKE '%sales representative%';
SELECT e.employeeNumber  FROM employees e  JOIN offices o ON e.officeCode = o.officeCode  WHERE o.city = 'New York' AND o.country = 'USA' AND e.reportsTo = (SELECT employeeNumber FROM employees WHERE firstName = 'Anthony' AND lastName = 'Bow' AND employeeNumber = 1143);
SELECT      AVG(amount) AS average_annual_payments,     MAX(amount) AS highest_annual_payment,     MIN(amount) AS lowest_annual_payment FROM      payments WHERE      paymentDate BETWEEN '2003-01-01' AND '2005-12-31';
SELECT      c.country,      CONCAT(c.addressLine1, IFNULL(c.addressLine2, ''), ', ', c.city, ', ', c.state, ', ', c.postalCode, ', ', c.country) as full_address FROM      customers c JOIN      payments p ON c.customerNumber = p.customerNumber WHERE      p.amount = (SELECT MAX(amount) FROM payments) GROUP BY      c.customerNumber ORDER BY      p.amount DESC LIMIT      5;
SELECT COUNT(*)  FROM payments  WHERE customerName = 'Euro+ Shopping Channel' AND YEAR(paymentDate) = 2004;
SELECT p.productName  FROM products p  JOIN orderdetails od ON p.productCode = od.productCode  JOIN orders o ON od.orderNumber = o.orderNumber  JOIN productlines pl ON p.productLine = pl.productLine  WHERE pl.productLine = 'Classic Cars' AND p.productScale = '1:18'  GROUP BY p.productName  ORDER BY SUM(od.quantityOrdered) DESC  LIMIT 1;
SELECT COUNT(*) AS num_customers_credit_limit,        customerName AS customer_with_highest_payment_2004 FROM customers WHERE creditLimit <= 100000 JOIN (     SELECT customerNumber, SUM(amount) AS total_payment     FROM payments     WHERE YEAR(paymentDate) = 2004     GROUP BY customerNumber     ORDER BY total_payment DESC     LIMIT 1 ) AS top_customer ON customers.customerNumber = top_customer.customerNumber;
SELECT      c.customerName,      COALESCE(cl.contactLastName, c.customerName) AS contactPerson,     SUM(p.amount) AS totalPayments FROM      customers c JOIN      employees e ON c.salesRepEmployeeNumber = e.employeeNumber JOIN      offices o ON e.officeCode = o.officeCode JOIN      employees cl ON e.reportsTo = cl.employeeNumber JOIN      payments p ON c.customerNumber = p.customerNumber WHERE      o.city = 'Tokyo' AND     cl.jobTitle = 'Vice President of Sales' AND     e.employeeNumber = 1056 GROUP BY      c.customerNumber ORDER BY      totalPayments DESC LIMIT 1;
SELECT      p.productName,     (p.MSRP - po.buyPrice) AS expectedProfit,     (po.quantityOrdered * po.priceEach) AS totalPrice FROM      products p JOIN      orderdetails od ON p.productCode = od.productCode JOIN      products po ON p.productCode = po.productCode ORDER BY      expectedProfit DESC,      totalPrice DESC  LIMIT 2;
SELECT COUNT(DISTINCT orderNumber)  FROM orders  WHERE status = 'Cancelled' AND (quantityOrdered * priceEach) > 4000;
SELECT COUNT(DISTINCT orderNumber)  FROM orderdetails  WHERE year(orderDate) = 2003 AND quantityOrdered < 30;
SELECT SUM(quantityOrdered * priceEach) AS TotalValue FROM orderdetails JOIN orders ON orderdetails.orderNumber = orders.orderNumber WHERE orders.status = 'Cancelled';
SELECT      SUM(od.quantityOrdered * p.priceEach) AS TotalValue FROM      orders o JOIN      orderdetails od ON o.orderNumber = od.orderNumber JOIN      products p ON od.productCode = p.productCode WHERE      p.productLine = 'Motorcycles';
SELECT COUNT(*)  FROM orderdetails  JOIN products ON orderdetails.productCode = products.productCode  WHERE products.productLine = 'Planes';
SELECT COUNT(*)  FROM orders  JOIN orderdetails ON orders.orderNumber = orderdetails.orderNumber  WHERE (products.MSRP - products.buyPrice) > 100;
SELECT      AVG(DIVIDE(SUM(quantityOrdered * priceEach), COUNT( DISTINCT orderNumber))) AS average_total_price  FROM      orderdetails o  JOIN      products p ON o.productCode = p.productCode  JOIN      employees e ON p.productVendor = e.employeeNumber  WHERE      e.lastName = 'Exoto Designs' AND      EXTRACT(YEAR FROM o.orderDate) = 2005;
SELECT COUNT(*)  FROM employees  WHERE officeCode = 1 AND jobTitle = 'Sales Rep';
SELECT DISTINCT customerName  FROM customers  JOIN payments ON customers.customerNumber = payments.customerNumber  WHERE amount > 50000;
SELECT SUM(amount)  FROM payments  WHERE customerNumber IN (     SELECT customerNumber      FROM customers      WHERE country = 'USA' );
SELECT SUM(amount)  FROM payments  WHERE creditLimit = 0 AND YEAR(paymentDate) = 2003;
SELECT      c.customerName,      c.phone  FROM      customers c  JOIN      orders o ON c.customerNumber = o.customerNumber  WHERE      o.status = 'Cancelled';
SELECT COUNT(DISTINCT c.customerNumber) FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE c.country = 'France' AND o.status = 'Cancelled' GROUP BY c.customerNumber HAVING COUNT(DISTINCT o.orderNumber) = 2;
SELECT      AVG(DIVIDE(MULTIPLY(od.quantityOrdered, od.priceEach), COUNT(od.orderNumber))) AS average_total_price FROM      orders o JOIN      customers c ON o.customerNumber = c.customerNumber JOIN      offices o_off ON o.officeCode = o_off.officeCode WHERE      c.country = 'Germany' AND o.status = 'Shipped';
SELECT firstName + lastName AS fullName  FROM employees  JOIN offices ON employees.officeCode = offices.officeCode  WHERE offices.city = 'Tokyo';
SELECT e.email, CONCAT(e.firstName, ' ', e.lastName) AS fullName FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE o.city = 'Tokyo' AND e.jobTitle = 'Sales Rep';
SELECT e.email  FROM employees e  JOIN offices o ON e.officeCode = o.officeCode  WHERE e.employeeNumber = 1002 AND o.city = 'San Francisco' AND e.reportsTo = (SELECT employeeNumber FROM employees WHERE firstName = 'Diane' AND lastName = 'Murphy');
SELECT e.email, o.officeCode  FROM employees e  JOIN offices o ON e.officeCode = o.officeCode  WHERE o.country = 'USA' AND o.state = 'MA';
SELECT e.email FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE e.jobTitle = 'Sales Manager' AND o.city = 'Sydney';
SELECT e.email, o.country  FROM employees e  JOIN offices o ON e.officeCode = o.officeCode  WHERE o.country = 'Australia' AND e.creditLimit < 200000;
SELECT e.email FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber JOIN offices o ON e.officeCode = o.officeCode WHERE o.country = 'UK' AND c.creditLimit = (SELECT MIN(creditLimit) FROM customers WHERE country = 'UK') LIMIT 10;
SELECT COUNT(*)  FROM customers  WHERE country = 'Australia' AND creditLimit < 220000;
SELECT customerNumber FROM payments GROUP BY customerNumber ORDER BY SUM(amount) DESC LIMIT 3;
SELECT e.email, o.officeCode  FROM employees e  JOIN offices o ON e.officeCode = o.officeCode  WHERE o.country = 'USA' AND o.state = 'CA';
SELECT e.firstName, e.lastName  FROM employees e  JOIN offices o ON e.officeCode = o.officeCode  WHERE o.city = 'Boston';
SELECT      e.email FROM      employees e JOIN      customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE      c.country = 'UK' GROUP BY      e.email ORDER BY      MAX(c.creditLimit) DESC LIMIT 3;
SELECT COUNT(*)  FROM customers  WHERE country = 'Norway' AND creditLimit < 220000;
SELECT firstName + ' ' + lastName AS full_name, email  FROM employees  JOIN offices ON employees.officeCode = offices.officeCode  WHERE offices.city = 'Paris';
SELECT productCode  FROM products  WHERE productLine = 'motorcycle'  ORDER BY quantityInStock DESC  LIMIT 5;
SELECT COUNT(*)  FROM customers  WHERE country = 'Germany' AND creditLimit = 0;
SELECT COUNT(DISTINCT c.customerNumber)  FROM customers c JOIN payments p ON c.customerNumber = p.customerNumber WHERE p.paymentDate BETWEEN '2003-01-01' AND '2004-12-31' GROUP BY c.customerNumber HAVING COUNT(p.checkNumber) > 3;
SELECT      AVG(SUBTRACT(orderdetails.priceEach, products.buyPrice)) AS average_actual_profit  FROM      products  JOIN      orderdetails ON products.productCode = orderdetails.productCode  WHERE      products.productName = '1937 Lincoln Berline';
SELECT p.productName  FROM products p  JOIN orderdetails od ON p.productCode = od.productCode  JOIN orders o ON od.orderNumber = o.orderNumber  JOIN customers c ON o.customerNumber = c.customerNumber  JOIN productlines pl ON p.productLine = pl.productLine  WHERE pl.productLine = 'motorcycle' AND p.productScale = '1:10' AND c.country = 'USA'  GROUP BY p.productName  ORDER BY SUM(od.quantityOrdered) DESC  LIMIT 1;
SELECT payment.checkNumber  FROM payments  JOIN customers ON payments.customerNumber = customers.customerNumber  WHERE      customers.customerName = 'Mini Gifts Distributors Ltd.' AND      paymentDate BETWEEN '2003-08-01' AND '2004-08-30';
SELECT      MAX(t.total_price) - AVG(Products.priceEach) AS price_exceeds_average FROM     (SELECT          orderdetails.orderNumber,         SUM(orderdetails.quantityOrdered * orderdetails.priceEach) AS total_price      FROM          orderdetails      JOIN          products ON orderdetails.productCode = products.productCode      WHERE          products.productLine = 'planes'      GROUP BY          orderdetails.orderNumber) t
SELECT SUM(od.quantityOrdered * od.priceEach) AS TotalValue FROM orderdetails od JOIN orders o ON od.orderNumber = o.orderNumber JOIN products p ON od.productCode = p.productCode WHERE p.productLine = 'Vintage Cars' AND o.status = 'Shipped' AND YEAR(o.orderDate) BETWEEN 2003 AND 2004;
SELECT      e.firstName,      e.lastName AS Employee FullName,     r.firstName AS Supervisor FirstName,     r.lastName AS Supervisor LastName FROM      customers c JOIN      payments p ON c.customerNumber = p.customerNumber JOIN      employees e ON c.salesRepEmployeeNumber = e.employeeNumber JOIN      employees r ON e.reportsTo = r.employeeNumber WHERE      p.amount = (SELECT MAX(amount) FROM payments) ORDER BY      p.paymentDate DESC;
SELECT p.productName, od.quantityOrdered * o.priceEach AS totalAmount FROM orders o JOIN employees e ON o.salesRepEmployeeNumber = e.employeeNumber JOIN offices OF ON e.officeCode = OF.officeCode JOIN customers c ON o.customerNumber = c.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE OF.city = 'Boston' ORDER BY totalAmount DESC LIMIT 1;
SELECT SUM(TD.priceEach - TPR.buyPrice) AS TotalProfit FROM orders AS O  JOIN orderdetails AS TD ON O.orderNumber = TD.orderNumber JOIN products AS P ON TD.productCode = P.productCode JOIN productlines AS PL ON P.productLine = PL.productLine JOIN employees AS E ON O.salesRepEmployeeNumber = E.employeeNumber JOIN customers AS C ON O.customerNumber = C.customerNumber JOIN offices AS OF ON E.officeCode = OF.officeCode WHERE C.country = 'USA' AND O.orderDate BETWEEN '2003-01-06' AND '2005-05-09';
SELECT o.city, o.addressLine1, o.addressLine2, o.phone  FROM offices o  JOIN employees e ON o.officeCode = e.officeCode  JOIN orders od ON e.employeeNumber = od.salesRepEmployeeNumber  WHERE od.orderDate BETWEEN '2005-01-01' AND '2005-12-31'  GROUP BY o.officeCode  ORDER BY SUM(od.quantityOrdered * od.priceEach) DESC  LIMIT 1;
SELECT offices.phone FROM customers JOIN offices ON customers.addressLine1 = offices.addressLine1 WHERE customers.contactLastName LIKE 'M%' AND customers.country <> 'Germany';
SELECT      AVG(p.amount) AS AveragePaymentAmount FROM      payments p WHERE      p.paymentDate >= '2004-01-01' AND p.paymentDate < '2004-07-01';
SELECT      (COUNT(CASE WHEN T4.customerNumber = 186 THEN T4.orderNumber ELSE NULL END) * 100.0 / COUNT(T4.orderNumber)) AS order_percentage_2005_customer_186 FROM      orders T4 WHERE      T4.shippedDate >= '2005-01-01'     AND T4.shippedDate <= '2005-12-31'     AND T4.status = 'shipped';
SELECT COUNT(*)  FROM customers  WHERE creditLimit > 115000 AND orders.status = 'cancelled';
SELECT P.paymentDate  FROM payments AS P  JOIN orders AS O ON P.customerNumber = O.customerNumber  JOIN employees AS E ON O.salesRepEmployeeNumber = E.employeeNumber  WHERE E.firstName = 'Barry' AND E.lastName = 'Jones' AND P.customerNumber IN (     SELECT customerNumber      FROM customers      WHERE creditLimit = (SELECT MIN(creditLimit) FROM customers) );
SELECT firstName, lastName  FROM employees  WHERE employeeNumber IN (     SELECT customerSalesRep      FROM (         SELECT customerNumber, MAX(CASE WHEN country = 'France' THEN reportsTo ELSE NULL END) AS customerSalesRep          FROM employees          INNER JOIN customers          ON employees.employeeNumber = customers.salesRepEmployeeNumber          GROUP BY customerNumber     ) subquery );
SELECT      c.addressLine1 + COALESCE(c.addressLine2, '') AS fullAddress  FROM      customers c JOIN      orders o ON c.customerNumber = o.customerNumber JOIN      orderdetails od ON o.orderNumber = od.orderNumber JOIN      products p ON od.productCode = p.productCode WHERE      p.productLine = 'DHL' AND      o.shippedDate = '2005-04-04';
SELECT o.addressLine1, o.addressLine2  FROM offices o  JOIN employees e ON o.officeCode = e.officeCode  JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber  WHERE c.city = 'New York';
SELECT o.addressLine1 + coalesce(o.addressLine2, '') AS FullAddress FROM offices o JOIN employees e ON o.officeCode = e.officeCode WHERE COUNT(*) OVER (PARTITION BY o.officeCode) = 4 AND e.jobTitle = 'Sales Representative';
SELECT SUM(T2.MSRP - T2.buyPrice) AS Profit FROM products AS T2 JOIN orderdetails AS T3 ON T2.productCode = T3.productCode JOIN orders AS T4 ON T4.orderNumber = T3.orderNumber JOIN customers AS T5 ON T5.customerNumber = T4.customerNumber JOIN productlines AS T6 ON T6.productLine = T2.productLine WHERE T6.textDescription = 'The perfect holiday or anniversary gift for executives' AND T2.productVendor = 'Carousel DieCast Legends';
SELECT      c.customerName,     AVG(p.amount) AS avg_payment FROM      customers c JOIN      payments p ON c.customerNumber = p.customerNumber JOIN      offices o ON c.salesRepEmployeeNumber = o.employeeNumber WHERE      o.city = 'Boston' GROUP BY      c.customerName;
SELECT SUM(quantityOrdered) AS TotalQuantity, AVG(priceEach) AS AveragePrice FROM orderdetails  JOIN products ON orderdetails.productCode = products.productCode WHERE products.productName = '18th Century Vintage Horse Carriage';
SELECT COUNT(DISTINCT productCode)  FROM orderdetails  WHERE orderNumber = '10252';
SELECT e.firstName, e.lastName  FROM employees e  JOIN orders o ON e.employeeNumber = o.salesRepEmployeeNumber  JOIN customers c ON o.customerNumber = c.customerNumber  WHERE c.addressLine1 = '25 Maiden Lane' AND c.addressLine2 = 'Floor No. 4';
SELECT offices.addressLine1, offices.addressLine2  FROM employees JOIN offices ON employees.officeCode = offices.officeCode WHERE employees.lastName = 'Tseng' AND employees.firstName = 'Foon Yue';
SELECT      o1.orderDate  FROM      orders o1  JOIN      orders o2 ON o1.TotalPrice < o2.TotalPrice  WHERE      (o1.orderDate = '2005-04-08' OR o1.orderDate = '2005-04-10')  AND      (o2.orderDate = '2005-04-08' OR o2.orderDate = '2005-04-10');
SELECT SUM(T1.quantityOrdered * (T2.MSRP - T2.buyPrice)) AS TotalExpectedProfit FROM orderdetails AS T1 JOIN products AS T2 ON T1.productCode = T2.productCode WHERE (     SELECT MAX(T2.MSRP - T2.buyPrice)     FROM products AS T2 ) = T2.MSRP - T2.buyPrice;
SELECT amount  FROM payments  WHERE customerNumber IN (     SELECT customerNumber      FROM customers      WHERE customerName = 'Petit Auto' )  AND paymentDate = '2004-08-09';
SELECT `contactName`  FROM `customers`  WHERE `checkNumber` = 'NR157385';
SELECT `contactFirstName`, `contactLastName` FROM `customers` JOIN `orders` ON `customers.customerNumber` = `orders.customerNumber` WHERE `orders.orderNumber` = '10160';
SELECT offices.addressLine1, offices.addressLine2  FROM offices JOIN employees ON offices.officeCode = employees.officeCode JOIN customers ON employees.employeeNumber = customers.salesRepEmployeeNumber JOIN orders ON customers.customerNumber = orders.customerNumber WHERE orders.orderNumber = 10383;
SELECT T3.productLine  FROM products AS T1  JOIN orderdetails AS T2 ON T1.productCode = T2.productCode  JOIN productlines AS T3 ON T3.productLine = T2.productLine  WHERE T1.productCode = 'S18_2949';
SELECT email  FROM employees  WHERE lastName = 'SalesRep' AND reportsTo IN (     SELECT employeeNumber      FROM customers      WHERE customerName = 'Dragon Souveniers, Ltd.' );
SELECT COUNT(*)  FROM customers  JOIN employees ON customers.salesRepEmployeeNumber = employees.employeeNumber  WHERE employees.firstName = 'Gerard' AND employees.lastName = 'Hernandez' AND customers.country = 'France';
SELECT p.productName  FROM orders o  JOIN orderdetails od ON o.orderNumber = od.orderNumber  JOIN products p ON od.productCode = p.productCode  WHERE o.customerNumber = 114  ORDER BY o.orderDate DESC  LIMIT 1;
SELECT      (products.MSRP - orderdetails.priceEach) / products.MSRP AS discount_percentage FROM      orders  JOIN      orderdetails ON orders.orderNumber = orderdetails.orderNumber   JOIN      products ON orderdetails.productCode = products.productCode WHERE      orders.orderNumber = 10108 AND      products.productCode = 'S18_3482';
SELECT e1.firstName, e1.lastName  FROM employees e1 JOIN employees e2 ON e1.reportsTo = e2.employeeNumber WHERE e1.firstName = 'Steve' AND e1.lastName = 'Patterson';
SELECT firstName, lastName  FROM employees  WHERE jobTitle = 'President';
SELECT e.firstName, e.lastName  FROM employees e  JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber  WHERE c.customerName = 'Muscle Machine Inc' AND e.jobTitle = 'Sales Rep';
SELECT e.email  FROM customers c  JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber  WHERE c.customerName = 'Muscle Machine Inc'
SELECT T1.customerName  FROM customers AS T1  JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber  WHERE T2.firstName = 'Steve' AND T2.lastName = 'Patterson';
SELECT COUNT(DISTINCT c.customerNumber) FROM customers c JOIN employees e1 ON c.salesRepEmployeeNumber = e1.employeeNumber JOIN employees e2 ON e2.employeeNumber = e1.reportsTo WHERE e2.firstName = 'William' AND e2.lastName = 'Patterson';
SELECT c.phone  FROM customers c  JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber  WHERE e.firstName = 'Leslie' AND e.lastName = 'Jennings'  ORDER BY c.creditLimit DESC  LIMIT 3;
SELECT COUNT(*)  FROM employees  WHERE jobTitle = 'Sales Rep' AND country = 'USA';
SELECT offices.addressLine1, offices.addressLine2  FROM employees  JOIN offices ON employees.officeCode = offices.officeCode  WHERE employees.jobTitle = 'President';
SELECT t1.postalCode  FROM offices AS t1  JOIN employees AS t2 ON t1.officeCode = t2.officeCode  WHERE t2.jobTitle = 'VP Sales';
SELECT SUM(quantityOrdered * priceEach)  FROM orderdetails  JOIN orders ON orderdetails.orderNumber = orders.orderNumber  WHERE orders.customerName = 'Cruz & Sons Co.' AND orders.orderDate = '2003-03-03';
SELECT p.productName  FROM products p  JOIN orderdetails od ON p.productCode = od.productCode  JOIN orders o ON od.orderNumber = o.orderNumber  JOIN customers c ON o.customerNumber = c.customerNumber  WHERE c.customerName = 'Cruz & Sons Co.' AND o.orderDate = '2003-03-03';
SELECT p.productName  FROM products p  JOIN orderdetails od ON p.productCode = od.productCode  JOIN orders o ON o.orderNumber = od.orderNumber  JOIN customers c ON c.customerNumber = o.customerNumber  WHERE c.customerName = 'Cruz & Sons Co.'  GROUP BY p.productCode  ORDER BY SUM(od.quantityOrdered) DESC  LIMIT 1;
SELECT shippedDate  FROM orders  JOIN customers ON orders.customerNumber = customers.customerNumber  WHERE customers.customerName = 'Cruz & Sons Co.' AND orders.orderDate = '2003-03-03';
SELECT SUM(p.amount) AS total_amount  FROM orders o  JOIN customers c ON o.customerNumber = c.customerNumber  JOIN products p ON o.orderNumber = p.productCode  WHERE c.contactFirstName LIKE '1957 Chevy Pickup'  AND o.orderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE;
SELECT      productName  FROM      products  JOIN      productlines ON products.productLine = productlines.productLine  WHERE      productlines.textDescription = 'Classic Cars'  ORDER BY      (MSRP - buyPrice) DESC  LIMIT 1;
SELECT DISTINCT c.customerName  FROM customers c  JOIN orders o ON c.customerNumber = o.customerNumber  WHERE o.status = 'In Process';
SELECT      COUNT(CASE          WHEN DATEDIFF(shippedDate, requiredDate) > 3 THEN orderNumber          ELSE NULL      END) AS shipped_at_least_3_days_early_count,     COUNT(orderNumber) AS total_orders,     CAST(COUNT(CASE          WHEN DATEDIFF(shippedDate, requiredDate) > 3 THEN orderNumber          ELSE NULL      END) AS REAL) / COUNT(orderNumber) * 100 AS percentage FROM orders WHERE status = 'Shipped'
SELECT      c.customerName  FROM      customers c JOIN      payments p ON c.customerNumber = p.customerNumber WHERE      YEAR(p.paymentDate) = 2005 AND p.amount = (         SELECT MAX(amount)         FROM payments          WHERE YEAR(paymentDate) = 2005     );
SELECT      productName,     (MSRP - buyPrice) AS expectedProfitMarginPerPiece FROM      products p JOIN      orderdetails od ON p.productCode = od.productCode GROUP BY      productName ORDER BY      SUM(od.quantityOrdered) DESC LIMIT 1;
SELECT T3.customerName FROM orders AS T1 JOIN orderdetails AS T2 ON T1.orderNumber = T2.orderNumber JOIN customers AS T3 ON T1.customerNumber = T3.customerNumber WHERE T2.quantityOrdered * T2.priceEach = (     SELECT MAX(totalPrice)     FROM (         SELECT SUM(T2.quantityOrdered * T2.priceEach) AS totalPrice         FROM orderdetails AS T2         GROUP BY T2.orderNumber     ) AS subquery );
SELECT c.customerName  FROM customers c  JOIN orders o ON c.customerNumber = o.customerNumber  WHERE o.status = 'Disputed';
SELECT      (COUNT(CASE WHEN offices.city = 'Paris' THEN employees.employeeNumber END)       / CAST(COUNT(employees.employeeNumber) AS REAL)) * 100 AS percentage FROM      employees JOIN      offices ON employees.officeCode = offices.officeCode;
SELECT      e.firstName,      e.lastName,      o.city,      o.addressLine1  FROM      employees e  JOIN      offices o ON e.officeCode = o.officeCode  WHERE      e.jobTitle = 'Sales Manager' AND      o.territory = 'EMEA';
SELECT e.firstName, e.lastName, o.reportsTo FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE o.country = 'Japan';
SELECT c.customerName  FROM customers AS c  JOIN orders AS o ON c.customerNumber = o.customerNumber  JOIN orderdetails AS od ON o.orderNumber = od.orderNumber  JOIN products AS p ON od.productCode = p.productCode  WHERE p.productName = '1939 Chevrolet Deluxe Coupe'  GROUP BY c.customerNumber  ORDER BY MAX(od.priceEach) DESC  LIMIT 1;
SELECT      (SUM(amount)       WHERE customerName = 'Atelier graphique'       AND year(paymentDate) = 2004) * 100.0 /      (SUM(amount)       WHERE year(paymentDate) = 2004) AS Percentage FROM payments;
SELECT SUM(quantityOrdered * (priceEach - buyPrice)) AS ActualProfit FROM orderdetails WHERE orderNumber = 10100;
SELECT SUM(amount)  FROM payments  WHERE customerNumber = 103;
SELECT SUM(MULTIPLY(orderdetails.quantityOrdered, orderdetails.priceEach)) AS TotalPrice FROM orderdetails WHERE orderdetails.orderNumber = 10100;
SELECT productName  FROM products  ORDER BY buyPrice DESC  LIMIT 3;
SELECT      c.contactLastName || ', ' || c.contactFirstName AS 'Contact Person Full Name' FROM      customers c JOIN      employees e ON c.salesRepEmployeeNumber = e.employeeNumber WHERE      e.employeeNumber = '1370' ORDER BY      c.creditLimit DESC LIMIT 1;
SELECT COUNT(od.quantityOrdered)  FROM orderdetails od  JOIN products p ON od.productCode = p.productCode  WHERE p.productName = '2003 Harley-Davidson Eagle Drag Bike';
SELECT od.shippedDate  FROM orderdetails od  JOIN products p ON od.productCode = p.productCode  WHERE p.buyPrice = (SELECT MAX(buyPrice) FROM products)
SELECT COUNT(*)  FROM orderdetails  JOIN products ON orderdetails.productCode = products.productCode  WHERE products.productLine = 'motorcycles' AND YEAR(orderdetails.orderDate) = 2004;
SELECT orders.orderNumber  FROM customers  JOIN orders ON customers.customerNumber = orders.customerNumber  WHERE customers.creditLimit = 45300;
SELECT      c.customerName,      (od.quantityOrdered * (o.priceEach - od.buyPrice)) AS Profit  FROM      orders o  JOIN      customers c ON o.customerNumber = c.customerNumber  JOIN      orderdetails od ON o.orderNumber = od.orderNumber  ORDER BY      Profit DESC  LIMIT 1;
SELECT YEAR(paymentDate), COUNT(*)  FROM payments  WHERE amount < 10000;
SELECT      o.productCode,      o.productName,      SUM(od.quantityOrdered) as TotalQuantitySold FROM      orders o JOIN      orderdetails od ON o.orderNumber = od.orderNumber WHERE      YEAR(o.orderDate) = 2003 GROUP BY      o.productCode,      o.productName ORDER BY      TotalQuantitySold DESC LIMIT 3;
SELECT      c.contactFirstName || ' ' || c.contactLastName AS 'Customer Name',     SUM(od.quantityOrdered) AS 'Quantity Sold' FROM      orders o JOIN      orderdetails od ON o.orderNumber = od.orderNumber JOIN      products p ON p.productCode = od.productCode JOIN      customers c ON o.customerNumber = c.customerNumber WHERE      p.productName = '1969 Harley Davidson Ultimate Chopper' AND     YEAR(o.orderDate) = 2003 GROUP BY      c.contactFirstName, c.contactLastName;
SELECT firstName, lastName  FROM employees  JOIN offices ON employees.officeCode = offices.officeCode  WHERE city = 'NYC' AND jobTitle = 'Sales Rep';
SELECT      c.customerName,     c.country FROM      customers c JOIN      orders o ON c.customerNumber = o.customerNumber JOIN      payments p ON o.orderNumber = p.orderNumber WHERE      p.checkNumber = 'GG31455';
SELECT COUNT(*)  FROM products  JOIN productlines ON products.productLine = productlines.productLine  WHERE productName = '2001 Ferrari Enzo';
SELECT p.productName  FROM products p  JOIN orderdetails od ON p.productCode = od.productCode  GROUP BY p.productName  ORDER BY SUM(od.quantityOrdered) ASC  LIMIT 5;
SELECT customerName FROM customers WHERE customers.customerNumber IN (     SELECT orderNumber     FROM orders     WHERE status = 'disputed' );
SELECT COUNT(DISTINCT T1.country) FROM orders AS T1 JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.status = 'In Process' AND T2.country = 'USA';
SELECT SUM(od.quantityOrdered * od.priceEach) AS TotalPrice FROM orderdetails od JOIN orders o ON od.orderNumber = o.orderNumber JOIN products p ON od.productCode = p.productCode JOIN customers c ON o.customerNumber = c.customerNumber WHERE p.productLine = 'Classic Cars' AND o.status = 'Shipped' AND c.customerName = 'Land of Toys Inc';
SELECT COUNT(*)  FROM generalinfo  WHERE review < 3;
SELECT DISTINCT g.food_type FROM restaurant.geographic AS geo JOIN restaurant.generalinfo AS g ON geo.city = g.city AND g.review = 4 WHERE geo.region IN (     SELECT geo.region      FROM restaurant.geographic AS geo     JOIN restaurant.generalinfo AS g ON geo.city = g.city AND g.review = 4     GROUP BY geo.region     ORDER BY COUNT(*) DESC     LIMIT 1 )
SELECT COUNT(*)  FROM restaurant.generalinfo  JOIN restaurant.location ON restaurant.generalinfo.id_restaurant = restaurant.location.id_restaurant  JOIN restaurant.geographic ON restaurant.location.city = restaurant.geographic.city  WHERE restaurant.geographic.city = 'Richmond' AND restaurant.generalinfo.food_type = 'mediterranean';
SELECT DISTINCT g.city  FROM geographic g  JOIN location l ON g.id = l.id_restaurant  WHERE g.county = 'Sonoma';
SELECT DISTINCT county  FROM geographic  WHERE region != 'bay area';
SELECT DISTINCT city  FROM geographic  WHERE region = 'Northern California';
SELECT T3.id_restaurant  FROM location AS T3  JOIN city AS T1 ON T3.city = T1.city  JOIN generalinfo AS T2 ON T3.id_restaurant = T2.id_restaurant  WHERE T1.name = 'oakland' AND T3.street_name = '11th street';
SELECT COUNT(*)  FROM location  WHERE street_num = 871;
SELECT T1.street_num FROM location AS T1 JOIN geographic AS T2 ON T1.city = T2.city  JOIN generalinfo AS T3 ON T3.id_restaurant = T1.id_restaurant WHERE T2.city = 'san francisco' AND T1.street_name = '9th avenue';
SELECT g.food_type  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE l.street_name = 'adeline st' AND g.city = 'berkeley';
SELECT DISTINCT g.region  FROM geographic g  JOIN generalinfo gi ON g.city = gi.city  WHERE gi.food_type != 'african' AND g.region NOT IN  (SELECT DISTINCT l.region FROM location l);
SELECT DISTINCT c.county  FROM geographic g  JOIN generalinfo gi ON g.id_restaurant = gi.id_restaurant  WHERE gi.label = 'a & w root beer';
SELECT location.street_num, location.street_name  FROM generalinfo  JOIN location ON generalinfo.id_restaurant = location.id_restaurant  WHERE generalinfo.label = 'adelitas taqueria';
SELECT g.food_type  FROM geographic AS geog  JOIN location AS loc ON geog.city = loc.city  JOIN generalinfo AS g ON g.id_restaurant = loc.id_restaurant  WHERE loc.street_num = 3140 AND loc.street_name = 'alpine rd' AND geog.county = 'san mateo county';
SELECT T2.street_num, T2.street_name  FROM geographic AS T1  JOIN location AS T2 ON T1.city = T2.city  JOIN generalinfo AS T3 ON T2.id_restaurant = T3.id_restaurant  WHERE T1.city = 'San Francisco' AND T3.food_type = 'seafood';
SELECT DISTINCT c.county  FROM geographic c  JOIN generalinfo g ON c.id = g.city  WHERE g.label <> 'bakers square restaurant & pie shop'
SELECT COUNT(DISTINCT T1.county) FROM geographic AS T1 JOIN location AS T2 ON T1.city = T2.city WHERE T2.street_name = 'appian way';
SELECT T1.label, T1.review  FROM generalinfo AS T1 JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'atlantic ave';
SELECT T1.id_restaurant  FROM restaurant.generalinfo AS T1  JOIN restaurant.geographic AS T2  ON T1.city = T2.city  AND T2.county = 'Contra Costa County'
SELECT DISTINCT g.label  FROM restaurant.geographic g  JOIN restaurant.generalinfo r ON g.id = r.id_restaurant  WHERE g.county = 'Yolo County';
SELECT g.label  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  JOIN geographic geo ON g.city = geo.city  WHERE l.street_name = 'drive' AND geo.city = 'san rafael' AND g.food_type <> 'american';
SELECT T3.street_name  FROM geographic AS T1  JOIN generalinfo AS T2 ON T1.city = T2.city  JOIN location AS T3 ON T2.id_restaurant = T3.id_restaurant  WHERE T1.city = 'San Francisco' AND T2.review = 1.7;
SELECT T1.label  FROM generalinfo AS T1  JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant  JOIN geographic AS T3 ON T3.city = T2.city  WHERE T2.street_name = 'alameda de las pulgas' AND T3.city = 'menlo park'  AND T1.review = (SELECT MIN(review) FROM generalinfo WHERE city = 'menlo park');
SELECT location.street_name  FROM location  JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant  JOIN geographic ON generalinfo.city = geographic.city  WHERE generalinfo.label = 'good heavens' AND geographic.county = 'Tuolumne County';
SELECT T1.street_num FROM location AS T1 JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'aux delices vietnamese restaurant';
SELECT T1.id_restaurant  FROM generalinfo AS T1  JOIN geographic AS T2 ON T1.city = T2.city  WHERE T2.county = 'Marin County'
SELECT DISTINCT g.region  FROM geographic g  JOIN generalinfo gi ON g.city = gi.city  WHERE gi.food_type != 'pizza' AND g.region NOT IN (     SELECT DISTINCT l.region      FROM location l      JOIN generalinfo gi2 ON l.id_restaurant = gi2.id_restaurant      WHERE gi2.food_type = 'pizza' )
SELECT      AVG(generalinfo.review) AS average_rating FROM      restaurant.geographic g  JOIN      restaurant.generalinfo gi ON g.id_restaurant = gi.id_restaurant JOIN      restaurant.location l ON g.id_restaurant = l.id_restaurant WHERE      g.county = 'santa cruz county';
SELECT      (COUNT(CASE WHEN T2.food_type = 'mexican' AND T1.county = 'monterey county' THEN 1 END)      / COUNT(T2.id_restaurant)) * 100 AS percentage FROM      geographic AS T1 JOIN      generalinfo AS T2 ON      T1.city = T2.city;
SELECT      (COUNT(CASE WHEN T1.street_name = '11th st' AND T3.county = 'Alameda County' THEN 1 ELSE NULL END)      / COUNT(CASE WHEN T3.county = 'Alameda County' THEN 1 ELSE NULL END)) * 100 AS percentage FROM      location AS T1 JOIN      geographic AS T2 ON T1.city = T2.city JOIN      location AS T3 ON T1.id_restaurant = T3.id_restaurant;
SELECT r.label  FROM restaurant.generalinfo r  JOIN restaurant.location l ON r.id_restaurant = l.id_restaurant  WHERE r.food_type = 'european';
SELECT DISTINCT city FROM geographic WHERE region = 'northern california';
SELECT label  FROM generalinfo  WHERE food_type = '24 hour diner';
SELECT DISTINCT city  FROM geographic  WHERE county = 'unknown' AND region = 'unknown'  LIMIT 5;
SELECT county, region  FROM geographic  WHERE city = 'Davis';
SELECT T3.street_name  FROM geographic AS T1  JOIN location AS T3 ON T1.city = T3.city  JOIN generalinfo AS T2 ON T3.id_restaurant = T2.id_restaurant  WHERE T1.city = 'Clayton'
SELECT label  FROM generalinfo  JOIN geographic ON generalinfo.city = geographic.city  WHERE geographic.city = 'San Francisco'  ORDER BY review DESC  LIMIT 1;
SELECT COUNT(*)  FROM restaurant.generalinfo  WHERE food_type = 'american'  AND review = (SELECT MIN(review) FROM restaurant.generalinfo WHERE city = 'Carmel') AND city = 'Carmel';
SELECT      (COUNT(CASE WHEN g.food_type = 'american food' THEN g.id_restaurant END) /      COUNT(CASE WHEN l.city = 'dublin' AND g.food_type = 'american food' THEN g.id_restaurant END) * 100) as percentage FROM      generalinfo g JOIN      location l ON g.id_restaurant = l.id_restaurant WHERE      g.food_type = 'american food' AND l.city = 'dublin';
SELECT      l.street_num,      l.street_name,      g.city FROM      generalinfo AS gi  JOIN      location AS l ON gi.id_restaurant = l.id_restaurant  JOIN      geographic AS g ON gi.id_restaurant = g.id_restaurant  WHERE      gi.label = 'Albert\'s Café';
SELECT g.label  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE l.street_name = '19th St' AND l.city = 'Oakland';
SELECT T1.food_type  FROM generalinfo AS T1  JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant  WHERE T2.street_num = 106 AND T2.street_name LIKE '%E 25th Ave'
SELECT label  FROM generalinfo  WHERE restaurant.geographic.region = 'unknown'  LIMIT 3;
SELECT T2.label  FROM location AS T1  JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant  JOIN geographic AS T3 ON T2.city = T3.city  WHERE T1.street_num = 104  AND T1.street_name = 'san tomas aquino road'  AND T1.city = 'campbell'  AND T2.food_type = 'chinese'
SELECT COUNT(*)  FROM generalinfo AS g  JOIN location AS l ON g.id_restaurant = l.id_restaurant  WHERE g.food_type = 'thai'  AND l.street_name = 'san pablo ave'  AND g.city = 'albany';
SELECT T1.county, T1.region  FROM geographic AS T1  JOIN generalinfo AS T2 ON T1.city = T2.city  WHERE T2.label = 'plearn-thai cuisine';
SELECT T1.label  FROM generalinfo AS T1  JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant  JOIN geographic AS T3 ON T2.city = T3.city  WHERE T3.county = 'El Dorado' AND T3.region = 'Lake Tahoe';
SELECT T1.city, T1.county, T1.region FROM geographic AS T1 JOIN location AS T2 ON T1.city = T2.city WHERE T2.street_name = 'E. El Camino Real';
SELECT T1.label  FROM generalinfo AS T1  JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant  JOIN geographic AS T3 ON T2.city = T3.city  WHERE T3.street_name = 'shattuck ave' AND T3.city = 'berkeley' AND T1.food_type = 'Indian restaurant' AND T1.review = (SELECT MIN(review) FROM generalinfo WHERE food_type = 'Indian restaurant');
SELECT      (COUNT(CASE          WHEN g.region = 'bay area' AND gi.review > 4         THEN gi.id_restaurant     END) * 100 / COUNT(CASE          WHEN g.region = 'bay area'         THEN gi.id_restaurant     END)) AS percentage FROM      geographic g  JOIN      generalinfo gi ON g.city = gi.city  WHERE      g.region = 'bay area'
SELECT DISTINCT city  FROM geographic  JOIN location ON geographic.city = location.city  WHERE county = 'San Mateo'
SELECT COUNT(*)  FROM generalinfo  WHERE review > 4;
SELECT street_name FROM location GROUP BY street_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT g.label  FROM generalinfo g  JOIN geographic geo ON g.city = geo.city  WHERE g.food_type = 'chicken' AND g.review = (SELECT MAX(review) FROM generalinfo WHERE food_type = 'chicken')
SELECT county  FROM geographic  WHERE city = 'el cerrito';
SELECT COUNT(*)  FROM location  WHERE street_name = 'irving';
SELECT DISTINCT g.label  FROM restaurant.geographic g  JOIN restaurant.generalinfo gi ON g.id = gi.id_restaurant  WHERE g.county = 'Marin';
SELECT T1.street_num, T1.street_name  FROM location AS T1  JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant  WHERE T2.label = 'peking duck restaurant'
SELECT T2.street_name FROM geographic AS T1 JOIN location AS T2 ON T1.city = T2.city  WHERE T1.county = 'Alameda' GROUP BY T2.street_name HAVING COUNT(T2.id_restaurant) > 10;
SELECT DISTINCT g.region  FROM geographic g  JOIN generalinfo gi ON g.city = gi.city  WHERE gi.food_type = 'greek';
SELECT      l.street_num,     l.street_name,     g.city FROM      location l JOIN      generalinfo g ON l.id_restaurant = g.id_restaurant JOIN      geographic ge ON g.city = ge.city WHERE      ge.region = 'unknown';
SELECT review  FROM generalinfo  JOIN location ON generalinfo.id_restaurant = location.id_restaurant  WHERE street_num = 8440 AND street_name = 'murray ave';
SELECT      g.food_type  FROM      geographic g  JOIN      location l ON g.city = l.city  JOIN      generalinfo r ON l.id_restaurant = r.id_restaurant  WHERE      g.county = 'Monterey'  GROUP BY      g.food_type  ORDER BY      COUNT(g.food_type) DESC  LIMIT 1;
SELECT      l.street_name  FROM      location l  JOIN      generalinfo g ON l.id_restaurant = g.id_restaurant  WHERE      g.city = 'san francisco' AND g.food_type = 'burgers'  GROUP BY      l.street_name  ORDER BY      COUNT(*) DESC  LIMIT 1;
SELECT T3.region  FROM location AS T1  JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant  JOIN geographic AS T3 ON T3.city = T2.city  WHERE T1.street_num = 1149 AND T1.street_name = 'el camino real'
SELECT T1.county  FROM geographic AS T1  JOIN generalinfo AS T2 ON T1.city = T2.city  WHERE T2.label = 'sankee';
SELECT COUNT(DISTINCT location.street_num)  FROM location  JOIN restaurant.geographic ON location.city = geographic.city  WHERE geographic.region = 'Northern California';
SELECT restaurant.label  FROM restaurant  JOIN location ON restaurant.id_restaurant = location.id_restaurant  WHERE location.street_name = 'park st';
SELECT      (COUNT(CASE WHEN geographic.region = 'bay area' THEN 1 END)       / CAST(COUNT(generalinfo.id_restaurant) AS REAL)) * 100  FROM      restaurant.geographic      JOIN restaurant.generalinfo ON geographic.city = generalinfo.city
SELECT      g.county,     AVG(r.review) AS avg_review FROM      restaurant.geographic g JOIN      restaurant.generalinfo r ON g.id = r.id_restaurant WHERE      r.food_type = 'chinese' GROUP BY      g.county ORDER BY      avg_review DESC;
SELECT DISTINCT location.street_name  FROM location  JOIN geographic ON location.city = geographic.city  WHERE geographic.region = 'San Francisco'
SELECT DISTINCT g.id_restaurant  FROM geographic g  JOIN location l ON g.city = l.city  WHERE g.city = 'Danville';
SELECT COUNT(DISTINCT T1.city) FROM geographic AS T1 JOIN location AS T2 ON T1.city = T2.city JOIN generalinfo AS T3 ON T2.id_restaurant = T3.id_restaurant WHERE T1.region = 'bay area';
SELECT COUNT(*)  FROM generalinfo  WHERE city IS NULL;
SELECT T2.street_name  FROM generalinfo AS T1  JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant  WHERE T1.food_type = 'American'
SELECT DISTINCT g.label  FROM generalinfo g  JOIN location l ON g.city = l.city AND g.id_restaurant = l.id_restaurant  JOIN geographic geo ON g.city = geo.city  WHERE geo.county = 'Santa Cruz county';
SELECT review  FROM generalinfo  JOIN location ON generalinfo.id_restaurant = location.id_restaurant  WHERE street_num = 430 AND street_name = 'Broadway';
SELECT T1.street_num, T1.street_name  FROM location AS T1  JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant  WHERE T2.review = (SELECT MAX(review) FROM generalinfo)
SELECT T1.region, T2.city, COUNT(*) AS num_restaurants FROM geographic AS T1 JOIN generalinfo AS T2 ON T1.id = T2.id_restaurant WHERE T2.food_type = 'Italian' GROUP BY T1.region, T2.city ORDER BY num_restaurants DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN geographic.region = 'Napa Valley' THEN 1 END)      / CAST(COUNT(location.id_restaurant) AS REAL)) * 100  FROM      geographic      INNER JOIN location ON geographic.city = location.city;
SELECT COUNT(DISTINCT T1.city) FROM geographic AS T1 JOIN location AS T2 ON T1.city = T2.city WHERE T1.region = 'bay area';
SELECT DISTINCT g.city  FROM geographic g  JOIN generalinfo gi ON g.id = gi.city  WHERE g.county = 'unknown';
SELECT DISTINCT g.city  FROM geographic g  JOIN location l ON g.city = l.city  JOIN generalinfo r ON l.id_restaurant = r.id_restaurant  WHERE g.region = 'bay area' AND g.county = 'santa clara county';
SELECT T2.id_restaurant  FROM location AS T1  JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant  WHERE T1.city = 'sunnyvale';
SELECT COUNT(*)  FROM location  JOIN restaurant ON location.id_restaurant = restaurant.id_restaurant  WHERE street_num < 1000 AND street_name = 'Railroad St.';
SELECT T1.label  FROM generalinfo AS T1  JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant  JOIN geographic AS T3 ON T2.city = T3.city  WHERE T3.city = 'san francisco'  AND T1.food_type = '24 hour diner';
SELECT review  FROM generalinfo  JOIN location ON generalinfo.id_restaurant = location.id_restaurant  JOIN geographic ON generalinfo.city = geographic.city  WHERE street_name = 'ocean st' AND city = 'santa cruz';
SELECT T1.street_num  FROM location AS T1  JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant  JOIN geographic AS T3 ON T2.city = T3.city  WHERE T2.food_type = 'bar'  AND T3.city = 'oakland'  AND T2.review = 2.7;
SELECT COUNT(*)  FROM restaurant.geographic g  JOIN restaurant.generalinfo gi ON g.id_restaurant = gi.id_restaurant  JOIN restaurant.location l ON g.id_restaurant = l.id_restaurant  WHERE gi.food_type = 'bakery'  AND l.street_name = 'university ave.'  AND gi.city = 'palo alto';
SELECT T1.street_num  FROM location AS T1  JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant  WHERE T2.label = 'Tulocay winery' AND T2.food_type = 'winery';
SELECT review, label  FROM restaurant.generalinfo  WHERE city = 'hayward' AND street_num || ' ' || street_name IN (SELECT street_num || ' ' || street_name FROM restaurant.location WHERE city = 'hayward') AND street_name = 'mission blvd';
SELECT COUNT(*)  FROM (generalinfo        JOIN location ON generalinfo.id_restaurant = location.id_restaurant        JOIN geographic ON location.city = geographic.city)  WHERE geographic.region = 'Mountainview'  AND location.street_name = 'castro st'  AND generalinfo.food_type = 'indian'  AND generalinfo.label LIKE '%indian%';
SELECT COUNT(*)  FROM restaurant.generalinfo  JOIN restaurant.location ON restaurant.generalinfo.id_restaurant = restaurant.location.id_restaurant  WHERE restaurant.generalinfo.review = 2 AND restaurant.location.street_num < 500;
SELECT COUNT(*)  FROM (generalinfo        JOIN location ON generalinfo.id_restaurant = location.id_restaurant        JOIN geographic ON location.city = geographic.city) WHERE generalinfo.food_type = 'asian'    AND location.street_name = 'n milpitas blvd'    AND geographic.city = 'milpitas'    AND generalinfo.id_restaurant > 385;
SELECT g.label AS restaurant_name, g.id_restaurant AS restaurant_id  FROM restaurant.geographic geo  JOIN restaurant.generalinfo g ON geo.id_restaurant = g.id_restaurant  JOIN restaurant.location l ON geo.id_restaurant = l.id_restaurant  WHERE l.street_name = 'ocean avenue' AND l.city = 'san francisco';
SELECT      l.city,      ge.street_num,      ge.street_name FROM      generalinfo g  JOIN      location l ON g.id_restaurant = l.id_restaurant  JOIN      geographic ge ON g.city = ge.city  WHERE      g.label = 'sanuki restaurant';
SELECT T1.food_type  FROM generalinfo AS T1  JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant  WHERE T2.street_num = 22779 AND T2.street_name = '6th St.' AND T1.city = 'Hayward City';
SELECT COUNT(*)  FROM restaurant.generalinfo  JOIN restaurant.location ON restaurant.generalinfo.id_restaurant = restaurant.location.id_restaurant  JOIN restaurant.geographic ON restaurant.generalinfo.id_restaurant = restaurant.geographic.id_restaurant  WHERE restaurant.generalinfo.food_type = 'american'  AND restaurant.location.street_name = 'front'  AND restaurant.geographic.city = 'san francisco';
SELECT g.id_restaurant FROM generalinfo g JOIN geographic geo ON g.city = geo.city  JOIN location l ON g.id_restaurant = l.id_restaurant WHERE g.food_type = 'american' AND l.street_num > 2000 AND g.review > (SELECT AVG(r.review) * 0.7 FROM generalinfo gi JOIN restaurant r ON gi.id_restaurant = r.id WHERE gi.food_type = 'american' AND gi.city = r.city)
SELECT      (COUNT(CASE WHEN T1.food_type = 'afghani' THEN T1.id_restaurant END) * 100.0 / COUNT(T1.id_restaurant)) AS percentage FROM      generalinfo AS T1 JOIN      location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE      T2.street_num BETWEEN 1000 AND 2000;
SELECT g.label  FROM generalinfo g  JOIN geographic geo ON g.city = geo.city  JOIN location loc ON g.id_restaurant = loc.id_restaurant  WHERE geo.city = 'san francisco' AND g.food_type = 'asian'  GROUP BY g.id_restaurant  ORDER BY COUNT(g.review) DESC  LIMIT 1;
SELECT COUNT(DISTINCT T1.city) FROM geographic AS T1 JOIN location AS T2 ON T1.region = 'monterey' AND T1.city = T2.city;
SELECT COUNT(*)  FROM restaurant.generalinfo  WHERE food_type = 'deli'  AND city = 'belmont'  AND review > 2;
SELECT COUNT(*) AS city_count, county  FROM geographic  WHERE region = 'northern california'  GROUP BY county  ORDER BY city_count DESC  LIMIT 1;
SELECT COUNT(*)  FROM restaurant.geographic  WHERE city = 'concord';
SELECT T1.region  FROM geographic AS T1  JOIN generalinfo AS T2 ON T1.id = T2.id_restaurant  WHERE T2.review = (SELECT MAX(review) FROM generalinfo LIMIT 4)  GROUP BY T1.region
SELECT COUNT(*)  FROM (geographic g  JOIN generalinfo r ON g.city = r.city  JOIN location l ON r.id_restaurant = l.id_restaurant)  WHERE g.region = 'livermore'  AND l.street_name = '1st st'  AND r.food_type = 'chinese';
SELECT COUNT(*)  FROM restaurant.generalinfo  JOIN restaurant.geographic ON restaurant.generalinfo.id_restaurant = restaurant.geographic.id_restaurant  WHERE restaurant.generalinfo.food_type = 'indian' AND restaurant.geographic.region = 'los angeles area';
SELECT      food_type FROM      generalinfo  JOIN      geographic ON generalinfo.city = geographic.city WHERE      geographic.region = 'bay area' GROUP BY      food_type ORDER BY      COUNT(*) DESC LIMIT 1;
SELECT COUNT(*)  FROM restaurant.generalinfo  WHERE generalinfo.city = 'oakland'  AND generalinfo.street_name = 'broadway'  AND generalinfo.review < 3;
SELECT T1.region  FROM geographic AS T1  JOIN generalinfo AS T2 ON T1.city = T2.city  JOIN location AS T3 ON T2.id_restaurant = T3.id_restaurant  WHERE T2.label = 'baskin robbins'  GROUP BY T1.region  ORDER BY COUNT(T2.city) DESC  LIMIT 1;
SELECT DISTINCT location.street_name  FROM location  JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant  WHERE generalinfo.food_type = 'pizza' AND generalinfo.city = 'san jose';
SELECT COUNT(DISTINCT g.food_type) FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant JOIN geographic geo ON g.city = geo.city WHERE geo.region IN ('Yosemite', 'Mono Lake')
SELECT      l.street_num,      l.street_name,      l.city,      g.review  FROM      generalinfo g  JOIN      location l ON g.id_restaurant = l.id_restaurant  JOIN      geographic ge ON g.city = ge.city  WHERE      g.review = (SELECT MAX(review) FROM generalinfo)
SELECT COUNT(T1.city) AS branch_count, T3.county  FROM generalinfo AS T1  JOIN geographic AS T2 ON T1.city = T2.city  JOIN location AS T3 ON T1.id_restaurant = T3.id_restaurant  GROUP BY T3.county  ORDER BY branch_count DESC  LIMIT 1;
SELECT region  FROM geographic  WHERE city IN (     SELECT city      FROM location      GROUP BY city      ORDER BY COUNT(*) DESC      LIMIT 1 );
SELECT      l.street_num,     l.street_name,     l.city FROM      restaurant.generalinfo g JOIN      restaurant.location l ON g.id_restaurant = l.id_restaurant JOIN      restaurant.geographic geo ON g.city = geo.city WHERE      geo.region = 'American' AND g.review > 4;
SELECT COUNT(*)  FROM Player  WHERE SUBSTR(DOB, 1, 4) > '1985';
SELECT COUNT(*)  FROM Match  WHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5';
SELECT COUNT(*)  FROM Match  WHERE Man_of_the_Match = 41;
SELECT Match_Id FROM Match WHERE SUBSTR(Match_Date, 1, 4) = '2008';
SELECT COUNT(*)  FROM Player  WHERE Country_Name = 'Australia';
SELECT      c.Country_Name  FROM      Player p  JOIN      Country c ON p.Country_Name = c.Country_Name  WHERE      p.DOB = (SELECT MIN(DOB) FROM Player);
SELECT Bowling_Skill  FROM Player  WHERE Player_Name = 'SC Ganguly';
SELECT COUNT(*)  FROM Player  WHERE Batting_hand = 'Right-hand bat' AND SUBSTR(DOB, 1, 4) > 1985;
SELECT p.Player_Name  FROM Player p  JOIN Country c ON p.Country_Name = c.Country_Name  WHERE p.Batting_Hand = 'Right-hand bat' AND c.Country_Name = 'Australia';
SELECT DISTINCT B.Bowling_skill  FROM Player P  JOIN Country C ON P.Country_Name = C.Country_Name  JOIN Team T ON P.Player_Id = T.Player_Id  JOIN Match M ON T.Team_Id = M.Team_Id  JOIN Venue V ON M.Venue_Id = V.Venue_Id  WHERE C.Country_Name = 'Australia';
SELECT MIN(T2.DOB)  FROM Bowling_Style AS T1  JOIN Player AS T2 ON T1.Bowling_Id = T2.Bowling_skill  WHERE T1.Bowling_skill = 'Legbreak';
SELECT Bowling_Skill  FROM Player  GROUP BY Bowling_Skill  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT p.Player_Name  FROM Match m  JOIN Player_Match pm ON m.Match_Id = pm.Match_Id  JOIN Player p ON pm.Player_Id = p.Player_Id  WHERE m.Match_Date = '2008-04-18' AND m.Man_of_the_Match = p.Player_Id;
SELECT COUNT(*)  FROM Player_Match pm  JOIN Player p ON pm.Player_Id = p.Player_Id  JOIN Rolee r ON pm.Role_Id = r.Role_Id  WHERE p.Player_Name = 'SC Ganguly' AND r.Role_Desc = 'Captain';
SELECT Role_Desc  FROM Rolee  JOIN Player_Match ON Rolee.Role_Id = Player_Match.Role_Id  JOIN Match ON Player_Match.Match_Id = Match.Match_Id  JOIN Player ON Player_Match.Player_Id = Player.Player_Id  WHERE Player.Player_Name = 'SC Ganguly' AND Match.Match_Date = '2008-04-18';
SELECT MAX(Match.Matching_Win_margin) FROM      (Player         INNER JOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id)         INNER JOIN Match ON Player_Match.Match_Id = Match.Match_Id WHERE Player.Player_Name = 'SC Ganguly'
SELECT      AVG(Season.win_margin) AS avg_winning_margin FROM      Player JOIN      Player_Match ON Player.Player_Id = Player_Match.Player_Id JOIN      Match ON Player_Match.Match_Id = Match.Match_Id WHERE      Player.Player_Name = 'SC Ganguly';
SELECT      (COUNT(CASE WHEN Batting_Hand = 'Right-hand bat' THEN Player_Id END)       OVER ()      / COUNT(Player_Id) OVER ()      * 100) AS Percentage_Right_Handed_Batters FROM      Player  WHERE      SUBSTR(DOB, 1, 4) > '1985';
SELECT Player_Name FROM Player WHERE DOB = (SELECT MAX(DOB) FROM Player);
SELECT COUNT(*)  FROM Match  WHERE Toss_Winner = 'Sunrisers Hyderabad';
SELECT      Player_Name FROM      Ball_by_Ball WHERE      Match_Id = 419169 AND Over_Id = 3 AND Ball_Id = 2 AND Innings_No = 2;
SELECT Venue_Name  FROM Venue  JOIN Match ON Venue.Venue_Id = Match.Venue_Id  WHERE Match.Win_Margin = 138;
SELECT Player_Name  FROM Match  WHERE Match_Date = '2008-05-12'  AND Man_of_the_Match IS NOT NULL;
SELECT p.Player_Name  FROM Player_Match pm  JOIN Player p ON pm.Player_Id = p.Player_Id  JOIN Rolee r ON pm.Role_Id = r.Role_Id  JOIN Match m ON pm.Match_Id = m.Match_Id  WHERE m.Match_Id = 419117 AND r.Role_Desc = 'CaptainKeeper';
SELECT Player_Name FROM Player JOIN Season ON Player.Country_Name = Season.Country_Name WHERE Season.Year = 2013 AND Season.Man_of_the_Series IS NOT NULL;
SELECT `DOB` FROM `Player` WHERE `Season_Id` IN (     SELECT `Season_Id`     FROM `Season`     WHERE `Season_Year` = 2014 ) AND `Orange_Cap` IS NOT NULL;
SELECT      c.Country_Name  FROM      Country c  JOIN      Season s ON c.Country_Id = s.Country_Id  WHERE      s.Season_Id = 7 AND c.Country_Name IS NOT NULL AND s.Purple_Cap IS NOT NULL;
SELECT Country_Name  FROM City  WHERE City_Name = 'Ranchi';
SELECT COUNT(*)  FROM City  WHERE Country_Name = 'India';
SELECT City_Name FROM Venue GROUP BY City_Name ORDER BY COUNT(Venue_Id) DESC LIMIT 1;
SELECT Batting_hand  FROM Player  WHERE Player_Name = 'MK Pandey';
SELECT      (COUNT(CASE WHEN c.Country_Name = 'India' THEN ci.City_Id END) /       COUNT(CASE WHEN c.Country_Name = 'South Africa' THEN ci.City_Id END)) AS Ratio FROM      Country c JOIN      City ci ON c.Country_Id = ci.Country_Id;
SELECT      COUNT(*) AS 'Games Hosted by M Chinnaswamy Stadium',     (COUNT(*) /          (SELECT COUNT(*) FROM Venue WHERE Venue_Name = 'Maharashtra Cricket Association Stadium')) AS 'Ratio Compared to Maharashtra Cricket Association Stadium' FROM      Venue WHERE      Venue_Name = 'M Chinnaswamy Stadium';
SELECT Player_Name FROM Player WHERE DOB = (SELECT MIN(DOB) FROM Player);
SELECT COUNT(*)  FROM Match  WHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5';
SELECT COUNT(*)  FROM Player  WHERE DOB >= '1990-01-01' AND DOB <= '1999-12-31';
SELECT COUNT(*)  FROM Match  WHERE (Team_1 = 10 OR Team_2 = 10)  AND SUBSTR(Match_Date, 1, 4) = '2012';
SELECT      Player_Id FROM      Player WHERE      Player_Id IN (         SELECT              Player_Id          FROM              Player_Match          WHERE              Role_Id = (SELECT Role_Id FROM Rolee WHERE Role_Desc = 'Batsman')          AND              Season_Id IN (                 SELECT                      Season_Id                  FROM                      Season                  WHERE                      Orange_Cap IS NOT NULL                  GROUP BY                      Season_Id                  HAVING                      COUNT(DISTINCT Season_Year) > 1             );
SELECT COUNT(*)  FROM Match  WHERE Season_Id = 7;
SELECT COUNT(*)  FROM Umpire  JOIN Country ON Umpire.Umpire_Country = Country.Country_Name  WHERE Country.Country_Name = 'South Africa';
SELECT Player_Name FROM Player WHERE Player_Id = (     SELECT Player_Id      FROM Match      WHERE Match_Id = ... /* specify the match ID here */     GROUP BY Player_Id     ORDER BY COUNT(Man_of_the_Match) DESC     LIMIT 1 );
SELECT Country_Name FROM Player WHERE Batting_hand IS NOT NULL OR Bowling_skill IS NOT NULL GROUP BY Country_Name ORDER BY COUNT(Country_Name) DESC LIMIT 1;
SELECT COUNT(*)  FROM Player  WHERE Player_Name = 'CH Gayle'  AND Player = (SELECT Winner FROM Season WHERE Man_of_the_Series IS NOT NULL AND Man_of_the_Series = Player.Id AND Extra_Name = 'Orange Cap');
SELECT      s.Season_Id FROM      Season s JOIN      Match m ON s.Season_Id = m.Season_Id JOIN      Venue v ON v.Venue_Id = m.Venue_Id WHERE      v.Venue_Name = 'M Chinnaswamy Stadium' GROUP BY      s.Season_Id ORDER BY      COUNT(m.Match_Id) DESC LIMIT 1;
SELECT Team_Name  FROM Match  WHERE Match_Winner IS NOT NULL AND Season_Id = 1  GROUP BY Team_Name  ORDER BY COUNT(Match_Winner) DESC  LIMIT 1;
SELECT      Venue_Name FROM      Venue JOIN      Match ON Venue.Venue_Id = Match.Venue_Id WHERE      Team_1 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Kolkata Knight Riders') GROUP BY      Venue_Name ORDER BY      COUNT(Venue_Id) DESC LIMIT 1;
SELECT Team_Name FROM Team WHERE Team_Id IN (     SELECT Team_Id     FROM Match     WHERE Match_Winner <> Team_1 OR Match_Winner <> Team_2     GROUP BY Team_Id     ORDER BY COUNT(*) DESC     LIMIT 1 )
SELECT p.Player_Name  FROM Match m  JOIN Player_Match pm ON m.Match_Id = pm.Match_Id  JOIN Player p ON pm.Player_Id = p.Player_Id  WHERE m.Man_of_the_Match = p.Player_Id AND m.Match_Date = (SELECT MIN(Match_Date) FROM Match);
SELECT MIN(Match_Date)  FROM Match  WHERE Team_Name = 'Chennai Super Kings';
SELECT COUNT(*)  FROM Player  WHERE Batting_hand = 'Left-hand bat' AND Country_Name = 'India';
SELECT p.Player_Name  FROM Player p  JOIN Player_Match pm ON p.Player_Id = pm.Player_Id  JOIN Team t ON pm.Team_Id = t.Team_Id   WHERE t.Team_Name = 'Deccan Chargers' AND pm.Role_Desc = 'Captain'  GROUP BY p.Player_Name  ORDER BY COUNT(pm.Role_Id) DESC  LIMIT 1;
SELECT      (COUNT(CASE WHEN p.Batting_hand = 'Right-hand bat' THEN p.Player_Id ELSE NULL END)      / CAST(TOTAL COUNT(p.Player_Id) AS REAL)) * 100 AS percentage_right_handed_batters FROM      Player p ;
SELECT Player_Name FROM Player WHERE DOB = '1981-07-07';
SELECT COUNT(*)  FROM Player_Match  WHERE Player_Id = 2;
SELECT      T1.Team_Name  FROM      Team AS T1,     Match AS T2 WHERE      T1.Team_Id = T2.Team_1 AND T2.Win_Margin = (SELECT MAX(Win_Margin) FROM Match)
SELECT      c.Country_Name  FROM      Venue v  JOIN      Country c ON v.Country_Id = c.Country_Id  WHERE      v.Venue_Name = 'St George''s Park';
SELECT P.Player_Name  FROM Player_Match PM  JOIN Player P ON PM.Player_Id = P.Player_Id  JOIN Team T ON PM.Team_Id = T.Team_Id  WHERE PM.Match_Id = 335990 AND T.Team_Name = 'Mumbai Indians';
SELECT Team_Name  FROM Match  WHERE Win_Margin = 7 AND Match_Date = '2009-05-07';
SELECT COUNT(*)  FROM Match  WHERE Outcome_Type = 'Superover';
SELECT DISTINCT c.City_Name FROM City c JOIN Country co ON c.Country_id = co.Country_Id WHERE co.Country_Name = 'U.A.E';
SELECT COUNT(*)  FROM Match  WHERE Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Pune Warriors');
SELECT Team_Name  FROM Match  WHERE Match_Date LIKE '2015%' AND Match_Id = 829768 AND Team_Id = Match_Winner;
SELECT Role_Desc  FROM Player_Match  JOIN Player ON Player.Player_Id = Player_Match.Player_Id  JOIN Rolee ON Rolee.Role_Id = Player_Match.Role_Id  WHERE Player_Name = 'K Goel' AND Match_Id = 335992;
SELECT COUNT(*)  FROM City  WHERE Country_id = (SELECT Country_Id FROM Country WHERE Country_Name = 'South Africa');
SELECT COUNT(*)  FROM Match  JOIN Venue ON Match.Venue_Id = Venue.Venue_Id  WHERE Venue.Venue_Name = 'Newlands'
SELECT Win_Margin  FROM Match  WHERE Team_1 = 'Mumbai Indians' AND Team_2 = 'Royal Challengers Bangalore' AND Match_Date = '2008-05-28';
SELECT      Team_Name AS 'First Team',     Team_Name AS 'Second Team' FROM      Match WHERE      Match_Date LIKE '2011%' AND      Win_Margin < (SELECT AVG(Win_Margin) * 0.3 FROM Match WHERE Match_Date LIKE '2011%') ORDER BY      ROW_NUMBER() OVER (ORDER BY Team_Name ASC)  LIMIT 2;
SELECT      (COUNT(CASE WHEN r.Role_Desc = 'Captain' THEN 1 END)       OVER ()      / COUNT(CASE WHEN p.DOB LIKE '1977%' THEN 1 END)       OVER ()) * 100 AS percentage_captains FROM      Player p JOIN      Player_Match pm ON p.Player_Id = pm.Player_Id JOIN      Rolee r ON pm.Role_Id = r.Role_Id WHERE      p.DOB LIKE '1977%';
SELECT SUM(Over_Id) as total_overs_in_first_innings FROM Ball_by_Ball WHERE Match_Id = 335996 AND Innings_No = 1;
SELECT      Ball_by_Ball.Over_Id,     Ball_by_Ball.Ball_Id,     Ball_by_Ball.Innings_No FROM      Ball_by_Ball JOIN      Batsman_Scored ON Ball_by_Ball.Match_Id = Batsman_Scored.Match_Id AND Ball_by_Ball.Over_Id = Batsman_Scored.Over_Id AND Ball_by_Ball.Ball_Id = Batsman_Scored.Ball_Id AND Ball_by_Ball.Innings_No = Batsman_Scored.Innings_No WHERE      Ball_by_Ball.Match_Id = 336004 AND      Batsman_Scored.Runs_Scored = (SELECT MAX(Total_Runs) FROM (SELECT SUM(Runs_Scored) as Total_Runs FROM Batsman_Scored WHERE Match_Id = 336004 GROUP BY Innings_No) AS MaxRuns);
SELECT Match_Id FROM Ball_by_Ball WHERE Over_Id > 20 LIMIT 5;
SELECT COUNT(*)  FROM Player  JOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id  JOIN Wicket_Taken ON Player_Match.Match_Id = Wicket_Taken.Match_Id  WHERE Wicket_Taken.Innings_No = 1 AND Wicket_Taken.Match_Id = 548335;
SELECT Player_Name FROM Player WHERE DOB LIKE '1971%';
SELECT Match_Id FROM Match WHERE DATE(Match_Date) = '2015-04-18';
SELECT Match_Id FROM Wicket_Taken WHERE Kind_Out = 'hit wicket';
SELECT COUNT(*)  FROM Player  JOIN Player_Match PM ON Player.Player_Id = PM.Player_Id  JOIN Wicket_Taken WT ON PM.Match_Id = WT.Match_Id  JOIN Out_Type OT ON WT.Kind_Out = OT.Out_Id  WHERE OT.Out_Name = 'stumped' AND PM.Innings_No = 2;
SELECT COUNT(*)  FROM Player  WHERE Player_Name = 'Yuvraj Singh' AND Player_Id = (SELECT Man_of_the_Match FROM Season);
SELECT Player_Name, DOB  FROM Player  WHERE DOB LIKE '1977%' AND Country_Name = 'England';
SELECT p.Player_Name  FROM Player p  JOIN Player_Match pm ON p.Player_Id = pm.Player_Id  JOIN Match m ON pm.Match_Id = m.Match_Id  JOIN Season s ON m.Season_Id = s.Season_Id  WHERE s.Season_Year = 2010 AND m.Man_of_the_Match = p.Player_Id;
SELECT      COUNT(CASE WHEN Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Chennai Super Kings') THEN Match_Id END) * 100.0 / COUNT(Match_Id) as win_rate FROM      Match WHERE      Team_Name = 'Chennai Super Kings';
SELECT p.Player_Name, c.Country_Name  FROM Player p  JOIN Player_Match pm ON p.Player_Id = pm.Player_Id  JOIN Team t ON pm.Team_Id = t.Team_Id  JOIN Match m ON pm.Match_Id = m.Match_Id  JOIN Venue v ON m.Venue_Id = v.Venue_Id  WHERE t.Team_Name = 'Gujarat Lions' AND m.Match_Date = '2016-04-11'
SELECT Player_Name, DOB  FROM Player  WHERE Bowling_skill = 'Left-arm fast';
SELECT Country_Name  FROM Umpire  WHERE Umpire_Name = 'BR Doctrove';
SELECT p.Player_Name  FROM Match m  JOIN Player_Match pm ON m.Match_Id = pm.Match_Id  JOIN Player p ON pm.Player_Id = p.Player_Id  WHERE m.Match_Date = '2008-06-01' AND m.Match_Winner = p.Player_Id AND pm.Role_Id IN (SELECT Role_Id FROM Rolee WHERE Role_Desc = 'Captain');
SELECT      T1.Team_Name  FROM      Team AS T1  JOIN      Player_Match AS T2  ON      T1.Team_Id = T2.Team_Id  JOIN      Player AS T3  ON      T3.Player_Id = T2.Player_Id  WHERE      T3.Player_Name = 'CK Kapugedera';
SELECT      (COUNT(CASE WHEN V.Venue_Name = 'Wankhede Stadium' THEN M.Match_Id ELSE NULL END)      / COUNT(CASE WHEN C.City_Name = 'Mumbai' THEN M.Match_Id ELSE NULL END)) * 100 AS Percentage FROM      Match M JOIN      Venue V ON M.Venue_Id = V.Venue_Id JOIN      City C ON V.City_Id = C.City_Id WHERE      C.City_Name = 'Mumbai';
SELECT      (COUNT(CASE WHEN pmo.Out_Name = 'bowled' THEN pmo.Player_Out ELSE NULL END) / COUNT(pmo.Player_Out)) * 100 AS Percentage_Out_By_Bowl FROM      Player_Match pmo JOIN      Player p ON pmo.Player_Id = p.Player_Id JOIN      Match m ON pmo.Match_Id = m.Match_Id JOIN      Out_Type ot ON ot.Out_Id = pmo.Out_Id WHERE      m.Match_Id = 392187;
SELECT      COUNT(CASE          WHEN Toss_Decide = 'field' AND Match_Date BETWEEN '2010-01-01' AND '2016-12-31' THEN 1     END) * 100.0 / COUNT(*) AS Percentage FROM      Toss_Decision
SELECT Toss_winner  FROM Match  WHERE Toss_Decide = 2;
SELECT `Match_Id`  FROM `Player_Match` JOIN `Player` ON `Player_Match.Player_Id` = `Player.Player_Id` JOIN `Outcome` ON `Outcome.Outcome_Id` = `Match.Winning_Outer_Id` WHERE `Player.Player_Name` = 'BB McCullum' AND `Outcome.Outcome_Type` = 'Man_of_the_Match'
SELECT Player.DOB  FROM Player  JOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id  JOIN Match ON Player_Match.Match_Id = Match.Match_Id  WHERE Match.Man_of_the_Match = Player.Player_Name;
SELECT DISTINCT Team_Name  FROM Match  WHERE Match_Id BETWEEN 336010 AND 336020  AND Toss_Winner IS NOT NULL;
SELECT COUNT(*)  FROM Match  WHERE Match_Winner = 'Mumbai Indians';
SELECT T1.Team_Name  FROM Team AS T1  JOIN Match AS T2 ON T1.Team_Id = T2.Team_2  WHERE T2.Team_1 IN (SELECT Team_Id FROM Team WHERE Team_Name = 'Pune Warriors')
SELECT `Team_Name`  FROM `Match`  WHERE `Match_Id` = 336000;
SELECT `Match_Id`  FROM `Venue`  WHERE `Venue_Name` = 'Brabourne Stadium';
SELECT Venue_Name FROM Venue WHERE Venue_Id IN (     SELECT Venue_Id     FROM Match     WHERE Season_Id = 2 );
SELECT City_Name  FROM Venue  WHERE Venue_Name = 'M Chinnaswamy Stadium';
SELECT Venue_Name FROM Venue JOIN City ON Venue.City_Id = City.City_Id WHERE City_Name = 'Mumbai';
SELECT DISTINCT M.Team_Id FROM Match M JOIN Venue V ON M.Venue_Id = V.Venue_Id WHERE V.Venue_Name LIKE 'St George%' AND M.Win_Type = 'Win';
SELECT COUNT(*)  FROM Venue  WHERE Venue_Name = 'SuperSport Park'  AND City_Id IN (SELECT City_Id                  FROM City                  WHERE City_Name = 'Centurion');
SELECT COUNT(*) AS total_winning_matches FROM Match WHERE Match.Winner = 'Deccan Chargers';
SELECT COUNT(Venue_Id) FROM Venue WHERE City_Id IN (     SELECT City_Id     FROM City     WHERE City_Name = 'Pune' );
SELECT Player_Id  FROM Ball_by_Ball  WHERE Match_Id = 501219 AND (Striker = '' OR Striker IS NULL)  GROUP BY Player_Id  ORDER BY COUNT(Ball_Id) DESC  LIMIT 1;
SELECT      AVG(T1.Runs_Scored) AS avg_runs_first_half FROM      Batsman_Scored T1 WHERE      T1.Innings_No = 1 AND      1 < T1.Over_Id AND T1.Over_Id < 25;
SELECT      AVG(Extra_Runs) AS Average_Extra_Runs FROM      Extra_Runs WHERE      Innings_No = 2;
SELECT      COUNT(CASE WHEN Win_Margin > 100 THEN 1 END) * 100.0 / COUNT(*) AS percentage FROM      Match;
SELECT Player_Name FROM Player WHERE DATE_TRUNC('year', DOB) BETWEEN 1970 AND 1990 ORDER BY DOB ASC;
SELECT COUNT(*)  FROM Wicket_Taken  WHERE Over_Id = 3 AND Fielders = '';
SELECT      c.Country_Name,     COUNT(u.Umpire_Id) AS Number_of_Umpires FROM      Umpire u JOIN      Country c ON u.Umpire_Country = c.Country_Id GROUP BY      c.Country_Name ORDER BY      Number_of_Umpires DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN r.Role_Desc = 'CaptainKeeper' THEN 1 END)      / CAST(TOTAL COUNT(p.Player_Id) AS REAL)) * 100 AS Percentage FROM      Player p JOIN      Rolee r ON p.Role_Id = r.Role_Id;
SELECT COUNT(*)  FROM Player  WHERE Player_Id IN (     SELECT Player_Id      FROM Wicket_Taken      WHERE Kind_Out = 'hit wicket' )
SELECT      c.Country_Name,     COUNT(DISTINCT CASE WHEN b.Batting_hand = 'Right-hand bat' THEN p.Player_Id ELSE NULL END) AS RightHandPlayersCount FROM      Country c JOIN      Player p ON c.Country_Name = p.Country_Name JOIN      Batting_Style b ON p.Batting_hand = b.Batting_hand GROUP BY      c.Country_Name;
SELECT      (COUNT(CASE WHEN Bowling_Style.Bowling_skill = 'Legbreak' THEN Player.Player_Id ELSE NULL END)     / COUNT(Player.Player_Id)) * 100 AS Percentage FROM      Player JOIN      Bowling_Style ON Player.Bowling_skill = Bowling_Style.Bowling_Id;
SELECT COUNT(*)  FROM Match  WHERE Win_Type = 'wickets' AND Win_Margin < 50;
SELECT COUNT(DISTINCT Venue_Id)  FROM Match  WHERE Toss_Winner = 'Team_2' AND Match_Winner = 'Team_1'
SELECT Player_Name, Country_Name  FROM Player  JOIN Season ON Player.Country_Name = Season.Country_Name  WHERE Season.Season_Id IN (     SELECT Season_Id      FROM Match      WHERE Season_Year = 2012      AND Man_of_the_Series IS NOT NULL );
SELECT Venue_Name FROM Venue WHERE Venue_Id = (SELECT Venue_Id                    FROM Match                    GROUP BY Venue_Id                    ORDER BY COUNT(Match_Id) DESC                    LIMIT 1);
SELECT      City_Name FROM      City JOIN      Venue ON City.City_Id = Venue.City_Id JOIN      Match ON Venue.Venue_Id = Match.Venue_Id WHERE      Match.Win_Type = 'NoResult' GROUP BY      City_Name ORDER BY      COUNT(Match.Win_Type) ASC LIMIT 1;
SELECT Player_Name FROM Player WHERE Player_Id IN (     SELECT Player_Id     FROM Match     GROUP BY Player_Id     HAVING COUNT(Man_of_the_Series) > 1 );
SELECT      Player_Name,      Country_Name  FROM      Player  WHERE      (SELECT COUNT(*) FROM Wicket_Taken WHERE Player_Out = (Player.Player_Id) AND Out_Name = 'caught') >      (SELECT AVG(COUNT(Player_Id)) FROM Wicket_Taken WHERE Out_Name = 'caught')  ORDER BY      (SELECT COUNT(*) FROM Wicket_Taken WHERE Player_Out = (Player.Player_Id) AND Out_Name = 'caught') ASC;
SELECT      (COUNT(CASE          WHEN M.Match_Winner = M.Team_1 AND M.Toss_Winner = M.Team_1 AND M.Win_Type = 'runs' THEN 1         ELSE NULL     END)      / COUNT(CASE          WHEN M.Match_Winner = M.Team_1 THEN 1         ELSE NULL     END)) * 100 AS Percentage FROM      Match M
SELECT      AVG(CASE WHEN t.Out_Id = 4 THEN t.Player_Out ELSE NULL END) AS Average_Out_By_Lbw,     AVG(CASE WHEN t.Out_Id = 3 THEN t.Player_Out ELSE NULL END) AS Average_Out_By_Runout FROM      Wicket_Taken AS t
SELECT Over_Id FROM Ball_by_Ball WHERE Striker = 7;
SELECT COUNT(*)  FROM Match  WHERE Toss_Winner = 'Team_1' AND Toss_Decide = 2;
SELECT COUNT(Match_Id)  FROM Match  WHERE MATCH_DATE = '2010-03%'
SELECT COUNT(*)  FROM Player  WHERE DOB != 'Gurkeerat Singh' AND DOB < '1990-06-29';
SELECT COUNT(*)  FROM Player  WHERE Player_Name = 'SR Watson';
SELECT p.Player_Name  FROM Player p  JOIN Player_Match pm ON p.Player_Id = pm.Player_Id  JOIN Team t ON t.Team_Id = pm.Team_Id  WHERE t.Team_Name = 'Delhi Daredevils'  GROUP BY p.Player_Id, p.Player_Name  HAVING COUNT(DISTINCT pm.Role_Id) = (SELECT MAX(COUNT(pm.Role_Id)) FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id                                       JOIN Team t ON t.Team_Id = pm.Team_Id                                       WHERE t.Team_Name = 'Delhi Daredevils');
SELECT Player_Name FROM Player WHERE Player_Id = (     SELECT Player_Id      FROM Match      WHERE Man_of_the_Match IS NOT NULL      GROUP BY Player_Id      ORDER BY COUNT(Man_of_the_Match) DESC      LIMIT 1 );
SELECT `Season_Year` FROM `Season` WHERE `Player_Name` = 'SP Narine' AND `Orange_Cap` = 'SP Narine';
SELECT DISTINCT T1.Team_Name  FROM Team AS T1  JOIN Player_Match AS PM1 ON T1.Team_Id = PM1.Team_Id  JOIN Player AS P1 ON PM1.Player_Id = P1.Player_Id  JOIN Season AS S1 ON T1.Season_Id = S1.Season_Id  JOIN Player_Match AS PM2 ON T1.Team_Id = PM2.Team_Id  JOIN Player AS P2 ON PM2.Player_Id = P2.Player_Id  JOIN Season AS S2 ON T1.Season_Id = S2.Season_Id  WHERE S1.Purple_Cap = P1.Player_Id AND S2.Orange_Cap = P2.Player_Id;
SELECT Player_Name FROM Player WHERE Country_Name = 'Zimbabwe';
SELECT COUNT(*)  FROM Player  WHERE Batting_hand = 'Left-hand bat';
SELECT COUNT(*)  FROM Match  WHERE Win_Type != 'runs';
SELECT Umpire_Name FROM Umpire WHERE Umpire_Country = 'New Zealand';
SELECT      c.Country_Name  FROM      Country c  JOIN      Player p ON c.Country_Id = p.Country_Id  JOIN      Bowling_Style bs ON p.Bowling_skill = bs.Bowling_Id  WHERE      bs.Bowling_skill = 'Slow left-arm chinaman'  GROUP BY      c.Country_Name  ORDER BY      COUNT(p.Player_Id) DESC  LIMIT 1;
SELECT Venue_Name FROM Venue WHERE Venue_Id IN (     SELECT Venue_Id     FROM Match     WHERE Team_Name = 'Kochi Tuskers Kerala'     GROUP BY Venue_Id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT COUNT(*)  FROM Match  WHERE (Team_1 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Delhi Daredevils') OR Team_2 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Delhi Daredevils')) AND Batsman_Scored.Match_Id = Match.Match_Id AND Batsman_Scored.Runs_Scored = 0;
SELECT      (COUNT(CASE WHEN M.Win_Margin < 10 THEN M.Venue_Id ELSE NULL END) / COUNT(M.Venue_Id)) * 100 AS Percentage_Winning_Margin FROM      Match M WHERE      M.Venue_Id IN (         SELECT              V.Venue_Id          FROM              Venue V          WHERE              V.Venue_Name = 'Dr DY Patil Sports Academy'     );
SELECT AVG(Extra_Runs)  FROM Extra_Runs  WHERE Extra_Name = 'noballs';
SELECT Player_Id FROM Player ORDER BY Bowling_skill DESC LIMIT 5;
SELECT COUNT(*)  FROM Player  WHERE DOB < '1975-10-16' AND Bowling_Id < 3;
SELECT Player_Name FROM Player WHERE DOB = (SELECT MAX(DOB) FROM Player);
SELECT Player_Id FROM Season WHERE Season_Year BETWEEN 2011 AND 2015 AND Man_of_the_Series IS NOT NULL;
SELECT SUM(T2.Runs_Scored) FROM Batsman_Scored AS T2 JOIN Ball_by_Ball AS T1 ON T1.Match_Id = T2.Match_Id WHERE T1.Innings_No = 2 AND T2.Match_Id = 335988;
SELECT COUNT(*)  FROM Batsman_Scored  WHERE Match_Id BETWEEN 335989 AND 337000  AND Over_Id = 1  AND Ball_Id = 1  AND Innings_No = 1  AND Runs_Scored > 3;
SELECT      M.Match_Id,      M.Match_Date  FROM      Match M  JOIN      Venue V ON M.Venue_Id = V.Venue_Id  WHERE      V.Venue_Name = 'Kingsmead'  GROUP BY      M.Match_Id,      M.Match_Date  HAVING      COUNT(DISTINCT DATE(M.Match_Date)) = 3;
SELECT COUNT(Match_Id)  FROM Match  WHERE Venue_Id IN (     SELECT Venue_Id      FROM Venue      WHERE Venue_Name = 'MA Chidambaram Stadium' ) AND Match_Date BETWEEN '2009-05-09' AND '2011-08-08';
SELECT Venue_Name, City_Name  FROM Match  JOIN Venue ON Match.Venue_Id = Venue.Venue_Id  WHERE Match.Match_Id = '336005';
SELECT      Toss_Winner,      Toss_Name FROM      Match WHERE      Match_Id = 336011;
SELECT COUNT(*)  FROM Player  WHERE Country_Name = 'South Africa' AND DOB < '1980-4-11';
SELECT Player_Name FROM Player WHERE Bowling_skill = 'Legbreak';
SELECT      Player_Match.Match_Date,      Rolee.Role_Desc FROM      Player  JOIN      Player_Match ON Player.Player_Id = Player_Match.Player_Id JOIN      Rolee ON Player_Match.Role_Id = Rolee.Role_Id WHERE      Player.DOB = (SELECT MAX(DOB) FROM Player) GROUP BY      Player_Match.Match_Date,      Rolee.Role_Desc,      Player.Player_Id HAVING      Player_Match.Match_Date = (SELECT MIN(Match_Date) FROM Match);
SELECT Match_Id  FROM Match  WHERE Man_of_the_Match = 'V Kohli';
SELECT COUNT(*)  FROM Player  WHERE Country_Name = 'Australia'  AND Player_Id IN (     SELECT Player_Id      FROM Player_Match      WHERE Role_Id IN (         SELECT Role_Id          FROM Rolee          WHERE Role_Desc = 'Man of the Match'     ) ) AND Match_Id IN (     SELECT Match_Id      FROM Match      WHERE DATE_FORMAT(Match_Date, '%Y') BETWEEN 2011 AND 2012 );
SELECT p.Player_Name  FROM Player p  JOIN Season s ON p.Country_Name = s.Country_Name  WHERE p.Batting_hand = s.Man_of_the_Series AND p.Country_Name = s.Orange_Cap;
SELECT Match_Date  FROM Match  WHERE Match_Winner = 'Sunrisers Hyderabad'  AND Match_Id = (SELECT MAX(Match_Id) FROM Match WHERE Match_Winner = 'Sunrisers Hyderabad');
SELECT Player.Player_Name, Player.Player_Id  FROM Player  JOIN Umpire ON Player.Player_Id = Umpire.Umpire_Id  WHERE Umpire.Umpire_Country = 'England';
SELECT      SUM(CASE WHEN Ball_by_Ball.Toss_Name = 'bat' THEN Ball_by_Ball.Runs_Scored ELSE 0 END) / COUNT(Ball_by_Ball.Over_Id) AS Run_Rate FROM      Ball_by_Ball JOIN      Match ON Ball_by_Ball.Match_Id = Match.Match_Id WHERE      Match.Match_Id = 335987 AND      Match.Match_Date = '2008-04-18' GROUP BY      CASE          WHEN COUNT(CASE WHEN Ball_by_Ball.Toss_Name = 'field' THEN 1 END) = 17 THEN 1          ELSE 0      END;
SELECT      Player_Name,     CASE          WHEN SUM(Over_Id) = 16 THEN COALESCE(SUM(Runs_Scored) / NULLIF(SUM(Over_Id), 0), 0)         ELSE NULL     END AS Run_Rate FROM      Match  JOIN      Player_Match ON Match.Match_Id = Player_Match.Match_Id JOIN      Player ON Player.Player_Id = Player_Match.Player_Id JOIN      Ball_by_Ball ON Match.Match_Id = Ball_by_Ball.Match_Id WHERE      Match.Match_Id = 335999 AND Ball_by_Ball.Toss_Name = 'field' AND Ball_by_Ball.Innings_No = 1 GROUP BY      Player_Name;
SELECT `Team_Id`  FROM `Match`  WHERE `Match_Winner` IS NOT NULL  GROUP BY `Team_Id`  ORDER BY COUNT(`Match_Winner`) DESC  LIMIT 1;
SELECT      MAX(COUNT(Player_Id)) AS max_players_count,     S.Year FROM      Player P JOIN      Season S ON P.Country_Name = S.Country_Name WHERE      EXTRACT(YEAR FROM P.DOB) <= EXTRACT(YEAR FROM CURRENT_DATE) - 35 GROUP BY      S.Year ORDER BY      max_players_count DESC LIMIT 1;
SELECT Match_Date  FROM Match  WHERE Win_Margin = (SELECT MAX(Win_Margin) FROM Match);
SELECT Season_Year  FROM Season  WHERE MATCH_ID IN (     SELECT MIN(COUNT(MATCH_ID))      FROM Match      GROUP BY Season_Id )
SELECT COUNT(*)  FROM Player_Match  WHERE Role_Id = 'Man_of_the_Match'  AND COUNT(Match_Id) >= 5;
SELECT p.Player_Name  FROM Match m  JOIN Player p ON m.Man_of_the_Match = p.Player_Id  WHERE m.Season_Id = 9  ORDER BY m.Match_Date DESC  LIMIT 1;
SELECT Team_Name  FROM Match  WHERE Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Desired Team Name') AND Match_Date = (SELECT MIN(Match_Date) FROM Match);
SELECT COUNT(*)  FROM City  WHERE Country_Name = 'U.A.E';
SELECT Umpire_Name FROM Umpire JOIN Country ON Umpire.Umpire_Country = Country.Country_Id WHERE Country.Country_Name = 'England';
SELECT COUNT(*)  FROM Player  JOIN Rolee ON Player.Role_Id = Rolee.Role_Id  JOIN Bowling_Style ON Player.Bowling_skill = Bowling_Style.Bowling_Id  WHERE Bowling_Style.Name = 'Legbreak';
SELECT COUNT(*)  FROM Match  WHERE Season_Id = 8 AND Team_Name = 'Rajasthan Royals';
SELECT c.Country_Name  FROM Umpire u  JOIN Country c ON u.Umpire_Country = c.Country_Id  WHERE u.Umpire_Name = 'TH Wijewardene';
SELECT Venue_Name FROM Venue JOIN City ON Venue.City_Id = City.City_Id WHERE City.Country_Name = 'United Arab Emirates' AND City.City_Name = 'Abu Dhabi';
SELECT      c.Country_Name  FROM      Player p  JOIN      Country c ON p.Country_Name = c.Country_Name  WHERE      p.DOB = (SELECT MAX(DOB) FROM Player);
SELECT p.Player_Name  FROM Player p  JOIN Player_Match pm ON p.Player_Id = pm.Player_Id  JOIN Match m ON pm.Match_Id = m.Match_Id  WHERE m.Season_Id = 1 AND m.Match_Winner = pm.Team_Id AND m.Match_Date = (SELECT MIN(Match_Date) FROM Match WHERE Season_Id = 1)
SELECT p.Player_Name  FROM Player p  JOIN Season s ON p.Country_Name = s.Country_Name AND p.Batting_hand = p.Batting_hand  WHERE s.Purple_Cap = p.Player_Id AND p.DOB = (     SELECT MIN(DATE_FORMAT(`DOB`, '%Y-%m-%d'))      FROM Player      WHERE Player_Id = s.Purple_Cap );
SELECT      Venue_Name,      City_Name,      Country_Name  FROM      Venue  JOIN      City ON Venue.Venue_Id = City.City_Id  JOIN      Country ON City.Country_Id = Country.Country_Id  WHERE      Match.Matching_Id = (         SELECT              MAX(Match_Id)          FROM              Match     );
SELECT      SUM(Over_Id) AS TotalOversInInnings FROM      Ball_by_Ball WHERE      Match_Id = '336011';
SELECT      Ball_by_Ball.Ball_Id,     Batsman_Scored.Runs_Scored,     Ball_by_Ball.Innings_No FROM      Ball_by_Ball JOIN      Batsman_Scored ON Ball_by_Ball.Match_Id = Batsman_Scored.Match_Id AND Ball_by_Ball.Over_Id = Batsman_Scored.Over_Id AND Ball_by_Ball.Ball_Id = Batsman_Scored.Ball_Id WHERE      Ball_by_Ball.Match_Id = '335988' AND Ball_by_Ball.Over_Id = 20;
SELECT COUNT(Match_Id)  FROM Match  WHERE Match_Date LIKE '2011%';
SELECT      2022 - SUBSTR(Player.DOB, 1, 4) AS age FROM      Player WHERE      Player.Player_Name = 'Ishan Kishan';
SELECT      COUNT(CASE          WHEN Toss_Winner = Match_Winner THEN 1      END) / COUNT(CASE          WHEN Match_Date LIKE '2012%' THEN 1      END) as Win_Rate FROM      Match;
SELECT COUNT(*)  FROM Match  WHERE Match_Date LIKE '2009%' AND Win_Margin < 10;
SELECT      Player.Name AS Player_Name FROM      Match JOIN      Player_Match ON Match.Match_Id = Player_Match.Match_Id JOIN      Player ON Player.Player_Id = Player_Match.Player_Id WHERE      SUBSTR(Match.Match_Date, 7, 1) = 6 AND      SUBSTR(Match.Match_Date, 1, 4) = 2014;
SELECT COUNT(*)  FROM Player  WHERE Player_Name = 'Mohammad Hafeez' JOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id;
SELECT Player_Name FROM Player WHERE Country_Name = 'South Africa' AND DOB LIKE '1984%'
SELECT      (COUNT(CASE WHEN Match_Winner = Team_Id THEN Match_Id END) * 100 / COUNT(Match_Id)) FROM      Match WHERE      Team_Name = 'Mumbai Indians'     AND Match_Date LIKE '2009%';
SELECT      (COUNT(CASE WHEN Batting_hand = 'Left-hand bat' THEN 1 END))::float /      COUNT(CASE WHEN Batting_hand = 'Right-hand bat' THEN 1 END) AS batting_hand_ratio FROM      Player;
SELECT Player_Name, Country_Name  FROM Player  WHERE DOB = (SELECT MIN(DOB) FROM Player);
SELECT DISTINCT B.Bowling_Id  FROM Player P  JOIN Country C ON P.Country_Name = C.Country_Name  JOIN Team T ON P.Player_Id = T.Player_Id  JOIN Match M ON T.Team_Id = M.Team_Id  JOIN Umpire U ON M.Umpire_Id = U.Umpire_Id  WHERE C.Country_Name = 'Zimbabwea';
SELECT Umpire_Id, Umpire_Name  FROM Umpire  WHERE Umpire_Country = 'New Zealand';
SELECT p.Player_Name  FROM Player_Match pm  JOIN Rolee r ON pm.Role_Id = r.Role_Id  JOIN Team t ON pm.Team_Id = t.Team_Id  JOIN Player p ON pm.Player_Id = p.Player_Id  WHERE r.Role_Desc = 'CaptainKeeper' AND t.Team_Name = 'Rising Pune Supergiants';
SELECT COUNT(Match_Id)  FROM Match  WHERE Team_Name = 'Sunrisers Hyderabad'  AND Match_Date LIKE '2013%';
SELECT Match_Id  FROM Extra_Runs  WHERE Extra_Type_Id IN (     SELECT Extra_Id      FROM Extra_Type      WHERE Extra_Name = 'penalty' );
SELECT DISTINCT Team_1, Team_2  FROM Match  WHERE Win_Type = 'Tie' AND SUBSTR(Match_Date, 1, 4) = 2015;
SELECT AVG(     CASE          WHEN `Outcome_type` = 2 AND `Out_Name` = 'lbw' THEN 1         ELSE 0     END) AS avg_lbw_outs_in_first_innings FROM `Outcome` o JOIN `Player_Match` pm ON o.`Outcome_Id` = pm.`Outcome_Id` JOIN `Match` m ON o.`Match_Id` = m.`Match_Id` WHERE m.`Innings_No` = 2;
SELECT COUNT(*)  FROM Match  WHERE Match_Date LIKE '2008%'
SELECT COUNT(*)  FROM Match  WHERE Match.Match_Id IN (     SELECT DISTINCT pm.Match_Id      FROM Player_Match pm      WHERE pm.Innings_No = 2 )
SELECT      Country.Name AS CountryName FROM      City JOIN      Country ON City.Country_Id = Country.Country_Id WHERE      City.City_Name = 'Rajkot';
SELECT COUNT(*)  FROM Match  WHERE Win_Type = 'superover';
SELECT DISTINCT Team_Name  FROM Match  WHERE Win_Margin = 38 AND MATCH_DATE = '2009-04-30';
SELECT `Team_Name`  FROM `Team`  JOIN `Player_Match` ON `Team.Team_Id` = `Player_Match.Team_Id`  JOIN `Player` ON `Player.Player_Id` = `Player_Match.Player_Id`  WHERE `Player.Player_Name` = 'T Kohli' AND `Match.Match_Id` = 335989;
SELECT COUNT(Venue_Id)  FROM Venue  WHERE City_Id IN (   SELECT City_Id    FROM City    WHERE Country_Name = 'South Africa'    AND City_Name = 'Centurion' );
SELECT COUNT(*)  FROM Match  WHERE Match_Date LIKE '%2014%'  AND Toss_Winner = 'Delhi Daredevils'  AND Win_Type != ''  AND Outcome_type != '';
SELECT Match_Id FROM Match WHERE Team_1 IN ('Royal Challengers Bangalore', 'Royal Challengers Bangalore') AND Win_Margin = (SELECT MAX(Win_Margin) FROM Match WHERE Team_1 = 'Royal Challengers Bangalore' OR Team_2 = 'Royal Challengers Bangalore');
SELECT COUNT(*)  FROM Player_Match  WHERE Player_Id IN (     SELECT Player_Id      FROM Player      WHERE Player_Name = 'K Goel' ) AND Role_Id = 3;
SELECT AVG(Match.win_margin)  FROM Match  JOIN Venue ON Match.Venue_Id = Venue.Venue_Id  WHERE Venue.Venue_Name = 'Newlands';
SELECT T1.Team_Name  FROM Team AS T1  JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner  WHERE T2.Match_Id = 336039  AND T1.Team_Id NOT IN (SELECT T3.Team_Id FROM Team AS T3 WHERE T3.Team_Name = T2.Match_Winner)
SELECT Venue_Name  FROM Venue  WHERE Venue_Id = (SELECT Venue_Id FROM Match WHERE Match_Id = 829768);
SELECT      t2.Team_Name  FROM      Match m JOIN      Team t1 ON m.Team_1 = t1.Team_Id JOIN      Team t2 ON m.Team_2 = t2.Team_Id WHERE      m.Win_Margin = (SELECT MIN(Win_Margin) FROM Match) LIMIT 1 OFFSET 1;
SELECT      (COUNT(CASE WHEN Match_Winner = 7 THEN 1 END) /       COUNT(Match_Winner)) * 100 AS Winning_Percentage FROM      Match WHERE      Match_Date LIKE '2013%' AND      Match_Winner = 7;
SELECT      (COUNT(CASE WHEN Role_Id = 1 THEN 1 ELSE NULL END)       - COUNT(CASE WHEN Role_Id > 1 THEN 1 ELSE NULL END)) AS Difference FROM      Player_Match WHERE      Player_Id IN (         SELECT Player_Id FROM Player WHERE Player_Name = 'SC Ganguly'     );
SELECT COUNT(*)  FROM Player  WHERE Player.Bowling_skill > 2;
SELECT COUNT(*)  FROM Player  WHERE DOB LIKE '1970%';
SELECT COUNT(*)  FROM Player  WHERE DOB LIKE '198%' AND Bowling_skill = 2;
SELECT COUNT(*)  FROM Match  WHERE Match_Date LIKE '2008-04%'
SELECT City_Name  FROM City  WHERE Country_id = 3;
SELECT COUNT(*)  FROM Match  WHERE Match_Date LIKE '2008%'
SELECT Country_Id FROM City WHERE City_Name = 'East London';
SELECT      2008 - strftime('%Y', DOB) AS age_in_2008 FROM      Player WHERE      Player_Name = 'SC Ganguly';
SELECT Player_Name FROM Player WHERE Batting_hand = 'Left-hand bat';
SELECT COUNT(*)  FROM Player  WHERE Country_Name = 'India';
SELECT Player_Name FROM Player WHERE Country_Name = 'England';
SELECT Venue_Name  FROM Venue  JOIN City ON Venue.City_Id = City.City_Id  WHERE City_Name = 'Bangalore';
SELECT Player_Name FROM Player WHERE Player_Id IN (     SELECT Player_Id     FROM Player_Match     WHERE Team_Id IN (         SELECT Team_Id         FROM Match         WHERE Season_Id IN (             SELECT Season_Id             FROM Season             WHERE Season_Year = 2008         )     ) );
SELECT Player_Name FROM Player JOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id JOIN Batsman_Scored ON Player_Match.Match_Id = Batsman_Scored.Match_Id WHERE Batsman_Scored.Runs_Scored < 3;
SELECT Role_Desc FROM Rolee JOIN Player_Match ON Rolee.Role_Id = Player_Match.Role_Id JOIN Player ON Player.Player_Id = Player_Match.Player_Id WHERE Player.Player_Name = 'SC Ganguly';
SELECT p.Player_Name  FROM Player p  JOIN Player_Match pm ON p.Player_Id = pm.Player_Id  JOIN Rolee r ON pm.Role_Id = r.Role_Id  WHERE r.Role_Desc = 'Keeper';
SELECT Player_Name FROM Player WHERE Player_Id IN (     SELECT Player_Id     FROM Player_Match     WHERE Team_Id = 1 );
SELECT COUNT(*)  FROM Player_Match  JOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id  WHERE Rolee.Role_Desc = 'Captain' AND DATE_FORMAT(Match.Date, '%Y') = '2008';
SELECT DISTINCT T2.Team_Name  FROM Player AS T1  JOIN Player_Match AS T3 ON T1.Player_Id = T3.Player_Id  JOIN Match AS T4 ON T3.Match_Id = T4.Match_Id  JOIN Season AS T5 ON T4.Season_Id = T5.Season_Id  WHERE T1.Player_Name = 'SC Ganguly' AND T5.Season_Year = 2008;
SELECT Win_Type  FROM Match  WHERE Match_Id = 336000;
SELECT Country_Name  FROM Player  WHERE Player_Name = 'SB Joshi';
SELECT COUNT(*)  FROM Bowling_Style  WHERE Bowling_skill = 'Left-arm fast';
SELECT `Outcome_Type`  FROM `Outcome`  JOIN `Match` ON `Outcome`.`Outcome_Id` = `Match`.`Outcome_type` WHERE `Match`.`Match_Id` = 392195;
SELECT P.Player_Name, C.City_Name  FROM Player P  JOIN Country CO ON P.Country = CO.Country_Id  JOIN City C ON C.City_Id = P.City_Id  WHERE P.DOB = (SELECT MIN(DOB) FROM Player)
SELECT COUNT(*)  FROM Match  WHERE Season_Id IN (     SELECT Season_Id      FROM Season      WHERE Season_Year = 2008 ) AND Team_Id IN (     SELECT Team_Id      FROM Team      WHERE Team_Name = 'Kings XI Punjab' ) AND Match_Winner = 'Kings XI Punjab';
SELECT COUNT(*)  FROM Match  WHERE Team_1 = 'Pune Warriors' OR Team_2 = 'Pune Warriors';
SELECT      Player.DOB as 'Year Born',     Rolee.Role_Desc as 'Role Played' FROM      Player  JOIN      Player_Match ON Player.Player_Id = Player_Match.Player_Id   JOIN      Rolee ON Player_Match.Role_Id = Rolee.Role_Id WHERE      Player.Player_Name = 'R Dravid';
SELECT COUNT(*)  FROM Player  WHERE Player_Name = 'SC Ganguly';
SELECT COUNT(*)  FROM Match  WHERE Match_Winner = 'Mumbai Indians' AND Season_Year = 2008;
SELECT `Team_Name`  FROM `Match`  WHERE `Match_Id` = 335993;
SELECT COUNT(*)  FROM Match  WHERE Win_Type = 'wickets';
SELECT Role_Desc  FROM Player  JOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id  JOIN Season ON Season.Season_Id = Player_Match.Season_Id  WHERE Player_Name = 'W Jaffer' AND Season_Year = 2012;
SELECT p.Player_Name  FROM Player p  JOIN Player_Match pm ON p.Player_Id = pm.Player_Id  JOIN Match m ON pm.Match_Id = m.Match_Id  WHERE m.Season_Year = 2008  GROUP BY p.Player_Name  HAVING COUNT(m.Man_of_the_Match) > 5;
SELECT      DIVIDE(COUNT(CASE WHEN p.Country_Name = 'India' THEN p.Player_Id ELSE NULL END),             COUNT(p.Player_Id)) AS AverageIndianPlayers FROM      Player p WHERE      strftime('%Y', p.DOB) BETWEEN '1975' AND '1985';
SELECT      (COUNT(CASE WHEN Batting_hand = 'Left-hand bat' THEN Player_Id END)      / CAST(TOTAL COUNT(Player_Id) AS REAL)) * 100.0 AS Left_Hand_Batting_Style_Percentage FROM      Player JOIN      Batting_Style ON Player.Batting_hand = Batting_Style.Batting_hand;
SELECT      (COUNT(CASE WHEN `win_type` = 1 THEN 1 END)       / CAST(COUNT(`win_type`) AS REAL)) * 100 AS win_percentage FROM `Match`;
SELECT COUNT(*)  FROM Match  WHERE Win_Margin = 7;
SELECT COUNT(*)  FROM Player  WHERE strftime('%Y', DOB) BETWEEN '1970' AND '1975';
SELECT `Match.Winning_Team`  FROM `Match`  WHERE `Match.Match_Date` = '2009-04-26' AND `Match.Win_Margin` = 6;
SELECT `Team_Name`  FROM `Match`  WHERE `Match_Id` = 419135 AND `Win_Type` = 'runs';
SELECT Match_Id FROM Match WHERE Venue_Id = (     SELECT Venue_Id     FROM Venue     WHERE Venue_Name = 'St George''s Park' ) AND Win_Margin = (     SELECT MAX(Win_Margin)     FROM Match     WHERE Venue_Id = (         SELECT Venue_Id         FROM Venue         WHERE Venue_Name = 'St George''s Park'     ) );
SELECT COUNT(*)  FROM Player  WHERE Country_Name = 'Sri Lanka';
SELECT p.Player_Name  FROM Player p  JOIN Player_Match pm ON p.Player_Id = pm.Player_Id  JOIN Rolee r ON pm.Role_Id = r.Role_Id  WHERE r.Role_Desc = 'captain';
SELECT Venue_Name, Match_Winner  FROM Match  WHERE Match_Id = 392194;
SELECT      (COUNT(CASE WHEN Win_Type = 'wickets' THEN 1 END)       OVER()      / COUNT(*)       OVER()) * 100 AS win_by_wickets_percentage FROM      Match WHERE      Team_Name = 'Delhi Daredevils'     AND EXTRACT(YEAR FROM Match_Date) = 2009;
SELECT torrents.groupName  FROM torrents  JOIN tags ON torrents.groupId = tags.id  WHERE torrents.artist = 'Ron Hunt'  AND torrents.groupYear = 1979  AND torrents.releaseType = 'single'  AND torrents.totalSnatched = 239;
SELECT COUNT(*)  FROM torrents  WHERE artist = 'blowfly' AND groupYear = 1980 AND releaseType LIKE '%album%' AND totalSnatched > 0;
SELECT t.tag FROM tags t JOIN torrents tr ON t.id = tr.groupId WHERE tr.releaseType = 'album' AND tr.totalSnatched = (SELECT MAX(totalSnatched) FROM torrents WHERE releaseType = 'album');
SELECT T2.tag  FROM torrents AS T1  JOIN tags AS T2 ON T1.id = T2.id  GROUP BY T2.tag  ORDER BY SUM(T1.totalSnatched) DESC  LIMIT 5;
SELECT torrents.groupName  FROM torrents  JOIN tags ON torrents.id = tags.id  WHERE torrents.releaseType = 'single' AND tags.tag = 'funk'  ORDER BY torrents.groupYear ASC  LIMIT 1;
SELECT torrents.groupName  FROM torrents  JOIN tags ON torrents.id = tags.id  WHERE torrents.releaseType = 'ep'  AND tags.tag = 'alternative';
SELECT T2.tag  FROM torrents AS T1  JOIN tags AS T2 ON T1.id = T2.id  WHERE T1.releaseType = 'live' AND T1.totalSnatched = (     SELECT MIN(totalSnatched)      FROM torrents      WHERE releaseType = 'album' )  LIMIT 5;
SELECT T1.tag, T3.artist  FROM tags AS T1  JOIN torrents AS T2 ON T1.id = T2.groupId  JOIN (SELECT groupId, MAX(totalSnatched) as max_snatched        FROM torrents        WHERE releaseType = 'single'        GROUP BY groupId) AS T3 ON T2.groupId = T3.groupId  WHERE T2.releaseType = 'single' AND T2.totalSnatched = T3.max_snatched;
SELECT COUNT(*)  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE tg.tag = '1980s';
SELECT COUNT(*)  FROM torrents  WHERE groupName = 'city funk';
SELECT groupName FROM torrents WHERE totalSnatched > 20000;
SELECT T2.tag  FROM torrents AS T1  JOIN tags AS T2 ON T1.id = T2.id  WHERE T1.groupName = 'sugarhill gang';
SELECT COUNT(*)  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE t.groupName = 'city funk';
SELECT torrents.groupName  FROM torrents  JOIN tags ON torrents.id = tags.id  WHERE tags.tag = '1980s';
SELECT torrents.groupName  FROM torrents  JOIN tags ON torrents.id = tags.id  WHERE tags.tag = '1980s'  ORDER BY torrents.totalSnatched DESC  LIMIT 1;
SELECT COUNT(*)  FROM torrents  JOIN tags ON torrents.groupId = tags.id  WHERE torrents.artist = 'michael jackson' AND tags.tag = 'pop';
SELECT COUNT(*)  FROM torrents  JOIN tags ON torrents.id = tags.id  WHERE torrents.groupYear = 2000 AND torrents.releaseType = 'album' AND tags.tag = 'pop';
SELECT AVG(torrents.totalSnatched)  FROM torrents  JOIN tags ON torrents.id = tags.id  WHERE tags.tag = '1980s'
SELECT groupName AS title  FROM torrents  WHERE totalSnatched = (SELECT MAX(totalSnatched) FROM torrents)  LIMIT 3;
SELECT      artist, groupName  FROM      torrents  WHERE      releaseType = 'single' AND groupYear = 2012  ORDER BY      totalSnatched DESC  LIMIT 1;
SELECT COUNT(*)  FROM torrents  WHERE artist = '50 cent'  AND releaseType IN ('album', 'single')  AND groupYear BETWEEN 2010 AND 2015;
SELECT      (SELECT MAX(groupYear) FROM torrents WHERE artist = '2Pac' AND releaseType = 'album') - 1991 AS years_passed FROM     torrents WHERE      artist = '2Pac' AND releaseType = 'album' AND groupYear = 1991;
SELECT AVG(torrents.totalSnatched)  FROM torrents  JOIN tags ON torrents.groupId = tags.id  WHERE torrents.artist = '2Pac'  AND torrents.releaseType = 'Single'  AND torrents.groupYear BETWEEN 2001 AND 2013;
SELECT      t.groupName AS 'title',     t.groupYear AS 'release year',     ta.tag FROM      torrents t JOIN      (SELECT          id, MAX(totalSnatched) as max_downloads      FROM          torrents      WHERE          releaseType = 'live album'      GROUP BY          id) m ON      t.id = m.id JOIN      tags ta ON t.id = ta.id WHERE      m.totalSnatched = m.max_downloads AND      t.releaseType = 'live album';
SELECT DISTINCT artist  FROM torrents  WHERE releaseType = 'bootleg' AND groupYear = 2016  GROUP BY artist  HAVING COUNT(*) >= 2;
SELECT DISTINCT artist  FROM torrents  WHERE releaseType = 'single'  AND groupYear BETWEEN 1980 AND 1982;
SELECT torrents.groupName  FROM torrents  JOIN tags ON torrents.id = tags.id  WHERE torrents.releaseType = 'single'  AND torrents.totalSnatched >= 20  AND torrents.id BETWEEN 10 AND 20;
SELECT torrents.artist FROM torrents JOIN tags ON torrents.groupId = tags.id WHERE torrents.groupYear BETWEEN 1980 AND 1982 AND tags.tag = 'disco';
SELECT DISTINCT t.artist  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE t.totalSnatched <= 100 AND t.groupYear = 1980 AND tg.tag = 'funk';
SELECT torrents.artist FROM torrents JOIN tags ON torrents.groupId = tags.id WHERE torrents.releaseType = 'single' AND tags.tag = 'soul' GROUP BY torrents.artist ORDER BY COUNT(*) DESC LIMIT 1;
SELECT torrents.artist FROM torrents JOIN tags ON torrents.id = tags.id WHERE torrents.artist BETWEEN 10 AND 30 AND torrents.groupYear = 1980 AND tags.tag = 'funk';
SELECT torrents.groupName  FROM torrents  JOIN tags ON torrents.groupId = tags.id  WHERE tags.tag = 'jazz' AND torrents.groupYear >= 1982  GROUP BY torrents.groupName  ORDER BY SUM(torrents.totalSnatched) DESC  LIMIT 1;
SELECT T3.tag  FROM torrents AS T1  JOIN tags AS T3 ON T1.id = T3.id  WHERE T1.artist = '16';
SELECT torrents.artist, MAX(torrents.totalSnatched) FROM torrents JOIN tags ON torrents.id = tags.id WHERE torrents.id BETWEEN 10 AND 50 AND tags.tag = 'new.york';
SELECT DISTINCT artist  FROM torrents  JOIN tags ON torrents.id = tags.id  WHERE releaseType IN ('album', 'mixtape')  AND groupYear BETWEEN 1980 AND 1985  AND tag = 'dance';
SELECT COUNT(*)  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE t.releaseType = 'single' AND t.groupYear BETWEEN 1979 AND 1981 AND tg.tag = 'soul';
SELECT COUNT(*)  FROM torrents  WHERE releaseType = 'single' AND groupYear = 1979;
SELECT COUNT(*)  FROM torrents  JOIN tags ON torrents.groupId = tags.id  WHERE torrents.artist = 'sugar daddy' AND torrents.releaseType = 'single' AND torrents.groupYear = 1980;
SELECT COUNT(*)  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE t.groupYear = 2004 AND tg.tag = 'christmas' AND t.releaseType = 'album';
SELECT T2.tag  FROM torrents AS T1  JOIN tags AS T2 ON T1.id = T2.id  WHERE T1.artist = 'kurtis blow' AND T1.groupYear BETWEEN 2000 AND 2010;
SELECT torrents.groupName, tags.tag  FROM torrents  JOIN tags ON torrents.id = tags.id  WHERE torrents.artist = 'millie jackson'  AND torrents.releaseType = 'album'  AND torrents.groupYear = 1980;
SELECT torrents.groupName  FROM torrents  JOIN tags ON torrents.id = tags.id  WHERE tags.tag = 'jazz'  AND torrents.groupYear = 2005;
SELECT torrents.artist FROM torrents JOIN tags ON torrents.groupId = tags.id WHERE torrents.groupYear BETWEEN 1980 AND 2000 AND tags.tag = 'disco' GROUP BY torrents.artist ORDER BY COUNT(torrents.id) DESC LIMIT 1;
SELECT DISTINCT artist  FROM torrents  JOIN tags ON torrents.groupId = tags.id  WHERE tags.tag = 1970s AND releaseType = 'single';
SELECT      (COUNT(CASE WHEN torrents.releaseType = 'album' AND torrents.tag = 'united.states' AND torrents.groupYear BETWEEN 1979 AND 1982 THEN 1 END)      / NULLIF(SUM(CASE WHEN torrents.releaseType = 'album' AND torrents.groupYear BETWEEN 1979 AND 1982 THEN 1 END), 0)) * 100 AS percentage FROM      torrents  JOIN      tags ON torrents.id = tags.id WHERE      tags.tag = 'united.states';
SELECT COUNT(*)  FROM Country  WHERE (OtherGroups = 'HIPC') AND (LendingCategory = 'IDA');
SELECT ShortName FROM Country WHERE LendingCategory = 'IDA' AND ExternalDebtReportingStatus = 'Estimate';
SELECT CountryNotes.Description  FROM CountryNotes  JOIN Indicators ON CountryNotes.Countrycode = Indicators.CountryCode  WHERE CountryNotes.Seriescode = 'SM.POP.TOTL' AND Indicators.CountryName = 'Aruba';
SELECT      c.ShortName  FROM      Country c  JOIN      CountryNotes cn ON c.CountryCode = cn.Countrycode  WHERE      c.Region = 'Latin America & Caribbean'      AND cn.Seriescode LIKE '%SM.POP.TOTL%';
SELECT COUNT(*)  FROM Country  JOIN CountryNotes ON Country.CountryCode = CountryNotes.Countrycode  WHERE Country.incomegroup = 'Low income' AND CountryNotes.Description IS NOT NULL AND CountryNotes.Seriescode = 'SM.POP.TOTL';
SELECT cn.Description  FROM CountryNotes cn  JOIN Indicators i ON cn.Countrycode = i.CountryCode  JOIN Series s ON i.SeriesCode = s.SeriesCode  WHERE s.SeriesCode = 'SM.POP.TOTL'  AND i.LendingCategory = 'IDA';
SELECT COUNT(*)  FROM Country  JOIN Indicators ON Country.CountryCode = Indicators.CountryCode  JOIN Footnotes ON Footnotes.Countrycode = Indicators.CountryCode AND Footnotes.Seriescode = Indicators.IndicatorCode  WHERE Country.IncomeGroup = 'Low income'  AND Indicators.IndicatorName = 'SM.POP.TOTL'  AND Footnotes.Description IS NOT NULL;
SELECT COUNT(*)  FROM Country  JOIN Indicators ON Country.CountryCode = Indicators.CountryCode  JOIN Series ON Indicators.SeriesCode = Series.SeriesCode  WHERE Country.IncomeGroup = 'High'  AND Country.CurrencyUnit = 'Euro'  AND Series.SeriesCode = 'SP.DYN.AMRT.FE'  AND Series.Description IS NOT NULL;
SELECT Country.LongName  FROM Country  JOIN CountryNotes ON Country.CountryCode = CountryNotes.Countrycode  WHERE CountryNotes.Description = 'Estimates are derived from data on foreign-born population.' AND CountryNotes.Seriescode = 'SM.POP.TOTL';
SELECT f.Description  FROM Footnotes f  JOIN Country c ON f.Countrycode = c.CountryCode  WHERE f.Year = 1990 AND c.ShortName = 'Aruba' AND c.CountryCode = (SELECT CountryCode FROM Country WHERE ShortName = 'Aruba') AND f.Seriescode = 'AG.LND.FRST.K2';
SELECT DISTINCT f.Year  FROM Footnotes f  JOIN Country c ON f.Countrycode = c.CountryCode  WHERE c.ShortName = 'Aruba' AND f.Seriescode = 'AG.LND.FRST.K2';
SELECT T1.CountryCode FROM Country AS T1 JOIN Footnotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Seriescode = 'DC.DAC.AUSL.CD' AND T2.Year = 2002 AND T2.Description = 'Data are classified as official aid';
SELECT COUNT(*)  FROM Footnotes  JOIN Country ON Footnotes.Countrycode = Country.CountryCode   WHERE Country.ShortName = 'Aruba' AND Footnotes.Year = 2002;
SELECT COUNT(*)  FROM Footnotes  JOIN Country ON Footnotes.Countrycode = Country.CountryCode  WHERE Country.ShortName = 'Aruba'  AND Footnotes.Seriescode IN (     SELECT Seriescode      FROM Footnotes      WHERE Country.CountryCode = Footnotes.Countrycode      GROUP BY Seriescode      HAVING MAX(Year) - MIN(Year) > 1 )
SELECT      AVG(T4.Value) * (CASE WHEN '%' IN 'adolescent fertility rate%' THEN 1 ELSE 0 END) AS AverageAdolescentFertilityRate FROM      Country AS T1 JOIN      Indicators AS T4 ON T1.CountryCode = T4.CountryCode WHERE      T1.Alpha2Code = '1A' AND T4.IndicatorName LIKE '%adolescent fertility rate%'
SELECT      c.SpecialNotes  FROM      Country c  JOIN      Indicators i ON c.CountryCode = i.CountryCode  WHERE      (SELECT AVG(i.Value) FROM Indicators WHERE CountryCode = c.CountryCode AND IndicatorName LIKE 'adolescent fertility rate%') =      (SELECT MAX(subquery_value) FROM          (SELECT AVG(value) as subquery_value FROM Indicators WHERE IndicatorName LIKE 'adolescent fertility rate%' GROUP BY countryCode) as subquery)
SELECT      c.Alpha2Code  FROM      Country c JOIN      CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE      c.Region = 'East Asia & Pacific' AND      c.IncomeGroup = 'High income: nonOECD' ORDER BY      c.Alpha2Code;
SELECT `LongName`, `Alpha2Code`  FROM `Country`  WHERE `LatestTradeData` = 2013 AND `LatestWaterWithdrawalData` = 2013;
SELECT AVG(T.Value)  FROM Indicators T  JOIN Country ON Country.CountryCode = T.CountryCode  WHERE T.IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)'  AND Country.ShortName = 'Algeria'  AND T.Year BETWEEN 1975 AND 1980;
SELECT      IndicatorName,      AggregationMethod  FROM      Series  WHERE      Topic = 'Economic Policy & Debt: Balance of payments: Capital & financial account';
SELECT      s.SeriesCode,      c.Alpha2Code FROM      Series s JOIN      Indicators i ON s.SeriesCode = i.SeriesCode JOIN      Country c ON i.CountryCode = c.CountryCode WHERE      s.Topic = 'Environment: Emissions' AND      s.LicenseType = 'restricted';
SELECT COUNT(*)  FROM Country  JOIN Indicators ON Country.CountryCode = Indicators.CountryCode  JOIN Series ON Indicators.SeriesCode = Series.SeriesCode  JOIN SeriesNotes ON Series.SeriesCode = SeriesNotes.SeriesCode  JOIN CountryNotes ON Country.CountryCode = CountryNotes.Countrycode  WHERE SeriesNotes.Description LIKE '%Middle East & North Africa%'  AND Indicators.Year = 1970  AND Indicators.Value > 600  AND Country.Region = 'Middle East & North Africa'  AND Indicators.IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)';
SELECT      c.ShortName,     MAX(i.Value) AS HighestValue,     i.Year AS Year FROM      Indicators i JOIN      Country c ON i.CountryCode = c.CountryCode WHERE      c.Region IN ('Latin America', 'Caribbean')     AND i.IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)'     AND i.Year >= 1965 GROUP BY      c.CountryCode, i.Year ORDER BY      AVG(i.Value) DESC LIMIT 3;
SELECT Description  FROM SeriesNotes  WHERE Seriescode = 'SP.DYN.TO65.MA.ZS' AND Year = 'YR1967';
SELECT f.Description  FROM Footnotes f  JOIN Country c ON f.Countrycode = c.CountryCode  WHERE c.ShortName = 'Albania' AND f.Year = 1981;
SELECT f.Description  FROM Footnotes f  WHERE f.Countrycode = (SELECT CountryCode FROM Country WHERE ShortName = 'The Bahamas')  AND f.Seriescode = 'SH.DTH.IMRT'  AND f.Year = 1984;
SELECT      c.ShortName  FROM      Country c  JOIN      Indicators i ON c.CountryCode = i.CountryCode  WHERE      i.IndicatorName = 'Net bilateral aid flows from DAC donors, Sweden (current US$)' AND i.Year = 1970 AND i.Value > 570000;
SELECT      c.TableName AS CountryName,      c.Wb2Code,      c.LendingCategory FROM      Country c JOIN      CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE      cn.Description LIKE '%Data source : Human Mortality Database by University of California, Berkeley, and Max Planck Institute for Demographic Research.%';
SELECT      s.Topic,      s.SeriesCode,      i.LicenseType FROM      Indicators i  JOIN      Series s ON s.SeriesCode = i.IndicatorCode  WHERE      i.CountryName = 'Haiti' AND      i.IndicatorName = 'Total reserves minus gold (current US$)' AND      i.Year = 1961 AND      i.Value = 3000000;
SELECT COUNT(*)  FROM Indicators  JOIN Country ON Indicators.CountryCode = Country.CountryCode  WHERE Indicators.IndicatorName = 'Adjusted net national income per capita (constant 2005 US$)'  AND Country.ExternalDebtReportingStatus = 'Preliminary'  AND Indicators.Value > 1000;
SELECT CountryName FROM Indicators WHERE Year = 1979 AND IndicatorName = 'Fertility rate, total (births per woman)' AND Value BETWEEN 4 AND 5;
SELECT      c.TableName,     cn.Description AS SourceOfIncomeExpenditureData FROM      Country c JOIN      Indicators i ON c.CountryCode = i.CountryCode JOIN      CountryNotes cn ON c.CountryCode = cn.Countrycode AND c.TableName = cn.Seriescode WHERE      c.Region = 'South Asia'      AND c.IncomeGroup = 'Low income';
SELECT f.Description  FROM Footnotes f  JOIN Indicators i ON f.Countrycode = i.CountryCode AND f.Seriescode = i.IndicatorCode  WHERE f.Year IN (SELECT Year FROM Indicators WHERE IndicatorName = 'Out-of-school children of primary school age, both sexes (number)')  AND f.Countrycode IN (SELECT CountryCode FROM Country WHERE Region = 'Latin America & Caribbean')
SELECT Footnotes.Description  FROM Indicators  JOIN Footnotes ON Indicators.CountryCode = Footnotes.Countrycode  WHERE Indicators.IndicatorName = 'Net migration'  AND Indicators.Year = 2002  AND Footnotes.Region = 'South America';
SELECT fn.Description  FROM Footnotes fn  JOIN Indicators ind ON fn.Countrycode = ind.CountryCode AND fn.Seriescode = ind.IndicatorCode  WHERE ind.IndicatorName = 'Out-of-school children of primary school age, both sexes (number)' AND fn.Region = 'North American'
SELECT      c.CountryName,     i.Value AS GDP_Growth_2014 FROM      Country c JOIN      Indicators i ON c.CountryCode = i.CountryCode WHERE      c.LatestTradeDataYear = 2013 AND     c.Year = 2014 AND     i.IndicatorName = 'GDP growth (annual %)' ORDER BY      GDP_Growth_2014 ASC;
SELECT      c.ShortName,     i.Value,     sn.Description AS Data_Source FROM      Country c JOIN      Indicators i ON c.CountryCode = i.CountryCode JOIN      Series s ON i_INDICATORCODE = s.SeriesCode JOIN      SeriesNotes sn ON s.SeriesCode = sn.SeriesCode WHERE      c.Region = 'Europe'     AND i.Year = 2005     AND i.IndicatorName = 'Out-of-pocket health expenditure (% of private expenditure on health)' ORDER BY      i.Value DESC LIMIT 10;
SELECT COUNT(*)  FROM Country  WHERE IncomeGroup = 'Low income' AND Region = 'South Asia';
SELECT ShortName  FROM Country  WHERE CountryCode IN (     SELECT CountryCode      FROM Indicators      WHERE Year > 2010 AND IndicatorName = 'LatestTradeData' );
SELECT      (COUNT(CASE WHEN `SystemOfTrade` = 'Special trade system' AND `Region` = 'Sub-Saharan Africa' THEN `CountryCode` END)      / CAST(COUNT(`CountryCode`) AS REAL) * 100) AS Percentage FROM `World_Development_Indicators.Country` WHERE `Region` = 'Sub-Saharan Africa'
SELECT AVG(T.IndicatorValue)  FROM (     SELECT I.Value AS IndicatorValue      FROM Indicators I      JOIN Country C ON I.CountryCode = C.CountryCode      WHERE C.Region = 'European & Central Asian' AND I.IndicatorName = 'Arms imports (SIPRI trend indicator values)'  ) T;
SELECT      c.ShortName  FROM      Country c  JOIN      Indicators i ON c.CountryCode = i.CountryCode  WHERE      c.IncomeGroup = 'Upper middle income' AND      i.IndicatorName = 'CO2 emissions (kt)' AND      i.Value = (SELECT MIN(Value) FROM Indicators WHERE IndicatorName = 'CO2 emissions (kt)')
SELECT MIN(I.Value)  FROM Indicators I  JOIN Country C ON I.CountryCode = C.CountryCode  JOIN Series S ON I.IndicatorCode = S.SeriesCode  JOIN OtherGroups OG ON C.OtherGroups = OG.OtherGroups  WHERE S.IndicatorName = 'International migrant stock, total' AND OG.OtherGroups = 'HIPC'
SELECT IndicatorName  FROM Indicators  JOIN Series ON Indicators.IndicatorCode = Series.SeriesCode  WHERE Series.Topic = 'Education: Inputs' AND Indicators.Year = 'YR2000';
SELECT COUNT(*)  FROM Indicators  JOIN Series ON Indicators.SeriesCode = Series.SeriesCode  WHERE Series.AggregationMethod = 'Sum'  AND Indicators.Year IN ('YR2001', 'YR2002', 'YR2003') AND Indicators.Periodicity = 'Annual';
SELECT SeriesCode FROM Footnotes WHERE Year = 2005 AND Description LIKE '%International Monetary Fund%' AND Description LIKE '%Balance of Payments Statistics Yearbook and data files%';
SELECT      (COUNT(CASE WHEN i.IndicatorName = 'Life expectancy at birth, female (years)' AND i.Value > 50 AND c.Region = 'South Asia' THEN 1 END)      / COUNT(CASE WHEN c.Region = 'South Asia' THEN 1 END)) * 100 AS percentage FROM      Indicators i JOIN      Country c ON i.CountryCode = c.CountryCode;
SELECT CountryName FROM Indicators JOIN Country ON Indicators.CountryCode = Country.CountryCode WHERE IndicatorName = 'Death rate, crude (per 1,000 people)' AND Year BETWEEN '1960' AND '1965' GROUP BY CountryName ORDER BY AVG(Value) DESC LIMIT 1;
SELECT IndicatorName  FROM Indicators  JOIN Country ON Indicators.CountryCode = Country.CountryCode  WHERE Country.Region = 'Arab World' AND Indicators.Year = 1960 AND Indicators.Value > 50;
SELECT CountryName FROM Indicators WHERE IndicatorName = 'Merchandise imports by the reporting economy (current US$)' AND Value = (SELECT MAX(Value)              FROM Indicators              WHERE IndicatorName = 'Merchandise imports by the reporting economy (current US$)');
SELECT IndicatorName FROM Indicators JOIN Series ON Indicators.SeriesCode = Series.SeriesCode WHERE Periodicity = 'Annual' AND Value > 100 AND Year = 1965;
SELECT IndicatorName FROM Indicators JOIN Series ON Indicators.SeriesCode = Series.SeriesCode WHERE SeriesNotes.Description LIKE '%open%' AND Year BETWEEN '1968' AND '1970' AND Value < 100;
SELECT c.CountryName, i.IndicatorName  FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE s.Topic = 'Private Sector & Trade: Exports' ORDER BY i.Value DESC LIMIT 1;
SELECT IndicatorName FROM Indicators JOIN Series ON Indicators.SeriesCode = Series.SeriesCode WHERE AggregationMethod = 'Weighted average' ORDER BY Value ASC LIMIT 1;
SELECT IndicatorName FROM Indicators JOIN Country ON Indicators.CountryCode = Country.CountryCode WHERE Country.ShortName = 'Sudan' AND Indicators.Periodicity = 'Annual' AND Indicators.Year = 1961;
SELECT CountryName, MIN(Value)  FROM Indicators  JOIN Series ON Indicators.IndicatorCode = Series.SeriesCode  WHERE Series.Topic = 'Health: Population: Structure'  AND Indicators.Year BETWEEN 1960 AND 1965  GROUP BY CountryName;
SELECT      (COUNT(CASE          WHEN i.Value < 80 AND c.IncomeGroup = 'Upper middle income' THEN c.CountryCode     END) * 100 / COUNT(c.CountryCode)) FROM      Indicators i JOIN      Country c ON c.CountryCode = i.CountryCode WHERE      i.IndicatorName = 'CO2 emissions from liquid fuel consumption (% of total)';
SELECT IndicatorCode FROM Indicators WHERE IndicatorName = 'Rural population';
SELECT      c.TableName FROM      Country c JOIN      Indicators i ON c.CountryCode = i.CountryCode JOIN      Series s ON s.SeriesCode = i.IndicatorCode JOIN      SeriesNotes sn ON sn.SeriesCode = s.SeriesCode WHERE      sn.Description = '2008 System of National Accounts'
SELECT s.SeriesCode  FROM Series s  JOIN Country c ON s.SeriesCode = c.SeriesCode  WHERE c.CurrencyUnit = 'Euro';
SELECT c.LongName  FROM Country AS c  JOIN Indicators AS i ON c.CountryCode = i.CountryCode  JOIN Series AS s ON s.SeriesCode = i.SeriesCode  WHERE s.SeriesCode = 'DT.DOD.DSTC.CD';
SELECT T2.SeriesCode  FROM Country AS T1  JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode  JOIN Series AS T3 ON T2.SeriesCode = T3.SeriesCode  WHERE T1.CurrencyUnit = 'Hong Kong dollar';
SELECT `TableName` FROM `Country` WHERE `Seriescode` = 'SP.DYN.TO65.MA.ZS'
SELECT CountryName FROM Indicators JOIN Country ON Indicators.CountryCode = Country.CountryCode WHERE Country.IncomeGroup = 'Low income';
SELECT      s.SeriesCode,      c.CountryCode FROM      Country c JOIN      Indicators i ON c.CountryCode = i.CountryCode JOIN      Series s ON i.IndicatorCode = s.SeriesCode WHERE      c.Region = 'Latin American & Caribbean' AND      c.IncomeGroup = 'Low income';
SELECT f.Seriescode  FROM Indicators i  JOIN Country c ON i.CountryCode = c.CountryCode  JOIN CurrencyUnit cu ON c.CurrencyUnit = cu.Code   JOIN Footnotes f ON i.SeriesCode = f.Seriescode AND c.CurrencyUnit = f.Countrycode  WHERE cu.Name = 'Australian dollar' AND c.IncomeGroup = 'Low middle income'
SELECT      c.LongName  FROM      Country c  JOIN      Indicators i ON c.CountryCode = i.CountryCode  WHERE      c.IncomeGroup = 'Upper middle income' AND      c.NationalAccountsBaseYear = (SELECT MIN(NationalAccountsBaseYear) FROM Country) GROUP BY      c.CountryCode,      c.LongName UNION SELECT      r.Region  FROM      Country c  JOIN      Indicators i ON c.CountryCode = i.CountryCode  JOIN      Country c2 ON c.CountryCode = c2.CountryCode AND c.NationalAccountsBaseYear = (SELECT MIN(NationalAccountsBaseYear) FROM Country)  JOIN      Region r ON c2.Region = r.Region
SELECT `CountryCode`, `ShortName` FROM `Country` WHERE `CurrencyUnit` = 'Euro' AND (`IncomeGroup` = 'High Income Group' OR `Region` IN ('Europe', 'OECD'));
SELECT `TableName`, `CurrencyUnit` FROM `Country` JOIN `Indicators` ON `Country.CountryCode` = `Indicators.CountryCode` JOIN `Series` ON `Indicators.IndicatorCode` = `Series.SeriesCode` WHERE `Series.SeriesCode` = 'FP.CPI.TOTL'
SELECT IndicatorName, IndicatorCode  FROM Indicators  JOIN Country ON Indicators.CountryCode = Country.CountryCode  WHERE Country.IncomeGroup = 'high income: non-OECD';
SELECT      s.SeriesCode  FROM      Country c  JOIN      Series s ON c.CountryCode = s.CountryCode  WHERE      c.CurrencyUnit = 'pound sterling' AND c.IncomeGroup = 'high income';
SELECT CountryCode, ShortName  FROM Country  LIMIT 10;
SELECT COUNT(*) AS num_countries_starting_with_A, CountryAlpha2Code FROM Country WHERE ShortName LIKE 'A%'
SELECT TableName FROM Country WHERE CurrencyUnit = 'Euro';
SELECT COUNT(*) AS num_countries, LongName FROM Country WHERE SpecialNotes IS NULL;
SELECT c.CountryName, c.Alpha2Code FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE c.IncomeGroup = 'High' AND c.Region = 'Asia';
SELECT `LongName`  FROM `Country`  WHERE `NationalAccountsBaseYear` < 1980;
SELECT Country.CountryCode  FROM Country  JOIN Indicators ON Country.CountryCode = Indicators.CountryCode  JOIN Series ON Indicators.IndicatorCode = Series.SeriesCode  WHERE Country.IncomeGroup = 'Low income' AND Series.SeriesCode = 'DT.DOD.DECT.CD';
SELECT T1.TableName  FROM Country AS T1  JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode  WHERE T2.Description = 'Covers mainland Tanzania only'
SELECT      cn.Description, sn.SeriesCode FROM      Country AS c JOIN      CountryNotes AS cn ON c.CountryCode = cn.Countrycode JOIN      Indicators AS i ON c.CountryCode = i.CountryCode JOIN      SeriesNotes AS sn ON i.SeriesCode = sn.SeriesCode WHERE      c.ShortName = 'Benin' AND      sn.Year = 2005;
SELECT fn.Description  FROM Footnotes fn  JOIN Country c ON fn.Countrycode = c.CountryCode  WHERE c.ShortName = 'Finland' AND fn.Year = 'YR2000';
SELECT DISTINCT T5.Year, T5.TableName  FROM Indicators AS T1  JOIN Country AS T2 ON T2.CountryCode = T1.CountryCode  JOIN Series AS T3 ON T3.SeriesCode = T1_INDICATOR_CODE  JOIN CountryNotes AS T4 ON T4.Countrycode = T2.CountryCode AND T4.Seriescode = T3.SeriesCode  JOIN Indicators AS T5 ON T5.CountryName = T2.ShortName AND T5.CountryCode = T2.CountryCode AND T5.IndicatorName = 'Air transport, passengers carried';
SELECT      c.LongName FROM      Country c JOIN      Indicators i ON c.CountryCode = i.CountryCode WHERE      i.IndicatorName IS NOT NULL AND i.Year = '1980';
SELECT      Country.TableName AS 'Country Name',     Country.CurrencyUnit AS 'Currency',     Indicators.IndicatorCode AS 'Indicator Code' FROM      Country JOIN      Indicators ON Country.CountryCode = Indicators.CountryCode WHERE      Country.LongName = 'Malaysia' AND Indicators.Year = '1970';
SELECT      c.CountryCode,      c.Region  FROM      Country c JOIN      Indicators i ON c.CountryCode = i.CountryCode WHERE      i.Value = (SELECT MAX(Value) FROM Indicators) ORDER BY      i.Value DESC LIMIT 5;
SELECT COUNT(DISTINCT T1.CountryCode) AS NumOfCountries, T1.CurrencyUnit  FROM Country AS T1  JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode  WHERE T2.Description = 'Sources: UN Energy Statistics (2014)'
SELECT COUNT(*) AS num_footnotes, Country.TableName  FROM Footnotes  JOIN CountryNotes ON Footnotes.Countrycode = CountryNotes.Countrycode AND Footnotes.Seriescode = CountryNotes.Seriescode  WHERE Footnotes.Year = 'YR1980' GROUP BY Country.TableName;
SELECT      s.SeriesCode,      c.Wb2Code FROM      Country c JOIN      CountryNotes cn ON c.CountryCode = cn.Countrycode JOIN      Series s ON cn.Seriescode = s.SeriesCode WHERE      cn.Description = 'Data sources : Eurostat';
SELECT      c.ShortName  FROM      Country c  JOIN      Indicators i ON c.CountryCode = i.CountryCode  JOIN      Series s ON i.SeriesCode = s.SeriesCode  WHERE      c.IncomeGroup = 'Low income'      AND s.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'  GROUP BY      c.CountryCode, c.ShortName  ORDER BY      AVG(i.Value) ASC  LIMIT 1;
SELECT SUM(I.Value)  FROM Indicators I  JOIN Country C ON I.CountryCode = C.CountryCode  WHERE C.IncomeGroup = 'Middle income' AND I.IndicatorName = 'urban population' AND I.Year = 1960;
SELECT      c.ShortName,      c.CurrencyUnit FROM      Country c JOIN      Indicators i ON c.CountryCode = i.CountryCode WHERE      i.IndicatorName = 'Adjusted net national income (annual % growth)' AND     i.Year = 1980 AND     i.Value = (SELECT MAX(Value) FROM Indicators WHERE IndicatorName = 'Adjusted net national income (annual % growth)' AND Year = 1980);
SELECT COUNT(DISTINCT CountryCode)  FROM Country  WHERE SystemOfNationalAccounts = '1993 System of National Accounts methodology.';
SELECT ShortName FROM Country WHERE VitalRegistrationComplete = 'Yes';
SELECT ShortName, LongName  FROM Country  WHERE CountryCode IN (     SELECT CountryCode      FROM Indicators      WHERE Year BETWEEN 2010 AND 2012          AND CountryName = Country.ShortName + Country.LongName          AND VitalRegistrationComplete = 'Yes' )
SELECT CountryName FROM Indicators WHERE IndicatorName = 'CO2 emissions (metric tons per capita)' AND Year = '1960' ORDER BY Value DESC LIMIT 1;
SELECT      (MAX(value) / MIN(value)) AS ratio,     country_name AS country_with_highest_number,     country_name AS country_with_lowest_number FROM      indicators WHERE      indicatorname = 'Number of infant deaths' AND year = '1971' ORDER BY      value DESC LIMIT 1,     value ASC LIMIT 1;
SELECT `ShortName`  FROM Country  JOIN Indicators ON Country.CountryCode = Indicators.CountryCode  JOIN Series ON Indicators.SeriesCode = Series.SeriesCode  WHERE Series.SeriesCode = 'SP.DYN.CBRT.IN';
SELECT      c.ShortName  FROM      Country c  JOIN      CountryNotes cn ON c.CountryCode = cn.Countrycode  JOIN      Series s ON cn.Seriescode = s.SeriesCode  WHERE      cn.Description = 'Data are classified as official aid.';
SELECT c.LongName  FROM Country c  JOIN Indicators i ON c.CountryCode = i.CountryCode  JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode AND cn.Seriescode = i.IndicatorCode  WHERE cn.Description = 'Estimates are based on regression.';
SELECT Country.LongName  FROM Country  JOIN Indicators ON Country.CountryCode = Indicators.CountryCode  WHERE Country.Region = 'East Asia & Pacific'  AND Indicators.IndicatorName = 'Urban population'  AND Indicators.Value > 2000000  AND Indicators.Year = '1970';
SELECT MAX(T5.Value)  FROM Indicators T5  JOIN Country T1 ON T5.CountryCode = T1.CountryCode  JOIN Series T2 ON T5.SeriesCode = T2.SeriesCode  WHERE T1.IncomeGroup = 'Upper middle income'  AND T2.IndicatorName = 'Population, total'  AND T5.Year = '1960';
SELECT COUNT(DISTINCT CountryCode)  FROM Country  WHERE SystemOfNationalAccounts = '1968 System of National Accounts methodology';
SELECT `ShortName`  FROM `Country` JOIN `Indicators` ON `Country`.`CountryCode` = `Indicators`.`CountryCode` JOIN `Series` ON `Indicators`.`IndicatorCode` = `Series`.`SeriesCode` WHERE `Country`.`IncomeGroup` = 'Upper middle income' AND `Country`.`Region` = 'East Asia & Pacific' AND `Series`.`Topic` = 'Social Protection & Labor: Migration'
SELECT      c.LongName  FROM      Country c  JOIN      Series s ON c.CountryCode = s.CountryCode  WHERE      s.Topic = 'Poverty: Shared Prosperity'
SELECT `TableName`  FROM `Country` JOIN `Indicators` ON `Country.CountryCode` = `Indicators.CountryCode` WHERE `Indicators.SeriesCode` = 'SP.DYN.CDRT.IN' AND `LatestTradeData` = '2013';
SELECT `LongName`  FROM `Country`  JOIN `Indicators` ON `Country.CountryCode` = `Indicators.CountryCode`  JOIN `Series` ON `Indicators.IndicatorCode` = `Series.SeriesCode`  WHERE `Region` = 'Sub-Saharan Africa' AND `Series.SeriesCode` = 'SP.DYN.AMRT.FE';
SELECT COUNT(DISTINCT ShortName)  FROM Country  WHERE CurrencyUnit = 'same_type_currency';
SELECT      c.LongName  FROM      Country c  WHERE      c.Region = 'South Asia'      AND c.IncomeGroup = 'Low income';
SELECT `LongName`  FROM `Country`  WHERE `SystemOfTrade` = 'Special trade system'  LIMIT 2;
SELECT      c.ShortName  FROM      Country c  JOIN      Indicators i ON c.CountryCode = i.CountryCode  WHERE      i.IndicatorName = 'CO2 emissions from transport (% of total fuel combustion)'  GROUP BY      c.CountryCode, c.ShortName  ORDER BY      SUM(i.Value) / (SELECT SUM(value) FROM Indicators WHERE IndicatorName = 'Total fuel combustion') DESC  LIMIT 1;
SELECT CountryName FROM Indicators WHERE IndicatorName = 'Arable land (% of land area)' ORDER BY Value ASC LIMIT 1;
SELECT DISTINCT Topic  FROM Series  WHERE LicenseType = 'Restricted';
SELECT CountryCode FROM Country WHERE IncomeGroup = 'Upper middle income' AND ExternalDebtReportingStatus = 'Preliminary';
SELECT      (COUNT(CASE WHEN c.CountryCode IN (         SELECT countrycode FROM Country WHERE Region = 'Middle East & North Africa'     ) AND c.ExternalDebtReportingStatus = 'Actual')      / COUNT(CASE WHEN c.CountryCode IN (         SELECT countrycode FROM Country WHERE Region = 'Middle East & North Africa'     )) * 100) AS Percentage FROM      Country c;
SELECT      c.Alpha2Code,     CASE          WHEN g.AccountingConcept = 'Budgetary central government' THEN g.AccountingConcept         ELSE 'Consolidated central government'     END AS GovernmentForm,     COUNT(*) AS NumberOfCountries FROM      Country c JOIN      Indicators i ON c.CountryCode = i.CountryCode JOIN      Footnotes f ON i.CountryCode = f.Countrycode AND i.SeriesCode = f.Seriescode JOIN      GovernmentAccountingConcept g ON c.CountryCode = g.CountryCode WHERE      f.Description = 'ExternalDebtReportingStatus = \'Actual\'' GROUP BY      c.Alpha2Code,     g.AccountingConcept ORDER BY      NumberOfCountries DESC;
SELECT COUNT(*)  FROM Country  WHERE Region = 'East Asia & Pacific'  AND ExternalDebtReportingStatus = 'Estimate';
SELECT      (COUNT(CASE WHEN c.Region = 'Sub-Saharan Africa' AND c.IncomeGroup = 'Lower middle income' THEN c.CountryCode END) * 100.0 / COUNT(c.CountryCode)) AS proportion FROM      Country c;
SELECT MAX(I.Value)  FROM Indicators I  JOIN Country C ON I.CountryCode = C.CountryCode  JOIN Series S ON I.IndicatorCode = S.SeriesCode  WHERE C.LongName = 'Republic of Benin'  AND S.IndicatorName = 'Agricultural land (% of land area)'  AND I.Year BETWEEN 1961 AND 1980;
SELECT T1.LongName  FROM Country AS T1  JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode  JOIN Series AS T3 ON T2.SeriesCode = T3.SeriesCode  JOIN CountryNotes AS T4 ON T1.CountryCode = T4.Countrycode AND T3.SeriesCode = T4.Seriescode  WHERE T4.Description = 'UN Energy Statistics (2014)'  LIMIT 3;
SELECT Value  FROM Indicators  WHERE IndicatorName = 'Deposit interest rate (%)'  AND CountryName = 'Commonwealth of Australia'  AND Year = '1979';
SELECT fn.Seriescode, cn.Description  FROM Footnotes fn  JOIN CountryNotes cn ON fn.Countrycode = cn.Countrycode  WHERE cn.CountryName = 'Germany';
SELECT Topic  FROM Series  WHERE ShortDefinition LIKE '%Austria%' OR LongDefinition LIKE '%Austria%';
SELECT      Topic,      Description  FROM      Series  WHERE      SeriesCode = 'SP.DYN.AMRT.MA';
SELECT COUNT(DISTINCT c.LongName) AS NumCountries, c.LongName  FROM Country c  JOIN Footnotes f ON c.CountryCode = f.Countrycode  WHERE f.Description = 'Not specified'  LIMIT 3;
SELECT CountryName FROM Indicators  JOIN Country ON Indicators.CountryCode = Country.CountryCode WHERE Country.ExternalDebtReportingStatus = 'Actual' AND Indicators.Year = 1980 AND Indicators.Value = 3018500;
SELECT      (COUNT(CASE WHEN T4.Value > 50 THEN 1 END) / COUNT(T4.CountryName)) * 100 AS Percentage FROM      Country AS T1 JOIN      Indicators AS T4 ON T1.CountryCode = T4.CountryCode WHERE      T1.Region = 'Latin America & Caribbean' AND T4.Year = '1961' AND T4.IndicatorName = 'Agricultural land (% of land area)';
SELECT `LongName`  FROM `Country`  WHERE `Region` = 'South Asia'  AND `IncomeGroup` = 'Low income';
SELECT IndicatorCode FROM Indicators WHERE CountryName = 'Brazil' AND IndicatorName = 'Mobile cellular subscriptions';
SELECT `LongName`  FROM `Country`  WHERE `Region` = 'Europe & Central Asia' AND `CurrencyUnit` = 'Danish krone';
SELECT      c.LongName,     (i.Value / SUM(i.Value)) * 100 AS RuralPopulationPercentage FROM      Country c JOIN      Indicators i ON c.CountryCode = i.CountryCode AND c.TableName = i.TableName WHERE      i.IndicatorName = 'Rural population (% of total population)' GROUP BY      c.CountryCode, c.LongName ORDER BY      RuralPopulationPercentage DESC LIMIT 1;
SELECT COUNT(DISTINCT Country.LongName) AS NumCountries, Country.LongName  FROM Country  JOIN Indicators ON Country.CountryCode = Indicators.CountryCode  WHERE Indicators.LatestPopulationCensus = '2011';
SELECT Value  FROM Indicators  WHERE CountryName = 'Italy'  AND IndicatorName = 'Agricultural land (sq. km)'  AND Year = '1968';
SELECT      c.LongName AS Country,     i.Year AS YearRecorded,     MAX(i.Value) AS MaxFemaleOutOfSchool FROM      Indicators i JOIN      Country c ON i.CountryCode = c.CountryCode WHERE      c.Region = 'Sub-Saharan Africa'     AND i.IndicatorName = 'Out-of-school children of primary school age, female (number)' GROUP BY      c.LongName, i.Year ORDER BY      MaxFemaleOutOfSchool DESC LIMIT 1;
SELECT T2.SeriesCode  FROM Indicators AS T1  JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName AND T1.Year = T2.Year  WHERE T1.CountryName = 'Islamic State of Afghanistan' AND T1.IndicatorName = 'Number of infant deaths' AND T1.Year = 1965;
SELECT COUNT(*)  FROM Country  WHERE SystemOfNationalAccounts = '1968 System of National Accounts methodology' AND Region = 'Middle East & North Africa';  SELECT CountryName, MAX(Value) as CO2_emissions  FROM Indicators  JOIN Country ON Country.CountryCode = Indicators.CountryCode  WHERE IndicatorName = 'CO2 emissions from solid fuel consumption (kt)' AND Region = 'Middle East & North Africa';
SELECT IndicatorCode FROM Indicators WHERE CountryName = 'Republic of Albania' AND Year = 1960;
SELECT T3.LendingCategory  FROM Indicators AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode JOIN CountryNotes AS T3 ON T2.CountryCode = T3.Countrycode AND T1.Year = T3.Seriescode WHERE T1.Value > 6140000 AND T1.IndicatorName = 'Cereal production (metric tons)' AND T1.Year = 1966;
SELECT      c.LongName,     c.Region FROM      Country c JOIN      Indicators i ON c.CountryCode = i.CountryCode WHERE      i.IndicatorName = 'Population in largest city' GROUP BY      c.CountryCode, c.LongName, c.Region HAVING      COUNT(CASE WHEN i.Year BETWEEN 1960 AND 1979 THEN 1 ELSE NULL END) = 19 ORDER BY      MAX(i.Value) DESC LIMIT 1;
SELECT      SUM(I.Value) AS Total_Co2_Emission,     MAX(I.Value) AS Highest_Co2_Emission_Year FROM      Indicators I JOIN      Country C ON I.CountryCode = C.CountryCode WHERE      I.Year BETWEEN 1975 AND 1980 AND     I.IndicatorName LIKE '%CO2%'
SELECT      c.ShortName,      MIN(i.Value) AS LandArea_sq_km,      c.IncomeGroup  FROM      Country c  JOIN      Indicators i ON c.CountryCode = i.CountryCode  WHERE      i.Year BETWEEN 1961 AND 1979      AND i.IndicatorName LIKE '%Land area (sq. km)%' GROUP BY      c.CountryCode,      c.ShortName,      c.IncomeGroup;
SELECT AVG(T.IndicatorCode) AS AveragePassengersCarried FROM Indicators T JOIN Country C ON T.CountryCode = C.CountryCode WHERE T.IndicatorName = 'Air transport, passengers carried' AND C.ShortName = 'Bulgaria' AND T.Year BETWEEN 1970 AND 1980;
SELECT      s.PppSurveyYear  FROM      Country c  JOIN      Indicators i ON c.CountryCode = i.CountryCode  JOIN      Series s ON i.SeriesCode = s.SeriesCode  WHERE      c.ShortName = 'Angola'
SELECT COUNT(*)  FROM Country  WHERE Region = 'North America' AND VitalRegistrationComplete = 'Yes'
SELECT Year  FROM Indicators  WHERE CountryCode = '1A' AND IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)';
SELECT      c.LongName  FROM      Indicators i JOIN      Country c ON i.CountryCode = c.CountryCode WHERE      i.IndicatorName = 'Arms exports (SIPRI trend indicator values)' AND      i.Value = 3000000 AND      i.Year = 1960;
SELECT DISTINCT c.Alpha2Code  FROM Country c  JOIN Indicators i ON c.CountryCode = i.CountryCode  WHERE i.IndicatorName = 'Rural population' AND i.Year = 1960;
SELECT      c.LongName,     i.Value,     cn.Description FROM      World_Development_Indicators.country c JOIN      World_Development_Indicators.indicators i ON c.CountryCode = i.CountryCode JOIN      World_Development_Indicators.countrynotes cn ON c.CountryCode = cn.CountryCode WHERE      i.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND     i.Year = '1960' AND     i.Value = (         SELECT              MAX(value)         FROM              World_Development_Indicators.indicators         WHERE              IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND             Year = '1960'     );
SELECT      (SUM(I.Value) WHERE I.Year = 1961 AND I.CountryCode = '1A' AND I.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%') -      (SUM(I.Value) WHERE I.Year = 1960 AND I.CountryCode = '1A' AND I.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%') AS Increase FROM Indicators I
SELECT cn.Description  FROM CountryNotes cn  JOIN Indicators i ON cn.Countrycode = i.CountryCode AND cn.Seriescode = i.SeriesCode  WHERE cn.Countrycode = 'AU' AND cn.Seriescode = 'SP.ADO.TFRT';
SELECT      cn.Description  FROM      CountryNotes AS cn JOIN      Series AS s ON cn.Seriescode = s.SeriesCode WHERE      cn.Countrycode = (         SELECT              c.Code          FROM              Country AS c          WHERE              c.ShortName = 'Aruba'     ) AND      s.Topic = 'Environment: Energy production & use';
SELECT DISTINCT c.CountryName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode AND i.IndicatorCode = cn.Seriescode WHERE cn.Description LIKE '%notes on the indicator BX.KLT.DINV.CD.WD%'
SELECT `Region` FROM Country JOIN Indicators ON Country.CountryCode = Indicators.CountryCode WHERE Indicators.IndicatorName = 'Inflation, consumer prices (annual %)'
SELECT COUNT(DISTINCT c.CountryCode) FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode AND i.IndicatorCode = cn.Seriescode WHERE i.IndicatorName = 'Stocks traded, turnover ratio of domestic shares (%)';
SELECT T3.AgggregationMethod  FROM Indicators AS T1  JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode  JOIN Series AS T3 ON T3.SeriesCode = T1.IndicatorCode  WHERE T1.Year = 1960 AND T2.TableName = 'Arab World' AND T1.Value = 133;
SELECT Value  FROM Indicators  WHERE IndicatorName = 'Adolescent fertility rate' AND        LongDefinition = 'The number of births per 1,000 women ages 15-19.' AND        CountryName = 'Arab World' AND        Year = 1960;
SELECT      ((SUM(I.Value WHERE I.Year = 1961) - SUM(I.Value WHERE I.Year = 1960)) / SUM(I.Value WHERE I.Year = 1960)) * 100 AS PercentageIncrease FROM      Indicators I JOIN      Country C ON I.CountryCode = C.Alpha2Code WHERE      C.Alpha2Code = '1A' AND      I.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%';
SELECT AVG(T4.Value)  FROM Indicators AS T4 JOIN Country AS T1 ON T1.CountryCode = T4.CountryCode WHERE T1.Alpha2Code = '1A' AND T4.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)';
SELECT DISTINCT m2d.directorid  FROM u2base u  JOIN movies2directors m2d ON u.movieid = m2d.movieid  WHERE u.rating > 4;
SELECT COUNT(*)  FROM users  JOIN u2base ON users.userid = u2base.userid  WHERE u2base.rating = 5 AND users.u_gender = 'M';
SELECT DISTINCT m.genre  FROM movies2directors m2d JOIN movies m ON m2d.movieid = m.movieid JOIN movies2actors ma ON m.movieid = ma.movieid WHERE ma.actorid = 851
SELECT COUNT(*)  FROM movies  JOIN u2base ON movies.movieid = u2base.movieid  JOIN movies2directors ON movies.movieid = movies2directors.movieid  WHERE movies.country = 'USA' AND u2base.rating < 3;
SELECT COUNT(*)  FROM movies  JOIN movies2directors ON movies.movieid = movies2directors.movieid  WHERE movies.country = 'France' AND movies2directors.genre = 'drama';
SELECT AVG(users.occupation)  FROM u2base  JOIN users ON u2base.userid = users.userid  WHERE u2base.rating <= 2;
SELECT m.movieid, m.country, AVG(u2base.rating) AS average_rating FROM movies m JOIN u2base ON m.movieid = u2base.movieid WHERE m.country = 'USA' GROUP BY m.movieid, m.country ORDER BY average_rating DESC LIMIT 10;
SELECT AVG(cast_num)  FROM u2base  JOIN movies ON u2base.movieid = movies.movieid  WHERE movies.country = 'USA';
SELECT m.movieid, m.country, m.runningtime  FROM movies AS m  JOIN u2base AS ub ON m.movieid = ub.movieid  WHERE m.isEnglish = 'F' AND m.country != 'Unknown Country'  GROUP BY m.movieid  ORDER BY AVG(ub.rating) DESC  LIMIT 5;
SELECT COUNT(*)  FROM (SELECT ma.actorid        FROM movies2actors AS ma        JOIN movies AS m ON ma.movieid = m.movieid        JOIN u2base AS ub ON ub.movieid = m.movieid        JOIN actors AS a ON a.actorid = ma.actorid        WHERE ub.rating = 5        AND EXISTS (SELECT 1                    FROM movies2actors AS ma2                    JOIN movies AS m2 ON ma2.movieid = m.movieid                    JOIN actors AS a2 ON a2.actorid = ma2.actorid                    WHERE ma2.actorid = ma.actorid                    AND a2.a_quality = 'best')       ) as filtered_actors;
SELECT AVG(u2base.rating)  FROM u2base  JOIN movies ON u2base.movieid = movies.movieid  WHERE movies.country = 'France' AND movies.year = 4;
SELECT COUNT(*)  FROM u2base  JOIN movies ON u2base.movieid = movies.movieid  JOIN movies2directors ON movies.movieid = movies2directors.movieid  JOIN movies2actors ON movies.movieid = movies2actors.movieid  WHERE movies.country = 'UK' AND movies.runningtime < 2;
SELECT T1.userid  FROM users AS T1  JOIN u2base AS T2 ON T1.userid = T2.userid  JOIN movies AS T3 ON T3.movieid = T2.movieid  WHERE T1.u_gender = 'M' AND T3.country = 'France' AND T3.runningtime = 2 AND T2.rating < 3;
SELECT COUNT(*)  FROM (SELECT ma.actorid        FROM actors AS a        JOIN movies2actors AS ma ON a.actorid = ma.actorid        WHERE a.a_quality = 0) AS worstActresses  JOIN u2base AS ub ON worstActresses.actorid = ub.movieid  WHERE ub.rating > 3;
SELECT userid  FROM u2base  WHERE rating = 5 GROUP BY userid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ma.actorid, m.genre  FROM u2base u JOIN movies2actors ma ON u.movieid = ma.movieid JOIN movies2directors md ON u.movieid = md.movieid JOIN actors a ON ma.actorid = a.actorid WHERE md.directorid = 22397;
SELECT      T3.actorid,     T4.directorid FROM      movies2directors AS T4 JOIN      movies AS T1 ON T1.movieid = T4.movieid JOIN      movies2actors AS T3 ON T3.movieid = T1.movieid WHERE      T4.genre = 'action';
SELECT COUNT(*)  FROM actors  JOIN u2base ON actors.actorid = u2base.movieid  JOIN movies ON u2base.movieid = movies.movieid  JOIN movies2actors ON movies.movieid = movies2actors.movieid  WHERE actors.a_gender = 'F' AND movies.year = 4;
SELECT T3.actorid  FROM u2base AS T1  JOIN movies AS T2 ON T1.movieid = T2.movieid  JOIN actors AS T3 ON T3.actorid = T2.actorid  WHERE T3.a_quality = 3  AND T2.isEnglish = 'T'  AND T2.country = 'USA';
SELECT m.movieid  FROM movies m  JOIN movies2directors md ON m.movieid = md.movieid  JOIN directors d ON md.directorid = d.directorid  WHERE m.runningtime = 3 AND d.avg_revenue = 1;
SELECT m.genre  FROM movies m  JOIN movies2directors md ON m.movieid = md.movieid  WHERE m.country = 'UK';
SELECT m.genre FROM u2base ub JOIN movies m ON ub.movieid = m.movieid JOIN users u ON ub.userid = u.userid WHERE u.age = 18 GROUP BY m.genre ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T3.actorid  FROM u2base AS T1  JOIN movies2actors AS T2 ON T1.movieid = T2.movieid   JOIN actors AS T3 ON T2.actorid = T3.actorid  WHERE T1.userid IN (SELECT T1.userid FROM u2base AS T1 JOIN users AS T2 ON T1.userid = T2.userid WHERE T2.occupation = 5)  GROUP BY T3.actorid  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT DISTINCT T2.age  FROM u2base AS T1 JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 3
SELECT      m.country FROM      movies AS m JOIN      movies2directors AS md ON m.movieid = md.movieid WHERE      md.genre = 'Action';
SELECT m.movieid  FROM movies m  JOIN movies2actors ma ON m.movieid = ma.movieid  JOIN u2base ub ON m.movieid = ub.movieid  GROUP BY m.movieid  ORDER BY AVG(ub.rating) DESC  LIMIT 5;
SELECT m.movieid, m.title  FROM movies m  JOIN movies2directors md ON m.movieid = md.movieid  JOIN movies2actors ma ON m.movieid = ma.movieid  WHERE m.isEnglish = 'F' AND md.genre = 'adventure' AND m.country = 'UK'  LIMIT 5;
SELECT      (COUNT(CASE WHEN u.u_gender = 'F' THEN 1 END)       OVER ()      ) * 100.0 / COUNT(*) OVER () AS female_percentage_viewing_movies_rating_2 FROM      movielens.users u JOIN      movielens.u2base ub ON u.userid = ub.userid WHERE      ub.rating = 2;
SELECT      COUNT(*) - (SELECT COUNT(*) FROM movielens.users WHERE u_gender = 'M') AS female_male_difference FROM      movielens.u2base JOIN      movielens.movies2directors ON movielens.u2base.movieid = movielens.movies2directors.movieid JOIN      movielens.movies ON movielens.u2base.movieid = movielens.movies.movieid JOIN      movielens.directors ON movielens.movies2directors.directorid = movielens.directors.directorid WHERE      movielens.directors.genre = 'Horror';
SELECT movies.genre  FROM movies  WHERE movies.year = (SELECT MAX(year) FROM movies) AND movies.isEnglish = 'T';
SELECT COUNT(*)  FROM movies  JOIN movies2directors ON movies.movieid = movies2directors.movieid  JOIN countries ON movies.country = countries.country_name   WHERE movies2directors.genre = 'action'  AND countries.country_name = 'USA'  AND movies.isEnglish = 'F';
SELECT COUNT(*)  FROM u2base u  JOIN users us ON u.userid = us.userid  WHERE u.gender = 'M'  AND us.age <= 18  AND u.rating = (SELECT MAX(rating) FROM u2base WHERE userid = u.userid);
SELECT movieid  FROM u2base  JOIN users ON u2base.userid = users.userid  WHERE u_gender = 'F'  GROUP BY movieid  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM movies  JOIN u2base ON movies.movieid = u2base.movieid  JOIN countries ON movies.country = 'UK'  WHERE u2base.rating = (SELECT MAX(rating) FROM u2base)
SELECT m.movieid  FROM movies m  JOIN u2base u ON m.movieid = u.movieid  WHERE m.year = (SELECT MAX(year) FROM movies) AND u.rating = 1;
SELECT COUNT(*)  FROM movies  WHERE isEnglish = 'T' AND year = (SELECT MIN(year) FROM movies WHERE isEnglish = 'T') AND rating = 1;
SELECT COUNT(DISTINCT u.userid)  FROM users u  JOIN u2base r ON u.userid = r.userid  JOIN movies m ON m.movieid = r.movieid  JOIN movies2directors md ON md.movieid = m.movieid  JOIN directors d ON d.directorid = md.directorid  WHERE u.u_gender = 'F'  AND m.country = 'France';
SELECT COUNT(DISTINCT m.directorid) FROM movies AS m JOIN movies2directors AS md ON m.movieid = md.movieid JOIN directors AS d ON d.directorid = md.directorid WHERE md.genre = 'action' AND d.d_quality = 4;
SELECT T3.genre  FROM movies2directors AS T1  JOIN directors AS T2 ON T1.directorid = T2.directorid  JOIN movies AS T3 ON T1.movieid = T3.movieid  WHERE T2.avg_revenue = (SELECT MAX(avg_revenue) FROM directors)
SELECT COUNT(DISTINCT m.movieid) FROM movies m JOIN movies2actors ma ON m.movieid = ma.movieid JOIN actors a ON ma.actorid = a.actorid WHERE m.isEnglish = 'T' AND a.a_gender = 'M' AND a.a_quality = (SELECT MAX(a2.a_quality) FROM actors a2 WHERE a2.a_gender = 'M');
SELECT T4.country  FROM actors AS T1  JOIN movies2actors AS T2 ON T1.actorid = T2.actorid  JOIN movies AS T4 ON T4.movieid = T2.movieid  WHERE T1.a_quality = 0;
SELECT AVG(u2base.rating) AS avg_rating FROM u2base JOIN movies2directors ON u2base.movieid = movies2directors.movieid JOIN movies ON movies.movieid = movies2directors.movieid WHERE movies.country = 'USA' AND movies2directors.genre = 'action';
SELECT COUNT(*)  FROM (   SELECT m.movieid    FROM movies2directors AS m2d    JOIN movies AS m ON m2d.movieid = m.movieid    JOIN directors AS d ON m2d.directorid = d.directorid    WHERE d.d_quality = 5 ) AS best_directed_movies  JOIN u2base AS ub ON ub.movieid = best_directed_movies.movieid  GROUP BY best_directed_movies.movieid  HAVING AVG(ub.rating) > 3.5
SELECT m.movieid, AVG(u.ratio) as average_rating FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN movies2actors ma ON m.movieid = ma.movieid JOIN u2base u ON m.movieid = u.movieid WHERE md.genre = 'Adventure' GROUP BY m.movieid ORDER BY average_rating DESC LIMIT 1;
SELECT COUNT(*)  FROM users  JOIN u2base ON users.userid = u2base.userid  WHERE u2base.movieid = '2462959' AND users.u_gender = 'F';
SELECT m.movieid  FROM movies m  JOIN u2base u ON m.movieid = u.movieid  WHERE m.runningtime = 0  GROUP BY m.movieid  ORDER BY COUNT(DISTINCT u.userid) DESC  LIMIT 1;
SELECT ma.actorid, u2b.rating  FROM movies2actors AS ma  JOIN u2base AS u2b  ON ma.movieid = u2b.movieid  WHERE ma.movieid = 1722327;
SELECT directorid, COUNT(movieid) as num_films_directed FROM movies2directors  JOIN directors ON movies2directors.directorid = directors.directorid WHERE directors.d_quality = 5 GROUP BY directorid ORDER BY num_films_directed DESC LIMIT 1;
SELECT COUNT(*)  FROM u2base  JOIN movies2directors ON u2base.movieid = movies2directors.movieid  WHERE movies2directors.genre = 'drama' AND u2base.rating = 3;
SELECT COUNT(*)  FROM u2base  WHERE rating = 5  AND userid IN (     SELECT userid      FROM users      WHERE age BETWEEN 25 AND 35 );
SELECT m.movieid  FROM movies m  JOIN movies2directors md ON m.movieid = md.movieid  WHERE md.genre = 'horror' AND m.movieid IN (     SELECT u2b.movieid      FROM u2base u2b      WHERE u2b.rating = 1 );
SELECT DISTINCT md.directorid  FROM movies2directors md JOIN movies m ON md.movieid = m.movieid JOIN u2base ub ON ub.movieid = m.movieid JOIN movies2directors md2d ON md2d.movieid = m.movieid JOIN movies2actors ma ON ma.movieid = m.movieid JOIN actors a ON a.actorid = ma.actorid JOIN movies m2c ON m2c.movieid = m.movieid JOIN countries c ON c.countryid = m2c.countryid WHERE c.country = 'France';
SELECT users.userid, users.age  FROM u2base  JOIN users ON u2base.userid = users.userid  WHERE u2base.movieid = 1695219;
SELECT genre  FROM movies2directors  JOIN movies ON movies2directors.movieid = movies.movieid  WHERE movies.isEnglish = 'F'  GROUP BY genre  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT      MA.actorid AS 'Actor ID',      UA.userid AS 'User ID',      UA.rating AS 'Rating',     MD.directorid AS 'Director ID' FROM      movies2actors MA      JOIN u2base UB ON UB.movieid = MA.movieid AND UB.movieid = 1949144     JOIN users UA ON UA.userid = UB.userid      JOIN movies2directors MD ON MD.movieid = MA.movieid AND MD.movieid = 1949144;
SELECT      COUNT(DISTINCT ma.actorid) * 100.0 / (SELECT COUNT(DISTINCT ma2.actorid) FROM movies2actors ma2 WHERE ma2.movieid IN (SELECT movieid FROM movies WHERE country = 'UK')) AS percentage FROM movies2actors ma JOIN movies m ON ma.movieid = m.movieid JOIN u2base ub ON ub.movieid = ma.movieid AND ub.rating >= 3 WHERE m.country = 'UK';
SELECT      (COUNT(DISTINCT CASE WHEN d_quality < avg_revenue THEN directorid END) * 100.0 / COUNT(directorid)) as box_office_success_paradox_percentage FROM      movies2directors m2d JOIN      directors d ON m2d.directorid = d.directorid WHERE      movies2directors.genre = 'action';
SELECT ma.actorid  FROM movies2actors AS ma  JOIN movies AS m ON ma.movieid = m.movieid  WHERE m.year = (SELECT MAX(year) FROM movies);
SELECT ma.actorid  FROM movies m  JOIN movies2actors ma ON m.movieid = ma.movieid  WHERE m.isEnglish = 'T' AND m.runningtime = 2;
SELECT ma.actorid  FROM movies2actors AS ma  JOIN movies AS m ON ma.movieid = m.movieid  WHERE m.country = 'France'  GROUP BY ma.actorid  HAVING COUNT(ma.actorid) >= 2;
SELECT COUNT(*)  FROM movies  JOIN u2base ON movies.movieid = u2base.movieid  JOIN movies2actors ON movies.movieid = movies2actors.movieid  WHERE movies.country = 'USA' AND movies2actors.cast_num > 1;
SELECT movieid  FROM movies  WHERE year = 1 AND EXISTS (     SELECT 1 FROM movies2actors WHERE movies2actors.movieid = movies.movieid AND cast_num = 0 )
SELECT COUNT(DISTINCT a.actorid) FROM actors a JOIN movies2actors mca ON a.actorid = mca.actorid JOIN movies m ON m.movieid = mca.movieid WHERE m.country IN ('US', 'UK');
SELECT COUNT(DISTINCT d.directorid) FROM directors d JOIN movies2directors m ON d.directorid = m.directorid WHERE d.avg_revenue = 4 AND m.genre IN ('action', 'adventure');
SELECT DISTINCT directorid  FROM movies2directors  WHERE d_quality >= 3 AND genre != ''  GROUP BY directorid  HAVING COUNT(DISTINCT genre) >= 2;
SELECT COUNT(*)  FROM movies  JOIN movies2directors ON movies.movieid = movies2directors.movieid  WHERE movies.country = 'USA' AND movies2directors.genre = 'comedy';
SELECT COUNT(*)  FROM movies  JOIN movies2directors ON movies.movieid = movies2directors.movieid  WHERE movies.year = (SELECT MAX(year) FROM movies)  AND movies2directors.genre IN ('drama', 'action');
SELECT m.movieid  FROM movies m  JOIN movies2directors md ON m.movieid = md.movieid  WHERE md.genre = 'horror' AND m.runningtime >= 2;
SELECT      (SUM(CASE WHEN u2base.rating = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(u2base.movieid)) AS NegativeCriticalReception FROM      u2base JOIN      movies ON u2base.movieid = movies.movieid WHERE      movies.country = 'American';
SELECT COUNT(*)  FROM u2base  JOIN movies2directors ON u2base.movieid = movies2directors.movieid  WHERE movies2directors.genre = 'comedy' AND u2base.rating = 1;
SELECT      d_quality FROM      directors d JOIN      movies2directors m2d ON d.directorid = m2d.directorid JOIN      u2base u ON u.movieid = m2d.movieid WHERE      u.rating = 1 GROUP BY      d.directorid HAVING      MAX(COUNT(u.movieid)) = (         SELECT              COUNT(movieid)          FROM              u2base u          WHERE              u.rating = 1     ) LIMIT 1;
SELECT COUNT(*)  FROM movies  JOIN u2base ON movies.movieid = u2base.movieid  JOIN countries ON movies.country = countries.country_id   WHERE countries.name = 'France' AND u2base.rating = (SELECT MAX(rating) FROM u2base)
SELECT m.movieid, COUNT(u.userid) as rating_count  FROM movies m  JOIN u2base u ON m.movieid = u.movieid  JOIN users us ON u.userid = us.userid  WHERE us.age = 25  GROUP BY m.movieid  ORDER BY rating_count DESC  LIMIT 1;
SELECT COUNT(DISTINCT u.userid)  FROM users u  JOIN u2base ub ON u.userid = ub.userid  JOIN movies m ON ub.movieid = m.movieid  WHERE u.age = 35 AND m.country = 'UK';
SELECT users.userid, users.age  FROM u2base  JOIN users ON u2base.userid = users.userid  WHERE u2base.movieid = 2409051 AND u2base.rating = 2;
SELECT m.movieid  FROM movies m  WHERE m.year = 1  ORDER BY m.rating DESC  LIMIT 1;
SELECT DISTINCT m.movieid FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN movies2actors ma ON m.movieid = ma.movieid JOIN u2base ub ON m.movieid = ub.movieid JOIN countries c ON m.country = c.countryid WHERE c.country = 'France' ORDER BY COUNT(ub.rating) ASC LIMIT 1;
SELECT COUNT(*)  FROM actors  JOIN u2base ON actors.actorid = u2base.movieid  JOIN movies ON u2base.movieid = movies.movieid  WHERE actors.a_gender = 'F' AND movies.country IN ('French', 'USA');
SELECT COUNT(DISTINCT T3.actorid)  FROM u2base T1  JOIN movies2actors T2 ON T1.movieid = T2.movieid   JOIN actors T3 ON T3.actorid = T2.actorid  WHERE T1.rating = 5;
SELECT m.title, AVG(u2base.rating) as average_rating FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN movies2actors ma ON m.movieid = ma.movieid JOIN u2base ON m.movieid = u2base.movieid WHERE md.genre = 'Crime' GROUP BY m.movieid ORDER BY average_rating ASC LIMIT 1;
SELECT      (SUM(CASE WHEN T4.a_gender = 'M' THEN 1 ELSE 0 END) /       SUM(CASE WHEN T4.a_gender = 'F' THEN 1 ELSE 0 END)) * 100 AS RatioGenderActorsToActresses FROM      actors AS T4 JOIN      movies AS T3 ON T3.country = 'UK' JOIN      movies2actors AS T2 ON T2.movieid = T3.movieid JOIN      u2base AS T1 ON T1.movieid = T3.movieid WHERE      T1.rating > 3;
SELECT COUNT(*)  FROM u2base  JOIN users ON u2base.userid = users.userid  WHERE users.age = 35 AND users.u_gender = 'F' AND u2base.movieid = 1711133 AND u2base.rating = 3;
SELECT COUNT(*)  FROM u2base ub  JOIN movies m ON ub.movieid = m.movieid  JOIN u2base u2b ON ub.userid <> u2b.userid AND ub.movieid = u2b.movieid  WHERE m.country = 'UK'  AND m.year = (SELECT MIN(year) + 1 FROM movies WHERE country = 'UK')  AND m.runningtime = 2  AND ub.rating = u2b.rating = 1;
SELECT directorid  FROM movies2directors  JOIN directors ON movies2directors.directorid = directors.directorid  WHERE directors.avg_revenue = 2 AND directors.d_quality = 3 AND movies2directors.genre <> 'comedy' GROUP BY directorid  HAVING COUNT(*) > 0;
SELECT      (COUNT(CASE WHEN T4.actorid IN (SELECT actorid FROM actors WHERE a_gender = 'F' AND a_quality = 2) AND T3.cast_num = 2 THEN 1 ELSE NULL END)      /     COUNT(DISTINCT (SELECT actorid FROM actors WHERE a_gender = 'F'))) * 100 AS percentage FROM      movies2actors T3 JOIN      movies T1 ON T1.movieid = T3.movieid JOIN      actors T4 ON T4.actorid = T3.actorid WHERE      T1.movieid = 1672580;
SELECT      COUNT(*) / (SELECT COUNT(*) FROM actors WHERE a_gender = 'F') AS ratio FROM      actors a JOIN      movies2actors m2a ON a.actorid = m2a.actorid WHERE      m2a.cast_num = (SELECT MAX(cast_num) FROM movies2actors) AND      a_quality = 0;
SELECT actorid  FROM movies2actors  GROUP BY actorid  ORDER BY COUNT(movieid) DESC  LIMIT 1;
SELECT m.genre  FROM movies2directors AS m2d JOIN movies AS m ON m2d.movieid = m.movieid GROUP BY m.genre ORDER BY COUNT(*) DESC LIMIT 1;
SELECT m.genre FROM movies2directors AS m2d JOIN movies AS m ON m2d.movieid = m.movieid JOIN directors AS d ON d.directorid = m2d.directorid WHERE d.d_quality = 0 GROUP BY m.genre ORDER BY COUNT(*) DESC LIMIT 1;
SELECT m.movieid  FROM movies m  JOIN movies2directors md ON m.movieid = md.movieid  JOIN movies2actors ma ON m.movieid = ma.movieid  JOIN u2base ub ON m.movieid = ub.movieid  WHERE m.country = 'USA' AND m.isEnglish = 'F'  GROUP BY m.movieid  ORDER BY AVG(ub.rating) ASC  LIMIT 1;
SELECT AVG(m.runningtime)  FROM movies m  JOIN movies2directors md ON m.movieid = md.movieid  JOIN directors d ON md.directorid = d.directorid  WHERE md.genre = 'total' AND d.d_quality = 4 AND d.avg_revenue = 4;
SELECT m.movieid, m.title  FROM movies m  JOIN u2base u ON m.movieid = u.movieid  JOIN users u2 ON u.userid = u2.userid  WHERE u2.u_gender = 'F' AND u2.occupation = 3  GROUP BY m.movieid  ORDER BY AVG(u.rating) DESC  LIMIT 10;
SELECT COUNT(*) AS num_female_actresses,         movies.country,         movies.runningtime  FROM movies  JOIN u2base ON movies.movieid = u2base.movieid  JOIN movies2actors ON movies.movieid = movies2actors.movieid  JOIN actors ON movies2actors.actorid = actors.actorid  WHERE movies.movieid = 2312852 AND actors.a_gender = 'F';
SELECT COUNT(*)  FROM movies  JOIN movies2directors ON movies.movieid = movies2directors.movieid  WHERE movies2directors.genre = 'horror' AND movies2directors.directorid IN (SELECT directorid FROM directors WHERE d_quality = 0);
SELECT DISTINCT m.genre  FROM movies m  JOIN movies2directors md ON m.movieid = md.movieid  WHERE m.isEnglish = 'T' AND m.runningtime <= 120 AND m.country <> 'native_country' AND md.genre IS NOT NULL;
SELECT m.title FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN movies2actors ma ON m.movieid = ma.movieid JOIN u2base ub ON m.movieid = ub.movieid WHERE m.isEnglish = 1 AND m.country = 'UK' AND md.genre = 'comedy' AND m.runningtime = 3 AND ub.age BETWEEN 45 AND 50 AND ub.rating = (     SELECT MAX(ub2.rating)     FROM u2base ub2     WHERE ub2.movieid = m.movieid );
SELECT      ((COUNT(CASE WHEN m.isEnglish = 'T' THEN 1 END)       - COUNT(CASE WHEN m.isEnglish = 'F' THEN 1 END))       / (SELECT COUNT(*) FROM movies AS m JOIN movies2directors AS md ON m.movieid = md.movieid WHERE md.genre = 'Crime' AND EXISTS (SELECT * FROM countries AS c WHERE c.countryName != 'OtherCountry'))) * 100 AS PercentageDifference FROM      movies AS m  JOIN      movies2directors AS md ON m.movieid = md.movieid  JOIN      u2base AS ub ON m.movieid = ub.movieid WHERE      m.year = 3 AND md.genre = 'Crime' AND ub.country = 'OtherCountry';
SELECT      d.directorid,     m.genre,     COUNT(CASE WHEN a.a_gender = 'F' THEN 1 END) AS female_actors_casted,     COUNT(CASE WHEN a.a_gender = 'M' THEN 1 END) AS male_actors_casted,     (COUNT(CASE WHEN a.a_quality = 5 THEN 1 END) / COUNT(CASE WHEN a.a_quality != 0 THEN 1 END)) * 100 AS best_quality_percentage,     (COUNT(CASE WHEN a.a_quality = 0 THEN 1 END) / COUNT(CASE WHEN a.a_quality != 0 THEN 1 END)) * 100 AS worst_quality_percentage FROM      users u INNER JOIN      u2base ub ON u.userid = ub.userid INNER JOIN      movies m ON m.movieid = ub.movieid INNER JOIN      movies2actors ma ON ma.movieid = ub.movieid INNER JOIN      actors a ON a.actorid = ma.actorid INNER JOIN      movies2directors md ON md.movieid = ub.movieid   INNER JOIN      directors d ON d.directorid = md.directorid   WHERE      u.userid IN (SELECT userid FROM u2base WHERE movieid = 1684910)     AND m.movieid = 1684910 GROUP BY      d.directorid,     m.genre;
SELECT p.ProductName  FROM people AS pe  JOIN central_superstore AS cs ON pe.CustomerID = cs.CustomerID  JOIN product AS p ON cs.ProductID = p.ProductID  WHERE pe.CustomerID = 'CA-2011-112326' AND cs.Region = 'Central';
SELECT      MAX(SUM(JULIANDAY(`Ship Date`) - JULIANDAY(`Order Date`))) as longest_shipment_time FROM      people p JOIN      central_superstore cs ON p.Customer_ID = cs.Customer_ID WHERE      p.Customer_Name = 'Aimee Bixby';
SELECT COUNT(*)  FROM people  JOIN central_superstore ON people.Customer_ID = central_superstore.Customer_ID  WHERE people.Customer_Name = 'Aimee Bixby' AND central_superstore.Ship_Mode = 'Standard Class';
SELECT COUNT(*)  FROM people  WHERE Customer_Name = 'Aimee Bixby';
SELECT T1.Order ID  FROM people AS T1  JOIN central_superstore AS T2 ON T1.Customer ID = T2.Customer ID  WHERE T1.Customer Name = 'Aimee Bixby'  GROUP BY T1.Customer ID  HAVING COUNT(T2.Product ID) > 3;
SELECT COUNT(*)  FROM people p  JOIN central_superstore cs ON p.Customer_ID = cs.Customer_ID  JOIN product pd ON cs.Product_ID = pd.Product_ID  WHERE p.Customer_Name = 'Aimee Bixby' AND pd.Category = 'Furniture';
SELECT DISTINCT p.ProductName FROM people AS pe JOIN central_superstore AS cs ON pe.CustomerID = cs.CustomerID  JOIN product AS p ON cs.ProductID = p.ProductID WHERE pe.CustomerName = 'Aimee Bixby' AND strftime('%Y', cs.OrderDate) = '2016';
SELECT SUM(T2.Quantity)  FROM product AS T1  JOIN central_superstore AS T2  ON T1.Product ID = T2.Product ID  WHERE T1.Product Name = 'Telescoping Adjustable Floor Lamp' AND T2.Region = 'Central';
SELECT people.Customer_Name  FROM people  JOIN central_superstore ON people.Customer_ID = central_superstore.Customer_ID  JOIN product ON central_superstore.Product_ID = product.Product_ID  WHERE product.Product_Name = 'Telescoping Adjustable Floor Lamp';
SELECT COUNT(*)  FROM people p  JOIN central_superstore cs ON p.Customer_ID = cs.Customer_ID  JOIN product pd ON cs.Product_ID = pd.Product_ID  WHERE pd.Product_Name = 'Telescoping Adjustable Floor Lamp' AND p.Segment = 'Consumer' UNION  SELECT COUNT(*)  FROM people p  JOIN east_superstore es ON p.Customer_ID = es.Customer_ID  JOIN product pd ON es.Product_ID = pd.Product_ID  WHERE pd.Product_Name = 'Telescoping Adjustable Floor Lamp' AND p.Segment = 'Consumer' UNION  SELECT COUNT(*)  FROM people p  JOIN south_superstore ss ON p.Customer_ID = ss.Customer_ID  JOIN product pd ON ss.Product_ID = pd.Product_ID  WHERE pd.Product_Name = 'Telescoping Adjustable Floor Lamp' AND p.Segment = 'Consumer' UNION  SELECT COUNT(*)  FROM people p  JOIN west_superstore ws ON p.Customer_ID = ws.Customer_ID  JOIN product pd ON ws.Product_ID = pd.Product_ID  WHERE pd.Product_Name = 'Telescoping Adjustable Floor Lamp' AND p.Segment = 'Consumer';
SELECT Quantity  FROM central_superstore  WHERE Product_Name = 'Xerox 1952' AND Customer_Name = 'Aimee Bixby' AND Order_Date = '2014-09-10';
SELECT COUNT(*)  FROM people p  JOIN central_superstore cs ON p.Customer_ID = cs.Customer_ID  WHERE p.Customer_Name = 'Aimee Bixby' AND cs.Product_Name = 'Xerox 1952';
SELECT      p.Product ID  FROM      people pleft JOIN      central_superstore c ON p.Customer ID = c.Customer ID  JOIN      product pro ON c.Product ID = pro.Product ID  WHERE      p.Customer Name = 'Aimee Bixby' AND      pro.Product Name = 'Xerox 1952' AND      c.Order Date = DATE('2014-09-10') AND      c.discount < 1 ORDER BY      c.discount  LIMIT      1;
SELECT      (SALES * QUANTITY * (1 - DISCOUNT)) - PROFIT  FROM      people p  JOIN      product pr ON p.customer_id = pr.customer_id  JOIN      central_superstore cs ON p.customer_id = cs.customer_id AND pr.product_id = cs.product_id  WHERE      p.customer_name = 'Aimee Bixby' AND      pr.product_name = 'Xerox 1952' AND      cs.order_date = '2014-09-10';
SELECT COUNT(*)  FROM east_superstore  JOIN product ON east_superstore.Product_ID = product.Product_ID  WHERE strftime('%Y', `Order Date`) = '2013' AND product.Sub_Category = 'Art';
SELECT p.Customer_Name  FROM      (SELECT c.Customer_ID, SUM((Sales * (1 - Discount) * Quantity) - Profit) AS Total_Cost     FROM          central_superstore c      UNION ALL      SELECT c.Customer_ID, SUM((Sales * (1 - Discount) * Quantity) - Profit) AS Total_Cost     FROM          east_superstore c      UNION ALL      SELECT c.Customer_ID, SUM((Sales * (1 - Discount) * Quantity) - Profit) AS Total_Cost     FROM          south_superstore c      UNION ALL      SELECT c.Customer_ID, SUM((Sales * (1 - Discount) * Quantity) - Profit) AS Total_Cost     FROM          west_superstore c) sub  JOIN people p ON sub.Customer_ID = p.Customer_ID  GROUP BY p.Customer_Name  ORDER BY Total_Cost DESC  LIMIT 1;
SELECT Product.Name FROM (   SELECT Product.ID, Product.Name, MAX(SALES * (1 - Discount)) as max_profit   FROM (     SELECT ROW_NUMBER() OVER(PARTITION BY ProductID ORDER BY (SALES * (1 - Discount)) DESC) as row_num, *     FROM central_superstore     UNION ALL     SELECT ROW_NUMBER() OVER(PARTITION BY ProductID ORDER BY (SALES * (1 - Discount)) DESC) as row_num, *     FROM east_superstore     UNION ALL     SELECT ROW_NUMBER() OVER(PARTITION BY ProductID ORDER BY (SALES * (1 - Discount)) DESC) as row_num, *     FROM south_superstore     UNION ALL     SELECT ROW_NUMBER() OVER(PARTITION BY ProductID ORDER BY (SALES * (1 - Discount)) DESC) as row_num, *     FROM west_superstore   ) AS combined_sales   WHERE row_num = 1 ) AS top_product JOIN Product ON top_product.ID = Product.ID;
SELECT p.ProductName  FROM people pe  JOIN central_superstore cs ON pe.CustomerID = cs.CustomerID  JOIN product p ON cs.ProductID = p.ProductID  WHERE pe.CustomerName = 'Darren Powers'  AND cs.OrderDate = (SELECT MAX(o.OrderDate) FROM central_superstore o WHERE o.CustomerID = pe.CustomerID);
SELECT SUM(T2.Quantity)  FROM people AS T1  JOIN central_superstore AS T2  ON T1.Customer_ID = T2.Customer_ID  JOIN product AS T3  ON T2.Product_ID = T3.Product_ID  WHERE T3.Product_Name = 'Advantus plastic paper clips';
SELECT      o.Order ID  FROM      central_superstore AS c         INNER JOIN      product AS p ON c.Product ID = p.Product ID WHERE      p.Product Name = 'Logitech G600 MMO Gaming Mouse' ORDER BY      (c.Sales / (1 - c.discount)) * c.Quantity - c.Profit DESC LIMIT 1;
SELECT p.ProductName  FROM product p  JOIN central_superstore cs ON p.ProductID = cs.ProductID  JOIN people pe ON cs.CustomerID = pe.CustomerID  WHERE pe.CustomerName = 'Alejandro Grove';
SELECT COUNT(DISTINCT people.CustomerID) FROM people JOIN central_superstore ON central_superstore.CustomerID = people.CustomerID WHERE people.City = 'Chicago' AND central_superstore.ProductID IN (     SELECT ProductID FROM product WHERE ProductName = 'Cardinal EasyOpen D-Ring Binders' ) AND central_superstore.Quantity >= 10;
SELECT Product.Name FROM product  JOIN central_superstore ON product.ProductID = central_superstore.ProductID JOIN people ON central_superstore.CustomerID = people.CustomerID WHERE central_superstore.Profit >= 1000;
SELECT p.ProductName  FROM product p  JOIN east_superstore es ON p.ProductID = es.ProductID  WHERE es.ShipMode = 'First Class' AND es.Region = 'East'  LIMIT 10;
SELECT p.ProductName  FROM people AS pe  JOIN central_superstore AS cs ON pe.CustomerID = cs.CustomerID  JOIN product AS p ON cs.ProductID = p.ProductID  WHERE pe.CustomerName = 'Becky Martin' AND cs.Region = 'Central';
SELECT p.Customer Name  FROM people p  JOIN west_superstore ws ON p.Customer ID = ws.Customer ID  WHERE ws.Region = 'West' AND ws.Ship Mode = 'Second Class'  LIMIT 5;
SELECT SUM(T1.Profit)  FROM central_superstore AS T1  JOIN people AS T2 ON T1.Customer_ID = T2.Customer_ID  WHERE T2.Customer_Name = 'Patrick Gardner' AND T1.Region = 'Central';
SELECT p.ProductName  FROM central_superstore cs  JOIN product p ON cs.ProductID = p.ProductID  WHERE cs.OrderDate = '2013-03-04'  AND cs.ShipMode = 'Same Day'  AND cs.Region = 'South';
SELECT SUM(T1.Sales)  FROM central_superstore AS T1  JOIN product AS T2 ON T1.Product_ID = T2.Product_ID  WHERE T2.Product_Name = 'Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack'  AND T1.Region = 'Central';
SELECT p.ProductName  FROM product p  JOIN central_superstore cs ON p.ProductID = cs.ProductID  JOIN people pe ON cs.CustomerID = pe.CustomerID  WHERE pe.CustomerName = 'Jonathan Doherty' AND cs.Region = 'East'  ORDER BY cs.Quantity DESC LIMIT 1;
SELECT p.ProductName  FROM product p  JOIN (SELECT * FROM east_superstore        WHERE ShipDate = Date('2015-03-25')) es ON p.ProductID = es.ProductID
SELECT people.Customer_Name  FROM (central_superstore        UNION ALL        SELECT * FROM east_superstore        UNION ALL        SELECT * FROM south_superstore        UNION ALL        SELECT * FROM west_superstore) AS combined_superstores JOIN product ON combined_superstores.Product_ID = product.Product_ID JOIN people ON combined_superstores.Customer_ID = people.Customer_ID WHERE product.Product_Name = 'Global High-Back Leather Tilter, Burgundy'  AND combined_superstores.Order_Date = '2013-10-13'  AND combined_superstores.Region = 'East';
SELECT p.Category  FROM people p  JOIN central_superstore cs ON p.Customer_ID = cs.Customer_ID  JOIN product pd ON cs.Product_ID = pd.Product_ID  WHERE p.Customer_Name = 'Katherine Murray' AND cs.Order_Date = '2018-11-04' AND cs.Region = 'South';
SELECT      (SUM(CASE WHEN p.Category = 'Furniture' THEN s.Quantity ELSE 0 END)       / SUM(s.Quantity))     * 1.0 * 100 AS furniture_percentage_shipped_standard_in_west FROM      people p JOIN      central_superstore c ON p.Customer_ID = c.Customer_ID JOIN      product p ON c.Product_ID = p.Product_ID JOIN      west_superstore w ON c.Row_ID = w.Row_ID WHERE      p.Category = 'Furniture'     AND w.Ship_Mode = 'Standard Class';
SELECT Ship_Date  FROM people  WHERE Customer_Name = 'Ann Chong'  AND Region = 'Central';
SELECT `Segment`  FROM `central_superstore` WHERE `Region` = 'West' AND `Order ID` = 'CA-2011-108189';
SELECT SUM(T2.Sales)  FROM product AS T1  JOIN west_superstore AS T2 ON T1.Product ID = T2.Product ID  WHERE T1.Product Name = 'Hon Valutask Swivel Chairs' AND T2.Region = 'West';
SELECT `Order ID`  FROM `south_superstore` WHERE `Customer Name` = 'Frank Olsen' AND `Region` = 'South';
SELECT p.ProductName  FROM central_superstore cs  JOIN people pe ON cs.CustomerID = pe.CustomerID  JOIN product p ON cs.ProductID = p.ProductID  WHERE cs.OrderDate = date('2018-04-26') AND cs.ShipDate = date('2018-04-27') AND cs.Region = 'Central';
SELECT      T1.City,      T1.State  FROM      people AS T1  JOIN      central_superstore AS T2 ON T1.Customer_ID = T2.Customer_ID  WHERE      T2.Sales = (SELECT MAX(Sales) FROM central_superstore)
SELECT p.Customer_Name  FROM `east_superstore` es  JOIN people p ON es.Customer_ID = p.Customer_ID  WHERE es.Profit = (SELECT MAX(Profit) FROM `east_superstore`)  AND p.Region = 'East';
SELECT MAX(T2.Quantity)  FROM people AS T1  JOIN central_superstore AS T2  ON T1.Customer_ID = T2.Customer_ID  WHERE T1.City = 'Chicago'  AND T1.State = 'Illinois';
SELECT      c_order_date, p_product_name FROM      central_superstore c JOIN      product p ON c.product_id = p.product_id WHERE      c.order_id = 'CA-2011-137274' AND c.region = 'Central';
SELECT DISTINCT p.CustomerName FROM people p JOIN central_superstore cs ON p.CustomerID = cs.CustomerID JOIN product pd ON cs.ProductID = pd.ProductID WHERE pd.ProductName = 'Xerox 23' AND cs.Region = 'South';
SELECT p.ProductName  FROM product p  JOIN central_superstore cs ON p.ProductID = cs.ProductID  WHERE p.Category = 'Office Supplies' AND cs.Region = 'Central'  ORDER BY cs.Sales DESC  LIMIT 1;
SELECT `Customer Name`  FROM `west_superstore` WHERE `Discount` = (SELECT MAX(`Discount`) FROM `west_superstore`);
SELECT Product.Name FROM product  JOIN (SELECT Region, AVG(Profit) as avg_profit FROM         (SELECT * FROM `east_superstore` UNION ALL SELECT * FROM `central_superstore`          UNION ALL SELECT * FROM `south_superstore`          UNION ALL SELECT * FROM `west_superstore`) as combined_superstores        WHERE Region = 'East') as east_avg ON product.Region = east_avg.Region WHERE product.Profit > (east_avg.avg_profit * 0.98);
SELECT p.Customer_Name  FROM people p  JOIN central_superstore cs ON p.Customer_ID = cs.Customer_ID  WHERE cs.Region = 'East' AND        (cs.Sales * (1 - cs.discount) * cs.Quantity - cs.Profit) > 80000;
SELECT COUNT(*)  FROM people  JOIN central_superstore ON people.Customer_ID = central_superstore.Customer_ID  WHERE people.Customer_Name = 'Maxwell Schwartz' AND strftime('%Y', central_superstore.Order_Date) = '2015';
SELECT DISTINCT p.CustomerName FROM people p JOIN central_superstore cs ON p.CustomerID = cs.CustomerID JOIN product pd ON cs.ProductID = pd.ProductID WHERE pd.ProductName = 'Bush Mission Pointe Library' AND cs.Region = 'Central';
SELECT SUM(T1.Profit) AS Total_Profit FROM central_superstore AS T1 JOIN product AS T2 ON T1.Product_ID = T2.Product_ID JOIN people AS T3 ON T1.Customer_ID = T3.Customer_ID WHERE T2.Product_Name = 'Cisco SPA301' UNION ALL SELECT SUM(T1.Profit) AS Total_Profit FROM south_superstore AS T1 JOIN product AS T2 ON T1.Product_ID = T2.Product_ID JOIN people AS T3 ON T1.Customer_ID = T3.Customer_ID WHERE T2.Product_Name = 'Cisco SPA301' UNION ALL SELECT SUM(T1.Profit) AS Total_Profit FROM west_superstore AS T1 JOIN product AS T2 ON T1.Product_ID = T2.Product_ID JOIN people AS T3 ON T1.Customer_ID = T3.Customer_ID WHERE T2.Product_Name = 'Cisco SPA301' UNION ALL SELECT SUM(T1.Profit) AS Total_Profit FROM east_superstore AS T1 JOIN product AS T2 ON T1.Product_ID = T2.Product_ID JOIN people AS T3 ON T1.Customer_ID = T3.Customer_ID WHERE T2.Product_Name = 'Cisco SPA301';
SELECT p.ProductName  FROM people pe  JOIN west_superstore ws ON pe.CustomerID = ws.CustomerID  JOIN product p ON ws.ProductID = p.ProductID  WHERE pe.CustomerName = 'Anne McFarland' AND ws.Region = 'West';
SELECT p.ProductName  FROM people pe  JOIN central_superstore cs ON pe.CustomerID = cs.CustomerID  JOIN product p ON cs.ProductID = p.ProductID  WHERE pe.City = 'Coachella';
SELECT      COUNT(*) AS Orders FROM      east_superstore WHERE      strftime('%Y', `Order Date`) = '2015' UNION SELECT      COUNT(*) AS Orders FROM      west_superstore WHERE      strftime('%Y', `Order Date`) = '2015';
SELECT DISTINCT p.ProductName FROM people AS pe JOIN central_superstore AS cs ON pe.CustomerID = cs.CustomerID  JOIN product AS p ON cs.ProductID = p.ProductID WHERE pe.CustomerName = 'Matt Abelman' AND cs.Region = 'West' AND cs.OrderDate LIKE '2013%'
SELECT      SUM(SUBTRACT(MULTIPLY(DIVIDE(`central_superstore.Sales`, SUBTRACT(1, `central_superstore.Discount`)), `central_superstore.Quantity`)) - `central_superstore.Profit`) +      SUM(SUBTRACT(MULTIPLY(DIVIDE(`east_superstore.Sales`, SUBTRACT(1, `east_superstore.Discount`)), `east_superstore.Quantity`)) - `east_superstore.Profit`) +      SUM(SUBTRACT(MULTIPLY(DIVIDE(`south_superstore.Sales`, SUBTRACT(1, `south_superstore.Discount`)), `south_superstore.Quantity`)) - `south_superstore.Profit`) +      SUM(SUBTRACT(MULTIPLY(DIVIDE(`west_superstore.Sales`, SUBTRACT(1, `west_superstore.Discount`)), `west_superstore.Quantity`)) - `west_superstore.Profit`) FROM      `people` JOIN      `central_superstore` ON `people.Customer ID` = `central_superstore.Customer ID` JOIN      `east_superstore` ON `people.Customer ID` = `east_superstore.Customer ID` JOIN      `south_superstore` ON `people.Customer ID` = `south_superstore.Customer ID` JOIN      `west_superstore` ON `people.Customer ID` = `west_superstore.Customer ID` WHERE      `people.Customer Name` = 'Brad Thomas' AND      strftime('%Y', `central_superstore.Order Date`) = '2016'
SELECT      p.Customer Name,     p.City,     p.Country FROM      people p JOIN      central_superstore cs ON p.Customer ID = cs.Customer ID JOIN      product pd ON cs.Product ID = pd.Product ID WHERE      pd.Product Name = 'Plantronics Single Ear Headset';
SELECT      c.Ship_Date,     p.Product_Name FROM      people AS c JOIN      central_superstore AS cs ON c.Customer_ID = cs.Customer_ID JOIN      product AS p ON cs.Product_ID = p.Product_ID WHERE      c.Customer_Name = 'Gene Hale';
SELECT COUNT(*)  FROM south_superstore  WHERE Ship_Mode = 'First Class' AND Category = 'Furniture';
SELECT COUNT(*)  FROM people  JOIN central_superstore ON people.Customer_ID = central_superstore.Customer_ID  JOIN product ON central_superstore.Product_ID = product.Product_ID  WHERE people.Customer_Name = 'Cindy Stewart'  AND product.Category = 'Office Supplies'  AND central_superstore.Region = 'South';
SELECT p.Category FROM product p JOIN (     SELECT Region, MAX(Profit) as max_profit     FROM (         (SELECT 'Central' AS Region)         UNION ALL         (SELECT 'East')         UNION ALL         (SELECT 'South')         UNION ALL         (SELECT 'West')     ) us     JOIN central_superstore cs ON 1=0     JOIN east_superstore es ON 1=0     JOIN south_superstore ss ON 1=0     JOIN west_superstore ws ON 1=0     WHERE ss.Region = 'South' ) ss ON ss.Region = p.Region JOIN south_superstore sst ON p.ProductID = sst.ProductID JOIN people pe ON sst.CustomerID = pe.CustomerID JOIN product p ON sst.ProductID = p.ProductID WHERE p.Sub_Category IS NOT NULL GROUP BY p.Category ORDER BY SUM(sst.Profit) DESC LIMIT 1;
SELECT DISTINCT p.ProductName FROM people AS pe JOIN central_superstore AS cs ON pe.CustomerID = cs.CustomerID  JOIN product AS p ON cs.ProductID = p.ProductID WHERE pe.CustomerName = 'Cindy Stewart' AND cs.Region = 'east';
SELECT DISTINCT p.ProductName FROM product p JOIN west_superstore w ON p.ProductID = w.ProductID WHERE w.ShipMode = 'Same Day' AND w.ShipDate BETWEEN '2013-01-01' AND '2013-12-31';
SELECT DISTINCT p.Category  FROM people AS pe  JOIN central_superstore AS cs ON pe.Customer_ID = cs.Customer_ID  JOIN product AS p ON cs.Product_ID = p.Product_ID  WHERE pe.Customer_Name = 'Sam Craven' AND pe.Region IN ('Central', 'East') UNION SELECT DISTINCT p.Category  FROM people AS pe  JOIN east_superstore AS es ON pe.Customer_ID = es.Customer_ID  JOIN product AS p ON es.Product_ID = p.Product_ID  WHERE pe.Customer_Name = 'Sam Craven' AND pe.Region = 'East';
SELECT SUM(T2.Quantity)  FROM people AS T1  JOIN central_superstore AS T2  ON T1.Customer_ID = T2.Customer_ID  JOIN product AS T3  ON T3.Product_ID = T2.Product_ID  WHERE T1.Customer_Name = 'Cindy Stewart'  AND T3.Product_Name = 'Lexmark X 9575 Professional All-in-One Color Printer'  AND T2.Region = 'south';
SELECT p.ProductName  FROM product p  JOIN central_superstore c ON p.ProductID = c.ProductID  WHERE c.Quantity >= 10 AND c.ShipMode = 'Standard Class'
SELECT p.Category FROM west_superstore w JOIN product p ON w.ProductID = p.ProductID WHERE w.Sales = (SELECT MIN(Sales) FROM west_superstore)
SELECT SUM(T1.Profit)  FROM south_superstore AS T1  JOIN product AS T2 ON T1.Product_ID = T2.Product_ID  WHERE T2.Product_Name = 'Memorex Froggy Flash Drive 8 GB';
SELECT SUM(T1.Sales)  FROM east_superstore AS T1  JOIN product AS T2 ON T1.Product_ID = T2.Product_ID  WHERE T2.Category = 'Furnitures'  AND T1.Order_Date BETWEEN '2016-01-01' AND '2016-12-31'
SELECT      AVG(e.Sales) AS East_Average_Sales,     AVG(w.Sales) AS West_Average_Sales FROM      product p JOIN      east_superstore e ON p.Product_ID = e.Product_ID AND p.Product_Name = 'Sharp AL-1530CS Digital Copier' JOIN      west_superstore w ON p.Product_ID = w.Product_ID AND p.Product_Name = 'Sharp AL-1530CS Digital Copier'
SELECT      (SUM(CASE              WHEN p.Category = 'Office Supplies' AND c.Region = 'Central'             THEN 1             ELSE 0         END) + SUM(CASE              WHEN p.Category = 'Office Supplies' AND s.Region = 'South'             THEN 1             ELSE 0         END)) * 100.0 / COUNT(c.Region) FROM      people c JOIN      central_superstore ss ON c.Customer_ID = ss.Customer_ID JOIN      product p ON ss.Product_ID = p.Product_ID UNION ALL FROM      people s JOIN      south_superstore ss ON s.Customer_ID = ss.Customer_ID JOIN      product p ON s.Product_ID = p.Product_ID;
SELECT      (COUNT(CASE WHEN `State` = 'Texas' THEN 1 END) / COUNT(CASE WHEN `State` = 'Indiana' THEN 1 END)) AS ratio FROM      people
SELECT p.ProductName FROM product p JOIN central_superstore css ON p.ProductID = css.ProductID WHERE p.Sub_Category = 'Art' GROUP BY p.ProductName ORDER BY SUM(css.Quantity) DESC LIMIT 1;
SELECT T1.Customer_Name FROM people AS T1 JOIN south_superstore AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Order_Date BETWEEN '2015-01-01' AND '2015-12-31' GROUP BY T1.Customer_Name HAVING COUNT(T2.Order_ID) > 3;
SELECT MAX(T2.Profit)  FROM people AS T1  JOIN central_superstore AS T2 ON T1.Customer_ID = T2.Customer_ID  WHERE T1.Customer_Name = 'Anna Chung' AND T2.Region = 'Central';
SELECT COUNT(*)  FROM people  JOIN central_superstore ON people.Customer_ID = central_superstore.Customer_ID  WHERE people.Customer_Name = 'Corey Roper' AND YEAR(central_superstore.Order_Date) = 2015;
SELECT      (SUM(CASE WHEN t.Region = 'East' THEN t.Sales ELSE 0 END) - SUM(CASE WHEN t.Region = 'West' THEN t.Sales ELSE 0 END)) as SalesDifference FROM      (SELECT * FROM east_superstore UNION ALL SELECT * FROM west_superstore) as t
SELECT p.ProductName  FROM product p  JOIN central_superstore cs ON p.ProductID = cs.ProductID  WHERE cs.Profit < 0;
SELECT Product.Name, ShipMode  FROM west_superstore  JOIN Product ON west_superstore.ProductID = Product.ProductID  WHERE DATEDIFF(ShipDate, OrderDate) = (SELECT MIN(DATEDIFF(ShipDate, OrderDate)) FROM west_superstore);
SELECT COUNT(*)  FROM central_superstore  JOIN product ON central_superstore.Product_ID = product.Product_ID  WHERE product.Product_Name = 'O''Sullivan Plantations 2-Door Library'  AND product.Sub_Category = 'Landvery Oak'  AND central_superstore.Ship_Mode = 'First Class';
SELECT      p.Customer Name  FROM      people p JOIN      east_superstore es ON p.Customer ID = es.Customer ID WHERE      p.Segment = 'Corporate' AND      p.State = 'Rhode Island' AND      es.Region = 'East' AND      es.Order Date BETWEEN '2016-01-01' AND '2016-12-31' GROUP BY      p.Customer Name ORDER BY      COUNT(es.Row ID) DESC LIMIT 1;
SELECT COUNT(*)  FROM west_superstore w JOIN people p ON w.Customer_ID = p.Customer_ID WHERE w.Sales >= 5000 AND p.State = 'California';
SELECT p.Segment  FROM people p  JOIN east_superstore es ON p.CustomerID = es.CustomerID  WHERE es.Sales / (1 - es.Discount) = (   SELECT MAX(sales / (1 - discount))    FROM east_superstore  )
SELECT      TIMESTAMPDIFF(DAY, `Order Date`, `Ship Date`) AS Shipment_Duration FROM      (SELECT * FROM central_superstore WHERE `Order ID` = 'CA-2011-134103') OR      (SELECT * FROM east_superstore WHERE `Order ID` = 'CA-2011-134103') OR      (SELECT * FROM south_superstore WHERE `Order ID` = 'CA-2011-134103') OR      (SELECT * FROM west_superstore WHERE `Order ID` = 'CA-2011-134103')
SELECT COUNT(*)  FROM west_superstore  WHERE Quantity > 5 AND Ship_Mode = 'First Class' UNION  SELECT COUNT(*)  FROM east_superstore  WHERE Quantity > 5 AND Ship_Mode = 'First Class' UNION  SELECT COUNT(*)  FROM south_superstore  WHERE Quantity > 5 AND Ship_Mode = 'First Class' UNION  SELECT COUNT(*)  FROM central_superstore  WHERE Quantity > 5 AND Ship_Mode = 'First Class'
SELECT      OrderID,      OrderDate,      ShipDate,     Profit FROM      central_superstore  UNION  SELECT      OrderID,      OrderDate,      ShipDate,     Profit FROM      east_superstore  UNION  SELECT      OrderID,      OrderDate,      ShipDate,     Profit FROM      south_superstore  UNION  SELECT      OrderID,      OrderDate,      ShipDate,     Profit FROM      west_superstore WHERE      Profit < 0 LIMIT 3;
SELECT p.ProductName  FROM product p  JOIN central_superstore cs ON p.ProductID = cs.ProductID  JOIN people pe ON cs.CustomerID = pe.CustomerID  WHERE pe.CustomerName = 'Phillina Ober';
SELECT p.Customer_Name  FROM people p  JOIN south_superstore s ON p.Customer_ID = s.Customer_ID  JOIN product pr ON s.Product_ID = pr.Product_ID  WHERE pr.Product_Name = 'Hon Multipurpose Stacking Arm Chairs'  GROUP BY p.Customer_Name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT SUM(T1.Profit)  FROM east_superstore AS T1  JOIN product AS T2 ON T1.Product_ID = T2.Product_ID  WHERE T2.Product_Name = 'O\'Sullivan Living Dimensions 2-Shelf Bookcases';
SELECT SUM(Quantity)  FROM west_superstore  JOIN product ON west_superstore.Product_ID = product.Product_ID  WHERE product.Product_Name = 'Hon Pagoda Stacking Chairs';
SELECT COUNT(*)  FROM people p  JOIN central_superstore cs ON p.Customer_ID = cs.Customer_ID  WHERE p.Customer_Name = 'Aaron Bergman' AND cs.Ship_Mode = 'Standard Class'
SELECT (central_superstore.Sales / (1 - central_superstore.Discount)) AS Original_Price  FROM central_superstore  JOIN product ON central_superstore.Product_ID = product.Product_ID  WHERE product.Product_Name = 'Black Avery Flip-Chart Easel Binder';
SELECT Product.Name FROM people p JOIN central_superstore cs ON p.CustomerID = cs.CustomerID JOIN product Prod ON cs.ProductID = Prod.ProductID WHERE p.CustomerName = 'Aimee Bixby'
SELECT SUM(T2.Profit)  FROM product AS T1  JOIN (central_superstore AS T3 UNION east_superstore AS T4 UNION south_superstore AS T5 UNION west_superstore AS T6) AS T2 ON T2.Product_ID = T1.Product_ID  WHERE T1.Product_Name = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish';
SELECT COUNT(*)  FROM product  JOIN east_superstore ON product.ProductID = east_superstore.ProductID  WHERE product.Category = 'Furniture' AND east_superstore.ShipMode = 'Standard Class';
SELECT MAX(T.Profit)  FROM east_superstore T  JOIN people P ON T.Customer_ID = P.Customer_ID  WHERE P.City = 'Houston' AND P.State = 'Texas';
SELECT COUNT(*)  FROM product  JOIN central_superstore ON product.ProductID = central_superstore.ProductID  WHERE product.Category = 'Furniture';
SELECT p.ProductName  FROM product p  JOIN central_superstore c ON p.ProductID = c.ProductID  WHERE c.ShipDate LIKE '2013-03%'
SELECT COUNT(*)  FROM people p  JOIN central_superstore cs ON p.Customer_ID = cs.Customer_ID  WHERE p.State = 'Texas';
SELECT COUNT(*)  FROM people  JOIN central_superstore ON people.Customer_ID = central_superstore.Customer_ID  WHERE people.Customer_Name = 'Alan Barnes' AND YEAR(central_superstore.Order_Date) = 2015;
SELECT p.ProductName  FROM product p  JOIN east_superstore es ON p.ProductID = es.ProductID  WHERE es.OrderID = 'CA-2011-115791';
SELECT      (COUNT(CASE WHEN s.Discount = 0.2 AND p.State = 'Texas' THEN s.Order ID ELSE NULL END)      / COUNT(s.Order ID)) * 100 AS Percentage FROM      central_superstore s JOIN      people p ON s.Customer ID = p.Customer ID;
SELECT      (SUM(CASE WHEN p.Category = 'Furniture' AND s.Ship_Date = '2013%' THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN s.Ship_Date = '2013%' THEN 1 ELSE 0 END), 0)) * 100 AS Percentage FROM      product p INNER JOIN      central_superstore s ON p.Product_ID = s.Product_ID;
SELECT people.Customer_Name  FROM (central_superstore        UNION        SELECT * FROM east_superstore        UNION        SELECT * FROM south_superstore        UNION        SELECT * FROM west_superstore) AS combined_superstores  JOIN people ON combined_superstores.Customer_ID = people.Customer_ID  WHERE combined_superstores.Order_Date = '2013-08-12'    AND combined_superstores.Discount = 0.2    AND combined_superstores.Region = 'West';
SELECT `Order ID`  FROM central_superstore  WHERE `Product Name` = 'Security-Tint Envelopes' AND `Order Date` = '2013-06-03';
SELECT p.ProductName  FROM product p  JOIN people pe ON p.ProductID = pe.CustomerID  JOIN central_superstore cs ON p.ProductID = cs.ProductID  WHERE pe.CustomerName = 'Bill Shonely' AND cs.Region = 'Central';
SELECT DISTINCT p.Customer_Name FROM people p JOIN west_superstore w ON p.Customer_ID = w.Customer_ID WHERE w.Quantity = 8;
SELECT SUM(cprofit.Profit) AS TotalProfit FROM  (     SELECT p.CustomerID, s.Sales, s.Discount, s.Profit     FROM people p     JOIN central_superstore s ON p.CustomerID = s.CustomerID     WHERE p.State = 'Texas' AND p.City = 'Houston' AND s.Region = 'Central' ) cprofit
SELECT people.Customer_Name  FROM (central_superstore        UNION        SELECT * FROM east_superstore)  JOIN people  ON central_superstore.Customer_ID = people.Customer_ID  WHERE central_superstore.Ship_Date = '2013-03-05' AND central_superstore.Region = 'East';
SELECT ProductName FROM central_superstore WHERE OrderDate LIKE '2016%' AND Region = 'Central' ORDER BY Profit ASC LIMIT 1;
SELECT people.Customer_Name  FROM central_superstore  JOIN people ON central_superstore.Customer_ID = people.Customer_ID  WHERE central_superstore.Order_ID = 'CA-2011-118976' AND central_superstore.Region = 'East';
SELECT p.ProductName  FROM product p  JOIN south_superstore s ON p.ProductID = s.ProductID  WHERE s.Sales = (SELECT MAX(Sales) FROM south_superstore)
SELECT      p.Sales,      p.Profit,      ps.Sub-Category  FROM      central_superstore cs  JOIN      people p ON cs.Customer_ID = p.Customer_ID  JOIN      product ps ON cs.Product_ID = ps.Product_ID  WHERE      cs.Order_ID = 'US-2011-126571' AND cs.Region = 'East';
SELECT p.ProductName  FROM product p  JOIN (     SELECT OrderID, SUM(Quantity) as TotalQuantity      FROM (         central_superstore cs          UNION ALL          east_superstore es          UNION ALL          south_superstore ss          UNION ALL          west_superstore ws     ) s      GROUP BY OrderID      HAVING TotalQuantity = (         SELECT MAX(t.TotalQuantity)          FROM (             SELECT OrderID, SUM(Quantity) as TotalQuantity              FROM (                 central_superstore cs                  UNION ALL                  east_superstore es                  UNION ALL                  south_superstore ss                  UNION ALL                  west_superstore ws             ) s              GROUP BY OrderID         ) t     ) ) o  ON p.ProductID = o.ProductID;
SELECT people.Customer_Name  FROM people  JOIN (SELECT * FROM south_superstore WHERE Ship_Mode = 'Standard Class') AS ss ON people.Customer_ID = ss.Customer_ID WHERE ss.Sales > (SELECT AVG(Sales) * 0.88 FROM south_superstore);
SELECT      (SUM(CASE WHEN p.State = 'Indiana' AND c.Discount = 0 THEN 1 ELSE 0 END) / COUNT(p.State)) * 100 AS Percentage FROM      people AS p JOIN      central_superstore AS c ON p.CustomerID = c.CustomerID WHERE      p.State = 'Indiana';
SELECT      (COUNT(*) FILTER (WHERE officers.race = 'W') / NULLIF(COUNT(*), 0) FILTER (WHERE officers.gender = 'M')) * 100 AS 白人比例 FROM      officers
SELECT      COUNT(*) FILTER (WHERE incidents.officer_count > 3 AND incidents.date BETWEEN '2010-01-01' AND '2015-12-31') * 100.0 / COUNT(incidents.case_number) AS percentage FROM      incidents;
SELECT YEAR(date) AS year  FROM incidents  WHERE subject_weapon = 'Handgun' GROUP BY YEAR(date)  ORDER BY COUNT(case_number) DESC  LIMIT 1;
SELECT      (COUNT(CASE          WHEN i.subject_statuses = 'injured' AND i.grand_jury_disposition = 'No Bill'         THEN 1     )::decimal / COUNT(CASE          WHEN i.grand_jury_disposition = 'No Bill'         THEN 1     )) * 100 AS percentage_cases_subject_injured FROM incidents i JOIN officers o ON i.case_number = o.case_number JOIN subjects s ON i.case_number = s.case_number WHERE i.subject_statuses = 'injured' AND i.grand_jury_disposition = 'No Bill';
SELECT      (COUNT(CASE WHEN i.date BETWEEN '2008-01-01' AND '2008-12-31' THEN i.case_number END) -     COUNT(CASE WHEN i.date BETWEEN '2007-01-01' AND '2007-12-31' THEN i.case_number END)) AS difference_cases FROM incidents i JOIN subjects s ON i.subjects = s.case_number WHERE s.subject_weapon = 'Vehicle';
SELECT      (COUNT(*) FILTER (WHERE subject_statuses = 'Shoot and Miss')::FLOAT /       COUNT(*) FILTER (WHERE subject_weapon = 'Handgun')) * 100 AS percentage_shoot_and_miss_handgun FROM      incidents;
SELECT o.last_name, o.gender  FROM officers o  JOIN incidents i ON o.case_number = i.case_number  WHERE i.subject_statuses = 'No Bill'
SELECT `cases.case_number`, `cases.subject_statuses`, `cases.subject_weapon` FROM `cases` JOIN `subjects` ON `cases.subjects` = `subjects.case_number` WHERE `subjects.gender` = 'F';
SELECT incidents.case_number, incidents.location, incidents.subject_statuses FROM incidents JOIN subjects ON incidents.case_number = subjects.case_number WHERE subjects.gender = 'M'
SELECT `cases.case_number`, `cases.subject_statuses` AS `grand_jury_disposition` FROM `cases` JOIN `officers` ON `cases.case_number` = `officers.case_number` WHERE `officers.full_name` = 'Evenden, George';
SELECT o.last_name, i.subject_statuses  FROM incidents i  JOIN officers o ON i.case_number = o.case_number  WHERE i.case_number = '134472-2015';
SELECT subjects.last_name, subjects.gender, subjects.race, incidents.case_number FROM incidents JOIN subjects ON incidents.subjects = subjects.full_name WHERE incidents.subject_statuses = 'Deceased';
SELECT      (COUNT(CASE WHEN t1.subject_weapon = 'Vehicle' AND t2.gender = 'F' THEN t1.case_number ELSE NULL END)      / COUNT(t1.case_number)) * 100 AS percentage FROM      incidents t1 JOIN      subjects t2 ON t1.subjects = t2.case_number WHERE      t2.gender = 'F';
SELECT      (COUNT(CASE WHEN i.subject_statuses = 'Shoot and Miss' AND i.subject_weapon = 'knife' THEN i.case_number END)      / COUNT(CASE WHEN i.subject_statuses = 'Shoot and Miss' AND i.subject_weapon = 'toy handgun' THEN i.case_number END)) AS ratio FROM incidents i WHERE i.subject_statuses = 'Shoot and Miss'
SELECT incidents.case_number  FROM incidents  JOIN subjects ON incidents.subjects = subjects.case_number  WHERE incidents.date BETWEEN '2012-01-01' AND '2012-12-31'  AND subjects.subject_statuses = 'Deceased';
SELECT      (COUNT(*) FILTER (WHERE officers.race = 'B') / COUNT(*) FILTER (WHERE officers.gender = 'M')) * 100 AS percentage_black_male_officers FROM      officers;
SELECT COUNT(*)  FROM incidents i  JOIN officers o ON i.case_number = o.case_number  WHERE i.subject_weapon = 'Vehicle' AND o.gender = 'F';
SELECT COUNT(*)  FROM incidents  WHERE incidents.subjects IN (     SELECT subjects      FROM subjects      WHERE subjects.gender = 'F' AND subjects.subject_statuses = 'Deceased' );
SELECT COUNT(*)  FROM officers  WHERE race = 'B' AND officers.case_number IN (     SELECT incidents.case_number      FROM incidents      WHERE date BETWEEN '2010-01-01' AND '2015-12-31' )
SELECT COUNT(*)  FROM incidents  WHERE date BETWEEN '2015-06-01' AND '2015-06-30';
SELECT COUNT(*)  FROM incidents  JOIN subjects ON incidents.case_number = subjects.case_number  WHERE incidents.date BETWEEN '2006-01-01' AND '2013-12-31'  AND subjects.subject_statuses = 'injured'  AND incidents.subject_weapon = 'handgun';
SELECT      subject_weapon FROM      incidents WHERE      subject_statuses = 'Deceased' GROUP BY      subject_weapon ORDER BY      COUNT(subject_weapon) DESC LIMIT 1;
SELECT      (COUNT(*) FILTER (WHERE race = 'W' AND gender = 'M') / COUNT(*)) * 100 AS proportion_white_males,     (COUNT(*) FILTER (WHERE race = 'W' AND gender = 'F') / COUNT(*)) * 100 AS proportion_white_females FROM officers;
SELECT      (SUM(CASE WHEN subjects.race = 'B' AND subjects.gender = 'F' THEN 1 ELSE 0 END) -      SUM(CASE WHEN subjects.race = 'W' AND subjects.gender = 'F' THEN 1 ELSE 0 END)) AS difference FROM      incidents JOIN      subjects ON incidents.case_number = subjects.case_number;
SELECT      (COUNT(CASE          WHEN i.subject_weapon = 'rifles' AND i.subject_statuses = 'Deceased'          THEN 1     )::decimal / COUNT(*)) * 100 AS percentage_deaths_by_rifles FROM      incidents i;
SELECT      t1.subject_weapon,     t2.race,     t2.gender FROM      incidents AS t1 JOIN      subjects AS t2 ON t1.subjects = t2.case_number JOIN      officers AS t3 ON t1.case_number = t3.case_number WHERE      t1.case_number = '031347-2015';
SELECT      o.full_name as 'Officer Name',     s.race as 'Victim Race',     s.gender as 'Victim Gender' FROM      incidents i JOIN      officers o ON i.case_number = o.case_number JOIN      subjects s ON i.case_number = s.case_number WHERE      o.full_name = 'Ruben Fredirick' AND i.subject_statuses = 'Deceased Injured'
SELECT      (COUNT(CASE WHEN officers.gender = 'M' AND incidents.subject_statuses = 'Injured' THEN incidents.case_number END)      / COUNT(CASE WHEN incidents.subject_statuses = 'Injured' THEN incidents.case_number END)) * 100 AS proportion FROM      officers  JOIN      incidents ON officers.case_number = incidents.case_number;
SELECT COUNT(*)  FROM Genes  JOIN Classification ON Genes.GeneID = Classification.GeneID  WHERE Classification.Localization = 'plasma membrane';
SELECT COUNT(*)  FROM Genes  WHERE Essential = 'No'  AND Localization = 'nucleus';
SELECT COUNT(*)  FROM Genes  JOIN Classification ON Genes.GeneID = Classification.GeneID  WHERE Genes.Phenotype LIKE '%nucleic acid metabolism defect%' AND Classification.Localization = 'vacuole';
SELECT Localization  FROM Genes  WHERE Chromosome = (SELECT MAX(Chromosome) FROM Genes);
SELECT MAX(I.Expression_Corr)  FROM Interactions I  JOIN Genes G1 ON I.GeneID1 = G1.GeneID  JOIN Genes G2 ON I.GeneID2 = G2.GeneID  WHERE G1.Localization = 'nucleus' AND G2.Localization = 'nucleus';
SELECT      g1.Function AS Function1,     g2.Function AS Function2 FROM      Interactions i JOIN      Genes g1 ON i.GeneID1 = g1.GeneID JOIN      Genes g2 ON i.GeneID2 = g2.GeneID WHERE      i.Expression_Corr = (SELECT MIN(Expression_Corr) FROM Interactions);
SELECT COUNT(*)  FROM Genes G1, Genes G2, Interactions I  WHERE G1.GeneID = I.GeneID1 AND G2.GeneID = I.GeneID2  AND G1.Class <> 'motorproteins' AND G2.Class <> 'motorproteins'  AND I.Expression_Corr < 0;
SELECT MAX(I.Expression_Corr)  FROM Interactions I  JOIN Genes G1 ON I.GeneID1 = G1.GeneID  JOIN Genes G2 ON I.GeneID2 = G2.GeneID  WHERE G1.Chromosome = 8 AND G2.Chromosome = 6;
SELECT Motif  FROM Genes  WHERE Localization = 'cytoplasm'  AND Chromosome = 7;
SELECT COUNT(*)  FROM Genes  JOIN Classification ON Genes.GeneID = Classification.GeneID  WHERE Genes.Essential = 'No'  AND Genes.Function LIKE '%transcription%'  AND Classification.Localization != 'cytoplasm';
SELECT COUNT(*)  FROM Interactions  WHERE Type = 'Expression_Corr' AND Expression_Corr > 0  AND EXISTS (     SELECT 1      FROM Genes      WHERE GeneID = Interactions.GeneID1 AND Essential = 0 )  AND EXISTS (     SELECT 1      FROM Genes      WHERE GeneID = Interactions.GeneID2 AND Essential = 0 );
SELECT      COUNT(*) / (SELECT COUNT(*) FROM Interactions WHERE Expression_Corr > 0) AS Possibility FROM      Interactions i JOIN      Genes g1 ON i.GeneID1 = g1.GeneID JOIN      Genes g2 ON i.GeneID2 = g2.GeneID WHERE      g1.Chromosome > 10 AND g2.Chromosome > 10;
SELECT AVG(Interactions.Expression_Corr)  FROM Genes JOIN Interactions ON Genes.GeneID = Interactions.GeneID1 OR Genes.GeneID = Interactions.GeneID2 JOIN Classification ON Genes.GeneID = Classification.GeneID WHERE Genes.Class = 'ATPases' AND Classification.Localization = 'Class';
SELECT GeneID FROM Genes WHERE Localization = 'cytoplasm' AND Function LIKE '%metabolism%';
SELECT COUNT(DISTINCT GeneID)  FROM Classification  WHERE Localization IN ('plasma', 'nucleus');
SELECT      Type,     COUNT(CASE WHEN Expression_Corr < 0 THEN 1 END) AS NegativeCorrelationCount,     COUNT(*) AS TotalCount,     (COUNT(CASE WHEN Expression_Corr < 0 THEN 1 END) * 100 / COUNT(*)) AS NegativeCorrelationPercentage FROM      Interactions  WHERE      Type = 'Physical'  GROUP BY      Type;
SELECT      (COUNT(CASE WHEN g.Localization = 'cytoskeleton' AND g.Class = 'unknown' THEN g.GeneID END)      / COUNT(CASE WHEN g.Localization = 'cytoskeleton' THEN g.GeneID END) * 100) AS Percentage,     COUNT(CASE WHEN g.Localization = 'cytoskeleton' AND g.Class = 'unknown' AND NOT g.Phenotype LIKE '%conditional%' THEN g.GeneID END) AS UnknownClassNonConditionalPhenotypes FROM Genes g JOIN Classification c ON g.GeneID = c.GeneID WHERE c.Localization = 'cytoskeleton';
SELECT i.Type FROM Interactions i JOIN Genes g ON i.GeneID1 = g.GeneID OR i.GeneID2 = g.GeneID WHERE g.Function = 'cellular transport' AND g.Function = 'transport medicine' AND g.Essential = 'No'
SELECT g.GeneID, g.Class, g.Complex, g.Phenotype, g.Motif, g.Chromosome, g.Function FROM Genes g JOIN Interactions i ON g.GeneID = i.GeneID1 JOIN Genes c ON i.GeneID2 = c.GeneID WHERE c.Localization = 'nucleus' AND i.Expression_Corr > 0;
SELECT COUNT(*)  FROM Genes  JOIN Classification ON Genes.GeneID = Classification.GeneID  JOIN Interactions ON Genes.GeneID = Interactions.GeneID1  WHERE Genes.Essential = 'true'  AND Genes.Class = 'transcription factors'  AND Classification.Localization = 'nucleus'  AND Interactions.Type = 'genetic';
SELECT COUNT(*)  FROM Genes  WHERE Essential = 0 AND Class <> 'motorprotein' AND Phenotype LIKE '%cell cycle defects%'  AND Type <> 'physical';
SELECT      (COUNT(CASE          WHEN i.Type = 'positive' AND g.Phenotype LIKE '%nucleic acid metabolism defects%' AND g.Motif = 'PS00107'         THEN 1     ) / NULLIF(COUNT(CASE          WHEN g.Phenotype LIKE '%nucleic acid metabolism defects%' AND g.Motif = 'PS00107'         THEN 1     ), 0)) * 100 AS PercentagePositiveInteraction FROM      Genes g JOIN      Interactions i ON g.GeneID = i.GeneID1 OR g.GeneID = i.GeneID2
SELECT      (COUNT(CASE WHEN G.Essential = 'No' THEN 1 END) /       CAST(COUNT(CASE WHEN I.Expression_Corr < 0 THEN 1 END) AS REAL)) * 100 AS Percentage_Non_Essential,     COUNT(CASE WHEN G.Essential = 'Yes' THEN 1 END) AS Count_Essential,     COUNT(CASE WHEN I.Expression_Corr < 0 THEN 1 END) AS Count_Neg_Corr_Interaction FROM      Interactions I JOIN      Genes G ON I.GeneID1 = G.GeneID OR I.GeneID2 = G.GeneID WHERE      I.Type = 'genetic_interaction'     AND I.Expression_Corr < 0;
SELECT COUNT(DISTINCT App) AS Apps_Updated_in_January_2018,        TR.Translated_Review AS Positive_Translated_Review FROM playstore AS p JOIN (     SELECT App, Translated_Review     FROM user_reviews     WHERE Sentiment = 'Positive' ) AS TR ON p.App = TR.App WHERE p.Last_Updated BETWEEN 'January 1, 2018' AND 'January 31, 2018' AND p.Translated_Review IS NOT NULL;
SELECT COUNT(*) AS num_users_mildly_likes,        Last_Updated FROM playstore JOIN user_reviews ON playstore.App = user_reviews.App WHERE playstore.App = '7 Minute Workout' AND user_reviews.Sentiment_Polarity >= 0 AND user_reviews.Sentiment_Polarity < 0.5;
SELECT COUNT(*) AS NeutralUsers, Rating  FROM playstore  JOIN user_reviews ON playstore.App = user_reviews.App  WHERE playstore.App = 'HTC Weather' AND user_reviews.Sentiment = 'Neutral';
SELECT App, Category  FROM user_reviews  WHERE Sentiment_Polarity = 1.0  GROUP BY App, Category  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT      AVG(ur.Sentiment_Polarity) AS AverageSentimentPolarity,     ps.ContentRating  FROM      playstore ps  JOIN      user_reviews ur ON ps.App = ur.App  WHERE      ps.App = 'Cooking Fever'  GROUP BY      ps.ContentRating;
SELECT      MIN(ur.Sentiment_Polarity) AS LowestSentimentPolarity,     ps.Installs FROM      playstore ps JOIN      user_reviews ur ON ps.App = ur.App WHERE      ps.Category = 'Sports' AND ps.App = 'Basketball Stars' AND ur.Sentiment = 'Negative' AND ur.Sentiment_Polarity < -0.5;
SELECT COUNT(*) AS num_reviews, p.Current_Ver  FROM playstore p  JOIN user_reviews u ON p.App = u.App  WHERE p.App = 'Akinator' AND u.Sentiment_Subjectivity <= 0.5;
SELECT COUNT(*)  FROM playstore  WHERE Rating = 5;
SELECT App  FROM playstore  WHERE Type = 'Free' AND Price = 0  ORDER BY Installs DESC  LIMIT 5;
SELECT App FROM playstore WHERE Reviews = (SELECT MAX(Reviews) FROM playstore) ORDER BY Reviews DESC LIMIT 10;
SELECT COUNT(*) AS NeutralReviewsCount, p.Category  FROM playstore AS p  JOIN user_reviews AS ur ON p.App = ur.App  WHERE p.App = '10 Best Foods for You' AND ur.Sentiment = 'Neutral';
SELECT p.App, COUNT(p.Rating) AS Num_Installs FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE u.Sentiment_Polarity = 'Positive' GROUP BY p.App HAVING COUNT(u.App) >= 100 ORDER BY Num_Installs DESC;
SELECT      App,     Translated_Review FROM      playstore JOIN      user_reviews ON playstore.App = user_reviews.App WHERE      Rating = 3.9;
SELECT COUNT(DISTINCT App) AS Number_of_Apps, COUNT(user_reviews.App) AS Number_of_User_Reviews FROM playstore JOIN user_reviews ON playstore.App = user_reviews.App WHERE playstore.Type = 'Free' AND playstore.Content_Rating = 'Everyone' AND playstore.Android_Ver = '8.0 and up';
SELECT      p.App,     SUM(u.Sentiment_Subjectivity) as Total_Sentiment_Subjectivity FROM      playstore p JOIN      user_reviews u ON p.App = u.App WHERE      (         SELECT              COUNT(*)          FROM              STRING_SPLIT(p.Genres, ',')      ) > 1 GROUP BY      p.App;
SELECT p.App, AVG(ur.Sentiment_Polarity) as avg_sentiment_polarity FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.Last_Updated < 'January 1, 2015' GROUP BY p.App;
SELECT SUM(playstore.Installs) AS Total_Installs, user_reviews.Translated_Review FROM playstore JOIN user_reviews ON playstore.App = user_reviews.App WHERE playstore.Content_Rating = 'Adults only 18+';
SELECT      App,     (Price * Installs) AS BestSellingValue,     (SELECT Sentiment_Polarity FROM user_reviews WHERE App = playstore.App LIMIT 1) AS SentimentPolarity FROM      playstore ORDER BY      BestSellingValue DESC LIMIT 1;
SELECT      AVG(playstore.Rating) AS Average_Rating,     COUNT(CASE WHEN user_reviews.Sentiment = 'Positive' THEN 1 END) AS Positive_Attitude_users FROM      playstore JOIN      user_reviews ON playstore.App = user_reviews.App WHERE      playstore.Category = 'COMICS';
SELECT Rating  FROM playstore  WHERE App = 'Draw A Stickman';
SELECT COUNT(*)  FROM user_reviews  WHERE App = 'Brit + Co' AND Translated_Review IS NOT NULL;
SELECT App  FROM playstore  WHERE Genre = 'Shopping'  ORDER BY Reviews DESC  LIMIT 5;
SELECT COUNT(*)  FROM user_reviews  WHERE App = 'Dino War: Rise of Beasts' AND Sentiment = 'Neutral';
SELECT App FROM playstore WHERE Installs = '5,000+';
SELECT user_reviews.Translated_Review  FROM user_reviews  JOIN playstore ON user_reviews.App = playstore.App  WHERE playstore.App = 'Dog Run - Pet Dog Simulator' AND user_reviews.Sentiment = 'Negative';
SELECT App FROM playstore JOIN user_reviews ON playstore.App = user_reviews.App WHERE playstore.Type = 'Free' AND user_reviews.Sentiment = 'Negative' GROUP BY App ORDER BY COUNT(user_reviews.Sentiment) DESC LIMIT 1;
SELECT COUNT(*)  FROM user_reviews ur  JOIN playstore ps ON ur.App = ps.App  WHERE ur.Sentiment = 'Negative' AND ps.Installs = '100,000,000+';
SELECT DISTINCT p.Content Rating FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE ur.Translated_Review LIKE '%gr8%';
SELECT SUM(ur.Sentiment_Polarity)  FROM playstore ps  JOIN user_reviews ur ON ps.App = ur.App  WHERE ps.Price = (SELECT MAX(Price) FROM playstore)
SELECT playstore.Rating, user_reviews.Translated_Review  FROM playstore  JOIN user_reviews  ON playstore.App = user_reviews.App  WHERE playstore.App = 'Garden Coloring Book';
SELECT T1.App  FROM playstore AS T1  JOIN user_reviews AS T2  ON T1.App = T2.App  WHERE T1.Genres = 'Photography'  AND T2.Sentiment_Subjectivity IS NOT NULL ORDER BY SUM(T2.Sentiment_Subjectivity) DESC  LIMIT 1;
SELECT user_reviews.Translated_Review  FROM user_reviews  JOIN playstore ON user_reviews.App = playstore.App  WHERE playstore.Content_Rating = 'Mature 17+' AND playstore.Rating = 1;
SELECT MAX(SUM(t2.Sentiment_Polarity)) AS Total_Sentiment_Polarity,        playstore.Installs  FROM playstore  JOIN user_reviews AS t2  ON playstore.App = t2.App  GROUP BY playstore.App  ORDER BY Total_Sentiment_Polarity DESC  LIMIT 1;
SELECT COUNT(*)  FROM user_reviews ur  JOIN playstore p ON ur.App = p.App  WHERE ur.Sentiment = 'Neutral' AND p.Genres = 'Weather';
SELECT App FROM playstore WHERE Installs >= 1000000000 AND Translated_Review = 'nan' LIMIT 10;
SELECT      p.Rating,      SUM(ur.Sentiment_Subjectivity) as Total_Sentiment_Subjectivity FROM      playstore p JOIN      user_reviews ur ON p.App = ur.App WHERE      p.App = 'Onefootball - Soccer Scores' ;
SELECT      (COUNT(CASE WHEN u_reviews.Translated_Review = 'nan' AND p_info.Content_Rating = 'Teen' THEN 1 END)      / COUNT(u_reviews.App)) * 100 AS percentage_no_comment_Teen_apps FROM      user_reviews u_reviews JOIN      playstore p_info ON      u_reviews.App = p_info.App;
SELECT App  FROM playstore  WHERE Rating = 5;
SELECT p.App FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE p.Installs > 75000000 AND p.Content_Rating = 'Teen';
SELECT Genres FROM playstore WHERE Installs = '1,000,000,000+';
SELECT AVG(playstore.Price)  FROM playstore  WHERE playstore.Genres = 'Dating';
SELECT AVG(playstore.Installs) AS AverageDownloads FROM playstore JOIN user_reviews ON playstore.App = user_reviews.App WHERE playstore.Category = 'ENTERTAINMENT' AND playstore.Size <= '1.0M';
SELECT AVG(playstore.Reviews)  FROM playstore  WHERE playstore.Rating = 5;
SELECT p.Genres, COUNT(u.Translated_Review) as ReviewCount FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE u.Sentiment_Polarity > 0.5 GROUP BY p.Genres ORDER BY ReviewCount DESC LIMIT 3;
SELECT      (COUNT(CASE WHEN p.Rating = 4.7 AND u.Sentiment = 'Positive' THEN 1 END)      / COUNT(CASE WHEN p.Rating = 4.7 THEN 1 END)) * 100 AS percentage_of_positive_sentiment FROM      playstore p JOIN      user_reviews u ON p.App = u.App WHERE      p.Rating = 4.7;
SELECT App, AVG(Sentiment_Polarity) as Average_Rating FROM user_reviews WHERE Sentiment != 'Negative' GROUP BY App;
SELECT      p.App,     COUNT(ur.App) AS NegativeSentimentApps,     (COUNT(CASE WHEN ur.Sentiment = 'Negative' THEN ur.App END) * 100.0 / COUNT(ur.App)) AS NegativeSentimentPercentage FROM      playstore p LEFT JOIN      user_reviews ur ON p.App = ur.App WHERE      p.Last_Updated > '2015-01-01' GROUP BY      p.App;
SELECT      CAST(SUM(CASE WHEN Genre = 'Mature 17+' AND Rating > 4.5 AND SUBSTR(`Last Updated`, -4, 4) > '2018' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(App) AS percent FROM      playstore WHERE      Type = 'Free';
SELECT Genres  FROM playstore  WHERE App = 'Honkai Impact 3rd';
SELECT Rating  FROM playstore  WHERE App = 'Learn C++';
SELECT AVG(playstore.Price)  FROM playstore  JOIN user_reviews ON playstore.App = user_reviews.App  WHERE playstore.Genres = 'Arcade'  AND playstore.Content_Rating = 'Everyone 10+'  AND user_reviews.Translated_Review IS NOT NULL;
SELECT      playstore.Size  FROM      playstore  JOIN      user_reviews  ON      playstore.App = user_reviews.App  WHERE      playstore.App = 'Browser 4G' AND      user_reviews.Sentiment_Polarity = 0.5
SELECT App, Installs FROM user_reviews WHERE Sentiment_Subjectivity = 0.3;
SELECT AVG(ur.Sentiment_Polarity) AS AverageSentimentPolarity,        ps.Rating  FROM playstore ps  JOIN user_reviews ur ON ps.App = ur.App  WHERE ps.App = 'Golf GPS Rangefinder: Golf Pad';
SELECT p.App, COUNT(ur.Translated_Review) AS NegativeSentiments FROM playstore p  JOIN user_reviews ur ON p.App = ur.App WHERE p.Genres = 'puzzle' AND p.Rating = (SELECT MIN(Rating) FROM playstore WHERE Genres = 'puzzle')   GROUP BY p.App ORDER BY NegativeSentiments DESC LIMIT 5;
SELECT      (SUM(CASE WHEN u_reviews.Sentiment = 'Positive' THEN 1 ELSE 0 END) * 100.0 / SUM(CASE WHEN u_reviews.Sentiment = 'Negative' THEN 1 ELSE 0 END)) AS percentage_ratio,     playstore.Type, playstore.Version FROM      playstore JOIN      user_reviews AS u_reviews ON playstore.App = u_reviews.App WHERE      playstore.App = 'Fate/Grand Order' GROUP BY      playstore.Type, playstore.Version;
SELECT      p.Installs,     (SUM(CASE WHEN ur.Sentiment = 'Positive' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS Positive_Sentiment_Percentage FROM      playstore p JOIN      user_reviews ur ON p.App = ur.App WHERE      p.App = 'FREEDOME VPN Unlimited anonymous Wifi Security'
SELECT MAX(T2.Sentiment_Polarity), T1.Genres  FROM playstore AS T1  JOIN user_reviews AS T2 ON T1.App = T2.App  WHERE T1.App = 'Honkai Impact 3rd';
SELECT      playstore.Rating  FROM      playstore  JOIN      user_reviews ON playstore.App = user_reviews.App  WHERE      playstore.App = 'Dragon Ball Legends' AND      user_reviews.Sentiment_Polarity < -0.5;
SELECT T1.App, T1.Translated_Review FROM playstore AS T1 JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Category = 'EDUCATION' AND T1.Rating = 1;
SELECT p.App, p.Genres, u.Translated_Review FROM playstore AS p JOIN user_reviews AS u ON p.App = u.App WHERE p.Type = 'Free' AND p.Category = 'SPORTS'
SELECT COUNT(*) AS num_games, AVG(tr.Sentiment_Polarity) AS avg_sentiment_polarity FROM playstore  JOIN user_reviews tr ON playstore.App = tr.App WHERE playstore.Genres = 'Role Playing' AND playstore.Content_Rating = 'Teen';
SELECT      AVG(playstore.Rating) AS Average_Rating,     (SUM(CASE WHEN user_reviews.Sentiment = 'Positive' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS Positive_Sentiment_Percentage FROM      playstore JOIN      user_reviews ON playstore.App = user_reviews.App WHERE      playstore.Genres = 'racing';
SELECT Region  FROM Sales Team  WHERE SalesTeamID IN (     SELECT _SalesTeamID      FROM Sales Orders      GROUP BY _SalesTeamID      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT CustomerID, CustomerNames  FROM Customers  WHERE CustomerNames LIKE '%Group%';
SELECT AVG(MedianIncome)  FROM StoreLocations  WHERE Type = 'City';
SELECT      s.TSalesTeamID,      r.State FROM      SalesOrders s JOIN      SalesTeam ts ON s._SalesTeamID = ts.SalesTeamID JOIN      Regions r ON ts.Region = r.Region WHERE      s.OrderNumber = 'SO - 000137';
SELECT so.OrderNumber, p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so._SalesTeamID IN (     SELECT SalesTeamID      FROM SalesTeam      WHERE SalesTeam = 'Douglas Tucker' );
SELECT Customers.CustomerNames  FROM Customers  JOIN SalesOrders ON Customers.CustomerID = SalesOrders._CustomerID  JOIN Products ON SalesOrders._ProductID = Products.ProductID  WHERE Products.ProductName = 'Cocktail Glasses' AND SalesOrders.OrderDate BETWEEN '2020-01-01' AND '2020-12-31'  ORDER BY SalesOrders.DiscountApplied DESC  LIMIT 1;
SELECT so.OrderNumber, sl.CityName  FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE so.SalesChannel = 'In-Store';
SELECT      c.CustomerNames,     so.OrderDate FROM     Customers c JOIN     SalesOrders so ON c.CustomerID = so._CustomerID WHERE     so.UnitCost = (         SELECT              MAX(t.UnitCost)         FROM             SalesOrders t     )
SELECT OrderNumber FROM Customers JOIN SalesOrders ON Customers.CustomerID = SalesOrders._CustomerID WHERE Customers.CustomerName = 'Rochester Ltd' AND SUBSTR(SalesOrders.OrderDate, -2) = '18';
SELECT      s.OrderNumber,     p.ProductName,     st.SalesTeam FROM      SalesOrders s JOIN      Products p ON s._ProductID = p.ProductID JOIN      SalesTeam st ON s._SalesTeamID = st.SalesTeamID WHERE      s.WarehouseCode = 'WARE-NMK1003';
SELECT DISTINCT c.CustomerName FROM Customers c JOIN SalesOrders so ON c.CustomerID = so._CustomerID WHERE so.SalesChannel = 'Online';
SELECT AVG(Unit Price - Unit Cost) AS AverageNetProfit FROM Sales Orders JOIN Products ON Sales Orders._ProductID = Products.ProductID WHERE Products.ProductName = 'Bakeware';
SELECT      s.TSalesTeam  FROM      SalesOrders AS o INNER JOIN      SalesTeam AS s ON o._SalesTeamID = s.SalesTeamID WHERE      o.OrderDate LIKE '%/20%' GROUP BY      s.TSalesTeam ORDER BY      SUM(o.UnitPrice - o.UnitCost) DESC LIMIT 1;
SELECT      SO.OrderNumber,     (SO.Unit Price - SO.Unit Cost) AS NetProfit FROM      SalesOrders SO JOIN      SalesTeam ST ON SO._SalesTeamID = ST.SalesTeamID WHERE      ST.SalesTeam = 'Joshua Bennett';
SELECT      (COUNT(CASE          WHEN p.ProductName = 'Home Fragrances' AND               SUBSTR(so.ShipDate, -2) = '18' THEN so.OrderNumber          ELSE NULL      END) / COUNT(CASE          WHEN SUBSTR(so.ShipDate, -2) = '18' THEN so.OrderNumber          ELSE NULL      END)) * 100 AS Percentage FROM      SalesOrders so JOIN      Products p ON so._ProductID = p.ProductID WHERE      SUBSTR(so.orderDate, 1, 1) = '7';
SELECT `CustomerID`, `Customer Names` FROM `Customers` WHERE `Customer Names` LIKE 'W%';
SELECT ProductID, ProductName  FROM Products  WHERE ProductName LIKE '%Outdoor%';
SELECT COUNT(*)  FROM SalesOrders  WHERE DiscountApplied = 0.4  AND SalesChannel = 'In-Store'  AND WarehouseCode = 'WARE-NMK1003';
SELECT      s.Longitude, s.Latitude, s.Population, p.MedianIncome FROM      StoreLocations s     JOIN Regions r ON s.StateCode = r.StateCode WHERE      r.Region = 'Florida' ORDER BY      s.Population DESC LIMIT 1;
SELECT      StoreID,      City_Name  FROM      Store_locations  WHERE      County = 'Allen';
SELECT      StoreID,      City_Name,      State,      Region FROM      Store_Locations WHERE      Type IN ('Borough', 'CDP') AND      Type = (         SELECT              Type          FROM              Store_Locations          WHERE              Type = 'Borough'          GROUP BY              Type          ORDER BY              COUNT(StoreID)          LIMIT 1     ) OR      Type = (         SELECT              Type          FROM              Store_Locations          WHERE              Type = 'CDP'          GROUP BY              Type          ORDER BY              COUNT(StoreID)          LIMIT 1     );
SELECT      R.Region,     ST.SalesTeam FROM     Sales Team AS ST JOIN     Regional_Sales AS RS ON ST.SalesTeamID = RS._SalesTeamID JOIN     Customers AS C ON RS._CustomerID = C.CustomerID JOIN     Store_Locations AS SL ON RS._StoreID = SL.StoreID JOIN     Products AS P ON RS._ProductID = P.ProductID WHERE     ST.SalesTeamID = 18 AND     (RS.OrderNumber IN (SELECT OrderNumber FROM Sales_Orders WHERE Sales_Channel = 'In-Store') AND RS.OrderNumber NOT IN (SELECT OrderNumber FROM Sales_Orders WHERE Sales_Channel = 'Online')) OR     (RS.OrderNumber NOT IN (SELECT OrderNumber FROM Sales_Orders WHERE Sales_Channel = 'In-Store') AND RS.OrderNumber IN (SELECT OrderNumber FROM Sales_Orders WHERE Sales_Channel = 'Online')) GROUP BY     R.Region, ST.SalesTeam;
SELECT      (COUNT(CASE WHEN SalesChannel = 'In-Store' THEN OrderNumber END)      OVER()      / COUNT(OrderNumber)      OVER(PARTITION BY CustomerNames)      * 100) AS PercentageInStoreChannel FROM      SalesOrders WHERE      CustomerNames = 'Medline';
SELECT      c.CustomerNames,     (CASE          WHEN SUBSTR(so.DeliveryDate, -2) = '19' AND SUBSTR(so.OrderDate, -2) = '19' THEN EXTRACT(YEAR FROM so.DeliveryDate - so.OrderDate)         ELSE NULL     END) AS DeliveryPeriod FROM      Customers c JOIN      SalesOrders so ON c._CustomerID = so._CustomerID JOIN      Products p ON so._ProductID = p.ProductID WHERE      p.ProductName = 'Bedroom Furniture'     AND so.SalesChannel = 'Wholesale'     AND so.DeliverDate >= '2019-01-01'     AND so.DeliverDate <= '2019-12-31';
SELECT      c.CustomerNames,     p.ProductName FROM     Customers c JOIN     SalesOrders so ON c.CustomerID = so._CustomerID JOIN     Products p ON so._ProductID = p.ProductID WHERE     (p.UnitPrice - p.UnitCost) * so.OrderQuantity > 3800;
SELECT DISTINCT s.CityName FROM StoreLocations s JOIN Regions r ON s.StateCode = r.StateCode WHERE s.WaterArea = 0 AND s.State = 'California' AND r.Region = 'West'
SELECT      (COUNT(CASE WHEN s.SalesTeamID = (SELECT SalesTeamID FROM Sales_Team WHERE Sales_Team = 'Carlos Miller') THEN s.OrderNumber END) * 100 / COUNT(s.OrderNumber)) as Percentage FROM      Sales_Orders s ;
SELECT      (SELECT COUNT(Orders.OrderNumber)       FROM SalesOrders AS Orders       JOIN Products AS P ON Orders._ProductID = P.ProductID       WHERE P.ProductName = 'Platters') >      (SELECT COUNT(Orders.OrderNumber)       FROM SalesOrders AS Orders       JOIN Products AS P ON Orders._ProductID = P.ProductID       WHERE P.ProductName = 'Serveware');
SELECT SUM(T1.Unit Price - T1.Unit Cost) AS TotalNetProfit FROM `Sales Orders` AS T1  JOIN `Store Locations` AS T2 ON T1._StoreID = T2.StoreID WHERE T2.Median Income = (SELECT MAX(`Median Income`) FROM `Store Locations`);
SELECT COUNT(SalesOrders._SalesTeamID)  FROM SalesOrders  JOIN SalesTeam ON SalesOrders._SalesTeamID = SalesTeam.SalesTeamID  WHERE SalesTeam.Region = 'South' AND SalesTeam.SalesTeamID BETWEEN 1 AND 9;
SELECT COUNT(OrderNumber)  FROM SalesOrders  WHERE OrderDate = '2018-05-31'
SELECT `OrderNumber`  FROM `Sales Orders`  WHERE `DeliveryDate` = '2018-06-13';
SELECT COUNT(*)  FROM SalesOrders  WHERE OrderQuantity > 5;
SELECT State FROM Regions WHERE StateCode = 'GA';
SELECT COUNT(*)  FROM Regions  WHERE Region = 'Midwest';
SELECT ProductName FROM Products WHERE ProductID IN (     SELECT _ProductID     FROM SalesOrders     WHERE UnitCost = 781.22 );
SELECT DeliveryDate FROM SalesOrders JOIN Products ON SalesOrders._ProductID = Products.ProductID WHERE Products.ProductName = 'Cookware';
SELECT COUNT(*)  FROM SalesOrders  JOIN Products ON SalesOrders._ProductID = Products.ProductID  WHERE Products.ProductName = 'Furniture Cushions' AND SUBSTR(SalesOrders.OrderDate, -2) = '18';
SELECT ProductName FROM Products JOIN SalesOrders ON Products.ProductID = SalesOrders._ProductID WHERE DiscountApplied = 0.1;
SELECT AVG(T1.Unit Price - T1.Unit Cost) AS AverageNetProfit FROM `Sales Orders` AS T1 JOIN `Products` AS T2 ON T1._ProductID = T2.ProductID WHERE T2.ProductName = 'Phones' AND T1.Sales Channel = 'Distributor';
SELECT AVG(U.Price - U.Cost) AS AverageNetProfit FROM (     SELECT S.ProductID, P.UnitPrice, P.UnitCost     FROM SalesOrders S     JOIN Products P ON S._ProductID = P.ProductID     WHERE P.ProductName = 'Bar Tools' ) U WHERE U.OrderQuantity > 5;
SELECT DISTINCT StoreLocations.CityName  FROM StoreLocations  JOIN Regions ON StoreLocations.StateCode = Regions.StateCode  WHERE Regions.Region = 'South';
SELECT DISTINCT r.Region  FROM Store_locations sl  JOIN Regions r ON sl.StateCode = r.StateCode  WHERE sl.Type = 'Town';
SELECT COUNT(OrderNumber)  FROM SalesOrders  JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID  WHERE Customers.CustomerNames = 'Medsep Group'
SELECT      s.DiscountApplied  FROM      SalesOrders s  JOIN      Customers c ON s._CustomerID = c.CustomerID  WHERE      c.CustomerNames = 'Ole Group';
SELECT Customers.CustomerName  FROM SalesOrders  JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID  WHERE SalesOrders.ShipDate = '7/8/18';
SELECT COUNT(*)  FROM SalesOrders  JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID  WHERE Customers.CustomerNames = 'Ei' AND OrderQuantity > 4;
SELECT COUNT(*)  FROM SalesOrders  JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID  WHERE Customers.CustomerNames = 'Pacific Ltd' AND SalesOrders.DiscountApplied = 0.05;
SELECT Customers.CustomerNames FROM Customers JOIN SalesOrders ON Customers.CustomerID = SalesOrders._CustomerID WHERE SalesOrders.UnitCost > 4000;
SELECT StoreID, CONCAT(Latitude, ', ', Longitude) AS DetailedPosition FROM StoreLocations WHERE CityName = 'Birmingham';
SELECT `City Name`  FROM Store_locations  WHERE `Population` = (SELECT MAX(`Population`) FROM Store_locations);
SELECT COUNT(*)  FROM StoreLocations  WHERE State = 'California' AND Type = 'CDP';
SELECT SO.OrderNumber, P.ProductName  FROM SalesOrders AS SO  JOIN Products AS P ON SO._ProductID = P.ProductID  WHERE SO.UnitPrice = (SELECT MIN(UnitPrice) FROM SalesOrders);
SELECT ProductName FROM (   SELECT      _ProductID,     SUM(UnitPrice - UnitCost) AS NetProfit   FROM SalesOrders   WHERE DATE(OrderDate) BETWEEN '2019-01-01' AND '2019-12-31'   GROUP BY _ProductID ) AS SubQuery JOIN Products ON SalesOrders._ProductID = Products.ProductID WHERE NetProfit = (SELECT MAX(NetProfit) FROM (   SELECT      SUM(UnitPrice - UnitCost) AS NetProfit   FROM SalesOrders   WHERE DATE(OrderDate) BETWEEN '2019-01-01' AND '2019-12-31'   GROUP BY _ProductID ) AS MaxQuery)
SELECT AVG(Unit Price)  FROM Products  WHERE Product Name = 'Cookware';
SELECT DISTINCT st.SalesTeam  FROM SalesTeam st  JOIN SalesOrders so ON st.SalesTeamID = so._SalesTeamID  WHERE so.OrderDate = '2018-05-31';
SELECT      s.TSalesTeam  FROM      SalesOrders so  JOIN      SalesTeam s ON so._SalesTeamID = s.SalesTeamID  WHERE      SUBSTR(so.OrderDate, -2) = '19'  GROUP BY      s.TSalesTeam  ORDER BY      COUNT(so.OrderNumber) ASC  LIMIT 1;
SELECT      SUBSTR(OrderDate, -2) AS Year,     COUNT(OrderNumber) AS TotalOrders FROM      SalesOrders JOIN      SalesTeam ON SalesOrders._SalesTeamID = SalesTeam.SalesTeamID WHERE      SalesTeam.SalesTeam = 'George Lewis' AND      SUBSTR(OrderDate, -2) IN ('18', '19', '20') GROUP BY      SUBSTR(OrderDate, -2) ORDER BY      TotalOrders DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN T4.County = 'Orange County' AND SUBSTR(T3.OrderDate, -2) = '18' THEN 1 END)      / COUNT(CASE WHEN SUBSTR(T3.OrderDate, -2) = '18' THEN 1 END)) * 100 AS Percentage FROM      SalesOrders T3 JOIN      StoreLocations T4 ON T3._StoreID = T4.StoreID;
SELECT `OrderNumber`  FROM `Sales Orders`  WHERE `Unit Price` = (SELECT MAX(`Unit Price`) FROM `Sales Orders`);
SELECT _SalesTeamID FROM SalesOrders WHERE SUBSTR(OrderDate, -2) = '18' GROUP BY _SalesTeamID ORDER BY COUNT(OrderNumber) DESC LIMIT 1;
SELECT Unit Cost  FROM Sales Orders  WHERE OrderNumber = 'SO - 000103';
SELECT      SUM(CASE              WHEN SUBSTR(SalesOrders.OrderDate, -2) = '20'               AND SalesOrders.StoreID IN (SELECT StoreID FROM StoreLocations WHERE County = 'Maricopa County')              THEN 1          END) AS TotalOrders FROM      SalesOrders;
SELECT      s.Latitude,      s.Longitude  FROM      StoreLocations s  JOIN      SalesOrders so ON s.StoreID = so._StoreID  WHERE      so.OrderNumber = 'SO - 000115';
SELECT      s.City Name,     COUNT(so.OrderNumber) AS TotalOrders FROM      SalesOrders so JOIN      StoreLocations s ON so._StoreID = s.StoreID WHERE      so.OrderDate BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY      s.City Name;
SELECT Customers.CustomerNames  FROM Customers  JOIN SalesOrders ON Customers.CustomerID = SalesOrders._CustomerID  WHERE YEAR(SalesOrders.OrderDate) = 2018  GROUP BY Customers.CustomerID, Customers.CustomerNames  HAVING COUNT(SalesOrders.OrderNumber) > 3;
SELECT COUNT(OrderNumber) AS TotalOrders FROM SalesOrders WHERE _CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerNames = 'Medsep Group') AND SUBSTR(OrderDate, -2) IN ('18', '19', '20');
SELECT Customers.CustomerNames  FROM Customers  JOIN SalesOrders ON Customers.CustomerID = SalesOrders._CustomerID  WHERE SalesOrders.OrderQuantity > 5 AND SalesOrders.OrderDate = '2018-06-01'
SELECT      (COUNT(CASE          WHEN (Unit Price - Unit Cost) > 1000 THEN 1     END) * 100 / COUNT(*)) as PercentageOrdersOver1000Profit FROM      SalesOrders WHERE      _SalesTeamID IN (         SELECT SalesTeamID FROM SalesTeam WHERE SalesTeam = 'Stephen Payne'     );
SELECT COUNT(*)  FROM Sales_Team  WHERE Region = 'Northeast';
SELECT City_Name, Latitude, Longitude  FROM Store_Locations  WHERE County = 'Maricopa County';
SELECT `OrderNumber` FROM `Sales Orders` WHERE `Unit Cost` = (SELECT MAX(`Unit Cost`) FROM `Sales Orders`);
SELECT ProductName FROM Products WHERE ProductID BETWEEN 30 AND 40;
SELECT      (MAX(Unit_Cost) / MIN(Unit_Cost)) AS Ratio_Highest_To_Lowest FROM      Sales_Orders;
SELECT      p.ProductName  FROM      Products p  JOIN      SalesOrders so ON p.ProductID = so._ProductID  WHERE      SUBSTR(so.OrderDate, -2) = '18'  GROUP BY      p.ProductName  ORDER BY      COUNT(so.OrderNumber) DESC  LIMIT 1;
SELECT SUM(`Order Quantity`)  FROM `Sales Orders`  WHERE `_SalesTeamID` = (SELECT `SalesTeamID` FROM `Sales Team` WHERE `Sales Team` = 'Adam Hernandez');
SELECT OrderNumber FROM SalesOrders JOIN StoreLocations ON SalesOrders._StoreID = StoreLocations.StoreID WHERE StoreLocations.CityName = 'Daly City';
SELECT COUNT(OrderNumber)  FROM SalesOrders  JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID  WHERE Customers.CustomerNames = 'Rochester Ltd';
SELECT `OrderNumber` FROM `Sales Orders` WHERE `_CustomerID`  IN (     SELECT `CustomerID`     FROM `Customers`     WHERE `CustomerNames` = 'Qualitest' );
SELECT so.OrderNumber, p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.SalesChannel = 'In-Store';
SELECT COUNT(*)  FROM SalesOrders  WHERE SalesChannel = 'Online'  AND MONTH(OrderDate) = 5  AND YEAR(OrderDate) = 2018  AND City IN (SELECT CityName FROM StoreLocations WHERE AreaCode = 'Norman');
SELECT ProductName FROM Products JOIN SalesOrders ON Products.ProductID = SalesOrders._ProductID JOIN StoreLocations ON SalesOrders._StoreID = StoreLocations.StoreID WHERE StoreLocations.County = 'Maricopa County' ORDER BY SalesOrders.OrderQuantity ASC LIMIT 1;
SELECT `OrderNumber`  FROM `Sales Orders`  JOIN `Sales Team` ON `Sales Orders._SalesTeamID` = `Sales Team.SalesTeamID`  WHERE `Sales Team.Sales Team` = 'Samuel Fowler';
SELECT COUNT(*)  FROM SalesOrders  JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID  JOIN Products ON SalesOrders._ProductID = Products.ProductID  WHERE Products.ProductName = 'Baseball' AND MONTH(SalesOrders.OrderDate) = 12 AND YEAR(SalesOrders.OrderDate) = 2017;
SELECT      EXTRACT(YEAR FROM OrderDate) AS Year,     EXTRACT(MONTH FROM OrderDate) AS Month,     AVG(SUM(`Order Quantity`) / 12) AS AvgNumberOfOrnamentsSoldPerMonth FROM      SalesOrders WHERE      ProductName = 'Ornaments' AND      `OrderDate` LIKE '%/18' GROUP BY      Year, Month;
SELECT      (SUM(CASE WHEN sl.CityName = 'Burbank' AND SUBSTR(so.OrderDate, -2) = '18' THEN so.OrderQuantity ELSE 0 END)) * 100 / SUM(CASE WHEN SUBSTR(so.OrderDate, -2) = '18' THEN so.OrderQuantity ELSE 0 END) AS PercentageOfProductsShippedFromBurbankIn2018 FROM      SalesOrders so JOIN      StoreLocations sl ON so._StoreID = sl.StoreID;
SELECT      Subtract(COUNT(OrderNumber) WHERE WarehouseCode = 'WARE-MKL1006'),      COUNT(OrderNumber) WHERE WarehouseCode = 'WARE-NBV1002' FROM SalesOrders;
SELECT P.ProductName  FROM Products AS P  JOIN SalesOrders AS SO ON P.ProductID = SO._ProductID  JOIN StoreLocations AS SL ON SO._StoreID = SL.StoreID  JOIN Customers AS C ON SO._CustomerID = C.CustomerID  WHERE C.CustomerNames = 'Sundial' AND DATE_FORMAT(SO.DeliveryDate, '%Y/%m/%d') LIKE '2021/%'
SELECT      s.StoreID, r.Region FROM      Store Locations s JOIN      Regions r ON s.State = r.StateCode WHERE      r.State = 'Michigan';
SELECT      c.CustomerName,     COUNT(so.OrderNumber) AS TotalOrders FROM      Customers c JOIN      SalesOrders so ON c.CustomerID = so._CustomerID WHERE      c.CustomerName IN ('Apollo Ltd', 'Pacific Ltd') GROUP BY      c.CustomerName;
SELECT _StoreID  FROM Sales_Orders  WHERE _StoreID IN (   SELECT StoreID    FROM Store_Locations    WHERE City_Name = 'Aurora (Township)' OR City_Name = 'Babylon (Town)' ) GROUP BY _StoreID  HAVING COUNT(OrderNumber) = MAX(COUNT(OrderNumber)) OVER (PARTITION BY _StoreID);
SELECT Customers.CustomerNames, Products.ProductName  FROM Customers  JOIN SalesOrders ON Customers.CustomerID = SalesOrders._CustomerID  JOIN Products ON SalesOrders._ProductID = Products.ProductID  JOIN SalesTeam ON SalesOrders._SalesTeamID = SalesTeam.SalesTeamID  WHERE SalesTeam.SalesTeam = 'Anthony Torres' AND SalesOrders.SalesChannel = 'Distributor';
SELECT      c.CustomerID,     c.CustomerNames FROM     Customers c JOIN     SalesOrders so ON c.CustomerID = so._CustomerID JOIN     Products p ON so._ProductID = p.ProductID WHERE     so.SalesChannel = 'Online' GROUP BY     c.CustomerID, c.CustomerNames HAVING     SUM(p.UnitPrice - p.UnitCost) > 5000;
SELECT SUM(T1.Unit Price - T1.Unit Cost) AS NetProfit FROM SalesOrders AS T1 JOIN Products AS T2 ON T1._ProductID = T2.ProductID WHERE T2.ProductName = 'Floral' AND DATE_FORMAT(T1.DeliveryDate, '%Y/%m/%d') LIKE '2021/%'
SELECT COUNT(OrderNumber)  FROM SalesOrders  JOIN StoreLocations ON SalesOrders._StoreID = StoreLocations.StoreID  WHERE StoreLocations.Population BETWEEN 3000000 AND 4000000;
SELECT p.ProductName  FROM Products p  JOIN SalesOrders so ON p.ProductID = so._ProductID  JOIN Stores s ON so._StoreID = s.StoreID  JOIN StoreLocations sl ON s.StoreID = sl.StoreID  WHERE sl.TimeZone = 'Pacific/Honolulu' AND so.SalesChannel = 'Wholesale';
SELECT SO.OrderNumber, P.ProductName  FROM SalesOrders AS SO  JOIN Products AS P ON SO._ProductID = P.ProductID  WHERE DATE(SO.OrderDate) = '2018-06-05'
SELECT      COUNT(OrderNumber) / 3. AS Average_Yearly_Order FROM      SalesOrders WHERE      _CustomerID IN (         SELECT              CustomerID         FROM              Customers         WHERE              CustomerNames = 'Weimei Corp'     ) AND      SUBSTR(OrderDate, -2) IN ('18', '19', '20');
SELECT      (COUNT(CASE WHEN ProductName = 'Floor Lamps' THEN OrderNumber END) FILTER WHERE SUBSTR(OrderDate, -2) = '19') AS FloorLampsOrders,     (COUNT(OrderNumber) FILTER WHERE SUBSTR(OrderDate, -2) = '19') AS TotalOrders,     (COUNT(CASE WHEN ProductName = 'Floor Lamps' AND WarehouseCode = 'WARE-NMK1003' THEN OrderNumber END) FILTER WHERE SUBSTR(OrderDate, -2) = '19') / COUNT(OrderNumber) FILTER WHERE SUBSTR(OrderDate, -2) = '19' * 100.0 AS PercentageWARENMK1003 FROM      SalesOrders WHERE      SUBSTR(OrderDate, -2) = '19';
SELECT ProcuredDate  FROM SalesOrders  WHERE _CustomerID = 11;
SELECT COUNT(*)  FROM SalesOrders  WHERE SalesChannel = 'Distributor'  AND OrderQuantity = (SELECT MIN(OrderQuantity) FROM SalesOrders);
SELECT DISTINCT st.SalesTeamID  FROM SalesOrders so  JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID  WHERE so.DiscountApplied = 0.1 AND so.SalesChannel = 'In-Store';
SELECT COUNT(*)  FROM Store_locations  WHERE Type = 'Borough'  AND City_Name = 'Brooklyn'  AND Population < 3000000;
SELECT COUNT(DISTINCT state)  FROM Regions  WHERE region = 'Midwest';
SELECT      p.ProductName,     (u.Price - u.Cost) AS NetProfit FROM      Products p JOIN      SalesOrders so ON p.ProductID = so._ProductID JOIN      SalesTeam st ON so._SalesTeamID = st.SalesTeamID JOIN      Customers c ON so._CustomerID = c.CustomerID JOIN      StoreLocations sl ON so._StoreID = sl.StoreID JOIN      Units u ON p.ProductID = u.ProductID WHERE      u.Cost < u.Price GROUP BY      p.ProductName ORDER BY      NetProfit DESC LIMIT 10;
SELECT Customers.CustomerNames  FROM Customers  JOIN SalesOrders ON Customers.CustomerID = SalesOrders._CustomerID  WHERE SalesOrders.OrderQuantity = 3 AND MONTH(SalesOrders.OrderDate) = 2 AND YEAR(SalesOrders.OrderDate) = 2018;
SELECT DISTINCT st.SalesTeam  FROM Sales_Orders so  JOIN Customers c ON so._CustomerID = c.CustomerID  JOIN Sales_Team st ON so._SalesTeamID = st.SalesTeamID  WHERE c.CustomerNames = 'Apotheca, Ltd';
SELECT DISTINCT R.Region  FROM SalesOrders SO  JOIN StoreLocations SL ON SO._StoreID = SL.StoreID  JOIN SalesTeam ST ON SO._SalesTeamID = ST.SalesTeamID  JOIN Regions R ON SL.StateCode = R.StateCode  WHERE SO.WarehouseCode = 'WARE-UHY1004';
SELECT DISTINCT s.CityName FROM StoreLocations s JOIN SalesOrders so ON s.StoreID = so._StoreID JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID JOIN Products p ON so._ProductID = p.ProductID WHERE st.SalesTeam = 'Shawn Torres' AND p.ProductName = 'Audio'
SELECT      p.ProductName,     c.CustomerNames FROM     SalesOrders so JOIN      Customers c ON so._CustomerID = c.CustomerID JOIN      Products p ON so._ProductID = p.ProductID WHERE      so.OrderDate = '10/21/18' AND so.DeliveryDate = '11/21/19';
SELECT COUNT(DISTINCT s.StoreID) FROM StoreLocations s JOIN SalesOrders so ON s.StoreID = so._StoreID WHERE s.State = 'Oregon' AND so.ProcuredDate = '10/27/18';
SELECT      s.SalesChannel FROM      SalesOrders AS s JOIN      StoreLocations AS sl ON s._StoreID = sl.StoreID WHERE      sl.MedianIncome = (SELECT MAX(MedianIncome) FROM StoreLocations) GROUP BY      s.SalesChannel ORDER BY      COUNT(*) DESC LIMIT 1;
SELECT      s.TSalesTeamID,      SUM((u.Price - u.Cost) * o.Quantity) AS NetProfit FROM      SalesOrders o JOIN      SalesTeam s ON o._SalesTeamID = s.SalesTeamID JOIN      Units u ON o._ProductID = u.ProductID GROUP BY      s.SalesTeamID ORDER BY      NetProfit DESC LIMIT 5;
SELECT MAX(T2.DiscountApplied)  FROM StoreLocations AS T2  JOIN SalesOrders AS T3 ON T2.StoreID = T3._StoreID  WHERE T2.State = 'Colorado' AND T2.LandArea = 111039036;
SELECT COUNT(DISTINCT TimeZone)  FROM Store_locations  WHERE StateCode IN (SELECT StateCode FROM Regions WHERE Region = 'Northeast');
SELECT      Type  FROM      Store_locations  WHERE      Region = 'South'  GROUP BY      Type  ORDER BY      COUNT(*) DESC  LIMIT 1;
SELECT      s.T.Region  FROM      SalesOrders so JOIN      StoreLocations sl ON so._StoreID = sl.StoreID JOIN      SalesTeam s ON s.SalesTeamID = so._SalesTeamID WHERE      sl.WarehouseCode = 'WARE-MKL1006' GROUP BY      s.T.Region ORDER BY      COUNT(s.T.Region) DESC LIMIT 1;
SELECT      s.CityName  FROM      StoreLocations s JOIN      SalesOrders so ON s.StoreID = so._StoreID WHERE      so.UnitPrice = (SELECT MAX(UnitPrice) FROM SalesOrders);
SELECT COUNT(*)  FROM SalesOrders  JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID  WHERE Customers.CustomerNames = 'Ole Group'  AND SalesOrders.SalesChannel = 'Online'  AND MONTH(SalesOrders.OrderDate) = 5  AND YEAR(SalesOrders.OrderDate) = 2019;
SELECT COUNT(*)  FROM Store_locations  WHERE County = 'Washtenaw County' AND `Order Quantity` = 1 AND `Sales Channel` = 'Distributor';
SELECT      p.ProductName  FROM      SalesOrders so JOIN      StoreLocations sl ON so._StoreID = sl.StoreID JOIN      Products p ON so._ProductID = p.ProductID WHERE      sl.CityName = 'Santa Clarita' GROUP BY      p.ProductName ORDER BY      COUNT(so.OrderQuantity) ASC LIMIT 1;
SELECT      s.Longitude,      s.Latitude  FROM      Store_locations s  JOIN      Sales_orders so ON s.StoreID = so.WarehouseCode  WHERE      so.WarehouseCode = 'WARE-PUJ1005'  GROUP BY      s.Longitude, s.Latitude  ORDER BY      COUNT(so.WarehouseCode) ASC  LIMIT 1;
SELECT      (SUM(CASE WHEN sl.CityName = 'New York' THEN 1 ELSE 0 END) / COUNT(SO.OrderNumber)) * 100 AS PercentageOfSalesNY FROM      regional_sales.SalesOrders SO JOIN      regional_sales.StoreLocations sl ON SO._StoreID = sl.StoreID WHERE      SO.OrderDate = DATE('2020-04-04');
SELECT      AVG(StoreLocations.LandArea) AS AverageLandArea FROM      SalesOrders JOIN      StoreLocations ON SalesOrders._StoreID = StoreLocations.StoreID WHERE      SalesOrders.UnitPrice = 998.30;
SELECT AVG(T2.Population)  FROM Store Locations AS T1  JOIN Store Locations AS T2 ON T1.State = T2.State AND T1.Type = 'city' AND T1.StateCode = T2.StateCode  WHERE T1.State = 'New Hampshire'
SELECT COUNT(*)  FROM Sales_Team  WHERE Region = 'Midwest';
SELECT OrderNumber FROM SalesOrders WHERE OrderDate > '2018-01-01';
SELECT COUNT(DISTINCT s.sales_channel) FROM SalesOrders s JOIN SalesTeam st ON s._sales_team_id = st.sales_team_id JOIN Regions r ON st.region = r.region WHERE r.state = 'Midwest';
SELECT      s.TSalesTeamID  FROM      SalesOrders AS o  JOIN      SalesTeam AS s ON o._SalesTeamID = s.SalesTeamID  GROUP BY      s.TSalesTeamID  ORDER BY      MAX(o.UnitPrice) DESC  LIMIT 1;
SELECT      R.Region FROM      Regions R JOIN      SalesOrders SO ON R.StateCode = SO._StoreID JOIN      SalesTeam ST ON R.Region = ST.Region WHERE      SO.SalesChannel = 'Online' GROUP BY      R.Region ORDER BY      AVG(SO.Discount Applied) DESC LIMIT 1;
SELECT `OrderNumber` FROM `Sales Orders` WHERE `_CustomerID` IN (     SELECT `CustomerID`     FROM `Customers`     WHERE `Customer Names` = 'Apollo Ltd' ) AND `Unit Price` = (     SELECT MAX(`Unit Price`)     FROM `Sales Orders` )
SELECT `OrderNumber`, `WarehouseCode` FROM `Customers` WHERE `Customer Names` = 'Elorac, Corp';
SELECT Customers.CustomerNames  FROM Customers  JOIN SalesOrders ON Customers.CustomerID = SalesOrders._CustomerID  JOIN Products ON SalesOrders._ProductID = Products.ProductID  WHERE Products.ProductName = 'Cocktail Glasses' AND SalesOrders.SalesChannel = 'Online';
SELECT      s.StoreID,      s.CityName  FROM      StoreLocations s  JOIN      SalesOrders so ON s.StoreID = so._StoreID  JOIN      Products p ON so._ProductID = p.ProductID  WHERE      s.State = 'Arizona'  GROUP BY      s.StoreID,      s.CityName  ORDER BY      SUM(so.UnitPrice - so.UnitCost) DESC  LIMIT 1;
SELECT      SUM(CASE WHEN T3.State = 'Florida' THEN T4.Unit Price END) -      SUM(CASE WHEN T3.State = 'Texas' THEN T4.Unit Price END) AS PriceDifference FROM      Customers AS T1 JOIN      Sales Orders AS T2 ON T1.CustomerID = T2._CustomerID JOIN      Store Locations AS T3 ON T3.StoreID = T2._StoreID JOIN      Products AS T4 ON T4.ProductID = T2._ProductID WHERE      T4.ProductName = 'Computers';
SELECT      s.TSalesTeamID  FROM      SalesOrders o INNER JOIN      SalesTeam s ON o._SalesTeamID = s.SalesTeamID INNER JOIN      Regions r ON s.Region = r.Region WHERE      r.State LIKE '%Midwest%' AND      o.OrderQuantity > 5;
SELECT SL.StoreID  FROM SalesOrders SO  JOIN StoreLocations SL ON SO._StoreID = SL.StoreID  WHERE SL.State = 'California' AND SO.DiscountApplied = '0.2' AND SO.SalesChannel = 'In-Store';
SELECT      c.CustomerNames  FROM      Customers c JOIN      SalesOrders so ON c.CustomerID = so._CustomerID WHERE      so.OrderDate BETWEEN '2018-01-01' AND '2020-12-31' GROUP BY      c.CustomerNames ORDER BY      SUM(so.OrderQuantity) DESC LIMIT 1;
SELECT      SUM(CASE              WHEN p.ProductName = 'Candles' THEN so.OrderQuantity            ELSE 0          END) AS TotalOrderQuantityCandles,     (SUM(CASE              WHEN p.ProductName = 'Candles' THEN so.OrderQuantity            ELSE 0          END) /       (SELECT SUM(OrderQuantity) FROM SalesOrders)) * 100 AS PercentageCandles FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID;
SELECT R.Region FROM Sales_Team ST JOIN Customers C ON ST._CustomerID = C.CustomerID WHERE C.CustomerNames = 'Joshua Bennett'
SELECT StoreID FROM StoreLocations WHERE County = (SELECT County FROM StoreLocations ORDER BY Population DESC LIMIT 1);
SELECT COUNT(*)  FROM Sales_Team  WHERE Region = 'Midwest';
SELECT      s.Type  FROM      StoreLocations s  WHERE      s.CityName =      (SELECT          CityName       FROM          StoreLocations sl       WHERE          Max(s.LandArea - sl.LandArea) = s.WaterArea)
SELECT COUNT(*)  FROM SalesOrders  WHERE SUBSTR(ShipDate, 1, 1) = '6'  AND SUBSTR(ShipDate, -2) = '18'  AND SalesChannel = 'Online';
SELECT SUM(Discount Applied)  FROM Sales Orders  WHERE Unit Price = (SELECT MAX(Unit Price) FROM Sales Orders);
SELECT ProductName FROM Products p JOIN SalesOrders so ON p.ProductID = so._ProductID JOIN Customers c ON so._CustomerID = c.CustomerID WHERE (so.Unit Price - so.Unit Cost) = (   SELECT MAX(UnitPrice - UnitCost)   FROM SalesOrders   JOIN Products ON SalesOrders._ProductID = Products.ProductID )
SELECT      s.CityName,     AVG(i.HouseholdIncome) AS AverageHouseholdIncome FROM      StoreLocations s JOIN      (SELECT StateCode, MAX(Count(StoreID)) as MaxStoreCount FROM StoreLocations GROUP BY StateCode) max_stores ON s.StateCode = max_stores.StateCode AND s.Count(StoreID) = max_stores.MaxStoreCount JOIN      Regions r ON s.State = r.State WHERE      r.Region = 'Northeast' GROUP BY      s.CityName;
SELECT DISTINCT r.Region  FROM Regions r  JOIN StoreLocations sl ON r.State = sl.StateCode  WHERE r.MedianIncome < 30000;
SELECT COUNT(*)  FROM StoreLocations  JOIN Regions ON StoreLocations.StateCode = Regions.StateCode  WHERE Regions.Region = 'West' AND StoreLocations.LandArea < 20000000;
SELECT Customers.CustomerNames  FROM Customers  JOIN SalesOrders ON Customers.CustomerID = SalesOrders._CustomerID  JOIN Products ON SalesOrders._ProductID = Products.ProductID  WHERE (Products.UnitPrice - Products.UnitCost) =  (SELECT MAX(UnitPrice - UnitCost) FROM Products);
SELECT      s.TSalesTeamName  FROM      SalesTeam AS s  JOIN      SalesOrders AS so ON s.SalesTeamID = so._SalesTeamID  WHERE      SUBSTR(so.ShipDate, -2) = '19'  GROUP BY      s.SalesTeamID  ORDER BY      COUNT(so.OrderNumber) DESC  LIMIT 1;
SELECT p.ProductName  FROM Products p JOIN SalesOrders so ON p.ProductID = so._ProductID WHERE so.OrderQuantity > 5 AND so.ShipDate LIKE '5/%/19' AND (SELECT MIN(UnitPrice - UnitCost) FROM Products WHERE ProductID = so._ProductID)
SELECT      s.Latitude,      s.Longitude  FROM      SalesOrders so  JOIN      Products p ON so._ProductID = p.ProductID  JOIN      StoresLocations s ON s.StoreID = so._StoreID  WHERE      (SELECT MAX(Profit) FROM          (SELECT SUM(p.UnitPrice - p.UnitCost) AS Profit FROM SalesOrders so          JOIN Products p ON so._ProductID = p.ProductID          WHERE so.OrderQuantity > 0) AS subquery) =      (SELECT SUM(p.UnitPrice - p.UnitCost) * so.OrderQuantity FROM SalesOrders so      JOIN Products p ON so._ProductID = p.ProductID      WHERE p.ProductID = (SELECT TOP 4 ProductID FROM                              (SELECT ProductID, SUM(UnitPrice - UnitCost) * OrderQuantity AS TotalProfit FROM SalesOrders so                              JOIN Products p ON so._ProductID = p.ProductID                              GROUP BY ProductID) AS subquery2                          ORDER BY TotalProfit DESC                          OFFSET 3 ROWS                          FETCH NEXT 1 ROWS ONLY))
SELECT      s.TSalesTeamID, COUNT(so.OrderNumber) AS OrderCount FROM      SalesOrders so JOIN      SalesTeam s ON so._SalesTeamID = s.SalesTeamID WHERE      SUBSTR(so.ShipDate, -2) = '20' GROUP BY      s.TSalesTeamID ORDER BY      OrderCount DESC LIMIT 1;  SELECT      SalesTeamName FROM      SalesTeam WHERE      SalesTeamID = (         SELECT              s.TSalesTeamID         FROM              SalesOrders so         JOIN              SalesTeam s ON so._SalesTeamID = s.SalesTeamID         WHERE              SUBSTR(so.ShipDate, -2) = '20'         GROUP BY              s.TSalesTeamID         ORDER BY              COUNT(so.OrderNumber) DESC         LIMIT 1     );
SELECT      EXTRACT(YEAR FROM SUBSTR(ShipDate, 1, 4)) AS OrderYear,     COUNT(OrderNumber) / 3.0 AS AvgShippedOrdersPerYear FROM      SalesOrders JOIN      SalesTeam ON SalesOrders._SalesTeamID = SalesTeam.SalesTeamID WHERE      SalesTeam.SalesTeam = 'Carl Nguyen'     AND SUBSTR(ShipDate, -2) IN ('18', '19', '20') GROUP BY      OrderYear ORDER BY      OrderYear;
SELECT      MAX(SUBTRACT(UnitPrice, UnitCost)) AS MaxNetProfit,     ProductName FROM     (SELECT           UnitPrice,           UnitCost,           ProductName,          SUBTRACT(UnitPrice, UnitCost) AS NetProfit      FROM Products      JOIN SalesOrders ON Products.ProductID = SalesOrders._ProductID      GROUP BY ProductName      ORDER BY NetProfit DESC      LIMIT 1) subquery
SELECT TOP 3 c.CustomerNames  FROM Customers c JOIN SalesOrders so ON c.CustomerID = so._CustomerID WHERE so.DiscountApplied > 0 ORDER BY (so.UnitPrice * so.OrderQuantity - so.DiscountApplied) DESC;
SELECT      SalesChannel FROM      SalesOrders WHERE      Substr(OrderDate, 1, 1) = '1' AND Substr(OrderDate, -2) = '20' GROUP BY      SalesChannel ORDER BY      COUNT(OrderNumber) DESC LIMIT 1;
SELECT ProductName  FROM Products  JOIN SalesOrders ON Products.ProductID = SalesOrders._ProductID  WHERE SalesOrders.OrderNumber = 'SO - 0005951';
SELECT      s.CityName, st.SalesTeam FROM      SalesOrders so JOIN      StoreLocations s ON so._StoreID = s.StoreID JOIN      SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE      so.OrderNumber = 'SO - 0001004';
SELECT      c.CustomerID,     c.CustomerNames FROM     Customers c JOIN     SalesOrders so ON c.CustomerID = so._CustomerID JOIN     StoreLocations sl ON sl.StoreID = so._StoreID WHERE     sl.CityName = 'Gilbert' AND     sl.State = 'Arizona' AND     so.ProcuredDate LIKE '%/19%' GROUP BY     c.CustomerID, c.CustomerNames ORDER BY     SUM((so.UnitPrice - so.UnitCost) * so.OrderQuantity) DESC LIMIT 1;
SELECT COUNT(*)  FROM SalesOrders  JOIN StoreLocations ON SalesOrders._StoreID = StoreLocations.StoreID  WHERE StoreLocations.CityName = 'Chandler' AND SUBSTR(SalesOrders.OrderDate, -2) = '20';
SELECT AVG(`Household Income`)  FROM `Store Locations`  WHERE `City Name` = 'Glendale';
SELECT MAX(`Discount Applied`)  FROM `Sales Orders`  WHERE YEAR(`OrderDate`) = 2020;
SELECT      MAX(COUNT(matchs.Div)) AS longest_consecutive_ties,     COUNT(*) AS number_of_ties FROM      divisions d JOIN      matchs m ON d.name = 'Ebbsfleet' WHERE      d.country = 'England' AND m.season = '2008' AND m.FTR = 'D' GROUP BY      m.Date ORDER BY      number_of_ties DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN d.country = 'England' THEN d.division END)       / CAST(COUNT(d.division) AS REAL)) * 100 AS percentage FROM      divisions d;
SELECT      (COUNT(CASE WHEN FTR = 'H' AND HomeTeam = 'Cittadella' THEN 1 END) * 100 / COUNT(DISTINCT Div)) AS percentage_won,     (COUNT(CASE WHEN FTR = 'A' AND HomeTeam = 'Cittadella' THEN 1 END) * 100 / COUNT(DISTINCT Div)) AS percentage_lost,     (COUNT(CASE WHEN FTR = 'D' AND HomeTeam = 'Cittadella' THEN 1 END) * 100 / COUNT(DISTINCT Div)) AS percentage_drawn FROM matchs m JOIN divisions d ON m.Div = d.division WHERE d.name = 'Cittadella';
SELECT AwayTeam, MAX(COUNT(CASE WHEN FTR = 'A' THEN 1 END) / COUNT(*)) as percentage  FROM matchs  WHERE HomeTeam = 'Caen' AND season = '2010' GROUP BY AwayTeam;
SELECT      (COUNT(CASE WHEN d.division = 'F1' AND m.Date = '2005/07/30' THEN 1 END)      / CAST(COUNT(CASE WHEN m.Date = '2005/07/30' THEN 1 END) AS REAL)) * 100 AS percentage FROM divisions d JOIN matchs m ON d.div = m.Div
SELECT      (COUNT(CASE WHEN FTR = 'D' THEN 1 END) * 100.0 / COUNT(*))     AS TiedGamePercentage FROM      matchs  WHERE      (HomeTeam = 'Sassuolo' OR AwayTeam = 'Sassuolo')
SELECT      (COUNT(CASE WHEN FTAG = 2 AND season = 2017 THEN 1 END)      / COUNT(CASE WHEN season = 2017 THEN 1 END)) * 100 AS percentage FROM      matchs
SELECT DISTINCT HomeTeam, AwayTeam  FROM matchs  JOIN divisions ON matchs.Div = divisions.code  WHERE divisions.name = 'EFL League One' AND divisions.division = 'E2';
SELECT COUNT(DISTINCT t1.Div)  FROM divisions AS t1  JOIN matchs AS t2 ON t1.division = t2.Div  WHERE t1.country = 'Greece' AND t2.FTAG >= 4;
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'Scottish Championship' AND m.season = 2019 AND m.FTAG = 2 AND m.FTHG = 2;
SELECT      HomeTeam,      season  FROM      european_football_1.matchs  JOIN      european_football_1.divisions ON matchs.Div = divisions.division  WHERE      divisions.country = 'Scotland' AND matchs.FTHG = 10;
SELECT      HomeTeam,     (COUNT(CASE WHEN FTR = 'H' THEN 1 END) * 100.0 / COUNT(*)) as win_percentage FROM      matchs JOIN      divisions ON matchs.Div = divisions.division WHERE      divisions.country = 'Spain' AND      divisions.name = 'LaLiga' AND      divisions.season = 2017 GROUP BY      HomeTeam ORDER BY      win_percentage DESC LIMIT 1;
SELECT      d.name AS Division,     COUNT(DISTINCT m.HomeTeam) AS Teams_Playing,     COUNT(DISTINCT CASE WHEN m.Div = 'ENG' THEN m.HomeTeam ELSE NULL END) / COUNT(DISTINCT m.HomeTeam) * 100 AS Percentage FROM      divisions d JOIN      matchs m ON d.division = m.Div WHERE      SUBSTRING(m.season, 1, 4) = '2012' GROUP BY      d.name;
SELECT      MAX(FTHG) AS max_score,     MAX(FTAG) AS max_score_against,     HomeTeam AS team1,     AwayTeam AS team2 FROM      matchs WHERE      season = 2021;
SELECT HomeTeam  FROM matchs  JOIN divisions ON matchs.Div = divisions.division  WHERE divisions.name = 'P1'  ORDER BY FTHG DESC  LIMIT 1;
SELECT      d.country,     (SUM(CASE WHEN m.FTR = 'H' THEN 1 ELSE 0 END) / COUNT(m.Div)) * 100 AS home_win_percentage,     (SUM(CASE WHEN m.FTR = 'A' THEN 1 ELSE 0 END) / COUNT(m.Div)) * 100 AS away_win_percentage FROM      divisions d JOIN      matchs m ON d.division = m.Div WHERE      m.season = 2010 GROUP BY      d.country;
SELECT divisions.division  FROM divisions  JOIN matchs ON divisions.division = matchs.Div  WHERE matchs.season = '2008' AND matchs.FTR = 'D'  GROUP BY divisions.division  ORDER BY COUNT(matchs.Div) DESC  LIMIT 1;
SELECT HomeTeam FROM matchs JOIN divisions ON matchs.Div = divisions.division WHERE divisions.name = 'EC' AND Date = '2008-01-20' AND FTR = 'H';
SELECT d.name FROM divisions d JOIN matchs m ON d.division = m.Div WHERE m.Date = '2009-09-13' AND (m.HomeTeam = 'Club Brugge' OR m.AwayTeam = 'Genk');
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'Scottish Premiership'  AND season BETWEEN 2006 AND 2008;
SELECT divisions.name, divisions.country  FROM divisions  JOIN matchs ON divisions.division = matchs.Div  WHERE matchs.HomeTeam = 'Hearts' AND matchs.AwayTeam = 'Hibernian';
SELECT AwayTeam FROM matchs m JOIN divisions d ON m.Div = d.division WHERE d.name = 'Bundesliga' AND FTHG = (SELECT MAX(FTAG) FROM matchs WHERE Div = 'Bundesliga');
SELECT DISTINCT AwayTeam  FROM matchs  JOIN divisions ON matchs.Div = divisions.division  WHERE divisions.country = 'Italy'  LIMIT 3;
SELECT d.name FROM divisions d JOIN (     SELECT Div     FROM matchs     WHERE season = '2019'     GROUP BY Div     HAVING COUNT(CASE WHEN FTR = 'D' THEN 1 END) = (         SELECT MIN(count_FTRD)         FROM (             SELECT COUNT(CASE WHEN FTR = 'D' THEN 1 END) AS count_FTRD             FROM matchs             WHERE season = '2019'             GROUP BY Div         ) subquery     ) ) m ON m.Div = d.division;
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'LaLiga' AND m.HomeTeam = 'Valencia' AND m.FTR = 'H';
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'Seria A' AND m.FTHG = m.FTAG AND m.FTR = 'D';
SELECT COUNT(*)  FROM divisions  WHERE country = 'England';
SELECT name  FROM divisions  WHERE country = 'Netherlands';
SELECT HomeTeam AS Winner FROM matchs WHERE Date = '2009-10-10' AND (HomeTeam = 'East Fife' AND AwayTeam = 'Dumbarton' OR HomeTeam = 'Dumbarton' AND AwayTeam = 'East Fife') AND FTR = 'A';
SELECT FTHG, FTAG  FROM matchs  WHERE Date = '2009-04-26'  AND HomeTeam = 'Bursaspor'  AND AwayTeam = 'Denizlispor';
SELECT MIN(Date) FROM (   SELECT Date   FROM matchs   WHERE FTHG + FTAG > 10 ) AS high_score_matches;
SELECT HomeTeam AS Winner FROM matchs JOIN divisions ON matchs.Div = divisions.division  WHERE divisions.name = 'Ligue 2' AND FTR = 'A' ORDER BY FTHG + FTAG DESC LIMIT 1;
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE m.Date = '2016-03-27'  AND d.name = 'LaLiga 2'  AND m.FTR = 'A';
SELECT COUNT(*)  FROM matchs  JOIN divisions ON matchs.Div = divisions.division  WHERE date = '2018-08-07' AND divisions.name = 'National League' AND FTR = 'D';
SELECT `country` FROM european_football_1.matchs m JOIN european_football_1.divisions d ON m.Div = d.division WHERE m.FTAG = (SELECT MAX(FTAG) FROM european_football_1.matchs)
SELECT d.name AS Division FROM divisions d JOIN matchs m ON d.division = m.Div WHERE m.season = '2011' AND m.FTHG = '1' AND m.FTAG = '8';
SELECT d.name AS Division FROM divisions d JOIN matchs m ON d.division = m.Div WHERE m.Date = '2020-02-22' AND m.FTHG + m.FTAG > 5 GROUP BY d.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT d.name  FROM divisions d  JOIN matchs m ON d.division = m.Div  WHERE m.FTHG = 0 AND m.FTAG = 0 GROUP BY d.name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE m.HomeTeam = 'Pro Vercelli'  AND m.AwayTeam = 'Pescara'  AND m.FTHG = '5'  AND m.FTAG = '2'  AND d.name = 'Scottish League One';
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'Greece' AND m.FTHG = '5' AND m.FTAG = '0';
SELECT `country` FROM european_football_1.divisions JOIN european_football_1.matchs ON (divisions.division = matchs.Div) WHERE `HomeTeam` = 'Bradford' OR `AwayTeam` = 'Bradford';
SELECT COUNT(*)  FROM divisions d  JOIN matchs m ON d.name = m.HomeTeam  WHERE d.name = 'Eredivisie' AND m.season = '2008';
SELECT      (COUNT(CASE WHEN FTR = 'H' THEN 1 END) * 1.0 / COUNT(*)) * 100 AS home_win_ratio FROM      matchs  JOIN      divisions ON matchs.Div = divisions.division  WHERE      divisions.name = 'Bundesliga' AND      seasons.season = '2021';
SELECT      (COUNT(CASE WHEN FTHG = '1' AND FTAG = '1' AND name = 'Liga NOS' THEN 1 END)      / COUNT(CASE WHEN FTHG = '1' AND FTAG = '1' THEN 1 END)) * 100 AS percentage FROM      matchs m JOIN      divisions d ON m.Div = d.division WHERE      d.name = 'Liga NOS' AND m.FTHG = '1' AND m.FTAG = '1'
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'Premier League' AND m.season = '2021';
SELECT HomeTeam  FROM matchs  JOIN divisions ON matchs.Div = divisions.division  WHERE divisions.name = 'Bundesliga' AND matchs.Date = '2020/10/2';
SELECT HomeTeam  FROM matchs  JOIN divisions ON matchs.Div = divisions.division  WHERE divisions.name = 'Bundesliga' AND matchs.Date = '2020/10/2' AND FTR = 'H';
SELECT HomeTeam FROM `matchs` JOIN `divisions` ON `divisions.Div` = `matchs.Div` WHERE `divisions.name` = 'Bundesliga' AND `FTR` = 'H' GROUP BY HomeTeam ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE m.AwayTeam = 'Werder Bremen' AND d.name = 'Bundesliga' AND m.FTR = 'A';
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'Bundesliga' AND m.FTR = 'A' AND m.season = '2021';
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'Bundesliga' AND m.FTR = 'D';
SELECT      (SELECT COUNT(*)       FROM matchs       WHERE season = 2021 AND name = 'Bundesliga' AND FTR = 'H') -      (SELECT COUNT(*)       FROM matchs       WHERE season = 2021 AND name = 'Premier League' AND FTR = 'H') AS Difference_Home_Victories;
SELECT HomeTeam FROM matchs JOIN divisions ON matchs.Div = divisions.division WHERE divisions.name = 'Bundesliga' AND matchs.FTR = 'H' AND season = '2021';
SELECT      HomeTeam FROM      matchs WHERE      Div = 'Bundesliga'     AND season = '2021'     AND HomeTeam IN ('Augsburg', 'Mainz')     AND FTR = 'H' GROUP BY      HomeTeam ORDER BY      COUNT(*) DESC LIMIT 1;
SELECT HomeTeam, MAX(M.FTHG) as MostGoals FROM matchs M JOIN divisions D ON M.Div = D.division WHERE D.name = 'Bundesliga' AND M.season = '2021'
SELECT SUM(FTHG)  FROM matchs  JOIN divisions ON matchs.Div = divisions.division  WHERE divisions.name = 'Bundesliga' AND season = 2021;
SELECT      (COUNT(CASE WHEN FTR = 'H' AND HomeTeam = 'Club Brugge' AND name = 'Premier League' AND season = 2021 THEN 1 END)      + COUNT(CASE WHEN FTR = 'A' AND AwayTeam = 'Club Brugge' AND name = 'Premier League' AND season = 2021 THEN 1 END)) / COUNT(*)  FROM      matchs m  JOIN      divisions d ON m.Div = d.division  WHERE      d.name = 'Premier League' AND m.season = 2021;
SELECT      (SUM(CASE WHEN teams.arena = 'Home' THEN 1 ELSE 0 END) / SUM(won)) * 100 AS percentage_of_home_winning FROM      teams JOIN      players_teams ON teams.tmID = players_teams.tmID WHERE      players_teams.PostW > 0;
SELECT tmID FROM teams WHERE (lost / games) > 0.75;
SELECT      t1.name,     SUM(t1.won) AS total_wins_in_2005 FROM      teams AS t1 JOIN      (         SELECT              tmID,             SUM(won) AS prev_year_wins         FROM              teams         WHERE              year = 2004         GROUP BY              tmID     ) AS t2 ON t1.tmID = t2.tmID WHERE      t1.year = 2005 AND     t1.won > t2.prev_year_wins GROUP BY      t1.tmID, t1.name;
SELECT      t.name,     t.o_fgm FROM      teams t WHERE      (t.homeWon - t.homeLost) / t.games > 0.8;
SELECT      CAST(SUM(CASE WHEN T.teams.playoff = '1' AND T.teams.rank = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage FROM      teams T WHERE      T.playoff IS NOT NULL;
SELECT coachID, won, lost  FROM coaches  WHERE tmID = 'BOS' AND year = 1950;
SELECT      c.coachID,     GROUP_CONCAT(DISTINCT t.tmID) AS served_teams FROM      coaches c JOIN      teams t ON c.tmID = t.tmID AND c.year BETWEEN 1970 AND 1980 GROUP BY      c.coachID ORDER BY      COUNT(c.coachID) DESC LIMIT 1;
SELECT c.coachID, t.name, c.won  FROM coaches c  JOIN teams t ON c.tmID = t.tmID  WHERE c.year = 2000 AND c.won > 50 AND c.post_wins IS NULL;
SELECT c.coachID, t.name, c.year  FROM coaches c  JOIN teams t ON c.tmID = t.tmID  WHERE c.year BETWEEN 2000 AND 2010  AND c.lost > c.won;
SELECT      teams.name,      coaches.year,      teams.o_fgm FROM      coaches JOIN      teams ON coaches.tmID = teams.tmID WHERE      coaches.coachID = 'adelmri01' AND coaches.year BETWEEN 1990 AND 1995;
SELECT      c.coachID,     t.year FROM     teams t JOIN     players_teams pt ON t.tmID = pt.tmID AND t.year = pt.year JOIN     coaches c ON c.tmID = t.tmID AND c.year = t.year WHERE     (pt.won / (pt.won + pt.lost)) > 0.9;
SELECT      (COUNT(CASE WHEN p.birthState = 'NY' THEN p.playerID END) / COUNT(DISTINCT p.playerID)) * 100 AS percentage FROM      players p JOIN      player_allstar pa ON p.playerID = pa.playerID WHERE      pa.award = 'All-Defensive First Team' AND      p.year BETWEEN 1980 AND 2000;
SELECT t3.divID  FROM awards_coaches AS t1  JOIN coaches AS t2 ON t1.coachID = t2.coachID  JOIN teams AS t3 ON t2.tmID = t3.tmID  WHERE t1.year = 1977 AND t1.lgID = 'NBA'  AND t3.year = 1976;
SELECT      c.coachID  FROM      coaches c JOIN      teams t ON c.tmID = t.tmID  WHERE      t.name = 'Chicago Bulls' AND      c.year = 1981 AND      c.lgID = 'NBA' AND      c.year BETWEEN 1970 AND 1979 AND      EXISTS (         SELECT 1 FROM awards_coaches ac WHERE ac.year = c.year AND ac.lgID = c.lgID AND ac.coachID = c.coachID AND ac.award = 'NBA Coach of the Year'     );
SELECT `nameNick`  FROM players  JOIN players_teams ON players.playerID = players_teams.playerID  JOIN teams ON players_teams.tmID = teams.tmID  WHERE teams.confID = 'West'  AND players_teams.year = 2006  AND players.blocks = 2;
SELECT year FROM series_post  WHERE tmIDLoser = 'HSM' AND round = 'DSF' ORDER BY W DESC LIMIT 1;
SELECT p.birthDate  FROM players p  JOIN player_allstar pa ON p.playerID = pa.playerID  WHERE pa.season_id = 1985  AND pa.assists = (     SELECT MAX(assists)      FROM player_allstar      WHERE season_id = 1985 );
SELECT first_name, last_name  FROM players  JOIN player_allstar ON players.playerID = player_allstar.playerID  WHERE birthCity = 'Winter Haven'  AND minutes = 12  AND season_id BETWEEN 1980 AND 1989;
SELECT COUNT(*)  FROM player_allstar  JOIN players ON player_allstar.playerID = players.playerID  WHERE player_allstar.conference = 'East' AND players.college = 'Illinois' AND players_allstar.minutes < 5;
SELECT      DISTINCT p.playerID,     SUM(CASE WHEN Divide(dRebounds, rebounds) * 100 > 75 THEN 1 ELSE 0 END) as over_75_percent_defensive_rebounds FROM      players_teams pt  JOIN      players p ON pt.playerID = p.playerID WHERE      pt.year BETWEEN 1990 AND 2007 GROUP BY      p.playerID;
SELECT year  FROM coaches  WHERE coachID = 'costela01'  AND won =      (SELECT MAX(won / (won + lost))      FROM coaches);
SELECT SUM(T2.minutes)  FROM players AS T1  JOIN player_allstar AS T2  ON T1.playerID = T2.playerID  WHERE T1.birthCity = 'Brooklyn' AND T1.nameNick LIKE '%Superman%'
SELECT      t.tmID  FROM      players p  JOIN      awards_coaches ac ON p.coachID = ac.coachID  JOIN      teams t ON ac.year = 1994 AND ac.lgID = t.lgID  WHERE      ac.award = 'NBA Coach of the Year'  GROUP BY      t.tmID  ORDER BY      SUM(t.homeLost) DESC  LIMIT 1;
SELECT      s.tmIDWinner  FROM      series_post AS s WHERE      s.round = 'CSF' AND      s.tmIDLoser = 'LAL' AND      s.tmIDWinner = s.tmID AND      s.lgIDWinner = 'NBA' AND      s.won > 60 AND      s.year = 1996;
SELECT DISTINCT t2.lgID  FROM players AS t1 JOIN (   SELECT MAX(weight) as max_weight    FROM players  ) AS t3 ON t3.max_weight = 0.6 * t1.weight  WHERE t1.height = 80;
SELECT DISTINCT c.firstName, c.lastName  FROM coaches c  JOIN (     SELECT coachID, COUNT(DISTINCT tmID) as team_count      FROM players_teams      WHERE lgID = 'NBA'      GROUP BY coachID      HAVING team_count > 2 ) as t ON c.coachID = t.coachID;
SELECT      c.coachID  FROM      coaches c WHERE      c.post_wins = (SELECT MAX(post_wins) FROM coaches);
SELECT      c.coachID,     c.year,     COUNT(p.tmID) as num_teams_served,     MIN(s.post_losses) as min_post_losses FROM      coaches c JOIN      players_teams p ON c.coachID = p.coachID JOIN      series_post s ON p.tmID = s.tmIDWinner AND c.year = s.year WHERE      c.lgID = 'NBA' AND     COUNT(p.tmID) >= 2 GROUP BY      c.coachID, c.year HAVING      min_post_losses = (         SELECT              MIN(post_losses)         FROM              series_post         WHERE              tmIDWinner = p.tmID     );
SELECT COUNT(*)  FROM players  JOIN players_teams ON players.playerID = players_teams.playerID  WHERE lgID = 'ABA' AND (pos = 'C' OR pos = 'F-C');
SELECT firstName  FROM players  JOIN awards_players ON players.playerID = awards_players.playerID  WHERE lgID = 'NBA' AND awards_players.pos = 'F';
SELECT COUNT(*)  FROM players  WHERE hsCity = 'Chicago' AND divID = 'WE';
SELECT college FROM players JOIN player_allstar ON players.playerID = player_allstar.playerID WHERE player_allstar.conference = 'East' AND players.divID = 'EA';
SELECT COUNT(*)  FROM players  WHERE lgID = 'NBL' AND birthCity = 'Spencer';
SELECT p.birthDate  FROM players p  JOIN awards_players ap ON p.playerID = ap.playerID  WHERE ap.award = 'Most Valuable Player'  GROUP BY p.playerID  ORDER BY COUNT(ap.award) DESC  LIMIT 1;
SELECT COUNT(*)  FROM players  WHERE birthCity = 'Whitestone' AND award = 'Most Valuable Player';
SELECT MAX(players.height)  FROM awards_players  JOIN players ON awards_players.playerID = players.playerID  JOIN awards_coaches ON awards_players.playerID = awards_coaches.coachID  WHERE awards_coaches.award = 'Rookie of the Year';
SELECT AVG(T1.weight)  FROM players AS T1  JOIN awards_players AS T2 ON T1.playerID = T2.playerID  WHERE T2.award = 'Rookie of the Year';
SELECT AVG(players.height)  FROM players  JOIN awards_players ON players.playerID = awards_players.playerID  JOIN series_post ON players.playerID = series_post.tmIDWinner OR players.playerID = series_post.tmIDLoser  WHERE players.highSchool LIKE '%New York%' AND awards_players.award = 'Most Valuable Player';
SELECT      t1.name,     SUM(t1.o_fgm) as total_score FROM      teams t1 WHERE      t1.year = 2000 GROUP BY      t1.name ORDER BY      total_score DESC LIMIT 10;
SELECT      t1.name  FROM      teams AS t1  WHERE      (t1.won / CAST((t1.won + t1.lost) AS REAL)) < 0.5;
SELECT      c.coachID  FROM      coaches c JOIN      teams t ON c.tmID = t.tmID WHERE      (c.won / (c.won + c.lost)) > 0.8;
SELECT coachID FROM coaches WHERE lgID = 'NBA' AND (MAX(year) - MIN(year)) > 10;
SELECT COUNT(DISTINCT t.tmID) FROM teams t JOIN players_teams pt ON t.tmID = pt.tmID WHERE t.won >= 3800 AND EXISTS (     SELECT 1 FROM awards_players ap      JOIN players p ON ap.playerID = p.playerID     WHERE ap.award = 'Most Valuable Player' );
SELECT p.firstName, p.lastName  FROM players p  JOIN players_teams pt ON p.playerID = pt.playerID  WHERE pt.tmID = 'AFS'  ORDER BY p.height DESC  LIMIT 1;
SELECT p.lastName FROM players p JOIN players_teams pt ON p.playerID = pt.playerID WHERE pt.tmID = 'BLB';
SELECT COUNT(*)  FROM awards_coaches  WHERE year BETWEEN 1962 AND 1975;
SELECT coachID FROM awards_coaches WHERE year BETWEEN 1970 AND 1990 GROUP BY coachID HAVING COUNT(coachID) = 2;
SELECT COUNT(DISTINCT coachID)  FROM awards_coaches WHERE year BETWEEN 1960 AND 2011 AND award LIKE 'NBA%' AND award LIKE 'ABA%';
SELECT      AVG(AS.points) AS avg_points FROM      player_allstar AS AS  JOIN      players AS P ON AS.playerID = P.playerID WHERE      AS.season_id = 1975 AND P.birthCountry = 'USA';
SELECT last_name, first_name  FROM players  JOIN player_allstar ON players.playerID = player_allstar.playerID  WHERE players.height > 75;
SELECT MIN(players.weight)  FROM players  JOIN player_allstar ON players.playerID = player_allstar.playerID  WHERE players.college = 'UCLA';
SELECT MAX(players.weight)  FROM players  JOIN player_allstar ON players.playerID = player_allstar.playerID  WHERE players.birthCountry = 'USA';
SELECT SUM(points)  FROM player_allstar  WHERE season_id BETWEEN 1960 AND 1970  AND deathDate = '0000-00-00';
SELECT last_name, first_name  FROM players  JOIN players_teams ON players.playerID = players_teams.playerID  WHERE birthDate >= '1950-01-01' AND        (oRebounds / rebounds) > 0.3;
SELECT COUNT(DISTINCT playerID)  FROM awards_players  WHERE year BETWEEN 1969 AND 2010  AND award = 'Rookie of the Year';
SELECT DISTINCT t.name  FROM teams t  JOIN players_teams pt ON t.tmID = pt.tmID  JOIN player_allstar pa ON pt.playerID = pa.playerID  GROUP BY t.tmID  HAVING COUNT(pa.playerID) >= 3;
SELECT MAX(players.points)  FROM players  JOIN players_teams ON players.playerID = players_teams.playerID  JOIN teams ON players_teams.tmID = teams.tmID  WHERE players_teams.year BETWEEN 1950 AND 1970  AND teams.rank = 1;
SELECT p.last_name, p.first_name  FROM players p  JOIN players_teams pt ON p.playerID = pt.playerID  JOIN teams t ON t.tmID = pt.tmID AND t.year IN (1937, 1938, 1939, 1940)  WHERE t.rank = 1 AND t.tmID IN (SELECT tmID FROM teams WHERE tmID IN (SELECT tmID FROM teams WHERE rank = 1 GROUP BY tmID HAVING COUNT(year) >= 3) AND year BETWEEN 1937 AND 1940) AND p.playerID IN (SELECT playerID FROM player_allstar);
SELECT T2.name  FROM players_teams AS T1  JOIN teams AS T2 ON T1.tmID = T2.tmID  WHERE T2.rank = 3 AND T2.year BETWEEN 1937 AND 1940  GROUP BY T1.tmID  ORDER BY MAX(T1.points) DESC  LIMIT 1;
SELECT COUNT(DISTINCT tmID)  FROM players_teams  WHERE year = 1937 AND Sum(points) >= 500;
SELECT COUNT(DISTINCT p.playerID) FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON t.tmID = pt.tmID AND t.year = 1990 WHERE t.won / t.games > 0.75;
SELECT firstName, lastName, height  FROM players  WHERE race = 'B'  ORDER BY height ASC  LIMIT 3;
SELECT COUNT(*)  FROM draft  WHERE firstName = 'Joe' AND draftYear = 1970;
SELECT SUM(fg_made)  FROM player_allstar  WHERE first_name = 'George'  AND last_name = 'Mikan'  AND season_id BETWEEN 1951 AND 1953;
SELECT      playerID,     (weight / (POW(height / 100, 2))) * 703 AS bmi FROM      players
SELECT      t1.name  FROM      teams AS t1  WHERE      (t1.homeLost / (t1.homeWon + t1.homeLost)) =      (SELECT          MAX(homeLost / (homeWon + homeLost))       FROM          teams);
SELECT      (d.year - p.birthDate) AS age_when_drafted FROM      players p JOIN      draft d ON p.playerID = d.playerID WHERE      firstName = 'Alexis' AND      lastName = 'Ajinca';
SELECT firstName, lastName  FROM players  JOIN players_teams ON players.playerID = players_teams.playerID  JOIN teams ON teams.tmID = players_teams.tmID  WHERE teams.name = 'Denver Nuggets' AND players.height IS NOT NULL AND year >= 1980  ORDER BY players.height DESC  LIMIT 1;
SELECT      p.playerID  FROM      players p  WHERE      p.deathDate <> 'null'  GROUP BY      p.playerID  ORDER BY      COUNT(p.award) DESC  LIMIT 1;
SELECT T1.firstName, T1.lastName  FROM players AS T1  JOIN players_teams AS T2 ON T1.playerID = T2.playerID  JOIN teams AS T3 ON T3.tmID = T2.tmID  WHERE T1.college = 'UCLA'  GROUP BY T1.playerID, T1.firstName, T1.lastName  ORDER BY COUNT(T1.playerID) DESC  LIMIT 1;
SELECT      AVG((weight / (height * height) * 703)) as avg_bmi FROM      players  JOIN      player_allstar ON players.playerID = player_allstar.playerID;
SELECT      t1.name  FROM      teams AS t1  JOIN      (SELECT          tmID,          MAX((won WHERE year = 1973)/(SUM(won + lost) OVER (PARTITION BY tmID)) - (won WHERE year = 1972)/(SUM(won + lost) OVER (PARTITION BY tmID))) AS rate_growth       FROM          teams       WHERE          lgID = 'ABA') AS t2  ON      t1.tmID = t2.tmID  ORDER BY      t2.rate_growth DESC  LIMIT 1;
SELECT firstName  FROM players  JOIN players_teams ON players.playerID = players_teams.playerID  WHERE lgID = 'NBL'  GROUP BY firstName  ORDER BY SUM(personal_fouls) DESC  LIMIT 1;
SELECT AVG(players.height)  FROM players  JOIN player_allstar ON players.playerID = player_allstar.playerID  WHERE player_allstar.conference = 'East';
SELECT      coachID FROM      awards_coaches WHERE      award = 'ABA Coach of the Year' ORDER BY      won DESC LIMIT 1;
SELECT T1.name  FROM teams AS T1  JOIN awards_coaches AS T2 ON T1.tmID = T2.tmID  WHERE T2.year = 1992 AND T2.award = 'NBA Coach of the Year';
SELECT firstName, lastName  FROM players  JOIN (     SELECT playerID, MAX(fgMade / fgAttempted) as rate      FROM (         SELECT playerID, fgMade, SUM(fgAttempted) over (PARTITION BY playerID) as total_fg_attempted           FROM player_allstar          WHERE year = 1973     ) subquery1     GROUP BY playerID ) subquery2 ON players.playerID = subquery2.playerID;
SELECT      teams.name FROM      players  JOIN      players_teams ON players.playerID = players_teams.playerID  JOIN      teams ON teams.tmID = players_teams.tmID WHERE      players.firstName = 'Mike' AND      players.lastName = 'Lynn';
SELECT COUNT(*)  FROM awards_players  WHERE award = 'Most Improved Player'  AND year BETWEEN 1985 AND 1990  AND birthCountry = 'USA';
SELECT first_name, last_name  FROM players  JOIN player_allstar ON players.playerID = player_allstar.playerID  WHERE college = 'California';
SELECT COUNT(DISTINCT c.coachID) FROM awards_coaches ac JOIN coaches c ON ac.coachID = c.coachID WHERE ac.year BETWEEN 1950 AND 1970 GROUP BY ac.coachID HAVING COUNT(ac.award) > 3;
SELECT COUNT(DISTINCT playerID)  FROM awards_players  WHERE award = 'Most Valuable Player' AND year BETWEEN 1969 AND 1975;
SELECT DISTINCT teams.name  FROM teams  JOIN players ON teams.tmID = players.tmID  WHERE players.birthState IS NOT NULL  GROUP BY teams.name  HAVING COUNT(DISTINCT players.playerID) >= 5;
SELECT COUNT(DISTINCT t.tmID)  FROM teams t JOIN players_teams pt ON t.tmID = pt.tmID JOIN player_allstar pa ON pa.playerID = pt.playerID GROUP BY t.tmID HAVING COUNT(DISTINCT pa.playerID) > 3 AND t.lgID = 'NBA';
SELECT birthState FROM player_allstar GROUP BY birthState ORDER BY COUNT(playerID) DESC LIMIT 1;
SELECT COUNT(DISTINCT players.playerID) FROM players JOIN players_teams ON players.playerID = players_teams.playerID WHERE players_teams.rank = 6 AND players_teams.year = 1937;
SELECT COUNT(DISTINCT p.playerID) FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON t.tmID = pt.tmID WHERE pt.year = 1950 AND        (t.lost / (t.won + t.lost) < 0.2);
SELECT CONCAT(firstName, ' ', middleName, ' ', lastName) AS fullName FROM players WHERE birthCountry != 'USA';
SELECT DISTINCT c.coachID  FROM coaches c  JOIN (     SELECT tmID     FROM players_teams      GROUP BY tmID     HAVING COUNT(DISTINCT year) > 2 ) AS t ON c.tmID = t.tmID
SELECT coachID FROM coaches WHERE year = 1988 AND (won - lost) = (     SELECT MAX(won - lost)     FROM coaches     WHERE year = 1988 );
SELECT teams.name FROM coaches JOIN teams ON coaches.tmID = teams.tmID WHERE coaches.award = 'NBA Coach of the Year' AND coaches.year = 2010;
SELECT firstName, lastName, height, weight  FROM players  WHERE ftAttempted > 0 AND ftAttempted = ftMade;
SELECT p.firstName, p.lastName, t.name  FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON pt.tmID = t.tmID JOIN draft d ON p.playerID = d.playerID WHERE d.draftFrom = 'Seattle' AND d.draftYear BETWEEN 1965 AND 1970;
SELECT      CONCAT(firstName, ' ', middleName, ' ', lastName) AS fullName,     (2003 - EXTRACT(YEAR FROM birthDate)) AS age FROM      awards_players JOIN      players ON awards_players.playerID = players.playerID WHERE      award = 'Finals MVP' AND year = 2003;
SELECT teams.name, awards_post.year  FROM teams  JOIN players_teams ON teams.tmID = players_teams.tmID  JOIN awards_post ON players_teams.id = awards_post.id  WHERE year >= 1950 AND year <= 1960 AND round = 'F';
SELECT      teams.name AS Team,     coaches.coachID AS Coach FROM      teams JOIN      series_post ON teams.tmID = series_post.tmIDWinner AND teams.lgID = series_post.lgIDWinner WHERE      series_post.round = 'QF' AND     series_post.year = 1946;
SELECT CONCAT(firstName, ' ', middleName, ' ', lastName) AS fullName FROM players JOIN players_teams ON players.playerID = players_teams.playerID JOIN series_post ON players_teams.tmID = series_post.tmIDWinner AND players_teams.year = series_post.year WHERE series_post.round = 'F' AND players_teams.year = 1970;
SELECT T3.college  FROM awards_players AS T1  JOIN players AS T2 ON T1.playerID = T2.playerID  JOIN highSchool AS T3 ON T2.nameHighSchool = T3.name  WHERE T1.year = 1970  GROUP BY T1.award, T2.firstseason  ORDER BY COUNT(T1.award) DESC  LIMIT 1;
SELECT p.firstName, p.lastName  FROM players p  JOIN awards_players ap ON p.playerID = ap.playerID  WHERE ap.award = 'Rookie of the Year'  ORDER BY p.birthDate DESC  LIMIT 1;
SELECT CONCAT(firstName, ' ', middleName, ' ', lastName) AS fullName FROM draft WHERE draftYear = 1973 AND draftRound = 1 AND birthCountry <> 'USA';
SELECT      (SUM(o_rebounds) / SUM(rebounds)) * 100 AS percentage_of_offense_rebounds FROM      players_teams WHERE      year = 2000;
SELECT      c.year,     t.name AS team,     c.coachID AS coach FROM      coaches c JOIN      teams t ON c.tmID = t.tmID WHERE      (c.won / (c.won + c.lost)) > 0.75;
SELECT DISTINCT c.coachID  FROM coaches c  JOIN teams t ON c.tmID = t.tmID  WHERE t.name = 'Oklahoma City Thunder';
SELECT COUNT(*)  FROM player_allstar  WHERE season_id = 1990 AND o_rebounds <= (d_rebounds * 0.5);
SELECT COUNT(*)  FROM player_allstar  WHERE steals <= 10 AND season_id BETWEEN 2000 AND 2005;
SELECT p.firstName, p.lastName  FROM draft d  JOIN players p ON d.playerID = p.playerID  WHERE d.draftRound = 2 AND d.tmID LIKE 'Portland' AND  p.playerID IN (     SELECT playerID      FROM awards_players ap      WHERE ap.award = 'Rookie of the Year' AND ap.year = 1971 )
SELECT COUNT(*)  FROM player_allstar  JOIN players ON player_allstar.playerID = players.playerID  WHERE player_allstar.season_id = 1973 AND players.race = 'B';
SELECT      t.tmIDWinner AS 'WinningTeamID' FROM      teams t JOIN      series_post sp ON t.tmID = sp.tmIDWinner AND sp.year = 1947 AND sp.round = 'QF' AND t.d_pts >= 3513;
SELECT      SUM(lost) / SUM(games) * 100 AS percentage_lost  FROM      teams  WHERE      name = 'Houston Mavericks';
SELECT p.playerID AS ID  FROM awards_players ap  JOIN players p ON ap.playerID = p.playerID  WHERE ap.award = 'Most Valuable Player' AND ap.year > 1990;
SELECT COUNT(*)  FROM players_teams  WHERE year BETWEEN 1975 AND 1980  AND playerID = 'abdulka01'  AND tmID = 'LAL';
SELECT      (COUNT(CASE WHEN year = 1969 AND award = 'NBA Coach of the Year' THEN coachID END)      / COUNT(coachID)) * 100 AS percentage FROM      awards_coaches;
SELECT      (COUNT(CASE WHEN year = 1947 AND tmIDWinner = 'CHS' THEN 1 END) / COUNT(CASE WHEN year = 1947 THEN 1 END)) -     (COUNT(CASE WHEN year = 1946 AND tmIDWinner = 'CHS' THEN 1 END) / COUNT(CASE WHEN year = 1946 THEN 1 END)) * 100 AS winning_rate_difference FROM      series_post;
SELECT COUNT(*)  FROM players  JOIN awards_players ON players.playerID = awards_players.playerID  WHERE year = 2010 AND college = 'Chicago';
SELECT      (COUNT(CASE WHEN p.college = 'Auburn' AND ap.award = 'All-Defensive Second Team' THEN p.playerID END)       OVER ()      / COUNT(p.playerID) OVER ()) * 100 AS percentage FROM      players p JOIN      awards_players ap ON p.playerID = ap.playerID WHERE      p.college = 'Auburn';
SELECT firstName, middleName, lastName  FROM players  JOIN series_post ON players.playerID = series_post.tmIDWinner  WHERE year = 1997  ORDER BY steals DESC  LIMIT 5;
SELECT      t1.college AS 'University Name' FROM     players AS t1 JOIN     awards_players AS t2 ON t1.playerID = t2.playerID JOIN     draft AS t3 ON t1.playerID = t3.playerID WHERE     t2.award = 'Finals MVP' AND     t2.year = 1990 AND     t3.lgID = 'NBA' ;
SELECT playerID FROM player_allstar JOIN players ON player_allstar.playerID = players.playerID WHERE season_id = 1996 AND (ft_made >= 0 AND ft_attempted > 0 AND (ft_made / ft_attempted) > 0.7) AND lg_id = 'NBA';
SELECT COUNT(*)  FROM player_allstar  WHERE lg_id = 'NBA' AND year BETWEEN 1980 AND 1983 AND (three_made / three_attempted) > 0.6;
SELECT DISTINCT coachID  FROM coaches  WHERE lgID = 'NBA' AND tmID = 'STL';
SELECT COUNT(*)  FROM coaches  WHERE tmID = 'CHI' AND award = 'Coach of the Year' AND lgID = 'NBA';
SELECT firstName, lastName  FROM players  JOIN draft ON players.playerID = draft.playerID  JOIN player_allstar ON players.playerID = player_allstar.playerID  WHERE lgID = 'NBA' AND year BETWEEN 1990 AND 2000  ORDER BY points DESC  LIMIT 1;
SELECT first_name, middle_name, last_name  FROM player_allstar  JOIN players ON player_allstar.playerID = players.playerID  WHERE college = 'Wake Forest college'  GROUP BY playerID  HAVING MAX(o_rebounds - d_rebounds) IS NOT NULL;
SELECT      p.firstName, p.middleName, p.lastName,     t.tmID FROM      players p JOIN      players_teams pt ON p.playerID = pt.playerID JOIN      teams t ON pt.tmID = t.tmID WHERE      p.birthCity = 'Atlanta' GROUP BY      p.playerID,      p.firstName, p.middleName, p.lastName,      t.tmID HAVING      SUM(pt.blocks) = (         SELECT              MAX(sum_blocks)         FROM (             SELECT                  playerID,                  SUM(blocks) as sum_blocks             FROM                  players p             JOIN                  players_teams pt ON p.playerID = pt.playerID             WHERE                  p.birthCity = 'Atlanta'             GROUP BY                  playerID         ) subquery     ) ORDER BY      SUM(pt.blocks) DESC LIMIT 1;
SELECT DISTINCT t.name  FROM teams t  JOIN (     SELECT tmID, COUNT(*) as league_lost_times      FROM series_post      WHERE LAG = 'NBA' AND L >= 2      GROUP BY tmID ) sl ON t.tmID = sl.tmID JOIN (     SELECT tmID, COUNT(*) as rank_5_plus_times      FROM teams t2      JOIN (         SELECT year, tmID, rank          FROM (             SELECT                  year,                  tmID,                  RANK() OVER (PARTITION BY year, tmID ORDER BY won DESC) as rank,                  COUNT(*) OVER (PARTITION BY year, tmID) as count_tm_in_year              FROM teams              WHERE year BETWEEN 1980 AND 2000          ) t_ranked          WHERE t_ranked.rank <= 5 AND t_ranked.count_tm_in_year >= 1      ) ranked ON t2.tmID = ranked.tmID AND t2.year = ranked.year      GROUP BY tmID  ) rt ON t.tmID = rt.tmID   WHERE sl.league_lost_times >= 2 AND rt.rank_5_plus_times >= 5;
SELECT ptm.playerID, p.firstName, p.lastName, MAX(div(points, minutes)) as highest_point_per_minute FROM players_teams t JOIN players p ON t.playerID = p.playerID JOIN series_post sp ON t.tmID = sp.tmIDWinner AND p.year BETWEEN 1991 AND 2000 AND sp.lgID = 'NBA' JOIN teams tm ON t.tmID = tm.tmID WHERE sp.lgIDWinner = 'NBA' AND tm.lgID = 'NBA' GROUP BY ptm.playerID, p.firstName, p.lastName ORDER BY highest_point_per_minute DESC LIMIT 1;
SELECT      (AVG(1970 - YEAR(players.birthDate))          WHERE players.lgID = 'ABA')      -      (AVG(1970 - YEAR(players.birthDate))          WHERE players.lgID = 'NBA') AS age_difference FROM      players  JOIN      draft ON players.playerID = draft.playerID;
SELECT playerID, GP  FROM players_teams  WHERE year = 2011 AND lgID = 'NBA'  ORDER BY GP DESC  LIMIT 1;
SELECT COUNT(*)  FROM draft  JOIN players ON draft.playerID = players.playerID  JOIN player_allstar ON players.playerID = player_allstar.playerID  WHERE draft.draftRound = 1 AND draft.year = 1996 AND lgID = 'NBA' AND player_allstar.games_played > 0;
SELECT T1.tmID  FROM players_teams AS T1  JOIN awards_coaches AS T2  ON T1.playerID = T2.coachID AND T2.year = 1997 AND T2.award LIKE '%MVP' AND T2.lgID = 'NBA';
SELECT SUM(won)  FROM teams  JOIN players_teams ON teams.tmID = players_teams.tmID  JOIN players ON players/playerID = players_teams.playerID  WHERE year = 2001 AND lgID = 'NBA' AND (firstName, lastName) IN (     SELECT firstName, lastName      FROM awards_players      WHERE year = 2001 AND award = 'scoring champion' );
SELECT AVG(players.teams.turnovers) AS turnovers_per_game FROM players JOIN players_teams ON players.playerID = players_teams.playerID JOIN teams ON players_teams.tmID = teams.tmID WHERE players_teams.year = 2003 AND teams.lgID = 'NBA' ORDER BY players_teams.assists DESC LIMIT 1;
SELECT COUNT(*)  FROM series_post  JOIN players_teams ON series_post.tmIDWinner = players_teams.tmID  JOIN players ON players_teams.playerID = players.playerID  WHERE players.firstName = 'Ray' AND players.lastName = 'Allen' AND series_post.lgIDWinner = 'NBA';
SELECT      (SUM(CASE WHEN draftYear = 2004 THEN won ELSE 0 END) / CAST(SUM(CASE WHEN draftYear = 2004 THEN won ELSE 0 END) AS REAL) - SUM(CASE WHEN draftYear = 2003 THEN won ELSE 0 END) / CAST(SUM(CASE WHEN draftYear = 2003 THEN won ELSE 0 END) AS REAL) * 100) AS WinRateIncrease FROM      draft WHERE      draftRound = 1 AND draftYear = 2003;
SELECT COUNT(*)  FROM coaches  WHERE year BETWEEN 1971 AND 1975  AND award = 'NBA coach of the year'  AND tmID = 'POR';
SELECT      (COUNT(CASE WHEN steals > 0 THEN playerID END) * 100.0 / COUNT(playerID)) as percentage_points_scored FROM      players_teams  WHERE      lgID = 'NBA' AND tmID = 'LAL';
SELECT first_name, middle_name, last_name  FROM players  JOIN players_teams ON players.playerID = players_teams.playerID  WHERE year = 1996 AND playoff IS NULL AND steals = (SELECT MAX(steals) FROM players JOIN players_teams ON players.playerID = players_teams.playerID WHERE year = 1996);
SELECT playerID FROM players_teams WHERE year = 1988 AND PostGP = 0 AND turnovers = (SELECT MAX(turnovers) FROM players_teams WHERE year = 1988);
SELECT      t1.name  FROM      teams AS t1  JOIN      awards_coaches AS t2 ON t1.tmID = t2.tmID AND t1.year = t2.year AND t1.lgID = 'NBA'  WHERE      t2.coachID IS NULL  AND      t1.PostGP = 0  AND      t1.year = 2000  GROUP BY      t1.tmID, t1.name  ORDER BY      (won / (won + lost)) DESC  LIMIT      1;
SELECT      t.name FROM      teams t JOIN      players_teams pt ON t.tmID = pt.tmID WHERE      t.PostGP = 0 AND pt.year = 1998 GROUP BY      t.name ORDER BY      SUM(pt.o_pts) DESC LIMIT 1;
SELECT teams.name FROM teams WHERE year = 2001 AND PostGP = 0 AND won = MAX(won);
SELECT      t.name FROM      teams t JOIN      players_teams pt ON t.tmID = pt.tmID WHERE      t.playoff = 'N' AND      pt.year = 1997 GROUP BY      t.tmID, t.name ORDER BY      SUM(CASE WHEN pt.PostGP = 0 THEN pt.rebounds ELSE NULL END) DESC LIMIT 1;
SELECT DISTINCT p.tmID  FROM draft d  JOIN players p ON d.playerID = p.playerID  WHERE d.draftRound = 1 AND d.draftSelection = 6 AND d.year = 1976;
SELECT      teams.homeWon  FROM      draft  JOIN      teams  ON      draft.tmID = teams.tmID  WHERE      draft.year = 1998 AND      draft.draftRound = 1 AND      draft.draftSelection = 12;
SELECT p.weight, p.height  FROM players p  JOIN player_allstar pa ON p.playerID = pa.playerID  WHERE pa.rebounds = (SELECT MAX(rebounds) FROM player_allstar)  GROUP BY p.playerID  ORDER BY p.playerID DESC  LIMIT 1;
SELECT T3.hsCity, T3.hsState  FROM player_allstar AS T1  JOIN players AS T2 ON T1.playerID = T2.playerID  JOIN teams AS T3 ON T2.arena = T3.arena  WHERE T1.rebounds = (SELECT MAX(rebounds) FROM player_allstar)
SELECT T3.tmID FROM `player_allstar` AS T1 JOIN `players` AS T2 ON T1.playerID = T2.playerID JOIN `players_teams` AS T3 ON T2.playerID = T3.playerID AND T1.season_id = T3.year WHERE T1.season_id = 1997 AND T3.rebounds = (     SELECT MAX(rebounds)     FROM `player_allstar`     WHERE season_id = 1997 )
SELECT SUM(points)  FROM players  JOIN players_teams ON players.playerID = players_teams.playerID  WHERE pos LIKE '%C%' OR pos LIKE '%F%' OR pos LIKE '%G%'  AND players.firstseason <= (SELECT MAX(season_id) FROM players);
SELECT t.tmID  FROM players AS p  JOIN players_teams AS pt ON p.playerID = pt.playerID  JOIN teams AS t ON pt.tmID = t.tmID  WHERE p.pos LIKE '%F' AND p.lgID = 'NBA'  ORDER BY p.year DESC  LIMIT 1;
SELECT firstName, lastName  FROM players  JOIN player_allstar ON players.playerID = player_allstar.playerID  WHERE college = 'Central Missouri State'  AND games_played = (SELECT MAX(games_played) FROM player_allstar);
SELECT teams.name  FROM players_teams  JOIN players ON players_teams.playerID = players.playerID  JOIN teams ON teams.tmID = players_teams.tmID  WHERE year = 2000  AND GP = 82  ORDER BY minutes ASC  LIMIT 1;
SELECT first_name, last_name  FROM players  JOIN players_teams ON players.playerID = players_teams.playerID  WHERE year = 1995 AND GP = 82 AND turnovers = (SELECT MAX(turnovers) FROM players_teams WHERE year = 1995 AND GP = 82)
SELECT      t.tmID  FROM      players_teams t JOIN      players p ON t.playerID = p.playerID WHERE      t.year = 2011 AND      t.GP = t.GS AND      p.playerID IN (         SELECT              playerID          FROM              players_teams          WHERE              year = 2011 AND              steals = (                 SELECT MAX(steals)                  FROM                      players_teams                  WHERE                      year = 2011             )     );
SELECT teams.name FROM players_teams JOIN teams ON players_teams.tmID = teams.tmID WHERE players_teams.GP = players_teams.GS GROUP BY players_teams.tmID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT birthDate  FROM players  WHERE year = 2001 AND rebounds = (SELECT MAX(rebounds) FROM players WHERE year = 2001);
SELECT teams.name FROM players  JOIN players_teams ON players.playerID = players_teams.playerID JOIN player_allstar ON players.playerID = player_allstar.playerID WHERE player_allstar.rebounds = (SELECT MAX(rebounds) FROM player_allstar) AND players.year = 1997;
SELECT T1.name  FROM teams AS T1  JOIN players_teams AS T2 ON T1.tmID = T2.tmID  WHERE T2.rebounds > 600 AND T2.year = 2011  GROUP BY T2.tmID  HAVING COUNT(DISTINCT T2.playerID) > 1;
SELECT COUNT(*)  FROM works  WHERE Date < 1602;
SELECT COUNT(c.id)  FROM chapters c  JOIN works w ON c.work_id = w.id  WHERE w.Title = 'Twelfth Night' AND c.Act = '1'
SELECT chapters.Description  FROM chapters  JOIN works ON chapters.work_id = works.id  WHERE works.Title = 'Twelfth Night' AND chapters.Act = '1' AND chapters.Scene = '2';
SELECT      (SUM(CASE WHEN chapters.Act = 1 THEN 1 ELSE 0 END) - SUM(CASE WHEN chapters.Act = 5 THEN 1 ELSE 0 END)) as scene_difference FROM      chapters JOIN      works ON chapters.work_id = works.id WHERE      works.Title = 'Twelfth Night';
SELECT w.Title, w.Abbrev  FROM works w  JOIN chapters c ON w.id = c.work_id  JOIN paragraphs p ON c.id = p.chapter_id  JOIN characters ch ON p.character_id = ch.id  WHERE ch.CharName = 'Lord Abergavenny';
SELECT DISTINCT c.CharName FROM characters c JOIN chapters ch ON ch.work_id = (SELECT w.id FROM works w WHERE w.Title = 'Twelfth Night') JOIN paragraphs p ON p.chapter_id = ch.id AND p.character_id = c.id;
SELECT COUNT(*)  FROM paragraphs  JOIN chapters ON paragraphs.chapter_id = chapters.id  JOIN works ON chapters.work_id = works.id  WHERE chapters.Act = '1'  AND chapters.Scene = '1'  AND works.Title = 'Twelfth Night';
SELECT p.PlainText FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id JOIN works w ON c.work_id = w.id WHERE c.Act = '1' AND c.Scene = '1' AND w.Title = 'Twelfth Night';
SELECT COUNT(*)  FROM paragraphs  JOIN chapters ON paragraphs.chapter_id = chapters.id  JOIN works ON chapters.work_id = works.id  WHERE works.GenreType = 'Shakespeare'  AND chapters.Act IS NOT NULL  AND chapters.Scene IS NOT NULL  AND paragraphs.character_id IN (     SELECT id      FROM characters      WHERE CharName = 'Lord Abergavenny' );
SELECT p.id FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE c.Description = 'son to Tamora';
SELECT COUNT(*)  FROM chapters  JOIN works ON chapters.work_id = works.id  WHERE chapters.Description = 'OLIVIA’S house.' AND works.Title = 'Twelfth Night';
SELECT COUNT(*)  FROM characters  JOIN chapters ON characters.id = chapters.character_id  JOIN works ON chapters.work_id = works.id  WHERE works.Title = 'Twelfth Night';
SELECT w.Title  FROM works w  JOIN chapters c ON w.id = c.work_id  JOIN paragraphs p ON c.id = p.chapter_id  JOIN characters ch ON p.character_id = ch.id  GROUP BY w.id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT AVG(T2.id) as average_characters_per_work  FROM works AS T1  JOIN chapters AS T3 ON T1.id = T3.work_id  JOIN paragraphs AS T4 ON T3.id = T4.chapter_id  JOIN characters AS T2 ON T4.character_id = T2.id  GROUP BY T1.id;
SELECT AVG(T2.Scene)  FROM chapters AS T1  JOIN paragraphs AS T2 ON T1.id = T2.chapter_id  JOIN works AS T3 ON T3.id = T1.work_id  WHERE T3.Title = 'Twelfth Night'
SELECT COUNT(*)  FROM works  WHERE GenreType = 'Comedy';
SELECT Date  FROM works  WHERE GenreType = 'Poem'  AND Date = (SELECT MIN(Date) FROM works);
SELECT `Abbrev`  FROM characters  WHERE `CharName` = 'Earl of Westmoreland';
SELECT c.Description  FROM chapters c  JOIN paragraphs p ON c.id = p.chapter_id  GROUP BY c.id  ORDER BY COUNT(p.id) DESC  LIMIT 1;
SELECT c.CharName  FROM characters c  JOIN paragraphs p ON c.id = p.character_id  WHERE p.PlainText = 'Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.';
SELECT COUNT(*)  FROM characters  JOIN chapters ON characters.work_id = chapters.work_id  JOIN works ON chapters.work_id = works.id  WHERE works.Title = 'Titus Andronicus';
SELECT COUNT(*)  FROM chapters  WHERE work_id IN (     SELECT id      FROM works      WHERE LongTitle = 'Two Gentlemen of Verona' )
SELECT c.Description  FROM characters c  JOIN paragraphs p ON c.id = p.character_id  WHERE p.id = '640171';
SELECT w.Title FROM works w JOIN chapters c ON w.id = c.work_id JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE ch.CharName = 'Shylock';
SELECT COUNT(c.id)  FROM chapters c  JOIN works w ON c.work_id = w.id  WHERE w.Title = 'King John'
SELECT COUNT(*)  FROM chapters  JOIN paragraphs ON chapters.id = paragraphs.chapter_id  JOIN characters ON paragraphs.character_id = characters.id  WHERE characters.CharName = 'Demetrius';
SELECT w.Title, w.LongTitle  FROM works w  JOIN chapters c ON w.id = c.work_id  JOIN paragraphs p ON c.id = p.chapter_id  JOIN characters ch ON p.character_id = ch.id  WHERE ch.id = 324 AND p.PlainText = 'this friend of Caesar';
SELECT chapters.Description  FROM chapters  JOIN works ON chapters.work_id = works.id  WHERE works.Title = 'Midsummer Night''s Dream' AND chapters.Act = '2' AND chapters.Scene = '2';
SELECT w.LongTitle  FROM works w  JOIN chapters c ON w.id = c.work_id  WHERE w.GenreType = 'Tragedy'  GROUP BY w.id  ORDER BY COUNT(c.Scene) DESC  LIMIT 1;
SELECT COUNT(*)  FROM chapters  WHERE Description = 'A Sea-port in Cyprus. An open place near the quay.'  AND EXISTS (     SELECT 1      FROM paragraphs      WHERE chapters.id = paragraphs.chapter_id );
SELECT      (SUM(CASE WHEN w.GenreType = 'Tragedy' THEN c.Scene ELSE 0 END) * 100.0 / COUNT(c.Scene)) AS Tragic Scenes Percentage FROM      works w JOIN      chapters c ON w.id = c.work_id WHERE      w.Date = '1594';
SELECT AVG(chapters.id) / COUNT(works.id) FROM chapters JOIN works ON chapters.work_id = works.id WHERE works.Date = '1599';
SELECT COUNT(*)  FROM characters  WHERE Description = 'servant to Timon';
SELECT Title FROM works WHERE GenreType = 'William Shakespeare' AND Date = (SELECT MIN(Date) FROM works WHERE Author = 'William Shakespeare');
SELECT COUNT(*)  FROM works  WHERE GenreType = 'Poem';
SELECT COUNT(*)  FROM chapters  WHERE work_id = 7 AND Act = 1;
SELECT COUNT(*)  FROM works  WHERE Date BETWEEN 1500 AND 1599  AND GenreType = 'Tragedy';
SELECT c.CharName  FROM characters c  JOIN paragraphs p ON c.id = p.character_id  JOIN chapters ch ON p.chapter_id = ch.id  JOIN works w ON ch.work_id = w.id  WHERE w.Title = 'Romeo and Juliet' AND c.Description = 'Daughter to Capulet';
SELECT COUNT(*)  FROM paragraphs  WHERE PlainText = 'Ay, surely, mere the truth: I know his lady.'
SELECT w.LongTitle  FROM works w  JOIN chapters c ON w.id = c.work_id  WHERE c.Act = '1' AND c.Scene IS NOT NULL  GROUP BY w.id  ORDER BY COUNT(c.Scene) DESC  LIMIT 1;
SELECT c.Description  FROM chapters c  JOIN (     SELECT chapter_id, COUNT(id) as paragraph_count      FROM paragraphs      GROUP BY chapter_id      ORDER BY paragraph_count DESC      LIMIT 1 ) p ON c.id = p.chapter_id;
SELECT chapters.Description  FROM chapters  JOIN works ON chapters.work_id = works.id  WHERE works.LongTitle = 'Twelfth Night, Or What You Will' AND chapters.Scene = 2 AND chapters.Act = 2;
SELECT c.Description  FROM chapters c  JOIN paragraphs p ON c.id = p.chapter_id  WHERE p.ParagraphNum < 150;
SELECT w.Title FROM works w JOIN chapters c ON w.id = c.work_id WHERE c.Description = 'A field near Windsor';
SELECT COUNT(p.ParagraphNum)  FROM paragraphs p  JOIN chapters c ON p.chapter_id = c.id  WHERE c.Act = '1' AND c.Scene = (SELECT MAX(count(Scene)) FROM chapters WHERE Act = '1')
SELECT c.CharName  FROM characters c  JOIN paragraphs p ON c.id = p.character_id  JOIN chapters ch ON p.chapter_id = ch.id  WHERE ch.Description = 'The sea-coast'  AND c.CharName != '(stage directions)'  GROUP BY c.id  HAVING COUNT(p.id) = 5;
SELECT COUNT(*)  FROM chapters  JOIN works ON chapters.work_id = works.id  WHERE works.Title = 'As You Like It'  AND chapters.id IN (     SELECT chapters.id      FROM chapters      JOIN paragraphs ON chapters.id = paragraphs.chapter_id      WHERE paragraphs.ParagraphNum < 50 );
SELECT c.id  FROM characters c  JOIN paragraphs p ON c.id = p.character_id  JOIN chapters ch ON p.chapter_id = ch.id  WHERE ch.Description = 'Florence. Without the walls. A tucket afar off' AND p.PlainText = 'His name, I pray you.';
SELECT COUNT(*)  FROM characters  JOIN chapters ON characters.id = chapters.character_id  JOIN works ON chapters.work_id = works.id  WHERE works.Title = 'Hamlet';
SELECT COUNT(ch.id)  FROM chapters ch  JOIN works w ON ch.work_id = w.id  WHERE w.LongTitle = 'History of Henry VIII' AND ch.Act = 5;
SELECT COUNT(*)  FROM works  JOIN chapters ON works.id = chapters.work_id  WHERE works.GenreType = 'History'  AND chapters.Act = 1  AND (SELECT COUNT(*) FROM chapters WHERE work_id = chapters.id AND Act = 1) < 2;
SELECT COUNT(chapters.Act)  FROM chapters  JOIN works ON chapters.work_id = works.id  WHERE works.Title = 'Sonnets'
SELECT c.Description  FROM chapters c  JOIN paragraphs p ON c.id = p.chapter_id  JOIN characters ch ON p.character_id = ch.id  WHERE ch.Abbrev = '1Play'  GROUP BY c.id  HAVING MIN(p.id) = MIN(p.id)  LIMIT 1;
SELECT w.Title, w.GenreType  FROM works w  JOIN chapters c ON w.id = c.work_id  WHERE c.Act = 1;
SELECT COUNT(*)  FROM paragraphs p  JOIN chapters c ON p.chapter_id = c.id  JOIN characters ch ON p.character_id = ch.id  WHERE ch.CharName = 'Sir Richard Ratcliff'  AND p.ParagraphNum = (SELECT MAX(ParagraphNum) FROM chapters WHERE id IN (SELECT chapter_id FROM paragraphs WHERE character_id IN (SELECT id FROM characters WHERE CharName = 'Sir Richard Ratcliff')));
SELECT chapters.Description  FROM chapters  JOIN works ON chapters.work_id = works.id  WHERE works.Title = 'A Lover''s Complaint' AND chapters.Act = '1' AND chapters.Scene = '1';
SELECT Date  FROM works  WHERE id IN (     SELECT work_id      FROM chapters      WHERE COUNT(chapters.Scene) = 154 );
SELECT AVG(T1.Scene)  FROM chapters AS T1  JOIN works AS T2 ON T1.work_id = T2.id  WHERE T2.GenreType = 'Comedy' AND T2.Title LIKE '%Shakespeare%'
SELECT      w.LongTitle,     c.CharName,     COUNT(p.id) AS total_mentions,     (COUNT(p.id) / (SELECT COUNT(*) FROM characters WHERE work_id = w.id)) * 100 AS percentage FROM      works w JOIN      chapters c ON w.id = c.work_id JOIN      paragraphs p ON c.id = p.chapter_id JOIN      characters ch ON p.character_id = ch.id WHERE      w.LongTitle = 'The Tragedy of Romeo and Juliet'     AND (ch.CharName = 'Romeo' OR ch.CharName = 'Juliet') GROUP BY      w.LongTitle, ch.CharName;
SELECT ParagraphNum FROM paragraphs WHERE PlainText = 'This is Illyria, lady';
SELECT COUNT(ParagraphNum)  FROM paragraphs  WHERE chapter_id = 18881;
SELECT Title  FROM works  WHERE GenreType = 'History'  LIMIT 5;
SELECT COUNT(*)  FROM chapters  WHERE Act = '5' AND work_id = 9;
SELECT characters.CharName, characters.Description  FROM characters  JOIN paragraphs ON characters.id = paragraphs.character_id  JOIN chapters ON paragraphs.chapter_id = chapters.id  JOIN works ON chapters.work_id = works.id  WHERE chapters.id = 18710;
SELECT COUNT(*)  FROM chapters  JOIN works ON chapters.work_id = works.id  WHERE works.Title = 'Midsummer Night\'s Dream';
SELECT COUNT(*)  FROM paragraphs  JOIN chapters ON paragraphs.chapter_id = chapters.id  JOIN works ON chapters.work_id = works.id  WHERE chapters.Act = '5'  AND chapters.Scene = '1'  AND works.Title = 'Comedy of Errors';
SELECT c.CharName, c.Description  FROM characters c  JOIN paragraphs p ON c.id = p.character_id  JOIN chapters ch ON p.chapter_id = ch.id  JOIN works w ON ch.work_id = w.id  WHERE w.Title = 'Venus and Adonis';
SELECT w.Title FROM works w JOIN chapters c ON w.id = c.work_id JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE ch.CharName = 'Froth';
SELECT COUNT(*)  FROM chapters  JOIN paragraphs ON chapters.id = paragraphs.chapter_id  JOIN characters ON paragraphs.character_id = characters.id  WHERE characters.CharName = 'First Witch';
SELECT chapters.Scene, chapters.Description  FROM chapters  JOIN works ON chapters.work_id = works.id  WHERE works.LongTitle = 'Pericles, Prince of Tyre' AND chapters.Act = '1';
SELECT w.LongTitle  FROM works w  JOIN chapters c ON w.id = c.work_id  JOIN paragraphs p ON c.id = p.chapter_id  JOIN characters ch ON p.character_id = ch.id  WHERE ch.Description = 'Servant to Montague';
SELECT chapters.Scene, chapters.Act, works.Title  FROM chapters  JOIN paragraphs ON chapters.id = paragraphs.chapter_id  JOIN characters ON paragraphs.character_id = characters.id  WHERE paragraphsPlainText LIKE '%The house of ANTIPHOLUS of Ephesus%'  AND chapters.Description = 'The house of ANTIPHOLUS of Ephesus';
SELECT      c.CharName,     p.ParagraphNum,     p.PlainText FROM      characters c JOIN      paragraphs p ON c.id = p.character_id JOIN      chapters ch ON p.chapter_id = ch.id JOIN      works w ON ch.work_id = w.id WHERE      c.Description = 'cousin to the king' AND     w.GenreType = 'Shakespeare'
SELECT      AVG(ch.Act) AS avg_scene_per_act FROM      chapters ch JOIN      works w ON ch.work_id = w.id WHERE      w.Title = 'Antony and Cleopatra' GROUP BY      ch.Act;
SELECT      (SUM(CASE WHEN w.Title = 'All\'s Well That Ends Well' THEN p.id ELSE 0 END) /       COUNT(p.id)) * 100 AS percentage_paragraphs FROM      works w JOIN      chapters c ON w.id = c.work_id JOIN      paragraphs p ON p.chapter_id = c.id;
SELECT COUNT(*)  FROM characters  WHERE Abbrev = 'all';
SELECT Title, LongTitle FROM works WHERE GenreType = 'comedy' LIMIT 3;
SELECT      COUNT(*) - (SELECT COUNT(*) FROM works WHERE Date > 1593 AND GenreType = 'History') AS Difference FROM      works WHERE      Date > 1593 AND GenreType = 'comedy';
SELECT w.LongTitle  FROM works w  WHERE w.GenreType = 'History'  ORDER BY w.Date DESC  LIMIT 1;
SELECT DISTINCT w.id  FROM works w  JOIN chapters c ON w.id = c.work_id  WHERE w.Title LIKE '%Henry%';
SELECT c.CharName  FROM characters c  JOIN chapters ch ON c.id = ch.character_id  WHERE ch.Description LIKE '%a senator of Venice%';
SELECT c.CharName  FROM paragraphs p  JOIN characters c ON p.character_id = c.id  WHERE p.ParagraphNum = 8 AND p.chapter_id = 18820;
SELECT c.Description  FROM chapters c  JOIN paragraphs p ON c.id = p.chapter_id  JOIN characters ch ON p.character_id = ch.id  WHERE c.id = 18704 AND ch.CharName = 'Orsino';
SELECT COUNT(DISTINCT chapters.Scene)  FROM chapters  JOIN works ON chapters.work_id = works.id  WHERE works.LongTitle = 'Twelfth Night, Or What You Will'
SELECT c.Description  FROM characters c  JOIN paragraphs p ON c.id = p.character_id  WHERE p.ParagraphNum = 20;
SELECT COUNT(*)  FROM chapters  JOIN paragraphs ON chapters.id = paragraphs.chapter_id  JOIN characters ON characters.id = paragraphs.character_id  WHERE characters.CharName = 'Gratiano'  AND characters.Description = 'friend to Antonio and Bassiano';
SELECT c.Description  FROM chapters c  JOIN works w ON c.work_id = w.id  WHERE c.id = 18706 AND w.Title = 'All\'s Well That Ends Well';
SELECT T3.CharName FROM paragraphs AS T1 JOIN chapters AS T2 ON T1.chapter_id = T2.id JOIN characters AS T3 ON T3.id = T1.character_id WHERE T1.ParagraphNum = 3
SELECT p.PlainText FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE c.CharName = 'Aedile';
SELECT c.CharName  FROM characters c  JOIN paragraphs p ON c.id = p.character_id  JOIN chapters ch ON p.chapter_id = ch.id  WHERE ch.Act = 1 AND ch.Scene = 1 AND ch.id = 18708 LIMIT 2;
SELECT COUNT(DISTINCT ch.Act)  FROM chapters ch  JOIN works w ON ch.work_id = w.id  WHERE w.GenreType = 'comedy' AND w.Title = 'Two Gentlemen of Verona';
SELECT      (COUNT(CASE          WHEN w.GenreType = 'history'         AND c.Scene >= 5          AND w.Date BETWEEN 1500 AND 1599     THEN w.id      END)      / COUNT(CASE          WHEN w.GenreType = 'history'          AND w.Date BETWEEN 1500 AND 1599     THEN w.id      END)      * 100) AS percentage FROM      works w JOIN      chapters c ON w.id = c.work_id;
SELECT      (SUM(CASE WHEN c.Act = 5 THEN 1 ELSE 0 END) / COUNT(c.Act)) * 100 AS percentage FROM      chapters c JOIN      works w ON c.work_id = w.id WHERE      w.Title = 'Titus Andronicus';
SELECT COUNT(*)  FROM works  WHERE GenreType = 'Tragedy';
SELECT COUNT(*)  FROM works  WHERE Title LIKE '%Henry%';
SELECT p.character_id  FROM paragraphs p  JOIN chapters c ON p.chapter_id = c.id  JOIN works w ON c.work_id = w.id  WHERE pPlainText = 'O my poor brother! and so perchance may he be.';
SELECT ParagraphNum  FROM paragraphs  JOIN characters ON paragraphs.character_id = characters.id  WHERE CharName = 'Sir Andrew Aguecheek';
SELECT w.Title, c.CharName  FROM works w  JOIN chapters ch ON w.id = ch.work_id  JOIN paragraphs p ON ch.id = p.chapter_id  JOIN characters c ON p.character_id = c.id  WHERE w.GenreType = 'Shakespeare'  ORDER BY ch.Date DESC  LIMIT 1;
SELECT p.PlainText FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE p.ParagraphNum BETWEEN 1900 AND 1950 AND c.Description = 'a sea captain, friend to Sebastian';
SELECT w.LongTitle  FROM works w  JOIN chapters c ON w.id = c.work_id  WHERE c.Act = 4 AND c.Scene = 5 AND c.Description = 'Mytilene. A street before the brothel.';
SELECT c.CharName  FROM characters c  JOIN paragraphs p ON c.id = p.character_id  WHERE p.PlainText = 'This is Illyria, lady.';
SELECT COUNT(*)  FROM works  JOIN chapters ON works.id = chapters.work_id  JOIN paragraphs ON chapters.id = paragraphs.chapter_id  JOIN characters ON paragraphs.character_id = characters.id  WHERE works.Date BETWEEN 1600 AND 1610 AND characters.CharName = 'Third Servingman';
SELECT c.Description  FROM chapters c  JOIN works w ON c.work_id = w.id  WHERE w.Title = 'Venus and Adonis'  ORDER BY c.Scene DESC  LIMIT 1;
SELECT COUNT(p.id)  FROM paragraphs p  JOIN chapters c ON c.id = p.chapter_id  JOIN works w ON w.id = c.work_id  JOIN characters ch ON ch.id = p.character_id  WHERE w.Title = 'Twelfth Night' AND c.Act = 1 AND c.Scene = 2 AND ch.CharName = 'Viola';
SELECT      c.CharName, w.id AS work_id FROM      chapters ch JOIN      paragraphs p ON ch.id = p.chapter_id JOIN      characters c ON c.id = p.character_id JOIN      works w ON w.id = ch.work_id WHERE      p.PlainText = 'Fear not thou, man, thou shalt lose nothing here.'
SELECT c.Description  FROM chapters c  JOIN paragraphs p ON c.id = p.chapter_id  WHERE p.PlainText = 'What, wilt thou hear some music, my sweet love?';
SELECT c.Scene FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE ch.CharName = 'Sir Toby Belch' AND c.work_id IN (     SELECT w.id     FROM works w     WHERE w.Title = 'Twelfth Night' );
SELECT w.Title FROM works w JOIN chapters c ON w.id = c.work_id JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE w.Date < 1600 AND w.GenreType = 'Tragedy' AND ch.CharName = 'Tybalt';
SELECT c.id FROM chapters c JOIN works w ON c.work_id = w.id WHERE w.Date > (AVG(w.Date) OVER () * 0.89)
SELECT      (SUM(CASE WHEN w.GenreType = 'Comedy' AND c.CharName = 'Antonio' THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN w.GenreType = 'Comedy' THEN 1 ELSE 0 END), 0)) * 100 AS Percentage FROM      works w JOIN      chapters ch ON w.id = ch.work_id JOIN      paragraphs p ON ch.id = p.chapter_id JOIN      characters c ON p.character_id = c.id WHERE      w.GenreType = 'Comedy';
SELECT d.car_name  FROM data d  JOIN price p ON d.ID = p.ID  JOIN production pd ON d.model = pd.model AND d.ID = pd.ID   WHERE d.cylinders = 8  AND p.price = (     SELECT MAX(price)      FROM price      WHERE ID IN (         SELECT ID          FROM data          WHERE cylinders = 8     ) )
SELECT COUNT(*)  FROM cars.data  JOIN cars.production ON data.ID = production.ID  JOIN cars.price ON data.ID = price.ID  WHERE data.weight > 3000 AND price.price < 30000;
SELECT data.acceleration  FROM data  JOIN price ON data.ID = price.ID  WHERE price.price = (SELECT MAX(price) FROM price)
SELECT price.ID, price.price  FROM price  JOIN production ON price.ID = production.ID  JOIN data ON production.model = data.model AND production.country = 'USA' AND data.car_name = 'ford torino';
SELECT c.origin  FROM country c  JOIN production p ON c.country = p.country  WHERE p.model_year = 1970 AND p.car_name = 'ford torino';
SELECT COUNT(*)  FROM production  JOIN country ON production.country = country.origin  WHERE production.model_year = 1970 AND country.country = 'USA'
SELECT data.car_name  FROM data  JOIN production ON data.ID = production.ID  JOIN country ON production.country = country.origin  WHERE country.country = 'USA'
SELECT d.car_name  FROM data d  JOIN price p ON d.ID = p.ID  WHERE p.price = (SELECT MAX(price) FROM price)  LIMIT 3;
SELECT DISTINCT p.model_year FROM production p JOIN data d ON p.ID = d.ID WHERE d.car_name = 'Chevrolet Impala';
SELECT COUNT(*)  FROM (   SELECT dp.ID    FROM data AS d    JOIN production AS p ON d.model = p.model    JOIN price AS dp ON d.ID = dp.ID    WHERE d.acceleration > 10    AND dp.price BETWEEN 20000 AND 30000 ) AS filteredCars
SELECT data.weight FROM data JOIN price ON data.ID = price.ID WHERE price.price > 40000;
SELECT MAX(data.acceleration)  FROM data  JOIN price ON data.ID = price.ID  WHERE price.price > 40000;
SELECT AVG(p.price)  FROM price p  JOIN data d ON p.ID = d.ID  WHERE d.cylinders = 8;
SELECT MAX(displacement / cylinders)  FROM cars.price  JOIN cars.data ON cars.price.ID = cars.data.ID  WHERE cars.price.price < 30000;
SELECT COUNT(*)  FROM country  WHERE origin = 'Europe';
SELECT T3.origin  FROM production AS T1  JOIN data AS T2 ON T1.model_year = T2.model  JOIN country AS T3 ON T1.country = T3.country  WHERE T2.car_name = 'chevrolet malibu';
SELECT data.mpgle  FROM data  JOIN price ON data.ID = price.ID  WHERE price.price = (SELECT MAX(price) FROM price)  ;
SELECT `origin`  FROM `country`  JOIN `production` ON `country`.`ID` = `production`.`country`  WHERE `production`.`ID` = 382;
SELECT T1.origin  FROM country AS T1  JOIN production AS T2 ON T1.country = T2.country  JOIN price AS T3 ON T2.model_year = T3.ID AND T3.price = 44274.40748;
SELECT price.price FROM price JOIN data ON price.ID = data.ID JOIN production ON data.ID = production.ID WHERE data.acceleration = 14.1 AND data.car_name = 'volkswagen dasher';
SELECT T3.displacement FROM price AS T1 JOIN production AS T2 ON T1.ID = T2.ID JOIN data AS T3 ON T2.model = T3.model WHERE T1.price = 37443.85589;
SELECT T3.model_year FROM `price` AS T1 JOIN `production` AS T3 ON T1.ID = T3.ID WHERE T1.price = 32650.65157;
SELECT p.price FROM price p JOIN production pr ON pr.ID = p.ID JOIN data d ON d.ID = pr.ID WHERE d.car_name = 'toyota corona hardtop';
SELECT COUNT(*)  FROM (   SELECT d.cylinders    FROM data d    JOIN production p ON d.ID = p.ID    JOIN price pr ON p.ID = pr.ID    WHERE pr.price = (SELECT MIN(price) FROM price) ) AS cheapest_cylinders
SELECT car_name, price  FROM cars  JOIN data ON cars.car_name = data.car_name  WHERE data.weight = (SELECT MAX(weight) FROM data)
SELECT c.origin FROM country c JOIN production p ON c.ID = p.country JOIN data d ON p.model = d.model WHERE d.horsepower = (SELECT MAX(horsepower) FROM data)
SELECT      (COUNT(CASE WHEN c.origin = 'Japan' THEN 1 END) /       CAST(COUNT(*) AS REAL) * 100) AS percentage_japanese_cars FROM      country c JOIN      production p ON c.ID = p.country;
SELECT (d.displacement / c.cylinders) AS swept_volume FROM cars.price p JOIN cars.production pe ON p.ID = pe.ID JOIN cars.country co ON pe.country = co.country JOIN cars.data d ON p.ID = d.ID JOIN cars.cylinder c ON d.cylinders = c.cylinders WHERE p.price = 34538.97449;
SELECT d.car_name  FROM data d  JOIN price p ON d.ID = p.ID  WHERE p.price = (SELECT MAX(price) FROM price)
SELECT COUNT(*)  FROM production  JOIN country ON production.country = country.origin  WHERE country = 'USA' AND model_year = 1981;
SELECT p.price FROM price p JOIN (     SELECT ID     FROM data d     WHERE displacement / cylinders = (SELECT MAX(displacement / cylinders) FROM data) ) max_sweep_volume ON p.ID = max_sweep_volume.ID;
SELECT car_name FROM cars.data JOIN cars.production ON data.ID = production.ID JOIN cars.country ON production.country = country.origin WHERE country.country = 'Japan' ORDER BY data.horsepower DESC LIMIT 1;
SELECT COUNT(*)  FROM production  WHERE model_year IN (     SELECT pd.model_year      FROM data AS d      JOIN production AS pd ON d.ID = pd.ID      WHERE d.car_name = 'ford maverick' );
SELECT p.country, c.origin  FROM production p  JOIN data d ON p.model = d.model  JOIN country c ON p.country = c.country  WHERE d.mpg = (SELECT MAX(mpg) FROM data)  GROUP BY p.country, c.origin  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T3.car_name FROM production AS T1 JOIN country AS T2 ON T1.country = T2.origin  JOIN data AS T3 ON T3.model = T1.model_year  JOIN price AS T4 ON T3.ID = T4.ID  WHERE T3.car_name LIKE 'dodge%'  ORDER BY T4.price  LIMIT 1;
SELECT d.car_name  FROM data d  JOIN production p ON d.ID = p.ID  JOIN country c ON p.country = c.origin  JOIN price pr ON d.ID = pr.ID  WHERE c.country = 'USA' AND pr.price = (SELECT MAX(price) FROM price)
SELECT COUNT(*)  FROM cars.data  JOIN cars.production ON data.ID = production.ID  JOIN cars.price ON data.ID = price.ID  WHERE production.country = 'origin_country' AND data.displacement > 400 AND price.price >= 30000;
SELECT p.model_year  FROM production p  JOIN country c ON p.country = c.origin  WHERE c.country = 'Europe'  GROUP BY p.model_year  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT price.price FROM price JOIN production ON price.ID = production.ID JOIN data ON production.model = data.model AND production.country = data.country WHERE data.car_name = 'peugeot 505s turbo diesel'
SELECT data.mpg  FROM data  JOIN production ON data.ID = production.ID  JOIN country ON production.country = country.origin  JOIN price ON data.ID = price.ID  WHERE country.country = 'USA'  AND price.price = (SELECT MIN(price) FROM price);
SELECT      c.country,     COUNT(p.ID) AS total_cars,     AVG(COUNT(p.ID) OVER (ORDER BY p.model_year RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)) AS annual_avg_cars FROM      country c JOIN      production p ON c.origin = p.country GROUP BY      c.country ORDER BY      total_cars DESC LIMIT 1;
SELECT      (COUNT(*) FILTER (WHERE p.country = 'Japan' AND d.displacement / p.cylinders >= 30.0)       OVER ()      * 100.0) /     COUNT(*) OVER () AS percentage FROM      production p JOIN      data d ON p.ID = d.ID JOIN      country c ON p.country = c.origin JOIN      price pr ON p.ID = pr.ID WHERE      c.country = 'Japan' AND      d.displacement / p.cylinders >= 30.0;
SELECT data.car_name  FROM data  JOIN production ON data.ID = production.ID  WHERE production.model_year = 1975;
SELECT AVG(p.price)  FROM price p  JOIN country c ON p.ID = c.ID  WHERE c.origin = 'Europe';
SELECT price.price FROM price JOIN production ON price.ID = production.ID WHERE production.ID = 15;
SELECT COUNT(*)  FROM cars.data  JOIN cars.production ON data.ID = production.ID  JOIN cars.country ON production.country = country.origin  WHERE country.country = 'Japan' AND data.weight < 3000;
SELECT COUNT(*)  FROM cars.data  JOIN cars.production  ON cars.data.ID = cars.production.ID  WHERE cars.production.model_year = 1973 AND cars.data.horsepower < 100;
SELECT p.ID FROM price p JOIN production pd ON p.ID = pd.ID JOIN country c ON pd.country = c.origin WHERE c.country = 'Japan' AND p.price > 35000 AND pd.acceleration = 14;
SELECT p.model_year  FROM production p  JOIN data d ON p.ID = d.ID  WHERE d.weight = (SELECT MAX(weight) FROM data)
SELECT data.horsepower, production.model_year FROM data JOIN production ON data.ID = production.ID WHERE data.car_name = 'subaru dl';
SELECT car_name FROM cars JOIN production ON cars.ID = production.ID JOIN country ON production.country = country.origin WHERE country.country = 'Japan' AND cars.ID = (   SELECT ID    FROM price    WHERE price > ALL (     SELECT price      FROM price      JOIN production ON price.ID = production.ID      JOIN country ON production.country = country.origin      WHERE country.country = 'Japan'   ) );
SELECT d.car_name  FROM data d  JOIN price p ON d.ID = p.ID  WHERE p.price = 20000;
SELECT COUNT(*)  FROM cars.price  JOIN cars.production ON price.ID = production.ID  JOIN cars.country ON production.country = country.origin  WHERE price.price > 40000 AND country.country = 'USA';
SELECT price.price, country.origin  FROM price  JOIN production ON price.ID = production.ID  JOIN country ON production.country = country.country  JOIN data ON production.model = data.model  WHERE data.car_name = 'ford maverick';
SELECT d.car_name  FROM data d  JOIN price p ON d.ID = p.ID  WHERE p.price > (SELECT AVG(price) * 0.85 FROM price)
SELECT      (COUNT(CASE WHEN T4.model_year = 1970 THEN T1.ID ELSE NULL END) -       COUNT(CASE WHEN T4.model_year = 1976 THEN T1.ID ELSE NULL END)) AS difference FROM      data AS T1 JOIN      production AS T4 ON T1.ID = T4.ID WHERE      T1.horsepower = 130;
SELECT DISTINCT p.ID  FROM price p  JOIN production pd ON p.ID = pd.ID  JOIN country c ON pd.country = c.origin  WHERE c.country = 'Japan' AND pd.model_year = 1979;
SELECT T3.country  FROM production AS T1  JOIN data AS T2 ON T1.model = T2.model  JOIN country AS T3 ON T1.country = T3.origin  WHERE T2.mpg = (SELECT MIN(mpg) FROM data);
SELECT      c.car_name,     d.model_year,     (d.displacement / d.cylinders) AS sweep_volume FROM      cars.data d JOIN      cars.country co ON d.ID = co.ID JOIN      cars.production p ON d.ID = p.ID JOIN      cars.price pr ON d.ID = pr.ID JOIN      cars.cars cc ON cc.ID = d.ID WHERE      p.country = 'origin' AND      pr.price IS NOT NULL AND      d.weight = (SELECT MAX(weight) FROM cars.data);
SELECT data.car_name, data.horsepower  FROM data  JOIN production ON data.ID = production.ID  JOIN country ON production.country = country.origin  WHERE production.model_year = 1977 AND country.country = 'Europe';
SELECT car_name, model FROM cars.data WHERE price IN (     SELECT MAX(price)     FROM cars.price );
SELECT p.price FROM price p JOIN production pr ON pr.ID = p.ID JOIN data d ON d.ID = pr.ID WHERE d.car_name = 'chevrolet bel air';
SELECT AVG(p.price)  FROM cars.production p  JOIN cars.country c ON p.country = c.origin  WHERE c.country = 'Japan';
SELECT T3.country  FROM production AS T1  JOIN data AS T2 ON T1.model = T2.model  JOIN price AS T3 ON T2.ID = T3.ID  WHERE T3.price = (SELECT MIN(price) FROM price)
SELECT p.ID, d.car_name, c.country  FROM production AS p  JOIN country AS c ON p.country = c.origin  JOIN data AS d ON d.model = p.model_year  WHERE c.origin = 'country' AND p.model_year = 1975 AND d.cylinders = (SELECT MAX(cylinders) FROM data WHERE model = 1975)
SELECT T3.acceleration, T3.cylinders, T2.model_year  FROM cars.price AS T1  JOIN cars.data AS T3 ON T1.ID = T3.ID  JOIN cars.production AS T2 ON T3.ID = T2.ID  WHERE T1.price = (SELECT MIN(price) FROM cars.price)
SELECT data.car_name, price.price  FROM data  JOIN production ON data.ID = production.ID  JOIN price ON data.ID = price.ID  WHERE production.model_year = 82 AND data.mpg > 30;
SELECT COUNT(*)  FROM production  JOIN data ON production.ID = data.ID  WHERE data.car_name = 'ford maverick';
SELECT      (COUNT(CASE WHEN c.origin = 'USA' THEN 1 END) /       CAST(COUNT(*) AS REAL)) * 100 AS us_percentage FROM      country c;
SELECT AVG(p.model_year) as average_production_rate_per_year, c.car_name  FROM cars.production p JOIN cars.data d ON p.ID = d.ID JOIN cars.country co ON p.country = co.origin JOIN cars.price pr ON d.ID = pr.ID JOIN cars.country c ON pr.country = c.origin WHERE d.weight < 1800 AND p.model_year BETWEEN 1971 AND 1980 GROUP BY c.car_name
SELECT AVG(p.price)  FROM price p  JOIN production pr ON p.ID = pr.ID  JOIN data d ON pr.model = d.model  WHERE d.car_name = 'model 70'
SELECT p.price FROM price p JOIN data d ON p.ID = d.ID JOIN production pr ON d.model = pr.model WHERE d.car_name = 'chevrolet vega 2300';
SELECT T3.origin  FROM production AS T1  JOIN data AS T2 ON T1.model = T2.model  JOIN country AS T3 ON T1.country = T3.country  WHERE T2.car_name = 'chevy c20';
SELECT p.price FROM price p JOIN production pr ON pr.ID = p.ID JOIN data d ON d.ID = pr.ID WHERE d.car_name LIKE 'ford%' AND pr.model_year BETWEEN 1970 AND 1980;
SELECT car_name FROM cars.data JOIN cars.production ON data.ID = production.ID WHERE model_year = 1975 ORDER BY mpg DESC LIMIT 1;
SELECT c.car_name  FROM data AS d JOIN cars.country AS co ON d.ID = co.ID JOIN cars.price AS p ON d.ID = p.ID WHERE d.mpg = (SELECT MIN(mpg) FROM data) AND p.price = (SELECT MAX(price) FROM price)
SELECT COUNT(*)  FROM cars.data  JOIN cars.production ON data.ID = production.ID  JOIN cars.country ON production.country = country.origin  WHERE country.country = 'USA' AND production.model_year IN (SELECT model_year FROM cars.data WHERE acceleration < 12)
SELECT COUNT(*)  FROM cars.data  JOIN cars.production ON data.ID = production.ID  JOIN cars.country ON production.country = country.origin  WHERE country.country = 'Japan' AND data.weight > 2000;
SELECT d.car_name  FROM data d  JOIN price p ON d.ID = p.ID  WHERE p.price = (SELECT MAX(price) FROM price)
SELECT DISTINCT p.model_year FROM production p JOIN data d ON p.country = c.origin AND p.model = d.model JOIN cars c ON c.car_name = 'buick skylark 320'
SELECT T3.country  FROM production AS T1  JOIN data AS T2 ON T1.model_year = T2.model  JOIN price AS T4 ON T2.ID = T4.ID  WHERE T4.price = (SELECT MAX(T4.price) FROM price WHERE T4.price IS NOT NULL)  AND T1.model_year = 1970;
SELECT COUNT(*)  FROM cars.data  JOIN cars.production  ON data.ID = production.ID  WHERE data.horsepower > 200 AND production.model_year = 1975;
SELECT      (COUNT(CASE WHEN c.origin = 'USA' THEN 1 END) /       CAST(COUNT(*) AS REAL) * 100) AS american_car_percentage FROM      country c JOIN      production p ON c.ID = p.country;
SELECT AVG(data.weight)  FROM data  JOIN production ON data.ID = production.ID  JOIN country ON production.country = country.origin  WHERE country.country = 'Japan'  AND production.cylinders = 4  AND production.model_year BETWEEN 1975 AND 1980;
SELECT SUM(donation_total)  FROM donations  WHERE donation_timestamp LIKE '2012%';
SELECT donation_timestamp, MAX(donation_total)  FROM donations;
SELECT SUM(donation_total)  FROM donations  WHERE donation_timestamp LIKE '2011%'  AND for_honoree = 't'  AND via_giving_page = 't';
SELECT      donor_acctid,     (donation_optional_support / donation_total) * 100 AS optional_support_percentage FROM      donations WHERE      is_teacher_acct = 'f';
SELECT essays.title  FROM essays  JOIN projects ON essays.projectid = projects.projectid  WHERE projects.poverty_level = 'low' AND projects.primary_focus_subject = 'Literacy';
SELECT title  FROM projects  JOIN essays ON projects.projectid = essays.projectid  WHERE poverty_level = 'highest poverty'
SELECT      p.primary_focus_subject  FROM      essays e JOIN      projects p ON e.projectid = p.projectid WHERE      e.title = 'Toot Your Flute!' UNION SELECT      p2.primary_focus_subject  FROM      essays e2 JOIN      projects p2 ON e2.projectid = p2.projectid WHERE      e2.primary_focus_subject = (         SELECT              DISTINCT e.primary_focus_subject          FROM              essays e         JOIN              projects p ON e.projectid = p.projectid         WHERE              e.title = 'Toot Your Flute!'     )
SELECT essays.title FROM essays JOIN projects ON essays.projectid = projects.projectid WHERE projects.teacher_prefix = 'Dr.'
SELECT title, total_price_excluding_optional_support  FROM projects  WHERE students_reached = 320;
SELECT donations.donation_message, projects.title  FROM donations  JOIN projects ON donations.projectid = projects.projectid  WHERE donations.donor_city = 'Texas City';
SELECT      r.vendor_name,     r.item_name,     r.item_unit_price FROM      resources r JOIN      projects p ON r.projectid = p.projectid WHERE      p.title = 'Lights, Camera, Action!';
SELECT SUM(donation_to_project)  FROM donations  JOIN essays ON essays.projectid = donations.projectid  WHERE essays.title = 'Whistle While We Work!';
SELECT title AS "Project Name", short_description AS "Description" FROM projects WHERE teacher_ny_teaching_fellow = 't';
SELECT title, total_price_excluding_optional_support  FROM projects  JOIN essays ON projects.projectid = essays.projectid  WHERE projects.students_reached >= 600 AND projects.poverty_level = 'moderate poverty';
SELECT      (SUM(CASE WHEN p.school_metro = 'rural' THEN d.donation_total ELSE 0 END) / SUM(CASE WHEN d.school_metro = 'rural' THEN d.donation_total ELSE 0 END)) * 100 AS rural_donation_percentage FROM      donations d JOIN      projects p ON d.projectid = p.projectid;
SELECT      e.title AS 'Project Name',     IFNULL(SUM(d.donation_to_project), 0) AS 'Amount Collected',     ROUND((MAX(e.total_price_excluding_optional_support) - IFNULL(SUM(d.donation_to_project), 0)) / MAX(e.total_price_excluding_optional_support) * 100, 2) AS 'Percentage Amount Still Lacking' FROM      essays e LEFT JOIN      donations d ON e.projectid = d.projectid GROUP BY      e.projectid,     e.title ORDER BY      MAX(e.total_price_excluding_optional_support) DESC LIMIT 1;
SELECT COUNT(*)  FROM projects  WHERE school_district = 'West New York'  AND poverty_level = 'highest poverty';
SELECT COUNT(*)  FROM donations  WHERE is_teacher_acct = 't' AND donor_state = 'CO-Colorado';
SELECT projectid FROM projects WHERE total_price_including_optional_support = (SELECT MAX(total_price_including_optional_support) FROM projects);
SELECT donor_state  FROM donations  WHERE payment_method = 'paypal'  AND for_honoree = 't'  AND payment_included_campaign_gift_card = 't'  GROUP BY donor_state  ORDER BY COUNT(donor_state) DESC  LIMIT 1;
SELECT donationid, donation_total  FROM donations  WHERE donation_total = (SELECT MAX(donation_total) FROM donations);
SELECT p.projectid, r.item_name  FROM projects p  JOIN essays e ON p.projectid = e.projectid  JOIN donations d ON p.projectid = d.projectid  JOIN resources r ON p.projectid = r.projectid  WHERE d.donation_total - d.total_price_excluding_optional_support = (SELECT MAX(donation_total - total_price_excluding_optional_support) FROM donations)
SELECT      r.item_name,      r.item_quantity  FROM      resources AS r  JOIN      projects AS p ON r.projectid = p.projectid  WHERE      p.projectid = 'd6ef27c07c30c81f0c16c32b6acfa2ff' AND      p.teacher_prefix LIKE 'Dr. '
SELECT SUM(donation_total) + SUM(donation_optional_support) AS total_price_including_optional_support  FROM donations  JOIN projects ON donations.projectid = projects.projectid  WHERE teacher_acctid IN (     SELECT teacher_acctid      FROM essays      WHERE title = 'Recording Rockin'' Readers' );
SELECT school_latitude, school_longitude  FROM projects  JOIN essays ON projects.projectid = essays.projectid  WHERE essays.title = 'Smile for the Camera!!!';
SELECT e.title, SUM(d.donation_total) as total_amount FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON d.projectid = p.projectid WHERE d.donor_acctid IN (   SELECT donor_acctid    FROM donations   GROUP BY donor_acctid   HAVING SUM(donation_total) = (     SELECT MAX(total)     FROM (       SELECT SUM(donation_total) as total       FROM donations       GROUP BY donor_acctid     ) t   ) ) GROUP BY e.title ORDER BY total_amount DESC LIMIT 1;
SELECT      d.donor_acctid,     pr.project_resource_type FROM     (SELECT          donor_acctid,          SUM(donation_total) as total_donated      FROM donations      GROUP BY donor_acctid      ORDER BY total_donated DESC      LIMIT 10) d JOIN donations dd ON d.donor_acctid = dd.donor_acctid JOIN projects p ON dd.projectid = p.projectid JOIN resources pr ON p.projectid = pr.projectid WHERE pr.project_resource_type = 'favorite project type';
SELECT      MIN(p.date_posted) AS first_live_date,     GROUP_CONCAT(DISTINCT r.item_name) AS item_names FROM      projects p JOIN      essays e ON p.projectid = e.projectid JOIN      resources r ON p.projectid = r.projectid GROUP BY      p.date_posted ORDER BY      p.date_posted ASC;
SELECT vendor_name FROM resources JOIN projects ON resources.projectid = projects.projectid WHERE projects.title = 'iMath';
SELECT      p.date_posted,     pl.grade_level FROM      projects p JOIN      resources r ON p.projectid = r.projectid WHERE      r.item_quantity = (SELECT MAX(item_quantity) FROM resources) GROUP BY      p.projectid,      p.date_posted,      pl.grade_level;
SELECT      (SUM(CASE WHEN e.title = 'Recording Rockin'' Readers' THEN d.donation_total ELSE 0 END) / COUNT(DISTINCT d.donor_acctid)) FROM essays e JOIN donations d ON e.projectid = d.projectid
SELECT e.title, t.teacher_acctid AS donor, d.donor_acctid, (d.donation_to_project / MAX(coalesce(p.total_price_excluding_optional_support, 0))) * 100 AS donation_percentage FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid JOIN teachers t ON p.teacher_acctid = t.acctid WHERE p.total_price_excluding_optional_support = (SELECT MAX(total_price_excluding_optional_support) FROM projects) GROUP BY e.title, t.teacher_acctid, d.donor_acctid ORDER BY donation_to_project DESC LIMIT 1;
SELECT      d.donor_state,     d.donor_acctid,     AVG(d.donation_optional_support) AS avg_optional_support,     r.project_resource_type FROM      donations d JOIN      projects p ON d.projectid = p.projectid JOIN      resources r ON p.projectid = r.projectid WHERE      d.donation_optional_support IN (         SELECT TOP 5 donation_optional_support          FROM donations          GROUP BY donation_optional_support     ) GROUP BY      d.donor_state,      d.donor_acctid,      r.project_resource_type;
SELECT T1.projectid, GROUP_CONCAT(T2.item_name) AS items_requested FROM essays AS T1 JOIN projects AS T2 ON T1.projectid = T2.projectid JOIN resources AS T3 ON T2.projectid = T3.projectid WHERE T2.school_city = 'Brooklyn' GROUP BY T1.projectid ORDER BY COUNT(T3.item_name) DESC LIMIT 1;
SELECT COUNT(*)  FROM projects  JOIN resources ON projects.projectid = resources.projectid  WHERE projects.school_metro = 'urban' AND resources.project_resource_type = 'Books';
SELECT schoolid FROM resources WHERE vendor_name = 'Amazon' GROUP BY schoolid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT donationid)  FROM donations  WHERE donor_city = 'Los Angeles'  AND school_city != 'Los Angeles';
SELECT teacher_prefix  FROM essays  WHERE title = 'Reading About Other Cultures';
SELECT SUM(essays.students_reached) AS total_students_impacted FROM essays JOIN projects ON essays.projectid = projects.projectid WHERE essays.title = 'Fit Firsties!';
SELECT p.title, d.donor_acctid FROM projects p JOIN essays e ON p.projectid = e.projectid JOIN donations d ON p.projectid = d.projectid WHERE p.school_city = 'Chicago';
SELECT title  FROM essays  JOIN projects ON essays.projectid = projects.projectid  WHERE teacher_prefix = 'Dr.' AND students_reached > 300;
SELECT TR.CONSTRAINT_NAME  FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC  JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KU1 ON TC.CONSTRAINT_NAME = KU1.CONSTRAINT_NAME  JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KU2 ON TC.CONSTRAINT_NAME = KU2.CONSTRAINT_NAME  WHERE KU1.TABLE_NAME = 'essays' AND KU1.COLUMN_NAME = 'projectid'  AND KU2.TABLE_NAME = 'donations' AND KU2.COLUMN_NAME = 'projectid'
SELECT e.title FROM essays e JOIN (     SELECT pr.projectid     FROM projects pr     JOIN resources r ON pr.projectid = r.projectid     GROUP BY pr.projectid     ORDER BY SUM(r.item_unit_price * r.item_quantity) DESC     LIMIT 1 ) AS expProjects ON e.projectid = expProjects.projectid;
SELECT COUNT(*)  FROM donations  WHERE donor_city = 'New York' AND is_teacher_acct = 't';
SELECT COUNT(*)  FROM donations  WHERE donor_state = 'NJ' AND for_honoree = 't';
SELECT donation_message  FROM donations  WHERE donationid = 'a84dace1ff716f6f0c7af8ef9090a5d5';
SELECT      resources.project_resource_type  FROM      resources  JOIN      projects ON projects.projectid = resources.projectid  JOIN      vendors ON vendors.vendorid = resources.vendorid  WHERE      vendors.vendor_name = 'Lakeshore Learning Materials';
SELECT item_name FROM resources WHERE vendor_name = 'lakeshore Learning Materials' AND item_quantity = (SELECT MAX(item_quantity) FROM resources WHERE vendor_name = 'lakeshore Learning Materials');
SELECT COUNT(*)  FROM (   SELECT DISTINCT p.projectid    FROM projects p    INNER JOIN essays e ON p.projectid = e.projectid    WHERE p.teacher_prefix = 'Mr.' OR p.teacher_prefix = 'Ms.' OR p.teacher_prefix = 'Mrs.'      AND p.school_state = 'NY'      AND p.teacher_ny_teaching_fellow = 't' ) AS projects_by_ny_teacher INNER JOIN donations d ON d.projectid = projects_by_ny_teacher.projectid WHERE d.donor_city = 'New York';
SELECT COUNT(*)  FROM projects p  JOIN resources r ON p.projectid = r.projectid  JOIN vendors v ON r.vendorid = v.vendorid  WHERE v.vendor_name = 'Lakeshore Learning Materials' AND p.teacher_prefix = 'Dr.';
SELECT      r.vendor_name  FROM      resources AS r JOIN      projects AS p ON r.projectid = p.projectid WHERE      p.poverty_level = 'highest poverty' GROUP BY      r.vendor_name ORDER BY      COUNT(*) DESC LIMIT 1;
SELECT p.schoolid  FROM projects p  JOIN essays e ON p.projectid = e.projectid  JOIN resources r ON p.projectid = r.projectid  WHERE r.vendor_name = 'Lakeshore Learning Materials' AND e.fulfillment_labor_materials = (SELECT MAX(FLM.fulfillment_labor_materials) FROM projects p JOIN essays e ON p.projectid = e.projectid JOIN resources r ON p.projectid = r.projectid WHERE r.vendor_name = 'Lakeshore Learning Materials')
SELECT r.vendor_name  FROM resources AS r  JOIN projects AS p ON r.projectid = p.projectid  WHERE p.total_price_including_optional_support - p.total_price_excluding_optional_support = (SELECT MAX(total_price_including_optional_support - total_price_excluding_optional_support) FROM projects)
SELECT SUM(donation_total)  FROM donations  JOIN projects ON donations.projectid = projects.projectid  WHERE projects.school_city = 'Brooklyn';
SELECT donations.donation_message  FROM donations  JOIN projects ON donations.projectid = projects.projectid  WHERE projects.school_city = 'Brooklyn'  AND projects.school_magnet = 't';
SELECT COUNT(*)  FROM donations  WHERE payment_included_acct_credit = 't'  AND teacher_teach_for_america IS NOT true  AND teacher_ny_teaching_fellow IS NOT true  AND school_year_round = 't';
SELECT SUM(d.donation_total) AS total_donation_amount FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.primary_focus_area = 'Literacy & Language';
SELECT donor_acctid FROM donations WHERE donation_total = (   SELECT MAX(donation_total)   FROM donations d   JOIN projects p ON d.projectid = p.projectid   WHERE p.primary_focus_area = 'Literacy & Language' )
SELECT      r.item_name  FROM      resources AS r JOIN      projects AS p ON r.projectid = p.projectid WHERE      p.primary_focus_area = 'Literacy & Language' AND      r.project_resource_type = 'Supplies' GROUP BY      r.item_name ORDER BY      SUM(r.item_quantity) DESC LIMIT 1;
SELECT item_name, item_unit_price  FROM resources  JOIN projects ON resources.projectid = projects.projectid  WHERE projects.primary_focus_area = 'Literacy & Language'  ORDER BY item_unit_price DESC  LIMIT 1;
SELECT AVG(donation_total)  FROM donations  JOIN projects ON donations.projectid = projects.projectid  WHERE projects.school_city = 'Brooklyn' AND teacher_teach_for_america = 1;
SELECT donor_city FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5';
SELECT is_teacher_acct  FROM donations  WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5';
SELECT      * FROM      teachers  WHERE      teacher_acctid = '42d43fa6f37314365d08692e08680973'      AND (degree = 'PhD' OR degree = 'Doctor');
SELECT COUNT(*)  FROM essays  JOIN projects ON essays.projectid = projects.projectid  WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973'  AND teacher_prefix = 'Mr.' OR teacher_prefix = 'Mrs.' OR teacher_prefix = 'Ms.' OR teacher_prefix = 'Teacher';
SELECT e.title FROM essays e JOIN projects p ON e.projectid = p.projectid WHERE p.school_city = 'Abington';
SELECT r.item_name  FROM resources AS r  JOIN projects AS p ON r.projectid = p.projectid  WHERE p.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e';
SELECT COUNT(DISTINCT T1.schoolid) FROM projects AS T1 JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.payment_included_acct_credit = 'f' AND T1.school_magnet = 't';
SELECT resources.project_resource_type FROM donations JOIN projects ON donations.projectid = projects.projectid JOIN resources ON projects.projectid = resources.projectid WHERE donations.donationid = 'b39547f29dfc25fb13c6e9e8d940dc43';
SELECT      (COUNT(CASE          WHEN p.school_magnet = 't' AND p.project_resource_type = 'Books'         THEN p.projectid     END) * 100.0 / COUNT(p.projectid)) AS percentage FROM      projects p JOIN      resources r ON p.projectid = r.projectid WHERE      p.school_metro = 'Public' AND p.school_charter = 'Magnet';
SELECT COUNT(DISTINCT p.schoolid) FROM projects p JOIN donations d ON p.projectid = d.projectid JOIN resources r ON p.projectid = r.projectid JOIN essays e ON p.projectid = e.projectid JOIN schools s ON p.schoolid = s.schoolid WHERE r.vendor_name = 'ABC School Supply'  AND e.need_statement LIKE '%ABC School Supply%'  AND p.school_magnet = 't';
SELECT COUNT(*)  FROM projects  WHERE donor_acctid = '000eebf28658900e63b538cf8a73afbd'  AND poverty_level = 'highest poverty';
SELECT p.schoolid, e.short_description  FROM projects p  JOIN essays e ON p.projectid = e.projectid  WHERE p.schoolid = '301c9bf0a45d159d162b65a93fddd74e';
SELECT T3.school_city  FROM essays AS T1  JOIN projects AS T2 ON T1.projectid = T2.projectid  JOIN resources AS T3 ON T2.projectid = T3.projectid  WHERE T1.title = 'iMath';
SELECT donations.donationid, donations.payment_method  FROM essays  JOIN projects ON essays.projectid = projects.projectid  JOIN donations ON projects.projectid = donations.projectid  WHERE essays.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e';
SELECT SUM(donation_total)  FROM donations  JOIN projects ON donations.projectid = projects.projectid  WHERE teacher_acctid = '822b7b8768c17456fdce78b65abcc18e';
SELECT COUNT(*)  FROM donations d  JOIN projects p ON d.projectid = p.projectid  WHERE p.schoolid = 'd4af834b1d3fc8061e1ee1b3f1a77b85' AND d.donor_acctid IN (     SELECT acctid      FROM essays e      WHERE e.teacher_acctid IS NOT NULL )
SELECT      (COUNT(CASE WHEN T2.school_city = 'Brooklyn' THEN T1.projectid ELSE NULL END) * 100.0 / COUNT(T1.projectid)) as percentage FROM      donations AS T1 JOIN      projects AS T2 ON T1.projectid = T2.projectid WHERE      T1.is_teacher_acct = 't';
SELECT      COUNT(CASE WHEN students_reached > 30 THEN 1 END) * 100.0 / COUNT(*) AS percentage FROM      projects JOIN      donations ON projects.projectid = donations.projectid WHERE      is_teacher_acct = 't';
SELECT COUNT(*)  FROM projects  WHERE school_city = 'Bethlehem' AND school_metro = 'suburban';
SELECT COUNT(*)  FROM projects  WHERE school_city = 'Los Angeles' AND school_year_round = 't';
SELECT COUNT(*)  FROM projects  WHERE school_state = 'NY'  AND school_city = 'Manhattan'  AND school_magnet = 't';
SELECT COUNT(DISTINCT teacher_acctid) FROM projects WHERE school_county = 'Twin Falls' AND primary_focus_area = 'Math & Science';
SELECT COUNT(*)  FROM essays e  JOIN projects p ON e.projectid = p.projectid  WHERE p.primary_focus_subject = 'Literature & Writing' AND p.teacher_prefix = 'Mr';
SELECT COUNT(DISTINCT p.projectid) FROM projects p JOIN essays e ON p.projectid = e.projectid WHERE p.grade_level = 'Grades 3-5' AND p.school_district = 'Boston Public School District';
SELECT T1.school_city  FROM projects AS T1  JOIN essays AS T2 ON T1.projectid = T2.projectid  WHERE T2.title = 'ABC Read'
SELECT teacher_prefix  FROM projects  WHERE title = 'Creating Memories and Inspiring Dreams';
SELECT      d.donor_acctid, t.teacher_acctid FROM      essays e JOIN      projects p ON e.projectid = p.projectid JOIN      donations d ON p.projectid = d.projectid JOIN      teachers t ON d.donor_acctid = t.account_id WHERE      e.title = 'Calculate, Financial Security For Tomorrow Starts Today!' AND t.is_teacher_acct = 't';
SELECT essays.title  FROM essays  JOIN projects ON essays.projectid = projects.projectid  JOIN donations ON projects.projectid = donations.projectid  WHERE donations.donation_message = 'Donation on behalf of Matt Carpenter because I\'m a strong believer in education';
SELECT COUNT(*)  FROM donations  WHERE projectid IN (     SELECT projectid      FROM essays      WHERE title = 'A Rug For Reaching Readers' );
SELECT SUM(d.donation_to_project + d.donation_optional_support) AS total_donation_amount FROM donations d JOIN projects p ON d.projectid = p.projectid JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Engaging Young Readers with a Leveled Classroom Library';
SELECT      SUM(donation_optional_support)  FROM      donations  JOIN      projects ON donations.projectid = projects.projectid  WHERE      projects.title = 'Armenian Genocide';
SELECT `short_description`  FROM essays  JOIN projects ON essays.projectid = projects.projectid  JOIN donations ON projects.projectid = donations.projectid  WHERE donations.donation_timestamp = '2012/9/6 14:44:29';
SELECT      d.donationid  FROM      essays e JOIN      projects p ON e.projectid = p.projectid JOIN      donations d ON p.projectid = d.projectid WHERE      e.title = 'I Can''t See It...Can You Help Me???';
SELECT `teacher_acctid`  FROM `donations`  WHERE `donation_timestamp` = '2008/7/29 11:38:43';
SELECT projects.schoolid  FROM essays  JOIN projects ON essays.projectid = projects.projectid  WHERE essays.title = 'Virtual Aquarium Needs Help!';
SELECT e.title FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid WHERE d.donation_total = (SELECT MAX(donation_total) FROM donations)
SELECT      (d.donation_optional_support / d.donation_total) * 100 as tip_percentage FROM      donations d JOIN      projects p ON d.projectid = p.projectid WHERE      p.title = 'Awesome Audiobooks Make Avid Readers';
SELECT      (COUNT(CASE WHEN payment_method = 'creditcard' THEN 1 END)       / CAST(TOTAL_COUNT AS REAL)) * 100  FROM      donations  JOIN      projects ON donations.projectid = projects.projectid  WHERE      projects.title = 'Bringing Drama to Life';
SELECT essays.short_description  FROM essays  JOIN projects ON essays.projectid = projects.projectid  WHERE essays.title = 'Future Einsteins Of America';
SELECT need_statement  FROM essays  WHERE title = 'Family History Project';
SELECT COUNT(*)  FROM projects  WHERE school_metro = 'suburban'  AND school_district = 'Livingston Parish School District';
SELECT DISTINCT vendor_name  FROM resources  WHERE item_name = 'Classroom Keepers Management Center';
SELECT DISTINCT project_resource_type  FROM resources  JOIN projects ON resources.projectid = projects.projectid  WHERE vendor_name = 'Sax Arts & Crafts';
SELECT school_county  FROM projects  WHERE school_state = 'NY' AND poverty_level = 'low poverty' GROUP BY school_county  HAVING COUNT(*) > (SELECT COUNT(*) FROM projects WHERE school_state = 'NY' AND poverty_level = 'low poverty' GROUP BY school_county ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 1);
SELECT `school_district`  FROM `projects`  WHERE `title` = 'Future Einsteins of America';
SELECT payment_method FROM donations JOIN essays ON essays.projectid = donations.projectid WHERE essays.title = 'Needed Resource Materials For My Students';
SELECT COUNT(*)  FROM donations  WHERE payment_method = 'creditcard'  AND school_district = 'Memphis City School District';
SELECT DISTINCT p.school_district FROM projects p JOIN resources r ON p.projectid = r.projectid JOIN vendors v ON r.vendorid = v.vendorid WHERE v.vendor_name = 'Barnes and Noble';
SELECT p.school_latitude, p.school_longitude  FROM donations d  JOIN projects p ON d.projectid = p.projectid  JOIN resources r ON p.projectid = r.projectid  JOIN vendors v ON r.vendorid = v.vendorid  WHERE r.item_name = 'R & A Plant Genetics' AND v.vendor_name = 'Benchmark Education';
SELECT      payment_method FROM      donations WHERE      school_state = 'GA';
SELECT      p.school_latitude,      p.school_longitude,      r.project_resource_type  FROM      projects p  JOIN      essays e ON p.projectid = e.projectid  JOIN      resources r ON p.projectid = r.projectid  WHERE      e.title = 'Look, Look, We Need a Nook!';
SELECT donation_message FROM donations JOIN projects ON donations.projectid = projects.projectid WHERE school_district = 'Newark School District' AND school_latitude = 40.735332 AND school_longitude = -74.196014;
SELECT date_posted  FROM essays  WHERE title = 'Lets Share Ideas';
SELECT donation_message  FROM donations  JOIN projects ON donations.projectid = projects.projectid  WHERE title = 'Lets Share Ideas' AND payment_method = 'credit card';
SELECT project_resource_type, COUNT(*) as frequency FROM resources WHERE school_district = 'Los Angeles Unif Sch Dist' GROUP BY project_resource_type ORDER BY frequency DESC LIMIT 1;
SELECT DISTINCT school_city  FROM resources  JOIN projects ON resources.projectid = projects.projectid  WHERE school_district = 'Los Angeles Unified School District'  AND vendor_name = 'Quill.com'  AND project_resource_type = 'supplies';
SELECT      SUM(item_unit_price * item_quantity) AS total_price,     school_latitude, school_longitude,     school_district FROM      resources JOIN      projects ON resources.projectid = projects.projectid JOIN      donations ON projects.projectid = donations.projectid WHERE      vendor_name = 'ABC School Supply' AND     project_resource_type = 'Other' ;
SELECT      T3.school_city,     T2.poverty_level,     SUM(T1.donation_total) as total_donated FROM      essays AS T1 JOIN      projects AS T2 ON T1.projectid = T2.projectid JOIN      donations AS T3 ON T2.projectid = T3.projectid WHERE      T1.title = 'Lets Share Ideas' AND      T3.payment_method = 'paypal' GROUP BY      T3.school_city, T2.poverty_level;
SELECT COUNT(*)  FROM donations  WHERE donor_city = 'Pocatello' AND is_teacher_acct = 'f';
SELECT COUNT(*)  FROM projects  WHERE School_county = 'Suffolk' AND teacher_prefix = 'Dr.';
SELECT SUM(donation_to_project + donation_optional_support)  FROM donations  WHERE payment_method = 'Amazon';
SELECT COUNT(*)  FROM donations  WHERE dollar_amount = '100_and_up' AND for_honoree = 't';
SELECT vendorid FROM resources WHERE item_unit_price <= 15 AND project_resource_type != 'technology';
SELECT COUNT(DISTINCT p.projectid) FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE r.item_quantity BETWEEN 5 AND 10 AND r.vendor_name = 'Quill.com';
SELECT p.projectid, p.schoolid, p.teacher_acctid, p.school_latitude, p.school_longitude, p.title  FROM projects p JOIN essays e ON p.projectid = e.projectid WHERE p.school_district = 'Union Pub School District I-9' AND p.teacher_ny_teaching_fellow = 't';
SELECT DISTINCT school_city  FROM projects  WHERE school_county = 'Los Angeles' AND school_metro = 'Suburban';
SELECT      r.projectid,     v.vendor_name FROM     resources r JOIN     projects p ON r.projectid = p.projectid JOIN     essays e ON p.projectid = e.projectid WHERE     e.resource_type = 'Books' AND     r.project_resource_type = 'Books';
SELECT      (COUNT(CASE WHEN payment_included_campaign_gift_card = 't' THEN 1 END)       OVER ()      / COUNT(*)       OVER ()) * 100 AS percentage FROM      donations WHERE      payment_method = 'no_cash_received'
SELECT      (COUNT(CASE WHEN school_metro = 'suburban' THEN 1 END) / COUNT(*) * 100) AS percentage FROM projects WHERE school_city = 'Santa Barbara';
SELECT      (SUM(CASE WHEN SUBSTR(donation_timestamp, 1, 7) = '2013-03' THEN 1 ELSE 0 END) * 100 / COUNT(*)) AS percentage_payment_methods FROM      donations;
SELECT      AVG(item_unit_price)  FROM      resources  WHERE      vendor_name = 'AKJ Books';
SELECT COUNT(*)  FROM resources r  JOIN projects p ON r.projectid = p.projectid  JOIN essays e ON p.projectid = e.projectid  JOIN donations d ON p.projectid = d.projectid  WHERE p.school_city = 'Brooklyn'  AND p.school_metro = 'urban'  AND d.for_honoree = 't'  AND r.item_name = 'TT992 - Refill Pack for Safety Name Tags';
SELECT COUNT(DISTINCT p.schoolid) FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE p.poverty_level = 'highest' AND d.payment_included_campaign_gift_card = 't';
SELECT school_city FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.dollar_amount = 'under_10' GROUP BY school_city HAVING COUNT(*) > (SELECT COUNT(*) FROM projects GROUP BY school_city HAVING AVG(dollar_amount) < 10)
SELECT title  FROM projects  WHERE school_latitude = 42003718 AND school_longitude = -87668289;
SELECT      p.teacher_ny_teaching_fellow  FROM      projects p  JOIN      essays e ON p.projectid = e.projectid  WHERE      e.title = 'Team More Books!';
SELECT DISTINCT vendor_name  FROM resources  JOIN projects ON resources.projectid = projects.projectid  WHERE primary_focus_area = 'Literature';
SELECT DISTINCT vendor_name  FROM resources  JOIN projects ON resources.projectid = projects.projectid  WHERE projects.grade_level = 'Grades 9-12'
SELECT COUNT(DISTINCT teacher_acctid)  FROM donations WHERE donor_city = 'Chicago' AND is_teacher_acct = 't';
SELECT COUNT(*)  FROM projects  WHERE school_city = 'Rock Hill' AND is_teacher_acct = 't';
SELECT SUM(donation_total)  FROM donations  WHERE donation_included_optional_support = 't'  AND (     SELECT students_reached      FROM projects      WHERE projects.projectid = donations.projectid ) > 300;
SELECT SUM(item_quantity)  FROM resources  JOIN projects ON resources.projectid = projects.projectid  WHERE projects.school_district = 'Onslow Co School District' AND projects.school_metro = 'urban';
SELECT      AVG((SUM(CASE WHEN T1.school_county = 'Fresno' THEN T3.donation_optional_support + T3.donation_to_project ELSE 0 END) / SUM(CASE WHEN T1.school_county = 'Fresno' THEN T3.donation_total ELSE 0 END))) as avg_donations_received FROM      projects AS T1 JOIN      donations AS T3 ON T1.projectid = T3.projectid WHERE      T1.school_county = 'Fresno';
SELECT      (COUNT(CASE WHEN `title` = 'ABC Read' THEN `school_county` ELSE NULL END) * 100 / COUNT(`school_county`)) FROM      essays e JOIN      projects p ON e.projectid = p.projectid
SELECT      AVG(T3.item_quantity) AS avg_resources_per_donation FROM      essays AS T1 JOIN      projects AS T2 ON T1.projectid = T2.projectid JOIN      resources AS T3 ON T2.projectid = T3.projectid JOIN      donations AS T4 ON T2.projectid = T4.projectid WHERE      T4.for_honoree = 't';
SELECT date_posted  FROM projects  WHERE title = 'Photojournalists Want to Exhibit Their Best Works';
SELECT      r.item_name  FROM      resources AS r JOIN      projects AS p ON r.projectid = p.projectid WHERE      p.primary_focus_subject = 'Mathematics' ORDER BY      r.item_unit_price DESC LIMIT 1;
SELECT school_latitude, school_longitude  FROM projects  JOIN essays ON projects.projectid = essays.projectid  WHERE essays.title LIKE '%Viewscreen LCD from Texas Instruments, TI-84 Plus%' OR essays.need_statement LIKE '%Viewscreen LCD from Texas Instruments, TI-84 Plus%' OR essays.short_description LIKE '%Viewscreen LCD from Texas Instruments, TI-84 Plus%' ;
SELECT COUNT(*)  FROM donations  WHERE donationid IN (     SELECT donationid      FROM essays      WHERE title = 'Look, Look, We Need a Nook!' )
SELECT projects.poverty_level FROM projects JOIN donations ON projects.projectid = donations.projectid WHERE donations.donor_zip = '7079';
SELECT vendor_name FROM resources JOIN projects ON resources.projectid = projects.projectid WHERE title = 'Bloody Times';
SELECT      r.item_name,      p.school_zip  FROM      resources AS r  JOIN      projects AS p ON r.projectid = p.projectid  WHERE      r.vendor_name = 'Sax Arts & Crafts';
SELECT school_longitude, school_latitude  FROM projects  JOIN essays ON projects.projectid = essays.projectid  WHERE essays.title = 'Wiping Away Bad Grades';
SELECT      donations.donationid,     projects.primary_focus_subject FROM      donations JOIN      projects ON donations.projectid = projects.projectid WHERE      donations.payment_included_campaign_gift_card = 't';
SELECT      p.title AS 'Project Title',     p.short_description AS 'Short Description' FROM      projects p JOIN      resources r ON p.projectid = r.projectid WHERE      r.project_resource_type = 'Books' ORDER BY      r.item_unit_price DESC LIMIT 1;
SELECT grade_level  FROM essays  WHERE title = 'Too Close for Comfort';
SELECT COUNT(*)  FROM donations  JOIN projects ON donations.projectid = projects.projectid  WHERE donor_zip = '22205';
SELECT      (COUNT(CASE WHEN via_giving_page = 't' THEN donationid ELSE NULL END)       / COUNT(donationid)) * 100 AS percentage_given_via_giving_or_campaign,     primary_focus_area FROM      donations;
SELECT      (COUNT(CASE WHEN resources.project_resource_type = 'Technology' AND resources.vendor_name = 'Best Buy for Business' THEN 1 END) * 100 / COUNT(resources.projectid)) as percentage,     projects.date_posted FROM      resources JOIN      projects ON resources.projectid = projects.projectid WHERE      resources.project_resource_type = 'Technology'     AND resources.vendor_name = 'Best Buy for Business';
SELECT      (SUM(num_sales) WHERE game_platform_id = 50) - (SUM(num_sales) WHERE game_platform_id = 51) FROM      region_sales WHERE      region_id = 1;
SELECT g.game_name  FROM game g  JOIN game_publisher gp ON g.id = gp.game_id  JOIN genre gr ON g.genre_id = gr.id  WHERE gr.genre_name = (SELECT gr2.genre_name FROM game g2                         JOIN game_publisher gp2 ON g2.id = gp2.game_id                         JOIN genre gr2 ON g2.genre_id = gr2.id WHERE g2.game_name = '3D Lemmings')
SELECT COUNT(*)  FROM genre  JOIN game  ON genre.id = game.genre_id  WHERE genre.genre_name = 'Action';
SELECT g.genre_name  FROM genre g  JOIN game_publisher gp ON g.id = gp.genre_id  JOIN game g2 ON gp.game_id = g2.id  WHERE g2.game_name = '3D Lemmings';
SELECT p.publisher_name  FROM publisher p  JOIN game_publisher gp ON p.id = gp.publisher_id  JOIN game g ON gp.game_id = g.id  WHERE g.game_name = '3D Lemmings';
SELECT g.game_name  FROM game g  JOIN game_publisher gp ON g.id = gp.game_id  JOIN publisher p ON gp.publisher_id = p.id  WHERE p.publisher_name = '10TACLE Studios';
SELECT COUNT(*)  FROM (game        JOIN game_publisher ON game.id = game_publisher.game_id        JOIN publisher ON publisher.id = game_publisher.publisher_id        JOIN genre ON genre.id = game.genre_id)  JOIN game_platform ON game_platform.game_publisher_id = game_publisher.id  JOIN region_sales ON region_sales.game_platform_id = game_platform.id  WHERE publisher.publisher_name = '10TACLE Studios'    AND genre.genre_name = 'Puzzle';
SELECT g.game_name  FROM game g  JOIN game_publisher gp ON g.id = gp.game_id  JOIN publisher p ON gp.publisher_id = p.id  JOIN genre ge ON g.genre_id = ge.id  WHERE p.publisher_name = '10TACLE Studios' AND ge.genre_name = 'Puzzle';
SELECT publisher_name, COUNT(game_id) as total_games FROM game_publisher GROUP BY publisher_name ORDER BY total_games DESC LIMIT 1;
SELECT T3.platform_name FROM game_platform AS T1 JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id JOIN game AS T3 ON T2.game_id = T3.id JOIN platform AS T4 ON T4.id = T1.platform_id WHERE T3.game_name = 'Panzer Tactics' AND T4.release_year = 2007;
SELECT T3.release_year FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.game_name = 'Panzer Tactics' AND T4.platform_name = 'DS';
SELECT DISTINCT p.publisher_name  FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN genre gen ON g.genre_id = gen.id WHERE gen.genre_name = 'Puzzle';
SELECT p.publisher_name  FROM publisher p  JOIN game_publisher gp ON p.id = gp.publisher_id  JOIN game g ON gp.game_id = g.id  JOIN genre g_genre ON g.genre_id = g_genre.id  WHERE g_genre.genre_name = 'Puzzle'  GROUP BY p.id  ORDER BY COUNT(gp.id) DESC  LIMIT 1;
SELECT COUNT(DISTINCT publisher_id)  FROM game_publisher  JOIN game ON game_publisher.game_id = game.id  JOIN genre ON game.genre_id = genre.id  WHERE genre.genre_name = 'Puzzle'  GROUP BY game_publisher.publisher_id  HAVING COUNT(game.id) > 3;
SELECT      (COUNT(CASE WHEN g.genre_id IN (SELECT id FROM genre WHERE genre_name = 'Sports') AND gp.publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Nintendo'))      / COUNT(CASE WHEN gp.publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Nintendo'))) * 100 AS percentage FROM      game g JOIN      game_publisher gp ON g.id = gp.game_id
SELECT      AVG(ROUND(SUM(T4.num_sales * 100000) / 4)) AS avg_sales FROM      region_sales T3 JOIN      region T2 ON T3.region_id = T2.id JOIN      game_platform T4 ON T3.game_platform_id = T4.id JOIN      platform T5 ON T4.platform_id = T5.id WHERE      T5.platform_name = 'DS';
SELECT COUNT(game_id)  FROM game_publisher  WHERE publisher_id = 352;
SELECT genre.genre_id  FROM game  JOIN genre_publisher ON game.id = genre_publisher.game_id  JOIN genre ON genre_publisher.genre_id = genre.id  WHERE game.game_name = 'Pro Evolution Soccer 2012';
SELECT id FROM region WHERE region_name = 'Japan';
SELECT game_platform_id  FROM region_sales  WHERE region_id = 2  GROUP BY game_platform_id  ORDER BY SUM(num_sales) DESC  LIMIT 1;
SELECT genre.genre_id  FROM genre  JOIN game ON genre.id = game.genre_id  GROUP BY genre.id  ORDER BY COUNT(game.id) DESC  LIMIT 1;
SELECT game.id  FROM game  WHERE game.game_name = 'Resident Evil Archives: Resident Evil';
SELECT COUNT(*)  FROM game_platform  JOIN platform ON game_platform.platform_id = platform.id  WHERE platform.platform_name = 'X360' AND game_platform.release_year = '2010';
SELECT T4.publisher_name FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN publisher AS T4 ON T2.publisher_id = T4.id WHERE T1.game_name = 'ModNation Racers';
SELECT game_platform_id  FROM region_sales  JOIN region ON region_sales.region_id = region.id  WHERE region_name = 'Japan'  ORDER BY num_sales DESC  LIMIT 1;
SELECT COUNT(DISTINCT T3.platform_id) FROM game_platform AS T3 JOIN game AS T1 ON T1.id = T3.game_id JOIN platform AS T2 ON T2.id = T3.platform_id WHERE T1.game_name = 'Pro Evolution Soccer 2016';
SELECT COUNT(*)  FROM game  JOIN genre ON game.genre_id = genre.id  WHERE genre.genre_name = 'Sports';
SELECT T3.publisher_name  FROM game_publisher AS T1  JOIN publisher AS T3 ON T1.publisher_id = T3.id  JOIN game AS T2 ON T1.game_id = T2.id  WHERE T2.id = '10031'
SELECT p.publisher_name  FROM publisher p  JOIN game_publisher gp ON p.id = gp.publisher_id  GROUP BY p.publisher_name  ORDER BY COUNT(gp.id) DESC  LIMIT 1;
SELECT      (SUM(CASE WHEN g.genre_name = 'Sports' THEN 1 ELSE 0 END) - SUM(CASE WHEN g.genre_name = 'Simulation' THEN 1 ELSE 0 END)) as difference FROM      genre g JOIN      game_publisher gp ON g.id = gp.genre_id JOIN      game g2 ON gp.game_id = g2.id;
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id   JOIN game ON game.id = game_publisher.game_id   WHERE game.game_name = 'Resident Evil: Revelations';
SELECT (num_sales * 100000) AS Sales FROM region_sales JOIN region ON region_sales.region_id = region.id WHERE region_sales.game_platform_id = 3871 AND region.region_name = 'Europe';
SELECT COUNT(*)  FROM game  JOIN game_publisher ON game.id = game_publisher.game_id  JOIN publisher ON game_publisher.publisher_id = publisher.id  WHERE publisher.publisher_name = 'Ascaron Entertainment GmbH';
SELECT platform_name  FROM platform  WHERE id IN (     SELECT game_platform.platform_id      FROM game_platform      ORDER BY release_year ASC      LIMIT 1 );
SELECT      (SUM(CASE WHEN g.genre_name = 'Adventure' THEN 1 ELSE 0 END) * 100.0 / COUNT(g.id)) as percentage FROM      game_publisher gp JOIN      publisher p ON gp.publisher_id = p.id JOIN      game g ON gp.game_id = g.id JOIN      genre ge ON g.genre_id = ge.id WHERE      p.publisher_name = 'Namco Bandai Games';
SELECT      (SUM(CASE WHEN p.publisher_name = 'Atari' THEN 1 ELSE 0 END))::float /      SUM(CASE WHEN p.publisher_name = 'Athena' THEN 1 ELSE 0 END) AS times_more FROM      game_publisher gp JOIN      publisher p ON gp.publisher_id = p.id
SELECT COUNT(*)  FROM game_publisher  JOIN publisher ON game_publisher.publisher_id = publisher.id  WHERE publisher.publisher_name = 'Electronic Arts';
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id   JOIN game ON game.id = game_publisher.game_id   WHERE game.game_name = 'Advent Rising';
SELECT COUNT(*)  FROM (game        JOIN game_publisher ON game.id = game_publisher.game_id)  JOIN publisher ON publisher.id = game_publisher.publisher_id  JOIN genre ON genre.id = game.genre_id  WHERE genre.genre_name = 'Role-Playing' AND publisher.publisher_name = 'Microsoft Game Studios';
SELECT publisher_name, COUNT(*) as num_games_published FROM game_publisher JOIN publisher ON game_publisher.publisher_id = publisher.id GROUP BY publisher_name ORDER BY num_games_published DESC LIMIT 1;
SELECT T3.platform_name FROM game_publisher AS T1 JOIN game AS T2 ON T1.game_id = T2.id JOIN game_platform AS T3 ON T1.id = T3.game_publisher_id JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T2.publisher_id IN (     SELECT T5.publisher_id     FROM publisher AS T5     WHERE T5.publisher_name = 'Codemasters' ) AND T3.release_year = 2004;
SELECT COUNT(*)  FROM game_platform  JOIN platform ON game_platform.platform_id = platform.id  WHERE platform.platform_name = 'PS4' AND game_platform.release_year = 2014;
SELECT DISTINCT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game_platform gp2 ON gp.id = gp2.game_publisher_id WHERE gp2.release_year = (SELECT MIN(release_year) FROM game_platform);
SELECT COUNT(DISTINCT T4.publisher_id)  FROM region AS T1  JOIN region_sales AS T2 ON T1.id = T2.region_id  JOIN game_platform AS T3 ON T2.game_platform_id = T3.id  JOIN platform AS T4 ON T3.platform_id = T4.id  JOIN game_publisher AS T5 ON T3.id = T5.game_platform_id  JOIN publisher AS T6 ON T5.publisher_id = T6.id  WHERE T1.region_name = 'Japan' AND T4.platform_name = 'X360' AND T3.release_year = 2011;
SELECT gp.platform_id  FROM game_platform gp  JOIN region_sales rs ON gp.id = rs.game_platform_id  JOIN region r ON rs.region_id = r.id  WHERE r.region_name = 'Europe'  GROUP BY gp.platform_id  ORDER BY SUM(rs.num_sales) DESC  LIMIT 1;
SELECT      release_year FROM      game_platform JOIN      game_publisher ON game_platform.id = game_publisher.game_platform_id JOIN      platform ON game_platform.platform_id = platform.id WHERE      platform.platform_name = 'PC' GROUP BY      release_year ORDER BY      COUNT(game_id) DESC LIMIT 1;
SELECT DISTINCT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id GROUP BY p.id HAVING COUNT(gp.publisher_id) = 1;
SELECT g.game_name  FROM game g  JOIN game_publisher gp ON g.id = gp.game_id  JOIN publisher p ON gp.publisher_id = p.id  WHERE p.publisher_name = '505 Games';
SELECT genre.id FROM genre JOIN game ON genre.id = game.genre_id WHERE game.game_name = '25 to Life';
SELECT game.id FROM game JOIN genre ON game.genre_id = genre.id WHERE genre.id = 2;
SELECT game_platform.release_year FROM game_platform JOIN game_publisher ON game_publisher.id = game_platform.game_publisher_id JOIN game ON game.id = game_publisher.game_id WHERE game.id BETWEEN 1 AND 10;
SELECT game_publisher_id  FROM game_platform  WHERE platform_id = 15;
SELECT game.id FROM game JOIN game_platform ON game.id = game_platform.game_id WHERE game_platform.release_year BETWEEN 2000 AND 2003;
SELECT (num_sales * 100000) AS Sales FROM region_sales WHERE region_id = 2 AND game_platform_id = 9615;
SELECT DISTINCT p.platform_name FROM platform p JOIN game_platform gp ON p.id = gp.platform_id WHERE gp.release_year = 2016;
SELECT T3.release_year FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T1.game_name = '3DS Classic Collection';
SELECT (AVG(t2.num_sales) * 100000) as avg_sales_in_japan FROM region AS t1 JOIN region_sales AS t2 ON t1.id = t2.region_id JOIN game_platform AS t3 ON t2.game_platform_id = t3.id WHERE t1.region_name = 'Japan';
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id  JOIN game_platform ON game_publisher.id = game_platform.game_publisher_id  WHERE game_platform.release_year BETWEEN 2000 AND 2002;
SELECT g.game_name  FROM game g  JOIN game_publisher gp ON g.id = gp.game_id  JOIN publisher p ON gp.publisher_id = p.id  WHERE p.publisher_name = '3DO';
SELECT COUNT(*)  FROM genre g  JOIN game_platform gp ON g.id = gp.genre_id  WHERE g.genre_name = 'Role-Playing';
SELECT T3.region_name FROM region_sales AS T1 JOIN region AS T3 ON T1.region_id = T3.id WHERE T1.num_sales > 3
SELECT p.publisher_name  FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game_platform gp_pl ON gp.id = gp_pl.game_publisher_id JOIN region_sales rs ON gp_pl.id = rs.game_platform_id WHERE rs.region_id IN (     SELECT id FROM region WHERE region_name = 'North America' ) GROUP BY p.id ORDER BY SUM(rs.num_sales) DESC LIMIT 1;
SELECT game_platform.release_year FROM region_sales JOIN game_platform ON region_sales.game_platform_id = game_platform.id JOIN region ON region_sales.region_id = region.id WHERE region_name = 'North America' AND num_sales = 3.5;
SELECT T3.platform_name FROM game AS T1 JOIN game_platform AS T2 ON T1.id = T2.game_id JOIN platform AS T3 ON T3.id = T2.platform_id WHERE T1.game_name = '15 Days';
SELECT T3.publisher_name  FROM game_publisher AS T1  JOIN publisher AS T3 ON T1.publisher_id = T3.id  JOIN game AS T2 ON T1.game_id = T2.id  WHERE T2.id = 75;
SELECT g.game_name  FROM region r  JOIN region_sales rs ON r.id = rs.region_id  JOIN game_platform gp ON rs.game_platform_id = gp.id  JOIN game g ON gp.game_publisher_id = game_publisher.id  JOIN publisher p ON game_publisher.publisher_id = p.id  WHERE r.region_name = 'Japan'  GROUP BY g.game_name  ORDER BY SUM(rs.num_sales) DESC  LIMIT 1;
SELECT T4.publisher_name FROM region_sales AS T1 JOIN game_platform AS T2 ON T1.game_platform_id = T2.id JOIN region AS T3 ON T3.id = T1.region_id JOIN game_publisher AS T4 ON T4.id = T2.game_publisher_id WHERE T3.region_name = 'Japan' AND T1.num_sales > (SELECT 0.9 * AVG(T5.num_sales) FROM region_sales AS T5 JOIN game_platform AS T6 ON T5.game_platform_id = T6.id JOIN region AS T7 ON T7.id = T5.region_id WHERE T7.region_name = 'Japan')
SELECT      (COUNT(CASE WHEN T4.platform_name = 'PSP' THEN T5.id ELSE NULL END)      OVER () * 100.0 / COUNT(T5.id) OVER ()) AS percentage FROM      genre AS T1 JOIN      game AS T2 ON T1.id = T2.genre_id JOIN      game_publisher AS T3 ON T2.id = T3.game_id JOIN      game_platform AS T4 ON T3.id = T4.game_publisher_id JOIN      platform AS T5 ON T4.platform_id = T5.id WHERE      T4.release_year = 2004;
SELECT COUNT(*)  FROM game_platform  WHERE release_year = 1981;
SELECT genre.id FROM genre JOIN game ON genre.id = game.genre_id WHERE game.game_name = '2Xtreme';
SELECT SUM(region_sales.num_sales * 100000) as total_sales FROM region_sales JOIN game_platform ON region_sales.game_platform_id = game_platform.id JOIN platform ON game_platform.platform_id = platform.id WHERE platform.id = 9658;
SELECT id  FROM publisher  WHERE publisher_name = '1C Company';
SELECT genre.genre_name  FROM genre  WHERE genre.id = 3;
SELECT game.id FROM game JOIN game_platform ON game.id = game_platform.game_id WHERE game_platform.release_year = 2017;
SELECT T3.release_year FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T1.game_name = 'Adventure Island'
SELECT COUNT(*)  FROM genre  JOIN game ON genre.id = game.genre_id  WHERE genre.genre_name = 'Puzzle';
SELECT g.game_name  FROM game g  JOIN game_platform gp ON g.id = gp.game_publisher_id  JOIN platform p ON gp.platform_id = p.id  WHERE p.platform_name = 'SCD';
SELECT COUNT(*)  FROM game  JOIN game_publisher ON game.id = game_publisher.game_id  JOIN publisher ON game_publisher.publisher_id = publisher.id  WHERE publisher.publisher_name = 'Acclaim Entertainment';
SELECT T3.publisher_name FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Chronicles of the Sword';
SELECT SUM(num_sales * 100000) AS total_sales FROM region_sales  JOIN game_platform ON region_sales.game_platform_id = game_platform.id JOIN platform ON game_platform.platform_id = platform.id JOIN region ON region_sales.region_id = region.id WHERE region.name = 'North America' AND platform.name = 'PS4';
SELECT gp.id FROM game_platform gp JOIN region_sales rs ON gp.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Europe' GROUP BY gp.id ORDER BY SUM(rs.num_sales) DESC LIMIT 1;
SELECT game.game_name  FROM game  JOIN game_platform ON game.id = game_platform.game_publisher_id  WHERE game_platform.release_year = 2011;
SELECT COUNT(*)  FROM game_platform  JOIN platform ON game_platform.platform_id = platform.id  WHERE platform.platform_name = 'Wii';
SELECT g.game_name, gp.release_year FROM game g JOIN genre gen ON g.genre_id = gen.id JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform platform ON gp.id = platform.game_publisher_id WHERE gen.genre_name = 'Sports' LIMIT 5;
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id   JOIN game ON game.id = game_publisher.game_id   WHERE game.game_name = '2Xtreme';
SELECT T3.platform_name FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T1.game_name = 'Panzer Tactics';
SELECT      (SUM(CASE WHEN r.region_name = 'North America' THEN rs.num_sales ELSE 0 END)      - AVG(rs.num_sales)) / AVG(rs.num_sales) * 100 AS percent FROM      region r JOIN region_sales rs ON r.id = rs.region_id JOIN      game_platform gp ON rs.game_platform_id = gp.id WHERE      gp.platform_id = 9577;
SELECT game_name FROM game WHERE LENGTH(game_name) = (     SELECT MAX(LENGTH(game_name))     FROM game );
SELECT COUNT(*)  FROM game_platform  WHERE release_year = 2001;
SELECT SUM(region_sales.num_sales) AS total_sales FROM region_sales;
SELECT      (COUNT(gp.game_id) / COUNT(DISTINCT gp.publisher_id)) AS avg_games_per_publisher FROM      game_publisher gp;
SELECT MIN(game_platform.release_year) AS first_release_year FROM game_platform;
SELECT genre.genre_name  FROM genre  WHERE (SELECT COUNT(*) FROM game_publisher WHERE game_publisher.genre_id = genre.id)  IN  (SELECT MIN(cnt) FROM      (SELECT COUNT(*) AS cnt FROM game_publisher GROUP BY genre_id) subquery);
SELECT T3.publisher_name  FROM game AS T1  JOIN game_publisher AS T2 ON T1.id = T2.game_id  JOIN publisher AS T3 ON T2.publisher_id = T3.id  WHERE T1.game_name = 'Prism: Light the Way';
SELECT      g.p.platform_name,     YEAR(gp.release_year) AS release_year,     COUNT(gp.id) AS total_games FROM      game_platform gp JOIN      game g ON gp.game_publisher_id = g.id GROUP BY      g.p.platform_id,     YEAR(gp.release_year) ORDER BY      release_year ASC,     total_games DESC;
SELECT COUNT(*)  FROM region_sales  JOIN region ON region_sales.region_id = region.id  WHERE region.sales = 0  AND region.region_name = 'Europe'
SELECT game.game_name  FROM game  JOIN game_platform ON game.id = game_platform.game_id  WHERE game_platform.release_year = 2006;
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id   JOIN game ON game.id = game_publisher.game_id   WHERE game.game_name = 'Mario vs. Donkey Kong';
SELECT publisher_name, COUNT(game_id) as num_games FROM game_publisher GROUP BY publisher_name ORDER BY num_games DESC LIMIT 1;
SELECT g.game_name  FROM game g  JOIN genre ge ON g.genre_id = ge.id  WHERE ge.genre_name = 'Platform';
SELECT DISTINCT T2.release_year  FROM game_platform AS T2 JOIN platform AS T1 ON T2.platform_id = T1.id WHERE T1.platform_name = 'WiiU'
SELECT g.game_name  FROM game_platform gp JOIN region r ON gp.region_id = r.id  JOIN region_sales rs ON gp.id = rs.game_platform_id   JOIN game g ON gp.game_publisher_id = g.id WHERE r.region_name = 'Japan' ORDER BY rs.num_sales DESC LIMIT 1;
SELECT game.game_name  FROM game  JOIN game_publisher ON game.id = game_publisher.game_id  JOIN publisher ON game_publisher.publisher_id = publisher.id  WHERE publisher.publisher_name = 'Activision';
SELECT COUNT(DISTINCT T4.publisher_id)  FROM game AS T1  JOIN game_publisher AS T2 ON T1.id = T2.game_id  JOIN publisher AS T4 ON T2.publisher_id = T4.id  WHERE T1.game_name LIKE 'Marvel%';
SELECT      (SUM(CASE WHEN g.genre_name = 'sports' THEN 1 ELSE 0 END) * 100.0 / COUNT(g.game_name)) as percentage FROM      game g JOIN      genre ge ON g.genre_id = ge.id;
SELECT      (SUM(CASE WHEN r.region_name = 'North America' THEN r.num_sales ELSE 0 END)      / SUM(CASE WHEN r.region_name = 'Japan' THEN r.num_sales ELSE 0 END)) AS sales_ratio FROM      region_sales rs JOIN      region r ON rs.region_id = r.id;
SELECT release_year FROM game_platform WHERE COUNT(release_year) = (     SELECT MAX(count_releases)     FROM (         SELECT COUNT(release_year) AS count_releases         FROM game_platform         GROUP BY release_year     ) temp_table );
SELECT COUNT(*)  FROM publisher  WHERE publisher_name LIKE '%Interactive%';
SELECT p.platform_name  FROM platform p  JOIN game_platform gp ON p.id = gp.platform_id  JOIN region_sales rs ON gp.id = rs.game_platform_id  JOIN region r ON rs.region_id = r.id  WHERE r.region_name = 'North America'  GROUP BY p.id  ORDER BY SUM(rs.num_sales) DESC  LIMIT 2;
SELECT COUNT(*)  FROM game  JOIN game_publisher ON game.id = game_publisher.game_id  JOIN publisher ON game_publisher.publisher_id = publisher.id  JOIN game_platform ON game_publisher.id = game_platform.game_publisher_id  WHERE publisher.publisher_name = 'BMG Interactive Entertainment'  AND game_platform.release_year = 2012;
SELECT      g.publisher_name FROM      game_platform gp JOIN      game_publisher gp ON gp.id = gp.game_publisher_id JOIN      game g ON g.id = gp_game.id WHERE      gp.release_year = 2007 GROUP BY      g.publisher_name ORDER BY      COUNT(g.publisher_name) DESC LIMIT 1;
SELECT COUNT(DISTINCT T3.publisher_id)  FROM game AS T1  JOIN game_publisher AS T2 ON T1.id = T2.game_id  JOIN publisher AS T3 ON T2.publisher_id = T3.id  WHERE T1.game_name = 'Minecraft';
SELECT p.publisher_name  FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN genre ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Action' GROUP BY p.publisher_name ORDER BY COUNT(g.id) DESC LIMIT 1;
SELECT COUNT(*)  FROM (game        JOIN genre ON game.genre_id = genre.id)        JOIN game_publisher ON game.id = game_publisher.game_id        JOIN publisher ON game_publisher.publisher_id = publisher.id  WHERE genre.genre_name = 'Sports' AND publisher.publisher_name = 'Nintendo';
SELECT genre.genre_name  FROM genre  JOIN game ON genre.id = game.genre_id  WHERE game.game_name = '2 Games in 1: Sonic Advance & ChuChu Rocket!';
SELECT COUNT(*)  FROM region_sales  JOIN region ON region_sales.region_id = region.id  JOIN game_platform ON region_sales.game_platform_id = game_platform.id  JOIN platform ON game_platform.platform_id = platform.id  WHERE region.region_name = 'Other'  AND game_platform.platform_name = 'DS'  AND game_platform.num_sales > 0;
SELECT T1.game_name FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN publisher AS T3 ON T3.id = T2.publisher_id WHERE T3.publisher_name = 'American Softworks';
SELECT COUNT(*)  FROM game  JOIN genre ON game.genre_id = genre.id  WHERE genre.genre_name = 'Strategy';
SELECT p.publisher_name  FROM publisher AS p  JOIN game_publisher AS gp ON p.id = gp.publisher_id  JOIN game AS g ON gp.game_id = g.id  WHERE g.game_name = 'Overwatch';
SELECT genre_name FROM genre WHERE id IN (     SELECT genre_id     FROM game     GROUP BY genre_id     ORDER BY COUNT(game_name) DESC     LIMIT 1 );
SELECT      SUM(total_number_of_games_sold) AS num_games_sold_in_europe FROM      (     SELECT          r.region_name,         gp.game_platform_id,         rs.num_sales * 100000 AS total_number_of_games_sold     FROM          region_sales rs     JOIN          region r ON rs.region_id = r.id     JOIN          game_platform gp ON rs.game_platform_id = gp.id     WHERE          r.region_name = 'Europe' AND gp.id = 26     ) subquery;
SELECT COUNT(*)  FROM game_platform  WHERE release_year = 2001;
SELECT COUNT(*)  FROM game  WHERE game_name LIKE '%Box%';
SELECT game_name FROM region_sales GROUP BY game_platform_id ORDER BY SUM(num_sales) DESC LIMIT 3;
SELECT MIN(release_year)  FROM game_platform;
SELECT DISTINCT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id WHERE p.publisher_name LIKE '%Entertainment%';
SELECT game.game_name  FROM game  JOIN genre ON game.genre_id = genre.id  WHERE genre.genre_name = 'Adventure';
SELECT T1.game_name  FROM game AS T1  JOIN game_publisher AS T2 ON T1.id = T2.game_id  JOIN publisher AS T3 ON T2.publisher_id = T3.id  WHERE T3.publisher_name = 'Pioneer LDC'
SELECT T1.game_name  FROM game AS T1  JOIN game_platform AS T2 ON T1.id = T2.game_publisher_id  JOIN platform AS T3 ON T3.id = T2.platform_id  WHERE T3.platform_name = 'SCD';
SELECT T1.game_name FROM game AS T1 JOIN game_platform AS T2 ON T1.id = T2.game_id JOIN region AS T3 ON T3.id = T2.region_id WHERE T3.region_name = 'Japan';
SELECT DISTINCT g.genre_name FROM genre g JOIN game_publisher gp ON g.id = gp.genre_id JOIN publisher p ON gp.publisher_id = p.id JOIN game_platform gp2 ON gp.id = gp2.game_publisher_id WHERE p.publisher_name = 'Agatsuma Entertainment';
SELECT COUNT(*)  FROM game  WHERE genre_id NOT IN (     SELECT id      FROM genre      WHERE genre_name IN ('Role-Playing', 'Shooter', 'Simulation') );
SELECT      r.region_name,     gp.platform_id,     COUNT(rs.num_sales) as total_sales FROM      region_sales rs JOIN      region r ON rs.region_id = r.id JOIN      game_platform gp ON gp.id = rs.game_platform_id GROUP BY      r.region_name, gp.platform_id ORDER BY      total_sales DESC LIMIT 1;
SELECT p.publisher_name  FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN genre g_genre ON g.genre_id = g_genre.id WHERE g_genre.genre_name = 'Puzzle' GROUP BY p.publisher_name ORDER BY COUNT(p.publisher_name) DESC LIMIT 1;
SELECT game_name FROM (   SELECT game.game_name, SUM(region_sales.num_sales) as total_sales   FROM game   JOIN game_publisher ON game.id = game_publisher.game_id   JOIN region_sales ON game_publisher.id = region_sales.game_platform_id   GROUP BY game.game_name ) AS game_sales WHERE total_sales = (SELECT MIN(total_sales) FROM game_sales)
SELECT T4.publisher_name FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN publisher AS T4 ON T2.publisher_id = T4.id JOIN (     SELECT game_id     FROM game     WHERE game_name = 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3' ) AS T3 ON T1.id = T3.game_id;
SELECT T3.region_name FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN game_platform AS T4 ON T2.id = T4.game_publisher_id JOIN region_sales AS T5 ON T4.id = T5.game_platform_id JOIN region AS T3 ON T5.region_id = T3.id WHERE T1.game_name = 'Pengo'
SELECT game_name FROM game JOIN game_platform ON game.id = game_platform.game_publisher_id WHERE release_year = 2010;
SELECT AVG(T2.num_sales * 100000) AS avg_sales_ps2  FROM game_platform AS T1  JOIN region_sales AS T2 ON T1.id = T2.game_platform_id  JOIN platform AS T3 ON T3.id = T1.platform_id  WHERE T3.platform_name = 'PS2';
SELECT      (SUM(CASE WHEN T4.publisher_name = 'Brash Entertainment' THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.id)) AS percentage FROM      genre AS T1 JOIN      game AS T2 ON T1.id = T2.genre_id JOIN      game_publisher AS T3 ON T2.id = T3.game_id JOIN      publisher AS T4 ON T3.publisher_id = T4.id;
SELECT SUM(num_sales) * 100000 AS total_sold FROM region_sales  WHERE region_id = 1;
SELECT COUNT(*)  FROM game  JOIN genre ON game.genre_id = genre.id  WHERE genre.genre_name = 'Soccer' AND game.game_name LIKE '%FIFA%';
SELECT T3.platform_name FROM region_sales AS T1 JOIN game_platform AS T2 ON T1.game_platform_id = T2.id JOIN platform AS T3 ON T2.platform_id = T3.id WHERE T1.region_id IN (     SELECT id FROM region WHERE region_name = 'Europe' ) GROUP BY T2.id ORDER BY SUM(T1.num_sales) DESC LIMIT 1;
SELECT T3.publisher_name FROM game_platform AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_publisher_id JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.release_year = 2002 AND T2.game_id IN (SELECT id FROM game WHERE game_name = '2002 FIFA World Cup');
SELECT p.platform_name  FROM platform p  JOIN game_platform gp ON p.id = gp.platform_id  JOIN game g ON gp.game_publisher_id = g.id  JOIN game_publisher gp2 ON g.id = gp2.game_id  JOIN publisher pub ON gp2.publisher_id = pub.id  WHERE g.game_name = '3Xtreme';
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id   JOIN game ON game_publisher.game_id = game.id   WHERE game.game_name = '2010 FIFA World Cup South Africa';
SELECT region_name FROM region WHERE region.id = (     SELECT region_id      FROM region_sales     GROUP BY region_id     ORDER BY SUM(num_sales) DESC     LIMIT 1 );
SELECT      SUM(T3.num_sales) * 100000 AS total_sold  FROM      game_platform AS T1  JOIN      region AS T2 ON T1.region_id = T2.id  JOIN      region_sales AS T3 ON T1.game_platform_id = T3.game_platform_id  JOIN      platform AS T4 ON T1.platform_id = T4.id  JOIN      game_publisher AS T5 ON T1.game_publisher_id = T5.id  JOIN      publisher AS T6 ON T5.publisher_id = T6.id  JOIN      game AS T7 ON T5.id = T7.game_id  JOIN      genre AS T8 ON T7.genre_id = T8.id  WHERE      T4.platform_name = 'PS3'  AND      T2.region_name = 'Japan';
SELECT T1.game_name FROM game G AS T1 JOIN game_platform GP ON T1.id = GP.game_publisher_id WHERE GP.release_year = 2007;
SELECT COUNT(*)  FROM game  JOIN game_publisher ON game.id = game_publisher.game_id  JOIN publisher ON game_publisher.publisher_id = publisher.id  WHERE publisher.publisher_name = 'Activision';
SELECT gp.release_year  FROM region_sales rs  JOIN game_platform gp ON rs.game_platform_id = gp.id  JOIN region r ON rs.region_id = r.id  WHERE r.region_name = 'Japan' AND rs.num_sales > 200000;
SELECT COUNT(*)  FROM game_platform  JOIN platform ON game_platform.platform_id = platform.id  WHERE game_platform.release_year = 2010 AND platform.platform_name = 'PS3';
SELECT publisher_name FROM game_publisher GROUP BY publisher_name ORDER BY COUNT(game_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM game  JOIN genre ON game.genre_id = genre.id  WHERE genre.genre_name = 'shooter';
SELECT      (SUM(CASE WHEN p.platform_name = 'PS4' THEN 1 ELSE 0 END) * 100.0 / COUNT(gp.id)) AS percentage FROM      game_platform gp JOIN      platform p ON gp.platform_id = p.id WHERE      gp.release_year = 2014;
SELECT SUM(region_sales.num_sales)  FROM region_sales  JOIN game_platform ON region_sales.game_platform_id = game_platform.id  JOIN region ON region_sales.region_id = region.id  WHERE region.region_name = 'ID 4';
SELECT game_platform_id  FROM region_sales  WHERE region_id = 1;
SELECT      (SUM(region_sales.num_sales WHERE region_sales.region_id = 2)) -      (SUM(region_sales.num_sales WHERE region_sales.region_id = 3)) AS sales_difference;
SELECT DISTINCT gp.platform_id FROM game_platform AS gp WHERE gp.release_year = 2007;
SELECT game_publisher_id  FROM game_platform  WHERE id = 16;
SELECT COUNT(DISTINCT gp.id)  FROM game_platform gp  WHERE gp.release_year = 1984;
SELECT DISTINCT gp.platform_id FROM game_platform gp JOIN region_sales rs ON gp.id = rs.game_platform_id WHERE rs.region_id = 3;
SELECT T3.game_name, SUM(T5.num_sales) AS sales FROM game_platform AS T4 JOIN region AS T5 ON T4.region_id = T5.id JOIN game AS T3 ON T4.game_publisher_id = T3.id WHERE T5.region_name = 'Japan'
SELECT COUNT(DISTINCT gp.id)  FROM game_publisher gp JOIN game_platform gp_pl ON gp.id = gp_pl.game_publisher_id JOIN platform p ON p.id = gp_pl.platform_id  WHERE p.platform_name = 'X360';
SELECT DISTINCT p.platform_name FROM platform p JOIN game_platform gp ON p.id = gp.platform_id WHERE gp.release_year = 2000;
SELECT      (SUM(CASE WHEN p.platform_name = 'PS3' THEN 1 ELSE 0 END) -       SUM(CASE WHEN p.platform_name = 'X360' THEN 1 ELSE 0 END)) as difference FROM      game_platform gp JOIN      platform p ON gp.platform_id = p.id JOIN      game_publisher gpb ON gp.id = gpb.game_publisher_id JOIN      publisher pub ON gpb.publisher_id = pub.id;
SELECT game.id FROM game JOIN game_publisher ON game.id = game_publisher.game_id JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE publisher.publisher_name = 'Bethesda Softworks';
SELECT COUNT(*)  FROM game_publisher  JOIN publisher ON game_publisher.publisher_id = publisher.id  WHERE publisher_name IN ('Capcom', 'Sony Computer Entertainment')
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id   JOIN game ON game.id = game_publisher.game_id   WHERE game.game_name = 'Grand Theft Auto V';
SELECT game.game_name  FROM game  JOIN genre ON game.genre_id = genre.id  WHERE genre.genre_name = 'Racing';
SELECT COUNT(*)  FROM genre  JOIN game  ON genre.id = game.genre_id  WHERE genre.genre_name = 'Fighting';
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id  JOIN game ON game_publisher.game_id = game.id  WHERE game_publisher.publisher_id = 464;
SELECT T3.platform_name FROM game AS T1 JOIN game_platform AS T2 ON T1.id = T2.game_id JOIN platform AS T3 ON T3.id = T2.platform_id WHERE T1.game_name = 'Final Fantasy XIII-2';
SELECT SUM(region_sales.num_sales)  FROM region_sales  JOIN game_platform ON region_sales.game_platform_id = game_platform.id  WHERE game_platform.release_year = 2000;
SELECT      (SUM(CASE WHEN game_platform.release_year = 2000 THEN region_sales.num_sales ELSE 0 END) -      SUM(CASE WHEN game_platform.release_year = 1990 THEN region_sales.num_sales ELSE 0 END)) AS sales_difference FROM      region_sales JOIN      game_platform ON region_sales.game_platform_id = game_platform.id;
SELECT DISTINCT gp.platform_id FROM game_platform gp WHERE gp.release_year = 2006;
SELECT AVG(region_sales.num_sales * 100000) as average_sales FROM region_sales JOIN game_platform ON region_sales.game_platform_id = game_platform.id JOIN region ON region_sales.region_id = region.id WHERE region.region_name = 3;
SELECT release_year  FROM game_platform  WHERE id = 19  AND game_publisher_id = 6657;
SELECT SUM(region_sales.num_sales) * 100000 AS total_sales_in_all_regions FROM region_sales WHERE region_sales.game_platform_id = 66;
SELECT game_name FROM game WHERE id = 44;
SELECT g.game_name  FROM game g  JOIN game_platform gp ON g.id = gp.game_publisher_id  JOIN platform p ON gp.platform_id = p.id  WHERE p.platform_name = 'Wii';
SELECT game_name FROM game JOIN game_platform ON game.id = game_platform.game_publisher_id WHERE game_platform.release_year = 2015;
SELECT COUNT(*)  FROM game  JOIN genre ON game.genre_id = genre.id  JOIN game_platform ON game.id = game_platform.game_publisher_id  WHERE genre.genre_name = 'Adventure' AND game_platform.release_year = 2005;
SELECT T3.publisher_name FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Adventure Time: Explore the Dungeon Because I Don't Know!';
SELECT gp.id, r.region_name  FROM game_platform gp  JOIN region_sales rs ON gp.id = rs.game_platform_id  JOIN region r ON rs.region_id = r.id  WHERE rs.num_sales < 0.2;
SELECT T3.game_name FROM game_platform AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_publisher_id JOIN game AS T3 ON T3.id = T1.game_id JOIN publisher AS T4 ON T4.id = T2.publisher_id WHERE T4.publisher_name = '505 Games' AND T1.release_year = 2006;
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id  JOIN game ON game.id = game_publisher.game_id  WHERE game.id = 119;
SELECT gp.game_id  FROM game_publisher gp  JOIN publisher p ON gp.publisher_id = p.id  WHERE p.publisher_name = 'Abylight';
SELECT region_name FROM region WHERE region.id IN (     SELECT region_id     FROM region_sales     WHERE num_sales = (         SELECT MIN(num_sales)         FROM region_sales rsi         JOIN game_platform gp ON rsi.game_platform_id = gp.id         JOIN game_publisher gpj ON gp.game_publisher_id = gpj.id         JOIN game g ON gpj.game_id = g.id     ) );
SELECT game.game_name  FROM game  JOIN genre ON game.genre_id = genre.id  WHERE genre.genre_name = 'Strategy';
SELECT T4.platform_name  FROM game_platform AS T1  JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id  JOIN game AS T3 ON T2.game_id = T3.id  JOIN platform AS T4 ON T4.id = T1.platform_id  WHERE T3.id = 178;
SELECT genre.genre_name  FROM genre  JOIN game ON genre.id = game.genre_id  WHERE game.game_name IN ('Airlock', 'Airline Tycoon', 'Airblade');
SELECT SUM(T2.num_sales) * 100000 AS total_sales_in_North_America FROM region_sales AS T1 JOIN region AS T2 ON T1.region_id = T2.id JOIN game_platform AS T3 ON T1.game_platform_id = T3.id WHERE T2.region_name = 'North America';
SELECT DISTINCT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game_platform gp2 ON gp.game_id = gp2.game_publisher_id JOIN region_sales rs ON gp2.id = rs.game_platform_id WHERE rs.num_sales < 0.1 LIMIT 5;
SELECT DISTINCT gp.platform_id FROM game g JOIN game_platform gp ON g.id = gp.game_publisher_id JOIN game_publisher gp2 ON g.id = gp2.game_id WHERE g.game_name = 'Airborne Troops: Countdown to D-Day';
SELECT COUNT(*)  FROM game_platform  JOIN platform ON game_platform.platform_id = platform.id  WHERE platform.platform_name = 'PSP' AND game_platform.release_year = 2004;
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id   JOIN game ON game_publisher.game_id = game.id   WHERE game.game_name = '999: Nine Hours, Nine Persons, Nine Doors';
SELECT release_year  FROM game_platform  WHERE id = (SELECT id              FROM game              WHERE id = 156);
SELECT      (SUM(T1.platform_id = (SELECT id FROM platform WHERE platform_name = 'SNES')) - SUM(T1.platform_id = (SELECT id FROM platform WHERE platform_name = 'DS'))) AS difference FROM      game_platform AS T1 JOIN      game_publisher AS T2 ON T1.game_publisher_id = T2.id JOIN      publisher AS T3 ON T2.publisher_id = T3.id WHERE      T3.publisher_name = 'Culture Brain';
SELECT      (COUNT(CASE WHEN T4.release_year = 2007 THEN T1.id ELSE NULL END) * 100.0 / COUNT(T1.id)) AS percentage FROM      genre AS T2 JOIN      game AS T3 ON T2.id = T3.genre_id JOIN      game_platform AS T4 ON T3.id = T4.game_publisher_id JOIN      platform AS T5 ON T4.platform_id = T5.id WHERE      T5.platform_name = 'Wii';
SELECT gp.platform_id FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Europe' AND rs.num_sales < (SELECT AVG(num_sales) * 0.3 FROM region_sales WHERE region_id = r.id)
SELECT COUNT(DISTINCT pa.AuthorId) FROM PaperAuthor pa JOIN Author a ON pa.AuthorId = a.Id WHERE a.Affiliation = 'University of California Berkeley';
SELECT T3.Title, T4.Keyword  FROM Paper AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId  JOIN Author AS T4 ON T2.AuthorId = T4.Id  JOIN Paper AS T3 ON T1.Id = T3.Id  WHERE T3.Title = 'Stitching videos streamed by mobile phones in real-time';
SELECT P.Title  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON A.Id = PA.AuthorId  JOIN Paper AS PJ ON PJ.Id = P.Id  JOIN Journal AS J ON J.Id = PJ.JournalId  WHERE J.FullName = 'Concepts in Magnetic Resonance Part A' AND P.Year = 2008;
SELECT COUNT(*)  FROM Paper  JOIN Journal ON Paper.JournalId = Journal.Id  WHERE Journal.FullName = 'Concepts in Magnetic Resonance Part A'
SELECT J.FullName, J.HomePage  FROM Journal AS J  JOIN Paper AS P ON J.Id = P.JournalId  WHERE P.Title = 'Area Effects in Cepaea';
SELECT COUNT(*)  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  JOIN Journal ON Journal.Id = Paper.JournalId  WHERE Journal.FullName = 'Molecular Brain' AND Paper.Year = 2011;
SELECT COUNT(*)  FROM Paper  JOIN Journal ON Paper.JournalId = Journal.Id  WHERE Journal.ShortName = 'Mol Brain' AND Paper.Year = 2011;
SELECT COUNT(DISTINCT pa.AuthorId) FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON a.Id = pa.AuthorId WHERE p.Title = 'Equation Solving in Geometrical Theories';
SELECT T3.Name  FROM Paper AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId  JOIN Author AS T3 ON T3.Id = T2.AuthorId  WHERE T1.Title = 'Area Effects in Cepaea';
SELECT COUNT(*)  FROM PaperAuthor  JOIN Paper ON PaperAuthor.PaperId = Paper.Id  JOIN Paper AS OtherPaper ON Paper.Title = 'FIBER: A Generalized Framework for Auto-tuning Software'  JOIN PaperAuthor AS OtherPaperAuthor ON OtherPaper.Id = OtherPaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  JOIN Author AS OtherAuthor ON OtherPaper.Id = OtherPaperAuthor.PaperId  WHERE Paper.Title = 'Stitching videos streamed by mobile phones in real-time'  AND Author.Affiliation = 'Cairo Microsoft Innovation Lab'  OR OtherAuthor.Affiliation = 'Cairo Microsoft Innovation Lab';
SELECT Paper.Title  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  WHERE PaperAuthor.Name = 'Klaus Zimmermann';
SELECT A.Name FROM Paper AS P JOIN PaperAuthor AS PA ON P.Id = PA.PaperId JOIN Author AS A ON PA.AuthorId = A.Id JOIN Paper AS PK ON P.Id = PK.Id AND P.Title = 'Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web' JOIN PaperAuthor AS PAk ON PK.Id = PAk.PaperId JOIN Author AS Ak ON PAk.AuthorId = Ak.Id WHERE Ak.Affiliation = 'National Taiwan University Department of Computer Science and Information Engineering Taiwan';
SELECT P.Title  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  WHERE P.Year = 1995 AND PA.Name = 'Thomas Wiegand';
SELECT COUNT(*)  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  WHERE Author.Name = 'Thomas Wiegand' AND Paper.Year = 1995;
SELECT CAST(COUNT(p.Id) AS REAL) / 4 FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE j.FullName = 'Molecular Brain' AND p.Year BETWEEN 2008 AND 2011;
SELECT      (COUNT(CASE WHEN J.FullName = 'Cases Journal' THEN 1 END) - COUNT(CASE WHEN J.FullName = 'Molecular Brain' THEN 1 END)) * 100 / COUNT(CASE WHEN J.FullName = 'Molecular Brain' THEN 1 END) as percentage_diff FROM      Journal J JOIN      Paper P ON J.Id = P.JournalId;
SELECT COUNT(*)  FROM Journal  WHERE FullName LIKE '%computing%'
SELECT PA.PaperId, PA.AuthorId FROM PaperAuthor AS PA JOIN Author AS A ON A.Id = PA.AuthorId WHERE A.Affiliation = 'Cairo Microsoft Innovation Lab';
SELECT c.ShortName, c.FullName  FROM Conference c  WHERE c.HomePage = 'http://www.informatik.uni-trier.de/~ley/db/conf/ices/index.html';
SELECT AuthorId FROM PaperAuthor WHERE Name = 'Peter';
SELECT DISTINCT Paper.Title, Conference.ShortName  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  JOIN Conference ON Conference.Id = Paper.ConferenceId  WHERE Conference.Id BETWEEN 160 AND 170;
SELECT P.Title, J.HomePage  FROM Paper AS P  JOIN Journal AS J  ON P.JournalId = J.Id  WHERE P.Year = (SELECT MAX(Year) FROM Paper)
SELECT P.Title, C.ShortName  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON A.Id = PA.AuthorId  JOIN Paper AS PC ON P.ConferenceId = PC.Id  JOIN Conference AS C ON C.Id = PC.Id  WHERE A.Name LIKE 'Philip%' AND P.Year = 1999;
SELECT COUNT(p.Id), c.HomePage  FROM Paper p  JOIN Conference c ON p.ConferenceId = c.Id  WHERE c.Id = 187 AND p.Year BETWEEN 1990 AND 2000;
SELECT P.Title  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON A.Id = PA.AuthorId  WHERE P.Year = 2003 AND A.Affiliation = 'Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications';
SELECT DISTINCT A.Name, J.ShortName  FROM PaperAuthor PA JOIN Author A ON PA.AuthorId = A.Id JOIN Paper P ON PA.PaperId = P.Id JOIN Journal J ON P.JournalId = J.Id WHERE P.Title LIKE '%chemiluminescence%'  AND J.Id BETWEEN 245 AND 250;
SELECT DISTINCT PA.Name, PA.Affiliation  FROM PaperAuthor PA  JOIN Paper P ON PA.PaperId = P.Id  JOIN PaperAuthor PA2 ON P.Id = PA2.PaperId  JOIN Author A ON PA2.AuthorId = A.Id  WHERE P.ConferenceId = 0 AND P.JournalId < 100;
SELECT P.Title, PA.AuthorId  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Conference AS C ON P.ConferenceId = C.Id  WHERE C.Id < 100 AND P.Year = 2006;
SELECT DISTINCT Paper.Id  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Conference ON Paper.ConferenceId = Conference.Id  WHERE Conference.HomePage LIKE 'http://www.informatik.uni-trier.de/~ley/db/conf/%';
SELECT J.HomePage, PA.AuthorId  FROM Journal AS J JOIN Paper AS P ON J.Id = P.JournalId JOIN PaperAuthor AS PA ON P.Id = PA.PaperId WHERE P.Title LIKE '%SOCIAL%' AND P.Year BETWEEN 2000 AND 2005;
SELECT A.Id, A.Affiliation  FROM Author A  JOIN PaperAuthor PA ON A.Id = PA.AuthorId  JOIN Paper P ON PA.PaperId = P.Id  WHERE P.JournalId = 0 AND P.Year = 2009;
SELECT      COUNT(CASE WHEN ConferenceId = 0 THEN 1 ELSE NULL END) * 100.0 / COUNT(*) AS percentage FROM      Paper JOIN      Journal ON Paper.JournalId = Journal.Id WHERE      JournalId BETWEEN 200 AND 300 AND ShortName LIKE 'A%'
SELECT      COUNT(CASE WHEN Paper.Year = 2001 THEN Paper.Id END) * 100.0 / COUNT(Paper.Id) AS PaperPublicationRate2001 FROM      Paper WHERE      Paper.Year BETWEEN 2001 AND 2010;
SELECT FullName, HomePage  FROM Conference  WHERE ShortName = 'ICWE';
SELECT      Affiliation FROM      Author WHERE      Affiliation BETWEEN 'Stanford University' AND 'Massachusetts Institute of Technology' GROUP BY      Affiliation ORDER BY      COUNT(Id) DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN Affiliation IS NOT NULL THEN 1 END) :: REAL) /      (COUNT(CASE WHEN Affiliation IS NULL THEN 1 END) :: REAL) AS Ratio FROM      Authors;
SELECT A.Id, A.Name  FROM Author A  JOIN PaperAuthor PA ON A.Id = PA.AuthorId  WHERE A.Affiliation = 'University of Oulu';
SELECT      Paper.Title,      Author.Affiliation  FROM      Paper  JOIN      PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN      Author ON Author.Id = PaperAuthor.AuthorId  WHERE      PaperConferenceId = 0 AND      PaperJournalId = 0 AND      PaperAuthor.Name = 'Roger J. Marshall';
SELECT P.Id, P.Title, P.Year, J.FullName  FROM Paper AS P JOIN PaperAuthor AS PA ON P.Id = PA.PaperId JOIN Author AS A ON A.Id = PA.AuthorId JOIN Paper AS P2 ON P2.Id = PA.PaperId JOIN CountSubQuery AS C ON C.Count = COUNT(P2.Id) JOIN Journal AS J ON J.Id = P.JournalId WHERE C.SubQuery := (   SELECT MAX(Count)    FROM (     SELECT COUNT(P.Id) AS Count      FROM Paper AS P     JOIN PaperAuthor AS PA ON P.Id = PA.PaperId     GROUP BY PA.AuthorId   ) )
SELECT      Paper.Title,      Paper.Year,      Conference.ShortName,      GROUP_CONCAT(PaperAuthor.Name) FROM      Paper JOIN      PaperAuthor ON Paper.Id = PaperAuthor.PaperId JOIN      Conference ON Paper.ConferenceId = Conference.Id WHERE      Paper.Id = 15 GROUP BY      Paper.Id;
SELECT P.Id, P.Year, P.Keyword  FROM PaperAuthor PA  JOIN Author A ON PA.AuthorId = A.Id  JOIN Paper P ON PA.PaperId = P.Id  WHERE A.Id < 100 AND A.Affiliation = 'Zurich, ETH'
SELECT A.Name, A.Id  FROM Author AS A  JOIN PaperAuthor AS PA ON A.Id = PA.AuthorId  JOIN Paper AS P ON PA.PaperId = P.Id  JOIN PaperAuthor AS PA2 ON P.Id = PA2.PaperId  JOIN Author AS A2 ON PA2.AuthorId = A2.Id  WHERE P.Title = 'Inspection resistant memory: Architectural support for security from physical examination'  AND A2.Affiliation = 'Microsoft Research, USA';
SELECT      A.Name,      A.Affiliation,      J.ShortName,      J.FullName FROM      PaperAuthor PA JOIN      Author A ON A.Id = PA.AuthorId JOIN      Paper P ON P.Id = PA.PaperId JOIN      (SELECT PaperId FROM Paper WHERE Title = 'Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats') AS MatchingPaper ON MatchingPaper.PaperId = P.Id JOIN      (SELECT Id, ShortName, FullName FROM Journal) AS J ON J.Id = P.JournalId;
SELECT P.Title, J.Id  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON PA.AuthorId = A.Id  JOIN Conference AS C ON P.ConferenceId = C.Id  JOIN Journal AS J ON P.JournalId = J.Id  WHERE C.FullName = 'International Symposium of Robotics Research';
SELECT P.Title, P.Year, P.Keyword  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON A.Id = PA.AuthorId  WHERE A.Id = 661002 AND A.Affiliation = 'Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA';
SELECT      (COUNT(p.Id) WHERE p.Year = 2000) - (COUNT(p.Id) WHERE p.Year = 2010) as Difference FROM      Paper p JOIN      Journal j ON p.JournalId = j.Id WHERE      j.ShortName = 'IWC';
SELECT J.Id AS JournalId, J.ShortName, J.FullName FROM Journal AS J JOIN Paper AS P ON J.Id = P.JournalId WHERE P.Year = 2013 LIMIT 4;
SELECT      p.Title,      pa.Name,      pa.Affiliation FROM      Paper p JOIN      PaperAuthor pa ON p.Id = pa.PaperId JOIN      Conference c ON c.Id = p.ConferenceId WHERE      c.ShortName = 'MICRO' AND      p.Year BETWEEN '1971' AND '1980' UNION ALL (     SELECT          NULL,         NULL,         NULL      FROM          dual ) UNION ALL SELECT      CONCAT('Average needed papers: ', ROUND((COUNT(p.Id WHERE Year BETWEEN '1991' AND '2000') - COUNT(p.Id WHERE Year BETWEEN '1971' AND '1980'))/10)) AS AverageNeededPapers FROM      Paper p JOIN      Conference c ON c.Id = p.ConferenceId WHERE      c.ShortName = 'MICRO';
SELECT COUNT(*)  FROM Paper  WHERE Year = 0;
SELECT c.FullName FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON pa.AuthorId = a.Id JOIN PaperAuthor paConf ON a.Id = paConf.AuthorId JOIN Paper pConf ON paConf.PaperId = pConf.Id JOIN Conference c ON pConf.ConferenceId = c.Id WHERE p.Title = 'The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure';
SELECT T3.HomePage  FROM Paper AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId  JOIN Author AS T4 ON T4.Id = T2.AuthorId  JOIN Paper AS T5 ON T5.Id = T1.PaperId  JOIN Conference AS T6 ON T6.Id = T5.ConferenceId  WHERE T5.Title = 'Energy-efficiency bounds for noise-tolerant dynamic circuits'
SELECT T3.Name, T3.Affiliation  FROM PaperAuthor AS T1  JOIN Author AS T3 ON T1.AuthorId = T3.Id  JOIN Paper AS T2 ON T2.Id = T1.PaperId  WHERE T2.Id BETWEEN 100 AND 106;
SELECT DISTINCT c.ShortName  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  JOIN Author a ON pa.AuthorId = a.Id  JOIN PaperAuthor pa2 ON p.Id = pa2.PaperId  JOIN Paper p2 ON pa2.PaperId = p2.Id  JOIN Conference c ON p2.ConferenceId = c.Id  WHERE p.Year = 2009  LIMIT 10;
SELECT J.HomePage  FROM Journal AS J  JOIN Paper AS P ON J.Id = P.JournalId  WHERE P.Title = '364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results';
SELECT P.Title FROM Paper AS P JOIN PaperAuthor AS PA ON P.Id = PA.PaperId JOIN Author AS A ON A.Id = PA.AuthorId JOIN Paper ON P.Id = Paper.Id JOIN Conference ON Conference.Id = Paper.ConferenceId WHERE Conference.FullName = 'International Conference on Internet Computing';
SELECT A.Name FROM Paper P JOIN PaperAuthor PA ON P.Id = PA.PaperId JOIN Author A ON PA.AuthorId = A.Id WHERE P.Year = '2005' AND P.Keyword = 'LOAD; IDE; SNP; haplotype; association studies';
SELECT COUNT(DISTINCT pa.AuthorId) FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON a.Id = pa.AuthorId WHERE p.Title LIKE '%145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT:%';
SELECT T3.Title  FROM PaperAuthor AS T1  JOIN Author AS T2 ON T1.AuthorId = T2.Id  JOIN Paper AS T3 ON T3.Id = T1.PaperId  WHERE T2.Name = 'Jei Keon Chae'  AND T4.Name = 'Jei Keon Chae';
SELECT      c.FullName AS ConferenceName,     j.FullName AS JournalName,     GROUP_CONCAT(pa.Name) AS CoAuthors,     p.Title AS PaperTitle FROM      PaperAuthor pa JOIN      Author a ON pa.AuthorId = a.Id JOIN      Paper p ON p.Id = pa.PaperId JOIN      Conference c ON c.Id = p.ConferenceId JOIN      Journal j ON j.Id = p.JournalId WHERE      a.Name = 'Shueh-Lin Yau' GROUP BY      c.Id, j.Id, p.Id;
SELECT COUNT(Paper.Id)  FROM Paper  WHERE Paper.Year BETWEEN '1990' AND '2000';
SELECT DISTINCT A.Name  FROM Author A  JOIN PaperAuthor PA ON A.Id = PA.AuthorId  WHERE A.Affiliation = 'Birkbeck University of London';
SELECT c.ShortName  FROM Conference c  WHERE c.FullName LIKE 'International Symposium%'
SELECT COUNT(*)  FROM Journal  WHERE HomePage = '';
SELECT DISTINCT A.Name  FROM PaperAuthor PA  JOIN Paper P ON PA.PaperId = P.Id  JOIN Author A ON PA.AuthorId = A.Id  WHERE P.Year = 0;
SELECT DISTINCT A.Affiliation  FROM Author AS A  JOIN PaperAuthor AS PA ON A.Id = PA.AuthorId  JOIN Paper AS P ON PA.PaperId = P.Id  WHERE P.Keyword = 'Quantum Physics';
SELECT DISTINCT p.Title  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  JOIN Author a ON a.Id = pa.AuthorId  JOIN Conference c ON p.ConferenceId = c.Id  WHERE c.FullName IS NOT NULL  AND p.JournalId = 0  AND p.Year > 0  AND p.ConferenceId != 0;
SELECT DISTINCT p.Title  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  JOIN Author a ON a.Id = pa.AuthorId  LEFT JOIN Conference c ON c.Id = p.ConferenceId  WHERE c.HomePage IS NULL OR c.HomePage = ''
SELECT DISTINCT J.FullName  FROM Journal J  LEFT JOIN Paper P ON J.Id = P.JournalId  WHERE J.ShortName IS NULL OR J.ShortName = ''
SELECT A.Affiliation  FROM Author A  JOIN PaperAuthor PA ON A.Id = PA.AuthorId  JOIN Paper P ON PA.PaperId = P.Id  JOIN Journal J ON P.JournalId = J.Id  WHERE J.FullName = 'A combined search for the standard model Higgs boson at s = 1.96 Â TeV'
SELECT DISTINCT J.FullName  FROM Journal AS J  JOIN Paper AS P ON J.Id = P.JournalId  WHERE P.Year = 2001;
SELECT T3.Name, T3.Affiliation  FROM Paper AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId  JOIN Author AS T3 ON T3.Id = T2.AuthorId  WHERE T1.Title = 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker';
SELECT COUNT(DISTINCT Paper.Id) AS NumberOfPapers, Paper.Year FROM Paper JOIN Conference ON Paper.ConferenceId = Conference.Id WHERE Conference.FullName = 'International Conference on Database Theory' AND Paper.Year != 0;
SELECT J.FullName  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  JOIN Author a ON pa.AuthorId = a.Id  JOIN Paper p2 ON p2.Title = p.Title AND p2.ConferenceId = p.ConferenceId AND p2.JournalId = p.JournalId  JOIN Journal j ON p2.JournalId = j.Id  WHERE p.Keyword = 'Sustainability';
SELECT DISTINCT A.Name  FROM Author A  JOIN PaperAuthor PA ON A.Id = PA.AuthorId  JOIN Paper P ON PA.PaperId = P.Id  JOIN Conference C ON P.ConferenceId = C.Id  WHERE C.FullName LIKE '%Workshop%'
SELECT      (COUNT(CASE WHEN Affiliation LIKE '%INFN%' THEN 1 END)       OVER () / COUNT(DISTINCT PA.AuthorId) OVER ()) * 100  AS INFN_Affiliated_Percentage FROM      PaperAuthor PA JOIN      Paper P ON PA.PaperId = P.Id WHERE      P.Title LIKE '%Charged particle multiplicity%'
SELECT      (COUNT(CASE WHEN j.ShortName LIKE 'ANN%' AND p.Year = 1989 THEN j.Id ELSE NULL END)      / COUNT(j.Id)) * 100 AS percentage FROM      Journal j JOIN      Paper p ON j.Id = p.JournalId;
SELECT COUNT(DISTINCT pa.AuthorId) FROM PaperAuthor pa JOIN Author a ON pa.AuthorId = a.Id JOIN Paper p ON pa.PaperId = p.Id WHERE a.Affiliation LIKE '%Microsoft Research%' AND p.Id = 1;
SELECT      p.Title, p.Year, j.FullName AS Topic FROM      Paper p JOIN      Journal j ON p.JournalId = j.Id WHERE      p.Title = 'A Formal Approach to Service Component Architecture';
SELECT      (COUNT(CASE WHEN Year > 2000 AND ConferenceId = 0 AND JournalId = 0 THEN 1 END)      OVER () * 100.0 / COUNT(*) OVER ()) AS percentage FROM Paper;
SELECT T3.Name, T3.Affiliation  FROM Paper AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId  JOIN Author AS T3 ON T3.Id = T2.AuthorId  WHERE T1.Title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers';
SELECT J.FullName  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  JOIN Author a ON pa.AuthorId = a.Id  JOIN Paper p2 ON p2.Title = 'Multiple paternity in a natural population of a salamander with long-term sperm storage'  JOIN PaperAuthor pa2 ON p2.Id = pa2.PaperId  JOIN Journal j ON p2.JournalId = j.Id;
SELECT COUNT(p.JournalId)  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  WHERE pa.Name = 'Iet Software/iee Proceedings - Software'  AND p.FullName = 'Iet Software/iee Proceedings - Software';
SELECT c.FullName  FROM Conference c  JOIN Paper p ON c.Id = p.ConferenceId  WHERE p.Id = 5;
SELECT Paper.Title FROM Paper JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId WHERE PaperAuthor.Name LIKE '%Jun du%' LIMIT 2;
SELECT P.Title  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON A.Id = PA.AuthorId  WHERE A.Name = 'Cheng Huang' AND A.Affiliation LIKE 'Microsoft%'
SELECT T2.FullName  FROM PaperAuthor AS T1  JOIN Paper AS T3 ON T1.PaperId = T3.Id  JOIN Conference AS T2 ON T3.ConferenceId = T2.Id  WHERE T1.Name = 'Jean-luc Hainaut';
SELECT J.FullName FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON a.Id = pa.AuthorId JOIN Paper p2 ON p2.ConferenceId = p.ConferenceId AND p2.JournalId = p.JournalId JOIN Journal J ON J.Id = p2.JournalId WHERE a.Name = 'Andrew Cain' GROUP BY J.FullName LIMIT 3;
SELECT DISTINCT A.Affiliation  FROM Author AS A  JOIN PaperAuthor AS PA ON A.Id = PA.AuthorId  JOIN Paper AS P ON PA.PaperId = P.Id  WHERE P.Title = 'FIBER: A Generalized Framework for Auto-tuning Software';
SELECT p.Title, j.FullName  FROM Paper AS p  JOIN PaperAuthor AS pa ON p.Id = pa.PaperId  JOIN Author AS a ON a.Id = pa.AuthorId  JOIN Paper AS p2 ON p2.Id = p.PaperId  JOIN Journal AS j ON j.Id = p2.JournalId  WHERE p.Year = 0 LIMIT 2;
SELECT J.ShortName, J.FullName  FROM Journal J  JOIN Paper P ON J.Id = P.JournalId  JOIN PaperAuthor PA ON P.Id = PA.PaperId  WHERE PA.Keyword = 'Materials';
SELECT A.Name FROM Author A JOIN PaperAuthor PA ON A.Id = PA.AuthorId WHERE A.Affiliation = 'University of Oxford' ORDER BY A.Name ASC;
SELECT Conference.ShortName, Conference.HomePage  FROM Conference  JOIN Paper ON Conference.Id = Paper.ConferenceId  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON PaperAuthor.AuthorId = Author.Id  WHERE Conference.FullName LIKE 'International Conference on Artificial Intelligence%'
SELECT Paper.Title FROM Paper WHERE Paper.Year = 1996;
SELECT P.Title, PA.Name  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Journal AS J ON P.JournalId = J.Id  WHERE J.FullName = 'Neoplasia' AND P.Year = 2007;
SELECT DISTINCT A.Name, P.Title  FROM Author A  JOIN PaperAuthor PA ON A.Id = PA.AuthorId  JOIN Paper P ON PA.PaperId = P.Id  JOIN Author ASU ON A.Id = ASU.Id  WHERE ASU.Affiliation = 'Soongsil University' AND P.Year = 2000;
SELECT P.Title, A.Name  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON PA.AuthorId = A.Id  JOIN Paper AS PC ON P.ConferenceId = PC.Id  JOIN Conference AS C ON PC.ConferenceId = C.Id  JOIN Paper AS PJS ON P.JournalId = PJS.Id  JOIN Journal AS J ON PJS.JournalId = J.Id  WHERE P.Year BETWEEN 2000 AND 2005  AND PC.HomePage IS NOT NULL  AND J.HomePage IS NOT NULL  AND P.Keyword LIKE '%optical properties%'
SELECT      AVG(p.Year) AS AverageYearlyPapers FROM      Paper p JOIN      Conference c ON p.ConferenceId = c.Id WHERE      c.FullName = 'World Computer Congress';
SELECT P.Title, PA.Name  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  WHERE P.Year = 1997 AND P.ConferenceId = 0 AND P.JournalId = 0
SELECT P.Title, J.FullName  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON A.Id = PA.AuthorId  JOIN Paper AS PJ ON P.Id = PJ.Id  JOIN Journal AS J ON J.Id = PJ.JournalId  WHERE A.Name = 'Adam Jones'  AND P.Year BETWEEN 2005 AND 2010;
SELECT COUNT(DISTINCT T1.Name)  FROM Author AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId  WHERE T1.Affiliation = 'Otterbein University';
SELECT COUNT(DISTINCT pa.AuthorId) FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON a.Id = pa.AuthorId WHERE p.Title = 'Subcellular localization of nuclease in barley aleurone';
SELECT Conference.FullName FROM Paper JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId JOIN Author ON Author.Id = PaperAuthor.AuthorId JOIN Paper ON Paper.Id = PaperAuthor.PaperId JOIN Conference ON Conference.Id = Paper.ConferenceId WHERE Paper.Title = 'Extended Fuzzy Regression Models';
SELECT COUNT(*)  FROM Paper  JOIN Conference ON Paper.ConferenceId = Conference.Id  WHERE Conference.FullName = 'Mathematics of Program Construction';
SELECT T3.Name, T3.Affiliation FROM Paper AS T1 JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId JOIN Author AS T3 ON T3.Id = T2.AuthorId WHERE T1.Title = 'Open Sourcing Social Solutions (Building Communities of Change)';
SELECT P.Title  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON A.Id = PA.AuthorId  WHERE A.Name = 'Jianli Hua';
SELECT PA.Name FROM PaperAuthor PA JOIN Paper P ON PA.PaperId = P.Id WHERE P.Title = 'Testing timed automata';
SELECT COUNT(*)  FROM Paper  JOIN Conference ON Paper.ConferenceId = Conference.Id  WHERE Conference.ShortName = 'SSPR' AND Paper.Year = 2000;
SELECT p.Title FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE j.FullName = 'Theoretical Computer Science' AND p.Year = 2003;
SELECT T3.HomePage FROM Paper AS T1 JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId JOIN Author AS T4 ON T4.Id = T2.AuthorId JOIN Paper AS T5 ON T5.Id = T1.PaperId JOIN Conference AS T3 ON T3.Id = T5.ConferenceId WHERE T1.Title = 'Quality evaluation of long duration audiovisual content';
SELECT DISTINCT A.Name  FROM Author A  JOIN PaperAuthor PA ON A.Id = PA.AuthorId  JOIN Paper P ON PA.PaperId = P.Id  WHERE P.Title = 'A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus' AND A.Affiliation = 'Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea';
SELECT COUNT(*)  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  JOIN Journal ON Journal.Id = Paper.JournalId  WHERE Journal.FullName = 'Software - Practice and Experience';
SELECT DISTINCT Paper.Title  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  JOIN Conference ON Conference.Id = Paper.ConferenceId  WHERE Conference.HomePage = 'http://www.irma-international.org/'
SELECT AVG(T.PaperCount)  FROM (     SELECT COUNT(P.Id) AS PaperCount      FROM Paper P      JOIN Conference C ON P.ConferenceId = C.Id      WHERE C.FullName = 'Information and Knowledge Engineering'      AND P.Year BETWEEN 2002 AND 2010 ) T;
SELECT      SUBTRACT(SUM(CASE WHEN T2.FullName = 'International Conference on Supercomputing' THEN 1 ELSE 0 END),              SUM(CASE WHEN T2.FullName = 'Informatik & Schule' THEN 1 ELSE 0 END)) AS Difference FROM      Paper AS T1 JOIN      Conference AS T2 ON T1.ConferenceId = T2.Id WHERE      T1.Year BETWEEN 1991 AND 2000;
SELECT FullName FROM Conference WHERE ShortName = 'Software - Concepts and Tools / Structured Programming';
SELECT FullName  FROM Journal  JOIN Paper ON Journal.Id = Paper.JournalId  WHERE Title = 'Education, democracy and growth';
SELECT COUNT(Paper.Id)  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  JOIN Journal ON Journal.Id = Paper.JournalId  WHERE Journal.FullName = 'IEEE Transactions on Nuclear Science' AND Paper.Year = 1999;
SELECT Title  FROM Paper  JOIN Journal ON Paper.JournalId = Journal.Id  WHERE Journal.FullName = 'IEEE Transactions on Pattern Analysis and Machine Intelligence' AND Year = '2011';
SELECT T3.Keyword  FROM Journal AS T1  JOIN Paper AS T2 ON T1.Id = T2.JournalId  JOIN PaperAuthor AS T4 ON T2.Id = T4.PaperId  JOIN Author AS T5 ON T4.AuthorId = T5.Id  JOIN Paper AS T6 ON T5.Id = T6.PaperId  JOIN PaperAuthor AS T7 ON T6.Id = T7.PaperId  JOIN Keyword AS T3 ON T6.Id = T3.PaperId  WHERE T1.FullName = 'Modeling Identification and Control' AND T2.Year = '1994';
SELECT p.Id, p.Title  FROM Paper AS p  JOIN PaperAuthor AS pa ON p.Id = pa.PaperId  WHERE pa.Name = 'Zvezdan Protić' AND p.Year = 0;
SELECT Conference.FullName FROM Paper JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId JOIN Author ON Author.Id = PaperAuthor.AuthorId JOIN Paper ON Paper.Id = PaperAuthor.PaperId JOIN Conference ON Conference.Id = Paper.ConferenceId WHERE Paper.Title = 'Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes';
SELECT COUNT(Paper.Id)  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Conference ON Paper.ConferenceId = Conference.Id  WHERE Conference.FullName = 'International Symposium on Software Testing and Analysis';
SELECT c.HomePage  FROM Conference AS c  JOIN Paper AS p ON c.Id = p.ConferenceId  JOIN PaperAuthor AS pa ON p.Id = pa.PaperId  WHERE p.Title = 'Increasing the Concurrency in Estelle' AND pa.Name = 'Author Name';
SELECT COUNT(DISTINCT pa.AuthorId) FROM PaperAuthor pa JOIN Paper p ON pa.PaperId = p.Id WHERE p.Title = 'An Improved Active Suspension Model for Attitude Control of Electric Vehicles';
SELECT Conference.ShortName  FROM Conference  JOIN Paper ON Conference.Id = Paper.ConferenceId  WHERE Paper.Year = 2012  GROUP BY Conference.Id  ORDER BY COUNT(Paper.Id) DESC  LIMIT 1;
SELECT COUNT(*)  FROM Paper  JOIN Conference ON Paper.ConferenceId = Conference.Id  WHERE Conference.ShortName = 'ECSQARU' AND Paper.Year = '2003';
SELECT T3.Keyword  FROM Paper AS T1  JOIN Conference AS T2 ON T1.ConferenceId = T2.Id  JOIN PaperAuthor AS T4 ON T1.Id = T4.PaperId  JOIN Author AS T5 ON T4.AuthorId = T5.Id  WHERE T2.FullName = 'International Radar Symposium' AND T1.Year = '2012';
SELECT      (SUM(CASE WHEN c.FullName = 'International Conference on Thermoelectrics' THEN 1 ELSE 0 END) -       SUM(CASE WHEN c.FullName = 'International Conference on Wireless Networks, Communications and Mobile Computing' THEN 1 ELSE 0 END)) AS Calculation FROM      Conference c
SELECT      (COUNT(CASE          WHEN p.Name = 'John Van Reenen' AND pa.ConferenceId = 0 AND pa.JournalId = 0 THEN p.Id         ELSE NULL     END)      / COUNT(CASE WHEN p.Name = 'John Van Reenen' THEN p.Id ELSE NULL END)) * 100 AS PreprintPercentage FROM      Paper p  JOIN      PaperAuthor pa ON p.Id = pa.PaperId  WHERE      pa.Name = 'John Van Reenen'
SELECT Title FROM Paper WHERE Year = (SELECT MIN(Year) FROM Paper);
SELECT FullName  FROM Conference  ORDER BY LENGTH(FullName) DESC  LIMIT 1;
SELECT COUNT(DISTINCT T1.Name)  FROM Author AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId  WHERE T1.Affiliation = 'NASA Langley Research Center';
SELECT COUNT(*)  FROM Journal  WHERE ShortName IS NULL;
SELECT COUNT(*)  FROM Paper  WHERE Year = 0;
SELECT p.Title  FROM Paper p  JOIN (     SELECT PaperId, COUNT(*) AS author_count      FROM PaperAuthor      GROUP BY PaperId      ORDER BY author_count DESC      LIMIT 1 ) as max_authors ON p.Id = max_authors.PaperId
SELECT Title  FROM Paper  JOIN Journal ON Paper.JournalId = Journal.Id  WHERE Journal.ShortName = 'TUBERCLE LUNG DIS'  ORDER BY Year ASC  LIMIT 1;
SELECT P.Title FROM Paper AS P JOIN PaperAuthor AS PA ON P.Id = PA.PaperId JOIN Author AS A ON A.Id = PA.AuthorId WHERE A.Name = 'Karin Rengefors'
SELECT COUNT(*)  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  JOIN Conference ON Conference.Id = Paper.ConferenceId  WHERE Conference.FullName = 'Virtual Reality, IEEE Annual International Symposium' AND Paper.Year = 2012;
SELECT J.FullName  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  JOIN Author a ON pa.AuthorId = a.Id  JOIN Paper p2 ON p2.Title = 'A Case of Unilateral Ashy Dermatosis' AND p2.Id = p.Id  JOIN Paper p3 ON p3.Id = p2.ConferenceId  JOIN Journal j ON j.Id = p3.JournalId  WHERE p2.Title = 'A Case of Unilateral Ashy Dermatosis';
SELECT      pa.Name,      pa.Affiliation  FROM      PaperAuthor pa  JOIN      Author a ON pa.AuthorId = a.Id  WHERE      a.Name = 'Mark A. Musen';
SELECT T3.Name, T3.Affiliation  FROM Paper AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId  JOIN Author AS T3 ON T3.Id = T2.AuthorId  WHERE T1.Title = 'Determination of Planetary Meteorology from Aerobot Flight Sensors';
SELECT P.Title, J.FullName  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON PA.AuthorId = A.Id  JOIN Paper AS PJ ON P.Id = PJ.Id  JOIN Journal AS J ON PJ.JournalId = J.Id  WHERE P.Year BETWEEN 1960 AND 1970;
SELECT Year FROM Conference JOIN Paper ON Conference.Id = Paper.ConferenceId WHERE Conference.FullName = 'Internet, Multimedia Systems and Applications' ORDER BY COUNT(Year) DESC LIMIT 1;
SELECT DISTINCT PaperTitle, Paper.Year  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  WHERE Author.Name = 'Randall Davis';
SELECT DISTINCT c.ShortName, c.FullName, c.HomePage  FROM Conference c  JOIN Paper p ON c.Id = p.ConferenceId  WHERE p.Year = 2008;
SELECT J.HomePage  FROM Journal AS J  JOIN Paper AS P ON J.Id = P.JournalId  GROUP BY J.Id  ORDER BY COUNT(P.Id) DESC  LIMIT 1;
SELECT      A.Name,     A.Affiliation,     COUNT(P.Id) AS PapersWithCancerKeyword FROM      Author A JOIN      PaperAuthor PA ON A.Id = PA.AuthorId JOIN      Paper P ON PA.PaperId = P.Id WHERE      P.Keyword = 'cancer' GROUP BY      A.Name, A.Affiliation ORDER BY      PapersWithCancerKeyword DESC;
SELECT Name FROM Author WHERE Id = 1722;
SELECT COUNT(*)  FROM Paper  WHERE Year = 0;
SELECT A.Name FROM Author A JOIN PaperAuthor PA ON A.Id = PA.AuthorId WHERE A.Affiliation = 'University of Illinois Chicago';
SELECT      (SUM(CASE WHEN p.Year = 2005 THEN 1 ELSE 0 END) -       SUM(CASE WHEN p.Year = 2004 THEN 1 ELSE 0 END)) AS difference FROM      Paper p
SELECT P.Title FROM Paper AS P JOIN Journal AS J ON P.JournalId = J.Id WHERE J.FullName = 'Ibm Journal of Research and Development';
SELECT A.Name, A.Affiliation  FROM Author AS A JOIN PaperAuthor AS PA ON A.Id = PA.AuthorId JOIN Paper AS P ON PA.PaperId = P.Id WHERE P.Title = 'Education, democracy and growth';
SELECT COUNT(PaperAuthor.Name)  FROM PaperAuthor  JOIN Paper ON Paper.Id = PaperAuthor.PaperId  JOIN Journal ON Journal.Id = Paper.JournalId  WHERE Journal.FullName = 'IEEE Computer';
SELECT Conference.FullName FROM Paper JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId JOIN Author ON Author.Id = PaperAuthor.AuthorId WHERE Paper.Title = 'A context-based navigation paradigm for accessing Web data';
SELECT COUNT(*)  FROM Paper  JOIN Conference ON Paper.ConferenceId = Conference.Id  WHERE Conference.FullName = 'International Workshop on Inductive Logic Programming' AND Paper.Year BETWEEN 2001 AND 2009;
SELECT      Paper.Id,     AVG(COUNT(PaperAuthor.AuthorId)) AS AverageAuthorsPerPaper FROM      Paper     JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId WHERE      Paper.Year BETWEEN 1990 AND 2000 GROUP BY      Paper.Id;
SELECT Year, J.FullName  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  JOIN Paper AS ConfPaper ON ConfPaper.Id = Paper.ConferenceId  JOIN Journal ON Journal.Id = ConfPaper.JournalId  WHERE Paper.Title = 'Area Effects in Cepaea';
SELECT A.Name, A.Affiliation  FROM Paper AS P JOIN PaperAuthor AS PA ON P.Id = PA.PaperId JOIN Author AS A ON A.Id = PA.AuthorId WHERE P.Title = 'Real-Time Automata';
SELECT A.Name FROM Author A JOIN PaperAuthor PA ON A.Id = PA.AuthorId WHERE A.Affiliation = 'ABB Electrical Machines';
SELECT COUNT(p.Id)  FROM Paper p  JOIN Journal j ON p.JournalId = j.Id  WHERE j.FullName = 'Academic Medicine' AND p.Year BETWEEN 2005 AND 2010;
SELECT P.Title  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON A.Id = PA.AuthorId  WHERE A.Name = 'Zuliang Du'  ORDER BY P.Year DESC  LIMIT 1;
SELECT COUNT(*)  FROM Paper  JOIN Conference ON Paper.ConferenceId = Conference.Id  WHERE Conference.FullName = 'Adaptive Multimedia Retrieval' AND Paper.Year = 2007;
SELECT      AVG(p.Year) AS Annual_Papers FROM      Paper p JOIN      Journal j ON p.JournalId = j.Id WHERE      j.FullName = 'Information Sciences';
SELECT COUNT(*)  FROM PaperAuthor  JOIN Author ON PaperAuthor.AuthorId = Author.Id  WHERE Author.Name = 'Howard F. Lipson'
SELECT      (COUNT(CASE WHEN P.Keyword = 'Turbulent Fluids' THEN P.Id ELSE NULL END)      / COUNT(CASE WHEN J.FullName = 'Physics of Fluids' THEN P.Id ELSE NULL END)) * 100 AS percentage FROM      Paper P JOIN      PaperAuthor PA ON P.Id = PA.PaperId JOIN      Author A ON PA.AuthorId = A.Id JOIN      Paper ASJ ON P.Id = ASJ.Id JOIN      Journal J ON ASJ.JournalId = J.Id WHERE      A.Name LIKE '%Turbulent Fluids%'     AND J.FullName = 'Physics of Fluids';
SELECT COUNT(DISTINCT T1.Name)  FROM Author AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId  WHERE T1.Affiliation = 'Arizona State University';
SELECT FullName, HomePage  FROM Conference  WHERE ShortName = 'ICCI';
SELECT P.Title  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON A.Id = PA.AuthorId  WHERE A.Name = 'Joe Lograsso';
SELECT COUNT(*)  FROM PaperAuthor  JOIN Author ON PaperAuthor.AuthorId = Author.Id  WHERE Author.Affiliation = 'University of Hong Kong';
SELECT P.Year, P.Title  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  WHERE PA.Name = 'Barrasa';
SELECT A.Name, P.Year  FROM PaperAuthor PA  JOIN Author A ON PA.AuthorId = A.Id  JOIN Paper P ON PA.PaperId = P.Id  WHERE P.Id = 2;
SELECT A.Name, P.Keyword  FROM PaperAuthor PA  JOIN Author A ON PA.AuthorId = A.Id  JOIN Paper P ON PA.PaperId = P.Id  WHERE P.Id = 5;
SELECT c.FullName  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  JOIN Author a ON pa.AuthorId = a.Id  JOIN Paper p2 ON p2.Title = '2004 YD5'  JOIN PaperAuthor pa2 ON pa2.PaperId = p2.Id  JOIN Conference c ON c.Id = p2.ConferenceId;
SELECT chronname FROM institution_grads JOIN institution_details ON institution_grads.unitid = institution_details.unitid WHERE race = 'Ai' AND year = '2007' GROUP BY chronname ORDER BY COUNT(race = 'Ai') DESC LIMIT 1;
SELECT      chronname,      site  FROM      college_completion.institution_details  JOIN      college_completion.institution_grads ON college_completion.institution_details.unitid = college_completion.institution_grads.unitid  WHERE      college_completion.institution_grads.year = '2011' AND      college_completion.institution_grads.grad_cohort = 209;
SELECT COUNT(*)  FROM institution_grads  JOIN institution_details ON institution_grads.unitid = institution_details.unitid  WHERE institution_details.chronname = 'Gateway Community College'  AND institution_details.state_sector_ct = (SELECT stateid FROM state_sector_details WHERE state = (SELECT state FROM institution_details WHERE chronname = 'Gateway Community College'))  AND institution_grads.year BETWEEN 2011 AND 2013  AND institution_grads.gender = 'F';
SELECT SUM(i.grad_cohort)  FROM institution_details i JOIN institution_grads ig ON i.unitid = ig.unitid JOIN state_sector_grads ssg ON i.state = ssg.state_abbr AND i.year = ssg.year WHERE i.gender = 'M' AND i.year = 2012 AND i.aid_value = (SELECT MAX(aid_value) FROM institution_details);
SELECT      state_sector_details.state,     AVG(institution_details.med_sat_value) AS average_med_sat_value FROM      institution_details JOIN      institution_grads ON institution_details.unitid = institution_grads.unitid AND institution_grads.year = 2013 JOIN      state_sector_grads ON institution_details.state = state_sector_grads.state_abbr AND institution_grads.gender = 'M' AND institution_grads.year = 2013 JOIN      state_sector_details ON institution_details.state = state_sector_details.stateid WHERE      MAX(state_sector_grads.grad_cohort) = SUM(state_sector_grads.grad_cohort WHERE institution_grads.gender = 'M') GROUP BY      state_sector_details.state;
SELECT      state,     chronname FROM      college_completion.state_sector_grads JOIN      college_completion.institution_details  ON      college_completion.state_sector_grads.stateid = college_completion.institution_details.unitid WHERE      college_completion.state_sector_grads.year = 2012 AND      college_completion.institution_details.control = 'Private for-profit' GROUP BY      state, chronname ORDER BY      SUM(college_completion.state_sector_grads.grad_cohort) DESC LIMIT 1;
SELECT chronname FROM institution_details JOIN state_sector_grads ON institution_details.unitid = state_sector_grads.state_sector_ct WHERE control = 'Public' AND year = 2013 AND state_sector_grads.grad_cohort = (SELECT MIN(grad_cohort) FROM state_sector_grads WHERE year = 2013);
SELECT      i.chronname,     i.fte_value FROM      institution_details i JOIN      institution_grads ig ON i.unitid = ig.unitid WHERE      ig.year = 2013 AND      ig.grad_cohort < 200 AND      ig.gender = 'B' AND      ig.race = 'X';
SELECT COUNT(*)  FROM institution_grads  JOIN institution_details ON institution_grads.unitid = institution_details.unitid  WHERE institution_details.chronname = 'Oakwood University'  AND institution_details.year = 2013  AND institution_details.gender = 'F'  AND institution_grads.cohort = 'all';
SELECT COUNT(*)  FROM institution_grads  JOIN institution_details ON institution_grads.unitid = institution_details.unitid  WHERE institution_details.chronname = 'University of Alaska at Anchorage'  AND institution_details.year = 2012  AND institution_grads.gender = 'F'  AND institution_grads.race = 'A'  AND institution_grads.cohort = '4y other';
SELECT      i.year,     COUNT(ig.grad_cohort) AS total_grad_cohort FROM      institution_details i JOIN      institution_grads ig ON i.unitid = ig.unitid WHERE      i.chronname = 'Auburn University' AND     i.gender = 'B' AND     i.race = 'X' AND     ig.cohort IN ('4y other', '4y bach') AND     i.year BETWEEN 2011 AND 2013 GROUP BY      i.year;
SELECT      (SUM(CASE WHEN i.control = 'Private for-profit' AND i.race = 'B' THEN 1 ELSE 0 END) * 100.0 /       SUM(CASE WHEN i.control = 'Private for-profit' THEN 1 ELSE 0 END)) AS black_student_percentage FROM      institution_details i JOIN      institution_grads ig ON i.unitid = ig.unitid WHERE      i.control = 'Private for-profit';
SELECT      state,     year,     SUM(CASE WHEN race = 'A' THEN 1 ELSE 0 END) * 100.0 / SUM(grad_cohort) AS asian_percentage_graduated FROM      college_completion.institution_grads JOIN      college_completion.state_sector_grads ON institution_grads.unitid = state_sector_grads.unitid WHERE      state = 'Alabama'     AND year = 2013     AND grad_100 = 1 GROUP BY      state,     year;
SELECT      (SUM(CASE WHEN i.gender = 'M' THEN i.grad_cohort ELSE 0 END)      / SUM(CASE WHEN i.gender = 'F' THEN i.grad_cohort ELSE 0 END)) * 1.0 AS asian_male_to_female_grad_ratio FROM      institution_details i JOIN      institution_grads ig ON i.unitid = ig.unitid WHERE      i.chronname = 'Harvard University' AND      ig.year = 2013 AND      i.race = 'A'
SELECT chronname, MIN(grad_100_value) FROM institution_details WHERE chronname = 'Amridge University' OR chronname = 'Auburn University' ORDER BY MIN(grad_100_value) ASC LIMIT 1;
SELECT COUNT(*)  FROM institution_details  WHERE control = 'Private not-for-profit';
SELECT COUNT(*)  FROM institution_details  JOIN institution_grads ON institution_details.unitid = institution_grads.unitid  WHERE institution_details.chronname = 'Amridge University'  AND institution_grads.gender = 'M'  AND institution_grads.race = 'H';
SELECT COUNT(*)  FROM institution_grads  JOIN institution_details ON institution_grads.unitid = institution_details.unitid  WHERE institution_details.chronname = 'Lincoln College'  AND institution_details.year = 2011  AND institution_details.cohort = '4y bach';
SELECT COUNT(*)  FROM institution_grads  JOIN institution_details ON institution_grads.unitid = institution_details.unitid  WHERE      institution_details.chronname = 'Central Alabama Community College' AND      institution_details.year = 2011 AND      institution_grads.gender = 'M' AND      institution_grads.race = 'H' AND      institution_grads.grad_100 = 1;
SELECT SUM(i.grad_100 + i.grad_150) AS total_graduates  FROM institution_details i  JOIN institution_grads ig ON i.unitid = ig.unitid  WHERE i.chronname = 'Central Alabama Community College' AND ig.year = 2011;
SELECT      CASE          WHEN (SELECT SUM(ig.grad_150) FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Central Alabama Community College' AND ig.year = 2011 AND ig.gender = 'F' AND id.race = 'w') / (SELECT COUNT(*) FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Central Alabama Community College' AND ig.year = 2011 AND id.gender = 'F') >          (SELECT SUM(ig.grad_150) FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Central Alabama Community College' AND ig.year = 2011 AND ig.gender = 'M' AND id.race = 'w') / (SELECT COUNT(*) FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Central Alabama Community College' AND ig.year = 2011 AND id.gender = 'M')          THEN 'Female White Students'         ELSE 'Male White Students'     END AS CohortWithHigherPercentage
SELECT `chronname`  FROM `institution_details` JOIN `institution_grads` ON `institution_details.unitid` = `institution_grads.unitid` WHERE `institution_grads.year` = 2011  AND `institution_grads.gender` = 'M' AND `institution_grads.race` = 'w' AND `institution_grads.grad_150` = 1;
SELECT      i.chronname  FROM      institution_details AS i JOIN      institution_grads AS ig ON i.unitid = ig.unitid WHERE      ig.year = 2011 AND      ig.gender = 'M' AND      ig.race = 'W' AND      ig.grad_150 > 20;
SELECT COUNT(*)  FROM institution_grads i  JOIN state_sector_grads s ON i.unitid = s.stateid  WHERE i.year = 2011  AND i.cohort = '2y all'  AND s.state = 'Alabama'  AND s.gender = 'B';
SELECT      SUM(state_sector_grads.grad_cohort) AS grad_cohort_2012 FROM      state_sector_grads WHERE      state_sector_grads.state = 'Alabama' AND     state_sector_grads.control = 'Public' AND     state_sector_grads.level = '2 yr' AND     state_sector_grads.year = 2012 AND     state_sector_grads.chronname = 'Central Alabama Community College' UNION ALL SELECT      SUM(state_sector_grads.grad_cohort) AS grad_cohort_2011 FROM      state_sector_grads WHERE      state_sector_grads.state = 'Alabama' AND     state_sector_grads.control = 'Public' AND     state_sector_grads.level = '2 yr' AND     state_sector_grads.year = 2011 AND     state_sector_grads.chronname = 'Central Alabama Community College' SELECT      (grad_cohort_2012 - grad_cohort_2011) AS difference_in_grads FROM     ( ... ) AS subquery
SELECT COUNT(*)  FROM institution_details  JOIN state_sector_grads ON institution_details.unitid = state_sector_grads.state_sector_ct  WHERE state_sector_details.state = 'Alabama'  AND institution_details.med_sat_percentile = 77  AND state_sector_grads.grad_cohort > 500  AND state_sector_grads.year = 2011;
SELECT COUNT(*)  FROM institution_details  JOIN state_sector_grads ON institution_details.unitid = state_sector_grads.state_sector_ct  WHERE state_sector_grads.state_abbr = 'AL'  AND institution_details.control = 'Public'  AND institution_details.year = 2011  AND state_sector_grads.grad_100 > 30;
SELECT `chronname`  FROM `institution_details`  JOIN `state_sector_grads` ON `institution_details.unitid` = `state_sector_grads.unitid` WHERE `state_sector_grads.state_abbr` = 'AL' AND `state_sector_grads.year` = 2011 AND `state_sector_grads.grad_cohort` > 500;
SELECT      AVG(SUM(`grad_cohort`              WHERE `year` IN (2011, 2012, 2013)              AND `chronname` = 'Central Alabama Community College')) AS avg_grads FROM `state_sector_grads`;
SELECT AVG(T2.grad_100_rate) AS avg_percentage FROM institution_details AS T1 JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Central Alabama Community College';
SELECT site  FROM institution_details  WHERE chronname = 'Swarthmore College';
SELECT state  FROM institution_details  WHERE chronname = 'Mercer University';
SELECT city  FROM institution_details  WHERE chronname = 'Rensselaer Polytechnic Institute';
SELECT state_abbr  FROM state_sector_details  WHERE state = 'Delaware';
SELECT COUNT(*)  FROM state_sector_details  WHERE state = 'California'  AND level = '2-year'  AND control = 'public';
SELECT state_post FROM state_sector_details WHERE state = 'Idaho';
SELECT chronname FROM institution_details WHERE state_abbr = 'NJ' AND level = '4-year' ORDER BY student_count DESC LIMIT 1;
SELECT `site`  FROM `state_sector_details`  JOIN `institution_details` ON `state_sector_details.stateid` = `institution_details.unitid`  WHERE `state` = 'PA' AND `lat_y` = (SELECT MAX(`lat_y`) FROM `state_sector_details` WHERE `state_abbr` = 'PA');
SELECT COUNT(*)  FROM institution_details  JOIN state_sector_grads ON institution_details.unitid = state_sector_grads.stateid  WHERE institution_details.level = '4-year'  AND institution_details.control = 'Public'  AND institution_details.state = 'UT'  AND institution_details.awards_per_value > (SELECT awards_per_state_value FROM state_sector_details WHERE state_abbr = 'UT');
SELECT COUNT(*)  FROM institution_details  JOIN state_sector_grads ON institution_details.unitid = state_sector_grads.state_sector_ct  WHERE institution_details.level = '2-year'  AND institution_details.control = 'Private not-for-profit'  AND institution_details.state = 'CT'  AND institution_details.awards_per_value < (SELECT AVG(awards_per_value) FROM state_sector_details WHERE state_abbr = 'CT');
SELECT chronname FROM institution_details WHERE state_abbr = 'ID' AND level = '4-year' AND control = 'Public' ORDER BY grad_100_value ASC LIMIT 1;
SELECT unitid FROM institution_details WHERE state_abbr = 'KY' AND level = '4-year' AND control = 'Private for-profit' AND grad_150_value = (SELECT MAX(grad_150_value) FROM institution_details WHERE state_abbr = 'KY' AND level = '4-year' AND control = 'Private for-profit');
SELECT COUNT(*)  FROM institution_grads  JOIN institution_details ON institution_grads.unitid = institution_details.unitid  WHERE      institution_details.chronname = 'Pennsylvania State University-Altoona' AND      institution_grads.gender = 'F' AND      institution_grads.race = 'H' AND      institution_grads.grad_100 = 1;
SELECT cohort  FROM institution_details  WHERE cohort_size = (SELECT MAX(cohort_size) FROM institution_details);
SELECT COUNT(*)  FROM institution_details  JOIN state_sector_grads ON institution_details.unitid = state_sector_grads.state_sector_ct  WHERE level = '4-year'  AND control = 'Private not-for-profit'  AND chronname = 'Brevard Community College';
SELECT SUM(state_sector_grads.grad_cohort) FROM state_sector_grads WHERE state = 'Alabama' AND level = '2-year' AND control = 'Public' AND year = 2011;
SELECT COUNT(*)  FROM institution_grads  JOIN institution_details ON institution_grads.unitid = institution_details.unitid  JOIN state_sector_grads ON institution_details.state = state_sector_grads.state_abbr  WHERE institution_details.level = '2-year'  AND institution_details.control = 'public'  AND institution_details.race = 'A'  AND institution_details.schools_count = 113  AND institution_details.year = 2013  AND institution_grads.cohort = '2y all'  AND state_sector_grads.cohort = '2y all';
SELECT      state_appr_rank  FROM      state_sector_details  WHERE      chronname = 'Madison Area Technical College' AND      control = 'Public' AND      level = '4-year' AND      state = 'Alabama';
SELECT state, chronname  FROM college_completion.institution_details  WHERE year BETWEEN 2010 AND 2012  AND race = 'B';
SELECT DISTINCT state FROM state_sector_details WHERE year = '2011' AND awards_per_natl_value < 20;
SELECT      control, level  FROM      institution_details  WHERE      race = 'X'  GROUP BY      control, level  ORDER BY      SUM(student_count) DESC  LIMIT 1;
SELECT DISTINCT state FROM state_sector_details WHERE control = 'Public' AND school_count < 20;
SELECT `institution_details`.`basic` FROM `institution_details` JOIN `institution_grads` ON `institution_details`.`unitid` = `institution_grads`.`unitid` WHERE `institution_grads`.`year` = '2012' AND `institution_grads`.`gender` = 'M' AND `institution_grads`.`race` = 'X';
SELECT COUNT(*)  FROM state_sector_grads  JOIN state_sector_details ON state_sector_grads.stateid = state_sector_details.stateid  JOIN institution_details ON state_sector_grads.unitid = institution_details.unitid  WHERE state_sector_details.state = 'Alaska'  AND year BETWEEN '2011' AND '2013'  AND institution_details.state_sector_ct = 1  AND state_sector_grads.race = 'W';
SELECT T1.chronname  FROM institution_details AS T1 JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.race = 'Ai' AND T2.grad_cohort BETWEEN 1 AND 3;
SELECT COUNT(*)  FROM state_sector_grads  JOIN state_sector_details ON state_sector_grads.stateid = state_sector_details.stateid  WHERE state_sector_grads.year = '2012'  AND state_sector_details.state LIKE 'A%'  AND state_sector_details.awards_per_natl_value = 16.5;
SELECT `site` FROM institution_details WHERE `student_count` BETWEEN 500 AND 1000 AND `vsa_year` = (SELECT MAX(`vsa_year`) FROM institution_details);
SELECT s.state  FROM state_sector_grads sg  JOIN state_sector_details sd ON sg.state = sd.stateid  JOIN institution_grads ig ON ig.unitid = sg.state_sector_ct  JOIN institution_details id ON id.unitid = ig.unitid  WHERE ig.year = '2011'  AND id.control = 'Private for-profit'  AND ig.gender = 'M'  AND id.race = 'B';
SELECT      id.institution_site,     id.chronname FROM      institution_details AS id JOIN      institution_grads AS ig ON id.unitid = ig.unitid JOIN      state_sector_grads AS ss ON id.state = ss.state_abbr WHERE      id.race = 'B' AND ig.year = '2011' AND ig.grad_cohort BETWEEN 20 AND 30;
SELECT COUNT(*)  FROM state_sector_grads  JOIN state_sector_details ON state_sector_grads.stateid = state_sector_details.stateid  WHERE gender = 'F'  AND year = 2012  AND state_sector_details.schools_count BETWEEN 10 AND 20;
SELECT DISTINCT institution_details.race  FROM institution_details  JOIN state_sector_details ON institution_details.unitid = state_sector_details.stateid  WHERE state_sector_details.state = 'Alabama' AND institution_details.student_count > (SELECT AVG(student_count) * 0.9 FROM institution_details);
SELECT      state_appr_value  FROM      state_sector_details  JOIN      institution_details  ON      state_sector_details.stateid = institution_details.unitid  WHERE      state_sector_details.state = 'Hawaii'      AND institution_details.level = '2-year'      AND institution_details.year = 2010;
SELECT chronname  FROM institution_details  JOIN state_sector_grads ON institution_details.unitid = state_sector_grads.state_sector_ct  WHERE state_abbr = 'CT' AND control = 'Public' AND level = '4yr' AND retain_percentile = (SELECT MAX(retain_percentile) FROM institution_details WHERE state_abbr = 'CT' AND control = 'Public' AND level = '4yr');
SELECT T1.site  FROM institution_details AS T1  JOIN institution_grads AS T2 ON T1.unitid = T2.unitid  WHERE T2.year = 2008  AND T2.cohort = '2y all'  AND T2.race = 'W'  AND T1.site IS NOT NULL  ORDER BY T2.grad_cohort_ct DESC  LIMIT 1;
SELECT year  FROM institution_details  WHERE chronname = 'Harvard University'  AND cohort = 'first-time' AND ft_pct = 'full-time' AND student_count > 0; -- Assuming zero count means no exclusions
SELECT `chronname`  FROM `institution_details` JOIN `state_sector_details` ON `institution_details.unitid` = `state_sector_details.stateid` WHERE `state_sector_details.year` = 2010 AND `state_sector_details.state_appr_value` = (SELECT MAX(`state_appr_value`) FROM `state_sector_details` WHERE `year` = 2011) ORDER BY `student_count` ASC LIMIT 1;
SELECT AVG(T2.grad_cohort)  FROM institution_details AS T1  JOIN institution_grads AS T2  ON T1.unitid = T2.unitid  WHERE T1.chronname = 'Yale University'  AND T2.cohort = '4y bach'  AND T2.year BETWEEN 2002 AND 2005;
SELECT      chronname FROM      institution_details WHERE      chronname LIKE 'Brown University'     OR chronname LIKE 'Columbia University'     OR chronname LIKE 'Cornell University'     OR chronname LIKE 'Dartmouth College'     OR chronname LIKE 'Harvard University'     OR chronname LIKE 'Princeton University'     OR chronname LIKE 'University of Pennsylvania'     OR chronname LIKE 'Yale University'     AND institution_details.year = (SELECT MAX(year) FROM institution_grads)     AND institution_grads.race = 'H' ORDER BY      COUNT(institution_grads.grad_cohort) DESC LIMIT 1;
SELECT COUNT(*) AS num_institutions, chronname  FROM college_completion.institution_details  JOIN college_completion.state_sector_details  ON college_completion.institution_details.unitid = college_completion.state_sector_details.stateid  WHERE college_completion.state_sector_details.state = 'Florida'  AND college_completion.institution_details.level = '4-year'  AND college_completion.institution_details.control = 'Public'  GROUP BY chronname;
SELECT      state  FROM      college_completion.state_sector_details WHERE      chronname = 'Brown University' OR chronname = 'Columbia University' OR chronname = 'Cornell University' OR chronname = 'Dartmouth College' OR chronname = 'Harvard University' OR chronname = 'Princeton University' OR chronname = 'University of Pennsylvania' OR chronname = 'Yale University' AND year = 2011 ORDER BY      state_appr_value ASC LIMIT 1;
SELECT chronname FROM state_sector_details ssd JOIN institution_details id ON ssd.state = id.state WHERE ssd.schools_count = (SELECT MAX(schools_count) FROM state_sector_details) AND id.ft_pct >= 90;
SELECT      state_appr_value = MIN(state_appr_value) AS min_appr_value,     AVG(school.med_sat_value) AS avg_sat_value FROM     state_sector_details school JOIN     institution_details inst ON school.stateid = inst.unitid WHERE     school.year = 2011     AND school.counted_pct = 1     AND school.awards_per_state_value IS NOT NULL     AND school.exp_award_state_value IS NOT NULL;
SELECT chronname FROM institution_grads WHERE gender = 'F' AND cohort = '4y' AND grad_cohort = (     SELECT MAX(grad_cohort)      FROM institution_grads      WHERE gender = 'F'      AND cohort = '4y' ) AND (cohort = '4y undergrad' OR (cohort = '4y' AND NOT (control IN ('Private nonprofit', 'Private for-profit') AND level = 'Baccalaureate/Associate\'s')));
SELECT      i.chronname  FROM      institution_details AS i JOIN      institution_grads AS ig ON i.unitid = ig.unitid WHERE      i.control = 'Private' AND i.level = 'Baccalaureate/Associate's' AND      i.chronname IN ('Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University') AND      ig.year = 2013 AND ig.gender = 'U' AND ig.race = 'B' AND ig.cohort = '4y bach' AND ig.grad_150 IS NOT NULL GROUP BY      i.unitid, i.chronname ORDER BY      COUNT(ig.grad_150) DESC LIMIT 1;
SELECT AVG(i.grad_150)  FROM institution_details AS i  JOIN institution_grads AS ig ON i.unitid = ig.unitid  WHERE i.year BETWEEN '2011' AND '2013'  AND i.chronname = 'United Education Institute-Huntington Park Campus'  AND ig.gender = 'M'  AND i.race = 'H'  AND i.level = '2'
SELECT      i.chronname,     sd.state_appr_value FROM      institution_details i JOIN      state_sector_details sd ON i.unitid = sd.stateid WHERE      MAX(i.awards_per_value - i.awards_per_natl_value) = (         SELECT              MAX(awds_val - awds_natl_val)         FROM              (SELECT                  unitid,                  awards_per_value as awds_val,                  awards_per_natl_value as awds_natl_val             FROM                  institution_details) subq     )
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND stars < 3;
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND active = 'False';
SELECT COUNT(*)  FROM Reviews  WHERE user_id = 36139 AND review_length = 'long';
SELECT COUNT(*)  FROM Users  WHERE `user_fans` = 'uber';
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Attributes.attribute_name = 'Open 24 Hours' AND Attributes.attribute_value = 'true';
SELECT attribute_value  FROM Business_Attributes  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE business_id = 10172 AND attribute_name = 'Wi-Fi';
SELECT COUNT(*)  FROM Business_Categories  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Bars';
SELECT      (SUM(CASE WHEN business_categories.category_id = (SELECT category_id FROM Categories WHERE category_name = 'Buffets') THEN 1 ELSE 0 END) -       SUM(CASE WHEN business_categories.category_id = (SELECT category_id FROM Categories WHERE category_name = 'Gyms') THEN 1 ELSE 0 END)) AS difference FROM     Business INNER JOIN     Business_Categories ON Business.business_id = Business_Categories.business_id INNER JOIN     Categories ON Business_Categories.category_id = Categories.category_id
SELECT      b.category_name  FROM      Business_Categories bc  JOIN      Business b ON bc.business_id = b.business_id  JOIN      Reviews r ON b.business_id = r.business_id  WHERE      r.review_stars = 5  GROUP BY      b.category_name  ORDER BY      COUNT(*) DESC  LIMIT 1;
SELECT U.user_yelping_since_year  FROM Users U  JOIN Reviews R ON U.user_id = R.user_id  WHERE R.review_stars = 5  GROUP BY U.user_id, U.user_yelping_since_year  ORDER BY COUNT(R.review_id) DESC  LIMIT 1;
SELECT      u.user_id,      AVG(r.review_stars) as average_ratings FROM      Users u JOIN      Reviews r ON u.user_id = r.user_id WHERE      r.review_length = 'long' GROUP BY      u.user_id ORDER BY      COUNT(r.review_length) DESC LIMIT 1;
SELECT      c.category_name FROM      Business_Categories AS bc JOIN      Categories AS c ON bc.category_id = c.category_id JOIN      Business AS b ON bc.business_id = b.business_id JOIN      Reviews AS r ON b.business_id = r.business_id WHERE      r.review_length = 'long' GROUP BY      c.category_name ORDER BY      COUNT(*) DESC LIMIT 1;
SELECT      c.category_name  FROM      Business b  JOIN      Business_Categories bc ON b.business_id = bc.business_id  JOIN      Business_Hours bh ON b.business_id = bh.business_id  JOIN      Tips t ON b.business_id = t.business_id  JOIN      Categories c ON bc.category_id = c.category_id  WHERE      t.tip_length = 'short'  GROUP BY      c.category_id, c.category_name  ORDER BY      COUNT(t.tip_length) DESC  LIMIT 1;
SELECT U.user_yelping_since_year  FROM Users AS U JOIN Tips AS T ON U.user_id = T.user_id WHERE T.tip_length = 'Short' GROUP BY U.user_id, U.user_yelping_since_year ORDER BY COUNT(T.tip_id) DESC LIMIT 1;
SELECT      b.category_name  FROM      Users u  JOIN      Tips t ON u.user_id = t.user_id  JOIN      Business b ON t.business_id = b.business_id  WHERE      u.user_id = 70271  AND      t.tip_length = 'short';
SELECT Business.stars  FROM Business  JOIN Tips ON Business.business_id = Tips.business_id  WHERE Tips.user_id = 69722 AND Tips.tip_length = 'short';
SELECT      (SUM(CASE WHEN c.category_name = 'Automotive' THEN 1 ELSE 0 END) * 1.0 / COUNT(b.business_id)) * 100 AS percentage FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id;
SELECT      (SUM(CASE WHEN c.category_name = 'Women''s Clothing' THEN 1 ELSE 0 END) - SUM(CASE WHEN c.category_name = 'Men''s Clothing' THEN 1 ELSE 0 END)) * 1.0 / COUNT(b.business_id) * 100 AS percentage_more FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id;
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year = 2004;
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year = 2005 AND user_fans = 'None';
SELECT COUNT(*)  FROM Business  WHERE city = 'Tolleson' AND active = 'TRUE';
SELECT COUNT(*)  FROM Reviews  WHERE user_id = 21679;
SELECT COUNT(*)  FROM Reviews  WHERE business_id = 10682 AND review_stars = 5;
SELECT `business_id`  FROM Business  WHERE `city` = 'Sun City' AND `active` = 'False'  ORDER BY `review_count` DESC  LIMIT 1;
SELECT COUNT(*)  FROM Reviews  JOIN Business ON Reviews.business_id = Business.business_id  WHERE Business.city = 'Yuma' AND Reviews.review_length = 'Medium';
SELECT ba.attribute_value  FROM Business_Attributes ba  JOIN Business b ON ba.business_id = b.business_id  WHERE b.business_id = '4960' AND ba.attribute_name = 'Has TV';
SELECT COUNT(*)  FROM Business_Attributes  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  JOIN Business ON Business_Attributes.business_id = Business.business_id  WHERE Attributes.attribute_name = 'Dogs Allowed' AND Attributes.attribute_value = 'true';
SELECT      (B ClosingTime - B OpeningTime) AS HoursOpen FROM      Business_Hours B JOIN      Business_Attributes BA ON B.business_id = BA.business_id JOIN      Days D ON B.day_id = D.day_id WHERE      BA.attribute_value = 'open' AND     D.day_of_week = 'Saturday' AND     B.business_id = '5734';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Hair Removal';
SELECT      (SUM(CASE WHEN business_categories.category_id = (SELECT category_id FROM Categories WHERE category_name = 'Chinese') THEN 1 ELSE 0 END) -      SUM(CASE WHEN business_categories.category_id = (SELECT category_id FROM Categories WHERE category_name = 'Filipino') THEN 1 ELSE 0 END)) AS more_chinese_than_filipino FROM      Business JOIN      Business_Categories ON Business.business_id = Business_Categories.business_id;
SELECT Business.city  FROM Business  JOIN Tips ON Business.business_id = Tips.business_id  JOIN Users ON Users.user_id = Tips.user_id  WHERE Users.user_id = 63469 AND Tips.likes = 1;
SELECT COUNT(DISTINCT c.category_name)  FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id JOIN Business_Categories bc ON ba.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE ba.business_id = 1141 AND a.attribute_name LIKE '%music%' AND ba.attribute_value = 'true';
SELECT COUNT(*)  FROM Users_Compliments uc  JOIN Compliments c ON uc.compliment_id = c.compliment_id  WHERE c.compliment_type = 'cute' AND uc.user_id = 57400;
SELECT user_id  FROM Users_Compliments  WHERE compliment_id IN (     SELECT compliment_id      FROM Compliments      WHERE compliment_type = 'funny' )  GROUP BY user_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Attributes.attribute_name = 'Drive-Thru'  AND Business.city = 'Scottsdale'  AND Business.business_id < 1000;
SELECT AVG(Business.stars)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  WHERE Business_Attributes.attribute_name = 'Open 24 Hours' AND Business_Attributes.attribute_value = 'true';
SELECT      (COUNT(CASE WHEN business.city = 'Phoenix' AND business_attribute.attribute_name = 'BYOB' AND business_attribute.attribute_value = 'TRUE' THEN 1 END) * 1.0 / COUNT(business.business_id)) * 100 AS percentage FROM     Business INNER JOIN     Business_Attributes business_attribute ON Business.business_id = Business_Attributes.business_id WHERE     business_attribute.attribute_name = 'BYOB' AND business_attribute.attribute_value = 'TRUE' AND     business.city = 'Phoenix';
SELECT Business.name FROM Business JOIN Business_Categories ON Business.business_id = Business_Categories.business_id JOIN Categories ON Business_Categories.category_id = Categories.category_id WHERE Categories.category_name = 'Restaurants' AND Business.state = 'AZ' AND Business.stars = 5;
SELECT COUNT(*)  FROM Business  WHERE active = 'true' AND review_count = 'Low';
SELECT user_id  FROM Users  WHERE user_id BETWEEN 1 AND 20  AND user_fans = 'None'  AND user_review_count = 'Low';
SELECT B.business_id, B.opening_time, B.closing_time FROM Business_Hours AS BH JOIN Business_Categories AS BC ON BH.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id WHERE C.category_name = 'fashion';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Shopping' AND Business_Hours.opening_time < '8AM'
SELECT Business.name FROM Business JOIN Business_Categories ON Business.business_id = Business_Categories.business_id JOIN Categories ON Business_Categories.category_id = Categories.category_id WHERE Categories.category_name = 'pets' AND Business.active AND Business.closing_time > '9PM';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Categories.category_name = 'Your Category'  AND Days.day_of_week BETWEEN 'Monday' AND 'Thursday'  AND Business_Hours.opening_time IS NOT NULL  AND Business_Hours.closing_time IS NOT NULL  AND Business.active = 1;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Active Life' AND Business.city = 'Phoenix';
SELECT B.business_id AS "business name" FROM Business B JOIN Business_Categories BC ON B.business_id = BC.business_id JOIN Categories C ON BC.category_id = C.category_id WHERE B.stars < 5 AND C.category_name = 'men\'s clothing';
SELECT B.business_id, B.name  FROM Business AS B JOIN Reviews AS R ON B.business_id = R.business_id WHERE B.active = 'False' AND R.review_votes_useful = 'Low';
SELECT Business.name FROM Business JOIN Reviews ON Business.business_id = Reviews.business_id WHERE Reviews.review_length = 'Long' AND Business.business_id BETWEEN 1 AND 20;
SELECT ba.attribute_value  FROM Business_Attributes ba  JOIN Business_Categories bc ON ba.business_id = bc.business_id  JOIN Categories c ON bc.category_id = c.category_id  WHERE c.category_name = 'Fashion' AND c.city = 'Scottsdale';
SELECT COUNT(*)  FROM Users  JOIN Users_Compliments ON Users.user_id = Users_Compliments.user_id  JOIN Business ON Business.business_id = Reviews.business_id  WHERE Users_Compliments.number_of_compliments = 'Medium'  AND Business.city = 'Phoenix';
SELECT Business.name FROM Business JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id JOIN Days ON Business_Hours.day_id = Days.day_id WHERE Business.city = 'Tempe' AND Business_Hours.opening_time < '8AM';
SELECT COUNT(*)  FROM Business  WHERE city = 'Glendale'  AND active = 'true'  AND Business_Hours.opening_time = '8AM'  AND Business_Hours.closing_time = '6PM';
SELECT      (COUNT(CASE WHEN business.city = 'Phoenix' THEN business.business_id END) * 1.0 / COUNT(business.business_id)) * 100 AS 'Percentage' FROM      Business business;
SELECT      COUNT(DISTINCT CASE          WHEN C.category_name = 'Active Life' AND B.review_count < 'LOW_THRESHOLD' THEN B.city         ELSE NULL     END) AS cities_with_active_life_and_low_reviews,     COUNT(DISTINCT B.city) * (COUNT(DISTINCT CASE          WHEN C.category_name = 'Active Life' AND B.review_count < 'LOW_THRESHOLD' THEN 1         ELSE NULL     END) / COUNT(DISTINCT B.city)) AS percentage FROM      Business_Business AS B JOIN      Business_Categories AS BC ON B.business_id = BC.business_id JOIN      Categories AS C ON BC.category_id = C.category_id WHERE      C.category_name = 'Active Life'
SELECT COUNT(*)  FROM Business  WHERE active = 'true' AND city = 'Phoenix';
SELECT COUNT(*)  FROM Business  WHERE city = 'Scottsdale' AND stars > 3;
SELECT AVG(Business.stars)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  WHERE Business.active = 'False'
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Business.state = 'AZ' AND Attributes.attribute_name = 'beer_and_wine';
SELECT B.city FROM Business_Attributes A JOIN Business B ON A.business_id = B.business_id JOIN Attributes AT ON A.attribute_id = AT.attribute_id WHERE AT.attribute_name = 'full_bar' GROUP BY B.city ORDER BY COUNT(A.business_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Fashion' AND Business.stars = 5;
SELECT B.city FROM Business B JOIN Business_Categories BC ON B.business_id = BC.business_id JOIN Categories C ON BC.category_id = C.category_id WHERE C.category_name = 'Food' AND B.review_count = 'High' GROUP BY B.city ORDER BY COUNT(B.business_id) DESC LIMIT 1;
SELECT business_id FROM Business WHERE city = 'Mesa' AND stars > 3;
SELECT T1.city  FROM Business AS T1  JOIN Reviews AS T2 ON T1.business_id = T2.business_id  WHERE T2.review_votes_funny = 'Low'  GROUP BY T1.city  ORDER BY COUNT(T1.business_id) ASC  LIMIT 1;
SELECT      (COUNT(CASE          WHEN b.city = 'Chandler' AND bc.category_id IN (             SELECT category_id FROM Categories WHERE category_name = 'Real Estate'         ) AND b.stars = 5         THEN 1     END) * 100.0 / COUNT(b.business_id)) as percentage FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id;
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year = '2012' AND user_votes_funny = 'High';
SELECT SUM(Reviews.review_votes_useful) FROM Reviews WHERE Reviews.business_id = 2 AND Reviews.user_id = 52592;
SELECT attribute_id FROM Attributes WHERE attribute_name LIKE '%payment%'
SELECT review_length  FROM Reviews  WHERE business_id = 2 AND user_id = 612;
SELECT COUNT(*)  FROM Business  WHERE city = 'Gilbert' AND active = 'true';
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND review_count = 'low';
SELECT business_id FROM Business WHERE state = 'AZ' AND EXISTS (   SELECT *   FROM Reviews   WHERE Business.business_id = Reviews.business_id AND review_stars = 5 );
SELECT attribute_name  FROM Attributes  WHERE attribute_id NOT IN (     SELECT attribute_id      FROM Business_Attributes      WHERE business_id = 2 AND attribute_value != 'none' );
SELECT COUNT(*)  FROM Users_Compliments  JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id  WHERE User_Compliments.user_id = 33 AND Compliments.compliment_type = 'cool';
SELECT opening_time, closing_time  FROM Business_Hours  WHERE business_id = 53 AND day_of_week = 'Friday';
SELECT attribute_name  FROM Attributes  JOIN Business_Attributes ON Attributes.attribute_id = Business_Attributes.attribute_id  WHERE Business_Attributes.business_id = 56 AND Business_Attributes.attribute_value = 'true';
SELECT bc.category_id, c.category_name  FROM Business_Categories AS bc JOIN Categories AS c ON bc.category_id = c.category_id WHERE bc.business_id = 15;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Business.city = 'Scottsdale' AND Categories.category_name = 'Beauty & Spas';
SELECT user_id FROM Users_Compliments JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id WHERE Compliments.compliment_type = 'cute' AND Users_Compliments.number_of_compliments = 'Uber' LIMIT 2;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Accessories' AND Business.stars > 3
SELECT      b.opening_time AS business_opening_time,     b.closing_time AS business_closing_time FROM      Business_Hours bh JOIN      Business b ON bh.business_id = b.business_id JOIN      Days d ON bh.day_id = d.day_id WHERE      b.business_id = 12 AND      d.day_of_week = 3 AND      b.city = 'Scottsdale' ;
SELECT COUNT(*)  FROM Business  JOIN Business_Hours ON Business.business_id = Business_Hours.business_id  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business.state = 'AZ'  AND Days.day_of_week = 'Thursday'  AND Business_Hours.closing_time = 'None';
SELECT COUNT(*)  FROM Business  WHERE city = 'Scottsdale';
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND active = 'true';
SELECT COUNT(*)  FROM Business  WHERE city = 'Scottsdale' AND stars > 3;
SELECT      b.city FROM      Business b WHERE      b.city IN ('Scottsdale', 'Anthem') AND      MAX(b.review_count) IS NOT NULL;
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND stars > 4;
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ';
SELECT T1.city  FROM Business AS T1  JOIN Reviews AS T2 ON T1.business_id = T2.business_id  WHERE T2.stars = 5;
SELECT COUNT(*)  FROM Reviews  WHERE user_id = 3;
SELECT COUNT(*)  FROM Reviews  WHERE user_id = 3 AND review_length = 'Long';
SELECT COUNT(*)  FROM Reviews  WHERE user_id = 3 AND review_length = 'Long' AND review_votes_useful = 'medium';
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year = '2012';
SELECT user_id FROM Users WHERE user_fans = 'High';
SELECT COUNT(*)  FROM Business_Attributes  WHERE attribute_name = 'Alcohol' AND attribute_value = 'none';
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Business.state = 'AZ' AND Attributes.attribute_name = 'Alcohol' AND Business_Attributes.attribute_value = 'none';
SELECT Business.business_id  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  WHERE Business_Attributes.attribute_name = 'Good for Kids' AND Business_Attributes.attribute_value = 'true';
SELECT COUNT(*)  FROM Business_Categories  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Shopping';
SELECT bc.category_id, c.category_name  FROM Business_Categories AS bc JOIN Categories AS c ON bc.category_id = c.category_id WHERE bc.business_id = 1;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Business.active = 'true' AND Categories.category_name = 'Food';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Business.city = 'Anthem' AND Categories.category_name = 'Food';
SELECT B.business_id  FROM Business B  JOIN Business_Categories BC ON B.business_id = BC.business_id  JOIN Categories C ON BC.category_id = C.category_id  WHERE C.category_name = 'Food' AND B.stars = (     SELECT MAX(B1.stars) FROM Business B1 WHERE B1.elite.year_id IS NOT NULL )
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  WHERE Categories.category_name = 'Food'  AND Business_Attributes.attribute_name = 'Good for Kids'  AND Business_Attributes.attribute_value = 'true';
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND EXISTS (   SELECT 1    FROM Reviews    WHERE Business.business_id = Reviews.business_id AND Reviews.user_id = 3 )
SELECT c.category_name  FROM Categories c  JOIN Business_Categories bc ON c.category_id = bc.category_id  WHERE bc.business_id IN (     SELECT b.business_id      FROM Business b      WHERE b.state = 'AZ' );
SELECT      b.day_id,      (ch.closing_time - ch.opening_time) AS hours_open FROM      Business_Hours AS bh JOIN      Business AS b ON bh.business_id = b.business_id JOIN      Days AS d ON bh.day_id = d.day_id JOIN      Checkins AS ch ON b.business_id = ch.business_id AND d.day_of_week = 'Tuesday' WHERE      b.business_id = 1;
SELECT Business_Hours.opening_time  FROM Business_Hours  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business_Hours.business_id = 1 AND Days.day_of_week = 'Tuesday';
SELECT COUNT(*)  FROM Business  JOIN Business_Hours ON Business.business_id = Business_Hours.business_id  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business.active = 1  AND Days.day_of_week = 'Monday'  AND Business_Hours.closing_time IN ('9PM', '10PM', '11PM', '12PM')
SELECT Business_Hours.opening_time  FROM Business_Hours  JOIN Business ON Business.business_id = Business_Hours.business_id  JOIN Days ON Days.day_id = Business_Hours.day_id  WHERE Days.day_of_week = 'Monday'  AND Business.city = 'Anthem'  AND Business.active = 'true';
SELECT COUNT(*)  FROM Business  JOIN Business_Hours ON Business.business_id = Business_Hours.business_id  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business.state = 'AZ'  AND Business_Hours.closing_time = '12PM'  AND Days.day_of_week = 'Sunday';
SELECT bc.category_name  FROM Business_Categories AS bc  JOIN Business_Hours AS bh ON bc.business_id = bh.business_id  WHERE bh.closing_time = '12PM' AND bh.day_id IN (SELECT day_id FROM Days WHERE day_of_week = 'Sunday');
SELECT COUNT(*)  FROM Business_Attributes ba  JOIN Attributes a ON ba.attribute_id = a.attribute_id  JOIN Business b ON ba.business_id = b.business_id  WHERE a.attribute_name = 'Good for Kids' AND ba.attribute_value = 'true' AND EXISTS (   SELECT 1 FROM Days d WHERE d.day_id BETWEEN 1 AND 7 AND EXISTS (     SELECT 1 FROM Business_Hours bh WHERE bh.business_id = b.business_id AND bh.day_id = d.day_id   ) );
SELECT COUNT(*)  FROM Users  WHERE year_id = user_yelping_since_year;
SELECT      b.business_id,     MAX(TIMESTAMPDIFF(SECOND, oh.opening_time, oh.closing_time)) AS longest_business_time FROM      Business_Hours bh JOIN      Business_Hours oh ON bh.business_id = oh.business_id JOIN      Days d ON bh.day_id = d.day_id JOIN      Business_Attributes ba ON bh.business_id = ba.business_id JOIN      Categories c ON ba.business_id = c.business_id WHERE      d.day_of_week = 'Monday' AND     c.category_name = 'Shopping' GROUP BY      b.business_id;
SELECT B.business_id  FROM Business_Hours AS BH  JOIN Days AS D ON BH.day_id = D.day_id  WHERE D.day_of_week = 'Sunday' AND         (BH.closing_time - BH.opening_time) > 12;
SELECT COUNT(*)  FROM Reviews  JOIN Users ON Reviews.user_id = Users.user_id  WHERE business_id = 1 AND user_id IN (     SELECT user_id      FROM Elite      WHERE year_id = (SELECT actual_year FROM Years WHERE year_id = (SELECT MAX(year_id) FROM Years))  )
SELECT COUNT(*)  FROM Users  WHERE user_review_count > 10 AND user_id IN (SELECT user_id FROM Elite);
SELECT Business.business_id, Business.name  FROM Business  JOIN Reviews ON Business.business_id = Reviews.business_id  WHERE Business.state = 'AZ'  GROUP BY Business.business_id, Business.name  ORDER BY COUNT(Reviews.business_id) DESC  LIMIT 1;
SELECT AVG(Business.stars)  FROM Business  JOIN Reviews ON Business.business_id = Reviews.business_id  JOIN Users ON Reviews.user_id = Users.user_id  WHERE Business.city = 'Anthem';
SELECT AVG(T2.stars)  FROM Users AS T1  JOIN Reviews AS T2 ON T1.user_id = T2.user_id  WHERE T1.user_id = 3 AND T2.business_state = 'AZ'
SELECT      AVG(DIVIDE(SUBTRACT(bh.closing_time, bh.opening_time), 2)) AS avg_business_time FROM      Business_Hours bh JOIN      Days d ON bh.day_id = d.day_id WHERE      bh.business_id = 1 AND (d.day_of_week = 'Saturday' OR d.day_of_week = 'Sunday');
SELECT AVG(Business.stars)  FROM Business  JOIN Business_Hours ON Business.business_id = Business_Hours.business_id  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business_Hours.closing_time = '12PM' AND Days.day_of_week = 'Sunday';
SELECT COUNT(*)  FROM Business  WHERE city = 'Casa Grande';
SELECT COUNT(*)  FROM Business  WHERE active = 'true' AND state = 'AZ' AND review_count <= LOW_VALUE;
SELECT business_id FROM Business WHERE stars >= 2 AND stars < 4 AND city = 'Mesa';
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year >= 2011 AND user_yelping_since_year < 2014 AND user_fans > 100;
SELECT review_length  FROM Reviews  WHERE business_id = 2 AND user_id = 35026;
SELECT Business_Attributes.attribute_value  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  WHERE Business.city = 'Chandler' AND Business.review_count <= 'threshold'
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Mexican' AND Business.stars < 4;
SELECT B.business_id, B.stars  FROM Business AS B JOIN Business_Categories AS BC ON B.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id WHERE B.active = 'true' AND C.category_name = 'Fashion';
SELECT B.category_name  FROM Business_Categories AS BC  JOIN Business AS B ON BC.business_id = B.business_id  WHERE B.stars = (SELECT MAX(stars) FROM Business)
SELECT bc.category_id, bn.category_name  FROM Business_Categories AS bc JOIN Business AS bn ON bc.business_id = bn.business_id JOIN Reviews AS rv ON bn.business_id = rv.business_id WHERE rv.review_length BETWEEN (SELECT MIN(rev_len) FROM (SELECT business_id, LENGTH(review) AS rev_len FROM Reviews WHERE business_id BETWEEN 6 AND 9) AS subquery) AND rv.review_stars = (SELECT MAX(review_stars) FROM Reviews WHERE business_id BETWEEN 6 AND 9) AND bn.business_id BETWEEN 6 AND 9;
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Business.active = 'true' AND Attributes.attribute_name = 'Caters' AND Business.review_count < 10;
SELECT      b.business_id,      bh.opening_time,      bh.closing_time  FROM      Business b      JOIN Business_Categories bc ON b.business_id = bc.business_id      JOIN Categories c ON bc.category_id = c.category_id      JOIN Business_Hours bh ON b.business_id = bh.business_id  WHERE      c.category_name = 'Restaurants' AND      b.city = 'Tempe' AND      b.stars = (SELECT MAX(stars) FROM Business WHERE city = 'Tempe')
SELECT      b.category_id,      c.category_name,      ba.attribute_id,      a.attribute_name FROM      Business AS b JOIN      Business_Categories AS bc ON b.business_id = bc.business_id JOIN      Categories AS c ON bc.category_id = c.category_id JOIN      Business_Attributes AS ba ON b.business_id = ba.business_id JOIN      Attributes AS a ON ba.attribute_id = a.attribute_id WHERE      b.active = 'true' AND      b.city = 'Chandler' AND      b.state = 'AZ' AND      b.review_count BETWEEN (SELECT AVG(review_count) FROM Business WHERE city = 'Chandler' AND state = 'AZ') - 10 AND      (SELECT AVG(review_count) FROM Business WHERE city = 'Chandler' AND state = 'AZ') + 10;
SELECT c.category_name  FROM Business b  JOIN Business_Categories bc ON b.business_id = bc.business_id  JOIN Categories c ON bc.category_id = c.category_id  WHERE b.active = 'true' AND b.city = 'Surprise' AND b.state = 'AZ';
SELECT B.city, B.state  FROM Business_BusinessHours BH JOIN Days D ON BH.day_id = D.day_id  JOIN Business B ON BH.business_id = B.business_id  WHERE D.day_of_week = 'Friday'  AND BH.opening_time = '8AM'  AND BH.closing_time = '9PM';
SELECT attribute_value FROM Business_Attributes ba JOIN Business b ON ba.business_id = b.business_id WHERE b.active = 'true' AND b.city = 'Mesa' AND b.state = 'AZ' AND b.stars = 3 AND b.review_count >= 100;
SELECT B.opening_time FROM Business_Hours BH JOIN Business B ON BH.business_id = B.business_id WHERE B.active = 'true' AND B.city = 'Chandler' AND B.stars BETWEEN (SELECT AVG(stars) FROM Business WHERE city = 'Chandler') - 1 AND (SELECT AVG(stars) FROM Business WHERE city = 'Chandler') + 1;
SELECT      COUNT(*) FILTER (WHERE business.years < 4) * 100.0 / COUNT(*)  FROM      Business  JOIN      Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN      Categories ON Business_Categories.category_id = Categories.category_id  WHERE      Categories.category_name = 'Accessories'
SELECT Business_Hours.closing_time, Days.day_of_week  FROM Business_Hours  JOIN Business ON Business.business_id = Business_Hours.business_id  JOIN Days ON Days.day_id = Business_Hours.day_id  WHERE Business.active = 'true'  AND Business.city = 'Tempe'  AND Business.stars > (SUM(Business.stars) OVER () / COUNT(Business.business_id)) * 0.7;
SELECT COUNT(*)  FROM Business  WHERE city = 'Phoenix' AND active = 'true';
SELECT COUNT(*)  FROM Business  WHERE `review_count` = 'High';
SELECT COUNT(DISTINCT business_id)  FROM Business_Attributes  WHERE attribute_id IN (SELECT attribute_id FROM Attributes WHERE attribute_name = 'beer_and_wine')
SELECT COUNT(attribute_id)  FROM Business_Attributes  WHERE business_id = 2;
SELECT COUNT(*)  FROM Users_Compliments  WHERE compliment_id = 1 AND number_of_compliments = 'High';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Business.city = 'Phoenix' AND Categories.category_name = 'waiter_services';
SELECT Business_Hours.business_id, Attribute.attribute_name  FROM Business_Hours JOIN Business_Attributes ON Business_Hours.business_id = Business_Attributes.business_id JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE (Business_Hours.opening_time = Business_Hours.closing_time AND Business_Hours.day_id IN (1, 2, 3, 4, 5, 6, 7)) AND COUNT(Business_Hours.day_id) = 7;
SELECT Business.business_id, Business.name  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Fashion'  GROUP BY Business.business_id, Business.name  ORDER BY COUNT(DISTINCT Business.user_id) DESC  LIMIT 1;
SELECT      b.category_name FROM      Business_Categories AS bc JOIN      Business AS b ON bc.business_id = b.business_id WHERE      b.state = 'AZ' AND AVG(CASE WHEN r.review_stars >= 3 THEN 1 ELSE 0 END) OVER (PARTITION BY bc.category_name) > 0.5 GROUP BY      bc.category_name ORDER BY      AVG(CASE WHEN r.review_stars >= 3 THEN 1 ELSE 0 END) DESC;
SELECT      COUNT(CASE WHEN u.user_average_stars = 5 THEN 1 END) / COUNT(CASE WHEN u.user_average_stars = 1 THEN 1 END) AS ratio_best_to_worse_elite FROM      Users u JOIN      Elite e ON u.user_id = e.user_id JOIN      Years y ON u.user_yelping_since_year = y.actual_year WHERE      y.actual_year = 2013;
SELECT      years.actual_year,     (COUNT(CASE WHEN years.actual_year BETWEEN 2005 AND 2013 THEN elites.user_id END) /       COUNT(CASE WHEN years.actual_year = 2014 THEN elites.user_id END)) * 100 AS increment_percentage FROM      years JOIN      elites ON elites.year_id = years.year_id GROUP BY      years.actual_year;
SELECT COUNT(DISTINCT business_id) AS reviewed_business_count,         (EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - user_yelping_since_year) AS years_with_yelp FROM Reviews WHERE user_id = 3;
SELECT      (COUNT(reviews.business_id)) / (EXTRACT(YEAR FROM CURRENT_DATE) - COALESCE(user_yelping_since_year, 0)) as yearly_average_review FROM      Reviews JOIN      Users ON Reviews.user_id = Users.user_id WHERE      Users.user_id = 3;
SELECT      b.business_id,     AVG(r.review_stars) AS avg_reviews FROM      Business b JOIN      Elite e ON b.business_id = e.business_id JOIN      Reviews r ON b.business_id = r.business_id GROUP BY      b.business_id;
SELECT U.user_id, AVG(T.likes) AS average_likes FROM Users U JOIN Elite E ON U.user_id = E.user_id JOIN Years Y ON U.user_id = Y.user_id AND E.year_id = Y.year_id - 1 GROUP BY U.user_id HAVING COUNT(Y.year_id) >= 5;
SELECT      b.business_name,     AVG(r.review_stars) AS average_star FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id JOIN      Reviews r ON b.business_id = r.business_id WHERE      c.category_name = 'Hotel & Travel' GROUP BY      b.business_id,      b.business_name ORDER BY      COUNT(r.review_id) DESC LIMIT      1;
SELECT      AVG(Reviews.review_stars) AS AvgReviewStars,     AVG(Business.stars) AS AvgBusinessStars FROM      Reviews JOIN      Business ON Reviews.business_id = Business.business_id;
SELECT COUNT(*)  FROM Business  WHERE active = 'true';
SELECT business_id FROM Business WHERE city = 'Phoenix' AND review_count = 'Low';
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND active = 'true' AND review_count = 'High';
SELECT business_id FROM Business WHERE stars BETWEEN 3 AND 4 AND city = 'Tempe';
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year >= '2010' AND user_yelping_since_year < '2013' AND user_fans = 'Low';
SELECT review_length  FROM Reviews  WHERE business_id = 1 AND user_id = 60776;
SELECT B.attribute_name  FROM Business_Attributes BA  JOIN Business B ON BA.business_id = B.business_id  JOIN Days D ON B.day_id = D.day_id  JOIN Years Y ON B.year_id = Y.year_id  WHERE B.city = 'Scottsdale' AND B.review_count = 'High'
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Automotive' AND Business.stars < 3;
SELECT B.business_id, B.stars  FROM Business AS B JOIN Business_Categories AS BC ON B.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id WHERE B.active = 'true' AND C.category_name = 'Pets';
SELECT attribute_name FROM Business_Attributes ba JOIN Business b ON ba.business_id = b.business_id WHERE ba.attribute_id = [appropriate_attribute_id] ORDER BY b.stars DESC LIMIT 1;
SELECT Business_Categories.category_name  FROM Reviews  JOIN Business ON Reviews.business_id = Business.business_id  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  WHERE Reviews.review_length = 'Short'  AND Business.business_id BETWEEN 5 AND 10  ORDER BY Reviews.review_stars DESC  LIMIT 1;
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Attributes.attribute_name = 'Wi-Fi' AND Business.active = 'true' AND Business.review_count = 'Medium';
SELECT      b.business_id,      bh.opening_time,      bh.closing_time  FROM      Business b      JOIN Business_Categories bc ON b.business_id = bc.business_id      JOIN Categories c ON bc.category_id = c.category_id      JOIN Business_Hours bh ON b.business_id = bh.business_id  WHERE      c.category_name = 'Restaurants' AND      b.city = 'Gilbert' AND      b.stars = (SELECT MAX(stars) FROM Business WHERE city = 'Gilbert')
SELECT      b.category_id,      c.category_name,      ba.attribute_id,      a.attribute_name FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id JOIN      Business_Attributes ba ON b.business_id = ba.business_id JOIN      Attributes a ON ba.attribute_id = a.attribute_id WHERE      b.active = 'true' AND      b.city = 'Mesa' AND      b.state = 'AZ' AND      b.review_count = 'Low';
SELECT bc.category_id, cat.category_name FROM Business AS b JOIN Business_Attributes AS ba ON b.business_id = ba.business_id JOIN Business_Categories AS bc ON b.business_id = bc.business_id JOIN Categories AS cat ON bc.category_id = cat.category_id WHERE b.active = 'FALSE' AND b.state = 'AZ';
SELECT B.city FROM Business_Hours AS BH JOIN Days AS D ON BH.day_id = D.day_id JOIN Business AS B ON BH.business_id = B.business_id WHERE D.day_of_week = 'Saturday' AND BH.opening_time = '9AM' AND BH.closing_time = '9PM';
SELECT Business_Attributes.attribute_value  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  WHERE Business.active = 'FALSE'  AND Business.review_count = 'Medium'  AND Business.stars = 3.5  AND Business.city = 'Phoenix'  AND Business.state = 'AZ';
SELECT B.business_id, B.active, H.opening_time  FROM Business B  JOIN Business_Hours H ON B.business_id = H.business_id  WHERE B.active = 'true' AND B.city = 'Surprise' AND B.review_count = 'Low';
SELECT      (COUNT(CASE WHEN b.stars < 3 THEN b.business_id END)       OVER ()      / COUNT(CASE WHEN bc.category_name = 'Local Services' THEN b.business_id END)      OVER ()) * 100 AS percentage FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id WHERE      bc.category_name = 'Local Services'
SELECT Business_Hours.closing_time, Days.day_of_week  FROM Business  JOIN Business_Hours ON Business.business_id = Business_Hours.business_id  JOIN Days ON Business_Hours.day_id = Days.day_id  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Categories ON Business.business_id = Categories.business_id  WHERE Business.active = 'true'  AND Business.city = 'Scottsdale'  AND Business.stars > (SELECT AVG(stars) * 0.6 FROM Business);
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year = 2014 AND user_fans = 'None';
SELECT user_id FROM Users_Compliments WHERE compliment_id IN (     SELECT compliment_id FROM Compliments WHERE compliment_type = 'low' ) GROUP BY user_id HAVING COUNT(*) < 5;
SELECT user_id FROM Users WHERE user_average_stars = 4 LIMIT 10;
SELECT B.city FROM Business_Hours AS BH JOIN Business AS B ON B.business_id = BH.business_id JOIN Days AS D ON D.day_id = BH.day_id WHERE D.day_of_week = 'Sunday' AND BH.opening_time = '10AM' AND BH.closing_time = '12PM';
SELECT COUNT(*)  FROM Business_Attributes  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  JOIN Business ON Business_Attributes.business_id = Business.business_id  WHERE Attributes.attribute_name = 'Open 24 Hours' AND Attributes.attribute_value = 'true'
SELECT b.business_id  FROM Business AS b JOIN Business_Attributes AS ba ON b.business_id = ba.business_id WHERE ba.attribute_value IN ('Good for Groups', 'Good for Dancing')  AND b.active = true;
SELECT B.business_id, B.name  FROM Business AS B JOIN Business_Categories AS BC ON B.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id JOIN Days AS D ON B.day_id = D.day_id WHERE B.active = 'true' AND C.category_name = 'Ahwatukee' AND D.day_of_week = 'Sunday';
SELECT DISTINCT c.category_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.active = 'true' AND b.state != 'AZ';
SELECT Business_Categories.category_name  FROM Business_Categories  JOIN Business ON Business_Categories.business_id = Business.business_id  WHERE Business.review_count = 'High' AND Business.stars = 2;
SELECT COUNT(*)  FROM Business_Attributes  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  JOIN Business_Categories ON Business_Attributes.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Attributes.attribute_name = 'ambience_romantic' AND Attributes.attribute_value = 'true';
SELECT B.city FROM Business_Hours AS BH JOIN Business AS B ON B.business_id = BH.business_id JOIN Days AS D ON D.day_id = BH.day_id WHERE BH.opening_time = '1PM' AND BH.closing_time = '6PM' AND D.day_of_week = 'Saturday';
SELECT MAX(T2.likes) AS max_likes, T1.user_id AS fan_id FROM Users AS T1 JOIN Tips AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id ORDER BY max_likes DESC LIMIT 1;
SELECT B.city FROM Business_Hours AS H JOIN Business AS B ON H.business_id = B.business_id JOIN Days AS D ON D.day_id = H.day_id WHERE D.day_of_week = 'Saturday' AND H.opening_time = '12AM' AND H.closing_time = '1AM';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Shopping Centers' AND Business.review_count = 'High';
SELECT COUNT(*)  FROM Business_Attributes  WHERE attribute_id IN (     SELECT attribute_id      FROM Attributes      WHERE attribute_name = 'Accepts Insurance' AND attribute_value = 'true' ) AND attribute_value = 'true';
SELECT      AVG(Review.Stars) AS Average_Review_Stars FROM      Business  JOIN      Reviews ON Business.Business_ID = Reviews.Business_ID WHERE      Business.State IN ('SC', 'CA')
SELECT      (COUNT(CASE WHEN d.day_of_week = 'Monday' THEN b.business_id END) -       COUNT(CASE WHEN d.day_of_week = 'Tuesday' THEN b.business_id END)) AS diff_open_businesses FROM      Business b JOIN      Business_Hours bh ON b.business_id = bh.business_id JOIN      Days d ON d.day_id = bh.day_id WHERE      bh.opening_time = '10AM' AND      bh.closing_time = '9PM'
SELECT attribute_id FROM Attributes WHERE attribute_name = 'Accepts Insurance';
SELECT COUNT(*)  FROM Business  WHERE city = 'Phoenix' AND active = 'true';
SELECT COUNT(*)  FROM Business  WHERE stars = 4 AND city = 'Mesa';
SELECT COUNT(*)  FROM Business  WHERE city = 'Gilbert' AND stars > 3;
SELECT business_id FROM Business WHERE city = 'Gilbert' AND active = 'true' AND review_count = (SELECT MAX(review_count) FROM Business WHERE city = 'Gilbert' AND active = 'true');
SELECT COUNT(*)  FROM Reviews  JOIN Business ON Reviews.business_id = Business.business_id  WHERE Business.city = 'Tempe'  AND Business.stars = 3.5  AND Business.review_count = 'Uber'  AND Reviews.review_length = 'Long';
SELECT      b.business_id,      a.attribute_value AS noise_level FROM      Business_Attributes a JOIN      Business b ON a.business_id = b.business_id JOIN      Attributes at ON a.attribute_id = at.attribute_id WHERE      b.city = 'Mesa' AND     b.review_count = 'Uber' AND     at.attribute_name = 'Noise Level';
SELECT      b.business_id,     a.attribute_value FROM     Business_Attributes AS ba JOIN     Attributes AS a ON ba.attribute_id = a.attribute_id JOIN     Business AS b ON ba.business_id = b.business_id WHERE     b.business_id = 14033 AND     a.attribute_name = 'good_for_dinner';
SELECT      Business_Hours.opening_time, Business_Hours.closing_time FROM      Business_Hours JOIN      Days ON Business_Hours.day_id = Days.day_id WHERE      Business_Hours.business_id = '15098' AND Days.day_of_week = 'Monday';
SELECT business_id FROM Reviews WHERE review_stars = 5 AND review_votes_funny = 'Uber' AND business_id IN (     SELECT business_id     FROM Business     WHERE city = 'Phoenix' );
SELECT B.city FROM Tips T JOIN Business B ON T.business_id = B.business_id WHERE T.tip_length = 'Medium' AND T.likes = 3;
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year = '2010' AND user_average_stars = '4.5' AND user_fans >= (SELECT MAX(fans) FROM Users);
SELECT COUNT(*)  FROM Users_Compliments  JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id  WHERE Compliments.compliment_type = 'cool' AND Users_Compliments.user_id = 41717;
SELECT COUNT(*)  FROM Business_Attributes  WHERE business_id = '12476'  AND attribute_id IN (SELECT attribute_id FROM Attributes WHERE attribute_name = 'parking_lot');
SELECT      b.business_id FROM      Business_Attributes ba JOIN      Business b ON ba.business_id = b.business_id JOIN      Attributes a ON ba.attribute_id = a.attribute_id WHERE      b.business_id = '12476' AND     a.attribute_name = 'payment_types' AND     ba.attribute_value = 'payment_types_mastercard';
SELECT      (COUNT(CASE WHEN c.category_name = 'Pets' THEN b.business_id END)::decimal / COUNT(b.business_id)) * 100 AS pets_category_percentage FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id;
SELECT      COUNT(CASE WHEN category_name = 'Women''s Clothing' THEN 1 END) /      COUNT(CASE WHEN category_name = 'Men''s Clothing' THEN 1 END) AS times FROM      Business_Categories JOIN      Categories ON Business_Categories.category_id = Categories.category_id;
SELECT business_id, active, city  FROM Business  WHERE state = 'CA';
SELECT      (COUNT(CASE WHEN active = 'true' THEN business_id END) * 100.0 / COUNT(business_id)) AS percentage_running_business FROM      Business;
SELECT attribute_id, attribute_name  FROM Attributes  WHERE attribute_name LIKE 'music%';
SELECT year_id FROM Elite WHERE year_id BETWEEN 2006 AND 2007 GROUP BY year_id ORDER BY COUNT(user_id) DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN uco.number_of_compliments = 'Low' THEN uco.user_id ELSE NULL END)      OVER ()      / COUNT(DISTINCT uco.user_id)      OVER ()) * 100 AS percentage_low_compliments FROM      Users_Compliments uco;
SELECT business_id, user_id  FROM Reviews  WHERE review_votes_cool = 'Uber';
SELECT U.user_id, B.business_id, T.tip_length  FROM Users U  JOIN Tips T ON U.user_id = T.user_id  WHERE U.user_yelping_since_year = '2004' AND U.user_fans = 'High';
SELECT      b.business_id,     b.active,     u.user_id,     u.user_yelping_since_year FROM      Reviews r JOIN      Business b ON r.business_id = b.business_id JOIN      Users u ON r.user_id = u.user_id WHERE      r.review_votes_funny = 'Uber' AND      r.review_votes_cool = 'Uber' AND      r.review_length > 100; -- Assuming 100 characters as long review length
SELECT attribute_id, business_id, city, active  FROM Business_Attributes ba  JOIN Attributes a ON ba.attribute_id = a.attribute_id  WHERE a.attribute_name = 'music_playlist' AND ba.attribute_value = 'true';
SELECT      (COUNT(CASE WHEN attribute_name = 'Accepts Credit Cards' THEN 1 END) * 100.0 / COUNT(business_id)) as percentage FROM Business_Attributes;
SELECT U.user_id, R.review_length  FROM Users AS U JOIN Business AS B ON U.user_id = B.user_id JOIN Reviews AS R ON B.business_id = R.business_id WHERE B.city = 'San Tan Valley' AND B.active = 'false' AND R.review_stars = 5;
SELECT user_average_stars, Elite.year_id, Compliments.compliment_type  FROM Users  JOIN Elite ON Users.user_id = Elite.user_id  JOIN Users_Compliments ON Users.user_id = Users_Compliments.user_id  JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id  WHERE Users.user_id = 6027 AND Users_Compliments.number_of_compliments = 'Uber';
SELECT      b.business_id,      b.state,      b.city  FROM      Business b  JOIN      Business_Categories bc ON b.business_id = bc.business_id  JOIN      Categories c ON bc.category_id = c.category_id  WHERE      c.category_name = 'Coffee & Tea'  LIMIT 5;
SELECT      c.category_name  FROM      Categories c  JOIN      Business_Categories bc ON c.category_id = bc.category_id  GROUP BY      c.category_name  HAVING      (COUNT(bc.business_id) / (SELECT COUNT(*) FROM Business_Categories)) * 100 > 10;
SELECT U.user_id, U.user_fans  FROM Business AS B  JOIN Reviews AS R ON B.business_id = R.business_id  JOIN Users AS U ON R.user_id = U.user_id  WHERE B.city = 'Sun Lakes' AND B.stars = 5;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name IN ('Men''s Clothing', 'Women''s Clothing') GROUP BY Categories.category_name;
SELECT      c.compliment_type, u.user_fans FROM      Users_Compliments uc JOIN      Compliments c ON uc.compliment_id = c.compliment_id JOIN      Users u ON uc.user_id = u.user_id WHERE      uc.user_id < 100 AND u.user_yelping_since_year = (SELECT MAX(user_yelping_since_year) FROM Users WHERE user_id < 100) AND c.number_of_compliments = (SELECT MAX(number_of_compliments) FROM Compliments);
SELECT B.business_id  FROM Business_Hours AS BH  JOIN Business AS B ON BH.business_id = B.business_id  WHERE BH.closing_time = '8PM' AND B.active = 0;
SELECT COUNT(*)  FROM Business  WHERE stars = 2 AND city = 'Phoenix' AND state = 'AZ';
SELECT COUNT(*)  FROM Business  WHERE city = 'Tempe' AND stars > 3;
SELECT user_id FROM Users WHERE user_average_stars < 3 AND user_yelping_since_year = 2012;
SELECT      (COUNT(CASE WHEN business.stars = 5 THEN business.business_id END)       / CAST(COUNT(business.business_id) AS REAL)) * 100 AS five_star_percentage FROM      Business;
SELECT      MAX(Reviews.review_count) - MIN(Reviews.review_count) AS review_difference FROM      Reviews;
SELECT B.business_id, B.name  FROM Business AS B JOIN Business_Categories AS BC ON B.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id WHERE C.category_name = 'Tires' AND COUNT(DISTINCT B.opening_time) = 7;
SELECT user_id FROM Elite WHERE year_id = 2012;
SELECT B.business_id  FROM Business AS B JOIN Business_Categories AS BC ON B.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id WHERE C.category_name = 'Shopping' AND B.stars = 4;
SELECT COUNT(*)  FROM Business_Hours  WHERE day_of_week = 'Sunday' AND label_time_10 = 'Low';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id   JOIN Reviews ON Business.business_id = Reviews.business_id  JOIN Users ON Reviews.user_id = Users.user_id  WHERE Cities = 'Glendale' AND Business.user_id = 20241;
SELECT B.city FROM Business B JOIN Business_Categories BC ON B.business_id = BC.business_id JOIN Categories C ON BC.category_id = C.category_id WHERE C.category_name = 'Pet Services';
SELECT COUNT(DISTINCT uc.user_id) FROM Users_Compliments uc JOIN Compliments c ON uc.compliment_id = c.compliment_id JOIN Reviews r ON r.user_id = uc.user_id WHERE c.compliment_type = 'photos' AND r.review_votes_cool = 'High';
SELECT COUNT(*)  FROM Business  WHERE active = 'false' AND EXISTS (   SELECT 1    FROM Business_Attributes    WHERE Business_Attributes.business_id = Business.business_id    GROUP BY Business_Attributes.business_id    HAVING COUNT(Business_Attributes.attribute_id) > 10 )
SELECT Business.name FROM Business JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE Attributes.attribute_name = 'Alcohol' AND Business.city = 'Mesa';
SELECT      COUNT(*) FILTER (WHERE business_id IN (         SELECT b.business_id         FROM Business b         JOIN Business_locations bl ON b.business_id = bl.business_id         WHERE bl.city = 'Phoenix'         AND EXISTS (             SELECT 1 FROM Reviews r WHERE r.business_id = b.business_id AND r.review_votes_funny = 'Low'         )     )) * 100.0 / COUNT(*) AS low_funny_votes_percentage FROM Business b JOIN Business_locations bl ON b.business_id = bl.business_id WHERE bl.city = 'Phoenix'
SELECT      (COUNT(CASE WHEN c.category_name = 'Shopping' THEN b.business_id END) /       COUNT(CASE WHEN c.category_name = 'Pets' THEN b.business_id END)) * 100 AS ratio FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Banks & Credit Unions';
SELECT COUNT(*)  FROM Business  WHERE city = 'Casa Grande' AND active = 'true';
SELECT opening_time  FROM Business_Hours  WHERE business_id = 12 AND day_of_week = 'Monday';
SELECT COUNT(*)  FROM Business_Attributes  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  JOIN Business_Categories ON Business_Attributes.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Attributes.attribute_name = 'Good for Kids' AND Attributes.attribute_value = 'true';
SELECT B.business_id, B.name  FROM Business AS B JOIN Business_Attributes AS BA ON B.business_id = BA.business_id JOIN Attributes AS A ON BA.attribute_id = A.attribute_id WHERE A.attribute_name = 'active' AND BA.attribute_value = 'true'  AND B.city = 'Gilbert' ORDER BY B.review_count DESC, B.stars DESC LIMIT 1;
SELECT Business.category_name  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  WHERE Business.city = 'Ahwatukee' AND Business.stars = 5;
SELECT      (COUNT(CASE WHEN business.stars > 3 AND business.active = 'false' THEN business.business_id ELSE NULL END)      / COUNT(CASE WHEN business.active = 'false' THEN business.business_id ELSE NULL END)) * 100 AS percent_wonderful_experience FROM      Business business WHERE      business.city = 'Avondale';
SELECT U.user_id, U.user_yelping_since_year, E.year_id  FROM Users U  JOIN Elite E ON U.user_id = E.user_id  WHERE U.user_yelping_since_year = 2004;
SELECT      (COUNT(CASE WHEN R.review_length = 'Long' AND R.review_stars = 5 THEN R.business_id ELSE NULL END)      / COUNT(DISTINCT R.business_id)) * 100 AS long_reviews_percentage FROM      Reviews R
SELECT      COUNT(*) * 100.0 / (         SELECT COUNT(*)         FROM Users         WHERE user_average_stars >= 4     ) AS percentage FROM Users WHERE user_average_stars >= 4 AND user_fans = 'None'
SELECT COUNT(*)  FROM Tips  JOIN Business_Categories ON Business_Categories.business_id = Tips.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Tips.business_id = 2 AND Categories.category_name = 'Short tips' AND Tips.tip_length = 'Short';
SELECT user_id FROM Users WHERE user_average_stars = 5 AND user_yelping_since_year = (SELECT MIN(user_yelping_since_year) FROM Users);
SELECT B.business_id, B.city, B.state, B.stars, B.review_count, H.opening_time, H.closing_time FROM Business B JOIN Business_Hours H ON B.business_id = H.business_id WHERE B.city = 'Black Canyon City' AND B.review_count > (SELECT AVG(review_count) FROM Business WHERE city = 'Black Canyon City');
SELECT      (COUNT(CASE WHEN u.user_id IN (         SELECT uc.user_id          FROM Users_Compliments uc          WHERE uc.compliment_id = (             SELECT c.compliment_id              FROM Compliments c              WHERE c.compliment_type = 'cute'         ) AND uc.number_of_compliments = 'High'     )) / COUNT(DISTINCT u.user_id)) * 100 AS cute_compliment_percentage FROM Users u;
SELECT COUNT(*)  FROM Business  WHERE business_id NOT IN (SELECT business_id FROM Business_Attributes WHERE attribute_value IN ('none', 'no', 'false'))
SELECT opening_time, closing_time  FROM Business_Hours  WHERE business_id = 1 AND day_id = 2;
SELECT DISTINCT B.city  FROM Business AS B  JOIN Reviews AS R ON B.business_id = R.business_id  WHERE R.review_length = 'Medium';
SELECT Business_Hours.closing_time  FROM Business_Hours  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business_Hours.business_id = 4 AND Days.day_of_week = 'Sunday';
SELECT * FROM Business  JOIN Reviews ON Business.business_id = Reviews.business_id  WHERE Reviews.review_length = 'Short' AND Business.city = 'Phoenix';
SELECT COUNT(*)  FROM Users  WHERE user_fans = 'Medium'  AND number_of_compliments = 'High';
SELECT U.user_id  FROM Users_Compliments UC  JOIN Users U ON UC.user_id = U.user_id  WHERE UC.compliment_id = 'Low' AND U.user_yelping_since_year = 2012;
SELECT COUNT(*)  FROM Business  WHERE business_id NOT IN (SELECT business_id FROM Business_Attributes WHERE attribute_value != 'None')  AND city = 'Gilbert';
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Attributes.attribute_name = 'full_bar' AND Business.stars >= (SELECT AVG(stars) FROM Business);
SELECT DISTINCT B.state  FROM Business B  JOIN Business_Hours BH ON B.business_id = BH.business_id  WHERE BH.opening_time = '01:00'
SELECT T2.category_name FROM Business_Categories AS T1 JOIN Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.business_id = 5;
SELECT user_id  FROM Users_Compliments  WHERE compliment_type = 'photos';
SELECT      (COUNT(CASE WHEN T2.tip_length = 'Medium' THEN 1 END) / COUNT(T2.tip_length)) * 100 AS percentage,     T1.user_yelping_since_year FROM      Users AS T1 JOIN      Tips AS T2 ON T1.user_id = T2.user_id WHERE      T2.tip_length = 'Medium' GROUP BY      T1.user_yelping_since_year;
SELECT      (COUNT(business_id) FILTER (WHERE city = 'Mesa') / COUNT(T1.business_id) * 100) AS percentage,     GROUP_CONCAT(DISTINCT attribute_value ORDER BY business_id) AS attribute_values FROM      Business JOIN      Business_Attributes ON Business.business_id = Business_Attributes.business_id WHERE      T1.city = 'Mesa';
SELECT DISTINCT B.state  FROM Business B  JOIN Business_Hours BH ON B.business_id = BH.business_id  WHERE BH.closing_time = '24:00'
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Attributes.attribute_name = 'beer_and_wine' AND Business.city = 'Peoria';
SELECT U.user_id, U.user_yelping_since_year  FROM Users_Compliments UC  JOIN Users U ON UC.user_id = U.user_id  WHERE UC.number_of_compliments = 'High'  ORDER BY U.user_yelping_since_year ASC  LIMIT 1;
SELECT business_id FROM Reviews GROUP BY business_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT y.actual_year  FROM Years y  JOIN Elite e ON y.year_id = e.year_id  GROUP BY y.actual_year  ORDER BY COUNT(e.user_id) DESC  LIMIT 1;
SELECT COUNT(*)  FROM Reviews  WHERE business_id IN (     SELECT business_id      FROM Business      WHERE stars = 5.0 ) AND review_stars = 5.0 AND review_votes_funny = 'uber';
SELECT COUNT(*)  FROM Users  WHERE user_id IN (     SELECT DISTINCT user_id      FROM Reviews      WHERE review_votes_funny = 'uber' )
SELECT business_id FROM Business_Hours WHERE SUBTRACT(closing_time, opening_time) = (     SELECT MIN(SUBTRACT(closing_time, opening_time))     FROM Business_Hours );
SELECT business_id FROM Business_Hours WHERE day_id BETWEEN 1 AND 7 AND opening_time = closing_time;
SELECT      b.business_id,     u.user_id,     t.tip_length,     c.category_name,     COUNT(CASE WHEN t.tip_length > AVG(t.tip_length) THEN 1 END) AS num_likes_longer_than_avg,     COUNT(CASE WHEN t.tip_length <= AVG(t.tip_length) THEN 1 END) AS num_likes_shorter_or_equal_to_avg FROM     Tips t JOIN     Business_Categories bc ON t.business_id = bc.business_id JOIN     Categories c ON bc.category_id = c.category_id JOIN     Business b ON t.business_id = b.business_id JOIN     Users u ON t.user_id = u.user_id WHERE     c.category_name = 'Hotels & Travel' GROUP BY     b.business_id,     u.user_id,     t.tip_length,     c.category_name;
SELECT user_average_stars  FROM Users  WHERE user_id IN (     SELECT DISTINCT u.user_id      FROM Users u      JOIN Reviews r ON u.user_id = r.user_id      WHERE r.review_votes_funny = 'uber' AND r.review_votes_useful = 'uber' AND r.review_votes_cool = 'uber' );
SELECT      (COUNT(CASE WHEN business.stars BETWEEN 3.5 AND 5 THEN business.business_id ELSE NULL END)      OVER ()::float / COUNT(CASE WHEN business.stars BETWEEN 1 AND 2.5 THEN business.business_id ELSE NULL END) OVER ())::float AS star_ratio FROM      Business JOIN      Business_Hours ON business.business_id = Business_Hours.business_id WHERE      Business_Hours.day_id BETWEEN 1 AND 7 AND Business_Hours.opening_time = Business_Hours.closing_time;
SELECT      b.business_id,     COUNT(r.user_id) AS review_count,     bc.category_name FROM     Business AS b JOIN     Business_Categories AS bc ON b.business_id = bc.business_id JOIN     Reviews AS r ON b.business_id = r.business_id GROUP BY     b.business_id,     bc.category_name ORDER BY     review_count DESC,     b.business_id LIMIT 10;  SELECT      DISTINCT bc.category_name  FROM     Business_Categories AS bc ORDER BY      COUNT(bc.category_name) DESC LIMIT 3;
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Business_Hours ON Business.business_id = Business_Hours.business_id  JOIN Checkins ON Business.business_id = Checkins.business_id  JOIN Reviews ON Business.business_id = Reviews.business_id  WHERE Business.state = 'Arizona' AND AVG(Reviews.review_stars) < 3.0;
SELECT      (COUNT(users.user_id) - COUNT(Elite.user_id)) * 100.0 / COUNT(users.user_id) AS percentage_not_elite FROM      Users;
SELECT U.user_id, C.compliment_type  FROM Users_Compliments UC JOIN Compliments C ON UC.compliment_id = C.compliment_id JOIN Users U ON U.user_id = UC.user_id WHERE U.user_fans = 'uber' GROUP BY C.compliment_type ORDER BY COUNT(UC.compliment_id) DESC LIMIT 1;
SELECT AVG(`user_yelping_since_year`)  FROM `Users`  WHERE `user_fans` = 'uber';
SELECT AVG(year_id)  FROM Elite;
SELECT      COUNT(*) AS total_businesses,     (COUNT(*) FILTER (WHERE active = 'true' AND city = 'Mesa' AND SUBTRACT(Business_Hours.closing_time, Business_Hours.opening_time) > 8)     ) / COUNT(*) * 100 AS percentage_of_active_businesses_more_than_8_hours_in_Mesa FROM     Business JOIN Business_Hours ON Business.business_id = Business_Hours.business_id WHERE     Business.city = 'Mesa'     AND SUBTRACT(Business_Hours.closing_time, Business_Hours.opening_time) > 8;
SELECT      c.category_name  FROM      Business b  JOIN      Business_Hours bh ON b.business_id = bh.business_id  JOIN      Days d ON bh.day_id = d.day_id  JOIN      Business_Categories bc ON b.business_id = bc.business_id  JOIN      Categories c ON bc.category_id = c.category_id  WHERE      b.active = 'true' AND      bh.opening_time >= '17:00' AND      d.day_of_week LIKE '%Phoenix%'  GROUP BY      c.category_name  ORDER BY      COUNT(b.business_id) DESC  LIMIT 3;
SELECT user_id FROM Reviews JOIN Business_Attributes ON Reviews.business_id = Business_Attributes.business_id JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE Attributes.attribute_name = 'Delivery' GROUP BY user_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AVG(T2.review_count)  FROM Business AS T1  JOIN Reviews AS T2 ON T1.business_id = T2.business_id  WHERE T1.active = 'true' AND (     SELECT SUM(CLOSING_TIME - OPENING_TIME)      FROM Business_Hours AS T3      WHERE T1.business_id = T3.business_id ) < 30;
SELECT COUNT(DISTINCT business_id)  FROM Business_Hours  WHERE opening_time = '8AM' AND closing_time = '6PM';
SELECT B.business_id  FROM Business_Hours B  JOIN Days D ON B.day_id = D.day_id  WHERE B.opening_time = '10AM' AND D.day_of_week = 'Saturday';
SELECT B.business_id, D.day_id  FROM Business H  JOIN Business_Hours BH ON H.business_id = BH.business_id  JOIN Days D ON D.day_id = BH.day_id  WHERE BH.opening_time = '8AM' AND BH.closing_time = '6PM';
SELECT COUNT(DISTINCT business_id)  FROM Reviews  WHERE review_stars > 4;
SELECT bc.category_id, c.category_name  FROM Business_Hours bh  JOIN Business b ON bh.business_id = b.business_id  JOIN Days d ON bh.day_id = d.day_id  JOIN Business_Categories bc ON b.business_id = bc.business_id  JOIN Categories c ON bc.category_id = c.category_id  WHERE d.day_of_week = 1;
SELECT B_H.day_id FROM Business_Hours AS B_H JOIN Business_Categories AS B_C ON B_H.business_id = B_C.business_id JOIN Categories AS C ON B_C.category_id = C.category_id WHERE C.category_name = 'Pets';
SELECT bh.closing_time, dh.day_of_week  FROM Business_Categories bc  JOIN Business b ON bc.business_id = b.business_id  JOIN Business_Hours bh ON b.business_id = bh.business_id  JOIN Days dh ON bh.day_id = dh.day_id  WHERE bc.category_id IN (SELECT category_id FROM Categories WHERE category_name = 'Doctors')
SELECT      b.category_name,     COUNT(DISTINCT CASE WHEN d.day_id BETWEEN 2 AND 7 THEN c.business_id END) AS working_days FROM     Business_Categories AS c JOIN     Business AS b ON c.business_id = b.business_id JOIN     Days AS d ON c.day_id = d.day_id GROUP BY     b.category_name ORDER BY     working_days DESC;
SELECT B.business_id  FROM Business_Hours AS BH  JOIN Business_Categories AS BC ON BH.business_id = BC.business_id  JOIN Categories AS C ON BC.category_id = C.category_id  WHERE C.category_name = 'Arts & Entertainment'  AND BH.day_id = (SELECT day_id FROM Days WHERE day_of_week = 'Sunday')
SELECT COUNT(DISTINCT business_id)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  WHERE Business_Categories.category_id IN (     SELECT category_id FROM Categories WHERE category_name = 'DJs' ) AND Business.stars < 5;
SELECT bh.business_id  FROM Business_Hours bh  JOIN Business b ON bh.business_id = b.business_id  WHERE bh.opening_time = '7AM' AND bh.closing_time = '8PM' AND b.active = 'true';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Stadiums & Arenas' AND Business.stars = (SELECT MAX(stars) FROM Business);
SELECT COUNT(DISTINCT bc.category_id) FROM Business_Categories AS bc JOIN Business AS b ON bc.business_id = b.business_id WHERE b.stars > 2 AND b.review_count < 5;
SELECT B.business_id  FROM Business_Businesses AS B  JOIN Business_Categories AS BC ON B.business_id = BC.business_id  JOIN Categories AS C ON BC.category_id = C.category_id  WHERE C.category_name = 'Accessories' AND B.opening_time < '7AM'
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Days ON Business.business_id = Business_Hours.business_id AND Business_Hours.day_id = Days.day_id  WHERE Business.state = 'Arizona' AND Business.active = 'true' AND Business_Hours.opening_time > '12PM';
SELECT B.name  FROM Business AS B  JOIN Business_Categories AS BC ON B.business_id = BC.business_id  JOIN Categories AS C ON BC.category_id = C.category_id  WHERE BC.user_id = '16328';
SELECT      COUNT(*) AS total_food_businesses,     SUM(CASE WHEN stars < 2 THEN 1 ELSE 0 END) AS less_than_two_stars,     (SUM(CASE WHEN stars < 2 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_less_than_two_stars FROM     Business JOIN     Business_Categories ON Business.business_id = Business_Categories.business_id JOIN     Categories ON Business_Categories.category_id = Categories.category_id WHERE     Categories.category_name = 'Food'
SELECT      (COUNT(CASE          WHEN b.category_id IN (             SELECT c.category_id              FROM Categories c              WHERE c.category_name = 'Food'         ) AND bh.opening_time BETWEEN '07:00:00' AND '20:00:00'     END) * 100 / COUNT(CASE          WHEN bh.opening_time BETWEEN '07:00:00' AND '20:00:00'     END)) AS percentage FROM      Business_Attributes ba JOIN      Business_Hours bh ON ba.business_id = bh.business_id JOIN      Business_Categories bc ON ba.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id WHERE      c.category_name = 'Food';
SELECT      COUNT(business_id) AS total_running_business,     CASE         WHEN `review_count` = 'High' THEN 'High'         WHEN `review_count` = 'Medium' THEN 'Medium'         WHEN `review_count` = 'Low' THEN 'Low'     ELSE 'Other'     END AS review_count_category FROM      Business WHERE      `city` = 'Cave Creek' AND `active` = 'true' GROUP BY      review_count_category;
SELECT AVG(user_id)  FROM Users  WHERE user_yelping_since_year BETWEEN '2005' AND '2014';
SELECT      (COUNT(CASE WHEN business.active = 'true' AND business.review_count = 'Low' THEN business.business_id END) :: REAL) /      (COUNT(CASE WHEN business.active = 'false' AND business.review_count = 'Low' THEN business.business_id END) :: REAL) AS active_inactive_ratio FROM      Business business;
SELECT user_id FROM Elite WHERE year_id = '2006' LIMIT 5;
SELECT category_id, category_name  FROM Categories  WHERE category_name LIKE 'P%';
SELECT U.user_id, R.review_stars FROM Users U JOIN Reviews R ON U.user_id = R.user_id WHERE R.review_length = 'medium' AND R.business_id = 35;
SELECT Business_Attributes.business_id, Business_Attributes.attribute_value  FROM Business_Attributes JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE Attributes.attribute_name = 'payment_types_visa';
SELECT B.business_id, B.active  FROM Business_BusinessCategories BBC  JOIN Categories C ON BBC.category_id = C.category_id  JOIN Business B ON BBC.business_id = B.business_id  WHERE C.category_name = 'Diagnostic Imaging';
SELECT U.user_id  FROM Users U  JOIN Reviews R ON U.user_id = R.user_id  WHERE R.business_id = 143 AND R.review_stars = 5;
SELECT user_id, user_yelping_since_year  FROM Users_Compliments  JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id  WHERE compliment_type = 'profile' AND number_of_compliments = 'Uber'  LIMIT 5;
SELECT U.user_id, B.business_id  FROM Users U  JOIN Tips T ON U.user_id = T.user_id  WHERE T.likes = (SELECT MAX(likes) FROM Tips)
SELECT U.user_id, COUNT(UC.compliment_id) AS number_of_compliments FROM Users U JOIN Users_Compliments UC ON U.user_id = UC.user_id JOIN Compliments C ON UC.compliment_id = C.compliment_id WHERE U.user_id IN (SELECT user_id FROM Elite WHERE year_id BETWEEN 2005 AND 2014) AND C.compliment_type = 'photos' GROUP BY U.user_id;
SELECT      (COUNT(CASE          WHEN Bh.opening_time = '9AM' AND Bh.closing_time = '9PM' AND Db.day_of_week = 'Sunday' THEN 1     END)      / COUNT(CASE          WHEN Db.day_of_week = 'Sunday' THEN 1     END)) * 100 AS percentage FROM      Business_Hours Bh  JOIN      Days Db ON Bh.day_id = Db.day_id;
SELECT B.business_id, D.day_of_week  FROM Business AS B  JOIN Business_Hours AS BH ON B.business_id = BH.business_id  JOIN Days AS D ON BH.day_id = D.day_id  WHERE B.city = 'Black Canyon City' AND B.active = 'true';
SELECT user_id, review_length  FROM Users  WHERE user_yelping_since_year = 2004 AND user_average_stars = 5;
SELECT B.business_id, B.active, B.city  FROM Business AS B JOIN Reviews AS R ON B.business_id = R.business_id WHERE (R.stars > 4) AND (DIVIDE(SUM(R.stars > 4), COUNT(R.business_id)) = 0.65)
SELECT      SUM(CASE          WHEN B.city = 'Glendale' AND B.active = 'true' THEN 1          ELSE 0      END) -      SUM(CASE          WHEN B.city = 'Mesa' AND B.active = 'true' THEN 1          ELSE 0      END) AS difference_in_running_businesses FROM Business B;
SELECT COUNT(T2.likes)  FROM Users AS T1  JOIN Tips AS T2 ON T1.user_id = T2.user_id  WHERE T1.user_yelping_since_year = 2010 AND T2.tip_length = 'Short';
SELECT      tip_length FROM      Users  JOIN      Reviews ON Users.user_id = Reviews.user_id WHERE      Users.user_average_stars = 3 GROUP BY      tip_length ORDER BY      COUNT(Reviews.user_id) DESC LIMIT 1;
SELECT SUM(T2.likes)  FROM Reviews AS T1  JOIN Tips AS T2 ON T1.business_id = T2.business_id  WHERE T1.review_length = 'Short' AND T1.business_id IN (     SELECT business_id      FROM Business      WHERE city = 'Goodyear' )
SELECT DISTINCT B.state  FROM Business AS B  JOIN Reviews AS R ON B.business_id = R.business_id  WHERE R.review_length = 'Long';
SELECT      AVG(DATE_DIFF(`closing_time`, `opening_time`, MINUTE)) AS avg_operating_time_per_day  FROM      `Business_Hours`  JOIN      `Business` ON `Business.business_id` = `Business_Hours.business_id`  WHERE      `Business.city` = 'El Mirage' AND `Business.state` = 'AZ';
SELECT Business_Hours.closing_time  FROM Business  JOIN Business_Hours ON Business.business_id = Business_Hours.business_id  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business.state = 'SC';
SELECT bc.category_name  FROM Business_Categories AS bc  JOIN Business AS b ON bc.business_id = b.business_id  WHERE b.stars = 5;
SELECT DISTINCT state FROM Business JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE Attributes.attribute_name = 'beer_and_wine';
SELECT COUNT(*)  FROM Users_Compliments  JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id  WHERE Compliments.compliment_type = 'photo' AND Users_Compliments.number_of_compliments = 'Medium';
SELECT B.business_id  FROM Business_Attributes BA  JOIN Business B ON BA.business_id = B.business_id  JOIN Attributes A ON BA.attribute_id = A.attribute_id  WHERE A.attribute_name = 'Wi-Fi' AND A.attribute_value = 'true' AND B.state = 'SC';
SELECT COUNT(*)  FROM Business_Attributes  WHERE attribute_id IN (     SELECT attribute_id      FROM Attributes      WHERE attribute_name = 'ambience_romantic' AND attribute_value = 'true' ) AND business_id IN (     SELECT business_id      FROM Business      WHERE active = 1 );
SELECT      (COUNT(CASE WHEN attribute_name = 'Good for Kids' AND attribute_value = 'true' THEN 1 END)      / NULLIF(COUNT(business_id), 0)) * 100 AS percentage FROM      Business_Attributes WHERE      attribute_name = 'Good for Kids';
SELECT COUNT(*)  FROM Business  WHERE city = 'Mesa' AND active = 'true';
SELECT COUNT(DISTINCT business_id)  FROM Reviews  WHERE review_stars IN (2, 1);
SELECT B.business_id  FROM Business AS B  JOIN Business_Categories AS BC ON B.business_id = BC.business_id  WHERE BC.category_id IN (SELECT category_id FROM Categories WHERE category_name = 'Paradise Valley')  AND B.city = 'Paradise Valley'  AND B.review_count = 'Low'  AND B.stars > 3;
SELECT COUNT(*)  FROM Business_Attributes  WHERE attribute_value > 1;
SELECT COUNT(*)  FROM Business_Hours  WHERE (closing_time - opening_time) = (     SELECT MIN(TIMESTAMPDIFF(HOUR, opening_time, closing_time))      FROM Business_Hours      WHERE day_id BETWEEN 1 AND 7 )
SELECT COUNT(*)  FROM Reviews  WHERE business_id IN (     SELECT business_id      FROM Business      WHERE active = 'true' )  AND review_votes_funny = 'Uber';
SELECT COUNT(*)  FROM Users  WHERE `user_fans` = 'None' AND `number_of_compliments` = 'High';
SELECT compliment_type FROM Users_Compliments GROUP BY compliment_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT U.user_id, U.user_average_stars  FROM Users AS U JOIN Tips AS T ON U.user_id = T.user_id WHERE T.likes = (SELECT MAX(likes) FROM Tips) LIMIT 3;
SELECT bc.category_id, c.category_name  FROM Business_Categories AS bc JOIN Business AS b ON bc.business_id = b.business_id JOIN Categories AS c ON bc.category_id = c.category_id WHERE b.city = 'Arcadia' AND COUNT(*) = 1;
SELECT B.business_id  FROM Business_Hours BH  JOIN Days D ON BH.day_id = D.day_id  WHERE D.day_of_week = 'Sunday' AND BH.opening_time IS NOT NULL;
SELECT COUNT(*)  FROM Business_Attributes  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  JOIN Business ON Business_Attributes.business_id = Business.business_id  WHERE Attributes.attribute_name = 'music_karaoke' AND Attributes.attribute_value = 'true' AND Business.active = 'false';
SELECT COUNT(*)  FROM Business  WHERE city = 'Phoenix' AND active = 'true' AND LENGTH(reviews.review_text) > 20;
SELECT COUNT(DISTINCT u.user_id) FROM Users u JOIN Reviews r ON u.user_id = r.user_id WHERE u.user_votes_cool = 'Low' AND r.review_votes_cool = 'Low';
SELECT COUNT(*)  FROM Tips t  JOIN Users u ON t.user_id = u.user_id  WHERE t.tip_length = 'Long' AND t.likes = 2 AND u.user_fans = 'High';
SELECT COUNT(DISTINCT business_id)  FROM Business_Attributes  WHERE attribute_name = 'ambience_trendy'  AND attribute_value = 'false';
SELECT COUNT(*)  FROM Business  JOIN Business_Hours ON Business.business_id = Business_Hours.business_id  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business.city = 'Scottsdale'  AND Days.day_of_week = 'Sunday'  AND Business_Hours.opening_time = '12PM';
SELECT AVG(Business.stars)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  WHERE Business_Categories.category_id IN (     SELECT category_id FROM Categories WHERE category_name = 'Obstetricians & Gynecologists' );
SELECT      (COUNT(CASE WHEN u.user_fans = 'High' THEN u.user_id END)       OVER ()      / COUNT(CASE WHEN e.actual_year = 2011 THEN e.user_id END) OVER ()) * 100 AS percentage FROM      Users u JOIN      Elite e ON u.user_id = e.user_id WHERE      e.actual_year = 2011;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'city' AND Business.city = 'Surprise';
SELECT business_id FROM Business WHERE city = 'Tempe' AND stars > 3;
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND active = 'true' AND review_count = 'Medium';
SELECT business_id FROM Business WHERE stars BETWEEN 3 AND 5 AND city = 'Chandler';
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year BETWEEN 2009 AND 2011  AND user_fans = 'Low';
SELECT review_length  FROM Reviews  WHERE business_id = 3 AND user_id = 11021;
SELECT B.business_id, A.attribute_name  FROM Business_Attributes BA  JOIN Attributes A ON BA.attribute_id = A.attribute_id  JOIN Business B ON BA.business_id = B.business_id  JOIN Cities C ON B.city_id = C.city_id  WHERE C.city_name = 'Tempe' AND B.review_count = 'Medium';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Food' AND Business.stars < 3;
SELECT B.business_id, B.stars  FROM Business AS B JOIN Business_Categories AS BC ON B.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id WHERE B.active = 'true' AND C.category_name = 'Food';
SELECT      b.category_id,     c.category_name,     COUNT(DISTINCT ba.attribute_id) AS num_attributes,     AVG(b.stars) AS avg_star_rating FROM      Business_Categories bc JOIN      Business b ON bc.business_id = b.business_id JOIN      Categories c ON bc.category_id = c.category_id JOIN      Business_Attributes ba ON b.business_id = ba.business_id GROUP BY      bc.business_id, c.category_name HAVING      AVG(b.stars) = (SELECT MAX(stars) FROM Business)
SELECT bc.category_name  FROM Business_Categories AS bc  JOIN Reviews AS r ON bc.business_id = r.business_id  WHERE r.review_length = 'Short' AND bc.business_id BETWEEN 7 AND 14  ORDER BY r.stars DESC  LIMIT 1;
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Business.active = 'true'  AND Attributes.attribute_name = 'BYOB'  AND Business.review_count = 'High';
SELECT      b.business_id,      bh.opening_time,      bh.closing_time  FROM      Business b      JOIN Business_Categories bc ON b.business_id = bc.business_id      JOIN Categories c ON bc.category_id = c.category_id      JOIN Business_Hours bh ON b.business_id = bh.business_id  WHERE      c.category_name = 'Glendale' AND      b.stars = (SELECT MAX(stars) FROM Business WHERE city = 'Glendale')
SELECT      b.category_id,      c.category_name,      ba.attribute_name FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id JOIN      Business_Attributes ba ON b.business_id = ba.business_id WHERE      b.active = 'true' AND      b.city = 'Goodyear' AND      b.state = 'AZ' AND      b.review_count = 'High';
SELECT bc.category_id, c.category_name  FROM Business_Attributes ba  JOIN Business b ON ba.business_id = b.business_id  JOIN Business_Categories bc ON bc.business_id = b.business_id  JOIN Categories c ON c.category_id = bc.category_id  WHERE b.active = 'true' AND b.city = 'Glendale' AND b.state = 'AZ';
SELECT B.city FROM Business_Hours AS BH JOIN Business AS B ON B.business_id = BH.business_id JOIN Days AS D ON D.day_id = BH.day_id WHERE D.day_of_week = 'Wednesday' AND BH.opening_time = '7AM' AND BH.closing_time = '7PM';
SELECT attribute_value FROM Business_Attributes ba JOIN Business b ON ba.business_id = b.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.active = 'true' AND b.review_count = 'Low' AND b.stars = 3 AND b.city = 'Goodyear' AND b.state = 'AZ';
SELECT B.business_id, BH.opening_time FROM Business B JOIN Business_Hours BH ON B.business_id = BH.business_id JOIN Business_Categories BC ON B.business_id = BC.business_id WHERE B.active = 'true' AND B.city = 'Glendale' AND B.review_count = 'Medium';
SELECT      (COUNT(CASE WHEN business.business_id THEN business.business_id END) FILTER (WHERE business_categories.category_name = 'Food' AND business.stars > 3)) * 100.0 / COUNT(business.business_id) FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id WHERE      c.category_name = 'Food';
SELECT Business_Hours.closing_time, Days.day_of_week  FROM Business_Hours  JOIN Business ON Business.business_id = Business_Hours.business_id  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business.active = 'true'  AND Business.city = 'Goodyear'  AND Business.stars > (SELECT AVG(Business.stars) * 0.8 FROM Business);
SELECT      (COUNT(p1.paper_id) * 100.0 / COUNT(c.paper_id)) AS percentage  FROM      cites c  JOIN      paper p1 ON c.cited_paper_id = p1.paper_id  WHERE      p1.class_label = 'Agents';
SELECT T1.word_cited_id, COUNT(T1.word_cited_id) AS citation_count  FROM content AS T1  JOIN cites AS T2 ON T1.paper_id = T2.cited_paper_id  GROUP BY T1.word_cited_id  ORDER BY citation_count DESC  LIMIT 1;
SELECT COUNT(*)  FROM paper p  JOIN content c ON p.paper_id = c.paper_id  WHERE p.class_label = 'AI';
SELECT cites.citing_paper_id, paper.class_label  FROM cites JOIN content ON cites.word_cited_id = content.word_cited_id AND cites.cited_paper_id = 315017 JOIN paper ON cites.citing_paper_id = paper.paper_id;
SELECT content.word_cited_id  FROM content  JOIN paper ON content.paper_id = paper.paper_id  WHERE paper.class_label = 'DB'  GROUP BY content.word_cited_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT      (COUNT(c.content_id) * 100.0 / (SELECT COUNT(*) FROM content WHERE paper_id IN (SELECT paper_id FROM paper WHERE class_label = 'Agents'))) AS agents_word_percentage FROM      content c
SELECT p.paper_id, cl.class_label  FROM paper p  JOIN cites c ON p.paper_id = c.cited_paper_id  JOIN content co ON p.paper_id = co.paper_id  WHERE co.word_cited_id = (SELECT MAX(word_cited_id) FROM content)  GROUP BY p.paper_id, cl.class_label  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT p.paper_id, p.class_label  FROM paper p  JOIN cites c ON p.paper_id = c.cited_paper_id  JOIN content co ON p.paper_id = co.paper_id  WHERE co.word_cited_id = 'word1002';
SELECT DISTINCT content.word_cited_id  FROM content  JOIN paper ON content.paper_id = paper.paper_id  WHERE paper.class_label = 'AI';
SELECT      p.class_label,     COUNT(c.word_cited_id) as cited_words_count FROM      paper p JOIN      cites c ON p.paper_id = c.cited_paper_id WHERE      p.paper_id = 'chakrabarti01integrating' GROUP BY      p.class_label;
SELECT p.paper_id, p.class_label  FROM paper p  JOIN cites c ON p.paper_id = c.cited_paper_id  JOIN content co ON p.paper_id = co.paper_id  GROUP BY p.paper_id, p.class_label  HAVING COUNT(co.word_cited_id) > 20;
SELECT DISTINCT c.word_cited_id  FROM content c  JOIN paper p1 ON c.paper_id = p1.paper_id  JOIN paper p2 ON c纸ier_paper_id = p2.paper_id  WHERE p1.class_label = 'AI' AND p2.class_label = 'IR'
SELECT      (SELECT `citing_paper_id`, COUNT(*) AS max_citations      FROM `cites`      GROUP BY `cited_paper_id`      ORDER BY max_citations DESC      LIMIT 1) AS most_cited_paper,     (SELECT `citing_paper_id`, COUNT(*) AS min_citations      FROM `cites`      GROUP BY `cited_paper_id`      ORDER BY min_citations ASC      LIMIT 1) AS least_cited_paper,     (SELECT COUNT(*) FROM `cites` WHERE cited_paper_id = (SELECT `cited_paper_id` FROM (SELECT `cited_paper_id`, MAX(`count_column`) AS `max_citations`      FROM (SELECT `cited_paper_id`, COUNT(*) AS `count_column`      FROM `cites`      GROUP BY `cited_paper_id`) t2      GROUP BY `cited_paper_id`) t1)) AS most_cited_count,     (SELECT COUNT(*) FROM `cites` WHERE cited_paper_id = (SELECT `cited_paper_id` FROM (SELECT `cited_paper_id`, MIN(`count_column`) AS `min_citations`      FROM (SELECT `cited_paper_id`, COUNT(*) AS `count_column`      FROM `cites`      GROUP BY `cited_paper_id`) t2      GROUP BY `cited_paper_id`) t1)) AS least_cited_count
SELECT      COUNT(p.paper_id) / COUNT(T2纸.id) FROM      paper AS p JOIN      (SELECT DISTINCT paper_id FROM paper WHERE class_label = 'ML') AS T2纸;
SELECT DISTINCT content.word_cited_id  FROM content  JOIN paper ON content.paper_id = paper.paper_id  JOIN cites ON paper.paper_id = cites.citing_paper_id  WHERE cites.cited_paper_id IN (     SELECT cited_paper_id      FROM cites      WHERE citing_paper_id = 'sima01computational' );
SELECT COUNT(*)  FROM cites  JOIN paper ON cites.citing_paper_id = paper.paper_id   WHERE paper.class_label = 'schmidt99advanced' AND EXISTS (     SELECT 1 FROM content WHERE content.paper_id = cites.cited_paper_id AND content.word_cited_id = 3555 );
SELECT p.class_label  FROM paper p  JOIN cites c ON p.paper_id = c.cited_paper_id  JOIN content co ON p.paper_id = co.paper_id  WHERE co.word_cited_id = 'word1163';
SELECT p.papers_id, COUNT(*) as word_count  FROM paper AS p  JOIN content AS c ON p.papers_id = c.paper_id   WHERE p.class_label = 'DB'  GROUP BY p.papers_id  ORDER BY word_count DESC  LIMIT 1;
SELECT COUNT(*)  FROM cites  JOIN paper ON cites.citing_paper_id = paper.paper_id  WHERE paper.class_label = 'ML' AND cites.cited_paper_id IN (     SELECT paper_id      FROM content      WHERE word_cited_id = 'butz01algorithmic' );
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person WHERE p.birthdate = (SELECT MIN(birthdate) FROM Person) AND c.season >= 20;
SELECT `nickname`  FROM `Person` WHERE `name` = 'Dan Castellaneta';
SELECT COUNT(*)  FROM Person  WHERE birth_region = 'New York' AND ('%Y', birthdate) > 1970 AND name LIKE '%Crew Member%';
SELECT T3.birth_country  FROM Award AS T1  JOIN Person AS T3 ON T1.person = T3.name  WHERE T1.award = 'Outstanding Voice-Over Performance' AND T1.year = 2009 AND T1.result = 'Winner';
SELECT DISTINCT A.award  FROM Award A  JOIN Person P ON A.person = P.name  JOIN Credit C ON A.episode_id = C.episode_id  WHERE P.nickname = 'Doofus' AND C.category LIKE '%Crew%' AND A.result = 'Winner';
SELECT COUNT(*)  FROM Person  WHERE birth_country = 'USA'  AND EXISTS (     SELECT 1      FROM Award a      WHERE a.person = Person.name      AND a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'      AND a.result = 'Nominee'      AND a.year = 2009 )
SELECT c.character  FROM Award a  JOIN Character_Award ca ON a.award_id = ca.award_id  JOIN Episode e ON a.episode_id = e.episode_id  WHERE a.year = 2009 AND a.award = 'Outstanding Voice-Over Performance' AND a.result = 'Winner';
SELECT T1.keyword  FROM Keyword AS T1  JOIN Episode AS T2 ON T1.episode_id = T2.episode_id  WHERE T2.title = 'Lost Verizon';
SELECT COUNT(T2.keyword)  FROM Episode AS T1  JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id  WHERE T1.air_date = '2008-10-19';
SELECT Episode.rating FROM Episode JOIN Award ON Episode.episode_id = Award.episode_id WHERE Award.person = 'Dan Castellaneta' AND Award.year = 2009 AND Award.result = 'Winner';
SELECT COUNT(*)  FROM Vote  WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'Lost Verizon')  AND stars = 7;
SELECT MAX(Vote.votes) AS max_votes, MAX(T1.stars) AS max_stars FROM Vote T1 WHERE T1.episode_id = (SELECT episode_id FROM Episode WHERE title = 'Lost Verizon');
SELECT Episode.title FROM Episode JOIN Vote ON Episode.episode_id = Vote.episode_id WHERE Vote.votes > 200 AND Vote.stars = 10;
SELECT COUNT(*)  FROM Episode  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE DATE_FORMAT(air_date, '%Y') = '2009' AND stars = 10 AND (Votes.percent / COALESCE(SUM(votes), 0)) > 15;
SELECT e.title  FROM Episode e  JOIN Vote v ON e.episode_id = v.episode_id  WHERE v.stars = 7  GROUP BY e.episode_id  ORDER BY COUNT(v.votes) DESC  LIMIT 1;
SELECT      SUM(T2.stars * T1.votes) / SUM(T1.votes) AS average_stars  FROM      Episode AS T1  JOIN      Vote AS T2  ON      T1.episode_id = T2.episode_id  WHERE      T1.title = 'Lost Verizon';
SELECT      (COUNT(CASE          WHEN A.award_category = 'Primetime Emmy'          THEN A.episode_id          END) / COUNT(T.episode_id)) * 100 AS percentage FROM      Award A JOIN      Episode T ON A.episode_id = T.episode_id WHERE      T.rating > 7;
SELECT title  FROM Episode  JOIN Credit ON Episode.episode_id = Credit.episode_id  WHERE      Credit.person IN      (         SELECT person FROM Person WHERE name = 'Pamela Hayden'     ) AND      Credit.role = 'Ruthie';
SELECT      c.episode_id,     e.season,     e.episode,     e.number_in_series,     c.role FROM      Credit c JOIN      Episode e ON c.episode_id = e.episode_id JOIN      Person p ON c.person = p.name WHERE      p.name = 'Matt Groening' AND e.title = 'In the Name of the Grandfather';
SELECT title, summary  FROM Episode  JOIN Keyword ON Episode.episode_id = Keyword.episode_id  WHERE Keyword.keyword = 'eviction';
SELECT AVG(V.stars)  FROM Vote V  JOIN Episode E ON V.episode_id = E.episode_id  WHERE E.title = 'Wedding for Disaster';
SELECT title, keyword  FROM Episode  JOIN Keyword ON Episode.episode_id = Keyword.episode_id  WHERE air_date = '2009-03-22';
SELECT `birth_name`  FROM Person  JOIN Credit ON Person.name = Credit.person  WHERE Credit.role = 'Helen Lovejoy';
SELECT      e.title,     GROUP_CONCAT(CONCAT(p.name, ' as ', c.role) SEPARATOR ', ') AS uncredited_persons FROM      Episode e JOIN      Award a ON e.episode_id = a.episode_id JOIN      Credit c ON e.episode_id = c.episode_id JOIN      Person p ON c.person = p.name WHERE      a.year = 2017 AND      a.award = 'Jupiter Award' AND      a.award_category = 'Best International TV Series' AND      a.result = 'Winner' AND      c.credited = '' GROUP BY      e.episode_id;
SELECT COUNT(*)  FROM Episode  WHERE votes > 1000;
SELECT COUNT(*)  FROM Person  WHERE birth_place = 'New York' AND birth_country = 'USA';
SELECT      A.award,     A.award_category FROM      Award AS A JOIN      Credit AS C ON A.award_id = C.episode_id JOIN      Person AS P ON C.person = P.name WHERE      P.name = 'Marc Wilmore' AND      C.role = 'nominated' ;
SELECT p.name, p.nickname  FROM Person p  WHERE p.nickname IS NOT NULL;
SELECT      name,     AVG(height_meters) AS average_height FROM      Person GROUP BY      name;
SELECT      MAX(e.votes) - MIN(e.votes) AS vote_difference FROM      Episode e;
SELECT Character.name FROM Award JOIN Character_Award ON Award.award_id = Character_Award.award_id JOIN Episode ON Award.episode_id = Episode.episode_id JOIN Character ON Character_Award.character = Character.character_id WHERE Award.year = 2009 AND Award.award = 'Outstanding Voice-Over Performance';
SELECT COUNT(*)  FROM Person  JOIN Award ON Person.person = Award.person  WHERE Award.result = 'Nominee' AND Award.year = 2009 AND Person.birth_place = 'California';
SELECT Episode.title FROM Episode JOIN Award ON Episode.episode_id = Award.episode_id WHERE Award.award = 'Best International TV Series' AND Award.year = 2017 AND Award.result = 'Winner';
SELECT p.name FROM Person p JOIN Credit c ON p.person = c.person WHERE c.episode_id = (SELECT episode_id FROM Episode WHERE title = 'How the Test Was Won')  AND c.credited = ' ';
SELECT title  FROM Episode  JOIN Keyword ON Episode.episode_id = Keyword.episode_id  WHERE Keyword.keyword = 'riot'  AND Keyword.keyword = 'cake';
SELECT e.episode_id FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 10 GROUP BY e.episode_id ORDER BY COUNT(v.votes) DESC LIMIT 1;
SELECT DISTINCT p.name  FROM Person p  JOIN Credit c ON p.name = c.person  WHERE c.episode_id IN (     SELECT e.episode_id      FROM Episode e      WHERE strftime('%m', e.air_date) BETWEEN '10' AND '11'      AND e.season = '20s' )
SELECT T3.name  FROM Episode AS T1  JOIN Credit AS T2 ON T1.episode_id = T2.episode_id  JOIN Person AS T3 ON T2.person = T3.person_id  WHERE T1.title = 'Treehouse of Horror XIX' AND T2.role = 'director';
SELECT COUNT(*)  FROM Credit  WHERE episode_id = (SELECT episode_id FROM Episode WHERE season = 20 AND episode = 5)
SELECT K.keyword  FROM Episode E  JOIN Keyword K ON E.episode_id = K.episode_id  WHERE E.title = 'Take My Life,Please'
SELECT      COUNT(*) AS EpisodeCount,     (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE e.votes > 950 AND a.result = 'Nominee')) AS Percentage FROM      Episode e  JOIN      Award a ON e.episode_id = a.episode_id  WHERE      e.votes > 950  AND      a.award = 'Outstanding Voice-Over Performance Award'  AND      a.year = 2009;
SELECT      (votes WHERE title = 'No Loan Again, Naturally') AS no_loan_votes,     (votes WHERE title = 'Coming to Homerica') AS coming_homerica_votes,     (votes WHERE title = 'No Loan Again, Naturally') / (votes WHERE title = 'Coming to Homerica') AS ratio FROM     Episode;
SELECT COUNT(*)  FROM Award  JOIN Person ON Award.person = Person.name  WHERE Person.name = 'Ian Maxtone-Graham'  AND Award.result = 'Nominee'  AND Award.organization = 'Writers Guild of America, USA';
SELECT p.name FROM Person p JOIN Award a ON p.person_id = a.person WHERE a.result = 'Nominee' GROUP BY p.person_id ORDER BY COUNT(a.award_id) DESC LIMIT 1;
SELECT title  FROM Episode  WHERE rating = (SELECT MIN(rating) FROM Episode);
SELECT A.year FROM Award A JOIN Character_Award CA ON A.award_id = CA.award_id WHERE A.award_category = 'People\'s Choice Award' AND A.award = 'Favorite Animated Comedy' AND A.result = 'Winner' ORDER BY A.year LIMIT 1;
SELECT COUNT(*)  FROM Episode e  JOIN Credit c ON e.episode_id = c.episode_id  WHERE c.person = 'Dell Hake' AND c.credited = ''
SELECT      T1.birthdate,     (T3.year - SUBSTR(T1.birthdate, 1, 4)) AS age_when_awarded,     T3.organization,     T3.award,     T3.result FROM      Person AS T1 JOIN      Award AS T3 ON T1.name = T3.person AND T3.award = 'Outstanding Voice-Over Performance' AND T3.organization = 'Primetime Emmy Awards' AND T3.result = 'Winner' WHERE      T3.year = (SELECT MIN(year) FROM Award WHERE award = 'Outstanding Voice-Over Performance' AND organization = 'Primetime Emmy Awards')
SELECT Character_Award.character FROM Award JOIN Character_Award ON Award.award_id = Character_Award.award_id JOIN Person ON Award.person = Person.name WHERE Award.result = 'Winner' AND Award.organization = 'Primetime Emmy Awards' AND Award.year = 2009 AND Person.name = 'Dan Castellaneta';
SELECT COUNT(*)  FROM Episode  WHERE SUBSTR(air_date, 6, 2) = '04'  AND SUBSTR(air_date, 1, 4) = '2009'  AND EXISTS (     SELECT 1      FROM Award      WHERE Episode.episode_id = Award.episode_id      AND result = 'Winner' );
SELECT `birth_place`  FROM Person  JOIN Award ON Person.person = Award.person  WHERE Award.award = 'Best Voice-Over Performance' AND Award.organization = 'Online Film & Television Association' AND Award.result = 'Winner' AND Award.year = 2009;
SELECT      T1.episode_id,      T1.rating,      SUM(T2.votes) AS total_votes FROM      Episode AS T1 JOIN      Vote AS T2 ON T1.episode_id = T2.episode_id WHERE      T2.stars = 10 GROUP BY      T1.episode_id, T1.rating ORDER BY      total_votes DESC, T1.rating DESC LIMIT 4;
SELECT SUM(T2.stars)  FROM Episode AS T1  JOIN Vote AS T2 ON T1.episode_id = T2.episode_id  WHERE T1.title = 'No Loan Again, Naturally' AND T2.stars < 50;
SELECT COUNT(DISTINCT A.person)  FROM Award AS A JOIN Person AS P ON A.person = P.name WHERE A.result = 'Winner' AND P.birth_country = 'USA';
SELECT COUNT(*)  FROM Credit  JOIN Person ON Credit.person = Person.name  WHERE Credit.episode_id = 'S20-E11' AND Person.birth_name = 'Doofus' AND Credit.credited = 'true';
SELECT p.name FROM Person p JOIN Award a ON p.person_id = a.person WHERE a.result = 'Winner' ORDER BY a.year ASC LIMIT 1;
SELECT Vote.percent FROM Episode JOIN Vote ON Episode.episode_id = Vote.episode_id WHERE Episode.title = 'Sex, Pies and Idiot Scrapes' AND Vote.stars = 9;
SELECT      A.award  FROM      Award A  JOIN      Person P ON A.person = P.name  WHERE      A.year = 2009 AND A.result = 'Winner';
SELECT name, birthdate  FROM Person  WHERE birth_place = 'Los Angeles' AND height_meters >= 1.8;
SELECT episode_number, title, rating  FROM Episode  WHERE SUBSTR(air_date, 6, 2) = '10' AND SUBSTR(air_date, 0, 4) = '2008';
SELECT      A.award_id,     A.award AS award_name,     C.person AS winner FROM      Award AS A JOIN      Character_Award AS CA ON A.award_id = CA.award_id JOIN      Credit AS C ON A.person = C.person JOIN      Person AS P ON C.person = P.name WHERE      CA.character = 'Homer simpson 20' AND      A.result = 'Winner';
SELECT      A.award      , A.result      , C.category      , C.credited  FROM      Award AS A  JOIN      Character_Award AS CA ON A.award_id = CA.award_id  JOIN      Credit AS C ON A.episode_id = C.episode_id  WHERE      CA.character = 'Billy Kimball' AND C.credited = 'true';
SELECT      p.name,     a.award,     a.organization,     a.result,     c.credited FROM      Person p JOIN      Credit c ON p.name = c.person JOIN      Episode e ON c.episode_id = e.episode_id JOIN      Award a ON e.episode_id = a.episode_id WHERE      e.season = 20 AND e.episode = 13 AND c.role = 'assistant director' AND c.credited = 'true';
SELECT      birth_country,      height_meters,      name FROM      Person  WHERE      birth_country IS NOT NULL AND height_meters IS NOT NULL AND name IS NOT NULL AND credited = '' AND category = 'Casting Department';
SELECT      A.person AS nominee,     B.keyword,     E.episode_id FROM      Episode E JOIN      Award A ON E.episode_id = A.episode_id JOIN      Keyword B ON E.episode_id = B.episode_id WHERE      E.title = 'The Good, the Sad and the Drugly' AND      A.result = 'Nominee';
SELECT Vote.votes AS VotingNumbers, (Vote.votes / COUNT(*) OVER() * 100) AS Percentage  FROM Vote  JOIN Keyword ON Vote.episode_id = Keyword.episode_id  WHERE Keyword.keyword = 'arab stereotype' AND Vote.stars = 10;
SELECT      A.award,     E.air_date,     E.rating FROM      Episode E JOIN      Award A ON E.episode_id = A.episode_id WHERE      A.organization = 'Jupiter Award' AND A.result = 'Winner';
SELECT e.episode_id, e.title, kw1.keyword, kw2.keyword, kw3.keyword  FROM Episode e  JOIN Keyword k ON e.episode_id = k.episode_id  JOIN Vote v ON e.episode_id = v.episode_id AND v.stars = 1  WHERE v.votes = (SELECT MAX(votes) FROM Vote WHERE stars = 1)  ORDER BY e.episode_id  LIMIT 1;
SELECT      Episode.title,      Episode.episode_image,      Award.award,      Person.name FROM      Episode JOIN      Award ON Episode.episode_id = Award.episode_id JOIN      Person ON Award.person = Person.person_id WHERE      Episode.rating BETWEEN 7 AND 10 AND      SUBSTRING_INDEX(Award.air_date, '/', 3) = '2008' AND      Award.result = 'Nominee';
SELECT      A.award,     P.name AS person,     CA.character AS character_name FROM      Award A JOIN      Person P ON A.person = P.name JOIN      Character_Award CA ON A.award_id = CA.award_id WHERE      A.award_id = 326;
SELECT      p.name,      p.birth_country,      c.role,      2022 - STR_TO_DATE(SUBSTRING_INDEX(p.birthdate, '-', 1), '%Y') AS age_in_2022 FROM      Person p     JOIN Credit c ON p.name = c.person WHERE      p.birthdate = (SELECT MIN(birthdate) FROM Person) ORDER BY      c.credited DESC LIMIT 1;
SELECT COUNT(c.credited), c.category, c.role, p.birth_place  FROM Credit AS c  JOIN Person AS p ON c.person = p.name  WHERE p.birth_country = 'North Korea'  GROUP BY c.category, c.role, p.birth_place;
SELECT      A.person AS 'Winner Name',     B.award AS 'Award Name',     E.title AS 'Episode Title',     C.role AS 'Role in Episode' FROM      Award A JOIN      Person B ON A.person = B.name JOIN      Episode E ON A.episode_id = E.episode_id JOIN      Credit C ON E.episode_id = C.episode_id WHERE      A.year = 2010 AND A.result = 'winner' GROUP BY      A.person, B.award, E.title, C.role;
SELECT e.title FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = (SELECT MAX(stars) FROM Vote) AND v.votes = (SELECT MAX(votes) FROM Vote);
SELECT COUNT(*)  FROM Award  WHERE organization = 'The simpson 20s' AND year = 2010 AND result = 'Winner';
SELECT title  FROM Episode  JOIN Award ON Episode.episode_id = Award.episode_id  WHERE Award.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'  AND Award.organization = 'Primetime Emmy Awards'  AND Award.result = 'Nominee'  AND COUNT(Award.episode_id) = 21;
SELECT AVG(Vote.stars) AS Average_Stars, Episode.summary  FROM Vote  JOIN Episode ON Vote.episode_id = Episode.episode_id  WHERE Episode.title = 'The simpson 20s: S20-E12';
SELECT p.name  FROM Person p  JOIN Award a ON p.person_id = a.person  JOIN Character_Award ca ON a.award_id = ca.award_id  WHERE a.organization = 'Primetime Emmy Awards'  AND a.award = 'Outstanding Voice-Over Performance'  AND a.result = 'Winner'  AND ca.character = 'Homer Simpson 20';
SELECT p.birth_name, c.role  FROM Person p  JOIN Credit c ON p.name = 'Al Jean'  WHERE c.episode_id IN (SELECT e.episode_id FROM Episode e WHERE e.title LIKE '%Simpsons 20s: Season 20%')
SELECT COUNT(*)  FROM Award  JOIN Character_Award ON Award.award_id = Character_Award.award_id  WHERE Award.year = 2010 AND Character_Award.character = 'Billy Kimball' AND Award.result = 'Nominee';
SELECT K.keyword  FROM Keyword K  JOIN Episode E ON K.episode_id = E.episode_id  WHERE E.title = 'Take My Life, Please'
SELECT p.name, ac.award_category  FROM Person p  JOIN Award aw ON aw.person = p.name  JOIN Character_Award ca ON ca.award_id = aw.award_id  JOIN Award_Category ac ON ac.award_id = aw.award_id  WHERE aw.year = (SELECT MAX(year) FROM Award WHERE result = 'Winner')  AND ca.character = (SELECT MAX(year) FROM Award WHERE result = 'Winner');
SELECT      (SUM(CASE WHEN Award.result = 'winner' THEN 1 ELSE 0 END) / COUNT(Award.award_id)) * 100 AS AverageWinningRate FROM      Award WHERE      Award.year BETWEEN 2019 AND 2029 AND      SUBSTR(Award.season, 3) = '20';
SELECT COUNT(*)  FROM Episode  WHERE air_date BETWEEN '2008-10-01' AND '2008-11-30';
SELECT title  FROM Episode  WHERE year(air_date) = 2009  AND rating = (SELECT MIN(rating) FROM Episode WHERE year(air_date) = 2009);
SELECT      c.category,      cr.role  FROM      Person p  JOIN      Credit cr ON p.name = 'Bonita Pietila'  JOIN      Episode e ON cr.episode_id = e.episode_id  WHERE      p.name = 'Bonita Pietila';
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person WHERE p.birthdate = '1957-10-29' AND p.birth_place = 'Chicago' AND p.birth_region = 'Illinois' AND c.season = 20 AND c.episode_id IS NOT NULL;
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person WHERE c.role = 'producer' AND c.episode_id IN (SELECT e.episode_id FROM Episode e WHERE e.season = 20 AND e.title LIKE '%The simpson 20s%');
SELECT p.name,         (2009 - bd.birthdate) AS age_when_nominated FROM Person p  JOIN Award a ON p.person_id = a.person JOIN Episode e ON a.episode_id = e.episode_id JOIN Character_Award ca ON a.award_id = ca.award_id WHERE a.organization = 'Primetime Emmy Awards'    AND a.year = 2009    AND a.result = 'Nominee'    AND a.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)'    AND ca.character = 'composer';
SELECT e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id JOIN Person p ON a.person = p.name WHERE a.organization LIKE '%20s%' AND p.name = 'The simpson' AND e.season = 20 GROUP BY e.episode_id ORDER BY COUNT(a.award_id) DESC LIMIT 1;
SELECT `birth_place`  FROM Person  WHERE `name` = 'Dan Castellaneta' AND `nickname` IS NULL;
SELECT COUNT(*)  FROM Person  WHERE birth_country = 'USA';
SELECT p.name FROM Person p WHERE p.birthdate < '1970-01-01';
SELECT name  FROM Person  WHERE birth_place = 'California' AND birth_country = 'USA'  AND birthdate BETWEEN '1958-01-01' AND '1969-12-31';
SELECT episode_id FROM Vote WHERE stars = 5 AND votes > 100;
SELECT T1.keyword  FROM Keyword AS T1  JOIN Episode AS T2 ON T1.episode_id = T2.episode_id  WHERE T2.title = 'Double, Double, Boy in Trouble';
SELECT e.episode_id FROM Episode e WHERE e.season * 10 + e.episode BETWEEN 10 AND 20 AND (SELECT COUNT(*) FROM Vote v WHERE v.episode_id = e.episode_id) > 200;
SELECT T1.keyword  FROM Keyword AS T1  JOIN Episode AS T2 ON T1.episode_id = T2.episode_id  JOIN Award AS T3 ON T2.episode_id = T3.episode_id AND T2.season = T3.season  WHERE T3.award_category = 'Primetime Emmy'
SELECT p.name FROM Award a JOIN Person p ON a.person = p.name WHERE a.award_category = 'Primetime Emmy' GROUP BY a.person ORDER BY COUNT(a.episode_id) DESC, SUM(CAST(v.votes AS REAL)) OVER (PARTITION BY a.person) DESC LIMIT 1;
SELECT Episode.episode_id  FROM Award  JOIN Episode ON Award.episode_id = Episode.episode_id  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE Award.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND Vote.stars = 10;
SELECT p.name FROM Person p JOIN Award a ON p.person_id = a.person JOIN Episode e ON e.episode_id = a.episode_id WHERE a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND e.title = 'No Loan Again, Naturally' AND a.role = 'director';
SELECT DISTINCT p.name  FROM Person p  JOIN Credit c ON p.name = c.person  JOIN Award a ON c.role = 'writer' AND c.episode_id = a.episode_id  JOIN Vote v ON c.episode_id = v.episode_id  WHERE a.year = 2009 AND v.stars > 5;
SELECT COUNT(*)  FROM Person  WHERE birth_country = 'USA'  AND birthdate BETWEEN '2009-01-01' AND '2010-12-31'  AND award.organization = 'WGA Award (TV)';
SELECT e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person = p.name WHERE a.role = 'composer' AND a.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND a.result = 'Winner' AND e.votes > 200;
SELECT e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id JOIN Person p ON a.person = p.name WHERE p.name = 'Al Jean' AND a.year = 2009 AND a.award_category = 'Primetime Emmy'
SELECT      (SUM(CASE WHEN Episode.episode_id = 1 THEN Votes.votes ELSE 0 END) -       SUM(CASE WHEN Episode.episode_id = 5 THEN Votes.votes ELSE 0 END)) AS vote_difference FROM Episode JOIN Votes ON Episode.episode_id = Votes.episode_id;
SELECT      A.award  FROM      Episode E  JOIN      Credit C ON E.episode_id = C.episode_id  JOIN      Person P ON P.name = 'Homer Simpson' AND C.person = P.name  JOIN      Award W ON W.year = 2009 AND E.season = 20 AND E.episode = ANY (W.episode_id)  WHERE      C.role = 'Homer Simpson 20';
SELECT      COUNT(*) AS total_episodes,     SUM(CASE WHEN A.votes < 100 THEN 1 ELSE 0 END) AS episodes_with_less_than_100_votes,     (SUM(CASE WHEN A.votes < 100 THEN 1 ELSE 0 END) * 100 / COUNT(*)) AS percentage_of_episodes FROM      simpson_episodes A JOIN      Award B ON A.episode_id = B.episode_id WHERE      B.award = 'Outstanding Animated Program (Programming Under One Hour)';
SELECT      COUNT(*) AS 'Total_Primetime_Emmys_Born_USA',     (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Award)) AS 'Percentage_Americans' FROM      Award WHERE      award_category = 'Primetime Emmy' AND      birth_country = 'USA';
SELECT DISTINCT p.name  FROM Person p  JOIN Award a ON p.person_id = a.person  JOIN Episode e ON a.episode_id = e.episode_id  WHERE a.award = 'Outstanding Voice-Over Performance'  AND a.role = 'Narrator'  AND e.season = 20;
SELECT COUNT(*)  FROM Award  JOIN Person ON Award.person = Person.name  WHERE Award.result = 'Nominee'  AND Award.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'  AND Award.role = 'executive producer';
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person WHERE p.birthdate >= '1962-01-01' AND p.birth_region = 'California';
SELECT COUNT(*)  FROM Person  WHERE height_meters > 1.70 AND birth_country = 'Canada' AND name IN (     SELECT person      FROM Credit      WHERE category = 'crew' );
SELECT COUNT(DISTINCT pa.person)  FROM Award AS a JOIN Character_Award AS ca ON a.award_id = ca.award_id JOIN Person AS pa ON a.person = pa.name WHERE a.award LIKE '%Animation%' AND a.result = 'Nominee';
SELECT title, air_date, rating  FROM Episode  WHERE rating > 7 AND rating <= 10  LIMIT 3;
SELECT episode_id, title, votes  FROM Vote  ORDER BY votes DESC  LIMIT 5;
SELECT e.episode_id, e.title, COUNT(v.votes) AS vote_count FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 1 GROUP BY e.episode_id ORDER BY vote_count DESC LIMIT 3;
SELECT ca.character FROM Character_Award ca JOIN Person p ON ca.person = p.name JOIN Award a ON ca.award_id = a.award_id WHERE a.award LIKE '%Voice-Over%'
SELECT e.episode_id, e.title FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE e.air_date LIKE '2008%' AND v.stars = 10 GROUP BY e.episode_id, e.title ORDER BY COUNT(v.vote) DESC LIMIT 1;
SELECT keyword  FROM Keyword  WHERE episode_id IN (     SELECT episode_id      FROM Episode      WHERE title = 'Take My Life, Please' );
SELECT Episode.title  FROM Episode  JOIN Keyword ON Episode.episode_id = Keyword.episode_id  WHERE Keyword.keyword = '1930s to 2020s'  LIMIT 2;
SELECT Episode.title FROM Episode JOIN Award ON Episode.episode_id = Award.episode_id WHERE Award.year = 2010 AND Award.person = 'Joel H. Cohen' AND Award.result = 'Winner';
SELECT COUNT(*)  FROM Vote  WHERE episode_id IN (     SELECT episode_id      FROM Episode      WHERE title = 'Lisa the Drama Queen' ) AND stars = 5;
SELECT COUNT(*)  FROM Episode  JOIN Keyword ON Episode.episode_id = Keyword.episode_id  WHERE Keyword.keyword = 'reference to the fantastic four' AND Vote.stars = 10;
SELECT      (SUM(CASE WHEN v.stars = 1 THEN v.votes ELSE 0 END) - SUM(CASE WHEN v.stars = 10 THEN v.votes ELSE 0 END)) as vote_difference FROM      simpson_episodes e JOIN      Vote v ON e.episode_id = v.episode_id WHERE      e.title = 'The Burns and the Bees';
SELECT T1.keyword  FROM Keyword AS T1  JOIN Episode AS T2 ON T1.episode_id = T2.episode_id  WHERE T2.votes = (SELECT MIN(votes) FROM Episode)
SELECT e.episode_id, e.title FROM Episode e JOIN (     SELECT ee.episode_id, COUNT(v.vote) as num_2_star_votes     FROM Episode ee     JOIN Vote v ON ee.episode_id = v.episode_id     WHERE v.stars = 2     GROUP BY ee.episode_id     HAVING COUNT(v.vote) > 20 ) tv ON e.episode_id = tv.episode_id WHERE e.rating >= 5 AND e.rating <= 7 GROUP BY e.episode_id HAVING AVG(CASE WHEN v.stars = 2 THEN 1 ELSE 0 END) * COUNT(v.vote) / SUM(CASE WHEN v.stars IS NULL THEN 0 ELSE 1 END) > 20;
SELECT episode_id FROM Vote WHERE votes = (SELECT MAX(votes) FROM Vote);
SELECT p.name FROM Person p JOIN Credit c ON p.name = c.person WHERE p.birthdate = (SELECT MIN(birthdate) FROM Person)
SELECT e.title FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person = p.name WHERE p.name = 'Oscar Cervantes' AND c.credited = 'true';
SELECT      c.person,      c.role  FROM      Credit c  JOIN      Person p ON c.person = p.name  WHERE      p.birth_country != 'USA';
SELECT COUNT(*)  FROM Episode  WHERE rating = (SELECT MIN(rating) FROM Episode) AND votes > 0;
SELECT c.character FROM Award a JOIN Character_Award ca ON a.award_id = ca.award_id JOIN Episode e ON a.episode_id = e.episode_id JOIN Credit c ON e.episode_id = c.episode_id WHERE a.award = 'Outstanding Voice-Over Performance' AND a.result = 'Winner';
SELECT Episode.summary  FROM Episode  JOIN Credit ON Episode.episode_id = Credit.episode_id  WHERE Credit.person = 'Emily Blunt';
SELECT `role` FROM Credit JOIN Episode ON Credit.episode_id = Episode.episode_id WHERE Episode.title = 'The Tiny Canadian';
SELECT e.episode_id, e.title, MAX(v.percent) as max_star_percent FROM Episode e JOIN Award a ON e.episode_id = a.episode_id JOIN Credit c ON e.episode_id = c.episode_id JOIN Vote v ON e.episode_id = v.episode_id WHERE v.star = 5 AND a.result = 'Nominee' OR a.result = 'Winner' GROUP BY e.episode_id, e.title ORDER BY max_star_percent DESC LIMIT 1;
SELECT      person, role  FROM      Credit  WHERE      episode_id IN (         SELECT              episode_id          FROM              Episode          WHERE              title = 'In the Name of the Grandfather'     ) AND      category = 'Cast' AND      credited = 'true';
SELECT p.birthdate  FROM Person p  JOIN Award a ON p.name = a.person  WHERE a.result = 'Winner';
SELECT C.person  FROM Credit AS C  JOIN Episode AS E ON C.episode_id = E.episode_id  JOIN Vote AS V ON E.episode_id = V.episode_id  WHERE C.role = 'Writer' AND V.stars = 10  GROUP BY C.episode_id, C.person  HAVING COUNT(V.vote_id) = (SELECT MAX(count_votes) FROM      (SELECT COUNT(*) as count_votes FROM Vote WHERE stars = 10) AS subquery)
SELECT award  FROM Award  JOIN Episode ON Award.episode_id = Episode.episode_id  WHERE Episode.air_date = '11/30/2008' AND Award.result = 'Winner';
SELECT *  FROM Credit  WHERE category = 'Music Department';
SELECT T1.keyword  FROM Keyword AS T1  JOIN Episode AS T2 ON T1.episode_id = T2.episode_id  WHERE T2.number_in_series = 426;
SELECT e.title FROM Episode e JOIN (     SELECT season, SUM(CASE WHEN stars = 7 THEN 1 ELSE 0 END) AS sum_7_star_votes,            COUNT(*) FILTER (WHERE stars = 7) AS count_7_stars,            COUNT(*) AS total_votes     FROM Vote v     GROUP BY season ) s ON e.season = s.season WHERE e.episode_id IN (     SELECT v.episode_id     FROM Vote v     WHERE v.stars = 7 ) AND e.episode_id NOT IN (     SELECT v.episode_id     FROM Vote v, (         SELECT season, SUM(votes) AS total_votes         FROM Episode ep         GROUP BY season     ) t     WHERE (         SELECT SUM(CASE WHEN v.stars = 7 THEN 1 ELSE 0 END)         FROM Vote v         WHERE v.episode_id = ep.episode_id     ) <= (         SELECT CAST(total_votes * 7 AS REAL) / COUNT(*)         FROM (             SELECT stars             FROM Vote             WHERE episode_id = ep.episode_id         ) AS star_votes     ) ) AND s.sum_7_star_votes > s.total_votes * 7 / COUNT(*)
SELECT      (SUM(CASE WHEN A.award = 'Nominated' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) OVER () ) AS nominated_percentage  FROM      Episode E  JOIN      Award A ON E.episode_id = A.episode_id  WHERE      A.result = 'Nominee';
SELECT name  FROM Person  WHERE nickname IS NOT NULL;
SELECT `birth_country`  FROM `Person`  WHERE `height_meters` = (SELECT MAX(`height_meters`) FROM `Person`);
SELECT AVG(T2.height_meters)  FROM Person AS T2  JOIN Award AS T1 ON T1.person = T2.name  WHERE T2.birth_country = 'USA';
SELECT      COUNT(CASE          WHEN birthdate > '1970-01-01' AND birth_region = 'California' THEN 1     END) * 100.0 / COUNT(*) AS percentage FROM Person;
SELECT COUNT(*)  FROM Person  WHERE birth_region != 'Connecticut' AND birth_country != 'USA'
SELECT title  FROM Episode  WHERE episode_id IN ('S20-E1', 'S20-E2', 'S20-E3');
SELECT episode_image  FROM Episode  WHERE episode_id = 5;
SELECT COUNT(*)  FROM Episode  WHERE rating > 7.0;
SELECT COUNT(*)  FROM Credit  WHERE category = 'Casting Department';
SELECT COUNT(*)  FROM Person  WHERE birth_country = 'USA' AND role = 'additional timer';
SELECT COUNT(*)  FROM Person p  JOIN Credit c ON p.name = c.person  WHERE p.birthdate > '1970-01-01' AND c.role = 'animation executive producer';
SELECT summary  FROM Episode  WHERE episode_id IN (     SELECT e.episode_id      FROM Episode e      LEFT JOIN Credit c ON e.episode_id = c.episode_id      WHERE c.credited = '' );
SELECT Episode.rating FROM Episode JOIN Credit ON Episode.episode_id = Credit.episode_id WHERE Credit.person = 'Jason Bikowski';
SELECT AVG(T2.height_meters)  FROM Credit AS T1  JOIN Person AS T2 ON T1.person = T2.name  WHERE T1.category = 'Animation Department' AND T2.birth_name = 'Crew Member';
SELECT Character_Award.character FROM Award JOIN Character_Award ON Award.award_id = Character_Award.award_id WHERE Award.award_category = 'Primetime Emmy' AND Award.year = 2009;
SELECT DISTINCT c.character  FROM Award a  JOIN Character_Award ca ON a.award_id = ca.award_id  JOIN Episode e ON a.episode_id = e.episode_id  JOIN Person p ON a.person = p.name  JOIN Award w ON a.award_id = w.award_id  WHERE w.award_category = 'Primetime Emmy'  AND w.result = 'Nominee'  AND a.year BETWEEN 2009 AND 2010;
SELECT SUM(T1.votes)  FROM Episode AS T1  JOIN Credit AS T2 ON T1.episode_id = T2.episode_id  JOIN Person AS T3 ON T2.person = T3.name  WHERE T3.name = 'Adam Kuhlman'
SELECT      K.keyword,     C.person FROM      Episode E JOIN      Credit C ON E.episode_id = C.episode_id JOIN      Keyword K ON E.episode_id = K.episode_id WHERE      E.episode_id = 'S20-E1';
SELECT K.keyword  FROM Keyword K  JOIN Vote V ON K.episode_id = V.episode_id  WHERE V.stars = 10 AND V.percent >= 30;
SELECT      (SUM(CASE WHEN v.stars = 5 THEN 1 ELSE 0 END) / COUNT(v.vote_id)) * 100 AS percentage FROM      simpson_episodes.episode e JOIN      simpson_episodes.vote v ON e.episode_id = v.episode_id WHERE      e.title = 'Sex, Pies and Idiot Scrapes';
SELECT COUNT(*)  FROM Keyword  WHERE episode_id IN (     SELECT episode_id      FROM Episode      WHERE title = 'Dangerous Curves' ) AND keyword = 'limbo dancing';
SELECT Episode.title FROM Episode JOIN Award ON Episode.episode_id = Award.episode_id WHERE Award.award = 'Best International TV Series' AND Award.year = 2017 AND Award.result = 'Winner';
SELECT K.keyword FROM Keyword K JOIN Award A ON K.episode_id = A.episode_id WHERE A.award_category = 'WGA Award (TV)' AND A.result = 'Winner';
SELECT T2.birth_place  FROM Award AS T1  JOIN Person AS T2 ON T1.person = T2.name  JOIN Credit AS T3 ON T3.episode_id = (SELECT T4.episode_id FROM Credit AS T4 WHERE T4.role = 'co-executive producer')  WHERE T1.award_category = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T1.result = 'Nominee';
SELECT SUM(Vote.votes)  FROM Vote  JOIN Award ON Vote.episode_id = Award.episode_id  WHERE Award.award = 'Blimp Award' AND Award.result IN ('Winner', 'Nominee') AND Vote.stars BETWEEN 1 AND 5;
SELECT SUM(E.rating) FROM Episode AS E JOIN Award AS Aw ON E.episode_id = Aw.episode_id WHERE Aw.award = 'OFTA Television Award' OR Aw.award = 'WGA Award (TV)' AND Aw.result = 'Winner';
SELECT      (SUM(CASE WHEN 5 <= v.stars AND v.stars <= 10 THEN v.percent ELSE 0 END) / NULLIF(TotalVotes, 0)) * 100 AS PercentageOfRating FROM     simpson_episodes e JOIN     Vote v ON e.episode_id = v.episode_id WHERE     e.title = 'No Loan Again, Naturally' AND e.rating = 6.8;
SELECT COUNT(*)  FROM Vote  WHERE stars > 8;
SELECT Episode.episode_id, votes  FROM Episode  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE votes = (SELECT MAX(votes) FROM Vote);
SELECT COUNT(*)  FROM Episode  JOIN Keyword ON Episode.episode_id = Keyword.episode_id  WHERE Keyword.keyword = '2d animation';
SELECT organization FROM Award WHERE award_id = 328;
SELECT COUNT(*)  FROM Award  WHERE year = 2009;
SELECT COUNT(*)  FROM Award  WHERE award_category = 'Primetime Emmy';
SELECT `birth_name`  FROM `Person`  WHERE `role` = 'co-executive producer' AND `height_meters` > 1.60;
SELECT      (SUM(CASE WHEN result = 'Nominee' AND birth_country = 'USA' THEN 1 ELSE 0 END) / COUNT(p.name)) * 100 AS percentage FROM      Award w  JOIN      Person p ON w.person = p.name WHERE      w.result = 'Nominee' AND p.birth_country = 'USA'
SELECT      (SUM(CASE          WHEN `Award`.result = 'Winner' AND `Person`.height_meters > 1.75 THEN 1         ELSE 0     END) / COUNT(CASE          WHEN `Award`.result = 'Winner' THEN 1     END)) * 100 AS Winner_Percentage FROM      `Award` JOIN      `Person` ON `Award`.person = `Person`.name WHERE      `Award`.result = 'Winner' AND `Person`.height_meters > 1.75;
SELECT title  FROM Episode  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE Vote.stars = 2;
SELECT Vote.episode_id, Vote.stars FROM Vote JOIN Episode ON Vote.episode_id = Episode.episode_id WHERE Episode.title = 'How the Test Was Won';
SELECT COUNT(*)  FROM Episode  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE Vote.stars > 5 AND SUBSTRING(air_date, 1, 4) = '2008'
SELECT T3.character  FROM Award AS T1  JOIN Character_Award AS T2 ON T1.award_id = T2.award_id  JOIN Episode AS T3 ON T3.episode_id = T1.episode_id  WHERE T1.year = 2009;
SELECT DISTINCT A.year  FROM Award AS A  JOIN Character_Award AS CA ON A.award_id = CA.award_id  JOIN Person AS P ON A.person = P.name  WHERE P.name = 'Mr. Burns'
SELECT      c.award_category  FROM      Episode e JOIN      Credit c ON e.episode_id = c.episode_id JOIN      Character_Award ca ON c.episode_id = ca.episode_id JOIN      Award a ON c.episode_id = a.episode_id AND c.person = a.person WHERE      ca.character = 'Lenny' AND a.result = 'Winner';
SELECT p.name  FROM Person p  JOIN Credit c ON p.person_id = c.person  WHERE c.role = 'Smithers';
SELECT T1.keyword  FROM Keyword AS T1  JOIN Episode AS T2 ON T1.episode_id = T2.episode_id  WHERE T2.title = 'Dangerous Curves';
SELECT T1.keyword  FROM Keyword AS T1  JOIN Episode AS T2 ON T1.episode_id = T2.episode_id  WHERE T2.air_date LIKE '2008%'
SELECT COUNT(*)  FROM Episode  WHERE stars < 8 AND air_date LIKE '2009%'
SELECT `birth_name`  FROM Person  WHERE `role` IN (SELECT role FROM Credit WHERE `category` = 'Director')  AND `birth_country` = 'South Korea';
SELECT COUNT(*)  FROM Award  WHERE episode_id IN (     SELECT episode_id      FROM Episode      WHERE season = 20 AND air_date LIKE '2009%' ) AND result = 'Winner';
SELECT COUNT(*)  FROM Episode  WHERE rating < 7;
SELECT name  FROM Person  WHERE birth_region = 'California' AND birth_country = 'USA';
SELECT COUNT(*)  FROM Episode  JOIN Credit ON Episode.episode_id = Credit.episode_id  WHERE Episode.season = 'S2' AND Episode.episode BETWEEN 'S2-EP5' AND 'S2-EP10' AND Credit.credited = 'true' AND Credit.role = 'casting';
SELECT episode_id FROM Vote WHERE stars = 2 AND votes = 9;
SELECT Episode.title  FROM Episode  JOIN Award ON Episode.episode_id = Award.episode_id  WHERE Award.organization = 'Primetime Emmy Awards'  AND Award.year = 2009  AND Award.result = 'Winner';
SELECT episode_id FROM Episode WHERE air_date LIKE '2008%' AND stars < 5;
SELECT `category` FROM Credit WHERE `episode_id` IN (   SELECT `episode_id`   FROM Vote   WHERE `votes` = (SELECT MAX(`votes`) FROM Vote) ) AND `person` = 'Carlton Batten';
SELECT `percent` FROM `simpson_episodes`.Vote WHERE `air_date` LIKE '2008%' AND `votes` BETWEEN 920 AND 950;
SELECT Episode.episode_id, Episode.title  FROM Episode  JOIN Credit ON Episode.episode_id = Credit.episode_id  WHERE Credit.person = 'Bonita Pietila' AND Credit.credited = 'true';
SELECT COUNT(*)  FROM Episode e  JOIN Award a ON e.episode_id = a.episode_id  JOIN Vote v ON e.episode_id = v.episode_id  WHERE a.result = 'Nominee' AND a.organization = 'Annie Awards' AND v.percent > 6;
SELECT Episode.title FROM Episode JOIN Award ON Episode.episode_id = Award.episode_id WHERE Award.award_category = 'WGA Award (TV)' AND Award.result = 'Nominee' AND Award.votes > 1000;
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person WHERE c.category = 'Animation Department' AND c.role = 'additional timer' AND c.episode_id IN (     SELECT e.episode_id     FROM Episode e     WHERE e.title = 'How the Test Was Won' ) AND c.credited = 'true';
SELECT Vote.stars  FROM Episode  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE Episode.air_date LIKE '2008-11%';
SELECT Episode.title  FROM Episode  JOIN Award ON Episode.episode_id = Award.episode_id  WHERE Award.stars = 5 AND Award.result = 'Nominee' AND Award.award_category = 'Prism Award' AND Episode.air_date = '2009-04-19';
SELECT T3.category  FROM Episode AS T1  JOIN Award AS T2 ON T1.episode_id = T2.episode_id  JOIN Character_Award AS T3 ON T2.award_id = T3.award_id  WHERE T1.votes = (SELECT MAX(votes) FROM Episode)  AND T2.result = 'Nominee'
SELECT COUNT(*)  FROM Episode  JOIN Credit ON Episode.episode_id = Credit.episode_id  WHERE Episode.air_date LIKE '2009%' AND Credit.person = 'Sam Im' AND Credit.credited = 'true' AND Credit.role = 'additional timer';
SELECT title  FROM Episode  WHERE stars > (SELECT AVG(stars) * 0.7 FROM Episode)
SELECT      (COUNT(CASE WHEN A.award = 'Nominee' THEN 1 END) / COUNT(*) * 100) AS percentage FROM     Award A JOIN      Episode E ON A.episode_id = E.episode_id WHERE     A.year = 2009 AND E.title = 'Gone Maggie Gone'
SELECT COUNT(*)  FROM enrolled  WHERE name IN (     SELECT name      FROM student_loan      WHERE `month` = 0 );
SELECT month  FROM longest_absense_from_school  WHERE month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT COUNT(*)  FROM enlist  WHERE organ = 'navy';
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month >= 5  AND name IN (SELECT name FROM male);
SELECT p.name FROM person p JOIN enlisted e ON p.name = e.name WHERE e.organ = 'navy' AND EXISTS (     SELECT *     FROM male m     WHERE m.name = p.name );
SELECT COUNT(*)  FROM student_loan.filed_for_bankrupcy AS A JOIN student_loan.longest_absense_from_school AS B ON A.name = B.name WHERE B.month > 5;
SELECT COUNT(*)  FROM student_loan.person p  JOIN student_loan.enlist e ON p.name = e.name  JOIN student_loan.bool b ON p.name = b.name WHERE e.organ = 'navy' AND b.bool = 'pos';
SELECT T1.name  FROM male AS T1  JOIN disabled AS T2 ON T1.name = T2.name  JOIN filed_for_bankrupcy AS T3 ON T1.name = T3.name;
SELECT COUNT(*)  FROM disabled  WHERE name IN (SELECT name FROM male)  AND name NOT IN (SELECT name FROM male)
SELECT COUNT(*)  FROM student_loan.unemployed u  JOIN student_loan.no_payment_due npd ON u.name = npd.name;
SELECT MAX(longest_absense_from_school.month)  FROM enrolled JOIN person ON enrolled.name = person.name JOIN enlist ON enlist.name = person.name WHERE enlist.organ = 'navy';
SELECT COUNT(*)  FROM disabled  WHERE NOT EXISTS (     SELECT *      FROM longest_absense_from_school      WHERE name = disabled.name AND month != 0 )
SELECT DISTINCT school  FROM longest_absense_from_school  WHERE month = 9;
SELECT organ  FROM disabled  GROUP BY organ  ORDER BY COUNT(name) DESC  LIMIT 1;
SELECT f.name  FROM filed_for_bankrupcy f  WHERE NOT EXISTS (   SELECT * FROM male m WHERE f.name = m.name );
SELECT      (COUNT(CASE WHEN T2.organ = 'navy' THEN T1.name END) /       CAST(COUNT(T1.name) AS REAL)) * 100  FROM      person AS T1  JOIN      enlist AS T2  ON      T1.name = T2.name  WHERE      T2.organ = 'navy';
SELECT AVG(longest_absense_from_school.month)  FROM disabled JOIN longest_absense_from_school ON disabled.name = longest_absense_from_school.name;
SELECT p.name  FROM person p  JOIN enlist e ON p.name = e.name  WHERE e.organ = 'foreign_legion';
SELECT      no_payment_due.bool  FROM      no_payment_due  WHERE      no_payment_due.name = 'student348';
SELECT school FROM enrolled WHERE name = 'student829';
SELECT month FROM longest_absense_from_school WHERE name = 'student217';
SELECT p.name  FROM longest_absense_from_school l   JOIN person p ON l.name = p.name WHERE l.month = 6;
SELECT `organ`  FROM `enlist`  WHERE `name` = 'student285';
SELECT `school`  FROM `enrolled`  JOIN `person` ON `enrolled.name` = `person.name`  WHERE `person.name` = 'student281'  AND `disabled.name` = 'student281';
SELECT enrolled.school  FROM enlisted  JOIN enrolled ON enlisted.name = enrolled.name  WHERE enlisted.organ = 'air_force';
SELECT p.name  FROM person p  WHERE p.name IN (     SELECT n.name      FROM no_payment_due n      WHERE n.bool = 'neg' )  AND p.name NOT IN (SELECT name FROM male) LIMIT 10;
SELECT p.name, e.organ  FROM person p  JOIN no_payment_due npd ON p.name = npd.name  JOIN enlist e ON p.name = e.name  WHERE npd.bool = 'pos';
SELECT p.name  FROM person p  JOIN disabled d ON p.name = d.name  JOIN enrolled e ON p.name = e.name  WHERE e.school = 'smc';
SELECT p.name FROM person p JOIN enlisted e ON p.name = e.name JOIN filed_for_bankruptcy f ON p.name = f.name WHERE e.organ = 'foreign_legion';
SELECT COUNT(*)  FROM (person p        JOIN male m ON p.name = m.name)  JOIN no_payment_due npd ON p.name = npd.name  WHERE npd.bool = 'neg';
SELECT p.name FROM person p JOIN enlisted e ON p.name = e.name WHERE e.organ = 'marines' AND EXISTS (     SELECT *     FROM longest_absense_from_school las     WHERE las.name = p.name     AND las.month = 6 );
SELECT COUNT(*)  FROM enrolled  JOIN person ON enrolled.name = person.name  WHERE school = 'smc' AND unemployed.name IS NOT NULL;
SELECT COUNT(*)  FROM unemployed  JOIN enrolled ON unemployed.name = enrolled.name  WHERE enrolled.month = 6;
SELECT COUNT(*)  FROM enrolled  JOIN person ON enrolled.name = person.name  WHERE school = 'ucsd'  AND EXISTS (     SELECT 1      FROM enlist      WHERE name = person.name      AND organ = 'peace_corps' );
SELECT T1.organ  FROM enlist AS T1  JOIN longest_absense_from_school AS T2  ON T1.name = T2.name;
SELECT      (COUNT(CASE WHEN bool.value = 'pos' AND enlist.organ = 'foreign_legion' THEN 1 END)      / NULLIF(COUNT(bool.value), 0)) * 100 AS percentage_ratio FROM      bool  JOIN      enlist ON bool.name = enlist.name WHERE      bool.value IN ('pos', 'neg');
SELECT      (COUNT(CASE WHEN T2.organ = 'navy' THEN 1 END)      OVER()      / COUNT(CASE WHEN T3.school = 'occ' THEN 1 END)      OVER()) * 100 AS percentage FROM      enlist AS T1 JOIN      person AS T2  ON      T1.name = T2.name JOIN      enrolled AS T3 ON      T2.name = T3.name;
SELECT `name` FROM `longest_absense_from_school` ORDER BY `month` DESC LIMIT 1;
SELECT COUNT(DISTINCT enrolled.name) AS total_students_in_school FROM enrolled;
SELECT `month`  FROM `longest_absense_from_school`  WHERE `month` = (SELECT MAX(`month`) FROM `longest_absense_from_school`)
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month = 4;
SELECT COUNT(*)  FROM (SELECT name FROM unemployed WHERE name IN (SELECT name FROM filed_for_bankrupcy)) AS intersection;
SELECT T1.organ  FROM disabled AS T1  JOIN enlist AS T2 ON T1.name = T2.name;
SELECT COUNT(*)  FROM (      unemployed u      JOIN filed_for_bankrupcy fb ON u.name = fb.name      WHERE fb.name IS NOT NULL AND u.name IN (SELECT name FROM no_payment_due WHERE bool = 'pos')  ) subquery;
SELECT COUNT(*)  FROM (      SELECT name      FROM disabled      WHERE name = '124' ) AS disabled_check JOIN (     SELECT name      FROM male      WHERE name = '124' ) AS male_check ON disabled_check.name = male_check.name;
SELECT      CASE          WHEN m.name = 'student180' THEN 'female'         ELSE 'male'     END AS gender,     d.name AS disability,     e.name AS employment,     npd.bool AS school_debt_status FROM      person p180 JOIN male m ON p180.name = m.name AND p180.name = 'student180'      LEFT JOIN disabled d ON p180.name = d.name     LEFT JOIN enlisted e ON p180.name = e.name     LEFT JOIN no_payment_due npd ON p180.name = npd.name WHERE      p180.name = 'student180' UNION ALL SELECT      CASE          WHEN p.name = 'student117' THEN 'female'         ELSE 'male'     END AS gender,     d.name AS disability,     e.name AS employment,     npd.bool AS school_debt_status FROM      person p117 JOIN male m ON p117.name = m.name AND p117.name = 'student117'      LEFT JOIN disabled d ON p117.name = d.name     LEFT JOIN enlisted e ON p117.name = e.name     LEFT JOIN no_payment_due npd ON p117.name = npd.name WHERE      p117.name = 'student117';
SELECT COUNT(*)  FROM person  JOIN bool ON person.name = bool.name  JOIN male ON person.name != male.name  JOIN enlist ON person.name = enlist.name  WHERE bool.name IS NULL AND        disen.name IS NULL AND        (enlist.organ = 'marines' OR enlist.organ = 'air_force')
SELECT      enlist.organ,     enrolled.school FROM      enlist JOIN      person ON enlist.name = person.name JOIN      enrolled ON person.name = enrolled.name WHERE      person.name IN ('student27', 'student17', 'student101');
SELECT      (COUNT(CASE WHEN d.name IS NOT NULL AND m.name IS NULL THEN s.name END) :: REAL) /      (COUNT(CASE WHEN d.name IS NULL AND m.name IS NOT NULL THEN s.name END) :: REAL) AS ratio FROM      student_loan.bool b      JOIN student_loan.person p ON b.name = p.name     LEFT JOIN student_loan.disabled d ON b.name = d.name     LEFT JOIN student_loan.male m ON b.name = m.name;
SELECT COUNT(*)  FROM (enlist.name AS student) JOIN female ON student = female.name LEFT JOIN male ON student = male.name WHERE male.name IS NULL
SELECT p.name  FROM person p  JOIN filed_for_bankrupcy fb ON p.name = fb.name  JOIN no_payment_due npd ON p.name = npd.name  WHERE fb.name IS NOT NULL AND npd.bool = 'neg';
SELECT AVG(longest_absense_from_school.month)  FROM longest_absense_from_school;
SELECT AVG(longest_absense_from_school.month)  FROM enrolled JOIN person ON enrolled.name = person.name WHERE unemployed.name IS NULL
SELECT AVG(longest_absense_from_school.month)  FROM disabled JOIN longest_absense_from_school  ON disabled.name = longest_absense_from_school.name;
SELECT T2.organ  FROM enlist AS T1  JOIN bool AS T2 ON T1.name = T2.name  WHERE T2.name = '313';
SELECT COUNT(*)  FROM enlist  WHERE organ = 'fire_department';
SELECT COUNT(*)  FROM enrolled  WHERE name IN (     SELECT name      FROM student_loan      WHERE `month` = 0 );
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month > 2;
SELECT COUNT(*)  FROM no_payment_due  WHERE bool = 'neg';
SELECT COUNT(*)  FROM no_payment_due  WHERE bool = 'pos';
SELECT p.name  FROM person p  JOIN disabled d ON p.name = d.name  WHERE d.name NOT IN (     SELECT name FROM longest_absense_from_school WHERE month != 0 )
SELECT COUNT(*)  FROM unemployed  WHERE name IN (SELECT name FROM enlisted WHERE organ = 'navy')
SELECT COUNT(*)  FROM male  JOIN enlist ON male.name = enlist.name  WHERE enlist.organ = 'foreign_legion';
SELECT COUNT(*)  FROM person p  JOIN female f ON p.name = f.name  JOIN enlist e ON p.name = e.name  WHERE e.organ = 'air_force';
SELECT T1.name  FROM disabled AS T1  JOIN longest_absense_from_school AS T2  ON T1.name = T2.name  WHERE T2.month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT p.name FROM person p JOIN unemployed u ON p.name = u.name JOIN enlist e ON p.name = e.name WHERE e.organ = 'marines';
SELECT AVG(longest_absense_from_school.month)  FROM disabled JOIN longest_absense_from_school  ON disabled.name = longest_absense_from_school.name;
SELECT      (COUNT(CASE WHEN u.name = s.name AND l.month = 5 THEN u.name END)      / COUNT(s.name)) * 100 AS percentage FROM      unemployed u JOIN      enrolled s ON u.name = s.name JOIN      longest_absense_from_school l ON s.name = l.name;
SELECT COUNT(*)  FROM unemployed  JOIN disabled ON unemployed.name = disabled.name  JOIN enrolled ON unemployed.name = enrolled.name  WHERE enrolled.month = 8;
SELECT U.name FROM unemployed U JOIN (     SELECT name, MAX(month) AS max_absense     FROM longest_absense_from_school     GROUP BY name ) LA ON U.name = LA.name;
SELECT p.name  FROM unemployed u  JOIN person p ON u.name = p.name  JOIN longest_absense_from_school las ON u.name = las.name  WHERE las.month = 0;
SELECT COUNT(*)  FROM (disabled  JOIN longest_absense_from_school ON disabled.name = longest_absense_from_school.name)  WHERE longest_absense_from_school.month = 3;
SELECT p.name  FROM person p  JOIN filed_for_bankrupcy fb ON p.name = fb.name  JOIN longest_absense_from_school las ON p.name = las.name  WHERE fb.name IS NOT NULL AND las.month = 0;
SELECT T1.name  FROM (filed_for_bankrupcy AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name)  WHERE T2.month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT      m.gender FROM      (SELECT 'male' AS gender UNION SELECT 'female') AS m     LEFT JOIN male AS ml ON m.gender = 'male' AND ml.name = 'student1000' WHERE      ml.name IS NULL;
SELECT COUNT(*)  FROM disabled  WHERE name IS NOT NULL;
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month > 6;
SELECT `name`  FROM longest_absense_from_school  WHERE `month` = (SELECT MAX(`month`) FROM longest_absense_from_school);
SELECT COUNT(*)  FROM enlist  WHERE organ = 'army';
SELECT AVG(longest_absense_from_school.month) AS average_absences FROM longest_absense_from_school;
SELECT COUNT(*)  FROM enlist  WHERE organ IN ('foreign_legion', 'peace_corps', 'army');
SELECT COUNT(*)  FROM (enlist        INNER JOIN disabled ON enlist.name = disabled.name)  WHERE enlist.organ = 'marines';
SELECT COUNT(*)  FROM unemployed  JOIN no_payment_due  ON unemployed.name = no_payment_due.name  WHERE no_payment_due.bool = 'pos';
SELECT p.name FROM person p JOIN female_student fs ON p.name = fs.name WHERE fs.absence_month = 0;
SELECT school  FROM enrolled  JOIN disabled ON enrolled.name = disabled.name  GROUP BY school  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T1.organ  FROM enlist AS T1  JOIN filed_for_bankrupcy AS T2  ON T1.name = T2.name;
SELECT COUNT(*)  FROM enlist  WHERE organ IN (SELECT name FROM male) AND COUNT(organ) > 1;
SELECT p.name FROM person p JOIN enlisted e ON p.name = e.name JOIN disabled d ON p.name = d.name WHERE e.organ = 'navy';
SELECT COUNT(*)  FROM enrolled  JOIN longest_absense_from_school ON enrolled.name = longest_absense_from_school.name  WHERE enrolled.school = 'smc' AND longest_absense_from_school.month = 7;
SELECT p.name  FROM person p JOIN disabled d ON p.name = d.name JOIN male m ON 0=1 -- Ensuring no male students are selected WHERE p.name IN (     SELECT name FROM person );
SELECT      CAST(COUNT(u.name) AS REAL) / COUNT(d.name) AS unemployment_ratio  FROM      unemployed u  JOIN      disabled d ON u.name = d.name;
SELECT      (COUNT(CASE WHEN m.name THEN 1 END) * 1.0 / COUNT(s.name)) * 100 AS percentage FROM      person s JOIN      bool b ON s.name = b.name JOIN      male m ON s.name = m.name JOIN      enlist e ON s.name = e.name WHERE      e.organ = 'fire_department';
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month = 5;
SELECT COUNT(*)  FROM enlist  WHERE organ = 'army';
SELECT COUNT(*)  FROM enrolled  WHERE school = 'ucla';
SELECT `name`  FROM `longest_absense_from_school`  WHERE `month` = (SELECT MAX(`month`) FROM `longest_absense_from_school`)  LIMIT 5;
SELECT COUNT(*)  FROM enlist  WHERE COUNT(organ) >= 2;
SELECT COUNT(*)  FROM enlist  WHERE organ = 'navy';
SELECT COUNT(*)  FROM (person        JOIN male ON person.name = male.name)        LEFT JOIN no_payment_due ON person.name = no_payment_due.name  WHERE no_payment_due.bool = 'neg';
SELECT COUNT(*)  FROM enlisted  JOIN person ON enlisted.name = person.name  WHERE organ = 'peace_corps'  AND school = 'ucsd';
SELECT COUNT(*)  FROM unemployed u  JOIN no_payment_due npd ON u.name = npd.name  WHERE npd.bool = 'neg';
SELECT COUNT(*)  FROM student_loan.person  WHERE name NOT IN (SELECT name FROM student_loan.male) AND name NOT IN (SELECT name FROM student_loan.no_payment_due WHERE bool = 'pos')
SELECT COUNT(*)  FROM unemployed  WHERE name IN (     SELECT name      FROM person      WHERE name NOT IN (         SELECT DISTINCT name          FROM longest_absense_from_school          WHERE month != 0     ) )
SELECT p.name  FROM person p JOIN no_payment_due npd ON p.name = npd.name JOIN enlist e ON p.name = e.name JOIN enlist e2 ON e.name = e2.name AND e.organ = 'fire_department';
SELECT COUNT(*)  FROM (enlist        INNER JOIN person ON enlist.name = person.name)        INNER JOIN male ON person.name = male.name  WHERE NOT male.name    AND enlist.organ = 'navy';
SELECT COUNT(*)  FROM unemployed  JOIN enlisted ON unemployed.name = enlisted.name  WHERE organ = 'army';
SELECT COUNT(*)  FROM unemployed  JOIN no_payment_due  ON unemployed.name = no_payment_due.name  WHERE no_payment_due.bool = 'pos';
SELECT p.name  FROM person p  JOIN no_payment_due npd ON p.name = npd.name  JOIN enlist el ON p.name = el.name  JOIN disabled d ON p.name = d.name  JOIN unemployed u ON p.name = u.name  JOIN bool b ON p.name = b.name AND b.bool = 'pos'  WHERE el.organ = 'Peace Corps'
SELECT COUNT(*)  FROM disabled  WHERE disabled.name NOT IN (SELECT name FROM male);
SELECT COUNT(*)  FROM (disabled        JOIN no_payment_due ON disabled.name = no_payment_due.name)  WHERE no_payment_due.bool = 'pos';
SELECT      AVG(1) AS average  FROM      (SELECT COUNT(*) AS count FROM disabled WHERE name NOT IN (SELECT name FROM male) AND organ = 'foreign_legion') AS subquery;
SELECT      CONCAT(         'FEMALE: ',         CAST(             (COUNT(CASE WHEN enlist.organ = 'fire_department' AND NOT enlist.name IN (SELECT name FROM male) THEN enlist.name END) * 100.0 / COUNT(CASE WHEN enlist.organ = 'fire_department' THEN enlist.name END)) AS VARCHAR(5)         ),         '%',         ', MALE: ',         CAST(             (COUNT(CASE WHEN enlist.organ = 'fire_department' AND enlist.name IN (SELECT name FROM male) THEN enlist.name END) * 100.0 / COUNT(CASE WHEN enlist.organ = 'fire_department' THEN enlist.name END)) AS VARCHAR(5)         ),         '%'     ) AS Ratio FROM enlist;
SELECT COUNT(*)  FROM enlist  WHERE organ = 'navy';
SELECT      CONCAT(DIVIDE(COUNT(CASE WHEN month = 0 THEN name END),                    COUNT(name)) * 100, '%') AS percentage_of_never BEEN_absent FROM      longest_absense_from_school;
SELECT      (COUNT(CASE WHEN `bool` = 'pos' THEN name END) /       COUNT(CASE WHEN `bool` = 'neg' THEN name END)) * 100 AS ratio FROM      no_payment_due
SELECT `name`, `school`  FROM `enrolled`  WHERE `month` = 15;
SELECT      DIVIDE(         FLOOR(COUNT(enlist.name)),         COUNT(DISTINCT enlist.organ)     ) as avg_enlisted_students_per_org FROM      enlist;
SELECT school, month  FROM enrolled  WHERE name = 'student214';
SELECT      (COUNT(disabled.name) * 100 / (SELECT COUNT(*) FROM person WHERE name NOT IN (SELECT name FROM disabled))) AS percentage FROM      disabled;
SELECT COUNT(*)  FROM longest_absense_from_school  JOIN person ON longest_absense_from_school.name = person.name  WHERE longest_absense_from_school.month = 9 AND EXISTS (     SELECT 1      FROM disabled      WHERE disabled.name = person.name );
SELECT p.name FROM person p WHERE p.name NOT IN (SELECT f.name FROM filed_for_bankrupcy f);
SELECT      person.name FROM      person JOIN      enlisted ON person.name = enlisted.name JOIN      male ON person.name = male.name JOIN      disabled ON person.name = disabled.name JOIN      filed_for_bankrupcy ON person.name = filed_for_bankrupcy.name JOIN      longest_absense_from_school ON person.name = longest_absense_from_school.name JOIN      unemployed ON person.name = unemployed.name JOIN      enrolled ON person.name = enrolled.name WHERE      person.name NOT IN (SELECT name FROM male) AND      enlisted.organ = 'air_force'; LIMIT 5;
SELECT COUNT(DISTINCT person.name)  FROM person  WHERE person.name NOT IN (SELECT name FROM disabled);
SELECT      CASE          WHEN m.name = 'student995' THEN 'male'         ELSE 'female'     END AS gender,     e.school FROM      enrolled AS e JOIN      male AS m ON e.name = m.name WHERE      m.name = 'student995';
SELECT disabled.name FROM disabled JOIN unemployed ON disabled.name = unemployed.name LIMIT 5;
SELECT COUNT(*)  FROM unemployed  WHERE name IN (SELECT name FROM filed_for_bankrupcy);
SELECT p.name, e.organ  FROM longest_absense_from_school AS las  JOIN person AS p ON las.name = p.name  JOIN enlisted AS e ON p.name = e.name  WHERE las.month = 4  LIMIT 5;
SELECT COUNT(*)  FROM no_payment_due  WHERE bool = 'pos' AND name IN (SELECT name FROM unemployed);
SELECT      enlist.organ,     CASE          WHEN no_payment_due.bool = 'pos' THEN 'Has payment due'         WHEN no_payment_due.bool = 'neg' THEN 'No payment due'     END AS payment_due_status FROM      enlist JOIN      student_loan.person p ON enlist.name = p.name JOIN      no_payment_due ON no_payment_due.name = p.name WHERE      p.name = 'student160';
SELECT p.name  FROM male m  JOIN person p ON m.name = p.name  JOIN enlist e ON m.name = e.name  WHERE e.organ = 'foreign_legion' LIMIT 10;
SELECT      CONCAT(DIVIDE(COUNT(p.name),                    (SELECT COUNT(*) FROM person p) * 100), '%') AS female_percentage FROM      person p WHERE      p.name NOT IN (SELECT name FROM male);
SELECT COUNT(*)  FROM filed_for_bankrupcy;
SELECT COUNT(*)  FROM enrolled  WHERE school = 'smc' AND month = 1;
SELECT COUNT(*)  FROM enlist  WHERE organ = 'air_force';
SELECT organ FROM enlist WHERE name = 'student168';
SELECT COUNT(*)  FROM disabled  JOIN male ON disabled.name = male.name  JOIN enlist ON disabled.name = enlist.name AND enlist.organ IS NOT NULL;
SELECT      s.school,     COUNT(DISTINCT d.name) AS disability_count FROM      enrolled e JOIN      student_loan.dbo.school s ON e.school = s.name JOIN      disabled d ON e.name = d.name GROUP BY      s.school;
SELECT      organ,     COUNT(CASE WHEN male.name IS NOT NULL THEN 1 END) AS male_count,     COUNT(CASE WHEN enlist.name IS NOT NULL AND enlist.name NOT IN (SELECT name FROM male) THEN 1 END) AS female_count FROM      enlisted JOIN      organ ON enlisted.organ = organ GROUP BY      organ;
SELECT e.name FROM enrolled e JOIN (SELECT name FROM enlisted WHERE COUNT(organ) = 2) orgs ON e.name = orgs.name GROUP BY e.name HAVING COUNT(school) = 2;
SELECT      CONCAT(DIVIDE(         MULTIPLY(             SUBTRACT(                 (SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 0),                 (SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 9)             ),             100         ),         (SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 0)     )) AS '%Difference')  FROM longest_absense_from_school;
SELECT enrolled.school, COUNT(*) AS total_enrollment, SUM(CASE WHEN filed_for_bankrupcy.name IS NOT NULL THEN 1 ELSE 0 END) AS bankrupt_students  FROM enrolled  LEFT JOIN filed_for_bankrupcy ON enrolled.name = filed_for_bankrupcy.name  GROUP BY enrolled.school  ORDER BY total_enrollment DESC  LIMIT 1;
SELECT COUNT(*)  FROM disabled  JOIN unemployed ON disabled.name = unemployed.name;
SELECT p.name FROM enrolled e JOIN person p ON e.name = p.name WHERE e.school = 'occ' AND EXISTS (     SELECT *     FROM enlist el     WHERE el.name = p.name AND el.organ = 'fire_department' );
SELECT p.name  FROM male m  JOIN unemployed u ON m.name = u.name  JOIN disabled d ON m.name = d.name  JOIN longest_absense_from_school las ON m.name = las.name AND las.month = 5;
SELECT e.name  FROM enrolled e  JOIN person p ON e.name = p.name  JOIN male m ON p.name = m.name  WHERE m.name IS NULL AND e.school IN ('occ', 'ulca');
SELECT enrolled.school, enlist.organ  FROM enrolled  JOIN enlist ON enrolled.name = 'student211' WHERE enrolled.name = 'student211';
SELECT      (COUNT(CASE WHEN ffb.name IN (SELECT name FROM male) THEN ffb.name ELSE NULL END) -       COUNT(CASE WHEN ffb.name NOT IN (SELECT name FROM male) THEN ffb.name ELSE NULL END)) AS difference FROM      filed_for_bankrupcy ffb JOIN      male m ON ffb.name = m.name;
SELECT AVG(longest_absense_from_school.month)  FROM student_loan.longest_absense_from_school  JOIN student_loan.person ON person.name = longest_absense_from_school.name  JOIN student_loan.male ON male.name = person.name  JOIN student_loan.unemployed ON unemployed.name = person.name
SELECT  CASE      WHEN (COUNT(CASE WHEN t1.name IN (SELECT name FROM disabled) THEN t2.name ELSE NULL END) * 100 / COUNT(t2.name)) -           (COUNT(CASE WHEN t1.name NOT IN (SELECT name FROM disabled) THEN t2.name ELSE NULL END) * 100 / COUNT(t2.name)) > 0      THEN CONCAT('Percentage difference:', (COUNT(CASE WHEN t1.name IN (SELECT name FROM disabled) THEN t2.name ELSE NULL END) * 100 / COUNT(t2.name)) -                   (COUNT(CASE WHEN t1.name NOT IN (SELECT name FROM disabled) THEN t2.name ELSE NULL END) * 100 / COUNT(t2.name)), '%, Disabled students have better attendance.')     ELSE CONCAT('Percentage difference:', (COUNT(CASE WHEN t1.name NOT IN (SELECT name FROM disabled) THEN t2.name ELSE NULL END) * 100 / COUNT(t2.name)) -                   (COUNT(CASE WHEN t1.name IN (SELECT name FROM disabled) THEN t2.name ELSE NULL END) * 100 / COUNT(t2.name)), '%, Disabled students do not have better attendance.') END AS Percentage_Difference_Between_Attendance FROM person t1 JOIN longest_absense_from_school t2 ON t1.name = t2.name;
SELECT      AVG(T3.month) AS avg_duration FROM     disabled AS T1 JOIN     male AS T2 ON T1.name = T2.name JOIN     longest_absense_from_school AS T3 ON T1.name = T3.name WHERE     T1.name IN (SELECT name FROM male);
SELECT      CONCAT(DIVIDE(COUNT(CASE WHEN u.month = 0 THEN u.name END), COUNT(e.month)) * 100, '%') as unemployed_ratio FROM      unemployed u JOIN      enrolled e ON u.name = e.name WHERE      u.month = 0 AND e.month = 0;
SELECT COUNT(*)  FROM (male  JOIN no_payment_due ON male.name = no_payment_due.name)  WHERE no_payment_due.bool = 'neg';
SELECT COUNT(*)  FROM student_loan.filed_for_bankrupcy AS b JOIN student_loan.no_payment_due AS p ON b.name = p.name WHERE p.bool = 'pos';
SELECT `bool`  FROM no_payment_due  WHERE `name` = 'student124';
SELECT COUNT(*)  FROM disabled  JOIN no_payment_due  ON disabled.name = no_payment_due.name  WHERE no_payment_due.bool = 'pos';
SELECT T1.name  FROM longest_absense_from_school AS T1  JOIN no_payment_due AS T2 ON T1.name = T2.name  WHERE T2.bool = 'neg'  ORDER BY T1.month DESC  LIMIT 1;
SELECT T1.name  FROM longest_absense_from_school AS T1  JOIN no_payment_due AS T2 ON T1.name = T2.name  WHERE T1.month = 5 AND T2.bool = 'neg';
SELECT COUNT(*)  FROM disabled  JOIN enlist ON disabled.name = enlist.name  WHERE enlist.organ = 'marines';
SELECT COUNT(*)  FROM (   SELECT longest_absense_from_school.name    FROM longest_absense_from_school    WHERE longest_absense_from_school.organ = 'peace_corps' AND longest_absense_from_school.month = (SELECT MAX(month) FROM longest_absense_from_school) ) AS combined_table;
SELECT COUNT(*)  FROM (   SELECT name    FROM filed_for_bankrupcy    WHERE name IN (     SELECT name      FROM enlist      WHERE organ = 'navy'   ) ) as subquery
SELECT COUNT(*)  FROM enlist  JOIN no_payment_due  ON enlist.name = no_payment_due.name  WHERE organ = 'marines' AND bool = 'pos';
SELECT      (SUM(CASE WHEN d.month = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(d.name)) AS percentage FROM      disabled d JOIN      longest_absense_from_school las ON d.name = las.name WHERE      las.month = 0;
SELECT COUNT(*)  FROM enlist  WHERE organ = 'air_force';
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month < 4;
SELECT COUNT(*)  FROM (enlist        INNER JOIN person ON enlist.name = person.name)  WHERE person.name NOT IN (SELECT name FROM male)  AND enlist.organ = 'marines';
SELECT      AVG(T2.month)  FROM      longest_absense_from_school AS T2  LEFT JOIN      male AS T3  ON      T2.name = T3.name  WHERE      T3.name IS NULL;
SELECT f.name  FROM filed_for_bankrupcy f  WHERE NOT EXISTS (   SELECT * FROM male m WHERE f.name = m.name );
SELECT `bool`  FROM no_payment_due  WHERE `name` = 'student299';
SELECT COUNT(*)  FROM enlist  WHERE organ = 'air_force';
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month > 1;
SELECT p.name FROM person p JOIN enlist e ON p.name = e.name JOIN bool b ON p.name = b.name WHERE e.organ = 'fire_department';
SELECT COUNT(*)  FROM (disabled        JOIN no_payment_due ON disabled.name = no_payment_due.name)  WHERE no_payment_due.bool = 'pos';
SELECT COUNT(*)  FROM student_loan.filed_for_bankrupcy AS A JOIN student_loan.enrolled AS B ON A.name = B.name WHERE B.school = 'occ'
SELECT COUNT(*)  FROM (disabled        JOIN male ON disabled.name = male.name)
SELECT p.name  FROM person p  JOIN disabled d ON p.name = d.name  JOIN enlist e ON p.name = e.name  WHERE e.organ = 'navy';
SELECT p.name  FROM male  JOIN no_payment_due AS npd ON male.name = npd.name  WHERE npd.bool = 'pos';
SELECT      u.employment_status,     nd.bool AS payment_status FROM      unemployed u      LEFT JOIN no_payment_due nd ON u.name = nd.name WHERE      u.name = 'student110' UNION SELECT      'Employed' AS employment_status,     (SELECT bool FROM no_payment_due WHERE name = 'student110') AS payment_status FROM      dual WHERE      NOT EXISTS (         SELECT              1          FROM              unemployed          WHERE              unemployed.name = 'student110'     );
SELECT      (COUNT(male.name) * 100.0 / COUNT(person.name)) AS percentage_male_students FROM      male,     person;
SELECT `school`, gender FROM `enrolled`  JOIN `male` ON `enrolled.name` = `male.name` WHERE `enrolled.name` = 'student34' OR `male.name` = 'student34';
SELECT l.longest_absense_from_school, l.organ  FROM longest_absense_from_school l  JOIN enlist e ON l.name = e.name  JOIN enlist d ON d.name = l.name AND d.organ = 'fire_department'  WHERE l.month = (SELECT MAX(month) FROM longest_absense_from_school WHERE name = d.name) AND d.organ = 'fire_department';
SELECT COUNT(*)  FROM longest_absense_from_school  JOIN person ON longest_absense_from_school.name = person.name  WHERE longest_absense_from_school.month = 1  AND enlist.organ = 'air_force';
SELECT unemployed.name FROM unemployed JOIN male ON unemployed.name = male.name JOIN disabled ON unemployed.name = disabled.name;
SELECT COUNT(*)  FROM male  JOIN enrolled ON male.name = enrolled.name  WHERE school = 'occ';
SELECT      (COUNT(CASE WHEN m.name THEN 1 END) / COUNT(p.name)) * 100 AS male_percentage_in_air_force FROM      person p JOIN      enlisted e ON p.name = e.name JOIN      male m ON p.name = m.name JOIN      filed_for_bankrupcy f ON p.name = f.name JOIN      unemployed u ON p.name = u.name JOIN      longest_absense_from_school l ON p.name = l.name JOIN      bool b ON p.name = b.name JOIN      enrolled en ON p.name = en.name JOIN      disabled d ON p.name = d.name WHERE      en.school = 'ucla'     AND en.month IS NOT NULL     AND e.organ = 'air_force';
SELECT      AVG(COUNT(enrolled.name)) AS average_number FROM      disabled JOIN      person ON disabled.name = person.name LEFT JOIN      male ON person.name = male.name LEFT JOIN      enrolled ON enrolled.name = person.name WHERE      disabled.name NOT IN (SELECT name FROM male) AND enrolled.school = 'uci';
SELECT COUNT(*)  FROM enrolled  WHERE month = 0;
SELECT p.name FROM person p JOIN enlist e ON p.name = e.name WHERE e.organ = 'marines';
SELECT COUNT(*)  FROM enlist  WHERE organ = 'navy';
SELECT name FROM longest_absense_from_school WHERE month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT organ  FROM enlist  GROUP BY organ  ORDER BY COUNT(name) DESC  LIMIT 1;
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month < 3;
SELECT COUNT(*)  FROM no_payment_due  WHERE bool = 'neg' AND name IN (SELECT name FROM unemployed);
SELECT COUNT(*)  FROM (enlist        INNER JOIN female_students ON enlist.name = female_students.name)        INNER JOIN male ON female_students.name != male.name  WHERE organ = 'army';
SELECT organ FROM enlist JOIN male ON enlist.name = male.name GROUP BY organ ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(*)  FROM disabled  WHERE name IN (     SELECT name      FROM longest_absense_from_school      WHERE month = 0 );
SELECT COUNT(*)  FROM unemployed  WHERE name IN (SELECT name FROM disabled)  AND name IN (SELECT name FROM unemployed);
SELECT p.name  FROM person p  JOIN disabled d ON p.name = d.name  JOIN longest_absense_from_school las ON p.name = las.name  WHERE las.month > 5;
SELECT COUNT(*)  FROM (enlisted e JOIN filed_for_bankruptcy fb ON e.name = fb.name)  JOIN enlist l ON e.name = l.name AND l.organ = 'marines';
SELECT COUNT(*)  FROM student_loan.filed_for_bankrupcy AS F  INNER JOIN student_loan.disabled AS D  ON F.name = D.name;
SELECT MAX(COUNT(longest_absense_from_school.month))  FROM enrolled  JOIN longest_absense_from_school ON enrolled.name = longest_absense_from_school.name  WHERE EXISTS (     SELECT * FROM enlist      WHERE enlist.name = enrolled.name AND enlist.organ = 'air_force' )
SELECT COUNT(*)  FROM (   SELECT p.name    FROM person AS p    JOIN filed_for_bankrupcy AS fb ON p.name = fb.name    JOIN longest_absense_from_school AS las ON p.name = las.name    WHERE las.month < 6 ) AS student_absence JOIN enlist AS e ON student_absence.name = e.name AND e.organ = 'fire_department'
SELECT COUNT(*)  FROM disabled  WHERE name IN (SELECT name FROM person)  AND name NOT IN (SELECT name FROM unemployed)  AND name NOT IN (SELECT name FROM longest_absense_from_school WHERE month = 0);
SELECT      organ,     (COUNT(CASE WHEN name IN (SELECT name FROM male) THEN 1 END) * 1.0 / COUNT(DISTINCT person.name)) * 100 AS percentage_of_males FROM      enlist e JOIN      person p ON e.name = p.name GROUP BY      organ ORDER BY      COUNT(CASE WHEN name IN (SELECT name FROM male) THEN 1 END) DESC LIMIT 1;
SELECT COUNT(*)  FROM Answer  WHERE AnswerText = 'No' AND QuestionID = 19;
SELECT COUNT(DISTINCT T3.UserID) AS UserCount  FROM Question AS T1  JOIN Answer AS T3 ON T1.QuestionID = T3.QuestionID   JOIN Survey AS T2 ON T3.SurveyID = T2.SurveyID   WHERE T1.questionid = 13 AND T2.SurveyID BETWEEN 2016 AND 2019
SELECT COUNT(DISTINCT UserID)  FROM Answer  JOIN Survey ON Answer.SurveyID = Survey.SurveyID  JOIN Question ON Answer.QuestionID = Question.QuestionID  WHERE Answer.AnswerText BETWEEN '27' AND '35'  AND Question.questiontext = 'Age'  AND Survey.Description LIKE '%2018%'
SELECT COUNT(DISTINCT A.UserID)  FROM Answer A  JOIN Survey S ON A.SurveyID = S.SurveyID  JOIN Question Q1 ON A.QuestionID = Q1.QuestionID  JOIN Question Q2 ON A.QuestionID = Q2.QuestionID  WHERE S.Description = 2019  AND Q1.questiontext = 'Are you from the United States?'  AND Q1.AnswerText = 'Yes'  AND Q2.questiontext = 'Do you have a family history of mental illness?'  AND Q2.AnswerText = 'Yes'
SELECT      s.Description,     COUNT(DISTINCT a.UserID) AS TotalPeople FROM      Survey s JOIN      Answer a ON s.SurveyID = a.SurveyID JOIN      Question q ON a.QuestionID = q.QuestionID WHERE      s.SurveyID BETWEEN 2016 AND 2019     AND q.QuestionID = 34     AND a.AnswerText = 'Yes' GROUP BY      s.Description ORDER BY      TotalPeople DESC LIMIT 1;
SELECT COUNT(*)  FROM Answer A  JOIN Survey S ON A.SurveyID = S.SurveyID  JOIN Question Q ON A.QuestionID = Q.QuestionID   WHERE Q.questiontext = 'Do you have a family history of mental illness?'    AND A.AnswerText = 'Yes'    AND S.Description LIKE '%2017%'    AND Q.questionid = CASE WHEN Q.questiontext = 'Are you Female?' THEN Q.questionid ELSE NULL END    AND A.AnswerText = 'Female'    AND Q.questionid = CASE WHEN Q.questiontext = 'What state do you live in?' THEN Q.questionid ELSE NULL END    AND A.AnswerText = 'Nebraska';
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE AnswerText = 'Yes' AND QuestionID = 54;
SELECT      MIN(SurveyID) as YoungestUserID,      MAX(SurveyID) as OldestUserID  FROM      Answer  WHERE      QuestionID = 1;
SELECT Country  FROM (   SELECT Answer.SurveyID, T2.Country, COUNT(*) as UserCount   FROM Answer    INNER JOIN (     SELECT SurveyID, MAX(SurveyID) as MaxSurveyID, Description, Country     FROM Survey     GROUP BY Description     HAVING MAX(Description) LIKE '%Country%'   ) AS T2 ON Answer.SurveyID = T2.MaxSurveyID   WHERE Answer.QuestionID = 3   GROUP BY Answer.SurveyID, T2.Country ) AS SubQuery ORDER BY UserCount ASC LIMIT 1;  UNION ALL  SELECT Country  FROM (   SELECT Answer.SurveyID, T2.Country, COUNT(*) as UserCount   FROM Answer    INNER JOIN (     SELECT SurveyID, MAX(SurveyID) as MaxSurveyID, Description, Country     FROM Survey     GROUP BY Description     HAVING MAX(Description) LIKE '%Country%'   ) AS T2 ON Answer.SurveyID = T2.MaxSurveyID   WHERE Answer.QuestionID = 3   GROUP BY Answer.SurveyID, T2.Country ) AS SubQuery ORDER BY UserCount ASC LIMIT 1 OFFSET (   SELECT COUNT(DISTINCT Country)   FROM (     SELECT Answer.SurveyID, T2.Country, COUNT(*) as UserCount     FROM Answer      INNER JOIN (       SELECT SurveyID, MAX(SurveyID) as MaxSurveyID, Description, Country       FROM Survey       GROUP BY Description       HAVING MAX(Description) LIKE '%Country%'     ) AS T2 ON Answer.SurveyID = T2.MaxSurveyID     WHERE Answer.QuestionID = 3     GROUP BY Answer.SurveyID, T2.Country   ) AS SubQuery   WHERE UserCount = (     SELECT MIN(UserCount)     FROM (       SELECT COUNT(*) as UserCount       FROM Answer       WHERE QuestionID = 3       GROUP BY SurveyID     ) AS MinUserCount   ) );
SELECT AVG(Age)  FROM (     SELECT T3.Age      FROM Answer AS T1      JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID      JOIN Question AS T3 ON T1.QuestionID = T3.QuestionID      WHERE T3.QuestionText = 'United States' AND T1.AnswerText = 'United States' AND T3.QuestionID = 3 )
SELECT      (SUM(CASE WHEN AT.AnswerText IN ('Yes', 'Maybe') THEN 1 ELSE 0 END) * 100 / COUNT(AA.SurveyID)) AS Percentage FROM      Answer AT JOIN      Answer AS AA ON AT.SurveyID = AA.SurveyID JOIN      Survey AS S ON AA.SurveyID = S.SurveyID JOIN      Question AS Q ON AA.QuestionID = Q.QuestionID WHERE      Q.questionid = 12;
SELECT COUNT(DISTINCT s.SurveyID)  FROM Survey s  JOIN Answer a ON s.SurveyID = a.SurveyID  WHERE YEAR(s.Description) = 2014  GROUP BY s.SurveyID  HAVING COUNT(a.AnswerText) > 200;
SELECT MAX(A.AnswerText)  FROM Answer A  JOIN Survey S ON A.SurveyID = S.SurveyID  JOIN Question Q ON A.QuestionID = Q.QuestionID  WHERE Q.questiontext = 'what is your age?' AND S.Description = '2014'
SELECT COUNT(*)  FROM Answer  JOIN Question ON Answer.QuestionID = Question.QuestionID  JOIN Survey ON Answer.SurveyID = Survey.SurveyID  WHERE Question.questiontext = 'Would you bring up a mental health issue with a potential employer in an interview?'  AND Answer.AnswerText = 'No'  AND Survey.Description = 2014;
SELECT T3.UserID  FROM Question AS T1  JOIN Answer AS T3 ON T1.questionid = T3.QuestionID  JOIN Survey AS T2 ON T2.SurveyID = T3.SurveyID  WHERE T1.questiontext = 'Do you think that discussing a physical health issue with your employer would have negative consequences?'  AND T3.AnswerText = 'Yes'  AND T2.Description = 2014;
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE SurveyID = 2014;
SELECT AnswerText  FROM Answer  JOIN Survey ON Answer.SurveyID = Survey.SurveyID  JOIN Question ON Answer.QuestionID = Question.QuestionID  WHERE Question.questiontext = 'Any additional notes or comments' AND Survey.Description = '2014' AND AnswerText != -1;
SELECT q.questiontext  FROM Question q  JOIN Answer a ON q.questionid = a.questionid  JOIN Survey s ON a.surveyid = s.surveyid  WHERE s.Description IN ('2014', '2016')  GROUP BY q.questionid  HAVING COUNT(DISTINCT s.surveyid) = 2;
SELECT COUNT(DISTINCT s.UserID)  FROM Survey s  JOIN Answer a ON s.SurveyID = a.SurveyID  JOIN Question q ON a.QuestionID = q.QuestionID  WHERE a.AnswerText = 'Canada' AND q.questionID = (SELECT questionID FROM Question WHERE questionText = 'Country you live in') AND YEAR(s.Description) = 2018;
SELECT q.questiontext  FROM Question q  JOIN Survey s ON q.QuestionID = s.SurveyID  WHERE s.Description = 2014;
SELECT COUNT(*)  FROM Answer A  JOIN Survey S ON A.SurveyID = S.SurveyID  JOIN Question Q ON A.QuestionID = Q.QuestionID  WHERE S.Description = '2016'  AND Q.questionid = 32  AND A.AnswerText = 'Yes';
SELECT COUNT(DISTINCT Answer.UserID)  FROM Answer  JOIN Question ON Answer.QuestionID = Question.questionid  JOIN Survey ON Answer.SurveyID = Survey.SurveyID  WHERE Question.questiontext = 'Have you had a mental health disorder in the past?' AND Answer.AnswerText = 'Yes' AND Survey.SurveyID BETWEEN 2016 AND 2018;
SELECT AVG(T3.AnswerText)  FROM Question AS T1  JOIN Answer AS T3 ON T1.questionid = T3.QuestionID  JOIN Survey AS T2 ON T2.SurveyID = T3.SurveyID  WHERE T1.questiontext = 'What is your age?' AND T2.Description = 2014
SELECT      (COUNT(CASE WHEN s.SurveyID = 2019 AND q.QuestionID = 33 AND a.AnswerText = 'Yes' THEN s.SurveyID END) / COUNT(CASE WHEN s.SurveyID = 2019 AND q.QuestionID = 33 THEN s.SurveyID END) - COUNT(CASE WHEN s.SurveyID = 2016 AND q.QuestionID = 33 AND a.AnswerText = 'Yes' THEN s.SurveyID END) / COUNT(CASE WHEN s.SurveyID = 2016 AND q.QuestionID = 33 THEN s.SurveyID END)) * 100 AS RateIncrease FROM      Question q INNER JOIN      Answer a ON q.questionid = a.questionid INNER JOIN      Survey s ON a.surveyid = s.surveyid WHERE      q.questiontext = 'Do you currently have a mental disorder?';
SELECT questionid  FROM Question  WHERE questiontext = 'Would you bring up a physical health issue with a potential employer in an interview?';
SELECT COUNT(*)  FROM Answer  WHERE QuestionID = 20;
SELECT COUNT(*)  FROM Answer  WHERE UserID = 5;
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE SurveyID = 2016;
SELECT COUNT(*)  FROM Question  WHERE QuestionID IN (     SELECT A.QuestionID      FROM Answer A      JOIN Survey S ON A.SurveyID = S.SurveyID      WHERE S.Description = 'mental health survey for 2018' );
SELECT COUNT(*)  FROM Answer A  JOIN Survey S ON A.SurveyID = S.SurveyID  JOIN Question Q ON A.QuestionID = Q.QuestionID  WHERE Q.questiontext = 'What country do you work in?';
SELECT AnswerText  FROM Answer  JOIN Question ON Answer.QuestionID = Question.QuestionID  JOIN Survey ON Answer.SurveyID = Survey.SurveyID  WHERE UserID = 2681 AND Question.questiontext = 'Do you currently have a mental health disorder?'
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE SurveyID = 2016;
SELECT AnswerText  FROM Answer  JOIN Question ON Answer.QuestionID = Question.QuestionID  WHERE Question.questiontext = 'What country do you work in?'  GROUP BY AnswerText  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(DISTINCT AnswerText)  FROM Answer  JOIN Question ON Answer.QuestionID = Question.QuestionID  WHERE Question.questiontext = 'Describe the conversation you had with your previous employer about your mental health, including their reactions and actions taken to address your mental health issue/questions.';
SELECT COUNT(*)  FROM Answer  JOIN Question ON Answer.QuestionID = Question.QuestionID  WHERE Question.questiontext = 'What US state or territory do you work in?'  AND Answer.AnswerText = 'Kansas';
SELECT COUNT(*)  FROM Answer  WHERE AnswerText != '-1' AND QuestionID = (SELECT questionid FROM Question WHERE questiontext = 'Any additional notes or comments.')
SELECT COUNT(*)  FROM Answer  JOIN Question ON Answer.QuestionID = Question.questionid  JOIN Survey ON Answer.SurveyID = Survey.SurveyID  WHERE Question.questiontext = 'Have you ever been diagnosed with a mental health disorder?' AND Answer.AnswerText = 'Yes';
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE SurveyID = 2018;
SELECT COUNT(DISTINCT Answer.UserID)  FROM Answer  JOIN Question ON Answer.QuestionID = Question.questionid  WHERE Question.questiontext = 'Overall, how much importance does your employer place on physical health?'
SELECT q.questiontext  FROM Question q  JOIN Answer a ON q.questionid = a.QuestionID  WHERE a.UserID = 2183 AND a.AnswerText = 'Mood Disorder (Depression, Bipolar Disorder, etc)';
SELECT      (COUNT(CASE WHEN A.AnswerText = 'Yes' THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM      Answer A  JOIN      Survey S ON A.SurveyID = S.SurveyID  JOIN      Question Q ON A.QuestionID = Q.QuestionID  WHERE      Q.questiontext = 'Has your employer ever formally discussed mental health (for example, as part of a wellness campaign or other official communication)?';
SELECT      CASE          WHEN (COUNT(A.UserID) - COUNT(B.UserID)) > 0 THEN COUNT(A.UserID) / COUNT(B.UserID) ELSE NULL END AS 'TimesMore'  FROM      Answer A  JOIN      Survey S1 ON A.SurveyID = S1.SurveyID  WHERE      S1.Description = 'mental health survey for 2017' UNION ALL SELECT      CASE          WHEN (COUNT(C.UserID) - COUNT(D.UserID)) > 0 THEN COUNT(C.UserID) / COUNT(D.UserID) ELSE NULL END AS 'TimesMore'  FROM      Answer C  JOIN      Survey S2 ON C.SurveyID = S2.SurveyID  WHERE      S2.Description = 'mental health survey for 2018'
SELECT      (COUNT(CASE          WHEN Survey.SurveyID LIKE '2016%' AND Answer.AnswerText = 'Yes' AND Answer.QuestionID = (SELECT questionid FROM question WHERE questiontext = 'Have you ever been diagnosed with a mental health disorder?')     THEN Survey.SurveyID END)      / COUNT(CASE          WHEN Survey.SurveyID LIKE '2016%'          THEN Survey.SurveyID END)) * 100 AS Percentage FROM      Survey JOIN      Answer ON Survey.SurveyID = Answer.SurveyID JOIN      Question ON Answer.QuestionID = Question.questionid WHERE      Question.questiontext = 'Have you ever been diagnosed with a mental health disorder?';
SELECT COUNT(*)  FROM Answer A  JOIN Survey S ON A.SurveyID = S.SurveyID  JOIN Question Q ON A.QuestionID = Q.QuestionID  WHERE Q.questiontext = 'Age' AND A.AnswerText < 25 AND S.Description = 2016;
SELECT      AVG(COUNT(A.UserID)) AS AverageRespondentsPerSurvey FROM      Survey  WHERE      Survey.Description BETWEEN 2014 AND 2019;
SELECT COUNT(DISTINCT s.UserID)  FROM Survey s  JOIN Answer a ON s.SurveyID = a.SurveyID  WHERE s.Description = '2019 Survey'  AND a.AnswerText = '1'  AND a.QuestionID = (SELECT Q.questionid FROM Question Q WHERE Q.questiontext = 'Have you ever sought treatment for a mental health disorder from a mental health professional?');
SELECT COUNT(*)  FROM Answer A  JOIN Survey S ON A.SurveyID = S.SurveyID  JOIN Question Q ON A.QuestionID = Q.QuestionID  WHERE S.Description = '2014' AND Q.questiontext = 'work remotely at least 50% of the time' AND A.AnswerText = 'Yes';
SELECT COUNT(DISTINCT QuestionID)  FROM Answer  WHERE SurveyID = 'Mental_Health_Survey_ID';
SELECT COUNT(DISTINCT s.SurveyID)  FROM Answer a  JOIN Question q ON a.QuestionID = q.QuestionID  JOIN Survey s ON a.SurveyID = s.SurveyID  WHERE q.questiontext = 'Substance Use Disorder' AND a.AnswerText = 'Diagnosed';
SELECT AnswerText, COUNT(*) as Frequency  FROM Answer  JOIN Survey ON Answer.SurveyID = Survey.SurveyID  WHERE Survey.SurveyID = 2017 AND Answer.QuestionID = 85  GROUP BY AnswerText  ORDER BY Frequency DESC  LIMIT 3;
SELECT      (SUM(revenue['Year'] = 1998) - SUM(revenue['Year'] = 1997)) AS revenue_difference FROM      revenue;
SELECT      'Studio Entertainment' as Segment,      SUM(`Disney Consumer Products[NI 2]` + `Disney Interactive[NI 3][Rev 1]` + `Walt Disney Parks and Resorts` + `Disney Media Networks`) as Revenue  FROM      revenue  WHERE      Year = 1998  UNION  SELECT      'Disney Media Networks',      SUM(`Disney Media Networks`) as Revenue  FROM      revenue  WHERE      Year = 1998  ORDER BY      Revenue DESC  LIMIT 1;
SELECT director.name FROM director JOIN movies_total_gross ON director.name = movies_total_gross.director JOIN characters ON movies_total_gross.movie_title = characters.movie_title WHERE characters.movie_title = 'Pinocchio';
SELECT villains  FROM characters  WHERE movie_title IN (     SELECT title      FROM movies_total_gross      WHERE director = 'Wolfgang Reitherman' );
SELECT COUNT(*)  FROM director d  JOIN movies_total_gross m ON d.name = 'Wolfgang Reitherman' AND instr(m.release_date, '-') + 1 = 3 AND SUBSTR(m.release_date, instr(m.release_date, '-') + 1, 3) = 'Dec'
SELECT director.name FROM characters JOIN movie_title ON characters.movie_title = movie_title JOIN director ON movie_title = director.movie_title WHERE characters.song = 'Once Upon a Dream';
SELECT T3.voice_actor  FROM characters AS T1  JOIN voice_actors AS T3 ON T3.character = T1.villain  WHERE T1.movie_title = 'Alice in Wonderland'
SELECT m.release_date  FROM movies_total_gross m  JOIN voice_actors v ON m.movie_title = v.movie  WHERE v.voice_actor = 'Alan Tudyk';
SELECT COUNT(*)  FROM voice-actors v  JOIN characters c ON v.character = c.movie_title  WHERE v.voice-actor = 'Alan Tudyk' AND (c.release_date, INSTR(c.release_date, '-') + 5) > 12;
SELECT COUNT(movie_title)  FROM movies_total_gross  WHERE director = 'Wolfgang Reitherman' AND genre = 'Comedy';
SELECT movie_title FROM movies_total_gross JOIN director ON movies_total_gross.release_date = director.release_date WHERE director.name = 'Wolfgang Reitherman' AND movies_total_gross.total_gross = (     SELECT MAX(total_gross)     FROM movies_total_gross );
SELECT movie_title FROM movies_total_gross JOIN director ON movies_total_gross.release_date = director.release_date WHERE director.name = 'Wolfgang Reitherman' AND movies_total_gross.MPAA_rating = 'G';
SELECT characters.movie_title, characters.villain FROM characters JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title WHERE movies_total_gross.total_gross = (SELECT MAX(total_gross) FROM movies_total_gross) GROUP BY characters.villain ORDER BY COUNT(*) DESC LIMIT 1;
SELECT genre  FROM movies_total_gross  WHERE title IN (SELECT movie_title                  FROM characters                  WHERE villian = 'Commander Rourke');
SELECT villian  FROM characters  WHERE movie_title = 'Beauty and the Beast';
SELECT movie_title FROM characters WHERE hero = 'Robin Hood';
SELECT movie_title FROM characters WHERE song = 'I Thought I Lost You';
SELECT voice_actor  FROM voice-actors  WHERE character = 'Binkie Muddlefoot';
SELECT characters.hero  FROM characters  JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title  WHERE movies_total_gross.total_gross = '$222,527,828';
SELECT song  FROM characters  JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title  WHERE substr(release_date, instr(release_date, ', ') + 1) BETWEEN 1970 AND 1979  ORDER BY total_gross DESC  LIMIT 1;
SELECT characters.movie_title, characters.hero  FROM characters  JOIN director ON characters.director = director.name  WHERE director.name = 'Will Finn';
SELECT voice_actor  FROM voice-actors  WHERE movie = 'The Little Mermaid' AND character = 'hero';
SELECT director.name FROM director JOIN voice_actors ON director.name = voice_actors.director JOIN characters ON characters.movie_title = voice_actors.movie WHERE characters.character = 'Aunt Sarah' AND voice_actors.voice_actor = 'Verna Felton';
SELECT `release_date`  FROM `movies_total_gross`  JOIN `voice-actors` ON `movies_total_gross.movie_title` = `voice-actors.movie`  WHERE `voice-actors.character` = 'Hyacinth Hippo' AND `voice-actors.voice-actor` = 'Tress MacNeille';
SELECT director.name FROM characters JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title WHERE movies_total_gross.genre = 'Adventure' AND movies_total_gross.release_date = 'Mar 30, 2007';
SELECT m.movie_title  FROM movies_total_gross m  JOIN director d ON m.director = d.name  WHERE d.name = 'Wolfgang Reitherman'  AND m.inflation_adjusted_gross = (     SELECT MAX(inflation_adjusted_gross) FROM movies_total_gross )
SELECT heroes.movie_title, characters.hero  FROM characters  JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title  WHERE movies_total_gross.release_date = '4-Mar-16' AND movies_total_gross.genre = 'Adventure';
SELECT m.movie_title  FROM movies_total_gross m  JOIN characters c ON m.movie_title = c.movie_title  WHERE c.hero = 'Donald Duck'  GROUP BY m.movie_title, c.movie_title  HAVING COUNT(m.movie_title) > 1  ORDER BY MAX(m.total_gross) DESC  LIMIT 1;
SELECT COUNT(*)  FROM director  WHERE name = 'Wolfgang Reitherman';
SELECT name  FROM director  GROUP BY name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM movies_total_gross  WHERE MPAA_rating = 'R'  AND genre = 'Horror'  AND (cast(SUBSTR(release_date, instr(release_date, ', ') + 1) as int) BETWEEN 1990 AND 2015);
SELECT character  FROM voice-actors  WHERE voice-actor = 'Frank Welker';
SELECT mtg.total_gross  FROM movies_total_gross mtg  JOIN characters ch ON mtg.movie_title = ch.movie_title  WHERE ch.song = 'Little Wonders';
SELECT MPAA_rating  FROM disney.movies_total_gross  WHERE villains = 'Turbo';
SELECT COUNT(*)  FROM voice-actors v  JOIN characters c ON v.character = c.movie_title  JOIN movies_total_gross mg ON c.movie_title = mg.movie_title  WHERE v.voice_actor = 'Bill Thompson' AND mg.MPAA_rating IN ('R', 'PG')
SELECT COUNT(*)  FROM director d  JOIN movies_total_gross m ON d.name = 'Gary Trousdale' AND m.genre = 'Adventure';
SELECT d.name FROM director d JOIN voice_actors v ON d.name = v.director WHERE v.voice_actor = 'Bill Thompson' GROUP BY d.name ORDER BY COUNT(d.name) DESC LIMIT 1;
SELECT movie_title FROM movies_total_gross WHERE genre = 'Animation' AND MPAA_rating = 'PG' AND director IN (     SELECT name     FROM director     WHERE director = 'Ron Clements' ) ORDER BY total_gross DESC LIMIT 1;
SELECT DISTINCT v.voice-actor  FROM voice_actors v  JOIN characters c ON v.character = c.movie_title  JOIN director d ON c.release_date = 'Feb 9, 1940' AND d.name = 'Ben Sharpsteen';
SELECT COUNT(*)  FROM disney.director d  JOIN disney.movies_total_gross mg ON d.name = mg.director  WHERE d.name = 'Ron Clements' AND mg.genre = 'Adventure' AND mg.MPAA_rating = 'PG';
SELECT COUNT(*)  FROM movies_total_gross  WHERE genre = 'Horror';
SELECT villian FROM characters WHERE movie_title = 'The Great Mouse Detective';
SELECT voice_actor  FROM voice-actors  WHERE movie = 'Meet the Robinsons';
SELECT name  FROM director  GROUP BY name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Year FROM revenue WHERE Year BETWEEN 2000 AND 2010 AND `Studio Entertainment[NI 1]` = (SELECT MAX(`Studio Entertainment[NI 1]`) FROM revenue WHERE Year BETWEEN 2000 AND 2010);
SELECT song  FROM `movies_total_gross`  JOIN `characters` ON `movies_total_gross.movie_title` = `characters.movie_title`  WHERE `genre` = 'Drama';
SELECT va.voice_actor  FROM characters c  JOIN voice_actors va ON c.movie_title = va.movie AND c.hero = 1;
SELECT DISTINCT d.name  FROM director AS d  JOIN movies_total_gross AS mg ON mg.director = d.name  WHERE cast(SUBSTR(mg.release_date, instr(mg.release_date, ', ') + 1) as int) BETWEEN 1990 AND 2000;
SELECT `voice-actor`  FROM `voice-actors`  WHERE `movie` = 'The Rescuers' AND `villian` = 'TRUE';
SELECT director.name, characters.movie_title, voice_actors.voice_actor FROM director JOIN characters ON director.name = characters.director JOIN voice_actors ON characters.movie_title = voice_actors.movie AND characters.hero = voice_actors.character OR characters.villian = voice_actors.character;
SELECT DISTINCT c.movie_title, c.hero, c.villian FROM characters c JOIN movies_total_gross mg ON c.movie_title = mg.movie_title WHERE mg.genre LIKE '%animation%' AND mg.MPAA_rating = 'PG';
SELECT movie_title FROM movies_total_gross WHERE total_gross = (SELECT MAX(total_gross) FROM movies_total_gross) AND song IS NULL;
SELECT director.name FROM director JOIN (SELECT movie_title, COUNT(DISTINCT character) AS num_voice_actors       FROM characters       JOIN voice_actors ON characters.movie_title = voice_actors.movie       GROUP BY movie_title       ORDER BY num_voice_actors DESC       LIMIT 1) AS mv ON director.name = director_direct_movie.director
SELECT T3.voice_actor  FROM characters AS T1  JOIN movies_total_gross AS T2 ON T1.movie_title = T2.movie_title  JOIN voice_actors AS T3 ON T1.movie_title = T3.movie  WHERE T2.release_date = 'Nov 24, 2010';
SELECT DISTINCT d.name  FROM director d  JOIN characters c ON d.director = c.movie_title  WHERE c.song IS NOT NULL;
SELECT mtg.total_gross  FROM movies_total_gross mtg  JOIN voice_actors va ON mtg.movie_title = va.movie  WHERE va.voice_actor = 'Jim Cummings';
SELECT m.movie_title  FROM movies_total_gross m  JOIN director d ON m.release_date = d.release_date  WHERE d.name = 'Ron Clements'  ORDER BY m.total_gross DESC  LIMIT 1;
SELECT AVG(movies_total_gross.total_gross)  FROM movies_total_gross  JOIN voice_actors ON movies_total_gross.movie_title = voice_actors.movie  WHERE voice_actors.voice_actor = 'Sterling Holloway';
SELECT      (SUM(CASE WHEN movie_title IN (SELECT DISTINCT movie_title FROM characters WHERE song IS NOT NULL) THEN movies_total_gross.total_gross ELSE 0 END) / SUM(movies_total_gross.total_gross)) * 100 AS percentage FROM      movies_total_gross;
SELECT movie_title, genre FROM movies_total_gross WHERE substr(release_date, length(release_date) - 3, length(release_date)) = '2016';
SELECT villian  FROM characters  WHERE movie_title = 'Little Mermaid';
SELECT movie_title  FROM director  WHERE name = 'Jack Kinney';
SELECT      m1.movie_title,     (m1.inflation_adjusted_gross / m1.total_gross) as estimated_inflation_rate FROM      movies_total_gross AS m1 WHERE      m1.total_gross = (SELECT MAX(total_gross) FROM movies_total_gross)
SELECT `movie_title`, `release_date` FROM `movies_total_gross` WHERE `MPAA_rating` = 'PG-13' AND `genre` = 'Romantic Comedy';
SELECT m.title, c.character  FROM movies_total_gross m JOIN voice_actors v ON m.title = v.movie  JOIN characters c ON m.title = c.movie_title WHERE v.voice_actor = 'Bill Thompson';
SELECT movie_title, song  FROM characters  JOIN director ON characters.director = director.name  WHERE director.name = 'Ron Clements';
SELECT      c.movie_title,     c.hero,     c.song FROM      characters c JOIN      director d ON c.release_date = SUBSTRING(d.director, INSTR(d.director, ', ') + 2) WHERE      d.name = 'Wolfgang Reitherman' AND      c.release_date LIKE '1977%'
SELECT m.movie_title, d.name  FROM movies_total_gross m  JOIN characters c ON m.movie_title = c.movie_title  JOIN director d ON m.movie_title = d.director  WHERE c.hero = 'Donald Duck';
SELECT      characters.hero,     director.name,     movies_total_gross.release_date FROM      characters JOIN      director ON characters.movie_title = director.director JOIN      movies_total_gross ON characters.movie_title = movies_total_gross.movie_title WHERE      characters.movie_title = 'Mulan';
SELECT movie_title, total_gross, MPAA_rating  FROM movies_total_gross WHERE movie_title IN (     SELECT DISTINCT movie_title      FROM characters      WHERE hero = 'Elsa' );
SELECT      movie_title,     name as director,     release_date FROM      characters c JOIN      voice-actors va ON c.movie_title = va.movie AND va.voice-actor = 'Freddie Jones';
SELECT m.movie_title, mg.total_gross FROM voice-actors v JOIN characters c ON v.character = c.character JOIN movies_total_gross mg ON c.movie_title = mg.movie_title JOIN movies_total_gross mg_adj ON c.movie_title = mg_adj.movie_title AND mg_adj.inflation_adjusted_gross IS NOT NULL WHERE v.voice_actor = 'Frank Welker'  AND (mg_adj.inflation_adjusted_gross / mg.total_gross) < 2;
SELECT D.name FROM director D JOIN movies_total_gross MTG ON D.director = MTG.director WHERE MTG.total_gross = (SELECT MAX(total_gross) FROM movies_total_gross)
SELECT      v.voice_actor,     c.villian FROM      voice-actors v JOIN      characters c ON v.character = c.movie_title WHERE      c.movie_title = 'Cinderella';
SELECT `voice-actors.voice-actor` FROM `voice-actors` JOIN `characters` ON `characters.movie_title` = `voice-actors.movie` WHERE `characters.movie_title` = 'Lion King' AND `characters.hero` = 'true';
SELECT      d.name,     m.MPAA_rating FROM      characters c JOIN      movies_total_gross m ON c.movie_title = m.movie_title JOIN      director d ON c.movie_title = d.director WHERE      m.genre = 'Musical' AND      SUBSTR(m.release_date, LENGTH(m.release_date) - 3, LENGTH(m.release_date)) = '1993';
SELECT      m.movie_title,      d.name AS director FROM      movies_total_gross m JOIN      director d ON m.director = d.name WHERE      m.genre = 'Comedy' AND      SUBSTR(m.release_date, INSTR(m.release_date, '-') + 3, 4) BETWEEN '1991' AND '2000' LIMIT 5;
SELECT m.movie_title, d.name  FROM movies_total_gross m  JOIN director d ON m.director = d.name  WHERE STR_TO_DATE(m.release_date, '%Y-%m-%d') BETWEEN '2001-01-01' AND '2005-12-31'  AND m.total_gross > (SELECT AVG(m2.total_gross) FROM movies_total_gross m2 WHERE STR_TO_DATE(m2.release_date, '%Y-%m-%d') BETWEEN '2001-01-01' AND '2005-12-31') * 1.5;
SELECT voice_actor  FROM voice-actors  WHERE movie = 'Hercules' AND character = 'Calliope';
SELECT COUNT(*)  FROM voice-actors  JOIN characters ON voice-actors.character = characters.movie_title  WHERE characters.movie_title = 'Aladdin';
SELECT movie_title FROM voice-actors WHERE voice-actor = 'Jeff Bennett';
SELECT director.name FROM characters JOIN movie ON characters.movie_title = movie.title JOIN director ON movie.director_id = director.id WHERE characters.movie_title = 'Wreck-It Ralph';
SELECT title  FROM director  WHERE name = 'Jack Kinney';
SELECT COUNT(*)  FROM movies_total_gross  WHERE substr(release_date, length(release_date) - 1, length(release_date)) between '37' and '50';
SELECT song  FROM characters  JOIN director ON characters.director = director.name  WHERE director.name = 'Ben Sharpsteen';
SELECT `release_date`  FROM characters  JOIN director ON characters.director = director.name  WHERE characters.movie_title = 'The Lion King' AND director.name = 'Roger Allers';
SELECT      villains.villain  FROM      characters  JOIN      voice_actors ON characters.movie_title = voice_actors.movie  WHERE      (characters.hero = 'Scott Weinger' AND characters.villian IS NOT NULL) OR      (characters.hero = 'Brad Kane' AND characters.villian IS NOT NULL);
SELECT movie_title FROM characters JOIN director ON characters.release_date = director.release_date WHERE director.name = 'Wolfgang Reitherman' AND villain IS NULL;
SELECT movie_title  FROM disney.director  WHERE name = 'Jack Kinney' AND SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) < '47';
SELECT DISTINCT d.name  FROM director AS d  JOIN movies_total_gross AS mg ON d.director = mg.director  WHERE mg.total_gross > 100000000;
SELECT movie_title, song  FROM characters  JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title  WHERE total_gross = (SELECT MAX(total_gross) FROM movies_total_gross);
SELECT d.name FROM director AS d JOIN characters AS c ON d.director = c.director JOIN movies_total_gross AS mg ON c.movie_title = mg.movie_title WHERE substr(mg.release_date, length(mg.release_date) - 3, length(mg.release_date)) BETWEEN '1937' AND '1990' GROUP BY d.name ORDER BY SUM(mg.total_gross) DESC LIMIT 1;
SELECT characters.movie_title, characters.hero  FROM characters  JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title  WHERE movies_total_gross.genre = 'Comedy';
SELECT DISTINCT v.voice-actor  FROM voice-actors v  JOIN characters c ON v.character = c.movie_title  JOIN director d ON c.director = d.name  WHERE d.name = 'Wolfgang Reitherman';
SELECT genre  FROM characters  WHERE hero = 'Taran';
SELECT      v.voice_actor  FROM      characters c  JOIN      voice_actors v ON c.movie_title = v.movie  WHERE      c.hero = 'Elsa'  AND      EXISTS (         SELECT              1          FROM              director d          WHERE              c.movie_title = d.name     );
SELECT      (COUNT(DISTINCT d.name) * 1.0 / COUNT(DISTINCT DISTINCT_director.name)) * 100 AS percentage FROM      (SELECT DISTINCT name FROM director) AS DISTINCT_director JOIN      movies_total_gross mg ON DISTINCT_director.name = mg.director WHERE      mg.total_gross > 100000000;
SELECT      (COUNT(CASE WHEN c.genre = 'Drama' THEN 1 END)       / COUNT(*)::float) * 100 AS percentage FROM      movies_total_gross m JOIN      characters c ON m.movie_title = c.movie_title WHERE      c.hero IS NOT NULL OR c.villian IS NOT NULL;
SELECT movie_title FROM characters WHERE substr(release_date, length(release_date) - 1, length(release_date)) ASC LIMIT 1;
SELECT COUNT(movie_title)  FROM movies_total_gross  WHERE substr(release_date, length(release_date) - 1, length(release_date)) BETWEEN '10' AND '16';
SELECT villian FROM characters WHERE release_date < (SELECT substr(release_date, length(release_date) - 1, length(release_date)) FROM characters ORDER BY release_date LIMIT 1);
SELECT movie_title FROM movies_total_gross JOIN characters ON movies_total_gross.movie_title = characters.movie_title WHERE characters.genre = 'Action' ORDER BY movies_total_gross.total_gross DESC LIMIT 1;
SELECT voice_actor  FROM voice-actors  WHERE character = 'Akela';
SELECT SUM(movies_total_gross.total_gross) FROM movies_total_gross WHERE movies_total_gross.release_date BETWEEN '2010-01-01' AND '2016-12-31';
SELECT      c.hero FROM      characters c JOIN      movies_total_gross m ON c.movie_title = m.movie_title WHERE      m.genre = 'Adventure' AND m.inflation_adjusted_gross = (SELECT MAX(inflation_adjusted_gross) FROM movies_total_gross)
SELECT director.name FROM director JOIN movies_total_gross ON director.name = director WHERE movies_total_gross.total_gross = (SELECT MIN(total_gross) FROM movies_total_gross)
SELECT      (SUM(`Walt Disney Parks and Resorts`) WHERE YEAR = 2010) /      (SUM(Total) WHERE YEAR = 2010) AS percentage FROM      revenue;
SELECT      (SUM(movies_total_gross.total_gross)      WHERE movies_total_gross.genre = 'Action' AND movies_total_gross.MPAA_rating = 'PG-13') /      (COUNT(movies_total_gross.movie_title)      WHERE movies_total_gross.genre = 'Action' AND movies_total_gross.MPAA_rating = 'PG-13') AS avg_gross FROM      movies_total_gross;
SELECT COUNT(*)  FROM voice-actors  JOIN movie ON voice-actors.movie = movie.title  WHERE movie.name = 'Bambi';
SELECT      DIVIDE(movies_total_gross.inflation_adjusted_gross, movies_total_gross.total_gross) as inflation_rate FROM      movies_total_gross WHERE      substr(movies_total_gross.release_date, length(movies_total_gross.release_date) - 3, length(movies_total_gross.release_date)) = '1995';
SELECT      (SELECT inflation_adjusted_gross FROM movies_total_gross WHERE movie_title = 'Cars') -      (SELECT inflation_adjusted_gross FROM movies_total_gross WHERE movie_title = 'Cars 2') AS Gross_Difference,     (SELECT movie_title FROM movies_total_gross ORDER BY inflation_adjusted_gross DESC LIMIT 1) AS More_Popular_Movie FROM      movies_total_gross;
SELECT      c.movie_title,     m.inflation_adjusted_gross FROM     director d JOIN     characters c ON d.name = c.director JOIN     movies_total_gross m ON c.movie_title = m.movie_title WHERE     d.name = 'Chris Buck' ORDER BY     m.release_date DESC LIMIT 1;
SELECT DISTINCT v.voice-actor  FROM voice-actors v  GROUP BY v.voice-actor  HAVING COUNT(v.character) > 5;
SELECT      MAX(movies_total_gross.inflation_adjusted_gross) AS highest_grossing,     (SUM(MAX(movies_total_gross.inflation_adjusted_gross)) OVER () * 100 / SUM(movies_total_gross.inflation_adjusted_gross)) AS percentage FROM      movies_total_gross ORDER BY      inflation_adjusted_gross DESC LIMIT 5;
SELECT      (COUNT(CASE WHEN m.total_gross > 100000000 THEN m.movie_title END)      / COUNT(CASE WHEN d.name = 'Gary Trousdale' THEN m.movie_title END)) * 100 AS percentage FROM      movies_total_gross m JOIN      director d ON m.director = d.name;
SELECT COUNT(*)  FROM current  WHERE ballotpedia_id IS NULL OR ballotpedia_id = '';
SELECT official_full_name  FROM current  WHERE cspan_id IS NULL OR cspan_id = '';
SELECT COUNT(*)  FROM current  WHERE birthday_bio > '1960-01-01';
SELECT COUNT(*)  FROM current  WHERE gender_bio = 'F' AND fec_id IS NULL;
SELECT google_entity_id_id  FROM current  WHERE official_full_name = 'Sherrod Brown';
SELECT      official_full_name  FROM      current  WHERE      official_full_name IN ('Sherrod Brown', 'Maria Cantwell')  ORDER BY      birthday_bio ASC  LIMIT 1;
SELECT T1.facebook  FROM current AS T1  WHERE T1.official_full_name = 'Todd Young';
SELECT COUNT(*)  FROM current  WHERE instagram IS NULL;
SELECT `official_full_name`  FROM current  JOIN social-media ON current.bioguide_id = social-media.bioguide  WHERE social-media.twitter_id = '234128524';
SELECT      c.votesmart_id, c.official_full_name, c.gender_bio, s.youtube FROM      current AS c JOIN      social_media AS s ON c.bioguide = s.bioguide WHERE      c.gender_bio = 'F';
SELECT      c.facebook FROM      current c JOIN      (SELECT MAX(birthday_bio) AS max_birthday FROM current) AS oldest_legislator WHERE      c.birthday_bio = oldest_legislator.max_birthday
SELECT COUNT(*)  FROM current  WHERE opensecrets_id IS NULL OR opensecrets_id = ''  AND instagram IS NULL;
SELECT COUNT(*)  FROM current  WHERE official_full_name = 'Roger F. Wicker'  AND (district IS NULL OR district = '');
SELECT COUNT(*)  FROM current  WHERE official_full_name = 'Sherrod Brown';
SELECT      official_full_name  FROM      current  WHERE      bioguide_id IN (         SELECT              bioguide          FROM              historical-terms          WHERE              state_rank IS NOT NULL     );
SELECT state  FROM current  JOIN current_terms ON current.bioguide_id = current_terms.bioguide  WHERE official_full_name = 'Sherrod Brown' AND start = '1993-01-05';
SELECT COUNT(*)  FROM current  WHERE gender_bio = 'F' AND (   SELECT COUNT(*)    FROM current_terms    WHERE bioguide = current.bioguide AND type = 'term' ) > 4;
SELECT COUNT(*)  FROM current  WHERE bioguide_id IN (   SELECT bioguide FROM current_terms WHERE terms > 6 ) AND birthday_bio >= '1960-01-01'
SELECT      AVG(terms.end - terms.start) AS avg_terms FROM      current,     (SELECT          bioguide,          COUNT(DISTINCT terms) AS terms      FROM          current,         (SELECT              bioguide,              address,              bioguide,              chamber,              class,              contact_form,              district,              end,              fax,              last,              name,              office,              party,              party_affiliations,              phone,              relation,              rss_url,              start,              state,              state_rank,              title,              type,              url          FROM              current-terms          WHERE              gender_bio = 'F') AS terms      WHERE          current.bioguide = terms.bioguide      GROUP BY          current.bioguide) AS female_terms WHERE      current.gender_bio = 'F';
SELECT      (COUNT(CASE WHEN religion_bio = 'Roman Catholic' AND instagram IS NULL THEN 1 END)      / COUNT(CASE WHEN religion_bio = 'Roman Catholic' THEN 1 END)) * 1.0 AS percentage FROM legislator.current
SELECT COUNT(*)  FROM legislator.current  WHERE gender_bio = 'M';
SELECT COUNT(*)  FROM current  WHERE party = 'Republican';
SELECT COUNT(*)  FROM social_media  WHERE instagram IS NOT NULL AND instagram <> '';
SELECT COUNT(*)  FROM legislator.historical  WHERE gender_bio = 'F';
SELECT COUNT(*)  FROM legislator.current  WHERE gender_bio = 'M' AND religion_bio = 'Roman Catholic';
SELECT `party` FROM legislator.current-terms WHERE `last` = 'Sherrod'  AND `first_name` = 'Brown' AND `start` = 2005;
SELECT official_full_name  FROM legislator.current-terms  WHERE type = 'sen' AND state_rank = 'senior' AND start LIKE '2013%';
SELECT      t1.youtube_username  FROM      (SELECT           official_full_name,           youtube       FROM           current       WHERE           official_full_name = 'Chris Van Hollen') AS t1  WHERE      t1.youtube IS NOT NULL;
SELECT COUNT(*)  FROM social_media  JOIN (     SELECT official_full_name FROM current WHERE first_name = 'Mark' AND last_name = 'Warner' ) AS mark_warner ON social_media.bioguide = current.bioguide_id  WHERE (facebook IS NOT NULL OR instagram IS NOT NULL OR twitter IS NOT NULL OR youtube IS NOT NULL)
SELECT last_name  FROM current  WHERE state = 'CA';
SELECT      official_full_name  FROM      legislator.current  WHERE      gender_bio = 'F'      AND type = 'sen';
SELECT `govtrack_id`  FROM legislator.current  WHERE `official_full_name` = 'Chris Van Hollen';
SELECT `twitter`  FROM `current` WHERE `official_full_name` = 'Roger F. Wicker';
SELECT      official_full_name  FROM      historical  WHERE      party = 'Pro-Administration'      AND start <= 1791      AND end >= 1791;
SELECT      official_full_name  FROM      current  WHERE      gender_bio = 'F' AND party = 'Republican' AND END > Date();
SELECT `district`  FROM `current` WHERE `official_full_name` = 'Chris Van Hollen';
SELECT COUNT(*)  FROM legislator.current  JOIN legislator.historical ON legislator.current.bioguide_id = legislator.historical.bioguide_id  WHERE legislator.current.first_name = 'Richard'  AND legislator.current.last_name = 'Durbin'  AND legislator.historical.district = 20;
SELECT COUNT(DISTINCT c.bioguide_id) / 22.0 AS average_male_democrats FROM current c JOIN current_terms ct ON c.bioguide_id = ct.bioguide WHERE c.gender_bio = 'M' AND ct.party = 'Democrat' AND ct.start >= 2000 AND ct.end <= 2021;
SELECT      CASE          WHEN (calculation_with_current_legislators > calculation_with_historical_legislators) THEN 'Current female legislators'         ELSE 'Past female legislators'     END AS highest_percentage,     MAX(calculation_with_current_legislators) AS max_value FROM (     SELECT          MULTIPLY(DIVIDE(COUNT(CASE WHEN current.gender_bio = 'F' THEN current.bioguide_id END)),                   COUNT(CASE WHEN historical.gender_bio = 'F' THEN historical.bioguide_id END)) AS calculation,         (COUNT(CASE WHEN current.gender_bio = 'F' THEN current.bioguide_id END) +           COUNT(CASE WHEN historical.gender_bio = 'F' THEN historical.bioguide_id END)) AS total     FROM current, historical ) AS female_legislators_calculations
SELECT youtube_id  FROM social-media  WHERE bioguide = 'RepWassermanSchultz';
SELECT      s.facebook,      s.twitter,      s.youtube FROM      social_media s JOIN      current c ON s.bioguide = c.bioguide_id WHERE      c.official_full_name = 'Adam Kinzinger'
SELECT `party` FROM legislator.current WHERE `first_name` = 'Christopher' AND `middle_name` = 'Henderson' AND `last_name` = 'Clark';
SELECT      official_full_name  FROM      legislator.social-media  WHERE      youtube_id IS NOT NULL AND      (instagram_id IS NULL OR instagram_id = '') LIMIT 10;
SELECT official_full_name  FROM legislator.current  WHERE state = 'VA';
SELECT first_name, last_name  FROM historical  WHERE party = 'National Greenbacker';
SELECT `official_full_name` FROM `social-media` JOIN `current` ON `current.bioguide_id` = `social-media.bioguide` WHERE `social-media.youtube` = 'RoskamIL06';
SELECT      official_full_name  FROM      social-media  WHERE      youtube IS NULL AND youtube = ''      AND instagram IS NULL AND instagram = ''      AND twitter IS NULL AND twitter = ''      AND facebook IS NOT NULL AND facebook <> ''; LIMIT 10;
SELECT      official_full_name  FROM      legislator.current WHERE      state_rank = 'junior' AND      party = 'Republican';
SELECT      contact_form FROM      current WHERE      official_full_name = 'Claire McCaskill';
SELECT wikipedia_id  FROM historical  WHERE party = 'Readjuster Democrat';
SELECT      official_full_name  FROM      legislator.current  WHERE      party = 'Republican' AND      nickname_name IS NOT NULL;
SELECT      state,      party  FROM      legislator.current  WHERE      first_name = 'Veronica' AND      middle_name = 'Grace' AND      last_name = 'Boland';
SELECT COUNT(*)  FROM historical  WHERE birthday_bio = 1973;
SELECT      (COUNT(CASE WHEN gender_bio = 'M' THEN bioguide_id END) / COUNT(CASE WHEN gender_bio = 'F' THEN bioguide_id END)) AS male_to_female_ratio FROM historical;
SELECT COUNT(*)  FROM current-terms  WHERE end = '2009' AND party = 'Republican';
SELECT official_full_name, gender_bio  FROM legislator.current  WHERE last_name = 'Collins';
SELECT      (COUNT(CASE WHEN `class` = 1 THEN `bioguide` END) * 1.0 / COUNT(`bioguide`)) * 100 AS percent_senators_from_class_1 FROM      legislator.current-terms WHERE      `type` = 'sen';
SELECT `official_full_name` FROM `current` WHERE `party` = 'Independent'
SELECT SUM(T2.END - T2.start)  FROM social-media AS T1  JOIN historical-terms AS T2  ON T1.bioguide = T2.bioguide  WHERE T1.thomas = 'Jr. John Conyers';
SELECT      MIN(terms.start) - legislator.birthday_bio AS age_when_first_started FROM      legislator  JOIN      historical_terms AS terms ON legislator.bioguide_id = terms.bioguide  WHERE      legislator.official_full_name = 'Jr. F. James Sensenbrenner';
SELECT      official_full_name,      religion_bio,      party FROM      legislator.current JOIN      legislator.current_terms  ON      legislator.current.bioguide_id = legislator.current_terms.bioguide  WHERE      legislator.current_terms.state = "ME";
SELECT      official_full_name,      nickname_name  FROM      social-media  JOIN      current  ON      social-media.bioguide = current.bioguide_id  WHERE      social-media.instagram IS NOT NULL  AND      current.thomas_id < 1000;
SELECT `end`  FROM `historical-terms`  WHERE `name` = 'Matt Salmon'  AND `official_full_name` IS NULL;
SELECT `party`, `state`  FROM legislator.current  WHERE `house_history_id` IS NOT NULL AND `birthday_bio` = 1738;
SELECT      c.ballotpedia_id,      c.full_name  FROM      current c  JOIN      current-terms ct ON c.bioguide_id = ct.bioguide  WHERE      ct.party = 'Liberal Republican';
SELECT COUNT(*)  FROM legislator.current-terms  WHERE start = '1793-12-02' AND gender_bio = 'M';
SELECT      COUNT(*) AS legislators_1875,     COUNT(*) AS legislators_2005 FROM      current-terms WHERE      start LIKE '1875%' UNION ALL SELECT      COUNT(*) AS legislators_1875,     COUNT(*) AS legislators_2005 FROM      historical-terms WHERE      start LIKE '2005%' ;
SELECT      official_full_name,     twitter_id,     youtube_id FROM      legislator.current WHERE      first_name = 'Richard';
SELECT      t2.start,      t2.end,      t2.party  FROM      historical AS t1  JOIN      historical_terms AS t2 ON t1.bioguide_id = t2.bioguide  WHERE      t1.first_name = 'Pearl' AND      t1.middle_name = 'Peden' AND      t1.last_name = 'Oldfield';
SELECT birthday_bio  FROM legislator.current  WHERE first_name = 'Amy' AND last_name = 'Klobuchar';
SELECT COUNT(*)  FROM legislator.current  WHERE fec_id IS NULL OR fec_id = ''
SELECT COUNT(*)  FROM legislator.current  WHERE gender_bio = 'F';
SELECT official_full_name FROM current WHERE opensecrets_id IS NOT NULL AND opensecrets_id <> '';
SELECT middle_name  FROM legislator.current  WHERE birthday_bio = '1956-08-24';
SELECT COUNT(*)  FROM current  WHERE `title` = 'Majority Leader';
SELECT title FROM current  WHERE birthday_bio = '1942-02-20';
SELECT gender_bio  FROM legislator.current  WHERE address = '317 Russell Senate Office Building Washington DC 20510';
SELECT first_name FROM legislator.current JOIN legislator.current_terms ON legislator.current.bioguide_id = legislator.current_terms.bioguide WHERE legislator.current_terms.state_rank = 'senior' AND legislator.current_terms.type = 'senator';
SELECT COUNT(*)  FROM legislator.current  WHERE gender_bio = 'M' AND (class IS NULL OR class = '');
SELECT      (COUNT(CASE WHEN T2.class IS NOT NULL AND T1.birthday_bio = 1964 THEN T1.bioguide_id ELSE NULL END) * 1.0 / COUNT(T1.bioguide_id)) * 100 AS percentage FROM      legislator.current AS T1 JOIN      legislator.current_terms AS T2 ON T1.bioguide_id = T2.bioguide
SELECT      (COUNT(CASE WHEN class IS NULL AND birthday_bio <= 1975 THEN bioguide_id ELSE NULL END) * 1.0 / COUNT(bioguide_id)) * 100 AS percentage FROM legislator.current;
SELECT twitter FROM current WHERE birthday_bio = '1946-05-27';
SELECT opensecrets_id FROM social-media WHERE youtube = 'Bluetkemeyer';
SELECT      s.facebook FROM      social-media s JOIN      current c ON s.bioguide = c.bioguide_id WHERE      c.first_name = 'Ralph' AND c.last_name = 'Abraham';
SELECT first_name  FROM legislator.current  JOIN legislator.current_terms ON legislator.current.bioguide_id = legislator.current_terms.bioguide  WHERE address = '1005 Longworth HOB; Washington DC 20515-1408';
SELECT instagram FROM social-media  JOIN current ON social-media.bioguide = current.bioguide_id  WHERE current.birthday_bio = '1952-08-24';
SELECT COUNT(*)  FROM legislator.current  WHERE gender_bio = 'F' AND (class IS NULL OR class = '');
SELECT `religion_bio`  FROM legislator.social-media  JOIN legislator.current ON legislator.social-media.bioguide = legislator.current.bioguide_id  WHERE legislator.social-media.youtube = 'MaxineWaters';
SELECT COUNT(*)  FROM current  WHERE title = 'Minority Leader' ANDfec_id IS NULL OR fec_id = '';
SELECT COUNT(*)  FROM legislator.current  WHERE gender_bio = 'M';
SELECT facebook_id FROM social-media WHERE name = 'RepWilson';
SELECT COUNT(*)  FROM legislator.current  WHERE first_name = 'John';
SELECT DISTINCT district  FROM legislator.current-terms  WHERE party = 'Anti-Administration'
SELECT official_full_name  FROM legislator.current  WHERE birthday_bio LIKE '1960%';
SELECT google_entity_id_id  FROM legislator.current  WHERE official_full_name = 'Benjamin Hawkins';
SELECT      h.bioguide_id, h.first_name || ' ' || h.last_name AS senator FROM      historical h JOIN      historical_terms ht ON h.bioguide_id = ht.bioguide WHERE      ht.party = 'Pro-Administration' AND     ht.type = 'sen' AND     ht.start = '1789-03-04' AND     ht.end = '1791-12-31';
SELECT first_name, last_name  FROM current  JOIN current_terms ON current.bioguide_id = current_terms.bioguide  WHERE current_terms.district = '9' AND current_terms.type = 'rep';
SELECT `official_full_name`  FROM legislator.current  WHERE `party_bio` = 'Independent';
SELECT opensecrets_id, thomas_id  FROM legislator.current  JOIN legislator.current_terms  ON legislator.current.bioguide_id = legislator.current_terms.bioguide  WHERE legislator.current.party = 'democrat'  AND legislator.current_terms.type = 'sen'  AND legislator.current_terms.state = 'NJ';
SELECT google_entity_id_id  FROM legislator.current  WHERE type = 'sen' AND state = 'NY';
SELECT `religion`  FROM legislator.current  JOIN legislator.current_terms ON current.bioguide = current_terms.bioguide  WHERE current_terms.rss_url = 'http://www.corker.senate.gov/public/index.cfm/rss/feed';
SELECT `party` FROM legislator.current WHERE `official_full_name` = 'Susan M. Collins';
SELECT `district`  FROM current  WHERE `first_name` = 'Jonathan' AND `last_name` = 'Grout' AND type = 'rep'
SELECT `party`, `state`  FROM legislator.current  JOIN legislator.historical_terms ON legislator.current.bioguide = legislator.historical_terms.bioguide  WHERE `opensecrets_id` = 'N00003689' AND `thomas_id` = 186;
SELECT      official_full_name,     birthday_bio FROM      legislators.current WHERE      contact_form = 'http://www.brown.senate.gov/contact/';
SELECT state, type  FROM legislator.current-terms  WHERE google_entity_id_id = 'kg:/m/02pyzk';
SELECT type, end  FROM current-terms  WHERE name = 'John Vining';
SELECT      (SUM(CASE              WHEN type = 'sen' AND gender_bio = 'F' AND strftime('%Y', birthday_bio) BETWEEN '1930' AND '1970' THEN 1              ELSE 0          END) -     SUM(CASE              WHEN type = 'rep' AND gender_bio = 'F' AND strftime('%Y', birthday_bio) BETWEEN '1930' AND '1970' THEN 1              ELSE 0          END)      ) as difference FROM legislator.current
SELECT      (SUM(CASE WHEN party = 'Independent' AND gender_bio = 'M' THEN 1 ELSE 0 END) * 100.0 / COUNT(CASE WHEN gender_bio = 'M' AND strftime('%Y', birthday_bio) BETWEEN '1955' AND '1965' THEN 1 ELSE NULL END)) as percentage FROM legislator.current WHERE gender_bio = 'M' AND strftime('%Y', birthday_bio) BETWEEN '1955' AND '1965';
SELECT first_name, last_name  FROM legislator.current  WHERE bioguide_id = 'W000059';
SELECT      EXISTS (SELECT 1 FROM legislator.current WHERE first_name = 'Thomas' AND last_name = 'Carnes' AND ballotpedia_id IS NOT NULL)
SELECT COUNT(*)  FROM legislator.current  WHERE birthday_bio LIKE '1736%';
SELECT * FROM legislator.current  WHERE gender_bio = 'F';
SELECT COUNT(*)  FROM legislator.current-terms  WHERE state = 'ID';
SELECT COUNT(*)  FROM current  WHERE NOT (EXISTS (SELECT * FROM historical_terms WHERE current.bioguide = historical_terms.bioguide AND historical_terms.title = 'senator')) AND NOT (historical_terms.title IS NULL);
SELECT      (SUM(CASE WHEN gender_bio = 'M' THEN 1 ELSE 0 END) / CAST(SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) AS REAL)) AS male_to_female_ratio FROM legislator.current;
SELECT      (COUNT(CASE WHEN wikipedia_id IS NOT NULL THEN 1 END) * 100.0 / COUNT(*) AS famous_legislators_percentage FROM legislator.current;
SELECT DISTINCT c.bioguide_id  FROM current AS c  WHERE c.instagram IS NULL;
SELECT      h.name,     h.district,     h.state FROM      historical AS h JOIN      historical_terms AS ht ON h.bioguide = ht.bioguide WHERE      ht.type = 'rep' AND      ht.start LIKE '1789%'
SELECT `district` FROM `historical-terms` WHERE `name` = 'Benjamin Contee'
SELECT address  FROM legislator.current-terms  WHERE name = 'Amy Klobuchar' AND start = '2001-04-01';
SELECT      c.name FROM      current_terms c JOIN      current_legislator l ON c.bioguide = l.bioguide_id WHERE      c.state_rank = 'junior' AND c.start LIKE '1997%';
SELECT COUNT(*)  FROM legislator.current-terms  WHERE gender_bio = 'F'  AND type = 'rep'  AND state = 'CA'  AND DATE(start) BETWEEN '2015-01-01' AND '2015-12-31';
SELECT twitter_id  FROM social-media  WHERE name = 'Emanuel Cleaver';
SELECT DISTINCT facebook_id  FROM current  JOIN current_terms ON current.bioguide_id = current_terms.bioguide  WHERE current.gender_bio = 'F' OR current.gender_bio = 'M'  AND current_terms.party = 'Democrat';
SELECT      h.bioguide_id,      h.first_name,      h.last_name  FROM      historical h  WHERE      h.gender_bio = 'F' AND h.end = '1791-03-03';
SELECT      c.bioguide_id, c.first_name, c.last_name FROM      current AS c JOIN      current_terms AS ct ON c.bioguide_id = ct.bioguide WHERE      c.religion_bio = 'Jewish' AND      ct.state = 'FL';
SELECT      (COUNT(CASE WHEN current.wikipedia_id IS NOT NULL THEN 1 END) * 1.0 / COUNT(CASE WHEN historical.wikipedia_id IS NOT NULL THEN 1 END)) AS ratio_between_famous_legislators FROM      current JOIN      historical ON current.bioguide_id = historical.bioguide_id;
SELECT      (SUM(CASE WHEN strftime('%Y', t2.start) BETWEEN '2000' AND '2017' THEN 1 ELSE 0 END) * 100.0 / COUNT(t1.bioguide_id)) AS percentage FROM current AS t1 JOIN historical_terms AS t2 ON t1.bioguide = t2.bioguide
SELECT COUNT(*)  FROM legislator.current  WHERE religion_bio = 'Catholic' AND ballotpedia_id IS NULL;
SELECT COUNT(*)  FROM legislator.current-terms  WHERE type = 'sen' AND class = 1 AND party = 'Republican';
SELECT official_full_name  FROM legislator.current  WHERE gender_bio = 'F'  AND google_entity_id_id IS NULL  AND fec_id IS NULL;
SELECT COUNT(*)  FROM legislator.current-terms  WHERE state = 'CA' AND type = 'rep' AND end LIKE '1995%';
SELECT      first_name,      last_name  FROM      legislator.current  WHERE      birthday_bio = (SELECT MIN(birthday_bio) FROM legislator.current);
SELECT DISTINCT c.bioguide_id  FROM current AS c  JOIN current_terms AS ct ON c.bioguide_id = ct.bioguide  WHERE ct.party = 'Democrat'  AND ct.district = '13'  AND ct.end = '2019-01-03'  AND ct.type = 'rep';
SELECT twitter FROM current WHERE official_full_name = 'Jason Lewis';
SELECT      official_full_name  FROM      legislator.current-terms  WHERE      party = 'Independent'      AND type = 'sen'      AND strftime('%Y', start) >= '2011'      AND caucus = 'Democrat';
SELECT COUNT(*)  FROM legislator.current  WHERE religion_bio = 'Jewish' AND facebook IS NULL;
SELECT      party  FROM      legislator.current  JOIN      legislator.current_terms ON legislator.current.bioguide_id = legislator.current_terms.bioguide  JOIN      legislator.historical ON legislator.current.bioguide_id = legislator.historical.bioguide_id  WHERE      legislator.current.religion_bio = 'Baptist'  GROUP BY      party  ORDER BY      COUNT(*) DESC  LIMIT 1;
SELECT official_full_name  FROM social-media  WHERE facebook IS NOT NULL  AND instagram IS NOT NULL  AND twitter IS NOT NULL  AND youtube IS NOT NULL;
SELECT COUNT(*)  FROM legislator.current  JOIN legislator.historical ON legislator.current.bioguide_id = legislator.historical.bioguide_id  WHERE legislator.current.first_name = 'John' AND legislator.current.last_name = 'Conyers' AND legislator.historical.middle_name = 'Jr.'
SELECT wikipedia_id  FROM legislator.current  JOIN legislator.current_terms ON legislator.current.bioguide_id = legislator.current_terms.bioguide  WHERE type = 'sen' AND party = 'Anti-Administration';
SELECT      official_full_name  FROM      legislator.current-terms  WHERE      district = 13  AND      (strftime('%Y', `end`) - strftime('%Y', `start`)) = 26;
SELECT COUNT(*)  FROM legislator.current-terms  WHERE party = 'Federalist' AND type = 'rep' AND first_name = 'Benjamin';
SELECT COUNT(*)  FROM legislator.current  JOIN legislator.current_terms ON legislator.current.bioguide_id = legislator.current_terms.bioguide  WHERE legislator.current.gender_bio = 'F'  AND legislator.current_terms.state = 'CA'  AND (strftime('%Y', legislator.current_terms.end) - strftime('%Y', legislator.current_terms.start)) > 10  AND legislator.current_terms.type = 'rep';
SELECT      t1.party  FROM      (SELECT Min(birthday_bio) AS oldest FROM legislator.current) AS t1 INNER JOIN legislator.current AS t2 ON t2.birthday_bio = t1.oldest AND t2.type = 'current';
SELECT      c.first_name || ' ' || c.last_name AS Representative_Name FROM      current AS c JOIN      current_terms AS ct ON c.bioguide_id = ct.bioguide WHERE      c.religion_bio = 'Lutheran' AND     ct.party = 'Democrat' AND     ct.state = 'OH' AND     (strftime('%Y', ct.end) - strftime('%Y', ct.start)) = 14 AND     ct.type = 'rep' AND     EXISTS (         SELECT 1 FROM social_media AS sm WHERE sm.bioguide = c.bioguide AND sm.type = 'twitter'     );
SELECT COUNT(*)  FROM current  WHERE strftime('%Y', birthday_bio) > '1960' AND google_entity_id_id IS NULL;
SELECT official_full_name  FROM current  WHERE house_history_id IS NOT NULL;
SELECT COUNT(*)  FROM current  WHERE icpsr_id IS NOT NULL AND maplight_id IS NOT NULL;
SELECT COUNT(*)  FROM current  WHERE gender_bio = 'F' AND lis_id IS NOT NULL;
SELECT `religion_bio`  FROM `current`  WHERE `last_name` = 'Sherrod' AND `first_name` = 'Brown';
SELECT MAX(count(religion_bio)) as max_religion_count FROM (   SELECT religion_bio, COUNT(*) as count   FROM legislator.current   GROUP BY religion_bio ) as subquery;
SELECT `instagram`  FROM `social-media`  WHERE `official_full_name` = 'Bob Corker';
SELECT COUNT(*)  FROM current  WHERE thomas_id IS NOT NULL AND instagram IS NOT NULL;
SELECT      c.fb FROM      current c JOIN      wikipedia_id w ON c.bioguide_id = w.bioguide_id WHERE      w.wikipedia_id IS NOT NULL;
SELECT COUNT(*)  FROM current  WHERE birthday_bio = (SELECT MIN(birthday_bio) FROM current);
SELECT `office` FROM current-terms WHERE `name` = 'Sherrod Brown' AND `start` = '2013-01-03' AND `type` = 'DC Office' AND `phone` IS NOT NULL;
SELECT COUNT(*)  FROM current  JOIN current_terms ON current.bioguide = current_terms.bioguide  WHERE current.first_name = 'Sherrod' AND current.last_name = 'Brown' AND current.gender_bio = 'M' AND current_terms.party = 'Democrat';
SELECT      official_full_name  FROM      current  JOIN      current_terms  ON      current.bioguide_id = current_terms.bioguide  WHERE      start = '2013-01-03';
SELECT COUNT(*)  FROM current  JOIN current_terms ON current.bioguide_id = current_terms.bioguide  WHERE current.gender_bio = 'F' AND current_terms.start = '2013-01-03';
SELECT      official_full_name  FROM      current  WHERE      bioguide IN (         SELECT              bioguide          FROM              current-terms          GROUP BY              bioguide          ORDER BY              COUNT(*) DESC          LIMIT 1     );
SELECT COUNT(*)  FROM current  JOIN current_terms ON current.bioguide_id = current_terms.bioguide  WHERE current.first_name = 'Sherrod' AND current.last_name = 'Brown' AND current_terms.district = 13;
SELECT      official_full_name  FROM      legislator.current  WHERE      facebook = 'senjoniernst';
SELECT      CASE          WHEN SUM(CASE WHEN T1.official_full_name = 'Maria Cantwell' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.official_full_name = 'Sherrod Brown' THEN 1 ELSE 0 END) THEN 'Maria Cantwell'         ELSE 'Sherrod Brown'     END AS longest_serviced_legislator FROM current AS T1 JOIN current_terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name IN ('Maria Cantwell', 'Sherrod Brown') GROUP BY T1.official_full_name ORDER BY 1 LIMIT 1;
SELECT      (SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_female FROM      current JOIN      current_terms ON current.bioguide_id = current_terms.bioguide WHERE      COUNT(current_terms.bioguide) > 4;
SELECT AVG(T2.bioguide)  FROM legislator.current AS T1  JOIN legislator.current_terms AS T2  ON T1.bioguide_id = T2.bioguide  WHERE T1.wikipedia_id IS NOT NULL;
SELECT COUNT(*)  FROM legislator.current  WHERE gender_bio = 'F';
SELECT COUNT(*)  FROM legislator.current  JOIN legislator.historical_terms ON legislator.current.bioguide_id = legislator.historical_terms.bioguide  WHERE legislator.historical_terms.type = 'rep' AND legislator.historical_terms.state = 'NJ'
SELECT address  FROM current  JOIN current_terms ON current.bioguide_id = current_terms.bioguide  WHERE contact_form = 'http://www.carper.senate.gov/contact/';
SELECT instagram FROM social-media WHERE official_full_name = 'Benjamin Hawkins';
SELECT bioguide  FROM legislator.current  JOIN legislator.historical USING (bioguide_id)  JOIN legislator.current_terms USING (bioguide)  JOIN legislator.historical_terms USING (bioguide)  WHERE religion_bio = 'Catholic' AND state = 'NE';
SELECT DISTINCT maplight_id FROM legislator.current WHERE state = 'ME' AND type = 'rep';
SELECT type, start  FROM legislator.current-terms  WHERE birthday_bio = '1727-11-26';
SELECT `contact_form`  FROM `current`  WHERE `official_full_name` = 'Rick Crawford';
SELECT COUNT(*)  FROM legislator.current  JOIN legislator.current_terms ON legislator.current.bioguide_id = legislator.current_terms.bioguide  WHERE legislator.current.gender_bio = 'F'  AND legislator.current_terms.type = 'rep'  AND legislator.current_terms.state = 'MI';
SELECT      (SUM(CASE WHEN type = 'sen' AND state = 'ME' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) OVER () AS percentage_of_senators_in_Maine FROM      legislator.current WHERE      gender_bio = 'F';
SELECT DISTINCT g.games_name FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person p ON p.id = gc.person_id WHERE p.full_name = 'John Aalberg';
SELECT games.games_name  FROM games  JOIN games_competitor ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  WHERE person.full_name = 'John Aalberg' AND games_competitor.age = 31;
SELECT T3.age  FROM person AS T1  JOIN games_competitor AS T3 ON T1.id = T3.person_id  JOIN games AS T2 ON T2.id = T3.games_id  WHERE T1.full_name = 'John Aalberg' AND T2.games_name = '1994 Winter';
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  WHERE noc_region.region_name = 'Finland';
SELECT p.full_name  FROM person p  JOIN person_region pr ON p.id = pr.person_id  JOIN noc_region nr ON pr.region_id = nr.id  WHERE nr.region_name = 'Finland';
SELECT T4.region_name FROM person AS T1 JOIN games_competitor AS T2 ON T1.id = T2.person_id JOIN games_city AS T3 ON T2.games_id = T3.games_id JOIN city AS T4 ON T4.id = T3.city_id WHERE T1.full_name = 'John Aalberg'
SELECT      pr.region_id  FROM      person p  JOIN      person_region pr ON p.id = pr.person_id  JOIN      noc_region nr ON pr.region_id = nr.id  WHERE      p.gender = 'M' AND      p.height = (SELECT MAX(height) FROM person WHERE gender = 'M')
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  WHERE noc_region.region_name = 'Finland' AND person.gender = 'F';
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_name = '1992 Summer';
SELECT games.games_name  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE city.city_name = 'London';
SELECT games_year  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE city_name = 'London'  ORDER BY games_year ASC  LIMIT 1;
SELECT COUNT(*)  FROM games_city  JOIN city ON games_city.city_id = city.id  WHERE city.city_name = 'London';
SELECT AVG(person.height)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  WHERE noc_region.region_name = 'Finland' AND person.gender = 'M';
SELECT      (COUNT(CASE WHEN noc_region.region_name = 'Finland' THEN person_region.person_id END)      / COUNT(person_region.person_id)) * 100 AS percentage  FROM      games  JOIN      games_city ON games.id = games_city.games_id  JOIN      noc_region ON games_city.city_id = noc_region.id  JOIN      games_competitor ON games.id = games_competitor.games_id  JOIN      person_region ON games_competitor.person_id = person_region.person_id  JOIN      person ON person.id = games_competitor.person_id  WHERE      games.name = '1994 Winter';
SELECT sport_name  FROM sport  JOIN event ON sport.id = event.sport_id  WHERE event.event_name = 'Shooting Women''s Trap';
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_name = '1936 Winter';
SELECT COUNT(DISTINCT gc.games_id) FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id WHERE c.city_name = 'London';
SELECT COUNT(*)  FROM event  JOIN sport ON event.sport_id = sport.id  WHERE sport.sport_name = 'Swimming';
SELECT region_name  FROM person_region  JOIN noc_region ON person_region.region_id = noc_region.id  WHERE full_name = 'Peter Kohnke';
SELECT games.games_id  FROM games  JOIN games_competitor ON games.id = games_competitor.games_id  JOIN person ON games_competitor.person_id = person.id  WHERE person.full_name = 'Jessica Carolina Aguilera Aguilera';
SELECT sport_name FROM sport WHERE id IN (     SELECT sport_id     FROM event     GROUP BY sport_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT p.full_name  FROM person p  JOIN person_region pr ON p.id = pr.person_id  JOIN noc_region nr ON pr.region_id = nr.id  WHERE nr.region_name = 'Sweden'  ORDER BY p.height DESC  LIMIT 1;
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  WHERE noc_region.region_name = 'Guatemala';
SELECT p.full_name  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  GROUP BY p.id, p.full_name  ORDER BY COUNT(gc.id) DESC  LIMIT 1;
SELECT `full_name`  FROM `person`  WHERE `id` = 90991;
SELECT COUNT(T2.competitor_id) FROM competitor_event AS T1 JOIN person AS T2 ON T2.id = T1.competitor_id WHERE T2.full_name = 'Martina Kohlov'
SELECT      (weight / (height * height)) AS BMI FROM      person WHERE      id = 147420;
SELECT      (COUNT(CASE WHEN p.gender = 'M' THEN 1 END) /       CAST(COUNT(p.id) AS REAL)) * 100 AS percentage_male_athletes FROM      person p JOIN      person_region pr ON p.id = pr.person_id JOIN      noc_region nr ON pr.region_id = nr.id WHERE      nr.region_name = 'Estonia';
SELECT p.full_name  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  WHERE gc.age = (SELECT MIN(age) FROM games_competitor)
SELECT COUNT(*)  FROM games_competitor  JOIN person ON games_competitor.person_id = person.id  JOIN sport ON event.sport_id = sport.id  JOIN event ON competitor_event.event_id = event.id  WHERE person.age = 24 AND sport.sport_name = 'Basketball Men\'s Basketball';
SELECT e.event_name  FROM event e  JOIN sport s ON e.sport_id = s.id  WHERE s.sport_name = 'Art Competitions';
SELECT COUNT(*)  FROM medal  JOIN competitor_event ON medal.id = competitor_event.medal_id  JOIN person ON person.id = competitor_event.competitor_id  WHERE medal.medal_name = 'Gold' AND person.full_name = 'Henk Jan Zwolle';
SELECT e.event_name  FROM event e  JOIN competitor_event ce ON e.id = ce.event_id  JOIN medal m ON m.id = ce.medal_id  WHERE m.medal_name = 'Gold'  GROUP BY e.event_name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  WHERE noc_region.region_name = 'Australia';
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  GROUP BY c.id, c.city_name  HAVING COUNT(gc.games_id) >= 3;
SELECT COUNT(*)  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE season = 'Summer' AND city_name = 'Stockholm';
SELECT region_name  FROM noc_region  JOIN person_region ON noc_region.id = person_region.region_id  GROUP BY region_name  ORDER BY COUNT(person_id) DESC  LIMIT 1;
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_year = (SELECT MIN(games_year) FROM games);
SELECT games.games_name  FROM games  JOIN games_competitor ON games.id = games_competitor.games_id  WHERE games_competitor.age = (SELECT MAX(age) FROM games_competitor);
SELECT COUNT(*)  FROM games_competitor  JOIN games ON games.id = games_competitor.games_id  WHERE games.games_name = '1928 Summer';
SELECT      COUNT(competitor_event.event_id) AS total_events,     (COUNT(competitor_event.event_id) FILTER (WHERE medal.name = 'Gold')::NUMERIC / COUNT(competitor_event.event_id)) * 100 AS gold_medal_percentage FROM      person JOIN      games_competitor ON person.id = games_competitor.person_id JOIN      competitor_event ON games_competitor.id = competitor_event.competitor_id JOIN      medal ON competitor_event.medal_id = medal.id WHERE      person.full_name = 'Michael Fred Phelps, II';
SELECT      CASE          WHEN (COUNT(ce.competitor_id) IN              (SELECT COUNT(ce.competitor_id) FROM competitor_event ce JOIN games g ON ce.game_id = g.id WHERE g.season = 'Summer' AND g.games_year = 1988))          THEN '1988 Summer'         ELSE '1988 Winter'     END AS game_with_most_competitors,     ABS((SELECT COUNT(ce.competitor_id) FROM competitor_event ce JOIN games g ON ce.game_id = g.id WHERE g.season = 'Summer' AND g.games_year = 1988) -          (SELECT COUNT(ce.competitor_id) FROM competitor_event ce JOIN games g ON ce.game_id = g.id WHERE g.season = 'Winter' AND g.games_year = 1988)) AS difference_in_competitors FROM      competitor_event ce JOIN      games g ON ce.game_id = g.id WHERE      g.games_year = 1988 GROUP BY      game_with_most_competitors;
SELECT `age` FROM games_competitor WHERE (SELECT COUNT(person_id) FROM games_competitor WHERE age = `age`) = (     SELECT MAX(age_count)     FROM (         SELECT `age`, COUNT(person_id) as age_count         FROM games_competitor         GROUP BY `age`     ) subquery );
SELECT DISTINCT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id WHERE c.city_name LIKE 'M%'
SELECT DISTINCT c.city_name FROM city c JOIN games g ON c.id = g.games_city_id JOIN games_city gc ON g.id = gc.games_id WHERE g.season = 'Winter' AND g.games_name = '1976' UNION SELECT DISTINCT c.city_name FROM city c JOIN games g ON c.id = g.games_city_id JOIN games_city gc ON g.id = gc.games_id WHERE g.season = 'Summer' AND g.games_name = '1976';
SELECT medal.medal_name  FROM medal  JOIN competitor_event ON medal.id = competitor_event.medal_id  JOIN person ON competitor_event.competitor_id = person.id  WHERE person.full_name = 'Coleen Dufresne';
SELECT p.full_name  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  JOIN competitor_event ce ON gc.id = ce.competitor_id  GROUP BY p.full_name  ORDER BY COUNT(ce.medal_id) DESC  LIMIT 1;
SELECT T3.region_name  FROM person AS T1  JOIN games_competitor AS T2 ON T1.id = T2.person_id  JOIN person_region AS T3 ON T3.person_id = T1.id  WHERE T1.full_name = 'Estelle Nze Minko';
SELECT DISTINCT s.sport_name  FROM sport s  JOIN event e ON s.id = e.sport_id  JOIN competitor_event ce ON e.id = ce.event_id  JOIN person p ON ce.competitor_id = p.id  JOIN person_region pr ON p.id = pr.person_id  JOIN noc_region nr ON nr.id = pr.region_id  WHERE p.full_name = 'Chin Eei Hui' AND nr.region_name = 'China';
SELECT olympics.person.full_name  FROM olympics.city JOIN olympics.games_city ON city.id = games_city.city_id JOIN olympics.games ON games.id = games_city.games_id JOIN olympics.games_competitor ON games.id = games_competitor.games_id JOIN olympics.person ON person.id = games_competitor.person_id WHERE person.age = (SELECT MAX(age) FROM olympics.games_competitor)
SELECT games_year FROM games WHERE games.id IN (     SELECT games.id     FROM games      JOIN games_competitor ON games.id = games_competitor.games_id     JOIN person ON games_competitor.person_id = person.id     WHERE person.gender = 'F'     GROUP BY games.id     ORDER BY COUNT(person.gender) DESC     LIMIT 1 )
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  JOIN city ON games_city.city_id = city.id  JOIN games_competitor ON games_competitor.person_id = person.id  WHERE person.gender = 'M'  AND noc_region.region_name = 'Belgium';
SELECT COUNT(*)  FROM games_competitor  JOIN games ON games.id = games_competitor.games_id  JOIN city ON city.id = games_city.city_id  WHERE city.city_name = 'Sapporo';
SELECT games.games_year  FROM games  JOIN games_competitor ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  WHERE person.full_name = 'Morten Aleksander Djupvik';
SELECT COUNT(*)  FROM person  JOIN games_competitor ON person.id = games_competitor.person_id  JOIN competitor_event ON games_competitor.id = competitor_event.competitor_id  JOIN event ON competitor_event.event_id = event.id  WHERE event.event_name = 'Sailing Mixed 12 metres';
SELECT COUNT(DISTINCT event.id)  FROM event  JOIN sport ON event.sport_id = sport.id  WHERE sport.sport_name = 'Modern Pentathlon';
SELECT      (COUNT(CASE WHEN person.gender = 'F' THEN person.id END) /       CAST(COUNT(person.id) AS REAL)) * 100 as percentage FROM      person JOIN      games_competitor ON person.id = games_competitor.person_id JOIN      competitor_event ON games_competitor.id = competitor_event.competitor_id JOIN      event ON competitor_event.event_id = event.id WHERE      event.event_name = 'Equestrianism Mixed Three-Day Event, Individual';
SELECT AVG(T2.age)  FROM games AS T1  JOIN games_competitor AS T2 ON T1.id = T2.games_id  WHERE T1.games_name = '1992 Summer';
SELECT games_year FROM games WHERE season = 'Summer' GROUP BY games_year HAVING COUNT(games_name) = 1;
SELECT COUNT(*)  FROM games  WHERE games_year BETWEEN 1990 AND 1999;
SELECT COUNT(T2.person_id)  FROM games AS T1  JOIN games_competitor AS T2 ON T1.id = T2.games_id  WHERE T1.games_name = '2014 Winter';
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN competitor_event ON person_region.person_id = competitor_event.competitor_id   JOIN medal ON competitor_event.medal_id = medal.id  WHERE medal.id != 4 AND person_region.region_id = 151;
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  JOIN games_competitor ON person.id = games_competitor.person_id  JOIN games ON games.id = games_competitor.games_id  JOIN games_city ON games.id = games_city.games_id  JOIN noc_region AS noc_region_games ON noc_region.id = games_city.city_id  WHERE noc_region.region_name = 'China'  AND games.games_name = '2016 Summer'  AND games.season = 'Summer';
SELECT COUNT(*)  FROM competitor_event  JOIN event ON competitor_event.event_id = event.id  JOIN medal ON competitor_event.medal_id = medal.id  WHERE event.event_name = 'Ice Hockey Men''s Ice Hockey' AND medal.medal_name = 'Gold';
SELECT      p.region_id,      r.region_name,     COUNT(IF(ce.medal_id <> 4, 1, NULL)) AS total_medals FROM      person p JOIN      person_region pr ON p.id = pr.person_id JOIN      noc_region n ON pr.region_id = n.id JOIN      competitor_event ce ON p.id = ce.competitor_id GROUP BY      p.region_id,      r.region_name ORDER BY      total_medals DESC LIMIT 1;
SELECT p.full_name  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  JOIN competitor_event ce ON gc.id = ce.competitor_id  JOIN event e ON ce.event_id = e.id  JOIN sport s ON e.sport_id = s.id  WHERE s.sport_name = 'Cycling' AND ce.medal_id = (SELECT id FROM medal WHERE medal_name = 'Gold');
SELECT T3.medal_name  FROM person AS T1  JOIN games_competitor AS T2 ON T1.id = T2.person_id  JOIN competitor_event AS T4 ON T2.id = T4.competitor_id  JOIN medal AS T3 ON T4.medal_id = T3.id  WHERE T1.full_name = 'Lee Chong Wei' AND T3.medal_name != 'No Medal'
SELECT      (COUNT(CASE WHEN p.gender = 'F' AND c.age < 20 THEN p.id END)      / COUNT(p.id)) * 100 AS percentage  FROM      games g  JOIN      games_city gc ON g.id = gc.games_id  JOIN      city c ON gc.city_id = c.id  JOIN      games_competitor gc2 ON g.id = gc2.games_id  JOIN      person p ON gc2.person_id = p.id  WHERE      g.games_name = '2002 Winter';
SELECT      (COUNT(CASE WHEN gender = 'M' THEN 1 END) / COUNT(CASE WHEN gender = 'F' THEN 1 END)) AS male_to_female_ratio FROM      person p JOIN      games_competitor gc ON p.id = gc.person_id JOIN      games g ON gc.games_id = g.id WHERE      g.season = 'Summer' AND g.games_year = 2012;
SELECT      g.games_name  FROM      games g  JOIN      games_city gc ON g.id = gc.games_id  JOIN      person_region pr ON gc.city_id = pr.city_id  JOIN      games_competitor gc2 ON pr.person_id = gc2.person_id  WHERE      g.season = 'Summer'  GROUP BY      g.id  ORDER BY      COUNT(gc2.person_id) DESC, COUNT(gc2.person_id) ASC  LIMIT 1;
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  JOIN games_competitor ON person.id = games_competitor.person_id  JOIN competitor_event ON games_competitor.id = competitor_event.competitor_id  JOIN medal ON competitor_event.medal_id = medal.id  JOIN noc_region AS region_noc ON noc_region.id = region_noc.id  WHERE region_noc.region_name = 'Malaysia' AND medal.id <> 4;
SELECT COUNT(*)  FROM games  JOIN games_competitor ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  JOIN person_region ON person_region.person_id = person.id  JOIN noc_region ON noc_region.id = person_region.region_id  JOIN games_city ON games_city.games_id = games.id  JOIN sport ON sport.id = event.sport_id  JOIN event ON event.id = competitor_event.event_id  JOIN competitor_event ON competitor_event.competitor_id = games_competitor.id  WHERE      noc_region.region_name = 'Canoeing'      AND games.games_name = '2008 Summer'      AND person.gender != 'F'      AND (person.weight / POWER(person.height, 2)) < 30;
SELECT AVG(person.height)  FROM person  JOIN games_competitor ON person.id = games_competitor.person_id  JOIN sport ON event.sport_id = sport.id  JOIN event ON games_competitor.event_id = event.id  WHERE sport.sport_name = 'Basketball' AND games_competitor.gender = 'M';
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  WHERE person.gender = 'F' AND noc_region.region_name = 'Philippines';
SELECT region_name  FROM noc_region  JOIN person_region ON noc_region.id = person_region.region_id  JOIN person ON person.id = person_region.person_id  WHERE person.full_name = 'Yao Ming';
SELECT MIN(T2.age)  FROM person AS T1  JOIN games_competitor AS T2 ON T1.id = T2.person_id  WHERE T1.full_name = 'Michael Fred Phelps, II';
SELECT COUNT(*)  FROM person  WHERE id IN (     SELECT person_id      FROM person_region      WHERE region_id IN (         SELECT id          FROM noc_region          WHERE region_name = (             SELECT region_name              FROM city              JOIN games_city ON city.id = games_city.city_id              JOIN games_competitor ON games_competitor.games_id = games.id              JOIN person_region ON person_region.person_id = games_competitor.person_id              JOIN person ON person.id = person_region.person_id              WHERE person.full_name = 'Clara Hughes'         )     ) )
SELECT COUNT(*)  FROM competitor_event ce  JOIN event e ON ce.event_id = e.id  JOIN sport s ON e.sport_id = s.id  JOIN person p ON ce.competitor_id = p.id  WHERE s.sport_name = 'Swimming' AND e.event_name = 'Men''s 200 metres Freestyle' AND p.full_name = 'Ian James Thorpe';
SELECT COUNT(*)  FROM games  JOIN games_competitor ON games.id = games_competitor.games_id   JOIN competitor_event ON competitor_event.competitor_id = games_competitor.person_id   JOIN event ON event.id = competitor_event.event_id   JOIN noc_region ON noc_region.id = games_competitor.region_id   JOIN person ON person.id = games_competitor.person_id   WHERE person.full_name = 'Larysa Semenivna Latynina (Diriy-)' AND        event.event_name = 'Gymnastics Women''s Individual All-Around' AND        (event_id IN (SELECT id FROM event WHERE event_name = 'Gymnastics Women''s Individual All-Around') AND        competitor_event.medal_id = 1 OR competitor_event.medal_id IS NULL AND event_name = 'Gymnastics Women''s Individual All-Around')
SELECT T3.city_name FROM person AS T1 JOIN games_competitor AS T2 ON T1.id = T2.person_id JOIN games_city AS T4 ON T2.games_id = T4.games_id JOIN city AS T3 ON T4.city_id = T3.id WHERE T1.full_name = 'Carl Lewis Borack'
SELECT COUNT(*)  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE city.city_name = 'London';
SELECT c.city_name  FROM city c  JOIN games g ON c.id = g.games_city_id  WHERE g.games_name = '1992 Summer'
SELECT COUNT(*)  FROM games_competitor  JOIN games ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  WHERE games.games_name = '2016 Summer' AND person.age > 59;
SELECT games_name  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE city_name = 'Los Angeles'  GROUP BY games_name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON city.id = games_city.city_id  JOIN games_competitor ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  JOIN competitor_event ON competitor_event.competitor_id = games_competitor.id  JOIN event ON event.id = competitor_event.event_id  JOIN sport ON sport.id = event.sport_id  WHERE games.season = 'Summer'  AND games.games_year = (SELECT games_year FROM games WHERE games_name = '2020 Summer Olympics')  AND person.age = 10  AND event.event_name = 'Gymnastics Men''s Parallel Bars, Teams';
SELECT AVG(T2.age)  FROM games AS T1  JOIN games_competitor AS T2 ON T1.id = T2.games_id  JOIN person_region AS T3 ON T2.person_id = T3.person_id  JOIN noc_region AS T4 ON T3.region_id = T4.id  WHERE T1.games_name = '2016 Summer' AND T4.region_name = 'USA';
SELECT region_name  FROM noc_region  WHERE noc = 'COL';
SELECT sport_name  FROM sport  WHERE id = 19;
SELECT event.id  FROM event  WHERE event.event_name = 'Shooting Mixed Skeet';
SELECT id  FROM sport  WHERE sport_name = 'hockey';
SELECT `weight`  FROM `person`  WHERE `full_name` = 'Dagfinn Sverre Aarskog';
SELECT `id`  FROM `city`  WHERE `city_name` = 'Rio de Janeiro';
SELECT COUNT(*)  FROM competitor_event  JOIN event ON competitor_event.event_id = event.id  JOIN medal ON competitor_event.medal_id = medal.id  WHERE medal.medal_name = 'Gold'  AND event.event_name = 'Rowing Women''s Coxed Eights';
SELECT COUNT(event.id)  FROM event  JOIN sport ON event.sport_id = sport.id  WHERE sport.sport_name = 'Cycling';
SELECT T4.region_name FROM person AS T1 JOIN person_region AS T2 ON T1.id = T2.person_id JOIN noc_region AS T3 ON T2.region_id = T3.id JOIN city AS T5 ON T5.id = T1.person_region.city_id JOIN games_city AS T6 ON T6.city_id = T5.id JOIN games_competitor AS T7 ON T7.person_id = T1.id WHERE T1.full_name = 'Vijay Singh Chauhan';
SELECT games_year  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON city.id = games_city.city_id  WHERE city.city_name = 'Roma';
SELECT COUNT(*)  FROM games_competitor  JOIN games ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  WHERE games.games_name = '1984 Summer' AND person.age = 20;
SELECT COUNT(DISTINCT games.id)  FROM games  JOIN games_competitor ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  WHERE person.full_name = 'Prithipal Singh';
SELECT COUNT(*)  FROM games_competitor  JOIN games ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  WHERE games.games_name = '1984 Summer' AND person.age > 50;
SELECT COUNT(DISTINCT e.event_name)  FROM event e JOIN sport s ON e.sport_id = s.id WHERE s.sport_name = 'Athletics';
SELECT p.full_name  FROM person p  JOIN person_region pr ON p.id = pr.person_id  JOIN noc_region nr ON pr.region_id = nr.id  WHERE nr.region_name = 'Russia' AND p.weight = (SELECT MAX(weight) FROM person WHERE region_id IN (SELECT id FROM noc_region WHERE region_name = 'Russia'))
SELECT p.height FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Portugal' ORDER BY p.height DESC LIMIT 1;
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_name = '1968 Winter';
SELECT region_name FROM person_region JOIN noc_region ON person_region.region_id = noc_region.id GROUP BY region_name ORDER BY COUNT(person_id) DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN p.height > 175 THEN 1 END)       OVER () / COUNT(*)       OVER () * 100) as percentage FROM      person p JOIN      person_region pr ON p.id = pr.person_id JOIN      noc_region nr ON pr.region_id = nr.id WHERE      nr.region_name = 'Vanuatu';
SELECT AVG(person.weight) FROM person JOIN person_region ON person.id = person_region.person_id JOIN noc_region ON person_region.region_id = noc_region.id WHERE noc_region.region_name = 'Tonga' AND person.gender = 'M';
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE g.season = 'Summer' AND g.games_year = 1920;
SELECT COUNT(*)  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE games_year BETWEEN 1900 AND 1992  AND city_name = 'London';
SELECT COUNT(*)  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE season = 'Summer' AND city_name = 'Paris';
SELECT games.games_name  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE city.city_name = 'Los Angeles';
SELECT city_name FROM city JOIN games_city ON city.id = games_city.city_id GROUP BY city_name ORDER BY COUNT(games_id) DESC LIMIT 1;
SELECT games.games_name  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE city.city_name = 'Beijing' AND games.games_year = '2008';
SELECT      (COUNT(CASE WHEN c.age > 30 AND ce.medal_id = 1 THEN 1 END)      OVER ()      / COUNT(*) OVER ()) * 100 AS percentage_champions_over_30 FROM      games_competitor c JOIN      competitor_event ce ON c.id = ce.competitor_id WHERE      ce.medal_id = 1;
SELECT T3.age  FROM person AS T1  JOIN games_competitor AS T3 ON T1.id = T3.person_id  JOIN games AS T2 ON T2.id = T3.games_id  WHERE T1.full_name = 'A Lamusi' AND T2.games_name = '2012 Summer';
SELECT COUNT(*)  FROM games_competitor  JOIN games ON games.id = games_competitor.games_id  WHERE games.games_year = 2000 AND games.season = 'Summer' AND games_competitor.age = 31;
SELECT COUNT(*)  FROM person  JOIN games_competitor ON person.id = games_competitor.person_id  JOIN games_city ON games_city.games_id = games_competitor.games_id AND games_city.season = 'Summer' JOIN games ON games.id = games_city.games_id   WHERE person.gender = 'M' AND games.games_name = '1948 Summer';
SELECT p.full_name  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  JOIN games g ON gc.games_id = g.id  WHERE g.season = 'Summer' AND g.games_year = 1936;
SELECT p.full_name  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_name = '2014 Winter'  ORDER BY gc.age ASC  LIMIT 1;
SELECT AVG(T2.age)  FROM games AS T1  JOIN games_competitor AS T2 ON T1.id = T2.games_id  WHERE T1.games_name = '1988 Winter';
SELECT      (COUNT(CASE WHEN gender = 'F' AND height > 170 THEN 1 ELSE NULL END)      OVER ()::float / COUNT(*) OVER ()) * 100 AS percentage FROM      person p JOIN      games_competitor gc ON p.id = gc.person_id JOIN      games g ON gc.games_id = g.id WHERE      g.games_year = 1988;
SELECT s.sport_name FROM sport s JOIN event e ON s.id = e.sport_id JOIN competitor_event ce ON e.id = ce.event_id WHERE e.event_name = 'Cross Country Skiing Men''s 10/15 kilometres Pursuit';
SELECT      (COUNT(CASE WHEN g.season = 'Winter' AND gc.age > 24 THEN 1 ELSE NULL END)      / CAST(COUNT(DISTINCT gc.person_id) AS REAL)) * 100 AS percentage FROM      games g JOIN      games_city gc ON g.id = gc.games_id JOIN      games_competitor gc2 ON g.id = gc2.games_id WHERE      gc2.age > 24;
SELECT person_region.region_id FROM person JOIN person_region ON person.id = person_region.person_id WHERE person.full_name = 'Christine Jacoba Aaftink';
SELECT p.height FROM person p JOIN person_region pr ON p.id = pr.person_id WHERE pr.region_id = 7;
SELECT city_name  FROM city  JOIN games_city ON city.id = games_city.city_id  WHERE games_city.games_id = 3;
SELECT g.id FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id WHERE c.city_name = 'London';
SELECT COUNT(*)  FROM person  JOIN games_competitor ON person.id = games_competitor.person_id  JOIN games_city ON games_competitor.games_id = games_city.games_id  JOIN games ON games_city.games_id = games.id  WHERE person.age < 30 AND games.season = 'Summer';
SELECT games.games_name  FROM games  WHERE games.id = 13;
SELECT AVG(T2.age)  FROM games AS T1  JOIN games_competitor AS T2 ON T1.id = T2.games_id  WHERE T1.season = 'Winter';
SELECT      (COUNT(CASE WHEN age < 35 AND season = 'Summer' THEN 1 END)      / COUNT(DISTINCT person_id)) * 100 as percentage FROM games_competitor JOIN games ON games_competitor.games_id = games.id WHERE games.season = 'Summer';
SELECT e.event_name  FROM event e  JOIN sport s ON e.sport_id = s.id  WHERE s.sport_name = 'Basketball';
SELECT medal.medal_name  FROM competitor_event  JOIN event ON competitor_event.event_id = event.id  JOIN medal ON competitor_event.medal_id = medal.id  WHERE competitor_event.competitor_id = 9;
SELECT event_id FROM competitor_event WHERE medal_id IN (     SELECT id     FROM medal     WHERE medal_name = 'Gold' );
SELECT full_name FROM person WHERE weight = (SELECT MAX(weight) FROM person);
SELECT c.city_name  FROM city c  JOIN games g ON c.id = g.games_city_id  WHERE g.games_year = 1992;
SELECT region_name FROM (   SELECT region_id, COUNT(*) AS count_region   FROM person_region   JOIN person ON person_region.person_id = person.id   GROUP BY region_id ) AS subquery JOIN noc_region ON noc_region.id = subquery.region_id WHERE subquery.count_region = (   SELECT MAX(count_region)   FROM (     SELECT region_id, COUNT(*) AS count_region     FROM person_region     JOIN person ON person_region.person_id = person.id     GROUP BY region_id   ) AS subquery_max )
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON g.id = gc.games_id  JOIN games_competitor gc2 ON gc2.games_id = g.id  JOIN person p ON p.id = gc2.person_id  WHERE p.age = (SELECT MAX(age) FROM person)
SELECT e.event_name  FROM event e  JOIN competitor_event ce ON e.id = ce.event_id  JOIN person p ON ce.competitor_id = p.id  WHERE p.full_name = 'John Aalberg';
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  JOIN games_competitor ON person.id = games_competitor.person_id  WHERE person.gender = 'M'  AND noc_region.region_name = 'Belgium';
SELECT COUNT(T2.person_id)  FROM city AS T1  JOIN games_city AS T3 ON T1.id = T3.city_id  JOIN games AS T4 ON T3.games_id = T4.id  JOIN games_competitor AS T5 ON T4.id = T5.games_id  WHERE T1.city_name = 'Barcelona';
SELECT COUNT(DISTINCT e.event_id) FROM event e JOIN sport s ON e.sport_id = s.id WHERE s.sport_name = 'Football';
SELECT DISTINCT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id JOIN games_competitor gc2 ON g.id = gc2.games_id JOIN person p ON gc2.person_id = p.id WHERE p.full_name = 'John Aalberg';
SELECT COUNT(*)  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE city.city_name = 'Barcelona';
SELECT COUNT(*)  FROM games_competitor  JOIN games ON games_competitor.games_id = games.id  JOIN person ON games_competitor.person_id = person.id  WHERE games.name = '1992 Winter' AND games.season = 'Winter' AND games_competitor.age > 30;
SELECT games.games_name  FROM `city`  JOIN `games_city` ON `city.id` = `games_city.city_id` JOIN `games` ON `games.id` = `games_city.games_id` WHERE `city.city_name` = 'Barcelona' GROUP BY `games.games_name` ORDER BY COUNT(`games.games_name`) DESC LIMIT 1;
SELECT p.full_name  FROM person p  JOIN person_region pr ON p.id = pr.person_id  JOIN noc_region nr ON pr.region_id = nr.id  WHERE nr.region_name = 'Argentina';
SELECT AVG(T2.age)  FROM games AS T1  JOIN games_competitor AS T2 ON T1.id = T2.games_id  JOIN person AS T3 ON T3.id = T2.person_id  JOIN person_region AS T4 ON T4.person_id = T3.id  JOIN noc_region AS T5 ON T5.id = T4.region_id  WHERE T1.games_name = '2012 Summer' AND T5.region_name = 'Argentina';
SELECT      (COUNT(CASE WHEN c.medal_id = (SELECT id FROM medal WHERE medal_name = 'Bronze') THEN c.id ELSE NULL END)      / COUNT(c.id)) * 100 as percentage  FROM      competitor_event ce  JOIN      event e ON ce.event_id = e.id  JOIN      sport s ON e.sport_id = s.id  JOIN      games g ON ce.competitor_id IN (SELECT id FROM games_competitor gc WHERE gc.games_id IN (SELECT id FROM games gcg WHERE gcg.season = 'Summer')) JOIN      person p ON ce.competitor_id = p.id  JOIN      person_region pr ON p.id = pr.person_id  JOIN      noc_region nr ON pr.region_id = nr.id  WHERE      e.event_name = 'Basketball Men''s Basketball' AND p.gender = 'M'
SELECT games.games_name  FROM games  JOIN games_competitor ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  WHERE person.full_name = 'Georgios Abaris';
SELECT p.full_name  FROM person p  JOIN person_region pr ON p.id = pr.person_id  JOIN noc_region nr ON pr.region_id = nr.id  WHERE nr.region_name = 'Greece';
SELECT AVG(T2.age)  FROM games AS T1  JOIN games_competitor AS T2 ON T1.id = T2.games_id  WHERE T1.games_name = '1924 Winter';
SELECT pr.region_id  FROM person p  JOIN person_region pr ON p.id = pr.person_id  WHERE p.weight = 77;
SELECT games.games_name  FROM city  JOIN games_city ON city.id = games_city.city_id  JOIN games ON games.id = games_city.games_id  WHERE city.city_name = 'Paris';
SELECT p.full_name  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_name = '2000 Summer';
SELECT c.city_name  FROM city c  JOIN (     SELECT games_id, MAX(age) AS max_age      FROM games_competitor  ) gc ON c.id = gc.games_id ORDER BY gc.max_age DESC  LIMIT 1;
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON g.id = gc.games_id  JOIN games_competitor gc2 ON gc2.games_id = g.id  JOIN person p ON p.id = gc2.person_id  WHERE p.gender IS NOT NULL  ORDER BY gc2.age ASC  LIMIT 1;
SELECT games.id FROM games JOIN games_city ON games.id = games_city.games_id JOIN city ON games_city.city_id = city.id WHERE city.city_name = 'Tokyo';
SELECT      pr.region_id,      r.region_name  FROM      person p  JOIN      person_region pr ON p.id = pr.person_id  JOIN      noc_region r ON pr.region_id = r.id  JOIN      games_competitor gc ON p.id = gc.person_id  WHERE      gc.age IS NOT NULL  AND      p.weight = (SELECT MAX(weight) FROM person WHERE id IN (SELECT person_id FROM games_competitor))
SELECT games.year, games.season  FROM games  JOIN games_competitor ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  WHERE person.full_name = 'Sohail Abbas';
SELECT AVG(person.weight)  FROM competitor_event  JOIN games_competitor ON competitor_event.competitor_id = games_competitor.person_id  JOIN medal ON competitor_event.medal_id = medal.id  WHERE medal.medal_name = 'Silver';
SELECT c.city_name  FROM city c  JOIN games g ON c.id = g.games_city_id  WHERE g.games_name = '2004 Summer'
SELECT g.season  FROM games g  JOIN games_competitor gc ON g.id = gc.games_id  JOIN person p ON p.id = gc.person_id  WHERE p.height = 180 AND p.weight = 73;
SELECT p.full_name  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  JOIN competitor_event ce ON gc.id = ce.competitor_id  JOIN medal m ON ce.medal_id = m.id  WHERE m.medal_name = 'Gold';
SELECT AVG(person.height)  FROM games_competitor  JOIN person ON games_competitor.person_id = person.id  WHERE games_competitor.age BETWEEN 22 AND 28;
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  WHERE person.gender = 'F' AND noc_region.region_name = 'Iran';
SELECT T2.age  FROM person AS T1  JOIN games_competitor AS T2 ON T1.id = T2.person_id  WHERE T1.height = (SELECT MAX(height) FROM person);
SELECT      SUBTRACT(COUNT(CASE WHEN weight > 70 THEN 1 END), COUNT(CASE WHEN weight < 70 THEN 1 END)) FROM      person AS p  JOIN      games_competitor AS gc ON p.id = gc.person_id   WHERE      gc.age <= 24;
SELECT      (COUNT(CASE WHEN age = 28 THEN id END) * 1.0 / COUNT(id)) * 100 AS percentage FROM      games_competitor  JOIN      games_city ON games_competitor.games_id = games_city.games_id JOIN      city ON city.id = games_city.city_id JOIN      games ON games.id = games_city.games_id WHERE      games.games_year = 2014 AND      games.season = 'Winter';
SELECT region_name  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  WHERE person.gender = 'M' AND person.height > (SELECT AVG(height) * 0.87 FROM person);
SELECT SUM(zip_data.households)  FROM zip_data  JOIN country ON country.zip_code = zip_data.zip_code  WHERE country.county = 'ARECIBLEO';
SELECT T3.zip_code  FROM zip_data AS T3  JOIN country AS T4 ON T3.zip_code = T4.zip_code  WHERE T4.county = 'ARECIBO'  ORDER BY T3.avg_house_value DESC  LIMIT 1;
SELECT SUM(t2.male_population)  FROM country AS t1  JOIN zip_data AS t2 ON t1.zip_code = t2.zip_code  WHERE t1.county = 'ARECIBO' AND t2.type = 'residential';
SELECT COUNT(*)  FROM zip_data  JOIN state ON zip_data.state = state.name  WHERE state.name = 'Delaware' AND daylight_saving = 'Yes'
SELECT T1.zip_code  FROM zip_data AS T1  JOIN country AS T2 ON T1.zip_code = T2.zip_code  WHERE T2.county = 'ARECIBO'  AND T1.white_population = (     SELECT MAX(white_population) FROM zip_data AS T3      JOIN country AS T4 ON T3.zip_code = T4.zip_code      WHERE T4.county = 'ARECIBO' )
SELECT T1.county  FROM country AS T1  JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code  WHERE T2.avg_income_per_household = (SELECT MAX(avg_income_per_household) FROM zip_data)
SELECT DISTINCT country.state, country.county  FROM country  JOIN zip_data ON zip_data.zip_code = country.zip_code  WHERE zip_data.daylight_savings = 'Yes';
SELECT z.zip_code  FROM zip_data z  JOIN state s ON z.state = s.abbreviation  JOIN country c ON z.zip_code = c.zip_code AND s.name = 'HUNTINGDON'  WHERE z.employees > 30
SELECT      asian_population FROM      address.zip_data JOIN      address.alias ON address.zip_data.zip_code = address.alias.zip_code WHERE      address.alias.alias = 'URB San Joaquin' AND residence_type = 'residential';
SELECT COUNT(*)  FROM address.zip_data  JOIN address.alias ON address.zip_data.zip_code = address.alias.zip_code  JOIN address.avoid ON address.alias.zip_code = address.avoid.zip_code  WHERE address.alias.alias = 'Internal Revenue Service'  AND address.zip_data.time_zone = 'Eastern';
SELECT T3.alias  FROM zip_data AS T1  JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code  JOIN avoid AS T3 ON T1.zip_code = T3.zip_code  WHERE T1.avg_house_value = (SELECT MAX(avg_house_value) FROM zip_data)
SELECT T1.alias  FROM alias AS T1  JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code  WHERE T2.median_female_age > 32 AND T1.bad_alias = 1;
SELECT      MAX(t.zip_code) AS highest_gender_ratio_zip_code,     t.male_population / t.female_population AS gender_ratio FROM      country AS c JOIN      zip_data AS z ON c.zip_code = z.zip_code WHERE      c.county = 'ARECIBO' GROUP BY      t.zip_code ORDER BY      gender_ratio DESC LIMIT 1;
SELECT AVG(T2.median_age)  FROM country AS T1  JOIN zip_data AS T2  ON T1.zip_code = T2.zip_code  WHERE T1.county = 'ARECIBO' AND T2.type = 'residential';
SELECT T1.area_code  FROM area_code AS T1  JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code  WHERE T2.female_median_age > 32;
SELECT T3.alias  FROM state AS T1  JOIN zip_data AS T2 ON T1.abbreviation = T2.state  JOIN alias AS T3 ON T2.zip_code = T3.zip_code  WHERE T2.city = 'Hartford';
SELECT COUNT(DISTINCT country)  FROM country  WHERE state = 'Alabama';
SELECT COUNT(*)  FROM zip_data  JOIN state ON zip_data.state = state.abbreviation  WHERE state.name = 'New York' AND type = 'Post Office'
SELECT city, state, latitude, longitude  FROM zip_data  JOIN area_code ON zip_data.zip_code = area_code.zip_code  WHERE area_code.area_code = 787;
SELECT SUM(total_delivery_receptacles)  FROM zip_data  WHERE state = 'CA'  AND type = 'Community Post Office'  ORDER BY total_delivery_receptacles DESC  LIMIT 1;
SELECT T3.county  FROM zip_data AS T1  JOIN city_population AS T2 ON T1.city = T2.city_name  JOIN country AS T3 ON T1.state = T3.state  WHERE T2.female_population = (SELECT MAX(female_population) FROM zip_data)
SELECT state.name FROM state JOIN zip_data ON state.abbreviation = zip_data.state WHERE zip_data.organization IS NULL;
SELECT      MAX(t.zip_data.population_2020) - MAX(t.zip_data.population_2010) AS population_difference FROM      zip_data JOIN      address.CBSA c ON c.CBSA = t.zip_code WHERE      c.CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ';
SELECT z.zip_code  FROM zip_data z  JOIN state s ON z.state = s.abbreviation  WHERE s.name = 'Delaware' AND z.county_fips IN (   SELECT cd.county_fips    FROM country c    JOIN CBSA CBSA ON c.zip_code = CBSA.zip_code    WHERE c.county = 'NEW CASTLE' )
SELECT COUNT(*)  FROM (   SELECT state.abbreviation    FROM state    INNER JOIN zip_congress ON state.abbreviation = zip_congress.state    INNER JOIN zip_data ON zip_data.zip_code = zip_congress.zip_code    WHERE zip_data.monthly_benefits_retired_workers = (SELECT MAX(monthly_benefits_retired_workers) FROM zip_data) ) AS highest_monthly_benefits_state;
SELECT COUNT(*)  FROM zip_data  JOIN state ON zip_data.state = state.abbreviation  JOIN congress ON state.abbreviation = congress.state AND congress.first_name = 'Lisa' AND congress.last_name = 'Murkowski'  WHERE zip_data.employees = 0;
SELECT      state.name,     GROUP_CONCAT(CONCAT(congress.first_name, ' ', congress.last_name) SEPARATOR ', ') AS representatives FROM      state JOIN      zip_data ON state.abbreviation = zip_data.state GROUP BY      state.abbreviation ORDER BY      SUM(zip_data.asian_population) DESC LIMIT 3;
SELECT `name`  FROM state  JOIN country ON state.abbreviation = country.state  WHERE `county` = 'OUTAGAMIE';
SELECT `party`  FROM congress  JOIN zip_congress ON congress.state = zip_congress.state  WHERE zip_congress.zip_code = '91701';
SELECT SUM(male_population)  FROM zip_data  JOIN country ON zip_data.zip_code = country.zip_code  WHERE county_fips LIKE 'CT%' AND name = 'New Haven' AND type = 'residential';
SELECT T3.alias  FROM zip_data AS T1  JOIN country AS T2 ON T1.zip_code = T2.zip_code  JOIN alias AS T3 ON T3.zip_code = T2.zip_code  WHERE T1.latitude = 18.090875 AND T1.longitude = -66.867756;
SELECT T3.area_code FROM zip_data AS T1 JOIN city_with_most_elders AS T2 ON T1.city = T2.city JOIN area_code AS T3 ON T1.zip_code = T3.zip_code GROUP BY T3.area_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*)  FROM avoid  JOIN zip_congress ON avoid.zip_code = zip_congress.zip_code  JOIN congress ON zip_congress.district = congress.District  WHERE congress.first_name = 'Thompson' AND congress.last_name = 'Bennie G';
SELECT latitude, longitude  FROM zip_data  JOIN area_code ON zip_data.zip_code = area_code.zip_code  WHERE area_code.area_code = '636';
SELECT zc.zip_code FROM zip_congress zc JOIN congress c ON zc.district = c.District  WHERE c.first_name = 'Buchanan' AND c.last_name = 'Vernon';
SELECT state.name  FROM area_code  JOIN state ON state.abbreviation = area_code.abbreviation  WHERE area_code.area_code = '878';
SELECT COUNT(*)  FROM state  WHERE name = 'Virginia';
SELECT CBSA_name, CBSA_type  FROM CBSA  JOIN zip_data ON CBSA.CBSA = zip_data.CBSA  WHERE zip_data.zip_code = '45503';
SELECT T3.name  FROM zip_congress AS T1  JOIN area_code AS T2 ON T1.zip_code = T2.zip_code  JOIN country AS T3 ON T2.zip_code = T3.zip_code  WHERE T1.district = 'Missouri 4' AND T2.area_code = (SELECT area_code FROM zip_data WHERE first_name = 'Hartzler' AND last_name = 'Vicky');
SELECT AVG(T1.male_median_age)  FROM zip_congress AS T1  JOIN country AS T2 ON T1.zip_code = T2.zip_code  JOIN state AS T3 ON T2.state = T3.name  WHERE T3.name = 'Windham'
SELECT AVG(T2.female_median_age)  FROM state AS T1  JOIN zip_data AS T2 ON T1.abbreviation = T2.state  JOIN congress AS T3 ON T1.abbreviation = T3.state AND T3.first_name = 'DeSantis' AND T3.last_name = 'Ron'  WHERE T1.name = (SELECT T4.name FROM state AS T4 WHERE T3.abbreviation = T4.abbreviation)
SELECT T3.area_code  FROM state AS T1  JOIN zip_data AS T2 ON T1.abbreviation = T2.state  JOIN area_code AS T3 ON T2.zip_code = T3.zip_code  WHERE T1.name = 'South Carolina' AND T2.city = 'Bishopville';
SELECT T3.alias  FROM zip_data AS T1  JOIN country AS T2 ON T1.zip_code = T2.zip_code  JOIN alias AS T3 ON T3.zip_code = T2.zip_code  WHERE T2.city = 'Geneva' AND T2.state = 'AL';
SELECT T3.city, T2.name  FROM alias AS T1  JOIN state AS T2 ON T1.state = T2.abbreviation  JOIN zip_congress AS T4 ON T1.zip_code = T4.zip_code  JOIN zip_data AS T3 ON T3.zip_code = T1.zip_code  WHERE T1.alias = 'Lawrenceville';
SELECT      alias.alias,     avoid.bad_alias FROM      alias LEFT JOIN      avoid ON alias.zip_code = avoid.zip_code WHERE      alias.zip_code = '38015';
SELECT zc.zip_code  FROM zip_congress zc  JOIN congress c ON zc.district = c.District  WHERE c.first_name = 'Steven' AND c.last_name = 'King';
SELECT CBSA_name, CBSA_type  FROM CBSA  JOIN state ON CBSA.abbreviation = state.abbreviation  WHERE state.name = 'ME' AND CBSA.city = 'York';
SELECT      c.zip_code,      c.latitude,      c.longitude,      a.CBSA_name,      a.median_age FROM      zip_data c JOIN      CBSA a ON c.CBSA = a.CBSA WHERE      a.median_age > 40 LIMIT 10;
SELECT T3.county  FROM alias AS T1  JOIN zip_data AS T2 ON T2.zip_code = T1.zip_code  JOIN country AS T3 ON T3.zip_code = T1.zip_code  WHERE T1.alias = 'Druid Hills'
SELECT T3.area_code  FROM state AS T1  JOIN zip_data AS T2 ON T1.abbreviation = T2.state  JOIN area_code AS T3 ON T2.zip_code = T3.zip_code  WHERE T1.name = 'Montana' AND T2.county = 'PHILLIPS';
SELECT      c.first_name,      c.last_name,      z.zip_code,      COALESCE(abad.alias, z.zip_code) AS postal_code FROM      congress c JOIN      zip_congress zc ON c.CID = zc.cognress_rep_id JOIN      zip_data z ON z.zip_code = zc.zip_code JOIN      state s ON z.state = s.name LEFT JOIN      alias abad ON abad.zip_code = z.zip_code WHERE      s.name = 'Wisconsin' ORDER BY      z.land_area DESC LIMIT 1;
SELECT state.name FROM state JOIN zip_data ON state.abbreviation = zip_data.state WHERE zip_data.time_zone = 'Central';
SELECT      ad.city, st.name  FROM      address.zip_data ad  JOIN      address.state st ON ad.state = st.abbreviation  JOIN      address.CBSA cbsa ON cbsa.CBSA_type = 'Lexington-Fayette, KY'  WHERE      cbsa.CBSA_name = 'Lexington-Fayette, KY'  LIMIT      10;
SELECT      zip_code FROM      zip_data JOIN      state ON zip_data.state = state.name JOIN      congress ON zip_data.CID = congress.cognress_rep_id WHERE      state.abbreviation = 'IN' AND      (party = 'Democrat' OR party = 'Republican') ORDER BY      CASE          WHEN party = 'Democrat' THEN 1          ELSE 2      END;
SELECT      (COUNT(CASE WHEN state.name = 'Alabama' THEN 1 END) /       COUNT(CASE WHEN state.name = 'Illinois' THEN 1 END)) AS ratio FROM      state JOIN      congress ON state.abbreviation = congress.state;
SELECT zip_code, AVG(population_2020) AS avg_population_2020 FROM zip_data
SELECT      state.name FROM      state JOIN      address.CBSA ON state.abbreviation = CBSA.state WHERE      CBSA_name = 'Berlin, NH'
SELECT CBSA_name  FROM CBSA  WHERE CBSA IN (     SELECT CBSA      FROM zip_congress      GROUP BY CBSA      HAVING COUNT(*) > 10 );
SELECT T1.alias  FROM alias AS T1  JOIN country AS T2 ON T1.zip_code = T2.zip_code  WHERE T2.state = 'PR' AND T2.country = 'Puerto Rico';
SELECT longitude, latitude  FROM congress  JOIN zip_congress ON congress.cognress_rep_id = zip_congress.district  JOIN zip_data ON zip_congress.zip_code = zip_data.zip_code  WHERE first_name = 'Grayson' AND last_name = 'Alan';
SELECT state.name  FROM area_code  JOIN zip_data ON area_code.zip_code = zip_data.zip_code  JOIN state ON zip_data.state = state.abbreviation  WHERE area_code.area_code = 787;
SELECT first_name, last_name  FROM congress  JOIN zip_congress ON congress.CID = zip_congress.district  WHERE zip_congress.zip_code IN (SELECT zip_code FROM zip_data WHERE population_2020 > 30000);
SELECT z.zip_code  FROM zip_data z  JOIN state s ON z.state = s.abbreviation  WHERE s.name = 'Massachusetts'  AND z.area_code IS NOT NULL  GROUP BY z.zip_code  HAVING COUNT(z.area_code) > 1;
SELECT `county`  FROM `country` WHERE `city` = 'Arecibo' AND `state` = 'state_name';
SELECT COUNT(*)  FROM zip_data  JOIN state ON zip_data.state = state.name  JOIN CBSA ON CBSA.CBSA_name = 'Barre, VT'  WHERE state.name = 'VT';
SELECT zip_code FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code WHERE country.county = 'SAINT CROIX' AND land_area = (SELECT MAX(land_area) FROM zip_data WHERE county = 'SAINT CROIX');
SELECT      (t3.population_2020 - t3.population_2010) AS population_difference FROM      congress AS t1 JOIN      zip_congress AS t2 ON t1.cognress_rep_id = t2.district JOIN      zip_data AS t3 ON t2.zip_code = t3.zip_code WHERE      t1.first_name = 'Griffin' AND t1.last_name = 'Tim'
SELECT      (T3.asian_population / T3.population_2020) * 100 AS asian_population_percentage FROM      address.cbsa AS T1 JOIN      address.zip_data AS T3 ON T1.CBSA = T3.CBSA WHERE      T1.CBSA_name = 'Atmore, AL'
SELECT T1.city  FROM `zip_data` AS T1 JOIN `area_code` AS T2 ON T1.zip_code = T2.zip_code WHERE T2.area_code = 939 ORDER BY T1.asian_population DESC LIMIT 1;
SELECT T3.name, T2.state  FROM zip_data AS T1  JOIN country AS T2 ON T1.zip_code = T2.zip_code  JOIN state AS T3 ON T2.state = T3.abbreviation  WHERE T1.elevation = 1039
SELECT      alias.alias,      zip_data.elevation  FROM      zip_data  JOIN      zip_congress ON zip_data.zip_code = zip_congress.zip_code  JOIN      state ON zip_data.state = state.abbreviation  JOIN      zip_data AS zip_data_city ON zip_data.city = zip_data_city.city AND zip_data.state = zip_data_city.state  JOIN      alias ON zip_data_city.zip_code = alias.zip_code  WHERE      zip_data.zip_code = '1028';
SELECT T1.area_code FROM area_code AS T1 JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.land_area = MAX(T2.land_area)
SELECT T3.area_code FROM zip_data AS T1 JOIN alias AS T2 ON T1.zip_code = T2.zip_code JOIN area_code AS T3 ON T2.zip_code = T3.zip_code WHERE T1.white_population BETWEEN 1700 AND 2000;
SELECT asian_population  FROM address.zip_data  JOIN address.alias ON address.zip_data.zip_code = address.alias.zip_code  WHERE address.alias.alias = 'Leeds'
SELECT area_code, country  FROM address.zip_data  JOIN address.state ON zip_data.state = state.abbreviation  WHERE city = 'Savoy';
SELECT T3.alias  FROM state AS T1  JOIN zip_data AS T2 ON T1.abbreviation = T2.state  JOIN alias AS T3 ON T2.zip_code = T3.zip_code  WHERE T2.population_2010 = 0;
SELECT COUNT(*)  FROM zip_data  JOIN area_code ON zip_data.zip_code = area_code.zip_code  WHERE area_code.area_code = '608' AND daylight_savings = 'Yes';
SELECT AVG(zip_data.elevation) FROM alias JOIN zip_data ON alias.zip_code = zip_data.zip_code WHERE alias.alias = 'Amherst';
SELECT country.name, state.name  FROM city  JOIN state ON city.state_id = state.state_id  WHERE city.name = 'Dalton';
SELECT      alias.zip_code,     alias.alias  FROM      alias  JOIN      zip_data ON alias.zip_code = zip_data.zip_code  WHERE      zip_data.type = 'Post Office';
SELECT      SUBTRACT(COUNT(CASE WHEN type = 'P.O. Box Only' THEN 1 END), COUNT(CASE WHEN type = 'Post Office' THEN 1 END)) as difference FROM      zip_data WHERE      area_code = 787;
SELECT      (SUM(zip_data.population_2020) - SUM(zip_data.population_2010)) / SUM(zip_data.population_2010) * 100 as percentage_increase,     COUNT(*) as number_of_cities FROM      zip_data JOIN      country ON zip_data.zip_code = country.zip_code WHERE      country.county = 'ARROYO';
SELECT zip_code, city FROM zip_data JOIN state ON zip_data.state = state.name = 'Texas' JOIN zip_congress ON zip_data.zip_code = zip_congress.zip_code JOIN zip_beneficiaries ON zip_data.zip_code = zip_beneficiaries.zip_code WHERE zip_beneficiaries.total_beneficiaries > 10000;
SELECT COUNT(*)  FROM zip_data  JOIN state ON zip_data.state = state.abbreviation  JOIN zip_congress ON zip_data.zip_code = zip_congress.zip_code  JOIN country ON zip_data.zip_code = country.zip_code  WHERE state.name = 'District of Columbia' AND country.state = 'DISTRICT OF COLUMBIA' AND zip_data.black_population > 20000;
SELECT T3.city, T1.alias  FROM zip_data AS T1  JOIN alias AS T2 ON T1.zip_code = T2.zip_code  WHERE T1.zip_code = '19019';
SELECT T1.alias  FROM alias AS T1  JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code  JOIN country AS T3 ON T3.zip_code = T2.zip_code AND T3.county = 'Camuy'  JOIN avoid AS T4 ON T1.zip_code = T4.zip_code
SELECT      z.zip_code,      z.city,      CONCAT(c.first_name, ' ', c.last_name) as congress_representative_full_name FROM      zip_data z JOIN      zip_congress c ON z.zip_code = c.zip_code WHERE      z.population_2020 = (SELECT MAX(population_2020) FROM zip_data)
SELECT COUNT(*)  FROM zip_data  JOIN state ON zip_data.state = state.abbreviation  WHERE daylight_savings = 'Yes'  AND state.name = 'Illinois'  AND region = 'Midwest';
SELECT country.name, zip_data.zip_code  FROM country  JOIN zip_data ON country.zip_code = zip_data.zip_code  WHERE country.name = 'Virgin Islands';
SELECT z.zip_code, a.alias  FROM zip_data z  JOIN alias a ON z.city = 'Greeneville' AND z.zip_code = a.zip_code;
SELECT      COUNT(*)  FROM      zip_data  WHERE      first_name = 'Smith' AND last_name = 'Adrian' UNION SELECT      COUNT(*)  FROM      zip_data  WHERE      first_name = 'Heck' AND last_name = 'Joe';
SELECT      zip_code,      CBSA_name  FROM      address.zip_data  JOIN      address.state ON address.zip_data.state = address.state.name  JOIN      address.congress ON address.state.abbreviation = address.congress.state  WHERE      address.zip_data.city = 'Oxford';
SELECT      z.zip_code,      c.organization  FROM      zip_data z  JOIN      CBSA c ON z.CBSA = c.CBSA  WHERE      c.CBSA_name = 'Kingsport-Bristol, TN-VA';
SELECT z.zip_code, CONCAT(r.first_name, ' ', r.last_name) AS representative_name FROM zip_data z JOIN zip_congress c ON z.zip_code = c.zip_code JOIN congress r ON c.Congress_rep_id = r.cognress_rep_id WHERE z.organization = 'Readers Digest';
SELECT      (COUNT(CASE WHEN T1.state = 'California' THEN T1.zip_code END) *       COUNT(CASE WHEN T1.type = 'Post Office' THEN T1.zip_code END) /       COUNT(T1.zip_code)) * 100 AS percentage FROM      zip_data AS T1 WHERE      T1.state = 'California';
SELECT zc.zip_code FROM zip_congress zc JOIN congress c ON zc.district = c.District WHERE c.House = 'Senate';
SELECT city  FROM alias WHERE alias IN (     SELECT bad_alias      FROM avoid ) GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT country.county  FROM country  JOIN state ON country.state_fips = state.abbreviation  WHERE state.name = 'Georgia';
SELECT T1.zip_code, T3.latitude, T3.longitude FROM zip_data AS T1 JOIN area_code AS T2 ON T1.zip_code = T2.zip_code JOIN zip_congress AS T4 ON T1.zip_code = T4.zip_code JOIN country AS T3 ON T3.zip_code = T1.zip_code WHERE T2.area_code = '410';
SELECT CBSA_name  FROM address.CBSA  JOIN address.zip_data ON CBSA.CBSA = zip_data.CBSA  WHERE zip_data.avg_house_value = (SELECT MAX(avg_house_value) FROM address.zip_data);
SELECT T3.alias  FROM state  JOIN zip_congress ON state.abbreviation = zip_congress.state  JOIN zip_data ON zip_congress.zip_code = zip_data.zip_code  JOIN avoid AS T3 ON zip_data.zip_code = T3.zip_code  WHERE state.name = 'East Setauket';
SELECT SUM(`population_2010`)  FROM `county`  WHERE `county` = 'WILCOX';
SELECT area_code  FROM (   SELECT area_code, asian_population   FROM zip_data zd   JOIN country c ON zd.zip_code = c.zip_code ) subquery ORDER BY asian_population DESC LIMIT 1;
SELECT city  FROM address.zip_data  JOIN address.CBSA ON address.zip_data.CBSA = address.CBSA.CBSA  WHERE address.CBSA.CBSA_type = 'Micro';
SELECT state.name FROM state JOIN country ON state.abbreviation = country.state GROUP BY state.name ORDER BY COUNT(country.county) DESC LIMIT 1;
SELECT COUNT(*)  FROM zip_data  JOIN zip_congress ON zip_data.zip_code = zip_congress.zip_code  WHERE zip_congress.district = 'FL-10'
SELECT AVG(avg_income_per_household)  FROM address.zip_data JOIN address.alias ON address.zip_data.zip_code = address.alias.zip_code WHERE address.alias.alias = 'Danzig';
SELECT DISTINCT state.name  FROM state  JOIN zip_data ON state.abbreviation = zip_data.state  WHERE zip_data.female_population > DIVIDE(SUM(zip_data.female_population), COUNT(DISTINCT state.abbreviation));
SELECT      (SUM(CASE WHEN T4.county = 'CORYELL' THEN T1.households ELSE 0 END) / CAST(SUM(T1.households) AS REAL)) * 100 as percentage FROM      zip_data T1 JOIN      country T2 ON T1.zip_code = T2.zip_code AND T2.county = 'CORYELL' JOIN      state T3 ON T3.abbreviation = T2.state WHERE      T1.city = 'Coroyell';
SELECT CBSA_name, CBSA_type  FROM CBSA  JOIN zip_data ON CBSA.zip_code = zip_data.zip_code  WHERE city = 'Cabo Rojo';
SELECT T3.name  FROM zip_data AS T1  JOIN country AS T2 ON T1.zip_code = T2.zip_code  JOIN state AS T3 ON T3.abbreviation = T2.state  WHERE T1.city = 'Las Marias';
SELECT COUNT(*)  FROM congress  WHERE first_name = 'Pierluisi' AND last_name = 'Pedro';
SELECT T3.alias  FROM state  JOIN zip_congress AS T2 ON state.abbreviation = T2.state  JOIN zip_data AS T1 ON T1.zip_code = T2.zip_code  JOIN alias AS T3 ON T1.zip_code = T3.zip_code  WHERE T1.city = 'Aguadilla' AND T3.bad_alias = 1;
SELECT first_name, last_name  FROM congress  JOIN state ON congress.state = state.abbreviation  WHERE city = 'Guanica';
SELECT state.name FROM alias JOIN state ON alias.state = state.abbreviation JOIN avoid ON alias.zip_code = avoid.zip_code GROUP BY state.name ORDER BY COUNT(avoid.bad_alias) DESC LIMIT 1;
SELECT      (SELECT COUNT(*) FROM avoid a1 WHERE a1.zip_code IN (         SELECT ad.zip_code FROM zip_data ad WHERE ad.city = 'Aguada'     )) -      (SELECT COUNT(*) FROM avoid a2 WHERE a2.zip_code IN (         SELECT ag.zip_code FROM zip_data ag WHERE ag.city = 'Aguadilla'     )) AS bad_alias_difference;
SELECT state.name FROM CBSA JOIN state ON CBSA.state = state.abbreviation WHERE CBSA.CBSA_type = 'Metro' GROUP BY state.abbreviation HAVING COUNT(*) > 50;
SELECT SUM(`population_2020`)  FROM `zip_data`  JOIN `country` ON `zip_data.zip_code` = `country.zip_code`  WHERE `country.county` = 'ARECIBO';
SELECT country.name  FROM country  JOIN zip_data ON country.zip_code = zip_data.zip_code  WHERE zip_data.population_2010 > 10000;
SELECT country.name FROM country JOIN zip_data ON country.zip_code = zip_data.zip_code WHERE zip_data.households = (SELECT MAX(households) FROM zip_data);
SELECT      (SUM(CASE WHEN households > 10000 THEN households ELSE 0 END) / SUM(households)) * 100 AS percentage FROM residential_mailboxes;
SELECT      (COUNT(CASE WHEN t1.type = 'Post Office' THEN 1 END) / COUNT(t1.type)) * 100 AS percentage FROM      zip_data t1 JOIN      country t2 ON t1.zip_code = t2.zip_code WHERE      t2.county = 'SAINT CROIX';
SELECT T3.country  FROM zip_data AS T1  JOIN area_code AS T2 ON T1.zip_code = T2.zip_code  JOIN country AS T3 ON T1.state = T3.state AND T1.zip_code = T3.zip_code  WHERE T2.area_code = '787' AND T1.type = 'Unique Post Office'
SELECT t3.elevation  FROM alias AS t1  JOIN zip_data AS t3 ON t1.zip_code = t3.zip_code  WHERE t1.alias = 'East Longmeadow'
SELECT COUNT(DISTINCT city)  FROM zip_data  WHERE daylight_savings = 'No';
SELECT T3.country, T2.area_code FROM zip_data AS T1 JOIN area_code AS T2 ON T1.zip_code = T2.zip_code JOIN country AS T3 ON T3.zip_code = T1.zip_code WHERE T1.zip_code = '1116';
SELECT      T3.city,      T1.type  FROM      zip_data AS T1  JOIN      alias AS T2 ON T1.zip_code = T2.zip_code  JOIN      state AS T3 ON T3.abbreviation = T1.state  WHERE      T2.alias = 'St Thomas';
SELECT T1.city  FROM `city` AS T1  JOIN `state` AS T2 ON T1.state = T2.name  JOIN `zip_data` AS T3 ON T3.state = T2.name AND T3.city = T1.city  WHERE T3.state = 'Oklahoma' AND T2.name = 'Noble';
SELECT T1.area_code FROM area_code AS T1 JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.water_area = (SELECT MAX(water_area) FROM zip_data);
SELECT T3.alias  FROM `zip_data` AS T1 JOIN `alias` AS T3 ON T1.zip_code = T3.zip_code WHERE T1.population_2020 = (SELECT MAX(population_2020) FROM `zip_data`);
SELECT T3.elevation  FROM state AS T1  JOIN zip_data AS T3 ON T1.abbreviation = T3.state  JOIN country AS T2 ON T3.zip_code = T2.zip_code  WHERE T1.name = 'Massachusetts' AND T2.county = 'Hampden';
SELECT T1.area_code FROM area_code AS T1 JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.hispanic_population = (SELECT MAX(hispanic_population) FROM zip_data);
SELECT T1.alias  FROM alias AS T1  JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code  WHERE T2.asian_population = 7;
SELECT AVG(zip_data.white_population) FROM zip_data JOIN area_code ON zip_data.zip_code = area_code.zip_code WHERE area_code.area_code = 920;
SELECT      (COUNT(CASE WHEN county_fips < 20 THEN 1 END) / COUNT(*)) * 100 AS percentage FROM      address.alias JOIN      address.country ON alias.zip_code = country.zip_code WHERE      alias = 'Ponce';
SELECT DISTINCT country.state, country.country  FROM zip_data  JOIN country ON zip_data.zip_code = country.zip_code  WHERE zip_data.population_2020 > 0.97 * AVG(zip_data.population_2020) OVER () ;
SELECT COUNT(*)  FROM zip_congress  JOIN congress ON zip_congress.district = congress.District  JOIN zip_data ON zip_congress.zip_code = zip_data.zip_code  WHERE congress.first_name = 'Kirkpatrick' AND congress.last_name = 'Ann'
SELECT      z.zip_code,      z.latitude,      z.longitude  FROM      zip_data z  JOIN      CBSA c ON z.CBSA = c.CBSA  WHERE      c.CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ';
SELECT      ad.zip_code,     zip_data.city,     CONCAT(ad.latitude, ', ', ad.longitude) AS location FROM      address.alias ad JOIN      address.zip_data zd ON zd.zip_code = ad.zip_code WHERE      ad.bad_alias = 'Shared Reshipper';
SELECT first_name, last_name  FROM congress  JOIN zip_congress ON congress.CID = zip_congress.cognress_rep_id  JOIN zip_data ON zip_congress.zip_code = zip_data.zip_code  WHERE zip_data.city = 'Garfield';
SELECT COUNT(*)  FROM address.zip_data  JOIN address.CBSA ON address.zip_data.state = address.CBSA.state  WHERE address.CBSA.CBSA_name = 'New York-Newark-Jersey City, NY-NJ-PA';
SELECT COUNT(*)  FROM zip_data  JOIN state ON zip_data.state = state.abbreviation  WHERE state.name = 'Puerto Rico';
SELECT COUNT(DISTINCT zip_code) AS postal_points, COUNT(DISTINCT country) AS countries  FROM zip_data  JOIN state ON zip_data.state = state.abbreviation  WHERE state.name = 'West Virginia';
SELECT z.zip_code, a.area_code  FROM zip_data z JOIN area_code a ON z.zip_code = a.zip_code WHERE z.type = 'Community Post Office' AND z.elevation > 6000;
SELECT COUNT(*)  FROM zip_data  JOIN state ON zip_data.state = state.abbreviation  JOIN congress ON state.name = 'Mississippi' AND congress.state = state.abbreviation  WHERE congress.House = 'House of Representatives'
SELECT DISTINCT c.cognress_rep_id  FROM congress c  JOIN zip_data zd ON c.state = zd.state AND zd.city = 'East Springfield' AND zd.type = 'Postal Point';
SELECT CBSA_name  FROM address.CBSA  JOIN address.zip_congress ON address.CBSA.CBSA = address.zip_congress.CBSA  WHERE address.zip_congress.district = (     SELECT zip_congress.district      FROM address.zip_congress      WHERE employees = (         SELECT MAX(employees)          FROM address.zip_data     ) )
SELECT COUNT(*)  FROM zip_data  JOIN state ON zip_data.state = state.name  WHERE state.name = 'Ohio'  AND zip_data.type = 'Unique Post Office';
SELECT      DIVIDE(SUM(t1.total_beneficiaries), COUNT(t1.zip_code)) AS avg_beneficiaries_per_zip FROM      zip_data t1 JOIN      country t2 ON t1.zip_code = t2.zip_code WHERE      t2.state = 'GU'
SELECT      (COUNT(CASE WHEN party = 'Democrat' THEN 1 END) * 100.0 / COUNT(congress_rep_id)) AS percentage,     COUNT(DISTINCT zip_code) AS postal_points FROM      congress WHERE      state = 'Hawaii';
SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear = (SELECT MIN(FirstBrewedYear) FROM rootbeerbrand);
SELECT COUNT(DISTINCT BreweryName)  FROM rootbeerbrand WHERE Country IN ('United States', 'Canada')
SELECT BrandName FROM rootbeerbrand WHERE FacebookPage IS NOT NULL;
SELECT BrandName FROM rootbeerbrand WHERE CurrentRetailPrice - WholesaleCost = (     SELECT MIN(price_diff)     FROM (         SELECT CurrentRetailPrice - WholesaleCost AS price_diff         FROM rootbeerbrand     ) AS subquery );
SELECT Description FROM rootbeerbrand WHERE BrandName = 'A&W';
SELECT City  FROM rootbeerbrand  WHERE BreweryName = 'AJ Stephans Beverages';
SELECT COUNT(*)  FROM customers  JOIN transaction ON customers.CustomerID = transaction.CustomerID  WHERE customers.First = 'Frank-Paul'  AND customers.Last = 'Santangelo'  AND SUBSTR(transaction.TransactionDate, 1, 4) = '2014'  AND SUBSTR(transaction.TransactionDate, 6, 2) = '07';
SELECT COUNT(*)  FROM transaction  JOIN customers ON transaction.CustomerID = customers.CustomerID  WHERE SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07' AND customers.Gender = 'M';
SELECT COUNT(*)  FROM customers  JOIN transaction ON customers.CustomerID = transaction.CustomerID  WHERE customers.SubscribedToEmailList = 'TRUE'  AND transaction.CreditCardType = 'Visa'  AND SUBSTR(transaction.TransactionDate, 1, 4) = '2014'  AND SUBSTR(transaction.TransactionDate, 6, 2) = '07';
SELECT First || ' ' || Last  FROM customers  JOIN transaction ON customers.CustomerID = transaction.CustomerID  WHERE SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08'  GROUP BY First, Last  ORDER BY COUNT(TransactionID) DESC  LIMIT 1;
SELECT DISTINCT r.brandname FROM rootbeer AS rb JOIN rootbeerbrand AS r ON rb.brandid = r.brandid JOIN transaction AS t ON rb.rootbeerid = t.rootbeerid JOIN customers AS c ON t.customerid = c.customerid WHERE c.first = 'Frank-Paul'  AND c.last = 'Santangelo' AND t.transactiondate = '2014-07-07';
SELECT COUNT(*)  FROM transaction  JOIN rootbeer ON transaction.RootBeerID = rootbeer.RootBeerID  JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID  WHERE transaction.TransactionDate = '2014-07-07'  AND rootbeer.Containertype = 'Can'  AND customers.First = 'Frank-Paul'  AND customers.Last = 'Santangelo';
SELECT COUNT(*)  FROM rootbeer  JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID  JOIN transaction ON rootbeer.RootBeerID = transaction.RootBeerID  WHERE rootbeerbrand.BrandName = 'Bulldog'  AND SUBSTR(TransactionDate, 1, 4) = '2014'  AND SUBSTR(TransactionDate, 6, 2) = '08';
SELECT c.First, c.Last  FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID JOIN rootbeer rb ON t.RootBeerID = rb.RootBeerID JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID WHERE rbb.BrandName = 'AJ Stephans Beverages';
SELECT COUNT(*)  FROM rootbeer  JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID  JOIN transaction ON rootbeer.RootBeerID = transaction.RootBeerID  WHERE rootbeerbrand.Twitter IS NULL AND SUBSTR(transaction.TransactionDate, 1, 4) = '2014' AND SUBSTR(transaction.TransactionDate, 6, 2) = '08';
SELECT T5.CreditCardNumber  FROM customers AS T1 JOIN transactions AS T5 ON T1.CustomerID = T5.CustomerID WHERE T1.First = 'Frank-Paul'  AND T1.Last = 'Santangelo'  AND T5.TransactionDate = '2014-07-07';
SELECT COUNT(*)  FROM rootbeer  JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID JOIN customers ON rootbeer.CustomerID = customers.CustomerID WHERE customers.First = 'Frank' AND customers.Last = 'Santangelo' AND rootbeerbrand.CaneSugar = 'FALSE' AND rootbeerbrand.Honey = 'FALSE';
SELECT TransactionDate FROM transaction JOIN customers ON transaction.CustomerID = customers.CustomerID WHERE customers.Gender = 'M' GROUP BY TransactionID HAVING COUNT(CustomerID) > 3;
SELECT      DIVIDE(SUM(COUNT(rl.RootBeerID)) AS AverageRootBeersSoldPerDay FROM      beer_factory.rootbeer rl JOIN      beer_factory.transaction tr ON rl.RootBeerID = tr.RootBeerID WHERE      rl.BrandID = (SELECT BrandID FROM beer_factory.rootbeerbrand WHERE BrandName = 'A&W') AND     TRIM(SUBSTRING(tr.TransactionDate, 1, 4)) = '2014' AND     TRIM(SUBSTRING(tr.TransactionDate, 5, 2)) = '08' GROUP BY      DATE_FORMAT(tr.TransactionDate, '%Y-%m-%d') HAVING      DATE_FORMAT(tr.TransactionDate, '%Y-%m') = '2014-08' ORDER BY      DATE_FORMAT(tr.TransactionDate, '%Y-%m-%d');
SELECT      (SUM(CASE WHEN r.BrandID IN (SELECT rb.BrandID FROM rootbeerbrand rb WHERE rb.BreweryName = 'AJ Stephans Beverages') AND SUBSTR(tr.TransactionDate, 1, 4) = '2014' THEN 1 ELSE 0 END) * 1.0 / COUNT(r.RootBeerID)) * 100 AS Percentage FROM      rootbeer r JOIN      rootbeerbrand rb ON r.BrandID = rb.BrandID JOIN      transaction tr ON r.RootBeerID = tr.RootBeerID WHERE      SUBSTR(tr.TransactionDate, 1, 4) = '2014';
SELECT COUNT(*)  FROM rootbeerreview  JOIN customers ON rootbeerreview.CustomerID = customers.CustomerID  WHERE customers.First = 'James' AND customers.Last = 'House';
SELECT `CreditCardNumber` FROM `customers` WHERE `First` = 'Lisa' AND `Last` = 'Ling';
SELECT g.Latitude, g.Longitude  FROM location l  JOIN geolocation g ON l.LocationID = g.LocationID  WHERE l.LocationName = 'Sac State American River Courtyard';
SELECT l.LocationName  FROM location l  JOIN transaction t ON l.LocationID = t.LocationID  WHERE t.TransactionID = 100885;
SELECT T1.City  FROM customers AS T1  JOIN transaction AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T2.TransactionID = 103545;
SELECT PhoneNumber  FROM customers  WHERE CustomerID IN (     SELECT CustomerID      FROM transaction      WHERE CreditCardNumber = '6011179359005380' );
SELECT First, Last  FROM customers  WHERE CustomerID = (     SELECT CustomerID      FROM rootbeerreview      GROUP BY CustomerID      ORDER BY COUNT(*) DESC      LIMIT 1 );
SELECT `FirstPurchaseDate` FROM `customers` WHERE `CustomerID` IN (     SELECT `CustomerID`     FROM `rootbeerreview`     WHERE `Review` = 'Tastes like Australia.' );
SELECT T1.FirstPurchaseDate  FROM customers AS T1  JOIN rootbeer AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.First = 'Natalie' AND T1.Last = 'Dorris';
SELECT      r.BrandID  FROM      rootbeerreview rr  JOIN      rootbeer r ON rr.BrandID = r.BrandID  WHERE      rr.StarRating = 5  GROUP BY      r.BrandID  HAVING      COUNT(*) >= ALL (         SELECT              COUNT(*)          FROM              rootbeerreview rr2          JOIN              rootbeer r2 ON rr2.BrandID = r2.BrandID          WHERE              rr2.StarRating = 5      )  ORDER BY      COUNT(*) DESC  LIMIT 1;  SELECT      BreweryName  FROM      rootbeerbrand  WHERE      BrandID = (         SELECT              BrandID          FROM              rootbeerreview rr          JOIN              rootbeer r ON rr.BrandID = r.BrandID          WHERE              rr.StarRating = 5          GROUP BY              r.BrandID          HAVING              COUNT(*) >= ALL (                 SELECT                      COUNT(*)                  FROM                      rootbeerreview rr2                  JOIN                      rootbeer r2 ON rr2.BrandID = r2.BrandID                  WHERE                      rr2.StarRating = 5              )          ORDER BY              COUNT(*) DESC          LIMIT 1     );
SELECT c.SubscribedToEmailList  FROM rootbeerreview rb JOIN rootbeerbrand bb ON rb.BrandID = bb.BrandID JOIN customers c ON rb.CustomerID = c.CustomerID WHERE bb.BrandName = 'Frostie' AND rb.StarRating = 3 AND rb.ReviewDate = '2014-04-24';
SELECT r.RetailPrice FROM rootbeerbrand rb JOIN rootbeerbrand AS rb2 ON rb.BrandID = rb2.BrandID JOIN rootbeerreview rr ON rb2.BrandID = rr.BrandID WHERE rr.Review = 'The quintessential dessert root beer. No ice cream required.';
SELECT      (SUM(CASE WHEN r.BrandID = rb.BrandID AND r.StarRating = 5 THEN 1 ELSE 0 END) / COUNT(r.BrandID)) * 1.0 * 100 AS PercentageOfFiveStarRatings FROM      rootbeerreview r JOIN      rootbeerbrand rb ON r.BrandID = rb.BrandID WHERE      rb.BrandName = 'River City' ;
SELECT AVG(T2.StarRating) AS AverageReviews FROM rootbeerreview T1 INNER JOIN rootbeer T2 ON T1.BrandID = T2.BrandID WHERE T2.State = 'CA'
SELECT COUNT(*)  FROM customers  WHERE Gender = 'F' AND SubscribedToEmailList = 'TRUE';
SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear = (SELECT MAX(FirstBrewedYear) FROM rootbeerbrand);
SELECT `First`, `Last`  FROM `customers`  WHERE `FirstPurchaseDate` = (SELECT MIN(`FirstPurchaseDate`) FROM `customers`)  LIMIT 10;
SELECT COUNT(*)  FROM rootbeerbrand  WHERE Country = 'Australia';
SELECT COUNT(*)  FROM customers  WHERE First = 'Charles' AND City = 'Sacramento';
SELECT COUNT(*)  FROM transaction  WHERE CreditCardType = 'MasterCard'  AND TransactionDate BETWEEN '2014-01-01' AND '2014-12-31';
SELECT BrandName FROM rootbeerbrand JOIN rootbeerreview ON rootbeerbrand.BrandID = rootbeerreview.BrandID JOIN customers ON rootbeerreview.CustomerID = customers.CustomerID WHERE First = 'Jayne' AND Last = 'Collins' ORDER BY rootbeerreview.StarRating ASC LIMIT 1;
SELECT COUNT(*)  FROM rootbeer  JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID  JOIN location ON rootbeer.LocationID = location.LocationID  WHERE rootbeer.ContainerType = 'Bottle' AND rootbeerbrand.CaneSugar = 'FALSE' AND rootbeer.PurchaseDate <= '2015-12-31' AND location.LocationName = 'Sac State American River Courtyard';
SELECT BreweryName FROM rootbeer JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID WHERE PurchaseDate >= '2016-01-01' AND PurchaseDate <= '2016-12-31' GROUP BY BreweryName ORDER BY COUNT(BrandID) DESC LIMIT 1;
SELECT First, Last  FROM customers  JOIN rootbeerreview ON customers.CustomerID = rootbeerreview.CustomerID  JOIN rootbeer ON rootbeerreview.BrandID = rootbeer.BrandID  WHERE rootbeer.BrandName = 'River City' AND rootbeerreview.StarRating = 5;
SELECT COUNT(*)  FROM transaction  JOIN customers ON transaction.CustomerID = customers.CustomerID  WHERE customers.First = 'Tom'  AND customers.Last = 'Hanks'  AND TransactionDate >= '2015-01-01'  AND TransactionDate < '2016-12-31';
SELECT BrandName FROM rootbeerbrand JOIN rootbeerreview ON rootbeerbrand.BrandID = rootbeerreview.BrandID WHERE StarRating = 5;
SELECT COUNT(*)  FROM rootbeer  JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID  JOIN customers ON rootbeer.CustomerID = customers.CustomerID  WHERE rootbeerbrand.BrandName = 'Henry Weinhard''s' AND customers.First = 'Nicholas' AND customers.Last = 'Sparks';
SELECT      rb.BrandName  FROM      rootbeerbrand AS rb JOIN      rootbeer AS r ON rb.BrandID = r.BrandID WHERE      rb.FacebookPage IS NULL AND rb.Twitter IS NULL GROUP BY      rb.BrandName ORDER BY      COUNT(r.BrandID) DESC LIMIT 1;
SELECT      LocationID FROM      rootbeer WHERE      BrandID IN (         SELECT              BrandID          FROM              rootbeer         WHERE              BrandName = 'Dog n Suds'     )     AND LocationID IN (         SELECT              LocationID          FROM              location          WHERE              LocationName IN ('Sac State American River Courtyard', 'Sac State Union')     ) GROUP BY      LocationID ORDER BY      COUNT(BrandID) DESC LIMIT 1;
SELECT COUNT(*)  FROM rootbeer  JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID  WHERE rootbeer.ContainerType = 'Can'  AND rootbeerbrand.BrandName = 'A&W'  AND rootbeer.PurchaseDate BETWEEN '2016-01-01' AND '2016-12-31'
SELECT g.Latitude, g.Longitude  FROM location l  JOIN geolocation g ON l.LocationID = g.LocationID  WHERE l.LocationName = 'Sac State Union';
SELECT rb.BrandName  FROM rootbeerreview AS rr  JOIN rootbeerbrand AS rb ON rr.BrandID = rb.BrandID  WHERE rr.StarRating = 5  GROUP BY rr.BrandID  HAVING COUNT(rr.CustomerID) >= 5;
SELECT      rb.BrandName,     (SUM(CASE WHEN rb.PurchaseDate BETWEEN '2014-01-01' AND '2016-12-31' THEN 1 ELSE 0 END) * 1.0 / COUNT(T.TransactionID)) * 100 AS PurchasePercentage FROM      rootbeer rb JOIN      rootbeerbrand bb ON rb.BrandID = bb.BrandID JOIN      transaction T ON rb.RootBeerID = T.RootBeerID WHERE      bb.BreweryName = 'Dr Pepper Snapple Group' GROUP BY      rb.BrandName;
SELECT      rb.BrandID,     rb.BrandName,     COUNT(tr.CustomerID) AS NumberOfPurchases FROM      rootbeer rb JOIN      transaction tr ON rb.RootBeerID = tr.RootBeerID GROUP BY      rb.BrandID, rb.BrandName HAVING      (rb.CurrentRetailPrice - rb.WholesaleCost) = (         SELECT              MIN(retail_price - wholesale_cost)         FROM              rootbeer AS rb2         JOIN              transaction AS tr2 ON rb2.RootBeerID = tr2.RootBeerID         GROUP BY              rb2.BrandID     ) ORDER BY      NumberOfPurchases DESC LIMIT 1;
SELECT First, Last, PhoneNumber  FROM customers  WHERE Gender = 'M'  AND City = 'Fair Oaks'  AND SubscribedToEmailList = 'TRUE';
SELECT      (SUM(CASE WHEN ContainerType = 'Can' THEN 1 ELSE 0 END) / COUNT(RootBeerID)) * 1.0 as can_percentage FROM      rootbeer WHERE      PurchaseDate >= '2014-01-01' AND PurchaseDate <= '2014-12-31'
SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear >= 1996 AND FirstBrewedYear <= 2000 ORDER BY FirstBrewedYear DESC;
SELECT BrandID FROM rootbeerreview WHERE StarRating = 1 GROUP BY BrandID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT      (SUM(CASE WHEN credit_card_type = 'Visa' THEN 1 ELSE 0 END) * 1.0 / COUNT(TransactionID)) * 100 AS percentage_of_transactions_using_visa FROM      transaction WHERE      credit_card_type = 'Visa';
SELECT COUNT(DISTINCT r.BrandID) FROM rootbeer AS rb JOIN rootbeerbrand AS r ON rb.BrandID = r.BrandID WHERE rb.AvailableInCans = 'TRUE' AND r.CornSyrup = 'TRUE' AND r.ArtificialSweetener = 'TRUE';
SELECT      (SUM(CASE WHEN l.LocationName = 'Sac State American River Courtyard' THEN 1 ELSE 0 END) * 1.0 / COUNT(t.TransactionID)) * 100 AS PercentageSalesSacState FROM      transaction t JOIN      location l ON t.LocationID = l.LocationID;
SELECT      DIVIDE(COUNT(r.RootBeerID WHERE r.Caffeinated = 'TRUE'),             COUNT(DISTINCT t.TransactionDate)) FROM      rootbeer r JOIN      transaction t ON r.RootBeerID = t.RootBeerID;
SELECT      r.ContainerType,     (CASE          WHEN MAX(r.CurrentRetailPrice - r.WholesaleCost) = t.ProfitPerUnit THEN 'Most Profitable'         WHEN MIN(r.CurrentRetailPrice - r.WholesaleCost) = t.ProfitPerUnit THEN 'Least Profitable'         ELSE 'Unknown'     END) AS ProfitLevel FROM      rootbeer r JOIN      transaction t ON r.RootBeerID = t.RootBeerID GROUP BY      r.ContainerType ORDER BY      ProfitLevel DESC;
SELECT      AVG(T1.PurchasePrice) AS AvgCost FROM      transaction T1  JOIN      rootbeer T2 ON T1.RootBeerID = T2.RootBeerID  WHERE      T2.ContainerType = 'Bottle' AND T1.PurchasePrice > 2;
SELECT COUNT(*)  FROM rootbeer  JOIN location ON rootbeer.LocationID = location.LocationID  WHERE ContainerType = 'Bottle' AND latitude = 38.559615 AND longitude = -121.42243;
SELECT      (SUM(CASE WHEN rcr.StarRating > 3 THEN 1 ELSE 0 END) * 1.0 / COUNT(DISTINCT cr.CustomerID)) * 100 AS PercentageOfCustomersGivingThreeOrMoreStars FROM      beer_factory.customers cr JOIN      beer_factory.rootbeerreview rcr ON cr.CustomerID = rcr.CustomerID WHERE      cr.SubscribedToEmailList = 'FALSE'
SELECT rb.BrandName  FROM rootbeerreview AS rr  JOIN rootbeerbrand AS rb ON rr.BrandID = rb.BrandID  WHERE rr.StarRating = 5 AND rb.FirstBrewedYear = 2012  GROUP BY rr.BrandID  HAVING COUNT(*) = (     SELECT MAX(ct.count_value)      FROM (         SELECT COUNT(*) AS count_value          FROM rootbeerreview AS rr2          JOIN rootbeerbrand AS rb2 ON rr2.BrandID = rb2.BrandID          WHERE rr2.StarRating = 5 AND rb2.FirstBrewedYear = 2012          GROUP BY rr2.BrandID     ) AS ct );
SELECT COUNT(*)  FROM customers  JOIN transaction ON customers.CustomerID = transaction.CustomerID  JOIN rootbeer ON transaction.RootBeerID = rootbeer.RootBeerID  JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID  WHERE customers.Gender = 'F' AND rootbeerbrand.ArtificialSweetener = 'TRUE';
SELECT      (SUM(CASE WHEN r.BrandID IN (SELECT rb.BrandID FROM rootbeerbrand rb WHERE rb.CaneSugar = 'TRUE') THEN 1 ELSE 0 END) -      SUM(CASE WHEN r.BrandID IN (SELECT rb.BrandID FROM rootbeerbrand rb WHERE rb.CornSyrup = 'TRUE') THEN 1 ELSE 0 END) AS SugarDifference FROM      rootbeer r
SELECT      b.BreweryName FROM      rootbeer AS rb JOIN      rootbeerbrand AS b ON rb.BrandID = b.BrandID JOIN      transaction AS t ON rb.RootBeerID = t.RootBeerID WHERE      t.TransactionDate BETWEEN '2015-01-01' AND '2015-12-31' GROUP BY      b.BrandID, b.BreweryName ORDER BY      COUNT(rb.BrandID) DESC LIMIT 1;
SELECT      (COUNT(CASE          WHEN c.Gender = 'M' AND r.BrandID = b.BrandID               AND b.BrandName = 'Dominion'               AND l.City = 'Sacramento'               AND tr.TransactionDate BETWEEN '2013-01-01' AND '2014-01-01'              THEN 1 ELSE 0 END)       / COUNT(CASE          WHEN c.Gender = 'M' AND l.City = 'Sacramento'              AND tr.TransactionDate BETWEEN '2013-01-01' AND '2014-01-01'          THEN 1 ELSE 0 END)) * 1.0 AS Percentage FROM      customers AS c JOIN      transactions AS tr ON c.CustomerID = tr.CustomerID JOIN      rootbeer AS rb ON tr.RootBeerID = rb.RootBeerID JOIN      rootbeerbrand AS b ON rb.BrandID = b.BrandID JOIN      location AS l ON tr.LocationID = l.LocationID   WHERE      c.Gender = 'M'      AND l.City = 'Sacramento';
SELECT      (SUM(CASE WHEN tb2.Honey = 'TRUE' THEN tb1.Quantity ELSE 0 END) * 1.0 / COUNT(DISTINCT CASE WHEN tb2.Honey = 'TRUE' THEN tb1.TransactionDate END) -      SUM(CASE WHEN tb2.Honey = 'FALSE' THEN tb1.Quantity ELSE 0 END) * 1.0 / COUNT(DISTINCT CASE WHEN tb2.Honey = 'FALSE' THEN tb1.TransactionDate END)) AS DifferenceInAverageSalesPerDay FROM      (SELECT T1.TransactionID, T1.Quantity FROM transaction AS T1 JOIN rootbeer AS T2 ON T1.RootBeerID = T2.RootBeerID JOIN rootbeerbrand AS T3 ON T2.BrandID = T3.BrandID) AS tb1 JOIN      rootbeerbrand AS tb2 ON tb1.BrandID = tb2.BrandID
SELECT First, Last, Email  FROM customers  JOIN transaction ON customers.CustomerID = transaction.CustomerID  WHERE CreditCardType = 'American Express' AND LocationID IN (SELECT LocationID FROM location WHERE LocationName = 'Sac State Union');
SELECT      rb.BrandName  FROM      rootbeerreview AS rr  JOIN      rootbeer AS rb ON rr.BrandID = rb.BrandID  WHERE      rr.ReviewDate LIKE '2014-09%' AND      rr.StarRating = (SELECT MAX(StarRating) FROM rootbeerreview WHERE ReviewDate LIKE '2014-09%')
SELECT g.Latitude, g.Longitude  FROM transaction t  JOIN customers c ON t.CustomerID = c.CustomerID  JOIN geolocation g ON t.LocationID = g.LocationID  WHERE c.CreditCardType = 'American Express';
SELECT COUNT(*)  FROM customers  JOIN transaction ON customers.CustomerID = transaction.CustomerID  WHERE customers.City = 'Folsom' AND transaction.CreditCardType = 'Visa';
SELECT DISTINCT c.City  FROM customers c  JOIN rootbeerreview rr ON c.CustomerID = rr.CustomerID  WHERE rr.StarRating = 5 AND rr.ReviewDate LIKE '2012-11%'
SELECT r.BrandName  FROM rootbeer AS rb  JOIN rootbeerbrand AS r ON rb.BrandID = r.BrandID  JOIN transaction AS t ON rb.RootBeerID = t.RootBeerID  JOIN customers AS c ON t.CustomerID = c.CustomerID  WHERE c.First = 'Peg' AND c.Last = 'Winchester';
SELECT BrandName FROM rootbeerbrand JOIN rootbeerreview ON rootbeerbrand.BrandID = rootbeerreview.BrandID WHERE StarRating = 1 GROUP BY BrandName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.CreditCardType  FROM rootbeer AS T1  JOIN transaction AS T2 ON T1.RootBeerID = T2.RootBeerID  JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID  WHERE T3.Alcoholic = 'FALSE'  GROUP BY T2.CreditCardType  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T1.First, T1.Last  FROM customers AS T1  JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T2.StarRating = 5;
SELECT g.Latitude  FROM geolocation g  JOIN location l ON g.LocationID = l.LocationID  JOIN rootbeer r ON l.LocationID = r.LocationID   JOIN rootbeerbrand b ON r.BrandID = b.BrandID  WHERE b.BrandName = 'Thomas Kemper'  GROUP BY g.Latitude  ORDER BY COUNT(g.Latitude) DESC  LIMIT 1;
SELECT StarRating FROM rootbeerbrand rb JOIN rootbeerreview rr ON rb.BrandID = rr.BrandID WHERE rb.CornSyrup = 'TRUE' GROUP BY StarRating ORDER BY COUNT(*) DESC LIMIT 1;
SELECT g.Latitude, g.Longitude  FROM geolocation g JOIN location l ON g.LocationID = l.LocationID WHERE l.ZipCode = '95819';
SELECT rb.BrandName  FROM rootbeer rb  JOIN location l ON rb.LocationID = l.LocationID  JOIN geolocation g ON l.LocationID = g.LocationID  WHERE g.Latitude = 38.566129 AND g.Longitude = -121.426432;
SELECT      AVG(DIVIDE(SUM(SUBTRACT(r.currentRetailPrice, r.wholesaleCost)), COUNT(CASE WHEN r.containerType = 'Can' THEN 1 ELSE NULL END))) as avgUnitProfit FROM      rootbeer r JOIN      rootbeerbrand rb ON r.brandID = rb.BrandID WHERE      rb.ContainerType = 'Can' AND rb.AvailableInCans = 'Yes';
SELECT      (COUNT(CASE WHEN rcr.CustomerID THEN 1 END) * 100 /       COALESCE((SELECT COUNT(*) FROM transaction WHERE CreditCardType = 'Discover'), 1)) as Discover_3_star_percentage FROM      rootbeerreview rcr JOIN      transaction tr ON rcr.CustomerID = tr.CustomerID AND tr.CreditCardType = 'Discover' WHERE      rcr.StarRating = 3;
SELECT DISTINCT r.BrandID FROM rootbeerreview r WHERE r.StarRating > 3;
SELECT COUNT(DISTINCT rt.BrandID)  FROM rootbeer AS rb  JOIN rootbeer AS rt ON rb.RootBeerID = rt.RootBeerID  JOIN rootbeerbrand AS rbm ON rbm.BrandID = rt.BrandID  WHERE rt.ContainerType = 'Bottle'  AND rb.PurchaseDate BETWEEN '2015-04-23' AND '2015-10-26';
SELECT `First`, `Last`  FROM customers  JOIN rootbeerreview ON customers.CustomerID = rootbeerreview.CustomerID  WHERE rootbeerreview.StarRating = 5 AND rootbeerreview.Review = 'The quintessential dessert root beer. No ice cream required.';
SELECT      c.Email,     c.PhoneNumber FROM      customers c JOIN      rootbeerreview rr ON c.CustomerID = rr.CustomerID WHERE      c.City = 'Sacramento'     AND rr.StarRating > 3     AND rr.ReviewDate LIKE '2014%'
SELECT COUNT(*)  FROM customers  WHERE Gender = 'F'  AND SubscribedToEmailList = 'TRUE'  AND City = 'Sacramento'  AND EXISTS (     SELECT * FROM rootbeerreview      WHERE customers.CustomerID = rootbeerreview.CustomerID      AND StarRating = 4      AND ReviewDate BETWEEN '2016-01-03' AND '2016-10-26' )
SELECT BreweryName, BrandName  FROM rootbeerbrand  JOIN rootbeer ON rootbeerbrand.BrandID = rootbeer.BrandID  WHERE rootbeer.ContainerType = 'Can' AND rootbeer.PurchaseDate < '2015-06-06';
SELECT rb.BrandName  FROM rootbeer rb  JOIN rootbeerbrand br ON rb.BrandID = br.BrandID  WHERE rb.ContainerType = 'Bottle' AND br.FirstBrewedYear < 1930;
SELECT COUNT(*)  FROM transaction  JOIN customers ON transaction.CustomerID = customers.CustomerID  WHERE customers.First = 'Anna'  AND customers.Last = 'Himes'  AND transaction.CreditCardType = 'MasterCard'  AND transaction.TransactionDate BETWEEN '2014-12-25' AND '2016-05-20';
SELECT AVG(T2.StarRating)  FROM rootbeerreview AS T2  JOIN customers AS T1 ON T1.CustomerID = T2.CustomerID  WHERE T1.Gender = 'F'  AND T2.BrandID = 10018  AND T2.ReviewDate BETWEEN '2015-01-25' AND '2015-03-10';
SELECT rb.BrandName  FROM rootbeerreview rr  JOIN rootbeer rb ON rr.BrandID = rb.BrandID  WHERE rr.CustomerID = 331115 AND rr.StarRating = 1 AND rr.Review = 'Yuk, more like licorice soda';
SELECT SUM(T.TransactionPrice) AS TotalPurchases FROM transaction AS T JOIN location AS L ON T.LocationID = L.LocationID WHERE L.LocationName = 'Sac State American River Courtyard' AND T.CreditCardType = 'Visa' AND T.TransactionDate BETWEEN '2014-06-03' AND '2015-11-27';
SELECT COUNT(*)  FROM transaction  JOIN location ON transaction.LocationID = location.LocationID  WHERE location.LocationName = 'Sac State Union' AND transaction.CreditCardType = 'American Express' AND transaction.TransactionDate LIKE '2014%';
SELECT g.Latitude, g.Longitude  FROM geolocation g JOIN location l ON g.LocationID = l.LocationID  WHERE l.LocationName = 'Sac State Union';
SELECT Review  FROM rootbeerreview  JOIN rootbeer ON rootbeerreview.BrandID = rootbeer.BrandID  JOIN customers ON rootbeerreview.CustomerID = customers.CustomerID  JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID WHERE rootbeerbrand.BrandName = 'Bulldog' AND rootbeerreview.ReviewDate = '2013-07-26';
SELECT      rb.BrandName,     (rb.CurrentRetailPrice - rb.WholesaleCost) AS UnitProfitAvailableToWholesalers FROM      rootbeerreview rr JOIN      rootbeer rb ON rr.BrandID = rb.BrandID WHERE      rr.StarRating = 5 AND rr.ReviewDate LIKE '2013%'
SELECT      c.First,      c.Last,     TIMESTAMPDIFF(YEAR, c.FirstPurchaseDate, r.ReviewDate) AS years_since_first_purchase,     TIMESTAMPDIFF(MONTH, c.FirstPurchaseDate, r.ReviewDate) AS months_since_first_purchase,     TIMESTAMPDIFF(DAY, c.FirstPurchaseDate, r.ReviewDate) AS days_since_first_purchase FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID WHERE c.FirstPurchaseDate IS NOT NULL AND r.ReviewDate IS NOT NULL LIMIT 1;
SELECT `CreditCardType` FROM `transaction` JOIN `customers` ON `transaction.CustomerID` = `customers.CustomerID` WHERE `First` = 'Kenneth' AND `Last` = 'Walton';
SELECT      rt.ContainerType,     rb.BrandName,     rr.StarRating FROM      rootbeer rb JOIN      rootbeer rootbeer rt ON rb.BrandID = rt.BrandID JOIN      rootbeerreview rr ON rb.BrandID = rr.BrandID WHERE      rt.RootBeerID = 10054;
SELECT r.RootBeerID, rb.BrandName FROM rootbeer AS r JOIN rootbeerbrand AS rb ON r.BrandID = rb.BrandID JOIN customers AS c1 ON r.CustomerID = c1.CustomerID JOIN customers AS c2 ON r.CustomerID = c2.CustomerID WHERE (c1.First = 'Tim' AND c1.Last = 'Ocel') OR (c2.First = 'Dawn' AND c2.Last = 'Childress');
SELECT RootBeerID  FROM rootbeer  JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID  WHERE BrandName IN('Bulldog', 'Bundaberg', 'Dad''s', 'Dog n Suds', 'Virgil''s');
SELECT COUNT(*)  FROM rootbeer  JOIN customers ON customers.CustomerID = rootbeer.CustomerID  WHERE customers.First = 'Jim' AND customers.Last = 'Breech' AND rootbeer.ContainerType = 'Bottle';
SELECT COUNT(*)  FROM transaction  JOIN rootbeer ON transaction.RootBeerID = rootbeer.RootBeerID  JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID  JOIN location ON rootbeer.LocationID = location.LocationID  WHERE location.State = 'CA';
SELECT AVG(T2.StarRating)  FROM customers AS T1  JOIN rootbeerreview AS T2  ON T1.CustomerID = T2.CustomerID  WHERE T1.SubscribedToEmailList = 'TRUE';
SELECT      (SELECT COUNT(*)       FROM rootbeer       WHERE ContainerType = 'Bottle' AND State = 'LA') -      (SELECT COUNT(*)       FROM rootbeer       WHERE ContainerType = 'Bottle' AND State = 'MO') AS AmountDifference FROM transactions;
SELECT      (SUM(CASE WHEN t.LocationID IN (SELECT l.LocationID FROM location l WHERE l.LocationName = 'Sac State American River Courtyard') THEN 1 ELSE 0 END)       / SUM(CASE WHEN t.LocationID IN (SELECT l.LocationID FROM location l WHERE l.LocationName = 'Sac State Union') THEN 1 ELSE 0 END)) * 100 AS TransactionRatio FROM      transaction t;
SELECT T1.CustomerID, T2.CreditCardType  FROM transaction AS T1  JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.PurchasePrice = (SELECT MAX(PurchasePrice) FROM transaction)  LIMIT 10;
SELECT      rb.BrandName,     SUM(tr.PurchasePrice) AS TotalSold FROM      rootbeerbrand rb JOIN      rootbeer r ON rb.BrandID = r.BrandID JOIN      transaction tr ON r.RootBeerID = tr.RootBeerID WHERE      rb.Caffeinated = 'FALSE' AND rb.CaneSugar = 'FALSE' GROUP BY      rb.BrandName;
SELECT BrandName FROM rootbeer JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID GROUP BY BrandName ORDER BY COUNT(BrandID) ASC LIMIT 1;
SELECT      r.BrandID,     MAX(COUNT(r.BrandID)) AS BestSellerCount,     AVG(rr.StarRating) AS AverageStarRating FROM      rootbeerreview rr JOIN      rootbeer r ON rr.BrandID = r.BrandID GROUP BY      r.BrandID ORDER BY      BestSellerCount DESC LIMIT 1;
SELECT      ( (SUM(CASE WHEN brandName = 'River City' THEN purchasePrice ELSE 0 END) -         SUM(CASE WHEN brandName = 'Frostie' THEN purchasePrice ELSE 0 END) ) /      SUM(CASE WHEN brandName = 'Frostie' THEN purchasePrice ELSE 0 END) ) * 100 AS percentageDifference FROM      rootbeer JOIN      rootbeerreview ON rootbeer.BrandID = rootbeerreview.BrandID JOIN      customers ON rootbeerreview.CustomerID = customers.CustomerID JOIN      transaction ON rootbeer.TransactionID = transaction.TransactionID JOIN      rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID WHERE      rootbeerbrand.BrandName IN ('River City', 'Frostie');
SELECT DISTINCT City FROM location WHERE State = 'CA';
SELECT      (COUNT(CASE WHEN c.Gender = 'F' THEN 1 END)       / COUNT(CASE WHEN c.SubscribedToEmailList = 'TRUE' THEN 1 END)) * 1.0 AS FemaleCustomerPercentage FROM      customers c;
SELECT T1.CreditCardType  FROM customers AS T1 JOIN transaction AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Dick' AND T1.Last = 'Ruthven'
SELECT COUNT(*)  FROM transaction  JOIN location ON transaction.LocationID = location.LocationID  WHERE location.LocationName = 'Sac State Union';
SELECT Review.Rating  FROM rootbeerreview AS review  JOIN rootbeerbrand AS brand ON review.BrandID = brand.BrandID  WHERE brand.BrandName = 'Frostie' AND Review.CustomerID = (SELECT CustomerID FROM customers WHERE First = 'Urijah' AND Last = 'Faber');
SELECT rb.BrandName  FROM rootbeerreview AS rr  JOIN rootbeer AS rb ON rr.BrandID = rb.BrandID  WHERE rr.Review = 'Too Spicy!'  GROUP BY rr.BrandID  ORDER BY AVG(rr.StarRating) ASC  LIMIT 1;
SELECT COUNT(*)  FROM transaction  JOIN location ON transaction.LocationID = location.LocationID  WHERE location.LocationName = 'Sac State American River Courtyard'  AND transaction.CreditCardType = 'MasterCard';
SELECT rb.BrandName  FROM rootbeerreview AS rr  JOIN rootbeerbrand AS rb ON rr.BrandID = rb.BrandID  WHERE rr.ReviewDate LIKE '2012%' AND rb.CaneSugar = 'TRUE' AND rb.Honey = 'TRUE'  ORDER BY rr.StarRating ASC  LIMIT 1;
SELECT g.Latitude, g.Longitude  FROM transaction t  JOIN location l ON t.LocationID = l.LocationID  JOIN geolocation g ON l.LocationID = g.LocationID  JOIN customers c ON t.CustomerID = c.CustomerID  WHERE c.First = 'Tommy' AND c.Last = 'Kono' AND YEAR(t.TransactionDate) = 2014;
SELECT `Email`  FROM `customers` JOIN `transaction` ON `customers.CustomerID` = `transaction.CustomerID` WHERE `transaction.TransactionID` = 100016;
SELECT COUNT(*)  FROM transaction  JOIN rootbeer ON transaction.RootBeerID = rootbeer.RootBeerID  JOIN customers ON transaction.CustomerID = customers.CustomerID  WHERE rootbeer.ContainerType = 'Bottle' AND customers.CreditCardType = 'American Express';
SELECT L.LocationName  FROM location AS L JOIN rootbeer AS R ON L.LocationID = R.LocationID WHERE R.ContainerType = 'Bottle' GROUP BY L.LocationID, L.LocationName ORDER BY COUNT(R.RootBeerID) DESC LIMIT 1;
SELECT      rb.BrandName  FROM      rootbeerreview AS rr  JOIN      rootbeer AS rb ON rr.BrandID = rb.BrandID  WHERE      rr.StarRating = 5  GROUP BY      rb.BrandName  ORDER BY      COUNT(rr.BrandID) DESC  LIMIT 3;
SELECT g.Latitude, g.Longitude  FROM geolocation g JOIN location l ON g.LocationID = l.LocationID  WHERE l.LocationName = 'Sac State American River Courtyard';
SELECT COUNT(*)  FROM Sales  WHERE CustomerID = 80;
SELECT SUM(Quantity) AS TotalQuantity  FROM Sales  WHERE SalesID BETWEEN 1 AND 10;
SELECT AVG(Quantity)  FROM Sales  WHERE SalesID BETWEEN 20 AND 30;
SELECT ProductID FROM Sales WHERE Quantity = (SELECT MAX(Quantity) FROM Sales)
SELECT COUNT(*)  FROM Products  WHERE Price = (SELECT MIN(Price) FROM Products);
SELECT Products.Name FROM Products WHERE Products.Price = 0;
SELECT p.Name FROM Products p WHERE p.ProductID BETWEEN 1 AND 10;
SELECT p.Name FROM Products p JOIN Sales s ON p.ProductID = s.ProductID WHERE s.Quantity = (SELECT MIN(Quantity) FROM Sales);
SELECT COUNT(DISTINCT s.CustomerID) FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Hex Nut 9';
SELECT COUNT(*)  FROM Sales  JOIN Products ON Sales.ProductID = Products.ProductID  WHERE Products.Name = 'Flat Washer 8';
SELECT Products.Name FROM Sales JOIN Products ON Sales.ProductID = Products.ProductID WHERE Sales.SalesPersonID = 10;
SELECT Customers.FirstName FROM Customers JOIN Sales ON Customers.CustomerID = Sales.CustomerID JOIN Products ON Sales.ProductID = Products.ProductID WHERE Products.ProductID = 1;
SELECT Customers.LastName FROM Sales JOIN Customers ON Sales.CustomerID = Customers.CustomerID WHERE Sales.SalesID = 178;
SELECT DISTINCT p.ProductID FROM Products p JOIN Sales s ON p.ProductID = s.ProductID JOIN Customers c ON s.CustomerID = c.CustomerID WHERE c.FirstName = 'Abby';
SELECT ProductID FROM Sales WHERE SalesPersonID = (SELECT EmployeeID FROM Employees WHERE LastName = 'Meander');
SELECT T3.LastName  FROM Sales AS T1  JOIN Employees AS T3 ON T1.SalesPersonID = T3.EmployeeID  WHERE T1.SalesID = 100;
SELECT e.FirstName FROM Employees e JOIN Sales s ON e.EmployeeID = s.SalesPersonID JOIN Customers c ON c.CustomerID = s.CustomerID WHERE c.FirstName = 'Abigail';
SELECT COUNT(*)  FROM Sales s  JOIN Products p ON s.ProductID = p.ProductID  WHERE s.CustomerID = 11782 AND p.Price = 0;
SELECT Customers.FirstName, Customers.MiddleInitial, Customers.LastName  FROM Customers JOIN Sales ON Customers.CustomerID = Sales.CustomerID WHERE Sales.SalesPersonID = 5;
SELECT SalesID FROM Sales WHERE SalesPersonID IN (     SELECT EmployeeID     FROM Employees     WHERE FirstName LIKE 's%' );
SELECT MAX(T3.Price)  FROM Sales AS T1  JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID  JOIN Products AS T3 ON T3.ProductID = T1.ProductID  WHERE T2.CustomerID BETWEEN 1 AND 100
SELECT Customers.FirstName, Customers.LastName, SUM(Sales.Quantity) as TotalQuantity FROM Customers JOIN Sales ON Customers.CustomerID = Sales.CustomerID WHERE Customers.LastName = 'Valdez' GROUP BY Customers.CustomerID, Customers.FirstName, Customers.LastName ORDER BY TotalQuantity DESC LIMIT 1;
SELECT SUM(Sales.SalesID)  FROM Sales  JOIN Employees ON Sales.SalesPersonID = Employees.EmployeeID  WHERE Employees.FirstName IN ('Morningstar', 'Heather', 'Dean');
SELECT COUNT(*)  FROM Sales  JOIN Customers ON Sales.CustomerID = Customers.CustomerID  WHERE Sales.ProductID = 498 AND Customers.FirstName = 'Alex';
SELECT SUM(P.Price * S.Quantity) AS TotalPrice FROM Customers C JOIN Sales S ON C.CustomerID = S.CustomerID JOIN Products P ON S.ProductID = P.ProductID WHERE C.FirstName = 'Adam'
SELECT SUM(P.Price * S.Quantity) AS TotalPrice FROM Products P JOIN Sales S ON P.ProductID = S.ProductID WHERE P.ProductID BETWEEN 400 AND 500;
SELECT SUM(Quantity) AS TotalQuantity  FROM Sales  JOIN Products ON Sales.ProductID = Products.ProductID  WHERE Products.Name LIKE 'C%';
SELECT SUM(T3.Quantity) AS TotalQuantity FROM Customers AS T1 JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID JOIN Products AS T3 ON T3.ProductID = T2.ProductID WHERE T1.FirstName = 'Adrian' AND T1.LastName = 'Adrian';
SELECT ProductID FROM Products ORDER BY Price DESC LIMIT 5;
SELECT COUNT(*)  FROM Products  WHERE Price = 0;
SELECT Products.Name FROM Sales JOIN Products ON Sales.ProductID = Products.ProductID WHERE Sales.Quantity > 950;
SELECT e.FirstName, e.MiddleInitial, e.LastName  FROM Employees e  JOIN Sales s ON e.EmployeeID = s.SalesPersonID  WHERE s.Quantity = 1000;
SELECT      Products.Name,      Sales.Quantity  FROM      Sales  JOIN      Products ON Sales.ProductID = Products.ProductID  WHERE      Sales.SalesID BETWEEN 1 AND 10;
SELECT SUM(P.Price * S.Quantity) AS TotalSalesAmount FROM Sales S JOIN Products P ON S.ProductID = P.ProductID WHERE P.Name = 'Reflector';
SELECT      p.Name FROM      Products p JOIN      Sales s ON p.ProductID = s.ProductID WHERE      p.Name = 'HL Mountain Frame - 42' GROUP BY      p.Color ORDER BY      SUM(s.Quantity) DESC LIMIT 1;
SELECT      (SELECT Price FROM Products WHERE Name = 'HL Mountain Frame - Black, 42') -     (SELECT Price FROM Products WHERE Name = 'LL Mountain Frame - Black, 42') AS PriceDifference;
SELECT COUNT(*)  FROM Sales  JOIN Employees ON Sales.SalesPersonID = Employees.EmployeeID  WHERE Employees.FirstName = 'Michel' AND Employees.MiddleInitial = 'E' AND Employees.LastName = 'DeFrance';
SELECT      (COUNT(T3.CustomerID) / COUNT(T2.EmployeeID)) AS average_customers_per_sales_person FROM      Sales AS T1 JOIN      Employees AS T2 ON T1.SalesPersonID = T2.EmployeeID JOIN      Customers AS T3 ON T1.CustomerID = T3.CustomerID;
SELECT COUNT(*)  FROM Customers  JOIN Sales ON Customers.CustomerID = Sales.CustomerID  JOIN Products ON Sales.ProductID = Products.ProductID  WHERE Customers.FirstName = 'Innes' AND Customers.LastName = 'del Castillo' AND Products.Name = 'Short-Sleeve Classic Jersey, L';
SELECT e.FirstName, e.MiddleInitial, e.LastName  FROM Employees e  JOIN Sales s ON e.EmployeeID = s.SalesPersonID  JOIN Customers c ON c.CustomerID = s.CustomerID  JOIN Products p ON p.ProductID = s.ProductID  WHERE c.FirstName = 'Elizabeth' AND c.MiddleInitial = 'A.' AND c.LastName = 'White' AND p.Name = 'Road-250 Black' AND p.Price = (SELECT Price FROM Products WHERE Name = 'Road-250 Black') AND s.Quantity = 48;
SELECT COUNT(*)  FROM Sales  JOIN Products ON Sales.ProductID = Products.ProductID  WHERE Products.Name = 'Headlights - Weatherproof';
SELECT SUM(T3.Quantity * T3.Price) AS Revenue FROM Products AS T3 JOIN Sales AS T2 ON T3.ProductID = T2.ProductID JOIN Customers AS T1 ON T2.CustomerID = T1.CustomerID WHERE T3.Name = 'HL Road Frame - Red, 56';
SELECT COUNT(*)  FROM Sales  JOIN Customers ON Sales.CustomerID = Customers.CustomerID  WHERE Customers.FirstName = 'Joe'  AND Customers.MiddleInitial = 'L'  AND Customers.LastName = 'Lopez';
SELECT Customers.FirstName, Customers.MiddleInitial, Customers.LastName FROM Customers JOIN Sales ON Customers.CustomerID = Sales.CustomerID JOIN Products ON Sales.ProductID = Products.ProductID WHERE Products.Name = 'Touring Rim';
SELECT      s.SalesPersonID,      COUNT(DISTINCT c.CustomerID) AS NumberOfCustomers FROM      Sales s JOIN      Customers c ON s.CustomerID = c.CustomerID GROUP BY      s.SalesPersonID;
SELECT COUNT(DISTINCT CustomerID)  FROM Sales;
SELECT FirstName, MiddleInitial, LastName  FROM Employees  WHERE EmployeeID = 7;
SELECT      p.Name AS ProductName,     p.Price AS ProductPrice FROM      Products p WHERE      p.Price > 0 ORDER BY      p.Price DESC, p.Price ASC LIMIT 1 AS MostExpensive, ORDER BY      p.Price DESC, p.Price ASC LIMIT 1 OFFSET 1 AS LeastExpensive;
SELECT      (SUM(CASE WHEN c.FirstName = 'Albert' AND c.MiddleInitial = 'I' AND c.LastName = 'Ringer' THEN s.Quantity ELSE 0 END) * 1.0 / COUNT(s.SalesID)) * 100 AS AlbertRingerSalesPercentage FROM      Sales s JOIN      Products p ON s.ProductID = p.ProductID JOIN      Customers c ON s.CustomerID = c.CustomerID WHERE      p.Name = 'ML Bottom Bracket';
SELECT COUNT(*)  FROM Customers  WHERE FirstName = 'Abigail';
SELECT SUM(T3.Quantity)  FROM Products AS T3  JOIN Sales AS T4 ON T3.ProductID = T4.ProductID  WHERE T3.Name = 'Blade';
SELECT e.FirstName, e.LastName  FROM Employees e  JOIN Sales s ON e.EmployeeID = s.SalesPersonID  GROUP BY e.EmployeeID, e.FirstName, e.LastName  ORDER BY SUM(s.Quantity) DESC  LIMIT 1;
SELECT c.FirstName, c.LastName  FROM Customers c  JOIN Sales s ON c.CustomerID = s.CustomerID  GROUP BY c.CustomerID, c.FirstName, c.LastName  ORDER BY SUM(s.Quantity) DESC  LIMIT 1;
SELECT p.Name FROM Products p JOIN Sales s ON p.ProductID = s.ProductID WHERE s.SalesPersonID = 20 GROUP BY p.ProductID ORDER BY SUM(s.Quantity) DESC LIMIT 1;
SELECT e.FirstName FROM Employees e JOIN Sales s ON e.EmployeeID = s.SalesPersonID WHERE s.Quantity > 500;
SELECT Customers.FirstName FROM Customers JOIN Sales ON Customers.CustomerID = Sales.CustomerID JOIN Products ON Sales.ProductID = Products.ProductID WHERE Sales.SalesPersonID = 1;
SELECT SUM(s.Quantity) AS TotalTradingQuantity FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID JOIN Employees e ON s.SalesPersonID = e.EmployeeID WHERE e.FirstName = 'Abraham' AND c.FirstName = 'Aaron' AND c.LastName = 'Alexander';
SELECT Customers.FirstName, Customers.LastName FROM Customers JOIN Sales ON Customers.CustomerID = Sales.CustomerID JOIN Products ON Sales.ProductID = Products.ProductID WHERE Sales.Quantity > 600;
SELECT      c.FirstName,      c.LastName  FROM      Customers c  JOIN      Sales s ON c.CustomerID = s.CustomerID  JOIN      Products p ON s.ProductID = p.ProductID  WHERE      c.FirstName = 'Cameron'  GROUP BY      c.CustomerID,      c.FirstName,      c.LastName  ORDER BY      SUM(s.Quantity) DESC  LIMIT 1;
SELECT s.SalesID FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Hex Nut' AND p.Price > 100;
SELECT DISTINCT Customers.CustomerID FROM Customers JOIN Sales ON Customers.CustomerID = Sales.CustomerID JOIN Products ON Sales.ProductID = Products.ProductID WHERE Products.Price BETWEEN 1000 AND 2000;
SELECT SUM(Sales.Quantity)  FROM Sales  JOIN Products ON Sales.ProductID = Products.ProductID  WHERE Products.Price = 0;
SELECT      (SUM(CASE WHEN Products.Price = 0 THEN Sales.Quantity ELSE 0 END) /       SUM(Sales.Quantity)) * 100 AS GiftProductPercentage FROM      Sales JOIN      Products ON Sales.ProductID = Products.ProductID;
SELECT      (SUM(CASE WHEN Products.Name = 'Blade' THEN Sales.Quantity ELSE 0 END) /      SUM(Sales.Quantity)) * 100 AS PercentageOfSoldBlades FROM      Sales JOIN      Products ON Sales.ProductID = Products.ProductID;
SELECT COUNT(*)  FROM Employees  WHERE LastName = 'Ringer';
SELECT COUNT(*)  FROM Products  WHERE ProductID < 15 AND Price <= 10;
SELECT Products.Name FROM Products JOIN Sales ON Products.ProductID = Sales.ProductID JOIN Customers ON Sales.CustomerID = Customers.CustomerID WHERE Customers.FirstName = 'Aaron' AND Customers.LastName = 'Alexander';
SELECT ProductID, Name  FROM Products  WHERE Price = (SELECT MAX(Price) FROM Products)  AND EXISTS (     SELECT 1      FROM Sales s      WHERE s.ProductID = Products.ProductID      AND Quantity BETWEEN 400 AND 500 );
SELECT Customers.FirstName, Customers.LastName, SUM(Sales.Quantity) as TotalQuantity FROM Customers JOIN Sales ON Customers.CustomerID = Sales.CustomerID WHERE Customers.FirstName = 'Kate' GROUP BY Customers.CustomerID, Customers.FirstName, Customers.LastName ORDER BY TotalQuantity DESC LIMIT 1;
SELECT Customers.CustomerID, Sales.SalesID FROM Sales JOIN Products ON Sales.ProductID = Products.ProductID WHERE Products.Price BETWEEN 100 AND 150 AND Sales.Quantity < 25;
SELECT      s.Quantity * p.Price AS TotalCost FROM     Customers c JOIN     Sales s ON c.CustomerID = s.CustomerID JOIN     Products p ON s.ProductID = p.ProductID WHERE     c.FirstName = 'Abigail' AND c.LastName = 'Henderson';
SELECT COUNT(*)  FROM Sales  JOIN Products ON Sales.ProductID = Products.ProductID  WHERE Sales.Quantity = 60 AND Products.Price <= 500;
SELECT COUNT(*)  FROM Customers  JOIN Sales ON Customers.CustomerID = Sales.CustomerID  WHERE Customers.FirstName = 'Erica' AND Sales.Quantity < 200;
SELECT p.Name FROM Products p JOIN Sales s ON p.ProductID = s.ProductID JOIN Customers c ON s.CustomerID = c.CustomerID WHERE c.FirstName = 'Kathryn' AND c.LastName = 'Ashe' GROUP BY p.ProductID HAVING SUM(s.Quantity) = (SELECT MAX(sum_quantity) FROM                           (SELECT SUM(Quantity) AS sum_quantity                            FROM Sales s2                            JOIN Products p2 ON s2.ProductID = p2.ProductID                            WHERE s2.CustomerID IN                                  (SELECT CustomerID FROM Customers c2                                   WHERE c2.FirstName = 'Kathryn' AND c2.LastName = 'Ashe')                            GROUP BY p2.ProductID) temp)
SELECT Products.Price, Sales.Quantity FROM Products JOIN Sales ON Products.ProductID = Sales.ProductID WHERE Products.Name = 'Seat Tube';
SELECT Products.Name, Products.Price  FROM Products  JOIN Sales ON Products.ProductID = Sales.ProductID  JOIN Customers ON Sales.CustomerID = Customers.CustomerID  WHERE Customers.FirstName = 'Erica' AND Customers.LastName = 'Xu';
SELECT SalesID FROM Sales JOIN Products ON Sales.ProductID = Products.ProductID WHERE Products.Name = 'External Lock Washer 7' AND Sales.Quantity = 590;
SELECT Customers.FirstName, Customers.LastName  FROM Customers  JOIN Sales ON Customers.CustomerID = Sales.CustomerID  WHERE Sales.SalesID BETWEEN 30 AND 40  GROUP BY Customers.CustomerID  HAVING SUM(Sales.Quantity) = 403;
SELECT Customers.CustomerID, LastName  FROM Customers  JOIN Sales ON Customers.CustomerID = Sales.CustomerID  WHERE Sales.Quantity > (SELECT AVG(Quantity) * 0.9 FROM Sales);
SELECT      (SUM(CASE WHEN Price BETWEEN 200 AND 300 THEN 1 ELSE 0 END) * 1.0 / COUNT(ProductID)) * 100 AS Percentage FROM      Sales s JOIN      Products p ON s.ProductID = p.ProductID WHERE      s.SalesID BETWEEN 1 AND 200;
SELECT Name FROM Products WHERE Price = (SELECT MAX(Price) FROM Products);
SELECT COUNT(*)  FROM Customers  WHERE LastName = 'Madison';
SELECT COUNT(DISTINCT Name)  FROM Products  WHERE Name LIKE '%HL Touring Frame%'
SELECT COUNT(*)  FROM Customers  WHERE LastName = (SELECT LAST_NAME FROM (SELECT LastName, MAX(COUNT(LastName)) AS COUNT FROM Customers GROUP BY LastName) AS T1);
SELECT COUNT(*)  FROM Sales s  JOIN Products p ON s.ProductID = p.ProductID  WHERE p.Price = 0;
SELECT e.FirstName, e.MiddleInitial, e.LastName  FROM Employees e  JOIN Sales s ON e.EmployeeID = s.SalesPersonID  GROUP BY e.EmployeeID, e.FirstName, e.MiddleInitial, e.LastName  ORDER BY COUNT(s.SalesID) DESC  LIMIT 1;
SELECT      c.FirstName,     c.MiddleInitial,     c.LastName FROM      Customers c JOIN      Sales s ON c.CustomerID = s.CustomerID JOIN      Products p ON s.ProductID = p.ProductID GROUP BY      c.CustomerID,     c.FirstName,     c.MiddleInitial,     c.LastName ORDER BY      SUM(s.Quantity * p.Price) DESC LIMIT 1;
SELECT SUM(T3.Quantity)  FROM Products AS T3  JOIN Sales AS T4 ON T3.ProductID = T4.ProductID  WHERE T3.Name = 'Mountain-500 Black 42';
SELECT SUM(T3.Quantity * T2.Price) AS TotalAmount FROM Customers AS T1  JOIN Sales AS T3 ON T1.CustomerID = T3.CustomerID JOIN Products AS T2 ON T2.ProductID = T3.ProductID WHERE T1.FirstName = 'Heather' AND T1.LastName = 'McBadden';
SELECT COUNT(*)  FROM Sales  JOIN Products ON Sales.ProductID = Products.ProductID  WHERE Products.Name = 'Mountain-100 Silver, 38' AND Sales.SalesPersonID IN (     SELECT EmployeeID FROM Employees WHERE LastName = 'Stearns' AND FirstName = 'MacFeather' );
SELECT COUNT(DISTINCT Products.Name)  FROM Sales  JOIN Customers ON Sales.CustomerID = Customers.CustomerID  JOIN Products ON Sales.ProductID = Products.ProductID  WHERE Customers.FirstName = 'Dalton' AND Customers.MiddleInitial = 'M.' AND Customers.LastName = 'Coleman';
SELECT      e.FirstName,      e.MiddleInitial,      e.LastName FROM      Employees e JOIN      Sales s ON e.EmployeeID = s.SalesPersonID GROUP BY      e.EmployeeID,      e.FirstName,      e.MiddleInitial,      e.LastName ORDER BY      COUNT(s.SalesID) DESC LIMIT 3;
SELECT      p.Name FROM      Products p JOIN      Sales s ON p.ProductID = s.ProductID WHERE      p.Name LIKE 'Mountain-500 Black%' GROUP BY      p.Name ORDER BY      SUM(s.Quantity) DESC LIMIT 1;
SELECT COUNT(*)  FROM Sales  JOIN Products ON Sales.ProductID = Products.ProductID  WHERE Products.Name = 'ML Road Frame-W - Yellow, 40';
SELECT COUNT(*)  FROM Sales  JOIN Products ON Sales.ProductID = Products.ProductID  WHERE Sales.SalesID = 551971 AND Products.Name = 'Chainring Bolts';
SELECT COUNT(*)  FROM Employees  WHERE SalesID IN (     SELECT SalesID      FROM Sales      WHERE ProductID = (         SELECT ProductID          FROM Products          WHERE Name = 'Touring-2000 Blue, 50'     )      AND Quantity > 20000 );
SELECT SUM(T1.Quantity * T3.Price) AS TotalCost FROM Sales AS T1 JOIN Products AS T3 ON T1.ProductID = T3.ProductID JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Abraham' AND T2.LastName = 'Bennet'  AND T3.Name = 'Road-650, Red, 60'
SELECT      P.Name,     SUM(P.Price * S.Quantity) AS OverallTotalPrice FROM      Products P JOIN      Sales S ON P.ProductID = S.ProductID GROUP BY      P.ProductID, P.Name ORDER BY      OverallTotalPrice DESC LIMIT 1;
SELECT Customers.FirstName FROM Customers WHERE Customers.LastName = 'Chen';
SELECT      MAX(COUNT(MiddleInitial)) AS MostCommonMiddleInitial FROM     (SELECT          Employees.MiddleInitial     FROM          Employees     GROUP BY         Employees.MiddleInitial     ORDER BY         COUNT(Employees.MiddleInitial) DESC     LIMIT 1);
SELECT AVG(Price)  FROM Products  WHERE Price BETWEEN 100 AND 200;
SELECT Customers.FirstName, Customers.MiddleInitial, Customers.LastName FROM Customers JOIN Sales ON Customers.CustomerID = Sales.CustomerID JOIN Products ON Sales.ProductID = Products.ProductID WHERE Sales.Quantity > (SELECT AVG(Quantity) FROM Sales);
SELECT      c.FirstName,     c.MiddleInitial,     c.LastName FROM      Customers c JOIN      Sales s ON c.CustomerID = s.CustomerID JOIN      Products p ON s.ProductID = p.ProductID GROUP BY      c.CustomerID,     c.FirstName,     c.MiddleInitial,     c.LastName ORDER BY      SUM(s.Quantity * p.Price) DESC LIMIT 1;
SELECT E.FirstName, E.LastName  FROM Employees E  JOIN Sales S ON E.EmployeeID = S.SalesPersonID  JOIN Products P ON S.ProductID = P.ProductID  WHERE P.Name = 'Blade'  GROUP BY E.EmployeeID  ORDER BY SUM(P.Price * S.Quantity) DESC  LIMIT 1;
SELECT      c.FirstName,      c.MiddleInitial,      c.LastName,     SUM(s.Quantity * p.Price) as TotalSpent FROM      Customers c JOIN      Sales s ON c.CustomerID = s.CustomerID JOIN      Products p ON s.ProductID = p.ProductID GROUP BY      c.CustomerID HAVING      SUM(s.Quantity * p.Price) > 50000 ORDER BY      TotalSpent DESC;
SELECT P.Name FROM Products P JOIN Sales S ON P.ProductID = S.ProductID WHERE S.Quantity = (SELECT MAX(Q) FROM (SELECT MAX(Quantity) Q FROM Sales) T)
SELECT p.Name FROM Products p JOIN Sales s ON p.ProductID = s.ProductID WHERE s.Quantity < (SELECT AVG(Quantity) FROM Sales)
SELECT COUNT(*)  FROM Dish  WHERE first_appeared < 1851 OR first_appeared > 2012;
SELECT      CASE          WHEN Dishes_Anchovies.last_appeared - Dishes_Anchovies.first_appeared > Dishes_Lobsters.last_appeared - Dishes_Lobsters.first_appeared THEN 'Anchovies'         ELSE 'Fresh lobsters in every style'     END AS lasting_dish FROM      (SELECT          id,          MAX(last_appeared) - MIN(first_appeared) as last_appeared_minus_first_appeared     FROM          Dish     WHERE          name = 'Anchovies') Dishes_Anchovies,     (SELECT          id,          MAX(last_appeared) - MIN(first_appeared) as last_appeared_minus_first_appeared     FROM          Dish     WHERE          name = 'Fresh lobsters in every style') Dishes_Lobsters;
SELECT Dish.name  FROM Dish  WHERE Dish.lowest_price = 0 AND Dish.menus_appeared = (SELECT MAX(menus_appeared) FROM Dish)
SELECT COUNT(*)  FROM Menu  WHERE name = 'Waldorf Astoria' AND page_count = 4;
SELECT Dish.name  FROM Dish  JOIN MenuItem ON Dish.id = MenuItem.dish_id  WHERE MenuItem.menu_page_id = 1389  AND MenuItem.xpos < 0.25  AND MenuItem.ypos < 0.25;
SELECT mp.page_number, mi.price  FROM Dish d  JOIN MenuItem mi ON d.id = mi.dish_id  JOIN MenuPage mp ON mi.menu_page_id = mp.id  WHERE d.name = 'Clear green turtle';
SELECT COUNT(*)  FROM MenuPage  JOIN Dish ON Dish.name = 'Clear green turtle' AND Dish.highest_price IS NULL
SELECT MAX(T3.price)  FROM Dish AS T1  JOIN MenuItem AS T3 ON T1.id = T3.dish_id  JOIN MenuPage AS T2 ON T3.menu_page_id = T2.id  WHERE T1.name = 'Clear green turtle';
SELECT DISTINCT m.id  FROM Menu m  JOIN Dish d ON m.id = d.menus_appeared  WHERE d.name = 'Clear green turtle';
SELECT COUNT(*)  FROM Menu  WHERE menus_appeared LIKE '%Clear green turtle%' AND currency = 'Dollars';
SELECT COUNT(*)  FROM Menu  WHERE id IN (     SELECT menus_appeared      FROM Dish      WHERE name = 'Clear green turtle' ) AND call_number IS NULL;
SELECT Dish.name  FROM Dish  JOIN Menu ON Dish.menus_appeared = Menu.id  WHERE Menu.name = 'Zentral Theater Terrace';
SELECT Dish.name FROM Dish JOIN Menu ON Menu.id = Dish.menus_appeared WHERE Menu.name = 'Zentral Theater Terrace' AND MAX(Dish.highest_price) IS NOT NULL;
SELECT COUNT(*)  FROM Dish  JOIN Menu ON Dish.menus_appeared = Menu.id  WHERE Menu.name = 'Zentral Theater Terrace';
SELECT COUNT(*)  FROM Dish  JOIN Menu ON Dish.menus_appeared = Menu.id  WHERE Menu.name = 'Waldorf Astoria';
SELECT m.menu_id  FROM Menu m  JOIN Dish d ON m.id = d.menus_appeared  WHERE d.name = 'Clear green turtle' AND m.sponsor IS NULL;
SELECT AVG(MenuPage.page_number)  FROM MenuPage  JOIN Dish ON MenuPage.id = Dish.menus_appeared  WHERE Dish.name = 'Clear green turtle';
SELECT AVG(Dish.price)  FROM Dish  JOIN Menu ON Dish.menus_appeared = Menu.id  WHERE Menu.name = 'Zentral Theater Terrace'
SELECT COUNT(*)  FROM MenuItem  WHERE created_at LIKE '2011-03-28%';
SELECT COUNT(*)  FROM MenuItem  WHERE menu_page_id = 144;
SELECT COUNT(*)  FROM Menu  WHERE location = 'Dutcher House';
SELECT COUNT(DISTINCT d.id)  FROM Dish d  WHERE d.times_appeared > d.menus_appeared;
SELECT COUNT(*)  FROM Menu  WHERE venue = 'STEAMSHIP';
SELECT COUNT(DISTINCT mp.id)  FROM Menu m  JOIN MenuPage mp ON m.id = mp.menu_id  WHERE m.date = '1898-11-17';
SELECT Dish.name  FROM Dish  JOIN MenuItem ON Dish.id = MenuItem.dish_id  JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id  WHERE MenuPage.id = 174;
SELECT Dish.name, MenuItem.menu_page_id FROM Dish JOIN MenuItem ON Dish.id = MenuItem.dish_id WHERE Dish.first_appeared = 1861;
SELECT Dish.name, MAX(MenuItem.price) AS highest_price FROM Dish JOIN MenuItem ON Dish.id = MenuItem.dish_id JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id WHERE MenuPage.id = 7610 AND MenuItem.created_at LIKE '2011-05-23%'
SELECT D.name FROM Dish D JOIN MenuItem M ON D.id = M.dish_id JOIN MenuPage MP ON M.menu_page_id = MP.id WHERE MP.page_number = 30 AND MP.full_height = (SELECT MIN(full_height) FROM MenuPage WHERE page_number = 30)
SELECT MenuPage.id, Menu.name  FROM MenuPage  JOIN Menu ON MenuPage.menu_id = Menu.id  WHERE Menu.page_count = (SELECT MAX(page_count) FROM Menu);
SELECT COUNT(*)  FROM MenuPage mp  JOIN Menu m ON mp.menu_id = m.id  WHERE m.dish_count = (SELECT MAX(dish_count) FROM Menu) AND mp.page_number = 2;
SELECT COUNT(*)  FROM MenuItem  JOIN Dish ON MenuItem.dish_id = Dish.id  WHERE Dish.name = 'Fresh lobsters in every style';
SELECT      Dish.name,      Dish.description,      Dish.first_appeared,      Dish.last_appeared,      Dish.lowest_price,      Dish.highest_price  FROM      Dish  JOIN      Menu ON Dish.menus_appeared = Menu.id  JOIN      MenuPage ON Menu.id = MenuPage.menu_id  JOIN      MenuItem ON MenuPage.id = MenuItem.menu_page_id  WHERE      Menu.sponsor = 'CHAS.BRADLEY''S OYSTER & DINING ROOM'      AND MenuItem.xpos < 0.25      AND MenuItem.ypos < 0.25;
SELECT Menu.sponsor, Menu.event  FROM Menu  JOIN Dish ON Menu.id = Dish.menus_appeared  WHERE Dish.name = 'Cerealine with Milk';
SELECT      (SUM(CASE              WHEN d.name LIKE '%Bluefish%' AND mp.xpos BETWEEN 0.25 AND 0.75 AND mp.ypos BETWEEN 0.25 AND 0.75 THEN 1 ELSE 0         END) * 1.0 / COUNT(d.id)) * 100 AS percentage_center_bluefish FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE d.name LIKE '%Bluefish%';
SELECT sponsor FROM Menu WHERE id = 12463;
SELECT Menu.name FROM Menu WHERE Menu.sponsor = 'REPUBLICAN HOUSE';
SELECT `place`  FROM `Menu`  WHERE `id` = 12472;
SELECT      Menu.id, Menu.name, Menu.physical_description FROM      Menu JOIN      Dish ON Menu.id = Dish.menus_appeared WHERE      Menu.sponsor = 'Noviomagus';
SELECT occasion FROM Menu WHERE id = 12463;
SELECT Menu.location FROM Menu WHERE Menu.sponsor = 'Norddeutscher Lloyd Bremen';
SELECT MenuPage.id  FROM Menu  JOIN MenuPage ON Menu.id = MenuPage.menu_id  WHERE Menu.sponsor = 'Occidental & Oriental';
SELECT image_id FROM Menu WHERE location = 'Manhattan Hotel';
SELECT mp.full_height, mp.full_width  FROM Menu m  JOIN MenuPage mp ON m.id = mp.menu_id  WHERE m.name = 'El Fuerte Del Palmar';
SELECT      Menu.id, Menu.name  FROM      MenuPage  JOIN      Menu ON MenuPage.menu_id = Menu.id  JOIN      MenuItem ON MenuItem.menu_page_id = MenuPage.id  WHERE      MenuPage.uuid = 'c02c9a3b-6881-7080-e040-e00a180631aa'  AND      Menu.name = 'The Biltmore';
SELECT m.name FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id WHERE mp.full_height = (SELECT MAX(full_height) FROM MenuPage)
SELECT `page_count` FROM `MenuPage` WHERE `id` = 130;
SELECT MenuItem.price FROM MenuItem JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id JOIN Menu ON MenuPage.menu_id = Menu.id WHERE MenuPage.image_id = 4000009194;
SELECT mp.page_number  FROM MenuItem m  JOIN MenuPage mp ON m.menu_page_id = mp.id  WHERE (m.xpos > 0.75 AND m.ypos < 0.25);
SELECT Dish.name FROM Dish JOIN Menu ON Dish.menus_appeared = Menu.id WHERE SUBSTR(Menu.created_at, 7, 1) = '4';
SELECT Dish.name FROM Dish JOIN MenuItem ON Dish.id = MenuItem.dish_id JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id WHERE MenuPage.id = 1389;
SELECT MAX(Dish.highest_price)  FROM Dish  JOIN MenuItem ON Dish.id = MenuItem.dish_id  WHERE MenuItem.id BETWEEN 1 AND 5;
SELECT Dish.name FROM Dish JOIN MenuItem ON Dish.id = MenuItem.dish_id WHERE MenuItem.xpos < 0.25 AND MenuItem.ypos < 0.25;
SELECT      SUM(CASE WHEN t.uuid = '510d47e4-2958-a3d9-e040-e00a18064a99' THEN t.dish_count ELSE 0 END) AS total_dish_count_1,     SUM(CASE WHEN t.uuid = '510d47e4-295a-a3d9-e040-e00a18064a99' THEN t.dish_count ELSE 0 END) AS total_dish_count_2 FROM      MenuPage t
SELECT SUM(Mi.price) AS total_price FROM MenuItem Mi JOIN MenuPage Mp ON Mi.menu_page_id = Mp.id JOIN Menu M ON Mp.menu_id = M.id WHERE M.id = 12882;
SELECT      Dish.id,      Dish.name,      MAX(Dish.highest_price)  FROM      Dish  GROUP BY      Dish.id,      Dish.name  ORDER BY      MAX(Dish.highest_price) DESC  LIMIT 5;
SELECT COUNT(*)  FROM Dish  WHERE lowest_price = 0;
SELECT      Dish.name FROM      Dish WHERE      Dish.first_appeared = 1855 AND Dish.last_appeared = 1900;
SELECT      id,     name,     dish_count FROM      Menu ORDER BY      dish_count DESC LIMIT 10;
SELECT COUNT(*)  FROM MenuItem  WHERE xpos > 0.75 AND ypos < 0.25;
SELECT      (D.last_appeared - D.first_appeared) AS duration_on_menu,     D.updated_at  FROM      Dish D  WHERE      D.name = 'Clear Green Turtle';
SELECT COUNT(DISTINCT d.id)  FROM Dish d  WHERE EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM d.first_appeared) > 100;
SELECT COUNT(*)  FROM Dish  WHERE (DATEDIFF(CURDATE(), first_appeared) - DATEDIFF(CURDATE(), last_appeared)) / 365 < 5;
SELECT Dish.name, MenuItem.price  FROM Dish  JOIN MenuItem ON Dish.id = MenuItem.dish_id  WHERE Dish.lowest_price = 0;
SELECT MenuItem.price FROM MenuItem JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id JOIN Menu ON Menu.id = MenuPage.menu_id WHERE Menu.id = 12474 AND MenuPage.page_number = 2;
SELECT COUNT(*)  FROM Dish  WHERE created_at BETWEEN '2011-03-31 20:24:46 UTC' AND '2011-04-15 23:09:51 UTC';
SELECT DISTINCT M.sponsor FROM Menu M JOIN MenuPage MP ON M.id = MP.menu_id WHERE MP.full_height > 10000;
SELECT mp.image_id, mp.full_height, mp.full_width  FROM Menu m  JOIN MenuPage mp ON m.id = mp.menu_id  WHERE m.event = '100TH ANNIVERSARY OF BIRTH OF DANIEL WEBSTER';
SELECT DISTINCT m.event  FROM MenuPage mp  JOIN Menu m ON mp.menu_id = m.id  WHERE mp.full_width < 2000;
SELECT Dish.name FROM Dish JOIN MenuItem ON Dish.id = MenuItem.dish_id WHERE MenuItem.price = 180000;
SELECT      MenuPage.page_number,     MenuItem.xpos, MenuItem.ypos,     Dishes.last_appeared - Dishes.first_appeared AS duration FROM      Dish AS Dishes JOIN      MenuItem ON Dishes.id = MenuItem.dish_id JOIN      MenuPage ON MenuItem.menu_page_id = MenuPage.id WHERE      Dishes.name = 'Small Hominy';
SELECT mp.page_number, mi.image_id, (mp.full_height * mp.full_width) as image_area FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE d.name = 'Baked Stuffed Mullet & Sauce Pomard';
SELECT COUNT(*)  FROM Dish  WHERE times_appeared > menus_appeared;
SELECT COUNT(*)  FROM Menu  WHERE sponsor = 'Krogs Fiskerestaurant'  AND date LIKE '2015-04%';
SELECT      d.name FROM      Dish d WHERE      d.last_appeared - d.first_appeared = (SELECT MAX(last_appeared - first_appeared) FROM Dish);
SELECT `event` FROM `Menu` WHERE `id` = 21380 AND `date` = '1887-07-21';
SELECT COUNT(*)  FROM Menu  WHERE name = 'Emil Kuehn';
SELECT COUNT(*)  FROM Dish  WHERE name = 'puree of split peas aux croutons';
SELECT Dish.name FROM Dish JOIN MenuItem ON Dish.id = MenuItem.dish_id WHERE Dish.highest_price IS NULL  AND SUBSTR(MenuItem.created_at, 1, 4) = '2011' AND SUBSTR(MenuItem.created_at, 7, 1) = '4';
SELECT m.name FROM Menu m WHERE m.page_count = (SELECT MAX(page_count) FROM Menu);
SELECT mp.id FROM Menu m JOIN Dish d ON m.id = d.menus_appeared JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON m.id = mp.menu_id WHERE d.name = 'mashed potatoes';
SELECT COUNT(*)  FROM Menu  WHERE sponsor = 'PACIFIC MAIL STEAMSHIP COMPANY'  AND (SELECT COUNT(*) FROM MenuPage WHERE menu.id = MenuPage.menu_id) <= 2;
SELECT mp.id FROM Menu m JOIN Dish d ON m.id = d.menus_appeared JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON m.id = mp.menu_id WHERE d.name = 'milk' AND mi.price = (SELECT MAX(p.price) FROM MenuItem p)
SELECT menu.id FROM Menu WHERE sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY' ORDER BY page_count DESC LIMIT 1;
SELECT mp.page_number, m.name, dp.xpos, dp.ypos FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE d.name = 'breaded veal cutlet with peas';
SELECT Dish.name FROM Dish JOIN MenuItem ON Dish.id = MenuItem.dish_id JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id WHERE MenuPage.page_number = 48706 AND MenuItem.xpos > 0.75 AND MenuItem.ypos > 0.75;
SELECT Dish.name FROM Dish JOIN Menu ON Dish.menus_appeared = Menu.id WHERE Menu.sponsor = 'THE SOCIETY OF THE CUMBERLAND' AND Menu.event = '19NTH REUNION' AND Menu.place = 'GRAND PACIFIC HOTEL, CHICAGO, ILL';
SELECT Menu.sponsor  FROM Menu  JOIN Dish ON Menu.id = Dish.menus_appeared  WHERE Dish.name = 'baked apples with cream'  GROUP BY Menu.id  ORDER BY MAX(MenuItem.price) DESC  LIMIT 1;
SELECT      (COUNT(DISTINCT d.id) / COUNT(DISTINCT mp.id)) AS avg_dishes_per_menu,     (         SELECT d.name          FROM Dish d         WHERE d.dishes_appeared = (             SELECT MAX(times_appeared)              FROM Dish             WHERE id IN (                 SELECT d.id                  FROM Dish d                 JOIN Menu m ON d.menus_appeared LIKE '%' || m.name || '%'                 JOIN MenuPage mp ON d.menu_id = mp.menu_id                 WHERE m.name = 'Souper de Luxe'                 GROUP BY d.id             )         )     ) AS dish_appeared_most_in_menus FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id JOIN Dish d ON m.name || '%' = d.menus_appeared || '%' WHERE m.name = 'Souper de Luxe'
SELECT m.id FROM Menu m WHERE m.sponsor IS NULL;
SELECT COUNT(*)  FROM Menu  WHERE event = 'LUNCH';
SELECT COUNT(*)  FROM Menu  WHERE page_count > 10 AND dish_count > 20;
SELECT menu.id FROM Menu WHERE dish_count = (SELECT MAX(dish_count) FROM Menu);
SELECT COUNT(*)  FROM Dish  JOIN Menu ON Dish.menus_appeared = Menu.id  WHERE Menu.name = 'Zentral Theater Terrace';
SELECT COUNT(*)  FROM Menu  WHERE call_number IS NULL AND strftime('%Y', date) < '1950';
SELECT image_id  FROM MenuPage  WHERE menu_id IN (     SELECT id      FROM Menu      WHERE name = 'Zentral Theater Terrace' ) AND page_number = 1;
SELECT `name`  FROM `Menu` WHERE `id` = (     SELECT `menu_id`      FROM `MenuPage`      WHERE `image_id` = '5189412' );
SELECT      CASE          WHEN SUM(mp.full_width) OVER (PARTITION BY m.name, mp.page_number WHERE mp.page_number = 1 AND m.name = 'Zentral Theater Terrace') > SUM(mp.full_width) OVER (PARTITION BY m.name, mp.page_number WHERE mp.page_number = 1 AND m.name = 'Young\'s Hotel') THEN 'Zentral Theater Terrace'         WHEN SUM(mp.full_width) OVER (PARTITION BY m.name, mp.page_number WHERE mp.page_number = 1 AND m.name = 'Young\'s Hotel') < SUM(mp.full_width) OVER (PARTITION BY m.name, mp.page_number WHERE mp.page_number = 1 AND m.name = 'Zentral Theater Terrace') THEN 'Young\'s Hotel'         ELSE 'Equal width'     END AS Bigger_Width_Menu FROM MenuPage mp JOIN Menu m ON mp.menu_id = m.id WHERE mp.page_number = 1;
SELECT MenuPage.id  FROM MenuPage  JOIN Menu ON Menu.id = MenuPage.menu_id  WHERE Menu.name = 'Ritz Carlton'  ORDER BY MenuPage.full_height DESC  LIMIT 1;
SELECT COUNT(*)  FROM MenuPage  JOIN Menu ON MenuPage.menu_id = Menu.id  WHERE Menu.name = 'Ritz Carlton' AND MenuPage.full_width > 1000;
SELECT COUNT(*)  FROM MenuItem  JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id  WHERE MenuPage.menu_id = 12882 AND MenuPage.page_number = 1;
SELECT D.name  FROM Dish D  JOIN MenuItem M ON D.id = M.dish_id  JOIN MenuPage MP ON M.menu_page_id = MP.id  WHERE MP.menu_id = 12882 AND MP.page_number = 1;
SELECT mp.page_number  FROM Dish d  JOIN MenuItem mi ON d.id = mi.dish_id  JOIN MenuPage mp ON mi.menu_page_id = mp.id  WHERE d.name = 'Chicken gumbo';
SELECT mp.menu_id  FROM MenuPage mp  JOIN Dish d ON mp.full_width = (     SELECT MAX(fw)      FROM (         SELECT MAX(full_width) as fw          FROM MenuPage mp2          JOIN Dish d2 ON mp2.dish_id = d2.id          WHERE d2.name = 'Chicken gumbo'     ) t )
SELECT COUNT(*)  FROM Dish  JOIN MenuItem ON Dish.id = MenuItem.dish_id  WHERE Dish.name = 'Chicken gumbo';
SELECT COUNT(*)  FROM MenuPage  JOIN Dish ON Dish.id = MenuItem.dish_id  WHERE Dish.name = 'Paysanne Soup' AND Dish.highest_price IS NULL;
SELECT MAX(T3.price)  FROM Dish AS T1  JOIN MenuItem AS T3 ON T1.id = T3.dish_id  JOIN MenuPage AS T2 ON T3.menu_page_id = T2.id  WHERE T1.name = 'Chicken gumbo';
SELECT full_height * full_width  FROM MenuPage  JOIN Menu ON Menu.id = MenuPage.menu_id  WHERE Menu.name = 'Zentral Theater Terrace' AND MenuPage.page_number = 1;
SELECT      (COUNT(DISTINCT MenuItem.dish_id) * 1.0 / SUM(CASE WHEN MenuPage.page_count IS NOT NULL THEN 1 ELSE 0 END)) AS avg_dishes_per_menu_page FROM      MenuItem JOIN      MenuPage ON MenuItem.menu_page_id = MenuPage.id WHERE      MenuPage.menu_id = 12882;
SELECT COUNT(*)  FROM shipment  JOIN customer ON shipment.cust_id = customer.cust_id  WHERE customer.cust_name = 'S K L Enterprises Inc'  AND YEAR(shipment.ship_date) = 2017;
SELECT SUM(shipment.weight)  FROM shipment  JOIN customer ON shipment.cust_id = customer.cust_id  WHERE customer.cust_name = 'S K L Enterprises Inc';
SELECT COUNT(*)  FROM shipment  JOIN customer ON shipment.cust_id = customer.cust_id  WHERE shipment.driver_id IN      (SELECT driver_id FROM driver WHERE first_name = 'Sue' AND last_name = 'Newell')  AND customer.cust_name = 'S K L Enterprises Inc';
SELECT COUNT(*)  FROM shipment  JOIN customer ON shipment.cust_id = customer.cust_id  WHERE customer.state = 'FL';
SELECT ship_id FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id WHERE customer.cust_type = 'retailer';
SELECT COUNT(*)  FROM customer  WHERE cust_id IN (     SELECT s.cust_id      FROM shipment s      WHERE CAST(s.ship_date AS DATE) = 2017 )  AND annual_revenue > 30000000;
SELECT COUNT(*)  FROM shipment  JOIN driver ON shipment.driver_id = driver.driver_id  WHERE CAST(shipment.ship_date AS DATE) = 2017 AND driver.first_name = 'Sue' AND driver.last_name = 'Newell';
SELECT      d.first_name || ' ' || d.last_name AS full_name FROM      shipment s JOIN      driver d ON s.driver_id = d.driver_id WHERE      Cast(s.ship_date AS DATE) = 2017 GROUP BY      s.driver_id ORDER BY      SUM(s.weight) DESC LIMIT 1;
SELECT COUNT(*)  FROM shipment  JOIN city ON shipment.city_id = city.city_id  WHERE CAST(shipment.ship_date AS DATE) = 2017 AND city.state = 'New Jersey';
SELECT MAX(shipment.weight)  FROM shipment  JOIN city ON shipment.city_id = city.city_id  WHERE city.city_name = 'New York';
SELECT      SUM(CASE WHEN T3.city_name = 'New York' THEN T4.weight ELSE 0 END) - SUM(CASE WHEN T3.city_name = 'Chicago' THEN T4.weight ELSE 0 END) AS difference_in_weight FROM      city AS T3 JOIN      shipment AS T4 ON T3.city_id = T4.city_id
SELECT DISTINCT T2.city_name  FROM shipment AS T1  JOIN city AS T2 ON T1.city_id = T2.city_id  JOIN customer AS T3 ON T3.cust_id = T1.cust_id  WHERE T3.cust_name = 'S K L Enterprises Inc'  ORDER BY T2.city_name;
SELECT      AVG(shipment.weight)  FROM      shipment JOIN      customer ON shipment.cust_id = customer.cust_id WHERE      customer.cust_name = 'S K L Enterprises Inc';
SELECT      COUNT(CASE WHEN T3.city_name = 'Jacksonville' THEN T4.ship_id ELSE NULL END) * 100.0 / COUNT(T4.ship_id) AS percentage FROM      shipment AS T4 JOIN      city AS T3 ON T4.city_id = T3.city_id WHERE      T3.state = 'Florida'
SELECT      t.state AS headquarter FROM      shipment s JOIN      truck t ON s.truck_id = t.truck_id WHERE      s.ship_id = 1045;
SELECT COUNT(*)  FROM shipment  JOIN truck ON shipment.truck_id = truck.truck_id  WHERE truck.model_year = (SELECT MIN(model_year) FROM truck);
SELECT cust_name  FROM customer  JOIN shipment ON customer.cust_id = shipment.cust_id  WHERE ship_id = 1275;
SELECT `city_name`  FROM `city`  JOIN `shipment` ON `city.city_id` = `shipment.city_id`  WHERE `ship_id` = 1701;
SELECT first_name, last_name  FROM driver  WHERE driver_id = (SELECT driver_id FROM shipment WHERE ship_id = 1021);
SELECT d.first_name, d.last_name  FROM driver d  JOIN shipment s ON d.driver_id = s.driver_id  WHERE s.ship_date = '2017-11-05';
SELECT c.population  FROM city c  JOIN shipment s ON c.city_id = s.city_id  WHERE s.ship_id = 1398;
SELECT ship_date FROM shipment JOIN city ON shipment.city_id = city.city_id WHERE city.state = 'SC' ORDER BY ship_date ASC LIMIT 1;
SELECT weight  FROM shipment  JOIN driver ON shipment.driver_id = driver.driver_id  WHERE driver.first_name = 'Leszek' AND driver.last_name = 'Kieltyka' AND ship_date = '2017-09-25';
SELECT T3.area  FROM shipment AS T1  JOIN city AS T3 ON T3.city_id = T1.city_id  WHERE T1.ship_id = 1346;
SELECT shipment.weight FROM shipment JOIN city ON shipment.city_id = city.city_id WHERE city.city_name = 'U-haul Center Of N Syracuse' AND shipment.ship_date = '2016/09/21';
SELECT d.first_name, d.last_name  FROM driver d  JOIN shipment s ON d.driver_id = s.driver_id  JOIN truck t ON s.truck_id = t.truck_id  WHERE t.truck_id = 3 AND s.ship_date = '2016-09-19';
SELECT (c.area / sh.population) AS population_density  FROM city c  JOIN shipment sh ON c.city_id = sh.city_id  WHERE sh.ship_id = 1369;
SELECT      COUNT(s.ship_id) * 1.0 / COUNT(DISTINCT t.truck_id) AS avg_shipments_kenworth_trucks FROM      shipment s JOIN      truck t ON s.truck_id = t.truck_id WHERE      t.make = 'Kenworth';
SELECT SUM(weight) AS total_pounds  FROM shipment  JOIN driver ON shipment.driver_id = driver.driver_id  WHERE first_name = 'Sue' AND last_name = 'Newell' AND ship_date = (SELECT MIN(ship_date) FROM shipment);
SELECT cust_name FROM customer JOIN shipment ON customer.cust_id = shipment.cust_id WHERE shipment.weight = (SELECT MAX(weight) FROM shipment);
SELECT d.first_name, d.last_name  FROM driver d  JOIN shipment s ON d.driver_id = s.driver_id  WHERE s.ship_date = (SELECT MIN(ship_date) FROM shipment);
SELECT COUNT(*)  FROM shipment  JOIN customer ON shipment.cust_id = customer.cust_id  WHERE customer.cust_name = 'Olympic Camper Sales Inc';
SELECT COUNT(*)  FROM shipment  JOIN city ON shipment.city_id = city.city_id  JOIN customer ON shipment.cust_id = customer.cust_id  WHERE city.city_name = 'New York'  AND customer.cust_name = 'Harry\'s Hot Rod Auto & Truck Accessories';
SELECT COUNT(*)  FROM shipment  WHERE ship_id IN (     SELECT ship_id      FROM shipment      WHERE weight = (SELECT MAX(weight) FROM shipment) ) AND make = 'Mack';
SELECT D.first_name, D.last_name  FROM driver AS D JOIN shipment AS S ON D.driver_id = S.driver_id JOIN city AS C ON S.city_id = C.city_id WHERE C.population = (SELECT MIN(population) FROM city) GROUP BY D.driver_id HAVING COUNT(S.ship_id) = (     SELECT MAX(ship_count.driver_id)      FROM (         SELECT driver_id, COUNT(ship_id) as ship_count          FROM shipment          GROUP BY driver_id     ) AS ship_count ) ORDER BY D.last_name;
SELECT COUNT(*)  FROM shipment  JOIN truck ON shipment.truck_id = truck.truck_id  WHERE shipment.weight < 1000 AND truck.model_year = (SELECT MIN(model_year) FROM truck);
SELECT T2.annual_revenue  FROM shipment AS T1 JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE (cust_id, COUNT(ship_id)) IN (SELECT cust_id, COUNT(*) FROM shipment GROUP BY cust_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT COUNT(*)  FROM shipment  JOIN city ON shipment.city_id = city.city_id  WHERE city.city_name = 'Downey'  AND city.state = 'CA'  AND YEAR(shipment.ship_date) = 2016;
SELECT COUNT(*)  FROM shipment  JOIN driver ON shipment.driver_id = driver.driver_id  WHERE driver.first_name = 'Holger'  AND driver.last_name = 'Nohr'  AND shipment.city_id = (SELECT city_id FROM city WHERE city_name = 'North Las Vegas');
SELECT COUNT(*)  FROM shipment s  JOIN city c ON s.city_id = c.city_id  WHERE c.population < (SELECT MAX(c_population) FROM                          (SELECT SUM(area) / population c_population FROM city GROUP BY city_id) t_max)
SELECT      (COUNT(CASE WHEN c.state = 'TX' AND c.cust_type = 'manufacturer' THEN c.cust_id ELSE NULL END)      / COUNT(c.cust_id)) * 100 AS percentage FROM      customer c;
SELECT SUM(shipment.weight)  FROM shipment  JOIN city ON shipment.city_id = city.city_id  WHERE city.city_name = 'San Mateo' AND YEAR(shipment.ship_date) = 2016;
SELECT SUM(shipment.weight)  FROM shipment  JOIN truck ON shipment.truck_id = truck.truck_id  JOIN city ON shipment.city_id = city.city_id  WHERE shipment.ship_date >= '2016-01-01' AND shipment.ship_date <= '2016-12-31'  AND truck.make = 'Peterbilt'  AND (SELECT MAX(model_year) FROM truck WHERE make = 'Peterbilt');
SELECT T3.cust_name, MAX(T4.weight) FROM city AS T1 JOIN shipment AS T4 ON T1.city_name = T4.city_id JOIN customer AS T3 ON T3.cust_id = T4.cust_id WHERE T1.city_name = 'Boston';
SELECT T3.city_name  FROM shipment AS T1  JOIN city AS T3 ON T1.city_id = T3.city_id  WHERE T1.ship_id = 1002;
SELECT AVG(shipment.weight)  FROM shipment  JOIN truck ON shipment.truck_id = truck.truck_id  WHERE truck.make = 'Mack' AND truck.model_year = (SELECT MIN(model_year) FROM truck);
SELECT CONCAT(driver.first_name, ' ', driver.last_name) AS full_name FROM shipment JOIN city ON shipment.city_id = city.city_id JOIN driver ON shipment.driver_id = driver.driver_id WHERE city.city_name = 'New York' AND shipment.ship_date LIKE '2016-02%';
SELECT T3.cust_name  FROM shipment AS T1  JOIN city AS T2 ON T1.city_id = T2.city_id  JOIN customer AS T3 ON T3.cust_id = T1.cust_id  WHERE T2.city_name = 'Oak Park';
SELECT COUNT(ship_id) FROM shipment s JOIN driver d ON s.driver_id = d.driver_id JOIN city c ON s.city_id = c.city_id WHERE d.first_name = 'Andrea'  AND d.last_name = 'Simons' AND c.city_name = 'Huntsville' AND CAST(s.ship_date AS DATE) = 2016;
SELECT      d.driver_id,     AVG(COUNT(s.ship_id) / (24 * COUNT(DISTINCT s.driver_id))) as avg_deliver_per_month FROM      shipment s JOIN      driver d ON s.driver_id = d.driver_id GROUP BY      d.driver_id;
SELECT      (COUNT(CASE WHEN weight >= 10000 THEN 1 END) / COUNT(*) * 100) as percentage FROM      shipment s JOIN      customer c ON s.cust_id = c.cust_id WHERE      c.cust_name = 'Sunguard Window Tinting & Truck Accessories' AND      EXTRACT(YEAR FROM CAST(s.ship_date AS TIMESTAMP)) = 2017;
SELECT      (COUNT(CASE WHEN c.cust_name = 'Autoware Inc' THEN s.ship_id ELSE NULL END)      / COUNT(s.ship_id)) * 100 AS percentage_delivered_by_Autoware FROM      customer c  JOIN      shipment s ON c.cust_id = s.cust_id  JOIN      driver d ON d.driver_id = s.driver_id  WHERE      d.first_name = 'Sue' AND d.last_name = 'Newel';
SELECT COUNT(DISTINCT T3.city_id) FROM city AS T1 JOIN shipment AS T2 ON T2.city_id = T1.city_id JOIN city AS T3 ON T3.city_name = 'New Jersey' WHERE T2.weight > 20000;
SELECT COUNT(*)  FROM city  WHERE population > 50000  AND city_id IN (     SELECT city_id      FROM shipment      WHERE YEAR(ship_date) = 2017 );
SELECT s.weight FROM shipment s JOIN truck t ON s.truck_id = t.truck_id JOIN city c ON s.city_id = c.city_id JOIN driver d ON s.driver_id = d.driver_id WHERE t.make = 'Peterbilt';
SELECT t.make, t.model_year  FROM shipment s  JOIN truck t ON s.truck_id = t.truck_id  WHERE s.ship_id = 1003;
SELECT `make`  FROM `truck` WHERE `truck_id` = (SELECT `truck_id` FROM `shipment` WHERE `ship_id` = 1011);
SELECT d.first_name  FROM driver d  JOIN shipment s ON d.driver_id = s.driver_id  WHERE s.ship_id = 1028;
SELECT T4.state  FROM shipment AS T1  JOIN driver AS T4 ON T1.driver_id = T4.driver_id  WHERE T1.ship_id = 1055;
SELECT D.address FROM driver D JOIN shipment S ON D.driver_id = S.driver_id WHERE S.weight > 50000;
SELECT d.first_name, d.last_name  FROM driver d  JOIN shipment s ON d.driver_id = s.driver_id  WHERE s.ship_date = '2016-02-03';
SELECT AVG(c.annual_revenue)  FROM customer c  JOIN shipment s ON c.cust_id = s.cust_id  WHERE s.weight < 65000;
SELECT      (COUNT(DISTINCT c.cust_id) * 100 / (SELECT COUNT(*) FROM customer c WHERE c.cust_type = 'wholesaler'))) AS percentage FROM      shipment s JOIN      customer c ON s.cust_id = c.cust_id WHERE      s.weight < 70000;
SELECT d.last_name  FROM driver d  JOIN shipment s ON d.driver_id = s.driver_id  WHERE s.ship_id = 1088;
SELECT d.phone FROM driver d JOIN shipment s ON d.driver_id = s.driver_id WHERE s.weight > 20000;
SELECT make, model_year  FROM truck  WHERE truck_id = (SELECT truck_id FROM shipment WHERE ship_id = 1055);
SELECT COUNT(*)  FROM truck  WHERE model_year = 2009;
SELECT COUNT(*)  FROM customer  WHERE cust_type = 'manufacturer';
SELECT COUNT(*)  FROM customer  WHERE cust_type = 'retailer' AND state = 'CA';
SELECT COUNT(*)  FROM city  WHERE state = 'Connecticut';
SELECT city_name FROM city WHERE state = 'CA' ORDER BY population DESC LIMIT 1;
SELECT `annual_revenue` FROM `customer` WHERE `cust_name` = 'Klett & Sons Repair';
SELECT d.first_name, d.last_name  FROM driver d  JOIN shipment s ON d.driver_id = s.driver_id  WHERE s.weight = (SELECT MIN(weight) FROM shipment)
SELECT COUNT(*)  FROM shipment  JOIN city ON shipment.city_id = city.city_id  WHERE city.state = 'CA'  AND YEAR(shipment.ship_date) = 2016;
SELECT T4.make  FROM driver AS T1  JOIN shipment AS T2 ON T1.driver_id = T2.driver_id   JOIN truck AS T4 ON T2.truck_id = T4.truck_id   WHERE T1.first_name = 'Zachery' AND T1.last_name = 'Hicks';
SELECT DISTINCT cust_name  FROM shipment  JOIN customer ON shipment.cust_id = customer.cust_id  WHERE ship_date LIKE '2017-02-%';
SELECT T3.make AS 'Brand of Truck', CONCAT(T4.first_name, ' ', T4.last_name) AS 'Driver Name' FROM shipment AS T1 JOIN customer AS T2 ON T1.cust_id = T2.cust_id JOIN driver AS T4 ON T1.driver_id = T4.driver_id JOIN truck AS T3 ON T1.truck_id = T3.truck_id WHERE T2.cust_name = 'Klett & Sons Repair';
SELECT ship_id FROM shipment JOIN driver ON shipment.driver_id = driver.driver_id WHERE driver.first_name = 'Zachery' AND driver.last_name = 'Hicks' ORDER BY weight DESC LIMIT 1;
SELECT COUNT(*)  FROM shipment  JOIN driver ON shipment.driver_id = driver.driver_id  WHERE driver.first_name = 'Zachery' AND driver.last_name = 'Hicks'  AND city_id IN (SELECT city_id FROM city WHERE city_name = 'New York')  AND CAST(ship_date AS DATE) = 2016;
SELECT      d.city AS headquarter,     COUNT(s.ship_id) AS total_shipments FROM      shipment s JOIN      truck t ON s.truck_id = t.truck_id JOIN      driver d ON s.driver_id = d.driver_id WHERE      CAST(s.ship_date AS DATE) = '2016-01-01' GROUP BY      d.city ORDER BY      total_shipments DESC LIMIT 1;
SELECT COUNT(*)  FROM shipment  JOIN city ON shipment.city_id = city.city_id  WHERE city.state = 'California'  AND city.population = (SELECT MIN(population) FROM city WHERE state = 'California');
SELECT T3.city_name FROM shipment AS T1 JOIN truck AS T2 ON T1.truck_id = T2.truck_id JOIN city AS T3 ON T3.city_id = T1.city_id WHERE T1.weight = (SELECT MAX(weight) FROM shipment)
SELECT DISTINCT c.city_name FROM shipment s JOIN truck t ON s.truck_id = t.truck_id JOIN driver d ON s.driver_id = d.driver_id JOIN city c ON c.city_id = s.city_id WHERE d.first_name = 'Zachery' AND d.last_name = 'Hicks';
SELECT      AVG(Count(ship_id)) AS avg_shipments FROM (     SELECT          ship_id     FROM          shipment     WHERE          first_name = 'Zachery' AND last_name = 'Hicks' AND          CAST(ship_date AS DATE) = 2017 ) as shipments_of_zachery_hicks
SELECT      (SUM(CASE WHEN T4.first_name = 'Zachery' AND T4.last_name = 'Hicks' THEN T3.weight ELSE 0 END) / NULLIF(SUM(T3.weight), 0)) * 100 AS percentage FROM      shipment T3 JOIN      driver T4 ON T3.driver_id = T4.driver_id JOIN      city T5 ON T3.city_id = T5.city_id WHERE      T5.state = 'California' AND     YEAR(T3.ship_date) = 2016;
SELECT COUNT(*)  FROM shipment  JOIN driver ON shipment.driver_id = driver.driver_id  WHERE driver.first_name = 'Zachary' AND driver.last_name = 'Hicks';
SELECT ship_id FROM shipment WHERE city_id = (     SELECT city_id      FROM city      WHERE area = (SELECT MAX(area) FROM city) );
SELECT D.first_name, D.last_name  FROM driver AS D JOIN shipment AS S ON D.driver_id = S.driver_id JOIN city AS C ON S.city_id = C.city_id WHERE C.population = (SELECT MIN(pop) FROM city)
SELECT COUNT(*)  FROM shipment  JOIN city ON shipment.city_id = city.city_id  WHERE city.city_name = 'Cicero' AND city.state = 'Illinois'  AND weight BETWEEN 9000 AND 15000;
SELECT T4.make  FROM shipment AS T1  JOIN truck AS T4 ON T1.truck_id = T4.truck_id  JOIN driver AS T2 ON T1.driver_id = T2.driver_id  JOIN city AS T3 ON T1.city_id = T3.city_id  JOIN customer AS T5 ON T1.cust_id = T5.cust_id  WHERE T1.ship_id = 1233;
SELECT d.address  FROM driver d  JOIN shipment s ON d.driver_id = s.driver_id  JOIN customer c ON c.cust_id = s.cust_id  WHERE c.address = '7052 Carroll Road' AND c.city = 'San Diego' AND c.state = 'California';
SELECT COUNT(*)  FROM shipment  JOIN driver ON shipment.driver_id = driver.driver_id  WHERE driver.last_name = 'Craft' AND CAST(shipment.ship_date AS DATE) = 2017;
SELECT T4.model_year  FROM shipment AS T1  JOIN truck AS T4 ON T1.truck_id = T4.truck_id  WHERE T1.ship_id = 1245;
SELECT T4.address  FROM shipment AS T1  JOIN truck AS T2 ON T1.truck_id = T2.truck_id  JOIN driver AS T4 ON T4.driver_id = T2.driver_id  WHERE T1.ship_id = 1127;
SELECT `annual_revenue` FROM `customer` WHERE `cust_id` = (SELECT `cust_id` FROM `shipment` WHERE `ship_id` = 1047);
SELECT shipment.weight FROM shipment JOIN driver ON shipment.driver_id = driver.driver_id WHERE driver.first_name = 'Andrea' AND driver.last_name = 'Simons' AND shipment.ship_date = '2016-03-07';
SELECT T4.city_name  FROM shipment AS T1  JOIN truck AS T2 ON T1.truck_id = T2.truck_id  JOIN driver AS T3 ON T1.driver_id = T3.driver_id  JOIN city AS T4 ON T1.city_id = T4.city_id  WHERE T1.ship_date = '2017-01-16';
SELECT COUNT(*)  FROM shipment  JOIN city ON shipment.city_id = city.city_id  WHERE city.state = 'NY'
SELECT cust_name  FROM customer  WHERE cust_id = 1147;
SELECT ship_id FROM shipment WHERE city_id = (SELECT city_id FROM city WHERE population = (SELECT MAX(population) FROM city))
SELECT d.first_name, d.last_name  FROM shipment s  JOIN driver d ON s.driver_id = d.driver_id  WHERE s.ship_date = '2016-02-22';
SELECT T3.weight  FROM customer AS T1  JOIN shipment AS T3 ON T1.cust_id = T3.cust_id  WHERE T1.annual_revenue = 39448581;
SELECT `address`  FROM `customer` JOIN `shipment` ON `customer.cust_id` = `shipment.cust_id` WHERE `ship_id` = 1117;
SELECT      (COUNT(CASE WHEN CAST(shipment.ship_date AS DATE) = 2017 AND shipment.city_id IN (         SELECT city.city_id FROM city WHERE city.state = 'TX'     ) THEN 1 ELSE NULL END)      / COUNT(shipment.ship_id)) * 100 AS percentage_2017_to_TX FROM      shipment;
SELECT      (COUNT(CASE WHEN T4.model_year = 2005 THEN T1.ship_id ELSE NULL END) - COUNT(CASE WHEN T4.model_year = 2006 THEN T1.ship_id ELSE NULL END)) as shipment_difference FROM      shipment T1 JOIN      truck T4 ON T1.truck_id = T4.truck_id
SELECT d.first_name, d.last_name  FROM driver d  JOIN shipment s ON d.driver_id = s.driver_id  WHERE s.weight > (SELECT AVG(weight) * 0.95 FROM shipment);
SELECT      p.title,      COUNT(DISTINCT w.wid) AS num_diff_words  FROM      pages p      JOIN langs l ON p.lid = l.lid  WHERE      l.lang = 'ca' AND      l.locale = 'cat'  GROUP BY      p.pid  ORDER BY      MAX(CHAR_LENGTH(p.title)) DESC  LIMIT 1;
SELECT p.title  FROM pages p  JOIN langs l ON p.lid = l.lid  WHERE l.lang = 'ca'  AND l.locale = 'catalan'  GROUP BY p.pid, p.page  HAVING COUNT(DISTINCT p.wid) < 10;
SELECT p.pid FROM pages p JOIN langs l ON p.lid = l.lid WHERE l.lang = 'ca' AND p.title LIKE '% Art %';
SELECT title  FROM pages  JOIN langs_words ON pages.lid = langs_words.lid  JOIN langs ON langs.lang = 'catalan'  WHERE pages.pid = 16203226;
SELECT title  FROM pages  JOIN langs ON pages.lid = langs.lid  WHERE lang = 'ca' AND revision BETWEEN 106600 AND 106700;
SELECT COUNT(*)  FROM pages  WHERE lid IN (SELECT lid FROM langs WHERE lang = 'Catalan')  AND pid IN (SELECT DISTINCT pid FROM pages_words)  GROUP BY pid  HAVING COUNT(DISTINCT wid) BETWEEN 1000 AND 2000;
SELECT p.pid  FROM pages p  JOIN langs_words lw ON p.lid = lw.lid  JOIN words w ON lw.wid = w.wid  WHERE w.word = 'decimal' AND lw.lang = 'catalan';
SELECT w.word  FROM words w  JOIN pages_words pw ON w.wid = pw.wid  WHERE pw.page IN (     SELECT p.page      FROM pages p      JOIN langs l ON p.lid = l.lid      WHERE l.lang = 'catalan' )  GROUP BY w.word  ORDER BY SUM(pw occurrences) DESC  LIMIT 1;
SELECT DISTINCT w1st.word  FROM biwords AS bw  JOIN words AS w1st ON bw.w1st = w1st.wid  JOIN words AS w2nd ON bw.w2nd = w2nd.wid  WHERE w2nd.word = 'antic';
SELECT p.title, pw occurrences  FROM pages p  JOIN pages_words pw ON p.pid = pw.pid  JOIN words w ON pw.wid = w.wid  WHERE w.word = 'quipu'
SELECT AVG(biwords_occurrences)  FROM biwords  WHERE w1st = 'system';
SELECT SUM(p.pages)  FROM langs l  JOIN langs_words lw ON l.lid = lw.lid  JOIN pages p ON l.lid = p.lid  WHERE l.lang = 'ca';
SELECT w1st.word, w2nd.word  FROM biwords  JOIN langs ON biwords.lid = langs.lid  WHERE langs.lang = 'catalan'  GROUP BY CONCAT(w1st.word, '_', w2nd.word)  ORDER BY SUM(occurrences) DESC  LIMIT 1;
SELECT wid FROM langs  JOIN langs_words ON langs.lid = langs_words.lid  WHERE lang = 'catalan' AND langs_words occurrences <= 10;
SELECT p.title  FROM pages p  JOIN langs l ON p.lid = l.lid  WHERE l.lang = 'ca' AND p.words = (SELECT MAX(words) FROM pages WHERE lid = p.lid);
SELECT pid  FROM pages  WHERE title = 'Arqueozoologia';
SELECT w1st, w2nd, COUNT(*) AS occurrences FROM biwords JOIN langs ON biwords.lid = langs.lid JOIN langs_words ON langs_words.lid = langs.lid AND langs_words.wid = biwords.w1st OR langs_words.lid = langs.lid AND langs_words.wid = biwords.w2nd WHERE langs.lang = 'Catalan' AND langs.locale = 'Abadia' GROUP BY w1st, w2nd HAVING COUNT(*) = (     SELECT MAX(occurrences)      FROM (         SELECT w1st, w2nd, COUNT(*) AS occurrences         FROM biwords         JOIN langs ON biwords.lid = langs.lid         WHERE langs.lang = 'Catalan' AND langs.locale = 'Abadia'         GROUP BY w1st, w2nd     ) subquery );
SELECT p.title, pw.wid  FROM pages p  JOIN langs l ON p.lid = l.lid  WHERE l.lang = 'ca' AND l.locale = 'en'  GROUP BY p.pid, pw.wid  HAVING COUNT(DISTINCT pw.wid) = (SELECT MIN(cnt)                                   FROM (SELECT COUNT(DISTINCT wid) AS cnt                                         FROM words w                                         JOIN langs_words lw ON w.wid = lw.wid                                         WHERE lw.lid = (SELECT lid                                                         FROM langs                                                         WHERE lang = 'ca' AND locale = 'en')                                         GROUP BY w.word) AS subquery)   ORDER BY COUNT(pw.wid) DESC  LIMIT 5;
SELECT SUM(biwords_occurrences)  FROM biwords  JOIN langs ON biwords.lid = langs.lid  WHERE langs.lang = 'Catalan' AND biwords.w1st = 'i' AND biwords.w2nd = 'a';
SELECT w1st.word, w2nd.word  FROM biwords  JOIN words AS w1st ON biwords.w1st = w1st.wid  JOIN words AS w2nd ON biwords.w2nd = w2nd.wid  WHERE biwords occurrences = 2;
SELECT w1st.word, w2nd.word, MAX(occurrences)  FROM biwords  JOIN words AS w1st ON biwords.w1st = w1st.wid  JOIN words AS w2nd ON biwords.w2nd = w2nd.wid  WHERE w1st.lang = 'Addicio' AND w2nd.lang = 'Addicio'  GROUP BY w1st.word, w2nd.word  ORDER BY MAX(occurrences) DESC  LIMIT 1;
SELECT SUM(w.words)  FROM pages p  JOIN langs l ON p.lid = l.lid  JOIN words w ON p.words = w.wid  WHERE p.title IN ('Adam', 'Acampada');
SELECT pid  FROM pages  WHERE title LIKE 'Aigua dol%C3%A8sa%'
SELECT title  FROM pages  WHERE pid = (     SELECT pid      FROM (         SELECT pid, COUNT(*) as words_count          FROM pages_words          GROUP BY pid          ORDER BY words_count DESC          LIMIT 1     ) temp );
SELECT AVG(p.words)  FROM pages p  WHERE p.words >= 10
SELECT p.pid  FROM pages p  WHERE p.title IN (     SELECT DISTINCT t.title      FROM (         SELECT p.title, COUNT(w.word) AS word_count         FROM pages p         JOIN words w ON p.words = w.wid         GROUP BY p.pid     ) t     WHERE t.word_count < 10 ) LIMIT 5;
SELECT pid  FROM pages  WHERE title LIKE 'b%';
SELECT p.title  FROM pages p  JOIN pages_words pw ON p.pid = pw.pid  JOIN langs_words lw ON p.lid = lw.lid  WHERE lw.wid IN (SELECT wid FROM words WHERE word = 'desena')  AND pw.word = 'This' ;
SELECT w.wid  FROM pages p  JOIN words w ON p.wid = w.wid  WHERE p.title = 'Sometent';
SELECT p.title FROM pages p JOIN pages_words pw ON p.pid = pw.pid WHERE pw.wid = 88;
SELECT COUNT(*)  FROM pages  JOIN words ON pages.words = words.wid  WHERE LOWER(pages.title) LIKE '%del%' AND pages.title LIKE '%anomal%C3%ADstic%' AND words.word = 'del';
SELECT w1st.word, w2nd.word  FROM biwords  WHERE occurrences = 4;
SELECT      b.w1st + b.w2nd AS total_occurrences FROM      biwords b WHERE      b.w1st = 'nombre' OR b.w2nd = 'nombre';
SELECT w1st.word, w2nd.word  FROM biwords  JOIN words AS w1st ON biwords.w1st = w1st.wid  JOIN words AS w2nd ON biwords.w2nd = w2nd.wid  WHERE w1st.word = 'John' OR w2nd.word = 'John'  LIMIT 10;
SELECT p.pid FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE w.word = 'fresc';
SELECT      w1st AS 'first_word_id',     w2nd AS 'paired_word_id' FROM      biwords WHERE      w1st BETWEEN 1 AND 10     OR w2nd BETWEEN 1 AND 10;
SELECT      w.word,      SUM(pw.occurrences) as total_occurrences FROM      pages p  JOIN      langs l ON p.lid = l.lid JOIN      langs_words lw ON l.lid = lw.lid JOIN      pages_words pw ON p.pid = pw.pid WHERE      p.title = 'Atomium' GROUP BY      w.wid LIMIT      3;
SELECT word  FROM words  WHERE occurrences = (SELECT MAX(occurrences) FROM words);
SELECT DISTINCT p.pid  FROM pages p  WHERE p.title LIKE '%0%' OR p.title LIKE '%1%'  OR p.title LIKE '%2%' OR p.title LIKE '%3%'  OR p.title LIKE '%4%' OR p.title LIKE '%5%'  OR p.title LIKE '%6%' OR p.title LIKE '%7%'  OR p.title LIKE '%8%' OR p.title LIKE '%9%'  AND p.lid = (SELECT lid FROM langs WHERE lang = 'Catalan');
SELECT p.title FROM pages p WHERE p.words = (SELECT MIN(words) FROM pages)
SELECT w1st, w2nd  FROM biwords  WHERE occurrences = (SELECT MAX(occurrences) FROM biwords);
SELECT SUM(w.occurrences) FROM words w WHERE LENGTH(w.word) = 3;
SELECT      AVG(DISTINCT CASE WHEN title LIKE 'A%' THEN words ELSE NULL END)  FROM      pages;
SELECT      AVG(occurrences)  FROM      biwords  WHERE      w1st = 34;
SELECT      (COUNT(DISTINCT CASE WHEN p.words = 1500 THEN p.pid ELSE NULL END)      OVER () * 100)     /     (COUNT(DISTINCT p.pid) OVER ()) AS percentage FROM      pages p;
SELECT      (COUNT(CASE WHEN lw.wid = bw.w1st THEN lw.wid END) * 100.0 / COUNT(bw.occurrences)) AS percentage FROM      langs_words lw JOIN      biwords bw ON lw.lang = bw.lid;
SELECT p.title  FROM pages p  JOIN pages_words pw ON p.pid = pw.pid  JOIN words w ON pw.wid = w.wid  WHERE w.word = 'comunitat';
SELECT COUNT(DISTINCT pages)  FROM pages_words  JOIN words ON pages_words.wid = words.wid  WHERE word = 'ripoll';
SELECT COUNT(*)  FROM pages  WHERE title = 'Llista de conflictes armats' AND revision = (SELECT MAX(revision) FROM pages WHERE title = 'Llista de conflictes armats');
SELECT COUNT(*)  FROM biwords  WHERE (w1st = 'fukunaga' OR w1st = 'd''egees')  AND (w2nd = 'fukunaga' OR w2nd = 'd''egees');
SELECT      (SUM(occurrences) / COUNT(DISTINCT page)) AS average_repetitions FROM      pages WHERE      words = 100;
SELECT p.pid  FROM pages p  JOIN langs l ON p.lid = l.lid  WHERE l.lang = 'catalan' AND p.title = 'Acampada';
SELECT title  FROM pages  WHERE pages.words > 300  LIMIT 3;
SELECT SUM(occurrences)  FROM words  WHERE wid = 8;
SELECT wid, word  FROM words  ORDER BY occurrences DESC  LIMIT 3;
SELECT occurrences  FROM biwords  WHERE w1st = 1 OR w2nd = 1  AND w1st = 25 OR w2nd = 25;
SELECT COUNT(wid)  FROM pages  WHERE pid = 27457362;
SELECT      (COUNT(*) FILTER (WHERE occurrences > 16000 AND lid = 1) * 1.0 / COUNT(*) FILTER (WHERE lid = 1)) * 100 AS percentage FROM      words JOIN      langs  ON      langs.lid = words.lid;
SELECT pid  FROM pages  JOIN langs_words ON langs_words.wid = pages.wid  JOIN langs ON langs.lid = langs_words.lid  WHERE langs.lang = 'ca'  GROUP BY pid  ORDER BY SUM(langs_words occurrences) DESC  LIMIT 1;
SELECT      (COUNT(CASE WHEN bw occurrences < 80 THEN bl.lid END)       / CAST(COUNT(DISTINCT bl.lid) AS REAL)) * 100 AS percentage FROM      biwords bw JOIN      langs bl ON bw.lid = bl.lid WHERE      bl.lang = 'ca';
SELECT COUNT(*)  FROM pages  WHERE lid IN (SELECT lid FROM langs WHERE lang = 'ca');
SELECT p.page, p.title, p.revision  FROM pages AS p JOIN langs AS l ON p.lid = l.lid WHERE l.lang = 1 AND l.locale = 'ca' LIMIT 3;
SELECT l.lang  FROM langs l  JOIN biwords bw ON l.lid = bw.lid  WHERE bw.w1st = 1 AND bw.w2nd = 616;
SELECT SUM(words_occurrences)  FROM words  JOIN langs_words ON words.wid = langs_words.wid  JOIN langs ON langs.lid = langs_words.lid  WHERE lang = 'ca' AND word = 'nombre';
SELECT w.word FROM biwords b JOIN words w ON b.w1st = w.wid JOIN words w2 ON b.w2nd = w2.wid WHERE b.w1st = 1 AND b.w2nd = 8968;
SELECT word  FROM words  JOIN langs_words ON words.wid = langs_words.wid  WHERE langs_words.lid = 1  GROUP BY word  ORDER BY SUM(langs_words occurrences) DESC  LIMIT 1;
SELECT SUM(pw_occurrences) FROM pages_words pw JOIN words w ON pw.wid = w.wid WHERE pw.pid = 44 AND w.word = 'votives';
SELECT SUM(pw_occurrences) FROM pages_words pw JOIN biwords bw ON pw.wid = bw.w2nd AND bw.lid = (SELECT lid FROM langs WHERE pages = 16 AND locale = 'en') WHERE pw.pid = 16 AND bw.w1st = 1 AND bw.w2nd = 109;
SELECT      (COUNT(*) FILTER (WHERE occurrences < 180 AND lang = 'ca')::float /      COUNT(*) FILTER (WHERE lang = 'ca')) * 100 AS percentage FROM      words;
SELECT      (COUNT(CASE WHEN p.words > 10000 THEN p.pid END) * 100.0 / COUNT(CASE WHEN l.lang = 'ca' THEN p.pid END)) as percentage FROM      langs l JOIN      pages p ON l.lid = p.lid;
SELECT occurrences  FROM words  WHERE word = 'desena';
SELECT COUNT(*)  FROM words  WHERE occurrences > 10;
SELECT COUNT(DISTINCT p.pid)  FROM pages p  JOIN langs l ON p.lid = l.lid  WHERE l.lang = 'catalan';
SELECT COUNT(*)  FROM words  WHERE occurrences BETWEEN 2000 AND 5000;
SELECT title  FROM pages  JOIN langs ON pages.lid = langs.lid  WHERE langs.lang = 'catalan' AND pages.revision = 106601;
SELECT title  FROM pages  WHERE pid = 28040864;
SELECT occurrences  FROM biwords  WHERE w1st IN (     SELECT wid      FROM words      WHERE word = 'barcelona' ) AND w2nd IN (     SELECT wid      FROM words      WHERE word = 'precolombina' );
SELECT langs.locale  FROM langs  JOIN langs_words ON langs.lid = langs_words.lid  JOIN pages_words ON langs_words.wid = pages_words.wid  JOIN pages ON pages_words.pid = pages.pid  WHERE pages.title = 'Anys 90';
SELECT word  FROM words  JOIN langs_words ON words.wid = langs_words.wid  WHERE langs_words.lid IN (SELECT lid FROM langs WHERE lang = 'Catalan')  AND langs_words occurrences = 71303;
SELECT l.locale  FROM langs l  JOIN langs_words lw ON l.lid = lw.lid  JOIN pages p ON l.lid = p.lid  WHERE p.title = 'Abril';
SELECT SUM(pw_occurrences)  FROM pages_words AS pw JOIN biwords AS bw ON pw.wid = bw.w1st AND bw.w2nd = 317 OR pw.wid = bw.w2nd AND bw.w1st = 317 WHERE pw.pid IN (SELECT pid FROM pages WHERE words IN (SELECT lw.wid FROM langs_words AS lw WHERE lw.wid = 100))
SELECT COUNT(DISTINCT p.pid)  FROM pages p  JOIN pages_words pw ON p.pid = pw.pid  WHERE pw.occurrences = 2593;
SELECT title  FROM pages  JOIN pages_words ON pages.pid = pages_words.pid  WHERE pages_words.wid < 20;
SELECT COUNT(*)  FROM words  WHERE NOT EXISTS (     SELECT *      FROM biwords      WHERE biwords.wid IN (         SELECT wid          FROM words          GROUP BY wid          HAVING COUNT(DISTINCT langs_words.wid) = 3     ) ) AND (SELECT COUNT(*) FROM biwords WHERE w1st = word OR w2nd = word) < 2;
SELECT COUNT(wid), lid  FROM words  WHERE occurrences = 8;
SELECT      AVG(SUM(pw.occurrences) / COUNT(pw.occurrences)) * 100 AS avg_percentage FROM      pages_words pw JOIN      pages p ON pw.pid = p.pid WHERE      p.revision < 106680;
SELECT COUNT(DISTINCT p.pid)  FROM pages p  JOIN pages_words pw ON p.pid = pw.pid  WHERE pw.occurrences > 3000;
SELECT l1.word AS word1, l2.word AS word2  FROM biwords b  JOIN langs_words l1 ON b.w1st = l1.wid  JOIN langs_words l2 ON b.w2nd = l2.wid  WHERE l1.wid = 20 AND l2.wid = 50;
SELECT COUNT(DISTINCT p.pid)  FROM pages p  JOIN langs l ON p.lid = l.lid  WHERE l.lang = 'ca';
SELECT p.title  FROM pages p  JOIN langs l ON p.lid = l.lid  WHERE l.lang = 1 AND l.words > 4000;
SELECT COUNT(wid)  FROM pages  WHERE title = 'Asclepi';
SELECT      p.title FROM      pages p WHERE      p.title IN ('Afluent', 'Asclepi') AND (     (SELECT COUNT(*) FROM words w WHERE w.page = p.pid) >      (SELECT COUNT(*) FROM words w WHERE w.page = (SELECT pid FROM pages WHERE title = 'Asclepi'))     OR     (SELECT COUNT(*) FROM words w WHERE w.page = p.pid) >      (SELECT COUNT(*) FROM words w WHERE w.page = (SELECT pid FROM pages WHERE title = 'Afluent')) );
SELECT occurrences  FROM words  WHERE word = 'nombre';
SELECT w.word  FROM words w  JOIN langs_words ls ON w.wid = ls.wid  WHERE ls occurrences > 200000 AND lang = 'Catalan';
SELECT l.locale  FROM langs l  JOIN langs_words lw ON l.lid = lw.lid  JOIN pages p ON l.lid = p.lid  WHERE p.title = 'Asclepi';
SELECT COUNT(*)  FROM pages  JOIN pages_words ON pages.pid = pages_words.pid  JOIN words ON pages_words.wid = words.wid  WHERE words.word = 'grec' AND pages.title = 'Àbac';
SELECT p.title  FROM pages p  JOIN pages_words pw ON p.pid = pw.pid  JOIN langs_words lw ON p.lid = lw.lid  WHERE lw.word = 'grec' AND pw.occurrences > 20;
SELECT COUNT(*)  FROM words  WHERE word = 'grec' AND occurrences = 52;
SELECT occurrences  FROM biwords  WHERE w1st = 'àbac' AND w2nd = 'xinès';
SELECT      w1st,      w2nd,      MAX(occurrences)  FROM      biwords  WHERE      w1st = 'àbac' AND (w2nd = 'xinès' OR w2nd = 'grec')   UNION  SELECT      w1st,      w2nd,      MAX(occurrences)  FROM      biwords  WHERE      w2nd = 'àbac' AND (w1st = 'xinès' OR w1st = 'grec') ORDER BY      CASE          WHEN w1st = 'àbac' THEN              CASE                  WHEN w2nd = 'xinès' THEN 1                  ELSE 2              END          ELSE              CASE                  WHEN w1st = 'xinès' THEN 1                  ELSE 2              END      END,     MAX(occurrences) DESC LIMIT 1;
SELECT      (MAX(words.occurrences) - MAX(biwords.occurrences)) AS difference FROM      words JOIN      biwords ON words.wid = biwords.w1st OR words.wid = biwords.w2nd WHERE      (words.wid = (SELECT id FROM words WHERE word = 'àbac') AND     biwords.w1st = (SELECT id FROM words WHERE word = 'àbac') AND     biwords.w2nd = (SELECT id FROM words WHERE word = 'xinès')) OR     (words.wid = (SELECT id FROM words WHERE word = 'àbac') AND     biwords.w1st = (SELECT id FROM words WHERE word = 'xinès') AND     biwords.w2nd = (SELECT id FROM words WHERE word = 'àbac'));
SELECT b.* FROM biwords b JOIN words w ON b.w1st = w.wid WHERE w.word = 'àbac';
SELECT SUM(biwords_occurrences)  FROM biwords  WHERE w1st = 'àbac';
SELECT COUNT(DISTINCT p.pid)  FROM pages p  JOIN langs_words lw ON p.lid = lw.lid  JOIN biwords bw ON lw.wid = bw.w1st AND bw.w2nd = 'xinès' OR lw.wid = bw.w2nd AND bw.w1st = 'xinès'  WHERE bw.w1st = 'àbac' AND bw.w2nd = 'xinès';
SELECT      (MAX(l1.occurrences) - MAX(l2.occurrences)) /      COALESCE(MAX(l2.occurrences), 1) * 100 AS percentage_increase FROM      (     SELECT          pid,          COUNT(wid) as occurrences      FROM          pages_words pw      INNER JOIN          words w ON pw.wid = w.wid      WHERE          w.word = 'grec' AND          pw.page = (SELECT pid FROM pages WHERE title = 'Àbac')      GROUP BY          pid     ) l1,     (     SELECT          pid,          COUNT(wid) as occurrences      FROM          pages_words pw      INNER JOIN          words w ON pw.wid = w.wid      WHERE          w.word = 'grec' AND          pw.page = (SELECT pid FROM pages WHERE title = 'Astronomia')      GROUP BY          pid     ) l2;
SELECT COUNT(DISTINCT p.pid)  FROM langs l  JOIN langs_words lw ON l.lid = lw.lid  JOIN pages p ON l.lid = p.lid  WHERE l.lang = 'ca';
SELECT wid  FROM langs_words  WHERE lang = 'catalan'  AND occurrences = (SELECT MAX(occurrences) FROM langs_words WHERE lang = 'catalan');
SELECT w1st, w2nd  FROM biwords  WHERE occurrences = (SELECT MAX(occurrences) FROM biwords) LIMIT 1;
SELECT occurrences  FROM words  WHERE word = 'panajot';
SELECT word  FROM words  WHERE occurrences = 340691;
SELECT wid FROM words WHERE word = 'periodograma';
SELECT w2nd  FROM biwords  WHERE occurrences = 116430;
SELECT SUM(biwords_occurrences)  FROM biwords  WHERE w1st = (SELECT wid FROM words WHERE word = 'riu')  AND w2nd = (SELECT wid FROM words WHERE word = 'riu');
SELECT wid  FROM pages_words  WHERE title = 'Agricultura'  AND occurrences = (SELECT MAX(occurrences) FROM pages_words);
SELECT SUM(pws.occurrences)  FROM pages_words pws  JOIN pages p ON pws.pid = p.pid  JOIN langs l ON p.lid = l.lid  WHERE p.title = 'Astre' AND pws.wid = 2823;
SELECT title  FROM pages  JOIN pages_words ON pages.pid = pages_words.pid  WHERE wid = 174 AND pages_words.occurrences = (SELECT MAX(occurrences) FROM pages_words WHERE wid = 174);
SELECT SUM(pw occurrences)  FROM pages_words pw  JOIN langs l ON pw.lid = l.lid  WHERE l.lang = 'es' AND pw.word = 'heròdot'
SELECT wid FROM pages_words WHERE pid IN (SELECT pid FROM pages WHERE revision = 28278070) ORDER BY occurrences DESC LIMIT 1;
SELECT SUM(biwords_occurrences)  FROM biwords  WHERE w1st IN (     SELECT lid      FROM langs_words      WHERE word = 'que' ) AND w2nd IN (     SELECT lid      FROM langs_words      WHERE word = 'gregorio' );
SELECT COUNT(*)  FROM biwords  JOIN langs ON biwords.lid = langs.lid  WHERE langs.word = 'base' AND biwords.w2nd IN (SELECT wid FROM words WHERE word = 'base');
SELECT COUNT(*)  FROM langs  JOIN langs_words ON langs.lid = langs_words.lid  WHERE langs.lang = 'catalan' AND langs_words.word = 'exemple' AND langs_words.occurrences > 0;
SELECT word  FROM words  JOIN langs_words ON words.wid = langs_words.wid  WHERE langs_words.lid = 1 AND langs_words occurrences = 274499;
SELECT      (TW.Occurrences - BW_OCC.a_base_occurrences) / BW_OCC.a_decimal_occurrences AS Ratio  FROM      (         SELECT              SUM(CASE WHEN W1ST='a' AND W2ND='base' THEN Occurrences ELSE 0 END) AS a_base_occurrences          FROM              biwords      ) AS BW_OCC,      (         SELECT              SUM(CASE WHEN W1ST='a' AND W2ND='decimal' THEN Occurrences ELSE 0 END) AS a_decimal_occurrences          FROM              biwords      ) AS BW_OCC2,     (         SELECT              SUM(CASE WHEN W1ST='a' AND W2ND='base' THEN Occurrences ELSE 0 END) OVER () AS TotalBaseOccurrences,             SUM(CASE WHEN W1ST='a' AND W2ND='decimal' THEN Occurrences ELSE 0 END) OVER () AS TotalDecimalOccurrences         FROM              biwords      ) AS TW WHERE      TW.TotalBaseOccurrences > TW.TotalDecimalOccurrences;
SELECT      (pww.occurrences / p.occurrences) * 100 AS percentage FROM      pages_words ww JOIN      pages p ON ww.pid = p.pid JOIN      words w ON w.wid = ww.wid JOIN      langs l ON l.lid = p.lid JOIN      langs_words lw ON lw.lid = l.lid AND lw.wid = w.wid WHERE      w.word = 'grec' AND      p.title = 'Art';
SELECT COUNT(DISTINCT p.pid)  FROM pages p  JOIN langs_words lw ON p.lid = lw.lid  WHERE lw.wid IS NOT NULL AND lw.word IS NOT NULL AND lw.occurrences IS NOT NULL  AND lw.occurrences > 4000 AND p.lid = 1;
SELECT p.title  FROM pages p  JOIN langs l ON p.lid = l.lid  WHERE l.lang = 1 AND l.words = 10 AND p.words = 10
SELECT word  FROM words JOIN langs_words ON words.wid = langs_words.wid WHERE langs_words.lid IN (SELECT lid FROM langs WHERE lang = 'Catalan') ORDER BY occurrences DESC LIMIT 1;
SELECT p.title  FROM pages p  JOIN langs l ON p.lid = l.lid  WHERE l.lang = 1  ORDER BY p.words DESC  LIMIT 3;
SELECT p.revision  FROM pages p  JOIN langs l ON p.lid = l.lid  WHERE l.lang = 1 AND p.title = 'Arqueologia';
SELECT COUNT(*)  FROM pages  WHERE lid = 1 AND words > 300 AND revision > 28330000;
SELECT DISTINCT pw.pid  FROM pages_words pw  JOIN words w ON pw.wid = w.wid  WHERE w.word = 'nombre';
SELECT COUNT(*)  FROM pages  WHERE lid IN (SELECT lid FROM langs WHERE lang = 'catalan')  AND pid IN (SELECT pw.pid FROM words AS w JOIN pages_words AS pw ON w.wid = pw.wid WHERE w.word = 'nombre' AND pw.occurrences > 5);
SELECT COUNT(*)  FROM biwords  WHERE w2nd = (SELECT wid WHERE word = 'grec');
SELECT p.title  FROM pages p  JOIN pages_words pw ON p.pid = pw.pid  WHERE pw.word = 'grec' AND pw.occurrences = 52;
SELECT COUNT(*)  FROM biwords  JOIN langs ON biwords.lid = langs.lid  WHERE w1st = 'àbac' AND occurrences > 10;
SELECT      p.pid,     AVG(pw_occurrences) AS avg_grec_occurrences FROM      pages p JOIN      pages_words pw ON p.pid = pw.pid WHERE      p.words LIKE '%grec%' AND pw.word = 'grec' GROUP BY      p.pid;
SELECT COUNT(*)  FROM Airlines  WHERE FL_DATE = '2018/8/1';
SELECT COUNT(*)  FROM Airlines  WHERE FL_DATE = '2018/8/1' AND ORIGIN = 'JFK';
SELECT DEST  FROM Airlines  WHERE FL_DATE = '2018/8/1' AND CANCELLED = 1;
SELECT FL_DATE FROM Airlines WHERE CANCELLED = 1 AND CANCELLATION_CODE = 'A';
SELECT DISTINCT ORIGIN  FROM Airlines  WHERE FL_DATE = '2018/8/1' AND DEP_DELAY > 0;
SELECT COUNT(*)  FROM Airlines  WHERE FL_DATE = '2018/8/1'  AND ORIGIN = (SELECT Code FROM Airports WHERE Description = 'New York, NY: John F. Kennedy International')
SELECT DEST  FROM Airlines  WHERE FL_DATE = '2018/8/1'  AND DEP_DELAY = (SELECT MAX(DEP_DELAY) FROM Airlines WHERE FL_DATE = '2018/8/1');
SELECT COUNT(*)  FROM Airlines  WHERE ORIGIN = 'New York, NY: John F. Kennedy International' AND ARR_DELAY < 0;
SELECT MIN(DEP_TIME)  FROM Airlines  JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code  JOIN Airports ON Airlines.ORIGIN_AIRPORT_ID = Airports.Code  WHERE Airports.Description = 'New York, NY: John F. Kennedy International' AND FL_DATE = '2018/8/1';
SELECT COUNT(*)  FROM Airlines  WHERE FL_DATE = '2018/8/1'  AND OP_CARRIER_AIRLINE_ID IN (     SELECT AC.Code      FROM Air Carriers AC      WHERE AC.Description = 'American Airlines Inc.: AA' )
SELECT Airlines.OP_CARRIER_FL_NUM  FROM Airlines  JOIN Air_carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_carriers.Code  WHERE Air_carriers.Description = 'American Airlines Inc.: AA' AND Airlines.ORIGIN = (     SELECT Airports.Code      FROM Airports      WHERE Airports.Description = 'New York, NY: John F. Kennedy International' );
SELECT COUNT(*)  FROM Airlines  JOIN Air_Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_Carriers.Code  WHERE Air_Carriers.Description = 'American Airlines Inc.: AA'  AND Airlines.FL_DATE = '2018/8/1'  AND Airlines.ACTUAL_ELAPSED_TIME < Airlines.CRS_ELAPSED_TIME;
SELECT OP_CARRIER_FL_NUM  FROM Air_carriers  JOIN Airlines ON Air_carriers.Code = Airlines.OP_CARRIER_AIRLINE_ID  WHERE Air_carriers.Description = 'American Airlines Inc.: AA'  ORDER BY DEP_DELAY DESC  LIMIT 1;
SELECT COUNT(*)  FROM Airlines  JOIN Air_carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_carriers.Code  WHERE Air_carriers.Description = 'American Airlines Inc.: AA' AND Airlines.DEST = 'JFK';
SELECT COUNT(*)  FROM Airlines  JOIN Air_carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_carriers.Code  WHERE Air_carriers.Description = 'American Airlines Inc.: AA' AND Airlines.FL_DATE = '2018/8/1' AND Airlines.CANCELLED = 1;
SELECT      CASE          WHEN SUM(CASE WHEN T1.Description = 'American Airlines Inc.: AA' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.Description = 'Endeavor Air Inc.: 9E' THEN 1 ELSE 0 END) THEN 'American Airlines Inc.'         WHEN SUM(CASE WHEN T1.Description = 'American Airlines Inc.: AA' THEN 1 ELSE 0 END) < SUM(CASE WHEN T1.Description = 'Endeavor Air Inc.: 9E' THEN 1 ELSE 0 END) THEN 'Endeavor Air Inc.'         ELSE 'Equal'     END AS Operator,     COUNT(*) AS NumberOfFlights FROM      AirCarriers AS T1 JOIN      Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE      T2.FL_DATE = '2018-08-01' GROUP BY      Operator;
SELECT      AVG(airlines.DEP_DELAY) AS avg_departure_delay_time FROM      airlines JOIN      air_carriers ON airlines.OP_CARRIER_AIRLINE_ID = air_carriers.Code WHERE      air_carriers.Description = 'American Airlines Inc.: AA';
SELECT AVG(T1.flights_on_avg)  FROM (     SELECT COUNT(*) AS flights_on_avg      FROM Airlines      JOIN Air Carriers T2 ON Airlines.OP_CARRIER_AIRLINE_ID = T2.Code      WHERE T2.Description = 'American Airlines Inc.: AA' AND YEAR(FL_DATE) = 2018 AND MONTH(FL_DATE) = 8 ) T1;
SELECT COUNT(DISTINCT Code) AS Number_of_Air_Carriers FROM Air_Carriers;
SELECT COUNT(*)  FROM Airlines  WHERE ORIGIN = 'Los Angeles, CA: Los Angeles International' AND FL_DATE = '2018/8/27';
SELECT COUNT(*)  FROM Airlines  JOIN Airports ON Airlines.DEST_AIRPORT_ID = Airports.Code  WHERE Airports.Description = 'Oakland' AND FL_DATE = '2018/8/7';
SELECT COUNT(*)  FROM Airlines  JOIN Air_carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_carriers.Code  WHERE Air_carriers.Description = 'Alaska Airlines Inc.: AS'  AND Airlines.FL_DATE = '2018/8/2'  AND Airlines.DEP_DELAY > 0;
SELECT COUNT(*)  FROM Airlines  WHERE FL_DATE = '2018/8/12' AND DEST = 'MIA' AND ARR_DELAY < 0;
SELECT COUNT(*)  FROM Airlines  JOIN Air_Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_Carriers.Code  WHERE Air_Carriers.Description = 'American Airlines Inc.: AA' AND Airlines.CANCELLED = 1 AND Airlines.CANCELLATION_CODE = 'A';
SELECT COUNT(*)  FROM Airlines  JOIN Air_carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_carriers.Code  WHERE Air_carriers.Description = 'Endeavor Air Inc.: 9E' AND Airlines.FL_DATE = '2018/8/31' AND Airlines.ACTUAL_ELAPSED_TIME < Airlines.CRS_ELAPSED_TIME;
SELECT COUNT(*)  FROM Airlines  JOIN Air_Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_Carriers.Code  WHERE Air_Carriers.Description = 'Spirit Air Lines: NK' AND Airlines.FL_DATE = '2018/8/7';
SELECT `Description`  FROM Air Carriers  WHERE `Code` IN (   SELECT `OP_CARRIER_AIRLINE_ID`    FROM Airlines    WHERE `TAIL_NUM` = 'N702SK' );
SELECT      T1.Description  FROM      Airlines AS T1  JOIN      Airports AS T2  ON      T1.DEST = T2.Code  WHERE      T1.FL_DATE = '2018/8/15'  GROUP BY      T2.Description  ORDER BY      COUNT(T1.DEST) DESC  LIMIT 1;
SELECT AC.Description  FROM Airlines A  JOIN AirCarriers AC ON A.OP_CARRIER_AIRLINE_ID = AC.Code  JOIN Airlines AC2 ON A.OP_CARRIER_AIRLINE_ID = AC2.Code  WHERE A.ORIGIN = 'ATL'  AND A.DEST = 'PHL'  AND A.FL_DATE = '2018/8/1'  AND A.CRS_DEP_TIME = '2040'
SELECT COUNT(*)  FROM Airlines  WHERE FL_DATE = '2018/8/15' AND DEST = (SELECT Code FROM Airports WHERE Description = 'Lake Charles, LA: Lake Charles Regional');
SELECT COUNT(*)  FROM Airlines  JOIN Airports ON Airlines.ORIGIN_AIRPORT_ID = Airports.Code  JOIN Airports ON Airlines.DEST_AIRPORT_ID = Airports.Code  WHERE Airports.Description = 'San Diego, CA: San Diego International'  AND Airports.Description = 'Los Angeles, CA: Los Angeles International'  AND FL_DATE LIKE '2018/8%'
SELECT      (SUM(CASE WHEN Airlines.CANCELLATION_CODE = 'C' AND Airlines.ORIGIN_DESCRIPTION = 'Los Angeles, CA: Los Angeles International' AND Airlines.CANCELLED = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(Airlines.FL_DATE)) ASCancellationPercentage FROM      Airlines JOIN      Airports ON Airlines.ORIGIN_AIRPORT_ID = Airports.Code JOIN      AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE      Airports.Description = 'Los Angeles, CA: Los Angeles International';
SELECT      (SUM(CASE WHEN T1.DEST LIKE '%Pittsburgh%' AND T1.ACTUAL_ELAPSED_TIME < T1.CRS_ELAPSED_TIME THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.FL_DATE)) AS percentage FROM      Airlines AS T1 JOIN      Airports AS T2 ON T1.DEST_AIRPORT_ID = T2.Code WHERE      T2.Description = 'Pittsburgh' ;
SELECT Description FROM Air Carriers WHERE Code = 19049;
SELECT COUNT(*)  FROM Airlines  WHERE FL_DATE = '2018/8/1' AND DEP_DELAY <= 0;
SELECT Code FROM Airports WHERE Description LIKE '%Ankara, Turkey%';
SELECT MAX(WEATHER_DELAY) AS longest_weather_delay FROM Airlines WHERE ORIGIN_AIRPORT_ID = 12264;
SELECT `Code`  FROM Airports  WHERE `Description` = 'Anita Bay, AK: Anita Bay Airport';
SELECT ORIGIN_AIRPORT_ID  FROM Airlines  WHERE LATE_AIRCRAFT_DELAY = (SELECT MAX(LATE_AIRCRAFT_DELAY) FROM Airlines);
SELECT COUNT(*)  FROM Airlines  WHERE DEST = 'Atlanta, GA: Hartsfield-Jackson Atlanta International'  AND ORIGIN = 'Chicago, IL: Chicago O\'Hare International';
SELECT COUNT(*)  FROM Air Carriers  WHERE Description = 'Southwest Airlines Co.: WN';
SELECT      FL_DATE FROM      Airlines WHERE      FL_DATE LIKE '2018/8%'     AND CANCELLED = 1     AND CANCELLATION_CODE = 'A'     AND DEST = 'Dallas/Fort Worth, TX: Dallas/Fort Worth International' GROUP BY      FL_DATE ORDER BY      COUNT(*) DESC LIMIT 1;
SELECT TAIL_NUM  FROM Airlines  WHERE FL_DATE LIKE '2018/8%'  AND DEST = (SELECT Code FROM Airports WHERE Description = 'Bakersfield, CA: Meadows Field')  AND ARR_DELAY <= 0;
SELECT Airlines.OP_CARRIER_AIRLINE_ID FROM Airlines JOIN DEST ON Airlines.DEST = DEST.Code WHERE DEST.Description = 'Boston, MA: Logan International' AND SECURITY_DELAY = (SELECT MAX(SECURITY_DELAY) FROM Airlines)
SELECT      Description  FROM      Air_carriers  WHERE      Code IN (         SELECT              OP_CARRIER_AIRLINE_ID          FROM              Airlines          GROUP BY              OP_CARRIER_AIRLINE_ID          ORDER BY              COUNT(TAIL_NUM) DESC          LIMIT 5     )
SELECT      T1.Description  FROM      Air Carriers AS T1  JOIN      Airlines AS T2  ON      T1.Code = T2.OP_CARRIER_AIRLINE_ID  GROUP BY      T1.Description  ORDER BY      COUNT(CASE WHEN T2.CANCELLED = 0 THEN 1 END) DESC  LIMIT 1;
SELECT `Description`  FROM Airlines  WHERE `TAIL_NUM` = 'N202NN';
SELECT      T1.Description  FROM      Airlines AS T1  JOIN      Airlines AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.OP_CARRIER_AIRLINE_ID  JOIN      Airports AS T3 ON T2.DEST_AIRPORT_ID = T3.Code  WHERE      T3.Description = 'Chicago, IL: Chicago Midway International'  GROUP BY      T1.Description  ORDER BY      COUNT(T2.OP_CARRIER_AIRLINE_ID) DESC  LIMIT 1;
SELECT T1.TAIL_NUM  FROM Air_carriers AS T1  JOIN Airlines AS T2  ON T1.Code = T2.OP_CARRIER_AIRLINE_ID  WHERE T1.Description = 'Compass Airlines: CP' AND T2.ORIGIN = 'LAX' AND T2.DEST = 'ABQ'  GROUP BY T1.TAIL_NUM  ORDER BY COUNT(T2.OP_CARRIER_AIRLINE_ID) DESC  LIMIT 1;
SELECT Origin FROM Airlines JOIN Air_carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_carriers.Code WHERE Description = 'Republic Airline: YX' GROUP BY Origin ORDER BY COUNT(Origin) DESC LIMIT 1;
SELECT      AC.Description AS Airline,     MIN(TIMESTAMPDIFF(SECOND, ATS, ACT)) AS FastestFlightTimeInSeconds FROM      Airlines A JOIN      AirCarriers AC ON A.OP_CARRIER_AIRLINE_ID = AC.Code JOIN      (         SELECT              OP_CARRIER_AIRLINE_ID,             MIN(SUBTRACT(ACTUAL_ELAPSED_TIME, CRS_ELAPSED_TIME)) AS FastestFlightTimeInSeconds         FROM              Airlines         GROUP BY              OP_CARRIER_AIRLINE_ID     ) AS FastestFlights ON A.OP_CARRIER_AIRLINE_ID = FastestFlights.OP_CARRIER_AIRLINE_ID GROUP BY      AC.Code,      FastestFlights.FastestFlightTimeInSeconds ORDER BY      FastestFlights.FastestFlightTimeInSeconds ASC LIMIT 1;
SELECT      T1.TAIL_NUM,     MAX(DIVIDE(SUM(T1.LATE_AIRCRAFT_DELAY), 60)) AS max_delayed_hours FROM      Airlines AS T1 JOIN      Air Carriers AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE      T2.Description = 'Delta Air Lines Inc.: DL'     AND T1.FL_DATE LIKE '2018/8/%' GROUP BY      T1.TAIL_NUM ORDER BY      max_delayed_hours DESC LIMIT 1;
SELECT Code, Description  FROM Airports  LIMIT 3;
SELECT Code FROM Air_Carriers WHERE Description LIKE 'Mississippi Valley Airlines%';
SELECT CRS_DEP_TIME, DEP_TIME  FROM Airlines  WHERE TAIL_NUM = 'N627AE'  AND FL_DATE = '2018/8/13'  AND ORIGIN = 'PHL'  AND DEST = 'MDT';
SELECT COUNT(*)  FROM Airlines  WHERE FL_DATE = '2018/8/1' AND ORIGIN = 'ABE';
SELECT DEST  FROM Airlines  WHERE ORIGIN = 'ABY';
SELECT COUNT(*)  FROM Airlines  WHERE ORIGIN = 'DFW' AND DEST = 'SNA' AND DEP_DELAY = 0;
SELECT COUNT(*)  FROM Airlines  WHERE ORIGIN = 'Charlotte, NC: Charlotte Douglas International'  AND DEST = 'Austin, TX: Austin - Bergstrom International'  AND CANCELLATION_CODE = 'A';
SELECT      OP_CARRIER_AIRLINE_ID  FROM      Airlines  WHERE      CANCELLED = 1  GROUP BY      OP_CARRIER_AIRLINE_ID  ORDER BY      COUNT(CANCELLED) DESC  LIMIT 1;
SELECT DEP_TIME  FROM Airlines  JOIN Air_Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_Carriers.Code  WHERE Air_Carriers.Description LIKE '%JetBlue Airways%'  AND Airlines.TAIL_NUM = 'N903JB'  AND Airports.Description LIKE '%Fort Lauderdale-Hollywood%'  AND Airlines.ORIGIN = Airports.Code  AND Airlines.DEST = (SELECT Code FROM Airports WHERE Description LIKE '%Fort Lauderdale-Hollywood%')  AND Airlines.FL_DATE = '2018/8/20';
SELECT DISTINCT AC.Description  FROM Airlines A  JOIN Air_Carriers AC ON A.OP_CARRIER_AIRLINE_ID = AC.Code  WHERE A.ORIGIN = 'ACY' AND A.DEST = 'FLL';
SELECT Description FROM Airports WHERE Code = 'A11';
SELECT COUNT(*)  FROM Airlines  WHERE Origin = 'OKC';
SELECT COUNT(*)  FROM Airports  WHERE Code LIKE 'C%';
SELECT DEST  FROM Airlines  WHERE OP_CARRIER_FL_NUM = 1596;
SELECT Description  FROM Airports  WHERE Code LIKE '%3';
SELECT Code FROM Airports WHERE Description = 'Driftwood Bay, AK: Driftwood Bay Airport';
SELECT COUNT(*)  FROM Airlines  WHERE CANCELLED = 1;
SELECT TAIL_NUM  FROM Airlines  WHERE FL_DATE = '2018/8/17';
SELECT ORIGIN FROM Airlines WHERE ACTUAL_ELAPSED_TIME = (SELECT MIN(ACTUAL_ELAPSED_TIME) FROM Airlines);
SELECT FL_DATE, TAIL_NUM  FROM Air Carriers  JOIN Airlines ON Air Carriers.Code = Airlines.OP_CARRIER_AIRLINE_ID  WHERE Description = 'Ross Aviation Inc.: GWE';
SELECT `Description`, `Code`  FROM Air Carriers  WHERE `Code` = (     SELECT AC2.`Code`      FROM Airlines AS AC1      JOIN Air Carriers AS AC2 ON AC1.OP_CARRIER_AIRLINE_ID = AC2.Code      WHERE AC1.ARR_TIME = (         SELECT MIN(T.arr_time)          FROM (             SELECT MIN(ARR_TIME) as arr_time              FROM Airlines              GROUP BY OP_CARRIER_AIRLINE_ID         ) AS T     ) );
SELECT COUNT(*)  FROM Airlines  JOIN Air_Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_Carriers.Code  WHERE Air_Carriers.Description LIKE '%JetBlue Airways%' AND Airlines.ARR_DELAY_NEW = 0;
SELECT T3.Description  FROM Airlines AS T1  JOIN Airports AS T2 ON T1.DEST_AIRPORT_ID = T2.Code  JOIN Air Carriers AS T3 ON T3.Code = T1.OP_CARRIER_AIRLINE_ID  WHERE T2.Description = 'Miami International Airport';
SELECT tc.Description  FROM Airlines a  JOIN AirCarriers tc ON tc.Code = a.OP_CARRIER_AIRLINE_ID  WHERE a.CANCELLED = 1;
SELECT ACTUAL_ELAPSED_TIME  FROM Air Carriers  JOIN Airlines ON Air Carriers.Code = Airlines.OP_CARRIER_AIRLINE_ID  WHERE Description = 'Semo Aviation Inc.: SEM';
SELECT TAIL_NUM  FROM Airlines  JOIN Air_Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_Carriers.Code  WHERE Air_Carriers.Description = 'Asap Air Inc.: ASP'  ORDER BY DEP_DELAY DESC  LIMIT 1;
SELECT `Description` FROM Air Carriers JOIN Airlines ON Air Carriers.Code = Airlines.OP_CARRIER_AIRLINE_ID WHERE Airlines.DEP_DELAY = 0;
SELECT T1.Description  FROM Air_Carriers AS T1 JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ACTUAL_ELAPSED_TIME = (SELECT MAX(ACTUAL_ELAPSED_TIME) FROM Airlines)
SELECT DISTINCT DEST FROM airlines JOIN air_carriers ON airlines.OP_CARRIER_AIRLINE_ID = air_carriers.Code WHERE air_carriers.Description = 'Southeast Alaska Airlines: WEB';
SELECT COUNT(*)  FROM Airlines  JOIN Air_Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_Carriers.Code  WHERE Air_Carriers.Description = 'Spirit Air Lines: NK'  AND CANCELLED = 1  AND FL_DATE BETWEEN '2018/8/10' AND '2018/8/20'
SELECT COUNT(*)  FROM Airlines  JOIN Air_Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_Carriers.Code  WHERE Air_Carriers.Description LIKE '%Horizon Air%' AND Airlines.FL_DATE = '2018/8/2';
SELECT TAIL_NUM  FROM Airlines  WHERE Description = 'Iscargo Hf: ICQ' AND ARR_TIME <= 1000;
SELECT FL_DATE FROM Airlines JOIN Air_carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_carriers.Code WHERE Air_carriers.Description = 'Profit Airlines Inc.: XBH' AND Airlines.ACTUAL_ELAPSED_TIME < 100;
SELECT COUNT(*)  FROM Airlines A  JOIN Air Carriers AC ON A.OP_CARRIER_AIRLINE_ID = AC.Code  WHERE AC.Description = 'Republic Airline' AND A.DEP_DELAY > 30;
SELECT DISTINCT AC.Description  FROM Airlines AS AL JOIN Air Carriers AS AC ON AL.OP_CARRIER_AIRLINE_ID = AC.Code WHERE AL.FL_DATE = '2018/8/25' AND AL.DEP_DELAY = -5;
SELECT `Description` FROM Air Carriers JOIN Airlines ON Air Carriers.Code = Airlines.OP_CARRIER_AIRLINE_ID WHERE TAIL_NUM = 'N922US' AND ORIGIN = 'PHX';
SELECT      AC.Description FROM      Airlines A JOIN      AirCarriers AC ON A.OP_CARRIER_AIRLINE_ID = AC.Code WHERE      A.ARR_DELAY < 0 AND A.DEP_DELAY < 0;
SELECT TAIL_NUM  FROM Airlines  JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code  WHERE Air Carriers.Description = 'Southwest Airlines Co.: WN'  AND ACTUAL_ELAPSED_TIME < (AVG(ACTUAL_ELAPSED_TIME) * 0.8);
SELECT `Description` FROM Air Carriers WHERE NOT EXISTS (     SELECT *     FROM Airlines     WHERE DEST = 'PHX'     AND ARR_TIME >= (SELECT AVG(ARR_TIME) * 0.4 FROM Airlines WHERE DEST = 'PHX') );
SELECT      (SUM(CASE WHEN dep_delay < 0 THEN 1 ELSE 0 END) * 1.0 / COUNT(*)) * 100 AS early_departure_percentage FROM      airlines JOIN      air_carriers ON airlines.OP_CARRIER_AIRLINE_ID = air_carriers.Code WHERE      air_carriers.Description LIKE '%American Airlines%' AND      dep_delay < 0;
SELECT COUNT(*)  FROM book  WHERE publisher_id = 1929 AND num_pages > 500;
SELECT publication_date  FROM book  WHERE num_pages = (SELECT MAX(num_pages) FROM book);
SELECT T1.publisher_name  FROM publisher AS T1  JOIN book AS T2 ON T1.publisher_id = T2.publisher_id  WHERE T2.title = 'The Illuminati';
SELECT COUNT(*)  FROM book  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE publisher.publisher_name = 'Thomas Nelson';
SELECT publisher_name FROM publisher WHERE publisher_id = (     SELECT publisher_id      FROM book      GROUP BY publisher_id      ORDER BY COUNT(book_id) DESC      LIMIT 1 );
SELECT title  FROM book  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE publisher.publisher_name = 'Thomas Nelson'  ORDER BY publication_date ASC  LIMIT 1;
SELECT COUNT(*)  FROM book  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE publisher.publisher_name = 'Thomas Nelson' AND book.num_pages > 300;
SELECT p.publisher_name  FROM publisher p  JOIN book b ON p.publisher_id = b.publisher_id  WHERE b.num_pages = (SELECT MAX(num_pages) FROM book);
SELECT COUNT(*)  FROM book  JOIN book_language ON book.language_id = book_language.language_id  WHERE book_language.language_name = 'English';
SELECT title  FROM book  JOIN book_language ON book.language_id = book_language.language_id  JOIN language_code ON book_language.language_code = 'en-GB' WHERE language_name = 'British English';
SELECT MIN(T2.price)  FROM book AS T1  JOIN order_line AS T2 ON T1.book_id = T2.book_id  JOIN cust_order AS T3 ON T3.order_id = T2.order_id  WHERE T1.title = 'The Little House';
SELECT T3.title  FROM `order_line` AS T1 JOIN `cust_order` AS T2 ON T1.order_id = T2.order_id JOIN `book` AS T3 ON T3.book_id = T1.book_id JOIN `book_author` AS T4 ON T3.book_id = T4.book_id JOIN `author` AS T5 ON T5.author_id = T4.author_id WHERE T5.author_name = 'Lucas Wyldbore'
SELECT COUNT(*)  FROM books  JOIN book_author ON books.book_id = book_author.book_id  JOIN customer ON customer.customer_id = cust_order.customer_id  WHERE customer.first_name = 'Lucas' AND customer.last_name = 'Wyldbore' AND books.num_pages > 300;
SELECT SUM(ol.price)  FROM order_line ol  JOIN book b ON ol.book_id = b.book_id  JOIN cust_order co ON ol.order_id = co.order_id  JOIN customer c ON co.customer_id = c.customer_id  WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';
SELECT AVG(T2.price)  FROM customer AS T1  JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id  JOIN order_line AS T3 ON T2.order_id = T3.order_id  JOIN book AS T4 ON T3.book_id = T4.book_id  WHERE T1.first_name = 'Lucas' AND T1.last_name = 'Wyldbore'
SELECT      (COUNT(CASE WHEN order_line.price > 13 THEN order_line.order_id END) / CAST(COUNT(order_line.order_id) AS REAL)) * 100 AS percentage_books_over_13 FROM      order_line JOIN      cust_order ON order_line.order_id = cust_order.order_id JOIN      customer ON cust_order.customer_id = customer.customer_id WHERE      customer.first_name = 'Lucas' AND customer.last_name = 'Wyldbore'
SELECT T1.city  FROM address AS T1  JOIN customer_address AS T2 ON T1.address_id = T2.address_id  WHERE T2.address_id = 547;
SELECT COUNT(*)  FROM cust_order  JOIN customer ON cust_order.customer_id = customer.customer_id  WHERE customer.first_name = 'Cordy' AND customer.last_name = 'Dumbarton';
SELECT title  FROM book  JOIN book_language ON book.language_id = book_language.language_id  WHERE book_language.language_name = 'Japanese'  ORDER BY publication_date ASC  LIMIT 1;
SELECT publisher_name FROM publisher WHERE publisher_id = (     SELECT publisher_id      FROM book      GROUP BY publisher_id      ORDER BY COUNT(book_id) DESC      LIMIT 1 );
SELECT COUNT(*)  FROM book  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE publisher.publisher_name = 'Kensington';
SELECT language_name  FROM book_language  JOIN book ON book.language_id = book_language.language_id  WHERE book.book_id = 1405;
SELECT first_name, last_name  FROM customer  WHERE customer_id IN (     SELECT customer_id      FROM cust_order      GROUP BY customer_id      ORDER BY COUNT(order_id) DESC      LIMIT 1 )
SELECT title  FROM book  WHERE book_id IN (     SELECT book_id      FROM order_line      WHERE order_id IN (         SELECT order_id          FROM cust_order          WHERE status_id = (SELECT status_id FROM order_status WHERE status_value = 'sold')     )      GROUP BY book_id      ORDER BY COUNT(*) DESC      LIMIT 1 );
SELECT COUNT(*)  FROM book_author  JOIN author ON book_author.author_id = author.author_id  WHERE author.author_name = 'David Foster Wallace';
SELECT COUNT(*)  FROM order_line  JOIN book ON order_line.book_id = book.book_id  WHERE book.title = 'O Xará';
SELECT T4.country_name  FROM customer AS T1  JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id  JOIN address AS T3 ON T2.address_id = T3.address_id  JOIN country AS T4 ON T3.country_id = T4.country_id  WHERE T1.first_name = 'Malina' AND T1.last_name = 'Johnson';
SELECT COUNT(*)  FROM address  JOIN country ON address.country_id = country.country_id  WHERE country.country_name = 'Ukraine';
SELECT country_name  FROM country  WHERE country_id = (SELECT country_id FROM address WHERE city = 'Žirovnica');
SELECT      (COUNT(CASE WHEN T2.method_name = 'International' THEN T1.order_id ELSE NULL END)      / COUNT(T1.order_id)) * 100 AS international_shipping_percentage FROM      cust_order AS T1 JOIN      shipping_method AS T2 ON      T1.shipping_method_id = T2.method_id WHERE      T1.order_date LIKE '2022-11-10%'
SELECT AVG(T1.num_pages)  FROM book AS T1 JOIN book_author AS T2 ON T1.book_id = T2.book_id JOIN author AS T3 ON T3.author_id = T2.author_id JOIN customer AS T4 ON T4.customer_id = T1.publisher_id WHERE T3.author_name = 'David Coward'
SELECT cost  FROM shipping_method  WHERE method_name = 'Standard'  ORDER BY cost ASC  LIMIT 1;
SELECT title  FROM book  WHERE publication_date LIKE '1900%'  ORDER BY publication_date ASC  LIMIT 1;
SELECT first_name, last_name  FROM customer  WHERE email = 'aalleburtonkc@yellowbook.com';
SELECT COUNT(*)  FROM cust_order  JOIN customer ON cust_order.customer_id = customer.customer_id  JOIN address ON cust_order.dest_address_id = address.address_id  JOIN country ON address.country_id = country.country_id  WHERE country.country_name = 'Iran' AND YEAR(cust_order.order_date) = 2022;
SELECT COUNT(*)  FROM cust_order  JOIN order_line ON cust_order.order_id = order_line.order_id  JOIN book ON order_line.book_id = book.book_id   JOIN customer ON cust_order.customer_id = customer.customer_id   JOIN customer_address ON customer.customer_id = customer_address.customer_id   JOIN address ON customer_address.address_id = address.address_id   JOIN shipping_method ON cust_order.shipping_method_id = shipping_method.method_id   WHERE customer.customer_name = 'Daisey Lamball'  AND shipping_method.method_name = 'International';
SELECT c.first_name, c.last_name  FROM customer AS c JOIN cust_order AS co ON c.customer_id = co.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM order_history oh  JOIN cust_order co ON oh.order_id = co.order_id  JOIN customer c ON co.customer_id = c.customer_id  WHERE c.first_name = 'Antonia' AND c.last_name = 'Poltun' AND oh.status_value = 'Returned';
SELECT method_name  FROM shipping_method  WHERE method_id = (SELECT method_id                     FROM cust_order                     GROUP BY method_id                     ORDER BY COUNT(*) DESC                     LIMIT 1);
SELECT COUNT(*)  FROM order_history  JOIN order_status ON order_history.status_id = order_status.status_id  JOIN cust_order ON order_history.order_id = cust_order.order_id  WHERE order_status.status_value = 'Delivered' AND status_date LIKE '2021%';
SELECT title  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON book_author.author_id = author.author_id  WHERE author_name = 'J.K Rowling'  ORDER BY publication_date ASC  LIMIT 1;
SELECT COUNT(*)  FROM book_author  JOIN author ON book_author.author_id = author.author_id  WHERE author.author_name = 'A.R. Braunmuller';
SELECT p.publisher_name  FROM publisher p  JOIN book b ON p.publisher_id = b.publisher_id  JOIN book_author ba ON b.book_id = ba.book_id  JOIN author a ON a.author_id = ba.author_id  WHERE a.author_name = 'Agatha Christie'  AND b.title IN (SELECT t.title FROM book t WHERE t.publication_date = (SELECT MIN(publication_date) FROM book WHERE title = t.title));
SELECT title  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON book_author.author_id = author.author_id  WHERE author_name = 'Danielle Steel';
SELECT COUNT(*)  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON book_author.author_id = author.author_id  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE author.author_name = 'William Shakespeare' AND publisher.publisher_name = 'Penguin Classics';
SELECT publisher_name FROM publisher WHERE publisher_id = (     SELECT publisher_id      FROM book      GROUP BY publisher_id      ORDER BY COUNT(book_id) DESC      LIMIT 1 );
SELECT SUM(shipping.cost) AS total_shipping_cost, COUNT(o.order_id) AS orders_in_2022 FROM shipping_method sm JOIN cust_order co ON co.shipping_method_id = sm.method_id JOIN customer c ON c.customer_id = co.customer_id JOIN order_history oh ON oh.order_id = co.order_id WHERE c.first_name = 'Page' AND c.last_name = 'Holsey' AND oh.status_date LIKE '2022%' AND oh.status_id IN (SELECT status_id FROM order_status WHERE status_value = 'completed')
SELECT publisher_name  FROM publisher  WHERE publisher_id = 22;
SELECT COUNT(*)  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON book_author.author_id = author.author_id  WHERE author.author_name = 'AI Gore' AND book.num_pages < 400;
SELECT author.author_name, publisher.publisher_name  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON book_author.author_id = author.author_id  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE book.publication_date = '1997-07-10';
SELECT bl.language_name  FROM book b  JOIN book_language bl ON b.language_id = bl.language_id  JOIN book_author ba ON b.book_id = ba.book_id  WHERE b.isbn13 = '23755004321';
SELECT title  FROM book  WHERE price = (SELECT MAX(price) FROM order_line);
SELECT SUM(ol.price)  FROM order_line ol  JOIN cust_order co ON ol.order_id = co.order_id  JOIN customer c ON co.customer_id = c.customer_id  WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';
SELECT book.isbn13  FROM book  JOIN book_language ON book.language_id = book_language.language_id  WHERE book_language.language_name = 'Spanish';
SELECT COUNT(*)  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE book.price < 1 AND publisher.publisher_name = 'Berkley Trade';
SELECT title  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON book_author.author_id = author.author_id  JOIN cust_order ON book.book_id = cust_order.book_id  JOIN customer ON cust_order.customer_id = customer.customer_id  WHERE customer.first_name = 'Zia' AND customer.last_name = 'Roizin';
SELECT author_name FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id WHERE num_pages = (SELECT MAX(num_pages) FROM book);
SELECT T3.email  FROM book AS T1  JOIN book_author AS T2 ON T1.book_id = T2.book_id  JOIN author AS T4 ON T4.author_id = T2.author_id  JOIN cust_order AS T5 ON T1.book_id = ANY (SELECT T2.book_id FROM book AS T1 JOIN book_author AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'Switch on the Night')  JOIN customer AS T3 ON T3.customer_id = T5.customer_id;
SELECT DISTINCT A.author_name FROM author A JOIN book_author BA ON A.author_id = BA.author_id JOIN book B ON BA.book_id = B.book_id JOIN publisher P ON B.publisher_id = P.publisher_id WHERE P.publisher_name = 'Abrams';
SELECT p.publisher_name  FROM publisher p  JOIN book b ON p.publisher_id = b.publisher_id  WHERE b.title = 'The Illuminati';
SELECT      COUNT(*) FILTER (WHERE book_author.author_id IN (         SELECT author.author_id FROM author WHERE author_name = 'Abraham Lincoln'     )) * 100 / (SELECT COUNT(*) FROM book) AS percentage_of_1992_books FROM      book JOIN      book_author ON book.book_id = book_author.book_id JOIN      author ON book_author.author_id = author.author_id WHERE      publication_date LIKE '1992%' ;
SELECT p.publisher_name  FROM publisher p  JOIN book b ON p.publisher_id = b.publisher_id  WHERE b.publication_date LIKE '2004%' AND b.num_pages > (SELECT AVG(num_pages) * 0.7 FROM book);
SELECT `email`  FROM `customer` WHERE `first_name` = 'Moss' AND `last_name` = 'Zarb';
SELECT street_name FROM address JOIN country ON address.country_id = country.country_id WHERE country_name = 'Dallas';
SELECT title  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON book_author.author_id = author.author_id  WHERE author_name = 'Orson Scott Card' AND publication_date LIKE '2001%';
SELECT COUNT(*)  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON author.author_id = book_author.author_id  WHERE author.author_name = 'Orson Scott Card';
SELECT a.author_name, b.title  FROM author a  JOIN book_author ba ON a.author_id = ba.author_id  JOIN book b ON ba.book_id = b.book_id  WHERE b.num_pages > 3000;
SELECT author.author_name  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON book_author.author_id = author.author_id  WHERE book.title = 'The Prophet';
SELECT COUNT(*)  FROM book  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE publisher.publisher_name = 'Ace Hardcover';
SELECT p.publisher_name  FROM publisher p  JOIN book_author ba ON p.publisher_id = ba.publisher_id  JOIN author a ON ba.author_id = a.author_id  WHERE a.author_name = 'Barry Eisler';
SELECT COUNT(*)  FROM book  JOIN book_language ON book.language_id = book_language.language_id  WHERE book_language.language_name = 'Japanese';
SELECT SUM(ol.price)  FROM order_line ol  JOIN book b ON ol.book_id = b.book_id  JOIN book_author ba ON ba.book_id = b.book_id  JOIN author a ON a.author_id = ba.author_id  WHERE b.title = 'The Prophet'
SELECT COUNT(*)  FROM cust_order  JOIN customer ON cust_order.customer_id = customer.customer_id  WHERE customer.first_name = 'Daisey'  AND customer.last_name = 'Lamball'  AND YEAR(cust_order.order_date) = 2021;
SELECT COUNT(*)  FROM customer  JOIN customer_address ON customer.customer_id = customer_address.customer_id  JOIN address ON customer_address.address_id = address.address_id  JOIN country ON address.country_id = country.country_id  WHERE country.country_name = 'Australia';
SELECT COUNT(*)  FROM order_history  JOIN order_status ON order_status.status_id = order_history.status_id  JOIN cust_order ON cust_order.order_id = order_history.order_id  WHERE order_status.status_value = 'Delivered' AND        order_history.status_date LIKE '2019-12%';
SELECT c.first_name, c.last_name  FROM customer AS c JOIN cust_order AS co ON c.customer_id = co.customer_id JOIN order_line AS ol ON co.order_id = ol.order_id JOIN book AS b ON ol.book_id = b.book_id JOIN book_author AS ba ON b.book_id = ba.book_id JOIN author AS a ON ba.author_id = a.author_id WHERE b.title = 'Fantasmas';
SELECT      (SUM(CASE WHEN method_name = 'International' THEN 1 ELSE 0 END) / CAST(COUNT(order_id) AS REAL)) * 100 AS 'InternationalShippingPercentage' FROM      cust_order WHERE      order_date LIKE '2020%';
SELECT author_name FROM author WHERE author_name = 'George%';
SELECT      EXTRACT(YEAR FROM order_date) AS order_year,     COUNT(order_id) AS total_orders FROM      cust_order GROUP BY      order_year ORDER BY      total_orders DESC LIMIT 1;
SELECT AVG(order_line.price) AS average_price FROM order_line;
SELECT title  FROM book  WHERE publication_date LIKE '1995%';
SELECT      SUBSTRING_INDEX(email, '@', -1) AS domain,     COUNT(*) AS frequency FROM      customer GROUP BY      domain ORDER BY      frequency DESC LIMIT 1;
SELECT COUNT(*)  FROM publisher  WHERE publisher_name LIKE '%book%';
SELECT language_name, MIN(COUNT(book_id)) AS rarest FROM book_language JOIN book ON book_language.language_id = book.language_id GROUP BY language_name;
SELECT order_date  FROM cust_order  JOIN customer ON cust_order.customer_id = customer.customer_id  WHERE customer.first_name = 'Adrian' AND customer.last_name = 'Kunzelmann';
SELECT COUNT(*)  FROM address  JOIN country ON address.country_id = country.country_id  WHERE country.country_name = 'Philippines';
SELECT author_name, MAX(COUNT(author_id)) as max_books FROM author JOIN book_author ON author.author_id = book_author.author_id GROUP BY author_name ORDER BY max_books DESC LIMIT 1;
SELECT title  FROM books  JOIN book_publisher ON books.publisher_id = book_publisher.publisher_id  WHERE book_publisher.publisher_name = 'Harper Collins';
SELECT COUNT(*)  FROM order_history  WHERE status_value = 'Returned' AND status_date LIKE '%2020%';
SELECT method_name FROM shipping_method ORDER BY COUNT(method_id) ASC LIMIT 1 OFFSET 1;
SELECT COUNT(*)  FROM customer_address  WHERE customer_address.status_id IN (SELECT status_id FROM address_status WHERE address_status.status_id = 'Inactive');
SELECT title  FROM book  JOIN cust_order ON book.book_id = cust_order.order_id  GROUP BY title  ORDER BY COUNT(cust_order.order_id) DESC  LIMIT 1;
SELECT T1.street_number, T1.street_name, T1.city  FROM address AS T1  JOIN cust_order AS T2 ON T1.address_id = T2.dest_address_id  GROUP BY T1.address_id  ORDER BY COUNT(T2.order_id) DESC  LIMIT 1;
SELECT      (strftime('%Y', order_history.status_date) - strftime('%Y', order_history.order_date)) ||      '-' ||      (strftime('%m', order_history.status_date) - strftime('%m', order_history.order_date)) ||      '-' ||      (strftime('%d', order_history.status_date) - strftime('%d', order_history.order_date)) AS "Time to Update Status" FROM      order_history WHERE      order_history.order_id = '2398';
SELECT c.first_name, c.last_name, COUNT(a.address_id) AS address_count FROM customer_address ca JOIN address a ON ca.address_id = a.address_id JOIN customer c ON ca.customer_id = c.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY address_count DESC LIMIT 1;
SELECT      (SUM(CASE WHEN s.method_name = 'International' THEN l.price ELSE 0 END) / SUM(l.price)) * 100 AS international_percentage FROM      shipping_method s JOIN      cust_order c ON s.method_id = c.shipping_method_id JOIN      order_line l ON c.order_id = l.order_id
SELECT a.author_name  FROM author a  JOIN book_author ba ON a.author_id = ba.author_id  JOIN book b ON ba.book_id = b.book_id  GROUP BY a.author_name  HAVING SUM(b.num_pages) < (SELECT AVG(num_pages) FROM book);
SELECT MIN(price) FROM cust_order JOIN order_line ON cust_order.order_id = order_line.order_id WHERE price != 0;
SELECT COUNT(DISTINCT c.customer_id) FROM customer AS c JOIN customer_address AS ca ON c.customer_id = ca.customer_id JOIN address AS a ON ca.address_id = a.address_id JOIN country AS co ON a.country_id = co.country_id WHERE co.country_name = 'Villeneuve-la-Garenne';
SELECT COUNT(*)  FROM author  WHERE author_name = 'Adam';
SELECT COUNT(*)  FROM customer  JOIN customer_address ON customer.customer_id = customer_address.customer_id  WHERE customer_address.status_id = (SELECT status_id FROM address_status WHERE address_status = 'primary')  AND customer.email LIKE '%@yahoo.com';
SELECT DISTINCT T2.city FROM customer AS T1 JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id JOIN address AS T3 ON T2.address_id = T3.address_id JOIN country AS T4 ON T3.country_id = T4.country_id WHERE T4.country_name = 'United States of America';
SELECT COUNT(*)  FROM cust_order  JOIN customer ON cust_order.customer_id = customer.customer_id  WHERE customer.first_name = 'Marcelia'  AND customer.last_name = 'Goering'  AND substr(cust_order.order_date, 1, 4) = '2021'  AND cust_order.shipping_method_id IN (     SELECT shipping_method.method_id      FROM shipping_method      WHERE shipping_method.method_name = 'Priority' );
SELECT title FROM book  JOIN order_line ON book.book_id = order_line.book_id  WHERE price = (SELECT MAX(price) FROM order_line);
SELECT COUNT(DISTINCT c.customer_id) FROM cust_order co JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id JOIN customer c ON co.customer_id = c.customer_id WHERE b.title = 'Anleitung zum Zickigsein';
SELECT MAX(ol.price)  FROM order_line ol  JOIN book b ON ol.book_id = b.book_id  JOIN cust_order co ON ol.order_id = co.order_id  WHERE b.title = 'Bite Me If You Can (Argeneau #6)';
SELECT COUNT(DISTINCT c.customer_id)  FROM customer_orders co  JOIN order_line ol ON co.order_id = ol.order_id  JOIN book b ON ol.book_id = b.book_id  WHERE b.publication_date = (SELECT MIN(publication_date) FROM book);
SELECT title  FROM book  JOIN book_language ON book.language_id = book_language.language_id  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE book_language.language_name = 'Spanish' AND publisher.publisher_name = 'Alfaguara';
SELECT COUNT(DISTINCT c.customer_id) FROM customer AS c JOIN book_author AS ba ON ba.book_id = b.book_id JOIN book AS b ON b.book_id = ba.book_id JOIN author AS a ON a.author_id = ba.author_id WHERE a.author_name = 'Stephen King' AND b.title = (SELECT MIN(t.publication_date) FROM book AS t WHERE t.title = 'first book')
SELECT bl.language_name  FROM book b  JOIN book_language bl ON b.language_id = bl.language_id  JOIN publisher p ON b.publisher_id = p.publisher_id  WHERE b.publication_date = (SELECT MIN(publication_date) FROM book)  UNION  SELECT bl.language_name  FROM book b  JOIN book_language bl ON b.language_id = bl.language_id  JOIN publisher p ON b.publisher_id = p.publisher_id  WHERE b.publication_date = (SELECT MIN(publication_date) FROM book WHERE publication_date > (SELECT MAX(publication_date) FROM book LIMIT 1 OFFSET 1))
SELECT p.publisher_name  FROM publisher p  JOIN book b ON p.publisher_id = b.publisher_id  WHERE b.title = 'The Secret Garden';
SELECT COUNT(*)  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON author.author_id = book_author.author_id  JOIN publisher ON publisher.publisher_id = book.publisher_id  WHERE author.author_name = 'J.K Rowling' AND publisher.publisher_name = 'Scholastic';
SELECT DISTINCT p.publisher_name  FROM publisher p  JOIN book b ON p.publisher_id = b.publisher_id  GROUP BY p.publisher_id, p.publisher_name  HAVING COUNT(b.book_id) >= 30;
SELECT      street_name,      SUBSTR(street_number, -1) AS last_number  FROM      address;
SELECT      address.street_number,     address.street_name,     address.city,     country.country_name  FROM      customer  JOIN      customer_address ON customer.customer_id = customer_address.customer_id  JOIN      address ON customer_address.address_id = address.address_id  JOIN      country ON address.country_id = country.country_id  WHERE      address.city = 'Lazaro Cardenas';
SELECT book.isbn13  FROM book  WHERE book.num_pages > 135 AND book.num_pages < 140;
SELECT title  FROM book  WHERE publication_date = (SELECT MIN(publication_date) FROM book)  ORDER BY title  LIMIT 6;
SELECT COUNT(*)  FROM cust_order  WHERE SUBSTR(order_date, 1, 7) = '2020-12';
SELECT first_name, last_name  FROM customer  WHERE last_name LIKE 'K%';
SELECT DISTINCT T2.city  FROM customer AS T1  JOIN customer_address AS T3 ON T1.customer_id = T3.customer_id  JOIN address AS T4 ON T4.address_id = T3.address_id  JOIN country AS T5 ON T5.country_id = T4.country_id  WHERE T5.country_name = 'Costa Rica';
SELECT ca.street_number, ca.street_name, ca.city  FROM customer_address ca  JOIN address_status ad ON ca.status_id = ad.status_id  WHERE ad.address_status = 'Inactive';
SELECT first_name, last_name  FROM customer  JOIN customer_address ON customer.customer_id = customer_address.customer_id  JOIN address ON customer_address.address_id = address.address_id  WHERE address.city = 'Baiyin';
SELECT c.email FROM customer AS c JOIN cust_order AS co ON c.customer_id = co.customer_id JOIN shipping_method AS sm ON sm.method_id = co.shipping_method_id WHERE sm.method_name = 'Priority';
SELECT T1.order_date FROM cust_order AS T1 JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id JOIN address AS T3 ON T2.address_id = T3.address_id WHERE T3.street_number = '460';
SELECT order_id FROM order_status WHERE status_value = 'cancelled';
SELECT oh.status_value  FROM order_history oh  JOIN cust_order co ON oh.order_id = co.order_id  WHERE SUBSTR(co.order_date, 1, 10) = '2022-04-10';
SELECT MAX(T2.price)  FROM book AS T1  JOIN order_line AS T2 ON T1.book_id = T2.book_id  JOIN cust_order AS T3 ON T3.order_id = T2.order_id  JOIN book_author AS T4 ON T4.book_id = T1.book_id  JOIN author AS T5 ON T5.author_id = T4.author_id  WHERE T1.title = 'The Prophet'
SELECT DISTINCT order_date  FROM order_line  JOIN book ON order_line.book_id = book.book_id  WHERE order_line.price = 16.54;
SELECT title  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON book_author.author_id = author.author_id  WHERE author_name = 'Peter H.Smith';
SELECT COUNT(*)  FROM book  WHERE num_pages < 300 AND publisher_id IN (SELECT publisher_id FROM publisher WHERE publisher_name = 'HarperCollins Publishers');
SELECT COUNT(*)  FROM book  JOIN book_language ON book.language_id = book_language.language_id  WHERE book_language.language_name = 'Japanese';
SELECT AVG(b.num_pages)  FROM book b  JOIN book_author ba ON b.book_id = ba.book_id  JOIN author a ON ba.author_id = a.author_id  WHERE a.author_name = 'Jennifer Crusie';
SELECT      (COUNT(CASE WHEN order_history.method_name = 'International' THEN 1 END) / COUNT(*) * 100) AS percentage FROM      cust_order c JOIN      order_history o ON c.order_id = o.order_id WHERE      c.customer_id IN (SELECT customer_id FROM customer WHERE email = 'Kaleena')
SELECT c.first_name, c.last_name  FROM customer AS c JOIN cust_order AS co ON c.customer_id = co.customer_id JOIN order_line AS ol ON co.order_id = ol.order_id JOIN book AS b ON ol.book_id = b.book_id JOIN book_author AS ba ON b.book_id = ba.book_id JOIN author AS a ON ba.author_id = a.author_id WHERE b.title = 'The Sorrows of Young Werther'
SELECT title  FROM books.book  JOIN books.book_author ON books.book.book_id = books.book_author.book_id  JOIN books.author ON books.book_author.author_id = books.author.author_id  JOIN books.cust_order ON books.cust_order.book_id = books.book.book_id  JOIN books.customer ON books.cust_order.customer_id = books.customer.customer_id  WHERE books.author.author_name = 'Ursola Purdy';
SELECT a.author_name  FROM author a  JOIN book_author ba ON a.author_id = ba.author_id  JOIN book b ON ba.book_id = b.book_id  WHERE b.num_pages = (SELECT MAX(num_pages) FROM book)
SELECT COUNT(*)  FROM books.book  JOIN books.book_author ON books.book.book_id = books.book_author.book_id  JOIN books.author ON books.author.author_id = books.book_author.author_id  JOIN books.order_line ON books.order_line.book_id = books.book.book_id  WHERE books.author.author_name = 'Akira Watanabe' AND books.order_line.order_status.status_value = 'Gravity';
SELECT      address.street_number,     address.street_name,     address.city,     country.country_name FROM      customer  JOIN      customer_address ON customer.customer_id = customer_address.customer_id  JOIN      address ON customer_address.address_id = address.address_id  JOIN      country ON address.country_id = country.country_id  WHERE      customer.first_name = 'Ursola' AND      customer.last_name = 'Purdy';
SELECT author.author_name  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON book_author.author_id = author.author_id  WHERE book.title = 'The Mystery in the Rocky Mountains';
SELECT publisher_name  FROM publisher  JOIN book  ON publisher.publisher_id = book.publisher_id  WHERE book.title = 'Girls\' Night In';
SELECT p.publisher_name  FROM publisher p  JOIN book b ON p.publisher_id = b.publisher_id  WHERE b.publication_date = (SELECT MIN(publication_date) FROM book);
SELECT      (SUM(cost)       FROM shipping_method       WHERE method_name = 'Express') -      (SUM(cost)       FROM shipping_method       WHERE method_name = 'Priority') AS cost_difference;
SELECT COUNT(*)  FROM order_status os  JOIN order_history oh ON os.status_id = oh.status_id  WHERE os.status_value = 'Cancelled' AND SUBSTR(oh.status_date, 1, 4) = '2022';
SELECT title  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON book_author.author_id = author.author_id  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE publisher_name = 'BBC Audiobooks';
SELECT COUNT(*)  FROM book  WHERE SUBSTR(publication_date, 1, 4) = '2017';
SELECT isbn13  FROM book  WHERE title = 'The Mystery in the Rocky Mountains';
SELECT      COUNT(CASE WHEN status_value = 'Returned' THEN 1 ELSE NULL END) * 100.0 / COUNT(*) AS return_percentage FROM      order_history WHERE      SUBSTR(status_date, 1, 4) = '2022';
SELECT      (COUNT(CASE WHEN T1.address_status = 'Inactive' THEN 1 END)::decimal / COUNT(*)::decimal) * 100 AS inactive_address_percentage FROM      address_status AS T1 JOIN      customer_address AS T2 ON T1.status_id = T2.status_id;
SELECT num_pages  FROM book  WHERE title = 'Seaward';
SELECT author.author_name  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON book_author.author_id = author.author_id  WHERE book.title = 'First Things First';
SELECT title  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON book_author.author_id = author.author_id  WHERE author_name = 'Tom Clancy';
SELECT title  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON book_author.author_id = author.author_id  WHERE author_name = 'Hirohiko Araki' AND publication_date = '2006-06-06';
SELECT publisher.publisher_name  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE book.title = 'Hitchhiker\'s Guide To The Galaxy: The Filming of the Douglas Adams classic';
SELECT title  FROM book  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE publisher_name = 'ADV Manga';
SELECT first_name, last_name  FROM customer  JOIN customer_address ON customer.customer_id = customer_address.customer_id  JOIN address ON customer_address.address_id = address.address_id  WHERE street_number = 55 AND street_name = 'Dorton Pass' AND city = 'Huangqiao';
SELECT T4.country_name  FROM address_status AS T1  JOIN address AS T2 ON T1.address_status = T2.status_id  JOIN customer_address AS T3 ON T2.address_id = T3.address_id  JOIN country AS T4 ON T2.country_id = T4.country_id  WHERE T3.street_number = '9' AND T3.street_name = 'Green Ridge Point' AND T3.city = 'Arendal';
SELECT address.street_number, address.street_name, address.city  FROM address  JOIN country ON address.country_id = country.country_id  WHERE country.country_name = 'Poland'  LIMIT 10;
SELECT sm.method_name  FROM cust_order co  JOIN customer c ON co.customer_id = c.customer_id  JOIN customer_address ca ON c.customer_id = ca.customer_id   JOIN address a ON ca.address_id = a.address_id  JOIN address_status ad ON ad.status_id = ca.status_id  WHERE c.first_name = 'Nicolette'  AND c.last_name = 'Sadler'  AND DATE_FORMAT(co.order_date, '%Y-%m-%d %H:%i:%s') = '2020-06-29 19:40:07';
SELECT title  FROM book  JOIN book_language ON book.language_id = book_language.language_id  WHERE book_language.language_name = 'Arabic';
SELECT T3.language_name FROM book AS T1 JOIN book_language AS T2 ON T1.language_id = T2.language_id JOIN book_author AS T4 ON T4.book_id = T1.book_id JOIN author AS T5 ON T5.author_id = T4.author_id JOIN book AS T6 ON T6.title = 'El plan infinito' JOIN book_language AS T7 ON T6.language_id = T7.language_id WHERE T7.language_code = T2.language_code;
SELECT      (COUNT(CASE WHEN T2.author_name = 'Hirohiko Araki' THEN 1 ELSE NULL END)      / NULLIF(COUNT(T1.book_id), 0)) * 100 AS percentage FROM      books.book AS T1 JOIN      books.book_author AS T2 ON T1.book_id = T2.book_id JOIN      books.author AS T3 ON T2.author_id = T3.author_id WHERE      T3.author_name = 'Hirohiko Araki' AND T1.publisher_id IN (     SELECT publisher_id FROM books.publisher WHERE publisher_name = 'Viz Media' );
SELECT AVG(T2.num_pages)  FROM author AS T1  JOIN book_author AS T3 ON T1.author_id = T3.author_id  JOIN book AS T2 ON T3.book_id = T2.book_id  JOIN publisher AS T4 ON T2.publisher_id = T4.publisher_id  WHERE T1.author_name = 'Zilpha Keatley Snyder'
SELECT first_name, last_name  FROM customer  WHERE email = 'ckupis4@tamu.edu';
SELECT title FROM book WHERE num_pages = (SELECT MAX(num_pages) FROM book);
SELECT COUNT(*)  FROM book_author  JOIN author ON book_author.author_id = author.author_id  WHERE author.author_name = 'A.J. Ayer';
SELECT title  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON book_author.author_id = author.author_id  WHERE author.author_name = 'A.J.Ayer';
SELECT p.publisher_name  FROM book b  JOIN book_author ba ON b.book_id = ba.book_id  JOIN author a ON a.author_id = ba.author_id  JOIN book_language bl ON b.language_id = bl.language_id  JOIN publisher p ON p.publisher_id = b.publisher_id  WHERE bl.language_name = 'English' AND b.title = 'The Season: A Candid Look at Broadway';
SELECT      COUNT(*) FILTER (WHERE language_name = 'English') AS english_books_count,     COUNT(*) AS total_books_count,     COUNT(*) FILTER (WHERE language_name = 'English') / COUNT(*) AS average_english_books FROM      book JOIN      publisher ON book.publisher_id = publisher.publisher_id WHERE      publisher.publisher_name = 'Carole Marsh Mysteries';
SELECT title  FROM book  WHERE num_pages = (SELECT MAX(num_pages) FROM book)  AND SUBSTR(publication_date, 1, 4) BETWEEN '1990' AND '2000'  AND publisher_id IN (SELECT publisher_id FROM publisher WHERE publisher_name = 'Free Press');
SELECT ol.price FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id JOIN book_language bl ON b.language_id = bl.language_id JOIN order_line ol ON ol.book_id = b.book_id WHERE bl.language_name = 'English' AND a.author_name = 'The Servant Leader' AND SUBSTR(b.publication_date, 1, 4) = '2003';
SELECT a.street_number, a.street_name, a.city  FROM customer c  JOIN customer_address ca ON c.customer_id = ca.customer_id  JOIN address a ON ca.address_id = a.address_id  JOIN address_status asd ON ca.status_id = asd.status_id  WHERE c.first_name = 'Kandy' AND asd.address_status = 1;
SELECT COUNT(DISTINCT cl.book_id) FROM cust_order co JOIN customer_address ca ON co.customer_id = ca.customer_id JOIN customer c ON c.customer_id = co.customer_id JOIN order_line ol ON ol.order_id = co.order_id JOIN book b ON b.book_id = ol.book_id WHERE c.first_name = 'Kandy' AND c.last_name = 'Adamec';
SELECT COUNT(*)  FROM order_status os  JOIN order_history oh ON os.status_id = oh.status_id  WHERE os.status_value = 'Returned' AND SUBSTR(oh.status_date, 1, 4) = '2022';
SELECT T3.country_name  FROM customer AS T1  JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id  JOIN address AS T3 ON T2.address_id = T3.address_id  WHERE T1.email = 'rturbitt2@geocities.jp';
SELECT publisher_name FROM publisher WHERE publisher_id = (     SELECT publisher_id      FROM book      GROUP BY publisher_id      ORDER BY COUNT(book_id) DESC      LIMIT 1 );
SELECT title  FROM book  JOIN book_author ON book.book_id = book_author.book_id  JOIN author ON book_author.author_id = author.author_id  WHERE author.author_name = 'A.J. Ayer'  ORDER BY publication_date ASC  LIMIT 1;
SELECT      (COUNT(CASE WHEN o.price > 10 THEN 1 END) /       COUNT(o.book_id)) * 100 AS percentage FROM      cust_order c JOIN      order_line o ON c.order_id = o.order_id JOIN      book b ON o.book_id = b.book_id JOIN      customer cu ON c.customer_id = cu.customer_id WHERE      cu.first_name = 'Ruthanne' AND      cu.last_name = 'Vatini' ;
SELECT title  FROM book  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE publisher_name = 'AK Press';
SELECT c.first_name, c.last_name  FROM cust_order co JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id JOIN customer c ON co.customer_id = c.customer_id WHERE ol.price = (SELECT MIN(price) FROM order_line)
SELECT T3.isbn13  FROM customer AS T1  JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id  JOIN order_line AS T3 ON T2.address_id = T3.dest_address_id  WHERE T1.email = 'fsier3e@ihg.com';
SELECT T3.author_name FROM book_language AS T1 JOIN book AS T2 ON T1.language_id = T2.language_id JOIN book_author AS T4 ON T2.book_id = T4.book_id JOIN author AS T3 ON T4.author_id = T3.author_id JOIN order_line AS T5 ON T2.book_id = T5.book_id WHERE T5.price >= 19;
SELECT p.publisher_name  FROM publisher p  JOIN book b ON p.publisher_id = b.publisher_id  WHERE b.isbn13 = '76092025986';
SELECT COUNT(*)  FROM book  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE publisher.publisher_name = 'Birlinn'  AND SUBSTR(book.publication_date, 1, 4) = '2008'  AND book.num_pages BETWEEN 600 AND 700;
SELECT price  FROM book  JOIN book_language ON book.language_id = book_language.language_id  WHERE isbn13 = '9780763628321';
SELECT COUNT(T2.num_pages)  FROM `order_line` AS T1 INNER JOIN `book` AS T2  ON T1.book_id = T2.book_id  WHERE T1.order_id = 1167;
SELECT title  FROM book  JOIN book_language ON book.language_id = book_language.language_id  WHERE book_language.language_name = 'British English';
SELECT COUNT(*)  FROM book  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE publisher.publisher_name = 'Brava'  AND SUBSTR(book.publication_date, 1, 4) = '2006';
SELECT book.isbn13, order_line.price  FROM book  JOIN order_line ON book.book_id = order_line.book_id  WHERE book.book_id = 7160;
SELECT title  FROM book  JOIN order_line ON book.book_id = order_line.book_id  WHERE order_line.order_id = 931;
SELECT bl.language_name  FROM book b  JOIN book_language bl ON b.language_id = bl.language_id  JOIN book_author ba ON b.book_id = ba.book_id  JOIN author a ON ba.author_id = a.author_id  WHERE b.title = 'Zorro';
SELECT c.email FROM customer AS c JOIN cust_order AS co ON c.customer_id = co.customer_id JOIN order_line AS ol ON co.order_id = ol.order_id WHERE ol.price BETWEEN 3 AND 5;
SELECT book.isbn13  FROM order_line  JOIN book ON order_line.book_id = book.book_id  WHERE order_line.price = 7.5;
SELECT DISTINCT p.publisher_name FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON a.author_id = ba.author_id JOIN publisher p ON p.publisher_id = b.publisher_id WHERE a.author_name = 'Alan Lee';
SELECT SUM(b.num_pages)  FROM book b  JOIN book_author ba ON b.book_id = ba.book_id  JOIN author a ON ba.author_id = a.author_id  JOIN cust_order co ON b.book_id = ANY (SELECT book_id FROM order_line WHERE order_id IN (SELECT order_id FROM co WHERE customer_id = (SELECT customer_id FROM customer WHERE email = 'mick.sever@example.com')));
SELECT T2.author_name FROM book AS T1 JOIN author AS T2 ON T1.publisher_id = T2.publisher_id ORDER BY T1.publication_date DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN b.language_id = bl.language_id AND bl.language_name = 'English' THEN b.book_id ELSE NULL END)      / COUNT(b.book_id)) * 100 AS percentage FROM      book b JOIN      book_language bl ON b.language_id = bl.language_id JOIN      publisher p ON b.publisher_id = p.publisher_id WHERE      p.publisher_name = 'Ace Book';
SELECT      (COUNT(CASE WHEN num_pages < 500 THEN book_id END)       - COUNT(CASE WHEN num_pages > 500 THEN book_id END)) AS page_difference FROM      book  JOIN      cust_order ON book.book_id = cust_order.book_id  WHERE      cust_order.price < 1;
SELECT bl.language_name, b.title  FROM book b  JOIN book_author ba ON b.book_id = ba.book_id  JOIN author a ON ba.author_id = a.author_id  JOIN book_language bl ON b.language_id = bl.language_id  JOIN cust_order co ON b.book_id IN (SELECT ol.book_id FROM order_line ol WHERE ol.price < (AVG(ol.price) * 0.2))
SELECT e.first_name, e.last_name  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.results = 'Sanitarian' AND e.supervisor = 'Darlisha Jacobs';
SELECT e.first_name, e.last_name  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE e.title = 'Sanitarian' AND DATE_FORMAT(i.inspection_date, '%Y-%m') = '2010-05';
SELECT COUNT(*)  FROM employee  JOIN inspection  ON employee.employee_id = inspection.employee_id  WHERE employee.first_name = 'Joshua' AND employee.last_name = 'Rosa' AND inspection.inspection_date LIKE '2010%';
SELECT DISTINCT e.assuming_name  FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment es ON i.license_no = es.license_no WHERE e.first_name = 'Joshua' AND e.last_name = 'Rosa'
SELECT COUNT(DISTINCT e.license_no) FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_date LIKE '2010%' AND e.facility_type = 'Restaurant';
SELECT e.address, e.latitude, e.longitude  FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_date = '2010-05-11';
SELECT COUNT(DISTINCT e.license_no) FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE YEAR(i.inspection_date) = 2010 AND e.ward = 42;
SELECT e.first_name, e.last_name  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  JOIN establishment es ON es.license_no = i.followup_to  WHERE es.dba_name = 'Burbank' AND e.title = 'sanitarian';
SELECT DISTINCT establishment.aka_name  FROM establishment  JOIN inspection ON establishment.license_no = inspection.license_no  WHERE inspection.results = 'Fail' AND inspection.inspection_date LIKE '2010%'
SELECT e.first_name, e.last_name  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  JOIN establishment es ON es.license_no = i.followup_to  WHERE es.dba_name = 'AMUNDSEN HIGH SCHOOL' AND i.inspection_date = '2010-05-11';
SELECT COUNT(*)  FROM inspection  JOIN employee ON inspection.employee_id = employee.employee_id  WHERE employee.first_name = 'Joshua'  AND employee.last_name = 'Rosa'  AND inspection.results = 'Pass';
SELECT i.inspection_date FROM inspection i JOIN establishment e ON i.followup_to = e.license_no WHERE e.dba_name = 'Azha Restaurant Inc.' AND i.inspection_date = '2010-01-21';
SELECT COUNT(DISTINCT e.license_no) FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_date LIKE '2010%' AND e.risk_level = 3;
SELECT      COUNT(*)  FROM      inspection i  JOIN      employee e ON i.employee_id = e.employee_id  WHERE      YEAR(i.inspection_date) = 2010 AND e.salary > 70000
SELECT      t3.point_level  FROM      inspection_point AS t3  JOIN      violation AS t2 ON t3.point_id = t2.point_id  JOIN      inspection AS t1 ON t2.inspection_id = t1.inspection_id  WHERE      t3.description = 'Refrigeration and metal stem thermometers provided and conspicuous';
SELECT e.first_name, e.last_name  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.inspection_id = '48224';
SELECT COUNT(*)  FROM inspection  JOIN establishment ON inspection.license_no = establishment.license_no  WHERE establishment.dba_name = 'All Style Buffet' AND establishment.facility_type = 'Restaurant';
SELECT inspection_date FROM inspection JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.aka_name = 'WING HUNG CHOP SUEY RESTAURANT' ORDER BY inspection_date LIMIT 1;
SELECT COUNT(*)  FROM inspection  JOIN establishment ON inspection.license_no = establishment.license_no  WHERE inspection.inspection_date = '2015-05-08' AND establishment.facility_type = 'Restaurant';
SELECT COUNT(*)  FROM violation  JOIN inspection_point ON violation.point_id = inspection_point.point_id  WHERE inspection_id = '1454071' AND inspection_point.category = 'Food Maintenance';
SELECT COUNT(*)  FROM violation  JOIN inspection ON violation.inspection_id = inspection.inspection_id  JOIN establishment ON inspection.license_no = establishment.license_no  WHERE establishment.dba_name = 'ROYAL THAI CUISINE'  AND inspection.inspection_date = '2015-05-08';
SELECT COUNT(*)  FROM establishment  WHERE facility_type = 'Grocery Store' AND address = '3635 W DIVERSEY AVE';
SELECT e.first_name, e.last_name  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  GROUP BY e.employee_id, e.first_name, e.last_name  ORDER BY COUNT(i.inspection_id) DESC  LIMIT 1;
SELECT COUNT(*)  FROM inspection  JOIN employee ON inspection.employee_id = employee.employee_id  WHERE employee.first_name = 'Lisa' AND employee.last_name = 'Tillman' AND inspection.results = 'Out of Business';
SELECT COUNT(DISTINCT e.license_no) FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE e.title = 'Sanitarian' AND e.address = '5000 N Wolcott Ave' AND i.inspection_date BETWEEN '2011-04-30' AND '2011-06-01';
SELECT e.phone  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.inspection_id = '634597' AND e.title = 'Sanitarian';
SELECT e.salary FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id = (     SELECT inspection_id     FROM inspection     GROUP BY inspection_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT      AVG(Count(inspection_id)) AS avg_number_of_inpections FROM      (SELECT          inspection_id     FROM          inspection     INNER JOIN establishment ON inspection.license_no = establishment.license_no     WHERE          establishment.risk_level = '3' AND establishment.facility_type = 'TAVERN') AS subquery
SELECT      COUNT(*) FILTER (WHERE results = 'Pass') AS pass_count,     COUNT(DISTINCT license_no) AS total_count FROM      inspection JOIN      establishment ON inspection.license_no = establishment.license_no WHERE      dba_name = 'POCKETS' AND facility_type = 'Restaurant';      WITH pass_rate AS (     SELECT          COUNT(*) FILTER (WHERE results = 'Pass') AS pass_count,         COUNT(DISTINCT license_no) AS total_count     FROM          inspection     JOIN          establishment ON inspection.license_no = establishment.license_no     WHERE          dba_name = 'POCKETS' AND facility_type = 'Restaurant' ) SELECT      CAST(pass_count::numeric / total_count::numeric AS DECIMAL(5,2)) AS pass_rate FROM      pass_rate;
SELECT COUNT(*)  FROM employee  WHERE city = 'Chicago' AND zip = 60617 AND title = 'Sanitarian';
SELECT dba_name  FROM establishment  WHERE address = '2903 W IRVING PARK RD ';
SELECT first_name, last_name  FROM employee  WHERE salary = (SELECT MIN(salary) FROM employee);
SELECT COUNT(*)  FROM establishment  WHERE dba_name = 'HOMEMADE PIZZA'  AND risk_level = 2;
SELECT COUNT(*)  FROM inspection  JOIN inspection_point ON inspection.point_id = inspection_point.point_id  JOIN violation ON inspection.inspection_id = violation.inspection_id  WHERE inspection_point.code = 3 AND violation.fine = 500;
SELECT COUNT(*)  FROM employee  WHERE supervisor = 'Gregory Cardenas';
SELECT inspection_date FROM inspection JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.dba_name = 'RENALDI''S PIZZA' ORDER BY inspection_date LIMIT 1;
SELECT e.first_name, e.last_name  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.inspection_date LIKE '2016-03%'  GROUP BY e.employee_id  ORDER BY COUNT(i.inspection_id) DESC  LIMIT 1;
SELECT e.dba_name  FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results = 'Pass w/ Conditions' AND i.inspection_date LIKE '2012-05%'
SELECT COUNT(*)  FROM inspection  JOIN employee ON inspection.employee_id = employee.employee_id  WHERE inspection.inspection_type = 'Short Form Complaint'  AND employee.first_name = 'David'  AND employee.last_name = 'Hodges'  AND inspection.results = 'Pass';
SELECT COUNT(DISTINCT e.license_no) FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.ward = 42 AND i.inspection_date BETWEEN '2010-01-01' AND '2015-12-31' AND i.results = 'Fail' GROUP BY e.license_no HAVING COUNT(i.inspection_id) >= 5;
SELECT e.salary FROM employee e JOIN inspection i ON e.employee_id = i.employee_id GROUP BY e.employee_id, e.salary HAVING COUNT(i.inspection_id) = (SELECT MAX(cnt) FROM  (SELECT COUNT(employee_id) AS cnt FROM inspection GROUP BY employee_id) subquery)
SELECT e.dba_name  FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN violation v ON i.inspection_id = v.inspection_id JOIN inspection_point ip ON v.point_id = ip.point_id WHERE YEAR(i.inspection_date) = 2014 GROUP BY e.dba_name ORDER BY SUM(ip.fine) DESC LIMIT 1;
SELECT e.address, e.city, e.state, e.zip, e.latitude, e.longitude  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.results = 'Fail'  GROUP BY e.address, e.city, e.state, e.zip, e.latitude, e.longitude  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT inspector_comment  FROM inspection  JOIN establishment ON inspection.license_no = establishment.license_no  WHERE dba_name = 'TAQUERIA LA FIESTA' AND inspection_date = '2010-01-25';
SELECT SUM(v.fine) AS total_fine FROM inspection i JOIN employee e ON i.employee_id = e.employee_id JOIN establishment est ON i.license_no = est.license_no JOIN violation v ON i.inspection_id = v.inspection_id WHERE e.first_name = 'Ron' AND est.dba_name = 'RON OF JAPAN INC' AND i.inspection_date LIKE '2014-02%'
SELECT e.first_name, e.last_name  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  JOIN establishment es ON i.license_no = es.license_no  WHERE es.dba_name = 'TAQUERIA LA PAZ';
SELECT e.first_name, e.last_name  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  JOIN violation v ON i.inspection_id = v.inspection_id  GROUP BY e.employee_id, e.first_name, e.last_name  ORDER BY SUM(v.fine) DESC  LIMIT 1;
SELECT      e.first_name, e.last_name  FROM      employee e  JOIN      inspection i ON e.employee_id = i.employee_id  WHERE      e.title = 'Sanitarian'  GROUP BY      e.employee_id, e.first_name, e.last_name  ORDER BY      COUNT(i.inspection_id) DESC  LIMIT 5;
SELECT      e.dba_name,     COUNT(i.inspection_id) AS total_inspections,     COUNT(CASE WHEN i.results = 'Pass' THEN i.inspection_id END) AS passed_inspections,     COUNT(CASE WHEN i.results = 'Fail' THEN i.inspection_id END) AS failed_inspections,     (COUNT(CASE WHEN i.results = 'Pass' THEN i.inspection_id END) / CAST(COUNT(i.inspection_id) AS REAL)) * 100 AS pass_percentage,     (COUNT(CASE WHEN i.results = 'Fail' THEN i.inspection_id END) / CAST(COUNT(i.inspection_id) AS REAL)) * 100 AS fail_percentage FROM      establishment e JOIN      inspection i ON e.license_no = i.license_no GROUP BY      e.dba_name ORDER BY      total_inspections DESC LIMIT 1;
SELECT `last_name`  FROM employee  WHERE address = '7211 S Hermitage Ave' AND city = 'Chicago' AND state = 'IL';
SELECT e.first_name, e.last_name, es.dba_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment es ON i.license_no = es.license_no WHERE i.inspection_id = 44256 AND i.inspection_date = '2010-05-05';
SELECT e.address FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment s ON s.license_no = i.license_no WHERE s.facility_type = 'School' AND i.results = 'Pass' AND i.inspection_date LIKE '2010-03%'
SELECT e.first_name, e.last_name  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.inspection_type = 'Canvass' AND i.inspection_date = '2010-03-09';
SELECT inspection_id FROM establishment WHERE dba_name = 'PIZZA RUSTICA, INC';
SELECT COUNT(*)  FROM establishment  WHERE facility_type = 'Restaurant'  AND risk_level = (SELECT MAX(risk_level) FROM establishment)  AND results = 'Pass';
SELECT e.first_name, e.last_name  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  JOIN inspection_point ip ON i.inspection_id = ip.point_id  WHERE ip.category = 'Display of Inspection Report Summary';
SELECT title  FROM employee  JOIN inspection ON employee.employee_id = inspection.employee_id  WHERE inspection.inspection_id = 60332;
SELECT COUNT(*)  FROM inspection i  JOIN establishment e ON i.license_no = e.license_no  JOIN employee emp ON i.employee_id = emp.employee_id   WHERE e.facility_type = 'Restaurant'  AND e.risk_level = (SELECT MIN(risk_level) FROM establishment WHERE facility_type = 'Restaurant')  AND i.inspection_type = 'Complaint'  AND i.results = 'Fail';
SELECT v.fine, e.address, e.city, e.state FROM violation v JOIN inspection i ON v.inspection_id = i.inspection_id JOIN establishment e ON i.license_no = e.license_no WHERE i.inspection_id = 48216;
SELECT inspection_id  FROM inspection  JOIN inspection_point ON inspection.inspection_id = inspection_point.point_id  JOIN violation ON inspection.inspection_id = violation.inspection_id  WHERE inspection_point.point_level = 'Critical' AND violation.fine = 500 AND violation.inspector_comment = 'CDI ON 5-17-10';
SELECT      ip.Description,     v.inspector_comment FROM      inspection_point ip JOIN      violation v ON ip.point_id = v.point_id WHERE      v.inspection_id = 164795;
SELECT inspector_comment, code  FROM violation  JOIN inspection_point ON violation.point_id = inspection_point.point_id  WHERE inspection_id = 54216 AND point_id = 34;
SELECT      (COUNT(CASE WHEN e.risk_level = MAX(r.risk_level) AND i.results = 'Fail' THEN e.license_no ELSE NULL END)      / COUNT(CASE WHEN i.results = 'Fail' THEN e.license_no ELSE NULL END)) * 100 AS percentage FROM      establishment e  JOIN      inspection i ON e.license_no = i.license_no  JOIN      risk_level r ON e.risk_level = r.risk_level;
SELECT      (COUNT(CASE WHEN fine = 100 THEN inspection_id END) -       COUNT(CASE WHEN fine = 500 THEN inspection_id END)) AS difference FROM      inspection JOIN      employee ON inspection.employee_id = employee.employee_id WHERE      salary BETWEEN 75000 AND 85000;
SELECT COUNT(*)  FROM inspection  WHERE inspection_date LIKE '2011-01%';
SELECT COUNT(*)  FROM inspection  WHERE results = 'Fail' AND inspection_date LIKE '2014%'
SELECT      (COUNT(CASE WHEN fine = 100 THEN inspection_id END) * 100.0 / COUNT(inspection_id)) AS percentage FROM      inspection JOIN      inspection_point ON inspection.point_id = inspection_point.point_id WHERE      inspection_point.code = 100;
SELECT      ip.point_id,     v.fine FROM      inspection i JOIN      inspection_point ip ON i.inspection_id = ip.point_id JOIN      violation v ON ip.point_id = v.inspection_id WHERE      i.inspection_date = '2010-08-07';
SELECT COUNT(*)  FROM inspection_point  JOIN violation ON inspection_point.point_id = violation.point_id  WHERE violation.category = 'Personnel';
SELECT      dba_name  FROM      establishment  WHERE      city = 'BURNHAM';
SELECT COUNT(*)  FROM inspection i  JOIN inspection_point ip ON i.inspection_id = ip.point_id  JOIN violation v ON i.inspection_id = v.inspection_id  WHERE ip.category = 'Toxic Items' OR ip.category = 'No Smoking Regulations';
SELECT e.dba_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment es ON i.license_no = es.license_no WHERE e.first_name = 'Sarah' AND e.last_name = 'Lindsey' AND i.inspection_date = '2012-11-20';
SELECT DISTINCT v.category, ip.fine  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  JOIN violation v ON i.inspection_id = v.inspection_id  JOIN inspection_point ip ON v.point_id = ip.point_id  WHERE e.first_name = 'Lisa' AND e.last_name = 'Tillman' AND i.inspection_date LIKE '2014-01%'
SELECT COUNT(*)  FROM inspection_point  WHERE category = 'Display of Inspection Report Summary';
SELECT DISTINCT inspection_type, results  FROM inspection  JOIN establishment ON inspection.license_no = establishment.license_no  WHERE establishment.facility_type = 'RIVERWALK CAFE';
SELECT e.first_name, e.last_name, i.results  FROM employee AS e  JOIN inspection AS i ON e.employee_id = i.employee_id  JOIN establishment AS es ON i.license_no = es.license_no  WHERE es.dba_name = 'JEAN SAMOCKI';
SELECT SUM(v.fine)  FROM violation v  JOIN inspection i ON v.inspection_id = i.inspection_id  JOIN establishment e ON i.license_no = e.license_no  WHERE e.dba_name = 'HACIENDA LOS TORRES' AND i.ward = 36 AND i.results = 'Fail';
SELECT SUM(fine) AS total_fine FROM violation JOIN inspection_point ON violation.point_id = inspection_point.point_id WHERE inspection_point.category = 'Food Equipment and Utensil';
SELECT e.dba_name, e.address, e.city, e.state, e.latitude, e.longitude  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  WHERE i.inspection_date = '2013-07-29' AND i.results = 'Fail';
SELECT      (COUNT(CASE WHEN i.results LIKE '%Pass%' THEN 1 END) FILTER (WHERE e.city = 'CHICAGO')::NUMERIC / COUNT(i.inspection_id) * 100) AS percentage_of_verified_quality_in_chicago FROM      inspection i JOIN      establishment e ON i.license_no = e.license_no;
SELECT COUNT(T2.inspection_id) / 8 AS avgInspectionsPerYear FROM employee T1 JOIN inspection T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Jessica' AND T1.last_name = 'Anthony' AND T2.inspection_date BETWEEN '2010-01-01' AND '2017-12-31';
SELECT `first_name`  FROM `employee`  JOIN `inspection` ON `employee.employee_id` = `inspection.employee_id` WHERE `inspection_id` = 48225;
SELECT e.address  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.inspection_id = 52238;
SELECT e.last_name  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.inspection_id = 52238;
SELECT results  FROM inspection  JOIN employee ON inspection.employee_id = employee.employee_id  WHERE first_name = 'Thomas' AND last_name = 'Langley';
SELECT e.address FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_date = '2010-11-05';
SELECT e.phone FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_type = 'Canvass';
SELECT title  FROM employee  WHERE employee_id = (SELECT employee_id FROM inspection WHERE inspection_id = 52269);
SELECT      i.results FROM      establishment e JOIN      inspection i ON e.license_no = i.followup_to WHERE      e.dba_name = 'XANDO COFFEE & BAR / COSI SANDWICH BAR';
SELECT DISTINCT inspection_type  FROM inspection  JOIN establishment ON inspection.license_no = establishment.license_no  WHERE dba_name = 'JOHN SCHALLER'
SELECT DISTINCT e.dba_name  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  WHERE i.inspection_type = 'License';
SELECT COUNT(*)  FROM inspection  WHERE inspection_date LIKE '2010%' AND risk_level = 3;
SELECT e.first_name, e.last_name, s.dba_name FROM employee e JOIN establishment s ON e.employee_id = s.employee_id WHERE s.results = 'Pass' OR s.results = 'Pass w/Conditions'
SELECT SUM(e.salary)  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.inspection_id BETWEEN 52270 AND 52272;
SELECT AVG(e.salary)  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.inspection_type = 'License Re-Inspection';
SELECT e.zip FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.license_no = 1222441 AND i.results = 'Passed';
SELECT inspection_date FROM inspection JOIN establishment ON inspection.license_no = establishment.license_no WHERE dba_name = 'JOHN SCHALLER' AND inspection_date LIKE '2010%' ORDER BY inspection_date LIMIT 1;
SELECT first_name, last_name  FROM employee  JOIN inspection ON employee.employee_id = inspection.employee_id  WHERE inspection.license_no = 1334073;
SELECT e.dba_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE e.first_name = 'Joshua' AND e.last_name = 'Rosa';
SELECT COUNT(*)  FROM employee  WHERE salary > 70000  AND EXISTS (     SELECT 1      FROM inspection      WHERE inspection.employee_id = employee.employee_id      AND results = 'Fail' );
SELECT e.dba_name  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  WHERE i.results = 'Pass' AND YEAR(i.inspection_date) = 2010;
SELECT e.first_name, e.last_name, est.dba_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON est.license_no = i.followup_to;
SELECT COUNT(*)  FROM establishment  JOIN inspection ON establishment.license_no = inspection.license_no  WHERE facility_type = 'Tavern' AND results = 'Fail' AND inspection_date LIKE '2010-07%'
SELECT e.title, s.risk_level  FROM employee AS e JOIN inspection AS i ON e.employee_id = i.employee_id JOIN establishment AS s ON s.license_no = i.followup_to WHERE e.first_name = 'Bob' AND e.last_name = 'Benson';
SELECT e.dba_name, i.results  FROM employee AS e JOIN inspection AS i ON e.employee_id = i.employee_id WHERE e.first_name = 'Bob' AND e.last_name = 'Benson' AND i.inspection_date LIKE '2010%'
SELECT e.title  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  JOIN establishment es ON i.license_no = es.license_no  WHERE es.license_no = 1576687;
SELECT COUNT(*)  FROM inspection_point  WHERE point_level = 'Serious' AND fine = 0;
SELECT      (COUNT(CASE WHEN v.fine = 250 THEN 1 END)::decimal / COUNT(*) * 100) AS percentage_of_fines_250 FROM      violation v JOIN      inspection i ON v.inspection_id = i.inspection_id JOIN      establishment e ON i.license_no = e.license_no;
SELECT      (COUNT(CASE WHEN e.risk_level = 1 THEN e.license_no END) / COUNT(e.license_no)) * 100 AS percentage FROM      establishment e JOIN      inspection i ON e.license_no = i.inspection_id WHERE      i.results = 'Pass';
SELECT address, city, state  FROM employee  WHERE first_name = 'Standard' AND last_name = 'Murray';
SELECT facility_type  FROM establishment  WHERE dba_name = 'Kinetic Playground';
SELECT salary  FROM employee  WHERE first_name = 'Jessica' AND last_name = 'Anthony';
SELECT e.dba_name  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  WHERE e.latitude = 41.9532864854 AND e.longitude = -87.7673790701422;
SELECT COUNT(*)  FROM employee  WHERE title = 'Supervisor';
SELECT `address` FROM establishment WHERE city = 'CHICAGO' AND facility_type = 'Restaurant' AND dba_name = 'OLD TIMERS REST & LOUNGE';
SELECT COUNT(*)  FROM employee  WHERE city = 'Hoffman Estates' AND state = 'IL';
SELECT COUNT(*)  FROM establishment  WHERE risk_level = (SELECT MAX(risk_level) FROM establishment);
SELECT first_name, last_name  FROM employee  WHERE salary = 82700;
SELECT `last_name`  FROM employee  JOIN inspection ON employee.employee_id = inspection.employee_id  WHERE inspection.inspection_id = 52256;
SELECT e.dba_name  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  JOIN violation v ON i.inspection_id = v.inspection_id  WHERE e.facility_type = 'Tavern' AND v.fine = 100;
SELECT DISTINCT ip.point_level FROM inspection_point ip JOIN violation v ON v.point_id = ip.point_id WHERE v.fine = 0;
SELECT e.facility_type, e.license_no  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  WHERE e.risk_level = (SELECT MIN(risk_level) FROM establishment) AND i.results = 'Fail';
SELECT i.results  FROM inspection i  JOIN employee e ON i.employee_id = e.employee_id  WHERE i.inspection_date = '2010-02-24' AND e.first_name = 'Arnold' AND e.last_name = 'Holder';
SELECT COUNT(*)  FROM inspection  JOIN establishment ON inspection.license_no = establishment.license_no  WHERE facility_type = 'Restaurant' AND results = 'Fail' AND inspection_date LIKE '2010-04%'
SELECT inspection.inspection_id FROM inspection JOIN employee ON inspection.employee_id = employee.employee_id WHERE employee.first_name = 'Rosemary' AND employee.last_name = 'Kennedy';
SELECT DISTINCT inspection_type  FROM inspection  JOIN employee ON inspection.employee_id = employee.employee_id  WHERE inspection.inspection_date = '2010-07-07' AND first_name = 'Lisa' AND last_name = 'Tillman';
SELECT i.inspection_id FROM inspection i JOIN inspection_point ip ON i.inspection_id = ip.point_id WHERE i.inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA' AND ip.code = '7-38-030, 015, 010 (A), 005 (A)';
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.risk_level = (SELECT MAX(risk_level) FROM establishment) AND i.results = 'Fail';
SELECT i.inspection_id  FROM inspection i  JOIN establishment e ON i.license_no = e.license_no  WHERE e.dba_name = 'KAMAYAN EXPRESS' AND i.employee_id IN      (SELECT emp.employee_id       FROM employee emp       WHERE emp.first_name = 'David' AND emp.last_name = 'Hodges');
SELECT MIN(salary), MAX(salary) FROM employee JOIN inspection ON employee.employee_id = inspection.employee_id WHERE inspection.inspection_id = 58424;
SELECT i.inspection_id FROM inspection i JOIN inspection_point pi ON i.inspection_id = pi.point_id JOIN violation v ON i.inspection_id = v.inspection_id JOIN employee e ON i.employee_id = e.employee_id JOIN inspection_point ip ON pi.category = ip.code WHERE v.inspector_comment = 'A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served. NO CERTIFIED FOOD MANAGER ON DUTY AT THIS TIME FOODS ARE COOKED AND SERVED SERIOUS CITATION ISSUED' AND ip.Description = 'Personnel'
SELECT COUNT(*)  FROM establishment  JOIN inspection_point ON establishment.license_no = inspection_point.point_id  JOIN violation ON inspection_point.point_id = violation.point_id  WHERE establishment.facility_type = 'Grocery Store'  AND violation.fine = 250;
SELECT DISTINCT ti.inspection_type, ip.category  FROM inspection_point AS ip  JOIN violation AS v ON ip.point_id = v.point_id  JOIN inspection AS ti ON v.inspection_id = ti.inspection_id  JOIN establishment AS e ON ti.license_no = e.license_no  WHERE e.dba_name = 'J & J FOOD';
SELECT e.license_no, e.dba_name  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  WHERE e.facility_type = 'Tavern' AND i.results = 'Fail' AND i.inspection_date LIKE '2010-01%'
SELECT COUNT(*)  FROM inspection  JOIN inspection_point ON inspection.inspection_id = inspection_point.point_id  WHERE inspection_point.point_level = 'Serious' AND inspection.fine = 0;
SELECT e.dba_name  FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN inspection_point ip ON i.inspection_id = ip.point_id WHERE ip.category = 'No Smoking Regulations';
SELECT      (COUNT(CASE WHEN i.results = 'Pass' THEN i.inspection_id END) - COUNT(CASE WHEN i.results = 'Fail' THEN i.inspection_id END)) AS difference FROM      inspection i JOIN      establishment e ON i.license_no = e.license_no WHERE      i.inspection_type = 'Canvass' AND e.facility_type = 'Restaurant';
SELECT e.first_name, e.last_name  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.results = 'Fail' AND MONTH(i.inspection_date) = 2 AND YEAR(i.inspection_date) = 2010  AND e.salary > (SELECT AVG(salary) * 0.7 FROM employee)
SELECT      (COUNT(CASE WHEN facility_type = 'Restaurant' THEN license_no END) * 100.0 / COUNT(license_no)) AS percentage FROM      establishment JOIN      inspection ON establishment.license_no = inspection.license_no JOIN      violation ON inspection.inspection_id = violation.inspection_id WHERE      fine = 500;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.year(date) = 2018 ORDER BY h.market_cap DESC LIMIT 1;
SELECT historical.volume_24h  FROM historical  JOIN coins ON historical.coin_id = coins.id  WHERE coins.name = 'Argentum' AND historical.date = '2016-11-10';
SELECT      historical.date,      historical.price  FROM      coins  JOIN      historical ON coins.id = historical.coin_id  WHERE      name = 'Zetacoin' AND      historical.date BETWEEN '2013-11-01' AND '2013-11-07'  UNION ALL  SELECT      'Average Price',      AVG(price)  FROM      coins  JOIN      historical ON coins.id = historical.coin_id  WHERE      name = 'Zetacoin' AND      historical.date BETWEEN '2013-11-01' AND '2013-11-07';
SELECT      MAX(historical.time_high) AS max_price_time,     MIN(historical.time_low) AS min_price_time FROM      historical JOIN      coins ON coins.id = historical.coin_id WHERE      coins.name = 'WRAP' AND      year(historical.date) = 2016 AND      month(historical.date) = 8;
SELECT historical.date FROM coins JOIN historical ON coins.id = historical.coin_id WHERE coins.name = 'DigixDAO' AND historical.price = (SELECT MAX(price) FROM historical);
SELECT      c.name,     h.date,     h.price FROM      coins c JOIN      historical h ON c.id = h.coin_id WHERE      h.percent_change_24h = (SELECT MAX(percent_change_24h) FROM historical)
SELECT      AVG(historical.circulating_supply) AS avg_monthly_circulating_supply FROM      coins JOIN      historical ON coins.id = historical.coin_id WHERE      coins.name = 'Frozen' AND      historical.date BETWEEN '2014-01-01' AND '2014-12-31'
SELECT      c.name,     MAX(h.date) AS last_transaction_date FROM      coins c JOIN      historical h ON c.id = h.coin_id WHERE      c.status = 'inactive' GROUP BY      c.name;
SELECT price  FROM historical  JOIN coins ON historical.coin_id = coins.id  WHERE coins.symbol = 'BTC' AND year(historical.date) = 2016;
SELECT historical.date, historical.price  FROM historical  JOIN coins ON historical.coin_id = coins.id  WHERE coins.name = 'Bitcoin' AND historical.price = (SELECT MIN(historical.price) FROM historical WHERE coin_id = historical.coin_id)
SELECT `status` FROM `coinmarketcap.coins` JOIN `coinmarketcap.historical` ON `coins.id` = `historical.coin_id` GROUP BY `coins.name` HAVING AVG(`historical.price`) > 1000;
SELECT c.name, h.date  FROM coins c  JOIN historical h ON c.id = h.coin_id  WHERE h.percent_change_1h = (SELECT MAX(percent_change_1h) FROM historical)
SELECT c.name FROM coins c JOIN (     SELECT coin_id, MAX(SUBTRACT(high, low)) as max_profit     FROM historical     GROUP BY coin_id ) h ON c.id = h.coin_id WHERE c.category = 'token' ORDER BY h.max_profit DESC LIMIT 1;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.percent_change_24h > (SELECT AVG(percent_change_24h) FROM historical WHERE DATE = '2013-06-22')   AND h.date = '2013-06-22';
SELECT coins.name FROM coins JOIN historical ON coins.id = historical.coin_id WHERE historical.date = '2013-04-28' AND historical.cmc_rank = 1;
SELECT price  FROM historical  JOIN coins ON historical.coin_id = coins.id  WHERE coins.symbol = 'BTC' AND date = '2013-04-28';
SELECT name  FROM coins  WHERE date = '2013-05-03' AND open IS NULL;
SELECT price  FROM historical  JOIN coins ON historical.coin_id = coins.id  WHERE coins.symbol = 'BTC' AND date = '2013-04-29' AND close IS NOT NULL;
SELECT historical.time_high  FROM historical  JOIN coins ON historical.coin_id = coins.id  WHERE coins.symbol = 'Bitcoin' AND historical.date = '2013-04-29';
SELECT      MAX(price) - MIN(price) as max_profit FROM      historical WHERE      coin_id IN (         SELECT id FROM coins WHERE slug = 'bitcoin'     ) AND      date = '2013-04-28';
SELECT      (MAX(s.max_supply) - t.total_supply) AS burned_bitcoins FROM      coins c JOIN      historical h ON c.id = h.coin_id JOIN      (         SELECT              MAX(`max_supply`) AS max_supply          FROM              coins      ) s  WHERE      c.symbol = 'BTC' AND      DATE_FORMAT(h.date, '%Y-%m-%d') = '2013-04-28';
SELECT coins.name FROM coins JOIN historical ON coins.id = historical.coin_id WHERE historical.date = '2016-01-08' AND historical.volume_24h = (     SELECT MAX(volume_24h)     FROM historical     WHERE date = '2016-01-08' );
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.total_supply > 10000000 AND h.date = '2013-04-28';
SELECT      CASE          WHEN historical.percent_change_7d > 0 THEN 'Increased'         WHEN historical.percent_change_7d < 0 THEN 'Decreased'     END AS price_change FROM      coinmarketcap.coins c JOIN      coinmarketcap.historical h ON c.id = h.coin_id WHERE      c.symbol = 'BTC' AND h.date = '2013-05-05';
SELECT      c.name FROM      coins c JOIN      historical h ON c.id = h.coin_id WHERE      c.name IN ('Bitcoin', 'Litecoin') AND     h.date = '2013-04-28' AND     (c.name = 'Bitcoin' OR (c.name = 'Litecoin' AND h.circulating_supply > (SELECT MAX(t.circulating_supply) FROM coins t JOIN historical th ON t.id = th.coin_id WHERE th.date = '2013-04-28' AND t.name = 'Bitcoin'))) ORDER BY      CASE          WHEN c.name = 'Bitcoin' THEN h.circulating_supply          ELSE h.circulating_supply END DESC LIMIT 1;
SELECT price  FROM historical  JOIN coins ON historical.coin_id = coins.id  WHERE coins.symbol = 'BTC' AND date = '2013-04-28';
SELECT AVG(historical.price)  FROM historical  JOIN coins ON historical.coin_id = coins.id  WHERE coins.name = 'Bitcoin' AND EXTRACT(YEAR FROM historical.date) = 2013;
SELECT      (SUM(coins.max_supply) - SUM(historical.total_supply)) * 100 / SUM(historical.total_supply) AS burned_percentage FROM      coins JOIN      historical ON coins.id = historical.coin_id WHERE      historical.date < '2018-04-28';
SELECT name  FROM coins  WHERE status = 'extinct';
SELECT `description`  FROM `coins`  WHERE `slug` = 'bitbar';
SELECT name  FROM coins  WHERE year(date_added) = 2013 AND month(date_added) = 5;
SELECT `name`, `symbol`  FROM `coins`  WHERE `date_added` = '2013-06-14';
SELECT c.name FROM coins c WHERE c.status = 'untracked' AND EXTRACT(YEAR FROM c.date_added) = 2014;
SELECT name  FROM coins  WHERE LENGTH(tag_names) - LENGTH(REPLACE(tag_names, ',', '')) = 2;
SELECT `name`  FROM `coins`  JOIN `historical` ON `coins.id` = `historical.coin_id`  WHERE `historical.price` = (SELECT MAX(`price`) FROM `historical`);
SELECT `name`  FROM `coins`  JOIN `historical` ON `coins.id` = `historical.coin_id`  WHERE `historical.cmc_rank` = 1 AND `historical.date` = '2013-04-29';
SELECT      historical.date FROM      coins  JOIN      historical ON coins.id = historical.coin_id WHERE      coins.name = 'Bitcoin' AND      historical.low IS NOT NULL ORDER BY      historical.low  LIMIT 1;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.volume_24h = (SELECT MAX(volume_24h) FROM historical)
SELECT name  FROM coins  WHERE year(date) = 2013 AND month(date) = 5 AND open IS NULL;
SELECT historical.date, historical.close  FROM historical  JOIN coins ON historical.coin_id = coins.id  WHERE coins.name = 'CHNCoin'  ORDER BY historical.close DESC  LIMIT 1;
SELECT historical.date  FROM historical  JOIN coins ON coins.id = historical.coin_id  WHERE coins.name = 'Peercoin' AND historical.cmc_rank = 5;
SELECT date  FROM historical  WHERE coin_id IN (SELECT id FROM coins WHERE name = 'Devcoin')  ORDER BY market_cap DESC  LIMIT 1;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2014-01-01' AND h.cmc_rank <= 5;
SELECT historical.date FROM coins  JOIN historical ON coins.id = historical.coin_id WHERE coins.name = 'Lebowskis' AND historical.open IS NULL;
SELECT historical.date, MAX(historical.price) FROM historical JOIN coins ON historical.coin_id = coins.id WHERE coins.name = 'Terracoin' ORDER BY historical.price DESC LIMIT 1;
SELECT COUNT(*)  FROM historical  JOIN coins ON historical.coin_id = coins.id  WHERE coins.name = 'Bytecoin'  AND year(historical.date) = 2013  AND month(historical.date) = 6;
SELECT `name` FROM `coins` JOIN `historical` ON `coins.id` = `historical.coin_id` WHERE `date` = '2013-04-28' AND `price` > (SELECT AVG(`price`) FROM `historical`);
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.percent_change_1h > 0 AND h.date = '2013-05-29'
SELECT COUNT(EmployeeID)  FROM Employees  WHERE TitleOfCourtesy = 'Dr.';
SELECT T3.FirstName, T3.LastName  FROM Employees AS T1  JOIN Employees AS T3 ON T1.ReportsTo = T3.EmployeeID  WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio';
SELECT HomePhone FROM Employees WHERE FirstName = 'Nancy' AND LastName = 'Davolio';
SELECT COUNT(*)  FROM Employees  WHERE LastName = 'Fuller' AND EmployeeID IN (     SELECT EmployeeID      FROM Employees      WHERE ReportsTo IS NOT NULL )
SELECT FirstName, LastName  FROM Employees  WHERE Salary = (SELECT MAX(Salary) FROM Employees);
SELECT      (SELECT Salary FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew') -      (SELECT Salary FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy') AS Difference
SELECT COUNT(*)  FROM Employees  WHERE Title = 'Sales Representative' AND Country = 'UK';
SELECT e.FirstName, e.LastName  FROM Employees e JOIN Orders o ON e.EmployeeID = o.EmployeeID JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.TerritoryDescription = 'Hollis';
SELECT COUNT(*)  FROM Employees  JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID  JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID  WHERE Employees.LastName = 'Davolio' AND Employees.FirstName = 'Nancy';
SELECT t.TerritoryDescription  FROM Territories t  JOIN Employees e ON t.ReportsTo = e.EmployeeID  WHERE e.FirstName = 'Nancy' AND e.LastName = 'Davolio';
SELECT COUNT(*)  FROM Employees  WHERE City = 'London';
SELECT DISTINCT t.TerritoryDescription  FROM Territories t  JOIN Employees e ON t.TerritoryID = e.TerritoryID  WHERE e.ReportsTo = (SELECT EmployeeID FROM Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller')
SELECT COUNT(*)  FROM Employees  WHERE Country = 'UK' AND EmployeeID IN (     SELECT EmployeeID      FROM Orders      GROUP BY EmployeeID      HAVING COUNT(DISTINCT ShipperID) > 4 );
SELECT COUNT(*)  FROM Territories  WHERE RegionDescription = 'Eastern';
SELECT DISTINCT t.TerritoryDescription  FROM Territories t  JOIN Region r ON t.RegionID = r.RegionID  WHERE r.RegionDescription = 'Eastern';
SELECT COUNT(*)  FROM Employees  WHERE EmployeeID IN (     SELECT EmployeeID      FROM Orders      WHERE ShipperID IN (         SELECT ShipperID          FROM Shippers          WHERE RegionDescription = 'Eastern'     ) );
SELECT e.HomePhone  FROM Employees e  JOIN PersonTerritories pt ON e.EmployeeID = pt.EmployeeID  JOIN Territories t ON pt.TerritoryID = t.TerritoryID  WHERE t.RegionDescription = 'Eastern';
SELECT      (SUM(CASE WHEN RegionDescription = 'Eastern' THEN 1 ELSE 0 END) -       SUM(CASE WHEN RegionDescription = 'Southern' THEN 1 ELSE 0 END)) as Difference_Teritories FROM YourTable;
SELECT ProductName FROM OrderDetails JOIN Orders ON OrderDetails.OrderID = Orders.OrderID WHERE Orders.OrderID = 10248;
SELECT od.Quantity FROM OrderDetails od JOIN Orders o ON od.OrderID = o.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE o.OrderID = 10273 AND p.ProductName = 'Ikura';
SELECT SUM(T3.UnitPrice * T4.Quantity) AS TotalPrice FROM Products AS T3  JOIN OrderDetails AS T4 ON T3.ProductID = T4.ProductID JOIN Orders AS T5 ON T4.OrderID = T5.OrderID WHERE T3.ProductName = 'Ikura' AND T5.OrderID = 10273;
SELECT SUM(p.units) AS TotalProduction FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE od.OrderID = 10248 ORDER BY od.Quantity DESC LIMIT 1;
SELECT p.ProductName  FROM Products p  JOIN OrderDetails od ON p.ProductID = od.ProductID  JOIN Orders o ON o.OrderID = od.OrderID  WHERE o.OrderID = 10248  GROUP BY p.ProductID  ORDER BY SUM(od.ReorderLevel) DESC  LIMIT 1;
SELECT COUNT(*)  FROM Orders  JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID  JOIN Products ON OrderDetails.ProductID = Products.ProductID  WHERE Products.ProductName = 'Tofu';
SELECT O.OrderID  FROM Orders O  JOIN Products P ON O.ProductID = P.ProductID  WHERE P.Discontinued = 1;
SELECT COUNT(*)  FROM Orders o  JOIN OrderDetails od ON o.OrderID = od.OrderID  JOIN Products p ON od.ProductID = p.ProductID  WHERE p.ProductName = 'Ikura' AND od.UnitPrice < p.Unit;
SELECT SupplierName  FROM Suppliers  JOIN Products ON Suppliers.SupplierID = Products.SupplierID  WHERE ProductName = 'Aniseed Syrup';
SELECT ProductName FROM Products WHERE SupplierID IN (     SELECT SupplierID     FROM Suppliers     WHERE Country = 'Japan' );
SELECT DISTINCT s.Phone  FROM Suppliers s  JOIN Products p ON s.SupplierID = p.SupplierID  WHERE p.UnitsInStock < p.UnitsOnOrder;
SELECT COUNT(*)  FROM Products  JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID  WHERE Products.Discontinued = 1 AND Suppliers.Country = 'USA';
SELECT      s.CompanyName  FROM      Suppliers s  JOIN      Products p ON s.SupplierID = p.SupplierID  WHERE      p.Unit > (SELECT MAX(Unit) FROM Products);
SELECT AVG(Employees.Salary)  FROM Employees  JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID  JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID  GROUP BY Employees.EmployeeID  HAVING COUNT(DISTINCT OrderDetails.OrderID) > 4;
SELECT      ((Products.UnitPrice - (SELECT UnitPrice FROM OrderDetails WHERE ProductID = Products.ProductID AND OrderID = 10273)) / Products.UnitPrice) * 100 AS PercentageLower FROM      Products WHERE      Products.ProductName = 'Ikura';
SELECT AVG(od.Quantity)  FROM Orders o  JOIN OrderDetails od ON o.OrderID = od.OrderID  WHERE od.ProductID IN (     SELECT ProductID      FROM Products      WHERE ProductName = 'Ikura' )
SELECT ProductID, (UnitsOnOrder / UnitsInStock) AS Ratio FROM OrderDetails od JOIN Orders o ON od.OrderID = o.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE o.OrderID = 10248 ORDER BY Ratio DESC LIMIT 1;
SELECT FirstName, LastName  FROM Employees  ORDER BY BirthDate DESC  LIMIT 1;
SELECT FirstName, LastName  FROM Employees  ORDER BY BirthDate DESC  LIMIT 1;
SELECT COUNT(*)  FROM Orders  WHERE EmployeeID = (SELECT EmployeeID FROM Employees WHERE FirstName = 'Michael' AND LastName = 'Suyama');
SELECTTerritoryDescription  FROMEmployees  WHERETitleOfCourtesy = 'Mr' AND FirstName = 'Robert' AND LastName = 'King';
SELECT T3.TerritoryDescription  FROM Employees AS T1 JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.TitleOfCourtesy = 'Ms' AND T1.LastName = 'Callahan' AND T1.FirstName = 'Laura';
SELECT CONCAT(E.FirstName, ' ', E.LastName) AS Full_Name FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID JOIN OrderDetails OD ON O.OrderID = OD.OrderID JOIN Categories C ON OD.ProductID = C.ProductID JOIN Products P ON C.ProductID = P.ProductID WHERE P.SupplierID IN (     SELECT S.SupplierID     FROM Suppliers S     JOIN Products Pr ON S.SupplierID = Pr.SupplierID     WHERE Pr.CategoryID IN (         SELECT Ca.CategoryID         FROM Categories Ca         WHERE Ca.Description = 'TerritoryDescription'     ) ) AND S.TerritoryDescription = 'Santa Monica';
SELECT e.HomePhone  FROM Employees e  JOIN PersonTerritories pt ON e.EmployeeID = pt.EmployeeID  JOIN Territories t ON pt.TerritoryID = t.TerritoryID  WHERE t.TerritoryDescription = 'Savannah';
SELECT SUM(od.Quantity) AS TotalQuantity FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE c.CustomerName = 'HILAA' AND o.OrderDate = '1997-12-25';
SELECT COUNT(DISTINCT od.ProductID) FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID WHERE o.ShipperID = (SELECT ShipperID FROM Orders WHERE Freight = (SELECT MAX(Freight) FROM Orders))
SELECT Shipper.ShipperName  FROM Orders  JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID  JOIN Products ON OrderDetails.ProductID = Products.ProductID  JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  WHERE Orders.OrderID = 10585;
SELECT COUNT(*)  FROM Orders  WHERE ShipperID IN (     SELECT ShipperID      FROM Shippers      WHERE CompanyName = 'Federal Shipping' )
SELECT COUNT(DISTINCT p.ProductID)  FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID  WHERE c.CategoryName = 'dairy products';
SELECT Categories.CategoryName  FROM Categories  JOIN Products ON Categories.CategoryID = Products.CategoryID  WHERE Products.ProductName = 'Tofu';
SELECT SUM(p.Unit * od.Quantity) AS TotalProduction FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON o.OrderID = od.OrderID JOIN Shippers s ON s.ShipperID = o.ShipperID WHERE s.SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Escargots Nouveaux');
SELECT p.ProductName, pd.ReorderLevel FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID JOIN OrderDetails pd ON p.ProductID = pd.ProductID WHERE s.CompanyName = 'Nord-Ost-Fisch Handelsgesellschaft mbH';
SELECT COUNT(DISTINCT p.ProductID) FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.CompanyName = 'Karkki Oy';
SELECT s.ContactName  FROM Suppliers s  JOIN Products p ON s.SupplierID = p.SupplierID  WHERE p.ProductName = 'Gudbrandsdalsost';
SELECT Supplier.Country  FROM Suppliers  JOIN Products ON Suppliers.SupplierID = Products.SupplierID  WHERE Products.ProductName = 'Scottish Longbreads';
SELECT COUNT(*)  FROM Territories  WHERE RegionID IN (     SELECT RegionID      FROM Regions      WHERE RegionDescription = 'Northern' );
SELECT RegionID FROM Territories WHERE TerritoryDescription = 'Columbia';
SELECT      (COUNT(CASE          WHEN T3.CompanyName = 'United Package' THEN T2.OrderID     END) / COUNT(T2.OrderID)) * 100 AS Percentage FROM      Customers AS T1 JOIN      Orders AS T2 ON T1.CustomerID = T2.CustomerID JOIN      Shippers AS T3 ON T3.ShipperID = T2.ShipperID WHERE      T1.CustomerID = 'WHITC';
SELECT      (COUNT(CASE WHEN T2.ShipperName = 'United Package' THEN T1.OrderID ELSE NULL END) - COUNT(CASE WHEN T2.ShipperName = 'Speedy Express' THEN T1.OrderID ELSE NULL END)) /      COUNT(CASE WHEN T2.ShipperName = 'Speedy Express' THEN T1.OrderID ELSE NULL END) * 100 AS percentage_increase FROM      Orders AS T1 JOIN      Shippers AS T2 ON T1.ShipperID = T2.ShipperID
SELECT      (COUNT(T1.TerritoryDescription WHERE T1.RegionDescription = 'Eastern')       / COUNT(T2.TerritoryDescription WHERE T2.RegionDescription = 'Southern')) AS Times FROM      Territories T1 JOIN      Region R ON T1.RegionID = R.RegionID JOIN      Territories T2 ON T2.RegionID = R.RegionID WHERE      T1.RegionDescription = 'Eastern' AND T2.RegionDescription = 'Southern';
SELECT COUNT(*)  FROM Customers  WHERE Country = (SELECT CustomerCountry FROM                    (SELECT CustomerCountry, MAX(COUNT(CustomerID)) as MaxCount                     FROM Customers                     GROUP BY CustomerCountry)                    WHERE MAX(COUNT(CustomerID)) = MaxCount);
SELECT OrderID FROM Orders WHERE Freight > 800;
SELECT Address, City, Region, Country, PostalCode  FROM Customers  WHERE CompanyName = 'Island Trading';
SELECT ProductName, MAX(Unit)  FROM Products;
SELECT COUNT(*)  FROM Suppliers  WHERE Country = 'USA';
SELECT ProductName  FROM Products  WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products);
SELECT FirstName, LastName  FROM Employees  WHERE Salary = (SELECT MAX(Salary) FROM Employees);
SELECT ProductName FROM Products WHERE Discontinued = 1;
SELECT AVG(T2.Salary)  FROM Employees AS T1  JOIN Salaries AS T2 ON T1.EmployeeID = T2.EmployeeID  JOIN Locations AS T3 ON T1.LocationID = T3.LocationID  WHERE T1.Title = 'Sales Representative' AND T3.Country = 'UK';
SELECT ShipperName AS Most_Widely_Used_Company FROM Shippers WHERE ShipCountry = 'USA' GROUP BY ShipperName ORDER BY COUNT(OrderID) DESC LIMIT 1;
SELECT COUNT(*)  FROM Products  WHERE SupplierID IN (     SELECT SupplierID      FROM Suppliers      WHERE CompanyName = 'Pavlova, Ltd.' )
SELECT COUNT(*)  FROM Orders  JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID  JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  WHERE Orders.CustomerID = 'GREAL' AND Shippers.CompanyName = 'United Package';
SELECT s.SupplierName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products)
SELECT COUNT(*)  FROM Orders  JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  WHERE Shippers.CompanyName = 'United Package';
SELECT COUNT(*)  FROM Suppliers  WHERE Country = 'Australia' AND EXISTS (   SELECT *   FROM Products    WHERE Suppliers.SupplierID = Products.SupplierID AND Discontinued = 1 );
SELECT      (p.UnitPrice * od.Quantity + s.Freight) AS TotalPurchasePrice  FROM      Products p      JOIN OrderDetails od ON p.ProductID = od.ProductID      JOIN Shippers s ON od.OrderID = s.OrderID  WHERE      p.ProductID IN (SELECT ProductID FROM Products ORDER BY UnitPrice DESC LIMIT 2) ORDER BY TotalPurchasePrice DESC LIMIT 1;
SELECT SupplierName FROM Suppliers WHERE SupplierID = (SELECT SupplierID                     FROM Products                     GROUP BY SupplierID                     ORDER BY COUNT(ProductID) DESC                     LIMIT 1);
SELECT ProductName FROM Products WHERE Unit < 5;
SELECT Title  FROM Employees  WHERE EmployeeID = (SELECT EmployeeID                       FROM Employees                       GROUP BY EmployeeID                       HAVING COUNT(TerritoryID) = MAX(COUNT(TerritoryID))                     );
SELECT ProductID, COUNT(ProductID) as TotalOrdered FROM OrderDetails GROUP BY ProductID ORDER BY TotalOrdered DESC LIMIT 1;
SELECT T3.TerritoryDescription  FROM Employees AS T1 JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.TitleOfCourtesy = 'Dr.'
SELECT TerritoryDescription FROM Territories WHERE RegionDescription = 'Eastern';
SELECT COUNT(TerritoryID) / COUNT(DISTINCT EmployeeID) AS AverageTerritoriesPerRepresentative FROM Employees WHERE Title = 'Sales Representative'
SELECT p.ProductName  FROM Products p  JOIN Categories c ON p.CategoryID = c.CategoryID  WHERE c.CategoryName = 'Beverages'  AND p.ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products WHERE CategoryID = c.CategoryID);
SELECT FirstName, LastName  FROM Employees  WHERE EmployeeID = (     SELECT EmployeeID      FROM Orders      GROUP BY EmployeeID      ORDER BY COUNT(OrderID) DESC      LIMIT 1 );
SELECT COUNT(*)  FROM Orders o  JOIN OrderDetails od ON o.OrderID = od.OrderID  WHERE o.ShippedDate IN (SELECT OrderDate FROM Orders WHERE Freight = (SELECT MAX(Freight) FROM Orders))
SELECT ProductID FROM Products WHERE CategoryID IN (     SELECT CategoryID     FROM Categories     WHERE CategoryName = 'Seafood' ) AND (UnitsInStock + UnitsOnOrder) = (     SELECT MAX(UnitsInStock + UnitsOnOrder)     FROM Products     WHERE CategoryID IN (         SELECT CategoryID         FROM Categories         WHERE CategoryName = 'Seafood'     ) );
SELECT      MAX(e1.Salary) - MAX(e2.Salary) AS SalaryDifference FROM      Employees e1     JOIN (         SELECT              e.EmployeeID, COUNT(t.TerritoryID) AS TerritoryCount         FROM              Employees e             JOIN Territories t ON e.EmployeeID = t.RepID         GROUP BY              e.EmployeeID         ORDER BY              TerritoryCount DESC         LIMIT 1     ) e2 WHERE      e1.EmployeeID != e2.EmployeeID
SELECT AVG(UnitPrice)  FROM Products  WHERE UnitsInStock > 50;
SELECT COUNT(*) AS num_customers  FROM Customers  GROUP BY City  ORDER BY num_customers DESC  LIMIT 1;  SELECT CompanyName  FROM Customers  WHERE City = (   SELECT City    FROM Customers    GROUP BY City    ORDER BY COUNT(*) DESC    LIMIT 1 );
SELECT      c.CustomerName,     c.ContactName,     c.ContactTitle FROM      Customers c WHERE      c.City = 'Madrid'
SELECT FirstName, LastName, HomePhone  FROM Employees  ORDER BY BirthDate DESC  LIMIT 1;
SELECT AVG(UnitPrice)  FROM Products  JOIN Orders ON Products.ProductID = Orders.OrderID  JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID  WHERE OrderDetails.ShipCountry = 'UK';
SELECT P.ProductName  FROM Products P  JOIN OrderDetails OD ON P.ProductID = OD.ProductID  GROUP BY P.ProductName  ORDER BY SUM(OD.Quantity) DESC  LIMIT 1;
SELECT s.CompanyName, s.Address, s.Phone  FROM Suppliers AS s JOIN Products AS p ON s.SupplierID = p.SupplierID WHERE p.UnitPrice > 30;
SELECT Customers.CustomerName, Customers.Address  FROM Customers  JOIN Orders ON Customers.CustomerID = Orders.CustomerID  JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  WHERE Shippers.Phone IS NOT NULL AND Orders.Freight > (SUM(Orders.Freight) / COUNT(OrderID))
SELECT FirstName, LastName  FROM Employees  WHERE TerritoryDescription = 'Wilton';
SELECT SupplierName FROM Suppliers WHERE Country <> 'USA' AND Discontinued = 1;
SELECT p.ProductName, MAX(od.Quantity * p.Price + COALESCE(sh.Freight, 0)) AS TotalCost FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON o.OrderID = od.OrderID LEFT JOIN Shippers sh ON o.ShipperID = sh.ShipperID WHERE o.OrderDate BETWEEN '1998-01-01 00:00:00' AND '1999-01-01 00:00:00' GROUP BY p.ProductName ORDER BY TotalCost DESC LIMIT 5;
SELECT COUNT(*)  FROM Customers  WHERE Country = 'Canada' AND EXISTS (   SELECT 1    FROM Orders    WHERE Orders.CustomerID = Customers.CustomerID AND          Shippers.ShipperID = Orders.ShipperID AND          Shippers.ShipperName = 'Federal Shipping' );
SELECT ProductName FROM OrderDetails GROUP BY ProductID ORDER BY COUNT(OrderID) DESC LIMIT 10;
SELECT SupplierID, COUNT(ProductID) as ProductCount  FROM Products  GROUP BY SupplierID  ORDER BY ProductCount DESC  LIMIT 1;
SELECT FirstName, LastName, RegionDescription  FROM Employees  ORDER BY FirstName, LastName;
SELECT      E.FirstName,      E.LastName,      E.Title,     C.Address  FROM      Employees E  JOIN      Orders O ON E.EmployeeID = O.EmployeeID  JOIN      OrderDetails OD ON O.OrderID = OD.OrderID  WHERE      O.OrderDate BETWEEN '1996-01-01 00:00:00' AND '1997-01-01 00:00:00'  GROUP BY      E.EmployeeID  ORDER BY      COUNT(OD.OrderDetailID) DESC  LIMIT 1;
SELECT      AVG(OD.UnitPrice) AS AverageUnitPrice FROM      Orders O JOIN      OrderDetails OD ON O.OrderID = OD.OrderID JOIN      Shippers S ON O.ShipperID = S.ShipperID WHERE      S.CompanyName = 'United Package' AND      O.OrderDate >= '1997-01-01 00:00:00' AND      O.OrderDate < '1998-01-01 00:00:00'
SELECT      (COUNT(CASE WHEN Shippers.ShipperName = 'Speedy Express' THEN 1 END)      / CAST(COUNT(*) AS FLOAT)) * 100 AS ShippingPercentage FROM      Shippers;
SELECT e.FirstName, e.LastName, ToC.CourtesyTitle FROM Employees e JOIN TitlesToCourtesies ToC ON e.TitleOfCourtesy = ToC.TitleOfCourtesy WHERE e.Salary = (SELECT MIN(salary) FROM Employees) ORDER BY e.Salary LIMIT 3;
SELECT e.LastName FROM Employees e JOIN Titles t ON e.TitleID = t.TitleID WHERE t.Title = 'Vice President, Sales';
SELECT MAX(UnitPrice * Quantity * (1 - Discount)) AS HighestTotalPricePaidForAnOrder  FROM Orders JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID  JOIN Products ON OrderDetails.ProductID = Products.ProductID;
SELECT ProductID, ProductName FROM Products JOIN (     SELECT MAX(SUM(UnitsInStock, UnitsOnOrder)) as max_quantity     FROM (SELECT UnitsInStock FROM Products UNION ALL SELECT UnitsOnOrder FROM Products) as units ) as max_values ON (     (ProductID IN (         SELECT ProductID         FROM OrderDetails         GROUP BY ProductID         ORDER BY SUM(Quantity) DESC         LIMIT 3     ))     OR      (ProductID IN (         SELECT ProductID         FROM OrderDetails         GROUP BY ProductID         ORDER BY SUM(Unit) DESC         LIMIT 3     )) ) ;
SELECT P.ProductID  FROM Products P  JOIN (     SELECT SupplierID, MAX(UnitPrice) AS MaxUnitPrice      FROM Products      GROUP BY SupplierID ) M ON P.SupplierID = M.SupplierID AND P.UnitPrice = M.MaxUnitPrice JOIN (     SELECT SupplierID, MIN(ReorderLevel) AS MinReorderLevel      FROM Products      GROUP BY SupplierID ) R ON P.SupplierID = R.SupplierID AND R.MinReorderLevel = 0 -- Assuming least satisfaction is when ReorderLevel is minimum and assuming it's not null ORDER BY M.MaxUnitPrice DESC, R.MinReorderLevel ASC LIMIT 10;
SELECT COUNT(*)  FROM Products  JOIN Categories ON Products.CategoryID = Categories.CategoryID  WHERE Categories.CategoryName = 'Dairy Products' AND Products.Discontinued = 0;
SELECT DISTINCT t2.TerritoryDescription  FROM Employees AS t1  JOIN EmployeeTerritories AS t3 ON t1.EmployeeID = t3.EmployeeID  JOIN Territories AS t2 ON t3.TerritoryID = t2.TerritoryID  WHERE t1.Title = 'Inside Sales Coordinator';
SELECT DISTINCT s.CompanyName FROM Shippers s JOIN Orders o ON s.ShipperID = o.ShipperID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE s.ShipperName IS NOT NULL AND p.Price * od.Quantity > 2000000;
SELECT T3.CompanyName FROM Orders AS T1 JOIN OrderDetails AS T2 ON T1.OrderID = T2.OrderID JOIN Shippers AS T3 ON T1.ShipVia = T3.ShipperID WHERE T3.ShipCity = 'Aachen' GROUP BY T3.ShipperID, T3.CompanyName ORDER BY COUNT(T2.ProductID) DESC LIMIT 1;
SELECT e.FirstName, e.LastName  FROM Employees e  JOIN Orders o ON e.EmployeeID = o.EmployeeID  JOIN Shippers s ON o.ShipperID = s.ShipperID  WHERE s.RegionDescription = 'Northern';
SELECT `ContactName`  FROM `Suppliers`  WHERE `SupplierName` = 'Pavlova';
SELECT p.ProductName  FROM Products p  JOIN Orders o ON p.ProductID = o.OrderDetailID  JOIN Shippers s ON o.ShipperID = s.ShipperID  WHERE s.ShipCity = 'Paris';
SELECT ProductName FROM OrderDetails JOIN Orders ON OrderDetails.OrderID = Orders.OrderID WHERE Orders.ShippingPostalCode = '28023' GROUP BY ProductID ORDER BY SUM(OrderDetails.Quantity) ASC LIMIT 1;
SELECT e.FirstName, e.LastName  FROM Employees e  JOIN Orders o ON e.EmployeeID = o.EmployeeID  JOIN Shippers s ON o.ShipperID = s.ShipperID  JOIN Suppliers sup ON sup.SupplierID = s.SupplierID  WHERE sup.ContactName LIKE '%Fuller%' AND        e.LastName = 'Andrew' AND        e.FirstName = 'Fuller' AND        s.RegionDescription = 'Southern';
SELECT Orders.OrderDate  FROM Orders  JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID  JOIN Products ON OrderDetails.ProductID = Products.ProductID  JOIN Customers ON Orders.CustomerID = Customers.CustomerID  WHERE Customers.CustomerName = 'Du monde entier'  AND Products.ProductName = 'Filo Mix'  AND OrderDetails.Quantity = 9;
SELECT DISTINCT c.CategoryName FROM Categories c JOIN Products p ON c.CategoryID = p.CategoryID JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID WHERE o.OrderID = 10933;
SELECT E.Phone FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID JOIN OrderDetails OD ON O.OrderID = OD.OrderID JOIN Products P ON OD.ProductID = P.ProductID JOIN Categories C ON P.CategoryID = C.CategoryID JOIN Shippers S ON O.ShipperID = S.ShipperID WHERE C.Description = 'Food' AND S.TerritoryDescription = 'Portsmouth'
SELECT      (SUM(od.Quantity) / COUNT(od.ProductID)) AS AverageQuantity FROM      OrderDetails od JOIN      Orders o ON od.OrderID = o.OrderID JOIN      Shippers s ON o.ShipperID = s.ShipperID WHERE      s.ShipperName = 'Federal Shipping' AND      o.OrderDate >= '1996-11-01' AND      o.OrderDate < '1996-12-01';
SELECT      (COUNT(CASE          WHEN T2.ShipName = 'United Package' AND               T2.ShippedDate >= '1996-09-01 00:00:00' AND               T2.ShippedDate < '1996-09-30 00:00:00'     THEN 1 ELSE 0 END) * 100.0 / COUNT(CASE          WHEN T2.ShipName = 'United Package' AND               T2.ShippedDate >= '1996-01-01 00:00:00' AND               T2.ShippedDate < '1997-01-01 00:00:00'     THEN 1 ELSE 0 END)) AS Percentage FROM      Orders T1 JOIN      Shippers T2 ON T1.ShipVia = T2.ShipperID;
SELECT COUNT(*)  FROM Customers  WHERE ContactTitle LIKE '%Owner%' AND Country = 'Mexico';
SELECT Customers.Address, Customers.City, Customers.PostalCode, Customers.Country  FROM Customers  WHERE Customers.ContactName = 'Andr Fonseca';
SELECT CompanyName FROM Shippers WHERE Phone LIKE '(171)%';
SELECT      (COUNT(CASE WHEN e.Country = 'UK' AND e.Title = 'sales representative' THEN e.EmployeeID END) -      COUNT(CASE WHEN e.Country = 'USA' AND e.Title = 'sales representative' THEN e.EmployeeID END)) AS EmployeeDifference FROM Employees e
SELECT COUNT(*)  FROM Employees  WHERE ContactTitle = 'Sales Associate' AND City = 'Sao Paulo' AND Country = 'Brazil';
SELECT e.LastName  FROM Employees e  JOIN Orders o ON e.EmployeeID = o.EmployeeID  JOIN OrderDetails od ON o.OrderID = od.OrderID  JOIN Shippers s ON o.ShipperID = s.ShipperID  WHERE o.OrderID = 10521 AND o.CustomerID = 'CACTU';
SELECT T3.ShipperName  FROM Orders AS T1  JOIN Employees AS T2 ON T1.EmployeeID = T2.EmployeeID  JOIN Shippers AS T3 ON T1.ShipperID = T3.ShipperID  WHERE T1.OrderID = 10692;
SELECT Shippers.ShipperName  FROM Orders  JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID  JOIN Products ON OrderDetails.ProductID = Products.ProductID  WHERE Orders.OrderID = 10558;
SELECT `OrderID` FROM `Orders` JOIN `OrderDetails` ON `Orders.OrderID` = `OrderDetails.OrderID` JOIN `Shippers` ON `Orders.ShipperID` = `Shippers.ShipperID` WHERE `Shippers.ShipperName` = 'Speedy Express' LIMIT 3;
SELECT ProductName FROM Products JOIN Categories ON Products.CategoryID = Categories.CategoryID WHERE Categories.CategoryName = 'beverage';
SELECT Description  FROM Categories  JOIN Products ON Categories.CategoryID = Products.CategoryID  WHERE Products.ProductName = 'tofu';
SELECT T3.CompanyName FROM Products AS T1 JOIN Suppliers AS T3 ON T1.SupplierID = T3.SupplierID WHERE T1.ProductName = 'Gula Malacca';
SELECT ProductName FROM Products WHERE SupplierID = (     SELECT SupplierID     FROM Suppliers     WHERE SupplierName = 'Aux joyeux ecclsiastiques' );
SELECT p.UnitPrice  FROM Products p  JOIN Suppliers s ON p.SupplierID = s.SupplierID  WHERE s.SupplierName = 'Mayumi\'s' AND p.ProductName = 'Konbu';
SELECT Customers.ContactName  FROM Products  JOIN Categories ON Products.CategoryID = Categories.CategoryID  JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID  JOIN Customers ON Products.SupplierID = Customers.CustomerID  WHERE Products.ProductName = 'Camembert Pierrot';
SELECT ProductName FROM Products JOIN Categories ON Products.CategoryID = Categories.CategoryID WHERE Categories.CategoryName = 'Meat/Poultry' AND Products.Discontinued = 1 LIMIT 3;
SELECT ProductName FROM Products JOIN Orders ON Products.ProductID = OrderDetails.ProductID JOIN Customers ON Orders.CustomerID = Customers.CustomerID WHERE Customers.CompanyName = 'Heli Swaren GmbH & Co. KG' ORDER BY OrderDetails.ReorderLevel DESC LIMIT 2;
SELECT ContactName FROM Customers WHERE CompanyName = 'Heli Swaren GmbH & Co. KG';
SELECT Country  FROM Suppliers  WHERE SupplierName = 'Drachenblut Delikatessen';
SELECT COUNT(*) AS TerritoryCount FROM Territories;
SELECT      MAX(UnitPrice * Quantity * (1 - Discount)) AS LargestTotalPrice FROM      Orders o JOIN      OrderDetails od ON o.OrderID = od.OrderID;
SELECT ProductName FROM Products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM Products);
SELECT COUNT(*)  FROM Orders  JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID  WHERE Shippers.Country = 'France';
SELECT t3.RegionDescription  FROM Customers AS t1  JOIN Orders AS t2 ON t1.CustomerID = t2.CustomerID  JOIN TerritoryHistory AS t3 ON t2.TerritoryID = t3.TerritoryID  WHERE t1.Address LIKE '%Hoffman Estates%'
SELECT s.CompanyName, s.Address, s.City, s.Country FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.ProductName = 'Thringer Rostbratwurst';
SELECT e.FirstName FROM Employees e JOIN Orders o ON e.EmployeeID = o.EmployeeID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.ShipCity = 'Reims';
SELECT MAX(OrderDetails.Quantity)  FROM OrderDetails  JOIN Products ON OrderDetails.ProductID = Products.ProductID  WHERE Products.ProductName = 'Manjimup Dried Apples';
SELECT COUNT(*)  FROM Orders  WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'Speedy Express');
SELECT DISTINCT t.TerritoryDescription  FROM Territories t  JOIN Region r ON t.RegionID = r.RegionID  WHERE r.RegionDescription = 'Southern';
SELECT P.Unit, P.Price  FROM Products P  JOIN Categories C ON P.CategoryID = C.CategoryID  WHERE C.Description = 'Cheeses';
SELECT COUNT(*)  FROM Orders  WHERE CustomerID IN (     SELECT CustomerID      FROM Customers      WHERE Company = 'Laughing Bacchus Wine Cellars' );
SELECT p.ProductName  FROM Products p  JOIN Orders o ON p.ProductID = o.OrderDetailID  JOIN Shippers s ON o.ShipperID = s.ShipperID  WHERE s.Address = 'Starenweg 5';
SELECT ProductName FROM Products WHERE SupplierID IN (     SELECT SupplierID     FROM Suppliers     WHERE SupplierName = 'Bigfoot Breweries' );
SELECT t3.TerritoryDescription  FROM Employees AS t1 JOIN EmployeeTerritories AS t2 ON t1.EmployeeID = t2.EmployeeID JOIN Territories AS t3 ON t2.TerritoryID = t3.TerritoryID WHERE t1.LastName = 'King' AND t1.FirstName = 'Robert';
SELECT Customers.ContactName  FROM Orders  JOIN Customers ON Orders.CustomerID = Customers.CustomerID  WHERE Orders.ShipCountry = 'Switzerland';
SELECT      (COUNT(CASE WHEN T2.Title = 'Sales Representative' THEN T1.OrderID ELSE NULL END) * 100.0 / COUNT(T1.OrderID)) AS percentage FROM      Orders AS T1 JOIN      Employees AS T2 ON T1.EmployeeID = T2.EmployeeID;
SELECT COUNT(*)  FROM Employees  WHERE Country = 'USA' AND TitleOfCourtesy = 'Dr.'
SELECT AVG(Employees.Salary)  FROM Employees  WHERE Employees.EmployeeID BETWEEN 1 AND 9;
SELECT SUM(e.Salary)  FROM Employees e  JOIN Customers c ON e.EmployeeID = c.EmployeeID  WHERE c.Country = 'UK';
SELECT COUNT(*)  FROM Employees  WHERE FirstName = 'Laura' AND LastName = 'Callahan' AND Phone LIKE '%(206) 555-1189%';
SELECT Notes  FROM Employees  WHERE Salary = (SELECT MAX(Salary) FROM Employees);
SELECT Customers.CustomerID  FROM Customers  JOIN Orders ON Customers.CustomerID = Orders.CustomerID  WHERE Orders.EmployeeID IN (     SELECT Employees.EmployeeID      FROM Employees      WHERE Employees.FirstName = 'Michael' AND Employees.LastName = 'Suyama' );
SELECT DISTINCT o.ShipCountry FROM Orders o JOIN Employees e ON o.EmployeeID = e.EmployeeID JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE e.FirstName = 'Janet' AND e.LastName = 'Leverling';
SELECT COUNT(*)  FROM Orders  WHERE EmployeeID = (SELECT EmployeeID FROM Employees WHERE FirstName = 'Margaret' AND LastName = 'Peacock');
SELECT AVG(Employees.Salary)  FROM Employees  WHERE Employees.FirstName = 'Andrew' AND Employees.LastName = 'Fuller';
SELECT ProductName  FROM Products  WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Exotic Liquids');
SELECT ProductID, QuantityPerUnit  FROM Products  WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Tokyo Traders');
SELECT COUNT(*)  FROM Products  WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'New Orleans Cajun Delights') AND Unit = 'DISCONTINUED';
SELECT AVG(UnitPrice)  FROM Products  WHERE SupplierID IN (     SELECT SupplierID      FROM Suppliers      WHERE SupplierName = 'Formaggi Fortini s.r.l.' );
SELECT COUNT(p.ProductName)  FROM Products p  JOIN Suppliers s ON p.SupplierID = s.SupplierID  WHERE s.Country = 'Japan';
SELECT `ContactName`  FROM `Products`  JOIN `Categories` ON `Products`.`CategoryID` = `Categories`.`CategoryID`  WHERE `ProductName` = 'Teatime Chocolate Biscuits';
SELECT SupplierName FROM Suppliers WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM Suppliers);
SELECT s.ContactTitle  FROM Suppliers s  JOIN Products p ON s.SupplierID = p.SupplierID  WHERE p.QuantityPerUnit = '10 boxes x 12 pieces';
SELECT SUM(T3.UnitsOnOrder) AS TotalUnitsOnOrder FROM Suppliers AS T1  JOIN Categories AS T2 ON T1.SupplierID = T2.SupplierID JOIN OrderDetails AS T3 ON T2.CategoryID = T3.ProductID WHERE T1.SupplierName = 'Exotic Liquids';
SELECT      (COUNT(CASE WHEN s.SupplierName = 'Gai pturage' THEN 1 ELSE NULL END)      / CAST((SELECT COUNT(*) FROM Suppliers) AS REAL)) * 100 AS percentage FROM      Suppliers s;
SELECT ProductID FROM Products WHERE UnitsInStock = (SELECT MAX(UnitsInStock) FROM Products) ORDER BY UnitsInStock DESC LIMIT 5;
SELECT COUNT(*)  FROM Products  WHERE Discontinued = 1;
SELECT      c.Address,     s.Phone AS HomePhone,     e.Salary FROM      Employees e JOIN      Categories c ON e.Title = 'Sales Manager' JOIN      Employees s ON e.EmployeeID = s.EmployeeID
SELECT FirstName, LastName, PhotoPath  FROM Employees  WHERE Title = 'Vice President, Sales';
SELECT TOP 10 T3.CompanyName, SUM(T5.Quantity * T4.UnitPrice) AS TotalSales FROM Categories T1 JOIN Products T2 ON T1.CategoryID = T2.CategoryID JOIN OrderDetails T5 ON T2.ProductID = T5.ProductID JOIN Orders T6 ON T6.OrderID = T5.OrderID JOIN Customers T3 ON T3.CustomerID = T6.CustomerID GROUP BY T3.CompanyName ORDER BY TotalSales DESC;
SELECT      c.CategoryName,     AVG(od.Quantity * p.UnitPrice) AS AverageSales FROM      Categories c JOIN      Products p ON c.CategoryID = p.CategoryID JOIN      OrderDetails od ON p.ProductID = od.ProductID GROUP BY      c.CategoryName;
SELECT SUM(od.Quantity) AS TotalOrderQuantity FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE p.ProductName = 'Uncle Bob\'s Organic Dried Pears';
SELECT COUNT(*)  FROM Products p  JOIN Categories c ON p.CategoryID = c.CategoryID  JOIN OrderDetails od ON p.ProductID = od.ProductID  WHERE c.CategoryName = 'Seafood' AND od.Quantity > 50;
SELECT ProductID, ReorderLevel  FROM Products  JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID  WHERE SupplierName = 'Pavlova, Ltd';
SELECT DISTINCT s.SupplierName  FROM Suppliers s  JOIN Products p ON s.SupplierID = p.SupplierID  WHERE p.Discontinued = 1;
SELECT FirstName, LastName  FROM Employees  WHERE EmployeeID IN (     SELECT EmployeeID      FROM EmployeeTerritories      GROUP BY EmployeeID      HAVING COUNT(TerritoryID) < 4 );
SELECT COUNT(*)  FROM Employees e  JOIN EmployeeTerritories et ON e.EmployeeID = et.EmployeeID  JOIN Territories t ON et.TerritoryID = t.TerritoryID  WHERE t.RegionDescription = 'Eastern';
SELECT COUNT(*)  FROM Orders  JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  WHERE ShippedDate BETWEEN '1997-03-01' AND '1997-10-08'  AND Shippers.CompanyName = 'Federal Shipping';
SELECT DISTINCT Orders.CustomerID FROM Orders JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID JOIN Products ON OrderDetails.ProductID = Products.ProductID JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Shippers.ShipperName = 'Margaret Peacock' AND Shippers.ShipCountry = 'Brazil' AND Orders.OrderDate BETWEEN '1997-03-31' AND '1997-12-10';
SELECT p.ProductName, od.Quantity FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE od.Quantity = 1;
SELECT      p.ProductName,      p.Unit * od.UnitInStock AS StockValue FROM      Products p  JOIN      OrderDetails od ON p.ProductID = od.ProductID  JOIN      Categories c ON p.CategoryID = c.CategoryID  WHERE      c.CategoryName = 'Condiments';
SELECT COUNT(*)  FROM Employees  WHERE FirstName = 'Anne' AND LastName = 'Dodsworth';
SELECT      c.CustomerID,     MAX(DATEDIFF(c.RequiredDate, o.ShippedDate)) AS LongestDelay FROM      Customers c JOIN      Orders o ON c.CustomerID = o.CustomerID JOIN      Shippers s ON o.ShipperID = s.ShipperID WHERE      c.Country = 'USA' GROUP BY      c.CustomerID HAVING      MAX(DATEDIFF(c.RequiredDate, o.ShippedDate)) > 0;
SELECT      c.ContactName,      s.Phone  FROM      Customers c JOIN      Orders o ON c.CustomerID = o.CustomerID JOIN      OrderDetails od ON o.OrderID = od.OrderID JOIN      Products p ON od.ProductID = p.ProductID JOIN      Shippers s ON o.ShipperID = s.ShipperID WHERE      (1 - p.Discount) * od.Quantity * p.UnitPrice = (         SELECT              MAX((1 - p.Discount) * od.Quantity * p.UnitPrice)         FROM              OrderDetails od         JOIN              Products p ON od.ProductID = p.ProductID     )
SELECT      e1.FirstName,      e1.LastName,      COALESCE(e2.FirstName || ' ' || e2.LastName, 'Unknown') AS SupervisorName FROM      Customers c JOIN      Orders o ON c.CustomerID = o.CustomerID JOIN      OrderDetails od ON o.OrderID = od.OrderID JOIN      Products p ON od.ProductID = p.ProductID JOIN      Employees e1 ON o.EmployeeID = e1.EmployeeID LEFT JOIN      Employees e2 ON e1.ReportsTo = e2.EmployeeID WHERE      Max(od.Quantity * p.UnitPrice * (1 - p.Discount)) = Max(Multiply(od.Quantity, p.UnitPrice, Subtract(1, p.Discount)))  GROUP BY      e1.FirstName,      e1.LastName;
SELECT COUNT(*)  FROM Customers  WHERE City = 'Berlin' AND Country = 'Germany';
SELECT COUNT(*)  FROM Products  JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID  WHERE Suppliers.SupplierName = 'Exotic Liquids';
SELECT      s.SupplierName,     p.ProductName FROM      Suppliers s JOIN      Products p ON s.SupplierID = p.SupplierID WHERE      p.UnitPrice = (SELECT MIN(UnitPrice) FROM Products);
SELECT AVG(T2.Unit) as AverageUnitPrice FROM Suppliers AS T1 JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.SupplierName = 'Tokyo Traders';
SELECT COUNT(*)  FROM Territories  WHERE RegionDescription = 'Eastern';
SELECT RegionDescription, MAX(COUNT(TerritoryID)) AS MostTerritories FROM Territories GROUP BY RegionDescription;
SELECT r.RegionDescription  FROM Territories t  JOIN Region r ON t.RegionID = r.RegionID  WHERE t.TerritoryID = 2116;
SELECT      (COUNT(CASE WHEN c.City = 'Madrid' THEN o.OrderID END) / COUNT(o.OrderID)) * 100 AS Percentage FROM      Orders o  JOIN      Customers c ON o.CustomerID = c.CustomerID  WHERE      YEAR(o.OrderDate) = 1996;
SELECT LastName, FirstName, Notes  FROM Employees;
SELECT FirstName  FROM Employees  WHERE Salary = (SELECT MAX(Salary) FROM Employees);
SELECT COUNT(*)  FROM Employees  WHERE Title = 'Sales Representative' AND Salary > 2000;
SELECT COUNT(*)  FROM Orders  WHERE YEAR(OrderDate) = 1996 AND Orders.CustomerID IN (     SELECT CustomerID      FROM Customers      WHERE Country = 'UK' );
SELECT      c.CompanyName FROM      Orders o JOIN      Employees e ON o.EmployeeID = e.EmployeeID JOIN      Customers c ON o.CustomerID = c.CustomerID WHERE      YEAR(o.OrderDate) = 1998 GROUP BY      c.CompanyName ORDER BY      COUNT(o.OrderID) DESC LIMIT 1;
SELECT      c.Country,     COUNT(o.OrderID) AS NumberOfOrders FROM      Customers c JOIN      Orders o ON c.CustomerID = o.CustomerID WHERE      YEAR(o.OrderDate) = 1996 GROUP BY      c.Country;
SELECT COUNT(*)  FROM Orders  JOIN Customers ON Orders.CustomerID = Customers.CustomerID  WHERE Customers.CompanyName = 'Hanna Moos' AND YEAR(Orders.OrderDate) = 1999;
SELECT      MIN(DATEDIFF(OrderDetails.ShippedDate, Orders.OrderDate)) AS FastestShippingDays FROM      Orders JOIN      OrderDetails ON Orders.OrderID = OrderDetails.OrderID JOIN      Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE      Shippers.ShipperName = 'Berglunds snabbkp'
SELECT Customers.CompanyName  FROM Orders  JOIN Customers ON Orders.CustomerID = Customers.CustomerID  WHERE Orders.OrderID = 10257;
SELECT YEAR(OrderDate), COUNT(OrderID) FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE CompanyName = 'Around the Horn') GROUP BY YEAR(OrderDate) ORDER BY COUNT(OrderID) DESC LIMIT 1;
SELECT COUNT(*)  FROM Employees  WHERE FirstName = 'Andrew' AND LastName = 'Fuller' AND ReportsTo IS NOT NULL;
SELECT Country  FROM Suppliers  GROUP BY Country  ORDER BY COUNT(SupplierID) DESC  LIMIT 1;
SELECT e.FirstName, e.LastName  FROM Employees e  JOIN Employees m ON e.ReportsTo = m.EmployeeID  WHERE m.Title = 'Sales Manager';
SELECT COUNT(*)  FROM Orders  WHERE OrderDate = '1996-08'  AND CustomerID IN (     SELECT CustomerID      FROM Orders      WHERE OrderDate = '1996-08'      GROUP BY CustomerID      ORDER BY COUNT(OrderID) DESC      LIMIT 1 )
SELECT FirstName, LastName, Salary  FROM Employees  WHERE HireDate = (SELECT MIN(HireDate) FROM Employees);
SELECT      MAX(YEAR(CURRENT_DATE) - YEAR(Employees.BirthDate)) AS AgeAtHire FROM      Employees;
SELECT SUM(UnitPrice * Quantity)  FROM Products  JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID  WHERE Products.Discontinued = 1;
SELECT Categories.CategoryName  FROM Categories  JOIN Products ON Categories.CategoryID = Products.CategoryID  WHERE Products.Discontinued = 1  GROUP BY Categories.CategoryID, Categories.CategoryName  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM Products  JOIN Categories ON Products.CategoryID = Categories.CategoryID  JOIN Orders ON Orders.OrderID = OrderDetails.OrderID  JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID  WHERE Categories.CategoryName = 'Condiments' AND YEAR(Orders.OrderDate) = 1997;
SELECT Customers.CustomerName  FROM Orders  JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID  GROUP BY Orders.CustomerID  ORDER BY COUNT(OrderDetails.ProductID) DESC  LIMIT 1;
SELECT      EXTRACT(MONTH FROM o.ShippedDate) * 100 + EXTRACT(YEAR FROM o.ShippedDate) AS MonthYear,     AVG(SUM(od.Quantity)) OVER () AS MonthlyAverageProductsShipped FROM      Orders o JOIN      OrderDetails od ON o.OrderID = od.OrderID JOIN      Shippers s ON o.ShipperID = s.ShipperID WHERE      s.CompanyName = 'Federal Shipping' AND      EXTRACT(YEAR FROM o.ShippedDate) = 1996 GROUP BY      MonthYear;
SELECT ProductName  FROM Products  WHERE SupplierID IN (     SELECT SupplierID      FROM Suppliers      WHERE CompanyName = 'G''day, Mate' )
SELECT COUNT(*)  FROM Territories  WHERE RegionID = (SELECT RegionID FROM Territories GROUP BY RegionID ORDER BY COUNT(TerritoryID) DESC LIMIT 1)
SELECT SupplierName FROM Suppliers WHERE SupplierID = (     SELECT SupplierID     FROM Products     WHERE Unit = (         SELECT MAX(Unit)         FROM Products     ) );
SELECT COUNT(*)  FROM Employees  WHERE TitleOfCourtesy = 'Mrs.' OR TitleOfCourtesy = 'Ms.'  AND EmployeeID IN (     SELECT EmployeeID      FROM EmployeeTerritories      GROUP BY EmployeeID      HAVING COUNT(TerritoryID) >= 3 )
SELECT s.SupplierName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products) LIMIT 8;
SELECT      c.CustomerName  FROM      Customers c JOIN      Orders o ON c.CustomerID = o.CustomerID JOIN      OrderDetails od ON o.OrderID = od.OrderID JOIN      Products p ON od.ProductID = p.ProductID WHERE      od.Quantity * p.UnitPrice = (         SELECT              MAX(od.Quantity * p.UnitPrice)          FROM              OrderDetails od          JOIN              Products p ON od.ProductID = p.ProductID         WHERE              od.Discount = 0     ) AND o.Discount = 0
SELECT SUM(od.UnitPrice * od.Quantity) FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Employees e ON o.EmployeeID = e.EmployeeID WHERE e.FirstName = 'Nancy' AND e.LastName = 'Davolio'   AND YEAR(o.OrderDate) = 1996 AND MONTH(o.OrderDate) = 12   AND od.Discount = 0;
SELECT SUM(UnitPrice * Quantity) AS TotalSales FROM Orders JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID WHERE YEAR(Orders.OrderDate) = 1997;
SELECT      SUM(OD.Quantity * P.UnitPrice * (1 - OD.Discount)) AS AnnualSalesAmount FROM      Orders O JOIN      OrderDetails OD ON O.OrderID = OD.OrderID JOIN      Products P ON OD.ProductID = P.ProductID WHERE      DATE_FORMAT(O.ShippedDate, '%Y') BETWEEN '1997' AND '1998';
SELECT COUNT(*)  FROM Orders  JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID  JOIN Products ON OrderDetails.ProductID = Products.ProductID  JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID  WHERE Shippers.Country = 'Venezuela' AND YEAR(Orders.OrderDate) = 1996;
SELECT CategoryID, Description  FROM Categories  WHERE CategoryName = 'Condiments';
SELECT      o.OrderID,      od.ProductID,      p.Unit FROM      Orders o JOIN      OrderDetails od ON o.OrderID = od.OrderID JOIN      Products p ON od.ProductID = p.ProductID WHERE      (od.Quantity * p.Unit * (1 - p.Discount)) > 15000;
SELECT td.TerritoryID  FROM Employee e  JOIN EmployeeTerritory et ON e.EmployeeID = et.EmployeeID  JOIN Territory t ON et.TerritoryID = t.TerritoryID  WHERE e.EmployeeID = 7;
SELECT      s.SupplierName,     s.Phone,     sf.HomepageAddress FROM      Suppliers s JOIN      Shippers sf ON s.ShipperID = sf.ShipperID WHERE      s.City = 'Sydney';
SELECT T1.FirstName, T1.LastName, T2.BirthDate  FROM Employees AS T1  JOIN (     SELECT EmployeeID      FROM Employees      WHERE Title = 'Vice President, Sales' ) AS T2 ON T1.EmployeeID = T2.EmployeeID  JOIN (     SELECT DATE_PART('year', AGE(current_date)) - (DATE_PART('year', T2.BirthDate) +                                                    CASE WHEN DATE_PART('month', T2.BirthDate) < DATE_PART('month', current_date) THEN 1 ELSE 0 END)     FROM Employees AS T2 ) AS T3 ON TRUE;
SELECT SupplierName FROM Suppliers WHERE Country = 'Germany';
SELECT      FirstName,     LastName,     2022 - YEAR(BirthDate) AS Age FROM      Employees WHERE      City = 'London';
SELECT      c.CustomerName,     c.Address,     c.Phone,     c.Fax FROM      Customers c WHERE      c.City = 'London';
SELECT e.FirstName, e.LastName  FROM Employees e  JOIN Titles t ON e.TitleID = t.TitleID  WHERE t.Title = 'Sales Manager';
SELECT Customers.CustomerName, Customers.City  FROM Customers  JOIN Orders ON Customers.CustomerID = Orders.CustomerID  JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  WHERE Shippers.Country = 'Canada';
SELECT SUM(UnitsInStock + UnitsOnOrder) AS TotalProductionAmount, ProductName FROM Products JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID WHERE OrderDetails.Quantity LIKE '%10 - 500 g pkgs%'
SELECT p.ProductName, c.CategoryName  FROM Products p  JOIN Categories c ON p.CategoryID = c.CategoryID  WHERE p.ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products);
SELECT      s.SupplierName,     c.City,     p.ProductName FROM      Suppliers s JOIN      Products p ON s.SupplierID = p.SupplierID WHERE      (p.UnitsInStock + p.UnitsOnOrder) > 120;
SELECT      c.ContactName,      c.ContactTitle,      p.ProductName FROM      Suppliers s JOIN      Categories ca ON s.SupplierID = ca.SupplierID JOIN      Products p ON s.SupplierID = p.SupplierID JOIN      Companies c ON s.SupplierID = c.SupplierID WHERE      ca.CategoryName = 'Dairy Products' AND      c.CompanyName = 'Escargots Nouveaux';
SELECT t1.TerritoryID, t2.Description, t3.RegionDescription  FROM Territories AS t1  JOIN EmployeeTerritories AS t4 ON t1.TerritoryID = t4.TerritoryID  JOIN Employees AS t5 ON t4.EmployeeID = t5.EmployeeID  JOIN Regions AS t3 ON t1.RegionID = t3.RegionID  WHERE t5.FirstName = 'Margaret' AND t5.LastName = 'Peacock'
SELECT ProductName FROM Products JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID WHERE Suppliers.Country = 'Spain';
SELECT P.ProductName  FROM Products P  JOIN OrderDetails OD ON P.ProductID = OD.ProductID  JOIN Orders O ON OD.OrderID = O.OrderID  WHERE O.CustomerID = 'WILMK' AND O.OrderDate = '1998-03-26 00:00:00';
SELECT ProductID, ProductName  FROM Products  JOIN Categories ON Products.CategoryID = Categories.CategoryID  WHERE Categories.CategoryName = 'Meat/Poultry';
SELECT COUNT(*)  FROM Orders  JOIN Customers ON Orders.CustomerID = Customers.CustomerID  WHERE Customers.Country = 'Ireland';
SELECT P.ProductName  FROM Products P  JOIN Orders O ON P.ProductID = O.OrderDetailID  JOIN Customers C ON O.CustomerID = C.CustomerID  WHERE C.Country = 'Norway' AND YEAR(O.OrderDate) = 1996;
SELECT DISTINCT s.SupplierName  FROM Orders o  JOIN Employees e ON o.EmployeeID = e.EmployeeID  JOIN Shippers sh ON o.ShipperID = sh.ShipperID  JOIN Orders o2 ON o.OrderID = o2.OrderID  JOIN OrderDetails od ON o2.OrderID = od.OrderID  JOIN Products p ON od.ProductID = p.ProductID  JOIN Suppliers s ON p.SupplierID = s.SupplierID  WHERE sh.Phone IS NOT NULL  AND e.FirstName = 'Anne'  AND e.LastName = 'Dodsworth'  AND DATE_FORMAT(o.OrderDate, '%Y-%m') = '1996-12'  AND sh.ShipCountry = 'Brazil';
SELECT      e.FirstName,      e.LastName,      e.Title,      e.Salary,      COUNT(*) AS Number_of_Orders FROM      Employees e JOIN      Orders o ON e.EmployeeID = o.EmployeeID JOIN      Shippers s ON o.ShipperID = s.ShipperID WHERE      e.BirthDate = (SELECT MIN(BirthDate) FROM Employees)     AND s.ShipCountry = 'USA' GROUP BY      e.EmployeeID, e.FirstName, e.LastName, e.Title, e.Salary;
SELECT TerritoryID, TerritoryDescription  FROM Territories  WHERE RegionID IN (     SELECT RegionID      FROM Regions      WHERE RegionDescription = 'Southern' );
SELECT AVG(od.Quantity * p.UnitPrice) AS AveragePaymentPerProduct FROM Categories c JOIN Products p ON c.CategoryID = p.CategoryID JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE c.CategoryName = 'Confections';
SELECT SUM(T2.Unit * T3.Quantity * (1 - T3.Discount)) AS TotalPayment FROM Customers AS T1 JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID JOIN OrderDetails AS T3 ON T2.OrderID = T3.OrderID WHERE T1.City = 'San Francisco';
SELECT      p.ProductID,      p.ProductName,      (pi.UnitsInStock + po.UnitsOnOrder) AS TotalProduction FROM      Products p JOIN      Suppliers s ON p.SupplierID = s.SupplierID JOIN      Categories c ON p.CategoryID = c.CategoryID JOIN      Suppliers si ON s.Country = 'Japan' AND si.Country = 'Japan' JOIN      Categories ci ON si.CategoryID = ci.CategoryID WHERE      ci.Description LIKE '%Japan%'
SELECT p.ProductName, c.CategoryName  FROM Products p  JOIN Suppliers s ON p.SupplierID = s.SupplierID  JOIN Categories c ON p.CategoryID = c.CategoryID  WHERE s.Country = 'Australia' AND p.Discontinued = 1;
SELECT      s.Country,     o.OrderID FROM      Suppliers s JOIN      Products p ON s.SupplierID = p.SupplierID JOIN      OrderDetails od ON p.ProductID = od.ProductID JOIN      Orders o ON od.OrderID = o.OrderID WHERE      p.ProductName = 'Ipoh Coffee' GROUP BY      o.OrderID ORDER BY      SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 1;
SELECT      o.OrderID,     od.ProductID,     SUM(od.Quantity * u.UnitPrice * (1 - u.Discount)) as TotalPayment FROM      Orders o JOIN      OrderDetails od ON o.OrderID = od.OrderID JOIN      Products p ON od.ProductID = p.ProductID JOIN      Units u ON p.Unit = u.Unit WHERE      o.OrderID = '10979' GROUP BY      o.OrderID, od.ProductID;
SELECT      s.ContactName,      s.ContactTitle  FROM      Categories c  JOIN      Products p ON c.CategoryID = p.CategoryID  JOIN      Suppliers s ON p.SupplierID = s.SupplierID  WHERE      c.CategoryName = 'Grains/Cereals' AND      s.SupplierID BETWEEN 1 AND 10;
SELECT      s.Phone,     COUNT(o.OrderID) AS NumberOfShippedOrders FROM      Shippers s     JOIN Orders o ON s.ShipperID = o.ShipperID WHERE      s.CompanyName = 'Speedy Express'     AND o.ShippedDate = '1998-01-30 00:00:00';
SELECT      od.ProductID,      p.ProductName,      MIN(DATEDIFF(od.ShippedDate, od.RequiredDate)) AS OverdueDays FROM      OrderDetails od JOIN      Orders o ON od.OrderID = o.OrderID JOIN      Products p ON od.ProductID = p.ProductID WHERE      od.ShippedDate < od.RequiredDate GROUP BY      od.ProductID,      p.ProductName ORDER BY      OverdueDays ASC LIMIT 1;
SELECT p.ProductName  FROM Products p  JOIN Orders o ON p.ProductID = o.OrderDetailID  JOIN Employees e ON o.EmployeeID = e.EmployeeID  JOIN Shippers s ON o.ShipperID = s.ShipperID  WHERE e.Title = 'Inside Sales Coordinator' AND s.ShipCountry = 'Mexico' AND YEAR(o.ShippedDate) = 1996;
SELECT p.ProductName  FROM Products p  JOIN Categories c ON p.CategoryID = c.CategoryID  WHERE c.CategoryName = 'dairy product'  ORDER BY p.ReorderLevel DESC  LIMIT 1;
SELECT SUM(p.UnitsInStock + p.UnitsOnOrder) AS ProductionVolume FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Dairy' AND p.ProductName = 'Mascarpone Fabioli';
SELECT ProductName, CategoryName  FROM Products  JOIN Categories ON Products.CategoryID = Categories.CategoryID  WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM Products) OR UnitPrice = (SELECT MIN(UnitPrice) FROM Products);
SELECT      c.CustomerName  FROM      Customers c JOIN      Orders o ON c.CustomerID = o.CustomerID JOIN      OrderDetails od ON o.OrderID = od.OrderID JOIN      Products p ON od.ProductID = p.ProductID WHERE      (UnitPrice * Quantity * (1 - Discount)) =      (SELECT MAX(UnitPrice * Quantity * (1 - Discount)) FROM OrderDetails)
SELECT COUNT(*)  FROM Employees  JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID  WHERE Orders.ShipperID IN (     SELECT ShipperID      FROM Shippers      WHERE RegionDescription = 'Northern' );
SELECT      (SUM(UnitPrice * Quantity * (1 - Discount))::numeric / COUNT(OrderID)) AS AverageSalesValue FROM      Orders o JOIN      OrderDetails od ON o.OrderID = od.OrderID;
SELECT      (SUM(CASE WHEN Products.Discontinued = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(Products.ProductID)) AS PercentageOfDiscontinuedProducts FROM      Products WHERE      Products.Discontinued = 1;
SELECT FirstName, LastName  FROM Employees  WHERE EmployeeID = (SELECT EmployeeID FROM Orders WHERE OrderID = 10274);
SELECT COUNT(*)  FROM Orders  JOIN Customers ON Orders.CustomerID = Customers.CustomerID  WHERE Customers.CompanyName = 'GROSELLA-Restaurante'
SELECT p.ProductName, od.Quantity  FROM Products p  JOIN OrderDetails od ON p.ProductID = od.ProductID  JOIN Orders o ON o.OrderID = od.OrderID  JOIN Employees e ON e.EmployeeID = o.EmployeeID  JOIN Customers c ON c.CustomerID = o.CustomerID  WHERE c.CompanyName = 'GROSELLA-Restaurante' AND e.FirstName = 'Nancy' AND e.LastName = 'Davolio';
SELECT      COUNT(OD.OrderID) AS TotalOrders,     AVG(UnitPrice * Quantity * (1 - Discount)) AS AverageOrderValue FROM      Orders O JOIN      OrderDetails OD ON O.OrderID = OD.OrderID JOIN      Customers C ON O.CustomerID = C.CustomerID WHERE      C.CompanyName = 'Laughing Bacchus Wine Cellars';
SELECT SUM(od.Quantity) FROM OrderDetails od JOIN Orders o ON od.OrderID = o.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Pavlova';
SELECT MIN(salary), MAX(salary) FROM Employees WHERE Title = 'Sales Representative' AND Region = 'Northwind';
SELECT COUNT(*)  FROM Suppliers  WHERE Country = 'USA';
SELECT ProductName FROM Products WHERE Discontinued = 1;
SELECT e.FirstName, e.LastName  FROM Employees e  JOIN Orders o ON e.EmployeeID = o.EmployeeID  JOIN Shippers s ON o.ShipperID = s.ShipperID  WHERE s.CompanyName = 'Eastern Connection' AND e.ContactTitle = 'Sales Agent';
SELECT COUNT(*)  FROM Shippers  WHERE ShipperID = (SELECT ShipperID FROM Orders WHERE CustomerID = 'Northwind');
SELECT      (COUNT(o.OrderID) FILTER (WHERE ShipCountry = 'Austria') * 100.0 / COUNT(o.OrderID)) AS PercentageOfOrdersToAustria FROM      Orders o JOIN      Employees e ON o.EmployeeID = e.EmployeeID WHERE      e.FirstName = 'Andrew' AND e.LastName = 'Fuller';
SELECT CategoryName FROM Categories WHERE Description IN ('Soft drinks', 'coffees', 'teas', 'beers', 'ales');
SELECT T2.Phone  FROM Suppliers AS T1  JOIN Shippers AS T2  ON T1.SupplierID = T2.ShipperID  WHERE T1.CompanyName = 'Around the Horn';
SELECT Customers.Phone FROM Customers JOIN Orders ON Customers.CustomerID = Orders.CustomerID JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Customers.CompanyName = 'Blondesddsl pre et fils' AND Shippers.City = 'Strasbourg';
SELECT COUNT(*)  FROM Customers  WHERE City = 'London';
SELECT Address  FROM Customers  WHERE ContactName = 'Ann Devon' AND CompanyName = 'Eastern Connection';
SELECT Customers.CustomerName  FROM Customers  JOIN Addresses ON Customers.AddressID = Addresses.AddressID  WHERE Addresses.Country = 'France';
SELECT COUNT(*)  FROM Products  JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID  WHERE Suppliers.CompanyName = 'Exotic Liquids';
SELECT      s.CompanyName  FROM      Suppliers s  JOIN      Products p ON s.SupplierID = p.SupplierID  WHERE      p.UnitPrice = (SELECT MAX(UnitPrice) FROM Products);
SELECT Customers.CustomerName  FROM Customers  JOIN Orders ON Customers.CustomerID = Orders.CustomerID  JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID  WHERE Customers.City = 'London'  GROUP BY Customers.CustomerName  ORDER BY SUM(OrderDetails.UnitsInStock) DESC  LIMIT 1;
SELECT p.ProductName  FROM Products p  JOIN Suppliers s ON p.SupplierID = s.SupplierID  WHERE s.SupplierName = 'Exotic Liquids'  ORDER BY p.ReorderLevel DESC  LIMIT 1;
SELECT Categories.CategoryName  FROM Products  JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID  JOIN Categories ON Products.CategoryID = Categories.CategoryID  WHERE Products.ProductName = 'Chef Anton\'s Gumbo Mix' AND Suppliers.SupplierName = 'New Orleans Cajun Delights';
SELECT T3.Country  FROM Suppliers AS T1  JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID  JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID  WHERE T1.SupplierName = 'Leka Trading' AND T2.ProductName = 'Ipoh Coffee';
SELECT c.CategoryName  FROM Categories c  JOIN Products p ON c.CategoryID = p.CategoryID  WHERE p.Unit IN (SELECT MAX(Unit) FROM Products)
SELECT      (SELECT UnitPrice FROM Products WHERE ProductName = 'Chef Anton\'s Cajun Seasoning') -      (SELECT UnitPrice FROM Products WHERE ProductName = 'Chef Anton\'s Gumbo Mix') AS PriceDifference FROM      Suppliers WHERE      SupplierName = 'New Orleans Cajun Delights';
SELECT p.ProductName  FROM Products p  JOIN Suppliers s ON p.SupplierID = s.SupplierID  WHERE s.CompanyName = 'Cooperativa de Quesos \'Las Cabras\'' AND p.Unit > 20;
SELECT p.ProductName  FROM Products p  JOIN Suppliers s ON p.SupplierID = s.SupplierID  WHERE s.SupplierName = 'Tokyo Traders'  AND EXISTS (     SELECT *      FROM Orders o      JOIN OrderDetails od ON o.OrderID = od.OrderID      WHERE o.ShipperID = od.ShipperID          AND od.ProductID = p.ProductID          AND od.Quantity > 40 );
SELECT Categories.CategoryName  FROM Categories  JOIN Products ON Categories.CategoryID = Products.CategoryID  WHERE Products.SupplierID IN      (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Exotic Liquids')  AND Products.UnitsInStock > 100;
SELECT      COUNT(*) AS 'NumberOfProducts',     (SUM(CASE WHEN od.Quantity < 50 THEN 1 ELSE 0 END) / NULLIF(SUM(od.Quantity), 0)) * 100 AS 'PercentageOfOrdersLessThan50' FROM      Orders o JOIN      OrderDetails od ON o.OrderID = od.OrderID;
SELECT      SUM(OD.Quantity) AS TotalOrderQuantity,     (SUM(OD.Quantity) / (SELECT SUM(OD2.Quantity) FROM OrderDetails OD2)) * 100 AS PercentageOfGeitost FROM      OrderDetails OD JOIN      Products P ON OD.ProductID = P.ProductID WHERE      P.ProductName = 'Geitost';
SELECT Title  FROM Employees  WHERE FirstName = 'Robert' AND LastName = 'King';
SELECT ShipperName, Phone  FROM Shippers  WHERE Phone = '(503) 555-9931';
SELECT Address, HomePhone  FROM Employees  WHERE FirstName = 'Margaret' AND LastName = 'Peacock';
SELECT      s.ShipAddress,      s.ShipCity,      s.ShipRegion,      s.ShipPostalCode,      s.ShipCountry FROM      Shippers s WHERE      s.ShipName = 'Rattlesnake Canyon Grocery';
SELECT ProductName  FROM Products  WHERE CategoryID IN (     SELECT CategoryID      FROM Categories      WHERE CategoryName = 'Confections' );
SELECT      s.SupplierName AS 'Company',     s.ContactName AS 'Contact' FROM      Products p JOIN      Categories c ON p.CategoryID = c.CategoryID JOIN      Suppliers s ON p.SupplierID = s.SupplierID WHERE      p.ProductName = 'Sir Rodney\'s Marmalade';
SELECT FirstName, LastName  FROM Employees  JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID  JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  WHERE Shippers.City = 'Denver';
SELECT t.TerritoryDescription  FROM employees e  JOIN territories t ON e.EmployeeID = t.ManagerEmployeeID  WHERE e.FirstName = 'Laura' AND e.LastName = 'Callahan';
SELECT COUNT(*)  FROM Orders  JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  WHERE Shippers.ShipperName = 'Federal Shipping'
SELECT p.ProductName  FROM Products p  JOIN Suppliers s ON p.SupplierID = s.SupplierID  WHERE s.Country = 'Finland';
SELECT Categories.CategoryName, Categories.Description  FROM Products  JOIN Categories ON Products.CategoryID = Categories.CategoryID  WHERE Products.ProductName = 'Mozzarella di Giovanni';
SELECT DISTINCT s.SupplierName  FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.Description = 'cheeses';
SELECT ProductName FROM Products WHERE SupplierID IN (     SELECT SupplierID     FROM Suppliers     WHERE CompanyName = 'Zaanse Snoepfabriek' );
SELECT p.ProductName, p.UnitPrice FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.CompanyName = 'Plutzer Lebensmittelgroßmärkte AG' AND p.discontinued = 1;
SELECT DISTINCT o.ShipCity FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Mishi Kobe Niku';
SELECT      (SUM(CASE WHEN s.ShipperName = 'Speedy Express' AND o.ShipCountry = 'Sweden' THEN 1 ELSE 0 END)       OVER () * 100.0 / COUNT(*) OVER ()) AS shipping_percentage FROM      Shippers s JOIN      Orders o ON s.ShipperID = o.ShipperID JOIN      Customers c ON o.CustomerID = c.CustomerID WHERE      c.Country = 'Sweden';
SELECT COUNT(*)  FROM Territories  WHERE RegionID = 1;
SELECT      Region,     COUNT(*) AS TotalTerritories FROM      Territories GROUP BY      Region;
SELECT COUNT(*)  FROM Suppliers  WHERE Country = 'UK';
SELECT ContactName FROM Suppliers WHERE CompanyName = 'Tokyo Traders';
SELECT COUNT(*)  FROM Employees  WHERE Country = 'USA' AND Title = 'Sales Representative';
SELECT MAX(E.Salary), E.Title  FROM Employees E;
SELECT COUNT(*)  FROM Products  JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID  WHERE Suppliers.CompanyName = 'Plutzer Lebensmittelgroßmarken AG'  AND Products.UnitsInStock = 0 AND Products.UnitsOnOrder > 0;
SELECT p.ProductID, SUM(od.Quantity)  FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY p.UnitPrice DESC LIMIT 1;
SELECT T1.Title  FROM Employees AS T1  JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID  GROUP BY T1.Title  ORDER BY MIN(T2.OrderID)  LIMIT 1;
SELECT      o.ProductID FROM      Orders o JOIN      Customers c ON o.CustomerID = c.CustomerID JOIN      Shippers s ON o.ShipperID = s.ShipperID JOIN      Suppliers sup ON o.ProductID = sup.ProductID WHERE      c.Country = 'Germany' GROUP BY      o.ProductID ORDER BY      COUNT(o.ProductID) DESC LIMIT 1;
SELECT SUM(UnitPrice * Quantity) AS TotalProductsValue FROM Orders o JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.CompanyName = 'Speedy Express' AND o.ShipCountry = 'Brazil';
SELECT COUNT(*) AS SubordinateCount,        MAX(OD.Quantity * P.UnitPrice) AS BiggestOrderValue FROM Employees E INNER JOIN Orders O ON E.EmployeeID = O.EmployeeID INNER JOIN OrderDetails OD ON O.OrderID = OD.OrderID INNER JOIN Products P ON OD.ProductID = P.ProductID WHERE E.ReportsTo = 2;
SELECT      o.EmployeeID,     e.FirstName || ' ' || e.LastName AS SalesRepresentative,     SUM(od.Quantity * p.UnitPrice) AS TotalSalesValue FROM      Orders o JOIN      OrderDetails od ON o.OrderID = od.OrderID JOIN      Products p ON od.ProductID = p.ProductID JOIN      Employees e ON o.EmployeeID = e.EmployeeID WHERE      e.Title = 'Sales Representative' GROUP BY      o.EmployeeID, e.FirstName, e.LastName ORDER BY      TotalSalesValue DESC LIMIT 1;
SELECT COUNT(*)  FROM Employees  WHERE Country = 'UK' AND EXISTS (   SELECT 1    FROM Employees AS e2    WHERE e2.Country = 'UK' AND e2.Region = Employees.Region )
SELECT      c.CustomerName,     s.ShipperName,     o.ShipCountry FROM      Customers c JOIN      Orders o ON c.CustomerID = o.CustomerID JOIN      OrderDetails od ON o.OrderID = od.OrderID JOIN      Products p ON od.ProductID = p.ProductID JOIN      Shippers s ON o.ShipperID = s.ShipperID WHERE      od.Quantity * p.UnitPrice = (SELECT MAX(od2.Quantity * p2.UnitPrice) FROM OrderDetails od2 JOIN Products p2 ON od2.ProductID = p2.ProductID)
SELECT      c.CustomerName,     ct.CategoryName FROM     Customers c JOIN     Orders o ON c.CustomerID = o.CustomerID JOIN     OrderDetails od ON o.OrderID = od.OrderID JOIN     Products p ON od.ProductID = p.ProductID JOIN     Categories ct ON p.CategoryID = ct.CategoryID WHERE     c.CustomerID = (SELECT CustomerID FROM Customers GROUP BY CustomerID ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY     c.CustomerID, ct.CategoryID ORDER BY     COUNT(ct.CategoryID) DESC LIMIT 1;
SELECT      p.ProductID,      SUM(od.Quantity * p.UnitPrice) AS TotalSales  FROM      Products p      JOIN OrderDetails od ON p.ProductID = od.ProductID      JOIN Categories c ON p.CategoryID = c.CategoryID  WHERE      c.CategoryName = 'Confections'  GROUP BY      p.ProductID  ORDER BY      TotalSales DESC  LIMIT 1;
SELECT ProductName FROM Products WHERE ProductID = 77;
SELECT SupplierName FROM Suppliers WHERE Country = 'USA';
SELECT `PositionTitle` FROM `Employees` WHERE `FirstName` = 'Laura' AND `LastName` = 'Callahan';
SELECT e.FirstName FROM Employees e JOIN Orders o ON e.EmployeeID = o.EmployeeID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID JOIN Suppliers s ON p.SupplierID = s.SupplierID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE s.SupplierName = 'Victuailles en stock';
SELECT COUNT(*)  FROM Orders  JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  WHERE Shippers.ShipperName = 'Federal Shipping'
SELECT E.FirstName, E.LastName  FROM Employees E  JOIN Orders O ON E.EmployeeID = O.EmployeeID  JOIN Shippers S ON O.ShipperID = S.ShipperID  WHERE S.TerritoryDescription = 'Morristown';
SELECT t1.TerritoryDescription  FROM Territories AS t1 JOIN TerritoryRegion AS t2 ON t1.TerritoryID = t2.TerritoryID JOIN Region AS t3 ON t2.RegionID = t3.RegionID WHERE t3.RegionDescription = 'Northern'
SELECT Orders.OrderID  FROM Orders  JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID  WHERE Employees.FirstName = 'Michael' AND Employees.LastName = 'Suyama';
SELECT      COUNT(*) / (SELECT COUNT(*) FROM Territories WHERE RegionID = 2) AS Ratio FROM      Territories WHERE      RegionID = 3;
SELECT EmployeeID  FROM Orders  WHERE ShipperID IN (SELECT ShipperID FROM Shippers WHERE TerritoryID BETWEEN 1000 AND 2000);
SELECT t1.TerritoryID, t1.TerritoryDescription, t2.RegionDescription  FROM Territories t1  JOINRegions t2 ON t1.RegionID = t2.RegionID  WHERE t1.LeadEmployeeID = (SELECT EmployeeID FROM Employees WHERE FirstName = 'Nancy' AND LastName = 'Davolio')
SELECT      e.FirstName,      e.LastName,      COUNT(o.OrderID) as NumberOfOrders FROM      Employees e JOIN      Orders o ON e.EmployeeID = o.EmployeeID WHERE      e.Title = 'Sales Representative' AND YEAR(e.HireDate) = 1992 GROUP BY      e.EmployeeID, e.FirstName, e.LastName;
SELECT SUM(T1.UnitPrice * T2.Quantity * (1 - T1.Discount)) AS TotalPayment FROM Products AS T1 JOIN OrderDetails AS T2 ON T1.ProductID = T2.ProductID JOIN Orders AS T3 ON T2.OrderID = T3.OrderID JOIN Categories AS T4 ON T1.CategoryID = T4.CategoryID WHERE T1.ProductName = 'Vegie-spread' AND T4.CategoryName = 'Vegetarian Foods';
SELECT DISTINCT s.SupplierName  FROM Suppliers s  JOIN Products p ON s.SupplierID = p.SupplierID  JOIN OrderDetails od ON p.ProductID = od.ProductID  JOIN Orders o ON od.OrderID = o.OrderID  WHERE o.OrderDate = '1996-08-14';
SELECT p.ProductName, s.SupplierName  FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE p.OrderID = 10337 AND p.ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products WHERE OrderID = 10337);
SELECT T1.CompanyName FROM Shippers AS T1 JOIN Orders AS T2 ON T1.ShipperID = T2.ShipperID WHERE T2.ShippedDate BETWEEN '1998-01-01' AND '1998-03-31' GROUP BY T1.ShipperID, T1.CompanyName ORDER BY COUNT(T2.OrderID) DESC LIMIT 1;
SELECT COUNT(*)  FROM Customers  WHERE City = 'London';
SELECT Title  FROM Employees  WHERE FirstName = 'Michael' AND LastName = 'Suyama';
SELECT FirstName, LastName  FROM Employees  WHERE BirthDate = '1955-03-04 00:00:00'
SELECT FirstName  FROM Employees  JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID  WHERE Orders.OrderID = 10250;
SELECT COUNT(*)  FROM Orders  WHERE Orders.ShipperID IN (     SELECT Shippers.ShipperID      FROM Shippers      JOIN Employees ON Shippers.ShipperID = Employees.EmployeeID      WHERE Employees.City = 'Tacoma' )
SELECT T3.Country  FROM Orders AS T1  JOIN Employees AS T3 ON T1.EmployeeID = T3.EmployeeID  WHERE T1.OrderID = 10257;
SELECT e.FirstName, e.LastName  FROM Employees e  JOIN Orders o ON e.EmployeeID = o.EmployeeID  WHERE o.OrderID = 10270;
SELECT Customers.Phone FROM Orders JOIN Customers ON Orders.CustomerID = Customers.CustomerID WHERE Orders.OrderID = 10264;
SELECT T3.Region  FROM Orders AS T1  INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID  INNER JOIN Shippers AS T3 ON T1.ShipperID = T3.ShipperID  WHERE T1.OrderID = 10276;
SELECT      Employees.FirstName,      Employees.LastName,      MAX(Employees.Salary) AS HighestSalary,     AVG(Employees.Salary) AS AverageSalary FROM      Orders  JOIN      OrderDetails ON Orders.OrderID = OrderDetails.OrderID JOIN      Products ON OrderDetails.ProductID = Products.ProductID JOIN      Shippers ON Orders.ShipperID = Shippers.ShipperID JOIN      Customers ON Orders.CustomerID = Customers.CustomerID JOIN      Employees ON Orders.EmployeeID = Employees.EmployeeID WHERE      Shippers.Country = 'Brazil' GROUP BY      Employees.EmployeeID;
SELECT      (SUM(CASE WHEN Orders.ShippedDate = 1996 THEN Employees.Salary ELSE 0 END) / SUM(Employees.Salary)) * 100 AS PercentageSalary FROM      Employees JOIN      Orders ON Orders.EmployeeID = Employees.EmployeeID
SELECT Employees.HireDate  FROM Orders  JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID  WHERE Orders.OrderID = 10281;
SELECT COUNT(*)  FROM Orders  WHERE EmployeeID = 5;
SELECT FirstName, LastName  FROM Employees  WHERE EmployeeID = (SELECT EmployeeID FROM Orders WHERE OrderID = 10280);
SELECT T2.CompanyName FROM Orders AS T1 JOIN Shippers AS T2 ON T1.ShipperID = T2.ShipperID WHERE T1.OrderID = 10260;
SELECT COUNT(*)  FROM Orders  JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID  JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  WHERE Shippers.CompanyName = 'United Package';
SELECT Shippers.Phone  FROM Orders  JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID  JOIN Products ON OrderDetails.ProductID = Products.ProductID  JOIN Categories ON Products.CategoryID = Categories.CategoryID  WHERE Orders.OrderID = 10296;
SELECT COUNT(DISTINCT l_linenumber)  FROM lineitem  WHERE l_orderkey = 5 AND l_returnflag = 'R';
SELECT MAX(l_shipdate)  FROM lineitem  WHERE l_orderkey = 1;
SELECT      o_orderdate  FROM      orders  WHERE      o_orderkey IN (4, 36)  ORDER BY      o_orderdate ASC  LIMIT 1;
SELECT o_comment  FROM orders  WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders);
SELECT c_phone  FROM customer  WHERE c_name = 'Customer#000000001';
SELECT COUNT(*)  FROM orders  WHERE o_custkey IN (     SELECT c_custkey      FROM customer      WHERE c_mktsegment = 'HOUSEHOLD' );
SELECT MAX(o_totalprice)  FROM orders  WHERE c_mktsegment = 'HOUSEHOLD';
SELECT o_comment FROM orders WHERE c_mktsegment = 'HOUSEHOLD';
SELECT c_name  FROM customer  JOIN orders ON customer.c_custkey = orders.o_custkey  WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders);
SELECT o_orderkey  FROM customer  WHERE c_acctbal < 0;
SELECT COUNT(*)  FROM orders  WHERE c_mktsegment = 'HOUSEHOLD' AND o_orderpriority = '1-URGENT';
SELECT COUNT(*)  FROM customer  JOIN nation ON customer.c_nationkey = nation.n_nationkey  WHERE nation.n_name = 'BRAZIL'
SELECT c_phone FROM customer WHERE c_mktsegment = 'HOUSEHOLD' AND c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'BRAZIL');
SELECT COUNT(*)  FROM retailers.customer  JOIN retailers.nation ON retailers.customer.c_nationkey = retailers.nation.n_nationkey  WHERE retailers.customer.c_acctbal > 1000 AND retailers.nation.n_name = 'GERMANY';
SELECT COUNT(*)  FROM orders  JOIN customer ON orders.o_custkey = customer.c_custkey  JOIN nation ON customer.c_nationkey = nation.n_nationkey  WHERE nation.n_name = 'GERMANY';
SELECT SUM(o_totalprice)  FROM orders  JOIN customer ON orders.o_custkey = customer.c_custkey  JOIN nation ON customer.c_nationkey = nation.n_nationkey  WHERE nation.n_name = 'GERMANY';
SELECT o_orderkey  FROM orders  JOIN customer ON orders.o_custkey = customer.c_custkey  JOIN nation ON customer.c_nationkey = nation.n_nationkey  WHERE nation.n_name = 'GERMANY' AND o_orderpriority = (SELECT MIN(o_orderpriority) FROM orders);
SELECT AVG(o_totalprice)  FROM orders o  JOIN customer c ON o.o_custkey = c.c_custkey  JOIN nation n ON c.c_nationkey = n.n_nationkey  WHERE n.n_name = 'GERMANY';
SELECT      (COUNT(CASE WHEN c.n_name = 'GERMANY' THEN c.c_custkey END) * 100.0 / COUNT(c.c_custkey)) AS percentage FROM      customer c;
SELECT COUNT(DISTINCT n.nationkey)  FROM nation n  JOIN region r ON n.regionkey = r.regionkey  WHERE r.regionkey = 2;
SELECT n_name  FROM supplier  JOIN nation n ON supplier.s_nationkey = n.n_nationkey  WHERE s_suppkey = 34;
SELECT r_name  FROM region  JOIN supplier ON region.r_regionkey = supplier.s_regionkey  WHERE s_name = 'Supplier#000000129';
SELECT n_name  FROM customer  JOIN nation AS n  ON customer.c_nationkey = n.n_nationkey  WHERE c_name = 'Customer#000000055';
SELECT T3.r_name  FROM customer AS T1  JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey  JOIN region AS T3 ON T2.n_regionkey = T3.r_regionkey  WHERE T1.c_custkey = 106936;
SELECT COUNT(*)  FROM customer  JOIN nation ON customer.c_nationkey = nation.n_nationkey  WHERE c_acctbal < 0 AND n_name = 'MOROCCO';
SELECT      l_extendedprice * (1 - l_discount) AS discounted_price FROM      lineitem WHERE      o_totalprice = 231499.38 AND      l_suppkey = 9397;
SELECT l_suppkey  FROM lineitem  WHERE l_returnflag = 'R' AND l_totalprice = 218195.43;
SELECT (l_extendedprice * (1 - l_discount)) * (1 + l_tax)  FROM orders  JOIN lineitem ON o_orderkey = l_orderkey  WHERE o_clerk = 'Clerk#000000936'  AND o_orderstatus = '4-NOT SPECIFIED'  AND o_orderdate = '1995-03-13'  AND l_shipmode = 'TRUCK';
SELECT      o_orderdate,      SUBTRACT(l_receiptdate, l_commitdate) AS delivery_time FROM      orders o JOIN      lineitem l ON o_orderkey = l_orderkey WHERE      o_orderdate = '1996-07-27' AND      o_custkey = '129301' LIMIT 1;
SELECT c_name  FROM customer  JOIN orders ON customer.c_custkey = orders.o_custkey  WHERE o_clerk = 'Clerk#000000803'  AND o_orderdate = '1997-12-10';
SELECT      SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))) AS profit FROM      partsupp ps JOIN      lineitem l ON ps.ps_partkey = l.l_partkey JOIN      orders o ON l.l_orderkey = o.o_orderkey JOIN      supplier s ON l.l_suppkey = s.s_suppkey WHERE      s.s_suppkey = 7414 AND l.l_orderkey = 817154;
SELECT n_name AS country FROM supplier JOIN nation n ON s_nationkey = n_nationkey WHERE s_acctbal < 0 GROUP BY n_name ORDER BY COUNT(s_suppkey) DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN n_comment LIKE '%EUROPE%' THEN n_name ELSE NULL END) / COUNT(n_name)) * 100 AS percentage FROM      nation n JOIN      region r ON n.n_regionkey = r.r_regionkey;
SELECT      (COUNT(CASE WHEN s_acctbal < 0 THEN 1 END)       OVER() / COUNT(*)       OVER () * 100) AS 'percentage' FROM      supplier s JOIN      nation n ON s.s_nationkey = n.n_nationkey WHERE      n.n_name = 'JAPAN';
SELECT c_name  FROM customer  WHERE c_acctbal = (SELECT MIN(c_acctbal) FROM customer);
SELECT COUNT(*)  FROM orders  JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey  WHERE EXTRACT(YEAR FROM l_shipdate) = 1998;
SELECT COUNT(*)  FROM customer  WHERE c_acctbal < 0;
SELECT COUNT(*)  FROM lineitem  WHERE l_returnflag = 'R'  AND l_shipmode = 'AIR'  AND EXTRACT(YEAR FROM l_shipdate) = 1994;
SELECT COUNT(*)  FROM customer  WHERE c_mktsegment = 'AUTOMOBILE';
SELECT l_orderkey  FROM lineitem  WHERE l_extendedprice = (SELECT MAX(l_extendedprice) FROM lineitem); LIMIT 2;
SELECT o_orderdate  FROM orders  JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey  WHERE l_shipdate IS NOT NULL  ORDER BY o_totalprice DESC  LIMIT 1;
SELECT n_name  FROM customer  JOIN nation AS n ON c_nationkey = n_nationkey  GROUP BY n_name  ORDER BY COUNT(c_custkey) DESC  LIMIT 1;
SELECT COUNT(*)  FROM orders  JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey  WHERE orders.o_orderpriority = '1-URGENT'  AND SUBTRACT(lineitem.l_shipdate, orders.o_orderdate) = 1;
SELECT COUNT(*)  FROM customer  WHERE c_acctbal < 0 AND c_mktsegment = 'HOUSEHOLD' AND n_name = 'RUSSIA';
SELECT COUNT(*)  FROM supplier  JOIN nation ON supplier.s_nationkey = nation.n_nationkey  WHERE nation.n_name = 'JAPAN';
SELECT COUNT(*)  FROM orders  WHERE o_orderpriority = '3-MEDIUM' AND l_shipmode = 'SHIP';
SELECT c_mktsegment FROM customer JOIN nation n ON c_nationkey = n_nationkey WHERE n_name = 'UNITED STATES' GROUP BY c_mktsegment ORDER BY COUNT(c_custkey) DESC LIMIT 1;
SELECT n_name FROM nation n JOIN region r ON n.n_regionkey = r.r_regionkey WHERE r_name = 'ASIA';
SELECT p_name  FROM part  JOIN partsupp ON p_partkey = ps_partkey  WHERE p_mfgr = 'Manufacturer#3' AND ps_supplycost = 1000;
SELECT COUNT(DISTINCT n_nationkey)  FROM nation WHERE n_regionkey IN (     SELECT r_regionkey      FROM region      WHERE r_comment = 'asymptotes sublate after the r.' );
SELECT COUNT(*)  FROM part  JOIN lineitem ON part.p_partkey = lineitem.l_partkey  JOIN supplier ON part.p_suppkey = supplier.s_suppkey  WHERE p_mfgr = 'Manufacturer#5' AND p_retailprice < 1000 AND lineitem.l_shipmode = 'RAIL';
SELECT      SUM(SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity)))) AS profit FROM      customer c JOIN      orders o ON c.c_custkey = o.o_custkey JOIN      lineitem l ON o.o_orderkey = l.l_orderkey JOIN      part p ON p.p_partkey = l.l_partkey JOIN      partsupp ps ON ps.ps_partkey = l.l_partkey AND ps.ps_suppkey = l.l_suppkey WHERE      p.p_name = 'smoke turquoise purple blue salmon' AND      l.l_receiptdate = '1996-05-07' AND      l.l_shipinstruct = 'DELIVER IN PERSON';
SELECT      AVG(l_extendedprice) * (1 - l_discount) AS avg_price_before_discount  FROM      lineitem  WHERE      l_orderkey IN (         SELECT              l_orderkey          FROM              orders          ORDER BY              o_totalprice DESC          LIMIT 10     );
SELECT      c.c_name,     AVG(o.o_totalprice) AS avg_total_price_per_order FROM      customer c JOIN      orders o ON c.c_custkey = o.o_custkey GROUP BY      c.c_custkey ORDER BY      COUNT(o.o_orderkey) DESC LIMIT 3;
SELECT COUNT(*)  FROM lineitem  WHERE l_shipdate = '1993-12-04';
SELECT o_orderdate  FROM orders  WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders);
SELECT      (COUNT(CASE WHEN c_acctbal < 0 THEN 1 END)       / CAST(COUNT(c_custkey) AS REAL)) * 100 AS percentage FROM      customer;
SELECT COUNT(*)  FROM partsupp  WHERE ps_availqty < 10;
SELECT      (COUNT(CASE WHEN p_mfgr = 'Manufacturer#3' THEN p_partkey END) * 100.0 / COUNT(p_partkey)) as percentage FROM      part;
SELECT p_name FROM part WHERE p_type = 'MEDIUM PLATED BRASS' LIMIT 5;
SELECT COUNT(*)  FROM orders  JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey  WHERE orders.o_orderdate >= '1998-11-01'  AND orders.o_orderdate < '1998-12-01'  AND lineitem.l_shipmode = 'AIR'  AND orders.o_orderpriority = '1-URGENT';
SELECT COUNT(*)  FROM customer  WHERE c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'INDIA');
SELECT COUNT(*)  FROM customer  WHERE c_acctbal < 0 AND c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'MOROCCO');
SELECT n_nationkey, n_name  FROM nation  JOIN region ON n_regionkey = r_regionkey  WHERE r_name = 'Africa';
SELECT SUM(o_totalprice)  FROM orders  WHERE o_custkey = (SELECT c_custkey FROM customer WHERE c_name = 'Customer#000000013');
SELECT      SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS total_charges  FROM      lineitem  WHERE      c_name = 'Customer#000021159';
SELECT SUM(     (SELECT          (l_extendedprice * (1 - l_discount)) * ps_supplycost * l_quantity     FROM          part      WHERE          part.p_name = 'chocolate floral blue coral cyan' ) AS total_profit FROM      lineitem, partsupp WHERE      lineitem.l_partkey = partsupp.ps_partkey
SELECT      (COUNT(CASE WHEN s.nationkey = (SELECT n.nationkey FROM nation n WHERE n.n_name = 'GERMANY')) THEN s_suppkey ELSE 0 END) * 100.0 / COUNT(s_suppkey) AS percentage FROM      supplier s ;
SELECT s_name FROM supplier JOIN partsupp ON s_suppkey = ps_suppkey JOIN part ON ps_partkey = p_partkey WHERE p_name = 'smoke red pale saddle plum';
SELECT COUNT(*)  FROM supplier  JOIN nation ON supplier.s_nationkey = nation.n_nationkey  WHERE nation.n_regionkey = (SELECT r_regionkey FROM region WHERE r_name = 'MIDDLE EAST')  AND supplier.s_acctbal < 0;
SELECT p_name  FROM part  JOIN lineitem ON p_partkey = l_partkey  WHERE l_shipmode = 'RAIL' AND l_shipdate = '1995-12-01' AND l_discount = 0.1;
SELECT p_name FROM part, partsupp WHERE p_partkey = ps_partkey AND s_suppkey = '000000018' AND ps_supplycost > 900;
SELECT COUNT(*)  FROM orders  JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey  WHERE EXTRACT(YEAR FROM l_shipdate) = 1994;
SELECT COUNT(*)  FROM lineitem  WHERE l_shipmode = 'RAIL' AND l_quantity < 30;
SELECT COUNT(*)  FROM customer  WHERE c_mktsegment = 'FURNITURE' AND c_nationkey = 1;
SELECT c_phone FROM customer WHERE c_acctbal = (SELECT MAX(c_acctbal) FROM customer);
SELECT o_orderpriority  FROM orders  WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders);
SELECT COUNT(*)  FROM orders  JOIN customer ON orders.o_custkey = customer.c_custkey  JOIN nation ON customer.c_nationkey = nation.n_nationkey  WHERE nation.n_name = 'UNITED STATES';
SELECT COUNT(*)  FROM retailers.customer  JOIN retailers.nation ON retailers.customer.c_nationkey = retailers.nation.n_nationkey  WHERE retailers.customer.c_mktsegment = 'AUTOMOBILE'  AND retailers.nation.n_name = 'BRAZIL';
SELECT o_comment  FROM orders  JOIN customer ON orders.o_custkey = customer.c_custkey  WHERE customer.c_mktsegment = 'Furniture'  GROUP BY o_comment  HAVING COUNT(o_comment) >= 5;
SELECT DISTINCT n_name  FROM nation n  JOIN region r ON n.n_regionkey = r.r_regionkey  WHERE r.r_name = 'ASIA';
SELECT n_name FROM nation n JOIN region r ON n.n_regionkey = r.r_regionkey WHERE r_comment = 'furiously express accounts wake sly';
SELECT COUNT(*)  FROM supplier  JOIN nation ON supplier.s_nationkey = nation.n_nationkey  WHERE nation.n_name = 'GERMANY';
SELECT COUNT(*)  FROM customer  JOIN nation ON customer.c_nationkey = nation.n_nationkey  JOIN region ON nation.n_regionkey = region.r_regionkey  WHERE region.r_name = 'ASIA' AND customer.c_acctbal < 0;
SELECT c_phone FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders);
SELECT COUNT(*)  FROM part  JOIN lineitem ON p_partkey = l_partkey  WHERE p_retailprice > 1000 AND l_shipmode = 'SHIP';
SELECT c_name, c_mktsegment  FROM customer  JOIN orders ON customer.c_custkey = orders.o_custkey  WHERE o_totalprice = 199180.63;
SELECT n_name AS nation, r_name AS region  FROM customer JOIN nation n ON customer.c_nationkey = n.n_nationkey JOIN region r ON n.n_regionkey = r.r_regionkey WHERE c_address = 'wH55UnX7 VI';
SELECT COUNT(*)  FROM retailers.customer  JOIN retailers.nation ON retailers.customer.c_nationkey = retailers.nation.n_nationkey  WHERE retailers.customer.c_name = 'Brazil' AND retailers.customer.c_acctbal < 1000;
SELECT n_name  FROM customer  WHERE c_mktsegment = 'BUILDING' AND c_acctbal > (SELECT AVG(c_acctbal) * 0.8 FROM customer);
SELECT      (COUNT(CASE WHEN c.n_name = 'United States' AND c.c_acctbal < 4000 THEN c.c_custkey ELSE NULL END)      / COUNT(CASE WHEN c.c_acctbal < 4000 THEN c.c_custkey ELSE NULL END)) * 100 AS percentage FROM      customer c JOIN      nation n ON c.c_nationkey = n.n_nationkey;
SELECT c_name, c_phone  FROM customer  WHERE c_acctbal > 9000;
SELECT      EXTRACT(YEAR FROM l_shipdate) AS ship_year,     EXTRACT(MONTH FROM l_shipdate) AS ship_month,     EXTRACT(DAY FROM l_shipdate) AS ship_day,     AVG(l_linenumber) AS avg_items_per_day FROM      lineitem WHERE      l_shipdate BETWEEN '1994-04-01' AND '1994-04-30' GROUP BY      ship_year, ship_month, ship_day;
SELECT o_orderkey  FROM orders  WHERE o_totalprice BETWEEN 200000 AND 300000;
SELECT p_partkey  FROM part  WHERE p_retailprice > (SELECT AVG(p_retailprice) FROM part);
SELECT      (COUNT(CASE WHEN ps_supplycost > 500 THEN ps_suppkey END)::FLOAT / COUNT(ps_suppkey)) * 100 AS percentage FROM      partsupp;
SELECT s_suppkey, s_acctbal  FROM supplier  ORDER BY s_acctbal DESC  LIMIT 10;
SELECT COUNT(DISTINCT o.o_orderkey) FROM orders o JOIN customer c ON o.o_custkey = c.c_custkey WHERE c.c_acctbal > 0 AND o.o_orderpriority = '1-URGENT';
SELECT c_name, c_phone  FROM customer  JOIN nation ON customer.c_nationkey = nation.n_nationkey  WHERE n_name = 'INDIA' AND c_acctbal > (SELECT AVG(c_acctbal) FROM customer);
SELECT ps_partkey  FROM partsupp  JOIN supplier ON partsupp.ps_suppkey = supplier.s_suppkey  WHERE supplier.s_name = 'Supplier#000000654'  ORDER BY ps_supplycost DESC  LIMIT 5;
SELECT      (COUNT(CASE WHEN c_mktsegment = 'AUTOMOBILE' AND n_name = 'FRANCE' THEN c_name END)      / COUNT(CASE WHEN n_name = 'FRANCE' THEN c_name END)) * 100 AS percentage FROM      customer c JOIN      nation n ON c.c_nationkey = n.n_nationkey;
SELECT p_name FROM (   SELECT p.p_name,          (l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity) AS profit   FROM part AS p     JOIN lineitem AS l ON p.p_partkey = l.l_partkey      JOIN partsupp AS ps ON ps.ps_partkey = l.l_partkey ) AS profitable_parts WHERE profit = (   SELECT MAX(profit)   FROM (     SELECT (l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity) AS profit     FROM part AS p       JOIN lineitem AS l ON p.p_partkey = l.l_partkey        JOIN partsupp AS ps ON ps.ps_partkey = l.l_partkey   ) AS subquery )
SELECT n_name FROM nation n JOIN customer c ON n.n_nationkey = c.c_nationkey GROUP BY n_name HAVING COUNT(c_custkey) < (SELECT AVG(total_count) FROM (SELECT COUNT(c_custkey) AS total_count FROM customer GROUP BY c_nationkey) subquery) ORDER BY COUNT(c_custkey);
SELECT      (COUNT(CASE WHEN c_mktsegment = 'HOUSEHOLD' THEN c_custkey END)      OVER() / COUNT(CASE WHEN r_name = 'AFRICA' THEN c_custkey END) OVER()) * 100 AS percentage FROM      customer c JOIN      nation n ON c.c_nationkey = n.n_nationkey JOIN      region r ON n.n_regionkey = r.r_regionkey;
SELECT p_name FROM part AS p JOIN partsupp AS ps ON p.p_partkey = ps.ps_partkey GROUP BY p.p_partkey, p.p_name ORDER BY SUM(ps.ps_availqty) DESC LIMIT 10;
SELECT      (SUM(CASE WHEN l_shipmode = 'SHIP' THEN p_retailprice ELSE 0 END) / COUNT(CASE WHEN l_shipmode = 'SHIP' THEN 1 END)) -     (SUM(CASE WHEN l_shipmode = 'AIR' THEN p_retailprice ELSE 0 END) / COUNT(CASE WHEN l_shipmode = 'AIR' THEN 1 END)) FROM      part, lineitem;
SELECT AVG(l_discount)  FROM lineitem  WHERE l_partkey IN (   SELECT p_partkey    FROM part    WHERE p_mfgr = 'Manufacturer#5' );
SELECT COUNT(*)  FROM orders  JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey  WHERE lineitem.l_shipmode = 'RAIL' AND orders.o_orderpriority = '3-MEDIUM';
SELECT      (COUNT(CASE WHEN s_acctbal < AVG(s_acctbal) THEN s_suppkey ELSE NULL END)      OVER () * 100.0 / COUNT(s_suppkey) OVER ()) AS percentage FROM      supplier JOIN      nation n ON s_nationkey = n_nationkey JOIN      region r ON n_regionkey = r_regionkey WHERE      r_name = 'EUROPE'
SELECT      EXTRACT(YEAR FROM l_shipdate) AS ship_year,     EXTRACT(MONTH FROM l_shipdate) AS ship_month,     (SUM(CASE WHEN year(l_shipdate) = 1995 THEN l_orderkey ELSE 0 END) / 12) -      (SUM(CASE WHEN year(l_shipdate) = 1996 THEN l_orderkey ELSE 0 END) / 12) AS avg_diff FROM      customer JOIN      orders ON customer.c_custkey = orders.o_custkey JOIN      lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE      o_orderpriority = '5-LOW' GROUP BY      ship_year, ship_month ORDER BY      ship_year, ship_month;
SELECT c_custkey  FROM customer  WHERE c_acctbal < 0;
SELECT l_orderkey, MIN(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount))) as discounted_price  FROM lineitem  GROUP BY l_orderkey  ORDER BY discounted_price  LIMIT 3;
SELECT COUNT(*)  FROM lineitem  WHERE l_quantity > 10 AND l_returnflag = 'R'
SELECT SUM(MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax)))  FROM retails.lineitem  WHERE l_shipmode = 'AIR' AND l_shipinstruct = 'NONE';
SELECT COUNT(*)  FROM orders  WHERE o_orderpriority < '1-URGENT'  AND o_orderdate > (SELECT MAX(o2_orderdate) FROM orders o2 WHERE o2_orderpriority = '1-URGENT');
SELECT COUNT(*)  FROM supplier  JOIN nation ON supplier.s_nationkey = nation.n_nationkey  WHERE nation.n_name = 'EGYPT' AND supplier.s_acctbal < 0;
SELECT COUNT(*)  FROM lineitem  JOIN orders ON lineitem.l_orderkey = orders.o_orderkey  WHERE l_shipmode = 'REG AIR' AND o_orderdate = '1995-03-22';
SELECT COUNT(*)  FROM supplier  JOIN nation ON supplier.s_nationkey = nation.n_nationkey  WHERE nation.n_name = 'EUROPE';
SELECT      c_mktsegment  FROM      customer  WHERE      c_custkey = (         SELECT              c_custkey          FROM              orders          WHERE              o_orderdate LIKE '1994-04-%'          ORDER BY              COUNT(o_orderkey) DESC          LIMIT 1     );
SELECT p_name FROM part JOIN partsupp ON p_partkey = ps_partkey JOIN supplier ON s_suppkey = ps_suppkey WHERE s_name = 'Supplier#000000034';
SELECT ps_supplycost  FROM partsupp, part  WHERE part.p_type = 'LARGE BURNISHED COPPER'  AND partsupp.ps_partkey = part.p_partkey;
SELECT COUNT(DISTINCT o.o_custkey) FROM customer AS c JOIN orders AS o ON c.c_custkey = o.o_custkey JOIN nation AS n ON c.c_nationkey = n.n_nationkey WHERE n.n_name = 'MOZAMBIQUE' AND o.o_orderpriority = '5-LOW';
SELECT p_name FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE ps_availqty < 10 ORDER BY ps_supplycost LIMIT 1;
SELECT COUNT(DISTINCT o_clerk) FROM orders WHERE o_custkey IN (     SELECT c_custkey     FROM customer     WHERE c_address = 'uFTe2u518et8Q8UC' );
SELECT p_name  FROM part  WHERE p_name NOT IN (     SELECT DISTINCT l_partkey      FROM lineitem      WHERE l_discount = 0.0000 );
SELECT COUNT(*)  FROM supplier  WHERE s_nationkey = (     SELECT n_nationkey      FROM nation      WHERE n_name = 'GERMANY' ) AND s_comment LIKE 'carefully regular packages%';
SELECT COUNT(*)  FROM lineitem  JOIN orders ON lineitem.l_orderkey = orders.o_orderkey  WHERE l_shipdate = '1994-11-19' AND o_orderdate = '1994-09-21';
SELECT      AVG((l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity) / ps_partkey) AS avg_profit FROM      customer JOIN      orders ON customer.c_custkey = orders.o_custkey JOIN      lineitem ON orders.o_orderkey = lineitem.l_orderkey JOIN      partsupp ON lineitem.l_suppkey = partsupp.ps_suppkey JOIN      part ON lineitem.l_partkey = part.p_partkey WHERE      part.p_type = 'PROMO BRUSHED STEEL';
SELECT      (COUNT(CASE WHEN c.n_name = 'IRAN' THEN c.c_custkey END)       / COUNT(CASE WHEN c.c_mktsegment = 'HOUSEHOLD' THEN c.c_custkey END)) * 100 AS percentage FROM      customer c JOIN      nation n ON c.c_nationkey = n.n_nationkey WHERE      c.c_mktsegment = 'HOUSEHOLD' AND      n.n_name = 'IRAN';
SELECT      c_mktsegment,     c_name,     c_address,     c_phone FROM      customer WHERE      c_custkey = 3;
SELECT l_linenumber FROM lineitem WHERE l_discount = 0.1 LIMIT 3;
SELECT COUNT(*)  FROM lineitem  WHERE l_quantity > 40 AND l_shipmode = 'AIR';
SELECT      l_shipmode  FROM      lineitem  WHERE      l_shipinstruct = 'DELIVER IN PERSON';
SELECT o_totalprice, o_orderpriority  FROM orders  WHERE o_orderkey = 33;
SELECT COUNT(*)  FROM orders  WHERE year(o_orderdate) = 1998 AND o_totalprice < 950;
SELECT c_name  FROM customer  WHERE c_acctbal < 0  LIMIT 3;
SELECT      l_extendedprice * (1 - l_discount) AS discounted_price FROM      lineitem WHERE      l_linenumber = 1;
SELECT      (COUNT(CASE WHEN l_returnflag = 'A' OR l_returnflag = 'N' THEN l_linenumber END) - COUNT(CASE WHEN l_returnflag = 'R' THEN l_linenumber END)) AS difference FROM      lineitem WHERE      l_extendedprice < 16947.7
SELECT ps_supplycost  FROM partsupp, part  WHERE part.p_type = 'large plated tin' AND partsupp.ps_partkey = part.p_partkey;
SELECT p.p_name  FROM part AS p  JOIN partsupp AS ps ON p.p_partkey = ps.ps_partkey  WHERE ps.ps_availqty > 9998  LIMIT 3;
SELECT p.p_name  FROM part AS p  JOIN partsupp AS ps ON p.p_partkey = ps.ps_partkey  WHERE p.p_container = 'WRAP BAG' AND ps.ps_supplycost < 10 LIMIT 2;
SELECT n_name  FROM nation  JOIN supplier ON nation.n_nationkey = supplier.s_nationkey  WHERE s_suppkey = 1;
SELECT n_name FROM nation n JOIN region r ON n.n_regionkey = r.r_regionkey WHERE r.r_name = 'Africa';
SELECT r_name FROM region WHERE r_regionkey IN (     SELECT n_regionkey     FROM nation     GROUP BY n_regionkey     ORDER BY COUNT(n_name) ASC     LIMIT 1 );
SELECT COUNT(*)  FROM customer  WHERE c_mktsegment = 'FURNITURE' AND c_nationkey IN      (SELECT n_nationkey FROM nation WHERE n_name = 'Iraq');
SELECT c_name  FROM customer  JOIN orders ON customer.c_custkey = orders.o_custkey  WHERE orders.o_totalprice = 191918.92;
SELECT n_name, r_name  FROM customer  JOIN nation ON customer.c_nationkey = nation.n_nationkey  WHERE c_name = 'Customer#000000008';
SELECT l_receiptdate, o_clerk  FROM orders  JOIN lineitem ON o_orderkey = l_orderkey  WHERE o_orderkey = 6;
SELECT COUNT(*)  FROM supplier  JOIN nation ON supplier.s_nationkey = nation.n_nationkey  WHERE nation.n_name = 'Japan' AND supplier.s_acctbal < 0;
SELECT c_name  FROM customer  WHERE c_acctbal = (SELECT MAX(c_acctbal) FROM customer)
SELECT o_orderdate  FROM orders  WHERE o_orderpriority = '1-URGENT';
SELECT COUNT(*)  FROM lineitem  WHERE l_shipinstruct = 'DELIVER IN PERSON';
SELECT MAX(s_acctbal) AS largest_acctbal FROM supplier;
SELECT COUNT(*)  FROM partsupp  WHERE ps_availqty < 10;
SELECT n.n_name  FROM nation n  JOIN region r ON n.n_regionkey = r.r_regionkey  WHERE r.r_name = 'EUROPE';
SELECT ps_supplycost  FROM partsupp, part  WHERE part.p_name = 'violet olive rose ivory sandy' AND part.p_partkey = partsupp.ps_partkey;
SELECT c_phone  FROM customer  JOIN nation ON customer.c_nationkey = nation.n_nationkey  WHERE nation.n_name = 'Ethiopia';
SELECT SUM(T1.o_totalprice)  FROM orders AS T1  JOIN customer AS T2  ON T1.o_custkey = T2.c_custkey  WHERE T2.c_phone = '627-220-3983';
SELECT DISTINCT T1.l_shipmode  FROM orders AS T1 JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderdate = '1994-12-31'
SELECT s_acctbal  FROM supplier  WHERE s_suppkey = (     SELECT ps_suppkey      FROM partsupp      GROUP BY ps_suppkey      ORDER BY COUNT(ps_suppkey) DESC      LIMIT 1 );
SELECT n_name  FROM nation n  JOIN supplier s ON n.n_nationkey = s.n_nationkey  WHERE s_acctbal = 4393.04;
SELECT r_name  FROM region  JOIN nation ON region.r_regionkey = nation.r_regionkey  JOIN customer ON nation.n_nationkey = customer.c_nationkey  GROUP BY region.r_regionkey  ORDER BY COUNT(customer.c_custkey) DESC  LIMIT 1;
SELECT c_phone  FROM customer  JOIN orders ON customer.c_custkey = orders.o_custkey  WHERE orders.o_totalprice > 300000;
SELECT DISTINCT o_clerk  FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE l.l_shipmode = 'MAIL';
SELECT n_name  FROM nation n  JOIN supplier s ON n.n_nationkey = s.s_nationkey  WHERE s_acctbal = (SELECT MIN(s_acctbal) FROM supplier WHERE s_nationkey = n.n_nationkey)  GROUP BY n_nationkey  ORDER BY SUM(s_acctbal) DESC  LIMIT 5;
SELECT s_address FROM supplier JOIN partsupp ON s_suppkey = ps_suppkey JOIN part ON p_partkey = ps_partkey WHERE p_size = (SELECT MAX(p_size) FROM part);
SELECT p.p_name AS part, s.s_name AS supplier  FROM part p  JOIN lineitem l ON p.p_partkey = l.l_partkey  JOIN partsupp ps ON l.l_suppkey = ps.ps_suppkey AND l.l_partkey = ps.ps_partkey  WHERE (l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity) = (     SELECT MAX((l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity))      FROM lineitem l      JOIN partsupp ps ON l.l_suppkey = ps.ps_suppkey AND l.l_partkey = ps.ps_partkey )
SELECT      (COUNT(CASE WHEN r_name = 'ASIA' THEN s_name END)       / COUNT(s_name)) * 100 AS proportion FROM      supplier, region WHERE      supplier.s_nationkey = region.r_nationkey     AND region.r_name = 'ASIA';
SELECT o_totalprice  FROM orders  WHERE o_orderkey = 32;
SELECT COUNT(*)  FROM lineitem  WHERE l_discount = 0;
SELECT l_linenumber FROM lineitem WHERE l_shipmode = 'truck' AND EXTRACT(YEAR FROM l_shipdate) < 1997;
SELECT COUNT(*)  FROM lineitem  WHERE l_linenumber IS NOT NULL  AND returnflag = 'R'  AND EXTRACT(YEAR FROM l_shipdate) = 1998;
SELECT l_linenumber FROM lineitem WHERE l_quantity = (SELECT MAX(l_quantity) FROM lineitem) AND l_shipmode = 'AIR';
SELECT c_name FROM customer WHERE c_acctbal < 0;
SELECT COUNT(*)  FROM customer  JOIN nation ON customer.c_nationkey = nation.n_nationkey  WHERE customer.c_mktsegment = 'household' AND nation.n_name = 'Germany';
SELECT DISTINCT c_phone  FROM customer  JOIN orders ON customer.c_custkey = orders.o_custkey  WHERE orders.o_orderpriority = '1-URGENT';
SELECT c_name FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE l_discount = (SELECT MAX(l_discount) FROM lineitem);
SELECT o_orderkey, l_shipdate  FROM orders o  JOIN lineitem l ON o_orderkey = l_orderkey  WHERE l_shipdate IS NOT NULL  ORDER BY o_totalprice DESC  LIMIT 5;
SELECT o_comment  FROM orders  JOIN customer ON orders.o_custkey = customer.c_custkey  WHERE customer.c_mktsegment = 'FURNITURE'
SELECT c_name FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey WHERE orders.o_totalprice > 300000;
SELECT c_name FROM customer JOIN nation n ON c_nationkey = n_nationkey WHERE n_name = 'INDIA' AND c_acctbal > 5000;
SELECT s_phone FROM supplier JOIN nation ON s_nationkey = n_nationkey WHERE n_name = 'JAPAN';
SELECT s_name FROM supplier JOIN nation ON s_nationkey = n_nationkey WHERE n_name = 'ARGENTINA' AND s_acctbal < 0;
SELECT COUNT(DISTINCT n_nationkey)  FROM nation JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'ALGERIA';
SELECT DISTINCT c_name  FROM customer  JOIN orders ON customer.c_custkey = orders.o_custkey  JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey  WHERE l_discount = 0.1 AND o_orderdate BETWEEN '1994-01-01' AND '1995-01-01'
SELECT      (COUNT(CASE WHEN n.regionkey = R.r_regionkey AND R.r_name = 'America' THEN n.n_name END)      / COUNT(n.n_name)) * 100 AS percentage FROM      nation n JOIN      region R ON n.regionkey = R.r_regionkey;
SELECT      (COUNT(CASE WHEN c_mktsegment = 'HOUSEHOLD' THEN 1 END)       OVER ()      / COUNT(*)       OVER ()      * 100) as percentage FROM      customer JOIN      nation n ON n.n_nationkey = customer.c_nationkey WHERE      n.n_name = 'Indonesia'
SELECT p_name  FROM part  WHERE p_type = 'PROMO BRUSHED STEEL';
SELECT p_comment  FROM part  WHERE p_name = 'burlywood plum powder puff mint';
SELECT COUNT(*)  FROM part  WHERE p_retailprice > 1900;
SELECT COUNT(*)  FROM part  WHERE p_type = 'PROMO BRUSHED STEEL' AND p_mfgr = 'Manufacturer#5';
SELECT DISTINCT p_brand  FROM part  WHERE p_type = 'PROMO BRUSHED STEEL';
SELECT p_name  FROM part  WHERE p_retailprice = (SELECT MAX(p_retailprice) FROM part);
SELECT p_name, p_size  FROM part  WHERE p_name IN ('pink powder drab lawn cyan', 'cornflower sky burlywood green beige')  ORDER BY p_size DESC  LIMIT 1;
SELECT COUNT(*)  FROM part  WHERE p_container = 'JUMBO CASE';
SELECT MIN(p_size)  FROM part  WHERE p_container = 'JUMBO CASE'
SELECT COUNT(*)  FROM supplier  WHERE s_acctbal < 0;
SELECT s_name  FROM supplier  WHERE s_acctbal = (     SELECT MAX(s_acctbal)      FROM supplier ) LIMIT 3;
SELECT s_phone FROM supplier JOIN nation ON s_nationkey = n_nationkey WHERE n_name = 'Germany';
SELECT DISTINCT s_name  FROM supplier  JOIN partsupp ON s_suppkey = ps_suppkey  JOIN part ON ps_partkey = p_partkey  WHERE p_name = 'hot spring dodger dim light';
SELECT MIN(ps_supplycost)  FROM partsupp  JOIN part ON partsupp.ps_partkey = part.p_partkey  WHERE p_name = 'hot spring dodger dim light';
SELECT s_name FROM supplier  JOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light' ORDER BY partsupp.ps_supplycost ASC LIMIT 1;
SELECT SUM(psupp.ps_availqty) AS total_quantity_available FROM part AS p JOIN partsupp AS psupp ON p.p_partkey = psupp.ps_partkey WHERE p.p_name = 'hot spring dodger dim light';
SELECT s_phone  FROM suppliers  JOIN partsupp ON s_suppkey = ps_suppkey  JOIN part ON p_partkey = ps_partkey  WHERE p_name = 'hot spring dodger dim light'  GROUP BY s_phone  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT s_name FROM supplier JOIN partsupp ON s_suppkey = ps_suppkey JOIN part ON p_partkey = ps_partkey WHERE p_retailprice = (     SELECT MAX(p_retailprice)      FROM part );
SELECT COUNT(*)  FROM supplier  JOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey  JOIN part ON partsupp.ps_partkey = part.p_partkey  JOIN nation ON supplier.s_nationkey = nation.n_nationkey  WHERE part.p_name = 'hot spring dodger dim light' AND nation.n_name = 'VIETNAM';
SELECT COUNT(*)  FROM supplier  JOIN part ON supplier.s_suppkey = part.p_suppkey  WHERE part.p_type = 'PROMO BRUSHED STEEL' AND supplier.s_acctbal < 0;
SELECT DISTINCT s_name  FROM supplier  JOIN partsupp ON s_suppkey = ps_suppkey  JOIN part ON ps_partkey = p_partkey  WHERE p_brand = 'Brand#55';
SELECT COUNT(*)  FROM part  WHERE p_type = 'PROMO BRUSHED STEEL'  JOIN partsupp ON p_partkey = ps_partkey  GROUP BY p_partkey  HAVING SUM(ps_availqty) < 5000;
SELECT COUNT(*)  FROM orders  JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey  JOIN part ON lineitem.l_partkey = part.p_partkey  WHERE part.p_name = 'hot spring dodger dim light';
SELECT SUM(L.quantity) AS total_quantity  FROM lineitem L JOIN part P ON L.partkey = P.partkey  WHERE P.p_name = 'hot spring dodger dim light';
SELECT o_orderkey  FROM orders  JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey  JOIN part ON lineitem.l_partkey = part.p_partkey  GROUP BY orders.o_orderkey  HAVING COUNT(lineitem.l_partkey) > 2 AND part.p_container = 'JUMBO CASE';
SELECT COUNT(*)  FROM supplier  JOIN nation ON supplier.s_nationkey = nation.n_nationkey  JOIN region ON nation.n_regionkey = region.r_regionkey  WHERE supplier.s_acctbal < 0 AND region.r_name = 'EUROPE';
SELECT COUNT(*)  FROM supplier  JOIN partsupp ON s_suppkey = ps_suppkey  JOIN part ON p_partkey = ps_partkey  JOIN nation ON s_nationkey = n_nationkey  JOIN region ON r_regionkey = n_regionkey  WHERE p_name = 'hot spring dodger dim light' AND r_name = 'EUROPE';
SELECT T3.s_phone FROM part AS T1 JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey JOIN lineitem AS T4 ON T2.ps_partkey = T4.l_partkey JOIN orders AS T5 ON T4.l_orderkey = T5.o_orderkey WHERE T5.o_orderkey = 1;
SELECT COUNT(*)  FROM supplier  JOIN lineitem ON s_suppkey = l_suppkey  JOIN orders ON l_orderkey = o_orderkey  WHERE o_orderkey = 4 AND s_acctbal < 0;
SELECT COUNT(*)  FROM part  JOIN lineitem ON part.p_partkey = lineitem.l_partkey  JOIN supplier ON part.p_suppkey = supplier.s_suppkey  WHERE lineitem.l_returnflag = 'R' AND supplier.s_acctbal < 0;
SELECT l_shipdate  FROM lineitem  JOIN part ON lineitem.l_partkey = part.p_partkey  WHERE l_orderkey = 1 AND part.p_name = 'burnished seashell gainsboro navajo chocolate';
SELECT l_quantity FROM lineitem JOIN part ON lineitem.l_partkey = part.p_partkey WHERE p_name = 'burnished seashell gainsboro navajo chocolate' AND lineitem.l_orderkey = 1;
SELECT p_name FROM part p JOIN lineitem l ON p.p_partkey = l.l_partkey WHERE l_orderkey = 1 AND p.p_name IN ('salmon white grey tan navy', 'burnished seashell gainsboro navajo chocolate') GROUP BY p.p_name ORDER BY SUM(l_quantity) DESC LIMIT 1;
SELECT MAX(l_discount)  FROM lineitem  JOIN part ON l_partkey = p_partkey  WHERE p_name = 'burnished seashell gainsboro navajo chocolate';
SELECT DISTINCT l_shipmode  FROM lineitem  JOIN part ON l_partkey = p_partkey  WHERE p_name = 'burnished seashell gainsboro navajo chocolate';
SELECT AVG(psupp.ps_supplycost)  FROM part AS p  JOIN partsupp AS psupp ON p.p_partkey = psupp.ps_partkey  WHERE p.p_name = 'hot spring dodger dim light';
SELECT      ((MAX(T2.ps_supplycost) - MIN(T2.ps_supplycost)) / MIN(T2.ps_supplycost)) * 100 AS PercentageDifference FROM      part AS T1 JOIN      partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE      T1.p_name = 'hot spring dodger dim light';
SELECT      (l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity) AS profit  FROM      lineitem  JOIN      part ON lineitem.l_partkey = part.p_partkey  JOIN     (partsupp ps) ON lineitem.ps_suppkey = partsupp.ps_suppkey  WHERE      lineitem.l_orderkey = 1 AND      part.p_partkey = 98768;
SELECT l_extendedprice * (1 - l_discount)  FROM part  JOIN lineitem ON p_partkey = l_partkey  WHERE p_name = 'burnished seashell gainsboro navajo chocolate' AND l_orderkey = 1;
SELECT c_mktsegment  FROM customer  WHERE c_acctbal = (SELECT MAX(c_acctbal) FROM customer);
SELECT COUNT(*)  FROM orders  JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey  WHERE YEAR(lineitem.l_shipdate) = 1997 AND lineitem.l_shipmode = 'MAIL';
SELECT COUNT(*)  FROM customer  WHERE c_mktsegment = 'FURNITURE';
SELECT COUNT(*)  FROM lineitem  WHERE l_shipdate >= '1994-01-01' AND l_shipdate <= '1994-12-31'  AND l_shipmode = 'TRUCK'  AND l_returnflag = 'R';
SELECT COUNT(*)  FROM customer  WHERE c_mktsegment = 'MACHINERY' AND c_acctbal < 0;
SELECT COUNT(*)  FROM orders  WHERE o_orderpriority = '1-URGENT'  AND o_clerk = 'Clerk#000000001'  AND EXTRACT(YEAR FROM o_orderdate) = 1997;
SELECT c_name  FROM customer  JOIN lineitem ON customer.c_custkey = lineitem.l_orderkey  WHERE l_shipmode = 'delivered'  GROUP BY c_name  ORDER BY MAX(DATEDIFF(l_receiptdate, l_commitdate)) DESC  LIMIT 1;
SELECT SUM(T2.o_totalprice)  FROM customer AS T1  JOIN orders AS T2  ON T1.c_custkey = T2.o_custkey  JOIN nation AS T3  ON T1.c_nationkey = T3.n_nationkey  WHERE T3.n_name = 'ARGENTINA';
SELECT COUNT(DISTINCT c_custkey) FROM retails.customer AS c JOIN retails.orders AS o ON c.c_custkey = o.o_custkey WHERE c.c_mktsegment = 'BUILDING' AND o.o_totalprice > 50000;
SELECT n_name  FROM nation  JOIN supplier ON nation.n_nationkey = supplier.s_nationkey  GROUP BY n_name  ORDER BY COUNT(s_name) ASC  LIMIT 1;
SELECT ps_supplycost  FROM part  JOIN partsupp ON p_partkey = ps_partkey  WHERE p_name = 'medium metallic grey dodger linen'
SELECT      n.nationkey,     COUNT(s.s_acctbal) AS indebted_suppliers_count FROM      nation n JOIN      supplier s ON n.nationkey = s.nationkey WHERE      s.s_acctbal < 0 GROUP BY      n.nationkey ORDER BY      indebted_suppliers_count DESC LIMIT 2;
SELECT p_name FROM part JOIN partsupp ON p_partkey = ps_partkey WHERE ps_supplycost > 1000;
SELECT n_name  FROM supplier  JOIN nation ON s_nationkey = n_nationkey  WHERE s_acctbal = (SELECT MIN(s_acctbal) FROM supplier);
SELECT T1.o_clerk  FROM orders AS T1  JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey  WHERE T2.l_extendedprice = (SELECT MAX(l_extendedprice) FROM lineitem)
SELECT SUM(L_QUANTITY)  FROM LINEITEM  WHERE L_ORDERKEY IN (     SELECT O_ORDERKEY      FROM ORDERS      WHERE O_CUSTKEY = 101660 AND O_ORDERDATE = '1995-10-05' )
SELECT SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax))  FROM lineitem  JOIN orders ON lineitem.l_orderkey = orders.o_orderkey  WHERE o_custkey = 88931 AND o_orderdate = '1994-07-13';
SELECT p_name  FROM part  JOIN lineitem ON part.p_partkey = lineitem.l_partkey  JOIN orders ON lineitem.l_orderkey = orders.o_orderkey  WHERE orders.o_custkey = 110942;
SELECT p_name, (l_extendedprice * (1 - l_discount)) AS discounted_price FROM      retail.orders o  JOIN      retail.lineitem l ON o.orderkey = l.orderkey JOIN      retail.customer c ON o.custkey = c.c_custkey JOIN      retail.part p ON l.partkey = p.p_partkey WHERE      c.c_custkey = 111511 AND o.o_orderkey = 53159;
SELECT height_in_inch  FROM PlayerInfo  JOIN height_info ON PlayerInfo.height = height_info.height_id  WHERE PlayerName = 'David Bornhammar';
SELECT PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE height_info.height_in_inch > '6''2"'
SELECT COUNT(*)  FROM PlayerInfo  JOIN height_info ON PlayerInfo.height = height_info.height_id  WHERE height_info.height_in_inch > '6''2"' AND PlayerInfo.nation = 'Sweden';
SELECT PlayerName  FROM PlayerInfo  JOIN height_info  ON PlayerInfo.height = height_info.height_id  WHERE height_info.height_in_cm = (SELECT MAX(height_in_cm) FROM height_info);
SELECT weight_in_kg  FROM PlayerInfo  JOIN height_info ON PlayerInfo.height = height_info.height_id  JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id  WHERE PlayerName = 'David Bornhammar';
SELECT COUNT(*)  FROM PlayerInfo  JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id  WHERE weight_in_kg > 90;
SELECT COUNT(*)  FROM PlayerInfo  JOIN weight_info ON PlayerInfo.weight = weight_info.weight_in_kg  WHERE weight_info.weight_in_kg > 90 AND PlayerInfo.position_info = 'D';
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_in_cm JOIN weight_info ON PlayerInfo.weight = weight_info.weight_in_kg WHERE weight_info.weight_in_kg > 90 GROUP BY PlayerInfo.ELITEID ORDER BY SUM(PlayerInfo.sum_7yr_GP) DESC LIMIT 1;
SELECT weight_in_kg  FROM PlayerInfo  WHERE sum_7yr_TOI = (SELECT MAX(sum_7yr_TOI) FROM PlayerInfo);
SELECT      (SELECT height_in_cm FROM PlayerInfo WHERE PlayerName = 'David Bornhammar') -      (SELECT height_in_cm FROM PlayerInfo WHERE PlayerName = 'Pauli Levokari') AS DifferenceInCM FROM     PlayerInfo WHERE     PlayerName IN ('David Bornhammar', 'Pauli Levokari')
SELECT COUNT(*)  FROM PlayerInfo  JOIN height_info ON PlayerInfo.height = height_info.height_id  JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id  WHERE PlayerInfo.shoots = 'R' AND weight_info.weight_in_kg > 90;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE weight_info.weight_in_kg > 90 AND PlayerInfo.shoots = 'R';
SELECT      w.weight_in_kg / POWER(DIVIDE(h.height_in_cm, 100), 2) AS BMI FROM      PlayerInfo p JOIN      height_info h ON p.height = h.height_id JOIN      weight_info w ON p.weight = w.weight_id WHERE      p.PlayerName = 'David Bornhammar';
SELECT AVG(height_info.height_in_cm)  FROM PlayerInfo  JOIN height_info ON PlayerInfo.height = height_info.height_id  WHERE PlayerInfo.position_info = 'D';
SELECT MAX(weight_in_lbs)  FROM weight_info;
SELECT COUNT(*)  FROM PlayerInfo  WHERE shoots = 'R' AND height_in_inch = 68;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_in_cm JOIN weight_info ON PlayerInfo.weight = weight_info.weight_in_kg JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE PlayerInfo.sum_7yr_GP > 500 ORDER BY SeasonStatus.PIM DESC LIMIT 1;
SELECT MAX(height_info.height_in_cm)  FROM PlayerInfo  JOIN height_info ON PlayerInfo.height = height_info.height_id  WHERE PlayerInfo.birthplace = 'Edmonton, AB, CAN';
SELECT COUNT(*)  FROM PlayerInfo  JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID  WHERE PlayerInfo.draftyear = 2008  AND PlayerInfo.overallby = 'Anaheim Ducks'  AND SeasonStatus.TEAM = 'U.S. National U18 Team';
SELECT weight_in_kg  FROM PlayerInfo  WHERE overall = (     SELECT ELITEID      FROM (         SELECT ELITEID, MAX(PLUSMINUS) as max_diff          FROM SeasonStatus          GROUP BY ELITEID     ) sub      ORDER BY max_diff DESC      LIMIT 1 );
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.LEAGUE = 'QMJHL' AND SeasonStatus.SEASON = '2004-2005' AND MAX(SeasonStatus.P) = (SELECT MAX(P) FROM SeasonStatus WHERE SEASON = '2004-2005' AND LEAGUE = 'QMJHL');
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.TEAM = 'Acadie-Bathurst Titan' AND SeasonStatus.GAMETYPE = 'Regular Season' AND SeasonStatus.SEASON = '1998-1999';
SELECT COUNT(*)  FROM PlayerInfo  JOIN height_info ON PlayerInfo.height = height_info.height_id  WHERE height_info.height_in_cm = (SELECT MAX(height_in_cm) FROM height_info);
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.SEASON = '1997-1998' AND SeasonStatus.LEAGUE = 'OHL' AND PlayerInfo.birthdate = (SELECT MAX(T.birthdate) FROM PlayerInfo T WHERE T.ELITEID = SeasonStatus.ELITEID);
SELECT COUNT(*)  FROM PlayerInfo  JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID  WHERE SeasonStatus.GP = 72 AND PlayerInfo.shoots = 'L';
SELECT      (SUM(CASE WHEN SS.GAMETYPE = 'Regular Season' THEN SS.G ELSE 0 END)      - SUM(CASE WHEN SS.GAMETYPE = 'Playoffs' THEN SS.G ELSE 0 END)) as goal_difference FROM      SeasonStatus SS JOIN      PlayerInfo PI ON SS.ELITEID = PI.ELITEID WHERE      PI.PlayerName = 'Pavel Brendl' AND SS.SEASON = '1998-1999';
SELECT AVG(`weight_in_lbs`)  FROM `PlayerInfo`  JOIN `height_info` ON `PlayerInfo.height` = `height_info.height_id`  JOIN `weight_info` ON `PlayerInfo.weight` = `weight_info.weight_id`  WHERE `PlayerInfo.CSS_rank` = (SELECT MAX(CSS_rank) FROM `PlayerInfo`);
SELECT      (COUNT(CASE WHEN GP > 20 THEN ELITEID END) / COUNT(ELITEID)) * 100 AS playoff_percentage FROM      SeasonStatus  WHERE      SEASON = '2007-2008' AND GAMETYPE = 'Playoffs';
SELECT PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE LEAGUE = 'WHL' AND SEASON = '2007-2008' AND G = (SELECT MAX(G) FROM SeasonStatus WHERE LEAGUE = 'WHL' AND SEASON = '2007-2008');
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.TEAM = 'Chilliwack Chiefs' AND SeasonStatus.P > 100;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_in_kg WHERE weight_info.weight_in_kg = 120;
SELECT PlayerInfo.PlayerName, height_info.height_in_cm  FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_in_inch*2.54 WHERE PlayerInfo.PlayerName = 'Brian Gionta';
SELECT PlayerName, position_info  FROM PlayerInfo  WHERE PIM = (SELECT MAX(PIM) FROM SeasonStatus);
SELECT PlayerName FROM PlayerInfo WHERE P = (SELECT MAX(P) FROM PlayerInfo WHERE draftyear IS NOT NULL);
SELECT      (COUNT(CASE WHEN PlayerInfo.nation IN ('Belarus', 'Bulgaria', 'Czech Republic', 'Hungary', 'Moldova', 'Poland', 'Romania', 'Slovakia', 'Ukraine') THEN PlayerInfo.ELITEID END)      / COUNT(PlayerInfo.ELITEID)) * 100 AS Percentage FROM      PlayerInfo  WHERE      PlayerInfo.overallby = 'Toronto Maple Leafs';
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_in_cm JOIN weight_info ON PlayerInfo.weight = weight_info.weight_in_kg JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE PlayerInfo.overallby = 'Toronto Maple Leafs' AND PlayerInfo.draftyear = 2008 ORDER BY PlayerInfo.CSS_rank DESC LIMIT 1;
SELECT PlayerInfo.PlayerName, SeasonStatus.TEAM FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.LEAGUE = 'SuperElit' AND SeasonStatus.SEASON = '2006-2007' AND SeasonStatus.GAMETYPE = 'Playoffs' ORDER BY SeasonStatus.P DESC LIMIT 1;
SELECT COUNT(*)  FROM PlayerInfo  JOIN height_info ON PlayerInfo.height = height_info.height_id  JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id  JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID  WHERE PlayerInfo.draftyear IS NOT NULL AND PlayerInfo.overallby = 'Toronto Maple Leafs' AND SeasonStatus.sum_7yr_GP > 300;
SELECT PlayerInfo.birthdate, height_info.height_in_cm  FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.TEAM = 'Yale Univ.' AND SeasonStatus.PIM = '28' AND SeasonStatus.SEASON = '2005-2006';
SELECT      (SUM(CASE WHEN P.PLAYERNAME = 'Ian Schultz' THEN P.G ELSE 0 END) * 100.0 / SUM(P.G)) AS percentage_goals_scored_by_Ian_Schultz FROM      PlayerInfo P JOIN      SeasonStatus S ON P.ELITEID = S.ELITEID WHERE      S.SEASON = '2007-2008' AND      S.TEAM = 'Calgary Hitmen';
SELECT      (SUM(CASE WHEN PlayerInfo.PlayerName = 'Yevgeni Muratov' THEN SeasonStatus.PIM ELSE 0 END) * 100.0 /       SUM(SeasonStatus.PIM)) as percentage FROM      PlayerInfo JOIN      SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE      SeasonStatus.TEAM = 'Ak Bars Kazan' AND      SeasonStatus.SEASON = '1999-2000';
SELECT `birthplace`  FROM PlayerInfo  WHERE `PlayerName` = 'Aaron Gagnon';
SELECT weight_in_kg FROM weight_info WHERE PlayerInfo.PlayerName = 'Tony Martensson';
SELECT PlayerName FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE weight_in_lbs = 190;
SELECT PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE weight_in_kg = (SELECT MAX(weight_in_kg) FROM weight_info);
SELECT      (SUM(CASE WHEN w.weight_in_lbs > 154 AND pi.nation = 'Denmark' THEN 1 ELSE 0 END)      / COUNT(pi.ELITEID)) * 100 AS percentage FROM      weight_info w JOIN      PlayerInfo pi ON w.weight_id = pi.weight
SELECT `TEAM` FROM PlayerInfo WHERE `PlayerName` = 'Andreas Jamtin';
SELECT DISTINCT s.SEASON  FROM PlayerInfo p  JOIN SeasonStatus s ON p.ELITEID = s.ELITEID  WHERE p.PlayerName = 'Niklas Eckerblom';
SELECT GAMETYPE  FROM SeasonStatus  WHERE ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Matthias Trattnig');
SELECT T3.nation FROM SeasonStatus AS T1 JOIN PlayerInfo AS T3 ON T1.ELITEID = T3.ELITEID WHERE T1.SEASON = '1997-1998';
SELECT MAX(T3.P)  FROM PlayerInfo AS T1  JOIN height_info AS T2 ON T1.height = T2.height_id  JOIN SeasonStatus AS T3 ON T1.ELITEID = T3.ELITEID  WHERE T1.PlayerName = 'Per Mars' AND T1.draftyear IS NOT NULL;
SELECT PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE nation = 'Italy' ORDER BY height_info.height_in_cm ASC LIMIT 1;
SELECT PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE height_info.height_in_inch = '5''8"';
SELECT COUNT(*)  FROM PlayerInfo  JOIN height_info ON PlayerInfo.height = height_info.height_id  WHERE birthyear = 1982 AND height_info.height_in_cm > 182;
SELECT      (SUM(CASE WHEN nation = 'Russia' AND height_in_cm < 200 THEN 1 ELSE 0 END) * 100 / COUNT(ELITEID)) as percentage FROM      PlayerInfo
SELECT PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE nation = 'USA' ORDER BY weight_in_lbs LIMIT 1;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.SEASON = '2000-2001' AND SeasonStatus.PIM = (SELECT MAX(PIM) FROM SeasonStatus WHERE SEASON = '2000-2001');
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.TEAM = 'Avangard Omsk' AND SeasonStatus.SEASON = '2000-2001';
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE PlayerInfo.draftyear = 2000  AND PlayerInfo.overallby = 'Arizona Coyotes' AND SeasonStatus.PIM = (SELECT MAX(TotalPIM) FROM      (SELECT ELITEID, SUM(PIM) AS TotalPIM FROM SeasonStatus WHERE draftyear = 2000 AND overallby = 'Arizona Coyotes' GROUP BY ELITEID) AS SubQuery);
SELECT COUNT(*)  FROM PlayerInfo  JOIN height_info ON PlayerInfo.height = height_info.height_id  WHERE PlayerInfo.overallby = 'Arizona Coyotes' AND height_info.height_in_cm = 195;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.TEAM = 'Avangard Omsk' AND SeasonStatus.GAMETYPE = 'Playoffs' AND SeasonStatus.SEASON = '2000-2001';
SELECT PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SEASON = '2000-2001' AND LEAGUE = 'International' AND P = (SELECT MAX(P) FROM SeasonStatus WHERE SEASON = '2000-2001' AND LEAGUE = 'International');
SELECT COUNT(*)  FROM PlayerInfo  JOIN height_info ON PlayerInfo.height = height_info.height_id  JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id  WHERE birthyear = 1980 AND weight_in_lbs = 185;
SELECT ELITEID, PlayerName FROM SeasonStatus WHERE SEASON = '2000-2001' AND LEAGUE = 'International' ORDER BY GP DESC LIMIT 1;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.TEAM = 'Avangard Omsk' AND SeasonStatus.LEAGUE = 'International' AND SeasonStatus.G = 0 AND SeasonStatus.SEASON = '2000-2001';
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.TEAM = 'Avangard Omsk' AND SeasonStatus.GAMETYPE = 'Regular Season' AND SeasonStatus.SEASON = '2000-2001' AND (SELECT MIN(PlayerInfo.birthday) FROM PlayerInfo WHERE PlayerInfo.ELITEID = SeasonStatus.ELITEID) =      (SELECT MIN(birthdate) FROM PlayerInfo);
SELECT PlayerName FROM SeasonStatus WHERE LEAGUE = 'OHL' AND GAMETYPE = 'Regular Season' AND SEASON = '2007-2008' ORDER BY A DESC LIMIT 1;
SELECT COUNT(DISTINCT s.TEAM) FROM PlayerInfo p JOIN height_info h ON p.height = h.height_id JOIN weight_info w ON p.weight = w.weight_id JOIN SeasonStatus s ON p.ELITEID = s.ELITEID WHERE w.weight_in_lbs = (SELECT MAX(weight_in_lbs) FROM weight_info) AND p.overallby = 'Arizona Coyotes';
SELECT AVG(T2.weight_in_lbs) AS avg_weight_pounds FROM PlayerInfo AS T1 JOIN weight_info AS T2 ON T1.weight = T2.weight_id JOIN height_info AS T3 ON T1.height = T3.height_id JOIN SeasonStatus AS T4 ON T1.ELITEID = T4.ELITEID WHERE T4.SEASON = T1.draftyear AND T4.TEAM LIKE '%Arizona Coyotes%' AND T1.overallby = 'Arizona Coyotes';
SELECT AVG(height_info.height_in_cm)  FROM PlayerInfo  JOIN height_info ON PlayerInfo.height = height_info.height_id  JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID  WHERE SeasonStatus.TEAM = 'Acadie-Bathurst Titan' AND SeasonStatus.GAMETYPE = 'Regular Season';
SELECT COUNT(*)  FROM SeasonStatus  WHERE ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Per Mars')  AND SEASON = '1997-1998';
SELECT weight_in_kg  FROM PlayerInfo  WHERE PlayerName = 'Matthias Trattnig';
SELECT PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE height_info.height_in_inch > '5''9"';
SELECT `TEAM` FROM `SeasonStatus` WHERE `ELITEID` = (SELECT `ELITEID` FROM `PlayerInfo` WHERE `PlayerName` = 'Niklas Eckerblom') AND `SEASON` = '1997-1998';
SELECT COUNT(T2.TEAM)  FROM PlayerInfo AS T1  JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID  WHERE T1.nation = 'Sweden'
SELECT COUNT(*)  FROM PlayerInfo  JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID  WHERE PlayerInfo.PlayerName = 'Per Mars' AND SeasonStatus.GAMETYPE = 'Playoffs';
SELECT PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE TEAM = 'Rimouski Oceanic' AND GAMETYPE = 'Playoffs' ORDER BY G DESC LIMIT 1;
SELECT      nation  FROM      PlayerInfo  JOIN      SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID  WHERE      SeasonStatus.TEAM = 'Plymouth Whalers'  GROUP BY      nation  ORDER BY      COUNT(PlayerInfo.PlayerName) DESC  LIMIT 1;
SELECT PlayerName FROM SeasonStatus WHERE TEAM = 'Plymouth Whalers' AND SEASON = '1999-2000' ORDER BY A DESC LIMIT 1;
SELECT PlayerInfo.PlayerName, height_info.height_in_inch FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.TEAM = 'Oshawa Generals';
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_in_cm JOIN weight_info ON PlayerInfo.weight = weight_info.weight_in_kg JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.LEAGUE = 'OHL' AND SeasonStatus.SEASON BETWEEN '1997-2000' AND '1999-2000' AND PlayerInfo.birthdate = (SELECT MIN(PlayerInfo.birthdate) FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.LEAGUE = 'OHL' AND SeasonStatus.SEASON BETWEEN '1997-2000' AND '1999-2000');
SELECT PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE nation = 'USA' AND TEAM = 'USA U20' ORDER BY height_info.height_in_cm DESC LIMIT 1;
SELECT      MULTIPLY(         DIVIDE(             SUM(CASE WHEN T1.nation = 'Sweden' THEN 1 ELSE 0 END),              COUNT(T1.ELITEID)         ),         100     ) AS percentage FROM      PlayerInfo AS T1 JOIN      SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE      T2.SEASON IN ('1997-1998', '1998-1999', '1999-2000') AND      T2.GAMETYPE = 'Playoffs';
SELECT      (SUM(PIM WHERE nation = 'Sweden' AND LEAGUE = 'OHL') / COUNT(ELITEID) WHERE LEAGUE = 'OHL') * 100 AS percentage FROM      SeasonStatus;
SELECT AVG(StandardCost)  FROM Product  WHERE ProductNumber = 'CA-1098'
SELECT Product.Name, ProductCostHistory.EndDate IS NULL AS IsCurrent, ProductStandardCost.StandardCost  FROM Product  JOIN ProductCostHistory ON Product.ProductID = ProductCostHistory.ProductID  WHERE ProductCostHistory.EndDate IS NULL;
SELECT p.ProductID, p.Name  FROM Product p  JOIN ProductCostHistory h ON h.ProductID = p.ProductID  WHERE SUBTRACT(p.StandardCost, h.StandardCost) > 80;
SELECT Product.Name, SUM(Quantity) AS TotalQuantity FROM ShoppingCartItem JOIN Product ON ShoppingCartItem.ProductID = Product.ProductID WHERE ShoppingCartItem.ShoppingCartID = 14951 GROUP BY Product.Name;
SELECT Product.Name FROM ShoppingCartItem JOIN Product ON ShoppingCartItem.ProductID = Product.ProductID WHERE ShoppingCartItem.Quantity > 5;
SELECT p.Name FROM Product p JOIN PurchaseOrderDetail pod ON p.ProductID = pod.ProductID JOIN PurchaseOrderHeader po ON pod.PurchaseOrderID = po.PurchaseOrderID WHERE p.Class = 'L'
SELECT Product.Name, Product.ListPrice  FROM Product  JOIN SalesOrderDetail ON Product.ProductID = SalesOrderDetail.ProductID  WHERE SalesOrderDetail.Quantity > 10000;
SELECT ProductID FROM Product WHERE Class = 'H' AND Quantity = 1;
SELECT COUNT(*)  FROM Product  WHERE ProductLine = 'M';
SELECT SUM((p.ListPrice - p.StandardCost) * s.Quantity) as total_sales_profit FROM ShoppingCartItem s JOIN Product p ON s.ProductID = p.ProductID WHERE s.ShoppingCartItemID = 20621
SELECT Product.Name, Product.ListPrice  FROM Product  JOIN ProductCategory ON Product.ProductCategoryID = ProductCategory.ProductCategoryID  WHERE ProductClass = 'H'
SELECT ProductLine FROM Product WHERE FinishedGoodsFlag = 1 GROUP BY ProductLine ORDER BY COUNT(ProductID) DESC LIMIT 1;
SELECT ProductID, Rating, Comments  FROM ProductReview  WHERE ReviewerName LIKE 'J%'
SELECT      P.Name AS ProductName,      P.ProductLine,      PR.Rating,     P.ListPrice  FROM      Product P  JOIN      ProductReview PR ON P.ProductID = PR.ProductID  WHERE      PR.Rating = (SELECT MIN(RATING) FROM ProductReview)
SELECT ProductID, AVG(ListPrice - StandardCost) AS Profit FROM Product JOIN ProductCostHistory ON Product.ProductID = ProductCostHistory.ProductID WHERE Profit > 100 GROUP BY ProductID;
SELECT Product.Name, ProductReview.ReviewerName, ProductReview.Rating, ProductReview.Comments  FROM Product  JOIN ProductSubcategory ON Product.ProductSubcategoryID = ProductSubcategory.ProductSubcategoryID  JOIN ProductCategory ON ProductCategory.ProductCategoryID = ProductSubcategory.ProductCategoryID  JOIN ProductReview ON Product.ProductID = ProductReview.ProductID  WHERE ProductCategory.Name = 'Road'  ORDER BY Product.Name;
SELECT COUNT(ProductReviewID), AVG(Rating) FROM ProductReview WHERE ProductID  IN (     SELECT ProductID      FROM Product      WHERE Name = 'HL Mountain Pedal' );
SELECT      p.Name,     poh.RevisionNumber,     poh.Status,     pd.ProductID FROM      PurchaseOrderHeader poh JOIN      PurchaseOrderDetail pdo ON poh.PurchaseOrderID = pdo.PurchaseOrderID JOIN      Product p ON pdo.ProductID = p.ProductID WHERE      pdo.RejectedQty = 1;
SELECT      p.Name,      sdt.UnitPrice  FROM      Product AS p  JOIN      SalesOrderDetail AS sdt ON p.ProductID = sdt.ProductID  WHERE      sdt.RejectedQty = 0  ORDER BY      sdt.LineTotal DESC  LIMIT 1;
SELECT Product.Name, Product.ProductLine  FROM Product  JOIN PurchaseOrderDetail ON Product.ProductID = PurchaseOrderDetail.ProductID  WHERE PurchaseOrderDetail.OrderQty >= 5000;
SELECT SUM(SalesOrderDetail.Quantity) AS TotalOrderedQuantity FROM SalesOrderDetail JOIN Product ON Product.ProductID = SalesOrderDetail.ProductID WHERE Product.ProductLine = 'T'
SELECT      p.Name, so.LineTotal FROM      Product AS p JOIN      SalesOrderDetail AS so ON p.ProductID = so.ProductID WHERE      p.Class = 'L' ORDER BY      so.LineTotal DESC LIMIT 1;
SELECT p.Name FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID WHERE (pv.LastReceiptCost - p.StandardPrice) = (     SELECT MAX(profit)      FROM (         SELECT pv.LastReceiptCost - p.StandardPrice AS profit         FROM Product p         JOIN ProductVendor pv ON p.ProductID = pv.ProductID     ) subquery )
SELECT ProductID, Name FROM Product WHERE MinOrderQty >= 100 ORDER BY Name DESC;
SELECT      p.Name,      (p.ListPrice - p.StandardCost) AS Profit FROM      Product p JOIN      ProductReview pr ON p.ProductID = pr.ProductID WHERE      pr.Rating = 5 ORDER BY      p.ListPrice DESC LIMIT 1;
SELECT SUM((p.ListPrice - p.StandardCost) * so.quantity) AS total_profit FROM Product p JOIN SalesOrderDetail so ON p.ProductID = so.ProductID WHERE p.ProductID = 827;
SELECT      FromCurrencyCode + '/' + ToCurrencyCode AS CurrencyPair,     AVG(AverageRate) AS AverageExchangeRate FROM      CurrencyRate GROUP BY      FromCurrencyCode,      ToCurrencyCode ORDER BY      AverageExchangeRate DESC LIMIT 1;
SELECT COUNT(*)  FROM SalesOrderDetail  WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM Product)
SELECT      s.TerritoryID,      SUM(s.TotalDue) as LastYearSales  FROM      SalesOrderHeader s  JOIN      SalesTerritory st ON s.TerritoryID = st.TerritoryID  WHERE      st.CountryRegionCode = 'US'      AND (st.Name LIKE '%Northwest%' OR st.Name LIKE '%Southeast%')       AND YEAR(s.OrderDate) = YEAR(DATEADD(year, -1, GETDATE()))  GROUP BY      s.TerritoryID  ORDER BY      LastYearSales DESC  LIMIT 1;
SELECT      d.Owner AS 'Full Name' FROM      Document d WHERE      d.Status = 2 AND      d.DocumentLevel = '1';
SELECT c.CustomerID  FROM Customer c JOIN SalesOrderHeader so ON c.CustomerID = so.CustomerID WHERE so.SubTotal = (SELECT MAX(SubTotal) FROM SalesOrderHeader) AND so.SalesPersonID = (SELECT TOP 1 sp.BusinessEntityID FROM SalesPerson sp ORDER BY sp.SalesQuota DESC)
SELECT SUM(T1.UnitPrice * T2.OrderQty) AS TotalPrice FROM SalesOrderDetail AS T1 JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.SalesOrderID = 46625  AND T2.ProductID = 716 AND T2.SellStartDate <= '2003-02-19' AND T2.SellEndDate >= '2003-02-19' AND T2.ListPrice BETWEEN (T2.ListPrice * (1 - 0.11)) AND (T2.ListPrice * (1 - 0.14));
SELECT COUNT(*)  FROM Product  WHERE ReorderPoint < 600  AND MakeFlag = 1  AND DaysToManufacture = 1  AND BOMLevel = 4;
SELECT MAX(SalesPerson.Bonus)  FROM SalesPerson  JOIN SalesTerritory ON SalesPerson.TerritoryID = SalesTerritory.TerritoryID  WHERE SalesTerritory.Name = 'Canada';
SELECT Product.Name FROM Product JOIN ProductReview ON Product.ProductID = ProductReview.ProductID WHERE ProductReview.Rating = 1;
SELECT COUNT(*)  FROM Employee  JOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID  WHERE EmployeeDepartmentHistory.DepartmentID = (SELECT DepartmentID FROM Department WHERE Name = 'Production')  AND EmployeeDepartmentHistory.StartDate BETWEEN '2009-01-01' AND '2009-12-31';
SELECT      CONCAT(FirstName, ' ', MiddleName, ' ', LastName) AS Full_Name,     JobTitle FROM      Employee WHERE      Gender = 'F'     AND Status = 'S' ORDER BY      Rate DESC LIMIT 1;
SELECT      CONCAT(FirstName, ' ', MiddleName, ' ', LastName) AS Full_Name,     HiredDate FROM      Person WHERE      Title = 'Vice President of Engineering';
SELECT COUNT(*)  FROM Employee  WHERE CurrentFlag = 1 AND Rate <= 30;
SELECT D.Name FROM Department D JOIN EmployeeDepartmentHistory EDH ON D.DepartmentID = EDH.DepartmentID WHERE EDH.StartDate = (SELECT MAX(StartDate) FROM EmployeeDepartmentHistory WHERE DepartmentID = D.DepartmentID)
SELECT      P.FirstName,      P.LastName,      P.Gender  FROM      Person AS P  JOIN      BusinessEntityContact AS BEC ON P.BusinessEntityID = BEC.PersonID  WHERE      BEC.ContactTypeID = (SELECT ContactTypeID FROM ContactType WHERE Name = 'SC')  ORDER BY      P.HireDate ASC  LIMIT 1;
SELECT      MIN(SickLeaveHours) AS least_sick_leave_hours,     CASE          WHEN PayFrequency = 1 THEN 'Monthly'         WHEN PayFrequency = 2 THEN 'Biweekly'         ELSE 'Unknown'     END AS pay_frequency FROM      Employee WHERE      (SELECT MIN(SickLeaveHours) FROM Employee) = Employee.SickLeaveHours;
SELECT JobTitle FROM Employee WHERE Rate = (SELECT MIN(Rate) FROM Employee);
SELECT COUNT(*)  FROM Employee  JOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID  JOIN Department ON Department.DepartmentID = EmployeeDepartmentHistory.DepartmentID  WHERE Department.Name = 'Finance';
SELECT      (MAX(ListPrice) - MAX(StandardCost)) AS max_profit,     (MIN(ListPrice) - MAX(StandardCost)) AS min_profit FROM      Product WHERE      ListPrice <> 0 AND      EXISTS (         SELECT              1          FROM              BillOfMaterials          WHERE              ProductID = Product.ProductID     )
SELECT      Vendor.Name AS VendorName,      (SUM(p.LastReceiptCost) - SUM(p.StandardPrice)) AS ProfitOnNet FROM      Vendor JOIN      ProductVendor p ON Vendor.BusinessEntityID = p.BusinessEntityID JOIN      CreditCard c ON Vendor.CreditCardID = c.CreditCardID WHERE      c.CreditRating = 3 GROUP BY      Vendor.BusinessEntityID, Vendor.Name HAVING      SUM(p.LastReceiptCost) - SUM(p.StandardPrice) >      (         SELECT AVG(TotalValue)          FROM              (                 SELECT                      Vendor.BusinessEntityID,                     SUM(p.LastReceiptCost) - SUM(p.StandardPrice) AS TotalValue                 FROM                      Vendor                 JOIN                      ProductVendor p ON Vendor.BusinessEntityID = p.BusinessEntityID                 WHERE                       c.CreditRating = 3                 GROUP BY                      Vendor.BusinessEntityID             ) AS subquery     ) ORDER BY      ProfitOnNet DESC;
SELECT COUNT(*)  FROM Address  WHERE AddressLine2 IS NOT NULL;
SELECT T1.PostalCode  FROM Address AS T1  JOIN Customer AS T2 ON T1.AddressID = T2.AccountNumber  WHERE YEAR(T1.ModifiedDate) = 2022 AND MONTH(T1.ModifiedDate) = 10 ORDER BY T1.ModifiedDate DESC LIMIT 1;
SELECT MAX(EndDate - StartDate) AS longestassemblyitemduration FROM WorkOrderRouting WHERE ProductID IN (     SELECT ProductID     FROM Product     WHERE Name LIKE '%bicycle%' );
SELECT COUNT(*)  FROM BillOfMaterials  JOIN Product ON BillOfMaterials.ProductID = Product.ProductID  WHERE Product.ProductLine = 'Bicycles' AND EndDate IS NULL;
SELECT UnitMeasureCode  FROM BillOfMaterials  WHERE PerAssemblyQty = (SELECT MAX(PerAssemblyQty) FROM BillOfMaterials);
SELECT COUNT(*)  FROM Document  WHERE DocumentSummary IS NULL;
SELECT Title  FROM Document  WHERE Status = 1;
SELECT DISTINCT e.JobTitle FROM Employee e JOIN Document d ON e.BusinessEntityID = d.Owner WHERE d.Status = 2;
SELECT      PayFrequency FROM      Employee WHERE      BirthDate = (SELECT MIN(BirthDate) FROM Employee)     AND (PayFrequency = 1 OR PayFrequency = 2);
SELECT COUNT(*)  FROM Employee  WHERE MaritalStatus = 'M' AND PayFrequency = 2;
SELECT Rate  FROM Employee  WHERE HireDate = (SELECT MAX(HireDate) FROM Employee);
SELECT COUNT(*)  FROM Employee  WHERE Rate > 40 AND Gender = 'M';
SELECT MAX(T2.Rate)  FROM Employee AS T1  JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID  WHERE T1.SalariedFlag = 1;
SELECT VacationHours FROM Employee WHERE PayFrequency = 2 ORDER BY VacationHours DESC LIMIT 1;
SELECT T1.PayRate FROM Employee AS T1 WHERE T1.VacationHours = (SELECT MAX(VacationHours) FROM Employee)
SELECT COUNT(*)  FROM Employee  WHERE Rate > 35 AND SickLeaveHours > 10;
SELECT COUNT(*)  FROM Employee  WHERE CurrentFlag = 1 AND Gender = 'M' AND PayFrequency = 2;
SELECT COUNT(*)  FROM Person  WHERE PersonType = 'SP' AND Gender = 'M';
SELECT JobTitle FROM Employee WHERE (DATEDIFF(YEAR, BirthDate, GETDATE())) = (     SELECT MAX(DATEDIFF(YEAR, BirthDate, GETDATE()))     FROM Employee );
SELECT      T1.NameStyle  FROM      Employee AS T1  JOIN      (SELECT TOP 1 BusinessEntityID, Rate       FROM EmployeePayHistory       ORDER BY Rate ASC) AS T2  ON      T1.BusinessEntityID = T2.BusinessEntityID;
SELECT COUNT(*)  FROM Employee  WHERE MaritalStatus = 'M' AND NameStyle = '0';
SELECT COUNT(*)  FROM Employee  WHERE SickLeaveHours > 10 AND Employee.BusinessEntityID = Person.BusinessEntityID  AND Person.EmailPromotion IN (1, 2);
SELECT      p.FirstName, p.MiddleName, p.LastName  FROM      Person p  JOIN      Employee e ON p.BusinessEntityID = e.BusinessEntityID  WHERE      e.VacationHours > 20 AND p.EmailPromotion IN (1, 2);
SELECT      bci.EmailAddress  FROM      Person p JOIN      BusinessEntityContact bce ON p.BusinessEntityID = bce.BusinessEntityID JOIN      BusinessEntityContact bci ON bce.PersonID = bci.PersonID JOIN      Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE      e.JobTitle = 'Sales Person' AND p.PersonType = 'SP' ORDER BY      e.BirthDate ASC LIMIT 1;
SELECT FirstName  FROM Employee  WHERE Gender = 'M' AND NameStyle = 0;
SELECT COUNT(*)  FROM Employee  WHERE CurrentFlag = 1 AND Title = 'Mr';
SELECT      FirstName, MiddleName, LastName, MaritalStatus, Max(Rate) as HighestPayRate FROM      Employee WHERE      MaritalStatus = 'M'
SELECT LastName.Suffix  FROM Person  JOIN BusinessEntityContact ON Person.BusinessEntityID = BusinessEntityContact.BusinessEntityID  WHERE Person.PersonType = 'SC' AND BusinessEntityContact.ContactTypeID = (SELECT ContactTypeID FROM ContactType WHERE Name = 'Store Contact')  AND BusinessEntityContact.SickLeaveHours = (SELECT MAX(SickLeaveHours) FROM Employee);
SELECT COUNT(*)  FROM Employee  WHERE MaritalStatus = 'M' AND NameStyle = 1 AND PayFrequency IN (SELECT DISTINCT PayFrequency FROM Employee);
SELECT COUNT(*)  FROM Employee  WHERE CurrentFlag = 1 AND EmailPromotion = 0;
SELECT DISTINCT p.BusinessEntityID  FROM Person p JOIN BusinessEntityContact b ON p.BusinessEntityID = b.PersonID  WHERE p.PersonType = 'SC'
SELECT      AVG([VacationHours]) AS AverageVacationHours FROM      [Employee] WHERE      [PersonType] = 'EM' AND [Gender] = 'M';
SELECT      MAX((T1.Rate)) - (SELECT AVG(T1.Rate) FROM Employee AS T1 WHERE T1.MaritalStatus = 'M' AND T1.EmailPromotion = 1) AS PayRateDifference FROM      Employee AS T1 WHERE      T1.MaritalStatus = 'M' AND T1.EmailPromotion = 1;
SELECT      CAST(COUNT(CASE WHEN p.PersonType = 'SC' AND p.MaritalStatus = 'M' THEN p.BusinessEntityID ELSE NULL END) AS REAL) / COUNT(CASE WHEN p.MaritalStatus = 'M' THEN p.BusinessEntityID ELSE NULL END) AS Probability FROM      Person p WHERE      p.MaritalStatus = 'M' AND p.NameStyle = 0;
SELECT      (COUNT(CASE WHEN VacationHours > 20 THEN BusinessEntityID END)       OVER ()      / COUNT(CASE WHEN CurrentFlag = 1 AND SickLeaveHours > 10 THEN BusinessEntityID END)       OVER ()) * 100 AS Percentage FROM      Employee;
SELECT AVG(lastreceiptcost)  FROM ProductVendor  WHERE AverageLeadTime = 60;
SELECT      AVG(ActualCost) AS AverageCost FROM      TransactionHistory WHERE      TransactionType = 'P' AND      TransactionDate BETWEEN '2012-01-01' AND '2012-06-30'
SELECT      (COUNT(CASE WHEN e.Gender = 'M' AND YEAR(e.HireDate) = 2009 AND e.MaritalStatus = 'M' THEN e.BusinessEntityID ELSE NULL END)      / COUNT(CASE WHEN e.Gender = 'M' AND YEAR(e.HireDate) = 2009 THEN e.BusinessEntityID ELSE NULL END)) * 100 AS Percentage FROM      Person.employee e;
SELECT      (COUNT(CASE WHEN P.FirstName = 'Mary' AND P.EmailPromotion = 2 THEN P.BusinessEntityID END)      / COUNT(P.BusinessEntityID)) * 100 AS Percentage FROM      Person P WHERE      P.PersonType = 'SC';
SELECT ProductID, (StandardPrice - LastReceiptCost) AS Profit  FROM ProductVendor  WHERE (StandardPrice - LastReceiptCost) < 0;
SELECT AVG(TotalDue)  FROM SalesOrderHeader  WHERE Status = 2;
SELECT      (COUNT(CASE WHEN OrderQty < 3 AND UnitPriceDiscount = 0.2 THEN 1 END)      / CAST(TOTAL COUNT(SalesOrderID) AS FLOAT)) * 100 AS Percentage FROM      SalesOrderDetail;
SELECT      s.BusinessEntityID  FROM      SalesPerson s  JOIN      SalesOrderHeader soh ON s.BusinessEntityID = soh.SalesPersonID  JOIN      SalesOrderDetail sod ON soh.SalesOrderID = sod.SalesOrderID  WHERE      (DIVIDE(SUBTRACT(sod.Quantity * sod.UnitPrice, sods.Quantity * sods.UnitPrice), sods.Quantity * sods.UnitPrice) > 0.6)      AND s.SalesQuota > 3000;
SELECT COUNT(*)  FROM BusinessEntityAddress  WHERE AddressTypeID = 2 OR AddressTypeID = 5;
SELECT CustomerID FROM SalesOrderHeader WHERE OrderQty = 32 AND UnitPrice = 35;
SELECT T1.Name  FROM Company AS T1  JOIN CreditCard AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID  WHERE T2.CardType = 'ColonialVoice' AND T2.ExpMonth = 3 AND T2.ExpYear = 2005;
SELECT v.CreditRating  FROM Vendor v  JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID  WHERE pv.AverageLeadTime = 16 AND pv.StandardPrice = 18.99 AND pv.LastReceiptDate >= '2011-08-17 00:00:00' AND pv.LastReceiptDate < '2011-08-18 00:00:00';
SELECT COUNT(*)  FROM Product  WHERE ProductCategoryID IN (SELECT ProductCategoryID FROM ProductCategory WHERE Name = 'Accessories')  OR ProductCategoryID IN (SELECT ProductCategoryID FROM ProductCategory WHERE Name = 'Components')
SELECT JobTitle FROM Employee WHERE BusinessEntityID = (     SELECT BusinessEntityID     FROM Employee     WHERE DepartmentID = 12     ORDER BY StartDate DESC     LIMIT 1 );
SELECT FirstName, LastName  FROM Employee  WHERE MaritalStatus = 'S' AND Gender = 'M' AND JobTitle = 'Production Supervisor';
SELECT COUNT(*)  FROM Product  WHERE ProductLine = 'Subassembly'
SELECT SUM(ProductID)  FROM WorkOrder  JOIN WorkOrderRouting ON WorkOrder.WorkOrderID = WorkOrderRouting.WorkOrderID  JOIN ScrapReason ON WorkOrderRouting.ScrapReasonID = ScrapReason.ScrapReasonID  WHERE ScrapReason.Name = 'Trim length too long';
SELECT SUM(purchased_product_quantity) AS TotalQuantity FROM  (     SELECT ProductID, SUM(StockedQty) AS purchased_product_quantity     FROM PurchaseOrderDetail     WHERE PurchaseOrderDetail.EmployeeID = 257 AND PurchaseOrderDetail.Status = 3     GROUP BY ProductID ) AS Subquery JOIN Product ON Product.ProductID = Subquery.ProductID
SELECT COUNT(DISTINCT ProductID)  FROM SalesOrderDetail WHERE Description = 'No Discount' AND OrderQty > 2;
SELECT TransactionType FROM Product p JOIN ProductInventory pi ON p.ProductID = pi.ProductID WHERE p.Color = 'Yellow' AND pi.SafetyStockLevel >= 500
SELECT      s.Name  FROM      Product p  JOIN      ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID  JOIN      ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID  WHERE      p.Color = 'gray' AND      p.SafetyStockLevel = (SELECT MIN(SafetyStockLevel) FROM Product WHERE Color = 'gray')
SELECT EndDate, Weight  FROM ProductInventory  WHERE WeightUnitMeasureCode = 'G'  ORDER BY Weight DESC  LIMIT 1;
SELECT      (SUM(CASE WHEN Name IN ('Drill size too small', 'Drill size too large') THEN ScrapedQty ELSE 0 END) / CAST(TOTAL AS FLOAT)) * 100 AS PercentageOfProductsRejectedByDrillSize FROM      SalesOrderDetail JOIN      WorkOrder  ON      SalesOrderDetail.ProductID = WorkOrder.ProductID WHERE      WorkOrder.ScrappedQty > 0;
SELECT      AVG(TotalQuantity) AS AverageOrderedQuantity FROM      (     SELECT          SUM(OrderQty) AS TotalQuantity     FROM          SalesOrderHeader     JOIN          PurchaseOrderDetail ON SalesOrderHeader.SalesOrderID = PurchaseOrderDetail.SalesOrderID     WHERE          PurchaseOrderDetail.ShipMethodID IN (             SELECT                  BusinessEntityID              FROM                  ShipMethod              WHERE                  Name = 'Cargo Transport 5'         )     GROUP BY          SalesOrderHeader.SalesOrderID     ) AS OrderQuantities;
SELECT      c.Name FROM      CountryRegion c JOIN      SalesTerritory st ON c.CountryRegionCode = st.CountryRegionCode WHERE      (STUFF((SELECT ', ' + CAST((SALES.YTD - SALES.LastYear) / SALES.LastYear * 100 AS VARCHAR(10))              FROM                  (SELECT                      SALES.TerritoryID,                      (SALES.SalesYTD - SALES.SalesLastYear) / SALES.SalesLastYear * 100 AS YTD_Percent_Increase                 FROM                      SalesTerritory SALES                 WHERE                      SALES.ModifiedDate IN (                         SELECT                              MAX(SALES.ModifiedDate)                          FROM                              SalesTerritory AS LAST_YEAR_SALES                          WHERE                              LAST_YEAR_SALES.CountryRegionCode = c.CountryRegionCode AND                              LAST_YEAR_SALES.TerritoryID = ST.TerritoryID                     )                 ) INCCREASED_SALES FOR XML PATH('')), 1, 2, '') IN ('100%')) = '100%'
SELECT COUNT(*)  FROM Employee  WHERE PayFrequency = 1 AND Rate > 50;
SELECT FirstName + ' ' + MiddleName + ' ' + LastName AS FullName FROM Person WHERE BusinessEntityID = (SELECT BusinessEntityID FROM BusinessEntity WHERE CompanyNumber = 1) AND PersonType = 'EM';
SELECT name  FROM Vendor  WHERE BusinessEntityID = 1492;
SELECT COUNT(*)  FROM Vendor  JOIN ProductVendor ON Vendor.BusinessEntityID = ProductVendor.BusinessEntityID  WHERE ProductVendor.MinOrderQty > 500 AND ProductVendor.MaxOrderQty < 15000;
SELECT DISTINCT d.Name  FROM Department d  WHERE d.GroupName = 'Executive General and Administration';
SELECT LastName FROM Person WHERE PersonType = 'EM' AND MiddleName LIKE 'C%';
SELECT COUNT(DISTINCT v.BusinessEntityID)  FROM Vendor AS v JOIN ProductVendor AS pv ON v.BusinessEntityID = pv.BusinessEntityID WHERE pv.AverageLeadTime = 25 AND pv.OnOrderQty > 0;
SELECT TOP 3 p.ProductNumber  FROM Product p  ORDER BY p.StandardCost ASC;
SELECT COUNT(*)  FROM Product  WHERE Color = 'black' AND FinishedGoodsFlag = 0;
SELECT      e.BusinessEntityID,     e.JobTitle,     MAX(e.SickLeaveHours) AS UnusedSickLeave FROM      Employee e GROUP BY      e.BusinessEntityID,     e.JobTitle ORDER BY      UnusedSickLeave DESC LIMIT 3;
SELECT AddressLine1, AddressLine2  FROM Address  WHERE AddressID = 11906;
SELECT      SUM(T1.LastReceiptCost) - SUM(T1.StandardPrice) AS NetProfit  FROM      Vendor T1  WHERE      T1.BusinessEntityID = 1580;
SELECT SUM(T1.StandardPrice * T2.Quantity) AS SalesRevenue FROM Product AS T1  JOIN SalesOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductNumber = '740';
SELECT ReviewerName  FROM ProductReview  WHERE Rating = 5;
SELECT BusinessEntityID  FROM Vendor  WHERE CreditRating = 5;
SELECT FirstName, BirthDate  FROM Person  WHERE BusinessEntityID = 18;
SELECT ct.Name AS Job FROM Person p JOIN BusinessEntityContact b ON p.BusinessEntityID = b.BusinessEntityID JOIN ContactType ct ON b.ContactTypeID = ct.ContactTypeID WHERE p.BusinessEntityID = 18;
SELECT BusinessEntityID  FROM PhoneNumberType  WHERE name = 'cell';
SELECT CurrencyCode  FROM CountryRegionCurrency  JOIN CountryRegion ON CountryRegion.CountryRegionCode = CountryRegionCurrency.CountryRegionCode  WHERE CountryRegion.Name = 'Brazil';
SELECT COUNT(*)  FROM Employee  JOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID  JOIN Department ON Department.DepartmentID = EmployeeDepartmentHistory.DepartmentID  WHERE Department.Name = 'Finance';
SELECT      v.Name AS VendorName,      pvc.AverageLeadTime AS LeadTime  FROM      Vendor v      JOIN ProductVendor pvc ON v.BusinessEntityID = pvc.BusinessEntityID  WHERE      v.BusinessEntityID = 1496;
SELECT      CASE          WHEN city = 'Bothell' THEN city         ELSE NULL     END AS City,     COUNT(*) AS AccountCount,     State FROM      Customer WHERE      State IN (         SELECT              DISTINCT StateProvinceID          FROM              StateProvince         WHERE              Name IN ('Bothell', 'Kenmore')     ) GROUP BY      State;
SELECT pm.Name  FROM ProductModel pm  JOIN ProductModelProductDescriptionCulture pmcdc ON pm.ProductModelID = pmcdc.ProductModelID  JOIN Culture c ON pmcdc.CultureID = c.CultureID  WHERE c.Name = 'English' AND pm.SubcategoryID IN (     SELECT ProductSubcategoryID      FROM ProductSubcategory      WHERE CategoryID = (         SELECT ProductCategoryID          FROM ProductCategory          WHERE Name = 'Chromoly Steel'     ) );
SELECT COUNT(*) AS total_companies,        ST.Name AS geographical_location FROM SalesPerson SP JOIN SalesTerritory ST ON SP.TerritoryID = ST.TerritoryID WHERE SP.CommissionPct >= 0.018 GROUP BY ST.Name;
SELECT PhoneNumberType, COUNT(*) as Count  FROM PhoneNumberType  GROUP BY PhoneNumberType  ORDER BY Count DESC;
SELECT      ContactTypeID,     COUNT(*) as ContactCount FROM      BusinessEntityContact GROUP BY      ContactTypeID ORDER BY      ContactCount DESC LIMIT 1;
SELECT p.EmailAddress  FROM Person p  WHERE p.PersonType = 'SP';
SELECT JobTitle FROM Employee WHERE FirstName = 'Suchitra';
SELECT COUNT(*)  FROM Person  WHERE PersonType = 'EM' AND MaritalStatus = 's'
SELECT      (COUNT(CASE WHEN Culture.Name = 'English' THEN 1 END) -       COUNT(CASE WHEN Culture.Name = 'Arabic' THEN 1 END)) AS Language_Difference FROM      Culture;
SELECT AddressLine1  FROM BusinessEntity  JOIN Address ON BusinessEntity.BusinessEntityID = Address.BusinessEntityID  WHERE BusinessEntityID = 1;
SELECT BusinessEntityID  FROM Address  WHERE City = 'Duvall';
SELECT      (COUNT(CASE WHEN Culture.Name = 'Thai' THEN 1 END) * 100.0 / COUNT(Culture.Name)) AS ThaiPercentage FROM      Culture;
SELECT      (COUNT(CASE WHEN Gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_males FROM      Person WHERE      PersonType = 'EM';
SELECT      A.AddressLine1,     SP.Name AS StateProvinceName,     C.Name AS CountryName FROM      Address A JOIN      StateProvince SP ON A.StateProvinceID = SP.StateProvinceID JOIN      CountryRegion C ON SP.CountryRegionCode = C.CountryRegionCode WHERE      A.AddressLine1 = '15873' AND SP.IsOnlyStateProvinceFlag = '0'
SELECT      AddressLine1 + ' ' + AddressLine2 AS FullAddress FROM      BusinessEntityAddress WHERE      BusinessEntityID = '24';
SELECT ExpYear  FROM CreditCard  WHERE CreditCardID = 9648;
SELECT BusinessEntityID  FROM Person  WHERE FirstName = 'Emma' AND LastName = 'H Harris';
SELECT LocationID FROM Location WHERE Name = 'Debur and Polish';
SELECT DepartmentID FROM Department WHERE GroupName = 'Sales and Marketing';
SELECT      s.BusinessEntityID  FROM      SalesOrderHeader AS soh JOIN      SalesPerson AS sp ON soh.SalesPersonID = sp.BusinessEntityID WHERE      soh.TotalDue = 1635823.3967 AND YEAR(soh.OrderDate) = YEAR(CURRENT_DATE) - 1
SELECT StartTime  FROM Shift  WHERE ShiftID = 2;
SELECT      ContactType.Name  FROM      ContactType  WHERE      ContactType.ContactTypeID = 16;
SELECT MIN(ShipBase)  FROM ShipMethod  WHERE Name = 'OVERSEAS - DELUXE';
SELECT      c.Name FROM      Culture c WHERE      c.CultureID = 'fr';
SELECT CurrencyCode FROM Currency WHERE Name = 'Mauritius Rupee';
SELECT PhoneNumberType.PhoneNumberTypeID  FROM Person  JOIN BusinessEntityContact ON Person.BusinessEntityID = BusinessEntityContact.BusinessEntityID  JOIN EmailAddress ON BusinessEntityContact.BusinessEntityID = EmailAddress.BusinessEntityID  JOIN PhoneNumberType ON EmailAddress.EmailAddress LIKE CONCAT('%@%', PhoneNumberType.Name)  WHERE Person.Name = 'Cell';
SELECT      BirthDate FROM      Employee WHERE      JobTitle = 'Production Technician' AND HireDate = '2008-12-07' ORDER BY      BirthDate ASC LIMIT 1;
SELECT ProductModel.Name  FROM Product  JOIN ProductModelProductDescriptionCulture ON Product.ProductID = ProductModelProductDescriptionCulture.ProductModelID  JOIN ProductModel ON ProductModel.ProductModelID = ProductModelProductDescriptionCulture.ProductModelID  WHERE Product.ProductID = 793;
SELECT UnitMeasureCode  FROM Product  WHERE ProductID = 762;
SELECT      A.City, A.AddressLine1, A.AddressLine2 FROM      BusinessEntityAddress AS BEA JOIN      Address AS A ON BEA.AddressID = A.AddressID WHERE      BEA.BusinessEntityID = 4;
SELECT UnitMeasureCode  FROM BillOfMaterials  WHERE ProductID = (     SELECT ProductID      FROM BillOfMaterials      WHERE ComponentID = 494 AND EndDate IS NULL ) ;
SELECT COUNT(*)  FROM Document  WHERE JobTitle = 'Document Control Assistant'  AND DATE(BirthDate) = '1975-12-25'  AND DocumentSummary IS NULL;
SELECT p.ListPrice  FROM Product p  JOIN ProductListPriceHistory plph ON p.ProductID = plph.ProductID  WHERE plph.EndDate >= '2012-10' AND p.Profit = 21.9037;
SELECT LargePhotoSize  FROM Product  WHERE ProductID = 1;
SELECT COUNT(*)  FROM Person  WHERE Name = 'Catherine Ward'  AND LENGTH(PasswordHash) > 0;
SELECT `Rating` FROM `ProductReview` WHERE `ReviewerName` = 'Jill'  AND `ProductID`  IN (     SELECT `ProductID`     FROM `Product`     WHERE `Name` = 'HL Mountain Pedal' );
SELECT SUM(SUBTRACT(T1.LastReceiptCost, T1.StandardPrice)) AS Profit FROM ProductVendor AS T1  JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Freewheel'
SELECT      s.BusinessEntityID,     s.FirstName,     s.LastName,     sp.SalesQuota,     sp.Bonus FROM      Person s JOIN      SalesPerson sp ON s.BusinessEntityID = sp.BusinessEntityID WHERE      s.FirstName = 'Rachel' AND s.LastName = 'Valdez';
SELECT COUNT(DISTINCT T1.TaxType) FROM SalesTaxRate T1 JOIN StateProvince T2 ON T1.StateProvinceID = T2.StateProvinceID WHERE T2.Name = 'Quebec'
SELECT T3.EmailAddress FROM Person AS T1  INNER JOIN BusinessEntityContact AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID  INNER JOIN EmailAddress AS T3 ON T2.EmailAddressID = T3.EmailAddressID  WHERE T1.FirstName = 'Kevin' AND T1.LastName = 'A Wright';
SELECT COUNT(*)  FROM StateProvince  WHERE CountryRegionCode = 'FR' AND IsOnlyStateProvinceFlag = 1;
SELECT      TransactionType FROM      SalesOrderDetail WHERE      ProductID IN (         SELECT              ProductID         FROM              Product         WHERE              Name = 'HL Road Frame - Black, 48'     ) AND     TransactionDate = '2012-12-13'
SELECT      TransactionType FROM      SalesOrderDetail WHERE      ProductID IN (         SELECT              ProductID         FROM              Product         WHERE              Name = 'LL Road Handlebars'     ) AND      YEAR(TransactionDate) = 2012 AND MONTH(TransactionDate) = 11 AND DAY(TransactionDate) = 3;
SELECT `CreditRating`  FROM `Vendor`  WHERE `rowguid` = '33671A4E-DF2B-4879-807B-E3F930DD5C0C'
SELECT      Vendor.PreferredVendorStatus  FROM      Vendor  WHERE      Vendor.rowguid = '684F328D-C185-43B9-AF9A-37ACC680D2AF';
SELECT      v.ActiveFlag  FROM      Vendor v  JOIN      Customer c ON v.BusinessEntityID = c.VendorID  WHERE      c.BusinessEntityID = 2054;
SELECT PhoneNumber.* FROM Person INNER JOIN PersonContactType ON Person.PersonID = PersonContactType.PersonID INNER JOIN PhoneNumberType ON PersonContactType.ContactTypeID = PhoneNumberType.PhoneNumberTypeID INNER JOIN PhoneNumber ON PhoneNumber.PhoneNumberTypeID = PhoneNumberType.PhoneNumberTypeID WHERE Person.FirstName = 'Gerald'  AND Person.LastName = 'Patel';
SELECT PhoneNumberType.Name  FROM BusinessEntity  JOIN BusinessEntityPhone ON BusinessEntity.BusinessEntityID = BusinessEntityPhone.BusinessEntityID   JOIN PhoneNumberType ON BusinessEntityPhone.PhoneNumberTypeID = PhoneNumberType.PhoneNumberTypeID WHERE BusinessEntity.BusinessEntityID = 13626;
SELECT `JobTitle`  FROM `Employee`  WHERE `FirstName` = 'Lynn' AND `LastName` = 'Tsoflias';
SELECT COUNT(*)  FROM ProductCategory  JOIN ProductSubcategory  ON ProductCategory.ProductCategoryID = ProductSubcategory.ProductCategoryID  WHERE ProductCategory.ProductCategoryID = 1;
SELECT      (COUNT(CASE WHEN DocumentSummary IS NULL THEN 1 END) * 100.0 / COUNT(*)) as PercentagePrivateDocuments FROM      Document WHERE      JobTitle = 'Document Control Assistant' AND      HireDate = '2009-01-22';
SELECT      (p.LastReceiptCost - p.StandardPrice) / p.StandardPrice AS profit_ratio FROM      Product p WHERE      p.Name = 'HL Grip Tape';
SELECT      COUNT(CASE WHEN PhoneNumberTypeID = 1 THEN 1 ELSE NULL END) * 100.0 / COUNT(*) AS CellPhonePercentage FROM      PhoneNumberType;
SELECT BillOfMaterialsID FROM BillOfMaterials WHERE UnitMeasureCode = 'EA' AND BOMLevel = 2 AND PerAssemblyQty > 10;
SELECT COUNT(*)  FROM WorkOrderRouting  WHERE ActualResourceHrs = 2;
SELECT StockedQty  FROM WorkOrder  WHERE LocationID = 40;
SELECT      SUM(PerAssemblyQty) AS TotalPerAssemblyQuantity,     UnitMeasureCode FROM      WorkOrderRouting WHERE      UnitMeasureCode IN ('EA', 'IN', 'OZ') GROUP BY      UnitMeasureCode
SELECT ProductID FROM Product WHERE ProductID NOT IN (     SELECT ProductID     FROM WorkOrder )
SELECT ProductName FROM Product JOIN SalesOrderDetail ON Product.ProductID = SalesOrderDetail.ProductID WHERE TransactionType = 'P'
SELECT FirstName, MiddleName, LastName  FROM Person  WHERE JobTitle = 'Accountant';
SELECT JobTitle  FROM Employee  WHERE FirstName = 'Ken' AND LastName = 'J Sánchez';
SELECT COUNT(*)  FROM Employee  WHERE Gender = 'M' AND EmailPromotion = 0;
SELECT      s.BusinessEntityID,     p.FirstName + ' ' + p.LastName AS TopSalesPersonName,     CAST(SUM(s.SalesYTD) AS FLOAT) / SUM(s.SalesQuota) * 100 AS PercentageAchievement FROM      SalesPerson s JOIN      Person p ON s.BusinessEntityID = p.BusinessEntityID WHERE      YEAR(s.QuotaDate) = 2013 GROUP BY      s.BusinessEntityID,     p.FirstName,     p.LastName HAVING      MAX(CAST(SUM(s.SalesYTD) AS FLOAT) / SUM(s.SalesQuota)) =      (SELECT MAX(CAST(SUM(sales.SalesYTD) AS FLOAT) / SUM(sales.SalesQuota) * 100)      FROM           SalesPerson sales      WHERE           YEAR(sales.QuotaDate) = 2013) ORDER BY      PercentageAchievement DESC LIMIT 1;
SELECT COUNT(*)  FROM Person  WHERE PersonType = 'EM' AND MaritalStatus = 'M'
SELECT COUNT(*)  FROM Person  WHERE JobTitle LIKE 'Production Technician%' AND MaritalStatus = 'S' AND PersonType = 'VC';
SELECT SUM(Employee.SickLeaveHours)  FROM Employee  WHERE Employee.EmailPromotion = 0;
SELECT *  FROM Person  WHERE PersonType = 'SP' AND YEAR(HireDate) < 2010;
SELECT      s.Name AS SalesPersonName,     s.SalesQuota AS ProjectedYearlySalesQuota FROM      SalesPerson s WHERE      s.PersonType = 'SP' AND YEAR(s.SalesQuota) = 2011 ORDER BY      s.SalesQuota DESC LIMIT 1;
SELECT COUNT(*)  FROM Person  WHERE FirstName = 'Alex' AND MaritalStatus = 'S' AND OrganizationLevel = 1;
SELECT AVG(Employee.VacationHours)  FROM Person AS P JOIN Employee AS E ON P.BusinessEntityID = E.BusinessEntityID WHERE P.PersonType = 'SC'
SELECT p.LastName, pe.JobTitle  FROM Document d  JOIN BusinessEntity b ON d.Owner = b.BusinessEntityID  JOIN Person p ON b.BusinessEntityID = p.BusinessEntityID  JOIN Person p2 ON d.Title = CONCAT('Crank Arm and Tire Maintenance', ' ', p2.FirstName, ' ', p2.LastName)  JOIN Person pe ON p2.BusinessEntityID = pe.BusinessEntityID  WHERE d.Title LIKE '%Crank Arm and Tire Maintenance%';
SELECT COUNT(*) AS num_employees, OrganizationLevel  FROM Employee WHERE Suffix IS NULL;
SELECT      s.BusinessEntityID  FROM      SalesPerson s  JOIN      SalesPersonQuotaHistory spq ON s.BusinessEntityID = spq.BusinessEntityID  WHERE      spq.SalesQuota > (SELECT SUM(SalesYTD) FROM SalesOrderHeader WHERE YEAR(OrderDate) = 2013 AND SalesPersonID = s.BusinessEntityID)      AND spq.Year = 2013      AND s.TerritoryID = 1;
SELECT LastName  FROM Employee  WHERE BusinessEntityID IN (     SELECT BusinessEntityID      FROM JobCandidate      WHERE ModifiedDate = (SELECT MAX(ModifiedDate) FROM JobCandidate) );
SELECT e.EmailAddress  FROM Employee e  WHERE e.Gender = 'F' AND e.MaritalStatus = 'S';
SELECT Product.Color FROM Product JOIN ProductReview ON Product.ProductID = ProductReview.ProductID;
SELECT      SUM(CASE WHEN year(QuotaDate) = 2013 THEN SalesQuota ELSE 0 END) AS ProjectedSalesQuota2013,     SalesYTD FROM      SalesPerson WHERE      BusinessEntityID = 275;
SELECT BusinessEntityID  FROM SalesPerson  WHERE year(QuotaDate) = 2013 AND SalesQuota > SalesYTD;
SELECT      (COUNT(CASE WHEN Gender = 'F' THEN 1 ELSE NULL END)       / CAST(COUNT(*) AS REAL)) * 100 AS PercentageOfFemaleEmployees FROM      Person WHERE      EmailPromotion = 1;
SELECT      COUNT(CASE WHEN MaritalStatus = 'M' AND PersonType = 'EM') AS MarriedNonSales,     COUNT(CASE WHEN MaritalStatus = 'S' AND PersonType = 'EM') AS SingleNonSales FROM Person;
SELECT      SUM(Bonus) AS TotalBonus,     ((SUM(Bonus) * 100) / SUM(SalesQuota)) AS Percentage FROM      SalesPerson sp JOIN      SalesPersonQuotaHistory spqh ON sp.BusinessEntityID = spqh.BusinessEntityID WHERE      YEAR(spqh.QuotaDate) = 2013;
SELECT COUNT(*) AS total_vista_credit_cards FROM CreditCard WHERE CardType = 'Vista';
SELECT Name FROM Product WHERE ProductID = 475;
SELECT COUNT(*)  FROM Employee  WHERE BirthDate < '1980-01-01' AND MaritalStatus IN ('S', NULL);
SELECT Store.Name FROM Store JOIN SalesPerson ON Store.SalesPersonID = SalesPerson.BusinessEntityID WHERE SalesPerson.BusinessEntityID = '277';
SELECT COUNT(*)  FROM SalesOrderDetail  WHERE ProductID = '989'  AND TransactionDate BETWEEN '2013-08-01' AND '2013-08-30'  AND TransactionType = 'S';
SELECT      CreditCardID  FROM      CreditCard  WHERE      ExpYear <= 2007;
SELECT e.Rate  FROM Employee e  WHERE (YEAR(CURRENT_DATE) - YEAR(e.BirthDate)) - (MONTH(CURRENT_DATE) - MONTH(e.HireDate)) / 12 = 20;
SELECT T2.Name  FROM SalesPerson AS T1  JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID  WHERE T1.BusinessEntityID = '277';
SELECT FirstName + MiddleName + LastName AS Full_Name  FROM Employee  WHERE JobTitle = 'Vice President of Production';
SELECT COUNT(*)  FROM Employee  JOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID  JOIN Department ON Department.DepartmentID = EmployeeDepartmentHistory.DepartmentID  WHERE Department.Name = 'Information Service'  AND EmployeeDepartmentHistory.ShiftID = (SELECT ShiftID FROM Shift WHERE Name = 'Evening');
SELECT PurchaseOrderID  FROM Vendor  WHERE CreditRating = 5;
SELECT      PhoneNumberType.Name  FROM      BusinessEntity  JOIN      BusinessEntityAddress ON BusinessEntity.BusinessEntityID = BusinessEntityAddress.BusinessEntityID  JOIN      Address ON BusinessEntityAddress.AddressID = Address.AddressID  JOIN      AddressType ON BusinessEntityAddress.AddressTypeID = AddressType.AddressTypeID  JOIN      PhoneNumberType ON Address.PhoneNumberTypeID = PhoneNumberType.PhoneNumberTypeID  WHERE      PhoneNumberType.Name LIKE '%Home%' OR PhoneNumberType.Name LIKE '%Residence%'     AND Address.PhoneNumber = '114-555-0100';
SELECT SUM(T2.freight) AS total_shipment_cost  FROM PurchaseOrderHeader AS T1  JOIN PurchaseOrderDetail AS T2 ON T1.PurchaseOrderID = T2.PurchaseOrderID  JOIN ShipMethod AS T3 ON T2.ShipMethodID = T3.ShipMethodID  WHERE T3.Name = 'Cargo Transport 5' AND T1.OrderDate = '2011-12-14';
SELECT COUNT(*)  FROM Person  JOIN BusinessEntity ON Person.BusinessEntityID = BusinessEntity.BusinessEntityID  JOIN SalesPerson ON BusinessEntity.BusinessEntityID = SalesPerson.BusinessEntityID  WHERE Person.FirstName = 'David'  AND Person.LastName = 'Campbell'  AND Person.PersonType = 'SP';
SELECT EmailAddress.EmailAddress  FROM BusinessEntity  JOIN BusinessEntityDepartment ON BusinessEntity.BusinessEntityID = BusinessEntityDepartment.BusinessEntityID  JOIN Department ON BusinessEntityDepartment.DepartmentID = Department.DepartmentID  JOIN ContactType ON BusinessEntity.ContactTypeID = ContactType.ContactTypeID  WHERE ContactType.Name = 'Facilities Manager';
SELECT COUNT(*)  FROM Person p  JOIN SalesPerson sp ON p.BusinessEntityID = sp.BusinessEntityID  JOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID  WHERE st.Name = 'Canada';
SELECT      SalesOrderID,     AddressLine1 + AddressLine2 + City AS ShippingAddress FROM      SalesOrderHeader WHERE      SalesOrderID = '43873';
SELECT FirstName  FROM Person  WHERE SickLeaveHours > 65;
SELECT COUNT(*)  FROM Employee  WHERE JobTitle = 'production technician' AND Rate < (SELECT AVG(Rate) FROM Employee WHERE JobTitle = 'production technician');
SELECT      (SUM(CASE WHEN c.Name = 'UK' THEN 1 ELSE 0 END) * 1.0) / COUNT(s.SalesOrderID) as sales_order_proportion FROM      SalesOrderHeader s JOIN      SalesTerritory st ON s.TerritoryID = st.TerritoryID JOIN      CountryRegion c ON st.CountryRegionCode = c.CountryRegionCode
SELECT ModifiedDate  FROM PhoneNumberType  WHERE Name = '1500 555-0143';
SELECT BusinessEntityID  FROM SalesPerson  WHERE SalesYTD = (SELECT MAX(SalesYTD) FROM SalesPerson);
SELECT v.BusinessEntityID, v.Name  FROM Vendor v  WHERE v.ActiveFlag = 1 AND v.PurchasingWebServiceURL IS NOT NULL;
SELECT      s.TerritoryID  FROM      SalesTerritory s  JOIN      Customer c ON s.TerritoryID = c.TerritoryID  WHERE      s.ModifiedDate BETWEEN '2014-09-12 00:00:00' AND '2014-09-12 23:59:59'  GROUP BY      s.TerritoryID  ORDER BY      COUNT(c.CustomerID) DESC  LIMIT 1;
SELECT SUM(TotalDue) as TotalCost  FROM SalesOrderHeader  WHERE OrderDate = '2013-05-29';
SELECT TOP 1 FirstName  FROM Person  JOIN BusinessEntityContact ON Person.BusinessEntityID = BusinessEntityContact.BusinessEntityID  WHERE Person.PersonType = 'VC'  GROUP BY FirstName  ORDER BY COUNT(*) DESC;
SELECT CONCAT(FirstName, MiddleName, LastName) AS FullName  FROM Employee  WHERE JobTitle = 'Production Technician - WC50';
SELECT COUNT(*)  FROM Product  WHERE Name = 'Minipump';
SELECT p.BusinessEntityID  FROM Person p  JOIN PersonCreditCard pc ON p.BusinessEntityID = pc.BusinessEntityID  JOIN CreditCard cc ON pc.CreditCardID = cc.CreditCardID  WHERE cc.CardNumber = '11113366963373' AND cc.CardType = 'Vista';
SELECT AddressLine1, AddressLine2  FROM BusinessEntity  JOIN BusinessEntityAddress ON BusinessEntity.BusinessEntityID = BusinessEntityAddress.BusinessEntityID   JOIN Address ON BusinessEntityAddress.AddressID = Address.AddressID   JOIN AddressType ON Address.AddressTypeID = AddressType.AddressTypeID   WHERE BusinessEntity.BusinessEntityID = 5555 AND AddressType.Name = 'Home';
SELECT Product.Name  FROM Product  JOIN SpecialOfferProduct ON Product.ProductID = SpecialOfferProduct.ProductID  JOIN SpecialOffer ON SpecialOfferProduct.SpecialOfferID = SpecialOffer.SpecialOfferID  WHERE SpecialOffer.Description = '15';
SELECT CreditCardID  FROM Person  JOIN PersonCreditCard ON Person.BusinessEntityID = PersonCreditCard.BusinessEntityID  WHERE FirstName = 'Michelle' AND LastName = 'Cox';
SELECT sr.Name  FROM SalesOrderHeader sh JOIN SalesOrderHeaderSalesReason sor ON sh.SalesOrderID = sor.SalesOrderID JOIN SalesReason sr ON sor.SalesReasonID = sr.SalesReasonID WHERE sh.SalesOrderNumber = '51883';
SELECT T1.CardNumber  FROM CreditCard AS T1  JOIN SalesOrderHeader AS T2  ON T1.CreditCardID = T2.CreditCardID  WHERE T2.SalesOrderID = '45793'
SELECT sp.BusinessEntityID, p.FirstName, p.LastName FROM SalesPerson sp JOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID JOIN CountryRegion cr ON st.CountryRegionCode = cr.CountryRegionCode WHERE cr.Name = 'Northwest' AND cr.CountryRegionCode = 'US';
SELECT      BusinessEntityID  FROM      Employee  WHERE      JobTitle = 'Production Technician'  ORDER BY      Rate DESC  LIMIT 1;
SELECT CONCAT(T2.FirstName, T2.MiddleName, T2.LastName) AS SalesPersonFullName FROM SalesTerritory AS T1 JOIN Employee AS T2 ON T1.TerritoryID = T2.BusinessEntityID WHERE T1.TerritoryID = 9;
SELECT Description FROM ProductDescription WHERE ProductDescriptionID = 762;
SELECT      AVG(CASE WHEN Gender = 'M' THEN Rate ELSE NULL END) AS AverageRate_Male,     AVG(CASE WHEN Gender = 'F' THEN Rate ELSE NULL END) AS AverageRate_Female,     (AVG(CASE WHEN Gender = 'F' THEN Rate ELSE NULL END) / AVG(CASE WHEN Gender = 'M' THEN Rate ELSE NULL END)) AS Difference FROM      EmployeePayHistory WHERE      Gender IN ('M', 'F');
SELECT      (SUM(CASE WHEN Shift = 'Night' THEN 1 ELSE 0 END) * 100.0 / COUNT(Shift)) AS Night_Shift_Percentage FROM      Shift;
SELECT COUNT(*)  FROM Employee  WHERE MaritalStatus = 'M' AND Gender = 'M' AND BirthDate <= '1959-12-31';
SELECT TOP 5      Product.SubcategoryName, Product.ListPrice FROM      Product JOIN      ProductSubcategory ON Product.ProductSubcategoryID = ProductSubcategory.ProductSubcategoryID WHERE      Product.ListPrice = (         SELECT MAX(ListPrice)         FROM Product     ) ORDER BY      Product.ListPrice DESC;
SELECT MIN([HireDate]) FROM [Employee] WHERE [JobTitle] = 'Accountant';
SELECT JobTitle, COUNT(*) as Hires FROM Employee WHERE HireDate BETWEEN '2007-01-01' AND '2007-12-31' GROUP BY JobTitle ORDER BY Hires DESC LIMIT 1;
SELECT      MAX(profit_on_net) AS max_profit_on_net,     VendorID FROM      (     SELECT          VendorID,         (LAST_RECEIPT_COST - StandardPrice) AS profit_on_net     FROM          ProductVendor     ORDER BY          StandardPrice DESC     LIMIT 1     ) AS subquery;
SELECT COUNT(DISTINCT e.DepartmentID) FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID WHERE (edh.StartDate BETWEEN '2011-01-01' AND '2012-12-31')  AND (edh.EndDate IS NULL OR edh.EndDate > '2012-12-31') AND e.FirstName = 'Sheela'  AND e.LastName = 'Ward';
SELECT      AVG(YEAR(CURRENT_DATE) - YEAR(T1.BirthDate)) AS AverageAge FROM      SalesPerson T1 WHERE      T1.ModifiedDate <= '2009-12-31';
SELECT      d.Name AS 'Department Name',     g.Name AS 'Group Name' FROM      Department d INNER JOIN      Employee e ON d.DepartmentID = e.DepartmentID INNER JOIN      EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID INNER JOIN      Department d2 ON edh.DepartmentID = d2.DepartmentID INNER JOIN      DepartmentGroup dg ON d2.GroupName = dg.GroupName WHERE      (         SELECT COUNT(edh.StartDate)          FROM              EmployeeDepartmentHistory edh          WHERE              edh.DepartmentID = d.DepartmentID     ) = (         SELECT MIN(count(DepartmentID))          FROM              Department d3             LEFT JOIN                  EmployeeDepartmentHistory edh3 ON d3.DepartmentID = edh3.DepartmentID         GROUP BY              d3.DepartmentID     ) ORDER BY      MAX(edh.EndDate) DESC;
SELECT      (2015 - YEAR(E.BirthDate)) AS Age,     E.HourlyRate FROM      Employee E JOIN      SalesPerson SP ON E.BusinessEntityID = SP.BusinessEntityID JOIN      SalesTerritory ST ON SP.TerritoryID = ST.TerritoryID WHERE      E.JobTitle = 'Marketing Specialist'     AND ST.Name = 'Marketing'     AND E.ModifiedDate <= '2015-12-31' ORDER BY      Age DESC LIMIT 1;
SELECT      SUM(SOD.TotalDue) AS TotalAmountDue,     V.Name AS VendorName FROM      Vendor V     JOIN PurchaseOrderHeader POH ON V.BusinessEntityID = POH.VendorID     JOIN PurchaseOrderDetail POD ON POD.PurchaseOrderID = POH.PurchaseOrderID     JOIN Product P ON POD.ProductID = P.ProductID GROUP BY      V.Name ORDER BY      SUM(POD.UnitPrice) * SUM(POD.ReceivedQty) ASC LIMIT 1;
SELECT      p.BusinessEntityID AS 'Employee ID',     DATEDIFF(YEAR, p.BirthDate, GETDATE()) AS 'Age at Hire' FROM      PurchaseOrderHeader ph  JOIN      SalesPerson s ON ph.Status = 4 AND ph.CreditCardID IS NULL AND ph.VendorID IS NULL  AND      ph.CustomerID = s.BusinessEntityID   ORDER BY      ph.TotalDue - ph.Freight DESC  LIMIT 1;
SELECT e.FirstName, e.MiddleName, e.LastName, e.Salary  FROM Employee AS e  WHERE e.Salary = (SELECT MAX(Salary) FROM (SELECT TOP 10 s.Salary FROM Employee AS s ORDER BY s.Salary DESC) AS subquery)
SELECT Product.Name FROM Product JOIN ProductReview ON Product.ProductID = ProductReview.ProductID WHERE ProductReview.ReviewerName = 'John Smith' AND ProductReview.Rating = 5 ORDER BY Product.ListPrice - Product.StandardCost DESC LIMIT 1;
SELECT Rate FROM Employee ORDER BY HireDate ASC LIMIT 5;
SELECT      v.Name AS VendorName,      SUM(SUBTRACT(p.LastReceiptCost, p.StandardPrice)) AS ProfitOnNet FROM      Vendor v JOIN      PurchaseOrderHeader ph ON v.BusinessEntityID = ph.VendorID JOIN      PurchaseOrderDetail pd ON ph.PurchaseOrderID = pd.PurchaseOrderID JOIN      Product p ON pd.ProductID = p.ProductID WHERE      pd.MaxOrderQty BETWEEN 500 AND 750 GROUP BY      v.BusinessEntityID, v.Name ORDER BY      ProfitOnNet DESC LIMIT 1 OFFSET 9;
SELECT      E.HireDate,     (2011 - YEAR(E.HireDate)) AS YearsWorking,     MAX(SUBSTRING_INDEX(SALESORDERHEADER.Comment, ';', -1)) AS PendingForApprovalPapers FROM      Employee E JOIN      SalesOrderHeader SOH ON E.BusinessEntityID = SOH.SalesPersonID WHERE      SOH.Status = 1     AND SOH.ShipDate IS NULL GROUP BY      E.HireDate,     YearsWorking HAVING      MAX(SUBSTRING_INDEX(SALESORDERHEADER.Comment, ';', -1)) LIKE '%pending for approval papers%' AND      (2011 - YEAR(E.HireDate)) >= Min(YearsWorking)
SELECT      p.Name,     p.DaysToManufacture FROM     Product p JOIN     ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID WHERE     ps.Name = 'Medium-quality class' AND     p.Rating = (SELECT MAX(p2.Rating) FROM Product p2 WHERE p2.Class = 'H' AND p2.Rating = 2);
SELECT      J.Title AS 'First Job Position',      E.FirstName + ' ' + E.MiddleName + ' ' + E.LastName AS 'Hired By' FROM      Employee AS E  JOIN      JobCandidate AS J ON E.BusinessEntityID = J.BusinessEntityID ORDER BY      J.StartDate ASC  LIMIT 1;
SELECT COUNT(*)  FROM PurchaseOrderDetail  WHERE TransactionType = 'W'  AND Quantity BETWEEN 100 AND 250  AND ReorderPoint <= 375;
SELECT      (AVG(CASE WHEN Gender = 'F' THEN Rate ELSE NULL END)       - AVG(CASE WHEN Gender = 'M' THEN Rate ELSE NULL END)) AS SalaryDifference FROM      Employee;
SELECT DISTINCT V.Name  FROM Vendor AS V  JOIN ProductVendor AS PV ON V.BusinessEntityID = PV.BusinessEntityID  JOIN Product AS P ON PV.ProductID = P.ProductID  JOIN ProductSubcategory AS PS ON P.ProductSubcategoryID = PS.ProductSubcategoryID  JOIN ProductModel AS PM ON P.ProductModelID = PM.ProductModelID  WHERE PV.AverageLeadTime = 0 AND P.Style = 'W' AND PS.ProductSubcategoryID = 'Tights';
SELECT      PayFrequency FROM      EmployeePayHistory WHERE      BusinessEntityID =          (SELECT              BusinessEntityID          FROM              BusinessEntity          WHERE              Name = 'First-ever Scheduling Assistant');
SELECT      p.Class,     p.ProductLine,     p.ListPrice FROM      SalesOrderDetail sod JOIN      Product p ON sod.ProductID = p.ProductID JOIN      SalesOrderHeader soh ON sod.SalesOrderID = soh.SalesOrderID WHERE      soh.OnlineOrderFlag = 1 GROUP BY      p.ProductID, p.Class, p.ProductLine, p.ListPrice ORDER BY      SUM(sod.Quantity) ASC LIMIT 1;
SELECT FirstName + ' ' + MiddleName + ' ' + LastName AS Full_Name  FROM SalesPerson  WHERE CommissionPct = (SELECT MAX(CommissionPct) FROM SalesPerson);
SELECT      FirstName + MiddleName + LastName AS Full_Name FROM      Employee WHERE      age_at_time_of_hire = (         SELECT MAX(age_at_time_of_hire)         FROM Employee     ) - 1 ORDER BY      age_at_time_of_hire DESC LIMIT 1;
SELECT      p.Name FROM      Product p JOIN      SalesOrderDetail sod ON p.ProductID = sod.ProductID JOIN      SalesOrderHeader soh ON sod.SalesOrderID = soh.SalesOrderID WHERE      soh.OnlineOrderFlag = 1 GROUP BY      p.ProductID,      p.Name ORDER BY      SUM(MULTIPLY(SUBTRACT(p.ListPrice, p.StandardCost), sod.Quantity)) DESC LIMIT 1;
SELECT TOP 1      p.vendor_id,     p.vendor_name,     MAX(SUBTRACT(po.OrderQty, po.ReceivedQty)) AS max_difference FROM      PurchaseOrderHeader poh JOIN      PurchaseOrderDetail po ON poh.PurchaseOrderID = po.PurchaseOrderID GROUP BY      p.vendor_id,      p.vendor_name ORDER BY      max_difference DESC;
SELECT      AVG(T3.AverageLeadTime) AS AvgLeadTime,     (T4.LastReceiptCost - T4.StandardPrice) AS ProfitOnNet,     CONCAT(T2.AddressLine1, ',', T2.AddressLine2, ',', T2.City, ',', T2.PostalCode) AS FullLocation FROM      ProductVendor AS T3 JOIN      Vendor AS T2 ON T3.BusinessEntityID = T2.BusinessEntityID JOIN      Product AS T1 ON T1.ProductID = T3.ProductID WHERE      T1.ProductID = 843;
SELECT COUNT(*)  FROM SalesPerson  WHERE Bonus = 0;
SELECT COUNT(*)  FROM SalesOrderHeader  JOIN SalesTaxRate ON SalesOrderHeader.SalesOrderID = SalesTaxRate.SalesOrderID  WHERE SalesTaxRate.TaxType = 1  AND SalesTaxRate.Name LIKE '%+%';
SELECT MAX(T1.ActualCost)  FROM `TransactionHistory` AS T1  JOIN `PurchaseOrderDetail` AS T2  ON T1.TransactionID = T2.TransactionID;
SELECT TOP 1 Status  FROM SalesOrderHeader  WHERE Freight = (SELECT MAX(Freight) FROM SalesOrderHeader)  ORDER BY Freight DESC;
SELECT COUNT(*)  FROM ProductVendor  WHERE ProductVendor.OnOrderQty = 0;
SELECT ProductID, MAX((LastReceiptCost - StandardPrice) AS 'HighestProfitOnNet') FROM ProductVendor
SELECT ReviewerName  FROM ProductReview  WHERE Rating = (SELECT MAX(Rating) FROM ProductReview);
SELECT ProductID FROM ProductReview GROUP BY ProductID ORDER BY COUNT(ProductID) DESC LIMIT 1;
SELECT COUNT(*)  FROM Product  JOIN ShoppingCartItem ON Product.ProductID = ShoppingCartItem.ProductID  WHERE Product.MakeFlag = 0 AND Product.Rating != 5
SELECT MAX(ProductID) AS BiggestAmountOfReviews FROM Product WHERE FinishedGoodsFlag = 1;
SELECT COUNT(*)  FROM Product  WHERE MakeFlag = 1 AND FinishedGoodsFlag = 1  AND (     SELECT COUNT(Comments)      FROM ProductReview      WHERE ProductID = Product.ProductID ) > 10;
SELECT p.Name FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE p.FinishedGoodsFlag = 1 GROUP BY p.ProductID, p.Name HAVING COUNT(pr.ProductReviewID) > 10;
SELECT ReviewerName  FROM ProductReview  JOIN Product p ON ProductReview.ProductID = p.ProductID  JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID  JOIN ProductModel pm ON p.ProductModelID = pm.ProductModelID  WHERE ps.Name = 'Medium' AND p.Style = 'W' AND p.Class = 'H' AND ProductReview.Rating = 5;
SELECT      p.Class FROM      Product p JOIN      ProductReview pr ON p.ProductID = pr.ProductID GROUP BY      p.Class ORDER BY      COUNT(pr.ProductReviewID) DESC LIMIT 1;
SELECT ReviewerName, EmailAddress  FROM ProductReview  JOIN Person ON ProductReview.ReviewerID = Person.BusinessEntityID  WHERE Class = 'H' AND Style = 'M';
SELECT ProductName FROM Product WHERE (SELECT COUNT(*) FROM ProductListPriceHistory WHERE ProductID = Product.ProductID) > 3;
SELECT Description  FROM ProductDescription  WHERE Name = 'Headset Ball Bearings';
SELECT MAX(ProductVendor.StandardPrice)  FROM ProductVendor  JOIN Product ON Product.ProductID = ProductVendor.ProductID  WHERE Product.Name LIKE '%Hex Nut 5%';
SELECT ProductVendor.StandardPrice FROM ProductVendor JOIN Product ON Product.ProductID = ProductVendor.ProductID JOIN Vendor ON Vendor.BusinessEntityID = ProductVendor.BusinessEntityID WHERE Product.Name = 'Hex Nut 5';
SELECT COUNT(*)  FROM Vendor  WHERE VendorID IN (     SELECT VendorID      FROM ProductVendor      JOIN Product ON Product.ProductID = ProductVendor.ProductID      WHERE Product.Name = 'Hex Nut 5' )  AND CreditRating BETWEEN 1 AND 3;
SELECT      Vendor.PurchasingWebServiceURL FROM      Vendor JOIN      ProductVendor ON Vendor.BusinessEntityID = ProductVendor.BusinessEntityID JOIN      Product ON Product.ProductID = ProductVendor.ProductID WHERE      Product.Name = 'Hex Nut 5';
SELECT V.Name FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID JOIN Product P ON PV.ProductID = P.ProductID WHERE P.Name = 'Hex Nut 5' AND PV.StandardPrice = (SELECT MIN(StandardPrice) FROM ProductVendor WHERE ProductID = P.ProductID)
SELECT COUNT(*)  FROM ProductVendor  JOIN Product ON ProductVendor.ProductID = Product.ProductID  WHERE ProductClass = 'H' AND ProductVendor.PreferredVendorStatus = 1;
SELECT ListPrice FROM Product WHERE Name = 'LL Fork';
SELECT COUNT(*)  FROM Product  WHERE ProductLine = 'M'  AND ProductID IN (     SELECT ProductID      FROM ProductVendor      GROUP BY ProductID      HAVING COUNT(BusinessEntityID) > 5 );
SELECT COUNT(*)  FROM Product  WHERE ProductLine = 'M'  AND ProductReviewID IS NOT NULL;
SELECT ReviewerName, EmailAddress  FROM ProductReview  WHERE Rating = 1 AND ProductID = (SELECT ProductID FROM Product WHERE Name = 'HL Mountain Pedal');
SELECT COUNT(*)  FROM Product  WHERE DaysToManufacture > 2 AND (OnOrderQty = 0 OR OnOrderQty IS NULL);
SELECT ProductID FROM Product WHERE MakeFlag = 1 AND DaysToManufacture > 2 AND (OnOrderQty = 0 OR OnOrderQty IS NULL);
SELECT COUNT(*)  FROM Product  WHERE FinishedGoodsFlag = 1 AND ProductLine = 'M'  JOIN ProductReview  ON Product.ProductID = ProductReview.ProductID  GROUP BY Product.ProductID  ORDER BY COUNT(ProductReview.ProductReviewID) DESC  LIMIT 1;
SELECT      V.Name AS VendorName,     AVG(P.StandardPrice) AS AverageSellingPrice FROM      Vendor V     JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID     JOIN Product P ON PV.ProductID = P.ProductID WHERE      P.Name = 'Hex Nut 5' GROUP BY      V.Name;
SELECT p.Name FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE p.ProductLine = 'M' GROUP BY p.ProductID, p.Name ORDER BY AVG(pr.Rating) DESC LIMIT 1;
SELECT TOP 3      p.Name, AVG(pr.Rating) AS AvgRating FROM      Product p JOIN      ProductReview pr ON p.ProductID = pr.ProductID WHERE      p.MakeFlag = 1 GROUP BY      p.Name ORDER BY      AvgRating DESC LIMIT 3;
SELECT * FROM Person WHERE PersonType = 'EM' ORDER BY BusinessEntityID ASC;
SELECT FirstName, LastName  FROM Person  WHERE PersonType = 'IN' AND LastName = 'Anderson';
SELECT      FirstName, MiddleName, LastName  FROM      Employee  WHERE      EndDate IS NOT NULL;
SELECT FirstName, MiddleName, LastName  FROM Employee  WHERE SalariedFlag = 1 AND YEAR(HireDate) >= 2007;
SELECT FirstName, LastName  FROM Employee  WHERE MaritalStatus = 'M' AND VacationHours < 20;
SELECT      e.Name,     2022 - YEAR(e.BirthDate) + 1 AS Age FROM      Employee e JOIN      Shift s ON e.ShiftID = s.ShiftID WHERE      s.ShiftID = 3 ORDER BY      e.BirthDate ASC LIMIT 1;
SELECT e.* FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID WHERE edh.DepartmentID IN (SELECT DepartmentID FROM Department WHERE Name LIKE '%Shipping and Receiving%') AND edh.StartDate <= '2009-12-31' AND edh.EndDate > '2009-01-01' AND e.HireDate BETWEEN '2009-01-01' AND '2009-12-31';
SELECT e.JobTitle, d.Name  FROM Employee e  JOIN Department d ON e.DepartmentID = d.DepartmentID  WHERE e.BirthDate = (SELECT MIN(BirthDate) FROM Employee)
SELECT      d.DepartmentID,     AVG(p.Rate / h.HourlyRate) AS AverageHourlyPayRate FROM      EmployeePayHistory p JOIN      Department d ON p.BusinessEntityID = d.BusinessEntityID JOIN      (SELECT BusinessEntityID, MAX([RateChangeDate]) AS MaxRateChangeDate FROM EmployeePayHistory GROUP BY BusinessEntityID) e ON p.BusinessEntityID = e.BusinessEntityID AND p.RateChangeDate = e.MaxRateChangeDate JOIN      (SELECT BusinessEntityID, Rate / h.HourlyRate AS RatePerHourly FROM EmployeePayHistory p JOIN HumanResource.HR.Department d ON p.BusinessEntityID = d.BusinessEntityID WHERE d.DepartmentID = <DepartmentID>) h ON p.BusinessEntityID = h.BusinessEntityID GROUP BY      d.DepartmentID;
SELECT Rate  FROM Employee  WHERE JobTitle != 'Chief Executive Officer'  AND Rate = (SELECT MAX(Rate) FROM Employee WHERE JobTitle != 'Chief Executive Officer');
SELECT V.Name  FROM Vendor AS V  JOIN ProductVendor AS PV ON V.BusinessEntityID = PV.BusinessEntityID  WHERE PV.ProductID = 319  ORDER BY PV.AverageLeadTime ASC  LIMIT 1;
SELECT Product.Name  FROM Product  JOIN Vendor ON Product.VendorID = Vendor.BusinessEntityID  WHERE Vendor.Name = 'Australia Bike Retailer'  ORDER BY Product.ProductID;
SELECT V.Name, MAX((V.LastReceiptCost - P.StandardPrice)) as BestProfitOnNet  FROM Vendor V  JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID  JOIN Product P ON PV.ProductID = P.ProductID  WHERE P.ProductID = 342
SELECT      (MAX(T2.Rate) - MIN(T2.Rate)) * 100 / MIN(T2.Rate) AS PercentageIncrement FROM      Employee T1 JOIN      EmployeePayHistory T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE      T1.FirstName = 'Rob'      AND T1.LastName = 'Walters'     AND MAX(T2.Rate) = (         SELECT MAX(Rate)         FROM EmployeePayHistory         WHERE BusinessEntityID = T1.BusinessEntityID     );
SELECT      AVG(DATEDIFF(2022, HireDate)) AS AverageLengthOfEmployment FROM      Employee WHERE      DepartmentID = (SELECT DepartmentID FROM Department WHERE Name = 'Research and Development');
SELECT AVG(DATE_PART('year', AGE(NOW()) - DATE_PART('year', HireDate))) AS average_age FROM Employee;
SELECT      (COUNT(CASE WHEN JobTitle = 'Sales Representative' THEN 1 END)       / CAST(COUNT(*) AS REAL)) * 100 AS PercentageOfSalesRepresentatives FROM      Employee;
SELECT      p.FirstName,      p.LastName,      ph.PhoneNumber  FROM      Person p  JOIN      Employee e ON p.BusinessEntityID = e.BusinessEntityID  JOIN      EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID  JOIN      Department d ON edh.DepartmentID = d.DepartmentID  WHERE      e.JobTitle = 'Marketing Manager'  AND      d.Name = 'Marketing'  AND      ph.PhoneNumberTypeID IN (SELECT PhoneNumberTypeID FROM PhoneNumberType WHERE Name = 'Office');
SELECT p.FirstName, p.LastName  FROM Person p JOIN BusinessEntity b ON p.BusinessEntityID = b.BusinessEntityID JOIN CreditCard cc ON b.BusinessEntityID = cc.BusinessEntityID WHERE cc.CardType = 'Distinguish';
SELECT      s.Name AS SalesPersonName,     t.Name AS TerritoryName FROM      SalesPerson s JOIN      Store st ON s.BusinessEntityID = st.SalesPersonID JOIN      SalesTerritory t ON st.TerritoryID = t.TerritoryID WHERE      st.Name LIKE '%Area Bike Accessories%'
SELECT      s.Name AS StoreName,     sp.FirstName + ' ' + sp.LastName AS SalesRepresentative FROM      Store s JOIN      SalesPerson sp ON s.SalesPersonID = sp.BusinessEntityID JOIN      SalesTerritory st ON s.TerritoryID = st.TerritoryID WHERE      st.Name = 'France';
SELECT Product.Name, Vendor.Name  FROM Product  JOIN ProductVendor ON Product.ProductID = ProductVendor.ProductID  WHERE YEAR(Product.SellStartDate) = 2013;
SELECT      SalesPerson.BusinessEntityID,      SalesPerson.FirstName,      SalesPerson.LastName  FROM      SalesPerson  WHERE      Max(SalesPerson.SalesYTD) = SalesPerson.SalesYTD;
SELECT ProductID, Name FROM Product WHERE MinOrderQty = 1 AND StandardCost > 17;
SELECT      J.JobTitle  FROM      Employee AS E JOIN      JobCandidate AS JC ON E.BusinessEntityID = JC.BusinessEntityID JOIN      Person AS P ON E.BusinessEntityID = P.BusinessEntityID JOIN      PersonType AS PT ON P.PersonType = PT.PersonTypeID JOIN      Gender AS G ON P.Gender = G.GenderID WHERE      G.Name = 'Male' AND      P.MaritalStatus = 'M' ORDER BY      P.BirthDate ASC LIMIT 1;
SELECT Vendor.Name  FROM Vendor  JOIN ProductVendor ON Vendor.BusinessEntityID = ProductVendor.BusinessEntityID  JOIN Product ON Product.ProductID = ProductVendor.ProductID  WHERE Product.ProductNumber = 'WB-H098';
SELECT Vendor.Name FROM Vendor JOIN ProductVendor ON Vendor.BusinessEntityID = ProductVendor.BusinessEntityID WHERE ProductVendor.ProductID = 348 ORDER BY ProductVendor.AverageLeadTime ASC LIMIT 1;
SELECT      e.BusinessEntityID,     e.FirstName,     e.LastName,     MIN(e.SickLeaveHours) as MinSickLeaveHours FROM      Employee e WHERE      year(e.BirthDate) >= 1970 GROUP BY      e.BusinessEntityID,     e.FirstName,     e.LastName ORDER BY      MinSickLeaveHours ASC LIMIT 1;
SELECT      d.DepartmentID,     AVG(DATEDIFF(YEAR, e.BirthDate, GETDATE())) AS AverageAge,     MIN(e.BirthDate) AS YoungestEmployeeBirthDate FROM      Employee e JOIN      Department d ON e.DepartmentID = d.DepartmentID GROUP BY      d.DepartmentID ORDER BY      AverageAge ASC;
SELECT ProductSubcategoryID FROM ProductSubcategory WHERE Name LIKE '%AdventureWorks%' LIMIT 3;
SELECT      s.SalesQuota - s.SalesYTD AS SalesDifference FROM      SalesPerson s WHERE      s.BusinessEntityID = 288;
SELECT BusinessEntityID, Name  FROM SalesPerson  WHERE SalesLastYear = (SELECT MIN(SalesLastYear) FROM SalesPerson) LIMIT 3;
SELECT      TerritoryID,     SUM(SalesYTD) AS TotalRevenue FROM      SalesPersonQuotaHistory GROUP BY      TerritoryID ORDER BY      TotalRevenue DESC LIMIT 3;
SELECT      s.Name AS SalesReason,     pdc.Description AS OfferDescription FROM      SalesReason s JOIN      SpecialOfferProduct spo ON s.SalesReasonID = spo.SpecialOfferID JOIN      Product p ON spo.ProductID = p.ProductID JOIN      ProductCategory pc ON p.ProductCategoryID = pc.ProductCategoryID WHERE      pc.Name = 'Reseller';
SELECT MAX(T2.DiscountPct) AS HighestDiscountRate FROM SpecialOffer AS T1 JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Type = 'Excess Inventory'
SELECT      COALESCE(SUM(POD.ActualCost) - SUM(WOR.ActualCost), 0) AS CostDifference FROM      SalesOrderDetail POD JOIN      PurchaseOrderDetail PODetail ON POD.ProductID = PODetail.ProductID JOIN      WorkOrder WOR ON PODetail.ProductID = WOR.ProductID WHERE      POD.ProductID = 818;
SELECT COUNT(*)  FROM BillOfMaterials  WHERE EndDate IS NULL AND BOMLevel = 2;
SELECT COUNT(*)  FROM Document  WHERE Status = 2 AND DocumentSummary IS NULL;
SELECT      SalesTaxRateID,     Name,     TaxType,     TaxRate FROM      SalesTaxRate WHERE      Name LIKE '%+%';
SELECT TOP 1 woi.WorkOrderID, woi.OrderQty FROM WorkOrderRouting woi JOIN WorkOrder wo ON wo.WorkOrderID = woi.WorkOrderID WHERE woi.TransactionType = 'W' ORDER BY woi.OrderQty DESC;
SELECT      v.Name FROM      Vendor v WHERE      v.PreferredVendorStatus = 0;
SELECT COUNT(*)  FROM Vendor  WHERE PreferredVendorStatus = 0 AND ActiveFlag = 1;
SELECT COUNT(*)  FROM Employee  WHERE StartDate >= '2009-01-01' AND ShiftID IN (SELECT ShiftID FROM Shift WHERE Name = 'Night');
SELECT      D.Name AS 'Department' FROM      Department D JOIN      Employee E ON D.DepartmentID = E.DepartmentID JOIN      EmployeeDepartmentHistory EDH ON E.BusinessEntityID = EDH.BusinessEntityID WHERE      EDH.ShiftID IN (SELECT ShiftID FROM Shift WHERE Name = 'Night')   GROUP BY      D.DepartmentID ORDER BY      COUNT(EDH.ShiftID) DESC LIMIT 1;
SELECT COUNT(*)  FROM PurchaseOrderHeader  JOIN PurchaseOrderDetail ON PurchaseOrderHeader.PurchaseOrderID = PurchaseOrderDetail.PurchaseOrderID  JOIN ShipMethod ON PurchaseOrderDetail.ShipMethodID = ShipMethod.ShipMethodID  WHERE ShipMethod.Name = 'XRQ - TRUCK GROUND';
SELECT sr.Name  FROM SalesOrderHeaderSalesReason AS sor  JOIN SalesReason AS sr ON sor.SalesReasonID = sr.SalesReasonID  WHERE sor.SalesOrderID = 43718;
SELECT DISTINCT psc.Name  FROM ProductCategory pc  JOIN ProductSubcategory psc ON pc.ProductCategoryID = psc.ProductCategoryID  WHERE pc.Name = 'Bikes';
SELECT      s.TerritoryID,      t.Name AS SalesAreaName FROM      SalesPersonQuotaHistory sqh JOIN      SalesPerson s ON sqh.BusinessEntityID = s.BusinessEntityID JOIN      SalesTerritory t ON s.TerritoryID = t.TerritoryID WHERE      sqh.SalesQuota = (SELECT MAX(SalesQuota) FROM SalesPersonQuotaHistory)
SELECT p.Name  FROM Product p  JOIN SalesOrderDetail sod ON p.ProductID = sod.ProductID  JOIN SalesOrderHeader soh ON sod.SalesOrderID = soh.SalesOrderID  WHERE soh.SalesOrderNumber = '43660';
SELECT ProductID, SUM(OrderQty) as TotalOrders FROM PurchaseOrderDetail GROUP BY ProductID ORDER BY TotalOrders DESC LIMIT 5;
SELECT Shelf  FROM ProductInventory  WHERE ProductID = (SELECT ProductID FROM Product WHERE Name = 'down tube');
SELECT      AddressType.Name  FROM      AddressType  JOIN      Store  ON      AddressType.AddressTypeID = Store.AddressTypeID  WHERE      Store.Name = 'Fun Toys and Bikes';
SELECT      b.Name FROM      Store AS s JOIN      BusinessEntity AS b ON s.BusinessEntityID = b.BusinessEntityID WHERE      s.Name = 'Next-Door Bike Store';
SELECT T1.ReferenceOrderID  FROM SalesOrderDetail AS T1  JOIN Product AS T2 ON T1.ProductID = T2.ProductID  WHERE T2.Name = 'Mountain End Caps'
SELECT AddressLine1  FROM BusinessEntity  JOIN BusinessEntityAddress ON BusinessEntity.BusinessEntityID = BusinessEntityAddress.BusinessEntityID  WHERE BusinessEntity.BusinessEntityID = 12;
SELECT BusinessEntityID  FROM BusinessEntity  JOIN Address ON BusinessEntity.BusinessEntityID = Address.BusinessEntityID  JOIN StateProvince ON Address.StateProvinceID = StateProvince.StateProvinceID  JOIN City ON Address.City = City.CityName  WHERE City.CityName = 'Dallas';
SELECT      s.Name  FROM      StateProvince s  JOIN      BusinessEntity be ON s.StateProvinceID = be.StateProvinceID  WHERE      be.Name = 'Racine';
SELECT      ((COUNT(CultureID WHERE name = 'Arabic') / COUNT(CultureID)) * 100) -      ((COUNT(CultureID WHERE name = 'Thai') / COUNT(CultureID)) * 100) AS PercentageDifference FROM Culture;
SELECT      (COUNT(CASE WHEN s.SalesQuota > 300000 THEN 1 END) * 100.0 / COUNT(s.TerritoryID)) as Percentage FROM      SalesPerson s JOIN      CountryRegion cr ON s.TerritoryID = cr.CountryRegionCode WHERE      cr.Name = 'Northwest' AND cr.CountryRegionCode = 'US';
SELECT      SUM(SUBTRACT(p.LastReceiptCost, p.StandardPrice)) AS NetProfit FROM      ProductVendor p WHERE      p.ProductID = (SELECT ProductID FROM Product WHERE Name = 'Crankarm');
SELECT Product.Name  FROM Product  JOIN ProductReview ON Product.ProductID = ProductReview.ProductID  WHERE ProductReview.Rating = 5  ORDER BY ProductReview.Rating DESC  LIMIT 1;
SELECT MAX(Rate) AS SecondHighestSalaryPerHour FROM Employee WHERE PayFrequency = 1 ORDER BY Rate DESC LIMIT 1 OFFSET 1;
SELECT COUNT(*)  FROM CreditCard  WHERE CardType = 'Vista' AND ExpYear <= 2006;
SELECT StartTime  FROM Shift  WHERE Name = 'Night';
SELECT Product.Name, Product.Weight  FROM Product  JOIN Product ON Product.ProductID = Product.ProductModelID  JOIN ProductSubcategory ON Product.ProductSubcategoryID = ProductSubcategory.ProductSubcategoryID  WHERE Product.WeightUnitMeasureCode = 'LB'  GROUP BY Product.Name, Product.Weight  ORDER BY COUNT(*) DESC;
SELECT      t.Name,     t.CountryRegionCode,     MAX(t.SalesLastYear - t.SalesYTD) AS SalesDifference FROM      SalesTerritory t GROUP BY      t.Name,     t.CountryRegionCode ORDER BY      SalesDifference DESC LIMIT 1;
SELECT      p.Name,      p.ReorderPoint  FROM      Product p  WHERE      p.SizeUnitMeasureCode = 'CM'  ORDER BY      p.Size DESC  LIMIT 6;
SELECT      SUM(TotalDue)  FROM      PurchaseOrderHeader  WHERE      TotalDue = (         SELECT              MAX(TotalDue)          FROM              PurchaseOrderHeader          WHERE              Freight = (                 SELECT                      MAX(Freight)                  FROM                      PurchaseOrderHeader                  ORDER BY                      Freight DESC                  LIMIT 2, 1             )     );
SELECT      MIN(p.Weight) AS lightest_weight,     (d.ListPrice - p.StandardCost) * 10 AS profit_gain FROM      Product p JOIN      Document d ON p.ProductID = d.ProductID WHERE      p.Weight = (SELECT MIN(Weight) FROM Product);
SELECT TOP 1      PurchaseOrderID FROM      PurchaseOrderHeader ORDER BY      TaxAmt DESC LIMIT 1;
SELECT COUNT(*)  FROM SalesPerson  WHERE SalesQuota <= 50000;
SELECT Shift FROM Employee WHERE year(BirthDate) < '1969' ORDER BY BirthDate ASC LIMIT 6;
SELECT      ProductID,      Name,      ListPrice,      StandardCost,     (ListPrice - StandardCost) AS ProfitPerItem,     DaysToManufacture FROM      Product WHERE      DaysToManufacture = (SELECT MIN(DaysToManufacture) FROM Product) ORDER BY      ProfitPerItem DESC;
SELECT FirstName + MiddleName + LastName AS full_name  FROM SalesPerson  WHERE Bonus < 1000;
SELECT e.ModifiedDate  FROM Employee e  JOIN Person p ON e.BusinessEntityID = p.BusinessEntityID  JOIN JobCandidate jc ON e.BusinessEntityID = jc.BusinessEntityID  JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID  WHERE p.Title LIKE '%Senior Tool Designer%'  AND (EXTRACT(YEAR FROM e.HireDate) - EXTRACT(YEAR FROM e.BirthDate)) = 33  AND edh.DepartmentID IN (SELECT DepartmentID FROM Department WHERE Name = 'Engineering')  ORDER BY e.ModifiedDate DESC  LIMIT 1;
SELECT SUM(TotalDue)  FROM Vendor  WHERE CreditRating = 4 AND PreferredVendorStatus = 0;
SELECT      D.Name AS 'Department Name',      COUNT(W.ShiftID) AS 'Night Shift Count' FROM      Department D JOIN      EmployeeDepartmentHistory EDH ON D.DepartmentID = EDH.DepartmentID JOIN      Shift S ON EDH.ShiftID = S.ShiftID JOIN      WorkOrder W ON EDH.BusinessEntityID = W.BusinessEntityID WHERE      S.Name = 'Night' GROUP BY      D.Name ORDER BY      Night Shift Count DESC LIMIT 1;
SELECT      SUM((T3.ListPrice - T3.StandardCost) * 2) AS Profit FROM      Product AS T3 JOIN      ProductSubcategory AS T4 ON T3.ProductSubcategoryID = T4.ProductSubcategoryID JOIN      ProductCategory AS T5 ON T3.ProductCategoryID = T5.ProductCategoryID JOIN      ProductDescription AS T6 ON T3.ProductDescriptionID = T6.ProductDescriptionID JOIN      BusinessEntity AS T7 ON T3.BusinessEntityID = T7.BusinessEntityID WHERE      T5.Name = 'Bicycles' AND      T6.Description LIKE '%Road Bike%' AND      T7.Class = 'H' AND      T3.Size = 58;
SELECT FirstName + ' ' + MiddleName + ' ' + LastName AS FullName FROM Employee WHERE MaritalStatus = 'M' AND JobTitle = 'Production Technician' AND BirthDate = (SELECT MAX(BirthDate) FROM Employee WHERE MaritalStatus = 'M' AND JobTitle = 'Production Technician')
SELECT      v.CreditRating  FROM      ProductVendor AS pv JOIN      Vendor AS v ON pv.BusinessEntityID = v.BusinessEntityID WHERE      pv.AverageLeadTime = 60 ORDER BY      (pv.LastReceiptCost - pv.StandardPrice) DESC LIMIT 1;
SELECT      p.Name AS ProductName,      v.Name AS VendorName FROM      ProductVendor pv JOIN      Product p ON pv.ProductID = p.ProductID JOIN      Vendor v ON pv.BusinessEntityID = v.BusinessEntityID WHERE      pv.MaxOrderQty = 200 AND      pv.LastReceiptCost - p.StandardPrice > 0;
SELECT p.FirstName, p.MiddleName, p.LastName  FROM Person AS p JOIN PurchaseOrderHeader AS po ON p.BusinessEntityID = po.EmployeeID WHERE p.PersonType = 'EM' AND po.Status = 3 GROUP BY p.BusinessEntityID, p.FirstName, p.MiddleName, p.LastName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT V.Name  FROM Vendor AS V  JOIN ProductVendor AS PV ON V.BusinessEntityID = PV.BusinessEntityID  WHERE PV.MinOrderQty = (SELECT MIN(PV2.MinOrderQty) FROM ProductVendor AS PV2 WHERE PV2.MinOrderQty > (SELECT MAX(PV3.MinOrderQty) FROM ProductVendor AS PV3))  ORDER BY PV.MinOrderQty DESC LIMIT 1;
SELECT MIN(TotalDue)  FROM PurchaseOrderHeader  WHERE VendorID IN (     SELECT BusinessEntityID      FROM Vendor      WHERE ActiveFlag = 0 )
SELECT      T1.FirstName,      T1.MiddleName,      T1.LastName,     DATEDIFF(YEAR, T1.BirthDate, T1.HireDate) AS AgeAtHire FROM      Employee AS T1 WHERE      T1.VacationHours <= 10 ORDER BY      DATEDIFF(YEAR, T1.BirthDate, T1.HireDate) DESC LIMIT 1;
SELECT      p.PersonType  FROM      Person p  WHERE      p.Gender = 'F'      AND p.MaritalStatus = 'S'      AND p.HireDate BETWEEN '2008-1-1' AND '2008-12-31';
SELECT      (p.ListPrice - p.StandardCost) AS Profit,     pdComments.Comments  FROM      Product p      JOIN ProductReview pr ON p.ProductID = pr.ProductID      JOIN pdComments ON pr.ProductReviewID = pdComments.ProductReviewID  WHERE      pr.ReviewerName = 'David'      AND pr.Rating = 4  ORDER BY      pr.Rating DESC  LIMIT 1;
SELECT      s.Name AS 'Territory',     sp.Name AS 'StateOrProvince' FROM      SalesTaxRate t     JOIN SalesTerritory st ON t.[TerritoryID] = st.TerritoryID     JOIN SalesTerritoryHistory sh ON st.TerritoryID = sh.TerritoryID     JOIN SalesPerson sp ON st.SalesPersonID = sp.BusinessEntityID WHERE      t.TaxRate = (         SELECT              MIN(t2.TaxRate)          FROM              SalesTaxRate t2         WHERE              t2.TaxRate < (                 SELECT                      MAX(t3.TaxRate)                 FROM                      SalesTaxRate t3             )     ) ORDER BY      sh.EndDate DESC LIMIT 1;
SELECT      AVG(SUBTRACT(Product.ListPrice, Product.StandardCost)) AS AverageProfit,     COUNT(DISTINCT CASE WHEN Product.Class = 'L' AND Product.Style = 'U' AND Product.Name LIKE '%Road Frame%' THEN Product.Size END) AS VarietySizes,     GROUP_CONCAT(DISTINCT CASE WHEN Product.Class = 'L' AND Product.Style = 'U' AND Product.Name LIKE '%Road Frame%' THEN Product.Color END) AS AvailableColors FROM      Product  JOIN      ProductSubcategory ON Product.ProductSubcategoryID = ProductSubcategory.ProductSubcategoryID  JOIN      ProductCategory ON ProductCategory.ProductCategoryID = ProductSubcategory.ProductCategoryID  WHERE      ProductSubcategory.Name = 'Road Frame' GROUP BY      Product.Class, Product.Style, Product.Name;
SELECT DiscountPct  FROM SpecialOffer  WHERE Description = 'LL Road Frame Sale';
SELECT COUNT(*)  FROM SpecialOffer  WHERE Type = 'Excess Inventory';
SELECT      s.Name,     s.DiscountPct FROM      SpecialOffer s WHERE      s.Type = 'Seasonal' ORDER BY      s.DiscountPct DESC LIMIT 1;
SELECT TOP 3      ProductDescriptionID,      Description,      DiscountPct FROM      ProductDescription WHERE      Type = 'reseller' ORDER BY      DiscountPct DESC;
SELECT Demographics  FROM Store  WHERE Name = 'Valley Bicycle Specialists';
SELECT COUNT(*)  FROM Product  WHERE MakeFlag = 1 AND FinishedGoodsFlag = 1;
SELECT MIN(SafetyStockLevel)  FROM Product  WHERE Name = 'Chainring Bolts';
SELECT ProductID, MAX(StandardCost) AS HighestStandardCost FROM Product ;
SELECT      PersonType FROM      Person WHERE      FirstName = 'David' AND      LastName = 'Bradley';
SELECT COUNT(*)  FROM Person  JOIN BusinessEntityContact ON Person.BusinessEntityID = BusinessEntityContact.BusinessEntityID  WHERE BusinessEntityContact.ContactTypeID = (SELECT ContactTypeID FROM ContactType WHERE Name = 'Store Contact')  AND Person.PersonType = 'SC'  AND Person.Title = 'Mr.';
SELECT AddressLine1, AddressLine2  FROM Store  WHERE Name = 'Valley Bicycle Specialists';
SELECT EmailAddress.EmailAddress FROM Person JOIN BusinessEntityContact ON Person.BusinessEntityID = BusinessEntityContact.BusinessEntityID JOIN EmailAddress ON BusinessEntityContact.EmailAddressID = EmailAddress.EmailAddressID WHERE Person.FirstName = 'David' AND Person.LastName = 'Bradley'
SELECT PhoneNumber FROM Person JOIN BusinessEntityContact ON Person.BusinessEntityID = BusinessEntityContact.BusinessEntityID WHERE Person.PersonType = 'SC';
SELECT PasswordHash FROM Password WHERE FirstName = 'David' AND LastName = 'Bradley'
SELECT e.EmailAddress  FROM Person e  WHERE e.EmailPromotion = 2;
SELECT CardNumber FROM CreditCard JOIN Person ON CreditCard.BusinessEntityID = Person.BusinessEntityID WHERE Person.FirstName = 'David' AND Person.LastName = 'Bradley';
SELECT ExpYear FROM CreditCard JOIN Person ON CreditCard.CreditCardID = Person.BusinessEntityID WHERE FirstName = 'David' AND LastName = 'Bradley';
SELECT p.FirstName, p.LastName  FROM Person p JOIN BusinessEntityContact b ON p.BusinessEntityID = b.PersonID  JOIN EmailAddress e ON b.BusinessEntityID = e.BusinessEntityID  JOIN PersonCreditCard pc ON p.BusinessEntityID = pc.BusinessEntityID  WHERE e.EmailAddress LIKE '%@store%' -- Assuming typical store email domain AND pc.ExpYear = 2007;
SELECT COUNT(*)  FROM Person  JOIN BusinessEntityContact ON Person.BusinessEntityID = BusinessEntityContact.BusinessEntityID  JOIN CreditCard ON BusinessEntityContact.BusinessEntityID = CreditCard.BusinessEntityID  WHERE Person.PersonType = 'SC' AND CreditCard.CardType = 'Vista';
SELECT COUNT(DISTINCT d.DepartmentID) FROM Department d JOIN Employee e ON d.DepartmentID = e.DepartmentID WHERE e.FirstName = 'David' AND e.LastName = 'Bradley';
SELECT d.Name FROM Department d JOIN EmployeeDepartmentHistory edh ON d.DepartmentID = edh.DepartmentID JOIN BusinessEntity b ON edh.BusinessEntityID = b.BusinessEntityID WHERE b.FirstName = 'David' AND b.LastName = 'Bradley' GROUP BY d.Name
SELECT COUNT(*)  FROM Employee  JOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID  WHERE EmployeeDepartmentHistory.DepartmentID = (SELECT DepartmentID FROM Department WHERE Name = 'Engineering')  AND YEAR(EmployeeDepartmentHistory.EndDate) > 2009  AND YEAR(EmployeeDepartmentHistory.StartDate) < 2009;
SELECT      T1.FirstName,      T1.LastName  FROM      Employee AS T1  JOIN      EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID  WHERE      T2.EndDate IS NOT NULL AND T2.DepartmentID IN (SELECT DepartmentID FROM Department WHERE Name = 'Engineering')  ORDER BY      DATEDIFF(T2.EndDate, T2.StartDate) DESC  LIMIT 1;
SELECT COUNT(*)  FROM Employee  JOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID  JOIN Department ON Department.DepartmentID = EmployeeDepartmentHistory.DepartmentID  WHERE Department.GroupName = 'Manufacturing' AND        Employee.PersonType = 'SC' AND         (EXTRACT(YEAR FROM EmployeeDepartmentHistory.EndDate) > 2007 OR EXTRACT(YEAR FROM EmployeeDepartmentHistory.StartDate) < 2007)
SELECT      c.CardNumber  FROM      CreditCard c JOIN      Employee e ON c.BusinessEntityID = e.BusinessEntityID JOIN      EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID WHERE      edh.DepartmentID = (SELECT DepartmentID FROM Department WHERE Name = 'Finance')      AND edh.EndDate IS NOT NULL;
SELECT COUNT(*)  FROM Employee  JOIN JobCandidate ON Employee.BusinessEntityID = JobCandidate.BusinessEntityID  JOIN Department ON Employee.DepartmentID = Department.DepartmentID  WHERE Department.Name = 'Engineering'  AND YEAR(JobCandidate.StartDate) = 2007  AND JobCandidate.ExpYear = 2007;
SELECT      bca.EmailAddress  FROM      BusinessEntityDepartmentHistory bedh JOIN      BusinessEntityContacts bca ON bedh.BusinessEntityID = bca.BusinessEntityID GROUP BY      bca.EmailAddress ORDER BY      COUNT(bedh.DepartmentID) DESC LIMIT 1;
SELECT COUNT(*)  FROM Employee  WHERE EmailPromotion = 0  AND (Employee.DepartmentID IN (SELECT DepartmentID FROM Department WHERE Name = 'Engineering')       OR EmployeeDepartmentHistory.DepartmentID IN (SELECT DepartmentID FROM Department WHERE Name = 'Engineering'))
SELECT COUNT(*)  FROM EmployeeDepartmentHistory  WHERE DepartmentID = (SELECT DepartmentID FROM Department WHERE Name = 'Quality Assurance')  AND YEAR(StartDate) = 2007;
SELECT Product.Name  FROM Product  JOIN ProductSpecialOffer ON Product.ProductID = ProductSpecialOffer.ProductID  JOIN SpecialOffer ON ProductSpecialOffer.SpecialOfferID = SpecialOffer.SpecialOfferID  WHERE SpecialOffer.Description = 'LL Road Frame Sale';
SELECT COUNT(*)  FROM Product  JOIN SpecialOfferProduct ON Product.ProductID = SpecialOfferProduct.ProductID  JOIN SpecialOffer ON SpecialOfferProduct.SpecialOfferID = SpecialOffer.SpecialOfferID  WHERE SpecialOffer.Description = 'LL Road Frame Sale';
SELECT COUNT(*)  FROM Product  WHERE Name = 'Chainring Bolts'  AND SellStartDate IS NOT NULL;
SELECT COUNT(*)  FROM Product p  JOIN ProductCategory pc ON p.ProductCategoryID = pc.ProductCategoryID  JOIN SpecialOffer so ON p.ProductID = so.ProductID  WHERE pc.Name = 'Clothing' AND so.Description = 'LL Road Frame Sale';
SELECT ProductID FROM Product WHERE ProductLine = 'Clothing' AND MakeFlag = 1 AND FinishedGoodsFlag = 1;
SELECT      AVG(DATEDIFF(YEAR, T2.EndDate, T1.StartDate)) AS AverageStay FROM      Employee T1 JOIN      DepartmentHistory T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE      T1.DepartmentID = (SELECT DepartmentID FROM Department WHERE Name = 'Engineering')  AND     T2.EndDate IS NOT NULL;
SELECT      AVG(e.Rate) AS AveragePayRate FROM      Employee e JOIN      EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN      Department d ON edh.DepartmentID = d.DepartmentID WHERE      d.Name = 'Engineering' AND      edh.StartDate < '2007-12-31' AND      edh.EndDate > '2007-01-01';
SELECT      ((MAX(ListPrice) - MIN(ListPrice)) / MIN(ListPrice)) * 100 AS PriceDifferencePercentage FROM      Product WHERE      ProductCategoryID = (SELECT ProductCategoryID FROM ProductCategory WHERE Name = 'Clothing');
SELECT      (SUM(CASE WHEN p.ProductCategoryID = (SELECT ProductCategoryID FROM ProductCategory WHERE Name = 'Clothing') THEN (pd.ListPrice - pd.StandardCost) ELSE 0 END) / COUNT(p.ProductID)) FROM      Product p JOIN      ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID JOIN      ProductDescription pd ON p.ProductID = pd.ProductID WHERE      ps.Name = 'Clothing';
SELECT ProductID, MIN(StandardCost) AS LeastCost  FROM ProductCostHistory  WHERE StartDate <= '2013-12-31' AND EndDate >= '2013-01-01'
SELECT ProductID, Name, Color  FROM Product  WHERE Color = 'yellow';
SELECT BusinessEntityID  FROM Person  WHERE FirstName = 'Hung-Fu' AND LastName = 'Ting';
SELECT PhoneNumber FROM Person WHERE BusinessEntityID = 12597;
SELECT ListPrice FROM Product WHERE ProductID = '912';
SELECT *  FROM WorkOrder  WHERE ActualCost != PlannedCost;
SELECT ThumbnailPhotoFileName  FROM Product  WHERE ProductID = '979';
SELECT Name  FROM Product  WHERE ListPrice > 1000;
SELECT ProductID, MAX(profit) as max_profit  FROM (     SELECT ProductID, (ListPrice - StandardCost) as profit      FROM Product      INNER JOIN ProductCostHistory ON Product.ProductID = ProductCostHistory.ProductID ) subquery WHERE profit = (SELECT MAX(profit) FROM (     SELECT ProductID, (ListPrice - StandardCost) as profit      FROM Product      INNER JOIN ProductCostHistory ON Product.ProductID = ProductCostHistory.ProductID ) subquery_max_profit)
SELECT Product.Name  FROM Product  JOIN ProductInventory ON Product.ProductID = ProductInventory.ProductID  WHERE ProductInventory.LocationID = 1 AND ProductInventory.Shelf = 'L' AND ProductInventory.Bin = 6;
SELECT l.Name  FROM Location l  JOIN WorkOrderRouting wr ON l.LocationID = wr.LocationID  JOIN WorkOrder wo ON wr.WorkOrderID = wo.WorkOrderID  WHERE wo.WorkOrderID = '35493';
SELECT ProductID, Name FROM Product WHERE LargePhoto IS NOT NULL;
SELECT p.Name  FROM Product p  JOIN ProductSubcategory pcs ON p.ProductSubcategoryID = pcs.ProductSubcategoryID  WHERE pcs.Name = 'Socks'
SELECT      COUNT(*) AS Number_of_Cable_Locks_Buyable FROM      Product  WHERE      ProductLine = 'Security'      AND ProductNumber LIKE '%Cable_Lock%'     AND ListPrice <= 100
SELECT ScrapReason.Name  FROM WorkOrder  JOIN WorkOrderRouting ON WorkOrder.WorkOrderID = WorkOrderRouting.WorkOrderID  JOIN ProductVendor ON WorkOrderRouting.ProductID = ProductVendor.ProductID  JOIN ScrapReason ON ProductVendor.ScrapReasonID = ScrapReason.ScrapReasonID  WHERE WorkOrder.WorkOrderID = 57788;
SELECT Product.StandardCost  FROM Product  JOIN ProductCategory ON Product.ProductCategoryID = ProductCategory.ProductCategoryID  WHERE ProductCategory.Name LIKE '%sports%';
SELECT COUNT(*)  FROM Product  JOIN ProductInventory ON Product.ProductID = ProductInventory.ProductID  JOIN Location ON ProductInventory.LocationID = Location.LocationID  WHERE Product.ProductID = '476' AND Location.Name = 'Metal Storage';
SELECT ProductID, Name, StandardCost  FROM Product  WHERE StandardCost < (SELECT AVG(StandardCost) FROM Product);
SELECT      (SUBTRACT(p.ListPrice, p.StandardCost) / CAST(p.StandardCost AS REAL)) * 100 AS ProfitPercentage FROM      Product p WHERE      p.ProductNumber = '858';
SELECT COUNT(*)  FROM Product  WHERE ProductPhotoID <> 1;
SELECT      DATEDIFF(day, ActualStartDate, ActualEndDate) AS DaysToEnd FROM      WorkOrder WHERE      WorkOrderID = 425;
SELECT ProductID, MAX(ListPrice) AS HighestPrice  FROM Product  WHERE ListPrice IS NOT NULL  AND StartDate <= '2012-01-01' AND (EndDate IS NULL OR EndDate >= '2012-01-01')  GROUP BY ProductID  ORDER BY HighestPrice DESC  LIMIT 1;
SELECT StandardCost FROM Product WHERE Name = '847';
SELECT `OrganizationLevel`  FROM `Employee`  WHERE `JobTitle` = 'Human Resources Manager';
SELECT COUNT(*)  FROM WorkOrder  WHERE EndDate > DueDate;
SELECT ProductStandardCost, ProductNumber  FROM Product  WHERE ProductID = 888;
SELECT COUNT(*)  FROM Product  JOIN ProductProductPhoto ON Product.ProductID = ProductProductPhoto.ProductID  JOIN ProductPhoto ON ProductProductPhoto.ProductPhotoID = ProductPhoto.ProductPhotoID  WHERE ProductPhoto.ThumbnailPhotoFileName = 'roadster_black_small.gif';
SELECT      LocationID,      Shelf AS compartment,      Bin AS container FROM      ProductInventory WHERE      ProductID IN (         SELECT              ProductID         FROM              Product         WHERE              Name = 'Lock Ring'     );
SELECT ProductSubcategoryID FROM ProductSubcategory WHERE Name = 'Road Frames';
SELECT wo.WorkOrderID, wo.ProductID, wo.StartDate, wo.EndDate FROM WorkOrder wo JOIN ScrapReason sr ON wo.ScrapReasonID = sr.ScrapReasonID WHERE sr.Name = 'handling damage';
SELECT (ListPrice - StandardCost) AS Profit FROM Product WHERE Name = '792'
SELECT p.FirstName, p.LastName  FROM Person p JOIN BusinessEntityContact b ON p.BusinessEntityID = b.PersonID  JOIN EmailAddress e ON b.BusinessEntityID = e.BusinessEntityID  WHERE e.EmailAddress = 'regina7@adventure-works.com';
SELECT l.Name  FROM Location l  JOIN ProductInventory pi ON pi.LocationID = l.LocationID  JOIN Product p ON p.ProductID = pi.ProductID  WHERE p.ProductID = '810';
SELECT p.Name  FROM Product p  JOIN WorkOrder w ON p.ProductID = w.ProductID  WHERE w.WorkOrderID = '2540'
SELECT ProductID, ListPrice * 3 AS 'Total Price' FROM Product WHERE Name = 'AWC Logo Cap';
SELECT wo.WorkOrderID FROM WorkOrder wo JOIN ProductModelProductDescriptionCulture pmdc ON wo.ProductID = pmdc.ProductModelID JOIN ProductDescription pd ON pmdc.ProductDescriptionID = pd.ProductDescriptionID WHERE pd.Description = 'Down Tube';
SELECT      AVG(DIVIDE(SUBTRACT(Product.ListPrice, Product.StandardCost), Product.StandardCost)) * 100 AS AverageProfitPercentage FROM      Product;
SELECT      CAST(SUM(CASE WHEN Name = 'Subassembly' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(WorkOrderID) AS Proportion FROM      WorkOrder
SELECT COUNT(DISTINCT OBJ_SAMPLE_ID)  FROM IMG_OBJ  WHERE IMG_ID = 1;
SELECT COUNT(*)  FROM IMG_OBJ  WHERE OBJ_SAMPLE_ID >= 20;
SELECT IMG_ID  FROM IMG_OBJ  GROUP BY IMG_ID  ORDER BY COUNT(OBJ_SAMPLE_ID) DESC  LIMIT 1;
SELECT IMG_OBJ.IMG_ID, IMG_OBJ.OBJ_SAMPLE_ID FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 1 AND OBJ_CLASSES.OBJ_CLASS = 297;
SELECT COUNT(*)  FROM IMG_REL  WHERE IMG_ID = 5 AND OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID;
SELECT IMG_ID, OBJ_SAMPLE_ID, X, Y, W, H  FROM IMG_OBJ  WHERE IMG_ID = 5 AND OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID;
SELECT COUNT(*)  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE IMG_ID = 1 AND OBJ_CLASSES.OBJ_CLASS = 'man';
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ  WHERE EXISTS (   SELECT * FROM OBJ_CLASSES WHERE OBJ_CLASS = 'man' AND IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID );
SELECT DISTINCT T2.OBJ_CLASS  FROM IMG_OBJ AS T1  JOIN OBJ_CLASSES AS T2 ON T2.OBJ_CLASS_ID = T1.OBJ_CLASS_ID  WHERE T1.IMG_ID = 1;
SELECT PRED_CLASS  FROM IMG_REL  WHERE IMG_ID = 1 AND OBJ1_SAMPLE_ID = 8 AND OBJ2_SAMPLE_ID = 4;
SELECT COUNT(*)  FROM IMG_REL  WHERE IMG_ID = 1 AND PRED_CLASS_ID = (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'parked on');
SELECT DISTINCT PRED_CLASS FROM IMG_REL WHERE OBJ1_SAMPLE_ID = 14 AND OBJ2_SAMPLE_ID = 14 AND IMG_ID = 1;
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_REL  WHERE OBJ1_SAMPLE_ID != OBJ2_SAMPLE_ID AND PRED_CLASS_ID = (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'parked on');
SELECT IMG_ID  FROM IMG_REL  WHERE PRED_CLASS_ID IN (     SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'parked on' ) GROUP BY IMG_ID  HAVING COUNT(DISTINCT CASE WHEN OBJ1_SAMPLE_ID != OBJ2_SAMPLE_ID THEN IMG_ID END) > 2;
SELECT T4.PRED_CLASS  FROM IMG_REL AS T1  JOIN IMG_OBJ AS T2 ON T1.OBJ1_SAMPLE_ID = T2.OBJ_SAMPLE_ID  JOIN IMG_OBJ AS T3 ON T1.OBJ2_SAMPLE_ID = T3.OBJ_SAMPLE_ID  JOIN PRED_CLASSES AS T4 ON T4.PRED_CLASS_ID = T1.PRED_CLASS_ID  WHERE T1.IMG_ID = 5 AND T1.OBJ1_SAMPLE_ID = T1.OBJ2_SAMPLE_ID
SELECT IMG_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID, X, Y, W, H  FROM IMG_REL  JOIN IMG_OBJ ON IMG_REL.OBJ1_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID  JOIN IMG_OBJ ON IMG_REL.OBJ2_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID  WHERE PRED_CLASS_ID IN (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'by')  AND IMG_ID = 1;
SELECT      AVG(ABS(t1.Y - t2.Y)) AS avg_diff_y FROM      IMG_REL AS t1 JOIN      IMG_OBJ AS t3 ON t1.OBJ1_SAMPLE_ID = t3.OBJ_SAMPLE_ID JOIN      IMG_OBJ AS t4 ON t1.OBJ2_SAMPLE_ID = t4.OBJ_SAMPLE_ID WHERE      t1.PRED_CLASS_ID = (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'parked on')      AND t1.IMG_ID = 1      AND t1.OBJ1_SAMPLE_ID != t1.OBJ2_SAMPLE_ID;
SELECT      (COUNT(CASE WHEN t.IMG_ID = 1 AND t.OBJ_CLASS = 'man' THEN t.OBJ_SAMPLE_ID ELSE NULL END) /       COUNT(t.OBJ_SAMPLE_ID)) FROM      IMG_OBJ t
SELECT COUNT(*)  FROM ATT_CLASSES;
SELECT COUNT(DISTINCT OBJ_CLASS)  FROM OBJ_CLASSES;
SELECT COUNT(DISTINCT PRED_CLASS_ID) AS Num_PredictedClasses  FROM PRED_CLASSES;
SELECT X, Y, W, H  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE IMG_ID = 2324765 AND OBJ_CLASSES.OBJ_CLASS = 'kite';
SELECT COUNT(*)  FROM IMG_OBJ  JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID  JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID  WHERE IMG_OBJ.IMG_ID = 2347915 AND ATT_CLASSES.ATT_CLASS = 'white';
SELECT COUNT(*)  FROM IMG_OBJ  JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID  JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID  WHERE IMG_OBJ.IMG_ID = 2377985 AND ATT_CLASSES.ATT_CLASS = 'electrical';
SELECT PRED_CLASS  FROM IMG_REL  WHERE IMG_ID = 2345511 AND OBJ1_SAMPLE_ID = 12 AND OBJ2_SAMPLE_ID = 8;
SELECT IMG_REL.OBJ1_SAMPLE_ID  FROM IMG_REL  JOIN IMG_OBJ ON IMG_REL.IMG_ID = IMG_OBJ.IMG_ID AND IMG_REL.OBJ2_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID  WHERE IMG_REL.OBJ2_SAMPLE_ID = 1 AND IMG_REL.IMG_ID = 2345524 AND IMG_REL.PRED_CLASS_ID IN (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'lying on');
SELECT COUNT(*)  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE IMG_ID = 6 AND OBJ_CLASSES.OBJ_CLASS = 'food';
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE OBJ_CLASSES.OBJ_CLASS = 'suit';
SELECT PRED_CLASS.PRED_CLASS AS Relationship FROM IMG_REL JOIN IMG_OBJ ON IMG_REL.OBJ1_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID AND IMG_REL.OBJ2_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID WHERE IMG_REL.IMG_ID = 2345528 AND OBJ_CLASSES.OBJ_CLASS IN ('feathers', 'onion') GROUP BY PRED_CLASS.PRED_CLASS;
SELECT T3.ATT_CLASS  FROM IMG_OBJ AS T1  JOIN IMG_OBJ_ATT AS T2 ON T1.IMG_ID = T2.IMG_ID   JOIN ATT_CLASSES AS T3 ON T2.ATT_CLASS_ID = T3.ATT_CLASS_ID  WHERE T1.IMG_ID = 2377988 AND T3.OBJ_CLASS = 'weeds';
SELECT      O.OBJ_CLASS  FROM      IMG_OBJ AS IO  JOIN      IMG_OBJ_ATT AS IOA ON IO.IMG_ID = IOA.IMG_ID  JOIN      ATT_CLASSES AS AC ON IOA.ATT_CLASS_ID = AC.ATT_CLASS_ID  JOIN      OBJ_CLASSES AS O ON IO.OBJ_CLASS_ID = O.OBJ_CLASS_ID  WHERE      AC.ATT_CLASS = 'blurry'  AND      IO.IMG_ID = 22377993;
SELECT COUNT(*)  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID  WHERE OBJ_CLASSES.OBJ_CLASS = 'wall'  AND IMG_OBJ.IMG_ID = 2353079;
SELECT OBJ_CLASS FROM IMG_OBJ WHERE IMG_ID = 2320341 AND OBJ_SAMPLE_ID = 10;
SELECT      COALESCE((COUNT(*) FILTER (WHERE OBJ_CLASS = 'broccoli') /                COUNT(*) FILTER (WHERE OBJ_CLASS = 'tomato')), 0) AS ratio FROM      IMG_OBJ img_obj  JOIN      OBJ_CLASSES obj_class ON img_obj.OBJ_CLASS_ID = obj_class.OBJ_CLASS_ID WHERE      obj_class.OBJ_CLASS IN ('broccoli', 'tomato')
SELECT COUNT(DISTINCT img_id)  FROM img_obj_att  WHERE img_id IN (     SELECT DISTINCT img_id      FROM img_obj_att      GROUP BY img_id      HAVING COUNT(ATT_CLASS_ID) >= 25 );
SELECT IMG_ID  FROM IMG_REL  WHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID;
SELECT COUNT(*)  FROM IMG_OBJ_ATT  WHERE ATT_CLASS_ID = (SELECT ATT_CLASS_ID FROM ATT_CLASSES WHERE ATT_CLASS = 'attribute_class_id_with_highest_objects');
SELECT DISTINCT IO.IMG_ID  FROM IMG_OBJ_IO  JOIN OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID  WHERE OC.OBJ_CLASS IN ('bus', 'train', 'aeroplane', 'car', 'etc.');
SELECT T1.ATT_CLASS  FROM ATT_CLASSES AS T1 JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID JOIN IMG_OBJ AS T3 ON T2.OBJ_SAMPLE_ID = T3.OBJ_SAMPLE_ID WHERE T1.ATT_CLASS = 'very large bike';
SELECT OBJ_CLASS_ID  FROM OBJ_CLASSES  WHERE OBJ_CLASS = 'onion';
SELECT DISTINCT ATT_CLASS  FROM image_and_language.ATT_CLASSES  JOIN image_and_language.IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID  WHERE IMG_OBJ_ATT.IMG_ID = 8;
SELECT IMG.ID, IMG.OBJ_SAMPLE_ID, IMG.X, IMG.Y, IMG.W, IMG.H  FROM IMG_OBJ AS IMG  JOIN IMG_REL AS REL ON IMG.IMG_ID = REL.IMG_ID  WHERE IMG.IMG_ID = 4 AND REL.PRED_CLASS_ID = 144;
SELECT COUNT(DISTINCT img_id)  FROM img_obj_att WHERE att_class_id IN (     SELECT att_class_id      FROM att_classes      WHERE att_class = 'black' )  GROUP BY img_id  HAVING COUNT(*) >= 5;
SELECT PRED_CLASS_ID  FROM IMG_OBJ  JOIN IMG_REL ON IMG_OBJ.IMG_ID = IMG_REL.IMG_ID  WHERE IMG_OBJ.H = (SELECT MAX(H) FROM IMG_OBJ)
SELECT IMG_ID  FROM IMG_OBJ_ATT  WHERE ATT_CLASS_ID IN (     SELECT ATT_CLASS_ID      FROM ATT_CLASSES      WHERE ATT_CLASS = 'white' ) GROUP BY IMG_ID  ORDER BY COUNT(ATT_CLASS_ID) DESC  LIMIT 1;
SELECT IMG.ID, IMG.X, IMG.Y  FROM IMG  JOIN IMG_REL ON IMG.ID = IMG_REL.IMG_ID  WHERE IMG_REL.PRED_CLASS_ID = 98;
SELECT COUNT(*)  FROM PRED_CLASSES  WHERE PRED_CLASS_ID IN (   SELECT PRED_CLASS_ID    FROM PRED_CLASSES    WHERE PRED_CLASS = 'has' ) AND IMG_ID = 3050;
SELECT DISTINCT o.OBJ_CLASS  FROM OBJ_CLASSES o  JOIN IMG_OBJ i ON o.OBJ_CLASS_ID = i.OBJ_CLASS_ID  WHERE i.X = 0 AND i.Y = 0;
SELECT PRED_CLASS  FROM IMG_REL  WHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID;
SELECT IMG_ID, OBJ_SAMPLE_ID, OBJ_CLASS_ID, X, Y, W, H  FROM IMG_OBJ  WHERE IMG_ID = 2222 AND OBJ_CLASS_ID IN (     SELECT OBJ_CLASS_ID      FROM OBJ_CLASSES      WHERE OBJ_CLASS = 'feathers' )
SELECT img_id  FROM img_rel  WHERE OBJ1_SAMPLE_ID != OBJ2_SAMPLE_ID  AND pred_class_id IN (     SELECT PRED_CLASS_ID      FROM pred_classes      WHERE PRED_CLASS = 'on' ) GROUP BY img_id HAVING COUNT(*) > 1;
SELECT OBJ_CLASS FROM IMG_OBJ WHERE X = 0 AND Y = 0 AND W = 135 AND H = 212;
SELECT IMG_OBJ.W, IMG_OBJ.H  FROM IMG_OBJ  JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID  JOIN OBJ_CLASSES ON IMG_OBJ_OBJ_ATT.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE IMG_OBJ.IMG_ID = 3 AND OBJ_CLASSES.OBJ_CLASS = 'keyboard';
SELECT X, Y  FROM IMG_OBJ  WHERE IMG_ID = 6 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'folk')
SELECT X, Y, W, H  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE IMG_ID = 285930 AND OBJ_CLASSES.OBJ_CLASS = 'onion';
SELECT COUNT(*) AS object_count  FROM IMG_OBJ  WHERE IMG_ID = 72;  SELECT OBJ_CLASS  FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID AND IMG_OBJ.OBJ_SAMPLE_ID = IMG_OBJ_ATT.OBJ_SAMPLE_ID  JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID  WHERE IMG_ID = 72 AND X = 341 AND Y = 27 AND W = 42 AND H = 51;
SELECT T3.ATT_CLASS  FROM IMG_ID = 5 AS T1  JOIN IMG_OBJ_ATT AS T2 ON T1.IMG_ID = T2.IMG_ID  JOIN ATT_CLASSES AS T3 ON T2.ATT_CLASS_ID = T3.ATT_CLASS_ID  GROUP BY T3.ATT_CLASS  HAVING COUNT(T2.ATT_CLASS_ID) >= 2;
SELECT DISTINCT A.ATT_CLASS  FROM ATT_CLASSES A  JOIN IMG_OBJ_ATT IOT ON A.ATT_CLASS_ID = IOT.ATT_CLASS_ID  JOIN IMG_OBJ IO ON IOT.OBJ_SAMPLE_ID = IO.OBJ_SAMPLE_ID  WHERE IO.IMG_ID = 27 AND IO.OBJ_CLASS_ID = (SELECT O.OBJ_CLASS_ID FROM OBJ_CLASSES O WHERE O.OBJ_CLASS = 'wall');
SELECT T3.OBJ_CLASS  FROM IMG_OBJ_ATT AS T1  JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID  JOIN OBJ_CLASSES AS T3 ON T2.OBJ_CLASS_ID = T3.OBJ_CLASS_ID  JOIN ATT_CLASSES AS T4 ON T1.ATT_CLASS_ID = T4.ATT_CLASS_ID  WHERE T4.ATT_CLASS = 'scattered' AND T2.IMG_ID = 10;
SELECT COUNT(DISTINCT img_id)  FROM img_obj  JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id  WHERE obj_classes.obj_class = 'bridge';
SELECT AVG(T1.count_obj_elements)  FROM      (SELECT COUNT(DISTINCT IMG_ID) AS count_obj_elements       FROM IMG_OBJ       GROUP BY IMG_ID) AS T1;
SELECT T3.ATT_CLASS  FROM IMG_OBJ AS T1  JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID  JOIN IMG_OBJ_ATT AS T4 ON T1.IMG_ID = T4.IMG_ID  JOIN ATT_CLASSES AS T3 ON T4.ATT_CLASS_ID = T3.ATT_CLASS_ID  WHERE T2.OBJ_CLASS = 'van' AND T1.IMG_ID = 1;
SELECT      o.OBJ_CLASS,     a.ATT_CLASS,     p.PRED_CLASS FROM      IMG_OBJ io JOIN      OBJ_CLASSES o ON io.OBJ_CLASS_ID = o.OBJ_CLASS_ID JOIN      IMG_OBJ_ATT ioa ON io.OBJ_SAMPLE_ID = ioa.OBJ_SAMPLE_ID AND io.IMG_ID = ioa.IMG_ID JOIN      ATT_CLASSES a ON ioa.ATT_CLASS_ID = a.ATT_CLASS_ID JOIN      IMG_REL ir ON io.IMG_ID = ir.IMG_ID JOIN      PRED_CLASSES p ON ir.PRED_CLASS_ID = p.PRED_CLASS_ID WHERE      io.IMG_ID = 1 AND      io.X = 388 AND      io.Y = 369 AND      io.W = 48 AND      io.H = 128;
SELECT PRED_CLASS  FROM IMG_REL  WHERE IMG_ID = 1 AND OBJ1_SAMPLE_ID = 25 AND OBJ2_SAMPLE_ID = 2;
SELECT COUNT(*)  FROM IMG_OBJ_ATT  WHERE IMG_ID = 4 AND OBJ_SAMPLE_ID = 7;
SELECT COUNT(*)  FROM IMG_OBJ  WHERE IMG_ID = 31;
SELECT ATT_CLASS_ID  FROM IMG_OBJ_ATT  WHERE IMG_ID = 20  GROUP BY ATT_CLASS_ID  ORDER BY COUNT(ATT_CLASS_ID) DESC  LIMIT 1;
SELECT X, Y, W, H  FROM IMG_OBJ  WHERE IMG_ID = 42 AND OBJ_SAMPLE_ID = 7;
SELECT      (COUNT(CASE WHEN t3.ATT_CLASS_ID = (SELECT ATT_CLASS_ID FROM ATT_CLASSES WHERE ATT_CLASS = 'white') THEN 1 ELSE NULL END) /       CAST(COUNT(*) AS REAL)) * 100 AS percentage FROM      IMG_OBJ_ATT AS t1 JOIN      IMG_OBJ AS t2 ON t1.IMG_ID = t2.IMG_ID JOIN      ATT_CLASSES AS t3 ON t3.ATT_CLASS_ID = t1.ATT_CLASS_ID WHERE      t2.IMG_ID = 99;
SELECT COUNT(*)  FROM IMG_OBJ_ATT  WHERE IMG_ID = 5;
SELECT OBJ_CLASS FROM OBJ_CLASSES WHERE OBJ_CLASS_ID = 10;
SELECT OBJ_CLASS FROM IMG_OBJ WHERE X = 422 AND Y = 63 AND W = 77 AND H = 363;
SELECT caption  FROM PRED_CLASSES  WHERE PRED_CLASS_ID = 12;
SELECT X, Y, W, H  FROM IMG_OBJ  WHERE IMG_ID = 8;
SELECT COUNT(*)  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE IMG_ID = 908 AND OBJ_CLASSES.OBJ_CLASS = 'tip';
SELECT COUNT(*)  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE IMG_ID = 41 AND OBJ_CLASSES.OBJ_CLASS = 'kitchen';
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE OBJ_CLASSES.OBJ_CLASS = 'paint';
SELECT COUNT(*)  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID  JOIN IMG_OBJ_ATT ON IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID  WHERE IMG_OBJ.IMG_ID = 2315533 AND OBJ_CLASSES.OBJ_CLASS = 'cloud';
SELECT DISTINCT OBJ_CLASS  FROM OBJ_CLASSES  JOIN IMG_OBJ ON OBJ_CLASSES.OBJ_CLASS_ID = IMG_OBJ.OBJ_CLASS_ID  JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID  JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID  WHERE ATT_CLASS = 'onion';
SELECT IMG_OBJ.X, IMG_OBJ.Y, IMG_OBJ.W, IMG_OBJ.H  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID AND IMG_OBJ.OBJ_SAMPLE_ID = IMG_OBJ_ATT.OBJ_SAMPLE_ID  JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID  WHERE OBJ_CLASSES.OBJ_CLASS = 'spoon' AND IMG_OBJ.IMG_ID = 1344;
SELECT      (SUM(CASE WHEN o.OBJ_CLASS = 'surface' THEN 1 ELSE 0 END) / COUNT(o.OBJ_CLASS_ID)) * 100 as percentage FROM      IMG_OBJ as i JOIN      OBJ_CLASSES as o ON i.OBJ_CLASS_ID = o.OBJ_CLASS_ID WHERE      i.IMG_ID = 2654;
SELECT COUNT(DISTINCT img_id)  FROM img_obj  JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id  WHERE obj_classes.obj_class = 'wood';
SELECT T3.OBJ_CLASS  FROM IMG_OBJ AS T1  JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID  JOIN OBJ_CLASSES AS T3 ON T3.OBJ_CLASS_ID = T2.OBJ_CLASS_ID  WHERE T1.H = (SELECT MAX(H) FROM IMG_OBJ WHERE IMG_ID = T1.IMG_ID)
SELECT      (SUM(CASE WHEN OBJ_CLASS = 'airplane' THEN 1 ELSE 0 END) * 100.0 / COUNT(OBJ_CLASS)) as percentage FROM      OBJ_CLASSES;
SELECT COUNT(*)  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE IMG_ID = 660 AND OBJ_CLASSES.OBJ_CLASS = 'animal';
SELECT COUNT(*)  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE OBJ_CLASSES.OBJ_CLASS = 'bed' AND IMG_OBJ.IMG_ID = 1098;
SELECT      O.OBJ_CLASS  FROM      IMG_OBJ I  JOIN      OBJ_CLASSES O ON I.OBJ_CLASS_ID = O.OBJ_CLASS_ID  WHERE      I.H = (SELECT MIN(H) FROM IMG_OBJ);
SELECT X, Y, W, H  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE IMG_ID = 250 AND OBJ_CLASSES.OBJ_CLASS = 'kitchen';
SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID HAVING COUNT(OBJ_SAMPLE_ID) > 20;
SELECT OBJ_SAMPLE_ID  FROM IMG_OBJ  WHERE IMG_ID = 8  ORDER BY W DESC  LIMIT 1;
SELECT IMG_ID, OBJ_SAMPLE_ID, X, Y  FROM IMG_OBJ  WHERE IMG_ID = 5 AND X = 634 AND Y = 468;
SELECT IMG_ID, OBJ_SAMPLE_ID  FROM IMG_OBJ_ATT  GROUP BY IMG_ID, OBJ_SAMPLE_ID  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT      (SUM(IMG_OBJ.OBJ_SAMPLE_ID) WHERE IMG_ID = 1) /      (SUM(IMG_OBJ.OBJ_SAMPLE_ID) WHERE IMG_ID = 6)
SELECT AVG(count_obj_sample)  FROM (     SELECT COUNT(T1.OBJ_SAMPLE_ID) AS count_obj_sample      FROM IMG_OBJ T1      GROUP BY T1.IMG_ID ) T2;
SELECT DISTINCT IMG_ID  FROM IMG_OBJ_ATT  WHERE ATT_CLASS_ID IN (     SELECT ATT_CLASS_ID      FROM ATT_CLASSES      WHERE ATT_CLASS = 'wired' );
SELECT DISTINCT OBJ_CLASS  FROM IMG_OBJ  WHERE IMG_ID = 10;
SELECT T1.ATT_CLASS  FROM ATT_CLASSES AS T1 JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID JOIN IMG_OBJ AS T3 ON T2.OBJ_SAMPLE_ID = T3.OBJ_SAMPLE_ID WHERE T3.OBJ_CLASS_ID = (SELECT T4.OBJ_CLASS_ID FROM OBJ_CLASSES AS T4 WHERE T4.OBJ_CLASS = 'tip') AND T3.IMG_ID = 1314;
SELECT PRED_CLASS  FROM IMG_REL  JOIN OBJ_CLASSES ON IMG_REL.OBJ1_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID AND OBJ_CLASSES.OBJ_CLASS_ID = IMG_OBJ.OBJ_CLASS_ID  JOIN OBJ_CLASSES ON IMG_REL.OBJ2_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID AND OBJ_CLASSES.OBJ_CLASS_ID = IMG_OBJ.OBJ_CLASS_ID  WHERE IMG_ID = 2360078 AND OBJ_CLASSES.OBJ_CLASS = 'chain' AND IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID AND OBJ_CLASSES.OBJ_CLASS = 'label';
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ  JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID  JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID  WHERE ATT_CLASSES.ATT_CLASS = 'polka dot';
SELECT T3.ATT_CLASS  FROM IMG_OBJ AS T1  JOIN IMG_OBJ_ATT AS T2 ON T1.IMG_ID = T2.IMG_ID   JOIN ATT_CLASSES AS T3 ON T3.ATT_CLASS_ID = T2.ATT_CLASS_ID  WHERE T1.IMG_ID = 400  ORDER BY T1.W DESC  LIMIT 1;
SELECT OBJ_CLASS FROM OBJ_CLASSES o JOIN (     SELECT OBJ_CLASS_ID, COUNT(*) AS img_count     FROM IMG_OBJ     GROUP BY OBJ_CLASS_ID ) i ON o.OBJ_CLASS_ID = i.OBJ_CLASS_ID ORDER BY i.img_count DESC LIMIT 1;
SELECT      IMG_OBJ.W,      IMG_OBJ.H  FROM      IMG_OBJ  JOIN      OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE      OBJ_CLASSES.OBJ_CLASS = 'van' AND      IMG_OBJ.IMG_ID = 1;
SELECT X, Y  FROM IMG_OBJ  JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID AND IMG_OBJ.OBJ_SAMPLE_ID = IMG_OBJ_ATT.OBJ_SAMPLE_ID  JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID  WHERE IMG_OBJ.IMG_ID = 1 AND ATT_CLASSES.ATT_CLASS = 'sparse';
SELECT      (COUNT(CASE WHEN o.OBJ_CLASS = 'street lights' THEN 1 END)      / CAST(TOTAL_COUNT AS REAL)) * 100 AS percentage FROM      IMG_OBJ o JOIN      OBJ_CLASSES oc ON o.OBJ_CLASS_ID = oc.OBJ_CLASS_ID JOIN      IMG_REL ir ON o.IMG_ID = ir.IMG_ID JOIN      PRED_CLASSES pc ON ir.PRED_CLASS_ID = pc.PRED_CLASS_ID WHERE      pc.PRED_CLASS = 'related_to';
SELECT      (COUNT(CASE WHEN OBJ_CLASS = 'windows' AND IMG_ID = 5 THEN 1 END)      / COUNT(CASE WHEN IMG_ID = 5 THEN 1 END)) * 100 as percentage FROM      IMG_OBJ WHERE      IMG_ID = 5;
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ  WHERE X = 5 AND Y = 5;
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ  WHERE EXISTS (   SELECT 1    FROM IMG_OBJ    WHERE IMG_OBJ.IMG_ID = IMG_OBJ.IMG_ID    GROUP BY IMG_ID    HAVING COUNT(OBJ_SAMPLE_ID) < 15 );
SELECT COUNT(DISTINCT img_id)  FROM img_obj_att  WHERE COUNT(ATT_CLASS_ID) = 10;
SELECT DISTINCT IMG_ID  FROM IMG_REL  WHERE (OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID) IN (     SELECT OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID      FROM IMG_REL      GROUP BY OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID      HAVING COUNT(DISTINCT PRED_CLASS_ID) > 1 );
SELECT COUNT(DISTINCT img_id)  FROM img_obj  WHERE obj_class_id IN (     SELECT obj_class_id      FROM obj_classes      WHERE obj_class IN ('vegetables', 'fruits') );
SELECT IMG_ID  FROM IMG_REL  JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID  WHERE PRED_CLASSES.PRED_CLASS = 'parked on';
SELECT DISTINCT o.OBJ_CLASS  FROM IMG_OBJ i  JOIN OBJ_CLASSES o ON i.OBJ_CLASS_ID = o.OBJ_CLASS_ID  WHERE i.X = 5 AND i.Y = 5;
SELECT COUNT(DISTINCT img_id)  FROM img_obj  JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id  WHERE obj_classes.obj_class = 'keyboard';
SELECT IMG_OBJ.W, IMG_OBJ.H  FROM IMG_OBJ  JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID  JOIN OBJ_CLASSES ON IMG_OBJ_OBJ_ATT.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE OBJ_CLASSES.OBJ_CLASS = 'keyboard' AND IMG_OBJ.X = 5 AND IMG_OBJ.Y = 647;
SELECT IMG_ID  FROM IMG_OBJ_ATT  WHERE ATT_CLASS_ID IN (     SELECT ATT_CLASS_ID      FROM ATT_CLASSES      WHERE ATT_CLASS = 'horse' );
SELECT T3.X, T3.Y  FROM ATT_CLASSES AS T1  JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID  JOIN IMG_OBJ AS T3 ON T2.OBJ_SAMPLE_ID = T3.OBJ_SAMPLE_ID  JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID  WHERE T1.ATT_CLASS = 'horse' AND T4.OBJ_CLASS = 'fur';
SELECT T1.ATT_CLASS  FROM ATT_CLASSES AS T1 JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID JOIN IMG_OBJ AS T3 ON T2.OBJ_SAMPLE_ID = T3.OBJ_SAMPLE_ID WHERE T3.IMG_ID = 15;
SELECT COUNT(DISTINCT img_id) FROM IMG_REL WHERE PRED_CLASS_ID IN (     SELECT PRED_CLASS_ID      FROM PRED_CLASSES      WHERE PRED_CLASS = 'reading' ) AND OBJ1_SAMPLE_ID <> OBJ2_SAMPLE_ID;
SELECT COUNT(*)  FROM IMG_ID  JOIN IMG_OBJ_ATT ON IMG_ID = IMG_OBJ_ATT.IMG_ID  JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID  WHERE ATT_CLASS = 'picture';
SELECT COUNT(DISTINCT IMG_ID)  FROM image_and_language.IMG_OBJ  JOIN image_and_language.IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID  JOIN image_and_language.ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID  JOIN image_and_language.OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE ATT_CLASSES.ATT_CLASS = 'picture'  AND OBJ_CLASSES.OBJ_CLASS = 'bear';
SELECT DISTINCT A.ATT_CLASS  FROM ATT_CLASSES A  JOIN IMG_OBJ_ATT IOTA ON A.ATT_CLASS_ID = IOTA.ATT_CLASS_ID  JOIN IMG_OBJ IO ON IOTA.OBJ_SAMPLE_ID = IO.OBJ_SAMPLE_ID  WHERE IO.X = 5 AND IO.Y = 5;
SELECT AVG(T.IMG_ID)  FROM image_and_language.IMG_OBJ_ATT AS T  JOIN image_and_language.OBJ_CLASSES AS O ON T.OBJ_SAMPLE_ID = O.OBJ_CLASS_ID  WHERE O.OBJ_CLASS = 'keyboard';
SELECT      (COUNT(CASE WHEN OBJ_CLASS = 'man' THEN IMG_ID END) /       COUNT(CASE WHEN OBJ_CLASS = 'person' THEN IMG_ID END)) AS ratio FROM      IMG_OBJ JOIN      OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID;
SELECT IMG_OBJ.IMG_ID, IMG_OBJ.OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_OBJ.IMG_ID = 17 AND IMG_OBJ.X = 0 AND IMG_OBJ.Y = 0;
SELECT X, W, Y, H  FROM IMG_OBJ  WHERE OBJ_SAMPLE_ID = 2;
SELECT COUNT(*)  FROM IMG_OBJ  WHERE IMG_ID = 12 AND Y = 0;
SELECT T1.ATT_CLASS  FROM ATT_CLASSES AS T1 JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID JOIN IMG_OBJ AS T3 ON T2.OBJ_SAMPLE_ID = T3.OBJ_SAMPLE_ID WHERE T3.IMG_ID = 22;
SELECT T3.OBJ_CLASS  FROM IMG_OBJ AS T1  JOIN OBJ_CLASSES AS T3 ON T3.OBJ_CLASS_ID = T1.OBJ_CLASS_ID  WHERE T1.IMG_ID = 36 AND T1.X = 0 AND T1.Y = 0;
SELECT IMG_ID, X, Y, W, H  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE OBJ_CLASSES.OBJ_CLASS = 'pizza'  LIMIT 10;
SELECT OBJ_CLASS FROM IMG_OBJ WHERE X = 126 AND Y = 363;
SELECT      OBJ_CLASS FROM      OBJ_CLASSES o JOIN      IMG_OBJ i  ON      o.OBJ_CLASS_ID = i.OBJ_CLASS_ID WHERE      i.IMG_ID = 56 GROUP BY      OBJ_CLASS ORDER BY      COUNT(*) DESC LIMIT 1;
SELECT      O.OBJ_CLASS,     I.W,     I.H FROM      IMG_OBJ I JOIN      OBJ_CLASSES O ON I.OBJ_CLASS_ID = O.OBJ_CLASS_ID WHERE      I.IMG_ID = 22;
SELECT PRED_CLASS FROM IMG_REL WHERE IMG_ID = 68;
SELECT COUNT(*)  FROM IMG_REL  WHERE IMG_ID = 107 AND PRED_CLASS_ID = (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'has');
SELECT PRED_CLASS FROM IMG_REL WHERE IMG_ID = 4434 GROUP BY PRED_CLASS ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) AS num_of_dresses, OBJ_CLASS_ID, X, Y  FROM OBJ_CLASSES  JOIN IMG_OBJ ON OBJ_CLASSES.OBJ_CLASS_ID = IMG_OBJ.OBJ_CLASS_ID  WHERE OBJ_CLASS = 'dress' AND IMG_OBJ.IMG_ID = 1764;
SELECT X, Y  FROM IMG_OBJ  JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID AND IMG_OBJ.OBJ_SAMPLE_ID = IMG_OBJ_ATT.OBJ_SAMPLE_ID  JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID  WHERE IMG_OBJ.IMG_ID = 23 AND ATT_CLASSES.ATT_CLASS = 'cast';
SELECT COUNT(*)  FROM ATT_CLASSES  JOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID  WHERE IMG_OBJ_ATT.IMG_ID = 2355735 AND ATT_CLASSES.ATT_CLASS = 'blue';
SELECT AVG(IMG_OBJ.W) AS avg_width, AVG(IMG_OBJ.H) AS avg_height, OBJ_CLASSES.OBJ_CLASS FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 47
SELECT firstName, lastName  FROM Master  WHERE birthCountry != 'USA' AND birthYear = 1990;
SELECT firstName  FROM Master  WHERE pos = 'F' AND shootCatch IS NULL;
SELECT firstName, lastName  FROM Master  WHERE NOT EXISTS (SELECT * FROM HOF WHERE Master.hofID = HOF.hofID);
SELECT firstName, birthYear, birthMon, birthDay  FROM Master  WHERE deathYear IS NULL  ORDER BY birthYear, birthMon, birthDay DESC  LIMIT 1;
SELECT firstName, lastName, deathYear - birthYear AS age_when_died FROM Master WHERE deathYear IS NOT NULL AND shootCatch IS NULL;
SELECT DISTINCT g.playerID, p.lastName, p.firstName FROM Goalies g JOIN (     SELECT DISTINCT tmID     FROM (         SELECT tmID, COUNT(*) as team_count         FROM (             SELECT year, tmID             FROM Goalies             WHERE year BETWEEN 2000 AND 2005             GROUP BY year, tmID         ) AS subquery         GROUP BY tmID         HAVING COUNT(*) > 2     ) AS multi_teams ) m ON g.tmID = m.tmID;
SELECT AVG(weight)  FROM Master  WHERE height > 72;
SELECT firstName, birthCountry  FROM Goalies  WHERE SUM(Min) > 5000;
SELECT DISTINCT g.playerID FROM Goalies g JOIN Master m ON g.playerID = m.playerID WHERE g.lgID IN ('PCHA', 'NHL');
SELECT      g.lastName,     sp.year AS season_with_most_played_time FROM      Goalies g JOIN      Scoring sp ON g.playerID = sp.playerID JOIN      Master m ON g.playerID = m.playerID WHERE      m.deathYear IS NOT NULL AND      sp.PostMin IS NOT NULL GROUP BY      g.lastName, sp.year ORDER BY      MAX(sp.PostMin) DESC LIMIT 1;
SELECT      g.playerID,      m.firstName AS given_name,     m.height,      m.weight,     DATEDIFF(YEAR, m.birthYear, YEAR(NOW())) AS age FROM      Goalies g JOIN      Master m ON g.playerID = m.playerID WHERE      g.tmID = 'COL' AND g.year BETWEEN 2000 AND 2010;
SELECT      g.playerID AS 'Player',     m.firstName AS 'First Name',     m.lastName AS 'Last Name',     a.year AS 'Season' FROM      Goalies AS g JOIN      Master AS m ON g.playerID = m.playerID JOIN      AwardsPlayers AS a ON m.playerID = a.playerID WHERE      a.award = 'Empty Net Goals' AND a.note LIKE '%>= 10%'
SELECT      g.playerID AS Player,     s.year AS Season FROM      Goalies g JOIN      Scoring s ON g.tmID = s.tmID AND g.year = s.year AND g.lgID = s.lgID WHERE      MIN(DIVIDE(g.GA, s.SA) * 100) = (         SELECT              MIN(divide(GA, SA) * 100)         FROM              Goalies g         JOIN              Scoring s ON g.tmID = s.tmID AND g.year = s.year AND g.lgID = s.lgID     ) ORDER BY      g.GA ASC;
SELECT DISTINCT T2.name  FROM Goalies AS T1  JOIN Teams AS T2 ON T1.tmID = T2.tmID  WHERE T1.year = 2005 AND T1.height < 72;
SELECT Teams.name AS team, Teams.year AS season  FROM Master JOIN Teams ON Master.tmID = Teams.tmID WHERE Master.playerID = 'aubinje01' AND Master.nameNick IS NOT NULL;
SELECT      g.playerID,     AVG(T2.Min / COUNT(T2.year)) as avg_season_time FROM      Goalies g JOIN      (SELECT          playerID,          year,          SUM(Min) as total_minutes      FROM          Goalies       GROUP BY          playerID,          year) T2 ON      g.playerID = T2.playerID GROUP BY      g.playerID HAVING      COUNT(T2.year) = (         SELECT MAX(COUNT(playerID))         FROM              (SELECT                  playerID,                  year              FROM                  Goalies)     ) ;
SELECT      g.playerID AS "Goalie",     c.year AS "Season" FROM      Goalies g JOIN      CombinedShutouts cs ON g.playerID = cs.IDgoalie1 AND g.year = cs.year JOIN      Coaches c ON g.tmID = c.tmID AND g.year = c.year WHERE      (cs.SHO / g.SA) * 100 = 5.00;
SELECT firstName, lastName  FROM Master  WHERE deathYear IS NOT NULL  AND birthCountry != deathCountry  ORDER BY birthYear;
SELECT firstName, firstNHL, firstWHA  FROM Master WHERE firstNHL IS NOT NULL AND firstWHA IS NOT NULL;
SELECT firstName, pos  FROM Master  WHERE deathYear IS NULL AND pos <> ''; -- Ensuring non-empty position field and that the player is living
SELECT      nameNick  FROM      Master  WHERE      height = (SELECT MAX(height) FROM Master)      AND lastNHL IS NOT NULL;
SELECT      CASE          WHEN birthYear >= 1990 THEN AVG(height) AS avg_height_after_1990         ELSE AVG(height) AS avg_height_before_1990     END FROM Master WHERE birthYear BETWEEN 1990 AND 2100;
SELECT DISTINCT g.name  FROM Goalies g  JOIN Master m ON g.playerID = m.playerID  JOIN Coaches c ON m.coachID = c.coachID  WHERE g.shootCatch = 'L' AND c.playoff > 0;
SELECT      g.playerID,      tm.name AS team_name,     bc.birthCountry AS birth_country FROM      Goalies g JOIN      Teams tm ON g.tmID = tm.tmID JOIN      abbrev bc ON tm.code = bc.Code WHERE      g.pos = 'G' AND      g.deathYear IS NOT NULL AND      bc.birthCountry = 'Canada';
SELECT      g.playerID,      g.year  FROM      Goalies g  JOIN      Teams t ON g.tmID = t.tmID AND g.year = t.year  WHERE      t.name = 'Boston Bruins' AND t.rank = 1;
SELECT Teams.name FROM Goalies JOIN Teams ON Goalies.tmID = Teams.tmID WHERE Goalies.firstNHL < 1950 AND Teams.deathYear IS NOT NULL;
SELECT c.firstName, t.name, t.year  FROM Coaches AS c JOIN Master AS m ON c.coachID = m.coachID WHERE m.pos IS NOT NULL AND c.notes LIKE '%retired%'
SELECT      c.firstName AS 'Coach Given Name',     t.name AS 'Team Name' FROM      Coaches c  JOIN      Teams t ON c.tmID = t.tmID JOIN      Master m ON c.coachID = m.coachID WHERE      m.playerID IS NULL AND -- Filter for coaches who were never players     (c.postw + c.postl) > 0, -- Ensure coach won or lost at least one game to calculate percentage     (c.postw / (c.postw + c.postl)) * 100 =      (SELECT          MAX((w / (w + l)) * 100)      FROM          Coaches c2       WHERE          c2.tmID = t.tmID AND          c2.coachID <> c.coachID AND          c2.postw + c2.postl > 0) -- Find maximum winning percentage among all coaches of the same team
SELECT      c.firstName,      c.lastName,      c.year,     (DIVIDE(c.w, c.g) * 100) AS winning_percentage FROM      Coaches c JOIN      Teams t ON c.tmID = t.tmID WHERE      c.tmID = 'DET';
SELECT      c.firstName AS given_name,     (c.birthDay + c.birthMon * 100 + c.birthYear) AS date_of_birth FROM      Coaches c JOIN      Teams t ON c.tmID = t.tmID WHERE      c.name = 'MTL' ORDER BY      COUNT(c.stint) DESC LIMIT 1;
SELECT g.lastName, g.firstName, t.name  FROM Goalies AS g JOIN Teams AS t ON g.tmID = t.tmID WHERE g.L > g.W AND g.year IN (SELECT DISTINCT year FROM Goalies) GROUP BY g.playerID, g.year, t.tmID HAVING COUNT(DISTINCT g.year) >= 2;
SELECT      playerID,     year,     (DIVIDE(W, GP) * 100) as win_percentage FROM      Goalies WHERE      birthYear = 1987 AND     shootCatch IS NULL ORDER BY      year;
SELECT firstName  FROM Master  WHERE playerID = 'aebisda01' AND pos = 'G';  SELECT AVG(Min) / GP AS avg_minutes FROM Goalies WHERE playerID = 'aebisda01';
SELECT firstName, lastName  FROM Goalies  JOIN Master ON Goalies.playerID = Master.playerID  WHERE birthYear > CURRENT_YEAR() AND DIVIDE(W, GP) * 100 > 50;
SELECT COUNT(DISTINCT playerID) AS numPlayers,        COUNT(DISTINCT coachID) AS numCoaches FROM AwardsPlayers  JOIN AwardsCoaches ON AwardsPlayers.playerID = AwardsCoaches.coachID WHERE AwardsPlayers.note LIKE '%posthumous%' UNION SELECT COUNT(DISTINCT playerID) AS numPlayers,        COUNT(DISTINCT coachID) AS numCoaches FROM AwardsPlayers, AwardsCoaches WHERE AwardsPlayers.note LIKE '%posthumous%' AND AwardsCoaches.note LIKE '%posthumous%';
SELECT COUNT(*)  FROM AwardsPlayers  JOIN Master ON AwardsPlayers.playerID = Master.playerID  WHERE AwardsPlayers.year = 1983 AND Master.pos = 'G';
SELECT COUNT(*)  FROM Coaches  WHERE year = 2007 AND notes LIKE '%interim%'
SELECT COUNT(*)  FROM CombinedShutouts  WHERE year = 1977 AND `R/P` = 'R';
SELECT COUNT(*)  FROM Scoring  JOIN Goalies ON Scoring.tmID = Goalies.tmID AND Scoring.year = Goalies.year  WHERE Scoring.year = 2005 AND Goalies.eng IS NOT NULL;
SELECT DISTINCT year  FROM Goalies  WHERE lgID = 'NHL' AND SA IS NOT NULL;
SELECT COUNT(*)  FROM TeamsPost  WHERE PostW = PostL;
SELECT name  FROM HOF  WHERE year = 1978;
SELECT COUNT(*)  FROM HOF  WHERE category = 'Builder';
SELECT COUNT(*)  FROM HOF  WHERE year > 1980 AND category = 'Player';
SELECT DISTINCT M.nameNick  FROM Master M  JOIN HOF H ON M.hofID = H.hofID  WHERE H.year = 2007;
SELECT H.year FROM HOF AS H JOIN Master AS M ON H.hofID = M.hofID WHERE M.height = (SELECT MAX(height) FROM Master)
SELECT      c.coachID,     a.award,     a.year,     a.lgID,     a.note FROM      Coaches c JOIN      Master m ON c.coachID = m.coachID JOIN      AwardsCoaches a ON c.coachID = a.coachID WHERE      m.birthCountry = 'Canada';
SELECT COUNT(*)  FROM Coaches  JOIN Teams ON Coaches.tmID = Teams.tmID  WHERE Teams.W > 30 AND Coaches.birthCountry = 'USA';
SELECT COUNT(*)  FROM Coaches  JOIN Master ON Coaches.coachID = Master.coachID  JOIN Teams ON Coaches.tmID = Teams.tmID   WHERE Master.birthCountry = 'Canada' AND Teams.lgID = 'NHL';
SELECT      c.coachID,     a.name,     ac.year,     ac.lgID,     ac.note FROM      Coaches c JOIN      AwardsCoaches ac ON c.coachID = ac.coachID JOIN      Master m ON c.coachID = m.coachID WHERE      m.birthYear = '1952';
SELECT COUNT(*)  FROM Coaches  JOIN AwardsCoaches ON Coaches.coachID = AwardsCoaches.coachID  JOIN Master ON Coaches.coachID = Master.coachID  WHERE AwardsCoaches.year = 1940 AND Master.birthCountry = 'Toronto';
SELECT COUNT(*)  FROM Coaches  JOIN HOF ON Coaches.coachID = HOF.hofID  WHERE HOF.year > 1940 AND HOF.deathYear IS NOT NULL;
SELECT      c.coachID,     a.name,     a.year,     a.award,     a.lgID,     a.note FROM      Coaches c JOIN      AwardsCoaches a ON c.coachID = a.coachID JOIN      Master m ON c.coachID = m.coachID WHERE      a.lgID = 'NHL' AND      c.deathYear IS NOT NULL;
SELECT COUNT(*)  FROM (Coaches c  JOIN HOF h ON c.coachID = h.hofID)  WHERE h.weight > 195;
SELECT firstName FROM Master  JOIN HOF ON HOF.hofID = Master.hofID  WHERE shootCatch IS NULL;
SELECT COUNT(DISTINCT hofID) FROM Master WHERE playerID IS NOT NULL AND coachID IS NOT NULL;
SELECT DISTINCT T5.birthCity  FROM AwardsPlayers AS T1 JOIN Master AS T5 ON T1.playerID = T5.playerID WHERE T1.year = 1970 AND T1.note LIKE '%Award Winner%';
SELECT COUNT(DISTINCT playerID)  FROM AwardsPlayers  JOIN Scoring ON AwardsPlayers.playerID = Scoring.playerID  JOIN Master ON Scoring.playerID = Master.playerID  WHERE Master.birthCity = 'Toronto'  AND AwardsPlayers.award = 'All-Rookie';
SELECT COUNT(*)  FROM AwardsPlayers  JOIN Master ON AwardsPlayers.playerID = Master.playerID  WHERE award = 'All-Rookie' AND Master.deathYear IS NOT NULL;
SELECT COUNT(*)  FROM (SELECT DISTINCT playerID        FROM Players        WHERE deathState = 'Massachusetts') AS DeathInMass  JOIN AwardsPlayers ON DeathInMass.playerID = AwardsPlayers.playerID;
SELECT awards.name, awards.year  FROM AwardsPlayers  JOIN Master ON AwardsPlayers.playerID = Master.playerID  WHERE Master.deathCity = 'Arlington';
SELECT DISTINCT firstName, lastName, nameNick  FROM Master  JOIN AwardsPlayers ON Master.playerID = AwardsPlayers.playerID  WHERE AwardsPlayers.award = 'All-Rookie' AND Master.birthMon = '3';
SELECT COUNT(DISTINCT h.hofID)  FROM Master m  JOIN HOF h ON m.hofID = h.hofID  WHERE m.birthMon IN ('7', '8');
SELECT birthMon  FROM Master  WHERE firstName IN (     SELECT firstName      FROM Master      WHERE MAX(COUNT(AwardsPlayers.award)) );
SELECT      M.firstName,      M.lastName,      M.birthYear,     COUNT(A.award) as total_awards FROM      Master M JOIN      AwardsPlayers A ON M.playerID = A.playerID GROUP BY      M.firstName,      M.lastName,      M.birthYear ORDER BY      total_awards DESC LIMIT 1;
SELECT      birthCountry  FROM      AwardsPlayers  GROUP BY      birthCountry  ORDER BY      COUNT(award) DESC  LIMIT 1;
SELECT DISTINCT birthCountry  FROM HOF  ORDER BY COUNT(hofID) DESC  LIMIT 1;
SELECT awardsplayers.pos  FROM awardsplayers  JOIN master ON awardsplayers.playerID = master.playerID  WHERE master.birthCountry = 'Canada'  AND awardsplayers.award = 'All-Rookie'
SELECT      AVG(weight / (height * height)) AS avg_bmi FROM      (SELECT DISTINCT coachID, weight, height FROM Coaches c JOIN HOF h ON c.coachID = h.hofID) subquery
SELECT      (COUNT(CASE WHEN M.birthCountry = 'USA' THEN 1 END)       OVER ()      / COUNT(*)       OVER ()      ) * 100 AS PercentageOfAmericansInHallOfFame FROM      HOF H JOIN      Master M ON H.hofID = M.hofID
SELECT MAX(year) - MIN(year) as years_played FROM AwardsPlayers WHERE playerID = 'healygl01';
SELECT Teams.tmID  FROM Teams  JOIN Master ON Teams.tmID = Master.tmID  WHERE Master.playerID = 'roypa01' AND Teams.year = 1992;
SELECT SUM(GP)  FROM Scoring  WHERE playerID = 'rutlewa01' AND year = 1967;
SELECT SUM(Min)  FROM Goalies  WHERE playerID = 'valiqst01' AND year = 2007;
SELECT COUNT(*)  FROM Scoring  JOIN Teams ON Scoring.tmID = Teams.tmID AND Scoring.year = Teams.year  WHERE Scoring.playerID = 'vanbijo01'  AND Scoring.year = 1990  AND Teams.year = 1990  AND TeamsPost.year = 1990  AND Teams.tmID = TeamsPost.tmID  AND Teams.lgID = TeamsPost.lgID  AND Scoring.pos = 'W';
SELECT COUNT(*)  FROM Goalies  WHERE playerID = 'vernomi01' AND year = 1998 AND T/OL IS NOT NULL AND T/OL <> 0;
SELECT COUNT(T2.w)  FROM AwardsCoaches AS T1  JOIN Coaches AS T2 ON T1.coachID = T2.coachID  WHERE T1.year = 1933 AND T1.award = 'Second Team All-Star';
SELECT      hof.hofID, hof.name  FROM      hof  JOIN      master ON hof.hofID = master.hofID  WHERE      master.legendsID = 'P194502' AND hof.note = 'posthumous';
SELECT awardsplayers.award, awardsplayers.pos  FROM awardsplayers JOIN master ON awardsplayers.playerID = master.playerID  WHERE master.firstName = 'Mike' AND master.lastName = 'Antonovich';
SELECT `birthCountry`, `birthState`, `birthCity`  FROM Coaches  WHERE `notes` LIKE '%co-coach%' AND year = 1998 AND coachID IN (     SELECT coachID      FROM Master      WHERE name = 'Dave Lewis' );
SELECT firstName, lastName  FROM Goalies  JOIN Master ON Goalies.playerID = Master.playerID  WHERE stint = 3  ORDER BY weight DESC  LIMIT 1;
SELECT firstName, lastName  FROM Master  JOIN Scoring ON Master.playerID = Scoring.playerID  WHERE Scoring.ENG = 10 AND Master.height = (SELECT MAX(height) FROM Master);
SELECT      g.shootCatch  FROM      Goalies AS g  JOIN      (SELECT playerID, MAX(SHO) as max_shots_on_goal       FROM Goalies       WHERE year = 2010       GROUP BY playerID) AS subq  ON g.playerID = subq.playerID  WHERE      subq.max_shots_on_goal = (         SELECT              MAX(SHO)          FROM              Goalies          WHERE              year = 2010     );
SELECT      firstName, lastName  FROM      Goalies  JOIN      Master ON Goalies.playerID = Master.playerID  WHERE      year = 2002 AND GA > 150  ORDER BY      (birthYear * 12 * 31 + birthMon * 31 + birthDay) ASC  LIMIT 1;
SELECT firstName, lastName  FROM Goalies  JOIN Master ON Goalies.playerID = Master.playerID  WHERE tmID = 'NJD'  ORDER BY (SA - GA) DESC  LIMIT 1;
SELECT Teams.name FROM Teams JOIN TeamsPost ON Teams.tmID = TeamsPost.tmID AND Teams.year = TeamsPost.year WHERE Teams.year = 2010 ORDER BY TeamsPost.PostENG DESC LIMIT 1;
SELECT Teams.year, Teams.PostPts  FROM Teams  JOIN CombinedShutouts ON Teams.tmID = CombinedShutouts.tmID  WHERE Teams.year = 1995 AND PostSHO = (SELECT MAX(PostSHO) FROM CombinedShutouts);
SELECT      c.coachID,     m.nameNick FROM      Coaches c JOIN      Main m ON c.coachID = m.coachID WHERE      c.year = 2009 ORDER BY      (c.w / (c.w + c.l)) DESC LIMIT 1;
SELECT      c.firstName || ' ' || c.lastName AS CoachFullName FROM      Coaches c JOIN      Teams t ON c.tmID = t.tmID AND c.year = t.year WHERE      c.year = 2011 AND      t.PPG / t.PPC = (SELECT MAX(PPG / PPC) FROM Teams WHERE year = 2011);
SELECT COUNT(*) AS num_games  FROM ScoringSC  WHERE playerID = 'broadpu01' AND year = 1922;
SELECT COUNT(T.year)  FROM TeamsPost AS T  JOIN Goalies AS G ON T.tmID = G.tmID  WHERE G.playerID = 'cleghsp01' AND T.lgID = 'NHL';
SELECT G  FROM ScoringSC  WHERE playerID = 'dyeba01' AND year = 1921;
SELECT      playerID,      year,      stint,      tmID,      lgID,      pos,      game = GP,      assists = A  FROM      ScoringSC  WHERE      series = 'Stanley Cup Finals'  ORDER BY      A DESC  LIMIT 1;
SELECT DISTINCT M.lgID  FROM Master AS M  JOIN Teams AS T ON M.playerID = T.tmID  WHERE M.playerID = 'adamsja01' AND T.year = 1920;
SELECT pos  FROM ScoringSC  WHERE playerID = 'hartgi01' AND (tmID, year) IN (     SELECT tmIDLoser, year      FROM SeriesPost      WHERE round = 'Finals'     UNION      SELECT tmIDWinner, year      FROM SeriesPost      WHERE round = 'Finals' );
SELECT COUNT(TmVsTm.W) AS RegularSeasonWins FROM TeamVsTeam JOIN (     SELECT tmID      FROM (         SELECT tmID, COUNT(DISTINCT playerID) AS goalieCount         FROM Goalies         WHERE year = 2011 AND PostGP > 0         GROUP BY tmID         HAVING COUNT(DISTINCT playerID) = 3     ) AS ThreeGoaliesPerTeam ) AS TargetTeams ON TeamVsTeam.tmID = TargetTeams.tmID WHERE TeamVsTeam.year = 2011 AND TeamVsTeam.lgID = 1 AND TeamVsTeam.W IS NOT NULL
SELECT birthYear FROM Goalies WHERE year = 2008 AND PostSA = (SELECT MAX(PostSA) FROM Goalies WHERE year = 2008);
SELECT      MAX(DATE_PART('year', hof.year)) - MAX(TO_DATE(Master.lastNHL::text || '-01-01', 'YYYY-MM-DD')) AS YearsAfterRetirement FROM      hockey.hof JOIN      hockey.Master ON hof.hofID = Master.hofID WHERE      hof.category = 'Player'     AND Master.firstName = 'Don'     AND Master.lastName = 'Waddell';
SELECT      shootCatch FROM      Goalies WHERE      year = 1996 ORDER BY      SHO DESC LIMIT 1;
SELECT      CONCAT(birthYear, '/', birthMon, '/', birthDay) AS Birthday FROM      Goalies WHERE      year = '1965' AND      GA = (         SELECT MAX(GA)          FROM Goalies          WHERE year = '1965'     );
SELECT firstName, lastName  FROM Scoring  WHERE year = '1981' AND +/- = (SELECT MAX(+/_) FROM Scoring WHERE year = '1981');
SELECT T1.weight  FROM Master AS T1  JOIN Scoring AS T2 ON T1.playerID = T2.playerID  WHERE T2.year BETWEEN 2000 AND 2099  AND T2.PPG > (SELECT MAX(PPG) FROM Scoring WHERE year BETWEEN 2000 AND 2099)
SELECT firstName, lastName  FROM Scoring  JOIN Master ON Scoring.playerID = Master.playerID  WHERE Scoring.year = 1989 AND Scoring.SHG = 7 AND Master.shootCatch = 'shoot';
SELECT firstName, lastName  FROM Scoring  WHERE year = 1986  ORDER BY GWG DESC  LIMIT 1;
SELECT SUM(SOG)  FROM Scoring  WHERE playerID = (SELECT playerID FROM Master WHERE lastName = 'Neely' AND firstName = 'Cam')  AND year = 1990;
SELECT      c.firstName + ' ' + c.lastName AS CoachName FROM      Coaches c JOIN      Teams t ON c.tmID = t.tmID AND c.year = t.year WHERE      c.year = 2003 AND      t.BenchMinor = (SELECT MAX(BenchMinor) FROM Teams WHERE year = 2003)
SELECT playerID FROM Goalies WHERE weight > 190 AND year = 1978 ORDER BY GA DESC LIMIT 1;
SELECT      (SUM(CASE WHEN coachID = (SELECT coachID FROM Coaches WHERE year = 2006 AND tmID = 'VAN' AND coachID IS NOT NULL) THEN W ELSE 0 END) / SUM(CASE WHEN coachID = (SELECT coachID FROM Coaches WHERE year = 2006 AND tmID = 'VAN' AND coachID IS NOT NULL) THEN W ELSE 0, L)) * 100 AS WinningRateImprovement FROM      Teams WHERE      year >= 2005 AND year <= 2006 AND tmID = 'VAN';
SELECT `legendsID` FROM Goalies WHERE `year` = '2011' ORDER BY (1 - (PostGA / PostSA)) * 100 DESC LIMIT 1;
SELECT COUNT(DISTINCT c.coachID) FROM Coaches AS c WHERE c.notes LIKE '%former athlete%';
SELECT Teams.name FROM Teams JOIN (SELECT lgID, COUNT(T.T) AS total_ties       FROM Teams T       GROUP BY lgID       ORDER BY total_ties DESC       LIMIT 1) AS most_ties ON Teams.lgID = most_ties.lgID WHERE Teams.BenchMinor - (SELECT SUM(PostBenchMinor) FROM AwardsPlayers WHERE AwardsPlayers.year = Teams.year AND AwardsPlayers.tmID = Teams.tmID) > 0;
SELECT awardsCoaches.award  FROM AwardsCoaches  JOIN Coaches ON awardsCoaches.coachID = coaches.coachID  WHERE coaches.w > (SELECT MAX(w) FROM Coaches WHERE lgID = 'NHL') ORDER BY awardsCoaches.year DESC  LIMIT 1;
SELECT Teams.year, Teams.L, Scoring.yr, Scoring.PPG  FROM Teams  JOIN Scoring ON Teams.tmID = Scoring.tmID AND Teams.year = Scoring.yr  WHERE Teams.L = (SELECT MAX(L) FROM Teams) ORDER BY Teams.year ASC, Scoring.yr ASC  LIMIT 1;
SELECT AVG(T1.year) as average_years FROM HOF AS T1 WHERE T1.year BETWEEN 1950 AND 1980;
SELECT      birthCountry,     MAX(birthYear) as year_most_born FROM      Master GROUP BY      birthCountry ORDER BY      COUNT(playerID) DESC LIMIT 1;
SELECT COUNT(*) AS total_shutouts  FROM Goalies  JOIN Scoring ON Goalies.playerID = Scoring.playerID  WHERE Scoring.SHO = 1;
SELECT tmID FROM Teams WHERE year = 2005 AND rW IS NOT NULL ORDER BY rW DESC LIMIT 1;
SELECT pos  FROM Master  WHERE birthYear = (SELECT MIN(birthYear) FROM Master) + 8;
SELECT SUM(PostGA) AS TotalGoalsAgainst FROM Goalies WHERE year = 1924 AND lgID = 'WCHL' ORDER BY PostGA DESC LIMIT 1;
SELECT tmID FROM TeamsHalf WHERE year = 2006 AND half = 'Oct' ORDER BY OctL DESC LIMIT 1;
SELECT COUNT(*)  FROM Master  WHERE shootCatch IS NULL AND firstNHL = 2011;
SELECT      T1.year AS year_reached_max_goals,     T1.birthYear AS age_when_max_goals,     MAX(T1.G) AS max_goals_reached FROM      Scoring AS T1 GROUP BY      T1.year,      T1.birthYear ORDER BY      MAX(T1.G) DESC LIMIT 1;
SELECT      Teams.tmID,     AVG(Players.height) AS average_height FROM      Goalies GoaliesTable  JOIN      Players MasterTable ON GoaliesTable.playerID = MasterTable.playerID JOIN      Teams TeamsTable ON GoaliesTable.tmID = TeamsTable.tmID WHERE      GoaliesTable.pos = 'G' AND     GoaliesTable.birthYear BETWEEN '1970' AND '1979' AND     MasterTable.shootCatch = 'L' GROUP BY      Teams.tmID ORDER BY      average_height DESC LIMIT 1;
SELECT      CONCAT(nameGiven, ' ', lastName) AS FullName,     SUM(A) AS TotalAssists FROM      Scoring WHERE      lgID = 'NHL' GROUP BY      playerID ORDER BY      TotalAssists DESC LIMIT 1;
SELECT      Teams.tmID,     Teams.name AS team_name,     SeriesPost.tmIDWinner,     SeriesPost.tmIDLoser,     Teams.tmID = SeriesPost.tmIDWinner AS is_victorious,     (SUM(Teams.PPG) / SUM(Teams.PPC)) * 100 AS power_play_percentage FROM      Teams JOIN      SeriesPost ON SeriesPost.tmIDLoser = Teams.tmID GROUP BY      Teams.tmID,     SeriesPost.tmIDWinner,     SeriesPost.tmIDLoser,     Teams.tmID = SeriesPost.tmIDWinner ORDER BY      SUM(Teams.PPC) ASC LIMIT 1;
SELECT c.coachID FROM Coaches c JOIN Teams t ON c.tmID = t.tmID WHERE t.W > (SELECT MAX(W) FROM Teams)
SELECT Teams.name  FROM Teams  JOIN SeriesPost ON Teams.tmID = SeriesPost.tmIDLoser  WHERE SeriesPost.year = 1912 AND SeriesPost.note = 'EX';
SELECT      CONCAT(firstName, ' ', lastName) AS fullName,     YEAR(current_year) - firstNHL(playerID(min(PIM + L - W))) AS durationSinceFirstNHL FROM      (SELECT MIN(PIM + L - W) as minPIM_minus_W FROM ScoringSC WHERE lgID = 'NHL') AS minIceTimeDiff,     abbrev AS ab,     (SELECT playerID FROM ScoringSC WHERE lgID = 'NHL' AND PIM + L - W = minIceTimeDiff.minPIM_minus_W LIMIT 1) AS currentPlayerID,     Master AS m WHERE      currentPlayerID.playerID = m.playerID AND     ab.Code = 'NHL';
SELECT firstName  FROM Scoring  WHERE year BETWEEN 2003 AND 2005  GROUP BY playerID  HAVING SUM(GP) = (SELECT MAX(sum_gp) FROM                    (SELECT playerID, SUM(GP) as sum_gp                     FROM Scoring                     WHERE year BETWEEN 2003 AND 2005                     GROUP BY playerID) temp                   ) AND PIM BETWEEN 200 AND 250;
SELECT      MIN(ga) AS min_goals_on_ice,     MAX(birthYear) - COALESCE(lastNHL, 2022) AS age_at_retirement FROM      Goalies WHERE      position = 'G'     AND lastNHL IS NOT NULL;
SELECT      awardsPlayers.pos,     awardsPlayers.award,     awardsPlayers.year,     master.nameGiven,     master.lastName FROM      awardsPlayers JOIN      master ON awardsPlayers.playerID = master.playerID WHERE      awardsPlayers.pos = (SELECT pos FROM awardsPlayers GROUP BY pos ORDER BY COUNT(award) DESC LIMIT 1) AND      awardsPlayers.year = (SELECT MAX(year) FROM awardsPlayers WHERE pos = (SELECT pos FROM awardsPlayers GROUP BY pos ORDER BY COUNT(award) DESC LIMIT 1)) ORDER BY      awardsPlayers.year DESC;
SELECT SUM(T2.g)  FROM Coaches AS T2  JOIN AwardsCoaches AS T3 ON T2.coachID = T3.coachID  JOIN AwardsMisc AS T4 ON T4.award = 'Second Team All-Star' AND T4.year = MIN(T4.year)  WHERE T4.note IS NOT NULL;
SELECT      Teams.name AS 'Team with most victories',     TeamsOpp.opppName AS 'Opposing Team' FROM      (SELECT tmID, COUNT(*) as victories FROM TeamsPost WHERE year = 1915 GROUP BY tmID ORDER BY victories DESC LIMIT 1) AS MaxVictoriesTeams JOIN      TeamVsTeam AS TeamsOpp ON MaxVictoriesTeams.tmID = TeamsOpp.tmID JOIN      Teams AS Teams ON MaxVictoriesTeams.tmID = Teams.tmID WHERE      MaxVictoriesTeams.victories = TeamsOpp.W;
SELECT      s.playerID,      COUNT(s.playerID) AS total_critical_moments  FROM      Scoring s  WHERE      s.SHG BETWEEN 1 AND 5  GROUP BY      s.playerID  ORDER BY      total_critical_moment DESC  LIMIT 1;
SELECT coachID  FROM Coaches  WHERE year = 1997  AND tmID = 'TBL'  AND notes LIKE '%interim%'  AND w IS NOT NULL;
SELECT      T1.year,      T1.name  FROM      Teams AS T1      JOIN (         SELECT              playerID,              SUM(SHA) as total_SHAs          FROM              ScoringShootout          GROUP BY              playerID          HAVING              total_SHAs >= 7     ) AS T2 ON T1.tmID = T2.playerID  WHERE      T1.tmID IN (         SELECT              tmID          FROM              ScoringShootout          WHERE              SHA >= 7          GROUP BY              tmID          ORDER BY              SUM(SHA) DESC          LIMIT 1     );
SELECT      c.coachID  FROM      Coaches AS c JOIN      Teams AS t ON c.tmID = t.tmID WHERE      c.year = 1969 AND t.rank = 4;
SELECT Teams.name  FROM Teams  WHERE year BETWEEN 1917 AND 1920  AND half = 1  AND rank = 1;
SELECT      CONCAT(firstName, ' ', lastName) AS fullName,     year,     name FROM      Scoring WHERE      birthCountry = 'Canada'     AND (EXTRACT(YEAR FROM CURRENT_DATE) - birthYear) BETWEEN 18 AND 24     AND G < 5;
SELECT SUM(Teams.BenchMinor) FROM Teams JOIN TeamsPost ON Teams.tmID = TeamsPost.tmID AND Teams.lgID = TeamsPost.lgID WHERE Teams.name = 'St. Louis Blues';
SELECT Teams.PPG / Teams.PPC as PowerPlayChances FROM Teams JOIN TeamsPost ON Teams.tmID = TeamsPost.tmID AND Teams.year = TeamsPost.year WHERE Teams.name = 'New York Rangers' AND TeamsPost.year = 2009;
SELECT year, MAX(Pts) as highest_total_points FROM Teams;
SELECT COUNT(*)  FROM Teams  WHERE year = 2006 AND W > L AND Pts > 100;
SELECT name  FROM Teams  WHERE year = 2006 AND BenchMinor IS NOT NULL  ORDER BY BenchMinor DESC  LIMIT 1;
SELECT name  FROM Teams  WHERE year = 2006  ORDER BY PIM DESC  LIMIT 3;
SELECT Teams.name FROM Teams JOIN TeamsPost ON Teams.tmID = TeamsPost.tmID AND Teams.year = TeamsPost.year WHERE Teams.year = 1995 AND (Teams.tmID = 'FLA' AND TeamsPost.PKG > ALL (SELECT TeamsPost.PKG FROM TeamsPost WHERE Teams.year = 1995 AND (Teams.tmID = 'EDM' OR Teams.tmID = 'LAK')))  OR (Teams.tmID = 'EDM' AND TeamsPost.PKG > ALL (SELECT TeamsPost.PKG FROM TeamsPost WHERE Teams.year = 1995 AND (Teams.tmID = 'FLA' OR Teams.tmID = 'LAK'))) OR (Teams.tmID = 'LAK' AND TeamsPost.PKG > ALL (SELECT TeamsPost.PKG FROM TeamsPost WHERE Teams.year = 1995 AND (Teams.tmID = 'FLA' OR Teams.tmID = 'EDM')));
SELECT Teams.name  FROM Teams  JOIN TeamsPost ON Teams.tmID = TeamsPost.tmID  WHERE TeamsPost.year = 1917 AND TeamsPost.W > TeamsPost.L;
SELECT DISTINCT teams.tmID FROM teams JOIN teams_post ON teams.tmID = teams_post.tmID AND teams.year = teams_post.year AND teams.lgID = teams_post.lgID WHERE teams.year = 1922 AND teams_post.lgID = 'Stanley Cup';
SELECT COUNT(*)  FROM Teams  WHERE year = 1922 AND Pts > 20;
SELECT Teams.PIM  FROM Teams  JOIN TeamVsTeam ON Teams.tmID = TeamVsTeam.tmID  WHERE Teams.year = 1922 AND Teams.rank = 2 AND TeamVsTeam.series = 'Stanley Cup Finals';
SELECT name  FROM TeamsSC  WHERE year = (SELECT year FROM TeamsSC ORDER BY W DESC LIMIT 1)  AND lgID = 'NHL';
SELECT COUNT(*)  FROM TeamVsTeam  WHERE year = 1985 AND tmID = (SELECT tmID FROM Teams WHERE name = 'Philadelphia Flyers') AND oppID = 'BOS' AND W IS NOT NULL;
SELECT Teams.name  FROM Teams  WHERE Teams.T == 1 AND Teams.year = 1909;
SELECT firstName  FROM Coaches  JOIN Teams ON Coaches.tmID = Teams.tmID  WHERE Teams.name = 'Montreal Canadiens';
SELECT COUNT(*)  FROM Coaches  JOIN Teams ON Coaches.tmID = Teams.tmID  JOIN Master ON Coaches.coachID = Master.coachID  WHERE Teams.name = 'Montreal Canadiens' AND Master.hofID IS NOT NULL;
SELECT MAX(Master.height)  FROM Master  JOIN Coaches ON Master.coachID = Coaches.coachID  WHERE Coaches.tmID = (SELECT tmID FROM Teams WHERE name = 'Montreal Canadiens');
SELECT firstName FROM Teams WHERE year = 1922 AND playoff = 'Y';
SELECT COUNT(*)  FROM Coaches  JOIN Master ON Coaches.coachID = Master.coachID  JOIN Teams ON Coaches.tmID = Teams.tmID   WHERE Master.name LIKE 'Philadelphia Flyers' AND MONTH(Teams.birthMonth) = 3;
SELECT COUNT(*)  FROM Coaches  JOIN Master ON Coaches.coachID = Master.coachID  JOIN Teams ON Coaches.tmID = Teams.tmID   WHERE Master.birthCountry = 'USA' AND Teams.name = 'Philadelphia Flyers';
SELECT COUNT(*)  FROM Coaches  JOIN Teams ON Coaches.tmID = Teams.tmID  WHERE Teams.name = 'Buffalo Sabres' AND Coaches.coachID IN (SELECT hofID FROM HOF WHERE deathYear IS NOT NULL);
SELECT DISTINCT c.nameNick FROM Coaches c JOIN Teams t ON c.tmID = t.tmID JOIN abbrev a ON t.lgID = a.Code WHERE a.Fullname = 'NHL' AND c.birthCountry = 'USA' AND t.name = 'Buffalo Sabres';
SELECT COUNT(*)  FROM Coaches  JOIN Teams ON Coaches.tmID = Teams.tmID  WHERE Teams.year = 1922 AND Teams.lgID = 'Stanley Cup' AND Teams.rank = 'Finals' AND Master.birthCountry = 'USA';
SELECT Teams.name FROM Teams JOIN TeamVsTeam ON Teams.tmID = TeamVsTeam.tmID JOIN Teams AS BuffaloSabres ON TeamVsTeam.oppID = BuffaloSabres.tmID WHERE TeamVsTeam.year = 2000 AND BuffaloSabres.name = 'Buffalo Sabres' ORDER BY TeamVsTeam.G DESC LIMIT 1;
SELECT DISTINCT T2.name  FROM TeamVsTeam AS T1  JOIN Teams AS T2 ON T1.tmID = T2.tmID  JOIN Teams AS T3 ON T1.oppID = T3.tmID  WHERE T3.name = 'Buffalo Sabres';
SELECT TeamsPost.PIM FROM TeamsPost JOIN Teams ON Teams.tmID = TeamsPost.tmID AND Teams.year = 1918 WHERE Teams.name = 'Montreal Canadiens';
SELECT Teams.year, Teams.PostW  FROM Teams  JOIN TeamsPost ON Teams.tmID = TeamsPost.tmID AND Teams.year = TeamsPost.year  WHERE (Teams.tmID = 'MTL' AND TeamsPost.lgID = 'NHL' AND TeamsPost.PostPIM = 24);
SELECT Teams.year  FROM Teams  JOIN TeamsPost ON Teams.tmID = TeamsPost.tmID AND Teams.lgID = TeamsPost.lgID  WHERE Teams.name = 'Montreal Canadiens'  AND TeamsPost.PIM = 49  AND TeamsPost.lgID = 'Stanley Cup finals';
SELECT firstName  FROM Coaches  JOIN Teams ON Coaches.tmID = Teams.tmID  WHERE Teams.name = 'Montreal Canadiens' AND MIN(Coaches.year);
SELECT      AVG(T.PostW / T.PostG) * 100 AS average_winning_rate FROM      TeamsPost T JOIN      TeamVsTeam TVT ON T.tmID = TVT.tmID AND T.year = TVT.year WHERE      T.year = 2000 AND T.name = 'Buffalo Sabres';
SELECT AVG(T.PIM)  FROM TeamsPost T  JOIN TeamsTD T1 ON T.TmID = T1.TmID AND T.lgID = T1.lgID AND T.year = T1.year AND T1.name = 'Montreal Canadiens'  WHERE T.postGP > 0;
SELECT      AVG(DIVIDE(SUM(CASE WHEN T.tmID = 'MONTREAL_HCAN' THEN W ELSE 0 END), SUM(CASE WHEN T.tmID = 'MONTREAL_HCAN' THEN G ELSE 0 END))) * 100 AS avg_win_rate FROM      TeamsPost T WHERE      T.tmID = 'MONTREAL_HCAN' AND T.lgID = 'NHL';
SELECT      (COUNT(CASE WHEN c.name = 'Montreal Canadiens' AND mc.birthCountry = 'USA' THEN 1 END)      / COUNT(CASE WHEN c.name = 'Montreal Canadiens' THEN 1 END)) * 100 AS percentage FROM Coaches c JOIN Master mc ON c.coachID = mc.coachID;
SELECT      hof.name  FROM      HOF  WHERE      hof.category NOT IN ('player', 'builder')  ORDER BY      hof.year DESC  LIMIT 1;
SELECT h.hofID FROM HOF AS h JOIN Master AS m ON h.hofID = m.hofID WHERE h.year BETWEEN 1970 AND 1979 AND m.pos = 'Referee';
SELECT COUNT(*)  FROM HOF  WHERE year = 1958 AND category = 'hall of famers';
SELECT COUNT(*)  FROM hof  WHERE hofID IS NOT NULL AND name IS NOT NULL;
SELECT COUNT(*)  FROM hockey.AwardsPlayers  WHERE lastName = 'Green' AND playerID IS NOT NULL AND coachID IS NULL;
SELECT Teams.BenchMinor FROM Teams JOIN Coaches ON Teams.tmID = Coaches.tmID AND Teams.year = Coaches.year AND Coaches.coachID = (     SELECT c.coachID      FROM Coaches c      WHERE c.name = 'Scotty Bowman' AND c.year = 1982 ) WHERE Teams.year = 1982;
SELECT firstName, lastName  FROM Scoring  JOIN Master ON Scoring.playerID = Master.playerID  WHERE Scoring.ENG = 10 AND Master.height IS NOT NULL  ORDER BY Master.height DESC  LIMIT 1;
SELECT firstName, lastName  FROM Goalies  JOIN Master ON Goalies.playerID = Master.playerID  WHERE year = 1973 AND tmID = 'QUN' AND GP = 32;
SELECT COUNT(DISTINCT tmID)  FROM Goalies  WHERE lastName = 'Young';
SELECT      c.coachID  FROM      Coaches AS c JOIN      Goalies AS g ON c.tmID = g.tmID AND c.year = g.year JOIN      Master AS m ON c.coachID = m.coachID WHERE      c.tmID = 'BOS'  AND      c.year = 1972  AND      c.coachID IS NOT NULL  AND      m.hofID IS NULL;
SELECT COUNT(*) AS games_played FROM Goalies WHERE legendsID = 'P196402';
SELECT firstName, lastName  FROM Goalies  JOIN Teams ON Goalies.tmID = Teams.tmID  WHERE Teams.name = 'Quebec Bulldogs' AND pos = 'G'  ORDER BY Min DESC  LIMIT 1;
SELECT COUNT(*)  FROM Goalies  JOIN Teams ON Goalies.tmID = Teams.tmID  WHERE Teams.name = 'Calgary Flames';
SELECT      g.playerID,      g.name AS "Goalkeeper Name",     MAX(g.GA) AS "Most Goals Against" FROM      Goalies g JOIN      Teams t ON g.tmID = t.tmID WHERE      t.name = 'Minnesota North Stars' GROUP BY      g.playerID;
SELECT COUNT(*)  FROM Goalies  JOIN Master ON Goalies.playerID = Master.playerID  WHERE Master.name LIKE '%Haileybury Hockey Club%' AND Master.hofID IS NOT NULL;
SELECT `shootCatch`  FROM Goalies  WHERE year = 2010 AND `PostSHO` = (SELECT MAX(SHO) FROM Goalies WHERE year = 2010);
SELECT      (SUM(CASE WHEN year = 2006 THEN GP ELSE 0 END) - SUM(CASE WHEN year = 2005 THEN GP ELSE 0 END)) * 100 / SUM(CASE WHEN year = 2005 THEN GP ELSE 1 END) AS decrease_rate FROM Goalies WHERE playerID = (SELECT playerID FROM Master WHERE lastName = 'Aebischer' AND firstName = 'David')
SELECT playerID, coachID  FROM Master  WHERE playerID IS NOT NULL AND coachID IS NOT NULL;
SELECT playerID FROM Master WHERE AVG(height) = 75;
SELECT playerID FROM Master WHERE weight = (SELECT MAX(weight) FROM Master) LIMIT 5;
SELECT fullname FROM abbrev  JOIN Master ON abbrev.Code = Master.birthCountry  WHERE abbrev.Fullname = 'Finland';
SELECT playerID FROM Master WHERE deathYear IS NOT NULL;
SELECT firstName  FROM Coaches  WHERE year > 2000;
SELECT      c.firstName,      c.lastName,      m.height,      m.weight  FROM      Coaches c  JOIN      AwardsCoaches ac ON c.coachID = ac.coachID  JOIN      Master m ON c.coachID = m.coachID  WHERE      ac.year = 1930;
SELECT      SUM(sc.G) AS TotalGoals,     TIMESTAMPDIFF(YEAR, sc.birthYear, CURDATE()) AS Age FROM      Scoring sc WHERE      sc.playerID = 'aaltoan01';
SELECT DISTINCT c.coachID  FROM Coaches c  JOIN AwardsCoaches ac ON c.coachID = ac.coachID  WHERE c.playerID IS NULL AND ac.award IS NOT NULL;
SELECT playerID FROM Scoring WHERE pos = 'L' AND weight > 200;
SELECT SUM(T2.GP) AS TotalGamesPlayed FROM Master AS T1 JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'USA';
SELECT DISTINCT c.firstName, c.lastName  FROM Coaches c  JOIN Teams t ON c.tmID = t.tmID  WHERE t.tmID = 'ANA' AND c.coachID = t.hofID;
SELECT G  FROM Teams  WHERE year = 1976 AND name = 'BIR' AND divID = 'EW';
SELECT COUNT(T.L), SUM(S.A) FROM Teams AS T JOIN Scoring AS S ON T.tmID = S.tmID AND T.year = S.year WHERE T.tmID = 'BOS' AND T.year = 2010;
SELECT SUM(T2.weight)  FROM Teams AS T1  JOIN Master AS T2 ON T1.tmID = T2.playerID  WHERE T1.year = 1997 AND T1.name = 'ANA';
SELECT T1.tmID FROM Teams AS T1 JOIN (     SELECT playerID, MIN(height) as min_height     FROM Master     WHERE year BETWEEN 1925 AND 1936 ) AS T2 ON T1.playerID = T2.playerID;
SELECT      Teams.tmID,     abbrev.Fullname,     COUNT(CASE WHEN Teams.W > Teams.L THEN 1 ELSE NULL END) AS Wins,     COUNT(Teams.tmID) AS TotalGames,     COUNT(CASE WHEN Teams.W > Teams.L THEN 1 ELSE NULL END) / COUNT(Teams.tmID) * 100.0 AS WinningRate FROM      Teams JOIN      abbrev ON Teams.tmID = abbrev.Code WHERE      Teams.year = 2000 GROUP BY      Teams.tmID,     abbrev.Fullname ORDER BY      WinningRate DESC LIMIT 1;
SELECT      T1.playerID  FROM      (SELECT          T1.playerID,          SUM(T1.W) AS total_wins,          COUNT(T1.tmID) AS games_played       FROM           (SELECT               year,               tmID,               COUNT(DISTINCT playerID) AS W            FROM                Scoring            WHERE                year = 1998 AND tmID = 'CAR'            GROUP BY                year,                tmID) AS T1       JOIN           (SELECT               year,               tmID,               COUNT(DISTINCT playerID) AS G            FROM                Scoring            WHERE                year = 1998 AND tmID = 'CAR'            GROUP BY                year,                tmID) AS T2       ON           T1.year = T2.year AND T1.tmID = T2.tmID) AS T3  JOIN      (SELECT          playerID,          SUM(G) AS total_goals       FROM           Scoring       WHERE           year = 1998 AND tmID = 'CAR'       GROUP BY           playerID) AS T4  ON      T3.total_wins / T3.games_played = T4.total_goals  ORDER BY      T3.total_wins / T3.games_played DESC,      T4.total_goals DESC  LIMIT 1;
SELECT Country.Name FROM Country WHERE Country.LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM Country);
SELECT      c.Name FROM      Country c JOIN      CountryLanguage cl ON c.Code = cl.CountryCode WHERE      cl.Language = 'English' AND cl.IsOfficial = 'T' LIMIT 5;
SELECT AVG(T1.Population)  FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code JOIN CountryLanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Name = 'Karnataka'
SELECT      CL.Language FROM      CountryLanguage AS CL JOIN      Country AS C ON CL.CountryCode = C.Code WHERE      C.Name = 'USA';
SELECT COUNT(*)  FROM Country  WHERE EXISTS (     SELECT 1      FROM CountryLanguage      WHERE Country.Code = CountryLanguage.CountryCode          AND Language = 'Portuguese' );
SELECT COUNT(*)  FROM City  WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'England')
SELECT COUNT(*)  FROM City  WHERE CountryCode = (SELECT Code FROM Country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM Country))
SELECT c.Name AS CapitalCity, t.Population AS Population  FROM City c  JOIN Country co ON c.CountryCode = co.Code  JOIN CountryLanguage cl ON co.Code = cl.CountryCode  WHERE co.Name = 'San Marino';
SELECT      CL.Language FROM      CountryLanguage AS CL JOIN      Country AS C ON CL.CountryCode = C.Code WHERE      C.Name = 'Turkmenistan';
SELECT      c.Name AS 'Country Name',      co.Capital,     cl.Language AS 'Official Language' FROM      Country c JOIN      CountryLanguage cl ON c.Code = cl.CountryCode JOIN      City ct ON c.Code = ct.CountryCode WHERE      c.LifeExpectancy = (SELECT MAX(LifeExpectancy) FROM Country) AND      cl.IsOfficial = 'T'
SELECT      c.Name AS Country,     COALESCE(cl.Language, 'Unknown') AS OfficialLanguage FROM      Country c JOIN      City ct ON c.Code = ct.CountryCode JOIN      CountryLanguage cl ON c.Code = cl.CountryCode WHERE      c.Continent = 'Antarctica' AND cl.IsOfficial = 'T';
SELECT      c.Name FROM      Country c JOIN      CountryLanguage cl ON c.Code = cl.CountryCode WHERE      cl.Language = 'English' AND cl.IsOfficial = 'T' LIMIT 5;
SELECT CL.Language FROM CountryLanguage CL JOIN Country C ON CL.CountryCode = C.Code WHERE C.Region = 'Baltic Countries' AND CL.Percentage > 80;
SELECT CL.Language FROM CountryLanguage CL JOIN Country C ON CL.CountryCode = C.Code WHERE C.Region = 'Baltic Countries' AND CL.Percentage > 80;
SELECT      City.Name AS CityName,      Country.Name AS CountryName,      Country.LifeExpectancy  FROM      City  JOIN      Country ON City.CountryCode = Country.Code  WHERE      City.Population = (SELECT MAX(Population) FROM City);
SELECT      c.Name AS CapitalCity,     cl.Language,     CASE         WHEN cl.IsOfficial = 'T' THEN 'Official'         ELSE 'Not Official'     END AS LanguageStatus,     cl.Percentage FROM      City c JOIN      Country cu ON c.CountryCode = cu.Code JOIN      CountryLanguage cl ON cu.Code = cl.CountryCode WHERE      cu.LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM Country)
SELECT      c.Name AS 'Country',     w.Population AS 'Population',     w.Capital AS 'Capital City',     cl.Language AS 'Official Language' FROM      Country c JOIN      City w ON c.Code = w.CountryCode JOIN      CountryLanguage cl ON c.Code = cl.CountryCode WHERE      c.SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country) AND      cl.IsOfficial = 'T'
SELECT      (COUNT(CASE WHEN Language = 'English' THEN 1 END) * 1.0 / COUNT(*) AS Percentage FROM      CountryLanguage WHERE      CountryCode IN (         SELECT Code         FROM Country         WHERE Continent = 'North America'     );
SELECT District  FROM City  WHERE Population = (SELECT MIN(Population) FROM City);
SELECT Continent  FROM Country  WHERE SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country);
SELECT      c.HeadOfState  FROM      City c JOIN      Country co ON c.CountryCode = co.Code WHERE      c.Population = (SELECT MAX(Population) FROM City)
SELECT      c.Name AS 'Country',     MAX(c.Capital) AS 'Capital' FROM      City c JOIN      CountryLang cl ON c.CountryCode = cl.CountryCode JOIN      Country c2 ON c.CountryCode = c2.Code WHERE      cl.Language = 'English' AND cl.IsOfficial = 'T' AND c2.LocalName LIKE '%English%' GROUP BY      c.CountryCode;
SELECT c.Name  FROM City c  JOIN Country co ON c.CountryCode = co.Code  WHERE co.LifeExpectancy = 66.4;
SELECT      c.HeadOfState  FROM      Country c JOIN      CountryLanguage cl ON c.Code = cl.CountryCode WHERE      cl.Language = 'English' AND      cl.Percentage = (SELECT MIN(Percentage) FROM CountryLanguage WHERE Language = 'English');
SELECT Country.SurfaceArea  FROM City  JOIN Country ON City.CountryCode = Country.Code  WHERE City.Name = 'Sutton Coldfield';
SELECT DISTINCT CountryLanguage.Language  FROM City  JOIN Country ON City.CountryCode = Country.Code  JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode  WHERE City.Population < 8000;
SELECT      CL.Language FROM      CountryLanguage AS CL JOIN      Country AS C ON CL.CountryCode = C.Code WHERE      C.Name = 'Belgium' AND CL.IsOfficial = 'T';
SELECT City.Name, City.District  FROM City  JOIN Country ON City.CountryCode = Country.Code  WHERE Country.LocalName = 'Hajastan';
SELECT COUNT(*)  FROM Country  JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode  WHERE Country.Name = 'Cyprus' AND CountryLanguage.IsOfficial = 1;
SELECT      CL.Language FROM      City C JOIN      CountryLang CL ON C.CountryCode = CL.CountryCode JOIN      Country CO ON C.CountryCode = CO.Code WHERE      CO.Name = 'Belize';
SELECT DISTINCT c.District  FROM City c  JOIN Country co ON c.CountryCode = co.Code  WHERE co.HeadOfState = 'Adolf Ogi'
SELECT T1.HeadOfState  FROM Country AS T1  JOIN City AS T2 ON T1.Code = T2.CountryCode  WHERE T2.District = 'Santa Catarina'
SELECT      (SUM(CASE WHEN cl.Language = 'English' THEN cl.Percentage ELSE 0 END) /       COUNT(cl.CountryCode)) * 1.0 FROM      Country c  JOIN      CountryLanguage cl ON c.Code = cl.CountryCode  JOIN      City ct ON c.Code = ct.CountryCode  WHERE      c.GNP > 1500;
SELECT      (COUNT(CASE WHEN GovernmentForm = 'Republic' THEN 1 END) -       COUNT(CASE WHEN GovernmentForm = 'ConstitutionalMonarchy' THEN 1 END)) AS Difference FROM      Country  WHERE      Language = 'English';
SELECT `Name` FROM Country WHERE `IndepYear` = 1994;
SELECT Country.Name FROM Country WHERE Country.Continent = 'Asia';
SELECT Country.Name FROM Country JOIN City ON Country.Code = City.CountryCode JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE Country.Continent = 'Asia' AND CountryLanguage.Language = 'English' -- Assuming English as the language for GNP information GROUP BY Country.Code ORDER BY SUM(Country.GNP) DESC LIMIT 1;
SELECT COUNT(*)  FROM City  WHERE CountryCode = 'PHL';
SELECT LocalName  FROM Country  WHERE Name = 'Ukraine';
SELECT COUNT(*)  FROM Country  WHERE GovernmentForm = 'Socialistic Republic';
SELECT      CL.Language  FROM      CountryLanguage AS CL JOIN      Country AS C  ON      CL.CountryCode = C.Code  WHERE      C.Name = 'China' AND CL.IsOfficial = 'T';
SELECT (CL.Percentage / C.Population * 100) AS ChineseLanguageUsagePercentage  FROM Country C  JOIN CountryLanguage CL ON C.Code = CL.CountryCode  WHERE C.Name = 'China' AND CL.Language = 'Chinese';
SELECT T3.GovernmentForm  FROM City AS T1  JOIN Country AS T2 ON T1.CountryCode = T2.Code  JOIN CountryLanguage AS T3 ON T2.Code = T3.CountryCode  WHERE T1.Name = 'Manila';
SELECT City.Name  FROM City  JOIN Country ON City.CountryCode = Country.Code  WHERE Country.Name = 'Philippines';
SELECT DISTINCT Language  FROM Country  JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode  WHERE Country.Continent = 'Europe';
SELECT `HeadOfState` FROM `Country` WHERE `Code` = (   SELECT `CountryCode`   FROM `City`   WHERE `Name` = 'Pyongyang' );
SELECT COUNT(*)  FROM Country  JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode  WHERE Country.Name = 'Italy' AND CountryLanguage.IsOfficial = 'F';
SELECT City.Name FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.Name = 'Russia' ORDER BY City.Population ASC LIMIT 1;
SELECT c.Name  FROM City c  JOIN Country co ON c.CountryCode = co.Code  WHERE co.LifeExpectancy = (SELECT MAX(LifeExpectancy) FROM Country)
SELECT      CL.Language,      CASE WHEN CL.IsOfficial = 'T' THEN 'Official' ELSE 'Unofficial' END AS LanguageType FROM      CountryLanguage CL JOIN      City C ON C.CountryCode = CL.CountryCode JOIN      Country CO ON CO.Code = C.CountryCode WHERE      CO.IndepYear = 1830;
SELECT T1.Name  FROM City AS T1  JOIN Country AS T2 ON T1.CountryCode = T2.Code  WHERE T2.Population = (SELECT MAX(Population) FROM Country)
SELECT Country.Name FROM Country JOIN City ON Country.Code = City.CountryCode JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE Country.Continent = 'Asia' AND CountryLanguage.Language = 'English' AND CountryLanguage.IsOfficial = 'F';
SELECT AVG(Country.GNP)  FROM Country  JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode  WHERE CountryLanguage.Language = 'Arabic';
SELECT      (SUM(Country.SurfaceArea * CountryLanguage.Percentage) / SUM(Country.SurfaceArea)) * 1.0 AS ChineseSurfaceAreaPercentage FROM      City JOIN      Country ON City.CountryCode = Country.Code JOIN      CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE      CountryLanguage.Language = 'Chinese'
SELECT `Name`  FROM `Country` ORDER BY `SurfaceArea` ASC  LIMIT 1;
SELECT `Name`  FROM `Country`  WHERE `Population` = (SELECT MAX(`Population`) FROM `Country`);
SELECT      cl.Language FROM      City c JOIN      CountryLangauge cl ON c.CountryCode = cl.CountryCode JOIN      Country co ON c.CountryCode = co.Code WHERE      co.Population = (SELECT MIN(Population) FROM Country) LIMIT 1;
SELECT Country.Name  FROM Country  JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode  WHERE CountryLanguage.Language = 'English' AND CountryLanguage.IsOfficial = 'T';
SELECT      c.Name,      cl.Language  FROM      Country c  JOIN      CountryLanguage cl ON c.Code = cl.CountryCode  WHERE      c.IndepYear > 1990 AND cl.IsOfficial = 'T';
SELECT CL.Percentage  FROM CountryLanguage AS CL  JOIN Country AS C ON CL.CountryCode = C.Code  WHERE C.Name = 'Australia' AND CL.Language = 'English';
SELECT      CL.Language FROM      CountryLanguage AS CL JOIN      Country AS C ON CL.CountryCode = C.Code WHERE      C.Name = 'Malaysia';
SELECT      c.Name AS CountryName,     MAX(ct.Population) AS MaxPopulation FROM      City ct JOIN      Country c ON ct.CountryCode = c.Code GROUP BY      c.Name ORDER BY      MaxPopulation DESC LIMIT 1;
SELECT LifeExpectancy  FROM City c  JOIN Country co ON c.CountryCode = co.Code  WHERE c.Population = (SELECT MAX(Population) FROM City)
SELECT      c.Name FROM      City c JOIN      Country co ON c.CountryCode = co.Code WHERE      c.Population = (SELECT MIN(p.Population) FROM City p) ORDER BY      co.GNP ASC LIMIT 1;
SELECT      c.Name AS CountryName, COUNT(DISTINCT cl.Language) AS NumberOfLanguages FROM      City ct  JOIN      Country c ON ct.CountryCode = c.Code JOIN      CountryLanguage cl ON c.Code = cl.CountryCode WHERE      ct.Population IN (SELECT DISTINCT Population FROM City ORDER BY Population DESC LIMIT 5) GROUP BY      c.Code, c.Name ORDER BY      NumberOfLanguages DESC LIMIT 1;
SELECT      c.Name AS Country,     MIN(co.SurfaceArea) AS SmallestSurfaceArea,     MAX(ct.Population) AS MostCrowdedCityPopulation FROM      City ct JOIN      Country co ON ct.CountryCode = co.Code GROUP BY      c.Name ORDER BY      SmallestSurfaceArea, MostCrowdedCityPopulation DESC LIMIT 1;
SELECT City.Name FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.Name = 'China';
SELECT c.Name  FROM City c  JOIN Country co ON c.CountryCode = co.Code  WHERE co.LocalName = 'Â´Uman';
SELECT AVG(Country.LifeExpectancy) FROM Country JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE CountryLanguage.Language = 'Arabic' GROUP BY Country.Code;
SELECT      c.Name,      (w.GNP - w.GNPOld) / w.GNPOld * 100 AS GNP_growth_rate FROM      City c JOIN      Country cot ON c.CountryCode = cot.Code JOIN      CountryLanguage cl ON c.CountryCode = cl.CountryCode WHERE      c.Name = 'Shanghai' AND      cl.Language = 'Chinese' AND      cl.IsOfficial = 1;
SELECT District  FROM City  WHERE Name = 'Zaanstad';
SELECT Name  FROM City  WHERE Population = (SELECT MAX(Population) FROM City);
SELECT District FROM City WHERE Population = 201843;
SELECT `Name`  FROM `Country` WHERE `SurfaceArea` = (SELECT MAX(`SurfaceArea`) FROM `Country`);
SELECT COUNT(*)  FROM Country  WHERE LifeExpectancy = 75.1;
SELECT IndepYear FROM Country WHERE Name = 'Brunei';
SELECT COUNT(*)  FROM Country  WHERE GNP = 0;
SELECT AVG(Country.SurfaceArea) AS AverageSurfaceArea FROM Country;
SELECT COUNT(DISTINCT CountryLanguage.Language) FROM City JOIN Country ON City.CountryCode = Country.Code JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE City.District = 'Tocantins';
SELECT DISTINCT District  FROM City  JOIN Country ON City.CountryCode = Country.Code  WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM Country);
SELECT COUNT(*)  FROM City  JOIN Country ON City.CountryCode = Country.Code  WHERE Country.HeadOfState = 'Kostis Stefanopoulos';
SELECT      CL.Language FROM      CountryLanguage AS CL JOIN      Country AS C ON CL.CountryCode = C.Code WHERE      C.Name = 'Greece' AND CL.IsOfficial = 'T';
SELECT Country.Population  FROM City  JOIN Country ON City.CountryCode = Country.Code  WHERE City.Name = 'Queimados';
SELECT      CL.Language FROM      City C JOIN      CountryLangauge CL ON C.CountryCode = CL.CountryCode JOIN      Country CO ON C.CountryCode = CO.Code WHERE      CL.IsOfficial = 'T' AND      C.Population = (SELECT MIN(Population) FROM City)
SELECT Country.SurfaceArea, Country.GNP  FROM Country  JOIN City ON Country.Code = City.CountryCode  WHERE City.District = 'Namibe';
SELECT      c.Name FROM      Country c JOIN      CountryLanguage cl ON c.Code = cl.CountryCode WHERE      cl.Language = 'English' AND cl.IsOfficial = 'T';
SELECT DISTINCT District  FROM City  JOIN Country ON City.CountryCode = Country.Code  WHERE SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country);
SELECT      c.Name FROM      Country c JOIN      CountryLanguage cl ON c.Code = cl.CountryCode WHERE      cl.Language = 'Dutch' AND c.GNP < 1000;
SELECT Country.GNP  FROM City  JOIN Country ON City.CountryCode = Country.Code  WHERE City.District = 'Entre Rios';
SELECT      c.LocalName  FROM      City c  JOIN      Country cu ON c.CountryCode = cu.Code  WHERE      c.Name = 'The Valley';
SELECT City.Name FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.SurfaceArea > 7000000;
SELECT Country.LifeExpectancy  FROM Country  JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode  WHERE CountryLanguage.Language = 'Japanese';
SELECT COUNT(*)  FROM City  JOIN Country ON City.CountryCode = Country.Code  WHERE Country.SurfaceArea = 652090;
SELECT DISTINCT CountryLanguage.Language  FROM City  JOIN Country ON City.CountryCode = Country.Code  JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode  WHERE Country.IndepYear BETWEEN 1980 AND 1995;
SELECT LifeExpectancy  FROM City  JOIN Country ON City.CountryCode = Country.Code  WHERE City.Name = 'Calama'
SELECT      CL.Language FROM      City C JOIN      CountryLang CL ON C.CountryCode = CL.CountryCode JOIN      Country CO ON C.CountryCode = CO.Code WHERE      CO.HeadOfState = 'Pierre Buyoya';
SELECT      c.Name,     cl.Percentage FROM      Country c JOIN      City ct ON c.Code = ct.CountryCode JOIN      CountryLanguage cl ON c.Code = cl.CountryCode WHERE      c.GovernmentForm = 'Constitutional Monarchy' AND      ct.District = 'England';
SELECT      c.Name FROM      City c JOIN      Country co ON c.CountryCode = co.Code WHERE      c.Population BETWEEN 140000 AND 150000 AND      co.LifeExpectancy < (SELECT AVG(LifeExpectancy) * 0.8 FROM Country)
SELECT      (SUM(CASE WHEN CL.Language = 'Italian' AND CO.GovernmentForm = 'Republic' THEN 1 ELSE 0 END) /       COUNT(CASE WHEN CL.Language = 'Italian' THEN 1 END)) * 100 AS Percentage FROM      City C  JOIN      CountryLanguage CL ON C.CountryCode = CL.CountryCode JOIN      Country CO ON C.CountryCode = CO.Code;
SELECT COUNT(*)  FROM podcasts p  JOIN categories c ON p.podcast_id = c.podcast_id  JOIN (     SELECT category      FROM categories      GROUP BY category      ORDER BY COUNT(podcast_id) DESC      LIMIT 1 ) m ON c.category = m.category;
SELECT      (COUNT(CASE WHEN COUNT(T3.category) > 4 THEN T1.podcast_id ELSE NULL END)      OVER ()      / COUNT(T1.podcast_id) OVER ()) * 100 AS percentage_of_podcasts_in_four_or_more_categories FROM      podcasts AS T1 JOIN      categories AS T3 ON T1.podcast_id = T3.podcast_id;
SELECT itunes_id, itunes_url  FROM podcasts  WHERE title = 'Brown Suga Diaries';
SELECT p.title, p.itunes_url  FROM podcasts p  WHERE p.title LIKE '%Dream%'
SELECT T3.category  FROM podcasts AS T1  JOIN categories AS T3 ON T1.podcast_id = T3.podcast_id  WHERE T1.title = 'I Heart My Life Show'
SELECT p.title, p.itunes_url  FROM podcasts p  JOIN categories c ON p.podcast_id = c.podcast_id  WHERE c.category = 'society-culture';
SELECT COUNT(*)  FROM reviews  JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id  JOIN categories ON podcasts.podcast_id = categories.podcast_id  WHERE rating = 5 AND title LIKE '%spoilers%' AND categories.category = 'art';
SELECT DISTINCT author_id  FROM reviews  JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id  WHERE podcasts.title = 'Pop Rocket'  AND reviews.created_at LIKE '2016%'  AND reviews.rating < 5;
SELECT p.title, c.category  FROM podcasts p  JOIN categories c ON p.podcast_id = c.podcast_id  JOIN reviews r ON p.podcast_id = r.podcast_id  GROUP BY p.podcast_id, c.category  HAVING AVG(r.rating) > 3.0;
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id JOIN reviews r ON p.podcast_id = r.podcast_id WHERE c.category = 'fiction' AND r.rating = 5 ORDER BY r.created_at DESC LIMIT 1;
SELECT p.title, r.content, r.rating  FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.title = 'Love it!';
SELECT T3.author_id, T3.rating, T3.created_at  FROM podcasts AS T1  JOIN categories AS T2 ON T1.podcast_id = T2.podcast_id  JOIN reviews AS T3 ON T2.podcast_id = T3.podcast_id  WHERE T1.title = 'In The Thick';
SELECT r.created_at, p.title, r.rating  FROM reviews AS r  JOIN podcasts AS p ON r.podcast_id = p.podcast_id  WHERE r.created_at = (SELECT MAX(created_at) FROM reviews)  LIMIT 1;
SELECT p.title, r.rating, r.content  FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id JOIN reviews r ON p.podcast_id = r.podcast_id JOIN authors a ON r.author_id = a.author_id WHERE a.author_id = '76A4C24B6038145';
SELECT p.title AS podcast_title, r.title AS review_title, r.content FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE r.rating = 1;
SELECT      r.title,     c.rating FROM      reviews AS r JOIN      podcasts AS p ON p.podcast_id = r.podcast_id JOIN      categories AS c ON c.podcast_id = r.podcast_id WHERE      r.created_at LIKE '2019-05%'
SELECT AVG(rating)  FROM reviews  WHERE podcast_id = (   SELECT podcast_id    FROM reviews    GROUP BY podcast_id    ORDER BY COUNT(*) DESC    LIMIT 1 );
SELECT categories.category FROM podcasts JOIN categories ON podcasts.podcast_id = categories.podcast_id WHERE podcasts.title = 'SciFi Tech Talk';
SELECT p.title, p.itunes_url  FROM podcasts p  JOIN categories c ON p.podcast_id = c.podcast_id  JOIN reviews r ON p.podcast_id = r.podcast_id  WHERE r.title = 'Long time listener, calling it quits';
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'true crime';
SELECT reviews.content FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'StormCast: The Official Warhammer Age of Sigmar Podcast';
SELECT r.title, r.content  FROM reviews AS r  JOIN podcasts AS p ON r.podcast_id = p.podcast_id  WHERE p.title = 'More Stupider: A 90-Day Fiance Podcast' AND r.rating = 1;
SELECT COUNT(*)  FROM reviews  JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id  WHERE podcasts.title = 'LifeAfter/The Message' AND reviews.rating < 3;
SELECT      c.category,     AVG(r.rating) AS average_rating FROM      podcasts p JOIN      categories c ON p.podcast_id = c.podcast_id JOIN      reviews r ON p.podcast_id = r.podcast_id WHERE      p.title = 'More Stupider: A 90-Day Fiance Podcast' GROUP BY      c.category;
SELECT      CASE          WHEN COUNT(CASE WHEN T3.category = 'arts-books' THEN 1 END) > COUNT(CASE WHEN T3.category = 'arts-design' THEN 1 END) THEN 'arts-books'         ELSE 'arts-design'     END AS popular_category,     ABS(         COUNT(CASE WHEN T3.category = 'arts-books' THEN 1 END) -          COUNT(CASE WHEN T3.category = 'arts-design' THEN 1 END)     ) AS numerical_difference FROM      categories AS T3 JOIN      podcasts AS T2 ON T3.podcast_id = T2.podcast_id WHERE      T3.category IN ('arts-books', 'arts-design')
SELECT COUNT(*)  FROM runs  WHERE run_at BETWEEN '2022-06-01 00:00:00' AND '2022-06-30 23:59:59'  AND reviews_added = 'true';
SELECT COUNT(*)  FROM reviews  WHERE rating = 3  AND created_at BETWEEN '2015-01-01T00:00:00-07:00' AND '2015-03-31T23:59:59-07:00';
SELECT      (COUNT(CASE WHEN c.category = 'fiction-science-fiction' THEN p.podcast_id END)      / COUNT(p.podcast_id)) * 100 AS percentage_of_fiction_science_fiction FROM      podcasts p JOIN      categories c ON p.podcast_id = c.podcast_id;
SELECT AVG(reviews.rating)  FROM reviews  JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id  WHERE DATE_FORMAT(reviews.created_at, '%Y') = '2019';
SELECT      YEAR(runs.run_at) AS review_year,     SUM(CASE WHEN LEFT(runs.run_at, 4) = '2021' THEN reviews_added ELSE 0 END) AS reviews_2021,     SUM(CASE WHEN LEFT(runs.run_at, 4) = '2022' THEN reviews_added ELSE 0 END) AS reviews_2022,     SUM(reviews_added) OVER () AS total_reviews_added,     (SUM(CASE WHEN LEFT(runs.run_at, 4) = '2021' THEN reviews_added ELSE 0 END) / SUM(reviews_added) OVER ()) * 100 AS percentage_reviews_2021,     (SUM(CASE WHEN LEFT(runs.run_at, 4) = '2022' THEN reviews_added ELSE 0 END) / SUM(reviews_added) OVER ()) * 100 AS percentage_reviews_2022 FROM      runs GROUP BY      YEAR(runs.run_at) ORDER BY      YEAR(runs.run_at);
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'fiction';
SELECT reviews.rating, categories.category  FROM podcasts  JOIN categories ON podcasts.podcast_id = categories.podcast_id  JOIN reviews ON podcasts.podcast_id = reviews.podcast_id  WHERE podcasts.title = 'Sitcomadon';
SELECT author_id  FROM reviews  WHERE itunes_id = 1516665400;
SELECT p.title FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.created_at BETWEEN '2018-08-22T11:53:16-07:00' AND '2018-11-20T11:14:20-07:00';
SELECT DISTINCT c.category  FROM categories c  JOIN podcasts p ON c.podcast_id = p.podcast_id  JOIN reviews r ON p.podcast_id = r.podcast_id  WHERE r.author_id = 'EFB34EAC8E9397C';
SELECT p.slug, p.itunes_url  FROM podcasts p  JOIN categories c ON p.podcast_id = c.podcast_id  JOIN reviews r ON p.podcast_id = r.podcast_id  WHERE r.content = 'Can\'t stop listening';
SELECT DISTINCT T2.created_at  FROM podcasts AS T1  JOIN reviews AS T2 ON T1.podcast_id = T2.podcast_id  WHERE T1.title = 'Don\'t Lie To Your Life Coach';
SELECT DISTINCT c.category  FROM categories c  JOIN reviews r ON c.podcast_id = r.podcast_id  WHERE r.created_at BETWEEN '2016-07-01T00:00:00-07:00' AND '2016-12-31T23:59:59-07:00';
SELECT AVG(T3.rating)  FROM categories AS T1  JOIN podcasts AS T2 ON T1.podcast_id = T2.podcast_id  JOIN reviews AS T3 ON T2.podcast_id = T3.podcast_id  WHERE T1.category = 'true-crime'
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'arts';
SELECT AVG(reviews.rating)  FROM podcasts  JOIN categories ON podcasts.podcast_id = categories.podcast_id  WHERE categories.category = 'arts';
SELECT title  FROM podcasts  JOIN categories ON podcasts.podcast_id = categories.podcast_id  WHERE categories.category = 'arts' AND DATE_FORMAT(reviews.created_at, '%Y') = '2018';
SELECT title  FROM podcasts  JOIN categories ON podcasts.podcast_id = categories.podcast_id  WHERE categories.category = 'music' AND reviews.rating > 3;
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.content LIKE '%love%' AND c.category = 'arts' AND YEAR(r.created_at) BETWEEN 2018 AND 2019;
SELECT categories.category, podcasts.itunes_url  FROM podcasts  JOIN categories ON podcasts.podcast_id = categories.podcast_id  WHERE podcasts.title = 'Scaling Global';
SELECT AVG(reviews.rating)  FROM podcasts  JOIN categories ON podcasts.podcast_id = categories.podcast_id  WHERE categories.category = 'comedy';
SELECT category  FROM categories  GROUP BY category  ORDER BY COUNT(podcast_id) ASC  LIMIT 1;
SELECT content  FROM reviews  WHERE LENGTH(content) = (SELECT MAX(LENGTH(content)) FROM reviews);
SELECT r.podcast_id FROM reviews r WHERE r.title = 'Hosts bring the show down'
SELECT title FROM podcasts WHERE category = 'music' ORDER BY LENGTH(title) DESC LIMIT 1;
SELECT DISTINCT c.category  FROM categories c  JOIN podcasts p ON c.podcast_id = p.podcast_id  WHERE p.title LIKE '%jessica%'
SELECT categories.category FROM podcasts JOIN categories ON podcasts.podcast_id = categories.podcast_id WHERE podcasts.title = 'Moist Boys';
SELECT r.content, c.category  FROM reviews AS r  JOIN categories AS c ON r.podcast_id = c.podcast_id  WHERE r.rating = 2;
SELECT p.title FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.title = 'Inspired & On Fire!';
SELECT p.title, c.category  FROM podcasts p  JOIN categories c ON p.podcast_id = c.podcast_id  JOIN reviews r ON p.podcast_id = r.podcast_id  WHERE r.content LIKE '%Absolutely fantastic%';
SELECT c.category  FROM categories c  JOIN podcasts p ON c.podcast_id = p.podcast_id  JOIN reviews r ON p.podcast_id = r.podcast_id  GROUP BY c.category  ORDER BY COUNT(r.podcast_id) DESC  LIMIT 1;
SELECT itunes_url  FROM podcasts  JOIN categories ON podcasts.podcast_id = categories.podcast_id  WHERE categories.category = 'fiction-science-fiction';
SELECT r.content FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE p.title = 'Stuff You Should Know' ORDER BY r.created_at ASC LIMIT 1;
SELECT COUNT(*)  FROM podcasts p  JOIN categories c ON p.podcast_id = c.podcast_id  JOIN reviews r ON p.podcast_id = r.podcast_id  WHERE p.title = 'Planet Money';
SELECT      AVG(reviews.rating) AS average_rating FROM      podcasts JOIN      categories ON podcasts.podcast_id = categories.podcast_id JOIN      reviews ON podcasts.podcast_id = reviews.podcast_id WHERE      categories.category = 'crime-junkie';
SELECT      COUNT(CASE WHEN categories.category = 'technology' THEN categories.podcast_id END) * 100.0 / COUNT(categories.podcast_id) as technology_percentage,     GROUP_CONCAT(categories.title) as technology_podcasts FROM      categories JOIN      podcasts ON categories.podcast_id = podcasts.podcast_id WHERE      categories.category = 'technology';
SELECT content  FROM reviews  WHERE title = 'really interesting!' AND created_at = '2018-04-24T12:05:16-07:00';
SELECT categories.category FROM podcasts JOIN categories ON podcasts.podcast_id = categories.podcast_id WHERE podcasts.title = 'Scaling Global';
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'arts-performing-arts';
SELECT COUNT(*)  FROM reviews  JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id  WHERE podcasts.title = 'Scaling Global';
SELECT COUNT(*)  FROM reviews  JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id  WHERE podcasts.title = 'Please Excuse My Dead Aunt Sally' AND DATE_FORMAT(reviews.created_at, '%Y') = '2019';
SELECT p.title FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id WHERE r.author_id = 'F7E5A318989779D';
SELECT COUNT(*)  FROM reviews  JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id  WHERE rating = 5  AND podcasts.title = 'Please Excuse My Dead Aunt Sally';
SELECT AVG(reviews.rating)  FROM podcasts  JOIN reviews ON podcasts.podcast_id = reviews.podcast_id  WHERE podcasts.title = 'Please Excuse My Dead Aunt Sally';
SELECT COUNT(*)  FROM university_year  WHERE num_students > 8000 AND year = 2011;
SELECT `id` FROM `ranking_criteria` WHERE `criteria_name` = 'Award';
SELECT COUNT(*)  FROM university  WHERE university_name LIKE '%State%'
SELECT uy.student_staff_ratio FROM university_year uy WHERE uy.university_id = (     SELECT uwy.university_id      FROM university_ranking_year ury     JOIN university_year uwy ON uwy.id = ury.university_id     WHERE uwy.num_students * (100 - uwy.pct_female_students) / (uwy.student_staff_ratio * uwy.pct_international_students) * MAX(ury.score) OVER ()          = MAX(uwy.student_staff_ratio) );
SELECT COUNT(*)  FROM ranking_criteria  WHERE ranking_system_id = 3;
SELECT university_id FROM university_year WHERE pct_international_students = 1 AND year BETWEEN 2011 AND 2015;
SELECT c.country_name  FROM country c  JOIN university u ON c.id = u.country_id  GROUP BY c.country_name  ORDER BY COUNT(u.id) DESC  LIMIT 1;
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.pct_international_students = (     SELECT MAX(pct_international_students)      FROM university_year      WHERE year BETWEEN (MIN(year) - 5) AND (MIN(year)) ) GROUP BY u.id HAVING COUNT(DISTINCT CASE WHEN year - LEAD(year, 5) OVER (ORDER BY year) = 5 THEN year END) >= 6;
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE ury.year = 2014 AND rc.criteria_name = 'Publications Rank' AND ury.score = (SELECT MAX(score) FROM university_ranking_year WHERE year = 2014 AND ranking_criteria_id = (SELECT id FROM ranking_criteria WHERE criteria_name = 'Publications Rank'));
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.num_students = (SELECT MIN(num_students) FROM university_year)
SELECT COUNT(*)  FROM university  WHERE country_id IN (     SELECT id      FROM country      WHERE country_name = 'United States of America' );
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id JOIN country c ON u.country_id = c.id JOIN university_ranking_year ury ON u.id = ur.rankinuniversity_ranking_year_id AND ury.year = 2016 JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE c.country_name = 'Australia' AND rc.criteria_name = 'Citations' ORDER BY ur.score DESC LIMIT 1;
SELECT COUNT(*)  FROM university  JOIN university_ranking_year ON university.id = university_ranking_year.university_id JOIN ranking_criteria ON university_ranking_year.ranking_criteria_id = ranking_criteria.id WHERE ranking_criteria.criteria_name = 'Award'  AND university_ranking_year.score = 0  AND university_ranking_year.year BETWEEN 2005 AND 2015;
SELECT T3.country_name FROM university AS T1 JOIN university_year AS T2 ON T1.id = T2.university_id JOIN country AS T3 ON T3.id = T1.country_id WHERE T1.university_name = 'University of Oxford';
SELECT COUNT(*)  FROM university  JOIN university_year ON university.id = university_year.university_id   JOIN university_ranking_year ON university.id = university_ranking_year.university_id   JOIN ranking_criteria ON university_ranking_year.ranking_criteria_id = ranking_criteria.id   WHERE university.university_name = 'Yale University'  AND ranking_criteria.criteria_name = 'Quality of Education Rank'  AND university_ranking_year.score >= 10;
SELECT criteria_name FROM ranking_criteria JOIN ranking_system ON ranking_criteria.ranking_system_id = ranking_system.id WHERE ranking_system.system_name = 'Center for World University Rankings';
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2012 AND uy.num_students > 50000;
SELECT DISTINCT c.country_name FROM country c JOIN university u ON c.id = u.country_id JOIN university_year uy ON u.id = uy.university_id WHERE uy.year BETWEEN 2011 AND 2016 AND uy.pct_international_students > 50;
SELECT COUNT(*) AS total_universities,        SUM(CASE WHEN u.country_id = (SELECT id FROM country WHERE country_name = 'United States of America') THEN 1 ELSE 0 END) AS us_universities FROM university_year u JOIN university_ranking_year ur ON u.id = ur.university_id WHERE ur.year = 2016 AND (u.num_students * (u.pct_female_students / 100)) >= 20000;
SELECT university_name FROM (   SELECT u.university_name,           (u.num_students * u.pct_international_students) / 100 AS international_students_count   FROM university u ) AS subquery ORDER BY international_students_count DESC LIMIT 5;
SELECT university_id FROM university_year WHERE student_staff_ratio = (     SELECT MAX(student_staff_ratio)     FROM university_year )
SELECT year  FROM university_year  WHERE num_students = (SELECT MIN(num_students) FROM university_year);
SELECT AVG(university_year.pct_female_students) AS average_pct_female_students FROM university_year;
SELECT      SUM(num_students * pct_international_students / 100) AS international_students,     num_students AS total_students FROM      university_year WHERE      university_id = 20 AND year = 2013;
SELECT id FROM university WHERE university_name = 'Harvard University';
SELECT university_id FROM university_ranking_year WHERE year = 2011 AND score = 100;
SELECT rs.system_name  FROM ranking_system rs  JOIN ranking_criteria rc ON rs.id = rc.ranking_system_id  WHERE rc.criteria_name = 'Quality of Education Rank';
SELECT university_year.num_students, university_year.student_staff_ratio  FROM university  JOIN university_year ON university.id = university_year.university_id  WHERE university.university_name = 'Harvard University' AND university_year.year = 2012;
SELECT c.country_name  FROM country c  JOIN university u ON c.id = u.country_id  WHERE u.id = 112;
SELECT SUM(university_year.num_students)  FROM university  JOIN university_year ON university.id = university_year.university_id  JOIN country ON university.country_id = country.id  WHERE country.country_name = 'Sweden';
SELECT uc.ranking_criteria_id  FROM university u  JOIN university_ranking_year ury ON u.id = ury.university_id  JOIN university_year uy ON u.id = uy.university_id  JOIN university_ranking_year urc ON uy.year = urc.year AND u.id = urc.university_id  JOIN ranking_criteria rc ON urc.ranking_criteria_id = rc.id  WHERE u.university_name = 'Brown University' AND uy.year = 2014;
SELECT u.university_name FROM university u JOIN country c ON u.country_id = c.id WHERE c.country_name = 'Spain';
SELECT rc.criteria_name  FROM ranking_criteria rc  JOIN university_ranking_year ury ON rc.id = ury.ranking_criteria_id  JOIN university u ON ury.university_id = u.id  WHERE u.id = 32 AND ury.year = 2015;
SELECT AVG(ur.score)  FROM university u  JOIN university_ranking_year ur ON u.id = ur.university_id  JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id  JOIN country c ON u.country_id = c.id  WHERE c.country_name = 'Brazil';
SELECT T3.country_name FROM university_year AS T1 JOIN university AS T2 ON T1.university_id = T2.id JOIN country AS T3 ON T2.country_id = T3.id WHERE T1.year = 2014 AND T1.num_students = (SELECT MAX(num_students) FROM university_year WHERE year = 2014)
SELECT      university_ranking_year.score,      (num_students * pct_international_students) / 100 AS num_international_students FROM      university  JOIN      university_ranking_year ON university.id = university_ranking_year.university_id  JOIN      ranking_criteria ON university_ranking_year.ranking_criteria_id = ranking_criteria.id  JOIN      university_year ON university.id = university_year.university_id  WHERE      university.id = 100      AND university_year.year = 2015      AND ranking_criteria.criteria_name = 'Number of International Students';
SELECT university_year.num_students  FROM university  JOIN university_year ON university.id = university_year.university_id  JOIN university_ranking_year ON university_ranking_year.university_id = university.id AND university_ranking_year.year = 2013  WHERE university_ranking_year.score = 98;
SELECT criteria_name  FROM ranking_criteria  JOIN ranking_system ON ranking_criteria.ranking_system_id = ranking_system.id  WHERE system_name = 'Center for World University Rankings';
SELECT c.country_name  FROM country c  JOIN university u ON c.id = u.country_id  JOIN university_year uy ON u.id = uy.university_id  WHERE uy.year = 2013 AND uy.num_students > (SELECT AVG(num_students) * 0.98 FROM university_year uy WHERE uy.year = 2013)
SELECT      (SUM((num_students * pct_international_students)) / 100) * SUM(num_students) AS percent_international_students FROM      university u JOIN      university_year uy ON u.id = uy.university_id JOIN      university_ranking_year ury ON u.id = ury.university_id AND uy.year = ury.year JOIN      ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE      rc.criteria_name = 'Score' AND      ury.score < 80 AND      uy.year = 2015;
SELECT SUM(num_students)  FROM university_year  WHERE year = 2011;
SELECT SUM(DIVIDE(MULTIPLY(t3.num_students, t3.pct_female_students), 100)) AS female_students_count FROM university_year AS t3 JOIN university_ranking_year AS t4 ON t3.university_id = t4.university_id WHERE t3.year = 2011 AND t4.year = 2011;
SELECT uy.year, uy.student_staff_ratio  FROM university_year uy  WHERE uy.student_staff_ratio = (SELECT MAX(uy2.student_staff_ratio) FROM university_year uy2);
SELECT university_id FROM university_year WHERE year = 2011 GROUP BY university_id ORDER BY SUM(num_students) DESC LIMIT 1;
SELECT COUNT(*)  FROM university_year uy  WHERE uy.num_students > 50000  AND uy.year = 2011  AND uy.pct_international_students > 10;
SELECT university_id FROM university_year WHERE year = 2012 AND pct_female_students = (SELECT MAX(pct_female_students) FROM university_year WHERE year = 2012);
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ur.rank university_id WHERE ur.year = 2012 AND ur.score = (SELECT MAX(score) FROM university_ranking_year WHERE year = 2012)
SELECT university_name FROM university_year WHERE year = 2011 AND num_students = (     SELECT MAX(num_students)     FROM university_year     WHERE year = 2011 );
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE rc.criteria_name = 'Teaching' ORDER BY ury.score DESC LIMIT 1;
SELECT university_year.pct_international_students  FROM university  JOIN university_year ON university.id = university_year.university_id  WHERE university.university_name = 'Harvard University' AND university_year.year = 2011;
SELECT      university_year.year,     university_year.num_students,     (university_year.num_students * university_year.pct_female_students / 100) AS female_students FROM      university_year JOIN      university ON university_year.university_id = university.id WHERE      university.university_name = 'Stanford University' AND      university_year.year = 2011;
SELECT T3.country_name  FROM university AS T1  JOIN university_year AS T2 ON T1.id = T2.university_id  JOIN country AS T3 ON T3.id = T1.country_id  WHERE T1.university_name = 'Harvard University';
SELECT rs.system_name  FROM ranking_system rs  JOIN ranking_criteria rc ON rs.id = rc.ranking_system_id  WHERE rc.criteria_name = 'Teaching';
SELECT u.university_name FROM university u JOIN country c ON u.country_id = c.id WHERE c.country_name = 'Argentina' ORDER BY (SELECT SUM(score) FROM university_ranking_year ury WHERE ury.university_id = u.id) DESC LIMIT 1;
SELECT COUNT(*)  FROM country  JOIN university ON country.id = university.country_id  WHERE country.country_name = 'Argentina';
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2011 AND uy.num_students > 100000;
SELECT COUNT(*)  FROM ranking_criteria  WHERE ranking_system_id IN (     SELECT id      FROM ranking_system      WHERE system_name = 'Center for World University Rankings' );
SELECT COUNT(*)  FROM university_year uy  JOIN university_ranking_year ury ON uy.university_id = ury.university_id  WHERE uy.year = 2011 AND ury.score = 90;
SELECT university_name FROM (   SELECT u.university_name,           (MAX(SUM((pct_international_students * num_students) / 100))) as max_international_students   FROM university u   JOIN university_year uy ON u.id = uy.university_id   JOIN university_year uis ON uy.year = uis.year AND uis.pct_international_students = (SELECT MAX(pct_international_students) FROM university_year)   GROUP BY u.university_name ) ranked_universities ORDER BY max_international_students DESC LIMIT 3;
SELECT      (SUM(t3.num_students) - SUM(DIVIDE(MULTIPLY(t3.pct_international_students, t3.num_students), 100))) AS overall_enrollment_diff,     (SUM(CASE WHEN t3.pct_international_students IS NOT NULL THEN DIVIDE(MULTIPLY(t3.pct_international_students, t3.num_students), 100) ELSE 0 END) OVER (ORDER BY t4.year)) -      LAG(SUM(CASE WHEN t3.pct_international_students IS NOT NULL THEN DIVIDE(MULTIPLY(t3.pct_international_students, t3.num_students), 100) ELSE 0 END), 1) OVER (ORDER BY t4.year) AS international_student_enrollment_diff FROM      university_year t4 JOIN      university t2 ON t4.university_id = t2.id JOIN      country t1 ON t2.country_id = t1.id JOIN      university_ranking_year t3 ON t4.id = t3.university_id AND t3.year BETWEEN 2011 AND 2012 WHERE      t2.university_name = 'Harvard University';
SELECT COUNT(*)  FROM university_year  WHERE year = 2011 AND num_students > 30000;
SELECT c.id FROM country c JOIN university u ON c.id = u.country_id WHERE u.university_name = 'University of Tokyo';
SELECT `id` FROM `ranking_system` WHERE `system_name` = 'Center for World University Rankings';
SELECT id FROM ranking_criteria WHERE criteria_name = 'Publications Rank';
SELECT COUNT(*)  FROM university_year  WHERE pct_international_students > 30 AND year = 2013;
SELECT COUNT(*)  FROM university  JOIN university_ranking_year ON university.id = university_ranking_year.university_id JOIN ranking_criteria ON university_ranking_year.ranking_criteria_id = ranking_criteria.id WHERE ranking_criteria.id = 6 AND university_ranking_year.year = 2011 AND university_ranking_year.score < 50;
SELECT num_students FROM university_year WHERE university_name = 'Yale University' AND year = 2016;
SELECT u.university_name FROM university u JOIN country c ON u.country_id = c.id WHERE c.country_name = 'Denmark';
SELECT      university_year.university_id,     university_year.year,     university_year.num_students,     university_year.student_staff_ratio FROM      university JOIN      university_year ON university.id = university_year.university_id WHERE      university.university_name = 'University of Auckland' AND     university_year.year = 2015;
SELECT T3.country_name FROM university AS T1 JOIN university_year AS T2 ON T1.id = T2.university_id JOIN country AS T3 ON T3.id = T1.country_id WHERE T1.university_name = 'University of São Paulo';
SELECT      (num_students * pct_international_students) / 100 AS international_students  FROM      university_year  WHERE      university_id = (SELECT id FROM university WHERE university_name = 'Harvard University') AND      year = 2012;
SELECT      university_year.year,     university_year.num_students,     (university_year.num_students * university_year.pct_female_students / 100) AS num_female_students FROM      country      JOIN university ON country.id = university.country_id     JOIN university_year ON university.id = university_year.university_id WHERE      university.university_name = 'Arizona State University'     AND university_year.year = 2014;
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id WHERE ury.score = (SELECT MAX(score) FROM university_ranking_year)
SELECT rc.criteria_name  FROM ranking_system rs  JOIN ranking_criteria rc ON rs.id = rc.ranking_system_id  WHERE rs.system_name = 'Shanghai Ranking';
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE ury.year = 2011 AND rc.criteria_name = 'Teaching' AND ury.score = (SELECT MIN(score) FROM university_ranking_year WHERE year = 2011 AND ranking_criteria_id = rc.id)
SELECT rs.system_name  FROM ranking_criteria rc  JOIN ranking_system rs ON rc.ranking_system_id = rs.id  WHERE rc.criteria_name = 'Quality of Education Rank';
SELECT u.university_name, MAX(ur.score) AS max_score FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id AND rc.criteria_name = 'International' WHERE ur.year = 2016 AND ur.score > 80 GROUP BY u.university_name ORDER BY max_score DESC LIMIT 1;
SELECT      rc.criteria_name, ur.score FROM      university u JOIN      university_year uy ON u.id = uy.university_id JOIN      university_ranking_year ur ON u.id = ur.university_id AND uy.year = ur.year JOIN      ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE      u.university_name = 'Harvard University' AND uy.year = 2005;
SELECT      u.university_name,     AVG(ur.score) AS average_score FROM      university u JOIN      university_ranking_year ur ON u.id = ur.university_id JOIN      ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE      rc.criteria_name = 'Alumni' AND      ur.year = 2008 GROUP BY      u.university_name;
SELECT u.university_name, c.country_name  FROM university u JOIN university_year uy ON u.id = uy.university_id JOIN country c ON u.country_id = c.id WHERE uy.year = 2015 AND uy.num_students * uy.pct_international_students / 100 =      (SELECT MAX(num_students * pct_international_students / 100) FROM university_year WHERE year = 2015);
SELECT num_students FROM university_year WHERE university_id = 1 AND year = 2011;
SELECT university_id FROM university_year WHERE year = 2011 AND num_students = (SELECT MAX(num_students) FROM university_year WHERE year = 2011);
SELECT uy.university_id FROM university_year uy WHERE uy.year = 2011 AND uy.student_staff_ratio > 15;
SELECT COUNT(*)  FROM university_year uy  WHERE uy.year = 2011 AND uy.num_students > 20000 AND uy.pct_international_students > 25;
SELECT u.university_id FROM university_year u WHERE u.year = 2011 AND u.pct_female_students = (     SELECT MAX(pct_female_students)     FROM university_year uy     WHERE uy.year = 2011 ) LIMIT 3;
SELECT year  FROM university_year  WHERE university_id = 1 AND num_students = (SELECT MAX(num_students) FROM university_year WHERE university_id = 1)
SELECT num_students FROM university_year WHERE university_id IN (     SELECT id      FROM university      WHERE university_name = 'Harvard University' ) AND year = 2011;
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2011 AND uy.pct_international_students * uy.num_students / 100 = (     SELECT MAX(pct_students * num_students / 100)     FROM (         SELECT uy.pct_international_students * uy.num_students / 100 AS pct_students         FROM university u         JOIN university_year uy ON u.id = uy.university_id         WHERE uy.year = 2011     ) t )
SELECT u.university_name FROM university u JOIN country c ON u.country_id = c.id WHERE c.country_name = 'Australia';
SELECT COUNT(*)  FROM university  JOIN university_year ON university.id = university_year.university_id  JOIN country ON university.country_id = country.id  WHERE country.country_name = 'Australia' AND university_year.year = 2011 AND university_year.num_students > 15000;
SELECT c.country_name  FROM country c  JOIN university u ON c.id = u.country_id  WHERE u.university_name = 'Harvard University';
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE rc.criteria_name = 'Teaching' AND ury.year = 2011 AND ury.score = (SELECT MAX(score) FROM university_ranking_year WHERE ranking_criteria_id = rc.id AND year = 2011)
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ur.rank university_id JOIN ranking_criteria rc ON urc.id = ur.criteria_id WHERE rc.criteria_name = 'Teaching' AND ur.year = 2011 AND ur.score > 90;
SELECT COUNT(*)  FROM university  JOIN university_year ON university.id = university_year.university_id   JOIN country ON university.country_id = country.id   JOIN university_ranking_year ON university.id = university_ranking_year.university_id AND university_year.year = university_ranking_year.year   JOIN ranking_criteria ON university_ranking_year.ranking_criteria_id = ranking_criteria.id   WHERE country.country_name = 'United States of America'  AND university_year.year = 2011  AND ranking_criteria.criteria_name = 'Teaching'  AND university_ranking_year.score > 90;
SELECT rc.criteria_name  FROM university u  JOIN university_year uy ON u.id = uy.university_id  JOIN university_ranking_year ury ON u.id = ur.university_id AND uy.year = ur.year AND uy.year = 2011  JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id  WHERE u.university_name = 'Harvard University'
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE ury.year = 2011 AND rc.criteria_name = 'Teaching' AND ury.score = 98;
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id JOIN country c ON u.country_id = c.id WHERE rc.criteria_name = 'Teaching' AND ury.year = 2011 AND ury.score < 60 AND c.country_name = 'United States of America';
SELECT COUNT(*)  FROM university  JOIN university_year ON university.id = university_year.university_id  JOIN country ON university.country_id = country.id  WHERE country.country_name = 'Australia' AND university_year.year = 2011 AND university_year.student_staff_ratio > 15;
SELECT      university_year.year,     university_year.num_students,     university_year.pct_female_students,     (num_students * pct_female_students / 100) as female_students FROM      university_year JOIN      university ON university_year.university_id = university.id WHERE      university.university_name = 'Stanford University' AND     university_year.year = 2011;
SELECT      (COUNT(CASE WHEN u.country_id = c.id AND u.year = 2011 AND ur.year = 2011 AND ur.university_id = u.id AND ur.criteria_id = (         SELECT id FROM ranking_criteria WHERE ranking_system_id = (             SELECT id FROM ranking_system         ) AND criteria_name = 'Teaching') AND ur.score > 90 THEN 1 END)      / COUNT(DISTINCT CASE WHEN u.country_id = c.id AND u.year = 2011 THEN u.id END)) * 100 AS percentage FROM      country c JOIN      university u ON u.country_id = c.id JOIN      university_ranking_year ur ON ur.university_id = u.id WHERE      c.country_name = 'United States of America';
SELECT `id` FROM `ranking_system` WHERE `system_name` = 'Center for World University Rankings';
SELECT T3.country_id FROM university AS T1 JOIN country AS T3 ON T1.country_id = T3.id WHERE T1.university_name = 'University of Veterinary Medicine Vienna';
SELECT id FROM ranking_criteria WHERE criteria_name = 'Citations Rank';
SELECT `id` FROM `university` WHERE `university_name` = 'University of Orléans';
SELECT num_students  FROM university_year  WHERE university_id = 268 AND year = 2013;
SELECT country_name FROM country WHERE id = 66;
SELECT c.country_name  FROM country c  JOIN university u ON c.id = u.country_id  WHERE u.university_name = 'McMaster University';
SELECT COUNT(*)  FROM country  JOIN university  ON country.id = university.country_id  WHERE country.country_name = 'Turkey';
SELECT university_name FROM university_year WHERE year = 2011 AND num_students = (     SELECT MAX(num_students)     FROM university_year     WHERE year = 2011 );
SELECT num_students FROM university_year WHERE year = 2011 AND university_id = (SELECT id FROM university WHERE university_name = 'University of Michigan');
SELECT ur.year, uc.university_name, uyr.score  FROM university_year uc  JOIN university_ranking_year uyr ON uc.id = uyr.university_id  JOIN ranking_criteria rc ON uyr.ranking_criteria_id = rc.id  JOIN university u ON uc.id = u.id  WHERE uc.university_name = 'Chosun University' AND rc.criteria_name = 'Influence Rank' AND uyr.year = 2015;
SELECT university_year.pct_international_students  FROM university  JOIN university_year ON university.id = university_year.university_id  WHERE university.university_name = 'University of Oslo' AND university_year.year = 2015;
SELECT rc.criteria_name  FROM ranking_criteria AS rc  JOIN university_ranking_year ASury ON rc.id = asury.ranking_criteria_id  JOIN university AS u ON asury.university_id = u.id  WHERE u.university_name = 'University of Southampton'  AND asury.year = 2015  AND asury.score = (SELECT MAX(score) FROM university_ranking_year WHERE university_id = u.id AND year = 2015);
SELECT rs.system_name  FROM ranking_criteria rc  JOIN ranking_system rs ON rc.ranking_system_id = rs.id  WHERE rc.criteria_name = 'Total Shanghai';
SELECT      (pct_female_students * num_students) / 100 AS female_students  FROM      university_year uy  JOIN      university u ON uy.university_id = u.id  WHERE      u.university_name = 'Pierre and Marie Curie University' AND      uy.year = 2015;
SELECT ur.year, uc.university_name, uyr.score  FROM university_year AS uy  JOIN university AS u ON uy.university_id = u.id  JOIN university_ranking_year AS uyr ON uy.id = uyr.university_id AND uyr.ranking_criteria_id = (     SELECT rc.id      FROM ranking_criteria AS rc      JOIN ranking_system AS rs ON rc.ranking_system_id = rs.id      WHERE rs.system_name = 'N and S' )  JOIN country AS c ON u.country_id = c.id  WHERE u.university_name = 'University of Florida' AND uyr.year = 2014;
SELECT      university_year.university_id,     university_year.year,     university_year.num_students,     university_year.pct_international_students,     (university_year.num_students * university_year.pct_international_students) / 100 AS international_students FROM      university_year JOIN      university ON university.id = university_year.university_id WHERE      university.university_name = 'University of Wisconsin-Madison' AND      university_year.year = 2013;
SELECT university_name FROM university_year WHERE year = 2015 AND num_students = (SELECT MIN(num_students) FROM university_year WHERE year = 2015);
SELECT      CASE          WHEN u1.num_students > u2.num_students THEN CAST(u1.num_students AS REAL) / u2.num_students         ELSE 0     END AS student_ratio FROM      university_year u1  JOIN      university u ON u.id = u1.university_id  JOIN      country c ON c.id = u.country_id  WHERE      c.country_name = 'Canada' AND      u1.year = 2013 AND      u.university_name = 'University of Ottawa' UNION ALL SELECT      CASE          WHEN u1.num_students > u2.num_students THEN CAST(u1.num_students AS REAL) / u2.num_students         ELSE 0     END AS student_ratio FROM      university_year u1  JOIN      university u ON u.id = u1.university_id  JOIN      country c ON c.id = u.country_id  WHERE      c.country_name = 'Canada' AND      u1.year = 2013 AND      u.university_name = 'Joseph Fourier University' ORDER BY      student_ratio DESC;
SELECT      (SUM(ranking_criteria_table.id) / 3) AS average_number_of_criteria  FROM      ranking_system_table  JOIN      ranking_criteria_table ON ranking_system_table.id = ranking_criteria_table.ranking_system_id  WHERE      ranking_system_table.system_name IN ('Times Higher Education World University Ranking', 'Shanghai Ranking', 'Center for World University Rankings');
SELECT AVG(university_year.num_students)  FROM university_year  WHERE university_year.year = 2012;
SELECT ury.score  FROM university_ranking_year ury  JOIN university_year uy ON ury.university_id = uy.university_id AND ury.year = uy.year  JOIN university u ON uy.university_id = u.id  WHERE u.id = 68 AND ury.year = 2015;
SELECT `id` FROM `country` WHERE `country_name` = 'Cyprus';
SELECT university_id FROM university_year WHERE pct_international_students = (SELECT MAX(pct_international_students) FROM university_year);
SELECT criteria_name  FROM ranking_criteria  WHERE id = 13;
SELECT AVG(ur.score) AS average_score FROM university_ranking_year ur WHERE ur.year = 2012;
SELECT SUM(DIVIDE(MULTIPLY(`pct_female_students`, `num_students`), 100))  FROM `university_year`  WHERE `university_id` = 40 AND `year` BETWEEN 2011 AND 2013;
SELECT AVG(university_ranking_year.score)  FROM university_ranking_year  JOIN university ON university.id = university_ranking_year.university_id  WHERE university.id = 79 AND university_ranking_year.year BETWEEN 2013 AND 2015;
SELECT `student_staff_ratio`  FROM `university_year`  WHERE `university_id` = 35;
SELECT ur.score FROM university_year uy JOIN university_ranking_year ur ON uy.university_id = ur.university_id AND uy.year = ur.year WHERE uy.num_students = (SELECT MAX(num_students) FROM university_year WHERE year = 2011) AND uy.year = 2011;
SELECT rc.criteria_name  FROM ranking_criteria AS rc  JOIN university_ranking_year ASury ON rc.id = sury.ranking_criteria_id  JOIN university AS u ON sury.university_id = u.id  WHERE u.university_name = 'Harvard University' AND sury.score = 100;
SELECT university.id, university.university_name  FROM university  JOIN country ON university.country_id = country.id  WHERE country.country_name = 'Turkey';
SELECT COUNT(*)  FROM ranking_criteria  WHERE ranking_system_id IN (     SELECT id      FROM ranking_system      WHERE system_name = 'Shanghai Ranking' )
SELECT u.university_name, ur.score  FROM university u  JOIN university_ranking_year ur ON u.id = ur.university_id  WHERE u.id = 124;
SELECT      university_year.university_id,     university_year.year,     university_year.num_students,     university_year.pct_female_students FROM      university_year JOIN      university ON university_year.university_id = university.id WHERE      university.university_name = 'University of Pennsylvania' AND      university_year.year = 2011;
SELECT university_name FROM university WHERE university.id IN (     SELECT university_id     FROM university_ranking_year     WHERE score < 50 );
SELECT COUNT(*)  FROM university  JOIN country ON university.country_id = country.id  WHERE country.country_name = 'Japan';
SELECT university_name FROM university_year WHERE num_students - (num_students * pct_female_students / 100) = (     SELECT MAX(num_students - (num_students * pct_female_students / 100))     FROM university_year );
SELECT DISTINCT c.country_name FROM country c JOIN university u ON c.id = u.country_id JOIN university_ranking_year ury ON u.id = ury.university_id WHERE ury.score < 70 AND ury.year = 2016;
SELECT      university_year.year,     (university_year.num_students - (university_year.num_students * university_year.pct_male_students / 100)) as male_students FROM      country c JOIN      university u ON c.id = u.country_id JOIN      university_year uy ON u.id = uy.university_id WHERE      c.country_name = 'United States' AND uy.year = 2011 AND uy.university_id IN (         SELECT id FROM university WHERE university_name = 'Emory University'     );
SELECT T3.country_name FROM university AS T1 JOIN country AS T3 ON T1.country_id = T3.id WHERE T1.university_name = 'Johns Hopkins University';
SELECT university_name FROM university WHERE university_id IN (     SELECT university_id     FROM university_year     WHERE num_students BETWEEN 400 AND 1000 );
SELECT u.year FROM university_year uy JOIN university u ON uy.university_id = u.id WHERE u.university_name = 'Brown University' ORDER BY uy.score DESC LIMIT 1;
SELECT AVG(ur.score)  FROM university u  JOIN university_ranking_year ur ON u.id = ur.university_id  WHERE u.university_name = 'Emory University'  AND ur.year BETWEEN 2011 AND 2016;
SELECT university_name FROM university_year WHERE year = 2015 AND num_students = (     SELECT MAX(num_students)     FROM university_year     WHERE year = 2015 );
SELECT      c.country_name,     u.num_students * u.pct_female_students / 100 AS female_students FROM      university u JOIN      university_year uy ON u.id = uy.university_id JOIN      country c ON u.country_id = c.id WHERE      u.id = 23 AND uy.year = 2011;
SELECT COUNT(*)  FROM university_ranking_year ury  JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id  WHERE rc.criteria_name = 'Teaching' AND ury.score = 40;
SELECT      (SUM((num_students * pct_female_students) / 100) / SUM(num_students)) * 100 AS percentage_female_students FROM      university JOIN      university_year ON university.id = university_year.university_id JOIN      country ON university.country_id = country.id WHERE      country.country_name = 'United States of America' AND      university_year.year = 2016;
SELECT      (SUM(num_students) - SUM(COALESCE((num_students * pct_international_students) / 100, 0))) AS difference FROM      university_year  WHERE      university_name = 'University of Tokyo' AND      year BETWEEN 2011 AND 2014;
SELECT u.university_name FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id WHERE ur.year = 2015 AND ur.score < (SELECT AVG(ur.score) * 0.28 FROM university_ranking_year ur WHERE ur.year = 2015);
SELECT SUM(units)  FROM sales_in_weather  JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr  JOIN weather ON sales_in_weather.date = weather.date AND relation.station_nbr = weather.station_nbr  WHERE sales_in_weather.item_nbr = 9 AND sales_in_weather.store_nbr = 1 AND weather.date = '2012-01-01'
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr WHERE sw.item_nbr = 9 AND sw.store_nbr = 1 AND SUBSTR(sw.date, 1, 4) = '2012' AND SUBSTR(sw.date, 6, 2) = '01';
SELECT item_nbr  FROM sales_in_weather  WHERE date = '2012-01-01' AND store_nbr = 1  ORDER BY units DESC  LIMIT 1;
SELECT      MIN(weather.tmax) - MAX(weather.tmin) AS temperature_range FROM      weather JOIN      relation ON weather.station_nbr = relation.station_nbr JOIN      sales_in_weather ON weather.date = '2012-01-01' AND relation.store_nbr = sales_in_weather.store_nbr WHERE      relation.station_nbr = 1;
SELECT DISTINCT w.date  FROM weather w  JOIN relation r ON w.station_nbr = r.station_nbr  WHERE r.store_nbr = 2 AND w.depart > 0;
SELECT      s.date FROM      sales_in_weather s JOIN      relation r ON s.store_nbr = r.store_nbr JOIN      weather w ON w.station_nbr = r.station_nbr AND w.date = s.date WHERE      r.station_nbr = 1 AND     w.date IN ('2012-01-01', '2012-01-02') AND     (w.date, Max(w.avgspeed)) IN (         SELECT              date, Max(avgspeed)         FROM              weather         WHERE              station_nbr = 1         GROUP BY              date     )
SELECT SUM(s.units)  FROM sales_in_weather s  JOIN relation r ON s.store_nbr = r.store_nbr  JOIN weather w ON w.station_nbr = r.station_nbr AND SUBSTR(s.date, 1, 4) = '2012'  WHERE s.item_nbr = 5 AND s.store_nbr = 3 AND w.depart < 0;
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON SUBSTR(sw.date, 1, 4) = '2012' AND r.station_nbr = w.station_nbr AND w.tmax = (     SELECT MAX(tmax)     FROM weather     WHERE SUBSTR(date, 1, 4) = '2012' ) WHERE sw.item_nbr = 5 AND sw.store_nbr = 3;
SELECT w.dewpoint FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON w.station_nbr = r.station_nbr AND sw.date = w.date WHERE sw.item_nbr = 5 AND sw.store_nbr = 3 AND SUBSTR(sw.date, 1, 4) = '2012' GROUP BY w.dewpoint ORDER BY SUM(sw.units) DESC LIMIT 1;
SELECT COUNT(DISTINCT w.date)  FROM sales_in_weather sw  JOIN weather w ON w.station_nbr = r.station_nbr AND w.date = sw.date  JOIN relation r ON r.store_nbr = sw.store_nbr  WHERE sw.item_nbr = 5 AND sw.units > 100 AND w.tmax > 90;
SELECT SUM(s.units)  FROM sales_in_weather s  JOIN relation r ON s.store_nbr = r.store_nbr  JOIN weather w ON w.date = s.date AND r.station_nbr = w.station_nbr  WHERE s.item_nbr = 5 AND s.store_nbr = 3 AND Max(w.tmax - w.tmin) = (SELECT Max(tmax - tmin) FROM weather);
SELECT s.date FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON w.station_nbr = r.station_nbr AND s.date = w.date WHERE s.units > 100 AND s.item_nbr = 5 AND s.store_nbr = 3 GROUP BY s.date ORDER BY MAX(w.tmax) - MIN(w.tmin) DESC LIMIT 1;
SELECT SUM(s.units)  FROM sales_in_weather s  JOIN relation r ON s.store_nbr = r.store_nbr  JOIN weather w ON w.date = s.date AND r.station_nbr = w.station_nbr  WHERE s.item_nbr = 5 AND s.store_nbr = 3 AND w.preciptotal > 0.05;
SELECT s.date FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON w.station_nbr = r.station_nbr WHERE s.item_nbr = 5 AND s.store_nbr = 3 AND s.units > 100 AND w.avgspeed > 10;
SELECT SUM(s.units)  FROM sales_in_weather s  JOIN relation r ON s.store_nbr = r.store_nbr  JOIN weather w ON w.station_nbr = r.station_nbr AND SUBSTR(s.date, 1, 4) = '2012'  WHERE r.store_nbr = 3 AND w.tmax = (     SELECT MAX(tmax)      FROM weather      WHERE SUBSTR(date, 1, 4) = '2012' )
SELECT      SUM(s.units) - SUM(r.units) FROM     sales_in_weather s JOIN     relation r ON s.store_nbr = r.store_nbr AND s.item_nbr = 16 JOIN     weather w ON DATE_FORMAT(s.date, '%Y-%m-%d') = DATE_FORMAT(w.date, '%Y-%m-%d') WHERE     s.store_nbr IN (5, 10)     AND s.item_nbr = 16     AND YEAR(s.date) = 2012     AND w.tmax = (SELECT MAX(tmax) FROM weather WHERE date LIKE '2012%' GROUP BY date)     AND r.store_nbr = s.store_nbr;
SELECT      item_nbr  FROM      sales_in_weather  WHERE      date IN (         SELECT              date          FROM              sales_in_weather s          JOIN              relation r ON s.store_nbr = r.store_nbr          JOIN              weather w ON w.stnpressure = r.station_nbr          WHERE              r.store_nbr = 3 AND              SUBSTRING(s.date, 1, 4) = '2012' AND              w.tmax = (                 SELECT                      MAX(tmax)                  FROM                      weather                  WHERE                      SUBSTRING(date, 1, 4) = '2012'             )     )  ORDER BY      units DESC  LIMIT 1;
SELECT COUNT(*)  FROM sales_in_weather sw  JOIN relation r ON sw.store_nbr = r.store_nbr  JOIN weather w ON SUBSTR(sw.date, 1, 4) = '2012' AND r.station_nbr = w.station_nbr AND MAX(w.tmax) = w.tmax  WHERE sw.units = 0 AND sw.store_nbr = 3
SELECT AVG(s.units)  FROM sales_in_weather s  JOIN relation r ON s.store_nbr = r.store_nbr  JOIN weather w ON w.date = s.date AND r.station_nbr = w.station_nbr  WHERE s.item_nbr = 5 AND s.store_nbr = 3 AND w.tmax > 90;
SELECT      (SUM(CASE WHEN T1.item_nbr = 5 THEN T1.units ELSE 0 END) /       SUM(T1.units)) * 100 AS percentage_sold FROM      sales_in_weather T1 JOIN      relation T2 ON T1.store_nbr = T2.store_nbr JOIN      weather T3 ON SUBSTR(T1.date, 1, 4) = '2012' AND T2.station_nbr = T3.station_nbr WHERE      T1.store_nbr = 3 AND T1.item_nbr = 5 AND T3.tmax = MAX(T3.tmax)
SELECT item_nbr  FROM sales_in_weather  JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr  JOIN weather ON sales_in_weather.date = weather.date AND relation.station_nbr = weather.station_nbr  WHERE sales_in_weather.store_nbr = 1 AND sales_in_weather.date = '2012-01-01' AND weather.date = '2012-01-01'  ORDER BY sales_in_weather.units DESC  LIMIT 1;
SELECT COUNT(*)  FROM sales_in_weather  JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr  JOIN weather ON sales_in_weather.date = weather.date AND relation.station_nbr = weather.station_nbr  WHERE sales_in_weather.item_nbr = 9  AND sales_in_weather.store_nbr = 11  AND sales_in_weather.date = '2012-12-07';
SELECT AVG(weather.tavg)  FROM sales_in_weather  JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr  JOIN weather ON relation.station_nbr = weather.station_nbr  WHERE sales_in_weather.date = '2014-10-17' AND weather.station_nbr = 20;
SELECT resultspeed  FROM weather  WHERE station_nbr = 9 AND date = '2014/01/15';
SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1;
SELECT w.station_nbr  FROM weather w  JOIN relation r ON w.station_nbr = r.station_nbr  WHERE r.store_nbr = 20;
SELECT      MIN(tmax) - MAX(tmin) AS Temperature_Range FROM      weather JOIN      relation ON weather.station_nbr = relation.station_nbr JOIN      sales_in_weather ON sales_in_weather.store_nbr = relation.store_nbr WHERE      relation.store_nbr = 7 AND      sales_in_weather.date = '2014-04-28';
SELECT COUNT(*)  FROM relation  WHERE station_nbr IN (     SELECT station_nbr      FROM weather      WHERE depart > (SELECT AVG(depart) FROM (SELECT depart FROM weather GROUP BY date ORDER BY COUNT(date) DESC LIMIT 1 OFFSET 365*29)) );
SELECT weather.dewpoint  FROM sales_in_weather  JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr  JOIN weather ON weather.station_nbr = relation.station_nbr AND weather.date = '2012-02-18'  WHERE sales_in_weather.store_nbr = 15;
SELECT weather.wetbulb  FROM sales_in_weather  JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr  JOIN weather ON relation.station_nbr = weather.station_nbr  WHERE sales_in_weather.date = '2012-02-15' AND sales_in_weather.store_nbr = 6;
SELECT COUNT(DISTINCT r.store_nbr)  FROM relation r JOIN sales_in_weather s ON r.store_nbr = s.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr WHERE w.avgspeed = (SELECT MAX(avgspeed) FROM weather)
SELECT weather.tmax  FROM sales_in_weather  JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr  JOIN weather ON relation.station_nbr = weather.station_nbr  WHERE sales_in_weather.date = '2012-11-09' AND relation.store_nbr = 21;
SELECT weather.sunrise  FROM sales_in_weather  JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr  JOIN weather ON relation.station_nbr = weather.station_nbr  WHERE sales_in_weather.store_nbr = 30 AND sales_in_weather.date = '2014-02-21';
SELECT COUNT(DISTINCT r.store_nbr) FROM relation r JOIN sales_in_weather s ON r.store_nbr = s.store_nbr JOIN weather w ON w.station_nbr = r.station_nbr AND w.snowfall = (SELECT MAX(snowfall) FROM weather);
SELECT weather.codesum  FROM sales_in_weather  JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr  JOIN weather ON relation.station_nbr = weather.station_nbr  WHERE sales_in_weather.date = '2013-02-12' AND sales_in_weather.store_nbr = 2;
SELECT sealevel  FROM sales_in_weather  JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr  JOIN weather ON relation.station_nbr = weather.station_nbr  WHERE sales_in_weather.store_nbr = 19  AND sales_in_weather.date = '2013-02-24';
SELECT SUM(preciptotal)  FROM sales_in_weather  JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr  JOIN weather ON relation.station_nbr = weather.station_nbr  WHERE sales_in_weather.date = '2012-12-25' AND sales_in_weather.store_nbr = 2;
SELECT weather.stnpressure  FROM sales_in_weather  JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr  JOIN weather ON relation.station_nbr = weather.station_nbr  WHERE sales_in_weather.date = '2012-05-15' AND sales_in_weather.store_nbr = 12;
SELECT      (SUM(sales_in_weather.units WHERE sales_in_weather.store_nbr = 10 AND sales_in_weather.date = '2014-10-31')) * 100 /      (SUM(sales_in_weather.units INNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr          INNER JOIN weather ON relation.station_nbr = weather.station_nbr AND weather.date = '2014-10-31')) AS percentage FROM      sales_in_weather INNER JOIN      relation ON sales_in_weather.store_nbr = relation.store_nbr INNER JOIN      weather ON relation.station_nbr = weather.station_nbr;
SELECT      ((MAX(weather.tavg) WHEN date = '2012-02-03' THEN MAX(weather.tavg) ELSE NULL END -       MAX(weather.tavg) WHEN date = '2012-02-02' THEN MAX(weather.tavg) ELSE NULL END) /       MAX(weather.tavg) WHEN date = '2012-02-02' THEN MAX(weather.tavg) ELSE NULL END) * 100 AS increased_percentage FROM      sales_in_weather JOIN      relation ON sales_in_weather.store_nbr = relation.store_nbr AND sales_in_weather.date BETWEEN '2012-02-02' AND '2012-02-03' JOIN      weather ON relation.station_nbr = weather.station_nbr AND weather.date BETWEEN '2012-02-02' AND '2012-02-03' WHERE      sales_in_weather.store_nbr = 9
SELECT item_nbr  FROM sales_in_weather  WHERE store_nbr = 1 AND date = '2012-01-01'  ORDER BY units DESC  LIMIT 1;
SELECT COUNT(*)  FROM relation  WHERE station_nbr = 12;
SELECT COUNT(*)  FROM sales_in_weather sw  JOIN relation r ON sw.store_nbr = r.store_nbr  WHERE r.store_nbr = 2 AND sw.date = '2012-01-01' AND sw.units = 0
SELECT date  FROM weather  WHERE SUBSTR(date, 1, 4) BETWEEN '2012' AND '2014'  AND station_nbr = 1  AND tmax = (SELECT MAX(tmax) FROM weather WHERE SUBSTR(date, 1, 4) BETWEEN '2012' AND '2014' AND station_nbr = 1);
SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1;
SELECT      w.station_nbr  FROM      weather w  JOIN      relation r ON w.station_nbr = r.station_nbr  WHERE      w.date BETWEEN '2014-03-01' AND '2014-03-31'      AND w.depart < 0  GROUP BY      w.station_nbr  HAVING      COUNT(*) = (         SELECT              MAX(day_count)          FROM              (             SELECT                  w.station_nbr, COUNT(w.date) as day_count              FROM                  weather w              JOIN                  relation r ON w.station_nbr = r.station_nbr              WHERE                  w.date BETWEEN '2014-03-01' AND '2014-03-31'                  AND w.depart < 0              GROUP BY                  w.station_nbr             ) as subquery     );
SELECT r.station_nbr  FROM relation r  JOIN sales_in_weather s ON r.store_nbr = s.store_nbr  WHERE s.item_nbr = 9 AND s.units = (SELECT MAX(SUM(units)) FROM sales_in_weather WHERE item_nbr = 9)
SELECT COUNT(*)  FROM sales_in_weather  JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr  JOIN (     SELECT station_nbr      FROM weather      WHERE avgspeed = (SELECT MAX(avgspeed) FROM weather) ) AS most_windy_station ON relation.station_nbr = most_windy_station.station_nbr;
SELECT s.store_nbr  FROM sales_in_weather s  JOIN relation r ON s.store_nbr = r.store_nbr  JOIN weather w ON w.station_nbr = 14 AND w.date LIKE '2014-02%' WHERE r.store_nbr IN (   SELECT r.store_nbr    FROM relation r    JOIN weather w2 ON w2.station_nbr = 14    WHERE w2.date LIKE '2014-02%' ) AND s.item_nbr = 44 AND s.units >= 300;
SELECT      s.item_nbr  FROM      sales_in_weather s  JOIN      relation r ON s.store_nbr = r.store_nbr  JOIN      weather w ON w.station_nbr = r.station_nbr AND w.date = s.date  WHERE      w.codesum = 'RA'  AND      SUBSTR(w.date, 1, 7) = '2013-06'  AND      r.station_nbr = 9  GROUP BY      s.item_nbr  ORDER BY      SUM(s.units) DESC  LIMIT 1;
SELECT r.station_nbr  FROM relation r  JOIN sales_in_weather s ON r.store_nbr = s.store_nbr  WHERE s.item_nbr = 5  GROUP BY r.station_nbr  ORDER BY SUM(s.units) DESC  LIMIT 1;
SELECT Min(weather.sunrise)  FROM sales_in_weather sw  JOIN relation r ON sw.store_nbr = r.store_nbr  JOIN weather w ON w.station_nbr = r.station_nbr  WHERE SUBSTR(sw.date, 1, 7) = '2012-02'  AND (SELECT COUNT(store_nbr) FROM relation WHERE station_nbr = w.station_nbr) = 1;
SELECT      s.store_nbr  FROM      sales_in_weather s  JOIN      relation r ON s.store_nbr = r.store_nbr  JOIN      weather w ON w.station_nbr = 17 AND SUBSTR(w.date, 1, 7) = '2012-10'  WHERE      s.item_nbr = 45 AND r.station_nbr = 17  GROUP BY      s.store_nbr  ORDER BY      SUM(s.units) DESC  LIMIT 1;
SELECT s.item_nbr  FROM sales_in_weather s  JOIN relation r ON s.store_nbr = r.store_nbr  JOIN weather w ON w.station_nbr = r.station_nbr  WHERE s.date = w.date AND w.snowfall = (SELECT MAX(snowfall) FROM weather);
SELECT r.station_nbr  FROM relation r  JOIN sales_in_weather s ON r.store_nbr = s.store_nbr  GROUP BY r.station_nbr, s.date, s.item_nbr  ORDER BY MAX(s.units) DESC  LIMIT 3;
SELECT COUNT(*)  FROM relation  WHERE station_nbr = (SELECT station_nbr FROM weather WHERE heat = (SELECT MAX(heat) FROM weather));
SELECT weather.tmin  FROM sales_in_weather  JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr  JOIN weather ON weather.station_nbr = relation.station_nbr  WHERE sales_in_weather.date = '2014-02-08' AND relation.store_nbr = 29;
SELECT COUNT(*)  FROM sales_in_weather sw  JOIN relation r ON sw.store_nbr = r.store_nbr  JOIN weather w ON w.station_nbr = r.station_nbr  WHERE r.station_nbr IN (     SELECT station_nbr      FROM relation      GROUP BY station_nbr      HAVING COUNT(store_nbr) = 3 )  AND w.stnpressure < 30  AND w.date = '2014-02-18'
SELECT      r.station_nbr AS Station,     AVG(w.tmax) AS AverageMaxTempFebruary2012 FROM      sales_in_weather siw JOIN      relation r ON siw.store_nbr = r.store_nbr JOIN      weather w ON r.station_nbr = w.station_nbr AND SUBSTRING(siw.date, 1, 7) = '2012-02' GROUP BY      r.station_nbr ORDER BY      COUNT(r.store_nbr) DESC, AVG(w.tmax) DESC LIMIT 1;
SELECT      (SUM(CASE WHEN s.store_nbr = 10 AND w.station_nbr = 12 AND SUBSTR(s.date, 1, 4) = '2014' AND s.item_nbr = 5 THEN s.units ELSE 0 END)      / SUM(CASE WHEN s.store_nbr = 10 AND w.station_nbr = 12 AND SUBSTR(s.date, 1, 4) = '2014' THEN s.units ELSE 0 END)) * 100 AS percentage_sold FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr;
SELECT MAX(relation.avgspeed)  FROM sales_in_weather JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr;
SELECT COUNT(DISTINCT date)  FROM weather  WHERE snowfall > 5;
SELECT COUNT(DISTINCT date)  FROM weather  WHERE sunrise < '05:00:00'
SELECT MIN(dewpoint)  FROM weather;
SELECT      MIN(weather.tmin) AS min_temp,     MAX(weather.tmax) AS max_temp FROM      sales_in_weather JOIN      relation ON sales_in_weather.store_nbr = relation.store_nbr JOIN      weather ON weather.station_nbr = relation.station_nbr WHERE      relation.station_nbr = 1 AND      sales_in_weather.date = '2012-01-15';
SELECT COUNT(DISTINCT r.station_nbr) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr WHERE sw.item_nbr = 5 AND SUBSTRING(sw.date, 1, 7) = '2014-01';
SELECT MIN(weather.tmin)  FROM sales_in_weather  JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr  JOIN weather ON relation.station_nbr = weather.station_nbr  WHERE sales_in_weather.store_nbr = 16 AND SUBSTRING(sales_in_weather.date, 1, 7) = '2012-01'
SELECT COUNT(*)  FROM sales_in_weather sw  JOIN relation r ON sw.store_nbr = r.store_nbr  JOIN weather w ON w.station_nbr = r.station_nbr  WHERE sw.item_nbr = 7 AND sw.store_nbr = 7 AND w.snowfall < 5;
SELECT COUNT(s.units)  FROM sales_in_weather s  JOIN relation r ON s.store_nbr = r.store_nbr  JOIN weather w ON w.station_nbr = r.station_nbr  WHERE s.store_nbr = 9 AND w.snowfall <> 0 AND w.snowfall IS NOT NULL
SELECT r.station_nbr, s.units  FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr  WHERE s.store_nbr = 17
SELECT DISTINCT w.date  FROM weather w  JOIN relation r ON w.station_nbr = r.station_nbr  WHERE r.store_nbr = 35 AND w.codesum LIKE '%HZ%'
SELECT      r.station_nbr,     w.sealevel,     w.avgspeed FROM      sales_in_weather siw JOIN      relation r ON siw.store_nbr = r.store_nbr AND (r.store_nbr = 3 OR r.store_nbr = 4) JOIN      weather w ON w.station_nbr = r.station_nbr WHERE      r.store_nbr IN (3, 4);
SELECT item_nbr  FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON w.station_nbr = r.station_nbr AND DATE(sw.date) = DATE(w.date) WHERE r.store_nbr = 1 AND w.codesum LIKE '%RA%' ORDER BY sw.units DESC LIMIT 1;
SELECT      MAX(weather.tmax) / MIN(weather.tmin) AS temperature_ratio FROM      sales_in_weather  JOIN      relation ON sales_in_weather.store_nbr = relation.store_nbr JOIN      weather ON relation.station_nbr = weather.station_nbr WHERE      sales_in_weather.store_nbr = 11;
SELECT      (SUM(CASE WHEN r.station_nbr = 1 THEN s.units ELSE 0 END)) -      (SUM(CASE WHEN r.station_nbr = 2 THEN s.units ELSE 0 END)) AS units_difference FROM      sales_in_weather s JOIN      relation r ON s.store_nbr = r.store_nbr WHERE      YEAR(s.date) = 2012;
SELECT      (MAX(weather.tavg) WHEN store_nbr = 18 THEN NULL END) -      (MAX(weather.tavg) WHEN store_nbr = 19 THEN NULL END) AS avg_temp_difference FROM      sales_in_weather JOIN      relation ON sales_in_weather.store_nbr = relation.store_nbr JOIN      weather ON relation.station_nbr = weather.station_nbr WHERE      sales_in_weather.store_nbr IN (18, 19) AND      weather.date = '2022-09-16';
SELECT SUM(s.units)  FROM sales_in_weather s  JOIN relation r ON s.store_nbr = r.store_nbr  JOIN weather w ON w.station_nbr = r.station_nbr AND w.date = s.date  WHERE s.item_nbr = 1 AND w.tavg = 83;
SELECT      (SUM(units) - SUM(units)) AS units_sold_difference FROM      sales_in_weather sw JOIN      relation r ON sw.store_nbr = r.store_nbr JOIN      weather w ON DATE_FORMAT(sw.date, '%Y-%m-%d') = DATE_FORMAT(w.date, '%Y-%m-%d') WHERE      r.station_nbr = (SELECT station_nbr FROM weather WHERE sunset = (SELECT MIN(sunset) FROM weather))     AND sw.item_nbr = 1 UNION SELECT      (SUM(units) - SUM(units)) AS units_sold_difference FROM      sales_in_weather sw JOIN      relation r ON sw.store_nbr = r.store_nbr JOIN      weather w ON DATE_FORMAT(sw.date, '%Y-%m-%d') = DATE_FORMAT(w.date, '%Y-%m-%d') WHERE      r.station_nbr = (SELECT station_nbr FROM weather WHERE sunset = (SELECT MAX(sunset) FROM weather))     AND sw.item_nbr = 1;
SELECT SUM(s.units)  FROM sales_in_weather s  JOIN relation r ON s.store_nbr = r.store_nbr  JOIN weather w ON w.station_nbr = r.station_nbr  WHERE s.item_nbr = 10 AND w.tavg < (SELECT AVG(tavg) FROM weather)
SELECT      AVG(sales_in_weather.units)  FROM      sales_in_weather JOIN      relation ON sales_in_weather.store_nbr = relation.store_nbr JOIN      weather ON relation.station_nbr = weather.station_nbr WHERE      sales_in_weather.store_nbr IN (6, 7) AND      SUBSTR(weather.date, 1, 7) = '2012-05';
SELECT Country  FROM language  WHERE Name = 'Polish'  ORDER BY Percentage ASC  LIMIT 1;
SELECT c.Name FROM country c JOIN encompasses e ON c.Code = e.Country JOIN continent ca ON ca.Name = 'Africa' AND ca.Percentage = 90
SELECT      ethnicGroup.Name AS EthnicGroup,     ethnicGroup.Percentage AS Percentage FROM      ethnicGroup JOIN      country ON ethnicGroup.Country = country.Code WHERE      country.Name = 'Singapore';
SELECT      c.Name,     COUNT(*) * 100.0 / total_countries AS percentage FROM     (SELECT DISTINCT country.Code FROM country JOIN politics ON country.Code = politics.Country WHERE politics.Government = 'republic') c CROSS JOIN      (SELECT COUNT(DISTINCT country.Code) AS total_countries FROM country) t WHERE     politics.Established > 1970 GROUP BY     c.Name;
SELECT      economy.GDP,      politics.Government  FROM      country  JOIN      economy ON country.Code = economy.Country  JOIN      politics ON country.Code = politics.Country  WHERE      country.Name = 'Bosnia and Herzegovina';
SELECT Country, Population_Growth  FROM population  WHERE Population_Growth > 2 AND Infant_Mortality < 5;
SELECT      c.Name,      eg.Name AS MajorityEthnicGroup FROM      country c JOIN      population p ON c.Code = p.Country JOIN      ethnicGroup eg ON c.Code = eg.Country WHERE      p.Population > 10000000 ORDER BY      eg.Percentage DESC LIMIT 1;
SELECT      c.Name,     eg.Name AS EthnicGroup,     eg.Percentage FROM      country c JOIN      encompasses e ON c.Code = e.Country JOIN      ethnicGroup eg ON eg.Country = c.Code WHERE      (SELECT COUNT(*) FROM ethnicGroup WHERE Country = c.Code) =      (SELECT MAX(countEthnic) FROM (         SELECT              COUNT(*) AS countEthnic          FROM ethnicGroup          GROUP BY Country     ) t) ORDER BY      c.Name;
SELECT c.Name  FROM country AS c  JOIN encompasses AS e ON c.Code = e.Country  JOIN ethnicGroup AS eg ON c.Code = eg.Country  WHERE eg.Percentage = 100 AND eg.Name = 'Africans';
SELECT p.Population_Growth  FROM politics p  JOIN country c ON p.Country = c.Code  JOIN ethnicGroup eg ON c.Code = eg.Country  WHERE eg.Name = 'Amerindian'  ORDER BY eg.Percentage ASC  LIMIT 1;
SELECT      c.Name,     e.GDP,     e.Agriculture,     (e.Agriculture / e.GDP) * 100 AS Agri_Percent_of_GDP FROM      country c JOIN      economy e ON c.Code = e.Country WHERE      c.Area > 600000
SELECT Country  FROM politics  WHERE Government = 'republic' AND Population_Growth = (SELECT MAX(Population_Growth) FROM politics);
SELECT Independence  FROM politics  WHERE Country = 'Bulgaria';
SELECT      c.Name AS Country,     (e.Percentage * p.Population) AS Arab_Population FROM      country c JOIN      encompasses e ON c.Code = e.Country JOIN      ethnicGroup g ON c.Code = g.Country JOIN      population p ON c.Code = p.Country WHERE      g.Name = 'Arab';
SELECT      p.Population  FROM      population p  JOIN      ethnicGroup eg ON p.Country = eg.Country  WHERE      p.Country = 'Turks and Caicos Islands' AND      eg.Name = 'African' AND      eg.Percentage IS NOT NULL;
SELECT      MIN(population) * MIN(population_growth) AS num_growth_population FROM      population JOIN      politics ON population.Country = politics.Country WHERE      infant_mortality = (SELECT MAX(infant_mortality) FROM population);
SELECT `Capital`, `Population`  FROM `country`  JOIN `economy` ON `country.Code` = `economy.Country`  WHERE `economy.GDP` > 400000;
SELECT (e.service * c.GDP) AS ServiceGDP FROM country AS c JOIN economy AS e ON c.Name = e.Country WHERE c.Name = 'Brazil';
SELECT      c.Name AS Country,     pg.Population_Growth AS Population_Growth FROM      country c JOIN      population pg ON c.Code = pg.Country ORDER BY      pg.Infant_Mortality DESC LIMIT 1;
SELECT Country, Population_Growth  FROM population  WHERE Population_Growth < 0;
SELECT `Country`, `Infant_Mortality`  FROM `country`  WHERE `Area` BETWEEN 500000 AND 1000000;
SELECT c.Name, e.GDP  FROM country c  JOIN population p ON c.Code = p.Country  JOIN economy e ON c.Code = e.Country  WHERE p.Population_Growth > 3;
SELECT `Infant_Mortality`  FROM `population`  WHERE `Country` = 'Ethiopia';
SELECT      economy.GDP * economy.Industry  FROM      economy  WHERE      economy.Country = 'Singapore';
SELECT SUM(economy.Agriculture)  FROM economy  JOIN country ON economy.Country = country.Code  WHERE country.Area = (SELECT MIN(Area) FROM country)
SELECT T1.Name  FROM country AS T1  JOIN ethnicity AS T2 ON T1.Code = T2.Country  WHERE T2.Name = 'Albanian'  ORDER BY T2.Percentage DESC  LIMIT 1;
SELECT COUNT(*)  FROM country  JOIN ethnicGroup ON country.Name = ethnicGroup.Country  WHERE ethnicGroup.Name = 'African' AND country.Population > 10000000;
SELECT c.Name FROM country c JOIN encompasses e ON c.Code = e.Country GROUP BY c.Name HAVING COUNT(DISTINCT e.Continent) > 5;
SELECT Country FROM economy ORDER BY GDP DESC LIMIT 1;
SELECT COUNT(*)  FROM country  JOIN economy ON country.Code = economy.Country  WHERE country.Population > 10000000 AND economy.GDP > 500000;
SELECT T1.capital FROM country AS T1  JOIN economy AS T2 ON T1.code = T2.country  WHERE T2.inflation < 2;
SELECT Country  FROM economy  WHERE Inflation = (SELECT MIN(Inflation) FROM economy);
SELECT COUNT(*)  FROM country  JOIN economy ON country.Code = economy.Country  WHERE economy.Agriculture < 50 AND country.Area > 8000000;
SELECT COUNT(*)  FROM city  JOIN located ON city.Name = located.City  WHERE located.Lake LIKE '%salt%'
SELECT l.Depth  FROM lake l  JOIN located lo ON l.Name = lo.Lake  JOIN province p ON p.Name = lo.Province  WHERE p.Country = 'Albania';
SELECT T1.Name AS LakeName, T2.City AS CityName  FROM lake AS T1  JOIN located AS T2 ON T1.Country = T2.Country AND T1.Province = T2.Province  WHERE T1.Altitude = (SELECT MAX(Altitude) FROM lake)
SELECT COUNT(*)  FROM lake  JOIN island ON lake.Country = island.Country  WHERE island.Name = 'Canary Islands' AND lake.Area > 1000000;
SELECT Country  FROM language  GROUP BY Country  ORDER BY SUM(Percentage) DESC  LIMIT 1;
SELECT      c.Name AS CapitalCity FROM      country AS co JOIN      ethnicity AS et ON et.Country = co.Code JOIN      country AS ca ON ca.Code = et.Country WHERE      et.Percentage > 90 AND ca.Name = 'Armenia';
SELECT COUNT(*)  FROM country  WHERE Population < 1000000 AND (SELECT COUNT(*) FROM language WHERE language.Country = country.Code) > 2;
SELECT COUNT(*)  FROM organization  JOIN country ON organization.Country = country.Code  WHERE country.Population < 1000000;
SELECT COUNT(*)  FROM organization  JOIN country ON organization.Country = country.Code  WHERE country.GDP < 500000 AND organization.Established >= '1999-01-01'
SELECT COUNT(*)  FROM countries  JOIN is_member ON countries.code = is_member.country  JOIN economies ON countries.code = economies.country  WHERE countries.code IN (   SELECT country    FROM organization    GROUP BY country    HAVING COUNT(*) > 3 )  AND economies.inflation > 5;
SELECT COUNT(*)  FROM organization  WHERE Country IN (     SELECT Country      FROM ethnicGroup      GROUP BY Country      ORDER BY SUM(Percentage) DESC      LIMIT 1 )
SELECT o.Name FROM organization AS o JOIN country AS c ON o.Country = c.Code JOIN language AS l ON c.Code = l.Country WHERE l.Name = 'Dutch';
SELECT COUNT(*)  FROM organization  JOIN country ON organization.Country = country.Code  JOIN language ON country.Code = language.Country  WHERE language.Name = 'Bosnian'
SELECT `Population_Growth` FROM `politics` JOIN `economy` ON `politics.Country` = `economy.Country` WHERE `economy.Inflation` < 3 ORDER BY `Population_Growth` DESC LIMIT 1;
SELECT COUNT(*)  FROM country  JOIN economy ON country.Code = economy.Country  WHERE economy.GDP > 1000000 AND population.Population_Growth > 3;
SELECT Country  FROM economy  JOIN population ON economy.Country = population.Country  WHERE (GDP / Population) = (     SELECT MAX((GDP / Population))      FROM economy      JOIN population ON economy.Country = population.Country );
SELECT      c.Name,     SUM(l.Area) / p.Area * 100 AS LakeAreaCoverage FROM      country c JOIN      located l ON c.Code = l.Country JOIN      province p ON c.Code = p.Country GROUP BY      c.Name ORDER BY      LakeAreaCoverage DESC LIMIT 1;
SELECT AVG(Population_Growth)  FROM country  WHERE EXISTS (     SELECT 1 FROM language      WHERE language.Country = country.Name      GROUP BY country.Name      HAVING COUNT(DISTINCT Name) > 3 )
SELECT Country  FROM economy  WHERE Inflation > (SELECT AVG(Inflation) * 1.3 FROM economy)
SELECT Country  FROM city  WHERE Name = 'Baghdad';
SELECT r.Name FROM religion r JOIN country c ON r.Country = c.Code JOIN province p ON c.Code = p.Country WHERE p.Name = 'Martinique' ORDER BY r.Percentage * c.Population DESC LIMIT 1;
SELECT `Name`  FROM country  JOIN religion ON country.Code = religion.Country  WHERE religion.Percentage = 41  AND religion.Name = 'Christian';
SELECT T1.Name  FROM country AS T1  JOIN located AS T2 ON T1.Code = T2.Country  JOIN river AS T3 ON T3.Name = T2.River  WHERE T3.Name = 'Detroit River' GROUP BY T1.Name;
SELECT Country1, Country2  FROM borders  WHERE Length = (SELECT MAX(Length) FROM borders)
SELECT T1.Name  FROM country AS T1  JOIN borders AS T2 ON T1.Code = T2.Country1  GROUP BY T1.Name  ORDER BY COUNT(T2.Country2) DESC  LIMIT 1;
SELECT `Country` FROM mountain WHERE `Name` = 'Cerro Chirripo';
SELECT COUNT(*)  FROM mountain  WHERE Country = 'Indonesia';
SELECT COUNT(*)  FROM mountain  WHERE Name = 'Japan';
SELECT T3.Latitude  FROM mountain AS T1  JOIN mountainOnIsland AS T2 ON T1.Name = T2.Mountain  JOIN island AS T3 ON T3.Name = T2.Island  WHERE T1.Name = 'Mount Andrinjitra';
SELECT      c1.Code AS 'Country_Code_1',     c2.Code AS 'Country_Code_2' FROM      country c1 JOIN      mountain m1 ON c1.Name = m1.Country JOIN      mountain m2 ON m2.Height = (SELECT MAX(Height) FROM mountain WHERE Height != m1.Height) WHERE      m1.Name = m2.Name AND m1 != m2;
SELECT      c.Population * 100 / SUM(o.Population) AS Percentage FROM      country c  JOIN      encompasses e ON c.Code = e.Country  JOIN      continent o ON o.Name = 'Asia' AND e.Continent = o.Name
SELECT      c.Population * 100 / SUM(o.Population) AS Percentage FROM      country c  JOIN      encompasses e ON c.Code = e.Country  JOIN      continent o ON o.Name = 'Asia' AND e.Continent = o.Name
SELECT `Name`  FROM `city` WHERE `Country` = 'Japan' ORDER BY `Population` DESC LIMIT 1;
SELECT p.Capital  FROM province AS p  JOIN located AS l ON p.Name = l.Province  JOIN city AS c ON l.Country = c.Country AND l.Province = c.Province AND c.Name = 'Olsztyn';
SELECT T3.Name  FROM mountain AS T1  JOIN geographic_region AS T2 ON T1.Country = T2.Country  JOIN province AS T3 ON T3.Name = T2.Province  WHERE T1.Type = 'volcano' AND T1.Height = (SELECT MAX(Height) FROM mountain)
SELECT Independence  FROM politics  WHERE Country = 'Uganda';
SELECT Government  FROM politics  WHERE Country = 'Iran';
SELECT `Country` FROM `island` WHERE `Name` = 'Bermuda';
SELECT p.Name  FROM country c  JOIN ethnicity e ON c.Code = e.Country  JOIN ethnicGroup g ON g.Country = c.Code AND g.Name = 'Malay'  JOIN province p ON p.Code = c.Province  WHERE e.Percentage = (SELECT MAX(Percentage) FROM ethnicGroup WHERE Name = 'Malay')  LIMIT 1;
SELECT ethnicGroup.Name  FROM ethnicGroup  JOIN country ON ethnicGroup.Country = country.Code  WHERE country.Area = (SELECT MAX(AnotherArea) FROM (SELECT MAX(Area) AS Area FROM country) AS Largest, (SELECT MAX(Area) AS Area FROM country) AS AnotherLargest WHERE AnotherArea < Largest.AREA LIMIT 1) ORDER BY ethnicGroup.Percentage DESC LIMIT 1;
SELECT country.Name  FROM city  JOIN country ON city.Country = country.Code  WHERE city.Population = 114339;
SELECT COUNT(*)  FROM river  WHERE Sea = '459m' AND Depth <= 459;
SELECT Area  FROM country  JOIN politics ON country.Name = politics.Country  WHERE politics.Independence = '1921-03-13'
SELECT      p.Population / pr.Area AS population_density FROM      city c JOIN      province pr ON c.Province = pr.Name JOIN      country co ON c.Country = co.Code JOIN      population p ON co.Code = p.Country WHERE      c.Name = 'Petropavl';
SELECT      (SELECT SUM(Population) FROM country WHERE Code = 'UK' AND Language = 'English') -      (SELECT SUM(Population) FROM country WHERE Code = 'UK' AND Language = 'Scottish') FROM      country WHERE      Name = 'United Kingdom';
SELECT      c.Name AS MostPopulatedCity,     COALESCE(DENSE_RANK() OVER (ORDER BY p.Population DESC), 0) AS DensityRank FROM      city AS c JOIN      country AS ct ON c.Country = ct.Code JOIN      area AS a ON ct.Province = a.Name WHERE      DENSE_RANK() OVER (ORDER BY (p.Population / a.Area) DESC) = 12 AND      COALESCE(DENSE_RANK() OVER (ORDER BY (p.Population / a.Area) DESC), 0) = 12 ORDER BY      p.Population DESC LIMIT 1;
SELECT      MAX(b.Length) / MIN(b.Length) AS ratio FROM      borders b  WHERE      b.Country1 IN (SELECT Code FROM country WHERE Name = 'United States') OR      b.Country2 IN (SELECT Code FROM country WHERE Name = 'United States')
SELECT T1.capital FROM country AS T1 JOIN province AS T2 ON T1.code = T2.country JOIN mountain AS T3 ON T2.name = T3.province GROUP BY T1.name HAVING COUNT(T3.name) > 4;
SELECT COUNT(*)  FROM mountain  JOIN country ON mountain.Country = country.Code  WHERE country.Population = (SELECT MAX(Population) FROM country);
SELECT COUNT(*)  FROM country  JOIN economy ON country.Code = economy.Country  WHERE economy.Agriculture > 40 AND (     SELECT COUNT(*)      FROM mountain      WHERE country.Name = mountain.Country ) < 2;
SELECT      m.Name FROM      mountain m JOIN      country c ON c.Province = m.Province  WHERE      c.Population_Growth IS NOT NULL AND c.Inflation IS NOT NULL AND c.Inflation < (SELECT MAX(Inflation) FROM country);
SELECT COUNT(*) AS num_of_deserts  FROM country  JOIN encompasses ON country.Code = encompasses.Country  JOIN continent ON country.Code = continent.Country  WHERE country.Government = 'republic' AND continent.Name = 'desert'
SELECT D.Name  FROM desert D  JOIN borders B ON D.Name = B.Desert  JOIN country CO ON B.Country1 = CO.Code  WHERE CO.Population > 100000 AND B.Length < 500000
SELECT COUNT(*)  FROM desert  JOIN country ON desert.Country = country.Code  JOIN ethnicGroup ON country.Code = ethnicGroup.Country  WHERE ethnicGroup.Percentage > 90 AND ethnicGroup.Name = 'Armenian';
SELECT M.Name  FROM mountain M  JOIN country C ON M.Country = C.Code  WHERE C.Independence = 'Yes'  ORDER BY M.Height DESC  LIMIT 1;
SELECT COUNT(*)  FROM mountain  JOIN country ON mountain.Country = country.Code  WHERE country.Population <= 5000000 AND mountain.Type = 'volcanic';
SELECT COUNT(*)  FROM country  JOIN economy ON country.Code = economy.Country  JOIN mountain ON country.Name = mountain.Country  WHERE economy.GDP > 1000000 AND mountain.Height > 1000;
SELECT MAX(T.Length)  FROM borders T  JOIN country C1 ON T.Country1 = C1.Code  JOIN country C2 ON T.Country2 = C2.Code  WHERE C1.Independence = 'Yes' AND C2.Independence = 'Yes'
SELECT COUNT(*)  FROM borders  JOIN country ON borders.Country1 = country.Code  JOIN politics ON country.Code = politics.Country  WHERE politics.Government = 'republic' AND borders.Length > 200;
SELECT Country1, Country2  FROM borders  WHERE Length = (SELECT MIN(Length) FROM borders)
SELECT T1.GDP  FROM economy AS T1  JOIN country AS T2 ON T1.Country = T2.Code  JOIN encompasses AS T3 ON T2.Code = T3.Country  JOIN continent AS T4 ON T4.Name = 'Europe' AND T3.Continent = T4.Name
SELECT COUNT(*)  FROM mountain  JOIN continent ON mountain.Country = continent.Code  WHERE continent.Name = 'Africa';
SELECT Desert  FROM desert  JOIN continent ON desert.Longitude = continent.Longitude AND desert.Latitude = continent.Latitude  WHERE continent.Name = 'America'  ORDER BY Area DESC  LIMIT 1;
SELECT c.Name  FROM country c  JOIN continent co ON c.Continent = co.Name  WHERE co.Name = 'Europe' AND c.Population_Growth > 3
SELECT COUNT(*)  FROM country  JOIN continent ON country.Continent = continent.Name  WHERE continent.Name = 'Europe'  AND `population.population_growth` > 100;
SELECT COUNT(*)  FROM country  JOIN language ON country.Code = language.Country  WHERE language.Name = 'Bosnian' AND population.Population_Growth < 0;
SELECT AVG(economy.Agriculture)  FROM country  JOIN economy ON country.Code = economy.Country  WHERE country.Continent = 'Africa';
SELECT COUNT(*)  FROM country  JOIN economy ON country.Code = economy.Country  WHERE economy.GDP > 5000 AND countryDEPENDENT = 'N'
SELECT AVG(e.Inflation)  FROM country c  JOIN encompasses e ON c.Name = e.Country  JOIN continent con ON con.Name = c.Continent  WHERE con.Area = (SELECT MAX(Area) FROM continent)  GROUP BY c.Name;
SELECT      i.Name,      i.Area  FROM      city c  JOIN      located l ON c.Name = l.City  JOIN      island i ON i.Name = l.Island  WHERE      c.Name = 'Balikpapan';
SELECT      c.Name AS City,     p.Population AS Population FROM      city c JOIN      island i ON c.Country = i.Country AND c.Province = i.Province JOIN      located l ON c.Name = l.City AND c.Province = l.Province AND c.Country = l.Country JOIN      province p ON c.Province = p.Name JOIN      continent co ON c.Country = co.Country AND co.Name = 'Sumatra' WHERE      co.Name = 'Sumatra';
SELECT      island.Name,      island.Longitude,      island.Latitude FROM      province  JOIN      country ON province.Country = country.Code JOIN      island ON province.Name = 'South Yorkshire' WHERE      country.Name = 'South Yorkshire';
SELECT      I.Name FROM      island AS I JOIN      province AS P ON I.Province = P.Name WHERE      P.Name = 'Warwickshire' AND     I.Area > (SELECT MAX(Area) FROM island WHERE Name = 'Warwickshire');
SELECT I.Name AS IslandName, C.Name AS CityName  FROM island I  JOIN locatedOn LO ON I.Name = LO.Island  JOIN city C ON LO.Country = C.Country AND LO.Province = C.Province  WHERE I.Area < 200;
SELECT T2.Province, T3.Capital  FROM city AS T1  JOIN province AS T2 ON T1.Province = T2.Name  JOIN province AS T3 ON T2.Country = T3.Country  WHERE T1.Name = 'Glenrothes'
SELECT      c.Name AS City,     c.Population AS CityPopulation FROM      city c JOIN      province p ON c.Province = p.Name WHERE      p.Population > 1000000;
SELECT      i.Name AS Coral_Island,     c.Name AS City,     p.Name AS Province FROM      island i JOIN      city c ON c.Province = i.Province AND c.Country = i.Country JOIN      province p ON p.Name = i.Province AND p.Country = i.Country;
SELECT AVG(city.Population)  FROM city  JOIN located ON city.Name = located.City  WHERE located.Sea = 'Baltic Sea';
SELECT      c.Population * 100 / p.Population AS Percentage FROM      city c JOIN      province p ON c.Province = p.Name WHERE      c.Name = 'Edmonton'
SELECT R.Name  FROM river R  JOIN located ON R.Name = located.River  JOIN country C ON located.Country = C.Name  WHERE C.Name LIKE '%Eastern Europe%' OR C.Name LIKE '%Western Asia%'  AND (R.EstuaryLongitude, R.EstuaryLatitude) IN  (SELECT Longitude, Latitude FROM sea WHERE Name = 'Black Sea');
SELECT T1.Name, T3.City  FROM lake AS T1  JOIN located AS T2 ON T1.Province = 'Albania' AND T1.Country = T2.Country  JOIN city AS T3 ON T2.City = T3.Name;
SELECT      m.Name,      m.Height  FROM      mountain m  JOIN      encompasses e ON e.Country = m.Country  JOIN      continent c ON c.Name = 'Himalaya' AND c.Name = e.Continent  WHERE      m.Height = (SELECT MAX(Height) FROM mountain);
SELECT M.Name, M.Longitude, M.Latitude  FROM mountain AS M  JOIN religion AS R ON M.Country = R.Country  WHERE R.Name = 'Volcano';
SELECT      m.Name  FROM      mountain m  JOIN      geo_mountain gm ON m.Name = gm.Mountain  WHERE      gm.Province LIKE '%volcano%' AND m.Height BETWEEN 2000 AND 4000;
SELECT Name FROM river  JOIN sea ON river.Sea = sea.Name  WHERE sea.Name = 'Mediterranean Sea'  ORDER BY Length DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN m.Type != 'volcano' THEN 1 END) / COUNT(*) * 100) AS NonVolcanicPercentage FROM      mountain m WHERE      m.Name = 'Andes';
SELECT DISTINCT c.Name, p.Name  FROM city c  JOIN located l ON c.Name = l.City  JOIN river r ON l.River = r.Name  WHERE r.Sea IN (SELECT Name FROM sea WHERE Name LIKE '%Atlantic%');
SELECT r.Name, r.Length  FROM river AS r  JOIN located AS l ON r.Name = l.River  WHERE l.City = 'Orleans';
SELECT m.Height, m.Longitude, m.Latitude  FROM mountain AS m  JOIN river AS r ON m.Name = r.Mountains  WHERE r.Name = 'Lech';
SELECT      r.Name AS river_name,     m.Name AS source_mountain_name FROM      located l JOIN      province p ON l.Province = p.Name JOIN      country c ON l.Country = c.Code JOIN      river r ON r.SourceProvince = l.Province JOIN      mountain m ON m.Longitude = r.SourceLongitude AND m.Latitude = r.SourceLatitude WHERE      p.Name = 'Lorraine'
SELECT T3.Name, T3.Height  FROM river AS T1  JOIN geo_source AS T2 ON T1.SourceName = T2.River  JOIN mountain AS T3 ON T3.Name = T2.Mountain  WHERE T1.Name = 'Blue Nile'
SELECT      geo_river.River,      geo_river.Length FROM      city  JOIN      located  ON      city.Name = 'Little Rock' AND city.Province = located.Province AND city.Country = located.Country JOIN      geo_river  ON      located.River = geo_river.Name;
SELECT RIVER, PROVINCE  FROM river  WHERE LENGTH > 1000;
SELECT T3.Name, T3.Country, T2.Height  FROM mountain AS T2  JOIN province AS T3 ON T2.Province = T3.Name  WHERE T2.Name = 'Moldoveanu';
SELECT river.Name, geo_river.Length  FROM geo_river JOIN country ON geo_river.Country = country.Code WHERE country.Name = 'USA';
SELECT AVG(`Height`)  FROM mountain  WHERE `Province` = 'Nepal'
SELECT      MAX(city.Population) - MIN(city.Population) AS PopDifference FROM      city JOIN      located ON city.Name = located.City WHERE      located.River = 'Seine';
SELECT      R1.Name AS 'Longer_River_Name',     R2.Name AS 'Shorter_River_Name',     R1.Length - R2.Length AS 'Difference_In_Length' FROM      located AS LOC JOIN      river AS R1 ON LOC.River = R1.Name JOIN      city AS C1 ON LOC.City = C1.Name JOIN      river AS R2 ON LOC.River = R2.Name AND (R1.Length < R2.Length OR R1.Length > R2.Length) WHERE      C1.Name = 'Belgrade';
SELECT c.Name  FROM country c  JOIN ethnicity e ON c.Code = e.Country  WHERE e.Percentage = 100 AND e.Name = 'Spanish';
SELECT Country  FROM politics  WHERE Dependent = 'British Crown';
SELECT River  FROM river  JOIN country ON river.Country = country.Code  WHERE country.Name = 'Canada';
SELECT Country  FROM economy  WHERE Inflation = (SELECT MAX(Inflation) FROM economy)
SELECT      p.Name AS ProvinceName,      SUM(pop.Population) AS TotalPopulation FROM      city c  JOIN      province p ON c.Province = p.Name JOIN      country co ON c.Country = co.Code WHERE      co.Name = 'United Kingdom' AND      c.Population = (SELECT MAX(p.Population) FROM city c JOIN province p ON c.Province = p.Name WHERE c.Country = 'United Kingdom' ORDER BY c.Population DESC LIMIT 1 OFFSET 3) GROUP BY      p.Name;
SELECT      (r.Percentage * c.Population) AS Jewish_Residents FROM      religion r JOIN      country c ON r.Country = c.Code WHERE      r.Name = 'Jewish' AND c.Name = 'Moldova';
SELECT AVG(country.Area)  FROM country  JOIN encompasses ON country.Code = encompasses.Country  JOIN continent ON encompasses.Continent = continent.Name  WHERE continent.Name = 'Asia';
SELECT T1.Name, T1.Longitude, T1.Latitude  FROM desert AS T1  JOIN geo_desert AS T2 ON T1.Name = T2.Desert  WHERE T1.Area = (SELECT MIN(Area) FROM desert);
SELECT COUNT(*)  FROM population  JOIN country ON population.Country = country.Code  JOIN language ON language.Country = country.Code  WHERE country.Name = 'Montenegro' AND language.Name = 'Serbian';
SELECT COUNT(*)  FROM mountain  WHERE Country IN (     SELECT Country      FROM country      ORDER BY Area DESC      LIMIT 1 );
SELECT T1.Name, T1.Depth, T2.Name  FROM sea AS T1  JOIN encompasses AS T2  ON T1.Name = T2.Sea  WHERE T1.Depth = (SELECT MIN(Depth) FROM sea)
SELECT Country  FROM country  JOIN politics ON country.Name = politics.Country  WHERE politics.Government = 'Communist'  ORDER BY economy.GDP ASC  LIMIT 1;
SELECT      p.Government  FROM      politics p  JOIN      economy e ON p.Country = e.Country  WHERE      e.Inflation = (SELECT MAX(Inflation) FROM economy);
SELECT Country  FROM politics  JOIN population ON politics.Country = population.Country  WHERE politics.Independence = '1960'  ORDER BY population.Infant_Mortality DESC  LIMIT 1;
SELECT MIN(b.Length), p.Government  FROM borders b JOIN country c1 ON b.Country1 = c1.Code JOIN country c2 ON b.Country2 = c2.Code JOIN politics p ON c1.Name = p.Country AND c2.Name = p.Country WHERE b.Length = (SELECT MIN(LENGTH) FROM borders)
SELECT c.Name  FROM country c  JOIN ethnicity e ON c.Code = e.Country  JOIN language l ON c.Code = l.Country  WHERE l.Name = 'Arabic' AND e.Percentage = 100  ORDER BY c.Population ASC  LIMIT 1;
SELECT p.Name  FROM province p  JOIN borders b ON p.Country = b.Country1  JOIN desert d ON d.Name = b.Desert  WHERE d.Area = (SELECT MAX(Area) FROM desert)
SELECT COUNT(*)  FROM lake  JOIN country ON lake.Country = country.Code  WHERE country.Name = (SELECT Name FROM country WHERE Continent = 'Africa' ORDER BY Population DESC LIMIT 4) AND country.Government = 'Republic'
SELECT      r.Name  FROM      religion r  JOIN      country c ON r.Country = c.Code  JOIN      continent cont ON c.Continent = cont.Name  WHERE      cont.Name = 'Asia'  ORDER BY      r.Percentage DESC  LIMIT 1;
SELECT      c1.Population - c2.Population  FROM      country c1  JOIN      mountain m1 ON c1.Code = m1.Country  JOIN      mountain m2 ON c2.Code = m2.Country  WHERE      m1.Height = (SELECT MAX(Height) FROM mountain)  AND      m2.Height = (SELECT MAX(Height) FROM mountain);
SELECT T1.Name  FROM sea AS T1  JOIN island_in AS T2 ON T1.Name = T2.Sea  WHERE T2.Island = (SELECT MAX(Area) FROM island)
SELECT T1.Name  FROM country AS T1  JOIN river AS T2 ON T1.Code = T2.Sea  WHERE T2.EstuaryLongitude BETWEEN -73.0 AND -29.0  GROUP BY T1.Name  ORDER BY MAX(T2.Length) DESC  LIMIT 3;
SELECT      p.Population  FROM      province AS p JOIN      country AS c ON p.Country = c.Code JOIN      politics AS pol ON c.Name = pol.Country WHERE      pol.Independence = '8/15/1947' AND      p.Name = (SELECT              MAX(capital.population)          FROM              province AS capital          JOIN              city AS cap ON capital.Name = cap.Province         WHERE              cap.Name = 'nation\'s capital city');
SELECT      c.Name AS 'Most populous Asian country',     COUNT(*) AS 'Total Number of Afro-Asian people' FROM      country c JOIN      encompasses e ON c.Code = e.Country AND e.Continent IN ('Africa', 'Asia') JOIN      ethnicGroup eg ON c.Code = eg.Country AND eg.Name = 'Afro-Asian' WHERE      c.Name = (         SELECT              MAX(Population) AS 'Population'         FROM              country         WHERE              c.Region = 'Asia'     )  AND      c.Government = 'Monarchy';
SELECT      c.Name AS CityName,      p.Name AS CapitalCityName FROM      city c JOIN      located l ON c.Name = l.City JOIN      river r ON r.Name = l.River WHERE      r.Name = 'Euphrat';
SELECT      c.Name,     COUNT(ug.Country) / COUNT(total_population.Country) AS English_Speaking_Proportion FROM      country c JOIN      encompasses e ON c.Code = e.Country AND e.Continent = 'North America' AND e.Percentage = 1 JOIN      ethnicGroup ug ON c.Code = ug.Country AND ug.Name = 'English' JOIN      population total_population ON c.Code = total_population.Country GROUP BY      c.Name;
SELECT      c.Name AS 'Federal Republic Country',     COUNT(p.Name) AS 'Number of Provinces',     SUM(e.Agriculture + e.Service + eIndustry) / 100.0 AS 'Proportion of GDP devoted to services',     (c.Population / c.Area) AS 'Population Density' FROM      country c JOIN      politics p ON c.Name = p.Country JOIN      economy e ON c.Name = e.Country WHERE      c.Province IS NOT NULL AND p.Government = 'Federal Republic' AND c.Continent = 'Europe' GROUP BY      c.Name ORDER BY      Number_of_Provinces DESC, Population DESC LIMIT 1;
SELECT      c1.Capital,     (p1.Population * 100 / t1.TotalPopulation) as Percentage FROM      country c1 JOIN      (SELECT          country, SUM(population) as TotalPopulation      FROM          country      WHERE          continent = 'Asia'      GROUP BY          country      ORDER BY          TotalPopulation DESC      LIMIT 1, 1) t1 ON c1.Name = t1.country JOIN      population p1 ON c1.Code = p1.Country WHERE      c1.Province IS NULL;
SELECT Name FROM desert ORDER BY Area DESC LIMIT 1 OFFSET 1;
SELECT T2.Name  FROM language AS T1  JOIN country AS T2 ON T1.Country = T2.Code  WHERE T2.Name = 'MNE'
SELECT      percentage  FROM      ethnicGroup  WHERE      country = 'Cayman Islands' AND      name = 'English';
SELECT `Country`  FROM river  WHERE `Name` = 'Pjandsh' AND `SourceCountry` IS NOT NULL;
SELECT c.Name  FROM country c  JOIN population p ON c.Code = p.Country  WHERE p.Population >= 1000000000  ORDER BY p.GDP  LIMIT 1;
SELECT `Capital`  FROM `country` JOIN `mountain` ON country.`Code` = mountain.`Country` WHERE `Name` = 'Licancabur';
SELECT s.Name  FROM sea AS s  JOIN locatedOn AS lo ON s.Name = lo.Sea  JOIN mountainOnIsland AS moi ON lo.Island = moi.Island  JOIN mountain AS m ON moi.Mountain = m.Name  WHERE m.Name = 'Kerinci Mountain'
SELECT T1.Name  FROM country AS T1  JOIN river AS T2 ON T1.Code = T2.Country  WHERE T2.Name = 'Amazonas'  LIMIT 3;
SELECT `Name`  FROM `country`  JOIN `politics` ON `country.Code` = `politics.Country`  WHERE `politics.Independence` = '1492-01-01';
SELECT COUNT(*)  FROM city  WHERE Country = 'France' AND Population > 100000;
SELECT Name FROM river  JOIN sea ON river.EstuaryLongitude = sea.Longitude AND river.EstuaryLatitude = sea.Latitude  WHERE sea.Depth = 540  ORDER BY Length DESC LIMIT 1;
SELECT Country  FROM mountain  WHERE Height = (SELECT MAX(Height) FROM mountain WHERE Type = 'volcanic')  LIMIT 1 OFFSET 1;
SELECT Longitude  FROM mountain  JOIN mountainOnIsland ON mountain.Name = mountainOnIsland.Mountain  JOIN island ON mountainOnIsland.Island = island.Name  WHERE mountain.Name = 'Mount Olympos';
SELECT C.Name  FROM country AS C  JOIN province AS P ON C.Code = P.Country  WHERE P.Area < 100 AND C.GDP = (SELECT MAX(GDP) FROM country WHERE Area < 100)
SELECT COUNT(*)  FROM city  WHERE Country = 'Japan';
SELECT `Name`  FROM `city` WHERE `Country` = 'Bangladesh' AND `Name` != (SELECT `Capital` FROM `country` WHERE `Code` = (SELECT `Code` FROM `country` WHERE `Name` = 'Bangladesh')) ORDER BY `Population` DESC LIMIT 1;
SELECT `Name`  FROM `city` WHERE `Name` != (SELECT `Name` FROM `province` WHERE `Capital` = 1) ORDER BY `Population` DESC LIMIT 1;
SELECT T2.Name  FROM city AS T1  JOIN province AS T2 ON T1.Province = T2.Name  WHERE T1.Name = 'Grozny';
SELECT religion.Name FROM religion JOIN country ON religion.Country = country.Code WHERE country.Name = 'Japan' AND religion.Percentage >= (SELECT MAX(Percentage) FROM religion WHERE Country = 'Japan')
SELECT Country1, Country2  FROM borders  WHERE Length = 803;
SELECT (europe_area / total_area) * 100 AS percentage_of_total_area_in_europe FROM (     SELECT SUM(area) AS total_area     FROM country     WHERE name = 'Russia' ) AS total_area, (     SELECT SUM(area) AS europe_area     FROM country c     JOIN encompasses e ON c.name = e.country AND e.continent = 'Europe'     WHERE c.name = 'Russia' ) AS europe_area;
SELECT c.Name  FROM country c  JOIN continentContinent cc ON c.Code = cc.Country  WHERE cc.Percentage > 0  GROUP BY c.Name  HAVING COUNT(DISTINCT cc.Continent) > 1;
SELECT COUNT(*)  FROM population  WHERE Country = (SELECT Country FROM city WHERE Name = 'Fareham')
SELECT (i.Infant_Mortality * c.Population * p.Population_Growth) as Infant_Mortality FROM infant_mortality i JOIN country c ON i.Country = c.Code JOIN population p ON c.Code = p.Country WHERE c.Name = 'Switzerland'
SELECT COUNT(*)  FROM mountain  WHERE Country = 'United States'
SELECT `Independence`  FROM `politics`  WHERE `Country` = 'Equatorial Guinea';
SELECT      c.Name AS Country,     (e.GDP / p.Population) AS GDP_Per_Capita FROM      country c JOIN      encompasses e ON c.Code = e.Country AND e.Continent = 'Europe' JOIN      population p ON c.Code = p.Country WHERE      c.Name = 'Switzerland';
SELECT economy.Service  FROM economy  JOIN city ON economy.Country = city.Country  WHERE city.Name = 'Fuenlabrada';
SELECT      MAX(river_length) - MIN(river_length) AS length_difference FROM      river WHERE      country = 'TJ' AND      LENGTH(geo_river.source_longitude) > 0 AND LENGTH(geo_river.source_latitude) > 0
SELECT      c.Population / p.Area AS PopulationDensity FROM      country AS c JOIN      province AS p ON c.Name = p.Country AND p.Name = 'Hanoi'
SELECT      c.Name AS Country,     eg1.Name AS EthnicGroup FROM      country c JOIN      ethnicGroup eg ON c.Code = eg.Country WHERE      c.Name IN (         SELECT              e.Country         FROM              ethnicGroup e         GROUP BY              e.Country         HAVING              COUNT(e.Name) > 1     ) JOIN      ethnicGroup eg1 ON c.Code = eg1.Country WHERE      eg1.Percentage = (         SELECT              MAX(Percentage)         FROM              ethnicGroup eg2         WHERE              eg2.Country = c.Code     );
SELECT Desert  FROM desert  WHERE NOT EXISTS (     SELECT * FROM (         SELECT DISTINCT Country FROM borders     ) AS countries_in_desert     WHERE desert.Country = countries_in_desert.Country );
SELECT COUNT(*) AS num_rivers, province  FROM river  WHERE EXISTS (   SELECT * FROM borders    WHERE borders.Country1 = river.Country OR borders.Country2 = river.Country ) GROUP BY province;
SELECT      b.Country1 AS Bordering_Country,     b.Length,     c.Name AS Shared_Country,     b.Length / c.Area * 100 AS Percentage_Shared FROM      borders b JOIN      country c ON b.Country1 = c.Code WHERE      c.Name = 'Angola' AND      (b.Country2 IN (SELECT Name FROM country WHERE Code != 'AGO'));
SELECT      (COUNT(CASE          WHEN i.Type = 'Tropical' AND l.Area <= 300          THEN i.Name     END) / COUNT(CASE          WHEN m.Name = 'Lesser Antilles' AND i.Type = 'Tropical'         THEN i.Name     END)) * 100 AS Percent FROM      island i JOIN      location_on lo ON i.Name = lo.Island JOIN      located_in li ON lo.Province = li.Province AND li.Country = i.Country JOIN      country c ON li.Country = c.Code JOIN      continent co ON c.Continent = co.Name JOIN      encompasses ec ON c.Code = ec.Country AND co.Name = 'Caribbean' JOIN      island_type it ON i.Type = it.Name WHERE      it.Name = 'Tropical';
SELECT      (COUNT(CASE WHEN Percentage = 100 THEN Country END) * 100.0 / COUNT(DISTINCT Country)) AS Percentage FROM      ethnicity JOIN      country ON ethnicity.Country = country.Code JOIN      language ON country.Code = language.Country WHERE      language.Name = 'English';
SELECT      c.Name  FROM      country c  JOIN      politics p ON c.Code = p.Country  WHERE      p.Population > (SELECT MIN(Population) FROM country WHERE Population < (SELECT MAX(Population) FROM country)) * 0.0005 ORDER BY      c.Population DESC  LIMIT 1
SELECT AVG(rivers.Length)  FROM river AS rivers  JOIN located AS locations ON rivers.Name = locations.River  WHERE locations.Lake = 'Donau River'
SELECT      (COUNT(CASE WHEN religion.Name != 'Christian' THEN 1 END) /       CAST(COUNT(*) AS REAL)) * 100 FROM      mondial_geo.country,     mondial_geo.religion WHERE      country.Code = religion.Country
SELECT      c.Name AS Country,     ci.City AS City FROM      city c JOIN      isMember im ON c.Country = im.Country JOIN      organization o ON im.Organization = o.Abbreviation WHERE      c.Population BETWEEN 50000 AND 300000 AND      im.Type = 'EBRD' AND      o.Established BETWEEN '03/01/1991' AND '04/30/1991';
SELECT R.Name  FROM river R  JOIN borders B ON R.Country = B.Country1 AND B.Country2 = 'Hungary'  WHERE R.EstuaryLongitude = (SELECT SourceLongitude FROM river WHERE Name = 'Donau River')  AND R.Length > 500  AND R.Country = 'Slovenia';
SELECT T1.Name  FROM city AS T1  JOIN sea AS T2 ON T1.Province = T2.Name  WHERE T2.Depth = (SELECT MAX(Depth) FROM sea WHERE Name = 'Bay of Bengal') - 4232;
SELECT T3.Name  FROM located AS T1  JOIN city AS T2 ON T1.City = T2.Name  JOIN lake AS T3 ON T3.Province = T2.Province AND T3.Longitude = -85.35 AND T3.Latitude = 11.6;
SELECT      c.Name AS 'Continent' FROM      country AS co JOIN      encompasses AS e ON co.Code = e.Country JOIN      continent AS c ON c.Name = e.Continent WHERE      (SELECT MAX(Inflation) FROM economy WHERE Country = co.Name) > 0.5;
SELECT Country1, Country2  FROM borders  WHERE Length = 1782 AND (Country1 LIKE '%Asia%' AND Country2 LIKE '%Asia%')
SELECT `Name`  FROM `lake` WHERE `Country` = 'Bolivia' ORDER BY `Depth` DESC LIMIT 1;
SELECT T1.Name  FROM river AS T1  JOIN located AS T2 ON T1.Name = T2.River  WHERE T1.SourceLongitude IS NOT NULL AND T1.EstuaryLongitude IS NOT NULL AND T1.Name = 'Manicouagan River'
SELECT `Island`  FROM `mountainOnIsland`  JOIN `mountain` ON `mountainOnIsland.Mountain` = `mountain.Name`  JOIN `island` ON `mountainOnIsland.Island` = `island.Name`  WHERE `mountain.Name` = 'Rinjani';
SELECT s1.Name  FROM sea AS s1  JOIN mergesWith AS m ON s1.Name = m.Sea1  JOIN sea AS s2 ON s2.Name = m.Sea2 WHERE s1.Name = 'deepest sea';
SELECT c.Name FROM country c JOIN borders b ON c.Code = b.Country1 JOIN encompasses e ON c.Code = e.Country AND e.Percentage > 0 JOIN continent ct1 ON e.Continent = ct1.Name JOIN continent ct2 ON b.Country2 IN (SELECT Code FROM country WHERE Capital IS NOT NULL) WHERE ct1.Name <> ct2.Name GROUP BY c.Name HAVING AVG(p.Population / p.Area) < 10
SELECT      c.Name  FROM      country c  JOIN      religion r ON c.Code = r.Country  WHERE      r.Name = 'Hinduism'  ORDER BY      (c.Population / c.Area) ASC  LIMIT 1;
SELECT independence_date  FROM politics  WHERE country = 'Saint Kitts and Nevis'
SELECT AVG(country.Population / province.Area) AS avg_population_ratio FROM country JOIN isMember ON country.Code = isMember.Country JOIN organization ON isMember.Organization = organization.Abbreviation WHERE organization.Established = 1947;
SELECT `Capital`  FROM `country` WHERE `Name` = 'Anguilla';
SELECT Country, Capital FROM country ORDER BY Population LIMIT 1;
SELECT      (SELECT Area FROM continent WHERE Name = 'Asia') - (SELECT Area FROM continent WHERE Name = 'Europe') AS SpaceDifference;
SELECT Longitude, Latitude  FROM city  WHERE Name = 'Aarhus';
SELECT      (SELECT Population FROM country WHERE Name = 'United Kingdom') -      (SELECT Population FROM country WHERE Name = 'Italy') AS PopulationGap;
SELECT T2.Name AS City, T2.Province FROM organization AS T1 INNER JOIN province AS T2 ON T1.Country = T2.Country AND T1.Province = T2.Name WHERE T1.Abbreviation = 'EBRD';
SELECT `Name`  FROM `lake`  WHERE `Area` * `Depth` = (SELECT MAX(`Area` * `Depth`) FROM `lake`);
SELECT Country1, Country2  FROM borders  WHERE Length = (SELECT MAX(Length) FROM borders)
SELECT `Name`  FROM country  JOIN economy ON country.Code = economy.Country  WHERE economy.GDP = (SELECT MAX(GDP) FROM economy);
SELECT Country  FROM language  WHERE Name LIKE '%African%'  ORDER BY Percentage ASC  LIMIT 1;
SELECT Country  FROM religion  WHERE (Name = 'Anglicanism OR Name = 'Christianity OR Name = 'Roman Catholicism')  AND Percentage = 100  AND Name = 'English';
SELECT Country, Inflation  FROM economy  ORDER BY Inflation DESC  LIMIT 3;
SELECT c.Name  FROM country c  JOIN language l ON c.Code = l.Country  WHERE l.Name = 'English' AND l.Percentage = 100
SELECT COUNT(*)  FROM organization  WHERE year > 1960 AND country NOT IN (SELECT name FROM politics WHERE independence = 'Yes');
SELECT T3.Province, T1.Length  FROM river AS T1  JOIN geo_river AS T2 ON T1.Name = T2.River  JOIN province AS T3 ON T3.Country = T2.Country AND T3.Name = T2.Province  WHERE T1.River = 'Klaeaelv'
SELECT COUNT(*) AS num_of_regions, s_depth AS depth_of_mediterranean FROM province  JOIN country ON province.Country = country.Code JOIN borders ON borders.Country1 = country.Name OR borders.Country2 = country.Name JOIN sea ON sea.Name = borders.Sea WHERE country.Name = 'Italy' AND sea.Name = 'Mediterranean'
SELECT Country  FROM target  WHERE Abbreviation = 'BOT';
SELECT      c.Name AS Economy,     e.GDP,     e.Agriculture FROM      country c JOIN      economy e ON c.Code = e.Country ORDER BY      e.Agriculture / e.GDP ASC LIMIT 3;
SELECT continent.Area, COUNT(DISTINCT country.Name) AS Number_of_nations  FROM continent  JOIN country ON continent.Name = country.Continent;
SELECT      p.Name AS 'Province' FROM      province AS p JOIN      organization AS o ON p.Code = o.Province WHERE      p.Country = 'United States' GROUP BY      p.Name ORDER BY      COUNT(o.Abbreviation) DESC LIMIT 1;
SELECT      c.Name  FROM      country c  JOIN      politics p ON c.Code = p.Country  WHERE      p.Independence IS NOT NULL  AND      pDEPENDENT = 'N'  ORDER BY      p.Independence DESC  LIMIT 3;
SELECT Country  FROM politics  WHERE Government = 'republic' AND Year >= 1991  LIMIT 3;
SELECT o.Name  FROM organization AS o  JOIN isMember AS im ON o.Abbreviation = im.Organization  WHERE im.Type = 'associated';
SELECT DISTINCT country.Name  FROM borders  JOIN country ON borders.Country1 = country.Code OR borders.Country2 = country.Code  WHERE borders.Desert = 'Kalahari Desert';
SELECT Desert  FROM desert  JOIN geo_desert ON desert.Name = geo_desert.Desert  WHERE geo_desert.Country = 'Kazakhstan'  ORDER BY Area DESC LIMIT 1;
SELECT      s.Name AS 'Baltic Sea Name',     m.Name AS 'Converging Sea Name',     s.Depth AS 'Depth of Baltic Sea' FROM      sea AS s JOIN      mergesWith AS mw ON s.Name = mw.Sea1 JOIN      sea AS m ON mw.Sea2 = m.Name;
SELECT      c.Name FROM      country c JOIN      politics p ON c.Code = p.Country JOIN      isMember im ON c.Code = im.Country WHERE      c.Government = 'Constitutional Monarchy' AND      p.Established > 1907;
SELECT mt.Type, prov.Name, co.Name  FROM mountain mt JOIN province prov ON mt.Province = prov.Name JOIN country co ON prov.Country = co.Code WHERE mt.Name = 'Ampato';
SELECT m.Name  FROM mountain m  JOIN province p ON m.Province = p.Name  WHERE p.Name = 'Ecuador' AND m.Type = 'Volcano';
SELECT      c.Name,     CASE          WHEN p.Type = 'Parliamentary' AND d.Independence > 1993 THEN 'Yes'         ELSE 'No'     END AS Achieved_Independence_Post_1993,     p.Type AS Democracy_Type FROM      country c JOIN      politics p ON c.Name = p.Country WHERE      p.Type IN ('Parliamentary', 'Presidential')     AND p.Independence > 1993 LIMIT 3;
SELECT      COUNT(*) FILTER (WHERE river.length > 3000) AS count_of_rivers_longer_than_3000_miles,     (SELECT Name FROM river WHERE Country = 'Russia' AND length > 3000) AS name_of_russian_river_longer_than_3000_miles FROM     river
SELECT `Name`, `Established`  FROM `organization`  WHERE `Abbreviation` = 'ABEDA';
SELECT Abbreviation, Name  FROM organization  WHERE Established BETWEEN 1970 AND 1980;
SELECT Abbreviation, Name  FROM organization  WHERE City = 'London';
SELECT o.Name, c.City  FROM organization o  JOIN location l ON o.Country = l.Country  JOIN city c ON c.Name = l.City  WHERE l.Country = 'USA';
SELECT      o.Abbreviation,      o.Name AS "Full Name",      o.Established  FROM      organization o  WHERE      o.City = 'Paris'  ORDER BY      o.Established  LIMIT 1;
SELECT o.Name, h.City  FROM organization o  JOIN location l ON o.LocationID = l.LocationID  JOIN city c ON l.CityID = c.CityID  WHERE o.Name LIKE '%United Nations%'  AND c.Name = 'Headquarters';
SELECT Country1, Country2  FROM borders  WHERE Length = (SELECT MAX(Length) FROM borders) LIMIT 1;
SELECT Country1, Country2  FROM borders  WHERE Country1 = 'Bulgaria' OR Country2 = 'Bulgaria';
SELECT `Country1`, `Country2` FROM borders WHERE `Length` > 4000;
SELECT Country  FROM isMember  WHERE Organization = 'IOC'  ORDER BY Population DESC  LIMIT 1;
SELECT isMember.Country, isMember.Type  FROM isMember  JOIN organization ON isMember.Organization = organization.Abbreviation  WHERE organization.Name = 'Islamic Development Bank';
SELECT c.Area, p.Population  FROM country c  JOIN province p ON c.Code = p.Country  JOIN organization o ON o.Name = 'Asia Pacific Economic Cooperation'  JOIN located l ON l.Country = o.Province AND l.City = o.City  WHERE o.Abbreviation = 'APECO';
SELECT T3.Name  FROM `target` AS T1  JOIN `isMember` AS T2 ON T1.Country = T2.Country  JOIN `organization` AS T3 ON T3.Code = T2.Organization  WHERE T2.Type = 'National Society'
SELECT Country FROM isMember GROUP BY Country ORDER BY COUNT(Organization) LIMIT 1;
SELECT c.Name, p.Capital  FROM country c JOIN isMember im ON c.Code = im.Country JOIN organization o ON o.Code = im.Organization AND o.Name = 'IFAD' WHERE o.Abbreviation = 'Category III';
SELECT O.Name FROM organization O JOIN isMember IM ON O.Abbreviation = IM.Country GROUP BY O.Name ORDER BY COUNT(IM.Type) DESC LIMIT 1;
SELECT      c.Name AS 'Capital',     o.Name AS 'Organization' FROM      country c JOIN      ismember im ON c.Code = im.Country JOIN      organization o ON o.Code = im.Organization WHERE      c.Name = 'Australia';
SELECT      (COUNT(*) FILTER (WHERE organization.City = 'Washington')::FLOAT / COUNT(*)) * 100 AS Percentage FROM      organization WHERE      organization.Country = 'USA';
SELECT Length  FROM borders  WHERE Country1 = 'USA' AND Country2 = 'MEX'  UNION  SELECT Length  FROM borders  WHERE Country1 = 'MEX' AND Country2 = 'USA';
SELECT o.Name  FROM organization AS o  JOIN isMember AS im ON o.Abbreviation = im.Organization  WHERE im.Country = 'Singapore' AND o.Established = (SELECT MAX(Established) FROM organization);
SELECT p.Population  FROM city c  JOIN province p ON c.Province = p.Name  JOIN organization o ON c.Country = o.Country AND o.Name = 'World Tourism Organization'
SELECT Height  FROM mountain  WHERE Name = 'Dhaulagiri';
SELECT M.Name, M.Height  FROM mountain AS M  JOIN province AS P ON M.Province = P.Name  WHERE P.Name = 'Alaska'
SELECT p.Population  FROM population p  WHERE p.Population_Growth = (SELECT MAX(Population_Growth) FROM population)
SELECT `Inflation`  FROM `economy`  WHERE `Country` = 'Greece';
SELECT p.Government  FROM politics p  JOIN country c ON p.Country = c.Code  WHERE c.GDP_Agriculture = (SELECT MAX(GDP_Agriculture) FROM country)
SELECT      c.Name AS 'Full Name',     p.Capital AS 'Capital' FROM      country c JOIN      politics p ON c.Code = p.Country WHERE      p.Government = 'Parliamentary democracy';
SELECT c.Name, p.Population  FROM country c  JOIN ethnicity e ON c.Code = e.Country  JOIN ethnicGroup eg ON c.Name = eg.Country  WHERE eg.Percentage > '70' AND e.Name = 'Chinese';
SELECT      c.Name AS CityName,      p.Population AS CityPopulation,     (p.Population / ct.Population) * 100 AS PopulationPercentage FROM city c JOIN country ct ON c.Country = ct.Code JOIN population p ON c.Country = p.Country WHERE p.Population = (SELECT MAX(Population) FROM population)
SELECT Independence  FROM `politics`  WHERE `Country` = 'United States of America';
SELECT      m.Name,     m.Height FROM      mountain AS m JOIN      mountainType AS mt ON m.Type = mt.Code WHERE      mt.Name = 'volcanic' ORDER BY      m.Height DESC LIMIT 1;
SELECT Abbreviation  FROM organization  WHERE Country = 'Saudi Arabia'  ORDER BY Established DESC  LIMIT 1;
SELECT Country  FROM population  WHERE Infant_Mortality = (SELECT MAX(Infant_Mortality)                           FROM population                           ORDER BY Infant_Mortality ASC                           LIMIT 4)
SELECT Country  FROM religion  GROUP BY Country  ORDER BY AVG(Percentage) DESC  LIMIT 1;
SELECT `River`, `Length`  FROM river  ORDER BY `Length` DESC  LIMIT 17;
SELECT `Independence`  FROM `politics`  WHERE `Capital` = 'Nouakchott';
SELECT      c.Name AS Country_Name,      e.GDP AS GDP FROM      country c JOIN      economy e ON c.Code = e.Country WHERE      c.Population = (SELECT MIN(Population) FROM country);
SELECT l.Name, l.Depth  FROM lake AS l  JOIN located AS lo ON l.Name = lo.Lake  JOIN country AS c ON l.Country = c.Code  WHERE c.Name = 'Zaire'  AND l.Type = 'deepest';
SELECT      m.Name AS MountainName,      m.Type AS MountainType  FROM      mountain m  JOIN      island_in i ON m.Name = i.Mountain  JOIN      island IS ON i.Island = IS.Name  WHERE      IS.Name = 'Madagaskar'  ORDER BY      m.Height ASC  LIMIT 1;
SELECT Country  FROM country  JOIN population ON country.Code = population.Country  WHERE population.Population_Growth BETWEEN 60000000 AND 99000000  ORDER BY population.Population DESC  LIMIT 1;
SELECT      c.Name  FROM      country AS c  JOIN      economy AS e ON c.Code = e.Country  WHERE      c.Continent = 'Asia' AND e.Agriculture = (SELECT MAX(Agriculture) FROM economy);
SELECT      p.Government  FROM      politics p  WHERE      p.Country = (SELECT                     c.Name               FROM                     country c               ORDER BY                     e.GDP ASC               LIMIT 1);
SELECT `Year` FROM (   SELECT `Year`, COUNT(*) AS count   FROM `organizations`   WHERE `Country` IN (     SELECT `Abbreviation`     FROM `countries`     WHERE `Continent` = 'Europe'   )   GROUP BY `Year` ) AS subquery ORDER BY `count` DESC LIMIT 1;
SELECT      b.Country1 AS BorderingCountry1,     b.Country2 AS BorderingCountry2,     b.Length  FROM      borders b  WHERE      b.Country1 = (SELECT Name FROM country WHERE Population = (SELECT MAX(Population) FROM country)) OR      b.Country2 = (SELECT Name FROM country WHERE Population = (SELECT MAX(Population) FROM country));
SELECT      c.Population / p.Area AS PopulationDensity,     e.Industry AS GDPIndustryPortion FROM      country c JOIN      province p ON c.Name = p.Country  JOIN      politics po ON c.Name = po.Country JOIN      economy e ON c.Name = e.Country WHERE      p.Name = 'Distrito Federal';
SELECT politics.Government  FROM politics  WHERE politics.Government = 'Parliamentary democracy' AND        politics.Independence BETWEEN '1950-01-01' AND '1999-12-31';
SELECT      (COUNT(CASE WHEN politics.Independence = 1960 THEN 1 END) / COUNT(*)::decimal) * 100 AS percentage_countries_independent_1960 FROM      politics;
SELECT * FROM desert  WHERE Latitude NOT BETWEEN 30 AND 40;
SELECT D1.Longitude, D1.Latitude  FROM desert D1 JOIN borders B1 ON D1.Name = B1.Desert JOIN country C1 ON B1.Country1 = C1.Code JOIN country C2 ON B1.Country2 = C2.Code WHERE C1.Code != C2.Code;
SELECT      p.Name AS Provincial_Capital FROM      province p JOIN      country c ON p.Country = c.Code WHERE      p.Population < 80000 AND p.Population / p.Area = (SELECT MAX(Population / Area) FROM province WHERE Population < 80000)
SELECT COUNT(*)  FROM Customers  WHERE MARITAL_STATUS = 'Never-married';
SELECT COUNT(*)  FROM Customers  WHERE age BETWEEN 13 AND 19;
SELECT OCCUPATION  FROM Customers  WHERE EDUCATIONNUM = 11;
SELECT COUNT(*)  FROM (SELECT * FROM mailings3 WHERE RESPONSE = 'true' AND REFID IN (SELECT ID FROM Customers LIMIT 60000)) AS true_responses;
SELECT COUNT(*)  FROM Customers  WHERE age > 30 AND OCCUPATION = 'Machine-op-inspct';
SELECT COUNT(*)  FROM Customers  WHERE EDUCATIONNUM > 11 AND SEX = 'Female';
SELECT COUNT(*)  FROM (Customers        JOIN mailings3 ON Customers.ID = mailings3.REFID)  WHERE mailings3.RESPONSE = 'true' AND Customers.SEX = 'Female'  LIMIT 60000;
SELECT Customers.OCCUPATION  FROM Customers  JOIN Mailings3 ON Customers.GEOID = Mailings3.REFID  WHERE Customers.age > 40 AND Mailings3.RESPONSE = 'true';
SELECT COUNT(*)  FROM Customers  WHERE SEX = 'Male' AND GEOID IN (SELECT GEOID FROM Demog WHERE INHABITANTS_K > 30);
SELECT COUNT(*)  FROM Customers  WHERE GEOID = (SELECT GEOID FROM Demog WHERE INCOME_K = (SELECT MAX(INCOME_K) FROM Demog));
SELECT COUNT(*)  FROM Customers  JOIN Demog ON Customers.GEOID = Demog.GEOID  WHERE Demog.INHABITANTS_K BETWEEN 20 AND 30 AND Customers.OCCTUATION = 'Machine-op-inspct';
SELECT      c.ID,      d.INHABITANTS_K FROM      Customers c JOIN      Demog d ON c.GEOID = d.GEOID WHERE      c.ID IN (0, 1) ORDER BY      d.INHABITANTS_K DESC LIMIT 1;
SELECT COUNT(*)  FROM Demog d  JOIN mailings3 m ON d.GEOID = m.REFID  WHERE m.RESPONSE = 'true' AND d.INHABITANTS_K > 30 AND ROW_NUMBER() OVER (ORDER BY m.REFID) <= 60000;
SELECT COUNT(*)  FROM (Customers        JOIN mailings3 ON Customers.ID = mailings3.REFID)  WHERE mailings3.RESPONSE = 'true' AND Customers.SEX = 'Male' AND Customers.MARITAL_STATUS = 'Divorced'  LIMIT 60000;
SELECT COUNT(*)  FROM Customers  WHERE GEOID = (SELECT GEOID FROM Demog WHERE INCOME_K = MAX(INCOME_K))  AND Customers.ID <= 60000  AND RESPONSE = 'true';
SELECT      Demog.INHABITANTS_K  FROM     Customers  JOIN     Demog ON Customers.GEOID = Demog.GEOID  WHERE     Customers.ID IN (         SELECT              Customers.ID          FROM              Customers          GROUP BY              Customers.GEOID          ORDER BY              COUNT(Customers.ID) DESC          LIMIT 1     );
SELECT COUNT(*)  FROM Demog d  JOIN Customers c ON d.GEOID = c.GEOID  WHERE d.INHABITANTS_K = 25.746 AND c.SEX = 'Male';
SELECT COUNT(*)  FROM Customers  JOIN mailings3 ON Customers.ID = mailings3.REFID  WHERE mailings3.RESPONSE = 'true' AND Customers.age BETWEEN 13 AND 19  LIMIT 60000;
SELECT      MAX(INCOME_K) as max_income,     avg(EDUCATIONNUM) as avg_education_level  FROM      Demog;
SELECT      AVG(Customers.age)  FROM      Customers  JOIN      mailings3 ON Customers.GEOID = mailings3.REFID  WHERE      mailings3.RESPONSE = 'true'  LIMIT      60000;
SELECT COUNT(*)  FROM Customers  WHERE SEX = 'Male';
SELECT Customers.GEOID FROM Customers WHERE Customers.OCCUPATION = 'Handlers-cleaners';
SELECT COUNT(*)  FROM Customers  WHERE age < 30;
SELECT GEOID FROM Demog WHERE INCOME_K BETWEEN 2100 AND 2500;
SELECT COUNT(*)  FROM Demog  WHERE GEOID BETWEEN 20 AND 50  AND INHABITANTS_K < 20;
SELECT INHABITANTS_K, INCOME_K  FROM Demog  WHERE GEOID = 239;
SELECT `EDUCATIONNUM`, `OCCUPATION` FROM `Customers` WHERE `age` BETWEEN 20 AND 35 AND `INCOME_K` < 2000;
SELECT COUNT(*)  FROM Customers  WHERE MARITAL_STATUS = 'Divorced' AND age < 50;
SELECT Demog.GEOID, Demog.INCOME_K  FROM Customers INNER JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.age = (SELECT MAX(age) FROM Customers);
SELECT Customers.INCOME_K FROM Customers WHERE Customers.SEX = 'Male' AND Customers.EDUCATIONNUM <= 4;
SELECT OCCUPATION, INCOME_K  FROM Customers  WHERE SEX = 'Male' AND EDUCATIONNUM BETWEEN 4 AND 6;
SELECT COUNT(*)  FROM Customers  WHERE SEX = 'Male' AND age BETWEEN 40 AND 60 AND MARITAL_STATUS = 'Widowed' AND INCOME_K BETWEEN 2000 AND 3000;
SELECT Customers.OCCUPATION  FROM Customers  JOIN Demog ON Customers.GEOID = Demog.GEOID  WHERE Demog.INHABITANTS_K BETWEEN 30 AND 40;
SELECT Demog.INCOME_K  FROM Customers  JOIN Demog ON Customers.GEOID = Demog.GEOID  WHERE Customers.SEX = 'Female'  AND Customers.MARITAL_STATUS = 'Widowed'  AND Customers.EDUCATIONNUM <= 5;
SELECT Customers.MARITAL_STATUS  FROM Customers  WHERE Customers.age BETWEEN 40 AND 60  AND Customers.GEOID IN (     SELECT Demog.GEOID      FROM Demog      WHERE Demog.INCOME_K = (SELECT MAX(INCOME_K) FROM Demog) );
SELECT COUNT(Demog.INHABITANTS_K) FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.SEX = 'Male'  AND Customers.age BETWEEN 20 AND 30  AND Customers.OCCUPATION IN ('Farming', 'Fishing');
SELECT Customers.GEOID, Demog.INHABITANTS_K, Customers.age FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.MARITAL_STATUS = 'Married-civ-spouse' AND Customers.OCCUPATION = 'Machine-op-inspct';
SELECT COUNT(*)  FROM Customers  JOIN Demog ON Customers.GEOID = Demog.GEOID  WHERE Customers.SEX = 'Female'  AND Customers.age BETWEEN 50 AND 60  AND Demog.INHABITANTS_K BETWEEN 19 AND 24;
SELECT `INCOME_K`, `INHABITANTS_K`  FROM `Customers`  WHERE `age` > (SELECT AVG(`age`) * 0.8 FROM `Customers`);
SELECT      (COUNT(CASE WHEN INCOME_K >= 2500 THEN 1 END)      OVER () / COUNT(CASE WHEN MARITAL_STATUS = 'Never-married' THEN 1 END) OVER ()) * 100 AS percentage FROM      Customers WHERE      MARITAL_STATUS = 'Never-married';
SELECT Customers.ID, Customers.GEOID  FROM Customers  WHERE Customers.age > 65 AND Customers.EDUCATIONNUM < 3;
SELECT GEOID FROM Demog WHERE INCOME_K > (SELECT AVG(INCOME_K) FROM Demog);
SELECT COUNT(*)  FROM Customers  WHERE GEOID IN (     SELECT DISTINCT REFID      FROM mailings3      WHERE RESPONSE = 'false' AND REF_DATE BETWEEN '2007-02-01 12:00:00.0' AND '2007-02-28 12:00:00.0' )
SELECT COUNT(*)  FROM Customers  WHERE age BETWEEN 13 AND 19 AND OCCUPATION = 'Machine-op-inspct';
SELECT COUNT(*)  FROM Customers  JOIN Demog ON Customers.GEOID = Demog.GEOID  WHERE Customers.OCCUPATION = 'Other-service' AND Demog.INHABITANTS_K > 20;
SELECT COUNT(*)  FROM Customers  WHERE SEX = 'Male' AND age BETWEEN 20 AND 29 AND GEOID IN (     SELECT GEOID      FROM Demog      WHERE INCOME_K > 3000 )
SELECT      (COUNT(CASE WHEN age > 65 AND MARITAL_STATUS = 'never married' AND GEOID = 24 THEN 1 END)      * 1.0 / COUNT(CASE WHEN GEOID = 24 THEN 1 END)) * 100 AS Percentage FROM      Customers;
SELECT      (COUNT(CASE WHEN c.age BETWEEN 80 AND 89 AND d.INCOME_K > 3000 THEN 1 END)      * 1.0 / COUNT(CASE WHEN d.INCOME_K > 3000 THEN 1 END)) * 100 AS percentage FROM      Customers c JOIN      Demog d ON c.GEOID = d.GEOID
SELECT COUNT(*)  FROM mailings3  WHERE RESPONSE = 'TRUE';
SELECT Customers.ID, Customers.REFID  FROM Customers  JOIN mailings3 ON Customers.REFID = mailings3.REFID  WHERE mailings3.RESPONSE = 'true';
SELECT COUNT(*)  FROM Customers  WHERE MARITAL_STATUS = 'Widowed' AND age < 50;
SELECT GEOID FROM Demog WHERE INHABITANTS_K < 30;
SELECT COUNT(*)  FROM Demog  WHERE GEOID BETWEEN 10 AND 30 AND INCOME_K < 2000;
SELECT MARITAL_STATUS  FROM Customers  WHERE age = 62 AND EDUCATIONNUM = 7;
SELECT COUNT(*)  FROM Demog d  JOIN Customers c ON d.GEOID = c.GEOID  WHERE c.MARITAL_STATUS = 'widowed' AND d.INHABITANTS_K IS NOT NULL AND c.RESPONSE = 'false';
SELECT      T2.RESPONSE,      T1.INHABITANTS_K  FROM      Customers AS T1  JOIN      Demog AS T3 ON T1.GEOID = T3.GEOID  JOIN      (SELECT ID, MAX(age) as max_age FROM Customers WHERE SEX = 'Female' GROUP BY GEOID) AS T4 ON T1.ID = T4.ID  JOIN      Sales AS T5 ON T1.ID = T5.REFID  JOIN      mailings3 AS T2 ON T5.REFID = T2.REFID AND T5.EVENT_DATE = T2.REF_DATE  WHERE      T4.max_age = T1.age;
SELECT Customers.ID, Demog.INCOME_K FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.SEX = 'Female' AND Customers.EDUCATIONNUM <= 3;
SELECT Customers.EDUCATIONNUM, Demog.INCOME_K FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.age BETWEEN 30 AND 55 AND Customers.RESPONSE = 'true';
SELECT COUNT(*)  FROM Customers  WHERE SEX = 'Male' AND age BETWEEN 30 AND 50 AND INCOME_K BETWEEN 2000 AND 3000;
SELECT Customers.EDUCATIONNUM, mailings3.RESPONSE  FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID JOIN mailings3 ON Customers.ID = mailings3.REFID WHERE Customers.age BETWEEN 20 AND 30 GROUP BY Customers.ID ORDER BY Demog.INHABITANTS_K DESC LIMIT 1;
SELECT Demog.INCOME_K  FROM Customers  JOIN Demog ON Customers.GEOID = Demog.GEOID  WHERE Customers.SEX = 'Female' AND Customers.age BETWEEN 30 AND 55 AND Customers.OCCUPATION = 'machine-op-inspct';
SELECT Customers.MARITAL_STATUS, mailings3.RESPONSE FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID JOIN mailings3 ON Customers.ID = mailings3.REFID WHERE Customers.SEX = 'Female' AND Customers.EDUCATIONNUM >= 8;
SELECT Customers.age FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.SEX = 'Female' AND Demog.INHABITANTS_K < 30;
SELECT Customers.INCOME, mailings3.RESPONSE  FROM Customers  JOIN Demog ON Customers.GEOID = Demog.GEOID  JOIN mailings3 ON Customers.ID = mailings3.REFID  WHERE Customers.SEX = 'Male' AND Customers.MARITAL_STATUS = 'Divorced' AND Customers.EDUCATIONNUM >= 6;
SELECT Customers.OCCUPATION, mailings3.RESPONSE FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID JOIN mailings3 ON Customers.ID = mailings3.REFID WHERE Customers.SEX = 'Female' AND Demog.INHABITANTS_K BETWEEN 20 AND 25;
SELECT      (COUNT(CASE WHEN OCCUPATION = 'Handlers-cleaners' AND SEX = 'Male' AND RESPONSE = 'true' THEN 1 END)      / COUNT(CASE WHEN OCCUPATION = 'Handlers-cleaners' AND SEX = 'Male' THEN 1 END)) * 100 AS percentage FROM      Customers WHERE      OCCUPATION IN ('Handlers', 'Cleaners');
SELECT Demog.INCOME_K, Demog.INHABITANTS_K FROM Demog JOIN Customers ON Demog.GEOID = Customers.GEOID WHERE Customers.REFID >     (SELECT DIVIDE(MULTIPLY(0.5, COUNT(mailings3.RESPONSE = 'false')), COUNT(mailings3.RESPONSE))     FROM mailings3);
SELECT      (COUNT(CASE WHEN SEX = 'Male' AND age BETWEEN 13 AND 19 AND EDUCATIONNUM > 10 THEN 1 END) * 1.0 /      COUNT(CASE WHEN SEX = 'Female' AND age BETWEEN 13 AND 19 AND EDUCATIONNUM > 10 THEN 1 END) AS Ratio FROM Customers;
SELECT GEOID,         (12 * INHABITANTS_K * INCOME_K) AS TotalIncomePerYear FROM Demog WHERE INCOME_K > 3300;
SELECT      CASE          WHEN COUNT(CASE WHEN m3.RESPONSE = 'true' THEN m3.REFID END) > COUNT(CASE WHEN m3.RESPONSE = 'false' THEN m3.REFID END)          THEN 'More Responding'         ELSE 'More Not Responding'     END AS ResponseStatus FROM mailings3 m3
SELECT      d.GEOID,     (d.INHABITANTS_K * d.INCOME_K * 12) AS Yearly_Income FROM      Customers c JOIN      Demog d ON c.GEOID = d.GEOID WHERE      c.SEX = 'Female' AND c.OCCUPATION = 'Sales';
SELECT Customers.EDUCATIONNUM, Customers._OCCUPATION, Customers.age  FROM Customers  JOIN Demog ON Customers.GEOID = Demog.GEOID  WHERE Demog.INHABITANTS_K = 33.658 AND Customers.SEX = 'Female' AND Customers.MARITAL_STATUS = 'Widowed';
SELECT RESPONSE FROM Customers WHERE GEOID = 134;
SELECT      Demog.GEOID,     (Demog.INHABITANTS_K * Demog.INCOME_K * 12) AS Yearly_Income FROM      Customers  JOIN      Demog ON Customers.GEOID = Demog.GEOID WHERE      Customers.ID IN ('209556', '290135')
SELECT Customers.EDUCATIONNUM FROM Customers JOIN mailings3 ON Customers.ID = mailings3.REFID WHERE mailings3.REFID < 10 AND mailings3.RESPONSE = 'true';
SELECT COUNT(DISTINCT community_area_no)  FROM Community_Area  WHERE side = 'Central';
SELECT `district_name`  FROM `District`  JOIN `Community_Area`  ON `District.district_no` = `Community_Area.district_no`  WHERE `Community_Area.community_area_name` = 'Lincoln Square';
SELECT d.district_name, MAX(COUNT(c.community_area_no)) AS max_communities FROM District d JOIN Community_Area c ON d.district_no = c.district_no;
SELECT community_area_name  FROM Community_Area  WHERE population = (SELECT MIN(population) FROM Community_Area);
SELECT `commander`  FROM `District`  WHERE `district_name` = 'Central';
SELECT `email`  FROM `District`  WHERE `district_name` = 'Central';
SELECT `community_area_name` FROM Neighborhood WHERE `neighborhood_name` = 'Albany Park';
SELECT COUNT(*)  FROM Neighborhood  WHERE community_area_no IN (     SELECT community_area_no      FROM Community_Area      WHERE community_area_name = 'Lincoln Square' )
SELECT n.neighborhood_name  FROM Neighborhood n  JOIN Community_Area ca ON n.community_area_no = ca.community_area_no  WHERE ca.population = (SELECT MAX(population) FROM Community_Area);
SELECT neighborhood_name FROM Neighborhood WHERE community_area_no IN (     SELECT community_area_no     FROM Community_Area     WHERE side = 'Central' );
SELECT latitude, longitude  FROM Crime  JOIN District ON Crime.district_no = District.district_no  WHERE District.district_name = 'Central';
SELECT COUNT(*)  FROM Crime  JOIN District ON Crime.district_no = District.district_no  WHERE District.district_name = 'Central'
SELECT COUNT(*)  FROM Crime  JOIN District ON Crime.district_no = District.district_no  WHERE District.district_name = 'Central' AND Crime.domestic = 'TRUE'
SELECT case_number  FROM Crime  WHERE arrest = 'FALSE' AND district_no IN (     SELECT district_no      FROM District      WHERE district_name = 'Central' )
SELECT COUNT(*)  FROM Crime  JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no  WHERE Community_Area.population = (SELECT MAX(population) FROM Community_Area);
SELECT COUNT(*)  FROM Crime  JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no  WHERE Community_Area.community_area_name = 'Woodlawn'  AND Crime.date LIKE '%1/2018%'
SELECT community_area_name, COUNT(report_no) AS crimes_count FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE DATE_FORMAT(date, '%Y-%m') = '2018-01'   AND community_area_name IN ('Woodlawn', 'Lincoln Square') GROUP BY community_area_name ORDER BY crimes_count DESC;
SELECT D.fax  FROM District D  JOIN Crime C ON D.district_no = C.district_no  WHERE C.date LIKE '%1/2018%'  GROUP BY D.fax  ORDER BY COUNT(C.case_number) DESC  LIMIT 1;
SELECT      AVG(T1.report_no) / COUNT(DISTINCT T3.community_area_no)  FROM      Crime T1  JOIN      Neighborhood T2 ON T1.iucr_no = T2.iucr_no  JOIN      Community_Area T3 ON T3.community_area_no = T2.community_area_no  WHERE      T3.side = 'Central';
SELECT      (COUNT(CASE WHEN d.district_name = 'Central' THEN c.case_number END)      / COUNT(c.case_number)) * 100 AS percentage FROM      Crime c JOIN      District d ON c.district_no = d.district_no;
SELECT COUNT(*)  FROM Community_Area  WHERE side = 'Far North';
SELECT `commander`  FROM `District`  WHERE `district_name` = 'Morgan Park';
SELECT T2.district_name  FROM Crime AS T1  JOIN District AS T2 ON T1.district_no = T2.district_no  WHERE T1.case_number = 'JB100065';
SELECT T1.district_name  FROM District AS T1  JOIN Crime AS T2 ON T1.district_no = T2.district_no  WHERE T2.latitude = 41.66236555 AND T2.longitude = -87.63470194;
SELECT T3.commander  FROM Crime AS T1  JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no  JOIN District AS T3 ON T3.district_no = T1.district_no  WHERE T1.case_number = 'JB524952';
SELECT COUNT(*)  FROM Crime  JOIN IUCR  ON Crime.iucr_no = IUCR.iucr_no  WHERE IUCR.primary_description = 'ASSAULT' AND IUCR.secondary_description = 'SIMPLE' AND Crime.date LIKE '%9/8/2018%'
SELECT T1.district_no  FROM District AS T1  JOIN Crime AS T2 ON T1.district_no = T2.district_no  WHERE T2.secondary_description = 'FIRST DEGREE MURDER'  GROUP BY T1.district_no  ORDER BY COUNT(T2.case_number) DESC  LIMIT 1;
SELECT iucr_no AS index_code  FROM Crime  WHERE case_number = 'JB296775';
SELECT community_area_name  FROM Chicago_Crime.crime  JOIN Chicago_Crime.IUCR ON Chicago_Crime.crime.iucr_no = Chicago_Crime.IUCR.iucr_no  JOIN Chicago_Crime.fbi_code ON Chicago_Crime.crime.fbi_code_no = Chicago_Crime.fbi_code.fbi_code_no  WHERE Chicago_Crime.IUCR.primary_description = 'THEFT' AND Chicago_Crime.IUCR.secondary_description = 'POCKET-PICKING'  GROUP BY Chicago_Crime.crime.community_area_no, Chicago_Crime.community_area_name  ORDER BY COUNT(Chicago_Crime.crime.report_no) DESC  LIMIT 1;
SELECT      alderman_first_name,      alderman_last_name  FROM      Ward  WHERE      ward_no IN (         SELECT ward_no          FROM Crime          WHERE case_number = 'JB103470'     );
SELECT n.neighborhood_name  FROM Neighborhood n  JOIN Community_Area ca ON n.community_area_no = ca.community_area_no  WHERE ca.community_area_name = 'West Englewood';
SELECT COUNT(DISTINCT Neighborhood.neighborhood_name) FROM Neighborhood JOIN Community_Area ON Neighborhood.community_area_no = Community_Area.community_area_no WHERE Community_Area.community_area_name = 'Roseland';
SELECT f.title  FROM FBI_Code f  JOIN Crime c ON f.fbi_code_no = c.fbi_code_no  WHERE c.case_number = 'JB134191';
SELECT COUNT(T2.case_number)  FROM Community_Area AS T1  JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no  WHERE T1.side = 'North' AND T1.community_area_name = 'Lawndale' AND T2.arrest = 'TRUE';
SELECT      (COUNT(CASE WHEN c.secondary_description = '$500 AND UNDER' THEN 1 END)      / COUNT(CASE WHEN c.primary_description = 'THEFT' THEN 1 END) * 100) AS percentage FROM      Crime c JOIN      Community_Area ca ON c.community_area_no = ca.community_area_no WHERE      ca.community_area_name = 'West Englewood';
SELECT      (COUNT(CASE WHEN c.title = 'Larceny' THEN c.case_number END)::FLOAT / COUNT(c.case_number)) * 100 AS percentage FROM      Crime c JOIN      Neighborhood n ON c.community_area_no = n.neighborhood_id WHERE      n.name = 'Edgewater';
SELECT COUNT(*)  FROM Crime  JOIN Neighborhood ON Crime.community_area_no = Neighborhood.community_area_no  WHERE Crime.block = '018XX S KOMENSKY AVE' AND Crime.date LIKE '5/%/2018%'
SELECT community_area_name  FROM Community_Area  WHERE population = (SELECT MAX(population) FROM Community_Area);
SELECT COUNT(*)  FROM Crime  WHERE domestic = 'TRUE' AND location_description = 'ABANDONED BUILDING' AND date LIKE '%2018%';
SELECT SUM(T2.population)  FROM District AS T1  JOIN Community_Area AS T2  ON T1.district_no = T2.community_area_no  WHERE T1.district_no = (SELECT district_no FROM District ORDER BY SUM(T2.population) ASC LIMIT 1)
SELECT COUNT(*)  FROM Crime  WHERE date LIKE '%2018%'  AND location_description = 'ANIMAL HOSPITAL'  AND fbi_code_no = '08B'  AND arrest = 'TRUE';
SELECT      c.date,      c.block,      n.neighborhood_name,      d.district_name,      w.ward_no,      ca.community_area_name,      fc.title,      iucr.primary_description FROM      Crime c JOIN      Neighborhood n ON c.community_area_no = n.community_area_no JOIN      District d ON c.district_no = d.district_no JOIN      Ward w ON c.ward_no = w.ward_no JOIN      Community_Area ca ON c.community_area_no = ca.community_area_no JOIN      FBI_Code fc ON c.fbi_code_no = fc.fbi_code_no JOIN      IUCR iucr ON c.iucr_no = iucr.iucr_no WHERE      fc.crime_against = 'Society';
SELECT      commander  FROM      District  WHERE      district_no = (         SELECT              district_no          FROM              Crime          WHERE              iucr_no = (                 SELECT                      iucr_no                  FROM                      IUCR                  WHERE                      title = 'Disorderly Conduct'             )          GROUP BY              district_no          ORDER BY              COUNT(*) DESC          LIMIT 1     );
SELECT title  FROM Crime  JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no  GROUP BY title  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM Crime  JOIN District ON Crime.district_no = District.district_no  JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no  JOIN Neighborhood ON Community_Area.community_area_no = Neighborhood.community_area_no  WHERE District.district_name = 'Albany Park'  AND Neighborhood.neighborhood_name = 'Albany Park'  AND Crime.location_description = 'APARTMENT'  AND District.title = 'Criminal Sexual Abuse';
SELECT latitude, longitude  FROM Crime  JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no  JOIN FBI_Code ON FBI_Code.fbi_code_no = Crime.fbi_code_no  JOIN Community_Area ON Community_Area.community_area_no = Crime.community_area_no  WHERE IUCR.title = 'Robbery'  AND FBI_Code.crime_against = 'Property'  AND Community_Area.community_area_name = 'Rogers Park'  AND FBI_Code.fbi_code_no = 3  ORDER BY Crime.fbi_code_no DESC  LIMIT 1;
SELECT COUNT(*)  FROM Crime  JOIN District ON Crime.district_no = District.district_no  JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no  JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no  WHERE IUCR.secondary_description = 'SOLICIT ON PUBLIC WAY'  AND IUCR.primary_description = 'PROSTITUTION'  AND Crime.arrest = 'TRUE'  AND Community_Area.community_area_name = 'West Garfield Park';
SELECT COUNT(*)  FROM Crime  JOIN Ward ON Crime.ward_no = Ward.ward_no  WHERE Ward.Population = (SELECT MAX(Population) FROM Ward)  AND domestic = 'TRUE'  AND location_description = 'BAR OR TAVERN';
SELECT COUNT(*)  FROM Community_Area  JOIN Neighborhood ON Community_Area.community_area_no = Neighborhood.community_area_no  WHERE Community_Area.community_area_name = 'Near North Side';
SELECT COUNT(*)  FROM Crime  WHERE domestic = 'TRUE' AND arrest = 'TRUE' AND alderman_last_name = 'Burnett' AND alderman_first_name = 'Walter';
SELECT      T4.description  FROM      Crime AS T1  JOIN      Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no JOIN      Community_Area AS T3 ON T2.community_area_no = T3.community_area_no JOIN      FBI_Code AS T4 ON T1.fbi_code_no = T4.fbi_code_no WHERE      T3.population = (SELECT MIN(population) FROM Community_Area) GROUP BY      T4.fbi_code_no ORDER BY      COUNT(*) DESC LIMIT 1;
SELECT T3.ward_office_address  FROM Crime AS T1  JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no  JOIN Ward AS T3 ON T2.ward_no = T3.ward_no  WHERE T1.block = '010XX W LAKE ST';
SELECT community_area_name  FROM Chicago_Crime.crime  JOIN Chicago_Crime.IUCR ON crime.iucr_no = IUCR.iucr_no  JOIN Chicago_Crime.FBI_Code ON crime.fbi_code_no = FBI_Code.fbi_code_no  WHERE IUCR.primary_description = 'PROSTITUTION'  GROUP BY community_area_no  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM Crime  JOIN District ON Crime.district_no = District.district_no  JOIN Ward ON Crime.ward_no = Ward.ward_no  JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no  WHERE FBI_Code.title = 'Vandalism' AND Crime.arrest = 'TRUE' AND Ward.alderman_name_suffix = ''Edward Burke''
SELECT COUNT(*)  FROM Crime  WHERE domestic = 'TRUE' AND date LIKE '5/%/2018%'
SELECT iucr_no, index_code  FROM Crime  JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no  WHERE primary_description = 'HOMICIDE';
SELECT `commander`, `email`  FROM `District`  WHERE `district_name` = 'Chicago Lawn';
SELECT      w.alderman_first_name,     w.alderman_last_name,     w.alderman_name_suffix FROM      Ward w WHERE      w.Population = (SELECT MAX(Population) FROM Ward);
SELECT community_area_name  FROM Community_Area  WHERE side = 'Northwest';
SELECT title, description  FROM FBI_Code  WHERE title = 'Persons';
SELECT      IUCR_table.secondary_description,     Crime.latitude,     Crime.longitude FROM      Crime JOIN      IUCR_table ON Crime.iucr_no = IUCR_table.iucr_no WHERE      IUCR_table.iucr_no = 142;
SELECT COUNT(*)  FROM Crime  JOIN Ward ON Crime.ward_no = Ward.ward_no  WHERE Ward.alderman_first_name = 'Brendan'  AND Ward.alderman_last_name = 'Reilly'  AND Crime.date LIKE '10/7/2018%'
SELECT COUNT(*)  FROM Crime  WHERE location_description = 'RESTAURANT'  AND district_name = 'Englewood'  AND arrest = 'TRUE';
SELECT      c.case_number,     CONCAT(w.alderman_name_suffix, w.a Alderman_first_name, w.a Alderman_last_name) AS Alderman_full_name,     d.district_name FROM      Crime c JOIN      Ward w ON c.ward_no = w.ward_no JOIN      District d ON d.district_no = c.district_no WHERE      c.block = '0000X N FRANCISCO AVE';
SELECT COUNT(*)  FROM Crime  JOIN IUCR  ON Crime.iucr_no = IUCR.iucr_no  WHERE IUCR.primary_description = 'Misc Non-Index Offense' OR IUCR.secondary_description = 'Misc Non-Index Offense';
SELECT T3.neighborhood_name  FROM Community_Area AS T1  JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no  JOIN Neighborhood AS T3 ON T2.neighborhood_no = T3.neighborhood_no  WHERE T1.community_area_name = 'Douglas';
SELECT      AVG(CountPerMonth) AS AverageCrimeRatePerMonth FROM (     SELECT          MAX(w.Population) AS MaxPopulation,         COUNT(c.report_no) / 12 AS CountPerMonth     FROM          Ward w     JOIN          Crime c ON w.ward_no = c.ward_no     WHERE         w.Population = (SELECT MAX(Population) FROM Ward) ) avg_crime_per_month
SELECT      (COUNT(CASE WHEN c.fbi_code_no IN (SELECT fbi_code_no FROM FBI_Code WHERE title = 'Larceny') AND d.side = 'Central' THEN c.report_no ELSE NULL END)      / COUNT(c.report_no)) * 100 AS percentage FROM      Crime c  JOIN      District d ON c.district_no = d.district_no;
SELECT      c.location_description,     CONCAT(w.alderman_name_suffix, ', ', w.alderman_first_name, ' ', w.alderman_last_name) as alderman_full_name FROM      Crime c JOIN      Ward w ON c.ward_no = w.ward_no WHERE      c.iucr_no IN (SELECT iucr_no FROM IUCR WHERE primary_description = 'ARSON' AND secondary_description = 'BY EXPLOSIVE')
SELECT date, location_description  FROM Crime  JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no  WHERE IUCR.primary_description = 'DECEPTIVE PRACTICE' AND IUCR.secondary_description = 'UNLAWFUL USE OF RECORDED SOUND';
SELECT COUNT(*)  FROM Crime  JOIN District ON Crime.district_no = District.district_no  WHERE Crime.fbi_code_no IN (SELECT fbi_code_no FROM FBI_Code WHERE title = 'Criminal Sexual Assault')  AND District.commander = 'Adnardo Gutierrez'  AND Crime.location_description = 'RESIDENCE';
SELECT      (COUNT(CASE WHEN domestic = 'TRUE' AND arrest = 'TRUE' THEN 1 END) * 100.0 / COUNT(*) OVER () ) AS arrest_percentage  FROM      Crime  JOIN      Community_Area ON Crime.community_area_no = Community_Area.community_area_no  WHERE      Community_Area.side = 'West Pullman' AND domestic = 'TRUE';
SELECT      COUNT(CASE WHEN T1.domestic = 'TRUE' AND T1.location_description = 'BANK' THEN T1.report_no ELSE NULL END) * 100.0 / COUNT(T1.report_no) AS percentage,     (SELECT report_no FROM `chicago_crime.Crime` WHERE T1.domestic = 'TRUE' AND T1.location_description = 'BANK') AS report_numbers FROM `chicago_crime.Crime` AS T1 JOIN `chicago_crime.Ward` AS T2 ON T1.ward_no = T2.ward_no JOIN `chicago_crime.District` AS T3 ON T3.district_no = T1.district_no JOIN `chicago_crime.Neighborhood` AS T4 ON T4.community_area_no = T1.community_area_no WHERE T2.alderman_first_name = 'Christopher' AND T2.alderman_last_name = 'Taliaferro'
SELECT COUNT(*)  FROM Ward  WHERE alderman_first_name = 'James';
SELECT COUNT(*)  FROM Crime  WHERE date LIKE '1/1/2018%';
SELECT AVG(T1.population)  FROM Community_Area AS T1  JOIN Ward AS T2 ON T1.community_area_no = T2.ward_no  WHERE T1.side = 'West'
SELECT T3.report_no FROM Ward AS T1 JOIN Community_Area AS T2 ON T1.ward_no = T2.community_area_no JOIN Crime AS T3 ON T3.ward_no = T1.ward_no JOIN Neighborhood AS T4 ON T4.neighborhood_name = T1.alderman_name WHERE T1.alderman_first_name = 'Edward' AND T1.alderman_last_name = 'Burke' AND T4.community_area_no = (     SELECT T5.community_area_no     FROM Community_Area AS T5     WHERE T5.population = (         SELECT MAX(population)         FROM Community_Area     ) ) AND T3.beat = (     SELECT MAX(beat)     FROM Crime )
SELECT COUNT(*)  FROM Crime  JOIN IUCR  ON Crime.iucr_no = IUCR.iucr_no  WHERE IUCR.primary_description LIKE '%Homicide%'  AND Crime.location_description = 'STREET';
SELECT      alderman_name_suffix, alderman_first_name, alderman_last_name  FROM      Ward  WHERE      ward_no = (SELECT ward_no FROM Crime WHERE report_no = 23769);
SELECT case_number  FROM Crime  JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no  JOIN Neighborhood ON Community_Area.community_area_no = Neighborhood.community_area_no  WHERE domestic = 'TRUE' AND Community_Area.community_area_name = 'Lincoln Square';
SELECT case_number  FROM Crime  JOIN Ward ON Crime.ward_no = Ward.ward_no  WHERE Ward.ward_office_address = '1958 N. Milwaukee Ave.' AND location_description = 'APARTMENT';
SELECT COUNT(*)  FROM Crime  JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no  WHERE Community_Area.community_area_name = 'Bridgeport' AND Crime.beat < 1000;
SELECT report_no  FROM Community_Area  WHERE side = 'Far North'  AND population > 60000;
SELECT report_no  FROM Crime  JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no  JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no  WHERE FBI_Code.title = 'Property' AND Community_Area.community_area_name = 'Riverdale';
SELECT COUNT(*)  FROM Crime  JOIN Ward ON Crime.ward_no = Ward.ward_no  WHERE Crime.domestic = 'TRUE' AND Ward.ward_email = 'ward13@cityofchicago.org';
SELECT `address`  FROM `District`  WHERE `case_number` = 'JB107731';
SELECT SUM(T1.beat) FROM Community_Area AS T1 JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.side = 'Central' AND T1.population > 50000;
SELECT case_number  FROM Crime  JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no  WHERE FBI_Code.description = 'Society' AND DATE_FORMAT(date, '%m/%d/%Y') LIKE '6/%/2018'
SELECT      (COUNT(CASE WHEN `domestic` = 'TRUE' THEN 1 END) * 100.0 / COUNT(*) AS percentage FROM      `chicago_crime.Crime` JOIN      `chicago_crime.Community_Area` ON `chicago_crime.Crime`.`community_area_no` = `chicago_crime.Community_Area`.`community_area_no` WHERE      `chicago_crime.Community_Area`.population = (SELECT MAX(`population`) FROM `chicago_crime.Community_Area`) AND      `chicago_crime.Crime`.`domestic` = 'TRUE' ;
SELECT      c.case_number  FROM      Crime c  JOIN      Ward w ON c.ward_no = w.ward_no  WHERE      w.Population < 52000 AND      c.beat > (SELECT AVG(beat)*0.9 FROM Crime WHERE Population < 52000)
SELECT community_area_name  FROM Community_Area  WHERE side = 'Far North' AND population BETWEEN 50000 AND 70000;
SELECT latitude, longitude  FROM Crime  WHERE location_description = 'ALLEY' AND arrest = 'TRUE'
SELECT      commander,     email,     phone FROM      District WHERE      district_name = 'Ogden';
SELECT fbi_code_no, description  FROM FBI_Code  WHERE title = 'Gambling';
SELECT      (COUNT(CASE WHEN iucr_no IS NOT NULL THEN 1 END)       OVER ()      / COUNT(*) OVER ()) * 100 AS severe_percentage FROM      Crime WHERE      Crime.iucr_no IS NOT NULL AND      Crime.fbi_code_no = (SELECT fbi_code_no FROM FBI_Code WHERE description = 'Index Crime');
SELECT location_description FROM Crime JOIN District ON Crime.district_no = District.district_no JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE District.district_name = 'Austin' GROUP BY location_description ORDER BY COUNT(case_number) DESC LIMIT 1;
SELECT AVG(T.ward_no) / COUNT(T.side) AS avg_community_areas_in_a_side FROM  (SELECT DISTINCT ward_no, side FROM Ward) T;
SELECT community_area_no  FROM Crime  WHERE location_description = 'STREET'  GROUP BY community_area_no  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT AVG(T1.district_name) AS avg_district,        COUNT(T2.report_no) AS total_reckless_homicides FROM District T1 JOIN Crime T2 ON T1.district_no = T2.district_no WHERE T2.secondary_description = 'RECKLESS HOMICIDE';
SELECT      w.ward_office_address,      w.ward_office_phone  FROM      Ward w  JOIN      Crime c ON w.ward_no = c.ward_no  WHERE      c.arrest = 'FALSE'  GROUP BY      w.ward_no, w.ward_office_address, w.ward_office_phone  HAVING      COUNT(*) = (SELECT MAX(count) FROM          (SELECT COUNT(*) as count FROM Crime c2 WHERE c2.arrest = 'FALSE' GROUP BY c2.ward_no) as subquery)
SELECT case_number, latitude, longitude  FROM Crime  JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no  WHERE IUCR.secondary_description = 'CHILD ABDUCTION';
SELECT      T1.secondary_description  FROM      IUCR AS T1  JOIN      Crime AS T2  ON      T1.iucr_no = T2.iucr_no  JOIN      Community_Area AS T3  ON      T3.community_area_no = T2.community_area_no  WHERE      T3.side = 'Northwest'  GROUP BY      T1.secondary_description  ORDER BY      COUNT(T1.secondary_description) DESC  LIMIT 1;
SELECT community_area_no  FROM Crime  WHERE domestic = 'TRUE'  GROUP BY community_area_no  ORDER BY COUNT(*) ASC  LIMIT 1;
SELECT      (COUNT(CASE WHEN secondary_description LIKE '%CANNABIS%' THEN 1 END) / COUNT(secondary_description)) * 100 AS percentage_related_to_cannabis  FROM      chicago_crime.iucr  WHERE      chicago_crime.fbi_code.title = 'Drug Abuse';
SELECT      COUNT(c.case_number) / 28.0 AS average_less_severe_crimes FROM      Crime c JOIN      IUCR i ON c.iucr_no = i.iucr_no WHERE      DATE_FORMAT(c.date, '%m/%d/%Y') LIKE '02/%/2018' AND      i.index_code = 'N';
SELECT community_area_name, SUM(population) AS total_population FROM `chicago_crime`.Community_Area JOIN `chicago_crime`.Crime ON Community_Area.community_area_no = Crime.community_area_no JOIN `chicago_crime`.IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE IUCR.secondary_description = 'SOLICIT FOR PROSTITUTE' GROUP BY community_area_name HAVING COUNT(IUCR.iucr_no) > AVG(`chicago_crime`.Count(secondary_description = 'SOLICIT FOR PROSTITUTE'));
SELECT      (COUNT(CASE WHEN T1.title = 'Disorderly Conduct' THEN T1.report_no ELSE NULL END)      / CAST(T2.row_count AS REAL)) * 100 AS percentage FROM      (SELECT COUNT(*) as row_count FROM Crime WHERE district_no IN (SELECT district_no FROM District WHERE district_name = 'Harrison')) AS D JOIN      Crime T1 ON T1.report_no = D.row_count WHERE      T1.title = 'Disorderly Conduct';
SELECT      (AVG(CASE WHEN secondary_description = 'VEHICULAR HIJACKING' THEN 1 ELSE 0 END) OVER (PARTITION BY district_name) - AVG(CASE WHEN secondary_description = 'AGGRAVATED VEHICULAR HIJACKING' THEN 1 ELSE 0 END) OVER (PARTITION BY district_name)) AS difference_avg_vehicular_hijackings FROM      Crime JOIN      IUCR ON Crime.iucr_no = IUCR.iucr_no;
SELECT COUNT(*)  FROM Crime  WHERE longitude = -87.72658001;
SELECT      c.report_no,     c.date,     c.location_description,     c.arrest,     c.domestic,     c.beat,     d.district_name,     w.ward_no,     ca.community_area_name FROM      Crime c JOIN      IUCR ic ON c.iucr_no = ic.iucr_no JOIN      FBI_Code fb ON ic.index_code = fb.fbi_code_no JOIN      District d ON c.district_no = d.district_no JOIN      Ward w ON c.ward_no = w.ward_no JOIN      Community_Area ca ON c.community_area_no = ca.community_area_no WHERE      fb.title = 'NARCOTICS';
SELECT alderman_first_name  FROM Ward  WHERE Ward_no IN (     SELECT Ward_no      FROM Crime      GROUP BY Ward_no      HAVING COUNT(*) > 50000 );
SELECT `report_no`  FROM `crime`  JOIN `fbi_code` ON `crime.fbi_code_no` = `fbi_code.fbi_code_no`  WHERE `fbi_code.title` = 'Drug Abuse';
SELECT COUNT(*)  FROM Crime  JOIN District ON Crime.district_no = District.district_no  WHERE District.district_name = 'Calumet'  AND Crime.iucr_no IN (SELECT iucr_no FROM IUCR WHERE primary_description = 'WEAPON VIOLATION');
SELECT latitude, longitude  FROM Crime  JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no  WHERE Community_Area.community_area_name = 'Belmont Cragin';
SELECT COUNT(DISTINCT T1.primary_description) FROM IUCR AS T1 JOIN Neighborhood AS T2 ON T1.iucr_no = T1.iucr_no WHERE T2.neighborhood_name = 'Hermosa';
SELECT COUNT(*)  FROM Crime  JOIN District ON Crime.district_no = District.district_no  WHERE District.commander = 'Ronald A. Pontecore Jr.' AND Crime.domestic = 'TRUE';
SELECT COUNT(*)  FROM Crime  JOIN District ON Crime.district_no = District.district_no  JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no  WHERE District.district_name = 'Wentworth' AND FBI_Code.title = 'Society';
SELECT      d.phone FROM      Ward w JOIN      District d ON w.district_no = d.district_no JOIN      Alderman al ON w.alderman_name = CONCAT(al.first_name, ' ', al.last_name) WHERE      al.name_suffix = 'Emma Mitts';
SELECT COUNT(*)  FROM Crime  JOIN IUCR  ON Crime.iucr_no = IUCR.iucr_no  WHERE IUCR.primary_description = 'The theft of a motor vehicle'  AND Crime.community_area_no IN (     SELECT community_area_no      FROM Community_Area      WHERE community_area_name = 'Lake View' )
SELECT T2.district_name  FROM Crime AS T1  JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no  JOIN IUCR AS T3 ON T1.iucr_no = T3.iucr_no  WHERE T3.primary_description = 'INTIMIDATION'  GROUP BY T2.district_no  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT      T1.primary_description  FROM      IUCR AS T1  JOIN      Crime AS T2  ON      T1.iucr_no = T2.iucr_no  JOIN      Community_Area AS T3  ON      T3.community_area_no = T2.community_area_no  WHERE      T3.community_area_name = 'North Lawndale' AND      T2.domestic = 'TRUE'  GROUP BY      T1.primary_description  ORDER BY      COUNT(T2.domestic) DESC  LIMIT 1;
SELECT W.ward_no FROM Ward W JOIN Crime C ON W.ward_no = C.ward_no JOIN IUCR I ON C.iucr_no = I.iucr_no WHERE W.Population > 55000 AND I.primary_description = 'INTIMIDATION' AND I.secondary_description = 'EXTORTION' GROUP BY W.ward_no ORDER BY COUNT(W.ward_no) DESC;
SELECT      D.commander  FROM      District D  JOIN      Crime C ON D.district_no = C.district_no  JOIN      IUCR I ON C.iucr_no = I.iucr_no  WHERE      I.secondary_description = 'CRIMINAL SEXUAL ABUSE'  GROUP BY      D.commander  ORDER BY      COUNT(I.secondary_description) DESC  LIMIT 1;
SELECT      (COUNT(CASE WHEN c.domestic = 'FALSE' THEN 1 END)       OVER() / COUNT(c.case_number) OVER()) * 100 AS non_domestic_percentage FROM      Crime c JOIN      District d ON c.district_no = d.district_no WHERE      d.district_name = 'Jefferson Park'
SELECT AVG(T2.Population)  FROM Crime AS T1  JOIN Ward AS T2 ON T1.ward_no = T2.ward_no  JOIN IUCR AS T3 ON T3.iucr_no = T1.iucr_no  WHERE T3.primary_description = 'APARTMENT' AND T1.arrest = 'FALSE'
SELECT alderman_first_name, alderman_last_name  FROM Ward ORDER BY Population DESC  LIMIT 5;
SELECT COUNT(*)  FROM Crime  JOIN IUCR  ON Crime.iucr_no = IUCR.iucr_no  WHERE IUCR.primary_description LIKE '%property%'
SELECT COUNT(*)  FROM District  WHERE zip_code = 60608;
SELECT `description` FROM `FBI_Code` WHERE `title` = 'Criminal Sexual Abuse';
SELECT community_area_name  FROM Community_Area  JOIN Neighborhood ON Community_Area.community_area_no = Neighborhood.community_area_no  GROUP BY community_area_name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM Crime  WHERE latitude = 41.64820151 AND longitude = -87.54430496 AND index_code = 'I';
SELECT D.commander  FROM District D  JOIN Crime C ON D.district_no = C.district_no  WHERE C.arrest = 'FALSE'  GROUP BY D.district_no, D.commander  ORDER BY COUNT(C.report_no) DESC  LIMIT 1;
SELECT      T1.primary_description AS 'General Description',     T1.secondary_description AS 'Specific Description' FROM      Crime AS T1 JOIN      IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE      T1.location_description = 'AIRCRAFT' GROUP BY      T1.primary_description,     T1.secondary_description ORDER BY      COUNT(T1.iucr_no) DESC LIMIT 1;
SELECT      d.district_name  FROM      District d JOIN      Crime c ON d.district_no = c.district_no WHERE      d.district_name IN ('Deering', 'Near West') AND      c.location_description = 'LIBRARY' GROUP BY      d.district_name ORDER BY      COUNT(c.report_no) DESC LIMIT 1;
SELECT COUNT(*)  FROM Crime  JOIN IUCR  ON Crime.iucr_no = IUCR.iucr_no  WHERE IUCR.primary_description = 'BURGLARY'  AND IUCR.secondary_description = 'FORCIBLE ENTRY'  AND Crime.location_description = 'DAY CARE CENTER'  AND Crime.arrest = 'TRUE';
SELECT district_name FROM District WHERE district_no IN (     SELECT district_no     FROM Crime     WHERE domestic = 'TRUE' ) ORDER BY COUNT(*) DESC LIMIT 1;
SELECT      MIN(T1.Population) AS least_populated,     T2.location_description AS most_common_location FROM      Community_Area T1 JOIN      Crime T2 ON T1.community_area_no = T2.community_area_no GROUP BY      T2.location_description ORDER BY      COUNT(T2.location_description) DESC LIMIT 1;
SELECT COUNT(*)  FROM Crime  WHERE arrest = 'FALSE' AND description = 'violation of laws';
SELECT T3.latitude, T3.longitude  FROM Community_Area AS T1  JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no   JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no   WHERE T3.title = 'Simple Assault' AND T1.community_area_name = 'Chatham'   GROUP BY T3.latitude, T3.longitude  ORDER BY COUNT(T3.latitude) DESC  LIMIT 1;
SELECT ca.community_area_name FROM Community_Area ca JOIN Crime c ON ca.community_area_no = c.community_area_no JOIN FBI_Code fb ON c.fbi_code_no = fb.fbi_code_no WHERE ca.side = 'South' AND fb.description = 'unlawful taking, carrying, leading, or riding away of property from the possession or constructive possession of another person' GROUP BY ca.community_area_name ORDER BY COUNT(fb.fbi_code_no) DESC LIMIT 1;
SELECT COUNT(*)  FROM Crime  JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no  JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no  WHERE Community_Area.community_area_name = 'Englewood'  AND FBI_Code.description = 'Society';
SELECT      AVG(Count(report_no)) AS Weekly_Average_Fraud,     location_description AS Majority_Location_Description FROM      Crime c JOIN      IUCR i ON c.iucr_no = i.iucr_no JOIN      FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE      SUBSTR(c.date, 1, 1) = '1' AND SUBSTR(c.date, 5, 4) = '2018' AND f.title = 'Fraud' GROUP BY      location_description ORDER BY      Count(location_description) DESC LIMIT 1;
SELECT community_area_name  FROM Community_Area  WHERE Population > 50000  LIMIT 3;
SELECT community_area_name  FROM Community_Area  WHERE side = 'Central';
SELECT      COUNT(*) - (SELECT COUNT(*) FROM Community_Area WHERE side = 'South' AND population > 30000) AS difference,     COUNT(*) - (SELECT COUNT(*) FROM Community_Area WHERE side = 'North' AND population > 30000) AS difference FROM Community_Area;
SELECT phone, fax, tty, twitter  FROM District  WHERE district_name = 'Near West';
SELECT `commander`  FROM `District`  WHERE `district_name` = 'Lincoln';
SELECT      primary_description,     secondary_description FROM      IUCR WHERE      iucr_no = 275;
SELECT      (COUNT(CASE WHEN iucr_no IN (         SELECT iucr_no          FROM IUCR          WHERE primary_description = 'CRIME SEXUAL ASSAULT' AND index_code = 'I'     )) * 100) / COUNT(Total.IUCR_NO) AS Percentage FROM      Crime Total JOIN      IUCR ON Total.iucr_no = IUCR.iucr_no;
SELECT T3.neighborhood_name  FROM Community_Area AS T1  JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no  JOIN Ward AS T3 ON T2.community_area_no = T3.community_area_no  WHERE T1.community_area_name = 'North Center';
SELECT COUNT(*)  FROM Neighborhood  WHERE community_area_no IN (     SELECT community_area_no      FROM Community_Area      WHERE community_area_name = 'Forest Glen' );
SELECT SUM(T2.Population)  FROM Neighborhood AS T1  JOIN Ward AS T2 ON T1.neighborhood_name = T2.ward_no  WHERE T1.neighborhood_name IN ('Avondale Gardens', 'Irving Park', 'Kilbourn Park', 'Merchant Park', 'Old Irving Park', 'The Villa')
SELECT COUNT(*)  FROM Crime  JOIN IUCR  ON Crime.iucr_no = IUCR.iucr_no  WHERE IUCR.primary_description = 'Weapons Violation' OR IUCR.secondary_description = 'Weapons Violation';
SELECT      c.case_number  FROM      Crime c  JOIN      IUCR ic  ON      c.iucr_no = ic.iucr_no  JOIN      FBI_Code fb  ON      c.fbi_code_no = fb.fbi_code_no  WHERE      fb.title = 'Criminal Sexual Assault' AND      ic.primary_description LIKE '%against persons%' AND      c.arrest = 'TRUE'  LIMIT 3;
SELECT T2.district_name  FROM Crime AS T1  JOIN District AS T2 ON T1.district_no = T2.district_no  WHERE T1.case_number = 'JB106545';
SELECT primary_description  FROM IUCR  JOIN Crime ON IUCR.iucr_no = Crime.iucr_no  WHERE case_number = 'JB106010';
SELECT community_area_name  FROM Chicago_Crime.crime  JOIN Chicago_Crime.fbi_code ON crime.fbi_code_no = FBI_Code.fbi_code_no  WHERE title = 'Fraud Incident'  LIMIT 3;
SELECT T3.title  FROM Community_Area AS T1  JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no  JOIN FBI_Code AS T3 ON T2.fbi_code_no = T3.fbi_code_no  WHERE T1.community_area_name = 'Rogers Park'
SELECT T2.district_name  FROM Crime AS T1  JOIN District AS T2 ON T1.district_no = T2.district_no  WHERE T1.case_number = 'JB120039' AND COUNT(T1.case_number) > 1;
SELECT      (COUNT(CASE WHEN c.location_description = 'STREET' THEN c.fbi_code_no END)      / COUNT(c.fbi_code_no)) * 100 AS percentage FROM      Crime c JOIN      FBI_Code fc ON c.fbi_code_no = fc.fbi_code_no WHERE      fc.title = 'Drug Abuse';
SELECT ward_no FROM Ward WHERE Population = (SELECT MAX(Population) FROM Ward);
SELECT `beat`, `location_description`  FROM `Crime`  WHERE `case_number` = 'JB112212';
SELECT fbi_code_no  FROM FBI_Code  WHERE description = 'The killing of one human being by another';
SELECT w.ward_office_address  FROM Crime c  JOIN Ward w ON c.ward_no = w.ward_no  JOIN Community_Area ca ON c.community_area_no = ca.community_area_no  WHERE ca.community_area_name = 'Montclare'  GROUP BY w.ward_office_address  LIMIT 5;
SELECT D.commander  FROM District D  JOIN Crime C ON D.district_no = C.district_no  WHERE C.location_description = 'YARD' AND C.beat = 532;
SELECT T3.neighborhood_name  FROM Community_Area AS T1  JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no  JOIN Neighborhood AS T3 ON T1.community_area_no = T3.community_area_no  WHERE T1.community_area_name = 'Lake View';
SELECT T3.neighborhood_name  FROM Crime AS T1  JOIN Neighborhood AS T3 ON T1.community_area_no = T3.community_area_no  WHERE T1.report_no = 23843;
SELECT T3.description  FROM Crime AS T1  JOIN FBI_Code AS T3 ON T1.fbi_code_no = T3.fbi_code_no  WHERE T1.report_no = '23778';
SELECT report_no  FROM Crime  JOIN District ON Crime.district_no = District.district_no  WHERE District.commander = 'Jill M. Stevens';
SELECT      (COUNT(CASE WHEN `location_description` = 'HOUSE' THEN 1 END) / COUNT(*)) * 100 AS percentage FROM `Crime` JOIN `Neighborhood` ON `Crime.community_area_no` = `Neighborhood.neighborhood_name` WHERE `Neighborhood.neighborhood_name` = 'Avalon Park';
SELECT alderman_first_name, alderman_last_name, alderman_name_suffix  FROM Ward  WHERE ward_no = 21;
SELECT ward_no  FROM Ward  WHERE Population = (SELECT MAX(Population) FROM Ward);
SELECT COUNT(iucr_no)  FROM IUCR  WHERE primary_description = 'ASSAULT';
SELECT COUNT(*)  FROM IUCR  WHERE index_code = 'I';
SELECT COUNT(*)  FROM Crime  JOIN Ward ON Crime.ward_no = Ward.ward_no  WHERE Ward.alderman_first_name = 'Pat' AND Ward.alderman_last_name = 'Dowell' AND Crime.arrest = 'FALSE';
SELECT      alderman_first_name,      alderman_last_name,      alderman_name_suffix  FROM      Ward  WHERE      ward_no = (         SELECT              ward_no          FROM              Crime          WHERE              date BETWEEN '2018-01-01' AND '2018-01-31'         GROUP BY              ward_no          ORDER BY              COUNT(*) DESC          LIMIT 1     );
SELECT COUNT(*)  FROM Crime  JOIN Ward ON Crime.ward_no = Ward.ward_no  WHERE Ward.Population = (SELECT MAX(Population) FROM Ward) AND domestic = 'TRUE'
SELECT latitude, longitude  FROM Crime  JOIN Ward ON Crime.ward_no = Ward.ward_no  WHERE Ward.alderman_first_name = 'Pat' AND Ward.alderman_last_name = 'Dowell';
SELECT      w.alderman_name  FROM      Crime c  JOIN      Ward w  ON      c.ward_no = w.ward_no  WHERE      c.date LIKE '1/%/2018%'  AND      (w.alderman_first_name = 'Pat' AND w.alderman_last_name = 'Dowell')  OR      (w.alderman_first_name = 'Sophia' AND w.alderman_last_name = 'King')  GROUP BY      w.alderman_name  ORDER BY      COUNT(c.ward_no) DESC  LIMIT 1;
SELECT case_number FROM Crime JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE IUCR.primary_description = 'BATTERY'
SELECT COUNT(*)  FROM Crime  JOIN IUCR  ON Crime.iucr_no = IUCR.iucr_no  WHERE IUCR.primary_description = 'BATTERY' AND Crime.arrest = 'FALSE';
SELECT      c.case_number  FROM      Crime c  JOIN      IUCR i ON c.iucr_no = i.iucr_no  JOIN      FBI_Code f ON i.index_code = f.fbi_code_no  WHERE      f.description = 'Homicide 1st & 2nd Degree';
SELECT COUNT(*)  FROM Crime  JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no  WHERE Substr(Crime.date, 1, 1) = '1' AND Substr(Crime.date, 5, 4) = '2018' AND FBI_Code.title = 'Property';
SELECT COUNT(*)  FROM Crime  JOIN District ON Crime.district_no = District.district_no  WHERE District.commander = 'Robert A. Rubio'  AND SUBSTR(Crime.date, 1, 1) = '1'  AND SUBSTR(Crime.date, 5, 4) = '2018';
SELECT      D.commander FROM      District AS D JOIN      Crime AS C ON D.district_no = C.district_no WHERE      D.commander IN ('Robert A. Rubio', 'Glenn White') AND      SUBSTR(C.date, 1, 1) = '1' AND SUBSTR(C.date, 5, 4) = '2018' GROUP BY      D.commander ORDER BY      COUNT(C.ward_no) DESC LIMIT 1;
SELECT DISTINCT block FROM Crime WHERE district_no IN (     SELECT district_no     FROM District     WHERE commander = 'Robert A. Rubio' );
SELECT      COUNT(c.ward_no) / 12 AS avg_monthly_incidents FROM      Crime c JOIN      Ward w ON c.ward_no = w.ward_no WHERE      c.date LIKE '%2018%' AND     w.Population = (SELECT MAX(Population) FROM Ward);
SELECT      (COUNT(CASE WHEN c.arrest = 'FALSE' AND i.primary_description = 'BATTERY' THEN 1 END)      / COUNT(CASE WHEN c.arrest = 'FALSE' THEN 1 END)) * 100 AS percentage FROM      Crime c JOIN      IUCR i ON c.iucr_no = i.iucr_no;
SELECT COUNT(DISTINCT owner_name)  FROM businesses  WHERE owner_state = 'CA';
SELECT COUNT(*)  FROM inspections  WHERE score = 100;
SELECT COUNT(*)  FROM inspections  WHERE YEAR(date) = 2016 AND type = 'Routine - Unscheduled';
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = 100;
SELECT COUNT(*)  FROM businesses  JOIN inspections ON businesses.business_id = inspections.business_id  WHERE inspections.date LIKE '2016%' AND businesses.city IN ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO');
SELECT inspections.type  FROM inspections  JOIN businesses ON inspections.business_id = businesses.business_id  WHERE businesses.name = 'Tiramisu Kitchen' AND inspections.date = '2014-01-14';
SELECT COUNT(*)  FROM violations  JOIN inspections ON violations.business_id = inspections.business_id  WHERE inspections.date = '2014-01-14' AND name = 'Tiramisu Kitchen' AND risk_category = 'Low Risk';
SELECT businesses.name FROM businesses JOIN inspections ON businesses.business_id = inspections.business_id JOIN violations ON inspections.business_id = violations.business_id WHERE violations.risk_category = 'Low Risk' AND YEAR(inspections.date) = 2014;
SELECT violations.description  FROM violations  JOIN inspections ON inspections.business_id = violations.business_id  JOIN businesses ON businesses.business_id = inspections.business_id  WHERE businesses.name = 'Tiramisu Kitchen' AND inspections.date = '2014-01-14' AND violations.risk_category = 'Low Risk';
SELECT violations.description FROM violations JOIN inspections ON inspections.business_id = violations.business_id JOIN businesses ON businesses.business_id = inspections.business_id WHERE businesses.name = 'Tiramisu Kitchen' AND violations.risk_category = 'High Risk';
SELECT COUNT(*)  FROM inspections  JOIN businesses ON inspections.business_id = businesses.business_id  WHERE businesses.name = 'Tiramisu Kitchen' AND inspections.type = 'Routine - Unscheduled';
SELECT COUNT(*)  FROM businesses  JOIN inspections ON businesses.business_id = inspections.business_id  WHERE businesses.name = 'Tiramisu Kitchen' AND inspections.type = 'Routine - Unscheduled' AND inspections.score > 70;
SELECT      b1.name  FROM      businesses AS b1  JOIN      inspections AS i1 ON b1.business_id = i1.business_id  JOIN      violations AS v1 ON i1.business_id = v1.business_id  WHERE      b1.name IN ('Tiramisu Kitchen', 'OMNI S.F. Hotel - 2nd Floor Pantry') AND      v1.risk_category = 'Low Risk'  GROUP BY      b1.name  ORDER BY      COUNT(v1.risk_category = 'Low Risk') DESC  LIMIT 1;
SELECT COUNT(*)  FROM violations  JOIN inspections ON violations.business_id = inspections.business_id  JOIN businesses ON inspections.business_id = businesses.business_id  WHERE businesses.city IN ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO')  AND violations.risk_category = 'High Risk';
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High Risk' GROUP BY b.business_id, b.name ORDER BY COUNT(v.business_id) DESC LIMIT 1;
SELECT AVG(inspections.score)  FROM businesses  JOIN inspections ON businesses.business_id = inspections.business_id  WHERE businesses.name = 'Tiramisu Kitchen';
SELECT businesses.business_id  FROM businesses  JOIN inspections ON businesses.business_id = inspections.business_id  GROUP BY businesses.business_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT business_id FROM violations GROUP BY business_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT businesses.name FROM businesses JOIN inspections ON businesses.business_id = inspections.business_id WHERE inspections.score = 100 AND inspections.type = 'Routine - Unscheduled' AND inspections.date = '2016-09-28';
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High' GROUP BY b.name ORDER BY COUNT(v.business_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT v.violation_type_id) FROM violations v JOIN inspections i ON i.business_id = v.business_id JOIN businesses b ON b.business_id = i.business_id WHERE b.name = 'Stacks Restaurant' AND i.date = '2016-10-04';
SELECT violations.description  FROM violations  JOIN inspections ON inspections.business_id = violations.business_id  JOIN businesses ON businesses.business_id = inspections.business_id  WHERE businesses.name = 'Chez Fayala, Inc.' AND inspections.date = '2016-07-01' AND violations.risk_category = 'Moderate Risk';
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.type = 'Routine - Unscheduled' AND i.date = '2016-09-26' ORDER BY i.score ASC LIMIT 1;
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.type = 'Complaint' GROUP BY b.business_id, b.name ORDER BY COUNT(i.business_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM inspections  WHERE business_id = (SELECT business_id FROM businesses WHERE name = 'Soma Restaurant And Bar')  AND type = 'Routine - Unscheduled';
SELECT b.address FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'Low Risk' GROUP BY b.address ORDER BY COUNT(v.business_id) DESC LIMIT 1;
SELECT businesses.name FROM businesses JOIN inspections ON businesses.business_id = inspections.business_id JOIN violations ON inspections.business_id = violations.business_id AND inspections.date = violations.date WHERE violations.risk_category = 'Low Risk' AND violations.description = 'Permit license or inspection report not posted' ORDER BY inspections.date LIMIT 1;
SELECT COUNT(*) AS total_inspections FROM inspections WHERE business_id = (     SELECT business_id     FROM (         SELECT business_id, COUNT(*) AS num_violations         FROM violations         GROUP BY business_id         ORDER BY num_violations DESC         LIMIT 1     ) AS max_violations );
SELECT COUNT(*)  FROM violations  JOIN inspections ON violations.business_id = inspections.business_id  JOIN businesses ON inspections.business_id = businesses.business_id  WHERE businesses.business_certificate = '304977' AND inspections.date = '2013-10-07'
SELECT      AVG(i.score)  FROM      businesses b JOIN      inspections i ON b.business_id = i.business_id WHERE      b.name = 'Chairman Bao'      AND i.type = 'Routine - Unscheduled';
SELECT      (COUNT(CASE WHEN v.risk_category = 'Moderate Risk' THEN 1 END)       OVER ()       / COUNT(*)       OVER (PARTITION BY b.name))     * 100 AS percentage FROM businesses b JOIN inspections i ON b.business_id = i.business_id JOIN violations v ON i.business_id = v.business_id AND i.date = v.date WHERE b.name = 'Melody Lounge';
SELECT COUNT(*)  FROM businesses  WHERE city = 'HAYWARD';
SELECT COUNT(*)  FROM businesses  WHERE business_id IN (     SELECT business_id      FROM inspections      WHERE score <= 50 );
SELECT COUNT(*)  FROM businesses  WHERE DATE(application_date) BETWEEN '2012-01-01' AND '2012-12-31';
SELECT COUNT(*)  FROM inspections  WHERE type = 'Foodborne Illness Investigation'  AND date BETWEEN '2014-01-01' AND '2014-12-31';
SELECT COUNT(DISTINCT owner_name)  FROM businesses  GROUP BY owner_name  HAVING COUNT(business_id) >= 5;
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = 100 AND YEAR(i.date) = 2013;
SELECT COUNT(businesses.name), businesses.city  FROM businesses  JOIN inspections ON businesses.business_id = inspections.business_id  JOIN violations ON inspections.business_id = violations.business_id  WHERE year(inspections.date) = 2016 AND violations.risk_category = 'High Risk'  GROUP BY businesses.city  ORDER BY COUNT(businesses.name) DESC  LIMIT 1;
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = (SELECT MIN(score) FROM inspections)
SELECT COUNT(*)  FROM violations  JOIN businesses ON violations.business_id = businesses.business_id  WHERE businesses.name = 'Tiramisu Kitchen' AND violations.risk_category = 'High Risk';
SELECT COUNT(DISTINCT b.business_id) FROM businesses AS b JOIN inspections AS i ON b.business_id = i.business_id WHERE b.tax_code = 'H24' AND i.type = 'Complaint' AND i.score >= 5;
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id JOIN violations v ON b.business_id = v.business_id AND i.date = v.date WHERE i.date = '2013' AND v.description = 'Contaminated or adulterated food';
SELECT COUNT(*)  FROM businesses  JOIN inspections ON businesses.business_id = inspections.business_id  WHERE businesses.postal_code = '94102' AND inspections.score >= 90 AND YEAR(inspections.date) = 2015;
SELECT b.name FROM businesses b JOIN (     SELECT business_id, COUNT(DISTINCT DATE_TRUNC('year', date)) AS year_count     FROM inspections     WHERE score >= 90     GROUP BY business_id ) i ON b.business_id = i.business_id JOIN (     SELECT business_id, COUNT(*) AS violations_count     FROM violations     GROUP BY business_id ) v ON b.business_id = v.business_id WHERE i.year_count = 4 AND v.violations_count = 0
SELECT AVG(i.score) FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE b.owner_name = 'Yiu Tim Chan' AND b.address = '808 Pacific Ave' AND b.city = 'San Francisco' AND i.date BETWEEN '2014-01-01' AND '2016-12-31';
SELECT AVG(i.score)  FROM inspections i  JOIN businesses b ON i.business_id = b.business_id  WHERE b.owner_name IN (SELECT owner_name FROM businesses GROUP BY owner_name ORDER BY COUNT(*) DESC LIMIT 1)
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'Low Risk' AND YEAR(v.date) = 2014 GROUP BY b.business_id, b.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT o.owner_name  FROM (     SELECT owner_name, COUNT(DISTINCT b.business_id) as num_establishments      FROM businesses b      GROUP BY owner_name      ORDER BY num_establishments DESC      LIMIT 5 ) as o  JOIN (     SELECT business_id, COUNT(*) as high_risk_violations      FROM violations      WHERE risk_category = 'High Risk'      GROUP BY business_id ) as v ON o.business_id = v.business_id  GROUP BY o.owner_name  ORDER BY SUM(high_risk_violations) DESC  LIMIT 1;
SELECT      b.name,     AVG(i.score) AS avg_score_per_inspection FROM      businesses b JOIN      inspections i ON b.business_id = i.business_id GROUP BY      b.name ORDER BY      COUNT(i.business_id) DESC,      AVG(i.score) DESC LIMIT 1;
SELECT COUNT(DISTINCT business_id) FROM inspections WHERE score = 100 AND year(date) = 2013;
SELECT DISTINCT b.business_id FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.type = 'Structural Inspection' AND YEAR(i.date) = 2016 AND MONTH(i.date) = 2;
SELECT COUNT(*)  FROM violations  WHERE violation_type_id IN (     SELECT v.violation_type_id      FROM violations v      JOIN inspections i ON v.business_id = i.business_id AND v.date = i.date      WHERE i.type = 'Inspection Type 1' AND v.risk_category = 'Low Risk'  )  AND description = 'unpermitted food facility';
SELECT businesses.business_id, violations.risk_category, violations.description  FROM businesses  JOIN inspections ON businesses.business_id = inspections.business_id  JOIN violations ON businesses.business_id = violations.business_id AND violations.violation_type_id = '103101';
SELECT inspections.date FROM businesses JOIN inspections ON businesses.business_id = inspections.business_id WHERE businesses.city = 'San Bruno' AND inspections.score = 100 ORDER BY inspections.date DESC LIMIT 1;
SELECT      i.type,     v.description FROM      businesses b JOIN      inspections i ON b.business_id = i.business_id JOIN      violations v ON b.business_id = v.business_id AND v.risk_category = 'Moderate Risk' WHERE      b.name = 'ART\'s CAFÉ';
SELECT violations.violation_type_id, violations.description  FROM businesses JOIN violations ON businesses.business_id = violations.business_id WHERE businesses.name = 'STARBUCKS' AND violations.risk_category = 'High Risk';
SELECT inspections.date, inspections.score, inspections.type  FROM businesses  JOIN inspections ON businesses.business_id = inspections.business_id  WHERE businesses.tax_code = 'AA';
SELECT businesses.business_id, businesses.name, businesses.address FROM businesses JOIN inspections ON businesses.business_id = inspections.business_id WHERE inspections.date = '2016-07-30';
SELECT violations.date, violations.risk_category, violations.description, businesses.name  FROM violations  JOIN businesses ON violations.business_id = businesses.business_id  WHERE businesses.owner_name = 'Jade Chocolates LLC';
SELECT businesses.name, violations.risk_category, violations.description  FROM businesses  JOIN violations ON businesses.business_id = violations.business_id  WHERE violations.violation_type_id = 103111;
SELECT      b.name,      b.city,      b.tax_code  FROM      businesses b  JOIN      inspections i ON b.business_id = i.business_id  JOIN      violations v ON b.business_id = v.business_id  WHERE      i.date = '2014-06-03' AND      v.date = '2014-06-03' AND      v.risk_category = 'High Risk';
SELECT inspections.type FROM businesses JOIN inspections ON businesses.business_id = inspections.business_id WHERE businesses.name = 'El Aji Peruvian Restaurant' AND inspections.score = (SELECT MAX(score) FROM inspections);
SELECT T1.owner_name FROM businesses AS T1 JOIN inspections AS T2 ON T1.business_id = T2.business_id JOIN violations AS T3 ON T3.business_id = T1.business_id AND T2.date = T3.date WHERE T3.risk_category = 'High Risk' AND T3.description = 'Improper cooking time or temperatures'
SELECT businesses.name, businesses.address  FROM businesses  JOIN inspections ON businesses.business_id = inspections.business_id  WHERE inspections.date = '2015-02-02' AND inspections.type = 'Reinspection/Followup';
SELECT businesses.name, businesses.business_certificate FROM businesses JOIN inspections ON businesses.business_id = inspections.business_id WHERE inspections.score < 50;
SELECT COUNT(*)  FROM businesses  WHERE address = '1825 POST St #223' AND city = 'San Francisco';
SELECT `owner_name`  FROM `businesses`  WHERE `owner_zip` = '94104';
SELECT COUNT(*)  FROM businesses  WHERE tax_code = 'H25';
SELECT COUNT(*)  FROM violations  WHERE year(date) = 2014 AND risk_category = 'Low Risk';
SELECT businesses.business_id, violations.risk_category FROM businesses JOIN inspections ON businesses.business_id = inspections.business_id JOIN violations ON businesses.business_id = violations.business_id WHERE owner_name = 'San Francisco Madeleine, Inc.';
SELECT T1.owner_name FROM businesses AS T1 JOIN inspections AS T2 ON T1.business_id = T2.business_id WHERE T2.score = 100;
SELECT COUNT(*)  FROM businesses  JOIN inspections ON businesses.business_id = inspections.business_id  JOIN violations ON businesses.business_id = violations.business_id  WHERE businesses.postal_code = '94117'  AND violations.risk_category = 'High Risk';
SELECT violations.violation_type_id, violations.risk_category  FROM businesses  JOIN inspections ON businesses.business_id = inspections.business_id  JOIN violations ON businesses.business_id = violations.business_id  WHERE inspections.score BETWEEN 70 AND 80;
SELECT businesses.tax_code, inspections.type  FROM businesses  JOIN inspections ON businesses.business_id = inspections.business_id  WHERE businesses.name = 'Rue Lepic';
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id JOIN violations v ON b.business_id = v.business_id AND v.date = '2016-05-27' AND v.violation_type_id = 103157 WHERE i.type = 'Routine - Unscheduled';
SELECT `owner_name`  FROM `businesses` WHERE `business_id` IN (     SELECT `business_id`      FROM `violations`     WHERE `risk_category` = 'High Risk'      AND `violation_type_id` = 103109      AND `description` = 'Unclean or unsanitary food contact surfaces' )
SELECT b.name  FROM businesses b  JOIN inspections i ON b.business_id = i.business_id  WHERE b.owner_city = 'Cameron Park' AND i.score = 100;
SELECT violations.violation_type_id  FROM businesses  JOIN inspections ON businesses.business_id = inspections.business_id  JOIN violations ON inspections.business_id = violations.business_id  WHERE businesses.business_id BETWEEN 30 AND 50  AND businesses.address = '747 IRVING St'  AND businesses.city = 'San Francisco';
SELECT `owner_name`  FROM `businesses`  JOIN `violations` ON `businesses.business_id` = `violations.business_id`  WHERE `violation_type_id` = 103156 AND `date` = '2014-06-12';
SELECT inspections.type FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.address = '500 California St, 2nd Floor' AND businesses.city = 'SAN FRANCISCO' AND inspections.score = (     SELECT MAX(score)     FROM inspections     WHERE business_id IN (         SELECT business_id         FROM businesses         WHERE address = '500 California St, 2nd Floor'     ) );
SELECT COUNT(*)  FROM violations  JOIN inspections ON violations.business_id = inspections.business_id  WHERE inspections.type = 'Routine - Unschedule' AND YEAR(inspections.date) = 2016;
SELECT      b.name,     v.risk_category FROM     businesses b JOIN     inspections i ON b.business_id = i.business_id JOIN     violations v ON b.business_id = v.business_id WHERE     i.score > MULTIPLY(0.8, AVG(i.score)) GROUP BY     b.name,     v.risk_category;
SELECT      (COUNT(CASE WHEN v.risk_category = 'Low Risk' THEN b.business_id END)       OVER ()      / COUNT(business_id)       OVER (PARTITION BY CASE WHEN b.score < 95 AND postal_code = 94110 THEN 1 ELSE NULL END)) * 100 AS percentage FROM      businesses b JOIN      inspections i ON b.business_id = i.business_id JOIN      violations v ON b.business_id = v.business_id WHERE      i.score < 95 AND b.postal_code = 94110;
SELECT DISTINCT state  FROM breweries  JOIN beers ON breweries.id = beers.brewery_id  WHERE ibu = (SELECT MIN(ibu) FROM beers);
SELECT b.name, c.city  FROM breweries AS b  JOIN beers AS v ON b.id = v.brewery_id  JOIN cities AS c ON b.state = c.state_code  WHERE v.ibu = (SELECT MAX(ibu) FROM beers WHERE state = 'NY')
SELECT AVG(beers.abv * beer_ounces.ounces / 12) AS avg_alcohol_content FROM beers JOIN breweries ON beers.brewery_id = breweries.id JOIN (     SELECT id, SUM(ounces) as ounces     FROM beers     WHERE brewery_id = (SELECT id FROM breweries WHERE name = 'Boston Beer Company')     GROUP BY id ) AS beer_ounces ON beers.id = beer_ounces.id WHERE breweries.name = 'Boston Beer Company'
SELECT      (COUNT(CASE WHEN beers.style = 'American Adjunct Lager' THEN beers.id END) /       CAST(COUNT(DISTINCT beers.style) AS REAL)) * 100  FROM      breweries  JOIN      beers ON breweries.id = beers.brewery_id  WHERE      breweries.name = 'Stevens Point Brewery';
SELECT      b1.city,      b1.state,      b1.name AS most_bitter_beer_name,     b2.name AS least_bitter_beer_name,     MAX(beers.ibu) - MIN(beers.ibu) AS bitterness_difference FROM      breweries b1 JOIN      breweries b2 ON b1.id < b2.id JOIN      beers ON beers.brewery_id = b1.id OR beers.brewery_id = b2.id GROUP BY      b1.id ORDER BY      MAX(beers.ibu) DESC,      MIN(beers.ibu) ASC LIMIT 1;
SELECT      (COUNT(CASE WHEN tb1.state = 'WI' THEN 1 END)       * 100.0 / COUNT(DISTINCT CASE WHEN tb2.style = 'American Blonde Ale' THEN tb2.brewery_id ELSE NULL END)) AS percentage FROM      breweries AS tb1 JOIN      beers AS tb2 ON tb1.id = tb2.brewery_id WHERE      tb2.style = 'American Blonde Ale';
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.total_fat = (SELECT MAX(total_fat) FROM Nutrition)
SELECT (total_fat - sat_fat) AS UnsaturatedFatContent FROM Nutrition JOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id WHERE Recipe.title = 'Raspberry Chiffon Pie';
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.sodium < 5;
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.iron > 20;
SELECT title  FROM Recipe  WHERE title IN ('Raspberry Chiffon Pie', 'Fresh Apricot Bavarian')  AND EXISTS (     SELECT 1      FROM Nutrition      WHERE recipe_id = Recipe.recipe_id      ORDER BY vitamin_c DESC      LIMIT 1 );
SELECT r.title FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id WHERE q.prep_min > 10 AND r.recipe_id = (     SELECT r2.recipe_id     FROM Recipe r2     JOIN Nutrition n ON r2.recipe_id = n.recipe_id     WHERE q.prep_min > 10     ORDER BY n.calories DESC     LIMIT 1 );
SELECT SUM(calories)  FROM Nutrition  JOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id  WHERE Recipe.title = 'Raspberry Chiffon Pie';
SELECT `optional` FROM `Quantity` WHERE `ingredient_id` IN (     SELECT `ingredient_id`     FROM `Ingredient`     WHERE `name` = 'graham cracker crumbs' ) AND `recipe_id` IN (     SELECT `recipe_id`     FROM `Recipe`     WHERE `title` = 'Raspberry Chiffon Pie' );
SELECT COUNT(*)  FROM Ingredient  JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id  WHERE Quantity.recipe_id IN (     SELECT recipe_id      FROM Recipe      WHERE title = 'Raspberry Chiffon Pie' ) AND (Quantity.max_qty = Quantity.min_qty);
SELECT Ingredient.name FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id WHERE Quantity.recipe_id IN (     SELECT recipe_id FROM Recipe WHERE title = 'Raspberry Chiffon Pie' ) AND Preparation IS NULL;
SELECT COUNT(*)  FROM Recipe  JOIN Quantity ON Recipe.recipe_id = Quantity.recipe_id  JOIN Ingredient ON Ingredient.ingredient_id = Quantity.ingredient_id  WHERE Ingredient.name = 'graham cracker crumbs';
SELECT SUM(q.quantity)  FROM Quantity q  JOIN Recipe r ON r.recipe_id = q.recipe_id  JOIN Ingredient i ON i.ingredient_id = q.ingredient_id  WHERE r.title = 'Raspberry Chiffon Pie' AND i.name = 'graham cracker crumbs'
SELECT SUM(calories * pcnt_cal_fat) / 100 AS calories_from_fat FROM Nutrition JOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id WHERE Recipe.title = 'Raspberry Chiffon Pie';
SELECT      AVG(N.calories) AS avg_calories FROM      Recipe R JOIN      Quantity Q ON R.recipe_id = Q.recipe_id JOIN      Ingredient I ON Q.ingredient_id = I.ingredient_id JOIN      Nutrition N ON R.recipe_id = N.recipe_id WHERE      R.source = 'Produce for Better Health Foundation and 5 a Day';
SELECT nutrition.calories  FROM Recipe  JOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id  JOIN Ingredient ON Recipe.title = 'turkey tenderloin bundles' AND Ingredient.name = Ingredient.name  WHERE Ingredient.name = 'turkey tenderloin';
SELECT Quantity.quantity_id, Quantity.unit  FROM Ingredient  JOIN Quantity ON Ingredient.name = '1% lowfat milk' AND Ingredient.category LIKE '%Milk%'  WHERE Quantity.recipe_id = 1436 AND Quantity.max_qty = Quantity.min_qty;
SELECT title  FROM Recipe  WHERE recipe_id = (     SELECT recipe_id      FROM Nutrition      ORDER BY total_fat DESC      LIMIT 1 );
SELECT COUNT(*)  FROM Ingredient  WHERE name = 'seedless red grapes';
SELECT Ingredient.name  FROM Quantity  JOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id  WHERE Quantity.recipe_id = 1397 AND optional = 'TRUE';
SELECT R.title  FROM Recipe R  JOIN Quantity Q ON R.recipe_id = Q.recipe_id  JOIN Ingredient I ON Q.ingredient_id = I.ingredient_id  WHERE I.name = 'frozen raspberries in light syrup' AND Q.max_qty = Q.min_qty ORDER BY Q.max_qty DESC  LIMIT 1;
SELECT Ingredient.name FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id GROUP BY Ingredient.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT `preparation`  FROM Ingredient  JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id  JOIN Recipe ON Recipe.recipe_id = Quantity.recipe_id  WHERE Ingredient.name = 'apple juice' AND Recipe.title = 'raspberry-pear couscous cake';
SELECT Quantity.min_qty, Ingredient.name  FROM Quantity  JOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id  WHERE Ingredient.name = 'almonds' AND        Quantity.recipe_id IN (         SELECT Recipe.recipe_id          FROM Recipe          WHERE title = 'chicken pocket sandwich'       ) AND        Quantity.unit = 'cups';
SELECT title  FROM Recipe  JOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id  WHERE Nutrition.vitamin_c = (SELECT MAX(vitamin_c) FROM Nutrition)
SELECT nutrition.vitamin_a FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id JOIN Recipe ON Recipe.recipe_id = Quantity.recipe_id JOIN Nutrition ON Nutrition.recipe_id = Recipe.recipe_id WHERE Ingredient.name = 'Sherry' AND Recipe.title = 'Sherried Beef';
SELECT title  FROM Recipe  WHERE recipe_id IN (     SELECT recipe_id      FROM Quantity      GROUP BY recipe_id      HAVING COUNT(DISTINCT ingredient_id) = (         SELECT MAX(count_distinct_ingredients)          FROM (             SELECT COUNT(DISTINCT ingredient_id) as count_distinct_ingredients              FROM Quantity              GROUP BY recipe_id         )     ) )
SELECT      (SUM(CASE WHEN recipe.title = 'Lasagne-Spinach Spirals' THEN nutrition.sodium ELSE 0 END)) /      (SUM(CASE WHEN recipe.title = 'Beef and Spinach Pita Pockets' THEN nutrition.sodium ELSE 0 END))  FROM      Recipe recipe  JOIN      Nutrition nutrition ON recipe.recipe_id = nutrition.recipe_id;
SELECT AVG(Nutrition.calories)  FROM Recipe  JOIN Quantity ON Recipe.recipe_id = Quantity.recipe_id  JOIN Ingredient ON Ingredient.ingredient_id = Quantity.ingredient_id  JOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id  WHERE Ingredient.name = 'coarsely ground black pepper';
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.iron > 20;
SELECT COUNT(*)  FROM Ingredient  JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id  JOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id  WHERE Recipe.title = 'Apricot Yogurt Parfaits';
SELECT Ingredient.name FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id WHERE Quantity.preparation LIKE '%cook in beef broth%'
SELECT COUNT(*)  FROM Ingredient  JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id  JOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id  WHERE MAX(Nutrition.vitamin_a) IS NOT NULL;
SELECT title  FROM Recipe  JOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id  WHERE MAX(Nutrition.vitamin_c) > 0  ORDER BY MAX(Nutrition.vitamin_c) DESC  LIMIT 5;
SELECT Ingredient.name FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id GROUP BY Ingredient.ingredient_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(*)  FROM Ingredient  JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id  JOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id  WHERE Ingredient.category = 'baking product'  AND Recipe.title = 'No-Bake Chocolate Cheesecake';
SELECT Ingredient.name, Ingredient.plural  FROM Ingredient  JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id  JOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id  WHERE Recipe.title = 'Strawberry Sorbet';
SELECT Ingredient.name, Ingredient.plural  FROM Ingredient  JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id  WHERE Quantity.recipe_id IN (     SELECT recipe_id      FROM Recipe      WHERE title = 'Warm Chinese Chicken Salad' ) AND Quantity.optional = 'TRUE';
SELECT title FROM Recipe JOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id WHERE Nutrition.alcohol > 10 ORDER BY prep_min DESC LIMIT 1;
SELECT COUNT(*)  FROM Recipe r  JOIN Nutrition n ON r.recipe_id = n.recipe_id  WHERE n.total_fat - n.sat_fat = (SELECT MAX(total_fat - sat_fat) FROM Nutrition);
SELECT r.title FROM Recipe r JOIN Source s ON r.source = s.source_id WHERE s.name = 'National Potato Board' ORDER BY r.calories DESC LIMIT 1;
SELECT      r.recipe_id,     SUM(r.prep_min + r.cook_min + r.stnd_min) as total_cooking_time FROM      Recipe r JOIN      Quantity q ON r.recipe_id = q.recipe_id GROUP BY      r.recipe_id ORDER BY      COUNT(q.ingredient_id) DESC LIMIT 1;
SELECT      Ingredient.name,     COUNT(Quantity.quantity_id) AS appearance_count,     (COUNT(Quantity.quantity_id) * 100.0 / (SELECT COUNT(*) FROM Ingredient)) AS appearance_percentage FROM      Ingredient JOIN      Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id GROUP BY      Ingredient.name ORDER BY      appearance_count DESC LIMIT 1;
SELECT      R.title,      (R.prep_min + R.cook_min + R.stnd_min) AS total_time  FROM      Recipe R  JOIN      Quantity Q ON R.recipe_id = Q.recipe_id  JOIN      Ingredient I ON Q.ingredient_id = I.ingredient_id  JOIN      Nutrition N ON R.recipe_id = N.recipe_id  WHERE      N.total_fat = (         SELECT              MAX(total_fat)          FROM              Nutrition      )  ORDER BY      R.recipe_id  LIMIT 1;
SELECT r.title FROM Recipe r JOIN Ingredient i ON r.recipe_id = i.ingredient_id WHERE i.name = 'almond extract';
SELECT Ingredient.name, Ingredient.plural  FROM Ingredient  JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id  JOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id  WHERE Recipe.title = 'Tomato-Cucumber Relish';
SELECT COUNT(*)  FROM Ingredient  JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id  WHERE Quantity.recipe_id IN (     SELECT recipe_id      FROM Recipe      WHERE title = 'Idaho Potato Supreme' )
SELECT Ingredient.name FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id JOIN Recipe ON Recipe.recipe_id = Quantity.recipe_id JOIN Nutrition ON Nutrition.recipe_id = Recipe.recipe_id WHERE Nutrition.carbo = (SELECT MAX(carbo) FROM Nutrition) ORDER BY Ingredient.name;
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.iron > 20;
SELECT i.name, i.plural  FROM Ingredient i  JOIN Quantity q ON i.ingredient_id = q.ingredient_id  JOIN Recipe r ON q.recipe_id = r.recipe_id  JOIN Nutrition n ON r.recipe_id = n.recipe_id  WHERE n.vitamin_a = (SELECT MAX(vitamin_a) FROM Nutrition)
SELECT      I.name AS Ingredient,     Q.max_qty AS Max_Quantity FROM      Recipe R JOIN      Quantity Q ON R.recipe_id = Q.recipe_id JOIN      Ingredient I ON I.ingredient_id = Q.ingredient_id WHERE      R.servings = 7;
SELECT      (COUNT(CASE WHEN Nutrition.protein = 0 AND Nutrition.sodium = 0 THEN Nutrition.recipe_id ELSE NULL END) / COUNT(Nutrition.recipe_id)) * 100 AS sodium_free_percentage FROM      Recipe JOIN      Nutrition ON Recipe.recipe_id = Nutrition.recipe_id WHERE      Recipe.source = 'The California Tree Fruit Agreement'
SELECT Ingredient.name FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id WHERE Quantity.unit = 'slice(s)';
SELECT COUNT(*)  FROM Ingredient  JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id  WHERE Ingredient.category = 'canned dairy' AND Quantity.unit = 'can';
SELECT title, total_time FROM Recipe JOIN Quantity ON Recipe.recipe_id = Quantity.recipe_id JOIN Ingredient ON Ingredient.ingredient_id = Quantity.ingredient_id WHERE Ingredient.name = 'lima beans' AND Quantity.optional = 'N' GROUP BY Recipe.recipe_id;
SELECT      COUNT(CASE WHEN servings >= 10 THEN recipe_id END) * 100 / (SELECT COUNT(*) FROM Recipe WHERE name LIKE '%sea bass%') AS percentage FROM      Recipe WHERE      name LIKE '%sea bass%' AND servings >= 10;
SELECT nutrition.total_fat FROM Nutrition JOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id WHERE Recipe.title = 'Raspberry Chiffon Pie';
SELECT nutrition.pcnt_cal_prot  FROM Nutrition  JOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id  WHERE Recipe.title = 'Raspberry Chiffon Pie'
SELECT COUNT(*)  FROM Ingredient  JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id  WHERE Quantity.recipe_id IN (     SELECT recipe_id      FROM Recipe      WHERE title = 'Raspberry Chiffon Pie' );
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.alcohol = 0;
SELECT AVG(Nutrition.vitamin_c)  FROM Recipe  JOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id  WHERE Recipe.title LIKE '%cake%';
SELECT COUNT(*)  FROM Recipe  JOIN Ingredient ON Recipe.recipe_id = Ingredient.ingredient_id  WHERE Ingredient.category = 'dairy' AND Recipe.servings > 10;
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.iron > 20;
SELECT title FROM Recipe JOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id WHERE Nutrition.calories = (SELECT MAX(calories) FROM Nutrition);
SELECT COUNT(*)  FROM Recipe r  JOIN Ingredient i ON r.recipe_id = i.ingredient_id  WHERE i.category NOT LIKE '%dairy%'
SELECT Ingredient.name, Ingredient.plural  FROM Ingredient  JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id  JOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id  WHERE Recipe.title = 'Apricot Yogurt Parfaits';
SELECT r.title, q.max_qty, q.min_qty FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id WHERE q.max_qty <> q.min_qty;
SELECT i.name FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE r.cook_min = (SELECT MAX(cook_min) FROM Recipe)
SELECT      (COUNT(CASE WHEN cholestrl = 0 THEN recipe_id END)       / COUNT(recipe_id)) * 100 AS percentage FROM      Nutrition WHERE      cook_min < 20;
SELECT      (COUNT(CASE WHEN N.calories > 200 THEN N.recipe_id END) * 100 / COUNT(N.recipe_id)) AS percentage_above_200_calories FROM      Nutrition N JOIN      Ingredient I ON N.recipe_id = I.ingredient_id WHERE      I.category = 'cheese'
SELECT firstname, lastname  FROM employee  WHERE salary = (SELECT MAX(salary) FROM employee);
SELECT COUNT(*)  FROM employee  WHERE performance = 'Good';
SELECT ssn FROM employee WHERE gender = 'M' AND salary > 70000;
SELECT educationrequired  FROM position  WHERE positiontitle = 'Regional Manager';
SELECT      p1.positiontitle AS 'Position',     MIN(p1.minsalary) AS 'Minimum Salary' FROM      position p1 WHERE      p1.positiontitle IN ('Account Representative', 'Trainee') GROUP BY      p1.positiontitle;
SELECT location.city FROM employee JOIN location ON employee.locationID = location.locationID WHERE employee.firstname = 'Sandy' AND employee.lastname = 'Adams';
SELECT COUNT(*)  FROM employee  JOIN location ON employee.locationID = location.locationID  WHERE location.state = 'NY'  AND employee.performance = 'Good';
SELECT T3.officephone  FROM employee AS T1  JOIN position AS T2 ON T1.positionID = T2.positionID  JOIN location AS T3 ON T3.locationID = T1.locationID  WHERE T1.firstname = 'Sandy' AND T1.lastname = 'Adams';
SELECT COUNT(*)  FROM employee  JOIN location ON employee.locationID = location.locationID  WHERE location.address = '450 Peachtree Rd' AND employee.gender = 'M';
SELECT COUNT(*)  FROM employee  WHERE positionID IN (     SELECT positionID      FROM position      WHERE positiontitle = 'Account Representative' );
SELECT      e.salary - p.minsalary AS salary_difference FROM      employee e JOIN      position p ON e.positionID = p.positionID WHERE      e.firstname = 'James' AND e.lastname = 'Johnson';
SELECT COUNT(*)  FROM employee e  JOIN position p ON e.positionID = p.positionID  JOIN location l ON e.locationID = l.locationID  WHERE p.positiontitle = 'Trainee' AND l.state = 'NY';
SELECT firstname, lastname  FROM employee  JOIN position ON employee.positionID = position.positionID  WHERE positiontitle = 'Trainee';
SELECT e.firstname, e.lastname  FROM employee e  JOIN position p ON e.positionID = p.positionID  WHERE (firstname = 'Jose Rodriguez' AND educationrequired < (SELECT MAX(educationrequired) FROM position WHERE positionID = (SELECT positionID FROM employee WHERE lastname = 'Rodriguez')))  OR (firstname = 'Sandy Adams' AND educationrequired < (SELECT MAX(educationrequired) FROM position WHERE positionID = (SELECT positionID FROM employee WHERE lastname = 'Adams')))
SELECT DISTINCT location.zipcode  FROM employee  JOIN location ON employee.locationID = location.locationID  WHERE employee.gender = 'M' AND employee.performance = 'Good'
SELECT ssn FROM employee JOIN location ON employee.locationID = location.locationID WHERE location.state = 'CA';
SELECT COUNT(*)  FROM employee e  JOIN position p ON e.positionID = p.positionID  WHERE p.positiontitle = 'Trainee' AND e.salary > 20000;
SELECT AVG(e.salary)  FROM employee e  JOIN position p ON e.positionID = p.positionID  WHERE p.positiontitle = 'Trainee';
SELECT      (AVG(e.salary) - p.minsalary) / p.minsalary * 100 AS salary_increase_percentage FROM      employee e JOIN      position p ON e.positionID = p.positionID WHERE      p.positiontitle = 'Trainee';
SELECT COUNT(*)  FROM employee  WHERE gender = 'F';
SELECT locationcity  FROM location  JOIN employee ON location.locationID = employee.locationID  WHERE firstname = 'Jose' AND lastname = 'Rodriguez';
SELECT T3.state  FROM employee AS T1  JOIN location AS T3 ON T1.locationID = T3.locationID  JOIN person AS T2 ON T2.firstname = 'Emily' AND T2.lastname = 'Wood' WHERE T2.firstname = 'Emily' AND T2.lastname = 'Wood';
SELECT p.educationrequired  FROM employee e  JOIN position p ON e.positionID = p.positionID  JOIN location l ON e.locationID = l.locationID  WHERE e.firstname = 'David' AND e.lastname = 'Whitehead';
SELECT COUNT(*)  FROM employee  WHERE locationID IN (     SELECT locationID      FROM location      WHERE locationcity = 'Miami' );
SELECT firstname, lastname  FROM employee  JOIN location ON employee.locationID = location.locationID  WHERE location.locationcity = 'Boston'  ORDER BY salary DESC  LIMIT 1;
SELECT e.ssn  FROM employee e  JOIN location l ON e.locationID = l.locationID  WHERE l.locationcity = 'New York City' AND e.performance = 'Good';
SELECT COUNT(*)  FROM employee  JOIN position ON employee.positionID = position.positionID  JOIN location ON employee.locationID = location.locationID  WHERE position.positiontitle = 'account representatives' AND location.locationcity = 'Chicago' AND employee.performance = 'Good';
SELECT p.positiontitle  FROM employee e  JOIN position p ON e.positionID = p.positionID  WHERE e.firstname = 'Kenneth' AND e.lastname = 'Charles';
SELECT l.address  FROM location l  JOIN position p ON l.locationID = p.positionID  JOIN employee e ON p.positionID = e.positionID  WHERE p.positiontitle = 'Manager' AND e.salary = (SELECT MAX(salary) FROM employee)
SELECT MAX(p.maxsalary)  FROM position p  JOIN employee e ON p.positionID = e.positionID  WHERE e.firstname = 'Tracy' AND e.lastname = 'Coulter';
SELECT      (MAX(position.maxsalary) - employee.salary) * 100 / employee.salary AS raise_percentage FROM      employee JOIN      position ON employee.positionID = position.positionID WHERE      employee.firstname = 'Jose' AND employee.lastname = 'Rodriguez';
SELECT COUNT(*)  FROM employee  WHERE performance = 'Poor' AND salary > 50000;
SELECT firstname, lastname  FROM employee  WHERE salary = (SELECT MAX(salary) FROM employee);
SELECT COUNT(*)  FROM position  WHERE maxsalary < '100000';
SELECT salary  FROM employee  WHERE hiredate = (SELECT MIN(hiredate) FROM employee);
SELECT MIN(T2.minsalary)  FROM position AS T1  JOIN employee AS T2  ON T1.positionID = T2.positionID  WHERE T1.educationrequired = (SELECT MAX(educationrequired) FROM position);
SELECT      address, locationcity, state, zipcode  FROM      location  WHERE      locationID = (         SELECT              locationID          FROM              employee          GROUP BY              locationID          ORDER BY              COUNT(*) DESC          LIMIT 1     );
SELECT      AVG(e.salary) AS average_salary FROM      employee e JOIN      position p ON e.positionID = p.positionID WHERE      p.educationrequired = '2 year degree';
SELECT COUNT(*)  FROM employee e  JOIN position p ON e.positionID = p.positionID  WHERE e.gender = 'M' AND p.positiontitle = 'Regional Manager';
SELECT p.positiontitle  FROM position p  JOIN employee e ON p.positionID = e.positionID  WHERE e.performance = 'Poor'  GROUP BY p.positiontitle  ORDER BY COUNT(e.ssn) DESC  LIMIT 1;
SELECT p.positiontitle  FROM position p  JOIN employee e ON p.positionID = e.positionID  WHERE p.educationrequired = '2 year degree' AND e.gender = 'F'  GROUP BY p.positiontitle  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM employee  JOIN position ON employee.positionID = position.positionID  JOIN location ON employee.locationID = location.locationID  WHERE position.positiontitle = 'Account Representative'  AND location.state = 'IL'  AND employee.performance = 'good';
SELECT AVG(e.salary)  FROM employee e  JOIN position p ON e.positionID = p.positionID  JOIN location l ON e.locationID = l.locationID  WHERE p.positiontitle = 'Manager' AND p.educationrequired IS NOT NULL AND e.performance = 'Poor';
SELECT state  FROM location l  JOIN employee e ON l.locationID = e.locationID  JOIN position p ON e.positionID = p.positionID  WHERE p.positiontitle = 'Account Representative' AND e.performance = 'Good'  GROUP BY state  ORDER BY COUNT(p.positionID) DESC  LIMIT 1;
SELECT firstname, lastname, performance  FROM employee  WHERE salary = (SELECT MIN(salary) FROM employee);
SELECT locationcity FROM location WHERE state IN ('CO', 'UT', 'CA');
SELECT locationcity, address FROM location WHERE zipcode > 90000;
SELECT p.positiontitle  FROM position p  WHERE p.educationrequired = '4 year degree';
SELECT MAX(T2.maxsalary)  FROM position AS T1  JOIN employee AS T3 ON T1.positionID = T3.positionID  JOIN location AS T4 ON T3.locationID = T4.locationID  WHERE T1.positiontitle = 'Trainer';
SELECT e.ssn, e.firstname, e.lastname  FROM employee e  JOIN position p ON e.positionID = p.positionID  WHERE p.positiontitle = 'account representative' AND e.performance = 'Average';
SELECT e.hiredate, p.positiontitle, e.salary  FROM employee e  JOIN position p ON e.positionID = p.positionID  WHERE e.firstname = 'Emily' AND e.lastname = 'Wood';
SELECT      p.positiontitle,      MAX(e.salary) AS max_salary,      MIN(e.salary) AS min_salary FROM      employee e JOIN      position p ON e.positionID = p.positionID WHERE      CONCAT(e.firstname, ' ', e.lastname) = 'Bill Marlin'
SELECT e.firstname, e.lastname, e.gender, p.positiontitle FROM employee e JOIN location l ON e.locationID = l.locationID JOIN position p ON e.positionID = p.positionID WHERE l.locationcity = 'New York City';
SELECT firstname, lastname, hiredate, performance  FROM employee  JOIN location ON employee.locationID = location.locationID  WHERE location.state = 'UT';
SELECT e.firstname, e.lastname, l.locationcity, l.address, l.zipcode FROM employee e JOIN position p ON e.positionID = p.positionID JOIN location l ON e.locationID = l.locationID WHERE p.positiontitle = 'Manager' AND e.performance = 'Poor';
SELECT e.firstname, e.lastname, p.positiontitle, p.educationrequired, e.salary  FROM employee e  JOIN position p ON e.positionID = p.positionID  WHERE p.positiontitle = 'Account Representative' AND e.performance = 'Poor';
SELECT e.firstname, e.lastname, e.performance, l.locationcity FROM employee e JOIN location l ON e.locationID = l.locationID WHERE e.ssn = '767-74-7373';
SELECT e.firstname, e.lastname, p.positiontitle, l.locationcity, l.officephone FROM employee e JOIN position p ON e.positionID = p.positionID JOIN location l ON e.locationID = l.locationID WHERE l.state = 'CO';
SELECT e.firstname, e.lastname, p.positiontitle, l.locationcity  FROM employee e  JOIN position p ON e.positionID = p.positionID  JOIN location l ON e.locationID = l.locationID  WHERE e.salary = (SELECT MAX(salary) FROM employee)  GROUP BY e.salary  HAVING COUNT(*) = 1  ORDER BY e.salary DESC  LIMIT 1;
SELECT      start_station_name,      end_station_name,      duration  FROM      trip  WHERE      duration = (SELECT MAX(duration) FROM trip);
SELECT      (COUNT(CASE WHEN subscription_type = 'Subscriber' THEN id END) * 100.0 / COUNT(id)) AS percentage FROM      trip;
SELECT end_station_name, city  FROM trip  WHERE bike_id = 13  AND end_date = (SELECT MAX(end_date) FROM trip WHERE bike_id = 13);
SELECT T1.end_station_name  FROM trip AS T1  WHERE T1.start_date <> T1.end_date;
SELECT s.name, s.lat, s.long  FROM station s JOIN status st ON s.id = st.station_id WHERE st.time = '2013-11-03 02:01:01' AND st.bikes_available = 0 LIMIT 1;
SELECT s.name, s.city  FROM station s  JOIN trip t ON s.id = t.start_station_id  WHERE t.id IN (     SELECT t2.id      FROM trip t2      GROUP BY t2.start_station_id      ORDER BY COUNT(t2.id) DESC      LIMIT 1 )
SELECT weather.max_temperature_f  FROM weather  JOIN trip ON weather.date = DATE(trip.start_date) AND weather.zip_code = trip.zip_code  WHERE trip.id = 4080  ORDER BY weather.max_temperature_f DESC  LIMIT 1;
SELECT status.time, status.date  FROM status  JOIN station ON status.station_id = station.id  WHERE station.name = 'San Jose Diridon Caltrain Station'  ORDER BY status.bikes_available DESC  LIMIT 1;
SELECT T3.duration  FROM weather AS T1  JOIN trip AS T3 ON T1.date = DATE(T3.start_date) OR T1.date = DATE(T3.end_date)  WHERE T1.events = 'Rain'
SELECT T1.start_date, T2.end_station_name  FROM trip AS T1  JOIN station AS T2 ON T2.id = T1.end_station_id  WHERE T2.lat = 37.331415 AND T2.long = -121.8932;
SELECT COUNT(*)  FROM trip  JOIN station ON trip.start_station_id = station.id  WHERE DATE_FORMAT(trip.start_date, '%m%d%Y') BETWEEN '08012013' AND '08312013'  AND station.city = 'Redwood City';
SELECT      s1.name AS borrowed_station,     s2.name AS returned_station,     w.min_temperature_f AS mean_temperature FROM      trip t JOIN      station s1 ON t.start_station_id = s1.id JOIN      station s2 ON t.end_station_id = s2.id JOIN      weather w ON DATE(t.start_date) = DATE(w.date) WHERE      t.duration < 300 ;
SELECT      t.start_date AS most_bikes_day,     AVG(s.min_temperature_f) AS avg_coldest_temp FROM      trip t     JOIN station s ON t.start_station_id = s.id GROUP BY      t.start_date ORDER BY      COUNT(t.id) DESC LIMIT 1;
SELECT      b.bike_id,     AVG(tr.duration / t1.date) AS average_usage_per_bike,     AVG(t2.wind_dir_degrees / COUNT(t2.date)) AS average_wind_direction FROM      trip tr JOIN      (SELECT date FROM weather WHERE DATE_FORMAT(date, '%Y-%m') IN ('2013-07', '2013-08', '2013-09')) t1 ON      DATE_FORMAT(tr.start_date, '%Y-%m-%d') = t1.date JOIN      weather t2 ON      DATE_FORMAT(t2.date, '%Y-%m-%d') = DATE_FORMAT(tr.start_date, '%Y-%m-%d') GROUP BY      b.bike_id;
SELECT COUNT(*) AS num_stations_installed, station.name  FROM station  JOIN status ON station.id = status.station_id  WHERE station.city = 'San Jose' AND status.time BETWEEN '2014-01-01' AND '2014-12-31';
SELECT MAX(trip.duration)  FROM trip  WHERE trip.start_date = '8/29/2013' AND trip.end_date = '8/29/2013';
SELECT (trip.duration / 60) AS minutes FROM trip JOIN station ON trip.start_station_name = station.name AND trip.end_station_name = station.name WHERE trip.bike_id = 426 AND trip.start_station_id = (SELECT id FROM station WHERE name = 'Market at 4th') AND trip.end_station_id = (SELECT id FROM station WHERE name = '2nd at South Park') AND trip.start_date = '8/29/2013' AND trip.end_date = '8/29/2013';
SELECT T.trip.bike_id  FROM (     SELECT T.trip.bike_id, MAX(T.trip.duration) as max_duration      FROM (         SELECT *         FROM trip          WHERE start_date = '8/29/2013' AND end_date = '8/29/2013'              AND end_station_name = 'California Ave Caltrain Station'              AND start_station_name = 'University and Emerson'     ) T.grouped_by_bike_id      GROUP BY T.grouped_by_bike_id.bike_id ) T.max_duration_rows  WHERE T.max_duration_rows.max_duration = (     SELECT MAX(T2.trip.duration)     FROM (         SELECT *         FROM trip          WHERE start_date = '8/29/2013' AND end_date = '8/29/2013'              AND end_station_name = 'California Ave Caltrain Station'              AND start_station_name = 'University and Emerson'     ) T2.grouped_all_bikes )
SELECT COUNT(*)  FROM station  WHERE city = 'San Francisco' AND dock_count >= 20;
SELECT date  FROM weather  WHERE max_temperature_f = (SELECT MAX(max_temperature_f) FROM weather);
SELECT max_dew_point_f  FROM weather  WHERE date = '2014-07-15' AND zip_code = '94301';
SELECT YEAR(date) as RainiestYear FROM weather WHERE events = 'Rain' GROUP BY YEAR(date) ORDER BY SUM(precipitation_inches) DESC LIMIT 1;
SELECT T3.duration, T3.bike_id  FROM weather AS T1  JOIN station AS T2 ON T1.zip_code = T2.zip_code  JOIN trip AS T3 ON T3.start_station_id = T2.id  WHERE T1.date = '10/20/2014' AND T2.lat = '37.789625' AND T2.long = '-122.400811'  ORDER BY T3.duration ASC  LIMIT 1;
SELECT      s1.dock_count,      s2.name AS return_station_name FROM      bike_share_1.trip t JOIN      bike_share_1.station s1 ON t.start_station_id = s1.id JOIN      bike_share_1.station s2 ON t.end_station_id = s2.id WHERE      t.start_station_name = 'South Van Ness at Market' AND      t.subscription_type = 'Subscriber' AND      t.start_date = '2013-12-01' ORDER BY      t.duration ASC LIMIT 1;
SELECT w.max_humidity  FROM weather w  JOIN trip t ON w.zip_code = t.start_station_zip_code AND w.date = t.start_date  JOIN station s ON s.name = t.start_station_name AND s.city = 'San Francisco'  WHERE s.name = 'Powell Street' AND t.bike_id = '496'  AND t.start_date = DATE('2013-08-29');
SELECT      DATE(t.start_date) AS borrow_day,     COUNT(*) AS total_bikes_borrowed FROM      trip t JOIN      station s ON t.start_station_id = s.id JOIN      weather w ON DATE(t.start_date) = DATE(w.date) AND s.city = 'San Francisco' AND w.zip_code = '94301' WHERE      DATE(t.start_date) BETWEEN '2014-11-01' AND '2014-11-30'     AND w.events = 'Fog'     AND t.subscription_type = 'Subscriber' GROUP BY      DATE(t.start_date);
SELECT      s.name,      s.installation_date  FROM      station AS s  JOIN      trip AS t ON s.id = t.start_station_id  WHERE      t.subscription_type = 'Customer'  GROUP BY      s.name,      s.installation_date  ORDER BY      COUNT(*) ASC  LIMIT 1;
SELECT s.name FROM station AS s JOIN status AS st ON s.id = st.station_id WHERE st.time = '11/3/2013' AND st.bikes_available = '0';
SELECT      AVG(T.trip.duration)  FROM      trip T  JOIN      station S  ON      T.start_station_id = S.id  WHERE      S.city = 'Palo Alto';
SELECT      s1.city AS start_city,     s2.city AS end_city FROM      trip t JOIN      station s1 ON t.start_station_id = s1.id JOIN      station s2 ON t.end_station_id = s2.id WHERE      t.duration = (SELECT MAX(duration) FROM trip) ORDER BY      t.duration DESC LIMIT 1;
SELECT station.name, station.installation_date, station.city  FROM station  WHERE station.installation_date BETWEEN '8/5/2013' AND '12/31/2013';
SELECT      AVG(T.duration) AS average_duration FROM      trips T WHERE      T.start_station_name = 'Adobe on Almaden' AND       T.end_station_name = 'Ryland Park';
SELECT s.name, s.lat, s.long  FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available = 0;
SELECT t1.id, s1.lat, s1.long  FROM trip AS t1  JOIN station AS s1 ON t1.start_station_id = s1.id  JOIN station AS s2 ON t1.end_station_id = s2.id  WHERE t1.start_station_name = t1.end_station_name;
SELECT      SUM(s.dock_count) - s.bikes_available  FROM      station s  JOIN      status st ON s.id = st.station_id  WHERE      s.name = 'San Jose Diridon Caltrain Station' AND      st.time = '2013/08/29 06:14:01'
SELECT t.id FROM trip t JOIN status s ON t.bike_id = s.station_id JOIN weather w ON t.start_date = w.date WHERE s.bikes_available > 0  AND s.docks_available > 0  AND t.subscription_type = 'Subscriber' AND w.mean_temperature_f > 62;
SELECT      w.max_gust_speed_mph,      wc.cloud_cover  FROM      trip t  JOIN      station s1 ON t.start_station_id = s1.id  JOIN      station s2 ON t.end_station_id = s2.id  JOIN      weather w ON s2.city = 'San Jose' AND w.date = t.start_date  WHERE      t.bike_id = 10  AND      t.subscription_type = 'Customer'  AND      t.duration = 386  AND      s1.name = 'MLK Library'  AND      s2.name = 'San Salvador at 1st';
SELECT COUNT(*)  FROM trip  WHERE subscription_type = 'Subscriber'  AND duration < 490  AND start_station_name = '2nd at Folsom'  AND end_station_name = 'Civic Center BART (7th at Market)'  AND min_visibility_miles = 4;
SELECT COUNT(status.docks_available) FROM status JOIN trip ON status.station_id = trip.start_station_id WHERE trip.id = 912900;
SELECT T1.id  FROM `trip` AS T1  JOIN `weather` AS T2  ON T2.zip_code = T1.zip_code AND T2.date = T1.end_date  WHERE T2.min_temperature_f < 45
SELECT      MIN(t.duration) AS shortest_duration,     (AVG(t.duration) - MIN(t.duration)) AS duration_shorter_than_avg,     w.min_temperature_f,     MAX(w.max_gust_speed_mph) AS max_gust_speed,     w.events FROM      trip t JOIN      station s1 ON t.start_station_id = s1.id JOIN      station s2 ON t.end_station_id = s2.id JOIN      weather w ON YEAR(t.start_date) = 2014 AND MONTH(t.start_date) = MONTH(STR_TO_DATE('1/1/2014', '%m/%d/%Y')) AND DAY(t.start_date) = DAY(STR_TO_DATE('1/1/2014', '%m/%d/%Y')) + ROW_NUMBER() OVER (ORDER BY s2.name ASC) - 1 WHERE      s1.name = '2nd at Folsom' AND      s2.name = '5th at Howard' AND      t.subscription_type = 'Subscriber' AND      t.start_date >= '2014-01-01 00:00:00' AND      t.end_date <= '2014-12-31 11:59:59';
SELECT AVG(duration)  FROM trip  WHERE start_station_name = 'Steuart at Market'  AND end_station_name = 'Embarcadero at Sansome'  AND start_date = '7/1/2014 0:00'  AND end_date = '7/31/2014 12:59';
SELECT      AVG(CASE WHEN date BETWEEN '2015-05-01' AND '2015-05-31' THEN max_temperature_f ELSE NULL END) AS avg_max_temp,     AVG(CASE WHEN date BETWEEN '2015-05-01' AND '2015-05-31' THEN min_temperature_f ELSE NULL END) AS avg_min_temp FROM weather WHERE mean_humidity BETWEEN 65 AND 75;
SELECT      (SUM(CASE WHEN t.subscription_type = 'Subscriber' THEN 1 ELSE 0 END) - SUM(CASE WHEN t.subscription_type = 'Customer' THEN 1 ELSE 0 END)) as difference FROM      trip t WHERE      t.start_date BETWEEN '2013-06-01 00:00:00' AND '2013-06-31 12:59:59';
SELECT DISTINCT t2.date, t2.bike_id  FROM weather AS t1  JOIN trip AS t2 ON t1.date = t2.start_date  WHERE t1.year(date) = 2013 AND t1.events = 'Fog-Rain';
SELECT      w.mean_visibility_miles,      w.mean_wind_speed_mph,      w.events,      s.lat,      s.long,      ts.start_station_name,      ts.end_station_name FROM      weather w JOIN      trip t ON w.date = DATE_SUB(t.start_date, INTERVAL 1 DAY) JOIN      status s ON t.start_station_id = s.station_id AND w.date = s.time JOIN      station ts ON t.start_station_id = ts.id WHERE      w.events = 'fog' AND      t.duration = (         SELECT              MAX(dur)          FROM              (SELECT MAX(duration) as dur FROM trip WHERE DATE_SUB(start_date, INTERVAL 1 DAY) = w.date)     )
SELECT weather.date FROM weather JOIN trip ON weather.zip_code = trip.zip_code WHERE trip.start_station_name = 'Market at 10th' AND trip.end_station_name = 'South Van Ness at Market' AND trip.start_date BETWEEN '2013-08-01 00:00:00' AND '2013-08-31 12:59:59' AND weather.min_temperature_f = (SELECT MIN(min_temperature_f) FROM weather WHERE date BETWEEN '2013-08-01' AND '2013-08-31');
SELECT      start_station_name,      end_station_name,      duration  FROM      trip  JOIN      weather ON trip.zip_code = weather.zip_code  WHERE      weather.events = 'rain'  ORDER BY      duration DESC  LIMIT 1;
SELECT      AVG(t.duration) AS avg_ride_duration FROM      bike_share_1.trip t JOIN      bike_share_1.weather w ON t.start_date = w.date WHERE      w.events = 'rain' AND w.precipitation_inches > 0.8;
SELECT      s.name,      s.city  FROM      station s  JOIN      trip t ON s.id = t.start_station_id  WHERE      t.duration > (SELECT AVG(duration) FROM trip)  GROUP BY      s.name, s.city;
SELECT COUNT(*)  FROM station  WHERE city = 'San Francisco' AND installation_date LIKE '%2014%'
SELECT COUNT(*)  FROM trip  WHERE start_date LIKE '%2006%' AND end_station_name IN (     SELECT name      FROM station      WHERE city = 'Mountain View' )
SELECT `trip.id`  FROM `trip`  JOIN `station` ON `trip.start_station_id` = `station.id`  WHERE `station.name` = 'Redwood City'  ORDER BY `trip.duration` DESC  LIMIT 1;
SELECT DISTINCT t.bike_id  FROM trip AS t  JOIN station AS s ON t.start_station_id = s.id  WHERE YEAR(s.installation_date) = 2013;
SELECT COUNT(*)  FROM trip  WHERE subscription_type = 'Subscriber' AND end_station_city = 'San Jose';
SELECT t1.id, t1.duration, s1.name AS start_station_name FROM trip AS t1 JOIN station AS s1 ON t1.start_station_id = s1.id WHERE t1.duration = (SELECT MIN(duration) FROM trip) AND s1.dock_count = 15;
SELECT YEAR(`start_date`)  FROM `trip`  JOIN `station` ON `trip`.start_station_id = `station`.id  WHERE `station`.city = 'San Francisco'  GROUP BY YEAR(`start_date`)  ORDER BY COUNT(`id`) DESC  LIMIT 1;
SELECT      (COUNT(CASE WHEN T1.duration > 800 THEN 1 END) / COUNT(T1.duration)) * 100 AS percentage FROM      trip AS T1 JOIN      station AS T2 ON T1.start_station_id = T2.id WHERE      T2.city = 'San Jose';
SELECT COUNT(*)  FROM trip  WHERE start_date LIKE '%2013%' AND duration > 1000;
SELECT      AVG(t.duration) AS average_duration FROM      trip t JOIN      station s ON t.start_station_id = s.id WHERE      s.name = 'South Van Ness at Market' AND YEAR(t.start_date) = 2015;
SELECT COUNT(*)  FROM trip  WHERE start_station_id = end_station_id;
SELECT T3.id  FROM trip AS T3  JOIN weather AS T2 ON T3.start_date = T2.date  WHERE T2.max_temperature_f = (SELECT MAX(max_temperature_f) FROM weather);
SELECT t1.id, t1.duration, t1.start_date, t1.end_date, w.events FROM trip AS t1 JOIN station AS s1 ON t1.start_station_id = s1.id JOIN weather AS w ON w.date = t1.end_date WHERE s1.city = 'Mountain View' AND s1.name = 'City Hall' AND w.events = 'rain';
SELECT      AVG(t.duration) AS average_duration FROM      trip t JOIN      weather w ON t.end_date = w.date WHERE      w.events = 'fog';
SELECT MAX(trip.duration)  FROM trip  JOIN status ON trip.start_station_id = status.station_id  JOIN weather ON weather.date = status.time AND weather.max_wind_speed_mph = 30;
SELECT      AVG(weather.mean_temperature_f)  FROM      weather  JOIN      trip ON weather.date = DATE_FORMAT(trip.start_date, '%Y-%m-%d')  JOIN      station ON station.name = 'Market at 4th' AND station.id = trip.start_station_id  WHERE      YEAR(trip.start_date) = 2013;
SELECT weather.mean_humidity FROM trip JOIN weather ON weather.date = trip.start_date OR weather.date = trip.end_date WHERE trip.id = 4275;
SELECT      (COUNT(CASE WHEN events = 'Rain' AND subscription_type = 'Customer' THEN 1 ELSE NULL END)      / COUNT(*) * 100) AS percentage_of_rainy_customer_trips_in_2015 FROM      trip WHERE      DATE_FORMAT(end_date, '%Y') = '2015'
SELECT COUNT(*)  FROM station  WHERE city = 'San Jose' AND YEAR(installation_date) > 2013;
SELECT mean_temperature_f  FROM weather  WHERE date = '8/29/2013' AND zip_code = 94107;
SELECT      (MAX(`max_temperature_f`) - MIN(`min_temperature_f`)) as `temperature_difference` FROM      `weather` WHERE      `date` = '2013-08-29'     AND `zip_code` = 94107;
SELECT COUNT(*)  FROM status  JOIN station ON status.station_id = station.id  WHERE station.name = 'San Jose Diridon Caltrain Station' AND status.time = '2013-08-29 12:06:01'
SELECT `city`  FROM `station`  WHERE `id` = (SELECT `start_station_id` FROM `trip` WHERE `id` = 4069);
SELECT COUNT(*)  FROM (   SELECT DISTINCT t1.id    FROM trip t1    JOIN weather t2 ON t1.start_date = t2.date    WHERE t2.max_temperature_f > 70 AND t1.zip_code = 94107 AND t1.start_date LIKE '9%' AND t1.start_date LIKE '%2013' ) subquery;
SELECT DISTINCT start_station_name  FROM trip  JOIN weather ON trip.zip_code = weather.zip_code AND date = weather.date  WHERE max_humidity > 80 AND date LIKE '%2013' AND zip_code = '94107';
SELECT COUNT(*)  FROM trip  WHERE subscription_type = 'Subscriber'  AND start_date LIKE '8%' AND start_date LIKE '%2013%' AND start_station_id IN (     SELECT s.id      FROM station s      WHERE s.dock_count > 20 )
SELECT s.lat, s.long  FROM station s  JOIN trip t ON s.id = t.start_station_id  WHERE t.duration = (SELECT MAX(duration) FROM trip)
SELECT COUNT(*)  FROM status  WHERE station_id = (SELECT end_station_id FROM trip WHERE id = 4069);
SELECT COUNT(*)  FROM trip  JOIN weather ON trip.start_date = weather.date  WHERE DATE(weather.date) LIKE '%2013%'  AND weather.events = 'fog'  AND trip.start_station_name = '2nd at Townsend';
SELECT MAX(trip.duration)  FROM trip  JOIN station ON trip.start_station_id = station.id  JOIN weather ON date_format(trip.start_date, '%Y') = '2013' AND station.zip_code = weather.zip_code AND weather.events = 'fog';
SELECT installation_date  FROM station  WHERE id = (SELECT start_station_id FROM trip WHERE id = 4069);
SELECT COUNT(*)  FROM trip  WHERE start_station_city = 'San Francisco'  AND subscription_type = 'Subscriber';
SELECT COUNT(*)  FROM trip  WHERE start_station_name = '2nd at Folsom'  AND date LIKE '%2014-%'  AND (SELECT max_temperature_f FROM weather WHERE date = (SELECT start_date FROM trip WHERE start_station_name = '2nd at Folsom' AND date LIKE '%2014-%') LIMIT 1) = (SELECT max(max_temperature_f) FROM weather WHERE date LIKE '%2014-%');
SELECT      AVG(T.trip.duration) AS avg_trip_duration FROM      bike_share_1.trip AS T JOIN      bike_share_1.weather AS W ON T.start_date = W.date WHERE      W.max_temperature_f = (SELECT MAX(max_temperature_f) FROM bike_share_1.weather WHERE date LIKE '%2014%') AND     T.start_date LIKE '%2014%' ;
SELECT DISTINCT end_station_name  FROM trip  WHERE start_station_name = '2nd at South Park';
SELECT COUNT(*)  FROM weather  WHERE zip_code = 94041 AND events = 'rain';
SELECT      MAX(s.dock_count)  FROM      station s  WHERE      s.city = 'Redwood City' AND YEAR(s.installation_date) < 2014;
SELECT      TRUNCATE(MAX(duration) / 86400, 2) AS longest_trip_days FROM      trip;
SELECT      (MAX_temperature_f - 32) / 1.8 AS Celsius1,     (MEAN_temperature_f - 32) / 1.8 AS Celsius2,     (MIN_temperature_f - 32) / 1.8 AS Celcius3 FROM      bike_share_1.weather JOIN      bike_share_1.station ON bike_share_1.weather.date = bike_share_1.station.installation_date WHERE      bike_share_1.station.city = 'San Francisco' AND      DATE_FORMAT(bike_share_1.weather.date, '%m/%d/%Y') BETWEEN '08/01/2013' AND '08/31/2013';
SELECT      COUNT(CASE WHEN subscription_type = 'Subscriber' THEN id END) AS subscriber_count,     COUNT(CASE WHEN subscription_type = 'Customer' THEN id END) AS customer_count,     (COUNT(CASE WHEN subscription_type = 'Subscriber' THEN id END) / COUNT(CASE WHEN subscription_type = 'Customer' THEN id END)) AS subscriber_ratio FROM      trip WHERE      start_station_name = '2nd at South Park'      AND end_station_name = '2nd at South Park';
SELECT COUNT(*)  FROM station  WHERE zip_code = 94107 AND city = 'San Francisco';
SELECT s.name FROM station AS s JOIN weather AS w ON s.id = w.station_id WHERE (w.mean_temperature_f - 32) / 1.8 = 20 AND YEAR(w.date) = 2014;
SELECT COUNT(*)  FROM trip  JOIN station ON trip.start_station_id = station.id  JOIN status ON station.id = status.station_id  WHERE station.city = 'San Jose'  AND SUBSTRING(start_date, 1, 7) = '2013-08' ;
SELECT DISTINCT s1.city, s2.city  FROM trip t JOIN station s1 ON t.start_station_id = s1.id JOIN station s2 ON t.end_station_id = s2.id WHERE s1.city <> s2.city AND t.start_date LIKE '%2014%'
SELECT      SUM(trip.duration) / 3600 AS hour FROM      trip JOIN      station ON trip.start_station_id = station.id JOIN      station AS destination ON trip.end_station_id = destination.id WHERE      trip.bike_id = 16 AND      station.city <> destination.city;
SELECT      (COUNT(CASE WHEN t.subscription_type = 'customer' THEN 1 END)       / CAST(COUNT(CASE WHEN t.subscription_type = 'subscriber' THEN 1 END) AS REAL))     * 1.0 AS ratio FROM      trip AS t JOIN      station AS s ON t.start_station_id = s.id WHERE      s.city = 'Mountain View';
SELECT      SUM(trip.duration) / 3600 AS total_trip_duration_in_hours  FROM      bike_share_1.trip  JOIN      bike_share_1.station ON trip.start_station_id = station.id  JOIN      bike_share_1.status ON station.id = status.station_id  WHERE      station.city = 'Palo Alto'
SELECT      b.bike_id,     COUNT(t.id) AS total_trips,     SUM(CASE WHEN s.city = e.city THEN CAST(t.duration AS REAL) / 3600 ELSE NULL END) AS total_duration_in_hours FROM      trip t JOIN      station s ON t.start_station_id = s.id JOIN      station e ON t.end_station_id = e.id JOIN      bike_share_1.station b ON t.bike_id = b.id WHERE      s.city = e.city GROUP BY      b.bike_id ORDER BY      total_trips ASC,     total_duration_in_hours DESC LIMIT 1;
SELECT COUNT(*)  FROM trip  WHERE subscription_type = 'subscriber' AND start_station_name = 'Market at 4th';
SELECT name  FROM station  WHERE city = 'Mountain View' AND installation_date = '12/31/2013';
SELECT city, SUM(dock_count)  FROM station  WHERE name = 'Townsend at 7th Station';
SELECT SUM(s.dock_count) AS total_capacity, COUNT(DISTINCT t.id) AS subscriber_users_started FROM station s JOIN status st ON s.id = st.station_id JOIN trip t ON st.station_id = t.start_station_id WHERE s.name = 'Evelyn Park and Ride' AND t.subscription_type = 'subscriber';
SELECT COUNT(*) AS num_subscribers, MAX(status.max_temperature_f) AS max_temp FROM trip  JOIN station ON trip.start_station_id = station.id JOIN weather ON weather.zip_code = station.city WHERE trip.zip_code = 94301;
SELECT      (COUNT(CASE WHEN t.subscription_type = 'customer' THEN 1 END)       / COUNT(CASE WHEN t.subscription_type = 'subscriber' THEN 1 END)) * 100 AS percentage_ratio FROM      trip t JOIN      station s ON t.start_station_id = s.id WHERE      s.city = 'San Francisco' ;
SELECT AVG(trip.duration) AS average_duration, station.lat, station.long FROM trip JOIN station ON trip.start_station_id = station.id WHERE trip.start_station_name = 'Santa Clara at Almaden';
SELECT      MIN(t.duration) AS shortest_trip_duration,     s.lat,     s.long,     w.max_wind_Speed_mph AS max_wind_speed_at_date FROM      trip AS t JOIN      station AS s ON t.start_station_id = s.id JOIN      weather AS w ON DATE(w.date) = DATE(t.start_date) WHERE      s.name = 'Franklin at Maple';
SELECT      SUM(s.bikes_available) AS bikes_borrowed,     st.lat,      st.long FROM      trip t JOIN      station st ON t.start_station_id = st.id JOIN      status s ON st.id = s.station_id WHERE      DATE_FORMAT(t.start_date, '%m/%d/%Y %H:%M:%S') = '10/20/2013 08:11:01 AM' AND      st.name = 'San Jose Diridon Caltrain Station';
SELECT T3.city, T3.installation_date  FROM trip AS T1  JOIN station AS T3 ON T3.id = T1.start_station_id  WHERE T1.id = 585842;
SELECT COUNT(*) AS station_count, COUNT(*) AS user_count FROM station WHERE installation_date = '8/16/2013' AND EXISTS (     SELECT 1 FROM trip WHERE trip.start_station_id = station.id AND subscription_type = 'customer' );
SELECT      s.name AS ending_station,      s.lat,      s.long FROM      bike_share_1.trip t JOIN      bike_share_1.station s ON t.end_station_name = s.name AND t.end_station_id = s.id WHERE      t.start_station_name = 'Market at 4th' AND      t.start_date = DATE('2013-08-29') AND      TIMESTAMP(t.start_date) >= TIME('12:45:00') AND      TIMESTAMP(t.start_date) < TIME('12:46:00')
SELECT COUNT(T.trip.id) AS subscriber_count, S.dock_count  FROM trip T  JOIN station S ON T.end_station_id = S.id  WHERE T.subscription_type = 'subscribers' AND T.end_station_name = 'MLK Library';
SELECT AVG(weather.min_temperature_f) AS avg_coldest_temperature, station.name, station.lat, station.long FROM weather JOIN station ON station.zip_code = weather.zip_code WHERE station.zip_code = 94301;
SELECT      AVG(T.trip.duration) AS avg_duration,     MIN(S.installation_date) AS first_installation_date FROM      bike_share_1.trip AS T JOIN      bike_share_1.station AS S ON T.start_station_id = S.id AND T.end_station_id = S.id WHERE      T.subscription_type = 'subscription' AND      T.start_station_name = 'Mountain View City Hall' AND      T.end_station_name = 'Mountain View City Hall';
SELECT description  FROM film_text  WHERE title = 'ACADEMY DINOSAUR';
SELECT COUNT(*)  FROM film  WHERE rental_duration > 6;
SELECT title  FROM film  WHERE release_year = 2006 AND rental_rate = 2.99;
SELECT title  FROM film  WHERE length = (SELECT MAX(length) FROM film);
SELECT title  FROM film  WHERE title = 'ACE GOLDFINGER' OR title = 'ACADEMY DINOSAUR'  ORDER BY replacement_cost DESC  LIMIT 1;
SELECT COUNT(*)  FROM film  WHERE release_year = 2006 AND rating = 'NC-17';
SELECT COUNT(*)  FROM film  WHERE rental_rate = 2.99 AND special_features LIKE '%Deleted Scenes%';
SELECT title  FROM film  WHERE (SELECT COUNT(*) FROM film_special_features WHERE film.film_id = film_special_features.film_id) > 2;
SELECT email  FROM staff  WHERE first_name = 'Jon' AND last_name = 'Stephens';
SELECT first_name, last_name  FROM staff  WHERE active = 1;
SELECT release_year  FROM film  WHERE replacement_cost = (SELECT MAX(replacement_cost) FROM film);
SELECT title  FROM film  ORDER BY replacement_cost DESC  LIMIT 3;
SELECT language.name  FROM film  JOIN film_language ON film.film_id = film_language.film_id  JOIN language ON film_language.language_id = language.language_id  WHERE film.title = 'ACADEMY DINOSAUR';
SELECT COUNT(*)  FROM film  JOIN language ON film.language_id = language.language_id  WHERE language.name = 'English';
SELECT title  FROM film  JOIN film_actor ON film.film_id = film_actor.film_id  JOIN actor ON film_actor.actor_id = actor.actor_id  WHERE actor.first_name = 'PENELOPE' AND actor.last_name = 'GUINESS';
SELECT COUNT(DISTINCT actor_id)  FROM film_actor  WHERE film_id IN (     SELECT film_id      FROM film      WHERE title = 'ACADEMY DINOSAUR' );
SELECT T1.first_name, T1.last_name  FROM actor AS T1  JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id  JOIN film AS T3 ON T2.film_id = T3.film_id  WHERE T3.title = 'ACADEMY DINOSAUR';
SELECT COUNT(*)  FROM film  JOIN film_actor ON film.film_id = film_actor.film_id  JOIN actor ON film_actor.actor_id = actor.actor_id  WHERE actor.first_name = 'PENELOPE' AND actor.last_name = 'GUINESS' AND film.release_year = 2006;
SELECT title  FROM film  JOIN film_actor ON film.film_id = film_actor.film_id  JOIN actor ON film_actor.actor_id = actor.actor_id  WHERE actor.first_name = 'PENELOPE' AND actor.last_name = 'GUINESS'  ORDER BY replacement_cost DESC  LIMIT 1;
SELECT T1.first_name, T1.last_name  FROM actor AS T1  JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id  JOIN film AS T3 ON T2.film_id = T3.film_id  WHERE T3.replacement_cost = (SELECT MAX(replacement_cost) FROM film)
SELECT COUNT(*)  FROM film  JOIN film_text ON film.film_id = film_text.film_id  JOIN film_actor ON film.film_id = film_actor.film_id  JOIN actor ON film_actor.actor_id = actor.actor_id  WHERE actor.first_name = 'PENELOPE'  AND actor.last_name = 'GUINESS'  AND film_text.description LIKE '%English%'
SELECT f.title  FROM film f  JOIN film_actor fa ON f.film_id = fa.film_id  JOIN actor a ON fa.actor_id = a.actor_id  WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS'  ORDER BY f.rental_duration DESC  LIMIT 1;
SELECT title  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  WHERE category.name = 'Horror';
SELECT COUNT(film.film_id)  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  WHERE category.name = 'Horror';
SELECT title  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  WHERE category.name = 'Horror' AND film.rental_rate = 2.99;
SELECT COUNT(T2.rental_id)  FROM customer AS T1  JOIN rental AS T2 ON T1.customer_id = T2.customer_id  WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ';
SELECT COUNT(*)  FROM film  JOIN inventory ON film.film_id = inventory.film_id  JOIN rental ON inventory.inventory_id = rental.inventory_id  JOIN customer ON rental.customer_id = customer.customer_id  WHERE customer.first_name = 'RUTH'  AND customer.last_name = 'MARTINEZ'  AND film.release_year = 2006;
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'RUTH'   AND c.last_name = 'MARTINEZ'   AND f.replacement_cost = (SELECT MAX(f2.replacement_cost) FROM film f2)
SELECT c.first_name, c.last_name  FROM customer c  JOIN rental r ON c.customer_id = r.customer_id  JOIN inventory i ON r.inventory_id = i.inventory_id  WHERE i.film_id IN (     SELECT f.film_id      FROM film f      WHERE f.replacement_cost = (SELECT MAX(replacement_cost) FROM film) );
SELECT COUNT(*)  FROM film  JOIN inventory ON film.film_id = inventory.film_id  JOIN rental ON inventory.inventory_id = rental.inventory_id  JOIN customer ON rental.customer_id = customer.customer_id  WHERE customer.first_name = 'RUTH' AND customer.last_name = 'MARTINEZ' AND YEAR(rental.return_date) = 2005 AND MONTH(rental.return_date) = 8;
SELECT c.first_name, c.last_name  FROM customer c  JOIN rental r ON c.customer_id = r.customer_id  GROUP BY c.customer_id, c.first_name, c.last_name  ORDER BY COUNT(r.rental_id) DESC  LIMIT 1;
SELECT COUNT(*)  FROM customer  WHERE active = 1  AND customer_id IN (     SELECT customer_id      FROM rental      JOIN inventory ON rental.inventory_id = inventory.inventory_id      JOIN film ON inventory.film_id = film.film_id      WHERE film.title = 'ACADEMY DINOSAUR' );
SELECT title  FROM film  WHERE title = (     SELECT f.title      FROM film f      JOIN inventory i ON f.film_id = i.film_id      GROUP BY f.title      ORDER BY COUNT(i.inventory_id) DESC      LIMIT 1 );
SELECT      c1.first_name || ' ' || c1.last_name AS CustomerName1,     COUNT(*) AS MovieRentals1 FROM      customer AS c1 JOIN      rental AS r1 ON c1.customer_id = r1.customer_id WHERE      (c1.first_name || ' ' || c1.last_name) IN ('RUTH MARTINEZ', 'LINDA WILLIAMS') UNION ALL SELECT      c2.first_name || ' ' || c2.last_name AS CustomerName2,     COUNT(*) AS MovieRentals2 FROM      customer AS c2 JOIN      rental AS r2 ON c2.customer_id = r2.customer_id WHERE      (c2.first_name || ' ' || c2.last_name) IN ('RUTH MARTINEZ', 'LINDA WILLIAMS') ORDER BY      MovieRentals1 DESC, MovieRentals2 DESC LIMIT 1;
SELECT f.title  FROM film f  JOIN film_actor fa ON f.film_id = fa.film_id  JOIN actor a ON fa.actor_id = a.actor_id  WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS'  ORDER BY f.rental_rate / f.rental_duration DESC  LIMIT 1;
SELECT AVG(T1.replacement_cost)  FROM film AS T1  JOIN film_category AS T2 ON T1.film_id = T2.film_id  JOIN category AS T3 ON T2.category_id = T3.category_id  WHERE T3.name = 'Horror';
SELECT      (COUNT(CASE WHEN T4.name = 'Music' THEN 1 END)       OVER ()      / COUNT(*) OVER ()) * 100 AS music_percentage FROM      customer C JOIN      staff S ON C.store_id = S.store_id JOIN      payment P ON C.customer_id = P.customer_id JOIN      rental R ON P.rental_id = R.rental_id JOIN      inventory I ON R.inventory_id = I.inventory_id JOIN      film F ON I.film_id = F.film_id CROSS JOIN      (SELECT customer_id FROM customer WHERE first_name = 'RUTH' AND last_name = 'MARTINEZ') AS RuthMartinez WHERE      C.customer_id = RuthMartinez.customer_id;
SELECT AVG(T2.length)  FROM film AS T1  JOIN film_actor AS T3 ON T1.film_id = T3.film_id  JOIN actor AS T4 ON T3.actor_id = T4.actor_id  WHERE T4.first_name = 'PENELOPE' AND T4.last_name = 'GUINESS';
SELECT `email`  FROM `customer`  WHERE `first_name` = 'Diane' AND `last_name` = 'Collins';
SELECT COUNT(*)  FROM customer  WHERE active = 0;
SELECT first_name, last_name  FROM customer  WHERE email = 'JEREMY.HURTADO@sakilacustomer.org';
SELECT postal_code  FROM address  WHERE address_id = 65;
SELECT COUNT(*)  FROM address  WHERE district = 'Nordrhein-Westfalen';
SELECT phone  FROM address  WHERE address_id = 72;
SELECT COUNT(film_id)  FROM film  WHERE length = 178;
SELECT special_features  FROM film  WHERE title = 'UPRISING UPTOWN';
SELECT `description`  FROM `film_text`  WHERE `title` = 'ARTIST COLDBLOODED';
SELECT      address,      address2,      district FROM      store WHERE      store_id = 2;
SELECT      c.country FROM      country AS co JOIN      city AS ct ON ct.country_id = co.country_id JOIN      address AS ad ON ad.city_id = ct.city_id WHERE      ct.city = 'Clarksville';
SELECT COUNT(T3.actor_id)  FROM film AS T1  JOIN film_category AS T2 ON T1.film_id = T2.film_id  JOIN category AS T4 ON T2.category_id = T4.category_id  JOIN film_actor AS T3 ON T1.film_id = T3.film_id  WHERE T4.name = 'Drama' AND T1.release_year = 2006 AND T1.length = 98;
SELECT f.title, c.name  FROM film AS f  JOIN film_actor AS fa ON f.film_id = fa.film_id  JOIN actor AS a ON fa.actor_id = a.actor_id  JOIN film_category AS fc ON f.film_id = fc.film_id  JOIN category AS c ON fc.category_id = c.category_id  WHERE a.first_name = 'Dan' AND a.last_name = 'Harris'  AND f.length = 77 AND f.replacement_cost = 9.99  AND f.rating IS NOT NULL;
SELECT COUNT(*)  FROM film_actor fa  JOIN actor a ON fa.actor_id = a.actor_id  WHERE a.first_name = 'Daryl' AND a.last_name = 'Wahlberg';
SELECT `rental.return_date`  FROM `rental`  JOIN `customer` ON `rental.customer_id` = `customer.customer_id`  WHERE `customer.first_name` = 'Sherri' AND `customer.last_name` = 'Rhodes'  AND `rental.rental_date` = '2005-07-28 12:27:27';
SELECT first_name, last_name  FROM staff  JOIN store ON staff.staff_id = store.manager_staff_id  WHERE store.store_id = 1;
SELECT address, address2, district  FROM store  WHERE store_id = 1;
SELECT address, address2, district  FROM staff  JOIN address ON staff.address_id = address.address_id  WHERE first_name = 'Jon' AND last_name = 'Stephens';
SELECT COUNT(*)  FROM address  JOIN city ON address.city_id = city.city_id  WHERE city.city = 'Woodridge';
SELECT COUNT(*)  FROM film  JOIN language ON film.language_id = language.language_id  WHERE language.name = 'English';
SELECT address  FROM customer  JOIN address ON customer.address_id = address.address_id  WHERE last_name = 'Morris' AND first_name = 'Heather';
SELECT `email`  FROM `customer` WHERE `address` = '1411 Lillydale Drive';
SELECT amount  FROM payment  JOIN rental ON payment.rental_id = rental.rental_id  WHERE customer_id = 297 AND rental.rental_date = '2005-07-28 12:27:27';
SELECT T3.name  FROM film AS T1  JOIN film_category AS T2 ON T1.film_id = T2.film_id  JOIN category AS T3 ON T2.category_id = T3.category_id  WHERE T1.title = 'WORKING MICROCOSMOS';
SELECT COUNT(film_id)  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  WHERE category.name = 'Documentary';
SELECT name  FROM category  WHERE film_id IN (     SELECT film_id      FROM film_category      GROUP BY film_id      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT title  FROM film  JOIN inventory ON film.film_id = inventory.film_id  WHERE inventory.inventory_id = '3479';
SELECT      ((SUM(amount) * 2 WHERE store_id = 2) - (SUM(amount) WHERE store_id = 1)) / SUM(amount) * 2 WHERE store_id = 1) * 100 AS percentage_more FROM payment;
SELECT      (COUNT(*) FILTER (WHERE country = 'India') / COUNT(*)) AS indian_cities_ratio,     (COUNT(*) FILTER (WHERE country = 'Italy')       AS italian_cities_ratio   FROM      country;
SELECT      (COUNT(CASE WHEN T2.first_name = 'GINA' AND T2.last_name = 'DEGENERES' THEN T1.film_id ELSE NULL END)) AS Gina_Film_Count,     (COUNT(CASE WHEN T2.first_name = 'PENELOPE' AND T2.last_name = 'GUINESS' THEN T1.film_id ELSE NULL END)) AS Penelope_Film_Count,     CAST((COUNT(CASE WHEN T2.first_name = 'GINA' AND T2.last_name = 'DEGENERES' THEN T1.film_id ELSE NULL END)) AS REAL) / COUNT(CASE WHEN T2.first_name = 'PENELOPE' AND T2.last_name = 'GUINESS' THEN T1.film_id ELSE NULL END) AS Ratio FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id
SELECT COUNT(*)  FROM film  WHERE release_year = 2006 AND rating = 'R';
SELECT COUNT(*)  FROM film_actor  WHERE film_id = 508;
SELECT special_features  FROM film  WHERE title = 'SMOOCHY CONTROL';
SELECT COUNT(DISTINCT customer_id)  FROM payment  WHERE amount > 10 AND DATE(payment_date) BETWEEN '2005-08-01' AND '2005-08-31';
SELECT title  FROM film  WHERE length > 180;
SELECT SUM(amount)  FROM payment  WHERE rental_id BETWEEN 1 AND 10;
SELECT first_name, last_name  FROM staff  WHERE active = 1;
SELECT first_name, last_name  FROM staff  WHERE store_id = 2 AND active = 1;
SELECT COUNT(rental_id)  FROM rental  WHERE return_date = '2005-05-27';
SELECT title  FROM film  JOIN film_actor ON film.film_id = film_actor.film_id  JOIN actor ON film_actor.actor_id = actor.actor_id  JOIN customer ON actor.customer_id = customer.customer_id  WHERE customer.first_name = 'Laura' AND customer.last_name = 'Brody';
SELECT title  FROM film  JOIN inventory ON film.film_id = inventory.film_id  JOIN store ON inventory.store_id = store.store_id  WHERE store.store_id = 2  GROUP BY title  HAVING COUNT(film.film_id) = 1;
SELECT c.first_name, c.last_name  FROM customer c  JOIN rental r ON c.customer_id = r.customer_id  WHERE DATEDIFF(r.return_date, r.rental_date) = 7;
SELECT COUNT(film_id)  FROM film_category  JOIN category ON film_category.category_id = category.category_id  WHERE category.name = 'Horror';
SELECT title  FROM film  JOIN inventory ON film.film_id = inventory.film_id  JOIN rental ON inventory.inventory_id = rental.inventory_id  GROUP BY title  ORDER BY COUNT(rental.rental_id) DESC  LIMIT 1;
SELECT      f.title,      fc.special_features  FROM      film f  JOIN      film_category fc ON f.film_id = fc.film_id  JOIN      category c ON fc.category_id = c.category_id  WHERE      c.name = 'science fiction'  GROUP BY      fc.special_features  ORDER BY      COUNT(fc.special_features) DESC  LIMIT 1;
SELECT a.first_name, a.last_name  FROM actor a  JOIN film_actor fa ON a.actor_id = fa.actor_id  GROUP BY a.actor_id  HAVING COUNT(fa.film_id) = (SELECT MAX(count_f) FROM      (SELECT COUNT(film_id) as count_f FROM film_actor GROUP BY actor_id) subquery)
SELECT COUNT(film_id)  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  WHERE film.rental_duration = 7 AND category.name = 'Comedy';
SELECT s.first_name, s.last_name  FROM staff s  JOIN store st ON s.staff_id = st.manager_staff_id  JOIN customer c ON c.store_id = st.store_id  WHERE c.active = 0  GROUP BY c.store_id  ORDER BY COUNT(c.customer_id) DESC  LIMIT 1;
SELECT      MAX(rental_rate / rental_duration) AS avg_price_per_day FROM      film JOIN      film_category ON film.film_id = film_category.film_id JOIN      category ON film_category.category_id = category.category_id WHERE      category.name = 'Children'
SELECT      address,      address2,      district FROM      store JOIN      staff ON store.manager_staff_id = staff.staff_id JOIN      address ON address.address_id = staff.address_id WHERE      store.store_id = 1;
SELECT COUNT(*)  FROM customer  JOIN city ON customer.city_id = city.city_id  WHERE city.city = 'Lethbridge';
SELECT COUNT(*)  FROM country  JOIN city ON country.country_id = city.country_id  WHERE country.country = 'United States';
SELECT first_name, last_name  FROM customer  JOIN address ON customer.address_id = address.address_id  JOIN city ON address.city_id = city.city_id  JOIN country ON city.country_id = country.country_id  WHERE country.country = 'India';
SELECT COUNT(film_id)  FROM film  JOIN film_text ON film.film_id = film_text.film_id  WHERE film_text.description LIKE '%Classics%' AND film.rental_rate < 1;
SELECT c.first_name, c.last_name  FROM customer c  JOIN rental r ON c.customer_id = r.customer_id  GROUP BY c.customer_id, c.first_name, c.last_name  ORDER BY COUNT(r.rental_id) DESC  LIMIT 1;
SELECT COUNT(T2.rental_id) AS rental_count  FROM film_text AS T1  JOIN film AS T3 ON T1.film_id = T3.film_id  JOIN inventory AS T4 ON T3.film_id = T4.film_id  JOIN rental AS T2 ON T4.inventory_id = T2.inventory_id  WHERE T1.title = 'BLANKET BEVERLY';
SELECT a.first_name, a.last_name  FROM actor a  JOIN film_actor fa ON a.actor_id = fa.actor_id  JOIN film f ON fa.film_id = f.film_id  JOIN film_category fc ON f.film_id = fc.film_id  JOIN category c ON fc.category_id = c.category_id  WHERE c.name = 'Restricted'  GROUP BY a.actor_id  ORDER BY COUNT(f.film_id) DESC  LIMIT 1;
SELECT      a.first_name,      a.last_name,      COUNT(ft.film_id) AS total_films,      COUNT(ft.film_id) / 5.0 AS avg_films_per_actor FROM      actor a JOIN      film_actor fa ON a.actor_id = fa actor_id JOIN      film ft ON fa.film_id = ft.film_id GROUP BY      a.actor_id, a.first_name, a.last_name ORDER BY      total_films DESC LIMIT 5;
SELECT actor_id FROM actor WHERE last_name = 'KILMER';
SELECT title  FROM film  WHERE replacement_cost = (SELECT MIN(replacement_cost) FROM film)  AND rating = 'G';
SELECT title, description, special_features  FROM film  WHERE length = (SELECT MAX(length) FROM film)  LIMIT 5;
SELECT COUNT(rental_id)  FROM rental  WHERE rental_date = '2005-05-26' AND return_date = '2005-05-30';
SELECT      c.customer_id,      AVG(p.amount) AS average_payment_per_customer FROM      customer c JOIN      payment p ON c.customer_id = p.customer_id GROUP BY      c.customer_id;
SELECT CONCAT(first_name, ' ', last_name) AS full_name, email  FROM staff  JOIN address ON staff.address_id = address.address_id  WHERE store_id = 2;
SELECT      (COUNT(CASE WHEN active = 0 THEN customer_id END) * 100.0 / COUNT(customer_id)) AS inactive_percent FROM      customer;
SELECT title, description  FROM film_text  WHERE film_id = 996;
SELECT SUM(amount)  FROM payment  WHERE payment_date LIKE '2005-08%';
SELECT title  FROM film  JOIN film_actor ON film.film_id = film_actor.film_id  JOIN actor ON film_actor.actor_id = actor.actor_id  WHERE actor.first_name = 'Emily' AND actor.last_name = 'Dee';
SELECT a.first_name, a.last_name  FROM actor a  JOIN film_actor fa ON a.actor_id = fa.actor_id  JOIN film f ON fa.film_id = f.film_id  WHERE f.title = 'CHOCOLATE DUCK';
SELECT COUNT(film.film_id)  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  WHERE category.name = 'Horror' AND film.rating = 'PG-13';
SELECT f.title, c.name  FROM film AS f  JOIN film_actor AS fa ON f.film_id = fa.film_id  JOIN actor AS a ON fa.actor_id = a.actor_id  JOIN film_category AS fc ON f.film_id = fc.film_id  JOIN category AS c ON fc.category_id = c.category_id  WHERE a.first_name = 'Judy' AND a.last_name = 'Dean';
SELECT title  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  WHERE category.name = 'Documentary'  LIMIT 5;
SELECT      l.name AS 'Language',     f.rental_cost / f.rental_duration AS 'Rental Cost Per Day' FROM      film f JOIN      film_text ft ON f.film_id = ft.film_id JOIN      language l ON f.language_id = l.language_id WHERE      ft.title = 'UNTOUCHABLES SUNRISE';
SELECT title  FROM film  JOIN inventory ON film.film_id = inventory.film_id  JOIN rental ON inventory.inventory_id = rental.inventory_id  WHERE rental_date = '2005-05-24%'
SELECT f.title  FROM film f  JOIN inventory i ON f.film_id = i.film_id  JOIN rental r ON i.inventory_id = r.inventory_id  JOIN customer c ON r.customer_id = c.customer_id  WHERE c.first_name = 'Brian'    AND c.last_name = 'Wyman'    AND YEAR(r.rental_date) = 2005    AND MONTH(r.rental_date) = 7;
SELECT T3.inventory_id, T2.first_name, T2.last_name FROM film_text AS T1 JOIN film_actor AS T3 ON T1.film_id = T3.film_id JOIN actor AS T2 ON T2.actor_id = T3.actor_id WHERE T1.title = 'STREETCAR INTENTIONS'
SELECT f.title, c.name  FROM film f  JOIN inventory i ON f.film_id = i.film_id  JOIN rental r ON i.inventory_id = r.inventory_id  JOIN customer cu ON r.customer_id = cu.customer_id  JOIN staff st ON r.staff_id = st.staff_id  JOIN film_category fc ON f.film_id = fc.film_id  JOIN category c ON fc.category_id = c.category_id  WHERE cu.first_name = 'Natalie' AND cu.last_name = 'Meyer'  AND YEAR(r.rental_date) = 2006 AND MONTH(r.rental_date) = 2;
SELECT COUNT(*)  FROM customer  WHERE first_name = 'Eleanor' AND last_name = 'Hunt';
SELECT      c.first_name || ' ' || c.last_name AS full_name,     ci.city  FROM      customer c     JOIN rental r ON c.customer_id = r.customer_id     JOIN inventory i ON r.inventory_id = i.inventory_id     JOIN film f ON i.film_id = f.film_id     JOIN address ci ON c.address_id = ci.address_id WHERE      f.title = 'DREAM PICKUP';
SELECT      (SUM(CASE WHEN c.country_id = (SELECT country_id FROM country WHERE country = 'India') THEN 1 ELSE 0 END)      / COUNT(customer.customer_id)) * 100 AS percent_customers_in_india FROM      customer c JOIN      address a ON c.address_id = a.address_id JOIN      city ci ON a.city_id = ci.city_id JOIN      country co ON ci.country_id = co.country_id;
SELECT      (SUM(CASE WHEN T1.first_name = 'Mary' AND T1.last_name = 'Keitel' THEN T3.rental_duration ELSE 0 END) - SUM(CASE WHEN T1.first_name = 'Angela' AND T1.last_name = 'Witherspoon' THEN T3.rental_duration ELSE 0 END)) / SUM(CASE WHEN T1.first_name = 'Angela' AND T1.last_name = 'Witherspoon' THEN T3.rental_duration ELSE 0 END) * 100 AS percentage_difference_in_rental_duration FROM      actor AS T1 JOIN      film_actor AS T2 ON T2.actor_id = T1.actor_id JOIN      film AS T3 ON T3.film_id = T2.film_id WHERE      T1.first_name IN ('Mary', 'Angela') AND T1.last_name IN ('Keitel', 'Witherspoon')
SELECT      c.email,     a.address,     ci.city,     co.country FROM      customer c JOIN      address a ON c.address_id = a.address_id JOIN      city ci ON a.city_id = ci.city_id JOIN      country co ON ci.country_id = co.country_id WHERE      c.first_name = 'Lillie' AND c.last_name = 'Kim';
SELECT c.first_name, c.last_name  FROM customer c  JOIN rental r ON c.customer_id = r.customer_id  JOIN staff s ON r.staff_id = s.staff_id  WHERE s.first_name = 'Mike' AND s.last_name = 'Hillyer' LIMIT 5;
SELECT SUM(payment.amount) AS total_payment FROM customer JOIN customer ON customer.customer_id = payment.customer_id WHERE customer.first_name = 'Diane' AND customer.last_name = 'Collins';
SELECT      c.first_name,     c.last_name,     c.email FROM      customer c JOIN      payment p ON c.customer_id = p.customer_id WHERE      p.amount > (SELECT AVG(amount) * 0.7 FROM payment);
SELECT COUNT(*)  FROM film  WHERE rental_rate = 0.99;
SELECT COUNT(*)  FROM customer  WHERE customer_id < 100 AND last_name = 'Thomas';
SELECT T3.last_name  FROM film_text AS T1  JOIN film_actor AS T2 ON T1.film_id = T2.film_id   JOIN actor AS T3 ON T2.actor_id = T3.actor_id  WHERE T1.description = 'A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies'
SELECT f.title  FROM film f  JOIN film_actor fa ON f.film_id = fa.film_id  JOIN actor a ON fa.actor_id = a.actor_id  WHERE a.first_name = 'Liza' AND a.last_name = 'Bergman'  ORDER BY f.replacement_cost DESC  LIMIT 1;
SELECT title  FROM film  JOIN inventory ON film.film_id = inventory.film_id  WHERE inventory.store_id = 2  ORDER BY rental_rate DESC  LIMIT 1;
SELECT f.title  FROM film f  JOIN film_actor fa ON f.film_id = fa.film_id  JOIN actor a ON fa.actor_id = a.actor_id  WHERE a.first_name = 'Angelina' AND a.last_name = 'Astaire' AND f.replacement_cost = 27.99;
SELECT inventory_id  FROM film  WHERE title = 'African Egg';
SELECT COUNT(*)  FROM film  JOIN film_actor ON film.film_id = film_actor.film_id  JOIN actor ON film_actor.actor_id = actor.actor_id  WHERE film.length = 113 AND actor.first_name = 'Kirk' AND actor.last_name = 'Jovovich';
SELECT COUNT(*)  FROM film  WHERE film_id IN (SELECT film_id FROM inventory WHERE inventory_id BETWEEN 20 AND 60)  AND rating = 'G';
SELECT COUNT(film.film_id)  FROM film  JOIN film_actor ON film.film_id = film_actor.film_id  JOIN actor ON film_actor.actor_id = actor.actor_id  JOIN film_text ON film.film_id = film_text.film_id  WHERE film.rental_rate = 4.99  AND actor.first_name = 'Bob'  AND actor.last_name = 'Fawcett';
SELECT i.inventory_id  FROM film f  JOIN film_actor fa ON f.film_id = fa.film_id  JOIN actor a ON fa.actor_id = a.actor_id  JOIN inventory i ON f.film_id = i.film_id  WHERE a.first_name = 'Russell'  AND a.last_name = 'Close'  AND f.length BETWEEN 110 AND 150;
SELECT store.store_id, inventory.inventory_id  FROM store  JOIN inventory ON store.store_id = inventory.store_id  JOIN film ON inventory.film_id = film.film_id  WHERE film.length = (SELECT MAX(length) FROM film);
SELECT f.title FROM film AS f JOIN film_actor AS fa ON f.film_id = fa.film_id JOIN actor AS a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Elvis' AND a.last_name = 'Marx';
SELECT i.inventory_id  FROM film f  JOIN film_actor fa ON f.film_id = fa.film_id  JOIN actor a ON fa.actor_id = a.actor_id  JOIN inventory i ON f.film_id = i.film_id  JOIN staff s ON i.store_id = s.store_id  WHERE f.rental_rate = 4.99  AND (a.first_name, a.last_name) = ('Lucille', 'Dee');
SELECT DISTINCT store_id  FROM film  JOIN inventory ON film.film_id = inventory.film_id  JOIN rental ON inventory.inventory_id = rental.inventory_id  WHERE rental_rate > ((SELECT AVG(rental_rate) FROM film) * 0.6);
SELECT      (COUNT(CASE WHEN T2.rating = 'G' THEN 1 END) / COUNT(T2.title)) * 100 AS percentage_G FROM      film_actor AS T1 JOIN      film AS T2 ON T1.film_id = T2.film_id JOIN      actor AS T3 ON T1.actor_id = T3.actor_id WHERE      T3.first_name = 'Nick' AND      T3.last_name = 'Wahlberg' ;
SELECT address  FROM address  WHERE district = 'Texas'  ORDER BY city_id ASC;
SELECT first_name, last_name, email  FROM customer  WHERE active = 0 AND DATE(create_date) BETWEEN '2006-01-01' AND '2006-12-31';
SELECT      (COUNT(CASE WHEN rating = 'PG-13' THEN 1 END)::decimal / COUNT(*)::decimal) * 100 as percentage_PG_13_movies FROM      film;
SELECT title  FROM film  ORDER BY rental_rate DESC  LIMIT 10;
SELECT AVG(amount)  FROM payment  WHERE customer_id = 15;
SELECT COUNT(*)  FROM rental  WHERE DATEDIFF(return_date, rental_date) > (     SELECT AVG(DATEDIFF(return_date, rental_date))      FROM rental )
SELECT      (COUNT(CASE WHEN c.name = 'horror' THEN f.film_id END) / COUNT(f.film_id)) * 100 AS horror_percentage FROM      film f JOIN      film_category fc ON f.film_id = fc.film_id JOIN      category c ON fc.category_id = c.category_id;
SELECT first_name, last_name  FROM actor  WHERE actor_id IN (     SELECT actor_id      FROM film_actor      GROUP BY actor_id      HAVING COUNT(film_id) = (         SELECT MAX(count_value)          FROM (             SELECT COUNT(film_id) AS count_value              FROM film_actor              GROUP BY actor_id         ) temp_table     ) );
SELECT T1.first_name, T1.last_name  FROM actor AS T1  JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id   JOIN film_category AS T3 ON T2.film_id = T3.film_id   JOIN category AS T4 ON T3.category_id = T4.category_id   WHERE T4.name = 'Drama'   GROUP BY T1.actor_id   ORDER BY COUNT(T2.film_id) DESC   LIMIT 1;
SELECT      (AVG(T1.rental_id) OVER () - AVG(T2.rental_id) OVER ()) FROM      (SELECT rental_id FROM rental WHERE country_id = (SELECT country_id FROM country WHERE country = 'Australia')) T1,     (SELECT rental_id FROM rental WHERE country_id = (SELECT country_id FROM country WHERE country = 'Canada')))
SELECT      (COUNT(CASE WHEN T2.name = 'action' THEN 1 END)       OVER ()      / COUNT(T1.film_id)     ) * 100 AS percentage FROM      film_actor AS T1 JOIN      film AS T3 ON T1.film_id = T3.film_id JOIN      category AS T2 ON T3.category_id = T2.category_id WHERE      T1.actor_id IN      (         SELECT              actor_id          FROM              actor          WHERE              first_name = 'Reese' AND last_name = 'Kilmer'     );
SELECT SUM(amount) FROM payment JOIN rental ON payment.rental_id = rental.rental_id JOIN inventory ON rental.inventory_id = inventory.inventory_id JOIN film ON inventory.film_id = film.film_id WHERE film.title = 'Clockwork Paradice';
SELECT c.first_name, c.last_name  FROM customer c  JOIN rental r ON c.customer_id = r.customer_id  JOIN inventory i ON r.inventory_id = i.inventory_id  JOIN film f ON i.film_id = f.film_id  JOIN film_category fc ON f.film_id = fc.film_id  GROUP BY c.customer_id  HAVING COUNT(fc.category_id) > 5;
SELECT AVG(T2.actor_id)  FROM film_category AS T1  JOIN film_actor AS T2 ON T1.film_id = T2.film_id  JOIN category AS T3 ON T1.category_id = T3.category_id  WHERE T3.name = 'comedy';
SELECT f.title FROM film AS f JOIN film_category AS fc ON f.film_id = fc.film_id JOIN category AS c ON fc.category_id = c.category_id JOIN inventory AS inv ON f.film_id = inv.film_id JOIN rental AS rent ON inv.inventory_id = rent.inventory_id WHERE c.name = 'children' GROUP BY f.title ORDER BY COUNT(*) DESC LIMIT 1;
SELECT      (COUNT(DISTINCT CASE WHEN p.amount > (SELECT AVG(amount) FROM payment p WHERE p.customer_id = c.customer_id AND s.store_id = 1) THEN c.customer_id ELSE NULL END) / COUNT(c.customer_id)) * 100 AS percentage FROM      customer c JOIN      payment p ON c.customer_id = p.customer_id JOIN      store s ON p.store_id = s.store_id
SELECT c.first_name, c.last_name  FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category cat ON fc.category_id = cat.category_id WHERE cat.name = 'Family' GROUP BY c.customer_id HAVING COUNT(fc.name) > (SELECT COUNT(fc2.name) FROM film_category fc2 WHERE fc2.film_id = f.film_id AND fc2.category_id IN (SELECT category_id FROM category WHERE name = 'Sci-Fi'))
SELECT title  FROM film  WHERE rating = 'NC-17';
SELECT COUNT(*)  FROM actor  WHERE last_name = 'Kilmer';
SELECT COUNT(*)  FROM film  WHERE length > 100;
SELECT COUNT(payment_id)  FROM payment  WHERE payment_date LIKE '2005-08%';
SELECT T4.country  FROM address AS T1  JOIN city AS T2 ON T1.city_id = T2.city_id  JOIN country AS T4 ON T2.country_id = T4.country_id  WHERE T1.address = '1386 Nakhon Sawan Boulevard';
SELECT language.name FROM film JOIN language ON film.language_id = language.language_id WHERE film.release_year = 2006 GROUP BY language.language_id ORDER BY COUNT(film.film_id) DESC LIMIT 1;
SELECT title  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  WHERE category.name = 'classics';
SELECT COUNT(*)  FROM rental  JOIN customer ON rental.customer_id = customer.customer_id  WHERE customer.first_name = 'Ella'  AND customer.last_name = 'Oliver'  AND rental.rental_date BETWEEN '2005-06-01' AND '2005-06-30';
SELECT COUNT(DISTINCT c.customer_id) FROM customer c JOIN rental r ON c.customer_id = r.customer_id WHERE c.first_name = 'Jon' AND c.last_name = 'Stephens';
SELECT SUM(amount)  FROM payment  WHERE payment_date = '2005-07-29';
SELECT first_name  FROM customer  WHERE address_id IN (     SELECT address_id      FROM address      WHERE postal_code LIKE '76%' );
SELECT T2.rental_date  FROM film AS T1 JOIN film_text AS T3 ON T1.film_id = T3.film_id JOIN inventory AS T4 ON T4.film_id = T1.film_id JOIN rental AS T2 ON T2.inventory_id = T4.inventory_id WHERE T3.title = 'BLOOD ARGONAUTS'
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Cuba' AND a.last_name = 'Allen';
SELECT COUNT(DISTINCT fa.actor_id) FROM film_actor fa JOIN film f ON fa.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Music';
SELECT a.first_name, a.last_name  FROM actor a  JOIN film_actor fa ON a.actor_id = fa.actor_id  JOIN film_category fc ON fa.film_id = fc.film_id  JOIN category c ON fc.category_id = c.category_id  WHERE c.name = 'comedy'  GROUP BY a.actor_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM customer  WHERE NOT EXISTS (     SELECT *      FROM rental      JOIN staff ON rental.staff_id = staff.staff_id      WHERE customer.customer_id = rental.customer_id AND staff.first_name = 'Mike' )
SELECT T1.first_name, T1.last_name  FROM actor AS T1  JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id   JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.rating = 'PG-13' ORDER BY T3.replacement_cost DESC  LIMIT 1;
SELECT c.first_name, c.last_name  FROM customer c  JOIN rental r ON c.customer_id = r.customer_id  WHERE r.return_date IS NULL;
SELECT COUNT(*)  FROM customer  JOIN city ON customer.city_id = city.city_id  WHERE city.city = 'Miyakonojo';
SELECT COUNT(*)  FROM customer  WHERE active = 0 AND rental_date IS NULL;
SELECT f.title  FROM film f  JOIN film_category fc ON f.film_id = fc.film_id  JOIN category c ON fc.category_id = c.category_id  WHERE c.name = 'Animation' AND f.length = (SELECT MIN(length) FROM film WHERE category_id IN (SELECT category_id FROM film_category WHERE film_id IN (SELECT film_id FROM film WHERE name = 'Animation')));
SELECT T4.country  FROM customer AS T1  JOIN address AS T2 ON T1.address_id = T2.address_id  JOIN store AS T3 ON T3.address_id = T2.address_id  JOIN rental AS T4 ON T4.store_id = T3.store_id  JOIN staff AS T5 ON T5.staff_id = T4.staff_id  WHERE T1.first_name = 'Hector' AND T1.last_name = 'Poinexter';
SELECT AVG(payment.amount)  FROM payment  JOIN film  ON payment.rental_id = film.film_id  JOIN film_category  ON film.film_id = film_category.film_id  JOIN category  ON film_category.category_id = category.category_id  WHERE category.name = 'Horror';
SELECT AVG(payment.amount)  FROM customer  JOIN staff ON customer.store_id = staff.store_id  WHERE customer.first_name = 'Christy' AND customer.last_name = 'Vargas';
SELECT      (SUM(CASE WHEN f.length < 100 AND cat.name = 'Drama' THEN 1 ELSE 0 END)       OVER()      / COUNT(f.film_id) OVER()) * 100 AS percentage FROM      film f JOIN      film_category fc ON f.film_id = fc.film_id JOIN      category cat ON fc.category_id = cat.category_id;
SELECT first_name, last_name  FROM actor  WHERE first_name = 'Johnny';
SELECT address_id FROM address WHERE district = 'Gansu';
SELECT      c.category_id,     c.name,     MAX(c.last_update) AS latest_update  FROM      category c  GROUP BY      c.category_id,      c.name LIMIT 3;
SELECT first_name, last_name  FROM customer  WHERE active = 0  LIMIT 3;
SELECT      T1.rental_rate / T1.rental_duration AS rental_price_per_day FROM      film AS T1 JOIN      film_text AS T2 ON T1.film_id = T2.film_id WHERE      T2.title = 'Airplane Sierra';
SELECT address, address2, district  FROM store  WHERE store_id = 2;
SELECT T3.city  FROM address AS T1  JOIN city AS T3 ON T1.city_id = T3.city_id  WHERE T1.address = '1623 Kingstown Drive';
SELECT city.city FROM country JOIN city ON country.country_id = city.country_id WHERE country.country = 'Algeria' LIMIT 3;
SELECT c.name  FROM film f  JOIN film_category fc ON f.film_id = fc.film_id  JOIN category c ON fc.category_id = c.category_id  WHERE f.title = 'Agent Truman';
SELECT title  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  WHERE category.name = 'action'  LIMIT 3;
SELECT      (AVG(CASE WHEN c.name = 'children' THEN 1 ELSE 0 END) - AVG(CASE WHEN c.name = 'action' THEN 1 ELSE 0 END)) * COUNT(f.film_id) AS difference FROM      film f JOIN      film_category fc ON f.film_id = fc.film_id JOIN      category c ON fc.category_id = c.category_id;
SELECT T3.district  FROM customer AS T1  JOIN address AS T2 ON T1.address_id = T2.address_id  JOIN city AS T3 ON T2.city_id = T3.city_id  WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller';
SELECT first_name, last_name  FROM customer  WHERE active = 1 AND address LIKE '%1795 Santiago de Compostela Way, Texas%'
SELECT COUNT(*)  FROM film  JOIN language ON film.language_id = language.language_id  WHERE language.name = 'English'  AND film.replacement_cost < 10.99  AND film.length > 50;
SELECT T3.first_name, T3.last_name  FROM film AS T1  JOIN film_actor AS T2 ON T1.film_id = T2.film_id  JOIN actor AS T3 ON T2.actor_id = T3.actor_id  WHERE T1.title = 'ACADEMY DINOSAUR';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Penelope' AND a.last_name = 'Guiness' LIMIT 2;
SELECT      (SUM(CASE WHEN c.name = 'Documentary' THEN 1 ELSE 0 END) / COUNT(f.film_id)) * 100 AS documentary_percentage FROM      film f JOIN      film_category fc ON f.film_id = fc.film_id JOIN      category c ON fc.category_id = c.category_id;
SELECT COUNT(*)  FROM film  JOIN language ON film.language_id = language.language_id  WHERE language.name = 'English'  AND film.rating = 'NC-17';
SELECT title  FROM film  WHERE length = (SELECT MAX(length) FROM film);
SELECT COUNT(*)  FROM actor  WHERE first_name = 'Dan';
SELECT first_name, COUNT(*) as name_count  FROM customer  GROUP BY first_name  ORDER BY name_count DESC  LIMIT 1;
SELECT f.title, f.rating  FROM film f  JOIN film_category fc ON f.film_id = fc.film_id  JOIN category c ON fc.category_id = c.category_id  WHERE c.name = 'Documentary' AND f.special_features LIKE '%Behind the Scenes%';
SELECT MAX(payment_id) AS max_rentals_per_customer FROM payment;
SELECT title  FROM film_text  WHERE description LIKE '%Lacklusture%';
SELECT COUNT(*)  FROM rental  JOIN customer ON rental.customer_id = customer.customer_id  WHERE customer.first_name = 'Francis' AND customer.last_name = 'Sikes';
SELECT s.first_name, s.last_name  FROM store AS st JOIN staff AS s ON st.manager_staff_id = s.staff_id WHERE st.store_id = (SELECT store_id FROM store GROUP BY store_id ORDER BY COUNT(film_id) DESC LIMIT 1);
SELECT address  FROM customer  WHERE active = 0;
SELECT category.name, COUNT(category.name) as count  FROM category GROUP BY category.name ORDER BY count DESC LIMIT 1;
SELECT T1.first_name, T1.last_name  FROM actor AS T1  JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id  JOIN film AS T3 ON T3.film_id = T2.film_id  WHERE T3.title = 'Jason trap';
SELECT c.first_name, c.last_name  FROM customer c  JOIN payment p ON c.customer_id = p.customer_id  WHERE p.amount = (SELECT MAX(amount) FROM payment)  GROUP BY c.customer_id;
SELECT title  FROM film  JOIN inventory ON film.film_id = inventory.film_id  GROUP BY title  ORDER BY COUNT(*) DESC  LIMIT 5;
SELECT country.country  FROM city  JOIN country ON city.country_id = country.country_id  WHERE city.city = 'Sasebo';
SELECT address  FROM store;
SELECT title  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  WHERE category.name = 'animation';
SELECT city.city  FROM customer  JOIN address ON customer.address_id = address.address_id  JOIN city ON address.city_id = city.city_id  GROUP BY city.city  ORDER BY COUNT(customer.customer_id) DESC  LIMIT 1;
SELECT first_name, last_name  FROM actor  WHERE actor_id IN (     SELECT actor_id      FROM film_actor      GROUP BY actor_id      ORDER BY COUNT(*) DESC      LIMIT 1 );
SELECT      (SUM(CASE WHEN c.name = 'Horror' THEN 1 ELSE 0 END) * 100.0 / COUNT(f.film_id)) AS horror_percentage  FROM      film f  JOIN      film_category fc ON f.film_id = fc.film_id  JOIN      category c ON fc.category_id = c.category_id;
SELECT first_name, last_name  FROM actor  WHERE actor_id = 5;
SELECT COUNT(film_id)  FROM film_category  WHERE category_id = 11;
SELECT T3.name  FROM film AS T1  JOIN film_category AS T2 ON T1.film_id = T2.film_id  JOIN category AS T3 ON T2.category_id = T3.category_id  WHERE T1.title = 'BABY HALL';
SELECT first_name, last_name  FROM actor  WHERE actor_id IN (     SELECT actor_id      FROM film_actor      JOIN film ON film.film_id = film_actor.film_id      WHERE rental_rate = (         SELECT MAX(rental_rate)          FROM film     ) );
SELECT film_text.description  FROM film_text  JOIN film_actor ON film_text.film_id = film_actor.film_id  JOIN actor ON film_actor.actor_id = actor.actor_id  WHERE actor.first_name = 'JENNIFER' AND actor.last_name = 'DAVIS';
SELECT first_name, last_name  FROM customer  WHERE customer_id IN (     SELECT customer_id FROM payment WHERE amount > 10 );
SELECT T3.address  FROM customer AS T1  JOIN address AS T3 ON T1.address_id = T3.address_id  WHERE T1.first_name = 'SUSAN' AND T3.postal_code = '77948';
SELECT c.first_name, c.last_name  FROM customer c  JOIN address a ON c.address_id = a.address_id  WHERE a.city_id IN (     SELECT ci.city_id      FROM city ci      JOIN country co ON ci.country_id = co.country_id      WHERE co.country = 'United Arab Emirates' AND ci.city = 'Abu Dhabi' );
SELECT first_name, last_name  FROM customer  JOIN address ON customer.address_id = address.address_id  WHERE address = '692 Joliet Street';
SELECT title  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  WHERE film.length > 120 AND category.name = 'action';
SELECT T1.first_name, T1.last_name  FROM actor AS T1  JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id  JOIN film AS T3 ON T3.film_id = T2.film_id  WHERE T3.title = 'ANONYMOUS HUMAN';
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id JOIN inventory inv ON f.film_id = inv.film_id WHERE c.name = 'Horror' AND f.rental_rate = (SELECT MIN(r.rate) FROM                       (SELECT f.reental_rate                       FROM film f                       JOIN film_category fc ON f.film_id = fc.film_id                       JOIN category c ON fc.category_id = c.category_id                       WHERE c.name = 'Horror') r);
SELECT title, description  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  WHERE category.name = 'Travel';
SELECT SUM(payment.amount)  FROM customer  JOIN address ON customer.address_id = address.address_id  JOIN city ON address.city_id = city.city_id  WHERE city.country_id IN (   SELECT country.country_id    FROM country    JOIN city ON country.country_id = city.country_id    WHERE city.city = 'Nagasaki' )
SELECT      (SUM(amount WHERE customer.first_name = 'MARGARET' AND customer.last_name = 'MOORE') /       COALESCE(SUM(amount), 0) OVER () * 100) AS percentage_total_payment FROM      customer JOIN      payment ON customer.customer_id = payment.customer_id;
SELECT      (COUNT(CASE          WHEN f.length > 120 AND fc.category_id = c.category_id AND c.name = 'Horror'         THEN 1     END) * 100 / COUNT(f.title)) as percentage FROM      film f JOIN      film_category fc ON f.film_id = fc.film_id JOIN      category c ON fc.category_id = c.category_id;
SELECT COUNT(title) FROM film WHERE release_year = 2006;
SELECT title FROM film WHERE film_id BETWEEN 1 AND 10;
SELECT film_id FROM film WHERE rental_duration = (SELECT MAX(rental_duration) FROM film);
SELECT title  FROM film  WHERE rental_rate = (SELECT MAX(rental_rate) FROM film);
SELECT title  FROM film  WHERE rating = 'G';
SELECT l.name  FROM film f  JOIN language l ON f.language_id = l.language_id  WHERE f.title = 'CHILL LUCK';
SELECT film.last_update  FROM film  JOIN language ON film.language_id = language.language_id  WHERE language.name = 'English' AND film.release_year = 2006;
SELECT COUNT(*)  FROM film  JOIN language ON film.language_id = language.language_id  WHERE language.name = 'Italian'  AND special_features = 'deleted scenes';
SELECT COUNT(film.title)  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  WHERE category.name = 'animation' AND film.rating = 'NC-17';
SELECT f.title, c.name  FROM film AS f  JOIN film_category AS fc ON f.film_id = fc.film_id  JOIN category AS c ON fc.category_id = c.category_id  WHERE c.name = 'action';
SELECT f.film_id FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'comedy';
SELECT title  FROM film  WHERE name = 'documentary' AND length = (SELECT MAX(length) FROM film WHERE name = 'documentary');
SELECT c.name  FROM film f  JOIN film_category fc ON f.film_id = fc.film_id  JOIN category c ON fc.category_id = c.category_id  WHERE f.title = 'BLADE POLISH';
SELECT rental.rental_id  FROM customer  JOIN staff ON customer.store_id = staff.store_id  WHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith';
SELECT c.first_name  FROM customer c  JOIN rental r ON c.customer_id = r.customer_id  JOIN staff s ON r.staff_id = s.staff_id  WHERE s.staff_id = 1;
SELECT T1.email  FROM customer AS T1  JOIN rental AS T2 ON T1.customer_id = T2.customer_id  JOIN staff AS T3 ON T2.staff_id = T3.staff_id  WHERE T3.staff_id = 2;
SELECT actor_id  FROM film_actor  JOIN film ON film.film_id = film_actor.film_id  WHERE film.title = 'BOUND CHEAPER';
SELECT inventory_id  FROM customer  WHERE first_name = 'Karen' AND last_name = 'Jackson';
SELECT f.title  FROM film f  JOIN film_actor fa ON f.film_id = fa.film_id  JOIN actor a ON fa.actor_id = a.actor_id  WHERE a.first_name = 'Jane' AND a.last_name = 'Jackman';
SELECT T3.first_name, T3.last_name  FROM film_text AS T1  JOIN film_actor AS T2 ON T1.film_id = T2.film_id  JOIN actor AS T3 ON T2.actor_id = T3.actor_id  WHERE T1.title = 'BIRD INDEPENDENCE';
SELECT SUM(film.rental_rate) AS total_rental_rate FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Animation';
SELECT AVG(T1.rental_rate)  FROM film F  JOIN film_category FC ON F.film_id = FC.film_id  JOIN category C ON FC.category_id = C.category_id  WHERE C.name = 'Sci-Fi';
SELECT      (COUNT(CASE WHEN c.name = 'Horror' THEN f.film_id END) / COUNT(CASE WHEN l.name = 'English' THEN f.film_id END) * 100) AS percentage FROM      film f JOIN      film_category fc ON f.film_id = fc.film_id JOIN      category c ON fc.category_id = c.category_id JOIN      language l ON f.language_id = l.language_id;
SELECT COUNT(*)  FROM film  WHERE rating = 'NC-17' AND rental_duration < 4;
SELECT title  FROM film  WHERE rating = 'R' AND length = 71 AND replacement_cost = 29.99;
SELECT c.email  FROM customer c  JOIN rental r ON c.customer_id = r.customer_id  WHERE c.active = 1 AND r.rental_date BETWEEN '2005-5-25 07:37:47' AND '2005-5-26 10:06:49'
SELECT SUM(payment.amount) AS total_payment  FROM payment  JOIN customer ON payment.customer_id = customer.customer_id  WHERE customer.first_name = 'Sarah' AND customer.last_name = 'Lewis';
SELECT COUNT(*)  FROM payment  JOIN customer ON payment.customer_id = customer.customer_id  WHERE customer.first_name = 'Susan' AND customer.last_name = 'Wilson'  AND payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 10:08:29';
SELECT      a.first_name,      a.last_name  FROM      actor a  JOIN      film_actor fa ON a.actor_id = fa.actor_id  JOIN      film f ON fa.film_id = f.film_id  WHERE      f.title = 'ALABAMA DEVIL';
SELECT f.title  FROM film f  JOIN film_actor fa ON f.film_id = fa.film_id  JOIN actor a ON fa.actor_id = a.actor_id  WHERE a.first_name = 'Sandra' AND a.last_name = 'Kilmer';
SELECT COUNT(film.film_id)  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  WHERE category.name = 'documentary' AND film.rating = 'PG-13';
SELECT f.title, c.name  FROM film AS f  JOIN film_category AS fc ON f.film_id = fc.film_id  JOIN category AS c ON fc.category_id = c.category_id  WHERE (f.rental_duration * f.rental_rate) > 30  AND f.special_features IS NOT NULL;
SELECT T1.first_name, T1.last_name  FROM actor AS T1  JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id  JOIN film AS T3 ON T3.film_id = T2.film_id  WHERE T3.title = 'AFRICAN EGG';
SELECT COUNT(*)  FROM film  JOIN inventory ON film.film_id = inventory.film_id  JOIN rental ON inventory.inventory_id = rental.inventory_id  JOIN customer ON rental.customer_id = customer.customer_id  WHERE customer.first_name = 'Maria' AND customer.last_name = 'Miller';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'Dorothy' AND c.last_name = 'Taylor' ORDER BY r.rental_date DESC LIMIT 1;
SELECT COUNT(film.film_id)  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  WHERE category.name = 'Action';
SELECT T4.address, T4.phone, T2.rental_rate  FROM film_text AS T1  JOIN film_category AS T3 ON T1.film_id = T3.film_id  JOIN category AS T2 ON T2.category_id = T3.category_id  JOIN inventory AS T4 ON T1.film_id = T4.film_id  WHERE T1.title = 'WYOMING STORM';
SELECT      (R.return_date - R.rental_date) AS days_to_return FROM      rental R JOIN      film F ON F.film_id = R.inventory_id JOIN      film_actor FA ON FA.film_id = F.film_id JOIN      actor A ON A.actor_id = FA.actor_id WHERE      F.title = 'DESTINY SATURDAY' AND      A.first_name = 'Austin' AND      A.last_name = 'Cintron';
SELECT COUNT(*)  FROM film  JOIN film_actor ON film.film_id = film_actor.film_id  JOIN actor ON film_actor.actor_id = actor.actor_id  WHERE actor.first_name = 'Nick' AND actor.last_name = 'Stallone';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.film_id, f.title ORDER BY SUM(rental_rate * rental_duration) DESC, f.length ASC LIMIT 1;
SELECT SUM(payment.amount) AS total_amount_paid FROM customer JOIN payment ON customer.customer_id = payment.customer_id WHERE customer.first_name = 'Stephanie'  AND customer.last_name = 'Mitchell' AND payment.payment_date LIKE '2005-06%';
SELECT AVG(film.replacement_cost)  FROM film  WHERE film.rental_rate = 4.99;
SELECT AVG(film.rental_rate) FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'PG-13';
SELECT      (COUNT(CASE WHEN c.active = 0 THEN c.customer_id END) /       COUNT(c.customer_id)) * 100 AS inactive_percentage FROM      customer c JOIN      store s ON c.store_id = s.store_id WHERE      s.store_id = 1;
SELECT rental_duration FROM film WHERE title = 'DIRTY ACE';
SELECT first_name, last_name  FROM customer  WHERE email = 'SHEILA.WELLS@sakilacustomer.org';
SELECT title  FROM film  WHERE length = (SELECT MAX(length) FROM film)  ORDER BY title ASC;
SELECT COUNT(DISTINCT category_id) as num_categories FROM film_category;
SELECT COUNT(f.title) AS rented_titles,         (COUNT(f.title) FILTER (WHERE DATE_TRUNC('month', r.rental_date) = 6 AND DATE_TRUNC('year', r.rental_date) = 2005) / NULLIF(COUNT(f.title), 0) * 100) AS percentage_june_2005_rentals FROM customer c  JOIN staff s ON c.store_id = s.store_id   JOIN rental r ON c.customer_id = r.customer_id   JOIN inventory i ON r.inventory_id = i.inventory_id   JOIN film f ON i.film_id = f.film_id   JOIN address a ON c.address_id = a.address_id   WHERE a.city = 'New York' AND s.first_name = 'Mary' AND s.last_name = 'Smith' AND r.rental_date BETWEEN '2005-01-01' AND '2005-12-31';
SELECT COUNT(*)  FROM customer  WHERE active = 1;
SELECT title  FROM film  WHERE rating = 'PG-13';
SELECT title  FROM film  WHERE rental_duration > 5;
SELECT DISTINCT city.city  FROM city  JOIN country ON city.country_id = country.country_id  WHERE country.country = 'United Arab Emirates';
SELECT first_name, last_name  FROM customer  WHERE amount > 10  LIMIT 5;
SELECT title  FROM film  JOIN film_actor ON film.film_id = film_actor.film_id  JOIN actor ON film_actor.actor_id = actor.actor_id  WHERE actor.first_name = 'Burt' AND actor.last_name = 'Dukakis';
SELECT T1.first_name, T1.last_name  FROM actor AS T1  JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id  JOIN film AS T3 ON T3.film_id = T2.film_id  WHERE T3.title = 'ENDING CROWDS';
SELECT T1.first_name, T1.last_name  FROM actor AS T1  JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id  JOIN film AS T3 ON T3.film_id = T2.film_id  WHERE T3.title = 'BOUND CHEAPER';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Karl' AND a.last_name = 'Berr' AND f.rating = 'PG';
SELECT city.city, city.country_id  FROM city  WHERE city.country_id = (SELECT country_id FROM country WHERE country = 'Philippines')  LIMIT 3;
SELECT title  FROM film  WHERE film_id IN (     SELECT film_id      FROM inventory      GROUP BY film_id      ORDER BY COUNT(DISTINCT customer_id) ASC      LIMIT 1 )
SELECT mt.description  FROM film_text mt  JOIN film_actor fa ON mt.film_id = fa.film_id  JOIN actor a ON fa.actor_id = a.actor_id  WHERE a.first_name = 'Lucille' AND a.last_name = 'Tracy';
SELECT c.name  FROM film f  JOIN film_category fc ON f.film_id = fc.film_id  JOIN category c ON fc.category_id = c.category_id  WHERE f.title = 'BEACH HEARTBREAKERS';
SELECT title  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  WHERE category.name = 'Horror' LIMIT 10;
SELECT T2.last_name  FROM film_text AS T1  JOIN film_actor AS T3 ON T1.film_id = T3.film_id  JOIN actor AS T2 ON T3.actor_id = T2.actor_id  WHERE T1.rating = 'NC-17'
SELECT      AVG(T3.rental_rate) AS avg_rental_rate FROM      film_actor AS T1  JOIN      actor AS T2 ON T1.actor_id = T2.actor_id JOIN      film AS T3 ON T3.film_id = T1.film_id JOIN      customer AS T4 ON T4.customer_id = T1.actor_id WHERE      T2.first_name = 'Lucille'  AND      T2.last_name = 'Tracy';
SELECT COUNT(film_id)  FROM film  WHERE length BETWEEN 100 AND 110;
SELECT actor_id FROM actor WHERE last_name = 'Dee';
SELECT COUNT(*)  FROM customer  WHERE first_name = 'Nina' AND active = 1;
SELECT COUNT(*)  FROM film  JOIN film_category ON film.film_id = film_category.film_id  JOIN category ON film_category.category_id = category.category_id  JOIN store ON inventory.store_id = store.store_id  WHERE store.store_id = 2 AND category.name = 'R' AND store.store_id = 2;
SELECT DISTINCT s.store_id FROM store s JOIN staff st ON s.staff_id = st.staff_id JOIN film_film_actor fa ON st.staff_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id JOIN film_text ft ON f.film_id = ft.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id JOIN film_actor fa2 ON f.film_id = fa2.film_id JOIN actor a ON fa2.actor_id = a.actor_id WHERE a.first_name = 'Reese' AND a.last_name = 'West' AND f.length < 100;
SELECT f.length FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Nick' AND a.last_name = 'Wahlberg' ORDER BY f.rental_rate DESC LIMIT 1;
SELECT f.title  FROM film f  JOIN film_actor fa ON f.film_id = fa.film_id  JOIN actor a ON fa.actor_id = a.actor_id  WHERE a.first_name = 'Russell' AND a.last_name = 'Close';
SELECT store_id  FROM film  JOIN inventory ON film.film_id = inventory.film_id  JOIN store ON inventory.store_id = store.store_id  WHERE title = 'Amadeus Holy';
SELECT COUNT(*)  FROM film  JOIN film_actor ON film.film_id = film_actor.film_id  JOIN actor ON film_actor.actor_id = actor.actor_id  WHERE film.rental_rate = 2.99 AND actor.first_name = 'Nina' AND actor.last_name = 'Soto';
SELECT      (COUNT(T1.film_id) WHERE T1.store_id = 1) - (COUNT(T1.film_id) WHERE T1.store_id = 2) AS difference FROM      film_actor AS T1 JOIN      actor AS T2 ON T1.actor_id = T2.actor_id WHERE      T2.first_name = 'Reese' AND T2.last_name = 'West';
SELECT postal_code  FROM address  WHERE address = '692 Joliet Street';
SELECT COUNT(*)  FROM customer  WHERE active = 1;
SELECT COUNT(*)  FROM customer  WHERE store_id = 1 AND active = 1;
SELECT address  FROM customer  WHERE first_name = 'Mary' AND last_name = 'Smith';
SELECT COUNT(*)  FROM customer  WHERE active = 1 AND city = 'Arlington';
SELECT c.first_name, c.last_name  FROM customer c  JOIN address a ON c.address_id = a.address_id  JOIN city ci ON a.city_id = ci.city_id  JOIN country co ON ci.country_id = co.country_id  WHERE co.country = 'Italy';
SELECT T4.country  FROM customer AS T1  JOIN address AS T2 ON T1.address_id = T2.address_id  JOIN city AS T3 ON T2.city_id = T3.city_id  JOIN country AS T4 ON T3.country_id = T4.country_id  WHERE T1.first_name = 'Mary' AND T1.last_name = 'Smith';
SELECT MAX(amount) FROM payment WHERE customer_id IN (     SELECT customer_id     FROM customer     WHERE first_name = 'Mary' AND last_name = 'Smith' );
SELECT COUNT(*)  FROM rental  JOIN customer ON rental.customer_id = customer.customer_id  WHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith';
SELECT SUM(T2.amount)  FROM payment AS T2  JOIN customer AS T1 ON T1.customer_id = T2.customer_id  WHERE T1.first_name = 'Mary' AND T1.last_name = 'Smith'
SELECT COUNT(*)  FROM payment  JOIN customer ON payment.customer_id = customer.customer_id  WHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith'  AND year(payment.payment_date) = 2005 AND month(payment.payment_date) = 6;
SELECT c.first_name, c.last_name  FROM customer c  JOIN rental r ON c.customer_id = r.customer_id  JOIN payment p ON r.rental_id = p.rental_id  WHERE p.amount = (SELECT MAX(amount) FROM payment) GROUP BY c.customer_id LIMIT 1;
SELECT SUM(payment.amount) AS total_spent FROM payment JOIN customer ON payment.customer_id = customer.customer_id JOIN address ON customer.address_id = address.address_id JOIN city ON address.city_id = city.city_id JOIN country ON city.country_id = country.country_id WHERE country.country = 'Italy';
SELECT COUNT(*)  FROM payment  WHERE amount > 4.99 AND customer_id IN (     SELECT customer_id      FROM customer      WHERE first_name = 'Mary' AND last_name = 'Smith' );
SELECT      AVG(amount) AS average_spent_on_film_rental FROM      payment  WHERE      country = 'Italy'
SELECT      SchoolName FROM      california_schools.satscores INNER JOIN      california_schools.schools ON satscores.cds = schools.CDSCode WHERE      schools.County = 'Alameda' AND      satscores.rtype = 'K-12' ORDER BY      (satscores.FreeMealCount / schools.Enrollment) DESC LIMIT 1;
SELECT      SchoolName,     Percent_eligible_free_ages_5_17 = FreeMealCount_Ages_5_17 / Enrollment_Ages_5_17 FROM      california_schools.satscores JOIN      california_schools.schools ON satscores.cd = schools.CDSCode WHERE      schools.EdOpsName = 'Continuation' ORDER BY      Percent_eligible_free_ages_5_17 ASC LIMIT 3;
SELECT MailZip FROM california_schools.schhools WHERE `Charter School (Y/N)` = 1  AND County = 'Fresno County Office of Education';
SELECT MailAddress FROM schools WHERE FRPM_Count_K_12 = (     SELECT MAX(FRPM_Count_K_12)     FROM frpm ) AND MailAddress IS NOT NULL;
SELECT schools.Phone FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode JOIN satscores ON schools.CDSCode = satscores.cds WHERE frpm.CharterSchool = 'Y' AND frpm.CharterFundingType = 'Direct' AND schools.OpenDate > '2000-01-01'
SELECT COUNT(*)  FROM satscores  WHERE AvgScrMath < 400 AND Virtual = 'F'
SELECT      s.Name AS School_Name,     sc.Magnet AS Magnet,     sc.GSoffered AS Programs_Offered FROM      schools s JOIN      satscores sc ON s.CDSCode = sc.cds WHERE      sc.NumTstTakr > 500 AND      (sc.Magnet = 1 OR sc.GSoffered = 1);
SELECT schools.Phone  FROM schools  JOIN satscores ON schools.CDSCode = satscores.cds  WHERE satscores.AvgScrMath > 1500  GROUP BY schools.Phone  ORDER BY COUNT(satscores.NumTstTakr) DESC  LIMIT 1;
SELECT COUNT(*)  FROM satscores  JOIN schools ON satscores.cds = schools.CDSCode  WHERE schools.FRPM_Count_K_12 = (SELECT MAX(`FRPM Count (K-12)`) FROM schools);
SELECT COUNT(*)  FROM satscores  WHERE AvgScrMath > 560 AND FundingType = 'Directly Charter-Funded';
SELECT      s.Name AS SchoolName,     sc.FRPM_Count_Ages_5_17 AS FRPMCount  FROM      satscores ss  JOIN      schools sc ON ss.dname = sc.District  JOIN      california_schools.sfrpm fr ON sc.CDSCode = fr.CDSCode  WHERE      ss.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores)  AND      ss.rtype = 'Reading'  AND      sc.AgeGroup = 'Ages 5-17'
SELECT CDSCode  FROM california_schools.schhools WHERE Enrollment (K-12) + Enrollment (Ages 5-17) > 500;
SELECT      s.Name AS SchoolName,     MAX(s.FreeMealCountAge5_17 / s.EnrollmentAge5_17) AS HighestEligibleFreeRate FROM     schools s JOIN     satscores ss ON s.CDSCode = ss.cds WHERE     ss.AvgScrRead + ss.AvgScrMath + ss.AvgScrWrite > 0.3 * ss.NumTstTakr GROUP BY     s.Name;
SELECT schools.Phone FROM (   SELECT cds, NumTstTakr, NumGE1500,          (NumGE1500 / NumTstTakr) as ExcellenceRate   FROM satscores ) AS RateCalc JOIN schools ON satscores.cds = schools.CDSCode WHERE RateCalc.ExcellenceRate = (SELECT MAX(ExcellenceRate) FROM RateCalc) OR       RateCalc.ExcellenceRate = (SELECT MAX(ExcellenceRate) FROM RateCalc WHERE ExcellenceRate <> (SELECT MAX(ExcellenceRate) FROM RateCalc)) OR       RateCalc.ExcellenceRate = (SELECT MAX(ExcellenceRate) FROM RateCalc WHERE ExcellenceRate <> (SELECT MAX(ExcellenceRate) FROM RateCalc) AND ExcellenceRate <> (SELECT MAX(ExcellenceRate) FROM RateCalc)) ORDER BY RateCalc.ExcellenceRate DESC LIMIT 3;
SELECT `NCESSchool` FROM schools WHERE `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Enrollment (Ages 5-17)` DESC LIMIT 5;
SELECT      s.Name AS DistrictName,      AVG(sc.AvgScrRead) AS AverageScoreReading FROM      schools s JOIN      satscores sc ON s.CDSCode = sc.cds WHERE      s.StatusType = 'Active' GROUP BY      s.Name ORDER BY      AverageScoreReading DESC LIMIT 1;
SELECT COUNT(*)  FROM california_schools.satscores  JOIN california_schools.schools ON satscores.cd = schools.CDSCode  WHERE schools.City = 'Alameda' AND satscores.NumTstTakr < 100;
SELECT `Charter Num`  FROM satscores  WHERE `AvgScrWrite` = 499;
SELECT COUNT(*)  FROM california_schools.satscores  JOIN california_schools.schools ON satscores.cd = schools.CDSCode  WHERE schools.County = 'Contra Costa' AND schools.FundingType = 'Directly Funded' AND satscores.NumTstTaker <= 250;
SELECT T1.Phone  FROM schools AS T1  JOIN satscores AS T2 ON T1.CDSCode = T2.cds  WHERE T2.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)
SELECT COUNT(*)  FROM california_schools.satscores  JOIN california_schools.schools ON satscores.cd = schools.CDSCode  WHERE schools.City = 'Amador' AND schools.LowGrade = 9 AND schools.HighGrade = 12;
SELECT COUNT(*)  FROM california_schools.satscores  JOIN california_schools.schools ON satscores.cd = schools.CDSCode  WHERE schools.City = 'Los Angeles'  AND satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite > 500  AND satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite < 700;
SELECT s.name FROM schools s JOIN frpm f ON s.cds_code = f.cds_code JOIN counties c ON s.county = c.code WHERE c.name = 'Contra Costa' ORDER BY f.frpm_count_ages_5_17 DESC LIMIT 1;
SELECT      s.Name,     s.Street,     s.StreetAbr,     s.City,     s.Zip,     s.State,     s.Latitude,     s.Longitude FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode WHERE      ABS(f.Enrollment_K_12 - f.Enrollment_Ages_5_17) > 30;
SELECT schools.SchoolName FROM schools JOIN satscores ON schools.CDSCode = satscores.cd WHERE schools.FreeMealCount_K_12 / schools.Enrollment_K_12 > 0.1 AND satscores.AvgScrRead >= 1500 OR satscores.AvgScrMath >= 1500 OR satscores.AvgScrWrite >= 1500;
SELECT      s.Name,      sf.FundingType FROM      schools AS s JOIN      frpm AS fr ON s.CDSCode = fr.CDSCode JOIN      satscores AS sa ON s.CDSCode = sa.cds WHERE      fr.County = 'Riverside' AND     sa.AvgScrMath > 400;
SELECT      SchoolName,      CONCAT(Street, ', ', City, ' ', State, ' ', Zip) AS FullCommunicationAddress  FROM      schools  JOIN      california_schools  ON      schools.CDSCode = california_schools.CDSCode  WHERE      SchoolType = 'High School'      AND County = 'Monterey'      AND Ages_5_17 LIKE '%Free Meal Count (ages 5-17)%'     AND CAST(REPLACE(REPLACE(REPLACE(FreeMealCount (Ages 5-17), ',', ''), '$', '') AS INT) > 800;
SELECT      s.sname,      s.AvgScrWrite  FROM      schools s  JOIN      frpm f ON s.CDSCode = f.CDSCode  JOIN      satscores ss ON s.CDSCode = ss.cds  WHERE      s.OpenDate < '1991-12-31' OR s.ClosedDate > '2000-01-01'  AND      s.Phone IS NOT NULL;
SELECT      School.Name,     Schools.DOCType FROM     schools JOIN     frpm ON     schools.CDSCode = frpm.CDSCode WHERE     frpm.FundingType = 'Local' GROUP BY     schools.CDSCode,     School.Name,     Schools.DOCType HAVING     ABS((frpm.Enrollment (K-12) - frpm.Enrollment (Ages 5-17)) -         (SELECT AVG(frpme.Enrollment (K-12) - frpmf.Enrollment (Ages 5-17))         FROM             frpm AS frpme         JOIN             frpm AS frpmf         ON             frpme.CDSCode = frpmf.CDSCode         WHERE             frpme.FundingType = 'Local')) > AVG(frpme.Enrollment (K-12) - frpmf.Enrollment (Ages 5-17))
SELECT OpenDate  FROM schools  WHERE EducationalOptionType = 'K-12'  ORDER BY Enrollment (K-12) DESC  LIMIT 1;
SELECT      City  FROM      schools  WHERE      CDSCode IN (         SELECT              CDSCode          FROM              frpm          ORDER BY              Enrollment (K-12) ASC          LIMIT 5     )
SELECT      s.Name,     (s.FreeMealCount / s.Enrollment) * 100 AS EligibleFreeRate FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode WHERE      f.LowGrade <= 12 AND f.HighGrade >= 12 ORDER BY      s.Enrollment DESC LIMIT 10;
SELECT      School.Name,     (FRPM.FRPM_Count_K_12 / Schools.Enrollment_K_12) AS EligibleFreeMealRate FROM      california_schools.Schools JOIN      california_schools.frpm AS FRPM ON Schools.CDSCode = FRPM.CDSCode WHERE      Schools.Charter = 'Y' AND Schools.CharterNum = '66' ORDER BY      FRPM.Free_Meal_Count_K_12 DESC LIMIT 5;
SELECT schools.Website, schools.School  FROM schools  JOIN frpm ON schools.CDSCode = frpm.CDSCode  WHERE frpm.FreeMealCount (Ages 5-17) BETWEEN 1900 AND 2000;
SELECT      s.Name AS SchoolName,     (sf.FreeMealCount / sf.Enrollment) * 100 AS FreeRate FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode JOIN      satscores ss ON s.CDSCode = ss.cds JOIN      frpm sf ON s.CDSCode = sf.CDSCode WHERE      s.AdmFName1 = 'Kacey' AND      s.AdmLName1 = 'Gibson';
SELECT AdmEmail1  FROM frpm  WHERE CharterSchool = 'Y'  AND `Enrollment (K-12)` = (     SELECT MIN(`Enrollment (K-12)`)      FROM frpm      WHERE CharterSchool = 'Y' );
SELECT      AdmFName1, AdmLName1 AS Full_Administrator_Name FROM      schools WHERE      NumTstTakr > 0 AND      NumGE1500 >= 1500 AND      NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE CDSCode = schools.CDSCode);
SELECT      s.Street,      s.City,      s.State,      s.Zip  FROM      schools s  JOIN      satscores ss ON s.CDSCode = ss.cds  WHERE      ss.NumGE1500 / ss.NumTstTakr = (SELECT MIN(NumGE1500 / NumTstTakr) FROM satscores);
SELECT Website  FROM california_schools  JOIN schools ON california_schools.CDSCode = schools.CDSCode  WHERE County = 'Los Angeles' AND (enroll12 BETWEEN 2000 AND 3000);
SELECT AVG(s.numTstTakr) FROM schools s JOIN frpm f ON s.cds = f.CDSCode WHERE s.City = 'Fresno' AND YEAR(f.OpenDate) = 1980;
SELECT `Phone` FROM `schools` JOIN `satscores` ON `schools.CDSCode` = `satscores.cds` WHERE `schools.District` = 'Fresno Unified' ORDER BY `satscores.AvgScrRead` ASC LIMIT 1;
SELECT      s.school_name,     AVG(s.avg_scr_read) as avg_reading_score FROM      schools s JOIN      satscores ss ON s.cds_code = ss.cds AND s.virtual = 'F' GROUP BY      s.school_name HAVING      s.virtual = 'F' ORDER BY      avg_reading_score DESC LIMIT 5;
SELECT schools.EducationOptionType  FROM schools  JOIN satscores ON schools.CDSCode = satscores.cds  WHERE satscores.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)
SELECT      s.Name AS SchoolName,      sc.COUNTY AS County FROM      satscores AS ss     JOIN schools AS s ON ss.dname = s.District AND ss.cname = s.County WHERE      (ss.AvgScrMath + ss.AvgScrRead + ss.AvgScrWrite) =          (SELECT MIN(AvgScrMath + AvgScrRead + AvgScrWrite) FROM satscores) GROUP BY      s.Name, sc.COUNTY;
SELECT      s.Name AS SchoolName,      c.City AS City,     AVG(sc.AvgScrWrite) AS AvgWritingScore FROM      satscores sc JOIN      schools s ON sc.cdsl equals s.CDSCode JOIN      frpm f ON f.SchoolCode equals sc.cdsl WHERE      sc.NumGE1500 >= 1500 AND     sc.AvgScrWrite = (         SELECT MAX(AvgScrWrite)         FROM satscores         WHERE              NumGE1500 >= 1500     ) GROUP BY      s.Name, c.City;
SELECT      s.sname AS School_Name,     AVG(sc.AvgScrWrite) AS Average_Writing_Score FROM      schools s JOIN      frpm fp ON s.CDSCode = fp.CDSCode JOIN      satscores sc ON s.CDSCode = sc.cds AND fp.SchoolName = sc.sname WHERE      s.AdmFName1 = 'Ricci' AND s.AdmLName1 = 'Ulrich' GROUP BY      s.sname;
SELECT      s.Name AS 'School Name',     s.State AS 'State',     SUM(fr.Enrollment) AS 'Total Enrollment' FROM      schools s JOIN      frpm fr ON s.CDSCode = fr.CDSCode WHERE      s.DOC = 31 AND fr.LowGrade <= 'K' AND fr.HighGrade >= '12' GROUP BY      s.CDSCode,     s.Name,     s.State ORDER BY      Total_Enrollment DESC LIMIT      1;
SELECT COUNT(*) / 12 AS 'Monthly Average' FROM (     SELECT COUNT(*) AS 'Schools Opened in 1980'     FROM california_schools.schoools     WHERE CaliforniaCounty = 'Alameda'     AND DOC = 52     AND OpenDate BETWEEN '1980-01-01' AND '1980-12-31' )
SELECT      COUNT(CASE          WHEN s.district LIKE '%Unified School District%' AND s.DOC = 54 THEN 1         ELSE NULL     ) / COUNT(CASE          WHEN s.district LIKE '%Elementary School District%' AND s.DOC = 52 THEN 1         ELSE NULL     ) AS Ratio FROM      california_schools.satscores s JOIN      california_schools.schools sc  ON      s.cds = sc.CDSCode  WHERE      sc.County = 'Orange County';
SELECT      s.County,     sc.SchoolName,     sc.ClosedDate FROM      schools sc WHERE      sc.StatusType = 'Closed' GROUP BY      s.County ORDER BY      COUNT(sc.SchoolID) DESC LIMIT 1;
SELECT      s.Name FROM      schools s JOIN      satscores ss ON s.CDSCode = ss.cds WHERE      ss.AvgScrMath = (         SELECT              MAX(AvgScrMath)          FROM              satscores          WHERE              rownum = 6     )
SELECT      s.MailStreet,      sc.SchoolName FROM      schools sc JOIN      satscores ss ON sc.CDSCode = ss.cds WHERE      ss.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores)
SELECT COUNT(*)  FROM (   SELECT s.cds AS cds   FROM satscores s   WHERE s.AvgScrRead + s.AvgScrMath + s.AvgScrWrite >= 1500 AND s.MailCity = 'Lakeport' ) subquery JOIN schools sc ON sc.CDSCode = subquery.cds;
SELECT COUNT(*)  FROM schools  JOIN satscores ON schools.CDSCode = satscores.cds  WHERE schools.MailCity = 'Fresno'
SELECT      s.Name,     s.MailZip FROM      schools s JOIN      (SELECT           AdmFName1, AdmLName1, AdmEmail1       FROM           schools       WHERE           AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian') admin_info ON admin_info.Administrator = s.Administrators;
SELECT      COUNT(CASE WHEN `State` = 'CA' AND `County` = 'Colusa' THEN `CDSCode` END) /      COUNT(CASE WHEN `State` = 'CA' AND `County` = 'Humboldt' THEN `CDSCode` END) AS Ratio FROM      schools WHERE      `State` = 'CA';
SELECT COUNT(*)  FROM schools  WHERE MailState = 'CA'  AND MailCity IN ('Stockton', 'Lodi', 'Modesto', 'Rancho Cordova', 'Fresno', 'Sacramento', 'Folsom', 'El Dorado Hills', 'Roseville', 'Fremont', 'Livermore', 'Oakland', 'San Francisco', 'San Jose', 'San Diego', 'Los Angeles', 'Anaheim', 'Irvine', 'Santa Ana', 'Fremont', 'San Ramon', 'Concord', 'Napa')  AND StatusType = 'Active';
SELECT `Phone`, `Ext`  FROM `schools`  JOIN `satscores` ON `schools.CDSCode` = `satscores.cds`  WHERE `AvgScrWrite` = (SELECT AVG(`AvgScrWrite`) FROM `satscores` ORDER BY `AvgScrWrite` DESC LIMIT 1 OFFSET 332)
SELECT schools.Phone, schools.Ext, schools.School  FROM schools WHERE schools.Zip = '95203-3704';
SELECT Website  FROM schools  WHERE AdmFName1 = 'Mike Larson' OR AdmFName1 = 'Dante Alvarez'     OR AdmFName2 = 'Mike Larson' OR AdmFName2 = 'Dante Alvarez'     OR AdmFName3 = 'Mike Larson' OR AdmFName3 = 'Dante Alvarez';
SELECT schools.Website  FROM schools  JOIN frpm ON schools.CDSCode = frpm.CDSCode  WHERE schools.Virtual = 'P' AND schools.Charter = 1 AND schools.MailState = 'CA' AND schools.County = 'San Joaquin';
SELECT COUNT(*)  FROM schools  WHERE DOC = 52 AND Charter = 1 AND MailCity = 'Hickman';
SELECT COUNT(*)  FROM california_schools.satscores  JOIN california_schools.schools ON satscores.cd = schools.CDSCode  WHERE schools.Charter = 0  AND SUBSTRING(schools.City, 1, CHARINDEX(',', schools.City) - 1) = 'Los Angeles'  AND (schools.'Free Meal Count (K-12)' * 100 / schools.'Enrollment (K-12)' < 0.18);
SELECT      s.AdmFName1 || ' ' || s.AdmLName1 AS Full_Admin_Name,     sc.SchoolName,     sc.City FROM      schools sc JOIN      frpm fp ON sc.CDSCode = fp.CDSCode JOIN      satscores ss ON sc.CDSCode = ss.cds WHERE      sc.Charter = 1 AND      fp.CharterSchoolNumber = '00D2';
SELECT COUNT(*)  FROM schools  WHERE MailCity = 'Hickman'  AND Charter = '00D4';
SELECT      (COUNT(CASE WHEN sf.FundingType = 'Local' THEN sf.CDSCode END) * 100.0 /       COUNT(DISTINCT sf.CDSCode)) FROM      schools AS s JOIN      frpm AS f ON s.CDSCode = f.CDSCode JOIN      satscores AS sf ON s.CDSCode = sf.cds WHERE      s.City = 'Santa Clara' AND      f.County = 'Santa Clara' GROUP BY      s.City;
SELECT COUNT(*)  FROM schools  WHERE `OpenDate` BETWEEN '2000-01-01' AND '2005-12-31'  AND County = 'Stanislaus'  AND FundingType = 'Directly Funded';
SELECT COUNT(*)  FROM schools  WHERE ClosedDate = '1989' AND County = 'San Francisco' AND SchoolType LIKE '%Community College%'
SELECT      s.County  FROM      schools s  JOIN      frpm f ON s.CDSCode = f.CDSCode  WHERE      s.SOC = 11      AND s.OpenDate BETWEEN 1980 AND 1989      AND f.ClosedDate IS NOT NULL  GROUP BY      s.County  ORDER BY      COUNT(s.CDSCode) DESC  LIMIT 1;
SELECT `NCESDist` FROM schools WHERE `School Ownership Code` = '31';
SELECT COUNT(*)  FROM schools  WHERE DistrictType = 'District Community Day'  AND County = 'Alpine'  AND (StatusType = 'Active' OR StatusType = 'Closed');
SELECT schools.CDSCode FROM schools WHERE schools.Magnet = 0 AND schools.City = 'Fresno';
SELECT COUNT(*)  FROM california_schools.satscores  JOIN california_schools.schools ON satscores.cd = schools.CDSCode  WHERE schools.school = 'State Special School' AND schools.city = 'Fremont' AND schools.StatusType = 'Open' AND schools.OpenDate <= '2014-12-31' AND schools.ClosedDate >= '2015-01-01' AND schools.EdOpsCode = 'SSS'  AND satscores.rtype = 'total_enrollment' AND DATE_FORMAT(satscores.AcademicYear, '%Y') = '2014'
SELECT      FreeMealCount(Ages 5-17)  FROM      schools  WHERE      MailingStreet = 'PO Box 1040' AND      School = 'Youth Authority School'
SELECT `Low Grade`  FROM `schools`  WHERE `EdOpsCode` = 'SPECON' AND `NCESDist` = '613360';
SELECT      SchoolName FROM      schools JOIN      frpm ON schools.CDSCode = frpm.CDSCode WHERE      frpm.NSLP Provision Status = 'Breakfast Provision 2'     AND frpm.County Code = '37';
SELECT MailCity  FROM schools  JOIN frpm ON schools.CDSCode = frpm.CDSCode  WHERE frpm.LowGrade = '9' AND frpm.HighGrade = '12' AND frpm.CountyName = 'Merced' AND frpm.NSLPProvisionStatus = 'Lunch Provision 2' AND schools.EILCode = 'HS'
SELECT      School.Name,     (School.FreeMealCount / School.Enrollment_Ages_5_17) * 100 AS Percent_Eligible_FRPM_Ages_5_17 FROM      california_schools.schools AS School JOIN      california_schools.frpm AS Frpm ON School.CDSCode = Frpm.CDSCode WHERE      School.LowerGrade = 'Kindergarten' AND      School.HighGrade = '9th Grade' AND      Frpm.County = 'Los Angeles';
SELECT      COUNT(*) AS count,     GSserved AS grade_span_served FROM      schools WHERE      MailCity = 'Adelanto' GROUP BY      GSserved ORDER BY      count DESC LIMIT 1;
SELECT COUNT(*) AS NumberOfSchools FROM schools WHERE County IN ('San Diego', 'Santa Barbara') AND Virtual = 'F';
SELECT      SchoolName,      Latitude FROM      schools WHERE      Latitude = (SELECT MAX(Latitude) FROM schools);
SELECT      s.Name AS SchoolName,     City AS City FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode WHERE      s.State = 'CA'     AND f.LowGrade = (         SELECT MIN(LowGrade)         FROM              frpm         WHERE              County = 'California'     ) ORDER BY      s.Latitude ASC LIMIT 1;
SELECT gs offered FROM schools WHERE longitude = (SELECT MAX(longitude) FROM schools)
SELECT COUNT(DISTINCT s.MailCity) AS Cities,        COUNT(s.CDSCode) AS Schools_in_each_city FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.EducationalOptionType = 'Magnet' AND f.LowGrade = 'K' AND f.HighGrade = '8' GROUP BY s.MailCity;
SELECT      AdmFName1 AS AdministratorFirstName,     COUNT(AdmFName1) AS AdministratorCount,     DistrictName AS DistrictToAdminister FROM      schools GROUP BY      AdmFName1, DistrictName ORDER BY      AdministratorCount DESC LIMIT 2;
SELECT      s.CDSCode  FROM      schools s JOIN      frpm f ON s.CDSCode = f.CDSCode WHERE      s.AdmFName1 = 'Alusine' OR s.AdmFName2 = 'Alusine' OR s.AdmFName3 = 'Alusine';
SELECT      AdmLName1 AS 'Lead Administrator Last Name',     District,     County,     SchoolName FROM      schools WHERE      CharterNum = '40';
SELECT AdmEmail1, AdmEmail2, AdmEmail3 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND SOC IN (62, 54);
SELECT      s.AdmEmail1,      s.School  FROM      schools s  JOIN      satscores ss ON s.CDSCode = ss.cds  WHERE      ss.AvgScrRead >= 1500 AND ss.AvgScrMath >= 1500 AND ss.AvgScrWrite >= 1500  ORDER BY      ss.NumTstTakers DESC  LIMIT 1;
SELECT COUNT(*)  FROM account  JOIN district ON account.district_id = district.district_id  WHERE district.A3 = 'East Bohemia'  AND trans.type = 'POPLATEK PO OBRATU';
SELECT COUNT(*)  FROM account  JOIN district ON account.district_id = district.district_id  WHERE district.A3 = 'Prague' AND EXISTS (     SELECT 1      FROM loan      WHERE loan.account_id = account.account_id      AND loan.status = 'eligible' );
SELECT      AVG(CASE WHEN A12 IS NOT NULL THEN A12 ELSE NULL END) AS unemployment_1995,     AVG(CASE WHEN A13 IS NOT NULL THEN A13 ELSE NULL END) AS unemployment_1996 FROM      district WHERE      A12 IS NOT NULL OR A13 IS NOT NULL;
SELECT COUNT(DISTINCT d.district_id) FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'F' AND d.A11 BETWEEN 6000 AND 10000;
SELECT COUNT(*)  FROM client  WHERE gender = 'M' AND A3 = 'North Bohemia' AND `AVG(A11) > 8000`;
SELECT      MIN(account_id) AS min_account_id,     MAX(account_id) AS max_account_id,     (SELECT AVG(`A11`) FROM `client`) AS avg_salary_highest,     (SELECT AVG(`A11`) FROM `client` WHERE `gender` = 'F') AS avg_salary_female_oldest,     (SELECT AVG(`A11`) FROM `client`) - (SELECT AVG(`A11`) FROM `client` WHERE `gender` = 'F') AS salary_gap FROM `client` WHERE `gender` = 'F' ORDER BY `birth_date` ASC LIMIT 1
SELECT T1.account_id FROM client AS T1 JOIN (     SELECT client_id, AVG(`A11`) as avg_salary     FROM (         SELECT client_id, `A11`         FROM district         JOIN account ON district.district_id = account.district_id         JOIN client ON account.client_id = client.client_id     ) AS subquery     GROUP BY client_id ) AS T2 ON T1.client_id = T2.client_id WHERE T1.birth_date = (SELECT MIN(birth_date) FROM client) AND T2.avg_salary = (SELECT MAX(avg_salary) FROM (     SELECT AVG(`A11`) AS avg_salary     FROM district     JOIN account ON district.district_id = account.district_id     JOIN client ON account.client_id = client.client_id     GROUP BY client_id ))
SELECT COUNT(*)  FROM client  JOIN disp ON client.client_id = disp.client_id  WHERE disp.type = 'POPLATEK TYDNE' AND client.gender = 'Owner';
SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN trans t ON d.account_id = t.account_id WHERE d.type = 'POPLATEK PO OBRATU';
SELECT      a.account_id  FROM      account a  JOIN      loan l ON a.account_id = l.account_id  WHERE      l.date BETWEEN '1997-01-01' AND '1997-12-31' AND l.status = 'APPROVED'  AND (     SELECT MIN(amount)      FROM          loan      WHERE          account_id = a.account_id AND status = 'APPROVED' )  AND (     SELECT          COUNT(*)      FROM          trans      WHERE          tdate BETWEEN l.date AND DATE_ADD(l.date, INTERVAL l.duration MONTH)      AND          a.account_id = account_id      AND          type = 'WEEKLY_ISSUANCE' ) = 1;
SELECT `account_id`  FROM `loan`  WHERE `duration` > 12 AND `date` >= '1993-01-01'  GROUP BY `account_id`  ORDER BY `amount` DESC  LIMIT 1;
SELECT COUNT(*)  FROM client  WHERE gender = 'F' AND YEAR(current_date) - YEAR(birth_date) > 70 AND district_id IN (SELECT district_id FROM district WHERE A2 = 'Slokolov');
SELECT account_id, MIN(date) as earliest_date FROM trans WHERE date BETWEEN '1995-01-01' AND '1995-12-31' GROUP BY account_id ORDER BY earliest_date ASC LIMIT 1;
SELECT account.account_id, account.date  FROM account  JOIN trans ON account.account_id = trans.account_id  WHERE account.date < '1997-01-01' AND trans.amount > 3000;
SELECT c.client_id  FROM client AS c  JOIN disp AS d ON c.client_id = d.client_id  JOIN card AS ca ON d.account_id = ca.account_id  WHERE ca.issued LIKE '1994-03-03';
SELECT `date` FROM account WHERE account_id = (     SELECT account_id FROM trans WHERE amount = 840 AND date = '1998-10-14' );
SELECT T1.district_id  FROM account AS T1  JOIN loan AS T2 ON T1.account_id = T2.account_id  WHERE T2.date = '1994-08-25' AND T2.status = 'approved';
SELECT MAX(trans.amount) AS max_transaction_amount FROM trans JOIN account ON trans.account_id = account.account_id JOIN card ON account.account_id = card.account_id JOIN client ON account.account_id = client.account_id WHERE card.issued LIKE '1996-10-21%'
SELECT c.gender FROM client c JOIN (     SELECT d.district_id, AVG(d.A11) as avg_salary     FROM district d     GROUP BY d.district_id     ORDER BY avg_salary DESC     LIMIT 1 ) as max_avg_salary_d ON c.district_id = max_avg_salary_d.district_id WHERE c.birth_date = (     SELECT MIN(e.birth_date)     FROM client e     WHERE e.account_id IN (         SELECT a.account_id         FROM account a         JOIN (             SELECT d.district_id             FROM district d             WHERE d.A11 = (SELECT AVG(f.A11) FROM district f)         ) as avg_salary_d         ON a.district_id = avg_salary_d.district_id     ) );
SELECT T1.amount  FROM trans AS T1  JOIN account AS T2 ON T1.account_id = T2.account_id  WHERE T2.account_id = (SELECT loan_id FROM loan WHERE amount = (SELECT MAX(amount) FROM loan))  ORDER BY T1.date  LIMIT 1;
SELECT COUNT(*)  FROM client  JOIN account ON client.client_id = account.account_id  JOIN district ON account.district_id = district.district_id  WHERE district.A2 = 'Jesenik' AND client.gender = 'F';
SELECT disp.disp_id  FROM account  JOIN disp ON account.account_id = disp.account_id  JOIN trans ON trans.account_id = disp.account_id  WHERE trans.amount = 5100 AND DATE(trans.date) = '1998-09-02';
SELECT COUNT(*)  FROM account  JOIN district ON account.district_id = district.district_id  WHERE district.A2 = 'Litomerice' AND YEAR(account.date) = 1996;
SELECT T3.A2  FROM client AS T1  JOIN disp AS T2 ON T1.client_id = T2.client_id  JOIN account AS T3 ON T2.account_id = T3.account_id  WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29';
SELECT c.birth_date  FROM client c  JOIN loan l ON c.client_id = l.account_id  WHERE l.amount = 98832 AND l.date = '1996-01-03'
SELECT `account_id`  FROM `account`  JOIN `district` ON `account`.`district_id` = `district`.`district_id`  WHERE `district`.`A3` = 'Prague'  ORDER BY `date` ASC  LIMIT 1;
SELECT      (COUNT(CASE WHEN client.gender = 'M' THEN 1 END) * 100.0 / COUNT(client.client_id)) AS male_percentage FROM      client  JOIN      district ON client.district_id = district.district_id WHERE      district.A3 = 'South Bohemia';
SELECT      (MAX(trans.balance) - SUM(CASE WHEN DATE(trans.date) BETWEEN '1993-03-22' AND '1993-07-05' THEN -SUM(operation) ELSE 0 END)) /     SUM(CASE WHEN DATE(trans.date) BETWEEN '1993-03-22' AND '1993-07-05' THEN -SUM(operation) ELSE 0 END) * 100 AS account_balance_increase_rate FROM      trans WHERE      DATE(loan.date) = '1993-07-05' AND DATE(account.date) = DATE(loan.account_id);
SELECT      (SUM(CASE WHEN l.amount = lp.amount THEN l.amount ELSE 0 END) / NULLIF(SUM(l.amount), 0)) * 100 AS paid_percentage  FROM      loan l  JOIN      (SELECT amount FROM trans WHERE k_symbol = 'A') lp ON l.account_id = lp.account_id  WHERE      l.status = 'A';
SELECT      (SUM(CASE WHEN l.amount < 100000 AND l.status = 'C' THEN 1 ELSE 0 END)      / COUNT(l.account_id)) * 100 AS percentage_running_accounts FROM loan l;
SELECT      a.account_id,     d.A2 AS district_name,     SUBSTRING_INDEX(d.A3, ',', 1) AS district_region FROM      account a JOIN      district d ON a.district_id = d.district_id JOIN      trans t ON a.account_id = t.account_id WHERE      YEAR(a.date) = 1993 AND t.type = 'POPLATEK PO OBRATU'
SELECT      a.account_id,      COUNT(*) AS frequency FROM      account a JOIN      client c ON a.district_id = c.district_id JOIN      district d ON c.district_id = d.district_id WHERE      YEAR(a.date) BETWEEN 1995 AND 2000      AND d.A13 = 'east Bohemia' GROUP BY      a.account_id;
SELECT `account_id`, `date`  FROM `account`  JOIN `district` ON `account.district_id` = `district.district_id`  WHERE `district.A2` = 'Prachatice';
SELECT      T1.A2 AS District,     T1.A3 AS Region FROM      district AS T1 JOIN      loan AS T2 ON T1.district_id = T2.account_id WHERE      T2.loan_id = '4990';
SELECT      account.account_id,     district.A2 AS district_name,     district.A3 AS region_name FROM      account JOIN      loan ON account.account_id = loan.account_id JOIN      district ON account.district_id = district.district_id WHERE      loan.amount > 300000;
SELECT      loan.loan_id,     district.A3 AS district,     district.A11 AS average_salary FROM      financial.loan JOIN      financial.account ON loan.account_id = account.account_id JOIN      financial.district ON account.district_id = district.district_id WHERE      loan.duration = 60;
SELECT      d.district_id,     (CAST(A13 AS FLOAT) - CAST(A12 AS FLOAT)) / CAST(A12 AS FLOAT) * 100 AS unemployment_increment_rate FROM      financial.district d JOIN      financial.client c ON d.district_id = c.district_id JOIN      financial.order o ON c.client_id = o.account_id JOIN      financial.trans t ON o.account_id = t.account_id JOIN      financial.account a ON t.account_id = a.account_id JOIN      financial.loan l ON a.account_id = l.account_id WHERE      l.status = 'D' AND t.type = 'debit'
SELECT      (COUNT(DISTINCT CASE WHEN d.A2 = 'Decin' THEN a.account_id END) * 100.0 / COUNT(DISTINCT a.account_id)) AS percentage FROM      account a JOIN      client c ON a.account_id = c.account_id JOIN      district d ON c.district_id = d.district_id WHERE      YEAR(c.birth_date) = 1993;
SELECT DISTINCT account_id  FROM trans  WHERE type = 'POPLATEK MESICNE';
SELECT      d.A2 AS District,     COUNT(DISTINCT c.client_id) AS FemaleAccountHolders FROM      district d JOIN      client c ON d.district_id = c.district_id JOIN      account a ON c.client_id = a.client_id WHERE      c.gender = 'F' GROUP BY      d.A2 ORDER BY      FemaleAccountHolders DESC LIMIT 10;
SELECT      D.A2 AS DistrictName,     SUM(T.amount) AS TotalWithdrawal FROM      district D  JOIN      trans T ON D.district_id = T.account_id  WHERE      T.type = 'VYDAJ' AND      T.date LIKE '1996-01%' GROUP BY      D.A2 ORDER BY      TotalWithdrawal DESC  LIMIT 10;
SELECT COUNT(*)  FROM account  WHERE district_id IN (SELECT district_id FROM district WHERE A3 = 'South Bohemia')  AND account_id NOT IN (SELECT account_id FROM card)
SELECT D.A3  FROM district D  JOIN account A ON D.district_id = A.district_id  JOIN loan L ON A.account_id = L.account_id  WHERE L.status = 'C'  GROUP BY D.A3  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT AVG(amount)  FROM loan  JOIN client ON loan.account_id = client.client_id  WHERE client.gender = 'M';
SELECT      A13 AS UnemploymentRate1996,     A2 AS BranchLocation FROM      district WHERE      A13 IS NOT NULL AND year = 1996 ORDER BY      UnemploymentRate1996 DESC LIMIT 1;
SELECT COUNT(*)  FROM account  JOIN district ON account.district_id = district.district_id  WHERE district.A16 = (SELECT MAX(A16) FROM district WHERE YEAR(date) = 1996)
SELECT COUNT(*)  FROM trans  JOIN account ON trans.account_id = account.account_id  WHERE trans.type = 'VYBER KARTOU' AND account.frequency = 'POPLATEK MESICNE' AND account.balance < 0;
SELECT COUNT(*)  FROM (   SELECT DISTINCT l.account_id    FROM loan l    INNER JOIN account a ON l.account_id = a.account_id    WHERE a.frequency = 'POPLATEK MESICNE' AND l.amount >= 250000     AND l.status = 'APPROVED'    AND l.date BETWEEN '1995-01-01' AND '1997-12-31' ) loan_details;
SELECT COUNT(*)  FROM account  JOIN disp ON account.account_id = disp.account_id  JOIN district ON disp.district_id = district.district_id  WHERE district.A1 = 1 AND loan.status = 'C';
SELECT COUNT(*)  FROM client  WHERE gender = 'M' AND EXISTS (   SELECT *   FROM (     SELECT district_id, COUNT(*) AS crimes_1995     FROM disp      WHERE type = 'crime'       AND DATE(date) BETWEEN '1995-01-01' AND '1995-12-31'     GROUP BY district_id     ORDER BY crimes_1995 DESC     LIMIT 1 OFFSET 1   ) AS highest_crimes   WHERE client.district_id = highest_crimes.district_id )
SELECT COUNT(*)  FROM card  JOIN disp ON card.card_id = disp.account_id  WHERE card.type = 'gold' AND disp.type = 'disponent';
SELECT COUNT(*)  FROM account  JOIN district ON account.district_id = district.district_id  WHERE district.A2 = 'Pisek';
SELECT DISTINCT d.district_id  FROM district d  JOIN trans t ON d.district_id = t.account_id  WHERE t.amount > 10000 AND YEAR(t.date) = 1997;
SELECT DISTINCT a.account_id FROM account a JOIN order o ON a.account_id = o.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.k_symbol = 'SIPO' AND t.bank = 'Pisek';
SELECT DISTINCT a.account_id FROM account a JOIN card c1 ON a.account_id = c1.account_id JOIN card c2 ON a.account_id = c2.account_id WHERE c1.type = 'gold' AND c2.type = 'junior';
SELECT AVG(amount)  FROM trans  JOIN account ON trans.account_id = account.account_id  WHERE date >= '2021-01-01' AND date <= '2021-12-31'  AND type = 'credit' AND operation = 'VYBER KARTOU';
SELECT T1.account_id FROM trans AS T1 JOIN (     SELECT DISTINCT account_id     FROM trans     WHERE date >= '1998-01-01' AND date <= '1998-12-31'         AND type = 'credit' AND operation = 'VYBER KARTOU' ) AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING SUM(amount) < (SELECT AVG(amount)                        FROM (                           SELECT amount                            FROM trans                            WHERE date >= '1998-01-01' AND date <= '1998-12-31'                               AND type = 'credit' AND operation = 'VYBER KARTOU'                       ) AS subquery)
SELECT DISTINCT c.client_id FROM client c JOIN account a ON c.client_id = a.client_id JOIN card ca ON a.account_id = ca.account_id JOIN loan l ON a.account_id = l.account_id WHERE c.gender = 'F';
SELECT COUNT(*)  FROM client  WHERE gender = 'F' AND district_id IN (SELECT district_id FROM district WHERE A3 = 'south Bohemia');
SELECT a.account_id  FROM account a  JOIN district d ON a.district_id = d.district_id  JOIN disp b ON a.account_id = b.account_id  WHERE d.A2 = 'Tabor' AND b.type = 'OWNER';
SELECT      t1.type AS account_type,     AVG(CASE WHEN t1.A11 BETWEEN 8000 AND 9000 THEN t1.A11 ELSE NULL END) AS average_income FROM      account AS t2 JOIN      disp AS t3 ON t2.account_id = t3.account_id JOIN      client AS t4 ON t3.client_id = t4.client_id JOIN      district AS t5 ON t4.district_id = t5.district_id JOIN      (SELECT account_id, A11 FROM district WHERE A11 IS NOT NULL) AS t6 ON t2.account_id = t6.account_id WHERE      t3.type = 'OWNER' GROUP BY      t2.account_id;
SELECT COUNT(*)  FROM account  JOIN trans ON account.account_id = trans.account_id  JOIN district ON account.district_id = district.district_id  WHERE district.A3 = 'North Bohemia' AND trans.bank = 'AB';
SELECT DISTINCT d.A2  FROM district d  JOIN account a ON d.district_id = a.district_id  JOIN trans t ON a.account_id = t.account_id  WHERE t.type = 'VYDAJ';
SELECT AVG(A15)  FROM district  WHERE A3 IN (     SELECT DISTINCT T.region      FROM (         SELECT client.district_id AS district_id, COUNT(*) AS num_crimes          FROM client          JOIN disp ON client.client_id = disp.client_id          JOIN account ON disp.account_id = account.account_id          JOIN trans ON account.account_id = trans.account_id          WHERE trans.type = 'crime' AND YEAR(trans.date) = 1995          GROUP BY client.district_id      ) T      WHERE num_crimes > 4000  )  AND EXISTS (     SELECT *      FROM account      WHERE account.district_id = district.district_id      AND YEAR(account.date) >= 1997  );
SELECT COUNT(DISTINCT c.card_id) FROM card c JOIN disp d ON c.card_id = d.card_id JOIN account a ON d.account_id = a.account_id JOIN client cl ON a.account_id = cl.account_id WHERE d.type = 'classic' AND a.type = 'OWNER';
SELECT COUNT(*)  FROM client  WHERE gender = 'M' AND EXISTS (   SELECT *    FROM district    WHERE client.district_id = district.district_id AND A2 = 'Hl.m. Praha' )
SELECT      (COUNT(CASE WHEN c.type = 'Gold' AND c.issued < 1998 THEN 1 END)      / COUNT(c.card_id)) * 100 AS 'Percent_of_Gold_cards_issued_prior_to_1998' FROM      card c;
SELECT c.client_id, c.name  FROM client c  JOIN account a ON c.client_id = a.client_id  JOIN loan l ON a.account_id = l.account_id  WHERE l.amount = (SELECT MAX(amount) FROM loan)
SELECT COUNT(*)  FROM A15  JOIN district ON A15.district_id = district.district_id  WHERE district.A16 = 532;
SELECT T1.district_id  FROM account AS T1  JOIN order AS T2 ON T1.account_id = T2.account_id  WHERE T2.order_id = 33333;
SELECT t.* FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.client_id = 3356 AND t.operation = 'VYBER';
SELECT COUNT(*)  FROM account  WHERE frequency = 'POPLATEK TYDNE'  AND account_id IN (     SELECT DISTINCT account_id      FROM loan      WHERE amount < 200000 );
SELECT T2.type  FROM client AS T1  JOIN disp AS T2 ON T1.client_id = T2.client_id  JOIN card AS T3 ON T2.account_id = T3.account_id  WHERE T1.client_id = 13539;
SELECT T.client_id, T.A3  FROM district AS T  JOIN client AS C ON T.district_id = C.district_id  WHERE C.client_id = 3541;
SELECT D.district_id, D.A2 AS district_name FROM district D JOIN account A ON D.district_id = A.district_id JOIN loan L ON A.account_id = L.account_id WHERE L.status = 'A' GROUP BY D.district_id, D.A2 ORDER BY COUNT(A.account_id) DESC LIMIT 1;
SELECT * FROM order WHERE order_id = 32423;
SELECT      trans_id,      account_id,      date,      type,      operation,      amount,      balance,      k_symbol,      bank,      account FROM      trans JOIN      account ON trans.account_id = account.account_id JOIN      district ON account.district_id = district.district_id WHERE      district.district_id = 5;
SELECT COUNT(*)  FROM account  JOIN district ON account.district_id = district.district_id  WHERE district.A2 = 'Jesenik';
SELECT DISTINCT c.client_id  FROM client c  JOIN disp d ON c.client_id = d.client_id  JOIN card cr ON d.account_id = cr.account_id  WHERE cr.type = 'junior' AND cr.issued >= '1997-01-01';
SELECT      (COUNT(CASE WHEN c.gender = 'F' THEN c.client_id END)       OVER () * 100.0 / COUNT(DISTINCT a.account_id)       OVER ()) AS percentage FROM      account a JOIN      client c ON a.district_id = c.district_id JOIN      district d ON a.district_id = d.district_id WHERE      d.A11 > 10000;
SELECT      (SUM(amount WHERE year(date) = 1997) - SUM(amount WHERE year(date) = 1996)) / SUM(amount WHERE year(date) = 1996) * 100 AS growth_rate FROM      loan JOIN      client ON loan.account_id = client.account_id WHERE      client.gender = 'M'
SELECT COUNT(*)  FROM trans  WHERE date > '1995-12-31'  AND type = 'credit'  AND operation = 'VYBER KARTOU';
SELECT      (SUM(CASE WHEN A16 = 'North Bohemia' THEN A14 ELSE 0 END) - SUM(CASE WHEN A16 = 'East Bohemia' THEN A14 ELSE 0 END)) as crime_difference_1996 FROM     district WHERE     YEAR(date) = 1996;
SELECT COUNT(*)  FROM disp  WHERE account_id BETWEEN 1 AND 10;
SELECT      t1.type AS 'request_type',     SUM(t1.amount) AS 'total_debit' FROM      trans t1 JOIN      account t2 ON t1.account_id = t2.account_id JOIN      disp t3 ON t2.account_id = t3.account_id WHERE      t2.account_id = 3 AND      t3.type = 'Account Statement Request' AND      t1.operation = 'Debit' AND      t1.amount > 0 GROUP BY      t1.type;
SELECT YEAR(client.birth_date)  FROM client  WHERE client.client_id = 130;
SELECT COUNT(*)  FROM account  JOIN disp ON account.account_id = disp.account_id  WHERE disp.type = 'POPLATEK PO OBRATU'
SELECT      SUM(loan.amount) AS total_debt,     COUNT(loans.payments) AS payment_count,     AVG(loans.payments) AS average_payment FROM      financial.account  JOIN      financial.client ON account.account_id = client.client_id  JOIN      financial.loan ON account.account_id = loan.account_id WHERE      client.client_id = 992;
SELECT SUM(amount),         (SELECT gender FROM client WHERE client.client_id = (SELECT client_id FROM disp WHERE account_id = (SELECT account_id FROM trans WHERE trans_id = 851)))  FROM trans  WHERE account_id = (SELECT account_id FROM disp WHERE client_id = 4);
SELECT T2.type  FROM client AS T1  JOIN disp AS T2 ON T1.client_id = T2.client_id  JOIN card AS T3 ON T2.account_id = T3.account_id  WHERE T1.client_id = 9;
SELECT SUM(amount)  FROM trans  JOIN account ON trans.account_id = account.account_id  WHERE account.client_id = 617 AND YEAR(date) = 1998;
SELECT c.client_id  FROM client c  JOIN district d ON c.district_id = d.district_id  WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31'  AND d.A3 = 'East Bohemia';
SELECT c.client_id  FROM client c  JOIN account a ON c.client_id = a.client_id  JOIN loan l ON a.account_id = l.account_id  WHERE c.gender = 'F'  ORDER BY l.amount DESC  LIMIT 3;
SELECT COUNT(*)  FROM client  WHERE gender = 'M' AND YEAR(current_date) - YEAR(birth_date) BETWEEN 1974 AND 1976  AND EXISTS (     SELECT 1      FROM loan      WHERE client.client_id = loan.account_id      AND loan.status = 'SIPO'      AND amount > 4000 )
SELECT COUNT(*)  FROM account  JOIN district ON account.district_id = district.district_id  WHERE district.A2 = 'Beroun' AND date > '1996-12-31';
SELECT COUNT(*)  FROM client  WHERE gender = 'F' AND EXISTS (     SELECT 1      FROM disp      WHERE client.client_id = disp.client_id AND type = 'junior' );
SELECT      (COUNT(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0 / COUNT(DISTINCT a.account_id)) AS female_percentage FROM      account a JOIN      client c ON a.client_id = c.client_id JOIN      district d ON a.district_id = d.district_id WHERE      d.A3 = 'Prague';
SELECT      (COUNT(CASE WHEN c.gender = 'M' AND d.type = 'POPLATEK TYDNE' THEN c.client_id END) * 100.0 / COUNT(c.client_id)) AS percentage_male_clients_requesting_weekly_statements FROM      client c JOIN      disp d ON c.client_id = d.client_id WHERE      d.type = 'POPLATEK TYDNE';
SELECT COUNT(*)  FROM client  JOIN disp ON client.client_id = disp.client_id  WHERE disp.type = 'POPLATEK TYDNE';
SELECT `account_id`  FROM `loan`  WHERE `duration` > 24  AND `date` < '1997-01-01'  AND `account_id` IN (     SELECT `account_id`      FROM `loan`      GROUP BY `account_id`      ORDER BY SUM(`amount`) ASC      LIMIT 1 )
SELECT T1.account_id  FROM client AS T1  JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T1.gender = 'F'  ORDER BY T1.birth_date ASC, (T2.A11) ASC  LIMIT 1;
SELECT COUNT(*)  FROM client  WHERE YEAR(client.birth_date) = 1920 AND EXISTS (     SELECT 1      FROM district      WHERE client.district_id = district.district_id AND district.A3 LIKE '%East Bohemia%' )
SELECT COUNT(*)  FROM loan  WHERE duration = 24 AND payments = 'POPLATEK TYDNE';
SELECT      AVG(loan.amount) AS average_loan_amount  FROM      financial.loan  WHERE      loan.status = 'C' OR loan.status = 'D'  AND EXISTS (     SELECT          1      FROM          financial.trans      WHERE          trans.operation = 'POPLATEK PO OBRATU' AND          trans.date < loan.date AND          trans.account_id = loan.account_id );
SELECT DISTINCT c.client_id, d.district_id  FROM client AS c JOIN account AS a ON c.client_id = a.account_id JOIN disp AS d ON a.account_id = d.account_id WHERE d.type IN ('permanent_order', 'loan_application') AND a.frequency = 'owner';
SELECT c.client_id, TIMESTAMPDIFF(YEAR, c.birth_date, CURDATE()) AS age  FROM client c JOIN account a ON c.client_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN card ca ON d.disp_id = ca.disp_id WHERE ca.type = 'gold';
SELECT bond_type, COUNT(*) AS frequency  FROM bond  GROUP BY bond_type  ORDER BY frequency DESC  LIMIT 1;
SELECT COUNT(*)  FROM atom  JOIN molecule ON atom.molecule_id = molecule.molecule_id  WHERE molecule.label = '-' AND atom.element = 'cl';
SELECT AVG(a.element)  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  WHERE b.bond_type = '-' AND a.element = 'O';
SELECT      AVG(COUNT(connected.atom_id)) AS avg_single_bonded_carcinogenic_molecules FROM      molecule JOIN      connected ON molecule.molecule_id = connected.molecule_id JOIN      atom ON atom.atom_id = connected.atom_id JOIN      bond ON bond.bond_id = connected.bond_id WHERE      molecule.label = '+' AND bond.bond_type = '-'
SELECT COUNT(*)  FROM molecule  JOIN atom ON molecule.molecule_id = atom.molecule_id  WHERE atom.element = 'na' AND molecule.label = '-'
SELECT DISTINCT m.molecule_id  FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '+';
SELECT      (SUM(CASE WHEN atom.element = 'C' THEN 1 ELSE 0 END) / CAST(COUNT(connected.bond_id) AS REAL)) * 100 AS carbon_percentage FROM      atom JOIN      connected ON atom.atom_id = connected.atom_id JOIN      bond ON connected.bond_id = bond.bond_id WHERE      bond.bond_type = '=';
SELECT COUNT(*)  FROM bond  WHERE bond_type = '#'  AND EXISTS (     SELECT 1      FROM connected c1      WHERE c1.atom_id = bond.molecule_id AND c1.bond_id = bond.bond_id      AND EXISTS (         SELECT 1          FROM connected c2          WHERE c2.atom_id = c1.atom_id2 AND c2.bond_id = c1.bond_id          AND EXISTS (             SELECT 1              FROM connected c3              WHERE c3.atom_id = c2.atom_id2 AND c3.bond_id = c2.bond_id          )     ) );
SELECT COUNT(*)  FROM atom  WHERE element != 'br';
SELECT COUNT(*)  FROM molecule  WHERE molecule_id BETWEEN 'TR000' AND 'TR099'  AND label = '+';
SELECT molecule.molecule_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'si';
SELECT DISTINCT atom.element  FROM atom  JOIN connected ON atom.atom_id = connected.atom_id  JOIN connected ON atom.atom_id = connected.atom_id2  JOIN bond ON connected.bond_id = bond.bond_id  WHERE bond.bond_id = 'TR004_8_9';
SELECT DISTINCT atom.element  FROM molecule  JOIN connected ON molecule.molecule_id = connected.atom_id  JOIN bond ON connected.bond_id = bond.bond_id  WHERE bond.bond_type = ' = ';
SELECT label  FROM atom  JOIN molecule ON atom.molecule_id = molecule.molecule_id  WHERE atom.element = 'H'  GROUP BY label  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T1.bond_type  FROM bond AS T1  JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.element = 'Te';
SELECT DISTINCT A.atom_id, B.atom_id FROM connected C JOIN bond B ON C.bond_id = B.bond_id JOIN atom A ON (C.atom_id = A.atom_id OR C.atom_id2 = A.atom_id) WHERE B.bond_type = '-' AND A.atom_id <> B.atom_id;
SELECT DISTINCT A.atom_id FROM atom A JOIN connected C ON A.atom_id = C.atom_id JOIN connected C2 ON C.atom_id2 = C2.atom_id2 JOIN bond B ON B.bond_id = C.bond_id JOIN molecule M ON M.molecule_id = C.molecule_id WHERE M.label = '-'
SELECT      atom.element,     COUNT(*) AS count FROM     atom JOIN     connected ON atom.atom_id = connected.atom_id JOIN     connected ON atom.atom_id = connected.atom_id2 JOIN     molecule ON atom.molecule_id = molecule.molecule_id WHERE     molecule.label = '-' GROUP BY     atom.element ORDER BY     count ASC LIMIT 1;
SELECT bond_type  FROM bond  JOIN connected ON bond.bond_id = connected.bond_id  WHERE atom_id = 'TR004_8' AND atom_id2 = 'TR004_20';
SELECT DISTINCT m.label  FROM molecule m  JOIN atom a ON m.molecule_id = a.molecule_id  WHERE a.element = 'sn';
SELECT COUNT(*)  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN connected c2 ON a.atom_id = c2.atom_id2  JOIN bond b ON c.bond_id = b.bond_id AND c2.bond_id = b.bond_id  JOIN atom a2 ON c.atom_id2 = a2.atom_id  WHERE a.element = 'I' OR a.element = 'S'  AND b.bond_type = '-'  GROUP BY a.molecule_id;
SELECT DISTINCT a1.atom_id  FROM atom a1  JOIN connected c ON a1.atom_id = c.atom_id  JOIN connected c2 ON a1.atom_id = c2.atom_id2  JOIN bond b ON c.bond_id = b.bond_id  JOIN bond b2 ON c2.bond_id = b2.bond_id  WHERE b.bond_type = '#' AND b2.bond_type = '#'  AND a1.molecule_id = a2.molecule_id;
SELECT DISTINCT A.atom_id  FROM atom A  JOIN connected C ON A.atom_id = C.atom_id  JOIN connected C2 ON A.atom_id = C2.atom_id2  JOIN molecule M ON C.bond_id = M.molecule_id  WHERE M.label = 'TR181';
SELECT      (COUNT(CASE WHEN molecule.label = '+' AND atom.element <> 'F' THEN 1 END) /       COUNT(CASE WHEN molecule.label = '+' THEN 1 END)) * 100 AS percent_not_contain_fluorine_carcinogenic FROM      molecule JOIN      connected ON molecule.molecule_id = connected.molecule_id JOIN      atom ON connected.atom_id = atom.atom_id OR connected.atom_id2 = atom.atom_id JOIN      bond ON connected.bond_id = bond.bond_id JOIN      atom ON bond.molecule_id = atom.molecule_id AND (bond_id = connected.bond_id OR bond_id = connected.bond_id2)
SELECT      (SUM(CASE WHEN bond.bond_type = '#' AND molecule.label = '+' THEN 1 ELSE 0 END)      / COUNT(bond.bond_id)) * 100 AS percentage_carcinogenic_triple_bonds FROM      bond JOIN      molecule ON bond.molecule_id = molecule.molecule_id WHERE      bond.bond_type = '#' AND molecule.label = '+';
SELECT      atom.element  FROM      molecule  JOIN      connected ON molecule.molecule_id = connected.molecule_id  JOIN      atom ON atom.atom_id = connected.atom_id2 OR atom.atom_id = connected.atom_id  WHERE      molecule.label = 'TR000'  GROUP BY      atom.element  ORDER BY      atom.element ASC  LIMIT 3;
SELECT DISTINCT A.atom_id, B.atom_id  FROM connected C JOIN atom A ON C.atom_id = A.atom_id JOIN atom B ON C.atom_id2 = B.atom_id JOIN molecule M ON A.molecule_id = M.molecule_id AND M.label = 'TR001' JOIN bond BD ON C.bond_id = BD.bond_id AND BD.molecule_id = M.molecule_id AND BD.bond_id = 'TR001_2_6';
SELECT      (SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN molecule.label = '-' THEN 1 ELSE 0 END)) AS difference FROM      molecule;
SELECT atom.atom_id  FROM molecule  JOIN connected ON molecule.molecule_id = connected.molecule_id  JOIN atom ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2  WHERE connected.bond_id = 'TR_000_2_5';
SELECT bond_id  FROM connected  WHERE atom_id = 'TR000_2'  AND atom_id2 = 'TR000_2';
SELECT      m.label  FROM      molecule m  JOIN      connected c ON m.molecule_id = c.molecule_id  JOIN      bond b ON c.bond_id = b.bond_id  WHERE      b.bond_type = ' = '  GROUP BY      m.molecule_id  ORDER BY      m.label  LIMIT 5;
SELECT      (SUM(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond.bond_id)) FROM      bond JOIN      molecule ON bond.molecule_id = molecule.molecule_id WHERE      molecule.label = 'TR008';
SELECT      (SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END)       / CAST(COUNT(molecule.molecule_id) AS REAL)) * 100 AS percent   FROM      molecule  JOIN      connected ON molecule.molecule_id = connected.molecule_id  WHERE      connected.bond_id IN      (SELECT bond_id FROM bond WHERE bond_type = 'carcinogenic');
SELECT      (SUM(CASE WHEN atom.element = 'H' THEN 1 ELSE 0 END) / CAST(COUNT(atom.atom_id) AS REAL)) * 100 AS hydrogen_percentage FROM      atom JOIN      connected ON atom.atom_id = connected.atom_id JOIN      connected AS connected2 ON atom.atom_id = connected2.atom_id2 JOIN      bond ON bond.bond_id = connected.bond_id AND bond.bond_id = connected2.bond_id JOIN      molecule ON molecule.molecule_id = atom.molecule_id WHERE      molecule.label = 'TR206';
SELECT b.bond_type  FROM bond b  JOIN molecule m ON b.molecule_id = m.molecule_id  WHERE m.label = 'TR000';
SELECT      atom.element, molecule.label  FROM      atom JOIN      connected ON atom.atom_id = connected.atom_id JOIN      connected AS connected2 ON connected.atom_id2 = connected2.atom_id2 JOIN      bond ON connected.bond_id = bond.bond_id JOIN      molecule ON atom.molecule_id = molecule.molecule_id WHERE      molecule.molecule_id = 'TR060' AND      molecule.label IN ('+', '-')
SELECT      b.bond_type,     COUNT(*) AS total_bonds,     (COUNT(*) / (SELECT COUNT(*) FROM bond WHERE molecule_id = 'TR018')) * 100 AS percentage_of_total_bonds FROM      bond b JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      m.label = '+' AND      m.molecule_id = 'TR018' GROUP BY      b.bond_type ORDER BY      percentage_of_total_bonds DESC LIMIT 1;
SELECT      m.molecule_id,     m.label FROM     molecule m JOIN     atom a ON m.molecule_id = a.molecule_id JOIN     connected c ON a.atom_id = c.atom_id JOIN     bond b ON c.bond_id = b.bond_id WHERE     b.bond_type = '-'     AND m.label = '-' ORDER BY     m.label ASC LIMIT 3;
SELECT      b.bond_id,     b.bond_type FROM      molecule m JOIN      connected c ON m.molecule_id = c.atom_id2 JOIN      bond b ON c.bond_id = b.bond_id WHERE      m.label = 'TR006' ORDER BY      b.bond_type ASC LIMIT 2;
SELECT COUNT(*)  FROM bond  JOIN connected ON bond.bond_id = connected.bond_id  JOIN atom ON (atom.atom_id = connected.atom_id OR atom.atom_id2 = connected.atom_id2)  WHERE atom.molecule_id = 'TR009'  AND (atom.atom_id = 'TR009_12' OR atom.atom_id2 = 'TR009_12')  AND bond.bond_id LIKE 'TR009_%';
SELECT COUNT(*)  FROM molecule  WHERE molecule_id IN (     SELECT c1.atom_id      FROM connected c1      JOIN connected c2 ON c1.bond_id = c2.bond_id      JOIN bond b ON c1.bond_id = b.bond_id      JOIN atom a1 ON c1.atom_id = a1.atom_id      JOIN atom a2 ON c2.atom_id = a2.atom_id      WHERE a1.element = 'Br' AND a2.element = 'Br' ) AND label = '+';
SELECT      b.bond_type,     c.atom_id AS atom_id1,     d.atom_id AS atom_id2 FROM      bond b JOIN      connected c ON b.bond_id = c.bond_id JOIN      atom a1 ON c.atom_id = a1.atom_id JOIN      atom a2 ON c.atom_id2 = a2.atom_id JOIN      molecule m ON a1.molecule_id = m.molecule_id WHERE      m.label = 'TR001_6_9';
SELECT      m.label  FROM      molecule m  JOIN      connected c ON m.molecule_id = c.molecule_id  JOIN      atom a ON c.atom_id = a.atom_id  WHERE      a.element = 'TR001_10';
SELECT COUNT(*)  FROM molecule  JOIN bond ON molecule.molecule_id = bond.molecule_id  WHERE bond.bond_type = '#';
SELECT COUNT(*)  FROM connected  WHERE atom_id = 'TR%_19' OR atom_id2 = 'TR%_19';
SELECT atom.element  FROM atom  JOIN connected ON atom.atom_id = connected.atom_id  JOIN connected ON atom.atom_id = connected.atom_id2  JOIN bond ON connected.bond_id = bond.bond_id  JOIN molecule ON atom.molecule_id = molecule.molecule_id  WHERE molecule.label = 'TR004';
SELECT COUNT(*)  FROM molecule  WHERE label = '-'
SELECT DISTINCT m.molecule_id  FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN atom a ON a.atom_id = c.atom_id JOIN atom a2 ON a2.atom_id = c.atom_id2 WHERE a.element IN (SELECT element FROM atom WHERE atom_id BETWEEN 21 AND 25) AND EXISTS (     SELECT 1 FROM bond b      WHERE b.bond_id = c.bond_id      AND EXISTS (         SELECT 1 FROM molecule m2          WHERE m2.label = '+' AND m2.molecule_id = m.molecule_id     ) );
SELECT DISTINCT b.bond_id  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN connected c2 ON a.atom_id = c2.atom_id2  JOIN bond b ON c.bond_id = b.bond_id  JOIN bond b2 ON c2.bond_id = b2.bond_id  WHERE a.element = 'P' AND (c2.atom_id = a.atom_id OR c.atom_id2 = a.atom_id)    AND EXISTS (     SELECT 1 FROM atom a2 WHERE a2.molecule_id = a.molecule_id AND a2.element = 'N'   );
SELECT m.label  FROM molecule m  JOIN (     SELECT b.molecule_id, COUNT(*) AS double_bond_count      FROM bond b      WHERE b.bond_type = ' = '      GROUP BY b.molecule_id      ORDER BY double_bond_count DESC      LIMIT 1 ) d ON m.molecule_id = d.molecule_id
SELECT      AVG(cnt_bonds) AS avg_bonds_per_i_atom FROM      (SELECT          atom.atom_id,         COUNT(DISTINCT bond.bond_id) AS cnt_bonds      FROM           atom       JOIN           connected ON atom.atom_id = connected.atom_id      JOIN           bond ON connected.bond_id = bond.bond_id      JOIN           atom ON connected.atom_id2 = atom.atom_id      WHERE           atom.element = 'I'      GROUP BY           atom.atom_id) AS subquery;
SELECT      b.bond_type,     b.bond_id FROM      bond b JOIN      connected c ON b.bond_id = c.bond_id JOIN      atom a ON c.atom_id = a.atom_id WHERE      a.atom_id = 'A45';
SELECT DISTINCT atom.element  FROM atom  WHERE atom.atom_id NOT IN (SELECT connected.atom_id FROM connected) AND atom.element IN ('Cl', 'C', 'H', 'O', 'S', 'N', 'P', 'Na', 'Br', 'F', 'I', 'Sn', ' Pb', 'Te', 'Ca');
SELECT a.atom_id  FROM molecule m  JOIN connected c ON m.molecule_id = c.molecule_id  JOIN bond b ON c.bond_id = b.bond_id  JOIN atom a ON c.atom_id = a.atom_id  WHERE m.label = 'TR447' AND b.bond_type = '#';
SELECT atom.element  FROM atom  JOIN connected ON atom.atom_id = connected.atom_id  JOIN connected ON atom.atom_id = connected.atom_id2  JOIN bond ON connected.bond_id = bond.bond_id  JOIN molecule ON bond.molecule_id = molecule.molecule_id  WHERE molecule.label = 'TR144_8_19';
SELECT m.molecule_id, COUNT(*) AS double_bond_count FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id WHERE m.label = '+' AND b.bond_type = '= =' GROUP BY m.molecule_id ORDER BY double_bond_count DESC LIMIT 1;
SELECT element  FROM atom  JOIN molecule ON atom.molecule_id = molecule.molecule_id  WHERE molecule.label = '+' GROUP BY element  ORDER BY COUNT(*) ASC  LIMIT 1;
SELECT DISTINCT a.atom_id  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  WHERE a.element = 'pb';
SELECT atom.element FROM atom JOIN bond ON atom.atom_id = bond.bond_id WHERE bond.bond_type = '#' AND EXISTS (     SELECT 1 FROM connected c1 WHERE c1.atom_id = atom.atom_id AND EXISTS (         SELECT 1 FROM connected c2 WHERE c2.atom_id = c1.atom_id2 AND EXISTS (             SELECT 1 FROM connected c3 WHERE c3.bond_id = c2.bond_id AND c3.atom_id2 = atom.atom_id         )     ) )
SELECT      (COUNT(b.bond_id) * 100) / (         SELECT              COUNT(DISTINCT atom_id)          FROM              atom a          WHERE              a.element = (SELECT element FROM atom GROUP BY element ORDER BY COUNT(*) DESC LIMIT 1)     ) AS percentage_common_bond_combination FROM      bond b;
SELECT      SUM(CASE WHEN atom.bond_type = '-'' AND molecule.label = '+' THEN 1 ELSE 0 END) AS carcinogenic_single_bonds,     COUNT(atom.bond_id) AS total_single_bonds,     SUM(CASE WHEN atom.bond_type = '-'' AND molecule.label = '+' THEN 1 ELSE 0 END) / COUNT(atom.bond_id) AS proportion FROM      atom  JOIN      bond ON atom.atom_id = bond.atom_id  JOIN      molecule ON bond.molecule_id = molecule.molecule_id WHERE      atom.bond_type = '-';
SELECT COUNT(*)  FROM atom  WHERE element IN ('C', 'H')
SELECT T3.atom_id2  FROM atom AS T1  JOIN connected AS T3 ON T1.atom_id = T3.atom_id  JOIN bond AS T2 ON T2.bond_id = T3.bond_id  WHERE T1.element = 's'
SELECT DISTINCT b.bond_type  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN connected c2 ON a.atom_id = c2.atom_id2  JOIN bond b ON c.bond_id = b.bond_id AND c2.bond_id = b.bond_id  WHERE a.element = 'sn';
SELECT COUNT(DISTINCT atom.element)  FROM atom  JOIN connected ON atom.atom_id = connected.atom_id  JOIN bond ON bond.bond_id = connected.bond_id  WHERE bond.bond_type = '-';
SELECT COUNT(*)  FROM atom  JOIN molecule ON atom.molecule_id = molecule.molecule_id   JOIN connected ON atom.atom_id = connected.atom_id   JOIN (SELECT * FROM bond WHERE bond_type = '#' AND (element = 'p' OR element = 'br')) AS triple_bond_bonds ON connected.atom_id2 = triple_bond_bonds.bond_id WHERE atom.element = 'p' OR atom.element = 'br'
SELECT DISTINCT b.bond_id  FROM bond b  JOIN connected c ON b.bond_id = c.bond_id  JOIN atom a ON a.atom_id = c.atom_id  JOIN atom a2 ON a2.atom_id = c.atom_id2  JOIN molecule m ON m.molecule_id = a.molecule_id  WHERE m.label = '+';
SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-' AND m.label = '-'
SELECT      (SUM(CASE WHEN atom.a.element = 'Cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(connected.bond_id)) AS chlorine_percentage FROM      atom JOIN      connected ON atom.atom_id = connected.atom_id JOIN      bond ON connected.bond_id = bond.bond_id WHERE      bond.bond_type = '-';
SELECT molecule.label  FROM molecule  WHERE molecule.molecule_id IN ('TR000', 'TR001', 'TR002');
SELECT molecule.molecule_id FROM molecule WHERE molecule.label = '-';
SELECT COUNT(*)  FROM molecule  WHERE molecule_id BETWEEN 'TR000' AND 'TR030'  AND label = '+';
SELECT      b.bond_type  FROM      molecule m JOIN      connected c ON m.molecule_id = c.molecule_id JOIN      bond b ON c.bond_id = b.bond_id WHERE      m.label LIKE 'TR%%'      AND m.molecule_id BETWEEN 100 AND 150;
SELECT atom.element  FROM bond  JOIN connected ON bond.bond_id = connected.bond_id  JOIN atom ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2  WHERE bond.bond_id = 'TR001_10_11'
SELECT COUNT(*)  FROM atom  JOIN bond ON atom.atom_id = bond.bond_id  WHERE atom.element = 'I'
SELECT      mol.label FROM      molecule mol JOIN      atom at ON mol.molecule_id = at.molecule_id WHERE      at.element = 'Ca' GROUP BY      mol.label HAVING      COUNT(*) > 0 ORDER BY      SUM(CASE WHEN mol.label = '+' THEN 1 ELSE 0 END) DESC;
SELECT      c1.element AS element1,     c2.element AS element2 FROM      connected c1,     connected c2,     bond b WHERE      b.bond_id = 'TR001_1_8' AND     b.bond_id = c1.bond_id AND     b.bond_id = c2.bond_id AND     EXISTS (         SELECT 1 FROM atom a1 WHERE a1.atom_id = c1.atom_id AND a1.element = 'cl'     ) AND     EXISTS (         SELECT 1 FROM atom a2 WHERE a2.atom_id = c2.atom_id AND a2.element = 'c'     );
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c1 ON a.atom_id = c1.atom_id JOIN connected c2 ON a.atom_id = c2.atom_id JOIN bond b1 ON c1.bond_id = b1.bond_id JOIN bond b2 ON c2.bond_id = b2.bond_id WHERE a.element = 'C' AND b1.bond_type = '#' AND b2.bond_type = '#' AND m.label = '-' LIMIT 2;
SELECT      (SUM(CASE WHEN atom.element = 'Cl' THEN 1 ELSE 0 END)       OVER () * 100.0 / COUNT(molecule.molecule_id)) AS chlorine_percentage FROM      atom JOIN      connected ON atom.atom_id = connected.atom_id JOIN      bond ON connected.bond_id = bond.bond_id JOIN      molecule ON bond.molecule_id = molecule.molecule_id WHERE      molecule.label = '+';
SELECT atom.element  FROM molecule  JOIN connected ON molecule.molecule_id = connected.molecule_id  JOIN atom ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2  WHERE molecule.label = 'TR001';
SELECT molecule_id FROM bond WHERE bond_type = ' = ';
SELECT atom.atom_id, atom2.atom_id AS atom_id2 FROM connected c JOIN bond b ON b.bond_id = c.bond_id JOIN atom atom ON atom.atom_id = c.atom_id JOIN atom atom2 ON atom2.atom_id = c.atom_id2 WHERE b.bond_type = '#' AND b.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = 'triple bond') GROUP BY c.molecule_id;
SELECT atom.element  FROM atom  JOIN connected ON atom.atom_id = connected.atom_id  JOIN connected ON atom.atom_id = connected.atom_id2  JOIN bond ON connected.bond_id = bond.bond_id  WHERE bond.bond_id = 'TR005_16_26';
SELECT COUNT(*)  FROM molecule  WHERE molecule_id IN (     SELECT c1.molecule_id      FROM connected c1      JOIN connected c2 ON c1.atom_id = c2.atom_id2 AND c1.atom_id <> c2.atom_id2      WHERE c1.bond_id = c2.bond_id      AND EXISTS (         SELECT 1          FROM bond b          WHERE b.bond_id = c1.bond_id          AND b.bond_type = '-'      )      GROUP BY c1.molecule_id  ) AND label = '-';
SELECT molecule.label  FROM bond  JOIN connected ON bond.bond_id = connected.bond_id  JOIN atom ON atom.atom_id = connected.atom_id OR atom.atom_id2 = connected.atom_id2  JOIN molecule ON atom.molecule_id = molecule.molecule_id  WHERE bond.bond_id = 'TR001_10_11';
SELECT      c.bond_id,     COALESCE(m.label, '?') AS carcinogenic_status FROM      connected c JOIN      bond b ON c.bond_id = b.bond_id JOIN      molecule m ON m.molecule_id = b.molecule_id WHERE      b.bond_type = '#' AND      m.label IN ('+', '-')
SELECT      mol.label,     atom.element FROM      molecule AS mol JOIN      connected AS con ON mol.molecule_id = con.molecule_id JOIN      atom AS at ON con.atom_id = at.atom_id WHERE      mol.label = '+'     AND LENGTH(at.atom_id) = 7     AND SUBSTRING(at.atom_id, 7, 1) = '4'     AND at.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');
SELECT      label,     (COUNT(CASE WHEN atom.element = 'h' THEN 1 END) / COUNT(atom.element)) AS hydrogen_ratio FROM      atom JOIN      connected ON atom.atom_id = connected.atom_id JOIN      connected ON atom.atom_id = connected.atom_id2 JOIN      bond ON connected.bond_id = bond.bond_id JOIN      molecule ON bond.molecule_id = molecule.molecule_id WHERE      molecule.molecule_id = 'TR006' GROUP BY      molecule.label;
SELECT      m.label FROM      molecule m JOIN      atom a ON m.molecule_id = a.molecule_id WHERE      a.element = 'Ca' AND      m.label = '+';
SELECT b.bond_type  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  WHERE a.element = 'Te'  AND m.label IS NOT NULL;
SELECT atom.element  FROM bond  JOIN connected ON bond.bond_id = connected.bond_id  JOIN atom ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2  WHERE bond.bond_id = 'TR001_10_11'
SELECT      COUNT(*) FILTER (WHERE bond.bond_type = '#') * 100.0 / COUNT(*)  FROM      bond;
SELECT      (SUM(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond.bond_id)) AS double_bond_percentage FROM      bond JOIN      molecule ON bond.molecule_id = molecule.molecule_id WHERE      molecule.label = 'TR047';
SELECT molecule.label  FROM atom  JOIN connected ON atom.atom_id = connected.atom_id  JOIN connected ON atom.atom_id = connected.atom_id2  JOIN bond ON connected.bond_id = bond.bond_id  JOIN molecule ON molecule.molecule_id = atom.molecule_id  WHERE atom.element = 'TR001_1' AND molecule.label = '+';
SELECT molecule.label  FROM molecule  JOIN connected ON molecule.molecule_id = connected.molecule_id  JOIN atom ON connected.atom_id = atom.atom_id OR connected.atom_id2 = atom.atom_id  JOIN bond ON connected.bond_id = bond.bond_id  WHERE atom.element = 'C' AND molecule.label = '+';
SELECT atom.element  FROM atom  JOIN connected ON atom.atom_id = connected.atom_id  JOIN connected ON atom.atom_id = connected.atom_id2  JOIN bond ON connected.bond_id = bond.bond_id  JOIN molecule ON bond.molecule_id = molecule.molecule_id  WHERE molecule.label = 'TR151'  AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');
SELECT COUNT(*)  FROM molecule  WHERE EXISTS (     SELECT 1      FROM atom      WHERE molecule_id = molecule.molecule_id AND element = 'C'     GROUP BY molecule.molecule_id     HAVING COUNT(DISTINCT element) >= 6     AND EXISTS (         SELECT 1          FROM bond          WHERE bond.molecule_id = molecule.molecule_id AND bond.bond_type IN ('single', 'double', 'triple')         GROUP BY bond_id         HAVING COUNT(*) > 1     )     AND EXISTS (         SELECT 1          FROM connected          WHERE connected.atom_id IN (SELECT atom.atom_id FROM atom WHERE molecule_id = molecule.molecule_id)         GROUP BY connected.atom_id         HAVING COUNT(*) > 1     ) ) AND label = '+';
SELECT a.atom_id  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2  JOIN bond b ON b.bond_id = c.bond_id  WHERE m.label LIKE 'TR%' AND SUBSTR(m.molecule_id, 3, 3) BETWEEN 10 AND 50  AND a.element = 'C';
SELECT COUNT(DISTINCT a.atom_id) FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE m.label = '+';
SELECT c.bond_id FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m1 ON c.atom_id = m1.molecule_id JOIN molecule m2 ON c.atom_id2 = m2.molecule_id WHERE b.bond_type = '==' AND m1.label = '+' AND m2.label = '+';
SELECT COUNT(*)  FROM molecule  JOIN atom ON molecule.molecule_id = atom.molecule_id  WHERE atom.element = 'H' AND molecule.label = '+'
SELECT T3.molecule_id  FROM bond AS T1  JOIN connected AS T2 ON T1.bond_id = T2.bond_id  JOIN atom AS T3 ON T2.atom_id = T3.atom_id  JOIN atom AS T4 ON T2.atom_id2 = T4.atom_id  WHERE T1.molecule_id = 'TR00_1_2' AND T3.element = 'TR00_1' AND T4.element = 'TR00_1';
SELECT atom.atom_id  FROM atom  JOIN connected ON atom.atom_id = connected.atom_id  JOIN connected ON atom.atom_id = connected.atom_id2  JOIN bond ON connected.bond_id = bond.bond_id  JOIN molecule ON bond.molecule_id = molecule.molecule_id  WHERE atom.element = 'C' AND molecule.label = '-'
SELECT      (SUM(CASE WHEN m.label = '+' AND a.element = 'H' THEN 1 ELSE 0 END)      / CAST(COUNT(m.molecule_id) AS REAL)) * 100.0 AS percentage_carcinogenic_with_hydrogen FROM      molecule m JOIN      connected c ON m.molecule_id = c.molecule_id JOIN      atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id JOIN      bond b ON c.bond_id = b.bond_id JOIN      atom a2 ON b.bond_id = a2.bond_id AND (c.atom_id = a2.atom_id OR c.atom_id2 = a2.atom_id) WHERE      m.label = '+' AND a.element = 'H';
SELECT molecule.label  FROM molecule  JOIN connected ON molecule.molecule_id = connected.molecule_id  JOIN atom ON connected.atom_id = atom.atom_id OR connected.atom_id2 = atom.atom_id  JOIN bond ON connected.bond_id = bond.bond_id  WHERE molecule.label = '+';
SELECT atom.element  FROM molecule  JOIN connected ON molecule.molecule_id = connected.molecule_id  JOIN atom ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2  WHERE molecule.label = 'TR186';
SELECT      b.bond_type  FROM      molecule m  JOIN      connected c ON m.molecule_id = c.molecule_id  JOIN      atom a ON a.atom_id = c.atom_id2  JOIN      atom a2 ON a2.atom_id = c.atom_id  JOIN      bond b ON b.bond_id = c.bond_id  WHERE      m.label = 'TR007_4_19';
SELECT atom.element  FROM atom  JOIN connected ON atom.atom_id = connected.atom_id  JOIN connected ON atom.atom_id = connected.atom_id2  JOIN bond ON connected.bond_id = bond.bond_id  WHERE bond.molecule_id IN (     SELECT molecule.molecule_id      FROM bond      JOIN molecule ON bond.molecule_id = molecule.molecule_id      WHERE bond.bond_id = 'TR001_2_4' )
SELECT COUNT(*) AS double_bonds_count, COALESCE(m.label, '-') AS carcinogenicity  FROM molecule  JOIN connected ON molecule.molecule_id = connected.atom_id OR molecule.molecule_id = connected.atom_id2  JOIN bond ON bond.bond_id = connected.bond_id  WHERE molecule.label = '+' AND EXISTS (     SELECT 1 FROM atom WHERE atom.molecule_id = molecule.molecule_id AND atom.element = 'C' ) AND COUNT(bond.bond_id) > 3;
SELECT M.molecule_id, M.label, A.element  FROM molecule M JOIN connected C ON M.molecule_id = C.molecule_id JOIN atom A ON C.atom_id = A.atom_id OR C.atom_id2 = A.atom_id WHERE M.label = '+' AND EXISTS (     SELECT * FROM atom AT WHERE AT.molecule_id = M.molecule_id AND (AT.element = 'cl' OR AT.element = 'c' OR AT.element = 'h' OR AT.element = 'o' OR AT.element = 's' OR AT.element = 'n' OR AT.element = 'p' OR AT.element = 'na' OR AT.element = 'br' OR AT.element = 'f' OR AT.element = 'i' OR AT.element = 'sn' OR AT.element = 'pb' OR AT.element = 'te' OR AT.element = 'ca') )
SELECT      b.bond_id,     a1.element AS atom1_element,     a2.element AS atom2_element FROM      bond b JOIN      connected c1 ON b.bond_id = c1.bond_id JOIN      atom a1 ON c1.atom_id = a1.atom_id JOIN      atom a2 ON c1.atom_id2 = a2.atom_id WHERE      b.bond_type = '-'
SELECT m.label, a.element  FROM molecule m  JOIN atom a ON m.molecule_id = a.molecule_id  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON b.bond_id = c.bond_id  WHERE b.bond_type = '#'  GROUP BY m.molecule_id, a.element;
SELECT atom.element  FROM atom  JOIN connected ON atom.atom_id = connected.atom_id  JOIN connected ON atom.atom_id = connected.atom_id2  WHERE connected.bond_id = 'TR000_2_3';
SELECT COUNT(*)  FROM bond  JOIN connected ON bond.bond_id = connected.bond_id  JOIN atom ON connected.atom_id = atom.atom_id  WHERE atom.element = 'cl';
SELECT      a.atom_id,     COUNT(DISTINCT b.bond_id) AS bond_types_count FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id JOIN      connected c ON a.atom_id = c.atom_id JOIN      bond b ON c.bond_id = b.bond_id WHERE      m.label = 'TR346' GROUP BY      a.atom_id;
SELECT COUNT(*) AS num_double_bond_molecules,         COUNT(m.label) AS num_carcinogenic_molecules  FROM molecule m  JOIN connected c ON m.molecule_id = c.molecule_id  JOIN bond b ON c.bond_id = b.bond_id  WHERE b.bond_type = ' = '  AND m.label = '+';
SELECT COUNT(*)  FROM molecule  WHERE molecule_id NOT IN (     SELECT DISTINCT c1.molecule_id      FROM connected c1      JOIN atom a1 ON c1.atom_id = a1.atom_id      JOIN atom a2 ON c1.atom_id2 = a2.atom_id      JOIN bond b ON c1.bond_id = b.bond_id      WHERE a1.element != 'S' AND b.bond_type != ' = ' AND b.bond_type != ' = ' ) AND EXISTS (     SELECT 1      FROM atom a      WHERE a.atom_id NOT IN (         SELECT atom_id          FROM connected          JOIN bond ON connected.bond_id = bond.bond_id          WHERE bond.bond_type = ' = '      ) AND a.element != 'S'      AND a.molecule_id = molecule.molecule_id );
SELECT molecule.label  FROM bond  JOIN connected ON bond.bond_id = connected.bond_id  JOIN atom ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2  JOIN molecule ON molecule.molecule_id = atom.molecule_id  WHERE bond.bond_id = 'TR001_2_4' AND (molecule.label = '+' OR atom.element = 'C') ;
SELECT COUNT(*)  FROM atom  JOIN molecule ON atom.molecule_id = molecule.molecule_id  WHERE molecule.label = 'TR005';
SELECT COUNT(*)  FROM bond  WHERE bond_type = '-';
SELECT DISTINCT m.molecule_id  FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' AND m.label = '+';
SELECT DISTINCT m.molecule_id  FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'c' AND m.label = '-';
SELECT      (SUM(CASE WHEN m.label = '+' AND a.element = 'cl' THEN 1 ELSE 0 END)      / COUNT(m.molecule_id)) * 100 AS percentage FROM      molecule m JOIN      connected c ON m.molecule_id = c.molecule_id JOIN      atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE      m.label = '+' AND a.element = 'cl';
SELECT molecule_id  FROM bond  WHERE bond_id = 'TR001_1_7';
SELECT COUNT(DISTINCT atom.element)  FROM atom  JOIN connected ON atom.atom_id = connected.atom_id  JOIN connected ON atom.atom_id = connected.atom_id2  JOIN bond ON connected.bond_id = bond.bond_id  WHERE bond.bond_id = 'TR001_3_4';
SELECT      b.bond_type  FROM      bond b JOIN      connected c1 ON b.bond_id = c1.bond_id JOIN      connected c2 ON b.bond_id = c2.bond_id WHERE      c1.atom_id IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR000_1') AND     c1.atom_id2 IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR000_1') AND     c2.atom_id IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR000_2') AND     c2.atom_id2 IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR000_2')
SELECT molecule.label  FROM molecule  JOIN connected ON molecule.molecule_id = connected.molecule_id  WHERE connected.atom_id IN ('TR000_2', 'TR000_4')  GROUP BY molecule.molecule_id  HAVING COUNT(*) = 2;
SELECT element  FROM atom  WHERE atom_id = 'TR000_1'
SELECT      molecule.label  FROM      molecule  WHERE      molecule.molecule_id = (SELECT                                 connected.atom_id2                           FROM                               connected                           WHERE                               connected.atom_id IN (SELECT                                                        atom.atom_id                                                  FROM                                                      atom                                                  WHERE                                                      atom.molecule_id = (SELECT                                                                              molecule.molecule_id                                                                        FROM                                                                            molecule                                                                        WHERE                                                                            molecule.label = '+'                                                                         AND molecule.molecule_id = 'TR000')))  AND molecule.label = '-';
SELECT      (SUM(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) / CAST(COUNT(bond.bond_id) AS REAL)) * 100 AS percentage_single_bond FROM      bond
SELECT COUNT(*)  FROM molecule  JOIN atom ON molecule.molecule_id = atom.molecule_id   WHERE atom.element = 'N' AND molecule.label = '+';
SELECT m.label  FROM molecule m  JOIN atom a ON m.molecule_id = a.molecule_id  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  WHERE a.element = 'S' AND b.bond_type = ' = '
SELECT m.label, COUNT(a.atom_id) AS atom_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '-' GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5;
SELECT atom.element  FROM atom  JOIN connected ON atom.atom_id = connected.atom_id  JOIN connected ON atom.atom_id = connected.atom_id2  JOIN bond ON connected.bond_id = bond.bond_id  JOIN molecule ON atom.molecule_id = molecule.molecule_id  WHERE molecule.label = 'TR024' AND bond.bond_type = '='
SELECT m.label, m.molecule_id  FROM molecule m  JOIN atom a ON m.molecule_id = a.molecule_id  WHERE m.label = '+' GROUP BY m.molecule_id ORDER BY COUNT(a.atom_id) DESC LIMIT 1;
SELECT      (SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END)       / COUNT(molecule.molecule_id))     * 100.0 AS carcinogenic_percentage FROM      molecule  JOIN      connected ON molecule.molecule_id = connected.molecule_id  JOIN      bond ON connected.bond_id = bond.bond_id  JOIN      atom ON atom.atom_id = connected.atom_id  WHERE      atom.element = 'H' AND bond.bond_type = '#';
SELECT COUNT(*)  FROM molecule  WHERE label = '+';
SELECT COUNT(*)  FROM molecule  WHERE molecule_id BETWEEN 'TR004' AND 'TR010' AND EXISTS (     SELECT 1      FROM bond      WHERE bond.bond_id = connected.bond_id      AND bond.bond_type = '-'     GROUP BY bond.bond_id      HAVING COUNT(bond_id) = 1 )
SELECT COUNT(*)  FROM atom  JOIN molecule ON atom.molecule_id = molecule.molecule_id  WHERE molecule.label = 'TR008' AND atom.element = 'C';
SELECT `element` FROM `atom` JOIN `molecule` ON `atom.molecule_id` = `molecule.molecule_id` JOIN `connected` ON `atom.atom_id` = `connected.atom_id` JOIN `bond` ON `bond.bond_id` = `connected.bond_id` WHERE `atom.atom_id` = 'TR004_7' AND `molecule.label` = '-'
SELECT COUNT(*)  FROM molecule  WHERE molecule_id IN (     SELECT c1.molecule_id      FROM connected c1      JOIN connected c2 ON c1.bond_id = c2.bond_id AND c1.atom_id < c2.atom_id      WHERE c1.atom_id IN (         SELECT atom_id          FROM atom          WHERE element = 'O'     )      AND c2.atom_id IN (         SELECT atom_id          FROM atom          WHERE element = 'O'     )      AND EXISTS (         SELECT *          FROM bond b          WHERE b.bond_id = c1.bond_id AND b.bond_type = '='     )  )
SELECT COUNT(*)  FROM molecule  WHERE molecule_id IN (     SELECT c1.molecule_id      FROM connected c1      JOIN connected c2 ON c1.bond_id = c2.bond_id AND c1.atom_id < c2.atom_id      JOIN bond b ON c1.bond_id = b.bond_id      WHERE b.bond_type = '#'  )  AND molecule.id IN (     SELECT m.id      FROM molecule m      JOIN atom a1 ON m.id = a1.molecule_id      JOIN atom a2 ON a1.element = a2.element      WHERE a1.element != a2.element  ) AND m.label = '-';
SELECT T1.element, T3.bond_type  FROM atom AS T1  JOIN connected AS T2 ON T1.atom_id = T2.atom_id  JOIN connected AS T4 ON T2.atom_id2 = T4.atom_id2  JOIN bond AS T3 ON T3.bond_id = T2.bond_id OR T3.bond_id = T4.bond_id  WHERE T1.molecule_id = 'TR016'
SELECT a.atom_id  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN connected c2 ON a.atom_id = c2.atom_id2  JOIN bond b ON c.bond_id = b.bond_id  JOIN bond b2 ON c2.bond_id = b2.bond_id  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE m.label = 'TR012'  AND a.element = 'C'  AND b.bond_type = '='  AND b2.bond_type = '=';
SELECT atom.atom_id  FROM molecule  JOIN connected ON molecule.molecule_id = connected.atom_id  JOIN atom ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2  WHERE molecule.label = '+' AND atom.element = 'O';
SELECT * FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT id  FROM cards  WHERE borderColor = 'borderless' AND cardKingdomFoilId IS NULL AND cardKingdomId IS NOT NULL;
SELECT name  FROM cards  WHERE faceConvertedManaCost > convertedManaCost;
SELECT name  FROM cards  WHERE EDHRecRank < 100 AND frameVersion = 2015;
SELECT c.name FROM cards c JOIN legalities l ON c.id = l.id WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator';
SELECT      c.name FROM      cards c JOIN      legalities l ON c.id = l.uuid WHERE      c.types LIKE '%Artifact%' AND c.side IS NULL AND c.setCode IN (SELECT s.code FROM sets s WHERE s.type = 'Standard' AND s.name LIKE '%Vintage%') AND l.format = 'vintage'
SELECT `cards.id`, `cards.artist` FROM `cards` JOIN `legalities` ON `cards.uuid` = `legalities.uuid` WHERE `cards.power` = '*' OR `cards.power` IS NULL AND `legalities.format` = 'commander' AND `legalities.status` = 'Legal';
SELECT      c.name,     r.text AS ruling_text FROM      cards c JOIN      set_translations st ON c.setCode = st.setCode AND c.artist LIKE '%Stephen Daniele%' AND c.uuid = st.uuid JOIN      rulings r ON c.uuid = r.uuid WHERE      c.hasContentWarning = 1;
SELECT      rulings.text  FROM      cards  JOIN      rulings ON cards.id = rulings.uuid  WHERE      cards.name = 'Sublime Epiphany' AND cards.number = '74s';
SELECT      c.name,      c.artist,      COUNT(r.id) AS ruling_count,     c.isPromo FROM      cards c JOIN      rulings r ON c.id = r.uuid GROUP BY      c.id HAVING      COUNT(r.id) = (SELECT MAX(num_rulings) FROM          (SELECT COUNT(*) AS num_rulings FROM rulings GROUP BY uuid) tmp) AND c.isPromo = 1;
SELECT      s.language FROM      cards c JOIN      set_translations st ON c.setCode = st.setCode AND c.number = '29' JOIN      sets s ON st.setCode = s.code WHERE      c.name = 'annul';
SELECT c.name FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.language = 'Japanese' AND c.isAlternative = 1;
SELECT      (SUM(CASE WHEN f.language = 'Chinese Simplified' THEN c.id ELSE 0 END) * 100.0 / COUNT(c.id)) as percentage FROM      cards c JOIN      foreign_data f ON c.id = f.id
SELECT      s.name AS Set_Name,     s.totalSetSize AS Total_Cards FROM      sets s JOIN      set_translations st ON s.id = st.setID WHERE      st.language = 'Italian';
SELECT COUNT(DISTINCT c.types)  FROM cards c  JOIN card_art ca ON c.id = ca.card_id  WHERE c.artist = 'Aaron Boyd'
SELECT keywords  FROM cards  WHERE name = 'Angel of Mercy';
SELECT COUNT(*)  FROM cards  WHERE power = '*';
SELECT promoTypes  FROM cards  WHERE name = 'Duress';
SELECT `borderColor`  FROM cards  WHERE `name` = 'Ancestor\'s Chosen';
SELECT type  FROM cards  WHERE name = 'Ancestor\'s Chosen';
SELECT DISTINCT T2.language  FROM cards AS T1  JOIN set_translations AS T2 ON T1.setCode = T2.setCode  WHERE T1.name = 'Angel of Mercy';
SELECT COUNT(*)  FROM cards  JOIN legalities ON cards.uuid = legalities.uuid  WHERE legalities.status = 'restricted' AND cards.isTextless = 0;
SELECT r.text  FROM rulings AS r  JOIN cards AS c ON r.uuid = c.id  WHERE c.name = 'Condemn';
SELECT COUNT(*)  FROM cards  JOIN legalities ON cards.uuid = legalities.uuid  WHERE legalities.status = 'restricted' AND cards.isStarter = 1;
SELECT l.status  FROM cards c  JOIN rulings r ON c.name = r.uuid  JOIN legalities l ON c.name = l.uuid  WHERE c.name = 'Cloudchaser Eagle';
SELECT type  FROM cards  WHERE name = 'Benalish Knight';
SELECT r.text  FROM rulings AS r  JOIN cards AS c ON r.uuid = c.uuid  WHERE c.name = 'Benalish Knight';
SELECT DISTINCT artist  FROM cards  JOIN set_translations ON cards.setCode = set_translations.setCode  WHERE set_translations.translation = 'Phyrexian';
SELECT      (COUNT(CASE WHEN c.borderColor = 'borderless' THEN 1 END)       / CAST(COUNT(c.id) AS REAL)) * 100 AS borderless_card_percentage FROM      cards c;
SELECT COUNT(*)  FROM cards  JOIN set_translations ON cards.setCode = set_translations.setCode  WHERE set_translations.language = 'German' AND cards.isReprint = 1;
SELECT COUNT(*)  FROM cards  JOIN set_translations ON cards.setCode = set_translations.setCode  WHERE cards.borderColor = 'borderless' AND set_translations.language = 'Russian';
SELECT      (COUNT(CASE WHEN c.isStorySpotlight = 1 AND fd.language = 'French' THEN 1 END) * 100.0 / COUNT(c.id)) FROM      cards c JOIN      foreign_data fd ON c.id = fd.multiverseid WHERE      c.isStorySpotlight = 1;
SELECT COUNT(*)  FROM cards  WHERE toughness = 99;
SELECT name  FROM cards  WHERE artist = 'Aaron Boyd';
SELECT COUNT(*)  FROM cards  WHERE borderColor = 'black' AND availability = 'mtgo';
SELECT id  FROM cards  WHERE convertedManaCost = 0;
SELECT `cards.layout` FROM `cards` JOIN `keywords` ON `cards.keywords` = `keywords.id` WHERE `keywords.keyword` = 'flying';
SELECT COUNT(*)  FROM cards  WHERE originalType = 'Summon - Angel'  AND NOT (SUBSTRING_INDEX(type, 'Angel', -1) = 'Angel');
SELECT `cards.id`  FROM `cards`  WHERE `cards.cardKingdomFoilId` IS NOT NULL AND `cards.cardKingdomId` IS NOT NULL;
SELECT id  FROM cards  WHERE duelDeck = 'a';
SELECT `edhrecRank`  FROM `cards`  WHERE `frameVersion` = '2015';
SELECT DISTINCT artist  FROM cards  JOIN set_translations ON cards.setCode = set_translations.setCode  WHERE set_translations.language = 'Chinese Simplified';
SELECT c.name FROM cards c JOIN foreign_data fd ON c.id = fd.multiverseid WHERE c.availability = 'paper' AND fd.language = 'Japanese';
SELECT COUNT(*)  FROM cards  JOIN legalities ON cards.id = legalities.uuid  WHERE legalities.status = 'Banned' AND cards.borderColor = 'white';
SELECT      c.uuid,     fd.language FROM      cards c JOIN      legalities l ON c.name = l.name AND l.format = 'legacy' JOIN      foreign_data fd ON c.name = fd.name WHERE      l.status = 'legal';
SELECT r.text  FROM rulings AS r  WHERE r.uuid IN (     SELECT l.uuid      FROM cards AS c      JOIN legalities AS l ON c.id = l.id      WHERE c.name = 'Beacon of Immortality' );
SELECT COUNT(*) AS num_future_frame_cards, l.status AS legality_status FROM cards c JOIN set_translations st ON c.setCode = st.setCode JOIN legalities l ON l.uuid = c.uuid AND l.status = 'legal' WHERE st.translation = 'future frame version' AND c.frameVersion = 'future';
SELECT      c.name,      c.colors  FROM      cards c  JOIN      sets s ON c.setCode = s.code  WHERE      s.setCode = 'OGW';
SELECT DISTINCT c.name, s.translation  FROM cards c  JOIN set_translations st ON c.setCode = st.setCode  JOIN sets s ON st.setCode = s.setCode  WHERE c.convertedManaCost = 5 AND s.id = (SELECT id FROM sets WHERE code = '10E');
SELECT c.name, r.date  FROM cards c  JOIN set_translations st ON c.setCode = st.setCode  JOIN rulings r ON c.uuid = r.uuid  WHERE c.originalType = 'Creature - Elf';
SELECT      c.colors,      l.format  FROM      cards c  JOIN      legalities l ON c.uuid = l.uuid  WHERE      c.id BETWEEN 1 AND 20;
SELECT c.* FROM cards c JOIN foreign_data fd ON c.id = fd.multiverseid WHERE c.originalType = 'Artifact' AND c.colors LIKE '%B%' AND fd.language <> 'en';
SELECT c.name FROM cards c JOIN legalities l ON c.id = l.id WHERE c.rarity = 'uncommon' ORDER BY COALESCE(r.text, '') ASC;
SELECT COUNT(*)  FROM cards  JOIN foreign_data ON cards.cardKingdomId = foreign_data.multiverseid  WHERE artist = 'John Avon' AND (cardKingdomFoiledId IS NOT NULL AND cardKingdomFoiledId != cards.id)
SELECT COUNT(*)  FROM cards  WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT COUNT(*)  FROM cards  WHERE artist = 'UDON'  AND availability = 'mtgo'  AND hand = -1;
SELECT COUNT(*)  FROM cards  WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1;
SELECT `manaCost`  FROM `cards`  WHERE `layout` = 'normal'  AND `frameVersion` = '2003'  AND `borderColor` = 'black'  AND `availability` IN ('paper', 'mtgo');
SELECT SUM(T1.manaCost)  FROM cards AS T1  JOIN artists AS T2  ON T1.artist = T2.name  WHERE T2.name = 'Rob Alexander'
SELECT DISTINCT types, subtypes, supertypes FROM cards WHERE availability = 'arena';
SELECT DISTINCT s.setCode  FROM cards c  JOIN set_translations st ON c.setCode = st.setCode  WHERE st.language = 'Spanish';
SELECT      (COUNT(CASE WHEN cards.hand = '+3' AND cards.frameEffects = 'legendary' THEN 1 END) * 100.0 / COUNT(cards.id)) FROM      cards WHERE      cards.frameEffects = 'legendary';
SELECT      c.id FROM      cards c JOIN      (SELECT          SUM(CASE WHEN c.isStoryspotlight = 1 AND c.isTextless = 1 THEN 1 ELSE 0 END) as spotlight_text_box_count,         COUNT(*) as total_count      FROM           cards c     ) subquery  ON      1=1 WHERE      c.isStoryspotlight = 1 AND c.isTextless = 1  ORDER BY      c.id;
SELECT      c.name,     (COUNT(c.id) / COUNT(total_cards) * 100) as percentage_in_spanish FROM      cards c JOIN      set_translations st ON c.setCode = st.setCode AND st.language = 'Spanish' GROUP BY      c.name ORDER BY      percentage_in_spanish DESC;
SELECT DISTINCT stt.language  FROM sets s  JOIN set_translations stt ON s.id = stt.setCode  WHERE s.baseSetSize = 309;
SELECT COUNT(*)  FROM set_translations  JOIN sets ON set_translations.setCode = sets.setCode  WHERE sets.block = 'Commander'  AND set_translations.language = 'Portuguese (Brasil)';
SELECT c.* FROM cards c JOIN legalities l ON c.setCode = l.setCode AND c.types LIKE '%Creature%' WHERE l.status = 'legal'
SELECT      c.types,      s.translation AS german_translation FROM      cards c JOIN      set_translations s ON c.setCode = s.setCode AND s.language = 'de' WHERE      c.types IS NOT NULL AND c.supertypes IS NOT NULL;
SELECT COUNT(*)  FROM cards  WHERE power IS NULL AND (power = '*' OR power IS NULL)
SELECT COUNT(*)  FROM cards c  JOIN rulings r ON c.uuid = r.uuid  WHERE c.code = 'PM'  AND r.text = 'This is a triggered mana ability'  AND c.side IS NULL;
SELECT `cards.id`  FROM `cards`  JOIN `legalities` ON `legalities.card_id` = `cards.id`  WHERE `cards.artist` = 'Erica Yang'  AND `legalities.format` = 'pauper'  AND `cards.availability` = 'paper';
SELECT `artist`  FROM cards  JOIN foreign_data fd ON cards.id = fd.multiverseid  WHERE `text` = 'Das perfekte Gegenmittel zu einer dichten Formation';
SELECT f.name  FROM foreign_data f  JOIN cards c ON f.multiverseid = c.mtgArenaId  WHERE c.layout = 'normal'  AND c.types LIKE '%Creature%'  AND f.language = 'French'  AND c.borderColor = 'black'  AND c.artist = 'Matthew D. Wilson';
SELECT COUNT(*)  FROM cards  JOIN rulings ON cards.uuid = rulings.uuid  WHERE cards.rarity = 'rare'  AND rulings.date = '2009-01-10';
SELECT      s.language FROM      sets s JOIN      set_translations st ON s.id = st.set_code WHERE      s.base_set_size = 180 AND      s.block = 'Ravnica';
SELECT      (COUNT(CASE WHEN c.hasContentWarning = 0 THEN 1 END)       OVER() / COUNT(c.id) OVER()) * 100  FROM      cards c  JOIN      legalities l ON c.uuid = l.uuid  WHERE      l.format = 'commander'  AND      l.status = 'legal';
SELECT      (COUNT(CASE WHEN c.power IS NULL OR c.power = '*' THEN 1 END) *       COUNT(*) OVER () / NULLIF((SELECT COUNT(*) FROM cards c2 WHERE c2.power IS NULL OR c2.power = '*'), 0)) * 100 AS percentage_of_cards_without_power_in_french FROM      cards c JOIN      set_translations st ON c.setCode = st.setCode WHERE      c.power IS NULL OR c.power = '*' AND st.language = 'French';
SELECT      (COUNT(CASE WHEN s.language = 'Japanese' AND s.type = 'expansion' THEN 1 ELSE NULL END)      / COUNT(CASE WHEN s.language = 'Japanese' THEN 1 ELSE NULL END)) * 100 AS percentage FROM      sets s JOIN      set_translations st ON s.id = st.setCode WHERE      st.language = 'Japanese';
SELECT `availability` FROM cards WHERE `artist` = 'Daren Bader';
SELECT COUNT(*)  FROM cards  WHERE borderColor = 'borderless' AND edhrecRank > 12000;
SELECT COUNT(*)  FROM cards  WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;
SELECT      c.name FROM      cards c JOIN      legalities l ON c.id = l.id WHERE      c.power IS NULL OR c.power = '*'      AND c.promoTypes = 'arenaleague' ORDER BY      c.name ASC LIMIT 3;
SELECT `set_translations.language` FROM `set_translations` JOIN `cards` ON `set_translations.setCode` = `cards.setCode` WHERE `cards.multiverseId` = 149934;
SELECT      c1.cardKingdomFoilId,     c2.cardKingdomId FROM      cards c1     JOIN cards c2 ON c1.name = c2.name WHERE      c1.cardKingdomFoilId IS NOT NULL AND c2.cardKingdomId IS NOT NULL ORDER BY      c1.cardKingdomFoilId ASC LIMIT 3;
SELECT      (COUNT(CASE WHEN c.isTextless = 1 AND c.layout = 'normal' THEN 1 ELSE NULL END)      / COUNT(c.id)) * 100 AS proportion FROM      cards c;
SELECT cards.number  FROM cards  WHERE side IS NULL  AND subtypes = 'Angel, Wizard';
SELECT      s.name,     st.translation AS mtgoCode FROM      sets s JOIN      set_translations st ON s.id = st.setCode WHERE      st.language = 'en' AND     (s.mtgoCode IS NULL OR s.mtgoCode = '') AND     st.translation IS NOT NULL ORDER BY      s.name ASC LIMIT 3;
SELECT DISTINCT t2.language  FROM sets AS t1  JOIN set_translations AS t2 ON t1.setCode = t2.setCode  WHERE t1.mcmName = 'Archenemy' AND t1.setCode = 'ARC';
SELECT `set_translations.translation`  FROM `sets`  JOIN `set_translations` ON `sets.id` = `set_translations.setCode`  WHERE `sets.id` = 5;
SELECT `setTranslations.language`, `sets.type`  FROM `sets`  JOIN `set_translations` ON `sets.id` = `set_translations.setCode`  WHERE `sets.id` = 206;
SELECT s.id, s.name  FROM sets AS s  JOIN set_translations AS st ON s.id = st.setCode  JOIN languages AS l ON st.language = 'Italian'  WHERE s.block = 'Shadowmoor'  ORDER BY s.name ASC  LIMIT 2;
SELECT `set.id`  FROM `sets`  JOIN `set_translations` ON `sets.code` = `set_translations.setCode`  WHERE `sets.isForeignOnly` = 1  AND `sets.isFoilOnly` = 1  AND `set_translations.language` = 'Japanese';
SELECT      s.setCode AS 'Russian_Set_Code',     COUNT(c.id) AS 'Total_Cards' FROM      sets s JOIN      set_translations st ON s.id = st.setId AND st.language = 'Russian' JOIN      cards c ON c.setCode = s.code GROUP BY      s.setCode ORDER BY      Total_Cards DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN T4.language = 'Chinese Simplified' AND T5.isOnlineOnly = 1 THEN 1 ELSE NULL END)      / COUNT(T4.language)) * 100 AS percentage FROM      cards AS T1 JOIN      set_translations AS T2 ON T2.uuid = T1.setCode JOIN      sets AS T3 ON T3.id = T2.setCode JOIN      foreign_data AS T4 ON T4.uuid = T3.code JOIN      set_translations AS T5 ON T5.uuid = T1.uuid;
SELECT COUNT(*)  FROM sets  WHERE language = 'Japanese' AND mtgoCode IS NULL OR mtgoCode = '';
SELECT id  FROM cards  WHERE borderColor = 'black';
SELECT `id`  FROM `cards`  WHERE `frameEffects` = 'extendedart';
SELECT * FROM cards  JOIN set_translations ON cards.setCode = set_translations.setCode AND set_translations.language = 'en'  WHERE cards.borderColor = 'black' AND cards.isFullArt = 1;
SELECT `language` FROM set_translations WHERE `setCode` = '174';
SELECT `name`  FROM `sets`  WHERE `code` = 'ALL';
SELECT f.language  FROM foreign_data f  JOIN cards c ON f.multiverseid = c.mtgjsonV4Id  WHERE c.name = 'A Pedra Fellwar';
SELECT `setCode` FROM `sets` WHERE `releaseDate` = '07/13/2007';
SELECT `baseSetSize`, `code` FROM `sets` WHERE `block` = 'Masques' UNION SELECT `baseSetSize`, `code` FROM `sets` WHERE `block` = 'Mirage';
SELECT setCode FROM sets WHERE type = 'expansion';
SELECT f.name, c.types  FROM cards AS c  JOIN foreign_data AS f ON c.watermark = 'boros' AND c.uuid = f.uuid;
SELECT f.language, f.flavorText, c.types  FROM cards c JOIN foreign_data f ON c.watermark = 'colorpie' AND f.multiverseid = c.multiverseId WHERE c.watermark = 'colorpie';
SELECT      (COUNT(CASE WHEN c.convertedManaCost = 10 THEN 1 END) * 100.0 / COUNT(c.convertedManaCost)) as percentage FROM      cards c JOIN      sets s ON c.setCode = s.code WHERE      s.name = 'Abyssal Horror';
SELECT `setCode`  FROM `sets`  WHERE `type` = 'expansion commander';
SELECT f.name, c.types  FROM cards AS c  JOIN foreign_data AS f ON c.watermark = f.uuid  WHERE c.watermark = 'abzan';
SELECT type  FROM cards  JOIN foreign_data ON cards.uuid = foreign_data.uuid  WHERE watermark = 'Azorius';
SELECT COUNT(*)  FROM cards  WHERE artist = 'Aaron Miller'  AND cardKingdomFoilId = cardKingdomId  AND cardKingdomId IS NOT NULL;
SELECT COUNT(*)  FROM cards  WHERE availability LIKE '%paper%' AND hand LIKE '+%'
SELECT name  FROM cards  WHERE isTextless = 0;
SELECT `convertedManaCost` FROM `cards` WHERE `name` = 'Ancestor`s Chosen';
SELECT COUNT(*)  FROM cards  WHERE borderColor = 'white' AND (power = '*' OR power IS NULL);
SELECT name  FROM cards  WHERE isPromo = 1 AND side IS NOT NULL;
SELECT subtypes, supertypes  FROM cards  WHERE name = 'Molimo, Maro-Sorcerer';
SELECT DISTINCT purchaseUrls  FROM cards  WHERE promoTypes = 'bundle';
SELECT COUNT(DISTINCT artist)  FROM cards  WHERE borderColor = 'black'  AND (availability LIKE '%arena%'       AND availability LIKE '%mtgo%')
SELECT      c1.name AS Card_Name_1,     c1.convertedManaCost AS Mana_Cost_1,     c2.name AS Card_Name_2,     c2.convertedManaCost AS Mana_Cost_2 FROM     cards c1 JOIN     cards c2 ON c1.convertedManaCost < c2.convertedManaCost WHERE     (c1.name = 'Serra Angel' OR c1.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE name = 'Serra Angel'))     AND (c2.name = 'Shrine Keeper' OR c2.convertedManaCost = (SELECT MIN(convertedManaCost) FROM cards WHERE name = 'Shrine Keeper'));
SELECT `artist` FROM cards WHERE `flavorName` = 'Battra, Dark Destroyer';
SELECT name  FROM cards  WHERE convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE frameVersion = '2003')  LIMIT 3;
SELECT st.translation  FROM set_translations st  JOIN sets s ON st.setCode = s.code  WHERE s.name = 'Ancestor\'s Chosen' AND st.language = 'Italian';
SELECT COUNT(*)  FROM cards c  JOIN set_translations st ON c.setCode = st.setCode  WHERE c.name = 'Angel of Mercy'
SELECT name  FROM cards  JOIN set_translations ON cards.setCode = set_translations.setCode  WHERE set_translations.translation = 'Hauptset Zehnte Edition';
SELECT      s.id,      sf.language  FROM      cards c  JOIN      sets s ON c.setCode = s.code  JOIN      set_translations sf ON s.setId = sf.setCode AND sf.language = 'Korean'  WHERE      c.name = 'Ancestor\'s Chosen';
SELECT COUNT(*)  FROM cards  JOIN set_translations ON cards.setCode = set_translations.setCode  WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND artist = 'Adam Rex';
SELECT COUNT(*)  FROM sets  JOIN set_translations ON sets.code = set_translations.setCode  WHERE sets.name = 'Hauptset Zehnte Edition' AND set_translations.translation = 'Hauptset Zehnte Edition';
SELECT st.translation  FROM set_translations st  JOIN sets s ON st.setCode = s.code  WHERE s.name = 'Eighth Edition' AND st.language = 'Simplified Chinese';
SELECT COUNT(*)  FROM cards  WHERE name = 'Angel of Mercy' AND cards.mtgoId IS NOT NULL;
SELECT `releaseDate`  FROM `cards`  WHERE `name` = 'Ancestor''s Chosen';
SELECT type  FROM sets  JOIN set_translations ON sets.id = set_translations.set_code  WHERE set_translations.language = 'en' AND set_translations.translation = 'Hauptset Zehnte Edition';
SELECT COUNT(*)  FROM sets  WHERE block = 'Ice Age'  AND translations.language = 'Italian';
SELECT      s.id, s.name, s.isForeignOnly FROM      cards c JOIN      sets s ON c.setCode = s.setCode WHERE      c.name = 'Adarkar Valkyrie' AND s.isForeignOnly = 1;
SELECT COUNT(*)  FROM sets  JOIN set_translations ON sets.id = set_translations.setCode  WHERE set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL AND sets.baseSetSize < 10;
SELECT COUNT(*)  FROM cards  WHERE name = 'Coldsnap' AND borderColor = 'black';
SELECT name  FROM cards  JOIN sets ON cards.setCode = sets.code  WHERE sets.name = 'Coldsnap'  ORDER BY convertedManaCost DESC  LIMIT 1;
SELECT DISTINCT c.artist  FROM cards c  JOIN sets s ON c.setCode = s.setCode  JOIN set_translations st ON s.setCode = st.setCode AND s.type = 'set'  WHERE c.artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy')  AND s.name = 'Coldsnap';
SELECT `name`  FROM cards  JOIN sets ON cards.setCode = sets.setCode  WHERE sets.name = 'Coldsnap' AND cards.number = 4;
SELECT COUNT(*)  FROM cards  JOIN sets ON cards.setCode = sets.setCode  WHERE sets.name = 'Coldsnap'  AND convertedManaCost > 5  AND (power = '*' OR power IS NULL);
SELECT f.text  FROM foreign_data f  JOIN set_translations st ON f.uuid = st.uuid  WHERE st.language = 'Italian' AND st.setCode = (SELECT s.setCode FROM sets s WHERE s.name = 'Ancestor''s Chosen');
SELECT DISTINCT language  FROM foreign_data  WHERE name = 'Ancestor''s Chosen' AND flavorText IS NOT NULL;
SELECT `setTranslations.translation` FROM `setTranslations` JOIN `sets` ON `setTranslations.setCode` = `sets.code` JOIN `cards` ON `cards.setCode` = `sets.code` WHERE `cards.name` = 'Ancestor''s Chosen' AND `setTranslations.language` = 'German';
SELECT      rulings.text  FROM      rulings  JOIN      set_translations ON rulings.uuid = set_translations.uuid  JOIN      sets ON set_translations.uuid = sets.uuid  WHERE      sets.name = 'Coldsnap' AND set_translations.language = 'Italian';
SELECT f.name FROM foreign_data f JOIN set_translations st ON f.uuid = st.uuid JOIN sets s ON st.setCode = s.code WHERE s.name = 'Coldsnap' AND f.language = 'Italian';
SELECT date  FROM rulings  JOIN cards ON rulings.uuid = cards.uuid  WHERE name = 'Reminisce';
SELECT      (SUM(CASE WHEN c.convertedManaCost = 7 THEN 1 ELSE 0 END) * 100.0 / COUNT(c.id)) as percentage FROM      cards c JOIN      sets s ON c.setCode = s.code WHERE      c.convertedManaCost = 7 AND s.name = 'Coldsnap';
SELECT      (COUNT(CASE WHEN c.name = 'Coldsnap' THEN c.id END) - COUNT(CASE WHEN c.name = 'Coldsnap' AND c.cardKingdomFoilId = c.cardKingdomId AND c.cardKingdomId IS NOT NULL THEN c.id END)) * 100 / COUNT(c.id) AS percentage_incredibly_powerful_cards FROM      cards c WHERE      c.name = 'Coldsnap';
SELECT `code`  FROM `sets`  WHERE `releaseDate` = '2017-07-14';
SELECT keyruneCode  FROM sets  WHERE code = 'PKHC';
SELECT `mcmId`  FROM `sets`  WHERE `code` = 'SS2';
SELECT cards.name, cards.mcmName  FROM cards  JOIN sets ON cards.setCode = sets.code  WHERE sets.releaseDate = '2017-06-09';
SELECT type  FROM sets  WHERE name LIKE '%From the Vault: Lore%';
SELECT `parentCode`  FROM `sets`  WHERE `name` = 'Commander 2014 Oversized';
SELECT      c.name,     r.text FROM      cards c JOIN      foreign_data fd ON c.multiverseId = fd.multiverseid JOIN      rulings r ON c.uuid = r.uuid WHERE      c.artist = 'Jim Pavelec' AND     c.hasContentWarning = 1;
SELECT `set.code`, `sets.releaseDate` FROM `cards`  JOIN `sets` ON `cards.setCode` = `sets.code` WHERE `cards.name` = 'Evacuation';
SELECT COUNT(*)  FROM cards  JOIN set_translations ON cards.setCode = set_translations.setCode  WHERE set_translations.translation = 'Rinascita di Alara';
SELECT type  FROM sets  JOIN set_translations ON sets.code = set_translations.setCode  WHERE set_translations.translation = 'Huitième édition';
SELECT `set_translations.translation` FROM `set_translations` JOIN `rulings` ON `set_translations.id` = `rulings.set_id` JOIN `cards` ON `cards.uuid` = `rulings.card_uuid` JOIN `foreign_data` ON `foreign_data.multiverseid` = `cards.multiverseId` WHERE `foreign_data.flavorText` = 'Tendo Ice Bridge' AND `language` = 'French';
SELECT COUNT(*)  FROM set_translations  WHERE name = 'Salvat 2011' AND translation IS NOT NULL;
SELECT set_translations.translation  FROM cards  JOIN set_translations ON cards.setCode = set_translations.setCode  JOIN sets ON sets.code = cards.setCode  WHERE cards.name = 'Fellwar Stone' AND set_translations.language = 'Japanese';
SELECT name  FROM cards  JOIN sets ON cards.setCode = sets.code  WHERE name = 'Journey into Nyx Hero''s Path'  ORDER BY convertedManaCost DESC  LIMIT 1;
SELECT `releaseDate`  FROM `sets`  JOIN `set_translations` ON `sets.code` = `set_translations.setCode`  WHERE `set_translations.language` = 'en' AND `set_translations.translation` = 'Ola de frío';
SELECT `type`  FROM `sets` JOIN `cards` ON `sets.code` = `cards.setCode` WHERE `cards.name` = 'Samite Pilgrim';
SELECT COUNT(*)  FROM cards  JOIN set_translations ON cards.setCode = set_translations.setCode  WHERE set_translations.translation = 'World Championship Decks 2004' AND cards.convertedManaCost = 3;
SELECT st.translation  FROM set_translations AS st  JOIN sets AS s ON st.setCode = s.code  WHERE st.language = 'Chinese Simplified' AND s.name = 'Mirrodin';
SELECT      (SUM(CASE WHEN c.isNonFoilOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) as percentage_japanese_non_foil FROM      cards c JOIN      set_translations st ON c.setCode = st.setCode WHERE      st.language = 'Japanese';
SELECT      (SUM(CASE WHEN `isOnlineOnly` = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) as online_only_percentage FROM      `cards` JOIN      `set_translations` ON `cards.setCode` = `set_translations.setCode` WHERE      `set_translations.language` = 'Portuguese (Brazil)';
SELECT DISTINCT availability  FROM cards  WHERE artist = 'Aleksi Briclot' AND isTextless = 1;
SELECT T1.id  FROM sets AS T1  JOIN set_translations AS T2 ON T1.setCode = T2.setCode  WHERE T1.baseSetSize = (SELECT MAX(baseSetSize) FROM sets)
SELECT T1.artist  FROM cards AS T1  JOIN cards AS T2 ON T1.mcmId = T2.mcmId AND T1.id <> T2.id  WHERE T2.faceName IS NOT NULL  AND T1.side IS NULL  ORDER BY T1.convertedManaCost DESC  LIMIT 1;
SELECT      MAX(frameEffects) AS most_common_frame_effects FROM      cards WHERE      cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
SELECT COUNT(*)  FROM cards  WHERE power IS NULL OR power = '*'  AND hasFoil = 0  AND duelDeck = 'a';
SELECT s.id FROM sets s JOIN (     SELECT setCode, MAX(totalSetSize) as max_cards     FROM sets     WHERE type = 'commander'     GROUP BY setCode ) max_sets ON s.code = max_sets.setCode WHERE s.totalSetSize = max_sets.max_cards;
SELECT c.name, c.manaCost  FROM cards c  WHERE c.layout = 'normal' AND c.faceName IS NULL AND c.types LIKE '%Instant%' OR c.types LIKE '%Sorcery%' AND c.setCode IN (SELECT s.code FROM sets s WHERE s.block = 'duel') ORDER BY c.manaCost DESC LIMIT 10;
SELECT      r.date,     f.format FROM      rulings AS r JOIN      cards AS c ON r.uuid = c.uuid JOIN      legalities AS l ON r.uuid = l.uuid JOIN      sets AS s ON c.setCode = s.setCode WHERE      c.rarity = 'mythic'     AND l.status = 'legal'     AND r.date = (SELECT MIN(date) FROM rulings WHERE uuid IN (SELECT uuid FROM cards WHERE rarity = 'mythic'));
SELECT COUNT(*)  FROM cards  JOIN artist ON cards.artist = artist.name  JOIN foreign_data ON cards.id = foreign_data.multiverseid  WHERE artist = 'Volkan Baga' AND language = 'French';
SELECT COUNT(*)  FROM cards  JOIN legalities ON cards.uuid = legalities.uuid  WHERE cards.rarity = 'Rare'  AND cards.types = 'Enchantment'  AND cards.name = 'Abundance'  AND legalities.status = 'Legal';
SELECT `format`, `name`  FROM `legalities`  WHERE `status` = 'banned'  GROUP BY `format`  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT `set_translations.language` FROM `sets` JOIN `set_translations` ON `sets.id` = `set_translations.set_code` WHERE `sets.name` = 'Battlebond';
SELECT      artist,     format FROM      cards WHERE      artist = (         SELECT              artist         FROM              cards         GROUP BY              artist         ORDER BY              COUNT(*) ASC         LIMIT 1     );
SELECT l.status FROM cards c JOIN set_translations st ON c.setCode = st.setCode AND st.language = 'en' JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = '1997' AND c.artist = 'D. Alexander Gregory' AND c.hasContentWarning = 1 AND l.format = 'legacy';
SELECT      c.name,     l.format FROM      cards c JOIN      legalities l ON c.uuid = l.uuid WHERE      c.edhrecRank = 1 AND l.status = 'banned';
SELECT      AVG(s.totalSetSize) AS AnnualAverageSets,     MAX(T1.translation) AS CommonLanguage FROM      sets s JOIN      set_translations T1 ON s.code = T1.setCode WHERE      s.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY      DATE_FORMAT(s.releaseDate, '%Y')
SELECT DISTINCT artist  FROM cards  WHERE borderColor = 'black' AND availability = 'arena';
SELECT c.uuid FROM cards c JOIN legalities l ON c.id = l.card_id WHERE l.format = 'oldschool' AND (l.status = 'banned' OR l.status = 'restricted');
SELECT COUNT(*)  FROM cards  WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';
SELECT r.text  FROM rulings r  JOIN cards c ON r.uuid = c.uuid  WHERE c.artist = 'Kev Walker'  ORDER BY r.date DESC;
SELECT      c.name FROM      cards c JOIN      set_translations st ON c.setCode = st.setCode AND c.name = st.translation JOIN      legalities l ON c.id = l.uuid WHERE      st.setCode = 'Hour of Devastation' AND      l.status = 'legal';
SELECT s.name FROM sets s JOIN set_translations st ON s.id = st.setCode WHERE st.language != '%Japanese%' AND st.language = 'Korean';
SELECT ct.frameVersion, c.name  FROM cards c JOIN foreign_data fd ON c.multiverseId = fd.multiverseid JOIN rulings r ON c.id = r.uuid WHERE c.artist = 'Allen Williams' AND r.status = 'banned';
SELECT      u.DisplayName,      u.Reputation  FROM      users u WHERE      u.DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY      u.Reputation DESC LIMIT 1;
SELECT DisplayName  FROM users  WHERE YEAR(CreationDate) = 2014;
SELECT COUNT(*)  FROM users  WHERE LastAccessDate > '2014-09-01 00:00:00'
SELECT DisplayName  FROM users  WHERE Views = (SELECT MAX(views) FROM users);
SELECT COUNT(*)  FROM users  WHERE UpVotes > 100 AND DownVotes > 1;
SELECT COUNT(*)  FROM users  WHERE Views > 10 AND YEAR(CreationDate) > 2013;
SELECT COUNT(*)  FROM posts  WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');
SELECT Title  FROM posts  WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie');
SELECT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Eliciting priors from experts';
SELECT Title  FROM posts  WHERE OwnerDisplayName = 'csgillespie'  ORDER BY ViewCount DESC  LIMIT 1;
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)
SELECT SUM(T2.CommentCount)  FROM posts AS T1  JOIN comments AS T2 ON T1.OwnerUserId = T3.Id  JOIN users AS T3 ON T3.DisplayName = 'csgillespie'  WHERE T1.OwnerDisplayName = 'csgillespie'
SELECT COUNT(*) AS num_answers  FROM posts  WHERE OwnerDisplayName = 'csgillespie'  AND AnswerCount = (SELECT MAX(AnswerCount) FROM posts);
SELECT u.DisplayName FROM posts p JOIN users u ON u.Id = p.LastEditorUserId WHERE p.Title = 'Examples for teaching: Correlation does not mean causation';
SELECT COUNT(*)  FROM posts  WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')  AND ParentId IS NULL;
SELECT DISTINCT u.DisplayName  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  WHERE p.ClosedDate IS NOT NULL;
SELECT COUNT(*)  FROM posts  JOIN users ON posts.OwnerUserId = users.Id  WHERE users.Age > 65 AND posts.Score >= 20;
SELECT u.Location FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Eliciting priors from experts';
SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'bayesian';
SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags)
SELECT COUNT(*)  FROM badges  WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');
SELECT Name  FROM badges  JOIN users ON badges.UserId = users.Id  WHERE users.DisplayName = 'csgillespie';
SELECT COUNT(*)  FROM badges  JOIN users ON badges.UserId = users.Id  WHERE users.DisplayName = 'csgillespie' AND YEAR(badges.Date) = 2011;
SELECT u.DisplayName FROM users u JOIN (     SELECT UserId, COUNT(Id) AS BadgeCount     FROM badges      GROUP BY UserId     ORDER BY BadgeCount DESC     LIMIT 1 ) b ON u.Id = b.UserId;
SELECT AVG(posts.Score)  FROM posts  JOIN users ON posts.OwnerUserId = users.Id  WHERE users.DisplayName = 'csgillespie'
SELECT      AVG(Count(Id)) / COUNT(u.DisplayName) AS AvgBadges FROM      badges b JOIN      users u ON b.UserId = u.Id JOIN      tags t ON b.Name = 'userbadge' WHERE      u.Views > 200;
SELECT      COUNT(p.Id) AS TotalPosts,     COUNT(p.Id) FILTER (WHERE u.Age > 65) AS ElderUsersPosts FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      p.Score > 20 ;
SELECT COUNT(*)  FROM votes  WHERE UserId = 58 AND CreationDate = '2010-07-19';
SELECT CreationDate  FROM votes  WHERE (Count(Id)) = (SELECT MAX(Count(Id)) FROM (SELECT COUNT(*) AS Count FROM votes GROUP BY CreationDate) subquery);
SELECT COUNT(*)  FROM badges  WHERE Name = 'Revival';
SELECT p.Title FROM posts p JOIN (     SELECT c.PostId, MAX(c.Score) as max_score     FROM comments c     GROUP BY c.PostId ) cm ON p.Id = cm.PostId WHERE cm.max_score = (SELECT MAX(sc.Score) FROM comments sc);
SELECT COUNT(*)  FROM comments  WHERE PostId = (SELECT Id FROM posts WHERE ViewCount = 1910);
SELECT COUNT(V.PostId)  FROM votes AS V  JOIN comments AS C ON C.Id = V.PostId  WHERE V.VoteTypeId = 2 AND C.UserId = 3025 AND C.CreationDate = '2014/4/23 20:29:39.0';
SELECT c.Text  FROM comments c  JOIN posts p ON c.PostId = p.Id  WHERE p.ParentId = 107829 AND c.CommentCount = 1;
SELECT p.Id, p.Title  FROM comments c  JOIN posts p ON c.PostId = p.Id  WHERE c.UserId = '23853'  AND c.CreationDate = '2013-07-12 09:08:18.0'  AND p.ClosedDate IS NULL;
SELECT u.Reputation  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  WHERE p.Id = 65041;
SELECT COUNT(*)  FROM posts  WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini');
SELECT u.DisplayName  FROM votes v  JOIN users u ON v.UserId = u.Id  WHERE v.Id = 6347;
SELECT COUNT(*)  FROM posts  WHERE Title LIKE '%data visualization%'
SELECT b.Name  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';
SELECT      COUNT(p.Id) AS PostCount,     COUNT(v.Id) AS VoteCount FROM      posts p  JOIN      users u ON p.OwnerUserId = '24' JOIN      votes v ON p.Id = v.PostId WHERE      u.Id = 24;
SELECT COUNT(*) AS total_views  FROM posts  WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';
SELECT Text  FROM comments  WHERE Score = 17;
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';
SELECT Name  FROM badges  WHERE UserId IN (     SELECT Id      FROM users      WHERE DisplayName = 'SilentGhost' );
SELECT u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text = 'thank you user93!';
SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion';
SELECT u.DisplayName, u.Reputation  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE p.Title = 'Understanding what Dassault iSight is doing?';
SELECT c.Text  FROM comments AS c  JOIN posts AS p ON c.PostId = p.Id  WHERE p.Title = 'How does gentle boosting differ from AdaBoost?';
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Necromancer' LIMIT 10;
SELECT p.OwnerDisplayName  FROM posts p  WHERE p.Title = 'Open source tools for visualizing multi-dimensional data'
SELECT Title  FROM posts  WHERE LastEditorUserId = (SELECT Id FROM users WHERE DisplayName = 'Vebjorn Ljosa');
SELECT SUM(p.Score) AS TotalScore, u.WebsiteUrl FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Yevgeny'
SELECT c.Text, u.DisplayName  FROM comments AS c  JOIN posts AS p ON c.PostId = p.Id  JOIN users AS u ON c.UserId = u.Id  WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'  AND EXISTS (     SELECT 1      FROM postHistory AS ph      WHERE ph.PostId = p.Id      AND ph.UserDisplayName IS NOT NULL  )
SELECT SUM(v.BountyAmount)  FROM posts p  JOIN votes v ON p.Id = v.PostId  WHERE p.Title LIKE '%data%'
SELECT u.DisplayName FROM votes v JOIN posts p ON v.PostId = p.Id JOIN users u ON v.UserId = u.Id WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%'
SELECT      p.Title,     c.Text AS Comment,     p.ViewCount FROM      posts p JOIN      tags t ON p.Tags LIKE '%humor%' JOIN      postTags pt ON p.Id = pt.PostId JOIN      comments c ON p.Id = c.PostId WHERE      c.Score IS NOT NULL GROUP BY      p.Title, c.Text, p.ViewCount HAVING      AVG(p.ViewCount) IS NOT NULL;
SELECT COUNT(*)  FROM comments  WHERE UserId = 13;
SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);
SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users);
SELECT COUNT(DISTINCT UserId)  FROM badges  WHERE Name = 'Supporter' AND DATEPART(YEAR, Date) = 2011;
SELECT COUNT(DISTINCT u.Id)  FROM users u  JOIN badges b ON u.Id = b.UserId  WHERE b.Name > 5;
SELECT COUNT(DISTINCT u.Id)  FROM users u  JOIN badges b1 ON u.Id = b1.UserId AND b1.Name = 'Supporter' JOIN badges b2 ON u.Id = b2.UserId AND b2.Name = 'Teachers' WHERE u.Location = 'New York';
SELECT u.DisplayName, u.Reputation  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE p.Id = 1;
SELECT U.DisplayName, COUNT(P.Id) AS PostCount FROM users U INNER JOIN posts P ON U.Id = P.OwnerUserId INNER JOIN postHistory PH ON P.Id = PH.PostId GROUP BY U.Id HAVING COUNT(DISTINCT PH.Id) = 1 AND P.ViewCount >= 1000;
SELECT      c.UserId,     u.DisplayName,     u.Id AS "UserId",     b.Name AS "BadgeName" FROM      comments c JOIN      users u ON c.UserId = u.Id JOIN      badges b ON u.Id = b.UserId WHERE      c.Id IN (         SELECT MAX(Count(Id))          FROM (             SELECT UserId, COUNT(Id) AS Count              FROM comments              GROUP BY UserId         ) t     ) ORDER BY      c.UserId;
SELECT COUNT(*)  FROM users  JOIN badges ON users.Id = badges.UserId  WHERE users.Location = 'India' AND badges.Name = 'Teacher';
SELECT      ((COUNT(CASE WHEN YEAR(`Date`) = 2010 THEN `Name` ELSE NULL END) / COUNT(*) -      COUNT(CASE WHEN YEAR(`Date`) = 2011 THEN `Name` ELSE NULL END) / COUNT(*)) * 100 AS PercentageDifference FROM `badges` WHERE `Name` = 'Students';
SELECT      pH.PostHistoryTypeId,     COUNT(DISTINCT c.UserId) AS UniqueCommenters FROM      postHistory AS pH JOIN      posts AS p ON pH.PostId = p.Id LEFT JOIN      comments AS c ON p.Id = c.PostId WHERE      p.Id = 3720 GROUP BY      pH.PostHistoryTypeId;
SELECT p.Id, p.Title, p.ViewCount  FROM posts AS p INNER JOIN postLinks AS pl ON p.Id = pl.PostId WHERE pl.RelatedPostId = 61217;
SELECT p.Score, pl.LinkTypeId  FROM posts p  JOIN postLinks pl ON p.Id = pl.PostId  WHERE p.Id = 395;
SELECT p.Id, u.Id  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE p.Score > 60;
SELECT SUM(posts.FavoriteCount) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Id = 686 AND YEAR(posts.CreationDate) = 2011;
SELECT      AVG(v.BountyAmount) AS AverageUpVotes,     AVG(u.Age) AS AverageUserAge FROM      votes v JOIN      users u ON v.UserId = u.Id WHERE      u.Count > 10
SELECT COUNT(DISTINCT UserId)  FROM badges  WHERE Name = 'Announcer';
SELECT Name  FROM badges  WHERE Date = '2010-07-19 19:39:08'
SELECT COUNT(*)  FROM comments  WHERE Score > 60;
SELECT Text  FROM comments  WHERE CreationDate = '2010-07-19 19:16:14.0'
SELECT COUNT(*)  FROM posts  WHERE Score = 10;
SELECT B.Name FROM badges B JOIN (     SELECT Id AS UserId     FROM users U     WHERE U.Reputation = (SELECT MAX(Reputation) FROM users) ) AS UserWithHighestReputation ON B.UserId = UserWithHighestReputation.UserId;
SELECT u.Reputation  FROM users u  JOIN badges b ON u.Id = b.UserId  WHERE b.Date = '2010-07-19 19:39:08.0';
SELECT `Name`  FROM `badges`  JOIN `users` ON `badges.UserId` = `users.Id`  WHERE `users.DisplayName` = 'Pierre'
SELECT badges.Date FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Location = 'Rochester, NY';
SELECT      (COUNT(b.UserId) / (SELECT COUNT(*) FROM codebase_community.badges) * 100) AS Percentage FROM      codebase_community.badges b WHERE      b.Name = 'Teacher';
SELECT      CAST(COUNT(u.Id) FILTER (WHERE u.Age BETWEEN 13 AND 18) AS REAL) * 100 / COUNT(b.UserId) as TeenagerPercentage  FROM      badges b  JOIN      users u ON b.UserId = u.Id  WHERE      b.Name = 'Organizer';
SELECT c.Score  FROM comments c  JOIN posts p ON c.PostId = p.Id  WHERE p.CreationDate = '2010-07-19 19:19:56.0'
SELECT c.Text  FROM comments c  JOIN posts p ON c.PostId = p.Id  WHERE p.CreationDate = '2010-07-19 19:37:33.0'
SELECT U.Age FROM users U JOIN badges B ON U.Id = B.UserId WHERE U.Location = 'Vienna, Austria';
SELECT COUNT(*)  FROM badges  JOIN users ON badges.UserId = users.Id  WHERE badges.Name = 'Supporter'  AND users.Age BETWEEN 19 AND 65;
SELECT COUNT(*)  FROM badges  JOIN users ON badges.UserId = users.Id  WHERE badges.Date = '2010-07-19 19:39:08.0'
SELECT B.Name FROM badges B JOIN users U ON B.UserId = U.Id WHERE U.Reputation = (SELECT MIN(Reputation) FROM users)
SELECT Name  FROM badges  WHERE UserId IN (     SELECT Id      FROM users      WHERE DisplayName = 'Sharpie' );
SELECT COUNT(*)  FROM badges  JOIN users ON badges.UserId = users.Id  WHERE badges.Name = 'Supporter' AND users.Age > 65;
SELECT DisplayName  FROM users  WHERE Id = 30;
SELECT COUNT(*)  FROM users  WHERE Location = 'New York';
SELECT COUNT(*)  FROM votes  WHERE YEAR(CreationDate) = 2010;
SELECT COUNT(*)  FROM users  WHERE Age BETWEEN 19 AND 65;
SELECT DisplayName, MAX(Views) AS HighestViews FROM users GROUP BY DisplayName ORDER BY HighestViews DESC;
SELECT      CAST(SUM(CASE WHEN YEAR(votes.CreationDate) = 2010 THEN 1 ELSE 0 END) AS REAL) /      CAST(SUM(CASE WHEN YEAR(votes.CreationDate) = 2011 THEN 1 ELSE 0 END) AS REAL) AS Ratio2010_2011 FROM      votes;
SELECT t.TagName  FROM tags t  JOIN posts p ON t.ExcerptPostId = p.Id OR t.WikiPostId = p.Id  WHERE p.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'John Stauffer')
SELECT COUNT(*)  FROM posts  WHERE OwnerDisplayName = 'Daniel Vassallo';
SELECT COUNT(*)  FROM votes  JOIN users ON votes.UserId = users.Id  WHERE users.DisplayName = 'Harlan';
SELECT Posts.Id FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'slashnick' ORDER BY posts.AnswerCount DESC LIMIT 1;
SELECT      p1.Id AS 'PostID',      p1.Title AS 'PostTitle',      p1.OwnerUserId AS 'UserID',      p1.ViewCount AS 'ViewCount' FROM      posts AS p1 JOIN      users AS u1 ON u1.Id = p1.OwnerUserId WHERE      (u1.DisplayName = 'Harvey Motulsky' OR u1.DisplayName = 'Noah Snyder') AND     p1.ViewCount = (         SELECT MAX(ViewCount) FROM posts WHERE              OwnerUserId = p1.OwnerUserId AND              (u1.DisplayName = 'Harvey Motulsky' OR u1.DisplayName = 'Noah Snyder')     ) ORDER BY      ViewCount DESC;
SELECT COUNT(*)  FROM posts  WHERE PostId > 4 AND OwnerDisplayName = 'Matt Parker';
SELECT COUNT(*)  FROM comments  WHERE Score < 60 AND UserId IN (     SELECT Id      FROM users      WHERE DisplayName = 'Neil McGuigan' )
SELECT DISTINCT t.TagName FROM tags t JOIN posts p ON t.ExcerptPostId = p.Id OR t.WikiPostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Mark Meckes' AND p.Id NOT IN (     SELECT c.PostId     FROM comments c )
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer';
SELECT      COUNT(CASE WHEN p.Tags LIKE '%<R>' THEN p.Id ELSE NULL END) * 100.0 / COUNT(p.Id) AS percentage FROM      posts p WHERE      p.DisplayName = 'Community';
SELECT      (SUM(CASE WHEN u.DisplayName = 'Mornington' THEN p.ViewCount ELSE 0 END) -      SUM(CASE WHEN u.DisplayName = 'Amos' THEN p.ViewCount ELSE 0 END)) AS ViewCountDifference FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id;
SELECT COUNT(DISTINCT UserId)  FROM badges  WHERE Name = 'commentator' AND DATE_FORMAT(Date, '%Y') = '2014';
SELECT COUNT(*)  FROM posts  WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';
SELECT DisplayName, Age  FROM users  WHERE Views = (SELECT MAX(Views) FROM users);
SELECT p.LastEditDate, p.LastEditorUserId  FROM posts AS p  WHERE p.Title = 'Detecting a given face in a database of facial images'
SELECT COUNT(*)  FROM comments  WHERE UserId = 13 AND Score < 60;
SELECT p.Title, u.DisplayName  FROM posts p  JOIN comments c ON p.Id = c.PostId  JOIN users u ON u.Id = c.UserId  WHERE c.Score > 60;
SELECT b.Name  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE u.Location LIKE '%North Pole%' AND YEAR(b.Date) = 2011;
SELECT      u.DisplayName,      u.WebsiteUrl  FROM      posts p  JOIN      users u ON p.OwnerUserId = u.Id  WHERE      p.FavoriteCount > 150;
SELECT      COUNT(*) AS post_history_count,     MAX(T1.LastEditDate) AS last_edit_date FROM      posts T1 WHERE      T1.Title = 'What is the best introductory Bayesian statistics textbook?';
SELECT u.LastAccessDate, u.Location  FROM users u  JOIN badges b ON u.Id = b.UserId  WHERE b.Name = 'Outliers' ORDER BY u.LastAccessDate DESC, u.Location ASC;
SELECT p.Title  FROM posts p  JOIN postLinks pl ON p.Id = pl.PostId  WHERE pl.LinkTypeId = 1 AND pl.RelatedPostId IN (     SELECT Id FROM posts WHERE Title = N'How to tell if something happened in a data set which monitors a value over time' );
SELECT p.Id, b.Name  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  JOIN badges b ON u.DisplayName = 'Samuel' AND YEAR(b.Date) = 2013  WHERE u.DisplayName = 'Samuel' AND YEAR(p.CreationDate) = 2013;
SELECT p.OwnerDisplayName  FROM posts p  WHERE p.ViewCount = (SELECT MAX(ViewCount) FROM posts);
SELECT u.DisplayName, u.Location  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  JOIN tags t ON p.Id = t.ExcerptPostId  WHERE t.TagName = 'hypothesis-testing';
SELECT p1.Title, pl.LinkTypeId  FROM posts AS p1  JOIN postLinks AS pl ON p1.Id = pl.PostId  WHERE p1.Title = 'What are principal component scores?';
SELECT      p.ParentId,     u.DisplayName FROM      posts AS p JOIN      users AS u ON p.OwnerUserId = u.Id WHERE      p.Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL)
SELECT u.DisplayName, u.WebsiteUrl  FROM votes v  JOIN users u ON u.Id = v.UserId  WHERE v.VoteTypeId = 8  AND v.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8);
SELECT Title  FROM posts  ORDER BY ViewCount DESC  LIMIT 5;
SELECT COUNT(*)  FROM (SELECT t.TagName        FROM tags AS t        LEFT JOIN posts AS p ON t.ExcerptPostId = p.Id OR t.WikiPostId = p.Id        WHERE p.Id IS NOT NULL AND p.ViewCount BETWEEN 5000 AND 7000) AS subquery;
SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);
SELECT Age  FROM users  WHERE Reputation = (SELECT MAX(Reputation) FROM users)
SELECT COUNT(*)  FROM votes  WHERE YEAR(votes.CreationDate) = 2011 AND votes.BountyAmount = 50;
SELECT Id FROM users ORDER BY Age ASC LIMIT 1;
SELECT p.Score FROM posts p JOIN (     SELECT t.TagName, MAX(t.Count) as MaxCount     FROM tags t     GROUP BY t.TagName ) max_tag ON p.Tags LIKE '%' + max_tag.TagName + '%' WHERE p.ViewCount = (     SELECT MAX(ViewCount)     FROM posts     WHERE Tags LIKE '%' + max_tag.TagName + '%' )
SELECT      COUNT(p.Id) / 12 AS AvgLinksPerMonth FROM      posts p JOIN      postLinks pl ON p.Id = pl.PostId WHERE      YEAR(p.CreationDate) = 2010 AND p.AnswerCount <= 2;
SELECT PostId FROM votes WHERE UserId = 1465 AND VoteTypeId = 2 -- Assuming vote type ID for favorites is 2 (adjust as per your database schema) ORDER BY FavoriteCount DESC LIMIT 1;
SELECT p.Title FROM postLinks pl JOIN posts p ON p.Id = pl.PostId WHERE pl.CreationDate = (SELECT MIN(CreationDate) FROM postLinks);
SELECT U.DisplayName FROM users U JOIN (     SELECT UserId, COUNT(Name) AS BadgeCount     FROM badges B     GROUP BY UserId     ORDER BY BadgeCount DESC     LIMIT 1 ) AS BadgeLeader ON U.Id = BadgeLeader.UserId;
SELECT MIN(votes.CreationDate)  FROM votes  JOIN users ON votes.UserId = users.Id  WHERE users.DisplayName = 'chl';
SELECT MIN(users.CreationDate)  FROM users  WHERE Age = (SELECT MIN(Age) FROM users);
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Autobiographer' ORDER BY b.Date ASC LIMIT 1;
SELECT COUNT(*)  FROM users  JOIN posts ON users.Id = posts.OwnerUserId  WHERE users.Location = 'United Kingdom' AND posts.FavoriteCount >= 4;
SELECT AVG(v.PostId)  FROM votes v  JOIN users u ON v.UserId = u.Id  WHERE u.Age = (SELECT MAX(Age) FROM users)
SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);
SELECT COUNT(*)  FROM users  WHERE Reputation > 2000 AND Views > 1000;
SELECT DisplayName  FROM users  WHERE Age BETWEEN 19 AND 65;
SELECT COUNT(p.Id)  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE u.DisplayName = 'Jay Stevens' AND YEAR(p.CreationDate) = 2010;
SELECT p.Id, p.Title  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE u.DisplayName = 'Harvey Motulsky'  ORDER BY p.ViewCount DESC  LIMIT 1;
SELECT p.Id, p.Title  FROM posts p  WHERE p.Score = (SELECT MAX(Score) FROM posts)
SELECT AVG(posts.Score)  FROM posts  JOIN users ON posts.OwnerUserId = users.Id  WHERE users.DisplayName = 'Stephen Turner';
SELECT DISTINCT u.DisplayName  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  WHERE p.ViewCount > 20000 AND YEAR(p.CreationDate) = 2011;
SELECT p.Id, u.DisplayName  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE YEAR(p.CreationDate) = 2010  ORDER BY p.FavoriteCount DESC  LIMIT 1;
SELECT      (COUNT(CASE          WHEN p.OwnerUserId IS NOT NULL AND u.Reputation > 1000 AND YEAR(p.CreationDate) = 2011 THEN 1          ELSE 0      END)      / COUNT(CASE          WHEN p.OwnerUserId IS NOT NULL AND YEAR(p.CreationDate) = 2011 THEN 1          ELSE 0      END) * 100) AS Percentage  FROM      posts AS p  JOIN      users AS u ON p.OwnerUserId = u.Id;
SELECT      (COUNT(Id WHERE Age BETWEEN 13 AND 18) * 100.0 / COUNT(Id)) AS PercentageTeenageUsers FROM      users;
SELECT      p.ViewCount AS TotalViews,     u.DisplayName AS PosterLastActivityUser FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      p.Title = 'Computer Game Datasets';
SELECT COUNT(*)  FROM posts  WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts)
SELECT COUNT(c.Id)  FROM comments c  JOIN posts p ON c.PostId = p.Id  WHERE p.Score = (SELECT MAX(Score) FROM posts)
SELECT COUNT(*)  FROM posts  WHERE ViewCount > 35000 AND CommentCount = 0;
SELECT U.DisplayName, U.Location  FROM users U  JOIN posts P ON U.Id = P.LastEditorUserId  WHERE P.Id = 183  ORDER BY P.LastEditDate DESC  LIMIT 1;
SELECT Name  FROM badges  WHERE UserId = (SELECT Id FROM users WHERE UserDisplayName = 'Emmett')  ORDER BY Date DESC  LIMIT 1;
SELECT COUNT(*)  FROM users  WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;
SELECT      (b.Date - u.CreationDate) AS TimeToGetBadge FROM      badges b JOIN      users u ON b.UserId = u.Id WHERE      u.DisplayName = 'Zolomon';
SELECT COUNT(p.Id) AS NumberOfPosts, COUNT(c.Id) AS NumberOfComments FROM posts p  JOIN users u ON p.OwnerUserId = u.Id JOIN comments c ON p.Id = c.PostId WHERE u.CreationDate = (SELECT MAX(CreationDate) FROM users);
SELECT c.Text, u.DisplayName  FROM comments c  JOIN posts p ON c.PostId = p.Id  JOIN users u ON c.UserId = u.Id  WHERE p.Title = 'Analysing wind data with R'  ORDER BY c.CreationDate DESC  LIMIT 1;
SELECT COUNT(DISTINCT UserId)  FROM badges  WHERE Name = 'Citizen Patrol';
SELECT COUNT(*)  FROM posts  JOIN postTags ON posts.Id = postTags.PostId  JOIN tags ON postTags.TagId = tags.Id  WHERE tags.TagName = 'careers';
SELECT u.Reputation, p.ViewCount  FROM users u  JOIN posts p ON u.Id = p.OwnerUserId  WHERE u.DisplayName = 'Jarrod Dixon'
SELECT COUNT(c.Id) AS CommentsCount, COUNT(a.Id) AS AnswersCount  FROM comments c  JOIN posts p ON c.PostId = p.Id  WHERE p.Title = 'Clustering 1D data' AND c.PostId = a.ParentId OR p.PostTypeId = 1
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';
SELECT COUNT(*)  FROM votes  WHERE VoteTypeId = 8 AND BountyAmount >= 30;
SELECT      (COUNT(p.Id) FILTER (WHERE p.Score >= 50 AND u.Reputation = (SELECT MAX(Reputation) FROM users))) * 100.0 / COUNT(p.Id) AS Percentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      u.Reputation = (SELECT MAX(Reputation) FROM users)
SELECT COUNT(*)  FROM posts  WHERE Score < 20;
SELECT COUNT(*)  FROM tags  WHERE Id < 15 AND Count <= 20;
SELECT      t.ExcerptPostId,      t.WikiPostId  FROM      tags AS t  WHERE      t.TagName = 'sample';
SELECT u.DisplayName, u.Reputation, u.UpVotes  FROM comments c JOIN users u ON c.UserId = u.Id  WHERE c.Text = 'fine, you win :)';
SELECT c.Text FROM comments AS c JOIN posts AS p ON c.PostId = p.Id WHERE p.Title = 'How can I adapt ANOVA for binary data?';
SELECT c.Text, MAX(c.Score)  FROM comments c  JOIN posts p ON c.PostId = p.Id  WHERE p.ViewCount BETWEEN 100 AND 150;
SELECT c.CreationDate, u.Age  FROM comments AS c JOIN users AS u ON c.UserId = u.Id WHERE c.Text LIKE '%http://'
SELECT COUNT(*)  FROM comments  JOIN posts ON comments.PostId = posts.Id  WHERE comments.Score = 0 AND posts.ViewCount < 5;
SELECT COUNT(*)  FROM posts  WHERE CommentCount = 1 AND EXISTS (   SELECT 1    FROM comments    WHERE comments.PostId = posts.Id AND comments.Score = 0 )
SELECT COUNT(DISTINCT c.UserId)  FROM comments AS c JOIN users AS u ON c.UserId = u.Id WHERE c.Score = 0 AND u.Age = 40;
SELECT p.Id AS PostID, c.Id AS CommentID  FROM posts p  JOIN comments c  ON p.Id = c.PostId  WHERE p.Title = 'Group differences on a five point Likert item';
SELECT COUNT(*) AS up_vote_number  FROM votes  JOIN comments ON votes.PostId = comments.PostId  JOIN posts ON comments.PostId = posts.Id  WHERE comments.Text = 'R is also lazy evaluated.' AND votes.VoteTypeId = 2;
SELECT c.Text AS CommentText  FROM comments c  JOIN users u ON c.UserId = u.Id  WHERE u.DisplayName = 'Harvey Motulsky';
SELECT DISTINCT uc.DisplayName  FROM comments uc  JOIN users u ON uc.UserId = u.Id  WHERE uc.Score BETWEEN 1 AND 5 AND u.DownVotes = 0;
SELECT      (COUNT(CASE WHEN u.UpVotes = 0 AND c.Score BETWEEN 5 AND 10 THEN u.Id END)      / COUNT(CASE WHEN c.Score BETWEEN 5 AND 10 THEN c.Id END)) * 100 AS Percentage FROM comments c JOIN users u ON c.UserId = u.Id;
SELECT sp.power_name  FROM superpower sp  JOIN hero_power hp ON sp.id = hp.power_id  JOIN superhero su ON su.id = hp.hero_id  WHERE su.superhero_name = '3-D Man';
SELECT COUNT(*)  FROM superhero  JOIN hero_power ON superhero.id = hero_power.hero_id  JOIN superpower ON hero_power.power_id = superpower.id  WHERE superpower.power_name = 'Super Strength';
SELECT COUNT(*)  FROM superhero  JOIN hero_power ON superhero.id = hero_power.hero_id  JOIN superpower ON hero_power.power_id = superpower.id  WHERE superpower.power_name = 'Super Strength'  AND superhero.height_cm > 200;
SELECT full_name FROM superhero WHERE id IN (     SELECT hero_id     FROM hero_power     WHERE power_id IN (         SELECT id         FROM superpower         GROUP BY power_id         HAVING COUNT(*) > 15     ) );
SELECT COUNT(*)  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE colour.colour = 'Blue';
SELECT c.colour  FROM colour c  JOIN superhero s ON c.id = s.skin_colour_id  WHERE s.superhero_name = 'Apocalypse';
SELECT COUNT(*)  FROM superhero  JOIN hero_attribute ON superhero.id = hero_attribute.hero_id  JOIN attribute ON attribute.id = hero_attribute.attribute_id  JOIN colour ON colour.id = superhero.eye_colour_id  WHERE attribute.attribute_name = 'Eye Colour' AND colour.colour = 'Blue' AND attribute.name = 'Agility';
SELECT superhero.superhero_name  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE colour.colour = 'Blue'  AND superhero.hair_colour_id = (     SELECT id      FROM colour      WHERE colour = 'Blond' );
SELECT COUNT(*)  FROM superhero  WHERE publisher_id IN (     SELECT id      FROM publisher      WHERE publisher_name = 'Marvel Comics' );
SELECT full_name  FROM superhero  WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')  AND height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT publisher.publisher_name  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE superhero.superhero_name = 'Sauron';
SELECT COUNT(*)  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue';
SELECT AVG(superhero.height_cm)  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE publisher.publisher_name = 'Marvel Comics';
SELECT      (SUM(CASE WHEN power_name = 'Super Strength' THEN 1 ELSE 0 END) * 100.0 / COUNT(hero_id)) AS percentage FROM      superhero  JOIN      hero_power ON superhero.id = hero_power.hero_id JOIN      superpower ON hero_power.power_id = superpower.id JOIN      publisher ON superhero.publisher_id = publisher.id WHERE      publisher.publisher_name = 'Marvel Comics' ;
SELECT COUNT(*)  FROM superhero  WHERE publisher_id IN (     SELECT id      FROM publisher      WHERE publisher_name = 'DC Comics' );
SELECT `publisher_name`  FROM `superhero` JOIN `hero_attribute` ON `superhero.id` = `hero_attribute.hero_id` JOIN `attribute` ON `hero_attribute.attribute_id` = `attribute.id` WHERE `attribute.attribute_name` = 'Speed' ORDER BY `hero_attribute.attribute_value` ASC LIMIT 1;
SELECT COUNT(*)  FROM superhero  WHERE publisher_id IN (     SELECT id      FROM publisher      WHERE publisher_name = 'Marvel Comics' )  AND hero_attribute.attribute_id = colour.id  AND colour.colour = 'Gold'  AND hero_attribute.attribute_name = 'eye_colour';
SELECT publisher.publisher_name  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE superhero.superhero_name = 'Blue Beetle II';
SELECT COUNT(*)  FROM superhero  JOIN colour ON superhero.hair_colour_id = colour.id  WHERE colour.colour = 'Blond';
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON a.id = ha.attribute_id WHERE a.attribute_name = 'Intelligence' ORDER BY ha.attribute_value ASC LIMIT 1;
SELECT race.race  FROM superhero  JOIN race ON superhero.race_id = race.id  WHERE superhero.superhero_name = 'Copycat';
SELECT COUNT(*)  FROM superhero  JOIN hero_attribute ON superhero.id = hero_attribute.hero_id  WHERE hero_attribute.attribute_id IN (SELECT id FROM attribute WHERE attribute_name = 'Durability')  AND hero_attribute.attribute_value < 50;
SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';
SELECT COUNT(*)  FROM superhero  JOIN hero_attribute ON superhero.id = hero_attribute.hero_id  WHERE gender = 'Female'  AND attribute_name = 'Strength'  AND attribute_value = 100;
SELECT superhero_name FROM superhero WHERE id IN (     SELECT hero_id     FROM hero_power     GROUP BY hero_id     ORDER BY COUNT(power_id) DESC     LIMIT 1 );
SELECT COUNT(*)  FROM superhero  JOIN race ON superhero.race_id = race.id  WHERE race.race = 'Vampire';
SELECT      (COUNT(CASE WHEN s.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad') THEN 1 END) * 100 / COUNT(s.id)) AS percentage,     (SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics') AS marvel_count FROM      superhero s WHERE      s.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');
SELECT      (SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END) -       SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)) as difference FROM superhero
SELECT publisher.id FROM publisher WHERE publisher.publisher_name = 'Star Trek';
SELECT AVG(T2.attribute_value)  FROM superhero AS T1  JOIN hero_attribute AS T2 ON T1.id = T2.hero_id;
SELECT COUNT(*)  FROM superhero  WHERE full_name IS NULL;
SELECT c.colour  FROM colour c  JOIN superhero s ON c.id = s.eye_colour_id  WHERE s.id = 75;
SELECT sp.power_name  FROM superpower sp  JOIN hero_power hp ON sp.id = hp.power_id  JOIN superhero su ON su.id = hp.hero_id  WHERE su.superhero_name = 'Deathlok';
SELECT AVG(superhero.weight_kg)  FROM superhero  JOIN gender ON superhero.gender_id = gender.id  WHERE gender.gender = 'female';
SELECT sp.power_name  FROM superpower sp  JOIN hero_power hp ON sp.id = hp.power_id  JOIN superhero su ON su.id = hp.hero_id  JOIN gender g ON g.id = su.gender_id  WHERE g.gender = 'Male'  LIMIT 5;
SELECT superhero.superhero_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';
SELECT superhero.superhero_name  FROM superhero  WHERE superhero.eye_colour_id = 1 AND superhero.height_cm BETWEEN 170 AND 190;
SELECT sp.power_name  FROM superpower sp  JOIN hero_power hp ON sp.id = hp.power_id  JOIN superhero su ON su.id = hp.hero_id  WHERE su.id = 56;
SELECT superhero.full_name  FROM superhero  JOIN race ON superhero.race_id = race.id  WHERE race.race = 'Demi-God'  LIMIT 5;
SELECT COUNT(*)  FROM superhero  JOIN alignment ON superhero.alignment_id = alignment.id  WHERE alignment.alignment = 'Bad';
SELECT race.race  FROM superhero  JOIN race ON superhero.race_id = race.id  WHERE superhero.weight_kg = 169;
SELECT c.colour  FROM superhero s  JOIN colour c ON s.hair_colour_id = c.id  JOIN race r ON s.race_id = r.id  WHERE r.race = 'human' AND s.height_cm = 185;
SELECT c.colour  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE s.weight_kg = (SELECT MAX(weight_kg) FROM superhero)
SELECT      (COUNT(CASE WHEN s.publisher_id = 13 THEN 1 END) * 100 / COUNT(s.id)) FROM superhero s WHERE s.height_cm BETWEEN 150 AND 180;
SELECT full_name FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'male') AND weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero);
SELECT power_name, COUNT(*) as power_count  FROM superpower GROUP BY power_name ORDER BY power_count DESC LIMIT 1;
SELECT ha.attribute_value  FROM superhero s  JOIN hero_attribute ha ON s.id = ha.hero_id  WHERE s.superhero_name = 'Abomination';
SELECT sp.power_name  FROM superpower sp  JOIN hero_power hp ON sp.id = hp.power_id  WHERE hp.hero_id = 1;
SELECT COUNT(*)  FROM hero_power hp  JOIN superhero s ON hp.hero_id = s.id  JOIN superpower sp ON hp.power_id = sp.id  WHERE sp.power_name = 'stealth';
SELECT s.full_name  FROM superhero s  JOIN hero_attribute ha ON s.id = ha.hero_id  JOIN attribute a ON ha.attribute_id = a.id  WHERE a.attribute_name = 'strength'  AND ha.attribute_value = (SELECT MAX(value) FROM  (SELECT attribute_value FROM hero_attribute  JOIN attribute ON hero_attribute.attribute_id = attribute.id  WHERE attribute.attribute_name = 'strength') sub_query)
SELECT      AVG(s.skin_colour_id = 1) * COUNT(s.id) AS average_no_skin_colour FROM      superhero s WHERE      s.skin_colour_id = 1;
SELECT COUNT(*)  FROM superhero  WHERE publisher_id IN (     SELECT id      FROM publisher      WHERE publisher_name = 'Dark Horse Comics' );
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'durability' AND s.publisher_id IN (     SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics' ) GROUP BY s.id ORDER BY SUM(ha.attribute_value) DESC LIMIT 1;
SELECT colour.colour  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE superhero.full_name = 'Abraham Sapien';
SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight';
SELECT      s.skin_colour_id AS skin_colour,     h.hair_colour_id AS hair_colour,     a.eye_colour_id AS eye_colour FROM      superhero s JOIN      gender g ON s.gender_id = g.id JOIN      publisher p ON s.publisher_id = p.id JOIN      attribute a ON s.eye_colour_id = a.id AND a.attribute_name = 'Eye Colour' JOIN      hero_attribute ha ON s.id = ha.hero_id JOIN      attribute at ON ha.attribute_id = at.id AND at.attribute_name = 'Hair Colour' JOIN      attribute ap ON s.hair_colour_id = ap.id AND ap.attribute_name = 'Hair Colour' WHERE      g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics';
SELECT s.superhero_name, p.publisher_name  FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id  JOIN attribute a ON ha.attribute_id = a.id  WHERE a.attribute_name IN ('hair_colour', 'eye_colour', 'skin_colour')  GROUP BY s.id HAVING COUNT(DISTINCT ha.attribute_id) = 3 AND s.eye_colour_id = s.hair_colour_id AND s.hair_colour_id = s.skin_colour_id;
SELECT race.race  FROM superhero  JOIN race ON superhero.race_id = race.id  WHERE superhero.superhero_name = 'A-Bomb';
SELECT      (SUM(CASE WHEN colour = 'Blue' AND gender = 'Female' THEN 1 ELSE 0 END)      / COUNT(CASE WHEN gender = 'Female' THEN 1 END)) * 100 AS percentage FROM superhero;
SELECT superhero.superhero_name, race.race  FROM superhero  JOIN race ON superhero.race_id = race.id  WHERE superhero.full_name = 'Charles Chandler';
SELECT gender.gender  FROM superhero  JOIN gender ON superhero.gender_id = gender.id  WHERE superhero.superhero_name = 'Agent 13';
SELECT superhero.superhero_name  FROM superhero  JOIN hero_power ON superhero.id = hero_power.hero_id  JOIN superpower ON hero_power.power_id = superpower.id  WHERE superpower.power_name = 'Adaptation';
SELECT COUNT(*)  FROM hero_power  JOIN superhero ON hero_power.hero_id = superhero.id  WHERE superhero.superhero_name = 'Amazo';
SELECT sp.power_name  FROM superhero AS s JOIN hero_attribute AS ha ON s.id = ha.hero_id JOIN hero_power AS hp ON s.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE s.full_name = 'Hunter Zolomon';
SELECT superhero.superhero_name, superhero.height_cm  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE colour.colour = 'Amber'
SELECT superhero.superhero_name  FROM superhero  JOIN hero_attribute ON superhero.id = hero_attribute.hero_id  JOIN colour ON hero_attribute.attribute_id = colour.id  WHERE colour.colour = 'Black'  AND hero_attribute.attribute_name = 'Eye Colour'  AND hero_attribute.attribute_value = 'Black'  AND colour.colour = 'Hair Colour'  AND hero_attribute.attribute_value = 'Black';
SELECT DISTINCT s.eye_colour_id  FROM superhero s  JOIN colour c ON s.skin_colour_id = c.id  WHERE c.colour = 'Gold';
SELECT full_name  FROM superhero  WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');
SELECT superhero.superhero_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';
SELECT COUNT(*)  FROM hero_attribute  WHERE attribute_id IN (     SELECT id      FROM attribute      WHERE attribute_name = 'Strength' ) AND attribute_value = (     SELECT MAX(attribute_value)      FROM hero_attribute      WHERE attribute_id IN (         SELECT id          FROM attribute          WHERE attribute_name = 'Strength'     ) );
SELECT race.race, alignment.alignment  FROM superhero  JOIN race ON superhero.race_id = race.id  JOIN alignment ON superhero.alignment_id = alignment.id  WHERE superhero.superhero_name = 'Cameron Hicks';
SELECT      (SUM(CASE WHEN superhero.gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') THEN 1 ELSE 0 END) * 100.0 / COUNT(CASE WHEN superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') THEN 1 ELSE 0 END)) AS female_heroes_percentage FROM      superhero;
SELECT AVG(superhero.weight_kg)  FROM superhero  JOIN race ON superhero.race_id = race.id  WHERE race.race = 'Alien';
SELECT      (SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') -      (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler') AS weight_difference;
SELECT      superhero.superhero_name,     AVG(superhero.height_cm) AS average_height FROM      superhero GROUP BY      superhero.superhero_name;
SELECT sp.power_name  FROM superhero s  JOIN hero_power hp ON s.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  WHERE s.superhero_name = 'Abomination';
SELECT COUNT(*)  FROM superhero  WHERE race_id = 21 AND gender_id = 1;
SELECT superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE attribute_name = 'Speed' AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_name = 'Speed');
SELECT COUNT(*)  FROM superhero  WHERE alignment_id = 3;
SELECT HTA.attribute_name, HVA.attribute_value  FROM hero_attribute AS HVA  JOIN attribute AS A ON A.id = HVA.attribute_id  JOIN hero AS H ON H.id = HVA.hero_id  WHERE H.superhero_name = '3-D Man';
SELECT superhero.superhero_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'blue' AND superhero.hair_colour_id = 9;
SELECT publisher.publisher_name  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');
SELECT COUNT(*)  FROM superhero  WHERE publisher_id = 1;
SELECT      (SUM(CASE WHEN s.eye_colour_id = 7 THEN 1 ELSE 0 END) * 100.0 / COUNT(s.id)) as blue_eyes_percentage FROM      superhero s
SELECT      (SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) / CAST(SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) AS REAL)) AS ratio FROM      superhero
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT power_id FROM superpower WHERE power_name = 'cryokinesis';
SELECT superhero_name FROM superhero WHERE id = 294;
SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;
SELECT c.colour  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE s.full_name = 'Karen Beecher-Duncan';
SELECT sp.power_name  FROM superpower sp  JOIN hero_power hp ON sp.id = hp.power_id  JOIN superhero su ON su.id = hp.hero_id  WHERE su.full_name = 'Helen Parr';
SELECT race.race  FROM superhero  JOIN race ON superhero.race_id = race.id  WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;
SELECT publisher.publisher_name  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE superhero.id = 38;
SELECT r.race  FROM race r  JOIN superhero s ON r.id = s.race_id  JOIN hero_attribute ha ON s.id = ha.hero_id  WHERE ha.attribute_value = (SELECT MAX(t.attribute_value) FROM hero_attribute t)
SELECT      s.alignment,      sp.power_name  FROM      superhero s  JOIN      hero_power hp ON s.id = hp.hero_id  JOIN      superpower sp ON hp.power_id = sp.id  WHERE      s.superhero_name = 'Atom IV';
SELECT full_name  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE colour.colour = 'Blue'  LIMIT 5;
SELECT AVG(T2.attribute_value)  FROM superhero AS T1  JOIN hero_attribute AS T2 ON T1.id = T2.hero_id  JOIN alignment AS T3 ON T3.id = T1.alignment_id  WHERE T3.alignment = 'neutral';
SELECT      c.colour  FROM      superhero s  JOIN      hero_attribute ha ON s.id = ha.hero_id  JOIN      attribute a ON ha.attribute_id = a.id  JOIN      colour c ON s.skin_colour_id = c.id  WHERE      a.attribute_name = 'skin colour' AND ha.attribute_value = 100;
SELECT COUNT(*)  FROM superhero  JOIN alignment ON superhero.alignment_id = alignment.id  JOIN gender ON superhero.gender_id = gender.id  WHERE alignment.id = 1 AND gender.id = 2;
SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;
SELECT race.race  FROM superhero  JOIN gender ON superhero.gender_id = gender.id  JOIN hair_colour ON superhero.hair_colour_id = hair_colour.id  JOIN colour ON hair_colour.colour_id = colour.id  JOIN race ON superhero.race_id = race.id  WHERE gender.gender = 'male' AND colour.colour = 'blue';
SELECT      (SUM(CASE WHEN s.gender_id = 2 AND a.alignment_id = 2 THEN 1 ELSE 0 END) * 100.0 / SUM(CASE WHEN a.alignment_id = 2 THEN 1 ELSE 0 END)) AS percentage_female_bad_superheroes FROM      superhero s  JOIN      alignment a ON s.alignment_id = a.id  JOIN      gender g ON s.gender_id = g.id;
SELECT      (SUM(CASE WHEN c.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN c.id = 1 THEN 1 ELSE 0 END)) AS difference FROM      superhero s  JOIN      colour c ON s.eye_colour_id = c.id WHERE      s.weight_kg = 0 OR s.weight_kg IS NULL;
SELECT hero_attribute.attribute_value  FROM hero_attribute  JOIN superhero ON superhero.id = hero_attribute.hero_id  JOIN attribute ON attribute.id = hero_attribute.attribute_id  WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength';
SELECT sp.power_name  FROM superpower sp  JOIN hero_power hp ON sp.id = hp.power_id  JOIN superhero su ON su.id = hp.hero_id  WHERE su.superhero_name = 'Ajax';
SELECT COUNT(*)  FROM superhero  JOIN colour ON superhero.skin_colour_id = colour.id  WHERE colour.colour = 'Green' AND superhero.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');
SELECT COUNT(*)  FROM superhero  WHERE gender_id = (SELECT id FROM gender WHERE gender_name = 'Female')  AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT s.superhero_name  FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Wind Control' ORDER BY s.superhero_name ASC;
SELECT gender.gender  FROM superhero  JOIN hero_attribute ON superhero.id = hero_attribute.hero_id  JOIN attribute ON hero_attribute.attribute_id = attribute.id  WHERE attribute.attribute_name = 'ability' AND hero_attribute.attribute_value = 'Phoenix Force';
SELECT superhero_name FROM superhero WHERE publisher_name = 'DC Comics' ORDER BY weight_kg DESC LIMIT 1;
SELECT AVG(superhero.height_cm)  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE publisher.publisher_name = 'Dark Horse Comics' AND superhero.race <> 'Human';
SELECT COUNT(*)  FROM superhero  JOIN hero_attribute ON superhero.id = hero_attribute.hero_id  WHERE hero_attribute.attribute_id IN (     SELECT id      FROM attribute      WHERE attribute_name = 'Speed'      AND attribute_value = 100 )
SELECT      CASE          WHEN (SUM(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)) > 0          THEN 'DC Comics published more superheroes'         WHEN (SUM(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END)) > 0          THEN 'Marvel Comics published more superheroes'         ELSE 'The number of superheroes published by both publishers is the same'     END AS publisher_difference FROM publisher JOIN superhero ON superhero.publisher_id = publisher.id;
SELECT attribute_name, attribute_value  FROM hero_attribute  JOIN attribute ON hero_attribute.attribute_id = attribute.id  WHERE superhero_name = 'Black Panther'  ORDER BY attribute_value ASC  LIMIT 1;
SELECT c.colour  FROM colour c  JOIN hero_attribute ha ON c.id = ha.attribute_id  JOIN superhero s ON s.eye_colour_id = ha.attribute_id  WHERE s.superhero_name = 'Abomination';
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';
SELECT      (SUM(CASE WHEN superhero.gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'George Lucas')) * 100.0 / COUNT(CASE WHEN superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'George Lucas'))) AS percentage_female FROM      superhero;
SELECT      (SUM(CASE WHEN s.alignment_id = a.id AND a.alignment = 'Good' THEN 1 ELSE 0 END)       OVER () * 100.0 / COUNT(s.id) OVER ()) AS good_percentage FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN alignment a ON s.alignment_id = a.id WHERE p.publisher_name = 'Marvel Comics';
SELECT COUNT(*)  FROM superhero  WHERE full_name LIKE 'John%';
SELECT h.id FROM superhero s JOIN hero_attribute h ON s.id = h.hero_id WHERE h.attribute_value = (SELECT MIN(value) FROM (SELECT hero_attribute.attribute_value FROM hero_attribute WHERE hero_attribute.attribute_id = <attribute_id>) AS subquery)
SELECT full_name  FROM superhero  WHERE superhero_name = 'Alien';
SELECT full_name  FROM superhero  WHERE weight_kg < 100 AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'brown')  AND hair_colour_id IS NULL OR hair_colour_id = (SELECT id FROM colour WHERE colour = 'brown');
SELECT ha.attribute_value  FROM superhero s  JOIN hero_attribute ha ON s.id = ha.hero_id  WHERE s.full_name = 'Aquababy';
SELECT weight_kg, race  FROM superhero  WHERE id = 40;
SELECT AVG(superhero.height_cm)  FROM superhero  JOIN alignment ON superhero.alignment_id = alignment.id  WHERE alignment.alignment = 'neutral';
SELECT hero_id FROM hero_power JOIN superhero ON hero_power.hero_id = superhero.id JOIN hero_attribute ON hero_attribute.hero_id = hero_power.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'power_name' AND attribute.power_name = 'Intelligence';
SELECT      colour.colour  FROM      superhero  JOIN      hero_attribute ON superhero.id = hero_attribute.hero_id  JOIN      attribute ON hero_attribute.attribute_id = attribute.id  JOIN      colour ON hero_attribute.attribute_id = colour.id  WHERE      superhero.superhero_name = 'Blackwulf' AND      attribute.attribute_name = 'eye_colour';
SELECT sp.power_name  FROM superpower sp  JOIN hero_power hp ON sp.id = hp.power_id  JOIN superhero s ON hp.hero_id = s.id  WHERE s.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero)
SELECT driverRef FROM qualifying WHERE raceId = 18 AND q1 IS NOT NULL AND position <= 5;
SELECT d.surname FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 19 AND q.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19)
SELECT seasons.year FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Shanghai';
SELECT circuits.url  FROM circuits  JOIN races ON races.circuitId = circuits.circuitId  WHERE circuits.name = 'Circuit de Barcelona-Catalunya';
SELECT races.name  FROM races  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE circuits.country = 'Germany';
SELECT circuits.position  FROM circuits  JOIN races ON circuits.circuitId = races.circuitId  JOIN results ON races.raceId = results.raceId  JOIN constructorResults ON results.resultId = constructorResults.resultId  JOIN constructors ON constructorResults.constructorId = constructors.constructorId  WHERE constructors.name = 'Renault';
SELECT COUNT(*)  FROM races  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE races.year = 2010  AND circuits.country NOT IN ('Asia', 'Europe')  AND circuits.name LIKE '%Grand Prix%'
SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Spain';
SELECT circuits.lat, circuits.lng  FROM circuits  JOIN races ON circuits.circuitId = races.circuitId  WHERE races.name = 'Australian Grand Prix';
SELECT circuits.url  FROM circuits  JOIN races ON races.circuitId = circuits.circuitId  WHERE circuits.name = 'Sepang International Circuit';
SELECT races.date, status.status  FROM races  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE circuits.name = 'Sepang International Circuit' AND DATE(races.date) = '2022-09-01'; -- assuming you want to check for specific date, replace with desired date
SELECT circuits.lat, circuits.lng  FROM circuits  JOIN races ON races.circuitId = circuits.circuitId  WHERE races.name = 'Abu Dhabi Grand Prix';
SELECT T3.country  FROM races AS T1  JOIN constructorResults AS T2 ON T1.raceId = T2.raceId  JOIN circuits AS T3 ON T3.circuitId = T1.circuitId  WHERE T2.points = 1 AND T1.raceId = 24;
SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Senna')  AND raceId = 354;
SELECT `nationality`  FROM drivers  WHERE `driverId` IN (   SELECT `driverId`    FROM qualifying    WHERE `raceId` = 355 AND `q2` = '0:01:40' );
SELECT      d.number FROM      drivers d JOIN      qualifying q ON d.driverId = q.driverId JOIN      results r ON d.driverId = r.driverId AND q.qualifyId = r.resultId WHERE      q.q3 = '0:01:54' AND     q.qualifyId = 903;
SELECT COUNT(*)  FROM results  WHERE raceId IN (     SELECT raceId      FROM races      WHERE year = 2007 AND name = 'Bahrain Grand Prix' )  AND statusId = (SELECT statusId FROM status WHERE status = 'Finished');
SELECT s.year FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;
SELECT COUNT(DISTINCT driverId)  FROM results  WHERE raceId IN (     SELECT raceId FROM races WHERE date = '2015-11-29' );
SELECT      d.forename,      d.surname  FROM      drivers AS d  JOIN      results AS r ON d.driverId = r.driverId  WHERE      r.raceId = 592 AND r.time IS NOT NULL  ORDER BY      d.dob ASC  LIMIT 1;
SELECT      d.forename,      d.surname,      d.url  FROM      lapTimes l  JOIN      drivers d ON l.driverId = d.driverId  WHERE      l.time = '0:01:27' AND      r.raceId = 161;
SELECT      d.forename,      d.surname  FROM      drivers AS d  JOIN      results AS r ON d.driverId = r.driverId  JOIN      qualifying AS q ON r.raceId = q.raceId  WHERE      r.raceId = 933 AND      q.fastestLapspeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933)
SELECT location, lat, lng  FROM circuits  JOIN races ON circuits.circuitId = races.circuitId  WHERE races.name = 'Malaysian Grand Prix';
SELECT      c.url FROM      constructors c JOIN      constructorResults cr ON c.constructorId = cr.constructorId JOIN      races r ON cr.raceId = r.raceId WHERE      r.round = 9 GROUP BY      c.constructorId ORDER BY      SUM(cr.points) DESC LIMIT 1;
SELECT q1 FROM qualifying WHERE driverId IN (     SELECT driverId     FROM drivers     WHERE forename = 'Lucas' AND surname = 'di Grassi' ) AND raceId = 345;
SELECT T4.surname, T4.forename, T3.country FROM qualifying AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T4 ON T1.driverId = T4.driverId JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T1.q2 = '01:15' AND T2.raceId = 347;
SELECT      d.forename,      d.surname,      d.code  FROM      races r  JOIN      qualifying q ON r.raceId = q.raceId  JOIN      drivers d ON q.driverId = d.driverId  WHERE      r.round = 45 AND q.q3 = '01:33'
SELECT results.time  FROM results  JOIN drivers ON results.driverId = drivers.driverId  WHERE drivers.forename = 'Bruce' AND drivers.surname = 'McLaren' AND results.raceId = 743;
SELECT driver.surname, driver.forename  FROM results  JOIN drivers AS driver ON results.driverId = driver.driverId  JOIN races ON results.raceId = races.raceId  WHERE races.name = 'San Marino Grand Prix' AND races.year = 2006 AND results.position = 2;
SELECT s.year FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;
SELECT COUNT(DISTINCT driverId)  FROM results  WHERE raceId IN (     SELECT raceId FROM races WHERE date = '2015-11-29' );
SELECT      d.forename, d.surname  FROM      drivers d JOIN      results r ON d.driverId = r.driverId WHERE      r.raceId = 872 AND r.statusId = (SELECT statusId FROM status WHERE status = 'Finished') ORDER BY      d.dob ASC  LIMIT 1;
SELECT d.forename, d.surname  FROM drivers d  JOIN lapTimes lt ON d.driverId = lt.driverId  WHERE lt.raceId = 348  AND lt.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = 348);
SELECT `nationality`  FROM drivers  WHERE `driverId` = (   SELECT `driverId`    FROM results    WHERE `raceId` = [replace_with_actual_race_id]      AND `fastestLapSpeed` = (       SELECT MAX(`fastestLapSpeed`)        FROM results        WHERE `raceId` = [replace_with_actual_race_id]     ) );
SELECT      (AVG(T1.fastestLapSpeed) - AVG(T2.fastestLapSpeed)) / AVG(T1.fastestLapSpeed) * 100 AS percentage_faster FROM      (SELECT fastestLapSpeed FROM results WHERE raceId = 853 AND driverId IN (SELECT driverId FROM drivers WHERE surname = 'di Resta') AND number = 853) T1,     (SELECT fastestLapSpeed FROM results WHERE raceId = 854 AND driverId IN (SELECT driverId FROM drivers WHERE surname = 'di Resta') AND number = 854) T2;
SELECT      COUNT(CASE WHEN results.time IS NOT NULL THEN 1 END) * 1.0 / COUNT(*)  FROM      results  WHERE      DATE(results.date) = '1983-07-16';
SELECT year  FROM races  WHERE name = 'Singapore Grand Prix'  ORDER BY year ASC  LIMIT 1;
SELECT raceId, name  FROM races  WHERE year = 2005  ORDER BY name DESC;
SELECT      r1.name AS first_race,     r2.name AS other_races_in_same_month_and_year FROM      races r1 JOIN      races r2 ON r2.year = r1.year AND r2.month = r1.month WHERE      r2.date > r1.date
SELECT      c.name,      r.date  FROM      races r  JOIN      circuits c ON r.circuitId = c.circuitId  WHERE      r.year = 1999 AND r.round = (SELECT MAX(round) FROM races WHERE year = 1999) ORDER BY      r.round DESC  LIMIT 1;
SELECT year  FROM seasons  WHERE year IN (     SELECT T2.year      FROM races AS T1      JOIN seasons AS T2 ON T1.year = T2.year      GROUP BY T2.year      ORDER BY COUNT(*) DESC      LIMIT 1 );
SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 AND circuits.year != 2000;
SELECT      c.country,      c.name,      c.location FROM      circuits c JOIN      races r ON c.circuitId = r.circuitId WHERE      r.year = (SELECT MIN(year) FROM races WHERE name LIKE '%European Grand Prix%') AND r.name LIKE '%European Grand Prix%' AND c.country = 'Europe';
SELECT      s.year FROM      circuits c JOIN      races r ON c.circuitId = r.circuitId JOIN      seasons s ON r.year = s.year WHERE      c.name = 'Brands Hatch' AND      s.year = (SELECT MAX(y) FROM seasons WHERE year <= (SELECT MAX(year) FROM seasons));
SELECT COUNT(*)  FROM races  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE circuits.name = 'Silverstone Circuit' AND circuits.country = 'United Kingdom' AND races.name = 'British Grand Prix';
SELECT      d.forename,      d.surname  FROM      drivers AS d  JOIN      results AS r ON d.driverId = r.driverId  JOIN      races AS ra ON r.raceId = ra.raceId  WHERE      ra.year = 2010 AND ra.name = 'Singapore Grand Prix'  ORDER BY      r.position;
SELECT      d.forename,      d.surname  FROM      drivers AS d  JOIN      results AS r ON d.driverId = r.driverId  WHERE      r.points = (SELECT MAX(points) FROM results)
SELECT      d.forename,     d.surname,     cr.points FROM      drivers AS d JOIN      results AS r ON d.driverId = r.driverId JOIN      constructorResults AS cr ON r.resultId = cr.raceId JOIN      races AS ra ON r.raceId = ra.raceId WHERE      ra.year = 2017 AND ra.name = 'Chinese Grand Prix' AND cr.rank BETWEEN 1 AND 3 ORDER BY      cr.points DESC LIMIT 3;
SELECT      d.forename || ' ' || d.surname AS driver,     r.name AS race  FROM      races r     JOIN results res ON r.raceId = res.raceId     JOIN lapTimes lt ON res.driverId = lt.driverId AND res.raceId = lt.raceId WHERE      lt.time = (SELECT MIN(time) FROM lapTimes) ORDER BY      r.date DESC;
SELECT AVG(lapTimes.time)  FROM lapTimes  JOIN races ON lapTimes.raceId = races.raceId  JOIN results ON lapTimes.raceId = results.raceId AND lapTimes.driverId = results.driverId  JOIN drivers ON results.driverId = drivers.driverId  WHERE drivers.forename = 'Sebastian' AND drivers.surname = 'Vettel' AND races.year = 2009 AND races.name = 'Chinese Grand Prix'
SELECT      (COUNT(CASE WHEN circuits.name NOT LIKE '1st_track%' THEN raceId END) WHERE drivers.surname = 'Hamilton' AND seasons.year >= 2010) * 100.0 / COUNT(CASE WHEN drivers.surname = 'Hamilton' AND seasons.year >= 2010 THEN raceId END) AS percentage FROM      circuits JOIN      races ON circuits.circuitId = races.circuitId JOIN      seasons ON races.year = seasons.year JOIN      drivers ON races.constructorId = constructors.constructorId AND drivers.driverId = constructorResults.driverId;
SELECT      d.forename || ' ' || d.surname AS driver_full_name,     d.nationality,     AVG(r.points) AS average_points FROM      drivers d JOIN      results r ON d.driverId = r.driverId WHERE      r.position = '1' GROUP BY      d.driverId, d.forename, d.surname, d.nationality ORDER BY      COUNT(r.wins) DESC LIMIT 1;
SELECT      d.forename,     d.surname FROM      drivers d WHERE      d.nationality = 'Japanese' AND      EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM d.dob) = (SELECT MAX(EXTRACT(YEAR FROM current_date) - EXTRACT(YEAR FROM dob)) FROM drivers WHERE nationality = 'Japanese');
SELECT DISTINCT c.name  FROM circuits c  JOIN races r ON c.circuitId = r.circuitId  WHERE r.year BETWEEN 1990 AND 2000  GROUP BY c.circuitId  HAVING COUNT(r.raceId) = 4;
SELECT      c.name AS CircuitName,      c.location AS CircuitLocation,      r.name AS RaceName  FROM      circuits c  JOIN      races r ON c.circuitId = r.circuitId  JOIN      status st ON r.statusId = st.statusId  WHERE      c.country = 'USA' AND      r.year = 2006 AND      st.status = 'Finished'
SELECT      r.name AS RaceName,     c.name AS CircuitName,     c.location AS CircuitLocation FROM      races r JOIN      circuits c ON r.circuitId = c.circuitId WHERE      r.year = 2005 AND MONTH(r.date) = 9;
SELECT r.name AS Race, q.position AS Position FROM races r JOIN qualifying q ON r.raceId = q.raceId JOIN drivers d ON q.driverId = d.driverId WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND q.position < 10;
SELECT COUNT(*)  FROM results  JOIN races ON results.raceId = races.raceId  JOIN circuits ON races.circuitId = circuits.circuitId  JOIN drivers ON results.driverId = drivers.driverId  WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND circuits.name = 'Sepang International Circuit' AND results.positionOrder = 1;
SELECT races.name, seasons.year  FROM races  JOIN results ON races.raceId = results.raceId  JOIN drivers ON results.driverId = drivers.driverId  WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher'  AND results.fastestLapTime IS NOT NULL  ORDER BY results.fastestLapTime  LIMIT 1;
SELECT AVG(T2.points)  FROM drivers AS T1  JOIN results AS T2 ON T1.driverId = T2.driverId  WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T2.year = 2000
SELECT      results.raceId,     results.points FROM      drivers  JOIN      results ON drivers.driverId = results.driverId WHERE      drivers.forename = 'Lewis'  AND      drivers.surname = 'Hamilton'  AND      results.year = (         SELECT              MIN(year)          FROM              races          WHERE              circuits.country = 'BR'     );
SELECT races.name, circuits.country  FROM races  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE races.year = 2017  ORDER BY races.date;
SELECT      r.name AS RaceName,     s.year AS Year,     c.location AS CircuitLocation FROM      races AS r JOIN      results AS res ON r.raceId = res.raceId JOIN      circuits AS c ON r.circuitId = c.circuitId WHERE      res.laps = (SELECT MAX(laps) FROM results) ORDER BY      r.year DESC,     r.raceId DESC LIMIT 1;
SELECT      (COUNT(*) FILTER (WHERE country = 'Germany' AND name = 'European Grand Prix')::NUMERIC      / COUNT(*) FILTER (WHERE name = 'European Grand Prix')::NUMERIC) * 100 AS percentage FROM      races JOIN      circuits ON races.circuitId = circuits.circuitId WHERE      circuits.country = 'Europe';
SELECT lat, lng  FROM circuits  WHERE name = 'Silverstone Circuit';
SELECT circuits.name FROM circuits WHERE circuits.lat > (SELECT MAX(lat) FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring'))
SELECT circuits.circuitRef  FROM circuits  WHERE circuits.name = 'Marina Bay Street Circuit';
SELECT country  FROM circuits  WHERE alt = (SELECT MAX(alt) FROM circuits);
SELECT COUNT(*)  FROM drivers  WHERE code IS NULL;
SELECT T1.country  FROM circuits AS T1  JOIN drivers AS T2 ON T1.circuitId = T2.currentCircuitId  WHERE T2.dob = (SELECT MIN(dob) FROM drivers)  GROUP BY T1.country
SELECT surname  FROM drivers  WHERE nationality = 'italian';
SELECT url  FROM drivers  WHERE forename = 'Anthony' AND surname = 'Davidson';
SELECT driverRef FROM drivers WHERE surname = 'Hamilton' AND forename = 'Lewis';
SELECT circuits.name FROM circuits JOIN races ON races.circuitId = circuits.circuitId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';
SELECT DISTINCT s.year  FROM circuits c  JOIN races r ON c.circuitId = r.circuitId  WHERE c.name = 'Silverstone'
SELECT circuits.url  FROM circuits  JOIN races ON races.circuitId = circuits.circuitId  WHERE circuits.name = 'Silverstone Circuit';
SELECT races.time  FROM races  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE circuits.name = 'Abu Dhabi Circuit' AND races.year BETWEEN 2010 AND 2019;
SELECT COUNT(*)  FROM races  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE circuits.country = 'Italy';
SELECT races.date  FROM races  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE circuits.name = 'Barcelona-Catalunya';
SELECT circuits.url  FROM circuits  JOIN races ON circuits.circuitId = races.circuitId  WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;
SELECT MIN(T2.fastestLapTime) AS FastestLapTimeEver FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton';
SELECT      d.forename,      d.surname  FROM      drivers AS d  JOIN      results AS r ON d.driverId = r.driverId  JOIN      lapTimes AS lt ON r.raceId = lt.raceId AND r.driverId = lt.driverId  WHERE      lt.time = (         SELECT              MIN(lt2.time)          FROM              lapTimes AS lt2          WHERE              lt2.driverId = lt.driverId     )  AND r.statusId = (     SELECT          s.statusId      FROM          status AS s      WHERE          s.status = 'Finished' );
SELECT d.forename, d.surname  FROM drivers d  JOIN results r ON d.driverId = r.driverId  JOIN races ra ON r.raceId = ra.raceId  WHERE ra.name = 'Australian Grand Prix' AND r.year = 2008 AND r.position = 1;
SELECT races.name FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT race.name FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank ASC LIMIT 1;
SELECT MAX(T1.fastestLapSpeed)  FROM results AS T1  JOIN races AS T2 ON T1.raceId = T2.raceId  WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'
SELECT DISTINCT T2.year FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton';
SELECT positionOrder  FROM results  WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton')  AND raceId IN (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix');
SELECT d.forename, d.surname  FROM drivers d  JOIN results r ON d.driverId = r.driverId  JOIN races rs ON r.raceId = rs.raceId  WHERE rs.year = 2008  AND rs.name = 'Australian Grand Prix'  AND r.grid = 4;
SELECT COUNT(DISTINCT driverId)  FROM results  WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix' AND time IS NOT NULL);
SELECT f最快的圈速时间  FROM `results` r  JOIN `drivers` d ON r.driverId = d.driverId  JOIN `races` race ON r.raceId = race.raceId  WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND race.year = 2008 AND race.name = 'Australian Grand Prix';
SELECT results.time  FROM results  JOIN races ON results.raceId = races.raceId  WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 AND results.positionOrder = 2;
SELECT      d.forename, d.surname, c.url  FROM      results r  JOIN      drivers d ON r.driverId = d.driverId  JOIN      races ra ON r.raceId = ra.raceId  JOIN      circuits ct ON ra.circuitId = ct.circuitId  JOIN      seasons s ON ra.year = s.year  WHERE      s.year = 2008 AND ct.name = 'Australian Grand Prix' AND r.position = 1;
SELECT COUNT(*)  FROM drivers  JOIN results ON drivers.driverId = results.driverId  JOIN races ON results.raceId = races.raceId  WHERE drivers.nationality = 'American'  AND races.year = 2008  AND races.name = 'Australian Grand Prix';
SELECT COUNT(*)  FROM results  WHERE raceId IN (     SELECT raceId      FROM races      WHERE year = 2008 AND name = 'Australian Grand Prix' AND statusId = (SELECT statusId FROM status WHERE status = 'Finished') )
SELECT SUM(T2.points)  FROM drivers AS T1  JOIN results AS T2 ON T1.driverId = T2.driverId  WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton';
SELECT AVG(T2.fastestLapTime / 1000) AS AvgFastestLapTimeSeconds FROM `results` AS T1 JOIN `drivers` AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton';
SELECT      COUNT(*) FILTER (WHERE time IS NOT NULL) AS completed_laps,     COUNT(*) AS total_laps,     CAST(COUNT(*) FILTER (WHERE time IS NOT NULL) AS REAL) / COUNT(*) AS rate FROM      results WHERE      year = 2008 AND raceId IN (         SELECT raceId FROM races WHERE name = 'Australian Grand Prix'     );
SELECT      (TIMESTAMPDIFF(SECOND, r.fastestLapTime, c.fastestLapTime) - TIMESTAMPDIFF(SECOND, l.time, l.time)) * 100 / TIMESTAMPDIFF(SECOND, l.time, r.fastestLapTime) AS percentage_faster FROM      results r JOIN      results l ON l.position = (SELECT MAX(position) FROM results WHERE raceId = (SELECT raceId FROM results WHERE year = 2008 AND raceName = 'Australian Grand Prix')) JOIN      races ON races.raceId = r.raceId JOIN      circuits ON circuits.circuitId = races.circuitId WHERE      races.year = 2008 AND races.name = 'Australian Grand Prix' AND      r.driverId = (         SELECT              driverId          FROM              results          WHERE              raceId = (                 SELECT                      raceId                  FROM                      results                  WHERE                      year = 2008 AND raceName = 'Australian Grand Prix'             ) AND position = 1     ) ;
SELECT COUNT(*)  FROM circuits  WHERE country = 'Australia' AND location = 'Melbourne';
SELECT location, lat, lng  FROM circuits  WHERE country = 'USA';
SELECT COUNT(*)  FROM drivers  WHERE nationality = 'British' AND dob > 1980;
SELECT AVG(T2.points)  FROM constructors AS T1  JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId  WHERE T1.nationality = 'British';
SELECT constructor.name FROM constructors constructor JOIN constructor_results cr ON constructor.constructor_id = cr.constructor_id GROUP BY constructor.name ORDER BY SUM(cr.points) DESC LIMIT 1;
SELECT c.name FROM constructors c JOIN constructor_results cr ON c.constructor_id = cr.constructor_id WHERE cr.race_id = 291 AND cr.points = 0;
SELECT COUNT(*)  FROM constructors  WHERE nationality = 'Japanese' AND EXISTS (     SELECT 1      FROM constructorResults      WHERE constructorId = constructors.constructorId      GROUP BY raceId      HAVING COUNT(raceId) = 2 AND SUM(points) = 0 );
SELECT DISTINCT c.name  FROM constructors AS c  JOIN constructor_standings AS cs ON c.constructor_id = cs.constructor_id  WHERE cs.position = '1';
SELECT COUNT(*)  FROM constructors  JOIN circuits ON constructors.constructorId = circuits.constructorId  WHERE constructors.nationality = 'French' AND lapTimes.lap > 50;
SELECT      (COUNT(CASE WHEN T1.time IS NOT NULL AND T1.year BETWEEN 2007 AND 2009 THEN T1.driverId ELSE NULL END) /      COUNT(CASE WHEN T1.year BETWEEN 2007 AND 2009 THEN T1.driverId ELSE NULL END)) * 100 AS RaceCompletionPercentage FROM      races AS T1  JOIN      drivers AS T2 ON T1.driverId = T2.driverId  WHERE      T2.nationality = 'Japanese';
SELECT      s.year,     AVG(TIME_TO_SEC(TIMEDIFF(IFNULL(r.time, '00:00:00.000'), '00:00:00.000'))) AS avg_time_seconds FROM      seasons s JOIN      results r ON s.year = r.year WHERE      r.position = 1 GROUP BY      s.year;
SELECT      forename,      surname  FROM      drivers  JOIN      results ON drivers.driverId = results.driverId  WHERE      year(driver.dob) > 1975 AND results.position = 2;
SELECT COUNT(*)  FROM results  WHERE driverId IN (     SELECT driverId      FROM drivers      WHERE nationality = 'Italian' ) AND time IS NULL;
SELECT      d.forename,      d.surname  FROM      drivers AS d  JOIN      results AS r ON d.driverId = r.driverId  WHERE      r.fastestLapTime IS NOT NULL  ORDER BY      r.fastestLapTime ASC  LIMIT 1;
SELECT      r.fastestLap  FROM      results AS r  JOIN      races AS race ON r.raceId = race.raceId  JOIN      seasons AS s ON race.year = s.year  WHERE      s.year = 2009  AND      r.position = 1;
SELECT AVG(T1.fastestLapSpeed)  FROM results AS T1  JOIN seasons AS T2 ON T1.year = T2.year  JOIN races AS T3 ON T1.raceId = T3.raceId  WHERE T3.name = 'Spanish Grand Prix' AND T2.year = 2009;
SELECT T1.name, T1.year  FROM races AS T1  JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T2.milliseconds = (SELECT MIN(T2.milliseconds) FROM results WHERE milliseconds IS NOT NULL)
SELECT      (COUNT(CASE WHEN year(dob) < 1985 AND laps > 50 THEN driverId END)      OVER () * 100.0 / COUNT(driverId) OVER ()) as percentage FROM      results  WHERE      year BETWEEN 2000 AND 2005;
SELECT COUNT(*)  FROM drivers  JOIN results ON drivers.driverId = results.driverId  JOIN races ON results.raceId = races.raceId  WHERE drivers.nationality = 'French'  AND results.time < '02:00.00'
SELECT code  FROM drivers  WHERE nationality = 'America';
SELECT raceId FROM races WHERE year = 2009;
SELECT COUNT(DISTINCT driverId)  FROM results  WHERE raceId = 18;
SELECT COUNT(*)  FROM (   SELECT d.driverId, d.dob, c.constructorRef   FROM drivers d   JOIN constructors c ON d.nationality = 'Netherlands' AND c.constructorRef = d.code   WHERE d.year(dob) >= (SELECT MIN(year(dob)) FROM drivers LIMIT 1 OFFSET 3) ) AS youngest_netherlands_drivers
SELECT name  FROM drivers  WHERE forename = 'Robert' AND surname = 'Kubica';
SELECT COUNT(*)  FROM drivers  WHERE nationality = 'Australian' AND YEAR(dob) = 1980;
SELECT      d.forename,     d.surname FROM      drivers d JOIN      results r ON d.driverId = r.driverId JOIN      circuits c ON r.raceId = c.raceId JOIN      seasons s ON c.year BETWEEN s.year - 1 AND s.year WHERE      d.nationality = 'German' AND     YEAR(d.dob) BETWEEN 1980 AND 1990 AND     r.position IS NOT NULL AND     r.time IS NOT NULL AND     r.statusId = (SELECT statusId FROM status WHERE status = 'Finished') ORDER BY      r.lap ASC,      r.time ASC LIMIT 3;
SELECT driverRef FROM drivers WHERE nationality = 'Germany' AND dob = (SELECT MIN(year(dob)) FROM drivers);
SELECT driverId, code  FROM drivers  JOIN results ON drivers.driverId = results.driverId  WHERE year(dob) = 1971 AND fastestLapTime IS NOT NULL;
SELECT      d.forename,     d.surname FROM      drivers d JOIN      circuits c ON d.driverId = c.driverId WHERE      d.nationality = 'Spanish' AND year(d.dob) < 1982 ORDER BY      c.laps DESC LIMIT 10;
SELECT year  FROM seasons  JOIN results ON seasons.year = results.year  WHERE fastestLapTime IS NOT NULL;
SELECT year  FROM seasons  JOIN results ON seasons.year = results.year  JOIN lapTimes ON results.resultId = lapTimes.resultId  WHERE time = (SELECT MAX(time) FROM lapTimes)
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5;
SELECT COUNT(*)  FROM results  WHERE raceId BETWEEN 50 AND 100  AND statusId = 2  AND time IS NOT NULL;
SELECT c.location, c.lat, c.lng  FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE c.country = 'Austria';
SELECT raceId, COUNT(*) as num_finishers FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY num_finishers DESC LIMIT 1;
SELECT      driverRef,      nationality,      dob FROM      drivers WHERE      raceId = 23 AND q2 IS NOT NULL;
SELECT      s.year,     d.forename || ' ' || d.surname AS driver_name,     r.name AS race_name,     r.date,     r.time FROM      seasons s JOIN      races r ON s.year = r.year JOIN      qualifying q ON r.raceId = q.raceId JOIN      drivers d ON q.driverId = d.driverId WHERE      d.dob = (SELECT MIN(dob) FROM drivers) ORDER BY      r.date ASC LIMIT 1;
SELECT COUNT(*)  FROM drivers  JOIN driverStandings ON drivers.driverId = driverStandings.driverId  JOIN status ON driverStandings.statusId = status.statusId  WHERE drivers.nationality = 'American' AND status.status = 'disqualified';
SELECT      c.name,     c.url FROM      constructors AS c JOIN      constructorResults AS cr ON c.constructorId = cr.constructorId WHERE      c.nationality = 'Italian' ORDER BY      cr.points DESC LIMIT 1;
SELECT      c.constructorRef,      c.url  FROM      constructors AS c  JOIN      constructorStandings AS cs ON c.constructorId = cs.constructorId  WHERE      cs.wins > 0  GROUP BY      c.constructorRef,      c.url  ORDER BY      SUM(cs.wins) DESC  LIMIT 1;
SELECT driver.surname, driver.forename, lapTimes.time  FROM drivers AS driver  JOIN races AS race ON race.circuitId = circuits.circuitId  JOIN lapTimes ON lapTimes.driverId = driver.driverId AND lapTimes.raceId = race.raceId  WHERE race.name = 'French Grand Prix' AND lapTimes.lap = 3  ORDER BY lapTimes.time DESC LIMIT 1;
SELECT race.name, time.milliseconds  FROM results  JOIN races ON results.raceId = races.raceId  JOIN lapTimes ON results.driverId = lapTimes.driverId AND results.raceId = lapTimes.raceId  WHERE lapTimes.time = (SELECT MIN(time) FROM lapTimes)
SELECT AVG(T1.fastestLapTime)  FROM results AS T1  JOIN races AS T2 ON T1.raceId = T2.raceId  JOIN circuits AS T3 ON T2.circuitId = T3.circuitId  WHERE T2.year = 2006  AND T3.name = 'United States Grand Prix'  AND T1.rank < 11;
SELECT      d.forename,      d.surname  FROM      drivers d JOIN      circuits c ON d.driverId = c.driverId   JOIN      races r ON c.raceId = r.raceId  JOIN      results res ON r.raceId = res.raceId  WHERE      d.nationality = 'German' AND      YEAR(d dob) BETWEEN 1980 AND 1985  GROUP BY      d.driverId  HAVING      AVG(res.duration) = (         SELECT              MIN(AVG(t.duration))          FROM              (SELECT                  raceId,                  driverId,                  SUM(duration)/COUNT(duration) as duration              FROM                  pitstops              WHERE                  nationality = 'German' AND                  YEAR(d dob) BETWEEN 1980 AND 1985              GROUP BY                  raceId,                  driverId) t     ) LIMIT      5;
SELECT      T1.forename || ' ' || T1.surname AS Champion,     T4.time AS FinishTime FROM      drivers AS T1 JOIN      results AS T2 ON T1.driverId = T2.driverId JOIN      races AS T3 ON T3.raceId = T2.raceId JOIN      circuits AS T4 ON T4.circuitId = T3.circuitId WHERE      T3.name = 'Canadian Grand Prix' AND T3.year = 2008 AND T4.country = 'Canada' ORDER BY      T2.position LIMIT 1;
SELECT      c.constructorRef,      c.url  FROM      races r  JOIN      results res ON r.raceId = res.raceId  JOIN      constructorStandings cs ON r.raceId = cs.raceId  JOIN      constructors c ON cs.constructorId = c.constructorId  WHERE      r.name = 'Singapore Grand Prix' AND      res.year = 2009 AND      cs.position = 1 AND      MAX(r.time);
SELECT driver.forename, driver.surname, driver.dob  FROM drivers AS driver  JOIN seasons ON driver.year >= seasons.year  WHERE driver.nationality = 'Austria' AND driver.dob BETWEEN '1981-01-01' AND '1991-12-31';
SELECT      forename + ' ' + surname AS Full_name,     url AS Wikipedia_page_link,     dob FROM      drivers WHERE      nationality = 'German' AND dob IS NOT NULL AND year(dob) BETWEEN 1971 AND 1985 ORDER BY      dob DESC;
SELECT      location,      country,      lat,      lng  FROM      circuits  WHERE      name = 'Hungaroring';
SELECT      SUM(constructorResults.points) AS total_points,     constructors.name,     constructors.nationality FROM      constructorResults JOIN      races ON constructorResults.raceId = races.raceId JOIN      circuits ON races.circuitId = circuits.circuitId JOIN      constructors ON constructorResults.constructorId = constructors.constructorId WHERE      circuits.name = 'Monaco Grand Prix' AND      races.year BETWEEN 1980 AND 2010 GROUP BY      constructors.constructorId ORDER BY      total_points DESC LIMIT 1;
SELECT AVG(T2.points)  FROM seasons AS T1  JOIN results AS T2 ON T1.year = T2.raceId  JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Turkish Grand Prix';
SELECT COUNT(*) / 10 AS average_races_per_year FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31';
SELECT nationality FROM drivers WHERE row_number = (SELECT COUNT(*) FROM drivers) * 0.9;
SELECT COUNT(*) AS victories FROM results WHERE position = '91st';
SELECT races.name FROM races JOIN results ON races.raceId = results.raceId WHERE results.fastestLapSpeed = (SELECT MIN(fastestLapSpeed) FROM results);
SELECT circuits.location, circuits.country  FROM circuits  JOIN races ON circuits.circuitId = races.circuitId  WHERE races.date = (SELECT MAX(date) FROM races)
SELECT d.forename, d.surname  FROM drivers d  JOIN results r ON d.driverId = r.driverId  JOIN races ra ON r.raceId = ra.raceId  JOIN circuits c ON ra.circuitId = c.circuitId  WHERE ra.year = 2008 AND c.name = 'Marina Bay Street Circuit' AND r.qualifyId IN (SELECT MIN(q3) FROM qualifying WHERE year = 2008);
SELECT      d.forename + ' ' + d.surname AS full_name,     d.nationality,     r.name AS first_race_name FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE d.dob = (SELECT MAX(dob) FROM drivers) ORDER BY d.dob DESC LIMIT 1;
SELECT COUNT(*)  FROM (   SELECT rs.driverId, COUNT(*) AS num_accidents   FROM results AS rs   JOIN races AS r ON rs.raceId = r.raceId    JOIN circuits AS c ON r.circuitId = c.circuitId   WHERE c.name = 'Canadian Grand Prix' AND rs.statusId = 3   GROUP BY rs.driverId ) AS t ORDER BY num_accidents DESC LIMIT 1;
SELECT COUNT(driverStandings.wins)  FROM drivers  JOIN driverStandings ON drivers.driverId = driverStandings.driverId  WHERE drivers.dob = (SELECT MIN(dob) FROM drivers);
SELECT MAX(`duration`) AS longest_time_spent_at_pitstop FROM pitStops;
SELECT time, milliseconds  FROM lapTimes  WHERE position = 1  ORDER BY milliseconds ASC  LIMIT 1;
SELECT MAX(milliseconds) AS longest_pit_stop_time FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');
SELECT pitStops.lap  FROM pitStops  JOIN races ON pitStops.raceId = races.raceId  JOIN results ON pitStops.driverId = results.driverId AND races.raceId = results.raceId  JOIN drivers ON results.driverId = drivers.driverId  WHERE races.year = 2011  AND races.name = 'Australian Grand Prix'  AND drivers.forename = 'Lewis'  AND drivers.surname = 'Hamilton';
SELECT      p.time,     d.forename,     d.surname FROM      pitStops AS p JOIN      drivers AS d ON p.driverId = d.driverId JOIN      races AS r ON p.raceId = r.raceId WHERE      r.year = 2011 AND r.name = 'Australian Grand Prix';
SELECT      MIN(time) as lap_record_time FROM      lapTimes WHERE      driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton' AND forename = 'Lewis');
SELECT d.forename, d.surname  FROM drivers d  JOIN lapTimes lt ON d.driverId = lt.driverId  WHERE lt.time = (SELECT MIN(time) FROM lapTimes);
SELECT circuits.position FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN results ON races.raceId = results.raceId WHERE results.driverId IN (     SELECT driverId     FROM results     WHERE driverRef = 'lewishamilton' AND fastestLapTime = (SELECT MIN(time) FROM lapTimes WHERE driverId = results.driverId) );
SELECT MIN(milliseconds) AS lap_record  FROM lapTimes  JOIN races ON lapTimes.raceId = races.raceId  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE circuits.name = 'Austrian Grand Prix';
SELECT      c.name AS CircuitName,     l.time AS LapTime,     l.milliseconds AS LapMilliseconds FROM      circuits c JOIN      races r ON c.circuitId = r.circuitId JOIN      lapTimes l ON r.raceId = l.raceId WHERE      c.country = 'Italy';
SELECT      q.qualifyId AS 'Qualify ID',     r.raceId AS 'Race ID',     r.name AS 'Race Name' FROM      qualifying q JOIN      races r ON q.raceId = r.raceId JOIN      circuits c ON c.circuitId = r.circuitId WHERE      c.name = 'Austrian Grand Prix' AND      q.q3 IS NOT NULL; -- Filter for the lap record during Q3 session
SELECT T1.duration  FROM pitStops AS T1  JOIN races AS T2 ON T1.raceId = T2.raceId  JOIN circuits AS T3 ON T2.circuitId = T3.circuitId  WHERE T3.name = 'Austrian Grand Prix Circuit'  AND T1.time LIKE '%Lap Record%';
SELECT circuits.lat, circuits.lng  FROM circuits  JOIN races ON circuits.circuitId = races.circuitId  JOIN lapTimes ON races.raceId = lapTimes.raceId  WHERE lapTimes.time = '01:29.488';
SELECT AVG(milliseconds)  FROM pitStops  WHERE driverId IN (     SELECT driverId      FROM drivers      WHERE forename = 'Lewis' AND surname = 'Hamilton' )
SELECT AVG(l milliseconds)  FROM lapTimes  JOIN races ON lapTimes.raceId = races.raceId  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE circuits.country = 'Italy';
SELECT player_api_id  FROM Player_Attributes  WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
SELECT p.player_name, MAX(p.height) AS tallest_height  FROM Player p;
SELECT `preferred_foot`  FROM Player_Attributes  WHERE `potential` = (SELECT MIN(`potential`) FROM Player_Attributes);
SELECT COUNT(*)  FROM Player_Attributes  WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low';
SELECT player_api_id  FROM Player_Attributes  WHERE crossing = (SELECT MAX(`crossing`) FROM Player_Attributes)  LIMIT 5;
SELECT      T3.name  FROM      Match AS T1  JOIN      Team AS T2 ON T1.home_team_api_id = T2.team_api_id OR T1.away_team_api_id = T2.team_api_id  JOIN      League AS T3 ON T3.id = T2.league_id  WHERE      T3.name IS NOT NULL AND T1.season = '2015/2016'  GROUP BY      T3.name  ORDER BY      SUM(T1.home_team_goal + T1.away_team_goal) DESC  LIMIT 1;
SELECT      home_team_api_id  FROM      Match  WHERE      season = '2015/2016' AND      (home_team_goal - away_team_goal) < 0  GROUP BY      home_team_api_id  ORDER BY      COUNT(*) ASC  LIMIT 1;
SELECT player_name FROM Player WHERE player_api_id IN (     SELECT player_api_id     FROM Player_Attributes     ORDER BY penalties DESC     LIMIT 10 )
SELECT      T1.away_team_api_id FROM      Match AS T1 JOIN      League AS T2 ON T1.league_id = T2.id JOIN      Country AS T3 ON T2.country_id = T3.id WHERE      T2.name = 'Scotland Premier League' AND T1.season = '2009/2010' AND (T1.away_team_goal - T1.home_team_goal) = MAX(T1.away_team_goal - T1.home_team_goal) LIMIT 1;
SELECT team_long_name, MAX(buildUpPlaySpeed)  FROM Team_Attributes  WHERE team_api_id IN (     SELECT DISTINCT team_api_id      FROM (SELECT team_api_id, RANK() OVER (ORDER BY buildUpPlaySpeed DESC) as rank FROM Team_Attributes) subquery      WHERE rank <= 4 )
SELECT      T3.name  FROM      Match AS T1  JOIN      Team AS T2 ON T1.home_team_api_id = T2.team_api_id OR T1.away_team_api_id = T2.team_api_id  JOIN      League AS T3 ON T3.id = T1.league_id  WHERE      T1.season = '2015/2016'  GROUP BY      T3.name  ORDER BY      COUNT(CASE WHEN home_team_goal = away_team_goal THEN 1 ELSE NULL END) DESC  LIMIT 1;
SELECT      Player.id,      Player.player_name,     DATEDIFF(CURRENT_DATE, Player.birthday) AS age FROM      Player JOIN      Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE      Player_Attributes.sprint_speed >= 97 AND     Player_Attributes.date >= '2013-01-01 00:00:00' AND      Player_Attributes.date <= '2015-12-31 00:00:00';
SELECT      League.name,     COUNT(Match.id) AS total_matches FROM      League  JOIN      Match ON League.id = Match.league_id GROUP BY      League.name ORDER BY      total_matches DESC LIMIT 1;
SELECT AVG(Player.height)  FROM Player  WHERE Player.birthday >= '1990-01-01 00:00:00' AND Player.birthday < '1996-01-01 00:00:00';
SELECT player_api_id  FROM Player_Attributes  WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes)  AND SUBSTR(date, 1, 4) = '2010';
SELECT team_fifa_api_id  FROM Team_Attributes  WHERE buildUpPlaySpeed BETWEEN 51 AND 59;
SELECT team_long_name  FROM Team  JOIN Team_Attributes ON Team.id = Team_Attributes.team_api_id  WHERE strftime('%Y', Team_Attributes.date) = '2012'  AND Team_Attributes.buildUpPlayPassing > (SELECT AVG(Team_Attributes.buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012');
SELECT      (COUNT(CASE WHEN preferred_foot = 'left' THEN 1 END) * 1.0 / COUNT(player_fifa_api_id)) * 100 AS percentage_left_footers, FROM      Player_Attributes WHERE      birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00';
SELECT      c.name AS 'League Name',     SUM(m.home_team_goal + m.away_team_goal) AS 'Total Goals' FROM      Country c JOIN      League l ON c.id = l.country_id JOIN      Match m ON l.id = m.league_id GROUP BY      c.name ORDER BY      Total_goals ASC LIMIT 5;
SELECT      AVG(Player_Attributes.long_shots) AS avg_long_shots FROM      Player_Attributes JOIN      Player ON Player.id = Player_Attributes.player_api_id WHERE      Player.player_name = 'Ahmed Samir Farag';
SELECT      Player.player_name  FROM      Player  JOIN      Player_Attributes ON Player.id = Player_Attributes.player_api_id  WHERE      Player.height > 180  GROUP BY      Player.player_fifa_api_id  ORDER BY      AVG(Heading_Accuracy) DESC  LIMIT 10;
SELECT T3.team_long_name  FROM Team_Attributes AS T1  JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id  JOIN Team AS T3 ON T1.team_fifa_api_id = T3.team_fifa_api_id  WHERE T1.buildUpPlayDribblingClass = 'Normal'  AND T1.date BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 00:00:00'  AND T1.chanceCreationPassing < (SELECT AVG(T4.chanceCreationPassing) FROM Team_Attributes AS T4 WHERE T4.buildUpPlayDribblingClass = 'Normal' AND T4.date BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 00:00:00')  ORDER BY T1.chanceCreationPassing DESC;
SELECT      League.name FROM      League JOIN      Match ON League.id = Match.league_id WHERE      Match.season = '2009/2010' GROUP BY      League.name HAVING      AVG(home_team_goal) > AVG(away_team_goal);
SELECT team_short_name  FROM Team  WHERE team_long_name = 'Queens Park Rangers';
SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 4) = '1970' AND SUBSTR(birthday, 6, 2) = '10';
SELECT attacking_work_rate  FROM Player_Attributes  WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Franco Zennaro');
SELECT `buildUpPlayPositioningClass` FROM `Team_Attributes` JOIN `Team` ON `Team_Attributes`.`team_fifa_api_id` = `Team`.`team_fifa_api_id` WHERE `Team`.`team_long_name` = 'ADO Den Haag';
SELECT Player_Attributes.header FROM `european_football_2`.Player_Attributes JOIN `european_football_2`.Player ON Player.id = Player_Attributes.player_api_id WHERE Player.player_name = 'Francois Affolter' AND Player_Attributes.date = '2014-09-18 00:00:00';
SELECT Player_Attributes.overall_rating  FROM Player_Attributes  JOIN Player ON Player.id = Player_Attributes.player_api_id  WHERE Player.player_name = 'Gabriel Tamas' AND strftime('%Y', Player_Attributes.date) = '2011';
SELECT COUNT(*)  FROM Match  WHERE season IN ('2015/2016')  AND League.name = 'Scotland Premier League';
SELECT      Player.player_name  FROM      Player  JOIN      Player_Attributes ON Player.id = Player_Attributes.player_api_id  WHERE      Player.birthday = (SELECT MAX(birthday) FROM Player);
SELECT player_name FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes);
SELECT COUNT(*)  FROM Player_Attributes  WHERE weight < 130 AND preferred_foot = 'left';
SELECT DISTINCT T.team_short_name  FROM Team AS T  JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id  WHERE TA.chanceCreationPassingClass = 'Risky';
SELECT `defensive_work_rate`  FROM `Player_Attributes`  JOIN `Player` ON `Player.id` = `Player_Attributes.player_id`  WHERE `player_name` = 'David Wilson';
SELECT Player.birthday  FROM Player  JOIN Player_Attributes ON Player.id = Player_Attributes.player_api_id  WHERE Player_Attributes.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
SELECT l.name  FROM Country c  JOIN League l ON c.id = l.country_id  WHERE c.name = 'Netherlands';
SELECT AVG(home_team_goal)  FROM Match  WHERE country_id IN (     SELECT id      FROM Country      WHERE name = 'Poland' ) AND season = '2010/2011';
SELECT      Player.player_name  FROM      Player  JOIN      Player_Attributes ON Player.id = Player_Attributes.player_api_id  WHERE      (Player.height = (SELECT MAX(height) FROM Player)) OR      (Player.height = (SELECT MIN(height) FROM Player)) AND      Player_Attributes.finishing = (SELECT MAX(AVG(finishing)) FROM (SELECT finishing FROM Player_Attributes WHERE Player_Attributes.player_api_id = Player.id));
SELECT player_name FROM Player WHERE height > 180;
SELECT COUNT(*)  FROM Player  WHERE strftime('%Y', Player.birthday) > '1990';
SELECT COUNT(*)  FROM Player  WHERE player_name LIKE '%Adam%' AND weight > 170;
SELECT DISTINCT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.overall_rating > 80 AND strftime('%Y', pa.date) BETWEEN '2008' AND '2010';
SELECT `potential` FROM Player_Attributes WHERE `player_fifa_api_id` = (SELECT `player_fifa_api_id` FROM Player WHERE `player_name` = 'Aaron Doran');
SELECT player_name FROM Player_Attributes WHERE preferred_foot = 'left';
SELECT team_long_name  FROM Team  JOIN Team_Attributes ON Team.id = Team_Attributes.team_api_id  WHERE buildUpPlaySpeedClass = 'Fast';
SELECT      t1.buildUpPlayPassingClass  FROM      Team_Attributes AS t1  JOIN      Team AS t2 ON t1.team_api_id = t2.team_api_id  WHERE      t2.team_long_name = 'CLB';
SELECT T1.team_short_name  FROM Team AS T1  JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id  WHERE T2.buildUpPlayPassing > 70;
SELECT AVG(overall_rating)  FROM Player_Attributes  WHERE date >= '2010-01-01' AND date <= '2015-12-31' AND height > 170;
SELECT player_name, height FROM Player WHERE height = (SELECT MIN(height) FROM Player);
SELECT Country.name FROM Country JOIN League ON Country.id = League.country_id WHERE League.name = 'Italy Serie A';
SELECT team_short_name  FROM Team_Attributes  WHERE buildUpPlaySpeed = 31 AND buildUpPlayDribbling = 53 AND buildUpPlayPassing = 32;
SELECT AVG(Player_Attributes.overall_rating)  FROM Player_Attributes  JOIN Player ON Player.id = Player_Attributes.player_api_id  WHERE Player.player_name = 'Aaron Doran';
SELECT COUNT(*)  FROM Match  WHERE league_id = (SELECT id FROM League WHERE name = 'Germany 1. Bundesliga')  AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';
SELECT T3.team_short_name  FROM Match AS T1  JOIN Team AS T3 ON T3.team_api_id = T1.home_team_api_id  WHERE T1.home_team_goal = 10;
SELECT player_name FROM Player_Attributes WHERE potential = 61 AND balance = (SELECT MAX(balance) FROM Player_Attributes);
SELECT      (AVG(t1.ball_control) - AVG(t2.ball_control)) as Ball_Control_Difference FROM      Player_Attributes t1 JOIN      Player t2 ON t1.player_api_id = t2.player_api_id WHERE      t1.player_name = 'Abdou Diallo' UNION ALL SELECT      (AVG(t3.ball_control) - AVG(t4.ball_control)) as Ball_Control_Difference FROM      Player_Attributes t3 JOIN      Player t4 ON t3.player_api_id = t4.player_api_id WHERE      t3.player_name = 'Aaron Appindangoye'
SELECT team_long_name  FROM Team  WHERE team_short_name = 'GEN';
SELECT      p1.player_name AS older_player FROM      Player p1 JOIN      Player p2 ON p1.birthday < p2.birthday WHERE      (p1.player_name = 'Aaron Lennon' AND p2.player_name = 'Abdelaziz Barrada') OR     (p1.player_name = 'Abdelaziz Barrada' AND p2.player_name = 'Aaron Lennon')
SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);
SELECT COUNT(*)  FROM Player_Attributes  WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';
SELECT Country.name FROM Country JOIN League ON Country.id = League.country_id WHERE League.name = 'Belgium Jupiler League';
SELECT DISTINCT l.name  FROM League l  JOIN Country c ON l.country_id = c.id  WHERE c.name = 'Germany';
SELECT player_name, MAX(overall_rating) as strongest_overall_strength FROM Player_Attributes
SELECT COUNT(*)  FROM Player  WHERE strftime('%Y', Player.birthday)<'1986' AND EXISTS (     SELECT 1      FROM Player_Attributes      WHERE Player.id = Player_Attributes.player_id      AND defensive_work_rate = 'high' );
SELECT Player.player_name, MAX(Player_Attributes.crossing) FROM Player JOIN Player_Attributes ON Player.id = Player_Attributes.player_api_id WHERE Player.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY MAX(Player_Attributes.crossing) DESC;
SELECT `heading_accuracy`  FROM Player_Attributes  WHERE player_api_id = (SELECT id FROM Player WHERE player_name = 'Ariel Borysiuk');
SELECT COUNT(*)  FROM Player_Attributes  WHERE height > 180 AND volleys > 70;
SELECT p.player_name  FROM Player_Attributes pa  JOIN Player p ON pa.player_api_id = p.player_api_id  WHERE pa.volleys > 70 AND pa.dribbling > 70;
SELECT COUNT(*)  FROM Match  JOIN Country ON Match.country_id = Country.id  WHERE Season = '2008/2009' AND Country.name = 'Belgium';
SELECT MAX(Player.date) AS oldest_birthday, Player_Attributes.long_passing  FROM Player  JOIN Player_Attributes ON Player.id = Player_Attributes.player_api_id WHERE Player.birthday = oldest_birthday;
SELECT COUNT(*)  FROM Match  JOIN Country ON Match.country_id = Country.id  JOIN League ON Match.league_id = League.id  WHERE League.name = 'Belgium Jupiler League'  AND strftime('%Y', Match.date) = '2009'  AND strftime('%m', Match.date) = '04';
SELECT      c.name FROM      Country c JOIN      League l ON c.id = l.country_id JOIN      Match m ON l.id = m.league_id WHERE      m.season = '2008/2009' GROUP BY      c.name ORDER BY      COUNT(*) DESC LIMIT 1;
SELECT      AVG(Player_Attributes.overall_rating) AS avg_overall_rating FROM      Player_Attributes JOIN      Player ON Player.id = Player_Attributes.player_api_id WHERE      strftime('%Y', Player.birthday) < '1986';
SELECT      ( (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Ariel Borysiuk') -        (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Paulin Puel')      ) /      (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Paulin Puel') * 100 AS percentage_difference FROM     Player_Attributes;
SELECT AVG(Team_Attributes.buildUpPlaySpeed)  FROM Team_Attributes  JOIN Team ON Team.id = Team_Attributes.team_api_id  WHERE Team.team_long_name = 'Heart of Midlothian';
SELECT AVG(T1.overall_rating)  FROM Player_Attributes AS T1  JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id  WHERE T2.player_name = 'Pietro Marino';
SELECT SUM(T2.crossing)  FROM Player AS T1  JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  WHERE T1.player_name = 'Aaron Lennox';
SELECT      MAX(Team_Attributes.chanceCreationPassing) AS highest_chance_creation_passing,     Team_Attributes.chanceCreationPassingClass AS classification FROM      Team_Attributes  WHERE      Team_Attributes.team_long_name = 'Ajax';
SELECT preferred_foot FROM Player WHERE player_name = 'Abdou Diallo';
SELECT MAX(Player_Attributes.overall_rating) FROM Player_Attributes JOIN Player ON Player.id = Player_Attributes.player_api_id WHERE Player.player_name = 'Dorlan Pabon';
SELECT AVG(M.away_team_goal)  FROM Team AS T JOIN Match AS M ON T.team_long_name = 'Parma' AND T.team_long_name = M.away_team_long_name  JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id   JOIN League AS L ON L.name = 'Italy' AND L.id = M.league_id
SELECT p.player_name  FROM Player_Attributes pa  JOIN Player p ON pa.player_api_id = p.player_api_id  WHERE pa.overall_rating = 77 AND pa.date = '2016-06-23'  ORDER BY p.birthday ASC  LIMIT 1;
SELECT `overall_rating`  FROM `Player_Attributes`  WHERE `player_name` = 'Aaron Mooy'  AND `date` = '2016-02-04 00:00:00';
SELECT `potential` FROM Player_Attributes WHERE `player_name` = 'Francesco Parravicini' AND date = '2010-08-30 00:00:00';
SELECT Player_Attributes.attacking_work_rate  FROM Player_Attributes JOIN Player ON Player.id = Player_Attributes.player_api_id WHERE Player.player_name = 'Francesco Migliore'  AND Player_Attributes.date = '2015-05-01 00:00:00';
SELECT Player_Attributes.defensive_work_rate  FROM Player_Attributes JOIN Player ON Player.id = Player_Attributes.player_api_id WHERE Player.player_name = 'Kevin Berigaud' AND Player_Attributes.date = '2013-02-22 00:00:00';
SELECT MAX(T1.date)  FROM Player_Attributes AS T1  JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id  WHERE T2.player_name = 'Kevin Constant'  AND T1.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_name = 'Kevin Constant')
SELECT      T4.buildUpPlaySpeedClass  FROM      Team_Attributes AS T4  JOIN      Team AS T1 ON T1.id = T4.team_api_id  JOIN      Match AS T2 ON T2.match_api_id = T4.match_api_id  JOIN      Player_Attributes AS T3 ON T3.player_fifa_api_id = ANY(T2.home_player_X1..T2.away_player_Y11)  WHERE      T1.team_long_name = 'Willem II'  AND      T2.date = '2012-02-22 00:00:00';
SELECT      T4.buildUpPlayDribblingClass  FROM      Team AS T1  JOIN      Team_Attributes AS T4 ON T1.team_api_id = T4.team_api_id  JOIN      Match AS T5 ON T1.team_api_id = T5.home_team_api_id OR T1.team_api_id = T5.away_team_api_id  WHERE      T1.team_short_name = 'LEI' AND      T5.date = '2015-09-10 00:00:00'
SELECT      buildUpPlayPassingClass  FROM      Team_Attributes  WHERE      team_long_name = 'FC Lorient'      AND date = '2010-02-22';
SELECT      chanceCreationPassingClass  FROM      Team_Attributes  JOIN      Match ON Team_Attributes.team_api_id = Match.team_api_id  WHERE      team_long_name = 'PEC Zwolle' AND      date = '2013-09-20 00:00:00';
SELECT      T4.chanceCreationCrossingClass  FROM      Team AS T1  JOIN      Team_Attributes AS T4 ON T1.id = T4.team_api_id  JOIN      Match AS T5 ON T5.home_team_api_id = T1.team_api_id OR T5.away_team_api_id = T1.team_api_id  WHERE      T1.team_long_name = 'Hull City' AND T5.date = '2010-02-22 00:00:00';
SELECT      T1.defence_aggression_class  FROM      Team_Attributes AS T1  JOIN      Team AS T2 ON T1.team_api_id = T2.team_api_id  WHERE      T2.team_long_name = 'Hannover 96' AND T1.date = '2015-09-10 00:00:00';
SELECT AVG(Player_Attributes.overall_rating)  FROM Player_Attributes  JOIN Player ON Player.id = Player_Attributes.player_api_id  WHERE Player.player_name = 'Marko Arnautovic'  AND Player_Attributes.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'
SELECT      (MAX(CASE WHEN player_name = 'Landon Donovan' THEN overall_rating END) -       MAX(CASE WHEN player_name = 'Jordan Bowery' THEN overall_rating END)) * 100 /       MAX(CASE WHEN player_name = 'Landon Donovan' THEN overall_rating END) AS rating_percentage_difference FROM Player_Attributes WHERE date = '2013-07-12';
SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player) LIMIT 5;
SELECT player_api_id  FROM Player  WHERE weight = (SELECT MAX(weight) FROM Player)  LIMIT 10;
SELECT player_name FROM Player WHERE datetime('CURRENT_TIMESTAMP', 'localtime') - datetime(birthday) >= 34;
SELECT COUNT(*)  FROM Match  WHERE home_player_1 = 'Aaron Lennon' OR  home_player_2 = 'Aaron Lennon' OR  home_player_3 = 'Aaron Lennon' OR  home_player_4 = 'Aaron Lennon' OR  home_player_5 = 'Aaron Lennon' OR  home_player_6 = 'Aaron Lennon' OR  home_player_7 = 'Aaron Lennon' OR  home_player_8 = 'Aaron Lennon' OR  home_player_9 = 'Aaron Lennon' OR  home_player_10 = 'Aaron Lennon' OR  home_player_11 = 'Aaron Lennon';
SELECT SUM(T2.away_team_goal)  FROM `Player` AS T1  JOIN `Match` AS T2  ON T1.player_id = T2.away_player_X1 OR T1.player_id = T2.away_player_X2 OR T1.player_id = T2.away_player_X3 OR T1.player_id = T2.away_player_X4 OR T1.player_id = T2.away_player_X5 OR T1.player_id = T2.away_player_X6 OR T1.player_id = T2.away_player_X7 OR T1.player_id = T2.away_player_X8 OR T1.player_id = T2.away_player_X9 OR T1.player_id = T2.away_player_X10 OR T1.player_id = T2.away_player_X11  WHERE T1.player_name = 'Daan Smith' OR T1.player_name = 'Filipe Ferreira'
SELECT SUM(home_team_goal)  FROM Match  JOIN Player ON Match.home_player_X1 = Player.id OR ...  WHERE DATEDIFF(CURRENT_TIMESTAMP, Player.birthday) <= 31;
SELECT player_name  FROM Player_Attributes  WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)  LIMIT 10;
SELECT p.player_name  FROM Player_Attributes pa  JOIN Player p ON pa.player_api_id = p.player_api_id  WHERE pa.potential = (SELECT MAX(potential) FROM Player_Attributes)
SELECT p.player_name  FROM Player_Attributes pa  JOIN Player p ON pa.player_api_id = p.player_api_id  WHERE pa.attacking_work_rate = 'high';
SELECT player_name  FROM Player_Attributes  WHERE finishing = 1  ORDER BY STRFTIME('%Y-%m-%d', birthday) ASC  LIMIT 1;
SELECT p.player_name  FROM Player p  JOIN Country c ON p.country_id = c.id  WHERE c.name = 'Belgium';
SELECT      c.name AS country,     p.player_name FROM      Player_Attributes pa  JOIN      Player p ON pa.player_api_id = p.player_api_id JOIN      Country c ON c.id = p.country_id WHERE      pa.vision >= 90;
SELECT Country.name FROM Country JOIN Player ON Country.id = Player.country_id GROUP BY Country.name ORDER BY AVG(Player.weight) DESC LIMIT 1;
SELECT team_long_name  FROM Team  JOIN Team_Attributes ON Team.id = Team_Attributes.team_api_id  WHERE buildUpPlaySpeedClass = 'Slow'
SELECT T1.team_short_name  FROM Team_Attributes AS T1  JOIN Match AS T2 ON T1.team_fifa_api_id = T2.home_team_api_id OR T1.team_fifa_api_id = T2.away_team_api_id  WHERE T2.chanceCreationPassingClass = 'Safe';
SELECT AVG(T2.height)  FROM Player_Attributes AS T1  JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id  JOIN Country AS T3 ON T2.country_id = T3.id  WHERE T3.name = 'Italy'
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;
SELECT COUNT(*)  FROM Player  WHERE player_name LIKE 'Aaron%' AND DATE_PART('year', birthday) > 1990;
SELECT ABS(     (SELECT jumping FROM Player_Attributes WHERE player_api_id = 6)     -     (SELECT jumping FROM Player_Attributes WHERE player_api_id = 23) ) AS score_difference;
SELECT player_api_id  FROM Player_Attributes  WHERE potential = (SELECT MIN(potential) FROM Player_Attributes)  AND preferred_foot = 'right' LIMIT 3;
SELECT COUNT(*)  FROM Player_Attributes  WHERE preferred_foot = 'left'  AND crossing = (SELECT MAX(crossing) FROM Player_Attributes);
SELECT      COUNT(*) FILTER (WHERE `stamina` > 80 AND `strength` > 80)  FROM `european_football_2.Player_Attributes`
SELECT C.name  FROM Country AS C  JOIN Match AS M ON C.id = M.country_id  WHERE C.name = 'Poland' AND M.league_id IN (     SELECT L.id      FROM League AS L      WHERE L.name = 'Ekstraklasa' );
SELECT      home_team_goal AS home_score,     away_team_goal AS away_score FROM      Match WHERE      date LIKE '2008-09-24%' AND      league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League') AND      (team_short_name = 'Home Team Name' OR team_short_name = 'Away Team Name')
SELECT      Player_Attributes.acceleration,      Player_Attributes.agility,      Player_Attributes.sprint_speed  FROM      Player_Attributes  JOIN      Player ON Player.id = Player_Attributes.player_id  WHERE      Player.player_name = 'Alexis Blin';
SELECT team_api_id, buildUpPlaySpeedClass  FROM Team_Attributes  WHERE team_long_name = 'KSV Cercle Brugge';
SELECT COUNT(*)  FROM Match  WHERE season = '2015/2016' AND country_id IN (SELECT id FROM Country WHERE name = 'Italy') AND league_id IN (SELECT id FROM League WHERE country_id IN (SELECT id FROM Country WHERE name = 'Italy') AND name = 'Serie A');
SELECT MAX(home_team_goal)  FROM Match  JOIN Country ON Match.country_id = Country.id  WHERE Country.name = 'Netherlands' AND Match.league_id IN (SELECT id FROM League WHERE Country_id = (SELECT id FROM Country WHERE name = 'Netherlands') AND name = 'Eredivisie');
SELECT finishing, curve  FROM Player_Attributes  WHERE weight = (SELECT MAX(weight) FROM Player_Attributes);
SELECT      T1.name  FROM      Country AS T1  JOIN      League AS T2 ON T1.id = T2.country_id  JOIN      Match AS T3 ON T2.id = T3.league_id  WHERE      T3.season = '2015/2016'  GROUP BY      T2.name  ORDER BY      COUNT(T3.id) DESC  LIMIT 1;
SELECT T1.team_long_name  FROM Team AS T1  JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id  WHERE T2.away_team_goal = (     SELECT MAX(goals)      FROM (         SELECT away_team_goal AS goals          FROM Match          ORDER BY away_team_goal DESC          LIMIT 1     ) )
SELECT player_name FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
SELECT      (COUNT(CASE          WHEN height < 180 AND overall_rating > 70         THEN 1     END) * 100 / COUNT(*)) AS percentage FROM Player_Attributes;
SELECT      (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID END) - COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID END)) AS MaleDifference,     ((COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID END) - COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID END)) / COUNT(Patient.ID)) * 100 AS PercentageDeviation FROM      Patient;
SELECT      CAST(SUM(CASE WHEN YEAR(Patient.Birthday) > '1930' AND Patient.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN Patient.SEX = 'F' THEN Patient.ID END) AS PercentageFemaleBornAfter1930 FROM      Patient;
SELECT      COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE YEAR(Birthday) BETWEEN 1930 AND 1940) AS 'Percent_Inpatients' FROM      Patient  WHERE      Admission = '+'
SELECT      (COUNT(CASE WHEN Diagnosis = 'SLE' AND Admission = '+' THEN ID END)::FLOAT /      COUNT(CASE WHEN Diagnosis = 'SLE' AND Admission = '-' THEN ID END)) as Ratio FROM      Patient;
SELECT      Patient.Diagnosis  FROM      Patient  WHERE      Patient.ID = '30609';  SELECT      Laboratory.Date  FROM      Laboratory  JOIN      Patient ON Laboratory.ID = Patient.ID  WHERE      Patient.ID = '30609';
SELECT      Patient.SEX,      Patient.Birthday,      Examination.Examination_Date,      Examination.Symptoms  FROM      Patient  JOIN      Examination ON Patient.ID = Examination.ID  WHERE      Patient.ID = '163109';
SELECT      Patient.ID,     Patient.SEX,     Patient.Birthday FROM      Patient  JOIN      Examination ON Patient.ID = Examination.ID  JOIN      Laboratory ON Examination.ID = Laboratory.ID  WHERE      Examination.LDH > '500'
SELECT P.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS Age FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.RVVT = '+';
SELECT P.ID, P.SEX, P.Diagnosis  FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Thrombosis = 2;
SELECT p.ID, p.Birthday  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE YEAR(p.Birthday) = 1937 AND l.T_BIL >= 250;
SELECT P.ID, P.SEX, P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.ALB < 3.5;
SELECT      (COUNT(CASE WHEN P.SEX = 'F' AND LAB.TP < '6.0' OR LAB.TP > '8.5' THEN P.ID ELSE NULL END)      / COUNT(P.ID)) * 100 AS Percentage FROM      Patient P JOIN      Laboratory LAB ON P.ID = LAB.ID;
SELECT AVG(Patient.aCL_IgG) FROM Patient WHERE Patient.Admission = '+' AND DATEDIFF(YEAR, Patient.Birthday, CURRENT_DATE()) >= 50;
SELECT COUNT(*)  FROM Patient  WHERE SEX = 'F' AND YEAR(Birthday) = 1997 AND Diagnosis IS NULL AND Admission = '-'
SELECT MIN(TIMESTAMPDIFF(YEAR, Birthday, First Date)) AS youngest_arrival_age FROM Patient;
SELECT COUNT(*)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.Examination_Date >= '1997-01-01' AND e.Examination_Date <= '1997-12-31'  AND e.Thrombosis = '1' AND p.SEX = 'F';
SELECT      (EXTRACT(YEAR FROM MAX(p.Birthday)) - EXTRACT(YEAR FROM MIN(p.Birthday))) AS AgeGap FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      e.TG >= 200;
SELECT      Patient.Description, Examination.Symptoms, Patient.Diagnosis FROM      Patient JOIN      Examination ON Patient.ID = Examination.ID WHERE      Patient.Birthday = (SELECT MIN(BIRTHDAY) FROM Patient)
SELECT      COUNT(*) / 12 AS AverageNumberOfMalePatientsTestedPerMonth FROM      Laboratory JOIN      Patient ON Laboratory.ID = Patient.ID WHERE      DATE(Laboratory.Date) BETWEEN '1998-01-01' AND '1998-12-31' AND      Patient.SEX = 'M';
SELECT      LAB.Date,     CASE          WHEN MAX(P.Birthday) = P.Birthday THEN FLOOR(DATEDIFF(P.`First Date`, STR_TO_DATE(P.Birthday, '%Y-%m-%d')) / 365)     END as Initial_Age FROM      Patient P JOIN      Examination EX ON P.ID = EX.ID JOIN      Laboratory LAB ON EX.ID = LAB.ID WHERE      P.Diagnosis = 'SJS' GROUP BY      LAB.Date ORDER BY      MAX(Birthday) DESC, P.Birthday DESC LIMIT 1;
SELECT      (SUM(CASE WHEN PATIENT.SEX = 'M' AND LABORATORY.UA <= '8.0' THEN 1 ELSE 0 END)) /     (SUM(CASE WHEN PATIENT.SEX = 'F' AND LABORATORY.UA <= '6.5' THEN 1 ELSE 0 END)) AS Ratio FROM      PATIENT JOIN      LABORATORY ON PATIENT.ID = LABORATORY.ID;
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  WHERE NOT EXISTS (     SELECT 1 FROM Examination e      WHERE e.ID = p.ID AND SUBTRACT(YEAR(e.Examination Date), YEAR(p.First Date)) >= 1 );
SELECT COUNT(*)  FROM Patient  WHERE YEAR(Birthday) < 18  AND DATE('Examination Date') BETWEEN '1990-01-01' AND '1993-12-31';
SELECT COUNT(*)  FROM Patient  WHERE SEX = 'M' AND `T-BIL` > '2.0'
SELECT      MAX(COUNT(Patient.Diagnosis)) AS MostCommonIllness FROM      Patient JOIN      Examination ON Patient.ID = Examination.ID WHERE      Examination.Examination_Date BETWEEN '1985-01-01' AND '1995-12-31';
SELECT      AVG(YEAR(CURRENT_DATE) - YEAR(Patient.Birthday)) AS average_age  FROM      Patient  JOIN      Examination ON Patient.ID = Examination.ID  WHERE      Examination.Date BETWEEN '1991-10-01' AND '1991-10-30';
SELECT      EXTRACT(YEAR FROM `Examination Date`) - EXTRACT(YEAR FROM `Birthday`) AS Age,     `Diagnosis` FROM      `Patient` JOIN      `Examination` ON `Patient.ID` = `ID`   JOIN      `Laboratory` ON `Examination.ID` = `ID` WHERE      `Laboratory.HGB` = (SELECT MAX(`HGB`) FROM `Laboratory`);
SELECT Lab.ANA  FROM Examination Exa  JOIN Patient Pat ON Exa.ID = Pat.ID  JOIN Laboratory Lab ON Exa.ID = Lab.ID  WHERE Pat.ID = 3605340 AND Exa.Examination_Date = '1996-12-02';
SELECT      LAB.TG  FROM      Patient P  JOIN      Examination E ON P.ID = E.ID  JOIN      Laboratory LAB ON E.ID = LAB.ID  WHERE      P.ID = 2927464 AND E.Examination_Date = '1995-09-04' AND LAB.T-G < 250;
SELECT Patient.SEX  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  WHERE Examination.Diagnosis = 'AORTITIS'  LIMIT 1;
SELECT      Examination.aCL_IgM FROM      Examination JOIN      Patient ON Examination.ID = Patient.ID WHERE      Patient.Description = '1994-02-19' AND Patient.Diagnosis = 'SLE';
SELECT      Patient.SEX  FROM      Patient  JOIN      Examination ON Patient.ID = Examination.ID  WHERE      Examination.Date = '1992-06-12' AND Examination.GPT = '9';
SELECT      Patient.Birthday  FROM      Patient  JOIN      Laboratory ON Patient.ID = Laboratory.ID  WHERE      Laboratory.UA = '8.4' AND Laboratory.Date = '1991-10-21';
SELECT COUNT(Laboratory.ID)  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  JOIN Laboratory ON Examination.ID = Laboratory.ID  WHERE Patient.First_Date = '1991-06-13' AND Patient.Diagnosis = 'SJS' AND Laboratory.Date BETWEEN '1995-01-01' AND '1995-12-31';
SELECT      Patient.Description  FROM      Patient  JOIN      Examination ON Patient.ID = Examination.ID  WHERE      Examination.Diagnosis = 'SLE' AND Examination.Examination_Date = '1997-01-27' AND Patient.First_Date = Examination.Examination_Date;
SELECT      Examination.Symptoms  FROM      Examination  JOIN      Patient ON Examination.ID = Patient.ID  WHERE      Patient.Birthday = '1959-03-01' AND Examination.Examination_Date = '1993-09-27';
SELECT      (SUM(CASE WHEN Date LIKE '1981-11-%' THEN `T-CHO` END) - SUM(CASE WHEN Date LIKE '1981-12-%' THEN `T-CHO` END)) /      (SUM(CASE WHEN Date LIKE '1981-12-%' THEN `T-CHO` END) * 1.0) * 100 AS DecreaseRate FROM      Laboratory WHERE      ID IN (         SELECT              ID          FROM              Patient          WHERE              Birthday = '1959-02-18'     )
SELECT DISTINCT p.ID  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE p.Diagnosis = 'Behcet'  AND YEAR(e.Description) BETWEEN '1997' AND '1997';
SELECT DISTINCT p.ID  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.Examination_Date BETWEEN '1987-07-06' AND '1996-01-31'  AND e.GPT > 30  AND e.ALB < 4;
SELECT ID  FROM Patient  WHERE SEX = 'F' AND YEAR(Birthday) = 1964 AND Admission = '+';
SELECT COUNT(*)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.Thrombosis = 2 AND e.ANA = 'S' AND e.aCL_IgM > (SELECT AVG(e2.aCL_IgM) * 1.2 FROM Examination e2)
SELECT      (COUNT(CASE WHEN UA <= 6.5 THEN 1 END) * 100.0 / COUNT(CASE WHEN `U-PRO` > 0 AND `U-PRO` < 30 THEN 1 END)) AS percentage FROM     Laboratory
SELECT      (COUNT(CASE WHEN DIAGNOSIS = 'BEHCET' THEN 1 END)       OVER ()      / COUNT(*)       OVER ()      * 100) AS Percentage_BEHCET_1981_Males FROM      Patient WHERE      SEX = 'M' AND      YEAR(`FIRST DATE`) = 1981;
SELECT DISTINCT p.ID  FROM Patient p  JOIN Examination e ON p.ID = e.ID  JOIN Laboratory l ON e.ID = l.ID  WHERE p.Admission = '-'  AND l.Date LIKE '1991-10%'  AND l.T_BIL < 2.0;
SELECT COUNT(*)  FROM Patient  WHERE ANA_Pattern = 'p'  AND SEX = 'F'  AND YEAR(BIRTHDAY) BETWEEN 1980 AND 1989;
SELECT Patient.SEX  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Examination.Diagnosis = 'PSS'  AND Laboratory.CRП > 2  AND Laboratory.CRE = 1  AND Laboratory.LDH = 123;
SELECT AVG(Laboratory.ALB)  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Patient.SEX = 'F' AND Examination.Diagnosis = 'SLE' AND Laboratory.PLT > 400;
SELECT      MAX(T.symptoms)  FROM      Patient P  JOIN      Examination E ON P.ID = E.ID  WHERE      P.Diagnosis = 'SLE';
SELECT `Description`, `Diagnosis`  FROM `Patient`  WHERE `ID` = 48473;
SELECT COUNT(*)  FROM Patient  WHERE SEX = 'F' AND Diagnosis = 'APS';
SELECT COUNT(*)  FROM Laboratory  WHERE DATE BETWEEN '1997-01-01' AND '1997-12-31'  AND TP < 6 OR TP > 8.5;
SELECT      (SUM(CASE WHEN `Diagnosis` LIKE '%ITP%' THEN 1 ELSE 0 END)      / SUM(CASE WHEN `Diagnosis` LIKE '%SLE%' THEN 1 ELSE 0 END)) * 100 AS Proportion FROM `thrombosis_prediction.Patients` WHERE `Symptoms` LIKE '%thrombocytopenia%'
SELECT      (COUNT(CASE WHEN SEX = 'F' THEN 1 END) / COUNT(ID)) * 100  FROM      Patient  WHERE      YEAR(BIRTHDAY) = '1980' AND Diagnosis = 'RA';
SELECT COUNT(*)  FROM Patient  WHERE SEX = 'M' AND Diagnosis = 'BEHCET' AND Admission = '-'
SELECT COUNT(*)  FROM Patient  WHERE SEX = 'F' AND Patient.ID IN (     SELECT ID      FROM Examination      WHERE WBC < 3.5 )
SELECT DATEDIFF(ExaminationDate, `First Date`) AS TimeBeforeEvaluation FROM `Patient` JOIN `Examination` ON `Patient.ID` = `Examination.ID` WHERE `Patient.ID` = 821298 LIMIT 1;
SELECT      Patient.ID,      Patient.Birthday,      Laboratory.UA,      Patient.SEX FROM      Patient  JOIN      Laboratory ON Patient.ID = Laboratory.ID WHERE      Patient.ID = 57266 AND     ((Patient.SEX = 'M' AND Laboratory.UA > 8.0) OR (Patient.SEX = 'F' AND Laboratory.UA > 6.5));
SELECT Lab.Date  FROM Laboratory AS Lab  JOIN Patient AS Pat ON Lab.ID = Pat.ID  WHERE Pat.ID = '48473' AND Lab.GOT >= 60;
SELECT      Patient.ID,     Patient.SEX,     Patient.Birthday FROM      Patient  JOIN      Examination ON Patient.ID = Examination.ID  JOIN      Laboratory ON Examination.ID = Laboratory.ID  WHERE      Examination.Date BETWEEN '1994-01-01' AND '1994-12-31'  AND      Laboratory.GOT < 60;
SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'M' AND E.GPT >= 60;
SELECT Patient.Diagnosis  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  WHERE Examination.GPT > 60  ORDER BY Patient.Birthday ASC;
SELECT AVG(Laboratory.TP)  FROM Examination  JOIN Patient ON Examination.ID = Patient.ID  JOIN Laboratory ON Examination.ID = Laboratory.ID  WHERE Laboratory.TP < 500;
SELECT      Patient.ID,     (YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday)) as Age FROM      Patient JOIN      Laboratory ON Patient.ID = Laboratory.ID WHERE      Laboratory.LDH BETWEEN 600 AND 800;
SELECT      p.ID,      CASE          WHEN p.admission = '+' THEN 'inpatient'         WHEN p.admission = '-' THEN 'outpatient'         ELSE 'unknown'     END AS Admission_Type FROM      Patient p JOIN      Examination e ON p.ID = e.ID WHERE      e.ALP < 300
SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Birthday = '1982-04-01' AND E.LABORATORY_ID IN (     SELECT L.ID     FROM Laboratory L     WHERE L.LDH < 300 AND L.ALP < 300 )
SELECT P.ID, P.SEX, P.Birthday  FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TP < 6.0;
SELECT      ID,      TP - 8.5 AS DeviationFromNormal FROM      Patient JOIN      Examination ON Patient.ID = Examination.ID JOIN      Laboratory ON Examination.ID = Laboratory.ID WHERE      Patient.SEX = 'F' AND      Laboratory.TP > 8.5;
SELECT P.ID, P.Birthday  FROM Patient P  JOIN Examination E ON P.ID = E.ID  JOIN Laboratory L ON E.ID = L.ID  WHERE P.SEX = 'M'  AND (L.ALB <= 3.5 OR L.ALB >= 5.5)  ORDER BY P.Birthday DESC;
SELECT      Patient.ID,     Patient.Birthday,     Patient.Description,     Laboratory.ALB FROM      Patient JOIN      Laboratory ON Patient.ID = Laboratory.ID WHERE      Year(Patient.Birthday) = 1982 AND Laboratory.ALB BETWEEN 3.5 AND 5.5;
SELECT      COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') as Percentage FROM      Patient JOIN      Examination ON Patient.ID = Examination.ID WHERE      Examination.UA > 8.0 AND Patient.SEX = 'M' OR      Examination.UA > 6.5 AND Patient.SEX = 'F';
SELECT      LAB.ID,     AVG(LAB.UA) AS Average_UA FROM      Patient PAT JOIN      Examination EXAM ON PAT.ID = EXAM.ID JOIN      Laboratory LAB ON EXAM.ID = LAB.ID WHERE      PAT.SEX = 'M' AND LAB.UA < 8.0 OR      PAT.SEX = 'F' AND LAB.UA < 6.5 GROUP BY      LAB.ID;
SELECT      Patient.ID,     Patient.SEX,     Patient.Birthday FROM      Patient  JOIN      Laboratory ON Patient.ID = Laboratory.ID WHERE      Laboratory.UN = 29;
SELECT P.ID, P.SEX, P.Birthday  FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.Diagnosis = 'RA' AND E.UN < 30;
SELECT COUNT(*)  FROM Patient  WHERE SEX = 'M' AND CRE >= 1.5;
SELECT      CASE          WHEN SUM(CASE WHEN p.SEX = 'M' AND l.CRE >= 1.5 THEN 1 ELSE 0 END) > SUM(CASE WHEN p.SEX = 'F' AND l.CRE >= 1.5 THEN 1 ELSE 0 END) THEN 'True'         ELSE 'False'     END AS comparison FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID;
SELECT p.ID, p.SEX, p.Birthday  FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.T-BIL = (SELECT MAX(T-BIL) FROM Laboratory)
SELECT      p.SEX,     COUNT(p.ID) AS Total_Patients FROM      Patient p JOIN      Examination e ON p.ID = e.ID JOIN      Laboratory l ON e.ID = l.ID WHERE      l.T_BIL >= 2.0 GROUP BY      p.SEX;
SELECT P.ID, L.T-CHO  FROM Patient P  JOIN (     SELECT DISTINCT MAX(Birthday) as Birthday      FROM Patient  ) Oldest ON P.Birthday = Oldest.Birthday  JOIN Laboratory L ON P.ID = L.ID  WHERE L.T-CHO = (SELECT MAX(T-CHO) FROM Laboratory);
SELECT      DIVIDE(SUM(SUBTRACT(YEAR(CURDATE()), YEAR(Patient.Birthday))), COUNT(Patient.ID)) AS AverageAge FROM      Patient JOIN      Examination ON Patient.ID = Examination.ID WHERE      Patient.SEX = 'M' AND Examination.T_BIL >= 250;
SELECT      Patient.ID,     Patient.Birthday,     Patient.SEX,     Patient.Description,     Patient.First_Date,     Patient.Admission,     Patient.Diagnosis FROM      Patient JOIN      Laboratory ON Patient.ID = Laboratory.ID WHERE      Laboratory.TG > 300;
SELECT COUNT(*)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE l.TG >= 200 AND DATEDIFF(YEAR, CURRENT_DATE(), p.Birthday) > 50;
SELECT DISTINCT p.ID  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE p.Admission = '-'  AND e.CPK < 250;
SELECT COUNT(*)  FROM Patient  WHERE year(Birthday) BETWEEN '1936' AND '1956'  AND sex = 'M'  AND CPK >= 250;
SELECT      Patient.ID,     Patient.SEX,     age FROM      Patient JOIN      Examination ON Patient.ID = Examination.ID WHERE      Examination.GLU >= 180 AND Examination.T_BIL < 250     AND age BETWEEN X AND Y;
SELECT      Patient.ID,     Laboratory.GLU FROM      Patient JOIN      Examination ON Patient.ID = Examination.ID JOIN      Laboratory ON Examination.ID = Laboratory.ID WHERE      Laboratory.GLU < 180 AND      YEAR(Patient.Description) >= 1991;
SELECT      Patient.ID,     Patient.SEX,     Patient.Birthday FROM      Patient      JOIN Examination ON Patient.ID = Examination.ID WHERE      Examination.WBC <= 3.5 OR Examination.WBC >= 9.0 GROUP BY      Patient.SEX,      DATE_PART('year', AGE(Patient.Birthday)) ASC;
SELECT      Patient.ID,     CASE          WHEN EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM Patient.Birthday) < calculated_age_threshold THEN CONCAT('Under ', calculated_age_threshold)         ELSE EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM Patient.Birthday)     END AS Age FROM      Patient  JOIN      Examination ON Patient.ID = Examination.ID  WHERE      Examination.RBC < 3.5;
SELECT      Patient.ID,      Patient.Birthday,      Patient.SEX,      Patient.Description,      Patient.First_Date,      Patient.Admission FROM      Patient JOIN      Examination ON Patient.ID = Examination.ID JOIN      Laboratory ON Examination.ID = Laboratory.ID WHERE      Patient.SEX = 'F' AND     EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM Patient.Birthday) >= 50 AND     Laboratory.RBC <= 3.5 OR Laboratory.RBC >= 6.0 AND     Examination.Diagnosis IS NOT NULL;
SELECT P.ID, P.SEX  FROM Patient P  JOIN Examination E ON P.ID = E.ID  JOIN Laboratory L ON E.ID = L.ID  WHERE P.Admission = '-' AND L.HGB < 10;
SELECT ID, SEX  FROM Patient  WHERE Diagnosis = 'SLE' AND HGB > 10 AND HGB < 17 ORDER BY Birthday ASC LIMIT 1;
SELECT P.ID,         (EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM P.Birthday)) AS Age  FROM Patient P  JOIN (     SELECT L.ID      FROM Laboratory L      WHERE L.HCT >= 52      GROUP BY L.ID      HAVING COUNT(L.ID) > 2 ) Exams ON P.ID = Exams.ID;
SELECT AVG(HCT)  FROM Laboratory  WHERE Date LIKE '1991%' AND HCT < 29;
SELECT      (SUM(CASE WHEN `Patient.ID` IN (         SELECT `Examination.ID`         FROM `Examination`         JOIN `Patient` ON `Examination.ID` = `Patient.ID`         WHERE `Examination.PLT` < 100     )) - SUM(CASE WHEN `Patient.ID` IN (         SELECT `Examination.ID`         FROM `Examination`         JOIN `Patient` ON `Examination.ID` = `Patient.ID`         WHERE `Examination.PLT` > 400     ))) AS Difference FROM `Patient` JOIN `Examination` ON `Patient.ID` = `Examination.ID` WHERE `Examination.PLT` < 100 OR `Examination.PLT` > 400;
SELECT DISTINCT p.ID  FROM Patient p  JOIN Examination e ON p.ID = e.ID  JOIN Laboratory l ON e.ID = l.ID  WHERE l.Date LIKE '1984%'  AND EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM p.Birthday) < 50  AND l.PLT BETWEEN 100 AND 400;
SELECT      (SUM(CASE WHEN Pt.SEX = 'F' THEN 1 ELSE 0 END) / COUNT(Pt.ID)) * 100 AS Percentage FROM      Patient Pt  JOIN      Examination Ex ON Pt.ID = Ex.ID  WHERE      EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM Pt.Birthday) > 55  AND      Ex.PT >= 14;
SELECT DISTINCT p.ID  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE p.First_Date > 1992 AND e.PT < 14;
SELECT COUNT(*)  FROM Examination  WHERE Examination.Date > '1997-01-01' AND Examination.APTT >= 45;
SELECT COUNT(*)  FROM Examination e  JOIN Patient p ON e.ID = p.ID  WHERE e.APTT > 45 AND e.Thrombosis = 3;
SELECT COUNT(*)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  JOIN Laboratory l ON p.ID = l.ID  WHERE p.SEX = 'M'  AND e.WBC BETWEEN 3.5 AND 9.0  AND l.FG <= 150 OR l.FG >= 450;
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE p.Birthday > '1980-01-01'  AND e.FG < 150 OR e.FG > 450;
SELECT DISTINCT p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.U_PRO >= 30;
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON e.ID = l.ID WHERE l.U_PRO BETWEEN 0 AND 30 AND p.Diagnosis = 'SLE';
SELECT COUNT(*)  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  WHERE Examination.aCL_IgG < 900 AND Patient.Symptoms = 'abortion';
SELECT COUNT(*)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.IGG BETWEEN 900 AND 2000  AND e.Symptoms IS NOT NULL;
SELECT p.Diagnosis  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.IGA >= 80 AND e.IGA <= 500  ORDER BY e.IGA DESC  LIMIT 1;
SELECT COUNT(*)  FROM Patient  WHERE IGA BETWEEN 80 AND 500  AND YEAR(`First Date`) >= 1990;
SELECT      MAX(COUNT(Patient.Diagnosis)) AS MostCommonDisease FROM      Patient JOIN      Examination ON Patient.ID = Examination.ID WHERE      Examination.IgM NOT BETWEEN 40 AND 400
SELECT COUNT(*)  FROM Patient  WHERE CRP LIKE '+' OR CRP LIKE '-' OR CRP < 1.0  AND Description IS NULL;
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Laboratory.CRP NOT IN ('+-', '-') AND Laboratory.CRP >= 1.0 AND DATEDIFF(YEAR(CURRENT_DATE()), Birthday) < 18;
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  WHERE Examination.RF = '-' OR Examination.RF = '+-'  AND Examination.KCT = '+';
SELECT DISTINCT p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE YEAR(p.Birthday) >= 1995 AND e.RA IN ('-', '+-');
SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.RF < 20 AND (YEAR(CURDATE()) - YEAR(P.Birthday)) > 60;
SELECT COUNT(*)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.RF < 20 AND e.Thrombosis = '0';
SELECT COUNT(DISTINCT Patient.ID)  FROM Examination  JOIN Patient ON Examination.ID = Patient.ID  WHERE Examination.ANA = 'P' AND Examination.C3 > 35;
SELECT `ID` FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`Hematocrit` NOT BETWEEN 29 AND 52 AND Examination.`aCL IgA` = (SELECT MAX(`aCL IgA`) FROM Examination);
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.Diagnosis LIKE '%venous blood clots%' AND e.C4 > 10;
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE p.Description LIKE '%normal level of anti-ribonuclear protein%' AND e.Thrombosis = 'Yes' AND p.Admission = '+'
SELECT `Birthday` FROM `Patient` WHERE `Birthday` = (SELECT MAX(`Birthday`) FROM `Patient`) AND `RNP` NOT IN ('-', '+-');
SELECT COUNT(*)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.SM = 'negative' AND e.Thrombosis = '1';
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.SM NOT IN ('-', '+-') ORDER BY p.Birthday DESC LIMIT 3;
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Examination_Date >= '1997-01-01' AND e.Symptoms LIKE '%anti-scl70%' AND e.Sc170 IN('-', '+-');
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  JOIN Laboratory ON Examination.ID = Laboratory.ID  WHERE Examination.SC170 IN ('-', '+-')  AND Patient.SEX = 'M'  AND Examination.Symptoms = 'vertigo';
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.Diagnosis LIKE '%normal anti-SSA%' AND strftime('%Y', p.First Date) < '1990';
SELECT `ID` FROM Patient WHERE `First Date` = (     SELECT MIN(`First Date`)     FROM Patient     WHERE SSA NOT IN ('-', '+-') );
SELECT COUNT(DISTINCT Examination.ID)  FROM Examination  JOIN Patient ON Examination.ID = Patient.ID  WHERE Examination.Symptoms LIKE '%anti-SSB%' AND Examination.Diagnosis = 'SLE' AND (EXISTS  (SELECT * FROM Laboratory WHERE Examination.ID = Laboratory.ID AND (LAB_TEST_DESCRIPTION = 'SSB IN(-)' OR LAB_TEST_DESCRIPTION = 'SSB IN(+-)')) OR EXISTS  (SELECT * FROM Laboratory WHERE Examination.ID = Laboratory.ID AND LAB_TEST_DESCRIPTION = 'SSB IN(0)'));
SELECT COUNT(DISTINCT Examination.ID)  FROM Examination  JOIN Patient ON Examination.ID = Patient.ID  WHERE Examination.Symptoms IS NOT NULL AND Patient.Laboratory LIKE '%anti-SSB%' AND (Patient.Laboratory LIKE '%IN(\'-\', \'+-\')%' OR Patient.Laboratory LIKE '%normal%');
SELECT COUNT(*)  FROM Patient  WHERE SEX = 'M' AND CENTROMEA IN ('-', '+-') AND SSB IN ('-', '+-');
SELECT DISTINCT p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.DNA >= 8;
SELECT COUNT(DISTINCT ID)  FROM Patient  WHERE DNA < 8 AND Description IS NULL;
SELECT COUNT(*)  FROM Patient  WHERE Admssion = '+' AND EXISTS (     SELECT *      FROM Examination      WHERE Examination.ID = Patient.ID AND Examination.DNA LIKE '%_II%' AND Examination.Diagnosis LIKE '%abnormal%' )
SELECT      (COUNT(CASE WHEN p.ID THEN 1 END) * 1.0 / COUNT(l.ID)) * 100 AS percentage FROM     Patient p JOIN     Laboratory l ON p.ID = l.ID WHERE     l.GOT >= 60 AND p.Diagnosis = 'SLE';
SELECT COUNT(*)  FROM Patient  WHERE SEX = 'M' AND EXISTS (   SELECT *    FROM Laboratory    WHERE Patient.ID = Laboratory.ID AND GOT < 60 )
SELECT      MIN(Patient.Birthday) AS youngest_birthdate FROM      Patient JOIN      Examination ON Patient.ID = Examination.ID WHERE      Examination.GOT >= 60;
SELECT      Patient.Birthday  FROM      Patient  JOIN      Examination ON Patient.ID = Examination.ID  JOIN      Laboratory ON Examination.ID = Laboratory.ID  WHERE      Examination.GOT < 60 AND Examination.GPT < 60  ORDER BY      Examination.GPT DESC  LIMIT 3;
SELECT COUNT(*)  FROM Patient  WHERE ID IN (     SELECT ID      FROM Laboratory      WHERE GOT < 60 ) AND SEX = 'M';
SELECT      Patient.Birthday  FROM      Patient  JOIN      Examination ON Patient.ID = Examination.ID  JOIN      Laboratory ON Examination.ID = Laboratory.ID  WHERE      Examination.LAC < 500 AND      Laboratory.LDH < 500  ORDER BY      Laboratory.First_Date  LIMIT 1;
SELECT Lab.ID, Lab.Date  FROM Laboratory Lab  JOIN (SELECT MAX(`First Date`) AS max_first_date) MaxDate  ON Lab.Date = MaxDate.max_first_date  WHERE Lab.LDH >= 500;
SELECT COUNT(*)  FROM Patient  WHERE ID IN (     SELECT ID      FROM Laboratory      WHERE ALP >= 300 )  AND Admission = '+';
SELECT COUNT(*)  FROM Patient  WHERE Admission = '-'  AND EXISTS (     SELECT 1      FROM Examination      WHERE Examination.ID = Patient.ID      AND Examination.ALP < 300 );
SELECT p.Diagnosis  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE l.TP < 6.0;
SELECT COUNT(*)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE p.Diagnosis = 'SJS' AND e.TP BETWEEN 6.0 AND 8.5;
SELECT Examination.Date FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.ALB > 3.5 AND Laboratory.ALB < 5.5 ORDER BY Laboratory.ALB DESC LIMIT 1;
SELECT COUNT(*)  FROM Patient  WHERE SEX = 'M'  AND ALB > 3.5  AND ALB < 5.5  AND ALP BETWEEN 6.0 AND 8.5;
SELECT      Examination.aCL_IgG, Examination.aCL_IgM, Examination.aCL_IgA FROM      Examination  JOIN      Patient ON Examination.ID = Patient.ID JOIN      Laboratory ON Examination.ID = Laboratory.ID WHERE      Patient.SEX = 'F' AND      Laboratory.UA <= 6.50 ORDER BY      Laboratory.UA DESC LIMIT 1;
SELECT MAX(Patient.ID)  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  JOIN Laboratory ON Examination.ID = Laboratory.ID  WHERE Patient.Diagnosis = 'normal' AND Laboratory.CRE < 1.5 AND Examination.ANA IS NOT NULL;
SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.CRE < 1.5 AND E.aCL_IgA = (SELECT MAX(aCL_IgA) FROM Examination);
SELECT COUNT(*)  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  JOIN Laboratory ON Examination.ID = Laboratory.ID  WHERE Laboratory.T_BIL >= 2.0 AND Examination.ANA_Pattern LIKE '%P%'
SELECT `ANA` FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE `T-BIL` < 2.0 ORDER BY `T-BIL` DESC LIMIT 1;
SELECT COUNT(*)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  JOIN Laboratory l ON e.ID = l.ID  WHERE l.T_BIL >= 250 AND e.KCT = '-'
SELECT COUNT(*)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  JOIN Laboratory l ON p.ID = l.ID  WHERE l.T_BIL < 250 AND e.ANA_PATTERN = 'P'
SELECT COUNT(*)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.TG < 200 AND e.Symptoms IS NOT NULL;
SELECT p.Diagnosis  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.TG < 200  ORDER BY e.TG DESC  LIMIT 1;
SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Thrombosis = 0 AND E.CPK < 250;
SELECT COUNT(*)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.CPK < 250 AND (e.KCT = '+' OR e.RVVT = '+' OR e.LAC = '+');
SELECT Patient.Birthday  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  WHERE Examination.GLU > 180  ORDER BY Patient.Birthday ASC  LIMIT 1;
SELECT COUNT(*)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE p.GLU < 180 AND e.Thrombosis = 0;
SELECT COUNT(*)  FROM Patient  WHERE Admission = '+' AND WBC BETWEEN 3.5 AND 9.0;
SELECT COUNT(*)  FROM Patient  WHERE Diagnosis = 'SLE' AND WBC BETWEEN 3.5 AND 9.0;
SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.RBC <= 3.5 OR E.RBC >= 6.0 AND P.Admission = '-'
SELECT COUNT(*)  FROM Patient  WHERE (PLT > 100 AND PLT < 400)  AND Diagnosis IS NOT NULL;
SELECT Patient.ID, Patient.Birthday, Patient.SEX, Patient.Description, Patient.First_Date, Patient.Admission, Examination.PLT FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.PLT > 100 AND Examination.PLT < 400 AND Examination.Diagnosis = 'MCTD';
SELECT AVG(Patient_table.Admission)  FROM Patient_table  JOIN Examination_table ON Patient_table.ID = Examination_table.ID  WHERE Patient_table.SEX = 'M' AND Examination_table.PT < 14;
SELECT COUNT(*)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.Thrombosis IN (2, 1) AND e.PT < 14;
SELECT T3.major_name FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders';
SELECT COUNT(*)  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE major.college = 'College of Engineering';
SELECT first_name, last_name  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE major.department = 'Art and Design';
SELECT COUNT(*)  FROM attendance  JOIN member ON attendance.link_to_member = member.member_id  WHERE attendance.link_to_event IN      (SELECT event_id FROM event WHERE event_name = 'Women\'s Soccer');
SELECT T3.phone  FROM event AS T1  JOIN attendance AS T2 ON T1.event_id = T2.link_to_event  JOIN member AS T3 ON T3.member_id = T2.link_to_member  WHERE T1.event_name = 'Women\'s Soccer';
SELECT COUNT(*)  FROM student_club.member  JOIN student_club.attendance ON student_club.member.member_id = student_club.attendance.link_to_member  JOIN student_club.event ON student_club.event.event_id = student_club.attendance.link_to_event  WHERE student_club.event.event_name = 'Women\'s Soccer' AND student_club.member.t_shirt_size = 'Medium';
SELECT e.event_name  FROM event e  JOIN attendance a ON e.event_id = a.link_to_event  GROUP BY e.event_id, e.event_name  ORDER BY COUNT(a.link_to_member) DESC  LIMIT 1;
SELECT DISTINCT c.college  FROM member m  JOIN club_position cp ON m.member_id = cp.member_id  JOIN position p ON cp.position_id = p.position_id  JOIN college c ON m.major_id = c.major_id  WHERE p.title = 'Vice President';
SELECT e.event_name  FROM event e  JOIN attendance a ON e.event_id = a.link_to_event  JOIN member m ON a.link_to_member = m.member_id  WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean';
SELECT COUNT(*)  FROM student_club.attendance  JOIN student_club.member ON student_club.attendance.link_to_member = student_club.member.member_id  WHERE student_club.member.first_name = 'Sacha'  AND student_club.member.last_name = 'Harrison'  AND YEAR(student_club.event.event_date) = 2019;
SELECT COUNT(event_id) FROM event JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.type = 'Meeting' AND COUNT(attendance.link_to_event) > 10;
SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_id, event_name HAVING COUNT(*) > 20;
SELECT      AVG(attendances.event_id) / COUNT(DISTINCT events.event_name) AS avg_attendance FROM      event events JOIN      attendance attendances ON events.event_id = attendances.link_to_event WHERE      events.type = 'Meeting' AND YEAR(events.event_date) = 2020;
SELECT expense_description, MAX(cost)  FROM expense  WHERE link_to_budget IS NOT NULL;
SELECT COUNT(*)  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE major.major_name = 'Environmental Engineering';
SELECT m.first_name, m.last_name  FROM student_club.member AS m  JOIN student_club.attendance AS a ON m.member_id = a.link_to_member  JOIN student_club.event AS e ON a.link_to_event = e.event_id  WHERE e.event_name = 'Laugh Out Loud';
SELECT last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';
SELECT county  FROM zip_code  WHERE zip_code = (SELECT zip FROM member WHERE first_name = 'Sherri' AND last_name = 'Ramsey');
SELECT DISTINCT college  FROM major  JOIN member ON major.major_id = member.link_to_major  WHERE first_name = 'Tyler' AND last_name = 'Hewitt';
SELECT income.amount FROM member JOIN income ON member.member_id = income.link_to_member WHERE member.position = 'Vice President';
SELECT SUM(amount)  FROM budget  JOIN event ON budget.link_to_event = event.event_id  WHERE event.type = 'Meeting'  AND event.event_name = 'September Meeting'  AND budget.category = 'Food';
SELECT      c.city,      c.state  FROM      member m  JOIN      club_position cp ON m.member_id = cp.member_id  JOIN      position p ON cp.position_id = p.position_id  JOIN      zip_code z ON m.zip = z.zip_code  WHERE      p.name = 'President';
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE state = 'Illinois';
SELECT SUM(amount)  FROM budget  WHERE category = 'Advertisement' AND link_to_event IN (     SELECT event_id      FROM event      WHERE event_name = 'September Meeting' )
SELECT m.department FROM member AS m JOIN attendance AS a ON m.member_id = a.link_to_member WHERE m.first_name IN ('Pierce', 'Guidi') AND m.position IN (SELECT major FROM zip_code WHERE zip_code = m.zip)
SELECT SUM(amount) FROM budget WHERE event_name = 'October Speaker';
SELECT e.expense_description, e.approved  FROM expense e  JOIN attendance a ON e.link_to_member = a.link_to_member  JOIN event ev ON a.link_to_event = ev.event_id  WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08';
SELECT AVG(cost) AS average_spent FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Elijah' AND member.last_name = 'Allen' AND MONTH(expense.expense_date) IN (9, 10);
SELECT      (SUM(spent WHERE YEAR(event_date) = 2019)) -      (SUM(spent WHERE YEAR(event_date) = 2020)) AS 'TotalSpentDifference' FROM      event;
SELECT `location`  FROM `event`  WHERE `event_name` = 'Spring Budget Review';
SELECT e.cost FROM expense e JOIN attendance a ON a.link_to_event = e.link_to_budget JOIN event ev ON ev.event_id = a.link_to_event WHERE ev.event_name = 'Posters' AND ev.event_date = '2019-09-04';
SELECT remaining  FROM budget  WHERE category = 'Food' AND amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food');
SELECT notes  FROM event  WHERE event_date = '2019-09-14' AND type = 'fundraising';
SELECT COUNT(DISTINCT major.major_id) FROM major WHERE department = 'College of Humanities and Social Sciences';
SELECT phone  FROM member  WHERE first_name = 'Carlo' AND last_name = 'Jacobs';
SELECT T3.county  FROM member AS T1  JOIN zip_code AS T2 ON T1.zip = T2.zip_code  JOIN member AS T4 ON T1.member_id = T4.member_id  JOIN zip_code AS T5 ON T4.zip = T5.zip_code  WHERE T4.first_name = 'Adela' AND T4.last_name = 'O\'Gallagher';
SELECT COUNT(*)  FROM budget  WHERE link_to_event IN (     SELECT event_id      FROM event      WHERE event_name = 'November Meeting' ) AND remaining < 0;
SELECT SUM(b.amount)  FROM budget b  JOIN event e ON b.link_to_event = e.event_id  WHERE e.event_name = 'September Speaker';
SELECT e.status  FROM event e  JOIN budget b ON e.event_id = b.link_to_event  JOIN expense exp ON b.budget_id = exp.link_to_budget  WHERE exp.expense_description = 'Post Cards, Posters' AND exp.expense_date = '2019-8-20';
SELECT T3.major_name FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason';
SELECT COUNT(*)  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE major.major_name = 'Human Development and Family Studies'  AND member.t_shirt_size = 'Large';
SELECT zip_code.type  FROM member  JOIN zip_code ON member.zip = zip_code.zip_code  WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson';
SELECT T1.major_name  FROM major AS T1  JOIN member AS T2 ON T1.major_id = T2.major_id  WHERE T2.position = 'Vice President';
SELECT DISTINCT state  FROM member  WHERE first_name = 'Sacha' AND last_name = 'Harrison';
SELECT T1.department  FROM major AS T1  JOIN member AS T2 ON T1.major_id = T2.link_to_major  WHERE T2.position = 'President';
SELECT income.date_received  FROM member  JOIN income ON member.member_id = income.link_to_member  WHERE member.first_name = 'Connor' AND member.last_name = 'Hilton' AND income.source = 'Dues';
SELECT first_name, last_name  FROM income  WHERE source = 'Dues'  ORDER BY date_received ASC  LIMIT 1;
SELECT      DIVIDE(SUM(b.amount)             , COUNT(DISTINCT b.event_id))  FROM      budget b  JOIN      event e ON b.link_to_event = e.event_id  WHERE      e.event_name = 'Yearly Kickoff'      AND b.category = 'Advertisement'  UNION ALL  SELECT      DIVIDE(SUM(b.amount)             , COUNT(DISTINCT b.event_id))  FROM      budget b  JOIN      event e ON b.link_to_event = e.event_id  WHERE      e.event_name = 'October Meeting'      AND b.category = 'Advertisement'
SELECT      (SUM(amount WHERE category = 'Parking' AND event_name = 'November Speaker')       / COUNT(event_name = 'November Speaker')) * 100 AS budget_percentage FROM      budget;
SELECT SUM(cost) AS total_pizza_cost FROM expense WHERE expense_description = 'Pizza';
SELECT COUNT(DISTINCT zip_code)  FROM zip_code  WHERE county = 'Orange County' AND state = 'Virginia';
SELECT major.department FROM major WHERE major.college = 'College of Humanities and Social Sciences';
SELECT      z.zip_code,      z.city,      z.county,      z.state,      z.short_state FROM      member m JOIN      zip_code z ON z.zip_code = m.zip WHERE      m.first_name = 'Amy' AND m.last_name = 'Firth';
SELECT e.expense_description FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.remaining = (SELECT MIN(remaining) FROM budget)
SELECT DISTINCT m.first_name, m.last_name  FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';
SELECT T.major_name, MAX(COUNT(T2.college)) AS max_members_college FROM      (SELECT DISTINCT t1.zip FROM zip_code AS t1 INNER JOIN member AS t2 ON t1.zip_code = t2.zip) AS T INNER JOIN major AS T2 ON T.major = T2.major_id GROUP BY T2.college ORDER BY max_members_college DESC LIMIT 1;
SELECT T1.major_name  FROM member AS T1  JOIN zip_code AS T2 ON T1.zip = T2.zip_code  WHERE T2.phone = '809-555-3360'
SELECT event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE amount = (SELECT MAX(amount) FROM budget);
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position = 'Vice President';
SELECT COUNT(*)  FROM attendance  JOIN event ON attendance.link_to_event = event.event_id  WHERE event.event_name = 'Women\'s Soccer';
SELECT `date_received`  FROM income  JOIN member ON income.link_to_member = member.member_id  WHERE first_name = 'Casey' AND last_name = 'Mason';
SELECT COUNT(*)  FROM zip_code  WHERE state = 'Maryland';
SELECT COUNT(event.event_id)  FROM event  JOIN attendance ON event.event_id = attendance.link_to_event  JOIN member ON attendance.link_to_member = member.member_id  WHERE member.phone = '954-555-6240';
SELECT first_name, last_name  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE major.department = 'School of Applied Sciences, Technology and Education';
SELECT      b.event_name  FROM      event AS e JOIN      budget AS b ON e.event_id = b.link_to_event WHERE      e.status = 'Closed' AND      b.amount > 0 AND      b.spent > 0 ORDER BY      (b.spent / b.amount) DESC LIMIT 1;
SELECT COUNT(*)  FROM member  WHERE position = 'President';
SELECT MAX(budget.spent) AS max_budget_spend FROM budget;
SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;
SELECT SUM(b.spent)  FROM budget b  JOIN event e ON b.link_to_event = e.event_id  WHERE b.category = 'Food' AND e.status = 'approved';
SELECT      first_name,      last_name  FROM      member  WHERE      (SELECT COUNT(*)       FROM attendance       WHERE attendance.link_to_member = member.member_id) > 7;
SELECT m.first_name, m.last_name  FROM student_club.member m JOIN student_club.attendance a ON m.member_id = a.link_to_member JOIN student_club.event e ON a.link_to_event = e.event_id JOIN student_club.major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Interior Design' AND e.event_name = 'Community Theater';
SELECT first_name, last_name  FROM member  JOIN zip_code ON member.zip = zip_code.zip_code  WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';
SELECT COUNT(*)  FROM income  JOIN member ON income.link_to_member = member.member_id  WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour'
SELECT first_name, last_name  FROM member  JOIN income ON member.member_id = income.link_to_member  WHERE income.amount > 40;
SELECT SUM(e.cost) AS TotalExpense FROM event e JOIN expense exp ON e.event_id = exp.link_to_budget WHERE e.event_name = 'Baseball game' AND e.type = 'Yearly Kickoff';
SELECT m.first_name, m.last_name  FROM member m  JOIN attendance a ON m.member_id = a.link_to_member  JOIN event e ON a.link_to_event = e.event_id  JOIN budget b ON e.event_id = b.link_to_event  WHERE e.event_name = 'Yearly Kickoff' AND m.position = 'Budget Manager';
SELECT CONCAT(first_name, ' ', last_name) AS full_name, source FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.amount = (SELECT MAX(amount) FROM income)
SELECT event.event_name  FROM event  JOIN budget ON event.event_id = budget.link_to_event  WHERE budget.cost = (SELECT MIN(cost) FROM budget)
SELECT      (SUM(cost WHERE event_name = 'Yearly Kickoff') /       SUM(cost)) * 100 AS 'Percentage_of_Cost' FROM      expense;
SELECT      (COUNT(CASE WHEN major_name = 'Finance' THEN 1 END) * 1.0 / COUNT(CASE WHEN major_name = 'Physics' THEN 1 END)) as ratio FROM      major;
SELECT source, MAX(amount)  FROM income  WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30';
SELECT first_name, last_name, email  FROM member  WHERE position = 'Secretary';
SELECT COUNT(*)  FROM member  WHERE link_to_major IN      (SELECT major_id FROM major WHERE major_name = 'Physics Teaching');
SELECT COUNT(DISTINCT T3.member_id) FROM event AS T1 JOIN attendance AS T2 ON T1.event_id = T2.link_to_event JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Community Theater' AND YEAR(T1.event_date) = 2019;
SELECT COUNT(event.event_id), member.major_id FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON member.member_id = attendance.link_to_member WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi' GROUP BY member.major_id;
SELECT AVG(event.spent)  FROM budget  JOIN event ON budget.link_to_event = event.event_id  WHERE event.status = 'Closed' AND budget.category = 'Food';
SELECT event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1;
SELECT COUNT(*)  FROM student_club.attendance  JOIN student_club.member ON student_club.attendance.link_to_member = student_club.member.member_id  WHERE student_club.member.first_name = 'Maya'  AND student_club.member.last_name = 'Mclean'  AND student_club.event.event_name = 'Women\'s Soccer';
SELECT      (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END)::FLOAT / COUNT(event_id)) * 100 as community_service_percentage FROM      event WHERE      event_date BETWEEN '2019-01-01' AND '2019-12-31';
SELECT e.cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'September Speaker' AND e.expense_description = 'Posters';
SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(*) DESC LIMIT 1;
SELECT e.event_name  FROM event e  JOIN budget b ON e.event_id = b.link_to_event  WHERE e.status = 'Closed' AND b.remaining < 0  ORDER BY b.remaining  LIMIT 1;
SELECT e.expense_description, SUM(e.cost) AS total_value FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND b.status = 'approved';
SELECT category, SUM(amount) as total_amount FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.event_name = 'April Speaker' GROUP BY category ORDER BY total_amount ASC;
SELECT budget_id, amount FROM budget WHERE category = 'Food' AND amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food');
SELECT budget_id, category, amount  FROM budget  WHERE category = 'Advertising'  ORDER BY amount DESC  LIMIT 3;
SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking';
SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';
SELECT m.first_name, m.last_name, SUM(e.cost) AS total_cost FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN expense e ON a.event_id = e.link_to_event AND a.link_to_member = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.member_id, m.first_name, m.last_name;
SELECT expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE first_name = 'Sacha' AND last_name = 'Harrison';
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.t_shirt_size = 'X-Large';
SELECT T3.zip_code  FROM member AS T1  JOIN attendance AS T2 ON T1.member_id = T2.link_to_member  JOIN zip_code AS T3 ON T3.zip_code = T1.zip  WHERE T2.expense.cost < 50;
SELECT T3.major_name FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member JOIN major AS T3 ON T3.major_id = T1.link_to_major WHERE T1.first_name = 'Phillip' AND T1.last_name = 'Cullen';
SELECT member.position FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';
SELECT COUNT(*)  FROM member  WHERE major_id IN (     SELECT major_id      FROM major      WHERE major_name = 'Business' )  AND t_shirt_size = 'Medium';
SELECT e.event_name, e.type  FROM event e  JOIN budget b ON e.event_id = b.link_to_event  WHERE b.remaining > 30;
SELECT type  FROM event  WHERE location = 'MU 215';
SELECT category  FROM budget  WHERE event_status = 'completed' AND EXISTS (     SELECT *      FROM event      WHERE event.event_id = budget.link_to_event AND event.event_date = '2020-03-24T12:00:00' );
SELECT T3.major_name  FROM member AS T1  JOIN attendance AS T2 ON T1.member_id = T2.link_to_member  JOIN major AS T3 ON T1.link_to_major = T3.major_id  WHERE T1.position = 'Vice President';
SELECT      (SUM(CASE WHEN position = 'Member' AND major_name = 'Mathematics' THEN 1 ELSE 0 END)      / COUNT(member_id)) * 100 AS percentage_of_math_members FROM      member JOIN      major ON member.link_to_major = major.major_id;
SELECT e.type  FROM event e  JOIN attendance a ON e.event_id = a.link_to_event  WHERE a.location = 'MU 215';
SELECT COUNT(*)  FROM income  WHERE amount = 50;
SELECT COUNT(*)  FROM member  WHERE position = 'Member' AND t_shirt_size = 'X-Large';
SELECT COUNT(*)  FROM major  WHERE department = 'School of Applied Sciences, Technology and Education'  AND college = 'College of Agriculture and Applied Sciences';
SELECT m.last_name, d.name AS department, c.name AS college FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN department d ON ma.department = d.department_id JOIN college c ON ma.college = c.college_id WHERE ma.major_name = 'Environmental Engineering';
SELECT DISTINCT b.category  FROM budget AS b  JOIN event AS e ON b.link_to_event = e.event_id  WHERE e.location = 'MU 215' AND e.type = 'Guest Speaker' AND b.spent = 0;
SELECT      z.city,      z.state  FROM      member m  JOIN      zip_code z ON m.zip = z.zip_code  WHERE      m.position = 'Member'  AND      m.link_to_major = (         SELECT              major_id          FROM              major          WHERE              major_name = 'Electrical and Computer Engineering Department'     );
SELECT e.event_name  FROM event e  JOIN attendance a ON e.event_id = a.link_to_event  JOIN member m ON a.link_to_member = m.member_id  WHERE m.position = 'Vice President'  AND e.type = 'Social'  AND e.location = '900 E. Washington St.';
SELECT member.last_name, member.position  FROM member  JOIN attendance ON member.member_id = attendance.link_to_member  JOIN expense ON attendance.event_id = expense.link_to_event  WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10';
SELECT T3.last_name  FROM event AS T1  JOIN attendance AS T2 ON T1.event_id = T2.link_to_event  JOIN member AS T3 ON T2.link_to_member = T3.member_id  WHERE T1.type = 'Women\'s Soccer' AND T3.position = 'Member';
SELECT      (COUNT(CASE WHEN income.amount = 50 THEN 1 END) * 100.0 / COUNT(income.member_id)) AS percentage FROM      member  JOIN      income ON member.member_id = income.link_to_member  WHERE      member.t_shirt_size = 'Medium' AND income.amount = 50;
SELECT DISTINCT state, short_state  FROM zip_code  WHERE type = 'PO Box';
SELECT DISTINCT z.zip_code FROM zip_code z JOIN city c ON z.city_id = c.city_id WHERE c.name = 'San Juan Municipio' AND z.state = 'Puerto Rico' AND z.type = 'PO Box';
SELECT event_name  FROM event  WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';
SELECT e.event_id, a.link_to_event FROM event e JOIN expense en ON e.event_id = en.link_to_budget WHERE en.cost > 50;
SELECT      m.first_name,      m.last_name,      a.link_to_event  FROM      member m  JOIN      attendance a ON m.member_id = a.link_to_member  JOIN      expense e ON a.event_id = e.link_to_event  WHERE      e.approved = 'true' AND      e.expense_date BETWEEN '2019-01-10' AND '2019-11-19';
SELECT `college`  FROM `member`  JOIN `major` ON `member.link_to_major` = `major.major_id`  WHERE `first_name` = 'Katy' AND `member.link_to_major` = 'rec1N0upiVLy5esTO';
SELECT T1.phone  FROM member AS T1  JOIN major AS T2 ON T1.link_to_major = T2.major_id  WHERE T2.college = 'College of Agriculture and Applied Sciences' AND T2.major_name = 'Business';
SELECT email  FROM member  WHERE member.member_id = expense.link_to_member  AND expense.expense_date BETWEEN '2019-09-10' AND '2019-11-19'  AND expense.cost > 20;
SELECT COUNT(*)  FROM member  WHERE position = 'Member' AND major_name = 'education' AND department = 'College of Education & Human Services';
SELECT      (SUM(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) / COUNT(budget.event_id)) * 100 AS percentage_over_budget FROM      budget;
SELECT event.event_id, event.location, event.status  FROM event  WHERE event.event_date BETWEEN '2019-11-01' AND '2020-03-31';
SELECT e.expense_description FROM expense e WHERE DIVIDE(SUM(e.cost), COUNT(e.expense_id)) > 50;
SELECT first_name, last_name  FROM member  WHERE t_shirt_size = 'X-Large';
SELECT      (SUM(CASE WHEN zip_code.type = 'PO Box' THEN 1 ELSE 0 END) * 100.0 / COUNT(zip_code.zip_code)) AS percentage_po_boxes FROM      zip_code;
SELECT e.event_name, e.location  FROM event e  JOIN budget b ON e.event_id = b.link_to_event  WHERE b.remaining > 0;
SELECT event_name, event_date  FROM event  JOIN attendance ON event.event_id = attendance.link_to_event  JOIN expense ON attendance.member_id = expense.link_to_member  WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100;
SELECT m.first_name, m.last_name, d.major_name  FROM member m  JOIN major d ON m.link_to_major = d.major_id  JOIN expense e ON m.member_id = e.link_to_member  WHERE e.cost > 100;
SELECT T1.city, T1.county  FROM zip_code AS T1  JOIN attendance AS T2 ON T1.zip_code = T2.link_to_event  JOIN income AS T3 ON T2.event_id = T3.link_to_event  GROUP BY T1.zip_code  HAVING COUNT(T3.income_id) > 40;
SELECT m.first_name, m.last_name, SUM(e.cost) as total_paid FROM member m JOIN (     SELECT DISTINCT e1.member_id     FROM expense e1     JOIN expense e2 ON e1.event_id <> e2.event_id AND e1.member_id = e2.member_id ) exp_on_multiple_events ON exp_on_multiple_events.member_id = m.member_id JOIN expense e ON e.member_id = m.member_id GROUP BY m.member_id HAVING COUNT(DISTINCT e.event_id) > 1 ORDER BY total_paid DESC LIMIT 1;
SELECT      AVG(e.cost)  FROM      expense e JOIN      member m ON e.link_to_member = m.member_id WHERE      m.position != 'Member';
SELECT event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Parking' AND budget.cost < (SELECT AVG(cost) FROM budget WHERE category = 'Parking');
SELECT      (SUM(CASE WHEN e.type = 'Game' THEN expense.cost ELSE 0 END) / CAST(SUM(COUNT(e.event_id)) OVER () AS REAL)) * 100 AS percentage_of_cost_for_game_events FROM      event e JOIN      expense exp ON e.event_id = exp.link_to_event;
SELECT      b.budget_id  FROM      budget b JOIN      expense e ON b.budget_id = e.link_to_budget WHERE      e.expense_description = 'Water, chips, cookies' GROUP BY      b.budget_id ORDER BY      SUM(e.cost) DESC LIMIT 1;
SELECT m.first_name, m.last_name  FROM member m  JOIN (     SELECT link_to_member, SUM(cost) as total_spent      FROM expense      GROUP BY link_to_member      ORDER BY total_spent DESC      LIMIT 5 ) e ON m.member_id = e.link_to_member  ORDER BY e.total_spent DESC;
SELECT      m.first_name,      m.last_name,      m.phone FROM      member m JOIN      expense e ON m.member_id = e.link_to_member WHERE      e.cost > (SELECT AVG(cost) FROM expense)
SELECT      SUBTRACT(         DIVIDE(             SUM(zip_code.state = 'Maine'),              COUNT(DISTINCT CASE WHEN member.position = 'Member' THEN member.member_id ELSE NULL END)         ),         DIVIDE(             SUM(zip_code.state = 'Vermont'),              COUNT(DISTINCT CASE WHEN member.position = 'Member' THEN member.member_id ELSE NULL END)         )     ) AS percentage_difference FROM student_club.member  INNER JOIN student_club.zip_code ON zip_code.zip_code = member.zip
SELECT major.major_name, department  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';
SELECT m.first_name, m.last_name  FROM member m  JOIN expense e ON m.member_id = e.link_to_member  WHERE e.expense_description = 'Water, Veggie tray, supplies'
SELECT T1.last_name, T1.phone  FROM member AS T1  JOIN major AS T2 ON T1.link_to_major = T2.major_id  WHERE T2.major_name = 'Elementary Education';
SELECT budget.category, budget.amount  FROM event  JOIN budget ON event.event_id = budget.link_to_event  WHERE event.event_name = 'January Speaker';
SELECT event_name  FROM event  JOIN budget ON event.event_id = budget.link_to_event  WHERE budget.category = 'Food';
SELECT      m.first_name,      m.last_name,      i.amount FROM      member m JOIN      income i ON m.member_id = i.link_to_member WHERE      i.date_received = '2019-09-09'
SELECT budget.category FROM budget JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Posters';
SELECT      m.first_name || ' ' || m.last_name AS full_name,     c.college FROM      member m JOIN      member_position mp ON m.member_id = mp.member_id JOIN      position p ON mp.position_id = p.position_id JOIN      club c ON m.club_id = c.club_id WHERE      p.name = 'Secretary';
SELECT e.event_name  FROM budget b  JOIN event e ON b.link_to_event = e.event_id  WHERE b.category = 'Speaker Gifts'  GROUP BY e.event_name;
SELECT city  FROM zip_code  JOIN member ON zip_code.zip_code = member.zip  WHERE first_name = 'Garrett' AND last_name = 'Girke';
SELECT first_name, last_name, position  FROM member  JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND zip_code.zip_code = 28092;
SELECT COUNT(*)  FROM gasstations  WHERE Country = 'CZE' AND Description LIKE '%Premium%'
SELECT      (COUNT(CASE WHEN `Currency` = 'EUR' THEN 1 END)       / COUNT(CASE WHEN `Currency` = 'CZK' THEN 1 END)) * 100 AS ratio FROM      customers;
SELECT      c.CustomerID  FROM      customers c JOIN      transactions_1k t ON c.CustomerID = t.CustomerID JOIN      yearmonth ym ON c.CustomerID = ym.CustomerID AND                      ym.Date BETWEEN '201201' AND '201212' GROUP BY      c.CustomerID ORDER BY      SUM(ym.Consumption) ASC LIMIT 1;
SELECT      AVG(ym.Consumption) / 12 AS AvgMonthlyConsumption FROM      yearmonth ym JOIN      customers c ON ym.CustomerID = c.CustomerID WHERE      c.Segment = 'SME' AND     ym.Date BETWEEN '201301' AND '201312'
SELECT      c.CustomerID  FROM      customers c  JOIN      transactions_1k t ON c.CustomerID = t.CustomerID  JOIN      yearmonth ym ON c.CustomerID = ym.CustomerID AND                      ym.Date BETWEEN '201101' AND '201112'  WHERE      c.Currency = 'CZK'  GROUP BY      c.CustomerID  ORDER BY      SUM(ym.Consumption) DESC  LIMIT 1;
SELECT COUNT(*)  FROM customers  JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID  WHERE customers.Segment = 'KAM' AND yearmonth.Date BETWEEN '201201' AND '201212' AND yearmonth.Consumption < 30000;
SELECT      SUM(CASE WHEN t3.Currency = 'CZK' THEN t4.Consumption ELSE 0 END) - SUM(CASE WHEN t3.Currency = 'EUR' THEN t4.Consumption ELSE 0 END) AS ConsumptionDifference FROM      customers AS t1 JOIN      transactions_1k AS t2 ON t1.CustomerID = t2.CustomerID JOIN      yearmonth AS t4 ON t1.CustomerID = t4.CustomerID AND MONTH(t4.Date) BETWEEN 1 AND 12 AND YEAR(t4.Date) BETWEEN 2012 AND 2012 JOIN      gasstations AS t3 ON t2.GasStationID = t3.GasStationID
SELECT y.year, SUM(t.Amount) as TotalConsumptionEUR FROM transactions_1k t JOIN yearmonth y ON t.CustomerID = y.CustomerID WHERE t.Price = 'EUR' GROUP BY y.year ORDER BY TotalConsumptionEUR DESC LIMIT 1;
SELECT      c.Segment  FROM      customers c  JOIN      transactions_1k t ON c.CustomerID = t.CustomerID  JOIN      yearmonth ym ON c.CustomerID = ym.CustomerID  GROUP BY      c.Segment  ORDER BY      SUM(ym.Consumption) ASC  LIMIT 1;
SELECT      SUBSTRING(`Date`, 1, 4) AS Year FROM      yearmonth WHERE      `Currency` = 'CZK' GROUP BY      Year ORDER BY      SUM(Consumption) DESC LIMIT 1;
SELECT ym.Date  FROM yearmonth ym  JOIN transactions_1k t ON ym.CustomerID = t.CustomerID  JOIN customers c ON ym.CustomerID = c.CustomerID  JOIN gasstations g ON t.GasStationID = g.GasStationID  JOIN products p ON t.ProductID = p.ProductID  WHERE c.Segment = 'SME' AND ym.Date LIKE '2013%'  GROUP BY ym.Date  ORDER BY SUM(CASE WHEN p.Description LIKE '%gas%' THEN t.Amount ELSE 0 END) DESC  LIMIT 1;
WITH      lowest_consumption_per_segment AS (         SELECT              Segment,             AVG(Consumption) AS avg_consumption_czk_2013         FROM              yearmonth         WHERE              Date BETWEEN '201301' AND '201312'         GROUP BY              Segment     ),     all_transactions_2013 AS (         SELECT              CustomerID,             SUM(Amount * Price) AS total_consumption_czk         FROM              transactions_1k         WHERE              DATE_FORMAT(Date, '%Y%m') BETWEEN '201301' AND '201312'         GROUP BY              CustomerID     ) SELECT      CASE          WHEN Segment = 'SME' THEN 'SME'         WHEN Segment = 'LAM' THEN 'LAM'         WHEN Segment = 'KAM' THEN 'KAM'     END AS Segment,     (SELECT avg_consumption_czk_2013 FROM lowest_consumption_per_segment WHERE Segment = 'SME') - (SELECT avg_consumption_czk_2013 FROM lowest_consumption_per_segment WHERE Segment = 'LAM') AS SME_minus_LAM,     (SELECT avg_consumption_czk_2013 FROM lowest_consumption_per_segment WHERE Segment = 'LAM') - (SELECT avg_consumption_czk_2013 FROM lowest_consumption_per_segment WHERE Segment = 'KAM') AS LAM_minus_KAM,     (SELECT avg_consumption_czk_2013 FROM lowest_consumption_per_segment WHERE Segment = 'KAM') - (SELECT avg_consumption_czk_2013 FROM lowest_consumption_per_segment WHERE Segment = 'SME') AS KAM_minus_SME,      ((SELECT total_consumption_czk FROM all_transactions_2013 WHERE CustomerID IN (SELECT CustomerID FROM all_transactions_2013 GROUP BY Segment HAVING SUM(total_consumption_czk) = (SELECT MIN(total_consumption_czk) FROM all_transactions_2013 GROUP BY Segment WHERE Segment = 'SME'))) / (SELECT COUNT(*) FROM all_transactions_2013 WHERE CustomerID IN (SELECT CustomerID FROM all_transactions_2013 GROUP BY Segment HAVING SUM(total_consumption_czk) = (SELECT MIN(total_consumption_czk) FROM all_transactions_2013 GROUP BY Segment WHERE Segment = 'SME')))) -     ((SELECT total_consumption_czk FROM all_transactions_2013 WHERE CustomerID IN (SELECT CustomerID FROM all_transactions_2013 GROUP BY Segment HAVING SUM(total_consumption_czk) = (SELECT MIN(total_consumption_czk) FROM all_transactions_2013 GROUP BY Segment WHERE Segment = 'LAM'))) / (SELECT COUNT(*) FROM all_transactions_2013 WHERE CustomerID IN (SELECT CustomerID FROM all_transactions_2013 GROUP BY Segment HAVING SUM(total_consumption_czk) = (SELECT MIN(total_consumption_czk) FROM all_transactions_2013 GROUP BY Segment WHERE Segment = 'LAM')))) AS SME_vs_LAM_avg_diff,      ((SELECT total_consumption_czk FROM all_transactions_2013 WHERE CustomerID IN (SELECT CustomerID FROM all_transactions_2013 GROUP BY Segment HAVING SUM(total_consumption_czk) = (SELECT MIN(total_consumption_czk) FROM all_transactions_2013 GROUP BY Segment WHERE Segment = 'LAM'))) / (SELECT COUNT(*) FROM all_transactions_2013 WHERE CustomerID IN (SELECT CustomerID FROM all_transactions_2013 GROUP BY Segment HAVING SUM(total_consumption_czk) = (SELECT MIN(total_consumption_czk) FROM all_transactions_2013 GROUP BY Segment WHERE Segment = 'LAM')))) -     ((SELECT total_consumption_czk FROM all_transactions_2013 WHERE CustomerID IN (SELECT CustomerID FROM all_transactions_2013 GROUP BY Segment HAVING SUM(total_consumption_czk) = (SELECT MIN(total_consumption_czk) FROM all_transactions_2013 GROUP BY Segment WHERE Segment = 'KAM'))) / (SELECT COUNT(*) FROM all_transactions_2013 WHERE CustomerID IN (SELECT CustomerID FROM all_transactions_2013 GROUP BY Segment HAVING SUM(total_consumption_czk) = (SELECT MIN(total_consumption_czk) FROM all_transactions_2013 GROUP BY Segment WHERE Segment = 'KAM')))) AS LAM_vs_KAM_avg_diff,      ((SELECT total_consumption_czk FROM all_transactions_2013 WHERE CustomerID IN (SELECT CustomerID FROM all_transactions_2013 GROUP BY Segment HAVING SUM(total_consumption_czk) = (SELECT MIN(total_consumption_czk) FROM all_transactions_2013 GROUP BY Segment WHERE Segment = 'KAM'))) / (SELECT COUNT(*) FROM all_transactions_2013 WHERE CustomerID IN (SELECT CustomerID FROM all_transactions_2013 GROUP BY Segment HAVING SUM(total_consumption_czk) = (SELECT MIN(total_consumption_czk) FROM all_transactions_2013 GROUP BY Segment WHERE Segment = 'KAM')))) -     ((SELECT total_consumption_czk FROM all_transactions_2013 WHERE CustomerID IN (SELECT CustomerID FROM all_transactions_2013 GROUP BY Segment HAVING SUM(total_consumption_czk) = (SELECT MIN(total_consumption_czk) FROM all_transactions_2013 GROUP BY Segment WHERE Segment = 'SME'))) / (SELECT COUNT(*) FROM all_transactions_2013 WHERE CustomerID IN (SELECT CustomerID FROM all_transactions_2013 GROUP BY Segment HAVING SUM(total_consumption_czk) = (SELECT MIN(total_consumption_czk) FROM all_transactions_2013 GROUP BY Segment WHERE Segment = 'SME')))) AS KAM_vs_SME_avg_diff FROM      all_transactions_2013 JOIN      lowest_consumption_per_segment ON all_transactions_2013.Segment = lowest_consumption_per_segment.Segment WHERE      all_transactions_2013.CustomerID IN (SELECT CustomerID FROM all_transactions_2013 GROUP BY Segment HAVING SUM(total_consumption_czk) = (SELECT MIN(total_consumption_czk) FROM all_transactions_2013 GROUP BY Segment)) ORDER BY      Segment;
SELECT      c.Segment,     MAX((SUM(CASE WHEN d.Date BETWEEN '201201' AND '201312' THEN c.Consumption ELSE 0 END) - SUM(CASE WHEN d.Date BETWEEN '201101' AND '201112' THEN c.Consumption ELSE 0 END)) / SUM(CASE WHEN d.Date BETWEEN '201301' AND '201312' THEN c.Consumption ELSE 0 END) * 100) AS Percentage_Increase,     MIN((SUM(CASE WHEN d.Date BETWEEN '201201' AND '201312' THEN c.Consumption ELSE 0 END) - SUM(CASE WHEN d.Date BETWEEN '201101' AND '201112' THEN c.Consumption ELSE 0 END)) / SUM(CASE WHEN d.Date BETWEEN '201301' AND '201312' THEN c.Consumption ELSE 0 END) * 100) AS Percentage_Decrease FROM      customers c JOIN      yearmonth d ON c.CustomerID = d.CustomerID WHERE      c.Currency = 'EUR' GROUP BY      c.Segment ORDER BY      Percentage_Increase DESC, Percentage_Decrease ASC;
SELECT SUM(Consumption)  FROM yearmonth  WHERE CustomerID = 6 AND LEFT(Date, 6) BETWEEN '201308' AND '201311';
SELECT      (SUM(CASE WHEN gasstations.Country = 'Czech Republic' THEN 1 ELSE 0 END) -      SUM(CASE WHEN gasstations.Country = 'Slovakia' THEN 1 ELSE 0 END)) AS more_discount_stations FROM      gasstations WHERE      gasstations.Segment = 'discount';
SELECT      SUM(Consumption)  FROM      yearmonth  WHERE      CustomerID = 7 AND DATE = '201304'  UNION ALL  SELECT      SUM(Consumption)  FROM      yearmonth  WHERE      CustomerID = 5 AND DATE = '201304'  ORDER BY      SUM(Consumption) DESC  LIMIT 1 OFFSET 1;
SELECT      SUM(CASE              WHEN customers.Segment = 'SME' AND customers.Currency = 'CZK' THEN 1              ELSE 0         END) AS czk_sme_count,     SUM(CASE              WHEN customers.Segment = 'SME' AND customers.Currency = 'EUR' THEN 1              ELSE 0         END) AS eur_sme_count FROM      customers WHERE      customers.Segment = 'SME';
SELECT cm.CustomerID  FROM customers cm  JOIN yearmonth ym ON cm.CustomerID = ym.CustomerID  WHERE cm.Currency = 'Euro' AND ym.Date = '201310'  ORDER BY ym.Consumption DESC  LIMIT 1;
SELECT      c.CustomerID,     SUM(ym.Consumption) as TotalConsumption FROM      customers c JOIN      yearmonth ym ON c.CustomerID = ym.CustomerID AND c.Segment = 'KAM' GROUP BY      c.CustomerID ORDER BY      TotalConsumption DESC LIMIT 1;
SELECT SUM(c.Consumption)  FROM customers c  JOIN yearmonth ym ON c.CustomerID = ym.CustomerID  WHERE c.Segment = 'KAM' AND ym.Date = '201305';
SELECT      (COUNT(CASE          WHEN T1.CyclePeriod = 'LAM' AND T2.Consumption > 46.73 THEN 1     END) * 100.0 / COUNT(DISTINCT CASE          WHEN T1.CyclePeriod = 'LAM' THEN T1.CustomerID      END)) AS Percentage_LAM_Customers_Consumed_More_Than_46_73 FROM      yearmonth AS T1 JOIN      transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE      T1.CyclePeriod = 'LAM'
SELECT      g.Country,     COUNT(DISTINCT g.GasStationID) AS ValueForMoneyStations FROM      gasstations g JOIN      transactions_1k t ON g.GasStationID = t.GasStationID WHERE      t.Price > t.Amount  -- This condition shows "value for money" as when price is greater than amount GROUP BY      g.Country;
SELECT      (COUNT(*) FILTER (WHERE customers.Segment = 'KAM' AND customers.Currency = 'euros')::FLOAT / COUNT(*) FILTER (WHERE customers.Segment = 'KAM')::FLOAT) * 100 AS percentage FROM      customers;
SELECT      COUNT(*) * 100.0 / (SELECT COUNT(*) FROM yearmonth WHERE LEFT(Date, 7) = '201202')  FROM      transactions_1k  JOIN      yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID  WHERE      LEFT(yearmonth.Date, 7) = '201202' AND      yearmonth.Consumption > 528.3;
SELECT      (COUNT(CASE WHEN g.Segment = 'Premium' THEN 1 END)       OVER ()      / COUNT(*) OVER ()      * 100) AS premium_percentage FROM      gasstations g WHERE      g.Country = 'Slovakia';
SELECT `CustomerID`  FROM yearmonth  WHERE `Date` = '201309'  GROUP BY `CustomerID`  ORDER BY SUM(`Consumption`) DESC  LIMIT 1;
SELECT      c.Segment  FROM      customers c  JOIN      transactions_1k t ON c.CustomerID = t.CustomerID  JOIN      yearmonth y ON c.CustomerID = y.CustomerID  WHERE      y.Date = '201309'  GROUP BY      c.Segment  ORDER BY      SUM(t.Amount) ASC  LIMIT 1;
SELECT      c.CustomerID  FROM      customers c  JOIN      transactions_1k t ON c.CustomerID = t.CustomerID  JOIN      yearmonth ym ON c.CustomerID = ym.CustomerID AND ym.Date = '201206'  GROUP BY      c.CustomerID  ORDER BY      SUM(t.Amount) ASC  LIMIT 1;
SELECT MAX(Consumption)  FROM yearmonth  WHERE LEFT(Date, 4) = '2012';
SELECT      c.CustomerID,      ym.Date,      (SUM(ym.Consumption) / 12) AS MaxMonthlyConsumption FROM      customers c JOIN      transactions_1k t ON c.CustomerID = t.CustomerID JOIN      yearmonth ym ON c.CustomerID = ym.CustomerID AND MONTH(t.Date) = MONTH(ym.Date) AND YEAR(t.Date) = YEAR(ym.Date) WHERE      c.Currency = 'Euro' GROUP BY      c.CustomerID,      ym.Date ORDER BY      MaxMonthlyConsumption DESC LIMIT 1;
SELECT p.Description FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID JOIN yearmonth ym ON t.CustomerID = ym.CustomerID AND SUBSTRING(ym.Date, 1, 4) = '2013' AND SUBSTRING(ym.Date, 6, 2) = '09'
SELECT DISTINCT T2.Country  FROM transactions_1k AS T1  JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID AND T1.Date = T3.Date  WHERE DATE_FORMAT(T1.Date, '%Y%m') = '201306'
SELECT DISTINCT g.ChainID FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Currency = 'EUR';
SELECT p.Description  FROM products p  JOIN transactions_1k t ON p.ProductID = t.ProductID  JOIN customers c ON t.CustomerID = c.CustomerID  WHERE c.Currency = 'EUR' AND t.Amount > 0;
SELECT AVG(Price * Amount) AS AverageTotalPrice FROM transactions_1k JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID WHERE DATE_FORMAT(Date, '%Y-%m') = '2012-01';
SELECT COUNT(*)  FROM customers  JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID  WHERE customers.Currency = 'euro' AND yearmonth.Consumption > 1000;
SELECT p.Description  FROM transactions_1k t1k  JOIN gasstations g ON t1k.GasStationID = g.GasStationID  JOIN products p ON t1k.ProductID = p.ProductID  WHERE g.Country = 'CZE';
SELECT DISTINCT t.Time  FROM transactions_1k t  JOIN gasstations g ON t.GasStationID = g.GasStationID  WHERE g.ChainID = 11;
SELECT COUNT(*)  FROM transactions_1k  JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID  WHERE gasstations.Country = 'CZE' AND transactions_1k.Price > 1000;
SELECT COUNT(*)  FROM transactions_1k t1  JOIN gasstations g1 ON t1.GasStationID = g1.GasStationID  WHERE g1.Country = 'CZE' AND t1.Date > '2012-01-01'
SELECT AVG(transactions_1k.Price * transactions_1k.Amount) as AverageTotalPrice FROM transactions_1k  JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE'
SELECT      c.CustomerID,     AVG(t.Amount * t.Price) AS AverageTotalPrice FROM      customers c JOIN      transactions_1k t ON c.CustomerID = t.CustomerID WHERE      c.Currency = 'EUR' GROUP BY      c.CustomerID;
SELECT T1.CustomerID FROM yearmonth AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25' GROUP BY T1.CustomerID ORDER BY SUM(T2.Amount) DESC LIMIT 1;
SELECT T3.Country  FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time ASC LIMIT 1;
SELECT      c.Currency FROM      customers c JOIN      transactions_1k t ON c.CustomerID = t.CustomerID WHERE      t.Time = '16:25:00' AND      DATE(t.Date) = '2012-08-24'
SELECT T3.Segment  FROM yearmonth AS T1  JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID AND T1.Date = T2.Date AND T1.Time = T2.Time  JOIN customers AS T3 ON T3.CustomerID = T2.CustomerID  WHERE T1.Date = '2012-08-23' AND T2.Time = '21:20:00';
SELECT COUNT(*)  FROM transactions_1k  JOIN customers ON transactions_1k.CustomerID = customers.CustomerID  WHERE transactions_1k.Date = '2012-08-26' AND transactions_1k.Time < '13:00:00' AND customers.Currency = 'EUR';
SELECT DISTINCT Segment  FROM customers  WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers);
SELECT T3.Country  FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00';
SELECT T4.ProductID FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID JOIN yearmonth AS T3 ON T2.CustomerID = T3.CustomerID AND T3.Date = '2012-08-23' JOIN products AS T4 ON T1.ProductID = T4.ProductID WHERE T1.Time = '21:20:00'
SELECT ym.Date, ym.Consumption  FROM yearmonth ym  JOIN transactions_1k tr ON ym.CustomerID = tr.CustomerID AND                              STR_TO_DATE(CONCAT(ym.Date, '-01'), '%Y-%m-%d') = STR_TO_DATE('2012-08-24', '%Y-%m-%d') AND                              ABS(tr.Amount - 124.05) < 0.01  JOIN customers c ON ym.CustomerID = c.CustomerID  JOIN yearmonth ym2 ON c.CustomerID = ym2.CustomerID AND                       STR_TO_DATE(CONCAT(ym2.Date, '-01'), '%Y-%m-%d') BETWEEN '2012-01-01' AND '2012-01-31'  WHERE c.Segment = 'debit_card_specializing';
SELECT COUNT(*)  FROM transactions_1k  JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID  JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID  WHERE DATE(transactions_1k.Date) = '2012-08-26'  AND TIME(transactions_1k.Time) BETWEEN '08:00:00' AND '09:00:00'  AND gasstations.Country = 'CZE';
SELECT      c.Currency FROM      customers c JOIN      transactions_1k t ON c.CustomerID = t.CustomerID JOIN      yearmonth y ON c.CustomerID = y.CustomerID WHERE      DATE(y.Date) LIKE '201306' GROUP BY      c.CustomerID HAVING      SUM(t.Amount) = 214582.17;
SELECT T2.Country  FROM transactions_1k AS T1  JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE T1.CustomerID = (SELECT CustomerID FROM customers WHERE CustomerID = 667467) AND T1.CardID = 667467;
SELECT T1.Segment  FROM customers AS T1  JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T2.Amount = 548.4 AND T2.Date = '2012-08-24'
SELECT      (COUNT(CASE WHEN c.Currency = 'EUR' THEN 1 END) /       COUNT(DISTINCT c.CustomerID)) * 100 AS eur_percentage FROM      transactions_1k t1k JOIN      customers c ON t1k.CustomerID = c.CustomerID JOIN      yearmonth ym ON t1k.Date = ym.Date AND c.CustomerID = ym.CustomerID WHERE      ym.Date = '2012-08-25'
SELECT      ((MAX(CASE WHEN ym.Date < '2013-08-24' THEN t.Consumption END) - MAX(CASE WHEN ym.Date >= '2013-08-24' AND ym.Date < '2013-09-01' THEN t.Consumption END)) / MAX(CASE WHEN ym.Date < '2013-08-24' THEN t.Consumption END)) * 100 AS ConsumptionDecreaseRate FROM      transactions_1k t JOIN      customers c ON t.CustomerID = c.CustomerID JOIN      yearmonth ym ON c.CustomerID = ym.CustomerID AND ym.Date BETWEEN '2012-08-24' AND '2013-08-24' WHERE      t.Amount = 634.8 AND ym.Date = '2012-08-24';
SELECT g.GasStationID, SUM(t.Amount) AS TotalRevenue FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID GROUP BY g.GasStationID ORDER BY TotalRevenue DESC LIMIT 1;
SELECT      (COUNT(*) FILTER (WHERE customers.Segment = 'SVK' AND products.Description = 'premium') * 100.0 / COUNT(*) FILTER (WHERE customers.Segment = 'SVK')) as premium_percentage FROM      customers JOIN      transactions_1k ON customers.CustomerID = transactions_1k.CustomerID JOIN      products ON transactions_1k.ProductID = products.ProductID WHERE      customers.Currency = 'EUR' AND customers.Segment = 'SVK' AND products.Description = 'premium';
SELECT      SUM(t.Amount) AS TotalSpent  FROM      transactions_1k t  JOIN      customers c ON t.CustomerID = c.CustomerID  WHERE      c.CustomerID = '38508'  AND      t.Date = '201201'  GROUP BY      t.Date;
SELECT p.Description  FROM products p  JOIN transactions_1k t ON p.ProductID = t.ProductID  GROUP BY p.Description  ORDER BY SUM(t.Amount) DESC  LIMIT 5;
SELECT      c.CustomerID,      AVG(t.Price / t.Amount) AS AvgPricePerItem,     c.Currency  FROM      customers c  JOIN      transactions_1k t ON c.CustomerID = t.CustomerID  GROUP BY      c.CustomerID,      c.Currency  ORDER BY      SUM(t.Amount) DESC  LIMIT 1;
SELECT T3.Country  FROM transactions_1k AS T1 JOIN products AS T2 ON T1.ProductID = T2.ProductID JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.ProductID = 2 AND T2.Price = (SELECT MAX(Price) FROM products WHERE ProductID = 2)
SELECT ym.Consumption  FROM yearmonth ym  JOIN transactions_1k t ON ym.CustomerID = t.CustomerID AND  t.ProductID = 5 AND  t.Price / t.Amount > 29 AND  ym.Date LIKE '201208'
