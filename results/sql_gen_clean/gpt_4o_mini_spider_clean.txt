SELECT COUNT(*)  FROM head  WHERE age > 56;
SELECT h.name, h.born_state, h.age FROM head h JOIN management m ON h.head_ID = m.head_ID ORDER BY h.age;
SELECT YEAR(Creation) AS Creation_Year, Name, Budget_in_Billions FROM department;
SELECT MAX(Budget_in_Billions) AS Max_Budget, MIN(Budget_in_Billions) AS Min_Budget FROM department;
SELECT AVG(Num_Employees) AS Average_Employees FROM department WHERE Ranking BETWEEN 10 AND 15;
SELECT h.name  FROM head h  WHERE h.born_state <> 'California';
SELECT DISTINCT YEAR(d.Creation) AS Creation_Year FROM department d JOIN management m ON d.Department_ID = m.department_ID JOIN head h ON m.head_ID = h.head_ID WHERE h.born_state = 'Alabama';
SELECT born_state FROM head GROUP BY born_state HAVING COUNT(head_ID) >= 3;
SELECT YEAR(Creation) AS Establishment_Year, COUNT(*) AS Department_Count FROM department GROUP BY YEAR(Creation) ORDER BY Department_Count DESC LIMIT 1;
SELECT d.Name, d.Num_Employees FROM department d JOIN management m ON d.Department_ID = m.department_ID JOIN head h ON m.head_ID = h.head_ID WHERE m.temporary_acting = 'Yes';
SELECT COUNT(DISTINCT temporary_acting) AS acting_status_count FROM management;
SELECT COUNT(DISTINCT d.Department_ID) AS num_departments FROM department d LEFT JOIN management m ON d.Department_ID = m.department_ID LEFT JOIN head h ON m.head_ID = h.head_ID WHERE h.head_ID IS NULL;
SELECT DISTINCT h.age FROM head h JOIN management m ON h.head_ID = m.head_ID WHERE m.temporary_acting = 1;
SELECT DISTINCT h1.born_state FROM department d1 JOIN management m1 ON d1.Department_ID = m1.department_ID JOIN head h1 ON m1.head_ID = h1.head_ID WHERE d1.Name = 'Treasury'    OR d1.Name = 'Homeland Security';
SELECT m.department_ID, d.Name, COUNT(m.head_ID) AS Number_of_Heads FROM management m JOIN department d ON m.department_ID = d.Department_ID GROUP BY m.department_ID, d.Name HAVING COUNT(m.head_ID) > 1;
SELECT head_ID, name  FROM head  WHERE name LIKE '%Ha%';
SELECT COUNT(*) AS Total_Farms FROM farm;
SELECT COUNT(*) AS Number_of_Farms FROM farm;
SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC;
SELECT Farm_ID, Total_Horses FROM farm ORDER BY Total_Horses ASC;
SELECT DISTINCT Hosts  FROM farm_competition  WHERE Theme <> 'Aliens';
SELECT Hosts  FROM farm_competition  WHERE Theme <> 'Aliens';
SELECT Theme  FROM farm_competition  ORDER BY Year ASC;
SELECT Theme  FROM farm_competition  ORDER BY Year ASC;
SELECT AVG(Working_Horses) AS Average_Working_Horses FROM farm WHERE Total_Horses > 5000;
SELECT AVG(Working_Horses) AS Average_Working_Horses FROM farm WHERE Total_Horses > 5000;
SELECT MAX(Cows) AS Max_Cows, MIN(Cows) AS Min_Cows FROM farm;
SELECT MAX(Cows) AS Max_Cows, MIN(Cows) AS Min_Cows FROM farm;
SELECT COUNT(DISTINCT Status) AS Different_Statuses FROM city;
SELECT COUNT(DISTINCT Status) AS NumberOfDifferentStatuses FROM city;
SELECT Official_Name FROM city ORDER BY Population DESC;
SELECT Official_Name FROM city ORDER BY Population DESC;
SELECT Official_Name, Status  FROM city  WHERE Population = (SELECT MAX(Population) FROM city);
SELECT Official_Name, Status  FROM city  ORDER BY Population DESC  LIMIT 1;
SELECT fc.Year, c.Official_Name FROM farm_competition fc JOIN city c ON fc.Host_city_ID = c.City_ID;
SELECT fc.Year, c.Official_Name FROM farm_competition fc JOIN city c ON fc.Host_city_ID = c.City_ID;
SELECT c.Official_Name FROM city c JOIN farm_competition fc ON c.City_ID = fc.Host_city_ID GROUP BY c.Official_Name HAVING COUNT(fc.Competition_ID) > 1;
SELECT c.Official_Name FROM city c JOIN farm_competition fc ON c.City_ID = fc.Host_city_ID GROUP BY c.Official_Name HAVING COUNT(fc.Competition_ID) > 1;
SELECT c.Status FROM city c JOIN farm_competition fc ON c.City_ID = fc.Host_city_ID GROUP BY c.City_ID, c.Status ORDER BY COUNT(fc.Competition_ID) DESC LIMIT 1;
SELECT c.Status FROM city c JOIN farm_competition fc ON c.City_ID = fc.Host_city_ID GROUP BY c.City_ID, c.Status ORDER BY COUNT(fc.Competition_ID) DESC LIMIT 1;
SELECT fc.Theme FROM farm_competition fc JOIN city c ON fc.Host_city_ID = c.City_ID WHERE c.Population > 1000;
SELECT DISTINCT fc.Theme FROM farm_competition fc JOIN city c ON fc.Host_city_ID = c.City_ID WHERE c.Population > 1000;
SELECT Status, AVG(Population) AS Average_Population FROM city GROUP BY Status;
SELECT Status, AVG(Population) AS Average_Population FROM city GROUP BY Status;
SELECT Status, COUNT(*) AS City_Count FROM city GROUP BY Status ORDER BY City_Count DESC;
SELECT Status, COUNT(*) AS Frequency FROM city GROUP BY Status ORDER BY Frequency ASC;
SELECT Status, COUNT(*) AS Count FROM city GROUP BY Status ORDER BY Count DESC LIMIT 1;
SELECT Status, COUNT(*) AS Status_Count FROM city GROUP BY Status ORDER BY Status_Count DESC LIMIT 1;
SELECT Official_Name  FROM city  WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition);
SELECT Official_Name  FROM city  WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition);
SELECT DISTINCT Status  FROM city  WHERE Population > 1500 AND Population < 500;
SELECT DISTINCT Status  FROM city  WHERE Population > 1500     OR Population < 500;
SELECT Official_Name  FROM city  WHERE Population > 1500 OR Population < 500;
SELECT Official_Name  FROM city  WHERE Population > 1500 OR Population < 500;
SELECT Census_Ranking  FROM city  WHERE Status <> 'Village';
SELECT Census_Ranking  FROM city  WHERE Status <> 'Village';
SELECT c.course_name, COUNT(scr.student_id) AS number_of_students FROM Courses c JOIN Student_Course_Registrations scr ON c.course_id = scr.course_id GROUP BY c.course_id, c.course_name ORDER BY number_of_students DESC LIMIT 1;
SELECT c.course_name FROM Courses c JOIN Student_Course_Registrations scr ON c.course_id = scr.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(scr.student_id) DESC LIMIT 1;
SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (     SELECT MIN(course_count)     FROM (         SELECT COUNT(course_id) AS course_count         FROM Student_Course_Registrations         GROUP BY student_id     ) AS course_counts );
SELECT student_id FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) = (     SELECT MIN(course_count)     FROM (         SELECT COUNT(course_id) AS course_count         FROM Student_Course_Registrations         GROUP BY student_id     ) AS course_counts );
SELECT P.first_name, P.last_name  FROM People P  JOIN Candidates C ON P.person_id = C.candidate_id;
SELECT P.first_name, P.last_name FROM People P JOIN Candidates C ON P.person_id = C.candidate_id;
SELECT student_id  FROM Students  WHERE student_id NOT IN (SELECT DISTINCT student_id FROM Student_Course_Attendance);
SELECT student_id  FROM Students  WHERE student_id NOT IN (SELECT DISTINCT student_id FROM Student_Course_Attendance);
SELECT DISTINCT student_id  FROM Student_Course_Attendance;
SELECT DISTINCT student_id  FROM Student_Course_Attendance;
SELECT s.student_id, c.course_name FROM Students s JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id JOIN Courses c ON scr.course_id = c.course_id;
SELECT s.* FROM Students s JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id ORDER BY scr.registration_date DESC LIMIT 1;
SELECT s.student_id, s.student_details, scr.course_id, scr.registration_date FROM Students s JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id WHERE scr.registration_date = (SELECT MAX(registration_date) FROM Student_Course_Registrations);
SELECT COUNT(DISTINCT sc.student_id) AS number_of_students FROM Student_Course_Attendance sc JOIN Courses c ON sc.course_id = c.course_id WHERE c.course_name = 'English';
SELECT COUNT(DISTINCT scr.student_id) AS number_of_students FROM Student_Course_Registrations scr JOIN Courses c ON scr.course_id = c.course_id WHERE c.course_name LIKE '%English%';
SELECT COUNT(*) AS course_count FROM Student_Course_Registrations WHERE student_id = 171;
SELECT COUNT(*) AS courses_attended FROM Student_Course_Attendance WHERE student_id = 171;
SELECT c.candidate_id  FROM Candidates c  JOIN People p ON c.candidate_id = p.person_id  WHERE p.email_address = 'stanley.monahan@example.org';
SELECT c.candidate_id  FROM Candidates c  JOIN People p ON c.candidate_id = p.person_id  WHERE p.email_address = 'stanley.monahan@example.org';
SELECT DISTINCT c.candidate_id FROM Candidates c JOIN Student_Course_Attendance sca ON c.candidate_id = sca.student_id JOIN Student_Course_Registrations scr ON sca.student_id = scr.student_id AND sca.course_id = scr.course_id ORDER BY sca.date_of_attendance DESC LIMIT 1;
SELECT sc.student_id FROM Student_Course_Attendance sc JOIN Student_Course_Registrations sr ON sc.student_id = sr.student_id AND sc.course_id = sr.course_id JOIN Students s ON sr.student_id = s.student_id JOIN Candidates c ON s.student_details = c.candidate_details ORDER BY sc.date_of_attendance DESC LIMIT 1;
SELECT s.student_id, s.student_details FROM Students s JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id GROUP BY s.student_id, s.student_details ORDER BY COUNT(scr.course_id) DESC LIMIT 1;
SELECT s.student_id, s.student_details FROM Students s JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id GROUP BY s.student_id, s.student_details ORDER BY COUNT(scr.course_id) DESC LIMIT 1;
SELECT student_id, COUNT(course_id) AS registered_courses FROM Student_Course_Registrations GROUP BY student_id HAVING COUNT(course_id) > 0;
SELECT student_id, COUNT(course_id) AS course_count FROM Student_Course_Registrations GROUP BY student_id;
SELECT c.course_name, COUNT(scr.student_id) AS registered_students FROM Courses c LEFT JOIN Student_Course_Registrations scr ON c.course_id = scr.course_id GROUP BY c.course_name;
SELECT c.course_id, c.course_name, COUNT(scr.student_id) AS registered_students FROM Courses c LEFT JOIN Student_Course_Registrations scr ON c.course_id = scr.course_id GROUP BY c.course_id, c.course_name;
SELECT candidate_id  FROM Candidate_Assessments  WHERE asessment_outcome_code = 'Pass';
SELECT candidate_id  FROM Candidate_Assessments  WHERE asessment_outcome_code = 'Pass';
SELECT p.cell_mobile_number FROM People p JOIN Candidates c ON p.person_id = c.candidate_id JOIN Candidate_Assessments ca ON c.candidate_id = ca.candidate_id WHERE ca.asessment_outcome_code = 'Fail';
SELECT p.cell_mobile_number FROM People p JOIN Candidates c ON p.person_id = c.candidate_id JOIN Candidate_Assessments ca ON c.candidate_id = ca.candidate_id WHERE ca.asessment_outcome_code = 'Fail';
SELECT student_id  FROM Student_Course_Registrations  WHERE course_id = 301;
SELECT student_id  FROM Student_Course_Registrations  WHERE course_id = 301;
SELECT student_id  FROM Student_Course_Registrations  WHERE course_id = 301  ORDER BY registration_date DESC  LIMIT 1;
SELECT student_id  FROM Student_Course_Registrations  WHERE course_id = 301  ORDER BY registration_date DESC  LIMIT 1;
SELECT DISTINCT city FROM Addresses;
SELECT DISTINCT city FROM Addresses;
SELECT DISTINCT a.city FROM Addresses a JOIN People_Addresses pa ON a.address_id = pa.address_id JOIN People p ON pa.person_id = p.person_id JOIN Students s ON p.person_id = s.student_id;
SELECT DISTINCT a.city FROM Addresses a JOIN People_Addresses pa ON a.address_id = pa.address_id JOIN People p ON pa.person_id = p.person_id JOIN Students s ON p.person_id = s.student_id;
SELECT course_name FROM Courses ORDER BY course_name;
SELECT course_name FROM Courses ORDER BY course_name;
SELECT first_name FROM People ORDER BY first_name;
SELECT first_name FROM People ORDER BY first_name;
SELECT DISTINCT student_id  FROM Student_Course_Registrations  UNION  SELECT DISTINCT student_id  FROM Student_Course_Attendance;
SELECT DISTINCT student_id  FROM Student_Course_Registrations  UNION  SELECT DISTINCT student_id  FROM Student_Course_Attendance;
SELECT DISTINCT course_id  FROM Student_Course_Registrations  WHERE student_id = 121 UNION  SELECT DISTINCT course_id  FROM Student_Course_Attendance  WHERE student_id = 121;
SELECT DISTINCT course_id  FROM Student_Course_Registrations  WHERE student_id = 121 UNION  SELECT DISTINCT course_id  FROM Student_Course_Attendance  WHERE student_id = 121;
SELECT s.* FROM Students s JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id LEFT JOIN Student_Course_Attendance sca ON scr.student_id = sca.student_id AND scr.course_id = sca.course_id WHERE sca.student_id IS NULL;
SELECT s.* FROM Students s LEFT JOIN Student_Course_Registrations r ON s.student_id = r.student_id LEFT JOIN Student_Course_Attendance a ON r.student_id = a.student_id AND r.course_id = a.course_id WHERE a.student_id IS NULL;
SELECT student_id  FROM Student_Course_Registrations  WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics')  ORDER BY registration_date;
SELECT student_id  FROM Student_Course_Registrations  WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Statistics')  ORDER BY registration_date;
SELECT DISTINCT scr.student_id FROM Student_Course_Attendance scr JOIN Student_Course_Registrations scrg ON scr.student_id = scrg.student_id AND scr.course_id = scrg.course_id JOIN Courses c ON scrg.course_id = c.course_id WHERE c.course_name LIKE '%statistics%' ORDER BY scr.date_of_attendance;
SELECT DISTINCT scr.student_id FROM Student_Course_Attendance scr JOIN Student_Course_Registrations scrg ON scr.student_id = scrg.student_id AND scr.course_id = scrg.course_id JOIN Courses c ON scrg.course_id = c.course_id WHERE c.course_name LIKE '%Statistics%' ORDER BY scr.date_of_attendance;
SELECT date  FROM weather  WHERE max_temperature_f > 85;
SELECT date  FROM weather  WHERE max_temperature_f > 85;
SELECT name FROM station WHERE lat < 37.5;
SELECT name FROM station WHERE lat < 37.5;
SELECT city, MAX(lat) AS highest_latitude FROM station GROUP BY city;
SELECT city, MAX(lat) AS highest_latitude FROM station GROUP BY city;
SELECT start_station_name, end_station_name  FROM trip  WHERE id IN (SELECT id FROM trip ORDER BY id ASC LIMIT 3);
SELECT start_station_name, end_station_name  FROM trip  WHERE id IN (SELECT id FROM trip ORDER BY id ASC LIMIT 3);
SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE city = 'San Jose';
SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE city = 'San Jose';
SELECT id FROM trip ORDER BY duration ASC LIMIT 1;
SELECT id FROM trip ORDER BY duration ASC LIMIT 1;
SELECT SUM(duration) AS total_duration, MAX(duration) AS max_duration FROM trip WHERE bike_id = 636;
SELECT SUM(duration) AS total_duration, MAX(duration) AS max_duration FROM trip WHERE bike_id = 636;
SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature FROM weather WHERE EXTRACT(MONTH FROM date) = 8 GROUP BY zip_code;
SELECT zip_code, AVG(mean_temperature_f) AS average_mean_temperature FROM weather WHERE date LIKE '8%' GROUP BY zip_code;
SELECT COUNT(DISTINCT bike_id) AS unique_bikes FROM trip;
SELECT COUNT(DISTINCT bike_id) AS different_bike_ids FROM trip;
SELECT COUNT(DISTINCT city) AS distinct_city_count FROM station;
SELECT COUNT(DISTINCT city) AS different_cities FROM station;
SELECT COUNT(*) FROM station WHERE city = 'Mountain View';
SELECT COUNT(*) FROM station WHERE city = 'Mountain View';
SELECT DISTINCT s.name FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available = 7;
SELECT DISTINCT s.name FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available = 7;
SELECT start_station_name, start_station_id FROM trip WHERE start_date >= '2023-08-01' GROUP BY start_station_name, start_station_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT start_station_name, start_station_id FROM trip WHERE start_date >= '2023-08-01' AND start_date < '2023-09-01' GROUP BY start_station_name, start_station_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT bike_id, COUNT(*) AS trip_count FROM trip WHERE zip_code = '94002' GROUP BY bike_id ORDER BY trip_count DESC LIMIT 1;
SELECT bike_id FROM trip WHERE zip_code = '94002' GROUP BY bike_id ORDER BY SUM(duration) DESC LIMIT 1;
SELECT COUNT(*)  FROM weather  WHERE mean_humidity > 50 AND mean_visibility > 8;
SELECT COUNT(*) AS number_of_days FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8;
SELECT s.lat, s.long, s.city FROM trip t JOIN station s ON t.start_station_id = s.id ORDER BY t.duration ASC LIMIT 1;
SELECT s.lat, s.long, s.city FROM trip t JOIN station s ON t.start_station_id = s.id ORDER BY t.duration ASC LIMIT 1;
SELECT s.id FROM station s JOIN status st ON s.id = st.station_id WHERE s.city = 'San Francisco' GROUP BY s.id HAVING AVG(st.bikes_available) > 10;
SELECT s.id FROM station s JOIN status st ON s.id = st.station_id WHERE s.city = 'San Francisco' GROUP BY s.id HAVING AVG(st.bikes_available) > 10;
SELECT s.name, s.id FROM station s JOIN status st ON s.id = st.station_id GROUP BY s.id, s.name HAVING AVG(st.bikes_available) > 14 OR MONTH(s.installation_date) = 12;
SELECT s.name, s.id FROM station s JOIN status st ON s.id = st.station_id GROUP BY s.id, s.name HAVING AVG(st.bikes_available) > 14 OR MONTH(s.installation_date) = 12;
SELECT cloud_cover, COUNT(*) AS count FROM weather WHERE zip_code = '94107' GROUP BY cloud_cover ORDER BY count DESC LIMIT 3;
SELECT cloud_cover, COUNT(*) AS count FROM weather WHERE zip_code = '94107' GROUP BY cloud_cover ORDER BY count DESC LIMIT 3;
SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) ASC LIMIT 1;
SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) ASC LIMIT 1;
SELECT AVG(s.bikes_available) AS average_bike_availability FROM status s JOIN station st ON s.station_id = st.id WHERE st.city <> 'Palo Alto';
SELECT AVG(s.bikes_available) AS average_bike_availability FROM status s JOIN station st ON s.station_id = st.id WHERE st.city <> 'Palo Alto';
SELECT AVG(long) AS average_longitude FROM station WHERE id NOT IN (     SELECT station_id     FROM status     WHERE bikes_available > 10 );
SELECT AVG(long) AS mean_longitude FROM station WHERE id NOT IN (     SELECT station_id     FROM status     GROUP BY station_id     HAVING MAX(bikes_available) > 10 );
SELECT date, zip_code  FROM weather  WHERE max_temperature_f = 80;
SELECT DISTINCT w.zip_code, w.date FROM weather w JOIN station s ON s.city = w.zip_code WHERE w.max_temperature_f >= 80;
SELECT t.id FROM trip t JOIN weather w ON t.zip_code = w.zip_code GROUP BY t.id HAVING AVG(w.mean_temperature_f) > 60;
SELECT t.id FROM trip t JOIN weather w ON DATE(t.start_date) = w.date WHERE w.mean_temperature_f > 60 GROUP BY t.zip_code, t.id;
SELECT zip_code, COUNT(*) AS max_wind_speed_25_count FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code;
SELECT zip_code, COUNT(*) AS count FROM weather WHERE max_wind_speed_mph >= 25 GROUP BY zip_code;
SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = '94107')
SELECT DISTINCT w.zip_code FROM weather w WHERE w.min_dew_point_f < (     SELECT MIN(min_dew_point_f)     FROM weather     WHERE zip_code = '94107' ) AND w.zip_code IS NOT NULL;
SELECT t.id, s.installation_date FROM trip t JOIN station s ON t.end_station_id = s.id;
SELECT s.id, s.name, s.installation_date FROM trip t JOIN station s ON t.end_station_id = s.id;
SELECT trip.id FROM trip JOIN station ON trip.start_station_id = station.id WHERE station.dock_count = (SELECT MAX(dock_count) FROM station);
SELECT t.id  FROM trip t  JOIN station s ON t.start_station_id = s.id  WHERE s.dock_count = (SELECT MAX(dock_count) FROM station);
SELECT COUNT(*)  FROM trip  WHERE end_station_id NOT IN (     SELECT id      FROM station      WHERE city = 'San Francisco' );
SELECT COUNT(*)  FROM trip  WHERE end_station_name != 'San Francisco';
SELECT DISTINCT date FROM weather WHERE zip_code = '94107' AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%';
SELECT date  FROM weather  WHERE zip_code = '94107'  AND events NOT LIKE '%fog%'  AND precipitation_inches = 0;
SELECT s.id FROM station s WHERE s.lat > 37.4 AND s.id NOT IN (     SELECT st.station_id     FROM status st     WHERE st.bikes_available < 7 );
SELECT s.id FROM station s JOIN status st ON s.id = st.station_id WHERE s.lat > 37.4 GROUP BY s.id HAVING MIN(st.bikes_available) >= 7;
SELECT s.name FROM station s JOIN status st ON s.id = st.station_id GROUP BY s.id, s.name HAVING AVG(st.bikes_available) > 10 AND s.city <> 'San Jose';
SELECT s.name  FROM station s  JOIN status st ON s.id = st.station_id  WHERE st.bikes_available > 10 AND s.city <> 'San Jose';
SELECT name, lat, city  FROM station  ORDER BY lat ASC  LIMIT 1;
SELECT name, lat, city  FROM station  ORDER BY lat ASC  LIMIT 1;
SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3;
SELECT date, mean_temperature_f, mean_humidity FROM weather WHERE date IN (     SELECT date     FROM weather     ORDER BY max_gust_speed_mph DESC     LIMIT 3 );
SELECT city, COUNT(*) AS station_count FROM station GROUP BY city HAVING COUNT(*) >= 15;
SELECT city, COUNT(*) AS station_count FROM station GROUP BY city HAVING COUNT(*) >= 15;
SELECT s.id, s.name FROM station s JOIN trip t ON s.id = t.start_station_id GROUP BY s.id, s.name HAVING COUNT(t.id) >= 200;
SELECT start_station_id AS id, start_station_name AS name FROM trip GROUP BY start_station_id, start_station_name HAVING COUNT(*) >= 200;
SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10;
SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10;
SELECT city, MAX(lat) AS highest_latitude FROM station GROUP BY city ORDER BY highest_latitude DESC;
SELECT city, MAX(lat) AS highest_latitude FROM station GROUP BY city ORDER BY highest_latitude DESC;
SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5;
SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5;
SELECT id, duration  FROM trip  ORDER BY duration DESC  LIMIT 3;
SELECT id, duration  FROM trip  ORDER BY duration DESC  LIMIT 1;
SELECT s.long, AVG(t.duration) AS average_duration FROM station s JOIN trip t ON s.id = t.start_station_id GROUP BY s.long;
SELECT      s.id AS start_station_id,      s.name AS start_station_name,      s.long AS start_station_longitude,      AVG(t.duration) AS average_duration FROM      station s JOIN      trip t ON s.id = t.start_station_id GROUP BY      s.id, s.name, s.long;
SELECT s.lat, MIN(t.duration) AS min_duration FROM station s JOIN trip t ON s.id = t.end_station_id GROUP BY s.lat;
SELECT s.id AS end_station_id, s.name AS station_name, s.lat AS latitude, MIN(t.duration) AS minimum_duration FROM station s JOIN trip t ON s.id = t.end_station_id GROUP BY s.id, s.name, s.lat;
SELECT DISTINCT start_station_name  FROM trip  WHERE duration < 100;
SELECT DISTINCT start_station_name  FROM trip  WHERE duration < 100;
SELECT DISTINCT zip_code FROM weather GROUP BY zip_code HAVING MAX(max_dew_point_f) < 70;
SELECT DISTINCT zip_code FROM weather GROUP BY zip_code HAVING MAX(max_dew_point_f) < 70;
SELECT id  FROM trip  WHERE duration >= (SELECT AVG(duration) FROM trip WHERE zip_code = '94103');
SELECT id  FROM trip  WHERE duration = (SELECT AVG(duration) FROM trip WHERE zip_code = '94103');
SELECT date  FROM weather  WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31;
SELECT date  FROM weather  WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31;
SELECT date, (max_temperature_f - min_temperature_f) AS temperature_difference FROM weather ORDER BY temperature_difference ASC LIMIT 1;
SELECT date, (max_temperature_f - min_temperature_f) AS temperature_range FROM weather ORDER BY temperature_range ASC LIMIT 1;
SELECT DISTINCT s.id, s.name FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available > 12;
SELECT DISTINCT s.id, s.name FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available > 12;
SELECT zip_code FROM trip JOIN weather ON trip.zip_code = weather.zip_code GROUP BY trip.zip_code HAVING AVG(mean_humidity) < 70 AND COUNT(trip.id) >= 100;
SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(id) >= 100 AND AVG(mean_humidity) < 70;
SELECT s.name FROM station s LEFT JOIN trip t ON s.id = t.end_station_id WHERE s.city = 'Palo Alto' GROUP BY s.id, s.name HAVING COUNT(t.id) <= 100;
SELECT name  FROM station  WHERE city = 'Palo Alto'  AND id NOT IN (SELECT end_station_id FROM trip);
SELECT COUNT(*)  FROM trip  WHERE start_station_id IN (SELECT id FROM station WHERE city = 'Mountain View')  AND end_station_id IN (SELECT id FROM station WHERE city = 'Palo Alto');
SELECT COUNT(*)  FROM trip  WHERE start_station_id IN (SELECT id FROM station WHERE city = 'Mountain View')  AND end_station_id IN (SELECT id FROM station WHERE city = 'Palo Alto');
SELECT AVG(s.lat) AS average_latitude, AVG(s.long) AS average_longitude FROM trip t JOIN station s ON t.start_station_id = s.id;
SELECT AVG(lat) AS average_latitude, AVG(long) AS average_longitude FROM station WHERE id IN (SELECT start_station_id FROM trip);
SELECT COUNT(*) AS Total_Books FROM book;
SELECT DISTINCT Writer FROM book ORDER BY Writer ASC;
SELECT Title FROM book ORDER BY Issues ASC;
SELECT Title  FROM book  WHERE Writer <> 'Elaine Lee';
SELECT Title, Issues FROM book;
SELECT Publication_Date  FROM publication  ORDER BY Price DESC;
SELECT DISTINCT Publisher  FROM publication  WHERE Price > 5000000;
SELECT Publisher  FROM publication  WHERE Price = (SELECT MAX(Price) FROM publication);
SELECT Publication_Date  FROM publication  ORDER BY Price  LIMIT 3;
SELECT b.Title, p.Publication_Date FROM book b JOIN publication p ON b.Book_ID = p.Book_ID;
SELECT DISTINCT b.Writer FROM book b JOIN publication p ON b.Book_ID = p.Book_ID WHERE p.Price > 4000000;
SELECT b.Title  FROM book b  JOIN publication p ON b.Book_ID = p.Book_ID  ORDER BY p.Price DESC;
SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(Publication_ID) > 1;
SELECT Publisher, COUNT(*) AS Number_of_Publications FROM publication GROUP BY Publisher;
SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Writer FROM book GROUP BY Writer HAVING COUNT(Book_ID) > 1;
SELECT b.Title  FROM book b  LEFT JOIN publication p ON b.Book_ID = p.Book_ID  WHERE p.Book_ID IS NULL;
SELECT DISTINCT p.Publisher FROM publication p WHERE p.Price > 10000000    OR p.Price < 5000000 GROUP BY p.Publisher HAVING COUNT(CASE WHEN p.Price > 10000000 THEN 1 END) > 0    AND COUNT(CASE WHEN p.Price < 5000000 THEN 1 END) > 0;
SELECT COUNT(DISTINCT Publication_Date) AS Distinct_Publication_Dates FROM publication;
SELECT COUNT(DISTINCT Publication_Date) FROM publication;
SELECT Price  FROM publication  WHERE Publisher IN ('Person', 'Wiley');
SELECT COUNT(*) FROM actor;
SELECT COUNT(*) FROM actor;
SELECT Name FROM actor ORDER BY Name ASC;
SELECT Name FROM actor ORDER BY Name;
SELECT Character, Duration FROM actor;
SELECT a.Character, a.Duration  FROM actor a;
SELECT Name FROM actor WHERE age <> 20;
SELECT Name FROM actor WHERE age <> 20;
SELECT Character  FROM actor  ORDER BY age DESC;
SELECT Character  FROM actor  ORDER BY age DESC;
SELECT Duration FROM actor WHERE age = (SELECT MAX(age) FROM actor);
SELECT Duration  FROM actor  WHERE age = (SELECT MAX(age) FROM actor);
SELECT Name FROM musical WHERE Nominee = 'Bob Fosse';
SELECT DISTINCT m.Name FROM musical m WHERE m.Nominee = 'Bob Fosse';
SELECT DISTINCT Nominee  FROM musical  WHERE Award <> 'Tony Award';
SELECT DISTINCT Nominee  FROM musical  WHERE Award <> 'Tony Award';
SELECT actor.Name AS Actor_Name, musical.Name AS Musical_Name FROM actor JOIN musical ON actor.Musical_ID = musical.Musical_ID;
SELECT actor.Name AS Actor_Name, musical.Name AS Musical_Name FROM actor JOIN musical ON actor.Musical_ID = musical.Musical_ID;
SELECT actor.Name  FROM actor  JOIN musical ON actor.Musical_ID = musical.Musical_ID  WHERE musical.Name = 'The Phantom of the Opera';
SELECT a.Name  FROM actor a  JOIN musical m ON a.Musical_ID = m.Musical_ID  WHERE m.Name = 'The Phantom of the Opera';
SELECT a.Name FROM actor a JOIN musical m ON a.Musical_ID = m.Musical_ID ORDER BY m.Year DESC;
SELECT a.Name  FROM actor a  JOIN musical m ON a.Musical_ID = m.Musical_ID  WHERE m.Result = 'Won'  ORDER BY m.Year DESC;
SELECT m.Name, COUNT(a.Actor_ID) AS NumberOfActors FROM musical m LEFT JOIN actor a ON m.Musical_ID = a.Musical_ID GROUP BY m.Name;
SELECT m.Name AS Musical_Name, COUNT(a.Actor_ID) AS Actor_Count FROM musical m LEFT JOIN actor a ON m.Musical_ID = a.Musical_ID GROUP BY m.Name;
SELECT m.Name FROM musical m JOIN actor a ON m.Musical_ID = a.Musical_ID GROUP BY m.Musical_ID, m.Name HAVING COUNT(a.Actor_ID) >= 3;
SELECT m.Name FROM musical m JOIN actor a ON m.Musical_ID = a.Musical_ID GROUP BY m.Musical_ID, m.Name HAVING COUNT(a.Actor_ID) >= 3;
SELECT Nominee, COUNT(DISTINCT Musical_ID) AS NumberOfMusicals FROM musical GROUP BY Nominee;
SELECT Nominee, COUNT(*) AS Nominations FROM musical GROUP BY Nominee;
SELECT Nominee, COUNT(*) AS Nomination_Count FROM musical GROUP BY Nominee ORDER BY Nomination_Count DESC LIMIT 1;
SELECT Nominee, COUNT(*) AS Nomination_Count FROM musical WHERE Nominee IS NOT NULL GROUP BY Nominee ORDER BY Nomination_Count DESC LIMIT 1;
SELECT Result, COUNT(*) AS Count FROM musical GROUP BY Result ORDER BY Count DESC LIMIT 1;
SELECT Result, COUNT(*) AS Frequency FROM musical GROUP BY Result ORDER BY Frequency DESC LIMIT 1;
SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(DISTINCT Musical_ID) > 2;
SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2;
SELECT Name  FROM musical  WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor);
SELECT Name  FROM musical  WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor);
SELECT DISTINCT Nominee FROM musical WHERE Award IN ('Tony Award', 'Drama Desk Award') GROUP BY Nominee HAVING COUNT(DISTINCT Award) = 2;
SELECT DISTINCT Nominee FROM musical WHERE Award IN ('Tony Award', 'Drama Desk Award') GROUP BY Nominee HAVING COUNT(DISTINCT Award) = 2;
SELECT * FROM musical WHERE Award IN ('Bob Fosse', 'Cleavant Derricks');
SELECT DISTINCT Nominee  FROM musical  WHERE Award IN ('Bob Fosse', 'Cleavant Derricks');
SELECT email FROM user_profiles WHERE name = 'Mary';
SELECT partitionid FROM user_profiles WHERE name = 'Iron Man';
SELECT COUNT(DISTINCT uid) AS user_count FROM user_profiles;
SELECT f1 AS user_id, COUNT(f2) AS followers_count FROM follows GROUP BY f1;
SELECT f1 AS user_id, COUNT(f2) AS number_of_followers FROM follows GROUP BY f1;
SELECT COUNT(*) AS number_of_tweets FROM tweets;
SELECT COUNT(DISTINCT uid) AS number_of_users FROM tweets;
SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%';
SELECT name  FROM user_profiles  WHERE email LIKE '%superstar%' OR email LIKE '%edu%';
SELECT text FROM tweets WHERE text LIKE '%intern%';
SELECT name, email  FROM user_profiles  WHERE followers > 1000;
SELECT up.name  FROM user_profiles up  WHERE up.followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift');
SELECT up.name, up.email FROM user_profiles up WHERE up.followers > 1;
SELECT up.name FROM tweets t JOIN user_profiles up ON t.uid = up.uid GROUP BY up.name HAVING COUNT(t.id) > 1;
SELECT DISTINCT f1  FROM follows  WHERE f2 IN (SELECT uid FROM user_profiles WHERE name IN ('Mary', 'Susan'));
SELECT DISTINCT f2  FROM follows  JOIN user_profiles ON follows.f2 = user_profiles.uid  WHERE follows.f1 IN (SELECT uid FROM user_profiles WHERE name IN ('Mary', 'Susan'));
SELECT name  FROM user_profiles  ORDER BY followers DESC  LIMIT 1;
SELECT name, email  FROM user_profiles  WHERE uid = (SELECT uid               FROM user_profiles               ORDER BY followers ASC               LIMIT 1);
SELECT name, followers  FROM user_profiles  ORDER BY followers DESC;
SELECT up.name FROM user_profiles up JOIN follows f ON up.uid = f.f2 GROUP BY up.uid, up.name ORDER BY COUNT(f.f1) DESC LIMIT 5;
SELECT text FROM tweets ORDER BY createdate;
SELECT up.name, COUNT(t.id) AS tweet_count FROM user_profiles up LEFT JOIN tweets t ON up.uid = t.uid GROUP BY up.name;
SELECT up.name, up.partitionid FROM user_profiles up LEFT JOIN tweets t ON up.uid = t.uid GROUP BY up.uid HAVING COUNT(t.id) < 2;
SELECT up.name, COUNT(t.id) AS tweet_count FROM tweets t JOIN user_profiles up ON t.uid = up.uid GROUP BY up.name HAVING COUNT(t.id) > 1;
SELECT AVG(followers) AS average_followers FROM user_profiles WHERE uid NOT IN (SELECT DISTINCT uid FROM tweets);
SELECT AVG(up.followers) AS average_followers FROM user_profiles up JOIN tweets t ON up.uid = t.uid GROUP BY up.uid;
SELECT MAX(followers) AS max_followers, SUM(followers) AS total_followers FROM user_profiles;
SELECT catalog_entry_name FROM Catalog_Contents;
SELECT catalog_entry_name FROM Catalog_Contents;
SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(attribute_id) > 3;
SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(attribute_id) > 3;
SELECT attribute_data_type  FROM Attribute_Definitions  WHERE attribute_name = 'Green';
SELECT attribute_data_type  FROM Attribute_Definitions  WHERE attribute_name = 'Green';
SELECT catalog_level_name, catalog_level_number  FROM Catalog_Structure  WHERE catalog_level_number BETWEEN 5 AND 10;
SELECT catalog_level_name, catalog_level_number  FROM Catalog_Structure  WHERE catalog_level_number BETWEEN 5 AND 10;
SELECT DISTINCT catalog_publisher  FROM Catalogs  WHERE catalog_publisher LIKE '%Murray%';
SELECT DISTINCT catalog_publisher  FROM Catalogs  WHERE catalog_publisher LIKE '%Murray%';
SELECT catalog_publisher, COUNT(*) AS catalog_count FROM Catalogs GROUP BY catalog_publisher ORDER BY catalog_count DESC LIMIT 1;
SELECT catalog_publisher FROM Catalogs GROUP BY catalog_publisher ORDER BY COUNT(catalog_id) DESC LIMIT 1;
SELECT c.catalog_name, c.date_of_publication FROM Catalogs c JOIN Catalog_Structure cs ON c.catalog_id = cs.catalog_id WHERE cs.catalog_level_number > 5;
SELECT c.catalog_name, c.date_of_publication FROM Catalogs c JOIN Catalog_Structure cs ON c.catalog_id = cs.catalog_id WHERE cs.catalog_level_number > 5;
SELECT cc.catalog_entry_name FROM Catalog_Contents cc JOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id WHERE cca.attribute_id = (     SELECT attribute_id     FROM Catalog_Contents_Additional_Attributes     GROUP BY attribute_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT cc.catalog_entry_name FROM Catalog_Contents cc JOIN Catalog_Contents_Additional_Attributes cca ON cc.catalog_entry_id = cca.catalog_entry_id WHERE cca.attribute_id = (     SELECT attribute_id     FROM Catalog_Contents_Additional_Attributes     GROUP BY attribute_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT cc.catalog_entry_name FROM Catalogs c JOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id ORDER BY cc.price_in_dollars DESC LIMIT 1;
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE price_in_dollars = (SELECT MAX(price_in_dollars) FROM Catalog_Contents);
SELECT cs.catalog_level_name FROM Catalogs c JOIN Catalog_Contents cc ON c.catalog_id = cc.catalog_id JOIN Catalog_Structure cs ON cc.catalog_level_number = cs.catalog_level_number AND cc.catalog_id = cs.catalog_id WHERE c.catalog_id = (     SELECT catalog_id     FROM Catalog_Contents     ORDER BY price_in_dollars ASC     LIMIT 1 ) LIMIT 1;
SELECT cs.catalog_level_name FROM Catalogs c JOIN Catalog_Structure cs ON c.catalog_id = cs.catalog_id JOIN Catalog_Contents cc ON cs.catalog_level_number = cc.catalog_level_number WHERE cc.price_in_dollars = (     SELECT MIN(price_in_dollars)     FROM Catalog_Contents ) LIMIT 1;
SELECT AVG(price_in_euros) AS average_price, MIN(price_in_euros) AS minimum_price FROM Catalog_Contents;
SELECT AVG(price_in_euros) AS average_price, MIN(price_in_euros) AS minimum_price FROM Catalog_Contents;
SELECT catalog_entry_name  FROM Catalog_Contents  ORDER BY height DESC  LIMIT 1;
SELECT catalog_entry_name  FROM Catalog_Contents  ORDER BY height DESC  LIMIT 1;
SELECT catalog_entry_name  FROM Catalog_Contents  ORDER BY capacity ASC  LIMIT 1;
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE capacity = (SELECT MIN(capacity) FROM Catalog_Contents);
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE product_stock_number LIKE '2%';
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE product_stock_number LIKE '2%';
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE catalog_level_number = 8;
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE catalog_level_number = 8;
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE length < 3 OR height > 5;
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE length < 3 OR length > 5;
SELECT ad.attribute_name, ad.attribute_id FROM Attribute_Definitions ad JOIN Catalog_Contents_Additional_Attributes cca ON ad.attribute_id = cca.attribute_id WHERE cca.attribute_value = '0';
SELECT ad.attribute_id, ad.attribute_name FROM Attribute_Definitions ad JOIN Catalog_Contents_Additional_Attributes cca ON ad.attribute_id = cca.attribute_id WHERE cca.attribute_value = '0';
SELECT catalog_entry_name, capacity  FROM Catalog_Contents  WHERE price_in_dollars > 700;
SELECT catalog_entry_name, capacity  FROM Catalog_Contents  WHERE price_in_dollars > 700;
SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(*) > 1;
SELECT date_of_latest_revision, COUNT(*) AS revision_count FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(*) > 1;
SELECT COUNT(*) AS product_count FROM Catalog_Contents;
SELECT COUNT(*) AS total_catalog_contents FROM Catalog_Contents;
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE next_entry_id > 8;
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE next_entry_id > 8;
SELECT COUNT(*) FROM aircraft;
SELECT COUNT(*) FROM aircraft;
SELECT name, distance FROM aircraft;
SELECT name, distance FROM aircraft;
SELECT aid FROM aircraft WHERE distance > 1000;
SELECT aid FROM aircraft WHERE distance > 1000;
SELECT COUNT(*) FROM aircraft WHERE distance BETWEEN 1000 AND 5000;
SELECT COUNT(*)  FROM aircraft  WHERE distance BETWEEN 1000 AND 5000;
SELECT name, distance FROM aircraft WHERE aid = 12;
SELECT name, distance FROM aircraft WHERE aid = 12;
SELECT MIN(distance) AS min_distance, AVG(distance) AS avg_distance, MAX(distance) AS max_distance FROM aircraft;
SELECT MIN(distance) AS min_distance, AVG(distance) AS avg_distance, MAX(distance) AS max_distance FROM aircraft;
SELECT aid, name  FROM aircraft  WHERE distance = (SELECT MAX(distance) FROM aircraft);
SELECT aid, name FROM aircraft WHERE distance = (SELECT MAX(distance) FROM aircraft);
SELECT name  FROM aircraft  ORDER BY distance ASC  LIMIT 3;
SELECT name  FROM aircraft  ORDER BY distance ASC  LIMIT 3;
SELECT name  FROM aircraft  WHERE distance > (SELECT AVG(distance) FROM aircraft);
SELECT name  FROM aircraft  WHERE distance > (SELECT AVG(distance) FROM aircraft);
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) AS number_of_employees FROM employee;
SELECT name, salary FROM employee ORDER BY salary;
SELECT name, salary FROM employee ORDER BY salary;
SELECT eid FROM employee WHERE salary >= 100000;
SELECT eid FROM employee WHERE salary >= 100000;
SELECT COUNT(*) FROM employee WHERE salary BETWEEN 100000 AND 200000;
SELECT COUNT(*)  FROM employee  WHERE salary BETWEEN 100000 AND 200000;
SELECT name, salary FROM employee WHERE eid = 242518965;
SELECT name, salary FROM employee WHERE eid = 242518965;
SELECT AVG(salary) AS average_salary, MAX(salary) AS maximum_salary FROM employee;
SELECT AVG(salary) AS average_salary, MAX(salary) AS largest_salary FROM employee;
SELECT eid, name  FROM employee  WHERE salary = (SELECT MAX(salary) FROM employee);
SELECT eid, name  FROM employee  WHERE salary = (SELECT MAX(salary) FROM employee);
SELECT name  FROM employee  ORDER BY salary  LIMIT 3;
SELECT name  FROM employee  ORDER BY salary ASC  LIMIT 3;
SELECT name FROM employee WHERE salary > (SELECT AVG(salary) FROM employee);
SELECT name  FROM employee  WHERE salary > (SELECT AVG(salary) FROM employee);
SELECT eid, salary FROM employee WHERE name = 'Mark Young';
SELECT eid, salary FROM employee WHERE name = 'Mark Young';
SELECT COUNT(*) FROM flight;
SELECT COUNT(*) AS number_of_flights FROM flight;
SELECT flno, origin, destination  FROM flight  ORDER BY origin;
SELECT flno, origin, destination  FROM flight  ORDER BY origin;
SELECT flno FROM flight WHERE origin = 'Los Angeles';
SELECT COUNT(*) FROM flight WHERE origin = 'Los Angeles';
SELECT origin FROM flight WHERE destination = 'Honolulu';
SELECT DISTINCT origin FROM flight WHERE destination = 'Honolulu';
SELECT departure_date, arrival_date  FROM flight  WHERE origin = 'Los Angeles' AND destination = 'Honolulu';
SELECT departure_date, arrival_date  FROM flight  WHERE origin = 'LA' AND destination = 'Honolulu';
SELECT flno FROM flight WHERE distance > 2000;
SELECT flno  FROM flight  WHERE distance > 2000;
SELECT AVG(price) AS average_price  FROM flight  WHERE origin = 'Los Angeles' AND destination = 'Honolulu';
SELECT AVG(price) AS average_price  FROM flight  WHERE origin = 'LA' AND destination = 'Honolulu';
SELECT origin, destination FROM flight WHERE price > 300;
SELECT origin, destination FROM flight WHERE price > 300;
SELECT flno, distance  FROM flight  WHERE price = (SELECT MAX(price) FROM flight);
SELECT flno, distance  FROM flight  WHERE price = (SELECT MAX(price) FROM flight);
SELECT flno  FROM flight  ORDER BY distance  LIMIT 3;
SELECT flno  FROM flight  WHERE distance = (SELECT MIN(distance) FROM flight);
SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'Los Angeles';
SELECT AVG(distance) AS average_distance, AVG(price) AS average_price FROM flight WHERE origin = 'LA';
SELECT origin, COUNT(*) AS number_of_flights FROM flight GROUP BY origin;
SELECT origin, COUNT(*) AS flight_count FROM flight GROUP BY origin;
SELECT destination, COUNT(*) AS number_of_flights FROM flight GROUP BY destination;
SELECT destination, COUNT(flno) AS number_of_flights FROM flight GROUP BY destination;
SELECT origin, COUNT(*) AS flight_count FROM flight GROUP BY origin ORDER BY flight_count DESC LIMIT 1;
SELECT origin, COUNT(*) AS flight_count FROM flight GROUP BY origin ORDER BY flight_count DESC LIMIT 1;
SELECT destination  FROM flight  GROUP BY destination  ORDER BY COUNT(flno) ASC  LIMIT 1;
SELECT destination FROM flight GROUP BY destination ORDER BY COUNT(flno) ASC LIMIT 1;
SELECT a.name  FROM flight f  JOIN aircraft a ON f.aid = a.aid  WHERE f.flno = 99;
SELECT a.name  FROM flight f  JOIN aircraft a ON f.aid = a.aid  WHERE f.flno = 99;
SELECT f.flno  FROM flight f  JOIN aircraft a ON f.aid = a.aid  WHERE a.name = 'Airbus A340-300';
SELECT f.flno  FROM flight f  JOIN aircraft a ON f.aid = a.aid  WHERE a.name = 'Airbus A340-300';
SELECT a.name, COUNT(f.flno) AS number_of_flights FROM aircraft a LEFT JOIN flight f ON a.aid = f.aid GROUP BY a.name;
SELECT a.name, COUNT(f.flno) AS flight_count FROM aircraft a LEFT JOIN flight f ON a.aid = f.aid GROUP BY a.name;
SELECT a.name FROM aircraft a JOIN flight f ON a.aid = f.aid GROUP BY a.aid, a.name HAVING COUNT(f.flno) >= 2;
SELECT a.name FROM aircraft a JOIN flight f ON a.aid = f.aid GROUP BY a.aid, a.name HAVING COUNT(f.flno) >= 2;
SELECT COUNT(DISTINCT eid) AS employee_count FROM certificate;
SELECT COUNT(DISTINCT eid) AS distinct_employee_count FROM certificate;
SELECT eid FROM employee WHERE eid NOT IN (SELECT eid FROM certificate);
SELECT eid FROM employee WHERE eid NOT IN (SELECT eid FROM certificate);
SELECT a.name  FROM aircraft a  JOIN certificate c ON a.aid = c.aid  JOIN employee e ON c.eid = e.eid  WHERE e.name = 'John Williams';
SELECT a.name  FROM aircraft a  JOIN certificate c ON a.aid = c.aid  JOIN employee e ON c.eid = e.eid  WHERE e.name = 'John Williams';
SELECT e.name  FROM employee e  JOIN certificate c ON e.eid = c.eid  JOIN aircraft a ON c.aid = a.aid  WHERE a.name = 'Boeing 737-800';
SELECT e.name  FROM employee e JOIN certificate c ON e.eid = c.eid JOIN aircraft a ON c.aid = a.aid WHERE a.name = 'Boeing 737-800';
SELECT e.name FROM employee e JOIN certificate c ON e.eid = c.eid WHERE c.aid IN (     SELECT aid FROM aircraft WHERE name IN ('Boeing 737-800', 'Airbus A340-300') ) GROUP BY e.eid HAVING COUNT(DISTINCT c.aid) = 2;
SELECT e.name FROM employee e JOIN certificate c ON e.eid = c.eid JOIN aircraft a ON c.aid = a.aid WHERE a.name IN ('Boeing 737-800', 'Airbus A340-300') GROUP BY e.eid HAVING COUNT(DISTINCT a.name) = 2;
SELECT e.name  FROM employee e  WHERE e.eid NOT IN (     SELECT c.eid      FROM certificate c      JOIN aircraft a ON c.aid = a.aid      WHERE a.name = 'Boeing 737-800' );
SELECT e.name  FROM employee e  WHERE e.eid NOT IN (     SELECT c.eid      FROM certificate c      JOIN aircraft a ON c.aid = a.aid      WHERE a.name = 'Boeing 737-800' );
SELECT a.name FROM aircraft a LEFT JOIN certificate c ON a.aid = c.aid GROUP BY a.aid ORDER BY COUNT(c.eid) ASC LIMIT 1;
SELECT a.name FROM aircraft a JOIN certificate c ON a.aid = c.aid GROUP BY a.aid HAVING COUNT(c.eid) = (     SELECT MIN(cert_count)     FROM (         SELECT COUNT(eid) AS cert_count         FROM certificate         GROUP BY aid     ) AS subquery );
SELECT a.name, a.distance FROM aircraft a JOIN certificate c ON a.aid = c.aid GROUP BY a.aid, a.name, a.distance HAVING COUNT(c.eid) > 5 AND a.distance > 5000;
SELECT a.name, a.distance FROM aircraft a JOIN flight f ON a.aid = f.aid GROUP BY a.aid, a.name, a.distance HAVING a.distance > 5000 AND COUNT(f.flno) >= 5;
SELECT e.name, e.salary FROM employee e JOIN certificate c ON e.eid = c.eid GROUP BY e.eid, e.name, e.salary ORDER BY COUNT(c.aid) DESC LIMIT 1;
SELECT e.name, e.salary FROM employee e JOIN certificate c ON e.eid = c.eid GROUP BY e.eid ORDER BY COUNT(c.aid) DESC LIMIT 1;
SELECT e.name, e.salary FROM employee e JOIN certificate c ON e.eid = c.eid JOIN aircraft a ON c.aid = a.aid WHERE a.distance > 5000 GROUP BY e.eid, e.name, e.salary ORDER BY COUNT(c.aid) DESC LIMIT 1;
SELECT e.name, e.salary FROM employee e JOIN certificate c ON e.eid = c.eid JOIN aircraft a ON c.aid = a.aid WHERE a.distance > 5000 GROUP BY e.eid, e.name, e.salary ORDER BY COUNT(c.aid) DESC LIMIT 1;
SELECT COUNT(*) FROM Allergy_Type;
SELECT COUNT(*) AS AllergyEntries FROM Has_Allergy;
SELECT COUNT(DISTINCT AllergyType) AS DifferentAllergyTypes FROM Allergy_Type;
SELECT COUNT(DISTINCT Allergy) AS DistinctAllergies FROM Has_Allergy;
SELECT * FROM Allergy_Type;
SELECT DISTINCT AllergyType FROM Allergy_Type;
SELECT Allergy, AllergyType FROM Allergy_Type;
SELECT Allergy, AllergyType FROM Allergy_Type;
SELECT a.Allergy  FROM Allergy_Type a  WHERE a.AllergyType = 'food';
SELECT DISTINCT Allergy FROM Allergy_Type WHERE AllergyType = 'Food';
SELECT AllergyType FROM Allergy_Type WHERE Allergy = 'Cat';
SELECT AllergyType FROM Allergy_Type WHERE Allergy = 'cat';
SELECT COUNT(*)  FROM Has_Allergy  WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE AllergyType = 'animal');
SELECT COUNT(*)  FROM Allergy_Type  WHERE AllergyType = 'Animal';
SELECT at.AllergyType, COUNT(ha.Allergy) AS NumberOfAllergies FROM Allergy_Type at LEFT JOIN Has_Allergy ha ON at.Allergy = ha.Allergy GROUP BY at.AllergyType;
SELECT at.AllergyType, COUNT(ha.Allergy) AS AllergyCount FROM Allergy_Type at LEFT JOIN Has_Allergy ha ON at.Allergy = ha.Allergy GROUP BY at.AllergyType;
SELECT AllergyType, COUNT(Allergy) AS AllergyCount FROM Allergy_Type GROUP BY AllergyType ORDER BY AllergyCount DESC LIMIT 1;
SELECT AllergyType, COUNT(*) AS AllergyCount FROM Has_Allergy JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy GROUP BY AllergyType ORDER BY AllergyCount DESC LIMIT 1;
SELECT AllergyType  FROM Allergy_Type  GROUP BY AllergyType  ORDER BY COUNT(Allergy) ASC  LIMIT 1;
SELECT AllergyType FROM Allergy_Type WHERE Allergy IN (SELECT Allergy FROM Has_Allergy GROUP BY Allergy ORDER BY COUNT(*) ASC LIMIT 1);
SELECT COUNT(*) FROM Student;
SELECT COUNT(*) AS TotalStudents FROM Student;
SELECT Fname, LName FROM Student;
SELECT Fname, LName FROM Student;
SELECT COUNT(DISTINCT Advisor) FROM Student;
SELECT COUNT(DISTINCT Advisor) AS NumberOfAdvisors FROM Student;
SELECT DISTINCT Major FROM Student;
SELECT DISTINCT Major FROM Student;
SELECT DISTINCT city_code FROM Student;
SELECT DISTINCT city_code FROM Student;
SELECT Fname, LName, Age FROM Student WHERE Sex = 'F';
SELECT Fname, LName, Age  FROM Student  WHERE Sex = 'F';
SELECT StuID FROM Student WHERE Sex = 'M';
SELECT StuID FROM Student WHERE Sex = 'M';
SELECT COUNT(*) FROM Student WHERE Age = 18;
SELECT COUNT(*) FROM Student WHERE Age = 18;
SELECT StuID FROM Student WHERE Age > 20;
SELECT StuID FROM Student WHERE Age > 20;
SELECT city_code FROM Student WHERE LName = 'Kim';
SELECT city_code FROM Student WHERE LName = 'Kim';
SELECT Advisor FROM Student WHERE StuID = 1004;
SELECT Advisor FROM Student WHERE StuID = 1004;
SELECT COUNT(*)  FROM Student  WHERE city_code IN ('HKG', 'CHI');
SELECT COUNT(*)  FROM Student  WHERE city_code IN ('HKG', 'CHI');
SELECT MIN(Age) AS Minimum_Age, AVG(Age) AS Average_Age, MAX(Age) AS Maximum_Age FROM Student;
SELECT MIN(Age) AS Minimum_Age, AVG(Age) AS Mean_Age, MAX(Age) AS Maximum_Age FROM Student;
SELECT LName FROM Student ORDER BY Age ASC LIMIT 1;
SELECT LName FROM Student ORDER BY Age ASC LIMIT 1;
SELECT StuID FROM Student ORDER BY Age DESC LIMIT 1;
SELECT StuID FROM Student ORDER BY Age DESC LIMIT 1;
SELECT Major, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Major;
SELECT Major, COUNT(*) AS StudentCount FROM Student GROUP BY Major;
SELECT Major, COUNT(*) AS StudentCount FROM Student GROUP BY Major ORDER BY StudentCount DESC LIMIT 1;
SELECT Major, COUNT(*) AS MajorCount FROM Student GROUP BY Major ORDER BY MajorCount DESC LIMIT 1;
SELECT Age, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Age;
SELECT Age, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Age;
SELECT Sex, AVG(Age) AS AverageAge FROM Student GROUP BY Sex;
SELECT Sex, AVG(Age) AS Average_Age FROM Student GROUP BY Sex;
SELECT city_code, COUNT(*) AS number_of_students FROM Student GROUP BY city_code;
SELECT city_code, COUNT(*) AS student_count FROM Student GROUP BY city_code;
SELECT Advisor, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Advisor;
SELECT Advisor, COUNT(*) AS StudentCount FROM Student GROUP BY Advisor;
SELECT Advisor, COUNT(*) AS StudentCount FROM Student GROUP BY Advisor ORDER BY StudentCount DESC LIMIT 1;
SELECT Advisor, COUNT(*) AS StudentCount FROM Student GROUP BY Advisor ORDER BY StudentCount DESC LIMIT 1;
SELECT COUNT(DISTINCT h.StuID) AS CatAllergyCount FROM Has_Allergy h JOIN Allergy_Type a ON h.Allergy = a.Allergy WHERE a.AllergyType = 'cat';
SELECT COUNT(DISTINCT h.StuID) AS AffectedStudents FROM Has_Allergy h JOIN Allergy_Type a ON h.Allergy = a.Allergy WHERE a.AllergyType = 'cat';
SELECT StuID FROM Has_Allergy GROUP BY StuID HAVING COUNT(Allergy) >= 2;
SELECT StuID FROM Has_Allergy GROUP BY StuID HAVING COUNT(Allergy) > 1;
SELECT StuID  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy);
SELECT S.StuID, S.LName, S.Fname, S.Age, S.Sex, S.Major, S.Advisor, S.city_code FROM Student S LEFT JOIN Has_Allergy H ON S.StuID = H.StuID WHERE H.Allergy IS NULL;
SELECT COUNT(DISTINCT s.StuID)  FROM Student s  JOIN Has_Allergy ha ON s.StuID = ha.StuID  WHERE s.Sex = 'F' AND ha.Allergy IN ('milk', 'egg');
SELECT COUNT(DISTINCT s.StuID)  FROM Student s  JOIN Has_Allergy ha ON s.StuID = ha.StuID  WHERE s.Sex = 'Female' AND (ha.Allergy = 'milk' OR ha.Allergy = 'eggs');
SELECT COUNT(DISTINCT h.StuID) AS FoodAllergyCount FROM Has_Allergy h JOIN Allergy_Type a ON h.Allergy = a.Allergy WHERE a.AllergyType = 'Food';
SELECT COUNT(DISTINCT h.StuID) AS AffectedStudents FROM Has_Allergy h JOIN Allergy_Type a ON h.Allergy = a.Allergy WHERE a.AllergyType = 'Food';
SELECT h.Allergy, COUNT(h.StuID) AS StudentCount FROM Has_Allergy h GROUP BY h.Allergy ORDER BY StudentCount DESC LIMIT 1;
SELECT Allergy, COUNT(*) AS AllergyCount FROM Has_Allergy GROUP BY Allergy ORDER BY AllergyCount DESC LIMIT 1;
SELECT a.Allergy, COUNT(h.StuID) AS NumberOfStudents FROM Allergy_Type a LEFT JOIN Has_Allergy h ON a.Allergy = h.Allergy GROUP BY a.Allergy;
SELECT a.Allergy, COUNT(h.StuID) AS StudentCount FROM Allergy_Type a LEFT JOIN Has_Allergy h ON a.Allergy = h.Allergy GROUP BY a.Allergy;
SELECT at.AllergyType, COUNT(ha.StuID) AS NumberOfStudents FROM Allergy_Type at LEFT JOIN Has_Allergy ha ON at.Allergy = ha.Allergy GROUP BY at.AllergyType;
SELECT at.AllergyType, COUNT(ha.StuID) AS AffectedStudents FROM Allergy_Type at LEFT JOIN Has_Allergy ha ON at.Allergy = ha.Allergy GROUP BY at.AllergyType;
SELECT S.LName, S.Age FROM Student S JOIN Has_Allergy H1 ON S.StuID = H1.StuID AND H1.Allergy = 'milk' JOIN Has_Allergy H2 ON S.StuID = H2.StuID AND H2.Allergy = 'cat';
SELECT S.LName, S.Age FROM Student S JOIN Has_Allergy H ON S.StuID = H.StuID WHERE H.Allergy IN ('milk', 'cat') GROUP BY S.StuID HAVING COUNT(DISTINCT H.Allergy) = 2;
SELECT a.Allergy, a.AllergyType FROM Allergy_Type a JOIN Has_Allergy h ON a.Allergy = h.Allergy JOIN Student s ON h.StuID = s.StuID WHERE s.Fname = 'Lisa' ORDER BY a.Allergy;
SELECT a.Allergy, at.AllergyType FROM Student s JOIN Has_Allergy ha ON s.StuID = ha.StuID JOIN Allergy_Type a ON ha.Allergy = a.Allergy WHERE s.Fname = 'Lisa' AND s.Sex = 'F' ORDER BY a.Allergy;
SELECT S.Fname, S.Sex FROM Student S JOIN Has_Allergy HA ON S.StuID = HA.StuID WHERE HA.Allergy = 'milk' AND S.StuID NOT IN (     SELECT StuID FROM Has_Allergy WHERE Allergy = 'cat' );
SELECT S.Fname, S.Sex FROM Student S JOIN Has_Allergy HA ON S.StuID = HA.StuID WHERE HA.Allergy = 'milk' AND S.StuID NOT IN (     SELECT HA2.StuID     FROM Has_Allergy HA2     WHERE HA2.Allergy = 'cats' );
SELECT AVG(s.Age) AS AverageAge FROM Student s JOIN Has_Allergy ha ON s.StuID = ha.StuID JOIN Allergy_Type at ON ha.Allergy = at.Allergy WHERE at.AllergyType IN ('food', 'animal');
SELECT AVG(s.Age) AS AverageAge FROM Student s JOIN Has_Allergy ha ON s.StuID = ha.StuID JOIN Allergy_Type at ON ha.Allergy = at.Allergy WHERE at.AllergyType IN ('Food', 'Animal');
SELECT S.Fname, S.LName FROM Student S WHERE S.StuID NOT IN (     SELECT HA.StuID     FROM Has_Allergy HA     JOIN Allergy_Type AT ON HA.Allergy = AT.Allergy     WHERE AT.AllergyType = 'Food' );
SELECT CONCAT(S.Fname, ' ', S.LName) AS FullName FROM Student S LEFT JOIN Has_Allergy H ON S.StuID = H.StuID WHERE H.Allergy IS NULL;
SELECT COUNT(DISTINCT s.StuID)  FROM Student s  JOIN Has_Allergy ha ON s.StuID = ha.StuID  JOIN Allergy_Type at ON ha.Allergy = at.Allergy  WHERE s.Sex = 'M' AND at.AllergyType = 'Food';
SELECT COUNT(DISTINCT s.StuID)  FROM Student s  JOIN Has_Allergy ha ON s.StuID = ha.StuID  JOIN Allergy_Type at ON ha.Allergy = at.Allergy  WHERE s.Sex = 'M' AND at.AllergyType = 'Food';
SELECT DISTINCT S.Fname, S.city_code FROM Student S JOIN Has_Allergy H ON S.StuID = H.StuID WHERE H.Allergy IN ('milk', 'cat');
SELECT DISTINCT s.Fname, s.city_code FROM Student s JOIN Has_Allergy ha ON s.StuID = ha.StuID WHERE ha.Allergy IN ('milk', 'cat');
SELECT COUNT(*)  FROM Student s  WHERE s.Age > 18  AND s.StuID NOT IN (     SELECT ha.StuID      FROM Has_Allergy ha      JOIN Allergy_Type at ON ha.Allergy = at.Allergy      WHERE at.AllergyType IN ('food', 'animal') );
SELECT COUNT(*)  FROM Student s WHERE s.Age > 18  AND s.StuID NOT IN (     SELECT ha.StuID      FROM Has_Allergy ha     JOIN Allergy_Type at ON ha.Allergy = at.Allergy     WHERE at.AllergyType IN ('food', 'animal') );
SELECT Fname, Major  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy WHERE Allergy = 'soy');
SELECT S.Fname, S.Major FROM Student S JOIN Has_Allergy H ON S.StuID = H.StuID JOIN Allergy_Type A ON H.Allergy = A.Allergy WHERE A.AllergyType != 'Soy';
SELECT billing_country, COUNT(*) AS number_of_invoices FROM invoices GROUP BY billing_country ORDER BY number_of_invoices DESC LIMIT 5;
SELECT billing_country, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_country ORDER BY invoice_count DESC LIMIT 5;
SELECT billing_country, SUM(total) AS gross_invoice_size FROM invoices GROUP BY billing_country ORDER BY gross_invoice_size DESC LIMIT 8;
SELECT billing_country, SUM(total) AS total_invoice_size FROM invoices GROUP BY billing_country ORDER BY total_invoice_size DESC LIMIT 8;
SELECT billing_country, AVG(total) AS average_invoice_size FROM invoices GROUP BY billing_country ORDER BY average_invoice_size DESC LIMIT 10;
SELECT billing_country, AVG(total) AS average_invoice_size FROM invoices GROUP BY billing_country ORDER BY COUNT(*) DESC;
SELECT c.first_name, c.last_name FROM customers c JOIN invoices i ON c.id = i.customer_id ORDER BY i.invoice_date DESC LIMIT 5;
SELECT c.first_name, c.last_name FROM customers c JOIN invoices i ON c.id = i.customer_id ORDER BY i.invoice_date DESC LIMIT 5;
SELECT c.first_name, c.last_name, COUNT(i.id) AS total_orders FROM customers c JOIN invoices i ON c.id = i.customer_id GROUP BY c.id ORDER BY total_orders DESC LIMIT 10;
SELECT c.first_name, c.last_name, COUNT(i.id) AS total_orders FROM customers c JOIN invoices i ON c.id = i.customer_id GROUP BY c.id ORDER BY total_orders DESC LIMIT 10;
SELECT c.first_name, c.last_name, SUM(i.total) AS total_gross_sales FROM customers c JOIN invoices i ON c.id = i.customer_id GROUP BY c.id ORDER BY total_gross_sales DESC LIMIT 10;
SELECT c.first_name, c.last_name, SUM(i.total) AS sales FROM customers c JOIN invoices i ON c.id = i.customer_id GROUP BY c.id ORDER BY sales DESC LIMIT 10;
SELECT g.name, COUNT(t.id) AS total_tracks FROM genres g JOIN tracks t ON g.id = t.genre_id GROUP BY g.id ORDER BY total_tracks DESC LIMIT 5;
SELECT g.name AS genre_name, COUNT(t.id) AS track_count FROM genres g LEFT JOIN tracks t ON g.id = t.genre_id GROUP BY g.id ORDER BY track_count DESC LIMIT 5;
SELECT title FROM albums;
SELECT title FROM albums;
SELECT * FROM albums ORDER BY title ASC;
SELECT title FROM albums ORDER BY title ASC;
SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;
SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;
SELECT c.first_name, c.last_name FROM invoices i JOIN customers c ON i.customer_id = c.id ORDER BY i.total ASC LIMIT 10;
SELECT c.first_name, c.last_name FROM customers c JOIN invoices i ON c.id = i.customer_id ORDER BY i.total ASC LIMIT 10;
SELECT SUM(total) AS total_amount FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL';
SELECT SUM(total) AS total_amount FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'Illinois';
SELECT COUNT(*) AS number_of_invoices FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL';
SELECT COUNT(*) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL';
SELECT billing_state, COUNT(*) AS invoice_count FROM invoices WHERE billing_country = 'USA' GROUP BY billing_state;
SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state;
SELECT billing_state, COUNT(*) AS invoice_count FROM invoices WHERE billing_country = 'USA' GROUP BY billing_state ORDER BY invoice_count DESC LIMIT 1;
SELECT billing_state, COUNT(*) AS invoice_count FROM invoices GROUP BY billing_state ORDER BY invoice_count DESC;
SELECT COUNT(*) AS number_of_invoices, SUM(total) AS invoice_total FROM invoices WHERE billing_state = 'California';
SELECT COUNT(*) AS number_of_invoices, SUM(total) AS total_billed FROM invoices WHERE billing_state = 'CA';
SELECT a.title  FROM albums a  JOIN artists ar ON a.artist_id = ar.id  WHERE ar.name = 'Aerosmith';
SELECT a.title  FROM albums a  JOIN artists ar ON a.artist_id = ar.id  WHERE ar.name = 'Aerosmith';
SELECT COUNT(*)  FROM albums  WHERE artist_id = (SELECT id FROM artists WHERE name = 'Billy Cobham');
SELECT COUNT(*)  FROM albums  WHERE artist_id = (SELECT id FROM artists WHERE name = 'Billy Cobham');
SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins';
SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins';
SELECT email, phone FROM employees WHERE first_name = 'Astrid' AND last_name = 'Gruber';
SELECT email, phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber';
SELECT COUNT(*) FROM customers WHERE city = 'Prague';
SELECT COUNT(*) FROM customers WHERE city = 'Prague';
SELECT COUNT(*) FROM customers WHERE state = 'CA';
SELECT COUNT(*) FROM customers WHERE state = 'California';
SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida';
SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida';
SELECT a.title  FROM albums a  JOIN artists ar ON a.artist_id = ar.id  WHERE ar.name LIKE '%Led%';
SELECT a.title  FROM albums a  JOIN artists ar ON a.artist_id = ar.id  WHERE ar.name LIKE '%Led%';
SELECT COUNT(*)  FROM customers  WHERE support_rep_id = (SELECT id FROM employees WHERE first_name = 'Steve' AND last_name = 'Johnson');
SELECT COUNT(*)  FROM customers  WHERE support_rep_id = (SELECT id FROM employees WHERE first_name = 'Steve' AND last_name = 'Johnson');
SELECT e.title, e.phone, e.hire_date  FROM employees e  WHERE e.first_name = 'Nancy' AND e.last_name = 'Edwards';
SELECT employees.title, employees.phone, employees.hire_date  FROM employees  WHERE employees.first_name = 'Nancy' AND employees.last_name = 'Edwards';
SELECT first_name || ' ' || last_name AS full_name FROM employees WHERE reports_to = (SELECT id FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards');
SELECT first_name, last_name  FROM employees  WHERE reports_to = (SELECT id FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards');
SELECT address FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';
SELECT address, city, state, country, postal_code  FROM customers  WHERE first_name = 'Nancy' AND last_name = 'Edwards';
SELECT e.first_name || ' ' || e.last_name AS full_name FROM employees e JOIN customers c ON e.id = c.support_rep_id GROUP BY e.id ORDER BY COUNT(c.id) DESC LIMIT 1;
SELECT e.first_name || ' ' || e.last_name AS full_name FROM employees e JOIN customers c ON e.id = c.support_rep_id GROUP BY e.id ORDER BY COUNT(c.id) DESC LIMIT 1;
SELECT COUNT(*) FROM employees WHERE country = 'Canada';
SELECT COUNT(*) FROM employees WHERE country = 'Canada';
SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';
SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';
SELECT first_name, last_name  FROM employees  ORDER BY birth_date DESC  LIMIT 1;
SELECT first_name, last_name  FROM employees  ORDER BY birth_date DESC  LIMIT 1;
SELECT first_name, last_name FROM employees ORDER BY hire_date LIMIT 10;
SELECT first_name, last_name  FROM employees  ORDER BY hire_date  LIMIT 10;
SELECT city, COUNT(*) AS number_of_employees FROM employees WHERE title = 'IT Staff' GROUP BY city;
SELECT city, COUNT(*) AS employee_count FROM employees WHERE title LIKE '%IT%' GROUP BY city;
SELECT e.first_name, e.last_name, COUNT(c.id) AS number_of_reports FROM employees e LEFT JOIN customers c ON e.id = c.support_rep_id GROUP BY e.id ORDER BY number_of_reports DESC LIMIT 1;
SELECT e.first_name, e.last_name, COUNT(emp.id) AS reports_count FROM employees e LEFT JOIN employees emp ON e.id = emp.reports_to GROUP BY e.id;
SELECT COUNT(*)  FROM invoices  WHERE customer_id = (SELECT id FROM customers WHERE first_name = 'Lucas' AND last_name = 'Mancini');
SELECT COUNT(*)  FROM invoices  WHERE customer_id = (SELECT id FROM customers WHERE first_name = 'Luca' AND last_name = 'Mancini');
SELECT SUM(i.total) AS total_spent FROM invoices i JOIN customers c ON i.customer_id = c.id WHERE c.first_name = 'Lucas' AND c.last_name = 'Mancini';
SELECT SUM(i.total) AS total_spent FROM invoices i JOIN customers c ON i.customer_id = c.id WHERE c.first_name = 'Lucas' AND c.last_name = 'Mancini';
SELECT * FROM media_types;
SELECT name FROM media_types;
SELECT DISTINCT name FROM genres;
SELECT DISTINCT name FROM genres;
SELECT name FROM playlists;
SELECT name FROM playlists;
SELECT composer FROM tracks WHERE name = 'Fast As a Shark';
SELECT composer FROM tracks WHERE name = 'Fast As a Shark';
SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark';
SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark';
SELECT tracks.name  FROM tracks  JOIN genres ON tracks.genre_id = genres.id  WHERE genres.name = 'Rock';
SELECT tracks.name  FROM tracks  JOIN genres ON tracks.genre_id = genres.id  WHERE genres.name = 'Rock';
SELECT albums.title  FROM albums  JOIN tracks ON albums.id = tracks.album_id  WHERE tracks.name = 'Balls to the Wall';
SELECT a.title  FROM albums a  JOIN tracks t ON a.id = t.album_id  WHERE t.name = 'Ball to the Wall';
SELECT t.name  FROM tracks t  JOIN albums a ON t.album_id = a.id  WHERE a.title = 'Balls to the Wall';
SELECT tracks.name  FROM tracks  JOIN albums ON tracks.album_id = albums.id  WHERE albums.title = 'Balls to the Wall';
SELECT a.title FROM albums a JOIN tracks t ON a.id = t.album_id GROUP BY a.id HAVING COUNT(t.id) > 10;
SELECT a.title FROM albums a JOIN tracks t ON a.id = t.album_id GROUP BY a.id HAVING COUNT(t.id) > 10;
SELECT t.name  FROM tracks t JOIN genres g ON t.genre_id = g.id JOIN media_types m ON t.media_type_id = m.id WHERE g.name = 'Rock' AND m.name = 'MPEG audio file';
SELECT t.name  FROM tracks t JOIN genres g ON t.genre_id = g.id JOIN media_types m ON t.media_type_id = m.id WHERE g.name = 'Rock' AND m.name = 'MPEG audio file';
SELECT t.name FROM tracks t JOIN genres g ON t.genre_id = g.id JOIN media_types m ON t.media_type_id = m.id WHERE g.name = 'Rock' OR m.name = 'MPEG audio file';
SELECT t.name  FROM tracks t JOIN genres g ON t.genre_id = g.id JOIN media_types m ON t.media_type_id = m.id WHERE g.name = 'Rock' AND m.name = 'MPEG';
SELECT tracks.name  FROM tracks  JOIN genres ON tracks.genre_id = genres.id  WHERE genres.name IN ('Rock', 'Jazz');
SELECT t.name  FROM tracks t JOIN genres g ON t.genre_id = g.id WHERE g.name IN ('Rock', 'Jazz');
SELECT t.name FROM tracks t JOIN playlist_tracks pt ON t.id = pt.track_id JOIN playlists p ON pt.playlist_id = p.id JOIN genres g ON t.genre_id = g.id WHERE g.name = 'Movies';
SELECT t.name FROM tracks t JOIN playlist_tracks pt ON t.id = pt.track_id JOIN playlists p ON pt.playlist_id = p.id WHERE p.name = 'Movies';
SELECT p.name FROM playlists p JOIN playlist_tracks pt ON p.id = pt.playlist_id GROUP BY p.id HAVING COUNT(pt.track_id) > 100;
SELECT p.name FROM playlists p JOIN playlist_tracks pt ON p.id = pt.playlist_id GROUP BY p.id HAVING COUNT(pt.track_id) > 100;
SELECT t.name FROM tracks t JOIN invoice_lines il ON t.id = il.track_id JOIN invoices i ON il.invoice_id = i.id JOIN customers c ON i.customer_id = c.id WHERE c.first_name = 'Daan' AND c.last_name = 'Peeters';
SELECT t.name  FROM tracks t JOIN invoice_lines il ON t.id = il.track_id JOIN invoices i ON il.invoice_id = i.id JOIN customers c ON i.customer_id = c.id WHERE c.first_name = 'Dean' AND c.last_name = 'Peeters';
SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark';
SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark';
SELECT t.name  FROM tracks t JOIN playlist_tracks pt1 ON t.id = pt1.track_id JOIN playlists p1 ON pt1.playlist_id = p1.id LEFT JOIN playlist_tracks pt2 ON t.id = pt2.track_id LEFT JOIN playlists p2 ON pt2.playlist_id = p2.id WHERE p1.name = 'Movies' AND p2.name IS NULL;
SELECT t.name FROM tracks t JOIN playlist_tracks pt ON t.id = pt.track_id WHERE pt.playlist_id = (SELECT id FROM playlists WHERE name = 'Movies') AND t.id NOT IN (SELECT track_id FROM playlist_tracks WHERE playlist_id = (SELECT id FROM playlists WHERE name = 'Music'));
SELECT t.name FROM tracks t JOIN playlist_tracks pt ON t.id = pt.track_id JOIN playlists p ON pt.playlist_id = p.id WHERE p.name IN ('Movies', 'Music') GROUP BY t.id HAVING COUNT(DISTINCT p.name) = 2;
SELECT t.name FROM tracks t JOIN playlist_tracks pt ON t.id = pt.track_id JOIN playlists p ON pt.playlist_id = p.id WHERE p.name IN ('Movies', 'Music') GROUP BY t.id HAVING COUNT(DISTINCT p.name) = 2;
SELECT g.name AS genre, COUNT(t.id) AS track_count FROM genres g LEFT JOIN tracks t ON g.id = t.genre_id GROUP BY g.id, g.name;
SELECT g.name AS genre, COUNT(t.id) AS track_count FROM genres g LEFT JOIN tracks t ON g.id = t.genre_id GROUP BY g.id;
SELECT COUNT(*) AS NumberOfEditors FROM editor;
SELECT Name FROM editor ORDER BY Age ASC;
SELECT Name, Age FROM editor;
SELECT Name FROM editor WHERE Age > 25;
SELECT Name FROM editor WHERE Age IN (24, 25);
SELECT Name FROM editor ORDER BY Age ASC LIMIT 1;
SELECT Age, COUNT(*) AS NumberOfEditors FROM editor GROUP BY Age;
SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT Theme FROM journal;
SELECT e.Name, j.Theme FROM editor e JOIN journal_committee jc ON e.Editor_ID = jc.Editor_ID JOIN journal j ON jc.Journal_ID = j.Journal_ID;
SELECT ec.Name, j.Theme FROM journal_committee jc JOIN editor ec ON jc.Editor_ID = ec.Editor_ID JOIN journal j ON jc.Journal_ID = j.Journal_ID;
SELECT e.Name, e.Age, j.Theme FROM editor e JOIN journal_committee jc ON e.Editor_ID = jc.Editor_ID JOIN journal j ON jc.Journal_ID = j.Journal_ID ORDER BY j.Theme ASC;
SELECT e.Name FROM editor e JOIN journal_committee jc ON e.Editor_ID = jc.Editor_ID JOIN journal j ON jc.Journal_ID = j.Journal_ID WHERE j.Sales > 3000;
SELECT e.Editor_ID, e.Name, COUNT(jc.Journal_ID) AS Committee_Count FROM editor e LEFT JOIN journal_committee jc ON e.Editor_ID = jc.Editor_ID GROUP BY e.Editor_ID, e.Name;
SELECT e.Name FROM editor e JOIN journal_committee jc ON e.Editor_ID = jc.Editor_ID GROUP BY e.Editor_ID, e.Name HAVING COUNT(jc.Journal_ID) >= 2;
SELECT Name  FROM editor  WHERE Editor_ID NOT IN (SELECT Editor_ID FROM journal_committee);
SELECT j.Date, j.Theme, j.Sales FROM journal j WHERE j.Journal_ID NOT IN (     SELECT jc.Journal_ID     FROM journal_committee jc     WHERE jc.Editor_ID IN (SELECT e.Editor_ID FROM editor e WHERE e.Name IN ('Editor1', 'Editor2', 'Editor3')) );
SELECT AVG(j.Sales) AS Average_Sales FROM journal j JOIN journal_committee jc ON j.Journal_ID = jc.Journal_ID WHERE jc.Work_Type = 'Photo';
SELECT COUNT(*) AS total_accounts FROM Accounts;
SELECT COUNT(*) AS account_count FROM Accounts;
SELECT a.account_id, a.customer_id, CONCAT(c.customer_first_name, ' ', c.customer_last_name) AS customer_name FROM Accounts a JOIN Customers c ON a.customer_id = c.customer_id;
SELECT account_id, customer_id, account_name FROM Accounts;
SELECT other_account_details  FROM Accounts  WHERE account_name = '338';
SELECT other_account_details  FROM Accounts  WHERE account_name = '338';
SELECT c.customer_first_name, c.customer_last_name, c.customer_phone FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id WHERE a.account_name = '162';
SELECT CONCAT(c.customer_first_name, ' ', c.customer_last_name) AS full_name, c.customer_phone FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id WHERE a.account_name = '162';
SELECT COUNT(*) AS account_count FROM Accounts WHERE customer_id = (     SELECT customer_id     FROM Customers     WHERE customer_first_name = 'Art' AND customer_last_name = 'Turcotte' );
SELECT COUNT(*) AS account_count FROM Accounts a JOIN Customers c ON a.customer_id = c.customer_id WHERE c.customer_first_name = 'Art' AND c.customer_last_name = 'Turcotte';
SELECT c.customer_id, COUNT(a.account_id) AS number_of_accounts FROM Customers c LEFT JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_id;
SELECT customer_id, COUNT(account_id) AS account_count FROM Accounts GROUP BY customer_id;
SELECT customer_id, COUNT(account_id) AS number_of_accounts FROM Accounts GROUP BY customer_id ORDER BY number_of_accounts DESC LIMIT 1;
SELECT customer_id, COUNT(account_id) AS account_count FROM Accounts GROUP BY customer_id ORDER BY account_count DESC LIMIT 1;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name ORDER BY COUNT(a.account_id) ASC LIMIT 1;
SELECT c.customer_id, CONCAT(c.customer_first_name, ' ', c.customer_last_name) AS full_name FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_id ORDER BY COUNT(a.account_id) ASC LIMIT 1;
SELECT COUNT(*) AS number_of_customers_without_account FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts);
SELECT COUNT(*) AS customers_without_account FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts);
SELECT c.customer_first_name, c.customer_last_name FROM Customers c LEFT JOIN Accounts a ON c.customer_id = a.customer_id WHERE a.account_id IS NULL;
SELECT CONCAT(c.customer_first_name, ' ', c.customer_last_name) AS full_name FROM Customers c LEFT JOIN Accounts a ON c.customer_id = a.customer_id WHERE a.account_id IS NULL;
SELECT DISTINCT c.customer_first_name, c.customer_last_name FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id;
SELECT CONCAT(c.customer_first_name, ' ', c.customer_last_name) AS full_name FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id;
SELECT COUNT(DISTINCT customer_id) AS customers_with_accounts FROM Accounts;
SELECT COUNT(DISTINCT c.customer_id) AS customer_count FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id;
SELECT COUNT(*) AS total_customers FROM Customers;
SELECT COUNT(*) AS customer_count FROM Customers;
SELECT customer_id, customer_first_name, customer_last_name, customer_phone  FROM Customers;
SELECT customer_id, CONCAT(customer_first_name, ' ', customer_last_name) AS full_name, customer_phone FROM Customers;
SELECT customer_phone, customer_email  FROM Customers  WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest';
SELECT customer_phone, customer_email  FROM Customers  WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest';
SELECT COUNT(*) AS number_of_customer_cards FROM Customers_Cards;
SELECT COUNT(*) AS total_customer_cards FROM Customers_Cards;
SELECT card_id, customer_id, card_type_code, card_number  FROM Customers_Cards;
SELECT card_id, customer_id, card_type_code, card_number  FROM Customers_Cards;
SELECT date_valid_from, date_valid_to  FROM Customers_Cards  WHERE card_number = '4560596484842';
SELECT date_valid_from, date_valid_to  FROM Customers_Cards  WHERE card_number = '4560596484842';
SELECT c.customer_first_name, c.customer_last_name, c.customer_phone FROM Customers c JOIN Customers_Cards cc ON c.customer_id = cc.customer_id WHERE cc.card_number = '4560596484842';
SELECT CONCAT(c.customer_first_name, ' ', c.customer_last_name) AS full_name, c.customer_phone FROM Customers c JOIN Customers_Cards cc ON c.customer_id = cc.customer_id WHERE cc.card_number = '4560596484842';
SELECT COUNT(*) AS card_count FROM Customers_Cards cc JOIN Customers c ON cc.customer_id = c.customer_id WHERE c.customer_first_name = 'Art' AND c.customer_last_name = 'Turcotte';
SELECT COUNT(*) AS card_count FROM Customers_Cards cc JOIN Customers c ON cc.customer_id = c.customer_id WHERE c.customer_first_name = 'Art' AND c.customer_last_name = 'Turcotte';
SELECT COUNT(*) AS debit_card_count  FROM Customers_Cards  WHERE card_type_code = 'debit';
SELECT COUNT(*) AS debit_card_count FROM Customers_Cards WHERE card_type_code = 'Debit';
SELECT COUNT(*)  FROM Customers_Cards cc JOIN Customers c ON cc.customer_id = c.customer_id WHERE c.customer_first_name = 'Blanche' AND c.customer_last_name = 'Huels';
SELECT COUNT(*)  FROM Customers_Cards cc JOIN Customers c ON cc.customer_id = c.customer_id WHERE c.customer_first_name = 'Blanche' AND c.customer_last_name = 'Huels';
SELECT customer_id, COUNT(card_id) AS number_of_cards FROM Customers_Cards GROUP BY customer_id;
SELECT customer_id, COUNT(card_id) AS card_count FROM Customers_Cards GROUP BY customer_id;
SELECT customer_id, COUNT(card_id) AS card_count FROM Customers_Cards GROUP BY customer_id ORDER BY card_count DESC LIMIT 1;
SELECT customer_id, COUNT(card_id) AS number_of_cards FROM Customers_Cards GROUP BY customer_id ORDER BY number_of_cards DESC LIMIT 1;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Customers_Cards cc ON c.customer_id = cc.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name HAVING COUNT(cc.card_id) >= 2;
SELECT c.customer_id, CONCAT(c.customer_first_name, ' ', c.customer_last_name) AS full_name FROM Customers c JOIN Customers_Cards cc ON c.customer_id = cc.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name HAVING COUNT(cc.card_id) >= 2;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name ORDER BY COUNT(a.account_id) ASC LIMIT 1;
SELECT c.customer_id, CONCAT(c.customer_first_name, ' ', c.customer_last_name) AS full_name FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_id ORDER BY COUNT(a.account_id) ASC LIMIT 1;
SELECT card_type_code, COUNT(*) AS number_of_cards FROM Customers_Cards GROUP BY card_type_code;
SELECT card_type_code, COUNT(*) AS card_count FROM Customers_Cards GROUP BY card_type_code;
SELECT card_type_code, COUNT(*) AS card_count FROM Customers_Cards GROUP BY card_type_code ORDER BY card_count DESC LIMIT 1;
SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code HAVING COUNT(card_id) >= 5;
SELECT card_type_code FROM Customers_Cards GROUP BY card_type_code HAVING COUNT(card_id) >= 5;
SELECT cc.card_type_code, COUNT(DISTINCT cc.customer_id) AS number_of_customers FROM Customers_Cards cc GROUP BY cc.card_type_code;
SELECT cc.card_type_code, COUNT(DISTINCT cc.customer_id) AS customer_count FROM Customers_Cards cc GROUP BY cc.card_type_code;
SELECT c.customer_id, c.customer_first_name FROM Customers c LEFT JOIN Customers_Cards cc ON c.customer_id = cc.customer_id AND cc.card_type_code = 'credit' WHERE cc.card_id IS NULL;
SELECT c.customer_id, c.customer_first_name FROM Customers c LEFT JOIN Customers_Cards cc ON c.customer_id = cc.customer_id AND cc.card_type_code = 'credit' WHERE cc.card_id IS NULL;
SELECT DISTINCT card_type_code FROM Customers_Cards;
SELECT DISTINCT card_type_code FROM Customers_Cards;
SELECT COUNT(DISTINCT card_type_code) AS number_of_card_types FROM Customers_Cards;
SELECT COUNT(DISTINCT card_type_code) AS different_card_types FROM Customers_Cards;
SELECT DISTINCT transaction_type FROM Financial_Transactions;
SELECT DISTINCT transaction_type FROM Financial_Transactions;
SELECT COUNT(DISTINCT transaction_type) AS number_of_transaction_types FROM Financial_Transactions;
SELECT COUNT(DISTINCT transaction_type) AS different_transaction_types FROM Financial_Transactions;
SELECT AVG(transaction_amount) AS average_transaction_amount, SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions;
SELECT AVG(transaction_amount) AS average_transaction_amount, SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions;
SELECT cc.card_type_code, COUNT(ft.transaction_id) AS number_of_transactions FROM Customers_Cards cc LEFT JOIN Financial_Transactions ft ON cc.card_id = ft.card_id GROUP BY cc.card_type_code;
SELECT cc.card_type_code, COUNT(ft.transaction_id) AS transaction_count FROM Customers_Cards cc LEFT JOIN Financial_Transactions ft ON cc.card_id = ft.card_id GROUP BY cc.card_type_code;
SELECT transaction_type, COUNT(*) AS number_of_transactions FROM Financial_Transactions GROUP BY transaction_type;
SELECT transaction_type, COUNT(*) AS transaction_count FROM Financial_Transactions GROUP BY transaction_type;
SELECT transaction_type FROM Financial_Transactions GROUP BY transaction_type ORDER BY SUM(transaction_amount) DESC LIMIT 1;
SELECT transaction_type FROM Financial_Transactions GROUP BY transaction_type ORDER BY SUM(transaction_amount) DESC LIMIT 1;
SELECT account_id, COUNT(transaction_id) AS number_of_transactions FROM Financial_Transactions GROUP BY account_id;
SELECT account_id, COUNT(transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY account_id;
SELECT COUNT(*) FROM track;
SELECT COUNT(*) FROM track;
SELECT Name, Location FROM track;
SELECT Name, Location FROM track;
SELECT Name, Seating  FROM track  WHERE Year_Opened > 2000  ORDER BY Seating;
SELECT Name, Seating  FROM track  WHERE Year_Opened > 2000  ORDER BY Seating;
SELECT Name, Location, Seating  FROM track  ORDER BY Year_Opened DESC  LIMIT 1;
SELECT Name, Location, Seating  FROM track  WHERE Year_Opened = (SELECT MAX(Year_Opened) FROM track);
SELECT MIN(Seating) AS Min_Seating, MAX(Seating) AS Max_Seating, AVG(Seating) AS Avg_Seating FROM track;
SELECT MIN(Seating) AS Min_Seating, MAX(Seating) AS Max_Seating, AVG(Seating) AS Avg_Seating FROM track;
SELECT Name, Location, Year_Opened  FROM track  WHERE Seating > (SELECT AVG(Seating) FROM track);
SELECT t.Name, t.Location, t.Year_Opened FROM track t WHERE t.Seating > (SELECT AVG(Seating) FROM track);
SELECT DISTINCT Location FROM track;
SELECT DISTINCT Location FROM track;
SELECT COUNT(*) AS Total_Races FROM race;
SELECT COUNT(*) AS NumberOfRaces FROM race;
SELECT DISTINCT Class FROM race;
SELECT DISTINCT Class FROM race;
SELECT Name, Class, Date FROM race;
SELECT Name, Class, Date FROM race;
SELECT Class, COUNT(*) AS Number_of_Races FROM race GROUP BY Class;
SELECT Class, COUNT(*) AS Race_Count FROM race GROUP BY Class;
SELECT Class, COUNT(*) AS Race_Count FROM race GROUP BY Class ORDER BY Race_Count DESC LIMIT 1;
SELECT Class FROM race GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Class FROM race GROUP BY Class HAVING COUNT(Race_ID) >= 2;
SELECT Class FROM race GROUP BY Class HAVING COUNT(Race_ID) >= 2;
SELECT t.Name  FROM track t  LEFT JOIN race r ON t.Track_ID = r.Track_ID AND r.Class = 'GT'  WHERE r.Race_ID IS NULL;
SELECT t.Name FROM track t LEFT JOIN race r ON t.Track_ID = r.Track_ID AND r.Class = 'GT' WHERE r.Race_ID IS NULL;
SELECT t.Name  FROM track t  LEFT JOIN race r ON t.Track_ID = r.Track_ID  WHERE r.Race_ID IS NULL;
SELECT t.Name FROM track t LEFT JOIN race r ON t.Track_ID = r.Track_ID WHERE r.Race_ID IS NULL;
SELECT DISTINCT r.Date FROM race r JOIN track t1 ON r.Track_ID = t1.Track_ID JOIN track t2 ON r.Track_ID = t2.Track_ID WHERE t1.Seating >= 5000 AND t2.Seating <= 4000;
SELECT Year_Opened FROM track WHERE Seating BETWEEN 4000 AND 5000;
SELECT t.Name AS Track_Name, COUNT(r.Race_ID) AS Number_of_Races FROM track t LEFT JOIN race r ON t.Track_ID = r.Track_ID GROUP BY t.Name;
SELECT t.Name AS Track_Name, COUNT(r.Race_ID) AS Number_of_Races FROM track t LEFT JOIN race r ON t.Track_ID = r.Track_ID GROUP BY t.Name;
SELECT t.Name FROM track t JOIN race r ON t.Track_ID = r.Track_ID GROUP BY t.Name ORDER BY COUNT(r.Race_ID) DESC LIMIT 1;
SELECT t.Name FROM track t JOIN race r ON t.Track_ID = r.Track_ID GROUP BY t.Track_ID, t.Name ORDER BY COUNT(r.Race_ID) DESC LIMIT 1;
SELECT r.Name AS Race_Name, r.Date, t.Name AS Track_Name FROM race r JOIN track t ON r.Track_ID = t.Track_ID;
SELECT r.Name AS Race_Name, r.Date, t.Name AS Track_Name FROM race r JOIN track t ON r.Track_ID = t.Track_ID;
SELECT t.Name, t.Location FROM track t JOIN race r ON t.Track_ID = r.Track_ID GROUP BY t.Track_ID HAVING COUNT(r.Race_ID) = 1;
SELECT t.Name, t.Location FROM track t JOIN race r ON t.Track_ID = r.Track_ID GROUP BY t.Track_ID, t.Name, t.Location HAVING COUNT(r.Race_ID) = 1;
SELECT t.Location FROM track t WHERE t.Seating > 90000 OR t.Seating < 70000 GROUP BY t.Location HAVING COUNT(CASE WHEN t.Seating > 90000 THEN 1 END) > 0    AND COUNT(CASE WHEN t.Seating < 70000 THEN 1 END) > 0;
SELECT Location FROM track WHERE Track_ID IN (     SELECT Track_ID     FROM track     WHERE Seating > 90000 ) AND Track_ID IN (     SELECT Track_ID     FROM track     WHERE Seating < 70000 ) GROUP BY Location;
SELECT COUNT(*) AS Black_Membership_Count FROM member WHERE Membership_card = 'black';
SELECT Address, COUNT(Member_ID) AS Number_of_Members FROM member GROUP BY Address;
SELECT Name  FROM member  WHERE Address IN ('Harford', 'Waterbury');
SELECT Member_ID, Name  FROM member  WHERE Age < 30 OR Membership_card = 'black';
SELECT Time_of_purchase, Age, Address  FROM member  ORDER BY Time_of_purchase;
SELECT Membership_card FROM member GROUP BY Membership_card HAVING COUNT(Member_ID) > 5;
SELECT DISTINCT m1.Address FROM member m1 JOIN member m2 ON m1.Address = m2.Address WHERE m1.Age < 30 AND m2.Age > 40;
SELECT DISTINCT m1.Membership_card FROM member m1 JOIN member m2 ON m1.Membership_card = m2.Membership_card WHERE m1.Address = 'Hartford' AND m2.Address = 'Waterbury';
SELECT COUNT(*)  FROM member  WHERE Address <> 'Hartford';
SELECT DISTINCT Address  FROM shop  WHERE Shop_ID NOT IN (     SELECT DISTINCT s.Shop_ID      FROM shop s      JOIN member m ON s.Address = m.Address      WHERE m.Membership_card = 'black' );
SELECT Address FROM shop ORDER BY Open_Year;
SELECT AVG(Score) AS Average_Score, AVG(Num_of_staff) AS Average_Staff_Number FROM shop;
SELECT Shop_ID, Address  FROM shop  WHERE Score < (SELECT AVG(Score) FROM shop);
SELECT Address, Num_of_staff  FROM shop  WHERE Shop_ID NOT IN (SELECT Shop_ID FROM happy_hour);
SELECT s.Shop_ID, s.Address FROM shop s JOIN happy_hour hh ON s.Shop_ID = hh.Shop_ID WHERE hh.Month = 'May';
SELECT Shop_ID, COUNT(HH_ID) AS Number_of_Happy_Hours FROM happy_hour GROUP BY Shop_ID ORDER BY Number_of_Happy_Hours DESC LIMIT 1;
SELECT Month, COUNT(*) AS Happy_Hour_Count FROM happy_hour GROUP BY Month ORDER BY Happy_Hour_Count DESC LIMIT 1;
SELECT Month FROM happy_hour GROUP BY Month HAVING COUNT(HH_ID) > 2;
SELECT COUNT(*) AS AlbumCount FROM Album;
SELECT COUNT(*) AS NumberOfAlbums FROM Album;
SELECT Name FROM Genre;
SELECT DISTINCT Name FROM Genre;
SELECT * FROM Customer WHERE State = 'NY';
SELECT * FROM Customer WHERE State = 'NY';
SELECT FirstName, LastName  FROM Employee  WHERE City = 'Calgary';
SELECT FirstName || ' ' || LastName AS FullName FROM Employee WHERE City = 'Calgary';
SELECT DISTINCT BillingCountry FROM Invoice;
SELECT DISTINCT BillingCountry FROM Invoice;
SELECT Name FROM Artist WHERE Name LIKE '%a%';
SELECT Name FROM Artist WHERE Name LIKE '%a%';
SELECT Album.Title  FROM Album  JOIN Artist ON Album.ArtistId = Artist.ArtistId  WHERE Artist.Name = 'AC/DC';
SELECT Album.Title  FROM Album  JOIN Artist ON Album.ArtistId = Artist.ArtistId  WHERE Artist.Name = 'AC/DC';
SELECT COUNT(*)  FROM Album  WHERE ArtistId = (SELECT ArtistId FROM Artist WHERE Name = 'Metallica');
SELECT COUNT(*) AS NumberOfAlbums FROM Album WHERE ArtistId = (SELECT ArtistId FROM Artist WHERE Name = 'Metallica');
SELECT a.Name  FROM Album al  JOIN Artist a ON al.ArtistId = a.ArtistId  WHERE al.Title = 'Balls to the Wall';
SELECT Artist.Name  FROM Artist  JOIN Album ON Artist.ArtistId = Album.ArtistId  WHERE Album.Title = 'Balls to the Wall';
SELECT a.Name, COUNT(al.AlbumId) AS AlbumCount FROM Artist a JOIN Album al ON a.ArtistId = al.ArtistId GROUP BY a.ArtistId ORDER BY AlbumCount DESC LIMIT 1;
SELECT a.Name FROM Artist a JOIN Album al ON a.ArtistId = al.ArtistId GROUP BY a.ArtistId, a.Name ORDER BY COUNT(al.AlbumId) DESC LIMIT 1;
SELECT Name  FROM Track  WHERE Name LIKE '%you%';
SELECT Name  FROM Track  WHERE Name LIKE '%you%';
SELECT AVG(UnitPrice) AS AverageUnitPrice FROM Track;
SELECT AVG(UnitPrice) AS AverageUnitPrice FROM Track;
SELECT MAX(Milliseconds) AS LongestTrackDuration, MIN(Milliseconds) AS ShortestTrackDuration FROM Track;
SELECT MAX(Milliseconds) AS MaxDuration, MIN(Milliseconds) AS MinDuration FROM Track;
SELECT a.Title AS AlbumName, a.AlbumId, COUNT(t.TrackId) AS NumberOfTracks FROM Album a LEFT JOIN Track t ON a.AlbumId = t.AlbumId GROUP BY a.AlbumId, a.Title;
SELECT a.AlbumId, a.Title, COUNT(t.TrackId) AS TrackCount FROM Album a LEFT JOIN Track t ON a.AlbumId = t.AlbumId GROUP BY a.AlbumId, a.Title;
SELECT g.Name FROM Genre g JOIN Track t ON g.GenreId = t.GenreId GROUP BY g.Name ORDER BY COUNT(t.TrackId) DESC LIMIT 1;
SELECT g.Name FROM Genre g JOIN Track t ON g.GenreId = t.GenreId GROUP BY g.Name ORDER BY COUNT(t.TrackId) DESC LIMIT 1;
SELECT mt.Name, COUNT(t.TrackId) AS TrackCount FROM MediaType mt LEFT JOIN Track t ON mt.MediaTypeId = t.MediaTypeId GROUP BY mt.Name ORDER BY TrackCount ASC LIMIT 1;
SELECT mt.Name FROM MediaType mt JOIN Track t ON mt.MediaTypeId = t.MediaTypeId GROUP BY mt.MediaTypeId, mt.Name ORDER BY COUNT(t.TrackId) ASC LIMIT 1;
SELECT DISTINCT a.AlbumId, a.Title FROM Album a JOIN Track t ON a.AlbumId = t.AlbumId WHERE t.UnitPrice > 1;
SELECT DISTINCT a.AlbumId, a.Title FROM Album a JOIN Track t ON a.AlbumId = t.AlbumId WHERE t.UnitPrice > 1;
SELECT COUNT(*)  FROM Track  WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock');
SELECT COUNT(*)  FROM Track  WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock');
SELECT AVG(t.UnitPrice) AS AverageUnitPrice FROM Track t JOIN Genre g ON t.GenreId = g.GenreId WHERE g.Name = 'Jazz';
SELECT AVG(t.UnitPrice) AS AverageJazzTrackPrice FROM Track t JOIN Genre g ON t.GenreId = g.GenreId WHERE g.Name = 'Jazz';
SELECT FirstName, LastName  FROM Customer  WHERE Email = 'luisg@embraer.com.br';
SELECT FirstName || ' ' || LastName AS FullName FROM Customer WHERE Email = 'luisg@embraer.com.br';
SELECT COUNT(*)  FROM Customer  WHERE Email LIKE '%gmail.com%';
SELECT COUNT(*)  FROM Customer  WHERE Email LIKE '%gmail.com%';
SELECT e.FirstName, e.LastName FROM Customer c JOIN Employee e ON c.SupportRepId = e.EmployeeId WHERE c.FirstName = 'Leonie';
SELECT e.FirstName || ' ' || e.LastName AS FullName FROM Employee e JOIN Customer c ON e.EmployeeId = c.SupportRepId WHERE c.FirstName = 'Leonie';
SELECT e.City  FROM Employee e  JOIN Customer c ON e.EmployeeId = c.SupportRepId  WHERE c.PostalCode = '70174';
SELECT DISTINCT e.City FROM Employee e JOIN Customer c ON e.EmployeeId = c.SupportRepId WHERE c.PostalCode = '70174';
SELECT COUNT(DISTINCT City) AS DistinctCityCount FROM Employee;
SELECT COUNT(DISTINCT City) AS NumberOfDifferentCities FROM Employee;
SELECT Invoice.InvoiceDate FROM Invoice JOIN Customer ON Invoice.CustomerId = Customer.CustomerId WHERE Customer.FirstName = 'Astrid' AND Customer.LastName = 'Gruber';
SELECT InvoiceDate  FROM Invoice  WHERE CustomerId IN (     SELECT CustomerId      FROM Customer      WHERE FirstName = 'Astrid' AND LastName = 'Gruber' );
SELECT DISTINCT c.LastName FROM Customer c LEFT JOIN Invoice i ON c.CustomerId = i.CustomerId GROUP BY c.CustomerId, c.LastName HAVING SUM(i.Total) <= 20 OR SUM(i.Total) IS NULL;
SELECT DISTINCT c.LastName FROM Customer c LEFT JOIN Invoice i ON c.CustomerId = i.CustomerId GROUP BY c.CustomerId HAVING SUM(i.Total) <= 20;
SELECT DISTINCT c.FirstName FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId WHERE c.Country = 'Brazil';
SELECT DISTINCT c.FirstName FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId WHERE c.Country = 'Brazil';
SELECT DISTINCT c.Address, c.City, c.State, c.Country, c.PostalCode FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId WHERE c.Country = 'Germany';
SELECT DISTINCT c.Address, c.City, c.State, c.Country, c.PostalCode FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId WHERE c.Country = 'Germany';
SELECT Phone FROM Employee;
SELECT Phone FROM Employee;
SELECT COUNT(*)  FROM Track  WHERE MediaTypeId = (SELECT MediaTypeId FROM MediaType WHERE Name = 'AAC audio file');
SELECT COUNT(*)  FROM Track  WHERE MediaTypeId = (SELECT MediaTypeId FROM MediaType WHERE Name = 'AAC audio file');
SELECT AVG(Track.Milliseconds) AS AverageDuration FROM Track JOIN Genre ON Track.GenreId = Genre.GenreId WHERE Genre.Name IN ('Latin', 'Pop');
SELECT AVG(Milliseconds) AS AverageMilliseconds FROM Track WHERE GenreId IN (     SELECT GenreId FROM Genre WHERE Name IN ('Latin', 'Pop') );
SELECT e.EmployeeId, e.FirstName FROM Employee e JOIN Customer c ON e.EmployeeId = c.SupportRepId GROUP BY e.EmployeeId, e.FirstName HAVING COUNT(c.CustomerId) >= 10;
SELECT e.FirstName, e.EmployeeId AS SupportRepId FROM Employee e JOIN Customer c ON e.EmployeeId = c.SupportRepId GROUP BY e.FirstName, e.EmployeeId HAVING COUNT(c.CustomerId) >= 10;
SELECT e.LastName FROM Employee e JOIN Customer c ON e.EmployeeId = c.SupportRepId GROUP BY e.LastName HAVING COUNT(c.CustomerId) <= 20;
SELECT e.LastName FROM Employee e JOIN Customer c ON e.EmployeeId = c.SupportRepId GROUP BY e.EmployeeId, e.LastName HAVING COUNT(c.CustomerId) <= 20;
SELECT Title FROM Album ORDER BY Title;
SELECT Title FROM Album ORDER BY Title;
SELECT a.ArtistId, a.Name FROM Artist a JOIN Album al ON a.ArtistId = al.ArtistId GROUP BY a.ArtistId, a.Name HAVING COUNT(al.AlbumId) >= 3 ORDER BY a.Name;
SELECT a.ArtistId, a.Name FROM Artist a JOIN Album al ON a.ArtistId = al.ArtistId GROUP BY a.ArtistId, a.Name HAVING COUNT(al.AlbumId) >= 3 ORDER BY a.Name;
SELECT Name  FROM Artist  WHERE ArtistId NOT IN (SELECT DISTINCT ArtistId FROM Album);
SELECT a.Name FROM Artist a LEFT JOIN Album al ON a.ArtistId = al.ArtistId WHERE al.AlbumId IS NULL;
SELECT AVG(t.UnitPrice) AS AverageUnitPrice FROM Track t JOIN Genre g ON t.GenreId = g.GenreId WHERE g.Name = 'Rock';
SELECT AVG(t.UnitPrice) AS AverageUnitPrice FROM Track t JOIN Genre g ON t.GenreId = g.GenreId WHERE g.Name = 'Rock';
SELECT      MAX(Milliseconds) AS LongestPopTrack,     MIN(Milliseconds) AS ShortestPopTrack FROM      Track WHERE      GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Pop');
SELECT MAX(Milliseconds) AS MaxLength, MIN(Milliseconds) AS MinLength FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Pop');
SELECT BirthDate FROM Employee WHERE City = 'Edmonton';
SELECT BirthDate  FROM Employee  WHERE City = 'Edmonton';
SELECT DISTINCT UnitPrice FROM Track;
SELECT DISTINCT UnitPrice FROM Track;
SELECT COUNT(*) AS ArtistWithoutAlbum FROM Artist WHERE ArtistId NOT IN (SELECT DISTINCT ArtistId FROM Album);
SELECT COUNT(*) AS NumberOfArtists FROM Artist WHERE ArtistId NOT IN (SELECT DISTINCT ArtistId FROM Album);
SELECT DISTINCT a.Title FROM Album a JOIN Track t ON a.AlbumId = t.AlbumId JOIN Genre g ON t.GenreId = g.GenreId WHERE g.Name IN ('Reggae', 'Rock') GROUP BY a.AlbumId, a.Title HAVING COUNT(DISTINCT g.Name) = 2;
SELECT DISTINCT a.Title FROM Album a JOIN Track t ON a.AlbumId = t.AlbumId JOIN Genre g ON t.GenreId = g.GenreId WHERE g.Name IN ('Reggae', 'Rock') GROUP BY a.AlbumId, a.Title HAVING COUNT(DISTINCT g.Name) = 2;
SELECT Customer_Phone FROM Available_Policies;
SELECT Customer_Phone FROM Available_Policies;
SELECT DISTINCT ap.Customer_Phone FROM Available_Policies ap JOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID WHERE ap.policy_type_code = 'Life Insurance';
SELECT DISTINCT ap.Customer_Phone FROM Available_Policies ap JOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID JOIN Customers c ON cp.Customer_ID = c.Customer_ID WHERE ap.policy_type_code = 'Life Insurance';
SELECT policy_type_code, COUNT(*) AS policy_count FROM Available_Policies JOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID GROUP BY policy_type_code ORDER BY policy_count DESC LIMIT 1;
SELECT policy_type_code, COUNT(*) AS frequency FROM Available_Policies GROUP BY policy_type_code ORDER BY frequency DESC LIMIT 1;
SELECT DISTINCT ap.Customer_Phone FROM Available_Policies ap JOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID WHERE ap.policy_type_code = (     SELECT policy_type_code     FROM Customers_Policies cp2     JOIN Available_Policies ap2 ON cp2.Policy_ID = ap2.Policy_ID     GROUP BY ap2.policy_type_code     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT DISTINCT ap.Customer_Phone FROM Available_Policies ap JOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID WHERE ap.policy_type_code = (     SELECT policy_type_code     FROM Available_Policies     GROUP BY policy_type_code     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT ap.policy_type_code FROM Available_Policies ap JOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID GROUP BY ap.policy_type_code HAVING COUNT(DISTINCT cp.Customer_ID) > 4;
SELECT policy_type_code FROM Customers_Policies GROUP BY Policy_ID HAVING COUNT(DISTINCT Customer_ID) > 4;
SELECT      SUM(Settlement_Amount) AS Total_Settlement_Amount,      AVG(Settlement_Amount) AS Average_Settlement_Amount  FROM      Settlements;
SELECT SUM(Settlement_Amount) AS Total_Settlement_Amount, AVG(Settlement_Amount) AS Average_Settlement_Amount FROM Settlements;
SELECT S.Service_name FROM Services S JOIN First_Notification_of_Loss FNOL ON S.Service_ID = FNOL.Service_ID GROUP BY S.Service_name HAVING COUNT(FNOL.FNOL_ID) > 2;
SELECT S.Service_name FROM First_Notification_of_Loss FNOL JOIN Services S ON FNOL.Service_ID = S.Service_ID GROUP BY S.Service_name HAVING COUNT(FNOL.FNOL_ID) > 2;
SELECT c.Effective_Date FROM Claims c JOIN Settlements s ON c.Claim_ID = s.Claim_ID GROUP BY c.Claim_ID ORDER BY SUM(s.Settlement_Amount) DESC LIMIT 1;
SELECT c.Effective_Date FROM Claims c JOIN Settlements s ON c.Claim_ID = s.Claim_ID GROUP BY c.Claim_ID, c.Effective_Date ORDER BY SUM(s.Settlement_Amount) DESC LIMIT 1;
SELECT COUNT(*) AS Policy_Count FROM Customers_Policies cp JOIN Customers c ON cp.Customer_ID = c.Customer_ID WHERE c.Customer_name = 'Dayana Robel';
SELECT COUNT(*) AS Total_Policies FROM Customers_Policies cp JOIN Customers c ON cp.Customer_ID = c.Customer_ID WHERE c.Customer_name = 'Dayana Robel';
SELECT c.Customer_name FROM Customers c JOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID GROUP BY c.Customer_ID, c.Customer_name ORDER BY COUNT(cp.Policy_ID) DESC LIMIT 1;
SELECT c.Customer_name FROM Customers c JOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID GROUP BY c.Customer_ID, c.Customer_name ORDER BY COUNT(cp.Policy_ID) DESC LIMIT 1;
SELECT DISTINCT ap.policy_type_code FROM Customers c JOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID JOIN Available_Policies ap ON cp.Policy_ID = ap.Policy_ID WHERE c.Customer_name = 'Dayana Robel';
SELECT DISTINCT ap.policy_type_code FROM Customers c JOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID JOIN Available_Policies ap ON cp.Policy_ID = ap.Policy_ID WHERE c.Customer_name = 'Dayana Robel';
SELECT ap.policy_type_code FROM Customers_Policies cp JOIN Available_Policies ap ON cp.Policy_ID = ap.Policy_ID WHERE cp.Customer_ID = (     SELECT Customer_ID     FROM Customers_Policies     GROUP BY Customer_ID     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT DISTINCT ap.policy_type_code FROM Customers_Policies cp JOIN Available_Policies ap ON cp.Policy_ID = ap.Policy_ID WHERE cp.Customer_ID = (     SELECT Customer_ID     FROM Customers_Policies     GROUP BY Customer_ID     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT Service_name FROM Services ORDER BY Service_name;
SELECT Service_name FROM Services ORDER BY Service_name;
SELECT COUNT(*) AS Number_of_Services FROM Services;
SELECT COUNT(*) AS Total_Available_Services FROM Services;
SELECT Customer_name  FROM Customers  WHERE Customer_ID NOT IN (SELECT Customer_ID FROM First_Notification_of_Loss);
SELECT Customer_name  FROM Customers  WHERE Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM First_Notification_of_Loss);
SELECT DISTINCT c.Customer_name FROM Customers c JOIN First_Notification_of_Loss fnol ON c.Customer_ID = fnol.Customer_ID JOIN Services s ON fnol.Service_ID = s.Service_ID WHERE s.Service_name IN ('Close a policy', 'Upgrade a policy');
SELECT DISTINCT c.Customer_name FROM Customers c JOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID JOIN Available_Policies ap ON cp.Policy_ID = ap.Policy_ID JOIN First_Notification_of_Loss fnol ON ap.Policy_ID = fnol.Policy_ID JOIN Services s ON fnol.Service_ID = s.Service_ID WHERE s.Service_name IN ('Close a policy', 'Upgrade a policy');
SELECT DISTINCT c.Customer_name FROM Customers c JOIN First_Notification_of_Loss fnol ON c.Customer_ID = fnol.Customer_ID JOIN Services s ON fnol.Service_ID = s.Service_ID WHERE s.Service_name IN ('Close a policy', 'New policy application') GROUP BY c.Customer_ID HAVING COUNT(DISTINCT s.Service_name) = 2;
SELECT c.Customer_name FROM Customers c JOIN First_Notification_of_Loss fnol ON c.Customer_ID = fnol.Customer_ID JOIN Services s ON fnol.Service_ID = s.Service_ID WHERE s.Service_name IN ('Close a policy', 'Upgrade a policy') GROUP BY c.Customer_ID, c.Customer_name HAVING COUNT(DISTINCT s.Service_name) = 2;
SELECT Customer_ID FROM Customers WHERE Customer_name LIKE '%Diana%';
SELECT Customer_ID  FROM Customers  WHERE Customer_name LIKE '%Diana%';
SELECT MAX(Settlement_Amount) AS Max_Settlement, MIN(Settlement_Amount) AS Min_Settlement FROM Settlements;
SELECT MAX(Settlement_Amount) AS Max_Settlement, MIN(Settlement_Amount) AS Min_Settlement FROM Settlements;
SELECT * FROM Customers ORDER BY Customer_ID ASC;
SELECT Customer_ID FROM Customers ORDER BY Customer_ID;
SELECT cp.Date_Opened, cp.Date_Closed FROM Customers c JOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID WHERE c.Customer_name LIKE '%Diana%';
SELECT cp.Date_Opened, cp.Date_Closed FROM Customers c JOIN Customers_Policies cp ON c.Customer_ID = cp.Customer_ID WHERE c.Customer_name LIKE '%Diana%';
SELECT COUNT(DISTINCT name) AS enzyme_count FROM enzyme;
SELECT COUNT(*) FROM enzyme;
SELECT name FROM enzyme ORDER BY name DESC;
SELECT name FROM enzyme ORDER BY name DESC;
SELECT enzyme.name, enzyme.Location  FROM enzyme;
SELECT name, Location FROM enzyme;
SELECT MAX(OMIM) AS max_omim_value FROM enzyme;
SELECT MAX(OMIM) FROM enzyme;
SELECT e.Product, e.Chromosome, e.Porphyria FROM enzyme e WHERE e.Location = 'Cytosol';
SELECT Product, Chromosome, Porphyria  FROM enzyme  WHERE Location = 'Cytosol';
SELECT name  FROM enzyme  WHERE Product != 'Heme' OR Product IS NULL;
SELECT name FROM enzyme WHERE Product != 'Heme';
SELECT name, Trade_Name  FROM medicine  WHERE FDA_approved = 'Yes';
SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'Yes';
SELECT e.name  FROM enzyme e JOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id JOIN medicine m ON mei.medicine_id = m.id WHERE m.name = 'Amisulpride' AND mei.interaction_type = 'inhibitor';
SELECT e.name  FROM enzyme e JOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id JOIN medicine m ON mei.medicine_id = m.id WHERE m.name = 'Amisulpride' AND mei.interaction_type = 'inhibitor';
SELECT m.id, m.name FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id GROUP BY m.id, m.name HAVING COUNT(mei.enzyme_id) >= 2;
SELECT m.id, m.name FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id GROUP BY m.id, m.name HAVING COUNT(DISTINCT mei.enzyme_id) > 1;
SELECT m.id, m.name, m.FDA_approved FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id GROUP BY m.id, m.name, m.FDA_approved ORDER BY COUNT(mei.enzyme_id) DESC;
SELECT m.id, m.name, m.FDA_approved FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id GROUP BY m.id, m.name, m.FDA_approved ORDER BY COUNT(mei.enzyme_id) DESC;
SELECT e.id, e.name FROM enzyme e JOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id WHERE mei.interaction_type = 'activator' GROUP BY e.id, e.name ORDER BY COUNT(mei.medicine_id) DESC LIMIT 1;
SELECT e.id, e.name FROM enzyme e JOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id WHERE mei.interaction_type = 'activator' GROUP BY e.id, e.name ORDER BY COUNT(mei.medicine_id) DESC LIMIT 1;
SELECT mei.interaction_type  FROM medicine_enzyme_interaction mei JOIN enzyme e ON mei.enzyme_id = e.id JOIN medicine m ON mei.medicine_id = m.id WHERE e.name = 'ALA synthase' AND m.name = 'Aripiprazole';
SELECT mei.interaction_type  FROM medicine_enzyme_interaction mei JOIN enzyme e ON mei.enzyme_id = e.id JOIN medicine m ON mei.medicine_id = m.id WHERE e.name = 'ALA synthase' AND m.name = 'Aripiprazole';
SELECT interaction_type, COUNT(*) AS interaction_count FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY interaction_count DESC LIMIT 1;
SELECT interaction_type, COUNT(*) AS interaction_count FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY interaction_count DESC;
SELECT COUNT(*) FROM medicine WHERE FDA_approved = 'No';
SELECT COUNT(*) AS not_approved_medicines FROM medicine WHERE FDA_approved = 'No';
SELECT COUNT(*)  FROM enzyme  WHERE id NOT IN (SELECT enzyme_id FROM medicine_enzyme_interaction);
SELECT COUNT(*)  FROM enzyme  WHERE id NOT IN (SELECT DISTINCT enzyme_id FROM medicine_enzyme_interaction);
SELECT m.id, m.Trade_Name FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id GROUP BY m.id, m.Trade_Name HAVING COUNT(mei.enzyme_id) >= 3;
SELECT m.id, m.Trade_Name FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id GROUP BY m.id, m.Trade_Name HAVING COUNT(mei.enzyme_id) >= 3;
SELECT DISTINCT e.name, e.Location, e.Product FROM enzyme e JOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id WHERE mei.interaction_type = 'inhibitor';
SELECT e.name, e.Location, e.Product FROM enzyme e JOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id WHERE mei.interaction_type = 'inhibitor';
SELECT m.name, m.Trade_Name FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id WHERE mei.interaction_type IN ('inhibitor', 'activator') GROUP BY m.id, m.name, m.Trade_Name HAVING COUNT(DISTINCT mei.interaction_type) = 2;
SELECT m.name, m.Trade_Name FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id WHERE mei.interaction_type IN ('inhibitor', 'activator');
SELECT m.name, m.Trade_Name FROM medicine m WHERE m.id NOT IN (     SELECT mei.medicine_id     FROM medicine_enzyme_interaction mei     JOIN enzyme e ON mei.enzyme_id = e.id     WHERE e.Product = 'Heme' );
SELECT m.name, m.Trade_Name FROM medicine m WHERE m.id NOT IN (     SELECT mei.medicine_id     FROM medicine_enzyme_interaction mei     JOIN enzyme e ON mei.enzyme_id = e.id     WHERE e.Product = 'Heme' );
SELECT COUNT(DISTINCT FDA_approved) AS distinct_fda_approval_statuses FROM medicine;
SELECT COUNT(DISTINCT FDA_approved) AS different_approval_statuses FROM medicine;
SELECT name FROM enzyme WHERE name LIKE '%ALA%';
SELECT name FROM enzyme WHERE name LIKE '%ALA%';
SELECT Trade_Name, COUNT(*) AS number_of_medicines FROM medicine GROUP BY Trade_Name;
SELECT Trade_Name, COUNT(*) AS medicine_count FROM medicine GROUP BY Trade_Name;
SELECT u.School, u.Nickname  FROM university u  ORDER BY u.Founded;
SELECT u.School, u.Nickname  FROM university u  ORDER BY u.Founded;
SELECT School, Location  FROM university  WHERE Affiliation = 'Public';
SELECT School, Location  FROM university  WHERE Affiliation = 'Public';
SELECT Founded  FROM university  WHERE Enrollment = (SELECT MAX(Enrollment) FROM university);
SELECT Founded  FROM university  ORDER BY Enrollment DESC  LIMIT 1;
SELECT MAX(Founded) AS Newest_Founded_Year FROM university WHERE Affiliation != 'Public';
SELECT Founded  FROM university  WHERE Affiliation != 'Public'  ORDER BY Founded DESC  LIMIT 1;
SELECT COUNT(DISTINCT School_ID) AS Number_of_Schools FROM basketball_match;
SELECT COUNT(DISTINCT School_ID) AS Number_of_Schools FROM basketball_match;
SELECT MAX(ACC_Percent) AS Highest_ACC_Percent FROM basketball_match;
SELECT MAX(ACC_Percent) AS Highest_ACC_Percent FROM basketball_match;
SELECT u.Primary_conference FROM university u JOIN basketball_match b ON u.School_ID = b.School_ID ORDER BY b.ACC_Percent ASC LIMIT 1;
SELECT u.Primary_conference FROM university u JOIN basketball_match b ON u.School_ID = b.School_ID ORDER BY b.ACC_Percent ASC LIMIT 1;
SELECT bm.Team_Name, bm.ACC_Regular_Season FROM basketball_match bm JOIN university u ON bm.School_ID = u.School_ID ORDER BY u.Founded ASC LIMIT 1;
SELECT bm.Team_Name, bm.ACC_Regular_Season FROM basketball_match bm JOIN university u ON bm.School_ID = u.School_ID WHERE u.Founded = (SELECT MIN(Founded) FROM university)
SELECT u.Location, b.All_Games FROM basketball_match b JOIN university u ON b.School_ID = u.School_ID WHERE b.Team_Name = 'Clemson';
SELECT bm.All_Games, u.Location  FROM basketball_match bm  JOIN university u ON bm.School_ID = u.School_ID  WHERE u.School = 'Clemson';
SELECT AVG(Enrollment) AS Average_Enrollment FROM university WHERE Founded < 1850;
SELECT AVG(Enrollment) AS Average_Enrollment FROM university WHERE Founded < 1850;
SELECT Enrollment, Primary_conference  FROM university  ORDER BY Founded ASC  LIMIT 1;
SELECT Enrollment, Primary_conference  FROM university  ORDER BY Founded ASC  LIMIT 1;
SELECT SUM(Enrollment) AS Total_Enrollment, MIN(Enrollment) AS Minimum_Enrollment FROM university;
SELECT SUM(Enrollment) AS Total_Enrollment, MIN(Enrollment) AS Minimum_Enrollment FROM university;
SELECT Affiliation, SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Affiliation;
SELECT Affiliation, SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Affiliation;
SELECT COUNT(*)  FROM university  WHERE School_ID NOT IN (SELECT DISTINCT School_ID FROM basketball_match);
SELECT COUNT(*)  FROM university  WHERE School_ID NOT IN (SELECT DISTINCT School_ID FROM basketball_match);
SELECT u.School FROM university u WHERE u.Founded > 1850 OR u.Affiliation = 'Public';
SELECT u.School FROM university u WHERE u.Founded < 1850 OR u.Affiliation = 'Public';
SELECT COUNT(DISTINCT Affiliation) AS Different_Affiliation_Types FROM university;
SELECT COUNT(DISTINCT Affiliation) AS Different_Affiliation_Types FROM university;
SELECT COUNT(DISTINCT Location)  FROM university  WHERE Location LIKE '%NY%';
SELECT COUNT(*)  FROM university  WHERE Location LIKE '%NY%';
SELECT bm.Team_Name FROM basketball_match bm JOIN university u ON bm.School_ID = u.School_ID WHERE u.Enrollment < (SELECT AVG(Enrollment) FROM university);
SELECT bm.Team_Name FROM basketball_match bm JOIN university u ON bm.School_ID = u.School_ID WHERE u.Enrollment < (SELECT AVG(Enrollment) FROM university);
SELECT Affiliation, COUNT(*) AS University_Count FROM university WHERE Enrollment > 20000 GROUP BY Affiliation;
SELECT Affiliation, COUNT(*) AS School_Count FROM university WHERE Enrollment > 20000 GROUP BY Affiliation;
SELECT Affiliation, SUM(Enrollment) AS Total_Enrollment FROM university WHERE Founded > 1850 GROUP BY Affiliation;
SELECT Affiliation, SUM(Enrollment) AS Total_Enrollment FROM university WHERE Founded > 1850 GROUP BY Affiliation;
SELECT MAX(Enrollment) AS Max_Enrollment FROM university;
SELECT MAX(Enrollment) AS Max_Enrollment FROM university;
SELECT * FROM basketball_match;
SELECT * FROM basketball_match;
SELECT Team_Name  FROM basketball_match  ORDER BY All_Home DESC;
SELECT Team_Name  FROM basketball_match  ORDER BY All_Home DESC;
SELECT Model_name  FROM chip_model  WHERE Launch_year BETWEEN 2002 AND 2004;
SELECT Model_name, RAM_MiB  FROM chip_model  ORDER BY RAM_MiB ASC  LIMIT 1;
SELECT cm.Model_name, sm.Graphics_mode FROM phone p JOIN chip_model cm ON p.chip_model = cm.Model_name JOIN screen_mode sm ON p.screen_mode = sm.Graphics_mode WHERE p.Hardware_Model_name = 'LG-P760';
SELECT COUNT(*)  FROM phone  WHERE Company_name = 'Nokia Corporation';
SELECT MAX(c.RAM_MiB) AS Max_RAM, MIN(c.RAM_MiB) AS Min_RAM FROM phone p JOIN chip_model c ON p.chip_model = c.Model_name WHERE p.Company_name = 'Nokia Corporation';
SELECT AVG(c.ROM_MiB) AS average_ROM_size FROM phone p JOIN chip_model c ON p.chip_model = c.Model_name WHERE p.Company_name = 'Nokia Corporation';
SELECT phone.Hardware_Model_name, phone.Company_name FROM phone JOIN chip_model ON phone.chip_model = chip_model.Model_name WHERE chip_model.Launch_year = 2002 OR chip_model.RAM_MiB > 32;
SELECT Hardware_Model_name, Company_name  FROM phone  WHERE Accreditation_type LIKE '%Full%';
SELECT sm.Char_cells, sm.Pixels, sm.Hardware_colours FROM phone p JOIN screen_mode sm ON p.screen_mode = sm.Type WHERE p.Hardware_Model_name = 'LG-P760';
SELECT Hardware_Model_name, Company_name  FROM phone  WHERE screen_mode = 'Graphics';
SELECT Company_name, COUNT(Hardware_Model_name) AS Number_of_Models FROM phone GROUP BY Company_name ORDER BY Number_of_Models ASC LIMIT 1;
SELECT Company_name FROM phone GROUP BY Company_name HAVING COUNT(Hardware_Model_name) > 1;
SELECT MAX(used_kb) AS Max_Used_KB, MIN(used_kb) AS Min_Used_KB, AVG(used_kb) AS Avg_Used_KB FROM screen_mode;
SELECT p.Hardware_Model_name  FROM phone p  JOIN chip_model c ON p.chip_model = c.Model_name  WHERE c.Launch_year = 2002  ORDER BY c.RAM_MiB DESC  LIMIT 1;
SELECT c.WiFi, s.Type  FROM phone p  JOIN chip_model c ON p.chip_model = c.Model_name  JOIN screen_mode s ON p.screen_mode = s.Graphics_mode  WHERE p.Hardware_Model_name = 'LG-P760';
SELECT Hardware_Model_name  FROM phone  WHERE screen_mode IN (SELECT Type FROM screen_mode WHERE Type = 'Text')     OR chip_model IN (SELECT Model_name FROM chip_model WHERE RAM_MiB > 32);
SELECT Hardware_Model_name  FROM phone  WHERE Company_name = 'Nokia Corporation' OR screen_mode IN (SELECT Type FROM screen_mode WHERE Type = 'Graphics');
SELECT Hardware_Model_name  FROM phone  WHERE Company_name = 'Nokia Corporation'  AND screen_mode <> 'Text';
SELECT phone.Hardware_Model_name, phone.Company_name FROM phone JOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode WHERE screen_mode.used_kb BETWEEN 10 AND 15;
SELECT Accreditation_type, COUNT(*) AS Number_of_Phones FROM phone GROUP BY Accreditation_type;
SELECT Accreditation_type, COUNT(*) AS Phone_Count FROM phone GROUP BY Accreditation_type;
SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING COUNT(*) > 3;
SELECT * FROM chip_model;
SELECT COUNT(*)  FROM chip_model  WHERE WiFi = 'No';
SELECT COUNT(*)  FROM chip_model  WHERE WiFi = 'No';
SELECT Model_name FROM chip_model ORDER BY Launch_year;
SELECT AVG(RAM_MiB) AS average_ram_mib FROM chip_model WHERE Model_name NOT IN (SELECT DISTINCT chip_model FROM phone);
SELECT cm.Model_name FROM chip_model cm WHERE cm.Model_name NOT IN (     SELECT p.chip_model     FROM phone p     WHERE p.Accreditation_type = 'full' );
SELECT DISTINCT sm.Pixels FROM screen_mode sm JOIN phone p1 ON sm.Type = p1.screen_mode JOIN phone p2 ON sm.Type = p2.screen_mode WHERE p1.Accreditation_type = 'Full' AND p2.Accreditation_type = 'Provisional';
SELECT COUNT(*) FROM country;
SELECT COUNT(*) FROM country;
SELECT Country_name, Capital FROM country;
SELECT Country_name, Capital FROM country;
SELECT Official_native_language  FROM country  WHERE Official_native_language LIKE '%English%';
SELECT Official_native_language  FROM country  WHERE Official_native_language LIKE '%English%';
SELECT DISTINCT Position FROM match_season;
SELECT DISTINCT Position FROM match_season;
SELECT * FROM player WHERE Team = 'UCLA';
SELECT Player FROM match_season WHERE College = 'UCLA';
SELECT DISTINCT Position  FROM match_season  WHERE College IN ('UCLA', 'Duke');
SELECT DISTINCT Position  FROM match_season  WHERE College IN ('UCLA', 'Duke');
SELECT Draft_Pick_Number, Draft_Class  FROM match_season  WHERE Position = 'defender';
SELECT Draft_Pick_Number, Draft_Class  FROM match_season  WHERE Position = 'Defender';
SELECT COUNT(DISTINCT Team) AS Distinct_Teams FROM match_season;
SELECT COUNT(DISTINCT Team) AS NumberOfDifferentTeams FROM match_season;
SELECT Player, Years_Played FROM player;
SELECT Player, Years_Played FROM player;
SELECT Name FROM team;
SELECT Name FROM team;
SELECT ms.Season, ms.Player, c.Country_name FROM match_season ms JOIN country c ON ms.Country = c.Country_id;
SELECT m.Player, m.Season, c.Country_name FROM match_season m JOIN country c ON m.Country = c.Country_id;
SELECT DISTINCT m.Player FROM match_season m JOIN country c ON m.Country = c.Country_id WHERE c.Country_name = 'Indonesia';
SELECT DISTINCT p.Player FROM player p JOIN match_season ms ON p.Player = ms.Player JOIN country c ON ms.Country = c.Country_id WHERE c.Country_name = 'Indonesia';
SELECT DISTINCT ms.Position FROM match_season ms JOIN country c ON ms.Country = c.Country_id WHERE c.Capital = 'Dublin';
SELECT DISTINCT ms.Position FROM match_season ms JOIN country c ON ms.Country = c.Country_id WHERE c.Capital = 'Dublin';
SELECT DISTINCT c.Official_native_language FROM country c JOIN match_season ms ON c.Country_id = ms.Country WHERE ms.College IN ('Maryland', 'Duke');
SELECT DISTINCT c.Official_native_language FROM country c JOIN match_season ms ON c.Country_id = ms.Country WHERE ms.College IN ('Maryland', 'Duke');
SELECT COUNT(DISTINCT c.Official_native_language)  FROM match_season ms JOIN country c ON ms.Country = c.Country_id WHERE ms.Position = 'Defender';
SELECT COUNT(DISTINCT c.Official_native_language) AS Different_Languages FROM match_season ms JOIN country c ON ms.Country = c.Country_id WHERE ms.Position = 'Defender';
SELECT ms.Season, ms.Player, t.Name AS Team_Name FROM match_season ms JOIN team t ON ms.Team = t.Team_id;
SELECT DISTINCT m.Player, m.Season, t.Name AS Team_Name FROM match_season m JOIN team t ON m.Team = t.Team_id;
SELECT Position  FROM match_season  WHERE Team = (SELECT Team_id FROM team WHERE Name = 'Ryley Goldner');
SELECT Position  FROM match_season  WHERE Team = 'Ryley Goldner';
SELECT COUNT(DISTINCT College)  FROM match_season  WHERE Team = (SELECT Team_id FROM team WHERE Name = 'Columbus Crew');
SELECT COUNT(DISTINCT College) AS Different_Colleges FROM match_season WHERE Team = 'Columbus Crew';
SELECT p.Player, p.Years_Played FROM player p JOIN team t ON p.Team = t.Team_id WHERE t.Name = 'Columbus Crew';
SELECT Player, Years_Played  FROM player  WHERE Team = 'Columbus Crew';
SELECT Position, COUNT(*) AS Number_of_Players FROM match_season GROUP BY Position;
SELECT Position, COUNT(*) AS Number_of_Players FROM match_season GROUP BY Position;
SELECT c.Country_name, COUNT(m.Player) AS Number_of_Players FROM country c JOIN match_season m ON c.Country_id = m.Country GROUP BY c.Country_name;
SELECT c.Country_name, COUNT(m.Player) AS Player_Count FROM country c JOIN match_season m ON c.Country_id = m.Country GROUP BY c.Country_name;
SELECT Player FROM match_season ORDER BY College ASC;
SELECT Player  FROM match_season  ORDER BY College ASC;
SELECT Position, COUNT(*) AS Position_Count FROM match_season GROUP BY Position ORDER BY Position_Count DESC LIMIT 1;
SELECT Position, COUNT(*) AS Position_Count FROM match_season GROUP BY Position ORDER BY Position_Count DESC LIMIT 1;
SELECT College, COUNT(*) AS College_Count FROM match_season GROUP BY College ORDER BY College_Count DESC LIMIT 3;
SELECT College, COUNT(*) AS Player_Count FROM match_season GROUP BY College ORDER BY Player_Count DESC LIMIT 3;
SELECT College FROM match_season GROUP BY College HAVING COUNT(Player) >= 2;
SELECT College FROM match_season GROUP BY College HAVING COUNT(Player) >= 2;
SELECT College FROM match_season GROUP BY College HAVING COUNT(Player) >= 2 ORDER BY College DESC;
SELECT College FROM match_season GROUP BY College HAVING COUNT(Player) >= 2 ORDER BY College DESC;
SELECT t.Name FROM team t LEFT JOIN match_season ms ON t.Name = ms.Team WHERE ms.Team IS NULL;
SELECT t.Name FROM team t LEFT JOIN match_season ms ON t.Name = ms.Team WHERE ms.Team IS NULL;
SELECT DISTINCT c.Country_name FROM country c JOIN match_season ms ON c.Country_id = ms.Country WHERE ms.Position IN ('forward', 'defender') GROUP BY c.Country_name HAVING COUNT(DISTINCT ms.Position) = 2;
SELECT DISTINCT c.Country_name FROM country c JOIN match_season ms ON c.Country_id = ms.Country WHERE ms.Position IN ('Forward', 'Defender');
SELECT College FROM match_season WHERE Position IN ('midfielder', 'defender') GROUP BY College HAVING COUNT(DISTINCT Position) = 2;
SELECT DISTINCT College FROM match_season WHERE Position IN ('Midfielder', 'Defender');
SELECT COUNT(*) AS NumberOfClimbers FROM climber;
SELECT COUNT(*) AS NumberOfClimbers FROM climber;
SELECT Name FROM climber ORDER BY Points DESC;
SELECT Name FROM climber ORDER BY Points DESC;
SELECT Name FROM climber WHERE Country <> 'Switzerland';
SELECT Name FROM climber WHERE Country <> 'Switzerland';
SELECT MAX(Points) AS Max_Points FROM climber WHERE Country = 'United Kingdom';
SELECT MAX(Points) AS Max_Points FROM climber WHERE Country = 'United Kingdom';
SELECT COUNT(DISTINCT Country) FROM climber;
SELECT COUNT(DISTINCT Country) AS NumberOfCountries FROM climber;
SELECT Name FROM mountain ORDER BY Name ASC;
SELECT Name FROM mountain ORDER BY Name;
SELECT DISTINCT Country FROM mountain WHERE Height > 5000;
SELECT DISTINCT Country FROM mountain WHERE Height > 5000;
SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1;
SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1;
SELECT DISTINCT Range  FROM mountain  ORDER BY Prominence DESC  LIMIT 3;
SELECT DISTINCT Range  FROM mountain  ORDER BY Prominence DESC  LIMIT 3;
SELECT climber.Name AS Climber_Name, mountain.Name AS Mountain_Name FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID;
SELECT climber.Name AS Climber_Name, mountain.Name AS Mountain_Name FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID;
SELECT climber.Name, mountain.Height FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID;
SELECT climber.Name AS Climber_Name, mountain.Height AS Mountain_Height FROM climber JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID;
SELECT m.Height  FROM mountain m  JOIN climber c ON m.Mountain_ID = c.Mountain_ID  WHERE c.Points = (SELECT MAX(Points) FROM climber);
SELECT m.Height FROM mountain m JOIN climber c ON m.Mountain_ID = c.Mountain_ID WHERE c.Points = (SELECT MAX(Points) FROM climber);
SELECT DISTINCT m.Name FROM mountain m JOIN climber c ON m.Mountain_ID = c.Mountain_ID WHERE c.Country = 'West Germany';
SELECT DISTINCT m.Name  FROM mountain m  JOIN climber c ON m.Mountain_ID = c.Mountain_ID  WHERE c.Country = 'West Germany';
SELECT c.Time  FROM climber c  JOIN mountain m ON c.Mountain_ID = m.Mountain_ID  WHERE m.Country = 'Uganda';
SELECT c.Time  FROM climber c  JOIN mountain m ON c.Mountain_ID = m.Mountain_ID  WHERE m.Country = 'Uganda';
SELECT Country, COUNT(Climber_ID) AS Number_of_Climbers FROM climber GROUP BY Country;
SELECT Country, COUNT(*) AS NumberOfClimbers FROM climber GROUP BY Country;
SELECT Country FROM mountain GROUP BY Country HAVING COUNT(Mountain_ID) > 1;
SELECT Country FROM mountain GROUP BY Country HAVING COUNT(Mountain_ID) > 1;
SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber);
SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber);
SELECT DISTINCT Country  FROM mountain  WHERE Height > 5600 OR Height < 5200;
SELECT DISTINCT m.Country FROM mountain m WHERE m.Height > 5600 INTERSECT SELECT DISTINCT m.Country FROM mountain m WHERE m.Height < 5200;
SELECT Range, COUNT(*) AS Mountain_Count FROM mountain GROUP BY Range ORDER BY Mountain_Count DESC LIMIT 1;
SELECT Range, COUNT(*) AS MountainCount FROM mountain GROUP BY Range ORDER BY MountainCount DESC LIMIT 1;
SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000;
SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000;
SELECT COUNT(*) FROM body_builder;
SELECT Total FROM body_builder ORDER BY Total ASC;
SELECT Snatch, Clean_Jerk  FROM body_builder  ORDER BY Snatch ASC;
SELECT AVG(Snatch) AS Average_Snatch_Score FROM body_builder;
SELECT Clean_Jerk  FROM body_builder  WHERE Total = (SELECT MAX(Total) FROM body_builder);
SELECT Birth_Date FROM people ORDER BY Height ASC;
SELECT p.Name  FROM people p  JOIN body_builder bb ON p.People_ID = bb.People_ID;
SELECT p.Name  FROM body_builder bb  JOIN people p ON bb.People_ID = p.People_ID  WHERE bb.Total > 300;
SELECT p.Name  FROM people p  JOIN body_builder bb ON p.People_ID = bb.People_ID  ORDER BY p.Weight DESC  LIMIT 1;
SELECT p.Birth_Date, p.Birth_Place FROM body_builder bb JOIN people p ON bb.People_ID = p.People_ID WHERE bb.Total = (SELECT MAX(Total) FROM body_builder);
SELECT p.Height  FROM body_builder bb  JOIN people p ON bb.People_ID = p.People_ID  WHERE bb.Total < 315;
SELECT AVG(bb.Total) AS Average_Total FROM body_builder bb JOIN people p ON bb.People_ID = p.People_ID WHERE p.Height > 200;
SELECT p.Name  FROM body_builder bb  JOIN people p ON bb.People_ID = p.People_ID  ORDER BY bb.Total DESC;
SELECT Birth_Place, COUNT(*) AS Number_of_People FROM people GROUP BY Birth_Place;
SELECT Birth_Place, COUNT(*) AS Count FROM people GROUP BY Birth_Place ORDER BY Count DESC LIMIT 1;
SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(People_ID) >= 2;
SELECT Height, Weight FROM people ORDER BY Height DESC;
SELECT * FROM body_builder JOIN people ON body_builder.People_ID = people.People_ID;
SELECT p.Name, p.Birth_Place FROM people p LEFT JOIN body_builder bb ON p.People_ID = bb.People_ID WHERE bb.People_ID IS NULL;
SELECT COUNT(DISTINCT Birth_Place) FROM people;
SELECT COUNT(*)  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM body_builder);
SELECT p.Weight FROM body_builder bb JOIN people p ON bb.People_ID = p.People_ID WHERE bb.Snatch > 140 OR p.Height > 200;
SELECT bb.Total FROM body_builder bb JOIN people p ON bb.People_ID = p.People_ID WHERE p.Birth_Date LIKE '%January%';
SELECT MIN(Snatch) AS Minimum_Snatch_Score FROM body_builder;
SELECT COUNT(*) AS Total_Elections FROM election;
SELECT Votes FROM election ORDER BY Votes DESC;
SELECT Date, Vote_Percent FROM election;
SELECT MIN(Vote_Percent) AS Min_Vote_Percent, MAX(Vote_Percent) AS Max_Vote_Percent FROM election;
SELECT r.Name, r.Party  FROM representative r;
SELECT Name  FROM representative  WHERE Party <> 'Republican';
SELECT r.Lifespan  FROM representative r  WHERE r.State IN ('New York', 'Indiana');
SELECT r.Name, e.Date FROM representative r JOIN election e ON r.Representative_ID = e.Representative_ID;
SELECT r.Name  FROM representative r  JOIN election e ON r.Representative_ID = e.Representative_ID  WHERE e.Votes > 10000;
SELECT r.Name  FROM representative r  JOIN election e ON r.Representative_ID = e.Representative_ID  ORDER BY e.Votes DESC;
SELECT r.Party  FROM representative r  JOIN election e ON r.Representative_ID = e.Representative_ID  ORDER BY e.Votes ASC  LIMIT 1;
SELECT r.Lifespan FROM representative r JOIN election e ON r.Representative_ID = e.Representative_ID ORDER BY e.Vote_Percent DESC;
SELECT AVG(Votes) AS Average_Votes FROM election JOIN representative ON election.Representative_ID = representative.Representative_ID WHERE representative.Party = 'Republican';
SELECT Party, COUNT(*) AS Number_of_Representatives FROM representative GROUP BY Party;
SELECT Party, COUNT(*) AS NumberOfRepresentatives FROM representative GROUP BY Party ORDER BY NumberOfRepresentatives DESC LIMIT 1;
SELECT Party FROM representative GROUP BY Party HAVING COUNT(Representative_ID) >= 3;
SELECT State FROM representative GROUP BY State HAVING COUNT(Representative_ID) >= 2;
SELECT r.Name  FROM representative r  WHERE r.Representative_ID NOT IN (SELECT e.Representative_ID FROM election e);
SELECT DISTINCT r1.Party FROM representative r1 JOIN representative r2 ON r1.Party = r2.Party WHERE r1.State = 'New York' AND r2.State = 'Pennsylvania';
SELECT COUNT(DISTINCT Party) AS Distinct_Parties FROM representative;
SELECT COUNT(*) AS total_bookings FROM Apartment_Bookings;
SELECT COUNT(*) AS total_bookings FROM Apartment_Bookings;
SELECT booking_start_date, booking_end_date  FROM Apartment_Bookings;
SELECT booking_start_date, booking_end_date  FROM Apartment_Bookings;
SELECT DISTINCT building_description FROM Apartment_Buildings;
SELECT DISTINCT building_description FROM Apartment_Buildings;
SELECT building_short_name  FROM Apartment_Buildings  WHERE building_manager = 'Emma';
SELECT building_short_name  FROM Apartment_Buildings  WHERE building_manager = 'Emma';
SELECT building_address, building_phone  FROM Apartment_Buildings  WHERE building_manager = 'Brenden';
SELECT building_address, building_phone  FROM Apartment_Buildings  WHERE building_manager = 'Brenden';
SELECT building_full_name  FROM Apartment_Buildings  WHERE building_full_name LIKE '%court%';
SELECT building_full_name  FROM Apartment_Buildings  WHERE building_full_name LIKE '%court%';
SELECT MIN(bathroom_count) AS min_bathrooms, MAX(bathroom_count) AS max_bathrooms FROM Apartments;
SELECT MIN(bathroom_count) AS min_bathroom_count, MAX(bathroom_count) AS max_bathroom_count FROM Apartments;
SELECT AVG(bedroom_count) AS average_bedrooms FROM Apartments;
SELECT AVG(bedroom_count) AS average_bedrooms FROM Apartments;
SELECT apt_number, room_count  FROM Apartments;
SELECT apt_number, room_count FROM Apartments;
SELECT AVG(room_count) AS average_rooms FROM Apartments WHERE apt_type_code = 'Studio';
SELECT AVG(room_count) AS average_room_count FROM Apartments WHERE apt_type_code = 'Studio';
SELECT apt_number  FROM Apartments  WHERE apt_type_code = 'Flat';
SELECT apt_number  FROM Apartments  WHERE apt_type_code = 'Flat';
SELECT guest_first_name, guest_last_name FROM Guests;
SELECT guest_first_name, guest_last_name FROM Guests;
SELECT date_of_birth  FROM Guests  WHERE gender_code = 'Male';
SELECT date_of_birth  FROM Guests  WHERE gender_code = 'Male';
SELECT a.apt_number, ab.booking_start_date, ab.booking_end_date FROM Apartments a JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id;
SELECT a.apt_number, ab.booking_start_date, ab.booking_end_date FROM Apartments a JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id;
SELECT ab.booking_start_date, ab.booking_end_date FROM Apartments a JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id WHERE a.apt_type_code = 'Duplex';
SELECT ab.booking_start_date, ab.booking_end_date FROM Apartments a JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id WHERE a.apt_type_code = 'Duplex';
SELECT ab.booking_start_date, ab.booking_end_date FROM Apartments a JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id WHERE a.bedroom_count > 2;
SELECT ab.booking_start_date, ab.booking_end_date FROM Apartments a JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id WHERE a.bedroom_count > 2;
SELECT ab.booking_status_code  FROM Apartments a  JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id  WHERE a.apt_number = 'Suite 634';
SELECT ab.booking_status_code  FROM Apartments a  JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id  WHERE a.apt_number = 'Suite 634';
SELECT DISTINCT a.apt_number FROM Apartments a JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id WHERE ab.booking_status_code = 'Confirmed';
SELECT a.apt_number FROM Apartments a JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id WHERE ab.booking_status_code = 'Confirmed';
SELECT AVG(room_count) AS average_room_count FROM Apartments JOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id WHERE Apartment_Bookings.booking_status_code = 'Provisional';
SELECT AVG(room_count) AS average_room_count FROM Apartments JOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id WHERE Apartment_Bookings.booking_status_code = 'Provisional';
SELECT g.guest_first_name, ab.booking_start_date, ab.booking_end_date FROM Apartment_Bookings ab JOIN Guests g ON ab.guest_id = g.guest_id;
SELECT g.guest_first_name, ab.booking_start_date, ab.booking_end_date FROM Apartment_Bookings ab JOIN Guests g ON ab.guest_id = g.guest_id;
SELECT ab.booking_start_date, ab.booking_end_date FROM Apartment_Bookings ab JOIN Guests g ON ab.guest_id = g.guest_id WHERE g.gender_code = 'Female';
SELECT ab.booking_start_date, ab.booking_end_date FROM Apartment_Bookings ab JOIN Guests g ON ab.guest_id = g.guest_id WHERE g.gender_code = 'Female';
SELECT g.guest_first_name, g.guest_last_name FROM Guests g JOIN Apartment_Bookings ab ON g.guest_id = ab.guest_id WHERE ab.booking_status_code = 'Confirmed';
SELECT g.guest_first_name, g.guest_last_name FROM Guests g JOIN Apartment_Bookings ab ON g.guest_id = ab.guest_id WHERE ab.booking_status_code = 'Confirmed';
SELECT DISTINCT af.facility_code FROM Apartment_Facilities af JOIN Apartments a ON af.apt_id = a.apt_id WHERE a.bedroom_count > 4;
SELECT DISTINCT af.facility_code FROM Apartments a JOIN Apartment_Facilities af ON a.apt_id = af.apt_id WHERE a.bedroom_count > 4;
SELECT SUM(a.room_count) AS total_rooms FROM Apartments a JOIN Apartment_Facilities af ON a.apt_id = af.apt_id WHERE af.facility_code = 'Gym';
SELECT SUM(a.room_count) AS total_rooms FROM Apartments a JOIN Apartment_Facilities af ON a.apt_id = af.apt_id WHERE af.facility_code = 'Gym';
SELECT SUM(a.room_count) AS total_rooms FROM Apartments a JOIN Apartment_Buildings b ON a.building_id = b.building_id WHERE b.building_short_name = 'Columbus Square';
SELECT SUM(room_count) AS total_rooms FROM Apartments WHERE building_id = (     SELECT building_id     FROM Apartment_Buildings     WHERE building_short_name = 'Columbus Square' );
SELECT DISTINCT ab.building_address FROM Apartment_Buildings ab JOIN Apartments a ON ab.building_id = a.building_id WHERE a.bathroom_count > 2;
SELECT DISTINCT ab.building_address FROM Apartment_Buildings ab JOIN Apartments a ON ab.building_id = a.building_id WHERE a.bathroom_count > 2;
SELECT a.apt_type_code, a.apt_number FROM Apartments a JOIN Apartment_Buildings b ON a.building_id = b.building_id WHERE b.building_manager = 'Kyle';
SELECT DISTINCT a.apt_type_code, a.apt_number FROM Apartments a JOIN Apartment_Buildings b ON a.building_id = b.building_id WHERE b.building_manager = 'Kyle';
SELECT booking_status_code, COUNT(*) AS number_of_bookings FROM Apartment_Bookings GROUP BY booking_status_code;
SELECT booking_status_code, COUNT(*) AS number_of_bookings FROM Apartment_Bookings GROUP BY booking_status_code;
SELECT apt_number  FROM Apartments  ORDER BY room_count ASC;
SELECT apt_number  FROM Apartments  ORDER BY room_count ASC;
SELECT apt_number  FROM Apartments  ORDER BY bedroom_count DESC  LIMIT 1;
SELECT apt_number  FROM Apartments  ORDER BY bedroom_count DESC  LIMIT 1;
SELECT apt_type_code, COUNT(*) AS number_of_apartments FROM Apartments GROUP BY apt_type_code ORDER BY number_of_apartments ASC;
SELECT apt_type_code, COUNT(*) AS apartment_count FROM Apartments GROUP BY apt_type_code ORDER BY apartment_count ASC;
SELECT apt_type_code, AVG(room_count) AS average_rooms FROM Apartments GROUP BY apt_type_code ORDER BY average_rooms DESC LIMIT 3;
SELECT apt_type_code, AVG(room_count) AS average_room_count FROM Apartments GROUP BY apt_type_code ORDER BY average_room_count DESC LIMIT 3;
SELECT apt_type_code, SUM(room_count) AS total_rooms, SUM(bathroom_count) AS total_bathrooms, SUM(bedroom_count) AS total_bedrooms FROM Apartments GROUP BY apt_type_code ORDER BY total_rooms DESC LIMIT 1;
SELECT apt_type_code, bathroom_count, bedroom_count FROM Apartments ORDER BY (room_count) DESC LIMIT 1;
SELECT apt_type_code, COUNT(*) AS type_count FROM Apartments GROUP BY apt_type_code ORDER BY type_count DESC LIMIT 1;
SELECT apt_type_code, COUNT(*) AS type_count FROM Apartments GROUP BY apt_type_code ORDER BY type_count DESC LIMIT 1;
SELECT apt_type_code, COUNT(*) AS type_count FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY type_count DESC LIMIT 1;
SELECT apt_type_code, COUNT(*) AS count FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY count DESC LIMIT 1;
SELECT apt_type_code, MAX(room_count) AS max_rooms, MIN(room_count) AS min_rooms FROM Apartments GROUP BY apt_type_code;
SELECT apt_type_code, MAX(room_count) AS max_rooms, MIN(room_count) AS min_rooms FROM Apartments GROUP BY apt_type_code;
SELECT gender_code, COUNT(*) AS guest_count FROM Guests GROUP BY gender_code ORDER BY guest_count DESC;
SELECT gender_code, COUNT(*) AS guest_count FROM Guests GROUP BY gender_code ORDER BY guest_count DESC;
SELECT COUNT(*) AS apartments_without_facilities FROM Apartments a LEFT JOIN Apartment_Facilities af ON a.apt_id = af.apt_id WHERE af.apt_id IS NULL;
SELECT COUNT(*) AS num_apartments_without_facilities FROM Apartments a LEFT JOIN Apartment_Facilities af ON a.apt_id = af.apt_id WHERE af.apt_id IS NULL;
SELECT DISTINCT a.apt_number FROM Apartments a JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id WHERE ab.booking_status_code IN ('Provisional', 'Confirmed') GROUP BY a.apt_number HAVING COUNT(DISTINCT ab.booking_status_code) = 2;
SELECT a.apt_number FROM Apartments a JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id WHERE ab.booking_status_code IN ('Provisional', 'Confirmed') GROUP BY a.apt_number HAVING COUNT(DISTINCT ab.booking_status_code) = 2;
SELECT DISTINCT a.apt_number FROM Apartments a JOIN View_Unit_Status vus ON a.apt_id = vus.apt_id WHERE vus.available_yn IN (0, 1) GROUP BY a.apt_number HAVING COUNT(DISTINCT vus.available_yn) = 2;
SELECT apt_number FROM Apartments WHERE apt_id IN (     SELECT apt_id     FROM View_Unit_Status     GROUP BY apt_id     HAVING COUNT(DISTINCT available_yn) = 2 );
SELECT COUNT(*) FROM game WHERE Season > 2007;
SELECT g.Date  FROM game g  WHERE g.Home_team IS NOT NULL  ORDER BY g.Date DESC;
SELECT Season, Home_team, Away_team FROM game;
SELECT      stadium.id,      stadium.name,      MAX(Home_Games) AS Max_Home_Games,      MIN(Home_Games) AS Min_Home_Games,      AVG(Home_Games) AS Avg_Home_Games FROM      stadium GROUP BY      stadium.id, stadium.name;
SELECT AVG(Average_Attendance) AS Average_Attendance FROM stadium WHERE Capacity_Percentage > 100;
SELECT Player, Number_of_matches, Source FROM injury_accident WHERE Injury <> 'Knee problem';
SELECT g.Season  FROM injury_accident ia  JOIN game g ON ia.game_id = g.id  WHERE ia.Player = 'Walter Samuel';
SELECT g.id, g.Score, g.Date FROM game g JOIN injury_accident ia ON g.id = ia.game_id GROUP BY g.id, g.Score, g.Date HAVING COUNT(ia.id) >= 2;
SELECT s.id, s.name FROM stadium s JOIN game g ON s.id = g.stadium_id JOIN injury_accident i ON g.id = i.game_id GROUP BY s.id, s.name ORDER BY COUNT(i.id) DESC LIMIT 1;
SELECT s.id, s.name FROM stadium s JOIN game g ON s.id = g.stadium_id JOIN injury_accident i ON g.id = i.game_id GROUP BY s.id, s.name ORDER BY COUNT(i.id) DESC LIMIT 1;
SELECT g.Season, s.name FROM injury_accident ia JOIN game g ON ia.game_id = g.id JOIN stadium s ON g.stadium_id = s.id WHERE ia.Injury IN ('Foot injury', 'Knee problem');
SELECT COUNT(DISTINCT Source) AS Different_Sources FROM injury_accident;
SELECT COUNT(*) AS Free_Games FROM game WHERE id NOT IN (SELECT game_id FROM injury_accident);
SELECT COUNT(DISTINCT Injury) AS distinct_injury_count FROM injury_accident JOIN game ON injury_accident.game_id = game.id WHERE game.Season > 2010;
SELECT s.name FROM stadium s JOIN game g ON s.id = g.stadium_id JOIN injury_accident ia ON g.id = ia.game_id WHERE ia.Player IN ('Walter Samuel', 'Thiago Motta') GROUP BY s.name HAVING COUNT(DISTINCT ia.Player) = 2;
SELECT s.name, s.Average_Attendance, s.Total_Attendance FROM stadium s LEFT JOIN game g ON s.id = g.stadium_id LEFT JOIN injury_accident ia ON g.id = ia.game_id WHERE ia.id IS NULL;
SELECT name FROM stadium WHERE name LIKE '%Bank%';
SELECT s.name, COUNT(g.id) AS number_of_games FROM stadium s LEFT JOIN game g ON s.id = g.stadium_id GROUP BY s.name;
SELECT g.Date, i.Player FROM injury_accident i JOIN game g ON i.game_id = g.id ORDER BY g.Season DESC;
SELECT Country.name AS country_name, League.name AS league_name FROM Country JOIN League ON Country.id = League.country_id;
SELECT COUNT(*) FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'England');
SELECT AVG(weight) AS average_weight FROM Player;
SELECT MAX(height) AS max_height, MIN(height) AS min_height FROM Player;
SELECT p.player_name  FROM Player p  JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id  WHERE pa.overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes);
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.dribbling = (SELECT MAX(dribbling) FROM Player_Attributes);
SELECT p.player_name  FROM Player p  JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id  WHERE pa.crossing > 90 AND pa.preferred_foot = 'right';
SELECT p.player_name  FROM Player p  JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id  WHERE pa.preferred_foot = 'left'  AND pa.overall_rating BETWEEN 85 AND 90;
SELECT      preferred_foot,      AVG(overall_rating) AS average_rating  FROM      Player_Attributes  GROUP BY      preferred_foot;
SELECT preferred_foot, COUNT(*) AS count FROM Player_Attributes WHERE overall_rating > 80 GROUP BY preferred_foot;
SELECT player_api_id  FROM Player_Attributes  JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id  WHERE Player.height >= 180 AND Player_Attributes.overall_rating > 85;
SELECT id  FROM Player  WHERE preferred_foot = 'left'  AND height BETWEEN 180 AND 190;
SELECT player_api_id, overall_rating  FROM Player_Attributes  ORDER BY overall_rating DESC  LIMIT 3;
SELECT player_name, birthday  FROM Player  JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id  ORDER BY potential DESC  LIMIT 5;
SELECT COUNT(*) AS Total_Performances FROM performance;
SELECT Host  FROM performance  ORDER BY Attendance ASC;
SELECT Date, Location FROM performance;
SELECT p.Performance_ID, p.Date, p.Host, p.Location, p.Attendance FROM performance p WHERE p.Location IN ('TD Garden', 'Bell Centre');
SELECT AVG(Attendance) AS Average_Attendees FROM performance;
SELECT p.Date FROM performance p JOIN member_attendance ma ON p.Performance_ID = ma.Performance_ID GROUP BY p.Performance_ID, p.Date ORDER BY SUM(ma.Num_of_Pieces) DESC LIMIT 1;
SELECT Location, COUNT(Performance_ID) AS Number_of_Performances FROM performance GROUP BY Location;
SELECT Location, COUNT(*) AS Performance_Count FROM performance GROUP BY Location ORDER BY Performance_Count DESC LIMIT 1;
SELECT Location FROM performance GROUP BY Location HAVING COUNT(Performance_ID) >= 2;
SELECT Location FROM performance WHERE Attendance > 2000 OR Attendance < 1000 GROUP BY Location HAVING COUNT(CASE WHEN Attendance > 2000 THEN 1 END) > 0     AND COUNT(CASE WHEN Attendance < 1000 THEN 1 END) > 0;
SELECT m.Name, p.Location FROM member m JOIN member_attendance ma ON m.Member_ID = ma.Member_ID JOIN performance p ON ma.Performance_ID = p.Performance_ID;
SELECT m.Name, p.Location FROM member m JOIN member_attendance ma ON m.Member_ID = ma.Member_ID JOIN performance p ON ma.Performance_ID = p.Performance_ID ORDER BY m.Name ASC;
SELECT p.Date FROM performance p JOIN member_attendance ma ON p.Performance_ID = ma.Performance_ID JOIN member m ON ma.Member_ID = m.Member_ID WHERE m.Role = 'Violin';
SELECT m.Name, p.Date FROM member m JOIN member_attendance ma ON m.Member_ID = ma.Member_ID JOIN performance p ON ma.Performance_ID = p.Performance_ID ORDER BY p.Attendance DESC;
SELECT Name  FROM member  WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance);
SELECT DISTINCT building  FROM classroom  WHERE capacity > 50;
SELECT DISTINCT building  FROM classroom  WHERE capacity > 50;
SELECT COUNT(*)  FROM classroom  WHERE building <> 'Lamberton';
SELECT COUNT(*)  FROM classroom  WHERE building <> 'Lamberton';
SELECT dept_name, building  FROM department  WHERE budget > (SELECT AVG(budget) FROM department);
SELECT dept_name, building  FROM department  WHERE budget > (SELECT AVG(budget) FROM department);
SELECT building, room_number  FROM classroom  WHERE capacity BETWEEN 50 AND 100;
SELECT room_number, building  FROM classroom  WHERE capacity BETWEEN 50 AND 100;
SELECT dept_name, building  FROM department  WHERE budget = (SELECT MAX(budget) FROM department);
SELECT dept_name, building  FROM department  WHERE budget = (SELECT MAX(budget) FROM department);
SELECT name  FROM student  WHERE dept_name = 'History'  ORDER BY tot_cred DESC  LIMIT 1;
SELECT name  FROM student  WHERE dept_name = 'History'  ORDER BY tot_cred DESC  LIMIT 1;
SELECT COUNT(*)  FROM classroom  WHERE building = 'Lamberton';
SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton';
SELECT COUNT(DISTINCT s_ID) AS num_students_with_advisors FROM advisor;
SELECT COUNT(DISTINCT s_ID) AS num_students_with_advisors FROM advisor;
SELECT COUNT(DISTINCT dept_name) AS number_of_departments FROM course;
SELECT COUNT(DISTINCT dept_name)  FROM course;
SELECT COUNT(DISTINCT course_id)  FROM course  WHERE dept_name = 'Physics';
SELECT COUNT(*) FROM course WHERE dept_name = 'Physics';
SELECT c.title FROM course c JOIN prereq p ON c.course_id = p.course_id GROUP BY c.course_id, c.title HAVING COUNT(p.prereq_id) = 2;
SELECT c.title FROM course c JOIN prereq p ON c.course_id = p.course_id GROUP BY c.course_id, c.title HAVING COUNT(p.prereq_id) = 2;
SELECT c.title, c.credits, c.dept_name FROM course c JOIN prereq p ON c.course_id = p.course_id GROUP BY c.course_id, c.title, c.credits, c.dept_name HAVING COUNT(p.prereq_id) > 1;
SELECT c.title, c.credits, c.dept_name FROM course c JOIN prereq p ON c.course_id = p.course_id GROUP BY c.course_id HAVING COUNT(p.prereq_id) > 1;
SELECT COUNT(*)  FROM course  WHERE course_id NOT IN (SELECT course_id FROM prereq);
SELECT COUNT(*) AS num_courses_without_prereqs FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq);
SELECT title  FROM course  WHERE course_id NOT IN (SELECT course_id FROM prereq);
SELECT title  FROM course  WHERE course_id NOT IN (SELECT course_id FROM prereq);
SELECT COUNT(DISTINCT ID) AS different_instructors FROM teaches;
SELECT COUNT(DISTINCT ID) AS distinct_instructors FROM teaches;
SELECT SUM(budget) AS total_budget FROM department WHERE dept_name IN ('Marketing', 'Finance');
SELECT SUM(budget)  FROM department  WHERE dept_name IN ('Marketing', 'Finance');
SELECT dept_name  FROM instructor  WHERE name LIKE '%Soisalon%';
SELECT d.dept_name  FROM department d  JOIN instructor i ON d.dept_name = i.dept_name  WHERE i.name LIKE 'Soisalon';
SELECT COUNT(*)  FROM classroom  WHERE building = 'Lamberton' AND capacity < 50;
SELECT COUNT(*)  FROM classroom  WHERE building = 'Lamberton' AND capacity < 50;
SELECT dept_name, budget  FROM department  WHERE budget > (SELECT AVG(budget) FROM department);
SELECT dept_name, budget  FROM department  WHERE budget > (SELECT AVG(budget) FROM department);
SELECT name  FROM instructor  WHERE dept_name = 'Statistics'  ORDER BY salary ASC  LIMIT 1;
SELECT name  FROM instructor  WHERE dept_name = 'Statistics'  ORDER BY salary ASC  LIMIT 1;
SELECT DISTINCT c.title FROM course c JOIN department d ON c.dept_name = d.dept_name WHERE d.dept_name IN ('Statistics', 'Psychology') GROUP BY c.title HAVING COUNT(DISTINCT d.dept_name) = 2;
SELECT c.title  FROM course c  WHERE c.dept_name IN ('Statistics', 'Psychology')  GROUP BY c.title  HAVING COUNT(DISTINCT c.dept_name) = 2;
SELECT c.title  FROM course c  WHERE c.dept_name = 'Statistics'  AND c.course_id NOT IN (SELECT c2.course_id FROM course c2 WHERE c2.dept_name = 'Psychology');
SELECT title  FROM course  WHERE dept_name = 'Statistics'  AND course_id NOT IN (SELECT course_id FROM course WHERE dept_name = 'Psychology');
SELECT DISTINCT t1.ID FROM teaches t1 WHERE t1.semester = 'Fall' AND t1.year = 2009 AND t1.ID NOT IN (     SELECT t2.ID     FROM teaches t2     WHERE t2.semester = 'Spring' AND t2.year = 2010 );
SELECT DISTINCT T1.ID FROM teaches T1 WHERE T1.semester = 'Fall' AND T1.year = 2009 AND T1.ID NOT IN (     SELECT DISTINCT T2.ID     FROM teaches T2     WHERE T2.semester = 'Spring' AND T2.year = 2010 );
SELECT DISTINCT s.name FROM student s JOIN takes t ON s.ID = t.ID WHERE t.year IN (2009, 2010);
SELECT DISTINCT s.name FROM student s JOIN takes t ON s.ID = t.ID WHERE t.year IN (2009, 2010);
SELECT dept_name FROM course GROUP BY dept_name ORDER BY COUNT(course_id) DESC LIMIT 3;
SELECT dept_name FROM course GROUP BY dept_name ORDER BY COUNT(course_id) DESC LIMIT 3;
SELECT dept_name FROM course GROUP BY dept_name ORDER BY SUM(credits) DESC LIMIT 1;
SELECT dept_name  FROM course  GROUP BY dept_name  ORDER BY SUM(credits) DESC  LIMIT 1;
SELECT title  FROM course  ORDER BY title, credits;
SELECT title, credits FROM course ORDER BY title, credits;
SELECT dept_name  FROM department  ORDER BY budget ASC  LIMIT 1;
SELECT dept_name  FROM department  ORDER BY budget ASC  LIMIT 1;
SELECT dept_name, building  FROM department  ORDER BY budget DESC;
SELECT dept_name, building  FROM department  ORDER BY budget DESC;
SELECT name  FROM instructor  WHERE salary = (SELECT MAX(salary) FROM instructor);
SELECT name  FROM instructor  WHERE salary = (SELECT MAX(salary) FROM instructor);
SELECT * FROM instructor ORDER BY salary ASC;
SELECT * FROM instructor ORDER BY salary ASC;
SELECT name, dept_name  FROM student  ORDER BY tot_cred ASC;
SELECT name, dept_name  FROM student  ORDER BY tot_cred ASC;
SELECT c.title AS course_name, i.name AS instructor_name FROM course c JOIN teaches t ON c.course_id = t.course_id JOIN instructor i ON t.ID = i.ID JOIN section s ON t.course_id = s.course_id AND t.sec_id = s.sec_id AND t.semester = s.semester AND t.year = s.year WHERE s.year = 2008 ORDER BY c.title, i.name;
SELECT c.title, i.name  FROM course c  JOIN teaches t ON c.course_id = t.course_id  JOIN instructor i ON t.ID = i.ID  JOIN section s ON t.course_id = s.course_id AND t.sec_id = s.sec_id AND t.semester = s.semester AND t.year = s.year  WHERE s.year = 2008  ORDER BY c.title;
SELECT i.name FROM instructor i JOIN advisor a ON i.ID = a.i_ID GROUP BY i.ID, i.name HAVING COUNT(a.s_ID) > 1;
SELECT i.name FROM instructor i JOIN advisor a ON i.ID = a.i_ID GROUP BY i.ID, i.name HAVING COUNT(a.s_ID) > 1;
SELECT s.name FROM student s JOIN advisor a ON s.ID = a.s_ID GROUP BY s.ID, s.name HAVING COUNT(a.i_ID) > 1;
SELECT s.name FROM student s JOIN advisor a ON s.ID = a.s_ID GROUP BY s.ID, s.name HAVING COUNT(a.i_ID) > 1;
SELECT building, COUNT(*) AS room_count FROM classroom WHERE capacity > 50 GROUP BY building;
SELECT building, COUNT(*) AS room_count FROM classroom WHERE capacity > 50 GROUP BY building;
SELECT building, MAX(capacity) AS max_capacity, AVG(capacity) AS avg_capacity FROM classroom GROUP BY building;
SELECT building, MAX(capacity) AS greatest_capacity, AVG(capacity) AS average_capacity FROM classroom GROUP BY building;
SELECT c.title FROM course c GROUP BY c.title HAVING COUNT(DISTINCT c.dept_name) > 1;
SELECT c.title FROM course c JOIN department d ON c.dept_name = d.dept_name GROUP BY c.title HAVING COUNT(DISTINCT c.dept_name) > 1;
SELECT d.dept_name, SUM(c.credits) AS total_credits FROM department d JOIN course c ON d.dept_name = c.dept_name GROUP BY d.dept_name;
SELECT d.dept_name, SUM(c.credits) AS total_credits FROM department d JOIN course c ON d.dept_name = c.dept_name GROUP BY d.dept_name;
SELECT MIN(salary)  FROM instructor  WHERE dept_name IN (     SELECT dept_name      FROM instructor      GROUP BY dept_name      HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor) );
SELECT MIN(salary)  FROM instructor  WHERE dept_name IN (     SELECT dept_name      FROM instructor      GROUP BY dept_name      HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor) );
SELECT semester, year, COUNT(*) AS course_count FROM section GROUP BY semester, year;
SELECT semester, year, COUNT(*) AS course_count FROM section GROUP BY semester, year;
SELECT year, COUNT(DISTINCT course_id) AS course_count FROM section GROUP BY year ORDER BY course_count DESC LIMIT 1;
SELECT year, COUNT(DISTINCT course_id) AS course_count FROM section GROUP BY year ORDER BY course_count DESC LIMIT 1;
SELECT year, semester, COUNT(DISTINCT course_id) AS course_count FROM section GROUP BY year, semester ORDER BY course_count DESC LIMIT 1;
SELECT year, semester, COUNT(DISTINCT course_id) AS course_count FROM section GROUP BY year, semester ORDER BY course_count DESC LIMIT 1;
SELECT dept_name FROM student GROUP BY dept_name ORDER BY COUNT(ID) DESC LIMIT 1;
SELECT d.dept_name FROM department d JOIN student s ON d.dept_name = s.dept_name GROUP BY d.dept_name ORDER BY COUNT(s.ID) DESC LIMIT 1;
SELECT dept_name, COUNT(*) AS total_students FROM student GROUP BY dept_name;
SELECT dept_name, COUNT(*) AS student_count FROM student GROUP BY dept_name;
SELECT semester, year FROM takes GROUP BY semester, year ORDER BY COUNT(ID) ASC LIMIT 1;
SELECT semester, year, COUNT(DISTINCT ID) AS student_count FROM takes GROUP BY semester, year ORDER BY student_count ASC LIMIT 1;
SELECT DISTINCT a.i_ID FROM advisor a JOIN student s ON a.s_ID = s.ID WHERE s.dept_name = 'History';
SELECT DISTINCT i.ID FROM instructor i JOIN advisor a ON i.ID = a.i_ID JOIN student s ON a.s_ID = s.ID WHERE s.dept_name = 'History';
SELECT i.name, i.salary FROM instructor i JOIN advisor a ON i.ID = a.i_ID JOIN student s ON a.s_ID = s.ID WHERE s.dept_name = 'History';
SELECT instructor.name, instructor.salary FROM instructor JOIN advisor ON instructor.ID = advisor.i_ID JOIN student ON advisor.s_ID = student.ID WHERE student.dept_name = 'History';
SELECT course_id  FROM course  WHERE course_id NOT IN (SELECT course_id FROM prereq);
SELECT course_id  FROM course  WHERE course_id NOT IN (SELECT course_id FROM prereq);
SELECT title  FROM course  WHERE course_id NOT IN (SELECT course_id FROM prereq);
SELECT title  FROM course  WHERE course_id NOT IN (SELECT course_id FROM prereq);
SELECT c.title  FROM course c  JOIN prereq p ON c.course_id = p.prereq_id  WHERE p.course_id = (SELECT course_id FROM course WHERE title = 'International Finance');
SELECT c.title  FROM course c  JOIN prereq p ON c.course_id = p.prereq_id  WHERE p.course_id = (SELECT course_id FROM course WHERE title = 'International Finance');
SELECT c.title  FROM course c  JOIN prereq p ON c.course_id = p.course_id  WHERE p.prereq_id = (SELECT course_id FROM course WHERE title = 'Differential Geometry');
SELECT c.title  FROM course c  JOIN prereq p ON c.course_id = p.course_id  WHERE p.prereq_id = (SELECT course_id FROM course WHERE title = 'Differential Geometry');
SELECT DISTINCT s.name FROM student s JOIN takes t ON s.ID = t.ID WHERE t.semester = 'Fall' AND t.year = 2003;
SELECT DISTINCT s.name FROM student s JOIN takes t ON s.ID = t.ID WHERE t.semester = 'Fall' AND t.year = 2003;
SELECT c.title  FROM course c  JOIN section s ON c.course_id = s.course_id  WHERE s.building = 'Chandler' AND s.semester = 'Fall' AND s.year = 2010;
SELECT c.title  FROM course c  JOIN section s ON c.course_id = s.course_id  WHERE s.building = 'Chandler' AND s.semester = 'Fall' AND s.year = 2010;
SELECT DISTINCT instructor.name FROM instructor JOIN teaches ON instructor.ID = teaches.ID JOIN course ON teaches.course_id = course.course_id WHERE course.title = 'C Programming';
SELECT DISTINCT instructor.name FROM instructor JOIN teaches ON instructor.ID = teaches.ID JOIN course ON teaches.course_id = course.course_id WHERE course.title = 'C Programming';
SELECT i.name, i.salary FROM instructor i JOIN advisor a ON i.ID = a.i_ID JOIN student s ON a.s_ID = s.ID WHERE s.dept_name = 'Math';
SELECT DISTINCT instructor.name, instructor.salary FROM instructor JOIN advisor ON instructor.ID = advisor.i_ID JOIN student ON advisor.s_ID = student.ID WHERE student.dept_name = 'Math';
SELECT DISTINCT i.name FROM instructor i JOIN advisor a ON i.ID = a.i_ID JOIN student s ON a.s_ID = s.ID WHERE s.dept_name = 'Math' ORDER BY s.tot_cred;
SELECT i.name FROM instructor i JOIN advisor a ON i.ID = a.i_ID JOIN student s ON a.s_ID = s.ID WHERE s.dept_name = 'math' ORDER BY s.tot_cred;
SELECT c.title  FROM course c  JOIN prereq p ON c.course_id = p.prereq_id  WHERE p.course_id = (SELECT course_id FROM course WHERE title = 'Mobile Computing');
SELECT c.title  FROM course c  JOIN prereq p ON c.course_id = p.prereq_id  WHERE p.course_id = (SELECT course_id FROM course WHERE title = 'Mobile Computing');
SELECT i.name FROM instructor i JOIN advisor a ON i.ID = a.i_ID JOIN student s ON a.s_ID = s.ID WHERE s.tot_cred = (SELECT MAX(tot_cred) FROM student);
SELECT i.name FROM instructor i JOIN advisor a ON i.ID = a.i_ID JOIN student s ON a.s_ID = s.ID WHERE s.tot_cred = (SELECT MAX(tot_cred) FROM student);
SELECT name  FROM instructor  WHERE ID NOT IN (SELECT DISTINCT ID FROM teaches);
SELECT name  FROM instructor  WHERE ID NOT IN (SELECT DISTINCT ID FROM teaches);
SELECT ID  FROM instructor  WHERE ID NOT IN (SELECT DISTINCT ID FROM teaches);
SELECT ID FROM instructor WHERE ID NOT IN (SELECT DISTINCT ID FROM teaches);
SELECT DISTINCT i.name FROM instructor i WHERE i.ID NOT IN (     SELECT t.ID     FROM teaches t     WHERE t.semester = 'Spring' );
SELECT DISTINCT i.name FROM instructor i WHERE i.ID NOT IN (     SELECT DISTINCT t.ID     FROM teaches t     WHERE t.semester = 'Spring' );
SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC LIMIT 1;
SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC LIMIT 1;
SELECT COUNT(*) AS num_instructors, AVG(salary) AS avg_salary FROM instructor WHERE dept_name = (     SELECT dept_name     FROM department     ORDER BY budget DESC     LIMIT 1 );
SELECT COUNT(i.ID) AS instructor_count, AVG(i.salary) AS average_salary FROM instructor i JOIN department d ON i.dept_name = d.dept_name WHERE d.budget = (SELECT MAX(budget) FROM department);
SELECT c.title, c.credits FROM course c JOIN section s ON c.course_id = s.course_id JOIN classroom cr ON s.building = cr.building AND s.room_number = cr.room_number WHERE cr.capacity = (SELECT MAX(capacity) FROM classroom);
SELECT c.title, c.credits FROM course c JOIN section s ON c.course_id = s.course_id JOIN classroom r ON s.building = r.building AND s.room_number = r.room_number WHERE r.capacity = (SELECT MAX(capacity) FROM classroom);
SELECT s.name FROM student s WHERE s.ID NOT IN (     SELECT t.ID     FROM takes t     JOIN course c ON t.course_id = c.course_id     WHERE c.dept_name = 'Biology' );
SELECT name  FROM student  WHERE ID NOT IN (     SELECT DISTINCT ID      FROM takes      WHERE course_id IN (         SELECT course_id          FROM course          WHERE title LIKE '%Biology%'     ) );
SELECT d.dept_name,         COUNT(DISTINCT s.ID) AS total_students,         COUNT(DISTINCT i.ID) AS total_instructors FROM department d LEFT JOIN student s ON d.dept_name = s.dept_name LEFT JOIN instructor i ON d.dept_name = i.dept_name GROUP BY d.dept_name;
SELECT d.dept_name,         COUNT(DISTINCT s.ID) AS student_count,         COUNT(DISTINCT i.ID) AS instructor_count FROM department d LEFT JOIN student s ON d.dept_name = s.dept_name LEFT JOIN instructor i ON d.dept_name = i.dept_name GROUP BY d.dept_name;
SELECT DISTINCT s.name FROM student s JOIN takes t ON s.ID = t.ID JOIN prereq p ON t.course_id = p.course_id JOIN course c ON p.prereq_id = c.course_id WHERE c.title = 'International Finance';
SELECT DISTINCT s.name FROM student s JOIN takes t ON s.ID = t.ID JOIN prereq p ON t.course_id = p.course_id JOIN course c ON p.prereq_id = c.course_id WHERE c.title = 'International Finance';
SELECT name, salary  FROM instructor  WHERE salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics');
SELECT name, salary  FROM instructor  WHERE salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics');
SELECT DISTINCT s.name FROM student s JOIN takes t ON s.ID = t.ID JOIN course c ON t.course_id = c.course_id WHERE c.dept_name = 'Statistics';
SELECT DISTINCT s.name FROM student s JOIN takes t ON s.ID = t.ID JOIN course c ON t.course_id = c.course_id WHERE c.title LIKE '%Statistics%';
SELECT DISTINCT c.building, c.room_number, s.semester, s.year FROM section s JOIN course c ON s.course_id = c.course_id WHERE c.dept_name = 'Psychology' ORDER BY c.title;
SELECT DISTINCT c.building, c.room_number, s.semester, s.year FROM course AS c JOIN section AS s ON c.course_id = s.course_id WHERE c.dept_name = 'Psychology' ORDER BY c.title;
SELECT name  FROM instructor  WHERE dept_name = 'Computer Science';
SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.';
SELECT name  FROM instructor  WHERE dept_name = 'Comp. Sci.' AND salary > 80000;
SELECT name  FROM instructor  WHERE dept_name = 'Comp. Sci.' AND salary > 80000;
SELECT DISTINCT instructor.name, teaches.course_id FROM instructor JOIN teaches ON instructor.ID = teaches.ID;
SELECT DISTINCT i.name, t.course_id FROM instructor i JOIN teaches t ON i.ID = t.ID;
SELECT i.name, t.course_id FROM instructor i JOIN teaches t ON i.ID = t.ID WHERE i.dept_name = 'Art';
SELECT DISTINCT i.name, t.course_id FROM instructor i JOIN teaches t ON i.ID = t.ID JOIN course c ON t.course_id = c.course_id WHERE i.dept_name = 'Art';
SELECT name  FROM instructor  WHERE name LIKE '%dar%';
SELECT name FROM instructor WHERE name LIKE '%dar%';
SELECT DISTINCT name FROM instructor ORDER BY name;
SELECT DISTINCT name FROM instructor ORDER BY name;
SELECT DISTINCT c.course_id, c.title FROM course c JOIN section s ON c.course_id = s.course_id WHERE (s.semester = 'Fall' AND s.year = 2009) OR (s.semester = 'Spring' AND s.year = 2010);
SELECT DISTINCT course_id  FROM section  WHERE (semester = 'Fall' AND year = 2009) OR (semester = 'Spring' AND year = 2010);
SELECT DISTINCT c.course_id, c.title FROM course c JOIN section s1 ON c.course_id = s1.course_id JOIN section s2 ON c.course_id = s2.course_id WHERE (s1.semester = 'Fall' AND s1.year = 2009)   AND (s2.semester = 'Spring' AND s2.year = 2010);
SELECT course_id FROM section WHERE (semester = 'Fall' AND year = 2009) OR (semester = 'Spring' AND year = 2010) GROUP BY course_id HAVING COUNT(DISTINCT semester) = 2;
SELECT DISTINCT c.course_id, c.title FROM course c JOIN section s ON c.course_id = s.course_id WHERE s.semester = 'Fall' AND s.year = 2009 AND c.course_id NOT IN (     SELECT s2.course_id     FROM section s2     WHERE s2.semester = 'Spring' AND s2.year = 2010 );
SELECT course_id  FROM section  WHERE semester = 'Fall' AND year = 2009  AND course_id NOT IN (     SELECT course_id      FROM section      WHERE semester = 'Spring' AND year = 2010 );
SELECT DISTINCT salary  FROM instructor  WHERE salary < (SELECT MAX(salary) FROM instructor);
SELECT DISTINCT salary  FROM instructor  WHERE salary < (SELECT MAX(salary) FROM instructor);
SELECT COUNT(DISTINCT ID) AS total_instructors FROM teaches WHERE semester = 'Spring' AND year = 2010;
SELECT COUNT(DISTINCT ID)  FROM teaches  WHERE semester = 'Spring' AND year = 2010;
SELECT d.dept_name, AVG(i.salary) AS average_salary FROM department d JOIN instructor i ON d.dept_name = i.dept_name GROUP BY d.dept_name HAVING AVG(i.salary) > 42000;
SELECT d.dept_name, AVG(i.salary) AS average_salary FROM department d JOIN instructor i ON d.dept_name = i.dept_name GROUP BY d.dept_name HAVING AVG(i.salary) > 42000;
SELECT name  FROM instructor  WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology');
SELECT DISTINCT i1.name FROM instructor i1 WHERE i1.salary > (     SELECT MAX(i2.salary)     FROM instructor i2     WHERE i2.dept_name = 'Biology' );
SELECT name  FROM instructor  WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology');
SELECT name  FROM instructor  WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology');
SELECT COUNT(*) AS Total_Debates FROM debate;
SELECT Venue FROM debate ORDER BY Num_of_Audience ASC;
SELECT Date, Venue FROM debate;
SELECT Date FROM debate WHERE Num_of_Audience > 150;
SELECT Name FROM people WHERE Age IN (35, 36);
SELECT Party  FROM people  WHERE Age = (SELECT MIN(Age) FROM people);
SELECT Party, COUNT(*) AS Number_of_People FROM people GROUP BY Party;
SELECT Party, COUNT(*) AS Party_Count FROM people GROUP BY Party ORDER BY Party_Count DESC LIMIT 1;
SELECT DISTINCT Venue FROM debate;
SELECT p.Name, d.Date, d.Venue FROM people p JOIN debate_people dp ON p.People_ID = dp.Affirmative JOIN debate d ON dp.Debate_ID = d.Debate_ID;
SELECT p.Name, d.Date, d.Venue FROM people p JOIN debate_people dp ON p.People_ID = dp.Negative JOIN debate d ON dp.Debate_ID = d.Debate_ID ORDER BY p.Name ASC;
SELECT p.Name FROM people p JOIN debate_people dp ON p.People_ID = dp.Affirmative JOIN debate d ON dp.Debate_ID = d.Debate_ID WHERE d.Num_of_Audience > 200;
SELECT p.Name, COUNT(dp.Affirmative) AS Affirmative_Count FROM people p JOIN debate_people dp ON p.People_ID = dp.Affirmative GROUP BY p.Name;
SELECT p.Name FROM people p JOIN debate_people dp ON p.People_ID = dp.Negative GROUP BY p.Name HAVING COUNT(dp.Debate_ID) >= 2;
SELECT Name  FROM people  WHERE People_ID NOT IN (     SELECT DISTINCT Affirmative      FROM debate_people      WHERE Affirmative IS NOT NULL );
SELECT Customer_Details FROM Customers ORDER BY Customer_Details ASC;
SELECT Customer_Details FROM Customers ORDER BY Customer_Details ASC;
SELECT DISTINCT Policies.Policy_Type_Code FROM Customers JOIN Policies ON Customers.Customer_ID = Policies.Customer_ID WHERE Customers.Customer_Details = 'Dayana Robel';
SELECT p.Policy_Type_Code FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID WHERE c.Customer_Details = 'Dayana Robel';
SELECT Policy_Type_Code FROM Policies GROUP BY Policy_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Policy_Type_Code FROM Policies GROUP BY Policy_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Policy_Type_Code FROM Policies GROUP BY Policy_Type_Code HAVING COUNT(DISTINCT Customer_ID) > 2;
SELECT Policy_Type_Code FROM Policies GROUP BY Policy_Type_Code HAVING COUNT(DISTINCT Customer_ID) > 2;
SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid FROM Claim_Headers;
SELECT      SUM(Amount_Paid) AS Total_Amount_Paid,      AVG(Amount_Paid) AS Average_Amount_Paid  FROM      Claim_Headers;
SELECT SUM(ch.Amount_Claimed) AS Total_Amount_Claimed FROM Claim_Headers ch JOIN Claims_Documents cd ON ch.Claim_Header_ID = cd.Claim_ID WHERE cd.Created_Date = (SELECT MAX(Created_Date) FROM Claims_Documents);
SELECT SUM(ch.Amount_Claimed) AS Total_Claimed_Amount FROM Claim_Headers ch JOIN Claims_Documents cd ON ch.Claim_Header_ID = cd.Claim_ID WHERE cd.Created_Date = (SELECT MAX(Created_Date) FROM Claims_Documents);
SELECT c.Customer_Details FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID JOIN Claim_Headers ch ON p.Policy_ID = ch.Policy_ID ORDER BY ch.Amount_Claimed DESC LIMIT 1;
SELECT c.Customer_Details FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID JOIN Claim_Headers ch ON p.Policy_ID = ch.Policy_ID ORDER BY ch.Amount_Claimed DESC LIMIT 1;
SELECT c.Customer_Details FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID JOIN Claim_Headers ch ON p.Policy_ID = ch.Policy_ID ORDER BY ch.Amount_Paid ASC LIMIT 1;
SELECT c.Customer_Details FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID JOIN Claim_Headers ch ON p.Policy_ID = ch.Policy_ID ORDER BY ch.Amount_Claimed ASC LIMIT 1;
SELECT Customer_Details  FROM Customers  WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Policies);
SELECT Customer_Details  FROM Customers  WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Policies);
SELECT COUNT(*) AS Total_Claim_Processing_Stages FROM Claims_Processing_Stages;
SELECT COUNT(DISTINCT Claim_Stage_ID) AS Distinct_Stages FROM Claims_Processing;
SELECT cps.Claim_Status_Name FROM Claims_Processing cp JOIN Claims_Processing_Stages cps ON cp.Claim_Stage_ID = cps.Claim_Stage_ID GROUP BY cps.Claim_Status_Name ORDER BY COUNT(cp.Claim_Processing_ID) DESC LIMIT 1;
SELECT cps.Claim_Status_Name, COUNT(cp.Claim_Processing_ID) AS Claim_Count FROM Claims_Processing cp JOIN Claims_Processing_Stages cps ON cp.Claim_Stage_ID = cps.Claim_Stage_ID GROUP BY cps.Claim_Status_Name ORDER BY Claim_Count DESC LIMIT 1;
SELECT Customer_Details  FROM Customers  WHERE Customer_Details LIKE '%Diana%';
SELECT Customer_Details  FROM Customers  WHERE Customer_Details LIKE '%Diana%';
SELECT DISTINCT c.Customer_Details FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID WHERE p.Policy_Type_Code = 'deputy';
SELECT c.Customer_Details FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID WHERE p.Policy_Type_Code = 'Deputy';
SELECT DISTINCT c.Customer_Details FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID WHERE p.Policy_Type_Code IN ('deputy', 'uniformed');
SELECT DISTINCT c.Customer_Details FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID WHERE p.Policy_Type_Code IN ('Deputy', 'Uniform');
SELECT Customer_Details AS Name FROM Customers UNION SELECT Staff_Details AS Name FROM Staff;
SELECT c.Customer_Details AS Customer_Name, s.Staff_Details AS Staff_Name FROM Customers c, Staff s;
SELECT Policy_Type_Code, COUNT(*) AS Number_of_Records FROM Policies GROUP BY Policy_Type_Code;
SELECT Policy_Type_Code, COUNT(*) AS Policy_Count FROM Policies GROUP BY Policy_Type_Code;
SELECT c.Customer_Details FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID GROUP BY c.Customer_ID, c.Customer_Details ORDER BY COUNT(p.Policy_ID) DESC LIMIT 1;
SELECT c.Customer_Details FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID GROUP BY c.Customer_ID, c.Customer_Details ORDER BY COUNT(p.Policy_ID) DESC LIMIT 1;
SELECT Claim_Status_Description  FROM Claims_Processing_Stages  WHERE Claim_Status_Name = 'Open';
SELECT Claim_Status_Description  FROM Claims_Processing_Stages  WHERE Claim_Status_Name = 'Open';
SELECT COUNT(DISTINCT Claim_Outcome_Code) AS Distinct_Claim_Outcome_Codes FROM Claims_Processing;
SELECT COUNT(DISTINCT Claim_Outcome_Code) AS Distinct_Claim_Outcome_Count FROM Claims_Processing;
SELECT c.Customer_ID, c.Customer_Details FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID WHERE p.Start_Date = (SELECT MAX(Start_Date) FROM Policies);
SELECT c.Customer_ID, c.Customer_Details FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID ORDER BY p.Start_Date DESC LIMIT 1;
SELECT COUNT(*) AS number_of_accounts FROM Accounts;
SELECT COUNT(*) AS total_accounts FROM Accounts;
SELECT COUNT(DISTINCT customer_id) AS number_of_customers_with_accounts FROM Accounts;
SELECT COUNT(DISTINCT customer_id) AS number_of_customers_with_accounts FROM Accounts;
SELECT account_id, date_account_opened, account_name, other_account_details FROM Accounts;
SELECT account_id, date_account_opened, account_name, other_account_details  FROM Accounts;
SELECT a.account_id, a.account_name, a.other_account_details FROM Accounts a JOIN Customers c ON a.customer_id = c.customer_id WHERE c.customer_first_name = 'Meaghan';
SELECT a.account_id, c.customer_first_name, c.customer_last_name, a.date_account_opened, a.other_account_details FROM Accounts a JOIN Customers c ON a.customer_id = c.customer_id WHERE c.customer_first_name = 'Meaghan';
SELECT a.account_name, a.other_account_details FROM Accounts a JOIN Customers c ON a.customer_id = c.customer_id WHERE c.customer_first_name = 'Meaghan' AND c.customer_last_name = 'Keeling';
SELECT a.account_id, a.customer_id, a.date_account_opened, a.account_name, a.other_account_details FROM Accounts a JOIN Customers c ON a.customer_id = c.customer_id WHERE c.customer_first_name = 'Meaghan' AND c.customer_last_name = 'Keeling';
SELECT c.customer_first_name, c.customer_last_name FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id WHERE a.account_name = '900';
SELECT CONCAT(c.customer_first_name, ' ', c.customer_last_name) AS full_name FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id WHERE a.account_name = '900';
SELECT COUNT(*) AS customers_without_accounts FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts);
SELECT COUNT(*) AS customer_count FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts);
SELECT DISTINCT c.customer_first_name, c.customer_last_name, c.phone_number FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id;
SELECT DISTINCT c.customer_first_name, c.customer_last_name, c.phone_number FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id;
SELECT customer_id  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Accounts);
SELECT customer_id  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Accounts);
SELECT customer_id, COUNT(account_id) AS account_count FROM Accounts GROUP BY customer_id;
SELECT customer_id, COUNT(account_id) AS account_count FROM Accounts GROUP BY customer_id;
SELECT customer_id, customer_first_name, customer_last_name FROM Accounts JOIN Customers ON Accounts.customer_id = Customers.customer_id GROUP BY Accounts.customer_id, customer_first_name, customer_last_name ORDER BY COUNT(Accounts.account_id) DESC LIMIT 1;
SELECT c.customer_id, CONCAT(c.customer_first_name, ' ', c.customer_last_name) AS full_name FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_id ORDER BY COUNT(a.account_id) DESC LIMIT 1;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name, COUNT(a.account_id) AS number_of_accounts FROM Customers c LEFT JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name;
SELECT      c.customer_id,      CONCAT(c.customer_first_name, ' ', COALESCE(c.customer_middle_initial, ''), ' ', c.customer_last_name) AS full_name,      COUNT(a.account_id) AS account_count FROM      Customers c LEFT JOIN      Accounts a ON c.customer_id = a.customer_id GROUP BY      c.customer_id, c.customer_first_name, c.customer_middle_initial, c.customer_last_name;
SELECT c.customer_first_name, c.customer_id FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_id, c.customer_first_name HAVING COUNT(a.account_id) >= 2;
SELECT customer_first_name, customer_id FROM Accounts GROUP BY customer_id, customer_first_name HAVING COUNT(account_id) >= 2;
SELECT COUNT(*) AS number_of_customers FROM Customers;
SELECT COUNT(*) AS number_of_customers FROM Customers;
SELECT gender, COUNT(*) AS number_of_customers FROM Customers GROUP BY gender;
SELECT gender, COUNT(*) AS customer_count FROM Customers GROUP BY gender;
SELECT COUNT(*) AS transaction_count FROM Financial_Transactions;
SELECT COUNT(*) AS transaction_count FROM Financial_Transactions;
SELECT account_id, COUNT(transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY account_id;
SELECT account_id, COUNT(transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY account_id;
SELECT COUNT(*)  FROM Financial_Transactions  WHERE account_id IN (SELECT account_id FROM Accounts WHERE account_name = '337');
SELECT COUNT(*)  FROM Financial_Transactions  WHERE account_id IN (SELECT account_id FROM Accounts WHERE account_name = '337');
SELECT      AVG(transaction_amount) AS average_transaction_amount,     MIN(transaction_amount) AS minimum_transaction_amount,     MAX(transaction_amount) AS maximum_transaction_amount,     SUM(transaction_amount) AS total_transaction_amount FROM      Financial_Transactions;
SELECT      AVG(transaction_amount) AS average_transaction_amount,     MIN(transaction_amount) AS minimum_transaction_amount,     MAX(transaction_amount) AS maximum_transaction_amount,     SUM(transaction_amount) AS total_transaction_amount FROM      Financial_Transactions;
SELECT transaction_id  FROM Financial_Transactions  WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM Financial_Transactions);
SELECT transaction_id  FROM Financial_Transactions  WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM Financial_Transactions);
SELECT transaction_type, SUM(transaction_amount) AS total_amount FROM Financial_Transactions GROUP BY transaction_type;
SELECT transaction_type, SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions GROUP BY transaction_type;
SELECT a.account_name, a.account_id, COUNT(ft.transaction_id) AS number_of_transactions FROM Accounts a LEFT JOIN Financial_Transactions ft ON a.account_id = ft.account_id GROUP BY a.account_id, a.account_name;
SELECT a.account_id, a.account_name, COUNT(ft.transaction_id) AS transaction_count FROM Accounts a LEFT JOIN Financial_Transactions ft ON a.account_id = ft.account_id GROUP BY a.account_id, a.account_name;
SELECT account_id FROM Financial_Transactions GROUP BY account_id ORDER BY COUNT(transaction_id) DESC LIMIT 1;
SELECT account_id FROM Financial_Transactions GROUP BY account_id ORDER BY COUNT(transaction_id) DESC LIMIT 1;
SELECT account_id, account_name FROM Accounts WHERE account_id IN (     SELECT account_id     FROM Financial_Transactions     GROUP BY account_id     HAVING COUNT(transaction_id) >= 4 );
SELECT a.account_id, a.account_name FROM Accounts a JOIN Financial_Transactions ft ON a.account_id = ft.account_id GROUP BY a.account_id, a.account_name HAVING COUNT(ft.transaction_id) >= 4;
SELECT DISTINCT product_size FROM Products;
SELECT DISTINCT product_size FROM Products;
SELECT DISTINCT product_color FROM Products;
SELECT DISTINCT product_color FROM Products;
SELECT i.invoice_number, COUNT(ft.transaction_id) AS number_of_transactions FROM Invoices i LEFT JOIN Financial_Transactions ft ON i.invoice_number = ft.invoice_number GROUP BY i.invoice_number;
SELECT invoice_number, COUNT(transaction_id) AS transaction_count FROM Financial_Transactions GROUP BY invoice_number;
SELECT i.invoice_number, i.invoice_date FROM Invoices i JOIN Financial_Transactions ft ON i.invoice_number = ft.invoice_number GROUP BY i.invoice_number, i.invoice_date ORDER BY COUNT(ft.transaction_id) DESC LIMIT 1;
SELECT i.invoice_number, i.invoice_date FROM Invoices i JOIN Financial_Transactions ft ON i.invoice_number = ft.invoice_number GROUP BY i.invoice_number, i.invoice_date ORDER BY COUNT(ft.transaction_id) DESC LIMIT 1;
SELECT COUNT(*) AS total_invoices FROM Invoices;
SELECT COUNT(*) AS invoice_count FROM Invoices;
SELECT i.invoice_date, o.order_id, o.order_details FROM Invoices i JOIN Orders o ON i.order_id = o.order_id;
SELECT Invoices.invoice_date, Orders.order_id, Orders.order_details FROM Invoices JOIN Orders ON Invoices.order_id = Orders.order_id;
SELECT o.order_id, COUNT(i.invoice_number) AS number_of_invoices FROM Orders o LEFT JOIN Invoices i ON o.order_id = i.order_id GROUP BY o.order_id;
SELECT order_id, COUNT(invoice_number) AS invoice_count FROM Invoices GROUP BY order_id;
SELECT o.order_id, o.order_details FROM Orders o JOIN Invoices i ON o.order_id = i.order_id GROUP BY o.order_id, o.order_details HAVING COUNT(i.invoice_number) > 2;
SELECT o.order_id, o.order_details FROM Orders o JOIN Invoices i ON o.order_id = i.order_id GROUP BY o.order_id, o.order_details HAVING COUNT(i.invoice_number) >= 2;
SELECT c.customer_last_name, c.customer_id, c.phone_number FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_last_name, c.customer_id, c.phone_number ORDER BY COUNT(o.order_id) DESC LIMIT 1;
SELECT c.customer_last_name, c.customer_id, c.phone_number FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_last_name, c.phone_number ORDER BY COUNT(o.order_id) DESC LIMIT 1;
SELECT p.product_name FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.order_item_id IS NULL;
SELECT p.product_name FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.order_item_id IS NULL;
SELECT p.product_name, SUM(oi.product_quantity) AS total_quantity_ordered FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_name;
SELECT p.product_name, SUM(oi.product_quantity) AS total_quantity_ordered FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_name;
SELECT o.order_id, COUNT(oi.order_item_id) AS number_of_items FROM Orders o LEFT JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id;
SELECT order_id, COUNT(order_item_id) AS order_item_count FROM Order_Items GROUP BY order_id;
SELECT oi.product_id, COUNT(DISTINCT o.order_id) AS unique_order_count FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id GROUP BY oi.product_id;
SELECT product_id, COUNT(DISTINCT order_id) AS distinct_order_count FROM Order_Items GROUP BY product_id;
SELECT p.product_name, COUNT(DISTINCT o.customer_id) AS customer_count FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id GROUP BY p.product_name;
SELECT p.product_name, COUNT(DISTINCT o.customer_id) AS customer_count FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id GROUP BY p.product_name;
SELECT o.order_id, COUNT(oi.product_id) AS number_of_products FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id;
SELECT order_id, COUNT(DISTINCT product_id) AS different_product_count FROM Order_Items GROUP BY order_id;
SELECT order_id, SUM(product_quantity) AS total_quantity FROM Order_Items GROUP BY order_id;
SELECT o.order_id, SUM(oi.product_quantity) AS total_product_quantity FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id;
SELECT COUNT(*) AS products_not_in_orders FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items);
SELECT COUNT(*) AS never_ordered_products FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items);
SELECT COUNT(*) FROM church WHERE Open_Date < '1850-01-01';
SELECT Name, Open_Date, Organized_by FROM church;
SELECT Name FROM church ORDER BY Open_Date DESC;
SELECT Open_Date AS Opening_Year FROM church GROUP BY Open_Date HAVING COUNT(Church_ID) >= 2;
SELECT Organized_by, Name  FROM church  WHERE Open_Date BETWEEN '1830-01-01' AND '1840-12-31';
SELECT Open_Date AS Opening_Year, COUNT(Church_ID) AS Number_of_Churches FROM church GROUP BY Open_Date ORDER BY Open_Date;
SELECT Name, Open_Date  FROM church  ORDER BY Open_Date DESC  LIMIT 3;
SELECT COUNT(*) FROM people WHERE Is_Male = 0 AND Age > 30;
SELECT DISTINCT Country  FROM people  WHERE Age > 30 OR Age < 25;
SELECT MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age, AVG(Age) AS Average_Age FROM people;
SELECT Name, Country  FROM people  WHERE Age < (SELECT AVG(Age) FROM people);
SELECT p1.Name AS Male_Name, p2.Name AS Female_Name FROM wedding w JOIN people p1 ON w.Male_ID = p1.People_ID JOIN people p2 ON w.Female_ID = p2.People_ID WHERE w.Year > 2014;
SELECT p.Name, p.Age  FROM people p  WHERE p.Is_Male = 1  AND p.People_ID NOT IN (SELECT Male_ID FROM wedding);
SELECT Name FROM church  WHERE Church_ID NOT IN (SELECT Church_ID FROM wedding WHERE Year = 2015);
SELECT c.Name FROM church c JOIN wedding w ON c.Church_ID = w.Church_ID GROUP BY c.Name HAVING COUNT(w.Church_ID) >= 2;
SELECT p.Name  FROM people p  JOIN wedding w ON p.People_ID = w.Female_ID  WHERE p.Country = 'Canada' AND w.Year = 2016;
SELECT COUNT(*) FROM wedding WHERE Year = 2016;
SELECT DISTINCT c.Name FROM church c JOIN wedding w ON c.Church_ID = w.Church_ID JOIN people p1 ON w.Male_ID = p1.People_ID AND p1.Age > 30 JOIN people p2 ON w.Female_ID = p2.People_ID AND p2.Age > 30;
SELECT Country, COUNT(*) AS Number_of_People FROM people GROUP BY Country;
SELECT COUNT(DISTINCT Church_ID)  FROM wedding  WHERE Year = 2016;
SELECT COUNT(*) FROM artist;
SELECT COUNT(*) AS Number_of_Artists FROM artist;
SELECT Name, Age, Country  FROM artist  ORDER BY Year_Join;
SELECT Name, Age, Country  FROM artist  ORDER BY Year_Join;
SELECT DISTINCT Country FROM artist;
SELECT DISTINCT Country FROM artist;
SELECT Name, Year_Join  FROM artist  WHERE Country <> 'United States';
SELECT Name, Year_Join  FROM artist  WHERE Country <> 'United States';
SELECT COUNT(*)  FROM artist  WHERE Age > 46 AND Year_Join > 1990;
SELECT COUNT(*)  FROM artist  WHERE Age > 46 AND Year_Join > 1990;
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age FROM artist WHERE Country = 'United States';
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age FROM artist WHERE Country = 'United States';
SELECT Name FROM artist ORDER BY Year_Join DESC LIMIT 1;
SELECT Name  FROM artist  WHERE Year_Join = (SELECT MAX(Year_Join) FROM artist);
SELECT COUNT(*) FROM exhibition WHERE Year >= 2005;
SELECT COUNT(*)  FROM exhibition  WHERE Year >= 2005;
SELECT Theme, Year  FROM exhibition  WHERE Ticket_Price < 15;
SELECT Theme, Year  FROM exhibition  WHERE Ticket_Price < 15;
SELECT a.Name, COUNT(e.Exhibition_ID) AS Number_of_Exhibitions FROM artist a LEFT JOIN exhibition e ON a.Artist_ID = e.Artist_ID GROUP BY a.Name;
SELECT a.Name, COUNT(e.Exhibition_ID) AS Exhibition_Count FROM artist a LEFT JOIN exhibition e ON a.Artist_ID = e.Artist_ID GROUP BY a.Artist_ID, a.Name;
SELECT a.Name, a.Country FROM artist a JOIN exhibition e ON a.Artist_ID = e.Artist_ID GROUP BY a.Artist_ID, a.Name, a.Country ORDER BY COUNT(e.Exhibition_ID) DESC LIMIT 1;
SELECT a.Name, a.Country FROM artist a JOIN exhibition e ON a.Artist_ID = e.Artist_ID GROUP BY a.Artist_ID ORDER BY COUNT(e.Exhibition_ID) DESC LIMIT 1;
SELECT Name  FROM artist  WHERE Artist_ID NOT IN (SELECT Artist_ID FROM exhibition);
SELECT Name  FROM artist  WHERE Artist_ID NOT IN (SELECT Artist_ID FROM exhibition);
SELECT e.Theme, a.Name FROM exhibition e JOIN artist a ON e.Artist_ID = a.Artist_ID WHERE e.Ticket_Price > (SELECT AVG(Ticket_Price) FROM exhibition);
SELECT a.Name, e.Theme FROM artist a JOIN exhibition e ON a.Artist_ID = e.Artist_ID WHERE e.Ticket_Price > (SELECT AVG(Ticket_Price) FROM exhibition);
SELECT AVG(Ticket_Price) AS Average_Ticket_Price,         MIN(Ticket_Price) AS Minimum_Ticket_Price,         MAX(Ticket_Price) AS Maximum_Ticket_Price  FROM exhibition  WHERE Year < 2009;
SELECT AVG(Ticket_Price) AS Average_Ticket_Price,         MIN(Ticket_Price) AS Minimum_Ticket_Price,         MAX(Ticket_Price) AS Maximum_Ticket_Price FROM exhibition WHERE Year < 2009;
SELECT Theme, Year  FROM exhibition  ORDER BY Ticket_Price DESC;
SELECT Theme, Year  FROM exhibition  ORDER BY Ticket_Price DESC;
SELECT e.Theme, er.Date, er.Attendance FROM exhibition e JOIN exhibition_record er ON e.Exhibition_ID = er.Exhibition_ID WHERE e.Year = 2004;
SELECT e.Theme, er.Date, er.Attendance FROM exhibition e JOIN exhibition_record er ON e.Exhibition_ID = er.Exhibition_ID WHERE e.Year = 2004;
SELECT Name  FROM artist  WHERE Artist_ID NOT IN (     SELECT Artist_ID      FROM exhibition      WHERE Year = 2004 );
SELECT Name  FROM artist  WHERE Artist_ID NOT IN (     SELECT Artist_ID      FROM exhibition      WHERE Year = 2004 );
SELECT DISTINCT e.Theme FROM exhibition e JOIN exhibition_record er ON e.Exhibition_ID = er.Exhibition_ID WHERE er.Attendance < 100 OR er.Attendance > 500;
SELECT DISTINCT e.Theme FROM exhibition e JOIN exhibition_record er ON e.Exhibition_ID = er.Exhibition_ID WHERE er.Attendance < 100 OR er.Attendance > 500 GROUP BY e.Theme HAVING COUNT(DISTINCT CASE WHEN er.Attendance < 100 THEN er.Exhibition_ID END) > 0    AND COUNT(DISTINCT CASE WHEN er.Attendance > 500 THEN er.Exhibition_ID END) > 0;
SELECT COUNT(*)  FROM exhibition_record er  JOIN exhibition e ON er.Exhibition_ID = e.Exhibition_ID  WHERE er.Attendance > 100 OR e.Ticket_Price < 10;
SELECT COUNT(*)  FROM exhibition e  JOIN exhibition_record er ON e.Exhibition_ID = er.Exhibition_ID  WHERE er.Attendance > 100 OR e.Ticket_Price < 10;
SELECT a.Name FROM artist a JOIN exhibition e ON a.Artist_ID = e.Artist_ID JOIN exhibition_record er ON e.Exhibition_ID = er.Exhibition_ID GROUP BY a.Artist_ID, a.Name HAVING AVG(er.Attendance) > 200;
SELECT a.Name FROM artist a JOIN exhibition e ON a.Artist_ID = e.Artist_ID JOIN exhibition_record er ON e.Exhibition_ID = er.Exhibition_ID GROUP BY a.Artist_ID HAVING AVG(er.Attendance) > 200;
SELECT i_id FROM item WHERE title = 'orange';
SELECT * FROM item;
SELECT COUNT(*) AS number_of_reviews FROM review;
SELECT COUNT(*) FROM useracct;
SELECT AVG(rating) AS average_rating, MAX(rating) AS maximum_rating FROM review;
SELECT MAX(rank) AS highest_rank FROM review;
SELECT COUNT(DISTINCT u_id) AS different_users FROM review;
SELECT COUNT(DISTINCT i_id) AS different_items_reviewed FROM review;
SELECT COUNT(*) AS num_items_without_reviews FROM item WHERE i_id NOT IN (SELECT DISTINCT i_id FROM review);
SELECT name  FROM useracct  WHERE u_id NOT IN (SELECT u_id FROM review);
SELECT item.title  FROM item  JOIN review ON item.i_id = review.i_id  WHERE review.rating = 10;
SELECT i.title FROM item i JOIN review r ON i.i_id = r.i_id GROUP BY i.i_id, i.title HAVING AVG(r.rating) > (SELECT AVG(r2.rating) FROM review r2);
SELECT DISTINCT item.title FROM item JOIN review ON item.i_id = review.i_id WHERE review.rating < 5;
SELECT i.title FROM item i JOIN review r ON i.i_id = r.i_id WHERE r.rating > 8 INTERSECT SELECT i.title FROM item i JOIN review r ON i.i_id = r.i_id WHERE r.rating < 5;
SELECT i.title FROM item i JOIN review r ON i.i_id = r.i_id GROUP BY i.i_id, i.title HAVING AVG(r.rating) > 5 AND MAX(r.rank) > 3;
SELECT title  FROM item  WHERE i_id = (     SELECT i_id      FROM review      GROUP BY i_id      ORDER BY AVG(rating) ASC      LIMIT 1 );
SELECT title FROM item ORDER BY title ASC;
SELECT ua.name FROM useracct ua JOIN review r ON ua.u_id = r.u_id GROUP BY ua.u_id, ua.name ORDER BY COUNT(r.a_id) DESC LIMIT 1;
SELECT i.title, i.i_id FROM item i JOIN review r ON i.i_id = r.i_id GROUP BY i.i_id, i.title ORDER BY AVG(r.rating) DESC LIMIT 1;
SELECT i.title, i.i_id FROM item i JOIN review r ON i.i_id = r.i_id GROUP BY i.i_id, i.title ORDER BY AVG(r.rank) DESC LIMIT 1;
SELECT ua.name, AVG(r.rating) AS average_rating FROM useracct ua JOIN review r ON ua.u_id = r.u_id GROUP BY ua.u_id, ua.name;
SELECT ua.name, COUNT(r.a_id) AS review_count FROM useracct ua LEFT JOIN review r ON ua.u_id = r.u_id GROUP BY ua.u_id, ua.name;
SELECT ua.name FROM review r JOIN useracct ua ON r.u_id = ua.u_id WHERE r.rating = (SELECT MAX(rating) FROM review);
SELECT ua.name FROM trust t JOIN useracct ua ON t.source_u_id = ua.u_id GROUP BY t.source_u_id ORDER BY AVG(t.trust) DESC LIMIT 1;
SELECT ua.name, AVG(t.trust) AS average_trust_score FROM trust t JOIN useracct ua ON t.target_u_id = ua.u_id GROUP BY ua.name;
SELECT target_u_id, SUM(trust) AS total_trust FROM trust GROUP BY target_u_id ORDER BY total_trust ASC LIMIT 1;
SELECT title  FROM item  WHERE i_id NOT IN (SELECT i_id FROM review);
SELECT name  FROM useracct  WHERE u_id NOT IN (SELECT DISTINCT u_id FROM review);
SELECT COUNT(*)  FROM useracct  WHERE u_id NOT IN (SELECT DISTINCT u_id FROM review);
SELECT COUNT(*) AS num_items_without_reviews FROM item WHERE i_id NOT IN (SELECT DISTINCT i_id FROM review);
SELECT COUNT(*) AS Number_of_Players FROM player;
SELECT Player_name FROM player ORDER BY Votes ASC;
SELECT Gender, Occupation FROM player;
SELECT Player_name, Residence  FROM player  WHERE Occupation <> 'Researcher';
SELECT Sponsor_name  FROM player  WHERE Residence IN ('Brandon', 'Birtle');
SELECT Player_name  FROM player  ORDER BY Votes DESC  LIMIT 1;
SELECT Occupation, COUNT(Player_ID) AS Number_of_Players FROM player GROUP BY Occupation;
SELECT Occupation, COUNT(*) AS Count FROM player GROUP BY Occupation ORDER BY Count DESC LIMIT 1;
SELECT Residence FROM player GROUP BY Residence HAVING COUNT(Player_ID) >= 2;
SELECT p.Player_name, c.Coach_name FROM player p JOIN player_coach pc ON p.Player_ID = pc.Player_ID JOIN coach c ON pc.Coach_ID = c.Coach_ID;
SELECT p.Player_name FROM player p JOIN player_coach pc ON p.Player_ID = pc.Player_ID JOIN coach c ON pc.Coach_ID = c.Coach_ID WHERE c.Rank = 1;
SELECT p.Player_name, p.Gender FROM player p JOIN player_coach pc ON p.Player_ID = pc.Player_ID WHERE pc.Starting_year > 2011;
SELECT p.Player_name, c.Coach_name FROM player p JOIN player_coach pc ON p.Player_ID = pc.Player_ID JOIN coach c ON pc.Coach_ID = c.Coach_ID ORDER BY p.Votes DESC;
SELECT Player_name  FROM player  WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach);
SELECT DISTINCT p1.Residence FROM player p1 JOIN player p2 ON p1.Residence = p2.Residence WHERE p1.Gender = 'M' AND p2.Gender = 'F';
SELECT c.Club_ID, c.Club_name, COUNT(co.Coach_ID) AS Number_of_Coaches FROM club c LEFT JOIN coach co ON c.Club_ID = co.Club_ID GROUP BY c.Club_ID, c.Club_name;
SELECT SUM(m.Gold) AS Total_Gold FROM match_result m JOIN club c ON m.Club_ID = c.Club_ID WHERE c.Club_ID = (     SELECT Club_ID     FROM coach     GROUP BY Club_ID     ORDER BY COUNT(Coach_ID) DESC     LIMIT 1 );
SELECT COUNT(*) FROM gymnast;
SELECT COUNT(*) FROM gymnast;
SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC;
SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC;
SELECT Total_Points  FROM gymnast  ORDER BY Floor_Exercise_Points DESC;
SELECT Total_Points  FROM gymnast  ORDER BY Floor_Exercise_Points DESC;
SELECT AVG(Horizontal_Bar_Points) AS Average_Horizontal_Bar_Points FROM gymnast;
SELECT AVG(Horizontal_Bar_Points) AS Average_Horizontal_Bar_Points FROM gymnast;
SELECT Name FROM people ORDER BY Name ASC;
SELECT Name FROM people ORDER BY Name;
SELECT p.Name  FROM people p  JOIN gymnast g ON p.People_ID = g.Gymnast_ID;
SELECT p.Name  FROM gymnast g  JOIN people p ON g.Gymnast_ID = p.People_ID;
SELECT p.Name  FROM people p  JOIN gymnast g ON p.People_ID = g.Gymnast_ID  WHERE p.Hometown <> 'Santo Domingo';
SELECT p.Name  FROM people p  JOIN gymnast g ON p.People_ID = g.Gymnast_ID  WHERE p.Hometown <> 'Santo Domingo';
SELECT Age FROM people WHERE Height = (SELECT MAX(Height) FROM people);
SELECT Age FROM people WHERE Height = (SELECT MAX(Height) FROM people);
SELECT Name FROM people ORDER BY Age DESC LIMIT 5;
SELECT Name FROM people ORDER BY Age DESC LIMIT 5;
SELECT Total_Points  FROM gymnast  WHERE Gymnast_ID = (SELECT Gymnast_ID                      FROM people                      ORDER BY Age ASC                      LIMIT 1);
SELECT Total_Points  FROM gymnast  WHERE Gymnast_ID = (SELECT Gymnast_ID                      FROM people                      ORDER BY Age                      LIMIT 1);
SELECT AVG(p.Age) AS Average_Age FROM gymnast g JOIN people p ON g.Gymnast_ID = p.People_ID;
SELECT AVG(p.Age) AS Average_Age FROM gymnast g JOIN people p ON g.Gymnast_ID = p.People_ID;
SELECT DISTINCT p.Hometown FROM gymnast g JOIN people p ON g.Gymnast_ID = p.People_ID WHERE g.Total_Points > 57.5;
SELECT DISTINCT p.Hometown FROM gymnast g JOIN people p ON g.Gymnast_ID = p.People_ID WHERE g.Total_Points > 57.5;
SELECT p.Hometown, COUNT(g.Gymnast_ID) AS Number_of_Gymnasts FROM gymnast g JOIN people p ON g.Gymnast_ID = p.People_ID GROUP BY p.Hometown;
SELECT p.Hometown, COUNT(g.Gymnast_ID) AS NumberOfGymnasts FROM people p JOIN gymnast g ON p.People_ID = g.Gymnast_ID GROUP BY p.Hometown;
SELECT Hometown, COUNT(*) AS Count FROM people WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast) GROUP BY Hometown ORDER BY Count DESC LIMIT 1;
SELECT Hometown FROM people WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast) GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.Hometown FROM people p JOIN gymnast g ON p.People_ID = g.Gymnast_ID GROUP BY p.Hometown HAVING COUNT(g.Gymnast_ID) >= 2;
SELECT p.Hometown FROM people p JOIN gymnast g ON p.People_ID = g.Gymnast_ID GROUP BY p.Hometown HAVING COUNT(g.Gymnast_ID) >= 2;
SELECT p.Name  FROM people p  JOIN gymnast g ON p.People_ID = g.Gymnast_ID  ORDER BY p.Height ASC;
SELECT p.Name  FROM people p  JOIN gymnast g ON p.People_ID = g.Gymnast_ID  ORDER BY p.Height ASC;
SELECT DISTINCT Hometown  FROM people  WHERE People_ID NOT IN (SELECT DISTINCT Gymnast_ID FROM gymnast);
SELECT DISTINCT p.Hometown FROM people p WHERE p.People_ID NOT IN (SELECT g.Gymnast_ID FROM gymnast g);
SELECT DISTINCT p1.Hometown FROM people p1 JOIN people p2 ON p1.Hometown = p2.Hometown WHERE p1.Age > 23 AND p2.Age < 20;
SELECT DISTINCT p1.Hometown FROM people p1 WHERE p1.Age > 23 INTERSECT SELECT DISTINCT p2.Hometown FROM people p2 WHERE p2.Age < 20;
SELECT COUNT(DISTINCT Hometown) AS Distinct_Hometowns FROM people;
SELECT COUNT(DISTINCT Hometown) AS Different_Hometowns FROM people;
SELECT p.Age  FROM gymnast g  JOIN people p ON g.Gymnast_ID = p.People_ID  ORDER BY g.Total_Points DESC;
SELECT p.Age  FROM gymnast g  JOIN people p ON g.Gymnast_ID = p.People_ID  ORDER BY g.Total_Points DESC;
SELECT SUM(S.balance) AS total_savings FROM SAVINGS S JOIN ACCOUNTS A ON S.custid = A.custid WHERE A.name <> 'Brown';
SELECT SUM(S.balance) AS total_savings_balance FROM SAVINGS S JOIN ACCOUNTS A ON S.custid = A.custid WHERE A.name <> 'Brown';
SELECT COUNT(*) AS total_accounts FROM ACCOUNTS;
SELECT COUNT(*) AS account_count FROM ACCOUNTS;
SELECT SUM(balance) AS total_checking_balance FROM CHECKING;
SELECT SUM(balance) AS total_checking_balance FROM CHECKING;
SELECT AVG(balance) AS average_checking_balance FROM CHECKING;
SELECT AVG(balance) AS average_checking_balance FROM CHECKING;
SELECT COUNT(*)  FROM SAVINGS  WHERE balance > (SELECT AVG(balance) FROM SAVINGS);
SELECT COUNT(*)  FROM SAVINGS  WHERE balance > (SELECT AVG(balance) FROM SAVINGS);
SELECT a.custid, a.name FROM ACCOUNTS a JOIN CHECKING c ON a.custid = c.custid WHERE c.balance < (SELECT MAX(balance) FROM CHECKING);
SELECT a.custid, a.name FROM ACCOUNTS a JOIN CHECKING c ON a.custid = c.custid WHERE c.balance < (SELECT MAX(balance) FROM CHECKING);
SELECT CHECKING.balance  FROM ACCOUNTS  JOIN CHECKING ON ACCOUNTS.custid = CHECKING.custid  WHERE ACCOUNTS.name LIKE '%ee%';
SELECT c.balance  FROM ACCOUNTS a  JOIN CHECKING c ON a.custid = c.custid  WHERE a.name LIKE '%ee%';
SELECT S.balance AS savings_balance, C.balance AS checking_balance FROM ACCOUNTS A JOIN SAVINGS S ON A.custid = S.custid JOIN CHECKING C ON A.custid = C.custid WHERE A.name = 'Brown';
SELECT a.name, s.balance AS savings_balance, c.balance AS checking_balance FROM ACCOUNTS a LEFT JOIN SAVINGS s ON a.custid = s.custid LEFT JOIN CHECKING c ON a.custid = c.custid WHERE a.name = 'Brown';
SELECT a.name FROM ACCOUNTS a JOIN CHECKING c ON a.custid = c.custid JOIN SAVINGS s ON a.custid = s.custid WHERE c.balance > (SELECT AVG(balance) FROM CHECKING)   AND s.balance < (SELECT AVG(balance) FROM SAVINGS);
SELECT a.name FROM ACCOUNTS a JOIN CHECKING c ON a.custid = c.custid JOIN SAVINGS s ON a.custid = s.custid WHERE c.balance > (SELECT AVG(balance) FROM CHECKING) AND s.balance < (SELECT AVG(balance) FROM SAVINGS);
SELECT c.balance FROM CHECKING c JOIN SAVINGS s ON c.custid = s.custid WHERE s.balance > (SELECT AVG(balance) FROM SAVINGS);
SELECT c.balance FROM CHECKING c JOIN SAVINGS s ON c.custid = s.custid WHERE s.balance > (SELECT AVG(balance) FROM SAVINGS);
SELECT name FROM ACCOUNTS ORDER BY name;
SELECT name FROM ACCOUNTS ORDER BY name;
SELECT a.name FROM ACCOUNTS a JOIN SAVINGS s ON a.custid = s.custid JOIN CHECKING c ON a.custid = c.custid ORDER BY (s.balance + c.balance) ASC LIMIT 1;
SELECT a.name FROM ACCOUNTS a JOIN SAVINGS s ON a.custid = s.custid JOIN CHECKING c ON a.custid = c.custid ORDER BY (s.balance + c.balance) ASC LIMIT 1;
SELECT a.name, COALESCE(s.balance, 0) + COALESCE(c.balance, 0) AS total_balance FROM ACCOUNTS a LEFT JOIN SAVINGS s ON a.custid = s.custid LEFT JOIN CHECKING c ON a.custid = c.custid WHERE s.balance > (SELECT AVG(balance) FROM SAVINGS);
SELECT a.name, COALESCE(SUM(s.balance), 0) AS total_savings, COALESCE(SUM(c.balance), 0) AS total_checking FROM ACCOUNTS a LEFT JOIN SAVINGS s ON a.custid = s.custid LEFT JOIN CHECKING c ON a.custid = c.custid WHERE s.balance > (SELECT AVG(balance) FROM SAVINGS) GROUP BY a.name;
SELECT a.name, c.balance  FROM ACCOUNTS a  JOIN SAVINGS s ON a.custid = s.custid  JOIN CHECKING c ON a.custid = c.custid  WHERE s.balance = (SELECT MIN(balance) FROM SAVINGS);
SELECT a.name, c.balance FROM ACCOUNTS a JOIN CHECKING c ON a.custid = c.custid WHERE a.custid = (SELECT custid FROM SAVINGS ORDER BY balance ASC LIMIT 1);
SELECT a.name, COUNT(c.custid) AS checking_account_count FROM ACCOUNTS a LEFT JOIN CHECKING c ON a.custid = c.custid GROUP BY a.name;
SELECT a.name, COUNT(c.custid) AS checking_account_count FROM ACCOUNTS a LEFT JOIN CHECKING c ON a.custid = c.custid GROUP BY a.name;
SELECT a.name, SUM(s.balance) AS total_saving_balance FROM ACCOUNTS a JOIN SAVINGS s ON a.custid = s.custid GROUP BY a.name;
SELECT a.name, COALESCE(s.balance, 0) AS total_savings FROM ACCOUNTS a LEFT JOIN SAVINGS s ON a.custid = s.custid;
SELECT a.name  FROM ACCOUNTS a JOIN CHECKING c ON a.custid = c.custid WHERE c.balance < (SELECT AVG(balance) FROM CHECKING);
SELECT a.name FROM ACCOUNTS a JOIN CHECKING c ON a.custid = c.custid WHERE c.balance < (SELECT AVG(balance) FROM CHECKING);
SELECT S.balance  FROM SAVINGS S  JOIN CHECKING C ON S.custid = C.custid  WHERE C.balance = (SELECT MAX(balance) FROM CHECKING);
SELECT S.balance FROM SAVINGS S JOIN CHECKING C ON S.custid = C.custid WHERE C.balance = (SELECT MAX(balance) FROM CHECKING);
SELECT a.custid, a.name, COALESCE(s.balance, 0) + COALESCE(c.balance, 0) AS total_balance FROM ACCOUNTS a LEFT JOIN SAVINGS s ON a.custid = s.custid LEFT JOIN CHECKING c ON a.custid = c.custid ORDER BY total_balance ASC;
SELECT a.custid, a.name, COALESCE(s.balance, 0) + COALESCE(c.balance, 0) AS total_balance FROM ACCOUNTS a LEFT JOIN SAVINGS s ON a.custid = s.custid LEFT JOIN CHECKING c ON a.custid = c.custid ORDER BY total_balance;
SELECT a.name, c.balance FROM ACCOUNTS a JOIN SAVINGS s ON a.custid = s.custid JOIN CHECKING c ON a.custid = c.custid WHERE s.balance = (SELECT MIN(balance) FROM SAVINGS);
SELECT a.name, c.balance FROM ACCOUNTS a JOIN SAVINGS s ON a.custid = s.custid JOIN CHECKING c ON a.custid = c.custid WHERE s.balance = (SELECT MIN(balance) FROM SAVINGS);
SELECT A.name, C.balance AS checking_balance, S.balance AS savings_balance FROM ACCOUNTS A LEFT JOIN CHECKING C ON A.custid = C.custid LEFT JOIN SAVINGS S ON A.custid = S.custid;
SELECT A.name, C.balance AS checking_balance, S.balance AS savings_balance FROM ACCOUNTS A LEFT JOIN CHECKING C ON A.custid = C.custid LEFT JOIN SAVINGS S ON A.custid = S.custid;
SELECT a.name, c.balance AS checking_balance, s.balance AS savings_balance FROM ACCOUNTS a JOIN CHECKING c ON a.custid = c.custid JOIN SAVINGS s ON a.custid = s.custid ORDER BY (c.balance + s.balance) DESC;
SELECT a.name, c.balance AS checking_balance, s.balance AS savings_balance FROM ACCOUNTS a JOIN CHECKING c ON a.custid = c.custid JOIN SAVINGS s ON a.custid = s.custid ORDER BY (c.balance + s.balance) DESC;
SELECT a.name FROM ACCOUNTS a JOIN CHECKING c ON a.custid = c.custid JOIN SAVINGS s ON a.custid = s.custid WHERE c.balance > s.balance;
SELECT a.name FROM ACCOUNTS a JOIN CHECKING c ON a.custid = c.custid JOIN SAVINGS s ON a.custid = s.custid WHERE c.balance > s.balance;
SELECT a.name, (s.balance + c.balance) AS total_balance FROM ACCOUNTS a JOIN SAVINGS s ON a.custid = s.custid JOIN CHECKING c ON a.custid = c.custid WHERE s.balance < c.balance;
SELECT a.name, (s.balance + c.balance) AS total_balance FROM ACCOUNTS a JOIN SAVINGS s ON a.custid = s.custid JOIN CHECKING c ON a.custid = c.custid WHERE s.balance < c.balance;
SELECT a.name, s.balance FROM ACCOUNTS a JOIN SAVINGS s ON a.custid = s.custid ORDER BY s.balance DESC LIMIT 3;
SELECT a.name, s.balance FROM ACCOUNTS a JOIN SAVINGS s ON a.custid = s.custid ORDER BY s.balance DESC LIMIT 3;
SELECT COUNT(*)  FROM browser  WHERE market_share >= 5;
SELECT name FROM browser ORDER BY market_share DESC;
SELECT id, name, market_share FROM browser;
SELECT MAX(market_share) AS max_market_share,         MIN(market_share) AS min_market_share,         AVG(market_share) AS avg_market_share  FROM browser;
SELECT id, market_share FROM browser WHERE name = 'Safari';
SELECT name, Operating_system  FROM Web_client_accelerator  WHERE Connection <> 'Broadband';
SELECT b.name  FROM browser b JOIN accelerator_compatible_browser acb ON b.id = acb.browser_id JOIN Web_client_accelerator wca ON acb.accelerator_id = wca.id WHERE wca.name = 'CProxy' AND acb.compatible_since_year > 1998;
SELECT wa.id, wa.name FROM Web_client_accelerator wa JOIN accelerator_compatible_browser acb ON wa.id = acb.accelerator_id GROUP BY wa.id, wa.name HAVING COUNT(acb.browser_id) >= 2;
SELECT b.id, b.name FROM browser b JOIN accelerator_compatible_browser acb ON b.id = acb.browser_id GROUP BY b.id, b.name ORDER BY COUNT(acb.accelerator_id) DESC LIMIT 1;
SELECT acb.compatible_since_year FROM Web_client_accelerator wca JOIN accelerator_compatible_browser acb ON wca.id = acb.accelerator_id JOIN browser b ON acb.browser_id = b.id WHERE wca.name = 'CACHEbox' AND b.name = 'Internet Explorer';
SELECT COUNT(DISTINCT Client) AS different_clients FROM Web_client_accelerator;
SELECT COUNT(DISTINCT wca.id) AS incompatible_accelerators FROM Web_client_accelerator wca LEFT JOIN accelerator_compatible_browser acb ON wca.id = acb.accelerator_id WHERE acb.browser_id IS NULL;
SELECT DISTINCT wa.name FROM Web_client_accelerator wa JOIN accelerator_compatible_browser acb ON wa.id = acb.accelerator_id JOIN browser b ON acb.browser_id = b.id WHERE b.market_share > 15;
SELECT b.name FROM browser b JOIN accelerator_compatible_browser acb1 ON b.id = acb1.browser_id JOIN Web_client_accelerator wca1 ON acb1.accelerator_id = wca1.id WHERE wca1.name = 'CACHEbox' INTERSECT SELECT b.name FROM browser b JOIN accelerator_compatible_browser acb2 ON b.id = acb2.browser_id JOIN Web_client_accelerator wca2 ON acb2.accelerator_id = wca2.id WHERE wca2.name = 'Fasterfox';
SELECT DISTINCT wca.name AS accelerator_name, wca.Operating_system FROM Web_client_accelerator wca WHERE wca.id NOT IN (     SELECT acb.accelerator_id     FROM accelerator_compatible_browser acb     JOIN browser b ON acb.browser_id = b.id     WHERE b.name = 'Opera' );
SELECT name FROM Web_client_accelerator WHERE name LIKE '%Opera%';
SELECT Operating_system, COUNT(*) AS number_of_web_accelerators FROM Web_client_accelerator GROUP BY Operating_system;
SELECT b.name AS browser_name, wa.name AS accelerator_name, acb.compatible_since_year FROM accelerator_compatible_browser acb JOIN browser b ON acb.browser_id = b.id JOIN Web_client_accelerator wa ON acb.accelerator_id = wa.id ORDER BY acb.compatible_since_year DESC;
SELECT COUNT(*) FROM wrestler;
SELECT COUNT(*) AS Number_of_Wrestlers FROM wrestler;
SELECT Name FROM wrestler ORDER BY Days_held DESC;
SELECT Name FROM wrestler ORDER BY Days_held DESC;
SELECT Name  FROM wrestler  ORDER BY Days_held ASC  LIMIT 1;
SELECT Name  FROM wrestler  ORDER BY Days_held ASC  LIMIT 1;
SELECT DISTINCT Reign  FROM wrestler  WHERE Location <> 'Tokyo,Japan';
SELECT DISTINCT Reign  FROM wrestler  WHERE Location <> 'Tokyo, Japan';
SELECT Name, Location FROM wrestler;
SELECT Name, Location FROM wrestler;
SELECT Elimination_Move  FROM Elimination  WHERE Team = 'Team Orton';
SELECT Elimination_Move  FROM Elimination  WHERE Team = 'Orton';
SELECT w.Name, e.Elimination_Move FROM wrestler w JOIN Elimination e ON w.Wrestler_ID = e.Wrestler_ID;
SELECT w.Name, e.Elimination_Move FROM wrestler w JOIN Elimination e ON w.Wrestler_ID = e.Wrestler_ID;
SELECT w.Name, e.Team FROM wrestler w JOIN Elimination e ON w.Wrestler_ID = e.Wrestler_ID ORDER BY w.Days_held DESC;
SELECT w.Name, e.Team FROM wrestler w JOIN Elimination e ON w.Wrestler_ID = e.Wrestler_ID ORDER BY w.Days_held DESC;
SELECT e.Time FROM Elimination e JOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Days_held = (SELECT MAX(Days_held) FROM wrestler);
SELECT e.Time FROM wrestler w JOIN Elimination e ON w.Wrestler_ID = e.Wrestler_ID WHERE w.Days_held = (SELECT MAX(Days_held) FROM wrestler);
SELECT e.Time FROM Elimination e JOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Days_held > 50;
SELECT e.Time FROM Elimination e JOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Days_held > 50;
SELECT Team, COUNT(*) AS Number_of_Eliminations FROM Elimination GROUP BY Team;
SELECT Team, COUNT(*) AS Total_Eliminations FROM Elimination GROUP BY Team;
SELECT Team FROM Elimination GROUP BY Team HAVING COUNT(*) > 3;
SELECT Team FROM Elimination GROUP BY Team HAVING COUNT(*) > 3;
SELECT Reign, Days_held FROM wrestler;
SELECT Reign, Days_held FROM wrestler;
SELECT Name FROM wrestler WHERE Days_held < 100;
SELECT Name  FROM wrestler  WHERE Days_held < 100;
SELECT Reign, COUNT(*) AS Reign_Count FROM wrestler GROUP BY Reign ORDER BY Reign_Count DESC;
SELECT Reign, COUNT(*) AS Count FROM wrestler GROUP BY Reign ORDER BY Count DESC LIMIT 1;
SELECT Location FROM wrestler GROUP BY Location HAVING COUNT(Wrestler_ID) > 2;
SELECT Location FROM wrestler GROUP BY Location HAVING COUNT(DISTINCT Wrestler_ID) > 2;
SELECT Name  FROM wrestler  WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM Elimination);
SELECT w.Name  FROM wrestler w  LEFT JOIN Elimination e ON w.Wrestler_ID = e.Wrestler_ID  WHERE e.Wrestler_ID IS NULL;
SELECT DISTINCT e1.Team FROM Elimination e1 JOIN Elimination e2 ON e1.Team = e2.Team WHERE e1.Eliminated_By = 'Orton' AND e2.Eliminated_By = 'Benjamin';
SELECT DISTINCT Team FROM Elimination WHERE Wrestler_ID IN (     SELECT Wrestler_ID     FROM Elimination     WHERE Eliminated_By = 'Orton' ) AND Wrestler_ID IN (     SELECT Wrestler_ID     FROM Elimination     WHERE Eliminated_By = 'Benjamin' );
SELECT COUNT(DISTINCT Team) AS Distinct_Teams_Eliminated FROM Elimination;
SELECT COUNT(DISTINCT Team) AS Different_Teams FROM Elimination;
SELECT e.Time  FROM Elimination e  JOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID  WHERE w.Name IN ('Punk', 'Orton');
SELECT Time  FROM Elimination  WHERE Eliminated_By IN ('Punk', 'Orton');
SELECT COUNT(*) AS total_schools FROM School;
SELECT COUNT(*) AS number_of_schools FROM School;
SELECT School_name FROM School ORDER BY School_name ASC;
SELECT School_name, Location, Mascot FROM School;
SELECT SUM(Enrollment) AS total_enrollment, AVG(Enrollment) AS average_enrollment FROM School;
SELECT Mascot  FROM School  WHERE Enrollment > (SELECT AVG(Enrollment) FROM School);
SELECT School_name  FROM School  ORDER BY Enrollment ASC  LIMIT 1;
SELECT AVG(Enrollment) AS average_enrollment, MAX(Enrollment) AS maximum_enrollment, MIN(Enrollment) AS minimum_enrollment FROM School;
SELECT County, COUNT(School_id) AS Number_of_Schools, SUM(Enrollment) AS Total_Enrollment FROM School GROUP BY County;
SELECT COUNT(DISTINCT e.donator_name) AS donor_count FROM endowment e JOIN School s ON e.School_id = s.School_id WHERE s.School_name = 'Glenn';
SELECT donator_name, amount  FROM endowment  ORDER BY amount DESC;
SELECT School_name  FROM School  WHERE School_id NOT IN (SELECT School_id FROM endowment);
SELECT S.School_name FROM School S JOIN endowment E ON S.School_id = E.School_id WHERE E.amount <= 10;
SELECT DISTINCT e1.donator_name FROM endowment e1 JOIN School s1 ON e1.School_id = s1.School_id WHERE s1.School_name = 'Glenn' AND e1.donator_name IN (     SELECT e2.donator_name     FROM endowment e2     JOIN School s2 ON e2.School_id = s2.School_id     WHERE s2.School_name = 'Triton' );
SELECT donator_name  FROM endowment  WHERE amount >= 9;
SELECT donator_name, amount  FROM endowment  WHERE amount = (SELECT MAX(amount) FROM endowment);
SELECT COUNT(*)  FROM budget  WHERE Budgeted > 3000 AND Year <= 2001;
SELECT COUNT(*)  FROM budget  WHERE Year <= 2001 AND Budgeted > 3000;
SELECT s.School_name, b.Budgeted, b.Invested FROM School s JOIN budget b ON s.School_id = b.School_id WHERE b.Year >= 2002;
SELECT donator_name FROM endowment;
SELECT COUNT(*)  FROM budget  WHERE Budgeted < Invested;
SELECT SUM(b.Budgeted) AS total_budget FROM budget b JOIN School s ON b.School_id = s.School_id WHERE s.School_name = 'Glenn';
SELECT DISTINCT s.School_name FROM School s JOIN budget b ON s.School_id = b.School_id JOIN endowment e ON s.School_id = e.School_id WHERE b.Budgeted > 100 OR e.amount > 10;
SELECT S.School_name FROM School S JOIN endowment E ON S.School_id = E.School_id WHERE E.amount > 8.5 GROUP BY S.School_id, S.School_name HAVING COUNT(E.donator_name) > 1;
SELECT COUNT(DISTINCT School_id) AS number_of_schools FROM endowment WHERE amount < 8.5 GROUP BY School_id HAVING COUNT(donator_name) > 1;
SELECT s.School_name, s.IHSAA_Football_Class, s.Mascot FROM School s JOIN budget b ON s.School_id = b.School_id WHERE b.Budgeted > 6000 OR YEAR(s.Founded) < 2003 ORDER BY b.total_budget_percent_invested, b.total_budget_percent_budgeted;
SELECT COUNT(*) FROM building;
SELECT Name, Street_address, Floors  FROM building  ORDER BY Floors;
SELECT Name FROM building ORDER BY Height_feet DESC LIMIT 1;
SELECT AVG(Floors) AS average_floors, MAX(Floors) AS max_floors, MIN(Floors) AS min_floors FROM building;
SELECT COUNT(*)  FROM building  WHERE Height_feet > (SELECT AVG(Height_feet) FROM building)     OR Floors > (SELECT AVG(Floors) FROM building);
SELECT Name  FROM building  WHERE Height_feet >= 200 AND Floors >= 20;
SELECT Institution, Location  FROM Institution  WHERE Founded > 1990 AND Type = 'Private';
SELECT Type, COUNT(Institution_id) AS number_of_institutions, SUM(Enrollment) AS total_enrollment FROM Institution GROUP BY Type;
SELECT Type, COUNT(*) AS institution_count FROM Institution GROUP BY Type ORDER BY institution_count DESC LIMIT 1;
SELECT DISTINCT Type  FROM Institution  WHERE Founded > 1990 AND Enrollment >= 1000;
SELECT Name  FROM building  WHERE building_id NOT IN (SELECT building_id FROM Institution);
SELECT Name  FROM building  WHERE building_id NOT IN (     SELECT building_id      FROM Institution      WHERE Founded = 2003 );
SELECT b.Name, COUNT(i.Institution_id) AS institution_count FROM building b LEFT JOIN Institution i ON b.building_id = i.building_id GROUP BY b.Name;
SELECT b.Name, b.Height_feet FROM building b JOIN Institution i ON b.building_id = i.building_id WHERE i.Founded > 1880 GROUP BY b.building_id HAVING COUNT(i.Institution_id) >= 2;
SELECT DISTINCT Type FROM Institution;
SELECT i.Institution, COUNT(p.common_name) AS protein_count FROM Institution i LEFT JOIN protein p ON i.Institution_id = p.Institution_id GROUP BY i.Institution;
SELECT COUNT(*)  FROM protein  WHERE Institution_id IN (     SELECT Institution_id      FROM Institution      WHERE Founded > 1880 OR Type = 'Private' );
SELECT protein.protein_name, Institution.Institution FROM protein JOIN Institution ON protein.Institution_id = Institution.Institution_id;
SELECT COUNT(*)  FROM protein p JOIN Institution i ON p.Institution_id = i.Institution_id JOIN building b ON i.building_id = b.building_id WHERE b.Floors >= 20;
SELECT COUNT(*)  FROM Institution  WHERE Institution_id NOT IN (SELECT Institution_id FROM protein);
SELECT DISTINCT Location FROM cinema WHERE Cinema_ID NOT IN (     SELECT Cinema_ID     FROM cinema     WHERE Capacity > 800 );
SELECT DISTINCT Location FROM cinema WHERE Openning_year IN (2010, 2011) GROUP BY Location HAVING COUNT(DISTINCT Openning_year) = 2;
SELECT COUNT(*) FROM cinema;
SELECT COUNT(*) FROM cinema;
SELECT Name, Openning_year, Capacity FROM cinema;
SELECT Name, Location  FROM cinema  WHERE Capacity > (SELECT AVG(Capacity) FROM cinema);
SELECT DISTINCT Location FROM cinema;
SELECT DISTINCT Location FROM cinema;
SELECT Name, Openning_year FROM cinema ORDER BY Openning_year DESC;
SELECT Name, Location  FROM cinema  WHERE Capacity = (SELECT MAX(Capacity) FROM cinema);
SELECT AVG(Capacity) AS Average_Capacity, MIN(Capacity) AS Minimum_Capacity, MAX(Capacity) AS Maximum_Capacity FROM cinema WHERE Openning_year >= 2011;
SELECT Location, COUNT(Cinema_ID) AS Number_of_Cinemas FROM cinema GROUP BY Location;
SELECT Location FROM cinema WHERE Openning_year >= 2010 GROUP BY Location ORDER BY COUNT(Cinema_ID) DESC LIMIT 1;
SELECT Location FROM cinema WHERE Capacity > 300 GROUP BY Location HAVING COUNT(Cinema_ID) >= 2;
SELECT Location FROM cinema WHERE Capacity > 300 GROUP BY Location HAVING COUNT(Cinema_ID) >= 2;
SELECT Title, Directed_by FROM film;
SELECT Title, Directed_by FROM film;
SELECT DISTINCT Directed_by FROM film;
SELECT DISTINCT Directed_by FROM film;
SELECT Directed_by, COUNT(*) AS Number_of_Films FROM film GROUP BY Directed_by;
SELECT c.Name, SUM(s.Show_times_per_day) AS Total_Show_Times_Per_Day FROM cinema c JOIN schedule s ON c.Cinema_ID = s.Cinema_ID GROUP BY c.Name;
SELECT f.Title, MAX(s.Price) AS Max_Price FROM film f JOIN schedule s ON f.Film_ID = s.Film_ID GROUP BY f.Title;
SELECT f.Title, MAX(s.Price) AS Highest_Price FROM film f JOIN schedule s ON f.Film_ID = s.Film_ID GROUP BY f.Title;
SELECT c.Name AS Cinema_Name, f.Title AS Film_Title, s.Date, s.Price FROM schedule s JOIN cinema c ON s.Cinema_ID = c.Cinema_ID JOIN film f ON s.Film_ID = f.Film_ID;
SELECT f.Title, f.Directed_by FROM film f LEFT JOIN schedule s ON f.Film_ID = s.Film_ID WHERE s.Film_ID IS NULL;
SELECT f.Directed_by, SUM(s.Show_times_per_day) AS Total_Show_Times FROM film f JOIN schedule s ON f.Film_ID = s.Film_ID GROUP BY f.Directed_by ORDER BY Total_Show_Times DESC LIMIT 1;
SELECT Location FROM cinema WHERE Capacity > 300 GROUP BY Location HAVING COUNT(Cinema_ID) > 1;
SELECT Location FROM cinema WHERE Capacity > 300 GROUP BY Location HAVING COUNT(Cinema_ID) > 1;
SELECT COUNT(*)  FROM film  WHERE Title LIKE '%Dummy%';
SELECT COUNT(*)  FROM film  WHERE Title LIKE '%Dummy%';
SELECT good_or_bad_customer  FROM Customers  WHERE coupon_id IN (SELECT coupon_id FROM Discount_Coupons WHERE coupon_amount = 500);
SELECT c.customer_id, c.first_name, COUNT(b.booking_id) AS booking_count FROM Customers c LEFT JOIN Bookings b ON c.customer_id = b.customer_id GROUP BY c.customer_id, c.first_name;
SELECT customer_id, SUM(amount_paid) AS total_amount_paid FROM Payments GROUP BY customer_id ORDER BY total_amount_paid DESC LIMIT 1;
SELECT booking_id, amount_of_refund FROM Payments GROUP BY booking_id ORDER BY COUNT(payment_id) DESC LIMIT 1;
SELECT product_id FROM Products_Booked GROUP BY product_id HAVING COUNT(booking_id) = 3;
SELECT p.product_description  FROM Products_for_Hire p JOIN Products_Booked pb ON p.product_id = pb.product_id WHERE pb.booked_amount = 102.76;
SELECT b.booking_start_date, b.booking_end_date FROM Bookings b JOIN Products_Booked pb ON b.booking_id = pb.booking_id JOIN Products_for_Hire p ON pb.product_id = p.product_id WHERE p.product_name = 'Book collection A';
SELECT p.product_name  FROM Products_for_Hire p JOIN View_Product_Availability v ON p.product_id = v.product_id WHERE v.available_yn = 1;
SELECT COUNT(DISTINCT product_type_code) AS different_product_types FROM Products_for_Hire;
SELECT first_name, last_name, gender_mf  FROM Customers  WHERE good_or_bad_customer = 'good'  ORDER BY last_name;
SELECT AVG(amount_due) AS average_amount_due FROM Payments;
SELECT      MAX(booked_count) AS max_booked_count,      MIN(booked_count) AS min_booked_count,      AVG(booked_count) AS avg_booked_count  FROM      Products_Booked;
SELECT DISTINCT payment_type_code FROM Payments;
SELECT daily_hire_cost  FROM Products_for_Hire  WHERE product_name LIKE '%Book%';
SELECT COUNT(*) AS never_booked_count FROM Products_for_Hire p WHERE p.product_id NOT IN (     SELECT pb.product_id     FROM Products_Booked pb     JOIN Bookings b ON pb.booking_id = b.booking_id     WHERE pb.booked_amount > 200 );
SELECT DISTINCT dc.coupon_amount FROM Discount_Coupons dc JOIN Customers c ON dc.coupon_id = c.coupon_id WHERE c.good_or_bad_customer IN ('good', 'bad');
SELECT payment_date  FROM Payments  WHERE amount_paid > 300 OR payment_type_code = 'Check';
SELECT product_name, product_description  FROM Products_for_Hire  WHERE product_type_code = 'Cutlery' AND daily_hire_cost < 20;
SELECT COUNT(*) AS Total_Phones FROM phone;
SELECT Name FROM phone ORDER BY Price ASC;
SELECT Memory_in_G, Carrier FROM phone;
SELECT DISTINCT Carrier  FROM phone  WHERE Memory_in_G > 32;
SELECT Name  FROM phone  WHERE Carrier IN ('Sprint', 'TMobile');
SELECT Carrier  FROM phone  WHERE Price = (SELECT MAX(Price) FROM phone);
SELECT Carrier, COUNT(*) AS Number_of_Phones FROM phone GROUP BY Carrier;
SELECT Carrier, COUNT(*) AS Frequency FROM phone GROUP BY Carrier ORDER BY Frequency DESC LIMIT 1;
SELECT DISTINCT p.Carrier FROM phone p WHERE p.Memory_in_G < 32 OR p.Memory_in_G > 64 GROUP BY p.Carrier HAVING COUNT(DISTINCT CASE WHEN p.Memory_in_G < 32 THEN 1 END) > 0    AND COUNT(DISTINCT CASE WHEN p.Memory_in_G > 64 THEN 1 END) > 0;
SELECT p.Name, m.District FROM phone p JOIN phone_market pm ON p.Phone_ID = pm.Phone_ID JOIN market m ON pm.Market_ID = m.Market_ID;
SELECT p.Name, m.District FROM phone p JOIN phone_market pm ON p.Phone_ID = pm.Phone_ID JOIN market m ON pm.Market_ID = m.Market_ID ORDER BY m.Ranking ASC;
SELECT p.Name FROM phone p JOIN phone_market pm ON p.Phone_ID = pm.Phone_ID JOIN market m ON pm.Market_ID = m.Market_ID WHERE m.Num_of_shops > 50;
SELECT p.Name, SUM(pm.Num_of_stock) AS Total_Stock FROM phone p JOIN phone_market pm ON p.Phone_ID = pm.Phone_ID GROUP BY p.Name;
SELECT p.Name FROM phone p JOIN phone_market pm ON p.Phone_ID = pm.Phone_ID GROUP BY p.Name HAVING SUM(pm.Num_of_stock) > 2000 ORDER BY SUM(pm.Num_of_stock) DESC;
SELECT p.Name  FROM phone p  LEFT JOIN phone_market pm ON p.Phone_ID = pm.Phone_ID  WHERE pm.Market_ID IS NULL;
SELECT COUNT(*) FROM company;
SELECT COUNT(*) AS Total_Companies FROM company;
SELECT Company, Rank  FROM company  ORDER BY Sales_billion DESC;
SELECT Company, Rank FROM company ORDER BY Sales_billion DESC;
SELECT Company, Main_Industry  FROM company  WHERE Headquarters <> 'USA';
SELECT Company, Main_Industry  FROM company  WHERE Headquarters <> 'United States';
SELECT Company, Headquarters  FROM company  ORDER BY Market_Value DESC;
SELECT Company, Headquarters  FROM company  ORDER BY Market_Value DESC;
SELECT MIN(Market_Value) AS Minimum_Market_Value,         MAX(Market_Value) AS Maximum_Market_Value,         AVG(Market_Value) AS Average_Market_Value  FROM company;
SELECT Company_ID,         MIN(Market_Value) AS Min_Market_Value,         MAX(Market_Value) AS Max_Market_Value,         AVG(Market_Value) AS Avg_Market_Value  FROM company  GROUP BY Company_ID;
SELECT DISTINCT Main_Industry FROM company;
SELECT DISTINCT Main_Industry FROM company;
SELECT Headquarters, COUNT(Company_ID) AS Number_of_Companies FROM company GROUP BY Headquarters;
SELECT Headquarters, COUNT(Company_ID) AS Company_Count FROM company GROUP BY Headquarters;
SELECT Main_Industry, SUM(Market_Value) AS Total_Market_Value FROM company GROUP BY Main_Industry;
SELECT Main_Industry, SUM(Market_Value) AS Total_Market_Value FROM company GROUP BY Main_Industry;
SELECT Main_Industry, COUNT(DISTINCT Company_ID) AS Number_of_Companies FROM company GROUP BY Main_Industry ORDER BY SUM(Market_Value) DESC LIMIT 1;
SELECT Main_Industry, COUNT(DISTINCT Company_ID) AS Total_Companies FROM company WHERE Market_Value = (     SELECT MAX(Total_Market_Value)     FROM (         SELECT Main_Industry, SUM(Market_Value) AS Total_Market_Value         FROM company         GROUP BY Main_Industry     ) AS Industry_Market_Values ) GROUP BY Main_Industry;
SELECT Headquarters FROM company WHERE Main_Industry = 'Banking' GROUP BY Headquarters HAVING COUNT(Company_ID) >= 2;
SELECT Headquarters FROM company WHERE Main_Industry = 'Banking' GROUP BY Headquarters HAVING COUNT(Company_ID) >= 2;
SELECT Station_ID, Location, Manager_Name  FROM gas_station  ORDER BY Open_Year;
SELECT Station_ID, Location, Manager_Name  FROM gas_station  ORDER BY Open_Year;
SELECT COUNT(*)  FROM gas_station  WHERE Open_Year BETWEEN 2000 AND 2005;
SELECT COUNT(*) AS Total_Gas_Stations FROM gas_station WHERE Open_Year BETWEEN 2000 AND 2005;
SELECT Location, COUNT(*) AS Number_of_Stations FROM gas_station GROUP BY Location ORDER BY Number_of_Stations;
SELECT Location, COUNT(*) AS Number_of_Stations FROM gas_station GROUP BY Location ORDER BY Number_of_Stations DESC;
SELECT DISTINCT c1.Headquarters FROM company c1 JOIN station_company sc1 ON c1.Company_ID = sc1.Company_ID JOIN gas_station gs ON sc1.Station_ID = gs.Station_ID WHERE c1.Main_Industry = 'Banking' AND c1.Company_ID IN (     SELECT c2.Company_ID     FROM company c2     WHERE c2.Main_Industry = 'Oil and Gas' );
SELECT DISTINCT c.Headquarters FROM company c WHERE c.Main_Industry IN ('banking', 'oil and gas') GROUP BY c.Headquarters HAVING COUNT(DISTINCT c.Main_Industry) = 2;
SELECT DISTINCT Headquarters  FROM company  WHERE Main_Industry <> 'Banking';
SELECT DISTINCT gs.Location FROM gas_station gs LEFT JOIN station_company sc ON gs.Station_ID = sc.Station_ID LEFT JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Main_Industry <> 'Banking' OR c.Company_ID IS NULL;
SELECT c.Company, COUNT(gs.Station_ID) AS Number_of_Gas_Stations FROM company c LEFT JOIN station_company sc ON c.Company_ID = sc.Company_ID LEFT JOIN gas_station gs ON sc.Station_ID = gs.Station_ID GROUP BY c.Company;
SELECT sc.Company_ID, c.Company, COUNT(gs.Station_ID) AS Number_of_Gas_Stations FROM station_company sc JOIN company c ON sc.Company_ID = c.Company_ID LEFT JOIN gas_station gs ON sc.Station_ID = gs.Station_ID GROUP BY sc.Company_ID, c.Company;
SELECT c.Company, c.Main_Industry FROM company c LEFT JOIN station_company sc ON c.Company_ID = sc.Company_ID WHERE sc.Station_ID IS NULL;
SELECT DISTINCT c.Main_Industry, c.Company FROM company c LEFT JOIN station_company sc ON c.Company_ID = sc.Company_ID WHERE sc.Station_ID IS NULL;
SELECT gs.Manager_Name FROM gas_station gs JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'ExxonMobil';
SELECT gs.Manager_Name FROM gas_station gs JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company = 'ExxonMobil';
SELECT gs.Location FROM gas_station gs JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Market_Value > 100;
SELECT DISTINCT gs.Location FROM gas_station gs JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Market_Value > 100;
SELECT Manager_Name, COUNT(*) AS Number_of_Stations FROM gas_station WHERE Open_Year > 2000 GROUP BY Manager_Name ORDER BY Number_of_Stations DESC LIMIT 1;
SELECT Manager_Name FROM gas_station WHERE Open_Year > 2000 GROUP BY Manager_Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Location FROM gas_station ORDER BY Open_Year;
SELECT Location FROM gas_station ORDER BY Open_Year;
SELECT c.Rank, c.Company, c.Market_Value FROM company c WHERE c.Main_Industry = 'Banking' ORDER BY c.Sales_billion, c.Profits_billion;
SELECT Rank, Company, Market_Value  FROM company  WHERE Main_Industry = 'Banking'  ORDER BY Sales_billion DESC, Profits_billion DESC;
SELECT gs.Location, gs.Representative_Name FROM gas_station gs JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company_ID IN (     SELECT Company_ID     FROM company     ORDER BY Assets_billion DESC     LIMIT 3 );
SELECT gs.Location, gs.Representative_Name FROM gas_station gs JOIN station_company sc ON gs.Station_ID = sc.Station_ID JOIN company c ON sc.Company_ID = c.Company_ID WHERE c.Company_ID IN (     SELECT Company_ID     FROM company     ORDER BY Assets_billion DESC     LIMIT 3 );
SELECT COUNT(*) FROM region;
SELECT COUNT(*) FROM region;
SELECT DISTINCT Region_name FROM region ORDER BY Label;
SELECT DISTINCT Region_name  FROM region  ORDER BY Label;
SELECT COUNT(*) AS Number_of_Parties FROM party;
SELECT COUNT(DISTINCT Party_ID) AS Number_of_Different_Parties FROM party;
SELECT Minister, Took_office, Left_office  FROM party  ORDER BY Left_office;
SELECT Minister, Took_office, Left_office  FROM party  ORDER BY Left_office;
SELECT Minister  FROM party  WHERE Took_office > '1961-01-01' OR Took_office < '1959-01-01';
SELECT Minister  FROM party  WHERE Took_office > '1961-01-01' OR Took_office < '1959-12-31';
SELECT DISTINCT m.Member_Name  FROM member m  JOIN party p ON m.Party_ID = p.Party_ID  WHERE p.Party_name <> 'Progress Party';
SELECT DISTINCT m.Member_Name FROM member m JOIN party p ON m.Party_ID = p.Party_ID WHERE p.Party_name <> 'Progress Party' AND p.Minister IS NOT NULL;
SELECT Minister, Party_name  FROM party  JOIN member ON party.Party_ID = member.Party_ID  ORDER BY Took_office DESC;
SELECT Minister, Party_name FROM party JOIN member ON party.Party_ID = member.Party_ID WHERE In_office = 1 ORDER BY Took_office DESC;
SELECT Minister  FROM party  ORDER BY Left_office DESC  LIMIT 1;
SELECT Minister  FROM party  ORDER BY Left_office DESC  LIMIT 1;
SELECT member.Member_Name, party.Party_name FROM member JOIN party ON member.Party_ID = party.Party_ID;
SELECT m.Member_Name, p.Party_name FROM member m JOIN party p ON m.Party_ID = p.Party_ID;
SELECT p.Party_name, COUNT(m.Member_ID) AS Number_of_Members FROM party p LEFT JOIN member m ON p.Party_ID = m.Party_ID GROUP BY p.Party_name;
SELECT p.Party_name, COUNT(m.Member_ID) AS Member_Count FROM party p LEFT JOIN member m ON p.Party_ID = m.Party_ID GROUP BY p.Party_name;
SELECT p.Party_name FROM party p JOIN member m ON p.Party_ID = m.Party_ID GROUP BY p.Party_name ORDER BY COUNT(m.Member_ID) DESC LIMIT 1;
SELECT p.Party_name FROM party p JOIN member m ON p.Party_ID = m.Party_ID GROUP BY p.Party_name ORDER BY COUNT(m.Member_ID) DESC LIMIT 1;
SELECT party.Party_name, region.Region_name FROM party JOIN region ON party.Region_ID = region.Region_ID;
SELECT party.Party_name, region.Region_name FROM party JOIN region ON party.Region_ID = region.Region_ID;
SELECT Party_name  FROM party  WHERE Party_ID NOT IN (SELECT DISTINCT Party_ID FROM member);
SELECT Party_name  FROM party  WHERE Party_ID NOT IN (SELECT DISTINCT Party_ID FROM member);
SELECT m1.Member_Name FROM member m1 JOIN member m2 ON m1.Member_ID = m2.Member_ID WHERE m1.Party_ID = 3 AND m2.Party_ID = 1;
SELECT m1.Member_Name FROM member m1 JOIN member m2 ON m1.Member_Name = m2.Member_Name WHERE m1.Party_ID = 3 AND m2.Party_ID = 1;
SELECT Member_Name  FROM member  WHERE Party_ID NOT IN (SELECT Party_ID FROM party WHERE Party_name = 'Progress Party');
SELECT Member_Name  FROM member  WHERE Party_ID NOT IN (SELECT Party_ID FROM party WHERE Party_name = 'Progress Party');
SELECT COUNT(*) AS Total_Party_Events FROM party_events;
SELECT COUNT(*) AS Number_of_Party_Events FROM party_events;
SELECT p.Party_name, COUNT(pe.Event_ID) AS Number_of_Events FROM party p LEFT JOIN party_events pe ON p.Party_ID = pe.Party_ID GROUP BY p.Party_name;
SELECT p.Party_name, COUNT(pe.Event_ID) AS Event_Count FROM party p LEFT JOIN party_events pe ON p.Party_ID = pe.Party_ID GROUP BY p.Party_name;
SELECT m.Member_Name FROM member m LEFT JOIN party_events pe ON m.Member_ID = pe.Member_in_charge_ID WHERE pe.Event_ID IS NULL;
SELECT m.Member_Name FROM member m LEFT JOIN party_events pe ON m.Member_ID = pe.Member_in_charge_ID WHERE pe.Event_ID IS NULL;
SELECT p.Party_name FROM party p JOIN party_events pe ON p.Party_ID = pe.Party_ID GROUP BY p.Party_name HAVING COUNT(pe.Event_ID) >= 2;
SELECT p.Party_name FROM party p JOIN party_events pe ON p.Party_ID = pe.Party_ID GROUP BY p.Party_name HAVING COUNT(pe.Event_ID) >= 2;
SELECT m.Member_Name FROM member m JOIN party_events pe ON m.Member_ID = pe.Member_in_charge_ID GROUP BY m.Member_ID, m.Member_Name ORDER BY COUNT(pe.Event_ID) DESC LIMIT 1;
SELECT m.Member_Name FROM member m JOIN party_events pe ON m.Member_ID = pe.Member_in_charge_ID GROUP BY m.Member_ID, m.Member_Name ORDER BY COUNT(pe.Event_ID) DESC LIMIT 1;
SELECT Event_Name FROM party_events GROUP BY Event_Name HAVING COUNT(*) > 2;
SELECT Event_Name FROM party_events GROUP BY Event_Name HAVING COUNT(Event_ID) > 2;
SELECT COUNT(*)  FROM party_events pe JOIN party p ON pe.Party_ID = p.Party_ID JOIN region r ON p.Region_ID = r.Region_ID WHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom';
SELECT COUNT(*)  FROM party_events pe JOIN party p ON pe.Party_ID = p.Party_ID JOIN region r ON p.Region_ID = r.Region_ID WHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom';
SELECT COUNT(*) AS NumberOfPilots FROM pilot;
SELECT Pilot_name FROM pilot ORDER BY Rank ASC;
SELECT Position, Team FROM pilot;
SELECT DISTINCT Position FROM pilot WHERE Age > 30;
SELECT Pilot_name  FROM pilot  WHERE Team IN ('Bradley', 'Fordham');
SELECT p.Join_Year FROM pilot p WHERE p.Rank = (SELECT MAX(Rank) FROM pilot);
SELECT Nationality, COUNT(Pilot_ID) AS Number_of_Pilots FROM pilot GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Count FROM pilot GROUP BY Nationality ORDER BY Count DESC LIMIT 1;
SELECT DISTINCT Position  FROM pilot  WHERE Join_Year > 2005  AND Position IN (SELECT Position FROM pilot WHERE Join_Year < 2000);
SELECT p.Pilot_name, a.Model FROM pilot p JOIN pilot_record pr ON p.Pilot_ID = pr.Pilot_ID JOIN aircraft a ON pr.Aircraft_ID = a.Aircraft_ID;
SELECT p.Pilot_name, a.Fleet_Series FROM pilot p JOIN pilot_record pr ON p.Pilot_ID = pr.Pilot_ID JOIN aircraft a ON pr.Aircraft_ID = a.Aircraft_ID ORDER BY p.Rank ASC;
SELECT DISTINCT a.Fleet_Series FROM aircraft a JOIN pilot_record pr ON a.Aircraft_ID = pr.Aircraft_ID JOIN pilot p ON pr.Pilot_ID = p.Pilot_ID WHERE p.Age < 34;
SELECT p.Pilot_name, COUNT(pr.Record_ID) AS Record_Count FROM pilot p LEFT JOIN pilot_record pr ON p.Pilot_ID = pr.Pilot_ID GROUP BY p.Pilot_name;
SELECT p.Pilot_name FROM pilot p JOIN pilot_record pr ON p.Pilot_ID = pr.Pilot_ID GROUP BY p.Pilot_name HAVING COUNT(pr.Record_ID) > 1;
SELECT Pilot_name  FROM pilot  WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record);
SELECT document_status_code FROM Ref_Document_Status;
SELECT document_status_description  FROM Ref_Document_Status  WHERE document_status_code = 'working';
SELECT document_type_code FROM Ref_Document_Types;
SELECT document_type_description  FROM Ref_Document_Types  WHERE document_type_description = 'Paper';
SELECT shipping_agent_name FROM Ref_Shipping_Agents;
SELECT shipping_agent_code  FROM Ref_Shipping_Agents  WHERE shipping_agent_name = 'UPS';
SELECT role_code FROM Roles;
SELECT role_description  FROM Roles  WHERE role_code = 'ED';
SELECT COUNT(*) AS employee_count FROM Employees;
SELECT role_description  FROM Roles  WHERE role_code = (SELECT role_code FROM Employees WHERE employee_name = 'Koby');
SELECT document_id, receipt_date FROM Documents;
SELECT r.role_description, r.role_code, COUNT(e.employee_id) AS number_of_employees FROM Roles r LEFT JOIN Employees e ON r.role_code = e.role_code GROUP BY r.role_description, r.role_code;
SELECT r.role_description, COUNT(e.employee_id) AS number_of_employees FROM Roles r JOIN Employees e ON r.role_code = e.role_code GROUP BY r.role_description HAVING COUNT(e.employee_id) > 1;
SELECT r.document_status_description  FROM Documents d  JOIN Ref_Document_Status r ON d.document_status_code = r.document_status_code  WHERE d.document_id = 1;
SELECT COUNT(*)  FROM Documents  WHERE document_status_code = 'done';
SELECT document_type_code FROM Documents WHERE document_id = 2;
SELECT document_id  FROM Documents  WHERE document_status_code = 'done'  AND document_type_code = 'paper';
SELECT s.shipping_agent_name  FROM Documents d  JOIN Ref_Shipping_Agents s ON d.shipping_agent_code = s.shipping_agent_code  WHERE d.document_id = 2;
SELECT COUNT(*)  FROM Documents  WHERE shipping_agent_code = (SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = 'USPS');
SELECT sa.shipping_agent_name, COUNT(d.document_id) AS document_count FROM Ref_Shipping_Agents sa JOIN Documents d ON sa.shipping_agent_code = d.shipping_agent_code GROUP BY sa.shipping_agent_name ORDER BY document_count DESC LIMIT 1;
SELECT receipt_date FROM Documents WHERE document_id = 3;
SELECT a.address_details FROM Documents_Mailed dm JOIN Addresses a ON dm.mailed_to_address_id = a.address_id WHERE dm.document_id = 4;
SELECT mailing_date  FROM Documents_Mailed  WHERE document_id = 7;
SELECT d.document_id FROM Documents d JOIN Ref_Document_Status ds ON d.document_status_code = ds.document_status_code JOIN Ref_Document_Types dt ON d.document_type_code = dt.document_type_code JOIN Ref_Shipping_Agents sa ON d.shipping_agent_code = sa.shipping_agent_code WHERE ds.document_status_description = 'done'   AND dt.document_type_description = 'Paper'   AND sa.shipping_agent_name <> 'USPS';
SELECT d.document_id FROM Documents d JOIN Ref_Document_Status ds ON d.document_status_code = ds.document_status_code JOIN Ref_Document_Types dt ON d.document_type_code = dt.document_type_code JOIN Ref_Shipping_Agents sa ON d.shipping_agent_code = sa.shipping_agent_code WHERE ds.document_status_description = 'done'   AND dt.document_type_description = 'Paper'   AND sa.shipping_agent_name = 'USPS';
SELECT draft_details  FROM Document_Drafts  WHERE document_id = 7;
SELECT COUNT(*)  FROM Draft_Copies  WHERE document_id = 2;
SELECT document_id, COUNT(copy_number) AS number_of_draft_copies FROM Draft_Copies GROUP BY document_id ORDER BY number_of_draft_copies DESC LIMIT 1;
SELECT document_id, COUNT(copy_number) AS number_of_draft_copies FROM Draft_Copies GROUP BY document_id HAVING COUNT(copy_number) > 1;
SELECT e.employee_name FROM Circulation_History ch JOIN Employees e ON ch.employee_id = e.employee_id WHERE ch.document_id = 1;
SELECT employee_name  FROM Employees  WHERE employee_id NOT IN (SELECT employee_id FROM Circulation_History);
SELECT e.employee_name, COUNT(DISTINCT ch.draft_number) AS number_of_drafts, COUNT(DISTINCT ch.copy_number) AS number_of_copies FROM Circulation_History ch JOIN Employees e ON ch.employee_id = e.employee_id GROUP BY e.employee_name ORDER BY COUNT(ch.document_id) DESC LIMIT 1;
SELECT ch.document_id, COUNT(DISTINCT ch.employee_id) AS number_of_employees FROM Circulation_History ch GROUP BY ch.document_id;
SELECT Dname  FROM department  ORDER BY Mgr_start_date;
SELECT dependent.Dependent_name FROM dependent JOIN employee ON dependent.Essn = employee.Ssn WHERE dependent.Relationship = 'spouse';
SELECT COUNT(*) AS Female_Dependants FROM dependent WHERE Sex = 'F';
SELECT Dname  FROM department  JOIN dept_locations ON department.Dnumber = dept_locations.Dnumber  WHERE Dlocation = 'Houston';
SELECT Fname, Lname  FROM employee  WHERE Salary > 30000;
SELECT Sex, COUNT(*) AS Number_of_Employees FROM employee WHERE Salary < 50000 GROUP BY Sex;
SELECT Fname, Lname, Address  FROM employee  ORDER BY Bdate ASC;
SELECT E.Event_Details  FROM Events E  JOIN Services S ON E.Service_ID = S.Service_ID  WHERE S.Service_Type_Code = 'Marriage';
SELECT e.Event_ID, e.Event_Details FROM Events e JOIN Participants_in_Events pie ON e.Event_ID = pie.Event_ID GROUP BY e.Event_ID, e.Event_Details HAVING COUNT(pie.Participant_ID) > 1;
SELECT p.Participant_ID, p.Participant_Type_Code, COUNT(pie.Event_ID) AS Event_Count FROM Participants p LEFT JOIN Participants_in_Events pie ON p.Participant_ID = pie.Participant_ID GROUP BY p.Participant_ID, p.Participant_Type_Code;
SELECT Participant_ID, Participant_Type_Code, Participant_Details FROM Participants;
SELECT COUNT(*)  FROM Participants  WHERE Participant_Type_Code = 'Organizer';
SELECT DISTINCT Service_Type_Code  FROM Services  ORDER BY Service_Type_Code;
SELECT e.Service_ID, e.Event_Details FROM Events e;
SELECT COUNT(DISTINCT e.Event_ID) AS Event_Count FROM Events e JOIN Participants_in_Events pie ON e.Event_ID = pie.Event_ID JOIN Participants p ON pie.Participant_ID = p.Participant_ID WHERE p.Participant_Details LIKE '%Dr.%';
SELECT Participant_Type_Code, COUNT(*) AS Count FROM Participants GROUP BY Participant_Type_Code ORDER BY Count DESC LIMIT 1;
SELECT s.Service_ID, s.Service_Type_Code FROM Services s LEFT JOIN Events e ON s.Service_ID = e.Service_ID LEFT JOIN Participants_in_Events pie ON e.Event_ID = pie.Event_ID GROUP BY s.Service_ID, s.Service_Type_Code ORDER BY COUNT(pie.Participant_ID) ASC LIMIT 1;
SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY COUNT(Participant_ID) DESC LIMIT 1;
SELECT e.Event_ID FROM Events e LEFT JOIN Participants_in_Events pie ON e.Event_ID = pie.Event_ID LEFT JOIN Participants p ON pie.Participant_ID = p.Participant_ID WHERE p.Participant_Details <> 'Kenyatta Kuhn' OR p.Participant_Details IS NULL GROUP BY e.Event_ID HAVING COUNT(p.Participant_ID) = 0;
SELECT s.Service_Type_Code FROM Services s JOIN Events e ON s.Service_ID = e.Service_ID WHERE e.Event_Details IN ('successful', 'failure') GROUP BY s.Service_Type_Code HAVING COUNT(DISTINCT e.Event_Details) = 2;
SELECT COUNT(*) AS No_Participant_Events FROM Events e LEFT JOIN Participants_in_Events pe ON e.Event_ID = pe.Event_ID WHERE pe.Participant_ID IS NULL;
SELECT DISTINCT Participant_ID  FROM Participants_in_Events;
SELECT name FROM races ORDER BY date DESC, time DESC LIMIT 1;
SELECT name FROM races ORDER BY date DESC, time DESC LIMIT 1;
SELECT name, date  FROM races  ORDER BY date DESC  LIMIT 1;
SELECT name, date  FROM races  ORDER BY date DESC  LIMIT 1;
SELECT name FROM races WHERE year = 2017;
SELECT name FROM races WHERE year = 2017;
SELECT DISTINCT name  FROM races  WHERE year BETWEEN 2014 AND 2017;
SELECT DISTINCT name  FROM races  WHERE year BETWEEN 2014 AND 2017;
SELECT DISTINCT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time < 93000;
SELECT DISTINCT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time < 93000;
SELECT DISTINCT d.driverId, d.nationality FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time > 100000;
SELECT DISTINCT d.driverId, d.nationality FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time > 100000;
SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId ORDER BY lt.time ASC LIMIT 1;
SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId ORDER BY lt.time ASC LIMIT 1;
SELECT driverId, d.surname  FROM lapTimes lt  JOIN drivers d ON lt.driverId = d.driverId  ORDER BY lt.time DESC  LIMIT 1;
SELECT driverId, surname  FROM drivers  WHERE driverId = (SELECT driverId                    FROM lapTimes                    ORDER BY time DESC                    LIMIT 1);
SELECT driverId, forename, surname FROM drivers WHERE driverId IN (     SELECT driverId     FROM lapTimes     WHERE position = 1     GROUP BY driverId     HAVING COUNT(*) >= 2 );
SELECT d.driverId, d.forename, d.surname FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.position = 1 GROUP BY d.driverId, d.forename, d.surname HAVING COUNT(*) >= 2;
SELECT COUNT(DISTINCT r.driverId) AS driver_count FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Australian Grand Prix' AND ra.year = 2009;
SELECT COUNT(DISTINCT results.driverId) AS driver_count FROM races JOIN results ON races.raceId = results.raceId WHERE races.name = 'Australian Grand Prix' AND races.year = 2009;
SELECT COUNT(DISTINCT d.driverId) AS drivers_not_participated FROM drivers d WHERE d.driverId NOT IN (     SELECT DISTINCT r.driverId     FROM results r     JOIN races ra ON r.raceId = ra.raceId     WHERE ra.year = 2009 );
SELECT COUNT(DISTINCT d.driverId) AS drivers_not_raced_2009 FROM drivers d WHERE d.driverId NOT IN (     SELECT r.driverId     FROM results r     JOIN races ra ON r.raceId = ra.raceId     WHERE ra.year = 2009 );
SELECT r.name, r.year FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Lewis';
SELECT r.name, r.year FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.surname = 'Lewis';
SELECT forename, surname FROM drivers WHERE nationality = 'German';
SELECT forename, surname FROM drivers WHERE nationality = 'German';
SELECT d.driverId, d.forename FROM drivers d JOIN results r1 ON d.driverId = r1.driverId JOIN races ra ON r1.raceId = ra.raceId WHERE ra.name = 'Australian Grand Prix' AND d.driverId IN (     SELECT r2.driverId     FROM results r2     JOIN races rb ON r2.raceId = rb.raceId     WHERE rb.name = 'Chinese Grand Prix' ) GROUP BY d.driverId, d.forename;
SELECT d.driverId, d.forename FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name IN ('Australian Grand Prix', 'Chinese Grand Prix') GROUP BY d.driverId, d.forename HAVING COUNT(DISTINCT ra.name) = 2;
SELECT DISTINCT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Australian Grand Prix' AND d.driverId NOT IN (     SELECT r2.driverId     FROM results r2     JOIN races rb ON r2.raceId = rb.raceId     WHERE rb.name = 'Chinese Grand Prix' );
SELECT DISTINCT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Australian Grand Prix' AND d.driverId NOT IN (     SELECT r2.driverId     FROM results r2     JOIN races rc ON r2.raceId = rc.raceId     WHERE rc.name = 'Chinese Grand Prix' );
SELECT DISTINCT d.forename FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.position = 1 AND ds.wins > 0;
SELECT DISTINCT d.forename FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.position = 1 AND ds.wins > 0;
SELECT DISTINCT d.forename FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.position = 1 AND ds.points > 20;
SELECT DISTINCT d.forename FROM driverStandings ds JOIN drivers d ON ds.driverId = d.driverId WHERE ds.position = 1 AND ds.points > 20;
SELECT nationality, COUNT(constructorId) AS constructor_count FROM constructors GROUP BY nationality;
SELECT nationality, COUNT(DISTINCT constructorId) AS constructor_count FROM constructors GROUP BY nationality;
SELECT constructorId, COUNT(raceId) AS numberOfRaces FROM constructorResults GROUP BY constructorId;
SELECT constructorId, COUNT(DISTINCT raceId) AS race_count FROM results GROUP BY constructorId;
SELECT r.name  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE r.year > 2017 AND c.country = 'Spain';
SELECT r.name  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE r.year > 2017 AND c.country = 'Spain';
SELECT DISTINCT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year > 2000 AND c.country = 'Spain';
SELECT r.name  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE r.year > 2000 AND c.country = 'Spain';
SELECT DISTINCT p.driverId, p.stop FROM pitStops p WHERE p.duration < (     SELECT MIN(p2.duration)     FROM pitStops p2     WHERE p2.raceId = 841 )
SELECT p.driverId, p.stop FROM pitStops p WHERE p.duration < (SELECT duration FROM pitStops WHERE raceId = 841 AND driverId = p.driverId);
SELECT DISTINCT p1.driverId FROM pitStops p1 WHERE p1.duration > (     SELECT MAX(p2.duration)     FROM pitStops p2     WHERE p2.raceId = 841 )
SELECT p.driverId, p.duration FROM pitStops p WHERE p.duration > (     SELECT duration     FROM pitStops     WHERE raceId = 841     AND driverId = p.driverId );
SELECT DISTINCT forename FROM drivers ORDER BY forename;
SELECT DISTINCT forename FROM drivers ORDER BY forename;
SELECT DISTINCT name FROM races ORDER BY name DESC;
SELECT DISTINCT name FROM races ORDER BY name DESC;
SELECT name  FROM races  WHERE year BETWEEN 2009 AND 2011;
SELECT name FROM races WHERE year BETWEEN 2009 AND 2011;
SELECT name  FROM races  WHERE time > '12:00:00' OR time < '09:00:00';
SELECT name  FROM races  WHERE time > '12:00:00' OR time < '09:00:00';
SELECT DISTINCT d.driverId, d.forename, d.surname FROM drivers d LEFT JOIN (     SELECT driverId, COUNT(*) AS pitStopCount     FROM pitStops     GROUP BY driverId     HAVING COUNT(*) > 8 ) ps ON d.driverId = ps.driverId LEFT JOIN (     SELECT driverId, COUNT(*) AS raceResultCount     FROM results     GROUP BY driverId     HAVING COUNT(*) > 5 ) rr ON d.driverId = rr.driverId WHERE ps.pitStopCount IS NOT NULL OR rr.raceResultCount IS NOT NULL;
SELECT d.driverId, d.forename, d.surname FROM drivers d WHERE d.driverId IN (     SELECT p.driverId     FROM pitStops p     GROUP BY p.driverId     HAVING COUNT(p.stop) > 8 ) OR d.driverId IN (     SELECT r.driverId     FROM results r     GROUP BY r.driverId     HAVING COUNT(DISTINCT r.raceId) > 5 );
SELECT d.surname, d.driverId FROM drivers d JOIN pitStops p ON d.driverId = p.driverId JOIN results r ON d.driverId = r.driverId GROUP BY d.driverId, d.surname HAVING COUNT(DISTINCT p.raceId) = 11 AND COUNT(DISTINCT r.raceId) > 5;
SELECT d.surname, d.driverId FROM drivers d JOIN pitStops p ON d.driverId = p.driverId GROUP BY d.driverId, d.surname HAVING COUNT(p.stop) = 11 AND COUNT(DISTINCT p.raceId) > 5;
SELECT d.driverId, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year > 2010 GROUP BY d.driverId, d.surname ORDER BY COUNT(r.raceId) DESC LIMIT 1;
SELECT d.driverId, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year > 2010 GROUP BY d.driverId, d.surname ORDER BY COUNT(r.raceId) DESC LIMIT 1;
SELECT name  FROM circuits  WHERE country IN ('UK', 'Malaysia');
SELECT name FROM circuits WHERE country IN ('UK', 'Malaysia');
SELECT circuitId, location  FROM circuits  WHERE country IN ('France', 'Belgium');
SELECT circuitId, location  FROM circuits  WHERE country IN ('France', 'Belgium');
SELECT DISTINCT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE c.nationality = 'Japanese' AND cs.points > 5;
SELECT DISTINCT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE c.nationality = 'Japanese' AND cs.points > 5;
SELECT AVG(fastestLapSpeed) AS average_fastest_lap_speed FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Monaco Grand Prix' AND ra.year = 2008;
SELECT AVG(fastestLapSpeed) AS average_fastest_lap_speed FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Monaco Grand Prix' AND ra.year = 2008;
SELECT MAX(fastestLapSpeed)  FROM results  JOIN races ON results.raceId = races.raceId  WHERE races.name = 'Monaco Grand Prix' AND races.year = 2008;
SELECT MAX(fastestLapSpeed)  FROM results  WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND circuitId = (SELECT circuitId FROM circuits WHERE name = 'Monaco'));
SELECT r.name AS race_name, MAX(lt.fastestLapSpeed) AS max_fastest_lap_speed FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId WHERE r.year > 2004 GROUP BY r.name ORDER BY r.year;
SELECT r.name AS race_name, MAX(lt.fastestLapSpeed) AS max_fastest_lap_speed FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId WHERE r.year > 2004 GROUP BY r.name ORDER BY r.year;
SELECT r.name AS race_name, AVG(lt.fastestLapSpeed) AS average_fastest_lap_speed FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId WHERE r.year > 2004 GROUP BY r.name ORDER BY r.year;
SELECT r.year, r.raceId, AVG(lt.fastestLapSpeed) AS averageFastestLapSpeed FROM races r JOIN lapTimes lt ON r.raceId = lt.raceId WHERE r.year > 2004 GROUP BY r.year, r.raceId ORDER BY r.year;
SELECT d.driverId, d.forename, COUNT(r.resultId) AS number_of_races FROM drivers d JOIN results r ON d.driverId = r.driverId GROUP BY d.driverId, d.forename HAVING COUNT(r.resultId) >= 2;
SELECT d.driverId, d.forename, COUNT(r.raceId) AS number_of_races FROM drivers d JOIN results res ON d.driverId = res.driverId JOIN races r ON res.raceId = r.raceId GROUP BY d.driverId, d.forename HAVING COUNT(r.raceId) >= 2;
SELECT driverId, COUNT(raceId) AS numberOfRaces FROM results GROUP BY driverId HAVING COUNT(raceId) <= 30;
SELECT driverId, COUNT(raceId) AS race_count FROM results GROUP BY driverId HAVING COUNT(raceId) <= 30;
SELECT driverId, surname FROM drivers WHERE driverId = (     SELECT driverId     FROM results     GROUP BY driverId     ORDER BY COUNT(raceId) DESC     LIMIT 1 );
SELECT driverId, surname  FROM drivers  WHERE driverId IN (     SELECT driverId      FROM results      GROUP BY driverId      ORDER BY COUNT(raceId) DESC      LIMIT 1 );
SELECT COUNT(*) FROM technician;
SELECT COUNT(*) AS number_of_technicians FROM technician;
SELECT Name FROM technician ORDER BY Age ASC;
SELECT Name FROM technician ORDER BY Age ASC;
SELECT Team, Starting_Year FROM technician;
SELECT Team, Starting_Year FROM technician;
SELECT Name FROM technician WHERE Team <> 'NYY';
SELECT Name FROM technician WHERE Team <> 'NYY';
SELECT Name FROM technician WHERE Age IN (36, 37);
SELECT Name FROM technician WHERE Age IN (36, 37);
SELECT MIN(Starting_Year) AS Oldest_Technician_Starting_Year FROM technician;
SELECT MIN(Starting_Year) AS Oldest_Technician_Starting_Year FROM technician;
SELECT Team, COUNT(technician_id) AS Number_of_Technicians FROM technician GROUP BY Team;
SELECT Team, COUNT(*) AS technician_count FROM technician GROUP BY Team;
SELECT Team, COUNT(*) AS technician_count FROM technician GROUP BY Team ORDER BY technician_count DESC LIMIT 1;
SELECT Team, COUNT(technician_id) AS technician_count FROM technician GROUP BY Team ORDER BY technician_count DESC;
SELECT Team FROM technician GROUP BY Team HAVING COUNT(technician_id) >= 2;
SELECT Team FROM technician GROUP BY Team HAVING COUNT(technician_id) >= 2;
SELECT t.Name AS technician_name, m.Machine_series AS machine_series FROM technician t JOIN repair_assignment ra ON t.technician_id = ra.technician_id JOIN machine m ON ra.Machine_ID = m.Machine_ID;
SELECT t.Name AS technician_name, m.Machine_series FROM technician t JOIN repair_assignment ra ON t.technician_id = ra.technician_id JOIN machine m ON ra.Machine_ID = m.Machine_ID;
SELECT t.Name FROM technician t JOIN repair_assignment ra ON t.technician_id = ra.technician_id JOIN machine m ON ra.Machine_ID = m.Machine_ID ORDER BY m.quality_rank ASC;
SELECT t.Name FROM technician t JOIN repair_assignment ra ON t.technician_id = ra.technician_id JOIN machine m ON ra.Machine_ID = m.Machine_ID ORDER BY m.quality_rank ASC;
SELECT DISTINCT t.Name FROM technician t JOIN repair_assignment ra ON t.technician_id = ra.technician_id JOIN machine m ON ra.Machine_ID = m.Machine_ID WHERE m.value_points > 70;
SELECT DISTINCT t.Name FROM technician t JOIN repair_assignment ra ON t.technician_id = ra.technician_id JOIN machine m ON ra.Machine_ID = m.Machine_ID WHERE m.value_points > 70;
SELECT t.Name, COUNT(ra.Machine_ID) AS Number_of_Machines FROM technician t LEFT JOIN repair_assignment ra ON t.technician_id = ra.technician_id GROUP BY t.Name;
SELECT t.Name, COUNT(ra.Machine_ID) AS Machine_Count FROM technician t LEFT JOIN repair_assignment ra ON t.technician_id = ra.technician_id GROUP BY t.Name;
SELECT Name  FROM technician  WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment);
SELECT Name  FROM technician  WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment);
SELECT DISTINCT t.Starting_Year FROM technician t WHERE t.Team IN ('CLE', 'CWS');
SELECT DISTINCT Starting_Year  FROM technician  WHERE Team IN ('CLE', 'CWS');
SELECT COUNT(*) AS NumberOfEntrepreneurs FROM entrepreneur;
SELECT COUNT(*) FROM entrepreneur;
SELECT Company  FROM entrepreneur  ORDER BY Money_Requested DESC;
SELECT Company  FROM entrepreneur  ORDER BY Money_Requested DESC;
SELECT Company, Investor FROM entrepreneur;
SELECT e.Company, e.Investor FROM entrepreneur e;
SELECT AVG(Money_Requested) AS Average_Money_Requested FROM entrepreneur;
SELECT AVG(Money_Requested) AS Average_Money_Requested FROM entrepreneur;
SELECT Name FROM people ORDER BY Weight ASC;
SELECT Name FROM people ORDER BY Weight ASC;
SELECT p.Name  FROM entrepreneur e  JOIN people p ON e.People_ID = p.People_ID;
SELECT p.Name  FROM entrepreneur e  JOIN people p ON e.People_ID = p.People_ID;
SELECT p.Name  FROM entrepreneur e  JOIN people p ON e.People_ID = p.People_ID  WHERE e.Investor <> 'Rachel Elnaugh';
SELECT p.Name FROM people p JOIN entrepreneur e ON p.People_ID = e.People_ID WHERE e.Investor <> 'Rachel Elnaugh';
SELECT Weight FROM people WHERE Height = (SELECT MIN(Height) FROM people);
SELECT Weight FROM people ORDER BY Height ASC LIMIT 1;
SELECT p.Name  FROM people p  JOIN entrepreneur e ON p.People_ID = e.People_ID  ORDER BY p.Weight DESC  LIMIT 1;
SELECT p.Name  FROM entrepreneur e  JOIN people p ON e.People_ID = p.People_ID  ORDER BY p.Weight DESC  LIMIT 1;
SELECT SUM(e.Money_Requested) AS Total_Money_Requested FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID WHERE p.Height > 1.85;
SELECT SUM(e.Money_Requested) AS Total_Money_Requested FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID WHERE p.Height > 1.85;
SELECT p.Date_of_Birth FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID WHERE e.Investor IN ('Simon Woodroffe', 'Peter Jones');
SELECT p.Date_of_Birth FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID WHERE e.Investor IN ('Simon Woodroffe', 'Peter Jones');
SELECT p.Weight FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID ORDER BY e.Money_Requested DESC;
SELECT p.Weight FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID ORDER BY e.Money_Requested DESC;
SELECT Investor, COUNT(Entrepreneur_ID) AS Number_of_Entrepreneurs FROM entrepreneur GROUP BY Investor;
SELECT Investor, COUNT(Entrepreneur_ID) AS Entrepreneur_Count FROM entrepreneur GROUP BY Investor;
SELECT Investor, COUNT(DISTINCT Entrepreneur_ID) AS NumberOfInvestments FROM entrepreneur GROUP BY Investor ORDER BY NumberOfInvestments DESC LIMIT 1;
SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(DISTINCT Entrepreneur_ID) DESC LIMIT 1;
SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(DISTINCT Entrepreneur_ID) >= 2;
SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(DISTINCT Entrepreneur_ID) >= 2;
SELECT p.Name, e.Company FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID ORDER BY e.Money_Requested DESC;
SELECT p.Name AS Entrepreneur_Name, e.Investor FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID ORDER BY e.Money_Requested DESC;
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur);
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur);
SELECT DISTINCT e1.Investor FROM entrepreneur e1 JOIN entrepreneur e2 ON e1.Investor = e2.Investor WHERE e1.Money_Requested > 140000 AND e2.Money_Requested < 120000;
SELECT DISTINCT e1.Investor FROM entrepreneur e1 JOIN entrepreneur e2 ON e1.Investor = e2.Investor WHERE e1.Money_Requested > 140000 AND e2.Money_Requested < 120000;
SELECT COUNT(DISTINCT Company) AS Distinct_Companies FROM entrepreneur;
SELECT COUNT(DISTINCT Company) AS NumberOfDifferentCompanies FROM entrepreneur;
SELECT e.Company  FROM entrepreneur e  JOIN people p ON e.People_ID = p.People_ID  ORDER BY p.Height DESC  LIMIT 1;
SELECT e.Company FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID WHERE p.Height = (SELECT MAX(Height) FROM people);
SELECT COUNT(*) AS Total_Perpetrators FROM perpetrator;
SELECT Date  FROM perpetrator  ORDER BY Killed DESC;
SELECT SUM(Injured) AS Total_Injured FROM perpetrator GROUP BY People_ID ORDER BY Total_Injured ASC;
SELECT AVG(Injured) AS Average_Injured FROM perpetrator;
SELECT Location  FROM perpetrator  ORDER BY Killed DESC  LIMIT 1;
SELECT Name FROM people ORDER BY Height ASC;
SELECT DISTINCT p.Name  FROM people p  JOIN perpetrator perp ON p.People_ID = perp.People_ID;
SELECT p.Name  FROM people p  JOIN perpetrator pr ON p.People_ID = pr.People_ID  WHERE pr.Country <> 'China';
SELECT p.Name  FROM people p  JOIN perpetrator pr ON p.People_ID = pr.People_ID  ORDER BY p.Weight DESC  LIMIT 1;
SELECT SUM(p.Killed) AS Total_Kills FROM perpetrator p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height > 1.84;
SELECT DISTINCT p.Name  FROM perpetrator pr  JOIN people p ON pr.People_ID = p.People_ID  WHERE pr.Country IN ('China', 'Japan');
SELECT p.Height FROM perpetrator pr JOIN people p ON pr.People_ID = p.People_ID GROUP BY p.Height ORDER BY SUM(pr.Injured) DESC;
SELECT Country, COUNT(Perpetrator_ID) AS Number_of_Perpetrators FROM perpetrator GROUP BY Country;
SELECT Country, COUNT(*) AS Perpetrator_Count FROM perpetrator GROUP BY Country ORDER BY Perpetrator_Count DESC LIMIT 1;
SELECT Country FROM perpetrator GROUP BY Country HAVING COUNT(Perpetrator_ID) >= 2;
SELECT p.Name  FROM people p  JOIN perpetrator perp ON p.People_ID = perp.People_ID  ORDER BY perp.Year DESC;
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator);
SELECT DISTINCT p.Country FROM perpetrator p WHERE p.Injured > 50 AND p.Country IN (     SELECT DISTINCT p2.Country     FROM perpetrator p2     WHERE p2.Injured < 20 );
SELECT COUNT(DISTINCT Location) AS Distinct_Locations FROM perpetrator;
SELECT p.Date  FROM perpetrator pr  JOIN people p ON pr.People_ID = p.People_ID  WHERE p.Height = (SELECT MAX(Height) FROM people);
SELECT MAX(Year) AS Most_Recent_Crime_Year FROM perpetrator;
SELECT Campus FROM Campuses WHERE County = 'Los Angeles';
SELECT Campus FROM Campuses WHERE County = 'Los Angeles';
SELECT Campus FROM Campuses WHERE Location = 'Chico';
SELECT Campus FROM Campuses WHERE Location = 'Chico';
SELECT * FROM Campuses WHERE Year = 1958;
SELECT Campus FROM Campuses WHERE Year = 1958;
SELECT Campus  FROM Campuses  WHERE Year < 1800;
SELECT Campus FROM Campuses WHERE Year < 1800;
SELECT Campus  FROM Campuses  WHERE Year BETWEEN 1935 AND 1939;
SELECT Campus  FROM Campuses  WHERE Year BETWEEN 1935 AND 1939;
SELECT Campus  FROM Campuses  WHERE (Location = 'Northridge' AND County = 'Los Angeles')     OR (Location = 'San Francisco' AND County = 'San Francisco');
SELECT Campus  FROM Campuses  WHERE Location IN ('Northridge, Los Angeles', 'San Francisco, San Francisco');
SELECT CampusFee  FROM csu_fees  WHERE Campus = 'San Jose State University' AND Year = 1996;
SELECT CampusFee  FROM csu_fees  WHERE Campus = 'San Jose State University' AND Year = 1996;
SELECT CampusFee  FROM csu_fees  WHERE Campus = 'San Francisco State University' AND Year = 1996;
SELECT CampusFee  FROM csu_fees  WHERE Campus = 'San Francisco State University' AND Year = 1996;
SELECT COUNT(DISTINCT Campus) AS UniversityCount FROM csu_fees WHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_fees);
SELECT COUNT(DISTINCT Campus) AS UniversityCount FROM csu_fees WHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_fees);
SELECT COUNT(DISTINCT Campus) AS UniversityCount FROM csu_fees WHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_fees);
SELECT COUNT(DISTINCT Campus) AS UniversitiesWithAboveAverageFee FROM csu_fees WHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_fees);
SELECT Campus  FROM Campuses  WHERE County = 'Los Angeles' AND Year > 1950;
SELECT Campus  FROM Campuses  WHERE County = 'Los Angeles' AND Year > 1950;
SELECT Year, SUM(Degrees) AS TotalDegrees FROM degrees GROUP BY Year ORDER BY TotalDegrees DESC LIMIT 1;
SELECT Year, SUM(Degrees) AS TotalDegrees FROM degrees GROUP BY Year ORDER BY TotalDegrees DESC LIMIT 1;
SELECT Campus, SUM(Degrees) AS TotalDegrees FROM degrees GROUP BY Campus ORDER BY TotalDegrees DESC LIMIT 1;
SELECT Campus, SUM(Degrees) AS TotalDegrees FROM degrees GROUP BY Campus ORDER BY TotalDegrees DESC LIMIT 1;
SELECT Campus, SUM(Faculty) AS TotalFaculties FROM faculty WHERE Year = 2003 GROUP BY Campus ORDER BY TotalFaculties DESC LIMIT 1;
SELECT Campus FROM faculty WHERE Year = 2003 GROUP BY Campus ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AVG(CampusFee) AS AverageFee FROM csu_fees WHERE Year = 1996;
SELECT AVG(CampusFee) AS AverageFee FROM csu_fees WHERE Year = 1996;
SELECT AVG(CampusFee) AS AverageFee FROM csu_fees WHERE Year = 2005;
SELECT AVG(CampusFee) AS AverageFee FROM csu_fees WHERE Year = 2005;
SELECT SUM(Degrees) AS TotalDegrees FROM degrees WHERE Year BETWEEN 1998 AND 2002;
SELECT SUM(Degrees) AS TotalDegrees FROM degrees WHERE Year BETWEEN 1998 AND 2002;
SELECT SUM(d.Degrees) AS TotalDegrees FROM degrees d JOIN Campuses c ON d.Campus = c.Campus WHERE c.County = 'Orange' AND d.Year > 2000 GROUP BY c.Campus;
SELECT Campus, SUM(Degrees) AS TotalDegrees FROM degrees WHERE Year > 2000 AND Campus IN (     SELECT Campus FROM Campuses WHERE County = 'Orange' ) GROUP BY Campus;
SELECT c.Campus FROM faculty f JOIN Campuses c ON f.Campus = c.Campus WHERE f.Year = 2002 GROUP BY c.Campus HAVING COUNT(f.Faculty) > (     SELECT COUNT(f2.Faculty)     FROM faculty f2     JOIN Campuses c2 ON f2.Campus = c2.Campus     WHERE f2.Year = 2002 AND c2.County = 'Orange'     GROUP BY c2.Campus );
SELECT Campus FROM faculty WHERE Year = 2002 AND Faculty > (     SELECT MAX(Faculty)     FROM faculty f     JOIN Campuses c ON f.Campus = c.Campus     WHERE c.County = 'Orange' AND f.Year = 2002 )
SELECT Campus  FROM enrollments  WHERE Year = 1956 AND TotalEnrollment_AY > 400 AND FTE_AY > 200;
SELECT Campus  FROM Campuses  JOIN enrollments ON Campuses.Campus = enrollments.Campus  WHERE Year = 1956  AND FTE_AY > 200  AND TotalEnrollment_AY > 400;
SELECT COUNT(*) FROM Campuses WHERE County = 'Los Angeles';
SELECT COUNT(*)  FROM Campuses  WHERE County = 'LA';
SELECT Campus FROM Campuses WHERE County = 'Los Angeles';
SELECT Campus FROM Campuses WHERE County = 'Los Angeles';
SELECT SUM(Degrees) AS TotalDegrees FROM degrees WHERE Campus = 'San Jose State University' AND Year = 2000;
SELECT Degrees  FROM degrees  WHERE Campus = 'San Jose State University' AND Year = 2000;
SELECT Degrees  FROM degrees  WHERE Campus = 'San Francisco State University' AND Year = 2001;
SELECT Degrees  FROM degrees  WHERE Campus = 'San Francisco State University' AND Year = 2001;
SELECT SUM(Faculty) AS TotalFaculty FROM faculty WHERE Year = 2002;
SELECT SUM(Faculty) AS TotalFaculty FROM faculty WHERE Year = 2002;
SELECT Faculty  FROM faculty  WHERE Campus = 'Long Beach State University' AND Year = 2002;
SELECT Faculty  FROM faculty  WHERE Campus = 'Long Beach State University' AND Year = 2002;
SELECT Faculty  FROM faculty  WHERE Campus = 'San Francisco State University' AND Year = 2004;
SELECT Faculty  FROM faculty  WHERE Campus = 'San Francisco State University' AND Year = 2004;
SELECT Campus FROM faculty WHERE Year = 2004 GROUP BY Campus HAVING COUNT(*) BETWEEN 600 AND 1000;
SELECT Campus  FROM faculty  WHERE Year = 2004  AND Faculty BETWEEN 600 AND 1000;
SELECT f.Faculty FROM faculty f JOIN degrees d ON f.Campus = d.Campus WHERE d.Year = 2002 GROUP BY f.Campus ORDER BY COUNT(d.Degrees) DESC LIMIT 1;
SELECT f.Faculty FROM faculty f JOIN degrees d ON f.Campus = d.Campus WHERE d.Year = 2002 AND d.Campus = (     SELECT Campus     FROM degrees     WHERE Year = 2002     GROUP BY Campus     ORDER BY SUM(Degrees) DESC     LIMIT 1 );
SELECT f.Faculty FROM faculty f JOIN degrees d ON f.Campus = d.Campus WHERE d.Year = 2001 AND d.Degrees = (     SELECT MIN(Degrees)     FROM degrees     WHERE Year = 2001 )
SELECT f.Faculty FROM faculty f WHERE f.Campus = (     SELECT d.Campus     FROM degrees d     WHERE d.Year = 2001     ORDER BY d.Degrees ASC     LIMIT 1 );
SELECT Undergraduate  FROM discipline_enrollments  WHERE Campus = 'San Jose State University' AND Year = 2004;
SELECT SUM(Undergraduate) AS TotalUndergraduates FROM discipline_enrollments WHERE Campus = 'San Jose State';
SELECT SUM(Graduate) AS TotalGraduates FROM discipline_enrollments WHERE Campus = 'San Francisco State University' AND Year = 2004;
SELECT Degrees  FROM degrees  WHERE Campus = 'San Francisco State University' AND Year = 2004;
SELECT CampusFee  FROM csu_fees  WHERE Campus = 'San Francisco State University' AND Year = 2000;
SELECT CampusFee  FROM csu_fees  WHERE Campus = 'San Francisco State University' AND Year = 2000;
SELECT CampusFee  FROM csu_fees  WHERE Campus = 'San Jose State University' AND Year = 2000;
SELECT CampusFee  FROM csu_fees  WHERE Campus = 'San Jose State University' AND Year = 2000;
SELECT COUNT(*) AS TotalCampuses FROM Campuses;
SELECT COUNT(*) AS TotalCampuses FROM Campuses;
SELECT COUNT(*) AS Number_of_Candidates FROM candidate;
SELECT COUNT(*) FROM candidate;
SELECT Poll_Source, COUNT(*) AS Candidate_Count FROM candidate GROUP BY Poll_Source ORDER BY Candidate_Count DESC LIMIT 1;
SELECT Poll_Source FROM candidate GROUP BY Poll_Source ORDER BY COUNT(Candidate_ID) DESC LIMIT 1;
SELECT Support_rate  FROM candidate  ORDER BY Support_rate DESC  LIMIT 3;
SELECT Support_rate  FROM candidate  ORDER BY Support_rate DESC  LIMIT 3;
SELECT Candidate_ID  FROM candidate  ORDER BY Oppose_rate ASC  LIMIT 1;
SELECT Candidate_ID  FROM candidate  ORDER BY Oppose_rate ASC  LIMIT 1;
SELECT c.Support_rate, c.Consider_rate, c.Oppose_rate FROM candidate c ORDER BY c.Unsure_rate ASC;
SELECT Candidate_ID, Support_rate, Consider_rate, Oppose_rate FROM candidate ORDER BY Unsure_rate ASC;
SELECT Poll_Source  FROM candidate  ORDER BY Oppose_rate DESC  LIMIT 1;
SELECT Poll_Source FROM candidate WHERE Oppose_rate IS NOT NULL;
SELECT Name FROM people ORDER BY Date_of_Birth ASC;
SELECT Name FROM people ORDER BY Date_of_Birth;
SELECT AVG(Height) AS Average_Height, AVG(Weight) AS Average_Weight FROM people WHERE Sex = 'M';
SELECT AVG(Height) AS Average_Height, AVG(Weight) AS Average_Weight FROM people WHERE Sex = 'M';
SELECT Name  FROM people  WHERE Height > 200 OR Height < 190;
SELECT Name  FROM people  WHERE Height > 200 OR Height < 190;
SELECT Sex, AVG(Weight) AS Average_Weight, MIN(Weight) AS Minimum_Weight FROM people GROUP BY Sex;
SELECT Sex, AVG(Weight) AS Average_Weight, MIN(Weight) AS Minimum_Weight FROM people GROUP BY Sex;
SELECT p.Name, p.Sex FROM candidate c JOIN people p ON c.People_ID = p.People_ID ORDER BY c.Support_rate DESC LIMIT 1;
SELECT p.Name, p.Sex FROM candidate c JOIN people p ON c.People_ID = p.People_ID WHERE c.Support_rate = (SELECT MAX(Support_rate) FROM candidate);
SELECT p.Sex, c.Name FROM candidate c JOIN people p ON c.People_ID = p.People_ID WHERE (p.Sex, c.Oppose_rate) IN (     SELECT p2.Sex, MIN(c2.Oppose_rate)     FROM candidate c2     JOIN people p2 ON c2.People_ID = p2.People_ID     GROUP BY p2.Sex );
SELECT p.Sex, p.Name FROM candidate c JOIN people p ON c.People_ID = p.People_ID WHERE c.Oppose_rate = (     SELECT MAX(Oppose_rate)     FROM candidate c2     JOIN people p2 ON c2.People_ID = p2.People_ID     WHERE p2.Sex = p.Sex )
SELECT p.Sex, AVG(c.Unsure_rate) AS Average_Unsure_Rate FROM candidate c JOIN people p ON c.People_ID = p.People_ID GROUP BY p.Sex ORDER BY Average_Unsure_Rate DESC LIMIT 1;
SELECT p.Sex FROM candidate c JOIN people p ON c.People_ID = p.People_ID WHERE c.Unsure_rate = (SELECT MAX(Unsure_rate) FROM candidate);
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM candidate);
SELECT p.Name  FROM people p  WHERE p.People_ID NOT IN (SELECT c.People_ID FROM candidate c);
SELECT p.Name FROM candidate c JOIN people p ON c.People_ID = p.People_ID WHERE c.Support_rate < c.Oppose_rate;
SELECT p.Name FROM candidate c JOIN people p ON c.People_ID = p.People_ID WHERE c.Support_rate < c.Oppose_rate;
SELECT Sex, COUNT(*) AS Count FROM people WHERE Weight > 85 GROUP BY Sex;
SELECT Sex, COUNT(*) AS Number_of_People FROM people WHERE Weight > 85 GROUP BY Sex;
SELECT      MAX(Support_rate) AS Highest_Support_Percentage,     MIN(Consider_rate) AS Lowest_Consider_Rate,     MIN(Oppose_rate) AS Lowest_Oppose_Rate FROM      candidate_poll.candidate;
SELECT      MAX(Support_rate) AS Max_Support_Rate,      MIN(Consider_rate) AS Min_Consider_Rate,      MIN(Oppose_rate) AS Min_Oppose_Rate  FROM      candidate_poll.candidate;
SELECT p.Name  FROM candidate c  JOIN people p ON c.People_ID = p.People_ID  WHERE p.Sex = 'F'  ORDER BY p.Name;
SELECT p.Name  FROM candidate c  JOIN people p ON c.People_ID = p.People_ID  WHERE p.Sex = 'F'  ORDER BY p.Name;
SELECT p.Name  FROM people p  WHERE p.Height < (SELECT AVG(Height) FROM people);
SELECT Name  FROM people  WHERE Height < (SELECT AVG(Height) FROM people);
SELECT * FROM people;
SELECT * FROM people;
SELECT title  FROM Movie  WHERE director = 'steven spielberg';
SELECT title  FROM Movie  WHERE director = 'Steven Spielberg';
SELECT title  FROM Movie  WHERE year > 2000 AND director = 'James Cameron';
SELECT title  FROM Movie  WHERE director = 'James Cameron' AND year > 2000;
SELECT COUNT(*) FROM Movie WHERE year < 2000;
SELECT COUNT(*) FROM Movie WHERE year < 2000;
SELECT director FROM Movie WHERE title = 'Avatar';
SELECT director FROM Movie WHERE title = 'Avatar';
SELECT COUNT(*) FROM Reviewer;
SELECT COUNT(*) FROM Reviewer;
SELECT rID FROM Reviewer WHERE name LIKE '%Mike%';
SELECT rID FROM Reviewer WHERE name LIKE '%Mike%';
SELECT rID FROM Reviewer WHERE name = 'Daniel Lewis';
SELECT rID FROM Reviewer WHERE name = 'Daniel Lewis';
SELECT COUNT(*)  FROM Rating  WHERE stars > 3;
SELECT COUNT(*)  FROM Rating  WHERE stars > 3;
SELECT MIN(stars) AS lowest_rating, MAX(stars) AS highest_rating FROM Rating;
SELECT MAX(stars) AS max_stars, MIN(stars) AS min_stars FROM Rating;
SELECT DISTINCT m.year FROM Movie m JOIN Rating r ON m.mID = r.mID WHERE r.stars IN (4, 5) ORDER BY m.year ASC;
SELECT DISTINCT m.year FROM Movie m JOIN Rating r ON m.mID = r.mID WHERE r.stars IN (4, 5) ORDER BY m.year ASC;
SELECT DISTINCT m.director, m.title FROM Movie m JOIN Rating r ON m.mID = r.mID WHERE r.stars = 5;
SELECT DISTINCT m.director, m.title FROM Movie m JOIN Rating r ON m.mID = r.mID WHERE r.stars = 5;
SELECT r.name, AVG(rt.stars) AS average_rating FROM Reviewer r JOIN Rating rt ON r.rID = rt.rID GROUP BY r.name;
SELECT r.name, AVG(rt.stars) AS average_stars FROM Reviewer r JOIN Rating rt ON r.rID = rt.rID GROUP BY r.name;
SELECT title  FROM Movie  WHERE mID NOT IN (SELECT mID FROM Rating);
SELECT title  FROM Movie  WHERE mID NOT IN (SELECT mID FROM Rating);
SELECT DISTINCT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID WHERE Rating.ratingDate IS NULL;
SELECT DISTINCT r.name FROM Reviewer r LEFT JOIN Rating ra ON r.rID = ra.rID WHERE ra.ratingDate IS NULL;
SELECT AVG(R.stars) AS average_stars, M.title FROM Movie M JOIN Rating R ON M.mID = R.mID WHERE M.year = (SELECT MIN(year) FROM Movie) GROUP BY M.title;
SELECT m.title, AVG(r.stars) AS average_rating FROM Movie m JOIN Rating r ON m.mID = r.mID WHERE m.year = (SELECT MIN(year) FROM Movie) GROUP BY m.title;
SELECT title FROM Movie ORDER BY year DESC LIMIT 1;
SELECT title FROM Movie ORDER BY year DESC LIMIT 1;
SELECT MAX(r.stars) AS max_stars, m.year FROM Movie m JOIN Rating r ON m.mID = r.mID WHERE m.year = (SELECT MAX(year) FROM Movie);
SELECT MAX(r.stars) AS highest_rating, m.year AS release_year FROM Movie m JOIN Rating r ON m.mID = r.mID WHERE m.year = (SELECT MAX(year) FROM Movie);
SELECT title  FROM Movie  WHERE year > (SELECT MAX(year) FROM Movie WHERE director = 'Steven Spielberg');
SELECT title  FROM Movie  WHERE year > (SELECT MAX(year) FROM Movie WHERE director = 'Steven Spielberg');
SELECT m.title, m.director FROM Movie m JOIN Rating r ON m.mID = r.mID WHERE r.stars > (     SELECT AVG(r2.stars)     FROM Movie m2     JOIN Rating r2 ON m2.mID = r2.mID     WHERE m2.director = 'James Cameron' )
SELECT m.title, m.director FROM Movie m JOIN Rating r ON m.mID = r.mID WHERE r.stars > (     SELECT AVG(r2.stars)     FROM Movie m2     JOIN Rating r2 ON m2.mID = r2.mID     WHERE m2.director = 'James Cameron' )
SELECT Reviewer.name, Movie.title, Rating.stars, Rating.ratingDate FROM Rating JOIN Reviewer ON Rating.rID = Reviewer.rID JOIN Movie ON Rating.mID = Movie.mID ORDER BY Reviewer.name, Movie.title, Rating.stars;
SELECT Reviewer.name, Movie.title, Rating.stars, Rating.ratingDate FROM Rating JOIN Reviewer ON Rating.rID = Reviewer.rID JOIN Movie ON Rating.mID = Movie.mID ORDER BY Reviewer.name, Movie.title, Rating.stars;
SELECT r.name FROM Reviewer r JOIN Rating rt ON r.rID = rt.rID GROUP BY r.rID, r.name HAVING COUNT(rt.mID) >= 3;
SELECT r.name FROM Reviewer r JOIN Rating rt ON r.rID = rt.rID GROUP BY r.rID, r.name HAVING COUNT(rt.mID) >= 3;
SELECT Reviewer.name  FROM Reviewer  JOIN Rating ON Reviewer.rID = Rating.rID  JOIN Movie ON Rating.mID = Movie.mID  WHERE Movie.title = 'Gone with the Wind';
SELECT DISTINCT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID WHERE Movie.title = 'Gone with the Wind';
SELECT DISTINCT m.director FROM Movie m JOIN Rating r ON m.mID = r.mID JOIN Reviewer rev ON r.rID = rev.rID WHERE rev.name = 'Sarah Martinez';
SELECT DISTINCT m.director FROM Movie m JOIN Rating r ON m.mID = r.mID JOIN Reviewer rev ON r.rID = rev.rID WHERE rev.name = 'Sarah Martinez';
SELECT r.name, m.title, ra.stars FROM Reviewer r JOIN Rating ra ON r.rID = ra.rID JOIN Movie m ON ra.mID = m.mID WHERE r.name = m.director;
SELECT DISTINCT r.name AS reviewer_name, m.title AS movie_title, ra.stars FROM Reviewer r JOIN Rating ra ON r.rID = ra.rID JOIN Movie m ON ra.mID = m.mID WHERE r.name = m.director;
SELECT Reviewer.name, Movie.title  FROM Reviewer  JOIN Rating ON Reviewer.rID = Rating.rID  JOIN Movie ON Rating.mID = Movie.mID;
SELECT Reviewer.name, Movie.title FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID;
SELECT title  FROM Movie  WHERE mID NOT IN (     SELECT mID      FROM Rating      WHERE rID IN (         SELECT rID          FROM Reviewer          WHERE name = 'Chris Jackson'     ) );
SELECT title  FROM Movie  WHERE mID NOT IN (     SELECT mID      FROM Rating      JOIN Reviewer ON Rating.rID = Reviewer.rID      WHERE Reviewer.name = 'Chris Jackson' );
SELECT m.title, m.director FROM Movie m WHERE m.director IN (     SELECT director     FROM Movie     GROUP BY director     HAVING COUNT(*) > 1 ) ORDER BY m.director, m.title;
SELECT m.title, d.director FROM Movie m JOIN (     SELECT director     FROM Movie     GROUP BY director     HAVING COUNT(mID) > 1 ) d ON m.director = d.director;
SELECT m.title, m.year FROM Movie m WHERE m.director IN (     SELECT director     FROM Movie     GROUP BY director     HAVING COUNT(*) > 1 );
SELECT m.title, m.year FROM Movie m WHERE m.director IN (     SELECT director     FROM Movie     GROUP BY director     HAVING COUNT(*) > 1 );
SELECT director  FROM Movie  GROUP BY director  HAVING COUNT(mID) = 1;
SELECT director  FROM Movie  GROUP BY director  HAVING COUNT(mID) = 1;
SELECT director  FROM Movie  WHERE director IS NOT NULL  GROUP BY director  HAVING COUNT(mID) = 1;
SELECT director  FROM Movie  GROUP BY director  HAVING COUNT(mID) = 1 AND director IS NOT NULL;
SELECT m.director, COUNT(r.mID) AS review_count FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.director;
SELECT m.director, COUNT(r.rID) AS review_count FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.director;
SELECT m.title, AVG(r.stars) AS average_rating FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.mID, m.title ORDER BY average_rating DESC LIMIT 1;
SELECT m.title, AVG(r.stars) AS average_rating FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.mID, m.title ORDER BY average_rating DESC LIMIT 1;
SELECT m.title, AVG(r.stars) AS average_rating FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.mID HAVING AVG(r.stars) = (SELECT MIN(avg_rating)                         FROM (SELECT AVG(stars) AS avg_rating                               FROM Rating                               GROUP BY mID) AS avg_ratings);
SELECT m.title, AVG(r.stars) AS average_rating FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.mID HAVING AVG(r.stars) = (SELECT MIN(avg_rating)                         FROM (SELECT AVG(stars) AS avg_rating                               FROM Rating                               GROUP BY mID) AS avg_ratings);
SELECT m.title, m.year FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.mID, m.title, m.year ORDER BY AVG(r.stars) DESC LIMIT 3;
SELECT m.title, m.year FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.mID, m.title, m.year ORDER BY AVG(r.stars) DESC LIMIT 3;
SELECT m.director, m.title, MAX(r.stars) AS highest_rating FROM Movie m JOIN Rating r ON m.mID = r.mID WHERE m.director IS NOT NULL GROUP BY m.director, m.title HAVING r.stars = (SELECT MAX(stars) FROM Rating r2 WHERE r2.mID = m.mID)
SELECT m.director, m.title, r.stars FROM Movie m JOIN Rating rt ON m.mID = rt.mID JOIN Reviewer r ON rt.rID = r.rID;
SELECT m.title, r.stars FROM Rating r JOIN Movie m ON r.mID = m.mID WHERE (r.rID, r.stars) IN (     SELECT rID, MIN(stars)     FROM Rating     GROUP BY rID );
SELECT r.rID, m.title, r2.stars FROM Reviewer r JOIN Rating r2 ON r.rID = r2.rID JOIN Movie m ON r2.mID = m.mID WHERE (r2.rID, r2.stars) IN (     SELECT r3.rID, MIN(r3.stars)     FROM Rating r3     GROUP BY r3.rID );
SELECT m.title, MIN(r.stars) AS lowest_rating FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.director, m.title HAVING MIN(r.stars) = (     SELECT MIN(r2.stars)     FROM Movie m2     JOIN Rating r2 ON m2.mID = r2.mID     WHERE m2.director = m.director )
SELECT m.director, m.title, MIN(r.stars) AS lowest_rating FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.director, m.title HAVING MIN(r.stars) = (SELECT MIN(r2.stars)                        FROM Movie m2                        JOIN Rating r2 ON m2.mID = r2.mID                        WHERE m2.director = m.director);
SELECT m.title FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.mID, m.title ORDER BY COUNT(r.rID) DESC LIMIT 1;
SELECT title  FROM Movie  WHERE mID = (     SELECT mID      FROM Rating      GROUP BY mID      ORDER BY COUNT(*) DESC      LIMIT 1 );
SELECT DISTINCT m.title  FROM Movie m  JOIN Rating r ON m.mID = r.mID  WHERE r.stars BETWEEN 3 AND 5;
SELECT DISTINCT m.title FROM Movie m JOIN Rating r ON m.mID = r.mID WHERE r.stars BETWEEN 3 AND 5;
SELECT DISTINCT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID WHERE Rating.stars > 3;
SELECT DISTINCT r.name FROM Reviewer r JOIN Rating rt ON r.rID = rt.rID WHERE rt.stars > 3;
SELECT m.title, AVG(r.stars) AS average_stars FROM Movie m JOIN Rating r ON m.mID = r.mID WHERE r.rID NOT IN (SELECT rID FROM Reviewer WHERE name = 'Brittany Harris') GROUP BY m.title;
SELECT m.title, AVG(r.stars) AS average_rating FROM Movie m LEFT JOIN Rating r ON m.mID = r.mID WHERE m.mID NOT IN (     SELECT r.mID     FROM Rating r     JOIN Reviewer rev ON r.rID = rev.rID     WHERE rev.name = 'Brittany Harris' ) GROUP BY m.mID, m.title;
SELECT m.mID  FROM Movie m  WHERE m.mID NOT IN (     SELECT r.mID      FROM Rating r      JOIN Reviewer rev ON r.rID = rev.rID      WHERE rev.name = 'Brittany Harris' );
SELECT m.mID  FROM Movie m  WHERE m.mID NOT IN (     SELECT r.mID      FROM Rating r      JOIN Reviewer rev ON r.rID = rev.rID      WHERE rev.name = 'Brittany Harris' );
SELECT m.title, AVG(r.stars) AS average_rating FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.mID, m.title HAVING COUNT(r.rID) >= 2;
SELECT m.title, AVG(r.stars) AS average_rating FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.mID HAVING COUNT(r.rID) > 3;
SELECT DISTINCT rID  FROM Reviewer  WHERE rID NOT IN (SELECT rID FROM Rating WHERE stars = 4);
SELECT DISTINCT r.rID FROM Reviewer r WHERE r.rID NOT IN (     SELECT rID     FROM Rating     WHERE stars = 4 );
SELECT rID  FROM Rating  GROUP BY rID  HAVING COUNT(CASE WHEN stars = 4 THEN 1 END) < COUNT(*);
SELECT rID  FROM Reviewer  WHERE rID NOT IN (SELECT rID FROM Rating WHERE stars = 4);
SELECT DISTINCT m.title FROM Movie m LEFT JOIN Rating r ON m.mID = r.mID LEFT JOIN Reviewer rev ON r.rID = rev.rID WHERE m.year > 2000 OR rev.name = 'Brittany Harris';
SELECT DISTINCT m.title FROM Movie m LEFT JOIN Rating r ON m.mID = r.mID LEFT JOIN Reviewer rev ON r.rID = rev.rID WHERE m.year > 2000 OR rev.name = 'Brittany Harris';
SELECT title  FROM Movie  WHERE year < 1980 OR director = 'James Cameron';
SELECT title  FROM Movie  WHERE year < 1980 OR director = 'James Cameron';
SELECT DISTINCT r.name FROM Reviewer r JOIN Rating rt ON r.rID = rt.rID WHERE rt.stars IN (3, 4);
SELECT DISTINCT Reviewer.name FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID WHERE Rating.stars IN (3, 4);
SELECT DISTINCT m.title FROM Movie m JOIN Rating r ON m.mID = r.mID WHERE r.stars IN (3, 4);
SELECT DISTINCT m.title FROM Movie m JOIN Rating r ON m.mID = r.mID WHERE r.stars IN (3, 4);
SELECT COUNT(*) FROM county_public_safety;
SELECT COUNT(DISTINCT County_ID) AS Number_of_Counties FROM county_public_safety;
SELECT Name FROM county_public_safety ORDER BY Population DESC;
SELECT Name FROM county_public_safety ORDER BY Population DESC;
SELECT DISTINCT Police_force  FROM county_public_safety  WHERE Location NOT LIKE '%east%';
SELECT DISTINCT Police_force  FROM county_public_safety  WHERE Location NOT LIKE '%East%';
SELECT MIN(Crime_rate) AS Min_Crime_Rate, MAX(Crime_rate) AS Max_Crime_Rate FROM county_public_safety;
SELECT MIN(Crime_rate) AS Min_Crime_Rate, MAX(Crime_rate) AS Max_Crime_Rate FROM county_public_safety;
SELECT County_ID, Crime_rate  FROM county_public_safety  ORDER BY Police_officers ASC;
SELECT County_ID, Crime_rate  FROM county_public_safety  ORDER BY Police_officers ASC;
SELECT Name FROM city ORDER BY Name ASC;
SELECT Name FROM city ORDER BY Name;
SELECT c.Name, (c.Hispanic * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) AS Hispanic_Percentage FROM city c WHERE c.Black > 10;
SELECT c.Name, (c.Hispanic * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) AS Hispanic_Percentage FROM city c WHERE (c.Black * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) > 10;
SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1;
SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1;
SELECT Name  FROM city  ORDER BY White DESC  LIMIT 5;
SELECT Name  FROM city  ORDER BY White / (White + Black + Amerindian + Asian + Multiracial + Hispanic) DESC  LIMIT 5;
SELECT city.Name AS City_Name, county_public_safety.Name AS County_Name FROM city JOIN county_public_safety ON city.County_ID = county_public_safety.County_ID;
SELECT city.Name AS City_Name, county_public_safety.Name AS County_Name FROM city JOIN county_public_safety ON city.County_ID = county_public_safety.County_ID;
SELECT      c.Name AS City_Name,      (c.White * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) AS White_Percentage,      cps.Crime_rate  FROM      city c  JOIN      county_public_safety cps ON c.County_ID = cps.County_ID;
SELECT      c.Name AS City_Name,      (c.White * 100.0 / (c.White + c.Black + c.Amerindian + c.Asian + c.Multiracial + c.Hispanic)) AS White_Percentage,      ps.Crime_rate  FROM      city c  JOIN      county_public_safety ps ON c.County_ID = ps.County_ID;
SELECT c.Name FROM city c JOIN county_public_safety cps ON c.County_ID = cps.County_ID WHERE cps.Police_officers = (SELECT MAX(Police_officers) FROM county_public_safety);
SELECT c.Name FROM city c JOIN county_public_safety cps ON c.County_ID = cps.County_ID WHERE cps.Police_officers = (SELECT MAX(Police_officers) FROM county_public_safety);
SELECT COUNT(c.City_ID) AS Number_of_Cities FROM city c JOIN county_public_safety cps ON c.County_ID = cps.County_ID WHERE cps.Population > 20000;
SELECT COUNT(DISTINCT c.City_ID)  FROM city c  JOIN county_public_safety cps ON c.County_ID = cps.County_ID  WHERE cps.Population > 20000;
SELECT cps.Crime_rate FROM county_public_safety cps JOIN city c ON cps.County_ID = c.County_ID WHERE c.White > 90;
SELECT cps.Crime_rate FROM county_public_safety cps JOIN city c ON cps.County_ID = c.County_ID WHERE c.White > 90 GROUP BY cps.County_ID, cps.Crime_rate;
SELECT Police_force, COUNT(DISTINCT County_ID) AS County_Count FROM county_public_safety GROUP BY Police_force;
SELECT Police_force, COUNT(DISTINCT County_ID) AS County_Count FROM county_public_safety GROUP BY Police_force;
SELECT Location, COUNT(*) AS County_Count FROM county_public_safety GROUP BY Location ORDER BY County_Count DESC LIMIT 1;
SELECT Location, COUNT(DISTINCT County_ID) AS County_Count FROM county_public_safety GROUP BY Location ORDER BY County_Count DESC LIMIT 1;
SELECT Name  FROM county_public_safety  WHERE County_ID NOT IN (SELECT DISTINCT County_ID FROM city);
SELECT cps.Name  FROM county_public_safety cps  LEFT JOIN city c ON cps.County_ID = c.County_ID  WHERE c.City_ID IS NULL;
SELECT County_ID, Police_force  FROM county_public_safety  WHERE Location IN ('East', 'West');
SELECT DISTINCT cps1.Police_force FROM county_public_safety cps1 JOIN county_public_safety cps2 ON cps1.Police_force = cps2.Police_force WHERE cps1.Location = 'East' AND cps2.Location = 'West';
SELECT city.Name FROM city JOIN county_public_safety ON city.County_ID = county_public_safety.County_ID WHERE county_public_safety.Crime_rate < 100;
SELECT city.Name FROM city JOIN county_public_safety ON city.County_ID = county_public_safety.County_ID WHERE county_public_safety.Crime_rate < 100;
SELECT Case_burden  FROM county_public_safety  ORDER BY Population DESC;
SELECT Case_burden  FROM county_public_safety  ORDER BY Population DESC;
SELECT roomName  FROM Rooms  WHERE decor = 'modern' AND basePrice < 160 AND beds = 2;
SELECT roomName  FROM Rooms  WHERE basePrice < 160 AND beds = 2 AND decor = 'modern';
SELECT RoomId, roomName  FROM Rooms  WHERE basePrice > 160 AND maxOccupancy > 2;
SELECT RoomId, roomName  FROM Rooms  WHERE basePrice > 160 AND maxOccupancy > 2;
SELECT r.RoomId, r.roomName, COUNT(res.Code) AS ReservationCount FROM Rooms r JOIN Reservations res ON r.RoomId = res.Room GROUP BY r.RoomId, r.roomName ORDER BY ReservationCount DESC LIMIT 1;
SELECT Room, COUNT(*) AS ReservationCount FROM Reservations GROUP BY Room ORDER BY ReservationCount DESC LIMIT 1;
SELECT SUM(Kids) AS TotalKids FROM Reservations WHERE LastName = 'SWEAZY' AND FirstName = 'ROY';
SELECT SUM(Kids) AS TotalKids FROM Reservations WHERE FirstName = 'ROY' AND LastName = 'SWEAZ';
SELECT COUNT(*)  FROM Reservations  WHERE LastName = 'SWEAZY' AND FirstName = 'ROY';
SELECT COUNT(*)  FROM Reservations  WHERE LastName = 'SWEAZY' AND FirstName = 'ROY';
SELECT r.roomName AS FullName, res.Rate, res.CheckIn, res.CheckOut FROM Rooms r JOIN Reservations res ON r.RoomId = res.Room ORDER BY res.Rate DESC LIMIT 1;
SELECT r.roomName, res.Rate, res.CheckIn, res.CheckOut FROM Rooms r JOIN Reservations res ON r.RoomId = res.Room WHERE res.Rate = (SELECT MAX(Rate) FROM Reservations);
SELECT Adults  FROM Reservations  WHERE LastName = 'SELBIG' AND FirstName = 'CONRAD' AND CheckIn = '2010-10-23';
SELECT Adults  FROM Reservations  WHERE LastName = 'SELBIG' AND FirstName = 'CONRAD' AND CheckIn = '2010-10-23';
SELECT SUM(Kids)  FROM Reservations  WHERE Room = (SELECT RoomId FROM Rooms WHERE roomName = 'DAMIEN TRACHSEL')  AND CheckIn = '2010-09-21';
SELECT Kids  FROM Reservations  WHERE FirstName = 'DAMIEN' AND LastName = 'TRACHSEL' AND CheckIn = '2010-09-21';
SELECT SUM(beds) AS TotalKingBeds FROM Rooms WHERE bedType = 'King';
SELECT SUM(beds) AS TotalKingBeds  FROM Rooms  WHERE bedType = 'King';
SELECT roomName, decor  FROM Rooms  WHERE bedType = 'king'  ORDER BY basePrice;
SELECT roomName, decor  FROM Rooms  WHERE bedType = 'king'  ORDER BY basePrice;
SELECT roomName, basePrice  FROM Rooms  ORDER BY basePrice ASC  LIMIT 1;
SELECT roomName, basePrice  FROM Rooms  WHERE basePrice = (SELECT MIN(basePrice) FROM Rooms);
SELECT decor FROM Rooms WHERE roomName IN ('Recluse', 'Defiance');
SELECT decor FROM Rooms WHERE roomName = 'Recluse and defiance';
SELECT bedType, AVG(basePrice) AS averageBasePrice FROM Rooms GROUP BY bedType;
SELECT bedType, AVG(basePrice) AS averageBasePrice FROM Rooms GROUP BY bedType;
SELECT SUM(maxOccupancy) AS TotalPeople FROM Rooms WHERE decor = 'modern';
SELECT SUM(maxOccupancy) AS TotalOccupancy FROM Rooms WHERE decor = 'modern';
SELECT r.decor FROM Rooms r LEFT JOIN Reservations res ON r.RoomId = res.Room GROUP BY r.decor ORDER BY COUNT(res.Code) ASC LIMIT 1;
SELECT decor, COUNT(*) AS reservation_count FROM Rooms r JOIN Reservations res ON r.RoomId = res.Room GROUP BY decor ORDER BY reservation_count ASC LIMIT 1;
SELECT r.RoomId, COUNT(*) AS TimesMaxOccupancyReached FROM Reservations res JOIN Rooms r ON res.Room = r.RoomId WHERE (res.Adults + res.Kids) = r.maxOccupancy GROUP BY r.RoomId;
SELECT COUNT(*) AS FullOccupancyCount FROM Reservations r JOIN Rooms rm ON r.Room = rm.RoomId WHERE (r.Adults + r.Kids) >= rm.maxOccupancy;
SELECT DISTINCT r.FirstName, r.LastName FROM Reservations r JOIN Rooms rm ON r.Room = rm.RoomId WHERE r.Rate > rm.basePrice;
SELECT DISTINCT r.FirstName, r.LastName FROM Reservations r JOIN Rooms rm ON r.Room = rm.RoomId WHERE r.Rate > rm.basePrice;
SELECT COUNT(*) AS TotalRooms FROM Rooms;
SELECT COUNT(*) AS TotalRooms FROM Rooms;
SELECT COUNT(*) AS NumberOfKingBeds FROM Rooms WHERE bedType = 'king';
SELECT COUNT(*) FROM Rooms WHERE bedType = 'king';
SELECT bedType, COUNT(*) AS numberOfRooms FROM Rooms GROUP BY bedType;
SELECT bedType, COUNT(*) AS numberOfRooms FROM Rooms GROUP BY bedType;
SELECT roomName FROM Rooms WHERE maxOccupancy = (SELECT MAX(maxOccupancy) FROM Rooms);
SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;
SELECT RoomId, roomName  FROM Rooms  WHERE basePrice = (SELECT MAX(basePrice) FROM Rooms);
SELECT roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;
SELECT bedType, roomName FROM Rooms WHERE decor = 'Traditional';
SELECT bedType, roomName FROM Rooms WHERE decor = 'traditional';
SELECT decor, COUNT(*) AS number_of_rooms FROM Rooms WHERE bedType = 'king' GROUP BY decor;
SELECT decor, COUNT(*) AS king_bed_rooms FROM Rooms WHERE bedType = 'King' GROUP BY decor;
SELECT decor, AVG(basePrice) AS averagePrice, MIN(basePrice) AS minimumPrice FROM Rooms GROUP BY decor;
SELECT decor, AVG(basePrice) AS averagePrice FROM Rooms GROUP BY decor;
SELECT roomName FROM Rooms ORDER BY basePrice;
SELECT roomName FROM Rooms ORDER BY basePrice;
SELECT decor, COUNT(*) AS room_count FROM Rooms WHERE basePrice > 120 GROUP BY decor;
SELECT decor, COUNT(*) AS RoomCount FROM Rooms WHERE basePrice > 120 GROUP BY decor;
SELECT bedType, AVG(basePrice) AS averagePrice FROM Rooms GROUP BY bedType;
SELECT bedType, AVG(basePrice) AS averageBasePrice FROM Rooms GROUP BY bedType;
SELECT roomName  FROM Rooms  WHERE bedType IN ('king', 'queen');
SELECT roomName  FROM Rooms  WHERE bedType IN ('king', 'queen');
SELECT COUNT(DISTINCT bedType) AS DifferentBedTypes FROM Rooms;
SELECT COUNT(DISTINCT bedType) AS DistinctBedTypes FROM Rooms;
SELECT RoomId, roomName  FROM Rooms  ORDER BY basePrice DESC  LIMIT 3;
SELECT RoomId, roomName  FROM Rooms  ORDER BY basePrice DESC  LIMIT 3;
SELECT roomName  FROM Rooms  WHERE basePrice > (SELECT AVG(basePrice) FROM Rooms);
SELECT roomName  FROM Rooms  WHERE basePrice > (SELECT AVG(basePrice) FROM Rooms);
SELECT COUNT(*) AS NumberOfAvailableRooms FROM Rooms WHERE RoomId NOT IN (SELECT Room FROM Reservations);
SELECT COUNT(*) AS UnreservedRooms FROM Rooms WHERE RoomId NOT IN (SELECT Room FROM Reservations);
SELECT r.roomName, COUNT(res.Code) AS NumberOfReservations FROM Rooms r LEFT JOIN Reservations res ON r.RoomId = res.Room GROUP BY r.roomName;
SELECT r.roomName, COUNT(res.Code) AS reservationCount FROM Rooms r LEFT JOIN Reservations res ON r.RoomId = res.Room GROUP BY r.roomName;
SELECT r.roomName FROM Rooms r JOIN Reservations res ON r.RoomId = res.Room GROUP BY r.roomName HAVING COUNT(res.Code) > 60;
SELECT r.roomName FROM Rooms r JOIN Reservations res ON r.RoomId = res.Room GROUP BY r.roomName HAVING COUNT(res.Code) > 60;
SELECT roomName  FROM Rooms  WHERE basePrice BETWEEN 120 AND 150;
SELECT roomName FROM Rooms WHERE basePrice BETWEEN 120 AND 150;
SELECT DISTINCT r.roomName  FROM Rooms r  JOIN Reservations res ON r.RoomId = res.Room  WHERE res.FirstName LIKE '%ROY%';
SELECT r.roomName  FROM Rooms r  JOIN Reservations res ON r.RoomId = res.Room  WHERE res.FirstName LIKE '%ROY%';
SELECT cmi.cmi_details FROM Customer_Master_Index cmi JOIN CMI_Cross_References cmi_ref ON cmi.master_customer_id = cmi_ref.master_customer_id WHERE cmi_ref.source_system_code = 'Tax';
SELECT DISTINCT ccm.cmi_cross_ref_id, ccm.source_system_code FROM CMI_Cross_References ccm JOIN Council_Tax ct ON ccm.cmi_cross_ref_id = ct.cmi_cross_ref_id;
SELECT      ccm.cmi_cross_ref_id,      ccm.master_customer_id,      COUNT(br.business_rates_id) AS n FROM      CMI_Cross_References ccm LEFT JOIN      Business_Rates br ON ccm.cmi_cross_ref_id = br.cmi_cross_ref_id GROUP BY      ccm.cmi_cross_ref_id,      ccm.master_customer_id;
SELECT b.council_tax_id, c.source_system_code FROM Benefits_Overpayments b JOIN CMI_Cross_References c ON b.cmi_cross_ref_id = c.cmi_cross_ref_id ORDER BY b.council_tax_id;
SELECT p.council_tax_id, c.master_customer_id, c.source_system_code FROM Parking_Fines p JOIN Council_Tax ct ON p.council_tax_id = ct.council_tax_id JOIN CMI_Cross_References ccr ON ct.cmi_cross_ref_id = ccr.cmi_cross_ref_id JOIN Customer_Master_Index c ON ccr.master_customer_id = c.master_customer_id;
SELECT Rent_Arrears.council_tax_id FROM Rent_Arrears JOIN CMI_Cross_References ON Rent_Arrears.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id JOIN Customer_Master_Index ON CMI_Cross_References.master_customer_id = Customer_Master_Index.master_customer_id WHERE Customer_Master_Index.cmi_details <> 'Schmidt, Kertzmann and Lubowitz';
SELECT er.electoral_register_id FROM Electoral_Register er JOIN CMI_Cross_References cmi ON er.cmi_cross_ref_id = cmi.cmi_cross_ref_id WHERE cmi.source_system_code IN ('Electoral', 'Tax');
SELECT COUNT(DISTINCT source_system_code) AS different_source_system_codes FROM CMI_Cross_References;
SELECT * FROM Customer_Master_Index ORDER BY cmi_details DESC;
SELECT pf.council_tax_id, pf.cmi_cross_ref_id FROM Parking_Fines pf JOIN Council_Tax ct ON pf.council_tax_id = ct.council_tax_id;
SELECT COUNT(DISTINCT Council_Tax.council_tax_id) AS total_council_taxes FROM Council_Tax JOIN Rent_Arrears ON Council_Tax.cmi_cross_ref_id = Rent_Arrears.cmi_cross_ref_id;
SELECT DISTINCT c.source_system_code FROM Customer_Master_Index AS cmi JOIN CMI_Cross_References AS c ON c.master_customer_id = cmi.master_customer_id WHERE cmi.cmi_details = 'Gottlieb, Becker and Wyman';
SELECT cmi_cross_ref_id  FROM CMI_Cross_References  WHERE cmi_cross_ref_id NOT IN (SELECT cmi_cross_ref_id FROM Parking_Fines);
SELECT DISTINCT source_system_code  FROM CMI_Cross_References  WHERE source_system_code LIKE '%en%';
SELECT COUNT(*) AS Number_of_Parties FROM party;
SELECT COUNT(*) AS Number_of_Parties FROM party;
SELECT Party_Theme  FROM party  ORDER BY Number_of_hosts ASC;
SELECT Party_Theme  FROM party  ORDER BY Number_of_hosts ASC;
SELECT Party_Theme, Location FROM party;
SELECT Party_Theme, Location FROM party;
SELECT First_year, Last_year  FROM party  WHERE Party_Theme IN ('Spring', 'Teqnology');
SELECT First_year, Last_year  FROM party  WHERE Party_Theme IN ('Spring', 'Teqnology');
SELECT AVG(Number_of_hosts) AS Average_Number_of_Hosts FROM party;
SELECT AVG(Number_of_hosts) AS Average_Number_of_Hosts FROM party;
SELECT p.Location FROM party p JOIN party_host ph ON p.Party_ID = ph.Party_ID GROUP BY p.Party_ID, p.Location ORDER BY COUNT(ph.Host_ID) DESC LIMIT 1;
SELECT p.Location FROM party p JOIN party_host ph ON p.Party_ID = ph.Party_ID GROUP BY p.Party_ID, p.Location ORDER BY COUNT(ph.Host_ID) DESC LIMIT 1;
SELECT Nationality, COUNT(Host_ID) AS Number_of_Hosts FROM host GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Host_Count FROM host GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Count FROM host GROUP BY Nationality ORDER BY Count DESC LIMIT 1;
SELECT Nationality, COUNT(*) AS Number_of_Hosts FROM host GROUP BY Nationality ORDER BY Number_of_Hosts DESC LIMIT 1;
SELECT DISTINCT h.Nationality FROM host h WHERE h.Age > 45 AND h.Nationality IN (     SELECT h2.Nationality     FROM host h2     WHERE h2.Age < 35 );
SELECT DISTINCT h1.Nationality FROM host h1 JOIN party_host ph1 ON h1.Host_ID = ph1.Host_ID JOIN party_host ph2 ON ph1.Party_ID = ph2.Party_ID JOIN host h2 ON ph2.Host_ID = h2.Host_ID WHERE h1.Age > 45 AND h2.Age < 35;
SELECT p.Party_Theme, h.Name FROM party p JOIN party_host ph ON p.Party_ID = ph.Party_ID JOIN host h ON ph.Host_ID = h.Host_ID;
SELECT p.Party_Theme, h.Name FROM party p JOIN party_host ph ON p.Party_ID = ph.Party_ID JOIN host h ON ph.Host_ID = h.Host_ID;
SELECT p.Location, h.Name FROM party p JOIN party_host ph ON p.Party_ID = ph.Party_ID JOIN host h ON ph.Host_ID = h.Host_ID ORDER BY h.Age ASC;
SELECT p.Location, h.Name FROM party p JOIN party_host ph ON p.Party_ID = ph.Party_ID JOIN host h ON ph.Host_ID = h.Host_ID ORDER BY h.Age ASC;
SELECT DISTINCT p.Location FROM party p JOIN party_host ph ON p.Party_ID = ph.Party_ID JOIN host h ON ph.Host_ID = h.Host_ID WHERE h.Age > 50;
SELECT DISTINCT p.Location FROM party p JOIN party_host ph ON p.Party_ID = ph.Party_ID JOIN host h ON ph.Host_ID = h.Host_ID WHERE h.Age > 50;
SELECT h.Name FROM host h JOIN party_host ph ON h.Host_ID = ph.Host_ID JOIN party p ON ph.Party_ID = p.Party_ID WHERE p.Number_of_hosts > 20;
SELECT h.Name FROM party p JOIN party_host ph ON p.Party_ID = ph.Party_ID JOIN host h ON ph.Host_ID = h.Host_ID WHERE p.Number_of_hosts > 20;
SELECT Name, Nationality  FROM host  ORDER BY Age DESC  LIMIT 1;
SELECT Name, Nationality  FROM host  WHERE Age = (SELECT MAX(Age) FROM host);
SELECT Name  FROM host  WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host);
SELECT Name  FROM host  WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host);
SELECT COUNT(*) FROM region;
SELECT COUNT(*) FROM region;
SELECT Region_code, Region_name FROM region ORDER BY Region_code;
SELECT Region_code, Region_name FROM region ORDER BY Region_code;
SELECT Region_name FROM region ORDER BY Region_name;
SELECT Region_name FROM region ORDER BY Region_name;
SELECT Region_name FROM region WHERE Region_name <> 'Denmark';
SELECT Region_name  FROM region  WHERE Region_name <> 'Denmark';
SELECT COUNT(*)  FROM storm  WHERE Number_Deaths > 0;
SELECT COUNT(*)  FROM storm  WHERE Number_Deaths > 0;
SELECT Name, Dates_active, Number_Deaths  FROM storm  WHERE Number_Deaths >= 1;
SELECT Name, Dates_active, Number_Deaths  FROM storm  WHERE Number_Deaths >= 1;
SELECT AVG(Damage_millions_USD) AS Average_Damage, MAX(Damage_millions_USD) AS Maximum_Damage FROM storm WHERE Max_speed > 1000;
SELECT AVG(Damage_millions_USD) AS Average_Damage, MAX(Damage_millions_USD) AS Maximum_Damage FROM storm WHERE Max_speed > 1000;
SELECT SUM(Number_Deaths) AS Total_Deaths, SUM(Damage_millions_USD) AS Total_Damage FROM storm WHERE Max_speed > (SELECT AVG(Max_speed) FROM storm);
SELECT SUM(Number_Deaths) AS Total_Deaths, SUM(Damage_millions_USD) AS Total_Damage FROM storm WHERE Max_speed > (SELECT AVG(Max_speed) FROM storm);
SELECT Name, Damage_millions_USD  FROM storm  ORDER BY Max_speed DESC;
SELECT Name, Damage_millions_USD  FROM storm  ORDER BY Max_speed DESC;
SELECT COUNT(DISTINCT Region_id) AS Affected_Regions FROM affected_region;
SELECT COUNT(DISTINCT Region_id) AS Number_of_Affected_Regions FROM affected_region;
SELECT r.Region_name  FROM region r  LEFT JOIN affected_region ar ON r.Region_id = ar.Region_id  WHERE ar.Storm_ID IS NULL;
SELECT r.Region_name FROM region r LEFT JOIN affected_region ar ON r.Region_id = ar.Region_id WHERE ar.Storm_ID IS NULL;
SELECT r.Region_name, COUNT(ar.Storm_ID) AS Number_of_Storms FROM region r LEFT JOIN affected_region ar ON r.Region_id = ar.Region_id GROUP BY r.Region_name;
SELECT r.Region_name, COUNT(ar.Storm_ID) AS Storm_Count FROM region r LEFT JOIN affected_region ar ON r.Region_id = ar.Region_id GROUP BY r.Region_name;
SELECT s.Name, COUNT(ar.Region_id) AS Number_of_Affected_Regions FROM storm s LEFT JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID GROUP BY s.Storm_ID, s.Name;
SELECT s.Storm_ID, COUNT(ar.Region_id) AS Affected_Regions FROM storm s JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID GROUP BY s.Storm_ID;
SELECT s.Name, s.Max_speed FROM storm s JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID GROUP BY s.Storm_ID, s.Name, s.Max_speed ORDER BY COUNT(ar.Region_id) DESC LIMIT 1;
SELECT s.Name, s.Max_speed FROM storm s JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID GROUP BY s.Storm_ID ORDER BY COUNT(ar.Region_id) DESC LIMIT 1;
SELECT Name  FROM storm  WHERE Storm_ID NOT IN (SELECT Storm_ID FROM affected_region);
SELECT Name  FROM storm  WHERE Storm_ID NOT IN (SELECT Storm_ID FROM affected_region);
SELECT s.Name FROM storm s JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID GROUP BY s.Storm_ID, s.Name HAVING COUNT(DISTINCT ar.Region_id) >= 2 AND SUM(ar.Number_city_affected) >= 10;
SELECT s.Name FROM storm s JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID GROUP BY s.Storm_ID, s.Name HAVING COUNT(DISTINCT ar.Region_id) >= 2 AND SUM(ar.Number_city_affected) >= 10;
SELECT Name  FROM storm  WHERE Storm_ID NOT IN (     SELECT Storm_ID      FROM affected_region      GROUP BY Storm_ID      HAVING COUNT(Region_id) >= 2 );
SELECT s.Name FROM storm s LEFT JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID GROUP BY s.Storm_ID, s.Name HAVING COUNT(ar.Region_id) < 2;
SELECT r.Region_name FROM affected_region ar JOIN storm s ON ar.Storm_ID = s.Storm_ID JOIN region r ON ar.Region_id = r.Region_id WHERE s.Number_Deaths >= 10;
SELECT DISTINCT r.Region_name FROM affected_region ar JOIN storm s ON ar.Storm_ID = s.Storm_ID JOIN region r ON ar.Region_id = r.Region_id WHERE s.Number_Deaths >= 10;
SELECT s.Name  FROM storm s JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID JOIN region r ON ar.Region_id = r.Region_id WHERE r.Region_name = 'Denmark';
SELECT s.Name FROM storm s JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID JOIN region r ON ar.Region_id = r.Region_id WHERE r.Region_name = 'Denmark';
SELECT r.Region_name FROM region r JOIN affected_region ar ON r.Region_id = ar.Region_id GROUP BY r.Region_name HAVING COUNT(ar.Storm_ID) >= 2;
SELECT r.Region_name FROM affected_region ar JOIN region r ON ar.Region_id = r.Region_id GROUP BY r.Region_name HAVING COUNT(ar.Storm_ID) >= 2;
SELECT r.Region_name FROM affected_region ar JOIN storm s ON ar.Storm_ID = s.Storm_ID JOIN region r ON ar.Region_id = r.Region_id WHERE s.Number_Deaths = (SELECT MAX(Number_Deaths) FROM storm);
SELECT r.Region_name FROM affected_region ar JOIN storm s ON ar.Storm_ID = s.Storm_ID JOIN region r ON ar.Region_id = r.Region_id WHERE s.Number_Deaths = (SELECT MAX(Number_Deaths) FROM storm);
SELECT s.Name FROM storm s JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID JOIN region r ON ar.Region_id = r.Region_id WHERE r.Region_name IN ('Afghanistan', 'Albania') GROUP BY s.Storm_ID HAVING COUNT(DISTINCT r.Region_name) = 2;
SELECT s.Name FROM storm s JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID JOIN region r ON ar.Region_id = r.Region_id WHERE r.Region_name IN ('Afghanistan', 'Albania') GROUP BY s.Storm_ID HAVING COUNT(DISTINCT r.Region_name) = 2;
SELECT COUNT(*) AS Total_Counties FROM county;
SELECT COUNT(*) AS Total_Counties FROM county;
SELECT County_name, Population FROM county;
SELECT County_name, Population FROM county;
SELECT AVG(Population) AS Average_Population FROM county;
SELECT AVG(Population) AS Average_Population FROM county;
SELECT MAX(Population) AS Max_Population, MIN(Population) AS Min_Population FROM county;
SELECT MAX(Population) AS Max_Population, MIN(Population) AS Min_Population FROM county;
SELECT DISTINCT District FROM election;
SELECT DISTINCT District FROM election;
SELECT Zip_code FROM county WHERE County_name = 'Howard';
SELECT Zip_code FROM county WHERE County_name = 'Howard';
SELECT Delegate FROM election WHERE District = 1;
SELECT Delegate FROM election WHERE District = 1;
SELECT Delegate, Committee FROM election;
SELECT Delegate, Committee FROM election;
SELECT COUNT(DISTINCT Governor) AS Distinct_Governors FROM party;
SELECT COUNT(DISTINCT Governor) AS Distinct_Governors FROM party;
SELECT Lieutenant_Governor, Comptroller  FROM party  WHERE Party = 'Democratic';
SELECT Lieutenant_Governor, Comptroller  FROM party  WHERE Party = 'Democratic';
SELECT DISTINCT Year  FROM party  WHERE Governor = 'Eliot Spitzer';
SELECT DISTINCT Year  FROM party  WHERE Governor = 'Eliot Spitzer';
SELECT * FROM election;
SELECT * FROM election;
SELECT e.Delegate, c.County_name FROM election e JOIN county c ON e.Counties_Represented = c.County_Id;
SELECT e.Delegate, c.County_name FROM election e JOIN county c ON e.Counties_Represented = c.County_Id;
SELECT e.Delegate  FROM election e  JOIN county c ON e.Counties_Represented = c.County_Id  WHERE c.Population < 100000;
SELECT e.Delegate  FROM election e  JOIN county c ON e.Counties_Represented = c.County_Id  WHERE c.Population < 100000;
SELECT COUNT(DISTINCT Delegate)  FROM election  WHERE Counties_Represented IN (SELECT County_Id FROM county WHERE Population > 50000);
SELECT COUNT(DISTINCT e.Delegate)  FROM election e  JOIN county c ON e.Counties_Represented = c.County_Id  WHERE c.Population > 50000;
SELECT c.County_name FROM county c JOIN election e ON c.County_Id = e.Counties_Represented WHERE e.Committee = 'Appropriations';
SELECT DISTINCT c.County_name FROM county c JOIN election e ON c.County_Id = e.Counties_Represented WHERE e.Committee = 'Appropriations';
SELECT e.Delegate, p.Party FROM election e JOIN party p ON e.Party = p.Party_ID;
SELECT e.Delegate, p.Party FROM election e JOIN party p ON e.Party = p.Party_ID;
SELECT DISTINCT p.Governor FROM party p JOIN election e ON p.Party = e.Party WHERE e.District = 1;
SELECT p.Party, p.Governor FROM election e JOIN party p ON e.Party = p.Party WHERE e.District = 1;
SELECT DISTINCT p.Comptroller FROM party p JOIN election e ON p.Party = e.Party WHERE e.District IN ('1', '2');
SELECT p.Party, p.Comptroller FROM party p JOIN election e ON p.Party = e.Party WHERE e.District IN (1, 2);
SELECT DISTINCT Committee  FROM election  WHERE Party = 'Democratic';
SELECT DISTINCT Committee  FROM election  WHERE Party = 'Democratic';
SELECT c.County_name, COUNT(e.Delegate) AS Number_of_Delegates FROM county c LEFT JOIN election e ON c.County_Id = e.Counties_Represented GROUP BY c.County_name;
SELECT c.County_name, COUNT(e.Delegate) AS Number_of_Delegates FROM county c LEFT JOIN election e ON c.County_Id = e.Counties_Represented GROUP BY c.County_name;
SELECT Party, COUNT(Delegate) AS Number_of_Delegates FROM election GROUP BY Party;
SELECT Party, COUNT(Delegate) AS Number_of_Delegates FROM party JOIN election ON party.Party_ID = election.Party GROUP BY Party;
SELECT County_name FROM county ORDER BY Population ASC;
SELECT County_name FROM county ORDER BY Population ASC;
SELECT County_name FROM county ORDER BY County_name DESC;
SELECT County_name FROM county ORDER BY County_name DESC;
SELECT County_name  FROM county  ORDER BY Population DESC  LIMIT 1;
SELECT County_name  FROM county  ORDER BY Population DESC  LIMIT 1;
SELECT County_name, Population  FROM county  ORDER BY Population ASC  LIMIT 3;
SELECT County_name  FROM county  ORDER BY Population ASC  LIMIT 3;
SELECT County_name FROM county WHERE County_Id IN (     SELECT Counties_Represented     FROM election     GROUP BY Counties_Represented     HAVING COUNT(Delegate) >= 2 );
SELECT c.County_name FROM county c JOIN election e ON c.County_Id = e.Counties_Represented GROUP BY c.County_name HAVING COUNT(e.Delegate) >= 2;
SELECT Party FROM party GROUP BY Party HAVING COUNT(*) >= 2;
SELECT Party, COUNT(*) as Record_Count FROM party GROUP BY Party HAVING COUNT(*) >= 2;
SELECT Party, COUNT(Delegate) AS Delegate_Count FROM election GROUP BY Party ORDER BY Delegate_Count DESC LIMIT 1;
SELECT Party, COUNT(Delegate) AS NumberOfDelegates FROM election GROUP BY Party ORDER BY NumberOfDelegates DESC LIMIT 1;
SELECT Governor, COUNT(Governor) AS Times_Elected FROM party GROUP BY Governor ORDER BY Times_Elected DESC LIMIT 1;
SELECT Governor, COUNT(Governor) AS Frequency FROM party GROUP BY Governor ORDER BY Frequency DESC;
SELECT Comptroller, COUNT(Comptroller) AS Times_Elected FROM party GROUP BY Comptroller ORDER BY Times_Elected DESC LIMIT 1;
SELECT Comptroller, COUNT(Comptroller) AS Frequency FROM party GROUP BY Comptroller ORDER BY Frequency DESC
SELECT DISTINCT p.Party FROM party p LEFT JOIN election e ON p.Party = e.Party WHERE e.Delegate IS NULL;
SELECT DISTINCT p.Party FROM party p LEFT JOIN election e ON p.Party = e.Party WHERE e.Delegate IS NULL;
SELECT DISTINCT p.Party FROM party p JOIN election e ON p.Year = e.First_Elected WHERE e.Committee = 'Appropriations' AND e.Delegate IS NOT NULL;
SELECT DISTINCT p.Party FROM party p JOIN election e ON p.Party = e.Party WHERE e.Committee IN ('Appropriations', 'Economic Matters') GROUP BY p.Party HAVING COUNT(DISTINCT e.Committee) = 2;
SELECT DISTINCT e.Committee FROM election e JOIN party p ON e.Party = p.Party WHERE p.Party IN ('Democratic', 'Liberal') GROUP BY e.Committee HAVING COUNT(DISTINCT p.Party) = 2;
SELECT DISTINCT Committee FROM election WHERE Party IN ('Democratic', 'Liberal') GROUP BY Committee HAVING COUNT(DISTINCT Party) = 2;
SELECT COUNT(*) FROM journalist;
SELECT Name FROM journalist ORDER BY Years_working ASC;
SELECT Nationality, Age FROM journalist;
SELECT Name FROM journalist WHERE Nationality IN ('England', 'Wales');
SELECT AVG(Years_working) AS Average_Years_Working FROM journalist;
SELECT Nationality  FROM journalist  WHERE Years_working = (SELECT MAX(Years_working) FROM journalist);
SELECT Nationality, COUNT(journalist_ID) AS Number_of_Journalists FROM journalist GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Count FROM journalist GROUP BY Nationality ORDER BY Count DESC LIMIT 1;
SELECT Nationality FROM journalist WHERE Years_working > 10 GROUP BY Nationality HAVING COUNT(*) > 0 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3 GROUP BY Nationality HAVING COUNT(*) > 0;
SELECT Date, Venue, Name  FROM event  ORDER BY Event_Attendance DESC;
SELECT j.Name, e.Date FROM journalist j JOIN news_report nr ON j.journalist_ID = nr.journalist_ID JOIN event e ON nr.Event_ID = e.Event_ID;
SELECT j.Name AS Journalist_Name, e.Name AS Event_Name FROM journalist j JOIN news_report nr ON j.journalist_ID = nr.journalist_ID JOIN event e ON nr.Event_ID = e.Event_ID ORDER BY j.Name ASC, e.Name ASC;
SELECT j.Name, COUNT(nr.Event_ID) AS Number_of_Events FROM journalist j LEFT JOIN news_report nr ON j.journalist_ID = nr.journalist_ID GROUP BY j.Name;
SELECT j.Name FROM journalist j JOIN news_report nr ON j.journalist_ID = nr.journalist_ID GROUP BY j.journalist_ID, j.Name HAVING COUNT(nr.Event_ID) > 1;
SELECT j.Name FROM journalist j LEFT JOIN news_report nr ON j.journalist_ID = nr.journalist_ID WHERE nr.journalist_ID IS NULL;
SELECT AVG(Event_Attendance) AS Average_Attendance, MAX(Event_Attendance) AS Maximum_Attendance FROM event;
SELECT      AVG(j.Age) AS Average_Age,      AVG(j.Years_working) AS Average_Experience  FROM      journalist j  JOIN      news_report nr ON j.journalist_ID = nr.journalist_ID  GROUP BY      nr.Work_Type;
SELECT Venue, Name FROM event ORDER BY Event_Attendance DESC LIMIT 2;
SELECT * FROM Restaurant;
SELECT Address FROM Restaurant WHERE ResName = 'Subway';
SELECT Rating FROM Restaurant WHERE ResName = 'Subway';
SELECT * FROM Restaurant_Type;
SELECT ResTypeDescription  FROM Restaurant_Type  WHERE ResTypeName = 'Sandwich';
SELECT ResName, Rating  FROM Restaurant  WHERE Rating = (SELECT MAX(Rating) FROM Restaurant);
SELECT Age FROM Student WHERE LName = 'Smith' AND Fname = 'Linda';
SELECT Sex FROM Student WHERE LName = 'Smith' AND Fname = 'Linda';
SELECT Fname, LName FROM Student WHERE Major = '600';
SELECT city_code FROM Student WHERE LName = 'Smith' AND Fname = 'Linda';
SELECT COUNT(*) FROM Student WHERE Advisor = 1121;
SELECT Advisor, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Advisor ORDER BY NumberOfStudents DESC LIMIT 1;
SELECT Major, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Major ORDER BY NumberOfStudents ASC LIMIT 1;
SELECT Major, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Major HAVING COUNT(*) BETWEEN 2 AND 30;
SELECT Fname, LName  FROM Student  WHERE Age > 18 AND Major = 600;
SELECT Fname, LName  FROM Student  WHERE Sex = 'F' AND Age > 18 AND Major <> 600;
SELECT COUNT(DISTINCT r.ResID) AS Sandwich_Restaurant_Count FROM Restaurant r JOIN Type_Of_Restaurant tor ON r.ResID = tor.ResID JOIN Restaurant_Type rt ON tor.ResTypeID = rt.ResTypeID WHERE rt.ResTypeName = 'Sandwich';
SELECT SUM(Spent) AS Total_Spent FROM Visits_Restaurant JOIN Student ON Visits_Restaurant.StuID = Student.StuID WHERE Student.LName = 'Smith' AND Student.Fname = 'Linda';
SELECT COUNT(*)  FROM Visits_Restaurant vr JOIN Student s ON vr.StuID = s.StuID JOIN Restaurant r ON vr.ResID = r.ResID WHERE s.LName = 'Smith' AND s.Fname = 'Linda' AND r.ResName = 'Subway';
SELECT vr.Time  FROM Student s  JOIN Visits_Restaurant vr ON s.StuID = vr.StuID  JOIN Restaurant r ON vr.ResID = r.ResID  WHERE s.LName = 'Smith' AND s.Fname = 'Linda' AND r.ResName = 'Subway';
SELECT R.ResName, SUM(V.Time) AS TotalTime FROM Visits_Restaurant V JOIN Restaurant R ON V.ResID = R.ResID GROUP BY R.ResName ORDER BY TotalTime ASC LIMIT 1;
SELECT S.Fname, S.LName FROM Student S JOIN Visits_Restaurant V ON S.StuID = V.StuID GROUP BY S.StuID, S.Fname, S.LName ORDER BY COUNT(V.ResID) DESC LIMIT 1;
SELECT actual_order_id  FROM Actual_Orders  WHERE order_status_code = 'Success';
SELECT p.product_name, p.product_price FROM Products p JOIN Actual_Order_Products aop ON p.product_id = aop.product_id GROUP BY p.product_id ORDER BY COUNT(aop.actual_order_id) DESC LIMIT 1;
SELECT COUNT(*) AS total_customers FROM Customers;
SELECT COUNT(DISTINCT payment_method) AS different_payment_methods FROM Customers;
SELECT * FROM Trucks ORDER BY truck_licence_number;
SELECT product_name  FROM Products  ORDER BY product_price DESC  LIMIT 1;
SELECT DISTINCT c.customer_name FROM Customers c JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id JOIN Addresses a ON ca.address_id = a.address_id WHERE a.state_province_county <> 'California';
SELECT customer_name, customer_email  FROM Customers  WHERE payment_method = 'Visa';
SELECT c.customer_name, c.customer_phone FROM Customers c JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id JOIN Addresses a ON ca.address_id = a.address_id WHERE a.state_province_county = 'California';
SELECT DISTINCT state_province_county  FROM Addresses  WHERE state_province_county NOT IN (     SELECT DISTINCT A.state_province_county      FROM Employees E      JOIN Addresses A ON E.employee_address_id = A.address_id );
SELECT customer_name, customer_phone, customer_email  FROM Customers  ORDER BY date_became_customer;
SELECT customer_name FROM Customers ORDER BY customer_id LIMIT 5;
SELECT payment_method, COUNT(*) AS frequency FROM Customers GROUP BY payment_method ORDER BY frequency DESC LIMIT 1;
SELECT route_name FROM Delivery_Routes ORDER BY route_name;
SELECT dr.route_name FROM Delivery_Routes dr JOIN Delivery_Route_Locations drl ON dr.route_id = drl.route_id JOIN Order_Deliveries od ON drl.location_code = od.location_code GROUP BY dr.route_name ORDER BY COUNT(od.actual_order_id) DESC LIMIT 1;
SELECT a.state_province_county AS state_name, COUNT(c.customer_id) AS customer_count FROM Customers c JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id JOIN Addresses a ON ca.address_id = a.address_id GROUP BY a.state_province_county;
SELECT COUNT(*) FROM Authors;
SELECT COUNT(*) AS author_count FROM Authors;
SELECT COUNT(*) FROM Inst;
SELECT COUNT(*) FROM Inst;
SELECT COUNT(*) AS total_papers FROM Papers;
SELECT COUNT(*) AS total_papers FROM Papers;
SELECT p.title  FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Authors au ON a.authID = au.authID WHERE au.fname = 'Jeremy' AND au.lname = 'Gibbons';
SELECT p.title  FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Authors au ON a.authID = au.authID WHERE au.fname = 'Jeremy' AND au.lname = 'Gibbons';
SELECT p.title  FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Authors au ON a.authID = au.authID WHERE au.fname = 'Aaron' AND au.lname = 'Turon';
SELECT p.title  FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Authors au ON a.authID = au.authID WHERE au.fname = 'Aaron' AND au.lname = 'Turon';
SELECT COUNT(*)  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Authors au ON a.authID = au.authID  WHERE au.fname = 'Atsushi' AND au.lname = 'Ohori';
SELECT COUNT(*)  FROM Authorship a  JOIN Authors au ON a.authID = au.authID  WHERE au.fname = 'Atsushi' AND au.lname = 'Ohori';
SELECT i.name  FROM Inst i  JOIN Authorship a ON i.instID = a.instID  JOIN Authors au ON a.authID = au.authID  WHERE au.fname = 'Matthias' AND au.lname = 'Blume';
SELECT i.name  FROM Inst i JOIN Authorship a ON i.instID = a.instID JOIN Authors au ON a.authID = au.authID WHERE au.lname = 'Blume' AND au.fname = 'Matthias';
SELECT i.name  FROM Inst i  JOIN Authorship a ON i.instID = a.instID  JOIN Authors au ON a.authID = au.authID  WHERE au.fname = 'Katsuhiro' AND au.lname = 'Ueno';
SELECT i.name  FROM Inst i JOIN Authorship a ON i.instID = a.instID JOIN Authors au ON a.authID = au.authID WHERE au.fname = 'Katsuhiro' AND au.lname = 'Ueno';
SELECT a.fname, a.lname FROM Authors a JOIN Authorship au ON a.authID = au.authID JOIN Inst i ON au.instID = i.instID WHERE i.name = 'University of Oxford';
SELECT a.fname, a.lname FROM Authors a JOIN Authorship au ON a.authID = au.authID JOIN Inst i ON au.instID = i.instID WHERE i.name = 'University of Oxford';
SELECT a.fname, a.lname FROM Authors a JOIN Authorship au ON a.authID = au.authID JOIN Inst i ON au.instID = i.instID WHERE i.name = 'Google';
SELECT a.fname, a.lname FROM Authors a JOIN Authorship au ON a.authID = au.authID JOIN Inst i ON au.instID = i.instID WHERE i.name = 'Google';
SELECT a.lname  FROM Authors a  JOIN Authorship au ON a.authID = au.authID  JOIN Papers p ON au.paperID = p.paperID  WHERE p.title = 'Binders Unbound';
SELECT a.lname  FROM Authors a  JOIN Authorship au ON a.authID = au.authID  JOIN Papers p ON au.paperID = p.paperID  WHERE p.title = 'Binders Unbound';
SELECT a.fname, a.lname FROM Authors a JOIN Authorship au ON a.authID = au.authID JOIN Papers p ON au.paperID = p.paperID WHERE p.title = 'Nameless, Painless';
SELECT a.fname, a.lname  FROM Authors a  JOIN Authorship au ON a.authID = au.authID  JOIN Papers p ON au.paperID = p.paperID  WHERE p.title = 'Nameless, Painless';
SELECT p.title  FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Inst i ON a.instID = i.instID WHERE i.name = 'Indiana University';
SELECT p.title  FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Inst i ON a.instID = i.instID WHERE i.name = 'Indiana University';
SELECT p.title  FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Inst i ON a.instID = i.instID WHERE i.name = 'Google';
SELECT p.title  FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Authors au ON a.authID = au.authID JOIN Inst i ON a.instID = i.instID WHERE i.name = 'Google';
SELECT COUNT(DISTINCT p.paperID)  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Inst i ON a.instID = i.instID  WHERE i.name = 'Tokohu University';
SELECT COUNT(DISTINCT p.paperID) AS number_of_papers FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Inst i ON a.instID = i.instID WHERE i.name = 'Tokohu University';
SELECT COUNT(DISTINCT p.paperID) AS num_papers FROM Inst i JOIN Authorship a ON i.instID = a.instID JOIN Papers p ON a.paperID = p.paperID WHERE i.name = 'University of Pennsylvania';
SELECT COUNT(DISTINCT p.paperID)  FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Inst i ON a.instID = i.instID WHERE i.name = 'University of Pennsylvania';
SELECT p.title  FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Authors au ON a.authID = au.authID WHERE CONCAT(au.fname, ' ', au.lname) = 'Olin Shivers';
SELECT p.title  FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Authors au ON a.authID = au.authID WHERE au.fname = 'Olin' AND au.lname = 'Shivers';
SELECT p.title  FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Authors au ON a.authID = au.authID WHERE au.fname = 'Stephanie' AND au.lname = 'Weirich';
SELECT p.title  FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Authors au ON a.authID = au.authID WHERE au.fname = 'Stephanie' AND au.lname = 'Weirich';
SELECT p.title  FROM Papers p JOIN Authorship a1 ON p.paperID = a1.paperID JOIN Authorship a2 ON p.paperID = a2.paperID JOIN Inst i ON a1.instID = i.instID WHERE i.country = 'USA' AND a2.authOrder = 2 AND a2.authID IN (SELECT authID FROM Authors WHERE lname = 'Turon');
SELECT p.title FROM Papers p JOIN Authorship a1 ON p.paperID = a1.paperID JOIN Authors au1 ON a1.authID = au1.authID JOIN Authorship a2 ON p.paperID = a2.paperID AND a2.authOrder = 2 JOIN Authors au2 ON a2.authID = au2.authID JOIN Inst i ON a2.instID = i.instID WHERE au2.lname = 'Turon' AND i.country = 'USA';
SELECT p.title FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Authors au ON a.authID = au.authID JOIN Inst i ON a.instID = i.instID WHERE a.authOrder = 1 AND i.country = 'Japan' AND au.lname = 'Ohori';
SELECT p.title FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Authors au ON a.authID = au.authID JOIN Inst i ON a.instID = i.instID WHERE a.authOrder = 1 AND i.country = 'Japan' AND au.lname = 'Ohori';
SELECT lname  FROM Authors  WHERE authID = (     SELECT authID      FROM Authorship      GROUP BY authID      ORDER BY COUNT(paperID) DESC      LIMIT 1 );
SELECT a.lname FROM Authors a JOIN Authorship au ON a.authID = au.authID GROUP BY a.authID, a.lname ORDER BY COUNT(au.paperID) DESC LIMIT 1;
SELECT i.country FROM Inst i JOIN Authorship a ON i.instID = a.instID JOIN Papers p ON a.paperID = p.paperID GROUP BY i.country ORDER BY COUNT(p.paperID) DESC LIMIT 1;
SELECT i.country FROM Inst i JOIN Authorship a ON i.instID = a.instID GROUP BY i.country ORDER BY COUNT(a.paperID) DESC LIMIT 1;
SELECT i.name FROM Inst i JOIN Authorship a ON i.instID = a.instID GROUP BY i.name ORDER BY COUNT(a.paperID) DESC LIMIT 1;
SELECT i.name FROM Inst i JOIN Authorship a ON i.instID = a.instID GROUP BY i.instID, i.name ORDER BY COUNT(a.paperID) DESC LIMIT 1;
SELECT title FROM Papers WHERE title LIKE '%ML%';
SELECT title FROM Papers WHERE title LIKE '%ML%';
SELECT title FROM Papers WHERE title LIKE '%Database%';
SELECT title FROM Papers WHERE title LIKE '%Database%';
SELECT DISTINCT a.fname FROM Authors a JOIN Authorship au ON a.authID = au.authID JOIN Papers p ON au.paperID = p.paperID WHERE p.title LIKE '%Functional%';
SELECT DISTINCT a.fname FROM Authors a JOIN Authorship au ON a.authID = au.authID JOIN Papers p ON au.paperID = p.paperID WHERE p.title LIKE '%Functional%';
SELECT DISTINCT a.lname FROM Authors a JOIN Authorship au ON a.authID = au.authID JOIN Papers p ON au.paperID = p.paperID WHERE p.title LIKE '%Monadic%';
SELECT DISTINCT a.lname FROM Authors a JOIN Authorship au ON a.authID = au.authID JOIN Papers p ON au.paperID = p.paperID WHERE p.title LIKE '%Monadic%';
SELECT title  FROM Papers  WHERE paperID = (     SELECT paperID      FROM Authorship      GROUP BY paperID      ORDER BY COUNT(authID) DESC      LIMIT 1 );
SELECT p.title FROM Papers p JOIN Authorship a ON p.paperID = a.paperID GROUP BY p.paperID, p.title ORDER BY COUNT(a.authID) DESC LIMIT 1;
SELECT fname FROM Authors WHERE lname = 'Ueno';
SELECT fname FROM Authors WHERE lname = 'Ueno';
SELECT lname FROM Authors WHERE fname = 'Amal';
SELECT lname FROM Authors WHERE fname = 'Amal';
SELECT DISTINCT fname FROM Authors ORDER BY fname;
SELECT fname FROM Authors ORDER BY fname ASC;
SELECT lname FROM Authors ORDER BY lname;
SELECT lname FROM Authors ORDER BY lname;
SELECT fname, lname FROM Authors ORDER BY lname;
SELECT fname, lname FROM Authors ORDER BY lname;
SELECT COUNT(DISTINCT last_name) AS different_last_names FROM actor;
SELECT COUNT(DISTINCT last_name) AS different_last_names FROM actor;
SELECT first_name, COUNT(*) AS name_count FROM actor GROUP BY first_name ORDER BY name_count DESC LIMIT 1;
SELECT first_name FROM actor GROUP BY first_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name, COUNT(fa.film_id) AS film_count FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY full_name ORDER BY film_count DESC LIMIT 1;
SELECT CONCAT(first_name, ' ', last_name) AS full_name, COUNT(*) AS name_count FROM actor GROUP BY full_name ORDER BY name_count DESC LIMIT 1;
SELECT district FROM address GROUP BY district HAVING COUNT(address_id) >= 2;
SELECT district FROM address GROUP BY district HAVING COUNT(address_id) >= 2;
SELECT phone, postal_code  FROM address  WHERE address = '1031 Daugavpils Parkway';
SELECT phone, postal_code  FROM address  WHERE address = '1031 Daugavpils Parkway';
SELECT c.city, COUNT(a.address_id) AS address_count, c.city_id FROM city c JOIN address a ON c.city_id = a.city_id GROUP BY c.city_id ORDER BY address_count DESC LIMIT 1;
SELECT c.city, c.city_id, COUNT(a.address_id) AS address_count FROM city c JOIN address a ON c.city_id = a.city_id GROUP BY c.city_id ORDER BY address_count DESC LIMIT 1;
SELECT COUNT(*) FROM address WHERE district = 'California';
SELECT COUNT(*)  FROM address  WHERE district = 'California';
SELECT f.film_id, f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN payment p ON r.rental_id = p.rental_id WHERE p.amount = 0.99 GROUP BY f.film_id, f.title HAVING COUNT(i.inventory_id) < 3;
SELECT f.film_id, f.title FROM film f JOIN inventory i ON f.film_id = i.film_id GROUP BY f.film_id, f.title HAVING f.rental_rate = 0.99 AND COUNT(i.inventory_id) < 3;
SELECT COUNT(*) FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'Australia');
SELECT COUNT(*) FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'Australia');
SELECT c.country FROM country c JOIN city ci ON c.country_id = ci.country_id GROUP BY c.country_id HAVING COUNT(ci.city_id) >= 3;
SELECT c.country FROM country c JOIN city ci ON c.country_id = ci.country_id GROUP BY c.country_id HAVING COUNT(ci.city_id) >= 3;
SELECT payment_date  FROM payment  WHERE amount > 10  AND staff_id IN (SELECT staff_id FROM staff WHERE first_name = 'Elsa');
SELECT payment_date  FROM payment  WHERE amount > 10 OR staff_id IN (SELECT staff_id FROM staff WHERE first_name = 'Elsa');
SELECT COUNT(*) FROM customer WHERE active = 1;
SELECT COUNT(*) AS active_customer_count FROM customer WHERE active = 1;
SELECT title, rental_rate  FROM film  ORDER BY rental_rate DESC  LIMIT 1;
SELECT title, rental_rate  FROM film  WHERE rental_rate = (SELECT MAX(rental_rate) FROM film);
SELECT f.title, f.film_id, f.description FROM film f JOIN film_actor fa ON f.film_id = fa.film_id GROUP BY f.film_id ORDER BY COUNT(fa.actor_id) DESC LIMIT 1;
SELECT f.title, f.film_id AS id, f.description FROM film f JOIN film_actor fa ON f.film_id = fa.film_id GROUP BY f.film_id ORDER BY COUNT(fa.actor_id) DESC LIMIT 1;
SELECT a.actor_id, a.first_name, a.last_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id, a.first_name, a.last_name ORDER BY COUNT(fa.film_id) DESC LIMIT 1;
SELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name, a.actor_id FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id ORDER BY COUNT(fa.film_id) DESC LIMIT 1;
SELECT a.first_name, a.last_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id HAVING COUNT(fa.film_id) > 30;
SELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id HAVING COUNT(fa.film_id) > 30;
SELECT store_id, COUNT(inventory_id) AS item_count FROM inventory GROUP BY store_id ORDER BY item_count DESC LIMIT 1;
SELECT store_id FROM inventory GROUP BY store_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT SUM(amount) AS total_payments FROM payment;
SELECT SUM(amount) AS total_payment FROM payment;
SELECT c.first_name, c.last_name, c.customer_id FROM customer c JOIN payment p ON c.customer_id = p.customer_id GROUP BY c.customer_id ORDER BY SUM(p.amount) ASC LIMIT 1;
SELECT c.customer_id, CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN payment p ON c.customer_id = p.customer_id GROUP BY c.customer_id ORDER BY SUM(p.amount) ASC LIMIT 1;
SELECT c.name AS genre_name FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE f.title = 'HUNGER ROOF';
SELECT c.name  FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'HUNGER ROOF';
SELECT c.name AS genre_name, c.category_id, COUNT(fc.film_id) AS film_count FROM category c LEFT JOIN film_category fc ON c.category_id = fc.category_id GROUP BY c.category_id, c.name;
SELECT c.category_id, c.name, COUNT(fc.film_id) AS film_count FROM category c LEFT JOIN film_category fc ON c.category_id = fc.category_id GROUP BY c.category_id, c.name;
SELECT f.film_id, f.title FROM film f JOIN inventory i ON f.film_id = i.film_id GROUP BY f.film_id, f.title ORDER BY COUNT(i.inventory_id) DESC LIMIT 1;
SELECT f.film_id, f.title FROM film f JOIN inventory i ON f.film_id = i.film_id GROUP BY f.film_id, f.title ORDER BY COUNT(i.inventory_id) DESC LIMIT 1;
SELECT f.title, i.inventory_id FROM inventory i JOIN rental r ON i.inventory_id = r.inventory_id JOIN film f ON i.film_id = f.film_id GROUP BY f.title, i.inventory_id ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT f.title, i.inventory_id FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.title, i.inventory_id ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT language_id) AS number_of_languages FROM film;
SELECT COUNT(DISTINCT name) AS language_count FROM language;
SELECT title  FROM film  WHERE rating = 'R';
SELECT title FROM film WHERE rating = 'R';
SELECT a.address, a.district, c.city, co.country  FROM store s  JOIN address a ON s.address_id = a.address_id  JOIN city c ON a.city_id = c.city_id  JOIN country co ON c.country_id = co.country_id  WHERE s.store_id = 1;
SELECT a.address, a.address2, a.district, a.postal_code, a.phone FROM store s JOIN address a ON s.address_id = a.address_id WHERE s.store_id = 1;
SELECT s.staff_id, CONCAT(s.first_name, ' ', s.last_name) AS full_name FROM staff s LEFT JOIN payment p ON s.staff_id = p.staff_id GROUP BY s.staff_id ORDER BY COUNT(p.payment_id) ASC LIMIT 1;
SELECT CONCAT(s.first_name, ' ', s.last_name) AS full_name, s.staff_id FROM staff s LEFT JOIN payment p ON s.staff_id = p.staff_id GROUP BY s.staff_id ORDER BY COUNT(p.payment_id) ASC LIMIT 1;
SELECT l.name  FROM film f  JOIN language l ON f.language_id = l.language_id  WHERE f.title = 'AIRPORT POLLOCK';
SELECT l.name  FROM film f  JOIN language l ON f.language_id = l.language_id  WHERE f.title = 'AIRPORT POLLOCK';
SELECT COUNT(*) FROM store;
SELECT COUNT(*) FROM store;
SELECT COUNT(DISTINCT rating) AS different_ratings FROM film;
SELECT COUNT(DISTINCT rating) AS different_ratings FROM film;
SELECT title  FROM film  WHERE special_features LIKE '%Deleted Scenes%';
SELECT title  FROM film  WHERE special_features LIKE '%Deleted Scenes%';
SELECT COUNT(*) AS inventory_count  FROM inventory  WHERE store_id = 1;
SELECT COUNT(*) AS items_in_stock FROM inventory WHERE store_id = 1;
SELECT MIN(payment_date) AS first_payment_date FROM payment;
SELECT MIN(payment_date) AS earliest_payment_date FROM payment;
SELECT a.address, c.email  FROM customer c  JOIN address a ON c.address_id = a.address_id  WHERE c.first_name = 'Linda';
SELECT a.address, c.email FROM customer c JOIN address a ON c.address_id = a.address_id WHERE c.first_name = 'Linda';
SELECT title  FROM film  WHERE (length > 100 OR rating = 'PG')  AND replacement_cost <= 200;
SELECT title  FROM film  WHERE (length > 100 OR rating = 'PG')  AND replacement_cost <= 200;
SELECT c.first_name, c.last_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id ORDER BY r.rental_date ASC LIMIT 1;
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id ORDER BY r.rental_date ASC LIMIT 1;
SELECT CONCAT(s.first_name, ' ', s.last_name) AS full_name FROM staff s JOIN rental r ON s.staff_id = r.staff_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'April' AND c.last_name = 'Burns';
SELECT CONCAT(s.first_name, ' ', s.last_name) AS full_name FROM staff s JOIN rental r ON s.staff_id = r.staff_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'April' AND c.last_name = 'Burns';
SELECT store_id, COUNT(customer_id) AS customer_count FROM customer GROUP BY store_id ORDER BY customer_count DESC LIMIT 1;
SELECT store_id FROM customer GROUP BY store_id ORDER BY COUNT(customer_id) DESC LIMIT 1;
SELECT MAX(amount) AS largest_payment_amount FROM payment;
SELECT MAX(amount) AS largest_payment FROM payment;
SELECT a.address, a.address2, a.district, c.city, co.country  FROM staff s JOIN address a ON s.address_id = a.address_id JOIN city c ON a.city_id = c.city_id JOIN country co ON c.country_id = co.country_id WHERE s.first_name = 'Elsa';
SELECT a.address, a.address2, a.district, a.postal_code, a.phone FROM staff s JOIN address a ON s.address_id = a.address_id WHERE s.first_name = 'Elsa';
SELECT DISTINCT c.first_name FROM customer c LEFT JOIN rental r ON c.customer_id = r.customer_id AND r.rental_date > '2005-08-23 02:06:01' WHERE r.rental_id IS NULL;
SELECT DISTINCT c.first_name FROM customer c LEFT JOIN rental r ON c.customer_id = r.customer_id AND r.rental_date > '2005-08-23 02:06:01' WHERE r.rental_id IS NULL;
SELECT COUNT(*) FROM bank;
SELECT COUNT(*) FROM bank;
SELECT COUNT(*) AS total_customers FROM customer;
SELECT SUM(no_of_customers) AS total_customers FROM bank;
SELECT SUM(no_of_customers) AS total_customers FROM bank WHERE city = 'New York City';
SELECT COUNT(DISTINCT c.cust_ID) AS total_customers FROM customer c JOIN bank b ON c.branch_ID = b.branch_ID WHERE b.city = 'New York City';
SELECT AVG(no_of_customers) AS average_customers FROM bank WHERE state = 'Utah';
SELECT AVG(no_of_customers) AS average_customers FROM bank WHERE state = 'Utah';
SELECT AVG(no_of_customers) AS average_customers FROM bank;
SELECT AVG(no_of_customers) AS average_customers FROM bank;
SELECT city, state FROM bank WHERE bname = 'morningside';
SELECT city, state FROM bank WHERE bname = 'morningside';
SELECT bname FROM bank WHERE state = 'New York';
SELECT bname FROM bank WHERE state = 'New York';
SELECT cust_name FROM customer ORDER BY acc_bal ASC;
SELECT cust_name FROM customer ORDER BY acc_bal;
SELECT c.cust_name, SUM(l.amount) AS total_loan_amount FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID GROUP BY c.cust_name ORDER BY total_loan_amount DESC;
SELECT c.cust_name, SUM(l.amount) AS total_amount FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID GROUP BY c.cust_name ORDER BY total_amount DESC;
SELECT state, acc_type, credit_score  FROM customer  WHERE no_of_loans = 0;
SELECT DISTINCT c.state, c.acc_type, c.credit_score FROM customer c WHERE c.no_of_loans = 0;
SELECT COUNT(DISTINCT city) AS number_of_cities FROM bank;
SELECT COUNT(DISTINCT city) AS number_of_cities FROM bank;
SELECT COUNT(DISTINCT state) AS number_of_states FROM bank;
SELECT COUNT(DISTINCT state) AS number_of_states FROM bank;
SELECT COUNT(DISTINCT acc_type) AS distinct_account_types FROM customer;
SELECT COUNT(DISTINCT acc_type) AS different_account_types FROM customer;
SELECT cust_name, acc_bal  FROM customer  WHERE cust_name LIKE '%a%';
SELECT cust_name, acc_bal  FROM customer  WHERE cust_name LIKE '%a%';
SELECT cust_ID, SUM(acc_bal) AS total_account_balance FROM customer WHERE state IN ('Utah', 'Texas') GROUP BY cust_ID;
SELECT cust_name, SUM(acc_bal) AS total_account_balance FROM customer WHERE state IN ('Utah', 'Texas') GROUP BY cust_name;
SELECT c1.cust_name FROM customer c1 JOIN customer c2 ON c1.cust_ID = c2.cust_ID WHERE c1.acc_type = 'saving' AND c2.acc_type = 'checking';
SELECT cust_name  FROM customer  WHERE acc_type IN ('savings', 'checking')  GROUP BY cust_ID  HAVING COUNT(DISTINCT acc_type) = 2;
SELECT cust_name  FROM customer  WHERE acc_type <> 'saving';
SELECT cust_name  FROM customer  WHERE acc_type <> 'saving';
SELECT DISTINCT c.cust_name FROM customer c LEFT JOIN loan l ON c.cust_ID = l.cust_ID AND l.loan_type = 'Mortgages' WHERE l.loan_ID IS NULL;
SELECT DISTINCT c.cust_name FROM customer c LEFT JOIN loan l ON c.cust_ID = l.cust_ID AND l.loan_type = 'Mortgage' WHERE l.loan_ID IS NULL;
SELECT c.cust_name FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID WHERE l.loan_type IN ('Mortgages', 'Auto') GROUP BY c.cust_ID, c.cust_name HAVING COUNT(DISTINCT l.loan_type) = 2;
SELECT c.cust_name FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID WHERE l.loan_type IN ('Mortgage', 'Auto') GROUP BY c.cust_ID, c.cust_name HAVING COUNT(DISTINCT l.loan_type) = 2;
SELECT cust_name  FROM customer  WHERE credit_score < (SELECT AVG(credit_score) FROM customer);
SELECT cust_name  FROM customer  WHERE credit_score < (SELECT AVG(credit_score) FROM customer);
SELECT b.bname FROM bank b ORDER BY b.no_of_customers DESC LIMIT 1;
SELECT bname  FROM bank  ORDER BY no_of_customers DESC  LIMIT 1;
SELECT cust_name  FROM customer  ORDER BY credit_score ASC  LIMIT 1;
SELECT cust_name  FROM customer  ORDER BY credit_score ASC  LIMIT 1;
SELECT cust_name, acc_type, acc_bal  FROM customer  WHERE credit_score = (SELECT MAX(credit_score) FROM customer);
SELECT cust_name, acc_type, acc_bal  FROM customer  WHERE credit_score = (SELECT MAX(credit_score) FROM customer);
SELECT c.cust_name FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID GROUP BY c.cust_ID, c.cust_name ORDER BY SUM(l.amount) DESC LIMIT 1;
SELECT c.cust_name FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID GROUP BY c.cust_ID, c.cust_name ORDER BY SUM(l.amount) DESC LIMIT 1;
SELECT state, COUNT(*) AS num_customers FROM customer GROUP BY state ORDER BY num_customers DESC LIMIT 1;
SELECT state, SUM(no_of_customers) AS total_customers FROM bank GROUP BY state ORDER BY total_customers DESC LIMIT 1;
SELECT acc_type, AVG(acc_bal) AS average_account_balance FROM customer WHERE credit_score < 50 GROUP BY acc_type;
SELECT acc_type, AVG(acc_bal) AS average_account_balance FROM customer WHERE credit_score < 50 GROUP BY acc_type;
SELECT c.state, SUM(c.acc_bal) AS total_account_balance FROM customer c WHERE c.credit_score > 100 GROUP BY c.state;
SELECT state, SUM(acc_bal) AS total_account_balance FROM customer WHERE credit_score > 100 GROUP BY state;
SELECT b.branch_ID, b.bname, SUM(l.amount) AS total_loan_amount FROM bank b JOIN loan l ON b.branch_ID = l.branch_ID GROUP BY b.branch_ID, b.bname;
SELECT b.bname, SUM(l.amount) AS total_loan_amount FROM bank b JOIN loan l ON b.branch_ID = l.branch_ID GROUP BY b.bname;
SELECT c.cust_name  FROM customer c  WHERE c.no_of_loans > 1;
SELECT c.cust_name FROM customer c WHERE c.no_of_loans > 1;
SELECT c.cust_name, c.acc_bal FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID GROUP BY c.cust_ID, c.cust_name, c.acc_bal HAVING SUM(l.amount) > 5000;
SELECT c.cust_name, c.acc_bal FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID GROUP BY c.cust_ID, c.cust_name, c.acc_bal HAVING SUM(l.amount) > 5000;
SELECT b.bname FROM bank b JOIN loan l ON b.branch_ID = l.branch_ID GROUP BY b.branch_ID, b.bname ORDER BY SUM(l.amount) DESC LIMIT 1;
SELECT b.bname FROM bank b JOIN loan l ON b.branch_ID = l.branch_ID GROUP BY b.branch_ID, b.bname ORDER BY SUM(l.amount) DESC LIMIT 1;
SELECT b.bname FROM bank b JOIN loan l ON b.branch_ID = l.branch_ID JOIN customer c ON l.cust_ID = c.cust_ID WHERE c.credit_score < 100 GROUP BY b.bname ORDER BY SUM(l.amount) DESC LIMIT 1;
SELECT b.bname FROM bank b JOIN loan l ON b.branch_ID = l.branch_ID JOIN customer c ON l.cust_ID = c.cust_ID WHERE c.credit_score < 100 GROUP BY b.branch_ID, b.bname ORDER BY SUM(l.amount) DESC LIMIT 1;
SELECT DISTINCT b.bname  FROM bank b  JOIN loan l ON b.branch_ID = l.branch_ID;
SELECT DISTINCT b.bname  FROM bank b  JOIN loan l ON b.branch_ID = l.branch_ID;
SELECT c.cust_name, c.credit_score FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID;
SELECT DISTINCT c.cust_name, c.credit_score FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID;
SELECT c.cust_name  FROM customer c  JOIN loan l ON c.cust_ID = l.cust_ID  WHERE l.amount > 3000;
SELECT c.cust_name  FROM customer c  JOIN loan l ON c.cust_ID = l.cust_ID  WHERE l.amount > 3000;
SELECT DISTINCT b.city, b.bname FROM bank b JOIN loan l ON b.branch_ID = l.branch_ID WHERE l.loan_type = 'business';
SELECT DISTINCT b.bname, b.city FROM bank b JOIN loan l ON b.branch_ID = l.branch_ID WHERE l.loan_type = 'business';
SELECT DISTINCT b.bname FROM bank b JOIN customer c ON b.branch_ID = c.branch_ID JOIN loan l ON c.cust_ID = l.cust_ID WHERE c.credit_score < 100;
SELECT DISTINCT b.bname FROM bank b JOIN loan l ON b.branch_ID = l.branch_ID JOIN customer c ON l.cust_ID = c.cust_ID WHERE c.credit_score < 100;
SELECT SUM(l.amount) AS total_loan_amount FROM loan l JOIN bank b ON l.branch_ID = b.branch_ID WHERE b.state = 'New York';
SELECT SUM(l.amount) AS total_loaned FROM loan l JOIN customer c ON l.cust_ID = c.cust_ID JOIN bank b ON c.branch_ID = b.branch_ID WHERE b.state = 'New York';
SELECT AVG(credit_score) AS average_credit_score FROM customer WHERE cust_ID IN (SELECT DISTINCT cust_ID FROM loan);
SELECT AVG(c.credit_score) AS average_credit_score FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID;
SELECT AVG(credit_score) AS average_credit_score FROM customer WHERE no_of_loans = 0;
SELECT AVG(credit_score) AS average_credit_score FROM customer WHERE cust_ID NOT IN (SELECT cust_ID FROM loan);
SELECT COUNT(*) AS total_assessment_notes FROM Assessment_Notes;
SELECT date_of_notes FROM Assessment_Notes;
SELECT COUNT(*)  FROM Addresses  WHERE zip_postcode = '197';
SELECT COUNT(DISTINCT incident_type_code) AS distinct_incident_type_count FROM Ref_Incident_Type;
SELECT DISTINCT detention_type_code FROM Ref_Detention_Type;
SELECT date_incident_start, date_incident_end  FROM Behavior_Incident  WHERE incident_type_code = 'NOISE';
SELECT detention_summary FROM Detention;
SELECT cell_mobile_number, email_address FROM Students;
SELECT email_address  FROM Students  WHERE first_name = 'Emma' AND last_name = 'Rohan';
SELECT COUNT(DISTINCT student_id) AS distinct_students_in_detention FROM Students_in_Detention;
SELECT gender FROM Teachers WHERE last_name = 'Medhurst';
SELECT incident_type_description  FROM Ref_Incident_Type  WHERE incident_type_code = 'VIOLENCE';
SELECT MAX(monthly_rental) AS max_monthly_rental, MIN(monthly_rental) AS min_monthly_rental FROM Student_Addresses;
SELECT first_name  FROM Teachers  WHERE email_address LIKE '%man%';
SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC;
SELECT DISTINCT city FROM Addresses ORDER BY city;
SELECT first_name, last_name  FROM Teachers  ORDER BY last_name;
SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC;
SELECT student_id, first_name FROM Students WHERE student_id = (     SELECT student_id     FROM Assessment_Notes     GROUP BY student_id     ORDER BY COUNT(notes_id) DESC     LIMIT 1 );
SELECT teacher_id, first_name FROM Teachers WHERE teacher_id IN (     SELECT teacher_id     FROM Assessment_Notes     GROUP BY teacher_id     ORDER BY COUNT(notes_id) DESC     LIMIT 3 );
SELECT student_id, last_name FROM Students WHERE student_id = (     SELECT student_id     FROM Behavior_Incident     GROUP BY student_id     ORDER BY COUNT(incident_id) DESC     LIMIT 1 );
SELECT t.teacher_id, t.last_name FROM Teachers t JOIN Detention d ON t.teacher_id = d.teacher_id WHERE d.detention_type_code = 'AFTER' GROUP BY t.teacher_id, t.last_name ORDER BY COUNT(d.detention_id) DESC LIMIT 1;
SELECT s.student_id, s.first_name FROM Students s JOIN Student_Addresses sa ON s.student_id = sa.student_id GROUP BY s.student_id, s.first_name ORDER BY AVG(sa.monthly_rental) DESC LIMIT 1;
SELECT sa.student_id, a.city FROM Student_Addresses sa JOIN Addresses a ON sa.address_id = a.address_id GROUP BY sa.student_id, a.city ORDER BY AVG(sa.monthly_rental) DESC LIMIT 1;
SELECT incident_type_code, incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = (     SELECT incident_type_code     FROM Behavior_Incident     GROUP BY incident_type_code     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT d.detention_type_code, r.detention_type_description FROM Ref_Detention_Type r JOIN Detention d ON r.detention_type_code = d.detention_type_code GROUP BY d.detention_type_code, r.detention_type_description ORDER BY COUNT(d.detention_id) ASC LIMIT 1;
SELECT a.date_of_notes FROM Assessment_Notes a JOIN Students s ON a.student_id = s.student_id WHERE s.first_name = 'Fanny';
SELECT a.text_of_notes FROM Assessment_Notes a JOIN Teachers t ON a.teacher_id = t.teacher_id WHERE t.last_name = 'Schuster';
SELECT bi.date_incident_start, bi.date_incident_end FROM Behavior_Incident bi JOIN Students s ON bi.student_id = s.student_id WHERE s.last_name = 'Fahey';
SELECT d.datetime_detention_start, d.datetime_detention_end FROM Detention d JOIN Teachers t ON d.teacher_id = t.teacher_id WHERE t.last_name = 'Schultz';
SELECT a.address_id, a.zip_postcode FROM Addresses a JOIN Student_Addresses sa ON a.address_id = sa.address_id ORDER BY sa.monthly_rental DESC LIMIT 1;
SELECT s.cell_mobile_number FROM Students s JOIN Student_Addresses sa ON s.student_id = sa.student_id ORDER BY sa.monthly_rental ASC LIMIT 1;
SELECT sa.monthly_rental FROM Student_Addresses sa JOIN Addresses a ON sa.address_id = a.address_id WHERE a.state_province_county = 'Texas';
SELECT s.first_name, s.last_name FROM Students s JOIN Addresses a ON s.address_id = a.address_id WHERE a.state_province_county = 'Wisconsin';
SELECT a.line_1, AVG(sa.monthly_rental) AS average_monthly_rental FROM Addresses a JOIN Student_Addresses sa ON a.address_id = sa.address_id GROUP BY a.line_1;
SELECT a.zip_postcode FROM Teachers t JOIN Addresses a ON t.address_id = a.address_id WHERE t.first_name = 'Lyla';
SELECT T.email_address FROM Teachers T JOIN Addresses A ON T.address_id = A.address_id WHERE A.zip_postcode = '918';
SELECT COUNT(*) AS students_not_involved FROM Students WHERE student_id NOT IN (SELECT DISTINCT student_id FROM Behavior_Incident);
SELECT DISTINCT t.last_name FROM Teachers t LEFT JOIN Detention d ON t.teacher_id = d.teacher_id WHERE d.detention_id IS NULL;
SELECT DISTINCT a.line_1 FROM Addresses a JOIN Students s ON a.address_id = s.address_id JOIN Teachers t ON a.address_id = t.address_id;
SELECT a.asset_id, a.asset_details FROM Assets a JOIN Asset_Parts ap ON a.asset_id = ap.asset_id LEFT JOIN Fault_Log fl ON a.asset_id = fl.asset_id GROUP BY a.asset_id, a.asset_details HAVING COUNT(ap.part_id) = 2 AND COUNT(fl.fault_log_entry_id) < 2;
SELECT mc.maintenance_contract_id, COUNT(a.asset_id) AS asset_count FROM Maintenance_Contracts mc LEFT JOIN Assets a ON mc.maintenance_contract_id = a.maintenance_contract_id GROUP BY mc.maintenance_contract_id;
SELECT tpc.company_id, COUNT(a.asset_id) AS asset_count FROM Third_Party_Companies tpc JOIN Assets a ON tpc.company_id = a.supplier_company_id GROUP BY tpc.company_id;
SELECT company_id, company_name FROM Third_Party_Companies WHERE company_id IN (     SELECT company_id     FROM Maintenance_Engineers     GROUP BY company_id     HAVING COUNT(engineer_id) >= 2 ) OR company_id IN (     SELECT maintenance_contract_company_id     FROM Maintenance_Contracts     GROUP BY maintenance_contract_company_id     HAVING COUNT(maintenance_contract_id) >= 2 );
SELECT s.staff_id, s.staff_name FROM Staff s WHERE s.staff_id IN (     SELECT DISTINCT fl.recorded_by_staff_id     FROM Fault_Log fl ) AND s.staff_id NOT IN (     SELECT DISTINCT ev.contact_staff_id     FROM Engineer_Visits ev );
SELECT engineer_id, first_name, last_name FROM Maintenance_Engineers WHERE engineer_id = (     SELECT engineer_id     FROM Engineer_Visits     GROUP BY engineer_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT p.part_id, p.part_name FROM Parts p JOIN Part_Faults pf ON p.part_id = pf.part_id GROUP BY p.part_id, p.part_name HAVING COUNT(pf.part_fault_id) > 2;
SELECT      me.first_name,      me.last_name,      me.other_details,      s.skill_description FROM      Maintenance_Engineers me JOIN      Engineer_Skills es ON me.engineer_id = es.engineer_id JOIN      Skills s ON es.skill_id = s.skill_id;
SELECT pf.fault_short_name, s.skill_description FROM Part_Faults pf JOIN Skills_Required_To_Fix srf ON pf.part_fault_id = srf.part_fault_id JOIN Skills s ON srf.skill_id = s.skill_id;
SELECT p.part_name, COUNT(DISTINCT ap.asset_id) AS asset_count FROM Parts p JOIN Asset_Parts ap ON p.part_id = ap.part_id GROUP BY p.part_name;
SELECT fl.fault_description, flp.fault_status FROM Fault_Log fl JOIN Fault_Log_Parts flp ON fl.fault_log_entry_id = flp.fault_log_entry_id;
SELECT fault_log_entry_id, COUNT(engineer_visit_id) AS visit_count FROM Engineer_Visits GROUP BY fault_log_entry_id ORDER BY visit_count DESC LIMIT 1;
SELECT DISTINCT last_name FROM Maintenance_Engineers;
SELECT COUNT(DISTINCT fault_status) AS fault_status_count FROM Fault_Log_Parts;
SELECT e.first_name, e.last_name FROM Maintenance_Engineers e LEFT JOIN Engineer_Visits ev ON e.engineer_id = ev.engineer_id WHERE ev.engineer_visit_id IS NULL;
SELECT asset_id, asset_details, asset_make, asset_model FROM Assets;
SELECT MIN(asset_acquired_date) AS first_asset_acquired FROM Assets;
SELECT p.part_id, p.part_name FROM Parts p JOIN Skills_Required_To_Fix srf ON p.part_id = srf.part_fault_id GROUP BY p.part_id, p.part_name ORDER BY COUNT(srf.skill_id) DESC LIMIT 1;
SELECT p.part_name FROM Parts p JOIN Part_Faults pf ON p.part_id = pf.part_id GROUP BY p.part_id ORDER BY COUNT(pf.part_fault_id) ASC LIMIT 1;
SELECT engineer_id, first_name, last_name FROM Maintenance_Engineers WHERE engineer_id IN (     SELECT engineer_id     FROM Engineer_Visits     GROUP BY engineer_id     HAVING COUNT(*) = (         SELECT MIN(visit_count)         FROM (             SELECT COUNT(*) AS visit_count             FROM Engineer_Visits             GROUP BY engineer_id         ) AS visit_counts     ) );
SELECT s.staff_name, me.first_name, me.last_name FROM Engineer_Visits ev JOIN Staff s ON ev.contact_staff_id = s.staff_id JOIN Maintenance_Engineers me ON ev.engineer_id = me.engineer_id;
SELECT fl.fault_log_entry_id, fl.fault_description, fl.fault_log_entry_datetime FROM Fault_Log fl JOIN Fault_Log_Parts flp ON fl.fault_log_entry_id = flp.fault_log_entry_id GROUP BY fl.fault_log_entry_id, fl.fault_description, fl.fault_log_entry_datetime ORDER BY COUNT(flp.part_fault_id) DESC LIMIT 1;
SELECT s.skill_id, s.skill_description FROM Skills s JOIN Skills_Required_To_Fix sr ON s.skill_id = sr.skill_id JOIN Part_Faults pf ON sr.part_fault_id = pf.part_fault_id GROUP BY s.skill_id, s.skill_description ORDER BY COUNT(pf.part_fault_id) DESC LIMIT 1;
SELECT DISTINCT asset_model FROM Assets;
SELECT asset_make, asset_model, asset_details  FROM Assets  ORDER BY asset_disposed_date ASC;
SELECT part_id, chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1;
SELECT c.company_name FROM Maintenance_Contracts mc JOIN Third_Party_Companies c ON mc.maintenance_contract_company_id = c.company_id ORDER BY mc.contract_start_date ASC LIMIT 1;
SELECT TPC.company_type FROM Third_Party_Companies TPC JOIN Maintenance_Contracts MC ON TPC.company_id = MC.maintenance_contract_company_id ORDER BY MC.contract_end_date DESC LIMIT 1;
SELECT gender, COUNT(*) as count FROM Staff GROUP BY gender ORDER BY count DESC LIMIT 1;
SELECT      s.staff_name,      COUNT(DISTINCT ev.engineer_id) AS engineers_contacted FROM      Engineer_Visits ev JOIN      Staff s ON ev.contact_staff_id = s.staff_id GROUP BY      s.staff_name;
SELECT a.asset_model FROM Assets a LEFT JOIN Fault_Log f ON a.asset_id = f.asset_id WHERE f.fault_log_entry_id IS NULL;
SELECT local_authority, services FROM station;
SELECT train_number, name FROM train ORDER BY time ASC;
SELECT train.time, train.train_number  FROM train  WHERE train.destination = 'Chennai'  ORDER BY train.time;
SELECT COUNT(*) FROM train WHERE name LIKE '%Express%';
SELECT train_number, time  FROM train  WHERE origin = 'Chennai' AND destination = 'Guruvayur';
SELECT origin, COUNT(*) AS train_count FROM train GROUP BY origin;
SELECT t.name FROM train t JOIN route r ON t.id = r.train_id GROUP BY t.id, t.name ORDER BY COUNT(r.station_id) DESC LIMIT 1;
SELECT s.network_name, s.services, COUNT(r.train_id) AS train_count FROM station s LEFT JOIN route r ON s.id = r.station_id GROUP BY s.id, s.network_name, s.services;
SELECT day_of_week, AVG(high_temperature) AS average_high_temperature FROM weekly_weather GROUP BY day_of_week;
SELECT MAX(low_temperature) AS max_low_temp, AVG(precipitation) AS avg_precipitation FROM weekly_weather WHERE station_id = (SELECT id FROM station WHERE network_name = 'Amersham');
SELECT t.name, t.time FROM train t JOIN route r ON t.id = r.train_id JOIN station s ON r.station_id = s.id WHERE s.local_authority = 'Chiltern';
SELECT COUNT(DISTINCT services) AS different_services FROM station;
SELECT s.id, s.local_authority FROM station s JOIN weekly_weather w ON s.id = w.station_id GROUP BY s.id, s.local_authority ORDER BY AVG(w.high_temperature) DESC LIMIT 1;
SELECT s.id, s.local_authority FROM station s JOIN weekly_weather w ON s.id = w.station_id GROUP BY s.id, s.local_authority HAVING MAX(w.precipitation) > 50;
SELECT MIN(low_temperature) AS lowest_low_temperature, MAX(wind_speed_mph) AS highest_wind_speed FROM weekly_weather;
SELECT origin FROM train GROUP BY origin HAVING COUNT(*) > 1;
SELECT COUNT(*) AS NumberOfProfessors FROM PROFESSOR WHERE DEPT_CODE = (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'Accounting');
SELECT COUNT(*)  FROM PROFESSOR  WHERE DEPT_CODE = (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'Accounting');
SELECT COUNT(DISTINCT p.EMP_NUM) AS Professor_Count FROM CLASS c JOIN PROFESSOR p ON c.PROF_NUM = p.EMP_NUM WHERE c.CRS_CODE = 'ACCT-211';
SELECT COUNT(DISTINCT p.EMP_NUM) AS Professor_Count FROM CLASS c JOIN PROFESSOR p ON c.PROF_NUM = p.EMP_NUM WHERE c.CRS_CODE = 'ACCT-211';
SELECT EMP_FNAME, EMP_LNAME  FROM EMPLOYEE  JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM  WHERE PROFESSOR.DEPT_CODE = (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'Biology');
SELECT EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_LNAME FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'Biology';
SELECT EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_DOB FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE WHERE COURSE.CRS_CODE = 'ACCT-211';
SELECT EMP_FNAME, EMP_DOB  FROM EMPLOYEE  JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM  JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM  WHERE CLASS.CRS_CODE = 'ACCT-211';
SELECT COUNT(*)  FROM CLASS  WHERE PROF_NUM = (SELECT EMP_NUM FROM EMPLOYEE WHERE EMP_LNAME = 'Graztevski');
SELECT COUNT(*)  FROM CLASS  WHERE PROF_NUM = (SELECT EMP_NUM FROM PROFESSOR WHERE EMP_LNAME = 'Graztevski');
SELECT SCHOOL_CODE  FROM DEPARTMENT  WHERE DEPT_NAME = 'Accounting';
SELECT SCHOOL_CODE  FROM DEPARTMENT  WHERE DEPT_NAME = 'Accounting';
SELECT CRS_CREDIT, CRS_DESCRIPTION  FROM COURSE  WHERE CRS_CODE = 'CIS-220';
SELECT CRS_DESCRIPTION, CRS_CREDIT  FROM COURSE  WHERE CRS_CODE = 'CIS-220';
SELECT DEPT_ADDRESS  FROM DEPARTMENT  WHERE DEPT_NAME = 'History';
SELECT DEPT_NAME, DEPT_ADDRESS  FROM DEPARTMENT  WHERE DEPT_NAME = 'History';
SELECT COUNT(DISTINCT DEPT_ADDRESS)  FROM DEPARTMENT  WHERE SCHOOL_CODE = 'BUS';
SELECT DISTINCT DEPT_ADDRESS  FROM DEPARTMENT  WHERE SCHOOL_CODE = 'BUS';
SELECT SCHOOL_CODE, COUNT(DISTINCT DEPT_ADDRESS) AS LOCATION_COUNT FROM DEPARTMENT GROUP BY SCHOOL_CODE;
SELECT SCHOOL_CODE, COUNT(DISTINCT DEPT_ADDRESS) AS DISTINCT_ADDRESS_COUNT FROM DEPARTMENT GROUP BY SCHOOL_CODE;
SELECT CRS_DESCRIPTION, CRS_CREDIT  FROM COURSE  WHERE CRS_CODE = 'QM-261';
SELECT CRS_DESCRIPTION, CRS_CREDIT  FROM COURSE  WHERE CRS_CODE = 'QM-261';
SELECT SCHOOL_CODE, COUNT(DEPT_CODE) AS NUMBER_OF_DEPARTMENTS FROM DEPARTMENT GROUP BY SCHOOL_CODE;
SELECT SCHOOL_CODE, COUNT(DEPT_CODE) AS DEPARTMENT_COUNT FROM DEPARTMENT GROUP BY SCHOOL_CODE;
SELECT SCHOOL_CODE, COUNT(DISTINCT DEPT_CODE) AS DEPT_COUNT FROM DEPARTMENT GROUP BY SCHOOL_CODE HAVING COUNT(DISTINCT DEPT_CODE) < 5;
SELECT SCHOOL_CODE, COUNT(DISTINCT DEPT_CODE) AS DEPARTMENT_COUNT FROM DEPARTMENT GROUP BY SCHOOL_CODE HAVING COUNT(DISTINCT DEPT_CODE) < 5;
SELECT CRS_CODE, COUNT(DISTINCT CLASS_SECTION) AS SECTION_COUNT FROM CLASS GROUP BY CRS_CODE;
SELECT CRS_CODE, COUNT(DISTINCT CLASS_SECTION) AS SECTION_COUNT FROM CLASS GROUP BY CRS_CODE;
SELECT D.DEPT_NAME, SUM(C.CRS_CREDIT) AS TOTAL_CREDITS FROM DEPARTMENT D JOIN COURSE C ON D.DEPT_CODE = C.DEPT_CODE GROUP BY D.DEPT_NAME;
SELECT SUM(CRS_CREDIT) AS Total_Credits FROM COURSE;
SELECT CLASS_ROOM, COUNT(CLASS_CODE) AS NUMBER_OF_CLASSES FROM CLASS GROUP BY CLASS_ROOM HAVING COUNT(CLASS_CODE) >= 2;
SELECT CLASS_ROOM, COUNT(*) AS CLASS_COUNT FROM CLASS GROUP BY CLASS_ROOM HAVING COUNT(*) >= 2;
SELECT D.DEPT_NAME, COUNT(C.CLASS_CODE) AS NUMBER_OF_CLASSES FROM DEPARTMENT D LEFT JOIN CLASS C ON D.DEPT_CODE = C.CRS_CODE GROUP BY D.DEPT_NAME;
SELECT D.DEPT_NAME, COUNT(C.CLASS_CODE) AS CLASS_COUNT FROM DEPARTMENT D JOIN COURSE CO ON D.DEPT_CODE = CO.DEPT_CODE JOIN CLASS C ON CO.CRS_CODE = C.CRS_CODE GROUP BY D.DEPT_NAME;
SELECT D.SCHOOL_CODE, COUNT(C.CLASS_CODE) AS NUMBER_OF_CLASSES FROM DEPARTMENT D JOIN CLASS C ON D.DEPT_CODE = C.CRS_CODE GROUP BY D.SCHOOL_CODE;
SELECT D.SCHOOL_CODE, COUNT(DISTINCT C.CLASS_CODE) AS CLASS_COUNT FROM DEPARTMENT D JOIN COURSE CRS ON D.DEPT_CODE = CRS.DEPT_CODE JOIN CLASS C ON CRS.CRS_CODE = C.CRS_CODE GROUP BY D.SCHOOL_CODE;
SELECT D.SCHOOL_CODE, COUNT(P.EMP_NUM) AS NUMBER_OF_PROFESSORS FROM PROFESSOR P JOIN DEPARTMENT D ON P.DEPT_CODE = D.DEPT_CODE GROUP BY D.SCHOOL_CODE;
SELECT COUNT(DISTINCT p.EMP_NUM) AS different_professors FROM PROFESSOR p JOIN DEPARTMENT d ON p.DEPT_CODE = d.DEPT_CODE GROUP BY d.SCHOOL_CODE;
SELECT EMP_JOBCODE, COUNT(*) AS EMP_COUNT FROM EMPLOYEE GROUP BY EMP_JOBCODE ORDER BY EMP_COUNT DESC LIMIT 1;
SELECT EMP_JOBCODE, COUNT(*) AS employee_count FROM EMPLOYEE GROUP BY EMP_JOBCODE ORDER BY employee_count DESC LIMIT 1;
SELECT SCHOOL_CODE  FROM DEPARTMENT  GROUP BY SCHOOL_CODE  ORDER BY COUNT(EMP_NUM) ASC  LIMIT 1;
SELECT SCHOOL_CODE FROM PROFESSOR GROUP BY SCHOOL_CODE ORDER BY COUNT(*) ASC LIMIT 1;
SELECT D.DEPT_NAME, COUNT(P.EMP_NUM) AS PhD_Professors FROM DEPARTMENT D JOIN PROFESSOR P ON D.DEPT_CODE = P.DEPT_CODE WHERE P.PROF_HIGH_DEGREE = 'Ph.D.' GROUP BY D.DEPT_NAME;
SELECT D.DEPT_NAME, COUNT(P.EMP_NUM) AS PhD_Professors FROM DEPARTMENT D JOIN PROFESSOR P ON D.DEPT_CODE = P.DEPT_CODE WHERE P.PROF_HIGH_DEGREE = 'Ph.D.' GROUP BY D.DEPT_NAME;
SELECT D.DEPT_NAME, COUNT(S.STU_NUM) AS NUM_STUDENTS FROM DEPARTMENT D LEFT JOIN STUDENT S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_NAME;
SELECT D.DEPT_NAME, COUNT(S.STU_NUM) AS STUDENT_COUNT FROM DEPARTMENT D LEFT JOIN STUDENT S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_NAME;
SELECT D.DEPT_NAME, SUM(S.STU_HRS) AS TOTAL_HOURS FROM DEPARTMENT D JOIN STUDENT S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_NAME;
SELECT D.DEPT_NAME, SUM(S.STU_HRS) AS TOTAL_STUDY_HOURS FROM DEPARTMENT D JOIN STUDENT S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_NAME;
SELECT      D.DEPT_NAME,     MAX(S.STU_GPA) AS Max_GPA,     AVG(S.STU_GPA) AS Avg_GPA,     MIN(S.STU_GPA) AS Min_GPA FROM      STUDENT S JOIN      DEPARTMENT D ON S.DEPT_CODE = D.DEPT_CODE GROUP BY      D.DEPT_NAME;
SELECT D.DEPT_NAME,         MAX(S.STU_GPA) AS Highest_GPA,         MIN(S.STU_GPA) AS Lowest_GPA,         AVG(S.STU_GPA) AS Average_GPA FROM DEPARTMENT D JOIN STUDENT S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_NAME;
SELECT D.DEPT_NAME, AVG(S.STU_GPA) AS AVG_GPA FROM DEPARTMENT D JOIN STUDENT S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_NAME ORDER BY AVG_GPA DESC LIMIT 1;
SELECT D.DEPT_NAME, AVG(S.STU_GPA) AS AVG_GPA FROM DEPARTMENT D JOIN STUDENT S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_NAME ORDER BY AVG_GPA DESC LIMIT 1;
SELECT COUNT(DISTINCT SCHOOL_CODE) AS total_schools FROM DEPARTMENT;
SELECT COUNT(DISTINCT SCHOOL_CODE) AS number_of_schools FROM DEPARTMENT;
SELECT COUNT(DISTINCT CLASS_CODE) AS different_classes FROM CLASS;
SELECT COUNT(DISTINCT CLASS_CODE) AS unique_classes FROM CLASS;
SELECT COUNT(*) FROM COURSE;
SELECT COUNT(DISTINCT CRS_CODE) AS NumberOfDifferentCourseCodes FROM COURSE;
SELECT COUNT(*) AS number_of_departments FROM DEPARTMENT;
SELECT COUNT(DISTINCT DEPT_CODE) AS NumberOfDepartments FROM DEPARTMENT;
SELECT COUNT(*)  FROM COURSE  WHERE DEPT_CODE = (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'Computer Info. Systems');
SELECT COUNT(*)  FROM COURSE  WHERE DEPT_CODE = (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'Computer Information Systems');
SELECT COUNT(DISTINCT CLASS_SECTION)  FROM CLASS  WHERE CRS_CODE = 'ACCT-211';
SELECT COUNT(DISTINCT CLASS_SECTION)  FROM CLASS  WHERE CRS_CODE = 'ACCT-211';
SELECT D.DEPT_NAME, SUM(C.CRS_CREDIT) AS TOTAL_CREDITS FROM DEPARTMENT D JOIN COURSE C ON D.DEPT_CODE = C.DEPT_CODE JOIN CLASS CL ON C.CRS_CODE = CL.CRS_CODE GROUP BY D.DEPT_NAME;
SELECT D.DEPT_NAME, SUM(C.CRS_CREDIT) AS TOTAL_CREDITS FROM DEPARTMENT D JOIN COURSE C ON D.DEPT_CODE = C.DEPT_CODE GROUP BY D.DEPT_NAME;
SELECT D.DEPT_NAME FROM DEPARTMENT D JOIN COURSE C ON D.DEPT_CODE = C.DEPT_CODE JOIN CLASS CL ON C.CRS_CODE = CL.CRS_CODE GROUP BY D.DEPT_NAME ORDER BY SUM(C.CRS_CREDIT) DESC LIMIT 1;
SELECT D.DEPT_NAME, SUM(C.CRS_CREDIT) AS TOTAL_CREDITS FROM DEPARTMENT D JOIN COURSE C ON D.DEPT_CODE = C.DEPT_CODE GROUP BY D.DEPT_NAME ORDER BY TOTAL_CREDITS DESC LIMIT 1;
SELECT COUNT(*)  FROM ENROLL  WHERE CLASS_CODE = 'ACCT-211';
SELECT COUNT(*) AS total_students FROM ENROLL WHERE CLASS_CODE IN (     SELECT CLASS_CODE     FROM CLASS     WHERE CRS_CODE = 'ACCT-211' );
SELECT STUDENT.STU_FNAME FROM STUDENT JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE WHERE CLASS.CRS_CODE = 'ACCT-211';
SELECT S.STU_FNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS C ON E.CLASS_CODE = C.CLASS_CODE WHERE C.CRS_CODE = 'ACCT-211';
SELECT STU_FNAME  FROM STUDENT  JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM  JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE  WHERE CLASS.CRS_CODE = 'ACCT-211' AND ENROLL.ENROLL_GRADE = 'C';
SELECT S.STU_FNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS C ON E.CLASS_CODE = C.CLASS_CODE WHERE C.CRS_CODE = 'ACCT-211' AND E.ENROLL_GRADE = 'C';
SELECT COUNT(*) AS total_employees FROM EMPLOYEE;
SELECT COUNT(*) AS total_employees FROM EMPLOYEE;
SELECT COUNT(*)  FROM PROFESSOR  WHERE PROF_HIGH_DEGREE = 'Ph.D.';
SELECT COUNT(*)  FROM PROFESSOR  WHERE PROF_HIGH_DEGREE = 'Ph.D.';
SELECT COUNT(DISTINCT E.STU_NUM) AS StudentCount FROM ENROLL E JOIN CLASS C ON E.CLASS_CODE = C.CLASS_CODE JOIN PROFESSOR P ON C.PROF_NUM = P.EMP_NUM JOIN DEPARTMENT D ON P.DEPT_CODE = D.DEPT_CODE WHERE D.DEPT_NAME = 'Accounting';
SELECT COUNT(DISTINCT E.STU_NUM) AS Student_Count FROM ENROLL E JOIN CLASS C ON E.CLASS_CODE = C.CLASS_CODE JOIN PROFESSOR P ON C.PROF_NUM = P.EMP_NUM JOIN DEPARTMENT D ON P.DEPT_CODE = D.DEPT_CODE WHERE D.DEPT_NAME = 'Accounting';
SELECT D.DEPT_NAME FROM DEPARTMENT D JOIN STUDENT S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_NAME ORDER BY COUNT(S.STU_NUM) DESC LIMIT 1;
SELECT D.DEPT_NAME FROM DEPARTMENT D JOIN STUDENT S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_NAME ORDER BY COUNT(S.STU_NUM) DESC LIMIT 1;
SELECT DEPT_NAME FROM DEPARTMENT ORDER BY DEPT_NAME;
SELECT DEPT_NAME FROM DEPARTMENT ORDER BY DEPT_NAME;
SELECT DISTINCT CRS_CODE  FROM CLASS  WHERE CLASS_ROOM = 'KLR209';
SELECT DISTINCT CRS_CODE  FROM CLASS  WHERE CLASS_ROOM = 'KLR209';
SELECT EMP_FNAME  FROM EMPLOYEE  WHERE EMP_JOBCODE = 'PROF'  ORDER BY EMP_DOB;
SELECT EMP_FNAME  FROM EMPLOYEE  WHERE EMP_NUM IN (SELECT EMP_NUM FROM PROFESSOR)  ORDER BY EMP_DOB;
SELECT EMP_FNAME, PROF_OFFICE  FROM PROFESSOR  JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM  ORDER BY EMP_FNAME;
SELECT EMP_FNAME, PROF_OFFICE  FROM PROFESSOR  JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM  ORDER BY EMP_FNAME;
SELECT EMP_FNAME, EMP_LNAME  FROM EMPLOYEE  ORDER BY EMP_DOB  LIMIT 1;
SELECT EMP_FNAME, EMP_LNAME  FROM EMPLOYEE  WHERE EMP_DOB = (SELECT MIN(EMP_DOB) FROM EMPLOYEE);
SELECT STU_FNAME, STU_LNAME, STU_GPA FROM STUDENT WHERE STU_GPA > 3 ORDER BY STU_DOB DESC LIMIT 1;
SELECT STU_FNAME, STU_LNAME, STU_GPA FROM STUDENT WHERE STU_GPA > 3 ORDER BY STU_DOB DESC LIMIT 1;
SELECT DISTINCT S.STU_FNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM WHERE E.ENROLL_GRADE = 'C';
SELECT DISTINCT S.STU_FNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM WHERE E.ENROLL_GRADE = 'C';
SELECT D.DEPT_NAME FROM DEPARTMENT D JOIN PROFESSOR P ON D.DEPT_CODE = P.DEPT_CODE GROUP BY D.DEPT_NAME ORDER BY COUNT(P.EMP_NUM) ASC LIMIT 1;
SELECT D.DEPT_NAME FROM DEPARTMENT D JOIN PROFESSOR P ON D.DEPT_CODE = P.DEPT_CODE GROUP BY D.DEPT_NAME ORDER BY COUNT(P.EMP_NUM) ASC LIMIT 1;
SELECT D.DEPT_NAME FROM DEPARTMENT D JOIN PROFESSOR P ON D.DEPT_CODE = P.DEPT_CODE WHERE P.PROF_HIGH_DEGREE = 'Ph.D.' GROUP BY D.DEPT_NAME ORDER BY COUNT(P.EMP_NUM) DESC LIMIT 1;
SELECT DEPARTMENT.DEPT_NAME FROM PROFESSOR JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE PROFESSOR.PROF_HIGH_DEGREE = 'Ph.D.' GROUP BY DEPARTMENT.DEPT_NAME ORDER BY COUNT(PROFESSOR.EMP_NUM) DESC LIMIT 1;
SELECT EMP_FNAME  FROM PROFESSOR  WHERE EMP_NUM NOT IN (SELECT DISTINCT PROF_NUM FROM CLASS);
SELECT EMP_FNAME  FROM PROFESSOR  WHERE EMP_NUM NOT IN (SELECT PROF_NUM FROM CLASS);
SELECT EMPLOYEE.EMP_FNAME FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM WHERE PROFESSOR.DEPT_CODE = (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'History') AND PROFESSOR.EMP_NUM NOT IN (SELECT DISTINCT CLASS.PROF_NUM FROM CLASS);
SELECT EMP_FNAME  FROM EMPLOYEE  JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM  JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE  WHERE DEPARTMENT.DEPT_NAME = 'History' AND PROFESSOR.PROF_NUM IS NULL;
SELECT EMPLOYEE.EMP_LNAME, PROFESSOR.PROF_OFFICE FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'History';
SELECT EMPLOYEE.EMP_LNAME, PROFESSOR.PROF_OFFICE FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'History';
SELECT D.DEPT_NAME, P.PROF_OFFICE FROM PROFESSOR P JOIN DEPARTMENT D ON P.DEPT_CODE = D.DEPT_CODE WHERE P.EMP_NUM = (SELECT EMP_NUM FROM EMPLOYEE WHERE EMP_LNAME = 'Heffington');
SELECT D.DEPT_NAME, P.PROF_OFFICE FROM PROFESSOR P JOIN DEPARTMENT D ON P.DEPT_CODE = D.DEPT_CODE WHERE P.EMP_NUM = (SELECT EMP_NUM FROM EMPLOYEE WHERE EMP_LNAME = 'Heffington');
SELECT EMPLOYEE.EMP_LNAME, EMPLOYEE.EMP_HIREDATE FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM WHERE PROFESSOR.PROF_OFFICE = 'DRE 102';
SELECT EMP_LNAME, EMP_HIREDATE  FROM EMPLOYEE  JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM  WHERE PROF_OFFICE = 'DRE 102';
SELECT C.CRS_CODE FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS CL ON E.CLASS_CODE = CL.CLASS_CODE JOIN COURSE C ON CL.CRS_CODE = C.CRS_CODE WHERE S.STU_LNAME = 'Smithson';
SELECT DISTINCT C.CRS_CODE FROM CLASS C JOIN ENROLL E ON C.CLASS_CODE = E.CLASS_CODE JOIN STUDENT S ON E.STU_NUM = S.STU_NUM WHERE S.STU_LNAME = 'Smithson';
SELECT C.CRS_DESCRIPTION, C.CRS_CREDIT FROM COURSE C JOIN CLASS CL ON C.CRS_CODE = CL.CRS_CODE JOIN ENROLL E ON CL.CLASS_CODE = E.CLASS_CODE JOIN STUDENT S ON E.STU_NUM = S.STU_NUM WHERE S.STU_LNAME = 'Smithson';
SELECT C.CRS_CREDIT, C.CRS_DESCRIPTION FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS CL ON E.CLASS_CODE = CL.CLASS_CODE JOIN COURSE C ON CL.CRS_CODE = C.CRS_CODE WHERE S.STU_LNAME = 'Smithson';
SELECT COUNT(*)  FROM PROFESSOR  WHERE PROF_HIGH_DEGREE IN ('Ph.D.', 'MA');
SELECT COUNT(*)  FROM PROFESSOR  WHERE PROF_HIGH_DEGREE IN ('Ph.D.', 'Masters');
SELECT COUNT(*)  FROM PROFESSOR  WHERE DEPT_CODE IN (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME IN ('Accounting', 'Biology'));
SELECT COUNT(*)  FROM PROFESSOR  WHERE DEPT_CODE IN (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME IN ('Accounting', 'Biology'));
SELECT E.EMP_FNAME FROM EMPLOYEE E JOIN PROFESSOR P ON E.EMP_NUM = P.EMP_NUM JOIN CLASS C ON P.EMP_NUM = C.PROF_NUM WHERE C.CRS_CODE IN ('CIS-220', 'QM-261') GROUP BY E.EMP_FNAME HAVING COUNT(DISTINCT C.CRS_CODE) = 2;
SELECT E.EMP_FNAME FROM EMPLOYEE E JOIN PROFESSOR P ON E.EMP_NUM = P.EMP_NUM JOIN CLASS C ON P.EMP_NUM = C.PROF_NUM WHERE C.CRS_CODE IN ('CIS-220', 'QM-261');
SELECT DISTINCT S.STU_FNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS C ON E.CLASS_CODE = C.CLASS_CODE JOIN COURSE CR ON C.CRS_CODE = CR.CRS_CODE JOIN DEPARTMENT D ON CR.DEPT_CODE = D.DEPT_CODE WHERE D.DEPT_NAME IN ('Accounting', 'Computer Info. Systems');
SELECT DISTINCT S.STU_FNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS C ON E.CLASS_CODE = C.CLASS_CODE JOIN COURSE CR ON C.CRS_CODE = CR.CRS_CODE WHERE CR.CRS_DESCRIPTION IN ('Accounting', 'Computer Information Systems');
SELECT AVG(STU_GPA) AS average_gpa FROM STUDENT JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE WHERE CLASS.CRS_CODE = 'ACCT-211';
SELECT AVG(STU_GPA) AS Average_GPA FROM STUDENT WHERE STU_NUM IN (     SELECT STU_NUM     FROM ENROLL     WHERE CLASS_CODE IN (         SELECT CLASS_CODE         FROM CLASS         WHERE CRS_CODE = 'ACCT-211'     ) );
SELECT STU_FNAME, STU_GPA, STU_PHONE FROM STUDENT ORDER BY STU_GPA DESC LIMIT 5;
SELECT STU_FNAME, STU_GPA, STU_PHONE FROM STUDENT ORDER BY STU_GPA DESC LIMIT 5;
SELECT D.DEPT_NAME FROM STUDENT S JOIN DEPARTMENT D ON S.DEPT_CODE = D.DEPT_CODE WHERE S.STU_GPA = (SELECT MIN(STU_GPA) FROM STUDENT);
SELECT D.DEPT_NAME FROM DEPARTMENT D JOIN STUDENT S ON D.DEPT_CODE = S.DEPT_CODE WHERE S.STU_GPA = (SELECT MIN(STU_GPA) FROM STUDENT);
SELECT STU_FNAME, STU_GPA  FROM STUDENT  WHERE STU_GPA < (SELECT AVG(STU_GPA) FROM STUDENT);
SELECT STU_FNAME, STU_GPA  FROM STUDENT  WHERE STU_GPA < (SELECT AVG(STU_GPA) FROM STUDENT);
SELECT D.DEPT_NAME, D.DEPT_ADDRESS FROM DEPARTMENT D JOIN STUDENT S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_NAME, D.DEPT_ADDRESS ORDER BY COUNT(S.STU_NUM) DESC LIMIT 1;
SELECT D.DEPT_NAME, D.DEPT_ADDRESS FROM DEPARTMENT D JOIN STUDENT S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_NAME, D.DEPT_ADDRESS ORDER BY COUNT(S.STU_NUM) DESC LIMIT 1;
SELECT D.DEPT_NAME, D.DEPT_ADDRESS, COUNT(S.STU_NUM) AS NUM_STUDENTS FROM DEPARTMENT D JOIN STUDENT S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_NAME, D.DEPT_ADDRESS ORDER BY NUM_STUDENTS DESC LIMIT 3;
SELECT D.DEPT_NAME, D.DEPT_ADDRESS, COUNT(S.STU_NUM) AS NUM_STUDENTS FROM DEPARTMENT D JOIN STUDENT S ON D.DEPT_CODE = S.DEPT_CODE GROUP BY D.DEPT_NAME, D.DEPT_ADDRESS ORDER BY NUM_STUDENTS DESC LIMIT 3;
SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM WHERE PROFESSOR.DEPT_CODE = (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'History') AND PROFESSOR.PROF_HIGH_DEGREE = 'Ph.D.';
SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM WHERE PROFESSOR.DEPT_CODE = (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'History') AND PROFESSOR.PROF_HIGH_DEGREE = 'Ph.D';
SELECT DISTINCT EMPLOYEE.EMP_FNAME, CLASS.CRS_CODE FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM;
SELECT DISTINCT EMPLOYEE.EMP_FNAME, CLASS.CRS_CODE FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM;
SELECT DISTINCT EMPLOYEE.EMP_FNAME, COURSE.CRS_DESCRIPTION FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE;
SELECT DISTINCT EMPLOYEE.EMP_FNAME, COURSE.CRS_DESCRIPTION FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE;
SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE, COURSE.CRS_DESCRIPTION FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE;
SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM GROUP BY EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE;
SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE, COURSE.CRS_DESCRIPTION, DEPARTMENT.DEPT_NAME FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE;
SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE, DEPARTMENT.DEPT_NAME, COURSE.CRS_DESCRIPTION FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE;
SELECT S.STU_FNAME, S.STU_LNAME, C.CRS_DESCRIPTION FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS CL ON E.CLASS_CODE = CL.CLASS_CODE JOIN COURSE C ON CL.CRS_CODE = C.CRS_CODE;
SELECT S.STU_LNAME, S.STU_FNAME, C.CRS_DESCRIPTION FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS CL ON E.CLASS_CODE = CL.CLASS_CODE JOIN COURSE C ON CL.CRS_CODE = C.CRS_CODE;
SELECT DISTINCT S.STU_FNAME, S.STU_LNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM WHERE E.ENROLL_GRADE IN ('A', 'C');
SELECT S.STU_FNAME, S.STU_LNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM WHERE E.ENROLL_GRADE IN ('A', 'C');
SELECT EMPLOYEE.EMP_FNAME, CLASS.CLASS_ROOM FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'Accounting';
SELECT EMPLOYEE.EMP_FNAME, CLASS.CLASS_ROOM FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE WHERE DEPARTMENT.DEPT_NAME = 'Accounting';
SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_HIGH_DEGREE FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE WHERE DEPARTMENT.DEPT_NAME = 'Computer Info. Systems';
SELECT DISTINCT E.EMP_FNAME, P.PROF_HIGH_DEGREE FROM PROFESSOR P JOIN EMPLOYEE E ON P.EMP_NUM = E.EMP_NUM WHERE P.DEPT_CODE = (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'Computer Information Systems');
SELECT S.STU_LNAME  FROM STUDENT S  JOIN ENROLL E ON S.STU_NUM = E.STU_NUM  WHERE E.CLASS_CODE = '10018' AND E.ENROLL_GRADE = 'A';
SELECT S.STU_LNAME  FROM STUDENT S  JOIN ENROLL E ON S.STU_NUM = E.STU_NUM  WHERE E.CLASS_CODE = '10018' AND E.ENROLL_GRADE = 'A';
SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM WHERE PROFESSOR.DEPT_CODE = (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'History') AND PROFESSOR.PROF_HIGH_DEGREE <> 'Ph.D.';
SELECT EMPLOYEE.EMP_FNAME, PROFESSOR.PROF_OFFICE FROM PROFESSOR JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE WHERE DEPARTMENT.DEPT_NAME = 'History' AND PROFESSOR.PROF_HIGH_DEGREE <> 'Ph.D.';
SELECT EMPLOYEE.EMP_FNAME FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM GROUP BY EMPLOYEE.EMP_FNAME HAVING COUNT(CLASS.CLASS_CODE) > 1;
SELECT EMPLOYEE.EMP_FNAME FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM GROUP BY EMPLOYEE.EMP_FNAME HAVING COUNT(CLASS.CLASS_CODE) > 1;
SELECT S.STU_FNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM GROUP BY S.STU_NUM, S.STU_FNAME HAVING COUNT(E.CLASS_CODE) = 1;
SELECT S.STU_FNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM GROUP BY S.STU_NUM, S.STU_FNAME HAVING COUNT(E.CLASS_CODE) = 1;
SELECT D.DEPT_NAME FROM DEPARTMENT D JOIN COURSE C ON D.DEPT_CODE = C.DEPT_CODE JOIN CLASS CL ON C.CRS_CODE = CL.CRS_CODE WHERE C.CRS_DESCRIPTION LIKE '%Statistics%';
SELECT DISTINCT D.DEPT_NAME FROM DEPARTMENT D JOIN COURSE C ON D.DEPT_CODE = C.DEPT_CODE WHERE C.CRS_DESCRIPTION LIKE '%Statistics%';
SELECT S.STU_FNAME  FROM STUDENT S  JOIN ENROLL E ON S.STU_NUM = E.STU_NUM  JOIN CLASS C ON E.CLASS_CODE = C.CLASS_CODE  WHERE S.STU_LNAME LIKE 'S%' AND C.CRS_CODE = 'ACCT-211';
SELECT STU_FNAME  FROM STUDENT  JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM  JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE  WHERE STUDENT.STU_LNAME LIKE 'S%' AND CLASS.CRS_CODE = 'ACCT-211';
SELECT COUNT(*) AS total_clubs FROM club;
SELECT COUNT(*) AS total_clubs FROM club;
SELECT DISTINCT Region FROM club ORDER BY Region ASC;
SELECT DISTINCT Region FROM club ORDER BY Region ASC;
SELECT AVG(Gold) AS Average_Gold_Medals FROM club_rank;
SELECT AVG(Gold) AS Average_Gold_Medals FROM club_rank;
SELECT DISTINCT Competition_type, Country FROM competition;
SELECT Competition_type, Country FROM competition;
SELECT DISTINCT Year  FROM competition  WHERE Competition_type <> 'Tournament';
SELECT DISTINCT Year  FROM competition  WHERE Competition_type <> 'tournament';
SELECT MAX(Silver) AS Max_Silver, MIN(Silver) AS Min_Silver FROM club_rank;
SELECT MAX(Silver) AS Max_Silver, MIN(Silver) AS Min_Silver FROM club_rank;
SELECT COUNT(*)  FROM club_rank  WHERE (Gold + Silver + Bronze) < 10;
SELECT COUNT(*)  FROM club_rank  WHERE Total < 10;
SELECT name FROM club ORDER BY Start_year ASC;
SELECT name FROM club ORDER BY Start_year ASC;
SELECT name FROM club ORDER BY name DESC;
SELECT name FROM club ORDER BY name DESC;
SELECT c.name AS Club_Name, p.name AS Player_Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID;
SELECT c.name AS Club_Name, p.name AS Player_Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID;
SELECT DISTINCT c.name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Position = 'Right Wing';
SELECT DISTINCT c.name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Position = 'Right Wing';
SELECT AVG(Points) AS Average_Points FROM player WHERE Club_ID = (SELECT Club_ID FROM club WHERE name = 'AIB');
SELECT AVG(Points) AS Average_Points FROM player WHERE Club_ID = (SELECT Club_ID FROM club WHERE name = 'AIB');
SELECT Position, AVG(Points) AS Average_Points FROM player GROUP BY Position;
SELECT Position, AVG(Points) AS Average_Points FROM player GROUP BY Position;
SELECT Position FROM player GROUP BY Position HAVING AVG(Points) > 20;
SELECT Position FROM player GROUP BY Position HAVING AVG(Points) > 20;
SELECT Competition_type, COUNT(*) AS Number_of_Competitions FROM competition GROUP BY Competition_type;
SELECT Competition_type, COUNT(*) AS Number_of_Competitions FROM competition GROUP BY Competition_type;
SELECT Competition_type, COUNT(*) AS count FROM competition GROUP BY Competition_type ORDER BY count DESC LIMIT 1;
SELECT Competition_type, COUNT(*) AS count FROM competition GROUP BY Competition_type ORDER BY count DESC LIMIT 1;
SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(Competition_ID) <= 5;
SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(Competition_ID) <= 5;
SELECT name  FROM club  WHERE Club_ID NOT IN (SELECT DISTINCT Club_ID FROM player);
SELECT name  FROM club  WHERE Club_ID NOT IN (SELECT DISTINCT Club_ID FROM player);
SELECT DISTINCT p1.Position FROM player p1 JOIN player p2 ON p1.Position = p2.Position WHERE p1.Points > 20 AND p2.Points < 10;
SELECT Position  FROM player  WHERE Points > 20 OR Points < 10;
SELECT SUM(Points) AS Total_Points FROM player;
SELECT SUM(Points) AS Total_Points FROM player;
SELECT COUNT(DISTINCT Position) AS Different_Positions FROM player;
SELECT COUNT(DISTINCT Position) AS Different_Positions FROM player;
SELECT name  FROM player  WHERE Points > (SELECT AVG(Points) FROM player);
SELECT name  FROM player  WHERE Points > (SELECT AVG(Points) FROM player);
SELECT Position, COUNT(*) AS Number_of_Players FROM player WHERE Points < 30 GROUP BY Position;
SELECT Position, COUNT(*) AS Number_of_Players FROM player WHERE Points < 30 GROUP BY Position;
SELECT Country, COUNT(*) AS Tournament_Count FROM competition WHERE Competition_type = 'Tournament' GROUP BY Country ORDER BY Tournament_Count DESC LIMIT 1;
SELECT Country FROM competition GROUP BY Country ORDER BY COUNT(Competition_ID) DESC LIMIT 1;
SELECT DISTINCT c.Country FROM competition c WHERE c.Competition_type IN ('Friendly', 'Tournament') GROUP BY c.Country HAVING COUNT(DISTINCT c.Competition_type) = 2;
SELECT DISTINCT c.Country FROM competition c WHERE c.Competition_type IN ('friendly', 'tournament') GROUP BY c.Country HAVING COUNT(DISTINCT c.Competition_type) = 2;
SELECT DISTINCT c.Country FROM competition c WHERE c.Competition_type = 'Friendly' AND c.Competition_ID NOT IN (SELECT Competition_ID FROM competition_result);
SELECT DISTINCT c.Country FROM competition c WHERE c.Competition_type = 'friendly' EXCEPT SELECT DISTINCT c.Country FROM competition c;
SELECT SUM(Num_of_Component) AS Total_Components FROM furniture;
SELECT Name, Furniture_ID  FROM furniture  WHERE Market_Rate = (SELECT MAX(Market_Rate) FROM furniture);
SELECT SUM(f.Market_Rate) AS Total_Market_Rate FROM furniture f JOIN furniture_manufacte fm ON f.Furniture_ID = fm.Furniture_ID GROUP BY f.Furniture_ID ORDER BY SUM(fm.Price_in_Dollar) DESC LIMIT 2;
SELECT Num_of_Component, Name  FROM furniture  WHERE Num_of_Component > 10;
SELECT f.Name, f.Num_of_Component FROM furniture f JOIN furniture_manufacte fm ON f.Furniture_ID = fm.Furniture_ID GROUP BY f.Furniture_ID ORDER BY COUNT(fm.Manufacturer_ID) ASC LIMIT 1;
SELECT f.Name FROM furniture f JOIN furniture_manufacte fm ON f.Furniture_ID = fm.Furniture_ID WHERE fm.Price_in_Dollar < (SELECT MAX(Price_in_Dollar) FROM furniture_manufacte);
SELECT Name, Open_Year FROM manufacturer ORDER BY Num_of_Shops DESC LIMIT 1;
SELECT AVG(Num_of_Factories) AS Average_Factories FROM manufacturer WHERE Num_of_Shops > 20;
SELECT Manufacturer_ID, Name  FROM manufacturer  ORDER BY Open_Year;
SELECT Name, Open_Year  FROM manufacturer  WHERE Num_of_Factories < 10 OR Num_of_Shops > 10;
SELECT AVG(Num_of_Factories) AS Average_Factories, MAX(Num_of_Shops) AS Max_Shops FROM manufacturer WHERE Open_Year < 1990;
SELECT m.Manufacturer_ID, m.Num_of_Shops FROM manufacturer m JOIN furniture_manufacte fm ON m.Manufacturer_ID = fm.Manufacturer_ID JOIN furniture f ON fm.Furniture_ID = f.Furniture_ID WHERE f.Market_Rate = (SELECT MAX(Market_Rate) FROM furniture);
SELECT m.Name, COUNT(f.Furniture_ID) AS Number_of_Furniture_Types FROM manufacturer m JOIN furniture_manufacte fm ON m.Manufacturer_ID = fm.Manufacturer_ID JOIN furniture f ON fm.Furniture_ID = f.Furniture_ID GROUP BY m.Name;
SELECT f.Name, fm.Price_in_Dollar FROM furniture f JOIN furniture_manufacte fm ON f.Furniture_ID = fm.Furniture_ID;
SELECT f.Name AS Furniture_Name FROM furniture f LEFT JOIN furniture_manufacte fm ON f.Furniture_ID = fm.Furniture_ID WHERE fm.Manufacturer_ID IS NULL;
SELECT m.Name FROM manufacturer m JOIN furniture_manufacte fm ON m.Manufacturer_ID = fm.Manufacturer_ID JOIN furniture f ON fm.Furniture_ID = f.Furniture_ID WHERE f.Num_of_Component < 6 GROUP BY m.Manufacturer_ID HAVING COUNT(CASE WHEN f.Num_of_Component > 10 THEN 1 END) > 0
SELECT e.FIRST_NAME, d.DEPARTMENT_NAME FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;
SELECT e.FIRST_NAME, d.DEPARTMENT_NAME FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;
SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, SALARY FROM employees WHERE SALARY < 6000;
SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, SALARY FROM employees WHERE SALARY < 6000;
SELECT FIRST_NAME, DEPARTMENT_ID  FROM employees  WHERE LAST_NAME = 'McEwen';
SELECT FIRST_NAME, DEPARTMENT_ID  FROM employees  WHERE LAST_NAME = 'McEwen';
SELECT *  FROM employees  WHERE DEPARTMENT_ID IS NULL;
SELECT * FROM employees WHERE DEPARTMENT_ID IS NULL;
SELECT * FROM departments WHERE DEPARTMENT_NAME = 'Marketing';
SELECT * FROM departments d JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID WHERE d.DEPARTMENT_NAME = 'Marketing';
SELECT HIRE_DATE  FROM employees  WHERE FIRST_NAME NOT LIKE '%M%';
SELECT HIRE_DATE  FROM employees  WHERE FIRST_NAME NOT LIKE '%M%';
SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, HIRE_DATE, SALARY, DEPARTMENT_ID FROM employees WHERE FIRST_NAME NOT LIKE '%M%';
SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, HIRE_DATE, SALARY, DEPARTMENT_ID FROM employees WHERE FIRST_NAME NOT LIKE '%M%';
SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, HIRE_DATE, SALARY, DEPARTMENT_ID FROM employees WHERE FIRST_NAME NOT LIKE '%M%' ORDER BY DEPARTMENT_ID ASC;
SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, HIRE_DATE, SALARY, DEPARTMENT_ID FROM employees WHERE FIRST_NAME NOT LIKE '%M%' ORDER BY DEPARTMENT_ID ASC;
SELECT PHONE_NUMBER  FROM employees  WHERE SALARY BETWEEN 8000 AND 12000;
SELECT PHONE_NUMBER  FROM employees  WHERE SALARY BETWEEN 8000 AND 12000;
SELECT *  FROM employees  WHERE (salary BETWEEN 8000 AND 12000 AND commission_pct IS NOT NULL)     OR department_id <> 40;
SELECT *  FROM employees  WHERE (SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL)     OR DEPARTMENT_ID <> 40;
SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, SALARY FROM employees WHERE COMMISSION_PCT IS NULL;
SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, SALARY FROM employees WHERE COMMISSION_PCT IS NULL;
SELECT FIRST_NAME, LAST_NAME, SALARY  FROM employees  WHERE FIRST_NAME LIKE '%m';
SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, SALARY FROM employees WHERE FIRST_NAME LIKE '%m';
SELECT JOB_ID, HIRE_DATE  FROM employees  WHERE HIRE_DATE BETWEEN '2007-11-05' AND '2009-07-05';
SELECT JOB_ID, HIRE_DATE  FROM employees  WHERE HIRE_DATE > '2007-11-05' AND HIRE_DATE < '2009-07-05';
SELECT FIRST_NAME, LAST_NAME  FROM employees  WHERE DEPARTMENT_ID IN (70, 90);
SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME FROM employees WHERE DEPARTMENT_ID IN (70, 90);
SELECT SALARY, MANAGER_ID  FROM employees  WHERE MANAGER_ID IS NOT NULL;
SELECT SALARY, MANAGER_ID  FROM employees  WHERE MANAGER_ID IS NOT NULL;
SELECT * FROM employees WHERE hire_date < '2002-06-21';
SELECT * FROM employees WHERE HIRE_DATE < '2002-06-21';
SELECT *  FROM employees  WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'  ORDER BY SALARY DESC;
SELECT *  FROM employees  WHERE FIRST_NAME LIKE 'D%' OR FIRST_NAME LIKE 'S%'  ORDER BY SALARY DESC;
SELECT * FROM employees WHERE HIRE_DATE > '1987-09-07';
SELECT * FROM employees WHERE HIRE_DATE > '1987-09-07';
SELECT JOB_TITLE  FROM jobs  WHERE MIN_SALARY > 9000;
SELECT JOB_TITLE  FROM jobs  WHERE MAX_SALARY > 9000;
SELECT JOB_TITLE, (MAX_SALARY - MIN_SALARY) AS SALARY_DIFFERENCE FROM jobs WHERE MAX_SALARY BETWEEN 12000 AND 18000;
SELECT JOB_TITLE, MIN_SALARY, MAX_SALARY  FROM jobs  WHERE MAX_SALARY BETWEEN 12000 AND 18000;
SELECT EMAIL  FROM employees  WHERE COMMISSION_PCT IS NULL  AND SALARY BETWEEN 7000 AND 12000  AND DEPARTMENT_ID = 50;
SELECT EMAIL  FROM employees  WHERE COMMISSION_PCT IS NULL  AND SALARY BETWEEN 7000 AND 12000  AND DEPARTMENT_ID = 50;
SELECT e.EMPLOYEE_ID, jh.END_DATE FROM employees e JOIN job_history jh ON e.EMPLOYEE_ID = jh.EMPLOYEE_ID WHERE jh.END_DATE IS NOT NULL;
SELECT e.EMPLOYEE_ID, jh.END_DATE FROM employees e JOIN job_history jh ON e.EMPLOYEE_ID = jh.EMPLOYEE_ID WHERE jh.END_DATE = (     SELECT MAX(END_DATE)     FROM job_history     WHERE EMPLOYEE_ID = e.EMPLOYEE_ID );
SELECT d.DEPARTMENT_ID, d.DEPARTMENT_NAME FROM departments d JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID WHERE e.COMMISSION_PCT IS NOT NULL GROUP BY d.DEPARTMENT_ID, d.DEPARTMENT_NAME HAVING COUNT(e.EMPLOYEE_ID) > 10;
SELECT DEPARTMENT_ID FROM employees WHERE COMMISSION_PCT IS NOT NULL GROUP BY DEPARTMENT_ID HAVING COUNT(*) > 10;
SELECT DEPARTMENT_ID FROM employees WHERE MANAGER_ID IS NOT NULL GROUP BY MANAGER_ID, DEPARTMENT_ID HAVING COUNT(EMPLOYEE_ID) >= 4;
SELECT DEPARTMENT_ID FROM employees WHERE MANAGER_ID IN (     SELECT MANAGER_ID     FROM employees     GROUP BY MANAGER_ID     HAVING COUNT(EMPLOYEE_ID) > 3 );
SELECT d.DEPARTMENT_ID, AVG(e.SALARY) AS AVG_SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID WHERE e.COMMISSION_PCT IS NOT NULL GROUP BY d.DEPARTMENT_ID;
SELECT AVG(SALARY) AS average_salary FROM employees WHERE COMMISSION_PCT IS NOT NULL;
SELECT c.COUNTRY_ID, COUNT(l.CITY) AS NUMBER_OF_CITIES FROM countries c LEFT JOIN locations l ON c.COUNTRY_ID = l.COUNTRY_ID GROUP BY c.COUNTRY_ID;
SELECT COUNTRY_ID, COUNT(CITY) AS CITY_COUNT FROM locations GROUP BY COUNTRY_ID;
SELECT j.JOB_ID FROM job_history jh JOIN jobs j ON jh.JOB_ID = j.JOB_ID GROUP BY jh.JOB_ID HAVING COUNT(DISTINCT jh.EMPLOYEE_ID) >= 2 AND DATEDIFF(MAX(jh.END_DATE), MIN(jh.START_DATE)) > 300;
SELECT JOB_ID FROM job_history GROUP BY JOB_ID HAVING COUNT(*) > 1 AND MAX(END_DATE) - MIN(START_DATE) > 300;
SELECT EMPLOYEE_ID FROM job_history GROUP BY EMPLOYEE_ID HAVING COUNT(JOB_ID) >= 2;
SELECT EMPLOYEE_ID FROM job_history GROUP BY EMPLOYEE_ID HAVING COUNT(JOB_ID) >= 2;
SELECT e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME, c.COUNTRY_NAME FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID;
SELECT e.EMPLOYEE_ID, c.COUNTRY_NAME FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID;
SELECT d.DEPARTMENT_NAME, COUNT(e.EMPLOYEE_ID) AS NUMBER_OF_EMPLOYEES FROM departments d LEFT JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME;
SELECT d.DEPARTMENT_NAME, COUNT(e.EMPLOYEE_ID) AS NUMBER_OF_EMPLOYEES FROM departments d LEFT JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME;
SELECT DISTINCT j.* FROM jobs j JOIN employees e ON j.JOB_ID = e.JOB_ID WHERE e.SALARY >= 12000;
SELECT jh.* FROM job_history jh JOIN employees e ON jh.EMPLOYEE_ID = e.EMPLOYEE_ID WHERE e.SALARY >= 12000;
SELECT j.JOB_TITLE, AVG(e.SALARY) AS AVERAGE_SALARY FROM jobs j JOIN employees e ON j.JOB_ID = e.JOB_ID GROUP BY j.JOB_TITLE;
SELECT j.JOB_TITLE, AVG(e.SALARY) AS AVERAGE_SALARY FROM jobs j JOIN employees e ON j.JOB_ID = e.JOB_ID GROUP BY j.JOB_TITLE;
SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME FROM employees WHERE SALARY > (SELECT SALARY FROM employees WHERE EMPLOYEE_ID = 163);
SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME FROM employees WHERE SALARY > (SELECT SALARY FROM employees WHERE EMPLOYEE_ID = 163);
SELECT DEPARTMENT_ID, MIN(SALARY) AS SMALLEST_SALARY FROM employees GROUP BY DEPARTMENT_ID;
SELECT DEPARTMENT_ID, MIN(SALARY) AS MIN_SALARY FROM employees GROUP BY DEPARTMENT_ID;
SELECT FIRST_NAME, LAST_NAME, DEPARTMENT_ID FROM employees WHERE SALARY = (SELECT MIN(SALARY) FROM employees);
SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, DEPARTMENT_ID FROM employees WHERE SALARY = (SELECT MIN(SALARY) FROM employees);
SELECT EMPLOYEE_ID  FROM employees  WHERE SALARY > (SELECT AVG(SALARY) FROM employees);
SELECT EMPLOYEE_ID  FROM employees  WHERE SALARY > (SELECT AVG(SALARY) FROM employees);
SELECT e.EMPLOYEE_ID, e.SALARY FROM employees e WHERE e.MANAGER_ID = (SELECT EMPLOYEE_ID FROM employees WHERE FIRST_NAME = 'Payam');
SELECT EMPLOYEE_ID, SALARY  FROM employees  WHERE MANAGER_ID = (SELECT EMPLOYEE_ID FROM employees WHERE FIRST_NAME = 'Payam');
SELECT DISTINCT d.DEPARTMENT_NAME FROM departments d JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID;
SELECT DISTINCT d.DEPARTMENT_NAME FROM departments d JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID;
SELECT e.* FROM employees e JOIN departments d ON e.EMPLOYEE_ID = d.MANAGER_ID;
SELECT e.* FROM employees e WHERE e.EMPLOYEE_ID IN (SELECT DISTINCT MANAGER_ID FROM employees WHERE MANAGER_ID IS NOT NULL);
SELECT * FROM departments WHERE DEPARTMENT_NAME = 'Marketing';
SELECT * FROM departments d JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID WHERE d.DEPARTMENT_NAME = 'Marketing';
SELECT EMPLOYEE_ID FROM job_history GROUP BY EMPLOYEE_ID HAVING COUNT(JOB_ID) >= 2;
SELECT EMPLOYEE_ID FROM job_history GROUP BY EMPLOYEE_ID HAVING COUNT(JOB_ID) >= 2;
SELECT DEPARTMENT_ID FROM employees WHERE MANAGER_ID IN (     SELECT MANAGER_ID     FROM employees     GROUP BY MANAGER_ID     HAVING COUNT(*) >= 4 ) GROUP BY DEPARTMENT_ID;
SELECT DEPARTMENT_ID FROM employees WHERE MANAGER_ID IS NOT NULL GROUP BY DEPARTMENT_ID HAVING COUNT(EMPLOYEE_ID) >= 4;
SELECT JOB_ID  FROM employees  GROUP BY JOB_ID  HAVING AVG(SALARY) > 8000;
SELECT JOB_ID  FROM employees  GROUP BY JOB_ID  HAVING AVG(SALARY) > 8000;
SELECT e.EMPLOYEE_ID, j.JOB_TITLE FROM employees e JOIN jobs j ON e.JOB_ID = j.JOB_ID WHERE e.DEPARTMENT_ID = 80;
SELECT e.EMPLOYEE_ID, j.JOB_TITLE FROM employees e JOIN jobs j ON e.JOB_ID = j.JOB_ID WHERE e.DEPARTMENT_ID = 80;
SELECT e.FIRST_NAME, e.JOB_ID FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID WHERE d.DEPARTMENT_NAME = 'Finance';
SELECT e.FIRST_NAME, e.JOB_ID FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID WHERE d.DEPARTMENT_NAME = 'Finance';
SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(MIN_SALARY) FROM jobs) AND 2500;
SELECT *  FROM employees  WHERE SALARY > (SELECT MIN(MIN_SALARY) FROM jobs) AND SALARY < 2500;
SELECT EMPLOYEE_ID  FROM employees  WHERE DEPARTMENT_ID NOT IN (     SELECT DISTINCT DEPARTMENT_ID      FROM employees      WHERE MANAGER_ID BETWEEN 100 AND 200 );
SELECT e.EMPLOYEE_ID FROM employees e WHERE e.DEPARTMENT_ID NOT IN (     SELECT d.DEPARTMENT_ID     FROM departments d     WHERE d.MANAGER_ID BETWEEN 100 AND 200 );
SELECT e.FIRST_NAME, e.LAST_NAME, e.HIRE_DATE FROM employees e JOIN employees c ON e.DEPARTMENT_ID = c.DEPARTMENT_ID WHERE c.FIRST_NAME = 'Clara';
SELECT e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME, e.HIRE_DATE FROM employees e WHERE e.DEPARTMENT_ID = (     SELECT DEPARTMENT_ID     FROM employees     WHERE FIRST_NAME = 'Clara' )
SELECT e.FIRST_NAME, e.LAST_NAME, e.HIRE_DATE FROM employees e JOIN employees c ON e.DEPARTMENT_ID = c.DEPARTMENT_ID WHERE c.FIRST_NAME = 'Clara' AND e.EMPLOYEE_ID <> c.EMPLOYEE_ID;
SELECT e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME, e.HIRE_DATE FROM employees e JOIN employees c ON e.DEPARTMENT_ID = c.DEPARTMENT_ID WHERE c.FIRST_NAME = 'Clara' AND e.EMPLOYEE_ID <> c.EMPLOYEE_ID;
SELECT e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID WHERE d.DEPARTMENT_ID IN (     SELECT d2.DEPARTMENT_ID     FROM employees e2     JOIN departments d2 ON e2.DEPARTMENT_ID = d2.DEPARTMENT_ID     WHERE e2.FIRST_NAME LIKE '%T%' OR e2.LAST_NAME LIKE '%T%' );
SELECT e.EMPLOYEE_ID, CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS FULL_NAME FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID WHERE d.DEPARTMENT_ID IN (     SELECT d2.DEPARTMENT_ID     FROM employees e2     JOIN departments d2 ON e2.DEPARTMENT_ID = d2.DEPARTMENT_ID     WHERE e2.FIRST_NAME LIKE '%T%' );
SELECT e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME, e.SALARY FROM employees e WHERE e.SALARY > (SELECT AVG(SALARY) FROM employees) AND e.DEPARTMENT_ID IN (     SELECT DISTINCT d.DEPARTMENT_ID     FROM employees d     WHERE d.FIRST_NAME LIKE '%J%' );
SELECT e.EMPLOYEE_ID, CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS FULL_NAME, e.SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID WHERE e.SALARY > (SELECT AVG(SALARY) FROM employees) AND d.DEPARTMENT_ID IN (SELECT DISTINCT d2.DEPARTMENT_ID                          FROM employees e2                          JOIN departments d2 ON e2.DEPARTMENT_ID = d2.DEPARTMENT_ID                          WHERE e2.FIRST_NAME LIKE '%J%');
SELECT EMPLOYEE_ID, JOB_ID  FROM employees  WHERE SALARY < (SELECT MIN(SALARY)                   FROM employees e                   JOIN jobs j ON e.JOB_ID = j.JOB_ID                   WHERE j.JOB_TITLE = 'MK_MAN');
SELECT EMPLOYEE_ID, JOB_ID  FROM employees  WHERE SALARY < (SELECT MIN(SALARY)                   FROM employees                   WHERE JOB_ID = (SELECT JOB_ID                                   FROM jobs                                   WHERE JOB_TITLE = 'MK_MAN'));
SELECT e.EMPLOYEE_ID, e.FIRST_NAME || ' ' || e.LAST_NAME AS NAME, j.JOB_TITLE FROM employees e JOIN jobs j ON e.JOB_ID = j.JOB_ID WHERE e.SALARY > (SELECT MAX(e2.SALARY)                    FROM employees e2                    JOIN jobs j2 ON e2.JOB_ID = j2.JOB_ID                    WHERE j2.JOB_TITLE = 'PU_MAN');
SELECT EMPLOYEE_ID, FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME, JOB_ID FROM employees WHERE SALARY > (SELECT MAX(SALARY) FROM employees e JOIN jobs j ON e.JOB_ID = j.JOB_ID WHERE j.JOB_TITLE = 'PU_MAN');
SELECT d.DEPARTMENT_ID, SUM(e.SALARY) AS TOTAL_SALARY FROM departments d JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_ID HAVING COUNT(e.EMPLOYEE_ID) >= 2;
SELECT d.DEPARTMENT_ID, SUM(e.SALARY) AS TOTAL_SALARY FROM departments d JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_ID HAVING COUNT(e.EMPLOYEE_ID) > 2;
SELECT * FROM employees WHERE EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM job_history);
SELECT * FROM employees WHERE EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM job_history);
SELECT e.DEPARTMENT_ID, e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME, e.SALARY FROM employees e WHERE e.SALARY = (     SELECT MAX(SALARY)     FROM employees     WHERE DEPARTMENT_ID = e.DEPARTMENT_ID );
SELECT e.DEPARTMENT_ID, CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS FULL_NAME, e.SALARY FROM employees e WHERE e.SALARY = (     SELECT MAX(SALARY)     FROM employees     WHERE DEPARTMENT_ID = e.DEPARTMENT_ID );
SELECT e.FIRST_NAME, e.LAST_NAME, d.DEPARTMENT_NAME, l.CITY, l.STATE_PROVINCE FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID;
SELECT      CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS FULL_NAME,     d.DEPARTMENT_NAME,     l.CITY,     l.STATE_PROVINCE FROM      employees e JOIN      departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN      locations l ON d.LOCATION_ID = l.LOCATION_ID;
SELECT e.FIRST_NAME, e.LAST_NAME, l.CITY FROM employees e JOIN locations l ON e.DEPARTMENT_ID = l.LOCATION_ID WHERE e.FIRST_NAME LIKE '%z%';
SELECT CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS FULL_NAME, l.CITY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID WHERE e.FIRST_NAME LIKE '%Z%';
SELECT d.DEPARTMENT_NAME, l.CITY, l.STATE_PROVINCE FROM departments d JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID;
SELECT d.DEPARTMENT_NAME, l.CITY, l.STATE_PROVINCE FROM departments d JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID;
SELECT CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS FULL_NAME, c.COUNTRY_NAME FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID WHERE e.EMPLOYEE_ID = :employee_id;
SELECT e.EMPLOYEE_ID, CONCAT(e.FIRST_NAME, ' ', e.LAST_NAME) AS FULL_NAME, c.COUNTRY_NAME FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID;
SELECT d.DEPARTMENT_NAME, COUNT(e.EMPLOYEE_ID) AS NUMBER_OF_EMPLOYEES FROM departments d LEFT JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME;
SELECT d.DEPARTMENT_NAME, COUNT(e.EMPLOYEE_ID) AS EMPLOYEE_COUNT FROM departments d LEFT JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME;
SELECT e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME, e.SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID WHERE l.CITY = 'London';
SELECT e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME, e.SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID WHERE l.CITY = 'London';
SELECT song_name  FROM song  ORDER BY releasedate DESC  LIMIT 1;
SELECT song_name  FROM song  ORDER BY releasedate DESC  LIMIT 1;
SELECT f_id FROM song ORDER BY duration DESC LIMIT 1;
SELECT f_id FROM song ORDER BY duration DESC LIMIT 1;
SELECT song_name FROM song WHERE languages LIKE '%English%';
SELECT song_name FROM song WHERE languages = 'English';
SELECT s.f_id  FROM song s  JOIN files f ON s.f_id = f.f_id  WHERE f.formats = 'mp3';
SELECT f_id FROM files WHERE formats = 'mp3';
SELECT DISTINCT artist_name, country  FROM artist  WHERE artist_name IN (     SELECT artist_name      FROM song      WHERE rating > 9 );
SELECT DISTINCT artist_name, country  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE song.rating > 9;
SELECT f.file_size, f.formats FROM files f JOIN song s ON f.f_id = s.f_id WHERE s.resolution < 800;
SELECT f.file_size, f.formats FROM files f JOIN song s ON f.f_id = s.f_id WHERE s.resolution < 800;
SELECT artist_name  FROM files  WHERE duration = (SELECT MIN(duration) FROM files);
SELECT artist_name  FROM song  WHERE duration = (SELECT MIN(duration) FROM files WHERE f_id = song.f_id);
SELECT DISTINCT artist_name, country FROM song WHERE rating IN (     SELECT DISTINCT rating     FROM song     ORDER BY rating DESC     LIMIT 3 );
SELECT DISTINCT artist_name, country FROM song WHERE rating IN (     SELECT DISTINCT rating     FROM song     ORDER BY rating DESC     LIMIT 3 );
SELECT COUNT(*)  FROM files  WHERE duration = 4;
SELECT COUNT(*) AS song_count FROM song WHERE duration BETWEEN 240 AND 300;  -- Assuming duration is in seconds
SELECT COUNT(*) FROM artist WHERE country = 'Bangladesh';
SELECT COUNT(*) FROM artist WHERE country = 'Bangladesh';
SELECT AVG(s.rating) AS average_rating FROM song s JOIN artist a ON s.artist_name = a.artist_name WHERE a.gender = 'female';
SELECT AVG(song_count) AS average_songs_by_female_artist FROM (     SELECT COUNT(*) AS song_count     FROM song     JOIN artist ON song.artist_name = artist.artist_name     WHERE artist.gender = 'female'     GROUP BY artist.artist_name ) AS female_artist_songs;
SELECT formats, COUNT(*) AS format_count FROM files GROUP BY formats ORDER BY format_count DESC LIMIT 1;
SELECT formats, COUNT(*) AS file_count FROM files GROUP BY formats ORDER BY file_count DESC LIMIT 1;
SELECT DISTINCT artist_name  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE artist.country = 'UK' AND song.languages LIKE '%English%';
SELECT DISTINCT artist_name  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE artist.country = 'UK' AND song.languages LIKE '%English%';
SELECT f.f_id  FROM files f  JOIN song s ON f.f_id = s.f_id  WHERE f.formats LIKE '%mp4%' AND s.resolution < 1000;
SELECT f_id  FROM files  WHERE formats LIKE '%mp4%' AND f_id IN (SELECT f_id FROM song WHERE resolution < 1000);
SELECT DISTINCT artist.country FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE artist.gender = 'female' AND song.languages LIKE '%Bangla%';
SELECT DISTINCT artist.country  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE artist.gender = 'female' AND song.languages LIKE '%Bangla%';
SELECT AVG(duration) AS average_duration FROM files JOIN song ON files.f_id = song.f_id WHERE formats = 'mp3' AND resolution < 800;
SELECT AVG(duration) AS average_duration FROM files JOIN song ON files.f_id = song.f_id WHERE formats = 'mp3' AND resolution < 800;
SELECT gender, COUNT(*) AS number_of_artists FROM artist GROUP BY gender;
SELECT gender, COUNT(*) AS artist_count FROM artist GROUP BY gender;
SELECT languages, AVG(rating) AS average_rating FROM song GROUP BY languages;
SELECT languages, AVG(rating) AS average_rating FROM song GROUP BY languages;
SELECT a.gender, a.artist_name FROM artist a JOIN song s ON a.artist_name = s.artist_name WHERE s.resolution = (SELECT MIN(resolution) FROM song);
SELECT a.gender, a.artist_name FROM artist a JOIN song s ON a.artist_name = s.artist_name WHERE s.resolution = (SELECT MIN(resolution) FROM song);
SELECT f.formats, COUNT(DISTINCT s.artist_name) AS artist_count FROM files f JOIN song s ON f.f_id = s.f_id GROUP BY f.formats;
SELECT formats, COUNT(song_name) AS song_count FROM files JOIN song ON files.f_id = song.f_id GROUP BY formats;
SELECT DISTINCT s1.song_name FROM song s1 WHERE s1.resolution > (SELECT MAX(s2.resolution)                         FROM song s2                         WHERE s2.languages LIKE '%English%');
SELECT DISTINCT s.song_name FROM song s WHERE s.resolution > (SELECT MAX(s2.resolution) FROM song s2 WHERE s2.languages = 'English');
SELECT song_name  FROM song  WHERE rating < (SELECT MAX(rating) FROM song WHERE genre_is IN (SELECT g_name FROM genre WHERE g_name = 'blues'));
SELECT s.song_name FROM song s WHERE s.rating < (SELECT MIN(s2.rating)                    FROM song s2                    WHERE s2.genre_is = 'blues');
SELECT DISTINCT artist_name, country  FROM artist  WHERE artist_name IN (     SELECT artist_name      FROM song      WHERE song_name LIKE '%love%' );
SELECT DISTINCT artist_name, country  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE song.song_name LIKE '%love%';
SELECT DISTINCT a.artist_name, a.gender FROM artist a JOIN song s ON a.artist_name = s.artist_name WHERE MONTH(s.releasedate) = 3;
SELECT DISTINCT artist_name, gender  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE MONTH(releasedate) = 3;
SELECT g_name, rating FROM genre ORDER BY g_name ASC;
SELECT g_name, rating FROM genre ORDER BY g_name;
SELECT song_name FROM song ORDER BY resolution;
SELECT song_name FROM song ORDER BY resolution;
SELECT DISTINCT s.f_id  FROM song s  JOIN files f ON s.f_id = f.f_id  WHERE f.formats LIKE '%mp4%' OR s.resolution > 720;
SELECT f_id  FROM song  WHERE formats LIKE '%mp4%' OR resolution > 720;
SELECT song_name  FROM song  WHERE f_id IN (SELECT f_id FROM files WHERE duration = 240)     OR languages = 'English';
SELECT song_name  FROM song  WHERE duration = 240 OR languages = 'English';
SELECT languages, COUNT(*) as language_count FROM song GROUP BY languages ORDER BY language_count DESC LIMIT 1;
SELECT languages, COUNT(*) AS language_count FROM song GROUP BY languages ORDER BY language_count DESC;
SELECT languages FROM song WHERE resolution > 500 GROUP BY languages ORDER BY COUNT(*) DESC LIMIT 1;
SELECT artist_name, languages FROM song WHERE resolution > 500 GROUP BY artist_name, languages HAVING COUNT(*) = (     SELECT MAX(song_count)     FROM (         SELECT artist_name, languages, COUNT(*) AS song_count         FROM song         WHERE resolution > 500         GROUP BY artist_name, languages     ) AS subquery )
SELECT artist_name  FROM artist  WHERE gender = 'Male' AND country = 'UK';
SELECT artist_name FROM artist WHERE country = 'UK' AND gender = 'male';
SELECT song_name  FROM song  WHERE genre_is = 'modern' OR languages = 'English';
SELECT song_name  FROM song  WHERE releasedate >= '2000-01-01' OR languages LIKE '%English%';
SELECT song_name  FROM song  JOIN files ON song.f_id = files.f_id  WHERE files.formats = 'mp3' AND song.resolution < 1000;
SELECT song_name  FROM song  WHERE f_id IN (SELECT f_id FROM files WHERE formats = 'mp3')  AND resolution < 1000;
SELECT DISTINCT artist_name  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE artist.country = 'UK' AND song.languages LIKE '%English%';
SELECT DISTINCT artist_name  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE artist.country = 'UK' AND song.languages LIKE '%English%';
SELECT AVG(rating) AS average_rating, AVG(resolution) AS average_resolution FROM song WHERE languages = 'Bangla';
SELECT AVG(rating) AS average_rating, AVG(resolution) AS average_resolution FROM song WHERE languages = 'Bangla';
SELECT MAX(resolution) AS max_resolution, MIN(resolution) AS min_resolution FROM song JOIN files ON song.f_id = files.f_id WHERE files.duration = 180;
SELECT MAX(resolution) AS max_resolution, MIN(resolution) AS min_resolution FROM song WHERE duration BETWEEN 170 AND 190;  -- Assuming duration is in seconds
SELECT languages, MAX(duration) AS max_duration, MAX(resolution) AS max_resolution FROM song GROUP BY languages ORDER BY languages;
SELECT languages, MAX(duration) AS max_duration, MAX(resolution) AS max_resolution FROM song GROUP BY languages ORDER BY languages;
SELECT g.g_name, MIN(s.duration) AS shortest_duration, MIN(s.rating) AS lowest_rating FROM genre g JOIN song s ON g.g_name = s.genre_is GROUP BY g.g_name ORDER BY g.g_name;
SELECT s.genre_is, s.song_name, s.rating, s.duration FROM song s JOIN (     SELECT genre_is, MIN(duration) AS min_duration, MAX(rating) AS max_rating     FROM song     GROUP BY genre_is ) AS subquery ON s.genre_is = subquery.genre_is AND s.duration = subquery.min_duration AND s.rating = subquery.max_rating ORDER BY s.genre_is;
SELECT a.artist_name, COUNT(s.song_name) AS number_of_works FROM artist a JOIN song s ON a.artist_name = s.artist_name WHERE s.languages LIKE '%English%' GROUP BY a.artist_name;
SELECT artist_name, COUNT(*) AS number_of_works FROM artist JOIN song ON artist.artist_name = song.artist_name WHERE song.languages LIKE '%English%' GROUP BY artist.artist_name;
SELECT DISTINCT artist_name, country  FROM artist  WHERE artist_name IN (     SELECT artist_name      FROM song      WHERE resolution > 900 );
SELECT DISTINCT artist_name, country  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE song.resolution > 900;
SELECT artist_name, COUNT(song_name) AS number_of_works FROM song GROUP BY artist_name ORDER BY number_of_works DESC LIMIT 3;
SELECT artist_name, COUNT(*) AS song_count FROM song GROUP BY artist_name ORDER BY song_count DESC LIMIT 3;
SELECT country  FROM artist  WHERE artist_name = (     SELECT artist_name      FROM song      GROUP BY artist_name      ORDER BY COUNT(*) ASC      LIMIT 1 );
SELECT country  FROM artist  WHERE artist_name = (     SELECT artist_name      FROM song      GROUP BY artist_name      ORDER BY COUNT(*) ASC      LIMIT 1 );
SELECT song_name  FROM song  WHERE rating < (SELECT MIN(rating) FROM song WHERE languages LIKE '%English%');
SELECT song_name  FROM song  WHERE rating < (SELECT MIN(rating) FROM song WHERE languages LIKE '%English%');
SELECT DISTINCT s.f_id FROM song s WHERE s.resolution > (SELECT MAX(s2.resolution)                       FROM song s2                       WHERE s2.rating < 8);
SELECT DISTINCT s1.f_id FROM song s1 WHERE s1.resolution > (     SELECT MAX(s2.resolution)     FROM song s2     WHERE s2.rating < 8 );
SELECT s.f_id  FROM song s  WHERE s.resolution > (SELECT AVG(s2.resolution)                         FROM song s2                         JOIN genre g ON s2.genre_is = g.g_name                         WHERE g.g_name = 'modern');
SELECT s.f_id  FROM song s  JOIN genre g ON s.genre_is = g.g_name  WHERE g.g_name = 'modern'  AND s.resolution > (SELECT AVG(resolution) FROM song WHERE genre_is = 'modern');
SELECT artist_name, COUNT(*) AS song_count FROM song WHERE languages = 'Bangla' GROUP BY artist_name ORDER BY song_count DESC LIMIT 3;
SELECT artist_name, COUNT(*) AS song_count FROM song WHERE languages = 'Bangla' GROUP BY artist_name ORDER BY song_count DESC LIMIT 3;
SELECT s.f_id, s.genre_is, s.artist_name  FROM song s  WHERE s.languages LIKE '%English%'  ORDER BY s.rating;
SELECT s.f_id, s.genre_is, s.artist_name FROM song s WHERE s.languages = 'English' ORDER BY s.rating ASC;
SELECT f.duration, f.file_size, f.formats FROM song s JOIN files f ON s.f_id = f.f_id WHERE s.genre_is = 'pop' ORDER BY s.song_name;
SELECT f.duration, f.file_size, f.formats FROM song s JOIN files f ON s.f_id = f.f_id JOIN genre g ON s.genre_is = g.g_name WHERE g.g_name = 'pop' ORDER BY s.song_name;
SELECT DISTINCT a.artist_name FROM artist a JOIN song s ON a.artist_name = s.artist_name WHERE s.languages LIKE '%English%' AND a.artist_name NOT IN (     SELECT artist_name     FROM song     WHERE rating > 8 );
SELECT DISTINCT artist_name  FROM song  WHERE languages LIKE '%English%'  AND rating <= 8;
SELECT DISTINCT artist_name  FROM artist  WHERE country = 'Bangladesh'  AND artist_name NOT IN (     SELECT artist_name      FROM song      WHERE rating > 7 );
SELECT DISTINCT artist_name  FROM artist  WHERE country = 'Bangladesh'  AND artist_name NOT IN (     SELECT artist_name      FROM song      WHERE rating > 7 );
SELECT c.name_full, c.college_id FROM college c JOIN player_college pc ON c.college_id = pc.college_id GROUP BY c.college_id, c.name_full ORDER BY COUNT(pc.player_id) DESC LIMIT 1;
SELECT c.name_full, c.college_id FROM player_college pc JOIN college c ON pc.college_id = c.college_id GROUP BY c.college_id, c.name_full ORDER BY COUNT(pc.player_id) DESC LIMIT 1;
SELECT AVG(salary) AS average_salary FROM salary s JOIN team t ON s.team_id = t.team_id AND s.league_id = t.league_id WHERE t.name = 'Boston Red Stockings';
SELECT AVG(s.salary) AS average_salary FROM salary s JOIN team t ON s.team_id = t.team_id AND s.year = t.year WHERE t.name = 'Boston Red Stockings';
SELECT p.name_first, p.name_last FROM all_star AS a JOIN player AS p ON a.player_id = p.player_id WHERE a.year = 1998;
SELECT p.name_first, p.name_last FROM all_star AS a JOIN player AS p ON a.player_id = p.player_id WHERE a.year = 1998;
SELECT p.name_first, p.name_last, p.player_id, COUNT(a.game_id) AS all_star_count FROM all_star a JOIN player p ON a.player_id = p.player_id GROUP BY p.player_id, p.name_first, p.name_last ORDER BY all_star_count DESC LIMIT 1;
SELECT p.name_first, p.name_last, p.player_id, COUNT(a.player_id) AS all_star_count FROM all_star a JOIN player p ON a.player_id = p.player_id GROUP BY p.player_id, p.name_first, p.name_last ORDER BY all_star_count DESC LIMIT 1;
SELECT yearid, COUNT(player_id) AS players_entered FROM hall_of_fame GROUP BY yearid ORDER BY yearid;
SELECT yearid, COUNT(player_id) AS hall_of_fame_count FROM hall_of_fame WHERE inducted = 'Y' GROUP BY yearid;
SELECT year, AVG(attendance) AS average_attendance FROM home_game GROUP BY year;
SELECT year, AVG(attendance) AS average_attendance FROM home_game GROUP BY year;
SELECT team_id, AVG(attendance) AS avg_attendance FROM home_game WHERE year = 2014 GROUP BY team_id ORDER BY avg_attendance DESC LIMIT 1;
SELECT team_id, AVG(attendance) AS avg_attendance FROM home_game WHERE year = 2014 GROUP BY team_id ORDER BY avg_attendance DESC LIMIT 1;
SELECT p.name_first, p.name_last, p.player_id FROM manager_award ma JOIN player p ON ma.player_id = p.player_id GROUP BY p.player_id, p.name_first, p.name_last ORDER BY COUNT(ma.award_id) DESC LIMIT 1;
SELECT p.name_first, p.name_last, p.player_id FROM manager_award ma JOIN player p ON ma.player_id = p.player_id GROUP BY ma.player_id ORDER BY COUNT(ma.award_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM park  WHERE state = 'NY';
SELECT COUNT(*) AS number_of_parks FROM park WHERE state = 'NY';
SELECT p.player_id, CONCAT(p.name_first, ' ', p.name_last) AS full_name, COUNT(pa.award_id) AS award_count FROM player p JOIN player_award pa ON p.player_id = pa.player_id GROUP BY p.player_id, p.name_first, p.name_last ORDER BY award_count DESC LIMIT 3;
SELECT p.name_first, p.name_last, p.player_id FROM player p JOIN (     SELECT player_id, COUNT(*) AS award_count     FROM player_award     GROUP BY player_id     ORDER BY award_count DESC     LIMIT 3 ) AS top_players ON p.player_id = top_players.player_id;
SELECT birth_country, COUNT(player_id) AS player_count FROM player GROUP BY birth_country ORDER BY player_count ASC LIMIT 3;
SELECT birth_country, COUNT(player_id) AS player_count FROM player GROUP BY birth_country ORDER BY player_count ASC LIMIT 3;
SELECT name_first, name_last  FROM player  WHERE death_year IS NULL AND death_month IS NULL AND death_day IS NULL;
SELECT name_first, name_last  FROM player  WHERE death_year IS NULL AND death_month IS NULL AND death_day IS NULL;
SELECT COUNT(*)  FROM player  WHERE birth_country = 'USA' AND bats = 'R';
SELECT COUNT(*)  FROM player  WHERE birth_country = 'USA' AND bats = 'R';
SELECT AVG(height) AS average_height FROM player JOIN player_college ON player.player_id = player_college.player_id JOIN college ON player_college.college_id = college.college_id WHERE college.name_full = 'Yale University';
SELECT AVG(height) AS average_height FROM player JOIN player_college ON player.player_id = player_college.player_id JOIN college ON player_college.college_id = college.college_id WHERE college.name_full = 'Yale University';
SELECT t.name AS team_name, s.team_id, MAX(s.salary) AS max_salary FROM salary s JOIN team t ON s.team_id = t.team_id AND s.year = t.year GROUP BY t.name, s.team_id;
SELECT t.name AS team_name, t.team_id, MAX(s.salary) AS max_salary FROM team t JOIN salary s ON t.year = s.year AND t.team_id = s.team_id AND t.league_id = s.league_id GROUP BY t.name, t.team_id;
SELECT t.name, t.team_id FROM team t JOIN (     SELECT team_id, AVG(salary) AS avg_salary     FROM salary     GROUP BY team_id ) AS avg_salaries ON t.team_id = avg_salaries.team_id ORDER BY avg_salaries.avg_salary ASC LIMIT 1;
SELECT team_id, AVG(salary) AS avg_salary FROM salary GROUP BY team_id ORDER BY avg_salary ASC LIMIT 1;
SELECT DISTINCT p.name_first, p.name_last FROM player p JOIN player_award pa1 ON p.player_id = pa1.player_id AND pa1.year = 1960 JOIN player_award pa2 ON p.player_id = pa2.player_id AND pa2.year = 1961;
SELECT DISTINCT p.name_first, p.name_last FROM player_award pa1 JOIN player_award pa2 ON pa1.player_id = pa2.player_id JOIN player p ON pa1.player_id = p.player_id WHERE pa1.year = 1960 AND pa2.year = 1961;
SELECT name_first, name_last  FROM player  WHERE weight > 220 OR height < 75;
SELECT name_first, name_last  FROM player  WHERE weight > 220 OR height < 75;
SELECT MAX(wins) AS max_score FROM postseason WHERE team_id_winner IN (SELECT team_id FROM team WHERE name = 'Boston Red Stockings');
SELECT MAX(t.w) AS max_wins FROM postseason p JOIN team t ON p.team_id_winner = t.team_id AND p.league_id_winner = t.league_id JOIN team_franchise tf ON t.franchise_id = tf.franchise_id WHERE tf.franchise_name = 'Boston Red Stockings';
SELECT losses  FROM postseason  WHERE year = 2009 AND team_id_loser = (SELECT team_id FROM team WHERE name = 'Boston Red Stockings');
SELECT COUNT(*)  FROM postseason  WHERE year = 2009 AND team_id_loser IN (SELECT team_id FROM team WHERE name = 'Boston Red Stockings');
SELECT team_id, COUNT(*) AS victories FROM postseason WHERE year = 2008 GROUP BY team_id ORDER BY victories DESC LIMIT 1;
SELECT t.name, t.team_id FROM postseason p JOIN team t ON p.team_id_winner = t.team_id AND p.league_id_winner = t.league_id WHERE p.year = 2008 GROUP BY t.name, t.team_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.year, COUNT(p.team_id_winner) AS wins FROM postseason p JOIN team t ON p.team_id_winner = t.team_id JOIN team_franchise tf ON t.franchise_id = tf.franchise_id WHERE tf.franchise_name = 'Boston Red Stockings' GROUP BY p.year;
SELECT p.year, COUNT(*) AS wins FROM postseason p JOIN team t ON p.team_id_winner = t.team_id WHERE t.name = 'Boston Red Stockings' GROUP BY p.year;
SELECT SUM(games) AS total_postseason_games FROM postseason WHERE team_id_winner IN (SELECT team_id FROM team_franchise WHERE franchise_name = 'Boston Red Stockings')    OR team_id_loser IN (SELECT team_id FROM team_franchise WHERE franchise_name = 'Boston Red Stockings');
SELECT SUM(wins + losses) AS total_postseason_games FROM postseason WHERE team_id_winner IN (SELECT team_id FROM team WHERE name = 'Boston Red Stockings')    OR team_id_loser IN (SELECT team_id FROM team WHERE name = 'Boston Red Stockings');
SELECT COUNT(*) AS ties_count FROM postseason WHERE year = 1885 AND ties = 1;
SELECT COUNT(*) AS tied_games FROM postseason WHERE year = 1885 AND ties = 1;
SELECT SUM(salary) AS total_salary FROM salary s JOIN team t ON s.team_id = t.team_id AND s.year = t.year WHERE t.name = 'Boston Red Stockings' AND s.year = 2010;
SELECT SUM(salary) AS total_salary_expenses FROM salary s JOIN team t ON s.team_id = t.team_id AND s.year = t.year JOIN team_franchise tf ON t.franchise_id = tf.franchise_id WHERE tf.franchise_name = 'Boston Red Stockings' AND s.year = 2010;
SELECT COUNT(DISTINCT player_id)  FROM appearances  WHERE team_id = (SELECT team_id FROM team WHERE year = 2000 AND team_id_br = 'BOS')  AND year = 2000;
SELECT COUNT(DISTINCT player_id)  FROM team  JOIN appearances ON team.team_id = appearances.team_id  WHERE team.name = 'Boston Red Stockings' AND appearances.year = 2000;
SELECT player_id, salary  FROM salary  WHERE year = 2001  ORDER BY salary DESC  LIMIT 3;
SELECT player_id, salary  FROM salary  WHERE year = 2001  ORDER BY salary DESC  LIMIT 3;
SELECT salary  FROM salary  WHERE year IN (2010, 2001);
SELECT player_id, salary  FROM salary  WHERE year IN (2010, 2001);
SELECT yearid, COUNT(*) AS num_inducted FROM hall_of_fame WHERE inducted = 'Y' GROUP BY yearid ORDER BY num_inducted ASC LIMIT 1;
SELECT yearid, COUNT(*) AS num_inducted FROM hall_of_fame WHERE inducted = 'Y' GROUP BY yearid ORDER BY num_inducted ASC LIMIT 1;
SELECT COUNT(*)  FROM park  WHERE city = 'Atlanta';
SELECT COUNT(*)  FROM park  WHERE city = 'Atlanta';
SELECT games  FROM home_game  WHERE park_id = (SELECT park_id FROM park WHERE park_name = 'Columbia Park')  AND year = 1907;
SELECT SUM(games) AS total_games FROM home_game JOIN park ON home_game.park_id = park.park_id WHERE park.park_name = 'Columbia Park' AND home_game.year = 1907;
SELECT SUM(games) AS total_games FROM home_game WHERE year = 2000 AND city = 'Atlanta';
SELECT SUM(games) AS total_games FROM home_game hg JOIN park p ON hg.park_id = p.park_id WHERE p.city = 'Atlanta' AND hg.year = 2000;
SELECT SUM(h.attendance) AS total_attendance FROM home_game h JOIN team t ON h.team_id = t.team_id AND h.league_id = t.league_id JOIN team_franchise tf ON t.franchise_id = tf.franchise_id WHERE tf.franchise_name = 'Boston Red Stockings' AND h.year BETWEEN 2000 AND 2010;
SELECT SUM(hg.games) AS total_games FROM home_game hg JOIN team t ON hg.team_id = t.team_id AND hg.league_id = t.league_id JOIN team_franchise tf ON t.franchise_id = tf.franchise_id WHERE tf.franchise_name = 'Boston Red Stockings' AND hg.year BETWEEN 2000 AND 2010;
SELECT SUM(salary) AS total_earnings FROM salary JOIN player ON salary.player_id = player.player_id WHERE player.name_first = 'Len' AND player.name_last = 'Barker'  AND salary.year BETWEEN 1985 AND 1990;
SELECT SUM(salary.salary) AS total_salary FROM salary JOIN player ON salary.player_id = player.player_id WHERE player.name_first = 'Len' AND player.name_last = 'Barker'  AND salary.year BETWEEN 1985 AND 1990;
SELECT p.name_first, p.name_last FROM player p JOIN salary s ON p.player_id = s.player_id WHERE s.team_id = (SELECT team_id FROM team WHERE name = 'Washington Nationals') AND s.year IN (2005, 2007) GROUP BY p.player_id HAVING COUNT(DISTINCT s.year) = 2;
SELECT p.name_first, p.name_last FROM salary s JOIN player p ON s.player_id = p.player_id WHERE s.team_id = (SELECT team_id FROM team_franchise WHERE franchise_name = 'Washington Nationals') AND s.year IN (2005, 2007) GROUP BY p.player_id HAVING COUNT(DISTINCT s.year) = 2;
SELECT SUM(games) AS total_home_games FROM home_game WHERE team_id = (SELECT team_id FROM team WHERE name = 'Boston Red Stockings') AND year BETWEEN 1990 AND 2000;
SELECT SUM(games) AS total_games FROM home_game WHERE team_id = (SELECT team_id FROM team WHERE name = 'Boston Red Stockings') AND year BETWEEN 1990 AND 2000;
SELECT team_id, SUM(attendance) AS total_attendance FROM home_game WHERE year = 1980 GROUP BY team_id ORDER BY total_attendance ASC LIMIT 1;
SELECT team_id, SUM(games) AS total_home_games FROM home_game WHERE year = 1980 GROUP BY team_id ORDER BY total_home_games ASC LIMIT 1;
SELECT state FROM park GROUP BY state HAVING COUNT(park_id) > 2;
SELECT state, COUNT(*) AS park_count FROM park GROUP BY state HAVING COUNT(*) > 2;
SELECT COUNT(*) FROM team_franchise WHERE active = 'Y';
SELECT COUNT(*)  FROM team_franchise  WHERE active = 'Y';
SELECT city FROM park GROUP BY city HAVING COUNT(park_id) BETWEEN 2 AND 4;
SELECT city FROM park GROUP BY city HAVING COUNT(park_id) BETWEEN 2 AND 4;
SELECT park.park_name, SUM(home_game.attendance) AS total_attendance FROM home_game JOIN park ON home_game.park_id = park.park_id WHERE home_game.year = 2008 GROUP BY park.park_name ORDER BY total_attendance DESC LIMIT 1;
SELECT park_name, MAX(attendance) AS max_attendance FROM home_game JOIN park ON home_game.park_id = park.park_id WHERE year = 2008 GROUP BY park_name ORDER BY max_attendance DESC LIMIT 1;
SELECT COUNT(*) FROM camera_lens WHERE focal_length_mm > 15;
SELECT brand, name  FROM camera_lens  ORDER BY max_aperture DESC;
SELECT id, color, name FROM photos;
SELECT MAX(Height) AS max_height, AVG(Height) AS avg_height FROM mountain;
SELECT AVG(Prominence) AS average_prominence FROM mountain WHERE Country = 'Morocco';
SELECT name, Height, Prominence  FROM mountain  WHERE Range <> 'Aberdare Range';
SELECT p.id, p.name  FROM photos p  JOIN mountain m ON p.mountain_id = m.id;
SELECT m.id, m.name FROM mountain m JOIN photos p ON m.id = p.mountain_id GROUP BY m.id, m.name HAVING COUNT(p.id) >= 2;
SELECT cl.name FROM camera_lens cl JOIN photos p ON cl.id = p.camera_lens_id GROUP BY cl.id ORDER BY COUNT(DISTINCT p.mountain_id) DESC LIMIT 1;
SELECT p.name  FROM photos p  JOIN camera_lens cl ON p.camera_lens_id = cl.id  WHERE cl.brand IN ('Sigma', 'Olympus');
SELECT COUNT(DISTINCT brand) AS different_lens_brands FROM camera_lens;
SELECT COUNT(*)  FROM camera_lens  WHERE id NOT IN (SELECT DISTINCT camera_lens_id FROM photos);
SELECT COUNT(DISTINCT cl.id)  FROM camera_lens cl JOIN photos p ON cl.id = p.camera_lens_id JOIN mountain m ON p.mountain_id = m.id WHERE m.Country = 'Ethiopia';
SELECT DISTINCT cl.brand FROM camera_lens cl JOIN photos p ON cl.id = p.camera_lens_id JOIN mountain m ON p.mountain_id = m.id WHERE m.Range IN ('Toubkal Atlas', 'Lasta Massif') GROUP BY cl.brand HAVING COUNT(DISTINCT m.Range) = 2;
SELECT m.name, m.Prominence FROM mountain m WHERE m.id NOT IN (     SELECT p.mountain_id     FROM photos p     JOIN camera_lens cl ON p.camera_lens_id = cl.id     WHERE cl.brand = 'Sigma' );
SELECT name FROM camera_lens WHERE name LIKE '%Digital%';
SELECT cl.name, COUNT(p.id) AS photo_count FROM camera_lens cl LEFT JOIN photos p ON cl.id = p.camera_lens_id GROUP BY cl.name ORDER BY photo_count;
SELECT Name  FROM channel  WHERE Owner <> 'CCTV';
SELECT Name  FROM channel  WHERE Owner <> 'CCTV';
SELECT Name FROM channel ORDER BY Rating_in_percent DESC;
SELECT Name FROM channel ORDER BY Rating_in_percent DESC;
SELECT Owner  FROM channel  WHERE Rating_in_percent = (SELECT MAX(Rating_in_percent) FROM channel);
SELECT Owner  FROM channel  WHERE Rating_in_percent = (SELECT MAX(Rating_in_percent) FROM channel);
SELECT COUNT(*) AS Program_Count FROM program;
SELECT COUNT(*) AS Number_of_Programs FROM program;
SELECT Name FROM program ORDER BY Launch;
SELECT Name FROM program ORDER BY Launch;
SELECT Name, Origin, Owner FROM program;
SELECT Name, Origin, Owner FROM program;
SELECT Name  FROM program  ORDER BY Launch DESC  LIMIT 1;
SELECT Name  FROM program  ORDER BY Launch DESC  LIMIT 1;
SELECT SUM(c.Share_in_percent) AS Total_Share FROM channel c WHERE c.Owner = 'CCTV';
SELECT SUM(Share_in_percent) AS Total_Share FROM channel WHERE Owner = 'CCTV';
SELECT DISTINCT c.Name FROM channel c JOIN broadcast b ON c.Channel_ID = b.Channel_ID WHERE b.Time_of_day = 'morning';
SELECT DISTINCT c.Name FROM channel c JOIN broadcast b ON c.Channel_ID = b.Channel_ID WHERE b.Time_of_day = 'morning';
SELECT c.Name FROM channel c JOIN broadcast b ON c.Channel_ID = b.Channel_ID WHERE b.Time_of_day IN ('morning', 'night') GROUP BY c.Name HAVING COUNT(DISTINCT b.Time_of_day) = 2;
SELECT DISTINCT c.Name FROM channel c JOIN broadcast b ON c.Channel_ID = b.Channel_ID WHERE b.Time_of_day IN ('morning', 'night') GROUP BY c.Channel_ID HAVING COUNT(DISTINCT b.Time_of_day) = 2;
SELECT Time_of_day, COUNT(DISTINCT Program_ID) AS Program_Count FROM broadcast GROUP BY Time_of_day;
SELECT Time_of_day, COUNT(DISTINCT Program_ID) AS Program_Count FROM broadcast GROUP BY Time_of_day;
SELECT COUNT(DISTINCT Program_ID) AS Number_of_Programs FROM broadcast WHERE Time_of_day = 'Night';
SELECT COUNT(DISTINCT Program_ID)  FROM broadcast  WHERE Time_of_day = 'Night';
SELECT p.Name FROM program p WHERE p.Program_ID NOT IN (     SELECT b.Program_ID     FROM broadcast b     WHERE b.Time_of_day = 'morning' );
SELECT p.Name FROM program p WHERE p.Program_ID NOT IN (     SELECT b.Program_ID     FROM broadcast b     WHERE b.Time_of_day = 'morning' );
SELECT DISTINCT p.Owner FROM program p JOIN broadcast b ON p.Program_ID = b.Program_ID WHERE b.Time_of_day IN ('morning', 'night') GROUP BY p.Owner HAVING COUNT(DISTINCT b.Time_of_day) = 2;
SELECT DISTINCT p.Owner FROM program p JOIN broadcast b ON p.Program_ID = b.Program_ID WHERE b.Time_of_day IN ('morning', 'night') GROUP BY p.Owner HAVING COUNT(DISTINCT b.Time_of_day) = 2;
SELECT DISTINCT Origin FROM program ORDER BY Origin;
SELECT DISTINCT Origin FROM program ORDER BY Origin;
SELECT COUNT(DISTINCT Owner) AS Number_of_Different_Channel_Owners FROM channel;
SELECT COUNT(DISTINCT Owner) AS Distinct_Channel_Owners FROM channel;
SELECT Name  FROM program  WHERE Origin <> 'Beijing';
SELECT Name  FROM program  WHERE Origin <> 'Beijing';
SELECT Name  FROM channel  WHERE Owner IN ('CCTV', 'HBS');
SELECT Name  FROM channel  WHERE Owner IN ('CCTV', 'HBS');
SELECT c.Owner, SUM(c.Rating_in_percent) AS Total_Rating_Ratio FROM channel c GROUP BY c.Owner;
SELECT Owner, SUM(Rating_in_percent) AS Total_Rating FROM channel GROUP BY Owner;
SELECT p.Name FROM program p JOIN broadcast b ON p.Program_ID = b.Program_ID GROUP BY p.Program_ID, p.Name ORDER BY COUNT(b.Channel_ID) DESC LIMIT 1;
SELECT p.Name FROM program p JOIN broadcast b ON p.Program_ID = b.Program_ID GROUP BY p.Program_ID, p.Name ORDER BY COUNT(b.Channel_ID) DESC LIMIT 1;
SELECT COUNT(*) AS total_courses FROM Courses;
SELECT COUNT(*) AS total_courses FROM Courses;
SELECT course_description  FROM Courses  WHERE course_name = 'database';
SELECT course_description  FROM Courses  WHERE course_name = 'database';
SELECT address_line_1  FROM Course_Authors_and_Tutors  WHERE personal_name = 'Cathrine';
SELECT address_line_1  FROM Course_Authors_and_Tutors  WHERE personal_name = 'Cathrine';
SELECT address_line_1 FROM Course_Authors_and_Tutors;
SELECT personal_name, middle_name, family_name, address_line_1  FROM Course_Authors_and_Tutors;
SELECT login_name, family_name FROM Course_Authors_and_Tutors;
SELECT login_name, family_name FROM Course_Authors_and_Tutors;
SELECT date_of_enrolment, date_of_completion  FROM Student_Course_Enrolment;
SELECT date_of_enrolment, date_of_completion  FROM Student_Course_Enrolment;
SELECT COUNT(DISTINCT student_id) AS distinct_students_enrolled FROM Student_Course_Enrolment;
SELECT COUNT(DISTINCT student_id) AS distinct_students_enrolled FROM Student_Course_Enrolment;
SELECT COUNT(DISTINCT course_id) AS distinct_courses_enrolled FROM Student_Course_Enrolment;
SELECT COUNT(DISTINCT course_id) AS distinct_courses FROM Student_Course_Enrolment;
SELECT date_test_taken  FROM Student_Tests_Taken  WHERE test_result = 'Pass';
SELECT date_test_taken  FROM Student_Tests_Taken  WHERE test_result = 'Pass';
SELECT COUNT(*) AS fail_count  FROM Student_Tests_Taken  WHERE test_result = 'Fail';
SELECT COUNT(*) AS fail_count FROM Student_Tests_Taken WHERE test_result = 'Fail';
SELECT login_name FROM Students WHERE family_name = 'Ward';
SELECT login_name  FROM Students  WHERE family_name = 'Ward';
SELECT date_of_latest_logon  FROM Students  WHERE family_name IN ('Jaskolski', 'Langosh');
SELECT date_of_latest_logon  FROM Students  WHERE family_name IN ('Jaskolski', 'Langosh');
SELECT COUNT(*)  FROM Students  WHERE personal_name LIKE '%son%';
SELECT COUNT(*) AS number_of_students FROM Students WHERE personal_name LIKE '%son%';
SELECT subject_name FROM Subjects;
SELECT subject_name FROM Subjects;
SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name;
SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name;
SELECT personal_name, family_name  FROM Students  ORDER BY family_name;
SELECT personal_name, family_name  FROM Students  ORDER BY family_name;
SELECT test_result, COUNT(*) AS result_count FROM Student_Tests_Taken GROUP BY test_result ORDER BY result_count DESC;
SELECT test_result, COUNT(DISTINCT student_id) AS number_of_students FROM Student_Tests_Taken GROUP BY test_result;
SELECT cat.login_name  FROM Course_Authors_and_Tutors cat JOIN Courses c ON cat.author_id = c.author_id WHERE c.course_name = 'advanced database';
SELECT ca.login_name  FROM Course_Authors_and_Tutors ca JOIN Courses c ON ca.author_id = c.author_id WHERE c.course_name = 'advanced database';
SELECT cat.address_line_1 FROM Course_Authors_and_Tutors cat JOIN Courses c ON cat.author_id = c.author_id WHERE c.course_name IN ('operating system', 'data structure');
SELECT DISTINCT cat.address_line_1 FROM Course_Authors_and_Tutors cat JOIN Courses c ON cat.author_id = c.author_id JOIN Subjects s ON c.subject_id = s.subject_id WHERE s.subject_name IN ('operating system', 'data structure');
SELECT ca.personal_name, ca.family_name, ca.author_id FROM Course_Authors_and_Tutors ca JOIN Courses c ON ca.author_id = c.author_id GROUP BY ca.author_id, ca.personal_name, ca.family_name ORDER BY COUNT(c.course_id) DESC LIMIT 1;
SELECT ca.personal_name, ca.family_name, ca.author_id FROM Course_Authors_and_Tutors ca JOIN Courses c ON ca.author_id = c.author_id GROUP BY ca.author_id, ca.personal_name, ca.family_name ORDER BY COUNT(c.course_id) DESC LIMIT 1;
SELECT cat.address_line_1, cat.author_id FROM Course_Authors_and_Tutors cat JOIN Courses c ON cat.author_id = c.author_id GROUP BY cat.author_id, cat.address_line_1 HAVING COUNT(c.course_id) >= 2;
SELECT cat.author_id, cat.address_line_1 FROM Course_Authors_and_Tutors cat JOIN Courses c ON cat.author_id = c.author_id GROUP BY cat.author_id, cat.address_line_1 HAVING COUNT(c.course_id) >= 2;
SELECT c.course_name FROM Courses c JOIN Course_Authors_and_Tutors a ON c.author_id = a.author_id WHERE a.personal_name = 'Julio';
SELECT c.course_name  FROM Courses c  JOIN Course_Authors_and_Tutors a ON c.author_id = a.author_id  WHERE a.personal_name = 'Julio';
SELECT c.course_name, c.course_description FROM Courses c JOIN Subjects s ON c.subject_id = s.subject_id WHERE s.subject_name = 'Computer Science';
SELECT course_name, course_description  FROM Courses  WHERE subject_id = (SELECT subject_id FROM Subjects WHERE subject_name = 'Computer Science');
SELECT s.subject_id, s.subject_name, COUNT(c.course_id) AS number_of_courses FROM Subjects s LEFT JOIN Courses c ON s.subject_id = c.subject_id GROUP BY s.subject_id, s.subject_name;
SELECT s.subject_id, s.subject_name, COUNT(c.course_id) AS number_of_courses FROM Subjects s LEFT JOIN Courses c ON s.subject_id = c.subject_id GROUP BY s.subject_id, s.subject_name;
SELECT s.subject_id, s.subject_name, COUNT(c.course_id) AS course_count FROM Subjects s LEFT JOIN Courses c ON s.subject_id = c.subject_id GROUP BY s.subject_id, s.subject_name ORDER BY course_count ASC;
SELECT s.subject_id, s.subject_name, COUNT(c.course_id) AS course_count FROM Subjects s LEFT JOIN Courses c ON s.subject_id = c.subject_id GROUP BY s.subject_id, s.subject_name ORDER BY course_count ASC;
SELECT date_of_enrolment  FROM Student_Course_Enrolment  JOIN Courses ON Student_Course_Enrolment.course_id = Courses.course_id  WHERE Courses.course_name = 'Spanish';
SELECT sce.date_of_enrolment FROM Courses c JOIN Student_Course_Enrolment sce ON c.course_id = sce.course_id JOIN Subjects s ON c.subject_id = s.subject_id WHERE s.subject_name = 'Spanish';
SELECT c.course_name FROM Courses c JOIN Student_Course_Enrolment e ON c.course_id = e.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(e.student_id) DESC LIMIT 1;
SELECT c.course_name FROM Courses c JOIN Student_Course_Enrolment sce ON c.course_id = sce.course_id GROUP BY c.course_name ORDER BY COUNT(sce.student_id) DESC LIMIT 1;
SELECT c.course_name FROM Courses c JOIN Student_Course_Enrolment e ON c.course_id = e.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(e.student_id) = 1;
SELECT c.course_name FROM Courses c JOIN Student_Course_Enrolment e ON c.course_id = e.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(e.student_id) = 1;
SELECT c.course_name, c.course_description FROM Courses c JOIN Student_Course_Enrolment e ON c.course_id = e.course_id GROUP BY c.course_id, c.course_name, c.course_description HAVING COUNT(e.student_id) > 2;
SELECT c.course_name, c.course_description FROM Courses c JOIN Student_Course_Enrolment e ON c.course_id = e.course_id GROUP BY c.course_id, c.course_name, c.course_description HAVING COUNT(e.student_id) > 2;
SELECT c.course_name, COUNT(sce.registration_id) AS number_of_enrollments FROM Courses c LEFT JOIN Student_Course_Enrolment sce ON c.course_id = sce.course_id GROUP BY c.course_name;
SELECT c.course_name, COUNT(sce.student_id) AS number_of_enrolled_students FROM Courses c LEFT JOIN Student_Course_Enrolment sce ON c.course_id = sce.course_id GROUP BY c.course_name;
SELECT sct.date_of_enrolment FROM Student_Course_Enrolment sct JOIN Student_Tests_Taken stt ON sct.registration_id = stt.registration_id WHERE stt.test_result = 'Pass';
SELECT sce.date_of_enrolment FROM Student_Course_Enrolment sce JOIN Student_Tests_Taken st ON sce.registration_id = st.registration_id WHERE st.test_result = 'Pass';
SELECT sct.date_of_completion FROM Student_Course_Enrolment sct JOIN Student_Tests_Taken stt ON sct.registration_id = stt.registration_id WHERE stt.test_result = 'Fail';
SELECT scte.date_of_completion FROM Student_Course_Enrolment scte JOIN Student_Tests_Taken stt ON scte.registration_id = stt.registration_id WHERE stt.test_result = 'Fail';
SELECT sce.date_of_enrolment, sce.date_of_completion FROM Students s JOIN Student_Course_Enrolment sce ON s.student_id = sce.student_id WHERE s.personal_name = 'Karson';
SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment JOIN Students ON Student_Course_Enrolment.student_id = Students.student_id WHERE Students.personal_name = 'Karson';
SELECT date_of_enrolment, date_of_completion  FROM Student_Course_Enrolment  WHERE student_id = (SELECT student_id                       FROM Students                       WHERE family_name = 'Zieme' AND personal_name = 'Bernie');
SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment JOIN Students ON Student_Course_Enrolment.student_id = Students.student_id WHERE Students.family_name = 'Zieme' AND Students.personal_name = 'Bernie';
SELECT student_id, login_name FROM Students WHERE student_id = (     SELECT student_id     FROM Student_Course_Enrolment     GROUP BY student_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT student_id, login_name FROM Students WHERE student_id IN (     SELECT student_id     FROM Student_Course_Enrolment     GROUP BY student_id     ORDER BY COUNT(course_id) DESC     LIMIT 1 );
SELECT student_id, personal_name FROM Students WHERE student_id IN (     SELECT student_id     FROM Student_Course_Enrolment     GROUP BY student_id     HAVING COUNT(registration_id) >= 2 );
SELECT student_id, personal_name FROM Students WHERE student_id IN (     SELECT student_id     FROM Student_Course_Enrolment     GROUP BY student_id     HAVING COUNT(course_id) >= 2 );
SELECT s.student_id, s.middle_name FROM Students s JOIN Student_Course_Enrolment e ON s.student_id = e.student_id GROUP BY s.student_id, s.middle_name HAVING COUNT(e.registration_id) <= 2;
SELECT s.student_id, s.middle_name FROM Students s JOIN Student_Course_Enrolment e ON s.student_id = e.student_id GROUP BY s.student_id, s.middle_name HAVING COUNT(e.course_id) <= 2;
SELECT personal_name  FROM Students  WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment);
SELECT personal_name  FROM Students  WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment);
SELECT COUNT(*) AS students_without_enrollment FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment);
SELECT COUNT(*) AS students_not_enrolled FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment);
SELECT DISTINCT ca.login_name FROM Course_Authors_and_Tutors ca JOIN Students s ON ca.login_name = s.login_name;
SELECT DISTINCT ca.login_name FROM Course_Authors_and_Tutors ca JOIN Students s ON ca.login_name = s.login_name;
SELECT DISTINCT ca.personal_name FROM Course_Authors_and_Tutors ca JOIN Students s ON ca.personal_name = s.personal_name;
SELECT DISTINCT ca.personal_name FROM Course_Authors_and_Tutors ca JOIN Students s ON ca.personal_name = s.personal_name;
SELECT c.Date_Claim_Made, c.Claim_ID FROM Claims c LEFT JOIN Settlements s ON c.Claim_ID = s.Claim_ID GROUP BY c.Claim_ID, c.Date_Claim_Made HAVING COUNT(s.Settlement_ID) > 2 OR c.Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claims);
SELECT c.Claim_ID, c.Date_Claim_Made FROM Claims c LEFT JOIN Settlements s ON c.Claim_ID = s.Claim_ID GROUP BY c.Claim_ID, c.Date_Claim_Made HAVING COUNT(s.Settlement_ID) > 2 OR c.Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claims);
SELECT c.Customer_ID, c.Customer_Details FROM Customers c JOIN Customer_Policies cp ON c.Customer_ID = cp.Customer_ID LEFT JOIN Claims cl ON cp.Policy_ID = cl.Policy_ID GROUP BY c.Customer_ID, c.Customer_Details HAVING COUNT(cp.Policy_ID) >= 2 AND COUNT(cl.Claim_ID) = 0;
SELECT c.Customer_ID, c.Customer_Details FROM Customers c JOIN Customer_Policies cp ON c.Customer_ID = cp.Customer_ID LEFT JOIN Claims cl ON cp.Policy_ID = cl.Policy_ID GROUP BY c.Customer_ID, c.Customer_Details HAVING COUNT(cp.Policy_ID) >= 2 AND COUNT(cl.Claim_ID) = 0;
SELECT Payment_Method_Code, Date_Payment_Made, Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC;
SELECT Payment_Method_Code, Date_Payment_Made, Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC;
SELECT Amount_Claimed, Amount_Settled FROM Claims WHERE Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claims);
SELECT c.Amount_Claimed, s.Amount_Settled FROM Claims c JOIN Settlements s ON c.Claim_ID = s.Claim_ID WHERE c.Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claims);
SELECT Amount_Claimed, Amount_Settled FROM Claims WHERE Amount_Settled = (SELECT MIN(Amount_Settled) FROM Claims);
SELECT c.Amount_Claimed, c.Amount_Settled FROM Claims c WHERE c.Amount_Settled = (SELECT MIN(Amount_Settled) FROM Claims);
SELECT Date_Claim_Made, Date_Claim_Settled FROM Claims WHERE Amount_Claimed > (SELECT AVG(Amount_Claimed) FROM Claims);
SELECT Date_Claim_Made, Date_Claim_Settled FROM Claims WHERE Amount_Claimed > (SELECT AVG(Amount_Claimed) FROM Claims);
SELECT c.Date_Claim_Made FROM Claims c JOIN Settlements s ON c.Claim_ID = s.Claim_ID WHERE s.Amount_Claimed <= (SELECT AVG(Amount_Claimed) FROM Claims);
SELECT c.Date_Claim_Made FROM Claims c WHERE c.Amount_Claimed <= (SELECT AVG(Amount_Claimed) FROM Claims);
SELECT Claim_ID, COUNT(Settlement_ID) AS Number_of_Settlements FROM Settlements GROUP BY Claim_ID;
SELECT Claim_ID, COUNT(Settlement_ID) AS Number_of_Settlements FROM Settlements GROUP BY Claim_ID;
SELECT      c.Claim_ID,      c.Date_Claim_Made,      COUNT(s.Settlement_ID) AS Number_of_Settlements FROM      Claims c JOIN      Settlements s ON c.Claim_ID = s.Claim_ID GROUP BY      c.Claim_ID, c.Date_Claim_Made ORDER BY      Number_of_Settlements DESC LIMIT 1;
SELECT Claim_ID, Date_Claim_Made, COUNT(Settlement_ID) AS Settlement_Count FROM Claims JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID GROUP BY Claim_ID, Date_Claim_Made ORDER BY Settlement_Count DESC LIMIT 1;
SELECT COUNT(*) AS Settlement_Count, Claim_ID FROM Settlements WHERE Claim_ID = (     SELECT Claim_ID     FROM Claims     ORDER BY Date_Claim_Settled DESC     LIMIT 1 ) GROUP BY Claim_ID;
SELECT Claim_ID, COUNT(Settlement_ID) AS Number_of_Settlements FROM Settlements WHERE Date_Claim_Settled = (     SELECT MAX(Date_Claim_Settled)     FROM Settlements ) GROUP BY Claim_ID;
SELECT MIN(Date_Claim_Made) AS Earliest_Claim_Date FROM Claims;
SELECT MIN(Date_Claim_Made) AS First_Claim_Date FROM Claims;
SELECT SUM(Amount_Settled) AS Total_Amount_Settled FROM Settlements;
SELECT SUM(Amount_Settled) AS Total_Amount_Settled FROM Settlements;
SELECT c.Customer_ID, c.Customer_Details FROM Customers c JOIN Customer_Policies cp ON c.Customer_ID = cp.Customer_ID GROUP BY c.Customer_ID, c.Customer_Details HAVING COUNT(cp.Policy_ID) > 1;
SELECT c.Customer_ID, c.Customer_Details FROM Customers c JOIN Customer_Policies cp ON c.Customer_ID = cp.Customer_ID GROUP BY c.Customer_ID, c.Customer_Details HAVING COUNT(cp.Policy_ID) > 1;
SELECT Date_Claim_Made, Date_Claim_Settled FROM Settlements;
SELECT s.Date_Claim_Made, s.Date_Claim_Settled FROM Settlements s;
SELECT Payment_Method_Code, COUNT(*) AS Payment_Count FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Count DESC LIMIT 1;
SELECT Payment_Method_Code, COUNT(*) AS Payment_Count FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Count DESC LIMIT 1;
SELECT Payment_Method_Code, COUNT(Payment_ID) AS Payment_Count FROM Payments GROUP BY Payment_Method_Code ORDER BY Payment_Count ASC LIMIT 1;
SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT SUM(Amount_Payment) AS Total_Amount_Payment FROM Payments;
SELECT SUM(Amount_Payment) AS Total_Amount_Payment FROM Payments;
SELECT DISTINCT Customer_Details FROM Customers;
SELECT DISTINCT Customer_Details FROM Customers;
SELECT Policy_Type_Code, COUNT(DISTINCT Customer_ID) AS Customer_Count FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY Customer_Count DESC LIMIT 1;
SELECT Policy_Type_Code, COUNT(DISTINCT Customer_ID) AS Customer_Count FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY Customer_Count DESC LIMIT 1;
SELECT COUNT(*) AS Total_Settlements FROM Settlements;
SELECT COUNT(*) AS Total_Settlements FROM Settlements;
SELECT p.Payment_ID, p.Date_Payment_Made, p.Amount_Payment FROM Payments p JOIN Settlements s ON p.Settlement_ID = s.Settlement_ID WHERE p.Payment_Method_Code = 'Visa';
SELECT Payment_ID, Date_Payment_Made, Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa';
SELECT *  FROM Customers  WHERE Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM Customer_Policies);
SELECT *  FROM Customers  WHERE Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM Customer_Policies);
SELECT c.Date_Claim_Made, c.Date_Claim_Settled, c.Amount_Settled FROM Claims c JOIN Settlements s ON c.Claim_ID = s.Claim_ID GROUP BY c.Claim_ID HAVING COUNT(s.Settlement_ID) = 1;
SELECT c.Date_Claim_Made, c.Date_Claim_Settled, c.Amount_Settled FROM Claims c JOIN Settlements s ON c.Claim_ID = s.Claim_ID GROUP BY c.Claim_ID HAVING COUNT(s.Settlement_ID) = 1;
SELECT SUM(Amount_Claimed) AS Total_Claimed_Amount FROM Claims;
SELECT SUM(Amount_Claimed) AS Total_Amount_Claimed FROM Claims;
SELECT d.Name, COUNT(p.EmployeeID) AS EmployeeCount FROM Department d LEFT JOIN Affiliated_With aw ON d.DepartmentID = aw.Department LEFT JOIN Physician p ON aw.Physician = p.EmployeeID GROUP BY d.Name ORDER BY EmployeeCount DESC LIMIT 1;
SELECT DepartmentID, COUNT(EmployeeID) AS EmployeeCount FROM (     SELECT DepartmentID, EmployeeID FROM Physician     UNION ALL     SELECT DepartmentID, EmployeeID FROM Nurse ) AS Employees GROUP BY DepartmentID ORDER BY EmployeeCount DESC LIMIT 1;
SELECT d.Head FROM Department d JOIN Affiliated_With aw ON d.DepartmentID = aw.Department GROUP BY d.DepartmentID ORDER BY COUNT(aw.Physician) ASC LIMIT 1;
SELECT d.Head FROM Department d JOIN Affiliated_With aw ON d.DepartmentID = aw.Department GROUP BY d.DepartmentID ORDER BY COUNT(aw.Physician) ASC LIMIT 1;
SELECT d.Name, p.Position FROM Department d JOIN Affiliated_With aw ON d.DepartmentID = aw.Department JOIN Physician p ON d.Head = p.EmployeeID GROUP BY d.DepartmentID ORDER BY COUNT(aw.Physician) ASC LIMIT 1;
SELECT n.Name, n.Position FROM Department d JOIN Affiliated_With aw ON d.DepartmentID = aw.Department JOIN Physician p ON aw.Physician = p.EmployeeID JOIN Nurse n ON d.Head = n.SSN WHERE d.DepartmentID = (     SELECT DepartmentID     FROM (         SELECT aw.Department, COUNT(*) AS EmployeeCount         FROM Affiliated_With aw         GROUP BY aw.Department     ) AS DeptCounts     ORDER BY EmployeeCount ASC     LIMIT 1 );
SELECT DISTINCT Patient.Name FROM Patient JOIN Appointment ON Patient.SSN = Appointment.Patient;
SELECT DISTINCT Patient.Name FROM Patient JOIN Appointment ON Patient.SSN = Appointment.Patient;
SELECT p.Name, p.Phone FROM Patient p JOIN Appointment a ON p.SSN = a.Patient GROUP BY p.SSN, p.Name, p.Phone HAVING COUNT(a.AppointmentID) > 1;
SELECT p.Name, p.Phone FROM Patient p JOIN Appointment a ON p.SSN = a.Patient GROUP BY p.SSN, p.Name, p.Phone HAVING COUNT(a.AppointmentID) > 1;
SELECT AppointmentID  FROM Appointment  ORDER BY Start DESC  LIMIT 1;
SELECT AppointmentID  FROM Appointment  ORDER BY Start DESC  LIMIT 1;
SELECT DISTINCT p.Name FROM Physician p JOIN Appointment a ON p.EmployeeID = a.Physician;
SELECT DISTINCT p.Name FROM Physician p JOIN Appointment a ON p.EmployeeID = a.Physician;
SELECT Name  FROM Physician  WHERE EmployeeID NOT IN (SELECT Physician FROM Appointment);
SELECT Name  FROM Physician  WHERE EmployeeID NOT IN (SELECT Physician FROM Appointment);
SELECT p.Name AS PhysicianName, d.Name AS DepartmentName FROM Physician p JOIN Affiliated_With aw ON p.EmployeeID = aw.Physician JOIN Department d ON aw.Department = d.DepartmentID WHERE aw.PrimaryAffiliation = 1;
SELECT p.Name AS PhysicianName, d.Name AS DepartmentName FROM Physician p JOIN Affiliated_With aw ON p.EmployeeID = aw.Physician JOIN Department d ON aw.Department = d.DepartmentID WHERE aw.PrimaryAffiliation = 1;
SELECT p.Name FROM Patient p JOIN Appointment a ON p.SSN = a.Patient ORDER BY a.Start DESC LIMIT 1;
SELECT Name  FROM Patient  WHERE SSN = (SELECT Patient               FROM Appointment               ORDER BY Start DESC               LIMIT 1);
SELECT COUNT(*) AS NumberOfPatients FROM Stay WHERE Room = '112';
SELECT COUNT(DISTINCT Patient) AS NumberOfPatients FROM Stay WHERE Room = '112';
SELECT COUNT(DISTINCT Prescribes.Patient) AS PatientCount FROM Prescribes JOIN Physician ON Prescribes.Physician = Physician.EmployeeID WHERE Physician.Name = 'John Dorian';
SELECT COUNT(*) AS PrescriptionCount FROM Prescribes WHERE Physician = (SELECT EmployeeID FROM Physician WHERE Name = 'John Dorian');
SELECT DISTINCT m.Name FROM Medication m JOIN Prescribes p ON m.Code = p.Medication JOIN Patient pt ON p.Patient = pt.SSN JOIN Stay s ON pt.SSN = s.Patient WHERE s.Room = 111;
SELECT m.Name  FROM Medication m JOIN Prescribes p ON m.Code = p.Medication JOIN Stay s ON p.Patient = s.Patient WHERE s.Room = 111;
SELECT Patient FROM Stay WHERE Room = 111 ORDER BY StayEnd DESC LIMIT 1;
SELECT Patient  FROM Stay  WHERE Room = 111  ORDER BY StayEnd DESC  LIMIT 1;
SELECT Nurse.Name FROM Nurse JOIN Appointment ON Nurse.EmployeeID = Appointment.PrepNurse GROUP BY Nurse.Name ORDER BY COUNT(Appointment.AppointmentID) DESC LIMIT 1;
SELECT Nurse.Name FROM Nurse JOIN Appointment ON Nurse.EmployeeID = Appointment.PrepNurse GROUP BY Nurse.Name ORDER BY COUNT(Appointment.AppointmentID) DESC LIMIT 1;
SELECT p.Name, COUNT(DISTINCT pr.Patient) AS NumberOfPatients FROM Physician p LEFT JOIN Prescribes pr ON p.EmployeeID = pr.Physician GROUP BY p.Name;
SELECT p.Name, COUNT(DISTINCT pr.Patient) AS NumberOfPatients FROM Physician p JOIN Prescribes pr ON p.EmployeeID = pr.Physician GROUP BY p.Name;
SELECT p.Name FROM Physician p JOIN Prescribes pr ON p.EmployeeID = pr.Physician GROUP BY p.Name HAVING COUNT(DISTINCT pr.Patient) > 1;
SELECT p.Name FROM Prescribes pr JOIN Physician p ON pr.Physician = p.EmployeeID GROUP BY p.Name HAVING COUNT(DISTINCT pr.Patient) > 1;
SELECT BlockFloor, COUNT(RoomNumber) AS NumberOfRooms FROM Room GROUP BY BlockFloor;
SELECT BlockFloor, COUNT(RoomNumber) AS RoomCount FROM Room GROUP BY BlockFloor;
SELECT BlockCode, COUNT(RoomNumber) AS NumberOfRooms FROM Room GROUP BY BlockCode;
SELECT BlockCode, COUNT(RoomNumber) AS RoomCount FROM Room GROUP BY BlockCode;
SELECT DISTINCT BlockCode  FROM Room  WHERE Unavailable = 0;
SELECT DISTINCT BlockCode  FROM Room  WHERE Unavailable = 0;
SELECT COUNT(DISTINCT RoomType) AS DifferentRoomTypes FROM Room;
SELECT COUNT(DISTINCT RoomType) AS DistinctRoomTypes FROM Room;
SELECT DISTINCT p.Name FROM Physician p JOIN Prescribes pr ON p.EmployeeID = pr.Physician WHERE pr.Medication = 'Thesisin';
SELECT DISTINCT p.Name FROM Physician p JOIN Prescribes pr ON p.EmployeeID = pr.Physician JOIN Medication m ON pr.Medication = m.Code WHERE m.Name = 'Thesisin';
SELECT DISTINCT p.Name, p.Position FROM Physician p JOIN Prescribes pr ON p.EmployeeID = pr.Physician JOIN Medication m ON pr.Medication = m.Code WHERE m.Brand = 'X';
SELECT DISTINCT p.Name, p.Position FROM Physician p JOIN Prescribes pr ON p.EmployeeID = pr.Physician JOIN Medication m ON pr.Medication = m.Code WHERE m.Brand = 'X';
SELECT m.Brand, COUNT(p.Medication) AS NumberOfPrescriptions FROM Medication m JOIN Prescribes p ON m.Code = p.Medication GROUP BY m.Brand;
SELECT m.Brand, COUNT(p.Medication) AS MedicationCount FROM Prescribes p JOIN Medication m ON p.Medication = m.Code GROUP BY m.Brand;
SELECT Name  FROM Physician  WHERE Position LIKE '%senior%';
SELECT Name  FROM Physician  WHERE Position LIKE '%senior%';
SELECT Patient FROM Undergoes ORDER BY DateUndergoes DESC LIMIT 1;
SELECT Patient FROM Undergoes WHERE DateUndergoes = (SELECT MAX(DateUndergoes) FROM Undergoes);
SELECT DISTINCT p.Name FROM Patient p JOIN Undergoes u ON p.SSN = u.Patient JOIN Stay s ON u.Stay = s.StayID WHERE s.Room = 111;
SELECT DISTINCT p.Name FROM Patient p JOIN Stay s ON p.SSN = s.Patient JOIN Undergoes u ON p.SSN = u.Patient WHERE s.Room = '111';
SELECT DISTINCT Name FROM Nurse ORDER BY Name;
SELECT DISTINCT Name FROM Nurse ORDER BY Name;
SELECT DISTINCT n.Name FROM Nurse n JOIN Undergoes u ON n.EmployeeID = u.AssistingNurse;
SELECT DISTINCT n.Name FROM Nurse n JOIN Undergoes u ON n.EmployeeID = u.AssistingNurse JOIN Patient p ON u.Patient = p.SSN;
SELECT DISTINCT Name FROM Medication ORDER BY Name;
SELECT DISTINCT Name FROM Medication ORDER BY Name;
SELECT p.Name FROM Prescribes pr JOIN Physician p ON pr.Physician = p.EmployeeID WHERE pr.Dose = (SELECT MAX(Dose) FROM Prescribes);
SELECT p.Name FROM Prescribes pr JOIN Physician p ON pr.Physician = p.EmployeeID ORDER BY pr.Dose DESC LIMIT 1;
SELECT p.EmployeeID, a.Department FROM Physician p JOIN Affiliated_With a ON p.EmployeeID = a.Physician WHERE a.PrimaryAffiliation = 'Yes';
SELECT p.EmployeeID, a.Department FROM Physician p JOIN Affiliated_With a ON p.EmployeeID = a.Physician WHERE a.PrimaryAffiliation = 'Yes';
SELECT DISTINCT d.Name FROM Department d JOIN Affiliated_With aw ON d.DepartmentID = aw.Department WHERE aw.PrimaryAffiliation = 'Yes';
SELECT DISTINCT d.Name FROM Department d JOIN Affiliated_With aw ON d.DepartmentID = aw.Department WHERE aw.PrimaryAffiliation = 'Yes';
SELECT Name  FROM Nurse  JOIN On_Call ON Nurse.EmployeeID = On_Call.Nurse  WHERE On_Call.BlockFloor = 1 AND On_Call.BlockCode = 1;
SELECT Nurse  FROM On_Call  WHERE BlockFloor = 1 AND BlockCode = 1;
SELECT      MAX(Cost) AS HighestCost,      MIN(Cost) AS LowestCost,      AVG(Cost) AS AverageCost  FROM      Procedures;
SELECT MAX(Cost) AS HighestCost, MIN(Cost) AS LowestCost, AVG(Cost) AS AverageCost FROM Procedures;
SELECT Name, Cost FROM Procedures ORDER BY Cost DESC;
SELECT Name, Cost FROM Procedures ORDER BY Cost DESC;
SELECT Name, Cost  FROM Procedures  ORDER BY Cost DESC  LIMIT 3;
SELECT Name, Cost  FROM Procedures  ORDER BY Cost DESC  LIMIT 3;
SELECT DISTINCT p.Name FROM Physician p JOIN Trained_In t ON p.EmployeeID = t.Physician JOIN Procedures pr ON t.Treatment = pr.Code WHERE pr.Cost > 5000;
SELECT DISTINCT p.Name FROM Physician p JOIN Trained_In ti ON p.EmployeeID = ti.Physician JOIN Procedures pr ON ti.Treatment = pr.Code WHERE pr.Cost > 5000;
SELECT t.Physician FROM Trained_In t JOIN Procedures p ON t.Treatment = p.Code WHERE p.Cost = (SELECT MAX(Cost) FROM Procedures);
SELECT p.Name FROM Physician p JOIN Trained_In t ON p.EmployeeID = t.Physician JOIN Procedures pr ON t.Treatment = pr.Code WHERE pr.Cost = (SELECT MAX(Cost) FROM Procedures);
SELECT AVG(p.Cost) AS AverageCost FROM Procedures p JOIN Trained_In ti ON p.Code = ti.Treatment JOIN Physician ph ON ti.Physician = ph.EmployeeID WHERE ph.Name = 'John Wen';
SELECT AVG(p.Cost) AS MeanPrice FROM Procedures p JOIN Trained_In t ON p.Code = t.Treatment JOIN Physician ph ON t.Physician = ph.EmployeeID WHERE ph.Name = 'John Wen';
SELECT p.Name FROM Procedures p JOIN Trained_In t ON p.Code = t.Treatment JOIN Physician ph ON t.Physician = ph.EmployeeID WHERE ph.Name = 'John Wen';
SELECT p.Name FROM Procedures p JOIN Trained_In ti ON p.Code = ti.Treatment JOIN Physician ph ON ti.Physician = ph.EmployeeID WHERE ph.Name = 'John Wen';
SELECT DISTINCT p.Name FROM Procedures p WHERE p.Cost > 1000    OR p.Code IN (        SELECT t.Treatment        FROM Trained_In t        JOIN Physician ph ON t.Physician = ph.EmployeeID        WHERE ph.Name = 'John Wen'    );
SELECT DISTINCT p.Name FROM Procedures p WHERE p.Cost > 1000    OR p.Code IN (        SELECT ti.Treatment        FROM Trained_In ti        JOIN Physician ph ON ti.Physician = ph.EmployeeID        WHERE ph.Name = 'John Wen'    );
SELECT p.Name FROM Procedures p WHERE p.Cost > 1000 AND p.Code NOT IN (     SELECT t.Treatment     FROM Trained_In t     WHERE t.Physician = (SELECT EmployeeID FROM Physician WHERE Name = 'John Wen') );
SELECT p.Name FROM Procedures p WHERE p.Cost > 1000 AND p.Code NOT IN (     SELECT ti.Treatment     FROM Trained_In ti     JOIN Physician ph ON ti.Physician = ph.EmployeeID     WHERE ph.Name = 'John Wen' );
SELECT p.Name FROM Procedures p JOIN Trained_In t ON p.Name = t.Treatment JOIN Physician ph ON t.Physician = ph.EmployeeID WHERE p.Cost < 5000 AND ph.Name = 'John Wen';
SELECT p.Name, p.Cost FROM Procedures p JOIN Trained_In t ON t.Treatment = p.Code JOIN Physician ph ON t.Physician = ph.EmployeeID WHERE p.Cost < 5000 AND ph.Name = 'John Wen';
SELECT p.Name FROM Physician p JOIN Affiliated_With aw1 ON p.EmployeeID = aw1.Physician JOIN Department d1 ON aw1.Department = d1.DepartmentID AND d1.Name = 'Surgery' JOIN Affiliated_With aw2 ON p.EmployeeID = aw2.Physician JOIN Department d2 ON aw2.Department = d2.DepartmentID AND d2.Name = 'Psychiatry'
SELECT DISTINCT p.Name FROM Physician p JOIN Affiliated_With aw1 ON p.EmployeeID = aw1.Physician JOIN Department d1 ON aw1.Department = d1.DepartmentID JOIN Affiliated_With aw2 ON p.EmployeeID = aw2.Physician JOIN Department d2 ON aw2.Department = d2.DepartmentID WHERE d1.Name = 'Surgery' AND d2.Name = 'Psychiatry';
SELECT DISTINCT p.Name FROM Physician p JOIN Affiliated_With aw ON p.EmployeeID = aw.Physician JOIN Department d ON aw.Department = d.DepartmentID WHERE d.Name IN ('Surgery', 'Psychiatry');
SELECT DISTINCT p.Name FROM Physician p JOIN Affiliated_With aw ON p.EmployeeID = aw.Physician JOIN Department d ON aw.Department = d.DepartmentID WHERE d.Name IN ('Surgery', 'Psychiatry');
SELECT Name  FROM Patient  WHERE SSN NOT IN (     SELECT Patient      FROM Prescribes      WHERE Medication = 'Procrastin-X' );
SELECT Name  FROM Patient  WHERE SSN NOT IN (     SELECT Patient      FROM Prescribes      WHERE Medication = 'Procrastin-X' );
SELECT COUNT(DISTINCT p.SSN) AS NumberOfPatients FROM Patient p WHERE p.SSN NOT IN (     SELECT DISTINCT pr.Patient     FROM Prescribes pr     JOIN Medication m ON pr.Medication = m.Code     WHERE m.Name = 'Procrastin-X' );
SELECT COUNT(*) AS PatientsNotUsingProcrastinX FROM Patient WHERE SSN NOT IN (     SELECT Patient     FROM Prescribes     WHERE Medication = 'Procrastin-X' );
SELECT COUNT(*) AS TotalAppointments FROM Appointment;
SELECT COUNT(*) AS TotalAppointments FROM Appointment;
SELECT Name FROM Nurse WHERE EmployeeID IN (SELECT Nurse FROM On_Call);
SELECT DISTINCT Name FROM Nurse WHERE EmployeeID IN (SELECT Nurse FROM On_Call);
SELECT COUNT(*) FROM ship;
SELECT COUNT(*) AS Number_of_Ships FROM ship;
SELECT Name FROM ship ORDER BY Tonnage ASC;
SELECT s.Name  FROM ship s  ORDER BY s.Tonnage ASC;
SELECT Type, Nationality FROM ship;
SELECT DISTINCT Type, Nationality FROM ship;
SELECT Name FROM ship WHERE Nationality <> 'United States';
SELECT Name  FROM ship  WHERE Nationality <> 'United States';
SELECT Name  FROM ship  WHERE Nationality IN ('United States', 'United Kingdom');
SELECT Name  FROM ship  WHERE Nationality IN ('US', 'UK');
SELECT Name  FROM ship  WHERE Tonnage = (SELECT MAX(Tonnage) FROM ship);
SELECT Name  FROM ship  WHERE Tonnage = (SELECT MAX(Tonnage) FROM ship);
SELECT Type, COUNT(*) AS Number_of_Ships FROM ship GROUP BY Type;
SELECT Type, COUNT(*) AS Ship_Count FROM ship GROUP BY Type;
SELECT Type, COUNT(*) AS Count FROM ship GROUP BY Type ORDER BY Count DESC LIMIT 1;
SELECT Type, COUNT(*) AS Count FROM ship GROUP BY Type ORDER BY Count DESC LIMIT 1;
SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(Ship_ID) > 2;
SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(Ship_ID) > 2;
SELECT Type, AVG(Tonnage) AS Average_Tonnage FROM ship GROUP BY Type;
SELECT s.Type, AVG(s.Tonnage) AS Average_Tonnage FROM ship s GROUP BY s.Type;
SELECT m.Code, m.Fate, s.Name FROM mission m JOIN ship s ON m.Ship_ID = s.Ship_ID;
SELECT m.Code, m.Fate, s.Name FROM mission m JOIN ship s ON m.Ship_ID = s.Ship_ID;
SELECT s.Name FROM ship s JOIN mission m ON s.Ship_ID = m.Ship_ID WHERE m.Launched_Year > 1928;
SELECT s.Name FROM ship s JOIN mission m ON s.Ship_ID = m.Ship_ID WHERE m.Launched_Year > 1928;
SELECT DISTINCT m.Fate FROM mission m JOIN ship s ON m.Ship_ID = s.Ship_ID WHERE s.Nationality = 'United States';
SELECT DISTINCT m.Fate FROM mission m JOIN ship s ON m.Ship_ID = s.Ship_ID WHERE s.Nationality = 'United States';
SELECT Name  FROM ship  WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission);
SELECT s.Name  FROM ship s  LEFT JOIN mission m ON s.Ship_ID = m.Ship_ID  WHERE m.Mission_ID IS NULL;
SELECT DISTINCT s.Type FROM ship s WHERE s.Ship_ID IN (     SELECT m.Ship_ID     FROM mission m     JOIN ship s2 ON m.Ship_ID = s2.Ship_ID     GROUP BY m.Ship_ID     HAVING SUM(CASE WHEN s2.Tonnage > 6000 THEN 1 ELSE 0 END) > 0        AND SUM(CASE WHEN s2.Tonnage < 4000 THEN 1 ELSE 0 END) > 0 );
SELECT DISTINCT s.Type FROM ship s WHERE s.Ship_ID IN (     SELECT m.Ship_ID     FROM mission m     WHERE m.Ship_ID IN (         SELECT Ship_ID FROM ship WHERE Tonnage > 6000     )     AND m.Ship_ID IN (         SELECT Ship_ID FROM ship WHERE Tonnage < 4000     ) );
SELECT COUNT(*) AS TotalStudents FROM list;
SELECT COUNT(*) FROM list;
SELECT LastName FROM list WHERE Classroom = '111';
SELECT LastName FROM list WHERE Classroom = '111';
SELECT FirstName FROM list WHERE Classroom = '108';
SELECT FirstName FROM list WHERE Classroom = '108';
SELECT FirstName FROM list WHERE Classroom = '107';
SELECT FirstName FROM list WHERE Classroom = '107';
SELECT DISTINCT Classroom, Grade FROM list;
SELECT DISTINCT Grade, Classroom FROM list;
SELECT Grade FROM list WHERE Classroom = '103';
SELECT Grade FROM list WHERE Classroom = '103';
SELECT Grade FROM list WHERE Classroom = '105';
SELECT Grade FROM list WHERE Classroom = '105';
SELECT DISTINCT Classroom FROM list WHERE Grade = 4;
SELECT DISTINCT Classroom FROM list WHERE Grade = 4;
SELECT DISTINCT Classroom FROM list WHERE Grade = 5;
SELECT DISTINCT Classroom FROM list WHERE Grade = 5;
SELECT t.LastName  FROM teachers t  JOIN list l ON t.Classroom = l.Classroom  WHERE l.Grade = '5';
SELECT t.LastName  FROM teachers t  JOIN list l ON t.Classroom = l.Classroom  WHERE l.Grade = 5;
SELECT t.FirstName  FROM teachers t  WHERE t.Classroom = '1st Grade';
SELECT t.FirstName  FROM teachers t  JOIN list l ON t.Classroom = l.Classroom  WHERE l.Grade = 1;
SELECT FirstName FROM teachers WHERE Classroom = '110';
SELECT FirstName FROM teachers WHERE Classroom = '110';
SELECT LastName FROM teachers WHERE Classroom = '109';
SELECT LastName FROM teachers WHERE Classroom = '109';
SELECT FirstName, LastName FROM teachers;
SELECT FirstName, LastName FROM teachers;
SELECT FirstName, LastName FROM list;
SELECT FirstName, LastName FROM list;
SELECT l.FirstName, l.LastName FROM list l JOIN teachers t ON l.Classroom = t.Classroom WHERE t.LastName = 'MOYER' AND t.FirstName = 'OTHA';
SELECT list.FirstName, list.LastName  FROM list  JOIN teachers ON list.Classroom = teachers.Classroom  WHERE teachers.FirstName = 'OTHA' AND teachers.LastName = 'MOYER';
SELECT l.FirstName, l.LastName  FROM list l  JOIN teachers t ON l.Classroom = t.Classroom  WHERE t.LastName = 'MARROTTE' AND t.FirstName = 'KIRK';
SELECT l.FirstName, l.LastName  FROM student_1.list l  JOIN student_1.teachers t ON l.Classroom = t.Classroom  WHERE t.LastName = 'MARROTTE' AND t.FirstName = 'KIRK';
SELECT t.FirstName, t.LastName  FROM teachers t  JOIN list l ON t.Classroom = l.Classroom  WHERE l.FirstName = 'EVELINA' AND l.LastName = 'BROMLEY';
SELECT t.FirstName, t.LastName  FROM teachers t  JOIN list l ON t.Classroom = l.Classroom  WHERE l.FirstName = 'EVELINA' AND l.LastName = 'BROMLEY';
SELECT t.LastName  FROM teachers t  JOIN list l ON t.Classroom = l.Classroom  WHERE l.FirstName = 'TAMI' AND l.LastName = 'GELL';
SELECT t.LastName  FROM teachers t  JOIN list l ON t.Classroom = l.Classroom  WHERE l.FirstName = 'TAMI' AND l.LastName = 'GELL';
SELECT COUNT(*)  FROM list  WHERE Classroom IN (SELECT Classroom FROM teachers WHERE LastName = 'LORIA' AND FirstName = 'ONDERSMA');
SELECT COUNT(*)  FROM student_1.list  WHERE Classroom IN (SELECT Classroom FROM student_1.teachers WHERE LastName = 'LORIA' AND FirstName = 'ONDERSMA');
SELECT COUNT(*)  FROM student_1.list  WHERE Classroom IN (SELECT Classroom FROM student_1.teachers WHERE LastName = 'GORDON' AND FirstName = 'KAWA');
SELECT COUNT(*)  FROM list  WHERE Classroom = (SELECT Classroom FROM teachers WHERE LastName = 'GORDON' AND FirstName = 'KAWA');
SELECT COUNT(*)  FROM student_1.list  WHERE Classroom = (SELECT Classroom FROM student_1.teachers WHERE LastName = 'TARRING' AND FirstName = 'LEIA');
SELECT COUNT(*)  FROM list  WHERE Classroom = (SELECT Classroom FROM teachers WHERE LastName = 'TARRING' AND FirstName = 'LEIA');
SELECT COUNT(*)  FROM teachers  WHERE Classroom = (SELECT Classroom FROM list WHERE LastName = 'NABOZNY' AND FirstName = 'CHRISSY');
SELECT COUNT(*)  FROM teachers  WHERE Classroom = (SELECT Classroom FROM list WHERE LastName = 'NABOZNY' AND FirstName = 'CHRISSY');
SELECT COUNT(*)  FROM teachers  WHERE Classroom = (SELECT Classroom FROM list WHERE LastName = 'MADLOCK' AND FirstName = 'RAY');
SELECT COUNT(*)  FROM teachers  WHERE Classroom = (SELECT Classroom FROM list WHERE LastName = 'MADLOCK' AND FirstName = 'RAY');
SELECT l.FirstName, l.LastName FROM list l WHERE l.Grade = '1' AND l.Classroom NOT IN (     SELECT t.Classroom     FROM teachers t     WHERE t.LastName = 'MOYER' AND t.FirstName = 'OTHA' );
SELECT FirstName, LastName  FROM list  WHERE Grade = '1'  AND Classroom NOT IN (SELECT Classroom FROM teachers WHERE LastName = 'MOYER' AND FirstName = 'OTHA');
SELECT LastName  FROM list  WHERE Grade = 3  AND Classroom NOT IN (SELECT Classroom FROM teachers WHERE LastName = 'COVIN' AND FirstName = 'JEROME');
SELECT LastName  FROM list  WHERE Grade = 3 AND Classroom NOT IN (SELECT Classroom FROM teachers WHERE LastName = 'COVIN' AND FirstName = 'JEROME');
SELECT      Grade,      COUNT(DISTINCT Classroom) AS NumberOfClassrooms,      COUNT(*) AS TotalStudents FROM      list GROUP BY      Grade;
SELECT      Grade,      COUNT(DISTINCT Classroom) AS NumberOfClassrooms,      COUNT(*) AS TotalStudents FROM      list GROUP BY      Grade;
SELECT Classroom, COUNT(DISTINCT Grade) AS NumberOfGrades FROM list GROUP BY Classroom;
SELECT Classroom, COUNT(DISTINCT Grade) AS DistinctGradeCount FROM list GROUP BY Classroom;
SELECT Classroom, COUNT(*) AS StudentCount FROM list GROUP BY Classroom ORDER BY StudentCount DESC LIMIT 1;
SELECT Classroom, COUNT(*) AS StudentCount FROM list GROUP BY Classroom ORDER BY StudentCount DESC LIMIT 1;
SELECT Classroom, COUNT(*) AS NumberOfStudents FROM list GROUP BY Classroom;
SELECT Classroom, COUNT(*) AS StudentCount FROM list GROUP BY Classroom;
SELECT Grade, COUNT(*) AS TotalStudents FROM list WHERE Classroom = '0' GROUP BY Grade;
SELECT Classroom, COUNT(*) AS StudentCount FROM list WHERE Grade = 0 GROUP BY Classroom;
SELECT Classroom, COUNT(*) AS TotalStudents FROM list WHERE Grade = '4' GROUP BY Classroom;
SELECT Classroom, COUNT(*) AS TotalStudents FROM list WHERE Grade = 4 GROUP BY Classroom;
SELECT t.LastName, t.FirstName FROM teachers t JOIN list l ON t.Classroom = l.Classroom GROUP BY t.LastName, t.FirstName ORDER BY COUNT(l.LastName) DESC LIMIT 1;
SELECT t.FirstName, t.LastName FROM teachers t JOIN list l ON t.Classroom = l.Classroom GROUP BY t.FirstName, t.LastName ORDER BY COUNT(l.LastName) DESC LIMIT 1;
SELECT Classroom, COUNT(*) AS NumberOfStudents FROM list GROUP BY Classroom;
SELECT Classroom, COUNT(*) AS StudentCount FROM list GROUP BY Classroom;
SELECT COUNT(*) FROM company WHERE Headquarters = 'US';
SELECT Name FROM company ORDER BY Sales_in_Billion ASC;
SELECT Headquarters, Industry FROM company;
SELECT Name FROM company WHERE Industry IN ('Banking', 'Retailing');
SELECT MAX(Market_Value_in_Billion) AS Max_Market_Value, MIN(Market_Value_in_Billion) AS Min_Market_Value FROM company;
SELECT Headquarters  FROM company  WHERE Sales_in_Billion = (SELECT MAX(Sales_in_Billion) FROM company);
SELECT Headquarters, COUNT(Company_ID) AS Number_of_Companies FROM company GROUP BY Headquarters;
SELECT Headquarters, COUNT(*) AS Count FROM company GROUP BY Headquarters ORDER BY Count DESC LIMIT 1;
SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(Company_ID) >= 2;
SELECT DISTINCT c.Headquarters FROM company c WHERE c.Industry = 'Banking' AND c.Headquarters IN (     SELECT c2.Headquarters     FROM company c2     WHERE c2.Industry = 'Oil and Gas' );
SELECT company.Name AS Company_Name, people.Name AS Employee_Name FROM company JOIN employment ON company.Company_ID = employment.Company_ID JOIN people ON employment.People_ID = people.People_ID;
SELECT c.Name AS Company_Name, p.Name AS Employee_Name FROM employment e JOIN company c ON e.Company_ID = c.Company_ID JOIN people p ON e.People_ID = p.People_ID ORDER BY e.Year_working DESC;
SELECT p.Name FROM people p JOIN employment e ON p.People_ID = e.People_ID JOIN company c ON e.Company_ID = c.Company_ID WHERE c.Sales_in_Billion > 200;
SELECT c.Name AS Company_Name, COUNT(e.People_ID) AS Number_of_Employees FROM company c LEFT JOIN employment e ON c.Company_ID = e.Company_ID GROUP BY c.Name;
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM employment);
SELECT Name  FROM company  WHERE Sales_in_Billion > 200  ORDER BY Sales_in_Billion DESC, Profits_in_Billion DESC;
SELECT COUNT(*) AS Total_Films FROM film;
SELECT COUNT(*) AS Number_of_Films FROM film;
SELECT DISTINCT Director FROM film;
SELECT DISTINCT Director FROM film;
SELECT AVG(Gross_in_dollar) AS Average_Ticket_Sales FROM film;
SELECT AVG(Gross_in_dollar) AS Average_Gross_Sales FROM film;
SELECT Low_Estimate, High_Estimate  FROM film_market_estimation;
SELECT f.Title, fme.Low_Estimate, fme.High_Estimate FROM film_market_estimation fme JOIN film f ON fme.Film_ID = f.Film_ID;
SELECT DISTINCT Type  FROM film_market_estimation  WHERE Year = 1995;
SELECT DISTINCT Type  FROM film_market_estimation  WHERE Year = 1995;
SELECT MAX(Number_cities) AS Max_Cities, MIN(Number_cities) AS Min_Cities FROM market;
SELECT MAX(Number_cities) AS Max_Cities, MIN(Number_cities) AS Min_Cities FROM market;
SELECT COUNT(*)  FROM market  WHERE Number_cities < 300;
SELECT COUNT(*)  FROM market  WHERE Number_cities < 300;
SELECT DISTINCT Country FROM market ORDER BY Country ASC;
SELECT Country FROM market ORDER BY Country;
SELECT Country  FROM market  ORDER BY Number_cities DESC;
SELECT Country  FROM market  ORDER BY Number_cities DESC;
SELECT f.Title, fme.Type FROM film f JOIN film_market_estimation fme ON f.Film_ID = fme.Film_ID;
SELECT f.Title, fme.Type FROM film f JOIN film_market_estimation fme ON f.Film_ID = fme.Film_ID;
SELECT DISTINCT f.Director FROM film f JOIN film_market_estimation fme ON f.Film_ID = fme.Film_ID WHERE fme.Year = 1995;
SELECT DISTINCT f.Director FROM film f JOIN film_market_estimation fme ON f.Film_ID = fme.Film_ID WHERE fme.Year = 1995;
SELECT AVG(m.Number_cities) AS Average_Cities FROM market m JOIN film_market_estimation fme ON m.Market_ID = fme.Market_ID WHERE fme.Low_Estimate > 10000;
SELECT AVG(m.Number_cities) AS Average_Cities FROM market m JOIN film_market_estimation fme ON m.Market_ID = fme.Market_ID WHERE fme.Low_Estimate > 10000;
SELECT m.Country, fme.Year FROM film_market_estimation fme JOIN market m ON fme.Market_ID = m.Market_ID;
SELECT m.Country, fme.Year FROM market m JOIN film_market_estimation fme ON m.Market_ID = fme.Market_ID;
SELECT DISTINCT fme.Year FROM film_market_estimation fme JOIN market m ON fme.Market_ID = m.Market_ID WHERE m.Country = 'Japan' ORDER BY fme.Year DESC;
SELECT DISTINCT fme.Year FROM film_market_estimation fme JOIN market m ON fme.Market_ID = m.Market_ID WHERE m.Country = 'Japan' ORDER BY fme.Year DESC;
SELECT Studio, COUNT(*) AS Number_of_Films FROM film GROUP BY Studio;
SELECT Studio, COUNT(*) AS Film_Count FROM film GROUP BY Studio;
SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(Film_ID) DESC LIMIT 1;
SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(Film_ID) DESC LIMIT 1;
SELECT Studio FROM film GROUP BY Studio HAVING COUNT(Film_ID) >= 2;
SELECT Studio FROM film GROUP BY Studio HAVING COUNT(Film_ID) >= 2;
SELECT Title  FROM film  WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation);
SELECT Title  FROM film  WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation);
SELECT DISTINCT Studio  FROM film  WHERE Director IN ('Nicholas Meyer', 'Walter Hill');
SELECT DISTINCT f.Studio FROM film f WHERE f.Director IN ('Nicholas Meyer', 'Walter Hill') GROUP BY f.Studio HAVING COUNT(DISTINCT f.Director) = 2;
SELECT Title, Studio  FROM film  WHERE Studio LIKE '%Universal%';
SELECT Title, Studio  FROM film  WHERE Studio LIKE '%Universal%';
SELECT DISTINCT Studio  FROM film  WHERE Film_ID NOT IN (     SELECT Film_ID      FROM film      WHERE Director = 'Walter Hill' );
SELECT DISTINCT Studio FROM film WHERE Studio NOT IN (     SELECT DISTINCT Studio     FROM film     WHERE Director = 'Walter Hill' );
SELECT Studio FROM film GROUP BY Studio HAVING AVG(Gross_in_dollar) > 4500000;
SELECT Studio FROM film GROUP BY Studio HAVING AVG(Gross_in_dollar) > 4500000;
SELECT f.Title FROM film f JOIN film_market_estimation fme ON f.Film_ID = fme.Film_ID ORDER BY fme.High_Estimate DESC LIMIT 1;
SELECT f.Title  FROM film f  JOIN film_market_estimation fme ON f.Film_ID = fme.Film_ID  ORDER BY fme.High_Estimate DESC  LIMIT 1;
SELECT f.Title, f.Director FROM film f WHERE f.Film_ID NOT IN (     SELECT fme.Film_ID     FROM film_market_estimation fme     JOIN market m ON fme.Market_ID = m.Market_ID     WHERE m.Country = 'China' );
SELECT f.Title, f.Director FROM film f WHERE f.Film_ID NOT IN (     SELECT fme.Film_ID     FROM film_market_estimation fme     JOIN market m ON fme.Market_ID = m.Market_ID     WHERE m.Country = 'China' );
SELECT COUNT(*) AS Calendar_Item_Count FROM Ref_Calendar;
SELECT COUNT(*) AS Total_Calendar_Items FROM Ref_Calendar;
SELECT Calendar_Date, Day_Number FROM Ref_Calendar;
SELECT Calendar_Date, Day_Number FROM Ref_Calendar;
SELECT COUNT(*) AS Number_of_Document_Types FROM Ref_Document_Types;
SELECT COUNT(*) AS NumberOfDocumentTypes FROM Ref_Document_Types;
SELECT Document_Type_Code, Document_Type_Name FROM Ref_Document_Types;
SELECT Document_Type_Code, Document_Type_Name FROM Ref_Document_Types;
SELECT Document_Type_Name, Document_Type_Description  FROM Ref_Document_Types  WHERE Document_Type_Code = 'RV';
SELECT Document_Type_Name, Document_Type_Description  FROM Ref_Document_Types  WHERE Document_Type_Code = 'RV';
SELECT Document_Type_Code  FROM Ref_Document_Types  WHERE Document_Type_Name = 'Paper';
SELECT Document_Type_Code  FROM Ref_Document_Types  WHERE Document_Type_Name = 'Paper';
SELECT COUNT(*) AS Number_of_Documents FROM All_Documents WHERE Document_Type_Code IN ('CV', 'BK');
SELECT COUNT(*)  FROM All_Documents  WHERE Document_Type_Code IN ('CV', 'BK');
SELECT Date_Stored  FROM All_Documents  WHERE Document_Name = 'Marry CV';
SELECT Date_Stored  FROM All_Documents  WHERE Document_Name = 'Marry CV';
SELECT c.Day_Number, c.Calendar_Date FROM All_Documents d JOIN Ref_Calendar c ON d.Date_Stored = c.Calendar_Date;
SELECT rc.Day_Number, ad.Date_Stored FROM All_Documents ad JOIN Ref_Calendar rc ON ad.Date_Stored = rc.Calendar_Date;
SELECT r.Document_Type_Name  FROM All_Documents a  JOIN Ref_Document_Types r ON a.Document_Type_Code = r.Document_Type_Code  WHERE a.Document_Name = 'How to read a book';
SELECT r.Document_Type_Name  FROM All_Documents a  JOIN Ref_Document_Types r ON a.Document_Type_Code = r.Document_Type_Code  WHERE a.Document_Name = 'How to read a book';
SELECT COUNT(*) AS Number_of_Locations FROM Ref_Locations;
SELECT COUNT(*) FROM Ref_Locations;
SELECT Location_Code, Location_Name FROM Ref_Locations;
SELECT Location_Code, Location_Name FROM Ref_Locations;
SELECT Location_Name, Location_Description  FROM Ref_Locations  WHERE Location_Code = 'x';
SELECT Location_Name, Location_Description  FROM Ref_Locations  WHERE Location_Code = 'x';
SELECT Location_Code FROM Ref_Locations WHERE Location_Name = 'Canada';
SELECT Location_Code FROM Ref_Locations WHERE Location_Name = 'Canada';
SELECT COUNT(*) AS Number_of_Roles FROM Roles;
SELECT COUNT(*) AS Total_Roles FROM Roles;
SELECT Role_Code, Role_Name, Role_Description FROM Roles;
SELECT Role_Code, Role_Name, Role_Description FROM Roles;
SELECT Role_Name, Role_Description  FROM Roles  WHERE Role_Code = 'MG';
SELECT Role_Name, Role_Description  FROM Roles  WHERE Role_Code = 'MG';
SELECT Role_Description  FROM Roles  WHERE Role_Name = 'Proof Reader';
SELECT Role_Description  FROM Roles  WHERE Role_Name = 'Proof Reader';
SELECT COUNT(*) AS Number_of_Employees FROM Employees;
SELECT COUNT(*) AS Number_of_Employees FROM Employees;
SELECT Employee_Name, Role_Code, Date_of_Birth  FROM Employees  WHERE Employee_Name = 'Armani';
SELECT Employee_Name, Role_Code, Date_of_Birth  FROM Employees  WHERE Employee_Name = 'Armani';
SELECT Employee_ID FROM Employees WHERE Employee_Name = 'Ebba';
SELECT Employee_ID FROM Employees WHERE Employee_Name = 'Ebba';
SELECT Employee_Name  FROM Employees  WHERE Role_Code = (SELECT Role_Code FROM Roles WHERE Role_Name = 'HR');
SELECT Employee_Name  FROM Employees  WHERE Role_Code = 'HR';
SELECT Role_Code, COUNT(Employee_ID) AS Number_of_Employees FROM Employees GROUP BY Role_Code;
SELECT r.Role_Code, COUNT(e.Employee_ID) AS Number_of_Employees FROM Roles r LEFT JOIN Employees e ON r.Role_Code = e.Role_Code GROUP BY r.Role_Code;
SELECT Role_Code FROM Employees GROUP BY Role_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Role_Code FROM Employees GROUP BY Role_Code ORDER BY COUNT(Employee_ID) DESC LIMIT 1;
SELECT Role_Code FROM Employees GROUP BY Role_Code HAVING COUNT(Employee_ID) >= 3;
SELECT Role_Code FROM Employees GROUP BY Role_Code HAVING COUNT(Employee_ID) >= 3;
SELECT Role_Code FROM Employees GROUP BY Role_Code ORDER BY COUNT(Employee_ID) ASC LIMIT 1;
SELECT Role_Code FROM Employees GROUP BY Role_Code ORDER BY COUNT(Employee_ID) ASC LIMIT 1;
SELECT r.Role_Name, r.Role_Description FROM Employees e JOIN Roles r ON e.Role_Code = r.Role_Code WHERE e.Employee_Name = 'Ebba';
SELECT r.Role_Name, r.Role_Description FROM Employees e JOIN Roles r ON e.Role_Code = r.Role_Code WHERE e.Employee_Name = 'Ebba';
SELECT Employee_Name  FROM Employees  WHERE Role_Code = (SELECT Role_Code FROM Roles WHERE Role_Name = 'Editor');
SELECT Employee_Name  FROM Employees  WHERE Role_Code = (SELECT Role_Code FROM Roles WHERE Role_Name = 'Editor');
SELECT Employee_ID  FROM Employees  WHERE Role_Code IN (SELECT Role_Code FROM Roles WHERE Role_Name IN ('Human Resource', 'Manager'));
SELECT Employee_ID  FROM Employees  WHERE Role_Code IN (SELECT Role_Code FROM Roles WHERE Role_Name IN ('Human Resource', 'Manager'));
SELECT DISTINCT Location_Code FROM Document_Locations;
SELECT DISTINCT Location_Code FROM Document_Locations;
SELECT rl.Location_Name FROM All_Documents ad JOIN Document_Locations dl ON ad.Document_ID = dl.Document_ID JOIN Ref_Locations rl ON dl.Location_Code = rl.Location_Code WHERE ad.Document_Name = 'Robin CV';
SELECT rl.Location_Name FROM All_Documents ad JOIN Document_Locations dl ON ad.Document_ID = dl.Document_ID JOIN Ref_Locations rl ON dl.Location_Code = rl.Location_Code WHERE ad.Document_Name = 'Robin CV';
SELECT Location_Code, Date_in_Location_From, Date_in_Locaton_To FROM Document_Locations;
SELECT Location_Code, Date_in_Location_From, Date_in_Locaton_To FROM Document_Locations;
SELECT Date_in_Location_From, Date_in_Locaton_To  FROM Document_Locations  JOIN All_Documents ON Document_Locations.Document_ID = All_Documents.Document_ID  WHERE All_Documents.Document_Name = 'Robin CV';
SELECT dl.Date_in_Location_From, dl.Date_in_Locaton_To FROM All_Documents ad JOIN Document_Locations dl ON ad.Document_ID = dl.Document_ID WHERE ad.Document_Name = 'Robin CV';
SELECT Location_Code, COUNT(Document_ID) AS Number_of_Documents FROM Document_Locations GROUP BY Location_Code;
SELECT l.Location_Code, COUNT(dl.Document_ID) AS Number_of_Documents FROM Ref_Locations l LEFT JOIN Document_Locations dl ON l.Location_Code = dl.Location_Code GROUP BY l.Location_Code;
SELECT Location_Code FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Document_ID) DESC LIMIT 1;
SELECT Location_Code FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Document_ID) DESC LIMIT 1;
SELECT Location_Code FROM Document_Locations GROUP BY Location_Code HAVING COUNT(Document_ID) >= 3;
SELECT Location_Code FROM Document_Locations GROUP BY Location_Code HAVING COUNT(Document_ID) >= 3;
SELECT Location_Name, Location_Code FROM Ref_Locations WHERE Location_Code = (     SELECT Location_Code     FROM Document_Locations     GROUP BY Location_Code     ORDER BY COUNT(Document_ID) ASC     LIMIT 1 );
SELECT l.Location_Name, l.Location_Code FROM Ref_Locations l JOIN Document_Locations dl ON l.Location_Code = dl.Location_Code GROUP BY l.Location_Name, l.Location_Code ORDER BY COUNT(dl.Document_ID) ASC LIMIT 1;
SELECT      e1.Employee_Name AS Authorised_By,     e2.Employee_Name AS Destroyed_By FROM      Documents_to_be_Destroyed d JOIN      Employees e1 ON d.Destruction_Authorised_by_Employee_ID = e1.Employee_ID JOIN      Employees e2 ON d.Destroyed_by_Employee_ID = e2.Employee_ID;
SELECT E1.Employee_Name AS Authorized_By, E2.Employee_Name AS Destroyed_By FROM Documents_to_be_Destroyed D JOIN Employees E1 ON D.Destruction_Authorised_by_Employee_ID = E1.Employee_ID JOIN Employees E2 ON D.Destroyed_by_Employee_ID = E2.Employee_ID;
SELECT e.Employee_ID, COUNT(d.Document_ID) AS Number_of_Document_Destructions FROM Employees e LEFT JOIN Documents_to_be_Destroyed d ON e.Employee_ID = d.Destruction_Authorised_by_Employee_ID GROUP BY e.Employee_ID;
SELECT e.Employee_ID, COUNT(d.Document_ID) AS Number_of_Destructions FROM Employees e LEFT JOIN Documents_to_be_Destroyed d ON e.Employee_ID = d.Destruction_Authorised_by_Employee_ID GROUP BY e.Employee_ID;
SELECT Destroyed_by_Employee_ID, COUNT(Document_ID) AS Number_of_Documents_Destroyed FROM Documents_to_be_Destroyed GROUP BY Destroyed_by_Employee_ID;
SELECT e.Employee_ID, COUNT(d.Document_ID) AS Number_of_Documents_Destroyed FROM Employees e LEFT JOIN Documents_to_be_Destroyed d ON e.Employee_ID = d.Destroyed_by_Employee_ID GROUP BY e.Employee_ID;
SELECT Employee_ID  FROM Employees  WHERE Employee_ID NOT IN (SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed);
SELECT Employee_ID  FROM Employees  WHERE Employee_ID NOT IN (SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed);
SELECT DISTINCT Destruction_Authorised_by_Employee_ID  FROM Documents_to_be_Destroyed  WHERE Destruction_Authorised_by_Employee_ID IS NOT NULL;
SELECT Destruction_Authorised_by_Employee_ID  FROM Documents_to_be_Destroyed;
SELECT DISTINCT Destroyed_by_Employee_ID  FROM Documents_to_be_Destroyed  WHERE Destroyed_by_Employee_ID IS NOT NULL;
SELECT DISTINCT Destroyed_by_Employee_ID  FROM Documents_to_be_Destroyed  WHERE Destroyed_by_Employee_ID IS NOT NULL;
SELECT Employee_ID  FROM Employees  WHERE Employee_ID NOT IN (SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed WHERE Destroyed_by_Employee_ID IS NOT NULL);
SELECT Employee_ID  FROM Employees  WHERE Employee_ID NOT IN (     SELECT Destroyed_by_Employee_ID      FROM Documents_to_be_Destroyed      WHERE Destroyed_by_Employee_ID IS NOT NULL );
SELECT DISTINCT Employee_ID  FROM Employees  WHERE Employee_ID IN (     SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed WHERE Destroyed_by_Employee_ID IS NOT NULL     UNION     SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed WHERE Destruction_Authorised_by_Employee_ID IS NOT NULL );
SELECT DISTINCT Employee_ID FROM Employees WHERE Employee_ID IN (     SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed     UNION     SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed );
SELECT COUNT(*) FROM Club;
SELECT COUNT(*) AS TotalClubs FROM Club;
SELECT ClubName FROM Club;
SELECT ClubName FROM Club;
SELECT COUNT(*) FROM Student;
SELECT COUNT(*) AS TotalStudents FROM Student;
SELECT Fname FROM Student;
SELECT Fname FROM Student;
SELECT S.LName FROM Student S JOIN Member_of_club M ON S.StuID = M.StuID JOIN Club C ON M.ClubID = C.ClubID WHERE C.ClubName = 'Bootup Baltimore';
SELECT S.LName  FROM Student S  JOIN Member_of_club M ON S.StuID = M.StuID  JOIN Club C ON M.ClubID = C.ClubID  WHERE C.ClubName = 'Bootup Baltimore';
SELECT S.LName FROM Student S JOIN Member_of_club M ON S.StuID = M.StuID JOIN Club C ON M.ClubID = C.ClubID WHERE C.ClubName = 'Hopkins Student Enterprises';
SELECT S.LName FROM Student S JOIN Member_of_club M ON S.StuID = M.StuID JOIN Club C ON M.ClubID = C.ClubID WHERE C.ClubName = 'Hopkins Student Enterprises';
SELECT COUNT(m.StuID) AS MemberCount FROM Member_of_club m JOIN Club c ON m.ClubID = c.ClubID WHERE c.ClubName = 'Tennis Club';
SELECT COUNT(m.StuID) AS MemberCount FROM Member_of_club m JOIN Club c ON m.ClubID = c.ClubID WHERE c.ClubName = 'Tennis Club';
SELECT COUNT(*) AS NumberOfMembers FROM Member_of_club WHERE ClubID = (SELECT ClubID FROM Club WHERE ClubName = 'Pen and Paper Gaming');
SELECT COUNT(*)  FROM Member_of_club  WHERE ClubID = (SELECT ClubID FROM Club WHERE ClubName = 'Pen and Paper Gaming');
SELECT COUNT(*)  FROM Member_of_club  WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith' AND Fname = 'Linda');
SELECT COUNT(*)  FROM Member_of_club  JOIN Student ON Member_of_club.StuID = Student.StuID  WHERE Student.Fname = 'Linda' AND Student.LName = 'Smith';
SELECT COUNT(DISTINCT m.ClubID) AS NumberOfClubs FROM Member_of_club m JOIN Student s ON m.StuID = s.StuID WHERE s.Fname = 'Tracy' AND s.LName = 'Kim';
SELECT COUNT(DISTINCT m.ClubID) AS NumberOfClubs FROM Student s JOIN Member_of_club m ON s.StuID = m.StuID WHERE s.Fname = 'Tracy' AND s.LName = 'Kim';
SELECT S.Fname, S.LName FROM Student S JOIN Member_of_club M ON S.StuID = M.StuID JOIN Club C ON M.ClubID = C.ClubID WHERE S.Sex = 'Female' AND C.ClubName = 'Bootup Baltimore';
SELECT S.Fname, S.LName  FROM Student S  JOIN Member_of_club M ON S.StuID = M.StuID  JOIN Club C ON M.ClubID = C.ClubID  WHERE S.Sex = 'Female' AND C.ClubName = 'Bootup Baltimore';
SELECT S.Fname, S.LName FROM Student S JOIN Member_of_club M ON S.StuID = M.StuID JOIN Club C ON M.ClubID = C.ClubID WHERE C.ClubName = 'Hopkins Student Enterprises' AND S.Sex = 'M';
SELECT S.Fname, S.LName FROM Student S JOIN Member_of_club M ON S.StuID = M.StuID JOIN Club C ON M.ClubID = C.ClubID WHERE S.Sex = 'M' AND C.ClubName = 'Hopkins Student Enterprises';
SELECT S.Fname, S.LName FROM Student S JOIN Member_of_club M ON S.StuID = M.StuID JOIN Club C ON M.ClubID = C.ClubID WHERE C.ClubName = 'Bootup Baltimore' AND S.Major = '600';
SELECT S.Fname, S.LName FROM Student S JOIN Member_of_club M ON S.StuID = M.StuID JOIN Club C ON M.ClubID = C.ClubID WHERE C.ClubName = 'Bootup Baltimore' AND S.Major = '600';
SELECT c.ClubName, COUNT(m.StuID) AS MemberCount FROM Member_of_club m JOIN Student s ON m.StuID = s.StuID JOIN Club c ON m.ClubID = c.ClubID WHERE s.Major = '600' GROUP BY c.ClubName ORDER BY MemberCount DESC LIMIT 1;
SELECT c.ClubID, c.ClubName, COUNT(m.StuID) AS MemberCount FROM Club c JOIN Member_of_club m ON c.ClubID = m.ClubID JOIN Student s ON m.StuID = s.StuID WHERE s.Major = '600' GROUP BY c.ClubID, c.ClubName ORDER BY MemberCount DESC LIMIT 1;
SELECT c.ClubName FROM Club c JOIN Member_of_club m ON c.ClubID = m.ClubID JOIN Student s ON m.StuID = s.StuID WHERE s.Sex = 'F' GROUP BY c.ClubName ORDER BY COUNT(s.StuID) DESC LIMIT 1;
SELECT c.ClubName FROM Club c JOIN Member_of_club m ON c.ClubID = m.ClubID JOIN Student s ON m.StuID = s.StuID WHERE s.Sex = 'F' GROUP BY c.ClubName ORDER BY COUNT(s.StuID) DESC LIMIT 1;
SELECT ClubDesc FROM Club WHERE ClubName = 'Tennis Club';
SELECT ClubDesc FROM Club WHERE ClubName = 'Tennis Club';
SELECT ClubDesc FROM Club WHERE ClubName = 'Pen and Paper Gaming';
SELECT ClubDesc FROM Club WHERE ClubName = 'Pen and Paper Gaming';
SELECT ClubLocation FROM Club WHERE ClubName = 'Tennis Club';
SELECT ClubLocation FROM Club WHERE ClubName = 'Tennis Club';
SELECT ClubLocation  FROM Club  WHERE ClubName = 'Pen and Paper Gaming';
SELECT ClubLocation FROM Club WHERE ClubName = 'Pen and Paper Gaming';
SELECT ClubLocation FROM Club WHERE ClubName = 'Hopkins Student Enterprises';
SELECT ClubLocation  FROM Club  WHERE ClubName = 'Hopkins Student Enterprises';
SELECT ClubName  FROM Club  WHERE ClubLocation = 'AKW';
SELECT ClubName  FROM Club  WHERE ClubLocation = 'AKW';
SELECT COUNT(*)  FROM Club  WHERE ClubLocation = 'HHH';
SELECT COUNT(*)  FROM Club  WHERE ClubLocation = 'HHH';
SELECT S.Fname, S.LName FROM Student S JOIN Member_of_club M ON S.StuID = M.StuID JOIN Club C ON M.ClubID = C.ClubID WHERE C.ClubName = 'Bootup Baltimore' AND M.Position = 'President';
SELECT S.Fname, S.LName  FROM Student S  JOIN Member_of_club M ON S.StuID = M.StuID  JOIN Club C ON M.ClubID = C.ClubID  WHERE C.ClubName = 'Bootup Baltimore' AND M.Position = 'President';
SELECT S.Fname, S.LName FROM Student S JOIN Member_of_club M ON S.StuID = M.StuID JOIN Club C ON M.ClubID = C.ClubID WHERE C.ClubName = 'Hopkins Student Enterprises' AND M.Position = 'CTO';
SELECT S.Fname, S.LName  FROM Student S  JOIN Member_of_club M ON S.StuID = M.StuID  JOIN Club C ON M.ClubID = C.ClubID  WHERE C.ClubName = 'Hopkins Student Enterprises' AND M.Position = 'CTO';
SELECT COUNT(DISTINCT Position) AS DifferentRoles FROM Member_of_club WHERE ClubID = (SELECT ClubID FROM Club WHERE ClubName = 'Bootup Baltimore');
SELECT COUNT(DISTINCT Position)  FROM Member_of_club  JOIN Club ON Member_of_club.ClubID = Club.ClubID  WHERE Club.ClubName = 'Bootup Baltimore';
SELECT COUNT(*)  FROM Member_of_club moc  JOIN Student s ON moc.StuID = s.StuID  JOIN Club c ON moc.ClubID = c.ClubID  WHERE c.ClubName = 'Bootup Baltimore' AND s.Age > 18;
SELECT COUNT(*)  FROM Member_of_club moc  JOIN Student s ON moc.StuID = s.StuID  JOIN Club c ON moc.ClubID = c.ClubID  WHERE c.ClubName = 'Bootup Baltimore' AND s.Age > 18;
SELECT COUNT(*)  FROM Member_of_club moc  JOIN Student s ON moc.StuID = s.StuID  JOIN Club c ON moc.ClubID = c.ClubID  WHERE c.ClubName = 'Bootup Baltimore' AND s.Age < 18;
SELECT COUNT(*)  FROM Member_of_club moc JOIN Student s ON moc.StuID = s.StuID JOIN Club c ON moc.ClubID = c.ClubID WHERE c.ClubName = 'Bootup Baltimore' AND s.Age < 18;
SELECT DISTINCT c.ClubName FROM Club c JOIN Member_of_club m ON c.ClubID = m.ClubID JOIN Student s ON m.StuID = s.StuID WHERE s.city_code = 'BAL';
SELECT DISTINCT c.ClubName FROM Club c JOIN Member_of_club m ON c.ClubID = m.ClubID JOIN Student s ON m.StuID = s.StuID WHERE s.city_code = 'BAL';
SELECT DISTINCT c.ClubName FROM Club c JOIN Member_of_club m ON c.ClubID = m.ClubID JOIN Student s ON m.StuID = s.StuID WHERE s.city_code = 'HOU';
SELECT DISTINCT c.ClubName FROM Club c JOIN Member_of_club m ON c.ClubID = m.ClubID JOIN Student s ON m.StuID = s.StuID WHERE s.city_code = 'HOU';
SELECT COUNT(*)  FROM Member_of_club  WHERE StuID = (SELECT StuID FROM Student WHERE Fname = 'Eric' AND LName = 'Tai');
SELECT COUNT(*)  FROM Member_of_club  WHERE StuID IN (SELECT StuID FROM Student WHERE Fname = 'Eric' AND LName = 'Tai');
SELECT c.ClubName  FROM Club c JOIN Member_of_club m ON c.ClubID = m.ClubID JOIN Student s ON m.StuID = s.StuID WHERE s.Fname = 'Steven' AND s.LName = 'Davis';
SELECT c.ClubName  FROM Club c  JOIN Member_of_club m ON c.ClubID = m.ClubID  JOIN Student s ON m.StuID = s.StuID  WHERE s.Fname = 'Steven' AND s.LName = 'Davis';
SELECT DISTINCT c.ClubName FROM Club c JOIN Member_of_club m ON c.ClubID = m.ClubID JOIN Student s ON m.StuID = s.StuID WHERE s.Advisor = '1121';
SELECT DISTINCT c.ClubID, c.ClubName FROM Club c JOIN Member_of_club m ON c.ClubID = m.ClubID JOIN Student s ON m.StuID = s.StuID WHERE s.Advisor = '1121';
SELECT AVG(s.Age) AS AverageAge FROM Student s JOIN Member_of_club m ON s.StuID = m.StuID JOIN Club c ON m.ClubID = c.ClubID WHERE c.ClubName = 'Bootup Baltimore';
SELECT AVG(s.Age) AS AverageAge FROM Student s JOIN Member_of_club m ON s.StuID = m.StuID JOIN Club c ON m.ClubID = c.ClubID WHERE c.ClubName = 'Bootup Baltimore';
SELECT AVG(s.Age) AS AverageAge FROM Student s JOIN Member_of_club m ON s.StuID = m.StuID JOIN Club c ON m.ClubID = c.ClubID WHERE c.ClubName = 'Hopkins Student Enterprises';
SELECT AVG(s.Age) AS AverageAge FROM Student s JOIN Member_of_club m ON s.StuID = m.StuID JOIN Club c ON m.ClubID = c.ClubID WHERE c.ClubName = 'Hopkins Student Enterprises';
SELECT AVG(s.Age) AS AverageAge FROM Student s JOIN Member_of_club m ON s.StuID = m.StuID JOIN Club c ON m.ClubID = c.ClubID WHERE c.ClubName = 'Tennis Club';
SELECT AVG(s.Age) AS AverageAge FROM Student s JOIN Member_of_club m ON s.StuID = m.StuID JOIN Club c ON m.ClubID = c.ClubID WHERE c.ClubName = 'Tennis Club';
SELECT DISTINCT g.grant_amount FROM Grants g JOIN Documents d ON g.grant_id = d.grant_id WHERE d.sent_date < '1986-08-26 20:49:27'  AND g.grant_end_date > '1989-03-16 18:27:16';
SELECT DISTINCT g.grant_amount FROM Grants g JOIN Documents d ON g.grant_id = d.grant_id WHERE d.sent_date < '1986-08-26 20:49:27'  AND g.grant_end_date > '1989-03-16 18:27:16';
SELECT p.project_details FROM Projects p JOIN Project_Outcomes po ON p.project_id = po.project_id WHERE po.outcome_code IN ('patent', 'paper') GROUP BY p.project_id HAVING COUNT(DISTINCT po.outcome_code) = 2;
SELECT p.project_id, p.project_details FROM Projects p JOIN Project_Outcomes po ON p.project_id = po.project_id JOIN Research_Outcomes ro ON po.outcome_code = ro.outcome_code WHERE ro.outcome_description IN ('patent', 'paper') GROUP BY p.project_id, p.project_details HAVING COUNT(DISTINCT ro.outcome_description) = 2;
SELECT SUM(g.grant_amount) AS total_grant_amount FROM Grants g JOIN Organisations o ON g.organisation_id = o.organisation_id JOIN Organisation_Types ot ON o.organisation_type = ot.organisation_type WHERE ot.organisation_type_description = 'research';
SELECT SUM(grant_amount) AS total_grant_money FROM Grants;
SELECT ps.date_from, ps.date_to FROM Project_Staff ps WHERE ps.project_id = (     SELECT project_id     FROM Project_Staff     GROUP BY project_id     ORDER BY COUNT(staff_id) DESC     LIMIT 1 );
SELECT ps.date_from, ps.date_to FROM Project_Staff ps JOIN Projects p ON ps.project_id = p.project_id JOIN Staff_Roles sr ON ps.role_code = sr.role_code WHERE sr.role_description = 'Leader' AND p.project_id = (     SELECT ps2.project_id     FROM Project_Staff ps2     GROUP BY ps2.project_id     ORDER BY COUNT(ps2.staff_id) DESC     LIMIT 1 );
SELECT organisation_id, organisation_details  FROM Organisations;
SELECT o.organisation_id, o.organisation_details FROM Organisations o JOIN Grants g ON o.organisation_id = g.organisation_id WHERE g.grant_amount > 6000;
SELECT o.organisation_type, o.organisation_id FROM Organisations o JOIN Research_Staff rs ON o.organisation_id = rs.employer_organisation_id GROUP BY o.organisation_type, o.organisation_id ORDER BY COUNT(rs.staff_id) DESC LIMIT 1;
SELECT o.organisation_type, o.organisation_id FROM Organisations o JOIN Research_Staff rs ON o.organisation_id = rs.employer_organisation_id GROUP BY o.organisation_type, o.organisation_id ORDER BY COUNT(rs.staff_id) DESC LIMIT 1;
SELECT ot.organisation_type, COUNT(rs.staff_id) AS staff_count FROM Organisation_Types ot JOIN Organisations o ON ot.organisation_type = o.organisation_type JOIN Research_Staff rs ON o.organisation_id = rs.employer_organisation_id GROUP BY ot.organisation_type ORDER BY staff_count DESC LIMIT 1;
SELECT ot.organisation_type_description FROM Organisations o JOIN Organisation_Types ot ON o.organisation_type = ot.organisation_type JOIN Research_Staff rs ON o.organisation_id = rs.employer_organisation_id GROUP BY o.organisation_id, ot.organisation_type_description ORDER BY COUNT(rs.staff_id) DESC LIMIT 1;
SELECT d.sent_date FROM Documents d JOIN Grants g ON d.grant_id = g.grant_id JOIN Organisations o ON g.organisation_id = o.organisation_id JOIN Organisation_Types ot ON o.organisation_type = ot.organisation_type WHERE g.grant_amount > 5000 AND ot.organisation_type_description IS NOT NULL;
SELECT d.sent_date FROM Documents d JOIN Grants g ON d.grant_id = g.grant_id WHERE g.grant_amount > 5000;
SELECT d.response_received_date FROM Documents d JOIN Document_Types dt ON d.document_type_code = dt.document_type_code JOIN Grants g ON d.grant_id = g.grant_id WHERE dt.document_description = 'Regular' OR g.grant_amount > 100;
SELECT d.response_received_date FROM Documents d JOIN Document_Types dt ON d.document_type_code = dt.document_type_code JOIN Grants g ON d.grant_id = g.grant_id WHERE dt.document_description = 'Regular' AND g.grant_amount > 100;
SELECT p.project_details FROM Projects p LEFT JOIN Project_Staff ps ON p.project_id = ps.project_id AND ps.role_code = (SELECT role_code FROM Staff_Roles WHERE role_description = 'Researcher') WHERE ps.staff_id IS NULL;
SELECT p.* FROM Projects p LEFT JOIN Project_Staff ps ON p.project_id = ps.project_id AND ps.role_code IN (SELECT role_code FROM Staff_Roles WHERE role_description LIKE '%research%') WHERE ps.staff_id IS NULL;
SELECT t.task_id, t.project_id, t.task_details FROM Tasks t JOIN Projects p ON t.project_id = p.project_id WHERE p.project_details = 'omnis'     OR (SELECT COUNT(*) FROM Project_Outcomes po WHERE po.project_id = p.project_id) > 2;
SELECT t.task_id, t.project_id, t.task_details FROM Tasks t JOIN Projects p ON t.project_id = p.project_id WHERE p.project_details = 'omnis' OR        (SELECT COUNT(*) FROM Project_Outcomes po WHERE po.project_id = p.project_id) >= 3;
SELECT MIN(date_from) AS start_date, MAX(date_to) AS end_date FROM Project_Staff WHERE role_code IN (SELECT role_code FROM Staff_Roles WHERE role_description LIKE '%Researcher%');
SELECT staff_id, date_from AS start_date, date_to AS end_date FROM Research_Staff;
SELECT COUNT(DISTINCT role_code) AS number_of_roles FROM Staff_Roles;
SELECT COUNT(DISTINCT role_code) AS different_roles FROM Project_Staff;
SELECT organisation_id, SUM(grant_amount) AS total_grants FROM Grants GROUP BY organisation_id;
SELECT o.organisation_id, SUM(g.grant_amount) AS total_grant_amount FROM Organisations o JOIN Grants g ON o.organisation_id = g.organisation_id GROUP BY o.organisation_id;
SELECT p.project_details FROM Projects p JOIN Project_Outcomes po ON p.project_id = po.project_id JOIN Research_Outcomes ro ON po.outcome_code = ro.outcome_code WHERE ro.outcome_description LIKE '%Published%';
SELECT p.project_id, p.project_details, ro.outcome_code, ro.outcome_description FROM Projects p JOIN Project_Outcomes po ON p.project_id = po.project_id JOIN Research_Outcomes ro ON po.outcome_code = ro.outcome_code WHERE ro.outcome_description LIKE '%published%';
SELECT project_id, COUNT(staff_id) AS staff_count FROM Project_Staff GROUP BY project_id ORDER BY project_id ASC;
SELECT project_id, COUNT(staff_id) AS staff_count FROM Project_Staff GROUP BY project_id ORDER BY project_id ASC;
SELECT role_description  FROM Staff_Roles  WHERE role_code = 'researcher';
SELECT staff_details  FROM Research_Staff;
SELECT project_id, MIN(date_from) AS first_staff_start_date FROM Project_Staff GROUP BY project_id;
SELECT MIN(date_from) AS first_staff_start_date FROM Project_Staff;
SELECT p.project_id, p.project_details FROM Projects p JOIN Project_Outcomes po ON p.project_id = po.project_id GROUP BY p.project_id, p.project_details ORDER BY COUNT(po.outcome_code) DESC LIMIT 1;
SELECT p.project_id, p.project_details FROM Projects p JOIN Project_Outcomes po ON p.project_id = po.project_id GROUP BY p.project_id, p.project_details ORDER BY COUNT(po.outcome_code) DESC LIMIT 1;
SELECT p.project_details FROM Projects p LEFT JOIN Project_Outcomes po ON p.project_id = po.project_id WHERE po.outcome_code IS NULL;
SELECT p.* FROM Projects p LEFT JOIN Project_Outcomes po ON p.project_id = po.project_id WHERE po.outcome_code IS NULL;
SELECT o.organisation_id, ot.organisation_type, o.organisation_details FROM Organisations o JOIN Organisation_Types ot ON o.organisation_type = ot.organisation_type JOIN Research_Staff rs ON o.organisation_id = rs.employer_organisation_id GROUP BY o.organisation_id, ot.organisation_type, o.organisation_details ORDER BY COUNT(rs.staff_id) DESC LIMIT 1;
SELECT o.organisation_id, o.organisation_type, o.organisation_details FROM Organisations o JOIN Research_Staff rs ON o.organisation_id = rs.employer_organisation_id GROUP BY o.organisation_id, o.organisation_type, o.organisation_details ORDER BY COUNT(rs.staff_id) DESC LIMIT 1;
SELECT ps.role_code, COUNT(po.outcome_code) AS outcome_count FROM Project_Staff ps JOIN Project_Outcomes po ON ps.project_id = po.project_id GROUP BY ps.role_code ORDER BY outcome_count DESC LIMIT 1;
SELECT ps.staff_id, sr.role_description FROM Project_Staff ps JOIN Staff_Roles sr ON ps.role_code = sr.role_code GROUP BY ps.staff_id, sr.role_description ORDER BY COUNT(ps.project_id) DESC LIMIT 1;
SELECT document_type_code, document_description  FROM Document_Types  WHERE document_description LIKE 'Initial%';
SELECT document_description  FROM Document_Types  WHERE document_description LIKE 'Initial%';
SELECT DISTINCT g.grant_start_date FROM Grants g JOIN Documents d1 ON g.grant_id = d1.grant_id JOIN Document_Types dt1 ON d1.document_type_code = dt1.document_type_code JOIN Documents d2 ON g.grant_id = d2.grant_id JOIN Document_Types dt2 ON d2.document_type_code = dt2.document_type_code WHERE dt1.document_description = 'Regular'    AND dt2.document_description = 'Initial Application';
SELECT g.grant_start_date FROM Grants g JOIN Documents d ON g.grant_id = d.grant_id JOIN Document_Types dt ON d.document_type_code = dt.document_type_code WHERE dt.document_description IN ('Regular Applications', 'Initial Applications');
SELECT grant_id, COUNT(document_id) AS document_count FROM Documents GROUP BY grant_id HAVING COUNT(document_id) = (     SELECT MAX(doc_count)     FROM (         SELECT COUNT(document_id) AS doc_count         FROM Documents         GROUP BY grant_id     ) AS subquery );
SELECT      g.grant_id,     COUNT(d.document_id) AS document_count,     MAX(d.sent_date) AS most_recent_document_date FROM      Grants g LEFT JOIN      Documents d ON g.grant_id = d.grant_id GROUP BY      g.grant_id;
SELECT ot.organisation_type_description  FROM Organisations o  JOIN Organisation_Types ot ON o.organisation_type = ot.organisation_type  WHERE o.organisation_details = 'quo';
SELECT ot.organisation_type_description FROM Organisations o JOIN Organisation_Types ot ON o.organisation_type = ot.organisation_type WHERE o.organisation_details = 'quo';
SELECT *  FROM Organisations  WHERE organisation_type = 'Sponsor'  ORDER BY organisation_id ASC;
SELECT *  FROM Organisations  WHERE organisation_type = 'Sponsors'  ORDER BY organisation_id ASC;
SELECT COUNT(*) AS patent_outcome_count FROM Project_Outcomes po JOIN Research_Outcomes ro ON po.outcome_code = ro.outcome_code WHERE ro.outcome_description = 'Patent';
SELECT COUNT(*) AS patent_outcomes_count FROM Project_Outcomes WHERE outcome_code = 'PATENT';
SELECT COUNT(*)  FROM Project_Staff  WHERE role_code IN (SELECT role_code FROM Staff_Roles WHERE role_description LIKE '%leader%')  AND date_from < '1989-04-24 23:51:54';
SELECT COUNT(*)  FROM Project_Staff  WHERE role_code IN (SELECT role_code FROM Staff_Roles WHERE role_description LIKE '%leader%')  AND date_from < '1989-04-24 23:51:54';
SELECT MAX(date_to) AS last_date_of_staff_leaving FROM Project_Staff;
SELECT MAX(date_to) AS last_date_left FROM Project_Staff;
SELECT ro.outcome_description FROM Projects p JOIN Project_Outcomes po ON p.project_id = po.project_id JOIN Research_Outcomes ro ON po.outcome_code = ro.outcome_code WHERE p.project_details = 'sint';
SELECT ro.outcome_description FROM Projects p JOIN Project_Outcomes po ON p.project_id = po.project_id JOIN Research_Outcomes ro ON po.outcome_code = ro.outcome_code WHERE p.project_details = 'sint';
SELECT organisation_id, COUNT(*) AS outcome_count FROM Projects p JOIN Project_Outcomes po ON p.project_id = po.project_id GROUP BY organisation_id ORDER BY outcome_count DESC LIMIT 1;
SELECT organisation_id, COUNT(outcome_code) AS outcome_count FROM Projects p JOIN Project_Outcomes po ON p.project_id = po.project_id GROUP BY organisation_id ORDER BY outcome_count DESC LIMIT 1;
SELECT p.project_details FROM Projects p JOIN Organisations o ON p.organisation_id = o.organisation_id;
SELECT p.project_id, p.project_details FROM Projects p WHERE p.organisation_id = (     SELECT organisation_id     FROM Projects     GROUP BY organisation_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT * FROM Research_Staff ORDER BY staff_id ASC;
SELECT * FROM Research_Staff ORDER BY staff_details ASC;
SELECT COUNT(*) AS total_tasks FROM Tasks;
SELECT COUNT(*) AS total_tasks FROM Tasks;
SELECT p.project_details, COUNT(t.task_id) AS task_count FROM Projects p LEFT JOIN Tasks t ON p.project_id = t.project_id GROUP BY p.project_details;
SELECT project_id, COUNT(task_id) AS task_count FROM Tasks GROUP BY project_id;
SELECT sr.role_description FROM Research_Staff rs JOIN Project_Staff ps ON rs.staff_id = ps.staff_id JOIN Staff_Roles sr ON ps.role_code = sr.role_code;
SELECT DISTINCT sr.role_code, sr.role_description FROM Project_Staff ps JOIN Staff_Roles sr ON ps.role_code = sr.role_code WHERE ps.date_from >= '2003-04-19 15:06:20' AND ps.date_to <= '2016-03-15 00:33:18';
SELECT outcome_details FROM Project_Outcomes;
SELECT ro.outcome_description FROM Project_Outcomes po JOIN Research_Outcomes ro ON po.outcome_code = ro.outcome_code;
SELECT role_code, COUNT(*) AS role_count FROM Project_Staff GROUP BY role_code ORDER BY role_count DESC LIMIT 1;
SELECT role_code, COUNT(*) AS role_count FROM Project_Staff GROUP BY role_code ORDER BY role_count DESC LIMIT 1;
SELECT COUNT(friend) AS friend_count FROM PersonFriend WHERE name = 'Dan';
SELECT COUNT(friend) AS friend_count FROM PersonFriend WHERE name = 'Dan';
SELECT COUNT(*) FROM Person WHERE gender = 'female';
SELECT COUNT(*) FROM Person WHERE gender = 'female';
SELECT AVG(age) AS average_age FROM Person;
SELECT AVG(age) AS average_age FROM Person;
SELECT COUNT(DISTINCT city) FROM Person;
SELECT COUNT(DISTINCT city) AS different_cities FROM Person;
SELECT COUNT(DISTINCT job) AS job_count FROM Person;
SELECT COUNT(DISTINCT job) FROM Person;
SELECT name, age FROM Person ORDER BY age DESC LIMIT 1;
SELECT name FROM Person ORDER BY age DESC LIMIT 1;
SELECT name, age FROM Person WHERE job = 'student' ORDER BY age DESC LIMIT 1;
SELECT name FROM Person WHERE job = 'student' ORDER BY age DESC LIMIT 1;
SELECT name, age FROM Person WHERE gender = 'male' ORDER BY age ASC LIMIT 1;
SELECT name FROM Person WHERE gender = 'male' ORDER BY age ASC LIMIT 1;
SELECT age FROM Person WHERE name = 'Zach' AND job = 'doctor';
SELECT age FROM Person WHERE name = 'Zach' AND job = 'doctor';
SELECT name FROM Person WHERE age < 30;
SELECT name FROM Person WHERE age < 30;
SELECT COUNT(*) FROM Person WHERE age > 30 AND job = 'engineer';
SELECT COUNT(*) FROM Person WHERE job = 'engineer' AND age > 30;
SELECT gender, AVG(age) AS average_age FROM Person GROUP BY gender;
SELECT gender, AVG(age) AS average_age FROM Person GROUP BY gender;
SELECT job, AVG(age) AS average_age FROM Person GROUP BY job;
SELECT job, AVG(age) AS average_age FROM Person GROUP BY job;
SELECT job, AVG(age) AS average_age FROM Person WHERE gender = 'male' GROUP BY job;
SELECT job, AVG(age) AS average_age FROM Person WHERE gender = 'male' GROUP BY job;
SELECT job, MIN(age) AS minimum_age FROM Person GROUP BY job;
SELECT job, MIN(age) AS youngest_age FROM network_2.Person GROUP BY job;
SELECT gender, COUNT(*) AS under_40_count FROM Person WHERE age < 40 GROUP BY gender;
SELECT gender, COUNT(*) AS under_40_count FROM Person WHERE age < 40 GROUP BY gender;
SELECT name  FROM Person  WHERE age > (SELECT MAX(age) FROM Person WHERE job = 'engineer')  ORDER BY age;
SELECT DISTINCT p.name FROM Person p WHERE p.age > (SELECT MIN(p2.age) FROM Person p2 WHERE p2.job = 'engineer') ORDER BY p.age;
SELECT COUNT(*)  FROM Person  WHERE age > (SELECT MAX(age) FROM Person WHERE job = 'engineer');
SELECT COUNT(*)  FROM Person  WHERE age > (SELECT MAX(age) FROM Person WHERE job = 'engineer');
SELECT name, job FROM Person ORDER BY name;
SELECT name, job FROM Person ORDER BY name;
SELECT name FROM Person ORDER BY age DESC;
SELECT name FROM Person ORDER BY age DESC;
SELECT name, age FROM Person WHERE gender = 'male' ORDER BY age;
SELECT name, age FROM Person WHERE gender = 'male' ORDER BY age;
SELECT DISTINCT pf1.name, p.age FROM PersonFriend pf1 JOIN PersonFriend pf2 ON pf1.friend = pf2.friend JOIN Person p ON pf1.friend = p.name WHERE pf1.name = 'Dan' AND pf2.name = 'Alice';
SELECT DISTINCT pf1.friend, p.age FROM PersonFriend pf1 JOIN PersonFriend pf2 ON pf1.friend = pf2.friend JOIN Person p ON pf1.friend = p.name WHERE pf1.name = 'Dan' AND pf2.name = 'Alice';
SELECT p.name, p.age  FROM Person p  JOIN PersonFriend pf ON p.name = pf.friend  WHERE pf.name IN ('Dan', 'Alice');
SELECT DISTINCT pf.friend AS name, p.age FROM PersonFriend pf JOIN Person p ON pf.friend = p.name WHERE pf.name IN ('Dan', 'alice');
SELECT DISTINCT p.name FROM Person p JOIN PersonFriend pf ON p.name = pf.name JOIN Person f ON pf.friend = f.name WHERE (f.age > 40 OR f.age < 30);
SELECT DISTINCT p1.name FROM Person p1 JOIN PersonFriend pf ON p1.name = pf.name JOIN Person p2 ON pf.friend = p2.name WHERE (p2.age > 40 OR p2.age < 30);
SELECT DISTINCT p.name FROM Person p JOIN PersonFriend pf ON p.name = pf.name JOIN Person f ON pf.friend = f.name WHERE f.age > 40 AND f.age < 30;
SELECT p.name FROM Person p WHERE p.age > 40 AND NOT EXISTS (     SELECT 1     FROM PersonFriend pf     JOIN Person pf2 ON pf.friend = pf2.name     WHERE pf.name = p.name AND pf2.age < 30 );
SELECT p.name  FROM Person p  WHERE p.name NOT IN (SELECT friend FROM PersonFriend WHERE friend IN (SELECT name FROM Person WHERE job = 'student'));
SELECT p.name  FROM Person p  WHERE p.name NOT IN (     SELECT pf.name      FROM PersonFriend pf      JOIN Person ps ON pf.friend = ps.name      WHERE ps.job = 'student' );
SELECT pf.name FROM PersonFriend pf GROUP BY pf.name HAVING COUNT(pf.friend) = 1;
SELECT name  FROM PersonFriend  GROUP BY name  HAVING COUNT(friend) = 1;
SELECT friend FROM PersonFriend WHERE name = 'Bob';
SELECT friend FROM PersonFriend WHERE name = 'Bob';
SELECT DISTINCT pf.friend  FROM PersonFriend pf  WHERE pf.name = 'Bob';
SELECT friend FROM PersonFriend WHERE name = 'Bob';
SELECT p.name  FROM Person p  JOIN PersonFriend pf ON p.name = pf.friend  WHERE pf.name = 'Zach' AND p.gender = 'female';
SELECT p.name  FROM Person p  JOIN PersonFriend pf ON p.name = pf.friend  WHERE pf.name = 'Zach' AND p.gender = 'female';
SELECT pf.friend  FROM PersonFriend pf  JOIN Person p ON pf.friend = p.name  WHERE pf.name = 'Alice' AND p.gender = 'female';
SELECT pf.friend  FROM PersonFriend pf  JOIN Person p ON pf.friend = p.name  WHERE pf.name = 'Alice' AND p.gender = 'female';
SELECT pf.friend  FROM Person p  JOIN PersonFriend pf ON p.name = pf.name  WHERE p.name = 'Alice' AND pf.friend IN (SELECT name FROM Person WHERE gender = 'male' AND job = 'doctor');
SELECT pf.friend  FROM PersonFriend pf  JOIN Person p ON pf.friend = p.name  WHERE pf.name = 'Alice' AND p.job = 'doctor';
SELECT DISTINCT p.name FROM Person p JOIN PersonFriend pf ON p.name = pf.name JOIN Person p2 ON pf.friend = p2.name WHERE p2.city = 'New York City';
SELECT DISTINCT pf.friend FROM PersonFriend pf JOIN Person p ON pf.friend = p.name WHERE p.city = 'New York';
SELECT DISTINCT p.name FROM Person p JOIN PersonFriend pf ON p.name = pf.name JOIN Person p2 ON pf.friend = p2.name WHERE p2.age < (SELECT AVG(age) FROM Person);
SELECT DISTINCT pf.friend FROM PersonFriend pf JOIN Person p ON pf.friend = p.name WHERE p.age < (SELECT AVG(age) FROM Person);
SELECT pf.friend, p.age FROM PersonFriend pf JOIN Person p ON pf.friend = p.name WHERE p.age > (SELECT AVG(age) FROM Person);
SELECT p.name, pf.friend, p.age FROM Person p JOIN PersonFriend pf ON p.name = pf.name WHERE p.age > (SELECT AVG(age) FROM Person);
SELECT friend  FROM PersonFriend  WHERE name = 'Zach'  ORDER BY year DESC  LIMIT 1;
SELECT friend  FROM PersonFriend  WHERE name = 'Zach'  ORDER BY year DESC  LIMIT 1;
SELECT p.age FROM PersonFriend pf JOIN Person p ON pf.friend = p.name WHERE pf.name = 'Zach' ORDER BY pf.year DESC LIMIT 1;
SELECT p.age FROM Person p JOIN PersonFriend pf ON p.name = pf.friend WHERE pf.name = 'Zach' AND pf.year = (     SELECT MAX(year)     FROM PersonFriend     WHERE name = 'Zach' );
SELECT pf.friend FROM PersonFriend pf WHERE pf.name = 'Alice' ORDER BY pf.year ASC LIMIT 1;
SELECT friend  FROM PersonFriend  WHERE name = 'Alice'  ORDER BY year ASC  LIMIT 1;
SELECT p.name, p.age, p.job FROM Person p JOIN PersonFriend pf ON p.name = pf.friend WHERE pf.name = 'Alice' ORDER BY pf.year DESC LIMIT 1;
SELECT p.name, p.age, p.job FROM Person p JOIN PersonFriend pf ON p.name = pf.friend WHERE pf.name = 'Alice' AND pf.year = (SELECT MAX(year) FROM PersonFriend WHERE name = 'Alice');
SELECT p.name  FROM Person p  LEFT JOIN PersonFriend pf ON p.name = pf.name  WHERE pf.friend IS NULL;
SELECT name FROM Person WHERE name NOT IN (SELECT DISTINCT name FROM PersonFriend);
SELECT p.name FROM Person p JOIN PersonFriend pf ON p.name = pf.name JOIN Person f ON pf.friend = f.name GROUP BY p.name ORDER BY AVG(f.age) DESC LIMIT 1;
SELECT pf.name, AVG(p.age) AS average_age FROM PersonFriend pf JOIN Person p ON pf.friend = p.name GROUP BY pf.name ORDER BY average_age DESC LIMIT 1;
SELECT COUNT(*)  FROM Person  WHERE name NOT IN (SELECT friend FROM PersonFriend WHERE friend IN (SELECT name FROM Person WHERE city = 'Austin'));
SELECT COUNT(*)  FROM Person  WHERE name NOT IN (SELECT friend FROM PersonFriend WHERE friend IN (SELECT name FROM Person WHERE city = 'Austin'));
SELECT DISTINCT pf2.friend FROM PersonFriend pf1 JOIN PersonFriend pf2 ON pf1.friend = pf2.name WHERE pf1.name = 'Alice';
SELECT DISTINCT pf2.friend FROM PersonFriend pf1 JOIN PersonFriend pf2 ON pf1.friend = pf2.name WHERE pf1.name = 'Alice';
SELECT COUNT(*) AS Total_Members FROM member;
SELECT Name FROM member ORDER BY Name ASC;
SELECT Name, Country FROM member;
SELECT Name FROM member WHERE Country IN ('United States', 'Canada');
SELECT Country, COUNT(Member_ID) AS Number_of_Members FROM member GROUP BY Country;
SELECT Country, COUNT(*) AS Country_Count FROM member GROUP BY Country ORDER BY Country_Count DESC LIMIT 1;
SELECT Country FROM member GROUP BY Country HAVING COUNT(Member_ID) > 2;
SELECT Leader_Name, College_Location FROM college;
SELECT member.Name AS Member_Name, college.Name AS College_Name FROM member JOIN college ON member.College_ID = college.College_ID;
SELECT m.Name AS Member_Name, c.College_Location FROM member m JOIN college c ON m.College_ID = c.College_ID ORDER BY m.Name ASC;
SELECT DISTINCT c.Leader_Name FROM college c JOIN member m ON c.College_ID = m.College_ID WHERE m.Country = 'Canada';
SELECT m.Name, r.Decoration_Theme FROM member m JOIN round r ON m.Member_ID = r.Member_ID;
SELECT m.Name  FROM member m  JOIN round r ON m.Member_ID = r.Member_ID  WHERE r.Rank_in_Round > 3;
SELECT m.Name  FROM member m  JOIN round r ON m.Member_ID = r.Member_ID  ORDER BY r.Rank_in_Round ASC;
SELECT m.Name FROM member m LEFT JOIN round r ON m.Member_ID = r.Member_ID WHERE r.Member_ID IS NULL;
SELECT document_name, access_count  FROM Documents  ORDER BY document_name ASC;
SELECT document_name, access_count  FROM Documents  ORDER BY document_name;
SELECT document_name, access_count FROM Documents ORDER BY access_count DESC LIMIT 1;
SELECT document_name, access_count FROM Documents ORDER BY access_count DESC LIMIT 1;
SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING COUNT(document_code) > 4;
SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING COUNT(*) >= 4;
SELECT SUM(access_count) AS total_access_count FROM Documents WHERE document_type_code = (     SELECT document_type_code     FROM Documents     GROUP BY document_type_code     ORDER BY SUM(access_count) DESC     LIMIT 1 );
SELECT SUM(access_count) AS total_access_count FROM Documents WHERE document_type_code = (     SELECT document_type_code     FROM Documents     GROUP BY document_type_code     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT AVG(access_count) AS average_access_count FROM Documents;
SELECT AVG(access_count) AS average_access_count FROM Documents;
SELECT ds.section_id, ds.section_title, ds.section_sequence FROM Documents d JOIN Document_Sections ds ON d.document_code = ds.document_code WHERE d.access_count = (SELECT MIN(access_count) FROM Documents);
SELECT ds.document_structure_description FROM Documents d JOIN Document_Structures ds ON d.document_structure_code = ds.document_structure_code ORDER BY d.access_count ASC LIMIT 1;
SELECT document_type_code  FROM Documents  WHERE document_name = 'David CV';
SELECT document_type_code  FROM Documents  WHERE document_name = 'David CV';
SELECT d.document_code, d.document_name FROM Documents d WHERE d.document_type_code IN (     SELECT document_type_code     FROM Documents     GROUP BY document_type_code     ORDER BY COUNT(*) DESC     LIMIT 3 ) AND d.document_structure_code IN (     SELECT document_structure_code     FROM Documents     GROUP BY document_structure_code     ORDER BY COUNT(*) DESC     LIMIT 3 );
SELECT d.document_name FROM Documents d WHERE d.document_type_code IN (     SELECT document_type_code     FROM Documents     GROUP BY document_type_code     ORDER BY COUNT(*) DESC     LIMIT 3 ) AND d.document_structure_code IN (     SELECT document_structure_code     FROM Documents     GROUP BY document_structure_code     ORDER BY COUNT(*) DESC     LIMIT 3 );
SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING SUM(access_count) > 10000;
SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING SUM(access_count) <= 10000;
SELECT ds.section_title  FROM Document_Sections ds JOIN Documents d ON ds.document_code = d.document_code WHERE d.document_name = 'David CV';
SELECT ds.section_title FROM Documents d JOIN Document_Sections ds ON d.document_code = ds.document_code WHERE d.document_name = 'David CV';
SELECT d.document_name FROM Documents d LEFT JOIN Document_Sections ds ON d.document_code = ds.document_code WHERE ds.section_id IS NULL;
SELECT document_name  FROM Documents  WHERE document_code NOT IN (SELECT DISTINCT document_code FROM Document_Sections);
SELECT user_name, password FROM Users WHERE role_code = (     SELECT role_code     FROM Users     GROUP BY role_code     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT user_name, password FROM Users WHERE role_code = (     SELECT role_code     FROM Users     GROUP BY role_code     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT AVG(D.access_count) AS average_access_count FROM Documents D JOIN Document_Functional_Areas DFA ON D.document_code = DFA.document_code JOIN Functional_Areas FA ON DFA.functional_area_code = FA.functional_area_code WHERE FA.functional_area_description = 'Acknowledgement';
SELECT AVG(D.access_count) AS average_access_count FROM Documents D JOIN Document_Functional_Areas DFA ON D.document_code = DFA.document_code JOIN Functional_Areas FA ON DFA.functional_area_code = FA.functional_area_code WHERE FA.functional_area_description = 'Acknowledgement';
SELECT d.document_name FROM Documents d LEFT JOIN Document_Sections ds ON d.document_code = ds.document_code LEFT JOIN Document_Sections_Images dsi ON ds.section_id = dsi.section_id WHERE dsi.image_id IS NULL;
SELECT d.document_name FROM Documents d LEFT JOIN Document_Sections ds ON d.document_code = ds.document_code LEFT JOIN Document_Sections_Images dsi ON ds.section_id = dsi.section_id WHERE dsi.image_id IS NULL;
SELECT d.document_name FROM Documents d JOIN Document_Sections ds ON d.document_code = ds.document_code GROUP BY d.document_code, d.document_name ORDER BY COUNT(ds.section_id) DESC LIMIT 1;
SELECT d.document_name FROM Documents d JOIN Document_Sections ds ON d.document_code = ds.document_code GROUP BY d.document_code, d.document_name ORDER BY COUNT(ds.section_id) DESC LIMIT 1;
SELECT document_name  FROM Documents  WHERE document_name LIKE '%CV%';
SELECT document_name  FROM Documents  WHERE document_name LIKE '%CV%';
SELECT COUNT(*) AS logged_in_users FROM Users WHERE user_login IS NOT NULL;
SELECT COUNT(*) AS logged_in_users FROM Users WHERE user_login IS NOT NULL;
SELECT r.role_description FROM Users u JOIN Roles r ON u.role_code = r.role_code GROUP BY r.role_description ORDER BY COUNT(u.user_id) DESC LIMIT 1;
SELECT r.role_description FROM Users u JOIN Roles r ON u.role_code = r.role_code GROUP BY r.role_description ORDER BY COUNT(u.user_id) DESC LIMIT 1;
SELECT AVG(access_count) AS average_access_count FROM Documents WHERE document_structure_code = (     SELECT document_structure_code     FROM Documents     GROUP BY document_structure_code     ORDER BY AVG(access_count) ASC     LIMIT 1 );
SELECT AVG(access_count) AS average_access_count FROM Documents WHERE document_structure_code = (     SELECT document_structure_code     FROM Documents     GROUP BY document_structure_code     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT image_name, image_url  FROM Images  ORDER BY image_name;
SELECT image_name, image_url  FROM Images  ORDER BY image_name ASC;
SELECT r.role_description, COUNT(u.user_id) AS user_count FROM Roles r LEFT JOIN Users u ON r.role_code = u.role_code GROUP BY r.role_description;
SELECT role_code, COUNT(user_id) AS user_count FROM Users GROUP BY role_code;
SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING COUNT(document_code) > 2;
SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING COUNT(document_code) > 2;
SELECT COUNT(*) FROM Companies;
SELECT COUNT(*) FROM Companies;
SELECT name FROM Companies ORDER BY Market_Value_billion DESC;
SELECT name FROM Companies ORDER BY Market_Value_billion DESC;
SELECT name FROM Companies WHERE Headquarters != 'USA';
SELECT name FROM Companies WHERE Headquarters != 'USA';
SELECT name, Assets_billion  FROM Companies  ORDER BY name ASC;
SELECT name, Assets_billion  FROM Companies  ORDER BY name ASC;
SELECT AVG(Profits_billion) AS average_profits FROM Companies;
SELECT AVG(Profits_billion) AS average_profits FROM Companies;
SELECT MAX(Sales_billion) AS max_sales, MIN(Sales_billion) AS min_sales FROM Companies WHERE Industry <> 'Banking';
SELECT MAX(Sales_billion) AS max_sales, MIN(Sales_billion) AS min_sales FROM Companies WHERE Industry <> 'Banking';
SELECT COUNT(DISTINCT Industry) AS different_industries FROM Companies;
SELECT COUNT(DISTINCT Industry) AS distinct_industry_count FROM Companies;
SELECT name FROM buildings ORDER BY Height DESC;
SELECT name FROM buildings ORDER BY Height DESC;
SELECT Stories FROM buildings WHERE Height = (SELECT MAX(Height) FROM buildings);
SELECT MAX(Stories) AS highest_stories FROM buildings;
SELECT buildings.name AS building_name, Companies.name AS company_name FROM buildings JOIN Office_locations ON buildings.id = Office_locations.building_id JOIN Companies ON Office_locations.company_id = Companies.id;
SELECT Companies.name AS company_name, buildings.name AS building_name FROM Companies JOIN Office_locations ON Companies.id = Office_locations.company_id JOIN buildings ON Office_locations.building_id = buildings.id;
SELECT b.name FROM buildings b JOIN Office_locations ol ON b.id = ol.building_id GROUP BY b.id, b.name HAVING COUNT(ol.company_id) > 1;
SELECT b.name FROM buildings b JOIN Office_locations ol ON b.id = ol.building_id GROUP BY b.id, b.name HAVING COUNT(ol.company_id) > 1;
SELECT b.name FROM buildings b JOIN Office_locations ol ON b.id = ol.building_id GROUP BY b.id, b.name ORDER BY COUNT(ol.company_id) DESC LIMIT 1;
SELECT b.name FROM buildings b JOIN Office_locations ol ON b.id = ol.building_id GROUP BY b.id, b.name ORDER BY COUNT(ol.company_id) DESC LIMIT 1;
SELECT name FROM buildings WHERE Status = 'on-hold' ORDER BY Stories ASC;
SELECT name FROM buildings WHERE Status = 'on-hold' ORDER BY Stories ASC;
SELECT Industry, COUNT(*) AS number_of_companies FROM Companies GROUP BY Industry;
SELECT Industry, COUNT(*) AS number_of_companies FROM Companies GROUP BY Industry;
SELECT Industry, COUNT(*) AS company_count FROM Companies GROUP BY Industry ORDER BY company_count DESC;
SELECT Industry, COUNT(*) AS company_count FROM Companies GROUP BY Industry ORDER BY company_count DESC;
SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Industry, COUNT(*) AS company_count FROM Companies GROUP BY Industry ORDER BY company_count DESC LIMIT 1;
SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations);
SELECT name  FROM buildings  WHERE id NOT IN (SELECT building_id FROM Office_locations);
SELECT DISTINCT c1.Industry FROM Companies c1 JOIN Companies c2 ON c1.Industry = c2.Industry WHERE c1.Headquarters = 'USA' AND c2.Headquarters = 'China';
SELECT DISTINCT c1.Industry FROM Companies c1 JOIN Companies c2 ON c1.Industry = c2.Industry WHERE c1.Headquarters = 'USA' AND c2.Headquarters = 'China';
SELECT COUNT(*)  FROM Companies  WHERE Industry IN ('Banking', 'Conglomerate');
SELECT COUNT(*)  FROM Companies  WHERE Industry IN ('Banking', 'Conglomerate');
SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*) > 2;
SELECT Headquarters, COUNT(DISTINCT company_id) AS company_count FROM Companies JOIN Office_locations ON Companies.id = Office_locations.company_id GROUP BY Headquarters HAVING COUNT(DISTINCT company_id) > 2;
SELECT COUNT(*) AS Total_Products FROM Products;
SELECT Product_Name  FROM Products  ORDER BY Product_Price ASC;
SELECT Product_Name, Product_Type_Code FROM Products;
SELECT Product_Price  FROM Products  WHERE Product_Name IN ('Dining', 'Trading Policy');
SELECT AVG(Product_Price) AS Average_Product_Price FROM Products;
SELECT Product_Name  FROM Products  ORDER BY Product_Price DESC  LIMIT 1;
SELECT Product_Type_Code, COUNT(*) AS Number_of_Products FROM Products GROUP BY Product_Type_Code;
SELECT Product_Type_Code, COUNT(*) AS Count FROM Products GROUP BY Product_Type_Code ORDER BY Count DESC LIMIT 1;
SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(Product_ID) >= 2;
SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500    OR Product_Price < 3000 GROUP BY Product_Type_Code HAVING COUNT(CASE WHEN Product_Price > 4500 THEN 1 END) > 0    AND COUNT(CASE WHEN Product_Price < 3000 THEN 1 END) > 0;
SELECT p.Product_Name, COUNT(pe.Event_ID) AS Number_of_Events FROM Products p LEFT JOIN Products_in_Events pe ON p.Product_ID = pe.Product_ID GROUP BY p.Product_Name;
SELECT p.Product_Name, COUNT(pie.Event_ID) AS Number_of_Events FROM Products p JOIN Products_in_Events pie ON p.Product_ID = pie.Product_ID GROUP BY p.Product_Name ORDER BY Number_of_Events DESC;
SELECT p.Product_Name FROM Products p JOIN Products_in_Events pie ON p.Product_ID = pie.Product_ID GROUP BY p.Product_Name HAVING COUNT(DISTINCT pie.Event_ID) >= 2;
SELECT p.Product_Name FROM Products p JOIN Products_in_Events pie ON p.Product_ID = pie.Product_ID GROUP BY p.Product_ID, p.Product_Name HAVING COUNT(DISTINCT pie.Event_ID) >= 2 ORDER BY p.Product_Name ASC;
SELECT Product_Name  FROM Products  WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events);
SELECT COUNT(*) AS Total_Artworks FROM artwork;
SELECT Name FROM artwork ORDER BY Name ASC;
SELECT Name FROM artwork WHERE Type <> 'Program Talent Show';
SELECT Festival_Name, Location FROM festival_detail;
SELECT Chair_Name  FROM festival_detail  ORDER BY Year ASC;
SELECT Location  FROM festival_detail  WHERE Num_of_Audience = (SELECT MAX(Num_of_Audience) FROM festival_detail);
SELECT Festival_Name  FROM festival_detail  WHERE Year = 2007;
SELECT AVG(Num_of_Audience) AS Average_Audience FROM festival_detail;
SELECT Festival_Name  FROM festival_detail  ORDER BY Year DESC  LIMIT 3;
SELECT a.Name AS Artwork_Name, f.Festival_Name FROM nomination n JOIN artwork a ON n.Artwork_ID = a.Artwork_ID JOIN festival_detail f ON n.Festival_ID = f.Festival_ID;
SELECT DISTINCT a.Type FROM artwork a JOIN nomination n ON a.Artwork_ID = n.Artwork_ID JOIN festival_detail f ON n.Festival_ID = f.Festival_ID WHERE f.Year = 2007;
SELECT a.Name FROM artwork a JOIN nomination n ON a.Artwork_ID = n.Artwork_ID JOIN festival_detail f ON n.Festival_ID = f.Festival_ID ORDER BY f.Year ASC;
SELECT DISTINCT fd.Festival_Name FROM festival_detail fd JOIN nomination n ON fd.Festival_ID = n.Festival_ID JOIN artwork a ON n.Artwork_ID = a.Artwork_ID WHERE a.Type = 'Program Talent Show';
SELECT fd.Festival_ID, fd.Festival_Name FROM festival_detail fd JOIN nomination n ON fd.Festival_ID = n.Festival_ID GROUP BY fd.Festival_ID, fd.Festival_Name HAVING COUNT(n.Artwork_ID) >= 2;
SELECT fd.Festival_ID, fd.Festival_Name, COUNT(n.Artwork_ID) AS Num_of_Artworks FROM festival_detail fd LEFT JOIN nomination n ON fd.Festival_ID = n.Festival_ID GROUP BY fd.Festival_ID, fd.Festival_Name;
SELECT Type, COUNT(*) AS Number_of_Artworks FROM artwork GROUP BY Type;
SELECT Type, COUNT(*) AS Count FROM artwork GROUP BY Type ORDER BY Count DESC LIMIT 1;
SELECT Year FROM festival_detail GROUP BY Year HAVING COUNT(Festival_ID) > 1;
SELECT Name  FROM artwork  WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination);
SELECT Num_of_Audience  FROM festival_detail  WHERE Year IN (2008, 2010);
SELECT SUM(Num_of_Audience) AS Total_Audience FROM festival_detail;
SELECT DISTINCT Year FROM festival_detail WHERE Location IN ('United States', 'Outside United States') GROUP BY Year HAVING COUNT(DISTINCT CASE WHEN Location = 'United States' THEN 1 END) > 0    AND COUNT(DISTINCT CASE WHEN Location <> 'United States' THEN 1 END) > 0;
SELECT COUNT(*) AS total_premises FROM Premises;
SELECT DISTINCT premises_type FROM Premises;
SELECT premises_type, premise_details  FROM Premises  ORDER BY premises_type;
SELECT premises_type, COUNT(*) AS number_of_premises FROM Premises GROUP BY premises_type;
SELECT product_category, COUNT(mailshot_id) AS mailshot_count FROM Mailshot_Campaigns GROUP BY product_category;
SELECT c.customer_name, c.customer_phone FROM Customers c LEFT JOIN Mailshot_Customers mc ON c.customer_id = mc.customer_id WHERE mc.mailshot_id IS NULL;
SELECT c.customer_name, c.customer_phone FROM Customers c JOIN Mailshot_Customers mc ON c.customer_id = mc.customer_id WHERE mc.outcome_code = 'No Response';
SELECT outcome_code, COUNT(mailshot_id) AS number_of_mailshots FROM Mailshot_Customers GROUP BY outcome_code;
SELECT c.customer_name FROM Customers c JOIN Mailshot_Customers mc ON c.customer_id = mc.customer_id WHERE mc.outcome_code = 'Order' GROUP BY c.customer_id, c.customer_name HAVING COUNT(mc.mailshot_id) >= 2;
SELECT c.customer_name FROM Customers c JOIN Mailshot_Customers mc ON c.customer_id = mc.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY COUNT(mc.mailshot_id) DESC LIMIT 1;
SELECT DISTINCT c.customer_name, c.payment_method FROM Customers c JOIN Mailshot_Customers mc1 ON c.customer_id = mc1.customer_id AND mc1.outcome_code = 'Order' JOIN Mailshot_Customers mc2 ON c.customer_id = mc2.customer_id AND mc2.outcome_code = 'No Response';
SELECT p.premises_type, ca.address_type_code FROM Customer_Addresses ca JOIN Premises p ON ca.premise_id = p.premise_id;
SELECT DISTINCT address_type_code FROM Customer_Addresses;
SELECT customer_id, order_shipping_charges  FROM Customer_Orders  WHERE order_status_code IN ('Cancelled', 'Paid');
SELECT DISTINCT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.shipping_method_code = 'FedEx' AND co.order_status_code = 'Paid';
SELECT COUNT(*) AS TotalCourses FROM Course;
SELECT COUNT(*) FROM Course;
SELECT COUNT(*)  FROM Course  WHERE Credits > 2;
SELECT COUNT(*)  FROM Course  WHERE Credits > 2;
SELECT CName FROM Course WHERE Credits = 1;
SELECT CName FROM Course WHERE Credits = 1;
SELECT CName  FROM Course  WHERE Days LIKE '%M%' AND Days LIKE '%T%' AND Days LIKE '%W%';
SELECT CName  FROM Course  WHERE Days LIKE '%M%' AND Days LIKE '%T%' AND Days LIKE '%W%';
SELECT COUNT(*) FROM Department WHERE Division = 'AS';
SELECT COUNT(*)  FROM Department  WHERE Division = 'AS';
SELECT DPhone  FROM Department  WHERE Room = '268';
SELECT DPhone  FROM Department  WHERE Room = '268';
SELECT COUNT(DISTINCT StuID)  FROM Enrolled_in  WHERE Grade = 'B';
SELECT COUNT(DISTINCT StuID)  FROM Enrolled_in  WHERE Grade = 'B';
SELECT MAX(gradepoint) AS MaxGradePoint, MIN(gradepoint) AS MinGradePoint FROM Gradeconversion;
SELECT MAX(gradepoint) AS MaxGradePoint, MIN(gradepoint) AS MinGradePoint FROM Gradeconversion;
SELECT Fname FROM Student WHERE Fname LIKE '%a%';
SELECT Fname FROM Student WHERE Fname LIKE '%a%';
SELECT Fname, Lname  FROM Faculty  WHERE Sex = 'M' AND Building = 'NEB';
SELECT Fname || ' ' || Lname AS FullName FROM Faculty WHERE Sex = 'M' AND Building = 'NEB';
SELECT Room  FROM Faculty  WHERE Rank = 'Professor' AND Building = 'NEB';
SELECT Faculty.Room FROM Faculty WHERE Faculty.Rank = 'Professor' AND Faculty.Building = 'NEB';
SELECT DName FROM Department WHERE Building = 'Mergenthaler';
SELECT DName  FROM Department  WHERE Building = 'Mergenthaler';
SELECT * FROM Course ORDER BY Credits ASC;
SELECT * FROM Course ORDER BY Credits ASC;
SELECT CName FROM Course ORDER BY Credits;
SELECT CName FROM Course ORDER BY Credits;
SELECT Fname FROM Student ORDER BY Age DESC;
SELECT Fname FROM Student ORDER BY Age DESC;
SELECT LName  FROM Student  WHERE Sex = 'F'  ORDER BY Age DESC;
SELECT LName  FROM Student  WHERE Sex = 'F'  ORDER BY Age DESC;
SELECT Lname  FROM Faculty  WHERE Building = 'Barton'  ORDER BY Lname;
SELECT Lname  FROM Faculty  WHERE Building = 'Barton'  ORDER BY Lname;
SELECT Fname  FROM Faculty  WHERE Rank = 'Professor'  ORDER BY Fname;
SELECT Fname  FROM Faculty  WHERE Rank = 'Professor'  ORDER BY Fname;
SELECT D.DName FROM Department D JOIN Minor_in M ON D.DNO = M.DNO GROUP BY D.DName ORDER BY COUNT(M.StuID) DESC LIMIT 1;
SELECT D.DName FROM Department D JOIN Minor_in M ON D.DNO = M.DNO GROUP BY D.DName ORDER BY COUNT(M.StuID) DESC LIMIT 1;
SELECT DName  FROM Department  WHERE DNO NOT IN (SELECT DNO FROM Minor_in);
SELECT DName  FROM Department  WHERE DNO NOT IN (SELECT DNO FROM Minor_in);
SELECT D.DName FROM Department D JOIN Member_of M ON D.DNO = M.DNO GROUP BY D.DName ORDER BY COUNT(M.FacID) ASC LIMIT 1;
SELECT D.DName FROM Department D JOIN Member_of M ON D.DNO = M.DNO GROUP BY D.DName ORDER BY COUNT(M.FacID) ASC LIMIT 1;
SELECT Rank FROM Faculty GROUP BY Rank ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Rank FROM Faculty GROUP BY Rank ORDER BY COUNT(*) ASC LIMIT 1;
SELECT F.Fname, F.Lname FROM Faculty F JOIN Course C ON F.FacID = C.Instructor GROUP BY F.FacID, F.Fname, F.Lname ORDER BY COUNT(C.CID) DESC LIMIT 3;
SELECT CONCAT(Fname, ' ', Lname) AS FullName FROM Faculty WHERE FacID IN (     SELECT Instructor     FROM Course     GROUP BY Instructor     ORDER BY COUNT(CID) DESC     LIMIT 3 );
SELECT Building FROM Faculty WHERE FacID = (     SELECT Instructor     FROM Course     GROUP BY Instructor     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT DISTINCT f.Building FROM Faculty f JOIN Course c ON f.FacID = c.Instructor GROUP BY f.FacID, f.Building ORDER BY COUNT(c.CID) DESC LIMIT 1;
SELECT C.CName FROM Course C JOIN Enrolled_in E ON C.CID = E.CID GROUP BY C.CID, C.CName HAVING COUNT(E.StuID) >= 5;
SELECT C.CName FROM Course C JOIN Enrolled_in E ON C.CID = E.CID GROUP BY C.CID, C.CName HAVING COUNT(E.StuID) >= 5;
SELECT Faculty.Fname, Faculty.Lname  FROM Course  JOIN Faculty ON Course.Instructor = Faculty.FacID  WHERE Course.CName = 'course name';
SELECT CONCAT(Faculty.Fname, ' ', Faculty.Lname) AS FullName FROM Faculty JOIN Course ON Faculty.FacID = Course.Instructor WHERE Course.CName = 'COMPUTER LITERACY';
SELECT D.DName, C.Room FROM Course C JOIN Department D ON C.DNO = D.DNO WHERE C.CName = 'INTRODUCTION TO COMPUTER SCIENCE';
SELECT Department.DName, Course.Room FROM Course JOIN Department ON Course.DNO = Department.DNO WHERE Course.CName = 'INTRODUCTION TO COMPUTER SCIENCE';
SELECT S.Fname, S.LName, GC.gradepoint FROM Student S JOIN Enrolled_in E ON S.StuID = E.StuID JOIN Gradeconversion GC ON E.Grade = GC.lettergrade;
SELECT CONCAT(s.Fname, ' ', s.LName) AS FullName, gc.gradepoint FROM Enrolled_in e JOIN Student s ON e.StuID = s.StuID JOIN Gradeconversion gc ON e.Grade = gc.lettergrade;
SELECT DISTINCT S.Fname FROM Student S JOIN Enrolled_in E ON S.StuID = E.StuID JOIN Gradeconversion G ON E.Grade = G.lettergrade WHERE G.gradepoint >= 3.8;
SELECT DISTINCT S.Fname FROM Student S JOIN Enrolled_in E ON S.StuID = E.StuID JOIN Gradeconversion G ON E.Grade = G.lettergrade WHERE G.gradepoint >= 3.8;
SELECT Fname || ' ' || Lname AS FullName FROM Faculty JOIN Member_of ON Faculty.FacID = Member_of.FacID WHERE Member_of.DNO = 520;
SELECT Fname || ' ' || Lname AS FullName FROM Faculty JOIN Member_of ON Faculty.FacID = Member_of.FacID WHERE Member_of.DNO = 520;
SELECT S.Fname, S.LName FROM Student S JOIN Minor_in M ON S.StuID = M.StuID WHERE M.DNO = 140;
SELECT S.Fname || ' ' || S.LName AS FullName FROM Student S JOIN Minor_in M ON S.StuID = M.StuID WHERE M.DNO = 140;
SELECT Faculty.Lname  FROM Faculty  JOIN Member_of ON Faculty.FacID = Member_of.FacID  JOIN Department ON Member_of.DNO = Department.DNO  WHERE Department.DName = 'Computer Science';
SELECT Faculty.Lname FROM Faculty JOIN Member_of ON Faculty.FacID = Member_of.FacID JOIN Department ON Member_of.DNO = Department.DNO WHERE Department.DName = 'Computer Science';
SELECT AVG(gc.gradepoint) AS AverageGradePoint FROM Student s JOIN Enrolled_in e ON s.StuID = e.StuID JOIN Gradeconversion gc ON e.Grade = gc.lettergrade WHERE s.LName = 'Smith';
SELECT AVG(gc.gradepoint) AS average_gradepoint FROM Student s JOIN Enrolled_in e ON s.StuID = e.StuID JOIN Gradeconversion gc ON e.Grade = gc.lettergrade WHERE s.LName = 'Smith';
SELECT MAX(gc.gradepoint) AS MaxGradePoint, MIN(gc.gradepoint) AS MinGradePoint FROM Student s JOIN Enrolled_in e ON s.StuID = e.StuID JOIN Gradeconversion gc ON e.Grade = gc.lettergrade WHERE s.city_code = 'NYC';
SELECT MAX(gc.gradepoint) AS MaxGradePoint, MIN(gc.gradepoint) AS MinGradePoint FROM Student s JOIN Enrolled_in e ON s.StuID = e.StuID JOIN Gradeconversion gc ON e.Grade = gc.lettergrade WHERE s.city_code = 'NYC';
SELECT CName  FROM Course  WHERE (Credits = 3 OR (Credits = 1 AND Hours = 4));
SELECT CName  FROM Course  WHERE Credits = 3 OR (Credits = 1 AND Hours = 4);
SELECT DName  FROM Department  WHERE (Division = 'AS' OR Division = 'EN') AND Building = 'NEB';
SELECT DName  FROM Department  WHERE Division = 'AS' OR (Division = 'EN' AND Building = 'NEB');
SELECT Fname  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Enrolled_in);
SELECT Fname  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Enrolled_in);
SELECT product_id FROM Product_Suppliers ORDER BY total_amount_purchased DESC LIMIT 3;
SELECT product_id FROM Product_Suppliers ORDER BY total_amount_purchased DESC LIMIT 3;
SELECT product_id, product_type_code  FROM Products  WHERE product_price = (SELECT MIN(product_price) FROM Products);
SELECT product_id, product_type_code  FROM Products  WHERE product_price = (SELECT MIN(product_price) FROM Products);
SELECT COUNT(DISTINCT product_type_code) AS number_of_different_product_types FROM Products;
SELECT COUNT(DISTINCT product_type_code) AS distinct_product_types FROM Products;
SELECT a.address_details  FROM Customer_Addresses ca  JOIN Addresses a ON ca.address_id = a.address_id  WHERE ca.customer_id = 10;
SELECT a.address_details  FROM Customer_Addresses ca  JOIN Addresses a ON ca.address_id = a.address_id  WHERE ca.customer_id = 10;
SELECT s.staff_id, s.staff_gender FROM Staff s JOIN Staff_Department_Assignments sda ON s.staff_id = sda.staff_id WHERE sda.job_title_code = 'Department Manager';
SELECT s.staff_id, s.staff_gender FROM Staff s JOIN Staff_Department_Assignments sda ON s.staff_id = sda.staff_id WHERE sda.job_title_code = 'Department Manager';
SELECT payment_method_code, COUNT(customer_id) AS customer_count FROM Customers GROUP BY payment_method_code;
SELECT payment_method_code, COUNT(*) AS customer_count FROM Customers GROUP BY payment_method_code;
SELECT order_items.product_id FROM order_items GROUP BY order_items.product_id ORDER BY COUNT(order_items.order_item_id) DESC LIMIT 1;
SELECT order_items.product_id FROM order_items GROUP BY order_items.product_id ORDER BY COUNT(order_items.order_item_id) DESC LIMIT 1;
SELECT c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code;
SELECT product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code;
SELECT COUNT(*)  FROM Department_Stores ds  JOIN Department_Store_Chain dsc ON ds.dept_store_chain_id = dsc.dept_store_chain_id  WHERE dsc.dept_store_chain_name = 'South';
SELECT COUNT(*)  FROM Department_Stores ds JOIN Department_Store_Chain dsc ON ds.dept_store_chain_id = dsc.dept_store_chain_id WHERE dsc.dept_store_chain_name = 'South';
SELECT s.staff_name, sda.job_title_code FROM Staff s JOIN Staff_Department_Assignments sda ON s.staff_id = sda.staff_id WHERE sda.date_assigned_from = (     SELECT MAX(date_assigned_from)     FROM Staff_Department_Assignments );
SELECT s.staff_name, sda.job_title_code FROM Staff s JOIN Staff_Department_Assignments sda ON s.staff_id = sda.staff_id WHERE sda.date_assigned_from = (     SELECT MAX(date_assigned_from)     FROM Staff_Department_Assignments );
SELECT p.product_type_code, p.product_name, p.product_price FROM Products p JOIN Product_Suppliers ps ON p.product_id = ps.product_id WHERE ps.supplier_id = 3;
SELECT p.product_type_code, p.product_name, p.product_price FROM Products p JOIN Product_Suppliers ps ON p.product_id = ps.product_id WHERE ps.supplier_id = 3;
SELECT DISTINCT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.order_status_code = 'Pending' ORDER BY c.customer_id;
SELECT DISTINCT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.order_status_code = 'Pending' ORDER BY c.customer_id;
SELECT c.customer_name, ca.address_id FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id WHERE co.order_status_code IN ('New', 'Pending') GROUP BY c.customer_id HAVING COUNT(DISTINCT co.order_status_code) = 2;
SELECT DISTINCT c.customer_name, ca.address_id FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id WHERE co.order_status_code IN ('New', 'Pending') GROUP BY c.customer_id HAVING COUNT(DISTINCT co.order_status_code) = 2;
SELECT p.product_id FROM Products p JOIN Product_Suppliers ps ON p.product_id = ps.product_id WHERE ps.supplier_id = 2 AND p.product_price > (SELECT AVG(product_price) FROM Products);
SELECT p.product_id FROM Products p JOIN Product_Suppliers ps ON p.product_id = ps.product_id WHERE ps.supplier_id = 2 AND p.product_price > (SELECT AVG(product_price) FROM Products);
SELECT ds.dept_store_id, ds.store_name FROM Department_Stores ds JOIN Departments d1 ON ds.dept_store_id = d1.dept_store_id AND d1.department_name = 'Marketing' JOIN Departments d2 ON ds.dept_store_id = d2.dept_store_id AND d2.department_name = 'Managing'
SELECT ds.dept_store_id, ds.store_name FROM Department_Stores ds JOIN Departments d1 ON ds.dept_store_id = d1.dept_store_id AND d1.department_name = 'Marketing' JOIN Departments d2 ON ds.dept_store_id = d2.dept_store_id AND d2.department_name = 'Managing';
SELECT dept_store_chain_id FROM Department_Stores GROUP BY dept_store_chain_id ORDER BY COUNT(dept_store_id) DESC LIMIT 2;
SELECT dept_store_chain_id FROM Department_Stores GROUP BY dept_store_chain_id ORDER BY COUNT(dept_store_id) DESC LIMIT 2;
SELECT department_id FROM Staff_Department_Assignments GROUP BY department_id ORDER BY COUNT(staff_id) ASC LIMIT 1;
SELECT department_id FROM Staff_Department_Assignments GROUP BY department_id ORDER BY COUNT(staff_id) ASC LIMIT 1;
SELECT product_type_code, MAX(product_price) AS max_price, MIN(product_price) AS min_price FROM Products GROUP BY product_type_code;
SELECT product_type_code, MAX(product_price) AS max_price, MIN(product_price) AS min_price FROM Products GROUP BY product_type_code;
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING AVG(product_price) > (SELECT AVG(product_price) FROM Products);
SELECT product_type_code  FROM Products  GROUP BY product_type_code  HAVING AVG(product_price) > (SELECT AVG(product_price) FROM Products);
SELECT staff_id, staff_name FROM Staff JOIN Staff_Department_Assignments ON Staff.staff_id = Staff_Department_Assignments.staff_id ORDER BY DATEDIFF(date_assigned_to, date_assigned_from) ASC LIMIT 1;
SELECT s.staff_id, s.staff_name FROM Staff s JOIN Staff_Department_Assignments sda ON s.staff_id = sda.staff_id ORDER BY DATEDIFF(COALESCE(sda.date_assigned_to, CURRENT_DATE), sda.date_assigned_from) ASC LIMIT 1;
SELECT product_id, product_name  FROM Products  WHERE product_price BETWEEN 600 AND 700;
SELECT product_id, product_name  FROM Products  WHERE product_price BETWEEN 600 AND 700;
SELECT DISTINCT co.customer_id FROM Customer_Orders co WHERE co.order_id IN (     SELECT co2.order_id     FROM Customer_Orders co2     WHERE co2.order_status_code = 'Cancelled' ) AND co.order_date > (     SELECT MAX(co3.order_date)     FROM Customer_Orders co3     WHERE co3.order_status_code = 'Cancelled' );
SELECT DISTINCT co.customer_id FROM Customer_Orders co WHERE co.order_date > (     SELECT MAX(co2.order_date)     FROM Customer_Orders co2     WHERE co2.order_status_code = 'Cancelled' );
SELECT s.staff_id FROM Staff s JOIN Staff_Department_Assignments sda ON s.staff_id = sda.staff_id WHERE sda.date_assigned_from < (     SELECT MIN(sda2.date_assigned_from)     FROM Staff_Department_Assignments sda2     JOIN Staff s2 ON sda2.staff_id = s2.staff_id     WHERE s2.job_title_code = 'Clerical' );
SELECT s.staff_id FROM Staff s JOIN Staff_Department_Assignments sda ON s.staff_id = sda.staff_id WHERE sda.date_assigned_from < (     SELECT MIN(sda2.date_assigned_from)     FROM Staff_Department_Assignments sda2     WHERE sda2.job_title_code = 'Clerical' );
SELECT c.customer_id, c.customer_name FROM Customers c JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id JOIN Addresses a ON ca.address_id = a.address_id WHERE a.address_details LIKE '%TN%';
SELECT c.customer_id, c.customer_name FROM Customers c JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id JOIN Addresses a ON ca.address_id = a.address_id WHERE a.address_details LIKE '%TN%';
SELECT s.staff_name, s.staff_gender FROM Staff s JOIN Staff_Department_Assignments sda ON s.staff_id = sda.staff_id WHERE sda.date_assigned_from >= '2016-01-01' AND sda.date_assigned_from < '2017-01-01';
SELECT s.staff_name, s.staff_gender FROM Staff s JOIN Staff_Department_Assignments sda ON s.staff_id = sda.staff_id WHERE sda.date_assigned_from >= '2016-01-01' AND sda.date_assigned_from < '2017-01-01';
SELECT s.staff_name FROM Staff s JOIN Staff_Department_Assignments sda ON s.staff_id = sda.staff_id GROUP BY s.staff_id, s.staff_name HAVING COUNT(sda.job_title_code) > 1;
SELECT s.staff_name FROM Staff s JOIN Staff_Department_Assignments sda ON s.staff_id = sda.staff_id GROUP BY s.staff_id, s.staff_name HAVING COUNT(sda.job_title_code) > 1;
SELECT s.supplier_name, s.supplier_phone FROM Suppliers s JOIN Supplier_Addresses sa ON s.supplier_id = sa.supplier_id JOIN Addresses a ON sa.address_id = a.address_id ORDER BY a.address_details;
SELECT s.supplier_name, s.supplier_phone FROM Suppliers s JOIN Supplier_Addresses sa ON s.supplier_id = sa.supplier_id JOIN Addresses a ON sa.address_id = a.address_id ORDER BY a.address_details;
SELECT customer_phone AS phone_number FROM Customers UNION SELECT supplier_phone AS phone_number FROM Suppliers;
SELECT customer_phone AS phone_number FROM Customers UNION SELECT supplier_phone AS phone_number FROM Suppliers;
SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_id) > 3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING SUM(total_amount_purchased) > 80000;
SELECT p.product_id FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id LEFT JOIN (     SELECT product_id, SUM(total_amount_purchased) AS total_amount     FROM Product_Suppliers     GROUP BY product_id ) ps ON p.product_id = ps.product_id GROUP BY p.product_id HAVING COUNT(oi.order_item_id) > 3 OR (ps.total_amount > 80000);
SELECT product_id, product_name  FROM Products  WHERE product_price < 600 OR product_price > 900;
SELECT product_id, product_name  FROM Products  WHERE product_price < 600 OR product_price > 900;
SELECT ps.supplier_id FROM Product_Suppliers ps GROUP BY ps.supplier_id HAVING AVG(ps.total_amount_purchased) > 50000 OR AVG(ps.total_amount_purchased) < 30000;
SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING AVG(total_amount_purchased) > 50000 OR AVG(total_amount_purchased) < 30000;
SELECT AVG(total_amount_purchased) AS average_amount, AVG(total_value_purchased) AS average_value FROM Product_Suppliers WHERE supplier_id = (     SELECT supplier_id     FROM Product_Suppliers     GROUP BY supplier_id     ORDER BY COUNT(product_id) DESC     LIMIT 1 );
SELECT AVG(total_amount_purchased) AS avg_total_amount, AVG(total_value_purchased) AS avg_total_value FROM Product_Suppliers WHERE supplier_id = (     SELECT supplier_id     FROM Product_Suppliers     GROUP BY supplier_id     ORDER BY COUNT(product_id) DESC     LIMIT 1 );
SELECT MAX(customer_code) AS largest_customer_code, MIN(customer_code) AS smallest_customer_code FROM Customers;
SELECT MAX(customer_code) AS max_customer_code, MIN(customer_code) AS min_customer_code FROM Customers;
SELECT DISTINCT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name LIKE '%keyboard%';
SELECT DISTINCT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name LIKE '%keyboard%';
SELECT DISTINCT s.supplier_name, s.supplier_phone FROM Suppliers s JOIN Product_Suppliers ps ON s.supplier_id = ps.supplier_id JOIN Products p ON ps.product_id = p.product_id WHERE p.product_name = 'red jeans';
SELECT DISTINCT s.supplier_name, s.supplier_phone FROM Suppliers s JOIN Product_Suppliers ps ON s.supplier_id = ps.supplier_id JOIN Products p ON ps.product_id = p.product_id WHERE p.product_name LIKE '%red jeans%';
SELECT product_type_code, MAX(product_price) AS highest_price, MIN(product_price) AS lowest_price FROM Products GROUP BY product_type_code ORDER BY product_type_code;
SELECT product_type_code, MAX(product_price) AS max_price, MIN(product_price) AS min_price FROM Products GROUP BY product_type_code ORDER BY product_type_code;
SELECT order_id, customer_id  FROM Customer_Orders  WHERE order_status_code = 'Cancelled'  ORDER BY order_date;
SELECT order_id, customer_id  FROM Customer_Orders  WHERE order_status_code = 'Cancelled'  ORDER BY order_date;
SELECT p.product_name FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Customer_Orders co ON oi.order_id = co.order_id GROUP BY p.product_id HAVING COUNT(DISTINCT co.customer_id) >= 2;
SELECT DISTINCT p.product_name FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Customer_Orders co ON oi.order_id = co.order_id GROUP BY p.product_id HAVING COUNT(DISTINCT co.customer_id) >= 2;
SELECT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY c.customer_id, c.customer_name HAVING COUNT(DISTINCT oi.product_id) >= 3;
SELECT DISTINCT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY c.customer_id HAVING COUNT(DISTINCT oi.product_id) >= 3;
SELECT s.staff_name, s.staff_gender FROM Staff s JOIN Staff_Department_Assignments sda ON s.staff_id = sda.staff_id WHERE sda.job_title_code = 'Sales Person' AND s.staff_id NOT IN (     SELECT sda2.staff_id     FROM Staff_Department_Assignments sda2     WHERE sda2.job_title_code = 'Clerical Staff' );
SELECT DISTINCT s.staff_name, s.staff_gender FROM Staff s JOIN Staff_Department_Assignments sda ON s.staff_id = sda.staff_id WHERE sda.job_title_code = 'Sales Person' AND s.staff_id NOT IN (     SELECT sda2.staff_id     FROM Staff_Department_Assignments sda2     WHERE sda2.job_title_code = 'Clerical Staff' );
SELECT c.customer_id, c.customer_name FROM Customers c JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id JOIN Addresses a ON ca.address_id = a.address_id WHERE a.address_details LIKE '%WY%' AND c.payment_method_code <> 'CREDIT_CARD';
SELECT c.customer_id, c.customer_name FROM Customers c JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id JOIN Addresses a ON ca.address_id = a.address_id WHERE a.address_details LIKE '%WY%' AND c.payment_method_code <> 'CREDIT_CARD';
SELECT AVG(product_price) AS average_clothing_price FROM Products WHERE product_type_code = 'clothes';
SELECT AVG(product_price) AS average_price FROM Products WHERE product_type_code = 'clothes';
SELECT product_name  FROM Products  WHERE product_type_code = 'hardware'  ORDER BY product_price DESC  LIMIT 1;
SELECT product_name  FROM Products  WHERE product_type_code = 'hardware'  ORDER BY product_price DESC  LIMIT 1;
SELECT COUNT(*) FROM aircraft;
SELECT COUNT(*) AS Number_of_Aircraft FROM aircraft;
SELECT Description FROM aircraft;
SELECT Description FROM aircraft;
SELECT AVG(International_Passengers) AS Average_International_Passengers FROM airport;
SELECT AVG(International_Passengers) AS Average_International_Passengers FROM airport;
SELECT International_Passengers, Domestic_Passengers  FROM airport  WHERE Airport_Name = 'London Heathrow';
SELECT International_Passengers, Domestic_Passengers  FROM airport  WHERE Airport_Name = 'London Heathrow';
SELECT SUM(Domestic_Passengers) AS Total_Domestic_Passengers FROM airport WHERE Airport_Name LIKE '%London%';
SELECT SUM(Domestic_Passengers) AS Total_Domestic_Passengers FROM airport WHERE Airport_Name LIKE '%London%';
SELECT MAX(Transit_Passengers) AS Max_Transit_Passengers, MIN(Transit_Passengers) AS Min_Transit_Passengers FROM airport;
SELECT MAX(Transit_Passengers) AS Max_Transit_Passengers, MIN(Transit_Passengers) AS Min_Transit_Passengers FROM airport;
SELECT Name FROM pilot WHERE Age >= 25;
SELECT Name FROM pilot WHERE Age >= 25;
SELECT Name FROM pilot ORDER BY Name ASC;
SELECT Name FROM pilot ORDER BY Name ASC;
SELECT Name FROM pilot WHERE Age <= 30 ORDER BY Name DESC;
SELECT Name FROM pilot WHERE Age <= 30 ORDER BY Name DESC;
SELECT a.Aircraft FROM aircraft a JOIN airport_aircraft aa ON a.Aircraft_ID = aa.Aircraft_ID JOIN airport ap ON aa.Airport_ID = ap.Airport_ID WHERE ap.Airport_Name = 'London Gatwick';
SELECT a.Aircraft FROM aircraft a JOIN airport_aircraft aa ON a.Aircraft_ID = aa.Aircraft_ID JOIN airport ap ON aa.Airport_ID = ap.Airport_ID WHERE ap.Airport_Name = 'London Gatwick';
SELECT a.Aircraft, a.Description FROM aircraft a JOIN airport_aircraft aa ON a.Aircraft_ID = aa.Aircraft_ID JOIN airport ap ON aa.Airport_ID = ap.Airport_ID WHERE ap.Total_Passengers > 10000000;
SELECT a.Aircraft, a.Description FROM aircraft a JOIN airport_aircraft aa ON a.Aircraft_ID = aa.Aircraft_ID JOIN airport ap ON aa.Airport_ID = ap.Airport_ID WHERE ap.Total_Passengers > 10000000;
SELECT AVG(Total_Passengers) AS Average_Passengers FROM airport WHERE Airport_ID IN (     SELECT Airport_ID     FROM airport_aircraft     WHERE Aircraft_ID IN (         SELECT Aircraft_ID         FROM aircraft         WHERE Aircraft = 'Robinson R-22'     ) );
SELECT AVG(Total_Passengers) AS Average_Total_Passengers FROM airport JOIN airport_aircraft ON airport.Airport_ID = airport_aircraft.Airport_ID JOIN aircraft ON airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID WHERE aircraft.Aircraft = 'Robinson R-22';
SELECT Location, Winning_Aircraft FROM match;
SELECT Location, Winning_Aircraft FROM match;
SELECT Winning_Aircraft FROM match GROUP BY Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Winning_Aircraft, COUNT(*) AS Award_Count FROM match GROUP BY Winning_Aircraft ORDER BY Award_Count DESC LIMIT 1;
SELECT a.Aircraft, COUNT(m.Winning_Aircraft) AS Wins FROM aircraft a LEFT JOIN match m ON a.Aircraft_ID = m.Winning_Aircraft GROUP BY a.Aircraft;
SELECT a.Aircraft, COUNT(m.Winning_Aircraft) AS Win_Count FROM aircraft a JOIN match m ON a.Aircraft_ID = m.Winning_Aircraft GROUP BY a.Aircraft;
SELECT Name FROM pilot ORDER BY Age DESC;
SELECT Name FROM pilot ORDER BY Age DESC;
SELECT a.Aircraft FROM aircraft a JOIN match m ON a.Aircraft_ID = m.Winning_Aircraft GROUP BY a.Aircraft HAVING COUNT(m.Round) >= 2;
SELECT Winning_Aircraft FROM match GROUP BY Winning_Aircraft HAVING COUNT(*) >= 2;
SELECT a.Aircraft FROM aircraft a LEFT JOIN match m ON a.Aircraft_ID = m.Winning_Aircraft WHERE m.Winning_Aircraft IS NULL;
SELECT a.Aircraft FROM aircraft a LEFT JOIN match m ON a.Aircraft_ID = m.Winning_Aircraft WHERE m.Winning_Aircraft IS NULL;
SELECT DISTINCT a.Aircraft FROM aircraft a JOIN airport_aircraft aa ON a.Aircraft_ID = aa.Aircraft_ID JOIN airport ap1 ON aa.Airport_ID = ap1.Airport_ID JOIN airport ap2 ON aa.Airport_ID = ap2.Airport_ID WHERE ap1.Airport_Name = 'London Heathrow' AND ap2.Airport_Name = 'London Gatwick';
SELECT DISTINCT a.Aircraft FROM aircraft a JOIN airport_aircraft aa ON a.Aircraft_ID = aa.Aircraft_ID JOIN airport ap ON aa.Airport_ID = ap.Airport_ID WHERE ap.Airport_Name IN ('London Heathrow', 'Gatwick') GROUP BY a.Aircraft HAVING COUNT(DISTINCT ap.Airport_Name) = 2;
SELECT *  FROM airport  WHERE International_Passengers = (SELECT MAX(International_Passengers) FROM airport);
SELECT * FROM airport WHERE International_Passengers = (SELECT MAX(International_Passengers) FROM airport);
SELECT p.Name, p.Age FROM pilot p JOIN match m ON p.Pilot_Id = m.Winning_Pilot WHERE p.Age < 30 GROUP BY p.Pilot_Id ORDER BY COUNT(m.Winning_Pilot) DESC LIMIT 1;
SELECT p.Name, p.Age FROM pilot p JOIN match m ON p.Pilot_Id = m.Winning_Pilot WHERE p.Age < 30 GROUP BY p.Pilot_Id ORDER BY COUNT(m.Winning_Pilot) DESC LIMIT 1;
SELECT Name, Age  FROM pilot  WHERE Pilot_Id = (SELECT Winning_Pilot                    FROM match                    ORDER BY Date DESC                    LIMIT 1)  ORDER BY Age ASC  LIMIT 1;
SELECT Name, Age  FROM pilot  WHERE Pilot_Id IN (SELECT Winning_Pilot FROM match)  ORDER BY Age ASC  LIMIT 1;
SELECT DISTINCT p.Name FROM pilot p WHERE p.Pilot_Id NOT IN (     SELECT m.Winning_Pilot     FROM match m     WHERE m.Country = 'Australia' );
SELECT p.Name FROM pilot p WHERE p.Pilot_Id NOT IN (     SELECT m.Winning_Pilot     FROM match m     WHERE m.Country = 'Australia' );
SELECT p.property_id, COUNT(r.resident_id) AS resident_count FROM Properties p LEFT JOIN Residents r ON p.property_id = r.property_id GROUP BY p.property_id;
SELECT DISTINCT s.service_type_code FROM Services s JOIN Organizations o ON s.organization_id = o.organization_id WHERE o.organization_details = 'Denesik and Sons Party';
SELECT r.resident_id, r.other_details, COUNT(rs.service_id) AS service_count FROM Residents r LEFT JOIN Residents_Services rs ON r.resident_id = rs.resident_id GROUP BY r.resident_id, r.other_details ORDER BY service_count DESC;
SELECT      s.service_id,      s.service_details,      COUNT(rs.service_id) AS number_provided FROM      Services s LEFT JOIN      Residents_Services rs ON s.service_id = rs.service_id GROUP BY      s.service_id, s.service_details ORDER BY      number_provided DESC LIMIT 1;
SELECT t.thing_id, t.Type_of_Thing_Code, o.organization_details FROM Things t JOIN Organizations o ON t.organization_id = o.organization_id;
SELECT c.customer_id, c.customer_details FROM Customers c JOIN Customer_Events ce ON c.customer_id = ce.customer_id GROUP BY c.customer_id, c.customer_details HAVING COUNT(ce.Customer_Event_ID) >= 3;
SELECT c.customer_id, c.customer_details, ce.date_moved_in FROM Customers c JOIN Customer_Events ce ON c.customer_id = ce.customer_id;
SELECT ce.Customer_Event_ID, ce.property_id FROM Customer_Events ce JOIN Customer_Event_Notes cen ON ce.Customer_Event_ID = cen.Customer_Event_ID GROUP BY ce.Customer_Event_ID, ce.property_id HAVING COUNT(cen.Customer_Event_Note_ID) BETWEEN 1 AND 3;
SELECT DISTINCT t.thing_id, t.Type_of_Thing_Code FROM Things t JOIN Timed_Status_of_Things ts ON t.thing_id = ts.thing_id WHERE ts.Status_of_Thing_Code = 'Close'    OR ts.Date_and_Date < '2017-06-19 02:59:21';
SELECT COUNT(DISTINCT tl.Location_Code) AS distinct_locations FROM Things t JOIN Timed_Locations_of_Things tl ON t.thing_id = tl.thing_id WHERE t.service_details = 'Unsatisfied';
SELECT COUNT(DISTINCT Status_of_Thing_Code) AS different_status_codes FROM Timed_Status_of_Things;
SELECT organization_id  FROM Organizations  WHERE organization_id NOT IN (SELECT parent_organization_id FROM Organizations WHERE parent_organization_id IS NOT NULL);
SELECT MAX(date_moved_in) AS last_move_in_date FROM Residents;
SELECT * FROM Residents WHERE other_details LIKE '%Miss%';
SELECT Customer_Event_ID, date_moved_in, property_id  FROM Customer_Events;
SELECT COUNT(*) AS customers_without_events FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Customer_Events);
SELECT DISTINCT date_moved_in FROM Residents;
SELECT COUNT(*) FROM school;
SELECT COUNT(*) AS Number_of_Schools FROM school;
SELECT Location FROM school ORDER BY Enrollment ASC;
SELECT Location FROM school ORDER BY Enrollment ASC;
SELECT Location FROM school ORDER BY Founded DESC;
SELECT Location  FROM school  ORDER BY Founded DESC;
SELECT Enrollment  FROM school  WHERE Denomination <> 'Catholic';
SELECT School, Enrollment  FROM school  WHERE Denomination <> 'Catholic';
SELECT AVG(Enrollment) AS Average_Enrollment FROM school;
SELECT AVG(Enrollment) AS Average_Enrollment FROM school;
SELECT DISTINCT Team FROM player ORDER BY Team ASC;
SELECT Team FROM player ORDER BY Team ASC;
SELECT COUNT(DISTINCT Position) AS Different_Positions FROM player;
SELECT COUNT(DISTINCT Position) AS Distinct_Player_Positions FROM player;
SELECT Team  FROM player  WHERE Age = (SELECT MAX(Age) FROM player);
SELECT Team  FROM player  WHERE Age = (SELECT MAX(Age) FROM player);
SELECT Team  FROM player  WHERE Age IN (SELECT DISTINCT Age                 FROM player                 ORDER BY Age DESC                 LIMIT 5);
SELECT Team FROM player ORDER BY Age DESC LIMIT 5;
SELECT p.Player, p.Team, s.Location FROM player p JOIN school s ON p.School_ID = s.School_ID;
SELECT p.Team, s.Location FROM player p JOIN school s ON p.School_ID = s.School_ID;
SELECT s.Location FROM school s JOIN player p ON s.School_ID = p.School_ID GROUP BY s.Location HAVING COUNT(p.Player_ID) > 1;
SELECT s.Location FROM school s JOIN player p ON s.School_ID = p.School_ID GROUP BY s.School_ID, s.Location HAVING COUNT(p.Player_ID) > 1;
SELECT s.Denomination FROM school s JOIN player p ON s.School_ID = p.School_ID GROUP BY s.Denomination ORDER BY COUNT(p.Player_ID) DESC LIMIT 1;
SELECT s.Denomination FROM player p JOIN school s ON p.School_ID = s.School_ID GROUP BY s.Denomination ORDER BY COUNT(p.Player_ID) DESC LIMIT 1;
SELECT s.Location, sd.Nickname FROM school s JOIN school_details sd ON s.School_ID = sd.School_ID;
SELECT s.Location, sd.Nickname FROM school s JOIN school_details sd ON s.School_ID = sd.School_ID;
SELECT Denomination, COUNT(*) AS Number_of_Schools FROM school GROUP BY Denomination;
SELECT Denomination, COUNT(*) AS School_Count FROM school GROUP BY Denomination;
SELECT Denomination, COUNT(*) AS Number_of_Schools FROM school GROUP BY Denomination ORDER BY Number_of_Schools DESC;
SELECT Denomination, COUNT(*) AS School_Count FROM school GROUP BY Denomination ORDER BY School_Count DESC;
SELECT School_Colors  FROM school  ORDER BY Enrollment DESC  LIMIT 1;
SELECT School_Colors  FROM school  WHERE Enrollment = (SELECT MAX(Enrollment) FROM school);
SELECT Location  FROM school  WHERE School_ID NOT IN (SELECT DISTINCT School_ID FROM player);
SELECT s.Location FROM school s LEFT JOIN player p ON s.School_ID = p.School_ID WHERE p.Player_ID IS NULL;
SELECT DISTINCT s1.Denomination FROM school s1 JOIN school s2 ON s1.Denomination = s2.Denomination WHERE s1.Founded < 1890 AND s2.Founded > 1900;
SELECT DISTINCT s1.Denomination FROM school s1 WHERE s1.Founded < 1890 AND s1.Denomination IN (     SELECT DISTINCT s2.Denomination     FROM school s2     WHERE s2.Founded > 1900 );
SELECT sd.Nickname  FROM school_details sd  WHERE sd.Division <> '1';
SELECT sd.Nickname  FROM school_details sd  WHERE sd.Division <> 1;
SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(School_ID) > 1;
SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(School_ID) > 1;
SELECT DISTINCT District_name  FROM district  ORDER BY City_Area DESC;
SELECT DISTINCT District_name  FROM district  ORDER BY City_Area DESC;
SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(product_id) > 3;
SELECT MAX(p.max_page_size)  FROM product p  JOIN store_product sp ON p.product_id = sp.Product_ID  GROUP BY sp.Store_ID  HAVING COUNT(sp.Product_ID) > 3;
SELECT District_name, City_Population  FROM district  WHERE City_Population BETWEEN 200000 AND 2000000;
SELECT District_name, City_Population  FROM district  WHERE City_Population BETWEEN 200000 AND 2000000;
SELECT District_name  FROM district  WHERE City_Area > 10 OR City_Population > 100000;
SELECT District_name  FROM district  WHERE City_Area > 10 OR City_Population > 100000;
SELECT District_name  FROM district  ORDER BY City_Population DESC  LIMIT 1;
SELECT District_name  FROM district  ORDER BY City_Population DESC  LIMIT 1;
SELECT District_name FROM district ORDER BY City_Area ASC LIMIT 1;
SELECT District_name  FROM district  ORDER BY City_Area  LIMIT 1;
SELECT SUM(City_Population) AS Total_Population FROM district WHERE District_ID IN (     SELECT District_ID     FROM district     ORDER BY City_Area DESC     LIMIT 3 );
SELECT SUM(City_Population) AS Total_Residents FROM district WHERE District_ID IN (     SELECT District_ID     FROM district     ORDER BY City_Area DESC     LIMIT 3 );
SELECT Type, COUNT(*) AS Number_of_Stores FROM store GROUP BY Type;
SELECT Type, COUNT(*) AS Store_Count FROM store GROUP BY Type;
SELECT s.Store_Name  FROM store s JOIN store_district sd ON s.Store_ID = sd.Store_ID JOIN district d ON sd.District_ID = d.District_ID WHERE d.District_name = 'Khanewal';
SELECT s.Store_Name FROM store s JOIN store_district sd ON s.Store_ID = sd.Store_ID JOIN district d ON sd.District_ID = d.District_ID WHERE d.District_name = 'Khanewal';
SELECT s.Store_Name FROM store s JOIN store_district sd ON s.Store_ID = sd.Store_ID JOIN district d ON sd.District_ID = d.District_ID WHERE d.City_Population = (SELECT MAX(City_Population) FROM district);
SELECT s.Store_Name FROM store s JOIN store_district sd ON s.Store_ID = sd.Store_ID JOIN district d ON sd.District_ID = d.District_ID WHERE d.City_Population = (SELECT MAX(City_Population) FROM district);
SELECT d.Headquartered_City FROM store s JOIN store_district sd ON s.Store_ID = sd.Store_ID JOIN district d ON sd.District_ID = d.District_ID WHERE s.Store_Name = 'Blackville';
SELECT d.Headquartered_City  FROM store s  JOIN store_district sd ON s.Store_ID = sd.Store_ID  JOIN district d ON sd.District_ID = d.District_ID  WHERE s.Store_Name = 'Blackville';
SELECT d.Headquartered_City, COUNT(s.Store_ID) AS Number_of_Stores FROM store s JOIN store_district sd ON s.Store_ID = sd.Store_ID JOIN district d ON sd.District_ID = d.District_ID GROUP BY d.Headquartered_City;
SELECT Headquartered_City, COUNT(Store_ID) AS Number_of_Stores FROM store_district sd JOIN district d ON sd.District_ID = d.District_ID GROUP BY Headquartered_City;
SELECT d.Headquartered_City FROM store_district sd JOIN district d ON sd.District_ID = d.District_ID GROUP BY d.Headquartered_City ORDER BY COUNT(sd.Store_ID) DESC LIMIT 1;
SELECT d.District_name FROM store s JOIN store_district sd ON s.Store_ID = sd.Store_ID JOIN district d ON sd.District_ID = d.District_ID WHERE s.Type = 'Flagship' GROUP BY d.District_name ORDER BY COUNT(s.Store_ID) DESC LIMIT 1;
SELECT AVG(pages_per_minute_color) AS average_pages_per_minute_color FROM product;
SELECT AVG(pages_per_minute_color) AS average_pages_per_minute_color FROM product;
SELECT p.product FROM product p JOIN store_product sp ON p.product_id = sp.Product_ID JOIN store s ON sp.Store_ID = s.Store_ID WHERE s.Store_Name = 'Miramichi';
SELECT p.product FROM product p JOIN store_product sp ON p.product_id = sp.Product_ID JOIN store s ON sp.Store_ID = s.Store_ID WHERE s.Store_Name = 'Miramichi';
SELECT *  FROM product  WHERE max_page_size = 'A4' AND pages_per_minute_color < 5;
SELECT p.product FROM product p WHERE p.max_page_size = 'A4' AND p.pages_per_minute_color < 5;
SELECT * FROM product  WHERE max_page_size = 'A4' OR pages_per_minute_color < 5;
SELECT p.* FROM product p WHERE p.max_page_size = 'A4' OR p.pages_per_minute_color < 5;
SELECT * FROM product WHERE product LIKE '%Scanner%';
SELECT * FROM product WHERE product LIKE '%Scanner%';
SELECT MAX(max_page_size) AS most_prominent_max_page_size FROM product;
SELECT max_page_size, COUNT(*) AS count FROM product GROUP BY max_page_size ORDER BY count DESC LIMIT 1;
SELECT p.product FROM product p WHERE p.max_page_size <> (     SELECT max_page_size     FROM product     GROUP BY max_page_size     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT product FROM product WHERE max_page_size <> (     SELECT MAX(max_page_size)     FROM product );
SELECT SUM(City_Population) AS Total_Population FROM district WHERE City_Area > (SELECT AVG(City_Area) FROM district);
SELECT SUM(City_Population) AS Total_Population FROM district WHERE City_Area > (SELECT AVG(City_Area) FROM district);
SELECT DISTINCT d.District_name FROM district d JOIN store_district sd ON d.District_ID = sd.District_ID JOIN store s ON sd.Store_ID = s.Store_ID WHERE s.Type IN ('city mall', 'village store') GROUP BY d.District_name HAVING COUNT(DISTINCT s.Type) = 2;
SELECT d.District_name FROM district d JOIN store_district sd ON d.District_ID = sd.District_ID JOIN store s ON sd.Store_ID = s.Store_ID WHERE s.Type IN ('mall', 'village') GROUP BY d.District_name HAVING COUNT(DISTINCT s.Type) = 2;
SELECT SUM(enr) AS total_enrollment FROM College;
SELECT SUM(enr) AS total_enrolled FROM College;
SELECT AVG(enr) AS average_enrollment FROM College;
SELECT AVG(enr) AS average_enrollment FROM College;
SELECT COUNT(*) FROM College;
SELECT COUNT(DISTINCT cName) FROM College;
SELECT COUNT(*)  FROM Player  WHERE yCard > 1000;
SELECT COUNT(DISTINCT pID)  FROM Tryout  WHERE pPos = 'trained' AND hours > 1000;
SELECT COUNT(*)  FROM College  WHERE enr > 15000;
SELECT COUNT(*)  FROM College  WHERE enr > 15000;
SELECT AVG(training_hours) AS average_training_hours FROM Player;
SELECT AVG(training_hours) AS average_training_hours FROM Player;
SELECT pName, training_hours  FROM Player  WHERE training_hours < 1500;
SELECT p.pName, SUM(t.hours) AS training_hours FROM Player p JOIN Tryout t ON p.pID = t.pID GROUP BY p.pName HAVING SUM(t.hours) < 1500;
SELECT COUNT(DISTINCT cName) AS different_colleges FROM Tryout;
SELECT COUNT(DISTINCT cName) AS different_colleges FROM Tryout;
SELECT DISTINCT pPos FROM Tryout;
SELECT DISTINCT pPos FROM Tryout;
SELECT COUNT(*) AS accepted_students FROM Tryout WHERE decision = 'Accepted';
SELECT COUNT(*) AS yes_count  FROM Tryout  WHERE decision = 'yes';
SELECT COUNT(*)  FROM Player  JOIN Tryout ON Player.pID = Tryout.pID  WHERE Tryout.pPos = 'goalie';
SELECT COUNT(*) AS num_goalies  FROM Player  JOIN Tryout ON Player.pID = Tryout.pID  WHERE Tryout.pPos = 'goalie';
SELECT MAX(training_hours) AS max_hours, AVG(training_hours) AS avg_hours, MIN(training_hours) AS min_hours FROM Player;
SELECT AVG(training_hours) AS average_hours, MAX(training_hours) AS max_hours, MIN(training_hours) AS min_hours FROM training_table;
SELECT AVG(enr) AS average_enrollment FROM College WHERE state = 'FL';
SELECT AVG(enr) AS average_enrollment FROM College WHERE state = 'Florida';
SELECT pName  FROM Player  WHERE training_hours BETWEEN 500 AND 1500;
SELECT pName  FROM Player  WHERE HS BETWEEN 500 AND 1500;
SELECT * FROM Player WHERE pName LIKE '%a%';
SELECT pName FROM Player WHERE pName LIKE '%a%';
SELECT cName, enr FROM College WHERE enr > 10000 AND state = 'LA';
SELECT cName, enr  FROM College  WHERE enr > 10000 AND state = 'Louisiana';
SELECT * FROM College ORDER BY enr ASC;
SELECT * FROM College ORDER BY enr ASC;
SELECT cName FROM College WHERE enr > 18000 ORDER BY cName;
SELECT cName  FROM College  WHERE enr > 18000  ORDER BY cName;
SELECT pName  FROM Player  WHERE yCard = 'yes'  ORDER BY training_hours DESC;
SELECT pName  FROM Player  WHERE yCard IS NOT NULL  ORDER BY HS DESC;
SELECT DISTINCT cName FROM Tryout ORDER BY cName;
SELECT DISTINCT cName FROM Tryout ORDER BY cName;
SELECT pPos, COUNT(*) AS position_count FROM Tryout GROUP BY pPos ORDER BY position_count DESC LIMIT 1;
SELECT pPos, COUNT(*) AS position_count FROM Tryout GROUP BY pPos ORDER BY position_count DESC LIMIT 1;
SELECT c.cName, COUNT(t.pID) AS participant_count FROM College c LEFT JOIN Tryout t ON c.cName = t.cName GROUP BY c.cName ORDER BY participant_count DESC;
SELECT c.cName, COUNT(t.pID) AS participant_count FROM College c LEFT JOIN Tryout t ON c.cName = t.cName GROUP BY c.cName ORDER BY participant_count DESC;
SELECT pPos, MIN(hours) AS min_hours FROM Tryout GROUP BY pPos;
SELECT pPos, MIN(practice_time) AS min_practice_time FROM Tryout GROUP BY pPos;
SELECT cName  FROM College  ORDER BY enr DESC  LIMIT 3;
SELECT cName FROM College ORDER BY enr DESC LIMIT 3;
SELECT c.state, c.cName FROM College c JOIN (     SELECT state, MIN(enr) AS min_enrollment     FROM College     GROUP BY state ) AS min_colleges ON c.state = min_colleges.state AND c.enr = min_colleges.min_enrollment;
SELECT state, cName FROM College WHERE (state, enr) IN (     SELECT state, MIN(enr)     FROM College     GROUP BY state );
SELECT DISTINCT c.state FROM College c JOIN Tryout t ON c.cName = t.cName;
SELECT DISTINCT c.state FROM College c JOIN Tryout t ON c.cName = t.cName JOIN Player p ON t.pID = p.pID;
SELECT DISTINCT c.state FROM College c JOIN Tryout t ON c.cName = t.cName WHERE t.decision = 'yes';
SELECT DISTINCT c.state FROM College c JOIN Tryout t ON c.cName = t.cName WHERE t.decision = 'accepted';
SELECT Player.pName, Tryout.cName  FROM Player  JOIN Tryout ON Player.pID = Tryout.pID  WHERE Tryout.decision = 'yes';
SELECT Player.pName, College.cName FROM Player JOIN Tryout ON Player.pID = Tryout.pID JOIN College ON Tryout.cName = College.cName WHERE Tryout.decision = 'yes';
SELECT DISTINCT pName  FROM Player  WHERE pID IN (SELECT pID FROM Tryout)  ORDER BY pName;
SELECT DISTINCT pName  FROM Player  JOIN Tryout ON Player.pID = Tryout.pID  ORDER BY pName;
SELECT Player.pName, College.enr  FROM Player  JOIN Tryout ON Player.pID = Tryout.pID  JOIN College ON Tryout.cName = College.cName  WHERE Tryout.decision = 'yes';
SELECT p.pName, t.hours_spent FROM Player p JOIN Tryout t ON p.pID = t.pID WHERE t.decision = 'yes';
SELECT DISTINCT c.state FROM College c JOIN Tryout t ON c.cName = t.cName WHERE t.pPos = 'striker';
SELECT DISTINCT c.state FROM College c JOIN Tryout t ON c.cName = t.cName WHERE t.pPos = 'striker';
SELECT Player.pName  FROM Player  JOIN Tryout ON Player.pID = Tryout.pID  WHERE Tryout.pPos = 'striker' AND Tryout.decision = 'yes';
SELECT DISTINCT Player.pName FROM Player JOIN Tryout ON Player.pID = Tryout.pID WHERE Tryout.pPos = 'striker' AND Tryout.decision = 'success';
SELECT c.state  FROM College c  JOIN Tryout t ON c.cName = t.cName  JOIN Player p ON t.pID = p.pID  WHERE p.pName = 'Charles';
SELECT c.state  FROM College c  JOIN Tryout t ON c.cName = t.cName  JOIN Player p ON t.pID = p.pID  WHERE p.pName = 'Charles';
SELECT AVG(enr) AS average_hours, MAX(enr) AS maximum_hours FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.decision = 'yes';
SELECT AVG(practice_hours) AS average_hours, MAX(practice_hours) AS max_hours FROM (     SELECT COUNT(*) AS practice_hours     FROM Tryout     WHERE decision = 'made'     GROUP BY pID ) AS practice_counts;
SELECT AVG(enr) AS average_hours FROM College JOIN Tryout ON College.cName = Tryout.cName WHERE Tryout.decision = 'no';
SELECT AVG(practice_hours) AS average_practice_hours FROM Player JOIN Tryout ON Player.pID = Tryout.pID WHERE Tryout.decision = 'Rejected';
SELECT MAX(training_hours)  FROM Player  WHERE training_hours > 1000  GROUP BY pPos;
SELECT pPos, MAX(enr) AS max_hours FROM Player JOIN Tryout ON Player.pID = Tryout.pID JOIN College ON Tryout.cName = College.cName WHERE enr > 1000 GROUP BY pPos;
SELECT DISTINCT c.cName FROM College c JOIN Tryout t ON c.cName = t.cName JOIN Player p ON t.pID = p.pID WHERE p.pName LIKE 'D%';
SELECT DISTINCT c.cName FROM Player p JOIN Tryout t ON p.pID = t.pID JOIN College c ON t.cName = c.cName WHERE p.pName LIKE 'D%';
SELECT DISTINCT c.cName FROM College c JOIN Tryout t ON c.cName = t.cName JOIN Player p ON t.pID = p.pID WHERE t.pPos = 'goalie' AND t.decision = 'succeeded';
SELECT DISTINCT c.cName  FROM College c  JOIN Tryout t ON c.cName = t.cName  WHERE t.pPos = 'goalie' AND t.decision = 'accepted';
SELECT p.pName  FROM Player p  JOIN Tryout t ON p.pID = t.pID  WHERE t.cName = (SELECT cName FROM College ORDER BY enr DESC LIMIT 1);
SELECT p.pName FROM Player p JOIN Tryout t ON p.pID = t.pID WHERE t.cName = (SELECT cName FROM College ORDER BY enr DESC LIMIT 1);
SELECT DISTINCT c.state, c.enr FROM College c JOIN Tryout t ON c.cName = t.cName WHERE t.decision = 'accepted';
SELECT COUNT(DISTINCT c.enr) AS enrolled_students, c.state FROM College c JOIN Tryout t ON c.cName = t.cName WHERE t.decision = 'accepted' GROUP BY c.state;
SELECT cName  FROM College  WHERE (state = 'CA' AND enr > 15000) OR (state = 'AZ' AND enr < 13000);
SELECT cName  FROM College  WHERE (state = 'LA' AND enr > 15000) OR (state = 'AZ' AND enr < 13000);
SELECT DISTINCT c.cName FROM College c JOIN Tryout t ON c.cName = t.cName WHERE t.pPos IN ('goalie', 'mid');
SELECT DISTINCT cName  FROM Tryout  WHERE pPos IN ('goal', 'mid-field');
SELECT DISTINCT c.state FROM College c JOIN Tryout t ON c.cName = t.cName WHERE t.pPos IN ('goalie', 'mid');
SELECT DISTINCT c.state FROM College c JOIN Tryout t ON c.cName = t.cName WHERE t.pPos IN ('goalie', 'mid-field') GROUP BY c.state HAVING COUNT(DISTINCT t.pID) > 0;
SELECT COUNT(DISTINCT t.cName)  FROM Tryout t  WHERE t.pPos IN ('goalie', 'mid');
SELECT COUNT(DISTINCT t.cName) AS school_count FROM Tryout t WHERE t.pPos IN ('goalie', 'mid-field');
SELECT DISTINCT t1.cName FROM Tryout t1 WHERE t1.pPos = 'mid'  AND t1.cName NOT IN (     SELECT t2.cName     FROM Tryout t2     WHERE t2.pPos = 'goalie' );
SELECT DISTINCT c.cName FROM College c JOIN Tryout t ON c.cName = t.cName WHERE t.pPos = 'mid' AND c.cName NOT IN (     SELECT DISTINCT t2.cName     FROM Tryout t2     WHERE t2.pPos = 'goalie' );
SELECT DISTINCT c.state FROM College c JOIN Tryout t ON c.cName = t.cName WHERE t.pPos = 'mid' AND c.state NOT IN (     SELECT DISTINCT c2.state     FROM College c2     JOIN Tryout t2 ON c2.cName = t2.cName     WHERE t2.pPos = 'goalie' );
SELECT DISTINCT c.state FROM College c JOIN Tryout t ON c.cName = t.cName WHERE t.pPos = 'mid' AND c.cName NOT IN (     SELECT t2.cName     FROM Tryout t2     WHERE t2.pPos = 'goalie' );
SELECT COUNT(DISTINCT c.state) FROM College c JOIN Tryout t ON c.cName = t.cName WHERE t.pPos = 'mid' AND c.state NOT IN (     SELECT DISTINCT c2.state     FROM College c2     JOIN Tryout t2 ON c2.cName = t2.cName     WHERE t2.pPos = 'goalie' );
SELECT COUNT(DISTINCT c.state)  FROM College c  JOIN Tryout t ON c.cName = t.cName  WHERE t.pPos = 'mid' AND t.pPos <> 'goalie';
SELECT DISTINCT state  FROM College  WHERE enr < (SELECT MAX(enr) FROM College);
SELECT DISTINCT c1.state FROM College c1, College c2 WHERE c1.enr < c2.enr;
SELECT c1.cName FROM College c1 WHERE c1.enr > (SELECT MAX(c2.enr) FROM College c2 WHERE c2.state = 'FL');
SELECT DISTINCT c1.cName FROM College c1 WHERE c1.enr > (SELECT MAX(c2.enr) FROM College c2 WHERE c2.state = 'Florida');
SELECT c1.cName FROM College c1 WHERE c1.enr > ALL (SELECT c2.enr FROM College c2 WHERE c2.state = 'FL');
SELECT cName  FROM College  WHERE enr > (SELECT MAX(enr) FROM College WHERE state = 'Florida');
SELECT SUM(c.enr) AS total_enrollment FROM College c WHERE c.cName NOT IN (     SELECT t.cName     FROM Tryout t     JOIN Player p ON t.pID = p.pID     WHERE p.pPos = 'goalie' );
SELECT SUM(enr) AS total_enrollment FROM College WHERE cName NOT IN (     SELECT DISTINCT cName     FROM Tryout     WHERE pPos = 'Goalie' );
SELECT COUNT(DISTINCT state)  FROM College  WHERE enr > (SELECT AVG(enr) FROM College);
SELECT COUNT(DISTINCT state)  FROM College  WHERE enr > (SELECT AVG(enr) FROM College);
SELECT COUNT(DISTINCT state)  FROM College  WHERE enr < (SELECT AVG(enr) FROM College);
SELECT COUNT(DISTINCT state)  FROM College  WHERE enr < (SELECT AVG(enr) FROM College);
SELECT COUNT(*) AS Total_Devices FROM device;
SELECT COUNT(*) FROM device;
SELECT DISTINCT Carrier FROM device ORDER BY Carrier ASC;
SELECT DISTINCT Carrier FROM device ORDER BY Carrier;
SELECT DISTINCT Carrier  FROM device  WHERE Software_Platform <> 'Android';
SELECT DISTINCT Carrier  FROM device  WHERE Software_Platform <> 'Android';
SELECT Shop_Name FROM shop ORDER BY Open_Year ASC;
SELECT Shop_Name FROM shop ORDER BY Open_Year ASC;
SELECT AVG(Quantity) AS Average_Quantity FROM stock;
SELECT AVG(Quantity) AS Average_Stock FROM stock;
SELECT Shop_Name, Location FROM shop ORDER BY Shop_Name ASC;
SELECT Shop_Name, Location FROM shop ORDER BY Shop_Name;
SELECT COUNT(DISTINCT Software_Platform) AS Different_Software_Platforms FROM device;
SELECT COUNT(DISTINCT Software_Platform) AS NumberOfDifferentSoftwarePlatforms FROM device;
SELECT Open_Date, Open_Year FROM shop WHERE Shop_Name = 'Apple';
SELECT Open_Date, Open_Year FROM shop WHERE Shop_Name = 'Apple';
SELECT Shop_Name  FROM shop  WHERE Open_Year = (SELECT MAX(Open_Year) FROM shop);
SELECT Shop_Name  FROM shop  WHERE Open_Year = (SELECT MAX(Open_Year) FROM shop);
SELECT s.Shop_Name, d.Carrier FROM shop s JOIN stock st ON s.Shop_ID = st.Shop_ID JOIN device d ON st.Device_ID = d.Device_ID;
SELECT s.Shop_Name, d.Carrier FROM shop s JOIN stock st ON s.Shop_ID = st.Shop_ID JOIN device d ON st.Device_ID = d.Device_ID;
SELECT s.Shop_Name FROM shop s JOIN stock st ON s.Shop_ID = st.Shop_ID GROUP BY s.Shop_ID, s.Shop_Name HAVING COUNT(DISTINCT st.Device_ID) > 1;
SELECT s.Shop_Name FROM shop s JOIN stock st ON s.Shop_ID = st.Shop_ID GROUP BY s.Shop_ID, s.Shop_Name HAVING COUNT(DISTINCT st.Device_ID) > 1;
SELECT s.Shop_Name FROM shop s JOIN stock st ON s.Shop_ID = st.Shop_ID GROUP BY s.Shop_ID, s.Shop_Name ORDER BY COUNT(DISTINCT st.Device_ID) DESC LIMIT 1;
SELECT s.Shop_Name FROM shop s JOIN stock st ON s.Shop_ID = st.Shop_ID GROUP BY s.Shop_ID, s.Shop_Name ORDER BY COUNT(DISTINCT st.Device_ID) DESC LIMIT 1;
SELECT s.Shop_Name FROM shop s JOIN stock st ON s.Shop_ID = st.Shop_ID GROUP BY s.Shop_ID, s.Shop_Name ORDER BY SUM(st.Quantity) DESC LIMIT 1;
SELECT s.Shop_Name FROM shop s JOIN stock st ON s.Shop_ID = st.Shop_ID GROUP BY s.Shop_ID, s.Shop_Name ORDER BY SUM(st.Quantity) DESC LIMIT 1;
SELECT Software_Platform, COUNT(Device_ID) AS Number_of_Devices FROM device GROUP BY Software_Platform;
SELECT Software_Platform, COUNT(Device_ID) AS Device_Count FROM device GROUP BY Software_Platform;
SELECT Software_Platform, COUNT(*) AS Count FROM device GROUP BY Software_Platform ORDER BY Count DESC;
SELECT Software_Platform, COUNT(*) AS Frequency FROM device GROUP BY Software_Platform ORDER BY Frequency DESC;
SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(Device_ID) DESC LIMIT 1;
SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1;
SELECT s.Shop_Name FROM shop s LEFT JOIN stock st ON s.Shop_ID = st.Shop_ID WHERE st.Device_ID IS NULL;
SELECT s.Shop_Name FROM shop s LEFT JOIN stock st ON s.Shop_ID = st.Shop_ID WHERE st.Device_ID IS NULL;
SELECT DISTINCT s1.Location FROM shop s1 JOIN shop s2 ON s1.Location = s2.Location WHERE s1.Open_Year > 2012 AND s2.Open_Year < 2008;
SELECT Location FROM shop WHERE Open_Year > 2012 OR Open_Year < 2008 GROUP BY Location HAVING COUNT(DISTINCT CASE WHEN Open_Year > 2012 THEN Shop_ID END) > 0    AND COUNT(DISTINCT CASE WHEN Open_Year < 2008 THEN Shop_ID END) > 0;
SELECT DISTINCT d.Carrier FROM device d LEFT JOIN stock s ON d.Device_ID = s.Device_ID WHERE s.Quantity IS NULL;
SELECT DISTINCT d.Carrier FROM device d WHERE d.Device_ID NOT IN (SELECT s.Device_ID FROM stock s);
SELECT DISTINCT d.Carrier FROM device d JOIN stock s ON d.Device_ID = s.Device_ID GROUP BY d.Carrier HAVING COUNT(DISTINCT s.Shop_ID) > 1;
SELECT DISTINCT d.Carrier FROM device d JOIN stock s ON d.Device_ID = s.Device_ID GROUP BY d.Carrier, s.Device_ID HAVING COUNT(DISTINCT s.Shop_ID) > 1;
SELECT COUNT(*) AS Total_Bookings FROM Bookings;
SELECT COUNT(*) AS Total_Bookings FROM Bookings;
SELECT Order_Date FROM Bookings;
SELECT Order_Date FROM Bookings;
SELECT Planned_Delivery_Date, Actual_Delivery_Date  FROM Bookings;
SELECT Booking_ID, Planned_Delivery_Date, Actual_Delivery_Date FROM Bookings;
SELECT COUNT(*) AS Total_Customers FROM Customers;
SELECT COUNT(*) AS Number_of_Customers FROM Customers;
SELECT Customer_Phone, Customer_Email_Address  FROM Customers  WHERE Customer_Name = 'Harold';
SELECT Customer_Phone, Customer_Email_Address  FROM Customers  WHERE Customer_Name = 'Harold';
SELECT Store_Name FROM Drama_Workshop_Groups;
SELECT Store_Name FROM Drama_Workshop_Groups;
SELECT      MIN(Order_Quantity) AS Minimum_Order_Quantity,     AVG(Order_Quantity) AS Average_Order_Quantity,     MAX(Order_Quantity) AS Maximum_Order_Quantity FROM      Invoices;
SELECT      MIN(Order_Quantity) AS Minimum_Quantity,     AVG(Order_Quantity) AS Average_Quantity,     MAX(Order_Quantity) AS Maximum_Quantity FROM      Invoices JOIN      Invoice_Items ON Invoices.Invoice_ID = Invoice_Items.Invoice_ID;
SELECT DISTINCT payment_method_code FROM Invoices;
SELECT DISTINCT payment_method_code FROM Invoices;
SELECT Marketing_Region_Descriptrion  FROM Marketing_Regions  WHERE Marketing_Region_Name = 'China';
SELECT Marketing_Region_Descriptrion  FROM Marketing_Regions  WHERE Marketing_Region_Name = 'China';
SELECT DISTINCT Product_Name  FROM Products  WHERE Product_Price > (SELECT AVG(Product_Price) FROM Products);
SELECT DISTINCT Product_Name  FROM Products  WHERE Product_Price > (SELECT AVG(Product_Price) FROM Products);
SELECT Product_Name  FROM Products  ORDER BY Product_Price DESC  LIMIT 1;
SELECT Product_Name  FROM Products  ORDER BY Product_Price DESC  LIMIT 1;
SELECT Product_Name  FROM Products  ORDER BY Product_Price ASC;
SELECT Product_Name  FROM Products  ORDER BY Product_Price ASC;
SELECT Customer_Phone  FROM Performers  WHERE Customer_Name = 'Ashley';
SELECT Customer_Phone  FROM Performers  WHERE Customer_Name = 'Ashley';
SELECT pm.payment_method_code, COUNT(co.Order_ID) AS number_of_orders FROM Ref_Payment_Methods pm LEFT JOIN Invoices i ON pm.payment_method_code = i.payment_method_code LEFT JOIN Customer_Orders co ON i.Order_ID = co.Order_ID GROUP BY pm.payment_method_code;
SELECT DISTINCT payment_method_code, COUNT(Order_ID) AS number_of_orders FROM Invoices GROUP BY payment_method_code;
SELECT payment_method_code FROM Invoices GROUP BY payment_method_code ORDER BY COUNT(Order_ID) DESC LIMIT 1;
SELECT payment_method_code FROM Invoices GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT a.City_Town FROM Stores s JOIN Addresses a ON s.Address_ID = a.Address_ID WHERE s.Store_Name = 'FJA Filming';
SELECT a.City_Town FROM Stores s JOIN Addresses a ON s.Address_ID = a.Address_ID WHERE s.Store_Name = 'FJA Filming';
SELECT DISTINCT a.State_County FROM Stores s JOIN Addresses a ON s.Address_ID = a.Address_ID WHERE s.Marketing_Region_Code = 'CA';
SELECT DISTINCT a.State_County FROM Stores s JOIN Addresses a ON s.Address_ID = a.Address_ID WHERE s.Marketing_Region_Code = 'CA';
SELECT m.Marketing_Region_Name FROM Stores s JOIN Marketing_Regions m ON s.Marketing_Region_Code = m.Marketing_Region_Code WHERE s.Store_Name = 'Rob Dinning';
SELECT m.Marketing_Region_Name FROM Stores s JOIN Marketing_Regions m ON s.Marketing_Region_Code = m.Marketing_Region_Code WHERE s.Store_Name = 'Rob Dinning';
SELECT DISTINCT rst.Service_Type_Description FROM Ref_Service_Types rst JOIN Services s ON rst.Service_Type_Code = s.Service_Type_Code WHERE s.Product_Price > 100;
SELECT st.Service_Type_Description FROM Ref_Service_Types st JOIN Services s ON st.Service_Type_Code = s.Service_Type_Code WHERE s.Product_Price > 100;
SELECT      st.Service_Type_Description,      st.Service_Type_Code,      COUNT(s.Service_ID) AS Service_Count FROM      Ref_Service_Types st LEFT JOIN      Services s ON st.Service_Type_Code = s.Service_Type_Code GROUP BY      st.Service_Type_Description,      st.Service_Type_Code;
SELECT      rst.Service_Type_Description,      rst.Service_Type_Code,      COUNT(s.Service_ID) AS Number_of_Services FROM      Ref_Service_Types rst LEFT JOIN      Services s ON rst.Service_Type_Code = s.Service_Type_Code GROUP BY      rst.Service_Type_Description,      rst.Service_Type_Code;
SELECT s.Service_Type_Code, st.Service_Type_Description FROM Services s JOIN Ref_Service_Types st ON s.Service_Type_Code = st.Service_Type_Code GROUP BY s.Service_Type_Code, st.Service_Type_Description ORDER BY COUNT(s.Service_ID) DESC LIMIT 1;
SELECT s.Service_Type_Code, s.Product_Description FROM Services s JOIN Bookings_Services bs ON s.Product_ID = bs.Product_ID GROUP BY s.Service_Type_Code, s.Product_Description ORDER BY COUNT(bs.Order_ID) DESC LIMIT 1;
SELECT DISTINCT dwg.Store_Phone, dwg.Store_Email_Address FROM Drama_Workshop_Groups dwg JOIN Services s ON dwg.Workshop_Group_ID = s.Workshop_Group_ID
SELECT dwg.Store_Phone, dwg.Store_Email_Address FROM Drama_Workshop_Groups dwg JOIN Services s ON dwg.Workshop_Group_ID = s.Workshop_Group_ID
SELECT DISTINCT d.Store_Name FROM Drama_Workshop_Groups d JOIN Services s ON d.Workshop_Group_ID = s.Workshop_Group_ID WHERE s.Product_Name = 'film';
SELECT DISTINCT d.Store_Name FROM Drama_Workshop_Groups d JOIN Services s ON d.Workshop_Group_ID = s.Workshop_Group_ID WHERE s.Product_Name = 'film';
SELECT Product_Name, AVG(Product_Price) AS Average_Product_Price FROM Products GROUP BY Product_Name;
SELECT Product_Name, AVG(Product_Price) AS Average_Product_Price FROM Products GROUP BY Product_Name;
SELECT Product_Name FROM Products GROUP BY Product_Name HAVING AVG(Product_Price) < 1000000;
SELECT Product_Name FROM Products GROUP BY Product_Name HAVING AVG(Product_Price) < 1000000;
SELECT SUM(Order_Quantity) AS Total_Order_Quantity FROM Order_Items JOIN Products ON Order_Items.Product_ID = Products.Product_ID WHERE Products.Product_Name LIKE '%photo%';
SELECT SUM(Order_Quantity) AS Total_Order_Quantity FROM Order_Items WHERE Product_ID IN (SELECT Product_ID FROM Products WHERE Product_Name = 'photo');
SELECT oi.Order_Item_ID, oi.Order_Quantity, p.Product_Name, p.Product_Price FROM Order_Items oi JOIN Products p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price > 2000;
SELECT oi.Order_Item_ID, oi.Order_Quantity, p.Product_Name, p.Product_Price FROM Order_Items oi JOIN Products p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price > 2000;
SELECT b.Actual_Delivery_Date FROM Bookings b JOIN Order_Items oi ON b.Booking_ID = oi.Order_ID WHERE oi.Order_Quantity = 1;
SELECT b.Actual_Delivery_Date FROM Bookings b JOIN Order_Items oi ON b.Booking_ID = oi.Order_ID WHERE oi.Order_Quantity = 1;
SELECT DISTINCT co.Order_Date FROM Customer_Orders co JOIN Order_Items oi ON co.Order_ID = oi.Order_ID JOIN Products p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price > 1000;
SELECT DISTINCT co.Order_Date FROM Customer_Orders co JOIN Order_Items oi ON co.Order_ID = oi.Order_ID JOIN Products p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price > 1000;
SELECT COUNT(DISTINCT Currency_Code) AS Distinct_Currency_Codes FROM Drama_Workshop_Groups;
SELECT COUNT(DISTINCT Currency_Code) AS Distinct_Currency_Codes FROM Drama_Workshop_Groups;
SELECT DWG.Store_Name FROM Drama_Workshop_Groups DWG JOIN Addresses A ON DWG.Address_ID = A.Address_ID WHERE A.City_Town = 'Feliciaberg';
SELECT Store_Name  FROM Drama_Workshop_Groups  WHERE Address_ID IN (     SELECT Address_ID      FROM Addresses      WHERE City_Town = 'Feliciaberg' );
SELECT DWG.Store_Email_Address FROM Drama_Workshop_Groups DWG JOIN Addresses A ON DWG.Address_ID = A.Address_ID WHERE A.State_County = 'Alaska';
SELECT DWG.Store_Email_Address FROM Drama_Workshop_Groups DWG JOIN Addresses A ON DWG.Address_ID = A.Address_ID WHERE A.State_County = 'Alaska';
SELECT a.City_Town, COUNT(d.Workshop_Group_ID) AS Number_of_Workshop_Groups FROM Addresses a JOIN Drama_Workshop_Groups d ON a.Address_ID = d.Address_ID GROUP BY a.City_Town;
SELECT a.City_Town, COUNT(d.Workshop_Group_ID) AS Workshop_Group_Count FROM Drama_Workshop_Groups d JOIN Addresses a ON d.Address_ID = a.Address_ID GROUP BY a.City_Town;
SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY COUNT(Workshop_Group_ID) DESC LIMIT 1;
SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY COUNT(Workshop_Group_ID) DESC LIMIT 1;
SELECT DISTINCT a.City_Town FROM Addresses a JOIN Customers c ON a.Address_ID = c.Address_ID LEFT JOIN Performers p ON a.Address_ID = p.Address_ID WHERE p.Address_ID IS NULL;
SELECT DISTINCT a.City_Town FROM Addresses a LEFT JOIN Customers c ON a.Address_ID = c.Address_ID LEFT JOIN Performers p ON a.Address_ID = p.Address_ID WHERE c.Customer_ID IS NOT NULL AND p.Performer_ID IS NULL;
SELECT Status_Code, COUNT(*) AS Frequency FROM Bookings GROUP BY Status_Code ORDER BY Frequency DESC LIMIT 1;
SELECT Status_Code, COUNT(*) AS Count FROM Bookings GROUP BY Status_Code ORDER BY Count DESC LIMIT 1;
SELECT DISTINCT d.Store_Name FROM Drama_Workshop_Groups d JOIN Bookings b ON d.Workshop_Group_ID = b.Workshop_Group_ID WHERE b.Status_Code = 'stop';
SELECT DISTINCT d.Store_Name FROM Drama_Workshop_Groups d JOIN Bookings b ON d.Workshop_Group_ID = b.Workshop_Group_ID WHERE b.Status_Code = 'stop';
SELECT Customer_Name  FROM Clients  WHERE Client_ID NOT IN (SELECT DISTINCT Customer_ID FROM Bookings);
SELECT Customer_Name  FROM Clients  WHERE Client_ID NOT IN (SELECT DISTINCT Customer_ID FROM Bookings);
SELECT AVG(Order_Quantity) AS Average_Quantity FROM Invoices JOIN Customer_Orders ON Invoices.Order_ID = Customer_Orders.Order_ID WHERE Invoices.payment_method_code = 'MasterCard';
SELECT AVG(Order_Quantity) AS Average_Quantity FROM Invoices JOIN Ref_Payment_Methods ON Invoices.payment_method_code = Ref_Payment_Methods.payment_method_code WHERE Ref_Payment_Methods.payment_method_description = 'MasterCard';
SELECT Product_ID FROM Invoices GROUP BY Product_ID ORDER BY SUM(Order_Quantity) DESC LIMIT 1;
SELECT Product_ID FROM Invoices GROUP BY Product_ID ORDER BY SUM(Order_Quantity) DESC LIMIT 1;
SELECT DISTINCT rst.Service_Type_Description FROM Ref_Service_Types rst JOIN Services s ON rst.Service_Type_Code = s.Service_Type_Code WHERE s.Product_Name IN ('photo product', 'film product') GROUP BY rst.Service_Type_Description HAVING COUNT(DISTINCT s.Product_Name) = 2;
SELECT DISTINCT rst.Service_Type_Description FROM Ref_Service_Types rst JOIN Services s ON rst.Service_Type_Code = s.Service_Type_Code JOIN Products p ON s.Product_ID = p.Product_ID WHERE p.Product_Name IN ('photo', 'film') GROUP BY rst.Service_Type_Description HAVING COUNT(DISTINCT p.Product_Name) = 2;
SELECT COUNT(*) FROM Band;
SELECT COUNT(DISTINCT Id) AS NumberOfBands FROM Band;
SELECT DISTINCT Label FROM Albums;
SELECT DISTINCT Label FROM Albums;
SELECT * FROM Albums WHERE Year = 2012;
SELECT * FROM Albums WHERE Year = 2012;
SELECT Performance.StagePosition FROM Performance JOIN Band ON Performance.Bandmate = Band.Id WHERE Band.Firstname = 'Solveig';
SELECT DISTINCT StagePosition  FROM Performance  JOIN Band ON Performance.Bandmate = Band.Id  WHERE Band.Firstname = 'Solveig';
SELECT COUNT(*) AS TotalSongs FROM Songs;
SELECT COUNT(*) AS NumberOfSongs FROM Songs;
SELECT DISTINCT s.Title FROM Songs s JOIN Performance p ON s.SongId = p.SongId JOIN Band b ON p.Bandmate = b.Id WHERE b.Lastname = 'Heilo';
SELECT S.Title  FROM Songs S JOIN Vocals V ON S.SongId = V.SongId JOIN Band B ON V.Bandmate = B.Id WHERE B.Lastname = 'Heilo';
SELECT COUNT(DISTINCT Bandmate) AS MusicianCount FROM Performance WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Flash');
SELECT COUNT(DISTINCT Bandmate) AS MusicianCount FROM Performance WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Flash');
SELECT DISTINCT s.Title  FROM Songs s JOIN Vocals v ON s.SongId = v.SongId JOIN Band b ON v.Bandmate = b.Id WHERE b.Firstname = 'Marianne';
SELECT S.Title  FROM Songs S JOIN Vocals V ON S.SongId = V.SongId JOIN Band B ON V.Bandmate = B.Id WHERE B.Firstname = 'Marianne';
SELECT b.Firstname, b.Lastname FROM Songs s JOIN Performance p ON s.SongId = p.SongId JOIN Band b ON p.Bandmate = b.Id WHERE s.Title = 'Badlands';
SELECT b.Firstname, b.Lastname FROM Songs s JOIN Performance p ON s.SongId = p.SongId JOIN Band b ON p.Bandmate = b.Id WHERE s.Title = 'Badlands';
SELECT b.Firstname, b.Lastname FROM Performance p JOIN Songs s ON p.SongId = s.SongId JOIN Band b ON p.Bandmate = b.Id WHERE s.Title = 'Badlands' AND p.StagePosition = 'back';
SELECT b.Firstname, b.Lastname FROM Performance p JOIN Songs s ON p.SongId = s.SongId JOIN Band b ON p.Bandmate = b.Id WHERE s.Title = 'Badlands' AND p.StagePosition = 'Back';
SELECT COUNT(DISTINCT Label) AS UniqueLabels FROM Albums;
SELECT DISTINCT Label FROM Albums;
SELECT Label, COUNT(*) AS AlbumCount FROM Albums GROUP BY Label ORDER BY AlbumCount DESC LIMIT 1;
SELECT Label, COUNT(*) AS AlbumCount FROM Albums GROUP BY Label ORDER BY AlbumCount DESC LIMIT 1;
SELECT b.Lastname FROM Band b JOIN Instruments i ON b.Id = i.BandmateId GROUP BY b.Lastname ORDER BY COUNT(i.SongId) DESC LIMIT 1;
SELECT Lastname FROM Band WHERE Id = (     SELECT Bandmate     FROM Performance     GROUP BY Bandmate     ORDER BY COUNT(SongId) DESC     LIMIT 1 );
SELECT Lastname FROM Band WHERE Id = (     SELECT Bandmate     FROM Performance     WHERE StagePosition = 'back'     GROUP BY Bandmate     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT Lastname FROM Band WHERE Id = (     SELECT Bandmate     FROM Performance     GROUP BY Bandmate     ORDER BY COUNT(StagePosition) DESC     LIMIT 1 );
SELECT * FROM Songs WHERE Title LIKE '%the%';
SELECT Title FROM Songs WHERE Title LIKE '%the%';
SELECT DISTINCT Instrument FROM Instruments;
SELECT DISTINCT Instrument FROM Instruments;
SELECT Instruments.Instrument  FROM Instruments  JOIN Band ON Instruments.BandmateId = Band.Id  JOIN Songs ON Instruments.SongId = Songs.SongId  WHERE Band.Lastname = 'Heilo' AND Songs.Title = 'Le Pop';
SELECT Instruments.Instrument  FROM Instruments  JOIN Band ON Instruments.BandmateId = Band.Id  JOIN Songs ON Instruments.SongId = Songs.SongId  WHERE Band.Lastname = 'Heilo' AND Songs.Title = 'Le Pop';
SELECT Instrument, COUNT(*) AS UsageCount FROM Instruments GROUP BY Instrument ORDER BY UsageCount DESC LIMIT 1;
SELECT Instrument, COUNT(*) AS Count FROM Instruments GROUP BY Instrument ORDER BY Count DESC LIMIT 1;
SELECT COUNT(*)  FROM Instruments  WHERE Instrument = 'drums';
SELECT COUNT(*)  FROM Instruments  WHERE Instrument = 'drums';
SELECT Instruments.Instrument  FROM Instruments  JOIN Songs ON Instruments.SongId = Songs.SongId  WHERE Songs.Title = 'Le Pop';
SELECT Instrument  FROM Instruments  JOIN Songs ON Instruments.SongId = Songs.SongId  WHERE Songs.Title = 'Le Pop';
SELECT COUNT(*)  FROM Instruments  WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Le Pop');
SELECT COUNT(DISTINCT Instrument)  FROM Instruments  WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Le Pop');
SELECT COUNT(DISTINCT Instrument)  FROM Instruments  WHERE BandmateId IN (SELECT Id FROM Band WHERE Lastname = 'Heilo');
SELECT COUNT(DISTINCT Instrument)  FROM Instruments  JOIN Band ON Instruments.BandmateId = Band.Id  WHERE Band.Lastname = 'Heilo';
SELECT DISTINCT Instruments.Instrument FROM Instruments JOIN Band ON Instruments.BandmateId = Band.Id WHERE Band.Lastname = 'Heilo';
SELECT DISTINCT Instruments.Instrument FROM Instruments JOIN Band ON Instruments.BandmateId = Band.Id WHERE Band.Lastname = 'Heilo';
SELECT SongId, COUNT(*) AS VocalCount FROM Vocals GROUP BY SongId ORDER BY VocalCount DESC LIMIT 1;
SELECT S.Title, COUNT(V.Bandmate) AS VocalCount FROM Songs S JOIN Vocals V ON S.SongId = V.SongId GROUP BY S.SongId, S.Title ORDER BY VocalCount DESC LIMIT 1;
SELECT Type, COUNT(*) AS Frequency FROM Vocals GROUP BY Type ORDER BY Frequency DESC LIMIT 1;
SELECT Type, COUNT(*) AS Frequency FROM Vocals GROUP BY Type ORDER BY Frequency DESC LIMIT 1;
SELECT Type, COUNT(*) AS Count FROM Vocals WHERE Bandmate IN (     SELECT Id FROM Band WHERE Lastname = 'Heilo' ) GROUP BY Type ORDER BY Count DESC LIMIT 1;
SELECT Type FROM Vocals WHERE Bandmate IN (     SELECT Id     FROM Band     WHERE Lastname = 'Heilo' ) GROUP BY Type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Type  FROM Vocals  WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Le Pop');
SELECT Type  FROM Vocals  WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Le Pop');
SELECT COUNT(DISTINCT Type) AS VocalTypeCount FROM Vocals WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Demon Kitty Rag');
SELECT Type  FROM Vocals  WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Demon Kitty Rag');
SELECT COUNT(DISTINCT SongId) AS LeadVocalCount FROM Vocals WHERE Type = 'Lead';
SELECT COUNT(*)  FROM Vocals  WHERE Type = 'lead';
SELECT V.Type  FROM Vocals V  JOIN Songs S ON V.SongId = S.SongId  JOIN Band B ON V.Bandmate = B.Id  WHERE B.Firstname = 'Solveig' AND S.Title = 'A Bar in Amsterdam';
SELECT V.Type  FROM Vocals V JOIN Songs S ON V.SongId = S.SongId JOIN Band B ON V.Bandmate = B.Id WHERE B.Firstname = 'Solveig' AND S.Title = 'A Bar in Amsterdam';
SELECT S.Title FROM Songs S LEFT JOIN Vocals V ON S.SongId = V.SongId AND V.Type = 'Lead' WHERE V.SongId IS NULL;
SELECT S.Title FROM Songs S LEFT JOIN Vocals V ON S.SongId = V.SongId AND V.Type = 'Lead' WHERE V.SongId IS NULL;
SELECT DISTINCT Type FROM Vocals;
SELECT DISTINCT Type FROM Vocals;
SELECT * FROM Albums WHERE Year = 2010;
SELECT * FROM Albums WHERE Year = 2010;
SELECT DISTINCT b.Firstname, b.Lastname FROM Songs s JOIN Performance p ON s.SongId = p.SongId JOIN Band b ON p.Bandmate = b.Id WHERE s.Title = 'Le Pop';
SELECT b.Firstname, b.Lastname  FROM Band b  JOIN Performance p ON b.Id = p.Bandmate  JOIN Songs s ON p.SongId = s.SongId  WHERE s.Title = 'Le Pop';
SELECT b.Lastname FROM Band b JOIN Instruments i ON b.Id = i.BandmateId GROUP BY b.Lastname ORDER BY COUNT(i.SongId) DESC LIMIT 1;
SELECT Lastname FROM Band WHERE Id = (     SELECT Bandmate     FROM Vocals     GROUP BY Bandmate     ORDER BY COUNT(SongId) DESC     LIMIT 1 );
SELECT Instruments.Instrument  FROM Instruments  JOIN Band ON Instruments.BandmateId = Band.Id  JOIN Songs ON Instruments.SongId = Songs.SongId  WHERE Band.Lastname = 'Heilo' AND Songs.Title = 'Badlands';
SELECT i.Instrument  FROM Instruments i JOIN Band b ON i.BandmateId = b.Id JOIN Songs s ON i.SongId = s.SongId JOIN Tracklists t ON s.SongId = t.SongId JOIN Albums a ON t.AlbumId = a.AId WHERE b.Lastname = 'Heilo' AND a.Title = 'Badlands';
SELECT COUNT(*)  FROM Instruments  WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Badlands');
SELECT COUNT(DISTINCT Instrument)  FROM Instruments  JOIN Songs ON Instruments.SongId = Songs.SongId  WHERE Songs.Title = 'Badlands';
SELECT Type  FROM Vocals  WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Badlands');
SELECT Type FROM Vocals WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Badlands');
SELECT COUNT(DISTINCT Type) AS VocalTypeCount FROM Vocals JOIN Songs ON Vocals.SongId = Songs.SongId WHERE Songs.Title = 'Le Pop';
SELECT COUNT(DISTINCT Type)  FROM Vocals  WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Le Pop');
SELECT COUNT(DISTINCT v1.SongId) AS SharedVocalCount FROM Vocals v1 JOIN Vocals v2 ON v1.SongId = v2.SongId AND v1.Bandmate <> v2.Bandmate;
SELECT COUNT(DISTINCT SongId) AS DifferentSongsWithSharedVocals FROM Vocals GROUP BY SongId HAVING COUNT(DISTINCT Bandmate) > 1;
SELECT S.Title  FROM Songs S  LEFT JOIN Vocals V ON S.SongId = V.SongId AND V.Type = 'back'  WHERE V.SongId IS NULL;
SELECT DISTINCT s.Title FROM Songs s LEFT JOIN Vocals v ON s.SongId = v.SongId AND v.Type = 'back' WHERE v.SongId IS NULL;
SELECT Type, COUNT(*) AS Count FROM Vocals WHERE Bandmate IN (SELECT Id FROM Band WHERE Firstname = 'Solveig') GROUP BY Type ORDER BY Count DESC LIMIT 1;
SELECT Type, COUNT(*) AS VocalCount FROM Vocals WHERE Bandmate IN (SELECT Id FROM Band WHERE Firstname = 'Solveig') GROUP BY Type ORDER BY VocalCount DESC LIMIT 1;
SELECT V.Type  FROM Vocals V  JOIN Songs S ON V.SongId = S.SongId  JOIN Band B ON V.Bandmate = B.Id  WHERE B.Lastname = 'Heilo' AND S.Title = 'Der Kapitan';
SELECT V.Type FROM Vocals V JOIN Songs S ON V.SongId = S.SongId JOIN Performance P ON S.SongId = P.SongId JOIN Band B ON P.Bandmate = B.Id WHERE B.Lastname = 'Heilo' AND S.Title = 'Der Kapitan';
SELECT b.Firstname FROM Band b JOIN Performance p ON b.Id = p.Bandmate GROUP BY b.Firstname ORDER BY COUNT(p.SongId) DESC LIMIT 1;
SELECT b.Firstname FROM Band b JOIN Performance p ON b.Id = p.Bandmate GROUP BY b.Firstname ORDER BY COUNT(p.SongId) DESC LIMIT 1;
SELECT Type, COUNT(*) AS Count FROM Vocals v JOIN Band b ON v.Bandmate = b.Id WHERE b.Firstname = 'Marianne' GROUP BY Type ORDER BY Count DESC LIMIT 1;
SELECT v.Type FROM Vocals v JOIN Band b ON v.Bandmate = b.Id WHERE b.Firstname = 'Marianne' GROUP BY v.Type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT b.Firstname, b.Lastname FROM Performance p JOIN Songs s ON p.SongId = s.SongId JOIN Band b ON p.Bandmate = b.Id WHERE s.Title = 'Der Kapitan' AND p.StagePosition = 'back';
SELECT b.Firstname, b.Lastname FROM Performance p JOIN Songs s ON p.SongId = s.SongId JOIN Band b ON p.Bandmate = b.Id WHERE s.Title = 'Der Kapitan' AND p.StagePosition = 'Backstage';
SELECT S.Title FROM Songs S LEFT JOIN Vocals V ON S.SongId = V.SongId AND V.Type = 'back' WHERE V.SongId IS NULL;
SELECT S.Title FROM Songs S LEFT JOIN Vocals V ON S.SongId = V.SongId AND V.Type = 'back' WHERE V.SongId IS NULL;
SELECT Songs.Title  FROM Songs  JOIN Tracklists ON Songs.SongId = Tracklists.SongId  JOIN Albums ON Tracklists.AlbumId = Albums.AId  WHERE Albums.Title = 'A Kiss Before You Go: Live in Hamburg';
SELECT Songs.Title  FROM Songs  JOIN Tracklists ON Songs.SongId = Tracklists.SongId  JOIN Albums ON Tracklists.AlbumId = Albums.AId  WHERE Albums.Title = 'A Kiss Before You Go: Live in Hamburg';
SELECT Songs.Title  FROM Songs  JOIN Tracklists ON Songs.SongId = Tracklists.SongId  JOIN Albums ON Tracklists.AlbumId = Albums.AId  WHERE Albums.Label = 'Universal Music Group';
SELECT Songs.Title  FROM Songs  JOIN Tracklists ON Songs.SongId = Tracklists.SongId  JOIN Albums ON Tracklists.AlbumId = Albums.AId  WHERE Albums.Label = 'Universal Music Group';
SELECT COUNT(DISTINCT t.SongId) AS NumberOfSongs FROM Tracklists t JOIN Albums a ON t.AlbumId = a.AId WHERE a.Type = 'Studio';
SELECT COUNT(DISTINCT tl.SongId) AS SongsInStudioAlbums FROM Tracklists tl JOIN Albums a ON tl.AlbumId = a.AId WHERE a.Type = 'Studio';
SELECT Founder FROM Manufacturers WHERE Name = 'Sony';
SELECT Founder FROM Manufacturers WHERE Name = 'Sony';
SELECT Headquarter  FROM Manufacturers  WHERE Founder = 'James';
SELECT Headquarter FROM Manufacturers WHERE Founder = 'James';
SELECT Name, Headquarter FROM Manufacturers ORDER BY Revenue DESC;
SELECT Name, Headquarter FROM Manufacturers ORDER BY Revenue DESC;
SELECT AVG(Revenue) AS Average_Revenue, MAX(Revenue) AS Maximum_Revenue, SUM(Revenue) AS Total_Revenue FROM Manufacturers;
SELECT AVG(Revenue) AS Average_Revenue, MAX(Revenue) AS Maximum_Revenue, SUM(Revenue) AS Total_Revenue FROM Manufacturers;
SELECT COUNT(*) FROM Manufacturers WHERE Founder = 'Andy';
SELECT COUNT(*) FROM Manufacturers WHERE Founder = 'Andy';
SELECT SUM(Revenue) AS Total_Revenue FROM Manufacturers WHERE Headquarter = 'Austin';
SELECT SUM(Revenue)  FROM Manufacturers  WHERE Headquarter = 'Austin';
SELECT DISTINCT Headquarter FROM Manufacturers;
SELECT DISTINCT Headquarter FROM Manufacturers;
SELECT COUNT(*)  FROM Manufacturers  WHERE Headquarter IN ('Tokyo', 'Beijing');
SELECT COUNT(*)  FROM Manufacturers  WHERE Headquarter IN ('Tokyo', 'Beijing');
SELECT Founder FROM Manufacturers WHERE Name LIKE 'S%';
SELECT Founder FROM Manufacturers WHERE Name LIKE 'S%';
SELECT Name FROM Manufacturers WHERE Revenue BETWEEN 100 AND 150;
SELECT Name FROM Manufacturers WHERE Revenue BETWEEN 100 AND 150;
SELECT SUM(Revenue) AS Total_Revenue FROM Manufacturers WHERE Headquarter IN ('Tokyo', 'Taiwan');
SELECT SUM(Revenue) AS Total_Revenue FROM Manufacturers WHERE Headquarter IN ('Tokyo', 'Taiwan');
SELECT p.Name  FROM Products p  JOIN Manufacturers m ON p.Manufacturer = m.Code  WHERE m.Name IN ('Creative Labs', 'Sony')  GROUP BY p.Name  HAVING COUNT(DISTINCT m.Name) = 2;
SELECT p.Name  FROM Products p  JOIN Manufacturers m ON p.Manufacturer = m.Code  WHERE m.Name IN ('Creative Labs', 'Sony')  GROUP BY p.Name  HAVING COUNT(DISTINCT m.Name) = 2;
SELECT Name, Headquarter, Founder  FROM Manufacturers  WHERE Revenue = (SELECT MAX(Revenue) FROM Manufacturers);
SELECT Name, Headquarter, Founder  FROM Manufacturers  WHERE Revenue = (SELECT MAX(Revenue) FROM Manufacturers);
SELECT Name, Headquarter, Revenue FROM Manufacturers ORDER BY Revenue DESC;
SELECT Name, Headquarter, Revenue FROM Manufacturers ORDER BY Revenue DESC;
SELECT Name  FROM Manufacturers  WHERE Revenue > (SELECT AVG(Revenue) FROM Manufacturers);
SELECT Name  FROM Manufacturers  WHERE Revenue > (SELECT AVG(Revenue) FROM Manufacturers);
SELECT Name  FROM Manufacturers  WHERE Revenue < ALL (SELECT Revenue FROM Manufacturers WHERE Headquarter = 'Austin');
SELECT Name  FROM Manufacturers  WHERE Revenue < (SELECT MIN(Revenue) FROM Manufacturers WHERE Headquarter = 'Austin');
SELECT SUM(m.Revenue) AS Total_Revenue FROM Manufacturers m WHERE m.Revenue > (SELECT MAX(m2.Revenue) FROM Manufacturers m2 WHERE m2.Headquarter = 'Austin');
SELECT SUM(Revenue) AS Total_Revenue FROM Manufacturers WHERE Revenue > (SELECT MIN(Revenue) FROM Manufacturers WHERE Headquarter = 'Austin');
SELECT Founder, SUM(Revenue) AS Total_Revenue FROM Manufacturers GROUP BY Founder;
SELECT SUM(Revenue) AS Total_Revenue FROM Manufacturers WHERE Founder IS NOT NULL;
SELECT m.Headquarter, m.Name, m.Revenue FROM Manufacturers m WHERE m.Revenue = (     SELECT MAX(Revenue)     FROM Manufacturers     WHERE Headquarter = m.Headquarter ) ORDER BY m.Headquarter;
SELECT m.Headquarter, m.Name, m.Revenue FROM Manufacturers m JOIN (     SELECT Headquarter, MAX(Revenue) AS MaxRevenue     FROM Manufacturers     GROUP BY Headquarter ) AS max_revenues ON m.Headquarter = max_revenues.Headquarter AND m.Revenue = max_revenues.MaxRevenue;
SELECT m.Name, SUM(m.Revenue) AS Total_Revenue FROM Manufacturers m GROUP BY m.Name;
SELECT m.Name, SUM(m.Revenue) AS Total_Revenue FROM Manufacturers m GROUP BY m.Name;
SELECT m.Name, AVG(p.Price) AS Average_Price FROM Manufacturers m JOIN Products p ON m.Code = p.Manufacturer GROUP BY m.Name;
SELECT m.Name AS Manufacturer, AVG(p.Price) AS Average_Price FROM Manufacturers m JOIN Products p ON m.Code = p.Manufacturer GROUP BY m.Name;
SELECT COUNT(DISTINCT p.Code) AS DifferentProducts FROM Products p JOIN Manufacturers m ON p.Manufacturer = m.Code GROUP BY m.Headquarter;
SELECT m.Headquarter, COUNT(DISTINCT p.Name) AS ProductCount FROM Manufacturers m JOIN Products p ON m.Code = p.Manufacturer GROUP BY m.Headquarter;
SELECT COUNT(*) AS NumberOfProductsNotMadeBySony FROM Products WHERE Manufacturer <> (SELECT Code FROM Manufacturers WHERE Name = 'Sony');
SELECT COUNT(*)  FROM Products  WHERE Manufacturer <> (SELECT Code FROM Manufacturers WHERE Name = 'Sony');
SELECT Name  FROM Manufacturers  WHERE Code NOT IN (SELECT Manufacturer FROM Products WHERE Name = 'DVD drive');
SELECT Name  FROM Manufacturers  WHERE Code NOT IN (SELECT Manufacturer FROM Products WHERE Name LIKE '%DVD drive%');
SELECT m.Name, COUNT(p.Code) AS ProductCount FROM Manufacturers m LEFT JOIN Products p ON m.Code = p.Manufacturer GROUP BY m.Name;
SELECT m.Name, COUNT(p.Code) AS ProductCount FROM Manufacturers m LEFT JOIN Products p ON m.Code = p.Manufacturer GROUP BY m.Name;
SELECT Name FROM Products;
SELECT Name FROM Products;
SELECT Name, Price FROM Products;
SELECT Name, Price FROM Products;
SELECT Name FROM Products WHERE Price <= 200;
SELECT Name FROM Products WHERE Price <= 200;
SELECT * FROM Products WHERE Price BETWEEN 60 AND 120;
SELECT * FROM Products WHERE Price BETWEEN 60 AND 120;
SELECT AVG(Price) AS AveragePrice FROM Products;
SELECT AVG(Price) AS AveragePrice FROM Products;
SELECT AVG(Price) AS AveragePrice  FROM Products  WHERE Manufacturer = 2;
SELECT AVG(Price) AS AveragePrice FROM Products WHERE Manufacturer = 2;
SELECT COUNT(*) FROM Products WHERE Price >= 180;
SELECT COUNT(*) FROM Products WHERE Price >= 180;
SELECT Name, Price  FROM Products  WHERE Price >= 180  ORDER BY Price DESC, Name ASC;
SELECT Name, Price  FROM Products  WHERE Price >= 180  ORDER BY Price DESC, Name ASC;
SELECT Products.*, Manufacturers.* FROM Products JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code;
SELECT Products.*, Manufacturers.* FROM Products JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code;
SELECT p.Manufacturer, AVG(p.Price) AS AveragePrice FROM Products p GROUP BY p.Manufacturer;
SELECT Manufacturer, AVG(Price) AS AveragePrice FROM Products GROUP BY Manufacturer;
SELECT m.Name, AVG(p.Price) AS Average_Price FROM Manufacturers m JOIN Products p ON m.Code = p.Manufacturer GROUP BY m.Name;
SELECT m.Name AS Manufacturer, AVG(p.Price) AS Average_Price FROM Manufacturers m JOIN Products p ON m.Code = p.Manufacturer GROUP BY m.Name;
SELECT m.Name FROM Manufacturers m JOIN Products p ON m.Code = p.Manufacturer GROUP BY m.Name HAVING AVG(p.Price) >= 150;
SELECT m.Name, AVG(p.Price) AS Average_Price FROM Manufacturers m JOIN Products p ON m.Code = p.Manufacturer GROUP BY m.Name HAVING AVG(p.Price) >= 150;
SELECT Name, Price FROM Products ORDER BY Price ASC LIMIT 1;
SELECT Name, Price FROM Products ORDER BY Price ASC LIMIT 1;
SELECT m.Name AS ManufacturerName, p.Name AS ProductName, p.Price FROM Manufacturers m JOIN Products p ON m.Code = p.Manufacturer WHERE p.Price = (SELECT MAX(Price) FROM Products WHERE Manufacturer = m.Code);
SELECT m.Name AS ManufacturerName, p.Name AS ProductName, p.Price FROM Products p JOIN Manufacturers m ON p.Manufacturer = m.Code WHERE p.Price = (     SELECT MAX(Price)     FROM Products     WHERE Manufacturer = m.Code );
SELECT p1.Code FROM Products p1 JOIN (     SELECT Manufacturer, MIN(Price) AS MinPrice     FROM Products     GROUP BY Manufacturer ) p2 ON p1.Manufacturer = p2.Manufacturer AND p1.Price = p2.MinPrice;
SELECT p.Code, p.Name FROM Products p JOIN (     SELECT Manufacturer, MIN(Price) AS MinPrice     FROM Products     GROUP BY Manufacturer ) AS cheapest ON p.Manufacturer = cheapest.Manufacturer AND p.Price = cheapest.MinPrice;
SELECT problem_log_id  FROM Problem_Log  ORDER BY log_entry_date DESC  LIMIT 1;
SELECT problem_log_id  FROM Problem_Log  ORDER BY log_entry_date DESC  LIMIT 1;
SELECT problem_log_id, problem_id  FROM Problem_Log  ORDER BY log_entry_date ASC  LIMIT 1;
SELECT problem_log_id, problem_id FROM Problem_Log ORDER BY log_entry_date ASC LIMIT 1;
SELECT problem_log_id, log_entry_date  FROM Problem_Log  WHERE problem_id = 10;
SELECT problem_log_id, log_entry_date  FROM Problem_Log  WHERE problem_id = 10;
SELECT problem_log_id, log_entry_description FROM Problem_Log;
SELECT problem_log_id, log_entry_description FROM Problem_Log;
SELECT DISTINCT s.staff_first_name, s.staff_last_name FROM Staff s JOIN Problem_Log pl ON s.staff_id = pl.assigned_to_staff_id WHERE pl.problem_id = 1;
SELECT s.staff_first_name, s.staff_last_name FROM Problem_Log pl JOIN Staff s ON pl.assigned_to_staff_id = s.staff_id WHERE pl.problem_id = 1;
SELECT p.problem_id, pl.problem_log_id FROM Problem_Log pl JOIN Staff s ON pl.assigned_to_staff_id = s.staff_id JOIN Problems p ON pl.problem_id = p.problem_id WHERE s.staff_first_name = 'Rylan' AND s.staff_last_name = 'Homenick';
SELECT p.problem_id, pl.problem_log_id FROM Problem_Log pl JOIN Staff s ON pl.assigned_to_staff_id = s.staff_id JOIN Problems p ON pl.problem_id = p.problem_id WHERE s.staff_first_name = 'Rylan' AND s.staff_last_name = 'Homenick';
SELECT COUNT(*) AS problem_count FROM Problems p JOIN Product pr ON p.product_id = pr.product_id WHERE pr.product_name = 'voluptatem';
SELECT COUNT(*) AS problem_count FROM Problems p JOIN Product pr ON p.product_id = pr.product_id WHERE pr.product_name = 'voluptatem';
SELECT COUNT(p.problem_id) AS number_of_problems, pr.product_name FROM Problems p JOIN Product pr ON p.product_id = pr.product_id GROUP BY p.product_id ORDER BY number_of_problems DESC LIMIT 1;
SELECT p.product_name, COUNT(pr.problem_id) AS number_of_problems FROM Product p JOIN Problems pr ON p.product_id = pr.product_id GROUP BY p.product_name ORDER BY number_of_problems DESC LIMIT 1;
SELECT p.problem_description FROM Problems p JOIN Staff s ON p.reported_by_staff_id = s.staff_id WHERE s.staff_first_name = 'Christop';
SELECT p.problem_description FROM Problems p JOIN Staff s ON p.reported_by_staff_id = s.staff_id WHERE s.staff_first_name = 'Christop';
SELECT p.problem_id FROM Problems p JOIN Staff s ON p.reported_by_staff_id = s.staff_id WHERE s.staff_last_name = 'Bosco';
SELECT p.problem_id FROM Problems p JOIN Staff s ON p.reported_by_staff_id = s.staff_id WHERE s.staff_last_name = 'Bosco';
SELECT problem_id  FROM Problems  WHERE date_problem_reported > '1978-06-26';
SELECT problem_id  FROM Problems  WHERE date_problem_reported > '1978-06-26';
SELECT problem_id  FROM Problems  WHERE date_problem_reported < '1978-06-26';
SELECT problem_id  FROM Problems  WHERE date_problem_reported < '1978-06-26';
SELECT p.product_id, COUNT(pr.problem_id) AS number_of_problems FROM Product p JOIN Problems pr ON p.product_id = pr.product_id GROUP BY p.product_id;
SELECT p.product_id, COUNT(pr.problem_id) AS problem_count FROM Product p JOIN Problems pr ON p.product_id = pr.product_id GROUP BY p.product_id;
SELECT p.product_id, COUNT(pr.problem_id) AS number_of_problems FROM Product p JOIN Problems pr ON p.product_id = pr.product_id WHERE pr.date_problem_reported > '1986-11-13' GROUP BY p.product_id;
SELECT p.product_id, COUNT(pr.problem_id) AS problem_count FROM Problems pr JOIN Product p ON pr.product_id = p.product_id WHERE pr.date_problem_reported > '1986-11-13' GROUP BY p.product_id;
SELECT DISTINCT product_name  FROM Product  ORDER BY product_name;
SELECT DISTINCT product_name  FROM Product  ORDER BY product_name ASC;
SELECT DISTINCT product_name  FROM Product  ORDER BY product_id;
SELECT DISTINCT product_name  FROM Product  ORDER BY product_id;
SELECT p.problem_id FROM Problems p JOIN Staff s ON p.reported_by_staff_id = s.staff_id WHERE s.staff_first_name IN ('Dameon', 'Jolie') AND s.staff_last_name IN ('Frami', 'Weber');
SELECT p.problem_id FROM Problems p JOIN Staff s ON p.reported_by_staff_id = s.staff_id WHERE s.staff_first_name IN ('Dameon', 'Jolie') AND s.staff_last_name IN ('Frami', 'Weber');
SELECT p.product_id FROM Problems p JOIN Staff r ON p.reported_by_staff_id = r.staff_id JOIN Staff c ON p.closure_authorised_by_staff_id = c.staff_id WHERE r.staff_first_name = 'Christop' AND r.staff_last_name = 'Berge' AND c.staff_first_name = 'Ashley' AND c.staff_last_name = 'Medhurst';
SELECT p.product_id FROM Problems p JOIN Staff reported ON p.reported_by_staff_id = reported.staff_id JOIN Staff authorised ON p.closure_authorised_by_staff_id = authorised.staff_id WHERE reported.staff_first_name = 'Christop' AND reported.staff_last_name = 'Berge' AND authorised.staff_first_name = 'Ashley' AND authorised.staff_last_name = 'Medhurst';
SELECT p.problem_id FROM Problems p WHERE p.date_problem_reported < (     SELECT MIN(p2.date_problem_reported)     FROM Problems p2     JOIN Staff s ON p2.reported_by_staff_id = s.staff_id     WHERE s.staff_first_name = 'Lysanne' AND s.staff_last_name = 'Turcotte' );
SELECT p.problem_id FROM Problems p WHERE p.date_problem_reported < (     SELECT MIN(p2.date_problem_reported)     FROM Problems p2     WHERE p2.reported_by_staff_id = (         SELECT s.staff_id         FROM Staff s         WHERE s.staff_first_name = 'Lysanne' AND s.staff_last_name = 'Turcotte'     ) );
SELECT p.problem_id FROM Problems p WHERE p.date_problem_reported > (     SELECT MAX(p2.date_problem_reported)     FROM Problems p2     JOIN Staff s ON p2.reported_by_staff_id = s.staff_id     WHERE s.staff_first_name = 'Rylan' AND s.staff_last_name = 'Homenick' );
SELECT p.problem_id FROM Problems p WHERE p.date_problem_reported > (     SELECT MIN(p2.date_problem_reported)     FROM Problems p2     JOIN Staff s ON p2.reported_by_staff_id = s.staff_id     WHERE s.staff_first_name = 'Rylan' AND s.staff_last_name = 'Homenick' );
SELECT p.product_name, COUNT(pr.problem_id) AS problem_count FROM Product p JOIN Problems pr ON p.product_id = pr.product_id GROUP BY p.product_name ORDER BY problem_count DESC LIMIT 3;
SELECT p.product_name, COUNT(pr.problem_id) AS problem_count FROM Product p JOIN Problems pr ON p.product_id = pr.product_id GROUP BY p.product_name ORDER BY problem_count DESC LIMIT 3;
SELECT p.problem_id FROM Problems p JOIN Product pr ON p.product_id = pr.product_id WHERE pr.product_name = 'voluptatem' AND p.date_problem_reported > '1995-01-01';
SELECT p.problem_id FROM Problems p JOIN Product pr ON p.product_id = pr.product_id WHERE pr.product_name = 'voluptatem' AND p.date_problem_reported > '1995-01-01';
SELECT DISTINCT s.staff_first_name, s.staff_last_name FROM Problems p JOIN Product pr ON p.product_id = pr.product_id JOIN Staff s ON p.reported_by_staff_id = s.staff_id WHERE pr.product_name = 'rem' AND p.problem_id NOT IN (     SELECT problem_id     FROM Problems     WHERE product_id IN (         SELECT product_id         FROM Product         WHERE product_name = 'aut'     ) );
SELECT DISTINCT s.staff_first_name, s.staff_last_name FROM Staff s JOIN Problems p ON s.staff_id = p.reported_by_staff_id JOIN Product pr ON p.product_id = pr.product_id WHERE pr.product_name = 'rem'  AND p.reported_by_staff_id NOT IN (     SELECT reported_by_staff_id     FROM Problems p2     JOIN Product pr2 ON p2.product_id = pr2.product_id     WHERE pr2.product_name = 'aut' );
SELECT DISTINCT p.product_name FROM Product p JOIN Problems prob ON p.product_id = prob.product_id JOIN Staff s1 ON prob.reported_by_staff_id = s1.staff_id JOIN Staff s2 ON prob.reported_by_staff_id = s2.staff_id WHERE s1.staff_first_name = 'Lacey' AND s1.staff_last_name = 'Bosco' AND s2.staff_first_name = 'Kenton' AND s2.staff_last_name = 'Champlin';
SELECT DISTINCT p.product_name FROM Product p JOIN Problems pr ON p.product_id = pr.product_id WHERE pr.reported_by_staff_id IN (     SELECT staff_id FROM Staff WHERE staff_first_name = 'Lacey' AND staff_last_name = 'Bosco'     UNION     SELECT staff_id FROM Staff WHERE staff_first_name = 'Kenton' AND staff_last_name = 'Champlin' ) GROUP BY p.product_id HAVING COUNT(DISTINCT pr.reported_by_staff_id) = 2;
SELECT COUNT(*)  FROM branch  WHERE Branch_ID IN (     SELECT Branch_ID      FROM membership_register_branch      GROUP BY Branch_ID      HAVING COUNT(Member_ID) > (         SELECT AVG(membership_count)          FROM (             SELECT COUNT(Member_ID) AS membership_count              FROM membership_register_branch              GROUP BY Branch_ID         ) AS avg_memberships     ) );
SELECT COUNT(*)  FROM branch  WHERE Branch_ID IN (     SELECT Branch_ID      FROM membership_register_branch      GROUP BY Branch_ID      HAVING COUNT(Member_ID) > (         SELECT AVG(membership_count)          FROM (             SELECT COUNT(Member_ID) AS membership_count              FROM membership_register_branch              GROUP BY Branch_ID         ) AS avg_memberships     ) );
SELECT Name, Address_road, City  FROM branch  ORDER BY Open_year;
SELECT Name, Address_road, City  FROM branch  ORDER BY Open_year;
SELECT b.Name FROM branch b JOIN membership_register_branch mrb ON b.Branch_ID = mrb.Branch_ID GROUP BY b.Branch_ID, b.Name ORDER BY COUNT(mrb.Member_ID) DESC LIMIT 3;
SELECT b.Name FROM branch b JOIN membership_register_branch mrb ON b.Branch_ID = mrb.Branch_ID GROUP BY b.Branch_ID, b.Name ORDER BY COUNT(mrb.Member_ID) DESC LIMIT 3;
SELECT DISTINCT b.City FROM branch b JOIN membership_register_branch mrb ON b.Branch_ID = mrb.Branch_ID GROUP BY b.City HAVING COUNT(mrb.Member_ID) >= 100;
SELECT b.City FROM branch b JOIN membership_register_branch mrb ON b.Branch_ID = mrb.Branch_ID GROUP BY b.City HAVING COUNT(mrb.Member_ID) > 100;
SELECT Open_year FROM branch GROUP BY Open_year HAVING COUNT(Branch_ID) >= 2;
SELECT Open_year FROM branch GROUP BY Open_year HAVING COUNT(Branch_ID) >= 2;
SELECT MIN(membership_amount) AS Min_Membership_Amount, MAX(membership_amount) AS Max_Membership_Amount FROM branch WHERE Open_year = 2011 OR City = 'London';
SELECT MIN(membership_amount) AS Min_Amount, MAX(membership_amount) AS Max_Amount FROM branch WHERE Open_year = 2011 OR City = 'London';
SELECT City, COUNT(*) AS Number_of_Branches FROM branch WHERE Open_year < 2010 GROUP BY City;
SELECT City, COUNT(*) AS Branch_Count FROM branch WHERE Open_year < 2010 GROUP BY City;
SELECT COUNT(DISTINCT Level) AS Different_Levels FROM member;
SELECT DISTINCT Level FROM member;
SELECT Card_Number, Name, Hometown  FROM member  ORDER BY Level DESC;
SELECT Card_Number, Name, Hometown  FROM member  ORDER BY Level DESC;
SELECT Level, COUNT(Member_ID) AS Member_Count FROM member GROUP BY Level ORDER BY Member_Count DESC LIMIT 1;
SELECT Level, COUNT(*) AS Member_Count FROM member GROUP BY Level ORDER BY Member_Count DESC LIMIT 1;
SELECT m.Name AS Member_Name, b.Name AS Branch_Name FROM member m JOIN membership_register_branch mr ON m.Member_ID = mr.Member_ID JOIN branch b ON mr.Branch_ID = b.Branch_ID ORDER BY mr.Register_Year;
SELECT m.Name AS Member_Name, b.Name AS Branch_Name, mrb.Register_Year FROM member m JOIN membership_register_branch mrb ON m.Member_ID = mrb.Member_ID JOIN branch b ON mrb.Branch_ID = b.Branch_ID ORDER BY mrb.Register_Year;
SELECT b.Name, COUNT(mrb.Member_ID) AS Number_of_Members FROM branch b LEFT JOIN membership_register_branch mrb ON b.Branch_ID = mrb.Branch_ID WHERE mrb.Register_Year > 2015 GROUP BY b.Name;
SELECT b.Branch_ID, b.Name FROM branch b JOIN membership_register_branch mrb ON b.Branch_ID = mrb.Branch_ID WHERE mrb.Register_Year > 2015;
SELECT Name  FROM member  WHERE Member_ID NOT IN (SELECT Member_ID FROM membership_register_branch);
SELECT Name  FROM member  WHERE Member_ID NOT IN (SELECT Member_ID FROM membership_register_branch);
SELECT b.Name, b.City FROM branch b LEFT JOIN membership_register_branch mrb ON b.Branch_ID = mrb.Branch_ID WHERE mrb.Member_ID IS NULL;
SELECT b.Name, b.City FROM branch b LEFT JOIN membership_register_branch mrb ON b.Branch_ID = mrb.Branch_ID WHERE mrb.Member_ID IS NULL;
SELECT b.Name, b.Open_year FROM branch b JOIN membership_register_branch mrb ON b.Branch_ID = mrb.Branch_ID WHERE mrb.Register_Year = 2016 GROUP BY b.Branch_ID ORDER BY COUNT(mrb.Member_ID) DESC LIMIT 1;
SELECT b.Name, b.Open_year FROM branch b JOIN membership_register_branch mrb ON b.Branch_ID = mrb.Branch_ID WHERE mrb.Register_Year = 2016 GROUP BY b.Branch_ID, b.Name, b.Open_year ORDER BY COUNT(mrb.Member_ID) DESC LIMIT 1;
SELECT m.Name, m.Hometown FROM member m JOIN membership_register_branch mr ON m.Member_ID = mr.Member_ID WHERE mr.Register_Year = 2016;
SELECT m.Name, m.Hometown FROM member m JOIN membership_register_branch mr ON m.Member_ID = mr.Member_ID WHERE mr.Register_Year = 2016;
SELECT DISTINCT b.City FROM branch b WHERE b.Open_year = 2001 AND b.membership_amount > 100;
SELECT DISTINCT b.City FROM branch b JOIN membership_register_branch mrb ON b.Branch_ID = mrb.Branch_ID WHERE b.Open_year = 2001 AND b.Branch_ID IN (     SELECT Branch_ID     FROM membership_register_branch     GROUP BY Branch_ID     HAVING COUNT(Member_ID) > 100 );
SELECT DISTINCT b.City FROM branch b LEFT JOIN (     SELECT Branch_ID     FROM membership_register_branch     GROUP BY Branch_ID     HAVING COUNT(Member_ID) > 100 ) AS m ON b.Branch_ID = m.Branch_ID WHERE m.Branch_ID IS NULL;
SELECT DISTINCT b.City FROM branch b LEFT JOIN (     SELECT mb.Branch_ID     FROM membership_register_branch mb     GROUP BY mb.Branch_ID     HAVING COUNT(mb.Member_ID) > 100 ) AS branches_with_many_members ON b.Branch_ID = branches_with_many_members.Branch_ID WHERE branches_with_many_members.Branch_ID IS NULL;
SELECT SUM(p.Total_pounds) AS Total_Pounds FROM purchase p JOIN membership_register_branch mrb ON p.Member_ID = mrb.Member_ID AND p.Branch_ID = mrb.Branch_ID JOIN branch b ON mrb.Branch_ID = b.Branch_ID WHERE p.Year = 2018 AND b.City = 'London';
SELECT SUM(Total_pounds) AS Total_Pounds FROM purchase p JOIN branch b ON p.Branch_ID = b.Branch_ID WHERE p.Year = 2018 AND b.City = 'London';
SELECT COUNT(*) AS Total_Purchases FROM purchase p JOIN member m ON p.Member_ID = m.Member_ID WHERE m.Level = 6;
SELECT SUM(p.Total_pounds) AS Total_Purchases FROM purchase p JOIN member m ON p.Member_ID = m.Member_ID WHERE m.Level = 6;
SELECT DISTINCT b.Name FROM branch b JOIN membership_register_branch mrb ON b.Branch_ID = mrb.Branch_ID JOIN member m ON m.Member_ID = mrb.Member_ID WHERE m.Hometown IN ('Louisville, Kentucky', 'Hiram, Georgia') GROUP BY b.Branch_ID HAVING COUNT(DISTINCT CASE WHEN m.Hometown = 'Louisville, Kentucky' THEN m.Member_ID END) > 0    AND COUNT(DISTINCT CASE WHEN m.Hometown = 'Hiram, Georgia' THEN m.Member_ID END) > 0;
SELECT DISTINCT b.Name FROM branch b JOIN membership_register_branch mrb ON b.Branch_ID = mrb.Branch_ID JOIN member m ON m.Member_ID = mrb.Member_ID WHERE m.Hometown IN ('Louisville, Kentucky', 'Hiram, Georgia');
SELECT Card_Number  FROM member  WHERE Hometown LIKE '%Kentucky%';
SELECT Card_Number  FROM member  WHERE Hometown = 'Kentucky';
SELECT COUNT(*) AS Total_Students FROM Student;
SELECT COUNT(*) FROM Student;
SELECT COUNT(*) FROM Voting_record;
SELECT COUNT(*) FROM Voting_record;
SELECT COUNT(DISTINCT President_Vote) AS Distinct_President_Votes FROM Voting_record;
SELECT COUNT(DISTINCT President_Vote) AS Distinct_President_Votes FROM Voting_record;
SELECT MAX(Age) AS Max_Age FROM Student;
SELECT MAX(Age) AS Oldest_Age FROM Student;
SELECT LName FROM Student WHERE Major = 50;
SELECT LName FROM Student WHERE Major = 50;
SELECT Fname FROM Student WHERE Age > 22;
SELECT Fname FROM Student WHERE Age > 22;
SELECT DISTINCT Major FROM Student WHERE Sex = 'M';
SELECT Major FROM Student WHERE Sex = 'Male';
SELECT AVG(Age) AS Average_Age FROM Student WHERE Sex = 'F';
SELECT AVG(Age) AS Average_Age FROM Student WHERE Sex = 'Female';
SELECT MAX(Age) AS Max_Age, MIN(Age) AS Min_Age  FROM Student  WHERE Major = 600;
SELECT MAX(Age) AS Oldest_Age, MIN(Age) AS Youngest_Age  FROM Student  WHERE Major = 600;
SELECT DISTINCT Advisor  FROM Student  WHERE city_code = 'BAL';
SELECT DISTINCT Advisor FROM Student WHERE city_code = 'BAL';
SELECT DISTINCT Secretary_Vote  FROM Voting_record  WHERE Election_Cycle = 'Fall';
SELECT DISTINCT Secretary_Vote  FROM Voting_record  WHERE Election_Cycle = 'Fall';
SELECT DISTINCT President_Vote  FROM Voting_record  WHERE Registration_Date = '2015-08-30';
SELECT DISTINCT President_Vote  FROM Voting_record  WHERE Registration_Date = '2015-08-30';
SELECT DISTINCT Registration_Date, Election_Cycle FROM Voting_record;
SELECT DISTINCT Registration_Date, Election_Cycle FROM Voting_record;
SELECT DISTINCT President_Vote, Vice_President_Vote  FROM Voting_record;
SELECT DISTINCT President_Vote, Vice_President_Vote  FROM Voting_record;
SELECT DISTINCT S.LName FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.Class_President_Vote IS NOT NULL;
SELECT DISTINCT S.LName FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.Class_President_Vote IS NOT NULL;
SELECT DISTINCT S.Fname FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.Class_Senator_Vote IS NOT NULL;
SELECT DISTINCT S.Fname FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.Class_President_Vote IS NOT NULL;
SELECT DISTINCT s.Age FROM Student s JOIN Voting_record v ON s.StuID = v.StuID WHERE v.Secretary_Vote IS NOT NULL AND v.Election_Cycle = 'Fall';
SELECT DISTINCT s.Age FROM Student s JOIN Voting_record v ON s.StuID = v.StuID WHERE v.Secretary_Vote IS NOT NULL AND v.Election_Cycle = 'Fall';
SELECT DISTINCT s.Advisor FROM Student s JOIN Voting_record v ON s.StuID = v.StuID WHERE v.Treasurer_Vote IS NOT NULL AND v.Election_Cycle = 'Spring';
SELECT DISTINCT S.Advisor FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.Treasurer_Vote IS NOT NULL AND V.Election_Cycle = 'Spring';
SELECT DISTINCT S.Major FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.Treasurer_Vote IS NOT NULL;
SELECT DISTINCT s.Major FROM Student s JOIN Voting_record v ON s.StuID = v.StuID WHERE v.Treasurer_Vote IS NOT NULL;
SELECT S.Fname, S.LName FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE S.Sex = 'F' AND V.President_Vote IS NOT NULL;
SELECT S.Fname, S.LName FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE S.Sex = 'Female' AND V.President_Vote IS NOT NULL;
SELECT Fname, LName  FROM Student  JOIN Voting_record ON Student.StuID = Voting_record.StuID  WHERE Age = 18 AND Vice_President_Vote IS NOT NULL;
SELECT S.Fname, S.LName FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE S.Age = 18 AND V.Vice_President_Vote IS NOT NULL;
SELECT COUNT(*)  FROM Student s  JOIN Voting_record v ON s.StuID = v.StuID  WHERE s.Sex = 'M' AND v.Election_Cycle = 'Fall' AND v.Class_Senator_Vote IS NOT NULL;
SELECT COUNT(*)  FROM Student s  JOIN Voting_record v ON s.StuID = v.StuID  WHERE s.Sex = 'M' AND v.Election_Cycle = 'Fall' AND v.Class_Senator_Vote IS NOT NULL;
SELECT COUNT(*)  FROM Student s  JOIN Voting_record v ON s.StuID = v.StuID  WHERE s.city_code = 'NYC' AND v.Election_Cycle = 'Spring' AND v.Class_Senator_Vote IS NOT NULL;
SELECT COUNT(*)  FROM Student s  JOIN Voting_record v ON s.StuID = v.StuID  WHERE s.city_code = 'NYC' AND v.Election_Cycle = 'Spring' AND v.Class_Senator_Vote IS NOT NULL;
SELECT AVG(Age) AS Average_Age FROM Student JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE city_code = 'NYC' AND Election_Cycle = 'Spring' AND Secretary_Vote IS NOT NULL;
SELECT AVG(Age) AS Average_Age FROM Student s JOIN Voting_record v ON s.StuID = v.StuID WHERE s.city_code = 'NYC' AND v.Election_Cycle = 'Spring' AND v.Secretary_Vote IS NOT NULL;
SELECT AVG(Age) AS Average_Age FROM Student s JOIN Voting_record v ON s.StuID = v.StuID WHERE s.Sex = 'F' AND v.Election_Cycle = 'Spring' AND v.Secretary_Vote IS NOT NULL;
SELECT AVG(s.Age) AS Average_Age FROM Student s JOIN Voting_record v ON s.StuID = v.StuID WHERE s.Sex = 'Female' AND v.Election_Cycle = 'Spring' AND v.Secretary_Vote IS NOT NULL;
SELECT DISTINCT S.Fname FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.Vice_President_Vote IS NOT NULL AND S.city_code <> 'PIT';
SELECT DISTINCT S.Fname FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.Vice_President_Vote IS NOT NULL AND S.city_code <> 'PIT';
SELECT DISTINCT s.LName FROM Student s JOIN Voting_record v ON s.StuID = v.StuID WHERE v.President_Vote IS NOT NULL AND s.Advisor <> 2192;
SELECT DISTINCT s.LName FROM Student s JOIN Voting_record v ON s.StuID = v.StuID WHERE v.President_Vote IS NOT NULL AND s.Advisor <> 2192;
SELECT DISTINCT S.LName FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.President_Vote IS NOT NULL AND S.Advisor = 8741;
SELECT DISTINCT S.LName FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.President_Vote IS NOT NULL AND S.Advisor = 8741;
SELECT Advisor, COUNT(*) AS Total_Students FROM Student GROUP BY Advisor;
SELECT Advisor, COUNT(*) AS Student_Count FROM Student GROUP BY Advisor;
SELECT Advisor, COUNT(*) AS Student_Count FROM Student GROUP BY Advisor HAVING COUNT(*) > 2;
SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) > 2;
SELECT Major FROM Student GROUP BY Major HAVING COUNT(*) < 3;
SELECT Major FROM Student GROUP BY Major HAVING COUNT(StuID) < 3;
SELECT Election_Cycle, COUNT(*) AS Number_of_Voting_Records FROM Voting_record GROUP BY Election_Cycle;
SELECT Election_Cycle, COUNT(*) AS Voting_Record_Count FROM Voting_record GROUP BY Election_Cycle;
SELECT Major, COUNT(*) AS Student_Count FROM Student GROUP BY Major ORDER BY Student_Count DESC LIMIT 1;
SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Major, COUNT(*) AS Major_Count FROM Student WHERE Sex = 'F' GROUP BY Major ORDER BY Major_Count DESC LIMIT 1;
SELECT Major FROM Student WHERE Sex = 'Female' GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1;
SELECT city_code FROM Student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT city_code FROM Student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) > 2;
SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) > 2;
SELECT COUNT(*) AS total_products FROM Products;
SELECT COUNT(*) AS product_count FROM Products;
SELECT COUNT(*) AS number_of_colors FROM Ref_Colors;
SELECT COUNT(*) AS color_count FROM Ref_Colors;
SELECT COUNT(*) AS total_characteristics FROM Characteristics;
SELECT COUNT(*) AS characteristic_count FROM Characteristics;
SELECT product_name, typical_buying_price FROM Products;
SELECT product_name, typical_buying_price FROM Products;
SELECT color_description FROM Ref_Colors;
SELECT color_description FROM Ref_Colors;
SELECT DISTINCT c.characteristic_name FROM Characteristics c;
SELECT DISTINCT characteristic_name FROM Characteristics;
SELECT p.product_name FROM Products p JOIN Ref_Product_Categories pc ON p.product_category_code = pc.product_category_code WHERE pc.product_category_description = 'Spices';
SELECT product_name  FROM Products  WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Spices');
SELECT p.product_name, c.color_description, p.product_description FROM Products p JOIN Ref_Product_Categories pc ON p.product_category_code = pc.product_category_code JOIN Ref_Colors c ON p.color_code = c.color_code WHERE pc.product_category_description = 'Herbs';
SELECT p.product_name, c.color_description, p.product_description FROM Products p JOIN Ref_Product_Categories pc ON p.product_category_code = pc.product_category_code JOIN Ref_Colors c ON p.color_code = c.color_code WHERE pc.product_category_description = 'Herbs';
SELECT COUNT(*)  FROM Products  WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Seeds');
SELECT COUNT(*)  FROM Products  WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Seeds');
SELECT COUNT(*)  FROM Products p JOIN Ref_Product_Categories c ON p.product_category_code = c.product_category_code WHERE c.product_category_description = 'Spices'  AND p.typical_selling_price > 1000;
SELECT COUNT(*)  FROM Products  WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Spices')  AND typical_buying_price > 1000;
SELECT p.product_category_code, p.typical_buying_price FROM Products p WHERE p.product_name = 'cumin';
SELECT product_category_code, typical_buying_price FROM Products WHERE product_name = 'cumin';
SELECT p.product_category_code FROM Products p WHERE p.product_name = 'flax';
SELECT product_category_code  FROM Products  WHERE product_name = 'flax';
SELECT product_name  FROM Products  WHERE color_code = (SELECT color_code FROM Ref_Colors WHERE color_description = 'yellow');
SELECT p.product_name  FROM Products p  JOIN Ref_Colors c ON p.color_code = c.color_code  WHERE c.color_description = 'yellow';
SELECT DISTINCT rpc.product_category_description FROM Products p JOIN Ref_Product_Categories rpc ON p.product_category_code = rpc.product_category_code WHERE p.product_description LIKE '%t%';
SELECT DISTINCT rpc.product_category_description FROM Products p JOIN Ref_Product_Categories rpc ON p.product_category_code = rpc.product_category_code WHERE p.product_description LIKE '%t%';
SELECT rc.color_description  FROM Products p  JOIN Ref_Colors rc ON p.color_code = rc.color_code  WHERE p.product_name = 'catnip';
SELECT rc.color_description  FROM Products p  JOIN Ref_Colors rc ON p.color_code = rc.color_code  WHERE p.product_name = 'catnip';
SELECT p.color_code, c.color_description FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code WHERE p.product_name = 'chervil';
SELECT color_code, color_description  FROM Ref_Colors  WHERE color_code = (SELECT color_code                      FROM Products                      WHERE product_name = 'chervil');
SELECT p.product_id, c.color_description FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code JOIN Product_Characteristics pc ON p.product_id = pc.product_id GROUP BY p.product_id, c.color_description HAVING COUNT(pc.characteristic_id) >= 2;
SELECT p.product_id, c.color_description FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code JOIN Product_Characteristics pc ON p.product_id = pc.product_id GROUP BY p.product_id, c.color_description HAVING COUNT(pc.characteristic_id) >= 2;
SELECT p.product_name  FROM Products p  JOIN Ref_Colors c ON p.color_code = c.color_code  WHERE c.color_description = 'white';
SELECT p.product_name FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code WHERE c.color_description = 'white';
SELECT product_name, typical_buying_price, typical_selling_price FROM Products WHERE color_code = (SELECT color_code FROM Ref_Colors WHERE color_description = 'yellow');
SELECT p.product_name, p.typical_buying_price, p.typical_selling_price FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code WHERE c.color_description = 'yellow';
SELECT COUNT(pc.characteristic_id) AS characteristic_count FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id WHERE p.product_name = 'sesame';
SELECT COUNT(pc.characteristic_id) AS characteristic_count FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id WHERE p.product_name = 'sesame';
SELECT COUNT(DISTINCT c.characteristic_name) AS distinct_characteristic_count FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id WHERE p.product_name = 'cumin';
SELECT COUNT(DISTINCT c.characteristic_name) AS characteristic_count FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id WHERE p.product_name = 'cumin';
SELECT c.characteristic_name FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id WHERE p.product_name = 'sesame';
SELECT c.characteristic_name FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id WHERE p.product_name = 'sesame';
SELECT c.characteristic_name, c.characteristic_data_type FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id WHERE p.product_name = 'cumin';
SELECT c.characteristic_name, c.characteristic_data_type FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id WHERE p.product_name = 'cumin';
SELECT c.characteristic_name, pc.product_characteristic_value FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id WHERE p.product_name = 'sesame' AND c.characteristic_type_code = 'Grade';
SELECT c.characteristic_name FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id WHERE p.product_name = 'sesame' AND c.characteristic_type_code = 'Grade';
SELECT COUNT(pc.characteristic_id) AS characteristic_count FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id WHERE p.product_name = 'laurel';
SELECT COUNT(pc.characteristic_id) AS characteristic_count FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id WHERE p.product_name = 'laurel';
SELECT COUNT(pc.characteristic_id) AS number_of_characteristics FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id WHERE p.product_name = 'flax';
SELECT COUNT(pc.characteristic_id) AS characteristic_count FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id WHERE p.product_name = 'flax';
SELECT p.product_name FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics ch ON pc.characteristic_id = ch.characteristic_id WHERE c.color_description = 'red' AND ch.characteristic_name = 'fast';
SELECT p.product_name FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics ch ON pc.characteristic_id = ch.characteristic_id WHERE c.color_description = 'red' AND ch.characteristic_name = 'fast';
SELECT COUNT(DISTINCT p.product_id) AS product_count FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id WHERE c.characteristic_name = 'hot';
SELECT COUNT(DISTINCT p.product_id) AS product_count FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id WHERE c.characteristic_name = 'hot';
SELECT DISTINCT p.product_name FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id WHERE c.characteristic_name = 'warm';
SELECT DISTINCT p.product_name FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id WHERE c.characteristic_name = 'warm';
SELECT COUNT(DISTINCT p.product_id) AS product_count FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics ch ON pc.characteristic_id = ch.characteristic_id WHERE c.color_description = 'red' AND ch.characteristic_name = 'slow';
SELECT COUNT(DISTINCT p.product_id) AS product_count FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics ch ON pc.characteristic_id = ch.characteristic_id WHERE c.color_description = 'red' AND ch.characteristic_name = 'slow';
SELECT COUNT(DISTINCT p.product_id) AS product_count FROM Products p LEFT JOIN Ref_Colors c ON p.color_code = c.color_code LEFT JOIN Product_Characteristics pc ON p.product_id = pc.product_id LEFT JOIN Characteristics ch ON pc.characteristic_id = ch.characteristic_id WHERE c.color_description = 'white' OR ch.characteristic_name = 'hot';
SELECT COUNT(DISTINCT p.product_id)  FROM Products p LEFT JOIN Ref_Colors c ON p.color_code = c.color_code LEFT JOIN Product_Characteristics pc ON p.product_id = pc.product_id LEFT JOIN Characteristics ch ON pc.characteristic_id = ch.characteristic_id WHERE c.color_description = 'white' OR ch.characteristic_name = 'hot';
SELECT unit_of_measure  FROM Ref_Product_Categories  WHERE product_category_code = 'Herbs';
SELECT rpc.unit_of_measure FROM Products p JOIN Ref_Product_Categories rpc ON p.product_category_code = rpc.product_category_code WHERE p.product_name LIKE '%Herb%';
SELECT product_category_description  FROM Ref_Product_Categories  WHERE product_category_code = 'Spices';
SELECT product_category_description  FROM Ref_Product_Categories  WHERE product_category_code = 'Spices';
SELECT product_category_description, unit_of_measure  FROM Ref_Product_Categories  WHERE product_category_description = 'Herbs';
SELECT p.product_description, pc.unit_of_measure FROM Products p JOIN Ref_Product_Categories pc ON p.product_category_code = pc.product_category_code WHERE pc.product_category_description = 'Herbs';
SELECT p.unit_of_measure FROM Products p JOIN Ref_Product_Categories rpc ON p.product_category_code = rpc.product_category_code WHERE p.product_name = 'cumin';
SELECT rpc.unit_of_measure  FROM Products p  JOIN Ref_Product_Categories rpc ON p.product_category_code = rpc.product_category_code  WHERE p.product_name = 'cumin';
SELECT p.product_category_code, pc.unit_of_measure FROM Products p JOIN Ref_Product_Categories pc ON p.product_category_code = pc.product_category_code WHERE p.product_name = 'chervil';
SELECT p.product_category_code, pc.unit_of_measure FROM Products p JOIN Ref_Product_Categories pc ON p.product_category_code = pc.product_category_code WHERE p.product_name = 'chervil';
SELECT p.product_name FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code JOIN Ref_Product_Categories pc ON p.product_category_code = pc.product_category_code WHERE c.color_description = 'white' AND pc.unit_of_measure <> 'Handful';
SELECT p.product_name FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code JOIN Ref_Product_Categories pc ON p.product_category_code = pc.product_category_code WHERE c.color_description <> 'white'  AND pc.unit_of_measure <> 'Handful';
SELECT c.color_description FROM Ref_Colors c JOIN Products p ON c.color_code = p.color_code GROUP BY c.color_description ORDER BY COUNT(p.product_id) DESC LIMIT 1;
SELECT color_description FROM Ref_Colors WHERE color_code IN (     SELECT color_code     FROM Products     GROUP BY color_code     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT c.color_description FROM Ref_Colors c JOIN Products p ON c.color_code = p.color_code GROUP BY c.color_code, c.color_description ORDER BY COUNT(p.product_id) ASC LIMIT 1;
SELECT c.color_description FROM Ref_Colors c JOIN Products p ON c.color_code = p.color_code GROUP BY c.color_description ORDER BY COUNT(p.product_id) ASC LIMIT 1;
SELECT c.characteristic_name FROM Product_Characteristics pc JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id GROUP BY c.characteristic_name ORDER BY COUNT(pc.product_id) DESC LIMIT 1;
SELECT c.characteristic_name FROM Product_Characteristics pc JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id GROUP BY c.characteristic_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT c.characteristic_name, c.other_characteristic_details, c.characteristic_data_type FROM Characteristics c LEFT JOIN Product_Characteristics pc ON c.characteristic_id = pc.characteristic_id WHERE pc.product_id IS NULL;
SELECT c.characteristic_name, c.other_characteristic_details, c.characteristic_data_type FROM Characteristics c LEFT JOIN Product_Characteristics pc ON c.characteristic_id = pc.characteristic_id WHERE pc.product_id IS NULL;
SELECT c.characteristic_name FROM Product_Characteristics pc JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id GROUP BY c.characteristic_name HAVING COUNT(pc.product_id) >= 2;
SELECT c.characteristic_name FROM Characteristics c JOIN Product_Characteristics pc ON c.characteristic_id = pc.characteristic_id GROUP BY c.characteristic_name HAVING COUNT(DISTINCT pc.product_id) >= 2;
SELECT COUNT(*) AS unused_colors FROM Ref_Colors WHERE color_code NOT IN (SELECT DISTINCT color_code FROM Products);
SELECT COUNT(*) AS unused_color_count FROM Ref_Colors WHERE color_code NOT IN (SELECT DISTINCT color_code FROM Products);
SELECT COUNT(*) AS event_count FROM event;
SELECT Name, Year FROM event ORDER BY Year DESC;
SELECT Name FROM event WHERE Year = (SELECT MAX(Year) FROM event);
SELECT COUNT(*) FROM stadium;
SELECT name FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium);
SELECT name  FROM stadium  WHERE Capacity < (SELECT AVG(Capacity) FROM stadium);
SELECT Country, COUNT(*) AS Stadium_Count FROM stadium GROUP BY Country ORDER BY Stadium_Count DESC LIMIT 1;
SELECT Country FROM stadium GROUP BY Country HAVING COUNT(ID) <= 3;
SELECT Country FROM stadium GROUP BY Country HAVING SUM(CASE WHEN Capacity > 60000 THEN 1 ELSE 0 END) > 0    AND SUM(CASE WHEN Capacity < 50000 THEN 1 ELSE 0 END) > 0;
SELECT COUNT(DISTINCT City)  FROM stadium  WHERE Opening_year < 2006;
SELECT Country, COUNT(*) AS Stadium_Count FROM stadium GROUP BY Country;
SELECT DISTINCT Nationality FROM swimmer WHERE ID NOT IN (     SELECT DISTINCT Stadium_ID     FROM stadium     WHERE Opening_year > 2006 );
SELECT COUNT(*) FROM stadium WHERE Country <> 'Russia';
SELECT name FROM swimmer ORDER BY meter_100 ASC;
SELECT COUNT(DISTINCT Nationality) AS DifferentCountries FROM swimmer;
SELECT Nationality FROM swimmer GROUP BY Nationality HAVING COUNT(ID) > 1;
SELECT r.Result  FROM record r  JOIN swimmer s ON r.Swimmer_ID = s.ID  JOIN event e ON r.Event_ID = e.ID  WHERE s.Nationality = 'Australia' AND (e.Name = '200 meter' OR e.Name = '300 meter');
SELECT s.name  FROM swimmer s  JOIN record r ON s.ID = r.Swimmer_ID  WHERE r.Result = 'win';
SELECT s.name FROM stadium s JOIN event e ON s.ID = e.Stadium_ID GROUP BY s.name ORDER BY COUNT(e.ID) DESC LIMIT 1;
SELECT s.name, s.Capacity FROM stadium s JOIN event e ON s.ID = e.Stadium_ID WHERE e.Name = 'World Junior';
SELECT name  FROM stadium  WHERE ID NOT IN (SELECT Stadium_ID FROM event);
SELECT s.name FROM swimmer s JOIN record r ON s.ID = r.Swimmer_ID GROUP BY s.ID, s.name ORDER BY COUNT(r.ID) DESC LIMIT 1;
SELECT s.name FROM swimmer s JOIN record r ON s.ID = r.Swimmer_ID GROUP BY s.ID, s.name HAVING COUNT(r.ID) >= 2;
SELECT s.name, s.Nationality FROM swimmer s JOIN record r ON s.ID = r.Swimmer_ID WHERE r.Result = 'win' GROUP BY s.ID HAVING COUNT(r.ID) > 1;
SELECT name  FROM swimmer  WHERE ID NOT IN (SELECT Swimmer_ID FROM record);
SELECT DISTINCT s.name FROM swimmer s JOIN record r ON s.ID = r.Swimmer_ID GROUP BY s.ID HAVING COUNT(DISTINCT r.Result) = 2;
SELECT DISTINCT s.name FROM stadium s JOIN event e ON s.ID = e.Stadium_ID JOIN record r ON e.ID = r.Event_ID JOIN swimmer sw ON r.Swimmer_ID = sw.ID WHERE sw.Nationality = 'Australian';
SELECT s.name FROM stadium s JOIN event e ON s.ID = e.Stadium_ID JOIN record r ON e.ID = r.Event_ID JOIN swimmer sw ON r.Swimmer_ID = sw.ID GROUP BY s.name ORDER BY COUNT(DISTINCT sw.ID) DESC LIMIT 1;
SELECT * FROM swimmer;
SELECT AVG(Capacity) AS Average_Capacity FROM stadium WHERE Opening_year = 2005;
SELECT COUNT(*) FROM railway;
SELECT DISTINCT Builder FROM railway ORDER BY Builder ASC;
SELECT Wheels, Location FROM railway;
SELECT MAX(Level)  FROM manager  WHERE Country <> 'Australia';
SELECT AVG(Age) AS Average_Age FROM manager;
SELECT Name FROM manager ORDER BY Level ASC;
SELECT Name, Arrival FROM train;
SELECT Name FROM manager ORDER BY Age DESC LIMIT 1;
SELECT train.Name, railway.Location FROM train JOIN railway ON train.Railway_ID = railway.Railway_ID;
SELECT r.Builder  FROM railway r  JOIN train t ON r.Railway_ID = t.Railway_ID  WHERE t.Name = 'Andaman Exp';
SELECT r.Railway_ID, r.Location FROM railway r JOIN train t ON r.Railway_ID = t.Railway_ID GROUP BY r.Railway_ID, r.Location HAVING COUNT(t.Train_ID) > 1;
SELECT r.Railway_ID, r.Builder FROM railway r JOIN train t ON r.Railway_ID = t.Railway_ID GROUP BY r.Railway_ID, r.Builder ORDER BY COUNT(t.Train_ID) DESC LIMIT 1;
SELECT Builder, COUNT(*) AS NumberOfRailways FROM railway GROUP BY Builder;
SELECT Builder, COUNT(*) AS Builder_Count FROM railway GROUP BY Builder ORDER BY Builder_Count DESC LIMIT 1;
SELECT Location, COUNT(*) AS NumberOfRailways FROM railway GROUP BY Location;
SELECT Location FROM railway GROUP BY Location HAVING COUNT(Railway_ID) > 1;
SELECT ObjectNumber  FROM railway  WHERE Railway_ID NOT IN (SELECT DISTINCT Railway_ID FROM train);
SELECT DISTINCT m.Country FROM manager m WHERE m.Age > 50 AND m.Country IN (     SELECT m2.Country     FROM manager m2     WHERE m2.Age < 46 );
SELECT DISTINCT Country FROM manager;
SELECT m.Name, (YEAR(CURDATE()) - m.Working_year_starts) AS Working_Years FROM manager m ORDER BY m.Level DESC;
SELECT DISTINCT Country  FROM manager  WHERE Age > 50 OR Age < 46;
SELECT COUNT(*) AS address_count  FROM Addresses  WHERE country = 'USA';
SELECT DISTINCT city FROM Addresses;
SELECT state_province_county, COUNT(*) AS address_count FROM Addresses GROUP BY state_province_county;
SELECT customer_name, customer_phone  FROM Customers  WHERE customer_address IS NULL;
SELECT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2;
SELECT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.order_status_code IN ('completed', 'part') GROUP BY c.customer_id HAVING COUNT(DISTINCT co.order_status_code) = 2;
SELECT customer_name, customer_phone, payment_method_code  FROM Customers  ORDER BY customer_number DESC;
SELECT p.product_name, SUM(oi.order_quantity) AS total_order_quantity FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_name;
SELECT MIN(product_price) AS minimum_price,         MAX(product_price) AS maximum_price,         AVG(product_price) AS average_price  FROM Products;
SELECT COUNT(*)  FROM Products  WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT c.customer_name, a.city, cah.date_from, cah.date_to FROM Customer_Address_History cah JOIN Customers c ON cah.customer_id = c.customer_id JOIN Addresses a ON cah.address_id = a.address_id;
SELECT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE c.payment_method_code = 'Credit Card' GROUP BY c.customer_id, c.customer_name HAVING COUNT(co.order_id) > 2;
SELECT c.customer_name, c.customer_phone FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY c.customer_id ORDER BY SUM(oi.order_quantity) DESC LIMIT 1;
SELECT product_type_code, product_name  FROM Products  WHERE product_price > 1000 OR product_price < 500;
SELECT dorm_name  FROM Dorm  WHERE gender = 'F';
SELECT dorm_name  FROM Dorm  WHERE gender = 'Female';
SELECT dorm_name  FROM Dorm  WHERE student_capacity > 300;
SELECT dorm_name  FROM Dorm  WHERE student_capacity > 300;
SELECT COUNT(*)  FROM Student  WHERE Sex = 'F' AND Age < 25;
SELECT COUNT(*)  FROM Student  WHERE Sex = 'F' AND Age < 25;
SELECT Fname FROM Student WHERE Age > 20;
SELECT Fname FROM Student WHERE Age > 20;
SELECT Fname  FROM Student  WHERE city_code = 'PHL' AND Age BETWEEN 20 AND 25;
SELECT Fname  FROM Student  WHERE Age BETWEEN 20 AND 25 AND city_code = 'PHL';
SELECT COUNT(*) FROM Dorm;
SELECT COUNT(*) FROM Dorm;
SELECT COUNT(DISTINCT amenid) AS distinct_amenities FROM Dorm_amenity;
SELECT COUNT(DISTINCT amenid) AS different_amenities FROM Dorm_amenity;
SELECT SUM(student_capacity) AS total_capacity FROM Dorm;
SELECT SUM(student_capacity) AS total_capacity FROM Dorm;
SELECT COUNT(*) AS total_students FROM Student;
SELECT COUNT(*) FROM Student;
SELECT city_code, AVG(Age) AS average_age FROM Student JOIN Lives_in ON Student.StuID = Lives_in.stuid GROUP BY city_code;
SELECT city_code, AVG(Age) AS average_age FROM Student GROUP BY city_code;
SELECT AVG(d.student_capacity) AS average_capacity, SUM(d.student_capacity) AS total_capacity FROM Dorm d JOIN Lives_in l ON d.dormid = l.dormid JOIN Student s ON l.stuid = s.StuID WHERE s.Sex = 'X';
SELECT AVG(student_capacity) AS average_capacity, SUM(student_capacity) AS total_capacity FROM Dorm WHERE gender = 'X';
SELECT COUNT(DISTINCT d.dormid) AS num_dorms_with_amenities FROM Dorm d JOIN Has_amenity ha ON d.dormid = ha.dormid;
SELECT COUNT(DISTINCT d.dormid) AS dorms_with_amenities FROM Dorm d JOIN Has_amenity ha ON d.dormid = ha.dormid;
SELECT d.dorm_name FROM Dorm d LEFT JOIN Has_amenity ha ON d.dormid = ha.dormid WHERE ha.amenid IS NULL;
SELECT d.dorm_name FROM Dorm d LEFT JOIN Has_amenity ha ON d.dormid = ha.dormid WHERE ha.amenid IS NULL;
SELECT COUNT(DISTINCT gender) AS distinct_gender_count FROM Dorm;
SELECT COUNT(DISTINCT gender) AS different_genders FROM Dorm;
SELECT student_capacity, gender  FROM Dorm  WHERE dorm_name LIKE '%Donor%';
SELECT student_capacity, gender  FROM Dorm  WHERE dorm_name LIKE '%Donor%';
SELECT dorm_name, gender  FROM Dorm  WHERE student_capacity > 300 OR student_capacity < 100;
SELECT dorm_name, gender  FROM Dorm  WHERE student_capacity > 300 OR student_capacity < 100;
SELECT COUNT(DISTINCT Major) AS num_of_majors, COUNT(DISTINCT city_code) AS num_of_cities FROM Student;
SELECT COUNT(DISTINCT Major) AS different_majors, COUNT(DISTINCT city_code) AS different_city_codes FROM Student;
SELECT d.dorm_name FROM Dorm d JOIN Has_amenity ha ON d.dormid = ha.dormid JOIN Dorm_amenity da ON ha.amenid = da.amenid WHERE da.amenity_name IN ('TV Lounge', 'Study Room') GROUP BY d.dorm_name HAVING COUNT(DISTINCT da.amenity_name) = 2;
SELECT d.dorm_name FROM Dorm d JOIN Has_amenity ha ON d.dormid = ha.dormid JOIN Dorm_amenity da ON ha.amenid = da.amenid WHERE da.amenity_name IN ('TV Lounge', 'Study Room') GROUP BY d.dorm_name HAVING COUNT(DISTINCT da.amenity_name) = 2;
SELECT d.dorm_name FROM Dorm d JOIN Has_amenity ha ON d.dormid = ha.dormid JOIN Dorm_amenity da ON ha.amenid = da.amenid GROUP BY d.dormid, d.dorm_name HAVING SUM(CASE WHEN da.amenity_name = 'TV Lounge' THEN 1 ELSE 0 END) > 0    AND SUM(CASE WHEN da.amenity_name = 'Study Room' THEN 1 ELSE 0 END) = 0;
SELECT d.dorm_name FROM Dorm d JOIN Has_amenity ha ON d.dormid = ha.dormid JOIN Dorm_amenity da ON ha.amenid = da.amenid WHERE da.amenity_name = 'TV Lounge' AND d.dormid NOT IN (     SELECT ha.dormid     FROM Has_amenity ha     JOIN Dorm_amenity da ON ha.amenid = da.amenid     WHERE da.amenity_name = 'Study Room' );
SELECT LName  FROM Student  WHERE (Sex = 'F' AND city_code = 'BAL') OR (Sex = 'M' AND Age < 20);
SELECT LName  FROM Student  WHERE (Sex = 'Female') OR (city_code = 'BAL') OR (Sex = 'Male' AND Age < 20);
SELECT dorm_name  FROM Dorm  ORDER BY student_capacity DESC  LIMIT 1;
SELECT dorm_name  FROM Dorm  WHERE student_capacity = (SELECT MAX(student_capacity) FROM Dorm);
SELECT DISTINCT amenity_name FROM Dorm_amenity ORDER BY amenity_name;
SELECT DISTINCT amenity_name  FROM Dorm_amenity  ORDER BY amenity_name;
SELECT city_code FROM Student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT city_code FROM Student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Fname, LName  FROM Student  WHERE Age < (SELECT AVG(Age) FROM Student);
SELECT Fname, LName  FROM Student  WHERE Age < (SELECT AVG(Age) FROM Student);
SELECT Fname, LName  FROM Student  WHERE city_code <> 'HKG'  ORDER BY Age;
SELECT Fname, LName  FROM Student  WHERE city_code <> 'HKG'  ORDER BY Age;
SELECT a.amenity_name  FROM Dorm_amenity a  JOIN Has_amenity ha ON a.amenid = ha.amenid  JOIN Dorm d ON ha.dormid = d.dormid  WHERE d.dorm_name = 'Anonymous Donor Hall'  ORDER BY a.amenity_name;
SELECT a.amenity_name  FROM Dorm_amenity a JOIN Has_amenity ha ON a.amenid = ha.amenid JOIN Dorm d ON ha.dormid = d.dormid WHERE d.dorm_name = 'Anonymous Donor Hall' ORDER BY a.amenity_name;
SELECT gender, COUNT(dormid) AS number_of_dorms, SUM(student_capacity) AS total_capacity FROM Dorm GROUP BY gender;
SELECT gender, COUNT(dormid) AS total_dorms, SUM(student_capacity) AS total_capacity FROM Dorm GROUP BY gender;
SELECT Sex, AVG(Age) AS Average_Age, MAX(Age) AS Oldest_Age FROM Student GROUP BY Sex;
SELECT Sex, AVG(Age) AS Average_Age, MAX(Age) AS Oldest_Age FROM Student GROUP BY Sex;
SELECT Major, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Major;
SELECT Major, COUNT(*) AS StudentCount FROM Student GROUP BY Major;
SELECT city_code, COUNT(*) AS student_count, AVG(Age) AS average_age FROM Student GROUP BY city_code;
SELECT city_code, COUNT(StuID) AS student_count, AVG(Age) AS average_age FROM Student GROUP BY city_code;
SELECT city_code, AVG(Age) AS average_age, COUNT(*) AS male_student_count FROM Student WHERE Sex = 'M' GROUP BY city_code;
SELECT city_code, AVG(Age) AS average_age, COUNT(CASE WHEN Sex = 'M' THEN 1 END) AS male_count FROM Student GROUP BY city_code;
SELECT city_code, COUNT(*) AS student_count FROM Student GROUP BY city_code HAVING COUNT(*) > 1;
SELECT city_code, COUNT(StuID) AS student_count FROM Student GROUP BY city_code HAVING COUNT(StuID) > 1;
SELECT Fname, LName FROM Student WHERE Major <> (     SELECT Major     FROM Student     GROUP BY Major     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT Fname, LName  FROM Student  WHERE Major <> (SELECT Major                   FROM Student                   GROUP BY Major                   ORDER BY COUNT(*) DESC                   LIMIT 1);
SELECT Sex, COUNT(*) AS num_students FROM Student WHERE Age > (SELECT AVG(Age) FROM Student AS sub WHERE sub.Sex = Student.Sex) GROUP BY Sex;
SELECT Sex, COUNT(*) AS num_students FROM Student WHERE Age > (SELECT AVG(Age) FROM Student) GROUP BY Sex;
SELECT d.dorm_name, AVG(s.Age) AS average_age FROM Student s JOIN Lives_in l ON s.StuID = l.stuid JOIN Dorm d ON l.dormid = d.dormid GROUP BY d.dorm_name;
SELECT d.dorm_name, AVG(s.Age) AS average_age FROM Dorm d JOIN Lives_in l ON d.dormid = l.dormid JOIN Student s ON l.stuid = s.StuID GROUP BY d.dorm_name;
SELECT d.dorm_name, COUNT(ha.amenid) AS num_amenities FROM Dorm d LEFT JOIN Has_amenity ha ON d.dormid = ha.dormid WHERE d.student_capacity > 100 GROUP BY d.dorm_name;
SELECT d.dormid, d.dorm_name, COUNT(ha.amenid) AS amenity_count FROM Dorm d LEFT JOIN Has_amenity ha ON d.dormid = ha.dormid GROUP BY d.dormid, d.dorm_name;
SELECT d.dorm_name, COUNT(s.StuID) AS num_students FROM Student s JOIN Lives_in l ON s.StuID = l.stuid JOIN Dorm d ON l.dormid = d.dormid WHERE s.Age > 20 GROUP BY d.dorm_name;
SELECT d.dorm_name, COUNT(s.StuID) AS num_students FROM Student s JOIN Lives_in l ON s.StuID = l.stuid JOIN Dorm d ON l.dormid = d.dormid WHERE s.Age > 20 GROUP BY d.dorm_name;
SELECT Fname  FROM Student  JOIN Lives_in ON Student.StuID = Lives_in.stuid  JOIN Dorm ON Lives_in.dormid = Dorm.dormid  WHERE Dorm.dorm_name = 'Smith Hall';
SELECT Fname  FROM Student  JOIN Lives_in ON Student.StuID = Lives_in.stuid  JOIN Dorm ON Lives_in.dormid = Dorm.dormid  WHERE Dorm.dorm_name = 'Smith Hall';
SELECT AVG(S.Age) AS Average_Age FROM Student S JOIN Lives_in L ON S.StuID = L.stuid WHERE L.dormid = (     SELECT D.dormid     FROM Dorm D     ORDER BY D.student_capacity DESC     LIMIT 1 );
SELECT AVG(s.Age) AS average_age FROM Student s JOIN Lives_in l ON s.StuID = l.stuid WHERE l.dormid = (     SELECT d.dormid     FROM Dorm d     ORDER BY d.student_capacity DESC     LIMIT 1 );
SELECT COUNT(*) AS total_students FROM Lives_in li JOIN Dorm d ON li.dormid = d.dormid WHERE d.gender = 'M';
SELECT COUNT(*) AS total_students FROM Lives_in li JOIN Dorm d ON li.dormid = d.dormid WHERE d.gender = 'Male';
SELECT COUNT(*)  FROM Student s  JOIN Lives_in l ON s.StuID = l.stuid  JOIN Dorm d ON l.dormid = d.dormid  WHERE s.Sex = 'F' AND d.dorm_name = 'Smith Hall';
SELECT COUNT(*)  FROM Student s  JOIN Lives_in l ON s.StuID = l.stuid  JOIN Dorm d ON l.dormid = d.dormid  WHERE d.dorm_name = 'Smith Hall' AND s.Sex = 'F';
SELECT a.amenity_name  FROM Dorm d  JOIN Has_amenity ha ON d.dormid = ha.dormid  JOIN Dorm_amenity a ON ha.amenid = a.amenid  WHERE d.dorm_name = 'Smith Hall';
SELECT a.amenity_name  FROM Dorm d  JOIN Has_amenity ha ON d.dormid = ha.dormid  JOIN Dorm_amenity a ON ha.amenid = a.amenid  WHERE d.dorm_name = 'Smith Hall';
SELECT a.amenity_name FROM Dorm d JOIN Has_amenity ha ON d.dormid = ha.dormid JOIN Dorm_amenity a ON ha.amenid = a.amenid WHERE d.dorm_name = 'Smith Hall' ORDER BY a.amenity_name;
SELECT a.amenity_name  FROM Dorm d  JOIN Has_amenity ha ON d.dormid = ha.dormid  JOIN Dorm_amenity a ON ha.amenid = a.amenid  WHERE d.dorm_name = 'Smith Hall'  ORDER BY a.amenity_name;
SELECT a.amenity_name FROM Dorm_amenity a JOIN Has_amenity ha ON a.amenid = ha.amenid GROUP BY a.amenity_name ORDER BY COUNT(ha.dormid) DESC LIMIT 1;
SELECT a.amenity_name, COUNT(*) AS amenity_count FROM Has_amenity ha JOIN Dorm_amenity a ON ha.amenid = a.amenid GROUP BY a.amenity_name ORDER BY amenity_count DESC LIMIT 1;
SELECT S.Fname FROM Student S JOIN Lives_in L ON S.StuID = L.stuid WHERE L.dormid = (     SELECT H.dormid     FROM Has_amenity H     GROUP BY H.dormid     ORDER BY COUNT(H.amenid) DESC     LIMIT 1 );
SELECT S.Fname FROM Student S JOIN Lives_in L ON S.StuID = L.stuid WHERE L.dormid = (     SELECT H.dormid     FROM Has_amenity H     GROUP BY H.dormid     ORDER BY COUNT(H.amenid) DESC     LIMIT 1 );
SELECT d.dorm_name, d.student_capacity FROM Dorm d JOIN Has_amenity ha ON d.dormid = ha.dormid GROUP BY d.dormid, d.dorm_name, d.student_capacity ORDER BY COUNT(ha.amenid) ASC LIMIT 1;
SELECT d.dorm_name, d.student_capacity FROM Dorm d JOIN Has_amenity ha ON d.dormid = ha.dormid GROUP BY d.dormid, d.dorm_name, d.student_capacity ORDER BY COUNT(ha.amenid) ASC LIMIT 1;
SELECT d.dorm_name FROM Dorm d WHERE d.dormid NOT IN (     SELECT ha.dormid     FROM Has_amenity ha     JOIN Dorm_amenity da ON ha.amenid = da.amenid     WHERE da.amenity_name = 'TV Lounge' );
SELECT d.dorm_name FROM Dorm d LEFT JOIN Has_amenity ha ON d.dormid = ha.dormid LEFT JOIN Dorm_amenity da ON ha.amenid = da.amenid WHERE da.amenity_name IS NULL OR da.amenity_name <> 'TV Lounge' GROUP BY d.dorm_name HAVING COUNT(CASE WHEN da.amenity_name = 'TV Lounge' THEN 1 END) = 0;
SELECT S.Fname, S.LName FROM Student S JOIN Lives_in L ON S.StuID = L.stuid JOIN Dorm D ON L.dormid = D.dormid JOIN Has_amenity HA ON D.dormid = HA.dormid JOIN Dorm_amenity DA ON HA.amenid = DA.amenid WHERE DA.amenity_name = 'TV Lounge';
SELECT S.Fname, S.LName FROM Student S JOIN Lives_in L ON S.StuID = L.stuid JOIN Dorm D ON L.dormid = D.dormid JOIN Has_amenity HA ON D.dormid = HA.dormid JOIN Dorm_amenity DA ON HA.amenid = DA.amenid WHERE DA.amenity_name = 'TV Lounge';
SELECT S.Fname, S.Age FROM Student S JOIN Lives_in L ON S.StuID = L.stuid JOIN Dorm D ON L.dormid = D.dormid WHERE D.dormid NOT IN (     SELECT H.dormid     FROM Has_amenity H     JOIN Dorm_amenity A ON H.amenid = A.amenid     WHERE A.amenity_name = 'TV Lounge' );
SELECT S.Fname, S.Age FROM Student S JOIN Lives_in L ON S.StuID = L.stuid JOIN Dorm D ON L.dormid = D.dormid JOIN Has_amenity HA ON D.dormid = HA.dormid JOIN Dorm_amenity DA ON HA.amenid = DA.amenid WHERE DA.amenity_name = 'TV Lounge';
SELECT da.amenity_name FROM Student s JOIN Lives_in li ON s.StuID = li.stuid JOIN Dorm d ON li.dormid = d.dormid JOIN Has_amenity ha ON d.dormid = ha.dormid JOIN Dorm_amenity da ON ha.amenid = da.amenid WHERE s.LName = 'Smith';
SELECT da.amenity_name FROM Student s JOIN Lives_in li ON s.StuID = li.stuid JOIN Dorm d ON li.dormid = d.dormid JOIN Has_amenity ha ON d.dormid = ha.dormid JOIN Dorm_amenity da ON ha.amenid = da.amenid WHERE s.LName = 'Smith';
SELECT COUNT(*) AS total_customers FROM Customers;
SELECT COUNT(*) AS number_of_customers FROM Customers;
SELECT email_address, phone_number  FROM Customers  ORDER BY email_address, phone_number;
SELECT email_address, phone_number  FROM Customers  ORDER BY email_address, phone_number;
SELECT town_city FROM Customers WHERE customer_type_code = 'Good Credit Rating' GROUP BY town_city ORDER BY COUNT(customer_id) ASC LIMIT 1;
SELECT town_city FROM Customers WHERE customer_type_code = 'Good Credit Rating' GROUP BY town_city ORDER BY COUNT(customer_id) ASC LIMIT 1;
SELECT p.product_name, COUNT(c.complaint_id) AS number_of_complaints FROM Products p LEFT JOIN Complaints c ON p.product_id = c.product_id GROUP BY p.product_name;
SELECT p.product_name, COUNT(c.complaint_id) AS complaint_count FROM Products p LEFT JOIN Complaints c ON p.product_id = c.product_id GROUP BY p.product_name;
SELECT DISTINCT c.email_address FROM Customers c JOIN Complaints co ON c.customer_id = co.customer_id WHERE co.product_id = (     SELECT product_id     FROM Complaints     GROUP BY product_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT DISTINCT c.email_address FROM Customers c JOIN Complaints co ON c.customer_id = co.customer_id WHERE co.product_id = (     SELECT product_id     FROM Complaints     GROUP BY product_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT p.product_id, p.product_name FROM Products p JOIN Complaints c ON p.product_id = c.product_id WHERE c.customer_id = (     SELECT customer_id     FROM Complaints     GROUP BY customer_id     ORDER BY COUNT(complaint_id) ASC     LIMIT 1 );
SELECT p.product_name FROM Products p JOIN Complaints c ON p.product_id = c.product_id WHERE c.customer_id = (     SELECT customer_id     FROM Complaints     GROUP BY customer_id     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT c.phone_number FROM Customers c JOIN Complaints co ON c.customer_id = co.customer_id ORDER BY co.date_complaint_raised DESC LIMIT 1;
SELECT c.phone_number FROM Customers c JOIN Complaints co ON c.customer_id = co.customer_id ORDER BY co.date_complaint_raised DESC LIMIT 1;
SELECT c.email_address, c.phone_number FROM Customers c LEFT JOIN Complaints co ON c.customer_id = co.customer_id WHERE co.complaint_id IS NULL;
SELECT email_address, phone_number  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Complaints);
SELECT phone_number FROM Customers UNION SELECT phone_number FROM Staff;
SELECT phone_number FROM Customers UNION SELECT phone_number FROM Staff;
SELECT product_description  FROM Products  WHERE product_name = 'Chocolate';
SELECT product_description  FROM Products  WHERE product_name = 'Chocolate';
SELECT product_name, product_category_code  FROM Products  ORDER BY product_price DESC  LIMIT 1;
SELECT product_name, product_category_code  FROM Products  WHERE product_price = (SELECT MAX(product_price) FROM Products);
SELECT p.product_price FROM Products p LEFT JOIN Complaints c ON p.product_id = c.product_id WHERE c.complaint_id IS NULL;
SELECT p.product_id, p.product_name, p.product_price FROM Products p LEFT JOIN Complaints c ON p.product_id = c.product_id WHERE c.complaint_id IS NULL;
SELECT product_category_code, AVG(product_price) AS average_price FROM Products GROUP BY product_category_code;
SELECT product_category_code, AVG(product_price) AS average_price FROM Products GROUP BY product_category_code;
SELECT s.last_name FROM Staff s JOIN Complaints c ON s.staff_id = c.staff_id JOIN Products p ON c.product_id = p.product_id WHERE p.product_price = (SELECT MIN(product_price) FROM Products);
SELECT s.last_name FROM Staff s JOIN Complaints c ON s.staff_id = c.staff_id WHERE c.product_id = (     SELECT p.product_id     FROM Products p     ORDER BY p.product_price ASC     LIMIT 1 );
SELECT complaint_status_code, COUNT(*) AS complaint_count FROM Complaints GROUP BY complaint_status_code HAVING COUNT(*) > 3;
SELECT complaint_status_code FROM Complaints GROUP BY complaint_status_code HAVING COUNT(complaint_id) > 3;
SELECT last_name FROM Staff WHERE email_address LIKE '%wrau%';
SELECT last_name  FROM Staff  WHERE email_address LIKE '%wrau%';
SELECT customer_type_code, COUNT(*) AS customer_count FROM Customers GROUP BY customer_type_code ORDER BY customer_count DESC LIMIT 1;
SELECT customer_type_code, COUNT(*) AS customer_count FROM Customers GROUP BY customer_type_code ORDER BY customer_count DESC LIMIT 1;
SELECT last_name  FROM Staff  WHERE staff_id = (     SELECT staff_id      FROM Complaints      ORDER BY date_complaint_raised      LIMIT 1 );
SELECT last_name  FROM Staff  WHERE staff_id = (     SELECT staff_id      FROM Complaints      ORDER BY date_complaint_raised      LIMIT 1 );
SELECT COUNT(DISTINCT complaint_type_code) AS distinct_complaint_type_count FROM Complaints;
SELECT COUNT(DISTINCT complaint_type_code) AS different_complaint_type_codes FROM Complaints;
SELECT address_line_1, address_line_2  FROM Customers  WHERE email_address = 'vbogisich@example.org';
SELECT address_line_1, address_line_2  FROM Customers  WHERE email_address = 'vbogisich@example.org';
SELECT complaint_status_code, COUNT(*) AS number_of_complaints FROM Complaints WHERE complaint_type_code = 'Product Failure' GROUP BY complaint_status_code;
SELECT complaint_status_code, COUNT(*) AS complaint_count FROM Complaints WHERE complaint_type_code = 'Product Failure' GROUP BY complaint_status_code;
SELECT first_name FROM Staff WHERE staff_id IN (     SELECT staff_id     FROM Complaints     GROUP BY staff_id     ORDER BY COUNT(complaint_id) DESC     LIMIT 5 );
SELECT first_name FROM Staff WHERE staff_id IN (     SELECT staff_id     FROM Complaints     GROUP BY staff_id     ORDER BY COUNT(complaint_id) DESC     LIMIT 5 );
SELECT state, COUNT(customer_id) AS customer_count FROM Customers GROUP BY state ORDER BY customer_count DESC LIMIT 1;
SELECT state, COUNT(customer_id) AS customer_count FROM Customers GROUP BY state ORDER BY customer_count DESC LIMIT 1;
SELECT COUNT(*) AS Total_Submissions FROM submission;
SELECT COUNT(*) AS NumberOfSubmissions FROM submission;
SELECT Author  FROM submission  ORDER BY Scores ASC;
SELECT Author  FROM submission  ORDER BY Scores ASC;
SELECT Author, College FROM submission;
SELECT Author, College FROM submission;
SELECT Author  FROM submission  WHERE College IN ('Florida', 'Temple');
SELECT Author  FROM submission  WHERE College IN ('Florida', 'Temple');
SELECT AVG(Scores) AS Average_Score FROM submission;
SELECT AVG(Scores) AS Average_Score FROM submission;
SELECT Author  FROM submission  WHERE Scores = (SELECT MAX(Scores) FROM submission);
SELECT Author  FROM submission  WHERE Scores = (SELECT MAX(Scores) FROM submission);
SELECT College, COUNT(Author) AS NumberOfAuthors FROM submission GROUP BY College;
SELECT College, COUNT(DISTINCT Author) AS Author_Count FROM submission GROUP BY College;
SELECT College, COUNT(*) AS Count FROM submission GROUP BY College ORDER BY Count DESC LIMIT 1;
SELECT College, COUNT(DISTINCT Author) AS Author_Count FROM submission GROUP BY College ORDER BY Author_Count DESC LIMIT 1;
SELECT College FROM submission WHERE Scores > 90 OR Scores < 80 GROUP BY College HAVING COUNT(CASE WHEN Scores > 90 THEN 1 END) > 0     AND COUNT(CASE WHEN Scores < 80 THEN 1 END) > 0;
SELECT DISTINCT s1.College FROM submission s1 JOIN submission s2 ON s1.College = s2.College WHERE s1.Scores > 90 AND s2.Scores < 80;
SELECT s.Author, a.Result FROM submission s JOIN Acceptance a ON s.Submission_ID = a.Submission_ID;
SELECT s.Author, a.Result FROM submission s JOIN Acceptance a ON s.Submission_ID = a.Submission_ID;
SELECT a.Result  FROM submission s  JOIN Acceptance a ON s.Submission_ID = a.Submission_ID  WHERE s.Scores = (SELECT MAX(Scores) FROM submission);
SELECT s.Submission_ID, s.Scores FROM submission s JOIN Acceptance a ON s.Submission_ID = a.Submission_ID WHERE a.Result = 'Accepted' ORDER BY s.Scores DESC LIMIT 1;
SELECT s.Author, COUNT(DISTINCT a.Workshop_ID) AS Number_of_Workshops FROM submission s JOIN Acceptance a ON s.Submission_ID = a.Submission_ID GROUP BY s.Author;
SELECT s.Author, COUNT(DISTINCT a.Workshop_ID) AS Number_of_Workshops FROM submission s JOIN Acceptance a ON s.Submission_ID = a.Submission_ID GROUP BY s.Author;
SELECT s.Author FROM submission s JOIN Acceptance a ON s.Submission_ID = a.Submission_ID GROUP BY s.Author HAVING COUNT(DISTINCT a.Workshop_ID) > 1;
SELECT Author FROM submission s JOIN Acceptance a ON s.Submission_ID = a.Submission_ID GROUP BY Author HAVING COUNT(DISTINCT a.Workshop_ID) > 1;
SELECT Date, Venue FROM workshop ORDER BY Venue ASC;
SELECT Date, Venue  FROM workshop  ORDER BY Venue;
SELECT DISTINCT Author  FROM submission  WHERE Author NOT IN (SELECT Author FROM submission INNER JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID);
SELECT DISTINCT Author  FROM submission  WHERE Author NOT IN (SELECT DISTINCT Author FROM submission s JOIN Acceptance a ON s.Submission_ID = a.Submission_ID);
SELECT COUNT(*) AS total_investors FROM Investors;
SELECT * FROM Investors;
SELECT DISTINCT lot_details FROM Lots;
SELECT MAX(amount_of_transaction) AS max_transaction_amount FROM Transactions;
SELECT date_of_transaction, share_count FROM Transactions;
SELECT SUM(share_count) AS total_share_of_transactions FROM Transactions;
SELECT transaction_id  FROM Transactions  WHERE transaction_type_code = 'PUR';
SELECT date_of_transaction  FROM Transactions  WHERE transaction_type_code = 'SALE';
SELECT AVG(amount_of_transaction) AS average_sale_amount FROM Transactions WHERE transaction_type_code = 'SALE';
SELECT transaction_type_description  FROM Ref_Transaction_Types  WHERE transaction_type_code = 'PUR';
SELECT MIN(amount_of_transaction) AS minimum_amount FROM Transactions WHERE transaction_type_code = 'PUR' AND share_count > 50;
SELECT MAX(share_count)  FROM Transactions  WHERE amount_of_transaction < 10000;
SELECT date_of_transaction  FROM Transactions  WHERE share_count > 100 OR amount_of_transaction > 1000;
SELECT rt.transaction_type_description, t.date_of_transaction FROM Transactions t JOIN Ref_Transaction_Types rt ON t.transaction_type_code = rt.transaction_type_code WHERE t.share_count < 10;
SELECT DISTINCT i.* FROM Investors i JOIN Transactions t ON i.investor_id = t.investor_id WHERE t.share_count > 100;
SELECT COUNT(DISTINCT transaction_type_code) AS distinct_transaction_types FROM Transactions;
SELECT l.lot_details, l.investor_id FROM Lots l;
SELECT l.lot_details FROM Lots l JOIN Investors i ON l.investor_id = i.investor_id WHERE i.Investor_details = 'l';
SELECT p.purchase_details FROM Transactions t JOIN Transactions_Lots tl ON t.transaction_id = tl.transaction_id JOIN Purchases p ON t.transaction_id = p.purchase_transaction_id WHERE t.amount_of_transaction > 10000;
SELECT S.sales_details, T.date_of_transaction FROM Transactions T JOIN Sales S ON T.transaction_id = S.sales_transaction_id WHERE T.amount_of_transaction < 3000;
SELECT l.lot_details FROM Lots l JOIN Transactions_Lots tl ON l.lot_id = tl.lot_id JOIN Transactions t ON tl.transaction_id = t.transaction_id WHERE t.share_count < 50;
SELECT l.lot_details FROM Lots l JOIN Transactions_Lots tl ON l.lot_id = tl.lot_id JOIN Transactions t ON tl.transaction_id = t.transaction_id WHERE t.share_count > 100 AND t.transaction_type_code = 'PUR';
SELECT rt.transaction_type_description, AVG(t.amount_of_transaction) AS average_transaction_amount FROM Transactions t JOIN Ref_Transaction_Types rt ON t.transaction_type_code = rt.transaction_type_code GROUP BY rt.transaction_type_description;
SELECT      rtt.transaction_type_description,     MAX(t.share_count) AS max_share_count,     MIN(t.share_count) AS min_share_count FROM      Transactions t JOIN      Ref_Transaction_Types rtt ON t.transaction_type_code = rtt.transaction_type_code GROUP BY      rtt.transaction_type_description;
SELECT i.investor_id, AVG(t.share_count) AS average_share_count FROM Investors i JOIN Transactions t ON i.investor_id = t.investor_id GROUP BY i.investor_id;
SELECT investor_id, AVG(share_count) AS average_share_count FROM Transactions GROUP BY investor_id ORDER BY average_share_count;
SELECT investor_id, AVG(amount_of_transaction) AS average_transaction_amount FROM Transactions GROUP BY investor_id;
SELECT l.lot_id, AVG(t.amount_of_transaction) AS average_transaction_amount FROM Lots l JOIN Transactions_Lots tl ON l.lot_id = tl.lot_id JOIN Transactions t ON tl.transaction_id = t.transaction_id GROUP BY l.lot_id;
SELECT l.lot_id, AVG(t.amount_of_transaction) AS average_amount FROM Lots l JOIN Transactions_Lots tl ON l.lot_id = tl.lot_id JOIN Transactions t ON tl.transaction_id = t.transaction_id GROUP BY l.lot_id ORDER BY average_amount;
SELECT i.investor_id, COUNT(t.transaction_id) AS transaction_count FROM Investors i JOIN Transactions t ON i.investor_id = t.investor_id WHERE t.transaction_type_code = 'SALE' GROUP BY i.investor_id HAVING COUNT(t.transaction_id) > 0;
SELECT investor_id, COUNT(transaction_id) AS transaction_count FROM Transactions GROUP BY investor_id;
SELECT transaction_type_code FROM Transactions GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT transaction_type_code FROM Transactions GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT rtt.transaction_type_description FROM Transactions t JOIN Ref_Transaction_Types rtt ON t.transaction_type_code = rtt.transaction_type_code GROUP BY rtt.transaction_type_description ORDER BY COUNT(t.transaction_id) DESC LIMIT 1;
SELECT i.investor_id, i.Investor_details FROM Investors i JOIN Transactions t ON i.investor_id = t.investor_id GROUP BY i.investor_id, i.Investor_details ORDER BY COUNT(t.transaction_id) DESC LIMIT 1;
SELECT investor_id, Investor_details FROM Investors WHERE investor_id IN (     SELECT investor_id     FROM Transactions     GROUP BY investor_id     ORDER BY COUNT(transaction_id) DESC     LIMIT 3 );
SELECT investor_id FROM Transactions GROUP BY investor_id HAVING COUNT(transaction_id) >= 2;
SELECT i.investor_id, i.Investor_details FROM Investors i JOIN Transactions t ON i.investor_id = t.investor_id WHERE t.transaction_type_code = 'SALE' GROUP BY i.investor_id, i.Investor_details HAVING COUNT(t.transaction_id) >= 2;
SELECT date_of_transaction  FROM Transactions  WHERE share_count >= 100 OR amount_of_transaction > 100;
SELECT S.sales_transaction_id, S.sales_details, P.purchase_transaction_id, P.purchase_details FROM Sales S FULL OUTER JOIN Purchases P ON S.sales_transaction_id = P.purchase_transaction_id;
SELECT * FROM Lots WHERE lot_id NOT IN (SELECT lot_id FROM Transactions_Lots);
SELECT COUNT(*) AS Total_Available_Hotels FROM Hotels WHERE pets_allowed_yn = 'Y';  -- Assuming 'Y' indicates available hotels
SELECT COUNT(*) AS Total_Hotels FROM Hotels;
SELECT DISTINCT price_range FROM Hotels;
SELECT price_range FROM Hotels;
SELECT DISTINCT Location_Name FROM Locations;
SELECT DISTINCT Location_Name FROM Locations;
SELECT Name, Other_Details FROM Staff;
SELECT Name, Other_Details FROM Staff;
SELECT * FROM Visitors;
SELECT * FROM Visitors;
SELECT price_range  FROM Hotels  WHERE star_rating_code = '5';
SELECT price_range  FROM Hotels  WHERE star_rating_code = '5';
SELECT AVG(price_range) AS average_price_range FROM Hotels WHERE star_rating_code = '5' AND pets_allowed_yn = 'Y';
SELECT AVG(price_range) AS average_price_range FROM Hotels WHERE star_rating_code = '5' AND pets_allowed_yn = 'Y';
SELECT Address  FROM Locations  WHERE Location_Name = 'UK Gallery';
SELECT Address  FROM Locations  WHERE Location_Name = 'UK Gallery';
SELECT * FROM Locations WHERE Location_Name = 'UK Gallery';
SELECT * FROM Locations WHERE Location_Name = 'UK Gallery';
SELECT Location_Name  FROM Locations  WHERE Location_Name LIKE '%film%';
SELECT * FROM Locations WHERE Location_Name LIKE '%film%';
SELECT COUNT(DISTINCT Name) AS Distinct_Photo_Names FROM Photos;
SELECT COUNT(DISTINCT Name) AS Distinct_Photo_Names FROM Photos;
SELECT DISTINCT Visit_Date FROM Visits;
SELECT DISTINCT Visit_Date FROM Visits;
SELECT Name  FROM Tourist_Attractions  WHERE How_to_Get_There LIKE '%bus%';
SELECT Name  FROM Tourist_Attractions  WHERE How_to_Get_There LIKE '%bus%';
SELECT Name, Opening_Hours FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%bus%' OR How_to_Get_There LIKE '%walk%';
SELECT Name, Opening_Hours FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%bus%' OR How_to_Get_There LIKE '%walk%';
SELECT Ref_Hotel_Star_Ratings.star_rating_description FROM Hotels JOIN Ref_Hotel_Star_Ratings ON Hotels.star_rating_code = Ref_Hotel_Star_Ratings.star_rating_code WHERE Hotels.price_range > 10000;
SELECT r.star_rating_description FROM Hotels h JOIN Ref_Hotel_Star_Ratings r ON h.star_rating_code = r.star_rating_code WHERE h.price_range > 10000;
SELECT Museum_Details, Opening_Hours  FROM Museums;
SELECT Museum_Details, Opening_Hours  FROM Museums  JOIN Tourist_Attractions ON Museums.Museum_ID = Tourist_Attractions.Tourist_Attraction_ID;
SELECT ta.Name  FROM Photos p  JOIN Tourist_Attractions ta ON p.Tourist_Attraction_ID = ta.Tourist_Attraction_ID  WHERE p.Filename = 'game1';
SELECT ta.Name FROM Photos p JOIN Tourist_Attractions ta ON p.Tourist_Attraction_ID = ta.Tourist_Attraction_ID WHERE p.Filename = 'game1';
SELECT p.Name, p.Description FROM Photos p JOIN Tourist_Attractions ta ON p.Tourist_Attraction_ID = ta.Tourist_Attraction_ID WHERE ta.Name = 'film festival';
SELECT p.Name, p.Description FROM Photos p JOIN Tourist_Attractions ta ON p.Tourist_Attraction_ID = ta.Tourist_Attraction_ID WHERE ta.Name = 'film festival';
SELECT ta.Name, ta.Description, ta.How_to_Get_There, ta.Other_Details FROM Tourist_Attractions ta JOIN Royal_Family rf ON ta.Tourist_Attraction_ID = rf.Royal_Family_ID;
SELECT ta.Name, ta.Description, ta.How_to_Get_There, ta.Opening_Hours, ta.Other_Details FROM Tourist_Attractions ta JOIN Royal_Family rf ON ta.Tourist_Attraction_ID = rf.Royal_Family_ID;
SELECT * FROM Shops WHERE Shop_Details LIKE '%walk%';
SELECT * FROM Shops WHERE Shop_ID IN (     SELECT Shop_ID FROM Street_Markets WHERE Market_Details LIKE '%walk%' );
SELECT s.Name FROM Staff s JOIN Tourist_Attractions ta ON s.Tourist_Attraction_ID = ta.Tourist_Attraction_ID WHERE ta.Name = 'US museum';
SELECT s.Name  FROM Staff s  JOIN Tourist_Attractions ta ON s.Tourist_Attraction_ID = ta.Tourist_Attraction_ID  WHERE ta.Name = 'US museum';
SELECT Market_ID, Market_Details FROM Street_Markets WHERE Market_ID IN (     SELECT Tourist_Attraction_ID     FROM Tourist_Attractions     WHERE How_to_Get_There IN ('walk', 'bus') );
SELECT *  FROM Street_Markets  WHERE Market_Details LIKE '%walk%' OR Market_Details LIKE '%bus%';
SELECT Visits.Visit_Date, Visits.Visit_Details FROM Visits JOIN Visitors ON Visits.Tourist_ID = Visitors.Tourist_ID WHERE Visitors.Tourist_Details = 'Vincent';
SELECT v.Visit_Date, v.Visit_Details FROM Visits v JOIN Visitors t ON v.Tourist_ID = t.Tourist_ID WHERE t.Tourist_Details = 'Vincent';
SELECT ta.Name FROM Visitors v JOIN Visits vi ON v.Tourist_ID = vi.Tourist_ID JOIN Tourist_Attractions ta ON vi.Tourist_Attraction_ID = ta.Tourist_Attraction_ID WHERE v.Tourist_Details = 'Vincent';
SELECT ta.Name, ta.Description FROM Visitors v JOIN Visits vi ON v.Tourist_ID = vi.Tourist_ID JOIN Tourist_Attractions ta ON vi.Tourist_Attraction_ID = ta.Tourist_Attraction_ID WHERE v.Tourist_Details = 'Vincent';
SELECT ta.Name, v.Visit_Date FROM Tourist_Attractions ta JOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID JOIN Visitors vi ON v.Tourist_ID = vi.Tourist_ID WHERE vi.Tourist_Details IN ('Vincent', 'Vivian');
SELECT ta.Name, v.Visit_Date FROM Tourist_Attractions ta JOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID JOIN Visitors vi ON v.Tourist_ID = vi.Tourist_ID WHERE vi.Tourist_Details IN ('Vincent', 'Vivian');
SELECT star_rating_code, AVG(price_range) AS average_price FROM Hotels GROUP BY star_rating_code;
SELECT star_rating_code, AVG(price_range) AS average_price_range FROM Hotels GROUP BY star_rating_code;
SELECT pets_allowed_yn, AVG(price_range) AS average_price FROM Hotels GROUP BY pets_allowed_yn;
SELECT pets_allowed_yn, AVG(price_range) AS average_price FROM Hotels GROUP BY pets_allowed_yn;
SELECT hotel_id, star_rating_code  FROM Hotels  ORDER BY price_range ASC;
SELECT hotel_id, star_rating_code  FROM Hotels  ORDER BY price_range ASC;
SELECT * FROM Hotels ORDER BY price_range DESC LIMIT 3;
SELECT * FROM Hotels ORDER BY price_range DESC LIMIT 3;
SELECT h.hotel_id, h.price_range, r.star_rating_description FROM Hotels h JOIN Ref_Hotel_Star_Ratings r ON h.star_rating_code = r.star_rating_code ORDER BY h.price_range ASC LIMIT 3;
SELECT h.hotel_id, h.star_rating_code, h.price_range, h.other_hotel_details FROM Hotels h ORDER BY h.price_range ASC LIMIT 3;
SELECT How_to_Get_There, COUNT(*) AS Number_of_Visitors FROM Tourist_Attractions JOIN Visits ON Tourist_Attractions.Tourist_Attraction_ID = Visits.Tourist_Attraction_ID GROUP BY How_to_Get_There ORDER BY Number_of_Visitors DESC LIMIT 1;
SELECT How_to_Get_There, COUNT(*) AS Usage_Count FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY Usage_Count DESC LIMIT 1;
SELECT rat.Attraction_Type_Code, rat.Attraction_Type_Description FROM Ref_Attraction_Types rat JOIN Tourist_Attractions ta ON rat.Attraction_Type_Code = ta.Attraction_Type_Code GROUP BY rat.Attraction_Type_Code, rat.Attraction_Type_Description ORDER BY COUNT(ta.Tourist_Attraction_ID) DESC LIMIT 1;
SELECT      rat.Attraction_Type_Code,      rat.Attraction_Type_Description,      COUNT(ta.Tourist_Attraction_ID) AS Attraction_Count FROM      Ref_Attraction_Types rat JOIN      Tourist_Attractions ta ON rat.Attraction_Type_Code = ta.Attraction_Type_Code GROUP BY      rat.Attraction_Type_Code, rat.Attraction_Type_Description ORDER BY      Attraction_Count DESC LIMIT 1;
SELECT How_to_Get_There, COUNT(Tourist_Attraction_ID) AS Number_of_Attractions FROM Tourist_Attractions GROUP BY How_to_Get_There;
SELECT How_to_Get_There, COUNT(Tourist_Attraction_ID) AS Number_of_Attractions FROM Tourist_Attractions GROUP BY How_to_Get_There;
SELECT ta.Name, ta.Tourist_Attraction_ID, COUNT(v.Visit_ID) AS Number_of_Visits FROM Tourist_Attractions ta LEFT JOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID GROUP BY ta.Tourist_Attraction_ID, ta.Name;
SELECT ta.Name, ta.Tourist_Attraction_ID, COUNT(v.Visit_ID) AS Number_of_Visits FROM Tourist_Attractions ta LEFT JOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID GROUP BY ta.Tourist_Attraction_ID, ta.Name;
SELECT Tourist_Attraction_ID, Name FROM Tourist_Attractions WHERE Tourist_Attraction_ID IN (     SELECT Tourist_Attraction_ID     FROM Visits     GROUP BY Tourist_Attraction_ID     HAVING COUNT(Visit_ID) >= 2 );
SELECT Tourist_Attraction_ID, Name FROM Visits JOIN Tourist_Attractions ON Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID GROUP BY Tourist_Attraction_ID, Name HAVING COUNT(Visit_ID) >= 2;
SELECT ta.Name, ta.Tourist_Attraction_ID FROM Tourist_Attractions ta LEFT JOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID GROUP BY ta.Tourist_Attraction_ID, ta.Name HAVING COUNT(v.Visit_ID) <= 1;
SELECT ta.Name, ta.Tourist_Attraction_ID FROM Tourist_Attractions ta LEFT JOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID GROUP BY ta.Tourist_Attraction_ID, ta.Name HAVING COUNT(v.Visit_ID) <= 1;
SELECT Name  FROM Tourist_Attractions  WHERE How_to_Get_There LIKE '%walk%' OR Location_ID IN (     SELECT Location_ID      FROM Locations      WHERE Address = '660 Shea Crescent' );
SELECT Name  FROM Tourist_Attractions  WHERE How_to_Get_There = 'accessible by walk' OR Location_ID IN (     SELECT Location_ID      FROM Locations      WHERE Address = '660 Shea Crescent' );
SELECT DISTINCT ta.Name FROM Tourist_Attractions ta JOIN Tourist_Attraction_Features taf ON ta.Tourist_Attraction_ID = taf.Tourist_Attraction_ID JOIN Features f ON taf.Feature_ID = f.Feature_ID WHERE f.Feature_Details IN ('parking', 'shopping');
SELECT ta.Name FROM Tourist_Attractions ta JOIN Tourist_Attraction_Features taf ON ta.Tourist_Attraction_ID = taf.Tourist_Attraction_ID JOIN Features f ON taf.Feature_ID = f.Feature_ID WHERE f.Feature_Details IN ('parking', 'shopping');
SELECT Name  FROM Tourist_Attractions  WHERE How_to_Get_There LIKE '%bus%' OR Location_ID IN (     SELECT Location_ID      FROM Locations      WHERE Address = '254 Ottilie Junction' );
SELECT Name  FROM Tourist_Attractions  WHERE How_to_Get_There LIKE '%bus%' OR Location_ID IN (     SELECT Location_ID      FROM Locations      WHERE Address = '254 Ottilie Junction' );
SELECT DISTINCT ta.Name FROM Visitors v JOIN Visits vi ON v.Tourist_ID = vi.Tourist_ID JOIN Tourist_Attractions ta ON vi.Tourist_Attraction_ID = ta.Tourist_Attraction_ID WHERE v.Tourist_Details IN ('Vincent', 'Marcelle');
SELECT ta.Name FROM Visitors v JOIN Visits vi ON v.Tourist_ID = vi.Tourist_ID JOIN Tourist_Attractions ta ON vi.Tourist_Attraction_ID = ta.Tourist_Attraction_ID WHERE v.Tourist_Details IN ('Vincent', 'Marcelle');
SELECT ta.Name FROM Tourist_Attractions ta JOIN Visits v1 ON ta.Tourist_Attraction_ID = v1.Tourist_Attraction_ID JOIN Visitors vi1 ON v1.Tourist_ID = vi1.Tourist_ID LEFT JOIN Visits v2 ON ta.Tourist_Attraction_ID = v2.Tourist_Attraction_ID JOIN Visitors vi2 ON v2.Tourist_ID = vi2.Tourist_ID WHERE vi1.Tourist_Details = 'Alison' AND (vi2.Tourist_Details IS NULL OR vi2.Tourist_Details <> 'Rosalind');
SELECT ta.Name FROM Tourist_Attractions ta JOIN Visits v1 ON ta.Tourist_Attraction_ID = v1.Tourist_Attraction_ID JOIN Visitors vi1 ON v1.Tourist_ID = vi1.Tourist_ID LEFT JOIN Visits v2 ON ta.Tourist_Attraction_ID = v2.Tourist_Attraction_ID JOIN Visitors vi2 ON v2.Tourist_ID = vi2.Tourist_ID WHERE vi1.Tourist_Details = 'Alison' AND (vi2.Tourist_Details IS NULL OR vi2.Tourist_Details <> 'Rosalind');
SELECT COUNT(*) AS Tourists_With_No_Visits FROM Visitors WHERE Tourist_ID NOT IN (SELECT Tourist_ID FROM Visits);
SELECT COUNT(*) AS NumberOfTourists FROM Visitors WHERE Tourist_ID NOT IN (SELECT Tourist_ID FROM Visits);
SELECT COUNT(*) FROM Video_Games;
SELECT COUNT(*) AS NumberOfVideoGames FROM Video_Games;
SELECT COUNT(DISTINCT GType) AS VideoGameTypeCount FROM Video_Games;
SELECT COUNT(DISTINCT GType) AS DifferentGameTypes FROM Video_Games;
SELECT DISTINCT GType FROM Video_Games;
SELECT DISTINCT GType FROM Video_Games;
SELECT GName, GType FROM Video_Games ORDER BY GName;
SELECT GName, GType FROM Video_Games ORDER BY GName;
SELECT * FROM Video_Games WHERE GType = 'Collectible card game';
SELECT GName  FROM Video_Games  WHERE GType = 'Collectible Cards';
SELECT GType FROM Video_Games WHERE GName = 'Call of Destiny';
SELECT GType FROM Video_Games WHERE GName = 'Call of Destiny';
SELECT COUNT(*)  FROM Video_Games  WHERE GType = 'Massively multiplayer online game';
SELECT COUNT(*) FROM Video_Games WHERE GType = 'Massively multiplayer online';
SELECT GType, COUNT(GameID) AS NumberOfGames FROM Video_Games GROUP BY GType;
SELECT GType, COUNT(*) AS NumberOfGames FROM Video_Games GROUP BY GType;
SELECT GType, COUNT(*) AS NumberOfGames FROM Video_Games GROUP BY GType ORDER BY NumberOfGames DESC LIMIT 1;
SELECT GType, COUNT(*) AS GameCount FROM Video_Games GROUP BY GType ORDER BY GameCount DESC LIMIT 1;
SELECT GType FROM Video_Games GROUP BY GType ORDER BY COUNT(GameID) ASC LIMIT 1;
SELECT GType FROM Video_Games GROUP BY GType ORDER BY COUNT(GameID) ASC LIMIT 1;
SELECT StuID FROM Student WHERE city_code = 'CHI';
SELECT StuID FROM Student WHERE city_code = 'CHI';
SELECT StuID FROM Student WHERE Advisor = 1121;
SELECT StuID FROM Student WHERE Advisor = 1121;
SELECT Fname FROM Student WHERE Major = 600;
SELECT Fname FROM Student WHERE Major = 600;
SELECT Major, AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM Student GROUP BY Major;
SELECT Major, AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM Student GROUP BY Major;
SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) >= 2;
SELECT DISTINCT Advisor FROM Student;
SELECT COUNT(DISTINCT SportName) AS TotalSports FROM SportsInfo;
SELECT COUNT(DISTINCT SportName) AS Different_Sports_Count FROM SportsInfo;
SELECT COUNT(DISTINCT StuID) AS NumberOfStudentsPlayingSports FROM SportsInfo;
SELECT COUNT(DISTINCT StuID) AS DifferentStudentsInSports FROM SportsInfo;
SELECT StuID FROM SportsInfo WHERE OnScholarship = 'Yes';
SELECT StuID  FROM SportsInfo  WHERE OnScholarship = 'Yes';
SELECT LName FROM Student  JOIN SportsInfo ON Student.StuID = SportsInfo.StuID  WHERE OnScholarship = 'Yes';
SELECT DISTINCT S.LName  FROM Student S  JOIN SportsInfo SI ON S.StuID = SI.StuID  WHERE SI.OnScholarship = 'Yes';
SELECT COUNT(*) AS TotalGamesPlayed FROM Plays_Games;
SELECT SUM(GamesPlayed) AS TotalGamesPlayed FROM SportsInfo;
SELECT COUNT(DISTINCT pg.GameID) AS TotalGamesPlayed FROM Plays_Games pg JOIN SportsInfo si ON pg.StuID = si.StuID JOIN Video_Games vg ON pg.GameID = vg.GameID WHERE si.OnScholarship = 'Yes' AND vg.GType = 'Football';
SELECT SUM(GamesPlayed) AS TotalFootballGames FROM SportsInfo WHERE SportName = 'Football' AND OnScholarship = 'Yes';
SELECT SportName, COUNT(StuID) AS NumberOfStudents FROM SportsInfo GROUP BY SportName;
SELECT SportName, COUNT(StuID) AS NumberOfStudents FROM SportsInfo GROUP BY SportName;
SELECT s.StuID,         COUNT(DISTINCT si.SportName) AS NumberOfSports,         SUM(si.GamesPlayed) AS TotalGamesPlayed FROM Student s LEFT JOIN SportsInfo si ON s.StuID = si.StuID GROUP BY s.StuID;
SELECT s.StuID,         COALESCE(SUM(CASE WHEN si.SportName IS NOT NULL THEN 1 ELSE 0 END), 0) AS SportsPlayed,         COALESCE(SUM(CASE WHEN vg.GameID IS NOT NULL THEN 1 ELSE 0 END), 0) AS GamesPlayed FROM Student s LEFT JOIN SportsInfo si ON s.StuID = si.StuID LEFT JOIN Plays_Games pg ON s.StuID = pg.StuID LEFT JOIN Video_Games vg ON pg.GameID = vg.GameID GROUP BY s.StuID;
SELECT StuID  FROM SportsInfo  GROUP BY StuID  HAVING SUM(HoursPerWeek) > 10;
SELECT StuID  FROM SportsInfo  WHERE HoursPerWeek > 10;
SELECT S.Fname, S.LName FROM Student S JOIN SportsInfo SI ON S.StuID = SI.StuID GROUP BY S.StuID, S.Fname, S.LName ORDER BY COUNT(SI.SportName) DESC LIMIT 1;
SELECT S.Fname, S.LName FROM Student S JOIN SportsInfo SI ON S.StuID = SI.StuID GROUP BY S.StuID, S.Fname, S.LName ORDER BY COUNT(SI.SportName) DESC LIMIT 1;
SELECT SportName, COUNT(StuID) AS NumberOfStudents FROM SportsInfo WHERE OnScholarship = 'Yes' GROUP BY SportName ORDER BY NumberOfStudents DESC LIMIT 1;
SELECT SportName FROM SportsInfo WHERE OnScholarship = 'Yes' GROUP BY SportName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT StuID  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM SportsInfo);
SELECT StuID  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM SportsInfo);
SELECT StuID  FROM SportsInfo  WHERE OnScholarship = 'Yes'  AND StuID IN (SELECT StuID FROM Student WHERE Major = 600);
SELECT StuID  FROM SportsInfo  WHERE OnScholarship = 'Yes'  AND StuID IN (SELECT StuID FROM Student WHERE Major = 600);
SELECT DISTINCT s.StuID  FROM Student s  JOIN SportsInfo sp ON s.StuID = sp.StuID  WHERE s.Sex = 'F' AND sp.SportName = 'Football';
SELECT DISTINCT s.StuID FROM Student s JOIN SportsInfo sp ON s.StuID = sp.StuID WHERE s.Sex = 'F' AND sp.SportName = 'Football';
SELECT StuID  FROM Student  WHERE Sex = 'M'  AND StuID NOT IN (SELECT StuID FROM SportsInfo WHERE SportName = 'Football');
SELECT StuID  FROM Student  WHERE Sex = 'M'  AND StuID NOT IN (     SELECT StuID      FROM SportsInfo      WHERE SportName = 'Football' );
SELECT SUM(SI.HoursPerWeek) AS Total_Hours_Per_Week, SUM(SI.GamesPlayed) AS Total_Games_Played FROM Student S JOIN SportsInfo SI ON S.StuID = SI.StuID WHERE S.Fname = 'David' AND S.LName = 'Shieber';
SELECT SUM(s.HoursPerWeek) AS Total_Hours_Per_Week, SUM(s.GamesPlayed) AS Total_Games_Played FROM SportsInfo s JOIN Student st ON s.StuID = st.StuID WHERE st.Fname = 'David' AND st.LName = 'Shieber';
SELECT S.StuID, SUM(SI.HoursPerWeek) AS Total_Hours_Per_Week, SUM(SI.GamesPlayed) AS Total_Games_Played FROM Student S JOIN SportsInfo SI ON S.StuID = SI.StuID WHERE S.Age < 20 GROUP BY S.StuID;
SELECT SUM(SI.HoursPerWeek) AS Total_Hours_Per_Week, SUM(SI.GamesPlayed) AS Total_Games_Played FROM Student S JOIN SportsInfo SI ON S.StuID = SI.StuID WHERE S.Age < 20;
SELECT COUNT(DISTINCT StuID) AS NumberOfStudents FROM Plays_Games;
SELECT COUNT(DISTINCT StuID) AS DifferentStudents FROM Plays_Games;
SELECT StuID  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Plays_Games);
SELECT StuID  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Plays_Games);
SELECT DISTINCT s.StuID FROM Student s JOIN Plays_Games pg ON s.StuID = pg.StuID JOIN SportsInfo si ON s.StuID = si.StuID;
SELECT DISTINCT s.StuID FROM Student s JOIN Plays_Games pg ON s.StuID = pg.StuID JOIN SportsInfo si ON s.StuID = si.StuID;
SELECT GameID, SUM(Hours_Played) AS Total_Hours_Played FROM Plays_Games GROUP BY GameID;
SELECT GameID, SUM(Hours_Played) AS Total_Hours_Played FROM Plays_Games GROUP BY GameID;
SELECT StuID, SUM(Hours_Played) AS Total_Hours_Played FROM Plays_Games GROUP BY StuID;
SELECT StuID, SUM(Hours_Played) AS Total_Hours_Played FROM Plays_Games GROUP BY StuID;
SELECT GName  FROM Video_Games  JOIN Plays_Games ON Video_Games.GameID = Plays_Games.GameID  GROUP BY GName  ORDER BY SUM(Hours_Played) DESC  LIMIT 1;
SELECT G.GName FROM Video_Games G JOIN Plays_Games P ON G.GameID = P.GameID GROUP BY G.GName ORDER BY SUM(P.Hours_Played) DESC LIMIT 1;
SELECT VG.GName FROM Video_Games VG JOIN Plays_Games PG ON VG.GameID = PG.GameID GROUP BY VG.GName HAVING SUM(PG.Hours_Played) >= 1000;
SELECT VG.GName FROM Video_Games VG JOIN Plays_Games PG ON VG.GameID = PG.GameID GROUP BY VG.GName HAVING SUM(PG.Hours_Played) >= 1000;
SELECT VG.GName  FROM Student S  JOIN Plays_Games PG ON S.StuID = PG.StuID  JOIN Video_Games VG ON PG.GameID = VG.GameID  WHERE S.Fname = 'Linda' AND S.LName = 'Smith';
SELECT vg.GName  FROM Student s  JOIN Plays_Games pg ON s.StuID = pg.StuID  JOIN Video_Games vg ON pg.GameID = vg.GameID  WHERE s.Fname = 'Linda' AND s.LName = 'Smith';
SELECT S.LName, S.Fname FROM Student S JOIN SportsInfo SI ON S.StuID = SI.StuID WHERE SI.SportName IN ('Football', 'Lacrosse');
SELECT S.Fname, S.LName FROM Student S JOIN SportsInfo SI ON S.StuID = SI.StuID WHERE SI.SportName IN ('Football', 'Lacrosse');
SELECT S.Fname, S.Age FROM Student S JOIN SportsInfo SI ON S.StuID = SI.StuID WHERE SI.SportName IN ('Football', 'Lacrosse') GROUP BY S.StuID, S.Fname, S.Age HAVING COUNT(DISTINCT SI.SportName) = 2;
SELECT S.Fname, S.Age FROM Student S JOIN SportsInfo SI ON S.StuID = SI.StuID WHERE SI.SportName IN ('Football', 'Lacrosse') GROUP BY S.StuID HAVING COUNT(DISTINCT SI.SportName) = 2;
SELECT S.LName, S.Sex FROM Student S JOIN Plays_Games PG1 ON S.StuID = PG1.StuID JOIN Video_Games VG1 ON PG1.GameID = VG1.GameID JOIN Plays_Games PG2 ON S.StuID = PG2.StuID JOIN Video_Games VG2 ON PG2.GameID = VG2.GameID WHERE VG1.GName = 'Call of Destiny' AND VG2.GName = 'Works of Widenius';
SELECT S.LName, S.Sex FROM Student S JOIN Plays_Games PG1 ON S.StuID = PG1.StuID JOIN Video_Games VG1 ON PG1.GameID = VG1.GameID JOIN Plays_Games PG2 ON S.StuID = PG2.StuID JOIN Video_Games VG2 ON PG2.GameID = VG2.GameID WHERE VG1.GName = 'Call of Destiny' AND VG2.GName = 'Works of Widenius';
SELECT customer_name FROM Customers;
SELECT customer_name FROM Customers;
SELECT COUNT(*) AS total_customers FROM Customers;
SELECT COUNT(DISTINCT customer_id) AS total_distinct_customers FROM Customers;
SELECT AVG(order_quantity) AS average_items_per_order FROM Order_Items GROUP BY order_id;
SELECT AVG(order_quantity) AS average_order_quantity FROM Order_Items GROUP BY order_id;
SELECT customer_name  FROM Customers  WHERE payment_method = 'Cash';
SELECT customer_name  FROM Customers  WHERE payment_method = 'Cash';
SELECT date_became_customer  FROM Customers  WHERE customer_id BETWEEN 10 AND 20;
SELECT customer_id, date_became_customer  FROM Customers  WHERE customer_id BETWEEN 10 AND 20;
SELECT payment_method, COUNT(customer_id) AS customer_count FROM Customers GROUP BY payment_method ORDER BY customer_count DESC LIMIT 1;
SELECT payment_method, COUNT(*) AS frequency FROM Customers GROUP BY payment_method ORDER BY frequency DESC LIMIT 1;
SELECT customer_name FROM Customers WHERE payment_method = (     SELECT payment_method     FROM Customers     GROUP BY payment_method     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT customer_name FROM Customers WHERE payment_method = (     SELECT payment_method     FROM Customers     GROUP BY payment_method     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT DISTINCT payment_method FROM Customers;
SELECT DISTINCT payment_method FROM Customers;
SELECT * FROM Products;
SELECT * FROM Products;
SELECT customer_name  FROM Customers  WHERE customer_name LIKE '%Alex%';
SELECT customer_name  FROM Customers  WHERE customer_name LIKE '%Alex%';
SELECT * FROM Products  WHERE product_details LIKE '%Latte%' OR product_details LIKE '%Americano%';
SELECT product_details  FROM Products  WHERE product_details LIKE '%Latte%' OR product_details LIKE '%Americano%';
SELECT a.address_content  FROM Customers c  JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id  JOIN Addresses a ON ca.address_id = a.address_id  WHERE c.customer_name = 'Maudie Kertzmann';
SELECT a.address_content  FROM Customers c  JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id  JOIN Addresses a ON ca.address_id = a.address_id  WHERE c.customer_name = 'Maudie Kertzmann';
SELECT COUNT(DISTINCT c.customer_id)  FROM Customers c JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id JOIN Addresses a ON ca.address_id = a.address_id WHERE a.city = 'Lake Geovannyton';
SELECT COUNT(DISTINCT c.customer_id) AS number_of_customers FROM Customers c JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id JOIN Addresses a ON ca.address_id = a.address_id WHERE a.city = 'Lake Geovannyton';
SELECT DISTINCT c.customer_name FROM Customers c JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id JOIN Addresses a ON ca.address_id = a.address_id WHERE a.state_province_county = 'Colorado';
SELECT DISTINCT c.customer_name FROM Customers c JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id JOIN Addresses a ON ca.address_id = a.address_id WHERE a.state_province_county = 'Colorado';
SELECT DISTINCT city  FROM Addresses  WHERE address_id NOT IN (SELECT address_id FROM Customer_Addresses);
SELECT DISTINCT city  FROM Addresses  WHERE address_id NOT IN (SELECT address_id FROM Customer_Addresses);
SELECT a.city, COUNT(DISTINCT ca.customer_id) AS customer_count FROM Customer_Addresses ca JOIN Addresses a ON ca.address_id = a.address_id GROUP BY a.city ORDER BY customer_count DESC LIMIT 1;
SELECT city FROM Addresses JOIN Customer_Addresses ON Addresses.address_id = Customer_Addresses.address_id JOIN Customers ON Customer_Addresses.customer_id = Customers.customer_id GROUP BY city ORDER BY COUNT(Customers.customer_id) DESC LIMIT 1;
SELECT DISTINCT city FROM Addresses;
SELECT DISTINCT city FROM Addresses;
SELECT city FROM Addresses WHERE zip_postcode = '255';
SELECT city FROM Addresses WHERE zip_postcode = '255';
SELECT state_province_county, country  FROM Addresses  WHERE zip_postcode LIKE '4%';
SELECT DISTINCT state_province_county, country FROM Addresses WHERE zip_postcode LIKE '4%';
SELECT country FROM Addresses GROUP BY country HAVING COUNT(address_id) > 4;
SELECT country FROM Addresses GROUP BY country HAVING COUNT(DISTINCT address_id) > 4;
SELECT channel_code FROM Customer_Contact_Channels GROUP BY channel_code HAVING COUNT(*) < 5;
SELECT channel_code FROM Customer_Contact_Channels GROUP BY channel_code HAVING COUNT(*) < 5;
SELECT ccc.channel_code, ccc.contact_number FROM Customers c JOIN Customer_Contact_Channels ccc ON c.customer_id = ccc.customer_id WHERE c.customer_name = 'Tillman Ernser';
SELECT channel_code  FROM Customer_Contact_Channels  WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Tillman Ernser');
SELECT MAX(active_to_date)  FROM Customer_Contact_Channels ccc JOIN Customers c ON c.customer_id = ccc.customer_id WHERE c.customer_name = 'Tillman Ernser';
SELECT MAX(CCC.active_to_date) AS latest_active_to_date FROM Customers C JOIN Customer_Contact_Channels CCC ON C.customer_id = CCC.customer_id WHERE C.customer_name = 'Tillman Ernser';
SELECT AVG(DATEDIFF(active_to_date, active_from_date)) AS average_contact_channel_span FROM Customer_Contact_Channels WHERE active_to_date IS NOT NULL AND active_from_date IS NOT NULL;
SELECT AVG(DATEDIFF(active_to_date, active_from_date)) AS average_active_time_span FROM Customer_Contact_Channels WHERE active_to_date IS NOT NULL AND active_from_date IS NOT NULL;
SELECT channel_code, contact_number FROM Customer_Contact_Channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1;
SELECT channel_code, contact_number FROM Customer_Contact_Channels ORDER BY DATEDIFF(active_to_date, active_from_date) DESC LIMIT 1;
SELECT c.customer_name, ccc.active_from_date FROM Customers c JOIN Customer_Contact_Channels ccc ON c.customer_id = ccc.customer_id WHERE ccc.channel_code = 'email';
SELECT c.customer_name, ccc.active_from_date FROM Customers c JOIN Customer_Contact_Channels ccc ON c.customer_id = ccc.customer_id WHERE ccc.channel_code = 'email';
SELECT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id ORDER BY oi.order_quantity DESC LIMIT 1;
SELECT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY c.customer_id ORDER BY SUM(oi.order_quantity) DESC LIMIT 1;
SELECT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY c.customer_id, c.customer_name ORDER BY SUM(oi.order_quantity) DESC LIMIT 1;
SELECT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY c.customer_id ORDER BY SUM(oi.order_quantity) DESC LIMIT 1;
SELECT c.payment_method FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY c.customer_id, c.payment_method ORDER BY SUM(oi.order_quantity) ASC LIMIT 1;
SELECT c.payment_method FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY c.customer_id, c.payment_method ORDER BY SUM(oi.order_quantity) ASC LIMIT 1;
SELECT COUNT(DISTINCT oi.product_id) AS product_types FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id WHERE c.customer_name = 'Rodrick Heaney';
SELECT COUNT(DISTINCT oi.product_id) AS distinct_product_count FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id WHERE c.customer_name = 'Rodrick Heaney';
SELECT SUM(oi.order_quantity) AS total_quantity FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id WHERE c.customer_name = 'Rodrick Heaney';
SELECT SUM(oi.order_quantity) AS total_quantity FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id WHERE c.customer_name = 'Rodrick Heaney';
SELECT COUNT(DISTINCT customer_id)  FROM Customer_Orders  WHERE order_status = 'Cancelled';
SELECT COUNT(DISTINCT customer_id)  FROM Customer_Orders  WHERE order_status = 'Cancelled';
SELECT COUNT(*) AS order_count FROM Customer_Orders WHERE order_details = 'Second time';
SELECT COUNT(*) AS number_of_orders FROM Customer_Orders WHERE order_details = 'Second time';
SELECT c.customer_name, co.order_date FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.order_status = 'Delivered';
SELECT c.customer_name, co.order_date FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.order_status = 'Delivered';
SELECT SUM(order_quantity) AS total_cancelled_products FROM Order_Items oi JOIN Customer_Orders co ON oi.order_id = co.order_id WHERE co.order_status = 'Cancelled';
SELECT SUM(oi.order_quantity) AS total_quantity FROM Customer_Orders co JOIN Order_Items oi ON co.order_id = oi.order_id WHERE co.order_status = 'Cancelled';
SELECT SUM(order_quantity) AS total_products_ordered FROM Order_Items oi JOIN Customer_Orders co ON oi.order_id = co.order_id WHERE co.order_date < '2018-03-17 07:13:53';
SELECT SUM(order_quantity) AS total_products_purchased FROM Order_Items oi JOIN Customer_Orders co ON oi.order_id = co.order_id WHERE co.order_date < '2018-03-17 07:13:53';
SELECT c.customer_name  FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id ORDER BY co.order_date DESC LIMIT 1;
SELECT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id ORDER BY co.order_date DESC LIMIT 1;
SELECT p.product_id, p.product_details, SUM(oi.order_quantity) AS total_ordered FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id GROUP BY p.product_id, p.product_details ORDER BY total_ordered DESC LIMIT 1;
SELECT p.product_id, p.product_details FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id GROUP BY p.product_id, p.product_details ORDER BY SUM(oi.order_quantity) DESC LIMIT 1;
SELECT p.product_id, p.product_details FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_details ORDER BY SUM(oi.order_quantity) DESC LIMIT 1;
SELECT p.product_id, p.product_details FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id GROUP BY p.product_id, p.product_details ORDER BY SUM(oi.order_quantity) DESC LIMIT 1;
SELECT *  FROM Addresses  WHERE (city = 'East Julianaside' AND state_province_county = 'Texas')     OR (city = 'Gleasonmouth' AND state_province_county = 'Arizona');
SELECT *  FROM Addresses  WHERE (city = 'East Julianaside' AND state_province_county = 'Texas')     OR (city = 'Gleasonmouth' AND state_province_county = 'Arizona');
SELECT customer_name  FROM Customers  WHERE payment_method <> 'Cash';
SELECT customer_name  FROM Customers  WHERE payment_method <> 'Cash';
SELECT DISTINCT c.customer_name FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id LEFT JOIN Order_Items oi ON co.order_id = oi.order_id LEFT JOIN Products p ON oi.product_id = p.product_id WHERE p.product_details != 'Latte' OR p.product_details IS NULL GROUP BY c.customer_id HAVING COUNT(oi.product_id) = 0;
SELECT DISTINCT c.customer_name FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id LEFT JOIN Order_Items oi ON co.order_id = oi.order_id LEFT JOIN Products p ON oi.product_id = p.product_id WHERE p.product_details != 'Latte' OR p.product_details IS NULL GROUP BY c.customer_id HAVING COUNT(oi.product_id) = 0;
SELECT customer_name  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders);
SELECT customer_name  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders);
SELECT DISTINCT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_details IN ('Latte', 'Americano') GROUP BY c.customer_id HAVING COUNT(DISTINCT p.product_details) = 2;
SELECT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_details IN ('Latte', 'Americano') GROUP BY c.customer_id HAVING COUNT(DISTINCT p.product_details) = 2;
SELECT COUNT(*) FROM artist;
SELECT COUNT(*) FROM artist;
SELECT Age FROM artist;
SELECT Age FROM artist;
SELECT AVG(Age) AS Average_Age FROM artist;
SELECT AVG(Age) AS Average_Age FROM artist;
SELECT Famous_Title  FROM artist  WHERE Artist = 'Triumfall';
SELECT Famous_Title  FROM artist  WHERE Artist = 'Triumfall';
SELECT DISTINCT Famous_Release_date FROM artist;
SELECT DISTINCT Famous_Release_date FROM artist;
SELECT Date_of_ceremony, Result FROM music_festival;
SELECT Date_of_ceremony, Result FROM music_festival;
SELECT DISTINCT Category FROM music_festival WHERE Result = 'Awarded';
SELECT DISTINCT Category  FROM music_festival  WHERE Result = 'Awarded';
SELECT MAX(Weeks_on_Top) AS Max_Weeks_On_Top, MIN(Weeks_on_Top) AS Min_Weeks_On_Top FROM volume;
SELECT MAX(Weeks_on_Top) AS Max_Weeks, MIN(Weeks_on_Top) AS Min_Weeks FROM volume;
SELECT Song  FROM volume  WHERE Weeks_on_Top > 1;
SELECT v.Song  FROM volume v  WHERE v.Weeks_on_Top > 1;
SELECT Song FROM volume ORDER BY Song ASC;
SELECT Song FROM volume ORDER BY Song ASC;
SELECT COUNT(DISTINCT Artist_ID) AS Distinct_Artists FROM volume;
SELECT COUNT(DISTINCT a.Artist_ID) AS Distinct_Artists FROM artist a JOIN volume v ON a.Artist_ID = v.Artist_ID;
SELECT mf.Date_of_ceremony FROM music_festival mf JOIN volume v ON mf.Volume = v.Volume_ID WHERE v.Weeks_on_Top > 2;
SELECT mf.Date_of_ceremony FROM music_festival mf JOIN volume v ON mf.Volume = v.Volume_ID WHERE v.Weeks_on_Top > 2;
SELECT v.Song  FROM volume v JOIN music_festival mf ON v.Volume_ID = mf.Volume WHERE mf.Result = 'nominated';
SELECT DISTINCT v.Song FROM volume v JOIN music_festival mf ON v.Volume_ID = mf.Volume WHERE mf.Result IS NOT NULL;
SELECT v.Issue_Date FROM volume v JOIN artist a ON v.Artist_ID = a.Artist_ID WHERE a.Artist = 'Gorgoroth';
SELECT v.Issue_Date FROM volume v JOIN artist a ON v.Artist_ID = a.Artist_ID WHERE a.Artist = 'Gorgoroth';
SELECT v.Song  FROM volume v  JOIN artist a ON v.Artist_ID = a.Artist_ID  WHERE a.Age >= 32;
SELECT v.Song FROM volume v JOIN artist a ON v.Artist_ID = a.Artist_ID WHERE a.Age >= 32;
SELECT AVG(v.Weeks_on_Top) AS Average_Weeks_On_Top FROM artist a JOIN volume v ON a.Artist_ID = v.Artist_ID WHERE a.Age <= 25;
SELECT AVG(v.Weeks_on_Top) AS Average_Weeks_On_Top FROM volume v JOIN artist a ON v.Artist_ID = a.Artist_ID WHERE a.Age <= 25;
SELECT DISTINCT a.Famous_Title FROM artist a JOIN volume v ON a.Artist_ID = v.Artist_ID WHERE v.Weeks_on_Top > 2;
SELECT DISTINCT a.Famous_Title FROM artist a JOIN volume v ON a.Artist_ID = v.Artist_ID WHERE v.Weeks_on_Top > 2;
SELECT Age, Famous_Title FROM artist ORDER BY Age DESC;
SELECT Famous_Title, Age  FROM artist  ORDER BY Age DESC;
SELECT Famous_Release_date  FROM artist  WHERE Age = (SELECT MAX(Age) FROM artist);
SELECT Famous_Release_date  FROM artist  WHERE Age = (SELECT MAX(Age) FROM artist);
SELECT Category, COUNT(*) AS Count FROM music_festival GROUP BY Category;
SELECT Category, COUNT(*) AS Number_of_Festivals FROM music_festival GROUP BY Category;
SELECT Result, COUNT(*) AS Count FROM music_festival GROUP BY Result ORDER BY Count DESC LIMIT 1;
SELECT Result, COUNT(*) AS Frequency FROM music_festival GROUP BY Result ORDER BY Frequency DESC LIMIT 1;
SELECT Category, COUNT(*) AS Count FROM music_festival GROUP BY Category HAVING COUNT(*) > 1;
SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(ID) > 1;
SELECT Song  FROM volume  WHERE Weeks_on_Top = (SELECT MAX(Weeks_on_Top) FROM volume);
SELECT Song  FROM volume  ORDER BY Weeks_on_Top DESC  LIMIT 1;
SELECT a.Famous_Title FROM artist a LEFT JOIN volume v ON a.Artist_ID = v.Artist_ID WHERE v.Volume_ID IS NULL;
SELECT a.Famous_Title FROM artist a LEFT JOIN volume v ON a.Artist_ID = v.Artist_ID WHERE v.Volume_ID IS NULL;
SELECT DISTINCT a.Famous_Title FROM artist a JOIN volume v ON a.Artist_ID = v.Artist_ID WHERE v.Weeks_on_Top > 2    OR v.Weeks_on_Top < 2 GROUP BY a.Famous_Title HAVING COUNT(CASE WHEN v.Weeks_on_Top > 2 THEN 1 END) > 0    AND COUNT(CASE WHEN v.Weeks_on_Top < 2 THEN 1 END) > 0;
SELECT DISTINCT a.Famous_Title FROM artist a JOIN volume v ON a.Artist_ID = v.Artist_ID WHERE a.Artist_ID IN (     SELECT Artist_ID     FROM volume     GROUP BY Artist_ID     HAVING SUM(CASE WHEN Weeks_on_Top > 2 THEN 1 ELSE 0 END) > 0        AND SUM(CASE WHEN Weeks_on_Top < 2 THEN 1 ELSE 0 END) > 0 );
SELECT Date_of_ceremony  FROM music_festival  WHERE Category = 'Best Song' AND Result = 'Awarded';
SELECT Date_of_ceremony  FROM music_festival  WHERE Category = 'Best Song' AND Result = 'Awarded';
SELECT Issue_Date  FROM volume  WHERE Weeks_on_Top = (SELECT MIN(Weeks_on_Top) FROM volume);
SELECT Issue_Date  FROM volume  WHERE Weeks_on_Top = (SELECT MIN(Weeks_on_Top) FROM volume);
SELECT COUNT(DISTINCT Artist_ID) AS Distinct_Artists_With_Volumes FROM volume;
SELECT COUNT(DISTINCT a.Artist_ID) AS Number_of_Artists FROM artist a JOIN volume v ON a.Artist_ID = v.Artist_ID;
SELECT Artist, COUNT(music_festival.ID) AS Festival_Count FROM artist JOIN volume ON artist.Artist_ID = volume.Artist_ID JOIN music_festival ON volume.Song = music_festival.Volume GROUP BY Artist ORDER BY Festival_Count DESC;
SELECT Result, COUNT(*) AS Festival_Count FROM music_festival GROUP BY Result ORDER BY Festival_Count DESC;
SELECT v.Issue_Date FROM volume v JOIN artist a ON v.Artist_ID = a.Artist_ID WHERE a.Age <= 23;
SELECT v.Issue_Date FROM volume v JOIN artist a ON v.Artist_ID = a.Artist_ID WHERE a.Age <= 23;
SELECT COUNT(*) AS Total_Roller_Coasters FROM roller_coaster;
SELECT Name FROM roller_coaster ORDER BY Length ASC;
SELECT Length, Height FROM roller_coaster;
SELECT Name FROM country WHERE Languages != 'German';
SELECT Status  FROM roller_coaster  WHERE Length > 3300 OR Height > 100;
SELECT Speed  FROM roller_coaster  WHERE Length = (SELECT MAX(Length) FROM roller_coaster);
SELECT AVG(Speed) AS Average_Speed FROM roller_coaster;
SELECT Status, COUNT(*) AS Number_of_Roller_Coasters FROM roller_coaster GROUP BY Status;
SELECT Status, COUNT(*) AS Count FROM roller_coaster GROUP BY Status ORDER BY Count DESC LIMIT 1;
SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*) > 2;
SELECT Park  FROM roller_coaster  WHERE Speed = (SELECT MAX(Speed) FROM roller_coaster);
SELECT rc.Name AS Roller_Coaster_Name, c.Name AS Country_Name FROM roller_coaster rc JOIN country c ON rc.Country_ID = c.Country_ID;
SELECT c.Name FROM country c JOIN roller_coaster r ON c.Country_ID = r.Country_ID GROUP BY c.Name HAVING COUNT(r.Roller_Coaster_ID) > 1;
SELECT c.Name, c.Population FROM country c JOIN roller_coaster r ON c.Country_ID = r.Country_ID WHERE r.Height = (SELECT MAX(Height) FROM roller_coaster);
SELECT c.Name AS Country_Name, AVG(rc.Speed) AS Average_Speed FROM country c JOIN roller_coaster rc ON c.Country_ID = rc.Country_ID GROUP BY c.Name;
SELECT COUNT(DISTINCT c.Country_ID)  FROM country c  LEFT JOIN roller_coaster r ON c.Country_ID = r.Country_ID AND r.Length > 3000  WHERE r.Roller_Coaster_ID IS NULL;
SELECT c.Name, c.Area, c.Population FROM country c JOIN roller_coaster rc ON c.Country_ID = rc.Country_ID WHERE rc.Speed > (SELECT AVG(Speed) FROM roller_coaster) GROUP BY c.Country_ID, c.Name, c.Area, c.Population;
SELECT COUNT(DISTINCT Rank) AS Different_Captain_Ranks FROM captain;
SELECT COUNT(DISTINCT Rank) AS Different_Rank_Count FROM captain;
SELECT Rank, COUNT(*) AS Captain_Count FROM captain GROUP BY Rank;
SELECT Rank, COUNT(*) AS Captain_Count FROM captain GROUP BY Rank;
SELECT Rank, COUNT(*) AS Captain_Count FROM captain WHERE age < 50 GROUP BY Rank;
SELECT Rank, COUNT(*) AS Captain_Count FROM captain WHERE age < 50 GROUP BY Rank;
SELECT Name FROM captain ORDER BY age DESC;
SELECT Name FROM captain ORDER BY age DESC;
SELECT Name, Class, Rank FROM captain;
SELECT Name, Class, Rank FROM captain;
SELECT Rank, COUNT(*) AS Count FROM captain GROUP BY Rank ORDER BY Count DESC LIMIT 1;
SELECT Rank FROM captain GROUP BY Rank ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Class FROM captain GROUP BY Class HAVING COUNT(Captain_ID) > 2;
SELECT Class FROM captain GROUP BY Class HAVING COUNT(Captain_ID) > 2;
SELECT Name FROM captain WHERE Rank IN ('Midshipman', 'Lieutenant');
SELECT Name  FROM captain  WHERE Rank IN ('Midshipman', 'Lieutenant');
SELECT Class, AVG(age) AS Average_Age, MIN(age) AS Minimum_Age FROM captain GROUP BY Class;
SELECT Class, AVG(age) AS Average_Age, MIN(age) AS Minimum_Age FROM captain GROUP BY Class;
SELECT DISTINCT c.Rank FROM captain c JOIN Ship s ON c.Ship_ID = s.Ship_ID WHERE s.Class IN ('Cutter', 'Armed schooner') GROUP BY c.Rank HAVING COUNT(DISTINCT s.Class) = 2;
SELECT DISTINCT c.Rank FROM captain c JOIN Ship s ON c.Ship_ID = s.Ship_ID WHERE s.Class IN ('Cutter', 'Armed schooner') GROUP BY c.Rank HAVING COUNT(DISTINCT s.Class) = 2;
SELECT DISTINCT c.Rank  FROM captain c  WHERE c.Ship_ID NOT IN (SELECT s.Ship_ID FROM Ship s WHERE s.Class = 'Third-rate ship of the line');
SELECT DISTINCT c.Rank FROM captain c WHERE c.Ship_ID IS NULL AND c.Class = 'Third-rate ship of the line';
SELECT Name FROM captain ORDER BY age ASC LIMIT 1;
SELECT Name FROM captain ORDER BY age ASC LIMIT 1;
SELECT COUNT(*) FROM Ship;
SELECT COUNT(*) FROM Ship;
SELECT Name, Type, Flag  FROM Ship  WHERE Built_Year = (SELECT MAX(Built_Year) FROM Ship);
SELECT s.Name, s.Type, s.Flag  FROM Ship s  WHERE s.Built_Year = (SELECT MAX(Built_Year) FROM Ship);
SELECT Flag, COUNT(*) AS Number_of_Ships FROM Ship GROUP BY Flag;
SELECT Flag, COUNT(*) AS Ship_Count FROM Ship GROUP BY Flag;
SELECT Flag, COUNT(*) AS Count FROM Ship GROUP BY Flag ORDER BY Count DESC LIMIT 1;
SELECT Flag FROM Ship GROUP BY Flag ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Ship.Name  FROM Ship  ORDER BY Built_Year, Class;
SELECT Ship.Name  FROM Ship  ORDER BY Ship.Built_Year, Ship.Class;
SELECT DISTINCT s1.Type FROM Ship s1 JOIN Ship s2 ON s1.Type = s2.Type WHERE s1.Flag = 'Panama' AND s2.Flag = 'Malta';
SELECT DISTINCT s.Type FROM Ship s WHERE s.Flag IN ('Panama', 'Malta') GROUP BY s.Type HAVING COUNT(DISTINCT s.Flag) = 2;
SELECT Built_Year, COUNT(*) AS Ship_Count FROM Ship GROUP BY Built_Year ORDER BY Ship_Count DESC LIMIT 1;
SELECT Built_Year, COUNT(*) AS Ship_Count FROM Ship GROUP BY Built_Year ORDER BY Ship_Count DESC LIMIT 1;
SELECT s.Name FROM Ship s JOIN captain c ON s.Ship_ID = c.Ship_ID GROUP BY s.Ship_ID, s.Name HAVING COUNT(c.Captain_ID) > 1;
SELECT s.Name FROM Ship s JOIN captain c ON s.Ship_ID = c.Ship_ID GROUP BY s.Ship_ID, s.Name HAVING COUNT(c.Captain_ID) > 1;
SELECT Ship.Name, Ship.Class FROM Ship LEFT JOIN captain ON Ship.Ship_ID = captain.Ship_ID WHERE captain.Captain_ID IS NULL;
SELECT Ship.Name, Ship.Class FROM Ship LEFT JOIN captain ON Ship.Ship_ID = captain.Ship_ID WHERE captain.Captain_ID IS NULL;
SELECT s.Name  FROM captain c  JOIN Ship s ON c.Ship_ID = s.Ship_ID  WHERE c.age = (SELECT MIN(age) FROM captain);
SELECT s.Name  FROM Ship s  JOIN captain c ON s.Ship_ID = c.Ship_ID  ORDER BY c.age ASC  LIMIT 1;
SELECT s.Name, s.Flag FROM Ship s LEFT JOIN captain c ON s.Ship_ID = c.Ship_ID AND c.Rank = 'Midshipman' WHERE c.Captain_ID IS NULL;
SELECT s.Name, s.Flag FROM Ship s LEFT JOIN captain c ON s.Ship_ID = c.Ship_ID AND c.Rank = 'Midshipman' WHERE c.Captain_ID IS NULL;
SELECT DISTINCT s.Name FROM Ship s JOIN captain c1 ON s.Ship_ID = c1.Ship_ID AND c1.Rank = 'Midshipman' JOIN captain c2 ON s.Ship_ID = c2.Ship_ID AND c2.Rank = 'Lieutenant';
SELECT DISTINCT s.Name FROM Ship s JOIN captain c ON s.Ship_ID = c.Ship_ID WHERE c.Rank IN ('Midshipman', 'Lieutenant') GROUP BY s.Ship_ID HAVING COUNT(DISTINCT c.Rank) = 2;
SELECT DISTINCT hc.Host_City FROM hosting_city hc WHERE hc.Year = (SELECT MAX(Year) FROM hosting_city);
SELECT DISTINCT c.City_ID FROM city c JOIN hosting_city h ON c.City_ID = h.Host_City WHERE h.Year = (SELECT MAX(Year) FROM hosting_city);
SELECT DISTINCT h.Match_ID FROM hosting_city h JOIN match m ON h.Match_ID = m.Match_ID WHERE m.Competition = '1994 FIFA World Cup qualification';
SELECT Match_ID FROM match WHERE Competition = '1994 FIFA World Cup qualification';
SELECT DISTINCT c.City FROM city c JOIN hosting_city h ON c.City_ID = h.Host_City WHERE h.Year > 2010;
SELECT DISTINCT c.City FROM city c JOIN hosting_city h ON c.City_ID = h.Host_City WHERE h.Year > 2010;
SELECT c.City, COUNT(hc.Match_ID) AS Event_Count FROM hosting_city hc JOIN city c ON hc.Host_City = c.City_ID GROUP BY c.City ORDER BY Event_Count DESC LIMIT 1;
SELECT c.City FROM hosting_city hc JOIN city c ON hc.Host_City = c.City_ID GROUP BY c.City ORDER BY COUNT(hc.Match_ID) DESC LIMIT 1;
SELECT m.Venue  FROM match m  JOIN hosting_city h ON m.Match_ID = h.Match_ID  JOIN city c ON h.Host_City = c.City  WHERE m.Competition = '1994 FIFA World Cup qualification'  AND c.City = 'Nanjing ( Jiangsu )';
SELECT m.Venue  FROM match m  JOIN hosting_city hc ON m.Match_ID = hc.Match_ID  JOIN city c ON hc.Host_City = c.City  WHERE m.Competition = '1994 FIFA World Cup qualification'  AND c.City = 'Nanjing ( Jiangsu )';
SELECT temperature.Jan  FROM temperature  JOIN city ON temperature.City_ID = city.City_ID  WHERE city.City = 'Shanghai';
SELECT temperature.Jan  FROM city  JOIN temperature ON city.City_ID = temperature.City_ID  WHERE city.City = 'Shanghai';
SELECT DISTINCT hc.Year FROM hosting_city hc JOIN city c ON hc.Host_City = c.City WHERE c.City = 'Taizhou ( Zhejiang )';
SELECT DISTINCT hc.Year FROM hosting_city hc JOIN city c ON hc.Host_City = c.City WHERE c.City = 'Taizhou ( Zhejiang )';
SELECT City, Regional_Population  FROM city  ORDER BY Regional_Population DESC  LIMIT 3;
SELECT City, Regional_Population  FROM city  ORDER BY Regional_Population DESC  LIMIT 3;
SELECT City, GDP  FROM city  ORDER BY GDP ASC  LIMIT 1;
SELECT City, GDP  FROM city  ORDER BY GDP ASC  LIMIT 1;
SELECT c.City FROM city c JOIN temperature t ON c.City_ID = t.City_ID ORDER BY t.Feb DESC LIMIT 1;
SELECT c.City FROM city c JOIN temperature t ON c.City_ID = t.City_ID ORDER BY t.Feb DESC LIMIT 1;
SELECT c.City FROM city c JOIN temperature t ON c.City_ID = t.City_ID WHERE t.Mar < t.Jul OR t.Mar > t.Oct;
SELECT c.City FROM city c JOIN temperature t ON c.City_ID = t.City_ID WHERE t.Mar < t.Jul OR t.Mar > t.Oct;
SELECT c.City FROM city c JOIN temperature t ON c.City_ID = t.City_ID JOIN hosting_city h ON c.City_ID = h.Host_City WHERE t.Mar < t.Jul;
SELECT c.City FROM city c JOIN temperature t ON c.City_ID = t.City_ID JOIN hosting_city h ON c.City_ID = h.Host_City WHERE t.Mar < t.Jul GROUP BY c.City
SELECT c.City FROM city c JOIN temperature t ON c.City_ID = t.City_ID WHERE t.Mar < t.Dec AND c.City_ID NOT IN (SELECT DISTINCT h.Host_City FROM hosting_city h);
SELECT c.City FROM city c JOIN temperature t ON c.City_ID = t.City_ID LEFT JOIN hosting_city h ON c.City_ID = h.Host_City WHERE t.Mar < t.Dec AND h.Host_City IS NULL;
SELECT DISTINCT c.City FROM city c JOIN temperature t ON c.City_ID = t.City_ID WHERE t.Feb > t.Jun    OR c.City_ID IN (SELECT DISTINCT h.Host_City FROM hosting_city h);
SELECT DISTINCT c.City FROM city c JOIN temperature t ON c.City_ID = t.City_ID LEFT JOIN hosting_city h ON c.City_ID = h.Host_City WHERE (t.Feb > t.Jun) OR (h.Host_City IS NOT NULL);
SELECT City FROM city WHERE Regional_Population > 10000000;
SELECT City FROM city WHERE Regional_Population > 10000000;
SELECT City  FROM city  WHERE Regional_Population > 8000000 OR Regional_Population < 5000000;
SELECT City  FROM city  WHERE Regional_Population > 8000000 OR Regional_Population < 5000000;
SELECT Competition, COUNT(*) AS Number_of_Matches FROM match GROUP BY Competition;
SELECT Competition, COUNT(Match_ID) AS Match_Count FROM match GROUP BY Competition;
SELECT Venue FROM match ORDER BY Date DESC;
SELECT Venue  FROM match  ORDER BY Date DESC;
SELECT GDP  FROM city  WHERE Regional_Population = (SELECT MAX(Regional_Population) FROM city);
SELECT GDP  FROM city  WHERE Regional_Population = (SELECT MAX(Regional_Population) FROM city);
SELECT c.GDP, c.Regional_Population FROM city c JOIN hosting_city h ON c.City_ID = h.Host_City GROUP BY c.City_ID HAVING COUNT(h.Match_ID) > 1;
SELECT c.GDP, c.Regional_Population FROM city c JOIN hosting_city h ON c.City_ID = h.Host_City GROUP BY c.City_ID HAVING COUNT(h.Match_ID) > 1;
SELECT individual_first_name, individual_middle_name, individual_last_name  FROM Individuals  ORDER BY individual_last_name;
SELECT individual_first_name, individual_middle_name, individual_last_name  FROM Individuals  ORDER BY individual_last_name;
SELECT DISTINCT form_type_code FROM Forms;
SELECT DISTINCT form_type_code FROM Forms;
SELECT f.form_name FROM Party_Forms pf JOIN Forms f ON pf.form_id = f.form_id GROUP BY f.form_name ORDER BY COUNT(pf.party_id) DESC LIMIT 1;
SELECT form_id, COUNT(*) AS form_count FROM Party_Forms GROUP BY form_id ORDER BY form_count DESC LIMIT 1;
SELECT payment_method_code, party_phone  FROM Parties  WHERE party_email = 'enrico09@example.com';
SELECT payment_method_code, party_phone  FROM Parties  WHERE party_email = 'enrico09@example.com';
SELECT p.party_email FROM Party_Forms pf JOIN Parties p ON pf.party_id = p.party_id WHERE pf.form_id = (     SELECT form_id     FROM Party_Forms     GROUP BY form_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT DISTINCT p.party_email FROM Parties p JOIN Party_Forms pf ON p.party_id = pf.party_id WHERE pf.form_id = (     SELECT form_id     FROM Party_Forms     GROUP BY form_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT organization_name  FROM Organizations  ORDER BY date_formed;
SELECT organization_name  FROM Organizations  ORDER BY date_formed ASC;
SELECT organization_name  FROM Organizations  ORDER BY date_formed DESC  LIMIT 1;
SELECT organization_name  FROM Organizations  ORDER BY date_formed DESC  LIMIT 1;
SELECT i.individual_last_name FROM Organizations o JOIN Organization_Contact_Individuals oci ON o.organization_id = oci.organization_id JOIN Individuals i ON oci.individual_id = i.individual_id WHERE o.organization_name = 'Labour Party' ORDER BY oci.date_contact_to DESC LIMIT 1;
SELECT i.individual_last_name FROM Individuals i JOIN Organization_Contact_Individuals oci ON i.individual_id = oci.individual_id JOIN Organizations org ON oci.organization_id = org.organization_id JOIN Parties p ON org.organization_id = p.party_id WHERE org.organization_name = 'Labour' ORDER BY oci.date_contact_to DESC LIMIT 1;
SELECT i.individual_last_name FROM Organizations o JOIN Organization_Contact_Individuals oci ON o.organization_id = oci.organization_id JOIN Individuals i ON oci.individual_id = i.individual_id WHERE o.uk_vat_number = (SELECT MAX(uk_vat_number) FROM Organizations) ORDER BY oci.date_contact_from LIMIT 1;
SELECT i.individual_last_name FROM Individuals i JOIN Organization_Contact_Individuals oci ON i.individual_id = oci.individual_id WHERE oci.organization_id = (     SELECT organization_id     FROM Organizations     ORDER BY uk_vat_number DESC     LIMIT 1 ) ORDER BY oci.date_contact_from LIMIT 1;
SELECT COUNT(*) AS total_services FROM Services;
SELECT COUNT(*) AS service_count FROM Services;
SELECT service_name  FROM Services  WHERE service_id NOT IN (SELECT service_id FROM Party_Services);
SELECT service_name  FROM Services  WHERE service_id NOT IN (SELECT service_id FROM Party_Services);
SELECT DISTINCT town_city, state_province_county FROM Addresses;
SELECT DISTINCT town_city, state_province_county FROM Addresses;
SELECT COUNT(DISTINCT town_city) AS city_count FROM Addresses WHERE state_province_county = 'Colorado';
SELECT COUNT(DISTINCT town_city) AS city_count FROM Addresses WHERE state_province_county = 'Colorado';
SELECT payment_method_code FROM Parties GROUP BY payment_method_code HAVING COUNT(party_id) > 3;
SELECT payment_method_code FROM Parties GROUP BY payment_method_code HAVING COUNT(party_id) > 3;
SELECT organization_name  FROM Organizations  WHERE organization_name LIKE '%Party%';
SELECT organization_name  FROM Organizations  WHERE organization_name LIKE '%Party%';
SELECT COUNT(DISTINCT payment_method_code) AS distinct_payment_methods FROM Parties;
SELECT COUNT(DISTINCT payment_method_code) AS different_payment_methods FROM Parties;
SELECT p.party_email FROM Party_Services ps JOIN Parties p ON ps.party_id = p.party_id GROUP BY p.party_id, p.party_email ORDER BY COUNT(ps.service_id) DESC LIMIT 1;
SELECT p.party_email FROM Parties p JOIN Party_Services ps ON p.party_id = ps.party_id GROUP BY p.party_email ORDER BY COUNT(ps.booking_id) DESC LIMIT 1;
SELECT DISTINCT state_province_county  FROM Addresses  WHERE line_1_number_building = '6862 Kaitlyn Knolls';
SELECT state_province_county  FROM Addresses  WHERE line_1_number_building = '6862 Kaitlyn Knolls';
SELECT o.organization_name FROM Organizations o JOIN Organization_Contact_Individuals oci ON o.organization_id = oci.organization_id GROUP BY o.organization_id, o.organization_name ORDER BY COUNT(oci.individual_id) DESC LIMIT 1;
SELECT o.organization_name FROM Organizations o JOIN Organization_Contact_Individuals oci ON o.organization_id = oci.organization_id GROUP BY o.organization_id, o.organization_name ORDER BY COUNT(oci.individual_id) DESC LIMIT 1;
SELECT DISTINCT i.individual_last_name FROM Individuals i JOIN Organization_Contact_Individuals oci ON i.individual_id = oci.individual_id;
SELECT DISTINCT i.individual_last_name FROM Individuals i JOIN Organization_Contact_Individuals oci ON i.individual_id = oci.individual_id;
SELECT COUNT(*) AS Number_of_Drivers FROM driver;
SELECT Name, Home_city, Age FROM driver;
SELECT Party, COUNT(Driver_ID) AS Number_of_Drivers FROM driver GROUP BY Party;
SELECT Name FROM driver ORDER BY Age DESC;
SELECT DISTINCT Home_city FROM driver;
SELECT Home_city, COUNT(*) AS Driver_Count FROM driver GROUP BY Home_city ORDER BY Driver_Count DESC LIMIT 1;
SELECT DISTINCT d.Party FROM driver d WHERE d.Home_city = 'Hartford' AND d.Age > 40;
SELECT Home_city FROM driver WHERE Age > 40 GROUP BY Home_city HAVING COUNT(Driver_ID) >= 2;
SELECT DISTINCT Home_city  FROM driver  WHERE Driver_ID NOT IN (SELECT Driver_ID FROM driver WHERE Age > 40);
SELECT Name  FROM driver  WHERE Driver_ID NOT IN (SELECT Driver_ID FROM school_bus);
SELECT Type FROM school GROUP BY Type HAVING COUNT(School_ID) = 2;
SELECT school.School, driver.Name FROM school_bus JOIN school ON school_bus.School_ID = school.School_ID JOIN driver ON school_bus.Driver_ID = driver.Driver_ID;
SELECT MAX(Years_Working) AS Max_Years, MIN(Years_Working) AS Min_Years, AVG(Years_Working) AS Avg_Years FROM school_bus;
SELECT s.School, s.Type FROM school s LEFT JOIN school_bus sb ON s.School_ID = sb.School_ID WHERE sb.School_ID IS NULL;
SELECT s.Type, COUNT(sb.School_ID) AS Number_of_Buses FROM school s LEFT JOIN school_bus sb ON s.School_ID = sb.School_ID GROUP BY s.Type;
SELECT COUNT(*)  FROM driver  WHERE Home_city = 'Hartford' OR Age < 40;
SELECT Name FROM driver WHERE Home_city = 'Hartford' AND Age < 40;
SELECT d.Name  FROM driver d  JOIN school_bus sb ON d.Driver_ID = sb.Driver_ID  ORDER BY sb.Years_Working DESC  LIMIT 1;
SELECT COUNT(*) FROM flight WHERE Velocity > 200;
SELECT Vehicle_Flight_number, Date, Pilot  FROM flight  ORDER BY Altitude;
SELECT id, Country, City, name FROM airport ORDER BY name;
SELECT MAX(Group_Equity_Shareholding) AS Max_Equity_Shareholding FROM operate_company;
SELECT Velocity FROM flight WHERE Pilot = 'Thompson';
SELECT DISTINCT oc.name, oc.Type FROM operate_company oc JOIN flight f ON oc.id = f.company_id;
SELECT name FROM airport WHERE Country <> 'Iceland';
SELECT DISTINCT oc.Type FROM operate_company oc JOIN flight f ON oc.id = f.company_id WHERE f.Velocity < 200;
SELECT company_id, COUNT(*) AS flight_count FROM flight GROUP BY company_id HAVING COUNT(*) > 1;
SELECT a.id, a.name, a.IATA FROM airport a JOIN flight f ON a.id = f.airport_id GROUP BY a.id, a.name, a.IATA ORDER BY COUNT(f.id) DESC LIMIT 1;
SELECT DISTINCT f.Pilot FROM flight f JOIN airport a ON f.airport_id = a.id WHERE a.Country = 'United States' OR a.name = 'Billund Airport';
SELECT Type, COUNT(*) AS count FROM operate_company GROUP BY Type ORDER BY count DESC LIMIT 1;
SELECT COUNT(*) AS airports_without_thompson FROM airport WHERE id NOT IN (     SELECT DISTINCT airport_id     FROM flight     WHERE Pilot = 'Thompson' );
SELECT DISTINCT f1.Pilot FROM flight f1 JOIN operate_company oc1 ON f1.company_id = oc1.id JOIN flight f2 ON f1.Pilot = f2.Pilot JOIN operate_company oc2 ON f2.company_id = oc2.id WHERE oc1.Principal_activities LIKE '%Cargo%' AND oc2.Principal_activities LIKE '%Catering%';
SELECT name FROM airport WHERE name LIKE '%international%';
SELECT a.name AS airport_name, COUNT(DISTINCT f.company_id) AS airline_companies_count FROM airport a JOIN flight f ON a.id = f.airport_id GROUP BY a.name;
SELECT Country, COUNT(*) AS airport_count FROM airport GROUP BY Country;
SELECT Country FROM airport GROUP BY Country HAVING COUNT(*) > 2;
SELECT Pilot, COUNT(*) AS flight_count FROM flight GROUP BY Pilot ORDER BY flight_count DESC LIMIT 1;
SELECT COUNT(*) AS Total_Accounts FROM Accounts;
SELECT COUNT(*) AS Number_of_Accounts FROM Accounts;
SELECT Account_ID, Account_Details FROM Accounts;
SELECT Account_ID, Account_Details FROM Accounts;
SELECT COUNT(*) AS Total_Statements FROM Statements;
SELECT COUNT(*) AS Statement_Count FROM Statements;
SELECT Statement_ID, Statement_Details FROM Statements;
SELECT Statement_ID, Statement_Details FROM Statements;
SELECT a.Statement_ID, s.Statement_Details, a.Account_Details FROM Accounts a JOIN Statements s ON a.Statement_ID = s.Statement_ID;
SELECT s.Statement_ID, s.Statement_Details, a.Account_Details FROM Statements s JOIN Accounts a ON s.Statement_ID = a.Statement_ID;
SELECT s.Statement_ID, COUNT(a.Account_ID) AS Number_of_Accounts FROM Statements s LEFT JOIN Accounts a ON s.Statement_ID = a.Statement_ID GROUP BY s.Statement_ID;
SELECT Statement_ID, COUNT(Account_ID) AS Number_of_Accounts FROM Accounts GROUP BY Statement_ID;
SELECT Statement_ID, Statement_Details FROM Accounts GROUP BY Statement_ID, Statement_Details ORDER BY COUNT(Account_ID) DESC LIMIT 1;
SELECT Statement_ID, Statement_Details FROM Accounts JOIN Statements ON Accounts.Statement_ID = Statements.Statement_ID GROUP BY Statement_ID, Statement_Details ORDER BY COUNT(Account_ID) DESC LIMIT 1;
SELECT COUNT(*) AS Number_of_Documents FROM Documents;
SELECT COUNT(*) AS Document_Count FROM Documents;
SELECT Document_Type_Code, Document_Name, Document_Description  FROM Documents  WHERE Document_Name IN ('Noel CV', 'King Book');
SELECT r.Document_Type_Code, r.Document_Type_Name, r.Document_Type_Description FROM Documents d JOIN Ref_Document_Types r ON d.Document_Type_Code = r.Document_Type_Code WHERE d.Document_Name IN ('Noel CV', 'King Book');
SELECT Document_ID, Document_Name FROM Documents;
SELECT Document_ID, Document_Name FROM Documents;
SELECT Document_ID, Document_Name  FROM Documents  WHERE Document_Type_Code = 'BK';
SELECT Document_ID, Document_Name  FROM Documents  WHERE Document_Type_Code = 'BK';
SELECT Project_ID, COUNT(*) AS Document_Count FROM Documents WHERE Document_Type_Code = 'BK' GROUP BY Project_ID;
SELECT Project_ID, COUNT(*) AS Document_Count FROM Documents WHERE Document_Type_Code = 'BK' GROUP BY Project_ID;
SELECT Document_Name, Document_Date  FROM Documents  WHERE Project_ID = (SELECT Project_ID FROM Projects WHERE Project_Details = 'Graph Database project');
SELECT Document_Name, Document_Date  FROM Documents  WHERE Project_ID IN (SELECT Project_ID FROM Projects WHERE Project_Details = 'Graph Database project');
SELECT Project_ID, COUNT(Document_ID) AS Number_of_Documents FROM Documents GROUP BY Project_ID;
SELECT Project_ID, COUNT(Document_ID) AS Document_Count FROM Documents GROUP BY Project_ID;
SELECT Project_ID FROM Documents GROUP BY Project_ID ORDER BY COUNT(Document_ID) ASC LIMIT 1;
SELECT Project_ID FROM Documents GROUP BY Project_ID ORDER BY COUNT(Document_ID) ASC LIMIT 1;
SELECT Project_ID FROM Documents GROUP BY Project_ID HAVING COUNT(Document_ID) >= 2;
SELECT Project_ID FROM Documents GROUP BY Project_ID HAVING COUNT(Document_ID) >= 2;
SELECT Document_Type_Code, COUNT(*) AS Number_of_Documents FROM Documents GROUP BY Document_Type_Code;
SELECT r.Document_Type_Name, COUNT(d.Document_ID) AS Document_Count FROM Ref_Document_Types r LEFT JOIN Documents d ON r.Document_Type_Code = d.Document_Type_Code GROUP BY r.Document_Type_Name;
SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code HAVING COUNT(Document_ID) < 3;
SELECT r.Document_Type_Code FROM Ref_Document_Types r LEFT JOIN Documents d ON r.Document_Type_Code = d.Document_Type_Code GROUP BY r.Document_Type_Code HAVING COUNT(d.Document_ID) < 3;
SELECT s.Statement_Details, d.Document_Name FROM Statements s JOIN Accounts a ON s.Statement_ID = a.Statement_ID JOIN Documents d ON a.Account_ID = d.Document_ID WHERE s.Statement_Details = 'Private Project';
SELECT s.Statement_ID, s.Statement_Details, d.Document_Name FROM Statements s JOIN Accounts a ON s.Statement_ID = a.Statement_ID JOIN Documents d ON a.Account_ID = d.Document_ID WHERE s.Statement_Details = 'Private Project';
SELECT Document_Type_Code, Document_Type_Name, Document_Type_Description  FROM Ref_Document_Types;
SELECT Document_Type_Code, Document_Type_Name, Document_Type_Description FROM Ref_Document_Types;
SELECT Document_Type_Description  FROM Ref_Document_Types  WHERE Document_Type_Name = 'Film';
SELECT Document_Type_Description  FROM Ref_Document_Types  WHERE Document_Type_Name = 'Film';
SELECT      rdt.Document_Type_Name,      rdt.Document_Type_Description,      d.Document_Date  FROM      Documents d  JOIN      Ref_Document_Types rdt ON d.Document_Type_Code = rdt.Document_Type_Code;
SELECT      rdt.Document_Type_Name,      rdt.Document_Type_Description,      d.Document_Date  FROM      Documents d  JOIN      Ref_Document_Types rdt ON d.Document_Type_Code = rdt.Document_Type_Code;
SELECT COUNT(*) AS Number_of_Projects FROM Projects;
SELECT COUNT(*) AS NumberOfProjects FROM Projects;
SELECT Project_ID, Project_Details FROM Projects;
SELECT Project_ID, Project_Details FROM Projects;
SELECT Project_ID, Project_Details FROM Projects WHERE Project_ID IN (     SELECT Project_ID     FROM Documents     GROUP BY Project_ID     HAVING COUNT(Document_ID) >= 2 );
SELECT Project_ID, Project_Details FROM Projects WHERE Project_ID IN (     SELECT Project_ID     FROM Documents     GROUP BY Project_ID     HAVING COUNT(Document_ID) > 2 );
SELECT p.Project_Details FROM Projects p JOIN Documents d ON p.Project_ID = d.Project_ID WHERE d.Document_Name = 'King Book';
SELECT p.Project_ID, p.Project_Details, d.Document_Name, d.Document_Description FROM Projects p JOIN Documents d ON p.Project_ID = d.Project_ID WHERE d.Document_Name = 'King Book';
SELECT COUNT(*) AS Budget_Type_Count FROM Ref_Budget_Codes;
SELECT COUNT(*) FROM Ref_Budget_Codes;
SELECT Budget_Type_Code, Budget_Type_Description FROM Ref_Budget_Codes;
SELECT Budget_Type_Code, Budget_Type_Description FROM Ref_Budget_Codes;
SELECT Budget_Type_Description  FROM Ref_Budget_Codes  WHERE Budget_Type_Code = 'ORG';
SELECT Budget_Type_Description  FROM Ref_Budget_Codes  WHERE Budget_Type_Code = 'ORG';
SELECT COUNT(DISTINCT Document_ID) AS Document_Count FROM Documents_with_Expenses;
SELECT COUNT(*) AS Number_of_Documents_With_Expenses FROM Documents_with_Expenses;
SELECT Document_ID  FROM Documents_with_Expenses  WHERE Budget_Type_Code = 'SF';
SELECT Document_ID  FROM Documents_with_Expenses  WHERE Budget_Type_Code = 'SF';
SELECT dw.Budget_Type_Code, bc.Budget_Type_Description, dw.Document_ID FROM Documents_with_Expenses dw JOIN Ref_Budget_Codes bc ON dw.Budget_Type_Code = bc.Budget_Type_Code;
SELECT dw.Budget_Type_Code, bc.Budget_Type_Description, dw.Document_ID FROM Documents_with_Expenses dw JOIN Ref_Budget_Codes bc ON dw.Budget_Type_Code = bc.Budget_Type_Code;
SELECT d.Document_ID FROM Documents d JOIN Documents_with_Expenses de ON d.Document_ID = de.Document_ID JOIN Ref_Budget_Codes b ON de.Budget_Type_Code = b.Budget_Type_Code WHERE b.Budget_Type_Description = 'Government';
SELECT d.Document_ID FROM Documents d JOIN Documents_with_Expenses dwe ON d.Document_ID = dwe.Document_ID JOIN Ref_Budget_Codes rbc ON dwe.Budget_Type_Code = rbc.Budget_Type_Code WHERE rbc.Budget_Type_Description = 'Government';
SELECT dw.Budget_Type_Code, COUNT(d.Document_ID) AS Number_of_Documents FROM Documents_with_Expenses dw LEFT JOIN Documents d ON dw.Document_ID = d.Document_ID GROUP BY dw.Budget_Type_Code;
SELECT dw.Budget_Type_Code, COUNT(d.Document_ID) AS Document_Count FROM Documents_with_Expenses dw LEFT JOIN Documents d ON dw.Document_ID = d.Document_ID GROUP BY dw.Budget_Type_Code;
SELECT Budget_Type_Code FROM Documents_with_Expenses GROUP BY Budget_Type_Code ORDER BY COUNT(Document_ID) DESC LIMIT 1;
SELECT Budget_Type_Code FROM Documents_with_Expenses GROUP BY Budget_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Document_ID  FROM Documents  WHERE Document_ID NOT IN (SELECT Document_ID FROM Documents_with_Expenses);
SELECT Document_ID  FROM Documents  WHERE Document_ID NOT IN (SELECT Document_ID FROM Documents_with_Expenses);
SELECT d.Document_ID FROM Documents d JOIN Ref_Document_Types rdt ON d.Document_Type_Code = rdt.Document_Type_Code LEFT JOIN Documents_with_Expenses dwe ON d.Document_ID = dwe.Document_ID WHERE rdt.Document_Type_Name = 'CV' AND dwe.Budget_Type_Code IS NULL;
SELECT d.Document_ID FROM Documents d LEFT JOIN Documents_with_Expenses de ON d.Document_ID = de.Document_ID WHERE d.Document_Type_Code = 'CV' AND de.Document_ID IS NULL;
SELECT d.Document_ID FROM Documents d JOIN Documents_with_Expenses de ON d.Document_ID = de.Document_ID WHERE d.Document_Name LIKE '%s%';
SELECT Document_ID  FROM Documents_with_Expenses  WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name LIKE '%s%');
SELECT COUNT(*) AS Documents_Without_Expenses FROM Documents WHERE Document_ID NOT IN (SELECT Document_ID FROM Documents_with_Expenses);
SELECT COUNT(*) AS Document_Count FROM Documents WHERE Document_ID NOT IN (SELECT Document_ID FROM Documents_with_Expenses);
SELECT DISTINCT d.Document_Date FROM Documents d JOIN Documents_with_Expenses dwe ON d.Document_ID = dwe.Document_ID WHERE dwe.Budget_Type_Code IN ('GV', 'SF') GROUP BY d.Document_Date HAVING COUNT(DISTINCT dwe.Budget_Type_Code) = 2;
SELECT DISTINCT d.Document_Date FROM Documents d JOIN Documents_with_Expenses dwe ON d.Document_ID = dwe.Document_ID WHERE dwe.Budget_Type_Code IN ('GV', 'SF') GROUP BY d.Document_Date HAVING COUNT(DISTINCT dwe.Budget_Type_Code) = 2;
SELECT Account_Details  FROM Accounts  WHERE Account_Details LIKE '%5%'  ORDER BY Account_ID DESC  LIMIT 1;
SELECT Account_Details  FROM Accounts  WHERE Account_Details = (SELECT MAX(Account_Details) FROM Accounts)     OR Account_Details LIKE '%5%';
SELECT COUNT(*) FROM Scientists;
SELECT COUNT(*) FROM Scientists;
SELECT SUM(Hours) AS TotalHours FROM Projects;
SELECT SUM(Hours) AS TotalHours FROM Projects;
SELECT COUNT(DISTINCT Scientist) AS DifferentScientists FROM AssignedTo;
SELECT COUNT(DISTINCT Scientist) AS NumberOfScientists FROM AssignedTo;
SELECT COUNT(DISTINCT Project) AS DistinctProjects FROM AssignedTo;
SELECT COUNT(DISTINCT Code) AS NumberOfProjects FROM Projects;
SELECT AVG(Hours) AS AverageHours FROM Projects;
SELECT AVG(Hours) AS AverageHours FROM Projects;
SELECT Name FROM Projects ORDER BY Hours DESC LIMIT 1;
SELECT Name FROM Projects ORDER BY Hours DESC LIMIT 1;
SELECT Name  FROM Projects  WHERE Hours > (SELECT AVG(Hours) FROM Projects);
SELECT Name  FROM Projects  WHERE Hours > (SELECT AVG(Hours) FROM Projects);
SELECT p.Name, p.Hours FROM Projects p JOIN AssignedTo a ON p.Code = a.Project GROUP BY p.Code, p.Name, p.Hours ORDER BY COUNT(a.Scientist) DESC LIMIT 1;
SELECT p.Name, p.Hours FROM Projects p JOIN AssignedTo a ON p.Code = a.Project GROUP BY p.Code, p.Name, p.Hours ORDER BY COUNT(a.Scientist) DESC LIMIT 1;
SELECT p.Name FROM Scientists s JOIN AssignedTo a ON s.SSN = a.Scientist JOIN Projects p ON a.Project = p.Code WHERE s.Name LIKE '%Smith%';
SELECT p.Name  FROM Projects p  JOIN AssignedTo a ON p.Code = a.Project  JOIN Scientists s ON a.Scientist = s.SSN  WHERE s.Name LIKE '%Smith%';
SELECT SUM(p.Hours) AS TotalHours FROM Scientists s JOIN AssignedTo a ON s.SSN = a.Scientist JOIN Projects p ON a.Project = p.Code WHERE s.Name IN ('Michael Rogers', 'Carol Smith');
SELECT SUM(p.Hours)  FROM Projects p  JOIN AssignedTo a ON p.Code = a.Project  JOIN Scientists s ON a.Scientist = s.SSN  WHERE s.Name IN ('Michael Rogers', 'Carol Smith');
SELECT Name FROM Projects WHERE Hours BETWEEN 100 AND 300;
SELECT Name FROM Projects WHERE Hours BETWEEN 100 AND 300;
SELECT s.Name FROM Scientists s JOIN AssignedTo a1 ON s.SSN = a1.Scientist JOIN Projects p1 ON a1.Project = p1.Code JOIN AssignedTo a2 ON s.SSN = a2.Scientist JOIN Projects p2 ON a2.Project = p2.Code WHERE p1.Name = 'Matter of Time' AND p2.Name = 'A Puzzling Parallax';
SELECT DISTINCT s.Name FROM Scientists s JOIN AssignedTo a ON s.SSN = a.Scientist JOIN Projects p ON a.Project = p.Code WHERE p.Name IN ('Matter of Time', 'A Puzzling Pattern') GROUP BY s.Name HAVING COUNT(DISTINCT p.Name) = 2;
SELECT Name FROM Scientists ORDER BY Name;
SELECT Name FROM Scientists ORDER BY Name;
SELECT p.Name AS ProjectName, COUNT(at.Scientist) AS NumberOfScientists FROM Projects p LEFT JOIN AssignedTo at ON p.Code = at.Project GROUP BY p.Name;
SELECT p.Name, COUNT(at.Scientist) AS ScientistCount FROM Projects p LEFT JOIN AssignedTo at ON p.Code = at.Project GROUP BY p.Name;
SELECT COUNT(DISTINCT a.Scientist) AS NumberOfScientists FROM AssignedTo a JOIN Projects p ON a.Project = p.Code WHERE p.Hours > 300;
SELECT p.Name, COUNT(at.Scientist) AS ScientistCount FROM Projects p LEFT JOIN AssignedTo at ON p.Code = at.Project WHERE p.Hours > 300 GROUP BY p.Name;
SELECT s.Name, COUNT(at.Project) AS NumberOfProjects FROM Scientists s LEFT JOIN AssignedTo at ON s.SSN = at.Scientist GROUP BY s.Name;
SELECT s.Name, COUNT(at.Project) AS ProjectCount FROM Scientists s LEFT JOIN AssignedTo at ON s.SSN = at.Scientist GROUP BY s.Name;
SELECT s.SSN, s.Name FROM Scientists s JOIN AssignedTo a ON s.SSN = a.Scientist JOIN Projects p ON a.Project = p.Code WHERE p.Hours = (SELECT MAX(Hours) FROM Projects);
SELECT s.SSN, s.Name FROM Scientists s JOIN AssignedTo a ON s.SSN = a.Scientist JOIN Projects p ON a.Project = p.Code WHERE p.Hours = (SELECT MAX(Hours) FROM Projects);
SELECT DISTINCT s.Name FROM Scientists s JOIN AssignedTo a ON s.SSN = a.Scientist;
SELECT DISTINCT s.Name FROM Scientists s JOIN AssignedTo a ON s.SSN = a.Scientist;
SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo);
SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo);
SELECT Name  FROM Scientists  WHERE SSN NOT IN (SELECT Scientist FROM AssignedTo);
SELECT Name  FROM Scientists  WHERE SSN NOT IN (SELECT Scientist FROM AssignedTo);
SELECT COUNT(*)  FROM Scientists  WHERE SSN NOT IN (SELECT Scientist FROM AssignedTo);
SELECT COUNT(*)  FROM Scientists  WHERE SSN NOT IN (SELECT Scientist FROM AssignedTo);
SELECT s.Name FROM Scientists s WHERE s.SSN NOT IN (     SELECT a.Scientist     FROM AssignedTo a     JOIN Projects p ON a.Project = p.Code     WHERE p.Hours = (SELECT MAX(Hours) FROM Projects) );
SELECT s.Name FROM Scientists s WHERE s.SSN NOT IN (     SELECT a.Scientist     FROM AssignedTo a     JOIN Projects p ON a.Project = p.Code     WHERE p.Hours = (SELECT MAX(Hours) FROM Projects) );
SELECT s.Name AS ScientistName, p.Name AS ProjectName, p.Hours FROM Scientists s JOIN AssignedTo a ON s.SSN = a.Scientist JOIN Projects p ON a.Project = p.Code ORDER BY p.Name, s.Name;
SELECT s.Name AS ScientistName, p.Name AS ProjectName, p.Hours FROM Scientists s JOIN AssignedTo a ON s.SSN = a.Scientist JOIN Projects p ON a.Project = p.Code ORDER BY p.Name, s.Name;
SELECT p.Name AS ProjectName, s.Name AS ScientistName FROM Projects p JOIN AssignedTo a ON p.Code = a.Project JOIN Scientists s ON a.Scientist = s.SSN WHERE p.Hours = (SELECT MIN(Hours) FROM Projects);
SELECT p.Name AS ProjectName, s.Name AS ScientistName FROM Projects p JOIN AssignedTo a ON p.Code = a.Project JOIN Scientists s ON a.Scientist = s.SSN WHERE p.Hours = (SELECT MIN(Hours) FROM Projects);
SELECT Name FROM wine ORDER BY Score DESC LIMIT 1;
SELECT Name FROM wine ORDER BY Score DESC LIMIT 1;
SELECT Winery  FROM wine  WHERE Score = (SELECT MAX(Score) FROM wine);
SELECT Winery  FROM wine  WHERE Score = (SELECT MAX(Score) FROM wine);
SELECT Name FROM wine WHERE Year = 2008;
SELECT Name FROM wine WHERE Year = 2008;
SELECT w.Grape, w.Appelation  FROM wine w;
SELECT w.Name, g.Grape, a.Appelation FROM wine w JOIN grapes g ON w.Grape = g.Grape JOIN appellations a ON w.Appelation = a.Appelation;
SELECT Name, Score FROM wine;
SELECT Name, Score FROM wine;
SELECT Area, County FROM appellations;
SELECT Area, County FROM appellations;
SELECT Price FROM wine WHERE Year < 2010;
SELECT Price FROM wine WHERE Year < 2010;
SELECT DISTINCT Name FROM wine WHERE Score > 90;
SELECT Name FROM wine WHERE Score > 90;
SELECT DISTINCT w.Name FROM wine w JOIN grapes g ON w.Grape = g.Grape WHERE g.Color = 'Red';
SELECT w.Name  FROM wine w  JOIN grapes g ON w.Grape = g.Grape  WHERE g.Color = 'Red';
SELECT DISTINCT w.Name FROM wine w JOIN appellations a ON w.Appelation = a.Appelation WHERE a.Area = 'North Coast';
SELECT DISTINCT w.Name FROM wine w JOIN appellations a ON w.Appelation = a.Appelation WHERE a.Area = 'North Coast';
SELECT COUNT(*) FROM wine WHERE Winery = 'Robert Biale';
SELECT COUNT(*) FROM wine WHERE Winery = 'Robert Biale';
SELECT COUNT(*) FROM appellations WHERE County = 'Napa';
SELECT COUNT(*) FROM appellations WHERE County = 'Napa';
SELECT AVG(Price) AS Average_Price FROM wine WHERE Appelation IN (     SELECT Appelation     FROM appellations     WHERE County = 'Sonoma' );
SELECT AVG(Price) AS Average_Price FROM wine WHERE Appelation IN (     SELECT Appelation     FROM appellations     WHERE County = 'Sonoma' );
SELECT w.Name, w.Score FROM wine w JOIN grapes g ON w.Grape = g.Grape WHERE g.Color = 'White';
SELECT w.Name, w.Score  FROM wine w  JOIN grapes g ON w.Grape = g.Grape  WHERE g.Color = 'White';
SELECT MAX(Price)  FROM wine  WHERE Appelation IN (SELECT Appelation FROM appellations WHERE Area = 'Central Coast')  AND Year < 2005;
SELECT MAX(Price)  FROM wine  WHERE Appelation IN (SELECT Appelation FROM appellations WHERE Area = 'Central Coast')  AND Year < 2005;
SELECT DISTINCT g.Grape FROM grapes g JOIN wine w ON g.Grape = w.Grape WHERE g.Color = 'White' AND w.Score > 90;
SELECT DISTINCT g.Grape  FROM grapes g  JOIN wine w ON g.Grape = w.Grape  WHERE g.Color = 'White' AND w.Score > 90;
SELECT w.* FROM wine w JOIN grapes g ON w.Grape = g.Grape WHERE w.Price > 50 AND g.Color = 'Red';
SELECT w.Name  FROM wine w  JOIN grapes g ON w.Grape = g.Grape  WHERE g.Color = 'Red' AND w.Price > 50;
SELECT *  FROM wine  WHERE Price < 50  AND Appelation IN (SELECT Appelation FROM appellations WHERE County = 'Monterey');
SELECT Name  FROM wine  WHERE Price < 50 AND Appelation IN (SELECT Appelation FROM appellations WHERE County = 'Monterey');
SELECT Grape, COUNT(*) AS NumberOfWines FROM wine GROUP BY Grape;
SELECT Grape, COUNT(*) AS WineCount FROM wine GROUP BY Grape;
SELECT Year, AVG(Price) AS Average_Price FROM wine GROUP BY Year;
SELECT AVG(Price) AS Average_Price, Year FROM wine GROUP BY Year;
SELECT DISTINCT Name  FROM wine  WHERE Price > (SELECT MIN(Price) FROM wine WHERE Winery = 'John Anthony');
SELECT DISTINCT Name  FROM wine  WHERE Price > (SELECT MAX(Price) FROM wine WHERE Winery = 'John Anthony');
SELECT DISTINCT Name FROM wine ORDER BY Name;
SELECT Name FROM wine ORDER BY Name ASC;
SELECT DISTINCT Name FROM wine ORDER BY Price;
SELECT Name FROM wine ORDER BY Price ASC;
SELECT a.Area FROM wine w JOIN appellations a ON w.Appelation = a.Appelation WHERE w.Year < 2010 GROUP BY a.Area ORDER BY COUNT(w.No) DESC LIMIT 1;
SELECT a.Area FROM wine w JOIN appellations a ON w.Appelation = a.Appelation WHERE w.Year < 2010 GROUP BY a.Area ORDER BY COUNT(w.No) DESC LIMIT 1;
SELECT g.Color FROM grapes g JOIN wine w ON g.Grape = w.Grape GROUP BY g.Color ORDER BY AVG(w.Price) DESC LIMIT 1;
SELECT g.Color FROM grapes g JOIN wine w ON g.Grape = w.Grape GROUP BY g.Color ORDER BY AVG(w.Price) DESC LIMIT 1;
SELECT DISTINCT Name FROM wine WHERE Year < 2000 OR Year > 2010;
SELECT DISTINCT Name  FROM wine  WHERE Year < 2000 OR Year > 2010;
SELECT DISTINCT Winery  FROM wine  WHERE Price BETWEEN 50 AND 100;
SELECT DISTINCT Winery  FROM wine  WHERE Price BETWEEN 50 AND 100;
SELECT AVG(Price) AS Average_Price, AVG(Cases) AS Average_Cases FROM wine WHERE Year = 2009 AND Grape = 'Zinfandel';
SELECT AVG(Price) AS Average_Price, AVG(Cases) AS Average_Cases FROM wine WHERE Grape = 'Zinfandel' AND Year = 2009;
SELECT MAX(Price) AS MaxPrice, MAX(Score) AS MaxScore FROM wine WHERE Appelation = 'St. Helena';
SELECT MAX(Price) AS MaxPrice, MAX(Score) AS MaxScore  FROM wine  WHERE Appelation = 'St. Helena';
SELECT Year, MAX(Price) AS MaxPrice, MAX(Score) AS MaxScore FROM wine GROUP BY Year;
SELECT Year, MAX(Price) AS MaxPrice, MAX(Score) AS MaxScore FROM wine GROUP BY Year;
SELECT Appelation, AVG(Price) AS Average_Price, AVG(Score) AS Average_Score FROM wine GROUP BY Appelation;
SELECT Appelation, AVG(Price) AS Average_Price, AVG(Score) AS Average_Score FROM wine GROUP BY Appelation;
SELECT Winery FROM wine GROUP BY Winery HAVING COUNT(*) >= 4;
SELECT Winery FROM wine GROUP BY Winery HAVING COUNT(*) >= 4;
SELECT DISTINCT a.County FROM appellations a JOIN wine w ON a.Appelation = w.Appelation GROUP BY a.County HAVING COUNT(w.No) <= 3;
SELECT DISTINCT a.County, a.State FROM appellations a JOIN wine w ON a.Appelation = w.Appelation GROUP BY a.County, a.State HAVING COUNT(w.No) <= 3;
SELECT Name  FROM wine  WHERE Year < (SELECT MIN(Year) FROM wine WHERE Winery = 'Brander');
SELECT Name  FROM wine  WHERE Year < (SELECT MIN(Year) FROM wine WHERE Winery = 'Brander');
SELECT Name  FROM wine  WHERE Price > (SELECT MAX(Price) FROM wine WHERE Year = 2006);
SELECT Name  FROM wine  WHERE Price > ALL (SELECT Price FROM wine WHERE Year = 2006);
SELECT Winery, COUNT(*) AS WineCount FROM wine WHERE Grape IN (SELECT Grape FROM grapes WHERE Color = 'White') GROUP BY Winery ORDER BY WineCount DESC LIMIT 3;
SELECT Winery, COUNT(*) AS WineCount FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE grapes.Color = 'White' GROUP BY Winery ORDER BY WineCount DESC LIMIT 3;
SELECT Grape, Winery, Year  FROM wine  WHERE Price > 100  ORDER BY Year;
SELECT wine.Grape, wine.Winery, wine.Year  FROM wine  WHERE wine.Price > 100  ORDER BY wine.Year;
SELECT g.Grape, a.Appelation, w.Name FROM wine w JOIN grapes g ON w.Grape = g.Grape JOIN appellations a ON w.Appelation = a.Appelation WHERE w.Score > 93 ORDER BY w.Name;
SELECT g.Grape, a.Appelation, w.Name  FROM wine w  JOIN grapes g ON w.Grape = g.Grape  JOIN appellations a ON w.Appelation = a.Appelation  WHERE w.Score > 93  ORDER BY w.Name;
SELECT DISTINCT a.Appelation FROM appellations a JOIN wine w ON a.Appelation = w.Appelation WHERE w.Year > 2008 AND a.Area <> 'Central Coast';
SELECT DISTINCT a.Appelation FROM wine w JOIN appellations a ON w.Appelation = a.Appelation WHERE w.Year > 2008 AND a.Area <> 'Central Coast';
SELECT AVG(Price) AS AveragePrice FROM wine WHERE Appelation NOT IN (     SELECT Appelation     FROM appellations     WHERE County = 'Sonoma' );
SELECT AVG(Price) AS Average_Price FROM wine WHERE Appelation NOT IN (     SELECT Appelation     FROM appellations     WHERE County = 'Sonoma' );
SELECT a.County FROM wine w JOIN appellations a ON w.Appelation = a.Appelation WHERE w.Score > 90 GROUP BY a.County ORDER BY COUNT(w.No) DESC LIMIT 1;
SELECT a.County FROM wine w JOIN appellations a ON w.Appelation = a.Appelation WHERE w.Score > 90 GROUP BY a.County ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM station;
SELECT Name, Location, Number_of_Platforms FROM station;
SELECT DISTINCT Location FROM station;
SELECT Name, Total_Passengers  FROM station  WHERE Location NOT LIKE '%London%';
SELECT Name, Main_Services  FROM station  ORDER BY Total_Passengers DESC  LIMIT 3;
SELECT AVG(Total_Passengers) AS Average_Passengers, MAX(Total_Passengers) AS Max_Passengers FROM station WHERE Location IN ('London', 'Glasgow');
SELECT Location, SUM(Number_of_Platforms) AS Total_Platforms, SUM(Total_Passengers) AS Total_Passengers FROM station GROUP BY Location;
SELECT DISTINCT Location FROM station WHERE Number_of_Platforms >= 15 AND Total_Passengers > 25;
SELECT DISTINCT Location  FROM station  WHERE Number_of_Platforms < 15;
SELECT Location FROM station GROUP BY Location ORDER BY COUNT(Station_ID) DESC LIMIT 1;
SELECT Name, Time, Service FROM train;
SELECT COUNT(*) AS Number_of_Trains FROM train;
SELECT Name, Service FROM train ORDER BY Time;
SELECT s.Name AS Station_Name, COUNT(ts.Train_ID) AS Number_of_Trains FROM station s LEFT JOIN train_station ts ON s.Station_ID = ts.Station_ID GROUP BY s.Name;
SELECT train.Name AS Train_Name, station.Name AS Station_Name FROM train JOIN train_station ON train.Train_ID = train_station.Train_ID JOIN station ON train_station.Station_ID = station.Station_ID;
SELECT t.Name, t.Time FROM train t JOIN train_station ts ON t.Train_ID = ts.Train_ID JOIN station s ON ts.Station_ID = s.Station_ID WHERE s.Location = 'London' ORDER BY t.Time DESC;
SELECT s.Name FROM station s JOIN train_station ts ON s.Station_ID = ts.Station_ID GROUP BY s.Name ORDER BY COUNT(ts.Train_ID) DESC LIMIT 1;
SELECT s.Name FROM station s JOIN train_station ts ON s.Station_ID = ts.Station_ID GROUP BY s.Name HAVING COUNT(ts.Train_ID) >= 2;
SELECT Location FROM station GROUP BY Location HAVING COUNT(Station_ID) = 1;
SELECT Name  FROM station  WHERE Station_ID NOT IN (SELECT Station_ID FROM train_station);
SELECT s.Name FROM station s JOIN train_station ts ON s.Station_ID = ts.Station_ID JOIN train t ON ts.Train_ID = t.Train_ID WHERE t.Name IN ('Ananthapuri Express', 'Guruvayur Express') GROUP BY s.Name HAVING COUNT(DISTINCT t.Name) = 2;
SELECT DISTINCT t.Name FROM train t WHERE t.Train_ID NOT IN (     SELECT ts.Train_ID     FROM train_station ts     JOIN station s ON ts.Station_ID = s.Station_ID     WHERE s.Location = 'London' );
SELECT Name, Location  FROM station  ORDER BY Annual_entry_exit + Annual_interchanges DESC;
SELECT vehicle_id FROM Vehicles;
SELECT vehicle_id FROM Vehicles;
SELECT COUNT(*) AS total_vehicles FROM Vehicles;
SELECT COUNT(*) AS total_vehicles FROM Vehicles;
SELECT * FROM Vehicles WHERE vehicle_id = 1;
SELECT * FROM Vehicles WHERE vehicle_id = 1;
SELECT first_name, middle_name, last_name FROM Staff;
SELECT first_name, middle_name, last_name FROM Staff;
SELECT date_of_birth  FROM Staff  WHERE first_name = 'Janessa' AND last_name = 'Sawayn';
SELECT date_of_birth FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';
SELECT date_joined_staff  FROM Staff  WHERE first_name = 'Janessa' AND last_name = 'Sawayn';
SELECT date_joined_staff  FROM Staff  WHERE first_name = 'Janessa' AND last_name = 'Sawayn';
SELECT date_left_staff  FROM Staff  WHERE first_name = 'Janessa' AND last_name = 'Sawayn';
SELECT date_left_staff  FROM Staff  WHERE first_name = 'Janessa' AND last_name = 'Sawayn';
SELECT COUNT(*) FROM Staff WHERE first_name = 'Ludie';
SELECT COUNT(*) FROM Staff WHERE first_name = 'Ludie';
SELECT nickname  FROM Staff  WHERE first_name = 'Janessa' AND last_name = 'Sawayn';
SELECT nickname FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';
SELECT COUNT(*) AS total_staff FROM Staff;
SELECT COUNT(*) AS employee_count FROM Staff;
SELECT a.city  FROM Staff s  JOIN Addresses a ON s.staff_address_id = a.address_id  WHERE s.first_name = 'Janessa' AND s.last_name = 'Sawayn';
SELECT a.city  FROM Addresses a  JOIN Customers c ON a.address_id = c.customer_address_id  WHERE c.first_name = 'Janessa' AND c.last_name = 'Sawayn';
SELECT a.country, a.state_province_county FROM Staff s JOIN Addresses a ON s.staff_address_id = a.address_id WHERE s.first_name = 'Janessa' AND s.last_name = 'Sawayn';
SELECT a.country, a.state_province_county FROM Addresses a JOIN Customers c ON a.address_id = c.customer_address_id WHERE c.first_name = 'Janessa' AND c.last_name = 'Sawayn';
SELECT SUM(lesson_time) AS total_lesson_time FROM Lessons JOIN Customers ON Lessons.customer_id = Customers.customer_id WHERE Customers.first_name = 'Rylan' AND Customers.last_name = 'Goodwin';
SELECT SUM(lesson_time) AS total_lesson_time FROM Lessons JOIN Customers ON Lessons.customer_id = Customers.customer_id WHERE Customers.first_name = 'Rylan' AND Customers.last_name = 'Goodwin';
SELECT a.zip_postcode FROM Staff s JOIN Addresses a ON s.staff_address_id = a.address_id WHERE s.first_name = 'Janessa' AND s.last_name = 'Sawayn';
SELECT a.zip_postcode  FROM Staff s  JOIN Addresses a ON s.staff_address_id = a.address_id  WHERE s.first_name = 'Janessa' AND s.last_name = 'Sawayn';
SELECT COUNT(*)  FROM Staff s  JOIN Addresses a ON s.staff_address_id = a.address_id  WHERE a.state_province_county = 'Georgia';
SELECT COUNT(*)  FROM Staff s  JOIN Addresses a ON s.staff_address_id = a.address_id  WHERE a.state_province_county = 'Georgia';
SELECT first_name, last_name  FROM Staff  JOIN Addresses ON Staff.staff_address_id = Addresses.address_id  WHERE Addresses.city = 'Damianfort';
SELECT s.first_name, s.last_name FROM Staff s JOIN Addresses a ON s.staff_address_id = a.address_id WHERE a.city = 'Damianfort';
SELECT a.city, COUNT(s.staff_id) AS number_of_staffs FROM Staff s JOIN Addresses a ON s.staff_address_id = a.address_id GROUP BY a.city ORDER BY number_of_staffs DESC LIMIT 1;
SELECT city, COUNT(*) AS employee_count FROM Staff JOIN Addresses ON Staff.staff_address_id = Addresses.address_id GROUP BY city ORDER BY employee_count DESC LIMIT 1;
SELECT state_province_county FROM Staff s JOIN Addresses a ON s.staff_address_id = a.address_id GROUP BY state_province_county HAVING COUNT(s.staff_id) BETWEEN 2 AND 4;
SELECT state_province_county FROM Staff s JOIN Addresses a ON s.staff_address_id = a.address_id GROUP BY state_province_county HAVING COUNT(s.staff_id) BETWEEN 2 AND 4;
SELECT first_name, last_name FROM Customers;
SELECT first_name, last_name FROM Customers;
SELECT email_address, date_of_birth  FROM Customers  WHERE first_name = 'Carole';
SELECT email_address, date_of_birth  FROM Customers  WHERE first_name = 'Carole';
SELECT phone_number, email_address  FROM Customers  WHERE amount_outstanding > 2000;
SELECT phone_number, email_address  FROM Customers  WHERE amount_outstanding > 2000;
SELECT customer_status_code, cell_mobile_phone_number, email_address  FROM Customers  WHERE last_name = 'Kohler' OR first_name = 'Marina';
SELECT customer_status_code, phone_number, email_address  FROM Customers  WHERE last_name = 'Kohler' OR first_name = 'Marina';
SELECT date_of_birth  FROM Customers  WHERE customer_status_code = 'Good Customer';
SELECT date_of_birth  FROM Customers  WHERE customer_status_code = 'Good Customer';
SELECT date_became_customer  FROM Customers  WHERE first_name = 'Carole' AND last_name = 'Bernhard';
SELECT date_became_customer  FROM Customers  WHERE first_name = 'Carole' AND last_name = 'Bernhard';
SELECT COUNT(*) AS total_customers FROM Customers;
SELECT COUNT(*) AS total_customers FROM Customers;
SELECT customer_status_code, COUNT(*) AS number_of_customers FROM Customers GROUP BY customer_status_code;
SELECT customer_status_code, COUNT(*) AS customer_count FROM Customers GROUP BY customer_status_code;
SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY COUNT(customer_id) ASC LIMIT 1;
SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY COUNT(customer_id) ASC LIMIT 1;
SELECT COUNT(*)  FROM Lessons l JOIN Customers c ON l.customer_id = c.customer_id WHERE c.first_name = 'Rylan' AND c.last_name = 'Goodwin' AND l.lesson_status_code = 'completed';
SELECT COUNT(*) AS lessons_completed FROM Lessons l JOIN Customers c ON l.customer_id = c.customer_id WHERE c.first_name = 'Ryan' AND c.last_name = 'Goodwin';
SELECT MAX(amount_outstanding) AS max_outstanding,         MIN(amount_outstanding) AS min_outstanding,         AVG(amount_outstanding) AS avg_outstanding  FROM Customers;
SELECT      MAX(amount_outstanding) AS max_outstanding,     MIN(amount_outstanding) AS min_outstanding,     AVG(amount_outstanding) AS avg_outstanding FROM      Customers;
SELECT first_name, last_name  FROM Customers  WHERE amount_outstanding BETWEEN 1000 AND 3000;
SELECT first_name, last_name  FROM Customers  WHERE amount_outstanding BETWEEN 1000 AND 3000;
SELECT first_name, last_name  FROM Customers  JOIN Addresses ON Customers.customer_address_id = Addresses.address_id  WHERE Addresses.city = 'Lockmanfurt';
SELECT first_name, last_name  FROM Customers  JOIN Addresses ON Customers.customer_address_id = Addresses.address_id  WHERE Addresses.city = 'Lockmanfurt';
SELECT a.country FROM Customers c JOIN Addresses a ON c.customer_address_id = a.address_id WHERE c.first_name = 'Carole' AND c.last_name = 'Bernhard';
SELECT a.country  FROM Customers c  JOIN Addresses a ON c.customer_address_id = a.address_id  WHERE c.first_name = 'Carole' AND c.last_name = 'Bernhard';
SELECT a.zip_postcode FROM Customers c JOIN Addresses a ON c.customer_address_id = a.address_id WHERE c.first_name = 'Carole' AND c.last_name = 'Bernhard';
SELECT a.zip_postcode  FROM Customers c  JOIN Addresses a ON c.customer_address_id = a.address_id  WHERE c.first_name = 'Carole' AND c.last_name = 'Bernhard';
SELECT a.city, COUNT(c.customer_id) AS customer_count FROM Customers c JOIN Addresses a ON c.customer_address_id = a.address_id GROUP BY a.city ORDER BY customer_count DESC LIMIT 1;
SELECT a.city FROM Addresses a JOIN Customers c ON a.address_id = c.customer_address_id GROUP BY a.city ORDER BY COUNT(c.customer_id) DESC LIMIT 1;
SELECT SUM(cp.amount_payment) AS total_paid FROM Customers c JOIN Customer_Payments cp ON c.customer_id = cp.customer_id WHERE c.first_name = 'Carole' AND c.last_name = 'Bernhard';
SELECT SUM(cp.amount_payment) AS total_amount_paid FROM Customer_Payments cp JOIN Customers c ON cp.customer_id = c.customer_id WHERE c.first_name = 'Carole' AND c.last_name = 'Bernhard';
SELECT COUNT(*) AS number_of_customers_without_payments FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payments);
SELECT COUNT(*) AS customers_without_payments FROM Customers c LEFT JOIN Customer_Payments cp ON c.customer_id = cp.customer_id WHERE cp.customer_id IS NULL;
SELECT c.first_name, c.last_name FROM Customers c JOIN Customer_Payments cp ON c.customer_id = cp.customer_id GROUP BY c.customer_id HAVING COUNT(cp.datetime_payment) > 2;
SELECT c.first_name, c.last_name FROM Customers c JOIN Customer_Payments cp ON c.customer_id = cp.customer_id GROUP BY c.customer_id HAVING COUNT(cp.datetime_payment) > 2;
SELECT payment_method_code, COUNT(*) AS number_of_payments FROM Customer_Payments GROUP BY payment_method_code;
SELECT payment_method_code, COUNT(*) AS payment_count FROM Customer_Payments GROUP BY payment_method_code;
SELECT COUNT(*) AS cancelled_lessons_count FROM Lessons WHERE lesson_status_code = 'cancelled';
SELECT COUNT(*) AS cancelled_lessons FROM Lessons WHERE lesson_status_code = 'cancelled';
SELECT lesson_id  FROM Lessons  WHERE staff_id IN (     SELECT staff_id      FROM Staff      WHERE first_name = 'Janessa'        AND last_name = 'Sawayn'        AND nickname LIKE '%s%' );
SELECT l.lesson_id FROM Lessons l JOIN Staff s ON l.staff_id = s.staff_id WHERE s.first_name = 'Janessa' AND s.last_name = 'Sawayn' AND s.nickname LIKE '%s%';
SELECT COUNT(*)  FROM Lessons l JOIN Staff s ON l.staff_id = s.staff_id WHERE s.first_name LIKE '%a%';
SELECT COUNT(*) AS lesson_count FROM Lessons l JOIN Staff s ON l.staff_id = s.staff_id WHERE s.first_name LIKE '%a%';
SELECT SUM(lesson_time) AS total_lesson_time FROM Lessons JOIN Staff ON Lessons.staff_id = Staff.staff_id WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn';
SELECT SUM(lesson_time) AS total_time FROM Lessons JOIN Staff ON Lessons.staff_id = Staff.staff_id WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn';
SELECT AVG(price) AS average_lesson_price FROM Lessons l JOIN Staff s ON l.staff_id = s.staff_id WHERE s.first_name = 'Janessa' AND s.last_name = 'Sawayn';
SELECT AVG(price) AS average_price FROM Lessons JOIN Staff ON Lessons.staff_id = Staff.staff_id WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn';
SELECT COUNT(*) AS lesson_count FROM Lessons l JOIN Customers c ON l.customer_id = c.customer_id WHERE c.first_name = 'Ray';
SELECT COUNT(*) AS lesson_count FROM Lessons WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ray');
SELECT DISTINCT c.last_name FROM Customers c JOIN Staff s ON c.last_name = s.last_name;
SELECT last_name FROM Customers UNION SELECT last_name FROM Staff;
SELECT first_name  FROM Staff  WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM Lessons);
SELECT first_name  FROM Staff  WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM Lessons);
SELECT vehicle_id, vehicle_details FROM Vehicles WHERE vehicle_id = (     SELECT vehicle_id     FROM Lessons     GROUP BY vehicle_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT COUNT(*) FROM Faculty;
SELECT COUNT(*) AS total_faculty_members FROM Faculty;
SELECT DISTINCT Rank FROM Faculty;
SELECT DISTINCT Rank FROM Faculty;
SELECT DISTINCT Building FROM Faculty_Participates_in;
SELECT DISTINCT Building FROM Faculty;
SELECT Rank, Fname, Lname FROM Faculty;
SELECT Rank, Fname, Lname FROM Faculty;
SELECT Fname, Lname, Phone  FROM Faculty  WHERE Sex = 'Female';
SELECT Fname, Lname, Phone  FROM Faculty  WHERE Sex = 'Female';
SELECT FacID FROM Faculty WHERE Sex = 'Male';
SELECT FacID FROM Faculty WHERE Sex = 'Male';
SELECT COUNT(*)  FROM Faculty  WHERE Rank = 'Professor' AND Sex = 'Female';
SELECT COUNT(*)  FROM Faculty  WHERE Rank = 'Professor' AND Sex = 'Female';
SELECT Phone, Room, Building  FROM Faculty  WHERE Fname = 'Jerry' AND Lname = 'Prince';
SELECT Phone, Room, Building  FROM Faculty  WHERE Fname = 'Jerry' AND Lname = 'Prince';
SELECT COUNT(*)  FROM Faculty  WHERE Rank = 'Professor' AND Building = 'NEB';
SELECT COUNT(*)  FROM Faculty  WHERE Building = 'NEB' AND Rank = 'Professor';
SELECT Fname, Lname FROM Faculty;
SELECT Fname, Lname FROM Faculty;
SELECT Building, COUNT(FacID) AS Faculty_Count FROM Faculty GROUP BY Building;
SELECT Building, COUNT(FacID) AS Faculty_Count FROM Faculty GROUP BY Building;
SELECT Building, COUNT(*) AS FacultyCount FROM Faculty GROUP BY Building ORDER BY FacultyCount DESC LIMIT 1;
SELECT Building, COUNT(*) AS FacultyCount FROM Faculty GROUP BY Building ORDER BY FacultyCount DESC LIMIT 1;
SELECT Building FROM Faculty GROUP BY Building HAVING COUNT(FacID) >= 10;
SELECT Building FROM Faculty GROUP BY Building HAVING COUNT(FacID) >= 10;
SELECT Rank, COUNT(*) AS Faculty_Count FROM Faculty GROUP BY Rank;
SELECT Rank, COUNT(*) AS Faculty_Count FROM Faculty GROUP BY Rank;
SELECT Rank,         SUM(CASE WHEN Sex = 'Male' THEN 1 ELSE 0 END) AS Male_Count,         SUM(CASE WHEN Sex = 'Female' THEN 1 ELSE 0 END) AS Female_Count  FROM Faculty  GROUP BY Rank;
SELECT Rank, Sex, COUNT(*) AS Faculty_Count FROM Faculty GROUP BY Rank, Sex;
SELECT Rank FROM Faculty GROUP BY Rank ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Rank FROM Faculty GROUP BY Rank ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Sex, COUNT(*) AS NumberOfAssistantProfessors FROM Faculty WHERE Rank = 'Assistant Professor' GROUP BY Sex;
SELECT Sex, COUNT(*) AS Count FROM Faculty WHERE Rank = 'Assistant Professor' GROUP BY Sex;
SELECT Fname, Lname  FROM Faculty  WHERE FacID = (SELECT Advisor FROM Student WHERE LName = 'Smith' AND Fname = 'Linda');
SELECT Advisor FROM Student WHERE LName = 'Smith' AND Fname = 'Linda';
SELECT DISTINCT s.StuID FROM Student s JOIN Faculty f ON s.Advisor = f.FacID;
SELECT s.StuID FROM Student s JOIN Faculty f ON s.Advisor = f.FacID;
SELECT Fname, LName  FROM Student  WHERE Advisor = 'Michael Goodrich';
SELECT Fname, LName  FROM Student  WHERE Advisor = (SELECT StuID FROM Faculty WHERE Fname = 'Michael' AND Lname = 'Goodrich');
SELECT Faculty.FacID, COUNT(Student.Advisor) AS NumberOfStudentsAdvised FROM Faculty LEFT JOIN Student ON Faculty.FacID = Student.Advisor GROUP BY Faculty.FacID;
SELECT fp.FacID, COUNT(pi.stuid) AS student_count FROM Faculty_Participates_in fp LEFT JOIN Participates_in pi ON fp.actid = pi.actid GROUP BY fp.FacID;
SELECT f.Rank, COUNT(s.Advisor) AS NumberOfStudents FROM Faculty f LEFT JOIN Student s ON f.FacID = s.Advisor GROUP BY f.Rank;
SELECT f.Rank, COUNT(s.Advisor) AS NumberOfStudents FROM Faculty f JOIN Student s ON f.FacID = s.Advisor GROUP BY f.Rank;
SELECT f.Fname, f.Lname FROM Faculty f JOIN Faculty_Participates_in fp ON f.FacID = fp.FacID JOIN Activity a ON fp.actid = a.actid JOIN Participates_in p ON a.actid = p.actid JOIN Student s ON p.stuid = s.StuID GROUP BY f.FacID, f.Fname, f.Lname ORDER BY COUNT(s.StuID) DESC LIMIT 1;
SELECT F.Fname, F.Lname FROM Faculty F JOIN Student S ON F.FacID = S.Advisor GROUP BY F.FacID, F.Fname, F.Lname ORDER BY COUNT(S.StuID) DESC LIMIT 1;
SELECT f.FacID FROM Faculty f JOIN Faculty_Participates_in fp ON f.FacID = fp.FacID JOIN Participates_in p ON fp.actid = p.actid GROUP BY f.FacID HAVING COUNT(DISTINCT p.stuid) >= 2;
SELECT Advisor, COUNT(*) AS student_count FROM Student GROUP BY Advisor HAVING COUNT(*) >= 2;
SELECT FacID  FROM Faculty  WHERE FacID NOT IN (SELECT Advisor FROM Student WHERE Advisor IS NOT NULL);
SELECT FacID  FROM Faculty  WHERE FacID NOT IN (SELECT DISTINCT Advisor FROM Student WHERE Advisor IS NOT NULL);
SELECT activity_name FROM Activity;
SELECT * FROM Activity;
SELECT COUNT(*) FROM Activity;
SELECT COUNT(*) AS number_of_activities FROM Activity;
SELECT COUNT(DISTINCT FacID) AS FacultyCount FROM Faculty_Participates_in;
SELECT COUNT(DISTINCT FacID) AS number_of_faculty FROM Faculty_Participates_in;
SELECT FacID  FROM Faculty  WHERE FacID NOT IN (SELECT FacID FROM Faculty_Participates_in);
SELECT FacID  FROM Faculty  WHERE FacID NOT IN (SELECT FacID FROM Faculty_Participates_in);
SELECT DISTINCT f.FacID FROM Faculty f JOIN Faculty_Participates_in fp ON f.FacID = fp.FacID JOIN Student s ON f.FacID = s.Advisor;
SELECT DISTINCT f.FacID FROM Faculty f JOIN Faculty_Participates_in fp ON f.FacID = fp.FacID JOIN Student s ON f.FacID = s.Advisor;
SELECT COUNT(DISTINCT a.actid) AS activity_count FROM Activity a JOIN Participates_in p ON a.actid = p.actid JOIN Student s ON p.stuid = s.StuID WHERE s.Fname = 'Mark' AND s.LName = 'Giuliano';
SELECT COUNT(DISTINCT a.actid) AS number_of_activities FROM Activity a JOIN Participates_in p ON a.actid = p.actid JOIN Student s ON p.stuid = s.StuID WHERE s.Fname = 'Mark' AND s.LName = 'Giuliano';
SELECT a.activity_name FROM Activity a JOIN Participates_in p ON a.actid = p.actid JOIN Student s ON p.stuid = s.StuID WHERE s.Fname = 'Mark' AND s.LName = 'Giuliano';
SELECT a.activity_name FROM Activity a JOIN Participates_in p ON a.actid = p.actid JOIN Student s ON p.stuid = s.StuID WHERE s.Fname = 'Mark' AND s.LName = 'Giuliano';
SELECT f.Fname, f.Lname, COUNT(fp.actid) AS num_activities FROM Faculty f JOIN Faculty_Participates_in fp ON f.FacID = fp.FacID GROUP BY f.Fname, f.Lname;
SELECT f.Fname, f.Lname, COUNT(fp.actid) AS activity_count FROM Faculty f JOIN Faculty_Participates_in fp ON f.FacID = fp.FacID GROUP BY f.Fname, f.Lname;
SELECT a.activity_name, COUNT(fp.FacID) AS faculty_count FROM Activity a LEFT JOIN Faculty_Participates_in fp ON a.actid = fp.actid GROUP BY a.activity_name;
SELECT a.activity_name, COUNT(f.FacID) AS faculty_count FROM Activity a LEFT JOIN Faculty_Participates_in fp ON a.actid = fp.actid LEFT JOIN Faculty f ON fp.FacID = f.FacID GROUP BY a.activity_name;
SELECT F.Fname, F.Lname FROM Faculty F JOIN Faculty_Participates_in FP ON F.FacID = FP.FacID GROUP BY F.FacID, F.Fname, F.Lname ORDER BY COUNT(FP.actid) DESC LIMIT 1;
SELECT F.Fname, F.Lname FROM Faculty F JOIN Faculty_Participates_in FP ON F.FacID = FP.FacID GROUP BY F.FacID, F.Fname, F.Lname ORDER BY COUNT(FP.actid) DESC LIMIT 1;
SELECT a.activity_name FROM Activity a JOIN Faculty_Participates_in fpi ON a.actid = fpi.actid GROUP BY a.activity_name ORDER BY COUNT(fpi.FacID) DESC LIMIT 1;
SELECT a.activity_name FROM Activity a JOIN Faculty_Participates_in fpi ON a.actid = fpi.actid GROUP BY a.activity_name ORDER BY COUNT(fpi.FacID) DESC LIMIT 1;
SELECT StuID  FROM Student  WHERE StuID NOT IN (SELECT stuid FROM Participates_in);
SELECT stuid  FROM Student  WHERE stuid NOT IN (SELECT stuid FROM Participates_in);
SELECT stuid  FROM Participates_in  JOIN Student ON Participates_in.stuid = Student.StuID  WHERE Student.Age < 20;
SELECT DISTINCT stuid  FROM Participates_in  JOIN Student ON Participates_in.stuid = Student.StuID  WHERE Student.Age < 20;
SELECT S.Fname, S.LName FROM Student S JOIN Participates_in P ON S.StuID = P.stuid GROUP BY S.StuID, S.Fname, S.LName ORDER BY COUNT(P.actid) DESC LIMIT 1;
SELECT S.Fname, S.LName FROM Student S JOIN Participates_in P ON S.StuID = P.stuid GROUP BY S.StuID, S.Fname, S.LName ORDER BY COUNT(P.actid) DESC LIMIT 1;
SELECT a.activity_name FROM Activity a JOIN Participates_in p ON a.actid = p.actid GROUP BY a.activity_name ORDER BY COUNT(p.stuid) DESC LIMIT 1;
SELECT a.activity_name FROM Activity a JOIN Participates_in p ON a.actid = p.actid GROUP BY a.activity_name ORDER BY COUNT(p.stuid) DESC LIMIT 1;
SELECT DISTINCT f.Fname FROM Faculty f JOIN Faculty_Participates_in fp ON f.FacID = fp.FacID JOIN Activity a ON fp.actid = a.actid WHERE a.activity_name IN ('Canoeing', 'Kayaking');
SELECT F.Fname FROM Faculty F JOIN Faculty_Participates_in FP ON F.FacID = FP.FacID JOIN Activity A ON FP.actid = A.actid WHERE A.activity_name IN ('Canoeing', 'Kayaking');
SELECT DISTINCT F.Fname FROM Faculty F WHERE F.FacID NOT IN (     SELECT FP.FacID     FROM Faculty_Participates_in FP     JOIN Activity A ON FP.actid = A.actid     WHERE A.activity_name IN ('Canoeing', 'Kayaking') );
SELECT DISTINCT F.Fname FROM Faculty F WHERE F.FacID NOT IN (     SELECT FP.FacID     FROM Faculty_Participates_in FP     JOIN Activity A ON FP.actid = A.actid     WHERE A.activity_name IN ('Canoeing', 'Kayaking') );
SELECT DISTINCT f.Fname FROM Faculty f JOIN Faculty_Participates_in fp ON f.FacID = fp.FacID JOIN Activity a ON fp.actid = a.actid WHERE a.activity_name IN ('Canoeing', 'Kayaking');
SELECT F.Fname FROM Faculty F JOIN Faculty_Participates_in FP ON F.FacID = FP.FacID JOIN Activity A ON FP.actid = A.actid WHERE A.activity_name IN ('Canoeing', 'Kayaking') GROUP BY F.Fname HAVING COUNT(DISTINCT A.activity_name) = 2;
SELECT DISTINCT p.stuid FROM Participates_in p JOIN Activity a ON p.actid = a.actid WHERE a.activity_name IN ('Canoeing', 'Kayaking');
SELECT p1.stuid FROM Participates_in p1 JOIN Activity a1 ON p1.actid = a1.actid JOIN Participates_in p2 ON p1.stuid = p2.stuid JOIN Activity a2 ON p2.actid = a2.actid WHERE a1.activity_name = 'Canoeing' AND a2.activity_name = 'Kayaking';
SELECT name FROM airports WHERE city = 'Goroka';
SELECT name FROM airports WHERE city = 'Goroka';
SELECT name, city, country, elevation  FROM airports  WHERE city = 'New York';
SELECT name, city, country, elevation  FROM airports  WHERE city = 'New York';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) AS total_airlines FROM airlines;
SELECT COUNT(*) FROM airlines WHERE country = 'Russia';
SELECT COUNT(*) FROM airlines WHERE country = 'Russia';
SELECT MAX(elevation) FROM airports WHERE country = 'Iceland';
SELECT MAX(elevation)  FROM airports  WHERE country = 'Iceland';
SELECT name  FROM airports  WHERE country IN ('Cuba', 'Argentina');
SELECT name  FROM airports  WHERE country IN ('Cuba', 'Argentina');
SELECT country FROM airlines WHERE name LIKE 'Orbit%';
SELECT DISTINCT a.country  FROM airlines a  WHERE a.name LIKE 'Orbit%';
SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50;
SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50;
SELECT country  FROM airports  WHERE elevation = (SELECT MAX(elevation) FROM airports);
SELECT country  FROM airports  WHERE elevation = (SELECT MAX(elevation) FROM airports);
SELECT COUNT(*)  FROM airports  WHERE name LIKE '%International%';
SELECT COUNT(*)  FROM airports  WHERE name LIKE '%Interanation%';
SELECT COUNT(DISTINCT city)  FROM airports  WHERE country = 'Greenland';
SELECT COUNT(DISTINCT city)  FROM airports  WHERE country = 'Greenland';
SELECT COUNT(*)  FROM routes  WHERE airline = 'American Airlines';
SELECT COUNT(*)  FROM routes  WHERE alid = (SELECT alid FROM airlines WHERE name = 'American Airlines');
SELECT COUNT(*)  FROM routes r  JOIN airports a ON r.dst_apid = a.apid  WHERE a.country = 'Canada';
SELECT COUNT(*)  FROM routes r  JOIN airports a ON r.dst_apid = a.apid  WHERE a.country = 'Canada';
SELECT name, city, country  FROM airports  ORDER BY elevation ASC  LIMIT 1;
SELECT name, city, country  FROM airports  ORDER BY elevation ASC  LIMIT 1;
SELECT name, city, country  FROM airports  ORDER BY y DESC  LIMIT 1;
SELECT name, city, country  FROM airports  ORDER BY elevation DESC  LIMIT 1;
SELECT a.name, a.city FROM airports a JOIN routes r ON a.apid = r.dst_apid GROUP BY a.apid ORDER BY COUNT(r.rid) DESC LIMIT 1;
SELECT a.name, a.city FROM airports a JOIN routes r ON a.apid = r.dst_apid GROUP BY a.apid, a.name, a.city ORDER BY COUNT(r.rid) DESC LIMIT 1;
SELECT a.name, COUNT(r.rid) AS route_count FROM airlines a JOIN routes r ON a.alid = r.alid GROUP BY a.name ORDER BY route_count DESC LIMIT 10;
SELECT a.name FROM airlines a JOIN routes r ON a.alid = r.alid GROUP BY a.alid, a.name ORDER BY COUNT(r.rid) DESC LIMIT 10;
SELECT a.name, a.city FROM airports a JOIN routes r ON a.apid = r.src_apid GROUP BY a.apid ORDER BY COUNT(r.rid) DESC LIMIT 1;
SELECT a.name, a.city FROM airports a JOIN routes r ON a.apid = r.src_apid GROUP BY a.apid, a.name, a.city ORDER BY COUNT(r.rid) DESC LIMIT 1;
SELECT COUNT(DISTINCT dst_apid)  FROM routes  WHERE alid = (SELECT alid FROM airlines WHERE name = 'American Airlines');
SELECT COUNT(DISTINCT dst_apid)  FROM routes  WHERE alid = (SELECT alid FROM airlines WHERE name = 'American Airlines');
SELECT country, COUNT(*) AS airline_count FROM airlines GROUP BY country ORDER BY airline_count DESC LIMIT 1;
SELECT country FROM airlines GROUP BY country ORDER BY COUNT(alid) DESC LIMIT 1;
SELECT country, COUNT(*) AS airline_count FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY airline_count DESC LIMIT 1;
SELECT country, COUNT(*) AS airline_count FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY airline_count DESC;
SELECT country, COUNT(*) AS number_of_airlines FROM airlines GROUP BY country ORDER BY number_of_airlines DESC;
SELECT a.country, COUNT(DISTINCT r.alid) AS airline_count FROM airlines a JOIN routes r ON a.alid = r.alid GROUP BY a.country ORDER BY airline_count DESC;
SELECT country, COUNT(*) AS airport_count FROM airports GROUP BY country ORDER BY airport_count DESC;
SELECT country, COUNT(*) AS airport_count FROM airports GROUP BY country ORDER BY airport_count DESC;
SELECT city, COUNT(*) AS airport_count FROM airports WHERE country = 'United States' GROUP BY city ORDER BY airport_count DESC;
SELECT city, COUNT(*) AS airport_count FROM airports WHERE country = 'United States' GROUP BY city ORDER BY airport_count DESC;
SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING COUNT(apid) > 3;
SELECT COUNT(DISTINCT city)  FROM airports  WHERE country = 'United States'  GROUP BY city  HAVING COUNT(apid) > 3;
SELECT COUNT(DISTINCT city)  FROM airports  GROUP BY city  HAVING COUNT(apid) > 3;
SELECT COUNT(DISTINCT city)  FROM airports  GROUP BY city  HAVING COUNT(apid) > 3;
SELECT city, COUNT(*) AS number_of_airports FROM airports GROUP BY city HAVING COUNT(*) > 1;
SELECT city, COUNT(*) AS airport_count FROM airports GROUP BY city HAVING COUNT(*) > 1;
SELECT city, COUNT(*) AS airport_count FROM airports GROUP BY city HAVING COUNT(*) > 2 ORDER BY airport_count DESC;
SELECT city, COUNT(*) AS airport_count FROM airports GROUP BY city HAVING COUNT(*) > 2 ORDER BY airport_count DESC;
SELECT src_apid, src_ap, COUNT(rid) AS route_count FROM routes GROUP BY src_apid, src_ap;
SELECT src_ap, COUNT(*) AS route_count FROM routes GROUP BY src_ap;
SELECT a.name AS airport_name, COUNT(r.rid) AS number_of_routes FROM routes r JOIN airports a ON r.src_apid = a.apid GROUP BY a.name ORDER BY number_of_routes DESC;
SELECT src_ap, COUNT(*) AS route_count FROM routes GROUP BY src_ap ORDER BY route_count DESC;
SELECT a.country, AVG(a.elevation) AS average_elevation FROM airports a GROUP BY a.country;
SELECT a.country, AVG(a.elevation) AS average_elevation FROM airports a GROUP BY a.country;
SELECT city FROM airports GROUP BY city HAVING COUNT(apid) = 2;
SELECT city FROM airports GROUP BY city HAVING COUNT(apid) = 2;
SELECT a.country, al.name, COUNT(r.rid) AS route_count FROM routes r JOIN airlines al ON r.alid = al.alid JOIN airports ap ON r.src_apid = ap.apid JOIN airports dp ON r.dst_apid = dp.apid GROUP BY a.country, al.name;
SELECT a.country, r.airline, COUNT(r.rid) AS total_routes FROM routes r JOIN airlines a ON r.alid = a.alid GROUP BY a.country, r.airline;
SELECT COUNT(*)  FROM routes r  JOIN airports a ON r.dst_apid = a.apid  WHERE a.country = 'Italy';
SELECT COUNT(*)  FROM routes r  JOIN airports a ON r.dst_apid = a.apid  WHERE a.country = 'Italy';
SELECT COUNT(*)  FROM routes r  JOIN airlines a ON r.alid = a.alid  JOIN airports ap ON r.dst_apid = ap.apid  WHERE ap.country = 'Italy' AND a.name = 'American Airlines';
SELECT COUNT(*)  FROM routes r  JOIN airlines a ON r.alid = a.alid  WHERE a.name = 'American Airlines' AND r.dst_ap IN (SELECT name FROM airports WHERE country = 'Italy');
SELECT COUNT(*)  FROM routes  WHERE dst_ap = 'John F Kennedy International Airport';
SELECT COUNT(*)  FROM routes  WHERE dst_ap = 'John F Kennedy International Airport';
SELECT COUNT(*)  FROM routes r  JOIN airports src ON r.src_apid = src.apid  JOIN airports dst ON r.dst_apid = dst.apid  WHERE src.country = 'United States' AND dst.country = 'Canada';
SELECT COUNT(*)  FROM routes r  JOIN airports a1 ON r.src_apid = a1.apid  JOIN airports a2 ON r.dst_apid = a2.apid  WHERE a1.country = 'United States' AND a2.country = 'Canada';
SELECT r.rid  FROM routes r  JOIN airports src ON r.src_apid = src.apid  JOIN airports dst ON r.dst_apid = dst.apid  WHERE src.country = 'United States' AND dst.country = 'United States';
SELECT r.rid  FROM routes r  JOIN airports src ON r.src_apid = src.apid  JOIN airports dst ON r.dst_apid = dst.apid  WHERE src.country = 'United States' AND dst.country = 'United States';
SELECT a.name FROM airlines a JOIN routes r ON a.alid = r.alid GROUP BY a.name ORDER BY COUNT(r.rid) DESC LIMIT 1;
SELECT a.name FROM airlines a JOIN routes r ON a.alid = r.alid GROUP BY a.name ORDER BY COUNT(r.rid) DESC LIMIT 1;
SELECT src_apid, COUNT(*) AS route_count FROM routes JOIN airports ON routes.src_apid = airports.apid WHERE airports.country = 'China' GROUP BY src_apid ORDER BY route_count DESC LIMIT 1;
SELECT a.name FROM airports a JOIN routes r ON a.apid = r.src_apid WHERE a.country = 'China' GROUP BY a.name ORDER BY COUNT(r.rid) DESC LIMIT 1;
SELECT dst_apid, COUNT(*) AS route_count FROM routes JOIN airports ON routes.dst_apid = airports.apid WHERE airports.country = 'China' GROUP BY dst_apid ORDER BY route_count DESC LIMIT 1;
SELECT a.name FROM routes r JOIN airports a ON r.dst_apid = a.apid WHERE r.src_apid IN (SELECT apid FROM airports WHERE country = 'China') GROUP BY a.name ORDER BY COUNT(r.rid) DESC LIMIT 1;
SELECT order_id  FROM Orders  ORDER BY date_order_placed DESC  LIMIT 1;
SELECT order_id  FROM Orders  ORDER BY date_order_placed DESC  LIMIT 1;
SELECT order_id, customer_id  FROM Orders  ORDER BY date_order_placed ASC  LIMIT 1;
SELECT order_id, customer_id  FROM Orders  WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM Orders);
SELECT o.order_id  FROM Orders o  JOIN Shipments s ON o.order_id = s.order_id  WHERE s.shipment_tracking_number = '3452';
SELECT order_id  FROM Shipments  WHERE shipment_tracking_number = '3452';
SELECT order_item_id  FROM Order_Items  WHERE product_id = 11;
SELECT order_item_id  FROM Order_Items  WHERE product_id = 11;
SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_status = 'Packing';
SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_status = 'Packing';
SELECT DISTINCT c.* FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_status = 'On Road';
SELECT DISTINCT c.customer_id, c.customer_name, c.customer_details FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_status = 'On Road';
SELECT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY COUNT(o.order_id) DESC LIMIT 1;
SELECT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY COUNT(o.order_id) DESC LIMIT 1;
SELECT customer_id FROM Orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1;
SELECT customer_id FROM Orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1;
SELECT o.order_id, o.order_status FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.customer_name = 'Jeramie';
SELECT o.order_id, o.order_status FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.customer_name = 'Jeramie';
SELECT o.date_order_placed FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.customer_name = 'Jeramie';
SELECT O.date_order_placed FROM Orders O JOIN Customers C ON O.customer_id = C.customer_id WHERE C.customer_name = 'Jeramie';
SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.date_order_placed BETWEEN '2009-01-01' AND '2010-01-01';
SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.date_order_placed BETWEEN '2009-01-01' AND '2010-01-01';
SELECT DISTINCT oi.product_id FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id WHERE o.date_order_placed BETWEEN '1975-01-01' AND '1976-01-01';
SELECT DISTINCT oi.product_id FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id WHERE o.date_order_placed BETWEEN '1975-01-01' AND '1976-01-01';
SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_status IN ('On Road', 'Shipped') GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_status) = 2;
SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_status IN ('On Road', 'Shipped') GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_status) = 2;
SELECT DISTINCT o.customer_id FROM Orders o WHERE o.order_status IN ('On Road', 'Shipped') GROUP BY o.customer_id HAVING COUNT(DISTINCT o.order_status) = 2;
SELECT customer_id FROM Orders WHERE order_status IN ('On Road', 'Shipped') GROUP BY customer_id HAVING COUNT(DISTINCT order_status) = 2;
SELECT o.date_order_placed  FROM Orders o  JOIN Shipments s ON o.order_id = s.order_id  WHERE s.shipment_tracking_number = '3452';
SELECT O.date_order_placed FROM Orders O JOIN Shipments S ON O.order_id = S.order_id WHERE S.shipment_tracking_number = '3452';
SELECT o.date_order_placed  FROM Orders o  JOIN Shipments s ON o.order_id = s.order_id  WHERE s.invoice_number = 10;
SELECT o.date_order_placed FROM Orders o JOIN Shipments s ON o.order_id = s.order_id WHERE s.invoice_number = 10;
SELECT p.product_id, COUNT(oi.order_item_id) AS product_count FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id GROUP BY p.product_id;
SELECT p.product_id, COUNT(oi.order_item_id) AS times_ordered FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id;
SELECT p.product_name, COUNT(oi.order_item_id) AS product_count FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id GROUP BY p.product_name;
SELECT p.product_name, COUNT(oi.order_item_id) AS times_ordered FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_name;
SELECT DISTINCT o.order_id FROM Orders o JOIN Shipments s ON o.order_id = s.order_id WHERE s.shipment_date > '2000-01-01';
SELECT DISTINCT o.order_id FROM Orders o JOIN Shipments s ON o.order_id = s.order_id WHERE s.shipment_date > '2000-01-01';
SELECT order_id  FROM Shipments  ORDER BY shipment_date DESC  LIMIT 1;
SELECT order_id  FROM Shipments  ORDER BY shipment_date DESC  LIMIT 1;
SELECT DISTINCT product_name  FROM Products  ORDER BY product_name;
SELECT DISTINCT product_name  FROM Products  ORDER BY product_name ASC;
SELECT DISTINCT order_id  FROM Orders  ORDER BY date_order_placed;
SELECT DISTINCT order_id  FROM Orders  ORDER BY date_order_placed;
SELECT order_id FROM Order_Items GROUP BY order_id ORDER BY COUNT(order_item_id) DESC LIMIT 1;
SELECT order_id FROM Order_Items GROUP BY order_id ORDER BY COUNT(order_item_id) DESC LIMIT 1;
SELECT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY COUNT(o.order_id) DESC LIMIT 1;
SELECT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY COUNT(o.order_id) DESC LIMIT 1;
SELECT invoice_number  FROM Invoices  WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25';
SELECT invoice_number  FROM Invoices  WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25';
SELECT DISTINCT invoice_details  FROM Invoices  WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25';
SELECT DISTINCT invoice_details  FROM Invoices  WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25';
SELECT c.customer_name, COUNT(o.order_id) AS number_of_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name HAVING COUNT(o.order_id) >= 2;
SELECT c.customer_name, COUNT(o.order_id) AS number_of_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(o.order_id) >= 2;
SELECT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(o.order_id) <= 2;
SELECT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name HAVING COUNT(o.order_id) <= 2;
SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'food';
SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'food';
SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE oi.order_item_status = 'Cancel' AND p.product_name = 'food';
SELECT DISTINCT c.customer_id, c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE oi.order_item_status = 'Cancel' AND p.product_name = 'food';
SELECT COUNT(*) FROM architect WHERE gender = 'female';
SELECT name, nationality, id  FROM architect  WHERE gender = 'male'  ORDER BY name;
SELECT MAX(b.length_meters) AS max_length_meters, a.name AS architect_name FROM bridge b JOIN architect a ON b.architect_id = a.id GROUP BY a.name;
SELECT AVG(length_feet) AS average_length_feet FROM bridge;
SELECT m.name, m.built_year  FROM mill m  WHERE m.type = 'Grondzeiler';
SELECT DISTINCT a.name, a.nationality FROM architect a JOIN mill m ON a.id = m.architect_id;
SELECT name FROM mill WHERE location <> 'Donceel';
SELECT DISTINCT m.type FROM mill m JOIN architect a ON m.architect_id = a.id WHERE a.nationality IN ('American', 'Canadian');
SELECT a.id, a.name FROM architect a JOIN bridge b ON a.id = b.architect_id GROUP BY a.id, a.name HAVING COUNT(b.id) >= 3;
SELECT a.id, a.name, a.nationality FROM architect a JOIN mill m ON a.id = m.architect_id GROUP BY a.id, a.name, a.nationality ORDER BY COUNT(m.id) DESC LIMIT 1;
SELECT a.id, a.name, a.gender FROM architect a LEFT JOIN bridge b ON a.id = b.architect_id LEFT JOIN mill m ON a.id = m.architect_id GROUP BY a.id, a.name, a.gender HAVING COUNT(b.id) >= 2 OR COUNT(m.id) >= 1;
SELECT location FROM bridge WHERE name IN ('Kolob Arch', 'Rainbow Bridge');
SELECT name FROM mill WHERE name LIKE '%Moulin%';
SELECT DISTINCT m.name FROM mill m JOIN bridge b ON m.architect_id = b.architect_id WHERE b.length_meters > 80;
SELECT type, COUNT(*) AS count FROM mill GROUP BY type ORDER BY count DESC LIMIT 1;
SELECT COUNT(*)  FROM architect  WHERE id NOT IN (     SELECT architect_id      FROM mill      WHERE built_year < 1850 );
SELECT bridge.name  FROM bridge  JOIN architect ON bridge.architect_id = architect.id  WHERE architect.nationality = 'American'  ORDER BY bridge.length_feet;
SELECT COUNT(*) AS total_book_clubs FROM book_club;
SELECT COUNT(*) AS number_of_book_clubs FROM book_club;
SELECT Book_Title, Author_or_Editor  FROM book_club  WHERE Year > 1989;
SELECT Book_Title, Author_or_Editor  FROM book_club  WHERE Year > 1989;
SELECT DISTINCT Publisher FROM book_club;
SELECT DISTINCT Publisher FROM book_club;
SELECT Year, Book_Title, Publisher  FROM book_club  ORDER BY Year DESC;
SELECT Year, Book_Title, Publisher  FROM book_club  ORDER BY Year DESC;
SELECT Publisher, COUNT(*) AS Number_of_Books FROM book_club GROUP BY Publisher;
SELECT Publisher, COUNT(*) AS Book_Count FROM book_club GROUP BY Publisher;
SELECT Publisher, COUNT(*) AS Book_Count FROM book_club GROUP BY Publisher ORDER BY Book_Count DESC LIMIT 1;
SELECT Publisher FROM book_club GROUP BY Publisher ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Category, COUNT(*) AS Number_of_Books FROM book_club GROUP BY Category;
SELECT Category, COUNT(*) AS Book_Count FROM book_club GROUP BY Category;
SELECT Category FROM book_club WHERE Year > 1989 GROUP BY Category HAVING COUNT(*) >= 2;
SELECT Category FROM book_club WHERE Year > 1989 GROUP BY Category HAVING COUNT(*) >= 2;
SELECT DISTINCT Publisher FROM book_club WHERE Year IN (1989, 1990) GROUP BY Publisher HAVING COUNT(DISTINCT Year) = 2;
SELECT Publisher FROM book_club WHERE Year IN (1989, 1990) GROUP BY Publisher HAVING COUNT(DISTINCT Year) = 2;
SELECT DISTINCT Publisher FROM book_club WHERE Year <> 1989 OR Publisher NOT IN (SELECT DISTINCT Publisher FROM book_club WHERE Year = 1989);
SELECT DISTINCT Publisher  FROM book_club  WHERE Year <> 1989 OR Year IS NULL;
SELECT Title, Year, Director FROM movie ORDER BY Budget_million;
SELECT Title, Year, Director  FROM movie  ORDER BY Budget_million;
SELECT COUNT(DISTINCT Director) AS NumberOfDirectors FROM movie;
SELECT COUNT(DISTINCT Director) AS Number_of_Different_Directors FROM movie;
SELECT Title, Director  FROM movie  WHERE Year <= 2000  ORDER BY Gross_worldwide DESC  LIMIT 1;
SELECT Title, Director  FROM movie  WHERE Year <= 2000  ORDER BY Gross_worldwide DESC  LIMIT 1;
SELECT DISTINCT m1.Director FROM movie m1 JOIN movie m2 ON m1.Director = m2.Director WHERE m1.Year = 1999 AND m2.Year = 2000;
SELECT Director FROM movie WHERE Year IN (1999, 2000) GROUP BY Director HAVING COUNT(DISTINCT Year) = 2;
SELECT DISTINCT Director  FROM movie  WHERE Year IN (1999, 2000);
SELECT DISTINCT Director  FROM movie  WHERE Year IN (1999, 2000);
SELECT AVG(Budget_million) AS Average_Budget,         MAX(Budget_million) AS Maximum_Budget,         MIN(Budget_million) AS Minimum_Budget  FROM movie  WHERE Year < 2000;
SELECT AVG(Budget_million) AS Average_Budget,         MAX(Budget_million) AS Maximum_Budget,         MIN(Budget_million) AS Minimum_Budget  FROM movie  WHERE Year < 2000;
SELECT DISTINCT cc.Company_name FROM culture_company cc JOIN book_club bc ON cc.book_club_id = bc.book_club_id WHERE bc.Author_or_Editor = 'Alyson';
SELECT DISTINCT cc.Company_name FROM culture_company cc JOIN book_club bc ON cc.book_club_id = bc.book_club_id WHERE bc.Author_or_Editor = 'Alyson';
SELECT m.Title AS Movie_Title, b.Book_Title FROM culture_company cc JOIN movie m ON cc.movie_id = m.movie_id JOIN book_club b ON cc.book_club_id = b.book_club_id WHERE cc.Company_name IN (SELECT Company_name FROM culture_company WHERE Type = 'China');
SELECT b.Book_Title AS Title FROM culture_company cc JOIN book_club b ON cc.book_club_id = b.book_club_id WHERE cc.Incorporated_in = 'China'  UNION  SELECT m.Title AS Title FROM culture_company cc JOIN movie m ON cc.movie_id = m.movie_id WHERE cc.Incorporated_in = 'China';
SELECT DISTINCT cc.Company_name FROM culture_company cc JOIN movie m ON cc.movie_id = m.movie_id WHERE m.Year = 1999;
SELECT DISTINCT cc.Company_name FROM culture_company cc JOIN movie m ON cc.movie_id = m.movie_id WHERE m.Year = 1999;
SELECT COUNT(*) AS NumberOfSingers FROM singer;
SELECT COUNT(*) AS total_singers FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';
SELECT Song_Name, Song_release_year  FROM singer  WHERE Age = (SELECT MIN(Age) FROM singer);
SELECT Song_Name, Song_release_year  FROM singer  WHERE Age = (SELECT MIN(Age) FROM singer);
SELECT DISTINCT Country  FROM singer  WHERE Age > 20;
SELECT DISTINCT Country  FROM singer  WHERE Age > 20;
SELECT Country, COUNT(Singer_ID) AS Number_of_Singers FROM singer GROUP BY Country;
SELECT Country, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Country;
SELECT DISTINCT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer);
SELECT Song_Name  FROM singer  WHERE Age > (SELECT AVG(Age) FROM singer);
SELECT Location, Name  FROM stadium  WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name  FROM stadium  WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity) AS Max_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium;
SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium;
SELECT Name, Capacity  FROM stadium  WHERE Average = (SELECT MAX(Average) FROM stadium);
SELECT Name, Capacity  FROM stadium  WHERE Average = (SELECT MAX(Average) FROM stadium);
SELECT COUNT(*)  FROM concert  WHERE Year IN (2014, 2015);
SELECT COUNT(*)  FROM concert  WHERE Year IN (2014, 2015);
SELECT s.Name AS Stadium_Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name;
SELECT s.Name AS Stadium_Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID, s.Name;
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= 2014 GROUP BY s.Stadium_ID, s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > 2013 GROUP BY s.Stadium_ID ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT Year, COUNT(concert_ID) AS concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1;
SELECT Year, COUNT(*) AS concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1;
SELECT Name  FROM stadium  WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);
SELECT Name  FROM stadium  WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);
SELECT DISTINCT s1.Country FROM singer s1 JOIN singer s2 ON s1.Country = s2.Country WHERE s1.Age > 40 AND s2.Age < 30;
SELECT Name  FROM stadium  WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014);
SELECT Name  FROM stadium  WHERE Stadium_ID NOT IN (     SELECT Stadium_ID      FROM concert      WHERE Year = 2014 );
SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS Number_of_Singers FROM concert c LEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme;
SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS Number_of_Singers FROM concert c LEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme;
SELECT s.Name, COUNT(sic.concert_ID) AS Number_of_Concerts FROM singer s LEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name;
SELECT s.Name, COUNT(sic.concert_ID) AS Number_of_Concerts FROM singer s LEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name;
SELECT s.Name  FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014;
SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014;
SELECT Name, Country  FROM singer  WHERE Song_Name LIKE '%Hey%';
SELECT Name, Country  FROM singer  WHERE Song_Name LIKE '%Hey%';
SELECT DISTINCT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN (2014, 2015) GROUP BY s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2;
SELECT DISTINCT s.Name, st.Location FROM stadium st JOIN concert c ON st.Stadium_ID = c.Stadium_ID WHERE c.Year IN (2014, 2015) GROUP BY s.Name, st.Location HAVING COUNT(DISTINCT c.Year) = 2;
SELECT COUNT(*) AS Number_of_Concerts FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);
SELECT COUNT(*) AS Number_of_Concerts FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);
SELECT COUNT(*) AS NumberOfHeavyPets FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT weight  FROM Pets  WHERE PetType = 'Dog'  ORDER BY pet_age ASC  LIMIT 1;
SELECT weight  FROM Pets  WHERE PetType = 'Dog'  ORDER BY pet_age ASC  LIMIT 1;
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT COUNT(*) AS NumberOfPets FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20);
SELECT COUNT(*) AS NumberOfPets FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE s.Age > 20;
SELECT COUNT(*)  FROM Has_Pet hp  JOIN Pets p ON hp.PetID = p.PetID  JOIN Student s ON hp.StuID = s.StuID  WHERE p.PetType = 'dog' AND s.Sex = 'F';
SELECT COUNT(*)  FROM Student s  JOIN Has_Pet hp ON s.StuID = hp.StuID  JOIN Pets p ON hp.PetID = p.PetID  WHERE s.Sex = 'Female' AND p.PetType = 'Dog';
SELECT COUNT(DISTINCT PetType) AS DistinctPetTypes FROM Pets;
SELECT COUNT(DISTINCT PetType) AS DifferentPetTypes FROM Pets;
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('cat', 'dog');
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('cat', 'dog');
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('cat', 'dog') GROUP BY s.StuID, s.Fname HAVING COUNT(DISTINCT p.PetType) = 2;
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('cat', 'dog') GROUP BY s.StuID, s.Fname HAVING COUNT(DISTINCT p.PetType) = 2;
SELECT DISTINCT s.Major, s.Age FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType <> 'cat' OR p.PetType IS NULL;
SELECT S.Major, S.Age FROM Student S LEFT JOIN Has_Pet HP ON S.StuID = HP.StuID LEFT JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType <> 'cat' OR P.PetType IS NULL;
SELECT StuID  FROM Student  WHERE StuID NOT IN (     SELECT StuID      FROM Has_Pet      JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE Pets.PetType = 'cat' );
SELECT s.StuID  FROM Student s  WHERE s.StuID NOT IN (     SELECT hp.StuID      FROM Has_Pet hp      JOIN Pets p ON hp.PetID = p.PetID      WHERE p.PetType = 'cat' );
SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'Dog' AND S.StuID NOT IN (     SELECT HP2.StuID     FROM Has_Pet HP2     JOIN Pets P2 ON HP2.PetID = P2.PetID     WHERE P2.PetType = 'Cat' );
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND s.StuID NOT IN (     SELECT hp2.StuID     FROM Has_Pet hp2     JOIN Pets p2 ON hp2.PetID = p2.PetID     WHERE p2.PetType = 'cat' );
SELECT PetType, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetType, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Maximum_Age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Maximum_Age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;
SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID;
SELECT DISTINCT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID;
SELECT h.PetID  FROM Student s  JOIN Has_Pet h ON s.StuID = h.StuID  WHERE s.LName = 'Smith';
SELECT h.PetID  FROM Student s  JOIN Has_Pet h ON s.StuID = h.StuID  WHERE s.LName = 'Smith';
SELECT s.StuID, COUNT(h.PetID) AS NumberOfPets FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID GROUP BY s.StuID;
SELECT h.StuID, COUNT(h.PetID) AS PetCount FROM Has_Pet h GROUP BY h.StuID;
SELECT S.Fname, S.Sex FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID GROUP BY S.StuID, S.Fname, S.Sex HAVING COUNT(HP.PetID) > 1;
SELECT S.Fname, S.Sex FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID GROUP BY S.StuID, S.Fname, S.Sex HAVING COUNT(HP.PetID) > 1;
SELECT S.LName  FROM Student S  JOIN Has_Pet HP ON S.StuID = HP.StuID  JOIN Pets P ON HP.PetID = P.PetID  WHERE P.PetType = 'cat' AND P.pet_age = 3;
SELECT S.LName  FROM Student S  JOIN Has_Pet HP ON S.StuID = HP.StuID  JOIN Pets P ON HP.PetID = P.PetID  WHERE P.PetType = 'cat' AND P.pet_age = 3;
SELECT AVG(Age) AS Average_Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT AVG(Age) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) AS NumberOfContinents FROM continents;
SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumberOfCountries FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent;
SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS CountryCount FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT cm.FullName, cm.Id, COUNT(ml.ModelId) AS ModelCount FROM car_makers cm LEFT JOIN model_list ml ON cm.Maker = ml.Maker GROUP BY cm.FullName, cm.Id;
SELECT cm.FullName, cm.Id, COUNT(ml.ModelId) AS ModelCount FROM car_makers cm LEFT JOIN model_list ml ON cm.Maker = ml.Maker GROUP BY cm.FullName, cm.Id;
SELECT Model, MIN(Horsepower) AS MinHorsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model GROUP BY Model ORDER BY MinHorsepower LIMIT 1;
SELECT Model  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  ORDER BY Horsepower ASC  LIMIT 1;
SELECT cl.Model  FROM cars_data cd  JOIN car_names cn ON cd.Id = cn.MakeId  JOIN model_list ml ON cn.Model = ml.Model  WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT cl.Model  FROM cars_data cd  JOIN car_names cn ON cd.Id = cn.MakeId  JOIN model_list ml ON cn.Model = ml.Model  WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT DISTINCT cm.Maker  FROM car_makers cm  JOIN cars_data cd ON cm.Id = cd.Id  WHERE cd.Year = 1970;
SELECT DISTINCT cm.Maker FROM car_makers cm JOIN cars_data cd ON cm.Id = cd.Id WHERE cd.Year = 1970;
SELECT cn.Make, cd.Year FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Year = (SELECT MIN(Year) FROM cars_data);
SELECT cm.Maker, MIN(cd.Year) AS EarliestYear FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN car_makers cm ON cn.Model = cm.Model GROUP BY cm.Maker ORDER BY EarliestYear LIMIT 1;
SELECT DISTINCT model_list.Model  FROM model_list  JOIN cars_data ON model_list.ModelId = cars_data.Id  WHERE cars_data.Year > 1980;
SELECT DISTINCT ml.Model FROM model_list ml JOIN cars_data cd ON ml.ModelId = cd.Id WHERE cd.Year > 1980;
SELECT c.Continent, COUNT(DISTINCT cm.Id) AS MakerCount FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryName = cm.Country GROUP BY c.Continent;
SELECT c.Continent, COUNT(cm.Id) AS CarMakersCount FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent LEFT JOIN car_makers cm ON co.CountryName = cm.Country GROUP BY c.Continent;
SELECT CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;
SELECT Country FROM car_makers GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT cm.FullName, COUNT(ml.ModelId) AS ModelCount FROM car_makers cm JOIN model_list ml ON cm.Maker = ml.Maker GROUP BY cm.FullName;
SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS NumberOfModels FROM car_makers cm LEFT JOIN model_list ml ON cm.Maker = ml.Maker GROUP BY cm.Id, cm.FullName;
SELECT cd.Accelerate  FROM cars_data cd  JOIN car_names cn ON cd.Id = cn.MakeId  JOIN model_list ml ON cn.Model = ml.Model  JOIN car_makers cm ON ml.Maker = cm.Id  WHERE cm.FullName = 'AMC' AND ml.Model = 'Hornet Sportabout (SW)';
SELECT cd.Accelerate  FROM cars_data cd  JOIN car_names cn ON cd.Id = cn.MakeId  JOIN model_list ml ON cn.Model = ml.Model  JOIN car_makers cm ON ml.Maker = cm.Id  WHERE cm.FullName = 'AMC' AND ml.Model = 'Hornet Sportabout (SW)';
SELECT COUNT(*) FROM car_makers WHERE Country = 'France';
SELECT COUNT(DISTINCT Id) AS NumberOfMakers FROM car_makers WHERE Country = 'France';
SELECT COUNT(DISTINCT ml.Model) AS NumberOfCarModels FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Country = 'USA';
SELECT COUNT(DISTINCT ml.Model) AS ModelCount FROM car_makers cm JOIN model_list ml ON cm.Maker = ml.Maker WHERE cm.Country = 'United States';
SELECT AVG(MPG) AS AverageMPG FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) AS AverageMPG FROM cars_data WHERE Cylinders = 4;
SELECT MIN(Weight)  FROM cars_data  WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight)  FROM cars_data  WHERE Cylinders = 8 AND Year = 1974;
SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Maker = ml.Maker;
SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Maker = ml.Maker;
SELECT DISTINCT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryName = cm.Country;
SELECT DISTINCT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryName = cm.Country;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year;
SELECT Year, AVG(Weight) AS AverageWeight, AVG(Year) AS AverageYear FROM cars_data GROUP BY Year;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryName = cm.Country WHERE c.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3;
SELECT MAX(cd.Horsepower) AS MaxHorsepower, cn.Make FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Cylinders = 3;
SELECT MAX(cd.Horsepower) AS MaxHorsepower, cn.Make FROM cars_data cd JOIN model_list ml ON cd.Id = ml.ModelId JOIN car_names cn ON ml.Model = cn.Model WHERE cd.Cylinders = 3;
SELECT car_names.Model, MAX(cars_data.MPG) AS MaxMPG FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId GROUP BY car_names.Model ORDER BY MaxMPG DESC LIMIT 1;
SELECT Model FROM cars_data ORDER BY MPG DESC LIMIT 1;
SELECT AVG(Horsepower) AS AverageHorsepower FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) AS AverageHorsepower FROM cars_data WHERE Year < 1980;
SELECT AVG(Edispl) AS AverageEdispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Model = 'volvo';
SELECT AVG(Edispl) AS AverageEdispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN car_makers ON car_names.Model = car_makers.Model WHERE car_makers.FullName LIKE 'Volvo%';
SELECT Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders;
SELECT Model, COUNT(MakeId) AS VersionCount FROM car_names GROUP BY Model ORDER BY VersionCount DESC LIMIT 1;
SELECT Model, COUNT(DISTINCT MakeId) AS VersionCount FROM car_names GROUP BY Model ORDER BY VersionCount DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*)  FROM cars_data  WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*)  FROM model_list  WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company');
SELECT COUNT(DISTINCT ml.Model) AS NumberOfModels FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.FullName = 'American Motor Company';
SELECT cm.FullName, cm.Id FROM car_makers cm JOIN model_list ml ON cm.Maker = ml.Maker GROUP BY cm.FullName, cm.Id HAVING COUNT(ml.ModelId) > 3;
SELECT Maker, Id FROM car_makers WHERE Id IN (     SELECT Maker     FROM model_list     GROUP BY Maker     HAVING COUNT(ModelId) > 3 );
SELECT DISTINCT cl.Model FROM car_makers cm JOIN car_names cn ON cm.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model WHERE cm.FullName = 'General Motors' OR ml.Maker IN (     SELECT Maker     FROM car_makers     JOIN cars_data ON car_makers.Id = cars_data.Id     WHERE cars_data.Weight > 3500 );
SELECT DISTINCT cl.Model FROM car_makers cm JOIN model_list ml ON cm.Maker = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500;
SELECT DISTINCT Year  FROM cars_data  WHERE Weight >= 3000 AND Weight <= 4000;
SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000 OR Weight > 3000;
SELECT Horsepower  FROM cars_data  WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT Horsepower  FROM cars_data  WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT Cylinders  FROM cars_data  WHERE Id = (SELECT Id              FROM cars_data              JOIN car_names ON cars_data.Id = car_names.MakeId              JOIN model_list ON car_names.Model = model_list.Model              WHERE model_list.Model = 'volvo'              ORDER BY Accelerate ASC              LIMIT 1);
SELECT Cylinders  FROM cars_data  WHERE Id = (     SELECT Id      FROM cars_data      JOIN car_names ON cars_data.Id = car_names.MakeId      JOIN model_list ON car_names.Model = model_list.Model      JOIN car_makers ON model_list.Maker = car_makers.Maker      WHERE car_makers.FullName LIKE 'Volvo'      ORDER BY Accelerate ASC      LIMIT 1 );
SELECT COUNT(*)  FROM cars_data  WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT COUNT(*)  FROM cars_data  WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT COUNT(*) AS CountryCount FROM (     SELECT Country, COUNT(*) AS MakerCount     FROM car_makers     GROUP BY Country     HAVING COUNT(*) > 2 ) AS Subquery;
SELECT COUNT(DISTINCT Country) AS NumberOfCountries FROM car_makers GROUP BY Country HAVING COUNT(*) > 2;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Cylinders > 6;
SELECT Model, MAX(Horsepower) AS MaxHorsepower FROM cars_data WHERE Cylinders = 4 GROUP BY Model ORDER BY MaxHorsepower DESC LIMIT 1;
SELECT Model, MAX(Horsepower) AS MaxHorsepower FROM cars_data WHERE Cylinders = 4 GROUP BY Model ORDER BY MaxHorsepower DESC LIMIT 1;
SELECT DISTINCT cn.MakeId, cn.Make FROM cars_data cd JOIN car_names cn ON cd.Id = cn.Model WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders <= 3;
SELECT cn.MakeId, cn.Make FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Horsepower < (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders < 4;
SELECT MAX(MPG)  FROM cars_data  WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(MPG)  FROM cars_data  WHERE Cylinders = 8 OR Year < 1980;
SELECT cl.Model FROM model_list cl JOIN car_makers cm ON cl.Maker = cm.Id JOIN cars_data cd ON cl.ModelId = cd.Id WHERE cd.Weight < 3500 AND cm.FullName <> 'Ford Motor Company';
SELECT DISTINCT cl.Model FROM model_list cl JOIN car_makers cm ON cl.Maker = cm.Id JOIN cars_data cd ON cl.ModelId = cd.Id WHERE cd.Weight < 3500 AND cm.FullName != 'Ford Motor Company';
SELECT CountryName  FROM countries  WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers);
SELECT CountryName  FROM countries  WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers);
SELECT Id, Maker FROM car_makers WHERE Maker IN (     SELECT Maker     FROM model_list     GROUP BY Maker     HAVING COUNT(ModelId) >= 2 ) AND (SELECT COUNT(DISTINCT Maker) FROM car_makers) > 3;
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Maker = ml.Maker JOIN cars_data cd ON ml.Model = cd.Model GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.Model) >= 2 AND COUNT(cd.Id) > 3;
SELECT CountryId, CountryName  FROM countries  WHERE CountryId IN (     SELECT Country      FROM car_makers      GROUP BY Country      HAVING COUNT(*) > 3 ) OR CountryId IN (     SELECT DISTINCT c.CountryId      FROM car_makers cm      JOIN car_names cn ON cm.Id = cn.MakeId      JOIN model_list ml ON cn.Model = ml.Model      WHERE ml.Model = 'fiat' );
SELECT c.CountryId, c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryName = cm.Country LEFT JOIN model_list ml ON cm.Maker = ml.Maker WHERE (SELECT COUNT(*) FROM car_makers WHERE Country = c.CountryName) > 3    OR ml.Model = 'Fiat';
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Airline, Abbreviation  FROM airlines  WHERE Country = 'USA';
SELECT Airline, Abbreviation  FROM airlines  WHERE Country = 'USA';
SELECT AirportCode, AirportName  FROM airports  WHERE City = 'Anthony';
SELECT AirportCode, AirportName  FROM airports  WHERE City = 'Anthony';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) AS TotalAirlines FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) AS NumberOfAirports FROM airports;
SELECT COUNT(*) AS TotalFlights FROM flights;
SELECT COUNT(*) AS NumberOfFlights FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT * FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) AS NumberOfAirlines FROM airlines WHERE Country = 'USA';
SELECT City, Country  FROM airports  WHERE AirportName = 'Alton';
SELECT City, Country  FROM airports  WHERE AirportName = 'Alton';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName  FROM airports  WHERE City = 'Aberdeen';
SELECT COUNT(*) AS FlightCount  FROM flights  WHERE SourceAirport = 'APG';
SELECT COUNT(*) AS FlightCount  FROM flights  WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) AS FlightCount FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) AS NumberOfFlights FROM flights WHERE SourceAirport = 'ABZ';
SELECT COUNT(*)  FROM flights  WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) AS NumberOfFlights FROM flights WHERE DestAirport = 'ABZ';
SELECT COUNT(*)  FROM flights f JOIN airports a1 ON f.SourceAirport = a1.AirportCode JOIN airports a2 ON f.DestAirport = a2.AirportCode WHERE a1.City = 'Aberdeen' AND a2.City = 'Ashley';
SELECT COUNT(*)  FROM flights  WHERE SourceAirport = 'ABZ' AND DestAirport = 'ASH';
SELECT COUNT(*)  FROM flights  WHERE Airline = 'JetBlue Airways';
SELECT COUNT(*) AS NumberOfJetblueFlights  FROM flights  WHERE Airline = 'Jetblue Airways';
SELECT COUNT(*)  FROM flights  WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*)  FROM flights  WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*)  FROM flights  WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*)  FROM flights  WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*)  FROM flights  WHERE Airline = 'United Airlines' AND DestAirport IN (     SELECT AirportCode      FROM airports      WHERE City = 'Aberdeen' );
SELECT COUNT(*)  FROM flights  WHERE Airline = 'United Airlines' AND DestAirport = 'ABZ';
SELECT a.City, COUNT(f.DestAirport) AS ArrivingFlights FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode GROUP BY a.City ORDER BY ArrivingFlights DESC LIMIT 1;
SELECT a.City, COUNT(f.DestAirport) AS DestinationCount FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode GROUP BY a.City ORDER BY DestinationCount DESC LIMIT 1;
SELECT a.City, COUNT(f.FlightNo) AS DepartingFlights FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode GROUP BY a.City ORDER BY DepartingFlights DESC LIMIT 1;
SELECT City, COUNT(*) AS Frequency FROM airports WHERE AirportCode IN (SELECT SourceAirport FROM flights) GROUP BY City ORDER BY Frequency DESC LIMIT 1;
SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount DESC LIMIT 1;
SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount DESC LIMIT 1;
SELECT a.Abbreviation, a.Country FROM airlines a JOIN flights f ON a.Airline = f.Airline GROUP BY a.Abbreviation, a.Country ORDER BY COUNT(f.FlightNo) ASC LIMIT 1;
SELECT a.Abbreviation, a.Country FROM airlines a JOIN (     SELECT Airline, COUNT(*) AS FlightCount     FROM flights     GROUP BY Airline     ORDER BY FlightCount ASC     LIMIT 1 ) f ON a.Airline = f.Airline;
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.Abbreviation = f.Airline WHERE f.SourceAirport = 'AHD';
SELECT DISTINCT Airline  FROM flights  WHERE SourceAirport = 'AHD';
SELECT DISTINCT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.Abbreviation WHERE f.DestAirport = 'AHD';
SELECT DISTINCT a.Airline FROM flights f JOIN airlines a ON f.Airline = a.Abbreviation WHERE f.DestAirport = 'AHD';
SELECT DISTINCT f1.Airline FROM flights f1 JOIN flights f2 ON f1.Airline = f2.Airline WHERE f1.SourceAirport = 'APG' AND f2.SourceAirport = 'CVO';
SELECT DISTINCT f.Airline FROM flights f WHERE f.SourceAirport IN ('APG', 'CVO') GROUP BY f.Airline HAVING COUNT(DISTINCT f.SourceAirport) = 2;
SELECT DISTINCT f1.Airline FROM flights f1 WHERE f1.SourceAirport = 'CVO' AND f1.Airline NOT IN (     SELECT f2.Airline     FROM flights f2     WHERE f2.SourceAirport = 'APG' );
SELECT DISTINCT f.Airline FROM flights f WHERE f.SourceAirport = 'CVO' AND f.Airline NOT IN (     SELECT DISTINCT f2.Airline     FROM flights f2     WHERE f2.SourceAirport = 'APG' );
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';
SELECT FlightNo  FROM flights  WHERE Airline = 'United Airlines';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo  FROM flights  WHERE DestAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT f.FlightNo  FROM flights f  JOIN airports a ON f.SourceAirport = a.AirportCode  WHERE a.City = 'Aberdeen';
SELECT FlightNo  FROM flights  WHERE SourceAirport = 'Aberdeen';
SELECT f.FlightNo  FROM flights f  JOIN airports a ON f.DestAirport = a.AirportCode  WHERE a.City = 'Aberdeen';
SELECT FlightNo  FROM flights  WHERE DestAirport = 'ABZ';
SELECT COUNT(*) AS NumberOfFlights FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene');
SELECT COUNT(*)  FROM flights  WHERE DestAirport IN ('ABZ', 'ABI');
SELECT AirportName  FROM airports  WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights)  AND AirportCode NOT IN (SELECT DestAirport FROM flights);
SELECT a.AirportCode, a.AirportName FROM airports a LEFT JOIN flights f1 ON a.AirportCode = f1.SourceAirport LEFT JOIN flights f2 ON a.AirportCode = f2.DestAirport WHERE f1.FlightNo IS NULL AND f2.FlightNo IS NULL;
SELECT COUNT(*) AS Number_of_Employees FROM employee;
SELECT COUNT(*) AS Number_of_Employees FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT City, COUNT(*) AS Number_of_Employees FROM employee GROUP BY City;
SELECT City, COUNT(*) AS Employee_Count FROM employee GROUP BY City;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;
SELECT Location, COUNT(*) AS Number_of_Shops FROM shop GROUP BY Location;
SELECT Location, COUNT(*) AS Number_of_Shops FROM shop GROUP BY Location;
SELECT Manager_name, District  FROM shop  WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT Manager_name, District  FROM shop  WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;
SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;
SELECT Name, Location, District  FROM shop  ORDER BY Number_products DESC;
SELECT Name, Location, District  FROM shop  ORDER BY Number_products DESC;
SELECT Name  FROM shop  WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT Name  FROM shop  WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID, e.Name ORDER BY COUNT(ev.Year_awarded) DESC LIMIT 1;
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID, e.Name ORDER BY COUNT(ev.Year_awarded) DESC LIMIT 1;
SELECT e.Name FROM evaluation ev JOIN employee e ON ev.Employee_ID = e.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1;
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1;
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;
SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring);
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL;
SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Number_of_Employees FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;
SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Number_of_Employees FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name;
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT DISTINCT s1.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000;
SELECT DISTINCT s1.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000;
SELECT COUNT(DISTINCT Location) AS Different_Locations FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(*) AS Total_Documents FROM Documents;
SELECT COUNT(*) AS NumberOfDocuments FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_Name, Template_ID  FROM Documents  WHERE Document_Description LIKE '%w%';
SELECT Document_Name, Template_ID  FROM Documents  WHERE Document_Description LIKE '%w%';
SELECT Document_ID, Template_ID, Document_Description  FROM Documents  WHERE Document_Name = 'Robbin CV';
SELECT d.Document_ID, d.Template_ID, d.Document_Description FROM Documents d WHERE d.Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT Template_ID) AS Different_Templates_Count FROM Documents;
SELECT COUNT(DISTINCT Template_ID) AS Different_Template_Count FROM Documents;
SELECT COUNT(DISTINCT d.Document_ID) AS Document_Count FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT';
SELECT COUNT(DISTINCT d.Document_ID) AS Document_Count FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT';
SELECT t.Template_ID, COUNT(d.Document_ID) AS Number_of_Documents FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID;
SELECT Template_ID, COUNT(*) AS Usage_Count FROM Documents GROUP BY Template_ID;
SELECT t.Template_ID, t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID, t.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1;
SELECT t.Template_ID, t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID, t.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) > 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) > 1;
SELECT Template_ID  FROM Templates  WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents);
SELECT Template_ID  FROM Templates  WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents);
SELECT COUNT(*) AS Template_Count FROM Templates;
SELECT COUNT(*) AS Template_Count FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code  FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_ID  FROM Templates  WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT Template_ID  FROM Templates  WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT COUNT(*)  FROM Templates  WHERE Template_Type_Code = 'CV';
SELECT COUNT(*)  FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'CV';
SELECT Version_Number, Template_Type_Code  FROM Templates  WHERE Version_Number > 5;
SELECT Version_Number, Template_Type_Code  FROM Templates  WHERE Version_Number > 5;
SELECT r.Template_Type_Code, COUNT(t.Template_ID) AS Number_of_Templates FROM Ref_Template_Types r LEFT JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code GROUP BY r.Template_Type_Code;
SELECT rt.Template_Type_Code, COUNT(t.Template_ID) AS Template_Count FROM Ref_Template_Types rt LEFT JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code GROUP BY rt.Template_Type_Code;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3;
SELECT MIN(Version_Number) AS Smallest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code;
SELECT MIN(Version_Number) AS Lowest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code;
SELECT t.Template_Type_Code FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Data base';
SELECT t.Template_Type_Code FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Data base';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';
SELECT rtt.Template_Type_Code, COUNT(d.Document_ID) AS Number_of_Documents FROM Ref_Template_Types rtt LEFT JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY rtt.Template_Type_Code;
SELECT r.Template_Type_Code, COUNT(d.Document_ID) AS Document_Count FROM Ref_Template_Types r LEFT JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY r.Template_Type_Code;
SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1;
SELECT tt.Template_Type_Code FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code GROUP BY tt.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1;
SELECT r.Template_Type_Code FROM Ref_Template_Types r LEFT JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_ID IS NULL;
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents));
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description  FROM Ref_Template_Types  WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description  FROM Ref_Template_Types  WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Description = 'Book';
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Description = 'Book';
SELECT DISTINCT r.Template_Type_Description FROM Ref_Template_Types r JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID;
SELECT DISTINCT rt.Template_Type_Description FROM Ref_Template_Types rt JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID;
SELECT t.Template_ID  FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'Presentation';
SELECT t.Template_ID  FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'Presentation';
SELECT COUNT(*) AS Total_Paragraphs FROM Paragraphs;
SELECT COUNT(*) AS NumberOfParagraphs FROM Paragraphs;
SELECT COUNT(*)  FROM Paragraphs  WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');
SELECT COUNT(*) AS Paragraph_Count FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea ';
SELECT *  FROM Paragraphs  WHERE Paragraph_Text LIKE '%Korea%';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT p.Paragraph_Text  FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews';
SELECT p.Paragraph_Text  FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews';
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2;
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1;
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1;
SELECT Document_ID FROM Documents WHERE Document_ID IN (     SELECT Document_ID     FROM Paragraphs     GROUP BY Document_ID     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;
SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text IN ('Brazil', 'Ireland') GROUP BY d.Document_ID HAVING COUNT(DISTINCT p.Paragraph_Text) = 2;
SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text IN ('Brazil', 'Ireland') GROUP BY d.Document_ID HAVING COUNT(DISTINCT p.Paragraph_Text) = 2;
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) AS Total_Teachers FROM teacher;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Age, Hometown FROM teacher;
SELECT Age, Hometown FROM teacher;
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Age IN (32, 33);
SELECT Name FROM teacher WHERE Age IN (32, 33);
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);
SELECT Hometown, COUNT(*) AS Number_of_Teachers FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS Teacher_Count FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1;
SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t.Name, c.Course  FROM teacher t  JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID  JOIN course c ON ca.Course_ID = c.Course_ID  ORDER BY t.Name ASC;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.Name  FROM teacher t  JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID  JOIN course c ON ca.Course_ID = c.Course_ID  WHERE c.Course = 'math';
SELECT t.Name  FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math';
SELECT t.Name, COUNT(ca.Course_ID) AS NumberOfCourses FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;
SELECT t.Name, COUNT(ca.Course_ID) AS Course_Count FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID, t.Name HAVING COUNT(DISTINCT ca.Course_ID) >= 2;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID, t.Name HAVING COUNT(DISTINCT ca.Course_ID) >= 2;
SELECT Name  FROM teacher  WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);
SELECT t.Name  FROM teacher t  LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID  LEFT JOIN course c ON ca.Course_ID = c.Course_ID  WHERE ca.Course_ID IS NULL;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT Name  FROM visitor  WHERE Level_of_membership > 4  ORDER BY Level_of_membership DESC;
SELECT AVG(Age) AS Average_Age FROM visitor WHERE Level_of_membership <= 4;
SELECT Name, Level_of_membership  FROM visitor  WHERE Level_of_membership > 4  ORDER BY Age DESC;
SELECT Museum_ID, Name  FROM museum  WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);
SELECT AVG(Num_of_Staff) AS Average_Staff FROM museum WHERE Open_Year < 2009;
SELECT Open_Year, Num_of_Staff  FROM museum  WHERE Name = 'Plaza Museum';
SELECT Name  FROM museum  WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010);
SELECT v.ID, v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY v.ID, v.Name, v.Age HAVING COUNT(vi.Museum_ID) > 1;
SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY v.ID, v.Name, v.Level_of_membership ORDER BY SUM(vi.Total_spent) DESC LIMIT 1;
SELECT Museum_ID, Name FROM museum WHERE Museum_ID = (     SELECT Museum_ID     FROM visit     GROUP BY Museum_ID     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT Name  FROM museum  WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);
SELECT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID ORDER BY vi.Num_of_Ticket DESC LIMIT 1;
SELECT AVG(Num_of_Ticket) AS Average_Tickets, MAX(Num_of_Ticket) AS Max_Tickets FROM visit;
SELECT SUM(v.Total_spent) AS Total_Ticket_Expense FROM visit v JOIN visitor vi ON v.visitor_ID = vi.ID WHERE vi.Level_of_membership = 1;
SELECT DISTINCT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < 2009 AND v.ID IN (     SELECT vi2.visitor_ID     FROM visit vi2     JOIN museum m2 ON vi2.Museum_ID = m2.Museum_ID     WHERE m2.Open_Year > 2011 );
SELECT COUNT(DISTINCT v.ID) AS Num_of_Visitors FROM visitor v WHERE v.ID NOT IN (     SELECT DISTINCT vi.visitor_ID     FROM visit vi     JOIN museum m ON vi.Museum_ID = m.Museum_ID     WHERE m.Open_Year > 2010 );
SELECT COUNT(*)  FROM museum  WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT COUNT(*) AS total_players FROM players;
SELECT COUNT(*) AS player_count FROM players;
SELECT COUNT(*) AS total_matches FROM matches;
SELECT COUNT(*) AS match_count FROM matches;
SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT      AVG(loser_age) AS average_loser_age,      AVG(winner_age) AS average_winner_age  FROM      matches;
SELECT      AVG(loser_age) AS average_loser_age,      AVG(winner_age) AS average_winner_age  FROM      matches;
SELECT AVG(winner_rank) AS average_winner_rank FROM matches;
SELECT AVG(winner_rank) AS average_winner_rank FROM matches;
SELECT MAX(loser_rank) AS highest_loser_rank FROM matches;
SELECT MIN(loser_rank) AS best_rank_of_losers FROM matches;
SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM players;
SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players;
SELECT COUNT(DISTINCT loser_name) AS distinct_loser_names FROM matches;
SELECT COUNT(DISTINCT loser_name) AS different_loser_names FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT DISTINCT m.winner_name FROM matches m WHERE m.tourney_date IN (20130101, 20160101) AND m.winner_id IN (     SELECT winner_id     FROM matches     WHERE tourney_date IN (20130101, 20160101)     GROUP BY winner_id     HAVING COUNT(DISTINCT YEAR(tourney_date)) = 2 );
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_date IN ('2013-01-01', '2016-01-01') GROUP BY p.player_id HAVING COUNT(DISTINCT YEAR(m.tourney_date)) = 2;
SELECT COUNT(*) AS total_matches FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*)  FROM matches  WHERE year IN (2013, 2016);
SELECT DISTINCT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.country_code, p.first_name HAVING COUNT(DISTINCT m.tourney_name) = 2;
SELECT DISTINCT p.first_name, p.country_code FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open';
SELECT first_name, country_code  FROM players  ORDER BY birth_date ASC  LIMIT 1;
SELECT first_name, country_code  FROM players  ORDER BY birth_date ASC  LIMIT 1;
SELECT first_name, last_name  FROM players  ORDER BY birth_date;
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date;
SELECT first_name, last_name  FROM players  WHERE hand IN ('L', 'left')  ORDER BY birth_date;
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name, p.country_code ORDER BY COUNT(r.tours) DESC LIMIT 1;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name, p.country_code ORDER BY COUNT(r.tours) DESC LIMIT 1;
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;
SELECT winner_name, SUM(winner_rank_points) AS total_rank_points FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.first_name || ' ' || p.last_name AS winner_name, r.ranking_points FROM matches m JOIN players p ON m.winner_id = p.player_id JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, r.ranking_points ORDER BY COUNT(m.match_num) DESC LIMIT 1;
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT winner_name  FROM matches  WHERE tourney_name = 'Australian Open'  ORDER BY winner_rank_points DESC  LIMIT 1;
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1;
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code;
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year;
SELECT year, COUNT(*) AS matches_played FROM matches GROUP BY year;
SELECT p.first_name, p.last_name, m.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id ORDER BY p.birth_date DESC LIMIT 3;
SELECT p.first_name, p.last_name, m.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id ORDER BY p.birth_date DESC LIMIT 3;
SELECT COUNT(DISTINCT winner_id) AS left_handed_winners FROM matches WHERE tourney_name = 'WTA Championships'  AND winner_id IN (     SELECT player_id      FROM players      WHERE hand = 'left' );
SELECT COUNT(DISTINCT m.winner_id) AS left_handed_winners FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships';
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN (     SELECT winner_id, SUM(winner_rank_points) AS total_rank_points     FROM matches     GROUP BY winner_id     ORDER BY total_rank_points DESC     LIMIT 1 ) AS top_winner ON p.player_id = top_winner.winner_id;
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;
SELECT hand, COUNT(*) AS player_count FROM players GROUP BY hand;
SELECT COUNT(*) AS captured_ships_count  FROM ship  WHERE disposition_of_ship = 'Captured';
SELECT s.name, s.tonnage  FROM ship s  ORDER BY s.name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;
SELECT AVG(injured) AS average_injuries FROM death;
SELECT d.killed, d.injured  FROM death d  JOIN ship s ON d.caused_by_ship_id = s.id  WHERE s.tonnage = 't';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';
SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
SELECT d.caused_by_ship_id, s.name FROM death d JOIN ship s ON d.caused_by_ship_id = s.id GROUP BY d.caused_by_ship_id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1;
SELECT DISTINCT name  FROM battle  WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) AS different_results FROM battle;
SELECT COUNT(DISTINCT b.id) AS battles_without_ship_225 FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.tonnage <> 225 OR s.lost_in_battle IS NULL;
SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name IN ('Lettice', 'HMS Atalanta') GROUP BY b.id, b.name, b.date HAVING COUNT(DISTINCT s.name) = 2;
SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON s.lost_in_battle = b.id WHERE s.location != 'English Channel' OR s.lost_in_battle IS NULL GROUP BY b.id HAVING COUNT(s.id) = 0;
SELECT note FROM death WHERE note LIKE '%East%';
SELECT line_1, line_2 FROM Addresses;
SELECT line_1, line_2 FROM Addresses;
SELECT COUNT(*) AS total_courses FROM Courses;
SELECT COUNT(*) AS total_courses FROM Courses;
SELECT course_description  FROM Courses  WHERE course_name = 'Math';
SELECT course_description  FROM Courses  WHERE course_name LIKE '%Math%';
SELECT zip_postcode  FROM Addresses  WHERE city = 'Port Chelsea';
SELECT zip_postcode  FROM Addresses  WHERE city = 'Port Chelsea';
SELECT d.department_id, d.department_name, COUNT(dp.degree_program_id) AS degree_count FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY degree_count DESC LIMIT 1;
SELECT d.department_id, d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT d.department_id) AS number_of_departments FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id;
SELECT COUNT(DISTINCT department_id) AS different_departments FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) AS different_degree_names FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_program_id) AS different_degrees_offered FROM Degree_Programs;
SELECT COUNT(*)  FROM Degree_Programs  WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');
SELECT COUNT(*)  FROM Degree_Programs  WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT c.course_id, c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) <= 2;
SELECT c.course_id, c.course_name FROM Courses c LEFT JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) < 2;
SELECT section_name  FROM Sections  ORDER BY section_name DESC;
SELECT section_name  FROM Sections  ORDER BY section_name DESC;
SELECT semester_id, semester_name FROM Semesters WHERE semester_id = (     SELECT semester_id     FROM Student_Enrolment     GROUP BY semester_id     ORDER BY COUNT(student_enrolment_id) DESC     LIMIT 1 );
SELECT s.semester_id, s.semester_name FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY COUNT(se.student_enrolment_id) DESC LIMIT 1;
SELECT department_description  FROM Departments  WHERE department_name LIKE '%the computer%';
SELECT department_description  FROM Departments  WHERE department_name LIKE '%computer%';
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2 AND COUNT(DISTINCT se.semester_id) = 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name, se.semester_id HAVING COUNT(DISTINCT se.degree_program_id) = 2;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelor%';
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelors%';
SELECT dp.degree_summary_name, COUNT(se.student_enrolment_id) AS student_count FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_summary_name ORDER BY student_count DESC LIMIT 1;
SELECT dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY COUNT(se.student_enrolment_id) DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_enrolment_id) DESC LIMIT 1;
SELECT deg.degree_program_id, deg.degree_summary_name FROM Degree_Programs deg JOIN Student_Enrolment se ON deg.degree_program_id = se.degree_program_id GROUP BY deg.degree_program_id, deg.degree_summary_name ORDER BY COUNT(se.student_enrolment_id) DESC LIMIT 1;
SELECT      s.student_id,      s.first_name,      s.middle_name,      s.last_name,      COUNT(se.student_enrolment_id) AS number_of_enrollments FROM      Students s JOIN      Student_Enrolment se ON s.student_id = se.student_id GROUP BY      s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY      number_of_enrollments DESC LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(se.student_enrolment_id) AS number_of_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment);
SELECT semester_name  FROM Semesters  WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);
SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id;
SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id;
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_id ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1;
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_id ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1;
SELECT s.last_name FROM Students s WHERE s.current_address_id IN (     SELECT a.address_id     FROM Addresses a     WHERE a.state_province_county = 'North Carolina' ) AND s.student_id NOT IN (     SELECT se.student_id     FROM Student_Enrolment se );
SELECT s.last_name FROM Students s WHERE s.current_address_id IN (     SELECT a.address_id     FROM Addresses a     WHERE a.state_province_county = 'North Carolina' ) AND s.student_id NOT IN (     SELECT se.student_id     FROM Student_Enrolment se );
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2;
SELECT cell_mobile_number  FROM Students  WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number  FROM Students  WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name  FROM Students  ORDER BY date_first_registered  LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN Transcripts t ON sec.student_course_id = t.transcript_id WHERE s.date_left IS NOT NULL ORDER BY s.date_left ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1;
SELECT first_name  FROM Students  WHERE current_address_id <> permanent_address_id;
SELECT first_name  FROM Students  WHERE current_address_id <> permanent_address_id;
SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3 ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;
SELECT MIN(transcript_date) AS first_transcript_date, other_details FROM Transcripts;
SELECT MIN(transcript_date) AS earliest_transcript_date, other_details FROM Transcripts;
SELECT COUNT(*) AS total_transcripts FROM Transcripts;
SELECT COUNT(*) AS total_transcripts FROM Transcripts;
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts;
SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts;
SELECT student_course_id, COUNT(transcript_id) AS transcript_count FROM Transcript_Contents GROUP BY student_course_id ORDER BY transcript_count DESC LIMIT 1;
SELECT student_enrolment_id, COUNT(*) AS course_count FROM Student_Enrolment_Courses JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id GROUP BY student_enrolment_id ORDER BY course_count DESC LIMIT 1;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date ORDER BY COUNT(tc.student_course_id) ASC LIMIT 1;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date ORDER BY COUNT(tc.student_course_id) ASC LIMIT 1;
SELECT DISTINCT s.semester_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters s ON se.semester_id = s.semester_id WHERE dp.degree_summary_name IN ('Master', 'Bachelor') GROUP BY s.semester_id HAVING COUNT(DISTINCT dp.degree_summary_name) = 2;
SELECT DISTINCT s.semester_id FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY s.semester_id HAVING COUNT(DISTINCT dp.degree_summary_name) = 2;
SELECT COUNT(DISTINCT current_address_id) AS different_addresses FROM Students;
SELECT DISTINCT a.* FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id;
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC;
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
DESCRIBE Sections;
SELECT section_description  FROM Sections  WHERE section_name = 'h';
SELECT first_name  FROM Students  WHERE permanent_address_id IN (     SELECT address_id      FROM Addresses      WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582';
SELECT first_name  FROM Students  WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti')     OR cell_mobile_number = '09700166582';
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*)  FROM Cartoon  WHERE Written_by = 'Joseph Kuhr';
SELECT Title, Directed_by  FROM Cartoon  ORDER BY Original_air_date;
SELECT Title, Directed_by  FROM Cartoon  ORDER BY Original_air_date;
SELECT Title  FROM Cartoon  WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT Title  FROM Cartoon  WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC LIMIT 1;
SELECT Country, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Country ORDER BY Channel_Count DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name) AS different_series_names, COUNT(DISTINCT Content) AS different_contents FROM TV_Channel;
SELECT COUNT(DISTINCT series_name) AS different_series, COUNT(DISTINCT Content) AS different_contents FROM TV_Channel;
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Package_Option  FROM TV_Channel  WHERE series_name = 'Sky Radio';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT Language, COUNT(*) AS Number_of_TV_Channel FROM TV_Channel GROUP BY Language ORDER BY Number_of_TV_Channel ASC LIMIT 1;
SELECT Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC LIMIT 1;
SELECT Language, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Language;
SELECT Language, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Language;
SELECT TV_Channel.series_name  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Title = 'The Rise of the Blue Beetle';
SELECT Cartoon.Title  FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Title  FROM Cartoon  WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
SELECT Episode FROM TV_series ORDER BY Rating;
SELECT TV_series.Episode, TV_series.Rating  FROM TV_series  ORDER BY TV_series.Rating DESC;
SELECT Episode, Rating  FROM TV_series  ORDER BY Rating DESC  LIMIT 3;
SELECT Episode, Rating  FROM TV_series  ORDER BY Rating DESC  LIMIT 3;
SELECT MIN(Share) AS Minimum_Share, MAX(Share) AS Maximum_Share FROM TV_series;
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM TV_series;
SELECT Air_Date  FROM TV_series  WHERE Episode = 'A Love of a Lifetime';
SELECT Air_Date  FROM TV_series  WHERE Episode = 'A Love of a Lifetime';
SELECT TV_series.Weekly_Rank  FROM TV_series  WHERE TV_series.Episode = 'A Love of a Lifetime';
SELECT TV_series.Weekly_Rank  FROM TV_series  WHERE TV_series.Episode = 'A Love of a Lifetime';
SELECT TV_Channel.series_name  FROM TV_series  JOIN TV_Channel ON TV_series.Channel = TV_Channel.id  WHERE TV_series.Episode = 'A Love of a Lifetime';
SELECT TV_Channel.series_name  FROM TV_series  JOIN TV_Channel ON TV_series.Channel = TV_Channel.id  WHERE TV_series.Episode = 'A Love of a Lifetime';
SELECT TV_series.Episode  FROM TV_series  JOIN TV_Channel ON TV_series.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_series.Episode  FROM TV_series  JOIN TV_Channel ON TV_series.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Production_code, Channel  FROM Cartoon  ORDER BY Original_air_date DESC  LIMIT 1;
SELECT Production_code, Channel  FROM Cartoon  ORDER BY Original_air_date DESC  LIMIT 1;
SELECT Package_Option, series_name  FROM TV_Channel  WHERE Hight_definition_TV = 'Yes';
SELECT Package_Option, series_name  FROM TV_Channel  WHERE Hight_definition_TV = 'Yes';
SELECT DISTINCT TC.Country FROM TV_Channel TC JOIN Cartoon C ON TC.id = C.Channel WHERE C.Written_by = 'Todd Casey';
SELECT DISTINCT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT DISTINCT Country  FROM TV_Channel  WHERE id NOT IN (     SELECT Channel      FROM Cartoon      WHERE Written_by = 'Todd Casey' );
SELECT DISTINCT Country  FROM TV_Channel  WHERE id NOT IN (     SELECT Channel      FROM Cartoon      WHERE Written_by = 'Todd Casey' );
SELECT DISTINCT TC.series_name, TC.Country FROM TV_Channel TC JOIN Cartoon C ON TC.id = C.Channel WHERE C.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT DISTINCT TC.series_name, TC.Country FROM TV_Channel TC JOIN Cartoon C ON TC.id = C.Channel WHERE C.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT Pixel_aspect_ratio_PAR, Country  FROM TV_Channel  WHERE Language <> 'English';
SELECT Pixel_aspect_ratio_PAR, Country  FROM TV_Channel  WHERE Language != 'English';
SELECT id  FROM TV_Channel  WHERE Country IN (     SELECT Country      FROM TV_Channel      GROUP BY Country      HAVING COUNT(*) > 2 );
SELECT id  FROM TV_Channel  GROUP BY id  HAVING COUNT(*) > 2;
SELECT id  FROM TV_Channel  WHERE id NOT IN (     SELECT Channel      FROM Cartoon      WHERE Directed_by = 'Ben Jones' );
SELECT id  FROM TV_Channel  WHERE id NOT IN (     SELECT DISTINCT Channel      FROM Cartoon      WHERE Directed_by = 'Ben Jones' );
SELECT DISTINCT TC.Package_Option FROM TV_Channel TC WHERE TC.id NOT IN (     SELECT C.Channel     FROM Cartoon C     WHERE C.Directed_by = 'Ben Jones' );
SELECT DISTINCT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (     SELECT Cartoon.Channel     FROM Cartoon     WHERE Cartoon.Directed_by = 'Ben Jones' );
SELECT COUNT(*) AS Total_Poker_Players FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Earnings  FROM poker_player  ORDER BY Earnings DESC;
SELECT Final_Table_Made, Best_Finish  FROM poker_player;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;
SELECT Money_Rank  FROM poker_player  WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT Money_Rank  FROM poker_player  ORDER BY Earnings DESC  LIMIT 1;
SELECT MAX(Final_Table_Made)  FROM poker_player  WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made)  FROM poker_player  WHERE Earnings < 200000;
SELECT p.Name  FROM people p  JOIN poker_player pp ON p.People_ID = pp.People_ID;
SELECT p.Name  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID;
SELECT p.Name  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID  WHERE pp.Earnings > 300000;
SELECT p.Name  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID  WHERE pp.Earnings > 300000;
SELECT p.Name  FROM people p  JOIN poker_player pp ON p.People_ID = pp.People_ID  ORDER BY pp.Final_Table_Made ASC;
SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID GROUP BY p.Name ORDER BY COUNT(pp.Final_Table_Made) ASC;
SELECT p.Birth_Date  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID  ORDER BY pp.Earnings ASC  LIMIT 1;
SELECT p.Birth_Date  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID  ORDER BY pp.Earnings ASC  LIMIT 1;
SELECT pp.Money_Rank  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID  ORDER BY p.Height DESC  LIMIT 1;
SELECT pp.Money_Rank FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY p.Height DESC LIMIT 1;
SELECT AVG(pp.Earnings) AS Average_Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height > 200;
SELECT AVG(pp.Earnings) AS Average_Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height > 200;
SELECT p.Name  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID  ORDER BY pp.Earnings DESC;
SELECT p.Name  FROM people p  JOIN poker_player pp ON p.People_ID = pp.People_ID  ORDER BY pp.Earnings DESC;
SELECT Nationality, COUNT(*) AS Number_of_People FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS NumberOfPeople FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT p.Name, p.Birth_Date  FROM people p  ORDER BY p.Name ASC;
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name  FROM people  WHERE Nationality <> 'Russia';
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT COUNT(DISTINCT Nationality) AS Distinct_Nationalities FROM people;
SELECT COUNT(DISTINCT Nationality) AS NumberOfNationalities FROM people;
SELECT COUNT(DISTINCT state) AS number_of_states FROM AREA_CODE_STATE;
SELECT contestant_number, contestant_name  FROM CONTESTANTS  ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM VOTES;
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;
SELECT MAX(created) AS last_date_created FROM VOTES WHERE state = 'CA';
SELECT contestant_name  FROM CONTESTANTS  WHERE contestant_name <> 'Jessie Alloway';
SELECT DISTINCT state, created FROM VOTES;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) >= 2;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name ORDER BY COUNT(v.vote_id) ASC LIMIT 1;
SELECT COUNT(*) AS number_of_votes FROM VOTES WHERE state IN ('NY', 'CA');
SELECT COUNT(*) AS unvoted_contestants FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT DISTINCT contestant_number FROM VOTES);
SELECT area_code FROM VOTES v JOIN AREA_CODE_STATE a ON v.state = a.state GROUP BY area_code ORDER BY COUNT(v.vote_id) DESC LIMIT 1;
SELECT V.created, V.state, V.phone_number FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling';
SELECT DISTINCT a.area_code FROM VOTES v1 JOIN VOTES v2 ON v1.phone_number = v2.phone_number AND v1.state = v2.state JOIN CONTESTANTS c1 ON v1.contestant_number = c1.contestant_number JOIN CONTESTANTS c2 ON v2.contestant_number = c2.contestant_number JOIN AREA_CODE_STATE a ON v1.state = a.state WHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss';
SELECT contestant_name  FROM CONTESTANTS  WHERE contestant_name LIKE '%Al%';
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*)  FROM country  WHERE GovernmentForm LIKE '%Republic%';
SELECT COUNT(*)  FROM country  WHERE GovernmentForm LIKE '%Republic%';
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean';
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean';
SELECT Continent FROM country WHERE Name = 'Anguilla';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT c.Region  FROM city ci  JOIN country c ON ci.CountryCode = c.Code  WHERE ci.Name = 'Kabul';
SELECT Region FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Kabul');
SELECT Language  FROM countrylanguage  WHERE CountryCode = 'ABW'  ORDER BY Percentage DESC  LIMIT 1;
SELECT Language  FROM countrylanguage  WHERE CountryCode = 'ABW'  ORDER BY Percentage DESC  LIMIT 1;
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa';
SELECT Name  FROM country  WHERE Continent = 'Asia'  ORDER BY LifeExpectancy ASC  LIMIT 1;
SELECT Name  FROM country  WHERE Continent = 'Asia'  ORDER BY LifeExpectancy ASC  LIMIT 1;
SELECT SUM(c.Population) AS TotalPopulation, MAX(c.GNP) AS MaxGNP FROM country c WHERE c.Continent = 'Asia';
SELECT SUM(c.Population) AS TotalPopulation, MAX(c.GNP) AS LargestGNP FROM country c WHERE c.Continent = 'Asia';
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(Population)  FROM city  WHERE District = 'Gelderland';
SELECT SUM(Population) AS TotalPopulation FROM city WHERE District = 'Gelderland';
SELECT AVG(GNP) AS AverageGNP, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm = 'US territory';
SELECT AVG(GNP) AS MeanGNP, SUM(Population) AS TotalPopulation FROM country WHERE Name IN ('Puerto Rico', 'Guam', 'American Samoa', 'U.S. Virgin Islands', 'Northern Mariana Islands');
SELECT COUNT(DISTINCT Language) AS UniqueLanguages FROM countrylanguage;
SELECT COUNT(DISTINCT Language) AS DistinctLanguages FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) AS NumberOfGovernmentTypes FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm)  FROM country  WHERE Continent = 'Africa';
SELECT COUNT(*) AS TotalLanguages  FROM countrylanguage  WHERE CountryCode = 'ABW';
SELECT COUNT(*)  FROM countrylanguage  WHERE CountryCode = 'ABW';
SELECT COUNT(*)  FROM countrylanguage  WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT COUNT(*)  FROM countrylanguage  WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code ORDER BY COUNT(cl.Language) DESC LIMIT 1;
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code ORDER BY COUNT(cl.Language) DESC LIMIT 1;
SELECT c.Continent, COUNT(DISTINCT cl.Language) AS LanguageCount FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY LanguageCount DESC LIMIT 1;
SELECT c.Continent, COUNT(cl.Language) AS LanguageCount FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY LanguageCount DESC LIMIT 1;
SELECT COUNT(DISTINCT cl1.CountryCode) AS CountryCount FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.CountryCode = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch';
SELECT COUNT(DISTINCT cl.CountryCode) AS NumberOfNations FROM countrylanguage cl WHERE cl.Language IN ('English', 'Dutch') GROUP BY cl.CountryCode HAVING COUNT(DISTINCT cl.Language) = 2;
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' WHERE cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French';
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';
SELECT COUNT(DISTINCT c.Continent) AS DistinctContinents FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese';
SELECT COUNT(DISTINCT c.Continent) AS ContinentCount FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese';
SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English');
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE (cl.Language = 'English' OR cl.Language = 'Dutch') AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' AND (cl.Language = 'English' OR cl.Language = 'Dutch');
SELECT Language, SUM(Percentage) AS TotalPercentage FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language ORDER BY TotalPercentage DESC LIMIT 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY COUNT(DISTINCT c.Code) DESC LIMIT 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm LIKE '%Republic%' GROUP BY cl.Language HAVING COUNT(DISTINCT c.Code) = 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm LIKE '%Republic%' GROUP BY cl.Language HAVING COUNT(DISTINCT c.Code) = 1;
SELECT c.Name  FROM city c  JOIN country co ON c.CountryCode = co.Code  JOIN countrylanguage cl ON co.Code = cl.CountryCode  WHERE cl.Language = 'English'  ORDER BY c.Population DESC  LIMIT 1;
SELECT c.Name, c.Population  FROM city c  JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode  WHERE cl.Language = 'English'  ORDER BY c.Population DESC  LIMIT 1;
SELECT Name, Population, LifeExpectancy  FROM country  WHERE Continent = 'Asia'  ORDER BY SurfaceArea DESC  LIMIT 1;
SELECT Name, Population, LifeExpectancy  FROM country  WHERE Continent = 'Asia'  ORDER BY SurfaceArea DESC  LIMIT 1;
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Code NOT IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'English' AND IsOfficial = 'T' );
SELECT AVG(LifeExpectancy) AS MeanLifeExpectancy FROM country WHERE Code NOT IN (     SELECT CountryCode     FROM countrylanguage     WHERE Language = 'English' AND IsOfficial = 'T' );
SELECT SUM(c.Population) AS TotalPopulation FROM country c WHERE c.Code NOT IN (     SELECT cl.CountryCode     FROM countrylanguage cl     WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' );
SELECT SUM(c.Population)  FROM country c  WHERE c.Code NOT IN (     SELECT cl.CountryCode      FROM countrylanguage cl      WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' );
SELECT cl.Language  FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode  WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';
SELECT cl.Language  FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode  WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT Language) AS TotalUniqueOfficialLanguages FROM countrylanguage WHERE CountryCode IN (     SELECT Code     FROM country     WHERE IndepYear < 1930 ) AND IsOfficial = 'T';
SELECT COUNT(DISTINCT Language) AS TotalOfficialLanguages FROM countrylanguage WHERE CountryCode IN (     SELECT Code     FROM country     WHERE IndepYear < 1930 AND IsOfficial = 'T' );
SELECT Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT Name  FROM country  WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Region = 'Europe');
SELECT DISTINCT c.Name FROM country c WHERE c.Continent = 'Africa' AND c.Population < (     SELECT MIN(c2.Population)     FROM country c2     WHERE c2.Continent = 'Asia' );
SELECT DISTINCT c1.Name FROM country c1 WHERE c1.Continent = 'Africa'  AND c1.Population < ALL (SELECT c2.Population FROM country c2 WHERE c2.Continent = 'Asia');
SELECT DISTINCT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (     SELECT MAX(Population)     FROM country     WHERE Continent = 'Africa' );
SELECT DISTINCT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (     SELECT MAX(Population)     FROM country     WHERE Continent = 'Africa' );
SELECT DISTINCT Code FROM country WHERE Code NOT IN (     SELECT CountryCode FROM countrylanguage WHERE Language = 'English' );
SELECT DISTINCT c.Code FROM country c WHERE c.Code NOT IN (     SELECT cl.CountryCode     FROM countrylanguage cl     WHERE cl.Language = 'English' );
SELECT DISTINCT cl.CountryCode FROM countrylanguage cl WHERE cl.Language <> 'English';
SELECT DISTINCT cl.CountryCode FROM countrylanguage cl WHERE cl.Language <> 'English';
SELECT c.Code  FROM country c  WHERE c.Code NOT IN (     SELECT cl.CountryCode      FROM countrylanguage cl      WHERE cl.Language = 'English' ) AND c.GovernmentForm NOT LIKE '%Republic%';
SELECT DISTINCT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.Language IS NULL AND c.GovernmentForm NOT LIKE '%Republic%';
SELECT c.Name  FROM city c  JOIN country co ON c.CountryCode = co.Code  WHERE co.Continent = 'Europe'  AND co.Code NOT IN (     SELECT cl.CountryCode      FROM countrylanguage cl      WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' );
SELECT c.Name  FROM city c  JOIN country co ON c.CountryCode = co.Code  LEFT JOIN countrylanguage cl ON co.Code = cl.CountryCode AND cl.Language = 'English'  WHERE co.Continent = 'Europe' AND (cl.IsOfficial IS NULL OR cl.IsOfficial = 'F');
SELECT DISTINCT c.Name  FROM city c  JOIN country co ON c.CountryCode = co.Code  JOIN countrylanguage cl ON co.Code = cl.CountryCode  WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T';
SELECT Name, IndepYear, SurfaceArea  FROM country  ORDER BY Population ASC  LIMIT 1;
SELECT Name, IndepYear, SurfaceArea  FROM country  ORDER BY Population ASC  LIMIT 1;
SELECT Population, Name, HeadOfState  FROM country  WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT Name, Population, HeadOfState  FROM country  ORDER BY SurfaceArea DESC  LIMIT 1;
SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3;
SELECT cl.CountryCode, c.Name, COUNT(cl.Language) AS LanguageCount FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code GROUP BY cl.CountryCode HAVING COUNT(cl.Language) > 2;
SELECT District, COUNT(*) AS CityCount FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
SELECT District, COUNT(*) AS CityCount FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT Continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT Name, SurfaceArea  FROM country  ORDER BY SurfaceArea DESC  LIMIT 5;
SELECT Name, SurfaceArea  FROM country  ORDER BY SurfaceArea DESC  LIMIT 5;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;
SELECT cl.CountryCode, cl.Language, MAX(cl.Percentage) AS MaxPercentage FROM countrylanguage cl GROUP BY cl.CountryCode;
SELECT cl.CountryCode, cl.Language FROM countrylanguage cl JOIN (     SELECT CountryCode, MAX(Percentage) AS MaxPercentage     FROM countrylanguage     GROUP BY CountryCode ) AS max_lang ON cl.CountryCode = max_lang.CountryCode AND cl.Percentage = max_lang.MaxPercentage;
SELECT COUNT(DISTINCT cl.CountryCode) AS TotalCountries FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.Percentage = (     SELECT MAX(Percentage)     FROM countrylanguage     WHERE CountryCode = cl.CountryCode );
SELECT COUNT(DISTINCT cl.CountryCode) AS NumberOfCountries FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T' AND cl.Percentage > 50;
SELECT CountryCode  FROM countrylanguage  WHERE Language = 'Spanish'  ORDER BY Percentage DESC  LIMIT 1;
SELECT CountryCode  FROM countrylanguage  WHERE Language = 'Spanish'  AND Percentage = (SELECT MAX(Percentage)                    FROM countrylanguage                    WHERE CountryCode = countrylanguage.CountryCode);
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age;
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT Record_Company  FROM orchestra  ORDER BY Year_of_Founded DESC;
SELECT Record_Company  FROM orchestra  ORDER BY Year_of_Founded DESC;
SELECT AVG(Attendance) AS Average_Attendance FROM show;
SELECT AVG(Attendance) AS Average_Attendance FROM show;
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type <> 'Live final';
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type <> 'Live final';
SELECT COUNT(DISTINCT Nationality) AS Different_Nationalities FROM conductor;
SELECT COUNT(DISTINCT Nationality) AS Different_Nationalities FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name, Year_of_Work FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name  FROM conductor  ORDER BY Year_of_Work DESC  LIMIT 1;
SELECT Name  FROM conductor  ORDER BY Year_of_Work DESC  LIMIT 1;
SELECT c.Name AS Conductor_Name, o.Orchestra AS Orchestra_Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name AS Conductor_Name, o.Orchestra AS Orchestra_Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;
SELECT DISTINCT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT DISTINCT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company;
SELECT Major_Record_Format, COUNT(*) AS Format_Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Format_Count ASC;
SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(DISTINCT Orchestra_ID) DESC LIMIT 1;
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(DISTINCT Orchestra_ID) DESC LIMIT 1;
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL;
SELECT DISTINCT o.Record_Company FROM orchestra o WHERE o.Year_of_Founded < 2003    OR o.Year_of_Founded > 2003;
SELECT DISTINCT o1.Record_Company FROM orchestra o1 JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company WHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded >= 2003;
SELECT COUNT(*)  FROM orchestra  WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(*)  FROM orchestra  WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT DISTINCT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID HAVING COUNT(p.Performance_ID) > 1;
SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1;
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*)  FROM Highschooler  WHERE grade IN (9, 10);
SELECT grade, COUNT(*) AS number_of_highschoolers FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) AS number_of_highschoolers FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) AS num_highschoolers FROM Highschooler GROUP BY grade ORDER BY num_highschoolers DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT h.ID, COUNT(f.friend_id) AS number_of_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID;
SELECT student_id, COUNT(friend_id) AS friend_count FROM Friend GROUP BY student_id;
SELECT h.name, COUNT(f.friend_id) AS number_of_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.name;
SELECT h.name, COUNT(f.friend_id) AS friend_count FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.name;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name ORDER BY COUNT(f.friend_id) DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name ORDER BY COUNT(f.friend_id) DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name HAVING COUNT(f.friend_id) >= 3;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name HAVING COUNT(f.friend_id) >= 3;
SELECT h2.name  FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Highschooler h2 ON f.friend_id = h2.ID WHERE h1.name = 'Kyle';
SELECT h2.name  FROM Highschooler h1  JOIN Friend f ON h1.ID = f.student_id  JOIN Highschooler h2 ON f.friend_id = h2.ID  WHERE h1.name = 'Kyle';
SELECT COUNT(*)  FROM Friend  WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) AS friend_count FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT name  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT name  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT DISTINCT h.ID FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.liked_id;
SELECT DISTINCT h.ID FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id;
SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.liked_id;
SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id;
SELECT student_id, COUNT(liked_id) AS like_count FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(liked_id) AS like_count FROM Likes GROUP BY student_id;
SELECT h.name, COUNT(l.liked_id) AS number_of_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name;
SELECT h.name, COUNT(l.liked_id) AS like_count FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name;
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID, h.name ORDER BY COUNT(l.liked_id) DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID, h.name ORDER BY COUNT(l.liked_id) DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID, h.name HAVING COUNT(l.liked_id) >= 2;
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID, h.name HAVING COUNT(l.liked_id) >= 2;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.grade > 5 GROUP BY h.ID, h.name HAVING COUNT(f.friend_id) >= 2;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.grade > 5 GROUP BY h.ID, h.name HAVING COUNT(f.friend_id) >= 2;
SELECT COUNT(*) AS likes_count  FROM Likes  WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) AS number_of_likes FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT AVG(h.grade) AS average_grade FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID;
SELECT AVG(h.grade) AS average_grade FROM Highschooler h JOIN Friend f ON h.ID = f.student_id;
SELECT MIN(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT MIN(grade) AS lowest_grade FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT DISTINCT o.state FROM Owners o JOIN Professionals p ON o.state = p.state;
SELECT DISTINCT o.state FROM Owners o JOIN Professionals p ON o.state = p.state;
SELECT AVG(age) AS average_age FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);
SELECT AVG(age) AS average_age FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.last_name, p.cell_number HAVING p.state = 'Indiana' OR COUNT(t.treatment_id) > 2;
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(treatment_id) > 2 );
SELECT d.name FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id, d.name HAVING COALESCE(SUM(t.cost_of_treatment), 0) <= 1000;
SELECT d.name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id LEFT JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id, d.name HAVING SUM(t.cost_of_treatment) <= 1000 OR SUM(t.cost_of_treatment) IS NULL;
SELECT DISTINCT first_name FROM (     SELECT first_name FROM Owners     UNION     SELECT first_name FROM Professionals ) AS Names WHERE first_name NOT IN (SELECT name FROM Dogs);
SELECT DISTINCT first_name FROM (     SELECT first_name FROM Owners     UNION     SELECT first_name FROM Professionals ) AS Names WHERE first_name NOT IN (SELECT name FROM Dogs);
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (     SELECT owner_id     FROM Dogs     GROUP BY owner_id     ORDER BY COUNT(dog_id) DESC     LIMIT 1 );
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (     SELECT owner_id     FROM Dogs     GROUP BY owner_id     ORDER BY COUNT(dog_id) DESC     LIMIT 1 );
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2;
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2;
SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT b.breed_name FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT T.treatment_type_description FROM Treatment_Types T JOIN Treatments R ON T.treatment_type_code = R.treatment_type_code GROUP BY T.treatment_type_description ORDER BY SUM(R.cost_of_treatment) ASC LIMIT 1;
SELECT T.treatment_type_description FROM Treatment_Types T JOIN Treatments R ON T.treatment_type_code = R.treatment_type_code GROUP BY T.treatment_type_description ORDER BY SUM(R.cost_of_treatment) ASC LIMIT 1;
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
SELECT DISTINCT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT DISTINCT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Treatments t ON d.dog_id = t.dog_id WHERE b.breed_code = (     SELECT breed_code     FROM Breeds     WHERE breed_code IN (         SELECT breed_code         FROM Dogs         GROUP BY breed_code         ORDER BY COUNT(*) ASC         LIMIT 1     ) );
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Treatments t ON d.dog_id = t.dog_id WHERE b.breed_code = (     SELECT breed_code     FROM Breeds     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia';
SELECT D.date_arrived, D.date_departed FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id;
SELECT D.date_arrived, D.date_departed FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id;
SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id ORDER BY d.date_of_birth DESC LIMIT 1;
SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs);
SELECT email_address  FROM Professionals  WHERE state IN ('Hawaii', 'Wisconsin');
SELECT email_address  FROM Professionals  WHERE state IN ('Hawaii', 'Wisconsin');
SELECT date_arrived, date_departed FROM Dogs;
SELECT date_arrived, date_departed FROM Dogs;
SELECT COUNT(DISTINCT dog_id) AS number_of_dogs_treated FROM Treatments;
SELECT COUNT(DISTINCT dog_id) AS number_of_dogs_treated FROM Treatments;
SELECT COUNT(DISTINCT professional_id) AS number_of_professionals FROM Treatments;
SELECT COUNT(DISTINCT professional_id) AS number_of_professionals FROM Treatments;
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT first_name, last_name, email_address  FROM Owners  WHERE state LIKE '%North%';
SELECT COUNT(*)  FROM Dogs  WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT COUNT(*) AS number_of_dogs_below_average FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT cost_of_treatment  FROM Treatments  ORDER BY date_of_treatment DESC  LIMIT 1;
SELECT cost_of_treatment  FROM Treatments  ORDER BY date_of_treatment DESC  LIMIT 1;
SELECT COUNT(*) AS dogs_without_treatment FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(*) AS number_of_dogs_without_treatment FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(*) AS owners_without_dogs FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs);
SELECT COUNT(*) AS number_of_owners FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs);
SELECT COUNT(*) AS num_professionals FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;
SELECT COUNT(*) AS num_professionals FROM Professionals p WHERE p.professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);
SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = 1;
SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = 1;
SELECT AVG(age) AS average_age FROM Dogs;
SELECT AVG(age) AS average_age FROM Dogs;
SELECT MAX(age) AS oldest_dog_age FROM Dogs;
SELECT MAX(age) AS oldest_dog_age FROM Dogs;
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges;
SELECT MAX(charge_amount) AS most_expensive_charge FROM Charges;
SELECT MAX(charge_amount) AS most_expensive_charge FROM Charges;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT B.breed_name, S.size_description FROM Breeds B CROSS JOIN Sizes S;
SELECT DISTINCT b.breed_name, s.size_description FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Sizes s ON d.size_code = s.size_code;
SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship <> 'France';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(Singer_ID) AS NumberOfSingers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;
SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;
SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID, s.Name HAVING COUNT(so.Song_ID) > 1;
SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID, s.Name HAVING COUNT(so.Song_ID) > 1;
SELECT s.Name, SUM so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name;
SELECT s.Name, SUM so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name;
SELECT Name  FROM singer  WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);
SELECT Name AS sname  FROM singer  WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);
SELECT DISTINCT Citizenship  FROM singer  WHERE Birth_Year < 1945 OR Birth_Year > 1955;
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship HAVING COUNT(*) > 1;
SELECT COUNT(*) AS total_available_features FROM Other_Available_Features;
SELECT rft.feature_type_name  FROM Other_Available_Features oaf  JOIN Ref_Feature_Types rft ON oaf.feature_type_code = rft.feature_type_code  WHERE oaf.feature_name = 'AirCon';
SELECT rpt.property_type_description FROM Properties p JOIN Ref_Property_Types rpt ON p.property_type_code = rpt.property_type_code WHERE p.property_type_code = 'your_code_here';
SELECT property_name  FROM Properties  WHERE room_count > 1  AND property_type_code IN (     SELECT property_type_code      FROM Ref_Property_Types      WHERE property_type_description IN ('House', 'Apartment') );
