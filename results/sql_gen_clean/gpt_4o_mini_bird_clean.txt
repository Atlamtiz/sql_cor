SELECT movie_title  FROM movies  WHERE movie_release_year = 1945  ORDER BY movie_popularity DESC;
SELECT movie_title, movie_release_year, director_name  FROM movies  WHERE movie_popularity = (SELECT MAX(movie_popularity) FROM movies);
SELECT movie_title, movie_release_year  FROM movies  WHERE LENGTH(movie_title) = (SELECT MAX(LENGTH(movie_title)) FROM movies);
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id GROUP BY m.movie_id ORDER BY SUM(r.rating_score) DESC LIMIT 1;
SELECT AVG(m.movie_popularity) AS average_users_loving_kubrick_movies FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.director_name = 'Stanley Kubrick';
SELECT AVG(r.rating_score) AS average_rating FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'When Will I Be Loved';
SELECT      ru.user_avatar_image_url,      m.movie_title  FROM      ratings_users ru  JOIN      ratings r ON ru.user_id = r.user_id  JOIN      movies m ON r.movie_id = m.movie_id  WHERE      ru.user_id = 41579158  ORDER BY      r.rating_timestamp_utc DESC  LIMIT 1;
SELECT      (SUM(CASE WHEN user_subscriber = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percent FROM      ratings;
SELECT m.movie_title FROM ratings r JOIN ratings_users ru ON r.user_id = ru.user_id JOIN movies m ON r.movie_id = m.movie_id WHERE r.rating_timestamp_utc LIKE '%2020-04-%' AND ru.user_trialist = 1;
SELECT r.user_id FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'Love Will Tear Us Apart' AND r.rating_score = 1;
SELECT m.movie_title, m.movie_popularity FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.rating_score = 5;
SELECT DISTINCT m.movie_title FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.rating_timestamp_utc LIKE '%2020%' AND r.rating_score >= 4;
SELECT     m.movie_title,     r.user_id,     r.rating_score,     r.critic_comments FROM     movies m JOIN     ratings r ON m.movie_id = r.movie_id WHERE     r.critic IS NOT NULL;
SELECT     (SUM(rating_score = 5) * 100.0 / COUNT(rating_score)) AS percentage_highest_score FROM     ratings r JOIN     movies m ON r.movie_id = m.movie_id WHERE     m.movie_title = 'Welcome to the Dollhouse';
SELECT     (SUM(CASE WHEN m.movie_release_year = 2021 THEN 1 ELSE 0 END) * 100.0 / COUNT(r.rating_id)) AS percent FROM     ratings r JOIN     movies m ON r.movie_id = m.movie_id;
SELECT director_name FROM movies WHERE movie_title = 'Sex, Drink and Bloodshed';
SELECT list_title FROM lists ORDER BY list_followers DESC LIMIT 1;
SELECT list_url FROM lists WHERE list_followers IN (1, 2) AND list_update_timestamp_utc BETWEEN '2012-01-01' AND '2012-12-31';
SELECT list_id FROM lists WHERE user_id = 85981819 ORDER BY list_creation_timestamp_utc ASC LIMIT 1;
SELECT COUNT(DISTINCT user_id) FROM ratings WHERE movie_id = 1269   AND user_has_payment_method = 1   AND user_eligible_for_trial = 1   AND rating_score <= 2;
SELECT movie_title, movie_popularity FROM movies WHERE movie_release_year = 2021 AND director_name = 'Steven Spielberg';
SELECT movie_title, director_name, movie_release_year FROM movies WHERE movie_release_year = (SELECT MIN(movie_release_year) FROM movies);
SELECT DISTINCT lu.user_id FROM lists_users lu JOIN lists l ON lu.list_id = l.list_id WHERE lu.user_subscriber = 1 AND lu.list_creation_date_utc BETWEEN DATE_SUB(CURDATE(), INTERVAL 10 YEAR) AND CURDATE() GROUP BY lu.user_id HAVING COUNT(DISTINCT YEAR(lu.list_creation_date_utc)) = 10;
SELECT COUNT(*) FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'Pavee Lackeen: The Traveller Girl') AND rating_score = 4;
SELECT l.list_followers, lu.user_eligible_for_trial FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE l.list_title = 'World War 2 and Kids';
SELECT m.movie_release_year, r.user_id FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.director_name = 'Quentin Tarantino' ORDER BY m.movie_release_year LIMIT 1 OFFSET 2;
SELECT m.director_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.user_id = 2452551 AND r.critic_likes = 39;
SELECT AVG(r.rating_score) AS average_rating, m.director_name FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_title = 'When Will I Be Loved' GROUP BY m.director_name;
SELECT l.list_movie_number,        CASE WHEN lu.user_has_payment_method = 1 THEN 'Paying Subscriber'             ELSE 'Not a Paying Subscriber' END AS subscription_status FROM lists l JOIN lists_users lu ON l.user_id = lu.user_id AND l.list_id = lu.list_id WHERE l.list_movie_number = (SELECT MAX(list_movie_number) FROM lists);
SELECT m.movie_title FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.critic_likes = (     SELECT MAX(critic_likes)     FROM ratings     WHERE user_id = r.user_id AND movie_id = r.movie_id )
SELECT     m.movie_popularity,     MIN(r.rating_timestamp_utc) AS first_rating_score_1_date FROM     movies m JOIN     ratings r ON m.movie_id = r.movie_id WHERE     m.movie_release_year BETWEEN 1920 AND 1929     AND r.rating_score = 1     AND r.user_has_payment_method = 1 GROUP BY     m.movie_id ORDER BY     m.movie_popularity DESC LIMIT 1;
SELECT COUNT(m.movie_id) AS movie_count,        m.movie_title,        MAX(r.critic_likes) AS max_critic_likes FROM movies m LEFT JOIN ratings r ON m.movie_id = r.movie_id WHERE m.director_name = 'Francis Ford Coppola'   AND m.movie_popularity > 1000 GROUP BY m.movie_id, m.movie_title;
SELECT user_avatar_image_url FROM ratings WHERE movie_id = 1103 AND rating_score = 5 AND rating_date_utc = '2020-04-19';
SELECT l.list_id, l.list_title, l.list_followers, lu.user_subscriber FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE l.user_id = 4208563 ORDER BY l.list_followers DESC LIMIT 1;
SELECT movie_release_year, movie_title FROM movies JOIN ratings ON movies.movie_id = ratings.movie_id WHERE movie_release_year = (     SELECT movie_release_year     FROM movies     GROUP BY movie_release_year     ORDER BY COUNT(movie_id) ASC     LIMIT 1 ) AND rating_score = '1' GROUP BY movie_title ORDER BY COUNT(rating_score) DESC LIMIT 1;
SELECT COUNT(DISTINCT r.user_id) AS user_count FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_release_year = 1924   AND m.director_name = 'Erich von Stroheim'   AND r.rating_score = 5   AND r.user_has_payment_method = 1;
SELECT AVG(list_movie_number) AS average_movies_added, user_avatar_image_url FROM lists JOIN ratings_users ON lists.user_id = ratings_users.user_id WHERE lists.user_id = 8516503;
SELECT COUNT(DISTINCT r.user_id) AS user_count, r.rating_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'The Magnificent Ambersons' AND r.rating_score <= 2;
SELECT COUNT(DISTINCT lu.user_id) AS eligible_users,        lu.user_id FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE l.list_creation_timestamp_utc BETWEEN '2016-02-01' AND '2016-02-29'   AND lu.user_eligible_for_trial = 1 GROUP BY lu.user_id ORDER BY MAX(l.list_followers) DESC LIMIT 1;
SELECT rating_url FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'Riff-Raff') AND user_id = 22030372 ORDER BY rating_score DESC LIMIT 1;
SELECT d.director_name, m.movie_title FROM (     SELECT director_id, director_name, COUNT(movie_id) AS movie_count     FROM movies     WHERE movie_release_year BETWEEN 1960 AND 1985     GROUP BY director_id, director_name     HAVING COUNT(movie_id) >= 10 ) AS d JOIN movies AS m ON d.director_id = m.director_id JOIN ratings AS r ON m.movie_id = r.movie_id WHERE r.rating_score = 5 AND m.movie_release_year BETWEEN 1960 AND 1985 GROUP BY d.director_id, d.director_name ORDER BY COUNT(r.rating_score) DESC LIMIT 1;
SELECT COUNT(DISTINCT r.user_id) AS user_count FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'The South'   AND r.user_trialist = 0   AND r.rating_score < 2;
SELECT critic_likes FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'Apocalypse Now') AND rating_score = '5';
SELECT AVG(r.rating_score) AS average_rating, m.director_name FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_title = 'The Crowd' GROUP BY m.director_name;
SELECT     MIN(movies.movie_release_year) AS first_movie_release_year,     ratings.user_id AS user_id_with_most_comments FROM     movies JOIN     (SELECT director_id, COUNT(*) AS movie_count      FROM movies      GROUP BY director_id      ORDER BY movie_count DESC      LIMIT 1) AS top_director ON movies.director_id = top_director.director_id JOIN     ratings ON movies.movie_id = ratings.movie_id GROUP BY     ratings.user_id ORDER BY     COUNT(ratings.critic_comments) DESC LIMIT 1;
SELECT m.movie_title, MAX(r.rating_score) AS highest_rating_score FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_popularity BETWEEN 400 AND 500 GROUP BY m.movie_title;
SELECT rating_url FROM ratings WHERE user_id = 45579900 AND movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'The Vertical Ray of the Sun') AND critic_likes = '20';
SELECT     m.movie_title,     AVG(m.movie_popularity) AS average_popularity,     COUNT(CASE WHEN r.rating_score = 5 THEN 1 END) AS five_star_count FROM     movies m LEFT JOIN     ratings r ON m.movie_id = r.movie_id WHERE     m.director_name = 'Christopher Nolan' GROUP BY     m.movie_title ORDER BY     five_star_count DESC LIMIT 1;
SELECT m.movie_title, AVG(r.rating_score) AS average_rating_score FROM ratings r JOIN movies m ON r.movie_id = m.movie_id JOIN lists l ON l.user_id = r.user_id WHERE r.rating_timestamp_utc BETWEEN '2013-01-01' AND '2013-12-31' AND l.list_title = '100 Greatest Living American Filmmakers' GROUP BY m.movie_title;
SELECT AVG(r.rating_score) AS average_rating_score, m.movie_release_year FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_title = 'Pavee Lackeen: The Traveller Girl';
SELECT COUNT(*) FROM lists WHERE list_update_timestamp_utc > (list_creation_timestamp_utc + INTERVAL '10 years');
SELECT list_description FROM lists WHERE list_title = 'Short and pretty damn sweet';
SELECT list_url FROM lists WHERE list_title = 'Short and pretty damn sweet';
SELECT COUNT(*) FROM lists WHERE list_update_timestamp_utc > '2010-01-01' AND list_followers > 200;
SELECT COUNT(*) FROM lists JOIN lists_users ON lists.list_id = lists_users.list_id WHERE lists_users.user_id = 83373278 AND lists_users.user_subscriber = 1;
SELECT movie_release_year FROM movies WHERE movie_title = 'La Antena';
SELECT movie_url FROM movies WHERE movie_title = 'La Antena';
SELECT movie_title, movie_popularity FROM movies WHERE movie_title IN ('The General', 'Il grido') ORDER BY movie_popularity DESC LIMIT 1;
SELECT COUNT(*) FROM movies WHERE director_name = 'Hong Sang-soo';
SELECT lu.user_trialist FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE l.list_title = '250 Favourite Films';
SELECT list_title FROM lists WHERE user_id = 32172230 AND list_creation_timestamp_utc IN (     SELECT list_creation_date_utc     FROM lists_users     WHERE user_id = 32172230     AND user_eligible_for_trial = 1 );
SELECT COUNT(*) FROM lists WHERE user_id = 85981819   AND list_movie_number > 100   AND list_creation_timestamp_utc IN (       SELECT list_creation_date_utc       FROM lists_users       WHERE user_id = 85981819         AND user_has_payment_method = 1   );
SELECT list_description FROM lists WHERE user_id = 85981819 ORDER BY list_followers DESC LIMIT 1;
SELECT list_update_timestamp_utc FROM lists WHERE list_title = '250 Favourite Films';
SELECT l.user_avatar_image_url FROM lists l WHERE l.list_title = '250 Favourite Films';
SELECT COUNT(*) - 1 AS additional_lists_created FROM lists WHERE user_id = (SELECT user_id FROM lists WHERE list_title = '250 Favourite Films');
SELECT COUNT(DISTINCT user_id) AS users_liked FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'A Way of Life') AND rating_score = 5;
SELECT r.critic, r.critic_likes, r.critic_comments FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'A Way of Life' AND r.user_id IS NOT NULL;
SELECT COUNT(DISTINCT critic) FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'Imitation of Life') AND critic_likes > 1;
SELECT user_id FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'When Will I Be Loved') AND critic_comments = 2;
SELECT rating_timestamp_utc FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'A Way of Life' AND ratings.user_id = 39115684;
SELECT r.rating_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.user_id = 39115684 AND m.movie_title = 'When Will I Be Loved';
SELECT user_trialist FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'A Way of Life' AND ratings.user_id = 39115684;
SELECT COUNT(DISTINCT r.user_id) AS trialist_count FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'A Way of Life' AND r.user_trialist = 1;
SELECT rating_url FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'A Way of Life') AND critic IS NOT NULL;
SELECT COUNT(DISTINCT r.user_id) AS user_count FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_popularity = (SELECT MAX(movie_popularity) FROM movies);
SELECT m.movie_title FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.user_id = 58149469 AND r.critic_likes = 1 AND r.critic_comments = 2;
SELECT COUNT(DISTINCT r.user_id) AS trialist_count FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'When Will I Be Loved'   AND r.user_trialist = 1   AND r.rating_score = 1;
SELECT COUNT(*) FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'A Way of Life') AND rating_timestamp_utc > '2011-01-01';
SELECT r.rating_score FROM ratings r JOIN lists l ON l.user_id = r.user_id WHERE l.list_title = '250 Favourite Films' AND l.list_id IN (SELECT list_id FROM lists WHERE list_title = '250 Favourite Films') AND r.movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'Innocence Unprotected');
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id JOIN lists l ON l.list_id = r.list_id WHERE l.list_title = '250 Favourite Films' AND l.user_id = r.user_id;
SELECT AVG(rating_score) AS average_rating_score FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'A Way of Life';
SELECT     (COUNT(CASE WHEN r.rating_score = 1 THEN 1 END) * 100.0 / COUNT(r.rating_id)) AS percentage FROM     ratings r JOIN     movies m ON r.movie_id = m.movie_id WHERE     m.movie_title = 'When Will I Be Loved';
SELECT     (SELECT AVG(rating_score)      FROM ratings      JOIN movies ON ratings.movie_id = movies.movie_id      WHERE movies.movie_title = 'Innocence Unprotected') -     (SELECT AVG(rating_score)      FROM ratings      JOIN movies ON ratings.movie_id = movies.movie_id      WHERE movies.movie_title = 'When Will I Be Loved') AS average_rating_difference;
SELECT director_name FROM movies WHERE movie_title = 'Tokyo Eyes';
SELECT COUNT(*) FROM movies WHERE movie_release_year = 2007;
SELECT movie_title FROM movies WHERE movie_release_year = 2006 ORDER BY movie_popularity DESC LIMIT 1;
SELECT COUNT(*) FROM movies WHERE director_name = 'Åke Sandgren';
SELECT movie_title FROM movies WHERE director_name = 'Álex de la Iclesia' ORDER BY movie_popularity DESC LIMIT 1;
SELECT movie_release_year FROM movies WHERE movie_title = 'Cops';
SELECT director_id FROM movies WHERE movie_title = "It's Winter";
SELECT user_id FROM lists WHERE list_followers = (SELECT MAX(list_followers) FROM lists);
SELECT list_title FROM lists ORDER BY list_comments DESC LIMIT 1;
SELECT movie_title, MAX(rating_score) AS highest_score FROM movies JOIN ratings ON movies.movie_id = ratings.movie_id WHERE movies.movie_release_year = 2008 GROUP BY movie_title ORDER BY highest_score DESC LIMIT 1;
SELECT movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id ORDER BY r.critic_likes DESC LIMIT 3;
SELECT COUNT(DISTINCT l.user_id) AS user_count FROM lists l WHERE l.list_followers > 100 AND YEAR(l.list_creation_timestamp_utc) = 2009;
SELECT COUNT(DISTINCT user_id) FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'White Night Wedding') AND rating_score = 5;
SELECT lu.user_cover_image_url FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE l.list_title = 'Georgia related films';
SELECT l.list_followers FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE lu.user_avatar_image_url = 'https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214';
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.user_id = 94978 AND r.rating_score = 5;
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_release_year = 2003 AND r.user_id = 2941;
SELECT COUNT(DISTINCT r.user_id) AS non_trialist_users FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'Patti Smith: Dream of Life' AND r.user_trialist = 0;
SELECT m.movie_id, m.movie_title, AVG(r.rating_score) AS average_score FROM movies m JOIN ratings r ON m.movie_id = r.movie_id GROUP BY m.movie_id, m.movie_title ORDER BY average_score DESC LIMIT 1;
SELECT movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id ORDER BY r.critic_comments DESC LIMIT 3;
SELECT l.list_title, lu.user_avatar_image_url FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE lu.user_id = 85981819 ORDER BY l.list_creation_timestamp_utc ASC LIMIT 1;
SELECT m.movie_title FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.rating_timestamp_utc LIKE '2020%' GROUP BY m.movie_title ORDER BY COUNT(r.rating_id) DESC LIMIT 1;
SELECT AVG(rating_score) AS average_score FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'Versailles Rive-Gauche';
SELECT m.movie_title FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.user_id = 59988436 AND r.critic_comments = 21;
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.critic_likes > 20;
SELECT AVG(rating_score) AS average_score FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'The Fall of Berlin' AND YEAR(ratings.rating_timestamp_utc) = 2019;
SELECT (COUNT(CASE WHEN r.rating_score > 3 THEN 1 END) * 100.0 / COUNT(r.rating_score)) AS percentage FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'Patti Smith: Dream of Life';
SELECT m.movie_title, AVG(r.rating_score) AS average_score FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.director_name = 'Abbas Kiarostami' GROUP BY m.movie_id, m.movie_title ORDER BY average_score DESC LIMIT 1;
SELECT movie_release_year FROM movies GROUP BY movie_release_year ORDER BY COUNT(movie_id) DESC LIMIT 1;
SELECT director_id FROM movies GROUP BY director_id ORDER BY COUNT(movie_id) DESC LIMIT 1;
SELECT COUNT(*) FROM movies WHERE director_id = (     SELECT director_id     FROM movies     WHERE movie_popularity = (SELECT MAX(movie_popularity) FROM movies) );
SELECT COUNT(DISTINCT user_id) AS paying_subscribers FROM ratings WHERE user_has_payment_method = 1 AND rating_timestamp_utc > '2014-01-01';
SELECT l.user_id FROM lists l JOIN ratings_users ru ON l.user_id = ru.user_id WHERE l.list_followers = 0 ORDER BY l.list_creation_timestamp_utc ASC LIMIT 1;
SELECT lu.user_id, lu.user_subscriber AS number_of_followers FROM lists_users lu GROUP BY lu.user_id ORDER BY COUNT(lu.list_id) DESC LIMIT 1;
SELECT list_followers FROM lists WHERE list_title = 'Non-American Films about World War II';
SELECT COUNT(DISTINCT user_id) FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'Downfall') AND rating_score = 4;
SELECT m.movie_title FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.rating_score = 5 GROUP BY m.movie_title ORDER BY COUNT(r.rating_id) DESC LIMIT 1;
SELECT movie_title FROM movies JOIN ratings ON movies.movie_id = ratings.movie_id ORDER BY critic_comments DESC LIMIT 1;
SELECT user_avatar_image_url FROM ratings WHERE rating_timestamp_utc = '2019/10/17 1:36:36';
SELECT lu.user_avatar_image_url FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE l.list_title = 'Vladimir Vladimirovich Nabokov';
SELECT lu.user_id, lu.user_has_payment_method FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE l.list_movie_number = (SELECT MAX(list_movie_number) FROM lists) LIMIT 1;
SELECT user_avatar_image_url FROM ratings WHERE rating_score = 5 GROUP BY user_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(critic) AS critic_count FROM ratings WHERE movie_id = (     SELECT movie_id     FROM movies     ORDER BY movie_popularity DESC     LIMIT 1 );
SELECT user_id FROM ratings WHERE rating_score = 4   AND movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'Freaks')   AND rating_timestamp_utc = '2013-05-04 06:33:32';
SELECT movie_url FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE rating_score = 5 AND rating_timestamp_utc = '2013-05-03 05:11:17';
SELECT COUNT(*) FROM ratings WHERE movie_id = (     SELECT movie_id     FROM movies     WHERE movie_release_year = '1998'     ORDER BY movie_popularity DESC     LIMIT 1 ) AND rating_score = 4;
SELECT m.movie_id, m.movie_title, COUNT(r.rating_id) AS rating_count FROM movies m LEFT JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_popularity > 13000 GROUP BY m.movie_id, m.movie_title ORDER BY rating_count ASC LIMIT 1;
SELECT COUNT(DISTINCT r.user_id) AS paying_subscriber_count FROM ratings r JOIN ratings_users ru ON r.user_id = ru.user_id WHERE r.movie_id = 'One Flew Over the Cuckoo''s Nest' AND ru.user_has_payment_method = 1;
SELECT COUNT(DISTINCT l.user_id) AS paying_subscriber_count FROM lists l JOIN ratings_users ru ON l.user_id = ru.user_id WHERE l.list_followers > 3000 AND ru.user_has_payment_method = 1;
SELECT m.movie_title, COUNT(r.rating_id) AS total_ratings FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_release_year = '1988' GROUP BY m.movie_id ORDER BY total_ratings DESC LIMIT 1;
SELECT COUNT(*) AS low_ratings_count FROM ratings WHERE movie_id = (     SELECT movie_id     FROM movies     WHERE movie_release_year = '1995'     ORDER BY movie_popularity DESC     LIMIT 1 ) AND rating_score < 3;
SELECT     (COUNT(CASE WHEN r.rating_score = 5 THEN 1 END) * 100.0 / COUNT(r.rating_score)) AS percentage FROM     ratings r JOIN     movies m ON r.movie_id = m.movie_id WHERE     m.movie_title = 'Go Go Tales';
SELECT     (COUNT(CASE WHEN r.user_subscriber = 1 THEN 1 END) * 100.0 / COUNT(r.user_subscriber)) AS subscriber_rating_percentage FROM     ratings r JOIN     movies m ON r.movie_id = m.movie_id WHERE     m.movie_title = 'G.I. Jane';
SELECT     (COUNT(CASE WHEN r.user_has_payment_method = 1 THEN 1 END) * 100.0 / COUNT(*)) AS subscriber_percentage FROM     ratings r JOIN     movies m ON r.movie_id = m.movie_id WHERE     m.movie_title = 'A Shot in the Dark';
SELECT list_title FROM lists WHERE user_id = 4208563;
SELECT list_id, list_title, MAX(list_update_timestamp_utc) AS most_recent_update FROM lists WHERE list_creation_timestamp_utc LIKE '2016%' GROUP BY list_id, list_title ORDER BY most_recent_update DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN user_subscriber = 1 THEN 1 END) * 100.0 / COUNT(list_id)) AS subscriber_percentage FROM     lists_users JOIN     lists ON lists_users.list_id = lists.list_id;
SELECT l.list_title FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE lu.user_subscriber = 1;
SELECT l.list_title FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE lu.user_eligible_for_trial = 1;
SELECT COUNT(*) AS subscriber_lists_count FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE l.list_followers >= 1 AND lu.user_subscriber = 1;
SELECT AVG(list_followers) AS average_followers FROM lists WHERE list_movie_number > 200;
SELECT l.list_title FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE lu.user_subscriber = 1 AND l.list_movie_number < 50;
SELECT list_title,        CURRENT_TIMESTAMP - MIN(list_update_timestamp_utc) AS time_since_last_update FROM lists GROUP BY list_title ORDER BY MIN(list_update_timestamp_utc) ASC LIMIT 1;
SELECT lu.user_id, lu.user_subscriber FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE l.list_title = 'Sound and Vision';
SELECT list_title,        SUBTRACT(CURRENT_TIMESTAMP, list_creation_timestamp_utc) AS creation_duration FROM lists WHERE list_followers > 200;
SELECT     (COUNT(m.movie_id) - COUNT(r.movie_id)) * 100.0 / COUNT(m.movie_id) AS percentage_unrated FROM     movies m LEFT JOIN     ratings r ON m.movie_id = r.movie_id WHERE     m.movie_id IN (SELECT movie_id FROM lists WHERE list_id = :list_id);
SELECT m.movie_title, r.rating_timestamp_utc AS rating_date, r.rating_score FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.user_id = 39115684;
SELECT COUNT(*) FROM movies WHERE movie_release_year BETWEEN 1970 AND 1980 AND movie_popularity > 11000;
SELECT COUNT(*) FROM movies WHERE director_name = 'Felipe Cazals' AND movie_release_year = 1976;
SELECT director_url FROM movies WHERE movie_title = 'Red Blooded American Girl';
SELECT list_title FROM lists ORDER BY list_update_timestamp_utc DESC LIMIT 1;
SELECT user_id FROM lists WHERE list_comments = 142;
SELECT m.movie_title, AVG(r.rating_score) AS average_rating_score FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.director_name = 'Jeannot Szwarc' GROUP BY m.movie_id, m.movie_title ORDER BY m.movie_popularity DESC LIMIT 1;
SELECT director_name, COUNT(T1.movie_id) AS movie_count, MAX(T2.rating_score) AS highest_rating FROM movies T1 LEFT JOIN ratings T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_release_year BETWEEN 1970 AND 1979 GROUP BY director_name HAVING COUNT(T1.movie_id) = (     SELECT MAX(movie_count)     FROM (         SELECT COUNT(movie_id) AS movie_count         FROM movies         WHERE movie_release_year BETWEEN 1970 AND 1979         GROUP BY director_id     ) AS subquery );
SELECT COUNT(DISTINCT lu.user_id) AS trialist_users FROM lists_users lu JOIN ratings r ON lu.user_id = r.user_id JOIN movies m ON r.movie_id = m.movie_id WHERE lu.user_trialist = 1   AND r.rating_score = 3   AND m.movie_title = 'The Secret Life of Words'   AND r.rating_timestamp_utc BETWEEN '2010-01-01' AND '2020-12-31';
SELECT m.movie_title, r.rating_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.critic_likes = (SELECT MAX(critic_likes) FROM ratings);
SELECT m.movie_id, m.movie_title, m.movie_release_year, m.movie_popularity, COUNT(r.rating_id) AS five_star_ratings FROM movies m LEFT JOIN ratings r ON m.movie_id = r.movie_id AND r.rating_score = 5 WHERE m.movie_release_year >= 2000 GROUP BY m.movie_id, m.movie_title, m.movie_release_year, m.movie_popularity ORDER BY m.movie_popularity DESC LIMIT 5;
SELECT AVG(l.list_followers) AS average_followers FROM lists l JOIN ratings r ON l.user_id = r.user_id JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'Pavee Lackeen: The Traveller Girl' AND r.rating_timestamp_utc = '2011-03-27 02:06:34';
SELECT COUNT(DISTINCT r.user_id) AS eligible_users_count, m.movie_image_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.rating_timestamp_utc BETWEEN '2017-01-01 00:00:00' AND '2017-12-31 00:00:00' AND r.user_eligible_for_trial = 1 AND m.movie_title = 'Patti Smith: Dream of Life';
SELECT     AVG(list_movie_number) AS average_movies_added,     COUNT(CASE WHEN rating_score = 5 THEN 1 END) AS movies_rated_5 FROM     lists LEFT JOIN     ratings ON lists.user_id = ratings.user_id WHERE     lists.user_id = 8516503;
SELECT m.director_name, m.movie_release_year, AVG(r.rating_score) AS average_rating_score FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_popularity = (SELECT MAX(movie_popularity) FROM movies) AND r.user_trialist = 1 GROUP BY m.director_name, m.movie_release_year;
SELECT m.movie_title FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.user_id = 57756708 AND r.rating_timestamp_utc = (SELECT MAX(rating_timestamp_utc) FROM ratings WHERE user_id = 57756708);
SELECT     M.movie_title,     M.movie_release_year,     M.director_name,     AVG(R.rating_score) AS average_rating_score FROM     movies M LEFT JOIN     ratings R ON M.movie_id = R.movie_id GROUP BY     M.movie_id, M.movie_title, M.movie_release_year, M.director_name ORDER BY     M.movie_release_year ASC LIMIT 10;
SELECT ord_date, SUM(qty) AS total_order_quantity FROM sales GROUP BY ord_date ORDER BY total_order_quantity DESC LIMIT 1;
SELECT title_id FROM sales WHERE YEAR(ord_date) = 1992 GROUP BY title_id ORDER BY SUM(qty) DESC LIMIT 1;
SELECT t.title, t.price, t.pubdate FROM titles t JOIN sales s ON t.title_id = s.title_id WHERE s.payterms = 'ON invoice';
SELECT title FROM titles JOIN roysched ON titles.title_id = roysched.title_id WHERE roysched.royalty >= 10 AND roysched.lorange <> 0;
SELECT t.title, ta.royaltyper FROM titles t JOIN roysched r ON t.title_id = r.title_id JOIN titleauthor ta ON t.title_id = ta.title_id WHERE t.title_id = 'BU2075' AND r.lorange > 10000 AND r.hirange < 50000;
SELECT t.title, r.lorange FROM titles t JOIN roysched r ON t.title_id = r.title_id ORDER BY r.royalty DESC LIMIT 1;
SELECT titles.title, publishers.pub_name FROM titles JOIN publishers ON titles.pub_id = publishers.pub_id WHERE publishers.country = 'USA';
SELECT r.royalty FROM titles t JOIN roysched r ON t.title_id = r.title_id WHERE t.ytd_sales = (SELECT MAX(ytd_sales) FROM titles WHERE ytd_sales < 20000);
SELECT titles.title, titles.notes, publishers.pub_name FROM titles JOIN publishers ON titles.pub_id = publishers.pub_id WHERE YEAR(titles.pubdate) = 1991;
SELECT t.title FROM titles t JOIN sales s ON t.title_id = s.title_id JOIN stores st ON s.stor_id = st.stor_id WHERE s.qty > 20 AND st.state = 'CA';
SELECT stor_id, MAX(qty) AS highest_quantity FROM sales GROUP BY stor_id ORDER BY highest_quantity DESC LIMIT 1;  SELECT title_id, MIN(qty) AS least_quantity FROM sales WHERE stor_id = (SELECT stor_id                  FROM sales                  GROUP BY stor_id                  ORDER BY SUM(qty) DESC                  LIMIT 1) GROUP BY title_id;
SELECT t.title, p.pub_name, r.royalty FROM titles t JOIN publishers p ON t.pub_id = p.pub_id JOIN roysched r ON t.title_id = r.title_id WHERE t.title_id = 'BU 2075';
SELECT stor_name,        (SUM(CASE WHEN payterms = 'Net 30' THEN qty ELSE 0 END) * 100.0 / SUM(qty)) AS percentage_net_30 FROM stores JOIN sales ON stores.stor_id = sales.stor_id WHERE stores.stor_id = '7066' GROUP BY stor_name;
SELECT pub_name, AVG(ytd_sales) AS average_ytd_sales FROM publishers JOIN titles ON publishers.pub_id = titles.pub_id WHERE publishers.pub_id = 877;
SELECT fname, minit, lname FROM employee WHERE YEAR(hire_date) < 1990;
SELECT fname, lname, hire_date FROM employee WHERE job_lvl = (SELECT MIN(job_lvl) FROM employee);
SELECT YEAR(hire_date) AS hire_year, COUNT(emp_id) AS employee_count FROM employee GROUP BY YEAR(hire_date) ORDER BY employee_count DESC LIMIT 1;
SELECT e.emp_id, e.fname, e.lname, e.job_id, e.job_lvl FROM employee e JOIN jobs j ON e.job_id = j.job_id WHERE e.job_lvl = j.max_lvl;
SELECT e.fname, e.lname, e.hire_date FROM employee e JOIN jobs j ON e.job_id = j.job_id WHERE j.job_desc = 'Chief Executive Officer';
SELECT e.fname, e.lname, p.pub_name FROM employee e JOIN publishers p ON e.pub_id = p.pub_id WHERE p.country != 'USA';
SELECT e.fname, e.lname, j.job_desc FROM employee e JOIN jobs j ON e.job_id = j.job_id JOIN publishers p ON e.pub_id = p.pub_id WHERE p.pub_name = 'GGG&G';
SELECT p.pub_name, t.type FROM publishers p JOIN titles t ON p.pub_id = t.pub_id ORDER BY p.pub_name;
SELECT pub_name FROM publishers JOIN titles ON publishers.pub_id = titles.pub_id WHERE YEAR(pubdate) = 1991 GROUP BY publishers.pub_id, pub_name ORDER BY COUNT(titles.title_id) DESC LIMIT 1;
SELECT title FROM titles WHERE pub_id = (SELECT pub_id FROM publishers WHERE pub_name = 'Binnet & Hardley') ORDER BY price DESC LIMIT 1;
SELECT e.fname, e.lname, j.job_desc FROM employee e JOIN jobs j ON e.job_id = j.job_id WHERE e.job_lvl > 200;
SELECT a.au_lname, a.au_fname FROM authors a JOIN titleauthor ta ON a.au_id = ta.au_id JOIN titles t ON ta.title_id = t.title_id WHERE t.type = 'business';
SELECT t.title, t.ytd_sales FROM titles t JOIN titleauthor ta ON t.title_id = ta.title_id JOIN authors a ON ta.au_id = a.au_id WHERE a.contract = 0;
SELECT t.title FROM authors a JOIN titleauthor ta ON a.au_id = ta.au_id JOIN titles t ON ta.title_id = t.title_id WHERE a.state = 'CA' AND a.contract = 0 ORDER BY t.ytd_sales DESC LIMIT 1;
SELECT a.au_fname, a.au_lname FROM authors a JOIN titleauthor ta ON a.au_id = ta.au_id JOIN titles t ON ta.title_id = t.title_id WHERE t.title = 'Sushi, Anyone?' AND a.contract = 1;
SELECT (COUNT(CASE WHEN j.job_desc IN ('Editor', 'Designer') THEN 1 END) * 100.0) / COUNT(e.emp_id) AS percentage FROM employee e JOIN jobs j ON e.job_id = j.job_id;
SELECT t.title FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE t.ytd_sales > (SELECT AVG(ytd_sales) FROM titles) ORDER BY p.pub_name;
SELECT COUNT(*) FROM publishers WHERE country = 'USA';
SELECT * FROM publishers WHERE pub_name = 'New Moon Books';
SELECT e.fname FROM employee e JOIN jobs j ON e.job_id = j.job_id WHERE j.job_desc = 'Managing Editor';
SELECT MAX(job_lvl) FROM employee WHERE hire_date = (SELECT MIN(hire_date) FROM employee);
SELECT city FROM stores WHERE stor_id = (     SELECT stor_id     FROM sales     GROUP BY stor_id     ORDER BY SUM(qty) DESC     LIMIT 1 );
SELECT t.price FROM titles t JOIN sales s ON t.title_id = s.title_id GROUP BY t.title_id ORDER BY SUM(s.qty) DESC LIMIT 1;
SELECT DISTINCT s.stor_name FROM stores s JOIN sales sa ON s.stor_id = sa.stor_id JOIN titles t ON sa.title_id = t.title_id WHERE t.title = 'Life Without Fear';
SELECT COUNT(DISTINCT s.stor_id) FROM stores s JOIN sales sa ON s.stor_id = sa.stor_id JOIN titles t ON sa.title_id = t.title_id WHERE t.title = 'Life Without Fear' AND s.state = 'Massachusetts';
SELECT p.country FROM publishers p JOIN titles t ON p.pub_id = t.pub_id WHERE t.title = 'Life Without Fear';
SELECT p.pub_name FROM publishers p JOIN titles t ON p.pub_id = t.pub_id WHERE t.price = (SELECT MAX(price) FROM titles);
SELECT COUNT(DISTINCT p.pub_id) FROM publishers p JOIN titles t ON p.pub_id = t.pub_id WHERE p.country = 'USA' AND t.price > 15;
SELECT t.title, t.price, t.pubdate, SUM(s.qty) AS total_sales FROM titles t JOIN sales s ON t.title_id = s.title_id GROUP BY t.title_id ORDER BY total_sales DESC LIMIT 3;
SELECT SUM(s.qty) AS total_books_ordered FROM sales s JOIN titles t ON s.title_id = t.title_id JOIN stores st ON s.stor_id = st.stor_id WHERE t.type = 'business' AND st.state = 'MA';
SELECT AVG(qty) AS average_quantity FROM sales JOIN titles ON sales.title_id = titles.title_id WHERE titles.title = 'Life Without Fear';
SELECT     MAX(j.max_lvl) - AVG(e.job_lvl) AS levels_between FROM     jobs j JOIN     employee e ON j.job_id = e.job_id WHERE     j.job_desc = 'Managing Editor';
SELECT title, MIN(price) AS cheapest_price FROM titles WHERE type = 'business' GROUP BY title ORDER BY cheapest_price LIMIT 1;
SELECT type FROM titles WHERE advance = (SELECT MAX(advance) FROM titles);
SELECT r.royalty FROM sales s JOIN titles t ON s.title_id = t.title_id JOIN roysched r ON t.title_id = r.title_id WHERE s.qty = (SELECT MAX(qty) FROM sales);
SELECT job_lvl FROM employee WHERE lname = 'O''Rourke';
SELECT emp_id FROM employee WHERE job_lvl = (SELECT MAX(job_lvl) FROM employee) AND minit IS NULL;
SELECT a.contract FROM authors a JOIN titleauthor ta ON a.au_id = ta.au_id JOIN titles t ON ta.title_id = t.title_id WHERE t.title = 'Sushi, Anyone?';
SELECT CONCAT(e.fname, ' ', e.lname) AS full_name FROM employee e JOIN publishers p ON e.pub_id = p.pub_id WHERE e.job_lvl = (SELECT MAX(job_lvl) FROM employee);
SELECT j.job_desc FROM employee e JOIN jobs j ON e.job_id = j.job_id WHERE e.fname = 'Pedro' AND e.lname = 'Afonso';
SELECT j.max_lvl - e.job_lvl AS levels_left FROM employee e JOIN jobs j ON e.job_id = j.job_id WHERE e.fname = 'Diego' AND e.lname = 'Roel';
SELECT t.notes FROM sales s JOIN titles t ON s.title_id = t.title_id WHERE s.ord_date = '1994-09-14';
SELECT t.type FROM sales s JOIN titles t ON s.title_id = t.title_id WHERE s.ord_date = '1993-05-29';
SELECT * FROM publishers WHERE country = 'France';
SELECT p.pub_name FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE t.title = 'Silicon Valley Gastronomic Treats';
SELECT e.city FROM employee e JOIN authors a ON e.fname = a.au_fname AND e.lname = a.au_lname WHERE a.au_fname = 'Victoria' AND a.au_lname = 'Ashworth';
SELECT COUNT(ord_num) AS total_sales FROM sales WHERE stor_id IN (     SELECT stor_id     FROM stores     WHERE city = 'Remulade' );
SELECT     (SUM(CASE WHEN s.city = 'Fremont' THEN s.qty ELSE 0 END) -      SUM(CASE WHEN s.city = 'Portland' THEN s.qty ELSE 0 END)) * 100.0 /     NULLIF(SUM(CASE WHEN s.city = 'Fremont' THEN s.qty ELSE 0 END), 0) AS percent_more FROM     sales s JOIN     stores st ON s.stor_id = st.stor_id WHERE     YEAR(s.ord_date) = 1993;
SELECT     100 * (SUM(CASE WHEN j.job_desc = 'publisher' THEN 1 ELSE 0 END) -             SUM(CASE WHEN j.job_desc = 'designer' THEN 1 ELSE 0 END)) /     NULLIF(SUM(CASE WHEN j.job_desc = 'designer' THEN 1 ELSE 0 END), 0) AS percent_more FROM     employee e JOIN     jobs j ON e.job_id = j.job_id;
SELECT CONCAT(fname, ' ', lname) AS full_name FROM employee WHERE YEAR(hire_date) BETWEEN 1990 AND 1995 ORDER BY job_lvl DESC;
SELECT title, type, price FROM titles WHERE royalty > (SELECT AVG(royalty) FROM titles);
SELECT t.title, t.type, t.price FROM titles t JOIN sales s ON t.title_id = s.title_id WHERE YEAR(s.ord_date) = 1994 GROUP BY t.title_id HAVING SUM(s.ord_num) < (SELECT AVG(order_qty)                           FROM (SELECT SUM(ord_num) AS order_qty                                 FROM sales                                 WHERE YEAR(ord_date) = 1994                                 GROUP BY title_id) AS avg_orders);
SELECT title, type, price FROM titles WHERE pub_id = (SELECT pub_id FROM publishers WHERE pub_name = 'New Moon Books') ORDER BY price ASC;
SELECT t.title, t.royalty FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE p.country = 'USA' ORDER BY t.royalty DESC;
SELECT     (SELECT AVG(royalty)      FROM titles t      JOIN publishers p ON t.pub_id = p.pub_id      WHERE p.country = 'USA') -     (SELECT AVG(royalty)      FROM titles t      JOIN publishers p ON t.pub_id = p.pub_id      WHERE p.country != 'USA') AS royalty_difference;
SELECT     (SELECT AVG(job_lvl) FROM employee e      JOIN publishers p ON e.pub_id = p.pub_id      JOIN jobs j ON e.job_id = j.job_id      WHERE j.job_desc = 'Marketing manager' AND p.country = 'USA') -     (SELECT AVG(job_lvl) FROM employee e      JOIN publishers p ON e.pub_id = p.pub_id      JOIN jobs j ON e.job_id = j.job_id      WHERE j.job_desc = 'Marketing manager' AND p.country != 'USA') AS avg_level_difference;
SELECT t.title, p.pub_name, t.price FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE t.notes LIKE '%helpful hints on how to use your electronic resources%';
SELECT t.title, p.state, t.ytd_sales FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE t.notes LIKE '%Carefully researched study of the effects of strong emotions on the body%';
SELECT t.title, SUM(s.qty) AS total_sales FROM titles t JOIN sales s ON t.title_id = s.title_id JOIN stores st ON s.stor_id = st.stor_id WHERE st.state = 'CA' GROUP BY t.title HAVING SUM(s.qty) > (SELECT AVG(qty) FROM sales WHERE stor_id IN (SELECT stor_id FROM stores WHERE state = 'CA')) ORDER BY total_sales DESC LIMIT 5;
SELECT "Date received" FROM callcenterlogs WHERE ser_time = (SELECT MAX(ser_time) FROM callcenterlogs);
SELECT MIN(ser_start) AS earliest_complaint_start FROM callcenterlogs WHERE "Date received" = '2017-03-22';
SELECT Complaint_ID, MAX(priority) AS Urgency FROM callcenterlogs WHERE Complaint_ID IN ('CR2400594', 'CR2405641') GROUP BY Complaint_ID ORDER BY Urgency DESC LIMIT 1;
SELECT CONCAT(first, ' ', middle, ' ', last) AS full_name FROM client WHERE sex = 'Male' AND year > 1990;
SELECT COUNT(*) FROM events WHERE Client_ID IN (SELECT client_id FROM client WHERE first = 'Diesel' AND last = 'Galloway');
SELECT e."Sub-product" FROM events e JOIN client c ON e."Client_ID" = c."client_id" WHERE c."first" = 'Diesel' AND c."last" = 'Galloway' AND e."Date received" = '2014-07-03';
SELECT     CASE         WHEN "Consumer consent provided?" IS NOT NULL AND "Consumer consent provided?" NOT IN ('N/A', 'Empty') THEN 'Approved'         ELSE 'Not Approved'     END AS ApprovalStatus FROM     events WHERE     "Date received" = '2016-10-28'     AND "Client_ID" = (SELECT client_id FROM client WHERE first = 'Matthew' AND last = 'Pierce');
SELECT DATEDIFF(e.`Date sent to company`, e.`Date received`) AS delay_duration FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Matthew' AND c.last = 'Pierce' AND e.`Date received` = '2016-10-28';
SELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS full_name FROM client c JOIN callcenterlogs cl ON c.client_id = cl.rand_client WHERE cl."Date received" = '2017-03-27' AND cl.server = 'MICHAL';
SELECT ser_time FROM callcenterlogs WHERE "Date received" = '2017-03-27' AND client_id = (SELECT client_id FROM client WHERE first = 'Rachel' AND last = 'Hicks');
SELECT COUNT(DISTINCT c.client_id) AS complaint_count FROM client c JOIN events e ON c.client_id = e.Client_ID JOIN district d ON c.district_id = d.district_id WHERE d.city = 'New York' AND e.Issue = 'Deposits and withdrawals';
SELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS full_name FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e."Company response to consumer" = 'In progress';
SELECT COUNT(DISTINCT e.Client_ID) AS New_York_Clients FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE e."Timely response?" = 'Yes' AND c.city = 'New York';
SELECT COUNT(*) FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE e.Product = 'Credit card' AND YEAR(e.Date received) = 2016 AND c.sex = 'Male';
SELECT d.division FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.first = 'Diesel' AND c.last = 'Galloway';
SELECT CONCAT(first, ' ', middle, ' ', last) AS full_name FROM client WHERE sex = 'Male' AND district_id IN (     SELECT district_id     FROM district     WHERE division = 'Pacific' );
SELECT AVG(complaint_count) AS average_complaints FROM (     SELECT COUNT(e.Complaint_ID) AS complaint_count     FROM events e     JOIN client c ON e.Client_ID = c.client_id     WHERE e.Product = 'Credit card'       AND c.city = 'New York'       AND e.Date_received BETWEEN '2015-01-01' AND '2017-12-31'     GROUP BY YEAR(e.Date_received) ) AS yearly_complaints;
SELECT     (SUM(CASE WHEN YEAR(e.`Date received`) = 2017 THEN 1 ELSE 0 END) -      SUM(CASE WHEN YEAR(e.`Date received`) = 2016 THEN 1 ELSE 0 END)) /     NULLIF(SUM(CASE WHEN YEAR(e.`Date received`) = 2016 THEN 1 ELSE 0 END), 0) * 100 AS percentage_increase FROM     events e JOIN     client c ON e.Client_ID = c.client_id JOIN     district d ON c.district_id = d.district_id WHERE     d.city = 'New York' AND     YEAR(e.`Date received`) IN (2016, 2017);
SELECT ser_time FROM callcenterlogs WHERE rand_client = 'C00007127' AND Date_received = '2017-02-22';
SELECT s.State FROM client c JOIN state s ON c.state = s.StateCode WHERE c.email = 'wyatt.collins@gmail.com';
SELECT e."Sub-product" FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Lennox' AND c.middle = 'Oliver' AND c.last = 'Drake' AND c.sex = 'Male';
SELECT e.Sub_issue FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Gunner' AND c.middle = 'Omer' AND c.last = 'Fuller';
SELECT     e."Consumer consent provided?" FROM     client c JOIN     events e ON c.client_id = e.Client_ID WHERE     c.first = 'Lyric'     AND c.middle = 'Emely'     AND c.last = 'Taylor'     AND c.sex = 'Female'     AND e."Date received" = '2016-05-20';
SELECT DATEDIFF(e.`Date sent to company`, e.`Date received`) AS days_delay FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Brantley' AND c.middle = 'Julian' AND c.last = 'Stanley' AND c.sex = 'Male' AND e.`Date received` = '2012-05-18';
SELECT d.city FROM reviews r JOIN district d ON r.district_id = d.district_id WHERE r.Date = '2018-09-11';
SELECT * FROM reviews WHERE district_id IN (SELECT district_id FROM district WHERE city = 'Jacksonville') AND Date = '2017-07-22';
SELECT Product FROM reviews WHERE district_id IN (SELECT district_id FROM district WHERE city = 'Indianapolis') AND Date = '2016-10-07';
SELECT Stars FROM reviews WHERE Product = 'Eagle Capital' AND district_id IN (SELECT district_id FROM district WHERE city = 'Little Rock') AND Date = '2013-04-04';
SELECT CONCAT(year, '-', month, '-', day) AS birthday FROM client WHERE client_id = (     SELECT Client_ID     FROM events     WHERE Complaint_ID = 'CR0217298' );
SELECT c.phone FROM callcenterlogs cl JOIN client c ON cl.rand_client = c.client_id WHERE cl.Complaint_ID = 'CR0100432';
SELECT     (SUM(CASE WHEN c.sex = 'Female' THEN 1 ELSE 0 END) * 100.0 / COUNT(c.client_id)) AS female_percentage FROM     callcenterlogs cl JOIN     client c ON cl.rand_client = c.client_id WHERE     cl.Date_received = '2017-03-27';
SELECT     (SUM(CASE WHEN e."Consumer consent provided?" = 'Consent provided' THEN 1 ELSE 0 END) * 100.0) / COUNT(e.client_id) AS consent_percentage FROM     events e JOIN     client c ON e.Client_ID = c.client_id WHERE     c.first = 'Mason' AND     c.middle = 'Javen' AND     c.last = 'Lopez' AND     c.sex = 'Male';
SELECT "Complaint ID" FROM callcenterlogs WHERE priority = 2 AND "Date received" BETWEEN '2017-03-01' AND '2017-03-31';
SELECT CONCAT(first, ' ', middle, ' ', last) AS full_name,        CONCAT(year, '-', month, '-', day) AS date_of_birth,        email FROM client WHERE age > 65 ORDER BY age DESC;
SELECT Product, COUNT(Stars) AS FiveStarCount FROM reviews WHERE Stars = 5 GROUP BY Product ORDER BY FiveStarCount DESC LIMIT 1;
SELECT State FROM state WHERE Region = 'South';
SELECT c.email FROM callcenterlogs cl JOIN client c ON cl.rand_client = c.client_id WHERE cl.outcome = 'Hang';
SELECT AVG(c.age) AS average_age FROM client c JOIN state s ON c.state = s.State WHERE s.Region = 'Midwest';
SELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS full_name, c.phone FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Submitted_via = 'fax';
SELECT d.city FROM district d JOIN reviews r ON d.district_id = r.district_id WHERE r.Product = 'Eagle Capital' AND r.Stars < (SELECT AVG(Stars) FROM reviews WHERE Product = 'Eagle Capital');
SELECT COUNT(*) FROM callcenterlogs ccl JOIN client cl ON ccl.rand_client = cl.client_id JOIN district d ON cl.district_id = d.district_id WHERE d.division = 'mountain' AND cl.age BETWEEN 12 AND 20;
SELECT COUNT(*) AS number_of_complaints FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE e.Product = 'Credit card' AND c.sex = 'female';
SELECT first, middle, last FROM client JOIN events ON client.client_id = events.Client_ID WHERE year BETWEEN 1980 AND 2000 AND sex = 'Male' AND "Submitted via" = 'Referral';
SELECT "Submitted via", COUNT(*) AS complaint_count FROM events JOIN client ON events.Client_ID = client.client_id WHERE client.state = 'florida' GROUP BY "Submitted via" ORDER BY complaint_count DESC LIMIT 1;
SELECT YEAR(e.Date_received) AS Year, AVG(e.Complaint_ID) AS Average_Complaints FROM events e JOIN district d ON e.Client_ID = d.district_id WHERE d.city = 'New Bedford' AND e.Company_response_to_consumer = 'Closed with explanation' GROUP BY YEAR(e.Date_received);
SELECT     (SUM(CASE WHEN e."Consumer disputed?" = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(e.client_id)) AS percentage FROM     events e JOIN     client c ON e.Client_ID = c.client_id WHERE     c.city = 'Houston';
SELECT COUNT(DISTINCT client_id) AS service_member_complaints FROM client WHERE city = 'Syracuse';
SELECT     (SUM(CASE WHEN priority = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT("Complaint ID")) AS percentage_priority_1 FROM     callcenterlogs WHERE     client IN (SELECT client_id FROM client WHERE state = 'California');
SELECT     (SELECT AVG(age) FROM client      WHERE age BETWEEN 35 AND 55 AND state IN      (SELECT StateCode FROM state WHERE Region = 'Northeast')) -     (SELECT AVG(age) FROM client      WHERE age > 65 AND state IN      (SELECT StateCode FROM state WHERE Region = 'Northeast')) AS age_difference;
SELECT "Complaint ID" FROM callcenterlogs ORDER BY ser_time DESC LIMIT 3;
SELECT COUNT(*) FROM client WHERE email NOT LIKE '%@gmail.com';
SELECT DISTINCT Client_ID FROM events WHERE "Consumer consent provided?" IS NULL    OR "Consumer consent provided?" = 'N/A'    OR "Consumer consent provided?" = '';
SELECT "Complaint ID" FROM events WHERE "Date sent to company" = '2014-09-25' ORDER BY ("Date sent to company" - "Date received") DESC LIMIT 1;
SELECT * FROM callcenterlogs WHERE priority = 2 ORDER BY "Date received";
SELECT COUNT(*) AS complaints_not_in_process FROM callcenterlogs WHERE outcome != 'AGENT';
SELECT COUNT(*) FROM callcenterlogs WHERE type = 'Credit Card' AND server = 'SHARON';
SELECT s.Region, COUNT(r.Stars) AS OneStarCount FROM reviews r JOIN district d ON r.district_id = d.district_id JOIN state s ON d.state_abbrev = s.StateCode WHERE r.Stars = 1 GROUP BY s.Region ORDER BY OneStarCount DESC LIMIT 1;
SELECT DISTINCT year FROM client WHERE client_id IN (     SELECT Client_ID     FROM events     WHERE Sub_product = '(CD) Certificate of deposit'     GROUP BY Client_ID     HAVING COUNT(*) = (         SELECT MAX(problem_count)         FROM (             SELECT COUNT(*) AS problem_count             FROM events             WHERE Sub_product = '(CD) Certificate of deposit'             GROUP BY Client_ID         ) AS subquery     ) );
SELECT COUNT(*) FROM events JOIN district ON events.Client_ID = district.district_id WHERE events.Issue = 'Billing disputes' AND district.division = 'Mountain';
SELECT COUNT(*) FROM client WHERE sex = 'Male' AND state = 'Massachusetts';
SELECT DISTINCT c.last FROM client c JOIN callcenterlogs cl ON c.client_id = cl.rand_client WHERE cl.type = 'PS' AND cl.server = 'TOVA';
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE c.age < 35 AND e.Product = 'Eagle National Mortgage' AND e.Stars = 1;
SELECT COUNT(*) FROM client c JOIN callcenterlogs cl ON c.client_id = cl.rand_client WHERE c.sex = 'Male'   AND c.year = 1977   AND cl.priority = 0;
SELECT DISTINCT c.first FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Tags = 'Older American' AND e."Consumer consent provided?" NOT IN ('N/A', null, 'empty');
SELECT s.State FROM state s JOIN callcenterlogs c ON s.StateCode = c.rand_client WHERE c.priority = 0 GROUP BY s.State ORDER BY COUNT(c.Complaint_ID) DESC LIMIT 1;
SELECT COUNT(*) FROM callcenterlogs ccl JOIN events e ON ccl.Complaint_ID = e.Complaint_ID JOIN client cl ON e.Client_ID = cl.client_id WHERE cl.sex = 'Female' AND ccl.ser_time BETWEEN '15:00:01' AND '23:59:59' AND e."Timely response?" = 'Yes';
SELECT COUNT(*) FROM callcenterlogs JOIN events ON callcenterlogs.Complaint_ID = events.Complaint_ID WHERE callcenterlogs.ser_time < '00:05:00'   AND callcenterlogs.server = 'DORIT'   AND events."Company response to consumer" = 'Closed with explanation'   AND events."Submitted via" = 'Phone';
SELECT COUNT(*) FROM client WHERE last = 'Alvarado' AND state = 'MD';
SELECT COUNT(*) FROM reviews r JOIN client c ON r.district_id = c.district_id WHERE c.age BETWEEN 30 AND 50 AND r.Reviews LIKE '%great%';
SELECT c.address_1, c.address_2 FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE e."Timely response?" = 'Yes' AND e."Consumer disputed?" = 'Yes';
SELECT COUNT(*) FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.sex = 'Female'   AND c.year = 2000   AND e.Submitted_via != 'Web';
SELECT "Consumer complaint narrative" FROM events WHERE Client_ID IN (     SELECT client_id     FROM client     WHERE first = 'Brenda' AND last = 'Mayer' );
SELECT COUNT(*) FROM events WHERE "Date received" BETWEEN '2017-02-01' AND '2017-02-28' AND Client_ID IN (     SELECT client_id     FROM client     WHERE email LIKE '%gmail.com' );
SELECT AVG(Stars) AS average_stars FROM reviews r JOIN client c ON r.district_id = c.district_id WHERE c.state = 'Oregon';
SELECT     (COUNT(CASE WHEN age >= 50 THEN 1 END) * 100.0 / COUNT(client_id)) AS percentage FROM     events JOIN     client ON events.Client_ID = client.client_id WHERE     events."Submitted via" = 'Postal mail';
SELECT AVG(age) AS average_age FROM client WHERE city = 'Norwalk';
SELECT COUNT(DISTINCT c.client_id) AS client_count FROM client c JOIN reviews r ON c.district_id = r.district_id WHERE c.city = 'Kansas City' AND r.Stars = 1;
SELECT s.State FROM state s JOIN client c ON s.StateCode = c.state JOIN reviews r ON c.district_id = r.district_id WHERE r.Stars = 5 GROUP BY s.State ORDER BY COUNT(DISTINCT c.client_id) DESC LIMIT 1;
SELECT Region FROM state WHERE State = (SELECT state FROM client WHERE first = 'Noah' AND last = 'Thompson');
SELECT "Submitted via" FROM events JOIN client ON events.Client_ID = client.client_id WHERE client.first = 'Kyran' AND client.last = 'Muller';
SELECT DISTINCT e.Product FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.year > 2005;
SELECT ser_time FROM callcenterlogs JOIN events ON callcenterlogs.Complaint_ID = events.Complaint_ID JOIN client ON events.Client_ID = client.client_id WHERE client.first = 'Kendall' AND client.last = 'Allen' AND events.Product = 'Credit Card';
SELECT e.Issue FROM callcenterlogs ccl JOIN events e ON ccl.Complaint_ID = e.Complaint_ID WHERE ccl.ser_time = (SELECT MAX(ser_time) FROM callcenterlogs);
SELECT COUNT(DISTINCT c.client_id) AS client_count FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE c.city = 'New York City' AND e.Submitted_via = 'Fax';
SELECT     (SUM(CASE WHEN c.sex = 'Male' THEN 1 ELSE 0 END) * 100.0) / COUNT(c.client_id) AS male_percentage FROM     client c JOIN     events e ON c.client_id = e.Client_ID WHERE     e.Product = 'Credit card';
SELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS full_name FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Tags = 'Older American' AND (e."Consumer consent provided?" IS NULL OR e."Consumer consent provided?" = 'N/A' OR e."Consumer consent provided?" = '') LIMIT 2;
SELECT MAX(CONCAT(year, '-', month, '-', day)) AS birth_date FROM client;
SELECT COUNT(*) FROM events WHERE "Consumer disputed?" = 'No' AND "Timely response?" = 'No';
SELECT COUNT(*) AS complaints_longer_than_15_minutes FROM callcenterlogs WHERE ser_time > '00:15:00';
SELECT Issue, COUNT(Issue) AS issue_count FROM callcenterlogs WHERE priority = 2 GROUP BY Issue ORDER BY issue_count DESC LIMIT 1;
SELECT CONCAT(c.first, ' ', c.last) AS full_name FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.division = 'Pacific';
SELECT social FROM client WHERE client_id = (     SELECT Client_ID     FROM events     GROUP BY Client_ID     ORDER BY COUNT(Client_ID) DESC     LIMIT 1 );
SELECT city, COUNT(*) AS review_count FROM reviews r JOIN district d ON r.district_id = d.district_id WHERE r.Stars = 1 GROUP BY city ORDER BY review_count DESC LIMIT 1;
SELECT c.address_1, c.address_2 FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Submitted_via = 'Postal mail' AND e.Date_received = '2012-03-14';
SELECT COUNT(DISTINCT c.client_id) AS female_complaints FROM client c JOIN callcenterlogs cl ON c.client_id = cl.rand_client WHERE c.sex = 'Female' AND cl.priority = 1;
SELECT DISTINCT e.server FROM events e WHERE e.Submitted_via = 'Phone' AND e.Timely_response? = 'No';
SELECT e.Issue FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Kaitlyn' AND c.middle = 'Eliza' AND c.last = 'Elliott';
SELECT s.State FROM client c JOIN state s ON c.state = s.StateCode WHERE c.email = 'skylar.ramirez@gmail.com';
SELECT Region FROM (     SELECT Region, COUNT(client_id) AS client_count     FROM client     JOIN district ON client.district_id = district.district_id     GROUP BY Region     ORDER BY client_count DESC ) AS ranked_regions LIMIT 1 OFFSET 1;
SELECT c.first, c.middle, c.last FROM callcenterlogs cl JOIN client c ON cl.rand_client = c.client_id WHERE cl.server = 'MORIAH' AND cl.Date_received = '2013-09-11';
SELECT     CASE         WHEN age BETWEEN 13 AND 19 THEN 'teenager'         WHEN age BETWEEN 20 AND 65 THEN 'adult'         WHEN age > 65 THEN 'elder'     END AS age_group,     AVG(ser_time) / 60 AS average_time_minutes FROM     client JOIN     callcenterlogs ON client.client_id = callcenterlogs.rand_client GROUP BY     age_group;
SELECT (SUM(CASE WHEN age <= 65 THEN 1 ELSE 0 END) * 100.0 / COUNT(client_id)) AS percentage_elderly FROM client;
SELECT     (COUNT(CASE WHEN sex = 'Male' THEN 1 END) * 100.0 / COUNT(client_id)) AS male_percentage FROM     client WHERE     city = 'Indianapolis';
SELECT     CASE         WHEN COUNT(CASE WHEN email LIKE '%@gmail.com' THEN 1 END) > COUNT(CASE WHEN email LIKE '%@outlook.com' THEN 1 END) THEN 'Google'         WHEN COUNT(CASE WHEN email LIKE '%@gmail.com' THEN 1 END) < COUNT(CASE WHEN email LIKE '%@outlook.com' THEN 1 END) THEN 'Microsoft'         ELSE 'Equal'     END AS More_Clients FROM client WHERE age > 13 AND age <= 19 AND (email LIKE '%@gmail.com' OR email LIKE '%@outlook.com');
SELECT CONCAT(first, ' ', middle, ' ', last) AS full_name FROM client WHERE email = 'emily.garcia43@outlook.com';
SELECT first FROM client WHERE client_id IN (     SELECT rand_client     FROM callcenterlogs     WHERE priority = 2 );
SELECT c.email FROM client c JOIN callcenterlogs cl ON c.client_id = cl.rand_client WHERE cl.type = 'PS';
SELECT c.last FROM client c JOIN callcenterlogs cl ON c.client_id = cl.rand_client WHERE c.age <= 65 AND cl.server = 'YIFAT';
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN callcenterlogs cl ON c.client_id = cl.rand_client WHERE c.city = 'New York City' AND cl.outcome = 'AGENT';
SELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS full_name FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Consumer_disputed? = 'Yes';
SELECT DISTINCT e.Complaint_ID FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.year = 1931;
SELECT     (COUNT(CASE WHEN c.email LIKE '%@gmail.com' THEN e.Complaint_ID END) * 100.0 / COUNT(e.Complaint_ID)) AS percentage FROM     events e JOIN     client c ON e.Client_ID = c.client_id WHERE     c.phone LIKE '%ZOHARI%';
SELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS full_name FROM callcenterlogs cl JOIN client c ON cl.rand_client = c.client_id WHERE cl.ser_time > '00:20:00';
SELECT last FROM client WHERE client_id IN (     SELECT rand_client     FROM callcenterlogs     WHERE priority = 0     LIMIT 5 );
SELECT callcenterlogs.call_id FROM callcenterlogs JOIN client ON callcenterlogs.rand_client = client.client_id WHERE client.first LIKE 'B%';
SELECT e.Product FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Alexander' AND c.middle = 'Bronx' AND c.last = 'Lewis';
SELECT c.first FROM client c JOIN callcenterlogs cl ON c.client_id = cl.rand_client JOIN events e ON cl.Complaint_ID = e.Complaint_ID WHERE c.sex = 'Male' AND e."Timely response?" = 'No';
SELECT e.Product, COUNT(e.Complaint_ID) AS complaint_count FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.age > 65 GROUP BY e.Product ORDER BY complaint_count DESC LIMIT 1;
SELECT     CASE         WHEN age BETWEEN 13 AND 19 THEN 'Teenager'         WHEN age BETWEEN 20 AND 65 THEN 'Adult'         ELSE 'Elder'     END AS Age_Group,     COUNT(*) AS Complaint_Count FROM     events e JOIN     client c ON e.Client_ID = c.client_id WHERE     e.Product = 'Credit Card' GROUP BY     Age_Group ORDER BY     Complaint_Count DESC;
SELECT Issue FROM callcenterlogs WHERE ser_time < '00:10:00';
SELECT "Date received" FROM events WHERE "Submitted via" = 'Fax';
SELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS full_name FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Issue = 'Balance transfer';
SELECT c.email FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Submitted_via = 'Postal mail';
SELECT AVG(c.age) AS average_age FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Company_response_to_consumer = 'Closed with relief';
SELECT AVG(age) AS average_age FROM client JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client WHERE callcenterlogs.type = 'TT';
SELECT Complaint_ID, call_id, phonefinal FROM callcenterlogs WHERE server = 'AVIDAN' AND "Date received" BETWEEN '2014-01-01' AND '2014-12-30';
SELECT AVG(ser_time) AS average_server_time FROM callcenterlogs WHERE "Date received" BETWEEN '2017-01-01' AND '2017-04-01' AND server = 'DARMON';
SELECT YEAR(Date_received) AS Year, COUNT(*) AS ComplaintCount FROM events WHERE Product = 'Credit card' AND Issue = 'Overlimit fee' GROUP BY YEAR(Date_received);
SELECT COUNT(*) FROM client WHERE sex = 'Female' AND age < 18 AND district_id IN (SELECT district_id FROM district WHERE division = 'Middle Atlantic');
SELECT CONCAT(year, '-', month, '-', day) AS full_birthdate, email, phone FROM client WHERE city = 'Indianapolis' ORDER BY year DESC, month DESC, day DESC LIMIT 1;
SELECT district.city, COUNT(*) AS five_star_count FROM reviews JOIN district ON reviews.district_id = district.district_id WHERE reviews.Stars = 5 AND reviews.Date LIKE '2016%' GROUP BY district.city ORDER BY five_star_count DESC LIMIT 5;
SELECT MAX(ser_time) AS longest_server_time FROM callcenterlogs WHERE type = 'arbitration';
SELECT social, state FROM client WHERE phone = '100-121-8371';
SELECT CONCAT(c.first, ' ', c.middle, ' ', c.last) AS full_name, c.phone FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.division = 'Pacific';
SELECT c.social,        DATEDIFF(e.`Date sent to company`, e.`Date received`) AS days_of_delay,        e.`Company response to consumer` FROM events e JOIN client c ON e.Client_ID = c.client_id ORDER BY days_of_delay DESC LIMIT 1;
SELECT COUNT(*) FROM client WHERE sex = 'Female' AND age > 30;
SELECT first, last FROM client WHERE city = 'New York City';
SELECT MAX(age) AS oldest_age FROM client WHERE sex = 'Male';
SELECT d.division, COUNT(c.client_id) AS client_count FROM client c JOIN district d ON c.district_id = d.district_id GROUP BY d.division;
SELECT     (COUNT(CASE WHEN c.sex = 'Female' THEN 1 END) * 100.0 / COUNT(c.client_id)) AS female_percentage FROM     client c JOIN     district d ON c.district_id = d.district_id WHERE     d.division = 'Middle Atlantic';
SELECT AVG(c.age) AS average_age FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.division = 'South Atlantic';
SELECT d.city FROM district d JOIN client c ON d.district_id = c.district_id JOIN state s ON d.state_abbrev = s.StateCode WHERE s.Region = 'Midwest' GROUP BY d.city ORDER BY COUNT(c.client_id) ASC LIMIT 1;
SELECT COUNT(*) FROM client c JOIN state s ON c.state = s.State WHERE s.Region = 'Northeast' AND c.email LIKE '%@outlook.com';
SELECT d.city, COUNT(c.client_id) AS customer_count FROM client c JOIN district d ON c.district_id = d.district_id JOIN state s ON d.state_abbrev = s.StateCode WHERE s.Region = 'North Central' AND c.age > 60 GROUP BY d.city ORDER BY customer_count DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN priority = 2 THEN Complaint_ID END) * 100.0 / COUNT(Complaint_ID)) AS percentage FROM     events WHERE     Issue = 'Late Fee' AND     YEAR(Date_received) = 2017;
SELECT state_abbrev, COUNT(city) AS city_count FROM district GROUP BY state_abbrev ORDER BY city_count DESC LIMIT 1;
SELECT first, phone FROM client WHERE client_id = (SELECT Client_ID FROM events WHERE Complaint_ID = 'CR0922485');
SELECT c.email FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Date_received = '2014-07-03';
SELECT COUNT(*) FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE e.Product = 'Credit card' AND c.city = 'Omaha' AND e.Date received LIKE '2012%';
SELECT COUNT(*) FROM events JOIN client ON events.Client_ID = client.client_id WHERE events.Date_received BETWEEN '2012-01-01' AND '2015-12-31' AND events.Submitted_via = 'Email' AND client.sex = 'Female';
SELECT c.phone, e.Complaint_ID FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Company_response_to_consumer = 'In progress';
SELECT COUNT(*) FROM events WHERE Date_received LIKE '2015%' AND Issue = 'Billing disputes' AND Client_ID IN (SELECT client_id FROM client WHERE city = 'Portland');
SELECT     (COUNT(CASE WHEN DATEDIFF(Date_sent_to_company, Date_received) > 5 THEN Complaint_ID END) * 100.0 / COUNT(Complaint_ID)) AS percentage FROM     events e JOIN     client c ON e.Client_ID = c.client_id WHERE     e.Date_received LIKE '2014%' AND     c.city = 'Houston';
SELECT COUNT(*) FROM events WHERE Date_received LIKE '2012%' AND Submitted_via = 'Email';
SELECT Client_ID FROM events WHERE Date_received = '2014-04-16' AND Submitted_via = 'Fax';
SELECT r.Date FROM reviews r JOIN district d ON r.district_id = d.district_id WHERE r.Product = 'Eagle Capital' AND d.city = 'Indianapolis' AND d.state_abbrev = 'IN';
SELECT COUNT(*) AS total_complaints FROM events WHERE Date_received LIKE '2015%'   AND "Timely response?" = 'Yes'   AND "Company response to consumer" = 'Closed with explanation';
SELECT e.Date_received FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.sex = 'Female' AND c.age BETWEEN 20 AND 40;
SELECT Product FROM reviews WHERE Stars = 1 AND Date = '2016-03-14' AND district_id IN (SELECT district_id FROM district WHERE city = 'Newton' AND state_abbrev = 'MA');
SELECT COUNT(*) FROM reviews r JOIN district d ON r.district_id = d.district_id WHERE r.Product = 'Eagle National Bank' AND r.Stars = 5 AND d.city = 'Nashville' AND d.state_abbrev = 'TN';
SELECT e.Issue FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.sex = 'Male' AND c.age < 25;
SELECT r.Product FROM reviews r JOIN district d ON r.district_id = d.district_id JOIN state s ON d.state_abbrev = s.StateCode WHERE r.Stars = 1 AND s.Region = 'Midwest';
SELECT DISTINCT Product FROM events WHERE Date received LIKE '%03%' AND Date received LIKE '2017%' AND Company response to consumer LIKE '%TOVA%';
SELECT d.division FROM reviews r JOIN district d ON r.district_id = d.district_id WHERE r.Stars = 5 AND r.Date = '2017-12-17' AND r.Product = 'Eagle National Mortgage';
SELECT c.phone FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Product = 'Credit Card' ORDER BY c.age DESC LIMIT 1;
SELECT COUNT(*) FROM events WHERE Date_received LIKE '2014%' AND Submitted_via = 'Phone';
SELECT e.Product, e.Issue FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.age > (SELECT AVG(age) * 0.6 FROM client);
SELECT     (COUNT(CASE WHEN d.division = 'East North Central' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM     reviews r JOIN     district d ON r.district_id = d.district_id WHERE     r.Stars = 5;
SELECT pc.company_name FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE m.title = 'Four Rooms';
SELECT COUNT(DISTINCT mc.company_id) AS production_company_count FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id WHERE m.title = 'Four Rooms';
SELECT m.title FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Universal Pictures';
SELECT m.title FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Universal Pictures' ORDER BY m.release_date DESC LIMIT 1;
SELECT p.person_name FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Pirates of the Caribbean: At World''s End' AND mc.job = 'Director of Photography';
SELECT mc.job FROM movie_crew mc JOIN movie m ON mc.movie_id = m.movie_id JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Dariusz Wolski' AND m.title = 'Pirates of the Caribbean: At World''s End';
SELECT p.person_name FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Pirates of the Caribbean: At World''s End';
SELECT COUNT(*) FROM movie_crew mc JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Pirates of the Caribbean: At World''s End' AND mc.job = 'Producer';
SELECT p.person_name FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE mc.job = 'Producer' AND m.title = 'Pirates of the Caribbean: At World''s End';
SELECT COUNT(DISTINCT mc.movie_id) AS movie_count FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Dariusz Wolski' AND mc.job = 'Director of Photography';
SELECT m.title FROM movie m JOIN movie_crew mc ON m.movie_id = mc.movie_id WHERE mc.person_id = (SELECT person_id FROM person WHERE person_name = 'Dariusz Wolski') AND mc.job = 'Director of Photography' ORDER BY m.vote_average DESC LIMIT 1;
SELECT MAX(m.release_date) AS latest_release_date FROM movie m JOIN movie_crew mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Dariusz Wolski';
SELECT     (SUM(CASE WHEN m.vote_average > 5.0 THEN 1 ELSE 0 END) * 100.0 / COUNT(m.movie_id)) AS percentage FROM     movie_crew mc JOIN     movie m ON mc.movie_id = m.movie_id WHERE     mc.person_id = (SELECT person_id FROM person WHERE person_name = 'Dariusz Wolski')     AND mc.job = 'Director of Photography';
SELECT AVG(revenue) AS average_revenue FROM movie WHERE movie_id IN (     SELECT movie_id     FROM movie_crew     WHERE person_id = (         SELECT person_id         FROM person         WHERE person_name = 'Dariusz Wolski'     ) AND job = 'Director of Photography' );
SELECT title FROM movie WHERE revenue = 559852396;
SELECT mc.job FROM movie_crew mc JOIN movie m ON mc.movie_id = m.movie_id JOIN person p ON mc.person_id = p.person_id WHERE m.title = 'Days of Thunder' AND p.person_name = 'David Rubin';
SELECT COUNT(DISTINCT mc.movie_id) AS directed_movies_count FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Michael Bay' AND mc.job = 'Director';
SELECT COUNT(mk.keyword_id) AS total_keywords FROM movie_keywords mk JOIN movie m ON mk.movie_id = m.movie_id WHERE m.title = 'I Hope They Serve Beer in Hell';
SELECT p.person_name FROM movie m JOIN movie_crew mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE m.title = 'Land of the Dead' AND mc.job = 'Director';
SELECT COUNT(m.movie_id) AS number_of_movies FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Paramount Animation';
SELECT COUNT(*) FROM movie_cast mc JOIN gender g ON mc.gender_id = g.gender_id JOIN movie m ON mc.movie_id = m.movie_id WHERE g.gender = 'Female' AND m.title = 'Spider-Man 3';
SELECT k.keyword_name FROM keyword k JOIN movie_keywords mk ON k.keyword_id = mk.keyword_id GROUP BY k.keyword_name ORDER BY COUNT(mk.keyword_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT mc.person_id) AS producer_count FROM movie_crew mc JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'The Amityville Horror' AND mc.job = 'Producer';
SELECT pc.company_name FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE m.title = 'Crazy Heart';
SELECT COUNT(DISTINCT movie_id) AS number_of_movies FROM movie_keywords JOIN keyword ON movie_keywords.keyword_id = keyword.keyword_id WHERE keyword.keyword_name = 'saving the world';
SELECT m.title, m.popularity FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Cruel and Unusual Films' ORDER BY m.popularity DESC LIMIT 1;
SELECT d.department_name FROM movie m JOIN movie_crew mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id JOIN department d ON mc.department_id = d.department_id WHERE m.title = 'Reign of Fire' AND p.person_name = 'Marcia Ross';
SELECT AVG(m.budget) AS average_budget FROM movie m JOIN movie_crew mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE mc.job = 'Director' AND p.person_name = 'Jaume Collet-Serra';
SELECT     (SUM(CASE WHEN mc.gender_id = (SELECT gender_id FROM gender WHERE gender = 'Male') THEN 1 ELSE 0 END) * 100.0 / COUNT(mc.gender_id)) AS percentage FROM     movie_cast mc JOIN     movie m ON mc.movie_id = m.movie_id WHERE     m.title = 'Bride Wars';
SELECT title FROM movie ORDER BY budget DESC LIMIT 1;
SELECT COUNT(*) FROM movie WHERE revenue > 1000000000;
SELECT MIN(release_date) AS first_movie_release_date FROM movie;
SELECT COUNT(*) FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'John Young';
SELECT title FROM movie ORDER BY popularity DESC LIMIT 1;
SELECT person_name FROM person WHERE person_id = 1325273;
SELECT pc.company_name FROM production_company pc JOIN movie_company mc ON pc.company_id = mc.company_id GROUP BY pc.company_name ORDER BY COUNT(mc.movie_id) DESC LIMIT 1;
SELECT p.person_name FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE mc.character_name = 'Captain Jack Sparrow' AND m.title LIKE 'Pirates of the Caribbean%';
SELECT m.title FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Walt Disney Pictures' ORDER BY m.popularity DESC LIMIT 1;
SELECT COUNT(*) FROM movie_company mc JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Universal Studios';
SELECT pc.company_name FROM production_company pc JOIN movie_company mc ON pc.company_id = mc.company_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.revenue = (SELECT MAX(revenue) FROM movie);
SELECT COUNT(*) FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id JOIN gender g ON p.gender_id = g.gender_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Mr. Smith Goes to Washington' AND g.gender = 'Female';
SELECT pc.company_name FROM production_company pc JOIN movie_company mc ON pc.company_id = mc.company_id GROUP BY pc.company_name HAVING COUNT(mc.movie_id) >= 200;
SELECT COUNT(*) AS total_movies FROM movie_cast WHERE person_id = (SELECT person_id FROM person WHERE person_name = 'Harrison Ford');
SELECT m.title FROM movie m JOIN movie_cast mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Jamie Foxx' ORDER BY m.release_date DESC LIMIT 1;
SELECT COUNT(DISTINCT mc.movie_id) AS movie_count FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE p.person_name = 'Quentin Tarantino' AND m.release_date LIKE '1995%';
SELECT m.title FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'Crime' ORDER BY m.release_date ASC LIMIT 1;
SELECT COUNT(*) FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'Horror';
SELECT person_id FROM movie_crew WHERE movie_id = 12 AND job = 'Second Film Editor';
SELECT COUNT(*) FROM movie_crew WHERE movie_id = 129 AND job = 'Animation';
SELECT person_id, job FROM movie_crew WHERE movie_id = 19 AND department_id = 7;
SELECT person_id, character_name FROM movie_cast WHERE movie_id = 285 AND cast_order BETWEEN 2 AND 9;
SELECT COUNT(*) AS appearance_count FROM movie_cast WHERE person_id = (SELECT person_id FROM person WHERE person_name = 'Bob Peterson')    OR movie_crew.person_id = (SELECT person_id FROM person WHERE person_name = 'Bob Peterson');
SELECT mc.movie_id, mc.character_name FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Jim Carrey';
SELECT p.person_name FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id JOIN gender g ON mc.gender_id = g.gender_id WHERE mc.movie_id = 1865 AND g.gender = 'Female';
SELECT m.title FROM movie m JOIN movie_cast mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Jim Carrey';
SELECT p.person_name FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE mc.job = 'Director' AND m.release_date BETWEEN '1916-01-01' AND '1925-12-31';
SELECT COUNT(*) FROM movie m JOIN movie_cast mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Uma Thurman' AND m.release_date BETWEEN '1990-01-02' AND '2000-12-30';
SELECT m.title FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'Horror' AND m.vote_average > 7;
SELECT g.genre_name, m.popularity FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.revenue >= 120000000 AND m.release_date BETWEEN '2012-01-01' AND '2015-12-31';
SELECT COUNT(*) FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE c.country_name = 'India' AND m.release_date BETWEEN '1990-01-02' AND '2003-12-30' AND m.revenue > 75000000 AND m.popularity >= 20;
SELECT m.title, m.budget, m.revenue, c.country_name FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE m.budget = (SELECT MAX(budget) FROM movie);
SELECT m.title FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE l.language_name = 'Latin' AND m.release_date BETWEEN '1990-01-01' AND '1995-12-31';
SELECT AVG(m.revenue) AS average_revenue FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE c.country_name = 'United States of America' AND m.release_date LIKE '2006%';
SELECT     (SELECT AVG(revenue)      FROM movie m      JOIN production_country pc ON m.movie_id = pc.movie_id      WHERE m.release_date LIKE '2016%'      AND pc.country_id = (SELECT country_id FROM country WHERE country_name = 'United States of America')) -     (SELECT AVG(revenue)      FROM movie m      JOIN production_country pc ON m.movie_id = pc.movie_id      WHERE m.release_date LIKE '2016%'      AND pc.country_id = (SELECT country_id FROM country WHERE country_name = 'India')) AS revenue_gap;
SELECT     (SUM(CASE WHEN g.genre_name = 'Romance' THEN 1 ELSE 0 END) * 100.0 / COUNT(m.movie_id)) AS percentage FROM     movie m JOIN     production_country pc ON m.movie_id = pc.movie_id JOIN     country c ON pc.country_id = c.country_id JOIN     movie_genres mg ON m.movie_id = mg.movie_id JOIN     genre g ON mg.genre_id = g.genre_id WHERE     c.country_name = 'India'     AND m.release_date BETWEEN '2015-01-01' AND '2015-12-31';
SELECT p.person_name FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id WHERE mc.character_name = 'Optimus Prime (voice)';
SELECT g.gender FROM movie_cast mc JOIN gender g ON mc.gender_id = g.gender_id WHERE mc.character_name = 'USAF Master Sgt. Epps';
SELECT pc.company_name FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE m.title = 'Ultramarines: A Warhammer 40,000 Movie';
SELECT m.title FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Radiant Film GmbH';
SELECT g.genre_name FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.title = 'Sky Captain and the World of Tomorrow';
SELECT k.keyword_name FROM movie_keywords mk JOIN keyword k ON mk.keyword_id = k.keyword_id JOIN movie m ON mk.movie_id = m.movie_id WHERE m.title = 'Sky Captain and the World of Tomorrow';
SELECT c.country_name FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE m.title = 'Gojira ni-sen mireniamu';
SELECT m.title FROM movie m JOIN movie_keywords mk ON m.movie_id = mk.movie_id JOIN keyword k ON mk.keyword_id = k.keyword_id WHERE k.keyword_name = 'extremis';
SELECT m.title FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE c.country_name = 'France' LIMIT 10;
SELECT p.person_name FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Transformers' AND mc.job = 'Director';
SELECT p.person_name, mc.job FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Mad Max: Fury Road' LIMIT 10;
SELECT     (COUNT(CASE WHEN g.genre_name = 'animation' THEN m.movie_id END) * 100.0 / COUNT(m.movie_id)) AS percentage FROM     movie m JOIN     production_country pc ON m.movie_id = pc.movie_id JOIN     country c ON pc.country_id = c.country_id JOIN     movie_genres mg ON m.movie_id = mg.movie_id JOIN     genre g ON mg.genre_id = g.genre_id WHERE     c.country_name = 'Japan';
SELECT     SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) AS female_count,     SUM(CASE WHEN g.gender = 'Male' THEN 1 ELSE 0 END) AS male_count,     SUM(CASE WHEN g.gender IS NULL THEN 1 ELSE 0 END) AS unspecified_gender_count,     CASE         WHEN SUM(CASE WHEN g.gender = 'Male' THEN 1 ELSE 0 END) = 0 THEN NULL         ELSE SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN g.gender = 'Male' THEN 1 ELSE 0 END)     END AS gender_ratio FROM     movie_cast mc JOIN     movie m ON mc.movie_id = m.movie_id JOIN     gender g ON mc.gender_id = g.gender_id WHERE     m.title = 'Iron Man';
SELECT title FROM movie WHERE release_date < '2000-01-01' LIMIT 5;
SELECT mk.keyword_id FROM movie_keywords mk JOIN movie m ON mk.movie_id = m.movie_id WHERE m.title = 'Sin City';
SELECT m.title FROM movie m JOIN movie_keywords mk ON m.movie_id = mk.movie_id JOIN keyword k ON mk.keyword_id = k.keyword_id WHERE k.keyword_name = 'angel';
SELECT k.keyword_name FROM movie m JOIN movie_keywords mk ON m.movie_id = mk.movie_id JOIN keyword k ON mk.keyword_id = k.keyword_id WHERE m.popularity = (SELECT MAX(popularity) FROM movie);
SELECT mg.genre_id FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id WHERE m.title = 'The Dark Knight';
SELECT m.title FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'Thriller';
SELECT m.title FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.movie_status = 'rumoured' AND g.genre_name = 'Drama' LIMIT 5;
SELECT g.genre_name FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.revenue = (SELECT MIN(revenue) FROM movie);
SELECT g.genre_name FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.runtime = 14;
SELECT g.genre_name FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.revenue = (SELECT MIN(revenue)                    FROM movie                    WHERE vote_average = (SELECT MAX(vote_average) FROM movie));
SELECT g.genre_name FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.tagline = 'A long time ago in a galaxy far, far away…';
SELECT pc.country_id FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id WHERE m.title = 'Pirates of the Caribbean: Dead Man''s Chest';
SELECT m.title FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE c.country_name = 'Canada';
SELECT SUM(m.budget) AS total_budget FROM movie m JOIN movie_keywords mk ON m.movie_id = mk.movie_id JOIN keyword k ON mk.keyword_id = k.keyword_id WHERE k.keyword_name = 'video game';
SELECT AVG(m.revenue) AS average_revenue FROM movie m JOIN movie_keywords mk ON m.movie_id = mk.movie_id JOIN keyword k ON mk.keyword_id = k.keyword_id WHERE k.keyword_name = 'civil war';
SELECT title, popularity FROM movie WHERE vote_count = (SELECT MAX(vote_count) FROM movie);
SELECT title FROM movie WHERE budget = 0 ORDER BY revenue DESC LIMIT 1;
SELECT pc.company_id FROM production_company pc JOIN movie_company mc ON pc.company_id = mc.company_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Gladiator';
SELECT DISTINCT pc.company_id FROM production_company pc JOIN movie_company mc ON pc.company_id = mc.company_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.release_date LIKE '1916%';
SELECT m.title FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Lucasfilm';
SELECT title FROM movie JOIN movie_company ON movie.movie_id = movie_company.movie_id JOIN production_company ON movie_company.company_id = production_company.company_id WHERE production_company.company_name = 'Warner Bros. Pictures' ORDER BY revenue DESC LIMIT 1;
SELECT m.release_date FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Twentieth Century Fox Film Corporation';
SELECT ml.language_id FROM movie_languages ml JOIN movie m ON ml.movie_id = m.movie_id WHERE m.title = 'Walk the Line';
SELECT ml.language_id FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id WHERE m.popularity = (SELECT MAX(popularity) FROM movie);
SELECT l.language_name FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE m.title = 'C''era una volta il West';
SELECT DISTINCT m.title FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE m.movie_status = 'Post Production' AND l.language_name = 'Nederlands';
SELECT m.tagline FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE l.language_name = 'Polski';
SELECT m.homepage FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE l.language_name = 'Bahasa Indonesia';
SELECT     (SUM(CASE WHEN l.language_name = 'English' THEN m.revenue ELSE 0 END) -      SUM(CASE WHEN l.language_name = 'Latin' THEN m.revenue ELSE 0 END)) AS revenue_difference FROM     movie m JOIN     movie_languages ml ON m.movie_id = ml.movie_id JOIN     language l ON ml.language_id = l.language_id;
SELECT SUM(m.revenue) AS total_revenue FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name IN ('Fantasy Films', 'Live Entertainment');
SELECT AVG(m.revenue) AS average_revenue FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE l.language_name = 'Latin';
SELECT SUBSTRING_INDEX(person_name, ' ', 1) AS first_name, COUNT(*) AS name_count FROM person GROUP BY first_name ORDER BY name_count DESC LIMIT 1;
SELECT AVG(crew_count) AS average_crew_count FROM (     SELECT movie_id, COUNT(person_id) AS crew_count     FROM movie_crew     GROUP BY movie_id ) AS crew_counts;
SELECT keyword_name FROM keyword WHERE keyword_name LIKE '%christmas%';
SELECT MAX(runtime) AS longest_runtime FROM movie;
SELECT country_iso_code FROM country WHERE country_name = 'Kyrgyz Republic';
SELECT overview FROM movie WHERE title = 'The Pacifier';
SELECT COUNT(DISTINCT mc.movie_id) AS movie_count FROM movie_company mc JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Eddie Murphy Productions';
SELECT DISTINCT p.person_name FROM person p JOIN movie_cast mc ON p.person_id = mc.person_id WHERE mc.character_name LIKE '%captain%';
SELECT k.keyword_name FROM movie_keywords mk JOIN keyword k ON mk.keyword_id = k.keyword_id JOIN movie m ON mk.movie_id = m.movie_id WHERE m.release_date LIKE '%2006%' GROUP BY k.keyword_name ORDER BY COUNT(k.keyword_name) DESC LIMIT 1;
SELECT COUNT(*) FROM movie_languages WHERE language_id IN (SELECT language_id FROM language WHERE language_code = 'vi');
SELECT genre_name FROM genre g JOIN movie_genres mg ON g.genre_id = mg.genre_id GROUP BY g.genre_id, g.genre_name ORDER BY COUNT(mg.movie_id) ASC LIMIT 1 OFFSET 2;
SELECT l.language_name FROM movie_languages ml JOIN language l ON ml.language_id = l.language_id WHERE ml.movie_id = (SELECT m.movie_id                      FROM movie m                      WHERE m.tagline = "An offer you can't refuse.") AND ml.language_role_id = (SELECT lr.role_id                            FROM language_role lr                            WHERE lr.language_role = 'Original');
SELECT AVG(m.revenue) AS average_revenue FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE c.country_name = 'France';
SELECT character_name FROM movie_cast WHERE gender_id = (SELECT gender_id FROM gender WHERE gender = 'Unspecified');
SELECT pc.person_name, MAX(m.popularity) AS max_popularity FROM movie_crew mc JOIN person pc ON mc.person_id = pc.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE mc.job = 'Director' GROUP BY pc.person_name ORDER BY max_popularity DESC LIMIT 5;
SELECT g.genre_name, m.title, m.budget FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.budget = (     SELECT MAX(m2.budget)     FROM movie m2     JOIN movie_genres mg2 ON m2.movie_id = mg2.movie_id     WHERE mg2.genre_id = mg.genre_id ) ORDER BY g.genre_name;
SELECT m.title FROM movie m JOIN movie_keywords mk ON m.movie_id = mk.movie_id GROUP BY m.movie_id ORDER BY COUNT(mk.keyword_id) DESC LIMIT 1;
SELECT d.department_name, COUNT(mc.person_id) AS people_count FROM department d JOIN movie_crew mc ON d.department_id = mc.department_id GROUP BY d.department_name ORDER BY people_count DESC LIMIT 1;
SELECT     (SUM(CASE WHEN pc.country_id IN (SELECT country_id FROM country WHERE country_iso_code = 'US') THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM     movie m JOIN     production_country pc ON m.movie_id = pc.movie_id;
SELECT     AVG(CASE             WHEN gender = 'Female' THEN female_count             ELSE 0         END / NULLIF(male_count, 0)) AS average_female_to_male_ratio FROM (     SELECT         mc.movie_id,         SUM(CASE WHEN m.gender_id = (SELECT gender_id FROM gender WHERE gender = 'Female') THEN 1 ELSE 0 END) AS female_count,         SUM(CASE WHEN m.gender_id = (SELECT gender_id FROM gender WHERE gender = 'Male') THEN 1 ELSE 0 END) AS male_count     FROM         movie_cast mc     JOIN         person p ON mc.person_id = p.person_id     JOIN         gender m ON mc.gender_id = m.gender_id     GROUP BY         mc.movie_id ) AS gender_counts;
SELECT title FROM movie WHERE release_date LIKE '1945%';
SELECT country_id, country_iso_code FROM country WHERE country_name = 'Belgium';
SELECT mc.character_name FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Catherine Deneuve';
SELECT m.title FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE l.language_name = 'Somali';
SELECT m.release_date, l.language_name FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE m.popularity = (SELECT MAX(popularity) FROM movie);
SELECT l.language_name FROM movie_languages ml JOIN language l ON ml.language_id = l.language_id WHERE ml.movie_id = (SELECT movie_id FROM movie WHERE title = 'Four Rooms') AND ml.language_role_id = (SELECT role_id FROM language_role WHERE language_role = 'Original');
SELECT character_name FROM movie_cast WHERE movie_id = (SELECT movie_id FROM movie WHERE title = 'Open Water');
SELECT pc.person_name FROM movie_cast mc JOIN person pc ON mc.person_id = pc.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Pirates of the Caribbean: At World''s End' AND mc.cast_order = (SELECT MIN(cast_order) FROM movie_cast WHERE movie_id = m.movie_id);
SELECT p.person_name FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id WHERE mc.job = 'Camera Supervisor';
SELECT job FROM movie_crew WHERE person_id = (SELECT person_id FROM person WHERE person_name = 'Sally Menke');
SELECT p.person_name, d.department_name FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id JOIN department d ON mc.department_id = d.department_id JOIN movie m ON mc.movie_id = m.movie_id WHERE mc.job = 'Music Editor' AND m.title = 'Pirates of the Caribbean: At World''s End';
SELECT m.title, m.revenue FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'DreamWorks';
SELECT COUNT(m.movie_id) AS number_of_movies FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE c.country_name = 'Canada';
SELECT g.genre_name FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.title = 'Forrest Gump';
SELECT pc.company_name FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE m.release_date LIKE '2016%' AND (m.runtime - (SELECT AVG(runtime) FROM movie WHERE release_date LIKE '2016%')) / (SELECT AVG(runtime) FROM movie WHERE release_date LIKE '2016%') * 100 > 35;
SELECT     (COUNT(CASE WHEN k.keyword_name = 'woman director' THEN mk.movie_id END) -      COUNT(CASE WHEN k.keyword_name = 'independent film' THEN mk.movie_id END)) * 100.0 /     COUNT(mk.movie_id) AS percentage FROM     movie_keywords mk JOIN     keyword k ON mk.keyword_id = k.keyword_id;
SELECT g.genre_name FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.title = 'Dancer in the Dark';
SELECT COUNT(*) FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'Adventure' AND m.release_date LIKE '2000%';
SELECT m.title FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Paramount Pictures' AND m.release_date LIKE '2000%';
SELECT k.keyword_name FROM movie_keywords mk JOIN keyword k ON mk.keyword_id = k.keyword_id JOIN movie m ON mk.movie_id = m.movie_id WHERE m.title = 'Finding Nemo';
SELECT m.title FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'horror' AND m.vote_average > 7;
SELECT COUNT(*) AS production_company_count FROM production_company WHERE company_id IN (     SELECT company_id     FROM movie_company     GROUP BY company_id     HAVING COUNT(movie_id) > 150 );
SELECT DISTINCT mc.job FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id WHERE p.person_name = 'Mark Hammil';
SELECT COUNT(*) AS main_actor_count FROM movie_cast mc JOIN movie m ON mc.movie_id = m.movie_id JOIN gender g ON mc.gender_id = g.gender_id WHERE m.title = 'Pirates of the Caribbean: At World''s End' AND g.gender = 'male' AND mc.cast_order = (SELECT MIN(cast_order)                      FROM movie_cast                      WHERE movie_id = m.movie_id);
SELECT m.title FROM movie m JOIN movie_cast mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Harrison Ford';
SELECT mc.character_name FROM movie_cast mc JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND mc.person_id = (SELECT person_id FROM person WHERE person_name = 'Orlando Bloom');
SELECT AVG(horror_count) AS average_horror_movies FROM (     SELECT COUNT(mg.movie_id) AS horror_count     FROM movie_genres mg     JOIN genre g ON mg.genre_id = g.genre_id     GROUP BY mg.movie_id     HAVING g.genre_name = 'horror' ) AS horror_movies;
SELECT p.person_name FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Pirates of the Caribbean: At World\'s End' AND mc.job = 'Producer';
SELECT m.title, AVG(m.revenue) AS average_income FROM movie m JOIN movie_keywords mk ON m.movie_id = mk.movie_id JOIN keyword k ON mk.keyword_id = k.keyword_id WHERE k.keyword_name = 'paris' GROUP BY m.title;
SELECT COUNT(*) FROM Method WHERE Lang = 'en' AND CommentIsXml = 1;
SELECT SUBSTRING_INDEX(Name, '.', 2) AS Task FROM Method WHERE NameTokenized = 'online median filter test median window filling';
SELECT SolutionId, SampledAt FROM Method WHERE SampledAt = (SELECT MAX(SampledAt) FROM Method);
SELECT Url, Forks FROM Repo WHERE Forks = (SELECT MAX(Forks) FROM Repo);
SELECT RepoId FROM Solution GROUP BY RepoId ORDER BY COUNT(Path) DESC LIMIT 1;
SELECT Url, Stars FROM Repo ORDER BY Stars DESC LIMIT 1;
SELECT Path FROM Solution WHERE ProcessedTime = (SELECT MAX(ProcessedTime) FROM Solution);
SELECT ProcessedTime FROM Repo WHERE Id = (SELECT Id FROM Repo ORDER BY Watchers DESC LIMIT 1);
SELECT r.Url FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE s.Path = 'nofear_Mara\\Mara.sln';
SELECT r.Url, MAX(r.ProcessedTime) AS LongestProcessedTime, s.WasCompiled FROM Repo r JOIN Solution s ON r.Id = s.RepoId GROUP BY r.Url, s.WasCompiled HAVING s.WasCompiled = 1 ORDER BY LongestProcessedTime DESC LIMIT 1;
SELECT m.NameTokenized FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.Path = 'maravillas_linq-to-delicious\tasty.sln';
SELECT r.Id, r.Url, COUNT(s.Path) AS SolutionPathCount FROM Repo r JOIN Solution s ON r.Id = s.RepoId WHERE r.Stars BETWEEN 6000 AND 9000 GROUP BY r.Id, r.Url HAVING COUNT(s.Path) = (     SELECT MAX(SolutionPathCount)     FROM (         SELECT COUNT(s2.Path) AS SolutionPathCount         FROM Repo r2         JOIN Solution s2 ON r2.Id = s2.RepoId         WHERE r2.Stars BETWEEN 6000 AND 9000         GROUP BY r2.Id     ) AS subquery ) AND SUM(CASE WHEN s.WasCompiled = 0 THEN 1 ELSE 0 END) > 0;
SELECT M.ApiCalls FROM Method M JOIN Solution S ON M.SolutionId = S.Id JOIN Repo R ON S.RepoId = R.Id WHERE R.Url = 'https://github.com/wallerdev/htmlsharp.git';
SELECT COUNT(Path) FROM Solution WHERE RepoId = (     SELECT Id     FROM Repo     ORDER BY Watchers DESC     LIMIT 1 OFFSET 1 );
SELECT AVG(Solution.ProcessedTime) AS AverageProcessedTime FROM Solution JOIN Repo ON Solution.RepoId = Repo.Id WHERE Repo.Url = 'https://github.com/zphingphong/DiscardCustomerApp.git';
SELECT m.FullComment FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.Path = 'bmatzelle_nini\Source\Nini.sln' AND m.NameTokenized = 'alias text add alias';
SELECT m.ApiCalls FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.Path = 'mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln';
SELECT COUNT(*) FROM Solution WHERE RepoId = (SELECT Id FROM Repo WHERE Url = 'https://github.com/jeffdik/tachy.git') AND WasCompiled = 0;
SELECT ProcessedTime, Lang FROM Method WHERE NameTokenized = 'about box1 dispose';
SELECT m.SampledAt FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Name = 'GitHubRepo.Cli.GitHubClientWrapper.GetReleases' AND s.Path = 'maxild_playground\Playground.sln';
SELECT m.Lang FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.Path = 'opendns_diagnosticapp\windows\OpenDnsDiagnostic.sln';
SELECT SUBSTRING_INDEX(Name, '.', 2) AS Task FROM Method WHERE NameTokenized = 'html parser feed';
SELECT CommentIsXml FROM Method WHERE Name = 'HtmlSharp.HtmlParser.Feed';
SELECT * FROM Method WHERE Summary = 'Write a command to the log';
SELECT COUNT(*) FROM Solution WHERE RepoId = (SELECT Id FROM Repo ORDER BY Stars DESC LIMIT 1);
SELECT s.Path FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Stars = (SELECT MAX(Stars) FROM Repo);
SELECT r.Url FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE s.Id = 12;
SELECT COUNT(*) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Forks > 1000 AND s.WasCompiled = 1;
SELECT     CASE         WHEN (SELECT Watchers FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 18)) >              (SELECT Watchers FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 19))         THEN 18         ELSE 19     END AS MorePopularSolution
SELECT COUNT(*) FROM Solution WHERE ProcessedTime = (SELECT MAX(ProcessedTime) FROM Solution) AND WasCompiled = 0;
SELECT r.ProcessedTime FROM Repo r JOIN Solution s ON r.Id = s.RepoId WHERE s.Path = 'jeffdik_tachy\src\Tachy.sln';
SELECT r.Url FROM Repo r JOIN Solution s ON r.Id = s.RepoId WHERE s.Id = 9;
SELECT Solution.Path FROM Solution JOIN Repo ON Solution.RepoId = Repo.Id WHERE Repo.Url = 'https://github.com/maxild/playground.git';
SELECT COUNT(DISTINCT r.Id) FROM Repo r JOIN Solution s ON r.Id = s.RepoId WHERE r.Stars > 200 AND s.ProcessedTime < 636439500080712000;
SELECT DISTINCT s.Id FROM Solution s JOIN Repo r ON s.RepoId = r.Id ORDER BY r.Forks DESC LIMIT 3;
SELECT AVG(Solution.ProcessedTime) AS AverageProcessingTime FROM Solution JOIN Repo ON Solution.RepoId = Repo.Id WHERE Repo.Url = 'https://github.com/jeffdik/tachy.git';
SELECT     (SELECT Forks FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 18)) -     (SELECT Forks FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 19)) AS ForksDifference,     ((SELECT Forks FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 18)) -     (SELECT Forks FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 19))) * 100.0 /     (SELECT Forks FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 19)) AS PercentageDifference
SELECT Lang FROM Method WHERE Name = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn';
SELECT FullComment FROM Method WHERE Name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows';
SELECT Summary FROM Method WHERE Name = 'Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection';
SELECT NameTokenized FROM Method WHERE Name = 'Supay.Irc.Messages.KnockMessage.GetTokens';
SELECT Stars FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 45997);
SELECT COUNT(*) AS SolutionCount FROM Solution WHERE RepoId = (SELECT Id FROM Repo WHERE Stars = 8094);
SELECT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally';
SELECT s.ProcessedTime FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.NameTokenized = 'interp parser expr';
SELECT s.RepoId FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Name = 'SCore.Poisson.ngtIndex';
SELECT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Name = 'ExportToRTF.RTFStyleSheet.H6Write';
SELECT COUNT(*) FROM Solution WHERE RepoId = (SELECT Id FROM Repo WHERE Watchers = 8094);
SELECT r.Url FROM Repo r JOIN Solution s ON r.Id = s.RepoId GROUP BY r.Url ORDER BY COUNT(s.Id) DESC LIMIT 1;
SELECT COUNT(*) FROM Solution WHERE RepoId = (SELECT Id FROM Repo WHERE Forks = 1445);
SELECT Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.Lang = 'zh-cn' GROUP BY Path ORDER BY COUNT(Path) DESC LIMIT 1;
SELECT r.Watchers FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE s.Id = 338082;
SELECT COUNT(*) FROM Solution WHERE RepoId = (SELECT Id FROM Repo WHERE Stars = 189) AND WasCompiled = 0;
SELECT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy';
SELECT s.ProcessedTime FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.NameTokenized = 't jadwal entity get single mpic';
SELECT s.RepoId FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Name = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal';
SELECT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Summary = 'Refetches the Entity from the persistent storage. Refetch is used to re-load an Entity which is marked "Out-of-sync", due to a save action. Refetching an empty Entity has no effect.';
SELECT COUNT(*) FROM Solution WHERE RepoId = (SELECT Id FROM Repo WHERE Stars = 3060);
SELECT s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.Lang = 'sw' GROUP BY s.Id ORDER BY COUNT(m.Lang) DESC LIMIT 1;
SELECT     (SELECT r1.Watchers      FROM Solution s1      JOIN Repo r1 ON s1.RepoId = r1.Id      WHERE s1.Id = 83855) * 100.0 /     (SELECT r2.Watchers      FROM Solution s2      JOIN Repo r2 ON s2.RepoId = r2.Id      WHERE s2.Id = 1502) - 100 AS PercentageIncrease;
SELECT     (SELECT r1.Stars      FROM Solution s1      JOIN Repo r1 ON s1.RepoId = r1.Id      WHERE s1.Id = 51424) * 100.0 /     (SELECT r2.Stars      FROM Solution s2      JOIN Repo r2 ON s2.RepoId = r2.Id      WHERE s2.Id = 167053) - 100 AS PercentMoreStars;
SELECT     ( (r1.Forks - r2.Forks) * 100.0 / r2.Forks ) AS PercentMoreForks FROM     Solution s1 JOIN     Repo r1 ON s1.RepoId = r1.Id JOIN     Solution s2 ON s2.Id = 1502 JOIN     Repo r2 ON s2.RepoId = r2.Id WHERE     s1.Id = 53546;
SELECT m.Name FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.ProcessedTime = '636449700980488000';
SELECT COUNT(*) FROM Solution WHERE RepoId = (SELECT Id FROM Repo WHERE Url = 'https://github.com/derickbailey/presentations-and-training.git');
SELECT SUM(S.ProcessedTime) AS TotalProcessedTime FROM Solution S JOIN Repo R ON S.RepoId = R.Id WHERE R.Id = (     SELECT R2.Id     FROM Repo R2     ORDER BY R2.Forks DESC     LIMIT 1 );
SELECT DISTINCT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Lang = 'it';
SELECT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Name = 'spinachLexer.mT__55';
SELECT m.* FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Lang = 'en' AND s.RepoId = 1093;
SELECT Path FROM Solution WHERE RepoId = (SELECT Id FROM Repo WHERE Url = 'https://github.com/ecoffey/Bebop.git');
SELECT DISTINCT r.Id FROM Repo r JOIN Solution s ON r.Id = s.RepoId JOIN Method m ON s.Id = m.SolutionId WHERE m.Lang = 'ro';
SELECT Solution.RepoId FROM Method JOIN Solution ON Method.SolutionId = Solution.Id WHERE Method.NameTokenized = 'crc parameters get hash code';
SELECT COUNT(*) FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.Path = 'maravillas_linq-to-delicious\tasty.sln';
SELECT Id FROM Solution WHERE ProcessedTime = '636430969128176000';
SELECT r.Url FROM Repo r JOIN Solution s ON r.Id = s.RepoId WHERE s.ProcessedTime = (SELECT MAX(ProcessedTime) FROM Solution);
SELECT * FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Forks > (r.Watchers / 2);
SELECT (F.Forks * 100.0 / S.Stars) AS Percentage FROM Solution AS S JOIN Repo AS R ON S.RepoId = R.Id WHERE S.Id = 104086;
SELECT Id FROM Repo WHERE Stars = (SELECT MAX(Stars) FROM Repo);
SELECT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Name = 'HtmlSharp.HtmlParser.Feed';
SELECT r.Forks FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE s.Id = 35;
SELECT Id FROM Solution WHERE RepoId = (SELECT Id FROM Repo ORDER BY Watchers DESC LIMIT 1);
SELECT Stars FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 20);
SELECT COUNT(m.Id) AS MethodCount, s.WasCompiled FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.Id = 1;
SELECT     (SUM(CASE WHEN s.WasCompiled = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(s.Id)) AS Percentage FROM     Method m JOIN     Solution s ON m.SolutionId = s.Id WHERE     m.CommentIsXml = 1;
SELECT m.Name FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.Path = 'wallerdev_htmlsharp\HtmlSharp.sln';
SELECT DIVIDE(MULTIPLY(COUNT(CASE WHEN Stars > 2000 THEN 1 END), 100), COUNT(Id)) AS Percentage FROM Repo;
SELECT r.Url FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE s.Id = 1;
SELECT Id FROM Repo WHERE Stars = 21 ORDER BY Forks DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN Lang = 'en' THEN 1 END) * 100.0 / COUNT(*)) AS PercentageEnglishMethods FROM     Method WHERE     CommentIsXml = 1;
SELECT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.NameTokenized = 'html parser feed';
SELECT s.Id FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Forks = 238;
SELECT NameTokenized FROM Method WHERE Lang = 'en' AND SolutionId IN (SELECT Id FROM Solution WHERE WasCompiled = 0);
SELECT COUNT(*) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE (r.Stars * (1/3)) > r.Forks;
SELECT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.FullComment = 'Feeds data into the parser';
SELECT COUNT(*) FROM Method WHERE SolutionId IN (SELECT Id FROM Solution WHERE RepoId = 3) AND CommentIsXml = 1;
SELECT     (SUM(CASE WHEN s.WasCompiled = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(s.Id)) AS PercentageOfUncompiledSolutions FROM     Method m JOIN     Solution s ON m.SolutionId = s.Id WHERE     m.Lang = 'en';
SELECT     (100.0 * (r1.Stars - r2.Stars) / r2.Stars) AS PercentageDifference FROM     Solution s1 JOIN     Repo r1 ON s1.RepoId = r1.Id JOIN     Solution s2 ON s2.Id = 2 JOIN     Repo r2 ON s2.RepoId = r2.Id WHERE     s1.Id = 1;
SELECT COUNT(*) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Stars > (r.Forks / 3);
SELECT SUBSTRING_INDEX(Name, '.', -1) AS Task FROM Method WHERE Id = 2;
SELECT CommentIsXml FROM Method WHERE Id = 8;
SELECT Url FROM Repo WHERE Watchers = (SELECT MAX(Watchers) FROM Repo);
SELECT SUBSTRING_INDEX(m.Name, '.', -1) AS Task FROM Method m WHERE m.Lang = 'cs';
SELECT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Id = 3;
SELECT Lang FROM Method WHERE Id = 28 AND SolutionId IN (SELECT Id FROM Solution WHERE RepoId = 3);
SELECT s.ProcessedTime, COUNT(m.Id) AS MethodCount FROM Solution s LEFT JOIN Method m ON s.Id = m.SolutionId WHERE s.Id = 1 GROUP BY s.ProcessedTime;
SELECT COUNT(*) AS MethodCount FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.NameTokenized LIKE 'query language%' GROUP BY s.RepoId HAVING COUNT(m.Id) > 1;
SELECT M.ApiCalls, S.Path FROM Method M JOIN Solution S ON M.SolutionId = S.Id WHERE M.Id = 10;
SELECT COUNT(*) FROM Method WHERE SolutionId IN (SELECT Id FROM Solution WHERE RepoId = 150) AND FullComment IS NULL AND Summary IS NULL;
SELECT m.CommentIsXml FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Id = 50 AND s.Path = 'managedfusion_managedfusion\ManagedFusion.sln';
SELECT Name FROM Method WHERE NameTokenized = 'string extensions to pascal case';
SELECT NameTokenized FROM Method WHERE Name = 'Sky.Excel.ExcelBook.TypeConvert';
SELECT COUNT(Path) FROM Solution WHERE RepoId = (SELECT Id FROM Repo WHERE Url = 'https://github.com/jeffdik/tachy.git');
SELECT r.Watchers FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE s.Path = 'maff_se3ue7\US7.sln';
SELECT Url FROM Repo JOIN Solution ON Repo.Id = Solution.RepoId WHERE Solution.WasCompiled = 1 LIMIT 5;
SELECT s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.NameTokenized = 'matrix multiply';
SELECT COUNT(*) FROM Method m JOIN Solution s ON m.SolutionId = s.Id JOIN Repo r ON s.RepoId = r.Id WHERE r.Url = 'https://github.com/dogeth/vss2git.git' AND m.CommentIsXml = 1;
SELECT DISTINCT s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.SampledAt = '636431758961741000' LIMIT 5;
SELECT r.Url FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE s.Path = 'joeyrobert_bloomfilter\DataTypes.BloomFilter.sln';
SELECT m.Name FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.Path = 'graffen_NLog.Targets.Syslog\src\NLog.Targets.Syslog.sln';
SELECT m.NameTokenized FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.Path = 'jurney_P4Backup\P4Backup\P4Backup.sln';
SELECT r.Url, m.Summary FROM Method m JOIN Solution s ON m.SolutionId = s.Id JOIN Repo r ON s.RepoId = r.Id WHERE m.Summary = 'A test for Decompose';
SELECT Stars FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE s.Path = 'ninject_Ninject\Ninject.sln';
SELECT COUNT(Path) FROM Solution WHERE RepoId = (SELECT Id FROM Repo WHERE Stars = 111 AND Forks = 58 AND Watchers = 111);
SELECT AVG(S.ProcessedTime) AS AverageProcessedTime FROM Solution S JOIN Repo R ON S.RepoId = R.Id WHERE R.Stars = 254 AND R.Forks = 88 AND R.Watchers = 254;
SELECT COUNT(DISTINCT m.Lang) FROM Method m JOIN Solution s ON m.SolutionId = s.Id JOIN Repo r ON s.RepoId = r.Id WHERE r.Url = 'https://github.com/managedfusion/managedfusion.git';
SELECT COUNT(*) FROM trains WHERE direction = 'east';
SELECT COUNT(*) FROM cars WHERE train_id = 1;
SELECT shape FROM cars WHERE train_id = 1 AND position = 4;
SELECT DISTINCT t.id FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.shape IN ('elipse', 'bucket');
SELECT COUNT(*) FROM cars WHERE train_id = 1 AND roof = 'none';
SELECT id FROM cars WHERE train_id = 1 AND wheels = 2;
SELECT COUNT(DISTINCT t.id) FROM trains t JOIN cars c ON t.id = c.train_id WHERE t.direction = 'east' AND c.shape IN ('elipse', 'bucket');
SELECT t.id FROM trains t JOIN (     SELECT train_id, COUNT(*) AS carsNum     FROM cars     GROUP BY train_id ) c ON t.id = c.train_id WHERE t.direction = 'east' AND c.carsNum < 4;
SELECT cars.id FROM cars JOIN trains ON cars.train_id = trains.id WHERE cars.sides = 'double' AND trains.direction = 'west';
SELECT COUNT(DISTINCT t.id) FROM trains t JOIN cars c ON t.id = c.train_id WHERE t.direction = 'east' GROUP BY t.id HAVING SUM(CASE WHEN c.len = 'long' THEN 1 ELSE 0 END) > 2;
SELECT DISTINCT t.direction FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.load_num = 0;
SELECT t.direction FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.shape = 'ellipse';
SELECT COUNT(*) FROM cars JOIN trains ON cars.train_id = trains.id WHERE trains.direction = 'east' AND cars.len = 'short';
SELECT c.shape FROM cars c JOIN trains t ON c.train_id = t.id WHERE t.direction = 'east' AND c.position = 1;
SELECT COUNT(*) FROM cars JOIN trains ON cars.train_id = trains.id WHERE trains.direction = 'east' AND cars.roof = 'flat';
SELECT COUNT(*) FROM cars c JOIN trains t ON c.train_id = t.id WHERE t.direction = 'east' AND c.roof = 'flat' AND c.load_shape = 'circle';
SELECT t.direction, COUNT(c.shape) AS rectCarsNum FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.shape = 'rectangle' GROUP BY t.direction ORDER BY rectCarsNum DESC LIMIT 1;
SELECT DISTINCT t.direction FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.len = 'short' AND c.position = 4;
SELECT AVG(car_count) AS average_cars FROM (     SELECT COUNT(c.id) AS car_count     FROM cars c     JOIN trains t ON c.train_id = t.id     WHERE t.direction = 'east'     GROUP BY c.train_id ) AS train_car_counts;
SELECT     (COUNT(CASE WHEN t.direction = 'east' THEN t.id END) * 100.0 / COUNT(t.id)) AS east_percentage FROM     trains t JOIN     cars c ON t.id = c.train_id WHERE     c.shape IN ('bucket', 'ellipse') GROUP BY     t.id;
SELECT COUNT(*) FROM cars WHERE len = 'short' AND shape = 'hexagon';
SELECT COUNT(*) FROM trains WHERE direction = 'west';
SELECT load_shape FROM cars WHERE len = 'short' AND shape = 'ellipse';
SELECT id FROM trains WHERE direction = 'east';
SELECT SUM(wheels) FROM cars WHERE len = 'long';
SELECT direction FROM trains GROUP BY direction ORDER BY COUNT(id) DESC LIMIT 1;
SELECT COUNT(DISTINCT t.id) AS trains_with_at_least_4_cars FROM trains t JOIN cars c ON t.id = c.train_id WHERE t.direction = 'east' GROUP BY t.id HAVING COUNT(c.id) >= 4;
SELECT t.direction FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.position = 2 AND c.shape = 'rectangle' GROUP BY t.direction ORDER BY COUNT(t.id) DESC LIMIT 1;
SELECT COUNT(*) FROM trains t JOIN cars c ON t.id = c.train_id WHERE t.direction = 'west' AND c.sides = 'double' AND c.position = 3;
SELECT COUNT(*) FROM trains t JOIN cars c ON t.id = c.train_id WHERE t.direction = 'east' AND c.shape = 'rectangular' AND c.position = 1;
SELECT COUNT(DISTINCT t.id) FROM trains t LEFT JOIN cars c ON t.id = c.train_id WHERE t.direction = 'west' GROUP BY t.id HAVING SUM(c.roof = 'none') <= 1;
SELECT direction FROM trains WHERE id IN (     SELECT train_id     FROM cars     GROUP BY train_id     HAVING COUNT(*) = 3 ) GROUP BY direction ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT t.id) FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.load_num = 3 AND c.position = 1 AND t.direction = 'east';
SELECT COUNT(*) FROM cars c JOIN trains t ON c.train_id = t.id WHERE t.direction = 'east' AND c.sides = 'double' AND c.position = 'trailPosi';
SELECT DISTINCT t.direction FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.load_num = 0;
SELECT t.direction FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.position = 2 AND c.load_shape = 'diamond';
SELECT COUNT(DISTINCT t.id) FROM trains t JOIN cars c ON t.id = c.train_id WHERE t.direction = 'west' AND c.wheels = 3 AND c.roof = 'jagged';
SELECT t.direction FROM trains t JOIN (     SELECT train_id     FROM cars     GROUP BY train_id     HAVING COUNT(*) <= 2 ) c ON t.id = c.train_id;
SELECT     t.direction,     (COUNT(CASE WHEN car_count >= 4 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM     trains t JOIN     (SELECT train_id, COUNT(*) AS car_count      FROM cars      GROUP BY train_id) c ON t.id = c.train_id GROUP BY     t.direction;
WITH head_cars AS (     SELECT c.load_shape, t.direction     FROM cars c     JOIN trains t ON c.train_id = t.id     WHERE c.position = 1 ), load_shape_counts AS (     SELECT load_shape, COUNT(*) AS count     FROM head_cars     GROUP BY load_shape ), max_load_shape AS (     SELECT load_shape     FROM load_shape_counts     WHERE count = (SELECT MAX(count) FROM load_shape_counts) ), east_trains AS (     SELECT COUNT(*) AS east_count     FROM head_cars     WHERE direction = 'east' AND load_shape IN (SELECT load_shape FROM max_load_shape) ), total_trains AS (     SELECT COUNT(*) AS total_count     FROM head_cars     WHERE load_shape IN (SELECT load_shape FROM max_load_shape) ) SELECT (east_count * 100.0 / total_count) AS east_percentage FROM east_trains, total_trains;
SELECT c."Character Name" FROM characters c JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Look Who\'s Talking';
SELECT c."Character Name" FROM characters c JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Batman' ORDER BY c.screentime DESC LIMIT 1;
SELECT a.Name FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE c.Character_Name = 'Joker' AND m.Title = 'Batman';
SELECT a.Name FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Batman';
SELECT m.Title FROM movie m JOIN characters c ON m.MovieID = c.MovieID WHERE c.Character_Name = 'Dr. Archibald ''Moonlight'' Graham';
SELECT m.Title FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Name = 'Tom Cruise';
SELECT COUNT(*) FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Name = 'Morgan Freeman' AND m.MPAA_Rating = 'PG';
SELECT m.Title, m.Rating FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Name = 'Tom Cruise' ORDER BY m.Rating DESC LIMIT 1;
SELECT c."Character Name" FROM characters c JOIN actor a ON c.ActorID = a.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE a.Name = 'Tom Cruise' AND m.Title = 'Born on the Fourth of July';
SELECT c."Character Name" FROM characters c JOIN actor a ON c.ActorID = a.ActorID WHERE a.Name = 'Tom Cruise';
SELECT a.Name, MAX(a.Height) AS TallestHeight FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Batman' GROUP BY a.Name ORDER BY TallestHeight DESC LIMIT 1;
SELECT COUNT(DISTINCT c.MovieID) AS NumberOfMovies FROM actor a JOIN characters c ON a.ActorID = c.ActorID WHERE a.Gender = 'Male' AND a.Ethnicity = 'African American';
SELECT AVG(m.Rating) AS AverageRating FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Name = 'Tom Cruise';
SELECT     (MAX(screentime) - MIN(screentime)) / MIN(screentime) * 100 AS percentage_difference FROM     characters WHERE     MovieID = (SELECT MovieID FROM movie WHERE Title = 'Batman');
SELECT Title FROM movie WHERE Budget = (SELECT MAX(Budget) FROM movie);
SELECT m.MPAA_Rating FROM movie m JOIN characters c ON m.MovieID = c.MovieID WHERE c.Character_Name = 'Peter Quill';
SELECT c."Character Name" FROM characters c JOIN movie m ON c.MovieID = m.MovieID WHERE c.creditOrder = '1' AND m.Genre = 'Thriller' AND m.Rating = (SELECT MAX(Rating) FROM movie WHERE Genre = 'Thriller');
SELECT a.Name FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Batman' ORDER BY c.screentime DESC LIMIT 1;
SELECT COUNT(DISTINCT c.MovieID) AS MovieCount FROM actor a JOIN characters c ON a.ActorID = c.ActorID WHERE a.NetWorth = (SELECT MAX(NetWorth) FROM actor);
SELECT a.Name FROM actor a JOIN characters c ON a.ActorID = c.ActorID WHERE c.CharacterName = 'Chanice Kobolowski';
SELECT a."Date of Birth" FROM actor a JOIN characters c ON a.ActorID = c.ActorID WHERE c."Character Name" = 'Sully';
SELECT a.BirthCity FROM actor a JOIN characters c ON a.ActorID = c.ActorID WHERE c.CharacterName = 'Gabriel Martin';
SELECT a.Biography FROM actor a JOIN characters c ON a.ActorID = c.ActorID WHERE c.Character_Name = 'Michael Moscovitz';
SELECT a.Height FROM actor a JOIN characters c ON a.ActorID = c.ActorID WHERE c.CharacterName = 'Lurch';
SELECT `Character Name` FROM characters WHERE MovieID = (SELECT MovieID FROM movie WHERE Title = 'G.I. Joe: The Rise of Cobra') AND creditOrder = 3;
SELECT a.Name FROM characters c JOIN actor a ON c.ActorID = a.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'American Hustle' AND c.creditOrder = '2';
SELECT a.Name FROM characters c JOIN actor a ON c.ActorID = a.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE c.creditOrder = '1' AND m.Release_Date = '2015-10-26';
SELECT     (COUNT(CASE WHEN a.BirthCountry = 'USA' THEN 1 END) * 100.0 / COUNT(a.ActorID)) AS PercentageUSAActors FROM     actor a JOIN     characters c ON a.ActorID = c.ActorID JOIN     movie m ON c.MovieID = m.MovieID WHERE     m.Title = 'Mrs. Doubtfire';
SELECT     (COUNT(CASE WHEN a."Date of Birth" > '1970-01-01' THEN 1 END) * 100.0 / COUNT(a."ActorID")) AS percentage FROM     actor a JOIN     characters c ON a."ActorID" = c."ActorID" JOIN     movie m ON c."MovieID" = m."MovieID" WHERE     m."Title" = 'Dawn of the Planet of the Apes';
SELECT MovieID FROM movie WHERE Budget = 15000000 AND Rating BETWEEN 7 AND 8;
SELECT COUNT(*) FROM movie WHERE MPAA_Rating = 'PG' AND Release_Date BETWEEN '1990-06-01' AND '1990-06-30';
SELECT Name FROM actor WHERE ActorID = 439 AND Gender = 'Male' AND Ethnicity = 'White';
SELECT DISTINCT m.Genre FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE a.BirthCity = 'New York City' AND m.Rating > 5;
SELECT COUNT(DISTINCT m.MovieID) FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE m.Genre = 'Romance' AND a.Name = 'John Travolta';
SELECT a.Height, a.NetWorth FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Three Men and a Little Lady';
SELECT m.Genre FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE m.MPAA_Rating = 'PG' AND a.NetWorth = (SELECT MAX(NetWorth) FROM actor);
SELECT a.NetWorth FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Misery' AND a.Height BETWEEN 60 AND 70;
SELECT COUNT(DISTINCT a.ActorID) FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE a.Gender = 'Male' AND a.BirthCountry = 'USA' AND m.Title = 'Ghost';
SELECT m.MPAA_Rating, m.Title FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Name = 'Leonardo DiCaprio' ORDER BY m.Budget DESC LIMIT 1;
SELECT a.NetWorth, a.Date_of_Birth FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Die Hard 2' AND a.Height_Inches BETWEEN 60 AND 65;
SELECT m.Runtime FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Ethnicity = 'African American' AND a.Date_of_Birth = '1954-12-28';
SELECT a.Name FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE c.CharacterName = 'Don Altobello' AND m.Genre = 'Drama' AND m.Gross = 136766062;
SELECT m.Gross FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE m.Genre = 'Comedy' AND m.Rating < 7 AND a.NetWorth > 375000000.00;
SELECT m.Runtime FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Name = 'Jackie Chan' AND m.Rating > 7;
SELECT     (COUNT(CASE WHEN a.NetWorth > 400000000 THEN 1 END) * 100.0 / COUNT(a.ActorID)) AS Percentage FROM     actor a JOIN     characters c ON a.ActorID = c.ActorID JOIN     movie m ON c.MovieID = m.MovieID WHERE     m.Genre = 'Drama';
SELECT c.Character_Name FROM characters c JOIN actor a ON c.ActorID = a.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE a.Gender = 'Female'   AND a.Birth_City = 'Sherman Oaks'   AND m.Title = 'Bruce Almighty'   AND a.Height_Inches > (SELECT AVG(Height_Inches) * 0.5 FROM actor);
SELECT COUNT(*) AS EnglishTweetCount FROM twitter WHERE Lang = 'en';
SELECT text FROM twitter WHERE IsReshare = 'TRUE';
SELECT COUNT(*) AS TweetCount FROM twitter WHERE Reach > 1000;
SELECT COUNT(*) FROM twitter WHERE Sentiment > 0 AND Weekday = 'Thursday';
SELECT text FROM twitter WHERE Likes = (SELECT MAX(Likes) FROM twitter);
SELECT City FROM location WHERE Country = 'Argentina';
SELECT COUNT(*) AS TotalTweets FROM twitter t JOIN location l ON t.LocationID = l.LocationID JOIN user u ON t.UserID = u.UserID WHERE l.Country = 'Argentina';
SELECT City, COUNT(TweetID) AS TweetCount FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE l.Country = 'Argentina' GROUP BY City ORDER BY TweetCount DESC LIMIT 1;
SELECT COUNT(*) FROM twitter t JOIN location l ON t.LocationID = l.LocationID JOIN user u ON t.UserID = u.UserID WHERE t.IsReshare = 'TRUE' AND l.City = 'Buenos Aires';
SELECT twitter.text FROM twitter JOIN location ON twitter.LocationID = location.LocationID WHERE location.City = 'Buenos Aires' AND twitter.Sentiment > 0;
SELECT Country FROM location JOIN twitter ON location.LocationID = twitter.LocationID WHERE twitter.Likes = (SELECT MAX(Likes) FROM twitter);
SELECT Country, COUNT(TweetID) AS PositiveTweetCount FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE t.Sentiment > 0 AND (l.Country = 'Argentina' OR l.Country = 'Australia') GROUP BY l.Country ORDER BY PositiveTweetCount DESC LIMIT 1;
SELECT COUNT(*) FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE l.City = 'Buenos Aires' AND t.Weekday = 'Thursday';
SELECT COUNT(DISTINCT u.UserID) AS MaleUserCount FROM user u JOIN twitter t ON u.UserID = t.UserID WHERE t.Likes > 1000 AND u.Gender = 'Male';
SELECT COUNT(TweetID) AS TotalTweets FROM twitter JOIN user ON twitter.UserID = user.UserID WHERE user.Gender = 'Male';
SELECT u.Gender FROM twitter t JOIN user u ON t.UserID = u.UserID WHERE t.Reach = (SELECT MAX(Reach) FROM twitter);
SELECT COUNT(*) FROM twitter t JOIN user u ON t.UserID = u.UserID JOIN location l ON t.LocationID = l.LocationID WHERE u.Gender = 'Male' AND l.Country = 'Argentina';
SELECT twitter.text FROM twitter JOIN user ON twitter.UserID = user.UserID JOIN location ON twitter.LocationID = location.LocationID WHERE user.Gender = 'Male' AND location.City = 'Buenos Aires';
SELECT AVG(TweetCount) AS AverageTweets FROM (     SELECT COUNT(t.TweetID) AS TweetCount     FROM twitter t     JOIN location l ON t.LocationID = l.LocationID     WHERE l.Country = 'Argentina'     GROUP BY l.City ) AS CityTweetCounts;
SELECT     (COUNT(CASE WHEN u.Gender = 'Male' THEN 1 END) * 100.0 / COUNT(t.TweetID)) AS MalePercentage FROM     twitter t JOIN     user u ON t.UserID = u.UserID WHERE     t.Sentiment > 0;
SELECT COUNT(*) AS NumberOfUsersWithoutGender FROM user WHERE Gender = 'Unknown';
SELECT COUNT(DISTINCT State) AS NumberOfStates FROM location WHERE Country = 'United Kingdom';
SELECT StateCode FROM location WHERE State = 'Gwynedd';
SELECT LocationID FROM location WHERE State = 'West Sussex';
SELECT COUNT(*) FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE t.IsReshare = 'TRUE' AND l.State = 'Texas';
SELECT l.Country FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE t.Reach = 547851;
SELECT COUNT(*) FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE l.State = 'Ha Noi' AND t.Sentiment > 0;
SELECT text FROM twitter WHERE LocationID IN (SELECT LocationID FROM location WHERE State = 'Connecticut') ORDER BY Klout DESC LIMIT 1;
SELECT COUNT(DISTINCT u.UserID) FROM user u JOIN twitter t ON u.UserID = t.UserID JOIN location l ON t.LocationID = l.LocationID WHERE u.Gender = 'Female' AND l.State = 'Wisconsin';
SELECT u.Gender FROM user u JOIN twitter t ON u.UserID = t.UserID WHERE t.TweetID = 'tw-715909161071091712';
SELECT l.City FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE t.text = 'One of our favorite stories is @FINRA_News''s move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a';
SELECT u.Gender FROM user u JOIN twitter t ON u.UserID = t.UserID WHERE t.RetweetCount = 535;
SELECT u.Gender FROM twitter t JOIN user u ON t.UserID = u.UserID WHERE t.Weekday = 'Wednesday' ORDER BY t.Klout DESC LIMIT 1;
SELECT u.Gender FROM twitter t JOIN user u ON t.UserID = u.UserID WHERE t.Likes = (SELECT MAX(Likes) FROM twitter);
SELECT COUNT(t.TweetID) AS NumberOfTweets FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE l.State = 'Michigan' AND t.Weekday = 'Thursday';
SELECT l.State, l.StateCode FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE t.TweetID = 'tw-685681052912873473';
SELECT     (COUNT(CASE WHEN u.Gender = 'Male' THEN 1 END) * 100.0 / COUNT(u.UserID)) AS MalePercentage FROM     user u JOIN     twitter t ON u.UserID = t.UserID JOIN     location l ON t.LocationID = l.LocationID WHERE     l.State = 'Florida';
SELECT     (COUNT(CASE WHEN t.Sentiment > 0 THEN 1 END) * 100.0 / COUNT(t.TweetID)) AS PositiveTweetPercentage FROM     twitter t JOIN     location l ON t.LocationID = l.LocationID WHERE     l.State = 'California';
SELECT Weekday FROM twitter WHERE TweetID = 'tw-682712873332805633';
SELECT COUNT(DISTINCT UserID) AS UniqueUsers FROM twitter WHERE text = 'Happy New Year to all those AWS instances of ours!';
SELECT COUNT(TweetID) AS TotalTweetIDs FROM twitter WHERE Lang = 'en';
SELECT LocationID FROM twitter WHERE TweetID = 'tw-682714048199311366' AND LocationID = 3751;
SELECT COUNT(*) AS TweetCount FROM twitter WHERE Weekday = 'Wednesday';
SELECT text FROM twitter WHERE Weekday = 'Thursday';
SELECT u.Gender FROM user u JOIN twitter t ON u.UserID = t.UserID WHERE t.TweetID = 'tw-682714583044243456';
SELECT twitter.text FROM twitter JOIN user ON twitter.UserID = user.UserID WHERE user.Gender = 'Unknown';
SELECT COUNT(t.TweetID) AS TotalMaleTweetIDs FROM twitter t JOIN user u ON t.UserID = u.UserID WHERE u.Gender = 'Male';
SELECT u.Gender, COUNT(t.TweetID) AS TweetCount FROM twitter t JOIN user u ON t.UserID = u.UserID WHERE t.Lang = 'en' GROUP BY u.Gender ORDER BY TweetCount DESC LIMIT 1;
SELECT u.Gender FROM user u JOIN twitter t ON u.UserID = t.UserID WHERE t.RetweetCount > 30 GROUP BY u.Gender;
SELECT COUNT(DISTINCT u.UserID) AS FemaleReshares FROM user u JOIN twitter t ON u.UserID = t.UserID WHERE u.Gender = 'Female' AND t.IsReshare = 'TRUE';
SELECT l.Country, SUM(t.Likes) AS TotalLikes FROM twitter t JOIN location l ON t.LocationID = l.LocationID GROUP BY l.Country ORDER BY TotalLikes DESC LIMIT 1;
SELECT l.Country FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE t.TweetID = 'tw-682723090279841798';
SELECT twitter.text FROM twitter JOIN location ON twitter.LocationID = location.LocationID WHERE location.Country = 'Australia';
SELECT t.text FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE l.City = 'Rawang' AND l.State = 'Selangor' AND l.Country = 'Malaysia';
SELECT DISTINCT Lang FROM twitter JOIN location ON twitter.LocationID = location.LocationID WHERE location.Country = 'Brazil';
SELECT l.Country FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE t.Sentiment > 0 GROUP BY l.Country ORDER BY COUNT(t.Sentiment) DESC LIMIT 1;
SELECT SUM(t.Likes) AS TotalLikes FROM twitter t JOIN user u ON t.UserID = u.UserID WHERE t.Lang = 'ru' AND u.Gender = 'Male';
SELECT AVG(TweetCount) AS AverageMaleTweetsPerWeek FROM (     SELECT UserID, COUNT(TweetID) AS TweetCount     FROM twitter     JOIN user ON twitter.UserID = user.UserID     WHERE user.Gender = 'Male'     GROUP BY UserID ) AS MaleUserTweets;
SELECT COUNT(*) FROM twitter WHERE Klout > 50;
SELECT text FROM twitter WHERE Lang <> 'en';
SELECT UserID FROM twitter GROUP BY UserID ORDER BY COUNT(TweetID) DESC LIMIT 1;
SELECT COUNT(*) AS ResharedTweets FROM twitter WHERE Weekday = 'Monday' AND IsReshare = 'TRUE';
SELECT text FROM twitter ORDER BY Reach DESC LIMIT 3;
SELECT COUNT(*) FROM twitter WHERE IsReshare = 'TRUE' AND Likes > 100;
SELECT COUNT(TweetID) AS TotalTweets FROM twitter JOIN user ON twitter.UserID = user.UserID WHERE user.Gender = 'Male' AND twitter.Weekday = 'Monday';
SELECT u.Gender FROM twitter t JOIN user u ON t.UserID = u.UserID WHERE t.Likes = (SELECT MAX(Likes) FROM twitter);
SELECT twitter.text FROM twitter JOIN user ON twitter.UserID = user.UserID WHERE twitter.Lang = 'fr' AND user.Gender = 'Male';
SELECT COUNT(*) FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE t.Lang = 'fr' AND l.Country = 'Australia';
SELECT COUNT(*) FROM twitter t JOIN user u ON t.UserID = u.UserID JOIN location l ON t.LocationID = l.LocationID WHERE t.Sentiment > 0 AND u.Gender = 'Male' AND l.Country = 'Australia';
SELECT     (COUNT(CASE WHEN t.Sentiment > 0 THEN t.TweetID END) -      COUNT(CASE WHEN t.Sentiment = 0 THEN t.TweetID END)) AS Difference FROM     twitter t JOIN     user u ON t.UserID = u.UserID WHERE     u.Gender = 'Male';
SELECT l.City FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE t.RetweetCount = (SELECT MAX(RetweetCount) FROM twitter);
SELECT City, COUNT(TweetID) AS TweetCount FROM twitter JOIN location ON twitter.LocationID = location.LocationID WHERE City IN ('Bangkok', 'Chiang Mai') GROUP BY City ORDER BY TweetCount DESC LIMIT 1;
SELECT COUNT(*) FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE l.State = 'Santa Fe' AND l.Country = 'Argentina' AND t.Day = 31;
SELECT City, COUNT(TweetID) AS TweetCount FROM twitter JOIN location ON twitter.LocationID = location.LocationID WHERE location.Country = 'Canada' GROUP BY City ORDER BY TweetCount DESC LIMIT 3;
SELECT DISTINCT l.City FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE t.Sentiment = 0;
SELECT text FROM twitter JOIN user ON twitter.UserID = user.UserID JOIN location ON twitter.LocationID = location.LocationID WHERE user.Gender = 'Male' AND location.Country = 'Argentina' ORDER BY Likes DESC LIMIT 1;
SELECT AVG(Likes) AS AverageLikes FROM twitter JOIN user ON twitter.UserID = user.UserID WHERE user.Gender = 'Male' AND twitter.Weekday = 'Monday';
SELECT City, AVG(Likes) AS AverageLikes FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE City IN ('Bangkok', 'Chiang Mai') GROUP BY City ORDER BY AverageLikes DESC LIMIT 1;
SELECT name, diff FROM course WHERE name IN ('Intro to BlockChain', 'Computer Network');
SELECT name FROM course WHERE credit < (SELECT credit FROM course WHERE name = 'Machine Learning Theory');
SELECT COUNT(*) FROM prof WHERE popularity > (SELECT popularity FROM prof WHERE first_name = 'Zhou' AND last_name = 'Zhihua');
SELECT phone_number FROM student WHERE f_name = 'Kerry' AND l_name = 'Pryor';
SELECT CONCAT(p.first_name, ' ', p.last_name) AS full_name FROM RA ra JOIN prof p ON ra.prof_id = p.prof_id JOIN student s ON ra.student_id = s.student_id WHERE s.f_name = 'Faina' AND s.l_name = 'Mallinar';
SELECT COUNT(*) FROM RA WHERE prof_id IN (SELECT prof_id FROM prof WHERE first_name = 'Sauveur' AND last_name = 'Skyme');
SELECT CONCAT(s.f_name, ' ', s.l_name) AS full_name FROM RA r JOIN student s ON r.student_id = s.student_id WHERE r.capability = 5;
SELECT COUNT(*) FROM RA WHERE prof_id = (SELECT prof_id FROM prof WHERE first_name = 'Ogdon' AND last_name = 'Zywicki') AND salary = 'med';
SELECT CONCAT(s.f_name, ' ', s.l_name) AS full_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Machine Learning Theory';
SELECT COUNT(*) FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE r.grade = 'B' AND s.gpa > 3 AND c.name = 'Machine Learning Theory';
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.f_name = 'Laughton' AND s.l_name = 'Antonio';
SELECT CONCAT(s.f_name, ' ', s.l_name) AS full_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Intro to Database 2' AND r.grade IS NULL;
SELECT s.f_name, s.l_name, r.sat FROM registration r JOIN student s ON r.student_id = s.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Machine Learning Theory' AND s.f_name IN ('Willie', 'Laughton') ORDER BY r.sat DESC LIMIT 1;
SELECT COUNT(DISTINCT p.prof_id) AS male_professors FROM prof p JOIN RA r ON p.prof_id = r.prof_id WHERE p.gender = 'male' GROUP BY p.prof_id HAVING COUNT(r.student_id) > 3;
SELECT COUNT(DISTINCT r.student_id) AS undergraduate_count FROM registration r JOIN course c ON r.course_id = c.course_id JOIN student s ON r.student_id = s.student_id WHERE c.name = 'Machine Learning Theory' AND s.type = 'UG';
SELECT CONCAT(p.first_name, ' ', p.last_name) AS full_name FROM RA r JOIN prof p ON r.prof_id = p.prof_id JOIN student s ON r.student_id = s.student_id WHERE s.f_name = 'Willie' AND s.l_name = 'Rechert';
SELECT AVG(s.gpa) AS average_gpa FROM RA r JOIN student s ON r.student_id = s.student_id JOIN prof p ON r.prof_id = p.prof_id WHERE p.first_name = 'Ogdon' AND p.last_name = 'Zywicki';
SELECT AVG(sat) AS average_satisfaction FROM registration JOIN course ON registration.course_id = course.course_id WHERE course.name = 'Machine Learning Theory';
SELECT COUNT(*) FROM student WHERE type = 'RPG';
SELECT CONCAT(f_name, ' ', l_name) AS full_name FROM student WHERE gpa = (SELECT MAX(gpa) FROM student);
SELECT COUNT(DISTINCT r.student_id) FROM registration r JOIN course c ON r.course_id = c.course_id WHERE c.credit = 3 AND c.diff = 1 AND r.grade = 'A';
SELECT COUNT(DISTINCT r.student_id) AS num_students FROM registration r JOIN course c ON r.course_id = c.course_id WHERE c.diff = 5;
SELECT CONCAT(p.first_name, ' ', p.last_name) AS full_name FROM RA r JOIN prof p ON r.prof_id = p.prof_id JOIN student s ON r.student_id = s.student_id WHERE CONCAT(s.f_name, ' ', s.l_name) = 'Oliy Spratling';
SELECT p.popularity FROM prof p JOIN RA r ON p.prof_id = r.prof_id JOIN student s ON r.student_id = s.student_id WHERE s.f_name = 'Harrietta' AND s.l_name = 'Lydford';
SELECT COUNT(*) FROM RA WHERE prof_id = (SELECT prof_id FROM prof WHERE gender = 'female' ORDER BY teachingability ASC LIMIT 1);
SELECT CONCAT(p.first_name, ' ', p.last_name) AS full_name FROM prof p JOIN RA r ON p.prof_id = r.prof_id GROUP BY p.prof_id HAVING COUNT(r.student_id) > 2 ORDER BY MAX(p.teachingability) DESC LIMIT 1;
SELECT r.grade FROM registration r JOIN student s ON r.student_id = s.student_id JOIN course c ON r.course_id = c.course_id WHERE s.f_name = 'Rik' AND s.l_name = 'Unsworth' AND c.name = 'Computer Network';
SELECT COUNT(*) FROM registration r JOIN student s ON r.student_id = s.student_id WHERE s.f_name = 'Alvera' AND s.l_name = 'McQuillin';
SELECT s.f_name, s.l_name FROM RA r JOIN student s ON r.student_id = s.student_id JOIN prof p ON r.prof_id = p.prof_id WHERE s.type = 'RPG' AND p.first_name = 'Zhihua' AND p.last_name = 'Zhou';
SELECT COUNT(DISTINCT r.student_id) AS number_of_students FROM registration r JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Statistical Learning';
SELECT CONCAT(s.f_name, ' ', s.l_name) AS full_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Applied Deep Learning' AND (r.grade IS NULL OR r.grade = '');
SELECT s.phone_number FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE r.grade = 'A' AND c.name = 'Intro to BlockChain';
SELECT     (COUNT(CASE WHEN s.type = 'TPG' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM     RA r JOIN     student s ON r.student_id = s.student_id JOIN     prof p ON r.prof_id = p.prof_id WHERE     p.first_name = 'Ogdon' AND p.last_name = 'Zywicki';
SELECT     (COUNT(CASE WHEN r.grade = 'B' THEN r.student_id END) * 100.0 / COUNT(r.student_id)) AS percentage FROM     registration r JOIN     course c ON r.course_id = c.course_id WHERE     c.name = 'Computer Network';
SELECT COUNT(*) AS num_courses FROM course WHERE diff = 5;
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM prof WHERE graduate_from IN ('Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University');
SELECT name FROM course WHERE credit = (SELECT MAX(credit) FROM course) ORDER BY diff DESC LIMIT 1;
SELECT COUNT(*) FROM student WHERE type = 'UG' AND intelligence = (SELECT MAX(intelligence) FROM student WHERE type = 'UG');
SELECT COUNT(*) FROM prof WHERE gender = 'female' AND popularity = (SELECT MAX(popularity) FROM prof);
SELECT COUNT(*) FROM student WHERE type = 'RPG';
SELECT COUNT(DISTINCT r.student_id) FROM registration r JOIN course c ON r.course_id = c.course_id WHERE r.grade = 'A' AND c.name = 'Applied Deep Learning';
SELECT s.gpa FROM student s JOIN RA r ON s.student_id = r.student_id WHERE r.salary = 'free';
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id WHERE c.diff = 1 AND r.grade = 'A' GROUP BY c.name ORDER BY COUNT(r.student_id) DESC LIMIT 1;
SELECT COUNT(*) FROM registration WHERE student_id = (SELECT student_id FROM student ORDER BY gpa DESC LIMIT 1);
SELECT COUNT(DISTINCT RA.student_id) FROM RA JOIN prof ON RA.prof_id = prof.prof_id WHERE prof.first_name = 'Ogdon' AND prof.last_name = 'Zywicki';
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id WHERE r.sat = 5 ORDER BY r.sat DESC LIMIT 1;
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.intelligence = 1 AND r.sat = 1;
SELECT course.name, COUNT(registration.grade) AS A_count FROM registration JOIN course ON registration.course_id = course.course_id WHERE registration.grade = 'A' AND course.name IN ('Advanced Operating System', 'Intro to BlockChain') GROUP BY course.name ORDER BY A_count DESC LIMIT 1;
SELECT p.popularity FROM prof p JOIN RA r ON p.prof_id = r.prof_id WHERE r.capability = (SELECT MAX(capability) FROM RA) GROUP BY p.prof_id ORDER BY COUNT(r.student_id) DESC LIMIT 1;
SELECT AVG(student_count) AS average_students FROM (     SELECT COUNT(r.student_id) AS student_count     FROM registration r     JOIN course c ON r.course_id = c.course_id     WHERE c.diff = 4     GROUP BY r.course_id ) AS course_registrations;
SELECT COUNT(DISTINCT r.student_id) AS failed_students FROM registration r JOIN student s ON r.student_id = s.student_id WHERE s.gpa BETWEEN 3 AND 4 AND (r.grade IS NULL OR r.grade = '');
SELECT COUNT(DISTINCT r.student_id) FROM registration r JOIN student s ON r.student_id = s.student_id WHERE s.type = 'UG' GROUP BY r.student_id HAVING COUNT(CASE WHEN r.grade = 'A' THEN 1 END) = COUNT(r.course_id);
SELECT AVG(s.gpa) AS average_gpa, CONCAT(s.f_name, ' ', s.l_name) AS full_name FROM RA r JOIN student s ON r.student_id = s.student_id WHERE r.capability = 5 AND r.salary = 'high' GROUP BY s.student_id;
SELECT p.prof_id, r.student_id FROM prof p, RA r WHERE r.capability = (SELECT MIN(capability) FROM RA);
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM prof WHERE graduate_from = 'University of Boston';
SELECT r.course_id, r.student_id FROM registration r WHERE r.grade IS NULL OR r.grade = '';
SELECT     COUNT(CASE WHEN gender = 'Male' THEN 1 END) * 1.0 /     COUNT(CASE WHEN gender = 'Female' THEN 1 END) AS male_female_ratio FROM     prof;
SELECT name, credit FROM course WHERE diff = (SELECT MIN(diff) FROM course);
SELECT CONCAT(s.f_name, ' ', s.l_name) AS full_name, s.gpa FROM student s JOIN RA r ON s.student_id = r.student_id JOIN prof p ON r.prof_id = p.prof_id WHERE p.popularity = (SELECT MAX(popularity) FROM prof);
SELECT CONCAT(s.f_name, ' ', s.l_name) AS full_name, s.email FROM RA r JOIN student s ON r.student_id = s.student_id WHERE r.salary = 'free';
SELECT CONCAT(s.f_name, ' ', s.l_name) AS full_name, ra.capability, s.gpa FROM RA ra JOIN student s ON ra.student_id = s.student_id JOIN prof p ON ra.prof_id = p.prof_id WHERE CONCAT(p.first_name, ' ', p.last_name) = 'Merwyn Conkay';
SELECT CONCAT(s.f_name, ' ', s.l_name) AS full_name, r.grade FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Intro to BlockChain';
SELECT CONCAT(s.f_name, ' ', s.l_name) AS full_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.diff = (SELECT MAX(diff) FROM course) AND r.grade = 'A';
SELECT CONCAT(p.first_name, ' ', p.last_name) AS full_name, p.graduate_from FROM prof p JOIN RA r ON p.prof_id = r.prof_id JOIN student s ON r.student_id = s.student_id WHERE s.f_name = 'Olia' AND s.l_name = 'Rabier';
SELECT s.f_name, s.l_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Advanced Database Systems' AND r.sat = (     SELECT MAX(sat)     FROM registration     JOIN course ON registration.course_id = course.course_id     WHERE course.name = 'Advanced Database Systems' );
SELECT     DIVIDE(SUM(c.credit *         CASE             WHEN r.grade = 'A' THEN 4             WHEN r.grade = 'B' THEN 3             WHEN r.grade = 'C' THEN 2             WHEN r.grade = 'D' THEN 1             ELSE 0         END),     SUM(c.credit)) AS semester_gpa FROM     registration r JOIN     student s ON r.student_id = s.student_id JOIN     course c ON r.course_id = c.course_id WHERE     s.f_name = 'Antonio' AND s.l_name = 'Laughton';
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.type = 'UG' AND s.gpa > 3.7;
SELECT s.f_name, s.l_name, r.capability FROM student s JOIN RA r ON s.student_id = r.student_id JOIN prof p ON r.prof_id = p.prof_id WHERE p.graduate_from = 'University of Washington';
SELECT s.f_name || ' ' || s.l_name AS full_name, s.email, s.intelligence FROM student s JOIN RA r ON s.student_id = r.student_id WHERE r.capability = (SELECT MAX(capability) FROM RA)   AND r.salary = 'high';
SELECT c.name, c.credit FROM course c JOIN registration r ON c.course_id = r.course_id JOIN RA ra ON r.student_id = ra.student_id JOIN prof p ON ra.prof_id = p.prof_id WHERE p.gender = 'Female' AND p.teachingability = (SELECT MAX(teachingability) FROM prof WHERE gender = 'Female');
SELECT COUNT(*) FROM prof WHERE gender = 'Female';
SELECT name FROM course WHERE diff = (SELECT MAX(diff) FROM course);
SELECT COUNT(*) FROM student WHERE gpa BETWEEN 3.1 AND 3.7 AND type = 'UG';
SELECT credit FROM course WHERE name = 'Computer Vision';
SELECT s.student_id FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE s.gpa = 2.5 AND c.name = 'C for Programmers';
SELECT s.l_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Intro to Database 2' ORDER BY r.sat DESC LIMIT 1;
SELECT COUNT(*) FROM student WHERE student_id IN (SELECT student_id FROM RA WHERE salary = 'high') AND gpa > 3;
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.type = 'UG' AND r.sat = (SELECT MAX(sat) FROM registration r2 JOIN student s2 ON r2.student_id = s2.student_id WHERE s2.type = 'UG');
SELECT RA.capability FROM RA JOIN student ON RA.student_id = student.student_id WHERE student.type = 'RPG' AND student.intelligence >= 4;
SELECT COUNT(*) FROM student s JOIN registration r ON s.student_id = r.student_id WHERE r.grade = 'B' AND s.intelligence = 3;
SELECT c.diff FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.intelligence = 5 AND r.grade = 'A';
SELECT COUNT(DISTINCT r.student_id) AS student_count FROM prof p JOIN RA r ON p.prof_id = r.prof_id WHERE p.popularity = (SELECT MAX(popularity) FROM prof) AND r.capability = 5;
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id WHERE r.grade = 'D';
SELECT RA.capability FROM student JOIN RA ON student.student_id = RA.student_id WHERE student.f_name = 'Alvera' AND student.l_name = 'McQuillin';
SELECT COUNT(DISTINCT r.student_id) AS student_count FROM registration r JOIN course c ON r.course_id = c.course_id JOIN student s ON r.student_id = s.student_id WHERE c.credit = 3 AND s.gpa = 3.2;
SELECT COUNT(*) FROM RA JOIN student ON RA.student_id = student.student_id WHERE RA.salary = 'low' AND student.gpa = 3.5;
SELECT s.email FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE r.grade = 'B' AND c.diff > (SELECT AVG(diff) * 0.8 FROM course);
SELECT     (COUNT(CASE WHEN r.salary = 'low' THEN 1 END) * 100.0 / COUNT(r.salary)) AS percentage FROM     prof p JOIN     RA r ON p.prof_id = r.prof_id WHERE     p.teachingability <= 3;
SELECT MAX(credit) AS most_important_course, MAX(diff) AS most_difficult_course FROM course;
SELECT AVG(teachingability) AS average_teaching_ability FROM prof WHERE popularity = (SELECT MAX(popularity) FROM prof);
SELECT DIVIDE(SUM(r.sat), COUNT(r.course_id)) AS average_satisfaction FROM registration r JOIN student s ON r.student_id = s.student_id WHERE s.grade = 'B';
SELECT CONCAT(f_name, ' ', l_name) AS full_name, phone_number FROM student WHERE intelligence < 4 AND gpa > 3;
SELECT s.f_name, s.l_name FROM student s JOIN RA r ON s.student_id = r.student_id WHERE r.capability > (SELECT AVG(capability) FROM RA);
SELECT CONCAT(s.f_name, ' ', s.l_name) AS full_name, c.name AS course_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE s.intelligence = 5 AND s.gpa < 3;
SELECT AVG(RA.capability) AS average_capability FROM RA JOIN student ON RA.student_id = student.student_id WHERE student.gpa < 2.5;
SELECT CONCAT(p.first_name, ' ', p.last_name) AS full_name FROM prof p JOIN RA r ON p.prof_id = r.prof_id JOIN student s ON r.student_id = s.student_id WHERE s.intelligence = 1;
SELECT     (SELECT AVG(s.gpa)      FROM student s      JOIN registration r ON s.student_id = r.student_id      JOIN course c ON r.course_id = c.course_id      WHERE c.diff = (SELECT MAX(diff) FROM course)) -     (SELECT AVG(s.gpa)      FROM student s      JOIN registration r ON s.student_id = r.student_id      JOIN course c ON r.course_id = c.course_id      WHERE c.diff = (SELECT MIN(diff) FROM course)) AS gpa_difference;
SELECT CONCAT(s.f_name, ' ', s.l_name) AS full_name, r.capability FROM student s JOIN registration reg ON s.student_id = reg.student_id JOIN RA r ON s.student_id = r.student_id WHERE reg.grade IS NULL;
SELECT COUNT(DISTINCT r.student_id) FROM RA r JOIN registration reg ON r.student_id = reg.student_id JOIN course c ON reg.course_id = c.course_id WHERE r.salary = 'High' AND c.name = 'computer vision';
SELECT CONCAT(p.first_name, ' ', p.last_name) AS full_name, p.popularity FROM prof p JOIN RA r ON p.prof_id = r.prof_id GROUP BY p.prof_id ORDER BY COUNT(r.student_id) DESC LIMIT 1;
SELECT c.name, CONCAT(s.f_name, ' ', s.l_name) AS full_name FROM registration r JOIN course c ON r.course_id = c.course_id JOIN student s ON r.student_id = s.student_id WHERE r.grade = 'A' GROUP BY c.course_id, c.name HAVING COUNT(s.student_id) = (     SELECT MAX(A_count)     FROM (         SELECT COUNT(student_id) AS A_count         FROM registration         WHERE grade = 'A'         GROUP BY course_id     ) AS subquery );
SELECT     (SELECT AVG(sat) FROM registration r JOIN RA ra ON r.student_id = ra.student_id WHERE ra.salary = 'high') -     (SELECT AVG(sat) FROM registration r JOIN RA ra ON r.student_id = ra.student_id WHERE ra.salary = 'free') AS average_satisfaction_difference;
SELECT graduate_from FROM prof WHERE prof_id = (     SELECT prof_id     FROM RA     JOIN student ON RA.student_id = student.student_id     WHERE student.type = 'UG'     GROUP BY prof_id     ORDER BY COUNT(student.student_id) DESC     LIMIT 1 );
SELECT CONCAT(p.first_name, ' ', p.last_name) AS full_name, p.email FROM prof p JOIN RA r ON p.prof_id = r.prof_id WHERE p.teachingability > (SELECT AVG(teachingability) FROM prof) GROUP BY p.prof_id HAVING COUNT(r.student_id) >= 2;
SELECT (COUNT(CASE WHEN sat = (SELECT MAX(sat) FROM registration WHERE course_id = (SELECT course_id FROM course WHERE name = 'Intro to Database 2')) THEN student_id END) * 100.0) / COUNT(student_id) AS percentage FROM registration;
SELECT f_name, l_name FROM student WHERE gpa = (SELECT MAX(gpa) FROM student);
SELECT COUNT(DISTINCT r.student_id) AS high_salary_students FROM prof p JOIN RA r ON p.prof_id = r.prof_id WHERE p.teachingability = (SELECT MAX(teachingability) FROM prof) AND r.salary = 'high';
SELECT MIN(salary) AS min_salary, MAX(salary) AS max_salary FROM RA WHERE student_id = (SELECT student_id FROM student WHERE email = 'grosellg@hku.hk');
SELECT COUNT(*) FROM registration r JOIN course c ON r.course_id = c.course_id JOIN student s ON r.student_id = s.student_id WHERE c.name = 'Statistical Learning' AND r.sat = 4 AND s.gpa = 3.8;
SELECT COUNT(DISTINCT r.student_id) FROM registration r JOIN course c ON r.course_id = c.course_id JOIN student s ON r.student_id = s.student_id WHERE c.diff = 3 AND s.intelligence = 2;
SELECT s.f_name, s.l_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE r.grade = 'C' AND c.name = 'Applied Deep Learning';
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.type = 'RPG' AND r.sat = 1;
SELECT     (SELECT COUNT(*) FROM student s JOIN RA r ON s.student_id = r.student_id WHERE r.capability < 3 AND s.type = 'UG') -     (SELECT COUNT(*) FROM student s JOIN RA r ON s.student_id = r.student_id WHERE r.capability < 3 AND s.type = 'RPG') AS difference
SELECT advisedBy.p_id_dummy, AVG(student_count) AS average_students FROM (     SELECT p_id_dummy, COUNT(p_id) AS student_count     FROM advisedBy     GROUP BY p_id_dummy ) AS advisor_counts GROUP BY p_id_dummy;
SELECT COUNT(DISTINCT p_id) AS professor_count FROM taughtBy WHERE course_id = 18;
SELECT course_id FROM course WHERE courseLevel = 'Level_500';
SELECT COUNT(course_id) FROM course WHERE courseLevel IN ('Level_100', 'Level_200');
SELECT p.p_id, t.course_id FROM person p JOIN taughtBy t ON p.p_id = t.p_id WHERE p.professor = 1 AND p.hasPosition = 0;
SELECT DISTINCT taughtBy.p_id FROM taughtBy JOIN course ON taughtBy.course_id = course.course_id WHERE course.courseLevel = 'Level_400';
SELECT DISTINCT c.course_id FROM course c JOIN taughtBy t ON c.course_id = t.course_id JOIN advisedBy a ON t.p_id = a.p_id_dummy WHERE a.p_id = 376;
SELECT a.p_id_dummy FROM person p JOIN advisedBy a ON p.p_id = a.p_id WHERE p.yearsInProgram = 'Year_3';
SELECT c.courseLevel FROM course c JOIN taughtBy t ON c.course_id = t.course_id WHERE t.p_id = 297;
SELECT c.courseLevel, t.p_id FROM course c JOIN taughtBy t ON c.course_id = t.course_id WHERE c.course_id = 165;
SELECT p.p_id, p.yearsInProgram FROM person p JOIN advisedBy a ON p.p_id = a.p_id WHERE a.p_id_dummy = 5 AND p.student = 1;
SELECT c.course_id, c.courseLevel FROM course c JOIN taughtBy t ON c.course_id = t.course_id JOIN person p ON t.p_id = p.p_id WHERE p.professor = 1 AND p.hasPosition = 'Faculty_eme';
SELECT c.courseLevel FROM advisedBy ab JOIN person p ON ab.p_id_dummy = p.p_id JOIN taughtBy tb ON p.p_id = tb.p_id JOIN course c ON tb.course_id = c.course_id WHERE ab.p_id = 80;
SELECT DISTINCT t1.p_id FROM taughtBy t1 JOIN course c1 ON t1.course_id = c1.course_id AND c1.courseLevel = 'Level_400' JOIN taughtBy t2 ON t1.p_id = t2.p_id JOIN course c2 ON t2.course_id = c2.course_id AND c2.courseLevel = 'Level_500';
SELECT DISTINCT p_id_dummy FROM advisedBy JOIN person ON advisedBy.p_id = person.p_id WHERE person.yearsInProgram = 'Year_12';
SELECT t.course_id, c.courseLevel FROM taughtBy t JOIN course c ON t.course_id = c.course_id GROUP BY t.course_id, c.courseLevel HAVING COUNT(t.p_id) = (     SELECT MAX(professor_count)     FROM (         SELECT COUNT(p_id) AS professor_count         FROM taughtBy         GROUP BY course_id     ) AS counts );
SELECT COUNT(course_id) AS total_courses FROM course WHERE courseLevel IN ('Level_300');
SELECT COUNT(*) FROM taughtBy WHERE course_id = 11;
SELECT     course_id,     COUNT(p_id) AS teacher_count FROM     taughtBy WHERE     course_id IN (16, 18) GROUP BY     course_id ORDER BY     teacher_count DESC LIMIT 1;
SELECT COUNT(*) FROM person WHERE professor = 1 AND hasPosition = 'Faculty_eme';
SELECT a.p_id_dummy FROM advisedBy a GROUP BY a.p_id_dummy HAVING COUNT(a.p_id) > 4;
SELECT COUNT(*) FROM course c JOIN taughtBy t ON c.course_id = t.course_id JOIN person p ON t.p_id = p.p_id WHERE c.courseLevel IN ('Level_100', 'Level_200') AND p.professor = 1;
SELECT DISTINCT p.p_id FROM person p JOIN taughtBy t ON p.p_id = t.p_id JOIN course c ON t.course_id = c.course_id WHERE p.hasPosition = 'Faculty_eme' AND c.courseLevel = 'Level_300';
SELECT COUNT(*) > 0 AS is_faculty_member FROM taughtBy t JOIN person p ON t.p_id = p.p_id WHERE t.course_id = 9 AND p.hasPosition != 0;
SELECT c.courseLevel FROM course c JOIN taughtBy t ON c.course_id = t.course_id WHERE t.p_id = 79;
SELECT a.p_id_dummy FROM person p JOIN advisedBy a ON p.p_id = a.p_id WHERE p.yearsInProgram = 'Year_5';
SELECT COUNT(DISTINCT ab.p_id) AS student_count FROM advisedBy ab JOIN taughtBy tb ON ab.p_id_dummy = tb.p_id JOIN course c ON tb.course_id = c.course_id WHERE c.courseLevel IN ('Level_100', 'Level_200', 'Level_300') AND tb.p_id = 1;
SELECT COUNT(DISTINCT c.course_id) FROM course c JOIN taughtBy t ON c.course_id = t.course_id JOIN person p ON t.p_id = p.p_id WHERE c.courseLevel IN ('Level_100', 'Level_200') AND p.hasPosition != 0;
SELECT taughtBy.course_id FROM advisedBy JOIN person ON advisedBy.p_id_dummy = person.p_id JOIN taughtBy ON person.p_id = taughtBy.p_id WHERE advisedBy.p_id = 6;
SELECT c.courseLevel FROM course c JOIN taughtBy t ON c.course_id = t.course_id GROUP BY c.course_id, c.courseLevel ORDER BY COUNT(t.p_id) DESC LIMIT 1;
SELECT p_id FROM taughtBy GROUP BY p_id HAVING COUNT(course_id) > 3;
SELECT p_id, COUNT(course_id) AS course_count FROM taughtBy GROUP BY p_id ORDER BY course_count DESC LIMIT 3;
SELECT COUNT(DISTINCT a.p_id_dummy) AS total_professors FROM person p JOIN advisedBy a ON p.p_id = a.p_id WHERE p.yearsInProgram = 'Year_3';
SELECT AVG(course_count) AS average_courses_taught FROM (     SELECT COUNT(taughtBy.course_id) AS course_count     FROM person     JOIN taughtBy ON person.p_id = taughtBy.p_id     WHERE person.professor = 1     GROUP BY taughtBy.p_id ) AS professor_courses;
SELECT     COUNT(CASE WHEN professor = 1 THEN p_id END) * 1.0 /     NULLIF(COUNT(CASE WHEN student = 1 THEN p_id END), 0) AS ratio FROM     person;
SELECT     (COUNT(CASE WHEN courseLevel = 'Level_400' THEN course_id END) * 100.0 / COUNT(course_id)) AS percentage_high_level_undergraduate FROM     course;
SELECT p_id FROM taughtBy WHERE course_id = 18;
SELECT p.hasPosition, a.p_id_dummy FROM advisedBy a JOIN person p ON a.p_id = 303 AND a.p_id_dummy = p.p_id;
SELECT p.p_id, c.courseLevel FROM person p JOIN taughtBy t ON p.p_id = t.p_id JOIN course c ON t.course_id = c.course_id WHERE p.professor = 1 AND p.hasPosition = 'Faculty_aff';
SELECT p.yearsInProgram, p.inPhase FROM person p JOIN advisedBy a ON p.p_id = a.p_id WHERE a.p_id_dummy = (     SELECT a1.p_id_dummy     FROM advisedBy a1     GROUP BY a1.p_id_dummy     ORDER BY COUNT(a1.p_id) DESC     LIMIT 1 );
SELECT p.p_id AS advised_student_id, a.p_id_dummy AS employing_professor_id FROM person p JOIN advisedBy a ON p.p_id = a.p_id WHERE p.hasPosition = 'Faculty_eme';
SELECT t.course_id, c.courseLevel FROM taughtBy t JOIN course c ON t.course_id = c.course_id WHERE t.p_id BETWEEN 40 AND 50;
SELECT c.courseLevel, tb.p_id FROM course c JOIN taughtBy tb ON c.course_id = tb.course_id WHERE c.course_id = 147;
SELECT p.p_id, c.courseLevel FROM person p JOIN taughtBy t ON p.p_id = t.p_id JOIN course c ON t.course_id = c.course_id WHERE c.course_id = 104 AND p.professor = 1 AND p.hasPosition != 0;
SELECT p.p_id, p.hasPosition FROM person p JOIN taughtBy t ON p.p_id = t.p_id JOIN course c ON t.course_id = c.course_id WHERE p.professor = 1 AND c.courseLevel = 'Level_400' AND c.course_id < 10;
SELECT DISTINCT taughtBy.p_id FROM taughtBy JOIN course ON taughtBy.course_id = course.course_id WHERE course.course_id BETWEEN 121 AND 130 AND course.courseLevel = 'Level_300';
SELECT DISTINCT a.p_id_dummy FROM advisedBy a JOIN person p ON a.p_id = p.p_id_dummy WHERE p.yearsInProgram = 'Year_8' AND p.professor = 1 AND p.hasPosition = 1;
SELECT DISTINCT taughtBy.course_id, taughtBy.p_id FROM taughtBy JOIN course ON taughtBy.course_id = course.course_id WHERE course.courseLevel = 'Level_500' LIMIT 5;
SELECT COUNT(*) FROM advisedBy WHERE p_id_dummy = 415;
SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_500';
SELECT COUNT(*) FROM person WHERE hasPosition = 0 AND inPhase = 0;
SELECT p_id, COUNT(course_id) AS course_count FROM taughtBy GROUP BY p_id ORDER BY course_count ASC LIMIT 1;
SELECT COUNT(*) FROM person WHERE p_id IN (SELECT p_id FROM advisedBy WHERE p_id_dummy = 5) AND yearsInProgram = 'Year_5';
SELECT taughtBy.p_id FROM taughtBy JOIN course ON taughtBy.course_id = course.course_id WHERE course.courseLevel = 'Level_500' GROUP BY taughtBy.p_id ORDER BY COUNT(taughtBy.course_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT p.p_id) AS professor_count FROM person p JOIN taughtBy t ON p.p_id = t.p_id JOIN course c ON t.course_id = c.course_id WHERE p.professor = 1   AND p.hasPosition = 'Faculty_aff'   AND c.courseLevel = 'Level_500';
SELECT t.p_id, COUNT(c.course_id) AS course_count FROM taughtBy t JOIN course c ON t.course_id = c.course_id WHERE c.courseLevel = 'Level_500' GROUP BY t.p_id ORDER BY course_count DESC LIMIT 5;
SELECT COUNT(DISTINCT a.p_id_dummy) FROM advisedBy a JOIN person p ON a.p_id = p.p_id WHERE p.student = 1 AND p.yearsInProgram = 'Year_1';
SELECT COUNT(DISTINCT tb.p_id) FROM taughtBy tb JOIN course c ON tb.course_id = c.course_id WHERE c.courseLevel = 'Level_400' GROUP BY tb.p_id HAVING COUNT(tb.course_id) <= 2;
SELECT DISTINCT p.p_id FROM person p JOIN taughtBy t ON p.p_id = t.p_id JOIN course c ON t.course_id = c.course_id WHERE p.hasPosition = 'Faculty_eme' AND p.professor = 1 AND c.courseLevel = 'Level_400';
SELECT p.hasPosition FROM person p JOIN taughtBy t ON p.p_id = t.p_id WHERE p.professor = 1 GROUP BY p.p_id, p.hasPosition ORDER BY COUNT(t.course_id) DESC LIMIT 1;
SELECT p.yearsInProgram FROM person p JOIN advisedBy a ON p.p_id = a.p_id WHERE p.student = 1 GROUP BY p.yearsInProgram HAVING COUNT(a.p_id_dummy) > 2;
SELECT COUNT(DISTINCT t.p_id) FROM taughtBy t JOIN course c ON t.course_id = c.course_id WHERE c.courseLevel IN ('Level_100', 'Level_200');
SELECT yearsInProgram FROM person AS s JOIN advisedBy AS a ON s.p_id = a.p_id_dummy WHERE s.student = 1 GROUP BY yearsInProgram ORDER BY COUNT(yearsInProgram) DESC LIMIT 1;
SELECT COUNT(*) FROM person p JOIN advisedBy a ON p.p_id = a.p_id WHERE p.student = 1 AND p.inPhase = 'Pre-Quals';
SELECT AVG(course_count) AS average_courses FROM (     SELECT taughtBy.p_id, COUNT(taughtBy.course_id) AS course_count     FROM taughtBy     JOIN course ON taughtBy.course_id = course.course_id     WHERE course.courseLevel = 'Level_500'     GROUP BY taughtBy.p_id ) AS professor_courses;
SELECT COUNT(course_id) FROM taughtBy GROUP BY course_id HAVING COUNT(p_id) > 4;
SELECT course_id FROM course WHERE courseLevel = 'Level_500';
SELECT COUNT(*) AS sum_of_year_1_and_year_2_students FROM person WHERE (yearsInProgram = 'Year_1' OR yearsInProgram = 'Year_2') AND student = 1;
SELECT COUNT(DISTINCT t.course_id) AS course_count FROM taughtBy t JOIN person p ON t.p_id = p.p_id WHERE p.professor = 1 AND p.hasPosition <> 0;
SELECT p.hasPosition FROM person p JOIN taughtBy t ON p.p_id = t.p_id GROUP BY p.p_id ORDER BY COUNT(t.course_id) DESC LIMIT 1;
SELECT DISTINCT c.course_id FROM course c JOIN taughtBy t ON c.course_id = t.course_id JOIN person p ON t.p_id = p.p_id WHERE p.professor = 1 AND p.hasPosition = 0;
SELECT p.professor, c.courseLevel FROM person p JOIN taughtBy t ON p.p_id = t.p_id JOIN course c ON t.course_id = c.course_id WHERE p.hasPosition <> 0 GROUP BY p.professor, c.courseLevel HAVING COUNT(t.course_id) = (     SELECT MAX(course_count)     FROM (         SELECT COUNT(t2.course_id) AS course_count         FROM person p2         JOIN taughtBy t2 ON p2.p_id = t2.p_id         WHERE p2.hasPosition <> 0         GROUP BY p2.p_id     ) AS counts );
SELECT device_id FROM gender_age WHERE age = (SELECT MAX(age) FROM gender_age);
SELECT COUNT(*) FROM events WHERE longitude = 97 AND latitude = 40;
SELECT COUNT(*) FROM gender_age WHERE gender = 'M' AND group = 'M32-38';
SELECT COUNT(*) FROM gender_age WHERE gender = 'F' AND age > 50;
SELECT COUNT(*) AS active_users FROM app_events WHERE event_id = 2 AND is_active = 1;
SELECT gender FROM gender_age WHERE age = (SELECT MIN(age) FROM gender_age);
SELECT lc.category FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id GROUP BY lc.category ORDER BY COUNT(al.app_id) DESC LIMIT 1;
SELECT pd.device_model FROM gender_age_train gat JOIN phone_brand_device_model2 pd ON gat.device_id = pd.device_id WHERE gat.age = (SELECT MAX(age) FROM gender_age_train);
SELECT COUNT(DISTINCT g.device_id) AS user_count FROM gender_age g JOIN app_labels al ON g.device_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'Home Decoration';
SELECT COUNT(DISTINCT g.device_id) AS male_active_users FROM gender_age g JOIN events e ON g.device_id = e.device_id WHERE g.gender = 'M' AND e.is_active = 1 AND e.timestamp LIKE '2016-05-01%';
SELECT COUNT(DISTINCT g.device_id) AS female_users FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.gender = 'F' AND p.device_model = 'ZenFone 5';
SELECT MAX(ga.age) AS oldest_age FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE e.timestamp LIKE '2016-05-06%'   AND e.longitude = 121   AND e.latitude = 31   AND EXISTS (       SELECT 1       FROM app_events ae       WHERE ae.event_id = e.event_id         AND ae.is_active = 1   );
SELECT device_model, COUNT(device_id) AS device_count FROM gender_age_train JOIN phone_brand_device_model2 ON gender_age_train.device_id = phone_brand_device_model2.device_id WHERE gender = 'F' AND group = 'F27-28' GROUP BY device_model ORDER BY device_count DESC LIMIT 1;
SELECT lc.category FROM events e JOIN label_categories lc ON e.event_id = lc.label_id WHERE e.timestamp IN (     SELECT MIN(timestamp)     FROM events     GROUP BY event_id     ORDER BY MIN(timestamp)     LIMIT 2 );
SELECT gender, COUNT(*) as count FROM gender_age WHERE device_id IN (     SELECT device_id     FROM phone_brand_device_model2     WHERE phone_brand = 'vivo' ) GROUP BY gender ORDER BY count DESC LIMIT 1;
SELECT lc.category, COUNT(DISTINCT al.app_id) AS user_count FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id GROUP BY lc.category ORDER BY user_count DESC LIMIT 1;
SELECT COUNT(DISTINCT g.device_id) AS user_count FROM gender_age g JOIN app_labels al ON g.device_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'MOBA';
SELECT     (COUNT(CASE WHEN g.gender = 'F' AND p.phone_brand = 'OPPO' THEN 1 END) * 100.0 / NULLIF(COUNT(CASE WHEN p.phone_brand = 'OPPO' THEN 1 END), 0)) AS female_percentage,     (COUNT(CASE WHEN g.gender = 'M' AND p.phone_brand = 'OPPO' THEN 1 END) * 100.0 / NULLIF(COUNT(CASE WHEN p.phone_brand = 'OPPO' THEN 1 END), 0)) AS male_percentage FROM     gender_age g JOIN     phone_brand_device_model2 p ON g.device_id = p.device_id;
SELECT longitude, latitude FROM events WHERE timestamp LIKE '2016-05-08%';
SELECT app_id, is_installed FROM app_events WHERE event_id = 844;
SELECT COUNT(*) AS event_count FROM events WHERE timestamp LIKE '2016-04-30%';
SELECT COUNT(DISTINCT g.device_id) AS user_count FROM phone_brand_device_model2 AS p JOIN gender_age AS g ON p.device_id = g.device_id WHERE p.phone_brand = 'vivo' AND p.device_model = 'Xplay3S';
SELECT     DIVIDE(COUNT(CASE WHEN gender = 'M' AND `group` = 'M27-28' THEN device_id END),            COUNT(CASE WHEN gender = 'F' AND `group` = 'F27-28' THEN device_id END)) AS male_female_ratio FROM     gender_age_train;
SELECT label_id FROM label_categories WHERE category IN ('online shopping', 'online malls');
SELECT DISTINCT pbdm.phone_brand, pbdm.device_model FROM events e JOIN phone_brand_device_model2 pbdm ON e.device_id = pbdm.device_id WHERE e.timestamp LIKE '2016-05-05%' AND e.longitude = 112 AND e.latitude = 44;
SELECT a.app_id, e.timestamp FROM app_events e JOIN app_all a ON e.app_id = a.app_id WHERE e.event_id = 82;
SELECT g.gender, g.age FROM events e JOIN gender_age g ON e.device_id = g.device_id WHERE e.event_id = 15251;
SELECT COUNT(e.event_id) AS event_count FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE ga.age = 88 AND ga.gender = 'M' AND e.timestamp LIKE '2016-05-04%';
SELECT     ga.age,     ga.gender,     COUNT(e.event_id) AS event_count FROM     events e JOIN     gender_age ga ON e.device_id = ga.device_id WHERE     e.longitude = -102 AND e.latitude = 38 GROUP BY     ga.age, ga.gender;
SELECT DISTINCT p.phone_brand, p.device_model FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE e.longitude = 80 AND e.latitude = 44;
SELECT DISTINCT lc.category FROM events e JOIN app_events ae ON e.event_id = ae.event_id JOIN app_labels al ON ae.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE e.event_id = 155;
SELECT g.device_id FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE p.phone_brand = 'HTC' AND p.device_model = 'Butterfly' AND g.gender = 'F' LIMIT 5;
SELECT COUNT(DISTINCT al.app_id) AS science_fiction_app_count FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'science fiction';
SELECT g.gender, g.age FROM phone_brand_device_model2 p JOIN gender_age g ON p.device_id = g.device_id WHERE p.phone_brand = 'LG' AND p.device_model = 'L70';
SELECT     (COUNT(app_id) * 100.0 / (SELECT COUNT(app_id) FROM app_all)) AS percentage FROM     app_labels JOIN     label_categories ON app_labels.label_id = label_categories.label_id WHERE     label_categories.category = 'Industry tag';
SELECT     (COUNT(CASE WHEN device_model = 'Nexus 5' THEN device_id END) * 100.0 / COUNT(device_id)) AS percentage_nexus_5,     (COUNT(CASE WHEN device_model = 'Nexus 5' AND gender = 'M' THEN device_id END) * 1.0 / NULLIF(COUNT(CASE WHEN device_model = 'Nexus 5' AND gender = 'F' THEN device_id END), 0)) AS male_female_ratio FROM     phone_brand_device_model2 p JOIN     gender_age g ON p.device_id = g.device_id WHERE     p.phone_brand = 'LG';
SELECT COUNT(DISTINCT e.device_id) AS inactive_users FROM events e JOIN app_events ae ON e.event_id = ae.event_id WHERE ae.is_active = 0 AND e.event_id = 2;
SELECT COUNT(*) AS total_events FROM events WHERE timestamp LIKE '2016%';
SELECT COUNT(*) FROM events WHERE device_id = 29182687948017100 AND timestamp LIKE '2016%';
SELECT COUNT(DISTINCT device_id) AS male_device_users FROM gender_age WHERE gender = 'M';
SELECT MAX(age) AS oldest_user_age FROM gender_age_train;
SELECT COUNT(*) FROM gender_age WHERE gender = 'F' AND age < 30;
SELECT COUNT(DISTINCT g.device_id) AS female_users FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE p.device_model = 'Galaxy Note 2' AND g.gender = 'F';
SELECT g.age FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE p.device_model = 'Galaxy Note 2';
SELECT pd.device_model FROM gender_age_train g JOIN phone_brand_device_model2 pd ON g.device_id = pd.device_id WHERE g.age = (SELECT MAX(age) FROM gender_age_train);
SELECT group, COUNT(*) AS user_count FROM gender_age WHERE device_id IN (     SELECT device_id     FROM phone_brand_device_model2     WHERE phone_brand = 'vivo' ) GROUP BY group ORDER BY user_count DESC LIMIT 1;
SELECT COUNT(DISTINCT a.app_id) AS user_count FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id JOIN app_all a ON al.app_id = a.app_id WHERE lc.category = 'Securities';
SELECT lc.category FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE al.app_id = 1977658975649780000;
SELECT lc.category FROM app_events ae JOIN app_labels al ON ae.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE ae.event_id = 2 AND ae.is_active = 0;
SELECT e.longitude, e.latitude FROM app_events ae JOIN events e ON ae.event_id = e.event_id WHERE ae.is_active = 0 AND ae.event_id = 2;
SELECT MIN(e.timestamp) AS earliest_time FROM events e JOIN app_events ae ON e.event_id = ae.event_id WHERE e.event_id = 2 AND ae.is_active = 0;
SELECT e.event_id FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE p.phone_brand = 'vivo';
SELECT COUNT(DISTINCT e.device_id) AS vivo_device_count FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE e.event_id = 2 AND p.phone_brand = 'vivo';
SELECT e.timestamp FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE e.event_id = '2' AND p.phone_brand = 'vivo';
SELECT COUNT(*) AS total_events FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE p.phone_brand = 'vivo' AND YEAR(e.timestamp) = 2016;
SELECT COUNT(DISTINCT g.device_id) AS female_under_30_count FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE p.phone_brand = 'vivo' AND g.gender = 'F' AND g.age < 30;
SELECT lc.category, COUNT(al.app_id) AS user_count FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id GROUP BY lc.category ORDER BY user_count DESC LIMIT 1;
SELECT pb.phone_brand FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE ga.gender = 'F' ORDER BY ga.age ASC LIMIT 1;
SELECT COUNT(DISTINCT g.device_id) AS user_count FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.group = 'M23-26' AND p.phone_brand = 'vivo';
SELECT     (COUNT(CASE WHEN g.group = 'M23-26' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM     gender_age g JOIN     phone_brand_device_model2 p ON g.device_id = p.device_id WHERE     p.phone_brand = 'vivo';
SELECT     (SUM(IF(pb.phone_brand = 'vivo', 1, 0)) / COUNT(e.device_id)) * 100 AS vivo_percentage FROM     events e JOIN     phone_brand_device_model2 pb ON e.device_id = pb.device_id WHERE     e.event_id = 2;
SELECT AVG(gender_age.age) AS average_age FROM gender_age JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE phone_brand_device_model2.phone_brand = 'vivo';
SELECT COUNT(*) FROM gender_age WHERE gender = 'F' AND group = 'F27-28';
SELECT MAX(age) AS oldest_male_age FROM gender_age_train WHERE gender = 'M';
SELECT COUNT(DISTINCT app_events.device_id) AS inactive_users FROM app_events WHERE is_installed = 1 AND is_active = 0;
SELECT MIN(age) AS youngest_female_age FROM gender_age WHERE gender = 'F';
SELECT COUNT(DISTINCT device_model) AS model_count FROM phone_brand_device_model2 WHERE phone_brand = 'VIVO';
SELECT DISTINCT device_model FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO' LIMIT 15;
SELECT DISTINCT p.device_model FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.gender = 'M' AND g.group = 'M39+' LIMIT 10;
SELECT DISTINCT p.device_model FROM app_events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE e.is_installed = 1 AND e.is_active = 1 LIMIT 5;
SELECT COUNT(DISTINCT g.device_id) AS user_count FROM gender_age g JOIN app_labels al ON g.device_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'Financial Information';
SELECT COUNT(DISTINCT g.device_id) AS user_count FROM gender_age g JOIN app_labels al ON g.device_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'game-Art Style';
SELECT COUNT(DISTINCT g.device_id) AS total_male_users FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.gender = 'Male' AND p.phone_brand = 'OPPO';
SELECT pb.phone_brand FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE ga.age = (SELECT MIN(age) FROM gender_age);
SELECT lc.category, COUNT(gl.device_id) AS user_count FROM label_categories lc JOIN app_labels al ON lc.label_id = al.label_id JOIN gender_age ga ON al.app_id = ga.device_id GROUP BY lc.category ORDER BY user_count ASC LIMIT 3;
SELECT COUNT(DISTINCT g.device_id) AS male_users FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.gender = 'M' AND p.device_model = 'Galaxy Ace Plus';
SELECT group, COUNT(*) AS user_count FROM phone_brand_device_model2 p JOIN gender_age g ON p.device_id = g.device_id WHERE p.phone_brand = 'OPPO' GROUP BY group ORDER BY user_count DESC LIMIT 1;
SELECT device_model, COUNT(device_model) AS model_count FROM gender_age ga JOIN phone_brand_device_model2 pd ON ga.device_id = pd.device_id WHERE ga.gender = 'F' GROUP BY device_model ORDER BY model_count DESC LIMIT 5;
SELECT     (SUM(IF(lc.category = '80s Japanese comic', 1, 0)) / COUNT(DISTINCT al.app_id)) * 100 AS '80s',     (SUM(IF(lc.category = '90s Japanese comic', 1, 0)) / COUNT(DISTINCT al.app_id)) * 100 AS '90s',     (SUM(IF(lc.category = '80s Japanese comic', 1, 0)) / NULLIF(SUM(IF(lc.category = '90s Japanese comic', 1, 0)), 0)) * 100 AS 'ratio_percentage' FROM     app_labels al JOIN     label_categories lc ON al.label_id = lc.label_id GROUP BY     lc.category;
SELECT     (SUM(IF(pb.phone_brand = 'OPPO' AND ga.gender = 'F', 1, 0)) /      SUM(IF(pb.device_id = 'R815T', 1, 0))) * 100 AS percentage FROM     phone_brand_device_model2 pb JOIN     gender_age ga ON pb.device_id = ga.device_id WHERE     ga.gender = 'F';
SELECT phone_brand FROM phone_brand_device_model2 WHERE device_model = '坚果手机';
SELECT COUNT(DISTINCT device_model) AS device_model_count FROM phone_brand_device_model2 WHERE phone_brand = '中兴';
SELECT group FROM gender_age WHERE age = 24;
SELECT timestamp FROM events WHERE event_id = '887711';
SELECT COUNT(*) FROM events WHERE DATE(timestamp) = '2016-05-06';
SELECT p.device_model FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE e.timestamp = '2016/5/7 23:55:16' AND e.longitude = 113 AND e.latitude = 28;
SELECT COUNT(DISTINCT a.app_id) AS game_fishing_app_count FROM app_all a JOIN app_labels al ON a.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'game-Fishing';
SELECT COUNT(DISTINCT g.device_id) AS num_users FROM phone_brand_device_model2 p JOIN gender_age g ON p.device_id = g.device_id WHERE p.device_model = '魅蓝Note 2' AND g.group = 'F29-32';
SELECT COUNT(DISTINCT g.device_id) AS num_30_year_old_users FROM gender_age g JOIN events e ON g.device_id = e.device_id WHERE g.age = '30'   AND g.device_id IN (SELECT device_id FROM app_events WHERE is_active = 1)   AND e.timestamp >= '2016-05-02 00:00:00'   AND e.timestamp < '2016-05-03 00:00:00';
SELECT COUNT(DISTINCT ae.app_id) AS installed_apps_count FROM app_events ae JOIN events e ON ae.event_id = e.event_id WHERE e.timestamp = '2016/5/6 23:33:34' AND ae.is_installed = 1;
SELECT COUNT(DISTINCT g.device_id) AS female_users FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.gender = 'F' AND p.phone_brand = 'E派';
SELECT COUNT(DISTINCT g.device_id) AS male_users FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.gender = 'M' AND p.device_model = 'Galaxy S5';
SELECT COUNT(DISTINCT g.device_id) AS active_users FROM events e JOIN gender_age g ON e.device_id = g.device_id WHERE g.group = 'F29-32' AND g.device_id IN (     SELECT device_id     FROM app_events     WHERE is_active = '1' ) AND e.timestamp BETWEEN '2016-05-07 00:00:00' AND '2016-05-07 23:59:59';
SELECT lc.category FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE al.app_id = 894384172610331000;
SELECT COUNT(DISTINCT ae.app_id) AS active_apps_count FROM app_events ae JOIN events e ON ae.event_id = e.event_id WHERE e.timestamp = '2016/5/6 14:09:49'   AND e.longitude = '116'   AND e.latitude = '40'   AND ae.is_active = '1';
SELECT     DIVIDE(         SUM(IF(e1.timestamp = '2016/5/2 7:50:28' AND ae.is_active = '1', 1, 0)),         SUM(IF(e2.timestamp = '2016/5/2 7:41:03' AND ae2.is_active = '1', 1, 0))     ) AS active_app_ratio FROM     events e1 JOIN     app_events ae ON e1.event_id = ae.event_id JOIN     events e2 ON e2.event_id = ae.event_id JOIN     app_events ae2 ON e2.event_id = ae2.event_id;
SELECT COUNT(*) AS device_count FROM phone_brand_device_model2 WHERE phone_brand = 'vivo';
SELECT     (SUM(IF(phone_brand = 'vivo', 1, 0)) - SUM(IF(phone_brand = 'LG', 1, 0))) AS device_difference FROM     phone_brand_device_model2;
SELECT device_id FROM gender_age WHERE age = (SELECT MIN(age) FROM gender_age);
SELECT COUNT(*) FROM gender_age WHERE gender = 'F' AND age > 30;
SELECT gender FROM gender_age WHERE age = (SELECT MAX(age) FROM gender_age);
SELECT MIN(age) AS youngest_female_age FROM gender_age WHERE gender = 'F';
SELECT MIN(age) AS youngest_age FROM gender_age JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE phone_brand = 'vivo';
SELECT DISTINCT a.app_id FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id JOIN app_all a ON al.app_id = a.app_id WHERE lc.category = 'Securities';
SELECT g.gender FROM events e JOIN gender_age g ON e.device_id = g.device_id WHERE e.timestamp = '2016-05-01 00:55:25';
SELECT COUNT(DISTINCT g.device_id) AS device_count FROM events e JOIN gender_age g ON e.device_id = g.device_id WHERE YEAR(e.timestamp) = 2016 AND g.group = 'M23-26';
SELECT pb.phone_brand, COUNT(DISTINCT ga.device_id) AS user_count FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE ga.group = 'M23-26' GROUP BY pb.phone_brand ORDER BY user_count DESC LIMIT 1;
SELECT e.longitude, e.latitude FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE p.device_model = 'Galaxy Note 2';
SELECT DISTINCT pd.device_model FROM gender_age ga JOIN phone_brand_device_model2 pd ON ga.device_id = pd.device_id WHERE ga.gender = 'F';
SELECT lc.category FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE al.app_id = '7324884708820020000';
SELECT COUNT(DISTINCT ga.device_id) AS user_count FROM gender_age ga JOIN app_events ae ON ga.device_id = ae.device_id JOIN app_labels al ON ae.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE ae.is_active = 0 AND ae.event_id = 2 AND lc.category = 'Property Industry 1.0';
SELECT COUNT(DISTINCT lc.category) AS total_categories FROM app_events ae JOIN app_labels al ON ae.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE ae.is_active = 0 AND ae.event_id = 2;
SELECT pd.device_model, COUNT(ga.device_id) AS female_count FROM gender_age ga JOIN phone_brand_device_model2 pd ON ga.device_id = pd.device_id WHERE ga.gender = 'F' AND ga.age > 30 GROUP BY pd.device_model ORDER BY female_count DESC LIMIT 1;
SELECT DISTINCT pd.device_model FROM events e JOIN phone_brand_device_model2 pd ON e.device_id = pd.device_id WHERE e.longitude = 121 AND e.latitude = 31;
SELECT lc.category, COUNT(al.app_id) AS user_count FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id GROUP BY lc.category ORDER BY user_count DESC LIMIT 3;
SELECT e.event_id FROM events e JOIN gender_age g ON e.device_id = g.device_id WHERE g.age = (SELECT MAX(age) FROM gender_age);
SELECT COUNT(e.event_id) AS event_count FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE ga.gender = 'F' AND ga.age = (SELECT MIN(age) FROM gender_age WHERE gender = 'F');
SELECT COUNT(DISTINCT g.device_id) AS male_device_count FROM events e JOIN gender_age g ON e.device_id = g.device_id WHERE e.timestamp::date = '2016-05-01' AND g.gender = 'M';
SELECT     SUBTRACT(IF(SUM(label_categories.category = 'Securities') > SUM(label_categories.category = 'Finance'), 'Securities', 'Finance')) AS more FROM     app_labels JOIN     label_categories ON app_labels.label_id = label_categories.label_id GROUP BY     label_categories.category;
SELECT DISTINCT p.device_model FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.group = 'M23-26';
SELECT AVG(gender_age.age) AS average_age FROM gender_age JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE gender_age.gender = 'F' AND phone_brand_device_model2.phone_brand = 'vivo';
SELECT     DIVIDE(SUM(CASE WHEN g.gender = 'M' THEN 1 ELSE 0 END),            SUM(CASE WHEN g.gender = 'F' THEN 1 ELSE 0 END)) AS gender_ratio FROM     gender_age g JOIN     phone_brand_device_model2 p ON g.device_id = p.device_id WHERE     p.phone_brand = 'vivo';
SELECT     DIVIDE(         COUNT(DISTINCT al1.app_id),         COUNT(DISTINCT al2.app_id)     ) AS ratio FROM     app_labels al1 JOIN     label_categories lc1 ON al1.label_id = lc1.label_id JOIN     app_labels al2 ON al1.app_id = al2.app_id JOIN     label_categories lc2 ON al2.label_id = lc2.label_id WHERE     lc1.category = 'Securities' AND     lc2.category = 'Finance';
SELECT label_id FROM label_categories WHERE category = 'Third-party card management';
SELECT     DIVIDE(SUM(CASE WHEN is_active = 1 THEN 1 ELSE 0 END),            SUM(CASE WHEN is_active = 0 THEN 1 ELSE 0 END)) AS active_inactive_ratio FROM     app_events WHERE     event_id = 58;
SELECT COUNT(*) AS event_count FROM events WHERE device_id = '3915082290673130000';
SELECT     (SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) * 100.0 / COUNT(device_id)) AS male_percentage FROM     gender_age;
SELECT COUNT(*) AS event_count FROM events WHERE longitude = -156;
SELECT COUNT(DISTINCT a.app_id) AS user_count FROM app_labels al JOIN app_all a ON al.app_id = a.app_id WHERE al.label_id = '48';
SELECT COUNT(*) FROM label_categories WHERE category LIKE 'game%';
SELECT COUNT(*) AS number_of_events FROM events WHERE longitude = 80 AND latitude = 37;
SELECT l.label_id, lc.category FROM app_labels l JOIN label_categories lc ON l.label_id = lc.label_id WHERE l.app_id = '5758400314709850000';
SELECT DISTINCT a.app_id FROM app_all a JOIN app_labels al ON a.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'game-Rowing';
SELECT al.label_id, al.app_id FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'Chinese Classical Mythology';
SELECT COUNT(DISTINCT a.app_id) AS app_id_count, e.longitude, e.latitude FROM app_events AS a JOIN events AS e ON a.event_id = e.event_id WHERE a.event_id = '79641';
SELECT longitude, latitude, timestamp FROM events WHERE event_id IN (     SELECT event_id     FROM app_events     WHERE app_id = '8715964299802120000' );
SELECT COUNT(DISTINCT g.device_id) AS oppo_user_count FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id JOIN gender_age g ON e.device_id = g.device_id WHERE p.phone_brand = 'OPPO' AND DATE(e.timestamp) = '2016-05-01';
SELECT     DIVIDE(SUM(CASE WHEN g.gender = 'M' THEN 1 ELSE 0 END),            SUM(CASE WHEN g.gender = 'F' THEN 1 ELSE 0 END)) AS male_female_ratio FROM     gender_age g JOIN     phone_brand_device_model2 p ON g.device_id = p.device_id WHERE     p.phone_brand = 'vivo' AND p.device_model = 'X5Pro';
SELECT COUNT(*) FROM gender_age JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE gender = 'F' AND phone_brand = 'ZUK' AND device_model = 'Z1' AND `group` = 'F23-';
SELECT DISTINCT p.phone_brand, p.device_model FROM phone_brand_device_model2 p JOIN gender_age g ON p.device_id = g.device_id WHERE g.age < 10;
SELECT     (SUM(CASE WHEN g.gender = 'F' AND g.age > 80 THEN 1 ELSE 0 END) * 100.0 / COUNT(g.device_id)) AS female_percentage_over_80 FROM     gender_age g JOIN     phone_brand_device_model2 p ON g.device_id = p.device_id WHERE     p.phone_brand = 'HTC';
SELECT p.phone_brand, p.device_model FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE e.event_id = 6701;
SELECT g.gender, g.age FROM gender_age g JOIN events e ON g.device_id = e.device_id WHERE g.device_id BETWEEN '-9215352913819630000' AND '-9222956879900150000' GROUP BY g.device_id, g.gender, g.age ORDER BY COUNT(e.event_id) DESC LIMIT 1;
SELECT timestamp FROM events WHERE event_id = 12;
SELECT COUNT(DISTINCT device_id) AS active_users FROM events JOIN app_events ON events.event_id = app_events.event_id WHERE app_events.is_active = 1;
SELECT COUNT(*) FROM phone_brand_device_model2 WHERE device_model = 'A51';
SELECT gender FROM gender_age WHERE device_id = '-9222956879900150000';
SELECT COUNT(*) FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'game-card';
SELECT DISTINCT g.age, g.group FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE p.phone_brand = 'vivo';
SELECT COUNT(DISTINCT g.device_id) AS user_count FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.age < 30 AND p.device_model = 'Galaxy Note 2';
SELECT     (SUM(CASE WHEN age < 50 THEN 1 ELSE 0 END) * 100.0 / COUNT(device_id)) AS percentage_under_50 FROM     phone_brand_device_model2 p JOIN     gender_age g ON p.device_id = g.device_id WHERE     p.phone_brand = 'OPPO';
SELECT AVG(age) AS average_age FROM gender_age_train WHERE device_id IN (     SELECT device_id     FROM phone_brand_device_model2     WHERE device_model = 'R7' );
SELECT lc.category FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE al.app_id = 5902120154267990000;
SELECT DISTINCT g.group FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE p.phone_brand = 'LG';
SELECT lc.category FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE al.app_id = 4955831798976240000;
SELECT COUNT(DISTINCT g.device_id) AS female_users FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.gender = 'F' AND p.device_model = 'MI 3';
SELECT COUNT(DISTINCT g.device_id) AS male_users_using_desire_820 FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.gender = 'M' AND p.device_model = 'Desire 820';
SELECT COUNT(DISTINCT g.device_id) AS user_count FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.age > 20 AND p.device_model = 'ELIFE E7 Mini';
SELECT COUNT(DISTINCT g.device_id) AS user_count FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.age BETWEEN 20 AND 50 AND p.device_model = 'Galaxy Premier';
SELECT COUNT(DISTINCT g.device_id) AS male_users FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.gender = 'M' AND p.phone_brand = 'HTC';
SELECT COUNT(DISTINCT g.device_id) AS user_count FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE p.phone_brand = 'TCL' AND g.age BETWEEN 20 AND 60;
SELECT     (SUM(CASE WHEN ga.age > 20 THEN 1 ELSE 0 END) * 1.0 / COUNT(ga.device_id)) * 100 AS percentage_above_20 FROM     gender_age ga JOIN     phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE     pb.phone_brand = 'SUGAR';
SELECT longitude, latitude FROM events WHERE timestamp BETWEEN '2016-04-30 00:00:00' AND '2016-04-30 23:59:59';
SELECT COUNT(DISTINCT device_model) AS different_models FROM phone_brand_device_model2 WHERE phone_brand = 'HTC';
SELECT app_id FROM app_events WHERE is_installed = 1 AND is_active = 1;
SELECT COUNT(DISTINCT app_id) AS app_count FROM app_labels WHERE label_id = 7;
SELECT device_id FROM gender_age WHERE gender = 'F' AND age BETWEEN 29 AND 31;
SELECT a.app_id FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id JOIN app_all a ON al.app_id = a.app_id WHERE lc.category = 'game-stress reliever';
SELECT DATE(FROM_UNIXTIME(e.timestamp)) AS event_date, COUNT(e.event_id) AS event_count FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE ga.gender = 'M' AND ga.age = 40 GROUP BY event_date ORDER BY event_count DESC LIMIT 1;
SELECT p.phone_brand, COUNT(a.app_id) AS installed_apps FROM phone_brand_device_model2 p JOIN app_events a ON p.device_id = a.device_id WHERE a.is_installed = 1 GROUP BY p.phone_brand ORDER BY installed_apps DESC LIMIT 1;
SELECT COUNT(DISTINCT g.device_id) AS men_under_23_inactive FROM gender_age g JOIN app_events a ON g.device_id = a.device_id WHERE g.gender = 'M' AND g.age < 23 AND a.is_installed = 1 AND a.is_active = 0;
SELECT COUNT(DISTINCT g.device_id) AS women_with_apps FROM gender_age g JOIN app_labels al ON g.device_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id JOIN app_events ae ON al.app_id = ae.app_id WHERE g.gender = 'F' AND ae.is_installed = 1 AND lc.category = 'game-Finding fault';
SELECT g.gender, COUNT(g.gender) AS gender_count FROM events e JOIN gender_age g ON e.device_id = g.device_id WHERE e.timestamp BETWEEN '2016-05-01 00:00:00' AND '2016-05-10 23:59:59' GROUP BY g.gender ORDER BY gender_count DESC LIMIT 1;
SELECT group, COUNT(*) AS count FROM gender_age JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE device_model = 'SM-T2558' GROUP BY group ORDER BY count DESC LIMIT 1;
SELECT COUNT(DISTINCT g.device_id) FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.age > 50 AND (p.phone_brand != 'HTC' OR p.device_model != 'One M8 Eye');
SELECT e.longitude, e.latitude FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE ga.gender = 'F' AND ga.age < 30;
SELECT     (SUM(CASE WHEN g.gender = 'F' AND ae.is_installed = 0 THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN g.gender = 'M' THEN 1 ELSE 0 END), 0)) * 100 AS percentage FROM     gender_age g LEFT JOIN     app_events ae ON g.device_id = ae.device_id;
SELECT AVG(g.age) AS average_age FROM gender_age g JOIN app_events a ON g.device_id = a.device_id WHERE a.is_installed = 1 AND a.is_active = 0;
SELECT * FROM events WHERE timestamp LIKE '2016-05-01%' AND latitude = 31 LIMIT 3;
SELECT event_id FROM events WHERE longitude = 0 AND latitude = 0 LIMIT 3;
SELECT     SUM(CASE WHEN latitude != 0 AND longitude != 0 THEN 1 ELSE 0 END) -     SUM(CASE WHEN latitude = 0 AND longitude = 0 THEN 1 ELSE 0 END) AS difference FROM     events WHERE     device_id = -9222956879900150000;
SELECT DISTINCT g.device_id FROM gender_age g WHERE g.gender = 'F' LIMIT 3;
SELECT label_id, category FROM label_categories WHERE category LIKE '%game%' LIMIT 5;
SELECT DISTINCT device_model FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO' LIMIT 3;
SELECT     (SUM(CASE WHEN ae.is_installed = 1 AND ae.is_active = 0 THEN 1 ELSE 0 END) * 1.0 / COUNT(DISTINCT ae.app_id)) * 100 AS percentage FROM     app_events ae JOIN     events e ON ae.event_id = e.event_id WHERE     e.event_id = 6;
SELECT     CASE         WHEN SUM(CASE WHEN g.gender = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN g.gender = 'F' THEN 1 ELSE 0 END) THEN 'M'         ELSE 'F'     END AS more_owned_gender FROM     gender_age g JOIN     phone_brand_device_model2 p ON g.device_id = p.device_id WHERE     p.device_model = 'Galaxy Note 2';
SELECT timestamp, COUNT(DISTINCT device_id) AS active_users FROM events WHERE event_id = 2 AND is_active = 1;
SELECT lc.category FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE al.app_id = 5902120154267990000;
SELECT COUNT(DISTINCT g.device_id) AS user_count FROM gender_age g JOIN app_labels al ON g.device_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'comics';
SELECT g.gender, g.age FROM gender_age g JOIN events e ON g.device_id = e.device_id WHERE g.device_id = '29182687948017100' AND e.event_id = 1;
SELECT COUNT(DISTINCT g.device_id) AS male_user_count FROM gender_age g JOIN events e ON g.device_id = e.device_id WHERE g.gender = 'M' AND e.longitude = 114;
SELECT timestamp FROM events WHERE event_id = 7 AND device_id = -8022267440849930000;
SELECT lc.category FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE al.app_id = -9222198347540750000;
SELECT g.group FROM phone_brand_device_model2 p JOIN gender_age g ON p.device_id = g.device_id WHERE p.phone_brand = 'LG' AND p.device_model = 'Nexus 4';
SELECT g.gender FROM phone_brand_device_model2 p JOIN gender_age g ON p.device_id = g.device_id WHERE p.phone_brand = 'HTC' AND p.device_model = 'Desire 826' LIMIT 1;
SELECT     (SUM(CASE WHEN lc.category = 'Academic Information' THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT al.app_id) AS percentage FROM     app_labels al JOIN     label_categories lc ON al.label_id = lc.label_id;
SELECT     (SUM(CASE WHEN ga.age = 'F27-28' THEN 1 ELSE 0 END) * 1.0 / COUNT(DISTINCT ga.device_id)) * 100 AS percentage FROM     events e JOIN     gender_age ga ON e.device_id = ga.device_id WHERE     e.timestamp LIKE '2016-05-03%';
SELECT COUNT(*) AS oppo_device_count FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO';
SELECT `group`, COUNT(*) as count FROM gender_age GROUP BY `group` ORDER BY count DESC LIMIT 1;
SELECT COUNT(*) AS event_count FROM events WHERE device_id = '4069764298338760000';
SELECT COUNT(DISTINCT a.app_id) AS equity_fund_count FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'Equity Fund';
SELECT e.longitude, e.latitude FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE ga.gender = 'F' AND ga.group = 'F24-26';
SELECT COUNT(DISTINCT g.device_id) AS male_users_count FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.gender = 'M' AND p.device_model = 'Galaxy Note 3';
SELECT p.phone_brand, p.device_model FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE e.timestamp = '2016-05-07 06:03:22';
SELECT phone_brand, COUNT(*) AS brand_count FROM phone_brand_device_model2 p JOIN gender_age g ON p.device_id = g.device_id WHERE g.age BETWEEN 20 AND 30 GROUP BY phone_brand ORDER BY brand_count DESC LIMIT 1;
SELECT     (SUM(CASE WHEN g.gender IS NULL AND g.age IS NULL AND g.group IS NULL THEN 1 ELSE 0 END) * 1.0 / COUNT(g.device_id)) * 100 AS percentage FROM     phone_brand_device_model2 p LEFT JOIN     gender_age g ON p.device_id = g.device_id WHERE     p.phone_brand = 'vivo';
SELECT k.keyword FROM Keyword k JOIN Episode e ON k.episode_id = e.episode_id WHERE e.title = 'Refuge: Part 1';
SELECT COUNT(*) FROM Keyword WHERE episode_id IN (     SELECT episode_id     FROM Episode     WHERE series = 'law_and_order' AND season = 9 AND episode = 23 );
SELECT E.title FROM Episode E JOIN Keyword K ON E.episode_id = K.episode_id WHERE K.keyword = 'laundering money';
SELECT k.keyword FROM Keyword k JOIN Episode e ON k.episode_id = e.episode_id WHERE e.rating > 8;
SELECT SUM(votes) AS total_10_star_votes FROM Vote WHERE stars = 10 AND episode_id IN (     SELECT episode_id     FROM Episode     WHERE title = 'Cherished' );
SELECT SUM(votes) AS total_votes FROM Vote WHERE episode_id IN (SELECT episode_id FROM Episode WHERE title = 'Cherished');
SELECT e.title FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 10 ORDER BY v.votes DESC LIMIT 1;
SELECT role FROM Credit JOIN Episode ON Credit.episode_id = Episode.episode_id WHERE Credit.person_id = (SELECT person_id FROM Person WHERE name = 'Park Dietz') AND Episode.title = 'Cherished' AND Credit.credited = 'true';
SELECT COUNT(DISTINCT a.person_id) FROM Award a JOIN Episode e ON a.episode_id = e.episode_id WHERE e.title = 'Cherished' AND a.credited = '';
SELECT p.name FROM Credit c JOIN Person p ON c.person_id = p.person_id JOIN Episode e ON c.episode_id = e.episode_id WHERE c.credited = 'true' AND c.role = 'technical advisor' AND e.title = 'Cherished';
SELECT COUNT(*) FROM Credit WHERE person_id = (SELECT person_id FROM Person WHERE name = 'Park Dietz') AND credited = 'true';
SELECT e.title FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'Park Dietz' AND c.credited = 'true';
SELECT COUNT(*) > 0 AS is_credited FROM Credit WHERE episode_id = 'tt0629204' AND person_id = (SELECT person_id FROM Person WHERE name = 'Anthony Azzara') AND credited = 'true';
SELECT COUNT(*) FROM Keyword WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'Disciple');
SELECT e.title FROM Vote v JOIN Episode e ON v.episode_id = e.episode_id WHERE v.stars = '1' ORDER BY v.votes DESC LIMIT 1;
SELECT COUNT(*) FROM Award WHERE series = 'Law and Order' AND episode_id = (SELECT episode_id FROM Episode WHERE series = 'Law and Order' AND season = 9 AND episode = 20);
SELECT COUNT(DISTINCT role) FROM Credit WHERE episode_id IN (     SELECT episode_id     FROM Episode     WHERE series = 'Law and Order' AND season = 9 AND episode = 17 ) AND credited = 'true';
SELECT E.summary FROM Award A JOIN Episode E ON A.episode_id = E.episode_id WHERE A.award_id = '296';
SELECT role FROM Credit WHERE person_id = (SELECT person_id FROM Person WHERE name = 'Joseph Blair');
SELECT COUNT(*) FROM Award WHERE person_id = (SELECT person_id FROM Person WHERE name = 'Rene Balcer') AND result = 'Nominated';
SELECT air_date FROM Episode WHERE votes = (SELECT MAX(votes) FROM Episode);
SELECT p.name FROM Award a JOIN Person p ON a.person_id = p.person_id WHERE a.award_id = '313';
SELECT COUNT(DISTINCT c.episode_id) AS episode_count FROM Credit c JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'J.K. Simmons';
SELECT SUM(votes) AS nine_star_votes FROM Vote WHERE stars = '9' AND episode_id = (SELECT episode_id FROM Episode WHERE title = 'Sideshow');
SELECT     (SELECT COUNT(keyword) FROM Keyword k JOIN Episode e ON k.episode_id = e.episode_id WHERE e.title = 'Refuge: Part 1') /     (SELECT COUNT(keyword) FROM Keyword k JOIN Episode e ON k.episode_id = e.episode_id WHERE e.title = 'Shield') AS times;
SELECT AVG(cast_count) AS average_cast_members FROM (     SELECT COUNT(person_id) AS cast_count     FROM Credit     WHERE credited = 'TRUE' AND episode_id IN (         SELECT episode_id         FROM Episode         WHERE number_in_series BETWEEN 185 AND 193     ) AND category = 'Cast'     GROUP BY episode_id ) AS cast_counts;
SELECT p.name FROM Person p WHERE p.person_id NOT IN (     SELECT c.person_id     FROM Credit c     WHERE c.episode_id = 'tt0629391' AND c.credited = '' );
SELECT COUNT(DISTINCT person_id) AS number_of_people FROM Award WHERE result = 'Winner' GROUP BY person_id HAVING COUNT(result) >= 3;
SELECT p.name FROM Credit c JOIN Person p ON c.person_id = p.person_id WHERE c.episode_id = 'tt0629204' AND c.role = 'script supervisor';
SELECT COUNT(*) FROM Award WHERE person_id = (SELECT person_id FROM Person WHERE name = 'Julia Roberts') AND result = 'Nominee';
SELECT name FROM Person WHERE person_id IN (     SELECT person_id     FROM Credit     WHERE role = 'camera operator' ) ORDER BY height_meters DESC LIMIT 1;
SELECT COUNT(DISTINCT a.person_id) FROM Award a JOIN Person p ON a.person_id = p.person_id WHERE p.birth_country = 'Canada' AND a.year = 1999;
SELECT COUNT(DISTINCT v.person_id) AS num_people FROM Vote v JOIN Episode e ON v.episode_id = e.episode_id WHERE e.rating = (SELECT MAX(rating) FROM Episode) AND v.stars = 10;
SELECT k.keyword FROM Keyword k JOIN Episode e ON k.episode_id = e.episode_id WHERE e.title = 'Shield';
SELECT (COUNT(CASE WHEN v.stars = 1 THEN 1 END) * 100.0 / COUNT(v.episode_id)) AS percentage FROM Vote v JOIN Episode e ON v.episode_id = e.episode_id WHERE e.title = 'True North';
SELECT e.title FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id GROUP BY e.episode_id, e.title ORDER BY COUNT(k.keyword) DESC LIMIT 1;
SELECT COUNT(DISTINCT a.episode_id) AS winner_count FROM Award a JOIN Episode e ON a.episode_id = e.episode_id WHERE e.air_date LIKE '1998%'   AND a.result = 'Winner'   AND a.organization = 'International Monitor Awards';
SELECT COUNT(*) FROM Award WHERE episode_id IN (SELECT episode_id FROM Episode WHERE title = 'Agony') AND result = 'Winner';
SELECT     (SELECT COUNT(*) FROM Episode WHERE series = 'Law and Order' AND season = 9) AS episode_count,     (SELECT AVG(cast_count) FROM (         SELECT COUNT(CASE WHEN category = 'Cast' THEN person_id END) AS cast_count         FROM Credit         JOIN Episode ON Credit.episode_id = Episode.episode_id         WHERE Episode.series = 'Law and Order'         GROUP BY Episode.season     ) AS season_casts) AS average_casts_per_season;
SELECT k.keyword FROM Keyword k JOIN Vote v ON k.episode_id = v.episode_id WHERE v.votes = (     SELECT DISTINCT v2.votes     FROM Vote v2     ORDER BY v2.votes DESC     LIMIT 1 OFFSET 1 );
SELECT COUNT(*) FROM Award WHERE series = 'Agony' AND result = 'Winner';
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id JOIN Episode e ON c.episode_id = e.episode_id WHERE c.role = 'Narrator' AND e.title = 'Flight';
SELECT organization, COUNT(award_id) AS award_count FROM Award WHERE person_id = (SELECT person_id FROM Person WHERE name = 'Constantine Makris') AND result = 'Winner' GROUP BY organization ORDER BY award_count DESC LIMIT 1;
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.episode_id = 3 AND c.role = 'stunt coordinator';
SELECT COUNT(DISTINCT p.person_id) AS not_credited_count FROM Person p WHERE p.person_id NOT IN (     SELECT c.person_id     FROM Credit c     JOIN Episode e ON c.episode_id = e.episode_id     WHERE e.title = 'Admissions' AND c.credited = '' );
SELECT e.title FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id WHERE c.category = 'Art Department' GROUP BY e.episode_id, e.title ORDER BY COUNT(c.person_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT role) FROM Credit WHERE person_id = (SELECT person_id FROM Person WHERE name = 'Julia Roberts');
SELECT title FROM Episode WHERE episode_id IN (     SELECT episode_id     FROM Vote     WHERE votes >= 30 AND stars = 10 ) LIMIT 3;
SELECT name FROM Person WHERE person_id IN (     SELECT person_id     FROM Credit     WHERE role = 'Clerk' ) ORDER BY birthdate DESC LIMIT 1;
SELECT COUNT(*) AS people_did_not_enjoy FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE episode = 24) AND stars = 1;
SELECT DISTINCT p.name FROM Credit c JOIN Person p ON c.person_id = p.person_id WHERE c.category = 'Cast';
WITH PersonAppearances AS (     SELECT p.name, COUNT(c.person_id) AS appearance_count     FROM Person p     JOIN Credit c ON p.person_id = c.person_id     GROUP BY p.name ), MaxAppearance AS (     SELECT MAX(appearance_count) AS max_count     FROM PersonAppearances ), TotalAppearances AS (     SELECT SUM(appearance_count) AS total_count     FROM PersonAppearances ) SELECT pa.name,        (pa.appearance_count * 100.0 / ta.total_count) AS percentage FROM PersonAppearances pa JOIN MaxAppearance ma ON pa.appearance_count = ma.max_count JOIN TotalAppearances ta ON 1=1;
SELECT e.title, e.season, e.episode, e.air_date FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.award_category = 'Primetime Emmy' AND e.series = 'Law & Order';
SELECT COUNT(DISTINCT e.episode_id) AS episodes_without_awards FROM Episode e LEFT JOIN Award a ON e.episode_id = a.episode_id AND a.result != 'Nominee' WHERE a.award_id IS NULL;
SELECT DISTINCT role FROM Credit WHERE credited = '';
SELECT title FROM Episode ORDER BY rating ASC LIMIT 3;
SELECT CONCAT(birth_place, ', ', birth_region) AS full_place_of_birth FROM Person WHERE birth_name = 'Rene Chenevert Balcer';
SELECT name FROM Person WHERE birth_country = 'USA';
SELECT E.title FROM Episode E JOIN Vote V ON E.episode_id = V.episode_id WHERE V.stars = 1;
SELECT DISTINCT p.name FROM Award a JOIN Person p ON a.person_id = p.person_id WHERE a.result = 'Winner' AND a.role = 'director';
SELECT votes FROM Episode WHERE title = 'Juvenile';
SELECT e.title FROM Episode e LEFT JOIN Credit c ON e.episode_id = c.episode_id AND c.person_id = (SELECT person_id FROM Person WHERE name = 'Anthony Azzara') WHERE c.credited = '' OR c.credited IS NULL;
SELECT DISTINCT A.year FROM Award A JOIN Episode E ON A.episode_id = E.episode_id WHERE E.title = 'DWB' AND A.result = 'Winner';
SELECT DISTINCT birth_region FROM Person JOIN Credit ON Person.person_id = Credit.person_id WHERE Credit.role = 'assistant location manager';
SELECT SUM(v.stars) AS total_stars FROM Vote v JOIN Credit c ON v.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'Donna Villella';
SELECT role FROM Award WHERE person_id = (SELECT person_id FROM Person WHERE name = 'Julia Roberts') AND result = 'Nominee';
SELECT role FROM Person JOIN Credit ON Person.person_id = Credit.person_id WHERE height_meters = (SELECT MAX(height_meters) FROM Person);
SELECT title FROM Episode WHERE episode_id = (     SELECT episode_id     FROM Award     WHERE result = 'Nominee'     GROUP BY episode_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT E.rating FROM Episode E JOIN Credit C ON E.episode_id = C.episode_id JOIN Person P ON C.person_id = P.person_id WHERE P.name = 'Jace Alexander';
SELECT DISTINCT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.episode_id = (     SELECT episode_id     FROM Episode     WHERE season = 9 AND episode = 19 );
SELECT AVG(v.stars) AS average_star_rating FROM Vote v JOIN Credit c ON v.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'Jim Bracchitta';
SELECT     (COUNT(CASE WHEN role = 'Additional Crew' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM     Credit WHERE     episode_id IN (SELECT episode_id FROM Episode WHERE title = 'True North');
SELECT title, summary, air_date FROM Episode WHERE episode_id IN (     SELECT episode_id     FROM Vote     WHERE stars = 10 AND votes = 72 );
SELECT e.air_date, e.rating, COUNT(v.stars) AS six_star_votes FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE e.episode_id = 12 AND v.stars = 6 GROUP BY e.air_date, e.rating;
SELECT p.name, a.role FROM Award a JOIN Person p ON a.person_id = p.person_id WHERE a.award = 'Best Television Episode'   AND a.award_category = 'Edgar'   AND a.year = 2000;
SELECT organization, year, award, award_category FROM Award WHERE person_id = (SELECT person_id FROM Person WHERE name = 'Rene Balcer') AND result = 'Winner';
SELECT a1.year, a1.episode_id FROM Award a1 JOIN Person p ON a1.person_id = p.person_id WHERE p.name = 'Constantine Makris'   AND a1.result = 'Winner'   AND a1.award = 'Television'   AND a1.award_category = 'Silver Gavel Award'   AND a1.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'   AND EXISTS (       SELECT 1       FROM Award a2       WHERE a2.person_id = a1.person_id         AND a2.result = 'Winner'         AND a2.award = 'Television'         AND a2.award_category = 'Silver Gavel Award'         AND a2.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'         AND a2.year = a1.year + 1         AND a2.episode_id = a1.episode_id   );
SELECT p.name FROM Person p JOIN Award a ON p.person_id = a.person_id WHERE a.series = 'Law and Order'   AND a.role = 'writer'   AND a.result = 'Winner'   AND a.award_category = 'Silver Gavel Award'   AND a.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' GROUP BY p.name HAVING COUNT(DISTINCT a.year) = 2;
SELECT COUNT(*) FROM Award WHERE episode_id = 20   AND series = 'Law and Order'   AND organization = 'Primetime Emmy Awards'   AND year = 1999   AND result = 'nominee';
SELECT e.title, a.role FROM Award a JOIN Episode e ON a.episode_id = e.episode_id WHERE a.person_id = (SELECT person_id FROM Person WHERE name = 'Julia Roberts')   AND a.result = 'Winner'   AND a.award = 'Outstanding Guest Actress in a Drama Series'   AND a.year = 1999   AND a.organization = 'Primetime Emmy Awards';
SELECT e.title, e.air_date FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'Billy Fox' AND c.role = 'producer';
SELECT COUNT(*) FROM Credit JOIN Person ON Credit.person_id = Person.person_id WHERE Credit.episode_id = 'tt0629228' AND Person.birth_country = 'USA' AND Credit.category = 'Cast' AND Credit.credited = '';
SELECT role FROM Credit WHERE person_id = (SELECT person_id FROM Person WHERE name = 'Jason Kuschner') AND episode_id = 9;
SELECT p.name FROM Credit c JOIN Person p ON c.person_id = p.person_id WHERE c.role = 'president of NBC West Coast' AND c.episode_id = (SELECT episode_id FROM Episode WHERE season = 1 AND episode = 1);
SELECT e.title FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id GROUP BY e.episode_id, e.title ORDER BY SUM(v.stars * v.percent / 100) DESC LIMIT 3;
SELECT     COUNT(CASE WHEN p.birth_country = 'USA' THEN 1 END) * 1.0 / COUNT(c.person_id) AS ratio,     c.role FROM     Credit c JOIN     Person p ON c.person_id = p.person_id WHERE     c.episode_id = 2 AND c.category = 'Cast' GROUP BY     c.role;
SELECT COUNT(DISTINCT p.person_id) FROM Person p JOIN Award a ON p.person_id = a.person_id WHERE p.birth_country = 'Canada' AND a.award IS NOT NULL;
SELECT COUNT(DISTINCT c.episode_id) AS episode_count FROM Credit c JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'Jerry Orbach';
SELECT p.name FROM Credit c JOIN Person p ON c.person_id = p.person_id WHERE c.episode_id = 9;
SELECT DISTINCT a.award FROM Award a WHERE a.episode_id = 20 AND (a.result = 'Winner' OR a.result = 'Nominee');
SELECT role, name FROM Award JOIN Person ON Award.person_id = Person.person_id GROUP BY role, name HAVING COUNT(award_id) > 1;
SELECT p.name, e.episode FROM Award a JOIN Person p ON a.person_id = p.person_id JOIN Episode e ON a.episode_id = e.episode_id WHERE a.role = 'director' AND a.result = 'Winner';
SELECT DISTINCT e.episode_id, e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.result = 'Nominee';
SELECT episode_id, AVG(rating) AS average_rating FROM Episode WHERE season = 9 GROUP BY episode_id;
SELECT     (SELECT votes FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE episode = 1) AND stars = 10) -     (SELECT votes FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE episode = 24) AND stars = 10) AS difference
SELECT e.rating FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.result = 'Winner' GROUP BY e.episode_id ORDER BY COUNT(a.award_id) DESC LIMIT 1;
SELECT COUNT(*) FROM Credit WHERE episode_id IN (SELECT episode_id FROM Episode WHERE episode >= 1 AND episode <= 10) AND credited = 'true';
SELECT e.* FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id WHERE k.keyword = 'mafia';
SELECT AVG(v.stars) AS average_star FROM Vote v JOIN Award a ON v.episode_id = a.episode_id WHERE a.result = 'Winner' AND v.percent = (SELECT MAX(percent) FROM Vote WHERE episode_id IN (SELECT episode_id FROM Award WHERE result = 'Winner'));
SELECT AVG(rating) AS average_ranking FROM Episode WHERE episode_id IN (     SELECT episode_id     FROM Award     WHERE result = 'Nominated' );
SELECT COUNT(DISTINCT person_id) FROM Award WHERE result = 'Winner'   AND award = 'Television'   AND organization = 'American Bar Association Silver Gavel Awards for Media and the Arts';
SELECT birth_country FROM Person WHERE name = 'Michael Preston';
SELECT p.name FROM Award a JOIN Person p ON a.person_id = p.person_id WHERE a.result = 'Nominee' AND a.role = 'Katrina Ludlow' AND a.series = 'Law & Order';
SELECT p.name FROM Award a JOIN Credit c ON a.episode_id = c.episode_id AND a.person_id = c.person_id JOIN Person p ON c.person_id = p.person_id WHERE a.award = 'Best Television Episode' AND a.result = 'Winner' AND c.role = 'teleplay';
SELECT p.birthdate FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.role = 'writer';
SELECT e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.award = 'Outstanding Costume Design for a Series';
SELECT title FROM Episode WHERE episode_id = (     SELECT episode_id     FROM Vote     GROUP BY episode_id     ORDER BY SUM(votes) DESC     LIMIT 1 );
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.role = 'Alex Brown' AND c.credited = 'true';
SELECT birth_place FROM Person WHERE person_id = 'nm007064' AND person_id NOT IN (     SELECT person_id     FROM Credit     WHERE role = 'narrator'     AND credited = '' );
SELECT k.keyword FROM Keyword k JOIN Episode e ON k.episode_id = e.episode_id WHERE e.title = 'Shield';
SELECT DISTINCT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id JOIN Award a ON c.episode_id = a.episode_id WHERE p.height_meters > 1.80 AND a.result = 'Winner';
SELECT e.title FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id WHERE k.keyword IN ('nun', 'priest') GROUP BY e.episode_id HAVING COUNT(DISTINCT k.keyword) = 2;
SELECT episode_id FROM Episode WHERE rating = 8.5 AND episode_id IN (     SELECT episode_id     FROM Award     WHERE award = 'Best Television Episode'     AND result = 'Winner' ) ORDER BY episode_id LIMIT 1 OFFSET 1;
SELECT title FROM Episode JOIN Vote ON Episode.episode_id = Vote.episode_id WHERE Vote.stars = 10 LIMIT 3;
SELECT VALUE, UNITS FROM observations WHERE DATE = '2008-03-11' AND PATIENT = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss') AND DESCRIPTION = 'Body Height';
SELECT     (SELECT VALUE FROM observations WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss') AND DATE LIKE '2009%' AND DESCRIPTION = 'Body Weight') -     (SELECT VALUE FROM observations WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss') AND DATE LIKE '2008%' AND DESCRIPTION = 'Body Weight') AS weight_increase;
SELECT MAX(VALUE) AS Highest_Systolic_Blood_Pressure FROM observations WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss') AND DESCRIPTION = 'Systolic Blood Pressure';
SELECT COUNT(*) FROM observations WHERE PATIENT IN (     SELECT patient     FROM patients     WHERE first = 'Elly' AND last = 'Koss' ) AND DESCRIPTION = 'Systolic Blood Pressure';
SELECT CONCAT(p.first, ' ', p.last) AS full_name FROM observations o JOIN patients p ON o.PATIENT = p.patient WHERE o.DESCRIPTION = 'Systolic Blood Pressure' ORDER BY o.VALUE DESC LIMIT 1;
SELECT SUM(     (365 * (strftime('%Y', STOP) - strftime('%Y', START))) +     (30 * (strftime('%m', STOP) - strftime('%m', START))) +     (strftime('%d', STOP) - strftime('%d', START)) ) AS duration FROM medications WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss') AND DESCRIPTION LIKE 'Acetaminophen%';
SELECT DESCRIPTION FROM medications WHERE PATIENT IN (     SELECT patient     FROM patients     WHERE first = 'Elly' AND last = 'Koss' );
SELECT m.REASONDESCRIPTION FROM medications m JOIN patients p ON m.PATIENT = p.patient WHERE p.first = 'Elly' AND p.last = 'Koss' AND m.DESCRIPTION LIKE 'Acetaminophen%';
SELECT m.DESCRIPTION FROM medications m JOIN encounters e ON m.ENCOUNTER = e.ID JOIN patients p ON e.PATIENT = p.patient WHERE p.first = 'Elly' AND p.last = 'Koss' AND e.REASONDESCRIPTION LIKE 'Streptococcal sore throat%';
SELECT CONCAT(p.first, ' ', p.last) AS full_name FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE m.DESCRIPTION LIKE 'Acetaminophen%';
SELECT DESCRIPTION FROM conditions WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss') AND START = '2009-01-08';
SELECT SUM(     (strftime('%Y', STOP) - strftime('%Y', START)) * 365 +     (strftime('%m', STOP) - strftime('%m', START)) * 30 +     (strftime('%d', STOP) - strftime('%d', START)) ) AS duration FROM conditions WHERE DESCRIPTION = 'Cystitis' AND PATIENT = (     SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss' );
SELECT DIVIDE(SUM(VALUE), COUNT(VALUE)) AS average_weight FROM observations WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss')   AND DESCRIPTION = 'Body Weight';
SELECT     (COUNT(CASE WHEN p.marital = 'M' THEN 1 END) * 100.0 / COUNT(p.patient)) AS percentage FROM     patients p JOIN     conditions c ON p.patient = c.PATIENT WHERE     c.DESCRIPTION = 'Cystitis';
SELECT VALUE, UNITS FROM observations WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Vincent' AND last = 'Wyman') AND DESCRIPTION = 'Body Height' AND DATE = '2010-08-02';
SELECT COUNT(*) AS care_plan_count FROM careplans cp JOIN patients p ON cp.PATIENT = p.patient WHERE p.first = 'Norman' AND p.last = 'Berge';
SELECT REASONDESCRIPTION FROM medications WHERE DESCRIPTION = 'Leucovorin 100 MG Injection' AND START = '1970-12-19' AND PATIENT = (SELECT patient FROM patients WHERE first = 'Annabelle' AND last = 'Pouros');
SELECT PREVALENCE PERCENTAGE FROM all_prevalences WHERE ITEM = '64859006';
SELECT PREVALENCE RATE FROM all_prevalences WHERE ITEM = '368581000119106';
SELECT DESCRIPTION FROM procedures WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Jacquelyn' AND last = 'Shanahan') AND DATE = '2009-08-09';
SELECT COUNT(*) FROM claims WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Abbie' AND last = 'Cole') AND BILLABLEPERIOD BETWEEN '2010-12-31' AND '2012-01-01';
SELECT COUNT(*) AS allergy_count FROM allergies a JOIN patients p ON a.PATIENT = p.patient WHERE p.first = 'Saundra' AND p.last = 'Monahan';
SELECT CONCAT(p.first, ' ', p.last) AS patient_name FROM claims c JOIN patients p ON c.PATIENT = p.patient WHERE c.BILLABLEPERIOD = '1947-09-11';
SELECT DESCRIPTION FROM encounters WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Hubert' AND last = 'Baumbach') AND DATE = '2008-10-25';
SELECT DESCRIPTION FROM conditions WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Keven' AND last = 'Kuhn') AND START >= '2016-09-24' AND STOP <= '2016-10-10';
SELECT DATE FROM procedures WHERE DESCRIPTION = 'Standard pregnancy test' AND PATIENT IN (SELECT patient FROM patients WHERE first = 'Ira' AND last = 'Deckow');
SELECT AVG(DATEDIFF(STOP, START)) AS average_careplan_period FROM careplans WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Wesley' AND last = 'Lemke');
SELECT AVG(DATEDIFF(stop, start)) AS average_pregnancy_period FROM careplans WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Angelena' AND last = 'Kertzmann') AND DESCRIPTION = 'Normal pregnancy';
SELECT PATIENT FROM allergies WHERE STOP IS NOT NULL ORDER BY (CAST(SUBSTR(STOP, -2, 1) AS INTEGER) + 2000 - (CASE WHEN SUBSTR(STOP, -2, 1) = '9' THEN 0 ELSE 1 END)) - (CAST(SUBSTR(START, -2, 1) AS INTEGER) + 1900 - (CASE WHEN SUBSTR(START, -2, 1) = '9' THEN 0 ELSE 1 END)) DESC LIMIT 1;
SELECT COUNT(DISTINCT PATIENT) AS patient_count FROM conditions WHERE DESCRIPTION = 'Diabetes' AND START LIKE '1988%';
SELECT COUNT(DISTINCT PATIENT) AS allergic_to_eggs FROM allergies WHERE DESCRIPTION = 'Allergy to eggs';
SELECT PATIENT FROM conditions WHERE DESCRIPTION = 'Hypertension' ORDER BY START DESC LIMIT 1;
SELECT DESCRIPTION, COUNT(*) AS allergy_count FROM allergies GROUP BY DESCRIPTION ORDER BY allergy_count DESC LIMIT 1;
SELECT PATIENT FROM observations WHERE CODE = 'Body Height' AND VALUE = (SELECT MAX(VALUE) FROM observations WHERE CODE = 'Body Height');
SELECT DESCRIPTION, COUNT(*) AS condition_count FROM conditions JOIN patients ON conditions.PATIENT = patients.patient WHERE patients.gender = 'F' AND patients.ethnicity = 'american' GROUP BY DESCRIPTION ORDER BY condition_count DESC LIMIT 1;
SELECT COUNT(DISTINCT PATIENT) AS Dominican_Patients_Stopped FROM medications JOIN patients ON medications.PATIENT = patients.patient WHERE DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet'   AND START LIKE '2016%'   AND ethnicity = 'dominican'   AND (strftime('%m', STOP) - strftime('%m', START)) = 1   AND (strftime('%Y', STOP) = strftime('%Y', START));
SELECT COUNT(DISTINCT p.patient) AS patient_count FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE p.birthdate LIKE '192%' AND c.DESCRIPTION = 'Pneumonia';
SELECT CONCAT(p.first, ' ', p.last) AS full_name FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE m.DESCRIPTION = 'Yaz 28 Day Pack' AND m.START LIKE '2011%';
SELECT COUNT(DISTINCT p.patient) AS black_immunized_count FROM patients p JOIN immunizations i ON p.patient = i.patient WHERE p.race = 'black' AND i.DESCRIPTION = 'DTaP' AND i.DATE LIKE '2013%';
SELECT COUNT(i.CODE) AS immunization_count FROM immunizations i JOIN conditions c ON i.PATIENT = c.PATIENT WHERE c.START = (     SELECT MAX(START)     FROM conditions     WHERE PATIENT = (         SELECT PATIENT         FROM conditions         ORDER BY (SELECT MAX(PREVALENCE_RATE) FROM all_prevalences) DESC         LIMIT 1     ) );
SELECT COUNT(DISTINCT c.PATIENT) AS patient_count FROM conditions c JOIN all_prevalences ap ON c.CODE = ap.ITEM WHERE ap.PREVALENCE_RATE = (SELECT MAX(PREVALENCE_RATE) FROM all_prevalences);
SELECT DESCRIPTION FROM conditions WHERE PATIENT IN (     SELECT PATIENT     FROM immunizations     WHERE DESCRIPTION = 'Influenza seasonal injectable preservative free' ) GROUP BY DESCRIPTION ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT c.PATIENT FROM conditions c JOIN all_prevalences ap ON c.CODE = ap.ITEM WHERE ap.PREVALENCE_PERCENTAGE = 18.8;
SELECT COUNT(*) AS condition_count FROM conditions WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Tyree' AND last = 'Eichmann');
SELECT COUNT(DISTINCT i.PATIENT) AS patient_count FROM immunizations i JOIN conditions c ON i.PATIENT = c.PATIENT WHERE i.DESCRIPTION = 'meningococcal MCV4P' AND c.DESCRIPTION = 'Viral sinusitis (disorder)' AND i.DATE < c.START;
SELECT COUNT(DISTINCT p.patient) AS female_prediabetes_count FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Prediabetes' AND p.gender = 'F';
SELECT CONCAT(p.first, ' ', p.last) AS full_name FROM patients p JOIN observations o ON p.patient = o.PATIENT WHERE o.DESCRIPTION = 'Body Mass Index' AND o.UNITS = 'kg/m2' ORDER BY o.VALUE ASC LIMIT 1;
SELECT SUBTRACT(strftime('%Y', COALESCE(deathdate, 'now')), strftime('%Y', birthdate)) AS age FROM patients JOIN conditions ON patients.patient = conditions.PATIENT WHERE patients.first = 'Giovanni' AND patients.last = 'Russel' AND conditions.DESCRIPTION = 'Hypertension';
SELECT COUNT(DISTINCT p.patient) AS asian_female_patients_taking_oxaliplatin FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE p.gender = 'F'   AND p.race = 'Asian'   AND m.DESCRIPTION = 'oxaliplatin 5 MG/ML [Eloxatin]';
SELECT COUNT(DISTINCT p.patient) AS living_patients_with_stroke FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE p.deathdate IS NULL AND c.DESCRIPTION = 'Stroke';
SELECT COUNT(*) AS total_asian_allergic_patients FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE p.race LIKE 'asian%' AND a.DESCRIPTION = 'Allergy to peanuts';
SELECT AVG(o.VALUE) AS average_diastolic_blood_pressure FROM patients p JOIN conditions c ON p.patient = c.PATIENT JOIN observations o ON p.patient = o.PATIENT WHERE c.DESCRIPTION = 'Hypertension' AND o.DESCRIPTION = 'Diastolic Blood Pressure';
SELECT m.DESCRIPTION FROM medications m JOIN patients p ON m.PATIENT = p.patient WHERE p.ssn = '999-94-3751';
SELECT p.ssn FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE p.gender = 'F'   AND p.ethnicity = 'irish'   AND a.DESCRIPTION = 'Allergy to grass pollen';
SELECT PATIENT FROM careplans WHERE CODE = '311791003';
SELECT c.DESCRIPTION FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE p.deathdate IS NOT NULL AND (strftime('%Y', p.deathdate) - strftime('%Y', p.birthdate)) = (     SELECT MAX(strftime('%Y', deathdate) - strftime('%Y', birthdate))     FROM patients     WHERE deathdate IS NOT NULL )
SELECT CODE FROM all_prevalences ORDER BY OCCURRENCES DESC LIMIT 1;
SELECT VALUE, UNITS FROM observations WHERE DESCRIPTION = 'Glucose' AND PATIENT IN (     SELECT patient     FROM patients     WHERE address = '365 Della Crossroad Suite 202 Deerfield MA 01342 US' );
SELECT DISTINCT p.ssn FROM patients p JOIN conditions c ON p.patient = c.PATIENT JOIN all_prevalences ap ON c.CODE = ap.ITEM WHERE ap.PREVALENCE PERCENTAGE < (0.3 * (SELECT AVG(PREVALENCE PERCENTAGE) FROM all_prevalences)) LIMIT 5;
SELECT     (COUNT(p.patient) FILTER (WHERE p.gender = 'F' AND p.race = 'Asian') * 100.0 / COUNT(p.patient)) AS percentage FROM     patients p JOIN     conditions c ON p.patient = c.PATIENT WHERE     c.DESCRIPTION = 'Acute bronchitis (disorder)';
SELECT COUNT(*) AS encounter_count FROM encounters WHERE PATIENT IN (     SELECT patient     FROM patients     WHERE first = 'Major' AND last = 'D\'Amore' );
SELECT p.DESCRIPTION FROM procedures p JOIN patients pt ON p.PATIENT = pt.patient WHERE pt.first = 'Emmy' AND pt.last = 'Waelchi';
SELECT CONCAT(p.first, ' ', p.last) AS full_name FROM patients p JOIN procedures pr ON p.patient = pr.PATIENT WHERE pr.DESCRIPTION = 'Extraction of wisdom tooth';
SELECT VALUE, UNITS FROM observations WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss') AND DESCRIPTION = 'Body Weight';
SELECT DISTINCT p.first, p.last FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE a.DESCRIPTION = 'Allergy to soya';
SELECT COUNT(*) FROM immunizations WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Keven' AND last = 'Kuhn') AND DESCRIPTION = 'DTaP';
SELECT p.first, p.last FROM medications m JOIN patients p ON m.PATIENT = p.patient WHERE m.DESCRIPTION = 'Clopidogrel 75 MG Oral Tablet' AND (strftime('%Y', m.STOP) - strftime('%Y', m.START)) > 10;
SELECT p.DESCRIPTION AS Procedure_Description FROM procedures p JOIN conditions c ON p.PATIENT = c.PATIENT WHERE c.DESCRIPTION = 'Third degree burn'  UNION  SELECT m.DESCRIPTION AS Medication_Description FROM medications m JOIN conditions c ON m.PATIENT = c.PATIENT WHERE c.DESCRIPTION = 'Third degree burn';
SELECT m.DESCRIPTION FROM medications m JOIN allergies a ON m.PATIENT = a.PATIENT WHERE a.DESCRIPTION = 'Allergy to mould' AND a.START <= '2016-06-06' AND (a.STOP IS NULL OR a.STOP >= '2016-06-06');
SELECT cp.DESCRIPTION FROM careplans cp JOIN conditions c ON cp.PATIENT = c.PATIENT WHERE c.DESCRIPTION = 'Secondary malignant neoplasm of colon';
SELECT PREVALENCE_RATE FROM all_prevalences WHERE ITEM IN (     SELECT DISTINCT DESCRIPTION     FROM conditions     WHERE START = '2014-05-09' );
SELECT     CONCAT(p.first, ' ', p.last) AS name,     CASE         WHEN p.deathdate IS NULL THEN strftime('%Y', 'now') - strftime('%Y', p.birthdate)         ELSE strftime('%Y', p.deathdate) - strftime('%Y', p.birthdate)     END AS age FROM     patients p JOIN     observations o ON p.patient = o.PATIENT WHERE     o.DESCRIPTION = 'Systolic Blood Pressure'     AND o.VALUE = 200     AND o.UNITS = 'mmHg'     AND o.DATE LIKE '2011%';
SELECT     (COUNT(CASE WHEN DESCRIPTION = 'Influenza seasonal injectable preservative free' THEN PATIENT END) * 100.0 / COUNT(PATIENT)) AS percentage,     COUNT(CASE WHEN DESCRIPTION = 'Influenza seasonal injectable preservative free' AND PATIENT IN (SELECT patient FROM patients WHERE ethnicity = 'english') THEN PATIENT END) AS english_patients FROM     immunizations WHERE     strftime('%Y', DATE) = '2017';
SELECT DISTINCT p.first FROM patients p JOIN encounters e ON p.patient = e.PATIENT WHERE e.REASONDESCRIPTION = 'Normal pregnancy';
SELECT p.birthdate FROM patients p JOIN careplans c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Outpatient Encounter';
SELECT DISTINCT p.first FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Cystitis';
SELECT COUNT(DISTINCT p.patient) AS stroke_married_count FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Stroke' AND p.marital = 'M';
SELECT DISTINCT p.address FROM patients p JOIN claims c ON p.patient = c.PATIENT WHERE c.BILLABLEPERIOD LIKE '2010%';
SELECT DISTINCT p.last FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE a.DESCRIPTION = 'Allergy to dairy product';
SELECT START FROM allergies WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Angelo' AND last = 'Buckridge');
SELECT COUNT(DISTINCT p.patient) AS male_allergic_patients FROM patients p JOIN allergies a ON p.patient = a.patient WHERE p.gender = 'M' AND a.description = 'House dust mite allergy';
SELECT DESCRIPTION, COUNT(*) AS allergy_count FROM allergies a JOIN patients p ON a.PATIENT = p.patient WHERE p.race = 'white' GROUP BY DESCRIPTION ORDER BY allergy_count DESC LIMIT 1;
SELECT DISTINCT p.first FROM patients p JOIN immunizations i ON p.patient = i.PATIENT WHERE i.DESCRIPTION = 'Influenza seasonal injectable preservative free';
SELECT COUNT(DISTINCT p.patient) AS female_patients FROM patients p JOIN immunizations i ON p.patient = i.patient WHERE p.gender = 'F' AND i.description = 'HPV quadrivalent';
SELECT e.DESCRIPTION FROM encounters e JOIN patients p ON e.PATIENT = p.patient WHERE p.birthplace = 'Pittsfield MA US';
SELECT COUNT(DISTINCT DESCRIPTION) FROM allergies WHERE PATIENT IN (SELECT patient FROM patients WHERE ethnicity = 'german');
SELECT AVG(YEAR(CURDATE()) - YEAR(birthdate)) AS average_age FROM patients WHERE patient IN (     SELECT PATIENT     FROM careplans     WHERE REASONDESCRIPTION = 'Prediabetes' );
SELECT COUNT(DISTINCT p.patient) AS alive_patients FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE m.REASONDESCRIPTION = 'Coronary Heart Disease' AND m.STOP IS NOT NULL AND p.deathdate IS NULL;
SELECT COUNT(DISTINCT p.patient) AS patient_count FROM patients p JOIN procedures pr ON p.patient = pr.PATIENT WHERE pr.DESCRIPTION = 'Bone immobilization' AND p.drivers IS NOT NULL;
SELECT CONCAT(p.first, ' ', p.last) AS full_name FROM patients p JOIN allergies a ON p.patient = a.PATIENT GROUP BY p.patient HAVING COUNT(DISTINCT a.DESCRIPTION) >= 3;
SELECT COUNT(DISTINCT p.patient) AS patient_count FROM patients p JOIN allergies a ON p.patient = a.PATIENT JOIN immunizations i ON p.patient = i.PATIENT WHERE a.DESCRIPTION = 'Allergy to eggs'    AND i.DESCRIPTION = 'Td (adult) preservative free';
SELECT COUNT(DISTINCT p.patient) AS patient_count FROM patients p JOIN observations o ON p.patient = o.PATIENT JOIN careplans c ON p.patient = c.PATIENT WHERE o.DESCRIPTION = 'Body Weight'    AND o.VALUE > 100    AND o.UNITS = 'kg'   AND c.DESCRIPTION = 'Diabetes self management plan';
SELECT gender, COUNT(*) AS allergy_count FROM patients JOIN allergies ON patients.patient = allergies.PATIENT WHERE allergies.DESCRIPTION = 'Dander (animal) allergy' GROUP BY gender ORDER BY allergy_count DESC LIMIT 1;
SELECT DISTINCT BILLABLEPERIOD FROM claims JOIN patients ON claims.PATIENT = patients.patient WHERE patients.last = 'Dickinson';
SELECT CONCAT(p.first, ' ', p.last) AS full_name FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Otitis media';
SELECT COUNT(DISTINCT p.patient) AS patient_count FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE p.ethnicity = 'Irish' AND m.REASONDESCRIPTION = 'Myocardial Infarction';
SELECT COUNT(DISTINCT p.patient) AS married_patients_with_careplan FROM patients p JOIN careplans c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Concussion with loss of consciousness' AND p.marital = 'M';
SELECT COUNT(DISTINCT cp.PATIENT) AS patient_count FROM careplans cp JOIN immunizations im ON cp.PATIENT = im.PATIENT WHERE im.DESCRIPTION = 'rotavirus monovalent' AND cp.STOP = '2013-11-23';
SELECT COUNT(DISTINCT p.patient) AS women_needing_nitroglycerin FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE p.gender = 'F' AND m.DESCRIPTION = 'Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual]';
SELECT      (COUNT(DISTINCT p.patient) FILTER (WHERE a.DESCRIPTION = 'Allergy to grass pollen') * 100.0 / COUNT(DISTINCT p.patient)) AS percentage FROM      patients p LEFT JOIN      allergies a ON p.patient = a.PATIENT WHERE      p.birthplace = 'Pembroke MA US';
SELECT AVG(observations.VALUE) AS average_body_weight FROM observations JOIN patients ON observations.PATIENT = patients.patient WHERE observations.DESCRIPTION = 'Body Weight'    AND observations.UNITS = 'kg'    AND patients.race = 'asian';
SELECT DISTINCT patients.ssn FROM patients JOIN allergies ON patients.patient = allergies.PATIENT WHERE allergies.DESCRIPTION = 'Latex allergy';
SELECT      SUBTRACT(allergies.STOP, allergies.START) AS allergy_duration,      allergies.DESCRIPTION AS allergy_type  FROM      allergies  JOIN      patients ON allergies.PATIENT = patients.patient  WHERE      patients.first = 'Isadora' AND patients.last = 'Moen';
SELECT COUNT(*)  FROM careplans  WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss')  AND START BETWEEN '2009-01-11' AND '2010-10-23';
SELECT DISTINCT p.patient, p.first, p.last FROM patients p JOIN careplans c ON p.patient = c.PATIENT WHERE YEAR(c.START) = 2009   AND p.marital = 'M'   AND DATEDIFF(c.STOP, c.START) > 60;
SELECT DATE  FROM immunizations  WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss')  AND DESCRIPTION = 'Influenza seasonal injectable preservative free';
SELECT COUNT(DISTINCT p.patient) AS black_immunized_count FROM patients p JOIN immunizations i ON p.patient = i.PATIENT WHERE p.race = 'black'   AND i.DESCRIPTION = 'meningococcal MCV4P'   AND i.DATE BETWEEN '2010-07-09' AND '2013-10-29';
SELECT immunizations.CODE, immunizations.DATE FROM immunizations JOIN patients ON immunizations.PATIENT = patients.patient WHERE patients.first = 'Jacquelyn' AND patients.last = 'Shanahan' AND immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free' AND YEAR(immunizations.DATE) IN (YEAR(CURDATE()) - 3, YEAR(CURDATE()) - 2, YEAR(CURDATE()) - 1, YEAR(CURDATE()));
SELECT      SUBTRACT(medications.STOP, medications.START) AS duration FROM      medications JOIN      patients ON medications.PATIENT = patients.patient WHERE      patients.first = 'Berry' AND      patients.last = 'Keebler' AND      medications.DESCRIPTION = 'Acetaminophen 160 MG' AND      medications.REASONDESCRIPTION = 'Acute bronchitis (disorder)';
SELECT COUNT(DISTINCT PATIENT) AS single_patients FROM medications WHERE substr(START, 1, 4) = '2010'    AND substr(STOP, 1, 4) = '2010'    AND DESCRIPTION = 'Nitrofurantoin 5 MG/ML [Furadantin]'    AND REASONDESCRIPTION = 'Cystitis';
SELECT REASONDESCRIPTION  FROM encounters  WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Lavelle' AND last = 'Vandervort')  AND DATE = '2013-11-20';
SELECT COUNT(DISTINCT encounters.PATIENT) AS german_outpatient_patients FROM encounters JOIN patients ON encounters.PATIENT = patients.patient WHERE encounters.DATE BETWEEN '2011-09-01' AND '2012-08-29' AND patients.ethnicity = 'german' AND encounters.DESCRIPTION = 'Outpatient Encounter';
SELECT patients.ssn, patients.address FROM patients JOIN encounters ON patients.patient = encounters.PATIENT WHERE encounters.REASONDESCRIPTION = 'Viral sinusitis (disorder)'  AND encounters.DATE = '2008-06-13';
SELECT      m.REASONDESCRIPTION AS reason,      m.DESCRIPTION AS drug_name,      (julianday(m.STOP) - julianday(m.START)) AS duration,     CASE          WHEN p.deathdate IS NULL THEN 'Alive'          ELSE 'Not Alive'      END AS patient_status FROM      medications m JOIN      encounters e ON m.ENCOUNTER = e.ID JOIN      patients p ON e.PATIENT = p.patient WHERE      e.ID = '23c293ec-dbae-4a22-896e-f12cf3c8bac3';
SELECT CONCAT(patients.first, ' ', patients.last) AS full_name FROM patients JOIN allergies ON patients.patient = allergies.PATIENT WHERE allergies.DESCRIPTION = 'Shellfish allergy' AND (julianday(patients.deathdate) - julianday(patients.birthdate)) / 365 < 12;
SELECT      julianday(medications.STOP) - julianday(medications.START) AS duration FROM      medications JOIN      patients ON medications.PATIENT = patients.patient WHERE      patients.first = 'Major' AND      patients.last = 'D\'Amore' AND      medications.DESCRIPTION = 'Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]';
SELECT COUNT(DISTINCT m.DESCRIPTION) AS medication_types FROM medications m JOIN patients p ON m.PATIENT = p.patient WHERE p.first = 'Major' AND p.last = 'D\'Amore' AND m.START >= (SELECT MIN(e.DATE) FROM encounters e WHERE e.PATIENT = p.patient);
SELECT DESCRIPTION, VALUE, UNITS FROM observations WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Bella' AND last = 'Rolfson');
SELECT DISTINCT p.first, p.last FROM patients p JOIN observations o ON p.patient = o.PATIENT WHERE o.DESCRIPTION = 'Calcium' AND o.VALUE < 8.6;
SELECT c.DESCRIPTION, COUNT(c.DESCRIPTION) AS condition_count FROM conditions c JOIN observations o ON c.PATIENT = o.PATIENT WHERE o.DESCRIPTION = 'Body Mass Index' AND o.VALUE < 18.5 GROUP BY c.DESCRIPTION ORDER BY condition_count DESC LIMIT 5;
SELECT COUNT(DISTINCT p.patient) AS mother_count FROM patients p JOIN encounters e ON p.patient = e.patient JOIN immunizations i ON e.id = i.encounter WHERE e.reasondescription = 'Normal pregnancy';
SELECT * FROM careplans WHERE PATIENT IN (     SELECT patient     FROM patients     WHERE first = 'Elly' AND last = 'Koss' ) AND substr(START, 1, 4) = '1970' AND substr(STOP, 1, 4) = '1970';
SELECT      CONCAT(p.first, ' ', p.last) AS full_name,     cp.DESCRIPTION AS care_plan,     pr.DESCRIPTION AS procedure,     m.DESCRIPTION AS medication FROM      patients p JOIN      encounters e ON p.patient = e.PATIENT LEFT JOIN      careplans cp ON e.ID = cp.ENCOUNTER LEFT JOIN      procedures pr ON e.ID = pr.ENCOUNTER LEFT JOIN      medications m ON e.ID = m.ENCOUNTER WHERE      e.ID = '6f2e3935-b203-493e-a9c0-f23e847b9798';
SELECT      SUM(CASE WHEN p.gender = 'M' THEN 1 ELSE 0 END) AS male_hypertension_count,     SUM(CASE WHEN p.gender = 'F' THEN 1 ELSE 0 END) AS female_hypertension_count FROM      patients p JOIN      conditions c ON p.patient = c.PATIENT WHERE      c.DESCRIPTION = 'Hypertension';
SELECT COUNT(DISTINCT p.patient) AS unmarried_women_checked_for_normal_pregnancy FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE p.marital = 'S'    AND p.gender = 'F'    AND c.DESCRIPTION = 'normal pregnancy';
SELECT      procedures.DESCRIPTION AS Procedure_Description,      medications.DESCRIPTION AS Medication_Description FROM      encounters JOIN      procedures ON encounters.ID = procedures.ENCOUNTER JOIN      medications ON encounters.ID = medications.ENCOUNTER WHERE      encounters.REASONDESCRIPTION = 'Drug overdose';
SELECT AVG(observations.VALUE) AS average_bmi FROM observations WHERE observations.DESCRIPTION = 'Body Mass Index' AND observations.PATIENT IN (     SELECT DISTINCT observations.PATIENT     FROM observations     WHERE observations.DESCRIPTION = 'Total Cholesterol'     AND observations.VALUE >= 200 );
SELECT      (SUM(CASE WHEN p.birthdate BETWEEN DATEADD(YEAR, -29, GETDATE()) AND DATEADD(YEAR, -20, GETDATE()) THEN o.VALUE ELSE 0 END) /      NULLIF(COUNT(CASE WHEN p.birthdate BETWEEN DATEADD(YEAR, -29, GETDATE()) AND DATEADD(YEAR, -20, GETDATE()) THEN o.PATIENT END), 0)) -          (SUM(CASE WHEN p.birthdate BETWEEN DATEADD(YEAR, -59, GETDATE()) AND DATEADD(YEAR, -50, GETDATE()) THEN o.VALUE ELSE 0 END) /      NULLIF(COUNT(CASE WHEN p.birthdate BETWEEN DATEADD(YEAR, -59, GETDATE()) AND DATEADD(YEAR, -50, GETDATE()) THEN o.PATIENT END), 0)) ) AS glucose_difference FROM patients p JOIN observations o ON p.patient = o.PATIENT;
SELECT      (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM patients WHERE (YEAR(conditions.START) - YEAR(patients.birthdate)) >= 60)) AS percentage FROM      conditions JOIN      patients ON conditions.PATIENT = patients.patient WHERE      (YEAR(conditions.START) - YEAR(patients.birthdate)) >= 60 GROUP BY      conditions.DESCRIPTION ORDER BY      COUNT(*) DESC LIMIT 1;
SELECT encounters.REASONDESCRIPTION  FROM encounters  JOIN patients ON encounters.PATIENT = patients.patient  WHERE patients.first = 'Walter' AND patients.last = 'Bahringer'  AND substr(encounters.DATE, 1, 7) = '2009-07';
SELECT      EXTRACT(YEAR FROM MIN(encounters.DATE) - patients.birthdate) AS age FROM      patients JOIN      encounters ON patients.patient = encounters.PATIENT WHERE      patients.first = 'Stacy' AND      patients.last = 'Morar' AND      encounters.REASONDESCRIPTION = 'Drug overdose';
SELECT DESCRIPTION, COUNT(*) AS ADMINISTRATION_COUNT FROM medications WHERE REASONDESCRIPTION = 'Child attention deficit disorder' GROUP BY DESCRIPTION ORDER BY ADMINISTRATION_COUNT DESC LIMIT 1;
SELECT CONCAT(p.first, ' ', p.last) AS full_name FROM patients p JOIN procedures pr ON p.patient = pr.PATIENT WHERE pr.DESCRIPTION = 'Transplant of lung (procedure)';
SELECT AVG(patient_count) AS average_patients FROM (     SELECT COUNT(DISTINCT procedures.PATIENT) AS patient_count,             COUNT(DISTINCT SUBSTR(procedures.DATE, 1, 4)) AS year_count     FROM procedures     WHERE procedures.DESCRIPTION = 'Combined chemotherapy and radiation therapy (procedure)'     GROUP BY SUBSTR(procedures.DATE, 1, 4) ) AS yearly_counts;
SELECT      careplans.START,      careplans.STOP,      careplans.DESCRIPTION,      JULIANDAY(careplans.STOP) - JULIANDAY(careplans.START) AS time_frame FROM      careplans JOIN      patients ON careplans.PATIENT = patients.patient WHERE      patients.first = 'Jacquelyn' AND      patients.last = 'Shanahan' ORDER BY      careplans.START DESC LIMIT 1;
SELECT      allergies.START,      allergies.STOP,      allergies.DESCRIPTION  FROM      allergies  JOIN      patients ON allergies.PATIENT = patients.patient  WHERE      patients.first = 'Isadora' AND      patients.last = 'Moen';
SELECT      EXTRACT(YEAR FROM AGE(MIN(encounters.DATE), patients.birthdate)) AS age FROM      patients JOIN      encounters ON patients.patient = encounters.PATIENT WHERE      patients.first = 'Laronda' AND patients.last = 'Bernier' GROUP BY      patients.birthdate;
SELECT conditions.DESCRIPTION FROM patients JOIN encounters ON patients.patient = encounters.PATIENT JOIN conditions ON encounters.ID = conditions.ENCOUNTER WHERE patients.first = 'Joye' AND patients.last = 'Homenick'  AND substr(conditions.START, 1, 4) = '2017';
SELECT MAX(immunizations.DATE) AS Most_Recent_Vaccine_Date FROM immunizations JOIN patients ON immunizations.PATIENT = patients.patient WHERE patients.first = 'Joye' AND patients.last = 'Homenick'  AND immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free';
SELECT      SUM(julianday(medications.stop) - julianday(medications.START)) AS duration FROM      medications JOIN      patients ON medications.PATIENT = patients.patient WHERE      patients.first = 'Elly' AND      patients.last = 'Koss' AND      medications.DESCRIPTION = 'Acetaminophen 160 MG';
SELECT COUNT(DISTINCT p.patient) AS patient_count, cp.DESCRIPTION AS care_plan FROM encounters e JOIN patients p ON e.PATIENT = p.patient JOIN careplans cp ON e.ID = cp.ENCOUNTER WHERE e.REASONDESCRIPTION = 'Second degree burn' GROUP BY cp.DESCRIPTION;
SELECT      (COUNT(CASE WHEN patients.gender = 'F' THEN 1 END) * 1.0 / COUNT(encounters.PATIENT)) * 100 AS female_percentage FROM      encounters JOIN      patients ON encounters.PATIENT = patients.patient WHERE      substr(encounters.DATE, 1, 4) = '2010'      AND encounters.REASONDESCRIPTION = 'Contact dermatitis';
SELECT      COUNT(encounters.ID) AS total_interactions,     (COUNT(CASE WHEN encounters.DESCRIPTION = 'Prenatal visit' THEN 1 END) * 100.0 / COUNT(encounters.ID)) AS prenatal_visit_percentage FROM      encounters JOIN      patients ON encounters.PATIENT = patients.patient WHERE      patients.first = 'Lorri' AND      patients.last = 'Simons' AND      SUBSTR(encounters.DATE, 1, 4) BETWEEN '2010' AND '2017';
SELECT medications.DESCRIPTION  FROM medications  JOIN patients ON medications.PATIENT = patients.patient  WHERE patients.first = 'Joe' AND patients.last = 'Homenick';
SELECT careplans.START  FROM careplans  JOIN patients ON careplans.PATIENT = patients.patient  WHERE patients.maiden = 'Adams';
SELECT MIN(careplans.START) AS Earliest_Careplan_Start FROM patients JOIN careplans ON patients.patient = careplans.PATIENT WHERE patients.gender = 'M';
SELECT      (COUNT(CASE WHEN c.ethnicity = 'hispanic' AND SUBSTR(cp.STOP, 1, 4) = '2011' THEN 1 END) * 100.0) /      COUNT(CASE WHEN c.ethnicity = 'hispanic' THEN 1 END) AS percentage_hispanic_stopped_careplan_2011 FROM      careplans cp JOIN      patients c ON cp.PATIENT = c.patient;
SELECT REASONDESCRIPTION  FROM careplans  WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Angelo' AND last = 'Buckridge');
SELECT careplans.DESCRIPTION  FROM careplans  JOIN patients ON careplans.PATIENT = patients.patient  WHERE patients.ethnicity = 'american';
SELECT encounters.ID  FROM encounters  JOIN patients ON encounters.PATIENT = patients.patient  WHERE patients.birthplace = 'Pembroke MA US';
SELECT careplans.START FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.deathdate IS NULL;
SELECT COUNT(DISTINCT p.patient) AS white_patient_count FROM patients p JOIN careplans c ON p.patient = c.PATIENT WHERE p.race = 'white' AND c.REASONCODE = '10509002';
SELECT CONCAT(p.first, ' ', p.last) AS full_name FROM patients p JOIN careplans c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Diabetic diet';
SELECT careplans.STOP FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.deathdate IS NOT NULL;
SELECT COUNT(DISTINCT p.patient) AS italian_patient_count FROM patients p JOIN careplans c ON p.patient = c.PATIENT WHERE p.ethnicity = 'italian' AND c.CODE = '304510005';
SELECT      (COUNT(patients.patient) * 100.0 / NULLIF(COUNT(careplans.ID), 0)) AS percentage FROM      patients JOIN      careplans ON patients.patient = careplans.PATIENT WHERE      patients.gender = 'F' AND      substr(careplans.START, 1, 4) = '2010';
SELECT COUNT(DISTINCT cp.PATIENT) AS black_patients_stopped_careplan FROM careplans cp JOIN patients p ON cp.PATIENT = p.patient WHERE p.race = 'black' AND SUBSTR(cp.STOP, 1, 4) = '2017';
SELECT COUNT(DISTINCT p.patient) AS male_prediabetes_count FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE p.gender = 'M' AND c.DESCRIPTION = 'Prediabetes';
SELECT CONCAT(p.first, ' ', p.last) AS full_name FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE a.DESCRIPTION = 'Allergy to nut';
SELECT c.START, c.STOP, c.CODE, c.DESCRIPTION FROM conditions c JOIN patients p ON c.PATIENT = p.patient WHERE p.first = 'Wilmer' AND p.last = 'Koepp';
SELECT gender, COUNT(gender) AS count FROM patients JOIN conditions ON patients.patient = conditions.PATIENT WHERE conditions.DESCRIPTION = 'Viral sinusitis (disorder)' GROUP BY gender ORDER BY count DESC LIMIT 1;
SELECT CONCAT(p.first, ' ', p.last) AS full_name FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE m.DESCRIPTION = 'Penicillin V Potassium 250 MG'  AND SUBSTR(m.START, 1, 4) >= '1948';
SELECT COUNT(DISTINCT p.patient) AS white_patients_with_stroke FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE p.race = 'white'    AND SUBSTR(p.birthdate, 1, 4) = '1935'    AND c.DESCRIPTION = 'Stroke';
SELECT c.DESCRIPTION FROM conditions c JOIN immunizations i ON c.PATIENT = i.PATIENT AND c.ENCOUNTER = i.ENCOUNTER WHERE i.DESCRIPTION = 'IPV';
SELECT DISTINCT e.PATIENT FROM encounters e JOIN all_prevalences a ON e.CODE = a.ITEM WHERE a.OCCURRENCES = (SELECT MAX(OCCURRENCES) FROM all_prevalences);
SELECT CONCAT(p.first, ' ', p.last) AS full_name FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Cystitis';
SELECT COUNT(DISTINCT p.patient) AS male_patients_immune_to_hpv FROM patients p JOIN immunizations i ON p.patient = i.PATIENT WHERE p.gender = 'M' AND i.DESCRIPTION = 'HPV quadrivalent';
SELECT START FROM careplans WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Walter' AND last = 'Bahringer');
SELECT * FROM careplans WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Major' AND last = 'D\'Amore');
SELECT      (COUNT(patients.patient) * 100.0 / NULLIF((SELECT COUNT(*) FROM patients), 0)) AS percentage FROM      patients JOIN      conditions ON patients.patient = conditions.PATIENT WHERE      patients.gender = 'M' AND conditions.DESCRIPTION = 'Viral sinusitis (disorder)';
SELECT      (COUNT(CASE WHEN p.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage FROM      patients p JOIN      medications m ON p.patient = m.PATIENT WHERE      m.DESCRIPTION = 'Penicillin V Potassium 250 MG';
SELECT AVG(observations.VALUE) AS average_body_height FROM patients JOIN observations ON patients.patient = observations.PATIENT WHERE patients.race = 'white' AND observations.DESCRIPTION = 'Body Height';
SELECT *  FROM careplans  WHERE PATIENT IN (     SELECT patient      FROM patients      WHERE address = '179 Sydni Roads Taunton MA 02780 US' );
SELECT a.DESCRIPTION  FROM allergies a  JOIN patients p ON a.PATIENT = p.patient  WHERE p.first = 'Dirk' AND p.last = 'Languish' AND p.ethnicity = 'Dominican';
SELECT COUNT(DISTINCT a.PATIENT) AS patient_count FROM allergies a JOIN conditions c ON a.PATIENT = c.PATIENT WHERE a.DESCRIPTION = 'Allergy to peanuts' AND c.DESCRIPTION = 'Asthma';
SELECT p.* FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE c.DESCRIPTION LIKE '%drug overdose%' AND CAST((julianday(c.START) - julianday(p.birthdate)) / 365 AS INTEGER) = 44;
SELECT p.ssn FROM patients p JOIN observations o ON p.patient = o.PATIENT WHERE o.DESCRIPTION = 'Systolic Blood Pressure' AND o.VALUE = (SELECT MAX(VALUE) FROM observations WHERE DESCRIPTION = 'Systolic Blood Pressure');
SELECT cp.DESCRIPTION FROM careplans cp JOIN all_prevalences ap ON cp.CODE = ap.ITEM WHERE ap.PREVALENCE_PERCENTAGE = (SELECT MAX(PREVALENCE_PERCENTAGE) FROM all_prevalences);
SELECT *  FROM careplans  WHERE PATIENT IN (SELECT patient FROM patients WHERE ssn = '999-15-3685');
SELECT AVG((julianday(COALESCE(patients.deathdate, datetime('now'))) - julianday(patients.birthdate)) / 365) AS average_age FROM patients JOIN conditions ON patients.patient = conditions.PATIENT WHERE patients.gender = 'M' AND conditions.DESCRIPTION = 'Hypertension';
SELECT DISTINCT p.first, p.last FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE m.REASONDESCRIPTION = 'Streptococcal sore throat (disorder)' LIMIT 5;
SELECT DISTINCT p.* FROM patients p JOIN observations o ON p.patient = o.PATIENT WHERE o.DESCRIPTION = 'Body Weight' AND o.VALUE = 61.97 AND o.UNITS = 'kg';
SELECT DISTINCT p.birthdate FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE p.gender = 'M' AND m.DESCRIPTION = 'Penicillin V Potassium 250 MG' LIMIT 5;
SELECT CONCAT(p.first, ' ', p.last) AS full_name FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE p.ethnicity = 'irish' AND c.CODE IN (     SELECT CODE     FROM all_prevalences     WHERE OCCURRENCES > (SELECT AVG(OCCURRENCES) * 0.96 FROM all_prevalences) );
SELECT      (SELECT COUNT(patients.patient)       FROM patients       JOIN conditions ON patients.patient = conditions.PATIENT       WHERE patients.marital = 'M' AND conditions.DESCRIPTION = 'Diabetes') -     (SELECT COUNT(patients.patient)       FROM patients       JOIN conditions ON patients.patient = conditions.PATIENT       WHERE patients.marital = 'S' AND conditions.DESCRIPTION = 'Diabetes') AS difference;
SELECT country, COUNT(*) AS customerCount FROM customers GROUP BY country;
SELECT p.productVendor,         SUM(od.quantityOrdered) AS totalOrders,         SUM((p.MSRP - p.buyPrice) * od.quantityOrdered) AS totalEstimatedEarnings FROM orderdetails od JOIN products p ON od.productCode = p.productCode GROUP BY p.productVendor ORDER BY totalOrders DESC LIMIT 1;
SELECT c.salesRepEmployeeNumber FROM customers c JOIN payments p ON c.customerNumber = p.customerNumber WHERE YEAR(p.paymentDate) = 2004 GROUP BY c.customerNumber ORDER BY SUM(p.amount) DESC LIMIT 1;
SELECT SUM(od.quantityOrdered * od.priceEach) AS totalPrice FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber WHERE c.customerName = 'Rovelli Gifts Distributors Ltd.' AND o.shippedDate BETWEEN '2003-01-01' AND '2003-12-31';
SELECT COUNT(*)  FROM employees  WHERE officeCode IN (SELECT officeCode FROM offices WHERE city = 'Sydney');
SELECT employeeNumber  FROM employees  WHERE officeCode IN (SELECT officeCode FROM offices WHERE city = 'New York')  AND reportsTo = 1143;
SELECT      AVG(total_amount) AS average_annual_payment,     MAX(total_amount) AS highest_annual_payment,     MIN(total_amount) AS lowest_annual_payment FROM (     SELECT          YEAR(paymentDate) AS payment_year,         SUM(amount) AS total_amount     FROM payments     WHERE paymentDate BETWEEN '2003-01-01' AND '2005-12-31'     GROUP BY payment_year ) AS annual_payments;
SELECT DISTINCT c.country,         CONCAT(c.addressLine1, ' ', c.addressLine2) AS fullAddress FROM payments p JOIN customers c ON p.customerNumber = c.customerNumber WHERE p.amount IN (     SELECT DISTINCT amount     FROM payments     ORDER BY amount DESC     LIMIT 5 );
SELECT COUNT(*) AS checksIssued FROM payments p JOIN customers c ON p.customerNumber = c.customerNumber WHERE c.customerName = 'Euro+ Shopping Channel' AND YEAR(p.paymentDate) = 2004;
SELECT p.productName, SUM(od.quantityOrdered) AS totalOrdered FROM products p JOIN orderdetails od ON p.productCode = od.productCode WHERE p.productLine = 'Classic Cars' AND p.productScale = '1:18' GROUP BY p.productName ORDER BY totalOrdered DESC LIMIT 1;
SELECT COUNT(*) AS customerCount FROM customers WHERE creditLimit <= 100000;  SELECT customerNumber, SUM(amount) AS totalPayment FROM payments WHERE YEAR(paymentDate) = 2004 GROUP BY customerNumber ORDER BY totalPayment DESC LIMIT 1;
SELECT c.customerName, CONCAT(c.contactFirstName, ' ', c.contactLastName) AS contactPerson, SUM(p.amount) AS totalPayments FROM customers c JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber JOIN payments p ON c.customerNumber = p.customerNumber WHERE e.officeCode IN (SELECT officeCode FROM offices WHERE city = 'Tokyo') AND e.reportsTo = 1056 GROUP BY c.customerNumber ORDER BY totalPayments DESC LIMIT 1;
SELECT      p.productCode,      p.productName,      (p.MSRP - p.buyPrice) AS expected_profit,      MAX(od.quantityOrdered * od.priceEach) AS total_price FROM      products p JOIN      orderdetails od ON p.productCode = od.productCode GROUP BY      p.productCode, p.productName ORDER BY      expected_profit DESC LIMIT 1  UNION ALL  SELECT      p.productCode,      p.productName,      (p.MSRP - p.buyPrice) AS expected_profit,      MAX(od.quantityOrdered * od.priceEach) AS total_price FROM      products p JOIN      orderdetails od ON p.productCode = od.productCode GROUP BY      p.productCode, p.productName ORDER BY      expected_profit ASC LIMIT 1;
SELECT COUNT(DISTINCT o.orderNumber) AS cancelled_orders FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber WHERE o.status = 'Cancelled' GROUP BY o.orderNumber HAVING SUM(od.quantityOrdered * od.priceEach) > 4000;
SELECT COUNT(DISTINCT orderNumber)  FROM orders  JOIN orderdetails ON orders.orderNumber = orderdetails.orderNumber  WHERE YEAR(orderDate) = '2003' AND quantityOrdered < 30;
SELECT SUM(od.quantityOrdered * od.priceEach) AS total_value FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber WHERE o.status = 'Cancelled';
SELECT SUM(od.quantityOrdered * od.priceEach) AS totalValue FROM orderdetails od JOIN products p ON od.productCode = p.productCode WHERE p.productLine = 'Motorcycles';
SELECT COUNT(*) AS PlaneOrdersCount FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE p.productLine = 'Planes';
SELECT COUNT(DISTINCT o.orderNumber) AS numberOfOrders FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE (p.MSRP - p.buyPrice) > 100;
SELECT AVG(totalPrice) AS averageTotalPrice FROM (     SELECT o.orderNumber, SUM(od.quantityOrdered * od.priceEach) AS totalPrice     FROM orders o     JOIN orderdetails od ON o.orderNumber = od.orderNumber     JOIN products p ON od.productCode = p.productCode     WHERE YEAR(o.orderDate) = 2005 AND p.productVendor = 'Exoto Designs'     GROUP BY o.orderNumber ) AS orderTotals;
SELECT COUNT(*)  FROM employees  WHERE officeCode = 1 AND jobTitle = 'Sales Rep';
SELECT DISTINCT c.customerName, p.amount FROM customers c JOIN payments p ON c.customerNumber = p.customerNumber WHERE p.amount > 50000;
SELECT SUM(p.amount) AS totalPayment FROM payments p JOIN customers c ON p.customerNumber = c.customerNumber WHERE c.country = 'USA';
SELECT SUM(p.amount) AS total_payments FROM payments p JOIN customers c ON p.customerNumber = c.customerNumber WHERE c.creditLimit = 0 AND YEAR(p.paymentDate) = 2003;
SELECT c.customerName, c.phone FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE o.status = 'Cancelled';
SELECT COUNT(DISTINCT c.customerNumber) AS FrenchCustomers FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE c.country = 'France' AND o.status = 'Cancelled' GROUP BY c.customerNumber HAVING COUNT(o.orderNumber) = 2;
SELECT AVG(totalPrice) AS averageTotalPrice FROM (     SELECT o.orderNumber, SUM(od.quantityOrdered * od.priceEach) AS totalPrice     FROM orders o     JOIN customers c ON o.customerNumber = c.customerNumber     JOIN orderdetails od ON o.orderNumber = od.orderNumber     WHERE c.country = 'Germany' AND o.status = 'Shipped'     GROUP BY o.orderNumber ) AS shippedOrders;
SELECT CONCAT(firstName, ' ', lastName) AS fullName FROM employees WHERE officeCode IN (     SELECT officeCode     FROM offices     WHERE city = 'Tokyo' );
SELECT CONCAT(firstName, ' ', lastName) AS fullName, email FROM employees WHERE jobTitle = 'Sales Rep' AND officeCode IN (     SELECT officeCode FROM offices WHERE city = 'Tokyo' );
SELECT e.email  FROM employees e  WHERE e.reportsTo = 1002 AND e.officeCode IN (     SELECT o.officeCode      FROM offices o      WHERE o.city = 'San Francisco' );
SELECT email, employeeNumber  FROM employees  WHERE officeCode IN (     SELECT officeCode      FROM offices      WHERE country = 'USA' AND state = 'MA' );
SELECT email  FROM employees  WHERE jobTitle = 'Sales Manager'  AND officeCode IN (SELECT officeCode FROM offices WHERE city = 'Sydney');
SELECT e.email, o.country FROM employees e JOIN offices o ON e.officeCode = o.officeCode JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE o.country = 'Australia' AND c.creditLimit < 200000;
SELECT e.email FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE c.country = 'UK' AND e.jobTitle = 'Sales Rep' ORDER BY c.creditLimit ASC LIMIT 10;
SELECT COUNT(*)  FROM customers  WHERE country = 'Australia' AND creditLimit < 220000;
SELECT customerNumber FROM payments GROUP BY customerNumber ORDER BY SUM(amount) DESC LIMIT 3;
SELECT email, employeeNumber  FROM employees  WHERE officeCode IN (SELECT officeCode FROM offices WHERE country = 'USA' AND state = 'CA');
SELECT CONCAT(firstName, ' ', lastName) AS fullName FROM employees WHERE officeCode IN (     SELECT officeCode     FROM offices     WHERE city = 'Boston' );
SELECT e.email FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE c.country = 'UK' AND e.jobTitle = 'Sales Rep' ORDER BY c.creditLimit DESC LIMIT 3;
SELECT COUNT(*)  FROM customers  WHERE country = 'Norway' AND creditLimit < 220000;
SELECT CONCAT(firstName, ' ', lastName) AS fullName, email  FROM employees  WHERE officeCode IN (SELECT officeCode FROM offices WHERE city = 'Paris');
SELECT productCode  FROM products  WHERE productLine = 'motorcycles'  ORDER BY quantityInStock DESC  LIMIT 5;
SELECT COUNT(*)  FROM customers  WHERE country = 'Germany' AND creditLimit = 0;
SELECT COUNT(DISTINCT customerNumber) AS customerCount FROM payments WHERE paymentDate BETWEEN '2003-01-01' AND '2004-12-31' GROUP BY customerNumber HAVING COUNT(customerNumber) > 3;
SELECT AVG(od.priceEach - p.buyPrice) AS average_actual_profit FROM orderdetails od JOIN products p ON od.productCode = p.productCode WHERE p.productName = '1937 Lincoln Berline';
SELECT p.productCode, p.productName, SUM(od.quantityOrdered) AS totalOrdered FROM products p JOIN productlines pl ON p.productLine = pl.productLine JOIN orderdetails od ON p.productCode = od.productCode JOIN orders o ON od.orderNumber = o.orderNumber JOIN customers c ON o.customerNumber = c.customerNumber WHERE pl.productLine = 'Motorcycles'    AND p.productScale = '1:10'    AND c.country = 'USA' GROUP BY p.productCode, p.productName ORDER BY totalOrdered DESC LIMIT 1;
SELECT p.checkNumber FROM payments p JOIN customers c ON p.customerNumber = c.customerNumber WHERE c.customerName = 'Mini Gifts Distributors Ltd.' AND p.paymentDate BETWEEN '2003-08-01' AND '2004-08-30';
SELECT      MAX(total_price) - AVG(total_price) AS price_exceed FROM (     SELECT          SUM(quantityOrdered * priceEach) AS total_price     FROM          orderdetails od     JOIN          products p ON od.productCode = p.productCode     WHERE          p.productLine = 'Planes'     GROUP BY          od.orderNumber ) AS total_prices;
SELECT SUM(od.quantityOrdered * od.priceEach) AS total_value FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE o.status = 'Shipped'   AND p.productLine = 'Vintage Cars'   AND YEAR(o.orderDate) BETWEEN 2003 AND 2004;
SELECT      CONCAT(e.firstName, ' ', e.lastName) AS salesAgent,     CONCAT(s.firstName, ' ', s.lastName) AS supervisor FROM      payments p JOIN      customers c ON p.customerNumber = c.customerNumber JOIN      employees e ON c.salesRepEmployeeNumber = e.employeeNumber JOIN      employees s ON e.reportsTo = s.employeeNumber WHERE      p.amount = (SELECT MAX(amount) FROM payments);
SELECT p.productName, MAX(od.quantityOrdered * od.priceEach) AS highestAmount FROM offices o JOIN employees e ON o.officeCode = e.officeCode JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber JOIN orders o2 ON c.customerNumber = o2.customerNumber JOIN orderdetails od ON o2.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE o.city = 'Boston' GROUP BY p.productName ORDER BY highestAmount DESC LIMIT 1;
SELECT SUM(od.priceEach - p.buyPrice) AS total_actual_profit FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE c.country = 'USA'  AND o.orderDate BETWEEN '2003-01-06' AND '2005-05-09';
SELECT o.addressLine1 + ' ' + o.addressLine2 AS fullAddress, o.phone FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber JOIN orders o ON c.customerNumber = o.customerNumber JOIN offices o ON e.officeCode = o.officeCode WHERE o.orderDate BETWEEN '2005-01-01' AND '2005-12-31' GROUP BY e.employeeNumber, o.officeCode, o.addressLine1, o.addressLine2, o.phone ORDER BY COUNT(o.orderNumber) DESC LIMIT 1;
SELECT phone  FROM customers  WHERE contactLastName LIKE 'M%' AND country <> 'Germany';
SELECT AVG(amount) AS average_payment FROM payments WHERE paymentDate >= '2004-01-01' AND paymentDate < '2004-07-01';
SELECT      (SUM(CASE WHEN customerNumber = 186 THEN 1 ELSE 0 END) / COUNT(orderNumber)) * 100 AS percentage FROM      orders WHERE      status = 'shipped'      AND YEAR(shippedDate) = 2005;
SELECT COUNT(DISTINCT c.customerNumber)  FROM customers c  JOIN orders o ON c.customerNumber = o.customerNumber  WHERE o.status = 'cancelled' AND c.creditLimit > 115000;
SELECT p.paymentDate FROM payments p JOIN customers c ON p.customerNumber = c.customerNumber WHERE c.creditLimit = (     SELECT MIN(creditLimit)     FROM customers     WHERE salesRepEmployeeNumber = (         SELECT employeeNumber         FROM employees         WHERE CONCAT(firstName, ' ', lastName) = 'Barry Jones'     ) );
SELECT e2.firstName, e2.lastName  FROM customers c  JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber  JOIN employees e2 ON e.reportsTo = e2.employeeNumber  WHERE c.country = 'France';
SELECT CONCAT(c.addressLine1, ' ', c.addressLine2) AS fullAddress FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE o.comments LIKE '%DHL%' AND o.shippedDate = '2005-04-04';
SELECT CONCAT(o.addressLine1, ', ', o.addressLine2) AS fullAddress FROM offices o JOIN employees e ON o.officeCode = e.officeCode JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE c.city = 'New York';
SELECT CONCAT(o.addressLine1, ' ', o.addressLine2) AS fullAddress FROM offices o JOIN employees e ON o.officeCode = e.officeCode WHERE e.jobTitle = 'Sales Rep' GROUP BY o.officeCode HAVING COUNT(e.employeeNumber) = 4;
SELECT SUM(MSRP - buyPrice) AS profit FROM products WHERE productVendor = 'Carousel DieCast Legends' AND productDescription = 'The perfect holiday or anniversary gift for executives';
SELECT c.customerNumber, AVG(p.amount) AS averagePayment FROM customers c JOIN payments p ON c.customerNumber = p.customerNumber WHERE c.city = 'Boston' GROUP BY c.customerNumber ORDER BY averagePayment DESC;
SELECT SUM(od.quantityOrdered) AS total_quantity_ordered, AVG(od.priceEach) AS average_price FROM orderdetails od JOIN products p ON od.productCode = p.productCode WHERE p.productName = '18th Century Vintage Horse Carriage';
SELECT COUNT(DISTINCT productCode) AS productCount FROM orderdetails WHERE orderNumber = 10252;
SELECT e.firstName, e.lastName FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber WHERE o.orderNumber IN (     SELECT orderNumber     FROM orders     WHERE orderNumber IN (         SELECT orderNumber         FROM orderdetails od         JOIN products p ON od.productCode = p.productCode         WHERE p.productDescription LIKE '%25 Maiden Lane, Floor No. 4%'     ) );
SELECT o.addressLine1, o.addressLine2, o.city, o.state, o.country, o.postalCode FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE e.firstName = 'Foon' AND e.lastName = 'Tseng';
SELECT      orderDate,      SUM(quantityOrdered * priceEach) AS totalValue FROM      orders  JOIN      orderdetails ON orders.orderNumber = orderdetails.orderNumber WHERE      orderDate IN ('2005-04-08', '2005-04-10') GROUP BY      orderDate ORDER BY      totalValue DESC LIMIT 1;
SELECT SUM(od.quantityOrdered) AS total_products_sold FROM orderdetails od JOIN products p ON od.productCode = p.productCode WHERE (p.MSRP - p.buyPrice) = (     SELECT MAX(MSRP - buyPrice) FROM products );
SELECT amount  FROM payments  WHERE customerNumber = (SELECT customerNumber FROM customers WHERE customerName = 'Petit Auto')  AND paymentDate = '2004-08-09';
SELECT customers.contactFirstName, customers.contactLastName  FROM payments  JOIN customers ON payments.customerNumber = customers.customerNumber  WHERE payments.checkNumber = 'NR157385';
SELECT CONCAT(c.contactFirstName, ' ', c.contactLastName) AS contactName FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE o.orderNumber = 10160;
SELECT CONCAT(c.addressLine1, ' ', c.addressLine2) AS address FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber WHERE o.orderNumber = 10383;
SELECT pl.textDescription  FROM productlines pl  JOIN products p ON pl.productLine = p.productLine  WHERE p.productCode = 'S18_2949';
SELECT e.email  FROM customers c  JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber  WHERE c.customerName = 'Dragon Souveniers, Ltd.';
SELECT COUNT(*)  FROM customers  WHERE country = 'France'  AND salesRepEmployeeNumber = (SELECT employeeNumber FROM employees WHERE firstName = 'Gerard' AND lastName = 'Hernandez');
SELECT p.productName FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE o.customerNumber = 114 ORDER BY o.orderDate DESC LIMIT 1;
SELECT (MSRP - priceEach) / MSRP AS discount FROM products JOIN orderdetails ON products.productCode = orderdetails.productCode WHERE products.productCode = 'S18_3482' AND orderdetails.orderNumber = 10108;
SELECT CONCAT(e.firstName, ' ', e.lastName) AS fullName FROM employees AS emp JOIN employees AS e ON emp.reportsTo = e.employeeNumber WHERE emp.firstName = 'Steve' AND emp.lastName = 'Patterson';
SELECT email, phone  FROM employees  WHERE jobTitle = 'President';
SELECT CONCAT(e.firstName, ' ', e.lastName) AS fullName FROM customers c JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber WHERE c.customerName = 'Muscle Machine Inc';
SELECT e.email  FROM employees e  JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber  WHERE c.customerName = 'Muscle Machine Inc'  AND e.employeeNumber = (SELECT reportsTo FROM employees WHERE employeeNumber = c.salesRepEmployeeNumber);
SELECT c.* FROM customers c JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber WHERE e.firstName = 'Steve' AND e.lastName = 'Patterson';
SELECT COUNT(DISTINCT c.customerNumber) AS customerCount FROM customers c JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber WHERE e.reportsTo = (SELECT employeeNumber FROM employees WHERE CONCAT(firstName, ' ', lastName) = 'William Patterson');
SELECT phone  FROM customers  WHERE salesRepEmployeeNumber = (SELECT employeeNumber FROM employees WHERE firstName = 'Leslie' AND lastName = 'Jennings')  ORDER BY creditLimit DESC  LIMIT 3;
SELECT COUNT(*)  FROM employees  WHERE jobTitle = 'Sales Rep' AND officeCode IN (     SELECT officeCode      FROM offices      WHERE country = 'USA' );
SELECT o.addressLine1, o.addressLine2  FROM offices o  JOIN employees e ON o.officeCode = e.officeCode  WHERE e.jobTitle = 'President';
SELECT o.postalCode  FROM offices o  JOIN employees e ON o.officeCode = e.officeCode  WHERE e.jobTitle = 'VP Sales';
SELECT SUM(od.quantityOrdered * od.priceEach) AS totalPrice FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber WHERE o.orderDate = '2003-03-03' AND c.customerName = 'Cruz & Sons Co.';
SELECT p.productName  FROM customers c  JOIN orders o ON c.customerNumber = o.customerNumber  JOIN orderdetails od ON o.orderNumber = od.orderNumber  JOIN products p ON od.productCode = p.productCode  WHERE c.customerName = 'Cruz & Sons Co.' AND o.orderDate = '2003-03-03';
SELECT p.productName FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE c.customerName = 'Cruz & Sons Co.' ORDER BY od.quantityOrdered DESC LIMIT 1;
SELECT o.shippedDate FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber WHERE c.customerName = 'Cruz & Sons Co.' AND o.orderDate = '2003-03-03';
SELECT COUNT(DISTINCT c.customerNumber) AS customerCount FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE p.productName = '1957 Chevy Pickup'  AND MONTH(o.orderDate) = :month  AND YEAR(o.orderDate) = :year;
SELECT productName  FROM products  WHERE productLine = 'Classic Cars'  ORDER BY (MSRP - buyPrice) DESC  LIMIT 1;
SELECT DISTINCT c.customerName FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE o.status = 'In Process';
SELECT      (COUNT(CASE WHEN DATEDIFF(shippedDate, requiredDate) < -3 THEN orderNumber END) * 100.0 / COUNT(orderNumber)) AS percentage FROM      orders WHERE      status = 'Shipped';
SELECT customerNumber FROM payments WHERE YEAR(paymentDate) = 2005 ORDER BY amount DESC LIMIT 1;
SELECT p.productName,         (p.MSRP - p.buyPrice) AS expectedProfitMargin FROM products p JOIN orderdetails od ON p.productCode = od.productCode GROUP BY p.productName ORDER BY SUM(od.quantityOrdered) DESC LIMIT 1;
SELECT c.customerName FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber GROUP BY o.orderNumber, c.customerName ORDER BY SUM(od.quantityOrdered * od.priceEach) DESC LIMIT 1;
SELECT DISTINCT c.customerName FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE o.status = 'Disputed';
SELECT      (COUNT(CASE WHEN o.city = 'Paris' THEN e.employeeNumber END) * 100.0 / COUNT(e.employeeNumber)) AS percentage FROM      employees e JOIN      offices o ON e.officeCode = o.officeCode;
SELECT e.firstName, e.lastName, o.city FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE e.jobTitle = 'Sales Manager' AND o.territory = 'EMEA';
SELECT e.firstName, e.lastName, e.reportsTo FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE o.country = 'Japan';
SELECT c.customerName FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE p.productName = '1939 Chevrolet Deluxe Coupe' ORDER BY od.priceEach DESC LIMIT 1;
SELECT      (SUM(CASE WHEN c.customerName = 'Atelier graphique' THEN p.amount ELSE 0 END) / SUM(p.amount)) * 100 AS percentage FROM      payments p JOIN      customers c ON p.customerNumber = c.customerNumber WHERE      YEAR(p.paymentDate) = 2004;
SELECT SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)) AS actual_profit FROM orderdetails od JOIN products p ON od.productCode = p.productCode WHERE od.orderNumber = 10100;
SELECT SUM(amount) AS totalPaid FROM payments WHERE customerNumber = 103;
SELECT SUM(quantityOrdered * priceEach) AS totalPrice FROM orderdetails WHERE orderNumber = 10100;
SELECT productName  FROM products  ORDER BY buyPrice DESC  LIMIT 3;
SELECT CONCAT(c.contactFirstName, ' ', c.contactLastName) AS contactFullName FROM customers c WHERE c.salesRepEmployeeNumber = 1370 ORDER BY c.creditLimit DESC LIMIT 1;
SELECT SUM(od.quantityOrdered) AS totalOrdered FROM orderdetails od JOIN products p ON od.productCode = p.productCode WHERE p.productName = '2003 Harley-Davidson Eagle Drag Bike';
SELECT shippedDate  FROM orders  JOIN orderdetails ON orders.orderNumber = orderdetails.orderNumber  WHERE priceEach = (SELECT MAX(priceEach) FROM orderdetails);
SELECT SUM(od.quantityOrdered) AS totalMotorcyclesOrdered FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE p.productLine = 'motorcycles' AND YEAR(o.orderDate) = 2004;
SELECT o.orderNumber  FROM orders o  JOIN customers c ON o.customerNumber = c.customerNumber  WHERE c.creditLimit = 45300;
SELECT c.customerName, MAX(od.quantityOrdered * (od.priceEach - p.buyPrice)) AS profit FROM orderdetails od JOIN orders o ON od.orderNumber = o.orderNumber JOIN customers c ON o.customerNumber = c.customerNumber JOIN products p ON od.productCode = p.productCode GROUP BY c.customerName ORDER BY profit DESC LIMIT 1;
SELECT YEAR(paymentDate) AS year, COUNT(*) AS transactionCount FROM payments WHERE amount < 10000 GROUP BY YEAR(paymentDate);
SELECT p.productName, SUM(od.quantityOrdered) AS totalQuantitySold FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE YEAR(o.orderDate) = 2003 GROUP BY p.productName ORDER BY totalQuantitySold DESC LIMIT 3;
SELECT e.firstName, e.lastName, SUM(od.quantityOrdered) AS quantitySold FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber JOIN orders o ON c.customerNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE p.productName = '1969 Harley Davidson Ultimate Chopper'  AND YEAR(o.orderDate) = 2003 GROUP BY e.employeeNumber, e.firstName, e.lastName;
SELECT CONCAT(e.firstName, ' ', e.lastName) AS fullName FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE o.city = 'NYC' AND e.jobTitle = 'Sales Rep';
SELECT c.customerName, c.country FROM customers c JOIN payments p ON c.customerNumber = p.customerNumber WHERE p.checkNumber = 'GG31455';
SELECT SUM(od.quantityOrdered) AS totalOrdered FROM orderdetails od JOIN products p ON od.productCode = p.productCode WHERE p.productName = '2001 Ferrari Enzo';
SELECT p.productName FROM products p JOIN orderdetails od ON p.productCode = od.productCode GROUP BY p.productName ORDER BY SUM(od.quantityOrdered) ASC LIMIT 5;
SELECT DISTINCT c.customerName FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE o.status = 'disputed';
SELECT COUNT(DISTINCT c.country)  FROM customers c  JOIN orders o ON c.customerNumber = o.customerNumber  WHERE c.country = 'USA' AND o.status = 'In Process';
SELECT SUM(od.quantityOrdered * od.priceEach) AS totalPrice FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE c.customerName = 'Land of Toys Inc.'   AND p.productLine = 'Classic Cars'   AND o.status = 'Shipped';
SELECT COUNT(*)  FROM generalinfo  WHERE review < 3;
SELECT DISTINCT food_type  FROM generalinfo  WHERE review = 4  ORDER BY id_restaurant  LIMIT 4;
SELECT COUNT(*)  FROM generalinfo  WHERE city = 'Richmond' AND food_type = 'mediterranean';
SELECT DISTINCT city FROM geographic WHERE county = 'Sonoma County';
SELECT DISTINCT county FROM geographic WHERE region != 'bay area';
SELECT DISTINCT city  FROM geographic  WHERE region = 'Northern California';
SELECT id_restaurant  FROM location  WHERE street_name = '11th Street' AND city = 'Oakland';
SELECT COUNT(*)  FROM location  WHERE street_num = 871;
SELECT street_num  FROM location  WHERE street_name = '9th Avenue' AND city = 'San Francisco';
SELECT DISTINCT gi.food_type  FROM generalinfo gi  JOIN location l ON gi.id_restaurant = l.id_restaurant  WHERE l.street_name = 'adeline st' AND l.city = 'berkeley';
SELECT DISTINCT g.region FROM geographic g LEFT JOIN generalinfo gi ON g.city = gi.city AND gi.food_type = 'african' WHERE gi.id_restaurant IS NULL;
SELECT DISTINCT g.county FROM geographic g JOIN generalinfo gi ON g.city = gi.city WHERE gi.label = 'a & w root beer';
SELECT street_num, street_name  FROM location  JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant  WHERE generalinfo.label = 'adelitas taqueria';
SELECT g.food_type  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  JOIN geographic geo ON l.city = geo.city  WHERE l.street_num = 3140  AND l.street_name = 'Alpine Road'  AND geo.county = 'San Mateo County';
SELECT DISTINCT l.street_name FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE l.city = 'San Francisco' AND g.food_type = 'seafood';
SELECT DISTINCT g.county FROM geographic g WHERE NOT EXISTS (     SELECT 1     FROM generalinfo gi     WHERE gi.city = g.city AND gi.label = 'bakers square restaurant & pie shop' );
SELECT COUNT(DISTINCT county)  FROM geographic  WHERE city IN (SELECT city FROM location WHERE street_name = 'Appian Way');
SELECT g.label, g.review FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE l.street_name = 'atlantic ave';
SELECT gi.id_restaurant  FROM generalinfo gi  JOIN geographic g ON gi.city = g.city  WHERE g.county = 'Contra Costa County';
SELECT g.label  FROM generalinfo g  JOIN geographic geo ON g.city = geo.city  WHERE geo.county = 'Yolo County';
SELECT g.label  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE l.street_name = 'Drive' AND l.city = 'San Rafael' AND g.food_type <> 'american';
SELECT l.street_name FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE l.city = 'San Francisco' AND g.review = 1.7;
SELECT g.label, MIN(g.review) AS worst_rating FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE l.street_name = 'Alameda de las Pulgas' AND l.city = 'Menlo Park' GROUP BY g.label ORDER BY worst_rating ASC LIMIT 1;
SELECT l.street_name  FROM location l  JOIN generalinfo g ON l.id_restaurant = g.id_restaurant  JOIN geographic geo ON g.city = geo.city  WHERE g.label = 'Good Heavens' AND geo.county = 'Tuolumne County';
SELECT street_num  FROM location  JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant  WHERE generalinfo.label = 'aux delices vietnamese restaurant';
SELECT gi.id_restaurant  FROM generalinfo gi  JOIN geographic g ON gi.city = g.city  WHERE g.county = 'Marin County';
SELECT DISTINCT g.region FROM geographic g WHERE NOT EXISTS (     SELECT 1     FROM generalinfo gi     WHERE gi.city = g.city AND gi.food_type = 'pizza' );
SELECT AVG(CAST(g.review AS FLOAT)) AS average_rating FROM generalinfo g JOIN geographic geo ON g.city = geo.city WHERE geo.county = 'Santa Cruz County';
SELECT (COUNT(CASE WHEN g.food_type = 'mexican' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM generalinfo g JOIN geographic geo ON g.city = geo.city WHERE geo.county = 'monterey county';
SELECT      (COUNT(CASE WHEN l.street_name = '11th Street' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      location l JOIN      geographic g ON l.city = g.city WHERE      g.county = 'Alameda County';
SELECT label  FROM generalinfo  WHERE food_type = 'european';
SELECT DISTINCT g.city  FROM geographic g  WHERE g.region = 'northern california';
SELECT label FROM generalinfo WHERE food_type = '24 hour diner';
SELECT DISTINCT city  FROM geographic  WHERE county = 'unknown' AND region = 'unknown'  LIMIT 5;
SELECT county, region FROM geographic WHERE city = 'Davis City';
SELECT street_name FROM location WHERE city = 'Clayton';
SELECT label  FROM generalinfo  WHERE city = 'San Francisco'  ORDER BY review DESC  LIMIT 1;
SELECT COUNT(*)  FROM generalinfo  WHERE food_type = 'american' AND city = 'Carmel' AND review = (SELECT MIN(review) FROM generalinfo WHERE food_type = 'american' AND city = 'Carmel');
SELECT (COUNT(g.id_restaurant) * 100.0 /          (SELECT COUNT(*) FROM generalinfo WHERE food_type = 'american food' AND city = 'dublin')) AS percentage FROM generalinfo g WHERE g.city = 'dublin';
SELECT CONCAT(l.street_num, ' ', l.street_name, ', ', l.city) AS full_address FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE g.label = 'Albert''s Café';
SELECT g.label  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE l.street_name = '19th St' AND l.city = 'Oakland';
SELECT DISTINCT gi.food_type  FROM generalinfo gi  JOIN location l ON gi.id_restaurant = l.id_restaurant  WHERE l.street_name = 'E 25th Ave' AND l.street_num = '106';
SELECT g.label  FROM generalinfo g  JOIN geographic geo ON g.city = geo.city  WHERE geo.region = 'unknown'  LIMIT 3;
SELECT g.label  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE g.food_type = 'chinese'  AND l.street_num = 104  AND l.street_name = 'san tomas aquino road'  AND l.city = 'campbell';
SELECT COUNT(*)  FROM generalinfo T1  JOIN location T2 ON T1.id_restaurant = T2.id_restaurant  WHERE T1.food_type = 'thai'  AND T2.street_name = 'san pablo ave'  AND T2.city = 'albany';
SELECT g.county, g.region  FROM geographic g  JOIN generalinfo gi ON g.city = gi.city  WHERE gi.label = 'plearn-thai cuisine';
SELECT g.label  FROM generalinfo g  JOIN geographic geo ON g.city = geo.city  WHERE geo.county = 'El Dorado County' AND geo.region = 'Lake Tahoe';
SELECT g.county, g.region FROM geographic g JOIN location l ON g.city = l.city WHERE l.street_name = 'E. El Camino Real';
SELECT g.label  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE g.food_type = 'Indian restaurant'  AND l.street_name = 'Shattuck Avenue'  AND l.city = 'Berkeley'  ORDER BY g.review ASC  LIMIT 1;
SELECT      (COUNT(CASE WHEN g.review > 4 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      geographic geo JOIN      generalinfo g ON geo.city = g.city WHERE      geo.region = 'Bay Area';
SELECT DISTINCT city FROM geographic WHERE county = 'San Mateo County';
SELECT COUNT(*)  FROM generalinfo  WHERE review > 4;
SELECT street_name FROM location GROUP BY street_name ORDER BY COUNT(id_restaurant) DESC LIMIT 1;
SELECT g.id_restaurant, g.label, MAX(g.review) AS highest_review FROM generalinfo g WHERE g.food_type = 'chicken' GROUP BY g.id_restaurant, g.label ORDER BY highest_review DESC LIMIT 1;
SELECT county FROM geographic WHERE city = 'el cerrito';
SELECT COUNT(*)  FROM location  WHERE street_name = 'irving';
SELECT gi.label  FROM generalinfo gi  JOIN geographic g ON gi.city = g.city  WHERE g.county = 'Marin';
SELECT l.street_num, l.street_name  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE g.label = 'peking duck restaurant';
SELECT l.street_name FROM location l JOIN geographic g ON l.city = g.city GROUP BY l.street_name HAVING g.county = 'Alameda' AND COUNT(l.id_restaurant) > 10;
SELECT DISTINCT g.region FROM geographic g JOIN generalinfo gi ON g.city = gi.city WHERE gi.food_type = 'greek';
SELECT l.street_num, l.street_name FROM location l JOIN geographic g ON l.city = g.city WHERE g.region = 'unknown';
SELECT g.review  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE l.street_num = 8440 AND l.street_name = 'murray ave';
SELECT food_type FROM generalinfo WHERE city IN (SELECT city FROM geographic WHERE county = 'Monterey') GROUP BY food_type ORDER BY COUNT(food_type) DESC LIMIT 1;
SELECT street_name FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.city = 'san francisco' AND g.food_type = 'burgers' GROUP BY street_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT g.region  FROM geographic g  JOIN location l ON g.city = l.city  WHERE l.street_num = 1149 AND l.street_name = 'El Camino Real';
SELECT g.county  FROM geographic g  JOIN generalinfo gi ON g.city = gi.city  WHERE gi.label = 'sankee';
SELECT COUNT(DISTINCT l.street_name) AS street_count FROM location l JOIN geographic g ON l.city = g.city WHERE g.region = 'Northern California';
SELECT g.label  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE l.street_name = 'Park St';
SELECT (COUNT(g.id_restaurant) * 100.0 / (SELECT COUNT(*) FROM generalinfo)) AS percentage FROM geographic geo JOIN generalinfo g ON geo.city = g.city WHERE geo.region = 'bay area';
SELECT g.county, AVG(gi.review) AS average_review FROM generalinfo gi JOIN geographic g ON gi.city = g.city WHERE gi.food_type = 'chinese' GROUP BY g.county ORDER BY average_review DESC;
SELECT street_name FROM location WHERE city = 'San Francisco';
SELECT id_restaurant FROM location WHERE city = 'Danville';
SELECT COUNT(DISTINCT city)  FROM geographic  WHERE region = 'bay area';
SELECT COUNT(DISTINCT g.label) AS unknown_count FROM generalinfo g JOIN geographic geo ON g.city = geo.city WHERE geo.county = 'unknown';
SELECT l.street_name  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE g.food_type = 'American';
SELECT DISTINCT gi.label  FROM generalinfo gi  JOIN geographic g ON gi.city = g.city  WHERE g.county = 'Santa Cruz county';
SELECT g.review  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE l.street_num = 430 AND l.street_name = 'Broadway';
SELECT l.street_num, l.street_name FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE g.review = (SELECT MAX(review) FROM generalinfo);
SELECT g.region AS country, COUNT(gi.id_restaurant) AS restaurant_count FROM generalinfo gi JOIN geographic g ON gi.city = g.city WHERE gi.food_type = 'Italian' GROUP BY g.region ORDER BY restaurant_count DESC LIMIT 1;
SELECT (COUNT(DISTINCT gi.id_restaurant) * 100.0 / (SELECT COUNT(DISTINCT id_restaurant) FROM generalinfo)) AS percentage FROM geographic g JOIN generalinfo gi ON g.city = gi.city WHERE g.region = 'Napa Valley';
SELECT COUNT(DISTINCT g.city)  FROM geographic g  WHERE g.region = 'bay area';
SELECT DISTINCT g.city  FROM geographic g  WHERE g.county = 'unknown';
SELECT DISTINCT g.city  FROM geographic g  WHERE g.region = 'bay area' AND g.county = 'santa clara county';
SELECT id_restaurant FROM location WHERE city = 'sunnyvale';
SELECT COUNT(*)  FROM location  WHERE street_num < 1000 AND street_name = 'railroad';
SELECT label  FROM generalinfo  WHERE food_type = '24 hour diner' AND city = 'san francisco';
SELECT g.review  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE l.street_name = 'ocean st' AND l.city = 'santa cruz';
SELECT l.street_num  FROM location l  JOIN generalinfo g ON l.id_restaurant = g.id_restaurant  WHERE g.food_type = 'bar' AND g.city = 'oakland' AND g.review = 2.7;
SELECT COUNT(*)  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE g.food_type = 'bakery'  AND l.street_name = 'University Avenue'  AND l.city = 'Palo Alto';
SELECT l.street_num  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE g.label = 'Tulocay Winery' AND g.food_type = 'winery';
SELECT g.review, g.label  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE l.street_name = 'mission blvd' AND l.city = 'hayward';
SELECT COUNT(*)  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE g.food_type = 'indian'  AND l.street_name = 'castro st'  AND l.city = 'mountainview'  AND g.label LIKE '%cookhouse%';
SELECT COUNT(*)  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE g.review = 2 AND l.street_num < 500;
SELECT COUNT(*)  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE g.food_type = 'asian'  AND l.street_name = 'n milpitas blvd'  AND l.city = 'milpitas'  AND g.id_restaurant > 385;
SELECT gi.label, gi.id_restaurant  FROM generalinfo gi  JOIN location l ON gi.id_restaurant = l.id_restaurant  WHERE l.street_name = 'Ocean Avenue' AND l.city = 'San Francisco';
SELECT CONCAT(l.street_num, ' ', l.street_name, ', ', l.city) AS full_address FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE g.label = 'Sanuki Restaurant';
SELECT gi.food_type  FROM generalinfo gi  JOIN location l ON gi.id_restaurant = l.id_restaurant  WHERE l.street_num = 22779 AND l.street_name = '6th St.' AND l.city = 'Hayward City';
SELECT COUNT(*)  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE g.food_type = 'american'  AND l.street_name = 'front'  AND l.city = 'san francisco';
SELECT gi.id_restaurant FROM generalinfo gi JOIN location l ON gi.id_restaurant = l.id_restaurant WHERE gi.food_type = 'american'   AND l.street_num > 2000   AND gi.review > (SELECT AVG(review) * 0.7 FROM generalinfo WHERE food_type = 'american');
SELECT      (COUNT(CASE WHEN gi.food_type = 'afghani' THEN 1 END) * 100.0 / COUNT(*)) AS afghani_percentage FROM      location l JOIN      generalinfo gi ON l.id_restaurant = gi.id_restaurant WHERE      l.street_num BETWEEN 1000 AND 2000;
SELECT label  FROM generalinfo  WHERE food_type = 'asian' AND city = 'san francisco'  ORDER BY review DESC  LIMIT 1;
SELECT COUNT(DISTINCT city)  FROM geographic  WHERE region = 'monterey';
SELECT COUNT(*)  FROM generalinfo  WHERE food_type = 'deli' AND city = 'belmont' AND review > 2;
SELECT county FROM geographic WHERE region = 'northern california' GROUP BY county ORDER BY COUNT(DISTINCT city) DESC LIMIT 1;
SELECT COUNT(*)  FROM generalinfo  WHERE city = 'concord';
SELECT g.region FROM generalinfo gi JOIN geographic g ON gi.city = g.city ORDER BY gi.review DESC LIMIT 4;
SELECT COUNT(*)  FROM generalinfo gi  JOIN location l ON gi.id_restaurant = l.id_restaurant  WHERE gi.food_type = 'chinese'  AND l.street_name = '1st st'  AND l.city = 'livermore';
SELECT COUNT(*)  FROM generalinfo g  JOIN geographic geo ON g.city = geo.city  WHERE g.food_type = 'indian' AND geo.region = 'los angeles area';
SELECT food_type FROM generalinfo g JOIN geographic geo ON g.city = geo.city WHERE geo.region = 'bay area' GROUP BY food_type ORDER BY COUNT(food_type) DESC LIMIT 1;
SELECT COUNT(*)  FROM generalinfo g  JOIN location l ON g.id_restaurant = l.id_restaurant  WHERE l.street_name = 'broadway' AND l.city = 'oakland' AND g.review < 3;
SELECT g.region FROM geographic g JOIN generalinfo gi ON g.city = gi.city WHERE gi.label = 'baskin robbins' GROUP BY g.region ORDER BY COUNT(gi.city) DESC LIMIT 1;
SELECT DISTINCT l.street_name FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.food_type = 'pizza' AND l.city = 'san jose';
SELECT COUNT(DISTINCT gi.food_type) AS restaurant_types FROM generalinfo gi JOIN geographic g ON gi.city = g.city WHERE g.region IN ('Yosemite', 'Mono Lake');
SELECT CONCAT(l.street_num, ' ', l.street_name, ', ', l.city) AS full_address FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE g.review = (SELECT MAX(review) FROM generalinfo);
SELECT g.county FROM geographic g JOIN location l ON g.city = l.city JOIN generalinfo gi ON l.id_restaurant = gi.id_restaurant WHERE gi.label = (     SELECT gi2.label     FROM generalinfo gi2     GROUP BY gi2.label     ORDER BY COUNT(gi2.city) DESC     LIMIT 1 );
SELECT g.region FROM geographic g JOIN generalinfo gi ON g.city = gi.city GROUP BY g.region ORDER BY COUNT(gi.id_restaurant) DESC LIMIT 1;
SELECT l.street_num, l.street_name, l.city FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE g.food_type = 'american' AND g.review >= 4;
SELECT COUNT(*)  FROM Player  WHERE SUBSTR(DOB, 1, 4) > '1985';
SELECT COUNT(*)  FROM Match  WHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 6, 2) = '05';
SELECT COUNT(*)  FROM Match  WHERE Man_of_the_Match = 41;
SELECT Match_Id  FROM Match  WHERE SUBSTR(Match_Date, 1, 4) = '2008';
SELECT COUNT(*) FROM Player WHERE Country_Name = 'Australia';
SELECT Country_Name  FROM Player  WHERE DOB = (SELECT MIN(DOB) FROM Player);
SELECT Bowling_skill  FROM Player  WHERE Player_Name = 'SC Ganguly';
SELECT COUNT(*)  FROM Player  WHERE Batting_hand = 'Right-hand bat' AND SUBSTR(DOB, 1, 4) > 1985;
SELECT Player_Name  FROM Player  WHERE Batting_hand = 'Right-hand bat' AND Country_Name = 'Australia';
SELECT Bowling_skill  FROM Player  WHERE Country_Name = 'Australia';
SELECT MIN(DOB) AS Oldest_Bowler_Birthdate FROM Player WHERE Bowling_skill = 'Legbreak';
SELECT Bowling_skill FROM Player GROUP BY Bowling_skill ORDER BY COUNT(Bowling_skill) DESC LIMIT 1;
SELECT Player_Name  FROM Player  JOIN Match ON Player_Match.Match_Id = Match.Match_Id  JOIN Player_Match ON Match.Match_Id = Player_Match.Match_Id  WHERE Match_Date = '2008-04-18' AND Player_Match.Role_Id = (SELECT Role_Id FROM Rolee WHERE Role_Desc = 'Man of the Match');
SELECT COUNT(*)  FROM Player_Match pm  JOIN Player p ON pm.Player_Id = p.Player_Id  JOIN Rolee r ON pm.Role_Id = r.Role_Id  WHERE p.Player_Name = 'SC Ganguly' AND r.Role_Desc = 'Captain';
SELECT r.Role_Desc  FROM Player_Match pm  JOIN Player p ON pm.Player_Id = p.Player_Id  JOIN Rolee r ON pm.Role_Id = r.Role_Id  JOIN Match m ON pm.Match_Id = m.Match_Id  WHERE p.Player_Name = 'SC Ganguly' AND m.Match_Date = '2008-04-18';
SELECT MAX(M.Win_Margin) AS Highest_Winning_Margin FROM Match M JOIN Player_Match PM ON M.Match_Id = PM.Match_Id JOIN Player P ON PM.Player_Id = P.Player_Id WHERE P.Player_Name = 'SC Ganguly';
SELECT AVG(Win_Margin) AS Average_Winning_Margin FROM Match WHERE Match_Id IN (     SELECT Match_Id     FROM Player_Match     WHERE Player_Id = (         SELECT Player_Id         FROM Player         WHERE Player_Name = 'SC Ganguly'     ) );
SELECT      (COUNT(CASE WHEN Batting_hand = 'Right-hand bat' THEN 1 END) * 100.0 / COUNT(Player_Id)) AS Right_Hand_Batting_Percentage FROM      Player WHERE      SUBSTR(DOB, 1, 4) > 1985;
SELECT Player_Name  FROM Player  WHERE DOB = (SELECT MAX(DOB) FROM Player);
SELECT COUNT(*)  FROM Match  WHERE Toss_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Sunrisers Hyderabad');
SELECT Striker  FROM Ball_by_Ball  WHERE Match_Id = 419169 AND Over_Id = 3 AND Ball_Id = 2 AND Innings_No = 2;
SELECT Venue_Name  FROM Venue  JOIN Match ON Venue.Venue_Id = Match.Venue_Id  WHERE Match.Win_Margin = 138;
SELECT Player_Name  FROM Player  JOIN Match ON Player_Match.Match_Id = Match.Match_Id  JOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id  WHERE Match.Match_Date = '2008-05-12' AND Match.Man_of_the_Match = Player.Player_Id;
SELECT p.Player_Name  FROM Player p  JOIN Player_Match pm ON p.Player_Id = pm.Player_Id  JOIN Rolee r ON pm.Role_Id = r.Role_Id  WHERE pm.Match_Id = '419117' AND r.Role_Desc = 'CaptainKeeper';
SELECT Man_of_the_Series  FROM Season  WHERE Season_Year = 2013;
SELECT DOB  FROM Player  WHERE Player_Id = (SELECT Orange_Cap                     FROM Season                     WHERE Season_Year = 2014 AND Orange_Cap IS NOT NULL);
SELECT Country_Name  FROM Player  WHERE Player_Id = (SELECT Purple_Cap                     FROM Season                     WHERE Season_Id = 7);
SELECT Country_Name  FROM Country  JOIN City ON Country.Country_Id = City.Country_id  WHERE City_Name = 'Ranchi';
SELECT COUNT(*)  FROM City  WHERE Country_id = (SELECT Country_Id FROM Country WHERE Country_Name = 'India');
SELECT City_Name  FROM City  JOIN Venue ON City.City_Id = Venue.City_Id  GROUP BY City_Name  ORDER BY COUNT(Venue.Venue_Id) DESC  LIMIT 1;
SELECT Batting_hand  FROM Player  WHERE Player_Name = 'MK Pandey';
SELECT      (SELECT COUNT(City_Id) FROM City WHERE Country_id = (SELECT Country_Id FROM Country WHERE Country_Name = 'India')) /     (SELECT COUNT(City_Id) FROM City WHERE Country_id = (SELECT Country_Id FROM Country WHERE Country_Name = 'South Africa')) AS Ratio;
SELECT      (SELECT COUNT(Match_Id) FROM Match WHERE Venue_Id = (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'M Chinnaswamy Stadium')) /      (SELECT COUNT(Match_Id) FROM Match WHERE Venue_Id = (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'Maharashtra Cricket Association Stadium')) AS Times_Hosted;
SELECT Player_Name  FROM Player  ORDER BY DOB ASC  LIMIT 1;
SELECT COUNT(*)  FROM Match  WHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 6, 2) = '05';
SELECT COUNT(*)  FROM Player  WHERE DOB >= '1990-01-01' AND DOB <= '1999-12-31';
SELECT COUNT(*)  FROM Match  WHERE (Team_1 = 10 OR Team_2 = 10)  AND SUBSTR(Match_Date, 1, 4) = '2012';
SELECT Player_Id FROM Season JOIN Player ON Player.Player_Name = Season.Orange_Cap GROUP BY Player_Id HAVING COUNT(Season_Year) > 1;
SELECT COUNT(*) AS Matches_Played FROM Match WHERE Season_Id = 7;
SELECT COUNT(*)  FROM Umpire  WHERE Umpire_Country = 'South Africa';
SELECT Player_Name FROM Player WHERE Player_Id = (     SELECT Player_Id     FROM Player_Match     GROUP BY Player_Id     ORDER BY COUNT(Role_Id) DESC     LIMIT 1 );
SELECT Country_Name FROM Player GROUP BY Country_Name ORDER BY COUNT(Country_Name) DESC LIMIT 1;
SELECT COUNT(*)  FROM Season  WHERE Man_of_the_Series = 'CH Gayle';
SELECT Season_Id FROM Match WHERE Venue_Id = (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'M Chinnaswamy Stadium') GROUP BY Season_Id ORDER BY COUNT(Match_Id) DESC LIMIT 1;
SELECT Team_Name FROM Match JOIN Team ON Match.Match_Winner = Team.Team_Id WHERE Season_Id = 1 GROUP BY Team_Name ORDER BY COUNT(Match_Winner) DESC LIMIT 1;
SELECT v.Venue_Name FROM Match m JOIN Venue v ON m.Venue_Id = v.Venue_Id WHERE m.Team_1 = 'Kolkata Knight Riders' GROUP BY v.Venue_Name ORDER BY COUNT(m.Match_Id) DESC LIMIT 1;
SELECT Team_Name, COUNT(*) AS Losses FROM Match JOIN Team ON Team.Team_Id IN (Team_1, Team_2) WHERE (Team_1 = Match_Winner AND Team_2 <> Match_Winner) OR (Team_2 = Match_Winner AND Team_1 <> Match_Winner) GROUP BY Team_Name ORDER BY Losses DESC LIMIT 1;
SELECT Player_Name  FROM Player  JOIN Match ON Player.Player_Id = Match.Man_of_the_Match  WHERE Match.Match_Date = (SELECT MIN(Match_Date) FROM Match);
SELECT MIN(Match_Date) AS First_Match_Date FROM Match WHERE Team_1 = 'Chennai Super Kings' OR Team_2 = 'Chennai Super Kings';
SELECT COUNT(*)  FROM Player  WHERE Batting_hand = 'Left-hand bat' AND Country_Name = 'India';
SELECT Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id JOIN Team t ON pm.Team_Id = t.Team_Id WHERE r.Role_Desc = 'Captain' AND t.Team_Name = 'Deccan Chargers' GROUP BY Player_Name ORDER BY COUNT(pm.Role_Id) DESC LIMIT 1;
SELECT (COUNT(CASE WHEN Batting_hand = 'Right-hand bat' THEN Player_Id END) * 100.0 / COUNT(Player_Id)) AS Right_Handed_Percentage FROM Player;
SELECT Player_Name FROM Player WHERE DOB = '1981-07-07';
SELECT COUNT(*) AS Matches_Played FROM Player_Match WHERE Player_Id = 2;
SELECT T1.Team_Name FROM Match M JOIN Team T1 ON M.Team_1 = T1.Team_Id WHERE M.Win_Margin = (SELECT MAX(Win_Margin) FROM Match);
SELECT Country_Name  FROM Country  JOIN City ON Country.Country_Id = City.Country_id  JOIN Venue ON City.City_Id = Venue.City_Id  WHERE Venue.Venue_Name = 'St George''s Park';
SELECT P.Player_Name  FROM Player P JOIN Player_Match PM ON P.Player_Id = PM.Player_Id WHERE PM.Team_Id = (SELECT Team_Id FROM Team WHERE Team_Name = 'Mumbai Indians') AND PM.Match_Id = 335990;
SELECT Team_Name  FROM Team  WHERE Team_Id = (     SELECT Match_Winner      FROM Match      WHERE Win_Margin = 7 AND Match_Date = '2009-05-07' );
SELECT COUNT(*) AS Superover_Match_Count FROM Match WHERE Outcome_type = 'Superover';
SELECT City_Name  FROM City  WHERE Country_id = (SELECT Country_Id FROM Country WHERE Country_Name = 'U.A.E');
SELECT COUNT(*) AS Total_Won_Matches FROM Match WHERE Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Pune Warriors');
SELECT Match_Winner  FROM Match  WHERE Match_Id = 829768 AND Match_Date LIKE '2015%';
SELECT r.Role_Desc  FROM Player_Match pm  JOIN Rolee r ON pm.Role_Id = r.Role_Id  JOIN Player p ON pm.Player_Id = p.Player_Id  WHERE p.Player_Name = 'K Goel' AND pm.Match_Id = 335992;
SELECT COUNT(*)  FROM City  WHERE Country_id = (SELECT Country_Id FROM Country WHERE Country_Name = 'South Africa');
SELECT COUNT(*)  FROM Match  WHERE Venue_Id IN (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'Newlands');
SELECT Win_Margin  FROM Match  WHERE (Team_1 = 'Mumbai Indians' AND Team_2 = 'Royal Challengers Bangalore' OR Team_1 = 'Royal Challengers Bangalore' AND Team_2 = 'Mumbai Indians')  AND Match_Date = '2008-05-28';
SELECT Team_1, Team_2 FROM Match WHERE Match_Date LIKE '2011%' AND Win_Margin < (SELECT AVG(Win_Margin) * 0.3 FROM Match WHERE Match_Date LIKE '2011%');
SELECT      (COUNT(CASE WHEN r.Role_Desc = 'Captain' THEN 1 END) * 100.0 / COUNT(*)) AS Captain_Percentage FROM      Player p JOIN      Player_Match pm ON p.Player_Id = pm.Player_Id JOIN      Rolee r ON pm.Role_Id = r.Role_Id WHERE      p.DOB LIKE '1977%';
SELECT COUNT(DISTINCT Over_Id) AS Total_Overs FROM Ball_by_Ball WHERE Match_Id = 335996 AND Innings_No = 1;
SELECT Over_Id, Ball_Id, Innings_No FROM Batsman_Scored WHERE Match_Id = 336004 AND Runs_Scored = (     SELECT MAX(Runs_Scored)     FROM Batsman_Scored     WHERE Match_Id = 336004 );
SELECT Match_Id  FROM Ball_by_Ball  WHERE Over_Id > 20  LIMIT 5;
SELECT COUNT(*)  FROM Wicket_Taken  WHERE Match_Id = 548335 AND Innings_No = 1;
SELECT Player_Name FROM Player WHERE DOB LIKE '1971%';
SELECT Match_Id FROM Match WHERE DATE(Match_Date) = '2015-04-18';
SELECT DISTINCT Match_Id  FROM Wicket_Taken  WHERE Kind_Out = (SELECT Out_Id FROM Out_Type WHERE Out_Name = 'hit wicket');
SELECT COUNT(*)  FROM Wicket_Taken  WHERE Kind_Out = (SELECT Out_Id FROM Out_Type WHERE Out_Name = 'stumped')  AND Innings_No = 2;
SELECT COUNT(*)  FROM Match  WHERE Man_of_the_Match = (SELECT Player_Id FROM Player WHERE Player_Name = 'Yuvraj Singh');
SELECT Player_Name, DOB  FROM Player  WHERE DOB LIKE '1977%' AND Country_Name = 'England';
SELECT Man_of_the_Series  FROM Season  WHERE Season_Year = 2010;
SELECT      (COUNT(CASE WHEN Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Chennai Super Kings') THEN 1 END) * 100.0 / COUNT(Match_Id)) AS Win_Rate FROM      Match;
SELECT p.Player_Name, p.Country_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Team t ON pm.Team_Id = t.Team_Id WHERE t.Team_Name = 'Gujarat Lions' AND m.Match_Date = '2016-04-11';
SELECT Player_Name, DOB  FROM Player  WHERE Bowling_skill = 'Left-arm fast';
SELECT Umpire_Country  FROM Umpire  WHERE Umpire_Name = 'BR Doctrove';
SELECT p.Player_Name  FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id WHERE m.Match_Date = '2008-06-01'  AND m.Match_Winner = pm.Team_Id  AND r.Role_Desc = 'Captain';
SELECT T.Team_Name, COUNT(PM.Match_Id) AS Matches_Played FROM Player P JOIN Player_Match PM ON P.Player_Id = PM.Player_Id JOIN Team T ON PM.Team_Id = T.Team_Id WHERE P.Player_Name = 'CK Kapugedera' GROUP BY T.Team_Name;
SELECT (COUNT(CASE WHEN v.Venue_Name = 'Wankhede Stadium' THEN m.Match_Id END) * 100.0 / COUNT(m.Match_Id)) AS Percentage FROM Match m JOIN Venue v ON m.Venue_Id = v.Venue_Id JOIN City c ON v.City_Id = c.City_Id WHERE c.City_Name = 'Mumbai';
SELECT      (COUNT(CASE WHEN o.Out_Name = 'bowled' THEN 1 END) * 100.0 / COUNT(w.Player_Out)) AS Percentage_Out_By_Bowl FROM      Wicket_Taken w JOIN      Out_Type o ON w.Kind_Out = o.Out_Id WHERE      w.Match_Id = 392187;
SELECT      (COUNT(CASE WHEN Toss_Name = 'field' THEN 1 END) * 100.0 / COUNT(*)) AS Percent_Bowl_First FROM      Match  JOIN      Toss_Decision ON Match.Toss_Decide = Toss_Decision.Toss_Id WHERE      Match_Date BETWEEN '2010-01-01' AND '2016-12-31';
SELECT Toss_Winner  FROM Match  WHERE Toss_Decide = 2;
SELECT Match_Id  FROM Match  WHERE Man_of_the_Match = 'BB McCullum';
SELECT p.DOB FROM Player p JOIN Match m ON p.Player_Id = m.Man_of_the_Match;
SELECT Team_Name  FROM Match  JOIN Team ON Match.Toss_Winner = Team.Team_Id  WHERE Match.Match_Id BETWEEN 336010 AND 336020;
SELECT COUNT(*) AS Matches_Won FROM Match WHERE Match_Winner = 'Mumbai Indians';
SELECT DISTINCT Team_2  FROM Match  WHERE Team_1 = 'Pune Warriors' OR Team_2 = 'Pune Warriors';
SELECT Team_Name  FROM Team  WHERE Team_Id = (SELECT Match_Winner FROM Match WHERE Match_Id = 336000);
SELECT Match_Id  FROM Match  WHERE Venue_Id IN (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'Brabourne Stadium');
SELECT Venue_Name  FROM Venue  WHERE Venue_Id IN (     SELECT Venue_Id      FROM Match      WHERE Season_Id = 2 );
SELECT City_Name  FROM City  JOIN Venue ON City.City_Id = Venue.City_Id  WHERE Venue.Venue_Name = 'M Chinnaswamy Stadium';
SELECT Venue_Name  FROM Venue  WHERE City_Id = (SELECT City_Id FROM City WHERE City_Name = 'Mumbai');
SELECT DISTINCT Match_Winner  FROM Match  JOIN Venue ON Match.Venue_Id = Venue.Venue_Id  WHERE Venue.Venue_Name LIKE 'St George%';
SELECT COUNT(*) > 0 AS IsSuperSportParkInCenturion FROM Venue v JOIN City c ON v.City_Id = c.City_Id WHERE v.Venue_Name = 'SuperSport Park' AND c.City_Name = 'Centurion';
SELECT COUNT(*) AS Total_Winning_Matches FROM Match WHERE Match_Winner = 'Deccan Chargers';
SELECT COUNT(*)  FROM Venue  WHERE City_Id = (SELECT City_Id FROM City WHERE City_Name = 'Pune');
SELECT Non_Striker, COUNT(*) AS Balls_Played FROM Ball_by_Ball WHERE Match_Id = 501219 GROUP BY Non_Striker ORDER BY Balls_Played DESC LIMIT 1;
SELECT      (SUM(Over_Id) / SUM(Runs_Scored)) * 100 AS average_percentage FROM      Batsman_Scored WHERE      Innings_No = 1 AND Over_Id > 1 AND Over_Id < 25;
SELECT AVG(Extra_Runs) AS Average_Extra_Runs FROM Extra_Runs WHERE Innings_No = 2 GROUP BY Match_Id;
SELECT      (COUNT(CASE WHEN Win_Margin > 100 THEN Match_Id END) * 100.0 / COUNT(Match_Id)) AS percentage FROM      Match;
SELECT Player_Name  FROM Player  WHERE DOB BETWEEN '1970-01-01' AND '1990-12-31'  ORDER BY DOB ASC;
SELECT COUNT(*) AS Wickets_Without_Fielders FROM Wicket_Taken WHERE Over_Id = 3 AND Fielders = '';
SELECT Umpire_Country, COUNT(Umpire_Id) AS Umpire_Count FROM Umpire GROUP BY Umpire_Country ORDER BY Umpire_Count DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN Role_Desc = 'CaptainKeeper' THEN Player_Id END) * 100.0 / COUNT(Player_Id)) AS percentage FROM      Player_Match  JOIN      Rolee ON Player_Match.Role_Id = Rolee.Role_Id;
SELECT COUNT(*)  FROM Wicket_Taken  WHERE Kind_Out = (SELECT Out_Id FROM Out_Type WHERE Out_Name = 'hit wicket');
SELECT Country_Name, AVG(Right_Hand_Batsmen) AS Average_Right_Hand_Batsmen FROM (     SELECT Country_Name, COUNT(Player_Id) AS Right_Hand_Batsmen     FROM Player     WHERE Batting_hand = 'Right-hand bat'     GROUP BY Country_Name ) AS RightHandCounts JOIN (     SELECT Country_Name, COUNT(DISTINCT Player_Id) AS Total_Players     FROM Player     GROUP BY Country_Name ) AS TotalCounts ON RightHandCounts.Country_Name = TotalCounts.Country_Name GROUP BY RightHandCounts.Country_Name;
SELECT      (SUM(CASE WHEN Bowling_skill = 'Legbreak' THEN 1 ELSE 0 END) * 100.0 / COUNT(Player_Id)) AS percentage FROM      Player;
SELECT COUNT(*) AS Teams_Won_By_Wicket FROM Match WHERE Win_Margin < 50 AND Win_Type = 'wickets';
SELECT COUNT(DISTINCT Venue_Id)  FROM Match  WHERE Toss_Winner = 'Team_2' AND Match_Winner = 'Team_1';
SELECT Player_Name, Country_Name  FROM Player  WHERE Player_Id = (SELECT Man_of_the_Series                     FROM Season                     WHERE Season_Year = 2012);
SELECT Venue_Name  FROM Venue  JOIN Match ON Venue.Venue_Id = Match.Venue_Id  GROUP BY Venue_Name  ORDER BY COUNT(Match.Match_Id) DESC  LIMIT 1;
SELECT c.City_Name FROM City c JOIN Venue v ON c.City_Id = v.City_Id JOIN Match m ON v.Venue_Id = m.Venue_Id WHERE m.Win_Type = 'NoResult' GROUP BY c.City_Name ORDER BY COUNT(m.Win_Type) ASC LIMIT 1;
SELECT Player_Name FROM Season s JOIN Player p ON s.Man_of_the_Series = p.Player_Id GROUP BY p.Player_Name HAVING COUNT(s.Man_of_the_Series) > 1;
SELECT Player_Name, Country_Name FROM Player JOIN Wicket_Taken ON Player.Player_Id = Wicket_Taken.Player_Out JOIN Out_Type ON Wicket_Taken.Kind_Out = Out_Type.Out_Id WHERE Out_Type.Out_Name = 'caught' GROUP BY Player.Player_Id, Player_Name, Country_Name HAVING COUNT(Wicket_Taken.Player_Out) > (SELECT AVG(Catch_Count) FROM (SELECT COUNT(Player_Out) AS Catch_Count FROM Wicket_Taken JOIN Out_Type ON Wicket_Taken.Kind_Out = Out_Type.Out_Id WHERE Out_Type.Out_Name = 'caught' GROUP BY Player_Out) AS AvgCatches) ORDER BY COUNT(Wicket_Taken.Player_Out) ASC;
SELECT      (COUNT(CASE WHEN M.Match_Winner = M.Team_1 AND M.Toss_Winner = M.Team_1 AND T.Toss_Name = 'field' THEN 1 END) * 100.0) /      COUNT(CASE WHEN M.Win_Type = 'runs' AND M.Match_Winner = M.Team_1 THEN 1 END) AS percentage FROM      Match M JOIN      Toss_Decision T ON M.Toss_Decide = T.Toss_Id WHERE      M.Win_Type = 'runs';
SELECT      AVG(CASE WHEN Out_Id = 4 THEN Player_Out END) -      AVG(CASE WHEN Out_Id = 3 THEN Player_Out END) AS Difference_Average_Outs FROM      Wicket_Taken;
SELECT DISTINCT Over_Id  FROM Ball_by_Ball  WHERE Striker = 7;
SELECT COUNT(*)  FROM Match  WHERE Toss_Winner = Team_1 AND Toss_Decide = 2;
SELECT COUNT(*)  FROM Match  WHERE Match_Date LIKE '2010-03%';
SELECT COUNT(*)  FROM Player  WHERE DOB < (SELECT DOB FROM Player WHERE Player_Name = 'Gurkeerat Singh');
SELECT COUNT(*)  FROM Match  WHERE Man_of_the_Match = 'SR Watson';
SELECT Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Team t ON pm.Team_Id = t.Team_Id WHERE t.Team_Name = 'Delhi Daredevils' GROUP BY p.Player_Id, p.Player_Name HAVING COUNT(pm.Role_Id) = (     SELECT MAX(role_count)     FROM (         SELECT COUNT(Role_Id) AS role_count         FROM Player_Match         WHERE Team_Id = (SELECT Team_Id FROM Team WHERE Team_Name = 'Delhi Daredevils')         GROUP BY Player_Id     ) AS role_counts );
SELECT Player_Name FROM Player JOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id JOIN Season ON Player_Match.Match_Id = Season.Season_Id WHERE Season.Man_of_the_Series IS NOT NULL GROUP BY Player_Name ORDER BY COUNT(Season.Man_of_the_Series) DESC LIMIT 1;
SELECT Season_Year  FROM Season  WHERE Orange_Cap = 'SP Narine';
SELECT DISTINCT t.Team_Name FROM Team t JOIN Player_Match pm1 ON t.Team_Id = pm1.Team_Id JOIN Season s1 ON pm1.Season_Id = s1.Season_Id JOIN Player p1 ON pm1.Player_Id = p1.Player_Id JOIN Season s2 ON s1.Season_Id = s2.Season_Id JOIN Player_Match pm2 ON t.Team_Id = pm2.Team_Id JOIN Player p2 ON pm2.Player_Id = p2.Player_Id WHERE s1.Purple_Cap = p1.Player_Name AND s2.Orange_Cap = p2.Player_Name;
SELECT Player_Name FROM Player WHERE Country_Name = 'Zimbabwea';
SELECT COUNT(*) AS Left_Hand_Batsmen FROM Player WHERE Batting_hand = 'Left-hand bat';
SELECT COUNT(*)  FROM Match  WHERE Win_Type != 'runs';
SELECT Umpire_Name  FROM Umpire  WHERE Umpire_Country = 'New Zealand';
SELECT Country_Name FROM Player WHERE Bowling_skill = 'Slow left-arm chinaman' GROUP BY Country_Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Venue_Id, COUNT(*) AS Match_Count FROM Match WHERE Team_1 = 'Kochi Tuskers Kerala' OR Team_2 = 'Kochi Tuskers Kerala' GROUP BY Venue_Id ORDER BY Match_Count DESC LIMIT 1;
SELECT COUNT(DISTINCT b.Match_Id) AS No_Runs_Scored_Games FROM Match m JOIN Ball_by_Ball b ON m.Match_Id = b.Match_Id JOIN Team t ON (m.Team_1 = t.Team_Id OR m.Team_2 = t.Team_Id) WHERE t.Team_Name = 'Delhi Daredevils' AND b.Runs_Scored = 0;
SELECT      (COUNT(CASE WHEN Win_Margin < 10 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      Match WHERE      Venue_Id = (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'Dr DY Patil Sports Academy');
SELECT AVG(Extra_Runs) AS Average_Noball_Runs FROM Extra_Runs WHERE Extra_Type_Id = (SELECT Extra_Id FROM Extra_Type WHERE Extra_Name = 'noballs');
SELECT Player_Id  FROM Player  ORDER BY Bowling_skill DESC  LIMIT 5;
SELECT COUNT(*)  FROM Player  WHERE DOB < '1975-10-16' AND Bowling_skill < 3;
SELECT Player_Name  FROM Player  WHERE DOB = (SELECT MAX(DOB) FROM Player);
SELECT Player_Id  FROM Season  JOIN Player ON Season.Man_of_the_Series = Player.Player_Name  WHERE Season_Year > 2011 AND Season_Year < 2015;
SELECT SUM(Runs_Scored) AS Total_Runs FROM Batsman_Scored WHERE Match_Id = 335988 AND Innings_No = 2;
SELECT COUNT(*)  FROM Batsman_Scored  WHERE Match_Id > 335989 AND Match_Id < 337000  AND Runs_Scored > 3  AND Over_Id = 1  AND Ball_Id = 1  AND Innings_No = 1;
SELECT Match_Id, Match_Date  FROM Match  WHERE Venue_Id = (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'Kingsmead')  AND Match_Date IN (     SELECT Match_Date      FROM Match      WHERE Venue_Id = (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'Kingsmead')      GROUP BY Match_Date      HAVING COUNT(*) >= 3 );
SELECT COUNT(*)  FROM Match  WHERE Venue_Id = (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'MA Chidambaram Stadium')  AND Match_Date BETWEEN '2009-05-09' AND '2011-08-08';
SELECT v.Venue_Name, c.City_Name FROM Match m JOIN Venue v ON m.Venue_Id = v.Venue_Id JOIN City c ON v.City_Id = c.City_Id WHERE m.Match_Id = '336005';
SELECT Toss_Winner, Toss_Decide  FROM Match  WHERE Match_Id = 336011;
SELECT COUNT(*)  FROM Player  WHERE Country_Name = 'South Africa' AND DOB < '1980-04-11';
SELECT Player_Name  FROM Player  WHERE Bowling_skill = 'Legbreak';
SELECT pm.Match_Id, m.Match_Date, pm.Role_Id FROM Player_Match pm JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Player p ON pm.Player_Id = p.Player_Id WHERE p.DOB = (SELECT MAX(DOB) FROM Player) GROUP BY pm.Match_Id, m.Match_Date, pm.Role_Id ORDER BY m.Match_Date LIMIT 1;
SELECT Match_Id  FROM Match  WHERE Man_of_the_Match = 'V Kohli';
SELECT COUNT(DISTINCT Player_Id) AS Australian_Man_of_the_Match FROM Player_Match pm JOIN Match m ON pm.Match_Id = m.Match_Id WHERE m.Match_Date BETWEEN '2011-01-01' AND '2012-12-31' AND pm.Role_Id = (SELECT Role_Id FROM Rolee WHERE Role_Desc = 'Man of the Match') AND pm.Team_Id IN (SELECT Team_Id FROM Team WHERE Team_Name = 'Australia');
SELECT DISTINCT p.Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Season s ON pm.Season_Id = s.Season_Id WHERE s.Man_of_the_Series = p.Player_Name AND s.Orange_Cap = p.Player_Name;
SELECT MIN(Match_Date) AS First_Win_Date FROM Match WHERE Match_Winner = 'Sunrisers Hyderabad';
SELECT Player_Name, Player_Id  FROM Player  WHERE Country_Name = 'England';
SELECT      SUM(BS.Runs_Scored) / 17.0 AS Run_Rate FROM      Batsman_Scored BS JOIN      Match M ON BS.Match_Id = M.Match_Id WHERE      M.Match_Id = 335987      AND M.Match_Date = '2008-04-18';
SELECT      (SUM(b.Runs_Scored) * 6.0 / 16) AS Run_Rate,     m.Man_of_the_Match FROM      Batsman_Scored b JOIN      Match m ON b.Match_Id = m.Match_Id WHERE      b.Match_Id = 335999      AND b.Innings_No = 1 GROUP BY      m.Man_of_the_Match;
SELECT Match_Winner AS Team_Id FROM Match GROUP BY Match_Winner ORDER BY COUNT(Match_Winner) DESC LIMIT 1;
SELECT YEAR(DOB) AS Birth_Year, COUNT(Player_Id) AS Player_Count FROM Player GROUP BY YEAR(DOB) ORDER BY Player_Count DESC LIMIT 1;
SELECT Match_Date  FROM Match  WHERE Win_Margin = (SELECT MAX(Win_Margin) FROM Match);
SELECT Season_Id FROM Match GROUP BY Season_Id ORDER BY COUNT(Match_Id) ASC LIMIT 1;
SELECT Player_Id, COUNT(Match_Id) AS Man_of_the_Match_Count FROM Player_Match WHERE Role_Id = (SELECT Role_Id FROM Rolee WHERE Role_Desc = 'Man of the Match') GROUP BY Player_Id HAVING COUNT(Match_Id) >= 5;
SELECT Player_Name  FROM Player  JOIN Match ON Player_Match.Match_Id = Match.Match_Id  JOIN Player_Match ON Match.Match_Id = Player_Match.Match_Id  WHERE Match.Season_Id = 9  AND Match.Man_of_the_Match = Player.Player_Id  AND Match.Match_Date = (SELECT MAX(Match_Date) FROM Match WHERE Season_Id = 9);
SELECT Match_Winner  FROM Match  WHERE Match_Date = (SELECT MIN(Match_Date) FROM Match);
SELECT COUNT(*)  FROM City  WHERE Country_id = (SELECT Country_Id FROM Country WHERE Country_Name = 'U.A.E');
SELECT Umpire_Name  FROM Umpire  WHERE Umpire_Country = 'England';
SELECT COUNT(*)  FROM Player  WHERE Bowling_skill = 'Legbreak';
SELECT COUNT(*)  FROM Match  WHERE (Team_1 = 'Rajasthan Royals' OR Team_2 = 'Rajasthan Royals')  AND Season_Id = 8;
SELECT Umpire_Country FROM Umpire WHERE Umpire_Name = 'TH Wijewardene';
SELECT Venue_Name  FROM Venue  WHERE City_Id IN (SELECT City_Id FROM City WHERE City_Name = 'Abu Dhabi');
SELECT Country_Name  FROM Player  WHERE DOB = (SELECT MAX(DOB) FROM Player);
SELECT p.Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id WHERE m.Season_Id = 1   AND m.Match_Date = (SELECT MIN(Match_Date) FROM Match WHERE Season_Id = 1)   AND m.Match_Winner = pm.Team_Id;
SELECT Player_Name  FROM Player  WHERE Player_Id IN (     SELECT Player_Id      FROM Player_Match      WHERE Match_Id IN (         SELECT Match_Id          FROM Season          WHERE Purple_Cap IS NOT NULL     ) )  ORDER BY DOB DESC  LIMIT 1;
SELECT v.Venue_Name, c.City_Name, co.Country_Name FROM Match m JOIN Venue v ON m.Venue_Id = v.Venue_Id JOIN City c ON v.City_Id = c.City_Id JOIN Country co ON c.Country_id = co.Country_Id WHERE m.Match_Date = (SELECT MAX(Match_Date) FROM Match);
SELECT Innings_No, COUNT(DISTINCT Over_Id) AS Total_Overs FROM Ball_by_Ball WHERE Match_Id = '336011' GROUP BY Innings_No;
SELECT Ball_Id, Runs_Scored, Innings_No  FROM Batsman_Scored  WHERE Match_Id = '335988' AND Over_Id = 20;
SELECT COUNT(*)  FROM Match  WHERE Match_Date LIKE '2011%';
SELECT SUBTRACT(2022, SUBSTR(DOB, 1, 4)) AS Age FROM Player WHERE Player_Name = 'Ishan Kishan';
SELECT      (COUNT(CASE WHEN Toss_Winner = Match_Winner THEN 1 END) * 1.0 / COUNT(*)) AS Win_Rate FROM      Match WHERE      Match_Date LIKE '2012%';
SELECT COUNT(*)  FROM Match  WHERE Match_Date LIKE '2009%' AND Win_Margin < 10;
SELECT P.Player_Name FROM Player P JOIN Player_Match PM ON P.Player_Id = PM.Player_Id JOIN Match M ON PM.Match_Id = M.Match_Id WHERE (M.Team_1 = PM.Team_Id OR M.Team_2 = PM.Team_Id) AND SUBSTR(M.Match_Date, 7, 1) = '6' AND SUBSTR(M.Match_Date, 1, 4) = '2014';
SELECT COUNT(*)  FROM Player_Match  WHERE Player_Id = (SELECT Player_Id FROM Player WHERE Player_Name = 'Mohammad Hafeez');
SELECT Player_Name  FROM Player  WHERE Country_Name = 'South Africa' AND DOB LIKE '1984%';
SELECT      (COUNT(CASE WHEN Match_Winner = Team_Id THEN 1 END) * 100.0 / COUNT(Match_Id)) AS Win_Percentage FROM      Match m JOIN      Team t ON m.Team_1 = t.Team_Id OR m.Team_2 = t.Team_Id WHERE      m.Match_Date LIKE '2009%' AND t.Team_Name = 'Mumbai Indians';
SELECT      (SELECT COUNT(*) FROM Player WHERE Batting_hand = 'Right-hand bat') * 1.0 /      (SELECT COUNT(*) FROM Player WHERE Batting_hand = 'Left-hand bat') AS Batting_Hand_Ratio;
SELECT Player_Name, Country_Name  FROM Player  WHERE DOB = (SELECT MIN(DOB) FROM Player);
SELECT DISTINCT Bowling_skill  FROM Player  WHERE Country_Name = 'Zimbabwea';
SELECT Umpire_Id, Umpire_Name  FROM Umpire  WHERE Umpire_Country = 'New Zealand';
SELECT P.Player_Name  FROM Player P JOIN Player_Match PM ON P.Player_Id = PM.Player_Id JOIN Rolee R ON PM.Role_Id = R.Role_Id JOIN Team T ON PM.Team_Id = T.Team_Id WHERE R.Role_Desc = 'CaptainKeeper' AND T.Team_Name = 'Rising Pune Supergiants';
SELECT COUNT(*)  FROM Match  WHERE Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Sunrisers Hyderabad')  AND Match_Date LIKE '2013%';
SELECT DISTINCT Extra_Runs.Match_Id FROM Extra_Runs JOIN Extra_Type ON Extra_Runs.Extra_Type_Id = Extra_Type.Extra_Id WHERE Extra_Type.Extra_Name = 'penalty';
SELECT Team_1, Team_2  FROM Match  WHERE Win_Type = 'Tie' AND SUBSTR(Match_Date, 1, 4) = '2015';
SELECT      AVG(total_outs) AS average_players_out,     SUM(CASE WHEN Out_Name = 'lbw' THEN 1 ELSE 0 END) AS lbw_outs FROM (     SELECT          Match_Id,          COUNT(*) AS total_outs     FROM          Wicket_Taken     WHERE          Innings_No = 1     GROUP BY          Match_Id ) AS first_innings_outs JOIN Out_Type ON Wicket_Taken.Kind_Out = Out_Type.Out_Id;
SELECT COUNT(*)  FROM Match  WHERE Match_Date LIKE '2008%';
SELECT COUNT(DISTINCT Match_Id) AS Total_Matches FROM Ball_by_Ball WHERE Innings_No = 2;
SELECT Country_Name  FROM Country  WHERE Country_Id = (SELECT Country_id FROM City WHERE City_Name = 'Rajkot');
SELECT COUNT(*) AS Superover_Matches FROM Match WHERE Win_Type = 'wickets';
SELECT Team_1, Team_2  FROM Match  WHERE Win_Margin = 38 AND Match_Date = '2009-04-30';
SELECT T.Team_Name  FROM Player P  JOIN Player_Match PM ON P.Player_Id = PM.Player_Id  JOIN Team T ON PM.Team_Id = T.Team_Id  WHERE P.Player_Name = 'T Kohli' AND PM.Match_Id = 335989;
SELECT COUNT(*)  FROM Venue v  JOIN City c ON v.City_Id = c.City_Id  JOIN Country co ON c.Country_Id = co.Country_Id  WHERE c.City_Name = 'Centurion' AND co.Country_Name = 'South Africa';
SELECT COUNT(*)  FROM Match  WHERE (Team_1 = 'Delhi Daredevils' OR Team_2 = 'Delhi Daredevils')  AND Match_Date LIKE '2014%'  AND Match_Winner = 'Delhi Daredevils';
SELECT Match_Id  FROM Match  WHERE (Team_1 = 'Royal Challengers Bangalore' OR Team_2 = 'Royal Challengers Bangalore')  ORDER BY Win_Margin DESC  LIMIT 1;
SELECT COUNT(*)  FROM Player_Match pm JOIN Player p ON pm.Player_Id = p.Player_Id WHERE p.Player_Name = 'K Goel' AND pm.Role_Id = 3;
SELECT AVG(Win_Margin) AS Average_Winning_Margin FROM Match JOIN Venue ON Match.Venue_Id = Venue.Venue_Id WHERE Venue.Venue_Name = 'Newlands';
SELECT Team_Name  FROM Team  WHERE Team_Id NOT IN (     SELECT Match_Winner      FROM Match      WHERE Match_Id = 336039 );
SELECT Venue_Name  FROM Venue  WHERE Venue_Id = (SELECT Venue_Id FROM Match WHERE Match_Id = 829768);
SELECT Team_2  FROM Match  WHERE Win_Margin = (SELECT MIN(Win_Margin) FROM Match);
SELECT      (COUNT(CASE WHEN Match_Winner = 'Mumbai Indians' THEN 1 END) * 100.0 / COUNT(*)) AS Winning_Percentage FROM      Match WHERE      Match_Date LIKE '2013%';
SELECT      (COUNT(CASE WHEN Role_Id = 1 THEN 1 END) - COUNT(CASE WHEN Role_Id > 1 THEN 1 END)) AS Match_Difference FROM      Player_Match  WHERE      Player_Id = (SELECT Player_Id FROM Player WHERE Player_Name = 'SC Ganguly');
SELECT COUNT(*)  FROM Player  WHERE Bowling_skill > 2;
SELECT COUNT(*)  FROM Player  WHERE DOB LIKE '1970%';
SELECT COUNT(*)  FROM Player  WHERE DOB LIKE '198%' AND Bowling_skill = 2;
SELECT COUNT(*)  FROM Match  WHERE Match_Date LIKE '2008-04%';
SELECT City_Name FROM City WHERE Country_id = 3;
SELECT COUNT(*) AS Victory_Matches FROM Match WHERE Match_Date LIKE '2008%' AND Outcome_type = 'Victory';
SELECT Country_id FROM City WHERE City_Name = 'East London';
SELECT SUBTRACT(2008, strftime('%Y', DOB)) AS Age FROM Player WHERE Player_Name = 'SC Ganguly';
SELECT Player_Name  FROM Player  WHERE Batting_hand = 'Left-hand bat';
SELECT COUNT(*) FROM Player WHERE Country_Name = 'India';
SELECT Player_Name FROM Player WHERE Country_Name = 'England';
SELECT Venue_Name  FROM Venue  WHERE City_Id = (SELECT City_Id FROM City WHERE City_Name = 'Bangalore');
SELECT DISTINCT Player_Name  FROM Player  JOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id  JOIN Match ON Player_Match.Match_Id = Match.Match_Id  WHERE Match.Season_Id IN (SELECT Season_Id FROM Season WHERE Season_Year = 2008);
SELECT DISTINCT p.Player_Name FROM Player p JOIN Batsman_Scored bs ON p.Player_Id = bs.Striker WHERE bs.Runs_Scored < 3;
SELECT r.Role_Desc  FROM Player p  JOIN Player_Match pm ON p.Player_Id = pm.Player_Id  JOIN Rolee r ON pm.Role_Id = r.Role_Id  WHERE p.Player_Name = 'SC Ganguly';
SELECT Player_Name  FROM Player  JOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id  JOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id  WHERE Rolee.Role_Desc = 'Keeper';
SELECT Player_Name  FROM Player_Match  JOIN Player ON Player_Match.Player_Id = Player.Player_Id  WHERE Player_Match.Team_Id = 1;
SELECT COUNT(DISTINCT pm.Player_Id) AS Captain_Count FROM Player_Match pm JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id WHERE r.Role_Desc = 'Captain' AND m.Match_Date LIKE '2008%';
SELECT T.Team_Name FROM Player P JOIN Player_Match PM ON P.Player_Id = PM.Player_Id JOIN Match M ON PM.Match_Id = M.Match_Id JOIN Season S ON M.Season_Id = S.Season_Id JOIN Team T ON PM.Team_Id = T.Team_Id WHERE P.Player_Name = 'SC Ganguly' AND S.Season_Year = 2008;
SELECT Win_Type  FROM Match  WHERE Match_Id = 336000;
SELECT Country_Name  FROM Player  WHERE Player_Name = 'SB Joshi';
SELECT COUNT(*)  FROM Player  WHERE Bowling_skill = 'Left-arm fast';
SELECT Outcome_Type  FROM Match  JOIN Outcome ON Match.Outcome_type = Outcome.Outcome_Id  WHERE Match_Id = 392195;
SELECT P.Player_Name, C.City_Name FROM Player P JOIN Country Co ON P.Country_Name = Co.Country_Name JOIN City C ON Co.Country_Id = C.Country_id WHERE P.DOB = (SELECT MIN(DOB) FROM Player);
SELECT COUNT(*)  FROM Match  WHERE Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Kings XI Punjab')  AND Season_Id = (SELECT Season_Id FROM Season WHERE Season_Year = 2008);
SELECT COUNT(DISTINCT Season_Id) AS Seasons_Participated FROM Match WHERE Team_1 = 'Pune Warriors' OR Team_2 = 'Pune Warriors';
SELECT P.DOB, R.Role_Desc FROM Player P JOIN Player_Match PM ON P.Player_Id = PM.Player_Id JOIN Rolee R ON PM.Role_Id = R.Role_Id WHERE P.Player_Name = 'R Dravid';
SELECT COUNT(*)  FROM Match  WHERE Man_of_the_Match = 'SC Ganguly';
SELECT COUNT(*)  FROM Match  WHERE Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Mumbai Indians')  AND Match_Date LIKE '2008%';
SELECT Match_Winner  FROM Match  WHERE Match_Id = 335993 AND Win_Type = 'wickets';
SELECT COUNT(*) AS Matches_Won_By_Wickets FROM Match WHERE Win_Type = 'wickets';
SELECT r.Role_Desc  FROM Player p  JOIN Player_Match pm ON p.Player_Id = pm.Player_Id  JOIN Rolee r ON pm.Role_Id = r.Role_Id  JOIN Match m ON pm.Match_Id = m.Match_Id  JOIN Season s ON m.Season_Id = s.Season_Id  WHERE p.Player_Name = 'W Jaffer' AND s.Season_Year = 2012;
SELECT Player_Name FROM Player_Match pm JOIN Match m ON pm.Match_Id = m.Match_Id WHERE m.Season_Id IN (SELECT Season_Id FROM Season WHERE Season_Year = 2008) AND pm.Role_Id = (SELECT Role_Id FROM Rolee WHERE Role_Desc = 'Man of the Match') GROUP BY Player_Name HAVING COUNT(pm.Player_Id) > 5;
SELECT      (COUNT(CASE WHEN Country_Name = 'India' AND strftime('%Y', DOB) BETWEEN '1975' AND '1985' THEN 1 END) * 1.0) / COUNT(Player_Id) AS Average_Indian_Players FROM      Player;
SELECT (COUNT(CASE WHEN Batting_hand = 'Left-hand bat' THEN 1 END) * 100.0) / COUNT(Player_Id) AS Left_Hand_Batting_Percentage FROM Player;
SELECT (COUNT(CASE WHEN Win_Type = 1 THEN 1 END) * 100.0 / COUNT(Win_Type)) AS Percentage_Won_By_Runs FROM Match;
SELECT COUNT(*) AS Matches_With_7_Points_Winning_Margin FROM Match WHERE Win_Margin = 7;
SELECT COUNT(*)  FROM Player  WHERE strftime('%Y', DOB) BETWEEN '1970' AND '1975';
SELECT Match_Winner  FROM Match  WHERE Match_Date = '2009-04-26' AND Win_Margin = 6;
SELECT Match_Winner  FROM Match  WHERE Match_Id = 419135 AND Win_Type = 'Runs';
SELECT Match_Id  FROM Match  WHERE Venue_Id = (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'St George''s Park')  ORDER BY Win_Margin DESC  LIMIT 1;
SELECT COUNT(*) FROM Player WHERE Country_Name = 'Sri Lanka';
SELECT Player_Name  FROM Player  JOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id  JOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id  WHERE Rolee.Role_Desc = 'captain';
SELECT v.Venue_Name, m.Match_Winner FROM Match m JOIN Venue v ON m.Venue_Id = v.Venue_Id WHERE m.Match_Id = 392194;
SELECT      (COUNT(CASE WHEN Win_Type = 'wickets' THEN 1 END) * 100.0 / COUNT(*)) AS Percentage_Won_By_Wickets FROM      Match WHERE      (Team_1 = 'Delhi Daredevils' OR Team_2 = 'Delhi Daredevils')      AND Match_Date LIKE '2009%';
SELECT groupName  FROM torrents  WHERE artist = 'Ron Hunt'    AND groupYear = 1979    AND releaseType = 'single'    AND totalSnatched = 239;
SELECT totalSnatched  FROM torrents  WHERE artist = 'blowfly' AND groupYear = 1980;
SELECT t.tag  FROM tags t  JOIN torrents tor ON t.id = tor.id  WHERE tor.releaseType = 'album'  AND tor.totalSnatched = (SELECT MAX(totalSnatched) FROM torrents WHERE releaseType = 'album');
SELECT t.tag, SUM(to.totalSnatched) AS totalDownloads FROM tags t JOIN torrents to ON t.id = to.id GROUP BY t.tag ORDER BY totalDownloads DESC LIMIT 5;
SELECT groupName  FROM torrents  WHERE releaseType = 'single'  AND groupId IN (SELECT id FROM tags WHERE tag = 'funk')  ORDER BY groupYear ASC  LIMIT 1;
SELECT t.groupName  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE t.releaseType = 'ep' AND tg.tag = 'alternative';
SELECT t.id, tg.tag FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.releaseType = 'live' ORDER BY t.totalSnatched ASC LIMIT 5;
SELECT t.artist, tg.tag FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.releaseType = 'single' AND t.totalSnatched = (SELECT MAX(totalSnatched) FROM torrents WHERE releaseType = 'single');
SELECT COUNT(DISTINCT t.id)  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE tg.tag = '1980s';
SELECT totalSnatched FROM torrents WHERE groupName = 'city funk';
SELECT groupName  FROM torrents  WHERE totalSnatched > 20000;
SELECT t.tag  FROM tags t  JOIN torrents r ON t.id = r.id  WHERE r.groupName = 'sugarhill gang';
SELECT COUNT(*)  FROM tags  WHERE id IN (SELECT id FROM torrents WHERE groupName = 'city funk');
SELECT t.groupName  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE tg.tag = '1980s';
SELECT t.groupName  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE tg.tag = '1980s'  ORDER BY t.totalSnatched DESC  LIMIT 1;
SELECT COUNT(*)  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE t.artist = 'michael jackson' AND tg.tag = 'pop';
SELECT COUNT(*)  FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.groupYear = 2000 AND t.releaseType = 'album' AND tg.tag = 'pop';
SELECT AVG(t.totalSnatched)  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE tg.tag = '1980s';
SELECT groupName  FROM torrents  ORDER BY totalSnatched DESC  LIMIT 3;
SELECT artist, groupName  FROM torrents  WHERE groupYear = 2012 AND releaseType = 'single'  ORDER BY totalSnatched DESC  LIMIT 1;
SELECT releaseType, COUNT(*) AS count FROM torrents WHERE artist = '50 cent' AND groupYear BETWEEN 2010 AND 2015 AND (releaseType = 'album' OR releaseType = 'single') GROUP BY releaseType;
SELECT MIN(groupYear) - 1991 AS years_passed FROM torrents WHERE artist = '2Pac' AND releaseType = 'album' AND groupYear > 1991;
SELECT AVG(totalSnatched) AS average_downloads FROM torrents WHERE artist = '2Pac' AND releaseType = 'single' AND groupYear BETWEEN 2001 AND 2013;
SELECT t.groupName AS title, t.groupYear AS release_year, tg.tag FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.releaseType = 'live album' AND t.totalSnatched = (     SELECT MAX(totalSnatched)     FROM torrents     WHERE releaseType = 'live album' );
SELECT artist  FROM torrents  WHERE releaseType = 'bootleg' AND groupYear = 2016  GROUP BY artist  HAVING COUNT(*) >= 2;
SELECT DISTINCT artist  FROM torrents  WHERE releaseType = 'single' AND groupYear BETWEEN 1980 AND 1982;
SELECT groupName  FROM torrents  WHERE id BETWEEN 10 AND 20 AND releaseType = 'single' AND totalSnatched >= 20;
SELECT DISTINCT artist  FROM torrents  JOIN tags ON torrents.id = tags.id  WHERE groupYear BETWEEN 1980 AND 1982 AND tag = 'disco';
SELECT DISTINCT t.artist  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE t.totalSnatched <= 100    AND t.groupYear = 1980    AND tg.tag = 'funk';
SELECT artist FROM torrents t JOIN tags tg ON t.id = tg.id WHERE tg.tag = 'soul' AND t.releaseType = 'single' GROUP BY artist ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT artist  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE tg.tag = 'funk' AND t.groupYear = 1980 AND t.id BETWEEN 10 AND 30;
SELECT groupName  FROM torrents  WHERE groupId IN (     SELECT id      FROM tags      WHERE tag = 'jazz' ) AND groupYear >= 1982  ORDER BY totalSnatched DESC  LIMIT 1;
SELECT t.artist, tg.tag  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE t.id = 16;
SELECT artist, MAX(totalSnatched) AS max_downloads FROM torrents WHERE id BETWEEN 10 AND 50 AND id IN (SELECT id FROM tags WHERE tag = 'new.york') GROUP BY artist ORDER BY max_downloads DESC LIMIT 1;
SELECT DISTINCT t.artist FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.releaseType IN ('album', 'mixtape')   AND t.groupYear BETWEEN 1980 AND 1985   AND tg.tag = 'dance';
SELECT COUNT(*)  FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.releaseType = 'single'    AND t.groupYear BETWEEN 1979 AND 1981    AND tg.tag = 'soul';
SELECT COUNT(*) FROM torrents WHERE releaseType = 'single' AND groupYear = 1979;
SELECT COUNT(*)  FROM torrents  WHERE artist = 'sugar daddy' AND releaseType = 'single' AND groupYear = 1980;
SELECT COUNT(*)  FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.releaseType = 'album' AND t.groupYear = 2004 AND tg.tag = 'christmas';
SELECT t.tag  FROM tags t  JOIN torrents tor ON t.id = tor.id  WHERE tor.artist = 'kurtis blow' AND tor.groupYear BETWEEN 2000 AND 2010;
SELECT t.groupName, tg.tag  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE t.artist = 'millie jackson' AND t.groupYear = 1980 AND t.releaseType = 'album';
SELECT t.groupName  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE tg.tag = 'jazz' AND t.groupYear = 2005;
SELECT artist, COUNT(t.id) AS disco_releases FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.groupYear BETWEEN 1980 AND 2000 AND tg.tag = 'disco' GROUP BY artist ORDER BY disco_releases DESC LIMIT 1;
SELECT DISTINCT artist  FROM torrents  JOIN tags ON torrents.id = tags.id  WHERE tags.tag = '1970s' AND torrents.releaseType = 'single';
SELECT      (COUNT(CASE WHEN t.releaseType = 'album' AND t.groupId IN (SELECT id FROM tags WHERE tag = 'united.states') THEN 1 END) * 100.0 /      COUNT(CASE WHEN t.releaseType = 'album' AND t.groupYear BETWEEN 1979 AND 1982 THEN 1 END)) AS percentage FROM      torrents t WHERE      t.groupYear BETWEEN 1979 AND 1982;
SELECT COUNT(*)  FROM Country  WHERE OtherGroups = 'HIPC' AND LendingCategory = 'IDA';
SELECT ShortName  FROM Country  WHERE LendingCategory = 'IDA'  AND ExternalDebtReportingStatus = 'Estimate';
SELECT s.ShortDefinition  FROM Series s  JOIN Country c ON c.CountryCode = 'ABW'  WHERE s.SeriesCode = 'SM.POP.TOTL' AND c.ShortName = 'Aruba';
SELECT c.ShortName, cn.Description FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE c.Region = 'Latin America & Caribbean' AND cn.Seriescode = 'SM.POP.TOTL';
SELECT COUNT(DISTINCT c.CountryCode)  FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE c.IncomeGroup = 'Low income'  AND cn.Seriescode = 'SM.POP.TOTL'  AND cn.Description IS NOT NULL;
SELECT s.Description FROM SeriesNotes s JOIN Indicators i ON s.Seriescode = i.IndicatorCode JOIN Country c ON i.CountryCode = c.CountryCode WHERE s.Seriescode = 'SM.POP.TOTL' AND c.LendingCategory = 'IDA';
SELECT COUNT(DISTINCT c.CountryCode) AS LowIncomeCountryCount FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE c.IncomeGroup = 'Low income'    AND c.LendingCategory = 'International Development Association'   AND cn.Seriescode = 'SM.POP.TOTL';
SELECT COUNT(DISTINCT c.CountryCode) AS CountryCount FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE c.IncomeGroup = 'High'   AND c.CurrencyUnit = 'Euro'   AND cn.Seriescode = 'SP.DYN.AMRT.FE'   AND cn.Description IS NOT NULL;
SELECT c.LongName  FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE cn.Description = 'Estimates are derived from data on foreign-born population.'  AND cn.Seriescode = 'SM.POP.TOTL';
SELECT f.Description  FROM Footnotes f  JOIN Country c ON f.Countrycode = c.CountryCode  WHERE f.Seriescode = 'AG.LND.FRST.K2'  AND f.Year = 1990  AND c.ShortName = 'Aruba';
SELECT F.Year FROM Footnotes F JOIN Country C ON F.Countrycode = C.CountryCode WHERE C.ShortName = 'Aruba' AND F.Seriescode = 'AG.LND.FRST.K2';
SELECT DISTINCT c.ShortName FROM Country c JOIN Footnotes f ON c.CountryCode = f.Countrycode WHERE f.Seriescode = 'DC.DAC.AUSL.CD'    AND f.Year = 2002    AND f.Description = 'Data are classified as official aid.';
SELECT COUNT(*)  FROM Footnotes  WHERE Countrycode = (SELECT CountryCode FROM Country WHERE ShortName = 'Aruba')  AND Year = 2002;
SELECT COUNT(DISTINCT Year) AS ConsecutiveYears FROM Footnotes WHERE Countrycode = (SELECT CountryCode FROM Country WHERE ShortName = 'Aruba')   AND Seriescode = 'BX.KLT.DINV.CD.WD' ORDER BY Year;
SELECT AVG(Value) AS AverageAdolescentFertilityRate FROM Indicators WHERE CountryCode = (SELECT CountryCode FROM Country WHERE Alpha2Code = '1A') AND IndicatorName LIKE 'adolescent fertility rate%'
SELECT c.SpecialNotes FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorName LIKE 'adolescent fertility rate%' GROUP BY c.CountryCode, c.SpecialNotes ORDER BY AVG(i.Value) DESC LIMIT 1;
SELECT Alpha2Code  FROM Country  WHERE Region = 'East Asia & Pacific'  AND IncomeGroup = 'High income: nonOECD';
SELECT c.LongName, c.Alpha2Code FROM Country c WHERE c.LatestTradeData = 2013 AND c.LatestWaterWithdrawalData = 2013;
SELECT AVG(Value) AS AverageValue FROM Indicators WHERE CountryName = 'Algeria'   AND IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)'   AND Year BETWEEN 1975 AND 1980;
SELECT IndicatorName, AggregationMethod FROM Series WHERE Topic = 'Economic Policy & Debt: Balance of payments: Capital & financial account';
SELECT s.SeriesCode, c.Alpha2Code FROM Series s JOIN Indicators i ON s.SeriesCode = i.IndicatorCode JOIN Country c ON i.CountryCode = c.CountryCode WHERE s.Topic = 'Environment: Emissions' AND s.LicenseType = 'restricted';
SELECT COUNT(DISTINCT CountryCode)  FROM Indicators  WHERE Year = 1970    AND CountryCode IN (SELECT CountryCode FROM Country WHERE Region = 'Middle East & North Africa')    AND IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)'    AND Value > 600;
SELECT      c.ShortName,      AVG(i.Value) AS AverageValue,      MAX(i.Value) AS HighestValue,      MAX(i.Year) AS YearOfHighestValue FROM      Country c JOIN      Indicators i ON c.CountryCode = i.CountryCode WHERE      c.Region IN ('Latin America', 'Caribbean')      AND i.IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)'      AND i.Year > 1965 GROUP BY      c.ShortName ORDER BY      AverageValue DESC LIMIT 3;
SELECT sn.Description FROM SeriesNotes sn JOIN Series s ON sn.Seriescode = s.SeriesCode WHERE s.SeriesCode = 'SP.DYN.TO65.MA.ZS'    AND s.Topic = 'Health: Mortality'    AND sn.Year = 'YR1967';
SELECT f.Description FROM Footnotes f JOIN Country c ON f.Countrycode = c.CountryCode WHERE c.ShortName = 'Albania' AND f.Year = 1981;
SELECT Description  FROM Footnotes  WHERE Countrycode = (SELECT CountryCode FROM Country WHERE ShortName = 'The Bahamas')  AND Seriescode = 'SH.DTH.IMRT'  AND Year = 1984;
SELECT c.ShortName FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'Net bilateral aid flows from DAC donors, Sweden (current US$)'   AND i.Year = 1970   AND i.Value = 570000;
SELECT c.Wb2Code, c.LendingCategory FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE cn.Description = 'Data source : Human Mortality Database by University of California, Berkeley, and Max Planck Institute for Demographic Research.';
SELECT s.Topic, s.SeriesCode, s.LicenseType FROM Indicators i JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE i.CountryName = 'Haiti'    AND i.IndicatorName = 'Total reserves minus gold (current US$)'    AND i.Year = 1961    AND i.Value = 3000000;
SELECT COUNT(DISTINCT c.CountryCode) AS CountryCount FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorName = 'Adjusted net national income per capita (constant 2005 US$)'   AND i.Value > 1000   AND c.ExternalDebtReportingStatus = 'Preliminary';
SELECT CountryName  FROM Indicators  WHERE Year = 1979  AND IndicatorName = 'Fertility rate, total (births per woman)'  AND Value BETWEEN 4 AND 5;
SELECT ShortName, SourceOfMostRecentIncomeAndExpenditureData FROM Country WHERE Region = 'South Asia' AND IncomeGroup = 'Low income';
SELECT DISTINCT s.Source FROM Indicators i JOIN Series s ON i.IndicatorName = s.IndicatorName JOIN Country c ON i.CountryCode = c.CountryCode WHERE c.Region = 'Latin America & Caribbean' AND s.IndicatorName = 'Out-of-school children of primary school age, both sexes (number)';
SELECT DISTINCT f.Description FROM Footnotes f JOIN Indicators i ON f.Countrycode = i.CountryCode AND f.Seriescode = i.IndicatorCode JOIN Country c ON i.CountryCode = c.CountryCode WHERE c.Region = 'South America' AND i.Year = 2002 AND i.IndicatorName = 'Net migration';
SELECT DISTINCT s.Source FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode JOIN Series s ON i.IndicatorName = s.IndicatorName WHERE c.Region = 'North America'  AND i.IndicatorName = 'Out-of-school children of primary school age, both sexes (number)';
SELECT i.CountryName, i.Value AS GDP_Growth FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE c.LatestTradeData = 2013   AND i.IndicatorName = 'GDP growth (annual %)'   AND i.Year = 2014 ORDER BY i.Value ASC;
SELECT c.ShortName, i.Value, s.Source FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode JOIN Series s ON i.IndicatorName = s.IndicatorName WHERE i.Year = 2005    AND s.IndicatorName = 'Out-of-pocket health expenditure (% of private expenditure on health)'   AND c.Region = 'Europe' ORDER BY i.Value DESC LIMIT 10;
SELECT COUNT(*)  FROM Country  WHERE Region = 'South Asia' AND IncomeGroup = 'Low income';
SELECT ShortName  FROM Country  WHERE LatestTradeData > 2010;
SELECT      (COUNT(CASE WHEN SystemOfTrade = 'Special trade system' THEN CountryCode END) * 100.0 / COUNT(CountryCode)) AS percentage FROM      Country WHERE      Region = 'Sub-Saharan Africa';
SELECT AVG(Value) AS AverageArmsImports FROM Indicators WHERE CountryCode IN (     SELECT CountryCode     FROM Country     WHERE Region = 'European & Central Asian' ) AND IndicatorName = 'Arms imports (SIPRI trend indicator values)';
SELECT Country.ShortName, MIN(Indicators.Value) AS LowestCO2Emissions FROM Indicators JOIN Country ON Indicators.CountryCode = Country.CountryCode WHERE Country.IncomeGroup = 'Upper middle income'  AND Indicators.IndicatorName = 'CO2 emissions (kt)' GROUP BY Country.ShortName ORDER BY LowestCO2Emissions ASC LIMIT 1;
SELECT MIN(Value)  FROM Indicators  WHERE IndicatorName = 'International migrant stock, total'  AND CountryCode IN (SELECT CountryCode FROM Country WHERE OtherGroups LIKE '%HIPC%');
SELECT IndicatorName  FROM Series  WHERE Topic = 'Education: Inputs'  AND SeriesCode IN (     SELECT SeriesCode      FROM Indicators      WHERE Year = 'YR2000' );
SELECT COUNT(*)  FROM Series  WHERE AggregationMethod = 'Sum'  AND Periodicity = 'Annual'  AND SeriesCode IN (     SELECT SeriesCode      FROM Indicators      WHERE Year IN ('YR2001', 'YR2002', 'YR2003') );
SELECT DISTINCT SeriesCode  FROM Series  WHERE Source LIKE '%International Monetary Fund%'  AND SeriesCode IN (     SELECT SeriesCode      FROM Footnotes      WHERE Year = 2005 );
SELECT      (COUNT(CASE WHEN Value > 50 THEN CountryCode END) * 100.0 / COUNT(CountryCode)) AS percentage FROM      Indicators WHERE      IndicatorName = 'Life expectancy at birth, female (years)'      AND CountryCode IN (SELECT CountryCode FROM Country WHERE Region = 'South Asia');
SELECT CountryName, MAX(Value) AS MaxDeathRate FROM Indicators WHERE IndicatorName = 'Death rate, crude (per 1,000 people)'  AND Year BETWEEN '1960' AND '1965' GROUP BY CountryName ORDER BY MaxDeathRate DESC LIMIT 1;
SELECT DISTINCT IndicatorName  FROM Indicators  WHERE CountryName = 'Arab World' AND Year = '1960' AND Value > 50;
SELECT CountryName, MAX(Value) AS HighestValue FROM Indicators WHERE IndicatorName = 'Merchandise imports by the reporting economy (current US$)' GROUP BY CountryName ORDER BY HighestValue DESC LIMIT 1;
SELECT DISTINCT i.IndicatorName FROM Indicators i JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE s.Periodicity = 'Annual' AND i.Year = '1965' AND i.Value > 100;
SELECT DISTINCT IndicatorName  FROM Indicators  WHERE Year BETWEEN '1968' AND '1970'  AND Value < 100  AND IndicatorCode IN (SELECT SeriesCode FROM Series WHERE LicenseType = 'open');
SELECT i.CountryName, s.IndicatorName FROM Indicators i JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE s.Topic = 'Private Sector & Trade: Exports' ORDER BY i.Value DESC LIMIT 1;
SELECT IndicatorName, MIN(Value) AS LowestValue FROM Indicators JOIN Series ON Indicators.IndicatorCode = Series.SeriesCode WHERE Series.AggregationMethod = 'Weighted average' GROUP BY IndicatorName ORDER BY LowestValue ASC LIMIT 1;
SELECT i.IndicatorName  FROM Indicators i  JOIN Country c ON i.CountryCode = c.CountryCode  JOIN Series s ON i.IndicatorCode = s.SeriesCode  WHERE c.ShortName = 'Sudan'  AND s.Periodicity = 'Annual'  AND i.Year = 1961;
SELECT CountryName, MIN(Value) AS LowestValue FROM Indicators WHERE IndicatorName = 'Health: Population: Structure'   AND Year BETWEEN 1960 AND 1965 GROUP BY CountryName ORDER BY LowestValue ASC LIMIT 1;
SELECT      (COUNT(CASE WHEN i.Value < 80 THEN i.CountryCode END) * 100.0 / COUNT(i.CountryCode)) AS Percentage FROM      Indicators i JOIN      Country c ON i.CountryCode = c.CountryCode WHERE      c.IncomeGroup = 'Upper middle income'      AND i.IndicatorName = 'CO2 emissions from liquid fuel consumption (% of total)';
SELECT IndicatorCode  FROM Indicators  WHERE IndicatorName = 'Rural population';
SELECT COUNT(*) AS CountryCount, TableName FROM Country WHERE SystemOfNationalAccounts = '2008' GROUP BY TableName;
SELECT SeriesCode  FROM Country  WHERE CurrencyUnit = 'Euro';
SELECT c.LongName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorCode = 'DT.DOD.DSTC.CD';
SELECT DISTINCT s.SeriesCode FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN Series s ON i.IndicatorName = s.IndicatorName WHERE c.CurrencyUnit = 'Hong Kong dollar';
SELECT DISTINCT c.TableName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorCode = 'SP.DYN.TO65.MA.ZS';
SELECT ShortName  FROM Country  WHERE IncomeGroup = 'Low income';
SELECT s.SeriesCode, c.CountryCode FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN Series s ON i.IndicatorName = s.IndicatorName WHERE c.Region = 'Latin America & Caribbean' AND c.IncomeGroup = 'Low income';
SELECT s.SeriesCode FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN Series s ON i.IndicatorName = s.IndicatorName WHERE c.CurrencyUnit = 'Australian dollar'  AND c.IncomeGroup = 'Low middle income';
SELECT ShortName, Region  FROM Country  WHERE IncomeGroup = 'Upper middle income'  AND NationalAccountsBaseYear = (SELECT MIN(NationalAccountsBaseYear) FROM Country);
SELECT CountryCode, ShortName  FROM Country  WHERE IncomeGroup = 'High income' AND CurrencyUnit = 'Euro';
SELECT c.TableName, c.CurrencyUnit FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorCode = 'FP.CPI.TOTL';
SELECT c.LongName, i.IndicatorCode FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE c.IncomeGroup = 'High income: nonOECD';
SELECT s.SeriesCode FROM Country c JOIN Series s ON c.CountryCode = s.SeriesCode WHERE c.CurrencyUnit = 'Pound Sterling' AND c.IncomeGroup = 'High income';
SELECT CountryCode, ShortName FROM Country LIMIT 10;
SELECT Alpha2Code  FROM Country  WHERE ShortName LIKE 'A%';
SELECT ShortName, TableName  FROM Country  WHERE CurrencyUnit = 'Euro';
SELECT LongName  FROM Country  WHERE SpecialNotes IS NULL;
SELECT ShortName  FROM Country  WHERE IncomeGroup = 'High income' AND Region = 'Asia';
SELECT LongName  FROM Country  WHERE NationalAccountsBaseYear < 1980;
SELECT c.CountryCode  FROM Country c  JOIN Indicators i ON c.CountryCode = i.CountryCode  WHERE c.IncomeGroup = 'Low income' AND i.SeriesCode = 'DT.DOD.DECT.CD';
SELECT TableName  FROM Country  WHERE CountryCode IN (     SELECT Countrycode      FROM CountryNotes      WHERE Description = 'Covers mainland Tanzania only' );
SELECT cn.Description, s.SeriesCode FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode JOIN Series s ON cn.Seriescode = s.SeriesCode WHERE c.ShortName = 'Benin' AND cn.Year = 'YR2005';
SELECT f.Description  FROM Footnotes f  JOIN Country c ON f.Countrycode = c.CountryCode  WHERE c.ShortName = 'Finland' AND f.Year = 'YR2000';
SELECT DISTINCT c.TableName, i.Year FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'Air transport, passengers carried';
SELECT c.LongName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.Year = '1980' AND i.IndicatorName IS NOT NULL;
SELECT c.CurrencyUnit, i.IndicatorCode  FROM Country c  JOIN Indicators i ON c.CountryCode = i.CountryCode  WHERE c.ShortName = 'Malaysia' AND i.Year = '1970';
SELECT DISTINCT c.CountryCode, c.Region FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.Value = (SELECT MAX(Value) FROM Indicators) LIMIT 5;
SELECT COUNT(DISTINCT c.CountryCode) AS CountryCount, c.CurrencyUnit FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE cn.Description = 'Sources: UN Energy Statistics (2014)' GROUP BY c.CurrencyUnit;
SELECT COUNT(*) AS FootnoteCount, c.TableName FROM Footnotes f JOIN Country c ON f.Countrycode = c.CountryCode WHERE f.Year = 'YR1980' GROUP BY c.TableName;
SELECT s.SeriesCode, c.Wb2Code FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode JOIN Series s ON cn.Seriescode = s.SeriesCode WHERE cn.Description = 'Data sources : Eurostat';
SELECT CountryName, MIN(Value) AS LowestFertilityRate FROM Indicators WHERE IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND CountryCode IN (     SELECT CountryCode     FROM Country     WHERE IncomeGroup = 'Low income' ) GROUP BY CountryName ORDER BY LowestFertilityRate LIMIT 1;
SELECT SUM(Value) AS TotalUrbanPopulation FROM Indicators WHERE IndicatorName = 'Urban population'   AND IncomeGroup = 'Middle income'   AND Year = 1960;
SELECT c.ShortName, c.CurrencyUnit FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'Adjusted net national income (annual % growth)'    AND i.Year = '1980' ORDER BY i.Value DESC LIMIT 1;
SELECT COUNT(*)  FROM Country  WHERE SystemOfNationalAccounts = '1993 System of National Accounts methodology.';
SELECT ShortName  FROM Country  WHERE VitalRegistrationComplete = 'Yes';
SELECT CountryName  FROM Country  WHERE LatestPopulationCensus BETWEEN '2010' AND '2012'  AND VitalRegistrationComplete = 'Yes';
SELECT CountryName  FROM Indicators  WHERE IndicatorName = 'CO2 emissions (metric tons per capita)'    AND Year = 1960  ORDER BY Value DESC  LIMIT 1;
WITH InfantDeaths AS (     SELECT CountryName, Value     FROM Indicators     WHERE IndicatorName = 'Number of infant deaths' AND Year = '1971' ), MaxInfantDeaths AS (     SELECT CountryName, Value AS MaxValue     FROM InfantDeaths     WHERE Value = (SELECT MAX(Value) FROM InfantDeaths) ), MinInfantDeaths AS (     SELECT CountryName, Value AS MinValue     FROM InfantDeaths     WHERE Value = (SELECT MIN(Value) FROM InfantDeaths) ) SELECT      MaxInfantDeaths.CountryName AS CountryWithMaxDeaths,     MaxInfantDeaths.MaxValue,     MinInfantDeaths.CountryName AS CountryWithMinDeaths,     MinInfantDeaths.MinValue,     (MaxInfantDeaths.MaxValue * 1.0 / MinInfantDeaths.MinValue) AS Ratio FROM      MaxInfantDeaths, MinInfantDeaths;
SELECT ShortName  FROM Country  WHERE CountryCode IN (     SELECT Countrycode      FROM Series      WHERE SeriesCode = 'SP.DYN.CBRT.IN' );
SELECT DISTINCT c.ShortName FROM Country c JOIN Footnotes f ON c.CountryCode = f.Countrycode WHERE f.Description = 'Data are classified as official aid.';
SELECT c.LongName  FROM Country c  JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode  WHERE cn.Description = 'Estimates are based on regression.';
SELECT c.LongName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE c.Region = 'East Asia & Pacific'   AND i.IndicatorName = 'Urban population'   AND i.Year = '1970'   AND i.Value > 2000000;
SELECT CountryName, MAX(Value) AS LargestPopulation FROM Indicators WHERE Year = '1960'    AND IndicatorName = 'Population, total'   AND CountryCode IN (       SELECT CountryCode        FROM Country        WHERE IncomeGroup = 'Upper middle income'   ) GROUP BY CountryName ORDER BY LargestPopulation DESC LIMIT 1;
SELECT COUNT(*)  FROM Country  WHERE SystemOfNationalAccounts = '1968 System of National Accounts methodology';
SELECT c.ShortName FROM Country c JOIN Series s ON s.SeriesCode = 'Migration' WHERE c.IncomeGroup = 'Upper middle income'  AND c.Region = 'East Asia & Pacific';
SELECT c.LongName FROM Country c JOIN Series s ON s.SeriesCode = c.CountryCode WHERE s.Topic = 'Poverty: Shared Prosperity';
SELECT c.TableName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorCode = 'SP.DYN.CDRT.IN'  AND c.LatestTradeData = '2013' ORDER BY i.Year DESC LIMIT 1;
SELECT c.LongName  FROM Country c  JOIN Indicators i ON c.CountryCode = i.CountryCode  WHERE c.Region = 'Sub-Saharan Africa' AND i.SeriesCode = 'SP.DYN.AMRT.FE';
SELECT CurrencyUnit, COUNT(ShortName) AS CountryCount FROM Country GROUP BY CurrencyUnit HAVING COUNT(ShortName) > 3;  SELECT ShortName FROM Country LIMIT 3;
SELECT LongName  FROM Country  WHERE Region = 'South Asia' AND IncomeGroup = 'Low income';
SELECT LongName  FROM Country  WHERE SystemOfTrade = 'Special trade system'  LIMIT 2;
SELECT CountryName, MAX(Value) AS MaxCO2EmissionsFromTransport FROM Indicators WHERE IndicatorName = 'CO2 emissions from transport (% of total fuel combustion)' GROUP BY CountryName ORDER BY MaxCO2EmissionsFromTransport DESC LIMIT 1;
SELECT CountryName  FROM Indicators  WHERE IndicatorName = 'Arable land (% of land area)'  ORDER BY Value ASC  LIMIT 1;
SELECT DISTINCT Topic  FROM Series  WHERE LicenseType = 'Restricted';
SELECT CountryCode  FROM Country  WHERE IncomeGroup = 'Upper middle income'  AND ExternalDebtReportingStatus = 'Preliminary';
SELECT      (COUNT(CASE WHEN ExternalDebtReportingStatus = 'Actual' THEN CountryCode END) * 100.0 / COUNT(CountryCode)) AS Percentage FROM      Country WHERE      Region = 'Middle East & North Africa';
SELECT GovernmentAccountingConcept, COUNT(*) AS CountryCount FROM Country WHERE ExternalDebtReportingStatus = 'Actual' AND GovernmentAccountingConcept IN ('Budgetary Central Government', 'Consolidated Central Government') GROUP BY GovernmentAccountingConcept ORDER BY CountryCount DESC;
SELECT COUNT(*)  FROM Country  WHERE Region = 'East Asia & Pacific'  AND ExternalDebtReportingStatus = 'Estimate';
SELECT (COUNT(CASE WHEN IncomeGroup = 'Lower middle income' THEN CountryCode END) * 100.0) / COUNT(CountryCode) AS Proportion FROM Country WHERE Region = 'Sub-Saharan Africa';
SELECT MAX(Value) AS MaxAgriculturalLandPercentage FROM Indicators WHERE CountryCode = (SELECT CountryCode FROM Country WHERE LongName = 'Republic of Benin')   AND IndicatorName = 'Agricultural land (% of land area)'   AND Year BETWEEN 1961 AND 1980;
SELECT DISTINCT c.LongName FROM Country c JOIN Series s ON s.SeriesCode = (SELECT SeriesCode FROM Series WHERE ShortDefinition = 'UN Energy Statistics') JOIN Footnotes f ON f.Seriescode = s.SeriesCode WHERE f.Year = 2014 AND f.Description IS NOT NULL LIMIT 3;
SELECT Value  FROM Indicators  WHERE CountryName = 'Commonwealth of Australia'    AND IndicatorName = 'Deposit interest rate (%)'    AND Year = '1979';
SELECT s.SeriesCode, cn.Description FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode JOIN Series s ON cn.Seriescode = s.SeriesCode WHERE c.ShortName = 'Germany';
SELECT s.Topic  FROM Series s  JOIN Indicators i ON s.SeriesCode = i.IndicatorCode  JOIN Country c ON i.CountryCode = c.CountryCode  WHERE c.ShortName = 'Austria';
SELECT s.Topic, sn.Description FROM Series s JOIN SeriesNotes sn ON s.SeriesCode = sn.Seriescode WHERE s.SeriesCode = 'SP.DYN.AMRT.MA';
SELECT COUNT(DISTINCT c.LongName) AS CountryCount,         c.LongName  FROM Country c JOIN Footnotes f ON c.CountryCode = f.Countrycode WHERE f.Description = 'Not specified' LIMIT 3;
SELECT c.ShortName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE c.ExternalDebtReportingStatus = 'Actual'   AND i.Year = 1980   AND i.IndicatorName = 'Land under cereal production'   AND i.Value = 3018500;
SELECT (COUNT(CASE WHEN Value > 50 THEN CountryName END) * 100.0 / COUNT(CountryName)) AS Portion FROM Indicators WHERE Year = '1961'  AND CountryCode IN (SELECT CountryCode FROM Country WHERE Region = 'Latin America & Caribbean') AND IndicatorName = 'Agricultural land (% of land area)';
SELECT LongName  FROM Country  WHERE Region = 'South Asia' AND IncomeGroup = 'Low income';
SELECT IndicatorCode  FROM Indicators  WHERE CountryName = 'Brazil' AND IndicatorName = 'Mobile cellular subscriptions';
SELECT LongName  FROM Country  WHERE Region = 'Europe & Central Asia' AND CurrencyUnit = 'Danish krone';
SELECT CountryName, Value AS RuralPopulationPercentage FROM Indicators WHERE IndicatorName = 'Rural population (% of total population)' ORDER BY Value DESC LIMIT 1;
SELECT LongName  FROM Country  WHERE LatestPopulationCensus = '2011';
SELECT Value  FROM Indicators  WHERE CountryName = 'Italy'    AND IndicatorName = 'Agricultural land (sq. km)'    AND Year = '1968';
SELECT CountryName, Year, Value FROM Indicators WHERE IndicatorName = 'Out-of-school children of primary school age, female (number)' AND CountryCode IN (SELECT CountryCode FROM Country WHERE Region = 'Sub-Saharan Africa') ORDER BY Value DESC LIMIT 1;
SELECT s.SeriesCode FROM Series s JOIN Indicators i ON s.IndicatorName = i.IndicatorName JOIN Country c ON i.CountryCode = c.CountryCode WHERE c.LongName = 'Islamic State of Afghanistan'    AND i.Year = '1965'    AND i.IndicatorName = 'Number of infant deaths';
SELECT      C.ShortName,      COUNT(*) AS CountryCount FROM      Country C JOIN      Indicators I ON C.CountryCode = I.CountryCode WHERE      C.SystemOfNationalAccounts = '1968 System of National Accounts methodology'      AND C.Region = 'Middle East & North Africa'     AND I.IndicatorName = 'CO2 emissions from solid fuel consumption (kt)' GROUP BY      C.ShortName ORDER BY      MAX(I.Value) DESC LIMIT 1;
SELECT IndicatorCode  FROM Indicators  WHERE CountryName = 'Republic of Albania' AND Year = '1960';
SELECT c.LendingCategory FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorName = 'Cereal production (metric tons)'    AND i.Value = 6140000    AND i.Year = 1966;
SELECT c.ShortName, c.Region FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'Population in largest city'   AND i.Year BETWEEN 1960 AND 1979 GROUP BY c.CountryCode, c.ShortName, c.Region HAVING COUNT(DISTINCT i.Year) = 19 ORDER BY MAX(i.Value) DESC LIMIT 1;
SELECT      SUM(Value) AS Total_CO2_Emissions,     YEAR,     MAX(Value) AS Highest_CO2_Emissions FROM      Indicators WHERE      Year BETWEEN 1975 AND 1980      AND IndicatorName LIKE 'CO2%' GROUP BY      Year ORDER BY      Total_CO2_Emissions DESC LIMIT 1;
SELECT c.ShortName, c.IncomeGroup, MIN(i.Value) AS SmallestLandArea FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName LIKE 'Land area (sq. km)' AND i.Year BETWEEN 1961 AND 1979 GROUP BY c.CountryCode HAVING COUNT(DISTINCT i.Year) = 19 ORDER BY SmallestLandArea ASC LIMIT 1;
SELECT AVG(i.Value) AS AveragePassengers, c.SystemOfTrade FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE c.CountryName = 'Bulgaria'   AND i.IndicatorName = 'Air transport, passengers carried'   AND i.Year BETWEEN 1970 AND 1980;
SELECT PppSurveyYear  FROM Country  WHERE ShortName = 'Angola';
SELECT COUNT(*)  FROM Country  WHERE Region = 'North America' AND VitalRegistrationComplete = 'Yes';
SELECT DISTINCT Indicators.Year FROM Indicators JOIN Country ON Indicators.CountryCode = Country.CountryCode WHERE Country.Alpha2Code = '1A'  AND Indicators.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)';
SELECT c.LongName  FROM Country c  JOIN Indicators i ON c.CountryCode = i.CountryCode  WHERE i.IndicatorName = 'Arms exports (SIPRI trend indicator values)'    AND i.Value = 3000000    AND i.Year = 1960;
SELECT DISTINCT c.Alpha2Code FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorName = 'Rural population' AND i.Year = '1960';
SELECT c.SpecialNotes FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'    AND i.Year = '1960'   AND i.Value = (SELECT MAX(Value)                   FROM Indicators                   WHERE IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'                     AND Year = '1960');
SELECT      (SUM(CASE WHEN Year = 1961 THEN Value END) - SUM(CASE WHEN Year = 1960 THEN Value END)) AS Increase FROM      Indicators WHERE      CountryCode = '1A' AND      IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%';
SELECT cn.Description FROM CountryNotes cn JOIN Country c ON cn.Countrycode = c.CountryCode WHERE c.ShortName = 'Australia' AND cn.Seriescode = 'SP.ADO.TFRT';
SELECT      COALESCE(CN.Description, FN.Description, SN.Description) AS Note FROM      Country C LEFT JOIN      Indicators I ON C.CountryCode = I.CountryCode LEFT JOIN      Series S ON I.IndicatorName = S.IndicatorName LEFT JOIN      CountryNotes CN ON C.CountryCode = CN.Countrycode AND S.SeriesCode = CN.Seriescode LEFT JOIN      Footnotes FN ON C.CountryCode = FN.Countrycode AND S.SeriesCode = FN.Seriescode AND I.Year = FN.Year LEFT JOIN      SeriesNotes SN ON S.SeriesCode = SN.Seriescode AND I.Year = SN.Year WHERE      C.ShortName = 'Aruba'      AND S.Topic = 'Environment: Energy production & use';
SELECT DISTINCT c.ShortName FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE cn.Seriescode = 'BX.KLT.DINV.CD.WD';
SELECT c.Region FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN Series s ON i.IndicatorName = s.IndicatorName JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode AND s.SeriesCode = cn.Seriescode WHERE s.IndicatorName = 'Inflation, consumer prices (annual %)';
SELECT COUNT(DISTINCT cn.CountryCode) AS CountryCount FROM CountryNotes cn JOIN Indicators i ON cn.CountryCode = i.CountryCode AND cn.Seriescode = i.IndicatorCode WHERE i.IndicatorName = 'Stocks traded, turnover ratio of domestic shares (%)';
SELECT s.AggregationMethod FROM Indicators i JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE i.Value = 133 AND i.Year = 1960 AND i.CountryName = 'Arab World';
SELECT i.Value FROM Indicators i JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE s.LongDefinition = 'Adolescent fertility rate is the number of births per 1,000 women ages 15-19.' AND i.CountryName = 'Arab World' AND i.Year = 1960;
SELECT      (SUM(CASE WHEN Year = 1961 THEN Value END) - SUM(CASE WHEN Year = 1960 THEN Value END)) /      NULLIF(SUM(CASE WHEN Year = 1960 THEN Value END), 0) * 100 AS PercentageIncrease FROM      Indicators WHERE      CountryCode = '1A' AND      IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)';
SELECT AVG(i.Value) AS AverageAdolescentFertilityRate FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE c.Alpha2Code = '1A'  AND i.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)';
SELECT DISTINCT d.directorid FROM directors d JOIN movies2directors md ON d.directorid = md.directorid JOIN u2base u ON md.movieid = u.movieid WHERE u.rating > 4;
SELECT COUNT(DISTINCT userid)  FROM u2base  JOIN users ON u2base.userid = users.userid  WHERE u2base.rating = 5 AND users.u_gender = 'M';
SELECT DISTINCT md.genre FROM movies2actors ma JOIN movies2directors md ON ma.movieid = md.movieid WHERE ma.actorid = 851;
SELECT COUNT(*)  FROM movies m  JOIN u2base u ON m.movieid = u.movieid  WHERE m.country = 'USA' AND u.rating < 3;
SELECT COUNT(*)  FROM movies  WHERE country = 'France' AND movieid IN (     SELECT movieid      FROM movies2directors      WHERE genre = 'Drama' );
SELECT AVG(occupation) AS average_occupation FROM users WHERE userid IN (     SELECT userid     FROM u2base     WHERE rating <= 2 );
SELECT m.movieid, AVG(u.rating) AS avg_rating FROM movies m JOIN u2base u ON m.movieid = u.movieid WHERE m.country = 'USA' GROUP BY m.movieid ORDER BY avg_rating DESC LIMIT 10;
SELECT AVG(cast_count) AS average_casts FROM (     SELECT m.movieid, COUNT(ma.actorid) AS cast_count     FROM movies m     JOIN movies2actors ma ON m.movieid = ma.movieid     WHERE m.country = 'USA'     GROUP BY m.movieid ) AS movie_casts;
SELECT movieid  FROM movies  WHERE isEnglish = 'F'  ORDER BY year DESC  LIMIT 5;
SELECT COUNT(DISTINCT a.actorid) AS best_actors_with_rating_5 FROM actors a JOIN movies2actors ma ON a.actorid = ma.actorid JOIN u2base u ON ma.movieid = u.movieid WHERE a.a_quality = 'best' AND u.rating = 5;
SELECT AVG(u2base.rating) AS average_rating FROM movies JOIN u2base ON movies.movieid = u2base.movieid WHERE movies.country = 'France' AND movies.year = (SELECT MAX(year) FROM movies WHERE country = 'France');
SELECT COUNT(*)  FROM movies m  JOIN u2base u ON m.movieid = u.movieid  WHERE m.country = 'UK'  AND m.runningtime < 120;
SELECT DISTINCT u.userid FROM users u JOIN u2base ub ON u.userid = ub.userid JOIN movies m ON ub.movieid = m.movieid WHERE u.u_gender = 'M' AND ub.rating < 3 AND m.country = 'France' AND m.runningtime = 2;
SELECT COUNT(DISTINCT a.actorid) AS worst_actresses_with_high_ratings FROM actors a JOIN movies2actors ma ON a.actorid = ma.actorid JOIN u2base u ON ma.movieid = u.movieid WHERE a.a_quality = (SELECT MIN(a_quality) FROM actors) AND u.rating > 3;
SELECT userid FROM u2base WHERE rating = 5 GROUP BY userid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT a.actorid, md.genre FROM movies2directors md JOIN movies2actors ma ON md.movieid = ma.movieid JOIN actors a ON ma.actorid = a.actorid WHERE md.directorid = 22397;
SELECT DISTINCT a.actorid FROM actors a JOIN movies2actors ma ON a.actorid = ma.actorid JOIN movies m ON ma.movieid = m.movieid JOIN movies2directors md ON m.movieid = md.movieid WHERE md.genre = 'Action'  UNION  SELECT DISTINCT d.directorid FROM directors d JOIN movies2directors md ON d.directorid = md.directorid JOIN movies m ON md.movieid = m.movieid WHERE md.genre = 'Action';
SELECT COUNT(DISTINCT a.actorid)  FROM actors a  JOIN movies2actors ma ON a.actorid = ma.actorid  JOIN movies m ON ma.movieid = m.movieid  WHERE a.a_gender = 'F' AND m.year = 4;
SELECT DISTINCT a.actorid FROM actors a JOIN movies2actors ma ON a.actorid = ma.actorid JOIN movies m ON ma.movieid = m.movieid WHERE a.a_quality = 3 AND m.isEnglish = 'T' AND m.country = 'USA';
SELECT m.movieid  FROM movies m  JOIN directors d ON m.movieid = d.directorid  WHERE m.runningtime = 3 AND d.avg_revenue = 1;
SELECT DISTINCT genre  FROM movies2directors  JOIN movies ON movies2directors.movieid = movies.movieid  WHERE movies.country = 'UK';
SELECT genre, COUNT(*) AS genre_count FROM u2base ub JOIN movies m ON ub.movieid = m.movieid JOIN movies2directors md ON m.movieid = md.movieid JOIN users u ON ub.userid = u.userid WHERE u.age = 18 GROUP BY genre ORDER BY genre_count DESC LIMIT 1;
SELECT DISTINCT ma.actorid FROM u2base AS ub JOIN movies AS m ON ub.movieid = m.movieid JOIN movies2actors AS ma ON m.movieid = ma.movieid JOIN users AS u ON ub.userid = u.userid WHERE u.occupation = 5 ORDER BY ub.rating DESC LIMIT 1;
SELECT DISTINCT age FROM users  JOIN u2base ON users.userid = u2base.userid  WHERE u2base.rating = 3;
SELECT directors.country, COUNT(*) AS action_movie_count FROM movies JOIN movies2directors ON movies.movieid = movies2directors.movieid JOIN directors ON movies2directors.directorid = directors.directorid WHERE movies2directors.genre = 'Action' GROUP BY directors.country ORDER BY action_movie_count DESC LIMIT 1;
SELECT DISTINCT m.movieid FROM movies m JOIN movies2actors ma ON m.movieid = ma.movieid JOIN actors a ON ma.actorid = a.actorid JOIN (     SELECT a.actorid     FROM actors a     JOIN u2base u ON a.actorid = u.movieid     GROUP BY a.actorid     ORDER BY AVG(u.rating) DESC     LIMIT 5 ) top_actors ON a.actorid = top_actors.actorid;
SELECT m.movieid, m.year, m.runningtime FROM movies m WHERE m.isEnglish = 'F' AND m.country = 'UK' AND m.movieid IN (     SELECT movieid     FROM movies2directors     WHERE genre = 'Adventure' ) LIMIT 5;
SELECT      (COUNT(CASE WHEN u.u_gender = 'F' THEN 1 END) * 100.0 / COUNT(u.userid)) AS female_percentage FROM      users u JOIN      u2base ub ON u.userid = ub.userid WHERE      ub.rating = 2;
SELECT      (SELECT COUNT(DISTINCT u.userid) FROM users u       JOIN u2base ub ON u.userid = ub.userid       JOIN movies m ON ub.movieid = m.movieid       JOIN movies2directors md ON m.movieid = md.movieid       WHERE u.u_gender = 'F' AND md.genre = 'Horror') -     (SELECT COUNT(DISTINCT u.userid) FROM users u       JOIN u2base ub ON u.userid = ub.userid       JOIN movies m ON ub.movieid = m.movieid       JOIN movies2directors md ON m.movieid = md.movieid       WHERE u.u_gender = 'M' AND md.genre = 'Horror') AS gender_difference;
SELECT DISTINCT genre  FROM movies2directors  WHERE movieid IN (     SELECT movieid      FROM movies      WHERE year = 4 AND isEnglish = 'T' );
SELECT COUNT(*)  FROM movies  WHERE country = 'USA' AND isEnglish = 'F' AND movieid IN (SELECT movieid FROM movies2directors WHERE genre = 'Action');
SELECT COUNT(*) AS highest_rating_count FROM u2base WHERE userid IN (     SELECT userid     FROM users     WHERE u_gender = 'M' AND age <= 18 ) AND rating = 5;  -- Assuming the highest rating is 5
SELECT movieid FROM u2base JOIN users ON u2base.userid = users.userid WHERE users.u_gender = 'F' GROUP BY movieid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*)  FROM movies m  JOIN u2base u ON m.movieid = u.movieid  WHERE m.country = 'UK'  AND u.rating = (SELECT MAX(rating) FROM u2base WHERE movieid IN (SELECT movieid FROM movies WHERE isEnglish = 'Yes'));
SELECT DISTINCT movieid  FROM movies  WHERE year = 4 AND movieid IN (SELECT movieid FROM u2base WHERE rating = 1);
SELECT COUNT(*)  FROM movies m  JOIN u2base u ON m.movieid = u.movieid  WHERE m.isEnglish = 'T' AND m.year = 1 AND u.rating = 1;
SELECT COUNT(DISTINCT u.userid)  FROM users u  JOIN u2base ub ON u.userid = ub.userid  JOIN movies m ON ub.movieid = m.movieid  WHERE u.u_gender = 'F' AND m.country = 'France';
SELECT COUNT(DISTINCT d.directorid) AS well_directors_count FROM directors d JOIN movies2directors md ON d.directorid = md.directorid WHERE d.d_quality = 4 AND md.genre = 'Action';
SELECT DISTINCT md.genre FROM movies2directors md JOIN directors d ON md.directorid = d.directorid WHERE d.avg_revenue = (SELECT MAX(avg_revenue) FROM directors);
SELECT COUNT(DISTINCT m.movieid) FROM movies m JOIN movies2actors ma ON m.movieid = ma.movieid JOIN actors a ON ma.actorid = a.actorid WHERE m.isEnglish = 'T' AND a.a_gender = 'M' AND a.a_quality = (SELECT MAX(a_quality) FROM actors WHERE a_gender = 'M');
SELECT DISTINCT m.country FROM movies m JOIN movies2actors ma ON m.movieid = ma.movieid JOIN actors a ON ma.actorid = a.actorid WHERE a.a_quality = (SELECT MIN(a_quality) FROM actors WHERE a_gender = 'F');
SELECT MAX(avg_rating) AS highest_avg_rating FROM (     SELECT AVG(u2base.rating) AS avg_rating     FROM movies     JOIN movies2directors ON movies.movieid = movies2directors.movieid     JOIN u2base ON movies.movieid = u2base.movieid     WHERE movies2directors.genre = 'Action' AND movies.country = 'USA'     GROUP BY movies.movieid ) AS avg_ratings;
SELECT COUNT(DISTINCT m.movieid) AS count_best_directed_movies FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN directors d ON md.directorid = d.directorid JOIN u2base u ON m.movieid = u.movieid WHERE d.d_quality = 5 GROUP BY m.movieid HAVING AVG(u.rating) > 3.5;
SELECT m.movieid, AVG(u.rating) AS avg_rating FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN u2base u ON m.movieid = u.movieid WHERE md.genre = 'Adventure' GROUP BY m.movieid ORDER BY avg_rating DESC LIMIT 1;
SELECT COUNT(*)  FROM users  JOIN u2base ON users.userid = u2base.userid  WHERE u2base.movieid = 2462959 AND users.u_gender = 'F';
SELECT DISTINCT m.movieid  FROM movies m  WHERE m.runningtime = 0  ORDER BY m.movieid  LIMIT 1;
SELECT a.actorid, u2.rating FROM movies2actors ma JOIN actors a ON ma.actorid = a.actorid JOIN u2base u2 ON ma.movieid = u2.movieid WHERE ma.movieid = 1722327;
SELECT d.directorid, COUNT(m.movieid) AS film_count FROM directors d JOIN movies2directors md ON d.directorid = md.directorid WHERE d.d_quality = 5 GROUP BY d.directorid ORDER BY film_count DESC;
SELECT COUNT(*)  FROM movies m  JOIN movies2directors md ON m.movieid = md.movieid  JOIN u2base u ON m.movieid = u.movieid  WHERE md.genre = 'Drama' AND u.rating = 3;
SELECT COUNT(*)  FROM u2base  WHERE rating = 5  AND userid IN (SELECT userid FROM users WHERE age BETWEEN 25 AND 35);
SELECT m.movieid, m.year, m.isEnglish, m.country, m.runningtime FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN u2base u ON m.movieid = u.movieid WHERE md.genre = 'horror' AND u.rating = 1;
SELECT DISTINCT d.directorid FROM directors d JOIN movies2directors md ON d.directorid = md.directorid JOIN movies m ON md.movieid = m.movieid WHERE m.country = 'France';
SELECT userid, age FROM u2base JOIN users ON u2base.userid = users.userid WHERE movieid = 1695219;
SELECT genre, COUNT(*) AS non_english_count FROM movies2directors md JOIN movies m ON md.movieid = m.movieid WHERE m.isEnglish = 'F' GROUP BY genre ORDER BY non_english_count DESC LIMIT 1;
SELECT a.actorid, d.directorid FROM movies2actors ma JOIN actors a ON ma.actorid = a.actorid JOIN movies2directors md ON ma.movieid = md.movieid JOIN directors d ON md.directorid = d.directorid WHERE ma.movieid = 1949144;
SELECT      (COUNT(DISTINCT a.actorid) FILTER (WHERE u.rating >= 3) * 100.0 / COUNT(DISTINCT a.actorid)) AS percentage FROM      actors a JOIN      movies2actors ma ON a.actorid = ma.actorid JOIN      movies m ON ma.movieid = m.movieid JOIN      u2base u ON m.movieid = u.movieid WHERE      m.country = 'UK';
SELECT      (SUM(CASE WHEN avg_revenue > d_quality THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS proportion FROM      directors d JOIN      movies2directors md ON d.directorid = md.directorid JOIN      movies m ON md.movieid = m.movieid WHERE      md.genre = 'action' AND d.directorid = 'box office success paradox';
SELECT DISTINCT ma.actorid FROM movies2actors ma JOIN movies m ON ma.movieid = m.movieid WHERE m.year = (SELECT MAX(year) FROM movies);
SELECT DISTINCT ma.actorid FROM movies m JOIN movies2actors ma ON m.movieid = ma.movieid WHERE m.isEnglish = 'T' AND m.runningtime = 2;
SELECT ma.actorid FROM movies m JOIN movies2actors ma ON m.movieid = ma.movieid WHERE m.country = 'France' GROUP BY ma.actorid HAVING COUNT(m.movieid) >= 2;
SELECT COUNT(*)  FROM movies  WHERE country = 'USA' AND movieid IN (     SELECT movieid      FROM movies2actors      GROUP BY movieid      HAVING COUNT(actorid) > 1 );
SELECT movieid  FROM movies  WHERE year = 1  AND movieid NOT IN (SELECT movieid FROM movies2actors WHERE cast_num > 0);
SELECT COUNT(DISTINCT ma.actorid) AS actor_count FROM movies m JOIN movies2actors ma ON m.movieid = ma.movieid WHERE m.country IN ('US', 'UK');
SELECT COUNT(DISTINCT d.directorid)  FROM directors d  JOIN movies2directors md ON d.directorid = md.directorid  WHERE d.avg_revenue = 4 AND (md.genre = 'action' OR md.genre = 'adventure');
SELECT directorid FROM directors WHERE d_quality >= 3 AND directorid IN (     SELECT directorid     FROM movies2directors     GROUP BY directorid     HAVING COUNT(DISTINCT genre) >= 2 );
SELECT COUNT(*)  FROM movies  WHERE country = 'USA' AND movieid IN (     SELECT movieid      FROM movies2directors      WHERE genre = 'Comedy' );
SELECT COUNT(*) AS latest_drama_action_count FROM movies m JOIN movies2directors md ON m.movieid = md.movieid WHERE m.year = (SELECT MAX(year) FROM movies) AND (md.genre = 'Drama' OR md.genre = 'Action');
SELECT m.movieid  FROM movies m  JOIN movies2directors md ON m.movieid = md.movieid  WHERE md.genre = 'Horror' AND m.runningtime >= 120;
SELECT      (COUNT(CASE WHEN u.rating = 1 THEN 1 END) * 100.0 / COUNT(*)) AS negative_critical_reception FROM      movies m JOIN      u2base u ON m.movieid = u.movieid WHERE      m.isEnglish = 1 AND m.country = 'USA';
SELECT COUNT(DISTINCT m.movieid) AS disparate_comedy_count FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN u2base u ON m.movieid = u.movieid WHERE md.genre = 'Comedy' AND u.rating = 1;
SELECT d.avg_revenue FROM directors d JOIN movies2directors md ON d.directorid = md.directorid JOIN u2base u ON md.movieid = u.movieid WHERE u.rating = 1 GROUP BY d.directorid ORDER BY COUNT(u.rating) DESC LIMIT 1;
SELECT COUNT(*)  FROM movies m  JOIN u2base u ON m.movieid = u.movieid  WHERE m.country = 'France'  AND u.rating = (SELECT MAX(rating) FROM u2base);
SELECT m.movieid FROM u2base u JOIN users us ON u.userid = us.userid JOIN movies m ON u.movieid = m.movieid WHERE us.age = 25 GROUP BY m.movieid ORDER BY COUNT(u.rating) DESC LIMIT 1;
SELECT COUNT(DISTINCT u.userid)  FROM users u  JOIN u2base ub ON u.userid = ub.userid  JOIN movies m ON ub.movieid = m.movieid  WHERE u.age = 35 AND m.country = 'UK';
SELECT userid, age  FROM u2base  JOIN users ON u2base.userid = users.userid  WHERE movieid = 2409051 AND rating = 2;
SELECT movieid FROM u2base WHERE movieid IN (     SELECT movieid     FROM movies     WHERE year = 1 ) GROUP BY movieid ORDER BY COUNT(rating) DESC LIMIT 1;
SELECT m.movieid, AVG(u.rating) AS avg_rating FROM movies m JOIN u2base u ON m.movieid = u.movieid WHERE m.country = 'France' GROUP BY m.movieid ORDER BY avg_rating ASC LIMIT 1;
SELECT COUNT(DISTINCT a.actorid) AS female_actor_count FROM actors a JOIN movies2actors ma ON a.actorid = ma.actorid JOIN movies m ON ma.movieid = m.movieid WHERE a.a_gender = 'F' AND (m.country = 'France' OR m.country = 'USA');
SELECT COUNT(DISTINCT ma.actorid) AS different_actors FROM movies m JOIN u2base u ON m.movieid = u.movieid JOIN movies2actors ma ON m.movieid = ma.movieid WHERE u.rating = 5;
SELECT m.movieid, AVG(u.rating) AS avg_rating FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN u2base u ON m.movieid = u.movieid WHERE md.genre = 'Crime' GROUP BY m.movieid ORDER BY avg_rating ASC LIMIT 1;
SELECT      SUM(CASE WHEN a.a_gender = 'M' THEN 1 ELSE 0 END) * 1.0 /      NULLIF(SUM(CASE WHEN a.a_gender = 'F' THEN 1 ELSE 0 END), 0) AS gender_ratio FROM      movies m JOIN      movies2actors ma ON m.movieid = ma.movieid JOIN      actors a ON ma.actorid = a.actorid WHERE      m.country = 'UK';
SELECT COUNT(*)  FROM users  WHERE age = 35 AND u_gender = 'F' AND userid IN (SELECT userid FROM u2base WHERE movieid = 1711133 AND rating = 3);
SELECT COUNT(DISTINCT u.userid)  FROM u2base u  JOIN movies m ON u.movieid = m.movieid  WHERE u.rating = 1 AND m.year = 2 AND m.country = 'UK' AND m.runningtime = 2;
SELECT DISTINCT d.directorid FROM directors d LEFT JOIN movies2directors md ON d.directorid = md.directorid WHERE d.avg_revenue = 2 AND d.d_quality = 3 AND md.genre <> 'Comedy';
SELECT      (COUNT(CASE WHEN a.a_quality = 2 AND ma.cast_num = 2 THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage FROM      actors a JOIN      movies2actors ma ON a.actorid = ma.actorid WHERE      a.a_gender = 'F' AND ma.movieid = 1672580;
SELECT      SUM(CASE WHEN a_gender = 'M' THEN 1 ELSE 0 END) AS male_actors,     SUM(CASE WHEN a_gender = 'F' THEN 1 ELSE 0 END) AS female_actors,     CONCAT(SUM(CASE WHEN a_gender = 'M' THEN 1 ELSE 0 END), ':', SUM(CASE WHEN a_gender = 'F' THEN 1 ELSE 0 END)) AS ratio FROM      actors  WHERE      a_quality = 0;
SELECT a.actorid, COUNT(m2a.movieid) AS film_count FROM actors a JOIN movies2actors m2a ON a.actorid = m2a.actorid GROUP BY a.actorid ORDER BY film_count DESC LIMIT 1;
SELECT genre, COUNT(*) AS movie_count FROM movies2directors GROUP BY genre ORDER BY movie_count DESC LIMIT 1;
SELECT genre, COUNT(*) AS genre_count FROM movies2directors JOIN directors ON movies2directors.directorid = directors.directorid WHERE directors.d_quality = 0 GROUP BY genre ORDER BY genre_count DESC;
SELECT m.movieid FROM movies m JOIN u2base u ON m.movieid = u.movieid WHERE m.isEnglish = 'F' AND m.country = 'USA' ORDER BY u.rating ASC LIMIT 1;
SELECT AVG(u2base.rating) AS average_rating FROM u2base JOIN movies2directors ON u2base.movieid = movies2directors.movieid JOIN directors ON movies2directors.directorid = directors.directorid WHERE directors.d_quality = 4 AND directors.avg_revenue = 4;
SELECT m.movieid, AVG(u2.rating) AS avg_rating FROM u2base u2 JOIN users u ON u.userid = u2.userid JOIN movies m ON m.movieid = u2.movieid WHERE u.u_gender = 'F' AND u.occupation = 3 GROUP BY m.movieid ORDER BY avg_rating DESC;
SELECT COUNT(DISTINCT a.actorid) AS female_actresses_count, m.country, m.runningtime FROM movies m JOIN movies2actors ma ON m.movieid = ma.movieid JOIN actors a ON ma.actorid = a.actorid WHERE m.movieid = 2312852 AND a.a_gender = 'F';
SELECT COUNT(m.movieid) AS horror_movie_count FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN directors d ON md.directorid = d.directorid WHERE md.genre = 'Horror' AND d.d_quality = 0;
SELECT DISTINCT genre FROM movies JOIN movies2directors ON movies.movieid = movies2directors.movieid WHERE isEnglish = 'F' AND runningtime <= 120;
SELECT m.movieid, m.year FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN u2base u ON m.movieid = u.movieid WHERE m.isEnglish = 1    AND md.genre = 'Comedy'    AND m.country = 'UK'    AND m.runningtime = 3    AND u.userid IN (SELECT userid FROM users WHERE age BETWEEN 45 AND 50) ORDER BY u.rating DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN m.isEnglish = 'T' THEN 1 END) - COUNT(CASE WHEN m.isEnglish = 'F' THEN 1 END)) * 100.0 / COUNT(*) AS percentage_difference FROM      movies m WHERE      m.year = 3 AND      m.country <> 'USA' AND      m.movieid IN (SELECT movieid FROM movies2directors WHERE genre = 'Crime');
SELECT      SUM(CASE WHEN a.a_gender = 'M' THEN 1 ELSE 0 END) AS male_actors,     SUM(CASE WHEN a.a_gender = 'F' THEN 1 ELSE 0 END) AS female_actors,     (SUM(CASE WHEN a.a_quality = 5 THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN a.a_quality = 0 THEN 1 ELSE 0 END), 0)) AS quality_proportion,     d.directorid,     md.genre FROM      movies2actors ma JOIN      actors a ON ma.actorid = a.actorid JOIN      movies m ON ma.movieid = m.movieid JOIN      movies2directors md ON m.movieid = md.movieid JOIN      directors d ON md.directorid = d.directorid WHERE      ma.movieid = 1684910 GROUP BY      d.directorid, md.genre;
SELECT p.Product_Name FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE cs.Order_ID = 'CA-2011-112326';
SELECT MAX(JULIANDAY(Ship_Date) - JULIANDAY(Order_Date)) AS Longest_Shipment_Time FROM (     SELECT Ship_Date, Order_Date     FROM central_superstore     WHERE Customer_ID IN (SELECT Customer_ID FROM people WHERE Customer_Name = 'Aimee Bixby')     UNION ALL     SELECT Ship_Date, Order_Date     FROM east_superstore     WHERE Customer_ID IN (SELECT Customer_ID FROM people WHERE Customer_Name = 'Aimee Bixby')     UNION ALL     SELECT Ship_Date, Order_Date     FROM south_superstore     WHERE Customer_ID IN (SELECT Customer_ID FROM people WHERE Customer_Name = 'Aimee Bixby')     UNION ALL     SELECT Ship_Date, Order_Date     FROM west_superstore     WHERE Customer_ID IN (SELECT Customer_ID FROM people WHERE Customer_Name = 'Aimee Bixby') ) AS All_Orders;
SELECT COUNT(*)  FROM (     SELECT Ship Mode      FROM central_superstore      WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Aimee Bixby')     UNION ALL     SELECT Ship Mode      FROM east_superstore      WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Aimee Bixby')     UNION ALL     SELECT Ship Mode      FROM south_superstore      WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Aimee Bixby')     UNION ALL     SELECT Ship Mode      FROM west_superstore      WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Aimee Bixby') ) AS all_orders WHERE Ship Mode = 'Standard Class';
SELECT COUNT(*) AS OrderCount FROM (     SELECT Order ID FROM central_superstore WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Aimee Bixby')     UNION ALL     SELECT Order ID FROM east_superstore WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Aimee Bixby')     UNION ALL     SELECT Order ID FROM south_superstore WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Aimee Bixby')     UNION ALL     SELECT Order ID FROM west_superstore WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Aimee Bixby') ) AS AllOrders;
SELECT Order_ID FROM (     SELECT Order_ID, COUNT(DISTINCT Product_ID) AS Product_Count     FROM (         SELECT Order_ID, Product_ID         FROM central_superstore         WHERE Customer_ID IN (SELECT Customer_ID FROM people WHERE Customer_Name = 'Aimee Bixby')         UNION ALL         SELECT Order_ID, Product_ID         FROM east_superstore         WHERE Customer_ID IN (SELECT Customer_ID FROM people WHERE Customer_Name = 'Aimee Bixby')         UNION ALL         SELECT Order_ID, Product_ID         FROM south_superstore         WHERE Customer_ID IN (SELECT Customer_ID FROM people WHERE Customer_Name = 'Aimee Bixby')         UNION ALL         SELECT Order_ID, Product_ID         FROM west_superstore         WHERE Customer_ID IN (SELECT Customer_ID FROM people WHERE Customer_Name = 'Aimee Bixby')     ) AS All_Orders     GROUP BY Order_ID ) AS Order_Counts WHERE Product_Count > 3;
SELECT COUNT(DISTINCT o.Order_ID) AS Furniture_Orders FROM (     SELECT Order_ID FROM central_superstore WHERE Customer_ID IN (SELECT Customer_ID FROM people WHERE Customer_Name = 'Aimee Bixby')     UNION ALL     SELECT Order_ID FROM east_superstore WHERE Customer_ID IN (SELECT Customer_ID FROM people WHERE Customer_Name = 'Aimee Bixby')     UNION ALL     SELECT Order_ID FROM south_superstore WHERE Customer_ID IN (SELECT Customer_ID FROM people WHERE Customer_Name = 'Aimee Bixby')     UNION ALL     SELECT Order_ID FROM west_superstore WHERE Customer_ID IN (SELECT Customer_ID FROM people WHERE Customer_Name = 'Aimee Bixby') ) AS o JOIN product p ON o.Product_ID = p.Product_ID WHERE p.Category = 'Furniture';
SELECT p.Product_Name FROM central_superstore cs JOIN people pe ON cs.Customer_ID = pe.Customer_ID JOIN product p ON cs.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Aimee Bixby'  AND strftime('%Y', cs.Order_Date) = '2016' UNION SELECT p.Product_Name FROM east_superstore es JOIN people pe ON es.Customer_ID = pe.Customer_ID JOIN product p ON es.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Aimee Bixby'  AND strftime('%Y', es.Order_Date) = '2016' UNION SELECT p.Product_Name FROM south_superstore ss JOIN people pe ON ss.Customer_ID = pe.Customer_ID JOIN product p ON ss.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Aimee Bixby'  AND strftime('%Y', ss.Order_Date) = '2016' UNION SELECT p.Product_Name FROM west_superstore ws JOIN people pe ON ws.Customer_ID = pe.Customer_ID JOIN product p ON ws.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Aimee Bixby'  AND strftime('%Y', ws.Order_Date) = '2016';
SELECT SUM(Quantity) AS Total_Quantity FROM central_superstore JOIN product ON central_superstore.Product_ID = product.Product_ID WHERE product.Product_Name = 'Telescoping Adjustable Floor Lamp';
SELECT DISTINCT p.Customer_Name FROM people p JOIN central_superstore cs ON p.Customer_ID = cs.Customer_ID JOIN product pr ON cs.Product_ID = pr.Product_ID WHERE pr.Product_Name = 'Telescoping Adjustable Floor Lamp' UNION SELECT DISTINCT p.Customer_Name FROM people p JOIN east_superstore es ON p.Customer_ID = es.Customer_ID JOIN product pr ON es.Product_ID = pr.Product_ID WHERE pr.Product_Name = 'Telescoping Adjustable Floor Lamp' UNION SELECT DISTINCT p.Customer_Name FROM people p JOIN south_superstore ss ON p.Customer_ID = ss.Customer_ID JOIN product pr ON ss.Product_ID = pr.Product_ID WHERE pr.Product_Name = 'Telescoping Adjustable Floor Lamp' UNION SELECT DISTINCT p.Customer_Name FROM people p JOIN west_superstore ws ON p.Customer_ID = ws.Customer_ID JOIN product pr ON ws.Product_ID = pr.Product_ID WHERE pr.Product_Name = 'Telescoping Adjustable Floor Lamp';
SELECT COUNT(DISTINCT p."Customer ID") AS ConsumerCount FROM people p JOIN central_superstore cs ON p."Customer ID" = cs."Customer ID" JOIN product pr ON cs."Product ID" = pr."Product ID" WHERE pr."Product Name" = 'Telescoping Adjustable Floor Lamp' AND p."Segment" = 'Consumer' UNION ALL SELECT COUNT(DISTINCT p."Customer ID") AS ConsumerCount FROM people p JOIN east_superstore es ON p."Customer ID" = es."Customer ID" JOIN product pr ON es."Product ID" = pr."Product ID" WHERE pr."Product Name" = 'Telescoping Adjustable Floor Lamp' AND p."Segment" = 'Consumer' UNION ALL SELECT COUNT(DISTINCT p."Customer ID") AS ConsumerCount FROM people p JOIN south_superstore ss ON p."Customer ID" = ss."Customer ID" JOIN product pr ON ss."Product ID" = pr."Product ID" WHERE pr."Product Name" = 'Telescoping Adjustable Floor Lamp' AND p."Segment" = 'Consumer' UNION ALL SELECT COUNT(DISTINCT p."Customer ID") AS ConsumerCount FROM people p JOIN west_superstore ws ON p."Customer ID" = ws."Customer ID" JOIN product pr ON ws."Product ID" = pr."Product ID" WHERE pr."Product Name" = 'Telescoping Adjustable Floor Lamp' AND p."Segment" = 'Consumer';
SELECT SUM(c.Quantity) AS Quantity FROM central_superstore c JOIN people p ON c.Customer_ID = p.Customer_ID JOIN product pr ON c.Product_ID = pr.Product_ID WHERE p.Customer_Name = 'Aimee Bixby'    AND pr.Product_Name = 'Xerox 1952'    AND c.Order_Date = DATE('2014-09-10') UNION ALL SELECT SUM(e.Quantity) AS Quantity FROM east_superstore e JOIN people p ON e.Customer_ID = p.Customer_ID JOIN product pr ON e.Product_ID = pr.Product_ID WHERE p.Customer_Name = 'Aimee Bixby'    AND pr.Product_Name = 'Xerox 1952'    AND e.Order_Date = DATE('2014-09-10') UNION ALL SELECT SUM(s.Quantity) AS Quantity FROM south_superstore s JOIN people p ON s.Customer_ID = p.Customer_ID JOIN product pr ON s.Product_ID = pr.Product_ID WHERE p.Customer_Name = 'Aimee Bixby'    AND pr.Product_Name = 'Xerox 1952'    AND s.Order_Date = DATE('2014-09-10') UNION ALL SELECT SUM(w.Quantity) AS Quantity FROM west_superstore w JOIN people p ON w.Customer_ID = p.Customer_ID JOIN product pr ON w.Product_ID = pr.Product_ID WHERE p.Customer_Name = 'Aimee Bixby'    AND pr.Product_Name = 'Xerox 1952'    AND w.Order_Date = DATE('2014-09-10');
SELECT COUNT(*)  FROM (     SELECT Customer ID, Product ID      FROM central_superstore      WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Aimee Bixby')       AND Product ID = (SELECT Product ID FROM product WHERE Product Name = 'Xerox 1952')     UNION ALL     SELECT Customer ID, Product ID      FROM east_superstore      WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Aimee Bixby')       AND Product ID = (SELECT Product ID FROM product WHERE Product Name = 'Xerox 1952')     UNION ALL     SELECT Customer ID, Product ID      FROM south_superstore      WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Aimee Bixby')       AND Product ID = (SELECT Product ID FROM product WHERE Product Name = 'Xerox 1952')     UNION ALL     SELECT Customer ID, Product ID      FROM west_superstore      WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Aimee Bixby')       AND Product ID = (SELECT Product ID FROM product WHERE Product Name = 'Xerox 1952') ) AS orders;
SELECT Sales / (1 - Discount) AS Original_Price FROM (     SELECT c.Sales, c.Discount     FROM central_superstore c     JOIN people p ON c.Customer_ID = p.Customer_ID     JOIN product pr ON c.Product_ID = pr.Product_ID     WHERE p.Customer_Name = 'Aimee Bixby'       AND c.Order_Date = DATE('2014-09-10')       AND pr.Product_Name = 'Xerox 1952'          UNION ALL          SELECT e.Sales, e.Discount     FROM east_superstore e     JOIN people p ON e.Customer_ID = p.Customer_ID     JOIN product pr ON e.Product_ID = pr.Product_ID     WHERE p.Customer_Name = 'Aimee Bixby'       AND e.Order_Date = DATE('2014-09-10')       AND pr.Product_Name = 'Xerox 1952'          UNION ALL          SELECT s.Sales, s.Discount     FROM south_superstore s     JOIN people p ON s.Customer_ID = p.Customer_ID     JOIN product pr ON s.Product_ID = pr.Product_ID     WHERE p.Customer_Name = 'Aimee Bixby'       AND s.Order_Date = DATE('2014-09-10')       AND pr.Product_Name = 'Xerox 1952'          UNION ALL          SELECT w.Sales, w.Discount     FROM west_superstore w     JOIN people p ON w.Customer_ID = p.Customer_ID     JOIN product pr ON w.Product_ID = pr.Product_ID     WHERE p.Customer_Name = 'Aimee Bixby'       AND w.Order_Date = DATE('2014-09-10')       AND pr.Product_Name = 'Xerox 1952' ) AS combined
SELECT      SUM((Sales / (1 - Discount)) * Quantity - Profit) AS Total_Cost FROM      (SELECT * FROM central_superstore      UNION ALL      SELECT * FROM east_superstore      UNION ALL      SELECT * FROM south_superstore      UNION ALL      SELECT * FROM west_superstore) AS all_superstores JOIN      product ON all_superstores.Product_ID = product.Product_ID JOIN      people ON all_superstores.Customer_ID = people.Customer_ID WHERE      product.Product_Name = 'Xerox 1952'      AND people.Customer_Name = 'Aimee Bixby'      AND all_superstores.Order_Date = DATE('2014-09-10');
SELECT SUM(Quantity) AS Total_Art_Products_Ordered FROM east_superstore JOIN product ON east_superstore.Product_ID = product.Product_ID WHERE strftime('%Y', "Order Date") = '2013' AND product."Sub-Category" = 'Art';
SELECT p.Customer_Name, MAX(total_cost) AS Largest_Total_Cost FROM (     SELECT Customer_ID,             SUM((Sales / (1 - Discount)) * Quantity) AS total_cost     FROM (         SELECT Customer_ID, Sales, Quantity, Discount FROM central_superstore         UNION ALL         SELECT Customer_ID, Sales, Quantity, Discount FROM east_superstore         UNION ALL         SELECT Customer_ID, Sales, Quantity, Discount FROM south_superstore         UNION ALL         SELECT Customer_ID, Sales, Quantity, Discount FROM west_superstore     ) AS all_orders     GROUP BY Customer_ID ) AS customer_totals JOIN people p ON customer_totals.Customer_ID = p.Customer_ID GROUP BY p.Customer_Name ORDER BY Largest_Total_Cost DESC LIMIT 1;
SELECT p.Product_Name FROM product p JOIN (     SELECT Product_ID, MAX(Sales / (1 - Discount)) AS Max_Original_Price     FROM (         SELECT Product_ID, Sales, Discount FROM central_superstore         UNION ALL         SELECT Product_ID, Sales, Discount FROM east_superstore         UNION ALL         SELECT Product_ID, Sales, Discount FROM south_superstore         UNION ALL         SELECT Product_ID, Sales, Discount FROM west_superstore     ) AS all_superstores     GROUP BY Product_ID ) AS max_prices ON p.Product_ID = max_prices.Product_ID WHERE max_prices.Max_Original_Price = (     SELECT MAX(Sales / (1 - Discount))     FROM (         SELECT Sales, Discount FROM central_superstore         UNION ALL         SELECT Sales, Discount FROM east_superstore         UNION ALL         SELECT Sales, Discount FROM south_superstore         UNION ALL         SELECT Sales, Discount FROM west_superstore     ) AS all_superstores );
SELECT p.Product_Name FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID JOIN people pe ON cs.Customer_ID = pe.Customer_ID WHERE pe.Customer_Name = 'Darren Powers' AND cs.Order_Date = (SELECT MAX(Order_Date) FROM central_superstore WHERE Customer_ID = pe.Customer_ID)
SELECT SUM(Quantity) AS Total_Quantity FROM (     SELECT Quantity FROM central_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = 'Advantus plastic paper clips')     UNION ALL     SELECT Quantity FROM east_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = 'Advantus plastic paper clips')     UNION ALL     SELECT Quantity FROM south_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = 'Advantus plastic paper clips')     UNION ALL     SELECT Quantity FROM west_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = 'Advantus plastic paper clips') ) AS All_Quantities;
SELECT Order_ID FROM (     SELECT Order_ID,             (Sales / (1 - Discount)) * Quantity - Profit AS Total_Cost     FROM (         SELECT Order_ID, Sales, Quantity, Discount         FROM central_superstore         WHERE Product_ID = (SELECT Product_ID FROM product WHERE Product_Name = 'Logitech G600 MMO Gaming Mouse')         UNION ALL         SELECT Order_ID, Sales, Quantity, Discount         FROM east_superstore         WHERE Product_ID = (SELECT Product_ID FROM product WHERE Product_Name = 'Logitech G600 MMO Gaming Mouse')         UNION ALL         SELECT Order_ID, Sales, Quantity, Discount         FROM south_superstore         WHERE Product_ID = (SELECT Product_ID FROM product WHERE Product_Name = 'Logitech G600 MMO Gaming Mouse')         UNION ALL         SELECT Order_ID, Sales, Quantity, Discount         FROM west_superstore         WHERE Product_ID = (SELECT Product_ID FROM product WHERE Product_Name = 'Logitech G600 MMO Gaming Mouse')     ) AS All_Orders ) AS Cost_Calculations ORDER BY Total_Cost DESC LIMIT 1;
SELECT p.Product_Name FROM central_superstore cs JOIN people pe ON cs.Customer_ID = pe.Customer_ID JOIN product p ON cs.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Alejandro Grove' UNION SELECT p.Product_Name FROM east_superstore es JOIN people pe ON es.Customer_ID = pe.Customer_ID JOIN product p ON es.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Alejandro Grove' UNION SELECT p.Product_Name FROM south_superstore ss JOIN people pe ON ss.Customer_ID = pe.Customer_ID JOIN product p ON ss.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Alejandro Grove' UNION SELECT p.Product_Name FROM west_superstore ws JOIN people pe ON ws.Customer_ID = pe.Customer_ID JOIN product p ON ws.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Alejandro Grove';
SELECT COUNT(DISTINCT p.CustomerID) FROM people p JOIN central_superstore cs ON p.CustomerID = cs.CustomerID JOIN product pr ON cs.ProductID = pr.ProductID WHERE p.City = 'Chicago'    AND pr.ProductName = 'Cardinal EasyOpen D-Ring Binders'    AND cs.Quantity >= 14;
SELECT DISTINCT p.Product_Name FROM product p JOIN central_superstore cs ON p.Product_ID = cs.Product_ID WHERE cs.Profit >= 1000 UNION SELECT DISTINCT p.Product_Name FROM product p JOIN east_superstore es ON p.Product_ID = es.Product_ID WHERE es.Profit >= 1000 UNION SELECT DISTINCT p.Product_Name FROM product p JOIN south_superstore ss ON p.Product_ID = ss.Product_ID WHERE ss.Profit >= 1000 UNION SELECT DISTINCT p.Product_Name FROM product p JOIN west_superstore ws ON p.Product_ID = ws.Product_ID WHERE ws.Profit >= 1000;
SELECT DISTINCT p.Product Name FROM east_superstore es JOIN product p ON es.Product ID = p.Product ID WHERE es.Ship Mode = 'First Class' AND es.Region = 'East' LIMIT 10;
SELECT p.Product_Name FROM central_superstore cs JOIN people pe ON cs.Customer_ID = pe.Customer_ID JOIN product p ON cs.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Becky Martin' AND cs.Region = 'Central';
SELECT DISTINCT p.Customer_Name FROM west_superstore ws JOIN people p ON ws.Customer_ID = p.Customer_ID WHERE ws.Ship_Mode = 'Second Class' LIMIT 5;
SELECT SUM(Profit) AS Total_Profit FROM central_superstore WHERE Customer_ID IN (     SELECT Customer_ID     FROM people     WHERE Customer_Name = 'Patrick Gardner' AND Region = 'Central' );
SELECT p.Product_Name FROM south_superstore s JOIN product p ON s.Product_ID = p.Product_ID WHERE s.Order_Date = '2013-03-04' AND s.Ship_Mode = 'Same Day';
SELECT SUM(Sales) AS Total_Sales FROM central_superstore WHERE Product_ID IN (     SELECT Product_ID     FROM product     WHERE Product_Name = 'Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack' );
SELECT p.Product_Name FROM east_superstore es JOIN product p ON es.Product_ID = p.Product_ID JOIN people pe ON es.Customer_ID = pe.Customer_ID WHERE pe.Customer_Name = 'Jonathan Doherty' ORDER BY es.Quantity DESC LIMIT 1;
SELECT p.Product_Name, SUM(e.Quantity) AS Total_Quantity FROM east_superstore e JOIN product p ON e.Product_ID = p.Product_ID WHERE e.Ship_Date = '2015-03-25' GROUP BY p.Product_Name;
SELECT p.Customer_Name  FROM east_superstore es JOIN people p ON es.Customer_ID = p.Customer_ID JOIN product pr ON es.Product_ID = pr.Product_ID WHERE pr.Product_Name = 'Global High-Back Leather Tilter, Burgundy'  AND es.Order_Date = DATE('2013-10-13')  AND es.Region = 'East';
SELECT p.Category FROM south_superstore s JOIN product p ON s.Product_ID = p.Product_ID JOIN people pe ON s.Customer_ID = pe.Customer_ID WHERE pe.Customer_Name = 'Katherine Murray' AND s.Order_Date = '2018-11-04';
SELECT      (SUM(CASE WHEN p.Category = 'Furniture' THEN cs.Quantity ELSE 0 END) * 1.0 / SUM(cs.Quantity)) * 100 AS Furniture_Percentage FROM      west_superstore cs JOIN      product p ON cs.Product_ID = p.Product_ID WHERE      cs.Ship_Mode = 'Standard Class' AND cs.Region = 'West';
SELECT cs.Ship_Date  FROM central_superstore cs JOIN people p ON cs.Customer_ID = p.Customer_ID WHERE p.Customer_Name = 'Ann Chong' AND p.Region = 'Central';
SELECT p.Segment  FROM people p  JOIN west_superstore w ON p.Customer_ID = w.Customer_ID  WHERE w.Order_ID = 'CA-2011-108189';
SELECT SUM(Sales) AS Total_Sales FROM west_superstore WHERE Product_ID IN (     SELECT Product_ID     FROM product     WHERE Product_Name = 'Hon Valutask Swivel Chairs' );
SELECT cs.Order_ID  FROM south_superstore AS ss JOIN people AS p ON ss.Customer_ID = p.Customer_ID WHERE p.Customer_Name = 'Frank Olsen' AND p.Region = 'South';
SELECT p.Product_Name  FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE cs.Order_Date = '2018-04-26'  AND cs.Ship_Date <= '2018-04-27';
SELECT p.City, p.State FROM central_superstore cs JOIN people p ON cs.Customer_ID = p.Customer_ID WHERE cs.Sales = (SELECT MAX(Sales) FROM central_superstore) UNION SELECT p.City, p.State FROM east_superstore es JOIN people p ON es.Customer_ID = p.Customer_ID WHERE es.Sales = (SELECT MAX(Sales) FROM east_superstore) UNION SELECT p.City, p.State FROM south_superstore ss JOIN people p ON ss.Customer_ID = p.Customer_ID WHERE ss.Sales = (SELECT MAX(Sales) FROM south_superstore) UNION SELECT p.City, p.State FROM west_superstore ws JOIN people p ON ws.Customer_ID = p.Customer_ID WHERE ws.Sales = (SELECT MAX(Sales) FROM west_superstore);
SELECT p.Customer Name FROM east_superstore e JOIN people p ON e.Customer ID = p.Customer ID WHERE e.Profit = (SELECT MAX(Profit) FROM east_superstore);
SELECT MAX(Quantity) AS Highest_Quantity FROM (     SELECT Quantity     FROM central_superstore     JOIN people ON central_superstore.Customer_ID = people.Customer_ID     WHERE people.City = 'Chicago' AND people.State = 'Illinois'          UNION ALL          SELECT Quantity     FROM east_superstore     JOIN people ON east_superstore.Customer_ID = people.Customer_ID     WHERE people.City = 'Chicago' AND people.State = 'Illinois'          UNION ALL          SELECT Quantity     FROM south_superstore     JOIN people ON south_superstore.Customer_ID = people.Customer_ID     WHERE people.City = 'Chicago' AND people.State = 'Illinois'          UNION ALL          SELECT Quantity     FROM west_superstore     JOIN people ON west_superstore.Customer_ID = people.Customer_ID     WHERE people.City = 'Chicago' AND people.State = 'Illinois' ) AS All_Orders;
SELECT cs.Order_Date, p.Product_Name FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE cs.Order_ID = 'CA-2011-137274' AND cs.Region = 'Central';
SELECT p.Customer_Name FROM people p JOIN south_superstore s ON p.Customer_ID = s.Customer_ID JOIN product pr ON s.Product_ID = pr.Product_ID WHERE pr.Product_Name = 'Xerox 23' AND s.Region = 'South';
SELECT p.Product_Name FROM product p JOIN central_superstore cs ON p.Product_ID = cs.Product_ID WHERE p.Category = 'Office Supplies' ORDER BY cs.Sales DESC LIMIT 1;
SELECT p.Customer Name FROM west_superstore w JOIN people p ON w.Customer ID = p.Customer ID ORDER BY w.Discount DESC LIMIT 1;
SELECT p.Product_Name FROM product p JOIN east_superstore e ON p.Product_ID = e.Product_ID WHERE e.Profit > (SELECT AVG(Profit) * 0.98 FROM east_superstore);
SELECT DISTINCT p.Customer_Name FROM people p JOIN east_superstore e ON p.Customer_ID = e.Customer_ID WHERE (Sales / (1 - Discount)) * Quantity - Profit > 80000;
SELECT COUNT(*)  FROM (     SELECT Order ID, Order Date      FROM central_superstore      WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Maxwell Schwartz')      AND strftime('%Y', "Order Date") = '2015'     UNION ALL     SELECT Order ID, Order Date      FROM east_superstore      WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Maxwell Schwartz')      AND strftime('%Y', "Order Date") = '2015'     UNION ALL     SELECT Order ID, Order Date      FROM south_superstore      WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Maxwell Schwartz')      AND strftime('%Y', "Order Date") = '2015'     UNION ALL     SELECT Order ID, Order Date      FROM west_superstore      WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Maxwell Schwartz')      AND strftime('%Y', "Order Date") = '2015' ) AS all_orders;
SELECT p.Customer_Name FROM central_superstore cs JOIN product pr ON cs.Product_ID = pr.Product_ID JOIN people p ON cs.Customer_ID = p.Customer_ID WHERE pr.Product_Name = 'Bush Mission Pointe Library' AND cs.Region = 'Central';
SELECT SUM(Profit) AS Total_Profit FROM (     SELECT Profit FROM central_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = 'Cisco SPA301')     UNION ALL     SELECT Profit FROM east_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = 'Cisco SPA301')     UNION ALL     SELECT Profit FROM south_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = 'Cisco SPA301')     UNION ALL     SELECT Profit FROM west_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = 'Cisco SPA301') ) AS All_Profits;
SELECT p.Product_Name FROM west_superstore ws JOIN people pe ON ws.Customer_ID = pe.Customer_ID JOIN product p ON ws.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Anne McFarland';
SELECT p.Product_Name FROM people pe JOIN central_superstore cs ON pe.Customer_ID = cs.Customer_ID JOIN product p ON cs.Product_ID = p.Product_ID WHERE pe.City = 'Coachella' UNION SELECT p.Product_Name FROM people pe JOIN east_superstore es ON pe.Customer_ID = es.Customer_ID JOIN product p ON es.Product_ID = p.Product_ID WHERE pe.City = 'Coachella' UNION SELECT p.Product_Name FROM people pe JOIN south_superstore ss ON pe.Customer_ID = ss.Customer_ID JOIN product p ON ss.Product_ID = p.Product_ID WHERE pe.City = 'Coachella' UNION SELECT p.Product_Name FROM people pe JOIN west_superstore ws ON pe.Customer_ID = ws.Customer_ID JOIN product p ON ws.Product_ID = p.Product_ID WHERE pe.City = 'Coachella';
SELECT      (SELECT COUNT(*) FROM east_superstore WHERE strftime('%Y', "Order Date") = '2015') AS Eastern_Orders,     (SELECT COUNT(*) FROM west_superstore WHERE strftime('%Y', "Order Date") = '2015') AS Western_Orders;
SELECT p.Product_Name FROM west_superstore ws JOIN people pe ON ws.Customer_ID = pe.Customer_ID JOIN product p ON ws.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Matt Abelman' AND ws.Order_Date LIKE '2013%';
SELECT SUM((Sales / (1 - Discount)) * Quantity) AS Total_Cost FROM (     SELECT Sales, Quantity, Discount     FROM central_superstore     WHERE Customer_ID = (SELECT Customer_ID FROM people WHERE Customer_Name = 'Brad Thomas')       AND strftime('%Y', Order_Date) = '2016'     UNION ALL     SELECT Sales, Quantity, Discount     FROM east_superstore     WHERE Customer_ID = (SELECT Customer_ID FROM people WHERE Customer_Name = 'Brad Thomas')       AND strftime('%Y', Order_Date) = '2016'     UNION ALL     SELECT Sales, Quantity, Discount     FROM south_superstore     WHERE Customer_ID = (SELECT Customer_ID FROM people WHERE Customer_Name = 'Brad Thomas')       AND strftime('%Y', Order_Date) = '2016'     UNION ALL     SELECT Sales, Quantity, Discount     FROM west_superstore     WHERE Customer_ID = (SELECT Customer_ID FROM people WHERE Customer_Name = 'Brad Thomas')       AND strftime('%Y', Order_Date) = '2016' ) AS Orders;
SELECT p.Customer_Name, p.City, p.Country FROM people p JOIN central_superstore cs ON p.Customer_ID = cs.Customer_ID JOIN product pr ON cs.Product_ID = pr.Product_ID WHERE pr.Product_Name = 'Plantronics Single Ear Headset' UNION SELECT p.Customer_Name, p.City, p.Country FROM people p JOIN east_superstore es ON p.Customer_ID = es.Customer_ID JOIN product pr ON es.Product_ID = pr.Product_ID WHERE pr.Product_Name = 'Plantronics Single Ear Headset' UNION SELECT p.Customer_Name, p.City, p.Country FROM people p JOIN south_superstore ss ON p.Customer_ID = ss.Customer_ID JOIN product pr ON ss.Product_ID = pr.Product_ID WHERE pr.Product_Name = 'Plantronics Single Ear Headset' UNION SELECT p.Customer_Name, p.City, p.Country FROM people p JOIN west_superstore ws ON p.Customer_ID = ws.Customer_ID JOIN product pr ON ws.Product_ID = pr.Product_ID WHERE pr.Product_Name = 'Plantronics Single Ear Headset';
SELECT cs.Ship_Date, p.Product_Name FROM central_superstore cs JOIN people pe ON cs.Customer_ID = pe.Customer_ID JOIN product p ON cs.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Gene Hale' UNION SELECT es.Ship_Date, p.Product_Name FROM east_superstore es JOIN people pe ON es.Customer_ID = pe.Customer_ID JOIN product p ON es.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Gene Hale' UNION SELECT ss.Ship_Date, p.Product_Name FROM south_superstore ss JOIN people pe ON ss.Customer_ID = pe.Customer_ID JOIN product p ON ss.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Gene Hale' UNION SELECT ws.Ship_Date, p.Product_Name FROM west_superstore ws JOIN people pe ON ws.Customer_ID = pe.Customer_ID JOIN product p ON ws.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Gene Hale';
SELECT COUNT(*)  FROM south_superstore  WHERE Ship Mode = 'First Class'  AND Product ID IN (SELECT Product ID FROM product WHERE Category = 'Furniture');
SELECT COUNT(*)  FROM south_superstore ss JOIN people p ON ss.Customer_ID = p.Customer_ID JOIN product pr ON ss.Product_ID = pr.Product_ID WHERE p.Customer_Name = 'Cindy Stewart'  AND pr.Category = 'Office Supplies';
SELECT Category FROM product p JOIN south_superstore s ON p.Product ID = s.Product ID GROUP BY Category ORDER BY SUM(s.Profit) DESC LIMIT 1;
SELECT p.Product_Name FROM east_superstore es JOIN product p ON es.Product_ID = p.Product_ID JOIN people pe ON es.Customer_ID = pe.Customer_ID WHERE pe.Customer_Name = 'Cindy Stewart';
SELECT DISTINCT p.Product_Name FROM west_superstore ws JOIN product p ON ws.Product_ID = p.Product_ID WHERE ws.Ship_Mode = 'Same Day'  AND ws.Ship_Date BETWEEN '2013-01-01' AND '2013-12-31';
SELECT DISTINCT p.Category FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID JOIN people pe ON cs.Customer_ID = pe.Customer_ID WHERE pe.Customer_Name = 'Sam Craven' UNION SELECT DISTINCT p.Category FROM east_superstore es JOIN product p ON es.Product_ID = p.Product_ID JOIN people pe ON es.Customer_ID = pe.Customer_ID WHERE pe.Customer_Name = 'Sam Craven';
SELECT SUM(Quantity) AS Total_Quantity FROM south_superstore WHERE Customer_ID = (SELECT Customer_ID FROM people WHERE Customer_Name = 'Cindy Stewart') AND Product_ID = (SELECT Product_ID FROM product WHERE Product_Name = 'Lexmark X 9575 Professional All-in-One Color Printer');
SELECT p.Product_Name FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE cs.Ship_Mode = 'Standard Class' GROUP BY p.Product_Name HAVING SUM(cs.Quantity) >= 10;
SELECT p.Category FROM west_superstore ws JOIN product p ON ws.Product_ID = p.Product_ID GROUP BY p.Category ORDER BY SUM(ws.Sales) ASC LIMIT 1;
SELECT SUM(Profit) AS Total_Profit FROM south_superstore WHERE Product_ID IN (     SELECT Product_ID     FROM product     WHERE Product_Name = 'Memorex Froggy Flash Drive 8 GB' );
SELECT SUM(Sales) AS Total_Sales FROM east_superstore WHERE Product_ID IN (     SELECT Product_ID     FROM product     WHERE Category = 'Furnitures' ) AND Order_Date BETWEEN '2016-01-01' AND '2016-12-31';
SELECT AVG(Sales) AS Average_Sales FROM (     SELECT Sales     FROM east_superstore     WHERE Product_ID = (SELECT Product_ID FROM product WHERE Product_Name = 'Sharp AL-1530CS Digital Copier')     UNION ALL     SELECT Sales     FROM west_superstore     WHERE Product_ID = (SELECT Product_ID FROM product WHERE Product_Name = 'Sharp AL-1530CS Digital Copier') ) AS combined_sales;
SELECT      (SUM(CASE WHEN p.Category = 'Office Supplies' AND cs.Region = 'Central' THEN 1 ELSE 0 END) * 100.0 / COUNT(cs.Product_ID)) AS Central_Office_Supplies_Percentage,     (SUM(CASE WHEN p.Category = 'Office Supplies' AND ss.Region = 'South' THEN 1 ELSE 0 END) * 100.0 / COUNT(ss.Product_ID)) AS South_Office_Supplies_Percentage FROM      central_superstore cs JOIN      product p ON cs.Product_ID = p.Product_ID JOIN      south_superstore ss ON ss.Product_ID = p.Product_ID WHERE      cs.Region = 'Central' OR ss.Region = 'South';
SELECT      SUM(CASE WHEN State = 'Texas' THEN 1 ELSE 0 END) /      NULLIF(SUM(CASE WHEN State = 'Indiana' THEN 1 ELSE 0 END), 0) AS Texas_Indiana_Ratio FROM      people;
SELECT ProductID, COUNT(OrderID) AS order_number FROM central_superstore WHERE ProductID IN (SELECT ProductID FROM product WHERE Sub_Category = 'Art') GROUP BY ProductID ORDER BY order_number DESC LIMIT 1;
SELECT p.Customer_Name FROM south_superstore s JOIN people p ON s.Customer_ID = p.Customer_ID WHERE s.Order_Date BETWEEN '2015-01-01' AND '2015-12-31' GROUP BY p.Customer_Name HAVING COUNT(s.Order_ID) > 3;
SELECT MAX(Profit) AS Highest_Profit FROM central_superstore WHERE Customer_ID IN (SELECT Customer_ID FROM people WHERE Customer_Name = 'Anna Chung');
SELECT COUNT(*) AS OrderCount FROM (     SELECT Order ID, Order Date     FROM central_superstore     WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Corey Roper')       AND YEAR(Order Date) = 2015     UNION ALL     SELECT Order ID, Order Date     FROM east_superstore     WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Corey Roper')       AND YEAR(Order Date) = 2015     UNION ALL     SELECT Order ID, Order Date     FROM south_superstore     WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Corey Roper')       AND YEAR(Order Date) = 2015     UNION ALL     SELECT Order ID, Order Date     FROM west_superstore     WHERE Customer ID = (SELECT Customer ID FROM people WHERE Customer Name = 'Corey Roper')       AND YEAR(Order Date) = 2015 ) AS AllOrders;
SELECT      (SUM(CASE WHEN Region = 'East' THEN Sales ELSE 0 END) -       SUM(CASE WHEN Region = 'West' THEN Sales ELSE 0 END)) AS Sales_Difference FROM      east_superstore UNION ALL SELECT      (SUM(CASE WHEN Region = 'East' THEN Sales ELSE 0 END) -       SUM(CASE WHEN Region = 'West' THEN Sales ELSE 0 END)) AS Sales_Difference FROM      west_superstore;
SELECT DISTINCT p.Product_Name FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE cs.Profit < 0;
SELECT p.Product_Name, ws.Ship_Mode FROM west_superstore ws JOIN product p ON ws.Product_ID = p.Product_ID WHERE DATEDIFF(ws.Ship_Date, ws.Order_Date) = (     SELECT MIN(DATEDIFF(Ship_Date, Order_Date))     FROM west_superstore );
SELECT COUNT(*) AS OrderCount FROM central_superstore WHERE Product_ID = (SELECT Product_ID FROM product WHERE Product_Name = 'O''Sullivan Plantations 2-Door Library') AND Customer_ID = (SELECT Customer_ID FROM people WHERE City = 'Landvery Oak') AND Ship_Mode = 'First Class';
SELECT p.Customer_Name FROM east_superstore es JOIN people p ON es.Customer_ID = p.Customer_ID WHERE p.Segment = 'Corporate' AND p.State = 'Rhode Island' AND es.Order_Date BETWEEN '2016-01-01' AND '2016-12-31' GROUP BY p.Customer_Name ORDER BY COUNT(es.Order_ID) DESC LIMIT 1;
SELECT COUNT(*)  FROM west_superstore  WHERE Sales >= 5000  AND Customer_ID IN (SELECT Customer_ID FROM people WHERE State = 'California');
SELECT p.Segment FROM east_superstore e JOIN people p ON e.Customer_ID = p.Customer_ID WHERE e.Sales / (1 - e.Discount) = (     SELECT MAX(Sales / (1 - Discount))     FROM east_superstore );
SELECT DATEDIFF(Ship_Date, Order_Date) AS Shipment_Duration FROM (     SELECT Ship_Date, Order_Date     FROM central_superstore     WHERE Order_ID = 'CA-2011-134103'     UNION ALL     SELECT Ship_Date, Order_Date     FROM east_superstore     WHERE Order_ID = 'CA-2011-134103'     UNION ALL     SELECT Ship_Date, Order_Date     FROM south_superstore     WHERE Order_ID = 'CA-2011-134103'     UNION ALL     SELECT Ship_Date, Order_Date     FROM west_superstore     WHERE Order_ID = 'CA-2011-134103' ) AS all_orders;
SELECT COUNT(*)  FROM (     SELECT * FROM central_superstore      WHERE Quantity > 5 AND Ship Mode = 'First Class'     UNION ALL     SELECT * FROM east_superstore      WHERE Quantity > 5 AND Ship Mode = 'First Class'     UNION ALL     SELECT * FROM south_superstore      WHERE Quantity > 5 AND Ship Mode = 'First Class'     UNION ALL     SELECT * FROM west_superstore      WHERE Quantity > 5 AND Ship Mode = 'First Class' ) AS all_orders;
SELECT Order ID, Order Date, Ship Date, Sales, Profit FROM central_superstore WHERE Profit < 0 LIMIT 3 UNION ALL SELECT Order ID, Order Date, Ship Date, Sales, Profit FROM east_superstore WHERE Profit < 0 LIMIT 3 UNION ALL SELECT Order ID, Order Date, Ship Date, Sales, Profit FROM south_superstore WHERE Profit < 0 LIMIT 3 UNION ALL SELECT Order ID, Order Date, Ship Date, Sales, Profit FROM west_superstore WHERE Profit < 0 LIMIT 3;
SELECT p.Product_Name FROM central_superstore cs JOIN people pe ON cs.Customer_ID = pe.Customer_ID JOIN product p ON cs.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Phillina Ober';
SELECT p.Customer_Name FROM south_superstore s JOIN people p ON s.Customer_ID = p.Customer_ID JOIN product pr ON s.Product_ID = pr.Product_ID WHERE pr.Product_Name = 'Hon Multipurpose Stacking Arm Chairs' ORDER BY s.Sales DESC LIMIT 1;
SELECT SUM(Profit) AS Total_Profit FROM (     SELECT Profit FROM central_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = "O'Sullivan Living Dimensions 2-Shelf Bookcases")     UNION ALL     SELECT Profit FROM east_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = "O'Sullivan Living Dimensions 2-Shelf Bookcases")     UNION ALL     SELECT Profit FROM south_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = "O'Sullivan Living Dimensions 2-Shelf Bookcases")     UNION ALL     SELECT Profit FROM west_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = "O'Sullivan Living Dimensions 2-Shelf Bookcases") ) AS All_Profits;
SELECT SUM(Quantity) AS Total_Sold FROM west_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = 'Hon Pagoda Stacking Chairs');
SELECT COUNT(*) AS NumberOfOrders FROM (     SELECT * FROM central_superstore     UNION ALL     SELECT * FROM east_superstore     UNION ALL     SELECT * FROM south_superstore     UNION ALL     SELECT * FROM west_superstore ) AS all_superstores WHERE Customer_ID = (SELECT Customer_ID FROM people WHERE Customer_Name = 'Aaron Bergman') AND Ship_Mode = 'Standard Class';
SELECT Sales / (1 - Discount) AS Original_Price FROM (     SELECT Sales, Discount     FROM central_superstore     WHERE Product_ID = (SELECT Product_ID FROM product WHERE Product_Name = 'Black Avery Flip-Chart Easel Binder')     UNION ALL     SELECT Sales, Discount     FROM east_superstore     WHERE Product_ID = (SELECT Product_ID FROM product WHERE Product_Name = 'Black Avery Flip-Chart Easel Binder')     UNION ALL     SELECT Sales, Discount     FROM south_superstore     WHERE Product_ID = (SELECT Product_ID FROM product WHERE Product_Name = 'Black Avery Flip-Chart Easel Binder')     UNION ALL     SELECT Sales, Discount     FROM west_superstore     WHERE Product_ID = (SELECT Product_ID FROM product WHERE Product_Name = 'Black Avery Flip-Chart Easel Binder') ) AS combined_sales WHERE Discount < 1;
SELECT p.Product_Name FROM people AS pe JOIN central_superstore AS cs ON pe.Customer_ID = cs.Customer_ID JOIN product AS p ON cs.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Aimee Bixby' UNION SELECT p.Product_Name FROM people AS pe JOIN east_superstore AS es ON pe.Customer_ID = es.Customer_ID JOIN product AS p ON es.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Aimee Bixby' UNION SELECT p.Product_Name FROM people AS pe JOIN south_superstore AS ss ON pe.Customer_ID = ss.Customer_ID JOIN product AS p ON ss.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Aimee Bixby' UNION SELECT p.Product_Name FROM people AS pe JOIN west_superstore AS ws ON pe.Customer_ID = ws.Customer_ID JOIN product AS p ON ws.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Aimee Bixby';
SELECT SUM(Profit) AS Total_Profit FROM (     SELECT Profit FROM central_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish')     UNION ALL     SELECT Profit FROM east_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish')     UNION ALL     SELECT Profit FROM south_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish')     UNION ALL     SELECT Profit FROM west_superstore WHERE Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish') ) AS All_Profits;
SELECT COUNT(*)  FROM east_superstore  JOIN product ON east_superstore.Product_ID = product.Product_ID  WHERE product.Category = 'Furniture'  AND east_superstore.Ship_Mode = 'Standard Class';
SELECT MAX(Profit) AS Highest_Profit FROM east_superstore WHERE Customer_ID IN (     SELECT Customer_ID     FROM people     WHERE City = 'Houston' AND State = 'Texas' );
SELECT COUNT(*)  FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE p.Category = 'Furniture';
SELECT DISTINCT p.Product_Name FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE cs.Ship_Date LIKE '2013-03%';
SELECT COUNT(*) AS OrderCount FROM central_superstore cs JOIN people p ON cs.Customer_ID = p.Customer_ID WHERE p.State = 'Texas';
SELECT COUNT(*)  FROM central_superstore  WHERE Customer_ID IN (SELECT Customer_ID FROM people WHERE Customer_Name = 'Alan Barnes')  AND Order_Date LIKE '2015%';
SELECT p.Product_Name  FROM east_superstore es  JOIN product p ON es.Product_ID = p.Product_ID  WHERE es.Order_ID = 'CA-2011-115791';
SELECT      (SUM(CASE WHEN Discount = 0.2 AND Customer ID IN (SELECT Customer ID FROM people WHERE State = 'Texas') THEN 1 ELSE 0 END) * 100.0) /      NULLIF(COUNT(Order ID), 0) AS percentage FROM      central_superstore;
SELECT      (SUM(CASE WHEN p.Category = 'Furniture' AND cs.Ship_Mode = 'First Class' AND cs.Ship_Date LIKE '2013%' THEN 1 ELSE 0 END) * 100.0) /      NULLIF(SUM(CASE WHEN p.Category = 'Furniture' AND cs.Ship_Date LIKE '2013%' THEN 1 ELSE 0 END), 0) AS percentage FROM      central_superstore cs JOIN      product p ON cs.Product_ID = p.Product_ID;
SELECT p.Customer_Name  FROM west_superstore w  JOIN people p ON w.Customer_ID = p.Customer_ID  WHERE w.Order_Date = '2013-08-12' AND w.Discount = 0.2;
SELECT Order_ID  FROM central_superstore  WHERE Order_Date = '2013-06-03'  AND Product_ID IN (SELECT Product_ID FROM product WHERE Product_Name = 'Security-Tint Envelopes');
SELECT p.Product_Name FROM central_superstore cs JOIN people pe ON cs.Customer_ID = pe.Customer_ID JOIN product p ON cs.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Bill Shonely' AND pe.Region = 'Central';
SELECT p.Customer_Name FROM west_superstore ws JOIN people p ON ws.Customer_ID = p.Customer_ID WHERE ws.Quantity = 8;
SELECT SUM(cs.Profit) AS Total_Profit FROM central_superstore cs JOIN people p ON cs.Customer_ID = p.Customer_ID WHERE p.State = 'Texas' AND p.City = 'Houston';
SELECT p.Customer_Name  FROM east_superstore es  JOIN people p ON es.Customer_ID = p.Customer_ID  WHERE es.Ship_Date = '2013-03-05';
SELECT p.Product_Name FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE cs.Order_Date LIKE '2016%' ORDER BY cs.Profit ASC LIMIT 1;
SELECT p.Customer Name FROM east_superstore es JOIN people p ON es.Customer ID = p.Customer ID WHERE es.Order ID = 'CA-2011-118976';
SELECT p.Product_Name FROM south_superstore s JOIN product p ON s.Product_ID = p.Product_ID WHERE s.Sales = (SELECT MAX(Sales) FROM south_superstore);
SELECT p.Sub_Category,         e.Sales,         e.Profit  FROM east_superstore e JOIN product p ON e.Product_ID = p.Product_ID WHERE e.Order_ID = 'US-2011-126571';
SELECT p.Product_Name FROM (     SELECT Product_ID, MAX(Quantity) AS Max_Quantity     FROM (         SELECT Product_ID, Quantity FROM central_superstore         UNION ALL         SELECT Product_ID, Quantity FROM east_superstore         UNION ALL         SELECT Product_ID, Quantity FROM south_superstore         UNION ALL         SELECT Product_ID, Quantity FROM west_superstore     ) AS All_Stores     GROUP BY Product_ID ) AS Max_Quantities JOIN product p ON Max_Quantities.Product_ID = p.Product_ID WHERE Max_Quantities.Max_Quantity = (     SELECT MAX(Quantity)     FROM (         SELECT Quantity FROM central_superstore         UNION ALL         SELECT Quantity FROM east_superstore         UNION ALL         SELECT Quantity FROM south_superstore         UNION ALL         SELECT Quantity FROM west_superstore     ) AS All_Quantities );
SELECT p.Customer_Name FROM south_superstore s JOIN people p ON s.Customer_ID = p.Customer_ID WHERE s.Ship_Mode = 'Standard Class'  AND s.Sales > (SELECT AVG(Sales) * 0.88 FROM (     SELECT Sales FROM central_superstore     UNION ALL     SELECT Sales FROM east_superstore     UNION ALL     SELECT Sales FROM south_superstore     UNION ALL     SELECT Sales FROM west_superstore ) AS all_sales);
SELECT      (SUM(CASE WHEN cs.Discount = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(cs.Discount)) AS percentage FROM      central_superstore cs JOIN      people p ON cs.Customer_ID = p.Customer_ID WHERE      p.State = 'Indiana';
SELECT (COUNT(CASE WHEN race = 'W' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_white_male_officers FROM officers WHERE gender = 'M';
SELECT      (COUNT(CASE WHEN subject_count > 3 THEN case_number END) * 100.0 / COUNT(case_number)) AS percentage FROM      incidents WHERE      date BETWEEN '2010-01-01' AND '2015-12-31';
SELECT YEAR(date) AS year, COUNT(case_number) AS case_count FROM incidents WHERE subject_weapon = 'Handgun' GROUP BY YEAR(date) ORDER BY case_count DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN subject_statuses = 'injured' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_injured FROM      incidents WHERE      grand_jury_disposition = 'No Bill';
SELECT      (SELECT COUNT(case_number) FROM incidents WHERE subject_weapon = 'Vehicle' AND date BETWEEN '2007-01-01' AND '2007-12-31') AS cases_2007,     (SELECT COUNT(case_number) FROM incidents WHERE subject_weapon = 'Vehicle' AND date BETWEEN '2008-01-01' AND '2008-12-31') AS cases_2008,     (SELECT COUNT(case_number) FROM incidents WHERE subject_weapon = 'Vehicle' AND date BETWEEN '2008-01-01' AND '2008-12-31') -      (SELECT COUNT(case_number) FROM incidents WHERE subject_weapon = 'Vehicle' AND date BETWEEN '2007-01-01' AND '2007-12-31') AS difference
SELECT      (COUNT(CASE WHEN subject_statuses = 'Shoot and Miss' THEN 1 END) * 100.0 / COUNT(*)) AS percent_shoot_and_miss FROM      incidents WHERE      subject_weapon = 'Handgun';
SELECT o.last_name, o.gender FROM officers o JOIN incidents i ON o.case_number = i.case_number WHERE i.grand_jury_disposition = 'No Bill';
SELECT i.case_number, i.subject_statuses, i.subject_weapon FROM incidents i JOIN subjects s ON i.case_number = s.case_number WHERE s.gender = 'F';
SELECT i.case_number, i.location, i.subject_statuses FROM incidents i JOIN subjects s ON i.case_number = s.case_number WHERE s.gender = 'M';
SELECT i.case_number, i.grand_jury_disposition FROM incidents i JOIN officers o ON i.case_number = o.case_number WHERE o.full_name = 'Evenden, George';
SELECT o.last_name, i.subject_statuses FROM incidents i JOIN officers o ON i.case_number = o.case_number WHERE i.case_number = '134472-2015';
SELECT subjects.last_name, subjects.gender, subjects.race, incidents.case_number FROM incidents JOIN subjects ON incidents.case_number = subjects.case_number WHERE incidents.subject_statuses = 'Deceased';
SELECT      (COUNT(CASE WHEN subject_weapon = 'Vehicle' THEN case_number END) * 100.0 / COUNT(case_number)) AS female_vehicle_percentage FROM      subjects WHERE      gender = 'F';
SELECT      (COUNT(CASE WHEN subject_weapon = 'knife' THEN case_number END) * 1.0) /      (COUNT(CASE WHEN subject_weapon = 'toy handgun' THEN case_number END) * 1.0) AS weapon_ratio FROM      incidents WHERE      subject_statuses = 'Injured';
SELECT *  FROM incidents  WHERE date BETWEEN '2012-01-01' AND '2012-12-31'  AND subject_statuses = 'Deceased';
SELECT (COUNT(CASE WHEN race = 'B' THEN 1 END) * 100.0 / COUNT(*)) AS black_officer_percentage FROM officers WHERE gender = 'M';
SELECT COUNT(*)  FROM incidents i JOIN officers o ON i.case_number = o.case_number WHERE i.subject_weapon = 'Vehicle' AND o.gender = 'F';
SELECT COUNT(*)  FROM incidents  WHERE subject_statuses = 'Deceased'  AND subjects IN (SELECT full_name FROM subjects WHERE gender = 'F');
SELECT COUNT(*)  FROM officers  JOIN incidents ON officers.case_number = incidents.case_number  WHERE officers.race = 'B'  AND incidents.date BETWEEN '2010-01-01' AND '2015-12-31';
SELECT COUNT(case_number)  FROM incidents  WHERE date BETWEEN '2015-06-01' AND '2015-06-30';
SELECT COUNT(*)  FROM incidents  WHERE subject_statuses = 'injured'    AND date BETWEEN '2006-01-01' AND '2013-12-31'    AND subject_weapon = 'handgun';
SELECT subject_weapon FROM incidents WHERE subject_statuses = 'Deceased' GROUP BY subject_weapon ORDER BY COUNT(subject_weapon) DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN race = 'W' AND gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS proportion_white_males,     (COUNT(CASE WHEN race = 'W' AND gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS proportion_white_females FROM officers;
SELECT      (SELECT COUNT(*) FROM subjects WHERE race = 'B' AND gender = 'F') -      (SELECT COUNT(*) FROM subjects WHERE race = 'W' AND gender = 'F') AS difference
SELECT      (COUNT(CASE WHEN subject_weapon = 'rifles' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_deaths_by_rifles FROM      incidents WHERE      subject_statuses = 'Deceased';
SELECT i.subject_weapon, s.race, s.gender FROM incidents i JOIN subjects s ON i.case_number = s.case_number WHERE i.case_number = '031347-2015';
SELECT s.race, s.gender FROM incidents i JOIN officers o ON i.case_number = o.case_number JOIN subjects s ON i.case_number = s.case_number WHERE i.subject_statuses = 'Deceased Injured' AND o.full_name = 'Ruben Fredirick';
SELECT      (COUNT(CASE WHEN o.gender = 'M' THEN o.case_number END) * 100.0 / COUNT(o.case_number)) AS male_officer_proportion FROM      incidents i JOIN      officers o ON i.case_number = o.case_number WHERE      i.subject_statuses = 'Injured';
SELECT COUNT(DISTINCT Chromosome) AS NumberOfChromosomes FROM Genes WHERE Localization = 'plasma membrane';
SELECT COUNT(*)  FROM Genes  WHERE Essential = 'No' AND Localization = 'Nucleus';
SELECT COUNT(DISTINCT g.GeneID) FROM Genes g JOIN Classification c ON g.GeneID = c.GeneID WHERE g.Phenotype LIKE '%nucleic acid metabolism%' AND c.Localization = 'vacuole';
SELECT Localization FROM Genes WHERE Chromosome IN (     SELECT Chromosome     FROM Genes     GROUP BY Chromosome     ORDER BY COUNT(DISTINCT GeneID) DESC     LIMIT 1 );
SELECT MAX(i.Expression_Corr) AS Highest_Expression_Corr FROM Interactions i JOIN Classification c1 ON i.GeneID1 = c1.GeneID JOIN Classification c2 ON i.GeneID2 = c2.GeneID WHERE c1.Localization = 'nucleus' AND c2.Localization = 'nucleus';
SELECT g1.Function AS Function_Gene1, g2.Function AS Function_Gene2 FROM Interactions i JOIN Genes g1 ON i.GeneID1 = g1.GeneID JOIN Genes g2 ON i.GeneID2 = g2.GeneID ORDER BY i.Expression_Corr ASC LIMIT 1;
SELECT COUNT(*)  FROM Interactions i JOIN Genes g1 ON i.GeneID1 = g1.GeneID JOIN Genes g2 ON i.GeneID2 = g2.GeneID WHERE g1.Class != 'motorproteins' AND g2.Class != 'motorproteins'  AND i.Expression_Corr < 0;
SELECT MAX(i.Expression_Corr) AS Highest_Expression_Corr FROM Interactions i JOIN Genes g1 ON i.GeneID1 = g1.GeneID JOIN Genes g2 ON i.GeneID2 = g2.GeneID WHERE g1.Chromosome = 8 AND g2.Chromosome = 6;
SELECT g.Motif  FROM Genes g  WHERE g.Localization = 'cytoplasm' AND g.Chromosome = 7;
SELECT COUNT(*)  FROM Genes  WHERE Essential = 'No'  AND Function = 'transcription'  AND Localization <> 'cytoplasm';
SELECT COUNT(*)  FROM Interactions i JOIN Genes g1 ON i.GeneID1 = g1.GeneID JOIN Genes g2 ON i.GeneID2 = g2.GeneID WHERE i.Expression_Corr > 0 AND g1.Essential = 'No' AND g2.Essential = 'No';
SELECT      COUNT(CASE WHEN g1.Chromosome > 20 AND g2.Chromosome > 20 THEN 1 END) * 1.0 / COUNT(*) AS Possibility FROM      Interactions i JOIN      Genes g1 ON i.GeneID1 = g1.GeneID JOIN      Genes g2 ON i.GeneID2 = g2.GeneID WHERE      i.Expression_Corr > 0;
SELECT AVG(i.Expression_Corr) AS Average_Expression_Corr FROM Interactions i JOIN Genes g1 ON i.GeneID1 = g1.GeneID JOIN Genes g2 ON i.GeneID2 = g2.GeneID WHERE g1.Class = 'ATPases' AND g2.Class = 'ATPases';
SELECT GeneID  FROM Genes  WHERE Localization = 'cytoplasm' AND Function = 'metabolism'  ORDER BY GeneID;
SELECT COUNT(DISTINCT GeneID) AS TotalGenes FROM Genes WHERE Localization IN ('plasma', 'nucleus');
SELECT      COUNT(CASE WHEN i.Expression_Corr < 0 THEN 1 END) * 100.0 / COUNT(*) AS Negative_Correlation_Percentage FROM      Interactions i WHERE      i.Type = 'physical';
SELECT      (COUNT(CASE WHEN g.Class = 'unknown' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_unknown_class,     COUNT(CASE WHEN g.Class = 'unknown' AND g.Phenotype != 'conditional' THEN 1 END) AS not_conditional_count FROM      Genes g JOIN      Classification c ON g.GeneID = c.GeneID WHERE      c.Localization = 'cytoskeleton';
SELECT i.Type FROM Genes g JOIN Interactions i ON g.GeneID = i.GeneID1 OR g.GeneID = i.GeneID2 WHERE g.Function IN ('cellular transport', 'transport medicine')  AND g.Essential = 'non-essential';
SELECT DISTINCT g.GeneID FROM Genes g JOIN Interactions i ON g.GeneID = i.GeneID1 JOIN Classification c ON i.GeneID2 = c.GeneID WHERE c.Localization = 'nucleus' AND i.Expression_Corr > 0;
SELECT g.GeneID FROM Genes g JOIN Interactions i ON g.GeneID = i.GeneID1 WHERE g.Essential = 'Yes'   AND g.Class = 'Transcription Factor'   AND g.Localization = 'Nucleus'   AND i.Type = 'Genetic';
SELECT COUNT(*)  FROM Genes g  LEFT JOIN Interactions i ON g.GeneID = i.GeneID1  WHERE g.Essential = 'No'    AND g.Class != 'motorprotein'    AND g.Phenotype = 'cell cycle defects'    AND (i.Type IS NULL OR i.Type != 'physical');
SELECT      (COUNT(CASE WHEN i.Type = 'positive' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_positive_interaction FROM      Genes g LEFT JOIN      Interactions i ON g.GeneID = i.GeneID1 OR g.GeneID = i.GeneID2 WHERE      g.Phenotype = 'nucleic acid metabolism defects' AND      g.Motif = 'PS00107';
WITH Negatively_Correlated AS (     SELECT g1.GeneID AS GeneID1, g2.GeneID AS GeneID2, g1.Essential     FROM Interactions i     JOIN Genes g1 ON i.GeneID1 = g1.GeneID     JOIN Genes g2 ON i.GeneID2 = g2.GeneID     WHERE i.Expression_Corr < 0 ), Counts AS (     SELECT          SUM(CASE WHEN Essential = 'No' THEN 1 ELSE 0 END) AS Non_Essential_Count,         SUM(CASE WHEN Essential = 'Yes' THEN 1 ELSE 0 END) AS Essential_Count     FROM Negatively_Correlated ) SELECT      Non_Essential_Count,     Essential_Count,     (Non_Essential_Count * 100.0 / NULLIF(Non_Essential_Count + Essential_Count, 0)) AS Percentage_Non_Essential FROM Counts;
SELECT p.App, ur.Translated_Review FROM playstore p LEFT JOIN user_reviews ur ON p.App = ur.App WHERE p.Last_Updated BETWEEN '2018-01-01' AND '2018-01-31'  AND ur.Sentiment = 'positive';
SELECT COUNT(*) AS Mild_Likes, p.Last_Updated FROM user_reviews ur JOIN playstore p ON ur.App = p.App WHERE ur.App = '7 Minute Workout' AND ur.Sentiment_Polarity >= 0 AND ur.Sentiment_Polarity < 0.5;
SELECT COUNT(*) AS Neutral_User_Count, p.Rating FROM user_reviews u JOIN playstore p ON u.App = p.App WHERE u.App = 'HTC Weather' AND u.Sentiment = 'Neutral';
SELECT p.App, p.Category FROM playstore p JOIN (     SELECT App, COUNT(*) AS negative_count     FROM user_reviews     WHERE Sentiment_Polarity = -1     GROUP BY App ) ur ON p.App = ur.App ORDER BY ur.negative_count DESC LIMIT 1;
SELECT AVG(ur.Sentiment_Polarity) AS Average_Sentiment_Polarity, p.Content_Rating FROM user_reviews ur JOIN playstore p ON ur.App = p.App WHERE p.App = 'Cooking Fever';
SELECT MIN(ur.Sentiment_Polarity) AS Lowest_Polarity, p.Installs FROM user_reviews ur JOIN playstore p ON ur.App = p.App WHERE p.App = 'Basketball Stars' AND ur.Sentiment_Polarity < -0.5;
SELECT COUNT(*) AS Review_Count, Current_Ver  FROM playstore  JOIN user_reviews ON playstore.App = user_reviews.App  WHERE playstore.App = 'Akinator' AND user_reviews.Sentiment_Subjectivity <= 0.5;
SELECT COUNT(*) FROM playstore WHERE Rating = 5;
SELECT App, Installs  FROM playstore  WHERE Price = 0  ORDER BY Installs DESC  LIMIT 5;
SELECT App, Reviews FROM playstore ORDER BY Reviews DESC LIMIT 10;
SELECT COUNT(*) AS Neutral_User_Count, p.Category FROM user_reviews ur JOIN playstore p ON ur.App = p.App WHERE ur.App = '10 Best Foods for You' AND ur.Sentiment = 'Neutral';
SELECT p.App, p.Installs FROM playstore p JOIN user_reviews r ON p.App = r.App WHERE r.Sentiment_Polarity = 'Positive';
SELECT p.App, u.Translated_Review FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE p.Rating = 3.9;
SELECT COUNT(DISTINCT p.App) AS Compatible_Apps_Count, u.Translated_Review, u.Sentiment FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE p.Type = 'Free' AND p.Content_Rating = 'Everyone' AND p.App LIKE '%Android Ver 8.0 and up%' GROUP BY u.Translated_Review, u.Sentiment;
SELECT p.App, SUM(u.Sentiment_Subjectivity) AS Total_Sentiment_Subjectivity FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE LENGTH(p.Genres) - LENGTH(REPLACE(p.Genres, ',', '')) > 0 GROUP BY p.App HAVING COUNT(DISTINCT p.Genres) > 1;
SELECT p.App, u.Sentiment FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE p."Last Updated" < '2015-01-01';
SELECT SUM(p.Installs) AS total_installs, u.Translated_Review FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE p.Content_Rating = 'Adults only 18+' GROUP BY u.Translated_Review;
SELECT p.App, AVG(u.Sentiment_Polarity) AS Sentiment_Polarity FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE (p.Price * p.Installs) = (SELECT MAX(Price * Installs) FROM playstore) GROUP BY p.App;
SELECT AVG(p.Rating) AS average_rating, SUM(CASE WHEN u.Sentiment = 'Positive' THEN 1 ELSE 0 END) AS positive_users FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE p.Category = 'COMICS';
SELECT Rating FROM playstore WHERE App = 'Draw A Stickman';
SELECT COUNT(*)  FROM user_reviews  WHERE App = 'Brit + Co' AND Translated_Review IS NOT NULL;
SELECT App, Reviews  FROM playstore  WHERE Genres = 'Shopping'  ORDER BY Reviews DESC  LIMIT 5;
SELECT COUNT(*)  FROM user_reviews  WHERE App = 'Dino War: Rise of Beasts' AND Sentiment = 'Neutral';
SELECT App FROM playstore WHERE Installs = '5,000+';
SELECT Translated_Review  FROM user_reviews  WHERE App = 'Dog Run - Pet Dog Simulator' AND Sentiment = 'Negative';
SELECT p.App, COUNT(u.Sentiment) AS Negative_Comments FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE p.Type = 'Free' AND u.Sentiment = 'Negative' GROUP BY p.App ORDER BY Negative_Comments DESC LIMIT 1;
SELECT COUNT(*)  FROM user_reviews  WHERE Sentiment = 'Negative'  AND App IN (     SELECT App      FROM playstore      WHERE Installs >= '100000000' );
SELECT p.Content_Rating FROM playstore p JOIN user_reviews r ON p.App = r.App WHERE r.Translated_Review LIKE '%gr8%';
SELECT SUM(ur.Sentiment_Polarity) AS Total_Sentiment_Polarity FROM user_reviews ur JOIN playstore p ON ur.App = p.App WHERE p.Price = (SELECT MAX(Price) FROM playstore);
SELECT p.Rating, r.Translated_Review  FROM playstore p  JOIN user_reviews r ON p.App = r.App  WHERE p.App = 'Garden Coloring Book';
SELECT ur.App FROM user_reviews ur JOIN playstore p ON ur.App = p.App WHERE p.Genres = 'Photography' GROUP BY ur.App ORDER BY SUM(ur.Sentiment_Subjectivity) DESC LIMIT 1;
SELECT ur.Translated_Review  FROM user_reviews ur  JOIN playstore p ON ur.App = p.App  WHERE p.Rating = 1 AND p.Content_Rating = 'Mature 17+';
SELECT p.Installs FROM playstore p JOIN (     SELECT App, SUM(Sentiment_Polarity) AS total_polarity     FROM user_reviews     GROUP BY App ) r ON p.App = r.App WHERE r.total_polarity = (     SELECT MAX(total_polarity)     FROM (         SELECT SUM(Sentiment_Polarity) AS total_polarity         FROM user_reviews         GROUP BY App     ) AS subquery );
SELECT COUNT(*)  FROM user_reviews  WHERE Sentiment = 'Neutral'  AND App IN (SELECT App FROM playstore WHERE Genres LIKE '%Weather%');
SELECT p.App, COUNT(u.Translated_Review) AS No_Comment_Reviews FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE p.Installs > 1000000000 AND u.Translated_Review = 'nan' GROUP BY p.App ORDER BY No_Comment_Reviews DESC LIMIT 1;
SELECT p.Rating, SUM(u.Sentiment_Subjectivity) AS Total_Sentiment_Subjectivity FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE p.App = 'Onefootball - Soccer Scores' GROUP BY p.Rating;
SELECT      (SUM(CASE WHEN p."Content Rating" = 'Teen' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM      playstore p JOIN      user_reviews r ON p.App = r.App WHERE      r.Translated_Review = 'nan';
SELECT App FROM playstore WHERE Rating = 5;
SELECT App  FROM playstore  WHERE Reviews > 75000000 AND Content_Rating = 'Teen';
SELECT DISTINCT Genres  FROM playstore  WHERE Installs = '1,000,000,000+';
SELECT AVG(Price) AS average_price  FROM playstore  WHERE Genres = 'Dating';
SELECT AVG(Installs) AS Average_Downloads FROM playstore WHERE Category = 'ENTERTAINMENT' AND Size <= '1.0M';
SELECT AVG(Reviews) AS average_review FROM playstore WHERE Rating = 5;
SELECT Genres, COUNT(*) AS Review_Count FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE u.Sentiment_Polarity > 0.5 GROUP BY Genres ORDER BY Review_Count DESC LIMIT 3;
SELECT      (COUNT(DISTINCT p.App) * 100.0 / COUNT(DISTINCT p.App)) AS percentage FROM      playstore p JOIN      user_reviews r ON p.App = r.App WHERE      p.Rating = 4.7 GROUP BY      p.App HAVING      SUM(CASE WHEN r.Sentiment = 'Positive' THEN 1 ELSE 0 END) >      SUM(CASE WHEN r.Sentiment = 'Negative' THEN 1 ELSE 0 END);
SELECT p.App, AVG(u.Sentiment_Polarity) AS Average_Rating FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE u.Sentiment != 'Negative' GROUP BY p.App;
SELECT      p.App,     (SUM(CASE WHEN u.Sentiment = 'Negative' THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN u.Sentiment IN ('Positive', 'Negative') THEN 1 ELSE 0 END), 0)) AS negative_sentiment_percentage FROM      playstore p LEFT JOIN      user_reviews u ON p.App = u.App WHERE      p.Last_Updated < '2015-01-01' GROUP BY      p.App;
SELECT      (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM playstore WHERE Type = 'Free')) AS percentage FROM      playstore WHERE      Type = 'Free' AND      Rating >= 4.5 AND      Last_Updated < '2019-01-01';
SELECT Genres FROM playstore WHERE App = 'Honkai Impact 3rd';
SELECT Rating FROM playstore WHERE App = 'Learn C++';
SELECT AVG(Price) AS average_price FROM playstore WHERE Genres LIKE '%Arcade%' AND "Content Rating" = 'Everyone 10+';
SELECT p.Size, COUNT(u.App) AS Positive_Users FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE p.App = 'Browser 4G' AND u.Sentiment_Polarity = 0.5 GROUP BY p.Size;
SELECT p.App, p.Installs  FROM playstore p  JOIN user_reviews r ON p.App = r.App  WHERE r.Sentiment_Subjectivity = 0.3;
SELECT AVG(ur.Sentiment_Polarity) AS Average_Sentiment_Polarity, p.Rating FROM user_reviews ur JOIN playstore p ON ur.App = p.App WHERE ur.App = 'Golf GPS Rangefinder: Golf Pad';
SELECT p.App, p.Rating, COUNT(u.Sentiment) AS Negative_Sentiment_Count FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE p.Genres LIKE '%Puzzle%' AND u.Sentiment = 'negative' GROUP BY p.App, p.Rating ORDER BY p.Rating ASC LIMIT 5;
SELECT      (SUM(CASE WHEN Sentiment = 'Positive' THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN Sentiment = 'Negative' THEN 1 ELSE 0 END), 0)) AS percentage_ratio,     (SELECT MAX(Version) FROM playstore WHERE App = 'Fate/Grand Order') AS current_version FROM      user_reviews WHERE      App = 'Fate/Grand Order';
SELECT      p.Installs,      (SUM(CASE WHEN u.Sentiment = 'Positive' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS Positive_Percentage FROM      playstore p JOIN      user_reviews u ON p.App = u.App WHERE      p.App = 'FREEDOME VPN Unlimited anonymous Wifi Security';
SELECT MAX(ur.Sentiment_Polarity) AS Highest_Sentiment_Polarity, p.Genres FROM user_reviews ur JOIN playstore p ON ur.App = p.App WHERE ur.App = 'Honkai Impact 3rd';
SELECT p.Rating, COUNT(u.App) AS Dislike_Count FROM playstore p LEFT JOIN user_reviews u ON p.App = u.App WHERE p.App = 'Dragon Ball Legends' AND u.Sentiment_Polarity < -0.5 GROUP BY p.Rating;
SELECT p.App, r.Translated_Review FROM playstore p LEFT JOIN user_reviews r ON p.App = r.App WHERE p.Category = 'EDUCATION' AND p.Rating = 1;
SELECT p.App, r.Translated_Review FROM playstore p JOIN user_reviews r ON p.App = r.App WHERE p.Type = 'Free' AND p.Category = 'SPORTS';
SELECT COUNT(p.App) AS Teen_RPG_Count, AVG(u.Sentiment_Polarity) AS Average_Sentiment_Polarity FROM playstore p JOIN user_reviews u ON p.App = u.App WHERE p.Genres LIKE '%Role Playing%' AND p.Content_Rating = 'Teen';
SELECT      AVG(p.Rating) AS average_rating,     (SUM(CASE WHEN u.Sentiment = 'Positive' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS positive_sentiment_percentage FROM      playstore p JOIN      user_reviews u ON p.App = u.App WHERE      p.Genres LIKE '%Racing%'
SELECT Region, COUNT(SalesTeamID) AS SalesTeamCount FROM "Sales Team" JOIN Regions ON "Sales Team".Region = Regions.Region GROUP BY Region ORDER BY SalesTeamCount DESC LIMIT 1;
SELECT * FROM Customers WHERE CustomerNames LIKE '%Group%';
SELECT AVG(MedianIncome) AS AverageMedianIncome FROM StoreLocations WHERE Type = 'City';
SELECT st.Sales Team, r.Region FROM Sales Orders so JOIN Sales Team st ON so._SalesTeamID = st.SalesTeamID JOIN Regions r ON st.Region = r.Region WHERE so.OrderNumber = 'SO - 000137';
SELECT so.OrderNumber, p.ProductName FROM SalesOrders so JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID JOIN Products p ON so._ProductID = p.ProductID WHERE st.SalesTeam = 'Douglas Tucker';
SELECT c.CustomerNames FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID JOIN Products p ON so._ProductID = p.ProductID WHERE so.OrderDate BETWEEN '2020-01-01' AND '2020-12-31'   AND p.ProductName = 'Cocktail Glasses'   AND so.DiscountApplied = (       SELECT MAX(DiscountApplied)       FROM SalesOrders       WHERE OrderDate BETWEEN '2020-01-01' AND '2020-12-31'         AND _ProductID IN (SELECT ProductID FROM Products WHERE ProductName = 'Cocktail Glasses')   );
SELECT so.OrderNumber, sl.CityName FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE so.SalesChannel = 'In-Store';
SELECT c.CustomerNames, so.OrderDate, MAX(so.UnitCost) AS MostExpensive FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID GROUP BY c.CustomerNames, so.OrderDate ORDER BY MostExpensive DESC LIMIT 1;
SELECT so.OrderNumber  FROM Sales Orders so JOIN Customers c ON so._CustomerID = c.CustomerID WHERE c.Customer Names = 'Rochester Ltd'  AND SUBSTR(so.OrderDate, -2) = '18';
SELECT so.OrderNumber, p.ProductName, st.SalesTeam FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE so.WarehouseCode = 'WARE-NMK1003';
SELECT DISTINCT c.CustomerNames FROM Customers c JOIN SalesOrders so ON c.CustomerID = so._CustomerID WHERE so.SalesChannel = 'Online';
SELECT AVG(Unit_Price - Unit_Cost) AS Average_Net_Profit FROM Sales_Orders JOIN Products ON Sales_Orders._ProductID = Products.ProductID WHERE Products.Product_Name = 'Bakeware';
SELECT st.Sales Team FROM Sales Orders so JOIN Sales Team st ON so._SalesTeamID = st.SalesTeamID WHERE YEAR(so.OrderDate) = 2020 GROUP BY st.Sales Team ORDER BY SUM((so.Unit Price - so.Unit Cost) * so.Order Quantity) DESC LIMIT 1;
SELECT so.OrderNumber,         (so.UnitPrice - so.UnitCost) AS NetProfit FROM SalesOrders so JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE st.Sales Team = 'Joshua Bennett';
SELECT      (COUNT(CASE WHEN p.ProductName = 'Home Fragrances' THEN so.OrderNumber END) * 100.0 / COUNT(so.OrderNumber)) AS percentage FROM      SalesOrders so JOIN      Products p ON so._ProductID = p.ProductID WHERE      so.ShipDate BETWEEN '2018-07-01' AND '2018-07-31';
SELECT CustomerID, CustomerNames  FROM Customers  WHERE CustomerNames LIKE 'W%';
SELECT ProductID, ProductName  FROM Products  WHERE ProductName LIKE '%Outdoor%';
SELECT COUNT(DISTINCT _ProductID) AS ProductCount FROM Sales Orders WHERE Discount Applied = 0.4   AND Sales Channel = 'In-Store'   AND WarehouseCode = 'WARE-NMK1003';
SELECT "City Name", "Median Income" FROM "Store Locations" WHERE "State" = 'Florida' ORDER BY Population DESC LIMIT 1;
SELECT StoreID, CityName, Region FROM StoreLocations JOIN Regions ON StoreLocations.StateCode = Regions.StateCode WHERE County = 'Allen';
SELECT StoreID, CityName, State, Region FROM StoreLocations WHERE Type = (     SELECT Type     FROM StoreLocations     GROUP BY Type     ORDER BY COUNT(StoreID) ASC     LIMIT 1 );
SELECT r.Region, st.Sales Team,         COUNT(CASE WHEN so.Sales Channel = 'In-Store' THEN so.OrderNumber END) AS InStoreOrders,        COUNT(CASE WHEN so.Sales Channel = 'Online' THEN so.OrderNumber END) AS OnlineOrders FROM Sales Orders so JOIN Sales Team st ON so._SalesTeamID = st.SalesTeamID JOIN Regions r ON st.Region = r.Region WHERE st.SalesTeamID = 18 GROUP BY r.Region, st.Sales Team HAVING COUNT(CASE WHEN so.Sales Channel = 'In-Store' THEN so.OrderNumber END) >         COUNT(CASE WHEN so.Sales Channel = 'Online' THEN so.OrderNumber END);
SELECT      (COUNT(CASE WHEN so.SalesChannel = 'In-Store' THEN so.OrderNumber END) * 100.0 / COUNT(so.OrderNumber)) AS percentage FROM      SalesOrders so JOIN      Customers c ON so._CustomerID = c.CustomerID WHERE      c.CustomerNames = 'Medline';
SELECT c.CustomerNames,         DATEDIFF(so.DeliveryDate, so.OrderDate) AS LastingDeliveryPeriod FROM Customers c JOIN SalesOrders so ON c.CustomerID = so._CustomerID JOIN Products p ON so._ProductID = p.ProductID WHERE p.ProductName = 'Bedroom Furniture'    AND so.SalesChannel = 'Wholesale'    AND SUBSTR(so.OrderDate, -2) = '19';
SELECT c.CustomerNames, p.ProductName FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID JOIN Products p ON so._ProductID = p.ProductID WHERE (so.UnitPrice - so.UnitCost) > 3800;
SELECT DISTINCT sl."City Name" FROM "Store Locations" sl JOIN "Regions" r ON sl."StateCode" = r."StateCode" WHERE r."State" = 'California' AND sl."Water Area" = 0;
SELECT      (COUNT(CASE WHEN st.Sales Team = 'Carlos Miller' THEN so.OrderNumber END) * 100.0 / COUNT(so.OrderNumber)) AS percentage FROM      Sales Orders so JOIN      Sales Team st ON so._SalesTeamID = st.SalesTeamID;
SELECT      SUM(CASE WHEN p.ProductName = 'Platters' THEN 1 ELSE 0 END) AS Platters_Orders,     SUM(CASE WHEN p.ProductName = 'Serveware' THEN 1 ELSE 0 END) AS Serveware_Orders FROM      SalesOrders so JOIN      Products p ON so._ProductID = p.ProductID;
SELECT SUM((Unit_Price - Unit_Cost) * Order_Quantity) AS Total_Net_Profit FROM Sales_Orders WHERE _StoreID = (     SELECT StoreID     FROM Store_Locations     WHERE Median_Income = (         SELECT MAX(Median_Income)         FROM Store_Locations     ) );
SELECT COUNT(OrderNumber) AS NumberOfOrders FROM Sales Orders WHERE _SalesTeamID BETWEEN 1 AND 9 AND _SalesTeamID IN (SELECT SalesTeamID FROM Sales Team WHERE Region = 'South');
SELECT COUNT(OrderNumber) AS TotalOrders FROM SalesOrders WHERE OrderDate = '2018-05-31';
SELECT so.OrderNumber FROM Sales Orders so WHERE so.DeliveryDate = '2018-06-13';
SELECT COUNT(*) AS OrdersWithMoreThan5ProductQuantities FROM SalesOrders WHERE OrderQuantity > 5;
SELECT State FROM Regions WHERE StateCode = 'GA';
SELECT COUNT(DISTINCT State)  FROM Regions  WHERE Region = 'Midwest';
SELECT p.ProductName  FROM SalesOrders so  JOIN Products p ON so._ProductID = p.ProductID  WHERE so.UnitCost = 781.22;
SELECT so.DeliveryDate  FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE p.ProductName = 'Cookware';
SELECT COUNT(*)  FROM Sales Orders  JOIN Products ON Sales Orders._ProductID = Products.ProductID  WHERE Products.ProductName = 'Furniture Cushions'  AND SUBSTR(OrderDate, -2) = '18';
SELECT p.ProductName FROM Products p JOIN SalesOrders so ON p.ProductID = so._ProductID WHERE so.DiscountApplied = 0.1;
SELECT AVG(Unit_Price - Unit_Cost) AS Average_Net_Profit FROM Sales_Orders JOIN Products ON Sales_Orders._ProductID = Products.ProductID WHERE Products.Product_Name = 'Phones' AND Sales_Orders.Sales_Channel = 'Distributor';
SELECT AVG(UnitPrice - UnitCost) AS AverageNetProfit FROM SalesOrders JOIN Products ON SalesOrders._ProductID = Products.ProductID WHERE Products.ProductName = 'Bar Tools' AND SalesOrders.OrderQuantity > 5;
SELECT DISTINCT sl."City Name" FROM "Store Locations" sl JOIN "Regions" r ON sl."StateCode" = r."StateCode" WHERE r."Region" = 'South';
SELECT DISTINCT r.Region FROM Store_Locations sl JOIN Regions r ON sl.StateCode = r.StateCode WHERE sl.Type = 'Town';
SELECT COUNT(OrderNumber) AS TotalOrders FROM Sales Orders WHERE _CustomerID = (SELECT CustomerID FROM Customers WHERE Customer Names = 'Medsep Group');
SELECT DISTINCT "Discount Applied" FROM "Sales Orders" WHERE "_CustomerID" IN (     SELECT "CustomerID"     FROM "Customers"     WHERE "Customer Names" = 'Ole Group' ) AND "Discount Applied" IS NOT NULL;
SELECT c.CustomerNames FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID WHERE so.ShipDate = '2018-07-08';
SELECT COUNT(OrderNumber)  FROM Sales Orders  WHERE _CustomerID = (SELECT CustomerID FROM Customers WHERE Customer Names = 'Ei')  AND Order Quantity > 4;
SELECT COUNT(*)  FROM Sales Orders  WHERE _CustomerID = (SELECT CustomerID FROM Customers WHERE Customer Names = 'Pacific Ltd')  AND Discount Applied = 0.05;
SELECT DISTINCT c.CustomerNames FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID WHERE so.UnitCost > 4000;
SELECT StoreID, Latitude, Longitude  FROM Store_Locations  WHERE City_Name = 'Birmingham';
SELECT "City Name"  FROM "Store Locations"  ORDER BY Population DESC  LIMIT 1;
SELECT COUNT(*)  FROM Store_Locations  WHERE State = 'California' AND Type = 'CDP';
SELECT so.OrderNumber, p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.UnitPrice = (SELECT MIN(UnitPrice) FROM SalesOrders);
SELECT p.ProductName, MAX((so.UnitPrice - so.UnitCost) * so.OrderQuantity) AS HighestNetProfit FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.OrderDate LIKE '%/19' GROUP BY p.ProductName ORDER BY HighestNetProfit DESC LIMIT 1;
SELECT AVG(UnitPrice) AS AverageUnitPrice FROM SalesOrders JOIN Products ON SalesOrders._ProductID = Products.ProductID WHERE Products.ProductName = 'Cookware';
SELECT DISTINCT st.Sales Team FROM Sales Orders so JOIN Sales Team st ON so._SalesTeamID = st.SalesTeamID WHERE so.OrderDate = '2018-05-31';
SELECT st.Sales Team, COUNT(so.OrderNumber) AS OrderCount FROM Sales Orders so JOIN Sales Team st ON so._SalesTeamID = st.SalesTeamID WHERE YEAR(so.OrderDate) = 2019 GROUP BY st.Sales Team ORDER BY OrderCount ASC LIMIT 1;
SELECT SUBSTR(OrderDate, -2) AS Year, COUNT(OrderNumber) AS TotalOrders FROM Sales Orders WHERE _SalesTeamID = (SELECT SalesTeamID FROM Sales Team WHERE Sales Team = 'George Lewis') AND SUBSTR(OrderDate, -2) IN ('18', '19', '20') GROUP BY SUBSTR(OrderDate, -2) ORDER BY TotalOrders DESC LIMIT 1;
SELECT      DIVIDE(         COUNT(CASE WHEN sl.County = 'Orange County' AND SUBSTR(so.OrderDate, -2) = '18' THEN so.OrderNumber END),          COUNT(CASE WHEN SUBSTR(so.OrderDate, -2) = '18' THEN so.OrderNumber END)     ) AS percentage FROM      Sales Orders so JOIN      Store Locations sl ON so._StoreID = sl.StoreID WHERE      SUBSTR(so.OrderDate, -2) = '18';
SELECT OrderNumber  FROM SalesOrders  WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM SalesOrders);
SELECT _SalesTeamID, COUNT(OrderNumber) AS OrderCount FROM Sales Orders WHERE SUBSTR(OrderDate, -2) = '18' GROUP BY _SalesTeamID ORDER BY OrderCount DESC LIMIT 1;
SELECT UnitCost  FROM SalesOrders  WHERE OrderNumber = 'SO - 000103';
SELECT COUNT(OrderNumber) AS TotalOrders FROM Sales Orders JOIN Store Locations ON Sales Orders._StoreID = Store Locations.StoreID WHERE Store Locations.County = 'Maricopa' AND SUBSTR(OrderDate, -2) = '20';
SELECT sl.* FROM Store_Locations sl JOIN Sales_Orders so ON sl.StoreID = so._StoreID WHERE so.OrderNumber = 'SO - 000115';
SELECT sl."City Name", COUNT(so."OrderNumber") AS total_orders FROM "Sales Orders" so JOIN "Store Locations" sl ON so."_StoreID" = sl."StoreID" WHERE so."OrderDate" BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY sl."City Name";
SELECT c.CustomerNames FROM Customers c JOIN SalesOrders so ON c.CustomerID = so._CustomerID WHERE SUBSTR(so.OrderDate, -2) = '18' GROUP BY c.CustomerNames HAVING COUNT(so.OrderNumber) > 3;
SELECT COUNT(OrderNumber) AS TotalOrders FROM Sales Orders WHERE _CustomerID = (SELECT CustomerID FROM Customers WHERE Customer Names = 'Medsep Group') AND SUBSTR(OrderDate, -2) IN ('18', '19', '20');
SELECT DISTINCT c.CustomerNames FROM Customers c JOIN SalesOrders so ON c.CustomerID = so._CustomerID WHERE so.OrderQuantity > 5 AND so.OrderDate = '2018-06-01';
SELECT      (COUNT(CASE WHEN (UnitPrice - UnitCost) > 1000 THEN OrderNumber END) * 100.0 / COUNT(OrderNumber)) AS Percentage FROM      SalesOrders WHERE      _SalesTeamID IN (SELECT SalesTeamID FROM SalesTeam WHERE SalesTeam = 'Stephen Payne');
SELECT COUNT(*) AS SalesTeamCount FROM "Sales Team" WHERE Region = 'Northeast';
SELECT "City Name", Latitude, Longitude  FROM "Store Locations"  WHERE County = 'Maricopa';
SELECT OrderNumber  FROM SalesOrders  WHERE UnitCost = (SELECT MAX(UnitCost) FROM SalesOrders);
SELECT ProductName FROM Products WHERE ProductID BETWEEN 30 AND 40;
SELECT DIVIDE(MAX(Unit_Cost), MIN(Unit_Cost)) AS Cost_Ratio FROM Sales_Orders;
SELECT p.ProductName, COUNT(so.OrderNumber) AS OrderCount FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE SUBSTR(so.OrderDate, -2) = '18' GROUP BY p.ProductName ORDER BY OrderCount DESC LIMIT 1;
SELECT SUM(so.[Order Quantity]) AS TotalProductsSold FROM [Sales Orders] so JOIN [Sales Team] st ON so._SalesTeamID = st.SalesTeamID WHERE st.[Sales Team] = 'Adam Hernandez';
SELECT so.OrderNumber FROM Sales Orders so JOIN Store Locations sl ON so._StoreID = sl.StoreID WHERE sl.City Name = 'Daly City';
SELECT COUNT(OrderNumber) AS TotalOrders FROM SalesOrders WHERE _CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerNames = 'Rochester Ltd');
SELECT OrderNumber  FROM Sales Orders  WHERE _CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerNames = 'Qualitest')  ORDER BY Order Quantity DESC  LIMIT 1;
SELECT so.OrderNumber, p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.SalesChannel = 'In-Store';
SELECT COUNT(*)  FROM Sales Orders so JOIN Store Locations sl ON so._StoreID = sl.StoreID WHERE so.Sales Channel = 'Online'  AND so.OrderDate LIKE '5/%/18'  AND sl.City Name = 'Norman';
SELECT p.ProductName FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID JOIN Products p ON so._ProductID = p.ProductID WHERE sl.County = 'Maricopa' GROUP BY p.ProductName ORDER BY SUM(so.OrderQuantity) ASC LIMIT 1;
SELECT so.OrderNumber FROM Sales Orders so JOIN Sales Team st ON so._SalesTeamID = st.SalesTeamID WHERE st.Sales Team = 'Samuel Fowler';
SELECT SUM(OrderQuantity) AS TotalBaseballs FROM SalesOrders WHERE _ProductID IN (SELECT ProductID FROM Products WHERE ProductName = 'Baseball') AND OrderDate LIKE '12/%/17';
SELECT DIVIDE(SUM(OrderQuantity), 12) AS AverageOrnamentsSold FROM SalesOrders JOIN Products ON SalesOrders._ProductID = Products.ProductID WHERE Products.ProductName = 'Ornaments'  AND OrderDate BETWEEN '2018-01-01' AND '2018-12-31';
SELECT      DIVIDE(SUM(CASE WHEN sl."City Name" = 'Burbank' AND SUBSTR(so.OrderDate, -2) = '18' THEN so."Order Quantity" ELSE 0 END),             SUM(CASE WHEN SUBSTR(so.OrderDate, -2) = '18' THEN so."Order Quantity" ELSE 0 END)) AS percentage FROM      "Sales Orders" so JOIN      "Store Locations" sl ON so."_StoreID" = sl."StoreID" WHERE      SUBSTR(so.OrderDate, -2) = '18';
SELECT      (SELECT COUNT(OrderNumber) FROM Sales Orders WHERE WarehouseCode = 'WARE-MKL1006') -      (SELECT COUNT(OrderNumber) FROM Sales Orders WHERE WarehouseCode = 'WARE-NBV1002') AS OrderNumberDifference;
SELECT p.ProductName FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID JOIN Products p ON so._ProductID = p.ProductID WHERE c.CustomerNames = 'Sundial' AND so.DeliveryDate LIKE '%/21';
SELECT StoreID, Region  FROM Store Locations  WHERE State = 'Michigan';
SELECT      c.CustomerNames,      COUNT(so.OrderNumber) AS TotalOrders FROM      Customers c JOIN      SalesOrders so ON c.CustomerID = so._CustomerID WHERE      c.CustomerNames IN ('Apollo Ltd', 'Pacific Ltd') GROUP BY      c.CustomerNames;
SELECT _StoreID FROM Sales Orders WHERE _StoreID IN (     SELECT StoreID     FROM Store Locations     WHERE City Name IN ('Aurora (Township)', 'Babylon (Town)') ) GROUP BY _StoreID ORDER BY COUNT(OrderNumber) DESC LIMIT 1;
SELECT c.CustomerNames, p.ProductName FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID JOIN Products p ON so._ProductID = p.ProductID JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE st.SalesTeam = 'Anthony Torres' AND so.SalesChannel = 'Distributor';
SELECT c.CustomerID, c.CustomerNames FROM Customers c JOIN SalesOrders so ON c.CustomerID = so._CustomerID WHERE so.SalesChannel = 'Online' GROUP BY c.CustomerID, c.CustomerNames HAVING SUM(so.UnitPrice - so.UnitCost) > 5000;
SELECT SUM(Unit Price - Unit Cost) AS NetProfit FROM Sales Orders WHERE _ProductID IN (SELECT ProductID FROM Products WHERE Product Name = 'Floral') AND DeliveryDate LIKE '%/21';
SELECT COUNT(OrderNumber)  FROM Sales Orders  WHERE _StoreID IN (     SELECT StoreID      FROM Store Locations      WHERE Population BETWEEN 3000000 AND 4000000 );
SELECT p.ProductName FROM Products p JOIN SalesOrders so ON p.ProductID = so._ProductID JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE so.SalesChannel = 'Wholesale' AND sl.TimeZone = 'Pacific/Honolulu';
SELECT so.OrderNumber, p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.OrderDate = '2018-06-06';
SELECT AVG(OrderCount) AS AverageYearlyOrder FROM (     SELECT COUNT(OrderNumber) AS OrderCount     FROM Sales Orders     JOIN Customers ON Sales Orders._CustomerID = Customers.CustomerID     WHERE Customers.CustomerNames = 'Weimei Corp'     AND SUBSTR(OrderDate, -2) IN ('18', '19', '20')     GROUP BY SUBSTR(OrderDate, -2) ) AS YearlyOrders;
WITH MonthlyOrders AS (     SELECT          COUNT(OrderNumber) AS TotalOrders,         COUNT(CASE WHEN WarehouseCode = 'WARE-NMK1003' THEN OrderNumber END) AS WARE_NMK1003_Orders,         COUNT(CASE WHEN Products.ProductName = 'Floor Lamps' THEN OrderNumber END) AS FloorLampsOrders     FROM          SalesOrders     JOIN          Products ON SalesOrders._ProductID = Products.ProductID     WHERE          SUBSTR(OrderDate, -2) = '19' )  SELECT      TotalOrders / 12.0 AS AverageMonthlyOrders,     (WARE_NMK1003_Orders * 100.0 / TotalOrders) AS PercentageOfWARE_NMK1003,     FloorLampsOrders AS NumberOfFloorLampsOrders FROM      MonthlyOrders;
SELECT ProcuredDate  FROM Sales Orders  WHERE _CustomerID = 11;
SELECT COUNT(*)  FROM SalesOrders  WHERE SalesChannel = 'Distributor'  AND OrderQuantity = (SELECT MIN(OrderQuantity) FROM SalesOrders);
SELECT DISTINCT _SalesTeamID  FROM Sales Orders  WHERE Discount Applied = 0.1 AND Sales Channel = 'In-Store';
SELECT COUNT(*)  FROM Store_Locations  WHERE Type = 'Borough'  AND "City Name" = 'Brooklyn'  AND Population < 3000000;
SELECT COUNT(DISTINCT StateCode)  FROM Regions  WHERE Region = 'Midwest';
SELECT p.ProductName, SUM((so.UnitPrice - so.UnitCost) * so.OrderQuantity) AS NetProfit FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID GROUP BY p.ProductName ORDER BY NetProfit DESC LIMIT 10;
SELECT DISTINCT c.CustomerNames FROM Customers c JOIN SalesOrders so ON c.CustomerID = so._CustomerID WHERE so.OrderQuantity = 3 AND so.OrderDate LIKE '2/%/18';
SELECT st.Sales Team FROM Sales Orders so JOIN Customers c ON so._CustomerID = c.CustomerID JOIN Sales Team st ON so._SalesTeamID = st.SalesTeamID WHERE c.Customer Names = 'Apotheca, Ltd';
SELECT DISTINCT r.Region FROM Store_Locations sl JOIN Sales_Orders so ON sl.StoreID = so._StoreID JOIN Regions r ON sl.StateCode = r.StateCode WHERE so.WarehouseCode = 'WARE-UHY1004';
SELECT DISTINCT sl."City Name" FROM "Sales Orders" so JOIN "Sales Team" st ON so."_SalesTeamID" = st."SalesTeamID" JOIN "Products" p ON so."_ProductID" = p."ProductID" JOIN "Store Locations" sl ON so."_StoreID" = sl."StoreID" WHERE st."Sales Team" = 'Shawn Torres' AND p."Product Name" = 'Audio';
SELECT p.ProductName, c.CustomerNames FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID JOIN Customers c ON so._CustomerID = c.CustomerID WHERE so.OrderDate = '2018-10-21' AND so.DeliveryDate = '2019-11-21';
SELECT COUNT(DISTINCT sl.StoreID) AS StoreCount FROM Store_Locations sl JOIN Sales_Orders so ON sl.StoreID = so._StoreID WHERE so.ProcuredDate = '2018-10-27' AND sl.State = 'Oregon';
SELECT so.SalesChannel, COUNT(*) AS SalesCount FROM Sales Orders so JOIN Store Locations sl ON so._StoreID = sl.StoreID WHERE sl.MedianIncome IN (     SELECT DISTINCT MedianIncome     FROM Store Locations     ORDER BY MedianIncome DESC     LIMIT 3 ) GROUP BY so.SalesChannel ORDER BY SalesCount DESC;
SELECT TOP 5 st.SalesTeam, SUM((so.UnitPrice - so.UnitCost) * so.OrderQuantity) AS NetProfit FROM SalesOrders so JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID GROUP BY st.SalesTeam ORDER BY NetProfit DESC;
SELECT MAX(Discount Applied)  FROM Sales Orders  JOIN Store Locations ON Sales Orders._StoreID = Store Locations.StoreID  WHERE Store Locations.State = 'Colorado'  AND Store Locations.Land Area = 111039036;
SELECT COUNT(DISTINCT TimeZone) AS DifferentTimeZones FROM "Store Locations" SL JOIN "Regions" R ON SL.StateCode = R.StateCode WHERE R.Region = 'Northeast';
SELECT Type FROM Store_Locations WHERE StateCode IN (SELECT StateCode FROM Regions WHERE Region = 'South') GROUP BY Type ORDER BY COUNT(Type) DESC LIMIT 1;
SELECT r.Region FROM Sales Orders so JOIN Sales Team st ON so._SalesTeamID = st.SalesTeamID JOIN Regions r ON st.Region = r.StateCode WHERE so.WarehouseCode = 'WARE-MKL1006' GROUP BY r.Region ORDER BY COUNT(*) DESC LIMIT 1;
SELECT sl."City Name" FROM "Sales Orders" so JOIN "Store Locations" sl ON so."_StoreID" = sl."StoreID" WHERE so."Unit Price" = (SELECT MAX("Unit Price") FROM "Sales Orders");
SELECT COUNT(*)  FROM Sales Orders  WHERE _CustomerID = (SELECT CustomerID FROM Customers WHERE Customer Names = 'Ole Group')  AND Sales Channel = 'Online'  AND OrderDate LIKE '5/%/19';
SELECT COUNT(*)  FROM Store_Locations sl JOIN Sales_Orders so ON sl.StoreID = so._StoreID WHERE sl.County = 'Washtenaw County'  AND so.Order_Quantity = 1  AND so.Sales_Channel = 'Distributor';
SELECT p.ProductName FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID JOIN Products p ON so._ProductID = p.ProductID WHERE sl.CityName = 'Santa Clarita' GROUP BY p.ProductName ORDER BY COUNT(so.OrderQuantity) ASC LIMIT 1;
SELECT sl.Latitude, sl.Longitude FROM Store_Locations sl JOIN Sales_Orders so ON sl.StoreID = so._StoreID WHERE so.WarehouseCode = 'WARE-PUJ1005' GROUP BY sl.StoreID, sl.Latitude, sl.Longitude ORDER BY COUNT(so.WarehouseCode) ASC LIMIT 1;
SELECT      (SUM(CASE WHEN sl."City Name" = 'New York' THEN 1 ELSE 0 END) * 100.0 / COUNT(so."OrderNumber")) AS Percentage FROM      "Sales Orders" so JOIN      "Store Locations" sl ON so."_StoreID" = sl."StoreID" WHERE      so."OrderDate" = '4/4/20';
SELECT AVG(LandArea) AS AverageLandArea FROM StoreLocations WHERE StoreID IN (     SELECT _StoreID     FROM SalesOrders     WHERE UnitPrice = 998.30 );
SELECT AVG([Household Income]) AS AverageHouseholdIncome FROM [Store Locations] WHERE [State] = 'New Hampshire' AND [Type] = 'city';
SELECT COUNT(*) AS NumberOfSalesTeams FROM "Sales Team" WHERE Region = 'Midwest';
SELECT OrderNumber  FROM SalesOrders  WHERE OrderDate > '2018-01-01';
SELECT COUNT(DISTINCT Sales Channel) AS SalesChannelCount FROM Sales Orders JOIN Sales Team ON Sales Orders._SalesTeamID = Sales Team.SalesTeamID WHERE Sales Team.Region = 'Midwest';
SELECT st.SalesTeam, MAX(so.UnitPrice) AS HighestUnitPrice FROM SalesOrders so JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID GROUP BY st.SalesTeam ORDER BY HighestUnitPrice DESC LIMIT 1;
SELECT r.Region, MAX(so.Discount Applied) AS MaxDiscount FROM Sales Orders so JOIN Sales Team st ON so._SalesTeamID = st.SalesTeamID JOIN Regions r ON st.Region = r.Region WHERE so.Sales Channel = 'Online' GROUP BY r.Region ORDER BY MaxDiscount DESC;
SELECT so.OrderNumber, so.OrderDate FROM Sales Orders so JOIN Customers c ON so._CustomerID = c.CustomerID WHERE c.Customer Names = 'Apollo Ltd' ORDER BY so.Unit Price DESC LIMIT 1;
SELECT OrderNumber, WarehouseCode  FROM Sales Orders  WHERE _CustomerID = (SELECT CustomerID FROM Customers WHERE Customer Names = 'Elorac, Corp');
SELECT DISTINCT c.CustomerNames FROM Customers c JOIN SalesOrders so ON c.CustomerID = so._CustomerID JOIN Products p ON so._ProductID = p.ProductID WHERE p.ProductName = 'Cocktail Glasses' AND so.SalesChannel = 'Online';
SELECT StoreLocations.StoreID, StoreLocations.CityName,         MAX(SalesOrders.OrderQuantity * (SalesOrders.UnitPrice - SalesOrders.UnitCost)) AS NetProfit FROM SalesOrders JOIN StoreLocations ON SalesOrders._StoreID = StoreLocations.StoreID WHERE StoreLocations.State = 'Arizona' GROUP BY StoreLocations.StoreID, StoreLocations.CityName ORDER BY NetProfit DESC LIMIT 1;
SELECT      (SELECT UnitPrice       FROM SalesOrders SO       JOIN StoreLocations SL ON SO._StoreID = SL.StoreID       JOIN Products P ON SO._ProductID = P.ProductID       WHERE SL.State = 'Florida' AND P.ProductName = 'Computers') -      (SELECT UnitPrice       FROM SalesOrders SO       JOIN StoreLocations SL ON SO._StoreID = SL.StoreID       JOIN Products P ON SO._ProductID = P.ProductID       WHERE SL.State = 'Texas' AND P.ProductName = 'Computers') AS PriceDifference;
SELECT DISTINCT st.SalesTeam FROM "Sales Team" st JOIN "Sales Orders" so ON st.SalesTeamID = so._SalesTeamID JOIN "Regions" r ON st.Region = r.Region WHERE r.Region = 'Midwest' AND so."Order Quantity" > 5;
SELECT DISTINCT s.StoreID FROM Sales Orders so JOIN Store Locations sl ON so._StoreID = sl.StoreID WHERE sl.State = 'California'  AND so.Sales Channel = 'In-Store'  AND so.Discount Applied = 0.2;
SELECT c.CustomerNames FROM Customers c JOIN SalesOrders so ON c.CustomerID = so._CustomerID WHERE so.OrderDate BETWEEN '2018-01-01' AND '2020-12-31' GROUP BY c.CustomerNames ORDER BY SUM(so.OrderQuantity) DESC LIMIT 1;
SELECT      SUM(CASE WHEN p.ProductName = 'Candles' THEN so.OrderQuantity ELSE 0 END) AS TotalCandlesQuantity,     (SUM(CASE WHEN p.ProductName = 'Candles' THEN so.OrderQuantity ELSE 0 END) / NULLIF(SUM(so.OrderQuantity), 0)) * 100 AS CandlesPercentage FROM      SalesOrders so JOIN      Products p ON so._ProductID = p.ProductID;
SELECT r.Region FROM Sales_Team st JOIN Regions r ON st.Region = r.State WHERE st.Sales_Team = 'Joshua Bennett';
SELECT StoreID  FROM Store_Locations  WHERE Population = (SELECT MAX(Population) FROM Store_Locations);
SELECT COUNT(*) AS NumberOfSalesTeams FROM "Sales Team" WHERE Region = 'Midwest';
SELECT Type  FROM Store_Locations  WHERE City_Name = (     SELECT City_Name      FROM Store_Locations      ORDER BY Water_Area DESC      LIMIT 1 ) AND Type = 'City';
SELECT COUNT(*)  FROM SalesOrders  WHERE SalesChannel = 'Online'  AND SUBSTR(ShipDate, 1, 2) = '06'  AND SUBSTR(ShipDate, -2) = '18';
SELECT DiscountApplied  FROM SalesOrders  WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM SalesOrders);
SELECT p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID ORDER BY (so.UnitPrice - so.UnitCost) DESC LIMIT 1;
SELECT      sl."City Name",      AVG(sl."Household Income") AS "Average Household Income" FROM      "Store Locations" sl JOIN      "Regions" r ON sl."StateCode" = r."StateCode" WHERE      r."Region" = 'Northeast' GROUP BY      sl."City Name" HAVING      sl."StateCode" = (         SELECT              "StateCode"         FROM              "Store Locations"         GROUP BY              "StateCode"         ORDER BY              COUNT("StoreID") DESC         LIMIT 1     )
SELECT DISTINCT r.Region FROM Store_Locations sl JOIN Regions r ON sl.StateCode = r.StateCode WHERE sl.Median_Income < 30000;
SELECT COUNT(*)  FROM Store_Locations  WHERE StateCode IN (SELECT StateCode FROM Regions WHERE Region = 'West')  AND Land_Area < 20000000;
SELECT c.CustomerNames FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID WHERE (so.UnitPrice - so.UnitCost) = (     SELECT MAX(UnitPrice - UnitCost)     FROM SalesOrders );
WITH OrderCounts AS (     SELECT          st.SalesTeam,         COUNT(so.OrderNumber) AS OrderCount     FROM          Sales Orders so     JOIN          Sales Team st ON so._SalesTeamID = st.SalesTeamID     WHERE          SUBSTR(so.ShipDate, -2) = '19'     GROUP BY          st.SalesTeam ), MaxOrderCount AS (     SELECT          MAX(OrderCount) AS MaxCount     FROM          OrderCounts ) SELECT      oc.SalesTeam,     COUNT(so.OrderNumber) AS TotalShippedOrders FROM      OrderCounts oc JOIN      MaxOrderCount moc ON oc.OrderCount = moc.MaxCount JOIN      Sales Orders so ON so._SalesTeamID = (SELECT SalesTeamID FROM Sales Team WHERE Sales Team = oc.SalesTeam) WHERE      SUBSTR(so.ShipDate, -2) = '19' GROUP BY      oc.SalesTeam;
SELECT p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.OrderQuantity > 5    AND so.ShipDate BETWEEN '2019-05-01' AND '2019-05-31' ORDER BY (so.UnitPrice - so.UnitCost) ASC LIMIT 1;
SELECT sl.Latitude, sl.Longitude FROM Sales Orders so JOIN Store Locations sl ON so._StoreID = sl.StoreID WHERE so._ProductID = (     SELECT so2._ProductID     FROM Sales Orders so2     GROUP BY so2._ProductID     ORDER BY SUM(so2.Order Quantity * (so2.Unit Price - so2.Unit Cost)) DESC     LIMIT 1 OFFSET 3 )
SELECT SalesTeam."Sales Team", COUNT(SalesOrders.OrderNumber) AS ShippedOrders FROM SalesOrders JOIN SalesTeam ON SalesOrders._SalesTeamID = SalesTeam.SalesTeamID WHERE SUBSTR(SalesOrders.ShipDate, -2) = '20' GROUP BY SalesTeam."Sales Team" ORDER BY ShippedOrders DESC LIMIT 1;
SELECT AVG(OrderCount) AS AverageShippedOrdersPerYear FROM (     SELECT COUNT(OrderNumber) AS OrderCount     FROM Sales Orders     JOIN Sales Team ON Sales Orders._SalesTeamID = Sales Team.SalesTeamID     WHERE Sales Team.Sales Team = 'Carl Nguyen'     AND SUBSTR(ShipDate, -2) IN ('18', '19', '20')     GROUP BY SUBSTR(ShipDate, 1, 4) ) AS YearlyCounts;
SELECT      p.ProductName,      SUM(so.DiscountApplied) AS TotalDiscount FROM      SalesOrders so JOIN      Products p ON so._ProductID = p.ProductID GROUP BY      p.ProductName ORDER BY      SUM(so.UnitPrice - so.UnitCost) DESC LIMIT 1;
SELECT c.CustomerNames FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID GROUP BY c.CustomerNames ORDER BY MAX((so.UnitPrice * so.OrderQuantity) - so.DiscountApplied) DESC LIMIT 3;
SELECT "Sales Channel", COUNT(OrderNumber) AS OrderCount FROM "Sales Orders" WHERE SUBSTR(OrderDate, 1, 1) = '1' AND SUBSTR(OrderDate, -2) = '20' GROUP BY "Sales Channel" ORDER BY OrderCount DESC LIMIT 1;
SELECT p.ProductName  FROM SalesOrders so  JOIN Products p ON so._ProductID = p.ProductID  WHERE so.OrderNumber = 'SO - 0005951';
SELECT sl."City Name", st."Sales Team" FROM "Sales Orders" so JOIN "Store Locations" sl ON so."_StoreID" = sl."StoreID" JOIN "Sales Team" st ON so."_SalesTeamID" = st."SalesTeamID" WHERE so."OrderNumber" = 'SO - 0001004';
SELECT c.CustomerID, c.CustomerNames, SUM((so.UnitPrice - so.UnitCost) * so.OrderQuantity) AS NetProfit FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID JOIN Customers c ON so._CustomerID = c.CustomerID WHERE sl.CityName = 'Gilbert' AND sl.State = 'Arizona' AND so.ProcuredDate LIKE '%/19' GROUP BY c.CustomerID, c.CustomerNames ORDER BY NetProfit DESC LIMIT 1;
SELECT COUNT(*)  FROM Sales Orders  WHERE _StoreID IN (     SELECT StoreID      FROM Store Locations      WHERE "City Name" = 'Chandler' ) AND SUBSTR(OrderDate, -2) = '20';
SELECT AVG(Household_Income) AS Average_Household_Income FROM Store_Locations WHERE "City Name" = 'Glendale';
SELECT MAX(DiscountApplied) AS BestDiscount FROM SalesOrders WHERE SUBSTR(OrderDate, -2) = '20';
SELECT MAX(consecutive) AS max_consecutive_ties FROM (     SELECT COUNT(*) AS consecutive     FROM (         SELECT *,                ROW_NUMBER() OVER (ORDER BY Date) -                 ROW_NUMBER() OVER (PARTITION BY (CASE WHEN FTR = 'D' THEN 1 ELSE 0 END) ORDER BY Date) AS grp         FROM matchs         WHERE AwayTeam = 'Ebbsfleet' AND season = '2008' AND FTR = 'D'     ) AS subquery     GROUP BY grp ) AS final_query;
SELECT      DIVIDE(COUNT(CASE WHEN country = 'England' THEN division END), COUNT(division)) AS percentage FROM      divisions;
SELECT      (COUNT(CASE WHEN FTR = 'H' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_won,     (COUNT(CASE WHEN FTR = 'A' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_lost,     (COUNT(CASE WHEN FTR = 'D' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_drawn FROM matchs WHERE HomeTeam = 'Cittadella';
SELECT AwayTeam,         COUNT(CASE WHEN FTR = 'A' THEN 1 END) * 1.0 / COUNT(*) AS winning_percentage FROM matchs WHERE HomeTeam = 'Caen' AND season = '2010' GROUP BY AwayTeam ORDER BY winning_percentage DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN Div = 'F1' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      matchs WHERE      Date = '2005-07-30';
SELECT      (COUNT(CASE WHEN FTR = 'D' AND (HomeTeam = 'Sassuolo' OR AwayTeam = 'Sassuolo') THEN 1 END) * 100.0) /      COUNT(CASE WHEN HomeTeam = 'Sassuolo' OR AwayTeam = 'Sassuolo' THEN 1 END) AS percentage FROM matchs;
SELECT      (COUNT(CASE WHEN FTAG = 2 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      matchs WHERE      season = 2017;
SELECT DISTINCT HomeTeam AS Team FROM matchs WHERE Div = 'E2' UNION SELECT DISTINCT AwayTeam AS Team FROM matchs WHERE Div = 'E2';
SELECT COUNT(DISTINCT HomeTeam) + COUNT(DISTINCT AwayTeam) AS TotalTeams FROM matchs JOIN divisions ON matchs.Div = divisions.division WHERE divisions.country = 'Greece' AND (FTHG >= 4 OR FTAG >= 4);
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'Scottish Championship'  AND m.season = '2019'  AND m.FTHG = 2  AND m.FTAG = 2;
SELECT HomeTeam, season FROM matchs m JOIN divisions d ON m.Div = d.division WHERE d.country = 'Scotland' AND m.FTHG = 10 GROUP BY HomeTeam, season HAVING COUNT(*) > 0;
SELECT HomeTeam,         COUNT(*) AS HomeWins,         (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM matchs m                                JOIN divisions d ON m.Div = d.division                                WHERE d.name = 'LaLiga' AND d.country = 'Spain' AND m.season = 2017)) AS percentage FROM matchs m JOIN divisions d ON m.Div = d.division WHERE d.name = 'LaLiga' AND d.country = 'Spain' AND m.season = 2017 AND m.FTR = 'H' GROUP BY HomeTeam ORDER BY HomeWins DESC LIMIT 1;
SELECT      d.division,      COUNT(m.HomeTeam) AS team_count,      (COUNT(m.HomeTeam) * 100.0 / (SELECT COUNT(DISTINCT HomeTeam) FROM matchs WHERE season = '2012' AND Div IN (SELECT division FROM divisions WHERE country = 'England'))) AS percentage FROM      matchs m JOIN      divisions d ON m.Div = d.division WHERE      m.season = '2012' AND d.country = 'England' GROUP BY      d.division;
SELECT HomeTeam, FTHG AS Score FROM matchs WHERE season = 2021 ORDER BY FTHG DESC LIMIT 1 UNION SELECT AwayTeam, FTAG AS Score FROM matchs WHERE season = 2021 ORDER BY FTAG DESC LIMIT 1 ORDER BY Score DESC LIMIT 1;
SELECT HomeTeam  FROM matchs  WHERE Div = 'P1'  ORDER BY FTHG DESC  LIMIT 1;
SELECT      (COUNT(CASE WHEN FTR = 'H' AND season = 2010 THEN 1 END) * 1.0 / COUNT(CASE WHEN season = 2010 THEN 1 END)) -      (COUNT(CASE WHEN FTR = 'A' AND season = 2010 THEN 1 END) * 1.0 / COUNT(CASE WHEN season = 2010 THEN 1 END)) AS win_percentage_difference FROM      matchs WHERE      season = 2010;
SELECT d.division FROM divisions d JOIN matchs m ON d.division = m.Div WHERE m.season = '2008' AND m.FTR = 'D' GROUP BY d.division ORDER BY COUNT(m.Div) DESC LIMIT 1;
SELECT HomeTeam  FROM matchs  WHERE Div = 'EC' AND Date = '2008-01-20' AND FTR = 'H';
SELECT d.name  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE m.Date = '2009-09-13' AND m.HomeTeam = 'Club Brugge' AND m.AwayTeam = 'Genk';
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'Scottish Premiership'  AND m.season BETWEEN '2006' AND '2008';
SELECT d.division, d.country  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE m.HomeTeam = 'Hearts' AND m.AwayTeam = 'Hibernian';
SELECT AwayTeam  FROM matchs  JOIN divisions ON matchs.Div = divisions.division  WHERE divisions.name = 'Bundesliga'  GROUP BY AwayTeam  ORDER BY MAX(FTAG) DESC  LIMIT 1;
SELECT DISTINCT m.AwayTeam  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.country = 'Italy'  LIMIT 3;
SELECT d.name FROM divisions d JOIN matchs m ON d.division = m.Div WHERE m.season = '2019' GROUP BY d.name HAVING COUNT(CASE WHEN m.FTR = 'D' THEN 1 END) = (     SELECT MIN(draft_count)     FROM (         SELECT COUNT(CASE WHEN FTR = 'D' THEN 1 END) AS draft_count         FROM matchs         WHERE season = '2019'         GROUP BY Div     ) AS subquery );
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'LaLiga' AND m.HomeTeam = 'Valencia' AND m.FTR = 'H';
SELECT COUNT(*)  FROM matchs  WHERE Div = 'Seria A' AND FTR = 'D';
SELECT COUNT(*) FROM divisions WHERE country = 'England';
SELECT name FROM divisions WHERE country = 'Netherlands';
SELECT FTR  FROM matchs  WHERE Date = '2009-10-10' AND HomeTeam = 'East Fife' AND AwayTeam = 'Dumbarton';
SELECT FTHG, FTAG FROM matchs WHERE HomeTeam = 'Bursaspor' AND AwayTeam = 'Denizlispor' AND Date = '2009-04-26';
SELECT MIN(Date)  FROM matchs  WHERE (FTHG + FTAG) > 10;
SELECT HomeTeam, AwayTeam, FTR FROM matchs WHERE Div = (SELECT division FROM divisions WHERE name = 'Ligue 2') GROUP BY HomeTeam, AwayTeam ORDER BY SUM(FTHG + FTAG) DESC LIMIT 1;
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'LaLiga 2'  AND m.Date = '2016-03-27'  AND m.FTR = 'A';
SELECT COUNT(*)  FROM matchs  WHERE Div = (SELECT division FROM divisions WHERE name = 'National League')  AND Date = '2018-08-07'  AND FTR = 'D';
SELECT d.country FROM matchs m JOIN divisions d ON m.Div = d.division WHERE m.FTAG = (SELECT MAX(FTAG) FROM matchs)
SELECT d.name  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE m.FTHG = 1 AND m.FTAG = 8 AND m.season = '2011';
SELECT d.name FROM divisions d JOIN matchs m ON d.division = m.Div WHERE m.Date = '2020-02-22' AND (m.FTHG + m.FTAG) > 5 GROUP BY d.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT d.name  FROM divisions d JOIN matchs m ON d.division = m.Div WHERE m.FTHG = 0 AND m.FTAG = 0 GROUP BY d.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*)  FROM matchs  WHERE Div = (SELECT division FROM divisions WHERE name = 'Scottish League One')  AND Date = (SELECT Date FROM matchs WHERE HomeTeam = 'Pro Vercelli' AND AwayTeam = 'Pescara' AND FTHG = 5 AND FTAG = 2);
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE m.FTHG = '5' AND m.FTAG = '0' AND d.country = 'Greece';
SELECT DISTINCT d.country  FROM divisions d  JOIN matchs m ON d.division = m.Div  WHERE m.HomeTeam = 'Bradford' OR m.AwayTeam = 'Bradford';
SELECT COUNT(DISTINCT HomeTeam)  FROM matchs  WHERE Div = 'Eredivisie' AND season = '2008';
SELECT      DIVIDE(COUNT(m.Div) FILTER (WHERE m.FTR = 'H'), COUNT(m.Div)) AS home_win_ratio FROM      matchs m JOIN      divisions d ON m.Div = d.division WHERE      d.name = 'Bundesliga' AND m.season = '2021';
SELECT      (COUNT(CASE WHEN d.name = 'Liga NOS' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      matchs m JOIN      divisions d ON m.Div = d.division WHERE      m.FTHG = '1' AND m.FTAG = '1';
SELECT COUNT(*)  FROM matchs  WHERE Div = 'Premier League' AND season = '2021';
SELECT HomeTeam  FROM matchs  JOIN divisions ON matchs.Div = divisions.division  WHERE divisions.name = 'Bundesliga' AND matchs.Date = '2020/10/2';
SELECT HomeTeam  FROM matchs  JOIN divisions ON matchs.Div = divisions.division  WHERE divisions.name = 'Bundesliga' AND matchs.Date = '2020/10/2' AND matchs.FTR = 'H';
SELECT HomeTeam, COUNT(*) AS HomeWins FROM matchs WHERE Div = 'Bundesliga' AND FTR = 'H' GROUP BY HomeTeam ORDER BY HomeWins DESC LIMIT 1;
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'Bundesliga' AND m.AwayTeam = 'Werder Bremen' AND m.FTR = 'A';
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'Bundesliga' AND m.season = '2021' AND m.FTR = 'A';
SELECT COUNT(*)  FROM matchs  WHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga')  AND FTR = 'D';
SELECT      (SELECT COUNT(*) FROM matchs m JOIN divisions d ON m.Div = d.division WHERE m.FTR = 'H' AND m.season = 2021 AND d.name = 'Bundesliga') -     (SELECT COUNT(*) FROM matchs m JOIN divisions d ON m.Div = d.division WHERE m.FTR = 'H' AND m.season = 2021 AND d.name = 'Premier League') AS home_victory_difference;
SELECT m.HomeTeam  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'Bundesliga' AND m.FTR = 'H' AND m.season = '2021';
SELECT HomeTeam, COUNT(*) AS HomeVictories FROM matchs WHERE season = '2021' AND Div = 'Bundesliga' AND FTR = 'H' AND HomeTeam IN ('Augsburg', 'Mainz') GROUP BY HomeTeam ORDER BY HomeVictories DESC LIMIT 1;
SELECT HomeTeam, SUM(FTHG) AS TotalHomeGoals FROM matchs WHERE Div = 'Bundesliga' AND season = '2021' GROUP BY HomeTeam ORDER BY TotalHomeGoals DESC LIMIT 1;
SELECT SUM(FTHG) AS total_home_goals FROM matchs WHERE Div = 'Bundesliga' AND season = '2021';
SELECT      (SUM(CASE WHEN HomeTeam = 'Club Brugge' AND FTR = 'H' THEN 1                WHEN AwayTeam = 'Club Brugge' AND FTR = 'A' THEN 1                ELSE 0 END) * 1.0) /      COUNT(*) AS winning_rate FROM      matchs m JOIN      divisions d ON m.Div = d.division WHERE      d.name = 'Premier League' AND      m.season = 2021;
SELECT (SUM(homeWon) / SUM(won)) * 100 AS home_win_percentage FROM teams WHERE won > 0;
SELECT tmID FROM teams WHERE (lost / games) > 0.75;
SELECT t1.name, t1.won FROM teams t1 JOIN teams t2 ON t1.tmID = t2.tmID WHERE t1.year = 2005 AND t2.year = 2004 AND t1.won > t2.won;
SELECT name, o_pts FROM teams WHERE (homeWon - homeLost) / games > 0.8;
SELECT      (COUNT(CASE WHEN rank = 1 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      teams WHERE      playoff IS NOT NULL;
SELECT coachID, won, lost  FROM coaches  WHERE tmID = 'BOS' AND year = 1950;
SELECT coachID, GROUP_CONCAT(DISTINCT tmID) AS teams FROM coaches WHERE year BETWEEN 1970 AND 1980 GROUP BY coachID HAVING COUNT(*) = (     SELECT MAX(coach_count)     FROM (         SELECT COUNT(*) AS coach_count         FROM coaches         WHERE year BETWEEN 1970 AND 1980         GROUP BY coachID     ) AS counts )
SELECT c.coachID, t.name AS team_name, c.won FROM coaches c JOIN teams t ON c.tmID = t.tmID AND c.year = t.year WHERE c.year = 2000 AND c.won > 50;
SELECT coachID, tmID, year FROM coaches WHERE year BETWEEN 2000 AND 2010 AND lost > won;
SELECT t.name, c.year, t.o_pts FROM coaches c JOIN teams t ON c.tmID = t.tmID AND c.year = t.year WHERE c.coachID = 'adelmri01' AND c.year BETWEEN 1990 AND 1995;
SELECT DISTINCT c.coachID, t.year FROM teams t JOIN coaches c ON t.tmID = c.tmID AND t.year = c.year WHERE (t.won / t.games) > 0.9;
SELECT      (COUNT(CASE WHEN p.birthState = 'NY' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      awards_players ap JOIN      players p ON ap.playerID = p.playerID WHERE      ap.award = 'All-Defensive First Team'      AND ap.year BETWEEN 1980 AND 2000;
SELECT t.divID FROM awards_coaches ac JOIN coaches c ON ac.coachID = c.coachID AND ac.year = c.year JOIN teams t ON c.tmID = t.tmID AND c.year = t.year WHERE ac.award = 'NBA Coach of the Year' AND ac.year = 1977 AND t.year = 1976;
SELECT c.coachID FROM coaches c JOIN awards_coaches a ON c.coachID = a.coachID WHERE c.tmID = (SELECT tmID FROM teams WHERE name = 'Chicago Bulls' AND year = 1981)   AND a.award = 'NBA Coach of the Year'   AND a.year BETWEEN 1970 AND 1979;
SELECT p.nameNick  FROM players p  JOIN players_teams pt ON p.playerID = pt.playerID  WHERE pt.year = 2006 AND pt.blocks = 2 AND pt.lgID = 'NBA'  AND pt.tmID IN (SELECT tmID FROM teams WHERE year = 2006 AND confID = 'West');
SELECT year  FROM series_post  WHERE tmIDLoser = 'HSM' AND round = 'DSF'  AND year IN (SELECT year FROM teams WHERE rank = (SELECT MIN(rank) FROM teams WHERE year = series_post.year));
SELECT p.birthDate FROM player_allstar AS pa JOIN players AS p ON pa.playerID = p.playerID WHERE pa.season_id = 1985 AND pa.assists = (     SELECT MAX(assists)     FROM player_allstar     WHERE season_id = 1985 );
SELECT DISTINCT p.playerID, p.firstName, p.lastName FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE p.birthCity = 'Winter Haven'   AND pa.season_id BETWEEN 1980 AND 1989   AND pa.minutes = 12;
SELECT COUNT(DISTINCT p.playerID) AS num_players FROM player_allstar pas JOIN players p ON pas.playerID = p.playerID WHERE pas.conference = 'East' AND pas.minutes < 5 AND p.college = 'Illinois College';
SELECT playerID, SUM(rebounds) AS total_rebounds FROM players_teams WHERE year BETWEEN 1990 AND 2007 GROUP BY playerID HAVING SUM(dRebounds) / SUM(rebounds) * 100 > 75;
SELECT year, MAX(won * 1.0 / (won + lost)) AS best_balance FROM coaches WHERE coachID = 'costela01' GROUP BY year ORDER BY best_balance DESC LIMIT 1;
SELECT SUM(pa.minutes) AS total_minutes FROM player_allstar pa JOIN players p ON pa.playerID = p.playerID WHERE p.birthCity = 'Brooklyn' AND p.nameNick LIKE '%Superman%';
SELECT tmID, homeLost FROM teams WHERE year IN (     SELECT year     FROM awards_coaches     WHERE award = 'NBA Coach of the Year' AND year = 1994 ) AND tmID IN (     SELECT tmID     FROM coaches     WHERE coachID IN (         SELECT coachID         FROM awards_coaches         WHERE award = 'NBA Coach of the Year' AND year = 1994     ) ) ORDER BY homeLost DESC LIMIT 1;
SELECT DISTINCT s.tmIDWinner FROM series_post s JOIN teams t ON s.tmIDWinner = t.tmID AND s.year = t.year WHERE s.round = 'CSF'    AND s.tmIDLoser = 'LAL'    AND t.lgID = 'NBA'    AND t.won > 60    AND s.year = 1996;
SELECT DISTINCT p.lgID FROM players p WHERE p.weight = (SELECT MAX(weight) * 0.6 FROM players WHERE height = 80);
SELECT c.coachID, p.firstName, p.lastName FROM coaches c JOIN players p ON c.coachID = p.playerID WHERE c.lgID = 'NBA' GROUP BY c.coachID, p.firstName, p.lastName HAVING COUNT(DISTINCT c.tmID) > 2;
SELECT c.coachID FROM coaches c WHERE c.post_wins = (     SELECT MAX(post_wins)     FROM coaches )
SELECT c.coachID, MIN(c.post_losses) AS least_post_losses FROM coaches c JOIN (     SELECT coachID     FROM coaches     GROUP BY coachID     HAVING COUNT(DISTINCT tmID) > 2 ) AS served_coaches ON c.coachID = served_coaches.coachID GROUP BY c.coachID ORDER BY least_post_losses ASC LIMIT 1;
SELECT COUNT(*)  FROM players  WHERE lgID = 'ABA' AND (pos = 'C' OR pos = 'F-C');
SELECT firstName  FROM players  WHERE lgID = 'NBA' AND (pos = 'F' OR pos = 'F-C');
SELECT COUNT(DISTINCT p.playerID)  FROM players p  JOIN players_teams pt ON p.playerID = pt.playerID  JOIN teams t ON pt.tmID = t.tmID  WHERE p.hsCity = 'Chicago' AND t.divID = 'WE';
SELECT DISTINCT p.college FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year WHERE t.divID = 'EA';
SELECT COUNT(*)  FROM players  WHERE lgID = 'NBL' AND birthCity = 'Spencer';
SELECT p.birthDate FROM players p JOIN awards_players ap ON p.playerID = ap.playerID WHERE ap.award = 'Most Valuable Player' GROUP BY p.playerID ORDER BY COUNT(ap.award) DESC LIMIT 1;
SELECT COUNT(DISTINCT ap.playerID) AS MVP_Winners FROM awards_players ap JOIN players p ON ap.playerID = p.playerID WHERE p.birthCity = 'Whitestone' AND ap.award = 'Most Valuable Player';
SELECT MAX(p.height) AS tallest_height FROM players p JOIN awards_players ap ON p.playerID = ap.playerID WHERE ap.award = 'Rookie of the Year';
SELECT AVG(p.weight) AS average_weight FROM players p JOIN awards_players ap ON p.playerID = ap.playerID WHERE ap.award = 'Rookie of the Year';
SELECT AVG(height) AS average_height FROM players JOIN awards_players ON players.playerID = awards_players.playerID WHERE players.highSchool LIKE '%New York%' AND awards_players.award = 'Most Valuable Player';
SELECT name, o_pts  FROM teams  WHERE year = 2000  ORDER BY o_pts DESC  LIMIT 10;
SELECT name FROM teams WHERE (won * 1.0) / (won + lost) < 0.5;
SELECT DISTINCT c.coachID FROM coaches c JOIN teams t ON c.tmID = t.tmID AND c.year = t.year WHERE (c.won::float / (c.won + c.lost)) > 0.8;
SELECT coachID FROM coaches WHERE lgID = 'NBA' GROUP BY coachID HAVING MAX(year) - MIN(year) > 10;
SELECT COUNT(DISTINCT t.tmID) AS team_count FROM teams t JOIN players_teams pt ON t.tmID = pt.tmID JOIN awards_players ap ON pt.playerID = ap.playerID WHERE t.o_pts >= 3800 AND ap.award = 'Most Valuable Player';
SELECT MAX(height) AS tallest_height, firstName, lastName  FROM players  WHERE playerID IN (SELECT playerID FROM players_teams WHERE tmID = 'AFS')  GROUP BY firstName, lastName  ORDER BY tallest_height DESC  LIMIT 1;
SELECT p.lastName  FROM players p JOIN players_teams pt ON p.playerID = pt.playerID WHERE pt.tmID = 'BLB';
SELECT COUNT(DISTINCT coachID)  FROM awards_coaches  WHERE year BETWEEN 1962 AND 1975;
SELECT coachID FROM awards_coaches WHERE year BETWEEN 1970 AND 1990 GROUP BY coachID HAVING COUNT(coachID) = 2;
SELECT COUNT(DISTINCT coachID)  FROM awards_coaches  WHERE year BETWEEN 1962 AND 2011  AND (award LIKE 'NBA%' OR award LIKE 'ABA%')  GROUP BY coachID  HAVING COUNT(DISTINCT CASE WHEN award LIKE 'NBA%' THEN 1 END) > 0  AND COUNT(DISTINCT CASE WHEN award LIKE 'ABA%' THEN 1 END) > 0;
SELECT AVG(points) AS average_points FROM player_allstar JOIN players ON player_allstar.playerID = players.playerID WHERE player_allstar.season_id = 1975 AND players.birthCountry = 'USA';
SELECT p.lastName, p.firstName FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE p.height > 75;
SELECT MIN(p.weight) AS minimum_weight FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE p.college = 'UCLA';
SELECT MAX(weight) AS max_weight FROM players WHERE birthCountry = 'USA' AND playerID IN (SELECT playerID FROM player_allstar);
SELECT SUM(pa.points) AS total_points FROM player_allstar pa JOIN players p ON pa.playerID = p.playerID WHERE pa.season_id BETWEEN 1960 AND 1970 AND p.deathDate = '0000-00-00';
SELECT p.lastName, p.firstName FROM players p JOIN players_teams pt ON p.playerID = pt.playerID WHERE p.birthDate >= '1950-01-01' AND (pt.oRebounds / pt.rebounds) > 0.3;
SELECT COUNT(*)  FROM awards_players  WHERE award = 'Rookie of the Year'  AND year BETWEEN 1969 AND 2010;
SELECT t.name FROM teams t JOIN players_teams pt ON t.tmID = pt.tmID JOIN player_allstar pa ON pt.playerID = pa.playerID GROUP BY t.tmID, t.name HAVING COUNT(pa.playerID) >= 3;
SELECT MAX(pt.points) AS max_points FROM players_teams pt JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year WHERE t.rank = 1 AND t.year BETWEEN 1950 AND 1970;
SELECT DISTINCT p.lastName, p.firstName FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year WHERE t.rank = 1 AND t.year BETWEEN 1937 AND 1940 GROUP BY pt.tmID HAVING COUNT(CASE WHEN t.rank = 1 THEN 1 END) >= 3;
SELECT t.name FROM teams t JOIN players_teams pt ON t.tmID = pt.tmID AND t.year = pt.year WHERE t.rank = 3 AND t.year BETWEEN 1937 AND 1940 GROUP BY t.name ORDER BY MAX(pt.points) DESC LIMIT 1;
SELECT COUNT(DISTINCT pt.tmID) AS team_count FROM players_teams pt WHERE pt.year = 1937 GROUP BY pt.tmID HAVING SUM(pt.points) >= 500;
SELECT COUNT(DISTINCT pt.playerID)  FROM players_teams pt  JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year  WHERE t.year = 1990 AND (t.won / t.games) > 0.75;
SELECT playerID, firstName, lastName, height FROM players WHERE race = 'B' ORDER BY height ASC LIMIT 3;
SELECT COUNT(*)  FROM draft  WHERE draftYear = 1970 AND firstName = 'Joe';
SELECT SUM(fg_made) AS total_fg_made FROM player_allstar WHERE first_name = 'George' AND last_name = 'Mikan' AND season_id BETWEEN '1951' AND '1953';
SELECT      MIN((weight / (height * height)) * 703) AS min_bmi,     MAX((weight / (height * height)) * 703) AS max_bmi FROM      players;
SELECT name  FROM teams  WHERE homeLost / (homeWon + homeLost) = (     SELECT MAX(homeLost / (homeWon + homeLost))      FROM teams );
SELECT (d.draftYear - YEAR(p.birthDate)) AS age_when_drafted FROM draft d JOIN players p ON d.playerID = p.playerID WHERE p.firstName = 'Alexis' AND p.lastName = 'Ajinca' ORDER BY d.draftYear ASC LIMIT 1;
SELECT MAX(height) AS tallest_height, firstName, lastName  FROM players  JOIN players_teams ON players.playerID = players_teams.playerID  JOIN teams ON players_teams.tmID = teams.tmID  WHERE teams.name = 'Denver Nuggets' AND players_teams.year > 1980;
SELECT playerID, COUNT(award) AS award_count FROM awards_players JOIN players ON awards_players.playerID = players.playerID WHERE players.deathDate IS NOT NULL GROUP BY playerID ORDER BY award_count DESC LIMIT 1;
SELECT t.name FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON pt.tmID = t.tmID WHERE p.college = 'UCLA' GROUP BY t.tmID, t.name ORDER BY COUNT(p.playerID) DESC LIMIT 1;
SELECT AVG((weight / (height * height)) * 703) AS average_BMI FROM player_allstar JOIN players ON player_allstar.playerID = players.playerID;
SELECT t.name FROM teams t WHERE t.lgID = 'ABA' AND t.year IN (1972, 1973) GROUP BY t.tmID ORDER BY      (SUM(CASE WHEN t.year = 1973 THEN t.won END) / NULLIF(SUM(CASE WHEN t.year = 1973 THEN t.won + t.lost END), 0)) -     (SUM(CASE WHEN t.year = 1972 THEN t.won END) / NULLIF(SUM(CASE WHEN t.year = 1972 THEN t.won + t.lost END), 0)) ) DESC LIMIT 1;
SELECT firstName FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE pa.league_id = 'NBL' GROUP BY p.playerID, p.firstName HAVING SUM(pa.personal_fouls) = (     SELECT MAX(total_fouls)     FROM (         SELECT SUM(personal_fouls) AS total_fouls         FROM player_allstar         WHERE league_id = 'NBL'         GROUP BY playerID     ) AS subquery );
SELECT AVG(height) AS average_height FROM players JOIN player_allstar ON players.playerID = player_allstar.playerID WHERE player_allstar.conference = 'East';
SELECT coachID, SUM(won) AS total_won FROM coaches WHERE coachID IN (     SELECT coachID     FROM awards_coaches     WHERE award = 'ABA Coach of the Year' ) GROUP BY coachID ORDER BY total_won DESC LIMIT 1;
SELECT t.name  FROM awards_coaches ac  JOIN coaches c ON ac.coachID = c.coachID  JOIN teams t ON c.tmID = t.tmID AND c.year = t.year  WHERE ac.award = 'NBA Coach of the Year' AND ac.year = 1992;
SELECT p.firstName, p.lastName FROM players p JOIN players_teams pt ON p.playerID = pt.playerID WHERE pt.year = 1973 ORDER BY (pt.fgMade * 1.0 / pt.fgAttempted) DESC LIMIT 1;
SELECT teams.name  FROM draft  JOIN teams ON draft.tmID = teams.tmID  WHERE draft.firstName = 'Mike' AND draft.lastName = 'Lynn';
SELECT COUNT(DISTINCT p.playerID)  FROM awards_players ap  JOIN players p ON ap.playerID = p.playerID  WHERE ap.award = 'Most Improved Player'  AND ap.year BETWEEN 1985 AND 1990  AND p.birthCountry = 'USA';
SELECT p.firstName, p.lastName FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE p.college = 'California';
SELECT COUNT(DISTINCT coachID) AS coach_count FROM awards_coaches WHERE year BETWEEN 1950 AND 1970 GROUP BY coachID HAVING COUNT(award) > 1;
SELECT COUNT(DISTINCT playerID)  FROM awards_players  WHERE award = 'Most Valuable Player'  AND year BETWEEN 1969 AND 1975;
SELECT t.name FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON pt.tmID = t.tmID GROUP BY t.name, p.birthState HAVING COUNT(p.playerID) >= 5;
SELECT COUNT(DISTINCT pt.tmID) AS team_count FROM players_teams pt JOIN player_allstar pa ON pt.playerID = pa.playerID WHERE pa.league_id = 'NBA' GROUP BY pt.tmID HAVING COUNT(pa.playerID) >= 3;
SELECT birthState, COUNT(playerID) AS player_count FROM players JOIN player_allstar ON players.playerID = player_allstar.playerID GROUP BY birthState ORDER BY player_count DESC LIMIT 1;
SELECT COUNT(DISTINCT pt.playerID)  FROM players_teams pt  JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year  WHERE t.rank = 6 AND t.year = 1937;
SELECT COUNT(DISTINCT pt.playerID)  FROM players_teams pt  JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year  WHERE t.year = 1950 AND (t.lost / (t.won + t.lost)) < 0.2;
SELECT CONCAT(firstName, ' ', middleName, ' ', lastName) AS fullName FROM players WHERE birthCountry != 'USA';
SELECT coachID FROM coaches GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2;
SELECT coachID, (won - lost) AS win_difference FROM coaches WHERE year = 1988 ORDER BY win_difference DESC LIMIT 1;
SELECT t.name FROM awards_coaches ac JOIN coaches c ON ac.coachID = c.coachID AND ac.year = c.year JOIN teams t ON c.tmID = t.tmID AND c.year = t.year WHERE ac.award = 'NBA Coach of the Year' AND ac.year = 2010;
SELECT p.firstName, p.lastName, p.height, p.weight FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE pa.ftAttempted > 0 AND pa.ftAttempted = pa.ftMade;
SELECT p.firstName, p.lastName, t.name FROM draft d JOIN players p ON d.playerID = p.playerID JOIN teams t ON d.tmID = t.tmID WHERE d.draftFrom = 'Seattle' AND d.draftYear BETWEEN 1965 AND 1970;
SELECT CONCAT(firstName, ' ', middleName, ' ', lastName) AS full_name,         (2003 - YEAR(birthDate)) AS age FROM players  JOIN awards_players ON players.playerID = awards_players.playerID WHERE awards_players.award = 'Finals MVP' AND awards_players.year = 2003;
SELECT t.name AS champion, sp.year FROM series_post sp JOIN teams t ON sp.tmIDWinner = t.tmID AND sp.lgIDWinner = t.lgID WHERE sp.year BETWEEN 1950 AND 1960 AND sp.round = 'F';
SELECT t.name AS team_name, c.coachID FROM teams t JOIN coaches c ON t.tmID = c.tmID AND t.year = c.year JOIN series_post s ON t.tmID = s.tmIDWinner OR t.tmID = s.tmIDLoser WHERE s.round = 'QF' AND s.year = 1946;
SELECT CONCAT(p.firstName, ' ', COALESCE(p.middleName, ''), ' ', p.lastName) AS fullName FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN series_post sp ON pt.tmID = sp.tmIDWinner AND sp.year = 1970 AND sp.round = 'F';
SELECT college  FROM players  WHERE playerID = (     SELECT playerID      FROM awards_players      WHERE year = 1970      GROUP BY playerID      ORDER BY COUNT(award) DESC      LIMIT 1 );
SELECT p.firstName, p.lastName, MAX(p.birthDate) AS youngest_birthDate FROM awards_players ap JOIN players p ON ap.playerID = p.playerID WHERE ap.award = 'Rookie of the Year' GROUP BY p.playerID ORDER BY youngest_birthDate DESC LIMIT 1;
SELECT CONCAT(p.firstName, ' ', p.middleName, ' ', p.lastName) AS fullName FROM draft d JOIN players p ON d.playerID = p.playerID WHERE d.draftYear = 1973 AND d.draftRound = 1 AND p.birthCountry <> 'USA';
SELECT (SUM(o_rebounds) / SUM(rebounds)) * 100 AS offensive_rebound_percentage FROM player_allstar WHERE season_id = '2000';
SELECT c.year, t.name AS team, c.coachID FROM coaches c JOIN teams t ON c.tmID = t.tmID AND c.year = t.year WHERE (c.won / (c.won + c.lost)) > 0.75;
SELECT DISTINCT c.* FROM coaches c JOIN teams t ON c.tmID = t.tmID AND c.year = t.year WHERE t.name = 'Oklahoma City Thunder';
SELECT COUNT(DISTINCT playerID) AS player_count FROM player_allstar WHERE season_id = 1990 AND o_rebounds <= d_rebounds * 0.5;
SELECT COUNT(DISTINCT playerID) AS num_players FROM player_allstar WHERE season_id BETWEEN 2000 AND 2005 GROUP BY playerID HAVING SUM(steals) <= 10;
SELECT p.playerID, p.firstName, p.lastName FROM draft d JOIN awards_players ap ON d.playerID = ap.playerID JOIN players p ON d.playerID = p.playerID WHERE d.tmID = 'Portland'    AND d.draftRound = 2    AND d.draftYear = 1971    AND ap.award = 'Rookie of the Year';
SELECT COUNT(*)  FROM player_allstar  JOIN players ON player_allstar.playerID = players.playerID  WHERE player_allstar.season_id = 1973 AND players.race = 'B';
SELECT name  FROM teams  WHERE year = 1947 AND round = 'QF' AND d_pts >= 3513;
SELECT      (SUM(lost) * 100.0 / SUM(games)) AS percentage_lost FROM      teams WHERE      name = 'Houston Mavericks';
SELECT playerID  FROM awards_players  WHERE award = 'Most Valuable Player' AND lgID = 'NBA' AND year > 1990;
SELECT COUNT(*)  FROM players_teams  WHERE playerID = 'abdulka01'    AND tmID = 'LAL'    AND year BETWEEN 1975 AND 1980;
SELECT      (COUNT(CASE WHEN award = 'NBA Coach of the Year' THEN 1 END) * 100.0 / COUNT(coachID)) AS percentage FROM      awards_coaches WHERE      year = 1969;
SELECT      (          (COUNT(CASE WHEN year = 1947 AND tmIDWinner = 'CHS' THEN 1 END) * 1.0 / NULLIF(COUNT(CASE WHEN year = 1947 THEN 1 END), 0)) -          (COUNT(CASE WHEN year = 1946 AND tmIDWinner = 'CHS' THEN 1 END) * 1.0 / NULLIF(COUNT(CASE WHEN year = 1946 THEN 1 END), 0))     ) * 100 AS winning_rate_difference_percentage FROM      series_post WHERE      year IN (1946, 1947);
SELECT COUNT(*)  FROM awards_players ap JOIN players p ON ap.playerID = p.playerID WHERE ap.year = 2010 AND p.hsCity = 'Chicago';
SELECT      (COUNT(DISTINCT CASE WHEN a.award = 'All-Defensive Second Team' THEN a.playerID END) * 100.0 / COUNT(DISTINCT p.playerID)) AS percentage FROM      players p LEFT JOIN      awards_players a ON p.playerID = a.playerID WHERE      p.college = 'Auburn';
SELECT CONCAT(p.firstName, ' ', p.middleName, ' ', p.lastName) AS full_name, pa.steals FROM player_allstar pa JOIN players p ON pa.playerID = p.playerID WHERE pa.season_id = '1997' ORDER BY pa.steals DESC LIMIT 5;
SELECT p.college FROM awards_players ap JOIN players p ON ap.playerID = p.playerID WHERE ap.award = 'Finals MVP' AND ap.year = 1990 AND ap.lgID = 'NBA';
SELECT playerID  FROM player_allstar  WHERE season_id = 1996    AND lgID = 'NBA'    AND ft_attempted > 0    AND ft_made / ft_attempted > 0.7;
SELECT COUNT(*)  FROM player_allstar  WHERE season_id BETWEEN 1980 AND 1983  AND league_id = 'NBA'  AND (three_made / three_attempted) > 0.6;
SELECT DISTINCT coachID  FROM coaches  WHERE lgID = 'NBA' AND tmID = 'STL' AND won > lost;
SELECT COUNT(*)  FROM awards_coaches ac  JOIN coaches c ON ac.coachID = c.coachID  WHERE c.tmID = 'CHI' AND ac.award = 'Coach of the Year' AND ac.lgID = 'NBA';
SELECT p.firstName, p.lastName FROM players p JOIN draft d ON p.playerID = d.playerID JOIN player_allstar pa ON p.playerID = pa.playerID WHERE d.draftYear BETWEEN 1990 AND 2000 AND d.lgID = 'NBA' GROUP BY p.playerID ORDER BY SUM(pa.points) DESC LIMIT 1;
SELECT CONCAT_WS(' ', p.firstName, p.middleName, p.lastName) AS fullName FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE p.college = 'Wake Forest college' GROUP BY p.playerID HAVING SUM(pa.o_rebounds) > SUM(pa.d_rebounds) ORDER BY (SUM(pa.o_rebounds) - SUM(pa.d_rebounds)) DESC LIMIT 1;
SELECT CONCAT(p.firstName, ' ', p.middleName, ' ', p.lastName) AS full_name, pt.tmID FROM players p JOIN players_teams pt ON p.playerID = pt.playerID WHERE p.birthCity = 'Atlanta' ORDER BY pt.blocks DESC LIMIT 1;
SELECT t.name FROM teams t WHERE t.year BETWEEN 1980 AND 2000 GROUP BY t.name HAVING COUNT(CASE WHEN t.rank = 1 THEN 1 END) >= 5    AND SUM(t.lost) >= 2;
SELECT pt.tmID, p.firstName, p.lastName, MAX(pt.points / NULLIF(pt.minutes, 0)) AS points_per_minute FROM players_teams pt JOIN players p ON pt.playerID = p.playerID WHERE pt.lgID = 'NBA' AND pt.year BETWEEN 1991 AND 2000 GROUP BY pt.tmID, p.firstName, p.lastName ORDER BY points_per_minute DESC LIMIT 1;
SELECT      AVG(CASE WHEN d.lgID = 'ABA' THEN 1970 - YEAR(p.birthDate) END) -      AVG(CASE WHEN d.lgID = 'NBA' THEN 1970 - YEAR(p.birthDate) END) AS age_difference FROM      draft d JOIN      players p ON d.playerID = p.playerID WHERE      d.draftYear = 1970;
SELECT playerID, MAX(GP) AS max_GP FROM players_teams WHERE year = 2011 AND lgID = 'NBA' GROUP BY playerID ORDER BY max_GP DESC LIMIT 1;
SELECT COUNT(DISTINCT d.playerID) AS AllStarCount FROM draft d JOIN player_allstar pa ON d.playerID = pa.playerID WHERE d.draftYear = 1996 AND d.draftRound = 1 AND d.lgID = 'NBA';
SELECT pt.tmID  FROM awards_players ap  JOIN players_teams pt ON ap.playerID = pt.playerID  WHERE ap.award LIKE '%MVP%' AND ap.year = 1997 AND ap.lgID = 'NBA';
SELECT t.won FROM teams t JOIN players_teams pt ON t.tmID = pt.tmID AND t.year = pt.year JOIN player_allstar pa ON pt.playerID = pa.playerID WHERE pa.season_id = '2001' AND pa.league_id = 'NBA' GROUP BY t.tmID ORDER BY SUM(pt.points) DESC LIMIT 1;
SELECT AVG(turnovers) AS turnovers_per_game FROM player_allstar WHERE season_id = '2003' AND league_id = 'NBA' AND playerID = (     SELECT playerID     FROM player_allstar     WHERE season_id = '2003' AND league_id = 'NBA'     ORDER BY assists DESC     LIMIT 1 );
SELECT COUNT(*) AS nba_titles FROM awards_players WHERE playerID = (SELECT playerID FROM players WHERE firstName = 'Ray' AND lastName = 'Allen')   AND award = 'NBA Championship'   AND lgID = 'NBA';
SELECT      (SELECT          SUM(won) * 1.0 / (SUM(won) + SUM(lost))       FROM          teams       WHERE          year = 2004) -      (SELECT          SUM(won) * 1.0 / (SUM(won) + SUM(lost))       FROM          teams       WHERE          year = 2003 AND tmID IN              (SELECT                  tmID               FROM                  draft               WHERE                  draftYear = 2003 AND draftRound = 1)) AS win_rate_increase;
SELECT COUNT(DISTINCT c.coachID)  FROM awards_coaches ac  JOIN coaches c ON ac.coachID = c.coachID  WHERE ac.award = 'NBA coach of the year'  AND c.year BETWEEN 1971 AND 1975  AND c.tmID = 'POR';
SELECT      (COUNT(CASE WHEN p.steals > 0 THEN p.playerID END) * 100.0 / COUNT(p.playerID)) AS percent_steals FROM      players_teams p WHERE      p.lgID = 'NBA' AND p.tmID = 'LAL';
SELECT CONCAT(p.firstName, ' ', p.middleName, ' ', p.lastName) AS player_name FROM players p JOIN players_teams pt ON p.playerID = pt.playerID WHERE pt.year = 1996 AND pt.playoff IS NULL ORDER BY pt.steals DESC LIMIT 1;
SELECT playerID  FROM players_teams  WHERE year = 1988 AND PostGP = 0  ORDER BY turnovers DESC  LIMIT 1;
SELECT tmID, (won * 1.0 / (won + lost)) AS winning_rate FROM teams WHERE lgID = 'NBA' AND year = 2000 AND playoff = 0 ORDER BY winning_rate DESC LIMIT 1;
SELECT tmID, MAX(o_pts) AS max_points FROM teams WHERE year = 1998 AND playoff = 'N' GROUP BY tmID ORDER BY max_points DESC LIMIT 1;
SELECT name  FROM teams  WHERE year = 2001 AND playoff = 'N'  AND won = (SELECT MAX(won) FROM teams WHERE year = 2001 AND playoff = 'N');
SELECT tmID, SUM(rebounds) AS total_rebounds FROM players_teams WHERE year = 1997 AND PostGP = 0 GROUP BY tmID ORDER BY total_rebounds DESC LIMIT 1;
SELECT pt.tmID  FROM draft d  JOIN players_teams pt ON d.playerID = pt.playerID  WHERE d.draftRound = 1 AND d.draftSelection = 6 AND d.draftYear = 1976 AND pt.year = 1976;
SELECT homeWon  FROM teams  WHERE year = 1998 AND tmID = (     SELECT tmID      FROM draft      WHERE draftYear = 1998 AND draftRound = 1 AND draftSelection = 12 );
SELECT weight, height FROM players WHERE playerID = (     SELECT playerID     FROM player_allstar     ORDER BY rebounds DESC     LIMIT 1 );
SELECT hsName FROM players WHERE playerID = (     SELECT playerID     FROM player_allstar     ORDER BY rebounds DESC     LIMIT 1 );
SELECT DISTINCT pt.tmID FROM player_allstar pas JOIN players_teams pt ON pas.playerID = pt.playerID WHERE pas.season_id = '1997'  AND pt.rebounds = (     SELECT MAX(rebounds)     FROM player_allstar     WHERE season_id = '1997' );
SELECT SUM(pt.points) AS career_points FROM players p JOIN player_allstar pt ON p.playerID = pt.playerID WHERE pt.season_id = (SELECT MAX(season_id) FROM player_allstar) AND (p.pos LIKE '%C%' OR p.pos LIKE '%F%' OR p.pos LIKE '%G%') GROUP BY p.playerID ORDER BY career_points DESC LIMIT 1;
SELECT pt.tmID FROM players p JOIN players_teams pt ON p.playerID = pt.playerID WHERE p.pos LIKE '%F' AND p.lgID = 'NBA' ORDER BY p.birthDate DESC LIMIT 1;
SELECT p.playerID, p.firstName, p.lastName, pa.games_played FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE p.college = 'Central Missouri State' AND pa.games_played = (SELECT MAX(games_played) FROM player_allstar WHERE playerID IN (SELECT playerID FROM players WHERE college = 'Central Missouri State'));
SELECT t.name FROM players_teams pt JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year WHERE pt.year = 2000 AND pt.GP = 82 ORDER BY pt.minutes ASC LIMIT 1;
SELECT CONCAT(p.firstName, ' ', p.lastName) AS full_name FROM players_teams pt JOIN players p ON pt.playerID = p.playerID WHERE pt.year = 1995 AND pt.GP = 82 ORDER BY pt.turnovers DESC LIMIT 1;
SELECT tmID, MAX(steals) AS max_steals FROM players_teams WHERE year = 2011 AND GP = GS GROUP BY tmID ORDER BY max_steals DESC LIMIT 1;
SELECT t.name FROM players_teams pt JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year WHERE pt.GP = pt.GS GROUP BY t.name ORDER BY COUNT(pt.playerID) DESC LIMIT 1;
SELECT p.birthDate FROM player_allstar AS pa JOIN players AS p ON pa.playerID = p.playerID WHERE pa.season_id = '2001' AND pa.rebounds = (     SELECT MAX(rebounds)     FROM player_allstar     WHERE season_id = '2001' );
SELECT t.name FROM player_allstar pa JOIN players_teams pt ON pa.playerID = pt.playerID JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year WHERE pa.season_id = '1997'  AND pa.rebounds = (SELECT MAX(rebounds) FROM player_allstar WHERE season_id = '1997');
SELECT t.name FROM players_teams pt JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year WHERE pt.rebounds > 600 AND pt.year = 2011 GROUP BY t.name HAVING COUNT(pt.playerID) > 1;
SELECT COUNT(*) FROM works WHERE Date < 1602;
SELECT COUNT(*)  FROM chapters  WHERE Act = 1 AND work_id = (SELECT id FROM works WHERE Title = 'Twelfth Night');
SELECT c.Description  FROM chapters c  JOIN works w ON c.work_id = w.id  WHERE w.Title = 'Twelfth Night' AND c.Act = 1 AND c.Scene = 2;
SELECT      (SELECT COUNT(*) FROM chapters WHERE Act = 1 AND work_id = (SELECT id FROM works WHERE Title = 'Twelfth Night')) -     (SELECT COUNT(*) FROM chapters WHERE Act = 5 AND work_id = (SELECT id FROM works WHERE Title = 'Twelfth Night')) AS SceneDifference;
SELECT w.Title  FROM characters c  JOIN paragraphs p ON c.id = p.character_id  JOIN chapters ch ON p.chapter_id = ch.id  JOIN works w ON ch.work_id = w.id  WHERE c.CharName = 'Lord Abergavenny';
SELECT c.CharName  FROM characters c JOIN paragraphs p ON c.id = p.character_id JOIN chapters ch ON p.chapter_id = ch.id JOIN works w ON ch.work_id = w.id WHERE w.Title = 'Twelfth Night';
SELECT COUNT(p.id)  FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id JOIN works w ON c.work_id = w.id WHERE w.Title = 'Twelfth Night' AND c.Act = 1 AND c.Scene = 1;
SELECT p.PlainText  FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id JOIN works w ON c.work_id = w.id WHERE w.Title = 'Twelfth Night' AND c.Act = 1 AND c.Scene = 1;
SELECT COUNT(*)  FROM paragraphs  WHERE character_id = (SELECT id FROM characters WHERE CharName = 'Lord Abergavenny');
SELECT p.id  FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE c.Description = 'son to Tamora';
SELECT COUNT(*)  FROM chapters  JOIN works ON chapters.work_id = works.id  WHERE chapters.Description = 'OLIVIA’S house.'  AND works.Title = 'Twelfth Night';
SELECT COUNT(DISTINCT c.id)  FROM characters c  JOIN paragraphs p ON c.id = p.character_id  JOIN chapters ch ON p.chapter_id = ch.id  JOIN works w ON ch.work_id = w.id  WHERE w.Title = 'Twelfth Night';
SELECT w.Title FROM works w JOIN chapters c ON w.id = c.work_id JOIN paragraphs p ON c.id = p.chapter_id GROUP BY w.id ORDER BY COUNT(p.character_id) DESC LIMIT 1;
SELECT AVG(character_count) AS average_characters FROM (     SELECT COUNT(DISTINCT character_id) AS character_count     FROM paragraphs     GROUP BY chapter_id ) AS character_counts;
SELECT AVG(scene_count) AS average_scenes_per_act FROM (     SELECT Act, COUNT(DISTINCT Scene) AS scene_count     FROM chapters     JOIN works ON chapters.work_id = works.id     WHERE works.Title = 'Twelfth Night'     GROUP BY Act ) AS act_scenes;
SELECT COUNT(*) FROM works WHERE GenreType = 'Comedy';
SELECT MIN(Date)  FROM works  WHERE GenreType = 'Poem';
SELECT Abbrev FROM characters WHERE CharName = 'Earl of Westmoreland';
SELECT c.Description FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id GROUP BY c.id ORDER BY COUNT(p.id) DESC LIMIT 1;
SELECT c.CharName  FROM paragraphs p  JOIN characters c ON p.character_id = c.id  WHERE p.PlainText = 'Would he do so, I''ld beg your precious mistress, Which he counts but a trifle.';
SELECT COUNT(*)  FROM characters  WHERE id IN (     SELECT DISTINCT character_id      FROM paragraphs      WHERE chapter_id IN (         SELECT id          FROM chapters          WHERE work_id = (             SELECT id              FROM works              WHERE Title = 'Titus Andronicus'         )     ) );
SELECT COUNT(DISTINCT Act) AS NumberOfActs FROM chapters JOIN works ON chapters.work_id = works.id WHERE works.LongTitle = 'Two Gentlemen of Verona';
SELECT c.Description  FROM paragraphs p  JOIN characters c ON p.character_id = c.id  WHERE p.id = '640171';
SELECT w.Title  FROM works w  JOIN chapters c ON w.id = c.work_id  JOIN paragraphs p ON c.id = p.chapter_id  JOIN characters ch ON p.character_id = ch.id  WHERE ch.CharName = 'Shylock';
SELECT COUNT(DISTINCT Scene)  FROM chapters  WHERE work_id = (SELECT id FROM works WHERE Title = 'King John');
SELECT COUNT(DISTINCT chapters.id) AS chapter_count FROM chapters JOIN paragraphs ON chapters.id = paragraphs.chapter_id JOIN characters ON paragraphs.character_id = characters.id WHERE characters.CharName = 'Demetrius';
SELECT w.Title  FROM works w  JOIN characters c ON c.id = 324  WHERE c.Description = 'this friend of Caesar';
SELECT c.Description  FROM chapters c  JOIN works w ON c.work_id = w.id  WHERE c.Act = '2' AND c.Scene = '2' AND w.Title = 'Midsummer Night''s Dream';
SELECT w.LongTitle FROM works w JOIN chapters c ON w.id = c.work_id WHERE w.GenreType = 'Tragedy' GROUP BY w.id, w.LongTitle ORDER BY COUNT(c.Scene) DESC LIMIT 1;
SELECT COUNT(*)  FROM paragraphs  WHERE chapter_id = (     SELECT id      FROM chapters      WHERE Description = 'A Sea-port in Cyprus. An open place near the quay.' );
SELECT      (SUM(CASE WHEN w.GenreType = 'Tragedy' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM      chapters c JOIN      works w ON c.work_id = w.id WHERE      w.Date = '1594';
SELECT AVG(chapter_count) AS average_chapters FROM (     SELECT COUNT(chapters.id) AS chapter_count     FROM works     JOIN chapters ON works.id = chapters.work_id     WHERE works.Date = '1599'     GROUP BY works.id ) AS chapter_counts;
SELECT COUNT(*)  FROM characters  WHERE Description = 'servant to Timon';
SELECT Title FROM works WHERE Date = (SELECT MIN(Date) FROM works);
SELECT COUNT(*) FROM works WHERE GenreType = 'Poem';
SELECT COUNT(*)  FROM chapters  WHERE work_id = 7 AND Act = 1;
SELECT COUNT(*)  FROM works  WHERE Date BETWEEN 1500 AND 1599 AND GenreType = 'Tragedy';
SELECT CharName  FROM characters  WHERE Description = 'Daughter to Capulet';
SELECT COUNT(*)  FROM paragraphs  WHERE PlainText = 'Ay, surely, mere the truth: I know his lady.';
SELECT w.LongTitle FROM works w JOIN chapters c ON w.id = c.work_id WHERE c.Act = 1 GROUP BY w.id ORDER BY COUNT(c.Scene) DESC LIMIT 1;
SELECT c.Description FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id GROUP BY c.id ORDER BY COUNT(p.id) DESC LIMIT 1;
SELECT Description  FROM chapters  JOIN works ON chapters.work_id = works.id  WHERE works.LongTitle = 'Twelfth Night, Or What You Will'  AND chapters.Act = 2  AND chapters.Scene = 2;
SELECT c.Description  FROM chapters c  JOIN paragraphs p ON c.id = p.chapter_id  WHERE p.ParagraphNum < 150;
SELECT w.Title  FROM works w  JOIN chapters c ON w.id = c.work_id  WHERE c.Description = 'A field near Windsor';
SELECT COUNT(p.id) AS ParagraphCount FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id WHERE c.id = (     SELECT c2.id     FROM chapters c2     WHERE c2.Act = 1     GROUP BY c2.work_id     ORDER BY COUNT(c2.Scene) DESC     LIMIT 1 );
SELECT CharName  FROM characters  JOIN paragraphs ON characters.id = paragraphs.character_id  JOIN chapters ON paragraphs.chapter_id = chapters.id  WHERE chapters.Description = 'The sea-coast.'  AND characters.CharName != '(stage directions)'  GROUP BY CharName  HAVING COUNT(paragraphs.character_id) = 5;
SELECT COUNT(*)  FROM chapters c JOIN works w ON c.work_id = w.id JOIN paragraphs p ON c.id = p.chapter_id WHERE w.Title = 'As You Like It' AND p.ParagraphNum < 50;
SELECT p.character_id  FROM paragraphs p  JOIN chapters c ON p.chapter_id = c.id  WHERE c.Description = 'Florence. Without the walls. A tucket afar off.'  AND p.PlainText = 'His name, I pray you.';
SELECT COUNT(*)  FROM characters  WHERE id IN (SELECT DISTINCT character_id FROM paragraphs WHERE chapter_id IN (SELECT id FROM chapters WHERE work_id = (SELECT id FROM works WHERE Title = 'Hamlet')));
SELECT COUNT(*)  FROM chapters  WHERE Act = 5 AND work_id = (SELECT id FROM works WHERE LongTitle = 'History of Henry VIII');
SELECT COUNT(DISTINCT w.id) FROM works w JOIN chapters c ON w.id = c.work_id WHERE w.GenreType = 'History' AND c.Act = 1 GROUP BY w.id HAVING COUNT(c.Scene) <= 2;
SELECT COUNT(DISTINCT Act) AS ActCount FROM chapters WHERE work_id = (SELECT id FROM works WHERE Title = 'Sonnets');
SELECT c.Description  FROM chapters c  JOIN paragraphs p ON c.id = p.chapter_id  JOIN characters ch ON p.character_id = ch.id  WHERE ch.Abbrev = '1Play'  ORDER BY p.chapter_id  LIMIT 1;
SELECT w.Title, w.GenreType FROM works w JOIN chapters c ON w.id = c.work_id GROUP BY w.id, w.Title, w.GenreType HAVING COUNT(c.Act) = 1;
SELECT COUNT(p.id)  FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id JOIN characters ch ON p.character_id = ch.id WHERE ch.CharName = 'Sir Richard Ratcliff'  AND c.id = (     SELECT c2.id      FROM chapters c2     JOIN paragraphs p2 ON c2.id = p2.chapter_id     WHERE p2.character_id = (SELECT id FROM characters WHERE CharName = 'Sir Richard Ratcliff')     GROUP BY c2.id     ORDER BY COUNT(p2.id) DESC     LIMIT 1 );
SELECT Description  FROM chapters  WHERE Act = 1 AND Scene = 1 AND work_id = (SELECT id FROM works WHERE Title = 'A Lover''s Complaint');
SELECT w.Date  FROM works w  JOIN chapters c ON w.id = c.work_id  GROUP BY w.id  HAVING COUNT(c.Scene) = 154;
SELECT AVG(scene_count) AS average_scenes FROM (     SELECT COUNT(DISTINCT Scene) AS scene_count     FROM chapters     JOIN works ON chapters.work_id = works.id     WHERE works.GenreType = 'Comedy'     GROUP BY works.id ) AS comedy_scenes;
WITH CharacterCounts AS (     SELECT          c.CharName,         COUNT(p.id) AS AppearanceCount     FROM          paragraphs p     JOIN          characters c ON p.character_id = c.id     JOIN          chapters ch ON p.chapter_id = ch.id     JOIN          works w ON ch.work_id = w.id     WHERE          w.LongTitle = 'The Tragedy of Romeo and Juliet'         AND c.CharName IN ('Romeo', 'Juliet')     GROUP BY          c.CharName ), TotalCount AS (     SELECT          COUNT(DISTINCT p.character_id) AS TotalCharacters     FROM          paragraphs p     JOIN          chapters ch ON p.chapter_id = ch.id     JOIN          works w ON ch.work_id = w.id     WHERE          w.LongTitle = 'The Tragedy of Romeo and Juliet' )  SELECT      cc.CharName,     cc.AppearanceCount,     (cc.AppearanceCount * 100.0 / tc.TotalCharacters) AS Percentage FROM      CharacterCounts cc, TotalCount tc ORDER BY      cc.AppearanceCount DESC LIMIT 1;
SELECT ParagraphNum FROM paragraphs WHERE PlainText = 'This is Illyria, lady';
SELECT COUNT(*) AS NumberOfParagraphs  FROM paragraphs  WHERE chapter_id = 18881;
SELECT Title FROM works WHERE GenreType = 'History' LIMIT 5;
SELECT COUNT(*)  FROM chapters  WHERE Act = 5 AND work_id = 9;
SELECT c.CharName, c.Description  FROM characters c  JOIN paragraphs p ON c.id = p.character_id  WHERE p.chapter_id = 18710;
SELECT COUNT(*)  FROM chapters  WHERE work_id = (SELECT id FROM works WHERE Title = 'Midsummer Night''s Dream');
SELECT COUNT(*)  FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id JOIN works w ON c.work_id = w.id WHERE c.Act = 5 AND c.Scene = 1 AND w.Title = 'Comedy of Errors';
SELECT c.CharName, c.Description  FROM characters c JOIN paragraphs p ON c.id = p.character_id JOIN chapters ch ON p.chapter_id = ch.id JOIN works w ON ch.work_id = w.id WHERE w.Title = 'Venus and Adonis';
SELECT w.Title  FROM works w  JOIN chapters c ON w.id = c.work_id  JOIN paragraphs p ON c.id = p.chapter_id  JOIN characters ch ON p.character_id = ch.id  WHERE ch.CharName = 'Froth';
SELECT COUNT(DISTINCT chapters.id)  FROM chapters  JOIN paragraphs ON chapters.id = paragraphs.chapter_id  JOIN characters ON paragraphs.character_id = characters.id  WHERE characters.CharName = 'First Witch';
SELECT Scene, Description  FROM chapters  WHERE Act = 1 AND work_id = (SELECT id FROM works WHERE LongTitle = 'Pericles, Prince of Tyre');
SELECT w.LongTitle  FROM works w  JOIN chapters c ON w.id = c.work_id  JOIN paragraphs p ON c.id = p.chapter_id  JOIN characters ch ON p.character_id = ch.id  WHERE ch.Description = 'Servant to Montague';
SELECT c.Scene, c.Act, w.Title FROM chapters c JOIN works w ON c.work_id = w.id WHERE c.Description = 'The house of ANTIPHOLUS of Ephesus';
SELECT c.CharName, p.ParagraphNum, p.PlainText FROM characters c JOIN paragraphs p ON c.id = p.character_id WHERE c.Description = 'cousin to the king';
SELECT AVG(scene_count) AS average_scenes_per_act FROM (     SELECT Act, COUNT(DISTINCT Scene) AS scene_count     FROM chapters     JOIN works ON chapters.work_id = works.id     WHERE works.Title = 'Antony and Cleopatra'     GROUP BY Act ) AS act_scenes;
SELECT      (COUNT(p.id) * 100.0 / (SELECT COUNT(*) FROM paragraphs)) AS percentage FROM      paragraphs p JOIN      chapters c ON p.chapter_id = c.id JOIN      works w ON c.work_id = w.id WHERE      w.Title = 'All''s Well That Ends Well';
SELECT COUNT(CharName)  FROM characters  WHERE Abbrev = 'all';
SELECT Title FROM works WHERE GenreType = 'comedy' LIMIT 3;
SELECT      (SELECT COUNT(*) FROM works WHERE Date > 1593 AND GenreType = 'comedy') -     (SELECT COUNT(*) FROM works WHERE Date > 1593 AND GenreType = 'History') AS Difference
SELECT LongTitle  FROM works  WHERE GenreType = 'History'  ORDER BY Date DESC  LIMIT 1;
SELECT id FROM works WHERE Title LIKE '%Henry%';
SELECT CharName FROM characters WHERE Description = 'a senator of Venice';
SELECT c.CharName  FROM paragraphs p  JOIN characters c ON p.character_id = c.id  WHERE p.ParagraphNum = 8 AND p.chapter_id = 18820;
SELECT c.Description  FROM chapters c  JOIN paragraphs p ON c.id = p.chapter_id  JOIN characters ch ON p.character_id = ch.id  WHERE c.id = 18704 AND ch.CharName = 'Orsino';
SELECT COUNT(DISTINCT Scene)  FROM chapters  JOIN works ON chapters.work_id = works.id  WHERE works.LongTitle = 'Twelfth Night, Or What You Will';
SELECT c.Description  FROM characters c JOIN paragraphs p ON c.id = p.character_id WHERE p.ParagraphNum = 20;
SELECT COUNT(DISTINCT c.id)  FROM chapters c  JOIN paragraphs p ON c.id = p.chapter_id  JOIN characters ch ON p.character_id = ch.id  WHERE ch.CharName = 'Gratiano'  AND ch.Description = 'friend to Antonio and Bassiano';
SELECT c.Description  FROM chapters c  JOIN works w ON c.work_id = w.id  WHERE c.id = 18706 AND w.Title = 'All''s Well That Ends Well';
SELECT c.CharName  FROM paragraphs p  JOIN characters c ON p.character_id = c.id  WHERE p.ParagraphNum = 3;
SELECT p.* FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE c.CharName = 'Aedile';
SELECT CharName  FROM characters  WHERE id IN (SELECT character_id FROM paragraphs WHERE chapter_id = 18708)  LIMIT 2;
SELECT COUNT(DISTINCT Act)  FROM chapters  WHERE work_id = (SELECT id FROM works WHERE Title = 'Two Gentlemen of Verona' AND GenreType = 'comedy');
SELECT      (COUNT(CASE WHEN w.GenreType = 'history' AND scene_count >= 5 THEN 1 END) * 100.0 / COUNT(w.id)) AS percentage FROM      works w JOIN      chapters c ON w.id = c.work_id JOIN      (SELECT chapter_id, COUNT(Scene) AS scene_count      FROM chapters      WHERE DATE >= 1500 AND DATE <= 1599      GROUP BY chapter_id) AS scene_counts ON c.id = scene_counts.chapter_id WHERE      w.Date >= 1500 AND w.Date <= 1599 GROUP BY      w.id;
SELECT (SUM(CASE WHEN Act = 5 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM chapters JOIN works ON chapters.work_id = works.id WHERE works.Title = 'Titus Andronicus';
SELECT COUNT(*) FROM works WHERE GenreType = 'Tragedy';
SELECT COUNT(*) FROM works WHERE Title LIKE '%Henry%';
SELECT character_id  FROM paragraphs  WHERE PlainText = 'O my poor brother! and so perchance may he be.';
SELECT ParagraphNum, PlainText  FROM paragraphs  WHERE character_id = (SELECT id FROM characters WHERE CharName = 'Sir Andrew Aguecheek');
SELECT w.Title, c.CharName FROM works w JOIN characters c ON c.id IN (SELECT DISTINCT character_id FROM paragraphs p JOIN chapters ch ON p.chapter_id = ch.id WHERE ch.work_id = w.id) WHERE w.Date = (SELECT MAX(Date) FROM works);
SELECT p.PlainText  FROM paragraphs p  JOIN characters c ON p.character_id = c.id  WHERE p.ParagraphNum >= 1900 AND p.ParagraphNum <= 1950  AND c.Description = 'a sea captain, friend to Sebastian';
SELECT w.LongTitle  FROM works w  JOIN chapters c ON w.id = c.work_id  WHERE c.Act = 4 AND c.Scene = 5 AND c.Description = 'Mytilene. A street before the brothel.';
SELECT c.CharName  FROM characters c  JOIN paragraphs p ON c.id = p.character_id  WHERE p.PlainText = 'This is Illyria, lady.';
SELECT COUNT(DISTINCT w.id)  FROM works w  JOIN chapters c ON w.id = c.work_id  JOIN paragraphs p ON c.id = p.chapter_id  JOIN characters ch ON p.character_id = ch.id  WHERE w.Date >= 1600 AND w.Date <= 1610  AND ch.CharName = 'Third Servingman';
SELECT Description  FROM chapters  WHERE work_id = (SELECT id FROM works WHERE Title = 'Venus and Adonis')  AND Scene = (SELECT MAX(Scene) FROM chapters WHERE work_id = (SELECT id FROM works WHERE Title = 'Venus and Adonis'));
SELECT COUNT(p.character_id) AS total_lines FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id JOIN works w ON c.work_id = w.id JOIN characters ch ON p.character_id = ch.id WHERE w.Title = 'Twelfth Night' AND c.Act = 1 AND c.Scene = 2 AND ch.CharName = 'Viola';
SELECT p.character_id, c.work_id  FROM paragraphs p  JOIN chapters c ON p.chapter_id = c.id  WHERE p.PlainText = 'Fear not thou, man, thou shalt lose nothing here.';
SELECT c.Description  FROM paragraphs p  JOIN chapters c ON p.chapter_id = c.id  WHERE p.PlainText = 'What, wilt thou hear some music, my sweet love?';
SELECT DISTINCT c.Scene FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id JOIN works w ON c.work_id = w.id WHERE ch.CharName = 'Sir Toby Belch' AND w.Title = 'Twelfth Night';
SELECT w.Title  FROM works w JOIN chapters c ON w.id = c.work_id JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE w.Date < 1600 AND w.GenreType = 'Tragedy' AND ch.CharName = 'Tybalt';
SELECT DISTINCT c.id FROM chapters c JOIN works w ON c.work_id = w.id WHERE w.Date > (SELECT SUM(Date) / COUNT(Date) * 0.89 FROM works);
SELECT      (SUM(CASE WHEN c.CharName = 'antonio' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM      works w JOIN      chapters ch ON w.id = ch.work_id JOIN      paragraphs p ON ch.id = p.chapter_id JOIN      characters c ON p.character_id = c.id WHERE      w.GenreType = 'Comedy';
SELECT car_name  FROM data  JOIN price ON data.ID = price.ID  WHERE cylinders = 8  ORDER BY price DESC  LIMIT 1;
SELECT COUNT(*)  FROM data d  JOIN price p ON d.ID = p.ID  WHERE d.weight > 3000 AND p.price < 30000;
SELECT d.acceleration  FROM data d  JOIN price p ON d.ID = p.ID  WHERE p.price = (SELECT MAX(price) FROM price);
SELECT p.price  FROM price p  JOIN data d ON p.ID = d.ID  WHERE d.car_name = 'ford torino';
SELECT c.origin  FROM country c  JOIN production p ON c.country = p.country  JOIN data d ON p.ID = d.ID  WHERE d.car_name = 'ford torino' AND p.model_year = 1970;
SELECT COUNT(*)  FROM data d  JOIN production p ON d.ID = p.ID  JOIN country c ON p.country = c.country  WHERE p.model_year = 1970 AND c.origin = 'USA';
SELECT d.car_name  FROM data d  JOIN production p ON d.ID = p.ID  JOIN country c ON p.country = c.country  WHERE c.origin = 'USA';
SELECT car_name  FROM data  JOIN price ON data.ID = price.ID  ORDER BY price DESC  LIMIT 3;
SELECT model_year  FROM production  JOIN data ON production.ID = data.ID  WHERE car_name = 'chevrolet impala';
SELECT COUNT(*)  FROM data d  JOIN price p ON d.ID = p.ID  WHERE d.acceleration > 10 AND p.price > 20000 AND p.price < 30000;
SELECT d.weight  FROM data d  JOIN price p ON d.ID = p.ID  WHERE p.price > 40000;
SELECT MAX(d.acceleration) FROM data d JOIN price p ON d.ID = p.ID WHERE p.price > 40000;
SELECT AVG(p.price) AS average_price FROM price p JOIN data d ON p.ID = d.ID WHERE d.cylinders = 8;
SELECT MAX(displacement / cylinders) AS max_sweep_volume FROM data JOIN price ON data.ID = price.ID WHERE price.price < 30000;
SELECT COUNT(*)  FROM production p  JOIN country c ON p.country = c.country  WHERE c.origin = 'Europe';
SELECT c.origin  FROM country c  JOIN production p ON c.country = p.country  JOIN data d ON p.ID = d.ID  WHERE d.car_name = 'chevrolet malibu';
SELECT mpg  FROM data  WHERE ID = (SELECT ID FROM price ORDER BY price DESC LIMIT 1);
SELECT c.origin  FROM country c  JOIN production p ON c.country = p.country  WHERE p.ID = 382;
SELECT c.origin  FROM price p  JOIN production pr ON p.ID = pr.ID  JOIN country c ON pr.country = c.country  WHERE p.price = 44274.40748;
SELECT p.price  FROM price p  JOIN data d ON p.ID = d.ID  WHERE d.car_name = 'volkswagen dasher' AND d.acceleration = 14.1;
SELECT d.displacement  FROM price p  JOIN data d ON p.ID = d.ID  WHERE p.price = 37443.85589;
SELECT model_year  FROM price  JOIN data ON price.ID = data.ID  JOIN production ON data.ID = production.ID  WHERE price.price = 32650.65157;
SELECT p.price  FROM price p  JOIN data d ON p.ID = d.ID  WHERE d.car_name = 'toyota corona hardtop';
SELECT d.cylinders  FROM data d  JOIN price p ON d.ID = p.ID  WHERE p.price = (SELECT MIN(price) FROM price);
SELECT d.car_name, p.price FROM data d JOIN price p ON d.ID = p.ID WHERE d.weight = (SELECT MAX(weight) FROM data);
SELECT c.origin  FROM country c  JOIN data d ON c.country = d.car_name  WHERE d.horsepower = (SELECT MAX(horsepower) FROM data);
SELECT (COUNT(CASE WHEN c.country = 'Japan' THEN 1 END) * 100.0 / COUNT(d.ID)) AS percentage_japanese_cars FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.origin;
SELECT displacement / cylinders AS swept_volume FROM price p JOIN data d ON p.ID = d.ID WHERE p.price = 34538.97449;
SELECT car_name  FROM data  JOIN price ON data.ID = price.ID  ORDER BY price DESC  LIMIT 1;
SELECT COUNT(*)  FROM production p  JOIN country c ON p.country = c.origin  WHERE c.country = 'USA' AND p.model_year = 1981;
SELECT p.price  FROM price p  JOIN data d ON p.ID = d.ID  WHERE d.displacement / d.cylinders = (SELECT MAX(displacement / cylinders) FROM data);
SELECT car_name  FROM data  WHERE ID = (     SELECT ID      FROM data      JOIN production ON data.ID = production.ID      JOIN country ON production.country = country.country      WHERE country.origin = 'Japan'      ORDER BY horsepower DESC      LIMIT 1 );
SELECT COUNT(*)  FROM data  WHERE car_name = 'ford maverick';
SELECT c.country FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.origin WHERE d.mpg = (SELECT MAX(mpg) FROM data);
SELECT d.car_name  FROM data d  JOIN price p ON d.ID = p.ID  WHERE d.car_name LIKE 'dodge%'  ORDER BY p.price ASC  LIMIT 1;
SELECT d.car_name  FROM data d  JOIN price p ON d.ID = p.ID  JOIN production pr ON d.ID = pr.ID  JOIN country c ON pr.country = c.country  WHERE c.origin = 'USA'  ORDER BY p.price DESC  LIMIT 1;
SELECT COUNT(*)  FROM data d  JOIN price p ON d.ID = p.ID  WHERE d.displacement > 400 AND p.price > 30000;
SELECT model_year, COUNT(*) AS car_count FROM production JOIN country ON production.country = country.country WHERE country.origin = 'Europe' GROUP BY model_year ORDER BY car_count DESC LIMIT 1;
SELECT p.price  FROM price p  JOIN data d ON p.ID = d.ID  WHERE d.car_name = 'peugeot 505s turbo diesel';
SELECT d.acceleration  FROM data d  JOIN price p ON d.ID = p.ID  JOIN production pr ON d.ID = pr.ID  JOIN country c ON pr.country = c.country  WHERE c.origin = 'USA'  AND p.price = (SELECT MIN(price) FROM price p2                 JOIN production pr2 ON p2.ID = pr2.ID                 JOIN country c2 ON pr2.country = c2.country                 WHERE c2.origin = 'USA');
SELECT c.country, COUNT(p.ID) AS total_cars,         COUNT(p.ID) / COUNT(DISTINCT pr.model_year) AS annual_average FROM production pr JOIN country c ON pr.country = c.origin JOIN data p ON pr.ID = p.ID GROUP BY c.country ORDER BY total_cars DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN c.country = 'Japan' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      data d JOIN      production p ON d.ID = p.ID JOIN      country c ON p.country = c.origin WHERE      (d.displacement / d.cylinders) > 30;
SELECT car_name  FROM data  JOIN production ON data.ID = production.ID  WHERE model_year = 1975;
SELECT AVG(p.price) AS average_price FROM price p JOIN production pr ON p.ID = pr.ID JOIN country c ON pr.country = c.country WHERE c.origin = 'Europe';
SELECT price FROM price WHERE ID = 15;
SELECT COUNT(*)  FROM data d  JOIN production p ON d.ID = p.ID  JOIN country c ON p.country = c.country  WHERE c.origin = 'Japan' AND d.weight < 3000;
SELECT COUNT(*)  FROM data  JOIN production ON data.ID = production.ID  WHERE production.model_year = 1973 AND data.horsepower < 100;
SELECT d.ID  FROM data d  JOIN price p ON d.ID = p.ID  JOIN production pr ON d.ID = pr.ID  JOIN country c ON pr.country = c.origin  WHERE c.country = 'Japan' AND p.price > 35000 AND d.acceleration = 14;
SELECT p.model_year  FROM production p  JOIN data d ON p.ID = d.ID  WHERE d.weight = (SELECT MAX(weight) FROM data);
SELECT d.horsepower, p.model_year  FROM data d  JOIN production p ON d.ID = p.ID  WHERE d.car_name = 'subaru dl';
SELECT d.car_name  FROM data d  JOIN production p ON d.ID = p.ID  JOIN country c ON p.country = c.country  JOIN price pr ON d.ID = pr.ID  WHERE c.origin = 'Japan'  ORDER BY pr.price DESC  LIMIT 1;
SELECT d.car_name  FROM data d  JOIN price p ON d.ID = p.ID  WHERE p.price = 20000;
SELECT COUNT(*)  FROM price p  JOIN production pr ON p.ID = pr.ID  JOIN country c ON pr.country = c.country  WHERE p.price > 40000 AND c.origin = 'USA';
SELECT p.price, c.origin  FROM price p  JOIN data d ON p.ID = d.ID  JOIN production pr ON d.ID = pr.ID  JOIN country c ON pr.country = c.country  WHERE d.car_name = 'Ford Maverick';
SELECT d.car_name  FROM data d  JOIN price p ON d.ID = p.ID  WHERE p.price > (SELECT AVG(price) * 0.85 FROM price);
SELECT      (SELECT COUNT(ID) FROM data WHERE horsepower = 130 AND ID IN (SELECT ID FROM production WHERE model_year = 1970)) -     (SELECT COUNT(ID) FROM data WHERE horsepower = 130 AND ID IN (SELECT ID FROM production WHERE model_year = 1976)) AS difference;
SELECT d.ID  FROM data d  JOIN production p ON d.ID = p.ID  JOIN country c ON p.country = c.country  WHERE c.origin = 'Asia' AND p.model_year = 1979;
SELECT c.country FROM country c JOIN production p ON c.origin = p.country JOIN data d ON p.ID = d.ID WHERE d.mpg = (SELECT MIN(mpg) FROM data);
SELECT car_name, model, displacement / cylinders AS sweep_volume, model_year AS introduced_year FROM data JOIN production ON data.ID = production.ID WHERE weight = (SELECT MAX(weight) FROM data);
SELECT d.car_name, d.horsepower FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.country WHERE p.model_year = 1977 AND c.origin = 'Europe';
SELECT d.car_name, d.model FROM data d JOIN price p ON d.ID = p.ID WHERE p.price = (SELECT MAX(price) FROM price);
SELECT p.price  FROM price p  JOIN data d ON p.ID = d.ID  WHERE d.car_name = 'chevrolet bel air';
SELECT AVG(p.price) AS average_price FROM price p JOIN production pr ON p.ID = pr.ID JOIN country c ON pr.country = c.country WHERE c.origin = 'Japan';
SELECT c.country  FROM country c JOIN production p ON c.origin = p.country JOIN price pr ON p.ID = pr.ID WHERE pr.price = (SELECT MIN(price) FROM price);
SELECT d.ID, d.car_name, c.country FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.origin WHERE p.model_year = 1975 AND d.cylinders = (     SELECT MAX(cylinders)     FROM data d2     JOIN production p2 ON d2.ID = p2.ID     WHERE p2.model_year = 1975 );
SELECT d.car_name, d.acceleration, d.cylinders, p.model_year FROM price p JOIN data d ON p.ID = d.ID JOIN production pr ON d.ID = pr.ID WHERE p.price = (SELECT MIN(price) FROM price);
SELECT d.car_name, p.price FROM data d JOIN price p ON d.ID = p.ID WHERE d.model = 82 AND d.mpg > 30;
SELECT COUNT(*)  FROM data  WHERE car_name = 'ford maverick';
SELECT (COUNT(CASE WHEN c.country = 'USA' THEN 1 END) * 100.0 / COUNT(d.ID)) AS percentage_usa FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.origin;
SELECT AVG(car_count) AS average_production_rate, GROUP_CONCAT(car_name) AS cars FROM (     SELECT COUNT(ID) AS car_count, model_year     FROM production     WHERE model_year BETWEEN 1971 AND 1980     GROUP BY model_year ) AS yearly_counts, data WHERE weight < 1800;
SELECT AVG(p.price) AS average_price FROM price p JOIN data d ON p.ID = d.ID WHERE d.model = 70;
SELECT p.price  FROM price p  JOIN data d ON p.ID = d.ID  WHERE d.car_name = 'chevrolet vega 2300';
SELECT c.country  FROM country c  JOIN production p ON c.origin = p.country  JOIN data d ON p.ID = d.ID  WHERE d.car_name = 'chevy c20';
SELECT p.price  FROM price p  JOIN data d ON p.ID = d.ID  JOIN production pr ON d.ID = pr.ID  WHERE d.car_name LIKE 'ford%'  AND pr.model_year BETWEEN 1970 AND 1980;
SELECT car_name, mpg  FROM data  JOIN production ON data.ID = production.ID  WHERE model_year = 1975  ORDER BY mpg DESC  LIMIT 1;
SELECT d.car_name, d.mpg, p.price FROM data d JOIN price p ON d.ID = p.ID WHERE d.mpg = (SELECT MIN(mpg) FROM data) AND p.price = (SELECT MAX(price) FROM price);
SELECT COUNT(*)  FROM data d  JOIN production p ON d.ID = p.ID  JOIN country c ON p.country = c.country  WHERE c.origin = 'USA' AND d.acceleration < 12;
SELECT COUNT(*)  FROM data d  JOIN production p ON d.ID = p.ID  JOIN country c ON p.country = c.country  WHERE c.origin = 'Japan' AND d.weight > 2000;
SELECT car_name  FROM data  JOIN price ON data.ID = price.ID  WHERE price.price = (SELECT MAX(price) FROM price);
SELECT model_year  FROM production  JOIN data ON production.ID = data.ID  WHERE car_name = 'buick skylark 320';
SELECT c.country FROM country c JOIN production p ON c.origin = p.country JOIN price pr ON p.ID = pr.ID WHERE p.model_year = 1970 ORDER BY pr.price DESC LIMIT 1;
SELECT COUNT(*)  FROM data  JOIN production ON data.ID = production.ID  WHERE data.horsepower > 200 AND production.model_year = 1975;
SELECT (COUNT(CASE WHEN c.country = 'USA' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_american_cars FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.origin;
SELECT AVG(d.weight)  FROM data d  JOIN production p ON d.ID = p.ID  JOIN country c ON p.country = c.country  WHERE c.origin = 'Japan' AND d.cylinders = 4 AND p.model_year BETWEEN 1975 AND 1980;
SELECT SUM(donation_total) AS total_donations_2012 FROM donations WHERE donation_timestamp LIKE '2012%';
SELECT donation_timestamp, MAX(donation_total) AS highest_amount FROM donations GROUP BY donation_timestamp ORDER BY highest_amount DESC LIMIT 1;
SELECT SUM(donation_total) AS total_donations FROM donations WHERE donation_timestamp LIKE '2011%'   AND for_honoree = 't'   AND via_giving_page = 't';
SELECT donor_acctid,         (donation_optional_support / donation_total) * 100 AS percentage_optional_support FROM donations WHERE is_teacher_acct = 'f';
SELECT e.title  FROM essays e  JOIN projects p ON e.projectid = p.projectid  WHERE p.primary_focus_subject = 'Literacy';
SELECT e.title  FROM essays e  JOIN projects p ON e.projectid = p.projectid  WHERE p.poverty_level = 'highest poverty';
SELECT p.primary_focus_subject,         (SELECT GROUP_CONCAT(p2.title)          FROM projects p2          WHERE p2.primary_focus_subject = p.primary_focus_subject            AND p2.projectid != p.projectid) AS similar_projects FROM projects p JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Toot Your Flute!';
SELECT e.title  FROM essays e  JOIN projects p ON e.projectid = p.projectid  WHERE p.teacher_prefix = 'Dr.';
SELECT title, total_price_excluding_optional_support  FROM projects  WHERE students_reached = 320;
SELECT donations.donation_message, essays.title FROM donations JOIN essays ON donations.projectid = essays.projectid WHERE donations.donor_city = 'Texas City';
SELECT r.vendor_name, r.item_name, r.item_unit_price FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.projectid = (SELECT projectid FROM essays WHERE title = 'Lights, Camera, Action!');
SELECT SUM(donation_to_project) AS total_donations FROM donations JOIN projects ON donations.projectid = projects.projectid WHERE projects.title = 'Whistle While We Work!';
SELECT p.title AS project_name, p.short_description AS describe FROM projects p WHERE p.teacher_ny_teaching_fellow = 't';
SELECT p.title, p.total_price_excluding_optional_support FROM projects p WHERE p.students_reached >= 600 AND p.poverty_level = 'moderate poverty';
SELECT      (SUM(donation_total) / NULLIF(SUM(CASE WHEN p.school_metro = 'rural' THEN donation_total END), 0)) * 100 AS rural_donation_percentage FROM      donations d JOIN      projects p ON d.projectid = p.projectid;
SELECT      e.title AS project_name,     COALESCE(SUM(d.donation_to_project), 0) AS amount_collected,     (total_price_excluding_optional_support - COALESCE(SUM(d.donation_to_project), 0)) / total_price_excluding_optional_support * 100 AS percentage_lacking FROM      projects p JOIN      essays e ON p.projectid = e.projectid LEFT JOIN      donations d ON p.projectid = d.projectid WHERE      p.total_price_excluding_optional_support = (SELECT MAX(total_price_excluding_optional_support) FROM projects) GROUP BY      e.title, p.total_price_excluding_optional_support;
SELECT COUNT(DISTINCT schoolid)  FROM projects  WHERE school_district = 'West New York School District'  AND poverty_level = 'highest poverty';
SELECT COUNT(*)  FROM donations  WHERE is_teacher_acct = 't' AND donor_state = 'CO-Colorado';
SELECT projectid  FROM projects  ORDER BY total_price_including_optional_support DESC  LIMIT 1;
SELECT donor_state FROM donations WHERE payment_method = 'paypal'   AND for_honoree = 't'   AND payment_included_campaign_gift_card = 't' GROUP BY donor_state ORDER BY COUNT(donor_state) DESC LIMIT 1;
SELECT donationid, donation_total  FROM donations  WHERE donation_total = (SELECT MAX(donation_total) FROM donations);
SELECT p.projectid, r.item_name FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE (p.total_price_including_optional_support - p.total_price_excluding_optional_support) = (     SELECT MAX(total_price_including_optional_support - total_price_excluding_optional_support)     FROM projects );
SELECT r.item_name, r.item_quantity,         CASE WHEN e.teacher_prefix = 'Dr. ' THEN 'Yes' ELSE 'No' END AS has_phd FROM resources r JOIN projects p ON r.projectid = p.projectid JOIN essays e ON p.projectid = e.projectid WHERE p.projectid = 'd6ef27c07c30c81f0c16c32b6acfa2ff';
SELECT SUM(p.total_price_including_optional_support) AS total_price FROM essays e JOIN projects p ON e.projectid = p.projectid WHERE e.title = 'Recording Rockin'' Readers';
SELECT p.school_latitude, p.school_longitude  FROM essays e  JOIN projects p ON e.projectid = p.projectid  WHERE e.title = 'Smile for the Camera!!!';
SELECT SUM(d.donation_total) AS total_donations, e.title FROM donations d JOIN essays e ON d.projectid = e.projectid WHERE d.donation_total = (SELECT MAX(donation_total) FROM donations) GROUP BY e.title;
SELECT d.donor_acctid, r.project_resource_type, COUNT(*) AS project_count FROM donations d JOIN resources r ON d.projectid = r.projectid WHERE d.donation_total IN (     SELECT DISTINCT donation_total     FROM donations     ORDER BY donation_total DESC     LIMIT 10 ) GROUP BY d.donor_acctid, r.project_resource_type ORDER BY d.donor_acctid, project_count DESC;
SELECT p.projectid, p.date_posted, r.item_name FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE p.date_posted = (SELECT MIN(date_posted) FROM projects) ORDER BY p.projectid;
SELECT DISTINCT r.vendor_name  FROM resources r  JOIN projects p ON r.projectid = p.projectid  WHERE p.projectid IN (SELECT projectid FROM essays WHERE title = 'iMath');
SELECT p.date_posted, p.grade_level FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE r.item_quantity = (SELECT MAX(item_quantity) FROM resources)
SELECT AVG(donation_total) AS average_donation FROM donations WHERE projectid IN (     SELECT projectid     FROM essays     WHERE title = 'Recording Rockin'' Readers' );
SELECT      e.title AS essay_title,     d.donor_acctid AS biggest_donor,     (d.donation_to_project / p.total_price_excluding_optional_support) * 100 AS donation_percentage FROM      projects p JOIN      essays e ON p.projectid = e.projectid JOIN      donations d ON p.projectid = d.projectid WHERE      p.total_price_excluding_optional_support = (SELECT MAX(total_price_excluding_optional_support) FROM projects) ORDER BY      d.donation_total DESC LIMIT 1;
SELECT d.donor_acctid, p.school_state, AVG(d.donation_optional_support) AS avg_optional_support,         r.project_resource_type, MAX(d.donation_optional_support) AS max_optional_support FROM donations d JOIN projects p ON d.projectid = p.projectid JOIN resources r ON d.projectid = r.projectid GROUP BY d.donor_acctid, p.school_state, r.project_resource_type ORDER BY max_optional_support DESC LIMIT 5;
SELECT p.projectid, r.item_name FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE p.school_city = 'Brooklyn' GROUP BY p.projectid, r.item_name HAVING COUNT(r.item_name) = (     SELECT MAX(resource_count)     FROM (         SELECT COUNT(item_name) AS resource_count         FROM resources         JOIN projects ON resources.projectid = projects.projectid         WHERE projects.school_city = 'Brooklyn'         GROUP BY resources.projectid     ) AS counts );
SELECT COUNT(DISTINCT p.schoolid) AS urban_school_count FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE p.school_metro = 'urban' AND r.project_resource_type = 'Books';
SELECT schoolid FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE r.vendor_name = 'Amazon' GROUP BY schoolid ORDER BY COUNT(r.resourceid) DESC LIMIT 1;
SELECT COUNT(DISTINCT d.donor_acctid) AS donor_count FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE d.donor_city = 'Los Angeles' AND p.school_city != 'Los Angeles';
SELECT p.teacher_prefix  FROM projects p  WHERE p.projectid = (SELECT e.projectid FROM essays e WHERE e.title = 'Reading About Other Cultures');
SELECT students_reached  FROM projects  WHERE title = 'Fit Firsties!';
SELECT p.title, d.donor_acctid FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE p.school_city = 'Chicago';
SELECT e.title FROM essays e JOIN projects p ON e.projectid = p.projectid WHERE p.teacher_prefix = 'Dr.' AND p.students_reached > 300;
SELECT DISTINCT vendor_name  FROM resources r  JOIN projects p ON r.projectid = p.projectid  WHERE p.primary_focus_subject = 'Literacy'  AND r.project_resource_type = 'book';
SELECT p.title FROM projects p JOIN resources r ON p.projectid = r.projectid GROUP BY p.projectid, p.title ORDER BY MAX(r.item_unit_price * r.item_quantity) DESC LIMIT 1;
SELECT COUNT(DISTINCT donor_acctid)  FROM donations  WHERE donor_city = 'New York' AND is_teacher_acct = 't';
SELECT COUNT(*)  FROM donations  WHERE donor_state = 'NJ' AND for_honoree = 't';
SELECT donation_message FROM donations WHERE donationid = 'a84dace1ff716f6f0c7af8ef9090a5d5';
SELECT DISTINCT project_resource_type  FROM resources  WHERE vendor_name = 'Lakeshore Learning Materials';
SELECT item_name  FROM resources  WHERE vendor_name = 'Lakeshore Learning Materials'  ORDER BY item_quantity DESC  LIMIT 1;
SELECT COUNT(DISTINCT p.projectid) AS project_count FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE p.teacher_state = 'NY'    AND p.teacher_ny_teaching_fellow = 't'    AND d.donor_city = 'New York';
SELECT COUNT(DISTINCT p.projectid)  FROM projects p  JOIN resources r ON p.projectid = r.projectid  WHERE r.vendor_name = 'Lakeshore Learning Materials'  AND p.teacher_prefix = 'Dr.';
SELECT DISTINCT r.vendor_name FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.poverty_level = 'highest poverty';
SELECT p.schoolid FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE r.vendor_name = 'Lakeshore Learning Materials' GROUP BY p.schoolid ORDER BY MAX(p.fulfillment_labor_materials) DESC LIMIT 1;
SELECT r.vendor_name FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.total_price_including_optional_support - p.total_price_excluding_optional_support = (     SELECT MAX(total_price_including_optional_support - total_price_excluding_optional_support)     FROM projects );
SELECT SUM(donation_total) AS total_donated_amount FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.school_city = 'Brooklyn';
SELECT d.donation_message FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.school_city = 'Brooklyn' AND p.school_magnet = 't';
SELECT COUNT(*)  FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE d.payment_included_acct_credit = 't'  AND p.school_year_round = 't';
SELECT SUM(d.dollar_amount) AS total_donation_amount FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.primary_focus_area = 'Literacy & Language';
SELECT d.donor_acctid FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.primary_focus_area = 'Literacy & Language' GROUP BY d.donor_acctid ORDER BY SUM(d.donation_total) DESC LIMIT 1;
SELECT item_name, SUM(item_quantity) AS total_requested FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.primary_focus_area = 'Literacy & Language'    AND r.project_resource_type = 'Supplies' GROUP BY item_name ORDER BY total_requested DESC LIMIT 1;
SELECT item_name, MAX(item_unit_price) AS highest_unit_price FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.primary_focus_area = 'Literacy & Language' GROUP BY item_name ORDER BY highest_unit_price DESC LIMIT 1;
SELECT AVG(d.donation_total) AS average_donation FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.school_city = 'Brooklyn';
SELECT donor_city  FROM donations  WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5';
SELECT is_teacher_acct  FROM donations  WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5';
SELECT CASE             WHEN EXISTS (SELECT 1                          FROM projects                          WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973'                            AND (teacher_prefix LIKE '%Dr%' OR teacher_prefix LIKE '%Ph.D%'))             THEN 'Yes'             ELSE 'No'         END AS has_phd_or_doctor_degree;
SELECT COUNT(*) > 0 AS is_ny_teacher FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973' AND school_state = 'NY';
SELECT DISTINCT e.title FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid WHERE p.school_city = 'Abington';
SELECT r.item_name  FROM resources r  JOIN projects p ON r.projectid = p.projectid  WHERE p.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e';
SELECT COUNT(DISTINCT p.schoolid) AS public_magnet_schools FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.payment_included_acct_credit = 'f' AND p.school_magnet = 't';
SELECT r.project_resource_type  FROM donations d  JOIN resources r ON d.projectid = r.projectid  WHERE d.donationid = 'b39547f29dfc25fb13c6e9e8d940dc43';
SELECT      (COUNT(DISTINCT p.schoolid) FILTER (WHERE r.project_resource_type = 'Books') * 100.0 / COUNT(DISTINCT p.schoolid)) AS percentage FROM      projects p JOIN      resources r ON p.projectid = r.projectid WHERE      p.school_magnet = 't';
SELECT COUNT(DISTINCT p.schoolid) AS public_magnet_schools FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE r.vendor_name = 'ABC School Supply' AND p.school_magnet = 't';
SELECT COUNT(DISTINCT p.schoolid) AS highest_poverty_schools FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE d.donor_acctid = '000eebf28658900e63b538cf8a73afbd'  AND p.poverty_level = 'highest poverty';
SELECT e.short_description  FROM essays e  JOIN projects p ON e.projectid = p.projectid  JOIN donations d ON p.projectid = d.projectid  WHERE p.schoolid = '301c9bf0a45d159d162b65a93fddd74e';
SELECT p.school_city  FROM projects p  JOIN essays e ON p.projectid = e.projectid  WHERE e.title = 'iMath';
SELECT d.payment_method  FROM donations d  JOIN projects p ON d.projectid = p.projectid  WHERE p.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e';
SELECT SUM(donation_total) AS total_donated FROM donations WHERE projectid IN (     SELECT projectid     FROM projects     WHERE teacher_acctid = '822b7b8768c17456fdce78b65abcc18e' );
SELECT DISTINCT d.is_teacher_acct FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.schoolid = 'd4af834b1d3fc8061e1ee1b3f1a77b85';
SELECT (COUNT(CASE WHEN p.school_city = 'Brooklyn' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_brooklyn FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.is_teacher_acct = 't';
SELECT      (COUNT(CASE WHEN p.students_reached > 30 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      projects p JOIN      donations d ON p.projectid = d.projectid WHERE      d.is_teacher_acct = 't';
SELECT COUNT(DISTINCT schoolid)  FROM projects  WHERE school_city = 'Bethlehem' AND school_metro = 'suburban';
SELECT COUNT(*)  FROM projects  WHERE school_city = 'Los Angeles' AND school_year_round = 't';
SELECT COUNT(*)  FROM projects  WHERE school_magnet = 't'  AND school_city = 'Manhattan'  AND school_state = 'New York';
SELECT COUNT(DISTINCT teacher_acctid)  FROM projects  WHERE school_city = 'Twin Falls'  AND primary_focus_area = 'Math & Science';
SELECT COUNT(DISTINCT teacher_acctid)  FROM projects  WHERE primary_focus_subject = 'Literature & Writing'  AND teacher_prefix = 'Mr';
SELECT COUNT(*) AS total_projects FROM projects WHERE grade_level = 'Grades 3-5' AND school_district = 'Boston Public School District';
SELECT p.school_city  FROM projects p  JOIN essays e ON p.projectid = e.projectid  WHERE e.title = 'ABC Read';
SELECT teacher_prefix  FROM projects  WHERE projectid IN (     SELECT projectid      FROM essays      WHERE title = 'Creating Memories and Inspiring Dreams' );
SELECT d.is_teacher_acct FROM donations d JOIN projects p ON d.projectid = p.projectid JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Calculate, Financial Security For Tomorrow Starts Today!';
SELECT e.title  FROM essays e  JOIN donations d ON e.projectid = d.projectid  WHERE d.donation_message = 'Donation on behalf of Matt Carpenter because I''m a strong believer in education';
SELECT COUNT(*) AS number_of_donations FROM donations WHERE projectid IN (     SELECT projectid     FROM essays     WHERE title = 'A Rug For Reaching Readers' );
SELECT SUM(donation_to_project + donation_optional_support) AS total_donation_amount FROM donations JOIN essays ON donations.projectid = essays.projectid WHERE essays.title = 'Engaging Young Readers with a Leveled Classroom Library';
SELECT d.donation_optional_support  FROM donations d  JOIN projects p ON d.projectid = p.projectid  JOIN essays e ON p.projectid = e.projectid  WHERE e.title = 'Armenian Genocide';
SELECT e.short_description  FROM donations d  JOIN projects p ON d.projectid = p.projectid  JOIN essays e ON p.projectid = e.projectid  WHERE d.donation_timestamp = '2012/9/6 14:44:29';
SELECT d.donationid, d.donation_total, d.donation_optional_support FROM donations d JOIN projects p ON d.projectid = p.projectid JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'I Can''t See It...Can You Help Me???';
SELECT p.teacher_acctid  FROM donations d  JOIN projects p ON d.projectid = p.projectid  WHERE d.donation_timestamp = '2008/7/29 11:38:43';
SELECT schoolid  FROM projects  WHERE projectid IN (     SELECT projectid      FROM essays      WHERE title = 'Virtual Aquarium Needs Help!' );
SELECT e.title FROM essays e JOIN donations d ON e.projectid = d.projectid WHERE d.donation_total = (SELECT MAX(donation_total) FROM donations);
SELECT (donation_optional_support / donation_total) * 100 AS tip_percentage FROM donations JOIN essays ON donations.projectid = essays.projectid WHERE essays.title = 'Awesome Audiobooks Make Avid Readers';
SELECT      (COUNT(CASE WHEN payment_method = 'creditcard' THEN 1 END) * 100.0 / COUNT(projectid)) AS percentage_credit_card FROM      donations d JOIN      projects p ON d.projectid = p.projectid JOIN      essays e ON p.projectid = e.projectid WHERE      e.title = 'Bringing Drama to Life';
SELECT short_description  FROM essays  WHERE title = 'Future Einsteins Of America';
SELECT need_statement  FROM essays  WHERE title = 'Family History Project';
SELECT COUNT(DISTINCT school_metro)  FROM projects  WHERE school_district = 'Livingston Parish School District'  AND school_metro = 'suburban';
SELECT DISTINCT vendor_name  FROM resources  WHERE item_name = 'Classroom Keepers Management Center';
SELECT DISTINCT project_resource_type  FROM resources  WHERE vendor_name = 'Sax Arts & Crafts';
SELECT school_county, COUNT(*) AS low_poverty_count FROM projects WHERE school_state = 'NY' AND poverty_level = 'low poverty' GROUP BY school_county ORDER BY low_poverty_count DESC LIMIT 1;
SELECT school_district  FROM projects  WHERE projectid IN (SELECT projectid FROM essays WHERE title = 'Future Einsteins Of America');
SELECT d.payment_method  FROM donations d  JOIN projects p ON d.projectid = p.projectid  WHERE p.title = 'Needed Resource Materials For My Students';
SELECT COUNT(*)  FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE d.payment_method = 'creditcard'  AND p.school_district = 'Memphis City School District';
SELECT DISTINCT p.school_district FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE r.vendor_name = 'Barnes and Noble';
SELECT p.school_latitude, p.school_longitude FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE r.vendor_name = 'Benchmark Education' AND r.item_name = 'R & A Plant Genetics';
SELECT payment_method, COUNT(*) AS payment_count FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.school_state = 'GA' GROUP BY payment_method ORDER BY payment_count DESC LIMIT 1;
SELECT p.school_latitude, p.school_longitude, p.resource_type FROM projects p JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Look, Look, We Need a Nook!';
SELECT d.donation_message FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.school_district = 'Newark School District' AND p.school_latitude = 40.735332 AND p.school_longitude = -74.196014;
SELECT date_posted  FROM projects  JOIN essays ON projects.projectid = essays.projectid  WHERE essays.title = 'Lets Share Ideas';
SELECT d.donation_message  FROM donations d  JOIN projects p ON d.projectid = p.projectid  JOIN essays e ON p.projectid = e.projectid  WHERE e.title = 'Lets Share Ideas'  AND d.payment_method = 'credit card';
SELECT project_resource_type, COUNT(project_resource_type) AS resource_count FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.school_district = 'Los Angeles Unif Sch Dist' GROUP BY project_resource_type ORDER BY resource_count DESC LIMIT 1;
SELECT DISTINCT p.school_city FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE p.school_district = 'Los Angeles Unified School District' AND r.vendor_name = 'Quill.com';
SELECT      SUM(r.item_unit_price * r.item_quantity) AS total_price,     p.school_latitude,     p.school_longitude,     p.school_district FROM      resources r JOIN      projects p ON r.projectid = p.projectid WHERE      r.vendor_name = 'ABC School Supply'      AND r.project_resource_type = 'Other' GROUP BY      p.school_latitude,      p.school_longitude,      p.school_district;
SELECT p.school_city, p.poverty_level, SUM(d.donation_total) AS total_donated FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid WHERE e.title = 'Lets Share Ideas' AND d.payment_method = 'paypal' GROUP BY p.school_city, p.poverty_level;
SELECT COUNT(DISTINCT donor_acctid)  FROM donations  WHERE donor_city = 'Pocatello' AND is_teacher_acct = 'f';
SELECT COUNT(DISTINCT schoolid)  FROM projects  WHERE school_county = 'Suffolk' AND teacher_prefix = 'Dr.';
SELECT SUM(donation_to_project + donation_optional_support) AS total_donated_amounts FROM donations WHERE payment_method = 'Amazon';
SELECT COUNT(*)  FROM donations  WHERE for_honoree = 't' AND dollar_amount = '100_and_up';
SELECT vendorid, COUNT(*) AS resource_count FROM resources WHERE item_unit_price < 15 AND project_resource_type <> 'technology' GROUP BY vendorid;
SELECT COUNT(DISTINCT p.projectid)  FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE r.vendor_name = 'Quill.com'  AND r.item_quantity BETWEEN 5 AND 10;
SELECT projectid  FROM projects  WHERE school_district = 'Union Pub School District I-9'  AND teacher_ny_teaching_fellow = 't';
SELECT DISTINCT school_city  FROM projects  WHERE school_county = 'Los Angeles' AND school_metro = 'Suburban';
SELECT DISTINCT vendor_name, projectid  FROM resources  WHERE project_resource_type = 'Books';
SELECT      (COUNT(DISTINCT p.projectid) FILTER (WHERE d.payment_included_campaign_gift_card = 't') * 100.0 / COUNT(DISTINCT p.projectid)) AS percentage FROM      projects p LEFT JOIN      donations d ON p.projectid = d.projectid WHERE      d.payment_method = 'no_cash_received' OR d.projectid IS NULL;
SELECT      (COUNT(CASE WHEN school_metro = 'suburban' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      projects WHERE      school_city = 'Santa Barbara';
SELECT      payment_method,      (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM donations WHERE substr(donation_timestamp, 1, 7) = '2013-03')) AS percentage FROM      donations WHERE      substr(donation_timestamp, 1, 7) = '2013-03' GROUP BY      payment_method;
SELECT AVG(item_unit_price) AS average_unit_price FROM resources WHERE vendor_name = 'AKJ Books';
SELECT COUNT(DISTINCT p.schoolid)  FROM projects p  JOIN donations d ON p.projectid = d.projectid  JOIN resources r ON p.projectid = r.projectid  WHERE p.school_city = 'Brooklyn'    AND p.school_metro = 'urban'    AND d.for_honoree = 't'    AND r.item_name = 'TT992 - Refill Pack for Safety Name Tags';
SELECT COUNT(DISTINCT p.schoolid) AS school_count FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE p.poverty_level = 'highest'  AND d.payment_included_campaign_gift_card = 't';
SELECT school_city, COUNT(DISTINCT schoolid) AS school_count FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.dollar_amount = 'under_10' GROUP BY school_city ORDER BY school_count DESC LIMIT 1;
SELECT e.title  FROM essays e  JOIN projects p ON e.projectid = p.projectid  WHERE p.school_latitude = 42003718 AND p.school_longitude = -87668289;
SELECT p.teacher_ny_teaching_fellow  FROM projects p  JOIN essays e ON p.projectid = e.projectid  WHERE e.title = 'Team More Books!';
SELECT DISTINCT r.vendor_name FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.primary_focus_area = 'Literature';
SELECT DISTINCT r.vendor_name FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.grade_level = 'Grades 9-12';
SELECT COUNT(DISTINCT d.donor_acctid) AS teacher_donors FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.school_city = 'Chicago' AND d.is_teacher_acct = 't';
SELECT COUNT(DISTINCT p.projectid)  FROM projects p  JOIN donations d ON p.projectid = d.projectid  WHERE p.school_city = 'Rock Hill' AND d.is_teacher_acct = 't';
SELECT SUM(donation_total) AS total_donations FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE d.donation_included_optional_support = 't' AND p.students_reached > 300;
SELECT SUM(r.item_quantity) AS total_items_requested FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE p.school_district = 'Onslow Co School District' AND p.school_metro = 'urban';
SELECT AVG((SUM(donation_optional_support) + SUM(donation_to_project)) / SUM(donation_total)) AS average_donations FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.school_county = 'Fresno';
SELECT      (COUNT(DISTINCT CASE WHEN e.title = 'ABC Read' THEN p.school_county END) * 100.0) /      COUNT(DISTINCT p.school_county) AS percentage_counties FROM      essays e JOIN      projects p ON e.projectid = p.projectid;
SELECT AVG(total_resources) AS average_resources_per_honoree FROM (     SELECT d.for_honoree, SUM(r.item_quantity) AS total_resources, COUNT(d.donationid) AS donation_count     FROM donations d     JOIN resources r ON d.projectid = r.projectid     WHERE d.for_honoree = 't'     GROUP BY d.donationid ) AS honoree_resources;
SELECT date_posted  FROM projects  WHERE title = 'Photojournalists Want to Exhibit Their Best Works';
SELECT item_name, MAX(item_unit_price) AS max_price FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.primary_focus_subject = 'Mathematics' GROUP BY item_name ORDER BY max_price DESC LIMIT 1;
SELECT p.school_city, p.school_latitude, p.school_longitude FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE r.item_name = 'Viewscreen LCD from Texas Instruments, TI-84 Plus';
SELECT COUNT(*) AS donation_count FROM donations WHERE projectid = (SELECT projectid FROM essays WHERE title = 'Look, Look, We Need a Nook!');
SELECT DISTINCT p.poverty_level FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE d.donor_zip = '7079';
SELECT r.vendor_name  FROM resources r  JOIN projects p ON r.projectid = p.projectid  WHERE p.projectid = (SELECT projectid FROM essays WHERE title = 'Bloody Times');
SELECT r.item_name, p.school_zip FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE r.vendor_name = 'Sax Arts & Crafts';
SELECT school_latitude, school_longitude  FROM projects  WHERE projectid = (SELECT projectid FROM essays WHERE title = 'Wiping Away Bad Grades');
SELECT DISTINCT p.primary_focus_subject FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE d.payment_included_campaign_gift_card = 't';
SELECT p.short_description FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE r.project_resource_type = 'Books' AND r.item_unit_price = (     SELECT MAX(item_unit_price)     FROM resources     WHERE project_resource_type = 'Books' );
SELECT grade_level  FROM projects  WHERE projectid IN (SELECT projectid FROM essays WHERE title = 'Too Close for Comfort');
SELECT SUM(p.students_reached) AS total_students_impacted FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE d.donor_zip = '22205';
SELECT      primary_focus_area,     (COUNT(CASE WHEN d.via_giving_page = 't' THEN d.donationid END) * 100.0 / COUNT(d.donationid)) AS percentage FROM      donations d JOIN      projects p ON d.projectid = p.projectid GROUP BY      primary_focus_area;
SELECT      (COUNT(CASE WHEN r.vendor_name = 'Best Buy for Business' THEN 1 END) * 100.0 / COUNT(r.projectid)) AS percentage,     p.date_posted FROM      resources r JOIN      projects p ON r.projectid = p.projectid WHERE      r.project_resource_type = 'Technology' GROUP BY      p.date_posted;
SELECT      (SUM(CASE WHEN game_platform_id = 50 THEN num_sales ELSE 0 END) -       SUM(CASE WHEN game_platform_id = 51 THEN num_sales ELSE 0 END)) AS sales_difference FROM      region_sales WHERE      region_id = 1;
SELECT g.game_name FROM game g JOIN genre gen ON g.genre_id = gen.id WHERE gen.id = (SELECT genre_id FROM game WHERE game_name = '3D Lemmings');
SELECT COUNT(*)  FROM game  WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'Action');
SELECT g.genre_name  FROM game AS gm  JOIN genre AS g ON gm.genre_id = g.id  WHERE gm.game_name = '3D Lemmings';
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id WHERE g.game_name = '3D Lemmings';
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = '10TACLE Studios';
SELECT COUNT(g.id) AS puzzle_game_count FROM game g JOIN genre ge ON g.genre_id = ge.id JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = '10TACLE Studios' AND ge.genre_name = 'Puzzle';
SELECT g.game_name FROM game g JOIN genre ge ON g.genre_id = ge.id JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = '10TACLE Studios' AND ge.genre_name = 'Puzzle';
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id GROUP BY p.publisher_name ORDER BY COUNT(gp.game_id) DESC LIMIT 1;
SELECT p.platform_name  FROM game g  JOIN game_publisher gp ON g.id = gp.game_id  JOIN game_platform gpl ON gp.id = gpl.game_publisher_id  JOIN platform p ON gpl.platform_id = p.id  WHERE g.game_name = 'Panzer Tactics' AND gpl.release_year = 2007;
SELECT gp.release_year FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN platform p ON gpl.platform_id = p.id WHERE g.game_name = 'Panzer Tactics' AND p.platform_name = 'DS';
SELECT DISTINCT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN genre ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Puzzle';
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN genre ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Puzzle' GROUP BY p.publisher_name ORDER BY COUNT(g.id) DESC LIMIT 1;
SELECT COUNT(DISTINCT gp.publisher_id) AS publisher_count FROM game g JOIN genre ge ON g.genre_id = ge.id JOIN game_publisher gp ON g.id = gp.game_id WHERE ge.genre_name = 'Puzzle' GROUP BY gp.publisher_id HAVING COUNT(g.id) > 3;
SELECT      (COUNT(CASE WHEN g.id IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      publisher p JOIN      game_publisher gp ON p.id = gp.publisher_id JOIN      game g ON gp.game_id = g.id JOIN      genre ge ON g.genre_id = ge.id WHERE      p.publisher_name = 'Nintendo';
SELECT AVG(total_sales) AS average_sales FROM (     SELECT SUM(rs.num_sales * 100000) AS total_sales     FROM region_sales rs     JOIN game_platform gp ON rs.game_platform_id = gp.id     JOIN game_publisher gpub ON gp.game_publisher_id = gpub.id     JOIN game g ON gpub.game_id = g.id     JOIN platform p ON gp.platform_id = p.id     WHERE p.platform_name = 'DS'     GROUP BY rs.region_id ) AS sales_per_region;
SELECT COUNT(game.id) AS number_of_games FROM game JOIN game_publisher ON game.id = game_publisher.game_id WHERE game_publisher.publisher_id = 352;
SELECT genre_id FROM game WHERE game_name = 'Pro Evolution Soccer 2012';
SELECT id FROM region WHERE region_name = 'Japan';
SELECT game_platform_id  FROM region_sales  WHERE region_id = 2  ORDER BY num_sales DESC  LIMIT 1;
SELECT genre_id FROM game GROUP BY genre_id ORDER BY COUNT(id) DESC LIMIT 1;
SELECT id FROM game WHERE game_name = 'Resident Evil Archives: Resident Evil';
SELECT COUNT(g.id) AS num_games FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN platform p ON gpl.platform_id = p.id WHERE p.platform_name = 'X360' AND gpl.release_year = '2010';
SELECT p.publisher_name  FROM game g  JOIN game_publisher gp ON g.id = gp.game_id  JOIN publisher p ON gp.publisher_id = p.id  WHERE g.game_name = 'ModNation Racers';
SELECT game_platform_id  FROM region_sales  WHERE region_id = (SELECT id FROM region WHERE region_name = 'Japan')  ORDER BY num_sales DESC  LIMIT 1;
SELECT COUNT(DISTINCT gp.platform_id) AS platform_count FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id WHERE g.game_name = 'Pro Evolution Soccer 2016';
SELECT COUNT(*)  FROM game  WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'Sports');
SELECT p.publisher_name  FROM publisher p  JOIN game_publisher gp ON p.id = gp.publisher_id  WHERE gp.game_id = 10031;
SELECT publisher_name FROM publisher JOIN game_publisher ON publisher.id = game_publisher.publisher_id GROUP BY publisher_name ORDER BY COUNT(game_publisher.game_id) DESC LIMIT 1;
SELECT      (SELECT COUNT(g.id) FROM game g       JOIN genre ge ON g.genre_id = ge.id       WHERE ge.genre_name = 'Sports') -      (SELECT COUNT(g.id) FROM game g       JOIN genre ge ON g.genre_id = ge.id       WHERE ge.genre_name = 'Simulation') AS difference;
SELECT g.genre_name  FROM game AS gm  JOIN genre AS g ON gm.genre_id = g.id  WHERE gm.game_name = 'Resident Evil: Revelations';
SELECT SUM(num_sales * 100000) AS total_sales FROM region_sales JOIN region ON region_sales.region_id = region.id WHERE region.region_name = 'Europe' AND region_sales.game_platform_id = 3871;
SELECT COUNT(DISTINCT g.id) AS number_of_games FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'Ascaron Entertainment GmbH';
SELECT p.platform_name FROM platform p JOIN game_platform gp ON p.id = gp.platform_id WHERE gp.release_year = (SELECT MIN(release_year) FROM game_platform);
SELECT      (SUM(CASE WHEN g.id IS NOT NULL THEN 1 ELSE 0 END) * 100.0 / COUNT(g.id)) AS adventure_percentage FROM      game g JOIN      game_publisher gp ON g.id = gp.game_id JOIN      publisher p ON gp.publisher_id = p.id JOIN      genre ge ON g.genre_id = ge.id WHERE      p.publisher_name = 'Namco Bandai Games';
SELECT      (SELECT COUNT(*) FROM game_publisher gp JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'Atari') * 1.0 /     (SELECT COUNT(*) FROM game_publisher gp JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'Athena') AS times_more
SELECT COUNT(g.id) AS num_games FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'Electronic Arts';
SELECT g.genre_name  FROM game AS ga  JOIN genre AS g ON ga.genre_id = g.id  WHERE ga.game_name = 'Advent Rising';
SELECT COUNT(*)  FROM game g JOIN genre ge ON g.genre_id = ge.id JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE ge.genre_name = 'Role-Playing' AND p.publisher_name = 'Microsoft Game Studios';
SELECT p.publisher_name, COUNT(gp.game_id) AS game_count FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id GROUP BY p.publisher_name ORDER BY game_count DESC LIMIT 1;
SELECT DISTINCT p.platform_name FROM publisher pu JOIN game_publisher gp ON pu.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN platform p ON gpl.platform_id = p.id WHERE pu.publisher_name = 'Codemasters' AND gpl.release_year = 2004;
SELECT COUNT(DISTINCT g.id) AS num_games FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN platform p ON gpl.platform_id = p.id WHERE p.platform_name = 'PS4' AND gpl.release_year = 2014;
SELECT DISTINCT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id WHERE gpl.release_year = (SELECT MIN(release_year) FROM game_platform);
SELECT COUNT(DISTINCT p.id)  FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN platform pl ON gpl.platform_id = pl.id JOIN region_sales rs ON gpl.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Japan'    AND pl.platform_name = 'X360'    AND gpl.release_year = 2011;
SELECT gp.platform_id, SUM(rs.num_sales) AS total_sales FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Europe' GROUP BY gp.platform_id ORDER BY total_sales DESC LIMIT 1;
SELECT release_year FROM game_platform gp JOIN game_publisher gpub ON gp.game_publisher_id = gpub.id JOIN game g ON gpub.game_id = g.id JOIN platform p ON gp.platform_id = p.id WHERE p.platform_name = 'PC' GROUP BY release_year ORDER BY COUNT(g.id) DESC LIMIT 1;
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id GROUP BY p.id, p.publisher_name HAVING COUNT(gp.game_id) = 1;
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = '505 Games';
SELECT genre_id FROM game WHERE game_name = '25 to Life';
SELECT id FROM game WHERE genre_id = 2;
SELECT gp.release_year  FROM game g JOIN game_publisher gp ON g.id = gp.game_id WHERE g.id BETWEEN 1 AND 10;
SELECT game_publisher_id FROM game_platform WHERE platform_id = 15;
SELECT game.id  FROM game  JOIN game_platform ON game.id = game_platform.game_publisher_id  WHERE game_platform.release_year BETWEEN 2000 AND 2003;
SELECT num_sales * 100000 AS total_sales FROM region_sales WHERE region_id = 2 AND game_platform_id = 9615;
SELECT DISTINCT p.platform_name FROM platform p JOIN game_platform gp ON p.id = gp.platform_id WHERE gp.release_year = 2016;
SELECT gp.release_year  FROM game g  JOIN game_publisher gp ON g.id = gp.game_id  JOIN game_platform gpl ON gp.id = gpl.game_publisher_id  WHERE g.game_name = '3DS Classic Collection';
SELECT AVG(rs.num_sales) * 100000 AS average_sales FROM region_sales rs JOIN region r ON rs.region_id = r.id JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN game_publisher gpub ON gp.game_publisher_id = gpub.id JOIN game g ON gpub.game_id = g.id WHERE r.region_name = 'Japan';
SELECT g.genre_name FROM game_platform gp JOIN game_publisher gpub ON gp.game_publisher_id = gpub.id JOIN game g ON gpub.game_id = g.id JOIN genre gen ON g.genre_id = gen.id WHERE gp.release_year BETWEEN 2000 AND 2002;
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = '3DO';
SELECT COUNT(*)  FROM game  WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'Role-Playing');
SELECT r.region_name FROM region r JOIN region_sales rs ON r.id = rs.region_id WHERE rs.num_sales > 300000;
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN region_sales rs ON gpl.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'North America' GROUP BY p.publisher_name ORDER BY SUM(rs.num_sales) DESC LIMIT 1;
SELECT gp.release_year FROM region_sales rs JOIN region r ON rs.region_id = r.id JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN game_publisher gpub ON gp.game_publisher_id = gpub.id JOIN game g ON gpub.game_id = g.id WHERE rs.num_sales = 350000 AND r.region_name = 'North America';
SELECT p.platform_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN platform p ON gpl.platform_id = p.id WHERE g.game_name = '15 Days';
SELECT p.publisher_name  FROM publisher p  JOIN game_publisher gp ON p.id = gp.publisher_id  WHERE gp.game_id = 75;
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN region_sales rs ON gpl.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Japan' ORDER BY rs.num_sales DESC LIMIT 1;
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN region_sales rs ON gpl.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Japan'  AND rs.num_sales > (SELECT 0.9 * AVG(num_sales)                       FROM region_sales                       JOIN game_platform gpl2 ON region_sales.game_platform_id = gpl2.id                       JOIN game_publisher gp2 ON gpl2.game_publisher_id = gp2.id                       JOIN region r2 ON region_sales.region_id = r2.id                       WHERE r2.region_name = 'Japan') GROUP BY p.publisher_name;
SELECT      (SUM(CASE WHEN p.platform_name = 'PSP' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS psp_percentage FROM      game g JOIN      game_publisher gp ON g.id = gp.game_id JOIN      game_platform gpl ON gp.id = gpl.game_publisher_id JOIN      platform p ON gpl.platform_id = p.id WHERE      gpl.release_year = 2004;
SELECT COUNT(*) AS num_games FROM game_platform WHERE release_year = 1981;
SELECT genre_id FROM game WHERE game_name = '2Xtreme';
SELECT SUM(num_sales) * 100000 AS total_game_sales FROM region_sales WHERE game_platform_id = 9658 GROUP BY region_id;
SELECT id FROM publisher WHERE publisher_name = '1C Company';
SELECT genre_name FROM genre WHERE id = 3;
SELECT gp.game_id  FROM game_platform gp  WHERE gp.release_year = 2017;
SELECT gp.release_year  FROM game g  JOIN game_publisher gp ON g.id = gp.game_id  JOIN game_platform gpl ON gp.id = gpl.game_publisher_id  WHERE g.game_name = 'Adventure Island';
SELECT COUNT(*)  FROM game  WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'Puzzle');
SELECT g.game_name FROM game g JOIN game_platform gp ON g.id = gp.game_publisher_id JOIN platform p ON gp.platform_id = p.id WHERE p.platform_name = 'SCD';
SELECT COUNT(g.id) AS num_games FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'Acclaim Entertainment';
SELECT p.publisher_name  FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id WHERE g.game_name = 'Chronicles of the Sword';
SELECT SUM(rs.num_sales * 100000) AS total_sales FROM region_sales rs JOIN region r ON rs.region_id = r.id JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN game_publisher gpub ON gp.game_publisher_id = gpub.id JOIN game g ON gpub.game_id = g.id JOIN platform p ON gp.platform_id = p.id WHERE r.region_name = 'North America' AND p.platform_name = 'PS4';
SELECT game_platform_id  FROM region_sales  WHERE region_id = (SELECT id FROM region WHERE region_name = 'Europe')  ORDER BY num_sales DESC  LIMIT 1;
SELECT g.game_name  FROM game g  JOIN game_publisher gp ON g.id = gp.game_id  JOIN game_platform gpl ON gp.id = gpl.game_publisher_id  WHERE gpl.release_year = 2011;
SELECT COUNT(DISTINCT gp.game_id) AS num_games FROM game_platform gp JOIN platform p ON gp.platform_id = p.id WHERE p.platform_name = 'Wii';
SELECT g.game_name, gp.release_year FROM game g JOIN genre ge ON g.genre_id = ge.id JOIN game_publisher gp ON g.id = gp.game_id LIMIT 5;
SELECT g.genre_name  FROM game AS ga  JOIN genre AS g ON ga.genre_id = g.id  WHERE ga.game_name = '2Xtreme';
SELECT p.platform_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN platform p ON gpl.platform_id = p.id WHERE g.game_name = 'Panzer Tactics';
SELECT      (SELECT num_sales       FROM region_sales rs       JOIN region r ON rs.region_id = r.id       WHERE r.region_name = 'North America' AND rs.game_platform_id = 9577) -      (SELECT AVG(num_sales)       FROM region_sales       WHERE game_platform_id = 9577) AS sales_difference,     ((SELECT num_sales       FROM region_sales rs       JOIN region r ON rs.region_id = r.id       WHERE r.region_name = 'North America' AND rs.game_platform_id = 9577) -      (SELECT AVG(num_sales)       FROM region_sales       WHERE game_platform_id = 9577)) /      (SELECT AVG(num_sales)       FROM region_sales       WHERE game_platform_id = 9577) * 100 AS percent_above_average
SELECT game_name  FROM game  ORDER BY LENGTH(game_name) DESC  LIMIT 1;
SELECT COUNT(*) AS num_games FROM game_platform WHERE release_year = 2001;
SELECT SUM(num_sales) AS total_sales FROM region_sales;
SELECT AVG(game_count) AS average_games_per_publisher FROM (     SELECT COUNT(gp.game_id) AS game_count, gp.publisher_id     FROM game_publisher gp     GROUP BY gp.publisher_id ) AS publisher_game_counts;
SELECT MIN(release_year) AS first_release_year FROM game_platform;
SELECT g.genre_name FROM genre g JOIN game ga ON g.id = ga.genre_id GROUP BY g.id, g.genre_name ORDER BY COUNT(ga.id) ASC LIMIT 1;
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id WHERE g.game_name = 'Prism: Light the Way';
SELECT gp.platform_id, YEAR(gp.release_year) AS release_year, COUNT(gp.id) AS game_count FROM game_platform gp GROUP BY gp.platform_id, YEAR(gp.release_year) HAVING COUNT(gp.id) = (     SELECT MAX(game_count)     FROM (         SELECT COUNT(gp_inner.id) AS game_count         FROM game_platform gp_inner         GROUP BY gp_inner.platform_id, YEAR(gp_inner.release_year)     ) AS counts     WHERE counts.release_year = YEAR(gp.release_year) ) ORDER BY release_year, game_count DESC;
SELECT COUNT(DISTINCT g.id) AS num_games_without_sales FROM game g LEFT JOIN game_platform gp ON g.id = gp.game_publisher_id LEFT JOIN region_sales rs ON gp.id = rs.game_platform_id LEFT JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Europe' AND (rs.num_sales IS NULL OR rs.num_sales = 0);
SELECT g.game_name  FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id WHERE gpl.release_year = 2006;
SELECT g.genre_name  FROM game AS gm  JOIN genre AS g ON gm.genre_id = g.id  WHERE gm.game_name = 'Mario vs. Donkey Kong';
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id GROUP BY p.publisher_name ORDER BY COUNT(gp.game_id) DESC LIMIT 1;
SELECT g.game_name  FROM game g JOIN genre ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Platform';
SELECT DISTINCT gp.release_year FROM game_platform gp JOIN platform p ON gp.platform_id = p.id WHERE p.platform_name = 'WiiU';
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN region_sales rs ON gpl.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Japan' ORDER BY rs.num_sales DESC LIMIT 1;
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'Activision';
SELECT COUNT(DISTINCT p.id) AS publisher_count FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id WHERE g.game_name LIKE 'Marvel%';
SELECT (SUM(CASE WHEN g.genre_name = 'sport' THEN 1 ELSE 0 END) * 100.0) / COUNT(g.game_name) AS percentage_sports FROM game g JOIN genre gen ON g.genre_id = gen.id;
SELECT      DIVIDE(         SUM(CASE WHEN r.region_name = 'North America' THEN rs.num_sales ELSE 0 END),         SUM(CASE WHEN r.region_name = 'Japan' THEN rs.num_sales ELSE 0 END)     ) AS sales_ratio FROM      region_sales rs JOIN      region r ON rs.region_id = r.id JOIN      game_platform gp ON rs.game_platform_id = gp.id JOIN      game_publisher gpub ON gp.game_publisher_id = gpub.id JOIN      game g ON gpub.game_id = g.id JOIN      genre gen ON g.genre_id = gen.id;
SELECT release_year, COUNT(*) AS num_releases FROM game_platform GROUP BY release_year ORDER BY num_releases DESC LIMIT 1;
SELECT COUNT(*)  FROM publisher  WHERE publisher_name LIKE '%Interactive%';
SELECT p.platform_name, SUM(rs.num_sales) AS total_sales FROM platform p JOIN game_platform gp ON p.id = gp.platform_id JOIN game_publisher gpub ON gp.game_publisher_id = gpub.id JOIN region_sales rs ON gp.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'North America' GROUP BY p.platform_name ORDER BY total_sales DESC LIMIT 2;
SELECT COUNT(g.id) AS num_games FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id WHERE p.publisher_name = 'BMG Interactive Entertainment' AND gpl.release_year = 2012;
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id WHERE gpl.release_year = 2007 GROUP BY p.publisher_name ORDER BY COUNT(gp.game_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT gp.publisher_id) AS publisher_count FROM game g JOIN game_publisher gp ON g.id = gp.game_id WHERE g.game_name = 'Minecraft';
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN genre ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Action' GROUP BY p.publisher_name ORDER BY COUNT(g.id) DESC LIMIT 1;
SELECT COUNT(*)  FROM game g JOIN genre ge ON g.genre_id = ge.id JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE ge.genre_name = 'Sports' AND p.publisher_name = 'Nintendo';
SELECT g.genre_id, ge.genre_name  FROM game g  JOIN genre ge ON g.genre_id = ge.id  WHERE g.game_name = '2 Games in 1: Sonic Advance & ChuChu Rocket!';
SELECT COUNT(*)  FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN platform p ON gp.platform_id = p.id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Other' AND rs.num_sales > 0 AND p.platform_name = 'DS';
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'American Softworks';
SELECT COUNT(*)  FROM game  JOIN genre ON game.genre_id = genre.id  WHERE genre.genre_name = 'Strategy';
SELECT p.publisher_name  FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id WHERE g.game_name = 'Overwatch';
SELECT g.genre_name FROM genre g JOIN game ga ON g.id = ga.genre_id GROUP BY g.genre_name ORDER BY COUNT(ga.id) DESC LIMIT 1;
SELECT SUM(num_sales * 100000) AS total_sales FROM region_sales JOIN region ON region_sales.region_id = region.id WHERE region.region_name = 'Europe' AND region_sales.game_platform_id = 26;
SELECT COUNT(*) AS num_games FROM game_platform WHERE release_year = 2001;
SELECT COUNT(*) FROM game WHERE game_name LIKE '%Box%';
SELECT g.game_name, SUM(rs.num_sales) AS total_sales FROM game g JOIN game_platform gp ON g.id = gp.game_publisher_id JOIN region_sales rs ON gp.id = rs.game_platform_id GROUP BY g.game_name ORDER BY total_sales DESC LIMIT 3;
SELECT MIN(release_year) AS first_game_release_year FROM game_platform;
SELECT * FROM publisher WHERE publisher_name LIKE '%Entertainment%';
SELECT g.game_name  FROM game g  JOIN genre ge ON g.genre_id = ge.id  WHERE ge.genre_name = 'Adventure';
SELECT g.game_name  FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'Pioneer LDC';
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN platform p ON gpl.platform_id = p.id WHERE p.platform_name = 'SCD';
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN region_sales rs ON gpl.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Japan';
SELECT DISTINCT g.genre_name FROM genre g JOIN game ga ON g.id = ga.genre_id JOIN game_publisher gp ON ga.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'Agatsuma Entertainment';
SELECT COUNT(*)  FROM game  WHERE genre_id NOT IN (     SELECT id      FROM genre      WHERE genre_name IN ('Role-Playing', 'Shooter', 'Simulation') );
SELECT r.region_name, gp.platform_id, SUM(rs.num_sales) AS total_sales FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN region r ON rs.region_id = r.id GROUP BY r.region_name, gp.platform_id HAVING total_sales = (     SELECT MAX(total_sales)     FROM (         SELECT SUM(rs_inner.num_sales) AS total_sales         FROM region_sales rs_inner         JOIN game_platform gp_inner ON rs_inner.game_platform_id = gp_inner.id         JOIN region r_inner ON rs_inner.region_id = r_inner.id         GROUP BY r_inner.region_name, gp_inner.platform_id     ) AS sales_totals     WHERE sales_totals.region_name = r.region_name ) ORDER BY r.region_name;
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN genre ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Puzzle' GROUP BY p.publisher_name ORDER BY COUNT(g.id) DESC LIMIT 1;
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN region_sales rs ON gpl.id = rs.game_platform_id GROUP BY g.game_name ORDER BY SUM(rs.num_sales) ASC LIMIT 1;
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id WHERE g.game_name = 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3';
SELECT r.region_name FROM region r JOIN region_sales rs ON r.id = rs.region_id JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN game_publisher gpub ON gp.game_publisher_id = gpub.id JOIN game g ON gpub.game_id = g.id WHERE g.game_name = 'Pengo';
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id WHERE gpl.release_year = 2010;
SELECT AVG(num_sales * 100000) AS average_sales FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN platform p ON gp.platform_id = p.id WHERE p.platform_name = 'PS2';
SELECT      (SUM(CASE WHEN p.publisher_name = 'Brash Entertainment' THEN 1 ELSE 0 END) * 100.0) / COUNT(g.id) AS percentage FROM      game g JOIN      game_publisher gp ON g.id = gp.game_id JOIN      publisher p ON gp.publisher_id = p.id;
SELECT SUM(num_sales) * 100000 AS total_games_sold FROM region_sales WHERE region_id = 1;
SELECT COUNT(*)  FROM game  WHERE game_name LIKE '%FIFA%';
SELECT p.platform_name FROM platform p JOIN game_platform gp ON p.id = gp.platform_id JOIN game_publisher gpub ON gp.game_publisher_id = gpub.id JOIN region_sales rs ON gp.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Europe' GROUP BY p.platform_name ORDER BY SUM(rs.num_sales) DESC LIMIT 1;
SELECT p.publisher_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE g.game_name = '2002 FIFA World Cup';
SELECT p.platform_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN platform p ON gpl.platform_id = p.id WHERE g.game_name = '3Xtreme';
SELECT g.genre_name  FROM game AS g  JOIN genre AS ge ON g.genre_id = ge.id  WHERE g.game_name = '2010 FIFA World Cup South Africa';
SELECT r.region_name FROM region r JOIN region_sales rs ON r.id = rs.region_id GROUP BY r.region_name ORDER BY SUM(rs.num_sales) DESC LIMIT 1;
SELECT SUM(rs.num_sales) * 100000 AS total_sales FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN platform p ON gp.platform_id = p.id JOIN region r ON rs.region_id = r.id WHERE p.platform_name = 'PS3' AND r.region_name = 'Japan';
SELECT g.game_name  FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id WHERE gpl.release_year = 2007;
SELECT COUNT(DISTINCT g.id) AS num_games FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'Activision';
SELECT gp.release_year FROM game_platform gp JOIN game_publisher gpub ON gp.game_publisher_id = gpub.id JOIN game g ON gpub.game_id = g.id JOIN region_sales rs ON gp.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Japan' GROUP BY gp.release_year HAVING SUM(rs.num_sales) > 200000;
SELECT COUNT(*)  FROM game_platform gp JOIN platform p ON gp.platform_id = p.id WHERE gp.release_year = 2010 AND p.platform_name = 'PS3';
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id GROUP BY p.publisher_name ORDER BY COUNT(gp.game_id) DESC LIMIT 1;
SELECT COUNT(g.id) AS shooter_game_count FROM game g JOIN genre gen ON g.genre_id = gen.id WHERE gen.genre_name = 'shooter';
SELECT      (SUM(CASE WHEN p.platform_name = 'PS4' AND gp.release_year = 2014 THEN 1 ELSE 0 END) * 100.0) / COUNT(g.id) AS percentage FROM      game g JOIN      game_publisher gp ON g.id = gp.game_id JOIN      game_platform gpl ON gp.id = gpl.game_publisher_id JOIN      platform p ON gpl.platform_id = p.id WHERE      gp.release_year = 2014;
SELECT SUM(rs.num_sales) AS total_sales FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN game_publisher gpub ON gp.game_publisher_id = gpub.id JOIN game g ON gpub.game_id = g.id WHERE rs.region_id = 4;
SELECT gp.id  FROM game_platform gp JOIN game_publisher gpub ON gp.game_publisher_id = gpub.id JOIN region_sales rs ON gp.id = rs.game_platform_id WHERE rs.region_id = 1;
SELECT      (SUM(CASE WHEN rs.region_id = 2 THEN rs.num_sales ELSE 0 END) -       SUM(CASE WHEN rs.region_id = 3 THEN rs.num_sales ELSE 0 END)) AS sales_difference FROM      region_sales rs JOIN      game_platform gp ON rs.game_platform_id = gp.id;
SELECT DISTINCT gp.platform_id  FROM game_platform gp  WHERE gp.release_year = 2007;
SELECT gp.publisher_id  FROM game_publisher gp  JOIN game_platform gpl ON gp.id = gpl.game_publisher_id  WHERE gpl.platform_id = 16;
SELECT COUNT(DISTINCT gp.publisher_id) AS num_publishers FROM game_publisher gp JOIN game_platform gpl ON gp.id = gpl.game_publisher_id WHERE gpl.release_year = 1984;
SELECT gp.platform_id FROM game_platform gp JOIN region_sales rs ON gp.id = rs.game_platform_id WHERE rs.region_id = 3;
SELECT SUM(rs.num_sales) AS sales FROM region_sales rs JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Japan';
SELECT COUNT(DISTINCT gp.publisher_id)  FROM game_publisher gp JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN platform p ON gpl.platform_id = p.id WHERE p.platform_name = 'X360';
SELECT p.platform_name  FROM platform p JOIN game_platform gp ON p.id = gp.platform_id WHERE gp.release_year = 2000;
SELECT      (SELECT COUNT(DISTINCT gp.publisher_id)       FROM game_publisher gp       JOIN game_platform gpl ON gp.id = gpl.game_publisher_id       JOIN platform p ON gpl.platform_id = p.id       WHERE p.platform_name = 'PS3') -      (SELECT COUNT(DISTINCT gp.publisher_id)       FROM game_publisher gp       JOIN game_platform gpl ON gp.id = gpl.game_publisher_id       JOIN platform p ON gpl.platform_id = p.id       WHERE p.platform_name = 'X360') AS publisher_difference;
SELECT g.id  FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'Bethesda Softworks';
SELECT COUNT(DISTINCT g.id) AS total_game_ids FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name IN ('Capcom', 'Sony Computer Entertainment');
SELECT g.genre_name  FROM game AS ga  JOIN genre AS g ON ga.genre_id = g.id  WHERE ga.game_name = 'Grand Theft Auto V';
SELECT g.game_name FROM game g JOIN genre ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Racing';
SELECT COUNT(*) AS num_games FROM game g JOIN genre ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Fighting';
SELECT DISTINCT g.genre_name FROM genre g JOIN game ga ON g.id = ga.genre_id JOIN game_publisher gp ON ga.id = gp.game_id WHERE gp.publisher_id = 464;
SELECT p.platform_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN platform p ON gpl.platform_id = p.id WHERE g.game_name = 'Final Fantasy XIII-2';
SELECT SUM(rs.num_sales) AS total_sales FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id WHERE gp.release_year = 2000;
SELECT      SUM(CASE WHEN gp.release_year = 2000 THEN rs.num_sales ELSE 0 END) -      SUM(CASE WHEN gp.release_year = 1990 THEN rs.num_sales ELSE 0 END) AS sales_difference FROM      game_platform gp JOIN      game_publisher gpub ON gp.game_publisher_id = gpub.id JOIN      region_sales rs ON gp.id = rs.game_platform_id;
SELECT platform_id  FROM game_platform  WHERE release_year = 2006;
SELECT AVG(num_sales * 100000) AS average_sales FROM region_sales WHERE region_id = 3;
SELECT release_year  FROM game_platform  WHERE id = 19 AND game_publisher_id = 6657;
SELECT SUM(num_sales) * 100000 AS total_sales FROM region_sales WHERE game_platform_id = 66;
SELECT game_name FROM game WHERE id = 44;
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN platform p ON gpl.platform_id = p.id WHERE p.platform_name = 'Wii';
SELECT g.game_name  FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id WHERE gpl.release_year = 2015;
SELECT COUNT(g.id) AS total_adventure_games FROM game g JOIN genre ge ON g.genre_id = ge.id JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id WHERE ge.genre_name = 'Adventure' AND gpl.release_year = 2005;
SELECT p.publisher_name  FROM game g  JOIN game_publisher gp ON g.id = gp.game_id  JOIN publisher p ON gp.publisher_id = p.id  WHERE g.game_name = 'Adventure Time: Explore the Dungeon Because I Don''t Know!';
SELECT gp.id AS game_platform_id, r.region_name FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN region r ON rs.region_id = r.id WHERE rs.num_sales < 20000;
SELECT g.game_name  FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id WHERE p.publisher_name = '505 Games' AND gpl.release_year = 2006;
SELECT g.genre_name  FROM game AS gm  JOIN genre AS g ON gm.genre_id = g.id  WHERE gm.id = 119;
SELECT g.id  FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'Abylight';
SELECT r.region_name FROM region r JOIN region_sales rs ON r.id = rs.region_id ORDER BY rs.num_sales ASC LIMIT 1;
SELECT g.game_name  FROM game g  JOIN genre ge ON g.genre_id = ge.id  WHERE ge.genre_name = 'Strategy';
SELECT p.platform_name  FROM game_platform gp  JOIN platform p ON gp.platform_id = p.id  JOIN game_publisher gpub ON gp.game_publisher_id = gpub.id  WHERE gpub.game_id = 178;
SELECT g.genre_name  FROM game AS ga  JOIN genre AS g ON ga.genre_id = g.id  WHERE ga.game_name IN ('Airlock', 'Airline Tycoon', 'Airblade');
SELECT SUM(num_sales) * 100000 AS total_sales FROM region_sales JOIN region ON region_sales.region_id = region.id WHERE region.region_name = 'North America';
SELECT DISTINCT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN region_sales rs ON gpl.id = rs.game_platform_id WHERE rs.num_sales < 10000 LIMIT 5;
SELECT gp.platform_id  FROM game g  JOIN game_publisher gp ON g.id = gp.game_id  JOIN game_platform gpl ON gp.id = gpl.game_publisher_id  WHERE g.game_name = 'Airborne Troops: Countdown to D-Day';
SELECT COUNT(g.id) AS num_games FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id JOIN platform p ON gpl.platform_id = p.id WHERE p.platform_name = 'PSP' AND gpl.release_year = 2004;
SELECT g.genre_name  FROM game AS g  JOIN genre AS ge ON g.genre_id = ge.id  WHERE g.game_name = '999: Nine Hours, Nine Persons, Nine Doors';
SELECT release_year  FROM game_platform  WHERE game_publisher_id IN (SELECT id FROM game_publisher WHERE game_id = 156);
SELECT      (SELECT COUNT(g.id)       FROM game g       JOIN game_publisher gp ON g.id = gp.game_id       JOIN publisher p ON gp.publisher_id = p.id       JOIN game_platform gpl ON gp.id = gpl.game_publisher_id       JOIN platform pl ON gpl.platform_id = pl.id       WHERE p.publisher_name = 'Culture Brain' AND pl.platform_name = 'SNES') -     (SELECT COUNT(g.id)       FROM game g       JOIN game_publisher gp ON g.id = gp.game_id       JOIN publisher p ON gp.publisher_id = p.id       JOIN game_platform gpl ON gp.id = gpl.game_publisher_id       JOIN platform pl ON gpl.platform_id = pl.id       WHERE p.publisher_name = 'Culture Brain' AND pl.platform_name = 'DS') AS difference;
SELECT      (SUM(CASE WHEN gp.release_year = 2007 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_2007 FROM      game_platform gp JOIN      game_publisher gpub ON gp.game_publisher_id = gpub.id JOIN      game g ON gpub.game_id = g.id JOIN      platform p ON gp.platform_id = p.id WHERE      p.platform_name = 'Wii';
SELECT gp.platform_id FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Europe' GROUP BY gp.platform_id HAVING SUM(rs.num_sales) < (SELECT AVG(num_sales) * 0.3 FROM region_sales);
SELECT COUNT(*)  FROM Author  WHERE Affiliation = 'University of California Berkeley';
SELECT Keyword  FROM Paper  WHERE Title = 'Stitching videos streamed by mobile phones in real-time';
SELECT Title  FROM Paper  WHERE JournalId = (SELECT Id FROM Journal WHERE FullName = 'Concepts in Magnetic Resonance Part A')  AND Year = 2008;
SELECT COUNT(*)  FROM Paper  WHERE JournalId = (SELECT Id FROM Journal WHERE FullName = 'Concepts in Magnetic Resonance Part A');
SELECT j.HomePage  FROM Paper p  JOIN Journal j ON p.JournalId = j.Id  WHERE p.Title = 'Area Effects in Cepaea';
SELECT COUNT(*)  FROM Paper  WHERE JournalId = (SELECT Id FROM Journal WHERE FullName = 'Molecular Brain')  AND Year = 2011;
SELECT COUNT(*)  FROM Paper  WHERE Year = 2011 AND JournalId = (SELECT Id FROM Journal WHERE ShortName = 'Mol Brain');
SELECT COUNT(*)  FROM PaperAuthor  WHERE PaperId = (SELECT Id FROM Paper WHERE Title = 'Equation Solving in Geometrical Theories');
SELECT pa.Name FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Title = 'Area Effects in Cepaea';
SELECT COUNT(DISTINCT pa.AuthorId) AS AuthorCount FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Title = 'Stitching videos streamed by mobile phones in real-time' AND pa.Affiliation = 'Cairo Microsoft Innovation Lab';
SELECT p.Title FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name = 'Klaus Zimmermann';
SELECT pa.Name  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  WHERE p.Title = 'Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web'  AND pa.Affiliation = 'National Taiwan University Department of Computer Science and Information Engineering Taiwan';
SELECT p.Title  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  WHERE p.Year = 1995 AND pa.Name = 'Thomas Wiegand';
SELECT COUNT(*)  FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name = 'Thomas Wiegand' AND p.Year = 1995;
SELECT AVG(PaperCount) AS AveragePapers FROM (     SELECT COUNT(P.Id) AS PaperCount     FROM Paper P     JOIN Journal J ON P.JournalId = J.Id     WHERE J.FullName = 'Molecular Brain' AND P.Year BETWEEN 2008 AND 2011     GROUP BY P.Year ) AS YearlyCounts;
SELECT      (COUNT(CASE WHEN j.FullName = 'Cases Journal' THEN p.Id END) -       COUNT(CASE WHEN j.FullName = 'Molecular Brain' THEN p.Id END)) * 100.0 /       NULLIF(COUNT(CASE WHEN j.FullName = 'Molecular Brain' THEN p.Id END), 0) AS PercentageDifference FROM      Paper p JOIN      Journal j ON p.JournalId = j.Id;
SELECT COUNT(*) FROM Journal WHERE FullName LIKE '%computing%';
SELECT PaperId, AuthorId  FROM PaperAuthor  WHERE Affiliation = 'Cairo Microsoft Innovation Lab';
SELECT ShortName, FullName  FROM Conference  WHERE HomePage = 'http://www.informatik.uni-trier.de/~ley/db/conf/ices/index.html';
SELECT Id FROM Author WHERE Name = 'Peter';
SELECT Paper.Title, Conference.ShortName FROM Paper JOIN Conference ON Paper.ConferenceId = Conference.Id WHERE Paper.ConferenceId BETWEEN 160 AND 170;
SELECT p.Title, j.HomePage FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE p.Year = (SELECT MAX(Year) FROM Paper);
SELECT p.Title, c.ShortName FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON pa.AuthorId = a.Id WHERE p.Year = 1999 AND a.Name LIKE 'Philip%';
SELECT COUNT(*) AS TotalPapers, c.HomePage FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id WHERE p.ConferenceId = 187 AND p.Year BETWEEN 1990 AND 2000;
SELECT p.Title  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  WHERE p.Year = 2003  AND pa.Affiliation = 'Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications';
SELECT pa.Name AS AuthorName, j.ShortName AS JournalShortName FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Journal j ON p.JournalId = j.Id WHERE p.Title LIKE '%chemiluminescence%' AND p.JournalId BETWEEN 245 AND 250;
SELECT DISTINCT pa.Name, pa.Affiliation FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.ConferenceId = 0 AND p.JournalId < 100;
SELECT p.Title, pa.AuthorId  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  WHERE p.ConferenceId < 100 AND p.Year = 2006;
SELECT p.Id FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id WHERE c.HomePage LIKE 'http://www.informatik.uni-trier.de/~ley/db/conf/%';
SELECT j.HomePage, pa.AuthorId FROM Paper p JOIN Journal j ON p.JournalId = j.Id JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Year BETWEEN 2000 AND 2005 AND p.Title LIKE '%social%';
SELECT pa.AuthorId, pa.Affiliation FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.JournalId = 0 AND p.Year = 2009;
SELECT      (COUNT(CASE WHEN ConferenceId = 0 THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM      Paper WHERE      JournalId BETWEEN 200 AND 300      AND JournalId IN (SELECT Id FROM Journal WHERE ShortName LIKE 'A%');
SELECT      (COUNT(CASE WHEN Year = 2001 THEN PaperId END) * 100.0 / COUNT(PaperId)) AS PaperPublishedRate FROM      Paper WHERE      Year BETWEEN 2001 AND 2010;
SELECT FullName, HomePage FROM Conference WHERE ShortName = 'ICWE';
SELECT Affiliation, COUNT(Id) AS AuthorCount FROM Author WHERE Affiliation IN ('Standford University', 'Massachusetts Institute of Technolgy') GROUP BY Affiliation ORDER BY AuthorCount DESC LIMIT 1;
SELECT      COUNT(CASE WHEN Affiliation IS NOT NULL THEN 1 END) AS WithAffiliation,     COUNT(CASE WHEN Affiliation IS NULL THEN 1 END) AS WithoutAffiliation,     COUNT(CASE WHEN Affiliation IS NOT NULL THEN 1 END) * 1.0 / NULLIF(COUNT(CASE WHEN Affiliation IS NULL THEN 1 END), 0) AS Ratio FROM      Author;
SELECT Id, Name  FROM Author  WHERE Affiliation = 'University of Oulu';
SELECT p.Title, pa.Affiliation FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name = 'Roger J. Marshall' AND p.ConferenceId = 0 AND p.JournalId = 0;
SELECT p.Id, p.Title, p.Year, j.FullName FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Journal j ON p.JournalId = j.Id GROUP BY p.Id, p.Title, p.Year, j.FullName HAVING COUNT(pa.AuthorId) = (     SELECT MAX(author_count)     FROM (         SELECT COUNT(PaperId) AS author_count         FROM PaperAuthor         GROUP BY PaperId     ) AS counts );
SELECT p.Title, p.Year, c.ShortName, GROUP_CONCAT(pa.Name SEPARATOR ', ') AS AuthorNames FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Id = 15 GROUP BY p.Id;
SELECT p.Id AS PaperId, p.Year, p.Keyword FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.AuthorId < 1000 AND pa.Affiliation = 'Zurich, ETH';
SELECT pa.AuthorId, pa.Name  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  WHERE p.Title = 'Inspection resistant memory: Architectural support for security from physical examination'  AND pa.Affiliation = 'Microsoft Research, USA';
SELECT pa.Name AS AuthorName, pa.Affiliation AS AuthorAffiliation, j.ShortName AS JournalShortName, j.FullName AS JournalFullName FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Journal j ON p.JournalId = j.Id WHERE p.Title = 'Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats';
SELECT p.Title, p.JournalId FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id WHERE c.FullName = 'International Symposium of Robotics Research';
SELECT p.Title, p.Year, p.Keyword FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.AuthorId = 661002 AND pa.Affiliation = 'Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA';
SELECT      (SELECT COUNT(Paper.Id)       FROM Paper       JOIN Journal ON Paper.JournalId = Journal.Id       WHERE Journal.ShortName = 'IWC' AND Paper.Year = 2000) -      (SELECT COUNT(Paper.Id)       FROM Paper       JOIN Journal ON Paper.JournalId = Journal.Id       WHERE Journal.ShortName = 'IWC' AND Paper.Year = 2010) AS Difference;
SELECT DISTINCT j.Id AS JournalId, j.ShortName, j.FullName FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE p.Year = 2013 AND j.Id != 0 AND j.Id != -1 LIMIT 4;
WITH PaperCounts AS (     SELECT          COUNT(CASE WHEN Year BETWEEN 1991 AND 2000 THEN Id END) AS Count_1991_2000,         COUNT(CASE WHEN Year BETWEEN 1971 AND 1980 THEN Id END) AS Count_1971_1980     FROM Paper     WHERE ConferenceId = (SELECT Id FROM Conference WHERE ShortName = 'MICRO') ), Papers_1971_1980 AS (     SELECT          p.Title,          pa.Name AS AuthorName     FROM Paper p     JOIN PaperAuthor pa ON p.Id = pa.PaperId     WHERE p.Year BETWEEN 1971 AND 1980      AND p.ConferenceId = (SELECT Id FROM Conference WHERE ShortName = 'MICRO') ) SELECT      (Count_1991_2000 - Count_1971_1980) / 10 AS Average_Needed_Papers,     Title,     AuthorName FROM PaperCounts, Papers_1971_1980;
SELECT COUNT(*) AS PreprintedOrNotPublished FROM Paper WHERE Year = 0;
SELECT c.FullName  FROM Paper p  JOIN Conference c ON p.ConferenceId = c.Id  WHERE p.Title = 'The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure';
SELECT COALESCE(c.HomePage, j.HomePage) AS HomePage FROM Paper p LEFT JOIN Conference c ON p.ConferenceId = c.Id LEFT JOIN Journal j ON p.JournalId = j.Id WHERE p.Title = 'Energy-efficiency bounds for noise-tolerant dynamic circuits';
SELECT DISTINCT pa.Name FROM PaperAuthor pa WHERE pa.PaperId BETWEEN 101 AND 105;
SELECT c.ShortName FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id WHERE p.Year = 2009 LIMIT 10;
SELECT j.HomePage  FROM Paper p  JOIN Journal j ON p.JournalId = j.Id  WHERE p.Title = '364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results';
SELECT p.Title  FROM Paper p  JOIN Conference c ON p.ConferenceId = c.Id  WHERE c.FullName = 'International Conference on Internet Computing';
SELECT pa.Name  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  WHERE p.Year = '2005'  AND p.Keyword = 'LOAD; IDE; SNP; haplotype; asso- ciation studies';
SELECT COUNT(DISTINCT pa.AuthorId) AS AuthorCount FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Title LIKE '%145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT:%';
SELECT DISTINCT pa2.Name AS CoAuthor, p.Title FROM PaperAuthor pa1 JOIN PaperAuthor pa2 ON pa1.PaperId = pa2.PaperId AND pa1.AuthorId <> pa2.AuthorId JOIN Paper p ON pa1.PaperId = p.Id WHERE pa1.Name = 'Jei Keon Chae';
SELECT c.FullName AS ConferenceName, j.FullName AS JournalName, pa.Name AS CoAuthorName, p.Title FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON pa.AuthorId = a.Id LEFT JOIN Conference c ON p.ConferenceId = c.Id LEFT JOIN Journal j ON p.JournalId = j.Id WHERE p.Id IN (     SELECT pa.PaperId     FROM PaperAuthor pa     JOIN Author a ON pa.AuthorId = a.Id     WHERE a.Name = 'Shueh-Lin Yau' );
SELECT COUNT(Id) FROM Paper WHERE Year BETWEEN 1990 AND 2000;
SELECT Name FROM Author WHERE Affiliation = 'Birkbeck University of London';
SELECT ShortName FROM Conference WHERE FullName LIKE 'International Symposium%';
SELECT COUNT(*) FROM Journal WHERE HomePage = '';
SELECT DISTINCT pa.Name FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Year = 0;
SELECT DISTINCT pa.Affiliation FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Keyword = 'Quantum Physics';
SELECT c.FullName, p.Title, p.Year FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id WHERE p.JournalId = 0 AND p.ConferenceId != 0 AND p.Year != 0;
SELECT p.Title FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id WHERE c.HomePage IS NULL OR c.HomePage = '';
SELECT DISTINCT FullName  FROM Journal  WHERE ShortName IS NULL OR ShortName = '';
SELECT a.Affiliation  FROM Author a JOIN PaperAuthor pa ON a.Id = pa.AuthorId JOIN Paper p ON pa.PaperId = p.Id JOIN Journal j ON p.JournalId = j.Id WHERE p.Title = 'A combined search for the standard model Higgs boson at s = 1.96 Â TeV';
SELECT DISTINCT j.FullName FROM Journal j JOIN Paper p ON j.Id = p.JournalId WHERE p.Year = 2001;
SELECT DISTINCT pa.Name FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Title = 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker' AND pa.Name <> (SELECT Name FROM PaperAuthor WHERE PaperId = p.Id LIMIT 1);
SELECT COUNT(P.Id) AS PaperCount, P.Year FROM Paper P JOIN Conference C ON P.ConferenceId = C.Id WHERE C.FullName = 'International Conference on Database Theory' AND P.Year != 0 GROUP BY P.Year;
SELECT DISTINCT Journal.FullName FROM Journal JOIN Paper ON Journal.Id = Paper.JournalId WHERE Paper.Keyword = 'Sustainability';
SELECT DISTINCT pa.Name FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE c.FullName LIKE '%Workshop%';
SELECT      (COUNT(CASE WHEN pa.Affiliation LIKE '%INFN%' THEN 1 END) * 100.0) / COUNT(pa.AuthorId) AS Percentage FROM      Paper p JOIN      PaperAuthor pa ON p.Id = pa.PaperId WHERE      p.Title LIKE '%Charged particle multiplicity%';
SELECT      (COUNT(CASE WHEN j.ShortName LIKE 'ANN%' THEN 1 END) * 100.0) / COUNT(*) AS Percentage FROM      Journal j JOIN      Paper p ON j.Id = p.JournalId WHERE      p.Year = 1989;
SELECT COUNT(DISTINCT pa.AuthorId)  FROM PaperAuthor pa  JOIN Paper p ON pa.PaperId = p.Id  WHERE p.Id = 1 AND pa.Affiliation LIKE '%Microsoft Research%';
SELECT Keyword, Year  FROM Paper  WHERE Title = 'A Formal Approach to Service Component Architecture';
SELECT      (COUNT(CASE WHEN ConferenceId = 0 AND JournalId = 0 AND Year > 2000 THEN 1 END) * 100.0) / COUNT(Id) AS PercentagePreprintedAfter2000 FROM      Paper;
SELECT Name  FROM PaperAuthor  WHERE PaperId = (SELECT Id FROM Paper WHERE Title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers');
SELECT j.FullName  FROM Paper p  JOIN Journal j ON p.JournalId = j.Id  WHERE p.Title = 'Multiple paternity in a natural population of a salamander with long-term sperm storage';
SELECT COUNT(JournalId)  FROM Paper  WHERE JournalId = (SELECT Id FROM Journal WHERE FullName = 'Iet Software/iee Proceedings - Software');
SELECT c.FullName  FROM Paper p  JOIN Conference c ON p.ConferenceId = c.Id  WHERE p.Id = 5;
SELECT p.Title  FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name LIKE '%Jun du%' LIMIT 2;
SELECT p.Title FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON pa.AuthorId = a.Id WHERE a.Name = 'Cheng Huang' AND a.Affiliation LIKE 'Microsoft %';
SELECT c.FullName FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Conference c ON p.ConferenceId = c.Id WHERE pa.Name = 'Jean-luc Hainaut';
SELECT DISTINCT j.FullName FROM Journal j JOIN Paper p ON j.Id = p.JournalId JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name = 'Andrew Cain' LIMIT 3;
SELECT DISTINCT a.Affiliation FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON pa.AuthorId = a.Id WHERE p.Title = 'FIBER: A Generalized Framework for Auto-tuning Software';
SELECT p.Title, j.FullName FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE p.Year = 0 LIMIT 2;
SELECT DISTINCT j.ShortName, j.FullName FROM Journal j JOIN Paper p ON j.Id = p.JournalId WHERE p.Keyword = 'Materials';
SELECT DISTINCT Name  FROM Author  WHERE Affiliation = 'University of Oxford'  ORDER BY Name;
SELECT ShortName, HomePage  FROM Conference  WHERE FullName LIKE 'International Conference on Artificial Intelligence%';
SELECT Title FROM Paper WHERE Year = 1996;
SELECT p.Title, pa.Name FROM Paper p JOIN Journal j ON p.JournalId = j.Id JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Year = 2007 AND j.FullName = 'Neoplasia';
SELECT a.Name, p.Title FROM Author a JOIN PaperAuthor pa ON a.Id = pa.AuthorId JOIN Paper p ON pa.PaperId = p.Id WHERE a.Affiliation = 'Soongsil University' AND p.Year = 2000;
SELECT p.Title, pa.Name FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Year BETWEEN 2000 AND 2005 AND p.Keyword LIKE '%optical properties%';
SELECT AVG(PaperCount) AS AveragePapers FROM (     SELECT YEAR(P.Year) AS Year, COUNT(P.Id) AS PaperCount     FROM Paper P     JOIN Conference C ON P.ConferenceId = C.Id     WHERE C.FullName = 'World Computer Congress'     GROUP BY YEAR(P.Year) ) AS YearlyPapers;
SELECT p.Title, pa.Name FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Year = 1997 AND p.ConferenceId = 0 AND p.JournalId = 0;
SELECT p.Title, j.FullName FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Journal j ON p.JournalId = j.Id WHERE pa.Name = 'Adam Jones' AND p.Year BETWEEN 2005 AND 2010;
SELECT COUNT(*)  FROM Author  WHERE Affiliation = 'Otterbein University';
SELECT COUNT(*)  FROM PaperAuthor  WHERE PaperId = (SELECT Id FROM Paper WHERE Title = 'Subcellular localization of nuclease in barley aleurone');
SELECT c.FullName  FROM Paper p  JOIN Conference c ON p.ConferenceId = c.Id  WHERE p.Title = 'Extended Fuzzy Regression Models';
SELECT COUNT(*)  FROM Paper  WHERE ConferenceId = (SELECT Id FROM Conference WHERE FullName = 'Mathematics of Program Construction');
SELECT Name  FROM PaperAuthor  WHERE PaperId = (SELECT Id FROM Paper WHERE Title = 'Open Sourcing Social Solutions (Building Communities of Change)');
SELECT p.Title  FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name = 'Jianli Hua';
SELECT Name FROM PaperAuthor WHERE PaperId = (SELECT Id FROM Paper WHERE Title = 'Testing timed automata');
SELECT COUNT(Paper.Id)  FROM Paper  JOIN Conference ON Paper.ConferenceId = Conference.Id  WHERE Paper.Year = 2000 AND Conference.ShortName = 'SSPR';
SELECT p.Title  FROM Paper p  JOIN Journal j ON p.JournalId = j.Id  WHERE j.FullName = 'Theoretical Computer Science' AND p.Year = 2003;
SELECT c.HomePage  FROM Paper p  JOIN Conference c ON p.ConferenceId = c.Id  WHERE p.Title = 'Quality evaluation of long duration audiovisual content';
SELECT DISTINCT Name  FROM PaperAuthor  WHERE PaperId = (SELECT Id FROM Paper WHERE Title = 'A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus')  AND Affiliation = 'Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea';
SELECT COUNT(*)  FROM Paper  WHERE JournalId = (SELECT Id FROM Journal WHERE FullName = 'Software - Practice and Experience');
SELECT Paper.Title FROM Paper JOIN Conference ON Paper.ConferenceId = Conference.Id WHERE Conference.HomePage = 'http://www.irma-international.org/';
SELECT COUNT(P.Id) / 9.0 AS AveragePapers FROM Paper P JOIN Conference C ON P.ConferenceId = C.Id WHERE P.Year BETWEEN 2002 AND 2010 AND C.FullName = 'Information and Knowledge Engineering';
SELECT      (SELECT COUNT(Paper.Id)       FROM Paper       JOIN Conference ON Paper.ConferenceId = Conference.Id       WHERE Conference.FullName = 'International Conference on Supercomputing'       AND Paper.Year BETWEEN 1991 AND 2000) -      (SELECT COUNT(Paper.Id)       FROM Paper       JOIN Conference ON Paper.ConferenceId = Conference.Id       WHERE Conference.FullName = 'Informatik & Schule'       AND Paper.Year BETWEEN 1991 AND 2000) AS Difference;
SELECT ShortName FROM Conference WHERE FullName = 'Software - Concepts and Tools / Structured Programming';
SELECT j.FullName  FROM Paper p  JOIN Journal j ON p.JournalId = j.Id  WHERE p.Title = 'Education, democracy and growth';
SELECT COUNT(Paper.Id)  FROM Paper  JOIN Journal ON Paper.JournalId = Journal.Id  WHERE Journal.FullName = 'IEEE Transactions on Nuclear Science' AND Paper.Year = '1999';
SELECT p.Title  FROM Paper p  JOIN Journal j ON p.JournalId = j.Id  WHERE j.FullName = 'IEEE Transactions on Pattern Analysis and Machine Intelligence'  AND p.Year = '2011';
SELECT Keyword  FROM Paper  WHERE JournalId = (SELECT Id FROM Journal WHERE FullName = 'Modeling Identification and Control')  AND Year = 1994;
SELECT CASE WHEN p.Year = 0 THEN 'Yes' ELSE 'No' END AS IsPreprint FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON pa.AuthorId = a.Id WHERE a.Name = 'Zvezdan Protić';
SELECT c.FullName  FROM Paper p  JOIN Conference c ON p.ConferenceId = c.Id  WHERE p.Title = 'Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes';
SELECT COUNT(*)  FROM Paper  WHERE ConferenceId = (SELECT Id FROM Conference WHERE FullName = 'International Symposium on Software Testing and Analysis');
SELECT c.HomePage  FROM Paper p  JOIN Conference c ON p.ConferenceId = c.Id  WHERE p.Title = 'Increasing the Concurrency in Estelle';
SELECT COUNT(DISTINCT AuthorId) AS NumberOfAuthors FROM PaperAuthor WHERE PaperId = (SELECT Id FROM Paper WHERE Title = 'An Improved Active Suspension Model for Attitude Control of Electric Vehicles');
SELECT c.ShortName FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id WHERE p.Year = 2012 GROUP BY c.ShortName ORDER BY COUNT(p.Id) DESC LIMIT 1;
SELECT COUNT(*)  FROM Paper  WHERE ConferenceId = (SELECT Id FROM Conference WHERE ShortName = 'ECSQARU')  AND Year = '2003';
SELECT p.Keyword  FROM Paper p  JOIN Conference c ON p.ConferenceId = c.Id  WHERE c.FullName = 'International Radar Symposium' AND p.Year = '2012';
SELECT      (SELECT COUNT(Paper.Id)       FROM Paper       JOIN Conference ON Paper.ConferenceId = Conference.Id       WHERE Conference.FullName = 'International Conference on Thermoelectrics') * 1.0 /     (SELECT COUNT(Paper.Id)       FROM Paper       JOIN Conference ON Paper.ConferenceId = Conference.Id       WHERE Conference.FullName = 'International Conference on Wireless Networks, Communications and Mobile Computing') AS Ratio;
SELECT      (COUNT(CASE WHEN p.Year = 0 THEN 1 END) * 100.0 / COUNT(*)) AS PreprintPercentage FROM      Paper p JOIN      PaperAuthor pa ON p.Id = pa.PaperId WHERE      pa.Name = 'John Van Reenen';
SELECT Title  FROM Paper  WHERE Year = (SELECT MIN(Year) FROM Paper);
SELECT FullName  FROM Conference  ORDER BY LENGTH(FullName) DESC  LIMIT 1;
SELECT COUNT(*)  FROM Author  WHERE Affiliation = 'NASA Langley Research Center';
SELECT COUNT(*) FROM Journal WHERE ShortName IS NULL;
SELECT COUNT(*) AS PreprintCount FROM Paper WHERE Year = 0;
SELECT p.Title FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId GROUP BY p.Id, p.Title ORDER BY COUNT(pa.AuthorId) DESC LIMIT 1;
SELECT Title, Year  FROM Paper  WHERE JournalId = (SELECT Id FROM Journal WHERE ShortName = 'TUBERCLE LUNG DIS')  ORDER BY Year ASC  LIMIT 1;
SELECT p.Title  FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON pa.AuthorId = a.Id WHERE a.Name = 'Karin Rengefors';
SELECT COUNT(*)  FROM Paper  WHERE ConferenceId = (SELECT Id FROM Conference WHERE FullName = 'Virtual Reality, IEEE Annual International Symposium')  AND Year = 2012;
SELECT j.ShortName  FROM Paper p  JOIN Journal j ON p.JournalId = j.Id  WHERE p.Title = 'A Case of Unilateral Ashy Dermatosis';
SELECT DISTINCT Affiliation FROM Author WHERE Name = 'Mark A. Musen' UNION SELECT DISTINCT Affiliation FROM PaperAuthor WHERE Name = 'Mark A. Musen';
SELECT pa.Name, pa.Affiliation FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Title = 'Determination of Planetary Meteorology from Aerobot Flight Sensors';
SELECT Title, j.FullName AS Journal FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE p.Year BETWEEN 1960 AND 1969;
SELECT Year FROM Paper WHERE ConferenceId = (SELECT Id FROM Conference WHERE FullName = 'Internet, Multimedia Systems and Applications') GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT Name FROM PaperAuthor WHERE AuthorId IN (SELECT Id FROM Author WHERE Name = 'Randall Davis');
SELECT DISTINCT c.FullName FROM Conference c JOIN Paper p ON c.Id = p.ConferenceId WHERE p.Year = 2008;
SELECT j.HomePage FROM Journal j JOIN Paper p ON j.Id = p.JournalId GROUP BY j.Id, j.HomePage ORDER BY COUNT(p.Id) DESC LIMIT 1;
SELECT      a.Name,      a.Affiliation,      (SELECT COUNT(*) FROM Paper WHERE Keyword = 'cancer') * 1.0 / COUNT(*) AS Proportion FROM      Author a JOIN      PaperAuthor pa ON a.Id = pa.AuthorId JOIN      Paper p ON pa.PaperId = p.Id GROUP BY      a.Name, a.Affiliation;
SELECT Name FROM Author WHERE Id = 1722;
SELECT COUNT(*) AS PreprintOrNotPublished FROM Paper WHERE Year = 0;
SELECT Name FROM Author WHERE Affiliation = 'University of Illinois Chicago';
SELECT      (SELECT COUNT(*) FROM Paper WHERE Year = 2005) -      (SELECT COUNT(*) FROM Paper WHERE Year = 2004) AS Difference
SELECT p.Title  FROM Paper p  JOIN Journal j ON p.JournalId = j.Id  WHERE j.FullName = 'Ibm Journal of Research and Development';
SELECT pa.Name, pa.Affiliation  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  WHERE p.Title = 'Education, democracy and growth';
SELECT COUNT(DISTINCT PaperAuthor.Name)  FROM PaperAuthor  JOIN Paper ON PaperAuthor.PaperId = Paper.Id  JOIN Journal ON Paper.JournalId = Journal.Id  WHERE Journal.FullName = 'IEEE Computer';
SELECT c.FullName  FROM Paper p  JOIN Conference c ON p.ConferenceId = c.Id  WHERE p.Title = 'A context-based navigation paradigm for accessing Web data';
SELECT COUNT(*)  FROM Paper p  JOIN Conference c ON p.ConferenceId = c.Id  WHERE c.FullName = 'International Workshop on Inductive Logic Programming'  AND p.Year BETWEEN 2001 AND 2009;
SELECT AVG(AuthorCount) AS AverageAuthors FROM (     SELECT P.Id, COUNT(PA.AuthorId) AS AuthorCount     FROM Paper P     JOIN PaperAuthor PA ON P.Id = PA.PaperId     WHERE P.Year BETWEEN 1990 AND 2000     GROUP BY P.Id ) AS AuthorCounts;
SELECT p.Year, j.FullName FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE p.Title = 'Area Effects in Cepaea';
SELECT a.Name  FROM Author a  JOIN PaperAuthor pa ON a.Id = pa.AuthorId  JOIN Paper p ON pa.PaperId = p.Id  WHERE p.Title = 'Real-Time Automata';
SELECT Name FROM Author WHERE Affiliation = 'ABB Electrical Machines';
SELECT COUNT(*)  FROM Paper  WHERE JournalId = (SELECT Id FROM Journal WHERE FullName = 'Academic Medicine')  AND Year BETWEEN 2005 AND 2010;
SELECT p.Title  FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name = 'Zuliang Du' AND p.Year = (SELECT MAX(Year) FROM Paper p2                JOIN PaperAuthor pa2 ON p2.Id = pa2.PaperId                WHERE pa2.Name = 'Zuliang Du');
SELECT COUNT(*)  FROM Paper  WHERE ConferenceId IN (SELECT Id FROM Conference WHERE FullName = 'Adaptive Multimedia Retrieval')  AND Year = 2007;
SELECT AVG(PaperCount) AS AveragePapersPerYear FROM (     SELECT YEAR, COUNT(*) AS PaperCount     FROM Paper     WHERE JournalId = (SELECT Id FROM Journal WHERE FullName = 'Information Sciences')     GROUP BY YEAR ) AS AnnualPapers;
SELECT COUNT(*)  FROM PaperAuthor  WHERE Name = 'Howard F. Lipson';
SELECT      (COUNT(CASE WHEN p.Keyword = 'Turbulent Fluids' AND j.FullName = 'Physics of Fluids' THEN 1 END) * 100.0) /      NULLIF(COUNT(CASE WHEN p.Keyword = 'Turbulent Fluids' THEN 1 END), 0) AS percentage FROM      Paper p LEFT JOIN      Journal j ON p.JournalId = j.Id;
SELECT COUNT(*)  FROM Author  WHERE Affiliation = 'Arizona State University';
SELECT FullName, HomePage FROM Conference WHERE ShortName = 'ICCI';
SELECT p.Title  FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name = 'Joe Lograsso';
SELECT COUNT(DISTINCT p.Id) AS PaperCount FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Affiliation = 'University of Hong Kong';
SELECT p.Year, p.Title FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name = 'Barrasa';
SELECT pa.Name, p.Year  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  WHERE p.Id = 2;
SELECT pa.Name, p.Keyword  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  WHERE p.Id = 5;
SELECT c.FullName  FROM Paper p  JOIN Conference c ON p.ConferenceId = c.Id  WHERE p.Title = '2004 YD5';
SELECT id.chronname FROM institution_details id JOIN institution_grads ig ON id.unitid = ig.unitid WHERE ig.year = '2007' AND ig.race = 'Ai' GROUP BY id.chronname HAVING COUNT(ig.race) = (     SELECT MAX(american_indian_count)     FROM (         SELECT COUNT(ig_inner.race) AS american_indian_count         FROM institution_grads ig_inner         WHERE ig_inner.year = '2007' AND ig_inner.race = 'Ai'         GROUP BY ig_inner.unitid     ) AS counts );
SELECT id.chronname, id.site FROM institution_details id JOIN institution_grads ig ON id.unitid = ig.unitid WHERE ig.grad_cohort = 209 AND ig.year = '2011';
SELECT SUM(grad_cohort) AS female_graduates FROM institution_grads WHERE gender = 'F'   AND year BETWEEN 2011 AND 2013   AND unitid = (SELECT unitid FROM institution_details WHERE chronname = 'Gateway Community College');
SELECT SUM(ig.grad_cohort) AS total_male_graduates FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE ig.gender = 'M'    AND ig.year = 2012    AND id.state = (       SELECT id2.state       FROM institution_details id2       WHERE id2.aid_value = (           SELECT MAX(aid_value)           FROM institution_details       )   );
SELECT AVG(id.med_sat_value) AS average_median_sat FROM institution_details id JOIN state_sector_grads ssg ON id.unitid = ssg.stateid WHERE ssg.year = 2013 AND ssg.gender = 'M' GROUP BY ssg.state ORDER BY COUNT(ssg.grad_cohort) DESC LIMIT 1;
SELECT state, chronname FROM institution_details WHERE control = 'Private for-profit' AND unitid IN (     SELECT unitid     FROM institution_grads     WHERE year = 2012     GROUP BY unitid     HAVING SUM(grad_cohort) = (         SELECT MAX(total_grad_cohort)         FROM (             SELECT SUM(grad_cohort) AS total_grad_cohort             FROM institution_grads             WHERE year = 2012 AND unitid IN (                 SELECT unitid                 FROM institution_details                 WHERE control = 'Private for-profit'             )             GROUP BY unitid         ) AS cohort_totals     ) ) ORDER BY chronname;
SELECT chronname  FROM institution_details  WHERE control = 'Public'  AND unitid IN (     SELECT unitid      FROM institution_grads      WHERE year = 2013      GROUP BY unitid      ORDER BY MIN(grad_cohort)      LIMIT 1 );
SELECT id.chronname, id.fte_value FROM institution_details id JOIN institution_grads ig ON id.unitid = ig.unitid WHERE ig.year = 2013 AND ig.grad_cohort < 200 AND ig.race = 'X' AND ig.gender = 'B';
SELECT SUM(grad_cohort) AS female_graduates FROM institution_grads WHERE unitid = (SELECT unitid FROM institution_details WHERE chronname = 'Oakwood University')   AND year = 2013   AND gender = 'F'   AND race = 'X';
SELECT COUNT(*)  FROM institution_grads ig  JOIN institution_details id ON ig.unitid = id.unitid  WHERE ig.year = 2012    AND ig.gender = 'F'    AND ig.race = 'A'    AND ig.cohort = '4y other'    AND id.chronname = 'University of Alaska at Anchorage';
SELECT year, grad_cohort FROM institution_grads WHERE unitid = (SELECT unitid FROM institution_details WHERE chronname = 'Auburn University')   AND gender = 'B'   AND race = 'X'   AND cohort IN ('4y other', '4y bach')   AND year IN (2011, 2012, 2013);
SELECT      (SUM(CASE WHEN race = 'B' THEN 1 ELSE 0 END) * 100.0) / NULLIF(SUM(grad_cohort), 0) AS percentage_black_students FROM      institution_grads WHERE      unitid IN (SELECT unitid FROM institution_details WHERE control = 'Private for-profit');
SELECT      (SUM(CASE WHEN race = 'A' THEN grad_cohort ELSE 0 END) * 100.0) /      SUM(grad_cohort) AS percentage_asian_grads FROM      institution_grads ig JOIN      institution_details id ON ig.unitid = id.unitid WHERE      id.state = 'Alabama'      AND ig.year = 2013      AND ig.grad_100 = 1;
SELECT      (SUM(CASE WHEN gender = 'M' AND race = 'A' THEN grad_cohort ELSE 0 END) * 1.0) /      NULLIF(SUM(CASE WHEN gender = 'F' AND race = 'A' THEN grad_cohort ELSE 0 END), 0) AS ratio FROM      institution_grads ig JOIN      institution_details id ON ig.unitid = id.unitid WHERE      id.chronname = 'Harvard University' AND      ig.year = 2013;
SELECT chronname, MIN(grad_100_value) AS min_grad_100_value FROM institution_details WHERE chronname IN ('Amridge University', 'Auburn University') GROUP BY chronname;
SELECT COUNT(*)  FROM institution_details  WHERE control = 'Private not-for-profit';
SELECT SUM(grad_100) AS total_hispanic_male_grads FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Amridge University' AND ig.gender = 'M' AND ig.race = 'H';
SELECT SUM(grad_cohort) AS total_graduates FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Lincoln College'    AND ig.year = 2011    AND ig.cohort = '4y bach';
SELECT SUM(grad_100) AS male_hispanic_grads FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Central Alabama Community College'   AND ig.year = 2011   AND ig.gender = 'M'   AND ig.race = 'H';
SELECT SUM(grad_100) AS total_graduates FROM institution_grads WHERE unitid = (SELECT unitid FROM institution_details WHERE chronname = 'Central Alabama Community College') AND year = 2011;
SELECT      SUM(CASE WHEN gender = 'F' AND race = 'w' THEN grad_150 ELSE 0 END) AS female,     SUM(CASE WHEN gender = 'M' AND race = 'w' THEN grad_150 ELSE 0 END) AS male FROM      institution_grads WHERE      unitid = (SELECT unitid FROM institution_details WHERE chronname = 'Central Alabama Community College')      AND year = 2011;
SELECT id.chronname, MAX(ig.grad_150_rate) AS max_grad_150_rate FROM institution_details id JOIN institution_grads ig ON id.unitid = ig.unitid WHERE ig.year = 2011 AND ig.gender = 'M' AND ig.race = 'w' GROUP BY id.chronname ORDER BY max_grad_150_rate DESC LIMIT 1;
SELECT id.chronname FROM institution_details id JOIN institution_grads ig ON id.unitid = ig.unitid WHERE ig.gender = 'M'    AND ig.race = 'w'    AND ig.year = 2011    AND ig.grad_150 > 20;
SELECT SUM(grad_cohort) AS total_graduates FROM institution_grads WHERE cohort = '2y all' AND state = 'Alabama' AND year = 2011;
SELECT      (SUM(CASE WHEN year = 2012 THEN grad_cohort ELSE 0 END) -       SUM(CASE WHEN year = 2011 THEN grad_cohort ELSE 0 END)) AS difference FROM      institution_grads WHERE      unitid = (SELECT unitid FROM institution_details WHERE chronname = 'Central Alabama Community College');
SELECT COUNT(DISTINCT id.unitid)  FROM institution_details id  JOIN institution_grads ig ON id.unitid = ig.unitid  WHERE id.state = 'Alabama'    AND id.med_sat_percentile = 77    AND ig.year = 2011    AND ig.grad_cohort > 500;
SELECT COUNT(*)  FROM institution_grads ig  JOIN institution_details id ON ig.unitid = id.unitid  WHERE id.state = 'Alabama'  AND id.control = 'Public'  AND ig.year = 2011  AND ig.grad_100 > 30;
SELECT id.chronname FROM institution_details id JOIN institution_grads ig ON id.unitid = ig.unitid WHERE id.state = 'Alabama' AND ig.year = 2011 AND ig.grad_cohort > 500 AND ig.race = 'X';
SELECT AVG(grad_cohort) AS average_graduates FROM institution_grads WHERE unitid = (SELECT unitid FROM institution_details WHERE chronname = 'Central Alabama Community College') AND year IN (2011, 2012, 2013;
SELECT AVG(grad_100_rate) AS average_grad_100_rate FROM institution_grads WHERE unitid = (SELECT unitid FROM institution_details WHERE chronname = 'Central Alabama Community College');
SELECT site FROM institution_details WHERE chronname = 'Swarthmore College';
SELECT state  FROM institution_details  WHERE chronname = 'Mercer University';
SELECT city  FROM institution_details  WHERE chronname = 'Rensselaer Polytechnic Institute';
SELECT state_abbr FROM state_sector_details WHERE state = 'Delaware';
SELECT COUNT(*)  FROM institution_details  WHERE level = '2-year' AND control = 'public' AND state = 'California';
SELECT state_post FROM state_sector_details WHERE state = 'Idaho';
SELECT chronname  FROM institution_details  WHERE state = 'NJ' AND level = '4-year'  ORDER BY student_count DESC  LIMIT 1;
SELECT site  FROM institution_details  WHERE state = 'PA'  ORDER BY lat_y DESC  LIMIT 1;
SELECT COUNT(*)  FROM institution_details  WHERE level = '4-year'    AND control = 'Public'    AND state_abbr = 'UT'    AND awards_per_value > (SELECT AVG(awards_per_value) FROM institution_details WHERE state_abbr = 'UT');
SELECT COUNT(*)  FROM institution_details  WHERE level = '2-year'    AND control = 'Private not-for-profit'    AND state = 'CT'    AND awards_per_value < (SELECT AVG(awards_per_value) FROM institution_details WHERE state = 'CT');
SELECT chronname  FROM institution_details  WHERE level = '4-year' AND control = 'Public' AND state = 'ID'  ORDER BY grad_100_value ASC  LIMIT 1;
SELECT unitid  FROM institution_details  WHERE level = '4-year'    AND control = 'Private for-profit'    AND state = 'KY'  ORDER BY grad_150_value DESC  LIMIT 1;
SELECT SUM(grad_100) AS female_hispanic_grads FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Pennsylvania State University-Altoona'   AND ig.gender = 'F'   AND ig.race = 'H'   AND ig.grad_100 = 1;
SELECT cohort FROM institution_details WHERE cohort_size = (SELECT MAX(cohort_size) FROM institution_details);
SELECT COUNT(*)  FROM institution_details  WHERE level = '4-year'  AND control = 'Private not-for-profit'  AND state = (SELECT state FROM institution_details WHERE chronname = 'Brevard Community College');
SELECT SUM(grad_cohort) AS total_graduated_students FROM state_sector_grads WHERE level = '2-year' AND control = 'Public' AND state = 'Alabama' AND year = '2011' AND race = 'X';
SELECT SUM(grad_cohort) AS graduated_asian_students FROM state_sector_grads WHERE stateid IN (     SELECT stateid     FROM state_sector_details     WHERE schools_count = 113 AND level = '2-year' AND control = 'public' ) AND race = 'A' AND cohort = '2y all' AND year = 2013;
SELECT      (SUM(CASE WHEN level = '4-year' AND control = 'Public' THEN 1 ELSE 0 END) * 100.0) /      NULLIF(SUM(CASE WHEN state = 'Alabama' THEN 1 ELSE 0 END), 0) AS percentage FROM      institution_details WHERE      chronname = 'Madison Area Technical College';
SELECT id.state, id.chronname FROM institution_details id JOIN institution_grads ig ON id.unitid = ig.unitid WHERE ig.year BETWEEN 2010 AND 2012 AND ig.race = 'B';
SELECT DISTINCT state  FROM state_sector_details  WHERE year = '2011' AND awards_per_natl_value < 20;
SELECT control, level FROM institution_details WHERE student_count = (     SELECT MAX(student_count)     FROM institution_details     WHERE unitid IN (         SELECT unitid         FROM institution_grads         WHERE race = 'X'     ) );
SELECT DISTINCT race  FROM state_sector_details  WHERE control = 'Public' AND schools_count <= 20;
SELECT id.basic FROM institution_details id JOIN institution_grads ig ON id.unitid = ig.unitid WHERE ig.year = '2012' AND ig.gender = 'M' AND ig.race = 'X';
SELECT SUM(grad_cohort_ct) AS white_students FROM state_sector_grads WHERE state = 'Alaska'    AND year BETWEEN '2011' AND '2013'    AND race = 'W'   AND stateid IN (SELECT stateid FROM state_sector_details WHERE state = 'Alaska' AND schools_count = 1);
SELECT chronname  FROM institution_details id  JOIN institution_grads ig ON id.unitid = ig.unitid  WHERE ig.race = 'Ai' AND ig.grad_cohort <= 3;
SELECT SUM(grad_cohort) AS total_degree_seeking_students FROM state_sector_grads WHERE state LIKE 'A%'   AND awards_per_natl_value = 16.5   AND year = '2012';
SELECT site  FROM institution_details  WHERE student_count BETWEEN 500 AND 1000  AND vsa_year = (SELECT MAX(vsa_year) FROM institution_details);
SELECT DISTINCT id.state FROM state_sector_grads AS id JOIN institution_grads AS ig ON id.stateid = ig.unitid WHERE ig.gender = 'M'    AND ig.year = '2011'    AND id.control = 'Private for-profit'    AND ig.race = 'B';
SELECT id.site, id.chronname FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE ig.race = 'B'    AND ig.year = '2011'    AND ig.grad_cohort BETWEEN 20 AND 30;
SELECT COUNT(*)  FROM institution_grads ig  JOIN state_sector_details ssd ON ig.unitid = ssd.stateid  WHERE ig.gender = 'F'  AND ig.year = 2012  AND ssd.schools_count BETWEEN 10 AND 20;
SELECT DISTINCT race FROM institution_details WHERE state = 'Alabama' AND student_count > (SELECT AVG(student_count) * 0.9 FROM institution_details);
SELECT      (SUM(CASE WHEN level = '2-year' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage_associates_degree FROM      institution_details WHERE      state = 'Hawaii' AND      unitid IN (SELECT unitid FROM institution_grads WHERE year = 2010);
SELECT chronname  FROM institution_details  WHERE state = 'Connecticut'  ORDER BY retain_percentile DESC  LIMIT 1;
SELECT id.site FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE ig.race = 'W' AND ig.cohort = '2y all' AND ig.year = '2008' ORDER BY ig.grad_cohort DESC LIMIT 1;
SELECT year, MAX(grad_cohort) AS highest_grad_cohort FROM institution_grads WHERE unitid = (SELECT unitid FROM institution_details WHERE chronname = 'Harvard University') GROUP BY year ORDER BY highest_grad_cohort DESC LIMIT 1;
SELECT id.chronname FROM institution_details id JOIN state_sector_details sd ON id.state = sd.state WHERE sd.state_appr_value = (     SELECT MAX(state_appr_value)     FROM state_sector_details     WHERE level = '4-year' AND control = 'Public' AND year = 2011 ) AND id.student_count = (     SELECT MIN(student_count)     FROM institution_details     WHERE year = 2010 );
SELECT AVG(black_students) AS average_black_students FROM (     SELECT COUNT(*) AS black_students     FROM institution_grads ig     JOIN institution_details id ON ig.unitid = id.unitid     WHERE id.chronname = 'Yale University'       AND ig.race = 'B'       AND ig.cohort = '4y bach'       AND ig.year BETWEEN 2002 AND 2005     GROUP BY ig.year ) AS yearly_counts;
SELECT id.chronname, SUM(ig.grad_cohort) AS total_hispanic_grads FROM institution_details id JOIN institution_grads ig ON id.unitid = ig.unitid WHERE id.chronname IN ('Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University') AND ig.race = 'H' GROUP BY id.chronname ORDER BY total_hispanic_grads DESC LIMIT 1;
SELECT chronname  FROM institution_details  WHERE state = 'Florida' AND level = '4-year' AND control = 'Public';
SELECT id.chronname, sd.state, sd.state_appr_value FROM institution_details id JOIN state_sector_details sd ON id.state = sd.state WHERE id.chronname IN ('Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University') AND sd.level = id.level AND sd.control = id.control AND sd.state_appr_value = (     SELECT MIN(state_appr_value)     FROM state_sector_details     WHERE year = 2011 ) AND sd.year = 2011;
SELECT id.chronname FROM institution_details id JOIN state_sector_details sd ON id.state = sd.state WHERE sd.schools_count = (SELECT MAX(schools_count) FROM state_sector_details) AND id.ft_pct >= 90;
SELECT AVG(med_sat_value) AS average_sat_value FROM institution_details WHERE unitid IN (     SELECT stateid     FROM state_sector_details     WHERE year = 2011     ORDER BY state_appr_value ASC     LIMIT 1 );
SELECT chronname  FROM institution_details  WHERE unitid IN (     SELECT unitid      FROM institution_grads      WHERE gender = 'F' AND cohort != '4y other' )  ORDER BY (SELECT COUNT(*)            FROM institution_grads            WHERE gender = 'F' AND cohort != '4y other' AND institution_grads.unitid = institution_details.unitid) DESC  LIMIT 1;
SELECT id.chronname, SUM(ig.grad_150) AS total_black_grads FROM institution_details id JOIN institution_grads ig ON id.unitid = ig.unitid WHERE id.chronname IN ('Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University') AND ig.year = '2013' AND ig.race = 'B' AND ig.cohort = '4y bach' GROUP BY id.chronname ORDER BY total_black_grads DESC LIMIT 1;
SELECT AVG(grad_150) AS average_grad_150 FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'United Education Institute-Huntington Park Campus'   AND ig.year BETWEEN '2011' AND '2013'   AND ig.gender = 'M'   AND ig.race = 'H'   AND id.level = '2-year';
SELECT id.chronname, sd.state_appr_value FROM institution_details id JOIN state_sector_details sd ON id.state = sd.state WHERE id.vsa_year = 2011 ORDER BY (id.awards_per_value - id.awards_per_natl_value) DESC LIMIT 1;
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND stars < 3;
SELECT COUNT(*)  FROM Business  WHERE active = 'False' AND state = 'AZ';
SELECT COUNT(*)  FROM Reviews  WHERE user_id = 36139 AND review_length = 'long';
SELECT COUNT(*) AS user_count FROM Users WHERE user_fans = 'uber';
SELECT COUNT(DISTINCT b.business_id) AS open_24_hours_count FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'Open 24 Hours' AND ba.attribute_value = 'true';
SELECT ba.attribute_value  FROM Business_Attributes ba  JOIN Attributes a ON ba.attribute_id = a.attribute_id  WHERE a.attribute_name = 'Wi-Fi' AND ba.business_id = 10172;
SELECT COUNT(b.business_id) AS bar_count FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Bars';
SELECT      (SUM(CASE WHEN c.category_name = 'Buffets' THEN 1 ELSE 0 END) -       SUM(CASE WHEN c.category_name = 'Gyms' THEN 1 ELSE 0 END)) AS difference FROM      Business_Categories bc JOIN      Categories c ON bc.category_id = c.category_id;
SELECT c.category_name FROM Business b JOIN Reviews r ON b.business_id = r.business_id JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE r.review_stars = 5 GROUP BY c.category_name ORDER BY COUNT(r.review_stars) DESC LIMIT 1;
SELECT u.user_yelping_since_year FROM Users u JOIN (     SELECT user_id     FROM Reviews     WHERE review_stars = 5     GROUP BY user_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) AS top_user ON u.user_id = top_user.user_id;
SELECT u.user_id, AVG(r.review_stars) AS average_rating FROM Reviews r JOIN Users u ON r.user_id = u.user_id WHERE r.review_length = 'long' GROUP BY u.user_id ORDER BY COUNT(r.review_length) DESC LIMIT 1;
SELECT c.category_name FROM Business b JOIN Reviews r ON b.business_id = r.business_id JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE r.review_length = 'long' GROUP BY b.business_id, c.category_name ORDER BY COUNT(r.review_length) DESC LIMIT 1;
SELECT c.category_name FROM Business b JOIN Tips t ON b.business_id = t.business_id JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE t.tip_length = 'short' GROUP BY b.business_id, c.category_name ORDER BY COUNT(t.tip_length) DESC LIMIT 1;
SELECT u.user_yelping_since_year FROM Users u JOIN Tips t ON u.user_id = t.user_id WHERE t.tip_length = 'Short' GROUP BY u.user_id ORDER BY COUNT(t.tip_length) DESC LIMIT 1;
SELECT c.category_name FROM Tips t JOIN Business_Categories bc ON t.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE t.user_id = 70271 AND t.tip_length = 'short';
SELECT b.stars FROM Tips t JOIN Business b ON t.business_id = b.business_id WHERE t.user_id = 69722 AND t.tip_length = 'short' LIMIT 1;
SELECT      (SUM(CASE WHEN c.category_name = 'Automotive' THEN 1 ELSE 0 END) * 100.0) / COUNT(b.business_id) AS automotive_percentage FROM      Business b LEFT JOIN      Business_Categories bc ON b.business_id = bc.business_id LEFT JOIN      Categories c ON bc.category_id = c.category_id;
SELECT      (SUM(CASE WHEN c.category_name = 'Women''s Clothing' THEN 1 ELSE 0 END) -       SUM(CASE WHEN c.category_name = 'Men''s Clothing' THEN 1 ELSE 0 END)) * 100.0 /      COUNT(b.business_id) AS percentage_more FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id WHERE      c.category_name IN ('Women''s Clothing', 'Men''s Clothing');
SELECT COUNT(*) AS number_of_users FROM Users WHERE user_yelping_since_year >= 2004;
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year = 2005 AND user_fans = 0;
SELECT COUNT(*) AS active_business_count FROM Business WHERE active = 'TRUE' AND city = 'Tolleson';
SELECT COUNT(*) AS number_of_reviews  FROM Reviews  WHERE user_id = 21679;
SELECT COUNT(*)  FROM Reviews  WHERE business_id = 10682 AND review_stars = 5;
SELECT business_id FROM Business WHERE active = 'False' AND city = 'Sun City' GROUP BY business_id ORDER BY COUNT(review_count) DESC LIMIT 1;
SELECT COUNT(*) AS medium_review_count FROM Reviews WHERE business_id = (SELECT business_id FROM Business WHERE city = 'Yuma') AND review_length = 'Medium';
SELECT COUNT(*) > 0 AS has_tv FROM Business_Attributes JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE Business_Attributes.business_id = 4960 AND Attributes.attribute_name = 'Has TV';
SELECT COUNT(DISTINCT ba.business_id) AS number_of_dogs_allowed_businesses FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'Dogs Allowed' AND ba.attribute_value = 'true';
SELECT      SUM(TIMESTAMPDIFF(HOUR, opening_time, closing_time)) AS total_hours FROM      Business_Hours JOIN      Days ON Business_Hours.day_id = Days.day_id WHERE      Business_Hours.business_id = 5734 AND      Days.day_of_week = 'Saturday';
SELECT COUNT(DISTINCT b.business_id) AS hair_removal_business_count FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Hair Removal';
SELECT      (SELECT COUNT(*) FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Chinese') -     (SELECT COUNT(*) FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Filipino') AS difference;
SELECT b.city  FROM Tips t  JOIN Business b ON t.business_id = b.business_id  WHERE t.user_id = 63469 AND t.likes = 1;
SELECT COUNT(*)  FROM Business_Attributes  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Business_Attributes.business_id = 1141  AND Attributes.attribute_name LIKE '%music%'  AND Business_Attributes.attribute_value = 'true';
SELECT SUM(number_of_compliments) AS total_cute_compliments FROM Users_Compliments uc JOIN Compliments c ON uc.compliment_id = c.compliment_id WHERE uc.user_id = 57400 AND c.compliment_type = 'cute';
SELECT user_id FROM Users_Compliments uc JOIN Compliments c ON uc.compliment_id = c.compliment_id WHERE c.compliment_type = 'funny' GROUP BY user_id ORDER BY COUNT(uc.number_of_compliments) DESC LIMIT 1;
SELECT COUNT(*)  FROM Business_Attributes ba  JOIN Business b ON ba.business_id = b.business_id  WHERE ba.attribute_id = (SELECT attribute_id FROM Attributes WHERE attribute_name = 'Drive-Thru')  AND ba.attribute_value = 'true'  AND b.city = 'Scottsdale'  AND b.business_id < 1000;
SELECT AVG(b.stars) AS average_rating FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'Open 24 Hours' AND ba.attribute_value = 'true';
SELECT      (COUNT(CASE WHEN b.city = 'Phoenix' THEN 1 END) * 100.0 / COUNT(b.business_id)) AS percentage FROM      Business b JOIN      Business_Attributes ba ON b.business_id = ba.business_id JOIN      Attributes a ON ba.attribute_id = a.attribute_id WHERE      a.attribute_name = 'BYOB' AND ba.attribute_value = 'TRUE';
SELECT business_id  FROM Business  WHERE state = 'AZ' AND stars = 5;
SELECT COUNT(*)  FROM Business  WHERE active = 'true' AND review_count = 'Low';
SELECT COUNT(user_id)  FROM Users  WHERE user_id BETWEEN 1 AND 20  AND user_fans = 0  AND user_review_count < 5;
SELECT b.business_id, bh.opening_time, bh.closing_time FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Business_Hours bh ON b.business_id = bh.business_id WHERE c.category_name = 'fashion';
SELECT COUNT(DISTINCT b.business_id)  FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Business_Hours bh ON b.business_id = bh.business_id WHERE c.category_name = 'Shopping' AND bh.opening_time < '08:00:00';
SELECT b.business_id FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Business_Hours bh ON b.business_id = bh.business_id WHERE c.category_name = 'pets' AND bh.closing_time > '21:00';
SELECT COUNT(DISTINCT b.business_id)  FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE d.day_of_week BETWEEN 'Monday' AND 'Thursday' GROUP BY b.business_id HAVING COUNT(DISTINCT d.day_id) = 4;
SELECT SUM(b.review_count) AS total_review_count FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Active Life' AND b.city = 'Phoenix' AND b.active = 1;
SELECT b.business_id FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.stars < 5 AND c.category_name = 'men\'s clothing';
SELECT b.business_id, b.city, b.state, b.stars, b.review_count FROM Business b JOIN Reviews r ON b.business_id = r.business_id WHERE b.active = 'False' AND r.review_votes_useful = 'Low';
SELECT business_id  FROM Reviews  WHERE review_length = 'Long'  AND business_id BETWEEN 1 AND 20;
SELECT ba.attribute_value FROM Business_Attributes ba JOIN Business_Categories bc ON ba.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Business b ON ba.business_id = b.business_id WHERE c.category_name = 'Fashion' AND b.city = 'Scottsdale';
SELECT COUNT(*) AS medium_user_compliments FROM Users_Compliments uc JOIN Users u ON uc.user_id = u.user_id JOIN Business b ON uc.business_id = b.business_id WHERE uc.number_of_compliments = 'Medium' AND b.city = 'Phoenix';
SELECT b.business_id FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id WHERE b.city = 'Tempe' AND bh.opening_time < '08:00:00';
SELECT COUNT(*)  FROM Business b  JOIN Business_Hours bh ON b.business_id = bh.business_id  WHERE b.city = 'Glendale'    AND b.active = 'true'    AND bh.opening_time = '8AM'    AND bh.closing_time = '6PM';
SELECT      COUNT(business_id) AS phoenix_business_count,     (COUNT(business_id) * 100.0 / (SELECT COUNT(business_id) FROM Business)) AS phoenix_business_percentage FROM      Business WHERE      city = 'Phoenix';
SELECT      COUNT(DISTINCT b.city) AS active_life_cities,     (SUM(CASE WHEN b.review_count < (SELECT AVG(review_count) FROM Business) THEN 1 ELSE 0 END) * 100.0 / COUNT(b.business_id)) AS low_review_percentage FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id WHERE      c.category_name = 'Active Life';
SELECT COUNT(*)  FROM Business  WHERE active = 'true' AND city = 'Phoenix';
SELECT COUNT(*)  FROM Business  WHERE city = 'Scottsdale' AND stars > 3;
SELECT AVG(stars) AS average_rating_inactive_businesses FROM Business WHERE active = 'False';
SELECT COUNT(DISTINCT b.business_id) AS business_count FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id WHERE b.state = 'AZ' AND ba.attribute_value = 'beer_and_wine';
SELECT b.city FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id WHERE ba.attribute_value = 'full_bar' GROUP BY b.city ORDER BY COUNT(b.business_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT b.business_id)  FROM Business b  JOIN Business_Categories bc ON b.business_id = bc.business_id  JOIN Categories c ON bc.category_id = c.category_id  WHERE c.category_name = 'Fashion' AND b.stars = 5;
SELECT city FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Food' AND b.review_count = 'High' GROUP BY city ORDER BY COUNT(b.business_id) DESC LIMIT 1;
SELECT business_id FROM Business WHERE city = 'Mesa' AND stars > 3;
SELECT city FROM Business WHERE business_id IN (     SELECT business_id     FROM Reviews     WHERE review_votes_funny = 'Low' ) GROUP BY city ORDER BY COUNT(business_id) ASC LIMIT 1;
SELECT      (COUNT(CASE WHEN c.category_name = 'Real Estate' AND b.stars = 5 THEN 1 END) * 100.0 / COUNT(b.business_id)) AS percentage FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id WHERE      b.city = 'Chandler';
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year = '2012' AND user_votes_funny = 'High';
SELECT review_votes_useful  FROM Reviews  WHERE user_id = 52592 AND business_id = 2;
SELECT attribute_id  FROM Attributes  WHERE attribute_name LIKE '%payment%';
SELECT review_length  FROM Reviews  WHERE business_id = 2 AND user_id = 612;
SELECT COUNT(*)  FROM Business  WHERE active = 'true' AND city = 'Gilbert';
SELECT COUNT(*) AS low_quality_businesses FROM Business WHERE state = 'AZ' AND review_count = 'low';
SELECT DISTINCT b.business_id  FROM Business b  JOIN Reviews r ON b.business_id = r.business_id  WHERE b.state = 'AZ' AND r.review_stars = 5  LIMIT 3;
SELECT a.attribute_name  FROM Attributes a  WHERE a.attribute_id NOT IN (     SELECT ba.attribute_id      FROM Business_Attributes ba      WHERE ba.business_id = 2 AND ba.attribute_value != 'none' ) LIMIT 1;
SELECT SUM(number_of_compliments) AS cool_compliments FROM Users_Compliments uc JOIN Compliments c ON uc.compliment_id = c.compliment_id WHERE uc.user_id = 33 AND c.compliment_type = 'cool';
SELECT opening_time, closing_time  FROM Business_Hours  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business_Hours.business_id = 53 AND Days.day_of_week = 'Friday';
SELECT a.attribute_name FROM Attributes a JOIN Business_Attributes ba ON a.attribute_id = ba.attribute_id WHERE ba.business_id = 56 AND ba.attribute_value = 'true';
SELECT c.category_name  FROM Business_Categories bc  JOIN Categories c ON bc.category_id = c.category_id  WHERE bc.business_id = 15;
SELECT COUNT(DISTINCT b.business_id)  FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.city = 'Scottsdale' AND c.category_name = 'Beauty & Spas';
SELECT DISTINCT uc.user_id FROM Users_Compliments uc JOIN Compliments c ON uc.compliment_id = c.compliment_id WHERE uc.number_of_compliments = 'Uber' AND c.compliment_type = 'cute' LIMIT 2;
SELECT COUNT(DISTINCT b.business_id) AS business_count FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Reviews r ON b.business_id = r.business_id WHERE bc.category_id = (SELECT category_id FROM Categories WHERE category_name = 'Accessories') AND r.review_stars > 3;
SELECT opening_time, closing_time  FROM Business_Hours  WHERE business_id = 12 AND day_id = 3;
SELECT COUNT(DISTINCT b.business_id)  FROM Business b LEFT JOIN Business_Hours bh ON b.business_id = bh.business_id LEFT JOIN Days d ON bh.day_id = d.day_id WHERE b.state = 'AZ' AND (d.day_of_week != 'Thursday' OR bh.opening_time IS NULL OR bh.closing_time IS NULL OR bh.label_time_4 = 'None');
SELECT COUNT(*)  FROM Business  WHERE city = 'Scottsdale';
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND active = 'true';
SELECT COUNT(DISTINCT b.business_id) AS Yelp_Businesses FROM Business b JOIN Reviews r ON b.business_id = r.business_id JOIN Elite e ON r.user_id = e.user_id WHERE b.city = 'Scottsdale' AND r.review_stars > 3;
SELECT city, MAX(review_count) AS max_review_count FROM Business WHERE city IN ('Scottsdale', 'Anthem') GROUP BY city ORDER BY max_review_count DESC LIMIT 1;
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND stars > 4;
SELECT COUNT(*) AS total_yelp_businesses FROM Business WHERE state = 'AZ';
SELECT DISTINCT b.city FROM Business b WHERE b.stars = 5;
SELECT COUNT(*) AS review_count FROM Reviews WHERE user_id = 3;
SELECT COUNT(*)  FROM Reviews  WHERE user_id = 3 AND review_length = 'Long';
SELECT COUNT(*)  FROM Reviews  WHERE user_id = 3 AND review_length = 'Long' AND review_votes_useful = 'medium';
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year >= '2012';
SELECT user_id  FROM Users  WHERE user_fans = 'High';
SELECT COUNT(DISTINCT b.business_id) AS businesses_without_alcohol FROM Business b LEFT JOIN Business_Attributes ba ON b.business_id = ba.business_id WHERE ba.attribute_id = (SELECT attribute_id FROM Attributes WHERE attribute_name = 'Alcohol') AND ba.attribute_value = 'none';
SELECT COUNT(DISTINCT b.business_id) AS businesses_without_alcohol FROM Business b LEFT JOIN Business_Attributes ba ON b.business_id = ba.business_id LEFT JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.state = 'AZ' AND (a.attribute_name != 'Alcohol' OR ba.attribute_value != 'none' OR a.attribute_name IS NULL);
SELECT business_id  FROM Business_Attributes  WHERE attribute_id = (SELECT attribute_id FROM Attributes WHERE attribute_name = 'Good for Kids')  AND attribute_value = 'true';
SELECT COUNT(DISTINCT b.business_id) AS number_of_shopping_businesses FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Shopping';
SELECT c.category_name FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id WHERE bc.business_id = 1;
SELECT COUNT(DISTINCT b.business_id)  FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.active = 'true' AND c.category_name = 'Food';
SELECT COUNT(DISTINCT b.business_id)  FROM Business b  JOIN Business_Categories bc ON b.business_id = bc.business_id  JOIN Categories c ON bc.category_id = c.category_id  WHERE b.city = 'Anthem' AND c.category_name = 'Food';
SELECT b.business_id FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Elite e ON b.business_id = e.user_id WHERE bc.category_id = (SELECT category_id FROM Categories WHERE category_name = 'Food') ORDER BY b.stars DESC LIMIT 1;
SELECT COUNT(DISTINCT b.business_id) AS number_of_businesses FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE c.category_name = 'Food' AND a.attribute_name = 'Good for Kids' AND ba.attribute_value = 'true';
SELECT COUNT(DISTINCT r.business_id)  FROM Reviews r  JOIN Business b ON r.business_id = b.business_id  WHERE b.state = 'AZ' AND r.user_id = 3;
SELECT c.category_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.state = 'AZ';
SELECT      TIMEDIFF(BH.closing_time, BH.opening_time) AS open_duration FROM      Business_Hours BH JOIN      Days D ON BH.day_id = D.day_id WHERE      BH.business_id = 1 AND D.day_of_week = 'Tuesday';
SELECT opening_time  FROM Business_Hours  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business_Hours.business_id = 1 AND Days.day_of_week = 'Tuesday';
SELECT COUNT(DISTINCT b.business_id)  FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE d.day_of_week = 'Monday'  AND bh.closing_time IN ('9PM', '10PM', '11PM', '12PM');
SELECT bh.opening_time FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id WHERE bh.day_id = (SELECT day_id FROM Days WHERE day_of_week = 'Monday') AND b.city = 'Anthem' AND b.active = 'true';
SELECT COUNT(DISTINCT b.business_id)  FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE b.state = 'AZ' AND bh.closing_time = '12PM' AND d.day_of_week = 'Sunday';
SELECT c.category_name FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Categories c ON b.business_id = bc.business_id JOIN Business_Categories bc ON b.business_id = bc.business_id WHERE bh.closing_time = '12PM' AND bh.day_id = (SELECT day_id FROM Days WHERE day_of_week = 'Sunday');
SELECT COUNT(DISTINCT b.business_id)  FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id JOIN Business_Hours bh ON b.business_id = bh.business_id WHERE a.attribute_name = 'Good for Kids'  AND ba.attribute_value = 'true' GROUP BY b.business_id HAVING COUNT(DISTINCT bh.day_id) = 7;
SELECT COUNT(*) AS elite_users_same_year FROM Elite e JOIN Users u ON e.user_id = u.user_id WHERE u.user_yelping_since_year = e.year_id;
SELECT MAX(TIMESTAMPDIFF(MINUTE, bh.opening_time, bh.closing_time)) AS longest_business_time FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE bh.day_id = (SELECT day_id FROM Days WHERE day_of_week = 'Monday') AND c.category_name = 'Shopping';
SELECT b.business_id FROM Business_Hours bh JOIN Days d ON bh.day_id = d.day_id WHERE d.day_of_week = 'Sunday'  AND (TIMESTAMPDIFF(HOUR, bh.opening_time, bh.closing_time) > 12);
SELECT COUNT(DISTINCT r.user_id) AS elite_user_count FROM Reviews r JOIN Elite e ON r.user_id = e.user_id WHERE r.business_id = 1;
SELECT COUNT(DISTINCT e.user_id) AS elite_user_count FROM Elite e JOIN Users u ON e.user_id = u.user_id WHERE u.user_review_count > 10;
SELECT business_id FROM Business WHERE state = 'AZ' GROUP BY business_id ORDER BY COUNT(Reviews.business_id) DESC LIMIT 1;
SELECT AVG(review_stars) AS average_stars FROM Reviews r JOIN Business b ON r.business_id = b.business_id WHERE b.city = 'Anthem';
SELECT AVG(r.review_stars) AS average_stars FROM Reviews r JOIN Business b ON r.business_id = b.business_id WHERE r.user_id = 3 AND b.state = 'AZ';
SELECT AVG(DIVIDE(SUBTRACT(BH.closing_time, BH.opening_time), 2)) AS average_business_time FROM Business_Hours BH JOIN Days D ON BH.day_id = D.day_id WHERE BH.business_id = 1 AND (D.day_of_week = 'Saturday' OR D.day_of_week = 'Sunday');
SELECT DIVIDE(SUM(b.stars), COUNT(b.business_id)) AS average_elite_star_rating FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE bh.closing_time = '12PM' AND d.day_of_week = 'Sunday';
SELECT COUNT(*) FROM Business WHERE city = 'Casa Grande';
SELECT COUNT(*) AS total_active_businesses FROM Business WHERE active = 'true' AND state = 'AZ' AND review_count < (SELECT AVG(review_count) FROM Business);
SELECT business_id  FROM Business  WHERE stars >= 2 AND stars < 4 AND city = 'Mesa';
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year >= 2011 AND user_yelping_since_year < 2014 AND user_fans > 0;
SELECT review_length  FROM Reviews  WHERE user_id = 35026 AND business_id = 2;
SELECT a.attribute_name FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.city = 'Chandler' AND b.review_count = (     SELECT MIN(review_count)     FROM Business     WHERE city = 'Chandler' );
SELECT COUNT(DISTINCT b.business_id) AS business_count FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Mexican' AND b.stars < 4;
SELECT b.business_id, b.stars FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.active = 'true' AND c.category_name = 'Fashion';
SELECT c.category_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.stars = (SELECT MAX(stars) FROM Business)
SELECT c.category_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.business_id BETWEEN 6 AND 9 AND b.stars = (     SELECT MAX(stars)     FROM Business     WHERE business_id BETWEEN 6 AND 9     AND LENGTH(b.review_length) = (         SELECT LENGTH(review_length)         FROM Reviews         WHERE business_id = b.business_id         ORDER BY LENGTH(review_length) ASC         LIMIT 1 OFFSET (SELECT COUNT(*) FROM Reviews WHERE business_id = b.business_id) / 2     ) );
SELECT COUNT(DISTINCT b.business_id) AS active_business_count FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.active = 'true'  AND a.attribute_name = 'Caters'  AND b.review_count < (SELECT AVG(review_count) FROM Business WHERE active = 'true');
SELECT bh.opening_time, bh.closing_time FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id WHERE b.city = 'Tempe' AND b.stars = (SELECT MAX(stars) FROM Business WHERE city = 'Tempe');
SELECT c.category_name, a.attribute_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.active = 'true'    AND b.city = 'Chandler'    AND b.state = 'AZ'    AND b.review_count BETWEEN 50 AND 200; -- Assuming medium review count is between 50 and 200
SELECT c.category_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.active = 'true' AND b.city = 'Surprise' AND b.state = 'AZ';
SELECT b.city, b.state FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE bh.opening_time = '8AM' AND bh.closing_time = '9PM' AND d.day_of_week = 'Friday';
SELECT ba.attribute_value FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id WHERE b.active = 'true'    AND b.review_count > (SELECT AVG(review_count) FROM Business)    AND b.stars = 3    AND b.city = 'Mesa'    AND b.state = 'AZ';
SELECT bh.opening_time FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id WHERE b.active = 'true'    AND b.city = 'Chandler'    AND b.review_count BETWEEN 50 AND 200; -- Assuming medium review count is between 50 and 200
SELECT      (COUNT(CASE WHEN B.stars < 4 THEN 1 END) * 100.0 / COUNT(B.business_id)) AS percentage_less_than_4_stars FROM      Business B JOIN      Business_Categories BC ON B.business_id = BC.business_id JOIN      Categories C ON BC.category_id = C.category_id WHERE      C.category_name = 'Accessories';
SELECT bh.closing_time, d.day_of_week FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE b.active = 'true'    AND b.city = 'Tempe'    AND b.stars > (SELECT SUM(stars) / COUNT(business_id) * 0.7 FROM Business);
SELECT COUNT(*)  FROM Business  WHERE active = 'true' AND city = 'Phoenix' AND state = 'Arizona';
SELECT COUNT(*)  FROM Business  WHERE review_count = 'High';
SELECT COUNT(DISTINCT ba.business_id) AS business_count FROM Business_Attributes ba WHERE ba.attribute_id = (SELECT attribute_id FROM Attributes WHERE attribute_name = 'beer_and_wine');
SELECT COUNT(attribute_id) AS attribute_count FROM Business_Attributes WHERE business_id = 2;
SELECT COUNT(DISTINCT uc.user_id) AS high_compliment_users FROM Users_Compliments uc WHERE uc.number_of_compliments = 'High' AND uc.compliment_id = 1;
SELECT COUNT(DISTINCT b.business_id) AS business_count FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.city = 'Phoenix' AND b.state = 'Arizona' AND a.attribute_name = 'waiter_services';
SELECT b.business_id, b.active, b.city, b.state, a.attribute_name FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE bh.opening_time = bh.closing_time GROUP BY b.business_id, a.attribute_name HAVING COUNT(bh.day_id) = 7;
SELECT b.business_id, b.active, b.city, b.state, b.stars, b.review_count FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Reviews r ON b.business_id = r.business_id WHERE c.category_name = 'Fashion' GROUP BY b.business_id ORDER BY COUNT(r.user_id) DESC LIMIT 1;
SELECT c.category_name, AVG(r.review_stars) AS average_review FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Reviews r ON b.business_id = r.business_id WHERE b.state = 'AZ' AND b.review_count >= 3 GROUP BY c.category_name ORDER BY average_review DESC;
SELECT      (SELECT COUNT(user_id) FROM Users WHERE user_average_stars = 5 AND user_id IN (SELECT user_id FROM Elite WHERE year_id = 2013)) * 1.0 /     (SELECT COUNT(user_id) FROM Users WHERE user_average_stars = 1 AND user_id IN (SELECT user_id FROM Elite WHERE year_id = 2013)) AS ratio
SELECT      y.actual_year,     (COUNT(CASE WHEN e.year_id < 2015 THEN e.user_id END) * 100.0 / NULLIF(COUNT(CASE WHEN e.year_id = 2015 THEN e.user_id END), 0)) AS increment_percentage FROM      Elite e JOIN      Years y ON e.year_id = y.year_id WHERE      y.actual_year BETWEEN 2005 AND 2014 GROUP BY      y.actual_year ORDER BY      y.actual_year;
SELECT COUNT(DISTINCT r.business_id) AS reviewed_business_count,        (YEAR(CURRENT_DATE) - u.user_yelping_since_year) AS years_with_yelp FROM Reviews r JOIN Users u ON r.user_id = u.user_id WHERE u.user_id = 3;
SELECT      COUNT(business_id) / (YEAR(CURRENT_TIMESTAMP) - u.user_yelping_since_year) AS yearly_average_review FROM      Reviews r JOIN      Users u ON r.user_id = u.user_id WHERE      u.user_id = 3;
SELECT b.business_id, AVG(r.review_count) AS average_reviews FROM Business b JOIN Reviews r ON b.business_id = r.business_id JOIN Elite e ON r.user_id = e.user_id GROUP BY b.business_id;
SELECT u.user_id, u.user_average_stars, SUM(t.likes) AS total_likes FROM Elite e JOIN Users u ON e.user_id = u.user_id LEFT JOIN Tips t ON u.user_id = t.user_id GROUP BY u.user_id HAVING COUNT(e.year_id) >= 5;
WITH HotelTravelBusinesses AS (     SELECT b.business_id, b.stars, COUNT(r.review_stars) AS review_count     FROM Business b     JOIN Business_Categories bc ON b.business_id = bc.business_id     JOIN Categories c ON bc.category_id = c.category_id     LEFT JOIN Reviews r ON b.business_id = r.business_id     WHERE c.category_name = 'Hotel & Travel'     GROUP BY b.business_id, b.stars ), MaxReviewBusiness AS (     SELECT business_id, review_count     FROM HotelTravelBusinesses     WHERE review_count = (SELECT MAX(review_count) FROM HotelTravelBusinesses) ) SELECT business_id,         STDDEV(review_stars) AS stddev_review_stars FROM Reviews WHERE business_id IN (SELECT business_id FROM MaxReviewBusiness) GROUP BY business_id;
SELECT      AVG(r.review_stars) AS average_review_stars,     AVG(b.stars) AS average_business_stars FROM      Reviews r JOIN      Business b ON r.business_id = b.business_id GROUP BY      b.business_id HAVING      COUNT(r.user_id) = (SELECT MAX(review_count) FROM Business);
SELECT COUNT(*) AS active_business_count FROM Business WHERE active = 'true';
SELECT business_id  FROM Business  WHERE city = 'Phoenix' AND review_count = 'Low';
SELECT COUNT(*) AS total_active_business FROM Business WHERE active = 'true' AND state = 'AZ' AND review_count = 'High';
SELECT business_id  FROM Business  WHERE stars >= 3 AND stars < 5 AND city = 'Tempe';
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year >= '2010' AND user_yelping_since_year < '2013' AND user_fans = 'Low';
SELECT review_length  FROM Reviews  WHERE user_id = 60776 AND business_id = 1;
SELECT a.attribute_name FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.city = 'Scottsdale' AND b.review_count = 'High';
SELECT COUNT(DISTINCT b.business_id) AS count_below_3_stars FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Automotive' AND b.stars < 3;
SELECT b.business_id, b.stars FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.active = 'true' AND c.category_name = 'Pets';
SELECT a.attribute_name FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE ba.business_id = (     SELECT business_id     FROM Business     ORDER BY stars DESC     LIMIT 1 );
SELECT c.category_name FROM Business b JOIN Reviews r ON b.business_id = r.business_id JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE r.review_length = 'Short'    AND b.business_id BETWEEN 5 AND 10   AND r.review_stars = (SELECT MAX(review_stars)                          FROM Reviews                          WHERE business_id BETWEEN 5 AND 10                            AND review_length = 'Short') LIMIT 1;
SELECT COUNT(DISTINCT b.business_id) AS active_business_count FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.active = 'true'    AND a.attribute_name = 'Wi-Fi'    AND b.review_count = 'Medium';
SELECT bh.opening_time, bh.closing_time FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id WHERE b.city = 'Gilbert' AND b.stars = (SELECT MAX(stars) FROM Business WHERE city = 'Gilbert');
SELECT c.category_name, a.attribute_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.active = 'true'    AND b.city = 'Mesa'    AND b.state = 'AZ'    AND b.review_count = 'Low';
SELECT c.category_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.active = 'FALSE' AND b.state = 'AZ';
SELECT DISTINCT b.city FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE bh.opening_time = '9AM' AND bh.closing_time = '9PM' AND d.day_of_week = 'Saturday';
SELECT ba.attribute_value FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id WHERE b.active = 'FALSE'   AND b.city = 'Phoenix'   AND b.state = 'AZ'   AND b.stars = 3.5   AND b.review_count = 'Medium';
SELECT bh.opening_time FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id WHERE b.active = 'true' AND b.city = 'Surprise' AND b.review_count = 'Low';
SELECT      (COUNT(CASE WHEN b.stars < 3 THEN 1 END) * 100.0 / COUNT(b.business_id)) AS percentage FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id WHERE      c.category_name = 'Local Services';
SELECT bh.closing_time, d.day_of_week FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE b.active = 'true'   AND b.city = 'Scottsdale'   AND b.stars > (SELECT AVG(stars) * 0.6 FROM Business);
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year = 2014 AND user_fans = 0;
SELECT u.user_id FROM Users u JOIN Users_Compliments uc ON u.user_id = uc.user_id WHERE uc.number_of_compliments < 5 LIMIT 5;
SELECT user_id  FROM Users  WHERE user_average_stars = 4  LIMIT 10;
SELECT b.city FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE bh.opening_time = '10AM' AND bh.closing_time = '12PM' AND d.day_of_week = 'Sunday';
SELECT COUNT(DISTINCT ba.business_id) AS businesses_open_24_hours FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'Open 24 Hours' AND ba.attribute_value = 'true';
SELECT DISTINCT ba.business_id FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id JOIN Business b ON ba.business_id = b.business_id WHERE b.active = true  AND a.attribute_name IN ('Good for Groups', 'Good for Dancing') GROUP BY ba.business_id HAVING COUNT(DISTINCT a.attribute_name) = 2 LIMIT 5;
SELECT b.business_id FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE b.active = 'true' AND b.city = 'Ahwatukee' AND d.day_of_week = 'Sunday';
SELECT c.category_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.active = 'true' AND b.state != 'AZ';
SELECT c.category_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.review_count = 'High' AND b.stars = 2;
SELECT COUNT(DISTINCT ba.business_id) AS romantic_business_count FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'ambience_romantic' AND ba.attribute_value = 'true';
SELECT b.city FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE bh.opening_time = '1PM' AND bh.closing_time = '6PM' AND d.day_of_week = 'Saturday';
SELECT SUM(u.user_fans) AS total_fans FROM Users u JOIN Tips t ON u.user_id = t.user_id WHERE t.likes = (SELECT MAX(likes) FROM Tips);
SELECT DISTINCT b.city FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id JOIN Checkins c ON b.business_id = c.business_id WHERE bh.opening_time = '12AM'    AND bh.closing_time = '1AM'    AND d.day_of_week = 'Saturday';
SELECT COUNT(DISTINCT b.business_id) AS number_of_businesses FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Shopping Centers' AND b.review_count = 'High';
SELECT COUNT(DISTINCT ba.business_id) AS businesses_accepting_insurance FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'Accepts Insurance' AND ba.attribute_value = 'true';
SELECT AVG(r.review_stars) AS average_review_stars FROM Reviews r JOIN Business b ON r.business_id = b.business_id WHERE b.state IN ('South Carolina', 'California');
SELECT      (SELECT COUNT(b.business_id)       FROM Business b       JOIN Business_Hours bh ON b.business_id = bh.business_id       JOIN Days d ON bh.day_id = d.day_id       WHERE d.day_of_week = 'Monday'       AND bh.opening_time = '10AM'       AND bh.closing_time = '9PM') -     (SELECT COUNT(b.business_id)       FROM Business b       JOIN Business_Hours bh ON b.business_id = bh.business_id       JOIN Days d ON bh.day_id = d.day_id       WHERE d.day_of_week = 'Tuesday'       AND bh.opening_time = '10AM'       AND bh.closing_time = '9PM') AS difference;
SELECT attribute_id FROM Attributes WHERE attribute_name = 'Accepts Insurance';
SELECT COUNT(*)  FROM Business  WHERE active = 'true' AND city = 'Phoenix';
SELECT COUNT(*)  FROM Business  WHERE stars = 4 AND city = 'Mesa';
SELECT COUNT(*)  FROM Business  WHERE city = 'Gilbert' AND review_count = 'High';
SELECT business_id  FROM Business  WHERE active = 'true' AND city = 'Gilbert'  ORDER BY review_count DESC  LIMIT 1;
SELECT COUNT(*) AS long_review_count FROM Reviews r JOIN Business b ON r.business_id = b.business_id WHERE b.city = 'Tempe' AND b.stars = 3.5 AND b.review_count = 'Uber' AND r.review_length = 'Long';
SELECT ba.attribute_value  FROM Business_Attributes ba  JOIN Business b ON ba.business_id = b.business_id  WHERE b.city = 'Mesa'  AND b.review_count = (SELECT review_count FROM Business WHERE business_id = (SELECT business_id FROM Business WHERE city = 'Mesa' LIMIT 1))  AND ba.attribute_id = (SELECT attribute_id FROM Attributes WHERE attribute_name = 'Noise Level');
SELECT ba.attribute_value  FROM Business_Attributes ba  JOIN Attributes a ON ba.attribute_id = a.attribute_id  WHERE ba.business_id = 14033 AND a.attribute_name = 'good_for_dinner';
SELECT opening_time, closing_time  FROM Business_Hours  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business_Hours.business_id = '15098' AND Days.day_of_week = 'Monday';
SELECT DISTINCT b.business_id FROM Reviews r JOIN Business b ON r.business_id = b.business_id WHERE r.review_stars = 5    AND r.review_votes_funny = 'Uber'    AND b.city = 'Phoenix';
SELECT b.city  FROM Tips t  JOIN Business b ON t.business_id = b.business_id  WHERE t.tip_length = 'Medium' AND t.likes = 3;
SELECT SUM(uc.number_of_compliments) AS funny_compliments FROM Users u JOIN Users_Compliments uc ON u.user_id = uc.user_id JOIN Compliments c ON uc.compliment_id = c.compliment_id WHERE u.user_yelping_since_year = '2010'   AND u.user_average_stars = '4.5'   AND c.compliment_type = 'funny';
SELECT SUM(number_of_compliments) AS cool_compliments FROM Users_Compliments JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id WHERE Users_Compliments.user_id = 41717 AND Compliments.compliment_type = 'cool';
SELECT COUNT(*) > 0 AS has_parking_lot FROM Business_Attributes WHERE business_id = '12476' AND attribute_value = 'parking_lot';
SELECT COUNT(*) > 0 AS is_mastercard_payment_possible FROM Business_Attributes WHERE business_id = '12476' AND attribute_value = 'payment_types_mastercard';
SELECT      (COUNT(CASE WHEN c.category_name = 'Pets' THEN 1 END) * 100.0 / COUNT(b.business_id)) AS percentage FROM      Business b LEFT JOIN      Business_Categories bc ON b.business_id = bc.business_id LEFT JOIN      Categories c ON bc.category_id = c.category_id;
SELECT      DIVIDE(         (SELECT COUNT(DISTINCT b.business_id)           FROM Business b           JOIN Business_Categories bc ON b.business_id = bc.business_id           JOIN Categories c ON bc.category_id = c.category_id           WHERE c.category_name = 'Women''s Clothing'),         (SELECT COUNT(DISTINCT b.business_id)           FROM Business b           JOIN Business_Categories bc ON b.business_id = bc.business_id           JOIN Categories c ON bc.category_id = c.category_id           WHERE c.category_name = 'Men''s Clothing')     ) AS ratio;
SELECT business_id, active, city  FROM Business  WHERE state = 'CA';
SELECT (COUNT(CASE WHEN active = 'true' THEN 1 END) * 100.0 / COUNT(business_id)) AS running_business_percentage FROM Business;
SELECT attribute_id, attribute_name  FROM Attributes  WHERE attribute_name LIKE 'music%';
SELECT year_id, COUNT(user_id) AS elite_user_count FROM Elite WHERE year_id BETWEEN 2006 AND 2007 GROUP BY year_id ORDER BY elite_user_count DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN uc.number_of_compliments = 'Low' THEN 1 END) * 100.0) / COUNT(uc.user_id) AS low_compliments_percentage FROM      Users_Compliments uc;
SELECT business_id, user_id  FROM Reviews  WHERE review_votes_cool = 'Uber';
SELECT u.user_id, t.business_id, t.tip_length FROM Users u JOIN Tips t ON u.user_id = t.user_id WHERE u.user_yelping_since_year = '2004' AND u.user_fans = 'High';
SELECT b.business_id, b.active, r.user_id, u.user_yelping_since_year FROM Reviews r JOIN Business b ON r.business_id = b.business_id JOIN Users u ON r.user_id = u.user_id WHERE r.review_votes_funny = 'Uber' AND r.review_votes_cool = 'Uber' AND r.review_length > 0;
SELECT ba.attribute_id, ba.business_id, b.city, b.active FROM Business_Attributes ba JOIN Business b ON ba.business_id = b.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'music_playlist';
SELECT      (COUNT(CASE WHEN a.attribute_name = 'Accepts Credit Cards' THEN 1 END) * 100.0) / COUNT(b.business_id) AS percentage FROM      Business b LEFT JOIN      Business_Attributes ba ON b.business_id = ba.business_id LEFT JOIN      Attributes a ON ba.attribute_id = a.attribute_id;
SELECT r.user_id, r.review_length FROM Reviews r JOIN Business b ON r.business_id = b.business_id WHERE b.active = 'false' AND b.city = 'San Tan Valley' AND r.review_stars = 5;
SELECT u.user_average_stars, e.year_id, c.compliment_type FROM Users u JOIN Elite e ON u.user_id = e.user_id JOIN Users_Compliments uc ON u.user_id = uc.user_id JOIN Compliments c ON uc.compliment_id = c.compliment_id WHERE u.user_id = 6027 AND uc.number_of_compliments = 'Uber';
SELECT b.business_id, b.state, b.city FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Coffee & Tea' LIMIT 5;
SELECT c.category_name FROM Categories c JOIN Business_Categories bc ON c.category_id = bc.category_id GROUP BY c.category_id HAVING (COUNT(bc.business_id) * 100.0 / (SELECT COUNT(*) FROM Business)) > 10;
SELECT r.user_id, u.user_fans FROM Reviews r JOIN Business b ON r.business_id = b.business_id JOIN Users u ON r.user_id = u.user_id WHERE b.city = 'Sun Lakes' AND b.stars = 5;
SELECT      c.category_name,      COUNT(b.business_id) AS business_count FROM      Categories c JOIN      Business_Categories bc ON c.category_id = bc.category_id JOIN      Business b ON bc.business_id = b.business_id WHERE      c.category_name IN ('Men''s Clothing', 'Women''s Clothing') GROUP BY      c.category_name;
SELECT c.compliment_type, SUM(uc.number_of_compliments) AS total_compliments, u.user_fans FROM Users_Compliments uc JOIN Compliments c ON uc.compliment_id = c.compliment_id JOIN Users u ON uc.user_id = u.user_id WHERE u.user_id < 100 AND uc.number_of_compliments = 'Uber' GROUP BY c.compliment_type, u.user_fans ORDER BY total_compliments DESC LIMIT 1;
SELECT b.business_id, b.active, b.city, b.state, b.stars, b.review_count FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id WHERE bh.closing_time = '8PM';
SELECT COUNT(*)  FROM Business  WHERE stars = 2 AND city = 'Phoenix' AND state = 'AZ';
SELECT COUNT(*)  FROM Business  WHERE city = 'Tempe' AND stars > 3;
SELECT * FROM Users WHERE user_average_stars < 3 AND user_yelping_since_year = 2012;
SELECT (COUNT(CASE WHEN stars = 5 THEN 1 END) * 100.0 / COUNT(business_id)) AS percentage_of_5_stars FROM Business;
SELECT      (SELECT COUNT(*) FROM Reviews GROUP BY business_id ORDER BY COUNT(*) DESC LIMIT 1) -     (SELECT COUNT(*) FROM Reviews GROUP BY business_id ORDER BY COUNT(*) ASC LIMIT 1) AS review_difference;
SELECT b.business_id, b.city, b.state FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Business_Hours bh ON b.business_id = bh.business_id GROUP BY b.business_id, b.city, b.state HAVING c.category_name = 'Tires' AND COUNT(DISTINCT bh.opening_time) = 7;
SELECT user_id  FROM Elite  WHERE year_id = (SELECT year_id FROM Years WHERE actual_year = 2012);
SELECT b.business_id FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Shopping' AND b.stars = 4;
SELECT COUNT(DISTINCT business_id) AS low_checkins_sunday_10am FROM Checkins JOIN Days ON Checkins.day_id = Days.day_id WHERE Days.day_of_week = 'Sunday' AND Checkins.label_time_10 = 'Low';
SELECT COUNT(DISTINCT r.business_id)  FROM Reviews r  JOIN Business b ON r.business_id = b.business_id  WHERE b.city = 'Glendale' AND r.user_id = 20241;
SELECT DISTINCT b.city FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Pet Services';
SELECT COUNT(*)  FROM Users_Compliments uc JOIN Compliments c ON uc.compliment_id = c.compliment_id JOIN Reviews r ON uc.user_id = r.user_id WHERE c.compliment_type = 'photos' AND r.review_votes_cool = 'High';
SELECT COUNT(*)  FROM Business  WHERE active = 'false'  AND business_id IN (     SELECT business_id      FROM Business_Attributes      GROUP BY business_id      HAVING COUNT(attribute_id) > 10 );
SELECT b.business_id, b.active, b.city, b.state, b.stars, b.review_count FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.city = 'Mesa' AND a.attribute_name = 'Alcohol';
SELECT      (COUNT(CASE WHEN review_votes_funny = 'Low' THEN business_id END) * 100.0 / COUNT(business_id)) AS percentage_low_funny_votes FROM      Reviews r JOIN      Business b ON r.business_id = b.business_id WHERE      b.city = 'Phoenix';
SELECT      (SELECT COUNT(b.business_id)       FROM Business b       JOIN Business_Categories bc ON b.business_id = bc.business_id       JOIN Categories c ON bc.category_id = c.category_id       WHERE c.category_name = 'Shopping') * 1.0 /      (SELECT COUNT(b.business_id)       FROM Business b       JOIN Business_Categories bc ON b.business_id = bc.business_id       JOIN Categories c ON bc.category_id = c.category_id       WHERE c.category_name = 'Pets') AS ratio;
SELECT COUNT(DISTINCT b.business_id) AS number_of_businesses FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Banks & Credit Unions';
SELECT COUNT(*)  FROM Business  WHERE active = 'true' AND city = 'Casa Grande';
SELECT opening_time  FROM Business_Hours  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business_Hours.business_id = 12 AND Days.day_of_week = 'Monday';
SELECT COUNT(DISTINCT ba.business_id) AS business_count FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'Good for Kids' AND ba.attribute_value = 'true';
SELECT business_id, stars, review_count FROM Business WHERE active = 'true' AND city = 'Gilbert' AND review_count = 'High' ORDER BY stars DESC LIMIT 1;
SELECT b.business_id, b.stars, c.category_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.stars = 5 AND b.city = 'Ahwatukee' AND b.state = 'AZ';
SELECT      (COUNT(CASE WHEN stars > 3 THEN business_id END) * 100.0 / COUNT(business_id)) AS percent_wonderful_experience FROM      Business WHERE      active = 'false' AND city = 'Avondale';
SELECT u.user_id,         CASE WHEN e.user_id IS NOT NULL THEN 'Yes' ELSE 'No' END AS is_elite FROM Users u LEFT JOIN Elite e ON u.user_id = e.user_id WHERE u.user_yelping_since_year = 2004;
SELECT      (COUNT(CASE WHEN review_length = 'Long' THEN business_id END) * 100.0 / COUNT(business_id)) AS percent_long_reviews FROM      Reviews WHERE      review_stars = 5;
SELECT      (COUNT(CASE WHEN user_fans = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percent_no_fans FROM      Users WHERE      user_average_stars >= 4;
SELECT COUNT(*)  FROM Tips  WHERE business_id = 2 AND tip_length = 'Short';
SELECT user_id FROM Users WHERE user_average_stars = 5 ORDER BY user_yelping_since_year ASC LIMIT 1;
SELECT bh.business_id, bh.opening_time, bh.closing_time FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id WHERE b.city = 'Black Canyon City'  AND b.review_count > (SELECT AVG(review_count) FROM Business);
SELECT      (COUNT(CASE WHEN uc.compliment_id = (SELECT compliment_id FROM Compliments WHERE compliment_type = 'cute') THEN uc.user_id END) * 100.0) / COUNT(uc.user_id) AS percent_cute_compliments FROM      Users_Compliments uc WHERE      uc.number_of_compliments = 'High';
SELECT COUNT(DISTINCT b.business_id) AS businesses_with_no_attributes FROM Business b LEFT JOIN Business_Attributes ba ON b.business_id = ba.business_id WHERE ba.attribute_value IN ('none', 'no', 'false') OR ba.business_id IS NULL;
SELECT opening_time, closing_time  FROM Business_Hours  WHERE business_id = 1 AND day_id = 2;
SELECT DISTINCT b.city FROM Business b JOIN Reviews r ON b.business_id = r.business_id WHERE r.review_length = 'Medium';
SELECT closing_time  FROM Business_Hours  WHERE business_id = 4  AND day_id = (SELECT day_id FROM Days WHERE day_of_week = 'Sunday');
SELECT b.business_id, b.city, b.state, r.review_length FROM Business b JOIN Reviews r ON b.business_id = r.business_id WHERE r.review_length = 'Short' AND b.city = 'Phoenix';
SELECT COUNT(DISTINCT uc.user_id) AS high_compliment_users FROM Users_Compliments uc JOIN Users u ON uc.user_id = u.user_id WHERE u.user_fans = 'Medium' AND uc.number_of_compliments = 'High';
SELECT DISTINCT u.user_id FROM Users u JOIN Users_Compliments uc ON u.user_id = uc.user_id WHERE uc.number_of_compliments = 'Low' AND u.user_yelping_since_year = 2012;
SELECT COUNT(*)  FROM Business  WHERE business_id NOT IN (SELECT business_id FROM Business_Attributes WHERE attribute_value <> 'None')  AND city = 'Gilbert';
SELECT COUNT(DISTINCT b.business_id) AS business_count FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id WHERE ba.attribute_value = 'full_bar' AND b.stars = (SELECT AVG(stars) FROM Business);
SELECT DISTINCT b.state FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id WHERE bh.opening_time = '01:00:00';
SELECT c.category_name  FROM Categories c JOIN Business_Categories bc ON c.category_id = bc.category_id WHERE bc.business_id = 5;
SELECT uc.user_id FROM Users_Compliments uc JOIN Compliments c ON uc.compliment_id = c.compliment_id WHERE c.compliment_type = 'photos';
SELECT      (COUNT(CASE WHEN tip_length = 'Medium' THEN 1 END) * 100.0 / COUNT(*)) AS medium_tip_percentage,     user_yelping_since_year FROM      Tips  JOIN      Users ON Tips.user_id = Users.user_id GROUP BY      user_yelping_since_year;
SELECT      (COUNT(CASE WHEN city = 'Mesa' THEN 1 END) * 100.0 / COUNT(*)) AS percentage,     ba.attribute_value FROM      Business b JOIN      Business_Attributes ba ON b.business_id = ba.business_id GROUP BY      ba.attribute_value;
SELECT DISTINCT b.state FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id WHERE bh.closing_time = '00:00:00';
SELECT COUNT(DISTINCT b.business_id)  FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id WHERE ba.attribute_value = 'beer_and_wine' AND b.city = 'Peoria';
SELECT u.user_id, MIN(u.user_yelping_since_year) AS earliest_join_year FROM Users u JOIN Users_Compliments uc ON u.user_id = uc.user_id WHERE uc.number_of_compliments = 'High' GROUP BY u.user_id ORDER BY earliest_join_year ASC;
SELECT business_id FROM Reviews GROUP BY business_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year_id, COUNT(user_id) AS elite_user_count FROM Elite GROUP BY year_id ORDER BY elite_user_count DESC LIMIT 1;
SELECT COUNT(DISTINCT business_id)  FROM Reviews  WHERE review_stars = 5 AND review_votes_funny = 'uber';
SELECT COUNT(DISTINCT u.user_id) AS uber_funny_votes_users FROM Users u JOIN Reviews r ON u.user_id = r.user_id WHERE r.review_votes_funny = 'uber' AND u.user_fans > 0;
SELECT business_id FROM Business_Hours ORDER BY (closing_time - opening_time) ASC LIMIT 1;
SELECT business_id  FROM Business_Hours  WHERE day_id BETWEEN 1 AND 7  GROUP BY business_id  HAVING COUNT(*) = 7 AND MIN(opening_time) = MAX(closing_time);
SELECT      AVG(tip_length) AS average_tip_length,      AVG(likes) AS average_likes FROM      Tips t JOIN      Business b ON t.business_id = b.business_id JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id WHERE      c.category_name = 'Hotels & Travel' GROUP BY      tip_length ORDER BY      tip_length;
SELECT u.user_id, u.user_average_stars FROM Users u JOIN Reviews r ON u.user_id = r.user_id WHERE r.review_votes_funny = 'uber'    AND r.review_votes_useful = 'uber'    AND r.review_votes_cool = 'uber' GROUP BY u.user_id, u.user_average_stars HAVING COUNT(DISTINCT r.business_id) = (SELECT COUNT(DISTINCT business_id) FROM Reviews);
SELECT      DIVIDE(         COUNT(CASE WHEN b.stars BETWEEN 3.5 AND 5 THEN 1 END),          COUNT(CASE WHEN b.stars BETWEEN 1 AND 2.5 THEN 1 END)     ) AS good_to_bad_ratio FROM      Business b JOIN      Business_Hours bh ON b.business_id = bh.business_id WHERE      bh.day_id BETWEEN 1 AND 7      AND bh.opening_time = bh.closing_time;
SELECT b.business_id, COUNT(r.user_id) AS review_count FROM Reviews r JOIN Business b ON r.business_id = b.business_id GROUP BY b.business_id ORDER BY review_count DESC LIMIT 10;  SELECT c.category_name FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id GROUP BY c.category_name ORDER BY COUNT(bc.business_id) DESC LIMIT 3;
SELECT COUNT(DISTINCT b.business_id)  FROM Business b  JOIN Reviews r ON b.business_id = r.business_id  WHERE b.state = 'Arizona'  GROUP BY b.business_id  HAVING AVG(r.review_stars) < 3.0;
SELECT      (COUNT(u.user_id) - COUNT(e.user_id)) * 100.0 / COUNT(u.user_id) AS percentage FROM      Users u LEFT JOIN      Elite e ON u.user_id = e.user_id;
SELECT c.compliment_type, COUNT(uc.compliment_id) AS compliment_count FROM Users u JOIN Users_Compliments uc ON u.user_id = uc.user_id JOIN Compliments c ON uc.compliment_id = c.compliment_id WHERE u.user_fans = 'uber' GROUP BY c.compliment_type ORDER BY compliment_count DESC LIMIT 1;
SELECT AVG(user_yelping_since_year)  FROM Users  WHERE user_fans = 'uber';
SELECT AVG(u.user_yelping_since_year) AS average_year_to_elite FROM Users u JOIN Elite e ON u.user_id = e.user_id;
SELECT      COUNT(b.business_id) AS businesses_opened_more_than_8_hours,     (COUNT(CASE WHEN b.active = 'true' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_active_businesses FROM      Business b JOIN      Business_Hours bh ON b.business_id = bh.business_id WHERE      b.city = 'Mesa'      AND (bh.closing_time - bh.opening_time) > 8;
SELECT C.category_name FROM Business B JOIN Business_Categories BC ON B.business_id = BC.business_id JOIN Categories C ON BC.category_id = C.category_id JOIN Business_Hours BH ON B.business_id = BH.business_id WHERE B.active = 'true'  AND BH.opening_time >= '17:00'  AND B.city = 'Phoenix' GROUP BY C.category_name ORDER BY COUNT(B.business_id) DESC LIMIT 3;
SELECT user_id, COUNT(*) AS review_count FROM Reviews WHERE business_id IN (     SELECT business_id     FROM Business_Attributes     WHERE attribute_id = (SELECT attribute_id FROM Attributes WHERE attribute_name = 'Delivery') ) GROUP BY user_id ORDER BY review_count DESC LIMIT 1;
SELECT AVG(review_count) AS average_reviews FROM Business WHERE active = 'true' AND business_id IN (     SELECT business_id     FROM Business_Hours     GROUP BY business_id     HAVING SUM(TIMESTAMPDIFF(HOUR, opening_time, closing_time)) < 30 );
SELECT COUNT(DISTINCT business_id)  FROM Business_Hours  WHERE opening_time = '8AM' AND closing_time = '6PM';
SELECT business_id  FROM Business_Hours  WHERE opening_time = '10AM' AND day_id = 6;
SELECT business_id, day_id  FROM Business_Hours  WHERE opening_time = '8AM' AND closing_time = '6PM';
SELECT COUNT(business_id)  FROM Business  WHERE stars > 4;
SELECT c.category_name FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id JOIN Business_Hours bh ON bc.business_id = bh.business_id WHERE bh.day_id = 1;
SELECT bh.day_id, d.day_of_week, bh.opening_time FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Days d ON bh.day_id = d.day_id WHERE c.category_name = 'Pets';
SELECT bh.closing_time, bh.day_id FROM Business_Hours bh JOIN Business_Categories bc ON bh.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Doctors';
SELECT bc.category_id, c.category_name, COUNT(DISTINCT bh.day_id) AS working_days FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id JOIN Business_Hours bh ON bc.business_id = bh.business_id WHERE bh.day_id BETWEEN 2 AND 7 GROUP BY bc.category_id, c.category_name HAVING COUNT(DISTINCT bh.day_id) = (     SELECT MAX(working_days)     FROM (         SELECT COUNT(DISTINCT bh.day_id) AS working_days         FROM Business_Categories bc         JOIN Business_Hours bh ON bc.business_id = bh.business_id         WHERE bh.day_id BETWEEN 2 AND 7         GROUP BY bc.business_id     ) AS subquery );
SELECT bh.business_id FROM Business_Hours bh JOIN Days d ON bh.day_id = d.day_id JOIN Business_Categories bc ON bh.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE d.day_of_week = 'Sunday'    AND c.category_name = 'Arts & Entertainment';
SELECT COUNT(DISTINCT b.business_id)  FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'DJs' AND b.stars < 5;
SELECT b.business_id FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id WHERE b.active = 'true' AND bh.opening_time = '7AM' AND bh.closing_time = '8PM';
SELECT COUNT(*)  FROM Business b  JOIN Business_Categories bc ON b.business_id = bc.business_id  JOIN Categories c ON bc.category_id = c.category_id  WHERE c.category_name = 'Stadiums & Arenas'  AND b.stars = (SELECT MAX(stars) FROM Business WHERE business_id IN (SELECT business_id FROM Business_Categories WHERE category_id = (SELECT category_id FROM Categories WHERE category_name = 'Stadiums & Arenas')));
SELECT COUNT(DISTINCT bc.category_id) AS low_review_count_categories FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id WHERE b.review_count < 10 AND b.stars > 2;
SELECT b.business_id FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Business_Hours bh ON b.business_id = bh.business_id WHERE c.category_name = 'Accessories' AND bh.opening_time < '07:00:00';
SELECT COUNT(*)  FROM Business b  JOIN Business_Hours bh ON b.business_id = bh.business_id  WHERE b.state = 'Arizona' AND b.active = 'true' AND bh.opening_time > '12PM';
SELECT b.business_id, c.category_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Reviews r ON b.business_id = r.business_id WHERE r.user_id = 16328;
SELECT      b.business_id,      b.active,      b.city,      b.state,      b.stars,      b.review_count,     (COUNT(CASE WHEN b.stars < 2 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id WHERE      c.category_name = 'Food' GROUP BY      b.business_id, b.active, b.city, b.state, b.stars, b.review_count;
SELECT      (COUNT(B.business_id) * 100.0 / NULLIF(COUNT(B2.business_id), 0)) AS percentage FROM      Business B JOIN      Business_Categories BC ON B.business_id = BC.business_id JOIN      Business_Hours BH ON B.business_id = BH.business_id WHERE      BC.category_id = (SELECT category_id FROM Categories WHERE category_name = 'Food')     AND BH.opening_time = '7AM'      AND BH.closing_time = '8PM' JOIN      Business_Hours B2 ON B.business_id = B2.business_id WHERE      B2.opening_time = '7AM'      AND B2.closing_time = '8PM';
SELECT      CASE          WHEN b.review_count > 100 THEN 'High'         WHEN b.review_count BETWEEN 50 AND 100 THEN 'Medium'         ELSE 'Low'     END AS review_count_category,     COUNT(b.business_id) AS number_of_running_business FROM      Business b WHERE      b.active = 'true' AND      b.city = 'Cave Creek' GROUP BY      review_count_category;
SELECT AVG(user_id) AS average_user_id FROM Users WHERE user_yelping_since_year BETWEEN 2005 AND 2014;
SELECT      DIVIDE(         COUNT(CASE WHEN active = 'true' AND review_count = 'Low' THEN business_id END),          COUNT(CASE WHEN active = 'false' AND review_count = 'Low' THEN business_id END)     ) AS active_inactive_ratio FROM      Business;
SELECT user_id  FROM Elite  WHERE year_id = '2006'  LIMIT 5;
SELECT category_id, category_name  FROM Categories  WHERE category_name LIKE 'P%'  LIMIT 5;
SELECT user_id, review_stars  FROM Reviews  WHERE business_id = 35 AND review_length = 'medium';
SELECT ba.business_id, ba.attribute_value FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'payment_types_visa';
SELECT b.business_id, b.active FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Diagnostic Imaging';
SELECT u.user_id, u.user_yelping_since_year FROM Users u JOIN Reviews r ON u.user_id = r.user_id WHERE r.business_id = 143 AND r.review_stars = 5;
SELECT u.user_id, u.user_yelping_since_year FROM Users u JOIN Users_Compliments uc ON u.user_id = uc.user_id JOIN Compliments c ON uc.compliment_id = c.compliment_id WHERE c.compliment_type = 'profile' AND uc.number_of_compliments = 'Uber' LIMIT 5;
SELECT r.user_id, r.business_id, r.review_length FROM Reviews r JOIN Tips t ON r.business_id = t.business_id WHERE t.likes = (SELECT MAX(likes) FROM Tips);
SELECT e.user_id, uc.number_of_compliments FROM Elite e JOIN Years y ON e.year_id = y.year_id JOIN Users_Compliments uc ON e.user_id = uc.user_id JOIN Compliments c ON uc.compliment_id = c.compliment_id WHERE y.actual_year BETWEEN 2005 AND 2014 AND c.compliment_type = 'photos';
SELECT      (COUNT(CASE WHEN bh.opening_time = '9AM' AND bh.closing_time = '9PM' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      Business_Hours bh JOIN      Days d ON bh.day_id = d.day_id WHERE      d.day_of_week = 'Sunday';
SELECT b.business_id, d.day_of_week FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE b.active = 'true' AND b.city = 'Black Canyon City';
SELECT r.user_id, r.review_length FROM Reviews r JOIN Users u ON r.user_id = u.user_id WHERE u.user_yelping_since_year = 2004 AND u.user_average_stars = 5;
SELECT b.business_id, b.active, b.city FROM Reviews r JOIN Business b ON r.business_id = b.business_id GROUP BY b.business_id, b.active, b.city HAVING SUM(CASE WHEN r.review_stars > 4 THEN 1 ELSE 0 END) / COUNT(r.user_id) >= 0.65;
SELECT      (SELECT COUNT(*) FROM Business WHERE active = 'true' AND city = 'Glendale') AS Glendale_Business_Count,     (SELECT COUNT(*) FROM Business WHERE active = 'true' AND city = 'Mesa') AS Mesa_Business_Count,     (SELECT COUNT(*) FROM Business WHERE active = 'true' AND city = 'Glendale') -      (SELECT COUNT(*) FROM Business WHERE active = 'true' AND city = 'Mesa') AS Business_Difference
SELECT SUM(t.likes) AS total_likes FROM Tips t JOIN Users u ON t.user_id = u.user_id WHERE t.tip_length = 'Short' AND u.user_yelping_since_year = 2010;
SELECT tip_length, COUNT(user_id) AS tip_count FROM Tips JOIN Users ON Tips.user_id = Users.user_id WHERE Users.user_average_stars = 3 GROUP BY tip_length ORDER BY tip_count DESC LIMIT 1;
SELECT SUM(likes) AS total_likes FROM Tips t JOIN Business b ON t.business_id = b.business_id WHERE t.tip_length = 'Short' AND b.city = 'Goodyear';
SELECT DISTINCT b.state FROM Business b JOIN Reviews r ON b.business_id = r.business_id WHERE LENGTH(r.review_length) > (SELECT AVG(LENGTH(t.tip_length)) FROM Tips t WHERE t.likes > 0);
SELECT      AVG(TIMESTAMPDIFF(MINUTE, Business_Hours.opening_time, Business_Hours.closing_time)) AS average_daily_operating_time FROM      Business JOIN      Business_Hours ON Business.business_id = Business_Hours.business_id WHERE      Business.city = 'El Mirage' AND Business.state = 'AZ';
SELECT b.business_id, d.day_of_week AS closing_day FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE b.state = 'SC';
SELECT c.category_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.stars = 5;
SELECT DISTINCT b.state FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id WHERE ba.attribute_value = 'beer_and_wine';
SELECT COUNT(*) AS medium_photo_compliments FROM Users_Compliments uc JOIN Compliments c ON uc.compliment_id = c.compliment_id WHERE c.compliment_type = 'photo' AND uc.number_of_compliments = 'Medium';
SELECT b.business_id  FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'Wi-Fi' AND ba.attribute_value = 'true' AND b.state = 'SC';
SELECT COUNT(DISTINCT ba.business_id) AS romantic_business_count FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'ambience_romantic' AND ba.attribute_value = 'true';
SELECT      (SUM(CASE WHEN ba.attribute_id = (SELECT attribute_id FROM Attributes WHERE attribute_name = 'Good for Kids') AND ba.attribute_value = 'true' THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT ba.business_id) AS percentage_good_for_kids FROM      Business_Attributes ba;
SELECT COUNT(*)  FROM Business  WHERE active = 'true' AND city = 'Mesa';
SELECT COUNT(DISTINCT business_id) AS bad_or_terrible_experience_count FROM Reviews WHERE review_stars IN (1, 2);
SELECT business_id  FROM Business  WHERE city = 'Paradise Valley' AND review_count = 'Low' AND stars > 3;
SELECT COUNT(DISTINCT business_id) AS business_count FROM Business_Attributes GROUP BY business_id HAVING COUNT(attribute_value) > 1;
SELECT COUNT(DISTINCT b.business_id) AS num_businesses FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id WHERE bh.day_id BETWEEN 1 AND 7 GROUP BY b.business_id HAVING COUNT(DISTINCT SUBTRACT(bh.closing_time, bh.opening_time)) = 1;
SELECT COUNT(*)  FROM Reviews  JOIN Business ON Reviews.business_id = Business.business_id  WHERE Business.active = 'true' AND Reviews.review_votes_funny = 'Uber';
SELECT COUNT(DISTINCT uc.user_id) AS users_without_fans FROM Users_Compliments uc JOIN Users u ON uc.user_id = u.user_id WHERE uc.number_of_compliments = 'High' AND u.user_fans = 0;
SELECT c.compliment_type, COUNT(uc.number_of_compliments) AS compliment_count FROM Users_Compliments uc JOIN Compliments c ON uc.compliment_id = c.compliment_id GROUP BY c.compliment_type ORDER BY compliment_count DESC LIMIT 1;
SELECT u.user_id, u.user_average_stars FROM Users u JOIN Tips t ON u.user_id = t.user_id ORDER BY t.likes DESC LIMIT 3;
SELECT c.category_name FROM Categories c JOIN Business_Categories bc ON c.category_id = bc.category_id JOIN Business b ON bc.business_id = b.business_id WHERE b.city = 'Arcadia';
SELECT business_id  FROM Business_Hours  WHERE day_id = 1;
SELECT COUNT(DISTINCT b.business_id)  FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'music_karaoke' AND ba.attribute_value = 'true' AND b.active = 'false';
SELECT COUNT(DISTINCT r.business_id) AS open_businesses_with_long_reviews FROM Business b JOIN Reviews r ON b.business_id = r.business_id WHERE b.active = 'true' AND b.city = 'Phoenix' AND r.review_length = 'Long';
SELECT COUNT(DISTINCT u.user_id) AS low_cool_vote_users FROM Users u JOIN Reviews r ON u.user_id = r.user_id WHERE u.user_votes_cool = 'Low' AND r.review_votes_cool = 'Low';
SELECT COUNT(DISTINCT u.user_id) AS user_count FROM Users u JOIN Tips t ON u.user_id = t.user_id WHERE t.tip_length = 'Long' AND t.likes = 2 AND u.user_fans = 'High';
SELECT COUNT(DISTINCT ba.business_id) AS business_count FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'ambience_trendy' AND ba.attribute_value = 'false';
SELECT COUNT(DISTINCT b.business_id)  FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE b.city = 'Scottsdale'    AND d.day_of_week = 'Sunday'    AND bh.opening_time = '12PM';
SELECT AVG(b.stars) AS average_stars FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Obstetricians & Gynecologists';
SELECT      (COUNT(DISTINCT e.user_id) * 100.0 / NULLIF((SELECT COUNT(DISTINCT u.user_id)      FROM Users u      JOIN Elite el ON u.user_id = el.user_id      WHERE el.year_id = (SELECT year_id FROM Years WHERE actual_year = 2011)), 0)) AS percentage_high_fans_elite FROM      Users u  JOIN      Elite e ON u.user_id = e.user_id  WHERE      u.user_fans = 'High'      AND e.year_id = (SELECT year_id FROM Years WHERE actual_year = 2011);
SELECT COUNT(*)  FROM Business  WHERE city = 'Surprise';
SELECT business_id  FROM Business  WHERE city = 'Tempe' AND review_count = 'High';
SELECT COUNT(*) AS total_active_businesses FROM Business WHERE active = 'true' AND state = 'AZ' AND review_count = 'Medium';
SELECT business_id  FROM Business  WHERE stars BETWEEN 3 AND 5 AND city = 'Chandler';
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year BETWEEN 2009 AND 2011  AND user_fans = 'Low';
SELECT review_length  FROM Reviews  WHERE user_id = 11021 AND business_id = 3;
SELECT ba.attribute_value FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id WHERE b.city = 'Tempe' AND b.review_count = 'Medium';
SELECT COUNT(DISTINCT b.business_id)  FROM Business b  JOIN Business_Categories bc ON b.business_id = bc.business_id  JOIN Categories c ON bc.category_id = c.category_id  WHERE c.category_name = 'Food' AND b.stars < 3;
SELECT b.business_id, b.stars FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.active = 'true' AND c.category_name = 'Food';
SELECT c.category_name, a.attribute_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.stars = (SELECT MAX(stars) FROM Business)
SELECT c.category_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.business_id BETWEEN 7 AND 14 AND b.stars = (SELECT MAX(stars) FROM Business WHERE review_length = 'Short' AND business_id BETWEEN 7 AND 14);
SELECT COUNT(DISTINCT b.business_id) AS active_business_count FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.active = 'true' AND a.attribute_name = 'BYOB' AND b.review_count = 'High';
SELECT bh.opening_time, bh.closing_time FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id WHERE b.city = 'Glendale' AND b.stars = (SELECT MAX(stars) FROM Business WHERE city = 'Glendale');
SELECT c.category_name, a.attribute_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.active = 'true'    AND b.city = 'Goodyear'    AND b.state = 'AZ'    AND b.review_count = 'High';
SELECT c.category_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.active = 'true' AND b.city = 'Glendale' AND b.state = 'AZ';
SELECT DISTINCT b.city FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE bh.opening_time = '7AM'    AND bh.closing_time = '7PM'    AND d.day_of_week = 'Wednesday';
SELECT ba.attribute_value  FROM Business b  JOIN Business_Attributes ba ON b.business_id = ba.business_id  WHERE b.active = 'true'    AND b.review_count = 'Low'    AND b.stars = 3    AND b.city = 'Goodyear'    AND b.state = 'AZ';
SELECT bh.opening_time FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id WHERE b.active = 'true' AND b.city = 'Glendale' AND b.review_count = 'Medium';
SELECT      (COUNT(CASE WHEN b.stars > 3 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id WHERE      c.category_name = 'Food';
SELECT bh.closing_time, d.day_of_week FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE b.active = 'true'    AND b.city = 'Goodyear'    AND b.stars > (SELECT AVG(stars) * 0.8 FROM Business);
SELECT (COUNT(paper_id) FILTER (WHERE class_label = 'Agents') * 100.0 / COUNT(paper_id)) AS percentage FROM paper JOIN cites ON paper.paper_id = cites.cited_paper_id;
SELECT word_cited_id, COUNT(DISTINCT c.citing_paper_id) AS citation_count FROM content AS ct JOIN cites AS c ON ct.paper_id = c.cited_paper_id GROUP BY word_cited_id ORDER BY citation_count DESC LIMIT 1;
SELECT COUNT(DISTINCT c.word_cited_id) AS total_words_cited FROM content c JOIN paper p ON c.paper_id = p.paper_id WHERE p.class_label = 'AI';
SELECT DISTINCT p2.paper_id, p2.class_label FROM content c1 JOIN cites ci ON c1.paper_id = ci.citing_paper_id JOIN content c2 ON ci.cited_paper_id = c2.paper_id JOIN paper p2 ON c2.paper_id = p2.paper_id WHERE c1.paper_id = 315017;
SELECT c.word_cited_id, COUNT(c.word_cited_id) AS citation_count FROM cites ci JOIN paper p ON ci.cited_paper_id = p.paper_id JOIN content c ON ci.cited_paper_id = c.paper_id WHERE p.class_label = 'DB' GROUP BY c.word_cited_id ORDER BY citation_count DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN p.class_label = 'Agents' THEN c.word_cited_id END) * 100.0) / COUNT(c.word_cited_id) AS percentage FROM      content c JOIN      paper p ON c.paper_id = p.paper_id;
SELECT p.paper_id, p.class_label FROM cites c JOIN content co ON c.citing_paper_id = co.paper_id JOIN paper p ON c.citing_paper_id = p.paper_id GROUP BY c.citing_paper_id, p.class_label ORDER BY MAX(co.word_cited_id) DESC LIMIT 1;
SELECT p.paper_id, p.class_label FROM cites c JOIN paper p ON c.citing_paper_id = p.paper_id JOIN content ct ON ct.paper_id = c.citing_paper_id WHERE ct.word_cited_id = 'word1002';
SELECT DISTINCT c.word_cited_id FROM content c JOIN paper p ON c.paper_id = p.paper_id WHERE p.class_label = 'AI';
SELECT p.class_label, COUNT(c.word_cited_id) AS cited_word_count FROM paper p LEFT JOIN content c ON p.paper_id = c.paper_id WHERE p.paper_id = 'chakrabarti01integrating' GROUP BY p.class_label;
SELECT p.paper_id, p.class_label FROM paper p JOIN content c ON p.paper_id = c.paper_id GROUP BY p.paper_id, p.class_label HAVING COUNT(c.word_cited_id) > 20;
SELECT DISTINCT c.word_cited_id FROM content c JOIN paper p1 ON c.paper_id = p1.paper_id JOIN cites ci ON p1.paper_id = ci.cited_paper_id JOIN paper p2 ON ci.citing_paper_id = p2.paper_id WHERE p1.class_label = 'AI' AND p2.class_label = 'IR';
WITH citation_counts AS (     SELECT cited_paper_id, COUNT(citing_paper_id) AS citation_count     FROM cites     GROUP BY cited_paper_id ), most_cited AS (     SELECT cited_paper_id, citation_count     FROM citation_counts     ORDER BY citation_count DESC     LIMIT 1 ), least_cited AS (     SELECT cited_paper_id, citation_count     FROM citation_counts     ORDER BY citation_count ASC     LIMIT 1 ) SELECT      (SELECT paper_id FROM most_cited) AS most_cited_paper_id,     (SELECT citation_count FROM most_cited) AS most_cited_count,     (SELECT paper_id FROM least_cited) AS least_cited_paper_id,     (SELECT citation_count FROM least_cited) AS least_cited_count;
SELECT AVG(CASE WHEN class_label = 'M' THEN 1 ELSE 0 END) AS average_ml_papers FROM paper;
SELECT DISTINCT c.word_cited_id FROM cites ci JOIN paper p ON ci.cited_paper_id = p.paper_id JOIN content c ON p.paper_id = c.paper_id WHERE ci.citing_paper_id = 'sima01computational';
SELECT COUNT(DISTINCT cited_paper_id)  FROM cites  WHERE citing_paper_id = 'schmidt99advanced'  AND cited_paper_id IN (SELECT paper_id FROM content WHERE word_cited_id = '3555');
SELECT DISTINCT p.class_label FROM cites c JOIN content co ON c.citing_paper_id = co.paper_id JOIN paper p ON c.citing_paper_id = p.paper_id WHERE co.word_cited_id = 'word1163';
SELECT p.paper_id, COUNT(c.word_cited_id) AS word_count FROM paper p JOIN content c ON p.paper_id = c.paper_id WHERE p.class_label = 'DB' GROUP BY p.paper_id ORDER BY word_count DESC LIMIT 1;
SELECT COUNT(*)  FROM cites c  JOIN paper p ON c.citing_paper_id = p.paper_id  WHERE p.class_label = 'ML' AND c.cited_paper_id = 'butz01algorithmic';
SELECT name, birthdate  FROM Person  WHERE birthdate = (SELECT MIN(birthdate) FROM Person);
SELECT nickname FROM Person WHERE name = 'Dan Castellaneta';
SELECT COUNT(*)  FROM Credit c  JOIN Person p ON c.person = p.name  WHERE c.episode_id IN (SELECT episode_id FROM Episode WHERE season = 20)  AND p.birth_region = 'New York'  AND YEAR(p.birthdate) > 1970;
SELECT p.birth_country  FROM Award a  JOIN Person p ON a.person = p.name  WHERE a.award = 'Outstanding Voice-Over Performance'  AND a.year = 2009  AND a.result = 'Winner';
SELECT DISTINCT a.award  FROM Award a  JOIN Person p ON a.person = p.name  WHERE p.nickname = 'Doofus' AND a.result = 'Winner';
SELECT COUNT(DISTINCT c.person)  FROM Award a  JOIN Credit c ON a.episode_id = c.episode_id  JOIN Person p ON c.person = p.name  WHERE p.birth_country = 'USA'    AND a.result = 'Nominee'    AND a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'    AND a.year = 2009;
SELECT character  FROM Award  WHERE award_category = 'Outstanding Voice-Over Performance'    AND year = 2009    AND result = 'Winner';
SELECT k.keyword  FROM Keyword k  JOIN Episode e ON k.episode_id = e.episode_id  WHERE e.title = 'Lost Verizon';
SELECT COUNT(*)  FROM Keyword  WHERE episode_id = (SELECT episode_id FROM Episode WHERE air_date = '2008-10-19');
SELECT e.rating  FROM Episode e  JOIN Award a ON e.episode_id = a.episode_id  WHERE a.person = 'Dan Castellaneta'    AND a.year = 2009    AND a.result = 'Winner';
SELECT COUNT(*)  FROM Vote  WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'Lost Verizon')  AND stars = 7;
SELECT stars  FROM Vote  WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'Lost Verizon')  AND votes = (SELECT MAX(votes) FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'Lost Verizon'));
SELECT e.title FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.votes > 200 AND v.stars = 10;
SELECT COUNT(*)  FROM Episode e  JOIN Vote v ON e.episode_id = v.episode_id  WHERE e.air_date LIKE '2009%' AND v.stars = 10 AND v.percent > 15;
SELECT title  FROM Episode  WHERE episode_id = (     SELECT episode_id      FROM Vote      WHERE stars = 7      ORDER BY votes DESC      LIMIT 1 );
SELECT      SUM(v.stars * v.votes) / NULLIF(SUM(v.votes), 0) AS average_stars FROM      Vote v JOIN      Episode e ON v.episode_id = e.episode_id WHERE      e.title = 'Lost Verizon';
SELECT      (COUNT(DISTINCT a.episode_id) * 100.0 / COUNT(DISTINCT e.episode_id)) AS percentage FROM      Episode e LEFT JOIN      Award a ON e.episode_id = a.episode_id AND a.award_category = 'Primetime Emmy' AND a.result = 'Nominee' WHERE      e.rating > 7;
SELECT e.title  FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person = p.name WHERE p.name = 'Pamela Hayden' AND c.role = 'Ruthie';
SELECT C.role, E.episode, E.number_in_series FROM Credit C JOIN Episode E ON C.episode_id = E.episode_id WHERE C.person = 'Matt Groening' AND E.title = 'In the Name of the Grandfather';
SELECT e.title, e.summary FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id WHERE k.keyword = 'eviction';
SELECT AVG(stars) AS average_stars FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'Wedding for Disaster');
SELECT e.title, k.keyword FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id WHERE e.air_date = '2009-03-22';
SELECT p.birth_name  FROM Person p  JOIN Credit c ON p.name = c.person  WHERE c.role = 'Helen Lovejoy';
SELECT      e.title,     p.name,     c.role,     (SUM(CASE WHEN c.credited = '' THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN c.credited = 'true' THEN 1 ELSE 0 END), 0)) AS percentage_ratio FROM      Episode e JOIN      Award a ON e.episode_id = a.episode_id JOIN      Credit c ON e.episode_id = c.episode_id JOIN      Person p ON c.person = p.name WHERE      a.year = 2017      AND a.award_category = 'Jupiter Award'      AND a.award = 'Best International TV Series' GROUP BY      e.title, p.name, c.role;
SELECT COUNT(*)  FROM Episode  WHERE votes > 1000;
SELECT COUNT(*)  FROM Person  WHERE birth_place = 'New York' AND birth_region = 'USA';
SELECT a.award, a.award_category FROM Award a JOIN Person p ON a.person = p.name WHERE p.name = 'Marc Wilmore';
SELECT name, nickname  FROM Person  WHERE nickname IS NOT NULL;
SELECT AVG(height_meters) AS average_height FROM Person;
SELECT MAX(votes) - MIN(votes) AS vote_difference FROM Episode;
SELECT character  FROM Character_Award  JOIN Award ON Character_Award.award_id = Award.award_id  WHERE Award.award = 'Outstanding Voice-Over Performance' AND Award.year = 2009;
SELECT COUNT(DISTINCT p.name) FROM Person p JOIN Award a ON p.name = a.person WHERE a.award_category = 'Comedy Series Award'   AND a.year = 2009   AND a.result = 'Nominee'   AND p.birth_place = 'California';
SELECT e.title  FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.award_category = 'Best International TV Series'    AND a.year = 2017    AND a.result = 'Winner';
SELECT p.name FROM Person p WHERE p.name NOT IN (     SELECT c.person     FROM Credit c     JOIN Episode e ON c.episode_id = e.episode_id     WHERE e.title = 'How the Test Was Won' AND c.credited = ' ' );
SELECT e.title  FROM Episode e  JOIN Keyword k1 ON e.episode_id = k1.episode_id  JOIN Keyword k2 ON e.episode_id = k2.episode_id  WHERE k1.keyword = 'riot' AND k2.keyword = 'cake';
SELECT episode_id  FROM Vote  WHERE stars = 10  ORDER BY votes DESC  LIMIT 1;
SELECT DISTINCT p.name FROM Person p JOIN Credit c ON p.name = c.person JOIN Episode e ON c.episode_id = e.episode_id WHERE e.season = 20 AND strftime('%m', e.air_date) BETWEEN '10' AND '11';
SELECT p.name  FROM Person p  JOIN Credit c ON p.name = c.person  JOIN Episode e ON c.episode_id = e.episode_id  WHERE e.title = 'Treehouse of Horror XIX' AND c.role = 'director';
SELECT COUNT(*) AS role_count FROM Credit WHERE episode_id = 5;
SELECT k.keyword  FROM Keyword k  JOIN Episode e ON k.episode_id = e.episode_id  WHERE e.title = 'Take My Life, Please';
SELECT      COUNT(DISTINCT e.episode_id) AS nominated_count,     (COUNT(DISTINCT e.episode_id) * 100.0 / COUNT(DISTINCT e2.episode_id)) AS percentage FROM      Episode e JOIN      Award a ON e.episode_id = a.episode_id JOIN      Episode e2 ON e2.votes > 950 WHERE      a.award = 'Outstanding Voice-Over Performance'      AND a.result = 'Nominee'      AND a.year = 2009;
SELECT      (SELECT votes FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'No Loan Again, Naturally') AND stars = 5) /     (SELECT votes FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'Coming to Homerica') AND stars = 5) AS ratio;
SELECT COUNT(*)  FROM Award  WHERE person = 'Ian Maxtone-Graham'    AND organization = 'Writers Guild of America, USA'    AND result = 'Nominee';
SELECT person FROM Award WHERE result = 'Nominee' GROUP BY person HAVING COUNT(*) = (     SELECT MAX(nominee_count)     FROM (         SELECT COUNT(*) AS nominee_count         FROM Award         WHERE result = 'Nominee'         GROUP BY person     ) AS nominee_counts ) AND person NOT IN (     SELECT person     FROM Award     WHERE result = 'Winner' );
SELECT title FROM Episode WHERE rating = (SELECT MIN(rating) FROM Episode);
SELECT MIN(year) AS first_award_year FROM Award WHERE award = 'Favorite Animated Comedy' AND award_category = 'People\'s Choice Award' AND result = 'Winner';
SELECT COUNT(*)  FROM Episode e  WHERE e.episode_id NOT IN (     SELECT c.episode_id      FROM Credit c      WHERE c.person = 'Dell Hake' AND c.credited = '1' );
SELECT      (MIN(a.year) - SUBSTR(p.birthdate, 1, 4)) AS age_at_award FROM      Award a JOIN      Person p ON a.person = p.name WHERE      a.award = 'Outstanding Voice-Over Performance'      AND a.organization = 'Primetime Emmy Awards'      AND a.result = 'Winner' GROUP BY      a.person ORDER BY      MIN(a.year) LIMIT 1;
SELECT ca.character  FROM Award a  JOIN Character_Award ca ON a.award_id = ca.award_id  WHERE a.person = 'Dan Castellaneta'    AND a.result = 'Winner'    AND a.award_category = 'Outstanding Voice-Over Performance'    AND a.organization = 'Primetime Emmy Awards'    AND a.year = 2009;
SELECT COUNT(DISTINCT e.episode_id) AS award_winning_episodes FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE SUBSTR(e.air_date, 6, 2) = '04' AND SUBSTR(e.air_date, 1, 4) = '2009';
SELECT p.birth_place FROM Person p JOIN Award a ON p.name = a.person WHERE a.result = 'Winner'   AND a.award = 'Best Voice-Over Performance'   AND a.organization = 'Online Film & Television Association'   AND a.year = 2009;
SELECT SUM(v.votes) AS total_10_star_votes FROM Vote v JOIN Episode e ON v.episode_id = e.episode_id WHERE v.stars = 10 AND e.episode_id IN (     SELECT e2.episode_id     FROM Episode e2     ORDER BY e2.rating DESC     LIMIT 4 );
SELECT SUM(v.stars)  FROM Vote v  JOIN Episode e ON v.episode_id = e.episode_id  WHERE e.title = 'No Loan Again, Naturally' AND v.votes < 50;
SELECT COUNT(DISTINCT a.person)  FROM Award a  JOIN Person p ON a.person = p.name  WHERE a.result = 'Winner' AND p.birth_country = 'USA';
SELECT COUNT(*)  FROM Credit  WHERE episode_id = 'S20-E11' AND person = 'Doofus' AND credited = 'true';
SELECT p.name, MIN(a.year) AS first_award_year FROM Award a JOIN Person p ON a.person = p.name WHERE a.result = 'Winner' GROUP BY p.name ORDER BY first_award_year LIMIT 1;
SELECT percent  FROM Vote  WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'Sex, Pies and Idiot Scrapes')  AND stars = 9;
SELECT award, person  FROM Award  WHERE year = 2009 AND result = 'Winner';
SELECT name, birthdate  FROM Person  WHERE birth_place = 'Los Angeles' AND height_meters >= 1.8;
SELECT episode, title, rating  FROM Episode  WHERE SUBSTR(air_date, 6, 2) = '10' AND SUBSTR(air_date, 1, 4) = '2008';
SELECT a.award_id, a.award, a.person  FROM Award a  JOIN Character_Award ca ON a.award_id = ca.award_id  WHERE ca.character = 'Homer simpson 20' AND a.result = 'Winner';
SELECT      a.award AS award_name,      a.result,      c.category AS credit_category,      c.credited  FROM      Award a  JOIN      Credit c ON a.person = c.person  WHERE      a.person = 'Billy Kimball';
SELECT p.name, a.award, a.organization, a.result, c.credited FROM Person p JOIN Award a ON p.name = a.person JOIN Credit c ON p.name = c.person WHERE a.role = 'assistant director' AND c.episode_id = 'S20-E13';
SELECT p.birth_country, p.height_meters, p.name FROM Person p WHERE p.name NOT IN (     SELECT c.person     FROM Credit c     WHERE c.category = 'Casting Department' AND c.credited = '' );
SELECT a.person AS nominee, k.keyword, a.episode_id FROM Award a JOIN Keyword k ON a.episode_id = k.episode_id JOIN Episode e ON a.episode_id = e.episode_id WHERE e.title = 'The Good, the Sad and the Drugly' AND a.result = 'Nominee';
SELECT v.votes, v.percent  FROM Vote v  JOIN Keyword k ON v.episode_id = k.episode_id  WHERE k.keyword = 'arab stereotype' AND v.stars = 10;
SELECT a.award, e.air_date, e.rating FROM Award a JOIN Episode e ON a.episode_id = e.episode_id WHERE a.organization = 'Jupiter Award' AND a.result = 'Winner';
SELECT e.episode_id, e.title, k1.keyword, k2.keyword, k3.keyword FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id JOIN Keyword k1 ON e.episode_id = k1.episode_id JOIN Keyword k2 ON e.episode_id = k2.episode_id AND k1.keyword <> k2.keyword JOIN Keyword k3 ON e.episode_id = k3.episode_id AND k1.keyword <> k3.keyword AND k2.keyword <> k3.keyword WHERE v.stars = 1 AND v.votes = (SELECT MAX(votes) FROM Vote WHERE stars = 1) LIMIT 1;
SELECT e.title, e.episode_image, a.award, a.person FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE e.rating BETWEEN 7 AND 10 AND SUBSTRING(e.air_date, 1, 4) = '2008' AND a.result = 'Nominee';
SELECT a.award, p.name, ca.character  FROM Award a  JOIN Person p ON a.person = p.name  JOIN Character_Award ca ON a.award_id = ca.award_id  WHERE a.award_id = 326;
SELECT      p.name,      p.birth_country,      c.role,      (2022 - SUBSTR(p.birthdate, 1, 4)) AS age_in_2022 FROM      Person p JOIN      Credit c ON p.name = c.person WHERE      c.role IS NOT NULL ORDER BY      p.birthdate ASC LIMIT 1;
SELECT COUNT(c.credited) AS number_of_credits, c.category, c.role, p.birth_place FROM Credit c JOIN Person p ON c.person = p.name WHERE p.birth_country = 'North Korea' GROUP BY c.category, c.role, p.birth_place;
SELECT      p.name AS winner_name,      a.award AS award_name,      e.title AS episode_title,      a.role AS winner_role,     COUNT(CASE WHEN a.result = 'winner' THEN 1 END) * 1.0 / COUNT(*) AS winning_rate FROM      Award a JOIN      Episode e ON a.episode_id = e.episode_id JOIN      Person p ON a.person = p.name WHERE      a.year = 2010 GROUP BY      p.name, a.award, e.title, a.role;
SELECT title  FROM Episode  WHERE episode_id = (     SELECT episode_id      FROM Vote      ORDER BY stars DESC, votes DESC      LIMIT 1 );
SELECT COUNT(award) AS total_awards FROM Award WHERE season = 20 AND result = 'Winner';
SELECT e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.organization = 'Primetime Emmy Awards'   AND a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'   AND a.result = 'Nominee' GROUP BY e.episode_id, e.title HAVING COUNT(a.episode_id) = 21;
SELECT AVG(v.stars) AS average_stars, e.summary  FROM Vote v  JOIN Episode e ON v.episode_id = e.episode_id  WHERE e.episode_id = 'S20-E12';
SELECT DISTINCT p.name FROM Person p JOIN Award a ON p.name = a.person JOIN Character_Award ca ON a.award_id = ca.award_id WHERE a.organization = 'Primetime Emmy Awards'   AND a.award = 'Outstanding Voice-Over Performance'   AND a.result = 'Winner'   AND ca.character = 'Homer simpson 20';
SELECT p.birth_name, c.role  FROM Person p  JOIN Credit c ON p.name = c.person  JOIN Episode e ON c.episode_id = e.episode_id  WHERE p.name = 'Al Jean' AND e.season = 20;
SELECT COUNT(*)  FROM Award  WHERE person = 'Billy Kimball'    AND year = 2010    AND result = 'Nominee'    AND season = 20;
SELECT k.keyword  FROM Keyword k  JOIN Episode e ON k.episode_id = e.episode_id  WHERE e.title = 'Take My Life, Please';
SELECT a.person, a.award_category FROM Award a WHERE a.result = 'Winner' ORDER BY a.year DESC LIMIT 1;
SELECT AVG(CASE WHEN result = 'winner' THEN 1 ELSE 0 END) AS average_awards_winning_rate FROM Award WHERE season = 20;
SELECT COUNT(*)  FROM Episode  WHERE air_date BETWEEN '2008-10-01' AND '2008-11-30';
SELECT title, rating  FROM Episode  WHERE YEAR(air_date) = 2009  ORDER BY rating ASC  LIMIT 1;
SELECT DISTINCT c.category, c.role FROM Credit c JOIN Person p ON c.person = p.name WHERE p.name = 'Bonita Pietila';
SELECT DISTINCT p.name  FROM Person p  JOIN Credit c ON p.name = c.person  JOIN Episode e ON c.episode_id = e.episode_id  WHERE e.season = 20 AND p.birthdate = '1957-10-29' AND p.birth_place = 'Chicago' AND p.birth_region = 'Illinois';
SELECT DISTINCT p.name  FROM Credit c  JOIN Person p ON c.person = p.name  WHERE c.episode_id IN (     SELECT episode_id      FROM Episode      WHERE season = 20 ) AND c.role = 'producer';
SELECT CONCAT(p.birth_name, ' ', p.name) AS full_name,         (2009 - YEAR(p.birthdate)) AS age FROM Award a JOIN Person p ON a.person = p.name WHERE a.organization = 'Primetime Emmy Awards'    AND a.year = 2009    AND a.award_category = 'Outstanding Music Composition for a Series (Original Dramatic Score)'    AND a.result = 'Nominee'    AND a.role = 'composer';
SELECT title FROM Episode WHERE season = 20 GROUP BY episode_id, title ORDER BY COUNT(episode_id) DESC LIMIT 1;
SELECT birth_place  FROM Person  WHERE name = 'Dan Castellaneta';
SELECT COUNT(*)  FROM Person  WHERE birth_country = 'USA';
SELECT name  FROM Person  WHERE birthdate < '1970-01-01';
SELECT name  FROM Person  WHERE birth_place = 'California'  AND birth_country = 'USA'  AND birthdate BETWEEN '1958-01-01' AND '1969-12-31';
SELECT episode_id  FROM Vote  WHERE stars = 5 AND votes > 100;
SELECT k.keyword  FROM Keyword k  JOIN Episode e ON k.episode_id = e.episode_id  WHERE e.title = 'Double, Double, Boy in Trouble';
SELECT episode_id, title  FROM Episode  WHERE episode BETWEEN 10 AND 20  AND votes > 200;
SELECT k.keyword FROM Award a JOIN Keyword k ON a.episode_id = k.episode_id WHERE a.award_category = 'Primetime Emmy';
SELECT p.name FROM Award a JOIN Person p ON a.person = p.name JOIN Vote v ON a.episode_id = v.episode_id WHERE a.award_category = 'Primetime Emmy' ORDER BY v.votes DESC LIMIT 1;
SELECT a.episode_id  FROM Award a  JOIN Vote v ON a.episode_id = v.episode_id  WHERE a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'  AND v.stars = 10;
SELECT DISTINCT p.name FROM Person p JOIN Award a ON p.name = a.person JOIN Credit c ON a.episode_id = c.episode_id AND a.role = c.role JOIN Episode e ON a.episode_id = e.episode_id WHERE a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'   AND e.title = 'No Loan Again, Naturally'   AND c.role = 'director';
SELECT DISTINCT c.person FROM Credit c JOIN Vote v ON c.episode_id = v.episode_id JOIN Award a ON c.episode_id = a.episode_id WHERE c.role = 'writer' AND v.stars > 5 AND a.year = 2009;
SELECT COUNT(DISTINCT a.person) FROM Award a JOIN Person p ON a.person = p.name WHERE a.award_category = 'WGA Award (TV)' AND p.birth_country = 'USA' AND a.year BETWEEN 2009 AND 2010;
SELECT e.title  FROM Episode e JOIN Award a ON e.episode_id = a.episode_id JOIN Vote v ON e.episode_id = v.episode_id WHERE a.role = 'composer'    AND a.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)'    AND v.votes > 200;
SELECT e.title  FROM Award a  JOIN Episode e ON a.episode_id = e.episode_id  WHERE a.person = 'Al Jean'  AND a.award_category = 'Primetime Emmy Award'  AND a.year = 2009;
SELECT      (SELECT SUM(votes) FROM Vote WHERE episode_id = 1) -      (SELECT SUM(votes) FROM Vote WHERE episode_id = 5) AS more_votes;
SELECT a.award  FROM Award a  JOIN Character_Award ca ON a.award_id = ca.award_id  WHERE ca.character = 'Homer Simpson' AND a.year = 2009;
SELECT      COUNT(DISTINCT e.episode_id) AS episodes_won,     (COUNT(DISTINCT CASE WHEN v.votes < 100 THEN e.episode_id END) * 100.0 / COUNT(DISTINCT e.episode_id)) AS percentage_less_than_100_votes FROM      Episode e JOIN      Award a ON e.episode_id = a.episode_id JOIN      Vote v ON e.episode_id = v.episode_id WHERE      a.award = 'Outstanding Animated Program (Programming Under One Hour)'     AND a.result = 'Won';
SELECT      COUNT(*) AS emmy_recipients,     (COUNT(CASE WHEN p.birth_country = 'USA' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_americans FROM      Award a JOIN      Person p ON a.person = p.name WHERE      a.award_category = 'Primetime Emmy Award';
SELECT DISTINCT p.name FROM Award a JOIN Person p ON a.person = p.name WHERE a.award_category = 'Outstanding Voice-Over Performance' AND a.season = 20 AND a.episode_id LIKE 'S20%' LIMIT 2;
SELECT COUNT(DISTINCT person)  FROM Award  WHERE award_category = 'Outstanding Animated Program (For Programming Less Than One Hour)'  AND result = 'Nominee'  AND role = 'executive producer';
SELECT name  FROM Person  WHERE YEAR(birthdate) = 1962 AND birth_region = 'California';
SELECT COUNT(*)  FROM Person  WHERE height_meters > 1.70 AND birth_country = 'Canada';
SELECT COUNT(DISTINCT person)  FROM Award  WHERE award_category = 'Animation' AND result = 'Nominee';
SELECT * FROM Episode WHERE rating > 7 AND rating <= 10 LIMIT 3;
SELECT title, MAX(votes) AS max_votes FROM Episode GROUP BY title ORDER BY max_votes DESC LIMIT 5;
SELECT episode_id, COUNT(votes) AS total_votes FROM Vote WHERE stars = 1 GROUP BY episode_id ORDER BY total_votes DESC LIMIT 3;
SELECT ca.character FROM Award a JOIN Character_Award ca ON a.award_id = ca.award_id JOIN Person p ON a.person = p.name WHERE p.name = 'Dan Castellaneta' AND a.award_category LIKE '%Voice-Over%';
SELECT e.* FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE e.air_date LIKE '2008%' AND v.stars = 10 AND v.votes = (     SELECT MAX(votes)     FROM Vote     WHERE episode_id IN (         SELECT episode_id         FROM Episode         WHERE air_date LIKE '2008%'     ) AND stars = 10 );
SELECT k.keyword  FROM Keyword k  JOIN Episode e ON k.episode_id = e.episode_id  WHERE e.title = 'Take My Life, Please';
SELECT e1.title, e2.title FROM Keyword k1 JOIN Episode e1 ON k1.episode_id = e1.episode_id JOIN Keyword k2 ON k1.keyword = k2.keyword AND k1.episode_id <> k2.episode_id JOIN Episode e2 ON k2.episode_id = e2.episode_id WHERE k1.keyword = '1930s to 2020s' LIMIT 2;
SELECT e.title  FROM Award a  JOIN Episode e ON a.episode_id = e.episode_id  WHERE a.person = 'Joel H. Cohen' AND a.year = 2010;
SELECT votes FROM Vote  WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'Lisa the Drama Queen')  AND stars = 5;
SELECT SUM(votes) AS total_votes FROM Vote WHERE stars = 10 AND episode_id IN (     SELECT episode_id     FROM Keyword     WHERE keyword = 'reference to the fantastic four' );
SELECT      (SELECT votes FROM Vote WHERE stars = 1 AND episode_id = (SELECT episode_id FROM Episode WHERE title = 'The Burns and the Bees')) -      (SELECT votes FROM Vote WHERE stars = 10 AND episode_id = (SELECT episode_id FROM Episode WHERE title = 'The Burns and the Bees')) AS vote_difference;
SELECT k.keyword FROM Keyword k JOIN Vote v ON k.episode_id = v.episode_id WHERE v.votes = (SELECT MIN(votes) FROM Vote);
SELECT e.* FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 2 AND v.votes > 20 AND e.rating > 5 AND e.rating <= 7;
SELECT episode_id, title, votes  FROM Episode  ORDER BY votes DESC  LIMIT 1;
SELECT name, birthdate  FROM Person  ORDER BY birthdate ASC  LIMIT 1;
SELECT e.title, e.season, e.episode FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id WHERE c.person = 'Oscar Cervantes' AND c.credited = 'true';
SELECT DISTINCT c.role FROM Credit c JOIN Person p ON c.person = p.name WHERE p.birth_country != 'USA';
SELECT SUM(votes) AS one_star_votes FROM Vote WHERE episode_id = (     SELECT episode_id     FROM Episode     WHERE season = (SELECT season FROM Episode ORDER BY rating ASC LIMIT 1)     ORDER BY rating ASC     LIMIT 1 ) AND stars = 1;
SELECT ca.character FROM Award a JOIN Character_Award ca ON a.award_id = ca.award_id WHERE a.award = 'Outstanding Voice-Over Performance' AND a.result = 'Winner';
SELECT e.summary  FROM Episode e  JOIN Credit c ON e.episode_id = c.episode_id  WHERE c.person = 'Emily Blunt';
SELECT role  FROM Person  JOIN Credit ON Person.name = Credit.person  WHERE Person.nickname = 'The Tiny Canadian';
SELECT e.title, MAX(v.percent) AS max_percent FROM Episode e JOIN Award a ON e.episode_id = a.episode_id JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 5 GROUP BY e.title ORDER BY max_percent DESC LIMIT 1;
SELECT person FROM Credit WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'In the Name of the Grandfather')   AND category = 'Cast'   AND credited = 'true';
SELECT DISTINCT p.birthdate FROM Award a JOIN Person p ON a.person = p.name WHERE a.result = 'Winner';
SELECT DISTINCT c.person FROM Credit c JOIN Vote v ON c.episode_id = v.episode_id WHERE c.role = 'Writer' AND v.stars = 10 AND v.votes = (     SELECT MAX(votes)     FROM Vote     WHERE stars = 10 );
SELECT award  FROM Award  WHERE episode_id = (SELECT episode_id FROM Episode WHERE air_date = '11/30/2008')  AND result = 'Winner';
SELECT *  FROM Credit  WHERE category = 'Music Department';
SELECT keyword FROM Keyword WHERE episode_id = 426;
SELECT e.title FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 7 AND v.votes > (     SELECT AVG(v2.votes)     FROM Vote v2     JOIN Episode e2 ON v2.episode_id = e2.episode_id     WHERE e2.season = e.season )
SELECT      DIVIDE(SUM(CASE WHEN A.result = 'Nominee' THEN V.votes ELSE 0 END), SUM(V.votes)) AS percentage FROM      Award A JOIN      Vote V ON A.episode_id = V.episode_id WHERE      A.result = 'Nominee';
SELECT name FROM Person WHERE nickname IS NOT NULL;
SELECT birth_country  FROM Person  WHERE height_meters = (SELECT MAX(height_meters) FROM Person);
SELECT AVG(height_meters) AS average_height FROM Person WHERE birth_country = 'USA';
SELECT      (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Person)) AS percentage FROM      Person WHERE      birthdate > '1970-01-01' AND birth_region = 'California';
SELECT COUNT(*)  FROM Person  WHERE birth_region != 'Connecticut' AND birth_country != 'USA';
SELECT title  FROM Episode  WHERE episode_id IN ('S20-E1', 'S20-E2', 'S20-E3');
SELECT episode_image FROM Episode WHERE episode_id = 5;
SELECT SUM(votes) AS total_votes FROM Vote WHERE episode_id IN (     SELECT episode_id     FROM Episode     WHERE rating > 7.0 );
SELECT COUNT(DISTINCT person)  FROM Credit  WHERE category = 'Casting Department';
SELECT COUNT(*)  FROM Person  JOIN Credit ON Person.name = Credit.person  WHERE Credit.role = 'additional timer' AND Person.birth_country = 'USA';
SELECT COUNT(*)  FROM Person p  JOIN Credit c ON p.name = c.person  WHERE p.birthdate > '1970-01-01' AND c.role = 'animation executive producer';
SELECT e.summary FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id WHERE c.credited = '' AND c.role IN ('crew', 'staff');
SELECT e.rating FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id WHERE c.person = 'Jason Bikowski' AND c.role = 'Producer';
SELECT AVG(p.height_meters)  FROM Credit c  JOIN Person p ON c.person = p.name  WHERE c.category = 'Animation Department';
SELECT character  FROM Award  WHERE organization = 'Primetime Emmy' AND year = 2009;
SELECT DISTINCT ca.character FROM Award a JOIN Character_Award ca ON a.award_id = ca.award_id WHERE a.award_category = 'Primetime Emmy'   AND a.result = 'Nominee'   AND a.year >= '2009'   AND a.year <= '2010';
SELECT SUM(v.votes) AS total_votes FROM Vote v JOIN Credit c ON v.episode_id = c.episode_id WHERE c.person = 'Adam Kuhlman';
SELECT k.keyword, c.person FROM Keyword k JOIN Credit c ON k.episode_id = c.episode_id WHERE k.episode_id = 'S20-E1';
SELECT k.keyword FROM Vote v JOIN Keyword k ON v.episode_id = k.episode_id WHERE v.stars = 10 AND v.percent > 29;
SELECT DIVIDE(SUM(CASE WHEN stars = 5 THEN 1 ELSE 0 END), COUNT(stars)) AS percentage FROM Vote JOIN Episode ON Vote.episode_id = Episode.episode_id WHERE Episode.title = 'Sex, Pies and Idiot Scrapes';
SELECT COUNT(*) > 0 AS is_keyword FROM Keyword k JOIN Episode e ON k.episode_id = e.episode_id WHERE k.keyword = 'limbo dancing' AND e.title = 'Dangerous Curves';
SELECT e.title  FROM Award a  JOIN Episode e ON a.episode_id = e.episode_id  WHERE a.result = 'Winner'    AND a.award = 'Best International TV Series'    AND a.year = '2017';
SELECT k.keyword FROM Award a JOIN Keyword k ON a.episode_id = k.episode_id WHERE a.award_category = 'WGA Award (TV)' AND a.result = 'Winner';
SELECT DISTINCT p.birth_place FROM Person p JOIN Award a ON p.name = a.person WHERE a.role = 'co-executive producer'   AND a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'   AND a.result = 'Nominee';
SELECT SUM(v.votes) AS total_votes FROM Award a JOIN Vote v ON a.episode_id = v.episode_id WHERE a.award = 'Blimp Award'    AND a.result IN ('Winner', 'Nominee')    AND v.stars > 1 AND v.stars < 5;
SELECT SUM(E.rating) AS total_rating FROM Award A JOIN Episode E ON A.episode_id = E.episode_id WHERE A.result = 'Winner'  AND (A.award = 'OFTA Television Award' OR A.award = 'WGA Award (TV)');
SELECT SUM(percent) AS total_percent FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'No Loan Again, Naturally') AND stars >= 5 AND stars <= 10;
SELECT COUNT(*)  FROM Vote  WHERE stars > 8;
SELECT episode_id, title, votes  FROM Vote  ORDER BY votes DESC  LIMIT 1;
SELECT COUNT(*)  FROM Keyword  WHERE keyword = '2d animation';
SELECT organization FROM Award WHERE award_id = 328;
SELECT COUNT(*) FROM Award WHERE year = 2009;
SELECT COUNT(*)  FROM Award  WHERE award_category = 'Primetime Emmy';
SELECT DISTINCT p.birth_name FROM Person p JOIN Credit c ON p.name = c.person WHERE c.role = 'co-executive producer' AND p.height_meters > 1.60;
SELECT      (SUM(CASE WHEN A.result = 'Nominee' AND P.birth_country = 'USA' THEN 1 ELSE 0 END) * 100.0) / COUNT(P.name) AS percentage_nominees_born_in_usa FROM      Award A JOIN      Person P ON A.person = P.name WHERE      A.result = 'Nominee';
SELECT      (SUM(CASE WHEN p.height_meters > 1.75 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM      Award a JOIN      Person p ON a.person = p.name WHERE      a.result = 'Winner';
SELECT e.title  FROM Episode e  JOIN Vote v ON e.episode_id = v.episode_id  WHERE v.stars = 2;
SELECT V.stars  FROM Vote V  JOIN Episode E ON V.episode_id = E.episode_id  WHERE E.title = 'How the Test Was Won';
SELECT COUNT(*)  FROM Vote  JOIN Episode ON Vote.episode_id = Episode.episode_id  WHERE Vote.stars > 5 AND Episode.air_date LIKE '2008%';
SELECT DISTINCT ca.character FROM Award a JOIN Character_Award ca ON a.award_id = ca.award_id WHERE a.year = 2009;
SELECT DISTINCT year FROM Award JOIN Character_Award ON Award.award_id = Character_Award.award_id WHERE character = 'Mr. Burns';
SELECT DISTINCT a.award_category  FROM Award a  JOIN Character_Award ca ON a.award_id = ca.award_id  WHERE ca.character = 'Lenny';
SELECT p.name  FROM Person p  JOIN Credit c ON p.name = c.person  WHERE c.role = 'Smithers';
SELECT k.keyword  FROM Keyword k  JOIN Episode e ON k.episode_id = e.episode_id  WHERE e.title = 'Dangerous Curves';
SELECT k.keyword  FROM Keyword k  JOIN Episode e ON k.episode_id = e.episode_id  WHERE e.air_date LIKE '2008%';
SELECT COUNT(*)  FROM Episode e  JOIN Vote v ON e.episode_id = v.episode_id  WHERE v.stars < 8 AND e.air_date LIKE '2009%';
SELECT DISTINCT p.birth_name  FROM Person p  JOIN Credit c ON p.name = c.person  WHERE c.role = 'director' AND p.birth_country = 'South Korea';
SELECT COUNT(*)  FROM Award  WHERE episode_id IN (SELECT episode_id FROM Episode WHERE title = 'Simpsons 20')  AND year = 2009  AND result = 'Winner';
SELECT COUNT(*) AS total_episodes_below_7 FROM Episode WHERE rating < 7;
SELECT name FROM Person WHERE birth_region = 'California' AND birth_country = 'USA';
SELECT COUNT(*)  FROM Credit  WHERE episode_id IN ('S02-E5', 'S02-E6', 'S02-E7', 'S02-E8', 'S02-E9', 'S02-E10')  AND credited = 'true'  AND role = 'casting';
SELECT episode_id FROM Vote WHERE stars = 2 AND votes = 9;
SELECT E.title  FROM Award A  JOIN Episode E ON A.episode_id = E.episode_id  WHERE A.organization = 'Primetime Emmy Awards'  AND A.year = 2009  AND A.result = 'Winner';
SELECT episode_id  FROM Episode  WHERE air_date LIKE '2008%'  AND episode_id IN (SELECT episode_id FROM Vote WHERE stars < 5);
SELECT c.category  FROM Credit c  JOIN Vote v ON c.episode_id = v.episode_id  WHERE v.votes = (SELECT MAX(votes) FROM Vote)  AND c.person = 'Carlton Batten';
SELECT percent  FROM Vote  WHERE episode_id IN (     SELECT episode_id      FROM Episode      WHERE air_date LIKE '2008%'  )  AND votes BETWEEN 920 AND 950;
SELECT e.episode_id, e.title FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id WHERE c.credited = 'true' AND c.person = 'Bonita Pietila';
SELECT COUNT(DISTINCT e.episode_id)  FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.organization = 'Annie Awards'  AND a.result = 'Nominee'  AND e.episode_id IN (SELECT episode_id FROM Vote WHERE percent > 6);
SELECT E.title  FROM Episode E  JOIN Award A ON E.episode_id = A.episode_id  WHERE A.result = 'Nominee'  AND A.award_category = 'WGA Award (TV)'  AND E.votes > 1000;
SELECT DISTINCT p.name FROM Credit c JOIN Episode e ON c.episode_id = e.episode_id JOIN Person p ON c.person = p.name WHERE e.title = 'How the Test Was Won'   AND c.category = 'Animation Department'   AND c.credited = 'true'   AND c.role = 'additional timer';
SELECT v.stars  FROM Vote v  JOIN Episode e ON v.episode_id = e.episode_id  WHERE e.air_date LIKE '2008-11%';
SELECT e.title  FROM Episode e  JOIN Award a ON e.episode_id = a.episode_id  JOIN Vote v ON e.episode_id = v.episode_id  WHERE v.stars = 5    AND a.result = 'Nominee'    AND a.award_category = 'Prism Award'    AND e.air_date = '2009-04-19';
SELECT DISTINCT a.award_category FROM Award a JOIN Vote v ON a.episode_id = v.episode_id WHERE v.votes = (SELECT MAX(votes) FROM Vote) AND a.result = 'Nominee';
SELECT COUNT(*)  FROM Credit  JOIN Episode ON Credit.episode_id = Episode.episode_id  WHERE Episode.air_date LIKE '2009%'  AND Credit.credited = 'true'  AND Credit.person = 'Sam Im'  AND Credit.role = 'additional timer';
SELECT title  FROM Episode  WHERE episode_id IN (     SELECT episode_id      FROM Vote      WHERE stars > (SELECT AVG(stars) * 0.7 FROM Vote) );
SELECT      (COUNT(CASE WHEN result = 'Nominee' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      Award WHERE      episode_id IN (SELECT episode_id FROM Episode WHERE title = 'Gone Maggie Gone' AND YEAR(air_date) = 2009);
SELECT COUNT(DISTINCT name)  FROM person  WHERE name NOT IN (SELECT name FROM longest_absense_from_school);
SELECT MAX(month) AS longest_absence FROM longest_absense_from_school;
SELECT COUNT(*) FROM enlist WHERE organ = 'navy';
SELECT COUNT(*)  FROM longest_absense_from_school las  JOIN male m ON las.name = m.name  WHERE las.month > 5;
SELECT p.name  FROM person p  JOIN male m ON p.name = m.name  JOIN enlist e ON p.name = e.name  WHERE e.organ = 'navy';
SELECT COUNT(*)  FROM filed_for_bankrupcy f  JOIN longest_absense_from_school l ON f.name = l.name  WHERE l.month > 5;
SELECT COUNT(*)  FROM enlist e  JOIN no_payment_due n ON e.name = n.name  WHERE e.organ = 'navy' AND n.bool = 'pos';
SELECT m.name  FROM male m  JOIN disabled d ON m.name = d.name  JOIN filed_for_bankrupcy f ON m.name = f.name;
SELECT COUNT(*)  FROM disabled  WHERE name NOT IN (SELECT name FROM male);
SELECT COUNT(*)  FROM unemployed u  JOIN no_payment_due n ON u.name = n.name  WHERE n.bool = 1;
SELECT MAX(l.month) AS longest_absence FROM enlist e JOIN longest_absense_from_school l ON e.name = l.name WHERE e.organ = 'navy';
SELECT COUNT(DISTINCT d.name)  FROM disabled d  LEFT JOIN longest_absense_from_school l ON d.name = l.name  WHERE l.month = 0 OR l.month IS NULL;
SELECT school FROM enrolled WHERE name IN (SELECT name FROM longest_absense_from_school WHERE month = 9);
SELECT organ, COUNT(disabled.name) AS disabled_count FROM disabled JOIN enlist ON disabled.name = enlist.name GROUP BY organ ORDER BY disabled_count DESC LIMIT 1;
SELECT f.name  FROM filed_for_bankrupcy f  LEFT JOIN male m ON f.name = m.name  WHERE m.name IS NULL;
SELECT (COUNT(CASE WHEN m.name IS NOT NULL THEN 1 END) * 100.0 / COUNT(e.name)) AS male_percentage FROM enlist e LEFT JOIN male m ON e.name = m.name WHERE e.organ = 'navy';
SELECT DIVIDE(SUM(l.month), COUNT(d.name)) AS average_absence_time FROM disabled d JOIN longest_absense_from_school l ON d.name = l.name;
SELECT name FROM enlist WHERE organ = 'foreign_legion';
SELECT bool FROM no_payment_due WHERE name = 'student348';
SELECT school FROM enrolled WHERE name = 'student829';
SELECT COUNT(month) AS months_absent FROM longest_absense_from_school WHERE name = 'student217';
SELECT name FROM longest_absense_from_school WHERE month = 6;
SELECT organ FROM enlist WHERE name = 'student285';
SELECT d.name AS is_disabled, e.school  FROM disabled d  JOIN enrolled e ON d.name = e.name  WHERE d.name = 'student281';
SELECT e.name, e.school  FROM enlist AS en  JOIN enrolled AS e ON en.name = e.name  WHERE en.organ = 'air_force';
SELECT n.name  FROM no_payment_due n  LEFT JOIN male m ON n.name = m.name  WHERE n.bool = 'neg' AND m.name IS NULL  LIMIT 10;
SELECT e.name, e.organ FROM enlist e JOIN no_payment_due n ON e.name = n.name WHERE n.bool = 'pos' LIMIT 5;
SELECT d.name  FROM disabled d  JOIN enrolled e ON d.name = e.name  WHERE e.school = 'smc';
SELECT f.name  FROM filed_for_bankrupcy f  JOIN enlist e ON f.name = e.name  WHERE e.organ = 'foreign_legion';
SELECT COUNT(DISTINCT m.name)  FROM male m  JOIN no_payment_due n ON m.name = n.name  WHERE n.bool = 'neg';
SELECT e.name  FROM enlist e  JOIN longest_absense_from_school l ON e.name = l.name  WHERE e.organ = 'marines' AND l.month = 6;
SELECT COUNT(*)  FROM enrolled e  JOIN unemployed u ON e.name = u.name  WHERE e.school = 'smc';
SELECT COUNT(*)  FROM unemployed  JOIN longest_absense_from_school ON unemployed.name = longest_absense_from_school.name  WHERE longest_absense_from_school.month = 6;
SELECT COUNT(*)  FROM enlist  JOIN enrolled ON enlist.name = enrolled.name  WHERE enlist.organ = 'peace_corps' AND enrolled.school = 'ucsd';
SELECT e.organ, la.month  FROM enlist e  LEFT JOIN longest_absense_from_school la ON e.name = la.name  WHERE e.name = 'Student21';
SELECT      (COUNT(CASE WHEN n.bool = 'pos' THEN 1 END) * 100.0 / COUNT(CASE WHEN n.bool = 'neg' THEN 1 END)) AS percentage_ratio FROM      no_payment_due n JOIN      enlist e ON n.name = e.name WHERE      e.organ = 'foreign_legion';
SELECT      (COUNT(DISTINCT e.name) * 100.0 / NULLIF((SELECT COUNT(DISTINCT e2.name) FROM enrolled e2 WHERE e2.school = 'occ'), 0)) AS percentage FROM      enlist en JOIN      enrolled e ON en.name = e.name WHERE      en.organ = 'navy' AND e.school = 'occ';
SELECT name FROM longest_absense_from_school WHERE month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT COUNT(DISTINCT name) AS total_students FROM enrolled;
SELECT MAX(month) AS longest_absence_duration FROM longest_absense_from_school;
SELECT COUNT(*) FROM longest_absense_from_school WHERE month = 4;
SELECT COUNT(DISTINCT u.name) AS unemployed_bankrupt_count FROM unemployed u JOIN filed_for_bankrupcy b ON u.name = b.name;
SELECT e.name, e.organ  FROM disabled d  JOIN enlist e ON d.name = e.name;
SELECT COUNT(*)  FROM unemployed u  JOIN filed_for_bankrupcy b ON u.name = b.name  JOIN no_payment_due n ON u.name = n.name  WHERE n.bool = 'pos';
SELECT      CASE          WHEN d.name IS NOT NULL THEN 'Yes'          ELSE 'No'      END AS is_disabled,     CASE          WHEN m.name IS NOT NULL THEN 'Yes'          ELSE 'No'      END AS is_male FROM      disabled d  FULL OUTER JOIN      male m ON d.name = m.name WHERE      d.name = '124' OR m.name = '124';
SELECT      p.name,     CASE WHEN d.name IS NOT NULL THEN 'Disabled' ELSE 'Not Disabled' END AS disability,     CASE WHEN m.name IS NOT NULL THEN 'Male' ELSE 'Female' END AS gender,     CASE WHEN n.name IS NOT NULL AND n.bool = 'pos' THEN 'Has Payment Due'          WHEN n.name IS NOT NULL AND n.bool = 'neg' THEN 'No Payment Due'          ELSE 'Unknown' END AS school_debt_status,     CASE WHEN u.name IS NOT NULL THEN 'Unemployed' ELSE 'Employed' END AS employment FROM      person p LEFT JOIN      disabled d ON p.name = d.name LEFT JOIN      male m ON p.name = m.name LEFT JOIN      no_payment_due n ON p.name = n.name LEFT JOIN      unemployed u ON p.name = u.name WHERE      p.name IN ('student180', 'student117');
SELECT COUNT(DISTINCT e.name) AS female_students_joined FROM enlist e JOIN person p ON e.name = p.name LEFT JOIN male m ON p.name = m.name WHERE e.organ IN ('marines', 'air_force') AND m.name IS NULL;
SELECT e.school, en.organ FROM enrolled e JOIN enlist en ON e.name = en.name WHERE e.name IN ('student27', 'student17', 'student101');
SELECT      COUNT(DISTINCT d.name) / NULLIF(COUNT(DISTINCT m.name), 0) AS ratio FROM      disabled d LEFT JOIN      male m ON d.name = m.name;
SELECT COUNT(DISTINCT e.name) AS female_students_not_joining FROM enlist e WHERE e.name NOT IN (SELECT m.name FROM male m);
SELECT f.name  FROM filed_for_bankrupcy f  JOIN no_payment_due n ON f.name = n.name  WHERE n.bool = 'neg';
SELECT DIVIDE(SUM(month), COUNT(name)) AS average_absence_period FROM longest_absense_from_school;
SELECT DIVIDE(SUM(las.month), COUNT(e.name)) AS average_absence FROM longest_absense_from_school las JOIN enrolled e ON las.name = e.name JOIN no_payment_due npd ON e.name = npd.name WHERE npd.bool = 0;
SELECT DIVIDE(SUM(las.month), COUNT(DISTINCT las.name)) AS average_absence_period FROM longest_absense_from_school las JOIN disabled d ON las.name = d.name;
SELECT organ FROM enlist WHERE name = '313';
SELECT COUNT(*) FROM enlist WHERE organ = 'fire_department';
SELECT COUNT(DISTINCT p.name)  FROM person p  LEFT JOIN longest_absense_from_school l ON p.name = l.name  WHERE l.month = 0 OR l.month IS NULL;
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month > 2;
SELECT COUNT(*)  FROM no_payment_due  WHERE bool = 'neg';
SELECT COUNT(*)  FROM no_payment_due  WHERE bool = 'pos';
SELECT d.name  FROM disabled d  LEFT JOIN longest_absense_from_school l ON d.name = l.name  WHERE l.month IS NULL OR l.month = 0;
SELECT COUNT(*)  FROM unemployed  JOIN enlist ON unemployed.name = enlist.name  WHERE enlist.organ = 'navy';
SELECT COUNT(*)  FROM male  JOIN enlist ON male.name = enlist.name  WHERE enlist.organ = 'foreign_legion';
SELECT COUNT(DISTINCT p.name) AS female_students FROM person p JOIN enlist e ON p.name = e.name LEFT JOIN male m ON p.name = m.name WHERE e.organ = 'air_force' AND m.name IS NULL;
SELECT d.name  FROM disabled d  JOIN longest_absense_from_school l ON d.name = l.name  WHERE l.month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT u.name  FROM unemployed u  JOIN enlist e ON u.name = e.name  WHERE e.organ = 'marines';
SELECT DIVIDE(SUM(las.month), COUNT(las.name)) AS average_absence_duration FROM longest_absense_from_school las JOIN disabled d ON las.name = d.name;
SELECT      (COUNT(CASE WHEN la.month > 5 THEN 1 END) * 100.0 / COUNT(la.month)) AS percentage FROM      unemployed u JOIN      longest_absense_from_school la ON u.name = la.name;
SELECT COUNT(DISTINCT u.name)  FROM unemployed u  JOIN disabled d ON u.name = d.name  JOIN longest_absense_from_school l ON u.name = l.name  WHERE l.month = 8;
SELECT u.name  FROM unemployed u  JOIN longest_absense_from_school l ON u.name = l.name  WHERE l.month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT u.name  FROM unemployed u  LEFT JOIN longest_absense_from_school l ON u.name = l.name  WHERE l.month = 0 OR l.month IS NULL;
SELECT COUNT(DISTINCT d.name)  FROM disabled d  JOIN longest_absense_from_school l ON d.name = l.name  WHERE l.month = 3;
SELECT f.name  FROM filed_for_bankrupcy f  LEFT JOIN longest_absense_from_school l ON f.name = l.name  WHERE l.month = 0 OR l.month IS NULL;
SELECT f.name FROM filed_for_bankrupcy f JOIN longest_absense_from_school l ON f.name = l.name WHERE l.month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT CASE             WHEN EXISTS (SELECT 1 FROM male WHERE name = 'student1000') THEN 'Male'             ELSE 'Female'         END AS gender;
SELECT COUNT(*) FROM disabled;
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month > 6;
SELECT name, MAX(month) AS max_absent FROM longest_absense_from_school GROUP BY name ORDER BY max_absent DESC;
SELECT COUNT(*) FROM enlist WHERE organ = 'army';
SELECT name, DIVIDE(SUM(month), COUNT(name)) AS average_absences FROM longest_absense_from_school GROUP BY name;
SELECT COUNT(*) AS total_enlisted FROM enlist WHERE organ IN ('foreign_legion', 'peace_corps', 'army');
SELECT COUNT(DISTINCT e.name)  FROM enlist e  JOIN disabled d ON e.name = d.name  WHERE e.organ = 'marines';
SELECT COUNT(*)  FROM unemployed u  JOIN no_payment_due n ON u.name = n.name  WHERE n.bool = 'pos';
SELECT p.name  FROM person p  LEFT JOIN longest_absense_from_school l ON p.name = l.name  WHERE l.month = 0 OR l.month IS NULL  AND p.name NOT IN (SELECT name FROM male);
SELECT school, COUNT(disabled.name) AS disabled_count FROM disabled JOIN enrolled ON disabled.name = enrolled.name GROUP BY school ORDER BY disabled_count DESC LIMIT 1;
SELECT e.organ  FROM filed_for_bankrupcy f  JOIN enlist e ON f.name = e.name;
SELECT COUNT(DISTINCT e.name) AS male_students FROM enlist e JOIN male m ON e.name = m.name GROUP BY e.name HAVING COUNT(e.organ) > 1;
SELECT e.name  FROM enlist e  JOIN disabled d ON e.name = d.name  WHERE e.organ = 'navy';
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month = 7 AND name IN (SELECT name FROM enrolled WHERE school = 'smc');
SELECT p.name  FROM person p  JOIN disabled d ON p.name = d.name  JOIN female f ON p.name = f.name;
SELECT      COUNT(u.name) * 1.0 / COUNT(d.name) AS ratio FROM      unemployed u,      disabled d;
SELECT      (COUNT(CASE WHEN e.organ = 'fire_department' THEN 1 END) * 100.0) / COUNT(m.name) AS percentage FROM      male m JOIN      enlist e ON m.name = e.name;
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month = 5;
SELECT COUNT(*) FROM enlist WHERE organ = 'army';
SELECT COUNT(*) FROM enrolled WHERE school = 'ucla';
SELECT name, MAX(month) AS longest_absence FROM longest_absense_from_school GROUP BY name ORDER BY longest_absence DESC LIMIT 5;
SELECT COUNT(name)  FROM enlist  GROUP BY name  HAVING COUNT(organ) >= 2;
SELECT COUNT(*) FROM enlist WHERE organ = 'navy';
SELECT COUNT(m.name)  FROM male m  LEFT JOIN no_payment_due npd ON m.name = npd.name AND npd.bool = 'neg'  WHERE npd.name IS NOT NULL;
SELECT COUNT(DISTINCT e.name)  FROM enlist e  JOIN enrolled en ON e.name = en.name  WHERE e.organ = 'peace_corps' AND en.school = 'ucsd';
SELECT COUNT(*)  FROM unemployed  WHERE name IN (SELECT name FROM no_payment_due WHERE bool = 'neg');
SELECT COUNT(DISTINCT p.name)  FROM person p  LEFT JOIN male m ON p.name = m.name  JOIN no_payment_due n ON p.name = n.name  WHERE m.name IS NULL AND n.bool = 'neg';
SELECT COUNT(DISTINCT u.name)  FROM unemployed u  LEFT JOIN longest_absense_from_school l ON u.name = l.name  WHERE l.month = 0 OR l.month IS NULL;
SELECT DISTINCT n.name FROM no_payment_due n JOIN enlist e ON n.name = e.name WHERE n.bool = 'neg' AND e.organ = 'fire_department' LIMIT 10;
SELECT COUNT(DISTINCT e.name)  FROM enlist e  WHERE e.organ = 'navy'  AND e.name NOT IN (SELECT m.name FROM male m);
SELECT COUNT(DISTINCT u.name)  FROM unemployed u  JOIN enlist e ON u.name = e.name  WHERE e.organ = 'army';
SELECT COUNT(*)  FROM unemployed u  JOIN no_payment_due n ON u.name = n.name  WHERE n.bool = 'pos';
SELECT DISTINCT e.name FROM enrolled e JOIN no_payment_due np ON e.name = np.name JOIN enlist en ON e.name = en.name WHERE np.bool = 'pos' AND en.organ = 'Peace Corps' LIMIT 5;
SELECT COUNT(DISTINCT d.name)  FROM disabled d  WHERE d.name NOT IN (SELECT m.name FROM male m);
SELECT COUNT(DISTINCT d.name)  FROM disabled d  JOIN no_payment_due npd ON d.name = npd.name  WHERE npd.bool = 'pos';
SELECT AVG(female_count) AS average_female_disabled FROM (     SELECT COUNT(disabled.name) AS female_count     FROM disabled     WHERE disabled.name NOT IN (SELECT name FROM male)     AND disabled.name IN (SELECT name FROM enlist WHERE organ = 'Foreign Legion') ) AS subquery;
SELECT      CONCAT(MULTIPLY(DIVIDE(COUNT(enlist.name) FILTER (WHERE enlist.name NOT IN (SELECT name FROM male)) , COUNT(enlist.name)), 100), '%') AS FEMALE,     CONCAT(MULTIPLY(DIVIDE(COUNT(enlist.name) FILTER (WHERE enlist.name IN (SELECT name FROM male)), COUNT(enlist.name)), 100), '%') AS MALE FROM      enlist WHERE      organ = 'fire_department';
SELECT COUNT(*) FROM enlist WHERE organ = 'navy';
SELECT CONCAT(DIVIDE(MULTIPLY(COUNT(name WHERE month = 0), 100), COUNT(name)),'%') AS percentage_never_absent FROM longest_absense_from_school;
SELECT      DIVIDE(COUNT(CASE WHEN bool = 'pos' THEN name END),             COUNT(CASE WHEN bool = 'neg' THEN name END)) AS payment_due_ratio FROM      no_payment_due;
SELECT name, school FROM enrolled WHERE month = 15;
SELECT AVG(enlisted_count) AS average_enlisted_students FROM (     SELECT organ, COUNT(name) AS enlisted_count     FROM enlist     GROUP BY organ ) AS org_counts;
SELECT school, month FROM enrolled WHERE name = 'student214';
SELECT CONCAT(DIVIDE(MULTIPLY(COUNT(disabled.name), 100), COUNT(person.name) - COUNT(disabled.name)), '%') AS disabled_percentage FROM person LEFT JOIN disabled ON person.name = disabled.name;
SELECT COUNT(*)  FROM disabled  WHERE name IN (     SELECT name      FROM longest_absense_from_school      WHERE month = 9 );
SELECT person.name  FROM person  WHERE person.name NOT IN (SELECT filed_for_bankrupcy.name FROM filed_for_bankrupcy);
SELECT e.name  FROM enlist e  WHERE e.organ = 'air_force'  AND e.name NOT IN (SELECT m.name FROM male m)  LIMIT 5;
SELECT COUNT(*)  FROM person  WHERE name NOT IN (SELECT name FROM disabled);
SELECT      CASE          WHEN male.name = 'student995' THEN 'male'          ELSE 'female'      END AS gender,     enrolled.school  FROM      enrolled  LEFT JOIN      male ON enrolled.name = male.name  WHERE      enrolled.name = 'student995';
SELECT d.name  FROM disabled d  JOIN unemployed u ON d.name = u.name  LIMIT 5;
SELECT COUNT(*)  FROM unemployed  WHERE name IN (SELECT name FROM filed_for_bankrupcy);
SELECT p.name, e.organ FROM longest_absense_from_school las JOIN person p ON las.name = p.name JOIN enlist e ON p.name = e.name WHERE las.month = 4 LIMIT 5;
SELECT COUNT(*)  FROM no_payment_due  WHERE name IN (SELECT name FROM bool WHERE bool = 'pos')  AND name IN (SELECT name FROM unemployed);
SELECT e.organ, np.bool  FROM enlist e  JOIN no_payment_due np ON e.name = np.name  WHERE e.name = 'student160';
SELECT DISTINCT m.name  FROM male m  JOIN enlist e ON m.name = e.name  WHERE e.organ = 'foreign_legion'  LIMIT 10;
SELECT CONCAT(DIVIDE(COUNT(person.name) - COUNT(male.name), COUNT(person.name)) * 100, '%') AS female_percentage FROM person LEFT JOIN male ON person.name = male.name;
SELECT COUNT(*) FROM filed_for_bankrupcy;
SELECT COUNT(*) FROM enrolled WHERE school = 'smc' AND month = 1;
SELECT COUNT(*)  FROM enlist  WHERE organ = 'air_force';
SELECT organ FROM enlist WHERE name = 'student168';
SELECT COUNT(DISTINCT e.name)  FROM disabled d  JOIN male m ON d.name = m.name  JOIN enlist e ON d.name = e.name;
SELECT e.school, COUNT(d.name) AS disabled_count FROM enrolled e LEFT JOIN disabled d ON e.name = d.name GROUP BY e.school;
SELECT e.organ,         COUNT(m.name) AS male_count,         COUNT(e.name) - COUNT(m.name) AS female_count FROM enlist e LEFT JOIN male m ON e.name = m.name GROUP BY e.organ;
SELECT name FROM (     SELECT name, COUNT(DISTINCT school) AS school_count, COUNT(DISTINCT organ) AS organ_count     FROM enrolled     LEFT JOIN enlist ON enrolled.name = enlist.name     GROUP BY name ) AS counts WHERE school_count = 2 AND organ_count = 2;
SELECT CONCAT(DIVIDE(MULTIPLY(SUBTRACT(COUNT(CASE WHEN month = 0 THEN name END), COUNT(CASE WHEN month = 9 THEN name END)), 100), COUNT(CASE WHEN month = 0 THEN name END)),'%') AS percentage_difference FROM longest_absense_from_school;
SELECT school, COUNT(*) AS enrollment_count,         (SELECT COUNT(*) FROM filed_for_bankrupcy WHERE name IN (SELECT name FROM enrolled WHERE school = e.school)) AS bankruptcy_count FROM enrolled e GROUP BY school HAVING COUNT(*) = (SELECT MAX(enrollment_count) FROM (SELECT COUNT(*) AS enrollment_count FROM enrolled GROUP BY school) AS subquery);
SELECT COUNT(*)  FROM disabled  JOIN unemployed ON disabled.name = unemployed.name;
SELECT e.name  FROM enrolled e  JOIN enlist en ON e.name = en.name  WHERE e.school = 'occ' AND en.organ = 'fire_department';
SELECT m.name  FROM male m  JOIN unemployed u ON m.name = u.name  JOIN disabled d ON u.name = d.name  JOIN longest_absense_from_school a ON d.name = a.name  WHERE a.month = 5;
SELECT e.name  FROM enrolled e  WHERE e.school IN ('occ', 'ulca')  AND e.name NOT IN (SELECT m.name FROM male m);
SELECT e.school, en.organ  FROM enrolled e  JOIN enlist en ON e.name = en.name  WHERE e.name = 'student211';
SELECT      (SELECT COUNT(*) FROM filed_for_bankrupcy WHERE name IN (SELECT name FROM male)) AS male_bankruptcies,     (SELECT COUNT(*) FROM filed_for_bankrupcy WHERE name NOT IN (SELECT name FROM male)) AS female_bankruptcies;
SELECT AVG(las.month) AS average_absent_month FROM longest_absense_from_school las JOIN unemployed u ON las.name = u.name JOIN male m ON u.name = m.name;
SELECT      (COUNT(CASE WHEN d.name IS NOT NULL THEN l.name END) * 100.0 / NULLIF(COUNT(l.name), 0)) AS disabled_attendance_percentage,     (COUNT(CASE WHEN d.name IS NULL THEN l.name END) * 100.0 / NULLIF(COUNT(l.name), 0)) AS non_disabled_attendance_percentage,     (COUNT(CASE WHEN d.name IS NOT NULL THEN l.name END) - COUNT(CASE WHEN d.name IS NULL THEN l.name END)) AS attendance_difference,     CASE          WHEN COUNT(CASE WHEN d.name IS NOT NULL THEN l.name END) < COUNT(CASE WHEN d.name IS NULL THEN l.name END) THEN 'Disabled students have better attendance'         ELSE 'Disabled students do not have better attendance'     END AS attendance_comparison FROM      longest_absense_from_school l LEFT JOIN      disabled d ON l.name = d.name;
SELECT DIVIDE(SUM(l.month), COUNT(l.month)) AS average_duration FROM longest_absense_from_school l JOIN disabled d ON l.name = d.name JOIN male m ON d.name = m.name;
SELECT CONCAT(DIVIDE(MULTIPLY(COUNT(u.name WHERE la.month = 0), 100), COUNT(la.month)), '%') AS ratio FROM unemployed u LEFT JOIN longest_absense_from_school la ON u.name = la.name;
SELECT COUNT(*)  FROM male  WHERE name NOT IN (SELECT name FROM no_payment_due WHERE bool = 'pos');
SELECT COUNT(*)  FROM filed_for_bankrupcy f  JOIN no_payment_due n ON f.name = n.name  WHERE n.bool = 'pos';
SELECT bool FROM no_payment_due WHERE name = 'student124';
SELECT COUNT(DISTINCT d.name) AS disabled_students_with_payment_due FROM disabled d JOIN no_payment_due np ON d.name = np.name WHERE np.bool = 'pos';
SELECT la.name FROM longest_absense_from_school la JOIN no_payment_due np ON la.name = np.name WHERE la.month = (SELECT MAX(month) FROM longest_absense_from_school) AND np.bool = 'neg';
SELECT l.name  FROM longest_absense_from_school l  JOIN no_payment_due n ON l.name = n.name  WHERE l.month = 5 AND n.bool = 'neg';
SELECT COUNT(DISTINCT d.name) AS disabled_students_count FROM disabled d JOIN enlist e ON d.name = e.name WHERE e.organ = 'marines';
SELECT COUNT(*)  FROM longest_absense_from_school las  JOIN enlist e ON las.name = e.name  WHERE las.month = (SELECT MAX(month) FROM longest_absense_from_school)  AND e.organ = 'peace_corps';
SELECT COUNT(DISTINCT f.name) AS number_of_students FROM filed_for_bankrupcy f JOIN enlist e ON f.name = e.name WHERE e.organ = 'navy';
SELECT COUNT(*)  FROM enlist e  JOIN no_payment_due np ON e.name = np.name  WHERE e.organ = 'marines' AND np.bool = 'pos';
SELECT      (SUM(CASE WHEN la.month = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(d.name)) AS ratio FROM      disabled d LEFT JOIN      longest_absense_from_school la ON d.name = la.name;
SELECT COUNT(*) FROM enlist WHERE organ = 'air_force';
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month < 4;
SELECT COUNT(DISTINCT e.name)  FROM enlist e  WHERE e.organ = 'marines'  AND e.name NOT IN (SELECT m.name FROM male m);
SELECT DIVIDE(SUM(las.month), COUNT(las.name)) AS average_duration FROM longest_absense_from_school las WHERE las.name NOT IN (SELECT m.name FROM male m);
SELECT f.name  FROM filed_for_bankrupcy f  WHERE f.name NOT IN (SELECT m.name FROM male m);
SELECT bool FROM no_payment_due WHERE name = 'student299';
SELECT COUNT(*) FROM enlist WHERE organ = 'air_force';
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month > 1;
SELECT name FROM enlist WHERE organ = 'fire_department';
SELECT COUNT(DISTINCT d.name)  FROM disabled d  JOIN no_payment_due npd ON d.name = npd.name  WHERE npd.bool = 'pos';
SELECT COUNT(DISTINCT f.name)  FROM filed_for_bankrupcy f  JOIN enrolled e ON f.name = e.name  WHERE e.school = 'occ';
SELECT COUNT(DISTINCT d.name) AS disabled_male_count FROM disabled d JOIN male m ON d.name = m.name;
SELECT d.name  FROM disabled d  JOIN enlist e ON d.name = e.name  WHERE e.organ = 'navy';
SELECT m.name FROM male m JOIN no_payment_due npd ON m.name = npd.name WHERE npd.bool = 'pos';
SELECT      CASE          WHEN u.name IS NOT NULL THEN 'unemployed'          ELSE 'employed'      END AS employment_status,     CASE          WHEN n.bool = 'pos' THEN 'payment due'          ELSE 'no payment due'      END AS payment_status FROM      unemployed u FULL OUTER JOIN      no_payment_due n ON u.name = n.name WHERE      COALESCE(u.name, n.name) = 'student110';
SELECT (COUNT(male.name) * 100.0 / COUNT(person.name)) AS percentage_of_male_students FROM person LEFT JOIN male ON person.name = male.name;
SELECT e.school,         CASE WHEN m.name IS NOT NULL THEN 'male' ELSE 'female' END AS gender FROM enrolled e LEFT JOIN male m ON e.name = m.name WHERE e.name = 'student34';
SELECT MAX(l.month) AS longest_absence FROM longest_absense_from_school l JOIN enlist e ON l.name = e.name WHERE e.organ = 'fire_department';
SELECT COUNT(DISTINCT e.name)  FROM longest_absense_from_school las  JOIN enlist e ON las.name = e.name  WHERE las.month = 1 AND e.organ = 'air_force';
SELECT disabled.name  FROM disabled  JOIN male ON disabled.name = male.name  JOIN unemployed ON disabled.name = unemployed.name;
SELECT COUNT(*)  FROM enrolled e  JOIN male m ON e.name = m.name  WHERE e.school = 'occ';
SELECT      (COUNT(male.name) * 100.0 / COUNT(person.name)) AS percentage FROM      enrolled  JOIN      person ON enrolled.name = person.name  JOIN      male ON person.name = male.name  JOIN      enlist ON person.name = enlist.name  WHERE      enrolled.school = 'ucla' AND enlist.organ = 'air_force';
SELECT AVG(disabled_count) AS average_disabled_female_students FROM (     SELECT COUNT(*) AS disabled_count     FROM disabled     WHERE name NOT IN (SELECT name FROM male)     AND name IN (SELECT name FROM enrolled WHERE school = 'uci') ) AS subquery;
SELECT COUNT(DISTINCT e.name) AS students_never_absent FROM enrolled e LEFT JOIN longest_absense_from_school l ON e.name = l.name WHERE l.month IS NULL OR l.month = 0;
SELECT name FROM enlist WHERE organ = 'marines';
SELECT COUNT(*) FROM enlist WHERE organ = 'navy';
SELECT name FROM longest_absense_from_school WHERE month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT organ FROM enlist GROUP BY organ ORDER BY COUNT(name) DESC LIMIT 1;
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month < 3;
SELECT COUNT(DISTINCT u.name) AS unemployed_count FROM no_payment_due npd JOIN unemployed u ON npd.name = u.name WHERE npd.bool = 'pos';
SELECT COUNT(DISTINCT e.name)  FROM enlist e  WHERE e.organ = 'army'  AND e.name NOT IN (SELECT m.name FROM male m);
SELECT organ, COUNT(male.name) AS male_count FROM enlist JOIN male ON enlist.name = male.name GROUP BY organ ORDER BY male_count ASC LIMIT 1;
SELECT COUNT(DISTINCT d.name)  FROM disabled d  LEFT JOIN longest_absense_from_school l ON d.name = l.name  WHERE l.month = 0 OR l.month IS NULL;
SELECT COUNT(*)  FROM unemployed  WHERE name IN (SELECT name FROM disabled);
SELECT d.name  FROM disabled d  JOIN longest_absense_from_school l ON d.name = l.name  WHERE l.month > 5;
SELECT COUNT(DISTINCT f.name)  FROM filed_for_bankrupcy f  JOIN enlist e ON f.name = e.name  WHERE e.organ = 'marines';
SELECT COUNT(DISTINCT d.name) AS disabled_students_count FROM filed_for_bankrupcy f JOIN disabled d ON f.name = d.name;
SELECT MAX(month_count)  FROM (     SELECT COUNT(l.month) AS month_count     FROM enlist e     JOIN longest_absense_from_school l ON e.name = l.name     WHERE e.organ = 'air_force'     GROUP BY e.name ) AS subquery;
SELECT COUNT(DISTINCT e.name)  FROM filed_for_bankrupcy f  JOIN longest_absense_from_school l ON f.name = l.name  JOIN enlist e ON f.name = e.name  WHERE l.month < 6 AND e.organ = 'fire_department';
SELECT COUNT(DISTINCT d.name)  FROM disabled d  LEFT JOIN unemployed u ON d.name = u.name  LEFT JOIN longest_absense_from_school a ON d.name = a.name  WHERE u.name IS NULL AND (a.month IS NULL OR a.month = 0);
SELECT e.organ,         COUNT(m.name) AS male_count,         (COUNT(m.name) * 1.0 / COUNT(p.name)) * 100 AS male_percentage FROM enlist e JOIN male m ON e.name = m.name JOIN person p ON e.name = p.name GROUP BY e.organ ORDER BY male_count DESC LIMIT 1;
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE QuestionID = 19 AND AnswerText = 'No';
SELECT YEAR(SurveyID) AS Year, COUNT(DISTINCT UserID) AS UserCount FROM Answer WHERE QuestionID = 13 AND SurveyID BETWEEN 2016 AND 2019 GROUP BY YEAR(SurveyID);
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE AnswerText BETWEEN '27' AND '35'  AND SurveyID IN (SELECT SurveyID FROM Survey WHERE YEAR(Description) = 2018);
SELECT COUNT(DISTINCT a.UserID)  FROM Answer a  JOIN Survey s ON a.SurveyID = s.SurveyID  WHERE s.SurveyID = 2019  AND a.QuestionID = 3 AND a.AnswerText = 'United States'  AND a.QuestionID = 6 AND a.AnswerText = 'Yes';
SELECT YEAR(SurveyID) AS Year, COUNT(DISTINCT UserID) AS NumberOfPeople FROM Answer WHERE SurveyID BETWEEN 2016 AND 2019 AND AnswerText = 'Yes' AND QuestionID = 34 GROUP BY YEAR(SurveyID) ORDER BY NumberOfPeople DESC LIMIT 1;
SELECT COUNT(DISTINCT a.UserID)  FROM Answer a JOIN Question q ON a.QuestionID = q.questionid JOIN Survey s ON a.SurveyID = s.SurveyID WHERE (q.questiontext = 'Gender' AND a.AnswerText = 'Female')   AND (q.questiontext = 'State' AND a.AnswerText = 'Nebraska')   AND s.Description LIKE '%2017%';
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE AnswerText = 'Yes' AND QuestionID = 54;
SELECT      MAX(CASE WHEN AnswerText = (SELECT MAX(AnswerText) FROM Answer WHERE QuestionID = 1) THEN UserID END) AS OldestUserID,     MAX(CASE WHEN AnswerText = (SELECT MIN(AnswerText) FROM Answer WHERE QuestionID = 1) THEN UserID END) AS YoungestUserID FROM Answer WHERE QuestionID = 1;
SELECT Country FROM Answer JOIN Survey ON Answer.SurveyID = Survey.SurveyID WHERE QuestionID = 3 GROUP BY Country HAVING COUNT(UserID) = (     SELECT MIN(UserCount)     FROM (         SELECT COUNT(UserID) AS UserCount         FROM Answer         JOIN Survey ON Answer.SurveyID = Survey.SurveyID         WHERE QuestionID = 3         GROUP BY Country     ) AS CountryCounts );
SELECT AVG(CAST(a.AnswerText AS INT)) AS AverageAge FROM Answer a JOIN Question q1 ON a.QuestionID = q1.questionid JOIN Answer a2 ON a.UserID = a2.UserID JOIN Question q2 ON a2.QuestionID = q2.questionid WHERE q1.questionid = 1 AND q2.questionid = 3 AND a2.AnswerText = 'United States';
SELECT      (SUM(CASE WHEN a.AnswerText IN ('Yes', 'Maybe') THEN 1 ELSE 0 END) * 100.0) / COUNT(a.QuestionID) AS Percentage FROM      Answer a WHERE      a.QuestionID = 12;
SELECT COUNT(DISTINCT QuestionID)  FROM Answer  WHERE SurveyID = 2014  GROUP BY QuestionID  HAVING COUNT(AnswerText) > 200;
SELECT MAX(CAST(A.AnswerText AS INT)) AS OldestAge FROM Answer A JOIN Question Q ON A.QuestionID = Q.questionid WHERE Q.questiontext = 'What is your age?' AND A.SurveyID = 2014;
SELECT COUNT(DISTINCT a.UserID)  FROM Answer a JOIN Question q ON a.QuestionID = q.questionid WHERE a.SurveyID = 2014    AND a.AnswerText = 'No'    AND q.questiontext = 'Would you bring up a mental health issue with a potential employer in an interview?';
SELECT DISTINCT a.UserID FROM Answer a JOIN Survey s ON a.SurveyID = s.SurveyID JOIN Question q ON a.QuestionID = q.questionid WHERE a.AnswerText = 'Yes'   AND q.questiontext = 'Do you think that discussing a physical health issue with your employer would have negative consequences?'   AND s.SurveyID = 2014;
SELECT COUNT(DISTINCT UserID) AS NumberOfUsers FROM Answer WHERE SurveyID = 2014;
SELECT a.AnswerText FROM Answer a JOIN Question q ON a.QuestionID = q.questionid JOIN Survey s ON a.SurveyID = s.SurveyID WHERE q.questiontext = 'Any additional notes or comments' AND a.AnswerText IS NOT NULL AND s.Description LIKE '%2014%';
SELECT q.questiontext FROM Question q JOIN Answer a1 ON q.questionid = a1.QuestionID JOIN Survey s1 ON a1.SurveyID = s1.SurveyID JOIN Answer a2 ON q.questionid = a2.QuestionID JOIN Survey s2 ON a2.SurveyID = s2.SurveyID WHERE s1.Description = '2014' AND s2.Description = '2016' GROUP BY q.questiontext;
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE AnswerText = 'Canada'    AND QuestionID = 3    AND SurveyID = (SELECT SurveyID FROM Survey WHERE Description = '2018');
SELECT q.questiontext  FROM Question q JOIN Answer a ON q.questionid = a.QuestionID WHERE a.SurveyID = 2014;
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE QuestionID = 32 AND AnswerText = 'Yes'  AND SurveyID = (SELECT SurveyID FROM Survey WHERE Description = '2016');
SELECT COUNT(DISTINCT a.UserID) AS UserCount FROM Answer a JOIN Question q ON a.QuestionID = q.questionid WHERE q.questiontext = 'Have you had a mental health disorder in the past?'   AND a.AnswerText = 'Yes'   AND a.SurveyID IN (2016, 2017, 2018);
SELECT AVG(CAST(A.AnswerText AS INT)) AS AverageAge FROM Answer A JOIN Question Q ON A.QuestionID = Q.questionid WHERE Q.questiontext = 'What is your age?' AND A.SurveyID = 2014;
SELECT      (COUNT(CASE WHEN SurveyID = 2019 AND QuestionID = 33 AND AnswerText = 'Yes' THEN 1 END) * 1.0 / COUNT(CASE WHEN SurveyID = 2019 AND QuestionID = 33 THEN 1 END)) -      (COUNT(CASE WHEN SurveyID = 2016 AND QuestionID = 33 AND AnswerText = 'Yes' THEN 1 END) * 1.0 / COUNT(CASE WHEN SurveyID = 2016 AND QuestionID = 33 THEN 1 END)) AS rate_of_increase FROM Answer;
SELECT questionid FROM Question WHERE questiontext = 'Would you bring up a physical health issue with a potential employer in an interview?';
SELECT COUNT(DISTINCT UserID) AS NumberOfUsers FROM Answer WHERE QuestionID = 20;
SELECT COUNT(*)  FROM Answer  WHERE UserID = 5;
SELECT COUNT(DISTINCT UserID) AS NumberOfUsers FROM Answer WHERE SurveyID = 2016;
SELECT COUNT(*)  FROM Question  WHERE questionid IN (SELECT QuestionID FROM Answer WHERE SurveyID = 2018);
SELECT COUNT(DISTINCT SurveyID)  FROM Answer  WHERE QuestionID = (SELECT questionid FROM Question WHERE questiontext = 'What country do you work in?');
SELECT a.AnswerText  FROM Answer a  JOIN Question q ON a.QuestionID = q.questionid  WHERE a.UserID = 2681 AND q.questiontext = 'Do you currently have a mental health disorder?';
SELECT COUNT(DISTINCT UserID) AS NumberOfUsers FROM Answer WHERE SurveyID = 2016;
SELECT AnswerText FROM Answer WHERE QuestionID = (SELECT questionid FROM Question WHERE questiontext = 'What country do you work in?') GROUP BY AnswerText ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT AnswerText) AS DifferentAnswers FROM Answer WHERE QuestionID = (SELECT questionid FROM Question WHERE questiontext = 'Describe the conversation you had with your previous employer about your mental health, including their reactions and actions taken to address your mental health issue/questions.');
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE QuestionID = (SELECT questionid FROM Question WHERE questiontext = 'What US state or territory do you work in?')  AND AnswerText = 'Kansas';
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE QuestionID = 103 AND AnswerText != '-1';
SELECT COUNT(DISTINCT a.UserID) AS YesCount FROM Answer a JOIN Question q ON a.QuestionID = q.questionid WHERE q.questiontext = 'Have you ever been diagnosed with a mental health disorder?' AND a.AnswerText = 'Yes';
SELECT COUNT(DISTINCT UserID) AS NumberOfUsers FROM Answer WHERE SurveyID = 2018;
SELECT COUNT(DISTINCT UserID) AS UserCount FROM Answer WHERE QuestionID = (SELECT questionid FROM Question WHERE questiontext = 'Overall, how much importance does your employer place on physical health?');
SELECT q.questiontext  FROM Question q  JOIN Answer a ON q.questionid = a.QuestionID  WHERE a.UserID = 2183 AND a.AnswerText = 'Mood Disorder (Depression, Bipolar Disorder, etc)';
SELECT      (COUNT(CASE WHEN AnswerText = 'Yes' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      Answer WHERE      QuestionID = (SELECT questionid FROM Question WHERE questiontext = 'Has your employer ever formally discussed mental health (for example, as part of a wellness campaign or other official communication)?');
SELECT      (SELECT COUNT(DISTINCT UserID) FROM Answer WHERE SurveyID = 2017) -      (SELECT COUNT(DISTINCT UserID) FROM Answer WHERE SurveyID = 2018) AS Difference
SELECT      (COUNT(CASE WHEN AnswerText = 'Yes' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      Answer WHERE      SurveyID = 2016 AND      QuestionID = 32;
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE SurveyID = 2016 AND QuestionID = 1 AND CAST(AnswerText AS INT) < 25;
SELECT AVG(respondent_count) AS average_respondents FROM (     SELECT SurveyID, COUNT(DISTINCT UserID) AS respondent_count     FROM Answer     WHERE SurveyID IN (SELECT SurveyID FROM Survey WHERE SurveyID BETWEEN 2014 AND 2019)     GROUP BY SurveyID ) AS survey_counts;
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE SurveyID = 2019 AND QuestionID = 7 AND AnswerText = '1';
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE SurveyID = 2014 AND QuestionID = 93 AND AnswerText = 'Yes';
SELECT COUNT(*) AS NumberOfQuestions FROM Question;
SELECT COUNT(DISTINCT UserID) AS RespondentCount FROM Answer WHERE AnswerText = 'Substance Use Disorder';
SELECT AnswerText, COUNT(*) AS response_count FROM Answer WHERE SurveyID = 2017 AND QuestionID = 85 GROUP BY AnswerText ORDER BY response_count DESC LIMIT 3;
SELECT      (SUM(CASE WHEN Year = 1998 THEN Studio_Entertainment_NI_1 ELSE 0 END) -       SUM(CASE WHEN Year = 1997 THEN Studio_Entertainment_NI_1 ELSE 0 END)) AS revenue_difference FROM revenue;
SELECT      CASE          WHEN "Studio Entertainment[NI 1]" > "Disney Media Networks" THEN 'Studio Entertainment'          ELSE 'Disney Media Networks'      END AS Higher_Revenue_Segment FROM revenue WHERE Year = 1998;
SELECT director FROM director WHERE name = 'Pinocchio';
SELECT DISTINCT c.villian FROM characters c JOIN director d ON c.movie_title = d.movie WHERE d.director = 'Wolfgang Reitherman';
SELECT COUNT(*)  FROM movies_total_gross  WHERE movie_title IN (     SELECT movie_title      FROM director      WHERE director = 'Wolfgang Reitherman' )  AND SUBSTR(release_date, INSTR(release_date, '-') + 1, 3) = 'Dec';
SELECT d.name  FROM characters c  JOIN director d ON c.movie_title = d.director  WHERE c.song = 'Once Upon a Dream';
SELECT va.voice_actor  FROM characters AS c  JOIN voice_actors AS va ON c.villian LIKE '%' || va.character || '%'  WHERE c.movie_title = 'Alice in Wonderland';
SELECT m.release_date FROM voice-actors v JOIN characters m ON v.movie = m.movie_title WHERE v.voice-actor = 'Alan Tudyk';
SELECT COUNT(*)  FROM voice-actors va  JOIN characters c ON va.movie = c.movie_title  WHERE va.voice-actor = 'Alan Tudyk'  AND (SUBSTR(c.release_date, INSTR(c.release_date, '-') + 1) > '2012');
SELECT COUNT(m.movie_title)  FROM movies_total_gross m  JOIN director d ON m.movie_title = d.movie  WHERE d.director = 'Wolfgang Reitherman' AND m.genre = 'Comedy';
SELECT mt.movie_title, mt.total_gross FROM movies_total_gross mt JOIN director d ON mt.movie_title = d.movie WHERE d.director = 'Wolfgang Reitherman' ORDER BY mt.total_gross DESC LIMIT 1;
SELECT mt.movie_title  FROM director d  JOIN movies_total_gross mt ON d.movie_title = mt.movie_title  WHERE d.director = 'Wolfgang Reitherman' AND mt.MPAA_rating = 'G';
SELECT c.villian FROM characters c JOIN movies_total_gross m ON c.movie_title = m.movie_title WHERE m.total_gross = (SELECT MAX(total_gross) FROM movies_total_gross);
SELECT mt.genre  FROM characters c  JOIN movies_total_gross mt ON c.movie_title = mt.movie_title  WHERE c.villian = 'Commander Rourke';
SELECT villian FROM characters WHERE movie_title = 'Beauty and the Beast';
SELECT movie_title  FROM characters  WHERE hero = 'Robin Hood';
SELECT movie_title  FROM characters  WHERE song = 'I Thought I Lost You';
SELECT voice-actor FROM voice-actors WHERE character = 'Binkie Muddlefoot';
SELECT hero  FROM characters  WHERE movie_title = (SELECT movie_title                       FROM movies_total_gross                       WHERE total_gross = 222527828);
SELECT c.song FROM characters c JOIN movies_total_gross m ON c.movie_title = m.movie_title WHERE CAST(SUBSTR(m.release_date, INSTR(m.release_date, ', ') + 1) AS INT) BETWEEN 1970 AND 1979 AND m.total_gross = (SELECT MAX(total_gross)                      FROM movies_total_gross                      WHERE CAST(SUBSTR(release_date, INSTR(release_date, ', ') + 1) AS INT) BETWEEN 1970 AND 1979);
SELECT c.hero  FROM characters c  JOIN movies_total_gross m ON c.movie_title = m.movie_title  JOIN director d ON m.movie_title = d.director  WHERE d.name = 'Will Finn';
SELECT va.voice-actor  FROM voice-actors va  JOIN characters c ON va.character = c.hero  WHERE c.movie_title = 'The Little Mermaid';
SELECT d.name  FROM director d  JOIN voice-actors va ON d.director = va.movie  WHERE va.character = 'Aunt Sarah' AND va.voice-actor = 'Verna Felton';
SELECT m.release_date  FROM voice-actors v  JOIN characters c ON v.movie = c.movie_title  JOIN movies_total_gross m ON c.movie_title = m.movie_title  WHERE v.voice-actor = 'Tress MacNeille' AND v.character = 'Hyacinth Hippo';
SELECT d.name  FROM director d  JOIN movies_total_gross m ON d.director = m.movie_title  WHERE m.release_date = 'Mar 30, 2007' AND m.genre = 'Adventure';
SELECT mt.movie_title, mt.inflation_adjusted_gross FROM director d JOIN movies_total_gross mt ON d.director = mt.director WHERE d.name = 'Wolfgang Reitherman' ORDER BY mt.inflation_adjusted_gross DESC LIMIT 1;
SELECT c.hero  FROM characters c  JOIN movies_total_gross m ON c.movie_title = m.movie_title  WHERE m.release_date = '4-Mar-16' AND m.genre = 'Adventure';
SELECT movie_title, total_gross FROM movies_total_gross WHERE movie_title IN (     SELECT movie_title     FROM characters     WHERE hero = 'Donald Duck' ) ORDER BY total_gross DESC LIMIT 1;
SELECT COUNT(*)  FROM director  WHERE director = 'Wolfgang Reitherman';
SELECT director, COUNT(name) AS num_movies FROM director GROUP BY director ORDER BY num_movies DESC LIMIT 1;
SELECT COUNT(*)  FROM movies_total_gross  WHERE MPAA_rating = 'R'  AND genre = 'Horror'  AND CAST(SUBSTR(release_date, INSTR(release_date, ', ') + 1) AS INT) BETWEEN 1990 AND 2015;
SELECT character  FROM voice-actors  WHERE voice-actor = 'Frank Welker';
SELECT total_gross  FROM movies_total_gross  WHERE movie_title IN (     SELECT movie_title      FROM characters      WHERE song = 'Little Wonders' );
SELECT mtg.MPAA_rating FROM characters c JOIN movies_total_gross mtg ON c.movie_title = mtg.movie_title WHERE c.villian = 'Turbo';
SELECT COUNT(DISTINCT m.movie_title)  FROM voice_actors v  JOIN movies_total_gross m ON v.movie = m.movie_title  WHERE v.voice_actor = 'Bill Thompson' AND m.MPAA_rating IN ('PG', 'M');
SELECT COUNT(m.movie_title)  FROM director d  JOIN movies_total_gross m ON d.director = m.director  WHERE d.name = 'Gary Trousdale' AND m.genre = 'Adventure';
SELECT d.name, COUNT(*) AS count FROM voice_actors va JOIN director d ON va.movie = d.director WHERE va.voice_actor = 'Bill Thompson' GROUP BY d.name ORDER BY count DESC LIMIT 1;
SELECT mtg.movie_title FROM movies_total_gross mtg JOIN director d ON mtg.movie_title = d.movie_title WHERE d.director = 'Ron Clements' ORDER BY mtg.total_gross DESC LIMIT 1;
SELECT va.voice-actor  FROM voice-actors va  JOIN movies_total_gross mtg ON va.movie = mtg.movie_title  JOIN director d ON mtg.movie_title = d.director  WHERE d.name = 'Ben Sharpsteen' AND mtg.release_date = 'Feb 9, 1940';
SELECT COUNT(*)  FROM movies_total_gross  WHERE director = 'Ron Clements'    AND MPAA_rating = 'PG'    AND genre = 'Adventure';
SELECT COUNT(*) FROM movies_total_gross WHERE genre = 'Horror';
SELECT villian FROM characters WHERE movie_title = 'The Great Mouse Detective';
SELECT voice-actor FROM voice-actors WHERE movie = 'Meet the Robinsons';
SELECT director, COUNT(*) AS movie_count FROM director GROUP BY director ORDER BY movie_count DESC LIMIT 1;
SELECT Year, "Studio Entertainment[NI 1]" FROM revenue WHERE Year BETWEEN 2000 AND 2010 ORDER BY "Studio Entertainment[NI 1]" DESC LIMIT 1;
SELECT c.song FROM characters c JOIN movies_total_gross m ON c.movie_title = m.movie_title WHERE m.genre = 'Drama';
SELECT va.voice_actor  FROM voice_actors va  JOIN characters c ON va.character = c.hero;
SELECT DISTINCT name  FROM director  WHERE release_date BETWEEN '1990-01-01' AND '1999-12-31';
SELECT voice_actor  FROM voice_actors  WHERE character IN (SELECT villian FROM characters WHERE movie_title = 'The Rescuers');
SELECT m.movie_title, va.voice_actor FROM director d JOIN movies_total_gross m ON d.director = m.director JOIN voice_actors va ON m.movie_title = va.movie WHERE d.name = 'Wolfgang Reitherman';
SELECT c.hero, c.villian  FROM characters c  JOIN movies_total_gross m ON c.movie_title = m.movie_title  WHERE m.MPAA_rating = 'PG';
SELECT movie_title  FROM movies_total_gross  WHERE total_gross = (SELECT MAX(total_gross) FROM movies_total_gross                       JOIN characters ON movies_total_gross.movie_title = characters.movie_title                       WHERE characters.song IS NULL);
SELECT d.name FROM director d JOIN voice_actors va ON d.director = va.movie GROUP BY d.name ORDER BY COUNT(va.voice_actor) DESC LIMIT 1;
SELECT voice-actor  FROM voice-actors  WHERE movie IN (SELECT movie_title FROM characters WHERE release_date = '2010-11-24');
SELECT DISTINCT d.name FROM director d JOIN characters c ON d.director = c.movie_title WHERE c.song IS NOT NULL;
SELECT mtg.total_gross FROM movies_total_gross mtg JOIN voice_actors va ON mtg.movie_title = va.movie WHERE va.voice_actor = 'Jim Cummings';
SELECT m.movie_title, MAX(mt.total_gross) AS highest_total_gross FROM director d JOIN movies_total_gross mt ON d.director = mt.movie_title WHERE d.name = 'Ron Clements' GROUP BY m.movie_title ORDER BY highest_total_gross DESC LIMIT 1;
SELECT AVG(mt.total_gross) AS average_total_gross FROM movies_total_gross mt JOIN voice_actors va ON mt.movie_title = va.movie WHERE va.voice_actor = 'Sterling Holloway';
SELECT      DIVIDE(SUM(mtg.total_gross) WHERE c.song IS NOT NULL, SUM(mtg.total_gross)) AS percentage FROM      movies_total_gross mtg JOIN      characters c ON mtg.movie_title = c.movie_title;
SELECT movie_title, genre  FROM movies_total_gross  WHERE substr(release_date, length(release_date) - 3, length(release_date)) = '2016';
SELECT villian FROM characters WHERE movie_title = 'Little Mermaid';
SELECT movie_title  FROM director  WHERE director = 'Jack Kinney';
SELECT mt.movie_title,         (mt.inflation_adjusted_gross / mt.total_gross) * 100 AS estimated_inflation_rate FROM movies_total_gross mt WHERE mt.total_gross = (SELECT MAX(total_gross) FROM movies_total_gross);
SELECT movie_title, release_date  FROM movies_total_gross  WHERE MPAA_rating = 'PG-13' AND genre = 'Romantic Comedy';
SELECT m.movie_title, v.character FROM voice-actors v JOIN characters m ON v.movie = m.movie_title WHERE v.voice-actor = 'Bill Thompson';
SELECT c.movie_title, c.song FROM characters c JOIN director d ON c.movie_title = d.movie_title WHERE d.director = 'Ron Clements';
SELECT c.movie_title, c.hero, c.song FROM characters c JOIN director d ON c.movie_title = d.movie_title WHERE d.director = 'Wolfgang Reitherman' AND SUBSTR(c.release_date, LENGTH(c.release_date) - 3, LENGTH(c.release_date)) = '1977';
SELECT m.movie_title, d.name AS director FROM characters c JOIN movies_total_gross m ON c.movie_title = m.movie_title JOIN director d ON m.movie_title = d.director WHERE c.hero = 'Donald Duck';
SELECT c.hero, d.name AS director, c.release_date FROM characters c JOIN director d ON c.movie_title = 'Mulan' AND d.director = 'Mulan';
SELECT mtg.movie_title, mtg.total_gross, mtg.MPAA_rating FROM characters c JOIN movies_total_gross mtg ON c.movie_title = mtg.movie_title WHERE c.hero = 'Elsa';
SELECT m.movie_title, d.director, m.release_date FROM voice_actors v JOIN movies_total_gross m ON v.movie = m.movie_title JOIN director d ON m.movie_title = d.name WHERE v.voice_actor = 'Freddie Jones';
SELECT m.movie_title, m.total_gross FROM voice-actors v JOIN movies_total_gross m ON v.movie = m.movie_title WHERE v.voice-actor = 'Frank Welker'  AND (m.inflation_adjusted_gross / m.total_gross) < 2;
SELECT d.name FROM director d JOIN movies_total_gross m ON d.director = m.movie_title WHERE m.total_gross = (SELECT MAX(total_gross) FROM movies_total_gross);
SELECT va.voice_actor, c.villian  FROM voice_actors va  JOIN characters c ON va.movie = c.movie_title  WHERE c.movie_title = 'Cinderella';
SELECT va.voice-actor  FROM voice-actors va  JOIN characters c ON va.character = c.hero  WHERE c.movie_title = 'Lion King';
SELECT d.name, mt.MPAA_rating FROM director d JOIN movies_total_gross mt ON d.director = mt.movie_title WHERE mt.genre = 'Musical' AND substr(mt.release_date, length(mt.release_date) - 3, length(mt.release_date)) = '1993';
SELECT      (COUNT(CASE WHEN mt.genre = 'Comedy' THEN 1 END) * 100.0 / COUNT(mt.movie_title)) AS percentage,     mt.movie_title,     d.name AS director FROM      movies_total_gross mt JOIN      director d ON mt.movie_title = d.director WHERE      SUBSTR(mt.release_date, LENGTH(mt.release_date) - 3, 4) BETWEEN '1991' AND '2000' GROUP BY      mt.movie_title, d.name LIMIT 5;
SELECT mtg.movie_title, d.name AS director FROM movies_total_gross mtg JOIN director d ON mtg.movie_title = d.director WHERE substr(mtg.release_date, length(mtg.release_date) - 3, length(mtg.release_date)) BETWEEN '2001' AND '2005' AND mtg.total_gross > (SELECT AVG(total_gross) * 1.0 * 2 FROM movies_total_gross WHERE substr(release_date, length(release_date) - 3, length(release_date)) BETWEEN '2001' AND '2005');
SELECT voice-actor FROM voice-actors WHERE character = 'Calliope' AND movie = 'Hercules';
SELECT COUNT(*)  FROM voice_actors  WHERE movie = 'Aladdin';
SELECT movie  FROM voice-actors  WHERE voice-actor = 'Jeff Bennett';
SELECT name FROM director WHERE director = 'Wreck-It Ralph';
SELECT movie_title  FROM director  WHERE director = 'Jack Kinney';
SELECT COUNT(*)  FROM movies_total_gross  WHERE SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) BETWEEN '37' AND '50';
SELECT c.song  FROM characters c  JOIN director d ON c.movie_title = d.movie  WHERE d.director = 'Ben Sharpsteen';
SELECT c.release_date  FROM characters c  JOIN director d ON c.movie_title = d.director  WHERE c.movie_title = 'The Lion King' AND d.director = 'Roger Allers';
SELECT c.villian  FROM characters c  JOIN voice_actors va ON c.movie_title = va.movie  WHERE va.voice_actor IN ('Scott Weinger', 'Brad Kane')  GROUP BY c.villian  HAVING COUNT(DISTINCT va.voice_actor) = 2;
SELECT m.movie_title  FROM movies_total_gross m JOIN director d ON m.movie_title = d.director JOIN characters c ON m.movie_title = c.movie_title WHERE d.name = 'Wolfgang Reitherman' AND c.villian IS NULL;
SELECT m.movie_title  FROM director d  JOIN movies_total_gross m ON d.director = m.director  WHERE d.name = 'Jack Kinney' AND substr(m.release_date, length(m.release_date) - 1, length(m.release_date)) < '47';
SELECT DISTINCT d.name FROM director d JOIN movies_total_gross m ON d.director = m.movie_title WHERE m.total_gross > 100000000;
SELECT c.movie_title, c.song, mtg.total_gross FROM characters c JOIN movies_total_gross mtg ON c.movie_title = mtg.movie_title WHERE mtg.total_gross = (SELECT MAX(total_gross) FROM movies_total_gross);
SELECT d.name FROM director d JOIN movies_total_gross m ON d.director = m.movie_title WHERE SUBSTR(m.release_date, LENGTH(m.release_date) - 3, 4) BETWEEN '1937' AND '1990' ORDER BY m.total_gross DESC LIMIT 1;
SELECT c.hero  FROM characters c  JOIN movies_total_gross m ON c.movie_title = m.movie_title  WHERE m.genre = 'Comedy';
SELECT va.voice-actor  FROM voice-actors va  JOIN characters c ON va.character = c.hero OR va.character = c.villian  JOIN director d ON c.movie_title = d.movie  WHERE d.director = 'Wolfgang Reitherman';
SELECT mt.genre  FROM characters c  JOIN movies_total_gross mt ON c.movie_title = mt.movie_title  WHERE c.hero = 'Taran';
SELECT va.voice-actor, d.director FROM characters c JOIN voice-actors va ON c.hero = 'Elsa' AND c.movie_title = va.movie JOIN director d ON c.movie_title = d.name WHERE c.hero = 'Elsa';
SELECT      (COUNT(DISTINCT CASE WHEN mtg.total_gross > 100000000 THEN d.director END) * 100.0 / COUNT(DISTINCT d.director)) AS percentage FROM      director d JOIN      movies_total_gross mtg ON d.name = mtg.movie_title;
SELECT      (COUNT(CASE WHEN m.genre = 'Drama' THEN va.voice_actor END) * 100.0 / COUNT(va.voice_actor)) AS percentage FROM      voice_actors va JOIN      characters c ON va.character = c.hero OR va.character = c.villian JOIN      movies_total_gross m ON c.movie_title = m.movie_title;
SELECT movie_title  FROM movies_total_gross  ORDER BY release_date ASC  LIMIT 1;
SELECT COUNT(movie_title)  FROM movies_total_gross  WHERE substr(release_date, length(release_date) - 1, length(release_date)) BETWEEN '10' AND '16';
SELECT villian  FROM characters  ORDER BY release_date ASC  LIMIT 1;
SELECT movie_title  FROM movies_total_gross  WHERE genre = 'Action'  ORDER BY total_gross DESC  LIMIT 1;
SELECT voice-actor  FROM voice-actors  WHERE character = 'Akela' AND movie = 'The Jungle Book';
SELECT SUM(total_gross) AS total_box_office_gross FROM movies_total_gross WHERE release_date BETWEEN '2010-01-01' AND '2016-12-31';
SELECT hero  FROM characters  WHERE movie_title = (     SELECT movie_title      FROM movies_total_gross      WHERE genre = 'Adventure'      ORDER BY inflation_adjusted_gross DESC      LIMIT 1 );
SELECT d.name  FROM director d  JOIN movies_total_gross m ON d.director = m.movie_title  WHERE m.total_gross = (SELECT MIN(total_gross) FROM movies_total_gross);
SELECT      (SUM(CASE WHEN Year = 2010 THEN [Walt Disney Parks and Resorts] END) * 100.0) /      SUM(CASE WHEN Year = 2010 THEN Total END) AS percentage FROM      revenue;
SELECT AVG(total_gross) AS average_gross FROM movies_total_gross WHERE genre = 'Action' AND MPAA_rating = 'PG-13';
SELECT COUNT(*)  FROM voice-actors  WHERE movie = 'Bambi';
SELECT DIVIDE(inflation_adjusted_gross, total_gross) AS percentage FROM movies_total_gross WHERE SUBSTR(release_date, LENGTH(release_date) - 3, LENGTH(release_date)) = '1995';
SELECT      (SELECT inflation_adjusted_gross FROM movies_total_gross WHERE movie_title = 'Cars') -      (SELECT inflation_adjusted_gross FROM movies_total_gross WHERE movie_title = 'Cars 2') AS gross_difference,     (SELECT movie_title FROM movies_total_gross ORDER BY inflation_adjusted_gross DESC LIMIT 1) AS more_popular_movie;
SELECT      (SELECT movie_title       FROM movies_total_gross       WHERE movie_title IN (SELECT movie_title FROM director WHERE director = 'Chris Buck')       ORDER BY release_date DESC       LIMIT 1) AS most_recent_movie,     (SELECT MAX(inflation_adjusted_gross)       FROM movies_total_gross       WHERE movie_title IN (SELECT movie_title FROM director WHERE director = 'Chris Buck')) AS most_successful_movie_gross
SELECT voice_actor FROM voice_actors GROUP BY voice_actor HAVING COUNT(character) > 5;
SELECT movie_title, inflation_adjusted_gross,        (inflation_adjusted_gross / (SELECT SUM(inflation_adjusted_gross) FROM movies_total_gross) * 100) AS percentage FROM movies_total_gross ORDER BY inflation_adjusted_gross DESC LIMIT 5;
SELECT      DIVIDE(COUNT(CASE WHEN mtg.total_gross > 100000000 THEN mtg.movie_title END), COUNT(mtg.movie_title)) AS percentage FROM      movies_total_gross mtg JOIN      director d ON mtg.movie_title = d.director WHERE      d.name = 'Gary Trousdale';
SELECT COUNT(*)  FROM current  WHERE ballotpedia_id IS NULL OR ballotpedia_id = '';
SELECT official_full_name  FROM current  WHERE cspan_id IS NULL OR cspan_id = '';
SELECT COUNT(*)  FROM current  WHERE birthday_bio > '1960-01-01';
SELECT COUNT(*)  FROM current  WHERE gender_bio = 'F' AND fec_id IS NULL;
SELECT google_entity_id_id  FROM current  WHERE official_full_name = 'Sherrod Brown';
SELECT official_full_name, MAX(birthday_bio) AS max_birthday FROM current WHERE official_full_name IN ('Sherrod Brown', 'Maria Cantwell') GROUP BY official_full_name ORDER BY max_birthday ASC LIMIT 1;
SELECT sm.facebook  FROM current c  JOIN social_media sm ON c.bioguide_id = sm.bioguide  WHERE c.official_full_name = 'Todd Young';
SELECT COUNT(*)  FROM current c LEFT JOIN social_media sm ON c.bioguide_id = sm.bioguide WHERE sm.instagram IS NULL;
SELECT c.official_full_name  FROM current c  JOIN social_media sm ON c.bioguide_id = sm.bioguide  WHERE sm.twitter_id = '234128524';
SELECT sm.youtube  FROM current c  JOIN social_media sm ON c.bioguide_id = sm.bioguide  WHERE c.gender_bio = 'F';
SELECT sm.facebook FROM current c JOIN social-media sm ON c.bioguide_id = sm.bioguide WHERE c.birthday_bio = (SELECT MAX(birthday_bio) FROM current);
SELECT COUNT(*) FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE (c.opensecrets_id IS NULL OR c.opensecrets_id = '') AND ct.instagram IS NULL;
SELECT COUNT(*) AS non_representative_terms FROM current_terms WHERE name = 'Roger F. Wicker' AND (district IS NULL OR district = '');
SELECT COUNT(*)  FROM current-terms  WHERE name = 'Sherrod Brown';
SELECT c.official_full_name FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE ct.state_rank IS NOT NULL;
SELECT state  FROM current_terms  WHERE name = 'Sherrod Brown' AND start = '1993-01-05';
SELECT COUNT(DISTINCT ct.bioguide) AS female_legislators_with_more_than_4_terms FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE c.gender_bio = 'F' GROUP BY ct.bioguide HAVING COUNT(ct.bioguide) > 4;
SELECT COUNT(DISTINCT c.bioguide_id)  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  GROUP BY c.bioguide_id  HAVING COUNT(ct.bioguide) > 6  AND c.birthday_bio >= '1960-01-01';
SELECT AVG(term_count) AS average_terms FROM (     SELECT COUNT(ct.bioguide) AS term_count     FROM current c     JOIN current-terms ct ON c.bioguide_id = ct.bioguide     WHERE c.gender_bio = 'F'     GROUP BY c.bioguide_id ) AS female_terms;
SELECT      (COUNT(CASE WHEN s.instagram IS NULL THEN 1 END) * 100.0 / COUNT(c.bioguide_id)) AS percentage_without_instagram FROM      current c LEFT JOIN      social_media s ON c.bioguide_id = s.bioguide WHERE      c.religion_bio = 'Roman Catholic';
SELECT COUNT(*)  FROM current  WHERE gender_bio = 'M';
SELECT COUNT(*)  FROM current_terms  WHERE party = 'Republican';
SELECT COUNT(*)  FROM social_media  WHERE instagram IS NOT NULL AND instagram <> '';
SELECT COUNT(*)  FROM historical  WHERE gender_bio = 'F';
SELECT COUNT(*)  FROM current  WHERE gender_bio = 'M' AND religion_bio = 'Roman Catholic';
SELECT party  FROM current-terms  WHERE name = 'Sherrod Brown' AND start = 2005;
SELECT c.official_full_name  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.state_rank = 'senior'  AND ct.type = 'sen'  AND ct.start LIKE '2013%';
SELECT sm.youtube  FROM current c  JOIN social_media sm ON c.bioguide_id = sm.bioguide  WHERE c.official_full_name = 'Chris Van Hollen';
SELECT      COUNT(*) AS official_social_media_count FROM      social_media JOIN      current ON social_media.bioguide = current.bioguide_id WHERE      current.official_full_name = 'Mark Warner'      AND (facebook IS NOT NULL OR instagram IS NOT NULL OR twitter IS NOT NULL OR youtube IS NOT NULL);
SELECT c.last_name  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.state = 'CA';
SELECT official_full_name  FROM current  JOIN current-terms ON current.bioguide_id = current-terms.bioguide  WHERE gender_bio = 'F' AND type = 'sen';
SELECT govtrack_id FROM current WHERE official_full_name = 'Chris Van Hollen';
SELECT sm.twitter  FROM current c  JOIN social_media sm ON c.bioguide_id = sm.bioguide  WHERE c.official_full_name = 'Roger F. Wicker';
SELECT h.official_full_name  FROM historical h  JOIN historical_terms ht ON h.bioguide_id = ht.bioguide  WHERE ht.party = 'Pro-Administration'  AND ht.start <= 1791  AND ht.end >= 1791;
SELECT c.official_full_name  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE c.gender_bio = 'F'  AND ct.party = 'Republican'  AND ct.end > CURRENT_DATE;
SELECT district  FROM current_terms  WHERE name = 'Chris Van Hollen';
SELECT COUNT(*)  FROM current_terms  WHERE name = 'Richard Durbin' AND district = 20;
SELECT DIVIDE(COUNT(c.bioguide_id), 22) AS average_male_democrat_legislators FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE c.gender_bio = 'M'    AND ct.party = 'Democrat'    AND ct.start >= 2000    AND ct.end <= 2021;
WITH current_female AS (     SELECT COUNT(*) AS female_count_current     FROM current     WHERE gender_bio = 'F' ), historical_female AS (     SELECT COUNT(*) AS female_count_historical     FROM historical     WHERE gender_bio = 'F' ), total_female AS (     SELECT          female_count_current,         female_count_historical,         (female_count_current * 1.0 / (female_count_current + female_count_historical)) * 100 AS percentage_current,         (female_count_historical * 1.0 / (female_count_current + female_count_historical)) * 100 AS percentage_historical     FROM current_female, historical_female ) SELECT      CASE          WHEN percentage_current > percentage_historical THEN 'Current Female Legislators'          ELSE 'Historical Female Legislators'      END AS highest_value,     GREATEST(percentage_current, percentage_historical) AS highest_percentage FROM total_female;
SELECT youtube_id FROM social-media WHERE youtube = 'RepWassermanSchultz';
SELECT sm.facebook, sm.twitter, sm.youtube FROM current c JOIN social-media sm ON c.bioguide_id = sm.bioguide WHERE c.official_full_name = 'Adam Kinzinger';
SELECT ct.party  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE c.official_full_name = 'Christopher Henderson Clark';
SELECT c.official_full_name FROM current c JOIN social_media sm ON c.bioguide_id = sm.bioguide WHERE sm.youtube IS NOT NULL AND (sm.instagram IS NULL OR sm.instagram = '') LIMIT 10;
SELECT c.official_full_name  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.state = 'VA';
SELECT first_name, last_name  FROM historical  JOIN historical-terms ON historical.bioguide_id = historical-terms.bioguide  WHERE historical-terms.party = 'National Greenbacker';
SELECT c.official_full_name  FROM current c  JOIN social_media sm ON c.bioguide_id = sm.bioguide  WHERE sm.youtube = 'RoskamIL06';
SELECT c.official_full_name FROM current c JOIN social_media sm ON c.bioguide_id = sm.bioguide WHERE sm.facebook IS NOT NULL AND sm.facebook <> ''   AND (sm.youtube IS NULL OR sm.youtube = '')   AND (sm.instagram IS NULL OR sm.instagram = '')   AND (sm.twitter IS NULL OR sm.twitter = '') LIMIT 10;
SELECT c.official_full_name  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.state_rank = 'junior' AND ct.party = 'Republican';
SELECT ct.contact_form  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE c.official_full_name = 'Claire McCaskill';
SELECT h.wikipedia_id  FROM historical h  JOIN historical-terms ht ON h.bioguide_id = ht.bioguide  WHERE ht.party = 'Readjuster Democrat';
SELECT official_full_name  FROM current  WHERE party = 'Republican' AND nickname_name IS NOT NULL;
SELECT ct.state, ct.party FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE c.official_full_name = 'Veronica Grace Boland';
SELECT COUNT(*)  FROM historical  WHERE birthday_bio LIKE '1973%';
SELECT      COUNT(CASE WHEN gender_bio = 'M' THEN bioguide_id END) * 1.0 /      NULLIF(COUNT(CASE WHEN gender_bio = 'F' THEN bioguide_id END), 0) AS male_female_ratio FROM      historical;
SELECT COUNT(*)  FROM current-terms  WHERE end = '2009-12-31' AND party = 'Republican';
SELECT official_full_name, gender_bio  FROM current  WHERE last_name = 'Collins';
SELECT      (COUNT(CASE WHEN ct.class = 1 THEN ct.bioguide END) * 100.0) / COUNT(ct.bioguide) AS percent_class_1_senators FROM      current c JOIN      current-terms ct ON c.bioguide_id = ct.bioguide;
SELECT c.official_full_name  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.party = 'Independent';
SELECT SUM(YEAR(end) - YEAR(start)) AS total_years_served FROM current_terms WHERE name = 'Jr. John Conyers';
SELECT      SUBTRACT(MIN(ct.start), c.birthday_bio) AS age_when_started FROM      current c JOIN      current-terms ct ON c.bioguide_id = ct.bioguide WHERE      c.official_full_name = 'Jr. F. James Sensenbrenner';
SELECT c.official_full_name, c.religion_bio, ct.party FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE ct.state = 'ME';
SELECT c.official_full_name, c.nickname_name FROM current c JOIN social_media sm ON c.bioguide_id = sm.bioguide WHERE sm.instagram IS NOT NULL AND c.thomas_id < 1000;
SELECT MAX(end) AS last_serving_date FROM current_terms WHERE name = 'Matt Salmon';
SELECT ct.party, ct.state FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE c.house_history_id IS NOT NULL AND c.birthday_bio = '1738';
SELECT c.bioguide_id, CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE ct.party = 'Liberal Republican';
SELECT COUNT(*)  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.start = '1793-12-02' AND c.gender_bio = 'M';
SELECT      COUNT(CASE WHEN start LIKE '1875%' THEN 1 END) AS legislators_1875,     COUNT(CASE WHEN start LIKE '2005%' THEN 1 END) AS legislators_2005 FROM      current-terms;
SELECT c.official_full_name, sm.twitter_id, sm.youtube_id FROM current c JOIN social_media sm ON c.bioguide_id = sm.bioguide WHERE c.first_name = 'Richard';
SELECT ct.start, ct.end, ct.party  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE c.official_full_name = 'Pearl Peden Oldfield';
SELECT birthday_bio  FROM current  WHERE first_name = 'Amy' AND last_name = 'Klobuchar';
SELECT COUNT(*)  FROM current  WHERE fec_id IS NULL OR fec_id = '';
SELECT COUNT(*) AS female_legislators FROM current WHERE gender_bio = 'F';
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM current c WHERE c.opensecrets_id IS NOT NULL AND c.opensecrets_id <> '';
SELECT middle_name  FROM current  WHERE birthday_bio = '1956-08-24';
SELECT COUNT(*)  FROM current-terms  WHERE title = 'Majority Leader';
SELECT ct.title  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE c.birthday_bio = '1942-02-20';
SELECT gender_bio  FROM current  JOIN current-terms ON current.bioguide_id = current-terms.bioguide  WHERE current-terms.address = '317 Russell Senate Office Building Washington DC 20510';
SELECT c.first_name  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.state_rank = 'senior' AND ct.chamber = 'Senate';
SELECT state, COUNT(*) AS male_legislators_count FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE c.gender_bio = 'M' AND (ct.class IS NULL OR ct.class = '') GROUP BY state;
SELECT      (COUNT(CASE WHEN ct.class IS NOT NULL AND YEAR(c.birthday_bio) = 1964 THEN c.bioguide_id END) * 1.0 / COUNT(c.bioguide_id)) * 100 AS percentage_senators_born_1964 FROM      current c JOIN      current_terms ct ON c.bioguide_id = ct.bioguide;
SELECT      (COUNT(CASE WHEN ct.class IS NULL AND c.birthday_bio <= '1975-12-31' THEN c.bioguide_id END) * 1.0 / COUNT(c.bioguide_id)) * 100 AS percentage_not_senators_born_before_1975 FROM      current c JOIN      current-terms ct ON c.bioguide_id = ct.bioguide;
SELECT sm.twitter  FROM current c  JOIN social_media sm ON c.bioguide_id = sm.bioguide  WHERE c.birthday_bio = '1946-05-27';
SELECT c.opensecrets_id  FROM current c  JOIN social_media sm ON c.bioguide_id = sm.bioguide  WHERE sm.youtube = 'Bluetkemeyer';
SELECT sm.facebook  FROM current c  JOIN social_media sm ON c.bioguide_id = sm.bioguide  WHERE c.official_full_name = 'Ralph Abraham';
SELECT c.first_name  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.address = '1005 Longworth HOB; Washington DC 20515-1408';
SELECT sm.instagram  FROM current c  JOIN social-media sm ON c.bioguide_id = sm.bioguide  WHERE c.birthday_bio = '1952-08-24';
SELECT COUNT(*)  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.class IS NULL OR ct.class = ''  AND c.gender_bio = 'F';
SELECT c.religion_bio  FROM current c  JOIN social_media sm ON c.bioguide_id = sm.bioguide  WHERE sm.youtube = 'MaxineWaters';
SELECT COUNT(*)  FROM current-terms  WHERE title = 'Minority Leader' AND (fec_id IS NULL OR fec_id = '');
SELECT COUNT(*) AS male_legislators FROM current WHERE gender_bio = 'M';
SELECT facebook_id  FROM social-media  WHERE facebook = 'RepWilson';
SELECT COUNT(*) AS total_legislators FROM current WHERE first_name = 'John';
SELECT DISTINCT ct.district FROM current_terms ct JOIN current c ON ct.bioguide = c.bioguide_id WHERE ct.party = 'Anti-Administration';
SELECT official_full_name  FROM current  WHERE birthday_bio LIKE '1960%';
SELECT google_entity_id_id  FROM current  WHERE first_name = 'Benjamin' AND last_name = 'Hawkins';
SELECT c.official_full_name  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.party = 'Pro-Administration'  AND ct.type = 'sen'  AND ct.start = '1789-03-04'  AND ct.end = '1791-12-31';
SELECT c.first_name, c.last_name  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.district = 9 AND ct.type = 'rep';
SELECT c.official_full_name  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.party = 'Independent';
SELECT ct.opensecrets_id, ct.thomas_id FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE ct.party = 'Democrat' AND ct.type = 'sen' AND ct.state = 'NJ';
SELECT c.google_entity_id_id  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.type = 'sen' AND ct.state = 'NY';
SELECT c.religion_bio  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.rss_url = 'http://www.corker.senate.gov/public/index.cfm/rss/feed';
SELECT ct.party  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE c.official_full_name = 'Susan M. Collins';
SELECT district  FROM current-terms  WHERE name = 'Jonathan Grout' AND type = 'rep';
SELECT ct.party, ct.state FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE c.opensecrets_id = 'N00003689' AND c.thomas_id = '186';
SELECT c.official_full_name, c.birthday_bio FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE ct.contact_form = 'http://www.brown.senate.gov/contact/';
SELECT ct.state, ct.type FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE c.google_entity_id_id = 'kg:/m/02pyzk';
SELECT ct.type, ct.end  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE c.first_name = 'John' AND c.last_name = 'Vining';
SELECT      (SUM(CASE WHEN type = 'sen' AND gender_bio = 'F' AND strftime('%Y', birthday_bio) BETWEEN '1930' AND '1970' THEN 1 ELSE 0 END) -      SUM(CASE WHEN type = 'rep' AND gender_bio = 'F' AND strftime('%Y', birthday_bio) BETWEEN '1930' AND '1970' THEN 1 ELSE 0 END)) AS difference FROM current_terms;
SELECT      (SUM(CASE WHEN ct.party = 'Independent' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage FROM      current c JOIN      current-terms ct ON c.bioguide_id = ct.bioguide WHERE      c.gender_bio = 'M'      AND strftime('%Y', c.birthday_bio) BETWEEN '1955' AND '1965';
SELECT first_name, last_name  FROM current  WHERE bioguide_id = 'W000059';
SELECT CASE      WHEN ballotpedia_id IS NULL THEN 'Thomas Carnes does not have an account on ballotpedia.org'      ELSE 'Thomas Carnes has an account on ballotpedia.org'  END AS account_status FROM current WHERE first_name = 'Thomas' AND last_name = 'Carnes';
SELECT COUNT(*)  FROM current  WHERE birthday_bio LIKE '1736%';
SELECT official_full_name  FROM current  WHERE gender_bio = 'F';
SELECT COUNT(DISTINCT district) FROM current-terms WHERE state = 'ID';
SELECT COUNT(*)  FROM current-terms  WHERE class IS NULL;
SELECT DIVIDE(SUM(gender_bio = 'M'), SUM(gender_bio = 'F')) AS gender_ratio FROM current;
SELECT      (SUM(CASE WHEN wikipedia_id IS NOT NULL THEN 1 ELSE 0 END) * 100.0) / COUNT(bioguide_id) AS percentage_famous_legislators FROM      current;
SELECT c.official_full_name FROM current c LEFT JOIN social_media sm ON c.bioguide_id = sm.bioguide WHERE sm.instagram IS NULL;
SELECT c.first_name, c.last_name, ct.district, ct.state FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE ct.type = 'rep' AND ct.start LIKE '1789%';
SELECT district  FROM current-terms  WHERE name = 'Benjamin Contee';
SELECT ct.address  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE c.first_name = 'Amy' AND c.last_name = 'Klobuchar' AND ct.start = '2001-04-01';
SELECT c.first_name, c.last_name, ct.state FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE ct.state_rank = 'junior' AND ct.start LIKE '1997%';
SELECT COUNT(*) FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE c.gender_bio = 'F'    AND ct.type = 'rep'    AND ct.state = 'CA'    AND YEAR(ct.start) = 2015;
SELECT sm.twitter_id  FROM current c  JOIN social_media sm ON c.bioguide_id = sm.bioguide  WHERE c.first_name = 'Emanuel' AND c.last_name = 'Cleaver';
SELECT sm.facebook_id  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  JOIN social-media sm ON ct.bioguide = sm.bioguide  WHERE ct.party = 'Democrat';
SELECT h.* FROM historical h JOIN historical-terms ht ON h.bioguide_id = ht.bioguide WHERE h.gender_bio = 'F' AND ht.end = '1791-03-03';
SELECT c.official_full_name FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE c.religion_bio = 'Jewish' AND ct.state = 'FL';
SELECT      DIVIDE(         COUNT(current.bioguide_id) FILTER (WHERE current.wikipedia_id IS NOT NULL),          COUNT(historical.bioguide_id) FILTER (WHERE historical.wikipedia_id IS NOT NULL)     ) AS ratio FROM      current,      historical;
SELECT      (SUM(CASE WHEN strftime('%Y', start) BETWEEN '2000' AND '2017' THEN 1 ELSE 0 END) * 100.0) / COUNT(c.bioguide_id) AS percentage FROM      current c JOIN      current-terms ct ON c.bioguide_id = ct.bioguide;
SELECT COUNT(*)  FROM current  WHERE religion_bio = 'Catholic' AND ballotpedia_id IS NULL;
SELECT COUNT(*)  FROM current-terms  WHERE class = 1 AND party = 'Republican' AND type = 'sen';
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM current c WHERE c.google_entity_id_id IS NULL   AND c.gender_bio = 'F'   AND c.fec_id IS NULL;
SELECT COUNT(*)  FROM current-terms  WHERE state = 'CA' AND type = 'rep' AND end LIKE '1995%';
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM current WHERE birthday_bio = (SELECT MIN(birthday_bio) FROM current);
SELECT c.bioguide_id  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.party = 'Democrat'  AND ct.district = '13'  AND ct.end = '2019-01-03'  AND ct.type = 'rep';
SELECT sm.twitter  FROM current c  JOIN social-media sm ON c.bioguide_id = sm.bioguide  WHERE c.first_name = 'Jason' AND c.last_name = 'Lewis';
SELECT c.official_full_name FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE ct.party = 'Independent'   AND ct.type = 'sen'   AND strftime('%Y', ct.start) >= '2011'   AND ct.caucus = 'Democrat';
SELECT COUNT(*)  FROM current  WHERE religion_bio = 'Jewish'  AND bioguide_id NOT IN (SELECT bioguide FROM social_media WHERE facebook IS NOT NULL);
SELECT party FROM current WHERE religion_bio = 'Baptist' GROUP BY party ORDER BY COUNT(*) DESC LIMIT 1;
SELECT c.official_full_name FROM current c JOIN social_media sm ON c.bioguide_id = sm.bioguide WHERE sm.facebook IS NOT NULL    AND sm.instagram IS NOT NULL    AND sm.twitter IS NOT NULL    AND sm.youtube IS NOT NULL;
SELECT COUNT(DISTINCT district)  FROM current-terms  WHERE name = 'John Conyers, Jr.';
SELECT c.wikipedia_id  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.party = 'Anti-Administration' AND ct.type = 'sen';
SELECT c.official_full_name FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE ct.district = 13 GROUP BY c.official_full_name HAVING SUM(CAST(strftime('%Y', ct.end) AS INTEGER) - CAST(strftime('%Y', ct.start) AS INTEGER)) = 26;
SELECT COUNT(*) FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE ct.party = 'Federalist' AND ct.type = 'rep' AND c.first_name = 'Benjamin';
SELECT COUNT(*)  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE c.gender_bio = 'F'  AND ct.state = 'California'  AND (strftime('%Y', ct.end) - strftime('%Y', ct.start)) >= 10  AND ct.type = 'rep';
SELECT party  FROM current  WHERE birthday_bio = (SELECT MIN(birthday_bio) FROM current);
SELECT c.official_full_name FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE c.religion_bio = 'Lutheran'   AND ct.type = 'rep'   AND ct.state = 'Ohio'   AND (strftime('%Y', ct.end) - strftime('%Y', ct.start)) = 14;
SELECT COUNT(*)  FROM current  WHERE strftime('%Y', birthday_bio) > '1960'  AND google_entity_id_id IS NULL;
SELECT official_full_name  FROM current  WHERE house_history_id IS NOT NULL;
SELECT COUNT(*)  FROM current  WHERE icpsr_id IS NOT NULL AND maplight_id IS NOT NULL;
SELECT COUNT(*)  FROM current  WHERE gender_bio = 'F' AND lis_id IS NOT NULL;
SELECT religion_bio  FROM current  WHERE first_name = 'Sherrod' AND last_name = 'Brown';
SELECT religion_bio, COUNT(*) AS occurrence FROM current GROUP BY religion_bio ORDER BY occurrence DESC LIMIT 1;
SELECT sm.instagram  FROM current c  JOIN social_media sm ON c.bioguide_id = sm.bioguide  WHERE c.first_name = 'Bob' AND c.last_name = 'Corker';
SELECT COUNT(*)  FROM current c JOIN social-media sm ON c.bioguide_id = sm.bioguide WHERE c.thomas_id IS NOT NULL AND sm.instagram IS NOT NULL;
SELECT sm.facebook FROM current c JOIN social-media sm ON c.bioguide_id = sm.bioguide WHERE c.wikipedia_id IS NOT NULL;
SELECT COUNT(*)  FROM current-terms  WHERE bioguide = (     SELECT bioguide_id      FROM current      WHERE birthday_bio = (SELECT MIN(birthday_bio) FROM current) );
SELECT ct.phone  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE c.first_name = 'Sherrod' AND c.last_name = 'Brown' AND ct.start = '2013-01-03';
SELECT COUNT(*)  FROM current-terms  WHERE name = 'Sherrod Brown' AND party = 'Democrat';
SELECT c.official_full_name  FROM current c  JOIN current_terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.start = '2013-01-03';
SELECT COUNT(*)  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.start = '2013-01-03' AND c.gender_bio = 'F';
SELECT c.official_full_name FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide GROUP BY c.bioguide_id ORDER BY COUNT(ct.bioguide) DESC LIMIT 1;
SELECT COUNT(*)  FROM current-terms  WHERE name = 'Sherrod Brown' AND district = 13;
SELECT c.official_full_name  FROM current c  JOIN social_media sm ON c.bioguide_id = sm.bioguide  WHERE sm.facebook = 'senjoniernst';
SELECT official_full_name, COUNT(*) AS term_count FROM current-terms WHERE official_full_name IN ('Maria Cantwell', 'Sherrod Brown') GROUP BY official_full_name ORDER BY term_count DESC;
SELECT      (SUM(CASE WHEN c.gender_bio = 'F' THEN 1 ELSE 0 END) * 100.0) / COUNT(c.bioguide) AS female_percentage FROM      current c JOIN      current-terms ct ON c.bioguide_id = ct.bioguide GROUP BY      c.bioguide_id HAVING      COUNT(ct.bioguide) > 4;
SELECT AVG(term_count) AS average_terms_served FROM (     SELECT COUNT(ct.bioguide) AS term_count     FROM current c     JOIN current-terms ct ON c.bioguide_id = ct.bioguide     WHERE c.wikipedia_id IS NOT NULL     GROUP BY c.bioguide_id ) AS term_counts;
SELECT COUNT(*)  FROM current  WHERE gender_bio = 'F';
SELECT COUNT(*)  FROM current_terms  WHERE state = 'NJ' AND type = 'sen';
SELECT ct.address  FROM current_terms ct  WHERE ct.contact_form = 'http://www.carper.senate.gov/contact/';
SELECT sm.instagram  FROM current c  JOIN social-media sm ON c.bioguide_id = sm.bioguide  WHERE c.first_name = 'Benjamin' AND c.last_name = 'Hawkins';
SELECT c.bioguide_id  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE c.religion_bio = 'Catholic' AND ct.state = 'NE';
SELECT c.maplight_id  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE ct.state = 'ME' AND ct.type = 'rep';
SELECT current-terms.type, current-terms.start  FROM current  JOIN current-terms ON current.bioguide_id = current-terms.bioguide  WHERE current.birthday_bio = '1727-11-26';
SELECT ct.contact_form  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE c.first_name = 'Rick' AND c.last_name = 'Crawford';
SELECT COUNT(*)  FROM current c  JOIN current-terms ct ON c.bioguide_id = ct.bioguide  WHERE c.gender_bio = 'F' AND ct.type = 'rep' AND ct.state = 'MI';
SELECT      (SUM(CASE WHEN ct.type = 'sen' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage FROM      current c JOIN      current-terms ct ON c.bioguide_id = ct.bioguide WHERE      c.gender_bio = 'F' AND ct.state = 'ME';
SELECT g.games_name FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'John Aalberg';
SELECT g.games_name  FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'John Aalberg' AND gc.age = 31;
SELECT age  FROM games_competitor gc JOIN games g ON gc.games_id = g.id JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'John Aalberg' AND g.games_name = '1994 Winter';
SELECT COUNT(DISTINCT gc.person_id) AS num_competitors FROM games_competitor gc JOIN person_region pr ON gc.person_id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Finland';
SELECT p.full_name  FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Finland';
SELECT nr.region_name  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  JOIN person_region pr ON p.id = pr.person_id  JOIN noc_region nr ON pr.region_id = nr.id  WHERE p.full_name = 'John Aalberg';
SELECT noc_region.noc FROM person JOIN games_competitor ON person.id = games_competitor.person_id JOIN person_region ON person.id = person_region.person_id JOIN noc_region ON person_region.region_id = noc_region.id WHERE person.gender = 'M' AND person.height = (     SELECT MAX(height)     FROM person     WHERE gender = 'M' );
SELECT COUNT(DISTINCT gc.person_id) AS female_competitors FROM games_competitor gc JOIN person p ON gc.person_id = p.id JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Finland' AND p.gender = 'F';
SELECT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id WHERE g.games_year = 1992 AND g.season = 'Summer';
SELECT g.games_name  FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id WHERE c.city_name = 'London';
SELECT MIN(g.games_year)  FROM games g  JOIN games_city gc ON g.id = gc.games_id  JOIN city c ON gc.city_id = c.id  WHERE c.city_name = 'London';
SELECT COUNT(games_id)  FROM games_city  JOIN city ON games_city.city_id = city.id  WHERE city.city_name = 'London';
SELECT AVG(height) AS average_height FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Finland' AND p.gender = 'M';
SELECT      (COUNT(CASE WHEN nr.region_name = 'Finland' THEN gc.person_id END) * 100.0 / COUNT(gc.person_id)) AS percentage FROM      games g JOIN      games_competitor gc ON g.id = gc.games_id JOIN      person_region pr ON gc.person_id = pr.person_id JOIN      noc_region nr ON pr.region_id = nr.id WHERE      g.games_year = 1994 AND g.season = 'Winter';
SELECT s.sport_name  FROM sport s  JOIN event e ON s.id = e.sport_id  WHERE e.event_name = 'Shooting Women''s Trap';
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_year = 1936 AND g.games_name = 'Winter';
SELECT COUNT(games.id) AS olympic_games_count FROM games JOIN games_city ON games.id = games_city.games_id JOIN city ON games_city.city_id = city.id WHERE city.city_name = 'London';
SELECT COUNT(*)  FROM event  WHERE sport_id = (SELECT id FROM sport WHERE sport_name = 'Swimming');
SELECT nr.region_name FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE p.full_name = 'Peter Kohnke';
SELECT g.id  FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'Jessica Carolina Aguilera Aguilera';
SELECT s.sport_name FROM sport s JOIN event e ON s.id = e.sport_id GROUP BY s.sport_name ORDER BY COUNT(e.id) DESC LIMIT 1;
SELECT p.full_name  FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Sweden' ORDER BY p.height DESC LIMIT 1;
SELECT COUNT(DISTINCT gc.person_id) AS athlete_count FROM games_competitor gc JOIN person_region pr ON gc.person_id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Guatemala';
SELECT p.full_name, COUNT(gc.games_id) AS games_participated FROM person p JOIN games_competitor gc ON p.id = gc.person_id GROUP BY p.full_name ORDER BY games_participated DESC LIMIT 1;
SELECT full_name FROM person WHERE id = 90991;
SELECT COUNT(DISTINCT gc.id) AS competitor_count FROM person p JOIN games_competitor gc ON p.id = gc.person_id WHERE p.full_name = 'Martina Kohlov';
SELECT weight / (height * height) AS bmi FROM person WHERE id = 147420;
SELECT      (COUNT(CASE WHEN p.gender = 'M' THEN 1 END) * 100.0 / COUNT(p.id)) AS percentage FROM      person p JOIN      person_region pr ON p.id = pr.person_id JOIN      noc_region nr ON pr.region_id = nr.id WHERE      nr.region_name = 'Estonia';
SELECT full_name  FROM person  JOIN games_competitor ON person.id = games_competitor.person_id  WHERE age = (SELECT MIN(age) FROM games_competitor);
SELECT COUNT(*)  FROM competitor_event ce JOIN games_competitor gc ON ce.competitor_id = gc.id JOIN event e ON ce.event_id = e.id WHERE gc.age = 24 AND e.event_name = 'Basketball Men''s Basketball';
SELECT e.event_name  FROM event e  JOIN sport s ON e.sport_id = s.id  WHERE s.sport_name = 'Art Competitions';
SELECT COUNT(*)  FROM competitor_event ce JOIN games_competitor gc ON ce.competitor_id = gc.id JOIN person p ON gc.person_id = p.id JOIN medal m ON ce.medal_id = m.id WHERE p.full_name = 'Henk Jan Zwolle' AND m.medal_name = 'Gold';
SELECT e.event_name FROM event e JOIN competitor_event ce ON e.id = ce.event_id JOIN medal m ON ce.medal_id = m.id WHERE m.medal_name = 'Gold' GROUP BY e.event_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT gc.person_id) AS athlete_count FROM games_competitor gc JOIN person_region pr ON gc.person_id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Australia';
SELECT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id GROUP BY c.city_name HAVING COUNT(g.id) >= 3;
SELECT COUNT(*)  FROM games g  JOIN games_city gc ON g.id = gc.games_id  JOIN city c ON gc.city_id = c.id  WHERE g.season = 'Summer' AND c.city_name = 'Stockholm';
SELECT nr.region_name FROM person_region pr JOIN noc_region nr ON pr.region_id = nr.id GROUP BY nr.region_name ORDER BY COUNT(pr.person_id) DESC LIMIT 1;
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_year = (SELECT MIN(games_year) FROM games);
SELECT g.games_name FROM games g JOIN games_competitor gc ON g.id = gc.games_id WHERE gc.age = (SELECT MAX(age) FROM games_competitor);
SELECT COUNT(DISTINCT gc.person_id) AS athlete_count FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_year = 1992 AND g.games_name = 'Summer';
SELECT      COUNT(ce.event_id) AS total_events,     DIVIDE(COUNT(CASE WHEN m.medal_name = 'Gold' THEN ce.event_id END), COUNT(ce.event_id)) AS percentage FROM      person p JOIN      games_competitor gc ON p.id = gc.person_id JOIN      competitor_event ce ON gc.id = ce.competitor_id JOIN      medal m ON ce.medal_id = m.id WHERE      p.full_name = 'Michael Fred Phelps, II';
SELECT      g.season,     COUNT(gc.person_id) AS num_competitors FROM      games g JOIN      games_competitor gc ON g.id = gc.games_id WHERE      g.games_year = 1988 AND (g.season = 'Summer' OR g.season = 'Winter') GROUP BY      g.season ORDER BY      num_competitors DESC LIMIT 1;  SELECT      (SELECT COUNT(gc.person_id) FROM games g JOIN games_competitor gc ON g.id = gc.games_id WHERE g.games_year = 1988 AND g.season = 'Summer') -     (SELECT COUNT(gc.person_id) FROM games g JOIN games_competitor gc ON g.id = gc.games_id WHERE g.games_year = 1988 AND g.season = 'Winter') AS competitor_difference;
SELECT age, COUNT(person_id) AS num_competitors FROM games_competitor GROUP BY age ORDER BY num_competitors DESC LIMIT 1;
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE c.city_name LIKE 'M%';
SELECT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id WHERE g.games_year = 1976 AND g.games_name IN ('1976 Winter', '1976 Summer');
SELECT m.medal_name  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  JOIN competitor_event ce ON gc.id = ce.competitor_id  JOIN medal m ON ce.medal_id = m.id  WHERE p.full_name = 'Coleen Dufresne';
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id GROUP BY p.full_name ORDER BY COUNT(ce.medal_id) DESC LIMIT 1;
SELECT nr.region_name  FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE p.full_name = 'Estelle Nze Minko';
SELECT DISTINCT s.sport_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id JOIN event e ON ce.event_id = e.id JOIN sport s ON e.sport_id = s.id WHERE p.full_name = 'Chin Eei Hui';
SELECT full_name  FROM person  JOIN games_competitor ON person.id = games_competitor.person_id  WHERE age = (SELECT MAX(age) FROM games_competitor);
SELECT g.games_year, COUNT(gc.person_id) AS women_count FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person p ON gc.person_id = p.id WHERE p.gender = 'F' GROUP BY g.games_year ORDER BY women_count DESC LIMIT 1;
SELECT COUNT(DISTINCT gc.person_id) AS male_participants FROM games_competitor gc JOIN person p ON gc.person_id = p.id JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE p.gender = 'M' AND nr.region_name = 'Belgium';
SELECT COUNT(DISTINCT gc.person_id) AS number_of_participants FROM games_competitor gc JOIN games g ON gc.games_id = g.id JOIN games_city gc2 ON g.id = gc2.games_id JOIN city c ON gc2.city_id = c.id WHERE c.city_name = 'Sapporo';
SELECT g.games_year, g.games_name  FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'Morten Aleksander Djupvik';
SELECT COUNT(DISTINCT gc.person_id) AS total_participants FROM games_competitor gc JOIN competitor_event ce ON gc.id = ce.competitor_id JOIN event e ON ce.event_id = e.id WHERE e.event_name = 'Sailing Mixed 12 metres';
SELECT COUNT(DISTINCT e.id) AS event_count FROM event e JOIN sport s ON e.sport_id = s.id WHERE s.sport_name = 'Modern Pentathlon';
SELECT      (COUNT(CASE WHEN p.gender = 'F' THEN 1 END) * 100.0 / COUNT(p.id)) AS percentage FROM      person p JOIN      games_competitor gc ON p.id = gc.person_id JOIN      competitor_event ce ON gc.id = ce.competitor_id JOIN      event e ON ce.event_id = e.id WHERE      e.event_name = 'Equestrianism Mixed Three-Day Event, Individual';
SELECT AVG(age) AS average_age FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_year = 1992 AND g.season = 'Summer';
SELECT games_year FROM games WHERE season = 'Summer' GROUP BY games_year HAVING COUNT(games_name) = 1;
SELECT COUNT(*)  FROM games  WHERE games_year BETWEEN 1990 AND 1999;
SELECT COUNT(DISTINCT gc.person_id) AS athlete_count FROM games g JOIN games_competitor gc ON g.id = gc.games_id WHERE g.games_name = '2014 Winter';
SELECT COUNT(DISTINCT gc.person_id)  FROM games_competitor gc JOIN person_region pr ON gc.person_id = pr.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id WHERE pr.region_id = 151 AND ce.medal_id <> 4;
SELECT COUNT(DISTINCT gc.person_id) AS athlete_count FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person_region pr ON gc.person_id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE g.games_name = '2016 Summer' AND nr.region_name = 'China';
SELECT COUNT(*)  FROM competitor_event ce  JOIN medal m ON ce.medal_id = m.id  JOIN event e ON ce.event_id = e.id  WHERE m.medal_name = 'Gold' AND e.event_name = 'Ice Hockey Men''s Ice Hockey';
SELECT nr.region_name, COUNT(ce.medal_id) AS medal_count FROM noc_region nr JOIN person_region pr ON nr.id = pr.region_id JOIN games_competitor gc ON pr.person_id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id GROUP BY nr.region_name ORDER BY medal_count DESC LIMIT 1;
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id JOIN medal m ON ce.medal_id = m.id JOIN games g ON gc.games_id = g.id JOIN games_city gc2 ON g.id = gc2.games_id JOIN sport s ON ce.event_id IN (SELECT id FROM event WHERE sport_id = s.id) WHERE m.medal_name = 'Gold' AND s.sport_name = 'Cycling';
SELECT m.medal_name FROM medal m JOIN competitor_event ce ON m.id = ce.medal_id JOIN games_competitor gc ON ce.competitor_id = gc.id JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'Lee Chong Wei' AND m.id <> 4;
SELECT      DIVIDE(COUNT(gc.person_id) FILTER (WHERE p.gender = 'F' AND gc.age < 20), COUNT(gc.person_id)) AS percentage FROM      games g JOIN      games_competitor gc ON g.id = gc.games_id JOIN      person p ON gc.person_id = p.id WHERE      g.games_year = 2002 AND g.season = 'Winter';
SELECT      COUNT(CASE WHEN p.gender = 'M' THEN 1 END) * 1.0 /      COUNT(CASE WHEN p.gender = 'F' THEN 1 END) AS male_female_ratio FROM      games g JOIN      games_competitor gc ON g.id = gc.games_id JOIN      person p ON gc.person_id = p.id WHERE      g.games_year = 2012 AND g.season = 'Summer';
SELECT games_name, COUNT(person_id) AS participant_count FROM games JOIN games_competitor ON games.id = games_competitor.games_id WHERE season = 'Summer' GROUP BY games_name HAVING participant_count = (SELECT MAX(participant_count) FROM (SELECT COUNT(person_id) AS participant_count FROM games JOIN games_competitor ON games.id = games_competitor.games_id WHERE season = 'Summer' GROUP BY games_name) AS max_participants)    OR participant_count = (SELECT MIN(participant_count) FROM (SELECT COUNT(person_id) AS participant_count FROM games JOIN games_competitor ON games.id = games_competitor.games_id WHERE season = 'Summer' GROUP BY games_name) AS min_participants);
SELECT COUNT(DISTINCT gc.person_id) AS athlete_count FROM games_competitor gc JOIN person_region pr ON gc.person_id = pr.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id WHERE pr.region_id = (SELECT id FROM noc_region WHERE region_name = 'Malaysia') AND ce.medal_id <> 4;
SELECT COUNT(DISTINCT gc.person_id) AS overweight_athletes FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person p ON gc.person_id = p.id JOIN sport s ON s.id = (SELECT id FROM sport WHERE sport_name = 'Canoeing') WHERE g.games_name = '2008 Summer' AND (p.weight / (p.height * p.height)) >= 25;
SELECT AVG(p.height) AS average_height FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id JOIN event e ON ce.event_id = e.id JOIN sport s ON e.sport_id = s.id WHERE s.sport_name = 'Basketball' AND e.event_name = 'Basketball Men''s' AND p.gender = 'M';
SELECT COUNT(*)  FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE p.gender = 'F' AND nr.region_name = 'Philippines';
SELECT nr.region_name  FROM person p  JOIN person_region pr ON p.id = pr.person_id  JOIN noc_region nr ON pr.region_id = nr.id  WHERE p.full_name = 'Yao Ming';
SELECT MIN(gc.age) AS age FROM person p JOIN games_competitor gc ON p.id = gc.person_id WHERE p.full_name = 'Michael Fred Phelps, II';
SELECT COUNT(DISTINCT gc.person_id)  FROM games_competitor gc JOIN person p ON gc.person_id = p.id JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE p.full_name = 'Clara Hughes';
SELECT COUNT(*)  FROM competitor_event ce JOIN games_competitor gc ON ce.competitor_id = gc.id JOIN person p ON gc.person_id = p.id JOIN event e ON ce.event_id = e.id WHERE p.full_name = 'Ian James Thorpe'  AND e.event_name = 'Swimming Men''s 200 metres Freestyle';
SELECT COUNT(*)  FROM competitor_event ce JOIN event e ON ce.event_id = e.id JOIN sport s ON e.sport_id = s.id JOIN games_competitor gc ON ce.competitor_id = gc.id JOIN person p ON gc.person_id = p.id JOIN medal m ON ce.medal_id = m.id WHERE p.full_name = 'Larysa Semenivna Latynina (Diriy-)'    AND e.event_name = 'Gymnastics Women''s Individual All-Around'    AND m.medal_name = 'Gold';
SELECT DISTINCT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id JOIN games_competitor gc2 ON g.id = gc2.games_id JOIN person p ON gc2.person_id = p.id WHERE p.full_name = 'Carl Lewis Borack';
SELECT COUNT(*)  FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id WHERE c.city_name = 'London';
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_year = 1992 AND g.games_name = 'Summer';
SELECT COUNT(DISTINCT gc.person_id) AS athlete_count FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_name = '2016 Summer' AND gc.age > 59;
SELECT g.games_name FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id JOIN games_competitor gc2 ON g.id = gc2.games_id WHERE c.city_name = 'Los Angeles' GROUP BY g.games_name ORDER BY COUNT(gc2.person_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM competitor_event ce JOIN games_competitor gc ON ce.competitor_id = gc.id JOIN event e ON ce.event_id = e.id WHERE gc.age = 10 AND e.event_name = 'Gymnastics Men''s Parallel Bars, Teams';
SELECT AVG(gc.age) AS average_age FROM games_competitor gc JOIN games g ON gc.games_id = g.id JOIN person p ON gc.person_id = p.id JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE g.games_name = '2016 Summer' AND nr.region_name = 'United States of America';
SELECT region_name FROM noc_region WHERE noc = 'COL';
SELECT sport_name FROM sport WHERE id = 19;
SELECT id FROM event WHERE event_name = 'Shooting Mixed Skeet';
SELECT id FROM sport WHERE sport_name = 'hockey';
SELECT weight FROM person WHERE full_name = 'Dagfinn Sverre Aarskog';
SELECT id FROM city WHERE city_name = 'Rio de Janeiro';
SELECT COUNT(DISTINCT ce.competitor_id) AS gold_medal_winners FROM competitor_event ce JOIN event e ON ce.event_id = e.id JOIN medal m ON ce.medal_id = m.id WHERE m.medal_name = 'Gold' AND e.event_name = 'Rowing Women''s Coxed Eights';
SELECT COUNT(DISTINCT e.event_name) AS event_count FROM event e JOIN sport s ON e.sport_id = s.id WHERE s.sport_name = 'Cycling';
SELECT nr.region_name  FROM person p  JOIN person_region pr ON p.id = pr.person_id  JOIN noc_region nr ON pr.region_id = nr.id  WHERE p.full_name = 'Vijay Singh Chauhan';
SELECT g.games_year  FROM games g  JOIN games_city gc ON g.id = gc.games_id  JOIN city c ON gc.city_id = c.id  WHERE c.city_name = 'Roma';
SELECT COUNT(*)  FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE gc.age = 20 AND g.games_name = '1984 Summer';
SELECT COUNT(DISTINCT gc.games_id) AS games_participated FROM games_competitor gc JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'Prithipal Singh';
SELECT COUNT(DISTINCT gc.person_id) AS athlete_count FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_name = '1984 Summer' AND gc.age > 50;
SELECT COUNT(DISTINCT e.event_name) AS event_count FROM event e JOIN sport s ON e.sport_id = s.id WHERE s.sport_name = 'Athletics';
SELECT p.full_name  FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Russia' ORDER BY p.weight DESC LIMIT 1;
SELECT MAX(p.height)  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  JOIN person_region pr ON p.id = pr.person_id  JOIN noc_region nr ON pr.region_id = nr.id  WHERE nr.region_name = 'Portugal';
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_name = '1968 Winter';
SELECT r.region_name FROM person_region pr JOIN noc_region r ON pr.region_id = r.id GROUP BY r.region_name ORDER BY COUNT(pr.person_id) DESC LIMIT 1;
SELECT      DIVIDE(COUNT(CASE WHEN p.height > 175 THEN p.id END), COUNT(p.id)) * 100 AS percentage FROM      person p JOIN      person_region pr ON p.id = pr.person_id JOIN      noc_region nr ON pr.region_id = nr.id WHERE      nr.region_name = 'Vanuatu';
SELECT AVG(p.weight)  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  JOIN person_region pr ON p.id = pr.person_id  JOIN noc_region nr ON pr.region_id = nr.id  WHERE nr.region_name = 'Tonga' AND p.gender = 'M';
SELECT c.city_name  FROM games g  JOIN games_city gc ON g.id = gc.games_id  JOIN city c ON gc.city_id = c.id  WHERE g.games_name = '1920 Summer';
SELECT COUNT(*)  FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id WHERE g.games_year BETWEEN 1900 AND 1992 AND c.city_name = 'London';
SELECT COUNT(*)  FROM games g  JOIN games_city gc ON g.id = gc.games_id  JOIN city c ON gc.city_id = c.id  WHERE g.season = 'Summer' AND c.city_name = 'Paris';
SELECT g.games_name  FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id WHERE c.city_name = 'Los Angeles';
SELECT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id GROUP BY c.city_name ORDER BY COUNT(g.id) DESC LIMIT 1;
SELECT g.games_name  FROM games g  JOIN games_city gc ON g.id = gc.games_id  JOIN city c ON gc.city_id = c.id  WHERE c.city_name = 'Beijing' AND g.games_year = 2008;
SELECT      (COUNT(CASE WHEN gc.age > 30 THEN ce.competitor_id END) * 100.0 / COUNT(ce.competitor_id)) AS percentage FROM      competitor_event ce JOIN      games_competitor gc ON ce.competitor_id = gc.id WHERE      ce.medal_id = 1;
SELECT gc.age  FROM games g  JOIN games_competitor gc ON g.id = gc.games_id  JOIN person p ON gc.person_id = p.id  WHERE p.full_name = 'A Lamusi' AND g.games_name = '2012 Summer';
SELECT COUNT(*)  FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_name = '2000 Summer' AND gc.age = 31;
SELECT COUNT(DISTINCT gc.person_id) AS male_competitors FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person p ON gc.person_id = p.id WHERE g.games_year = 1948 AND g.season = 'Summer' AND p.gender = 'M';
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN games g ON gc.games_id = g.id WHERE g.games_name = '1936 Summer';
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN games g ON gc.games_id = g.id WHERE g.games_name = '2014 Winter' ORDER BY gc.age ASC LIMIT 1;
SELECT AVG(gc.age) AS average_age FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_year = 1988 AND g.games_name = 'Winter';
SELECT      (COUNT(CASE WHEN p.gender = 'F' AND p.height > 170 THEN p.id END) * 100.0 / COUNT(p.id)) AS percentage FROM      person p JOIN      games_competitor gc ON p.id = gc.person_id JOIN      games g ON gc.games_id = g.id WHERE      g.games_year = 1988;
SELECT s.sport_name  FROM event e  JOIN sport s ON e.sport_id = s.id  WHERE e.event_name = 'Cross Country Skiing Men''s 10/15 kilometres Pursuit';
SELECT      (COUNT(CASE WHEN g.season = 'Winter' AND gc.age > 24 THEN 1 END) * 100.0 / COUNT(gc.person_id)) AS percentage FROM      games_competitor gc JOIN      games g ON gc.games_id = g.id JOIN      person p ON gc.person_id = p.id;
SELECT pr.region_id  FROM person p  JOIN person_region pr ON p.id = pr.person_id  WHERE p.full_name = 'Christine Jacoba Aaftink';
SELECT p.height  FROM person p JOIN person_region pr ON p.id = pr.person_id WHERE pr.region_id = 7;
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  WHERE gc.games_id = 3;
SELECT g.id  FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id WHERE c.city_name = 'London';
SELECT COUNT(DISTINCT gc.person_id) AS num_people FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE gc.age < 30 AND g.season = 'Summer';
SELECT g.games_name FROM games g JOIN games_competitor gc ON g.id = gc.games_id WHERE g.id = 13;
SELECT AVG(gc.age) AS average_age FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.season = 'Winter';
SELECT      (COUNT(CASE WHEN gc.age < 35 THEN 1 END) * 100.0 / COUNT(gc.person_id)) AS percentage FROM      games_competitor gc JOIN      games g ON gc.games_id = g.id WHERE      g.season = 'Summer';
SELECT event_name  FROM event  WHERE sport_id = (SELECT id FROM sport WHERE sport_name = 'Basketball');
SELECT m.medal_name  FROM competitor_event ce  JOIN medal m ON ce.medal_id = m.id  WHERE ce.competitor_id = 9;
SELECT DISTINCT competitor_event.event_id FROM competitor_event JOIN medal ON competitor_event.medal_id = medal.id WHERE medal.medal_name = 'Gold';
SELECT full_name  FROM person  WHERE weight = (SELECT MAX(weight) FROM person);
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_year = 1992;
SELECT region_name FROM person_region pr JOIN noc_region nr ON pr.region_id = nr.id GROUP BY region_name ORDER BY COUNT(pr.person_id) DESC LIMIT 1;
SELECT full_name  FROM person  JOIN games_competitor ON person.id = games_competitor.person_id  WHERE age = (SELECT MAX(age) FROM games_competitor);
SELECT s.sport_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id JOIN event e ON ce.event_id = e.id JOIN sport s ON e.sport_id = s.id WHERE p.full_name = 'John Aalberg';
SELECT COUNT(DISTINCT gc.person_id) AS belgian_men_count FROM games_competitor gc JOIN person p ON gc.person_id = p.id JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE p.gender = 'M' AND nr.region_name = 'Belgium';
SELECT COUNT(DISTINCT gc.person_id) AS athlete_count FROM games_competitor gc JOIN games g ON gc.games_id = g.id JOIN games_city gc2 ON g.id = gc2.games_id JOIN city c ON gc2.city_id = c.id WHERE c.city_name = 'Barcelona';
SELECT COUNT(DISTINCT e.event_name) AS different_football_events FROM event e JOIN sport s ON e.sport_id = s.id WHERE s.sport_name = 'Football';
SELECT DISTINCT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id JOIN games_competitor gc2 ON g.id = gc2.games_id JOIN person p ON gc2.person_id = p.id WHERE p.full_name = 'John Aalberg';
SELECT COUNT(g.id)  FROM games g  JOIN games_city gc ON g.id = gc.games_id  JOIN city c ON gc.city_id = c.id  WHERE c.city_name = 'Barcelona';
SELECT COUNT(DISTINCT gc.person_id)  FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_name = '1992 Winter' AND gc.age > 30;
SELECT g.games_name FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN games_competitor gc2 ON g.id = gc2.games_id WHERE gc.city_id = (SELECT id FROM city WHERE city_name = 'Barcelona') GROUP BY g.games_name ORDER BY COUNT(gc2.person_id) DESC LIMIT 1;
SELECT p.full_name  FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Argentina';
SELECT AVG(gc.age) AS average_age FROM games_competitor gc JOIN games g ON gc.games_id = g.id JOIN person_region pr ON gc.person_id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE g.games_name = '2012 Summer' AND nr.region_name = 'Argentina';
SELECT      DIVIDE(COUNT(ce.competitor_id) FILTER (WHERE m.medal_name = 'Bronze'), COUNT(ce.competitor_id)) AS percentage FROM      competitor_event ce JOIN      event e ON ce.event_id = e.id JOIN      medal m ON ce.medal_id = m.id WHERE      e.event_name = 'Basketball Men''s Basketball';
SELECT g.games_name FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'Georgios Abaris';
SELECT p.full_name  FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Greece';
SELECT AVG(gc.age) AS average_age FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_name = '1924 Winter';
SELECT DISTINCT noc_region.noc FROM person JOIN games_competitor ON person.id = games_competitor.person_id JOIN person_region ON person.id = person_region.person_id JOIN noc_region ON person_region.region_id = noc_region.id WHERE person.weight = 77;
SELECT g.games_name  FROM games g  JOIN games_city gc ON g.id = gc.games_id  JOIN city c ON gc.city_id = c.id  WHERE c.city_name = 'Paris';
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN games g ON gc.games_id = g.id WHERE g.games_name = '2000 Summer';
SELECT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id JOIN games_competitor gc2 ON g.id = gc2.games_id WHERE gc2.age = (SELECT MAX(age) FROM games_competitor)
SELECT p.full_name  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  WHERE gc.age = (SELECT MIN(age) FROM games_competitor);
SELECT g.id  FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id WHERE c.city_name = 'Tokyo';
SELECT noc_region.noc, noc_region.region_name FROM person JOIN games_competitor ON person.id = games_competitor.person_id JOIN person_region ON person.id = person_region.person_id JOIN noc_region ON person_region.region_id = noc_region.id WHERE person.weight = (SELECT MAX(weight) FROM person);
SELECT g.games_year, g.season FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'Sohail Abbas';
SELECT AVG(p.weight)  FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id JOIN medal m ON ce.medal_id = m.id WHERE m.medal_name = 'Silver';
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_name = '2004 Summer';
SELECT g.season FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person p ON gc.person_id = p.id WHERE p.height = 180 AND p.weight = 73;
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id JOIN medal m ON ce.medal_id = m.id WHERE m.medal_name = 'Gold';
SELECT AVG(height)  FROM person  JOIN games_competitor ON person.id = games_competitor.person_id  WHERE age BETWEEN 22 AND 28;
SELECT COUNT(DISTINCT gc.person_id)  FROM games_competitor gc JOIN person p ON gc.person_id = p.id JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE p.gender = 'F' AND nr.region_name = 'Iran';
SELECT age FROM person  WHERE height = (SELECT MAX(height) FROM person);
SELECT      COUNT(CASE WHEN weight > 70 THEN 1 END) - COUNT(CASE WHEN weight < 70 THEN 1 END) AS weight_difference FROM      games_competitor gc JOIN      person p ON gc.person_id = p.id WHERE      gc.age <= 24;
SELECT      (COUNT(CASE WHEN gc.age = 28 THEN 1 END) * 100.0 / COUNT(gc.id)) AS percentage FROM      games g JOIN      games_competitor gc ON g.id = gc.games_id WHERE      g.games_name = '2014 Winter';
SELECT DISTINCT nr.region_name FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE p.gender = 'M' AND p.height > (SELECT AVG(height) * 0.87 FROM person);
SELECT SUM(zip_data.households) AS total_households FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code WHERE country.county = 'ARECIBO';
SELECT zip_code  FROM zip_data  WHERE county_fips = (SELECT county_fips FROM country WHERE county = 'ARECIBO')  ORDER BY avg_house_value DESC  LIMIT 1;
SELECT SUM(z.male_population) AS total_males FROM zip_data z JOIN country c ON z.zip_code = c.zip_code WHERE c.county = 'ARECIBO';
SELECT COUNT(*)  FROM zip_data  WHERE state = 'Delaware' AND daylight_savings = 'Yes';
SELECT zip_code  FROM zip_data  WHERE county_fips = (SELECT county_fips FROM country WHERE county = 'ARECIBO')  ORDER BY white_population DESC  LIMIT 1;
SELECT c.county FROM zip_data zd JOIN country c ON zd.zip_code = c.zip_code WHERE zd.avg_income_per_household = (     SELECT MAX(avg_income_per_household)     FROM zip_data );
SELECT DISTINCT c.county FROM country c JOIN zip_data z ON c.zip_code = z.zip_code WHERE z.daylight_savings = 'Yes';
SELECT z.zip_code FROM zip_data z JOIN country c ON z.zip_code = c.zip_code WHERE c.county = 'HUNTINGDON' AND z.employees > 30;
SELECT z.asian_population FROM zip_data z JOIN avoid a ON z.zip_code = a.zip_code WHERE a.bad_alias = 'URB San Joaquin';
SELECT COUNT(DISTINCT z.zip_code)  FROM zip_data z  JOIN avoid a ON z.zip_code = a.zip_code  WHERE a.bad_alias = 'Internal Revenue Service'  AND z.time_zone = 'Eastern';
SELECT a.bad_alias FROM alias a JOIN zip_data z ON a.zip_code = z.zip_code WHERE z.avg_house_value = (SELECT MAX(avg_house_value) FROM zip_data);
SELECT a.bad_alias FROM zip_data z JOIN avoid a ON z.zip_code = a.zip_code WHERE z.median_female_age > 32;
SELECT MAX(male_population / female_population) AS highest_gender_ratio FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code WHERE county = 'ARECIBO';
SELECT AVG(female_median_age) AS average_median_female_age FROM zip_data z JOIN country c ON z.zip_code = c.zip_code WHERE c.county = 'ARECIBO';
SELECT ac.area_code FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE zd.female_median_age > 32;
SELECT a.alias  FROM zip_data z  JOIN alias a ON z.zip_code = a.zip_code  WHERE z.city = 'Hartford';
SELECT COUNT(DISTINCT county)  FROM country  WHERE state = 'Alabama';
SELECT COUNT(*)  FROM zip_data  WHERE state = 'NY' AND type = 'Post Office';
SELECT z.city, z.latitude, z.longitude FROM zip_data z JOIN area_code a ON z.zip_code = a.zip_code WHERE a.area_code = '787';
SELECT total_delivery_receptacles FROM zip_data WHERE state = 'CA' AND type = 'Community Post Office' ORDER BY total_delivery_receptacles DESC LIMIT 1;
SELECT c.county FROM zip_data z JOIN country c ON z.zip_code = c.zip_code WHERE z.female_population = (SELECT MAX(female_population) FROM zip_data);
SELECT DISTINCT s.name FROM state s JOIN zip_data z ON s.abbreviation = z.state WHERE z.division IS NULL;
SELECT      MAX(population_2020) - MAX(population_2010) AS population_difference FROM      zip_data  WHERE      zip_code IN (         SELECT              zip_code          FROM              zip_congress          WHERE              district IN (                 SELECT                      District                  FROM                      congress                  WHERE                      state = 'PA'                      AND House = 'Representative'                      AND abbreviation = 'PA'             )     )     AND zip_code IN (         SELECT              CBSA          FROM              CBSA          WHERE              CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ'     );
SELECT zip_code  FROM country  WHERE county = 'NEW CASTLE' AND state = 'Delaware';
SELECT COUNT(*) AS representative_count FROM congress WHERE state = (     SELECT state     FROM zip_data     ORDER BY monthly_benefits_retired_workers DESC     LIMIT 1 );
SELECT COUNT(DISTINCT z.city) AS city_count FROM zip_data z JOIN congress c ON z.zip_code = c.zip_code WHERE c.first_name = 'Lisa' AND c.last_name = 'Murkowski' AND z.employees = 0;
SELECT c.first_name, c.last_name FROM congress c JOIN (     SELECT z.state, SUM(z.asian_population) AS total_asian_population     FROM zip_data z     GROUP BY z.state     ORDER BY total_asian_population DESC     LIMIT 3 ) AS top_states ON c.abbreviation = top_states.state;
SELECT state.name  FROM country  WHERE county = 'Outagamie';
SELECT c.party  FROM zip_data z  JOIN zip_congress zc ON z.zip_code = zc.zip_code  JOIN congress c ON zc.district = c.District AND c.state = z.state  WHERE z.zip_code = '91701';
SELECT SUM(zip_data.male_population) AS total_males FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code WHERE country.county = 'NEW HAVEN';
SELECT a.alias  FROM zip_data z  JOIN alias a ON z.zip_code = a.zip_code  WHERE z.latitude = 18.090875 AND z.longitude = -66.867756;
SELECT ac.area_code FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE zd.city = (     SELECT city     FROM zip_data     ORDER BY over_65 DESC     LIMIT 1 );
SELECT COUNT(a.bad_alias) AS bad_alias_count FROM congress c JOIN zip_congress zc ON c.District = zc.district JOIN zip_data zd ON zc.zip_code = zd.zip_code JOIN avoid a ON zd.zip_code = a.zip_code WHERE c.first_name = 'Thompson' AND c.last_name = 'Bennie' AND c.party = 'G';
SELECT z.latitude, z.longitude FROM zip_data z JOIN area_code a ON z.zip_code = a.zip_code WHERE a.area_code = '636';
SELECT z.zip_code FROM congress c JOIN zip_congress zc ON c.District = zc.district JOIN zip_data z ON zc.zip_code = z.zip_code WHERE c.first_name = 'Buchanan' AND c.last_name = 'Vernon';
SELECT s.name  FROM area_code ac  JOIN zip_data z ON ac.zip_code = z.zip_code  JOIN state s ON z.state = s.abbreviation  WHERE ac.area_code = '878';
SELECT COUNT(DISTINCT county) AS county_count FROM country WHERE state = 'Virginia';
SELECT CBSA_name, latitude, longitude  FROM CBSA  JOIN zip_data ON CBSA.CBSA = zip_data.CBSA  WHERE zip_data.zip_code = '45503';
SELECT country.county  FROM congress  JOIN zip_congress ON congress.District = zip_congress.district  JOIN country ON zip_congress.zip_code = country.zip_code  WHERE congress.first_name = 'Vicky' AND congress.last_name = 'Hartzler';
SELECT AVG(male_median_age) AS average_male_median_age FROM zip_data z JOIN country c ON z.zip_code = c.zip_code WHERE c.county = 'WINDHAM';
SELECT AVG(zd.female_median_age) AS average_female_median_age FROM congress c JOIN zip_congress zc ON c.District = zc.district JOIN zip_data zd ON zc.zip_code = zd.zip_code JOIN country co ON zd.zip_code = co.zip_code WHERE c.first_name = 'Ron' AND c.last_name = 'DeSantis';
SELECT ac.area_code  FROM zip_data zd  JOIN area_code ac ON zd.zip_code = ac.zip_code  WHERE zd.city = 'Bishopville' AND zd.state = 'SC';
SELECT a.bad_alias  FROM zip_data z  JOIN avoid a ON z.zip_code = a.zip_code  WHERE z.city = 'Geneva' AND z.state = 'AL';
SELECT z.city, z.state  FROM zip_data z  JOIN avoid a ON z.zip_code = a.zip_code  WHERE a.bad_alias = 'Lawrenceville';
SELECT a.alias, av.bad_alias  FROM alias a  JOIN avoid av ON a.zip_code = av.zip_code  WHERE a.zip_code = '38015';
SELECT z.zip_code FROM congress c JOIN zip_congress zc ON c.District = zc.district JOIN zip_data z ON zc.zip_code = z.zip_code WHERE c.first_name = 'Steven' AND c.last_name = 'King';
SELECT CBSA_name, CBSA_type  FROM CBSA  WHERE CBSA IN (     SELECT CBSA      FROM zip_data      WHERE city = 'York' AND state = 'ME' );
SELECT z.city, z.zip_code, a.area_code FROM zip_data z JOIN area_code a ON z.zip_code = a.zip_code WHERE z.median_age > 40 LIMIT 10;
SELECT country.county  FROM avoid  JOIN country ON avoid.zip_code = country.zip_code  WHERE avoid.bad_alias = 'Druid Hills';
SELECT ac.area_code FROM area_code ac JOIN zip_data zd ON ac.zip_code = zd.zip_code JOIN country c ON zd.zip_code = c.zip_code WHERE c.county = 'Phillips' AND c.state = 'Montana';
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name, z.zip_code FROM congress c JOIN zip_congress zc ON c.District = zc.district JOIN zip_data z ON zc.zip_code = z.zip_code WHERE c.state = 'Wisconsin' ORDER BY z.land_area DESC LIMIT 1;
SELECT DISTINCT s.name FROM state s JOIN zip_data z ON s.abbreviation = z.state WHERE z.time_zone = 'Central';
SELECT z.city, z.state FROM zip_data z JOIN CBSA c ON z.CBSA = c.CBSA WHERE c.CBSA_name = 'Lexington-Fayette, KY' LIMIT 10;
SELECT      (COUNT(CASE WHEN party = 'Democrat' THEN 1 END) * 100.0 / NULLIF(COUNT(CASE WHEN party = 'Republican' THEN 1 END), 0)) AS percentage_ratio,     z.zip_code FROM      congress c JOIN      zip_data z ON c.abbreviation = z.state WHERE      z.state = 'IN' AND      c.party = 'Democrat' GROUP BY      z.zip_code;
SELECT      (SELECT COUNT(*) FROM congress WHERE state = 'Alabama') * 1.0 /      (SELECT COUNT(*) FROM congress WHERE state = 'Illinois') AS ratio;
SELECT zip_code, AVG(population_2020) AS average_population_2020 FROM zip_data GROUP BY zip_code;
SELECT zd.male_population FROM zip_data zd JOIN CBSA c ON zd.CBSA = c.CBSA WHERE c.CBSA_name = 'Berlin, NH';
SELECT CBSA, CBSA_name FROM zip_data GROUP BY CBSA, CBSA_name HAVING COUNT(zip_code) > 10;
SELECT a.bad_alias  FROM alias a  JOIN zip_data z ON a.zip_code = z.zip_code  WHERE z.state = 'PR';
SELECT z.longitude, z.latitude FROM congress c JOIN zip_congress zc ON c.District = zc.district JOIN zip_data z ON zc.zip_code = z.zip_code WHERE c.first_name = 'Alan' AND c.last_name = 'Grayson';
SELECT state  FROM area_code  JOIN zip_data ON area_code.zip_code = zip_data.zip_code  WHERE area_code = '787';
SELECT DISTINCT c.first_name, c.last_name FROM congress c JOIN zip_congress zc ON c.District = zc.district JOIN zip_data zd ON zc.zip_code = zd.zip_code WHERE zd.population_2020 > 30000;
SELECT zip_code FROM area_code WHERE zip_code IN (     SELECT zip_code     FROM zip_data     WHERE state = 'Massachusetts' ) GROUP BY zip_code HAVING COUNT(area_code) > 1;
SELECT country.county  FROM zip_data  JOIN country ON zip_data.zip_code = country.zip_code  WHERE zip_data.city = 'Arecibo';
SELECT COUNT(DISTINCT z.zip_code)  FROM zip_data z  JOIN CBSA c ON z.CBSA = c.CBSA  WHERE c.CBSA_name = 'Barre, VT';
SELECT zip_code  FROM zip_data  WHERE county_fips = (SELECT county_fips FROM country WHERE county = 'Saint Croix')  ORDER BY land_area DESC  LIMIT 1;
SELECT zc.district, (zd.population_2020 - zd.population_2010) AS population_difference FROM congress c JOIN zip_congress zc ON c.District = zc.district JOIN zip_data zd ON zc.zip_code = zd.zip_code WHERE c.first_name = 'Tim' AND c.last_name = 'Griffin';
SELECT (zd.asian_population / zd.population_2020) * 100 AS asian_population_percentage FROM zip_data zd JOIN CBSA c ON zd.CBSA = c.CBSA WHERE c.CBSA_name = 'Atmore, AL';
SELECT city, MAX(asian_population) AS highest_asian_population FROM zip_data WHERE zip_code IN (SELECT zip_code FROM area_code WHERE area_code = '939') GROUP BY city ORDER BY highest_asian_population DESC LIMIT 1;
SELECT country.name AS country_name, state.name AS state_name FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code JOIN state ON zip_data.state = state.abbreviation WHERE zip_data.elevation = 1039;
SELECT a.alias, z.elevation FROM alias a JOIN zip_data z ON a.zip_code = z.zip_code WHERE z.zip_code = '1028';
SELECT ac.area_code FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE zd.land_area = (SELECT MAX(land_area) FROM zip_data);
SELECT ac.area_code FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE zd.white_population BETWEEN 1700 AND 2000;
SELECT z.asian_population FROM zip_data z JOIN alias a ON z.zip_code = a.zip_code WHERE a.alias = 'Leeds';
SELECT ac.area_code, c.country FROM zip_data z JOIN area_code ac ON z.zip_code = ac.zip_code JOIN country c ON z.zip_code = c.zip_code WHERE z.city = 'Savoy';
SELECT a.alias FROM zip_data z JOIN alias a ON z.zip_code = a.zip_code WHERE z.population_2010 = 0;
SELECT COUNT(DISTINCT z.city) AS cities_with_daylight_savings FROM zip_data z JOIN area_code a ON z.zip_code = a.zip_code WHERE a.area_code = '608' AND z.daylight_savings = 'Yes';
SELECT AVG(z.elevation)  FROM zip_data z  JOIN alias a ON z.zip_code = a.zip_code  WHERE a.alias = 'Amherst';
SELECT country.state, country.county FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code WHERE zip_data.city = 'Dalton';
SELECT DISTINCT a.alias FROM alias a JOIN zip_data z ON a.zip_code = z.zip_code WHERE z.type = 'Post Office' LIMIT 5;
SELECT      (COUNT(CASE WHEN type = 'P.O. Box Only' THEN 1 END) -       COUNT(CASE WHEN type = 'Post Office' THEN 1 END)) AS difference FROM      zip_data JOIN      area_code ON zip_data.zip_code = area_code.zip_code WHERE      area_code.area_code = '787';
SELECT      (SUM(population_2020) - SUM(population_2010)) * 100.0 / SUM(population_2010) AS percentage_increase FROM      zip_data  JOIN      country ON zip_data.zip_code = country.zip_code  WHERE      country.county = 'ARROYO';
SELECT zip_code, city  FROM zip_data  WHERE state = 'Texas' AND total_beneficiaries > 10000;
SELECT COUNT(*)  FROM zip_data  WHERE state = 'DC'  AND black_population > 20000;
SELECT z.city, a.alias FROM zip_data z JOIN alias a ON z.zip_code = a.zip_code WHERE z.zip_code = '19019';
SELECT a.bad_alias  FROM alias a  JOIN zip_data z ON a.zip_code = z.zip_code  WHERE z.city = 'Camuy';
SELECT z.zip_code, z.city, CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM zip_data z JOIN congress c ON z.zip_code = z.zip_code WHERE z.population_2020 = (SELECT MAX(population_2020) FROM zip_data);
SELECT COUNT(zip_code)  FROM zip_data  WHERE daylight_savings = 'Yes'  AND state = 'Illinois'  AND region = 'Midwest';
SELECT country.zip_code, country.county  FROM country  JOIN state ON country.state = state.abbreviation  WHERE state.name = 'Virgin Islands';
SELECT z.zip_code, a.alias FROM zip_data z JOIN alias a ON z.zip_code = a.zip_code WHERE z.city = 'Greeneville';
SELECT      (SELECT COUNT(z.zip_code)       FROM zip_data z       JOIN congress c ON z.zip_code = c.zip_code       WHERE c.first_name = 'Smith' AND c.last_name = 'Adrian') AS Smith_Adrian_Count,     (SELECT COUNT(z.zip_code)       FROM zip_data z       JOIN congress c ON z.zip_code = c.zip_code       WHERE c.first_name = 'Heck' AND c.last_name = 'Joe') AS Heck_Joe_Count
SELECT z.zip_code, c.CBSA_name FROM zip_data z JOIN CBSA c ON z.CBSA = c.CBSA WHERE z.city = 'Oxford';
SELECT z.zip_code, z.organization FROM zip_data z JOIN CBSA c ON z.CBSA = c.CBSA WHERE c.CBSA_name = 'Kingsport-Bristol, TN-VA';
SELECT z.zip_code, CONCAT(c.first_name, ' ', c.last_name) AS representative_name FROM zip_data z JOIN zip_congress zc ON z.zip_code = zc.zip_code JOIN congress c ON zc.district = c.District AND c.state = z.state WHERE z.organization = 'Readers Digest';
SELECT      (COUNT(CASE WHEN type = 'Post Office' THEN zip_code END) * 100.0 / COUNT(zip_code)) AS percentage FROM      zip_data WHERE      state = 'CA';
SELECT DISTINCT z.zip_code FROM zip_data z JOIN congress c ON z.zip_code = c.zip_code WHERE c.House = 'Senate';
SELECT z.city, COUNT(a.bad_alias) AS bad_alias_count FROM zip_data z JOIN avoid a ON z.zip_code = a.zip_code GROUP BY z.city ORDER BY bad_alias_count DESC LIMIT 1;
SELECT DISTINCT county FROM country WHERE state = 'Georgia';
SELECT zip_data.zip_code, zip_data.city, zip_data.state, zip_data.latitude, zip_data.longitude FROM zip_data JOIN area_code ON zip_data.zip_code = area_code.zip_code WHERE area_code.area_code = '410';
SELECT CBSA_name  FROM CBSA  WHERE CBSA = (     SELECT CBSA      FROM zip_data      ORDER BY avg_house_value DESC      LIMIT 1 );
SELECT a.bad_alias FROM alias a JOIN zip_data z ON a.zip_code = z.zip_code WHERE z.city = 'East Setauket';
SELECT SUM(population_2010)  FROM zip_data  JOIN country ON zip_data.zip_code = country.zip_code  WHERE country.county = 'WILCOX';
SELECT area_code.zip_code  FROM zip_data  JOIN area_code ON zip_data.zip_code = area_code.zip_code  ORDER BY zip_data.asian_population DESC  LIMIT 1;
SELECT DISTINCT z.city FROM zip_data z JOIN CBSA c ON z.CBSA = c.CBSA WHERE c.CBSA_type = 'Micro';
SELECT state, COUNT(DISTINCT county) AS county_count FROM country GROUP BY state ORDER BY county_count DESC LIMIT 1;
SELECT SUM(zip_data.households) AS total_households FROM zip_data JOIN zip_congress ON zip_data.zip_code = zip_congress.zip_code JOIN congress ON zip_congress.district = congress.District WHERE congress.abbreviation = 'FL' AND congress.District = '10';
SELECT AVG(z.avg_income_per_household) AS average_household_income FROM zip_data z JOIN avoid a ON z.zip_code = a.zip_code WHERE a.bad_alias = 'Danzig';
SELECT state, SUM(female_population) AS total_female_population FROM zip_data GROUP BY state HAVING SUM(female_population) > (SELECT AVG(total_female_population)                                     FROM (SELECT SUM(female_population) AS total_female_population                                           FROM zip_data                                           GROUP BY state) AS avg_female);
SELECT      (SUM(CASE WHEN c.county = 'CORYELL' THEN z.households ELSE 0 END) * 100.0 / SUM(z.households)) AS percentage FROM      zip_data z JOIN      country c ON z.zip_code = c.zip_code WHERE      c.state = (SELECT abbreviation FROM state WHERE name = 'Texas'); -- Replace 'Texas' with the appropriate state name if needed
SELECT CBSA.CBSA_name, CBSA.CBSA_type FROM CBSA JOIN zip_data ON CBSA.CBSA = zip_data.CBSA WHERE zip_data.city = 'Cabo Rojo';
SELECT country.name  FROM country  JOIN zip_data ON country.zip_code = zip_data.zip_code  WHERE zip_data.city = 'Las Marias';
SELECT COUNT(DISTINCT z.city) AS city_count FROM congress c JOIN zip_congress zc ON c.District = zc.district JOIN zip_data z ON zc.zip_code = z.zip_code WHERE c.first_name = 'Pedro' AND c.last_name = 'Pierluisi';
SELECT a.bad_alias FROM alias a JOIN zip_data z ON a.zip_code = z.zip_code WHERE z.city = 'Aguadilla';
SELECT CONCAT(c.first_name, ' ', c.last_name) AS congressman_name FROM congress c JOIN zip_data z ON c.state = z.state WHERE z.city = 'Guanica';
SELECT c.state, COUNT(a.bad_alias) AS bad_alias_count FROM avoid a JOIN zip_data z ON a.zip_code = z.zip_code JOIN congress c ON z.zip_code = c.zip_code GROUP BY c.state ORDER BY bad_alias_count DESC LIMIT 1;
SELECT      (SELECT COUNT(bad_alias) FROM avoid a       JOIN zip_data z ON a.zip_code = z.zip_code       WHERE z.city = 'Aguada') -      (SELECT COUNT(bad_alias) FROM avoid a       JOIN zip_data z ON a.zip_code = z.zip_code       WHERE z.city = 'Aguadilla') AS difference;
SELECT s.name FROM CBSA c JOIN state s ON c.CBSA = s.abbreviation WHERE c.CBSA_type = 'Metro' GROUP BY s.name HAVING COUNT(*) > 50;
SELECT SUM(population_2020)  FROM zip_data  JOIN country ON zip_data.zip_code = country.zip_code  WHERE country.county = 'ARECIBO';
SELECT DISTINCT country  FROM zip_data  WHERE population_2010 > 10000;
SELECT country.name FROM country JOIN zip_data ON country.zip_code = zip_data.zip_code WHERE zip_data.households = (     SELECT MAX(households)     FROM zip_data );
SELECT      (SUM(CASE WHEN households > 10000 THEN households ELSE 0 END) * 100.0 / SUM(households)) AS percentage FROM      zip_data WHERE      type = 'Residential';
SELECT      DIVIDE(COUNT(CASE WHEN type = 'Post Office' THEN 1 END), COUNT(*)) * 100 AS percentage  FROM      zip_data  WHERE      county = 'SAINT CROIX';
SELECT c.country FROM area_code ac JOIN zip_data zd ON ac.zip_code = zd.zip_code JOIN country c ON zd.zip_code = c.zip_code WHERE ac.area_code = '787' AND zd.type = 'Unique Post Office';
SELECT z.elevation FROM zip_data z JOIN alias a ON z.zip_code = a.zip_code WHERE a.alias = 'East Longmeadow';
SELECT COUNT(DISTINCT city) AS total_cities FROM zip_data WHERE daylight_savings = 'No';
SELECT country.state, area_code.area_code FROM country JOIN area_code ON country.zip_code = area_code.zip_code WHERE country.zip_code = '1116';
SELECT z.city, z.type FROM zip_data z JOIN alias a ON z.zip_code = a.zip_code WHERE a.alias = 'St Thomas';
SELECT DISTINCT city  FROM zip_data  WHERE county_fips IN (SELECT county_fips FROM country WHERE county = 'Noble' AND state = 'Oklahoma');
SELECT ac.area_code FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE zd.water_area = (     SELECT MAX(water_area)     FROM zip_data     WHERE city IN ('City1', 'City2', 'City3')  -- Replace with the actual city names );
SELECT a.alias  FROM zip_data z  JOIN alias a ON z.zip_code = a.zip_code  WHERE z.population_2020 = (SELECT MAX(population_2020) FROM zip_data);
SELECT elevation  FROM zip_data  WHERE county_fips IN (SELECT county_fips FROM country WHERE state = 'MA' AND county = 'Hampden');
SELECT ac.area_code FROM area_code ac JOIN zip_data zd ON ac.zip_code = zd.zip_code WHERE zd.hispanic_population = (SELECT MAX(hispanic_population) FROM zip_data);
SELECT a.alias FROM zip_data z JOIN alias a ON z.zip_code = a.zip_code WHERE z.asian_population = 7;
SELECT AVG(z.white_population)  FROM zip_data z  JOIN area_code a ON z.zip_code = a.zip_code  WHERE a.area_code = 920;
SELECT      (COUNT(CASE WHEN c.state_fips < 20 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      zip_data z JOIN      alias a ON z.zip_code = a.zip_code JOIN      country c ON z.zip_code = c.zip_code WHERE      a.alias = 'Ponce';
SELECT DISTINCT c.country FROM country c JOIN zip_data z ON c.zip_code = z.zip_code WHERE z.population_2020 > (0.97 * (SELECT AVG(population_2020) FROM zip_data));
SELECT COUNT(zip_code) AS postal_point_count FROM zip_congress WHERE district IN (     SELECT District     FROM congress     WHERE first_name = 'Ann' AND last_name = 'Kirkpatrick' );
SELECT z.zip_code, z.latitude, z.longitude FROM zip_data z JOIN CBSA c ON z.CBSA = c.CBSA WHERE c.CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ';
SELECT z.zip_code, z.city, z.latitude, z.longitude FROM zip_data z JOIN avoid a ON z.zip_code = a.zip_code WHERE a.bad_alias = 'Shared Reshipper';
SELECT c.first_name, c.last_name FROM congress c JOIN zip_data z ON c.state = z.state WHERE z.city = 'Garfield';
SELECT COUNT(zip_code)  FROM zip_data  WHERE CBSA IN (SELECT CBSA FROM CBSA WHERE CBSA_name = 'New York-Newark-Jersey City, NY-NJ-PA');
SELECT COUNT(DISTINCT z.zip_code) AS postal_points FROM zip_data z JOIN congress c ON z.zip_code = z.zip_code WHERE c.state = 'Puerto Rico';
SELECT COUNT(zip_code) AS postal_points, country FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code WHERE zip_data.state = 'West Virginia' GROUP BY country;
SELECT z.zip_code, a.area_code FROM zip_data z JOIN area_code a ON z.zip_code = a.zip_code WHERE z.type = 'Community Post Office' AND z.elevation > 6000;
SELECT COUNT(DISTINCT z.zip_code) AS postal_points FROM zip_data z JOIN congress c ON z.state = c.state WHERE c.House = 'Representatives' AND c.state = 'Mississippi';
SELECT congress.CID  FROM zip_data  JOIN zip_congress ON zip_data.zip_code = zip_congress.zip_code  JOIN congress ON zip_congress.district = congress.District  WHERE zip_data.city = 'East Springfield';
SELECT CBSA.CBSA_name FROM zip_data JOIN CBSA ON zip_data.CBSA = CBSA.CBSA WHERE zip_data.employees = (SELECT MAX(employees) FROM zip_data);
SELECT COUNT(DISTINCT zip_code) AS unique_post_office_count FROM zip_data WHERE state = 'Ohio' AND type = 'Unique Post Office';
SELECT DIVIDE(SUM(total_beneficiaries), COUNT(zip_code)) AS average_beneficiaries FROM zip_data WHERE state = 'Guam';
SELECT      (COUNT(CASE WHEN party = 'Democrat' THEN 1 END) * 100.0 / COUNT(congress_rep_id)) AS percentage,     COUNT(DISTINCT z.zip_code) AS postal_points_in_hawaii FROM      congress c LEFT JOIN      zip_data z ON c.abbreviation = z.state WHERE      z.state = 'Hawaii';
SELECT BrandName  FROM rootbeerbrand  WHERE FirstBrewedYear = (SELECT MIN(FirstBrewedYear) FROM rootbeerbrand);
SELECT COUNT(DISTINCT BreweryName) AS NumberOfBreweries FROM rootbeerbrand WHERE Country = 'United States';
SELECT BrandName  FROM rootbeerbrand  WHERE FacebookPage IS NOT NULL;
SELECT BrandName  FROM rootbeerbrand  WHERE (CurrentRetailPrice - WholesaleCost) = (     SELECT MIN(CurrentRetailPrice - WholesaleCost)      FROM rootbeerbrand );
SELECT Description FROM rootbeerbrand WHERE BrandName = 'A&W';
SELECT City FROM rootbeerbrand WHERE BreweryName = 'AJ Stephans Beverages';
SELECT COUNT(*)  FROM transaction  WHERE CustomerID = (SELECT CustomerID FROM customers WHERE First = 'Frank-Paul' AND Last = 'Santangelo')  AND SUBSTR(TransactionDate, 1, 4) = '2014'  AND SUBSTR(TransactionDate, 6, 2) = '07';
SELECT COUNT(*)  FROM transaction t JOIN customers c ON t.CustomerID = c.CustomerID WHERE SUBSTR(t.TransactionDate, 1, 4) = '2014'    AND SUBSTR(t.TransactionDate, 6, 2) = '07'    AND c.Gender = 'M';
SELECT COUNT(DISTINCT c.CustomerID)  FROM customers c  JOIN transaction t ON c.CustomerID = t.CustomerID  WHERE c.SubscribedToEmailList = 'TRUE'  AND t.CreditCardType = 'Visa'  AND SUBSTR(t.TransactionDate, 1, 4) = '2014'  AND SUBSTR(t.TransactionDate, 6, 2) = '07';
SELECT CONCAT(c.First, ' ', c.Last) AS FullName FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID WHERE SUBSTR(t.TransactionDate, 1, 4) = '2014' AND SUBSTR(t.TransactionDate, 6, 2) = '08' GROUP BY c.CustomerID ORDER BY COUNT(t.TransactionID) DESC LIMIT 1;
SELECT rb.BrandName FROM transaction t JOIN rootbeer r ON t.RootBeerID = r.RootBeerID JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.First = 'Frank-Paul' AND c.Last = 'Santangelo' AND t.TransactionDate = '2014-07-07';
SELECT COUNT(*)  FROM rootbeer r JOIN transaction t ON r.RootBeerID = t.RootBeerID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.First = 'Frank-Paul' AND c.Last = 'Santangelo'  AND t.TransactionDate = '2014-07-07'  AND r.ContainerType = 'Can';
SELECT COUNT(*)  FROM transaction t JOIN rootbeer r ON t.RootBeerID = r.RootBeerID JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID WHERE rb.BrandName = 'Bulldog'  AND SUBSTR(t.TransactionDate, 1, 4) = '2014'  AND SUBSTR(t.TransactionDate, 6, 2) = '08';
SELECT CONCAT(c.First, ' ', c.Last) AS FullName FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID JOIN rootbeer r ON t.RootBeerID = r.RootBeerID JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID WHERE rb.BreweryName = 'AJ Stephans Beverages' GROUP BY c.CustomerID;
SELECT COUNT(DISTINCT rb.BrandID) FROM rootbeerbrand rb JOIN rootbeer r ON rb.BrandID = r.BrandID JOIN transaction t ON r.RootBeerID = t.RootBeerID WHERE rb.Twitter IS NULL AND SUBSTR(t.TransactionDate, 1, 4) = '2014' AND SUBSTR(t.TransactionDate, 6, 2) = '08';
SELECT t.CreditCardNumber  FROM transaction t  JOIN customers c ON t.CustomerID = c.CustomerID  WHERE c.First = 'Frank-Paul' AND c.Last = 'Santangelo' AND t.TransactionDate = '2014-07-07';
SELECT COUNT(*)  FROM rootbeer r JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID JOIN customers c ON c.CustomerID = (SELECT CustomerID FROM customers WHERE First = 'Frank-Paul' AND Last = 'Santangelo') WHERE rb.Honey = 'FALSE' AND rb.ArtificialSweetener = 'FALSE' AND r.CustomerID = c.CustomerID;
SELECT TransactionDate FROM transaction t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Gender = 'M' GROUP BY TransactionDate HAVING COUNT(t.RootBeerID) > 3;
SELECT AVG(DailySales) AS AverageRootBeersSold FROM (     SELECT COUNT(t.RootBeerID) AS DailySales     FROM transaction t     JOIN rootbeer r ON t.RootBeerID = r.RootBeerID     JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID     WHERE rb.BrandName = 'A&W'        AND SUBSTR(t.TransactionDate, 1, 4) = '2014'        AND SUBSTR(t.TransactionDate, 6, 2) = '08'     GROUP BY DATE(t.TransactionDate) ) AS DailySalesCount;
SELECT      (SUM(CASE WHEN rb.BrandID IN (SELECT BrandID FROM rootbeerbrand WHERE BreweryName = 'AJ Stephans Beverages') THEN 1 ELSE 0 END) * 1.0 / COUNT(rb.RootBeerID)) * 100 AS Percentage FROM      transaction t JOIN      rootbeer rb ON t.RootBeerID = rb.RootBeerID WHERE      SUBSTR(t.TransactionDate, 1, 4) = '2014';
SELECT COUNT(*)  FROM rootbeerreview  WHERE CustomerID = (SELECT CustomerID FROM customers WHERE First = 'James' AND Last = 'House');
SELECT CreditCardNumber  FROM transaction  WHERE CustomerID = (SELECT CustomerID FROM customers WHERE First = 'Lisa' AND Last = 'Ling');
SELECT Latitude, Longitude  FROM geolocation  JOIN location ON geolocation.LocationID = location.LocationID  WHERE location.LocationName = 'Sac State American River Courtyard';
SELECT l.LocationName  FROM transaction t  JOIN location l ON t.LocationID = l.LocationID  WHERE t.TransactionID = 100885;
SELECT c.City  FROM customers c  JOIN transaction t ON c.CustomerID = t.CustomerID  WHERE t.TransactionID = 103545;
SELECT c.PhoneNumber  FROM customers c  JOIN transaction t ON c.CustomerID = t.CustomerID  WHERE t.CreditCardNumber = '6011179359005380';
SELECT CONCAT(c.First, ' ', c.Last) AS FullName FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID GROUP BY c.CustomerID ORDER BY COUNT(r.CustomerID) DESC LIMIT 1;
SELECT c.FirstPurchaseDate FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID WHERE r.Review = 'Tastes like Australia.';
SELECT FirstPurchaseDate  FROM customers  WHERE First = 'Natalie' AND Last = 'Dorris';
SELECT rb.BreweryName FROM rootbeerreview rbr JOIN rootbeerbrand rb ON rbr.BrandID = rb.BrandID WHERE rbr.BrandID IN (     SELECT rbr2.BrandID     FROM rootbeerreview rbr2     WHERE rbr2.StarRating = 5     GROUP BY rbr2.BrandID     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT c.SubscribedToEmailList FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID JOIN rootbeerbrand b ON r.BrandID = b.BrandID WHERE r.StarRating = 3    AND b.BrandName = 'Frostie'    AND r.ReviewDate = '2014-04-24';
SELECT rbb.CurrentRetailPrice FROM rootbeerreview rbr JOIN rootbeerbrand rbb ON rbr.BrandID = rbb.BrandID WHERE rbr.Review = 'The quintessential dessert root beer. No ice cream required.';
SELECT      (SUM(CASE WHEN rr.StarRating = 5 THEN 1 ELSE 0 END) * 1.0 / COUNT(rr.BrandID)) * 100 AS PercentageOfFiveStarRatings FROM      rootbeerreview rr JOIN      rootbeerbrand rb ON rr.BrandID = rb.BrandID WHERE      rb.BrandName = 'River City';
SELECT AVG(ReviewCount) AS AverageReviews FROM (     SELECT BrandID, COUNT(CustomerID) AS ReviewCount     FROM rootbeerreview r     JOIN rootbeerbrand b ON r.BrandID = b.BrandID     WHERE b.State = 'CA'     GROUP BY BrandID ) AS ReviewCounts;
SELECT COUNT(*)  FROM customers  WHERE Gender = 'F' AND SubscribedToEmailList = 'TRUE';
SELECT BrandName  FROM rootbeerbrand  WHERE FirstBrewedYear = (SELECT MAX(FirstBrewedYear) FROM rootbeerbrand);
SELECT CONCAT(First, ' ', Last) AS FullName FROM customers ORDER BY FirstPurchaseDate LIMIT 10;
SELECT COUNT(DISTINCT BreweryName) AS NumberOfBreweries FROM rootbeerbrand WHERE Country = 'Australia';
SELECT COUNT(*)  FROM customers  WHERE First = 'Charles' AND City = 'Sacramento';
SELECT COUNT(*)  FROM transaction  WHERE CreditCardType = 'MasterCard'  AND TransactionDate >= '2014-01-01'  AND TransactionDate <= '2014-12-31';
SELECT rb.BrandName FROM rootbeerreview rbr JOIN rootbeerbrand rb ON rbr.BrandID = rb.BrandID JOIN customers c ON rbr.CustomerID = c.CustomerID WHERE c.First = 'Jayne' AND c.Last = 'Collins' ORDER BY rbr.StarRating ASC LIMIT 1;
SELECT COUNT(*) FROM rootbeer r JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID JOIN location l ON r.LocationID = l.LocationID WHERE rb.Honey = 'TRUE'   AND rb.ContainerType = 'Bottle'   AND rb.CaneSugar = 'FALSE'   AND r.PurchaseDate <= '2015-12-31'   AND l.LocationName = 'Sac State American River Courtyard';
SELECT rb.BrandID, rb.BreweryName FROM rootbeer r JOIN transaction t ON r.RootBeerID = t.RootBeerID JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID WHERE t.PurchaseDate >= '2016-01-01' AND t.PurchaseDate <= '2016-12-31' GROUP BY rb.BrandID, rb.BreweryName ORDER BY COUNT(t.TransactionID) DESC LIMIT 1;
SELECT CONCAT(c.First, ' ', c.Last) AS FullName FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID JOIN rootbeer b ON r.BrandID = b.BrandID WHERE b.BrandName = 'River City' AND r.StarRating = 5;
SELECT COUNT(*)  FROM transaction t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.First = 'Tom' AND c.Last = 'Hanks'  AND t.TransactionDate >= '2015-01-01' AND t.TransactionDate < '2016-12-31';
SELECT rb.BrandName, COUNT(rr.StarRating) AS FiveStarCount FROM rootbeerreview rr JOIN rootbeerbrand rb ON rr.BrandID = rb.BrandID WHERE rr.StarRating = 5 GROUP BY rb.BrandName ORDER BY FiveStarCount DESC LIMIT 1;
SELECT COUNT(t.TransactionID) AS TotalPurchased FROM transaction t JOIN rootbeer r ON t.RootBeerID = r.RootBeerID JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID JOIN customers c ON t.CustomerID = c.CustomerID WHERE rb.BrandName = 'Henry Weinhard''s' AND c.First = 'Nicholas' AND c.Last = 'Sparks';
SELECT rb.BrandName, COUNT(t.RootBeerID) AS PurchaseCount FROM rootbeerbrand rb JOIN rootbeer r ON rb.BrandID = r.BrandID JOIN transaction t ON r.RootBeerID = t.RootBeerID WHERE rb.FacebookPage IS NULL AND rb.Twitter IS NULL GROUP BY rb.BrandName ORDER BY PurchaseCount DESC LIMIT 1;
SELECT l.LocationName, COUNT(t.RootBeerID) AS TotalSold FROM transaction t JOIN rootbeer r ON t.RootBeerID = r.RootBeerID JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID JOIN location l ON t.LocationID = l.LocationID WHERE l.LocationName IN ('Sac State American River Courtyard', 'Sac State Union') AND rb.BrandName = 'Dog n Suds' GROUP BY l.LocationName ORDER BY TotalSold DESC LIMIT 1;
SELECT COUNT(*)  FROM rootbeer r JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID WHERE rb.BrandName = 'A&W'  AND r.ContainerType = 'Can'  AND r.PurchaseDate >= '2016-01-01'  AND r.PurchaseDate <= '2016-12-31';
SELECT g.Latitude, g.Longitude FROM location l JOIN geolocation g ON l.LocationID = g.LocationID WHERE l.LocationName = 'Sac State Union';
SELECT rb.BrandID, rbb.BrandName FROM rootbeerreview rbr JOIN rootbeerbrand rbb ON rbr.BrandID = rbb.BrandID WHERE rbr.StarRating = 5 GROUP BY rb.BrandID, rbb.BrandName HAVING COUNT(rbr.CustomerID) >= 5;
SELECT rb.BrandName,         (SUM(CASE WHEN t.PurchaseDate >= '2014-01-01' AND t.PurchaseDate <= '2016-12-31' THEN 1 ELSE 0 END) * 1.0 / COUNT(t.BrandID)) * 100 AS PurchasePercentage FROM rootbeer rb JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID JOIN transaction t ON rb.RootBeerID = t.RootBeerID WHERE rbb.BreweryName = 'Dr Pepper Snapple Group' GROUP BY rb.BrandName;
WITH BrandProfit AS (     SELECT BrandID, BrandName, (CurrentRetailPrice - WholesaleCost) AS UnitProfit     FROM rootbeerbrand ), LowestProfitBrand AS (     SELECT BrandID, BrandName     FROM BrandProfit     WHERE UnitProfit = (SELECT MIN(UnitProfit) FROM BrandProfit) ), CustomerPurchases AS (     SELECT CustomerID, BrandID, COUNT(*) AS PurchaseCount     FROM transaction     JOIN rootbeer ON transaction.RootBeerID = rootbeer.RootBeerID     GROUP BY CustomerID, BrandID ), MaxPurchases AS (     SELECT CustomerID     FROM CustomerPurchases     WHERE BrandID IN (SELECT BrandID FROM LowestProfitBrand)     ORDER BY PurchaseCount DESC     LIMIT 1 ) SELECT BrandID, CustomerID FROM LowestProfitBrand, MaxPurchases;
SELECT CONCAT(First, ' ', Last) AS FullName, PhoneNumber FROM customers WHERE Gender = 'M' AND City = 'Fair Oaks' AND SubscribedToEmailList = 'TRUE';
SELECT      (SUM(CASE WHEN ContainerType = 'Can' THEN 1 ELSE 0 END) * 100.0 / COUNT(RootBeerID)) AS PercentageSoldInCans FROM      rootbeer WHERE      PurchaseDate >= '2014-01-01' AND PurchaseDate <= '2014-12-31';
SELECT BrandName  FROM rootbeerbrand  WHERE FirstBrewedYear >= 1996 AND FirstBrewedYear <= 2000  ORDER BY FirstBrewedYear DESC;
SELECT BrandID FROM rootbeerreview WHERE StarRating = 1 GROUP BY BrandID ORDER BY COUNT(CustomerID) DESC LIMIT 1;
SELECT      (SUM(CASE WHEN CreditCardType = 'Visa' THEN 1 ELSE 0 END) * 100.0) / COUNT(TransactionID) AS VisaPercentage FROM      transaction;
SELECT COUNT(*)  FROM rootbeerbrand  WHERE AvailableInCans = 'TRUE'    AND CornSyrup = 'TRUE'    AND ArtificialSweetener = 'TRUE';
SELECT      (SUM(CASE WHEN l.LocationName = 'Sac State American River Courtyard' THEN 1 ELSE 0 END) * 100.0) / COUNT(t.LocationID) AS SalesPercentage FROM      transaction t JOIN      location l ON t.LocationID = l.LocationID;
SELECT DIVIDE(COUNT(RootBeerID), COUNT(DISTINCT TransactionDate)) AS AverageCaffeinatedRootBeersSoldPerDay FROM transaction t JOIN rootbeer r ON t.RootBeerID = r.RootBeerID WHERE r.Caffeinated = 'TRUE';
SELECT ContainerType,         MAX(CurrentRetailPrice - WholesaleCost) AS MaxProfitPerUnit,        MIN(CurrentRetailPrice - WholesaleCost) AS MinProfitPerUnit FROM rootbeer JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID GROUP BY ContainerType HAVING MaxProfitPerUnit = (SELECT MAX(CurrentRetailPrice - WholesaleCost) FROM rootbeerbrand)    OR MinProfitPerUnit = (SELECT MIN(CurrentRetailPrice - WholesaleCost) FROM rootbeerbrand);
SELECT AVG(PurchasePrice) AS AverageCost FROM transaction WHERE PurchasePrice > 2 AND RootBeerID IN (     SELECT RootBeerID     FROM rootbeer     WHERE ContainerType = 'Bottle' );
SELECT COUNT(*)  FROM rootbeer r JOIN location l ON r.LocationID = l.LocationID JOIN geolocation g ON l.LocationID = g.LocationID WHERE r.ContainerType = 'Bottle'  AND g.Latitude = 38.559615  AND g.Longitude = -121.42243;
SELECT      (COUNT(CASE WHEN r.StarRating >= 3 THEN 1 END) * 100.0 / COUNT(c.CustomerID)) AS Percentage FROM      customers c LEFT JOIN      rootbeerreview r ON c.CustomerID = r.CustomerID WHERE      c.SubscribedToEmailList = 'FALSE';
SELECT rb.BrandName FROM rootbeerreview rbr JOIN rootbeer rb ON rbr.BrandID = rb.BrandID WHERE rbr.StarRating = 5 AND YEAR(rbr.ReviewDate) = 2012 GROUP BY rb.BrandID ORDER BY COUNT(rbr.StarRating) DESC LIMIT 1;
SELECT COUNT(DISTINCT t.CustomerID) AS FemaleCustomersWithArtificialSweetener FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID JOIN rootbeer r ON t.RootBeerID = r.RootBeerID JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID WHERE c.Gender = 'F' AND rb.ArtificialSweetener = 'TRUE';
SELECT      (SUM(CASE WHEN rb.CaneSugar = 'TRUE' THEN 1 ELSE 0 END) -       SUM(CASE WHEN rb.CornSyrup = 'TRUE' THEN 1 ELSE 0 END)) AS Difference FROM      rootbeer rb JOIN      rootbeerbrand rbb ON rb.BrandID = rbb.BrandID;
SELECT rb.BreweryName FROM transaction t JOIN rootbeer r ON t.RootBeerID = r.RootBeerID JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID WHERE t.TransactionDate >= '2015-01-01' AND t.TransactionDate <= '2015-12-31' GROUP BY rb.BreweryName ORDER BY COUNT(r.BrandID) DESC LIMIT 1;
SELECT      (COUNT(DISTINCT t.CustomerID) * 1.0 / COUNT(DISTINCT c.CustomerID)) * 100 AS Percentage FROM      customers c LEFT JOIN      transaction t ON c.CustomerID = t.CustomerID LEFT JOIN      rootbeer r ON t.RootBeerID = r.RootBeerID LEFT JOIN      rootbeerbrand rb ON r.BrandID = rb.BrandID WHERE      c.Gender = 'M'      AND c.City = 'Sacramento'      AND rb.BrandName = 'Dominion'      AND t.TransactionDate >= '2013-01-01'      AND t.TransactionDate < '2014-01-01';
SELECT      (SELECT AVG(SalesPerDay)       FROM (          SELECT COUNT(t.TransactionID) / COUNT(DISTINCT t.TransactionDate) AS SalesPerDay          FROM transaction t          JOIN rootbeer r ON t.RootBeerID = r.RootBeerID          JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID          WHERE rb.Honey = 'TRUE'          GROUP BY r.BrandID      ) AS HoneySales) -     (SELECT AVG(SalesPerDay)       FROM (          SELECT COUNT(t.TransactionID) / COUNT(DISTINCT t.TransactionDate) AS SalesPerDay          FROM transaction t          JOIN rootbeer r ON t.RootBeerID = r.RootBeerID          JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID          WHERE rb.Honey = 'FALSE'          GROUP BY r.BrandID      ) AS NoHoneySales) AS DifferenceInAverageSales;
SELECT CONCAT(c.First, ' ', c.Last) AS FullName, c.Email FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID JOIN location l ON t.LocationID = l.LocationID WHERE t.CreditCardType = 'American Express' AND l.LocationName = 'Sac State Union';
SELECT rb.BrandName, MAX(rr.StarRating) AS HighestStarRating FROM rootbeerreview rr JOIN rootbeerbrand rb ON rr.BrandID = rb.BrandID WHERE rr.ReviewDate LIKE '2014-09%' GROUP BY rb.BrandName ORDER BY HighestStarRating DESC LIMIT 1;
SELECT g.Latitude, g.Longitude FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID JOIN geolocation g ON t.LocationID = g.LocationID WHERE t.CreditCardType = 'American Express';
SELECT COUNT(DISTINCT c.CustomerID) AS FolsomVisaCustomers FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID WHERE c.City = 'Folsom' AND t.CreditCardType = 'Visa';
SELECT DISTINCT c.City FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID WHERE r.StarRating = 5 AND r.ReviewDate LIKE '2012-11%';
SELECT DISTINCT rb.BrandName FROM rootbeerreview rbr JOIN rootbeer rb ON rbr.BrandID = rb.BrandID JOIN customers c ON rbr.CustomerID = c.CustomerID WHERE c.First = 'Peg' AND c.Last = 'Winchester';
SELECT rb.BrandName FROM rootbeerreview rbr JOIN rootbeerbrand rb ON rbr.BrandID = rb.BrandID WHERE rbr.StarRating = 1 GROUP BY rb.BrandName ORDER BY COUNT(rbr.StarRating) DESC LIMIT 1;
SELECT CreditCardNumber FROM transaction t JOIN rootbeer r ON t.RootBeerID = r.RootBeerID WHERE r.Alcoholic = 'FALSE' GROUP BY CreditCardNumber ORDER BY COUNT(CreditCardNumber) DESC LIMIT 1;
SELECT First, Last  FROM customers  WHERE CustomerID IN (     SELECT CustomerID      FROM rootbeerreview      WHERE StarRating = 5 );
SELECT g.Latitude FROM rootbeer r JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID JOIN location l ON r.LocationID = l.LocationID JOIN geolocation g ON l.LocationID = g.LocationID WHERE rb.BrandName = 'Thomas Kemper' GROUP BY g.Latitude ORDER BY COUNT(*) DESC LIMIT 1;
SELECT StarRating FROM rootbeerreview JOIN rootbeer ON rootbeerreview.BrandID = rootbeer.BrandID JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID WHERE rootbeerbrand.CornSyrup = 'TRUE' GROUP BY StarRating ORDER BY COUNT(StarRating) DESC LIMIT 1;
SELECT g.Latitude, g.Longitude FROM geolocation g JOIN location l ON g.LocationID = l.LocationID WHERE l.ZipCode = '95819';
SELECT rb.BrandName FROM rootbeer r JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID JOIN location l ON r.LocationID = l.LocationID JOIN geolocation g ON l.LocationID = g.LocationID WHERE g.Latitude = 38.566129 AND g.Longitude = -121.426432;
SELECT      AVG(CurrentRetailPrice - WholesaleCost) AS AverageUnitProfit FROM      rootbeerbrand  JOIN      rootbeer ON rootbeer.BrandID = rootbeerbrand.BrandID  WHERE      rootbeer.ContainerType = 'Can';
SELECT      (COUNT(CASE WHEN rr.StarRating = 3 THEN rr.CustomerID END) * 100.0) / COUNT(DISTINCT t.CustomerID) AS Percentage FROM      transaction t JOIN      rootbeerreview rr ON t.CustomerID = rr.CustomerID WHERE      t.CreditCardType = 'Discover';
SELECT DISTINCT BrandID FROM rootbeerreview WHERE StarRating > 3;
SELECT COUNT(DISTINCT rb.BrandID) AS NumberOfBrands FROM rootbeer rb WHERE rb.ContainerType = 'Bottle' AND rb.PurchaseDate BETWEEN '2015-04-03' AND '2015-10-26';
SELECT CONCAT(c.First, ' ', c.Last) AS FullName FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID WHERE r.StarRating = 5 AND r.Review = 'The quintessential dessert root beer. No ice cream required.';
SELECT COUNT(Email) AS EmailCount, COUNT(PhoneNumber) AS PhoneNumberCount FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID WHERE c.City = 'Sacramento' AND r.StarRating > 3 AND r.ReviewDate LIKE '2014%';
SELECT COUNT(DISTINCT c.CustomerID) FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID WHERE c.Gender = 'F'   AND c.SubscribedToEmailList = 'TRUE'   AND c.City = 'Sacramento'   AND r.StarRating = 4   AND r.ReviewDate BETWEEN '2016-01-03' AND '2016-10-26';
SELECT rb.BrandName, rbb.BreweryName FROM rootbeer r JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID WHERE r.ContainerType = 'Can' AND r.PurchaseDate < '2015-06-06';
SELECT BrandName  FROM rootbeerbrand  WHERE BrandID IN (     SELECT BrandID      FROM rootbeer      WHERE ContainerType = 'Bottle' ) AND FirstBrewedYear < 1930;
SELECT COUNT(*)  FROM transaction t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.First = 'Anna' AND c.Last = 'Himes'  AND t.CreditCardType = 'MasterCard'  AND t.TransactionDate BETWEEN '2014-12-25' AND '2016-05-20';
SELECT AVG(StarRating) AS AverageStarRating FROM rootbeerreview WHERE BrandID = 10018 AND ReviewDate BETWEEN '2015-01-25' AND '2015-03-10' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Gender = 'F');
SELECT rb.BrandName  FROM rootbeerreview rbr  JOIN rootbeerbrand rb ON rbr.BrandID = rb.BrandID  WHERE rbr.CustomerID = 331115 AND rbr.StarRating = 1 AND rbr.Review = 'Yuk, more like licorice soda';
SELECT SUM(PurchasePrice) AS TotalPurchases FROM transaction t JOIN location l ON t.LocationID = l.LocationID WHERE t.CreditCardType = 'Visa'   AND l.LocationName = 'Sac State American River Courtyard'   AND t.TransactionDate BETWEEN '2014-06-03' AND '2015-11-27';
SELECT COUNT(*)  FROM transaction  WHERE LocationID IN (SELECT LocationID FROM location WHERE LocationName = 'Sac State Union')  AND CreditCardType = 'American Express'  AND TransactionDate LIKE '2014%';
SELECT g.Latitude, g.Longitude  FROM geolocation g  JOIN location l ON g.LocationID = l.LocationID  WHERE l.LocationName = 'Sac State Union';
SELECT Review  FROM rootbeerreview  WHERE BrandID = (SELECT BrandID FROM rootbeerbrand WHERE BrandName = 'Bulldog')  AND ReviewDate = '2013-07-26';
SELECT rb.BrandName,         (rb.CurrentRetailPrice - rb.WholesaleCost) AS UnitProfit FROM rootbeerreview rbr JOIN rootbeerbrand rb ON rbr.BrandID = rb.BrandID WHERE rbr.StarRating = 5    AND rbr.ReviewDate LIKE '2013%';
SELECT      CONCAT(c.First, ' ', c.Last) AS FullName,     DATEDIFF(rr.ReviewDate, c.FirstPurchaseDate) AS DaysSinceFirstPurchase FROM      customers c JOIN      rootbeerreview rr ON c.CustomerID = rr.CustomerID WHERE      c.CustomerID = (SELECT CustomerID FROM customers ORDER BY FirstPurchaseDate LIMIT 1) ORDER BY      rr.ReviewDate LIMIT 1;
SELECT DISTINCT t.CreditCardType  FROM customers c  JOIN transaction t ON c.CustomerID = t.CustomerID  WHERE c.First = 'Kenneth' AND c.Last = 'Walton';
SELECT rb.ContainerType, rbb.BrandName, rbr.StarRating FROM rootbeer rb JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID JOIN rootbeerreview rbr ON rbb.BrandID = rbr.BrandID WHERE rb.RootBeerID = 10054;
SELECT rb.* FROM rootbeer rb JOIN transaction t ON rb.RootBeerID = t.RootBeerID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.First IN ('Tim', 'Dawn') AND c.Last IN ('Ocel', 'Childress');
SELECT RootBeerID  FROM rootbeer  WHERE BrandID IN (     SELECT BrandID      FROM rootbeerbrand      WHERE BrandName IN ('Bulldog', 'Bundaberg', 'Dad''s', 'Dog n Suds', 'Virgil''s') );
SELECT COUNT(*)  FROM transaction t JOIN rootbeer r ON t.RootBeerID = r.RootBeerID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.First = 'Jim' AND c.Last = 'Breech' AND r.ContainerType = 'Bottle';
SELECT COUNT(*)  FROM transaction t JOIN rootbeer r ON t.RootBeerID = r.RootBeerID JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID JOIN location l ON r.LocationID = l.LocationID WHERE rb.State = 'CA';
SELECT AVG(rr.StarRating) AS AverageReview FROM rootbeerreview rr JOIN customers c ON rr.CustomerID = c.CustomerID WHERE c.SubscribedToEmailList = 'TRUE';
SELECT      (SELECT COUNT(*) FROM rootbeer r       JOIN location l ON r.LocationID = l.LocationID       WHERE r.ContainerType = 'Bottle' AND l.State = 'LA') -     (SELECT COUNT(*) FROM rootbeer r       JOIN location l ON r.LocationID = l.LocationID       WHERE r.ContainerType = 'Bottle' AND l.State = 'MO') AS AmountDifference;
SELECT      DIVIDE(         (SELECT COUNT(TransactionID) FROM transaction t           JOIN location l ON t.LocationID = l.LocationID           WHERE l.LocationName = 'Sac State American River Courtyard'),         (SELECT COUNT(TransactionID) FROM transaction t           JOIN location l ON t.LocationID = l.LocationID           WHERE l.LocationName = 'Sac State Union')     ) AS TransactionRatio;
SELECT c.First, c.Last, t.CreditCardType, SUM(t.PurchasePrice) AS TotalSpent FROM transaction t JOIN customers c ON t.CustomerID = c.CustomerID GROUP BY c.CustomerID, c.First, c.Last, t.CreditCardType ORDER BY TotalSpent DESC LIMIT 10;
SELECT rb.BrandName, SUM(t.PurchasePrice) AS TotalAmountSold FROM rootbeerbrand rb JOIN rootbeer r ON rb.BrandID = r.BrandID JOIN transaction t ON r.RootBeerID = t.RootBeerID WHERE rb.Caffeinated = 'FALSE' AND rb.CaneSugar = 'FALSE' GROUP BY rb.BrandName;
SELECT rb.BrandName FROM rootbeer rb JOIN transaction t ON rb.RootBeerID = t.RootBeerID GROUP BY rb.BrandID ORDER BY COUNT(t.RootBeerID) ASC LIMIT 1;
SELECT rb.BrandID, AVG(rr.StarRating) AS AverageStarRating FROM rootbeer r JOIN rootbeerreview rr ON r.BrandID = rr.BrandID JOIN (     SELECT BrandID, COUNT(*) AS SalesCount     FROM rootbeer     GROUP BY BrandID     ORDER BY SalesCount DESC     LIMIT 1 ) AS best_seller ON r.BrandID = best_seller.BrandID GROUP BY rb.BrandID;
SELECT      (SUM(CASE WHEN rb.BrandName = 'River City' THEN t.PurchasePrice ELSE 0 END) -       SUM(CASE WHEN rb.BrandName = 'Frostie' THEN t.PurchasePrice ELSE 0 END)) * 100.0 /       NULLIF(SUM(CASE WHEN rb.BrandName = 'Frostie' THEN t.PurchasePrice ELSE 0 END), 0) AS PercentageDifference FROM      transaction t JOIN      rootbeer rb ON t.RootBeerID = rb.RootBeerID JOIN      rootbeerbrand rbb ON rb.BrandID = rbb.BrandID;
SELECT DISTINCT City FROM location WHERE State = 'CA';
SELECT      (COUNT(CASE WHEN Gender = 'F' AND SubscribedToEmailList = 'TRUE' THEN 1 END) * 100.0) /      COUNT(CASE WHEN SubscribedToEmailList = 'TRUE' THEN 1 END) AS FemaleSubscriptionPercentage FROM      customers;
SELECT DISTINCT t.CreditCardType FROM transaction t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.First = 'Dick' AND c.Last = 'Ruthven';
SELECT COUNT(*)  FROM transaction  WHERE LocationID IN (SELECT LocationID FROM location WHERE LocationName = 'Sac State Union');
SELECT StarRating  FROM rootbeerreview  WHERE CustomerID = (SELECT CustomerID FROM customers WHERE First = 'Urijah' AND Last = 'Faber')  AND BrandID = (SELECT BrandID FROM rootbeerbrand WHERE BrandName = 'Frostie');
SELECT rb.BrandName FROM rootbeerreview rbr JOIN rootbeerbrand rb ON rbr.BrandID = rb.BrandID WHERE rbr.Review = 'Too Spicy!' ORDER BY rbr.StarRating ASC LIMIT 1;
SELECT COUNT(*)  FROM transaction  WHERE LocationID = (SELECT LocationID FROM location WHERE LocationName = 'Sac State American River Courtyard')  AND CreditCardType = 'MasterCard';
SELECT rb.BrandName FROM rootbeerreview rbr JOIN rootbeerbrand rb ON rbr.BrandID = rb.BrandID WHERE rbr.ReviewDate LIKE '2012%' AND rb.CaneSugar = 'TRUE' AND rb.Honey = 'TRUE' GROUP BY rb.BrandName ORDER BY MIN(rbr.StarRating) LIMIT 1;
SELECT g.Latitude, g.Longitude FROM transaction t JOIN customers c ON t.CustomerID = c.CustomerID JOIN location l ON t.LocationID = l.LocationID JOIN geolocation g ON l.LocationID = g.LocationID WHERE c.First = 'Tommy' AND c.Last = 'Kono' AND t.TransactionDate LIKE '2014%';
SELECT c.Email  FROM customers c  JOIN transaction t ON c.CustomerID = t.CustomerID  WHERE t.TransactionID = 100016;
SELECT COUNT(*)  FROM transaction  WHERE CreditCardType = 'American Express'  AND RootBeerID IN (SELECT RootBeerID FROM rootbeer WHERE ContainerType = 'Bottle');
SELECT l.LocationName, COUNT(r.RootBeerID) AS BottleSales FROM rootbeer r JOIN location l ON r.LocationID = l.LocationID WHERE r.ContainerType = 'Bottle' GROUP BY l.LocationName ORDER BY BottleSales DESC LIMIT 1;
SELECT rb.BrandName FROM rootbeerbrand rb JOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID WHERE rbr.StarRating = 5 GROUP BY rb.BrandName ORDER BY COUNT(rbr.StarRating) DESC LIMIT 3;
SELECT g.Latitude, g.Longitude FROM geolocation g JOIN location l ON g.LocationID = l.LocationID WHERE l.LocationName = 'Sac State American River Courtyard';
SELECT COUNT(SalesID) FROM Sales WHERE CustomerID = 80;
SELECT SUM(Quantity) AS TotalQuantity FROM Sales WHERE SalesID BETWEEN 1 AND 10;
SELECT AVG(Quantity) AS AverageQuantity FROM Sales WHERE SalesID BETWEEN 20 AND 30;
SELECT ProductID  FROM Sales  WHERE Quantity = (SELECT MAX(Quantity) FROM Sales);
SELECT COUNT(ProductID)  FROM Products  WHERE Price = (SELECT MIN(Price) FROM Products);
SELECT Name FROM Products WHERE Price = 0;
SELECT Name FROM Products WHERE ProductID BETWEEN 1 AND 10;
SELECT p.Name  FROM Products p  JOIN Sales s ON p.ProductID = s.ProductID  ORDER BY s.Quantity ASC  LIMIT 1;
SELECT COUNT(DISTINCT CustomerID)  FROM Sales  JOIN Products ON Sales.ProductID = Products.ProductID  WHERE Products.Name = 'Hex Nut 9';
SELECT COUNT(SalesID) AS TotalSalesIDs FROM Sales JOIN Products ON Sales.ProductID = Products.ProductID WHERE Products.Name = 'Flat Washer 8';
SELECT p.Name  FROM Products p  JOIN Sales s ON p.ProductID = s.ProductID  WHERE s.SalesPersonID = 10;
SELECT c.FirstName  FROM Customers c  JOIN Sales s ON c.CustomerID = s.CustomerID  WHERE s.ProductID = 1;
SELECT c.LastName  FROM Customers c  JOIN Sales s ON c.CustomerID = s.CustomerID  WHERE s.SalesID = 178;
SELECT DISTINCT s.ProductID FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID WHERE c.FirstName = 'Abby';
SELECT DISTINCT s.ProductID FROM Sales s JOIN Employees e ON s.SalesPersonID = e.EmployeeID WHERE e.FirstName = 'Meander';
SELECT e.LastName  FROM Sales s  JOIN Employees e ON s.SalesPersonID = e.EmployeeID  WHERE s.SalesID = 100;
SELECT e.FirstName  FROM Employees e JOIN Sales s ON e.EmployeeID = s.SalesPersonID JOIN Customers c ON s.CustomerID = c.CustomerID WHERE c.FirstName = 'Abigail';
SELECT SUM(Quantity) AS FreeGiftsReceived FROM Sales JOIN Products ON Sales.ProductID = Products.ProductID WHERE Sales.CustomerID = 11782 AND Products.Price = 0;
SELECT CONCAT(c.FirstName, ' ', c.MiddleInitial, ' ', c.LastName) AS FullName FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID WHERE s.SalesPersonID = 5;
SELECT SalesID  FROM Sales  WHERE SalesPersonID IN (     SELECT EmployeeID      FROM Employees      WHERE FirstName LIKE 's%' );
SELECT MAX(p.Price) AS HighestPrice FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.CustomerID BETWEEN 1 AND 100;
SELECT c.FirstName, c.LastName, MAX(s.Quantity) AS HighestQuantity FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID WHERE c.LastName = 'Valdez' GROUP BY c.FirstName, c.LastName ORDER BY HighestQuantity DESC LIMIT 1;
SELECT SUM(SalesID)  FROM Sales  WHERE SalesPersonID IN (     SELECT EmployeeID      FROM Employees      WHERE FirstName IN ('Morningstar', 'Heather', 'Dean') );
SELECT CASE             WHEN COUNT(*) > 0 THEN 'Yes'             ELSE 'No'         END AS HasPurchased FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID WHERE s.ProductID = 498 AND c.FirstName = 'Alex';
SELECT SUM(P.Price * S.Quantity) AS TotalPrice FROM Sales S JOIN Products P ON S.ProductID = P.ProductID JOIN Customers C ON S.CustomerID = C.CustomerID WHERE C.FirstName = 'Adam';
SELECT SUM(Price * Quantity) AS TotalPrice FROM Sales JOIN Products ON Sales.ProductID = Products.ProductID WHERE Products.ProductID BETWEEN 400 AND 500;
SELECT SUM(S.Quantity) AS TotalQuantity FROM Sales S JOIN Products P ON S.ProductID = P.ProductID WHERE P.Name LIKE 'C%';
SELECT SUM(S.Quantity) AS TotalQuantity FROM Sales S JOIN Customers C ON S.CustomerID = C.CustomerID WHERE C.FirstName = 'Adrian';
SELECT ProductID  FROM Products  ORDER BY Price DESC  LIMIT 5;
SELECT COUNT(*) AS FreebieCount FROM Products WHERE Price = 0;
SELECT p.Name  FROM Products p  JOIN Sales s ON p.ProductID = s.ProductID  WHERE s.Quantity > 950;
SELECT CONCAT(e.FirstName, ' ', e.MiddleInitial, ' ', e.LastName) AS FullName FROM Employees e JOIN Sales s ON e.EmployeeID = s.SalesPersonID WHERE s.Quantity = 1000;
SELECT p.Name, s.Quantity FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.SalesID BETWEEN 1 AND 10;
SELECT SUM(P.Price * S.Quantity) AS TotalSalesAmount FROM Sales S JOIN Products P ON S.ProductID = P.ProductID WHERE P.Name = 'Reflector';
SELECT      CASE          WHEN SUM(CASE WHEN p.Name = 'HL Mountain Frame - Silver, 42' THEN s.Quantity ELSE 0 END) >               SUM(CASE WHEN p.Name = 'HL Mountain Frame - Black, 42' THEN s.Quantity ELSE 0 END)          THEN 'Silver'          ELSE 'Black'      END AS BestSellingColour FROM      Sales s JOIN      Products p ON s.ProductID = p.ProductID WHERE      p.Name IN ('HL Mountain Frame - Silver, 42', 'HL Mountain Frame - Black, 42');
SELECT      (SELECT Price FROM Products WHERE Name = 'HL Mountain Frame - Black, 42') -      (SELECT Price FROM Products WHERE Name = 'LL Mountain Frame - Black, 42') AS PriceDifference;
SELECT SUM(s.Quantity) AS TotalSales FROM Sales s JOIN Employees e ON s.SalesPersonID = e.EmployeeID WHERE e.FirstName = 'Michel' AND e.MiddleInitial = 'E' AND e.LastName = 'DeFrance';
SELECT AVG(CustomerCount) AS AverageCustomersPerSalesPerson FROM (     SELECT SalesPersonID, COUNT(DISTINCT CustomerID) AS CustomerCount     FROM Sales     GROUP BY SalesPersonID ) AS SalesCounts;
SELECT COUNT(DISTINCT s.CustomerID)  FROM Sales s JOIN Employees e ON s.SalesPersonID = e.EmployeeID JOIN Products p ON s.ProductID = p.ProductID WHERE e.FirstName = 'Innes' AND e.MiddleInitial = 'E.' AND e.LastName = 'del Castillo' AND p.Name = 'Short-Sleeve Classic Jersey, L';
SELECT CONCAT(e.FirstName, ' ', e.MiddleInitial, ' ', e.LastName) AS SalesPersonName FROM Sales s JOIN Employees e ON s.SalesPersonID = e.EmployeeID JOIN Customers c ON s.CustomerID = c.CustomerID JOIN Products p ON s.ProductID = p.ProductID WHERE c.FirstName = 'Elizabeth' AND c.MiddleInitial = 'A' AND c.LastName = 'White' AND p.Name = 'Road-250 Black, 48';
SELECT COUNT(DISTINCT SalesPersonID) AS SalesPeopleCount FROM Sales JOIN Products ON Sales.ProductID = Products.ProductID WHERE Products.Name = 'Headlights - Weatherproof';
SELECT SUM(S.Quantity * P.Price) AS Revenue FROM Sales S JOIN Products P ON S.ProductID = P.ProductID WHERE P.Name = 'HL Road Frame - Red, 56';
SELECT COUNT(SalesID)  FROM Sales  WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE FirstName = 'Joe' AND MiddleInitial = 'L' AND LastName = 'Lopez');
SELECT CONCAT(c.FirstName, ' ', c.MiddleInitial, ' ', c.LastName) AS CustomerName FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Touring Rim';
SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(DISTINCT s.CustomerID) AS NumberOfCustomers FROM Employees e LEFT JOIN Sales s ON e.EmployeeID = s.SalesPersonID GROUP BY e.EmployeeID, e.FirstName, e.LastName;
SELECT COUNT(DISTINCT SalesPersonID) AS SalesPeopleCount FROM Sales WHERE CustomerID IS NOT NULL;
SELECT FirstName, MiddleInitial, LastName  FROM Employees  WHERE EmployeeID = 7;
SELECT      (SELECT Name FROM Products WHERE Price = (SELECT MAX(Price) FROM Products WHERE Price > 0)) AS MostExpensiveProduct,     (SELECT Name FROM Products WHERE Price = (SELECT MIN(Price) FROM Products WHERE Price > 0)) AS LeastExpensiveProduct;
SELECT      (SUM(CASE WHEN e.FirstName = 'Albert' AND e.MiddleInitial = 'I' AND e.LastName = 'Ringer' THEN s.Quantity ELSE 0 END) * 1.0 / COUNT(s.CustomerID)) * 100 AS Percentage FROM      Sales s JOIN      Products p ON s.ProductID = p.ProductID JOIN      Customers c ON s.CustomerID = c.CustomerID JOIN      Employees e ON s.SalesPersonID = e.EmployeeID WHERE      p.Name = 'ML Bottom Bracket';
SELECT COUNT(*) FROM Customers WHERE FirstName = 'Abigail';
SELECT SUM(Quantity) AS TotalBladeSold FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Blade';
SELECT CONCAT(e.FirstName, ' ', e.LastName) AS FullName FROM Employees e JOIN Sales s ON e.EmployeeID = s.SalesPersonID GROUP BY e.EmployeeID ORDER BY SUM(s.Quantity) DESC LIMIT 1;
SELECT CONCAT(c.FirstName, ' ', c.LastName) AS FullName FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID GROUP BY c.CustomerID, c.FirstName, c.LastName ORDER BY SUM(s.Quantity) DESC LIMIT 1;
SELECT p.Name FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.SalesPersonID = 20 GROUP BY p.Name ORDER BY SUM(s.Quantity) DESC LIMIT 1;
SELECT DISTINCT e.FirstName FROM Employees e JOIN Sales s ON e.EmployeeID = s.SalesPersonID WHERE s.Quantity > 500;
SELECT Customers.FirstName FROM Customers JOIN Sales ON Customers.CustomerID = Sales.CustomerID WHERE Sales.SalesPersonID = 1;
SELECT SUM(S.Quantity) AS TotalTradingQuantity FROM Sales S JOIN Employees E ON S.SalesPersonID = E.EmployeeID JOIN Customers C ON S.CustomerID = C.CustomerID WHERE E.FirstName = 'Abraham' AND C.FirstName = 'Aaron' AND C.LastName = 'Alexander';
SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM Customers JOIN Sales ON Customers.CustomerID = Sales.CustomerID WHERE Sales.Quantity > 600;
SELECT c.FirstName, c.LastName, SUM(s.Quantity) AS TotalQuantity FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID WHERE c.FirstName = 'Cameron' GROUP BY c.CustomerID, c.FirstName, c.LastName ORDER BY TotalQuantity DESC LIMIT 1;
SELECT SalesID  FROM Sales  JOIN Products ON Sales.ProductID = Products.ProductID  WHERE Products.Name = 'Hex Nut' AND Products.Price > 100;
SELECT DISTINCT CustomerID  FROM Sales  JOIN Products ON Sales.ProductID = Products.ProductID  WHERE Products.Price BETWEEN 1000 AND 2000;
SELECT SUM(Quantity) AS TotalQuantity FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Price = 0;
SELECT      (SUM(CASE WHEN p.Price = 0 THEN s.Quantity ELSE 0 END) * 1.0 / SUM(s.Quantity)) * 100 AS GiftProductPercentage FROM      Sales s JOIN      Products p ON s.ProductID = p.ProductID;
SELECT      (SUM(CASE WHEN p.Name = 'Blade' THEN s.Quantity ELSE 0 END) * 1.0 / SUM(s.Quantity)) * 100 AS BladePercentage FROM      Sales s JOIN      Products p ON s.ProductID = p.ProductID;
SELECT COUNT(*) FROM Employees WHERE LastName = 'Ringer';
SELECT COUNT(*)  FROM Products  WHERE ProductID < 15 AND Price <= 10;
SELECT p.Name  FROM Sales s JOIN Employees e ON s.SalesPersonID = e.EmployeeID JOIN Products p ON s.ProductID = p.ProductID WHERE e.FirstName = 'Aaron' AND e.LastName = 'Alexander';
SELECT ProductID, Name  FROM Products  WHERE ProductID IN (     SELECT ProductID      FROM Sales      WHERE Quantity BETWEEN 400 AND 500 )  ORDER BY Price DESC  LIMIT 1;
SELECT c.FirstName, c.LastName, MAX(s.Quantity) AS HighestQuantity FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID WHERE c.FirstName = 'Kate' GROUP BY c.CustomerID, c.FirstName, c.LastName ORDER BY HighestQuantity DESC LIMIT 1;
SELECT CustomerID, SalesID  FROM Sales  WHERE ProductID IN (SELECT ProductID FROM Products WHERE Price BETWEEN 100 AND 150)  AND Quantity < 25;
SELECT S.Quantity, P.Price FROM Sales S JOIN Customers C ON S.CustomerID = C.CustomerID JOIN Products P ON S.ProductID = P.ProductID WHERE C.FirstName = 'Abigail' AND C.LastName = 'Henderson';
SELECT COUNT(*)  FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.Quantity = 60 AND p.Price <= 500;
SELECT COUNT(DISTINCT c.CustomerID)  FROM Customers c  JOIN Sales s ON c.CustomerID = s.CustomerID  WHERE c.FirstName = 'Erica' AND s.Quantity < 200;
SELECT p.Name FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID JOIN Products p ON s.ProductID = p.ProductID WHERE c.FirstName = 'Kathryn' AND c.LastName = 'Ashe' ORDER BY s.Quantity DESC LIMIT 1;
SELECT p.Price, s.Quantity  FROM Products p  JOIN Sales s ON p.ProductID = s.ProductID  WHERE p.Name = 'Seat Tube';
SELECT p.Name, p.Price FROM Products p JOIN Sales s ON p.ProductID = s.ProductID JOIN Customers c ON s.CustomerID = c.CustomerID WHERE c.FirstName = 'Erica' AND c.LastName = 'Xu';
SELECT SalesID  FROM Sales  WHERE Quantity = 590  AND ProductID = (SELECT ProductID FROM Products WHERE Name = 'External Lock Washer 7');
SELECT c.FirstName, c.LastName FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID WHERE s.SalesID BETWEEN 30 AND 40 GROUP BY c.CustomerID, c.FirstName, c.LastName HAVING SUM(s.Quantity) = 403;
SELECT DISTINCT c.CustomerID, c.LastName FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID WHERE s.Quantity > (SELECT AVG(Quantity) * 0.9 FROM Sales);
SELECT      (SUM(CASE WHEN p.Price BETWEEN 200 AND 300 THEN 1 ELSE 0 END) * 100.0) / COUNT(p.Price) AS Percentage FROM      Sales s JOIN      Products p ON s.ProductID = p.ProductID WHERE      s.SalesID BETWEEN 1 AND 200;
SELECT Name FROM Products WHERE Price = (SELECT MAX(Price) FROM Products);
SELECT COUNT(*) FROM Customers WHERE FirstName = 'Madison';
SELECT COUNT(*)  FROM Products  WHERE Name LIKE '%HL Touring Frame%';
SELECT COUNT(*) AS CustomerCount FROM Customers WHERE LastName IN (     SELECT LastName     FROM Customers     GROUP BY LastName     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT COUNT(*) AS FreeGiftCount FROM Products WHERE Price = 0;
SELECT CONCAT(e.FirstName, ' ', e.MiddleInitial, ' ', e.LastName) AS SalesPersonName FROM Sales s JOIN Employees e ON s.SalesPersonID = e.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.MiddleInitial, e.LastName ORDER BY COUNT(s.SalesID) DESC LIMIT 1;
SELECT CONCAT(c.FirstName, ' ', c.MiddleInitial, ' ', c.LastName) AS FullName FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID JOIN Products p ON s.ProductID = p.ProductID ORDER BY s.Quantity * p.Price DESC LIMIT 1;
SELECT SUM(Quantity) AS TotalSold FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Mountain-500 Black 42';
SELECT SUM(s.Quantity * p.Price) AS TotalSales FROM Sales s JOIN Employees e ON s.SalesPersonID = e.EmployeeID JOIN Products p ON s.ProductID = p.ProductID WHERE e.FirstName = 'Heather' AND e.LastName = 'McBadden';
SELECT SUM(S.Quantity) AS TotalSold FROM Sales S JOIN Employees E ON S.SalesPersonID = E.EmployeeID JOIN Products P ON S.ProductID = P.ProductID WHERE E.FirstName = 'Stearns' AND E.LastName = 'MacFeather' AND P.Name = 'Mountain-100 Silver, 38';
SELECT COUNT(DISTINCT p.ProductID) AS ProductTypes FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID JOIN Products p ON s.ProductID = p.ProductID WHERE c.FirstName = 'Dalton' AND c.MiddleInitial = 'M' AND c.LastName = 'Coleman';
SELECT CONCAT(e.FirstName, ' ', e.MiddleInitial, ' ', e.LastName) AS FullName, COUNT(s.SalesID) AS SalesCount FROM Employees e JOIN Sales s ON e.EmployeeID = s.SalesPersonID GROUP BY e.EmployeeID ORDER BY SalesCount DESC LIMIT 3;
SELECT ProductID FROM Sales WHERE ProductID IN (SELECT ProductID FROM Products WHERE Name LIKE 'Mountain-500 Black%') GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1;
SELECT COUNT(DISTINCT Sales.SalesPersonID) AS NumberOfEmployees FROM Sales JOIN Products ON Sales.ProductID = Products.ProductID WHERE Products.Name = 'ML Road Frame-W - Yellow, 40';
SELECT SUM(Quantity)  FROM Sales  WHERE SalesID = 551971 AND ProductID = (SELECT ProductID FROM Products WHERE Name = 'Chainring Bolts');
SELECT COUNT(DISTINCT s.SalesPersonID) AS EmployeeCount FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Touring-2000 Blue, 50' AND s.Quantity > 20000;
SELECT SUM(S.Quantity * P.Price) AS TotalCost FROM Sales S JOIN Products P ON S.ProductID = P.ProductID JOIN Employees E ON S.SalesPersonID = E.EmployeeID WHERE P.Name = 'Road-650, Red, 60' AND E.FirstName = 'Abraham' AND E.MiddleInitial = 'E.' AND E.LastName = 'Bennet';
SELECT P.Name, SUM(S.Quantity * P.Price) AS TotalPrice FROM Sales S JOIN Products P ON S.ProductID = P.ProductID GROUP BY P.ProductID ORDER BY SUM(S.Quantity) DESC LIMIT 1;
SELECT FirstName FROM Customers WHERE LastName = 'Chen';
SELECT MiddleInitial FROM Employees GROUP BY MiddleInitial ORDER BY COUNT(MiddleInitial) DESC LIMIT 1;
SELECT AVG(Price) AS AveragePrice FROM Products WHERE Price BETWEEN 100 AND 200;
SELECT CONCAT(c.FirstName, ' ', c.MiddleInitial, ' ', c.LastName) AS FullName FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID WHERE s.Quantity > (SELECT AVG(Quantity) FROM Sales);
SELECT CONCAT(c.FirstName, ' ', c.MiddleInitial, ' ', c.LastName) AS FullName FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID JOIN Products p ON s.ProductID = p.ProductID GROUP BY c.CustomerID ORDER BY SUM(s.Quantity * p.Price) DESC LIMIT 1;
SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(s.Quantity * p.Price) AS TotalSales FROM Employees e JOIN Sales s ON e.EmployeeID = s.SalesPersonID JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Blade' GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;
SELECT CONCAT(c.FirstName, ' ', c.MiddleInitial, ' ', c.LastName) AS FullName, SUM(s.Quantity * p.Price) AS TotalSpent FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID JOIN Products p ON s.ProductID = p.ProductID GROUP BY c.CustomerID HAVING TotalSpent > 50000 ORDER BY TotalSpent DESC;
SELECT p.Name FROM Sales s JOIN Products p ON s.ProductID = p.ProductID GROUP BY p.Name ORDER BY SUM(s.Quantity) DESC LIMIT 1;
SELECT DISTINCT p.ProductID, p.Name FROM Products p JOIN Sales s ON p.ProductID = s.ProductID GROUP BY p.ProductID, p.Name HAVING AVG(s.Quantity) < (SELECT AVG(Quantity) FROM Sales);
SELECT COUNT(*)  FROM Dish  WHERE first_appeared < 1851 OR first_appeared > 2012;
SELECT      CASE          WHEN (last_appeared - first_appeared) FILTER (WHERE name = 'Anchovies') > (last_appeared - first_appeared) FILTER (WHERE name = 'Fresh lobsters in every style') THEN 'Anchovies'         WHEN (last_appeared - first_appeared) FILTER (WHERE name = 'Fresh lobsters in every style') > (last_appeared - first_appeared) FILTER (WHERE name = 'Anchovies') THEN 'Fresh lobsters in every style'         ELSE 'Both lasted the same duration'     END AS longer_dish FROM Dish WHERE name IN ('Anchovies', 'Fresh lobsters in every style');
SELECT name  FROM Dish  WHERE lowest_price = 0  ORDER BY menus_appeared DESC  LIMIT 1;
SELECT COUNT(*)  FROM Menu  WHERE name = 'Waldorf Astoria' AND page_count = 4;
SELECT d.name  FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id WHERE mi.menu_page_id = 1389 AND mi.xpos < 0.25 AND mi.ypos < 0.25;
SELECT mi.price  FROM Dish d  JOIN MenuItem mi ON d.id = mi.dish_id  JOIN MenuPage mp ON mi.menu_page_id = mp.id  WHERE d.name = 'Clear green turtle';
SELECT COUNT(DISTINCT mp.id) AS stable_price_menu_pages FROM MenuPage mp JOIN MenuItem mi ON mp.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Clear green turtle' AND mi.high_price IS NULL;
SELECT MAX(mi.high_price) AS highest_price FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id WHERE d.name = 'Clear green turtle';
SELECT DISTINCT m.id FROM Menu m JOIN MenuItem mi ON m.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Clear green turtle';
SELECT COUNT(DISTINCT m.id)  FROM Menu m  JOIN MenuItem mi ON m.id = mi.menu_page_id  JOIN Dish d ON mi.dish_id = d.id  WHERE d.name = 'Clear green turtle' AND m.currency = 'Dollars';
SELECT COUNT(DISTINCT m.id)  FROM Menu m  JOIN MenuItem mi ON m.id = mi.menu_page_id  JOIN Dish d ON mi.dish_id = d.id  WHERE d.name = 'Clear green turtle'  AND m.call_number IS NULL;
SELECT d.name  FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE m.name = 'Zentral Theater Terrace';
SELECT d.name  FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN Menu m ON mi.menu_page_id = (SELECT mp.id FROM MenuPage mp WHERE mp.menu_id = m.id) WHERE m.name = 'Zentral Theater Terrace' ORDER BY mi.high_price DESC LIMIT 1;
SELECT COUNT(DISTINCT di.id) AS dish_count FROM Menu m JOIN MenuItem mi ON m.id = mi.menu_page_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Dish di ON mi.dish_id = di.id WHERE m.name = 'Zentral Theater Terrace';
SELECT SUM(m.dish_count)  FROM Menu m  WHERE m.name = 'Waldorf Astoria';
SELECT DISTINCT m.id  FROM Menu m  JOIN MenuItem mi ON m.id = mi.menu_page_id  JOIN Dish d ON mi.dish_id = d.id  WHERE m.sponsor IS NULL AND d.name = 'Clear green turtle';
SELECT AVG(mp.page_number) AS average_page_number FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id JOIN MenuItem mi ON mp.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Clear green turtle';
SELECT AVG(mi.price) AS average_price FROM Menu m JOIN MenuItem mi ON m.id = mi.menu_page_id WHERE m.name = 'Zentral Theater Terrace';
SELECT COUNT(*)  FROM MenuItem  WHERE created_at LIKE '2011-03-28%';
SELECT COUNT(*)  FROM MenuItem  WHERE menu_page_id = 144;
SELECT COUNT(*)  FROM Menu  WHERE location = 'Dutcher House';
SELECT COUNT(*)  FROM Dish  WHERE times_appeared > menus_appeared;
SELECT COUNT(*) FROM Menu WHERE venue = 'STEAMSHIP';
SELECT COUNT(*)  FROM Menu  WHERE date = '1898-11-17';
SELECT Dish.name  FROM Dish  JOIN MenuItem ON Dish.id = MenuItem.dish_id  WHERE MenuItem.menu_page_id = 174;
SELECT d.name, mp.id  FROM Dish d  JOIN MenuItem mi ON d.id = mi.dish_id  JOIN MenuPage mp ON mi.menu_page_id = mp.id  WHERE d.first_appeared = 1861;
SELECT d.name, MAX(mi.high_price) AS highest_price FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id WHERE mi.menu_page_id = 7610 AND mi.created_at LIKE '2011-05-23%' GROUP BY d.name;
SELECT d.* FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE mp.page_number = 30 ORDER BY mp.full_height ASC LIMIT 1;
SELECT mp.page_number, m.name FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id WHERE m.page_count = (SELECT MAX(page_count) FROM Menu);
SELECT COUNT(DISTINCT mi.dish_id) AS dish_count FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id JOIN MenuItem mi ON mp.id = mi.menu_page_id WHERE m.id = (SELECT id FROM Menu ORDER BY dish_count DESC LIMIT 1) AND mp.page_number = 2;
SELECT mi.id  FROM MenuItem mi  JOIN Dish d ON mi.dish_id = d.id  WHERE d.name = 'Fresh lobsters in every style';
SELECT d.* FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE m.sponsor = 'CHAS.BRADLEY''S OYSTER & DINING ROOM' AND mi.xpos < 0.25 AND mi.ypos < 0.25;
SELECT m.sponsor, m.event FROM Menu m JOIN MenuItem mi ON m.id = mi.menu_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Cerealine with Milk';
SELECT      (SUM(CASE WHEN xpos BETWEEN 0.25 AND 0.75 AND ypos BETWEEN 0.25 AND 0.75 THEN 1 ELSE 0 END) * 100.0 / COUNT(id)) AS percent FROM      Dish d JOIN      MenuItem mi ON d.id = mi.dish_id JOIN      MenuPage mp ON mi.menu_page_id = mp.id WHERE      d.name LIKE '%Bluefish%';
SELECT sponsor FROM Menu WHERE id = 12463;
SELECT event FROM Menu WHERE sponsor = 'REPUBLICAN HOUSE';
SELECT place FROM Menu WHERE id = 12472;
SELECT physical_description FROM Menu WHERE sponsor = 'Noviomagus';
SELECT occasion FROM Menu WHERE id = 12463;
SELECT location FROM Menu WHERE sponsor = 'Norddeutscher Lloyd Bremen';
SELECT mp.id  FROM MenuPage mp JOIN Menu m ON mp.menu_id = m.id WHERE m.sponsor = 'Occidental & Oriental';
SELECT DISTINCT mp.image_id FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id WHERE m.location = 'Manhattan Hotel';
SELECT mp.full_height, mp.full_width  FROM Menu m  JOIN MenuPage mp ON m.id = mp.menu_id  WHERE m.name = 'El Fuerte Del Palmar';
SELECT m.uuid  FROM Menu m  WHERE m.name = 'The Biltmore' AND m.uuid = 'c02c9a3b-6881-7080-e040-e00a180631aa';
SELECT m.name  FROM Menu m  JOIN MenuPage mp ON m.id = mp.menu_id  WHERE mp.full_height = (SELECT MAX(full_height) FROM MenuPage);
SELECT m.page_count  FROM Menu m  JOIN MenuPage mp ON m.id = mp.menu_id  WHERE mp.id = 130;
SELECT MIN(mi.price) AS price FROM MenuItem mi JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE mp.image_id = 4000009194;
SELECT DISTINCT mp.page_number FROM MenuPage mp JOIN MenuItem mi ON mp.id = mi.menu_page_id WHERE mi.xpos > 0.75 AND mi.ypos < 0.25;
SELECT DISTINCT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE SUBSTR(m.created_at, 6, 2) = '04';
SELECT Dish.name  FROM Dish  JOIN MenuItem ON Dish.id = MenuItem.dish_id  JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id  WHERE MenuPage.id = 1389;
SELECT MAX(price) AS highest_price  FROM MenuItem  WHERE id BETWEEN 1 AND 5;
SELECT d.name  FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id WHERE mi.xpos < 0.25 AND mi.ypos < 0.25;
SELECT SUM(dish_count) AS total_dish_count FROM Menu WHERE uuid IN ('510d47e4-2958-a3d9-e040-e00a18064a99', '510d47e4-295a-a3d9-e040-e00a18064a99');
SELECT SUM(mi.price) AS total_price FROM MenuItem mi JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE mp.menu_id = 12882;
SELECT d.id, d.name, d.highest_price FROM Dish d ORDER BY d.highest_price DESC LIMIT 5;
SELECT COUNT(*) AS free_dish_count FROM Dish WHERE lowest_price = 0;
SELECT * FROM Dish  WHERE first_appeared = 1855 AND last_appeared = 1900;
SELECT * FROM Menu ORDER BY dish_count DESC LIMIT 10;
SELECT COUNT(DISTINCT dish_id)  FROM MenuItem  WHERE xpos > 0.75 AND ypos < 0.25;
SELECT      DATEDIFF(Dish.last_appeared, Dish.first_appeared) AS duration_on_menu,     Dish.updated_at AS latest_update FROM      Dish WHERE      Dish.name = 'Clear Green Turtle';
SELECT COUNT(*) AS dish_count FROM Dish WHERE (last_appeared - first_appeared) > 100;
SELECT COUNT(*)  FROM Dish  WHERE (last_appeared - first_appeared) < 5;
SELECT d.name, mi.price  FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id WHERE d.lowest_price = 0;
SELECT mi.price  FROM MenuItem mi  JOIN MenuPage mp ON mi.menu_page_id = mp.id  WHERE mp.menu_id = 12474 AND mp.page_number = 2;
SELECT COUNT(*)  FROM Dish  WHERE created_at BETWEEN '2011-03-31 20:24:46 UTC' AND '2011-04-15 23:09:51 UTC';
SELECT DISTINCT m.sponsor FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id WHERE mp.full_height > 10000;
SELECT mp.image_id, mp.full_height, mp.full_width FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id WHERE m.event = '100TH ANNIVERSARY OF BIRTH OF DANIEL WEBSTER';
SELECT DISTINCT m.event FROM MenuPage mp JOIN Menu m ON mp.menu_id = m.id WHERE mp.full_width < 2000;
SELECT D.name  FROM Dish D  JOIN MenuItem MI ON D.id = MI.dish_id  WHERE MI.price = 180000;
SELECT mi.xpos, mi.ypos, DATEDIFF(d.last_appeared, d.first_appeared) AS duration FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id WHERE d.name = 'Small Hominy';
SELECT mp.page_number, mp.image_id, (mp.full_height * mp.full_width) AS image_area FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE d.name = 'Baked Stuffed Mullet & Sauce Pomard';
SELECT COUNT(*)  FROM Dish  WHERE times_appeared > menus_appeared;
SELECT COUNT(*)  FROM Menu  WHERE sponsor = 'Krogs Fiske Restaurant' AND date LIKE '2015-04%';
SELECT name, MAX(DATEDIFF(last_appeared, first_appeared)) AS history_length FROM Dish GROUP BY id ORDER BY history_length DESC LIMIT 1;
SELECT event FROM Menu WHERE id = 21380 AND date = '1887-07-21';
SELECT COUNT(*)  FROM MenuPage  WHERE menu_id = (SELECT id FROM Menu WHERE name = 'Emil Kuehn');
SELECT COUNT(DISTINCT m.id) AS menu_count FROM Menu m JOIN MenuItem mi ON m.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'puree of split peas aux croutons';
SELECT D.name  FROM Dish D  JOIN MenuItem MI ON D.id = MI.dish_id  WHERE MI.high_price IS NULL  AND SUBSTR(MI.created_at, 1, 4) = '2011'  AND SUBSTR(MI.created_at, 7, 1) = '4';
SELECT m.name FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id GROUP BY m.id ORDER BY COUNT(mp.page_number) DESC LIMIT 1;
SELECT DISTINCT mp.id FROM MenuPage mp JOIN MenuItem mi ON mp.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'mashed potatoes';
SELECT COUNT(*)  FROM Menu  WHERE sponsor = 'PACIFIC MAIL STEAMSHIP COMPANY'  AND id IN (     SELECT menu_id      FROM MenuPage      GROUP BY menu_id      HAVING COUNT(page_number) <= 2 );
SELECT mp.id FROM MenuItem mi JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Dish d ON mi.dish_id = d.id JOIN Menu m ON mp.menu_id = m.id WHERE d.name = 'milk' ORDER BY mi.price DESC LIMIT 1;
SELECT menu_id  FROM Menu  WHERE sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY'  GROUP BY id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT mi.xpos, mi.ypos FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE d.name = 'breaded veal cutlet with peas';
SELECT d.name  FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id WHERE mi.menu_page_id = 48706 AND mi.xpos > 0.75 AND mi.ypos > 0.75;
SELECT d.name  FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE m.sponsor = 'THE SOCIETY OF THE CUMBERLAND'    AND m.event = '19NTH REUNION'    AND m.place = 'GRAND PACIFIC HOTEL, CHICAGO, ILL';
SELECT m.sponsor FROM Menu m JOIN MenuItem mi ON m.id = mi.menu_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'baked apples with cream' ORDER BY mi.price DESC LIMIT 1;
SELECT      (SELECT COUNT(dish_id) / COUNT(DISTINCT menu_id)       FROM MenuItem       WHERE menu_page_id IN (SELECT id FROM MenuPage WHERE menu_id IN (SELECT id FROM Menu WHERE name = 'Souper de Luxe'))) AS average_dishes_per_menu,     (SELECT name       FROM Dish       WHERE id = (SELECT dish_id                   FROM MenuItem                   GROUP BY dish_id                   ORDER BY COUNT(dish_id) DESC                   LIMIT 1)) AS most_appeared_dish;
SELECT id FROM Menu WHERE sponsor IS NULL;
SELECT COUNT(*) FROM Menu WHERE event = 'LUNCH';
SELECT COUNT(*)  FROM Menu  WHERE page_count > 10 AND dish_count > 20;
SELECT id  FROM Menu  ORDER BY dish_count DESC  LIMIT 1;
SELECT COUNT(DISTINCT di.id) AS dish_count FROM Menu m JOIN MenuItem mi ON m.id = mi.menu_page_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Dish di ON mi.dish_id = di.id WHERE m.name = 'Zentral Theater Terrace';
SELECT COUNT(*)  FROM Menu  WHERE call_number IS NULL AND strftime('%Y', date) < '1950';
SELECT mp.image_id  FROM Menu m  JOIN MenuPage mp ON m.id = mp.menu_id  WHERE m.name = 'Zentral Theater Terrace' AND mp.page_number = 1;
SELECT m.name  FROM Menu m  JOIN MenuPage mp ON m.id = mp.menu_id  WHERE mp.image_id = 5189412;
SELECT      CASE          WHEN SUM(CASE WHEN menu.name = 'Zentral Theater Terrace' THEN menuPage.full_width ELSE 0 END) >               SUM(CASE WHEN menu.name = 'Young''s Hotel' THEN menuPage.full_width ELSE 0 END)          THEN 'Zentral Theater Terrace'          ELSE 'Young''s Hotel'      END AS bigger_menu_page FROM      Menu menu JOIN      MenuPage menuPage ON menu.id = menuPage.menu_id WHERE      menuPage.page_number = 1;
SELECT mp.* FROM MenuPage mp JOIN Menu m ON mp.menu_id = m.id WHERE m.name = 'Ritz Carlton' ORDER BY mp.full_height DESC LIMIT 1;
SELECT COUNT(*)  FROM MenuPage mp  JOIN Menu m ON mp.menu_id = m.id  WHERE m.name = 'Ritz Carlton' AND mp.full_width > 1000;
SELECT COUNT(*)  FROM MenuItem  WHERE menu_page_id IN (SELECT id FROM MenuPage WHERE menu_id = 12882 AND page_number = 1);
SELECT d.name  FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE mp.menu_id = 12882 AND mp.page_number = 1;
SELECT DISTINCT mp.page_number FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE d.name = 'Chicken gumbo';
SELECT mp.menu_id FROM MenuPage mp JOIN MenuItem mi ON mp.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Chicken gumbo' ORDER BY mp.full_width DESC LIMIT 1;
SELECT COUNT(*)  FROM MenuItem mi JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Chicken gumbo';
SELECT COUNT(DISTINCT mp.id) AS stable_price_count FROM MenuPage mp JOIN MenuItem mi ON mp.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Paysanne Soup' AND mi.high_price IS NULL;
SELECT MAX(mi.high_price)  FROM Dish d  JOIN MenuItem mi ON d.id = mi.dish_id  JOIN MenuPage mp ON mi.menu_page_id = mp.id  WHERE d.name = 'Chicken gumbo';
SELECT full_height * full_width AS space_covered FROM MenuPage mp JOIN Menu m ON mp.menu_id = m.id WHERE mp.page_number = 1 AND m.name = 'Zentral Theater Terrace';
SELECT AVG(dish_count) AS average_dishes_per_page FROM (     SELECT COUNT(mi.dish_id) AS dish_count     FROM MenuPage mp     LEFT JOIN MenuItem mi ON mp.id = mi.menu_page_id     WHERE mp.menu_id = 12882     GROUP BY mp.id ) AS dish_counts;
SELECT COUNT(*)  FROM shipment  WHERE cust_id = (SELECT cust_id FROM customer WHERE cust_name = 'S K L Enterprises Inc')  AND YEAR(ship_date) = 2017;
SELECT SUM(weight) AS total_weight FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id WHERE customer.cust_name = 'S K L Enterprises Inc';
SELECT COUNT(*)  FROM shipment s JOIN customer c ON s.cust_id = c.cust_id JOIN driver d ON s.driver_id = d.driver_id WHERE d.first_name = 'Sue' AND d.last_name = 'Newell'  AND c.cust_name = 'S K L Enterprises Inc';
SELECT COUNT(*) AS shipment_count FROM shipment s JOIN customer c ON s.cust_id = c.cust_id WHERE c.state = 'FL';
SELECT s.ship_id  FROM shipment s  JOIN customer c ON s.cust_id = c.cust_id  WHERE c.cust_type = 'retailer';
SELECT COUNT(DISTINCT c.cust_id)  FROM customer c  JOIN shipment s ON c.cust_id = s.cust_id  WHERE CAST(s.ship_date AS DATE) = 2017  AND c.annual_revenue > 30000000;
SELECT COUNT(*)  FROM shipment  JOIN customer ON shipment.cust_id = customer.cust_id  JOIN driver ON shipment.driver_id = driver.driver_id  WHERE driver.first_name = 'Sue' AND driver.last_name = 'Newell'  AND CAST(ship_date AS DATE) = '2017-01-01';
SELECT CONCAT(d.first_name, ' ', d.last_name) AS full_name FROM driver d JOIN shipment s ON d.driver_id = s.driver_id WHERE YEAR(CAST(s.ship_date AS DATE)) = 2017 GROUP BY d.driver_id ORDER BY COUNT(s.ship_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE CAST(s.ship_date AS DATE) = '2017' AND c.state = 'New Jersey';
SELECT MAX(s.weight) AS max_weight FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE c.city_name = 'New York';
SELECT      (SELECT SUM(weight) FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE c.city_name = 'New York') -      (SELECT SUM(weight) FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE c.city_name = 'Chicago') AS weight_difference;
SELECT DISTINCT c.city_name FROM shipment s JOIN customer cu ON s.cust_id = cu.cust_id JOIN city c ON s.city_id = c.city_id WHERE cu.cust_name = 'S K L Enterprises Inc';
SELECT AVG(weight) AS average_weight FROM shipment WHERE cust_id = (SELECT cust_id FROM customer WHERE cust_name = 'S K L Enterprises Inc');
SELECT      (COUNT(CASE WHEN c.city = 'Jacksonville' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_jacksonville FROM      shipment s JOIN      customer c ON s.cust_id = c.cust_id JOIN      city ci ON s.city_id = ci.city_id WHERE      ci.state = 'Florida';
SELECT      CASE          WHEN t.make = 'Peterbit' THEN 'Texas (TX)'          WHEN t.make = 'Mack' THEN 'North Carolina (NC)'          WHEN t.make = 'Kenworth' THEN 'Washington (WA)'      END AS headquarter FROM      shipment s JOIN      truck t ON s.truck_id = t.truck_id WHERE      s.ship_id = 1045;
SELECT COUNT(*) AS shipment_count FROM shipment WHERE truck_id = (SELECT truck_id FROM truck WHERE model_year = (SELECT MIN(model_year) FROM truck));
SELECT c.cust_name  FROM customer c  JOIN shipment s ON c.cust_id = s.cust_id  WHERE s.ship_id = 1275;
SELECT c.city_name  FROM shipment s  JOIN city c ON s.city_id = c.city_id  WHERE s.ship_id = 1701;
SELECT CONCAT(d.first_name, ' ', d.last_name) AS driver_name FROM shipment s JOIN driver d ON s.driver_id = d.driver_id WHERE s.ship_id = 1021;
SELECT CONCAT(d.first_name, ' ', d.last_name) AS driver_name FROM shipment s JOIN driver d ON s.driver_id = d.driver_id WHERE s.ship_date = '2017-11-05';
SELECT c.population  FROM shipment s  JOIN city c ON s.city_id = c.city_id  WHERE s.ship_id = 1398;
SELECT MIN(ship_date) AS first_shipment_date FROM shipment s JOIN customer c ON s.cust_id = c.cust_id WHERE c.state = 'SC';
SELECT s.weight  FROM shipment s JOIN driver d ON s.driver_id = d.driver_id WHERE d.first_name = 'Leszek' AND d.last_name = 'Kieltyka' AND s.ship_date = '2017-09-25';
SELECT c.area  FROM shipment s  JOIN city c ON s.city_id = c.city_id  WHERE s.ship_id = 1346;
SELECT weight  FROM shipment  JOIN customer ON shipment.cust_id = customer.cust_id  WHERE customer.cust_name = 'U-haul Center Of N Syracuse'  AND shipment.ship_date = '2016-09-21';
SELECT CONCAT(d.first_name, ' ', d.last_name) AS full_name FROM shipment s JOIN driver d ON s.driver_id = d.driver_id WHERE s.truck_id = 3 AND s.ship_date = '2016-09-19';
SELECT area / population AS population_density FROM city WHERE city_id = (SELECT city_id FROM shipment WHERE ship_id = 1369);
SELECT AVG(shipment_count) AS average_shipments FROM (     SELECT COUNT(s.ship_id) AS shipment_count     FROM shipment s     JOIN truck t ON s.truck_id = t.truck_id     WHERE t.make = 'Kenworth'     GROUP BY s.truck_id ) AS shipment_counts;
SELECT weight  FROM shipment  WHERE driver_id = (SELECT driver_id FROM driver WHERE first_name = 'Sue' AND last_name = 'Newell')  AND ship_date = (SELECT MIN(ship_date) FROM shipment WHERE driver_id = (SELECT driver_id FROM driver WHERE first_name = 'Sue' AND last_name = 'Newell'));
SELECT c.cust_name  FROM shipment s  JOIN customer c ON s.cust_id = c.cust_id  WHERE s.weight = (SELECT MAX(weight) FROM shipment);
SELECT CONCAT(d.first_name, ' ', d.last_name) AS full_name FROM shipment s JOIN driver d ON s.driver_id = d.driver_id WHERE s.ship_date = (SELECT MIN(ship_date) FROM shipment);
SELECT COUNT(*) AS total_shipments FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id WHERE customer.cust_name = 'Olympic Camper Sales Inc';
SELECT COUNT(*)  FROM shipment s JOIN customer c ON s.cust_id = c.cust_id JOIN city ci ON s.city_id = ci.city_id WHERE ci.city_name = 'New York'  AND c.cust_name = 'Harry''s Hot Rod Auto & Truck Accessories';
SELECT COUNT(*)  FROM (     SELECT weight      FROM shipment      ORDER BY weight DESC      LIMIT 5 ) AS top_shipments JOIN truck ON shipment.truck_id = truck.truck_id WHERE truck.make = 'Mack';
SELECT CONCAT(d.first_name, ' ', d.last_name) AS full_name FROM driver d JOIN shipment s ON d.driver_id = s.driver_id JOIN city c ON s.city_id = c.city_id WHERE c.population = (SELECT MIN(population) FROM city) GROUP BY d.driver_id ORDER BY COUNT(s.ship_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM shipment  WHERE weight < 1000  AND truck_id = (SELECT truck_id FROM truck ORDER BY model_year ASC LIMIT 1);
SELECT annual_revenue  FROM customer  WHERE cust_id = (     SELECT cust_id      FROM shipment      GROUP BY cust_id      ORDER BY COUNT(ship_id) DESC      LIMIT 1 );
SELECT COUNT(*)  FROM shipment s JOIN city c ON s.city_id = c.city_id JOIN customer cu ON s.cust_id = cu.cust_id WHERE c.city_name = 'Downey'    AND cu.state = 'CA'    AND YEAR(s.ship_date) = 2016;
SELECT COUNT(*)  FROM shipment s JOIN driver d ON s.driver_id = d.driver_id JOIN city c ON s.city_id = c.city_id WHERE d.first_name = 'Holger' AND d.last_name = 'Nohr' AND c.city_name = 'North Las Vegas';
SELECT COUNT(*) AS shipment_count FROM shipment WHERE city_id = (     SELECT city_id     FROM city     ORDER BY population / area DESC     LIMIT 1 );
SELECT      (COUNT(CASE WHEN state = 'TX' THEN cust_id END) * 100.0 / COUNT(cust_id)) AS percentage FROM      customer WHERE      cust_name LIKE 'Lorenzo%';
SELECT SUM(s.weight) AS total_weight FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE c.city_name = 'San Mateo' AND c.state = 'California' AND YEAR(s.ship_date) = 2016;
SELECT SUM(s.weight) AS total_weight FROM shipment s JOIN truck t ON s.truck_id = t.truck_id WHERE t.make = 'Peterbilt'    AND t.model_year = (SELECT MAX(model_year) FROM truck WHERE make = 'Peterbilt')   AND CAST(s.ship_date AS DATE) BETWEEN '2016-01-01' AND '2016-12-31';
SELECT c.cust_name, MAX(s.weight) AS max_weight FROM shipment s JOIN customer c ON s.cust_id = c.cust_id JOIN city ci ON s.city_id = ci.city_id WHERE ci.city_name = 'Boston' GROUP BY c.cust_name ORDER BY max_weight DESC LIMIT 1;
SELECT c.city_name  FROM shipment s  JOIN city c ON s.city_id = c.city_id  WHERE s.ship_id = 1002;
SELECT AVG(s.weight) AS average_shipment_weight FROM shipment s JOIN truck t ON s.truck_id = t.truck_id WHERE t.make = 'Mack' AND t.model_year = (SELECT MIN(model_year) FROM truck WHERE make = 'Mack');
SELECT CONCAT(d.first_name, ' ', d.last_name) AS full_name FROM driver d JOIN shipment s ON d.driver_id = s.driver_id JOIN city c ON s.city_id = c.city_id WHERE c.city_name = 'New York' AND s.ship_date LIKE '2016-02%';
SELECT c.cust_name  FROM customer c  JOIN shipment s ON c.cust_id = s.cust_id  JOIN city ci ON s.city_id = ci.city_id  WHERE ci.city_name = 'Oak Park';
SELECT COUNT(s.ship_id) AS number_of_shipments FROM shipment s JOIN customer c ON s.cust_id = c.cust_id JOIN driver d ON s.driver_id = d.driver_id JOIN city ct ON s.city_id = ct.city_id WHERE d.first_name = 'Andrea' AND d.last_name = 'Simons'   AND ct.city_name = 'Huntsville'   AND YEAR(s.ship_date) = 2016;
SELECT      d.driver_id,      d.first_name,      d.last_name,      COUNT(s.ship_id) / (24 * COUNT(DISTINCT s.driver_id)) AS average_shipments_per_month FROM      driver d LEFT JOIN      shipment s ON d.driver_id = s.driver_id GROUP BY      d.driver_id, d.first_name, d.last_name;
SELECT      (SUM(CASE WHEN weight >= 10000 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM      shipment JOIN      customer ON shipment.cust_id = customer.cust_id WHERE      customer.cust_name = 'Sunguard Window Tinting & Truck Accessories'      AND YEAR(ship_date) = 2017;
SELECT      (COUNT(CASE WHEN c.cust_name = 'Autoware Inc' THEN s.ship_id END) * 100.0 / COUNT(s.ship_id)) AS percentage FROM      shipment s JOIN      customer c ON s.cust_id = c.cust_id JOIN      driver d ON s.driver_id = d.driver_id WHERE      d.first_name = 'Sue' AND d.last_name = 'Newel';
SELECT COUNT(DISTINCT c.city_id) FROM city c JOIN shipment s ON c.city_id = s.city_id WHERE c.state = 'New Jersey' GROUP BY c.city_id HAVING SUM(s.weight) > 20000;
SELECT COUNT(DISTINCT c.city_id)  FROM city c  JOIN shipment s ON c.city_id = s.city_id  WHERE c.population > 50000 AND YEAR(s.ship_date) = 2017;
SELECT s.weight  FROM shipment s  JOIN truck t ON s.truck_id = t.truck_id  WHERE t.make = 'Peterbilt';
SELECT t.model_year  FROM shipment s  JOIN truck t ON s.truck_id = t.truck_id  WHERE s.ship_id = 1003;
SELECT t.make  FROM shipment s  JOIN truck t ON s.truck_id = t.truck_id  WHERE s.ship_id = 1011;
SELECT d.first_name  FROM driver d  JOIN shipment s ON d.driver_id = s.driver_id  WHERE s.ship_id = 1028;
SELECT d.state  FROM shipment s  JOIN driver d ON s.driver_id = d.driver_id  WHERE s.ship_id = 1055;
SELECT d.address  FROM driver d  JOIN shipment s ON d.driver_id = s.driver_id  WHERE s.weight > 50000;
SELECT CONCAT(d.first_name, ' ', d.last_name) AS full_name FROM driver d JOIN shipment s ON d.driver_id = s.driver_id WHERE s.ship_date = '2016-02-03';
SELECT AVG(c.annual_revenue) AS average_annual_revenue FROM customer c JOIN shipment s ON c.cust_id = s.cust_id WHERE s.weight < 65000;
SELECT      (COUNT(CASE WHEN s.weight < 70000 THEN c.cust_id END) * 100.0 / COUNT(c.cust_id)) AS percentage_wholesaler FROM      customer c JOIN      shipment s ON c.cust_id = s.cust_id WHERE      c.cust_type = 'wholesaler';
SELECT d.last_name  FROM driver d  JOIN shipment s ON d.driver_id = s.driver_id  WHERE s.ship_id = 1088;
SELECT d.phone FROM driver d JOIN shipment s ON d.driver_id = s.driver_id GROUP BY d.driver_id HAVING SUM(s.weight) > 20000;
SELECT t.make, t.model_year  FROM shipment s  JOIN truck t ON s.truck_id = t.truck_id  WHERE s.ship_id = 1055;
SELECT COUNT(*) FROM truck WHERE model_year = 2009;
SELECT COUNT(*) AS manufacturer_count  FROM customer  WHERE cust_type = 'manufacturer';
SELECT COUNT(*)  FROM customer  WHERE state = 'CA' AND cust_type = 'retailer';
SELECT COUNT(*) FROM city WHERE state = 'Connecticut';
SELECT city_name  FROM city  WHERE state = 'CA'  ORDER BY population DESC  LIMIT 1;
SELECT annual_revenue  FROM customer  WHERE cust_name = 'Klett & Sons Repair';
SELECT CONCAT(d.first_name, ' ', d.last_name) AS full_name FROM shipment s JOIN driver d ON s.driver_id = d.driver_id WHERE s.weight = (SELECT MIN(weight) FROM shipment);
SELECT COUNT(*)  FROM shipment s JOIN customer c ON s.cust_id = c.cust_id WHERE c.state = 'CA' AND CAST(s.ship_date AS DATE) BETWEEN '2016-01-01' AND '2016-12-31';
SELECT t.make  FROM truck t JOIN shipment s ON t.truck_id = s.truck_id JOIN driver d ON s.driver_id = d.driver_id WHERE d.first_name = 'Zachery' AND d.last_name = 'Hicks';
SELECT DISTINCT c.cust_name FROM customer c JOIN shipment s ON c.cust_id = s.cust_id WHERE s.ship_date LIKE '2017-02-%';
SELECT t.make, CONCAT(d.first_name, ' ', d.last_name) AS driver_name FROM shipment s JOIN customer c ON s.cust_id = c.cust_id JOIN truck t ON s.truck_id = t.truck_id JOIN driver d ON s.driver_id = d.driver_id WHERE c.cust_name = 'Klett & Sons Repair';
SELECT ship_id  FROM shipment  WHERE driver_id = (SELECT driver_id FROM driver WHERE first_name = 'Zachery' AND last_name = 'Hicks')  ORDER BY weight DESC  LIMIT 1;
SELECT COUNT(*)  FROM shipment s JOIN driver d ON s.driver_id = d.driver_id JOIN city c ON s.city_id = c.city_id WHERE d.first_name = 'Zachery'    AND d.last_name = 'Hicks'    AND c.city_name = 'New York'    AND CAST(s.ship_date AS DATE) BETWEEN '2016-01-01' AND '2016-12-31';
SELECT t.make, COUNT(s.ship_id) AS shipment_count FROM shipment s JOIN truck t ON s.truck_id = t.truck_id WHERE EXTRACT(YEAR FROM CAST(s.ship_date AS DATE)) = 2016 GROUP BY t.make ORDER BY shipment_count DESC LIMIT 1;
SELECT COUNT(*)  FROM shipment  WHERE city_id = (SELECT city_id                   FROM city                   WHERE state = 'California'                   ORDER BY population ASC                   LIMIT 1);
SELECT c.city_name FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE s.weight = (SELECT MAX(weight) FROM shipment);
SELECT DISTINCT c.city_name FROM city c JOIN shipment s ON c.city_id = s.city_id JOIN driver d ON s.driver_id = d.driver_id WHERE d.first_name = 'Zachery' AND d.last_name = 'Hicks';
SELECT AVG(shipment_count) AS average_shipments FROM (     SELECT COUNT(ship_id) AS shipment_count     FROM shipment s     JOIN customer c ON s.cust_id = c.cust_id     JOIN driver d ON s.driver_id = d.driver_id     WHERE d.first_name = 'Zachery'        AND d.last_name = 'Hicks'        AND EXTRACT(YEAR FROM s.ship_date) = 2017     GROUP BY EXTRACT(MONTH FROM s.ship_date) ) AS monthly_shipments;
SELECT      (SUM(CASE WHEN d.first_name = 'Zachery' AND d.last_name = 'Hicks' THEN s.weight ELSE 0 END) / SUM(s.weight) * 100) AS percentage FROM      shipment s JOIN      customer c ON s.cust_id = c.cust_id JOIN      driver d ON s.driver_id = d.driver_id JOIN      city ci ON s.city_id = ci.city_id WHERE      ci.state = 'California' AND      CAST(s.ship_date AS DATE) BETWEEN '2016-01-01' AND '2016-12-31';
SELECT COUNT(*) AS shipment_count FROM shipment WHERE driver_id = (SELECT driver_id FROM driver WHERE first_name = 'Zachary' AND last_name = 'Hicks');
SELECT ship_id  FROM shipment  WHERE city_id = (SELECT city_id FROM city ORDER BY area DESC LIMIT 1);
SELECT d.first_name, d.last_name FROM driver d JOIN shipment s ON d.driver_id = s.driver_id JOIN city c ON s.city_id = c.city_id WHERE c.population = (SELECT MIN(population) FROM city);
SELECT COUNT(*)  FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE c.city_name = 'Cicero' AND c.state = 'Illinois'  AND s.weight BETWEEN 9000 AND 15000;
SELECT t.model_year  FROM shipment s  JOIN truck t ON s.truck_id = t.truck_id  WHERE s.ship_id = 1233;
SELECT d.address  FROM driver d  JOIN shipment s ON d.driver_id = s.driver_id  JOIN customer c ON s.cust_id = c.cust_id  WHERE c.address = '7052 Carroll Road' AND c.city = 'San Diego' AND c.state = 'California';
SELECT COUNT(*)  FROM shipment  JOIN driver ON shipment.driver_id = driver.driver_id  WHERE driver.first_name = 'Maria' AND driver.last_name = 'Craft'  AND CAST(shipment.ship_date AS DATE) = '2017-01-01';
SELECT t.model_year  FROM shipment s  JOIN truck t ON s.truck_id = t.truck_id  WHERE s.ship_id = 1245;
SELECT d.address  FROM driver d  JOIN shipment s ON d.driver_id = s.driver_id  WHERE s.ship_id = 1127;
SELECT c.annual_revenue  FROM customer c  JOIN shipment s ON c.cust_id = s.cust_id  WHERE s.ship_id = 1047;
SELECT s.weight  FROM shipment s  JOIN driver d ON s.driver_id = d.driver_id  WHERE d.first_name = 'Andrea' AND d.last_name = 'Simons' AND s.ship_date = '2016-03-07';
SELECT c.city_name  FROM shipment s  JOIN city c ON s.city_id = c.city_id  WHERE s.ship_date = '2017-01-16';
SELECT COUNT(*)  FROM shipment s  JOIN customer c ON s.cust_id = c.cust_id  WHERE c.state = 'NY';
SELECT cust_name FROM customer WHERE cust_id = (SELECT cust_id FROM shipment WHERE ship_id = 1147);
SELECT ship_id  FROM shipment  WHERE city_id = (SELECT city_id                   FROM city                   WHERE population = (SELECT MAX(population) FROM city));
SELECT CONCAT(d.first_name, ' ', d.last_name) AS driver_name FROM shipment s JOIN driver d ON s.driver_id = d.driver_id WHERE s.ship_date = '2016-02-22';
SELECT s.weight  FROM shipment s  JOIN customer c ON s.cust_id = c.cust_id  WHERE c.annual_revenue = 39448581;
SELECT c.address  FROM customer c  JOIN shipment s ON c.cust_id = s.cust_id  WHERE s.ship_id = 1117;
SELECT      (COUNT(CASE WHEN CAST(ship_date AS DATE) = '2017-01-01' THEN ship_id END) * 100.0 / COUNT(ship_id)) AS percentage FROM      shipment s JOIN      customer c ON s.cust_id = c.cust_id WHERE      c.state = 'TX';
SELECT      (SELECT COUNT(ship_id) FROM shipment s JOIN truck t ON s.truck_id = t.truck_id WHERE t.model_year = 2005) -     (SELECT COUNT(ship_id) FROM shipment s JOIN truck t ON s.truck_id = t.truck_id WHERE t.model_year = 2006) AS shipment_difference;
SELECT d.first_name, d.last_name FROM shipment s JOIN driver d ON s.driver_id = d.driver_id WHERE s.weight > (SELECT AVG(weight) * 0.95 FROM shipment);
SELECT title, COUNT(DISTINCT wid) AS different_words FROM pages JOIN pages_words ON pages.pid = pages_words.pid WHERE lid = (SELECT lid FROM langs WHERE lang = 'Catalan') GROUP BY title ORDER BY LENGTH(title) DESC LIMIT 1;
SELECT p.title  FROM pages p  JOIN langs l ON p.lid = l.lid  JOIN pages_words pw ON p.pid = pw.pid  GROUP BY p.pid  HAVING l.lang = 'Catalan' AND COUNT(DISTINCT pw.wid) < 10;
SELECT p.page  FROM pages p  JOIN langs l ON p.lid = l.lid  WHERE l.lang = 'Catalan' AND p.title LIKE '% Art %';
SELECT title  FROM pages  WHERE lid = (SELECT lid FROM langs WHERE lang = 'Catalan')  AND revision = 16203226;
SELECT title  FROM pages  WHERE lid = (SELECT lid FROM langs WHERE lang = 'Catalan')  AND revision BETWEEN 106600 AND 106700;
SELECT COUNT(*)  FROM pages p  JOIN langs l ON p.lid = l.lid  WHERE l.lang = 'Catalan'  AND p.words BETWEEN 1000 AND 2000;
SELECT p.pid  FROM pages p  JOIN langs l ON p.lid = l.lid  JOIN pages_words pw ON p.pid = pw.pid  JOIN words w ON pw.wid = w.wid  WHERE l.lang = 'Catalan' AND w.word = 'decimal';
SELECT w.word, pw.occurrences FROM words w JOIN pages_words pw ON w.wid = pw.wid JOIN pages p ON pw.pid = p.pid JOIN langs l ON p.lid = l.lid WHERE l.lang = 'Catalan' ORDER BY pw.occurrences DESC LIMIT 1;
SELECT w1st FROM biwords WHERE w2nd = 'antic';
SELECT p.title, pw.occurrences FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE w.word = 'quipu';
SELECT AVG(occurrences) AS average_occurrences FROM biwords WHERE w1st = 'system';
SELECT SUM(pages) AS total_pages  FROM langs  WHERE lang = 'ca';
SELECT w1.word AS w1st, w2.word AS w2nd, b.occurrences FROM biwords b JOIN langs l ON b.lid = l.lid JOIN words w1 ON b.w1st = w1.wid JOIN words w2 ON b.w2nd = w2.wid WHERE l.lang = 'Catalan' ORDER BY b.occurrences DESC LIMIT 1;
SELECT w.wid  FROM langs l  JOIN langs_words lw ON l.lid = lw.lid  JOIN words w ON lw.wid = w.wid  WHERE l.lang = 'catalan' AND lw.occurrences <= 10;
SELECT title  FROM pages  WHERE lid = (SELECT lid FROM langs WHERE lang = 'Catalan')  ORDER BY words DESC  LIMIT 1;
SELECT pid FROM pages WHERE title = 'Arqueozoologia';
SELECT w.wid, MAX(pw.occurrences) AS max_occurrences FROM pages p JOIN langs l ON p.lid = l.lid JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE l.lang = 'Catalan' AND p.title = 'Abadia' GROUP BY w.wid ORDER BY max_occurrences DESC LIMIT 1;
SELECT p.title, pw.wid FROM pages p JOIN langs l ON p.lid = l.lid JOIN pages_words pw ON p.pid = pw.pid WHERE l.lang = 'Catalan' GROUP BY p.pid, p.title ORDER BY COUNT(DISTINCT pw.wid) ASC LIMIT 5;
SELECT b.occurrences FROM biwords b JOIN langs l ON b.lid = l.lid JOIN words w1 ON b.w1st = w1.wid JOIN words w2 ON b.w2nd = w2.wid WHERE l.lang = 'Catalan' AND w1.word = 'i' AND w2.word = 'a';
SELECT w1.word AS w1st, w2.word AS w2nd FROM biwords b JOIN words w1 ON b.w1st = w1.wid JOIN words w2 ON b.w2nd = w2.wid WHERE b.occurrences = 2;
SELECT b.w1st, b.w2nd, b.occurrences FROM biwords b JOIN pages p ON b.lid = p.lid WHERE p.title = 'Addicio' ORDER BY b.occurrences DESC LIMIT 1;
SELECT SUM(words) AS total_word FROM pages WHERE title IN ('Adam', 'Acampada');
SELECT pid, revision FROM pages WHERE title LIKE 'Aigua dolÃ§a%';
SELECT title  FROM pages  ORDER BY words DESC  LIMIT 1;
SELECT AVG(word_count) AS average_words FROM (     SELECT words AS word_count     FROM pages     WHERE words >= 10     ORDER BY words     LIMIT 10 ) AS fewest_words;
SELECT pid  FROM pages  WHERE words < 10  LIMIT 5;
SELECT pid FROM pages WHERE title LIKE 'b%';
SELECT p.title  FROM pages p  JOIN pages_words pw ON p.pid = pw.pid  JOIN words w ON pw.wid = w.wid  WHERE w.word = 'desena';
SELECT wid FROM words WHERE word = 'Sometent';
SELECT EXISTS (     SELECT 1      FROM pages      WHERE title = 'Animals' AND pid IN (         SELECT pid          FROM pages_words          WHERE wid = 88     ) ) AS is_word_id_88_for_title_animals;
SELECT pw.occurrences  FROM pages_words pw  JOIN pages p ON pw.pid = p.pid  WHERE p.title = 'Any anomalÃ­stic' AND pw.wid = (SELECT wid FROM words WHERE word = 'del');
SELECT w1st, w2nd FROM biwords WHERE occurrences = 4 LIMIT 1;
SELECT SUM(occurrences) AS total_occurrences FROM biwords WHERE w1st = 'nombre' OR w2nd = 'nombre';
SELECT DISTINCT      CASE          WHEN b.w1st = 'John' THEN b.w2nd          ELSE b.w1st      END AS paired_word FROM      biwords b WHERE      b.w1st = 'John' OR b.w2nd = 'John' LIMIT 10;
SELECT p.pid  FROM pages p  JOIN pages_words pw ON p.pid = pw.pid  JOIN words w ON pw.wid = w.wid  WHERE w.word = 'fresc';
SELECT w.wid, w.word, bw.w2nd FROM words w LEFT JOIN biwords bw ON w.wid = bw.w1st WHERE w.wid BETWEEN 1 AND 10;
SELECT SUM(w.occurrences) AS total_occurrences FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE p.title = 'Atomium' AND w.word IN (SELECT word FROM words WHERE word IN (SELECT DISTINCT word FROM pages WHERE title = 'Atomium') LIMIT 3);
SELECT word, MAX(occurrences) AS max_occurrences FROM words GROUP BY word ORDER BY max_occurrences DESC LIMIT 1;
SELECT pid  FROM pages  WHERE lid = (SELECT lid FROM langs WHERE lang = 'Catalan')  AND title REGEXP '[0-9]';
SELECT title  FROM pages  ORDER BY words ASC  LIMIT 1;
SELECT w1st, w2nd  FROM biwords  ORDER BY occurrences DESC  LIMIT 1;
SELECT SUM(occurrences) AS total_occurrences FROM words WHERE LENGTH(word) = 3;
SELECT AVG(word_count) AS average_word_count FROM (     SELECT COUNT(DISTINCT wid) AS word_count     FROM pages_words     JOIN pages ON pages.pid = pages_words.pid     WHERE pages.title LIKE 'A%'     GROUP BY pages.pid ) AS word_counts;
SELECT AVG(occurrences) AS average_repetitions FROM biwords WHERE w1st = 34;
SELECT      (COUNT(CASE WHEN words = 1500 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      pages;
SELECT      lid,      (COUNT(CASE WHEN w1st = w2nd THEN occurrences END) * 100.0 / COUNT(occurrences)) AS percentage FROM      biwords GROUP BY      lid;
SELECT p.title  FROM pages p  JOIN pages_words pw ON p.pid = pw.pid  JOIN words w ON pw.wid = w.wid  WHERE w.word = 'comunitat';
SELECT COUNT(DISTINCT pid)  FROM pages_words  WHERE wid = (SELECT wid FROM words WHERE word = 'ripoll');
SELECT SUM(occurrences) AS total_repeated_words FROM pages_words WHERE pid = (SELECT pid FROM pages WHERE title = 'Llista de conflictes armats');
SELECT COUNT(*) > 0 AS pair_exists FROM biwords WHERE (w1st IN (SELECT wid FROM words WHERE word = 'fukunaga') AND w2nd IN (SELECT wid FROM words WHERE word = 'd''egees'))    OR (w1st IN (SELECT wid FROM words WHERE word = 'd''egees') AND w2nd IN (SELECT wid FROM words WHERE word = 'fukunaga'));
SELECT AVG(total_occurrences) AS average_repetitions FROM (     SELECT p.pid, SUM(pw.occurrences) AS total_occurrences     FROM pages p     JOIN pages_words pw ON p.pid = pw.pid     GROUP BY p.pid     HAVING COUNT(DISTINCT pw.wid) = 100 ) AS subquery;
SELECT pid FROM pages WHERE title = 'Acampada' AND lid = (SELECT lid FROM langs WHERE lang = 'Catalan');
SELECT title  FROM pages  WHERE words > 300  LIMIT 3;
SELECT occurrences FROM words WHERE wid = 8;
SELECT wid, word, occurrences  FROM words  ORDER BY occurrences DESC  LIMIT 3;
SELECT occurrences  FROM biwords  WHERE (w1st = 1 AND w2nd = 25) OR (w1st = 25 AND w2nd = 1;
SELECT words FROM pages WHERE revision = 27457362;
SELECT      (COUNT(CASE WHEN w.occurrences > 16000 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      words w JOIN      langs_words lw ON w.wid = lw.wid WHERE      lw.lid = 1;
SELECT pid  FROM pages  WHERE lid = 1  ORDER BY words DESC  LIMIT 1;
SELECT      (COUNT(CASE WHEN occurrences < 80 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      biwords WHERE      lid = (SELECT lid FROM langs WHERE lang = 'Catalan');
SELECT COUNT(*) FROM pages WHERE lid = (SELECT lid FROM langs WHERE lang = 'ca');
SELECT pid, title, revision  FROM pages  WHERE lid = 1  LIMIT 3;
SELECT l.lang  FROM biwords b  JOIN langs l ON b.lid = l.lid  WHERE b.w1st = 1 AND b.w2nd = 616;
SELECT occurrences FROM words WHERE word = 'nombre' AND wid IN (SELECT wid FROM langs_words WHERE lid = 1);
SELECT w2nd FROM biwords WHERE w1st = 1 AND w2nd = 8968;
SELECT w.word, lw.occurrences FROM langs_words lw JOIN words w ON lw.wid = w.wid WHERE lw.lid = 1 ORDER BY lw.occurrences DESC LIMIT 1;
SELECT occurrences FROM pages_words WHERE pid = 44 AND wid = (SELECT wid FROM words WHERE word = 'votives');
SELECT pw.occurrences FROM pages_words pw JOIN biwords b ON pw.wid = b.w2nd WHERE pw.pid = 16 AND b.w1st = 1 AND b.w2nd = 109;
SELECT      (COUNT(w.wid) * 100.0 / (SELECT COUNT(*) FROM words w2 JOIN langs l ON w2.wid = l.lid WHERE l.lang = 'ca')) AS percentage FROM      words w JOIN      langs l ON w.wid = l.lid WHERE      w.occurrences < 180 AND l.lang = 'ca';
SELECT      (COUNT(CASE WHEN p.words > 10000 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      pages p JOIN      langs l ON p.lid = l.lid WHERE      l.lang = 'ca';
SELECT occurrences FROM words WHERE word = 'desena';
SELECT COUNT(*)  FROM words  WHERE occurrences > 10;
SELECT pages FROM langs WHERE lang = 'Catalan';
SELECT COUNT(*)  FROM words  WHERE occurrences > 2000 AND occurrences < 5000;
SELECT title  FROM pages  WHERE lid = (SELECT lid FROM langs WHERE lang = 'Catalan')  AND revision = 106601;
SELECT title FROM pages WHERE revision = 28040864;
SELECT SUM(occurrences) AS total_occurrences FROM biwords WHERE (w1st = (SELECT wid FROM words WHERE word = 'barcelona') AND w2nd = (SELECT wid FROM words WHERE word = 'precolombina'))    OR (w1st = (SELECT wid FROM words WHERE word = 'precolombina') AND w2nd = (SELECT wid FROM words WHERE word = 'barcelona'));
SELECT l.locale  FROM langs l  JOIN pages p ON l.lid = p.lid  WHERE p.title = 'Anys 90';
SELECT w.word  FROM words w  JOIN langs_words lw ON w.wid = lw.wid  JOIN langs l ON lw.lid = l.lid  WHERE l.lang = 'Catalan' AND lw.occurrences = 71303;
SELECT l.locale  FROM langs l  JOIN pages p ON l.lid = p.lid  WHERE p.title = 'Abril';
SELECT SUM(p.words) AS total_words FROM pages p JOIN pages_words pw1 ON p.pid = pw1.pid AND pw1.wid = 100 JOIN pages_words pw2 ON p.pid = pw2.pid AND pw2.wid = 317;
SELECT COUNT(DISTINCT pw.pid) AS total_pages FROM pages_words pw JOIN words w ON pw.wid = w.wid WHERE w.occurrences = 2593;
SELECT p.title  FROM pages p  JOIN pages_words pw ON p.pid = pw.pid  WHERE pw.wid < 20;
SELECT COUNT(*)  FROM words  WHERE occurrences = 3;
SELECT lw.lid FROM langs_words lw WHERE lw.occurrences = 8;
SELECT AVG(percentage) AS average_percentage FROM (     SELECT          pid,         (SUM(occurrences) * 100.0 / NULLIF(SUM(pages.words), 0)) AS percentage     FROM pages     JOIN words ON pages.pid = pages_words.pid     JOIN pages_words ON pages.pid = pages_words.pid     WHERE pages.revision < 106680     GROUP BY pid ) AS percentages;
SELECT SUM(pages.words) AS total_pages FROM words JOIN pages_words ON words.wid = pages_words.wid JOIN pages ON pages_words.pid = pages.pid WHERE words.occurrences > 3000;
SELECT w1.word, w2.word  FROM words w1, words w2  WHERE w1.wid = 20 AND w2.wid = 50;
SELECT COUNT(*) FROM pages WHERE lid = (SELECT lid FROM langs WHERE lang = 'ca');
SELECT title  FROM pages  WHERE lid = 1 AND words > 4000;
SELECT words FROM pages WHERE title = 'Asclepi';
SELECT      CASE          WHEN (SELECT COUNT(*) FROM words WHERE wid IN (SELECT wid FROM pages_words WHERE pid = (SELECT pid FROM pages WHERE title = 'Afluent'))) >               (SELECT COUNT(*) FROM words WHERE wid IN (SELECT wid FROM pages_words WHERE pid = (SELECT pid FROM pages WHERE title = 'Asclepi')))          THEN 'Afluent'          ELSE 'Asclepi'      END AS page_with_more_words;
SELECT occurrences FROM words WHERE word = 'nombre';
SELECT w.word  FROM words w  JOIN langs_words lw ON w.wid = lw.wid  JOIN langs l ON lw.lid = l.lid  WHERE l.lang = 'Catalan' AND lw.occurrences > 200000;
SELECT l.locale  FROM langs l  JOIN pages p ON l.lid = p.lid  WHERE p.title = 'Asclepi';
SELECT pw.occurrences  FROM pages_words pw  JOIN pages p ON pw.pid = p.pid  WHERE p.title = 'Àbac' AND pw.wid = (SELECT wid FROM words WHERE word = 'grec');
SELECT p.title  FROM pages p  JOIN pages_words pw ON p.pid = pw.pid  JOIN words w ON pw.wid = w.wid  WHERE w.word = 'grec' AND pw.occurrences > 20;
SELECT p.words FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE w.word = 'grec' AND w.occurrences = 52;
SELECT occurrences  FROM biwords  WHERE w1st = (SELECT wid FROM words WHERE word = 'àbac')    AND w2nd = (SELECT wid FROM words WHERE word = 'xinès');
SELECT      CASE          WHEN MAX(CASE WHEN w1st = 'àbac' AND w2nd = 'xinès' THEN occurrences END) >               MAX(CASE WHEN w1st = 'àbac' AND w2nd = 'grec' THEN occurrences END)          THEN 'àbac-xinès'          ELSE 'àbac-grec'      END AS higher_occurrence FROM biwords;
SELECT (w1.occurrences - b.occurrences) AS difference FROM biwords b JOIN words w1 ON b.w1st = w1.word WHERE b.lid = (SELECT lid FROM langs WHERE lang = 'àbac-xinès');
SELECT w1st, w2nd, occurrences  FROM biwords  WHERE w1st = 'àbac';
SELECT SUM(occurrences) AS total_occurrences FROM biwords WHERE w1st = 'àbac';
SELECT COUNT(DISTINCT p.pid)  FROM biwords b  JOIN langs l ON b.lid = l.lid  JOIN pages p ON l.lid = p.lid  JOIN words w1 ON b.w1st = w1.word  JOIN words w2 ON b.w2nd = w2.word  WHERE w1.word = 'àbac' AND w2.word = 'xinès';
SELECT      (100.0 * (p1.occurrences - p2.occurrences) / p2.occurrences) AS percentage_increase FROM      (SELECT pw.occurrences       FROM pages_words pw       JOIN pages p ON pw.pid = p.pid       JOIN words w ON pw.wid = w.wid       WHERE p.title = 'Àbac' AND w.word = 'grec') AS p1,     (SELECT pw.occurrences       FROM pages_words pw       JOIN pages p ON pw.pid = p.pid       JOIN words w ON pw.wid = w.wid       WHERE p.title = 'Astronomia' AND w.word = 'grec') AS p2;
SELECT COUNT(*)  FROM pages  WHERE lid = (SELECT lid FROM langs WHERE lang = 'ca');
SELECT lw.wid FROM langs_words lw JOIN langs l ON lw.lid = l.lid WHERE l.lang = 'Catalan' ORDER BY lw.occurrences DESC LIMIT 1;
SELECT w2nd  FROM biwords  WHERE occurrences = (SELECT MAX(occurrences) FROM biwords);
SELECT occurrences FROM words WHERE word = 'panajot';
SELECT word FROM words WHERE occurrences = 340691;
SELECT wid FROM words WHERE word = 'periodograma';
SELECT w2nd FROM biwords WHERE occurrences = 116430;
SELECT SUM(occurrences)  FROM biwords  WHERE w1st = 'riu' OR w2nd = 'riu';
SELECT pw.wid FROM pages_words pw JOIN pages p ON pw.pid = p.pid WHERE p.title = 'Agricultura' ORDER BY pw.occurrences DESC LIMIT 1;
SELECT occurrences  FROM pages_words  WHERE pid = (SELECT pid FROM pages WHERE title = 'Astre')  AND wid = 2823;
SELECT p.title FROM pages_words pw JOIN pages p ON pw.pid = p.pid WHERE pw.wid = 174 ORDER BY pw.occurrences DESC LIMIT 1;
SELECT SUM(pw.occurrences) AS total_occurrences FROM pages_words pw JOIN words w ON pw.wid = w.wid JOIN pages p ON pw.pid = p.pid WHERE w.word = 'heròdot' AND p.page = 'Wikipedia';
SELECT wid  FROM pages_words  WHERE pid = (SELECT pid FROM pages WHERE revision = 28278070)  ORDER BY occurrences DESC  LIMIT 1;
SELECT occurrences  FROM biwords  WHERE lid = (SELECT lid FROM langs WHERE lang = 'your_language')  AND w1st = (SELECT wid FROM words WHERE word = 'que')  AND w2nd = (SELECT wid FROM words WHERE word = 'gregorio');
SELECT SUM(occurrences)  FROM biwords  WHERE w2nd = (SELECT wid FROM words WHERE word = 'base');
SELECT lw.occurrences  FROM langs_words lw  JOIN words w ON lw.wid = w.wid  WHERE lw.lid = 1 AND w.word = 'exemple';
SELECT word  FROM words  JOIN langs_words ON words.wid = langs_words.wid  WHERE langs_words.lid = 1 AND langs_words.occurrences = 274499;
SELECT      (SELECT occurrences FROM biwords WHERE w1st = 'a' AND w2nd = 'base') /      (SELECT occurrences FROM biwords WHERE w1st = 'a' AND w2nd = 'decimal') AS ratio
SELECT      (SELECT occurrences FROM words WHERE word = 'grec') * 100.0 /      (SELECT SUM(occurrences) FROM pages_words pw       JOIN pages p ON pw.pid = p.pid       WHERE p.title = 'Art') AS percentage
SELECT COUNT(*)  FROM pages  WHERE lid = 1 AND words > 4000;
SELECT p.title  FROM pages p  JOIN langs l ON p.lid = l.lid  JOIN pages_words pw ON p.pid = pw.pid  GROUP BY p.pid  HAVING COUNT(DISTINCT pw.wid) = 10 AND l.lid = 1;
SELECT w.word  FROM words w  JOIN langs_words lw ON w.wid = lw.wid  JOIN langs l ON lw.lid = l.lid  WHERE l.lang = 'Catalan'  ORDER BY lw.occurrences DESC  LIMIT 1;
SELECT title  FROM pages  WHERE lid = 1  ORDER BY words DESC  LIMIT 3;
SELECT revision FROM pages WHERE lid = 1 AND title = 'Arqueologia';
SELECT COUNT(*)  FROM pages  WHERE lid = 1 AND words > 300 AND revision > 28330000;
SELECT DISTINCT pw.pid  FROM pages_words pw  JOIN words w ON pw.wid = w.wid  WHERE w.word = 'nombre';
SELECT COUNT(DISTINCT p.pid)  FROM pages p  JOIN langs l ON p.lid = l.lid  JOIN pages_words pw ON p.pid = pw.pid  JOIN words w ON pw.wid = w.wid  WHERE l.lang = 'Catalan' AND w.word = 'nombre' AND pw.occurrences > 5;
SELECT COUNT(*)  FROM biwords  WHERE w2nd = (SELECT wid FROM words WHERE word = 'grec');
SELECT p.title  FROM pages p  JOIN pages_words pw ON p.pid = pw.pid  JOIN words w ON pw.wid = w.wid  WHERE w.word = 'grec' AND pw.occurrences = 52;
SELECT COUNT(*)  FROM biwords  WHERE w1st = 'àbac' AND occurrences > 10;
SELECT AVG(pw.occurrences) AS average_occurrence FROM pages_words pw JOIN words w ON pw.wid = w.wid WHERE w.word = 'grec';
SELECT COUNT(*)  FROM Airlines  WHERE FL_DATE = '2018-08-01';
SELECT COUNT(*)  FROM Airlines  WHERE FL_DATE = '2018/8/1' AND ORIGIN = 'JFK';
SELECT DEST  FROM Airlines  WHERE CANCELLED = 1 AND FL_DATE = '2018-08-01';
SELECT FL_DATE  FROM Airlines  WHERE CANCELLED = 1 AND CANCELLATION_CODE = 'A';
SELECT DISTINCT ORIGIN  FROM Airlines  WHERE FL_DATE = '2018-08-01' AND DEP_DELAY > 0;
SELECT COUNT(*)  FROM Airlines  WHERE FL_DATE = '2018/8/1'  AND ORIGIN = (SELECT Code FROM Airports WHERE Description = 'New York, NY: John F. Kennedy International');
SELECT DEST  FROM Airlines  WHERE FL_DATE = '2018-08-01'  ORDER BY DEP_DELAY DESC  LIMIT 1;
SELECT COUNT(*)  FROM Airlines  WHERE ORIGIN = (SELECT Code FROM Airports WHERE Description = 'New York, NY: John F. Kennedy International')  AND ARR_DELAY < 0;
SELECT MIN(CRS_DEP_TIME)  FROM Airlines  WHERE ORIGIN = (SELECT Code FROM Airports WHERE Description = 'New York, NY: John F. Kennedy International')  AND FL_DATE = '2018-08-01';
SELECT COUNT(*)  FROM Airlines  WHERE FL_DATE = '2018-08-01'  AND OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'American Airlines Inc.: AA');
SELECT DISTINCT a.OP_CARRIER_FL_NUM FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code JOIN Airports ap ON a.ORIGIN = ap.Code WHERE ac.Description = 'American Airlines Inc.: AA' AND ap.Description = 'New York, NY: John F. Kennedy International';
SELECT COUNT(*)  FROM Airlines a  JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code  WHERE ac.Description = 'American Airlines Inc.: AA'  AND a.FL_DATE = '2018-08-01'  AND a.ACTUAL_ELAPSED_TIME < a.CRS_ELAPSED_TIME;
SELECT OP_CARRIER_FL_NUM  FROM Airlines  WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'American Airlines Inc.: AA')  ORDER BY DEP_DELAY DESC  LIMIT 1;
SELECT COUNT(*)  FROM Airlines  WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'American Airlines Inc.: AA')  AND DEST = 'JFK';
SELECT COUNT(*)  FROM Airlines  WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'American Airlines Inc.: AA')  AND FL_DATE = '2018-08-01'  AND CANCELLED = 1;
SELECT      SUM(CASE WHEN a.Description = 'American Airlines Inc.: AA' THEN 1 ELSE 0 END) AS American_Airlines_Flights,     SUM(CASE WHEN a.Description = 'Endeavor Air Inc.: 9E' THEN 1 ELSE 0 END) AS Endeavor_Air_Flights FROM      Airlines al JOIN      Air Carriers a ON al.OP_CARRIER_AIRLINE_ID = a.Code WHERE      al.FL_DATE = '2018-08-01';
SELECT AVG(DEP_DELAY) AS average_departure_delay FROM Airlines WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'American Airlines Inc.: AA');
SELECT DIVIDE(COUNT(*), 31) AS average_flights FROM Airlines WHERE OP_CARRIER_AIRLINE_ID = 'AA' AND FL_DATE LIKE '2018/8%';
SELECT COUNT(*) FROM "Air Carriers";
SELECT COUNT(DISTINCT TAIL_NUM)  FROM Airlines  WHERE ORIGIN = (SELECT Code FROM Airports WHERE Description = 'Los Angeles, CA: Los Angeles International')  AND FL_DATE = '2018-08-27';
SELECT COUNT(*)  FROM Airlines  WHERE DEST = (SELECT Code FROM Airports WHERE Description LIKE '%Oakland%')  AND FL_DATE = '2018-08-07';
SELECT COUNT(*)  FROM Airlines  WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'Alaska Airlines Inc.: AS')  AND DEP_DELAY > 0  AND FL_DATE = '2018-08-02';
SELECT COUNT(*)  FROM Airlines  WHERE DEST = 'MIA' AND ARR_DELAY < 0 AND FL_DATE = '2018-08-12';
SELECT COUNT(*)  FROM Airlines  WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'American Airlines Inc.: AA')  AND CANCELLED = 1  AND CANCELLATION_CODE = 'A';
SELECT COUNT(*)  FROM Airlines  WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'Endeavor Air Inc.: 9E')  AND FL_DATE = '2018-08-31'  AND ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME;
SELECT COUNT(*)  FROM Airlines  WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'Spirit Air Lines: NK')  AND FL_DATE = '2018-08-07';
SELECT ac.Description  FROM Airlines a  JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code  WHERE a.TAIL_NUM = 'N702SK';
SELECT a.Description FROM Airlines AS al JOIN Airports AS a ON al.DEST_AIRPORT_ID = a.Code WHERE al.FL_DATE = '2018-08-15' GROUP BY a.Description ORDER BY COUNT(al.DEST_AIRPORT_ID) DESC LIMIT 1;
SELECT ac.Description FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.ORIGIN = 'ATL'    AND a.DEST = 'PHL'    AND a.FL_DATE = '2018-08-01'    AND a.CRS_DEP_TIME = '2040';
SELECT COUNT(*)  FROM Airlines  WHERE DEST = (SELECT Code FROM Airports WHERE Description = 'Lake Charles, LA: Lake Charles Regional')  AND FL_DATE = '2018-08-15';
SELECT COUNT(*)  FROM Airlines  WHERE ORIGIN = (SELECT Code FROM Airports WHERE Description = 'San Diego, CA: San Diego International')  AND DEST = (SELECT Code FROM Airports WHERE Description = 'Los Angeles, CA: Los Angeles International')  AND FL_DATE LIKE '2018/8%';
SELECT      (SUM(CASE WHEN CANCELLATION_CODE = 'C' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS cancellation_percentage FROM      Airlines WHERE      ORIGIN = (SELECT Code FROM Airports WHERE Description = 'Los Angeles, CA: Los Angeles International');
SELECT      (SUM(CASE WHEN ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM      Airlines A JOIN      Airports AP ON A.DEST_AIRPORT_ID = AP.Code WHERE      AP.Description LIKE '%Pittsburgh%';
SELECT Description FROM Air Carriers WHERE Code = '19049';
SELECT COUNT(*)  FROM Airlines  WHERE FL_DATE = '2018-08-01' AND DEP_DELAY <= 0;
SELECT Code FROM Airports WHERE Description LIKE '%Ankara, Turkey%';
SELECT MAX(WEATHER_DELAY) AS Longest_Weather_Delay FROM Airlines WHERE ORIGIN_AIRPORT_ID = 12264;
SELECT Code FROM Airports WHERE Description = 'Anita Bay, AK: Anita Bay Airport';
SELECT ORIGIN_AIRPORT_ID FROM Airlines ORDER BY LATE_AIRCRAFT_DELAY DESC LIMIT 1;
SELECT COUNT(*)  FROM Airlines a JOIN Airports o ON a.ORIGIN_AIRPORT_ID = o.Code JOIN Airports d ON a.DEST_AIRPORT_ID = d.Code WHERE o.Description = 'Chicago, IL: Chicago O\'Hare International'  AND d.Description = 'Atlanta, GA: Hartsfield-Jackson Atlanta International';
SELECT COUNT(DISTINCT TAIL_NUM)  FROM Airlines  WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'Southwest Airlines Co.: WN');
SELECT FL_DATE, COUNT(*) AS CancelledFlights FROM Airlines JOIN Airports ON Airlines.ORIGIN_AIRPORT_ID = Airports.Code WHERE FL_DATE LIKE '2018/8%' AND CANCELLED = 1 AND CANCELLATION_CODE = 'A' AND Airports.Description = 'Dallas/Fort Worth, TX: Dallas/Fort Worth International' GROUP BY FL_DATE ORDER BY CancelledFlights DESC LIMIT 1;
SELECT DISTINCT TAIL_NUM  FROM Airlines  WHERE ARR_DELAY <= 0  AND DEST = (SELECT Code FROM Airports WHERE Description = 'Bakersfield, CA: Meadows Field')  AND FL_DATE LIKE '2018/8%';
SELECT OP_CARRIER_AIRLINE_ID FROM Airlines WHERE DEST = (SELECT Code FROM Airports WHERE Description = 'Boston, MA: Logan International') GROUP BY OP_CARRIER_AIRLINE_ID ORDER BY MAX(SECURITY_DELAY) DESC LIMIT 1;
SELECT ac.Description, COUNT(DISTINCT a.TAIL_NUM) AS aircraft_count FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code GROUP BY ac.Description ORDER BY aircraft_count DESC LIMIT 5;
SELECT ac.Description FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.CANCELLED = 0 GROUP BY ac.Description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ac.Description  FROM Airlines a  JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code  WHERE a.TAIL_NUM = 'N202NN';
SELECT ac.Description FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code JOIN Airports ap ON a.DEST_AIRPORT_ID = ap.Code WHERE ap.Description = 'Chicago, IL: Chicago Midway International' GROUP BY ac.Description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT TAIL_NUM FROM Airlines WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'Compass Airlines: CP') AND ORIGIN = 'LAX' AND DEST = 'ABQ' GROUP BY TAIL_NUM ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ORIGIN, COUNT(ORIGIN) AS flight_count FROM Airlines WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'Republic Airline: YX') GROUP BY ORIGIN ORDER BY flight_count DESC LIMIT 1;
SELECT OP_CARRIER_AIRLINE_ID FROM Airlines WHERE (ACTUAL_ELAPSED_TIME - CRS_ELAPSED_TIME) = (     SELECT MIN(ACTUAL_ELAPSED_TIME - CRS_ELAPSED_TIME)     FROM Airlines );
SELECT      TAIL_NUM,     DIVIDE(SUM(LATE_AIRCRAFT_DELAY), 60) AS total_delayed_hours FROM      Airlines WHERE      OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'Delta Air Lines Inc.: DL')     AND FL_DATE LIKE '2018/8/%' GROUP BY      TAIL_NUM ORDER BY      total_delayed_hours DESC LIMIT 1;
SELECT Code, Description FROM Airports LIMIT 3;
SELECT Code FROM "Air Carriers" WHERE Description LIKE 'Mississippi Valley Airlines%';
SELECT CRS_DEP_TIME, DEP_TIME  FROM Airlines  WHERE ORIGIN = 'PHL'    AND DEST = 'MDT'    AND TAIL_NUM = 'N627AE'    AND FL_DATE = '2018-08-13';
SELECT COUNT(*)  FROM Airlines  WHERE FL_DATE = '2018-08-01' AND ORIGIN = 'ABE';
SELECT DISTINCT DEST  FROM Airlines  WHERE ORIGIN = 'ABY';
SELECT COUNT(*)  FROM Airlines  WHERE ORIGIN = 'DFW' AND DEST = 'SNA' AND DEP_DELAY = 0;
SELECT COUNT(*)  FROM Airlines a JOIN Airports o ON a.ORIGIN_AIRPORT_ID = o.Code JOIN Airports d ON a.DEST_AIRPORT_ID = d.Code WHERE o.Description = 'Charlotte, NC: Charlotte Douglas International'    AND d.Description = 'Austin, TX: Austin - Bergstrom International'    AND a.CANCELLATION_CODE = 'A';
SELECT OP_CARRIER_AIRLINE_ID, COUNT(*) AS cancelled_flights FROM Airlines WHERE CANCELLED = 1 GROUP BY OP_CARRIER_AIRLINE_ID ORDER BY cancelled_flights DESC LIMIT 1;
SELECT DEP_TIME  FROM Airlines a  JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code  JOIN Airports ap ON a.DEST_AIRPORT_ID = ap.Code  WHERE ac.Description LIKE '%JetBlue Airways%'    AND a.TAIL_NUM = 'N903JB'    AND ap.Description LIKE '%Fort Lauderdale-Hollywood%'    AND a.FL_DATE = '2018-08-20';
SELECT DISTINCT OP_CARRIER_AIRLINE_ID  FROM Airlines  WHERE ORIGIN = 'ACY' AND DEST = 'FLL';
SELECT Description FROM Airports WHERE Code = 'A11';
SELECT COUNT(*) AS total_flights FROM Airlines WHERE ORIGIN = 'OKC';
SELECT COUNT(*)  FROM Airports  WHERE Code LIKE 'C%';
SELECT DEST FROM Airlines WHERE OP_CARRIER_FL_NUM = '1596';
SELECT Description  FROM Airports  WHERE Code LIKE '%3';
SELECT Code FROM Airports WHERE Description = 'Driftwood Bay, AK: Driftwood Bay Airport';
SELECT COUNT(*) AS cancelled_flights FROM Airlines WHERE CANCELLED = 1;
SELECT TAIL_NUM  FROM Airlines  WHERE FL_DATE = '2018-08-17';
SELECT ORIGIN  FROM Airlines  WHERE ACTUAL_ELAPSED_TIME = (SELECT MIN(ACTUAL_ELAPSED_TIME) FROM Airlines);
SELECT FL_DATE, TAIL_NUM  FROM Airlines  WHERE OP_CARRIER_AIRLINE_ID IN (SELECT Code FROM Air Carriers WHERE Description = 'Ross Aviation Inc.: GWE');
SELECT ac.Description, ac.Code FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.ARR_TIME = (SELECT MIN(ARR_TIME) FROM Airlines);
SELECT COUNT(*)  FROM Airlines  WHERE OP_CARRIER_AIRLINE_ID = 'B6'  AND ARR_DELAY_NEW = 0;
SELECT ac.Description FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.DEST = 'MIA';
SELECT ac.Description FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.CANCELLED = 1;
SELECT ACTUAL_ELAPSED_TIME  FROM Airlines  WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'Semo Aviation Inc.: SEM');
SELECT TAIL_NUM  FROM Airlines  WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'Asap Air Inc.: ASP')  ORDER BY DEP_DELAY DESC  LIMIT 1;
SELECT ac.Description FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.DEP_DELAY = 0;
SELECT ac.Description FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.ACTUAL_ELAPSED_TIME = (SELECT MAX(ACTUAL_ELAPSED_TIME) FROM Airlines);
SELECT DISTINCT DEST  FROM Airlines  WHERE OP_CARRIER_AIRLINE_ID IN (     SELECT Code      FROM Air Carriers      WHERE Description = 'Southeast Alaska Airlines: WEB' );
SELECT COUNT(*)  FROM Airlines a  JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code  WHERE a.FL_DATE BETWEEN '2018-08-10' AND '2018-08-20'  AND a.CANCELLED = 1  AND ac.Description = 'Spirit Air Lines: NK';
SELECT COUNT(*)  FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.FL_DATE = '2018/8/2' AND ac.Description LIKE '%Horizon Air%';
SELECT TAIL_NUM  FROM Airlines  WHERE OP_CARRIER_AIRLINE_ID IN (SELECT Code FROM Air Carriers WHERE Description = 'Iscargo Hf: ICQ')  AND ARR_TIME <= 1000;
SELECT FL_DATE  FROM Airlines  WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'Profit Airlines Inc.: XBH')  AND ACTUAL_ELAPSED_TIME < 100;
SELECT COUNT(*)  FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE ac.Description LIKE '%Republic Airline%' AND a.DEP_DELAY > 30;
SELECT DISTINCT ac.Description FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.FL_DATE = '2018/8/25' AND a.DEP_DELAY = -5;
SELECT ac.Description FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.TAIL_NUM = 'N922US' AND a.ORIGIN = 'PHX';
SELECT ac.Description FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.ARR_DELAY < 0 AND a.DEP_DELAY < 0;
SELECT TAIL_NUM  FROM Airlines  WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'Southwest Airlines Co.: WN')  AND ACTUAL_ELAPSED_TIME < (SELECT AVG(ACTUAL_ELAPSED_TIME) * 0.8 FROM Airlines WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'Southwest Airlines Co.: WN'));
SELECT ac.Description FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.DEST = 'PHX'  AND a.ARR_TIME < (SELECT AVG(ARR_TIME) * 0.4 FROM Airlines WHERE DEST = 'PHX');
SELECT      (SUM(CASE WHEN DEP_DELAY < 0 THEN 1 ELSE 0 END) * 1.0 / COUNT(*)) * 100 AS percentage_earlier_departure FROM      Airlines WHERE      OP_CARRIER_AIRLINE_ID IN (SELECT Code FROM Air Carriers WHERE Description LIKE '%American Airlines%');
SELECT COUNT(*)  FROM book  WHERE publisher_id = 1929 AND num_pages > 500;
SELECT publication_date  FROM book  WHERE num_pages = (SELECT MAX(num_pages) FROM book);
SELECT publisher.publisher_name  FROM book  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE book.title = 'The Illuminati';
SELECT COUNT(*)  FROM book  WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Thomas Nelson');
SELECT publisher_name FROM publisher JOIN book ON publisher.publisher_id = book.publisher_id GROUP BY publisher_name ORDER BY COUNT(book.book_id) DESC LIMIT 1;
SELECT title  FROM book  WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Thomas Nelson')  ORDER BY publication_date ASC  LIMIT 1;
SELECT COUNT(*)  FROM book  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE publisher.publisher_name = 'Thomas Nelson' AND book.num_pages > 300;
SELECT p.publisher_name FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id WHERE b.num_pages = (SELECT MAX(num_pages) FROM book);
SELECT COUNT(*)  FROM book  WHERE language_id = (SELECT language_id FROM book_language WHERE language_name = 'English');
SELECT b.title  FROM book b  JOIN book_language bl ON b.language_id = bl.language_id  WHERE bl.language_name = 'British English';
SELECT MIN(ol.price) AS cheapest_order_price FROM order_line ol JOIN cust_order co ON ol.order_id = co.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'The Little House';
SELECT b.title FROM book b JOIN order_line ol ON b.book_id = ol.book_id JOIN cust_order co ON ol.order_id = co.order_id JOIN customer c ON co.customer_id = c.customer_id WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';
SELECT COUNT(b.book_id) AS books_over_300_pages FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore' AND b.num_pages > 300;
SELECT SUM(ol.price) AS total_price FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';
SELECT AVG(ol.price) AS average_spend FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';
SELECT      (SUM(CASE WHEN ol.price > 13 THEN 1 ELSE 0 END) * 100.0 / COUNT(ol.order_id)) AS percentage_over_13 FROM      customer c JOIN      cust_order co ON c.customer_id = co.customer_id JOIN      order_line ol ON co.order_id = ol.order_id WHERE      c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';
SELECT city FROM address WHERE address_id = 547;
SELECT COUNT(*) AS order_count FROM cust_order WHERE customer_id = (SELECT customer_id FROM customer WHERE first_name = 'Cordy' AND last_name = 'Dumbarton');
SELECT title  FROM book  WHERE language_id = (SELECT language_id FROM book_language WHERE language_name = 'Japanese')  ORDER BY publication_date ASC  LIMIT 1;
SELECT publisher_name FROM publisher WHERE publisher_id = (     SELECT publisher_id     FROM book     GROUP BY publisher_id     ORDER BY COUNT(book_id) DESC     LIMIT 1 );
SELECT COUNT(*)  FROM book  WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Kensington');
SELECT bl.language_name  FROM book b  JOIN book_language bl ON b.language_id = bl.language_id  WHERE b.book_id = 1405;
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT title  FROM book  WHERE book_id IN (     SELECT book_id      FROM order_line      GROUP BY book_id      ORDER BY COUNT(order_id) DESC      LIMIT 1 );
SELECT COUNT(*)  FROM book_author ba JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'David Foster Wallace';
SELECT COUNT(DISTINCT co.order_id) AS order_count FROM cust_order co JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'O Xará';
SELECT c.first_name, c.last_name, co.country_name FROM customer c JOIN customer_address ca ON c.customer_id = ca.customer_id JOIN address a ON ca.address_id = a.address_id JOIN country co ON a.country_id = co.country_id WHERE c.first_name = 'Malina' AND c.last_name = 'Johnson';
SELECT COUNT(*)  FROM address  WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'Ukraine');
SELECT country.country_name  FROM address  JOIN country ON address.country_id = country.country_id  WHERE address.city = 'Žirovnica';
SELECT      (SUM(CASE WHEN sm.method_name = 'International' THEN 1 ELSE 0 END) * 100.0 / COUNT(o.order_id)) AS international_shipping_percentage FROM      cust_order o JOIN      shipping_method sm ON o.shipping_method_id = sm.method_id WHERE      o.order_date LIKE '2022-11-10%';
SELECT AVG(num_pages) AS average_num_pages FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'David Coward';
SELECT cost FROM shipping_method WHERE method_name = 'Standard';
SELECT title  FROM book  WHERE publication_date LIKE '1900%'  ORDER BY publication_date  LIMIT 1;
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM customer WHERE email = 'aalleburtonkc@yellowbook.com';
SELECT COUNT(*)  FROM cust_order co JOIN customer_address ca ON co.dest_address_id = ca.address_id JOIN address a ON ca.address_id = a.address_id JOIN country c ON a.country_id = c.country_id WHERE c.country_name = 'Iran' AND co.order_date LIKE '2022%';
SELECT COUNT(*)  FROM cust_order co JOIN customer c ON co.customer_id = c.customer_id JOIN shipping_method sm ON co.shipping_method_id = sm.method_id WHERE c.first_name = 'Daisey' AND c.last_name = 'Lamball'  AND sm.method_name = 'International';
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id GROUP BY c.customer_id ORDER BY COUNT(ol.book_id) DESC LIMIT 1;
SELECT COUNT(o.order_id) AS returned_orders FROM cust_order o JOIN order_history h ON o.order_id = h.order_id JOIN customer c ON o.customer_id = c.customer_id WHERE c.first_name = 'Antonia' AND c.last_name = 'Poltun' AND h.status_id = (SELECT status_id FROM order_status WHERE status_value = 'Returned');
SELECT sm.method_name FROM shipping_method sm JOIN cust_order co ON sm.method_id = co.shipping_method_id GROUP BY sm.method_id, sm.method_name ORDER BY COUNT(co.shipping_method_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT o.order_id) AS delivered_orders FROM cust_order o JOIN order_history oh ON o.order_id = oh.order_id JOIN order_status os ON oh.status_id = os.status_id WHERE os.status_value = 'Delivered' AND oh.status_date LIKE '2021%';
SELECT b.title  FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'J.K Rowling' ORDER BY b.publication_date ASC LIMIT 1;
SELECT COUNT(*)  FROM book_author ba  JOIN author a ON ba.author_id = a.author_id  WHERE a.author_name = 'A.R. Braunmuller';
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Agatha Christie' AND b.publication_date = (     SELECT MIN(publication_date)     FROM book     JOIN book_author ON book.book_id = book_author.book_id     JOIN author ON book_author.author_id = author.author_id     WHERE author.author_name = 'Agatha Christie' );
SELECT b.title  FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Danielle Steel';
SELECT COUNT(b.book_id) AS book_count FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'William Shakespeare' AND p.publisher_name = 'Penguin Classics';
SELECT publisher_name FROM publisher JOIN book ON publisher.publisher_id = book.publisher_id GROUP BY publisher_name ORDER BY COUNT(book.book_id) DESC LIMIT 1;
SELECT SUM(sm.cost) AS total_shipping_cost, COUNT(co.order_id) AS orders_in_2022 FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN shipping_method sm ON co.shipping_method_id = sm.method_id WHERE c.first_name = 'Page' AND c.last_name = 'Holsey' AND co.order_date LIKE '2022%';
SELECT publisher_name FROM publisher WHERE publisher_id = 22;
SELECT COUNT(*)  FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Al Gore' AND b.num_pages < 400;
SELECT a.author_name, p.publisher_name FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id JOIN publisher p ON b.publisher_id = p.publisher_id WHERE b.publication_date = '1997-07-10';
SELECT bl.language_name  FROM book b  JOIN book_language bl ON b.language_id = bl.language_id  WHERE b.isbn13 = '23755004321';
SELECT b.title  FROM book b  JOIN order_line ol ON b.book_id = ol.book_id  ORDER BY ol.price DESC  LIMIT 1;
SELECT SUM(ol.price) AS total_price FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';
SELECT b.isbn13  FROM book b  JOIN book_language bl ON b.language_id = bl.language_id  WHERE bl.language_name = 'Spanish';
SELECT COUNT(*)  FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id JOIN order_line ol ON b.book_id = ol.book_id WHERE ol.price < 1 AND p.publisher_name = 'Berkley Trade';
SELECT b.title FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE c.first_name = 'Zia' AND c.last_name = 'Roizin';
SELECT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id WHERE b.num_pages = (SELECT MAX(num_pages) FROM book);
SELECT DISTINCT c.email FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'Switch on the Night';
SELECT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id JOIN publisher p ON b.publisher_id = p.publisher_id WHERE p.publisher_name = 'Abrams';
SELECT publisher.publisher_name  FROM book  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE book.title = 'The Illuminati';
SELECT      (SUM(CASE WHEN b.publication_date LIKE '1992%' THEN 1 ELSE 0 END) * 100.0 / COUNT(b.book_id)) AS percentage FROM      book b JOIN      book_author ba ON b.book_id = ba.book_id JOIN      author a ON ba.author_id = a.author_id WHERE      a.author_name = 'Abraham Lincoln';
SELECT DISTINCT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id WHERE b.publication_date LIKE '2004%' AND b.num_pages > (SELECT AVG(num_pages) * 0.7 FROM book);
SELECT email FROM customer WHERE first_name = 'Moss' AND last_name = 'Zarb';
SELECT street_name FROM address WHERE city = 'Dallas';
SELECT b.title  FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Orson Scott Card' AND b.publication_date LIKE '2001%';
SELECT COUNT(b.book_id) AS book_count FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Orson Scott Card';
SELECT a.author_name, b.title FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id WHERE b.num_pages > 3000;
SELECT a.author_name  FROM author a  JOIN book_author ba ON a.author_id = ba.author_id  JOIN book b ON ba.book_id = b.book_id  WHERE b.title = 'The Prophet';
SELECT COUNT(*) AS number_of_books FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Ace Hardcover');
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Barry Eisler';
SELECT COUNT(*)  FROM book  WHERE language_id = (SELECT language_id FROM book_language WHERE language_name = 'Japanese');
SELECT SUM(ol.price) AS total_price FROM order_line ol JOIN cust_order co ON ol.order_id = co.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'The Prophet';
SELECT COUNT(cust_order.order_id) AS number_of_orders FROM cust_order JOIN customer ON cust_order.customer_id = customer.customer_id JOIN customer_address ON customer.customer_id = customer_address.customer_id JOIN address ON customer_address.address_id = address.address_id JOIN order_history ON cust_order.order_id = order_history.order_id JOIN author ON book_author.author_id = author.author_id JOIN book ON book_author.book_id = book.book_id WHERE author.author_name = 'Daisey Lamball' AND cust_order.order_date LIKE '2021%';
SELECT COUNT(DISTINCT c.customer_id) AS customer_count FROM customer c JOIN customer_address ca ON c.customer_id = ca.customer_id JOIN address a ON ca.address_id = a.address_id JOIN country co ON a.country_id = co.country_id WHERE co.country_name = 'Australia';
SELECT COUNT(DISTINCT oh.order_id) AS delivered_orders FROM order_history oh JOIN order_status os ON oh.status_id = os.status_id WHERE os.status_value = 'Delivered' AND oh.status_date LIKE '2019-12%';
SELECT c.first_name, c.last_name FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'Fantasmas';
SELECT      (SUM(CASE WHEN sm.method_name = 'International' THEN 1 ELSE 0 END) * 100.0 / COUNT(co.order_id)) AS international_shipping_percentage FROM      cust_order co JOIN      shipping_method sm ON co.shipping_method_id = sm.method_id WHERE      co.order_date LIKE '2020%';
SELECT * FROM author WHERE author_name LIKE 'George%';
SELECT YEAR(order_date) AS order_year, COUNT(order_id) AS order_count FROM cust_order GROUP BY order_year ORDER BY order_count DESC LIMIT 1;
SELECT AVG(price) AS average_price FROM order_line;
SELECT title FROM book WHERE publication_date LIKE '1995%';
SELECT SUBSTR(email, CHARINDEX('@', email) + 1) AS domain, COUNT(*) AS domain_count FROM customer GROUP BY domain ORDER BY domain_count DESC LIMIT 1;
SELECT COUNT(*) FROM publisher WHERE publisher_name LIKE '%book%';
SELECT bl.language_name FROM book b JOIN book_language bl ON b.language_id = bl.language_id GROUP BY bl.language_name ORDER BY COUNT(b.book_id) ASC LIMIT 1;
SELECT co.order_date FROM customer AS c JOIN cust_order AS co ON c.customer_id = co.customer_id WHERE c.first_name = 'Adrian' AND c.last_name = 'Kunzelmann';
SELECT COUNT(*)  FROM address  WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'Philippines');
SELECT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id GROUP BY a.author_id, a.author_name ORDER BY COUNT(ba.book_id) DESC LIMIT 1;
SELECT b.title  FROM book b  JOIN publisher p ON b.publisher_id = p.publisher_id  WHERE p.publisher_name = 'Harper Collins';
SELECT COUNT(*)  FROM order_history oh JOIN order_status os ON oh.status_id = os.status_id WHERE os.status_value = 'Returned'  AND oh.status_date LIKE '%2020%';
SELECT method_name FROM shipping_method JOIN cust_order ON shipping_method.method_id = cust_order.shipping_method_id GROUP BY method_name ORDER BY COUNT(cust_order.order_id) ASC LIMIT 1 OFFSET 1;
SELECT COUNT(*) AS inactive_address_count FROM customer_address ca JOIN address_status as ON ca.status_id = as.status_id WHERE as.address_status = 'Inactive';
SELECT b.title FROM book b JOIN order_line ol ON b.book_id = ol.book_id GROUP BY b.book_id, b.title ORDER BY COUNT(ol.order_id) DESC LIMIT 1;
SELECT a.street_name, a.city FROM address a JOIN cust_order co ON a.address_id = co.dest_address_id GROUP BY a.address_id ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT      Subtract(strftime('%Y', oh.status_date), strftime('%Y', co.order_date)) AS "year",      Subtract(strftime('%m', oh.status_date), strftime('%m', co.order_date)) AS "month",      Subtract(strftime('%d', oh.status_date), strftime('%d', co.order_date)) AS "day" FROM      cust_order co JOIN      order_history oh ON co.order_id = oh.order_id WHERE      co.order_id = 2398;
SELECT c.first_name, c.last_name, COUNT(ca.address_id) AS address_count FROM customer c JOIN customer_address ca ON c.customer_id = ca.customer_id GROUP BY c.customer_id ORDER BY address_count DESC LIMIT 1;
SELECT      (SUM(CASE WHEN sm.method_name = 'International' THEN ol.price ELSE 0 END) / SUM(ol.price)) * 100 AS international_percentage FROM      order_line ol JOIN      cust_order co ON ol.order_id = co.order_id JOIN      shipping_method sm ON co.shipping_method_id = sm.method_id;
SELECT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id GROUP BY a.author_id, a.author_name HAVING SUM(b.num_pages) < (SELECT AVG(num_pages) FROM book);
SELECT MIN(price) AS lowest_price FROM order_line WHERE price != 0;
SELECT COUNT(DISTINCT c.customer_id) AS customer_count FROM customer c JOIN customer_address ca ON c.customer_id = ca.customer_id JOIN address a ON ca.address_id = a.address_id WHERE a.city = 'Villeneuve-la-Garenne';
SELECT COUNT(*) FROM author WHERE author_name LIKE 'Adam';
SELECT COUNT(*) AS yahoo_mail_customers FROM customer WHERE email LIKE '%@yahoo.com';
SELECT a.city FROM customer c JOIN customer_address ca ON c.customer_id = ca.customer_id JOIN address a ON ca.address_id = a.address_id JOIN country co ON a.country_id = co.country_id WHERE co.country_name = 'United States of America';
SELECT COUNT(*)  FROM cust_order co JOIN customer c ON co.customer_id = c.customer_id JOIN shipping_method sm ON co.shipping_method_id = sm.method_id WHERE c.first_name = 'Marcelia'    AND c.last_name = 'Goering'    AND substr(co.order_date, 1, 4) = '2021'    AND sm.method_name = 'Priority';
SELECT b.title, ol.price FROM book b JOIN order_line ol ON b.book_id = ol.book_id WHERE ol.price = (SELECT MAX(price) FROM order_line);
SELECT COUNT(DISTINCT co.customer_id) AS customer_count FROM cust_order co JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'Anleitung zum Zickigsein';
SELECT MAX(ol.price) AS most_expensive_price FROM order_line ol JOIN cust_order co ON ol.order_id = co.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'Bite Me If You Can (Argeneau #6)';
SELECT COUNT(DISTINCT co.customer_id) AS customer_count FROM cust_order co JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.publication_date = (SELECT MIN(publication_date) FROM book);
SELECT b.title  FROM book b  JOIN book_language bl ON b.language_id = bl.language_id  JOIN publisher p ON b.publisher_id = p.publisher_id  WHERE bl.language_name = 'Spanish' AND p.publisher_name = 'Alfaguara';
SELECT COUNT(DISTINCT co.customer_id) AS customer_count FROM cust_order co JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Stephen King'  AND b.publication_date = (SELECT MIN(publication_date) FROM book WHERE book_id IN (SELECT book_id FROM book_author WHERE author_id = (SELECT author_id FROM author WHERE author_name = 'Stephen King')));
SELECT bl.language_name FROM book b JOIN book_language bl ON b.language_id = bl.language_id WHERE b.publication_date IN (     SELECT MIN(publication_date) FROM book     UNION     SELECT MIN(publication_date) FROM book     WHERE publication_date > (SELECT MIN(publication_date) FROM book) )
SELECT p.publisher_name  FROM book b  JOIN publisher p ON b.publisher_id = p.publisher_id  WHERE b.title = 'The Secret Garden';
SELECT COUNT(*)  FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE p.publisher_name = 'Scholastic' AND a.author_name = 'J.K Rowling';
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id GROUP BY p.publisher_id, p.publisher_name HAVING COUNT(b.book_id) >= 30;
SELECT DISTINCT street_name, SUBSTR(street_number, -1) AS last_number FROM address;
SELECT a.street_number, a.street_name, a.city, c.country_name FROM address a JOIN customer_address ca ON a.address_id = ca.address_id JOIN customer c ON ca.customer_id = c.customer_id JOIN country co ON a.country_id = co.country_id WHERE a.city = 'Lazaro Cardenas';
SELECT isbn13 FROM book WHERE num_pages > 135 AND num_pages < 140;
SELECT title  FROM book  ORDER BY publication_date ASC  LIMIT 6;
SELECT COUNT(DISTINCT ol.book_id) AS total_books_ordered FROM cust_order co JOIN order_line ol ON co.order_id = ol.order_id WHERE SUBSTR(co.order_date, 1, 7) = '2020-12';
SELECT first_name, last_name  FROM customer  WHERE last_name LIKE 'K%';
SELECT DISTINCT a.city FROM customer c JOIN customer_address ca ON c.customer_id = ca.customer_id JOIN address a ON ca.address_id = a.address_id JOIN country co ON a.country_id = co.country_id WHERE co.country_name = 'Costa Rica';
SELECT a.street_number, a.street_name, a.city FROM customer_address ca JOIN address_status as ON ca.status_id = as.status_id JOIN address a ON ca.address_id = a.address_id WHERE as.address_status = 'Inactive';
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN customer_address ca ON c.customer_id = ca.customer_id JOIN address a ON ca.address_id = a.address_id WHERE a.city = 'Baiyin';
SELECT DISTINCT c.email FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN shipping_method sm ON co.shipping_method_id = sm.method_id WHERE sm.method_name = 'Priority';
SELECT co.order_date FROM customer_address ca JOIN address a ON ca.address_id = a.address_id JOIN cust_order co ON ca.customer_id = co.customer_id WHERE a.street_number = '460';
SELECT o.order_id FROM cust_order o JOIN order_history oh ON o.order_id = oh.order_id JOIN order_status os ON oh.status_id = os.status_id WHERE os.status_value = 'cancelled';
SELECT os.status_value FROM cust_order co JOIN order_history oh ON co.order_id = oh.order_id JOIN order_status os ON oh.status_id = os.status_id WHERE SUBSTR(co.order_date, 1, 10) = '2022-04-10';
SELECT MAX(ol.price) AS highest_price FROM order_line ol JOIN cust_order co ON ol.order_id = co.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'The Prophet';
SELECT DISTINCT co.order_date FROM cust_order co JOIN order_line ol ON co.order_id = ol.order_id WHERE ol.price = 16.54;
SELECT b.title  FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Peter H. Smith';
SELECT COUNT(*)  FROM book  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE book.num_pages < 300 AND publisher.publisher_name = 'HarperCollins Publishers';
SELECT COUNT(*)  FROM book  WHERE language_id = (SELECT language_id FROM book_language WHERE language_name = 'Japanese');
SELECT AVG(b.num_pages) AS average_num_pages FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Jennifer Crusie';
SELECT      (SUM(CASE WHEN sm.method_name = 'International' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM      cust_order co JOIN      customer c ON co.customer_id = c.customer_id JOIN      shipping_method sm ON co.shipping_method_id = sm.method_id WHERE      c.first_name = 'Kaleena';
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'The Sorrows of Young Werther';
SELECT b.title FROM book b JOIN order_line ol ON b.book_id = ol.book_id JOIN cust_order co ON ol.order_id = co.order_id JOIN customer c ON co.customer_id = c.customer_id WHERE c.first_name = 'Ursola' AND c.last_name = 'Purdy';
SELECT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id WHERE b.num_pages = (SELECT MAX(num_pages) FROM book);
SELECT COUNT(b.book_id) AS available_books FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id JOIN publisher p ON b.publisher_id = p.publisher_id WHERE a.author_name = 'Akira Watanabe' AND p.publisher_name = 'Gravity';
SELECT a.street_number, a.street_name, a.city, c.country_name FROM customer AS cu JOIN customer_address AS ca ON cu.customer_id = ca.customer_id JOIN address AS a ON ca.address_id = a.address_id JOIN country AS c ON a.country_id = c.country_id WHERE cu.first_name = 'Ursola' AND cu.last_name = 'Purdy';
SELECT a.author_name  FROM author a  JOIN book_author ba ON a.author_id = ba.author_id  JOIN book b ON ba.book_id = b.book_id  WHERE b.title = 'The Mystery in the Rocky Mountains';
SELECT p.publisher_name  FROM book b  JOIN publisher p ON b.publisher_id = p.publisher_id  WHERE b.title = 'Girls\' Night In';
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id WHERE b.publication_date = (SELECT MIN(publication_date) FROM book);
SELECT      (SUM(CASE WHEN method_name = 'Express' THEN cost ELSE 0 END) -       SUM(CASE WHEN method_name = 'Priority' THEN cost ELSE 0 END)) AS cost_difference FROM      shipping_method WHERE      method_name IN ('Express', 'Priority');
SELECT COUNT(*) AS cancelled_orders FROM order_history oh JOIN order_status os ON oh.status_id = os.status_id WHERE os.status_value = 'Cancelled'  AND SUBSTR(oh.status_date, 1, 4) = '2022';
SELECT b.title  FROM book b  JOIN publisher p ON b.publisher_id = p.publisher_id  WHERE p.publisher_name = 'BBC Audiobooks';
SELECT COUNT(*) AS total_books FROM book WHERE SUBSTR(publication_date, 1, 4) = '2017';
SELECT isbn13  FROM book  WHERE title = 'The Mystery in the Rocky Mountains';
SELECT      (COUNT(CASE WHEN os.status_value = 'Returned' THEN 1 END) * 100.0 / COUNT(*)) AS return_percentage FROM      order_history oh JOIN      order_status os ON oh.status_id = os.status_id WHERE      SUBSTR(oh.status_date, 1, 4) = '2022';
SELECT      (COUNT(CASE WHEN as.address_status = 'Inactive' THEN 1 END) * 100.0 / COUNT(*)) AS inactive_percentage FROM      customer_address ca JOIN      address a ON ca.address_id = a.address_id JOIN      address_status as ON ca.status_id = as.status_id;
SELECT num_pages FROM book WHERE title = 'Seaward';
SELECT a.author_name  FROM author a  JOIN book_author ba ON a.author_id = ba.author_id  JOIN book b ON ba.book_id = b.book_id  WHERE b.title = 'First Things First';
SELECT b.title  FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Tom Clancy';
SELECT b.title  FROM book b  JOIN book_author ba ON b.book_id = ba.book_id  JOIN author a ON ba.author_id = a.author_id  WHERE a.author_name = 'Hirohiko Araki' AND b.publication_date = '2006-06-06';
SELECT p.publisher_name  FROM book b  JOIN publisher p ON b.publisher_id = p.publisher_id  WHERE b.title = "Hitchhiker's Guide To The Galaxy: The Filming of the Douglas Adams classic";
SELECT b.title  FROM book b  JOIN publisher p ON b.publisher_id = p.publisher_id  WHERE p.publisher_name = 'ADV Manga';
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN customer_address ca ON c.customer_id = ca.customer_id JOIN address a ON ca.address_id = a.address_id WHERE a.street_number = '55' AND a.street_name = 'Dorton Pass' AND a.city = 'Huangqiao';
SELECT c.country_name FROM address a JOIN country c ON a.country_id = c.country_id WHERE a.street_number = '9' AND a.street_name = 'Green Ridge Point' AND a.city = 'Arendal';
SELECT street_number, street_name, city  FROM address  WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'Poland')  LIMIT 10;
SELECT sm.method_name FROM cust_order co JOIN customer c ON co.customer_id = c.customer_id JOIN shipping_method sm ON co.shipping_method_id = sm.method_id WHERE c.first_name = 'Nicolette' AND c.last_name = 'Sadler' AND co.order_date = '2020-06-29 19:40:07';
SELECT b.title  FROM book b  JOIN book_language bl ON b.language_id = bl.language_id  WHERE bl.language_name = 'Arabic';
SELECT bl.language_name  FROM book b  JOIN book_language bl ON b.language_id = bl.language_id  WHERE b.title = 'El plan infinito';
SELECT      (COUNT(CASE WHEN a.author_name = 'Hirohiko Araki' THEN 1 END) * 100.0) / COUNT(b.book_id) AS percentage FROM      book b JOIN      publisher p ON b.publisher_id = p.publisher_id JOIN      book_author ba ON b.book_id = ba.book_id JOIN      author a ON ba.author_id = a.author_id WHERE      p.publisher_name = 'Viz Media';
SELECT AVG(b.num_pages) AS average_pages FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Zilpha Keatley Snyder';
SELECT CONCAT(first_name, ' ', last_name) AS full_name  FROM customer  WHERE email = 'ckupis4@tamu.edu';
SELECT title, num_pages  FROM book  ORDER BY num_pages DESC  LIMIT 1;
SELECT COUNT(b.book_id) AS number_of_books FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'A.J. Ayer';
SELECT b.title  FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'A.J. Ayer';
SELECT p.publisher_name  FROM book b  JOIN publisher p ON b.publisher_id = p.publisher_id  WHERE b.title = 'The Season: A Candid Look at Broadway';
SELECT      AVG(CASE WHEN bl.language_name = 'English' THEN 1 ELSE 0 END) AS average_english_books FROM      book b JOIN      book_language bl ON b.language_id = bl.language_id JOIN      publisher p ON b.publisher_id = p.publisher_id WHERE      p.publisher_name = 'Carole Marsh Mysteries';
SELECT title  FROM book  WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Free Press')  AND SUBSTR(publication_date, 1, 4) BETWEEN '1990' AND '2000'  ORDER BY num_pages DESC  LIMIT 1;
SELECT ol.price FROM book b JOIN order_line ol ON b.book_id = ol.book_id JOIN cust_order co ON ol.order_id = co.order_id WHERE b.title = 'The Servant Leader' AND SUBSTR(b.publication_date, 1, 4) = '2003';
SELECT a.street_number, a.street_name, a.city FROM customer c JOIN customer_address ca ON c.customer_id = ca.customer_id JOIN address a ON ca.address_id = a.address_id WHERE c.first_name = 'Kandy' AND ca.status_id = 1;
SELECT COUNT(DISTINCT ol.book_id) AS total_books_ordered FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id WHERE c.first_name = 'Kandy' AND c.last_name = 'Adamec';
SELECT COUNT(*)  FROM order_history oh JOIN order_status os ON oh.status_id = os.status_id WHERE os.status_value = 'Returned'  AND SUBSTR(oh.status_date, 1, 4) = '2022';
SELECT c.country_id, co.country_name FROM customer AS c JOIN customer_address AS ca ON c.customer_id = ca.customer_id JOIN address AS a ON ca.address_id = a.address_id JOIN country AS co ON a.country_id = co.country_id WHERE c.email = 'rturbitt2@geocities.jp';
SELECT publisher_name FROM publisher JOIN book ON publisher.publisher_id = book.publisher_id GROUP BY publisher_name ORDER BY COUNT(book.book_id) DESC LIMIT 1;
SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'A.J. Ayer' ORDER BY b.publication_date ASC LIMIT 1;
SELECT      (COUNT(CASE WHEN ol.price > 10 THEN ol.book_id END) * 100.0 / COUNT(ol.book_id)) AS percentage FROM      cust_order co JOIN      customer c ON co.customer_id = c.customer_id JOIN      order_line ol ON co.order_id = ol.order_id WHERE      c.first_name = 'Ruthanne' AND c.last_name = 'Vatini';
SELECT title  FROM book  WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'AK Press');
SELECT c.first_name, c.last_name FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id WHERE ol.price = (SELECT MIN(price) FROM order_line);
SELECT b.isbn13 FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE c.email = 'fsier3e@ihg.com';
SELECT DISTINCT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id JOIN order_line ol ON b.book_id = ol.book_id WHERE ol.price >= 19;
SELECT publisher.publisher_name  FROM book  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE book.isbn13 = '76092025986';
SELECT COUNT(*)  FROM book  JOIN publisher ON book.publisher_id = publisher.publisher_id  WHERE publisher.publisher_name = 'Birlinn'  AND SUBSTR(book.publication_date, 1, 4) = '2008'  AND book.num_pages BETWEEN 600 AND 700;
SELECT ol.price  FROM book b  JOIN order_line ol ON b.book_id = ol.book_id  WHERE b.isbn13 = '9780763628321';
SELECT b.num_pages  FROM cust_order co  JOIN order_line ol ON co.order_id = ol.order_id  JOIN book b ON ol.book_id = b.book_id  WHERE co.order_id = 1167;
SELECT b.title  FROM book b  JOIN book_language bl ON b.language_id = bl.language_id  WHERE bl.language_name = 'British English';
SELECT COUNT(*)  FROM book  WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Brava')  AND SUBSTR(publication_date, 1, 4) = '2006';
SELECT b.isbn13, ol.price  FROM book b  JOIN order_line ol ON b.book_id = ol.book_id  WHERE b.book_id = 7160;
SELECT b.title  FROM book b  JOIN order_line ol ON b.book_id = ol.book_id  WHERE ol.order_id = 931;
SELECT bl.language_name  FROM book b  JOIN book_language bl ON b.language_id = bl.language_id  WHERE b.title = 'Zorro';
SELECT DISTINCT c.email FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id WHERE ol.price BETWEEN 3 AND 5;
SELECT b.isbn13  FROM book b  JOIN order_line ol ON b.book_id = ol.book_id  WHERE ol.price = 7.5;
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Alan Lee';
SELECT SUM(b.num_pages)  FROM book b JOIN order_line ol ON b.book_id = ol.book_id JOIN cust_order co ON ol.order_id = co.order_id JOIN customer c ON co.customer_id = c.customer_id WHERE c.first_name = 'Mick' AND c.last_name = 'Sever';
SELECT a.author_name FROM author a JOIN book b ON a.author_id = b.book_id WHERE b.publication_date = (SELECT MAX(publication_date) FROM book);
SELECT      (COUNT(CASE WHEN bl.language_name = 'English' THEN b.book_id END) * 100.0 / COUNT(b.book_id)) AS percentage_english_books FROM      book b JOIN      publisher p ON b.publisher_id = p.publisher_id JOIN      book_language bl ON b.language_id = bl.language_id WHERE      p.publisher_name = 'Ace Book';
SELECT      (COUNT(CASE WHEN b.num_pages < 500 THEN 1 END) -       COUNT(CASE WHEN b.num_pages > 500 THEN 1 END)) AS page_difference FROM      book b JOIN      order_line ol ON b.book_id = ol.book_id WHERE      ol.price < 1;
SELECT bl.language_name, b.title FROM order_line ol JOIN book b ON ol.book_id = b.book_id JOIN book_language bl ON b.language_id = bl.language_id WHERE ol.price < (SELECT AVG(price) * 0.2 FROM order_line);
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name FROM employee e JOIN employee s ON e.supervisor = s.employee_id WHERE s.first_name = 'Darlisha' AND s.last_name = 'Jacobs' AND e.title = 'Sanitarian';
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE e.title = 'Sanitarian' AND i.inspection_date LIKE '2010-05%';
SELECT COUNT(*)  FROM inspection  WHERE employee_id = (SELECT employee_id FROM employee WHERE first_name = 'Joshua' AND last_name = 'Rosa')  AND inspection_date LIKE '2010%';
SELECT e.aka_name  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  JOIN employee emp ON i.employee_id = emp.employee_id  WHERE emp.first_name = 'Joshua' AND emp.last_name = 'Rosa';
SELECT COUNT(DISTINCT e.license_no)  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  WHERE i.inspection_date LIKE '2010%'  AND e.facility_type IN ('Restaurant', 'Cafeteria';
SELECT e.latitude, e.longitude FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_date = '2010-05-11';
SELECT COUNT(DISTINCT e.license_no)  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  WHERE i.inspection_date LIKE '2010%' AND e.ward = 42;
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE est.dba_name = 'Burbank' AND e.title = 'Sanitarian';
SELECT establishment.aka_name  FROM establishment  JOIN inspection ON establishment.license_no = inspection.license_no  WHERE inspection.results = 'Fail'  AND inspection.inspection_date LIKE '2010%';
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE est.dba_name = 'AMUNDSEN HIGH SCHOOL' AND i.inspection_date = '2010-05-11';
SELECT COUNT(*)  FROM inspection  WHERE employee_id = (SELECT employee_id FROM employee WHERE first_name = 'Joshua' AND last_name = 'Rosa')  AND results = 'Pass';
SELECT i2.inspection_date FROM inspection i1 JOIN inspection i2 ON i1.inspection_id = i2.followup_to JOIN establishment e ON i1.license_no = e.license_no WHERE e.dba_name = 'Azha Restaurant Inc.' AND i1.inspection_date = '2010-01-21';
SELECT COUNT(DISTINCT e.license_no) AS serious_issues_count FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_date LIKE '2010%' AND e.risk_level = 3;
SELECT AVG(inspection_count) AS average_inspections FROM (     SELECT COUNT(i.inspection_id) AS inspection_count     FROM inspection i     JOIN employee e ON i.employee_id = e.employee_id     WHERE i.inspection_date LIKE '2010%' AND e.salary > 70000     GROUP BY e.employee_id ) AS inspection_counts;
SELECT point_level  FROM inspection_point  WHERE Description = 'Refrigeration and metal stem thermometers provided and conspicuous';
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id = '48224';
SELECT COUNT(*)  FROM inspection  WHERE license_no IN (     SELECT license_no      FROM establishment      WHERE dba_name = 'All Style Buffet' AND facility_type = 'Restaurant' );
SELECT MIN(i.inspection_date) AS first_inspection_date FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.aka_name = 'WING HUNG CHOP SUEY RESTAURANT';
SELECT COUNT(DISTINCT e.license_no)  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  WHERE e.facility_type = 'Restaurant' AND i.inspection_date = '2015-05-08';
SELECT COUNT(*)  FROM violation v JOIN inspection_point ip ON v.point_id = ip.point_id WHERE v.inspection_id = '1454071' AND ip.category = 'Food Maintenance';
SELECT COUNT(v.point_id) AS number_of_violations FROM inspection i JOIN establishment e ON i.license_no = e.license_no JOIN violation v ON i.inspection_id = v.inspection_id WHERE e.dba_name = 'ROYAL THAI CUISINE' AND i.inspection_date = '2015-05-08';
SELECT COUNT(*)  FROM inspection  WHERE license_no IN (     SELECT license_no      FROM establishment      WHERE facility_type = 'Grocery Store' AND address = '3635 W DIVERSEY AVE' );
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id GROUP BY e.employee_id ORDER BY COUNT(i.inspection_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM inspection  WHERE results = 'Out of Business'  AND employee_id = (SELECT employee_id FROM employee WHERE first_name = 'Lisa' AND last_name = 'Tillman');
SELECT COUNT(DISTINCT e.license_no) AS establishment_count FROM employee emp JOIN inspection ins ON emp.employee_id = ins.employee_id WHERE emp.title = 'Sanitarian' AND emp.address = '5000 N Wolcott Ave' AND ins.inspection_date BETWEEN '2011-04-30' AND '2011-06-01';
SELECT e.phone  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.inspection_id = '634597' AND e.title = 'Sanitarian';
SELECT salary  FROM employee  WHERE employee_id = (     SELECT employee_id      FROM inspection      GROUP BY employee_id      ORDER BY COUNT(employee_id) DESC      LIMIT 1 );
SELECT AVG(inspection_count) AS average_inspections FROM (     SELECT COUNT(i.inspection_id) AS inspection_count     FROM inspection i     JOIN establishment e ON i.license_no = e.license_no     WHERE e.risk_level = '3' AND e.facility_type = 'TAVERN'     GROUP BY e.license_no ) AS inspection_counts;
SELECT      (SUM(CASE WHEN results = 'Pass' THEN 1 ELSE 0 END) * 1.0 / COUNT(inspection_id)) AS pass_rate FROM      inspection  JOIN      establishment ON inspection.license_no = establishment.license_no WHERE      establishment.dba_name = 'POCKETS'      AND establishment.facility_type = 'Restaurant';
SELECT COUNT(*)  FROM employee  WHERE title = 'Sanitarian' AND city = 'Chicago' AND zip = '60617';
SELECT aka_name FROM establishment WHERE address = '2903 W IRVING PARK RD';
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM employee WHERE salary = (SELECT MIN(salary) FROM employee);
SELECT COUNT(*)  FROM establishment  WHERE dba_name = 'HOMEMADE PIZZA' AND risk_level = 2;
SELECT COUNT(*)  FROM violation  WHERE point_id = 3 AND fine = 500;
SELECT COUNT(*)  FROM employee  WHERE supervisor = (SELECT employee_id FROM employee WHERE first_name = 'Gregory' AND last_name = 'Cardenas');
SELECT MIN(i.inspection_date) AS first_inspection_date FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.dba_name = 'RENALDI''S PIZZA';
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_date LIKE '2016-03%' GROUP BY e.employee_id ORDER BY COUNT(i.inspection_id) DESC LIMIT 1;
SELECT establishment.dba_name FROM establishment JOIN inspection ON establishment.license_no = inspection.license_no WHERE inspection.results = 'Pass w/ Conditions'  AND inspection.inspection_date LIKE '2012-05%';
SELECT COUNT(DISTINCT e.license_no) AS passed_businesses FROM inspection i JOIN employee e ON i.employee_id = e.employee_id WHERE i.inspection_type = 'Short Form Complaint'    AND i.results = 'Pass'    AND e.first_name = 'David'    AND e.last_name = 'Hodges';
SELECT COUNT(DISTINCT e.license_no) AS business_count FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.ward = 42    AND i.results = 'Fail'    AND i.inspection_date BETWEEN '2010-01-01' AND '2015-12-31' GROUP BY e.license_no HAVING COUNT(i.results) >= 5;
SELECT salary  FROM employee  WHERE employee_id = (     SELECT employee_id      FROM inspection      GROUP BY employee_id      ORDER BY COUNT(inspection_id) DESC      LIMIT 1 );
SELECT e.aka_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN violation v ON i.inspection_id = v.inspection_id WHERE i.inspection_date LIKE '2014%' GROUP BY e.aka_name ORDER BY SUM(v.fine) DESC LIMIT 1;
SELECT e.latitude, e.longitude FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results = 'Fail' GROUP BY e.license_no ORDER BY COUNT(i.results) DESC LIMIT 1;
SELECT v.inspector_comment FROM inspection i JOIN establishment e ON i.license_no = e.license_no JOIN violation v ON i.inspection_id = v.inspection_id WHERE e.dba_name = 'TAQUERIA LA FIESTA' AND i.inspection_date = '2010-01-25';
SELECT SUM(v.fine) AS total_fine FROM violation v JOIN inspection i ON v.inspection_id = i.inspection_id JOIN establishment e ON i.license_no = e.license_no WHERE e.dba_name = 'RON OF JAPAN INC' AND i.inspection_date LIKE '2014-02%';
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE est.dba_name = 'TAQUERIA LA PAZ';
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN violation v ON i.inspection_id = v.inspection_id GROUP BY e.employee_id ORDER BY SUM(v.fine) DESC LIMIT 1;
SELECT AVG(inspection_count) AS average_inspections, CONCAT(e.first_name, ' ', e.last_name) AS employee_name FROM (     SELECT e.employee_id, e.first_name, e.last_name, COUNT(i.inspection_id) AS inspection_count     FROM employee e     JOIN inspection i ON e.employee_id = i.employee_id     WHERE e.title = 'Sanitarian'     ORDER BY e.salary DESC     LIMIT 5 ) AS top_employees GROUP BY employee_name;
WITH inspection_counts AS (     SELECT          e.dba_name,         COUNT(i.inspection_id) AS total_inspections,         SUM(CASE WHEN i.results = 'Pass' THEN 1 ELSE 0 END) AS passed_inspections,         SUM(CASE WHEN i.results = 'Fail' THEN 1 ELSE 0 END) AS failed_inspections     FROM          establishment e     JOIN          inspection i ON e.license_no = i.license_no     GROUP BY          e.dba_name ), max_inspection AS (     SELECT          dba_name,         total_inspections,         passed_inspections,         failed_inspections     FROM          inspection_counts     WHERE          total_inspections = (SELECT MAX(total_inspections) FROM inspection_counts) ) SELECT      dba_name,     total_inspections,     (passed_inspections * 100.0 / total_inspections) AS percentage_passed,     (failed_inspections * 100.0 / total_inspections) AS percentage_failed FROM      max_inspection;
SELECT last_name  FROM employee  WHERE address = '7211 S Hermitage Ave' AND city = 'Chicago' AND state = 'IL';
SELECT e.dba_name, emp.first_name, emp.last_name FROM inspection i JOIN establishment e ON i.license_no = e.license_no JOIN employee emp ON i.employee_id = emp.employee_id WHERE i.inspection_id = 44256 AND i.inspection_date = '2010-05-05';
SELECT e.address FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.facility_type = 'School'    AND i.results = 'Pass'    AND i.inspection_date LIKE '2010-03%';
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_type = 'Canvass' AND i.inspection_date = '2010-03-09';
SELECT inspection_id  FROM inspection  WHERE license_no IN (     SELECT license_no      FROM establishment      WHERE dba_name = 'PIZZA RUSTICA, INC.' );
SELECT COUNT(DISTINCT e.license_no) AS restaurant_count FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.facility_type = 'Restaurant'   AND e.risk_level = (SELECT MAX(risk_level) FROM establishment)   AND i.results = 'Pass';
SELECT DISTINCT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN violation v ON i.inspection_id = v.inspection_id JOIN inspection_point ip ON v.point_id = ip.point_id WHERE ip.category = 'Display of Inspection Report Summary';
SELECT e.title  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.inspection_id = 60332;
SELECT COUNT(DISTINCT e.license_no) AS failed_restaurants FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.facility_type = 'Restaurant'   AND e.risk_level = (SELECT MIN(risk_level) FROM establishment WHERE facility_type = 'Restaurant')   AND i.inspection_type = 'Complaint'   AND i.results = 'Fail';
SELECT v.fine, CONCAT(e.address, ', ', e.city, ', ', e.state) AS complete_address FROM violation v JOIN inspection i ON v.inspection_id = i.inspection_id JOIN establishment e ON i.license_no = e.license_no WHERE i.inspection_id = 48216;
SELECT DISTINCT i.inspection_id FROM inspection i JOIN violation v ON i.inspection_id = v.inspection_id JOIN inspection_point ip ON v.point_id = ip.point_id WHERE ip.point_level = 'Critical' AND v.fine = 500 AND v.inspector_comment = 'CDI ON 5-17-10';
SELECT ip.Description, v.inspector_comment FROM inspection_point ip JOIN violation v ON ip.point_id = v.point_id WHERE v.inspection_id = 164795;
SELECT v.inspector_comment, ip.code FROM violation v JOIN inspection_point ip ON v.point_id = ip.point_id WHERE v.inspection_id = 54216 AND v.point_id = 34;
SELECT      (COUNT(CASE WHEN e.risk_level = (SELECT MAX(risk_level) FROM establishment) THEN e.license_no END) * 100.0 / COUNT(e.license_no)) AS percentage FROM      establishment e JOIN      inspection i ON e.license_no = i.license_no WHERE      i.results = 'Fail';
SELECT      ABS(         (SELECT COUNT(DISTINCT e.employee_id)           FROM employee e           JOIN inspection i ON e.employee_id = i.employee_id           JOIN violation v ON i.inspection_id = v.inspection_id           WHERE e.salary BETWEEN 75000 AND 85000 AND v.fine = 100) -          (SELECT COUNT(DISTINCT e.employee_id)           FROM employee e           JOIN inspection i ON e.employee_id = i.employee_id           JOIN violation v ON i.inspection_id = v.inspection_id           WHERE e.salary BETWEEN 75000 AND 85000 AND v.fine = 500)     ) AS difference;
SELECT COUNT(*)  FROM inspection  WHERE inspection_date LIKE '2011-01%';
SELECT COUNT(*)  FROM inspection  WHERE results = 'Fail' AND inspection_date LIKE '2014%';
SELECT      (COUNT(CASE WHEN v.fine = 100 THEN i.inspection_id END) * 100.0 / COUNT(i.inspection_id)) AS percentage_minor_fine FROM      inspection i LEFT JOIN      violation v ON i.inspection_id = v.inspection_id;
SELECT ip.point_id, v.fine FROM inspection i JOIN violation v ON i.inspection_id = v.inspection_id JOIN inspection_point ip ON v.point_id = ip.point_id WHERE i.inspection_date = '2010-08-07';
SELECT COUNT(*)  FROM inspection_point  WHERE category = 'Personnel';
SELECT e.dba_name, i.results FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.city = 'BURNHAM';
SELECT      SUM(CASE WHEN ip.category = 'Toxic Items' THEN 1 ELSE 0 END) AS toxic_items_inspections,     SUM(CASE WHEN ip.category = 'No Smoking Regulations' THEN 1 ELSE 0 END) AS no_smoking_regulations_inspections FROM      inspection i JOIN      violation v ON i.inspection_id = v.inspection_id JOIN      inspection_point ip ON v.point_id = ip.point_id;
SELECT e.dba_name  FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN employee emp ON i.employee_id = emp.employee_id WHERE emp.first_name = 'Sarah' AND emp.last_name = 'Lindsey' AND i.inspection_date = '2012-11-20';
SELECT ip.category, v.fine FROM inspection i JOIN employee e ON i.employee_id = e.employee_id JOIN violation v ON i.inspection_id = v.inspection_id JOIN inspection_point ip ON v.point_id = ip.point_id WHERE e.first_name = 'Lisa' AND e.last_name = 'Tillman'  AND i.inspection_date LIKE '2014-01%';
SELECT COUNT(DISTINCT i.inspection_id) AS total_inspections FROM inspection i JOIN violation v ON i.inspection_id = v.inspection_id JOIN inspection_point ip ON v.point_id = ip.point_id WHERE ip.category = 'Display of Inspection Report Summary';
SELECT inspection_type, results  FROM inspection  JOIN establishment ON inspection.license_no = establishment.license_no  WHERE establishment.dba_name = 'Riverwalk café';
SELECT e.first_name, e.last_name, i.results FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE est.dba_name = 'JEAN SAMOCKI';
SELECT SUM(v.fine) AS total_fine FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN violation v ON i.inspection_id = v.inspection_id WHERE e.dba_name = 'HACIENDA LOS TORRES'    AND e.ward = 36    AND i.results = 'Fail';
SELECT SUM(v.fine) AS total_fine FROM violation v JOIN inspection_point ip ON v.point_id = ip.point_id WHERE ip.category = 'Food Equipment and Utensil';
SELECT e.dba_name, e.latitude, e.longitude FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_date = '2013-07-29' AND i.results = 'Fail';
SELECT      (COUNT(CASE WHEN i.results LIKE 'Pass%' THEN 1 END) * 100.0 / COUNT(i.inspection_id)) AS percentage_verified_quality,     COUNT(DISTINCT CASE WHEN e.city = 'CHICAGO' AND i.results LIKE 'Pass%' THEN e.license_no END) AS chicago_businesses FROM      inspection i JOIN      establishment e ON i.license_no = e.license_no;
SELECT AVG(inspections_per_year) AS average_inspections_per_year FROM (     SELECT COUNT(inspection_id) / 8 AS inspections_per_year     FROM inspection T1     JOIN employee T2 ON T1.employee_id = T2.employee_id     WHERE T2.first_name = 'Jessica' AND T2.last_name = 'Anthony'     AND T1.inspection_date > '2010-01-01' AND T1.inspection_date < '2017-12-31' ) AS yearly_inspections;
SELECT e.first_name  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.inspection_id = 48225;
SELECT e.address  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.inspection_id = 52238;
SELECT e.last_name  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.inspection_id = 52238;
SELECT i.results  FROM inspection i  JOIN employee e ON i.employee_id = e.employee_id  WHERE e.first_name = 'Thomas' AND e.last_name = 'Langley';
SELECT e.address  FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_date = '2010-11-05';
SELECT e.phone FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_type = 'Canvass';
SELECT title  FROM employee  WHERE employee_id = (SELECT employee_id FROM inspection WHERE inspection_id = 52269);
SELECT i.results  FROM inspection i  JOIN establishment e ON i.license_no = e.license_no  WHERE e.dba_name = 'XANDO COFFEE & BAR / COSI SANDWICH BAR';
SELECT inspection_type  FROM inspection  WHERE license_no IN (     SELECT license_no      FROM establishment      WHERE dba_name = 'JOHN SCHALLER' );
SELECT e.dba_name  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  WHERE i.inspection_type = 'License';
SELECT COUNT(*)  FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE i.inspection_date LIKE '2010%' AND e.risk_level = 3;
SELECT DISTINCT e.dba_name  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  WHERE i.results IN ('Pass', 'Pass w/Conditions');
SELECT SUM(e.salary) AS total_salary FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id BETWEEN 52270 AND 52272;
SELECT AVG(e.salary) AS average_salary FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_type = 'License Re-Inspection';
SELECT e.zip, i.results  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  WHERE e.license_no = '1222441';
SELECT MIN(i.inspection_date) AS first_inspection_date FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.dba_name = 'JOHN SCHALLER' AND i.inspection_date LIKE '2010%';
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.license_no = '1334073';
SELECT e.dba_name  FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN employee emp ON i.employee_id = emp.employee_id WHERE emp.first_name = 'Joshua' AND emp.last_name = 'Rosa';
SELECT COUNT(DISTINCT e.employee_id) FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE e.salary > 70000 AND i.results = 'Fail';
SELECT DISTINCT e.dba_name  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  WHERE i.results = 'Pass' AND i.inspection_date LIKE '2010%';
SELECT e.dba_name  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  JOIN employee emp ON i.employee_id = emp.employee_id  WHERE emp.first_name = 'Joshua' AND emp.last_name = 'Rosa';
SELECT COUNT(*)  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  WHERE e.facility_type = 'Tavern'  AND i.results = 'Fail'  AND i.inspection_date LIKE '2010-07%';
SELECT e.risk_level  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  JOIN employee emp ON i.employee_id = emp.employee_id  WHERE emp.first_name = 'Bob' AND emp.last_name = 'Benson';
SELECT e.dba_name, i.results FROM inspection i JOIN employee emp ON i.employee_id = emp.employee_id JOIN establishment e ON i.license_no = e.license_no WHERE emp.first_name = 'Bob' AND emp.last_name = 'Benson' AND i.inspection_date LIKE '2010%';
SELECT e.title  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.license_no = '1576687';
SELECT COUNT(*)  FROM inspection_point  WHERE point_level = 'Serious' AND fine = 0;
SELECT (SUM(CASE WHEN v.fine = 250 THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT e.license_no)) AS percentage FROM establishment e LEFT JOIN inspection i ON e.license_no = i.license_no LEFT JOIN violation v ON i.inspection_id = v.inspection_id;
SELECT (COUNT(CASE WHEN e.risk_level = 1 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results = 'Pass';
SELECT address, city, state  FROM employee  WHERE first_name = 'Standard' AND last_name = 'Murray';
SELECT facility_type  FROM establishment  WHERE dba_name = 'Kinetic Playground';
SELECT salary FROM employee WHERE first_name = 'Jessica' AND last_name = 'Anthony';
SELECT dba_name  FROM establishment  WHERE facility_type = 'Restaurant'  AND latitude = 41.9532864854  AND longitude = -87.7673790701422;
SELECT COUNT(*) AS total_supervisors FROM employee WHERE title = 'Supervisor';
SELECT address, city, state, zip  FROM establishment  WHERE dba_name = 'OLD TIMERS REST & LOUNGE'  AND city = 'CHICAGO'  AND facility_type = 'Restaurant';
SELECT COUNT(*)  FROM employee  WHERE city = 'Hoffman Estates' AND state = 'IL';
SELECT COUNT(*)  FROM establishment  WHERE risk_level = (SELECT MAX(risk_level) FROM establishment);
SELECT first_name, last_name  FROM employee  WHERE salary = 82700;
SELECT e.last_name  FROM employee e  JOIN inspection i ON e.employee_id = i.employee_id  WHERE i.inspection_id = 52256;
SELECT e.dba_name  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  JOIN violation v ON i.inspection_id = v.inspection_id  WHERE e.facility_type = 'Tavern' AND v.fine = 100;
SELECT ip.point_level FROM inspection_point ip JOIN violation v ON ip.point_id = v.point_id WHERE v.fine = 0;
SELECT e.facility_type, e.license_no FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.risk_level = (SELECT MIN(risk_level) FROM establishment) AND i.results = 'Fail';
SELECT i.results  FROM inspection i JOIN employee e ON i.employee_id = e.employee_id WHERE i.inspection_date = '2010-02-24' AND e.first_name = 'Arnold' AND e.last_name = 'Holder';
SELECT COUNT(DISTINCT e.license_no) AS failed_restaurants FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.facility_type = 'Restaurant'    AND i.results = 'Fail'    AND i.inspection_date LIKE '2010-04%';
SELECT inspection_id  FROM inspection  WHERE employee_id IN (     SELECT employee_id      FROM employee      WHERE first_name = 'Rosemary' AND last_name = 'Kennedy' );
SELECT i.inspection_type  FROM inspection i  JOIN employee e ON i.employee_id = e.employee_id  WHERE i.inspection_date = '2010-07-07'  AND e.first_name = 'Lisa'  AND e.last_name = 'Tillman';
SELECT i.inspection_id  FROM inspection i JOIN violation v ON i.inspection_id = v.inspection_id JOIN inspection_point ip ON v.point_id = ip.point_id WHERE v.inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA'  AND ip.code IN ('7-38-030', '015', '010 (A)', '005 (A)');
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.risk_level = (SELECT MAX(risk_level) FROM establishment) AND i.results = 'Fail';
SELECT i.inspection_id  FROM inspection i JOIN employee e ON i.employee_id = e.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE e.first_name = 'David' AND e.last_name = 'Hodges'  AND est.dba_name = 'KAMAYAN EXPRESS';
SELECT MIN(salary) AS min_salary, MAX(salary) AS max_salary FROM employee WHERE employee_id = (SELECT employee_id FROM inspection WHERE inspection_id = 58424);
SELECT v.inspection_id FROM violation v JOIN inspection_point ip ON v.point_id = ip.point_id WHERE v.inspector_comment = 'A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served. NO CERTIFIED FOOD MANAGER ON DUTY AT THIS TIME FOODS ARE COOKED AND SERVED SERIOUS CITATION ISSUED' AND ip.category = 'Personnel';
SELECT COUNT(DISTINCT e.license_no) AS grocery_stores_paid_250_fine FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN violation v ON i.inspection_id = v.inspection_id WHERE e.facility_type = 'Grocery Store' AND v.fine = 250;
SELECT ip.category  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  JOIN violation v ON i.inspection_id = v.inspection_id  JOIN inspection_point ip ON v.point_id = ip.point_id  WHERE e.dba_name = 'J & J FOOD';
SELECT DISTINCT e.dba_name  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  WHERE e.facility_type = 'Tavern'  AND i.results = 'Fail'  AND i.inspection_date LIKE '2010-01%';
SELECT COUNT(DISTINCT i.inspection_id) AS serious_inspections_no_fines FROM inspection i JOIN violation v ON i.inspection_id = v.inspection_id JOIN inspection_point ip ON v.point_id = ip.point_id WHERE ip.point_level = 'Serious' AND v.fine = 0;
SELECT e.dba_name  FROM establishment e  JOIN inspection i ON e.license_no = i.license_no  JOIN inspection_point ip ON i.inspection_id = ip.point_id  WHERE ip.category = 'No Smoking Regulations';
SELECT      (COUNT(CASE WHEN results = 'Pass' THEN inspection_id END) -       COUNT(CASE WHEN results = 'Fail' THEN inspection_id END)) AS difference FROM      inspection  JOIN      establishment ON inspection.license_no = establishment.license_no WHERE      inspection.inspection_type = 'Canvass'      AND establishment.facility_type = 'Restaurant';
SELECT e.first_name, e.last_name FROM employee e WHERE e.salary > (SELECT AVG(salary) * 0.7 FROM employee) AND e.employee_id IN (     SELECT i.employee_id     FROM inspection i     WHERE i.results = 'Fail'      AND i.inspection_date LIKE '2010-02%' );
SELECT      (COUNT(CASE WHEN e.facility_type = 'Restaurant' THEN 1 END) * 100.0 / COUNT(*)) AS restaurant_percentage FROM      establishment e JOIN      inspection i ON e.license_no = i.license_no JOIN      violation v ON i.inspection_id = v.inspection_id WHERE      v.fine = 500;
SELECT c.name  FROM coins c  JOIN historical h ON c.id = h.coin_id  WHERE YEAR(h.date) = 2018  ORDER BY h.market_cap DESC  LIMIT 1;
SELECT SUM(volume_24h) AS total_value FROM historical h JOIN coins c ON h.coin_id = c.id WHERE c.name = 'Argentum' AND h.date = '2016-10-11';
SELECT AVG(price) AS average_price FROM historical h JOIN coins c ON h.coin_id = c.id WHERE c.name = 'Zetacoin' AND h.date BETWEEN '2013-11-01' AND '2013-11-07';
SELECT time_high, time_low  FROM historical h  JOIN coins c ON h.coin_id = c.id  WHERE c.name = 'WRAP'  AND MONTH(h.date) = 8  AND YEAR(h.date) = 2016;
SELECT date  FROM historical  WHERE coin_id = (SELECT id FROM coins WHERE name = 'DigixDAO')  AND price = (SELECT MAX(price) FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'DigixDAO'));
SELECT c.name, h.date, h.price FROM historical h JOIN coins c ON h.coin_id = c.id ORDER BY h.percent_change_24h DESC LIMIT 1;
SELECT AVG(circulating_supply) AS average_monthly_circulating_supply FROM historical h JOIN coins c ON h.coin_id = c.id WHERE c.name = 'Frozen' AND h.date BETWEEN '2014-01-01' AND '2014-12-31' GROUP BY DATE_FORMAT(h.date, '%Y-%m');
SELECT c.id, c.name, MAX(h.date) AS last_transaction_date FROM coins c LEFT JOIN historical h ON c.id = h.coin_id WHERE c.status = 'inactive' GROUP BY c.id, c.name;
SELECT price  FROM historical  WHERE coin_id = (SELECT id FROM coins WHERE slug = 'bitcoin')  AND YEAR(date) = 2016;
SELECT date, price  FROM historical  WHERE coin_id = (SELECT id FROM coins WHERE slug = 'bitcoin')  ORDER BY price ASC  LIMIT 1;
SELECT c.name, c.status FROM coins c JOIN historical h ON c.id = h.coin_id GROUP BY c.id HAVING AVG(h.price) > 1000;
SELECT c.name, h.date FROM historical h JOIN coins c ON h.coin_id = c.id ORDER BY h.percent_change_1h ASC LIMIT 1;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE c.category = 'token' ORDER BY (h.high - h.low) DESC LIMIT 1;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2013-06-22' AND h.percent_change_24h > (     SELECT AVG(percent_change_24h)     FROM historical     WHERE date = '2013-06-22' );
SELECT c.name  FROM coins c  JOIN historical h ON c.id = h.coin_id  WHERE h.cmc_rank = 1 AND h.date = '2013-04-28';
SELECT price  FROM historical  WHERE coin_id = (SELECT id FROM coins WHERE slug = 'bitcoin')  AND date = '2013-04-28';
SELECT c.name  FROM coins c  JOIN historical h ON c.id = h.coin_id  WHERE h.date = '2013-05-03' AND h.open IS NULL;
SELECT close  FROM historical  WHERE coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin')  AND date = '2013-04-29';
SELECT time_high  FROM historical  WHERE coin_id = (SELECT id FROM coins WHERE slug = 'bitcoin')  AND date = '2013-04-29'  AND high = (SELECT MAX(high) FROM historical WHERE coin_id = (SELECT id FROM coins WHERE slug = 'bitcoin') AND date = '2013-04-29');
SELECT MAX(high - low) AS max_profit FROM historical WHERE coin_id = (SELECT id FROM coins WHERE slug = 'bitcoin') AND date = '2013-04-28';
SELECT MAX(max_supply) - MAX(total_supply) AS bitcoins_burned FROM historical WHERE coin_id = (SELECT id FROM coins WHERE slug = 'bitcoin') AND date <= '2013-04-28';
SELECT c.name, h.volume_24h FROM historical h JOIN coins c ON h.coin_id = c.id WHERE h.date = '2016-01-08' ORDER BY h.volume_24h DESC LIMIT 1;
SELECT c.name  FROM coins c  JOIN historical h ON c.id = h.coin_id  WHERE h.date = '2013-04-28' AND h.total_supply > 10000000;
SELECT      CASE          WHEN h.percent_change_7d > 0 THEN 'increased'          WHEN h.percent_change_7d < 0 THEN 'decreased'          ELSE 'no change'      END AS price_trend FROM      historical h JOIN      coins c ON h.coin_id = c.id WHERE      c.slug = 'bitcoin' AND h.date = '2013-05-05';
SELECT c.name, h.circulating_supply FROM historical h JOIN coins c ON h.coin_id = c.id WHERE h.date = '2013-04-28' AND c.name IN ('Bitcoin', 'Litecoin') ORDER BY h.circulating_supply DESC LIMIT 1;
SELECT price FROM historical WHERE coin_id = (SELECT id FROM coins WHERE slug = 'bitcoin') AND date = '2013-04-28';
SELECT AVG(price) AS average_price FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin') AND YEAR(date) = 2013;
SELECT      (SUM(max_supply) - SUM(total_supply)) / SUM(total_supply) * 100 AS percentage_burned FROM      historical WHERE      coin_id = (SELECT id FROM coins WHERE slug = 'bitcoin')      AND date < '2018-04-28';
SELECT name FROM coins WHERE status = 'extinct';
SELECT description FROM coins WHERE name = 'BitBar';
SELECT name  FROM coins  WHERE YEAR(date_added) = 2013 AND MONTH(date_added) = 5;
SELECT name, symbol FROM coins WHERE date_added LIKE '2013-06-14%';
SELECT name  FROM coins  WHERE status = 'untracked' AND YEAR(date_added) = 2014;
SELECT name  FROM coins  WHERE LENGTH(tag_names) - LENGTH(REPLACE(tag_names, ',', '')) = 2;
SELECT c.name  FROM coins c  JOIN historical h ON c.id = h.coin_id  ORDER BY h.price DESC  LIMIT 1;
SELECT c.name  FROM coins c  JOIN historical h ON c.id = h.coin_id  WHERE h.cmc_rank = 1 AND h.date = '2013-04-29';
SELECT date, low AS lowest_price FROM historical WHERE coin_id = (SELECT id FROM coins WHERE slug = 'bitcoin') ORDER BY low ASC LIMIT 1;
SELECT c.name  FROM coins c  JOIN historical h ON c.id = h.coin_id  ORDER BY h.volume_24h DESC  LIMIT 1;
SELECT DISTINCT c.name  FROM coins c  JOIN historical h ON c.id = h.coin_id  WHERE h.open IS NULL AND YEAR(h.date) = 2013 AND MONTH(h.date) = 5;
SELECT MAX(close) AS highest_closed_price FROM historical WHERE coin_id = (SELECT id FROM coins WHERE slug = 'chncoin');
SELECT date  FROM historical  JOIN coins ON historical.coin_id = coins.id  WHERE coins.name = 'Peercoin' AND historical.cmc_rank = 5;
SELECT date, MAX(market_cap) AS max_market_cap FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Devcoin') GROUP BY date ORDER BY max_market_cap DESC LIMIT 1;
SELECT c.name  FROM coins c  JOIN historical h ON c.id = h.coin_id  WHERE h.date = '2014-01-01' AND h.cmc_rank <= 5;
SELECT date FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Lebowskis') AND open IS NULL;
SELECT date, MAX(price) AS highest_price FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Terracoin') GROUP BY date ORDER BY highest_price DESC LIMIT 1;
SELECT COUNT(*)  FROM historical h  JOIN coins c ON h.coin_id = c.id  WHERE c.name = 'Bytecoin'  AND YEAR(h.date) = 2013  AND MONTH(h.date) = 6;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2013-04-28' AND h.price > (     SELECT AVG(price)     FROM historical     WHERE date = '2013-04-28' );
SELECT      COUNT(*) * 100.0 / (SELECT COUNT(*) FROM coins) AS percentage,     GROUP_CONCAT(c.name) AS coin_names FROM      historical h JOIN      coins c ON h.coin_id = c.id WHERE      h.date = '2013-05-29' AND h.percent_change_1h > 0;
SELECT COUNT(*)  FROM Employees  WHERE TitleOfCourtesy = 'Dr.';
SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM Employees WHERE EmployeeID = (SELECT ReportsTo FROM Employees WHERE FirstName = 'Nancy' AND LastName = 'Davolio');
SELECT HomePhone FROM Employees WHERE FirstName = 'Nancy' AND LastName = 'Davolio';
SELECT COUNT(*)  FROM Employees  WHERE ReportsTo = (SELECT EmployeeID FROM Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller');
SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM Employees WHERE Salary = (SELECT MAX(Salary) FROM Employees);
SELECT      (SELECT SUM(Salary) FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew') -      (SELECT SUM(Salary) FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy') AS SalaryDifference;
SELECT COUNT(*)  FROM Employees  WHERE Title = 'Sales Representative' AND Country = 'UK';
SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM Employees WHERE EmployeeID IN (     SELECT EmployeeID     FROM Orders     WHERE CustomerID IN (         SELECT CustomerID         FROM Customers         WHERE City = 'Hollis'     ) );
SELECT COUNT(DISTINCT TerritoryID)  FROM Territories  WHERE EmployeeID = (SELECT EmployeeID FROM Employees WHERE FirstName = 'Nancy' AND LastName = 'Davolio');
SELECT Territories.TerritoryDescription FROM Territories JOIN Employees ON Territories.EmployeeID = Employees.EmployeeID WHERE Employees.FirstName = 'Nancy' AND Employees.LastName = 'Davolio';
SELECT COUNT(DISTINCT Territories.TerritoryID) AS TotalTerritories FROM Employees JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID JOIN Customers ON Orders.CustomerID = Customers.CustomerID JOIN Territories ON Customers.CustomerID = Territories.CustomerID WHERE Employees.City = 'London';
SELECT t.TerritoryDescription FROM Territories t JOIN Employees e ON t.EmployeeID = e.EmployeeID WHERE e.ReportsTo = (SELECT EmployeeID FROM Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller');
SELECT COUNT(DISTINCT e.EmployeeID)  FROM Employees e JOIN Territories t ON e.EmployeeID = t.EmployeeID WHERE e.Country = 'UK' GROUP BY e.EmployeeID HAVING COUNT(DISTINCT t.TerritoryID) > 4;
SELECT COUNT(*)  FROM Territories  WHERE RegionDescription = 'Eastern';
SELECT TerritoryDescription  FROM Territories  WHERE RegionDescription = 'Eastern';
SELECT COUNT(*)  FROM Employees  WHERE EmployeeID IN (SELECT DISTINCT EmployeeID FROM Orders WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE RegionDescription = 'Eastern'));
SELECT e.HomePhone FROM Employees e JOIN Territories t ON e.EmployeeID = t.EmployeeID WHERE t.RegionDescription = 'Eastern';
SELECT      (SELECT COUNT(*) FROM Territories WHERE RegionDescription = 'Eastern') -      (SELECT COUNT(*) FROM Territories WHERE RegionDescription = 'Southern') AS TerritoryDifference;
SELECT p.ProductName FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE od.OrderID = 10248;
SELECT od.Quantity  FROM OrderDetails od  JOIN Products p ON od.ProductID = p.ProductID  WHERE p.ProductName = 'Ikura' AND od.OrderID = 10273;
SELECT SUM(P.Price * OD.Quantity) AS TotalPrice FROM OrderDetails OD JOIN Products P ON OD.ProductID = P.ProductID JOIN Orders O ON OD.OrderID = O.OrderID WHERE P.ProductName = 'Ikura' AND O.OrderID = 10273;
SELECT SUM(p.UnitsInStock + p.UnitsOnOrder) AS TotalProduction FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE od.OrderID = 10248 ORDER BY od.Quantity DESC LIMIT 1;
SELECT P.ProductName, MAX(P.ReorderLevel) AS HighestSatisfaction FROM Products P JOIN OrderDetails OD ON P.ProductID = OD.ProductID WHERE OD.OrderID = 10248 GROUP BY P.ProductName ORDER BY HighestSatisfaction DESC LIMIT 1;
SELECT COUNT(*) AS OrderCount FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Tofu';
SELECT DISTINCT o.OrderID FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1;
SELECT COUNT(DISTINCT o.OrderID) AS OrderCount FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Ikura' AND od.UnitPrice < p.Price;
SELECT Suppliers.SupplierName  FROM Products  JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID  WHERE Products.ProductName = 'Aniseed Syrup';
SELECT p.ProductName FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.Country = 'Japan';
SELECT DISTINCT s.Phone FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock < p.UnitsOnOrder;
SELECT COUNT(*)  FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 1 AND s.Country = 'USA';
SELECT s.SupplierName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.Unit = (SELECT MAX(Unit) FROM Products);
SELECT AVG(Salary) AS AverageSalary FROM Employees WHERE EmployeeID IN (     SELECT EmployeeID     FROM Territories     GROUP BY EmployeeID     HAVING COUNT(TerritoryID) > 4 );
SELECT      ( (p.Price - od.UnitPrice) / p.Price ) * 100 AS PercentageLower FROM      Products p JOIN      OrderDetails od ON p.ProductID = od.ProductID JOIN      Orders o ON od.OrderID = o.OrderID WHERE      p.ProductName = 'Ikura' AND o.OrderID = 10273;
SELECT AVG(od.Quantity) AS AverageQuantity FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Ikura';
SELECT TOP 1 P.ProductID, P.ProductName,         MAX(CAST(OD.Quantity AS FLOAT) / P.UnitsInStock) AS Ratio FROM OrderDetails OD JOIN Products P ON OD.ProductID = P.ProductID JOIN Orders O ON OD.OrderID = O.OrderID WHERE O.OrderID = 10248 GROUP BY P.ProductID, P.ProductName ORDER BY Ratio DESC;
SELECT FirstName, LastName  FROM Employees  ORDER BY BirthDate DESC  LIMIT 1;
SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM Employees ORDER BY BirthDate DESC LIMIT 1;
SELECT COUNT(*) AS NumberOfOrders FROM Orders WHERE EmployeeID = (SELECT EmployeeID FROM Employees WHERE FirstName = 'Michael' AND LastName = 'Suyama');
SELECT TerritoryDescription  FROM Employees  WHERE TitleOfCourtesy = 'Mr' AND LastName = 'King' AND FirstName = 'Robert';
SELECT t.TerritoryDescription FROM Employees e JOIN Employees s ON e.ReportsTo = s.EmployeeID JOIN Territories t ON s.TerritoryID = t.TerritoryID WHERE e.FirstName = 'Laura' AND e.LastName = 'Callahan' AND e.TitleOfCourtesy = 'Ms';
SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM Employees WHERE EmployeeID IN (     SELECT EmployeeID     FROM Territories     WHERE TerritoryDescription = 'Santa Monica' );
SELECT e.HomePhone  FROM Employees e  JOIN Territories t ON e.EmployeeID = t.EmployeeID  WHERE t.TerritoryDescription = 'Savannah';
SELECT SUM(od.Quantity) AS TotalQuantity FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID WHERE o.CustomerID = 'HILAA' AND o.OrderDate = '1997-12-25';
SELECT COUNT(DISTINCT od.ProductID) AS ProductCount FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID WHERE o.OrderID = (     SELECT OrderID     FROM Orders     ORDER BY Freight DESC     LIMIT 1 );
SELECT S.ShipperName  FROM Orders O  JOIN Shippers S ON O.ShipperID = S.ShipperID  WHERE O.OrderID = 10585;
SELECT COUNT(*) AS NumberOfOrders FROM Orders o JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.ShipperName = 'Federal Shipping';
SELECT COUNT(DISTINCT ProductID)  FROM Products  WHERE CategoryID = (SELECT CategoryID FROM Categories WHERE CategoryName = 'dairy products');
SELECT c.CategoryName  FROM Products p  JOIN Categories c ON p.CategoryID = c.CategoryID  WHERE p.ProductName = 'Tofu';
SELECT SUM(p.Unit) AS TotalProduction FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.SupplierName = 'Escargots Nouveaux';
SELECT p.ProductName, p.ReorderLevel FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.SupplierName = 'Nord-Ost-Fisch Handelsgesellschaft mbH';
SELECT COUNT(DISTINCT p.ProductID) AS ProductCount FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.SupplierName = 'Karkki Oy';
SELECT s.ContactName  FROM Products p  JOIN Suppliers s ON p.SupplierID = s.SupplierID  WHERE p.ProductName = 'Gudbrandsdalsost';
SELECT s.Country  FROM Suppliers s  JOIN Products p ON s.SupplierID = p.SupplierID  WHERE p.ProductName = 'Scottish Longbreads';
SELECT COUNT(*) AS NumberOfTerritories FROM Territories WHERE RegionDescription = 'Northern';
SELECT RegionID FROM Territories WHERE TerritoryDescription = 'Columbia';
SELECT      (COUNT(CASE WHEN s.ShipperName = 'United Package' THEN 1 END) * 100.0 / COUNT(o.ShipperID)) AS PercentageFulfilled FROM      Orders o JOIN      Customers c ON o.CustomerID = c.CustomerID JOIN      Shippers s ON o.ShipperID = s.ShipperID WHERE      c.CustomerID = 'WHITC';
SELECT      (COUNT(CASE WHEN S.ShipperName = 'United Package' THEN O.OrderID END) -       COUNT(CASE WHEN S.ShipperName = 'Speedy Express' THEN O.OrderID END)) * 100.0 /       NULLIF(COUNT(CASE WHEN S.ShipperName = 'Speedy Express' THEN O.OrderID END), 0) AS PercentMoreOrders FROM      Orders O JOIN      Shippers S ON O.ShipperID = S.ShipperID;
SELECT      (SELECT COUNT(TerritoryDescription) FROM Territories WHERE RegionDescription = 'Eastern') /      (SELECT COUNT(TerritoryDescription) FROM Territories WHERE RegionDescription = 'Southern') AS Times;
SELECT COUNT(*) AS CustomerCount FROM Customers WHERE Country = (     SELECT Country     FROM Customers     GROUP BY Country     ORDER BY COUNT(CustomerID) DESC     LIMIT 1 );
SELECT OrderID FROM Orders WHERE Freight > 800;
SELECT Address, City, Region, Country, PostalCode  FROM Customers  WHERE CustomerName = 'Island Trading';
SELECT ProductName, Price  FROM Products  WHERE Price = (SELECT MAX(Price) FROM Products);
SELECT COUNT(*) FROM Suppliers WHERE Country = 'USA';
SELECT ProductName  FROM Products  WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products);
SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM Employees WHERE Salary = (SELECT MAX(Salary) FROM Employees);
SELECT ProductName FROM Products WHERE Discontinued = 1;
SELECT AVG(Salary) AS AverageSalary FROM Employees WHERE Title = 'Sales Representative' AND Country = 'UK';
SELECT S.ShipperName FROM Orders O JOIN Shippers S ON O.ShipperID = S.ShipperID WHERE O.ShipCountry = 'USA' GROUP BY S.ShipperName ORDER BY COUNT(O.ShipperID) DESC LIMIT 1;
SELECT COUNT(*)  FROM Products  WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Pavlova, Ltd.');
SELECT COUNT(*)  FROM Orders o JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE o.CustomerID = 'GREAL' AND s.ShipperName = 'United Package';
SELECT s.SupplierName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products);
SELECT COUNT(*) AS TotalOrders FROM Orders o JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.ShipperName = 'United Package';
SELECT COUNT(DISTINCT s.SupplierID)  FROM Suppliers s  JOIN Products p ON s.SupplierID = p.SupplierID  WHERE s.Country = 'Australia' AND p.Discontinued = 1;
SELECT SUM((p.Price * od.Quantity) + o.Freight) AS TotalPurchasePrice FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductID IN (     SELECT ProductID     FROM Products     ORDER BY Price DESC     LIMIT 2 );
SELECT SupplierName  FROM Suppliers  WHERE SupplierID = (     SELECT SupplierID      FROM Products      GROUP BY SupplierID      ORDER BY COUNT(ProductID) DESC      LIMIT 1 );
SELECT DISTINCT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE p.Price < 5;
SELECT e.FirstName, e.LastName FROM Employees e JOIN Territories t ON e.EmployeeID = t.EmployeeID GROUP BY e.EmployeeID ORDER BY COUNT(t.TerritoryID) DESC LIMIT 1;
SELECT ProductID, COUNT(ProductID) AS OrderCount FROM OrderDetails GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1;
SELECT Territories.Description FROM Employees JOIN Territories ON Employees.EmployeeID = Territories.EmployeeID WHERE Employees.TitleOfCourtesy = 'Dr.';
SELECT TerritoryDescription  FROM Territories  WHERE RegionDescription = 'Eastern';
SELECT AVG(TerritoryCount) AS AverageTerritories FROM (     SELECT COUNT(TerritoryID) AS TerritoryCount     FROM Employees     WHERE Title = 'Sales Representative'     GROUP BY EmployeeID ) AS TerritoryCounts;
SELECT p.ProductName FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Beverages' ORDER BY p.ReorderLevel DESC LIMIT 1;
SELECT CONCAT(e.FirstName, ' ', e.LastName) AS FullName FROM Employees e JOIN Orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY COUNT(o.OrderID) DESC LIMIT 1;
SELECT COUNT(od.ProductID) AS ProductCount FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID WHERE o.OrderID = (     SELECT o2.OrderID     FROM Orders o2     ORDER BY o2.Freight DESC     LIMIT 1 );
SELECT ProductID FROM Products WHERE CategoryID = (SELECT CategoryID FROM Categories WHERE CategoryName = 'Seafood') ORDER BY (UnitsInStock + UnitsOnOrder) DESC LIMIT 1;
SELECT      (e1.Salary - e2.Salary) AS SalaryDifference FROM      Employees e1 JOIN      (SELECT EmployeeID, COUNT(DISTINCT TerritoryID) AS TerritoryCount      FROM Territories      GROUP BY EmployeeID      ORDER BY TerritoryCount DESC      LIMIT 2) t1 ON e1.EmployeeID = t1.EmployeeID JOIN      (SELECT EmployeeID, COUNT(DISTINCT TerritoryID) AS TerritoryCount      FROM Territories      GROUP BY EmployeeID      ORDER BY TerritoryCount DESC      LIMIT 2 OFFSET 1) t2 ON e2.EmployeeID = t2.EmployeeID;
SELECT AVG(Price) AS AveragePrice FROM Products WHERE UnitsInStock > 50;
SELECT CustomerName  FROM Customers  WHERE City = (     SELECT City      FROM Customers      GROUP BY City      ORDER BY COUNT(*) DESC      LIMIT 1 );
SELECT CustomerName, ContactName, 'N/A' AS ContactTitle FROM Customers WHERE City = 'Madrid';
SELECT CONCAT(FirstName, ' ', LastName) AS FullName, HomePhone FROM Employees ORDER BY BirthDate DESC;
SELECT AVG(Price) AS AveragePrice FROM Products WHERE ProductID IN (     SELECT ProductID     FROM OrderDetails     JOIN Orders ON OrderDetails.OrderID = Orders.OrderID     JOIN Customers ON Orders.CustomerID = Customers.CustomerID     WHERE Customers.Country = 'UK' );
SELECT od.ProductID, SUM(od.Quantity * p.Price) AS TotalAmount FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID GROUP BY od.ProductID ORDER BY TotalAmount DESC LIMIT 1;
SELECT DISTINCT Suppliers.SupplierName, Suppliers.Address, Suppliers.Phone FROM Suppliers JOIN Products ON Suppliers.SupplierID = Products.SupplierID WHERE Products.Price > 30;
SELECT c.CustomerName, c.Address FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE o.Freight > (SELECT AVG(Freight) FROM Orders) GROUP BY c.CustomerName, c.Address;
SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM Employees WHERE EmployeeID IN (     SELECT EmployeeID     FROM Territories     WHERE TerritoryDescription = 'Wilton' );
SELECT SupplierName  FROM Suppliers  WHERE Country <> 'USA' AND Discontinued = 1;
SELECT TOP 5 p.ProductName, (p.Price + o.Freight) AS TotalCost FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= '1998-01-01 00:00:00' AND o.OrderDate < '1999-01-01 00:00:00' ORDER BY TotalCost DESC;
SELECT COUNT(DISTINCT c.CustomerID) AS NumberOfCustomers FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE c.Country = 'Canada' AND s.ShipperName = 'Federal Shipping';
SELECT P.ProductName, COUNT(OD.OrderID) AS OrderCount FROM Products P JOIN OrderDetails OD ON P.ProductID = OD.ProductID JOIN Orders O ON OD.OrderID = O.OrderID GROUP BY P.ProductName ORDER BY OrderCount DESC LIMIT 10;
SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM Products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;
SELECT CONCAT(FirstName, ' ', LastName) AS FullName, RegionDescription FROM Employees ORDER BY FullName;
SELECT CONCAT(e.FirstName, ' ', e.LastName) AS FullName, e.Title, e.Address FROM Employees e JOIN Orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= '1996-01-01 00:00:00' AND o.OrderDate < '1997-01-01 00:00:00' GROUP BY e.EmployeeID ORDER BY COUNT(o.OrderID) DESC LIMIT 1;
SELECT AVG(p.Price) AS AverageUnitPrice FROM Orders o JOIN Shippers s ON o.ShipperID = s.ShipperID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE s.ShipperName = 'United Package'  AND o.OrderDate >= '1997-01-01 00:00:00'  AND o.OrderDate < '1998-01-01 00:00:00';
SELECT      (COUNT(CASE WHEN ShipperName = 'Speedy Express' THEN 1 END) * 100.0 / COUNT(*)) AS PercentageSpeedyExpress FROM      Orders JOIN      Shippers ON Orders.ShipperID = Shippers.ShipperID;
SELECT TitleOfCourtesy  FROM Employees  ORDER BY Salary ASC  LIMIT 3;
SELECT LastName  FROM Employees  WHERE EmployeeID IN (     SELECT EmployeeID      FROM Employees      WHERE SupervisorID = (SELECT EmployeeID FROM Employees WHERE Title = 'Vice President, Sales') );
SELECT MAX(TotalPrice) AS HighestTotalPrice FROM (     SELECT O.OrderID, SUM(P.Price * OD.Quantity * (1 - OD.Discount)) AS TotalPrice     FROM Orders O     JOIN OrderDetails OD ON O.OrderID = OD.OrderID     JOIN Products P ON OD.ProductID = P.ProductID     GROUP BY O.OrderID ) AS OrderTotals;
SELECT ProductID, ProductName, (UnitsInStock + UnitsOnOrder) AS TotalQuantity FROM Products ORDER BY TotalQuantity DESC LIMIT 3;
SELECT ProductID FROM Products WHERE UnitPrice IN (     SELECT DISTINCT UnitPrice     FROM Products     ORDER BY UnitPrice DESC     LIMIT 10 ) ORDER BY ReorderLevel ASC LIMIT 1;
SELECT COUNT(*)  FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE p.Discontinued = 0 AND c.CategoryName = 'Dairy Products';
SELECT TerritoryDescription  FROM Employees  JOIN Territories ON Employees.EmployeeID = Territories.EmployeeID  WHERE Employees.Title = 'Inside Sales Coordinator';
SELECT DISTINCT Shippers.ShipperName FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID JOIN Products ON OrderDetails.ProductID = Products.ProductID GROUP BY Shippers.ShipperName HAVING SUM(OrderDetails.Quantity * Products.Price) > 2000000;
SELECT S.ShipperName, COUNT(O.OrderID) AS ShipCount FROM Orders O JOIN Shippers S ON O.ShipperID = S.ShipperID JOIN Customers C ON O.CustomerID = C.CustomerID WHERE C.City = 'Aachen' GROUP BY S.ShipperName ORDER BY ShipCount DESC LIMIT 1;
SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM Employees WHERE EmployeeID IN (     SELECT EmployeeID     FROM Employees     WHERE RegionDescription = 'Northern' );
SELECT ContactName  FROM Suppliers  WHERE SupplierName = 'Pavlova';
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.ShipperID IN (SELECT ShipperID FROM Shippers WHERE City = 'Paris');
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE c.PostalCode = '28023' GROUP BY p.ProductName ORDER BY SUM(od.Quantity) ASC LIMIT 1;
SELECT CONCAT(e.FirstName, ' ', e.LastName) AS FullName FROM Employees e JOIN Employees s ON e.ReportsTo = s.EmployeeID WHERE s.FirstName = 'Andrew' AND s.LastName = 'Fuller' AND e.RegionDescription = 'Southern';
SELECT o.OrderDate FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE c.CustomerName = 'Du monde entier' AND od.Quantity = 9 AND p.ProductName = 'Filo Mix';
SELECT DISTINCT c.CategoryName FROM Categories c JOIN Products p ON c.CategoryID = p.CategoryID JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID WHERE o.OrderID = 10933;
SELECT HomePhone  FROM Employees  WHERE EmployeeID IN (     SELECT EmployeeID      FROM Territories      WHERE TerritoryDescription = 'Portsmouth' );
SELECT AVG(Quantity) AS AverageQuantity FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.ShipperName = 'Federal Shipping'  AND o.OrderDate >= '1996-11-01 00:00:00'  AND o.OrderDate < '1996-12-01 00:00:00';
SELECT      (COUNT(CASE WHEN ShippedDate >= '1996-09-01' AND ShippedDate < '1996-10-01' THEN OrderID END) * 100.0 /      COUNT(OrderID)) AS percentage FROM      Orders o JOIN      Shippers s ON o.ShipperID = s.ShipperID WHERE      s.ShipperName = 'United Package'      AND o.OrderDate >= '1996-01-01'      AND o.OrderDate < '1997-01-01';
SELECT COUNT(*)  FROM Suppliers  WHERE Country = 'Mexico' AND ContactTitle = 'Owner';
SELECT Address, City, Region, PostalCode, Country  FROM Customers  WHERE ContactName = 'Andr Fonseca';
SELECT SupplierName AS CompanyName FROM Suppliers WHERE Phone LIKE '(171)%' UNION SELECT ShipperName AS CompanyName FROM Shippers WHERE Phone LIKE '(171)%';
SELECT      (SELECT COUNT(EmployeeID) FROM Employees WHERE Country = 'UK' AND Title = 'sales representative') -     (SELECT COUNT(EmployeeID) FROM Employees WHERE Country = 'USA' AND Title = 'sales representative') AS EmployeeDifference;
SELECT COUNT(*)  FROM Employees  WHERE City = 'Sao Paulo' AND Country = 'Brazil' AND ContactTitle = 'Sales Associate';
SELECT e.LastName FROM Orders o JOIN Employees e ON o.EmployeeID = e.EmployeeID WHERE o.OrderID = 10521 AND o.CustomerID = 'CACTU';
SELECT S.Phone AS ShippingCost FROM Orders O JOIN Shippers S ON O.ShipperID = S.ShipperID JOIN Customers C ON O.CustomerID = C.CustomerID WHERE O.OrderID = 10692 AND C.CustomerName = 'Alfreds Futterkiste';
SELECT ShipperName  FROM Orders  JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  WHERE OrderID = 10558;
SELECT o.OrderID  FROM Orders o  JOIN Shippers s ON o.ShipperID = s.ShipperID  WHERE s.ShipperName = 'Speedy Express'  LIMIT 3;
SELECT p.ProductName  FROM Products p  JOIN Categories c ON p.CategoryID = c.CategoryID  WHERE c.CategoryName = 'beverage';
SELECT c.Description  FROM Products p  JOIN Categories c ON p.CategoryID = c.CategoryID  WHERE p.ProductName = 'tofu';
SELECT Suppliers.SupplierName  FROM Products  JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID  WHERE Products.ProductName = 'Gula Malacca';
SELECT p.ProductName  FROM Products p  JOIN Suppliers s ON p.SupplierID = s.SupplierID  WHERE s.SupplierName = 'Aux joyeux ecclsiastiques';
SELECT Price FROM Products WHERE ProductName = 'Konbu' AND SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Mayumi''s');
SELECT s.ContactName  FROM Products p  JOIN Suppliers s ON p.SupplierID = s.SupplierID  WHERE p.ProductName = 'Camembert Pierrot';
SELECT ProductName  FROM Products  JOIN Categories ON Products.CategoryID = Categories.CategoryID  WHERE Products.Discontinued = 1 AND Categories.CategoryName = 'Meat/Poultry'  LIMIT 3;
SELECT ProductName  FROM Products  WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Heli Swaren GmbH & Co. KG')  ORDER BY ReorderLevel DESC  LIMIT 2;
SELECT ContactName  FROM Suppliers  WHERE SupplierName = 'Heli Swaren GmbH & Co. KG';
SELECT Country FROM Suppliers WHERE SupplierName = 'Drachenblut Delikatessen';
SELECT COUNT(*) AS TerritoryCount FROM Territories;
SELECT MAX(TotalPrice) AS LargestTotalPrice FROM (     SELECT O.OrderID, SUM(P.Price * OD.Quantity * (1 - OD.Discount)) AS TotalPrice     FROM Orders O     JOIN OrderDetails OD ON O.OrderID = OD.OrderID     JOIN Products P ON OD.ProductID = P.ProductID     GROUP BY O.OrderID ) AS OrderTotals;
SELECT ProductName  FROM Products  WHERE Price = (SELECT MAX(Price) FROM Products);
SELECT COUNT(*)  FROM Orders o JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.Country = 'France';
SELECT TerritoryDescription  FROM Customers  WHERE City = 'Hoffman Estates';
SELECT Suppliers.Phone  FROM Products  JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID  WHERE Products.ProductName = 'Thringer Rostbratwurst';
SELECT DISTINCT e.FirstName FROM Employees e JOIN Orders o ON e.EmployeeID = o.EmployeeID JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.City = 'Reims';
SELECT MAX(od.Quantity) AS LargestQuantity FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Manjimup Dried Apples';
SELECT COUNT(*) AS NumberOfOrders FROM Orders WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'Speedy Express');
SELECT TerritoryDescription  FROM Territories  WHERE RegionDescription = 'Southern';
SELECT Price FROM Products WHERE ProductID IN (     SELECT ProductID FROM Categories WHERE CategoryName = 'Cheeses' );
SELECT COUNT(*) AS OrderCount FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerName = 'Laughing Bacchus Wine Cellars');
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE c.Address = 'Starenweg 5';
SELECT ProductName  FROM Products  WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Bigfoot Breweries');
SELECT t.TerritoryDescription FROM Employees e JOIN Territories t ON e.EmployeeID = t.EmployeeID WHERE e.LastName = 'King' AND e.FirstName = 'Robert';
SELECT DISTINCT c.ContactName FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.ShipCountry = 'Switzerland';
SELECT      DIVIDE(COUNT(CASE WHEN Title = 'Sales Representative' THEN OrderID END), COUNT(OrderID)) AS percentage FROM      Orders o JOIN      Employees e ON o.EmployeeID = e.EmployeeID;
SELECT COUNT(*)  FROM Employees  WHERE EmployeeID IN (     SELECT CustomerID      FROM Customers      WHERE Country = 'USA' ) AND TitleOfCourtesy = 'Dr.';
SELECT AVG(Salary) AS AverageSalary FROM Employees WHERE EmployeeID BETWEEN 1 AND 9;
SELECT SUM(Salary) AS TotalSalary FROM Employees WHERE Country = 'UK';
SELECT e.Photo, e.Notes  FROM Employees e  WHERE e.FirstName = 'Laura' AND e.LastName = 'Callahan'  AND e.Phone = '(206) 555-1189';
SELECT Notes  FROM Employees  WHERE EmployeeID = (SELECT EmployeeID FROM Employees ORDER BY Salary DESC LIMIT 1);
SELECT DISTINCT o.CustomerID FROM Orders o JOIN Employees e ON o.EmployeeID = e.EmployeeID WHERE e.FirstName = 'Michael' AND e.LastName = 'Suyama';
SELECT DISTINCT c.Country FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE c.CustomerName = 'Janet Leverling';
SELECT COUNT(*) AS OrderCount FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE ContactName = 'Margaret Peacock');
SELECT AVG(E.Salary) AS AverageSalaryPerOrder FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE E.FirstName = 'Andrew' AND E.LastName = 'Fuller';
SELECT p.ProductName  FROM Products p  JOIN Suppliers s ON p.SupplierID = s.SupplierID  WHERE s.SupplierName = 'Exotic Liquids';
SELECT p.ProductName, p.Unit, od.Quantity FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID WHERE s.SupplierName = 'Tokyo Traders';
SELECT COUNT(*)  FROM Products  WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'New Orleans Cajun Delights')  AND Discontinued = 1;
SELECT AVG(Price) AS AverageUnitPrice FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Formaggi Fortini s.r.l.');
SELECT COUNT(p.ProductName) AS TotalProducts FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.Country = 'Japan';
SELECT Suppliers.ContactName  FROM Products  JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID  WHERE Products.ProductName = 'Teatime Chocolate Biscuits';
SELECT SupplierName  FROM Suppliers  WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products);
SELECT Suppliers.ContactName  FROM Products  JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID  WHERE Products.Unit = '10 boxes x 12 pieces';
SELECT SUM(od.Quantity) AS TotalUnitsOnOrder FROM OrderDetails od JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID JOIN Suppliers s ON p.SupplierID = s.SupplierID JOIN Products p ON od.ProductID = p.ProductID WHERE s.SupplierName = 'Exotic Liquids';
SELECT      (COUNT(CASE WHEN SupplierName = 'Gai pturage' THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM      Products;
SELECT ProductID  FROM Products  ORDER BY UnitsInStock DESC  LIMIT 5;
SELECT COUNT(*) AS DiscontinuedProducts FROM Products WHERE Discontinued = 1;
SELECT Address, Phone, Salary  FROM Employees  WHERE Title = 'Sales Manager';
SELECT CONCAT(FirstName, ' ', LastName) AS FullName, Photo AS PhotoURL FROM Employees WHERE Title = 'Vice President, Sales';
SELECT c.CustomerName, SUM(od.Quantity * p.Price) AS TotalSales FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID GROUP BY c.CustomerName ORDER BY TotalSales DESC LIMIT 10;
SELECT c.CategoryName, AVG(od.Quantity * p.Price) AS AverageSales FROM Categories c JOIN Products p ON c.CategoryID = p.CategoryID JOIN OrderDetails od ON p.ProductID = od.ProductID GROUP BY c.CategoryName;
SELECT SUM(od.Quantity) AS TotalOrderQuantity FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Uncle Bob''s Organic Dried Pears';
SELECT COUNT(*)  FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE c.CategoryName = 'Seafood' AND od.Quantity > 50;
SELECT p.ProductID, p.ProductName, p.ReorderLevel FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.SupplierName = 'Pavlova, Ltd';
SELECT s.SupplierName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1;
SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM Employees LEFT JOIN Territories ON Employees.EmployeeID = Territories.EmployeeID GROUP BY Employees.EmployeeID HAVING COUNT(TerritoryID) < 4;
SELECT COUNT(DISTINCT EmployeeID)  FROM Employees  WHERE EmployeeID IN (SELECT EmployeeID FROM Territories WHERE RegionDescription = 'Eastern');
SELECT COUNT(*) AS TotalOrders FROM Orders o JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE o.OrderDate BETWEEN '1997-03-01' AND '1997-10-08' AND s.ShipperName = 'Federal Shipping';
SELECT COUNT(DISTINCT o.CustomerID)  FROM Orders o JOIN Employees e ON o.EmployeeID = e.EmployeeID JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.ShipCountry = 'Brazil'  AND e.FirstName = 'Margaret'  AND e.LastName = 'Peacock'  AND o.OrderDate BETWEEN '1997-03-31' AND '1997-12-10';
SELECT p.ProductID, p.ProductName, p.Unit, p.Price, od.Quantity FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE od.Quantity = 1;
SELECT p.ProductName, (p.Price * od.Quantity) AS StockValue FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE c.CategoryName = 'Condiments';
SELECT COUNT(*) AS TerritoryCount FROM Territories WHERE EmployeeID = (SELECT EmployeeID FROM Employees WHERE LastName = 'Dodsworth' AND FirstName = 'Anne');
SELECT c.CustomerID, c.CustomerName, MAX(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS LongestDelay FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE c.Country = 'USA' AND o.ShippedDate IS NOT NULL AND o.RequiredDate IS NOT NULL GROUP BY c.CustomerID, c.CustomerName;
SELECT c.ContactName, c.Phone FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID GROUP BY c.CustomerID, c.ContactName, c.Phone ORDER BY SUM(od.Quantity * p.Price * (1 - od.Discount)) DESC LIMIT 1;
SELECT      CONCAT(e.FirstName, ' ', e.LastName) AS SalesRepresentative,     CONCAT(s.FirstName, ' ', s.LastName) AS Supervisor FROM      Customers c JOIN      Orders o ON c.CustomerID = o.CustomerID JOIN      OrderDetails od ON o.OrderID = od.OrderID JOIN      Products p ON od.ProductID = p.ProductID JOIN      Employees e ON o.EmployeeID = e.EmployeeID JOIN      Employees s ON e.ReportsTo = s.EmployeeID GROUP BY      c.CustomerID, e.EmployeeID ORDER BY      SUM(od.Quantity * p.Price * (1 - od.Discount)) DESC LIMIT 1;
SELECT COUNT(*) AS CustomerCount  FROM Customers  WHERE City = 'Berlin' AND Country = 'Germany';
SELECT COUNT(*) AS ProductCount FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Exotic Liquids');
SELECT Suppliers.SupplierName, Products.ProductName FROM Products JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID WHERE Products.Price = (SELECT MIN(Price) FROM Products);
SELECT AVG(Price) AS AverageUnitPrice FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Tokyo Traders');
SELECT COUNT(*) AS TerritoryCount FROM Territories WHERE RegionDescription = 'Eastern';
SELECT RegionDescription FROM Territories GROUP BY RegionDescription ORDER BY COUNT(TerritoryID) DESC LIMIT 1;
SELECT RegionDescription  FROM Territories  WHERE TerritoryID = 2116;
SELECT      (COUNT(CASE WHEN c.City = 'Madrid' THEN o.CustomerID END) * 100.0 / COUNT(o.CustomerID)) AS Percentage FROM      Orders o JOIN      Customers c ON o.CustomerID = c.CustomerID WHERE      YEAR(o.OrderDate) = 1996;
SELECT LastName + ', ' + FirstName AS FullName FROM Employees;
SELECT FirstName  FROM Employees  WHERE Salary = (SELECT MAX(Salary) FROM Employees);
SELECT COUNT(*)  FROM Employees  WHERE Title = 'Sales Representative' AND Salary > 2000;
SELECT COUNT(*)  FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID WHERE YEAR(o.OrderDate) = 1996 AND c.Country = 'UK';
SELECT c.CustomerName, COUNT(o.OrderID) AS OrderCount FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE YEAR(o.OrderDate) = 1998 GROUP BY c.CustomerName ORDER BY OrderCount DESC LIMIT 1;
SELECT c.Country, COUNT(o.OrderID) AS NumberOfOrders FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID WHERE YEAR(o.OrderDate) = 1996 GROUP BY c.Country;
SELECT COUNT(*)  FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID WHERE c.CustomerName = 'Hanna Moos' AND YEAR(o.OrderDate) = 1999;
SELECT MIN(DATEDIFF(ShippedDate, OrderDate)) AS FastestShippingDays FROM Orders JOIN Customers ON Orders.CustomerID = Customers.CustomerID JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Customers.CustomerName = 'Berglunds snabbkp';
SELECT Customers.CustomerName  FROM Orders  JOIN Customers ON Orders.CustomerID = Customers.CustomerID  WHERE Orders.OrderID = 10257;
SELECT YEAR(OrderDate) AS OrderYear FROM Orders JOIN Customers ON Orders.CustomerID = Customers.CustomerID WHERE Customers.CustomerName = 'Around the Horn' GROUP BY YEAR(OrderDate) ORDER BY COUNT(OrderID) DESC LIMIT 1;
SELECT COUNT(*)  FROM Employees  WHERE ReportsTo IS NOT NULL  AND EmployeeID IN (SELECT EmployeeID FROM Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller');
SELECT Country FROM Suppliers GROUP BY Country ORDER BY COUNT(SupplierID) DESC LIMIT 1;
SELECT CONCAT(LastName, ', ', FirstName) AS FullName FROM Employees WHERE ReportsTo IS NOT NULL AND EmployeeID IN (     SELECT EmployeeID     FROM Employees     WHERE Title = 'Sales Manager' );
SELECT COUNT(o.OrderID) AS OrderCount FROM Orders o WHERE o.CustomerID = (     SELECT o2.CustomerID     FROM Orders o2     WHERE o2.OrderDate BETWEEN '1996-08-01' AND '1996-08-31'     GROUP BY o2.CustomerID     ORDER BY COUNT(o2.OrderID) DESC     LIMIT 1 ) AND o.OrderDate BETWEEN '1996-08-01' AND '1996-08-31';
SELECT Salary FROM Employees WHERE HireDate = (SELECT MIN(HireDate) FROM Employees);
SELECT MAX(DATEDIFF(OrderDate, BirthDate)) AS OldestEmployeeAgeAtHire FROM Employees JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID;
SELECT SUM(p.Price * od.Quantity) AS TotalSalesAmount FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1;
SELECT c.CategoryName FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE p.Discontinued = 1 GROUP BY c.CategoryName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT SUM(od.Quantity) AS TotalCondimentsSold FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID JOIN Categories c ON p.CategoryID = c.CategoryID JOIN Orders o ON od.OrderID = o.OrderID WHERE c.CategoryName = 'Condiments' AND YEAR(o.OrderDate) = 1997;
SELECT c.CustomerName FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID GROUP BY c.CustomerID, o.OrderID ORDER BY SUM(od.Quantity) DESC LIMIT 1;
SELECT AVG(MonthlyProductCount) AS MonthlyAverageProductsShipped FROM (     SELECT MONTH(o.OrderDate) AS OrderMonth, SUM(od.Quantity) AS MonthlyProductCount     FROM Orders o     JOIN OrderDetails od ON o.OrderID = od.OrderID     JOIN Shippers s ON o.ShipperID = s.ShipperID     WHERE YEAR(o.OrderDate) = 1996 AND s.ShipperName = 'Federal Shipping'     GROUP BY MONTH(o.OrderDate) ) AS MonthlyCounts;
SELECT ProductName  FROM Products  WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'G''day, Mate');
SELECT COUNT(TerritoryID)  FROM Territories  WHERE RegionID = (SELECT RegionID                    FROM Territories                    GROUP BY RegionID                    ORDER BY COUNT(TerritoryID) DESC                    LIMIT 1);
SELECT SupplierName  FROM Suppliers  WHERE SupplierID = (     SELECT SupplierID      FROM Products      WHERE Price = (SELECT MAX(Price) FROM Products) );
SELECT COUNT(*)  FROM Employees  WHERE (TitleOfCourtesy = 'Mrs.' OR TitleOfCourtesy = 'Ms.')  AND (SELECT COUNT(DISTINCT TerritoryID) FROM Territories WHERE EmployeeID = Employees.EmployeeID) >= 3;
SELECT TOP 8 s.SupplierName, COUNT(p.ProductID) AS ProductCount FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products) GROUP BY s.SupplierName ORDER BY ProductCount DESC;
SELECT c.CustomerName FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE od.Discount = 0 GROUP BY c.CustomerID, c.CustomerName, o.OrderID ORDER BY SUM(p.Price * od.Quantity) DESC LIMIT 1;
SELECT SUM(od.Quantity * p.Price) AS TotalSales FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID JOIN Employees e ON o.EmployeeID = e.EmployeeID WHERE e.FirstName = 'Nancy' AND e.LastName = 'Davolio' AND YEAR(o.OrderDate) = 1996 AND MONTH(o.OrderDate) = 12 AND od.Discount = 0;
SELECT SUM(p.Price * od.Quantity) AS TotalSales FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE YEAR(o.OrderDate) = 1997;
SELECT AVG(AnnualSales) AS AverageAnnualSales FROM (     SELECT YEAR(OrderDate) AS Year, SUM(od.Quantity * p.Price * (1 - od.Discount)) AS AnnualSales     FROM Orders o     JOIN OrderDetails od ON o.OrderID = od.OrderID     JOIN Products p ON od.ProductID = p.ProductID     WHERE o.OrderDate > '1996-01-01' AND o.OrderDate < '1998-12-31'     GROUP BY YEAR(OrderDate) ) AS AnnualSalesData;
SELECT COUNT(*)  FROM Orders  JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  WHERE Shippers.ShipCountry = 'Venezuela'  AND YEAR(Orders.OrderDate) = 1996;
SELECT CategoryID, Description FROM Categories WHERE CategoryName = 'Condiments';
SELECT O.OrderID, OD.ProductID, P.Price AS UnitPrice FROM Orders O JOIN OrderDetails OD ON O.OrderID = OD.OrderID JOIN Products P ON OD.ProductID = P.ProductID GROUP BY O.OrderID, OD.ProductID, P.Price HAVING SUM(OD.Quantity * P.Price * (1 - 0)) > 15000;
SELECT TerritoryID FROM Territories WHERE EmployeeID = 7;
SELECT SupplierName, Address  FROM Suppliers  WHERE City = 'Sydney';
SELECT CONCAT(FirstName, ' ', LastName) AS FullName,         YEAR(HireDate) - YEAR(BirthDate) AS AgeWhenHired FROM Employees WHERE Title = 'Vice President, Sales';
SELECT SupplierName FROM Suppliers WHERE Country = 'Germany';
SELECT CONCAT(FirstName, ' ', LastName) AS FullName,         SUBTRACT(2022, YEAR(BirthDate)) AS Age FROM Employees WHERE City = 'London';
SELECT CustomerName, Address, Phone, Fax  FROM Customers  WHERE City = 'London';
SELECT CONCAT(FirstName, ' ', LastName) AS FullName, Title FROM Employees WHERE ReportsTo = (SELECT EmployeeID FROM Employees WHERE Title = 'Sales Manager');
SELECT CustomerName, City  FROM Customers  WHERE Country = 'Canada';
SELECT SUM(UnitsInStock + UnitsOnOrder) AS TotalProductionAmount, ProductName FROM Products WHERE Unit = '10 - 500 g pkgs.' GROUP BY ProductName;
SELECT p.ProductName, c.CategoryName FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE p.ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products);
SELECT s.SupplierName, s.City, p.ProductName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE (p.UnitsInStock + p.UnitsOnOrder) > 120;
SELECT s.ContactName, e.Title, p.ProductName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID JOIN Employees e ON e.EmployeeID = s.ContactName WHERE s.SupplierName = 'Escargots Nouveaux';
SELECT Territories.TerritoryID, Territories.Description, Regions.RegionDescription FROM Territories JOIN Employees ON Territories.EmployeeID = Employees.EmployeeID JOIN Regions ON Territories.RegionID = Regions.RegionID WHERE Employees.FirstName = 'Margaret' AND Employees.LastName = 'Peacock';
SELECT p.ProductName  FROM Products p  JOIN Suppliers s ON p.SupplierID = s.SupplierID  WHERE s.Country = 'Spain';
SELECT p.ProductName FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE o.CustomerID = 'WILMK' AND o.OrderDate = '1998-03-26 00:00:00';
SELECT ProductID, ProductName  FROM Products  WHERE CategoryID = (SELECT CategoryID FROM Categories WHERE CategoryName = 'Meat/Poultry');
SELECT COUNT(*) AS NumberOfOrders FROM Orders WHERE CustomerID IN (     SELECT CustomerID     FROM Customers     WHERE Country = 'Ireland' );
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE YEAR(o.OrderDate) = 1996 AND c.Country = 'Norway';
SELECT DISTINCT s.SupplierName FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID JOIN Employees e ON o.EmployeeID = e.EmployeeID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE c.Country = 'Brazil'   AND e.FirstName = 'Anne'   AND e.LastName = 'Dodsworth'   AND YEAR(o.OrderDate) = 1996   AND MONTH(o.OrderDate) = 12;
SELECT      CONCAT(e.FirstName, ' ', e.LastName) AS FullName,      e.Title,      e.Salary,      COUNT(o.OrderID) AS NumberOfOrders FROM      Employees e LEFT JOIN      Orders o ON e.EmployeeID = o.EmployeeID LEFT JOIN      Shippers s ON o.ShipperID = s.ShipperID WHERE      e.BirthDate = (SELECT MIN(BirthDate) FROM Employees)     AND o.ShipCountry = 'USA' GROUP BY      e.EmployeeID;
SELECT TerritoryID, Description  FROM Territories  WHERE RegionDescription = 'Southern';
SELECT AVG(od.Quantity * p.Price) AS AveragePayment FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Confections';
SELECT SUM(p.Price * od.Quantity) AS TotalPayment FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE c.City = 'San Francisco';
SELECT p.ProductID, p.ProductName, (p.UnitsInStock + p.UnitsOnOrder) AS TotalProduction FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.Country = 'Japan';
SELECT p.ProductName, c.CategoryName, p.Price FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.Country = 'Australia' AND p.Discontinued = 1;
SELECT s.Country, o.OrderID FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID WHERE p.ProductName = 'Ipoh Coffee' AND o.OrderID = (     SELECT od2.OrderID     FROM OrderDetails od2     JOIN Products p2 ON od2.ProductID = p2.ProductID     GROUP BY od2.OrderID     ORDER BY SUM(p2.Price * od2.Quantity * (1 - od2.Discount)) DESC     LIMIT 1 );
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * p.Price * (1 - od.Discount)) AS TotalPayment FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE od.OrderID = '10979' GROUP BY p.ProductID, p.ProductName;
SELECT s.ContactName, s.SupplierName FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Grains/Cereals' AND s.SupplierID BETWEEN 1 AND 10;
SELECT S.Phone, COUNT(O.OrderID) AS NumberOfShippedOrders FROM Shippers S LEFT JOIN Orders O ON S.ShipperID = O.ShipperID WHERE S.ShipperName = 'Speedy Express' AND O.OrderDate = '1998-01-30' GROUP BY S.Phone;
SELECT od.OrderDetailID, p.ProductName, o.OrderDate, od.Quantity,         DATEDIFF(od.ShippedDate, o.RequiredDate) AS OverdueDays FROM OrderDetails od JOIN Orders o ON od.OrderID = o.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE DATEDIFF(od.ShippedDate, o.RequiredDate) < 0 ORDER BY OverdueDays ASC LIMIT 1;
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Shippers s ON o.ShipperID = s.ShipperID JOIN Employees e ON o.EmployeeID = e.EmployeeID WHERE s.ShipCountry = 'Mexico'  AND YEAR(o.OrderDate) = 1996  AND e.Title = 'Inside Sales Coordinator';
SELECT p.ProductName FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Dairy Products' ORDER BY p.ReorderLevel DESC LIMIT 1;
SELECT SUM(UnitsInStock + UnitsOnOrder) AS ProductionVolume FROM Products WHERE ProductName = 'Mascarpone Fabioli';
SELECT p.ProductName, c.CategoryName FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE p.Price = (SELECT MAX(Price) FROM Products)    OR p.Price = (SELECT MIN(Price) FROM Products);
SELECT c.CustomerName, SUM(p.Price * od.Quantity * (1 - od.Discount)) AS OrderValue FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID GROUP BY c.CustomerName ORDER BY OrderValue DESC LIMIT 1;
SELECT COUNT(*) AS NumberOfEmployees FROM Employees WHERE RegionDescription = 'Northern';
SELECT AVG(TotalSales) AS AverageOrderValue FROM (     SELECT O.OrderID, SUM(P.Price * OD.Quantity) AS TotalSales     FROM Orders O     JOIN OrderDetails OD ON O.OrderID = OD.OrderID     JOIN Products P ON OD.ProductID = P.ProductID     GROUP BY O.OrderID ) AS OrderTotals;
SELECT (SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(ProductID)) AS DiscontinuedPercentage FROM Products;
SELECT CONCAT(e.FirstName, ' ', e.LastName) AS FullName FROM Employees e JOIN Orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID = 10274;
SELECT COUNT(*) AS TotalOrders FROM Orders JOIN Customers ON Orders.CustomerID = Customers.CustomerID WHERE Customers.CustomerName = 'GROSELLA-Restaurante';
SELECT p.ProductName, od.Quantity FROM OrderDetails od JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID JOIN Employees e ON o.EmployeeID = e.EmployeeID JOIN Products p ON od.ProductID = p.ProductID WHERE c.CustomerName = 'GROSELLA-Restaurante' AND e.FirstName = 'Nancy' AND e.LastName = 'Davolio';
SELECT      COUNT(o.OrderID) AS TotalOrders,     AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM      Customers c JOIN      Orders o ON c.CustomerID = o.CustomerID JOIN      OrderDetails od ON o.OrderID = od.OrderID JOIN      Products p ON od.ProductID = p.ProductID WHERE      c.CustomerName = 'Laughing Bacchus Wine Cellars';
SELECT SUM(od.Quantity) AS TotalBoxes FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID JOIN Orders o ON od.OrderID = o.OrderID WHERE p.ProductName = 'Pavlova';
SELECT MAX(Salary) AS MaxSalary, MIN(Salary) AS MinSalary  FROM Employees  WHERE Title = 'Sales Representative' AND City = 'Northwind';
SELECT COUNT(*)  FROM Suppliers  WHERE Country = 'USA';
SELECT ProductName  FROM Products  WHERE Discontinued = 1;
SELECT ContactName  FROM Suppliers  WHERE SupplierName = 'Eastern Connection';
SELECT COUNT(DISTINCT ShipperID) AS NumberOfShippers FROM Orders;
SELECT      COUNT(o.OrderID) AS TotalOrders,     (SUM(CASE WHEN s.Country = 'Austria' THEN 1 ELSE 0 END) * 100.0 / COUNT(o.OrderID)) AS PercentShippedToAustria FROM      Orders o JOIN      Employees e ON o.EmployeeID = e.EmployeeID JOIN      Shippers s ON o.ShipperID = s.ShipperID WHERE      e.FirstName = 'Andrew' AND e.LastName = 'Fuller';
SELECT CategoryName  FROM Categories  WHERE Description = 'Soft drinks, coffees, teas, beers, and ales';
SELECT Phone FROM Suppliers WHERE SupplierName = 'Around the Horn';
SELECT Phone FROM Suppliers WHERE SupplierName = 'Blondesddsl pre et fils' AND City = 'Strasbourg';
SELECT COUNT(*) AS NumberOfCompanies FROM Customers WHERE City = 'London';
SELECT Address  FROM Suppliers  WHERE SupplierName = 'Eastern Connection' AND ContactName = 'Ann Devon';
SELECT SupplierName FROM Suppliers WHERE Country = 'France';
SELECT COUNT(ProductName)  FROM Products  WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Exotic Liquids');
SELECT Suppliers.SupplierName FROM Products JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID WHERE Products.Price = (SELECT MAX(Price) FROM Products);
SELECT Suppliers.SupplierName FROM Suppliers JOIN Products ON Suppliers.SupplierID = Products.SupplierID WHERE Suppliers.City = 'London' GROUP BY Suppliers.SupplierName ORDER BY SUM(Products.Quantity) DESC LIMIT 1;
SELECT p.ProductName FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.SupplierName = 'Exotic Liquids' ORDER BY p.ReorderLevel DESC LIMIT 1;
SELECT c.CategoryName  FROM Products p  JOIN Categories c ON p.CategoryID = c.CategoryID  JOIN Suppliers s ON p.SupplierID = s.SupplierID  WHERE p.ProductName = 'Chef Anton''s Gumbo Mix'  AND s.SupplierName = 'New Orleans Cajun Delights';
SELECT Suppliers.Country FROM Suppliers JOIN Products ON Suppliers.SupplierID = Products.SupplierID WHERE Suppliers.SupplierName = 'Leka Trading' AND Products.ProductName = 'Ipoh Coffee';
SELECT c.CategoryName FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID JOIN OrderDetails od ON p.ProductID = od.ProductID GROUP BY c.CategoryName ORDER BY SUM(od.Quantity) DESC LIMIT 1;
SELECT      (SELECT Price FROM Products WHERE ProductName = 'Chef Anton''s Cajun Seasoning') -      (SELECT Price FROM Products WHERE ProductName = 'Chef Anton''s Gumbo Mix') AS PriceDifference WHERE      (SELECT SupplierName FROM Suppliers WHERE SupplierID = (SELECT SupplierID FROM Products WHERE ProductName = 'Chef Anton''s Cajun Seasoning')) = 'New Orleans Cajun Delights'      AND      (SELECT SupplierName FROM Suppliers WHERE SupplierID = (SELECT SupplierID FROM Products WHERE ProductName = 'Chef Anton''s Gumbo Mix')) = 'New Orleans Cajun Delights';
SELECT p.ProductName  FROM Products p  JOIN Suppliers s ON p.SupplierID = s.SupplierID  WHERE s.SupplierName = 'Cooperativa de Quesos ''Las Cabras'' AND p.Price > 20;
SELECT p.ProductName  FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID WHERE s.SupplierName = 'Tokyo Traders' AND od.Quantity > 40;
SELECT c.CategoryName FROM Categories c JOIN Products p ON c.CategoryID = p.CategoryID JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.SupplierName = 'Exotic Liquids' AND p.UnitsInStock > 100;
SELECT      COUNT(DISTINCT p.ProductName) AS ProductCount,     (SUM(CASE WHEN od.Quantity < 50 THEN od.Quantity ELSE 0 END) * 100.0 / SUM(od.Quantity)) AS PercentageLessThan50 FROM      Products p JOIN      OrderDetails od ON p.ProductID = od.ProductID;
SELECT      SUM(od.Quantity) AS TotalGeitostQuantity,     (SUM(od.Quantity) * 100.0 / (SELECT SUM(Quantity) FROM OrderDetails)) AS GeitostPercentage FROM      OrderDetails od JOIN      Products p ON od.ProductID = p.ProductID WHERE      p.ProductName = 'Geitost';
SELECT Title  FROM Employees  WHERE CONCAT(FirstName, ' ', LastName) = 'Robert King';
SELECT ShipperName, Phone  FROM Shippers  WHERE Phone = '(503) 555-9931';
SELECT Address, HomePhone  FROM Employees  WHERE FirstName = 'Margaret' AND LastName = 'Peacock';
SELECT Address, City, PostalCode, Country  FROM Customers  WHERE CustomerName = 'Rattlesnake Canyon Grocery';
SELECT p.ProductName  FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Confections';
SELECT Suppliers.SupplierName, Suppliers.ContactName FROM Products JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID WHERE Products.ProductName = 'Sir Rodney''s Marmalade';
SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM Employees WHERE EmployeeID IN (     SELECT EmployeeID     FROM Territories     WHERE TerritoryDescription = 'Denver' );
SELECT t.TerritoryDescription FROM Territories t JOIN Employees e ON t.EmployeeID = e.EmployeeID WHERE e.FirstName = 'Laura' AND e.LastName = 'Callahan';
SELECT COUNT(*) AS NumberOfOrders FROM Orders o JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.ShipperName = 'Federal Shipping';
SELECT p.ProductName  FROM Products p  JOIN Suppliers s ON p.SupplierID = s.SupplierID  WHERE s.Country = 'Finland';
SELECT c.CategoryName, c.Description FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE p.ProductName = 'Mozzarella di Giovanni';
SELECT DISTINCT s.SupplierName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.Description = 'cheeses';
SELECT p.ProductName  FROM Products p  JOIN Suppliers s ON p.SupplierID = s.SupplierID  WHERE s.SupplierName = 'Zaanse Snoepfabriek';
SELECT p.ProductName, p.Price FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.SupplierName = 'Plutzer Lebensmittelgromrkte AG' AND p.Discontinued = 1;
SELECT DISTINCT c.City AS ShipCity FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Mishi Kobe Niku';
SELECT      (SUM(CASE WHEN o.ShipperID = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'Speedy Express') AND c.Country = 'Sweden' THEN 1 ELSE 0 END) * 100.0) /      COUNT(*) AS Percentage FROM      Orders o JOIN      Customers c ON o.CustomerID = c.CustomerID;
SELECT COUNT(*)  FROM Territories  WHERE RegionID = 1;
SELECT Region, COUNT(TerritoryID) AS TotalTerritories FROM Territories GROUP BY Region;
SELECT COUNT(*) FROM Suppliers WHERE Country = 'UK';
SELECT ContactName FROM Suppliers WHERE SupplierName = 'Tokyo Traders';
SELECT COUNT(*)  FROM Employees  WHERE Country = 'USA' AND Title = 'Sales Representative';
SELECT MAX(Salary) AS HighestSalary, Title FROM Employees GROUP BY Title ORDER BY HighestSalary DESC LIMIT 1;
SELECT COUNT(*)  FROM Products  WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Plutzer Lebensmittelgromrkte AG')  AND UnitsInStock = 0  AND UnitsOnOrder > 0;
SELECT p.ProductID, p.ProductName, p.Price, SUM(od.Quantity) AS TotalQuantitySold FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE p.Price = (SELECT MAX(Price) FROM Products) GROUP BY p.ProductID, p.ProductName, p.Price;
SELECT e.FirstName, e.LastName, e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM Employees e LEFT JOIN Orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderCount ASC LIMIT 1;
SELECT p.ProductName, COUNT(od.ProductID) AS ProductCount FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE c.Country = 'Germany' GROUP BY p.ProductName ORDER BY ProductCount DESC LIMIT 1;
SELECT SUM(p.Price * od.Quantity) AS TotalProductValue FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE o.ShipCountry = 'Brazil' AND s.ShipperName = 'Speedy Express';
SELECT      COUNT(e.EmployeeID) AS SubordinateCount,     MAX(od.Quantity * p.Price) AS MaxOrderValue FROM      Employees e LEFT JOIN      Orders o ON e.EmployeeID = o.EmployeeID LEFT JOIN      OrderDetails od ON o.OrderID = od.OrderID LEFT JOIN      Products p ON od.ProductID = p.ProductID WHERE      e.ReportsTo = 2;
SELECT      e.FirstName,      e.LastName,      COUNT(od.OrderDetailID) AS SalesCount,      SUM(od.Quantity * p.Price) AS TotalSales FROM      Employees e JOIN      Orders o ON e.EmployeeID = o.EmployeeID JOIN      OrderDetails od ON o.OrderID = od.OrderID JOIN      Products p ON od.ProductID = p.ProductID WHERE      e.Title = 'Sales Representative' GROUP BY      e.EmployeeID ORDER BY      TotalSales DESC LIMIT 1;
SELECT COUNT(*) AS EmployeeCount,         COUNT(DISTINCT City) AS UniqueRegions FROM Employees WHERE Country = 'UK';
SELECT c.CustomerName, o.OrderID, SUM(od.Quantity * p.Price) AS TotalPurchase, s.Country AS ShipCountry FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID JOIN Shippers s ON o.ShipperID = s.ShipperID GROUP BY c.CustomerName, o.OrderID, s.Country ORDER BY TotalPurchase DESC LIMIT 1;
SELECT c.CustomerName, cat.CategoryName, COUNT(od.ProductID) AS ProductCount FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID JOIN Categories cat ON p.CategoryID = cat.CategoryID GROUP BY c.CustomerID, cat.CategoryID HAVING COUNT(od.ProductID) = (     SELECT MAX(ProductCount)     FROM (         SELECT COUNT(od2.ProductID) AS ProductCount         FROM Customers c2         JOIN Orders o2 ON c2.CustomerID = o2.CustomerID         JOIN OrderDetails od2 ON o2.OrderID = od2.OrderID         JOIN Products p2 ON od2.ProductID = p2.ProductID         JOIN Categories cat2 ON p2.CategoryID = cat2.CategoryID         GROUP BY c2.CustomerID, cat2.CategoryID     ) AS subquery ) ORDER BY c.CustomerName, cat.CategoryName;
SELECT p.ProductID, p.ProductName, SUM(od.Quantity * p.Price) AS TotalSales FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID WHERE c.CategoryName = 'Confections' GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC LIMIT 1;
SELECT ProductName FROM Products WHERE ProductID = 77;
SELECT SupplierName FROM Suppliers WHERE Country = 'USA';
SELECT Title FROM Employees WHERE FirstName = 'Laura' AND LastName = 'Callahan';
SELECT e.FirstName  FROM Employees e JOIN Orders o ON e.EmployeeID = o.EmployeeID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE c.CustomerName = 'Victuailles en stock';
SELECT COUNT(*) AS NumberOfOrders FROM Orders o JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.ShipperName = 'Federal Shipping';
SELECT e.FirstName, e.LastName FROM Employees e JOIN Orders o ON e.EmployeeID = o.EmployeeID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE c.City = 'Morristown';
SELECT TerritoryDescription  FROM Territories  WHERE RegionDescription = 'Northern';
SELECT Orders.OrderID FROM Orders JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID WHERE Employees.FirstName = 'Michael' AND Employees.LastName = 'Suyama';
SELECT      (SELECT COUNT(TerritoryDescription) FROM Territories WHERE RegionID = 3) * 1.0 /      (SELECT COUNT(TerritoryDescription) FROM Territories WHERE RegionID = 2) AS TerritoryRatio;
SELECT EmployeeID FROM Employees WHERE TerritoryID BETWEEN 1000 AND 2000;
SELECT t.TerritoryID, t.TerritoryDescription, r.RegionDescription FROM Territories t JOIN Employees e ON t.EmployeeID = e.EmployeeID JOIN Regions r ON t.RegionID = r.RegionID WHERE e.FirstName = 'Nancy' AND e.LastName = 'Davolio';
SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS NumberOfOrders FROM Employees e LEFT JOIN Orders o ON e.EmployeeID = o.EmployeeID WHERE e.Title = 'Sales Representative' AND YEAR(e.HireDate) = 1992 GROUP BY e.EmployeeID, e.FirstName, e.LastName;
SELECT SUM(od.Quantity * p.Price * (1 - od.Discount)) AS TotalPayment FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Vegie-spread';
SELECT DISTINCT Suppliers.SupplierName FROM Suppliers JOIN Products ON Suppliers.SupplierID = Products.SupplierID JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID JOIN Orders ON OrderDetails.OrderID = Orders.OrderID WHERE Orders.OrderDate = '1996-08-14';
SELECT p.ProductName, s.SupplierName FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE od.OrderID = 10337 AND p.ReorderLevel = (     SELECT MAX(ReorderLevel)     FROM Products );
SELECT S.ShipperName FROM Shippers S JOIN Orders O ON S.ShipperID = O.ShipperID WHERE O.OrderDate >= '1998-01-01' AND O.OrderDate < '1998-04-01' GROUP BY S.ShipperName ORDER BY COUNT(O.OrderID) DESC LIMIT 1;
SELECT COUNT(*) FROM Customers WHERE City = 'London';
SELECT CONCAT(FirstName, ' ', LastName) AS Title FROM Employees WHERE FirstName = 'Michael' AND LastName = 'Suyama';
SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM Employees WHERE BirthDate = '1955-03-04 00:00:00';
SELECT e.FirstName  FROM Employees e  JOIN Orders o ON e.EmployeeID = o.EmployeeID  WHERE o.OrderID = 10250;
SELECT COUNT(*)  FROM Orders o JOIN Employees e ON o.EmployeeID = e.EmployeeID WHERE e.City = 'Tacoma';
SELECT c.Country FROM Orders o JOIN Employees e ON o.EmployeeID = e.EmployeeID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE o.OrderID = 10257;
SELECT CONCAT(FirstName, ' ', LastName) AS EmployeeTitle FROM Employees WHERE EmployeeID = (SELECT EmployeeID FROM Orders WHERE OrderID = 10270);
SELECT Customers.Phone FROM Customers JOIN Orders ON Customers.CustomerID = Orders.CustomerID WHERE Orders.OrderID = 10264;
SELECT Customers.City, Customers.Country FROM Orders JOIN Customers ON Orders.CustomerID = Customers.CustomerID WHERE Orders.OrderID = 10276;
SELECT MAX(E.Salary) AS HighestSalary, AVG(E.Salary) AS AverageSalary FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID JOIN Shippers S ON O.ShipperID = S.ShipperID WHERE S.ShipCountry = 'Brazil';
SELECT      (SUM(CASE WHEN o.ShippedDate BETWEEN '1996-01-01' AND '1996-12-31' THEN e.Salary ELSE 0 END) / SUM(e.Salary)) * 100 AS percentage_salary FROM      Employees e JOIN      Orders o ON e.EmployeeID = o.EmployeeID WHERE      o.ShippedDate IS NOT NULL;
SELECT HireDate  FROM Employees  WHERE EmployeeID = (SELECT EmployeeID FROM Orders WHERE OrderID = 10281);
SELECT COUNT(*) AS OrderCount FROM Orders WHERE EmployeeID IN (SELECT EmployeeID FROM Employees WHERE ReportsTo = 5);
SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM Employees WHERE EmployeeID = (SELECT EmployeeID FROM Orders WHERE OrderID = 10280);
SELECT Shippers.ShipperName  FROM Orders  JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID  WHERE Orders.OrderID = 10260;
SELECT COUNT(*)  FROM Orders o JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.ShipperName = 'United Package';
SELECT S.Phone  FROM Orders O  JOIN Shippers S ON O.ShipperID = S.ShipperID  WHERE O.OrderID = 10296;
SELECT COUNT(DISTINCT l_linenumber) AS returned_item_kinds FROM lineitem WHERE l_returnflag = 'R' AND l_orderkey = 5;
SELECT MAX(l_shipdate)  FROM lineitem  WHERE l_orderkey = 1;
SELECT o_orderkey, o_orderdate FROM orders WHERE o_orderkey IN (4, 36) ORDER BY o_orderdate ASC LIMIT 1;
SELECT o_comment  FROM orders  WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders);
SELECT c_phone FROM customer WHERE c_name = 'Customer#000000001';
SELECT COUNT(*)  FROM orders  JOIN customer ON orders.o_custkey = customer.c_custkey  WHERE customer.c_mktsegment = 'HOUSEHOLD';
SELECT MAX(o_totalprice)  FROM orders  JOIN customer ON orders.o_custkey = customer.c_custkey  WHERE customer.c_mktsegment = 'HOUSEHOLD';
SELECT o_comment  FROM orders  JOIN customer ON orders.o_custkey = customer.c_custkey  WHERE customer.c_mktsegment = 'HOUSEHOLD';
SELECT c_name  FROM customer  JOIN orders ON customer.c_custkey = orders.o_custkey  WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders)  LIMIT 1;
SELECT o_orderkey  FROM orders o  JOIN customer c ON o.o_custkey = c.c_custkey  WHERE c.c_acctbal < 0;
SELECT COUNT(*)  FROM orders o JOIN customer c ON o.o_custkey = c.c_custkey WHERE c.c_mktsegment = 'HOUSEHOLD' AND o.o_orderpriority = '1-URGENT';
SELECT COUNT(*)  FROM customer  WHERE c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'BRAZIL');
SELECT c_phone  FROM customer  WHERE c_mktsegment = 'HOUSEHOLD'  AND c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'BRAZIL');
SELECT COUNT(*)  FROM customer  WHERE c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'GERMANY')  AND c_acctbal > 1000;
SELECT COUNT(*) AS total_orders FROM orders o JOIN customer c ON o.o_custkey = c.c_custkey JOIN nation n ON c.c_nationkey = n.n_nationkey WHERE n.n_name = 'GERMANY';
SELECT SUM(o_totalprice) AS total_price FROM orders o JOIN customer c ON o.o_custkey = c.c_custkey JOIN nation n ON c.c_nationkey = n.n_nationkey WHERE n.n_name = 'GERMANY';
SELECT o_orderkey FROM orders o JOIN customer c ON o.o_custkey = c.c_custkey JOIN nation n ON c.c_nationkey = n.n_nationkey WHERE n.n_name = 'GERMANY' ORDER BY o.o_orderdate ASC LIMIT 1;
SELECT AVG(o_totalprice) AS average_order_price FROM orders o JOIN customer c ON o.o_custkey = c.c_custkey JOIN nation n ON c.c_nationkey = n.n_nationkey WHERE n.n_name = 'GERMANY';
SELECT      (COUNT(CASE WHEN n.n_name = 'GERMANY' THEN c.c_custkey END) * 100.0 / COUNT(c.c_custkey)) AS percentage FROM      customer c JOIN      nation n ON c.c_nationkey = n.n_nationkey;
SELECT COUNT(DISTINCT n_nationkey)  FROM nation  WHERE n_regionkey = 2;
SELECT n.n_name  FROM supplier s  JOIN nation n ON s.s_nationkey = n.n_nationkey  WHERE s.s_suppkey = 34;
SELECT r.r_name FROM supplier s JOIN nation n ON s.s_nationkey = n.n_nationkey JOIN region r ON n.n_regionkey = r.r_regionkey WHERE s.s_name = 'Supplier#000000129';
SELECT n.n_name  FROM customer c  JOIN nation n ON c.c_nationkey = n.n_nationkey  WHERE c.c_name = 'Customer#000000055';
SELECT r.r_name  FROM customer c  JOIN nation n ON c.c_nationkey = n.n_nationkey  JOIN region r ON n.n_regionkey = r.r_regionkey  WHERE c.c_custkey = 106936;
SELECT COUNT(*)  FROM customer  WHERE c_acctbal < 0  AND c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'MOROCCO');
SELECT MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)) AS discounted_price FROM lineitem JOIN orders ON lineitem.l_orderkey = orders.o_orderkey WHERE orders.o_totalprice = 231499.38 AND lineitem.l_suppkey = 9397;
SELECT DISTINCT l.l_suppkey FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE o.o_totalprice = 218195.43 AND l.l_returnflag = 'R';
SELECT SUM(MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax))) AS charge FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE o.o_clerk = 'Clerk#000000936'    AND o.o_orderstatus = '4-NOT SPECIFIED'    AND o.o_orderdate = '1995-03-13'    AND l.l_shipmode = 'TRUCK';
SELECT SUBTRACT(l_receiptdate, l_commitdate) AS delivery_time FROM lineitem l JOIN orders o ON l.l_orderkey = o.o_orderkey WHERE o.o_orderdate = '1996-07-27' AND o.o_custkey = 129301 ORDER BY l.l_linenumber LIMIT 1;
SELECT c_name  FROM customer  JOIN orders ON customer.c_custkey = orders.o_custkey  WHERE orders.o_clerk = 'Clerk#000000803' AND orders.o_orderdate = '1997-12-10';
SELECT SUM(l_extendedprice * (1 - l_discount) - (ps_supplycost * l_quantity) ) AS profit FROM lineitem JOIN partsupp ON lineitem.l_partkey = partsupp.ps_partkey WHERE lineitem.l_suppkey = 7414 AND lineitem.l_orderkey = 817154;
SELECT n.n_name FROM supplier s JOIN nation n ON s.s_nationkey = n.n_nationkey WHERE s.s_acctbal < 0 GROUP BY n.n_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN r_name = 'EUROPE' THEN 1 END) * 100.0 / COUNT(n_name)) AS percentage FROM      nation n JOIN      region r ON n.n_regionkey = r.r_regionkey;
SELECT      (COUNT(CASE WHEN s_acctbal < 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      supplier s JOIN      nation n ON s.s_nationkey = n.n_nationkey WHERE      n.n_name = 'JAPAN';
SELECT c_name  FROM customer  WHERE c_acctbal = (SELECT MIN(c_acctbal) FROM customer);
SELECT COUNT(*)  FROM orders o  JOIN lineitem l ON o.o_orderkey = l.l_orderkey  WHERE YEAR(l.l_shipdate) = 1998;
SELECT COUNT(*) AS num_customers_in_debt FROM customer WHERE c_acctbal < 0;
SELECT COUNT(l_linenumber)  FROM lineitem  WHERE l_shipmode = 'AIR'    AND YEAR(l_shipdate) = 1994    AND l_returnflag = 'R';
SELECT COUNT(*)  FROM customer  WHERE c_mktsegment = 'AUTOMOBILE';
SELECT l_orderkey FROM lineitem WHERE l_extendedprice = (SELECT MAX(l_extendedprice) FROM lineitem) LIMIT 2;
SELECT l_shipdate FROM orders JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders);
SELECT n.n_name FROM customer c JOIN nation n ON c.c_nationkey = n.n_nationkey GROUP BY n.n_name ORDER BY COUNT(c.c_custkey) DESC LIMIT 1;
SELECT COUNT(*)  FROM orders o  JOIN lineitem l ON o.o_orderkey = l.l_orderkey  WHERE o.o_orderpriority = '1-URGENT'  AND DATEDIFF(l.l_shipdate, o.o_orderdate) = 1;
SELECT COUNT(*)  FROM customer c  JOIN nation n ON c.c_nationkey = n.n_nationkey  WHERE c.acctbal < 0 AND c.c_mktsegment = 'HOUSEHOLD' AND n.n_name = 'RUSSIA';
SELECT COUNT(*)  FROM supplier s  JOIN nation n ON s.s_nationkey = n.n_nationkey  WHERE n.n_name = 'JAPAN';
SELECT COUNT(*)  FROM orders  WHERE o_orderpriority = '3-MEDIUM'  AND o_orderkey IN (SELECT l_orderkey FROM lineitem WHERE l_shipmode = 'SHIP');
SELECT c_mktsegment FROM customer c JOIN nation n ON c.c_nationkey = n.n_nationkey WHERE n.n_name = 'UNITED STATES' GROUP BY c_mktsegment ORDER BY COUNT(c.c_custkey) DESC LIMIT 1;
SELECT n_name  FROM nation  JOIN region ON nation.n_regionkey = region.r_regionkey  WHERE region.r_name = 'ASIA';
SELECT p.p_name  FROM part p  JOIN partsupp ps ON p.p_partkey = ps.ps_partkey  WHERE p.p_mfgr = 'Manufacturer#3' AND ps.ps_supplycost = 1000;
SELECT COUNT(DISTINCT n_nationkey)  FROM nation  JOIN region ON nation.n_regionkey = region.r_regionkey  WHERE region.r_comment = 'asymptotes sublate after the r';
SELECT COUNT(*)  FROM part  JOIN lineitem ON part.p_partkey = lineitem.l_partkey  WHERE part.p_mfgr = 'Manufacturer#5'    AND part.p_retailprice < 1000    AND lineitem.l_shipmode = 'RAIL';
SELECT SUM(SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount))), l_quantity) - (MULTIPLY(ps_supplycost, l_quantity))) AS profit FROM lineitem JOIN part ON lineitem.l_partkey = part.p_partkey JOIN partsupp ON lineitem.l_suppkey = partsupp.ps_suppkey WHERE part.p_name = 'smoke turquoise purple blue salmon'   AND lineitem.l_receiptdate = '1996-05-07'   AND lineitem.l_shipinstruct = 'DELIVER IN PERSON';
SELECT AVG(l_extendedprice) AS avg_price_before_discount FROM lineitem WHERE l_orderkey IN (     SELECT o_orderkey     FROM orders     ORDER BY o_totalprice DESC     LIMIT 10 );
SELECT c.c_name,         COUNT(o.o_orderkey) AS order_count,         AVG(o.o_totalprice) AS avg_total_price FROM customer c JOIN orders o ON c.c_custkey = o.o_custkey GROUP BY c.c_name ORDER BY order_count DESC LIMIT 3;
SELECT COUNT(l_linenumber)  FROM lineitem  WHERE l_shipdate = '1993-12-04';
SELECT o_orderdate  FROM orders  WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders);
SELECT      (COUNT(CASE WHEN c_acctbal < 0 THEN 1 END) * 100.0 / COUNT(c_custkey)) AS percentage FROM      customer;
SELECT COUNT(*) AS nearly_out_of_stock_count FROM partsupp WHERE ps_availqty < 10;
SELECT      (COUNT(CASE WHEN p_mfgr = 'Manufacturer#3' THEN p_partkey END) * 100.0 / COUNT(p_partkey)) AS percentage FROM      part;
SELECT p_name  FROM part  WHERE p_type = 'MEDIUM PLATED BRASS'  LIMIT 5;
SELECT COUNT(DISTINCT o.o_orderkey) AS urgent_orders FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE l.l_shipdate LIKE '1998-11-%' AND l.l_shipmode = 'AIR' AND o.o_orderpriority = '1-URGENT';
SELECT COUNT(*)  FROM customer  WHERE c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'INDIA');
SELECT COUNT(*)  FROM customer  WHERE c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'MOROCCO')  AND c_acctbal < 0;
SELECT n_nationkey, n_name  FROM nation  WHERE n_regionkey = (SELECT r_regionkey FROM region WHERE r_name = 'Africa');
SELECT SUM(o_totalprice) AS total_price FROM orders WHERE o_custkey = (SELECT c_custkey FROM customer WHERE c_name = 'Customer#000000013');
SELECT COUNT(l.l_linenumber) AS total_items,         SUM(l.l_extendedprice * (1 - l.l_discount) * (1 + l.l_tax)) AS total_charges FROM customer c JOIN orders o ON c.c_custkey = o.o_custkey JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE c.c_name = 'Customer#000021159';
SELECT SUM(l_extendedprice * (1 - l_discount) - (ps_supplycost * l_quantity)) AS total_profit FROM lineitem JOIN part ON lineitem.l_partkey = part.p_partkey JOIN partsupp ON lineitem.l_suppkey = partsupp.ps_suppkey WHERE part.p_name = 'chocolate floral blue coral cyan';
SELECT      (COUNT(CASE WHEN n.n_name = 'GERMANY' THEN s.s_suppkey END) * 100.0 / COUNT(s.s_suppkey)) AS percentage FROM      supplier s JOIN      nation n ON s.s_nationkey = n.n_nationkey;
SELECT s_name  FROM supplier s  JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey  JOIN part p ON ps.ps_partkey = p.p_partkey  WHERE p.p_name = 'smoke red pale saddle plum';
SELECT COUNT(*)  FROM supplier s  JOIN nation n ON s.s_nationkey = n.n_nationkey  JOIN region r ON n.n_regionkey = r.r_regionkey  WHERE r.r_name = 'MIDDLE EAST' AND s.s_acctbal < 0;
SELECT p.p_name FROM lineitem l JOIN part p ON l.l_partkey = p.p_partkey WHERE l.l_shipmode = 'RAIL' AND l.l_shipdate = '1995-12-01' AND l.l_discount = 0.1;
SELECT p.p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN supplier s ON ps.ps_suppkey = s.s_suppkey WHERE s.s_name = 'Supplier#000000018' AND ps.ps_supplycost > 900;
SELECT COUNT(DISTINCT o.o_orderkey) AS orders_shipped_1994 FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE YEAR(l.l_shipdate) = 1994;
SELECT COUNT(*)  FROM lineitem  WHERE l_shipmode = 'RAIL' AND l_quantity < 30;
SELECT COUNT(*)  FROM customer  WHERE c_mktsegment = 'FURNITURE' AND c_nationkey = 1;
SELECT c_phone  FROM customer  WHERE c_acctbal = (SELECT MAX(c_acctbal) FROM customer);
SELECT o_orderpriority  FROM orders  WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders);
SELECT COUNT(*) AS total_orders FROM orders o JOIN customer c ON o.o_custkey = c.c_custkey JOIN nation n ON c.c_nationkey = n.n_nationkey WHERE n.n_name = 'UNITED STATES';
SELECT COUNT(*)  FROM customer  WHERE c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'BRAZIL')  AND c_mktsegment = 'automobile';
SELECT o_comment  FROM orders  JOIN customer ON orders.o_custkey = customer.c_custkey  WHERE customer.c_mktsegment = 'Furniture'  LIMIT 5;
SELECT n_name  FROM nation  WHERE n_regionkey = (SELECT r_regionkey FROM region WHERE r_name = 'ASIA');
SELECT n_name  FROM nation n  JOIN region r ON n.n_regionkey = r.r_regionkey  WHERE r.r_comment = 'furiously express accounts wake sly';
SELECT COUNT(*) AS total_suppliers FROM supplier s JOIN nation n ON s.s_nationkey = n.n_nationkey WHERE n.n_name = 'GERMANY';
SELECT COUNT(*)  FROM customer  WHERE c_nationkey IN (SELECT n_nationkey FROM nation WHERE n_name IN (SELECT r_regionkey FROM region WHERE r_name = 'ASIA'))  AND c_acctbal < 0;
SELECT c_phone  FROM customer  WHERE c_custkey = (     SELECT o_custkey      FROM orders      ORDER BY o_totalprice DESC      LIMIT 1 );
SELECT COUNT(DISTINCT l.l_partkey) AS product_count FROM lineitem l JOIN part p ON l.l_partkey = p.p_partkey WHERE p.p_retailprice > 1000 AND l.l_shipmode = 'SHIP';
SELECT c.c_name, c.c_mktsegment FROM customer c JOIN orders o ON c.c_custkey = o.o_custkey WHERE o.o_totalprice = 199180.63;
SELECT n.n_name AS nation, r.r_name AS region FROM customer c JOIN nation n ON c.c_nationkey = n.n_nationkey JOIN region r ON n.n_regionkey = r.r_regionkey WHERE c.c_address = 'wH55UnX7 VI';
SELECT COUNT(*)  FROM customer c  JOIN nation n ON c.c_nationkey = n.n_nationkey  WHERE n.n_name = 'BRAZIL' AND c.c_acctbal < 1000;
SELECT n.n_name FROM customer c JOIN nation n ON c.c_nationkey = n.n_nationkey WHERE c.c_mktsegment = 'BUILDING'  AND c.c_acctbal > (SELECT AVG(c_acctbal) * 0.8 FROM customer);
SELECT      (COUNT(CASE WHEN n.n_name = 'United States' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      customer c JOIN      nation n ON c.c_nationkey = n.n_nationkey WHERE      c.c_acctbal < 4000;
SELECT c_name, c_phone  FROM customer  WHERE c_acctbal > 9000;
SELECT AVG(l_quantity) AS average_items_shipped FROM lineitem WHERE l_shipdate BETWEEN '1994-04-01' AND '1994-04-30';
SELECT o_orderkey  FROM orders  WHERE o_totalprice BETWEEN 200000 AND 300000;
SELECT p_partkey  FROM part  WHERE p_retailprice > (SELECT AVG(p_retailprice) FROM part);
SELECT      (COUNT(CASE WHEN ps_supplycost > 500 THEN 1 END) * 100.0 / COUNT(ps_suppkey)) AS percentage FROM      partsupp;
SELECT s_suppkey, s_acctbal FROM supplier ORDER BY s_acctbal DESC LIMIT 10;
SELECT COUNT(DISTINCT o.o_custkey) AS customer_count FROM orders o JOIN customer c ON o.o_custkey = c.c_custkey WHERE c.c_acctbal > 0 AND o.o_orderpriority = '1-URGENT';
SELECT c_name, c_phone  FROM customer  WHERE c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'INDIA')  AND c_acctbal > (SELECT AVG(c_acctbal) FROM customer);
SELECT p.p_partkey, p.p_name, ps.ps_supplycost FROM partsupp ps JOIN part p ON ps.ps_partkey = p.p_partkey JOIN supplier s ON ps.ps_suppkey = s.s_suppkey WHERE s.s_name = 'Supplier#000000654' ORDER BY ps.ps_supplycost DESC LIMIT 5;
SELECT      (COUNT(CASE WHEN c_mktsegment = 'AUTOMOBILE' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      customer c JOIN      nation n ON c.c_nationkey = n.n_nationkey WHERE      n.n_name = 'FRANCE';
SELECT p.p_name FROM part p JOIN lineitem l ON p.p_partkey = l.l_partkey JOIN partsupp ps ON p.p_partkey = ps.ps_partkey GROUP BY p.p_name ORDER BY SUM(l.l_extendedprice * (1 - l.l_discount) - ps.ps_supplycost * l.l_quantity) DESC LIMIT 1;
SELECT n.n_name FROM nation n JOIN customer c ON n.n_nationkey = c.c_nationkey GROUP BY n.n_name HAVING COUNT(c.c_name) < (SELECT AVG(customer_count)                             FROM (SELECT COUNT(c_name) AS customer_count                                   FROM customer                                   GROUP BY c_nationkey) AS avg_counts) ORDER BY COUNT(c.c_name) ASC;
SELECT      (COUNT(CASE WHEN c_mktsegment = 'HOUSEHOLD' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      customer c JOIN      nation n ON c.c_nationkey = n.n_nationkey JOIN      region r ON n.n_regionkey = r.r_regionkey WHERE      r.r_name = 'AFRICA';
SELECT p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey ORDER BY ps.ps_availqty DESC LIMIT 10;
SELECT      (AVG(CASE WHEN l_shipmode = 'SHIP' THEN p.p_retailprice END) -       AVG(CASE WHEN l_shipmode = 'AIR' THEN p.p_retailprice END)) AS price_difference FROM      lineitem l JOIN      part p ON l.l_partkey = p.p_partkey;
SELECT AVG(l_discount) AS average_discount FROM lineitem l JOIN part p ON l.l_partkey = p.p_partkey WHERE p.p_mfgr = 'Manufacturer#5';
SELECT COUNT(DISTINCT l.l_partkey) AS medium_priority_parts FROM lineitem l JOIN orders o ON l.l_orderkey = o.o_orderkey WHERE l.l_shipmode = 'RAIL' AND o.o_orderpriority = '3-MEDIUM';
SELECT      (COUNT(CASE WHEN s_acctbal < avg_acctbal THEN 1 END) * 100.0 / COUNT(s_suppkey)) AS percentage FROM      supplier s JOIN      nation n ON s.s_nationkey = n.n_nationkey JOIN      region r ON n.n_regionkey = r.r_regionkey,     (SELECT AVG(s_acctbal) AS avg_acctbal       FROM supplier s      JOIN nation n ON s.s_nationkey = n.n_nationkey      JOIN region r ON n.n_regionkey = r.r_regionkey      WHERE r.r_name = 'EUROPE') AS avg_table WHERE      r.r_name = 'EUROPE';
SELECT      (AVG(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN l.l_orderkey END) -       AVG(CASE WHEN YEAR(o.o_orderdate) = 1996 THEN l.l_orderkey END)) AS avg_low_priority_diff FROM      lineitem l JOIN      orders o ON l.l_orderkey = o.o_orderkey WHERE      o.o_orderpriority = '5-LOW' AND      YEAR(l.l_shipdate) IN (1995, 1996) AND      l.l_shipmode = 'TRUCK';
SELECT c_custkey FROM customer WHERE c_acctbal < 0;
SELECT l_orderkey, l_partkey, (l_extendedprice * (1 - l_discount)) AS price_after_discount FROM lineitem ORDER BY l_orderkey, price_after_discount LIMIT 3;
SELECT COUNT(DISTINCT l_orderkey)  FROM lineitem  WHERE l_returnflag = 'R' AND l_quantity > 10;
SELECT SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS total_price FROM lineitem WHERE l_shipmode = 'AIR' AND l_shipinstruct = 'NONE';
SELECT COUNT(*)  FROM orders o1  WHERE o1.o_orderpriority <> '1-URGENT'  AND o1.o_orderdate = (SELECT MAX(o2.o_orderdate)                         FROM orders o2                         WHERE o2.o_orderpriority <> '1-URGENT')  AND EXISTS (SELECT 1              FROM orders o3              WHERE o3.o_orderkey = o1.o_orderkey              AND o3.o_orderpriority = '1-URGENT');
SELECT COUNT(*)  FROM supplier s  JOIN nation n ON s.s_nationkey = n.n_nationkey  WHERE n.n_name = 'EGYPT' AND s.s_acctbal < 0;
SELECT COUNT(l.l_linenumber)  FROM lineitem l  JOIN orders o ON l.l_orderkey = o.o_orderkey  WHERE l.l_shipmode = 'REG AIR' AND o.o_orderdate = '1995-03-22';
SELECT COUNT(*)  FROM supplier s  JOIN nation n ON s.s_nationkey = n.n_nationkey  JOIN region r ON n.n_regionkey = r.r_regionkey  WHERE r.r_name = 'EUROPE';
SELECT c.c_mktsegment FROM customer c JOIN orders o ON c.c_custkey = o.o_custkey WHERE o.o_orderdate BETWEEN '1994-04-01' AND '1994-04-30' GROUP BY c.c_custkey, c.c_mktsegment ORDER BY COUNT(o.o_orderkey) DESC LIMIT 1;
SELECT p.p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN supplier s ON ps.ps_suppkey = s.s_suppkey WHERE s.s_name = 'Supplier#000000034';
SELECT ps_supplycost  FROM partsupp  JOIN part ON partsupp.ps_partkey = part.p_partkey  WHERE part.p_type = 'LARGE BURNISHED COPPER';
SELECT COUNT(DISTINCT c.c_custkey)  FROM customer c  JOIN orders o ON c.c_custkey = o.o_custkey  JOIN nation n ON c.c_nationkey = n.n_nationkey  WHERE n.n_name = 'MOZAMBIQUE' AND o.o_orderpriority = '5-LOW';
SELECT p.p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey WHERE ps.ps_availqty < 10 ORDER BY ps.ps_supplycost ASC LIMIT 1;
SELECT COUNT(DISTINCT o_clerk)  FROM orders  WHERE o_custkey IN (     SELECT c_custkey      FROM customer      WHERE c_address = 'uFTe2u518et8Q8UC' );
SELECT DISTINCT p.p_name FROM part p JOIN lineitem l ON p.p_partkey = l.l_partkey WHERE l.l_discount = 0.0000;
SELECT COUNT(*)  FROM supplier s  JOIN nation n ON s.s_nationkey = n.n_nationkey  WHERE n.n_name = 'GERMANY' AND s.s_comment LIKE 'carefully regular packages%';
SELECT COUNT(*)  FROM lineitem l  JOIN orders o ON l.l_orderkey = o.o_orderkey  WHERE l.l_shipdate = '1994-11-19' AND o.o_orderdate = '1994-09-21';
SELECT AVG((SUM(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity)) / COUNT(ps_partkey)) AS average_profit FROM lineitem JOIN partsupp ON lineitem.l_partkey = partsupp.ps_partkey JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_type = 'PROMO BRUSHED STEEL';
SELECT (COUNT(CASE WHEN n.n_name = 'IRAN' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM customer c JOIN nation n ON c.c_nationkey = n.n_nationkey WHERE c.c_mktsegment = 'HOUSEHOLD';
SELECT c_mktsegment, c_name, c_address, c_phone  FROM customer  WHERE c_custkey = 3;
SELECT l_linenumber  FROM lineitem  WHERE l_discount = 0.1  LIMIT 3;
SELECT COUNT(*)  FROM lineitem  WHERE l_quantity > 40 AND l_shipmode = 'AIR';
SELECT l_shipmode, COUNT(*) AS instruction_count FROM lineitem WHERE l_shipinstruct = 'DELIVER IN PERSON' AND l_shipmode IN ('RAIL', 'MAIL') GROUP BY l_shipmode ORDER BY instruction_count DESC LIMIT 1;
SELECT o_totalprice, o_orderpriority  FROM orders  WHERE o_orderkey = 33;
SELECT COUNT(*)  FROM orders  WHERE YEAR(o_orderdate) = 1998 AND o_totalprice < 950;
SELECT c_name  FROM customer  WHERE c_acctbal < 0  LIMIT 3;
SELECT l_extendedprice * (1 - l_discount) AS discounted_price FROM lineitem WHERE l_linenumber = 1;
SELECT      COUNT(CASE WHEN l_returnflag IN ('A', 'N') THEN l_linenumber END) -      COUNT(CASE WHEN l_returnflag = 'R' THEN l_linenumber END) AS difference FROM      lineitem WHERE      l_extendedprice < 16947.7;
SELECT ps_supplycost  FROM partsupp  JOIN part ON partsupp.ps_partkey = part.p_partkey  WHERE part.p_type = 'large plated tin';
SELECT p_name  FROM part  JOIN partsupp ON part.p_partkey = partsupp.ps_partkey  WHERE ps_availqty > 9998  LIMIT 3;
SELECT p.p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey WHERE p.p_container = 'WRAP BAG' AND ps.ps_supplycost < 10 LIMIT 2;
SELECT n.n_name  FROM supplier s  JOIN nation n ON s.s_nationkey = n.n_nationkey  WHERE s.s_suppkey = 1;
SELECT n_name  FROM nation  WHERE n_regionkey = (SELECT r_regionkey FROM region WHERE r_name = 'Africa');
SELECT r.r_name FROM region r JOIN nation n ON r.r_regionkey = n.n_regionkey GROUP BY r.r_name ORDER BY COUNT(n.n_nationkey) ASC LIMIT 1;
SELECT COUNT(*)  FROM customer c  JOIN nation n ON c.c_nationkey = n.n_nationkey  WHERE c.c_mktsegment = 'FURNITURE' AND n.n_name = 'Iraq';
SELECT c.c_name  FROM customer c  JOIN orders o ON c.c_custkey = o.o_custkey  WHERE c.c_custkey = 93697 AND o.o_totalprice = 191918.92;
SELECT n.n_name, r.r_name FROM customer c JOIN nation n ON c.c_nationkey = n.n_nationkey JOIN region r ON n.n_regionkey = r.r_regionkey WHERE c.c_name = 'Customer#000000008';
SELECT      DATEDIFF(l_receiptdate, l_commitdate) AS delivery_time,      o_clerk  FROM      orders  JOIN      lineitem ON orders.o_orderkey = lineitem.l_orderkey  WHERE      orders.o_orderkey = 6;
SELECT COUNT(*)  FROM supplier s  JOIN nation n ON s.s_nationkey = n.n_nationkey  WHERE n.n_name = 'Japan' AND s.s_acctbal < 0;
SELECT c_name  FROM customer  ORDER BY c_acctbal ASC  LIMIT 1;
SELECT o_orderdate  FROM orders  WHERE o_orderpriority = '1-URGENT';
SELECT COUNT(*)  FROM lineitem  WHERE l_shipinstruct = 'DELIVER IN PERSON';
SELECT MAX(s_acctbal) AS largest_supplier_account_balance FROM supplier;
SELECT COUNT(*) AS close_to_out_of_stock FROM partsupp WHERE ps_availqty < 10;
SELECT n_name  FROM nation  WHERE n_regionkey = (SELECT r_regionkey FROM region WHERE r_name = 'EUROPE');
SELECT ps_supplycost  FROM partsupp  JOIN part ON partsupp.ps_partkey = part.p_partkey  WHERE part.p_name = 'violet olive rose ivory sandy';
SELECT c_phone  FROM customer  WHERE c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Ethiopia');
SELECT SUM(o_totalprice) AS total_price FROM orders WHERE o_custkey = (SELECT c_custkey FROM customer WHERE c_phone = '627-220-3983');
SELECT DISTINCT l_shipmode  FROM lineitem  JOIN orders ON lineitem.l_orderkey = orders.o_orderkey  WHERE orders.o_orderdate = '1994-12-31';
SELECT s_acctbal  FROM supplier  WHERE s_suppkey = (     SELECT ps_suppkey      FROM partsupp      GROUP BY ps_suppkey      ORDER BY COUNT(ps_partkey) DESC      LIMIT 1 );
SELECT n.n_name  FROM supplier s  JOIN nation n ON s.s_nationkey = n.n_nationkey  WHERE s.s_acctbal = 4393.04;
SELECT r.r_name FROM region r JOIN nation n ON r.r_regionkey = n.n_regionkey JOIN customer c ON n.n_nationkey = c.c_nationkey GROUP BY r.r_name ORDER BY COUNT(c.c_custkey) DESC LIMIT 1;
SELECT DISTINCT c_phone  FROM customer  JOIN orders ON customer.c_custkey = orders.o_custkey  WHERE orders.o_totalprice > 300000;
SELECT DISTINCT o.o_clerk FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE l.l_shipmode = 'MAIL';
SELECT n.n_name FROM supplier s JOIN nation n ON s.s_nationkey = n.n_nationkey ORDER BY s.s_acctbal ASC LIMIT 5;
SELECT s_address  FROM supplier  WHERE s_suppkey IN (     SELECT ps_suppkey      FROM partsupp      WHERE ps_partkey IN (         SELECT p_partkey          FROM part          WHERE p_size = (SELECT MAX(p_size) FROM part)     ) );
SELECT p.p_name, s.s_name, MAX(l.l_extendedprice * (1 - l.l_discount) - (ps.ps_supplycost * l.l_quantity)) AS profit FROM lineitem l JOIN partsupp ps ON l.l_partkey = ps.ps_partkey JOIN part p ON ps.ps_partkey = p.p_partkey JOIN supplier s ON ps.ps_suppkey = s.s_suppkey GROUP BY p.p_name, s.s_name ORDER BY profit DESC LIMIT 1;
SELECT (COUNT(s.s_suppkey) FILTER (WHERE n.n_name = 'ASIA') * 100.0 / COUNT(s.s_suppkey)) AS proportion FROM supplier s JOIN nation n ON s.s_nationkey = n.n_nationkey;
SELECT o_totalprice FROM orders WHERE o_orderkey = 32;
SELECT COUNT(DISTINCT l_orderkey) AS order_keys_not_discounted FROM lineitem WHERE l_discount = 0;
SELECT * FROM lineitem WHERE l_shipmode = 'truck' AND YEAR(l_shipdate) < 1997;
SELECT COUNT(*)  FROM lineitem  WHERE l_returnflag = 'R' AND YEAR(l_shipdate) = 1998;
SELECT l_linenumber, l_quantity  FROM lineitem  WHERE l_shipmode = 'AIR'  ORDER BY l_quantity DESC  LIMIT 1;
SELECT c_name  FROM customer  WHERE c_acctbal < 0;
SELECT COUNT(*)  FROM customer c  JOIN nation n ON c.c_nationkey = n.n_nationkey  WHERE c.c_mktsegment = 'household' AND n.n_name = 'Germany';
SELECT c.c_phone FROM customer c JOIN orders o ON c.c_custkey = o.o_custkey WHERE o.o_orderpriority = '1-URGENT';
SELECT c.c_name FROM customer c JOIN orders o ON c.c_custkey = o.o_custkey JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE l.l_discount = (SELECT MAX(l_discount) FROM lineitem);
SELECT o.o_orderkey, o.o_totalprice, l.l_shipdate FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey ORDER BY o.o_totalprice DESC LIMIT 5;
SELECT o_comment  FROM orders  JOIN customer ON orders.o_custkey = customer.c_custkey  WHERE customer.c_mktsegment = 'FURNITURE';
SELECT c_name  FROM customer  JOIN orders ON customer.c_custkey = orders.o_custkey  WHERE orders.o_totalprice > 300000;
SELECT c.c_name  FROM customer c  JOIN nation n ON c.c_nationkey = n.n_nationkey  WHERE n.n_name = 'INDIA' AND c.c_acctbal > 5000;
SELECT s_phone  FROM supplier s  JOIN nation n ON s.s_nationkey = n.n_nationkey  WHERE n.n_name = 'JAPAN';
SELECT s_name  FROM supplier s  JOIN nation n ON s.s_nationkey = n.n_nationkey  WHERE n.n_name = 'ARGENTINA' AND s.s_acctbal < 0;
SELECT COUNT(DISTINCT n.n_nationkey) AS country_count FROM nation n JOIN region r ON n.n_regionkey = r.r_regionkey WHERE r.r_name = 'ALGERIA';
SELECT DISTINCT c.c_name FROM customer c JOIN orders o ON c.c_custkey = o.o_custkey JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE l.l_discount = 0.1  AND (o.o_orderdate BETWEEN '1994-01-01' AND '1995-01-01');
SELECT (COUNT(n.n_name) FILTER (WHERE r.r_name = 'America') * 100.0 / COUNT(n.n_name)) AS percentage FROM nation n JOIN region r ON n.n_regionkey = r.r_regionkey;
SELECT      (COUNT(CASE WHEN c_mktsegment = 'HOUSEHOLD' THEN 1 END) * 100.0 / COUNT(*)) AS household_percentage FROM      customer c JOIN      nation n ON c.c_nationkey = n.n_nationkey WHERE      n.n_name = 'Indonesia';
SELECT p_name  FROM part  WHERE p_type = 'PROMO BRUSHED STEEL';
SELECT p_comment  FROM part  WHERE p_name = 'burlywood plum powder puff mint';
SELECT COUNT(*)  FROM part  WHERE p_retailprice > 1900;
SELECT COUNT(*)  FROM part  WHERE p_type = 'PROMO BRUSHED STEEL' AND p_mfgr = 'Manufacturer#5';
SELECT DISTINCT p_brand  FROM part  WHERE p_type = 'PROMO BRUSHED STEEL';
SELECT p_name  FROM part  ORDER BY p_retailprice DESC  LIMIT 1;
SELECT p_name, p_size FROM part WHERE p_name IN ('pink powder drab lawn cyan', 'cornflower sky burlywood green beige') ORDER BY p_size DESC LIMIT 1;
SELECT COUNT(*)  FROM part  WHERE p_container = 'JUMBO CASE';
SELECT MIN(p_size)  FROM part  WHERE p_container = 'JUMBO CASE';
SELECT COUNT(*) FROM supplier WHERE s_acctbal < 0;
SELECT s_name FROM supplier ORDER BY s_acctbal DESC LIMIT 3;
SELECT s_phone  FROM supplier s  JOIN nation n ON s.s_nationkey = n.n_nationkey  WHERE n.n_name = 'Germany';
SELECT s_name  FROM supplier s  JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey  JOIN part p ON ps.ps_partkey = p.p_partkey  WHERE p.p_name = 'hot spring dodger dim light';
SELECT MIN(ps_supplycost)  FROM partsupp  JOIN part ON partsupp.ps_partkey = part.p_partkey  WHERE part.p_name = 'hot spring dodger dim light';
SELECT s.s_name FROM supplier s JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey JOIN part p ON ps.ps_partkey = p.p_partkey WHERE p.p_name = 'hot spring dodger dim light' AND ps.ps_supplycost = (     SELECT MIN(ps_supplycost)     FROM partsupp     JOIN part ON partsupp.ps_partkey = part.p_partkey     WHERE part.p_name = 'hot spring dodger dim light' );
SELECT SUM(ps_availqty) AS total_quantity_available FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light';
SELECT s.s_phone FROM supplier s JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey JOIN part p ON ps.ps_partkey = p.p_partkey WHERE p.p_name = 'hot spring dodger dim light' ORDER BY ps.ps_availqty DESC LIMIT 1;
SELECT s_name  FROM supplier  WHERE s_suppkey IN (     SELECT ps_suppkey      FROM partsupp      WHERE ps_partkey IN (         SELECT p_partkey          FROM part          WHERE p_retailprice = (SELECT MAX(p_retailprice) FROM part)     ) );
SELECT COUNT(DISTINCT s.s_suppkey)  FROM supplier s  JOIN nation n ON s.s_nationkey = n.n_nationkey  JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey  JOIN part p ON ps.ps_partkey = p.p_partkey  WHERE p.p_name = 'hot spring dodger dim light' AND n.n_name = 'VIETNAM';
SELECT COUNT(DISTINCT s.s_suppkey)  FROM supplier s  JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey  JOIN part p ON ps.ps_partkey = p.p_partkey  WHERE p.p_type = 'PROMO BRUSHED STEEL' AND s.s_acctbal < 0;
SELECT DISTINCT s.s_name FROM supplier s JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey JOIN part p ON ps.ps_partkey = p.p_partkey WHERE p.p_brand = 'Brand#55';
SELECT COUNT(*)  FROM part p  JOIN partsupp ps ON p.p_partkey = ps.ps_partkey  WHERE p.p_type = 'PROMO BRUSHED STEEL'  GROUP BY p.p_partkey  HAVING SUM(ps.ps_availqty) < 5000;
SELECT COUNT(DISTINCT o.o_orderkey) AS order_count FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey JOIN part p ON l.l_partkey = p.p_partkey WHERE p.p_name = 'hot spring dodger dim light';
SELECT SUM(l.l_quantity) AS total_quantity FROM lineitem l JOIN orders o ON l.l_orderkey = o.o_orderkey JOIN part p ON l.l_partkey = p.p_partkey WHERE p.p_name = 'hot spring dodger dim light';
SELECT l_orderkey FROM lineitem JOIN part ON lineitem.l_partkey = part.p_partkey WHERE part.p_container = 'JUMBO CASE' GROUP BY l_orderkey HAVING COUNT(lineitem.l_partkey) > 2;
SELECT COUNT(*)  FROM supplier s  JOIN nation n ON s.s_nationkey = n.n_nationkey  JOIN region r ON n.n_regionkey = r.r_regionkey  WHERE s.s_acctbal < 0 AND r.r_name = 'EUROPE';
SELECT COUNT(DISTINCT s.s_suppkey)  FROM supplier s  JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey  JOIN part p ON ps.ps_partkey = p.p_partkey  JOIN nation n ON s.s_nationkey = n.n_nationkey  JOIN region r ON n.n_regionkey = r.r_regionkey  WHERE p.p_name = 'hot spring dodger dim light' AND r.r_name = 'EUROPE';
SELECT DISTINCT s_phone FROM supplier s JOIN lineitem l ON s.s_suppkey = l.l_suppkey WHERE l.l_orderkey = 1;
SELECT COUNT(DISTINCT s.s_suppkey) AS in_debt_suppliers FROM supplier s JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey JOIN lineitem l ON ps.ps_partkey = l.l_partkey WHERE l.l_orderkey = 4 AND s.s_acctbal < 0;
SELECT COUNT(DISTINCT l.partkey) AS returned_parts_count FROM lineitem l JOIN supplier s ON l.suppkey = s.s_suppkey WHERE l.returnflag = 'R' AND s.acctbal < 0;
SELECT l_shipdate  FROM lineitem  JOIN part ON lineitem.l_partkey = part.p_partkey  WHERE part.p_name = 'burnished seashell gainsboro navajo chocolate'  AND lineitem.l_orderkey = 1;
SELECT l_quantity  FROM lineitem  WHERE l_orderkey = 1 AND l_partkey IN (SELECT p_partkey FROM part WHERE p_name = 'burnished seashell gainsboro navajo chocolate');
SELECT p.p_name, SUM(l.l_quantity) AS total_quantity FROM lineitem l JOIN part p ON l.l_partkey = p.p_partkey WHERE l.l_orderkey = 1 AND p.p_name IN ('salmon white grey tan navy', 'burnished seashell gainsboro navajo chocolate') GROUP BY p.p_name ORDER BY total_quantity DESC LIMIT 1;
SELECT MAX(l_discount)  FROM lineitem  JOIN orders ON lineitem.l_orderkey = orders.o_orderkey  JOIN part ON lineitem.l_partkey = part.p_partkey  WHERE part.p_name = 'burnished seashell gainsboro navajo chocolate';
SELECT DISTINCT l_shipmode  FROM lineitem  JOIN part ON lineitem.l_partkey = part.p_partkey  WHERE part.p_name = 'burnished seashell gainsboro navajo chocolate';
SELECT AVG(ps_supplycost) AS average_supply_cost FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light';
SELECT      (MAX(ps_supplycost) - MIN(ps_supplycost)) / MIN(ps_supplycost) * 100 AS percentage_difference FROM      partsupp WHERE      ps_partkey IN (SELECT p_partkey FROM part WHERE p_name = 'hot spring dodger dim light');
SELECT      (l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity) AS profit FROM      lineitem  JOIN      partsupp ON lineitem.l_partkey = partsupp.ps_partkey WHERE      lineitem.l_partkey = 98768 AND lineitem.l_orderkey = 1;
SELECT l_extendedprice * (1 - l_discount) AS discounted_price FROM lineitem JOIN part ON lineitem.l_partkey = part.p_partkey WHERE part.p_name = 'burnished seashell gainsboro navajo chocolate' AND lineitem.l_orderkey = 1;
SELECT c_mktsegment  FROM customer  WHERE c_acctbal = (SELECT MAX(c_acctbal) FROM customer);
SELECT COUNT(*)  FROM lineitem  WHERE YEAR(l_shipdate) = 1997 AND l_shipmode = 'MAIL';
SELECT COUNT(*) FROM customer WHERE c_mktsegment = 'FURNITURE';
SELECT COUNT(*)  FROM lineitem  WHERE YEAR(l_shipdate) = 1994 AND l_shipmode = 'TRUCK' AND l_returnflag = 'R';
SELECT COUNT(*)  FROM customer  WHERE c_mktsegment = 'MACHINERY' AND c_acctbal < 0;
SELECT COUNT(*)  FROM orders  WHERE o_clerk = 'Clerk#000000001'    AND o_orderpriority = '1-URGENT'    AND YEAR(o_orderdate) = 1997;
SELECT c.c_name FROM customer c JOIN orders o ON c.c_custkey = o.o_custkey JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE l_receiptdate IS NOT NULL AND l_commitdate IS NOT NULL ORDER BY DATEDIFF(l_receiptdate, l_commitdate) DESC LIMIT 1;
SELECT SUM(o_totalprice) AS total_price FROM orders o JOIN customer c ON o.o_custkey = c.c_custkey JOIN nation n ON c.c_nationkey = n.n_nationkey WHERE n.n_name = 'Argentina';
SELECT COUNT(DISTINCT c.c_custkey)  FROM customer c  JOIN orders o ON c.c_custkey = o.o_custkey  WHERE c.c_mktsegment = 'BUILDING' AND o.o_totalprice >= 50000;
SELECT n.n_name FROM nation n JOIN supplier s ON n.n_nationkey = s.s_nationkey GROUP BY n.n_name ORDER BY COUNT(s.s_suppkey) ASC LIMIT 1;
SELECT ps.ps_supplycost  FROM partsupp ps  JOIN part p ON ps.ps_partkey = p.p_partkey  WHERE p.p_name = 'medium metallic grey dodger linen';
SELECT n.n_name AS country, COUNT(*) AS indebted_supplier_count FROM supplier s JOIN nation n ON s.s_nationkey = n.n_nationkey WHERE s.s_acctbal < 0 GROUP BY n.n_name ORDER BY indebted_supplier_count DESC LIMIT 2;
SELECT p.p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey WHERE ps.ps_supplycost >= 1000;
SELECT n.n_name FROM supplier s JOIN nation n ON s.s_nationkey = n.n_nationkey WHERE s.s_acctbal = (SELECT MIN(s_acctbal) FROM supplier);
SELECT o.o_clerk FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE l.l_extendedprice = (SELECT MAX(l_extendedprice) FROM lineitem);
SELECT SUM(l_quantity) AS total_quantity FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE o.o_custkey = 101660 AND o.o_orderdate = '1995-10-05';
SELECT SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS total_tax FROM lineitem JOIN orders ON lineitem.l_orderkey = orders.o_orderkey WHERE orders.o_custkey = 88931 AND orders.o_orderdate = '1994-07-13';
SELECT p.p_name FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey JOIN part p ON l.l_partkey = p.p_partkey WHERE o.o_custkey = 110942;
SELECT p.p_name, (l.l_extendedprice * (1 - l.l_discount)) AS discounted_price FROM lineitem l JOIN orders o ON l.l_orderkey = o.o_orderkey JOIN part p ON l.l_partkey = p.p_partkey WHERE o.o_custkey = 111511 AND o.o_orderkey = 53159;
SELECT height_in_inch  FROM PlayerInfo  JOIN height_info ON PlayerInfo.height = height_info.height_id  WHERE PlayerName = 'David Bornhammar';
SELECT PlayerName  FROM PlayerInfo  WHERE height > (6 * 12 + 2);
SELECT COUNT(*)  FROM PlayerInfo  WHERE height > (6 * 12 + 2) AND nation = 'Sweden';
SELECT PlayerName  FROM PlayerInfo  WHERE height = (SELECT MAX(height_in_cm) FROM height_info);
SELECT w.weight_in_kg  FROM PlayerInfo p  JOIN weight_info w ON p.weight = w.weight_id  WHERE p.PlayerName = 'David Bornhammar';
SELECT COUNT(*)  FROM PlayerInfo  JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id  WHERE weight_info.weight_in_kg > 90;
SELECT COUNT(*)  FROM PlayerInfo  WHERE weight > 90 AND position_info = 'D';
SELECT PlayerName FROM PlayerInfo WHERE weight > 90 ORDER BY sum_7yr_GP DESC LIMIT 1;
SELECT w.weight_in_kg FROM PlayerInfo p JOIN weight_info w ON p.weight = w.weight_id WHERE p.sum_7yr_TOI = (     SELECT MAX(sum_7yr_TOI)     FROM PlayerInfo );
SELECT      (SELECT height_in_cm FROM height_info h JOIN PlayerInfo p ON h.height_id = p.height WHERE p.PlayerName = 'David Bornhammar') -      (SELECT height_in_cm FROM height_info h JOIN PlayerInfo p ON h.height_id = p.height WHERE p.PlayerName = 'Pauli Levokari') AS height_difference_cm;
SELECT COUNT(*)  FROM PlayerInfo  WHERE shoots = 'R' AND weight > 90;
SELECT PlayerName  FROM PlayerInfo  JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id  WHERE weight_info.weight_in_kg > 90 AND PlayerInfo.shoots = 'R';
SELECT      P.PlayerName,      W.weight_in_kg,      H.height_in_cm,      (W.weight_in_kg / POWER((H.height_in_cm / 100.0), 2)) AS BMI FROM      PlayerInfo P JOIN      weight_info W ON P.weight = W.weight_id JOIN      height_info H ON P.height = H.height_id WHERE      P.PlayerName = 'David Bornhammar';
SELECT AVG(h.height_in_cm) AS average_height FROM PlayerInfo p JOIN height_info h ON p.height = h.height_id WHERE p.position_info = 'D';
SELECT MAX(weight_in_lbs) AS heaviest_player_weight FROM weight_info;
SELECT COUNT(*)  FROM PlayerInfo  WHERE shoots = 'R' AND height = (SELECT height_id FROM height_info WHERE height_in_inch = '5\'7"');
SELECT PlayerName FROM PlayerInfo WHERE sum_7yr_GP > 500 ORDER BY PIM DESC LIMIT 1;
SELECT MAX(h.height_in_cm)  FROM PlayerInfo p  JOIN height_info h ON p.height = h.height_id  WHERE p.birthplace = 'Edmonton, AB, CAN';
SELECT COUNT(DISTINCT p.ELITEID)  FROM PlayerInfo p  JOIN SeasonStatus s ON p.ELITEID = s.ELITEID  WHERE p.overallby = 'Anaheim Ducks'  AND p.draftyear = 2008  AND s.TEAM = 'U.S. National U18 Team';
SELECT w.weight_in_kg FROM PlayerInfo p JOIN SeasonStatus s ON p.ELITEID = s.ELITEID JOIN weight_info w ON p.weight = w.weight_id WHERE s.PLUSMINUS = (SELECT MAX(PLUSMINUS) FROM SeasonStatus);
SELECT ELITEID, MAX(P) AS MaxPoints FROM SeasonStatus WHERE LEAGUE = 'QMJHL' AND SEASON = '2004-2005' GROUP BY ELITEID ORDER BY MaxPoints DESC LIMIT 1;
SELECT DISTINCT p.PlayerName FROM PlayerInfo p JOIN SeasonStatus s ON p.ELITEID = s.ELITEID WHERE s.TEAM = 'Acadie-Bathurst Titan'   AND s.GAMETYPE = 'Regular Season'   AND s.SEASON = '1998-1999';
SELECT SUM(SS.GP) AS TotalGames FROM PlayerInfo P JOIN height_info H ON P.height = H.height_id JOIN SeasonStatus SS ON P.ELITEID = SS.ELITEID WHERE H.height_in_cm = (SELECT MAX(height_in_cm) FROM height_info);
SELECT PlayerName, birthdate  FROM PlayerInfo  JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID  WHERE SeasonStatus.SEASON = '1997-1998' AND SeasonStatus.LEAGUE = 'OHL'  ORDER BY birthdate DESC  LIMIT 1;
SELECT COUNT(*)  FROM PlayerInfo  WHERE shoots = 'L'  AND ELITEID IN (SELECT ELITEID FROM SeasonStatus WHERE GP = 72);
SELECT      (SUM(CASE WHEN GAMETYPE = 'Regular Season' THEN G ELSE 0 END) -       SUM(CASE WHEN GAMETYPE = 'Playoffs' THEN G ELSE 0 END)) AS goal_difference FROM      SeasonStatus WHERE      ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Pavel Brendl')      AND SEASON = '1998-1999';
SELECT AVG(w.weight_in_lbs) AS average_weight FROM PlayerInfo p JOIN weight_info w ON p.weight = w.weight_id WHERE p.CSS_rank = (SELECT MAX(CSS_rank) FROM PlayerInfo);
SELECT      (SUM(CASE WHEN GP > 20 THEN 1 ELSE 0 END) * 100.0 / COUNT(ELITEID)) AS percentage FROM      SeasonStatus WHERE      SEASON = '2007-2008' AND      GAMETYPE = 'Playoffs';
SELECT PlayerInfo.PlayerName FROM SeasonStatus JOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID WHERE SeasonStatus.LEAGUE = 'WHL' AND SeasonStatus.SEASON = '2007-2008' ORDER BY SeasonStatus.G DESC LIMIT 1;
SELECT PlayerName  FROM PlayerInfo  JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID  WHERE SeasonStatus.TEAM = 'Chilliwack Chiefs' AND SeasonStatus.P > 100;
SELECT PlayerName  FROM PlayerInfo  JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id  WHERE weight_info.weight_in_kg = 120;
SELECT p.PlayerName, h.height_in_cm FROM PlayerInfo p JOIN height_info h ON p.height = h.height_id WHERE h.height_in_cm = (SELECT h2.height_in_cm                           FROM PlayerInfo p2                           JOIN height_info h2 ON p2.height = h2.height_id                           WHERE p2.PlayerName = 'Brian Gionta');
SELECT PlayerName, position_info FROM PlayerInfo WHERE ELITEID = (     SELECT ELITEID     FROM SeasonStatus     ORDER BY PIM DESC     LIMIT 1 );
SELECT PlayerName FROM PlayerInfo p JOIN SeasonStatus s ON p.ELITEID = s.ELITEID WHERE p.draftyear = (SELECT draftyear FROM SeasonStatus ORDER BY P DESC LIMIT 1) ORDER BY P DESC LIMIT 1;
SELECT      (SUM(CASE WHEN nation IN ('Belarus', 'Bulgaria', 'Czech Republic', 'Hungary', 'Moldova', 'Poland', 'Romania', 'Slovakia', 'Ukraine') THEN 1 ELSE 0 END) * 100.0) / COUNT(ELITEID) AS percentage_eastern_europe_players FROM      PlayerInfo WHERE      overallby = 'Toronto Maple Leafs';
SELECT PlayerName, MAX(CSS_rank) AS Highest_Prospect FROM PlayerInfo WHERE draftyear = 2008 AND overallby = 'Toronto Maple Leafs' GROUP BY PlayerName ORDER BY Highest_Prospect DESC LIMIT 1;
SELECT p.PlayerName, s.TEAM FROM PlayerInfo p JOIN SeasonStatus s ON p.ELITEID = s.ELITEID WHERE s.SEASON = '2006-2007' AND s.LEAGUE = 'SuperElit' AND s.GAMETYPE = 'Playoffs' ORDER BY s.P DESC LIMIT 1;
SELECT COUNT(*)  FROM PlayerInfo  WHERE overallby = 'Toronto Maple Leafs' AND sum_7yr_GP > 300;
SELECT h.height_in_cm  FROM PlayerInfo p  JOIN SeasonStatus s ON p.ELITEID = s.ELITEID  JOIN height_info h ON p.height = h.height_id  WHERE s.TEAM = 'Yale Univ.' AND s.PIM = 28 AND s.SEASON = '2005-2006';
SELECT      (SUM(CASE WHEN PlayerName = 'Ian Schultz' THEN G ELSE 0 END) / SUM(G)) * 100 AS percentage FROM      SeasonStatus WHERE      TEAM = 'Calgary Hitmen' AND      SEASON = '2007-2008';
SELECT      (SUM(CASE WHEN PlayerName = 'Yevgeni Muratov' THEN PIM ELSE 0 END) / SUM(PIM)) * 100.0 AS percentage FROM      SeasonStatus WHERE      TEAM = 'Ak Bars Kazan' AND      SEASON = '1999-2000';
SELECT birthplace FROM PlayerInfo WHERE PlayerName = 'Aaron Gagnon';
SELECT w.weight_in_kg  FROM PlayerInfo p  JOIN weight_info w ON p.weight = w.weight_id  WHERE p.PlayerName = 'Tony Martensson';
SELECT PlayerName  FROM PlayerInfo  JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id  WHERE weight_info.weight_in_lbs = 190;
SELECT PlayerName  FROM PlayerInfo  JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id  ORDER BY weight_info.weight_in_kg DESC  LIMIT 1;
SELECT      (SUM(CASE WHEN nation = 'Denmark' AND weight > 154 THEN 1 ELSE 0 END) * 100.0) / COUNT(ELITEID) AS percentage FROM      PlayerInfo JOIN      weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE      nation = 'Denmark' OR weight > 154;
SELECT TEAM FROM SeasonStatus WHERE ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Andreas Jamtin');
SELECT SEASON FROM SeasonStatus WHERE ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Niklas Eckerblom');
SELECT GAMETYPE  FROM SeasonStatus  WHERE ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Matthias Trattnig');
SELECT DISTINCT P.nation FROM PlayerInfo P JOIN SeasonStatus S ON P.ELITEID = S.ELITEID WHERE S.SEASON = '1997-1998';
SELECT MAX(P) AS highest_point FROM SeasonStatus WHERE ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Per Mars' AND draftyear = YEAR(CURRENT_DATE));
SELECT PlayerName, MIN(height_in_cm) AS shortest_height FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE nation = 'Italy' GROUP BY PlayerName ORDER BY shortest_height LIMIT 1;
SELECT PlayerName  FROM PlayerInfo  WHERE height = (SELECT height_id FROM height_info WHERE height_in_inch = '5\'8"');
SELECT COUNT(*)  FROM PlayerInfo  WHERE birthyear = 1982 AND height > 182;
SELECT      (SUM(CASE WHEN nation = 'Russia' AND height < 200 THEN 1 ELSE 0 END) * 100.0) / COUNT(ELITEID) AS percentage FROM      PlayerInfo;
SELECT PlayerName, MIN(weight_in_lbs) AS lightest_weight FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE nation = 'USA' GROUP BY PlayerName ORDER BY lightest_weight ASC LIMIT 1;
SELECT ELITEID, SUM(PIM) AS total_penalty_minutes FROM SeasonStatus WHERE SEASON = '2000-2001' GROUP BY ELITEID ORDER BY total_penalty_minutes DESC LIMIT 1;
SELECT PlayerInfo.PlayerName  FROM PlayerInfo  JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID  WHERE SeasonStatus.TEAM = 'Avangard Omsk' AND SeasonStatus.SEASON = '2000-2001';
SELECT PlayerName, MAX(PIM) AS Max_PIM FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE overallby = 'Arizona Coyotes' AND draftyear = 2000 GROUP BY PlayerName ORDER BY Max_PIM DESC LIMIT 1;
SELECT COUNT(*)  FROM PlayerInfo  WHERE overallby = 'Arizona Coyotes' AND height = (SELECT height_id FROM height_info WHERE height_in_cm = 195);
SELECT DISTINCT p.PlayerName FROM PlayerInfo p JOIN SeasonStatus s ON p.ELITEID = s.ELITEID WHERE s.TEAM = 'Avangard Omsk'    AND s.GAMETYPE = 'Playoffs'    AND s.SEASON = '2000-2001';
SELECT PlayerInfo.PlayerName, MAX(SeasonStatus.P) AS MaxPoints FROM SeasonStatus JOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID WHERE SeasonStatus.SEASON = '2000-2001' AND SeasonStatus.LEAGUE = 'International' GROUP BY PlayerInfo.PlayerName ORDER BY MaxPoints DESC LIMIT 1;
SELECT COUNT(*)  FROM PlayerInfo p  JOIN weight_info w ON p.weight = w.weight_id  WHERE p.birthyear = 1980 AND w.weight_in_lbs = 185;
SELECT ELITEID, SUM(GP) AS total_GP FROM SeasonStatus WHERE SEASON = '2000-2001' AND LEAGUE = 'International' GROUP BY ELITEID ORDER BY total_GP DESC LIMIT 1;
SELECT p.PlayerName  FROM PlayerInfo p  JOIN SeasonStatus s ON p.ELITEID = s.ELITEID  WHERE s.SEASON = '2000-2001'    AND s.TEAM = 'Avangard Omsk'    AND s.LEAGUE = 'International'    AND s.G = 0;
SELECT PlayerName, birthdate  FROM PlayerInfo  JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID  WHERE SeasonStatus.TEAM = 'Avangard Omsk'    AND SeasonStatus.GAMETYPE = 'Regular Season'    AND SeasonStatus.SEASON = '2000-2001'  ORDER BY birthdate ASC  LIMIT 1;
SELECT PlayerInfo.PlayerName, MAX(SeasonStatus.A) AS MaxAssists FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.LEAGUE = 'OHL'    AND SeasonStatus.GAMETYPE = 'Regular Season'    AND SeasonStatus.SEASON = '2007-2008' GROUP BY PlayerInfo.PlayerName ORDER BY MaxAssists DESC LIMIT 1;
SELECT COUNT(DISTINCT ss.TEAM) AS team_count FROM PlayerInfo p JOIN weight_info w ON p.weight = w.weight_id JOIN SeasonStatus ss ON p.ELITEID = ss.ELITEID WHERE p.overallby = 'Arizona Coyotes'  AND w.weight_in_lbs = (SELECT MAX(w2.weight_in_lbs)                        FROM PlayerInfo p2                        JOIN weight_info w2 ON p2.weight = w2.weight_id                        WHERE p2.overallby = 'Arizona Coyotes');
SELECT AVG(w.weight_in_lbs) AS average_weight_pounds FROM PlayerInfo p JOIN weight_info w ON p.weight = w.weight_id WHERE p.overallby = 'Arizona Coyotes';
SELECT AVG(h.height_in_cm) AS average_height_cm FROM PlayerInfo p JOIN SeasonStatus s ON p.ELITEID = s.ELITEID JOIN height_info h ON p.height = h.height_id WHERE s.TEAM = 'Acadie-Bathurst Titan' AND s.GAMETYPE = 'Regular Season';
SELECT SUM(GP) AS total_games FROM SeasonStatus WHERE ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Per Mars') AND SEASON = '1997-1998';
SELECT w.weight_in_kg  FROM PlayerInfo p  JOIN weight_info w ON p.weight = w.weight_id  WHERE p.PlayerName = 'Matthias Trattnig';
SELECT PlayerName  FROM PlayerInfo  WHERE height > (5 * 12 + 9);
SELECT TEAM  FROM SeasonStatus  WHERE ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Niklas Eckerblom')  AND SEASON = '1997-1998';
SELECT TEAM, COUNT(*) AS SwedishCount FROM PlayerInfo WHERE nation = 'Sweden' GROUP BY TEAM ORDER BY SwedishCount DESC LIMIT 1;
SELECT COUNT(*) AS playoffs_count FROM SeasonStatus WHERE ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Per Mars') AND GAMETYPE = 'Playoffs';
SELECT PlayerInfo.PlayerName FROM SeasonStatus JOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID WHERE SeasonStatus.TEAM = 'Rimouski Oceanic' AND SeasonStatus.GAMETYPE = 'Playoffs' ORDER BY SeasonStatus.G DESC LIMIT 1;
SELECT nation, COUNT(*) AS player_count FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE TEAM = 'Plymouth Whalers' GROUP BY nation ORDER BY player_count DESC LIMIT 1;
SELECT PlayerInfo.PlayerName FROM SeasonStatus JOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID WHERE SeasonStatus.TEAM = 'Plymouth Whalers' AND SeasonStatus.SEASON = '1999-2000' ORDER BY SeasonStatus.A DESC LIMIT 1;
SELECT p.PlayerName, h.height_in_inch FROM PlayerInfo p JOIN SeasonStatus s ON p.ELITEID = s.ELITEID JOIN height_info h ON p.height = h.height_id WHERE s.TEAM = 'Oshawa Generals';
SELECT PlayerInfo.PlayerName, MIN(PlayerInfo.birthdate) AS oldest_birthdate FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.LEAGUE = 'OHL' AND SeasonStatus.SEASON = '1997-2000' GROUP BY PlayerInfo.PlayerName ORDER BY oldest_birthdate LIMIT 1;
SELECT PlayerName  FROM PlayerInfo  WHERE ELITEID = (     SELECT ELITEID      FROM SeasonStatus      WHERE TEAM = 'USA U20'      ORDER BY GP DESC      LIMIT 1 )  ORDER BY height DESC  LIMIT 1;
SELECT      (SUM(CASE WHEN P.nation = 'Sweden' THEN 1 ELSE 0 END) * 100.0 / COUNT(P.ELITEID)) AS percentage FROM      PlayerInfo P JOIN      SeasonStatus S ON P.ELITEID = S.ELITEID WHERE      S.GAMETYPE = 'Playoffs'      AND S.SEASON IN ('1997-1998', '1998-1999', '1999-2000');
SELECT      (SUM(CASE WHEN PIM IS NOT NULL AND nation = 'Sweden' THEN PIM ELSE 0 END) * 100.0) /      COUNT(CASE WHEN LEAGUE = 'OHL' THEN ELITEID END) AS percentage FROM      PlayerInfo  JOIN      SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE      LEAGUE = 'OHL';
SELECT AVG(StandardCost) AS AverageStandardCost FROM Product WHERE ProductNumber = 'CA-1098';
SELECT p.Name AS ProductName, pch.StartDate FROM Product p JOIN ProductCostHistory pch ON p.ProductID = pch.ProductID WHERE pch.EndDate IS NULL;
SELECT p.ProductID, p.Name, p.StandardCost FROM Product p JOIN ProductCostHistory pch ON p.ProductID = pch.ProductID WHERE p.StandardCost - pch.StandardCost > 80;
SELECT p.Name, SUM(sci.Quantity) AS TotalQuantity FROM Product p JOIN ShoppingCartItem sci ON p.ProductID = sci.ProductID WHERE sci.ShoppingCartID = 14951 GROUP BY p.Name;
SELECT p.Name FROM Product p JOIN ShoppingCartItem sci ON p.ProductID = sci.ProductID WHERE sci.Quantity > 5;
SELECT p.Name AS ProductName FROM PurchaseOrderDetail pod JOIN Product p ON pod.ProductID = p.ProductID WHERE p.Class = 'L';
SELECT p.Name AS ProductName, p.ListPrice AS SellingPrice FROM TransactionHistory th JOIN Product p ON th.ProductID = p.ProductID WHERE th.Quantity > 10000;
SELECT p.ProductID, p.Name, SUM(th.Quantity) AS TotalQuantity FROM Product p JOIN TransactionHistory th ON p.ProductID = th.ProductID WHERE p.Class = 'H' GROUP BY p.ProductID, p.Name HAVING SUM(th.Quantity) = 1;
SELECT COUNT(*) AS TransactionCount FROM TransactionHistory WHERE ProductID IN (     SELECT ProductID     FROM Product     WHERE ProductLine = 'M' );
SELECT SUM((p.ListPrice - p.StandardCost) * sci.Quantity) AS TotalSalesProfit FROM ShoppingCartItem sci JOIN Product p ON sci.ProductID = p.ProductID WHERE sci.ShoppingCartID = '20621';
SELECT Name, ListPrice  FROM Product  WHERE Class = 'H';
SELECT ProductLine, COUNT(*) AS ProductCount FROM Product WHERE FinishedGoodsFlag = 1 GROUP BY ProductLine ORDER BY ProductCount DESC LIMIT 1;
SELECT ProductID, Rating, Comments  FROM ProductReview  WHERE ReviewerName LIKE 'J%';
SELECT p.Name AS ProductName, p.ProductLine, pr.Rating, p.ListPrice FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE pr.Rating = 1 ORDER BY pr.Rating LIMIT 1;
SELECT ProductID, Name, AVG(ListPrice - StandardCost) AS Profit FROM Product GROUP BY ProductID, Name HAVING AVG(ListPrice - StandardCost) > 100;
SELECT p.Name AS ProductName, pr.ReviewerName, pr.Rating, pr.Comments FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE p.ProductLine = 'R';
SELECT COUNT(ReviewerName) AS NumberOfReviews, AVG(Rating) AS AverageRating FROM ProductReview WHERE ProductID = (SELECT ProductID FROM Product WHERE Name = 'HL Mountain Pedal');
SELECT DISTINCT p.Name FROM PurchaseOrderDetail pod JOIN Product p ON pod.ProductID = p.ProductID WHERE pod.PurchaseOrderID IN (     SELECT PurchaseOrderID     FROM PurchaseOrderDetail     GROUP BY PurchaseOrderID     HAVING SUM(ReceivedQty) = 0 AND SUM(RejectedQty) > 0 );
SELECT TOP 1 p.Name, sod.UnitPrice FROM Product p JOIN SalesOrderDetail sod ON p.ProductID = sod.ProductID WHERE sod.RejectedQty = 0 ORDER BY sod.LineTotal DESC;
SELECT p.Name, p.ProductLine FROM Product p JOIN PurchaseOrderDetail pod ON p.ProductID = pod.ProductID WHERE pod.OrderQty >= 5000;
SELECT SUM(OrderQty) AS TotalOrderedQuantity FROM SalesOrderDetail JOIN Product ON SalesOrderDetail.ProductID = Product.ProductID WHERE Product.ProductLine = 'T';
SELECT TOP 1 p.Name, sod.LineTotal FROM SalesOrderDetail sod JOIN Product p ON sod.ProductID = p.ProductID WHERE p.Class = 'L' ORDER BY sod.LineTotal DESC;
SELECT TOP 1 Name  FROM Product  JOIN ProductVendor ON Product.ProductID = ProductVendor.ProductID  ORDER BY (ProductVendor.LastReceiptCost - Product.StandardCost) DESC;
SELECT p.Name FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID WHERE pv.MinOrderQty = 100 ORDER BY p.Name DESC;
SELECT p.Name, (p.ListPrice - p.StandardCost) AS Profit FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE pr.Rating = 5 ORDER BY pr.ReviewDate DESC LIMIT 1;
SELECT SUM((p.ListPrice - p.StandardCost) * th.Quantity) AS TotalProfit FROM TransactionHistory th JOIN Product p ON th.ProductID = p.ProductID WHERE th.ProductID = 827;
SELECT FromCurrencyCode, ToCurrencyCode, AVG(AverageRate) AS HighestAverageRate FROM CurrencyRate GROUP BY FromCurrencyCode, ToCurrencyCode ORDER BY HighestAverageRate DESC LIMIT 1;
SELECT SUM(OrderQty) AS TotalOrdered FROM SalesOrderDetail WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM SalesOrderDetail);
SELECT TOP 1 st.Name, st.SalesLastYear FROM SalesTerritory st WHERE st.CountryRegionCode = 'US' AND (st.Name = 'Northwest' OR st.Name = 'Southeast') ORDER BY st.SalesLastYear DESC;
SELECT CONCAT(E.FirstName, ' ', E.MiddleName, ' ', E.LastName) AS FullName FROM Employee E JOIN JobCandidate JC ON E.BusinessEntityID = JC.BusinessEntityID JOIN Document D ON D.Owner = E.BusinessEntityID WHERE E.JobTitle = 'Document Control Manager' AND D.Status = 2;
SELECT TOP 1 c.CustomerID FROM Customer c JOIN SalesOrderHeader soh ON c.CustomerID = soh.CustomerID JOIN SalesPerson sp ON soh.SalesPersonID = sp.BusinessEntityID WHERE sp.Bonus = (SELECT MAX(Bonus) FROM SalesPerson) ORDER BY soh.SubTotal DESC;
SELECT SUM(UnitPrice * OrderQty) AS TotalPrice FROM SalesOrderDetail WHERE SalesOrderID = 46625 AND SpecialOfferID IN (     SELECT SpecialOfferID     FROM SpecialOffer     WHERE MinQty <= 14 AND MaxQty >= 11 ) AND ProductID = 716;
SELECT COUNT(*)  FROM Product  WHERE ReorderPoint < 600    AND MakeFlag = 1    AND ProductID IN (       SELECT ProductAssemblyID        FROM BillOfMaterials        WHERE BOMLevel = 4          AND PerAssemblyQty = 1   );
SELECT MAX(SalesPerson.Bonus) AS HighestBonus FROM SalesPerson JOIN SalesTerritory ON SalesPerson.TerritoryID = SalesTerritory.TerritoryID WHERE SalesTerritory.Name = 'Canada';
SELECT p.Name FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE pr.Rating = 1;
SELECT COUNT(DISTINCT e.BusinessEntityID) AS WorkerCount FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID WHERE edh.StartDate BETWEEN '2009-01-01' AND '2009-12-31' AND d.Name = 'Production';
SELECT TOP 1      CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) AS FullName,      e.JobTitle  FROM      Employee e  JOIN      EmployeePayHistory eph ON e.BusinessEntityID = eph.BusinessEntityID  WHERE      e.MaritalStatus = 'S' AND      e.Gender = 'F'  ORDER BY      eph.Rate DESC;
SELECT CONCAT(FirstName, ' ', MiddleName, ' ', LastName) AS FullName, HireDate FROM Employee WHERE JobTitle = 'Vice President of Engineering';
SELECT COUNT(*)  FROM Employee  JOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID  WHERE Employee.CurrentFlag = 1 AND EmployeePayHistory.Rate <= 30;
SELECT d.Name AS DepartmentName FROM Department d JOIN Employee e ON d.DepartmentID = e.DepartmentID WHERE e.HireDate = (SELECT MAX(HireDate) FROM Employee);
SELECT CONCAT(p.FirstName, ' ', p.LastName) AS FullName, e.Gender FROM Employee e JOIN Person p ON e.BusinessEntityID = p.BusinessEntityID JOIN Store s ON e.BusinessEntityID = s.SalesPersonID WHERE p.PersonType = 'SC' ORDER BY e.HireDate DESC LIMIT 1;
SELECT PayFrequency FROM Employee WHERE SickLeaveHours = (SELECT MIN(SickLeaveHours) FROM Employee);
SELECT TOP 1 JobTitle  FROM Employee  JOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID  ORDER BY Rate ASC;
SELECT COUNT(e.BusinessEntityID) AS TotalEmployees FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID WHERE d.Name = 'Finance';
SELECT      ProductID,      Name,      ListPrice - StandardCost AS Profit,      BOMLevel  FROM      Product  JOIN      BillOfMaterials ON Product.ProductID = BillOfMaterials.ProductAssemblyID  WHERE      ListPrice IN (         (SELECT MAX(ListPrice) FROM Product),         (SELECT MIN(ListPrice) FROM Product WHERE ListPrice > 0)     );
SELECT v.Name AS VendorName,         SUM(p.StandardPrice - pv.LastReceiptCost) AS NetProfit FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID JOIN Product p ON pv.ProductID = p.ProductID WHERE v.CreditRating > 3 GROUP BY v.Name;
SELECT COUNT(DISTINCT c.CustomerID) AS AccountCount FROM Customer c JOIN BusinessEntityAddress bea ON c.BusinessEntityID = bea.BusinessEntityID JOIN Address a ON bea.AddressID = a.AddressID WHERE a.AddressLine2 IS NOT NULL AND LEN(a.AddressLine2) > 0;
SELECT Address.PostalCode FROM Address JOIN BusinessEntityAddress ON Address.AddressID = BusinessEntityAddress.AddressID JOIN BusinessEntity ON BusinessEntityAddress.BusinessEntityID = BusinessEntity.BusinessEntityID WHERE BusinessEntity.ModifiedDate = (     SELECT MAX(ModifiedDate)     FROM BusinessEntity     WHERE YEAR(ModifiedDate) = 2022 AND MONTH(ModifiedDate) = 10 );
SELECT MAX(DATEDIFF(EndDate, StartDate)) AS LongestAssemblyDuration FROM WorkOrder WHERE ProductID IN (     SELECT ProductID     FROM Product     WHERE Name LIKE '%bicycle%' );
SELECT SUM(BillOfMaterials.PerAssemblyQty) AS TotalAssemblyItems FROM BillOfMaterials JOIN Product ON BillOfMaterials.ProductAssemblyID = Product.ProductID WHERE Product.ProductLine = 'Bikes' AND BillOfMaterials.EndDate IS NULL;
SELECT UnitMeasureCode  FROM BillOfMaterials  WHERE PerAssemblyQty = (SELECT MAX(PerAssemblyQty) FROM BillOfMaterials);
SELECT COUNT(*)  FROM Document  WHERE DocumentSummary IS NULL;
SELECT Title  FROM Document  WHERE Status = 1;
SELECT e.JobTitle FROM Employee e JOIN BusinessEntity b ON e.BusinessEntityID = b.BusinessEntityID JOIN Document d ON b.BusinessEntityID = d.Owner WHERE d.Status = 2;
SELECT EmployeePayHistory.PayFrequency FROM Employee JOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID WHERE Employee.BirthDate = (SELECT MIN(BirthDate) FROM Employee);
SELECT COUNT(*)  FROM EmployeePayHistory  WHERE PayFrequency = 2  AND BusinessEntityID IN (     SELECT BusinessEntityID      FROM Employee      WHERE MaritalStatus = 'M' );
SELECT e.BusinessEntityID, ep.Rate FROM Employee e JOIN EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE e.HireDate = (SELECT MAX(HireDate) FROM Employee);
SELECT COUNT(*)  FROM EmployeePayHistory ep  JOIN Employee e ON ep.BusinessEntityID = e.BusinessEntityID  WHERE ep.Rate > 40 AND e.Gender = 'M';
SELECT MAX(Rate) AS HighestPayRate FROM EmployeePayHistory JOIN Employee ON EmployeePayHistory.BusinessEntityID = Employee.BusinessEntityID WHERE Employee.SalariedFlag = 1;
SELECT VacationHours  FROM Employee  WHERE PayFrequency = 2;
SELECT Rate  FROM EmployeePayHistory  WHERE BusinessEntityID = (     SELECT BusinessEntityID      FROM Employee      WHERE VacationHours = (SELECT MAX(VacationHours) FROM Employee) );
SELECT COUNT(*)  FROM Employee e  JOIN EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID  WHERE ep.Rate > 35 AND e.SickLeaveHours > 10;
SELECT COUNT(*)  FROM Employee  WHERE CurrentFlag = 1 AND Gender = 'M' AND BusinessEntityID IN (     SELECT BusinessEntityID      FROM EmployeePayHistory      WHERE PayFrequency = 2 );
SELECT COUNT(*)  FROM Employee e JOIN Person p ON e.BusinessEntityID = p.BusinessEntityID WHERE e.JobTitle = 'Sales Person' AND p.Gender = 'M';
SELECT JobTitle  FROM Employee  WHERE BirthDate = (SELECT MAX(BirthDate) FROM Employee);
SELECT e.NameStyle FROM Employee e JOIN EmployeePayHistory eph ON e.BusinessEntityID = eph.BusinessEntityID WHERE eph.Rate = (SELECT MIN(Rate) FROM EmployeePayHistory);
SELECT COUNT(*)  FROM Employee  WHERE MaritalStatus = 'M' AND NameStyle = '0';
SELECT COUNT(*)  FROM Employee  WHERE SickLeaveHours > 10 AND EmailPromotion IN (1, 2);
SELECT * FROM Employee WHERE VacationHours > 20 AND EmailPromotion IN (1, 2);
SELECT p.AdditionalContactInfo FROM Employee e JOIN Person p ON e.BusinessEntityID = p.BusinessEntityID WHERE e.JobTitle = 'Sales Person' AND p.BirthDate = (SELECT MAX(BirthDate) FROM Employee e2 JOIN Person p2 ON e2.BusinessEntityID = p2.BusinessEntityID WHERE p2.PersonType = 'SP');
SELECT FirstName  FROM Employee  JOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID  WHERE Person.NameStyle = 0 AND Employee.Gender = 'M';
SELECT COUNT(*)  FROM Employee  WHERE CurrentFlag = 1 AND Title = 'Mr';
SELECT e.BusinessEntityID, p.FirstName, p.LastName, e.JobTitle, ep.Rate FROM Employee e JOIN Person p ON e.BusinessEntityID = p.BusinessEntityID JOIN EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE p.MaritalStatus = 'M' AND ep.Rate = (     SELECT MAX(Rate)     FROM EmployeePayHistory     WHERE BusinessEntityID IN (         SELECT BusinessEntityID         FROM Employee         JOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID         WHERE Person.MaritalStatus = 'M'     ) );
SELECT p.Suffix FROM Employee e JOIN BusinessEntityContact bec ON e.BusinessEntityID = bec.BusinessEntityID JOIN Person p ON bec.PersonID = p.BusinessEntityID JOIN Store s ON e.BusinessEntityID = s.BusinessEntityID WHERE p.PersonType = 'SC' ORDER BY e.SickLeaveHours DESC LIMIT 1;
SELECT COUNT(*)  FROM Employee  WHERE MaritalStatus = 'M'  AND NameStyle = 1  AND BusinessEntityID IN (     SELECT BusinessEntityID      FROM EmployeePayHistory      WHERE PayFrequency = (SELECT MAX(PayFrequency) FROM EmployeePayHistory) );
SELECT COUNT(*)  FROM Employee  WHERE CurrentFlag = 1  AND BusinessEntityID IN (SELECT BusinessEntityID FROM Person WHERE EmailPromotion = 0);
SELECT pcc.CreditCardID FROM PersonCreditCard pcc JOIN Person p ON p.BusinessEntityID = pcc.BusinessEntityID WHERE p.PersonType = 'SC';
SELECT AVG(VacationHours) AS AverageVacationHours FROM Employee JOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID WHERE Person.PersonType = 'EM' AND Person.Gender = 'M';
WITH MarriedEmployees AS (     SELECT e.BusinessEntityID, ep.Rate     FROM Employee e     JOIN EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID     WHERE e.MaritalStatus = 'M' AND e.EmailPromotion = 1 ), AveragePay AS (     SELECT AVG(Rate) AS AvgRate     FROM MarriedEmployees ), MaxPay AS (     SELECT MAX(Rate) AS MaxRate     FROM MarriedEmployees ) SELECT (MaxRate - AvgRate) AS PayDifference FROM MaxPay, AveragePay;
SELECT      CAST(COUNT(CASE WHEN p.PersonType = 'SC' AND e.MaritalStatus = 'M' THEN p.BusinessEntityID END) AS FLOAT) /      NULLIF(COUNT(CASE WHEN e.MaritalStatus = 'M' THEN p.BusinessEntityID END), 0) AS Probability FROM      Person p JOIN      Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE      e.MaritalStatus = 'M' AND e.NameStyle = 0;
SELECT      (COUNT(CASE WHEN VacationHours > 20 THEN BusinessEntityID END) * 100.0 / COUNT(BusinessEntityID)) AS Percentage FROM      Employee WHERE      CurrentFlag = 1 AND SickLeaveHours > 10;
SELECT AVG(LastReceiptCost) AS AverageLastReceiptCost FROM ProductVendor WHERE AverageLeadTime = 60;
SELECT AVG(ActualCost) AS AverageCost FROM TransactionHistory WHERE TransactionType = 'P'  AND TransactionDate BETWEEN '2012-01-01' AND '2012-06-30';
SELECT      (COUNT(CASE WHEN MaritalStatus = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS PercentageMarried FROM      Employee WHERE      Gender = 'M' AND      YEAR(HireDate) = 2009;
SELECT      (COUNT(CASE WHEN p.FirstName = 'Mary' AND p.EmailPromotion = 2 AND b.ContactTypeID = 'SC' THEN 1 END) * 100.0) / COUNT(p.BusinessEntityID) AS Percentage FROM      Person p JOIN      BusinessEntityContact b ON p.BusinessEntityID = b.PersonID WHERE      p.FirstName = 'Mary' AND p.EmailPromotion = 2;
SELECT p.ProductID FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID WHERE (p.ListPrice - pv.LastReceiptCost) < 0;
SELECT AVG(TotalDue) AS AverageTotalDue FROM SalesOrderHeader WHERE Status = 2;
SELECT      (COUNT(CASE WHEN OrderQty < 3 AND UnitPriceDiscount = 0.2 THEN SalesOrderID END) * 100.0 / COUNT(SalesOrderID)) AS Percentage FROM      SalesOrderDetail;
SELECT BusinessEntityID FROM SalesPerson WHERE (SalesYTD - SalesLastYear) / SalesLastYear > 0.6 AND Bonus > 3000;
SELECT      COUNT(DISTINCT BusinessEntityID) AS NumberOfBusinesses FROM      BusinessEntityAddress WHERE      AddressTypeID IN (2, 5);
SELECT DISTINCT c.CustomerID FROM SalesOrderDetail sod JOIN SalesOrderHeader soh ON sod.SalesOrderID = soh.SalesOrderID JOIN Customer c ON soh.CustomerID = c.CustomerID WHERE sod.OrderQty = 32 AND sod.UnitPrice = 35;
SELECT c.Name FROM CreditCard cc JOIN Person p ON cc.BusinessEntityID = p.BusinessEntityID JOIN BusinessEntityContact bec ON p.BusinessEntityID = bec.PersonID JOIN BusinessEntity be ON bec.BusinessEntityID = be.BusinessEntityID WHERE cc.CardType = 'ColonialVoice' AND cc.ExpMonth = 3 AND cc.ExpYear = 2005;
SELECT v.CreditRating FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID WHERE pv.AverageLeadTime = 16   AND pv.StandardPrice = 18.9900   AND pv.LastReceiptDate >= '2011-08-27 00:00:00'   AND pv.LastReceiptDate < '2011-08-28 00:00:00';
SELECT COUNT(*) AS TotalProducts FROM Product WHERE ProductSubcategoryID IN (     SELECT ProductSubcategoryID     FROM ProductSubcategory     WHERE Name IN ('Accessories', 'Components') );
SELECT JobTitle  FROM Employee  WHERE BusinessEntityID = (     SELECT BusinessEntityID      FROM EmployeeDepartmentHistory      WHERE DepartmentID = 12      ORDER BY StartDate DESC      LIMIT 1 );
SELECT FirstName, LastName  FROM Employee  WHERE JobTitle = 'Production Supervisor'  AND MaritalStatus = 'S'  AND Gender = 'M';
SELECT SUM(pi.Quantity) AS TotalProducts FROM ProductInventory pi JOIN Product p ON pi.ProductID = p.ProductID JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID WHERE ps.Name = 'Subassembly';
SELECT SUM(StockedQty) AS TotalRejectedProducts FROM WorkOrder WHERE ScrapReasonID IN (     SELECT ScrapReasonID     FROM ScrapReason     WHERE Name = 'Trim length too long' );
SELECT SUM(SOD.OrderQty) AS TotalQuantity FROM SalesOrderDetail SOD JOIN SalesOrderHeader SOH ON SOD.SalesOrderID = SOH.SalesOrderID WHERE SOH.SalesPersonID = 257 AND SOH.Status = 3;
SELECT COUNT(DISTINCT sd.ProductID) AS DifferentProductsSold FROM SalesOrderDetail sd JOIN SpecialOfferProduct sop ON sd.SpecialOfferID = sop.SpecialOfferID WHERE sop.SpecialOfferID IS NULL AND sd.OrderQty > 2;
SELECT th.TransactionType FROM Product p JOIN ProductInventory pi ON p.ProductID = pi.ProductID JOIN TransactionHistory th ON p.ProductID = th.ProductID WHERE p.Color = 'Yellow'    AND p.Size = 62    AND pi.Quantity >= 500;
SELECT ps.Name FROM Product p JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID WHERE p.Color = 'gray' ORDER BY p.SafetyStockLevel ASC LIMIT 1;
SELECT p.ProductCostHistory.EndDate FROM ProductCostHistory pch JOIN Product p ON pch.ProductID = p.ProductID WHERE p.WeightUnitMeasureCode = 'G' ORDER BY p.Weight DESC LIMIT 1;
SELECT      (SUM(CASE WHEN sr.Name IN ('Drill size too small', 'Drill size too large') THEN wo.ScrappedQty ELSE 0 END) * 100.0) / NULLIF(SUM(wo.OrderQty), 0) AS PercentageNotRejected FROM      WorkOrder wo JOIN      ScrapReason sr ON wo.ScrapReasonID = sr.ScrapReasonID;
SELECT AVG(OrderQty) AS AverageOrderedQuantity FROM SalesOrderDetail JOIN SalesOrderHeader ON SalesOrderDetail.SalesOrderID = SalesOrderHeader.SalesOrderID JOIN ShipMethod ON SalesOrderHeader.ShipMethodID = ShipMethod.ShipMethodID WHERE ShipMethod.Name = 'Cargo Transport 5';
SELECT STR.Name FROM SalesTerritory ST JOIN SalesPerson SP ON ST.TerritoryID = SP.TerritoryID JOIN SalesTaxRate STR ON ST.CountryRegionCode = STR.StateProvinceID WHERE ST.TerritoryID = (     SELECT TOP 1 ST2.TerritoryID     FROM SalesTerritory ST2     JOIN SalesPerson SP2 ON ST2.TerritoryID = SP2.TerritoryID     GROUP BY ST2.TerritoryID     ORDER BY SUM(SP2.SalesYTD - SP2.SalesLastYear) DESC )
SELECT COUNT(*)  FROM EmployeePayHistory  WHERE PayFrequency = 1 AND Rate > 50;
SELECT CONCAT(FirstName, ' ', MiddleName, ' ', LastName) AS FullName FROM Person WHERE BusinessEntityID = 1 AND PersonType = 'EM';
SELECT Name FROM Vendor WHERE BusinessEntityID = 1492;
SELECT COUNT(*) AS VendorCount FROM Vendor WHERE MinOrderQty > 500 AND MaxOrderQty < 15000;
SELECT Name FROM Department WHERE GroupName = 'Executive General and Administration';
SELECT LastName  FROM Person  WHERE PersonType = 'EM' AND MiddleName LIKE 'C%';
SELECT COUNT(DISTINCT v.BusinessEntityID) AS VendorCount FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID WHERE pv.AverageLeadTime = 25 AND pv.OnOrderQty > 0;
SELECT TOP 3 ProductNumber FROM Product ORDER BY StandardCost ASC;
SELECT COUNT(*) AS BlackProductsNotForSale FROM Product WHERE Color = 'Black' AND FinishedGoodsFlag = 0;
SELECT TOP 3 BusinessEntityID, JobTitle, SickLeaveHours FROM Employee ORDER BY SickLeaveHours DESC;
SELECT CONCAT(AddressLine1, ' ', AddressLine2) AS FullAddress FROM Address WHERE AddressID = 11906;
SELECT (pv.LastReceiptCost - pv.StandardPrice) AS NetProfit FROM ProductVendor pv WHERE pv.BusinessEntityID = 1580;
SELECT SUM(SalesOrderDetail.LineTotal) AS SalesRevenue FROM SalesOrderDetail JOIN SalesOrderHeader ON SalesOrderDetail.SalesOrderID = SalesOrderHeader.SalesOrderID WHERE SalesOrderDetail.ProductID = 740;
SELECT DISTINCT pr.ReviewerName FROM ProductReview pr WHERE pr.Rating = 5;
SELECT BusinessEntityID  FROM Vendor  WHERE CreditRating = 5;
SELECT FirstName, BirthDate FROM Person WHERE BusinessEntityID = 18;
SELECT ct.Name AS Job FROM Person p JOIN BusinessEntityContact bec ON p.BusinessEntityID = bec.BusinessEntityID JOIN ContactType ct ON bec.ContactTypeID = ct.ContactTypeID WHERE p.PersonID = 18;
SELECT TOP 3 b.BusinessEntityID, b.Name FROM BusinessEntity b JOIN BusinessEntityContact bec ON b.BusinessEntityID = bec.BusinessEntityID JOIN PhoneNumberType pnt ON bec.ContactTypeID = pnt.PhoneNumberTypeID WHERE pnt.Name = 'cell';
SELECT c.Name AS CurrencyName FROM Currency c JOIN CountryRegionCurrency crc ON c.CurrencyCode = crc.CurrencyCode JOIN CountryRegion cr ON crc.CountryRegionCode = cr.CountryRegionCode WHERE cr.Name = 'Brazil';
SELECT COUNT(e.BusinessEntityID) AS NumberOfEmployees FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID WHERE d.Name = 'Finance';
SELECT v.Name AS VendorName, pv.AverageLeadTime FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID WHERE v.BusinessEntityID = 1496;
SELECT      (SELECT COUNT(*) FROM Address WHERE City = 'Bothell') -      (SELECT COUNT(*) FROM Address WHERE City = 'Kenmore') AS AccountDifference,     (SELECT Name FROM StateProvince WHERE StateProvinceID IN          (SELECT StateProvinceID FROM Address WHERE City IN ('Bothell', 'Kenmore'))      LIMIT 1) AS StateName
SELECT pm.Name FROM ProductModel pm JOIN ProductModelProductDescriptionCulture pmPDC ON pm.ProductModelID = pmPDC.ProductModelID JOIN ProductDescription pd ON pmPDC.ProductDescriptionID = pd.ProductDescriptionID JOIN Culture c ON pmPDC.CultureID = c.CultureID WHERE pd.Description LIKE '%chromoly steel%' AND c.Name = 'English' AND pm.Name LIKE '%AdventureWorks%';
SELECT COUNT(*) AS TotalCompanies, SalesTerritory.Name AS GeographicalLocation FROM SalesPerson JOIN SalesTerritory ON SalesPerson.TerritoryID = SalesTerritory.TerritoryID WHERE SalesPerson.CommissionPct >= 0.018 GROUP BY SalesTerritory.Name;
SELECT PhoneNumberTypeID, Name, COUNT(*) AS Count FROM BusinessEntityContact JOIN PhoneNumberType ON BusinessEntityContact.ContactTypeID = PhoneNumberType.PhoneNumberTypeID GROUP BY PhoneNumberTypeID, Name ORDER BY Count DESC;
SELECT TOP 1 ContactTypeID, COUNT(*) AS ContactCount FROM BusinessEntityContact GROUP BY ContactTypeID ORDER BY ContactCount DESC;
SELECT e.EmailAddress FROM Employee emp JOIN BusinessEntityContact bec ON emp.BusinessEntityID = bec.BusinessEntityID JOIN EmailAddress e ON bec.PersonID = e.BusinessEntityID JOIN Person p ON emp.BusinessEntityID = p.BusinessEntityID WHERE p.PersonType = 'SP';
SELECT JobTitle FROM Employee WHERE BusinessEntityID = (SELECT BusinessEntityID FROM Person WHERE FirstName = 'Suchitra');
SELECT COUNT(*)  FROM Employee e JOIN Person p ON e.BusinessEntityID = p.BusinessEntityID WHERE p.PersonType = 'EM' AND p.MaritalStatus = 'S';
SELECT      (SELECT COUNT(*) FROM Product WHERE ProductID IN          (SELECT ProductID FROM ProductModelProductDescriptionCulture           WHERE CultureID = (SELECT CultureID FROM Culture WHERE Name = 'English'))) AS EnglishCount,     (SELECT COUNT(*) FROM Product WHERE ProductID IN          (SELECT ProductID FROM ProductModelProductDescriptionCulture           WHERE CultureID = (SELECT CultureID FROM Culture WHERE Name = 'Arabic'))) AS ArabicCount,     (SELECT COUNT(*) FROM Product WHERE ProductID IN          (SELECT ProductID FROM ProductModelProductDescriptionCulture           WHERE CultureID = (SELECT CultureID FROM Culture WHERE Name = 'English'))) -      (SELECT COUNT(*) FROM Product WHERE ProductID IN          (SELECT ProductID FROM ProductModelProductDescriptionCulture           WHERE CultureID = (SELECT CultureID FROM Culture WHERE Name = 'Arabic'))) AS Difference;
SELECT AddressLine1  FROM Address  JOIN BusinessEntityAddress ON Address.AddressID = BusinessEntityAddress.AddressID  WHERE BusinessEntityAddress.BusinessEntityID = 1;
SELECT BusinessEntityID, Name  FROM BusinessEntity  WHERE BusinessEntityID IN (     SELECT BusinessEntityID      FROM BusinessEntityAddress      WHERE AddressID IN (         SELECT AddressID          FROM Address          WHERE City = 'Duvall'     ) );
SELECT      (COUNT(CASE WHEN Culture.Name = 'Thai' THEN 1 END) * 100.0) / COUNT(*) AS PercentageThai FROM      Culture;
SELECT      (COUNT(CASE WHEN e.Gender = 'M' THEN 1 END) * 100.0) / COUNT(CASE WHEN e.PersonType = 'EM' THEN 1 END) AS MalePercentage FROM      Employee e;
SELECT a.AddressLine1, a.City, sp.Name AS StateProvince FROM Address a JOIN StateProvince sp ON a.StateProvinceID = sp.StateProvinceID WHERE a.AddressID = '15873' AND sp.IsOnlyStateProvinceFlag = '0';
SELECT CONCAT(a.AddressLine1, ' ', a.AddressLine2) AS FullAddress FROM BusinessEntityAddress bea JOIN Address a ON bea.AddressID = a.AddressID WHERE bea.BusinessEntityID = 24;
SELECT ExpYear FROM CreditCard WHERE CreditCardID = 9648;
SELECT BusinessEntityID  FROM Person  WHERE FirstName = 'Emma' AND LastName = 'Harris';
SELECT LocationID  FROM Location  WHERE Name = 'Debur and Polish';
SELECT DepartmentID  FROM Department  WHERE GroupName = 'Sales and Marketing';
SELECT sp.BusinessEntityID FROM SalesOrderHeader soh JOIN SalesPerson sp ON soh.SalesPersonID = sp.BusinessEntityID WHERE soh.TotalDue = 1635823.3967 AND YEAR(soh.OrderDate) = YEAR(GETDATE()) - 1;
SELECT StartTime FROM Shift WHERE ShiftID = 2;
SELECT Name FROM ContactType WHERE ContactTypeID = 16;
SELECT MIN(ShipBase) AS MinimumShippingCharge FROM ShipMethod WHERE Name = 'OVERSEAS - DELUXE';
SELECT Name FROM Culture WHERE CultureID = 'fr';
SELECT CurrencyCode FROM Currency WHERE Name = 'Mauritius Rupee';
SELECT PhoneNumberTypeID FROM PhoneNumberType WHERE Name = 'Cell';
SELECT BirthDate  FROM Employee  WHERE JobTitle = 'Production Technician'  AND HireDate = '2008-12-07'  AND BirthDate = (SELECT MIN(BirthDate) FROM Employee WHERE JobTitle = 'Production Technician');
SELECT pm.Name  FROM Product p  JOIN ProductModel pm ON p.ProductModelID = pm.ProductModelID  WHERE p.ProductID = 793;
SELECT um.UnitMeasureCode FROM ProductInventory pi JOIN UnitMeasure um ON pi.UnitMeasureCode = um.UnitMeasureCode WHERE pi.ProductID = 762;
SELECT a.AddressLine1, a.AddressLine2, a.City FROM BusinessEntityAddress bea JOIN Address a ON bea.AddressID = a.AddressID WHERE bea.BusinessEntityID = 4;
SELECT UnitMeasureCode  FROM BillOfMaterials  WHERE ComponentID = 494 AND EndDate IS NULL;
SELECT COUNT(*)  FROM Document d JOIN Employee e ON d.Owner = e.BusinessEntityID WHERE e.JobTitle = 'Document Control Assistant'    AND e.BirthDate = '1975-12-25'    AND d.DocumentSummary IS NULL;
SELECT ProductID, ListPrice, StartDate FROM ProductListPriceHistory WHERE ListPrice - (SELECT StandardCost FROM Product WHERE ProductID = ProductListPriceHistory.ProductID) = 21.9037 AND StartDate > '2012-10-01';
SELECT LargePhoto, LargePhotoFileName FROM ProductPhoto WHERE ProductID = 1;
SELECT LENGTH(p.PasswordHash) AS PasswordLength FROM Person AS pe JOIN Password AS p ON pe.BusinessEntityID = p.BusinessEntityID WHERE pe.FirstName = 'Catherine' AND pe.LastName = 'Ward';
SELECT Rating  FROM ProductReview  WHERE ReviewerName = 'Jill' AND ProductID = (SELECT ProductID FROM Product WHERE Name = 'HL Mountain Pedal');
SELECT SUBTRACT(LastReceiptCost, StandardPrice) AS Profit FROM ProductVendor JOIN Product ON ProductVendor.ProductID = Product.ProductID WHERE Product.Name = 'Freewheel';
SELECT CASE WHEN Bonus > 0 THEN 'Yes' ELSE 'No' END AS SalesTaskCompleted FROM SalesPerson JOIN Person ON SalesPerson.BusinessEntityID = Person.BusinessEntityID WHERE Person.FirstName = 'Rachel' AND Person.LastName = 'Valdez';
SELECT COUNT(DISTINCT TaxType) AS TaxTypeCount FROM SalesTaxRate WHERE StateProvinceID = (SELECT StateProvinceID FROM StateProvince WHERE Name = 'Quebec') AND Name LIKE '%+%';
SELECT e.EmailAddress  FROM Person p  JOIN EmailAddress e ON p.BusinessEntityID = e.BusinessEntityID  WHERE p.FirstName = 'Kevin' AND p.LastName = 'Wright';
SELECT COUNT(*)  FROM StateProvince  WHERE CountryRegionCode = 'FR' AND IsOnlyStateProvinceFlag = 1 AND StateProvinceCode IS NULL;
SELECT TransactionType  FROM TransactionHistory  WHERE ProductID = (SELECT ProductID FROM Product WHERE Name = 'HL Road Frame - Black, 48')  AND TransactionDate = '2012-12-13';
SELECT TransactionType  FROM TransactionHistory  WHERE TransactionDate = '2012-11-03'  AND ProductID = (SELECT ProductID FROM Product WHERE Name = 'LL Road Handlebars');
SELECT CreditRating  FROM Vendor  WHERE rowguid = '33671A4E-DF2B-4879-807B-E3F930DD5C0C';
SELECT PreferredVendorStatus  FROM Vendor  WHERE rowguid = '684F328D-C185-43B9-AF9A-37ACC680D2AF';
SELECT CASE             WHEN ActiveFlag = 2 THEN 'Vendor is actively used'             WHEN ActiveFlag = 1 THEN 'Vendor no longer used'             ELSE 'Unknown status'         END AS VendorStatus FROM Vendor WHERE BusinessEntityID = (SELECT BusinessEntityID FROM Person WHERE PersonID = 2054);
SELECT pn.PhoneNumber FROM Person p JOIN BusinessEntityContact bec ON p.BusinessEntityID = bec.PersonID JOIN BusinessEntity be ON bec.BusinessEntityID = be.BusinessEntityID JOIN PhoneNumber pn ON be.BusinessEntityID = pn.BusinessEntityID WHERE p.FirstName = 'Gerald' AND p.LastName = 'Patel';
SELECT PhoneNumberType.Name FROM BusinessEntityContact JOIN PhoneNumberType ON BusinessEntityContact.ContactTypeID = PhoneNumberType.PhoneNumberTypeID WHERE BusinessEntityContact.BusinessEntityID = 13626;
SELECT JobTitle  FROM Employee  JOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID  WHERE FirstName = 'Lynn' AND LastName = 'Tsoflias';
SELECT COUNT(*) AS NumberOfSubCategories FROM ProductSubcategory WHERE ProductCategoryID = 1;
SELECT      (COUNT(CASE WHEN d.DocumentSummary IS NULL THEN 1 END) * 100.0) / COUNT(d.DocumentSummary) AS PercentageOfPrivateDocuments FROM      Employee e JOIN      BusinessEntity b ON e.BusinessEntityID = b.BusinessEntityID JOIN      Document d ON b.BusinessEntityID = d.Owner WHERE      e.JobTitle = 'Document Control Assistant'      AND e.HireDate = '2009-01-22';
SELECT      Product.Name AS ProductName,     (LastReceiptCost - StandardCost) / StandardCost AS profit_ratio FROM      Product JOIN      ProductVendor ON Product.ProductID = ProductVendor.ProductID WHERE      Product.Name = 'HL Grip Tape';
SELECT      (COUNT(CASE WHEN PhoneNumberTypeID = 1 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      PhoneNumber;
SELECT ProductAssemblyID  FROM BillOfMaterials  WHERE UnitMeasureCode = 'EA'  AND BOMLevel = 2  AND PerAssemblyQty > 10;
SELECT COUNT(LocationID)  FROM WorkOrderRouting  WHERE ActualResourceHrs = 2;
SELECT SUM(StockedQty) AS TotalStockedQuantity FROM WorkOrder WHERE LocationID = 40;
SELECT      UnitMeasureCode,      SUM(PerAssemblyQty) AS TotalPerAssemblyQty  FROM      BillOfMaterials  WHERE      UnitMeasureCode IN ('EA', 'IN', 'OZ')  GROUP BY      UnitMeasureCode;
SELECT ProductID  FROM Product  WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM WorkOrder);
SELECT p.Name FROM Product p JOIN TransactionHistory th ON p.ProductID = th.ProductID WHERE th.TransactionType = 'P';
SELECT      CONCAT(FirstName, ' ', COALESCE(MiddleName, ''), ' ', LastName) AS FullName FROM      Employee WHERE      JobTitle = 'Accountant';
SELECT e.JobTitle  FROM Employee e  JOIN Person p ON e.BusinessEntityID = p.BusinessEntityID  WHERE p.FirstName = 'Ken' AND p.LastName = 'Sánchez';
SELECT COUNT(*)  FROM Employee  WHERE Gender = 'M' AND BusinessEntityID IN (     SELECT BusinessEntityID      FROM Person      WHERE EmailPromotion = 0 );
SELECT TOP 1      sp.BusinessEntityID,      (SUM(sp.SalesLastYear) / SUM(spq.SalesQuota)) * 100 AS PercentageAchieved FROM      SalesPerson sp JOIN      SalesPersonQuotaHistory spq ON sp.BusinessEntityID = spq.BusinessEntityID WHERE      YEAR(spq.QuotaDate) = 2013 GROUP BY      sp.BusinessEntityID ORDER BY      PercentageAchieved DESC;
SELECT COUNT(*)  FROM Employee  WHERE MaritalStatus = 'M'  AND BusinessEntityID IN (SELECT BusinessEntityID FROM Person WHERE PersonType = 'EM');
SELECT COUNT(DISTINCT b.BusinessEntityID) AS VendorContactCount FROM Employee e JOIN BusinessEntityContact b ON e.BusinessEntityID = b.BusinessEntityID JOIN Person p ON b.PersonID = p.BusinessEntityID WHERE e.JobTitle LIKE 'Production Technician%'    AND e.MaritalStatus = 'S'    AND p.PersonType = 'VC';
SELECT SUM(SickLeaveHours) AS TotalSickLeaveHours FROM Employee WHERE BusinessEntityID IN (     SELECT BusinessEntityID     FROM Person     WHERE EmailPromotion = 0 );
SELECT p.FirstName, p.LastName, e.HireDate FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID JOIN SalesPerson sp ON e.BusinessEntityID = sp.BusinessEntityID WHERE e.HireDate < '2010-01-01';
SELECT      p.FirstName,      p.LastName,      sp.SalesYTD,      sp.SalesQuota * 12 AS ProjectedYearlySalesQuota FROM      SalesPerson sp JOIN      Person p ON sp.BusinessEntityID = p.BusinessEntityID WHERE      p.PersonType = 'SP' ORDER BY      sp.SalesYTD DESC LIMIT 1;
SELECT COUNT(*) FROM Person JOIN Employee ON Person.BusinessEntityID = Employee.BusinessEntityID WHERE Person.FirstName = 'Alex'    AND Employee.MaritalStatus = 'S'    AND Employee.OrganizationLevel = 1;
SELECT AVG(E.VacationHours) AS AverageVacationHours FROM Employee E JOIN SalesPerson S ON E.BusinessEntityID = S.BusinessEntityID WHERE E.PersonType = 'SC';
SELECT p.LastName, e.JobTitle FROM Document d JOIN Employee e ON d.Owner = e.BusinessEntityID JOIN Person p ON e.BusinessEntityID = p.BusinessEntityID WHERE d.Title = 'Crank Arm and Tire Maintenance';
SELECT OrganizationLevel FROM Employee WHERE Suffix IS NULL;
SELECT DISTINCT sp.BusinessEntityID FROM SalesPersonQuotaHistory spq JOIN SalesPerson sp ON spq.BusinessEntityID = sp.BusinessEntityID WHERE spq.QuotaDate BETWEEN '2013-01-01' AND '2013-12-31'   AND spq.SalesQuota <= sp.SalesQuota   AND sp.TerritoryID = 1;
SELECT p.LastName FROM Employee e JOIN JobCandidate jc ON e.BusinessEntityID = jc.BusinessEntityID JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID WHERE d.Name = 'Human Resources' AND edh.EndDate IS NULL;
SELECT e.EmailAddress FROM Employee emp JOIN BusinessEntityContact bec ON emp.BusinessEntityID = bec.BusinessEntityID JOIN EmailAddress e ON bec.PersonID = e.BusinessEntityID WHERE emp.Gender = 'F' AND emp.MaritalStatus = 'S';
SELECT DISTINCT p.Color FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID;
SELECT      SUM(CASE WHEN YEAR(QuotaDate) = 2013 THEN SalesQuota ELSE 0 END) AS ProjectedSalesQuota2013,     SalesYTD FROM      SalesPersonQuotaHistory JOIN      SalesPerson ON SalesPersonQuotaHistory.BusinessEntityID = SalesPerson.BusinessEntityID WHERE      SalesPerson.BusinessEntityID = 275;
SELECT BusinessEntityID  FROM SalesPersonQuotaHistory  WHERE YEAR(QuotaDate) = 2013 AND SalesQuota > (SELECT SalesYTD FROM SalesPerson WHERE SalesPerson.BusinessEntityID = SalesPersonQuotaHistory.BusinessEntityID);
SELECT      DIVIDE(SUM(CASE WHEN Gender = 'F' THEN 1 ELSE 0 END),             SUM(CASE WHEN Gender IN ('F', 'M') THEN 1 ELSE 0 END)) AS percentage FROM      Employee WHERE      EmailPromotion = 1;
SELECT      SUM(CASE WHEN e.MaritalStatus = 'M' AND e.JobTitle <> 'Sales' THEN 1 ELSE 0 END) AS MarriedNonSalesEmployees,     SUM(CASE WHEN e.MaritalStatus = 'S' AND e.JobTitle <> 'Sales' THEN 1 ELSE 0 END) AS SingleNonSalesEmployees FROM      Employee e JOIN      Person p ON e.BusinessEntityID = p.BusinessEntityID WHERE      p.PersonType = 'EM';
SELECT      SUM(Bonus) AS TotalBonus,     (SUM(Bonus) / SUM(SalesQuota)) * 100 AS Percentage FROM      SalesPersonQuotaHistory JOIN      SalesPerson ON SalesPersonQuotaHistory.BusinessEntityID = SalesPerson.BusinessEntityID WHERE      YEAR(QuotaDate) = 2013;
SELECT COUNT(DISTINCT CardType) AS TotalCardTypes,         SUM(CASE WHEN CardType = 'Vista' THEN 1 ELSE 0 END) AS VistaCount FROM CreditCard;
SELECT Name FROM Product WHERE ProductID = 475;
SELECT COUNT(*)  FROM Employee  WHERE BirthDate < '1980-01-01' AND (MaritalStatus = 'S' OR MaritalStatus IS NULL);
SELECT Store.Name FROM Store JOIN SalesPerson ON Store.SalesPersonID = SalesPerson.BusinessEntityID WHERE SalesPerson.BusinessEntityID = 277;
SELECT SUM(Quantity) AS TotalSold FROM TransactionHistory WHERE ProductID = 989  AND TransactionDate BETWEEN '2013-08-01' AND '2013-08-30'  AND TransactionType = 'S';
SELECT * FROM CreditCard WHERE ExpYear < 2007;
SELECT eph.Rate FROM EmployeePayHistory eph JOIN Employee e ON eph.BusinessEntityID = e.BusinessEntityID WHERE YEAR(e.HireDate) - YEAR(e.BirthDate) = 20;
SELECT st.Name FROM SalesPerson sp JOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID WHERE sp.BusinessEntityID = 277;
SELECT FirstName + ' ' + COALESCE(MiddleName + ' ', '') + LastName AS FullName FROM Employee WHERE JobTitle = 'Vice President of Production';
SELECT COUNT(e.BusinessEntityID) AS EmployeeCount FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID JOIN Shift s ON edh.ShiftID = s.ShiftID WHERE d.Name = 'Information Service' AND s.Name = 'Evening';
SELECT poh.PurchaseOrderID FROM PurchaseOrderHeader poh JOIN Vendor v ON poh.VendorID = v.BusinessEntityID WHERE v.CreditRating < 5;
SELECT      CASE          WHEN ct.Name = 'Work' THEN 'Work Number'          WHEN ct.Name = 'Home' THEN 'Home Number'          ELSE 'Unknown'      END AS PhoneNumberType FROM      PhoneNumberType ct JOIN      EmailAddress ea ON ea.BusinessEntityID = (SELECT BusinessEntityID FROM EmailAddress WHERE EmailAddress = '114-555-0100') WHERE      ea.EmailAddressID = (SELECT EmailAddressID FROM EmailAddress WHERE EmailAddress = '114-555-0100');
SELECT SUM(PurchaseOrderHeader.Freight) AS TotalShipmentCost FROM PurchaseOrderHeader JOIN ShipMethod ON PurchaseOrderHeader.ShipMethodID = ShipMethod.ShipMethodID WHERE ShipMethod.Name = 'Cargo Transport 5'  AND PurchaseOrderHeader.OrderDate = '2011-12-14';
SELECT COUNT(so.SalesOrderID) AS SalesOrderCount FROM SalesOrderHeader so JOIN SalesPerson sp ON so.SalesPersonID = sp.BusinessEntityID JOIN Person p ON sp.BusinessEntityID = p.BusinessEntityID WHERE p.FirstName = 'David' AND p.LastName = 'Campbell' AND p.PersonType = 'SP';
SELECT e.EmailAddress FROM Employee AS e JOIN BusinessEntityContact AS bec ON e.BusinessEntityID = bec.BusinessEntityID JOIN EmailAddress AS ea ON bec.PersonID = ea.BusinessEntityID WHERE e.JobTitle = 'Facilities Manager';
SELECT COUNT(DISTINCT c.CustomerID) AS CustomerCount FROM Customer c JOIN SalesTerritory st ON c.TerritoryID = st.TerritoryID WHERE st.Name = 'Canada';
SELECT CONCAT(a.AddressLine1, ' ', a.AddressLine2, ' ', a.City) AS ShippingAddress FROM SalesOrderHeader soh JOIN Address a ON soh.ShipToAddressID = a.AddressID WHERE soh.SalesOrderID = 43873;
SELECT FirstName  FROM Employee  WHERE SickLeaveHours > 65;
SELECT COUNT(*)  FROM Employee e JOIN EmployeePayHistory eph ON e.BusinessEntityID = eph.BusinessEntityID WHERE e.JobTitle = 'Production Technician'  AND eph.Rate < (SELECT AVG(Rate) FROM EmployeePayHistory WHERE BusinessEntityID IN (SELECT BusinessEntityID FROM Employee WHERE JobTitle = 'Production Technician'));
SELECT      DIVIDE(SUM(CASE WHEN cr.Name = 'United Kingdom' THEN 1 ELSE 0 END), COUNT(so.SalesOrderID)) AS ProportionOfUKSalesOrders FROM      SalesOrderHeader so JOIN      Customer c ON so.CustomerID = c.CustomerID JOIN      BusinessEntity be ON c.PersonID = be.BusinessEntityID JOIN      BusinessEntityAddress bea ON be.BusinessEntityID = bea.BusinessEntityID JOIN      Address a ON bea.AddressID = a.AddressID JOIN      StateProvince sp ON a.StateProvinceID = sp.StateProvinceID JOIN      CountryRegion cr ON sp.CountryRegionCode = cr.CountryRegionCode;
SELECT ModifiedDate  FROM PhoneNumberType  WHERE PhoneNumberTypeID = (SELECT PhoneNumberTypeID FROM EmailAddress WHERE EmailAddress = '1500 555-0143');
SELECT TOP 1 sp.BusinessEntityID FROM SalesPerson sp ORDER BY sp.SalesYTD DESC;
SELECT * FROM Vendor WHERE ActiveFlag = 1 AND PurchasingWebServiceURL IS NOT NULL;
SELECT TOP 1 st.Name AS TerritoryName, COUNT(c.CustomerID) AS CustomerCount FROM SalesTerritory st JOIN Customer c ON st.TerritoryID = c.TerritoryID WHERE c.ModifiedDate BETWEEN '2014-09-12 00:00:00' AND '2014-09-12 23:59:59' GROUP BY st.Name ORDER BY CustomerCount DESC;
SELECT SUM(TotalDue) AS TotalCost FROM SalesOrderHeader WHERE OrderDate = '2013-05-29';
SELECT TOP 1 FirstName, COUNT(*) AS NameCount FROM Person JOIN BusinessEntityContact ON Person.BusinessEntityID = BusinessEntityContact.PersonID WHERE BusinessEntityContact.ContactTypeID = (SELECT ContactTypeID FROM ContactType WHERE Name = 'Vendor') GROUP BY FirstName ORDER BY NameCount DESC;
SELECT FirstName + ' ' + COALESCE(MiddleName + ' ', '') + LastName AS FullName FROM Employee WHERE JobTitle = 'Production Technician - WC50';
SELECT SUM(OrderQty) AS TotalMinipumpsSold FROM SalesOrderDetail WHERE ProductID IN (SELECT ProductID FROM Product WHERE Name = 'Minipump');
SELECT BusinessEntityID  FROM PersonCreditCard  WHERE CreditCardID = (SELECT CreditCardID FROM CreditCard WHERE CardNumber = '11113366963373');
SELECT a.* FROM Address a JOIN BusinessEntityAddress bea ON a.AddressID = bea.AddressID JOIN Person p ON bea.BusinessEntityID = p.BusinessEntityID JOIN AddressType at ON bea.AddressTypeID = at.AddressTypeID WHERE p.BusinessEntityID = 5555 AND at.Name = 'Home';
SELECT p.Name FROM Product p JOIN SpecialOfferProduct sop ON p.ProductID = sop.ProductID JOIN SpecialOffer so ON sop.SpecialOfferID = so.SpecialOfferID WHERE so.Description = '15';
SELECT c.CardNumber  FROM CreditCard c JOIN Person p ON c.BusinessEntityID = p.BusinessEntityID WHERE p.FirstName = 'Michelle' AND p.LastName = 'Cox';
SELECT sr.ReasonType FROM SalesOrderHeader soh JOIN SalesOrderHeaderSalesReason sohsr ON soh.SalesOrderID = sohsr.SalesOrderID JOIN SalesReason sr ON sohsr.SalesReasonID = sr.SalesReasonID WHERE soh.SalesOrderID = 51883;
SELECT c.CardNumber FROM SalesOrderHeader soh JOIN CreditCard c ON soh.CreditCardID = c.CreditCardID WHERE soh.SalesOrderID = 45793;
SELECT sp.* FROM SalesPerson sp JOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID WHERE st.Name = 'Northwest' AND st.CountryRegionCode = 'US';
SELECT e.BusinessEntityID, e.JobTitle, ep.Rate FROM Employee e JOIN EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE e.JobTitle = 'Production Technician' ORDER BY ep.Rate DESC LIMIT 1;
SELECT CONCAT(E.FirstName, ' ', E.MiddleName, ' ', E.LastName) AS FullName FROM SalesPerson SP JOIN Employee E ON SP.BusinessEntityID = E.BusinessEntityID WHERE SP.TerritoryID = 9;
SELECT so.Description  FROM SpecialOffer so  JOIN SpecialOfferProduct sop ON so.SpecialOfferID = sop.SpecialOfferID  WHERE sop.ProductID = 762;
SELECT      AVG(CASE WHEN Gender = 'M' THEN Rate END) AS AvgMaleRate,     AVG(CASE WHEN Gender = 'F' THEN Rate END) AS AvgFemaleRate,     (AVG(CASE WHEN Gender = 'F' THEN Rate END) - AVG(CASE WHEN Gender = 'M' THEN Rate END)) AS diff FROM      EmployeePayHistory JOIN      Employee ON EmployeePayHistory.BusinessEntityID = Employee.BusinessEntityID;
SELECT      (SUM(CASE WHEN ShiftID = (SELECT ShiftID FROM Shift WHERE Name = 'Night') THEN 1 ELSE 0 END) * 100.0) / COUNT(ShiftID) AS percentage FROM      Employee;
SELECT COUNT(*)  FROM Employee  WHERE MaritalStatus = 'M'  AND Gender = 'M'  AND BirthDate <= '1959-12-31';
SELECT TOP 5 ProductSubcategoryID, MAX(ListPrice) AS HighestSellingPrice FROM Product GROUP BY ProductSubcategoryID ORDER BY HighestSellingPrice DESC;
SELECT MIN(HireDate) AS FirstAccountantHired FROM Employee WHERE JobTitle = 'Accountant';
SELECT TOP 1 JobTitle, COUNT(*) AS HireCount FROM Employee WHERE HireDate BETWEEN '2007-01-01' AND '2007-12-31' GROUP BY JobTitle ORDER BY HireCount DESC;
SELECT      Vendor.BusinessEntityID,     Vendor.Name,     (ProductVendor.LastReceiptCost - ProductVendor.StandardPrice) AS ProfitOnNet FROM      ProductVendor JOIN      Vendor ON ProductVendor.BusinessEntityID = Vendor.BusinessEntityID WHERE      ProductVendor.StandardPrice = (         SELECT MAX(StandardPrice)          FROM ProductVendor     ) LIMIT 1;
SELECT COUNT(DISTINCT DepartmentID) AS NumberOfDepartments FROM EmployeeDepartmentHistory edh JOIN Employee e ON edh.BusinessEntityID = e.BusinessEntityID WHERE e.FirstName = 'Sheela' AND e.LastName = 'Ward' AND (YEAR(edh.StartDate) BETWEEN 2011 AND 2012 OR YEAR(edh.EndDate) BETWEEN 2011 AND 2012);
SELECT AVG(2009 - YEAR(BirthDate)) AS AverageAge FROM Employee WHERE BirthDate IS NOT NULL;
SELECT d.Name, d.GroupName FROM Department d JOIN EmployeeDepartmentHistory edh ON d.DepartmentID = edh.DepartmentID GROUP BY d.DepartmentID, d.Name, d.GroupName ORDER BY COUNT(edh.BusinessEntityID) ASC LIMIT 1;
SELECT      SUBTRACT(2015, YEAR(BirthDate)) AS Age,      Rate  FROM      Employee  WHERE      JobTitle = 'Marketing Specialist'      AND BirthDate IS NOT NULL  ORDER BY      BirthDate  LIMIT 1;
SELECT v.Name AS VendorName, SUM(poh.TotalDue) AS TotalAmountDue FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID JOIN PurchaseOrderDetail pod ON pv.ProductID = pod.ProductID JOIN PurchaseOrderHeader poh ON pod.PurchaseOrderID = poh.PurchaseOrderID WHERE pv.StandardPrice = (     SELECT MIN(StandardPrice)     FROM ProductVendor ) GROUP BY v.Name;
SELECT      p.BusinessEntityID AS EmployeeID,     YEAR(HireDate) - YEAR(BirthDate) AS AgeAtHire FROM      PurchaseOrderHeader poh JOIN      Employee e ON poh.EmployeeID = e.BusinessEntityID JOIN      Person p ON e.BusinessEntityID = p.BusinessEntityID WHERE      (TotalDue - Freight) = (         SELECT MAX(TotalDue - Freight)          FROM PurchaseOrderHeader     );
SELECT      CONCAT(FirstName, ' ', MiddleName, ' ', LastName) AS FullName,     Rate AS Salary FROM      Employee ORDER BY      Rate DESC OFFSET 9 ROWS FETCH NEXT 1 ROWS ONLY;
SELECT p.Name, (p.ListPrice - p.StandardCost) AS Profit FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE pr.ReviewerName = 'John Smith' AND pr.Rating = 5;
SELECT Employee.BusinessEntityID, Employee.JobTitle, Employee.HireDate, EmployeePayHistory.Rate / 40 AS SalaryRatePerHour FROM Employee JOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID ORDER BY Employee.HireDate ASC LIMIT 5;
SELECT TOP 1 v.BusinessEntityID, v.Name, (pv.StandardPrice - pv.LastReceiptCost) AS ProfitOnNet FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID WHERE pv.MaxOrderQty BETWEEN 500 AND 750 ORDER BY ProfitOnNet DESC OFFSET 9 ROWS;
SELECT      E.BusinessEntityID,     E.FirstName,     E.LastName,     YEAR('2011-12-31') - YEAR(E.HireDate) AS LengthOfStay FROM      Employee E JOIN      SalesOrderHeader SO ON E.BusinessEntityID = SO.SalesPersonID WHERE      SO.Status = 1     AND E.HireDate IS NOT NULL;
SELECT p.Name, p.DaysToManufacture FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE pr.Rating = 2 AND p.Class = 'M' ORDER BY pr.Rating DESC LIMIT 1;
SELECT TOP 1      CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) AS FullName,      e.JobTitle  FROM      Employee e  ORDER BY      e.HireDate ASC;
SELECT COUNT(*)  FROM WorkOrder w JOIN Product p ON w.ProductID = p.ProductID WHERE w.Quantity BETWEEN 100 AND 250  AND p.ReorderPoint <= 375  AND w.TransactionType = 'W';
SELECT      (SELECT AVG(Rate) FROM EmployeePayHistory WHERE BusinessEntityID IN (SELECT BusinessEntityID FROM Employee WHERE Gender = 'F')) AS AvgFemaleSalary,     (SELECT AVG(Rate) FROM EmployeePayHistory WHERE BusinessEntityID IN (SELECT BusinessEntityID FROM Employee WHERE Gender = 'M')) AS AvgMaleSalary,     (SELECT AVG(Rate) FROM EmployeePayHistory WHERE BusinessEntityID IN (SELECT BusinessEntityID FROM Employee WHERE Gender = 'F')) -      (SELECT AVG(Rate) FROM EmployeePayHistory WHERE BusinessEntityID IN (SELECT BusinessEntityID FROM Employee WHERE Gender = 'M')) AS SalaryDifference
SELECT v.Name FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID JOIN Product p ON pv.ProductID = p.ProductID WHERE p.MakeFlag = 0    AND p.Style = 'W'    AND p.ProductSubcategoryID = (SELECT ProductSubcategoryID FROM ProductSubcategory WHERE Name = 'Tights');
SELECT PayFrequency, COUNT(*) AS Frequency FROM EmployeePayHistory WHERE BusinessEntityID = (SELECT BusinessEntityID FROM Employee WHERE JobTitle = 'Scheduling Assistant' ORDER BY HireDate ASC LIMIT 1) GROUP BY PayFrequency;
SELECT      p.Class,      p.ProductLine,      p.ListPrice FROM      Product p JOIN      SalesOrderDetail sod ON p.ProductID = sod.ProductID JOIN      SalesOrderHeader soh ON sod.SalesOrderID = soh.SalesOrderID WHERE      soh.OnlineOrderFlag = 1 GROUP BY      p.ProductID, p.Class, p.ProductLine, p.ListPrice ORDER BY      SUM(sod.OrderQty) ASC LIMIT 1;
SELECT CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) AS FullName FROM SalesPerson sp JOIN Employee e ON sp.BusinessEntityID = e.BusinessEntityID WHERE sp.CommissionPct = (SELECT MAX(CommissionPct) FROM SalesPerson);
SELECT TOP 1      FirstName + ' ' + COALESCE(MiddleName + ' ', '') + LastName AS FullName FROM      Employee ORDER BY      DATEDIFF(YEAR, BirthDate, HireDate) ASC OFFSET 1 ROWS;
SELECT      p.Name AS ProductName,     SUM((p.ListPrice - p.StandardCost) * sod.OrderQty) AS TotalProfit FROM      SalesOrderDetail sod JOIN      SalesOrderHeader soh ON sod.SalesOrderID = soh.SalesOrderID JOIN      Product p ON sod.ProductID = p.ProductID WHERE      soh.OnlineOrderFlag = 1 GROUP BY      p.ProductID, p.Name ORDER BY      SUM(sod.OrderQty) DESC LIMIT 1;
SELECT TOP 1      po.PurchaseOrderID,      v.Name AS VendorName,      MAX(po.OrderQty - po.ReceivedQty) AS MaxDifference FROM      PurchaseOrderDetail po JOIN      PurchaseOrderHeader poh ON po.PurchaseOrderID = poh.PurchaseOrderID JOIN      Vendor v ON poh.VendorID = v.BusinessEntityID GROUP BY      po.PurchaseOrderID, v.Name ORDER BY      MaxDifference DESC;
SELECT      AVG(PV.AverageLeadTime) AS AverageLeadTime,     (PV.LastReceiptCost - P.StandardCost) AS ProfitOnNet,     CONCAT(A.AddressLine1, ' ', A.AddressLine2, ' ', A.City, ' ', A.PostalCode) AS FullLocation FROM      ProductVendor PV JOIN      Product P ON PV.ProductID = P.ProductID JOIN      Vendor V ON PV.BusinessEntityID = V.BusinessEntityID JOIN      BusinessEntityAddress BEA ON V.BusinessEntityID = BEA.BusinessEntityID JOIN      Address A ON BEA.AddressID = A.AddressID WHERE      P.ProductID = 843 GROUP BY      PV.LastReceiptCost, P.StandardCost, A.AddressLine1, A.AddressLine2, A.City, A.PostalCode;
SELECT COUNT(*) AS SalespersonsNotMetQuota FROM SalesPerson WHERE Bonus = 0;
SELECT COUNT(*)  FROM SalesTaxRate  WHERE TaxType = 1 AND Name LIKE '%+%';
SELECT MAX(ActualCost) AS HighestProductCost FROM TransactionHistory WHERE TransactionType = 'P';
SELECT Status  FROM SalesOrderHeader  WHERE Freight = (SELECT MAX(Freight) FROM SalesOrderHeader);
SELECT COUNT(*) AS OutOfStockProducts FROM ProductVendor WHERE OnOrderQty = 0;
SELECT ProductID, MAX(StandardPrice - LastReceiptCost) AS HighestProfit FROM ProductVendor JOIN Product ON ProductVendor.ProductID = Product.ProductID GROUP BY ProductID ORDER BY HighestProfit DESC LIMIT 1;
SELECT ReviewerName, COUNT(*) AS HighestRatingCount FROM ProductReview WHERE Rating = (SELECT MAX(Rating) FROM ProductReview) GROUP BY ReviewerName ORDER BY HighestRatingCount DESC LIMIT 1;
SELECT ProductID, COUNT(ProductReviewID) AS ReviewCount FROM ProductReview GROUP BY ProductID ORDER BY ReviewCount DESC LIMIT 1;
SELECT COUNT(DISTINCT p.ProductID) AS ProductsWithoutHighestRating FROM Product p JOIN SalesOrderDetail sod ON p.ProductID = sod.ProductID JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE p.MakeFlag = 0 AND pr.Rating <> 5;
SELECT MAX(review_count) AS BiggestAmountOfReviews FROM (     SELECT ProductID, COUNT(ProductReviewID) AS review_count     FROM ProductReview     WHERE ProductID IN (SELECT ProductID FROM Product WHERE FinishedGoodsFlag = 1)     GROUP BY ProductID ) AS review_counts;
SELECT COUNT(*)  FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE p.MakeFlag = 1    AND p.FinishedGoodsFlag = 1  GROUP BY p.ProductID  HAVING COUNT(pr.Comments) > 10;
SELECT p.Name FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE p.FinishedGoodsFlag = 1 GROUP BY p.ProductID, p.Name HAVING COUNT(pr.Comments) > 10;
SELECT ReviewerName FROM ProductReview JOIN Product ON ProductReview.ProductID = Product.ProductID WHERE Product.Class = 'M' AND Product.Style = 'W' AND ProductReview.Rating = 5;
SELECT Class FROM Product WHERE ProductID = (     SELECT ProductID     FROM ProductReview     GROUP BY ProductID     ORDER BY COUNT(Comments) DESC     LIMIT 1 );
SELECT DISTINCT e.EmailAddress FROM ProductReview pr JOIN Product p ON pr.ProductID = p.ProductID JOIN EmailAddress e ON pr.ReviewerName = e.EmailAddressID WHERE p.Class = 'H';
SELECT p.Name FROM Product p JOIN ProductListPriceHistory plph ON p.ProductID = plph.ProductID GROUP BY p.ProductID, p.Name HAVING COUNT(plph.ListPrice) > 3;
SELECT pd.Description  FROM Product p  JOIN ProductDescription pd ON p.ProductID = pd.ProductDescriptionID  WHERE p.Name = 'Headset Ball Bearings';
SELECT MAX(StandardPrice) AS HighestVendorSellingPrice FROM ProductVendor PV JOIN Product P ON PV.ProductID = P.ProductID WHERE P.Name = 'Hex Nut 5';
SELECT v.Name AS VendorName, pv.StandardPrice FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID JOIN Product p ON pv.ProductID = p.ProductID WHERE p.Name = 'Hex Nut 5';
SELECT COUNT(DISTINCT v.BusinessEntityID) AS GoodCreditRatingVendors FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID JOIN Product p ON pv.ProductID = p.ProductID WHERE p.Name = 'Hex Nut 5' AND v.CreditRating BETWEEN 1 AND 3;
SELECT v.PurchasingWebServiceURL FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID JOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID WHERE p.Name = 'Hex Nut 5';
SELECT v.Name FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID JOIN Product p ON pv.ProductID = p.ProductID WHERE p.Name = 'Hex Nut 5' ORDER BY pv.StandardPrice ASC LIMIT 1;
SELECT COUNT(*) AS HighClassProductsSold FROM SalesOrderDetail sod JOIN Product p ON sod.ProductID = p.ProductID JOIN ProductVendor pv ON p.ProductID = pv.ProductID WHERE pv.PreferredVendorStatus = 1 AND p.Class = 'H';
SELECT pl.ListPrice FROM ProductListPriceHistory pl JOIN Product p ON pl.ProductID = p.ProductID WHERE p.Name = 'LL Fork';
SELECT COUNT(*)  FROM Product  WHERE ProductLine = 'M'  AND ProductID IN (     SELECT ProductID      FROM ProductVendor      GROUP BY ProductID      HAVING COUNT(BusinessEntityID) > 2 );
SELECT COUNT(DISTINCT p.ProductID) AS MountainProductCount FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE p.ProductLine = 'M';
SELECT DISTINCT pr.EmailAddress FROM ProductReview pr JOIN Product p ON pr.ProductID = p.ProductID WHERE p.Name = 'HL Mountain Pedal' AND pr.Rating = 1;
SELECT COUNT(*)  FROM Product  WHERE DaysToManufacture > 2 AND (OnOrderQty = 0 OR OnOrderQty IS NULL);
SELECT p.ProductID, p.Name FROM Product p WHERE p.DaysToManufacture > 2   AND (p.OnOrderQty = 0 OR p.OnOrderQty IS NULL)   AND p.MakeFlag = 1;
SELECT COUNT(*) AS MostReviewedProductCount FROM ProductReview WHERE ProductID IN (     SELECT ProductID     FROM Product     WHERE FinishedGoodsFlag = 1 AND ProductLine = 'M' ) GROUP BY ProductID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT v.Name AS VendorName,         AVG(pv.StandardPrice) AS AverageSellingPrice FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID JOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID WHERE p.Name = 'Hex Nut 5' GROUP BY v.Name;
SELECT TOP 1 p.Name FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE p.ProductLine = 'M' GROUP BY p.ProductID, p.Name ORDER BY AVG(pr.Rating) DESC;
SELECT TOP 3 p.ProductID, p.Name, AVG(pr.Rating) AS AverageRating FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE p.MakeFlag = 1 GROUP BY p.ProductID, p.Name ORDER BY AverageRating DESC;
SELECT e.BusinessEntityID FROM Employee e JOIN Person p ON e.BusinessEntityID = p.BusinessEntityID WHERE p.PersonType = 'EM' ORDER BY e.BusinessEntityID ASC;
SELECT FirstName, MiddleName, LastName  FROM Person  WHERE PersonType = 'IN' AND LastName = 'Anderson';
SELECT e.Title, e.FirstName, e.LastName, e.HireDate FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID WHERE edh.EndDate IS NOT NULL;
SELECT FirstName, LastName  FROM Employee  WHERE SalariedFlag = 1 AND YEAR(HireDate) >= 2007;
SELECT FirstName, LastName  FROM Employee  WHERE MaritalStatus = 'M' AND VacationHours < 20;
SELECT TOP 1      E.FirstName + ' ' + E.LastName AS EmployeeName,      2022 - YEAR(E.BirthDate) + 1 AS Age FROM      Employee E JOIN      EmployeeDepartmentHistory EDH ON E.BusinessEntityID = EDH.BusinessEntityID JOIN      Shift S ON EDH.ShiftID = S.ShiftID WHERE      S.ShiftID = 3 ORDER BY      E.BirthDate ASC;
SELECT e.* FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID WHERE d.Name = 'Shipping and Receiving' AND YEAR(e.HireDate) = 2009;
SELECT e.JobTitle, d.Name AS DepartmentName FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID WHERE e.BirthDate = (SELECT MIN(BirthDate) FROM Employee);
SELECT      edh.DepartmentID,     AVG(eph.Rate) AS AverageHourlyPayRate FROM      EmployeePayHistory eph JOIN      EmployeeDepartmentHistory edh ON eph.BusinessEntityID = edh.BusinessEntityID WHERE      eph.RateChangeDate = (         SELECT MAX(RateChangeDate)          FROM EmployeePayHistory          WHERE BusinessEntityID = eph.BusinessEntityID     ) GROUP BY      edh.DepartmentID;
SELECT TOP 1 e.BusinessEntityID, e.JobTitle, eph.Rate FROM Employee e JOIN EmployeePayHistory eph ON e.BusinessEntityID = eph.BusinessEntityID WHERE e.JobTitle != 'Chief Executive Officer' ORDER BY eph.Rate DESC;
SELECT v.Name FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID WHERE pv.ProductID = 319 ORDER BY pv.AverageLeadTime ASC LIMIT 1;
SELECT p.Name  FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID JOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID WHERE v.Name = 'Australia Bike Retailer' ORDER BY p.ProductID;
SELECT TOP 1 v.Name, (pv.StandardPrice - pv.LastReceiptCost) AS ProfitOnNet FROM ProductVendor pv JOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID WHERE pv.ProductID = 342 ORDER BY ProfitOnNet DESC;
SELECT      MAX(EPH.Rate) AS CurrentPayRate,     MIN(EPH.Rate) AS PreviousPayRate,     (MAX(EPH.Rate) - MIN(EPH.Rate)) / NULLIF(MIN(EPH.Rate), 0) * 100 AS PercentageIncrement FROM      EmployeePayHistory EPH JOIN      Employee E ON EPH.BusinessEntityID = E.BusinessEntityID WHERE      E.FirstName = 'Rob' AND E.LastName = 'Walters';
SELECT AVG(YEAR(CURDATE()) - YEAR(HireDate)) AS AverageLengthOfEmployment FROM Employee JOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID JOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID WHERE Department.Name = 'Research and Development';
SELECT AVG(YEAR(CURDATE()) - YEAR(HireDate)) AS AverageAge FROM Employee;
SELECT      (COUNT(CASE WHEN JobTitle = 'Sales Representative' THEN 1 END) * 100.0 / COUNT(*)) AS SalesRepresentativePercentage FROM      Employee;
SELECT p.FirstName, p.LastName, e.LoginID AS PhoneNumber FROM Employee e JOIN Person p ON e.BusinessEntityID = p.BusinessEntityID WHERE e.JobTitle = 'Marketing Manager';
SELECT p.FirstName, p.LastName, cc.CardType FROM Person p JOIN PersonCreditCard pcc ON p.BusinessEntityID = pcc.BusinessEntityID JOIN CreditCard cc ON pcc.CreditCardID = cc.CreditCardID WHERE cc.CardType = 'Distinguish';
SELECT sp.Name, st.Name AS TerritoryName FROM Store s JOIN SalesPerson sp ON s.SalesPersonID = sp.BusinessEntityID JOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID WHERE s.Name = 'Area Bike Accessories';
SELECT s.Name AS StoreName, sp.BusinessEntityID AS SalesRepresentativeID FROM Store s JOIN SalesPerson sp ON s.SalesPersonID = sp.BusinessEntityID JOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID WHERE st.Name = 'France';
SELECT p.Name AS ProductName, v.Name AS VendorName FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID JOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID WHERE YEAR(p.SellStartDate) = 2013;
SELECT TOP 1 e.FirstName + ' ' + e.LastName AS SalesRepresentative FROM SalesPerson sp JOIN Employee e ON sp.BusinessEntityID = e.BusinessEntityID ORDER BY sp.SalesYTD DESC;
SELECT p.* FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID WHERE pv.MinOrderQty = 1000 AND p.StandardCost > 17;
SELECT TOP 1 JobTitle FROM Employee WHERE BusinessEntityID IN (     SELECT BusinessEntityID     FROM Person     WHERE Gender = 'M' AND MaritalStatus = 'M' ) ORDER BY BirthDate ASC;
SELECT v.Name  FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID JOIN Product p ON pv.ProductID = p.ProductID WHERE p.ProductNumber = 'WB-H098';
SELECT TOP 1 v.BusinessEntityID, v.Name, pv.AverageLeadTime FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID WHERE pv.ProductID = 348 ORDER BY pv.AverageLeadTime ASC;
SELECT TOP 1 * FROM Employee WHERE YEAR(BirthDate) >= 1970 ORDER BY SickLeaveHours ASC;
WITH EmployeeAges AS (     SELECT          d.DepartmentID,         AVG(DATEDIFF(YEAR, e.BirthDate, GETDATE())) AS AverageAge,         MIN(e.BirthDate) AS YoungestBirthDate     FROM          Employee e     JOIN          EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID     JOIN          Department d ON edh.DepartmentID = d.DepartmentID     GROUP BY          d.DepartmentID ) SELECT      DepartmentID,     AverageAge,     (SELECT DepartmentID FROM EmployeeAges WHERE BirthDate = YoungestBirthDate) AS YoungestDepartment FROM      EmployeeAges;
SELECT TOP 3 ProductSubcategoryID FROM ProductSubcategory;
SELECT      SalesQuota - SalesYTD AS SalesDifference FROM      SalesPerson WHERE      BusinessEntityID = 288;
SELECT TOP 3 BusinessEntityID, SalesLastYear FROM SalesPerson ORDER BY SalesLastYear ASC;
SELECT TOP 3 Name, SalesYTD FROM SalesTerritory ORDER BY SalesYTD DESC;
SELECT DISTINCT SpecialOffer.Category FROM SpecialOffer WHERE SpecialOffer.Type = 'Group Discount' AND SpecialOffer.Category = 'Reseller';
SELECT MAX(DiscountPct)  FROM SpecialOffer  WHERE Type = 'Excess Inventory';
SELECT      (SELECT PlannedCost FROM WorkOrderRouting WHERE ProductID = 818) -      (SELECT ActualCost FROM WorkOrder WHERE ProductID = 818) AS CostDifference;
SELECT COUNT(*)  FROM BillOfMaterials  WHERE EndDate IS NULL AND BOMLevel = 2;
SELECT COUNT(*)  FROM Document  WHERE Status = 2 AND DocumentSummary IS NULL;
SELECT * FROM SalesTaxRate WHERE Name LIKE '%+%';
SELECT TOP 1 TransactionID FROM TransactionHistory WHERE TransactionType = 'W' ORDER BY Quantity DESC;
SELECT TOP 3 * FROM Vendor WHERE PreferredVendorStatus = 0;
SELECT COUNT(*) AS NotPreferableVendors FROM Vendor WHERE PreferredVendorStatus = 0 AND ActiveFlag = 1;
SELECT COUNT(DISTINCT e.BusinessEntityID) AS EmployeeCount FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Shift s ON edh.ShiftID = s.ShiftID WHERE edh.StartDate >= '2009-01-01' AND s.Name LIKE '%Night%';
SELECT d.Name AS DepartmentName, COUNT(e.BusinessEntityID) AS PersonnelCount FROM Department d JOIN EmployeeDepartmentHistory edh ON d.DepartmentID = edh.DepartmentID JOIN Employee e ON edh.BusinessEntityID = e.BusinessEntityID JOIN EmployeeDepartmentHistory edh2 ON e.BusinessEntityID = edh2.BusinessEntityID JOIN Shift s ON edh2.ShiftID = s.ShiftID WHERE s.Name = 'Night' GROUP BY d.Name ORDER BY PersonnelCount DESC LIMIT 1;
SELECT COUNT(*) AS ShipmentCount FROM SalesOrderHeader AS soh JOIN ShipMethod AS sm ON soh.ShipMethodID = sm.ShipMethodID WHERE sm.Name = 'XRQ - TRUCK GROUND';
SELECT sr.Name FROM SalesOrderHeader soh JOIN SalesOrderHeaderSalesReason sohsr ON soh.SalesOrderID = sohsr.SalesOrderID JOIN SalesReason sr ON sohsr.SalesReasonID = sr.SalesReasonID WHERE soh.SalesOrderID = 43718;
SELECT Name  FROM ProductSubcategory  WHERE ProductCategoryID = (SELECT ProductCategoryID FROM ProductCategory WHERE Name = 'bikes');
SELECT TerritoryID, MAX(SalesQuota) AS HighestYearlySalesQuota FROM SalesPersonQuotaHistory GROUP BY TerritoryID ORDER BY HighestYearlySalesQuota DESC;
SELECT p.Name, sod.OrderQty, sod.UnitPrice, sod.LineTotal FROM SalesOrderHeader soh JOIN SalesOrderDetail sod ON soh.SalesOrderID = sod.SalesOrderID JOIN Product p ON sod.ProductID = p.ProductID WHERE soh.SalesOrderNumber = '43660';
SELECT TOP 5 p.ProductID, p.Name, SUM(so.OrderQty) AS TotalOrders FROM Product p JOIN SalesOrderDetail so ON p.ProductID = so.ProductID GROUP BY p.ProductID, p.Name ORDER BY TotalOrders DESC;
SELECT ProductInventory.Shelf FROM ProductInventory JOIN Product ON ProductInventory.ProductID = Product.ProductID WHERE Product.Name LIKE '%down tube%';
SELECT at.Name FROM Store s JOIN BusinessEntityAddress bea ON s.BusinessEntityID = bea.BusinessEntityID JOIN AddressType at ON bea.AddressTypeID = at.AddressTypeID WHERE s.Name = 'Fun Toys and Bikes';
SELECT p.FirstName, p.LastName, e.JobTitle, e.EmailPromotion FROM Store s JOIN SalesPerson sp ON s.SalesPersonID = sp.BusinessEntityID JOIN BusinessEntityContact bec ON s.BusinessEntityID = bec.BusinessEntityID JOIN Person p ON bec.PersonID = p.BusinessEntityID JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE s.Name = 'Next-Door Bike Store';
SELECT DISTINCT th.ReferenceOrderID FROM Product p JOIN TransactionHistory th ON p.ProductID = th.ProductID WHERE p.Name = 'Mountain End Caps';
SELECT AddressLine1  FROM Address  JOIN BusinessEntityAddress ON Address.AddressID = BusinessEntityAddress.AddressID  WHERE BusinessEntityAddress.BusinessEntityID = 12;
SELECT TOP 3 BusinessEntityID, Name  FROM Store  WHERE City = 'Dallas';
SELECT sp.Name FROM StateProvince sp JOIN Address a ON sp.StateProvinceID = a.StateProvinceID WHERE a.City = 'Racine';
SELECT      (COUNT(CASE WHEN c.Name = 'Arabic' THEN 1 END) * 100.0 / COUNT(c.CultureID)) -      (COUNT(CASE WHEN c.Name = 'Thai' THEN 1 END) * 100.0 / COUNT(c.CultureID)) AS PercentageDifference FROM      Culture c JOIN      ProductModelProductDescriptionCulture pm ON c.CultureID = pm.CultureID;
SELECT      (COUNT(CASE WHEN sp.SalesQuota > 300000 THEN 1 END) * 100.0 / COUNT(sp.TerritoryID)) AS Percentage FROM      SalesPerson sp JOIN      SalesTerritory st ON sp.TerritoryID = st.TerritoryID JOIN      CountryRegion cr ON st.CountryRegionCode = cr.CountryRegionCode WHERE      cr.Name = 'Northwest' AND cr.CountryRegionCode = 'US';
SELECT (pv.LastReceiptCost - p.StandardCost) AS NetProfit FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID WHERE p.Name = 'Crankarm';
SELECT TOP 1 p.Name FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE pr.Rating = 5 ORDER BY pr.ModifiedDate DESC;
SELECT MAX(Rate) AS SecondHighestSalaryPerHour FROM EmployeePayHistory WHERE BusinessEntityID IN (     SELECT BusinessEntityID     FROM Employee     WHERE SalariedFlag = 0 )  AND PayFrequency = 1 GROUP BY BusinessEntityID ORDER BY SecondHighestSalaryPerHour DESC OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY;
SELECT COUNT(*)  FROM CreditCard  WHERE CardType = 'Vista' AND ExpYear <= 2006;
SELECT StartTime  FROM Shift  WHERE Name = 'Night';
SELECT p.Name, p.Weight FROM Product p WHERE p.WeightUnitMeasureCode = 'LB' AND p.ProductID IN (     SELECT TOP 1 ProductID     FROM Product     GROUP BY Style     ORDER BY COUNT(*) DESC ) ORDER BY p.Weight;
SELECT      st.Name AS TerritoryName,      cr.Name AS CountryRegionName,      MAX(st.SalesLastYear - st.SalesYTD) AS SalesDifference FROM      SalesTerritory st JOIN      CountryRegion cr ON st.CountryRegionCode = cr.CountryRegionCode GROUP BY      st.Name, cr.Name ORDER BY      SalesDifference DESC LIMIT 1;
SELECT TOP 6 Name, ReorderPoint FROM Product WHERE SizeUnitMeasureCode = 'CM' ORDER BY Size DESC;
SELECT TotalDue  FROM PurchaseOrderHeader  ORDER BY Freight DESC  OFFSET 2 ROWS  FETCH NEXT 1 ROWS ONLY;
SELECT (ListPrice - StandardCost) * 10 AS Profit FROM Product WHERE Weight = (SELECT MIN(Weight) FROM Product);
SELECT PurchaseOrderID, TaxAmt  FROM PurchaseOrderHeader  WHERE TaxAmt = (SELECT MAX(TaxAmt) FROM PurchaseOrderHeader);
SELECT COUNT(DISTINCT sp.BusinessEntityID) AS NumberOfPersons FROM SalesPerson sp WHERE sp.SalesQuota <= 50000;
SELECT Shift.Name FROM Employee JOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID JOIN Shift ON EmployeeDepartmentHistory.ShiftID = Shift.ShiftID WHERE YEAR(Employee.BirthDate) < 1969 ORDER BY Employee.BirthDate ASC OFFSET 5 ROWS FETCH NEXT 1 ROWS ONLY;
SELECT p.ProductID, p.Name, (p.ListPrice - p.StandardCost) AS Profit, pr.Rating FROM Product p LEFT JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE p.DaysToManufacture = (SELECT MIN(DaysToManufacture) FROM Product) ORDER BY Profit DESC LIMIT 1;
SELECT CONCAT(e.FirstName, ' ', e.MiddleName, ' ', e.LastName) AS FullName FROM SalesPerson sp JOIN Employee e ON sp.BusinessEntityID = e.BusinessEntityID WHERE sp.Bonus < 1000;
SELECT E.ModifiedDate FROM Employee E JOIN EmployeeDepartmentHistory EDH ON E.BusinessEntityID = EDH.BusinessEntityID JOIN Department D ON EDH.DepartmentID = D.DepartmentID WHERE E.JobTitle = 'Senior Tool Designer'   AND YEAR(E.HireDate) - YEAR(E.BirthDate) = 33   AND D.Name = 'Engineering'   AND EDH.EndDate IS NOT NULL ORDER BY EDH.EndDate DESC LIMIT 1;
SELECT SUM(PurchaseOrderHeader.TotalDue) AS TotalDueAmount FROM Vendor JOIN PurchaseOrderHeader ON Vendor.BusinessEntityID = PurchaseOrderHeader.VendorID WHERE Vendor.CreditRating = 4 AND Vendor.PreferredVendorStatus = 0;
SELECT d.Name AS DepartmentName FROM Department d JOIN Employee e ON d.DepartmentID = e.DepartmentID JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Shift s ON edh.ShiftID = s.ShiftID WHERE s.Name = 'Night' GROUP BY d.Name HAVING COUNT(s.Name) = (     SELECT MAX(shift_count)     FROM (         SELECT COUNT(s.Name) AS shift_count         FROM Department d         JOIN Employee e ON d.DepartmentID = e.DepartmentID         JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID         JOIN Shift s ON edh.ShiftID = s.ShiftID         WHERE s.Name = 'Night'         GROUP BY d.Name     ) AS counts );
SELECT (2 * (p.ListPrice - p.StandardCost)) AS Profit FROM Product p JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID WHERE p.Class = 'H' AND p.Name LIKE '%Road Bike%' AND p.Size = 58;
SELECT TOP 10      FirstName + ' ' + ISNULL(MiddleName + ' ', '') + LastName AS FullName FROM      Employee WHERE      MaritalStatus = 'M'      AND JobTitle = 'Production Technician' ORDER BY      BirthDate DESC;
SELECT v.Name, v.CreditRating, (pv.LastReceiptCost - p.StandardCost) AS ProfitOnNet FROM ProductVendor pv JOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID JOIN Product p ON pv.ProductID = p.ProductID WHERE pv.AverageLeadTime = 60 ORDER BY ProfitOnNet DESC LIMIT 1;
SELECT      pv.BusinessEntityID AS VendorID,     v.Name AS VendorName,     (pv.LastReceiptCost - pv.StandardPrice) AS ProfitOnNet FROM      ProductVendor pv JOIN      Vendor v ON pv.BusinessEntityID = v.BusinessEntityID JOIN      Product p ON pv.ProductID = p.ProductID WHERE      pv.MaxOrderQty = 200;
SELECT TOP 1      CONCAT(p.FirstName, ' ', p.LastName) AS FullName,     COUNT(poh.PurchaseOrderID) AS RejectedOrderCount FROM      Employee e JOIN      Person p ON e.BusinessEntityID = p.BusinessEntityID JOIN      PurchaseOrderHeader poh ON e.BusinessEntityID = poh.EmployeeID WHERE      p.PersonType = 'EM' AND poh.Status = 3 GROUP BY      p.FirstName, p.LastName ORDER BY      RejectedOrderCount DESC;
SELECT Name  FROM Vendor  JOIN ProductVendor ON Vendor.BusinessEntityID = ProductVendor.BusinessEntityID  WHERE MinOrderQty = (SELECT DISTINCT MinOrderQty                        FROM ProductVendor                        ORDER BY MinOrderQty                        OFFSET 1 ROWS                        FETCH NEXT 1 ROWS ONLY);
SELECT v.Name, pv.MinOrderQty FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID WHERE v.ActiveFlag = 0;
SELECT      CONCAT(FirstName, ' ', MiddleName, ' ', LastName) AS FullName,     YEAR(HireDate) - YEAR(BirthDate) AS AgeAtHire FROM      Employee WHERE      VacationHours <= 10 ORDER BY      HireDate LIMIT 1;
SELECT DISTINCT p.PersonType FROM Employee e JOIN Person p ON e.BusinessEntityID = p.BusinessEntityID WHERE e.HireDate BETWEEN '2008-01-01' AND '2008-12-31'   AND e.MaritalStatus = 'S'   AND e.Gender = 'F';
SELECT      (p.ListPrice - p.StandardCost) AS Profit FROM      Product p JOIN      ProductReview pr ON p.ProductID = pr.ProductID WHERE      pr.ReviewerName = 'David' AND pr.Rating = 4 ORDER BY      pr.ReviewDate DESC OFFSET 1 ROW FETCH NEXT 1 ROW ONLY;
SELECT sp.Name AS StateProvinceName, st.Group AS GeographicArea FROM SalesTaxRate str JOIN StateProvince sp ON str.StateProvinceID = sp.StateProvinceID ORDER BY str.TaxRate ASC OFFSET 1 ROW FETCH NEXT 1 ROW ONLY;
SELECT      AVG(ListPrice - StandardCost) AS AverageProfit,     COUNT(DISTINCT Size) AS VarietyOfSizes,     COUNT(DISTINCT Color) AS AvailableColors FROM      Product WHERE      Class = 'L'      AND Style = 'U'      AND ProductSubcategoryID IN (SELECT ProductSubcategoryID FROM ProductSubcategory WHERE Name = 'road frame');
SELECT DiscountPct  FROM SpecialOffer  WHERE Description = 'LL Road Frame Sale';
SELECT COUNT(*)  FROM SpecialOffer  WHERE Type = 'Excess Inventory';
SELECT TOP 1 Description, DiscountPct  FROM SpecialOffer  WHERE Type = 'Seasonal'  ORDER BY DiscountPct DESC;
SELECT TOP 3 * FROM SpecialOffer WHERE Category = 'Reseller' ORDER BY DiscountPct DESC;
SELECT s.Demographics  FROM Store s  WHERE s.Name = 'Valley Bicycle Specialists';
SELECT COUNT(*)  FROM Product  WHERE MakeFlag = 1 AND FinishedGoodsFlag = 1;
SELECT MIN(SafetyStockLevel) AS MinimumInventoryQuantity FROM Product WHERE Name = 'Chainring Bolts';
SELECT TOP 1 Name, StandardCost  FROM Product  ORDER BY StandardCost DESC;
SELECT PersonType  FROM Person  WHERE FirstName = 'David' AND LastName = 'Bradley';
SELECT COUNT(e.BusinessEntityID) AS NumberOfMrStoreContacts FROM Employee e JOIN BusinessEntityContact bec ON e.BusinessEntityID = bec.BusinessEntityID JOIN Person p ON bec.PersonID = p.BusinessEntityID WHERE p.PersonType = 'SC' AND p.Title = 'Mr.';
SELECT s.Name, a.AddressLine1, a.AddressLine2 FROM Store s JOIN BusinessEntityAddress bea ON s.BusinessEntityID = bea.BusinessEntityID JOIN Address a ON bea.AddressID = a.AddressID WHERE s.Name = 'Valley Bicycle Specialists';
SELECT EmailAddress  FROM EmailAddress  WHERE BusinessEntityID = (     SELECT BusinessEntityID      FROM Person      WHERE FirstName = 'David' AND LastName = 'Bradley' );
SELECT e.EmailAddress, p.FirstName, p.LastName, pn.PhoneNumber FROM Store s JOIN BusinessEntityContact bec ON s.BusinessEntityID = bec.BusinessEntityID JOIN Person p ON bec.PersonID = p.BusinessEntityID JOIN EmailAddress e ON s.BusinessEntityID = e.BusinessEntityID JOIN PhoneNumber pn ON p.BusinessEntityID = pn.BusinessEntityID WHERE p.PersonType = 'SC';
SELECT p.PasswordHash  FROM Person AS p  JOIN Password AS pw ON p.BusinessEntityID = pw.BusinessEntityID  WHERE p.FirstName = 'David' AND p.LastName = 'Bradley';
SELECT e.EmailAddress FROM Employee emp JOIN BusinessEntityContact bec ON emp.BusinessEntityID = bec.BusinessEntityID JOIN EmailAddress e ON bec.PersonID = e.BusinessEntityID WHERE emp.EmailPromotion = 2;
SELECT c.CardNumber  FROM Person p  JOIN CreditCard cc ON p.BusinessEntityID = cc.BusinessEntityID  WHERE p.FirstName = 'David' AND p.LastName = 'Bradley';
SELECT ExpYear  FROM CreditCard  WHERE CreditCardID IN (     SELECT CreditCardID      FROM PersonCreditCard      WHERE BusinessEntityID = (         SELECT BusinessEntityID          FROM Person          WHERE FirstName = 'David' AND LastName = 'Bradley'     ) );
SELECT p.FirstName, p.LastName FROM Person p JOIN BusinessEntityContact bec ON p.BusinessEntityID = bec.PersonID JOIN Store s ON bec.BusinessEntityID = s.BusinessEntityID JOIN PersonCreditCard pcc ON p.BusinessEntityID = pcc.BusinessEntityID JOIN CreditCard cc ON pcc.CreditCardID = cc.CreditCardID WHERE cc.ExpYear = 2007 AND p.PersonType = 'SC';
SELECT COUNT(DISTINCT e.BusinessEntityID) AS StoreContactWithVistaCreditCard FROM Employee e JOIN BusinessEntityContact bec ON e.BusinessEntityID = bec.BusinessEntityID JOIN Person p ON bec.PersonID = p.BusinessEntityID JOIN PersonCreditCard pcc ON e.BusinessEntityID = pcc.BusinessEntityID JOIN CreditCard cc ON pcc.CreditCardID = cc.CreditCardID WHERE p.PersonType = 'SC' AND cc.CardType = 'vista';
SELECT COUNT(DISTINCT DepartmentID) AS DepartmentCount FROM EmployeeDepartmentHistory WHERE BusinessEntityID IN (     SELECT BusinessEntityID     FROM Employee     WHERE FirstName = 'David' AND LastName = 'Bradley' );
SELECT d.Name  FROM Department d JOIN EmployeeDepartmentHistory edh ON d.DepartmentID = edh.DepartmentID JOIN Employee e ON edh.BusinessEntityID = e.BusinessEntityID WHERE e.LoginID = 'DavidBradley';
SELECT COUNT(DISTINCT e.BusinessEntityID) AS NumberOfPeople FROM EmployeeDepartmentHistory edh JOIN Employee e ON edh.BusinessEntityID = e.BusinessEntityID WHERE edh.DepartmentID = (SELECT DepartmentID FROM Department WHERE Name = 'Engineering') AND YEAR(edh.StartDate) <= 2009 AND (edh.EndDate IS NULL OR YEAR(edh.EndDate) > 2009);
SELECT p.FirstName, p.LastName FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID JOIN Person p ON e.BusinessEntityID = p.BusinessEntityID WHERE d.Name = 'Engineering' ORDER BY DATEDIFF(edh.EndDate, edh.StartDate) DESC LIMIT 1;
SELECT COUNT(DISTINCT e.BusinessEntityID) AS StoreContactCount FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID JOIN BusinessEntityContact bec ON e.BusinessEntityID = bec.BusinessEntityID JOIN Person p ON bec.PersonID = p.BusinessEntityID WHERE d.GroupName = 'Manufacturing' AND YEAR(edh.StartDate) < 2007 AND YEAR(edh.EndDate) > 2007 AND p.PersonType = 'SC';
SELECT c.CardNumber FROM CreditCard c JOIN Employee e ON c.BusinessEntityID = e.BusinessEntityID JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID WHERE d.Name = 'Finance' AND edh.EndDate IS NOT NULL;
SELECT COUNT(e.BusinessEntityID) AS EmployeeCount FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID JOIN PersonCreditCard pcc ON e.BusinessEntityID = pcc.BusinessEntityID JOIN CreditCard cc ON pcc.CreditCardID = cc.CreditCardID WHERE d.Name = 'Engineering' AND YEAR(edh.StartDate) = 2007 AND cc.ExpYear = 2007;
SELECT e.EmailAddress FROM Employee e JOIN (     SELECT BusinessEntityID, COUNT(DepartmentID) AS DeptSwitchCount     FROM EmployeeDepartmentHistory     GROUP BY BusinessEntityID ) edh ON e.BusinessEntityID = edh.BusinessEntityID WHERE edh.DeptSwitchCount = (     SELECT MAX(DeptSwitchCount)     FROM (         SELECT COUNT(DepartmentID) AS DeptSwitchCount         FROM EmployeeDepartmentHistory         GROUP BY BusinessEntityID     ) AS subquery );
SELECT COUNT(DISTINCT e.BusinessEntityID) AS EmployeeCount FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID WHERE e.EmailPromotion = 0 AND edh.DepartmentID = (SELECT DepartmentID FROM Department WHERE Name = 'Engineering');
SELECT COUNT(*)  FROM EmployeeDepartmentHistory  WHERE DepartmentID IN (SELECT DepartmentID FROM Department WHERE GroupName = 'Quality Assurance Group')  AND YEAR(StartDate) = 2007;
SELECT p.Name FROM Product p JOIN SpecialOfferProduct sop ON p.ProductID = sop.ProductID JOIN SpecialOffer so ON sop.SpecialOfferID = so.SpecialOfferID WHERE so.Description = 'LL Road Frame Sale';
SELECT SUM(SOD.OrderQty) AS TotalProducts FROM SalesOrderDetail SOD JOIN SalesOrderHeader SOH ON SOD.SalesOrderID = SOH.SalesOrderID JOIN SpecialOffer SO ON SOD.SpecialOfferID = SO.SpecialOfferID WHERE SO.Description = 'LL Road Frame Sale';
SELECT COUNT(*) > 0 AS HasBeenOnSale FROM Product WHERE Name = 'Chainring Bolts' AND SellStartDate IS NOT NULL;
SELECT SUM(SOD.OrderQty) AS TotalProducts FROM SalesOrderDetail SOD JOIN SalesOrderHeader SOH ON SOD.SalesOrderID = SOH.SalesOrderID JOIN SpecialOffer SO ON SO.SpecialOfferID = SOD.SpecialOfferID JOIN Product P ON SOD.ProductID = P.ProductID JOIN ProductSubcategory PS ON P.ProductSubcategoryID = PS.ProductSubcategoryID JOIN ProductCategory PC ON PS.ProductCategoryID = PC.ProductCategoryID WHERE SO.Description = 'LL Road Frame Sale' AND PC.Name = 'Clothing';
SELECT p.* FROM Product p JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID JOIN ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID WHERE pc.Name = 'Clothing' AND p.MakeFlag = 1 AND p.FinishedGoodsFlag = 1;
SELECT AVG(YEAR(EndDate) - YEAR(StartDate)) AS AverageStay FROM EmployeeDepartmentHistory T1 JOIN Department D ON T1.DepartmentID = D.DepartmentID WHERE D.Name = 'Engineering' AND T1.EndDate IS NOT NULL;
SELECT AVG(EH.Rate) AS AveragePayRate FROM EmployeePayHistory EH JOIN Employee E ON EH.BusinessEntityID = E.BusinessEntityID JOIN EmployeeDepartmentHistory EDH ON E.BusinessEntityID = EDH.BusinessEntityID JOIN Department D ON EDH.DepartmentID = D.DepartmentID WHERE D.Name = 'Engineering'  AND EDH.StartDate < '2007-01-01'  AND EDH.EndDate > '2007-12-31';
SELECT      (MAX(ListPrice) - MIN(ListPrice)) / MIN(ListPrice) * 100 AS PriceDifferencePercentage FROM      Product WHERE      ProductSubcategoryID IN (         SELECT ProductSubcategoryID          FROM ProductSubcategory          WHERE ProductCategoryID = (SELECT ProductCategoryID FROM ProductCategory WHERE Name = 'Clothing')     );
SELECT AVG(ListPrice - StandardCost) AS AverageProfit FROM Product JOIN ProductSubcategory ON Product.ProductSubcategoryID = ProductSubcategory.ProductSubcategoryID JOIN ProductCategory ON ProductSubcategory.ProductCategoryID = ProductCategory.ProductCategoryID WHERE ProductCategory.Name = 'Clothing';
SELECT ProductID, StandardCost  FROM ProductCostHistory  WHERE StartDate <= '2013-12-31' AND EndDate >= '2013-01-01'  ORDER BY StandardCost ASC  LIMIT 1;
SELECT * FROM Product WHERE Color = 'Yellow';
SELECT BusinessEntityID  FROM Person  WHERE FirstName = 'Hung-Fu' AND LastName = 'Ting';
SELECT pn.PhoneNumber FROM PhoneNumber pn JOIN BusinessEntityContact bec ON pn.BusinessEntityID = bec.BusinessEntityID WHERE bec.PersonID = 12597;
SELECT ListPrice FROM Product WHERE ProductID = 912;
SELECT * FROM WorkOrderRouting WHERE ActualCost != PlannedCost;
SELECT ThumbnailPhotoFileName  FROM ProductPhoto  WHERE ProductPhotoID = (SELECT ProductPhotoID FROM ProductProductPhoto WHERE ProductID = 979);
SELECT Name FROM Product WHERE ListPrice > 1000;
SELECT TOP 1 ProductID, Name, (ListPrice - StandardCost) AS Profit FROM Product ORDER BY Profit DESC;
SELECT p.Name  FROM Product p JOIN ProductInventory pi ON p.ProductID = pi.ProductID WHERE pi.LocationID = 1 AND pi.Shelf = 'L' AND pi.Bin = 6;
SELECT LocationID  FROM WorkOrderRouting  WHERE WorkOrderID = 35493;
SELECT *  FROM ProductPhoto  WHERE LargePhoto IS NOT NULL;
SELECT p.* FROM Product p JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID WHERE ps.Name = 'Socks';
SELECT FLOOR(100 / ListPrice) AS NumberOfCableLocks FROM Product WHERE Name = 'Cable Lock';
SELECT sr.Name  FROM WorkOrder wo JOIN ScrapReason sr ON wo.ScrapReasonID = sr.ScrapReasonID WHERE wo.WorkOrderID = 57788;
SELECT StandardCost FROM Product WHERE Name LIKE '%sports%';
SELECT SUM(ProductInventory.Quantity) AS TotalQuantity FROM ProductInventory JOIN Location ON ProductInventory.LocationID = Location.LocationID WHERE ProductInventory.ProductID = 476 AND Location.Name = 'Metal Storage';
SELECT * FROM Product WHERE StandardCost < (SELECT AVG(StandardCost) FROM Product);
SELECT      DIVIDE((ListPrice - StandardCost), StandardCost) AS percentage_of_profit FROM      Product WHERE      ProductID = '858';
SELECT COUNT(*)  FROM ProductPhoto  WHERE ProductPhotoID != 1;
SELECT DATEDIFF(DAY, ActualStartDate, ActualEndDate) AS DaysToEnd FROM WorkOrder WHERE WorkOrderID = 425;
SELECT TOP 1 Name, ListPrice  FROM Product  WHERE SellStartDate <= '2012-12-31' AND (SellEndDate IS NULL OR SellEndDate >= '2012-01-01')  ORDER BY ListPrice DESC;
SELECT StandardCost  FROM Product  WHERE ProductID = '847';
SELECT OrganizationLevel  FROM Employee  WHERE JobTitle = 'Human Resources Manager';
SELECT COUNT(*) AS WorkOrdersNotMetDueDate FROM WorkOrder WHERE EndDate > DueDate;
SELECT StandardCost, ProductNumber  FROM Product  WHERE ProductID = 888;
SELECT COUNT(*)  FROM ProductPhoto  WHERE ThumbnailPhotoFileName = 'roadster_black_small.gif';
SELECT LocationID, Shelf AS Compartment, Bin AS Container FROM ProductInventory WHERE ProductID = (SELECT ProductID FROM Product WHERE Name = 'Lock Ring');
SELECT pc.Name AS ProductCategory FROM ProductSubcategory ps JOIN ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID WHERE ps.Name = 'Road Frames';
SELECT w.* FROM WorkOrder w JOIN ScrapReason sr ON w.ScrapReasonID = sr.ScrapReasonID WHERE sr.Name = 'handling damage';
SELECT (ListPrice - StandardCost) AS Profit FROM Product WHERE ProductID = '792';
SELECT p.FirstName, p.LastName FROM Person p JOIN EmailAddress e ON p.BusinessEntityID = e.BusinessEntityID WHERE e.EmailAddress = 'regina7@adventure-works.com';
SELECT LocationID, Shelf, Bin, Quantity  FROM ProductInventory  WHERE ProductID = '810';
SELECT p.Name  FROM WorkOrder w JOIN Product p ON w.ProductID = p.ProductID WHERE w.WorkOrderID = 2540;
SELECT ListPrice FROM Product WHERE Name = 'AWC Logo Cap';
SELECT w.* FROM WorkOrder w JOIN Product p ON w.ProductID = p.ProductID WHERE p.Name = 'Down Tube';
SELECT AVG((ListPrice - StandardCost) / StandardCost * 100) AS AverageProfitPercentage FROM Product;
SELECT      CAST(SUM(CASE WHEN Name = 'Subassembly' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(WorkOrderID) AS Proportion FROM      WorkOrder;
SELECT COUNT(DISTINCT OBJ_SAMPLE_ID)  FROM IMG_OBJ  WHERE IMG_ID = 1;
SELECT COUNT(DISTINCT IMG_ID) AS ImageCount FROM IMG_OBJ GROUP BY IMG_ID HAVING COUNT(OBJ_SAMPLE_ID) > 20;
SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID ORDER BY COUNT(OBJ_SAMPLE_ID) DESC LIMIT 1;
SELECT OBJ_SAMPLE_ID  FROM IMG_OBJ  WHERE IMG_ID = 1 AND OBJ_CLASS_ID = 297;
SELECT COUNT(*)  FROM IMG_REL  WHERE IMG_ID = 5 AND OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID;
SELECT X, Y, W, H  FROM IMG_OBJ  WHERE IMG_ID = 5  AND OBJ_SAMPLE_ID IN (     SELECT OBJ1_SAMPLE_ID      FROM IMG_REL      WHERE IMG_ID = 5      AND OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID );
SELECT COUNT(*)  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE IMG_OBJ.IMG_ID = 1 AND OBJ_CLASSES.OBJ_CLASS = 'man';
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ  WHERE OBJ_CLASS_ID IN (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'man');
SELECT DISTINCT OBJ_CLASSES.OBJ_CLASS FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 1;
SELECT PRED_CLASS FROM IMG_REL JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID WHERE IMG_REL.IMG_ID = 1 AND IMG_REL.OBJ1_SAMPLE_ID = 8 AND IMG_REL.OBJ2_SAMPLE_ID = 4;
SELECT COUNT(*)  FROM IMG_REL  WHERE IMG_ID = 1 AND PRED_CLASS_ID = (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'parked on');
SELECT PRED_CLASSES.PRED_CLASS FROM IMG_REL JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID WHERE IMG_REL.IMG_ID = 1 AND (IMG_REL.OBJ1_SAMPLE_ID = 14 OR IMG_REL.OBJ2_SAMPLE_ID = 14);
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_REL  WHERE PRED_CLASS_ID = (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'parked on')  AND OBJ1_SAMPLE_ID != OBJ2_SAMPLE_ID;
SELECT IMG_ID FROM IMG_REL WHERE PRED_CLASS_ID = (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'parked on') GROUP BY IMG_ID HAVING COUNT(DISTINCT CASE WHEN OBJ1_SAMPLE_ID != OBJ2_SAMPLE_ID THEN CONCAT(OBJ1_SAMPLE_ID, '-', OBJ2_SAMPLE_ID) END) > 2;
SELECT PRED_CLASSES.PRED_CLASS FROM IMG_REL JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID WHERE IMG_REL.IMG_ID = 5 AND IMG_REL.OBJ1_SAMPLE_ID = IMG_REL.OBJ2_SAMPLE_ID;
SELECT IMG_OBJ.X, IMG_OBJ.Y, IMG_OBJ.W, IMG_OBJ.H FROM IMG_OBJ JOIN IMG_REL ON IMG_OBJ.OBJ_SAMPLE_ID = IMG_REL.OBJ1_SAMPLE_ID OR IMG_OBJ.OBJ_SAMPLE_ID = IMG_REL.OBJ2_SAMPLE_ID JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID WHERE IMG_OBJ.IMG_ID = 1 AND PRED_CLASSES.PRED_CLASS = 'by';
SELECT AVG(ABS(o1.Y - o2.Y) ) AS average_y_difference FROM IMG_REL r JOIN IMG_OBJ o1 ON r.IMG_ID = o1.IMG_ID AND r.OBJ1_SAMPLE_ID = o1.OBJ_SAMPLE_ID JOIN IMG_OBJ o2 ON r.IMG_ID = o2.IMG_ID AND r.OBJ2_SAMPLE_ID = o2.OBJ_SAMPLE_ID WHERE r.IMG_ID = 1 AND r.PRED_CLASS_ID = (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'parked on') AND o1.OBJ_SAMPLE_ID != o2.OBJ_SAMPLE_ID;
SELECT      (COUNT(CASE WHEN o.OBJ_CLASS = 'man' THEN i.OBJ_SAMPLE_ID END) * 100.0 / COUNT(i.OBJ_SAMPLE_ID)) AS percentage FROM      IMG_OBJ i JOIN      OBJ_CLASSES o ON i.OBJ_CLASS_ID = o.OBJ_CLASS_ID WHERE      i.IMG_ID = 1;
SELECT COUNT(*) AS total_attribute_classes FROM ATT_CLASSES;
SELECT COUNT(*) FROM OBJ_CLASSES;
SELECT COUNT(*) AS number_of_predicted_classes FROM PRED_CLASSES;
SELECT X, Y, W, H  FROM IMG_OBJ  WHERE IMG_ID = 2324765 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'kite');
SELECT COUNT(DISTINCT IMG_OBJ.OBJ_SAMPLE_ID) AS white_object_count FROM IMG_OBJ JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID AND IMG_OBJ.OBJ_SAMPLE_ID = IMG_OBJ_ATT.OBJ_SAMPLE_ID JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID WHERE IMG_OBJ.IMG_ID = 2347915 AND ATT_CLASSES.ATT_CLASS = 'white';
SELECT COUNT(DISTINCT IMG_OBJ.OBJ_SAMPLE_ID) AS sample_count FROM IMG_OBJ JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID AND IMG_OBJ.OBJ_SAMPLE_ID = IMG_OBJ_ATT.OBJ_SAMPLE_ID JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID WHERE IMG_OBJ.IMG_ID = 2377985 AND ATT_CLASSES.ATT_CLASS = 'electrical';
SELECT PRED_CLASS.PRED_CLASS  FROM IMG_REL  JOIN PRED_CLASSES AS PRED_CLASS ON IMG_REL.PRED_CLASS_ID = PRED_CLASS.PRED_CLASS_ID  WHERE IMG_REL.IMG_ID = 2345511 AND IMG_REL.OBJ1_SAMPLE_ID = 12 AND IMG_REL.OBJ2_SAMPLE_ID = 8;
SELECT OBJ1_SAMPLE_ID  FROM IMG_REL  WHERE IMG_ID = 2345524 AND OBJ2_SAMPLE_ID = 1 AND PRED_CLASS_ID = (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'lying on');
SELECT COUNT(*)  FROM IMG_OBJ  WHERE IMG_ID = 6 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'food');
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ  WHERE OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'suit');
SELECT r.PRED_CLASS_ID, p.PRED_CLASS FROM IMG_REL r JOIN IMG_OBJ o1 ON r.IMG_ID = o1.IMG_ID AND o1.OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'feathers') JOIN IMG_OBJ o2 ON r.IMG_ID = o2.IMG_ID AND o2.OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion') JOIN PRED_CLASSES p ON r.PRED_CLASS_ID = p.PRED_CLASS_ID WHERE r.IMG_ID = 2345528;
SELECT a.ATT_CLASS  FROM ATT_CLASSES a JOIN IMG_OBJ_ATT ia ON a.ATT_CLASS_ID = ia.ATT_CLASS_ID JOIN IMG_OBJ io ON ia.IMG_ID = io.IMG_ID WHERE io.IMG_ID = 2377988 AND io.OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'weeds');
SELECT o.OBJ_CLASS FROM IMG_OBJ_ATT ia JOIN IMG_OBJ io ON ia.IMG_ID = io.IMG_ID AND ia.OBJ_SAMPLE_ID = io.OBJ_SAMPLE_ID JOIN OBJ_CLASSES o ON io.OBJ_CLASS_ID = o.OBJ_CLASS_ID JOIN ATT_CLASSES a ON ia.ATT_CLASS_ID = a.ATT_CLASS_ID WHERE a.ATT_CLASS = 'blurry' AND ia.IMG_ID = 2377993;
SELECT COUNT(*)  FROM IMG_OBJ  WHERE IMG_ID = 2353079 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'wall');
SELECT OBJ_CLASS  FROM OBJ_CLASSES  WHERE OBJ_CLASS_ID = (     SELECT OBJ_CLASS_ID      FROM IMG_OBJ      WHERE IMG_ID = 2320341 AND OBJ_SAMPLE_ID = 10 );
SELECT      (COUNT(CASE WHEN o.OBJ_CLASS = 'broccoli' THEN i.OBJ_SAMPLE_ID END) * 1.0) /      (COUNT(CASE WHEN o.OBJ_CLASS = 'tomato' THEN i.OBJ_SAMPLE_ID END)) AS ratio FROM      IMG_OBJ i JOIN      OBJ_CLASSES o ON i.OBJ_CLASS_ID = o.OBJ_CLASS_ID;
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ_ATT  GROUP BY IMG_ID  HAVING COUNT(ATT_CLASS_ID) >= 25;
SELECT DISTINCT IMG_ID  FROM IMG_REL  WHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID;
SELECT COUNT(OBJ_SAMPLE_ID)  FROM IMG_OBJ_ATT  WHERE ATT_CLASS_ID = (     SELECT ATT_CLASS_ID      FROM IMG_OBJ_ATT      GROUP BY ATT_CLASS_ID      ORDER BY COUNT(OBJ_SAMPLE_ID) DESC      LIMIT 1 );
SELECT OBJ_CLASS_ID  FROM OBJ_CLASSES  WHERE OBJ_CLASS IN ('bus', 'train', 'aeroplane', 'car', 'etc.');
SELECT OBJ_CLASSES.OBJ_CLASS FROM ATT_CLASSES JOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID JOIN IMG_OBJ ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE ATT_CLASSES.ATT_CLASS = 'very large bike';
SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion';
SELECT DISTINCT a.ATT_CLASS FROM ATT_CLASSES a JOIN IMG_OBJ_ATT ia ON a.ATT_CLASS_ID = ia.ATT_CLASS_ID WHERE ia.IMG_ID = 8;
SELECT X, Y, W, H  FROM IMG_OBJ  WHERE IMG_ID = 4  AND OBJ_SAMPLE_ID IN (     SELECT OBJ1_SAMPLE_ID      FROM IMG_REL      WHERE IMG_ID = 4      AND PRED_CLASS_ID = 144 );
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ_ATT  JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID  WHERE ATT_CLASSES.ATT_CLASS = 'black'  GROUP BY IMG_ID  HAVING COUNT(ATT_CLASS_ID) >= 5;
SELECT IMG_REL.PRED_CLASS_ID FROM IMG_OBJ JOIN IMG_REL ON IMG_OBJ.IMG_ID = IMG_REL.IMG_ID WHERE IMG_OBJ.H = (SELECT MAX(H) FROM IMG_OBJ);
SELECT IMG_ID FROM IMG_OBJ_ATT JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID WHERE ATT_CLASSES.ATT_CLASS = 'white' GROUP BY IMG_ID ORDER BY COUNT(ATT_CLASS_ID) DESC LIMIT 1;
SELECT IMG_OBJ.X, IMG_OBJ.Y FROM IMG_OBJ JOIN IMG_REL ON IMG_OBJ.IMG_ID = IMG_REL.IMG_ID WHERE IMG_REL.PRED_CLASS_ID = 98;
SELECT COUNT(*)  FROM IMG_REL  WHERE IMG_ID = 3050 AND PRED_CLASS_ID IN (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'has');
SELECT DISTINCT o.OBJ_CLASS FROM IMG_OBJ i JOIN OBJ_CLASSES o ON i.OBJ_CLASS_ID = o.OBJ_CLASS_ID WHERE i.X = 0 AND i.Y = 0;
SELECT DISTINCT PRED_CLASSES.PRED_CLASS FROM IMG_REL JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID WHERE IMG_REL.OBJ1_SAMPLE_ID = IMG_REL.OBJ2_SAMPLE_ID;
SELECT X, Y, W, H  FROM IMG_OBJ  WHERE IMG_ID = 2222  AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'feathers');
SELECT COUNT(DISTINCT IMG_REL.IMG_ID) AS image_count FROM IMG_REL WHERE OBJ1_SAMPLE_ID != OBJ2_SAMPLE_ID AND PRED_CLASS_ID IN (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'on');
SELECT OBJ_CLASSES.OBJ_CLASS  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE IMG_OBJ.X = 0 AND IMG_OBJ.Y = 0 AND IMG_OBJ.W = 135 AND IMG_OBJ.H = 212;
SELECT W, H  FROM IMG_OBJ  WHERE IMG_ID = 3 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'keyboard');
SELECT MIN(X) AS min_x, MAX(X + W) AS max_x, MIN(Y) AS min_y, MAX(Y + H) AS max_y FROM IMG_OBJ WHERE IMG_ID = 6 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'folk');
SELECT X, Y, W, H  FROM IMG_OBJ  WHERE IMG_ID = 285930 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion');
SELECT      (SELECT COUNT(*)       FROM IMG_OBJ       WHERE IMG_ID = 72) AS object_count,     (SELECT OBJ_CLASS       FROM IMG_OBJ       JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID       WHERE IMG_ID = 72         AND X = 341         AND Y = 27         AND W = 42         AND H = 51) AS identified_objects;
SELECT a.ATT_CLASS FROM IMG_OBJ_ATT ia JOIN ATT_CLASSES a ON ia.ATT_CLASS_ID = a.ATT_CLASS_ID WHERE ia.IMG_ID = 5 GROUP BY a.ATT_CLASS HAVING COUNT(DISTINCT ia.OBJ_SAMPLE_ID) >= 2;
SELECT a.ATT_CLASS FROM ATT_CLASSES a JOIN IMG_OBJ_ATT ia ON a.ATT_CLASS_ID = ia.ATT_CLASS_ID JOIN IMG_OBJ io ON ia.IMG_ID = io.IMG_ID JOIN OBJ_CLASSES o ON io.OBJ_CLASS_ID = o.OBJ_CLASS_ID WHERE o.OBJ_CLASS = 'wall' AND io.IMG_ID = 27;
SELECT o.OBJ_CLASS  FROM OBJ_CLASSES o JOIN IMG_OBJ img ON o.OBJ_CLASS_ID = img.OBJ_CLASS_ID JOIN IMG_OBJ_ATT img_att ON img.IMG_ID = img_att.IMG_ID AND img.OBJ_SAMPLE_ID = img_att.OBJ_SAMPLE_ID JOIN ATT_CLASSES a ON img_att.ATT_CLASS_ID = a.ATT_CLASS_ID WHERE img.IMG_ID = 10 AND a.ATT_CLASS = 'scattered';
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ  WHERE OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'bridge');
SELECT AVG(obj_count) AS average_object_elements FROM (     SELECT IMG_ID, COUNT(OBJ_CLASS_ID) AS obj_count     FROM IMG_OBJ     GROUP BY IMG_ID ) AS img_counts;
SELECT a.ATT_CLASS FROM IMG_OBJ io JOIN IMG_OBJ_ATT ioa ON io.IMG_ID = ioa.IMG_ID AND io.OBJ_SAMPLE_ID = ioa.OBJ_SAMPLE_ID JOIN ATT_CLASSES a ON ioa.ATT_CLASS_ID = a.ATT_CLASS_ID JOIN OBJ_CLASSES o ON io.OBJ_CLASS_ID = o.OBJ_CLASS_ID WHERE io.IMG_ID = 1 AND o.OBJ_CLASS = 'van';
SELECT      o.OBJ_CLASS,      a.ATT_CLASS,      r.PRED_CLASS  FROM      IMG_OBJ io  JOIN      OBJ_CLASSES o ON io.OBJ_CLASS_ID = o.OBJ_CLASS_ID  LEFT JOIN      IMG_OBJ_ATT ioa ON io.IMG_ID = ioa.IMG_ID AND io.OBJ_SAMPLE_ID = ioa.OBJ_SAMPLE_ID  LEFT JOIN      ATT_CLASSES a ON ioa.ATT_CLASS_ID = a.ATT_CLASS_ID  LEFT JOIN      IMG_REL ir ON io.IMG_ID = ir.IMG_ID AND io.OBJ_SAMPLE_ID = ir.OBJ1_SAMPLE_ID  LEFT JOIN      PRED_CLASSES r ON ir.PRED_CLASS_ID = r.PRED_CLASS_ID  WHERE      io.IMG_ID = 1      AND io.X = 388      AND io.Y = 369      AND io.W = 48      AND io.H = 128;
SELECT P.PRED_CLASS FROM IMG_REL R JOIN PRED_CLASSES P ON R.PRED_CLASS_ID = P.PRED_CLASS_ID WHERE R.IMG_ID = 1 AND R.OBJ1_SAMPLE_ID = 25 AND R.OBJ2_SAMPLE_ID = 2;
SELECT COUNT(*)  FROM IMG_OBJ_ATT  WHERE IMG_ID = 4 AND OBJ_SAMPLE_ID = 7;
SELECT COUNT(DISTINCT OBJ_CLASS_ID) AS ObjectElementCount FROM IMG_OBJ WHERE IMG_ID = 31;
SELECT IMG_OBJ_ATT.ATT_CLASS_ID FROM IMG_OBJ_ATT JOIN IMG_OBJ ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID WHERE IMG_OBJ.IMG_ID = 20 GROUP BY IMG_OBJ_ATT.ATT_CLASS_ID ORDER BY COUNT(IMG_OBJ.OBJ_CLASS_ID) DESC LIMIT 1;
SELECT X, Y, W, H  FROM IMG_OBJ  WHERE IMG_ID = 42 AND OBJ_SAMPLE_ID = 7;
SELECT      (COUNT(CASE WHEN a.ATT_CLASS = 'white' THEN i.OBJ_SAMPLE_ID END) * 100.0 / COUNT(i.OBJ_SAMPLE_ID)) AS percentage FROM      IMG_OBJ i LEFT JOIN      IMG_OBJ_ATT ia ON i.IMG_ID = ia.IMG_ID AND i.OBJ_SAMPLE_ID = ia.OBJ_SAMPLE_ID LEFT JOIN      ATT_CLASSES a ON ia.ATT_CLASS_ID = a.ATT_CLASS_ID WHERE      i.IMG_ID = 99;
SELECT COUNT(DISTINCT ATT_CLASS_ID)  FROM IMG_OBJ_ATT  WHERE IMG_ID = 5;
SELECT OBJ_CLASS FROM OBJ_CLASSES WHERE OBJ_CLASS_ID = 10;
SELECT OBJ_CLASS  FROM OBJ_CLASSES  WHERE OBJ_CLASS_ID = (     SELECT OBJ_CLASS_ID      FROM IMG_OBJ      WHERE X = 422 AND Y = 63 AND W = 77 AND H = 363 );
SELECT PRED_CLASS FROM PRED_CLASSES WHERE PRED_CLASS_ID = 12;
SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 8;
SELECT COUNT(DISTINCT IMG_OBJ.OBJ_SAMPLE_ID)  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE IMG_OBJ.IMG_ID = 908 AND OBJ_CLASSES.OBJ_CLASS = 'tip';
SELECT COUNT(*)  FROM IMG_OBJ  WHERE IMG_ID = 41 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'kitchen');
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ  WHERE OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'paint');
SELECT COUNT(*)  FROM IMG_OBJ  WHERE IMG_ID = 2315533 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'cloud');
SELECT * FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion';
SELECT X, Y, W, H  FROM IMG_OBJ  WHERE IMG_ID = 1344 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'spoon');
SELECT      DIVIDE(SUM(CASE WHEN o.OBJ_CLASS = 'surface' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS percentage FROM      IMG_OBJ i JOIN      OBJ_CLASSES o ON i.OBJ_CLASS_ID = o.OBJ_CLASS_ID WHERE      i.IMG_ID = 2654;
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ  WHERE OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'wood');
SELECT o.OBJ_CLASS FROM IMG_OBJ i JOIN OBJ_CLASSES o ON i.OBJ_CLASS_ID = o.OBJ_CLASS_ID ORDER BY i.H DESC LIMIT 1;
SELECT      (SUM(CASE WHEN o.OBJ_CLASS = 'airplane' THEN 1 ELSE 0 END) * 100.0 / COUNT(o.OBJ_CLASS)) AS percentage FROM      OBJ_CLASSES o JOIN      IMG_OBJ i ON o.OBJ_CLASS_ID = i.OBJ_CLASS_ID;
SELECT COUNT(*)  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE IMG_OBJ.IMG_ID = 660 AND OBJ_CLASSES.OBJ_CLASS = 'animal';
SELECT COUNT(*) AS number_of_samples FROM IMG_OBJ WHERE IMG_ID = 1098 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'bed');
SELECT o.OBJ_CLASS FROM IMG_OBJ i JOIN OBJ_CLASSES o ON i.OBJ_CLASS_ID = o.OBJ_CLASS_ID WHERE i.H = (SELECT MIN(H) FROM IMG_OBJ);
SELECT X, Y, W, H  FROM IMG_OBJ  WHERE IMG_ID = 250 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'kitchen');
SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID HAVING COUNT(OBJ_SAMPLE_ID) > 20;
SELECT OBJ_SAMPLE_ID  FROM IMG_OBJ  WHERE IMG_ID = 8  ORDER BY W DESC  LIMIT 1;
SELECT OBJ_SAMPLE_ID  FROM IMG_OBJ  WHERE IMG_ID = 5 AND X = 634 AND Y = 468;
SELECT OBJ_SAMPLE_ID FROM IMG_OBJ_ATT GROUP BY OBJ_SAMPLE_ID ORDER BY COUNT(ATT_CLASS_ID) DESC LIMIT 1;
SELECT      (SELECT COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ WHERE IMG_ID = 1) * 1.0 /      (SELECT COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ WHERE IMG_ID = 6) AS ratio;
SELECT AVG(sample_count) AS average_object_samples FROM (     SELECT IMG_ID, COUNT(OBJ_SAMPLE_ID) AS sample_count     FROM IMG_OBJ     GROUP BY IMG_ID ) AS subquery;
SELECT DISTINCT IMG_OBJ.IMG_ID FROM IMG_OBJ JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID WHERE ATT_CLASSES.ATT_CLASS = 'wired';
SELECT OBJ_CLASSES.OBJ_CLASS  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE IMG_OBJ.IMG_ID = 10;
SELECT a.ATT_CLASS FROM ATT_CLASSES a JOIN IMG_OBJ_ATT ia ON a.ATT_CLASS_ID = ia.ATT_CLASS_ID JOIN IMG_OBJ io ON ia.IMG_ID = io.IMG_ID JOIN OBJ_CLASSES o ON io.OBJ_CLASS_ID = o.OBJ_CLASS_ID WHERE o.OBJ_CLASS = 'tip' AND io.IMG_ID = 1314;
SELECT P.PRED_CLASS FROM IMG_REL R JOIN PRED_CLASSES P ON R.PRED_CLASS_ID = P.PRED_CLASS_ID JOIN IMG_OBJ O1 ON R.OBJ1_SAMPLE_ID = O1.OBJ_SAMPLE_ID AND O1.IMG_ID = 2360078 JOIN IMG_OBJ O2 ON R.OBJ2_SAMPLE_ID = O2.OBJ_SAMPLE_ID AND O2.IMG_ID = 2360078 WHERE O1.OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'chain')   AND O2.OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'label');
SELECT COUNT(DISTINCT IMG_OBJ.IMG_ID)  FROM IMG_OBJ  JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID  JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID  WHERE ATT_CLASSES.ATT_CLASS = 'polka dot';
SELECT a.ATT_CLASS FROM IMG_OBJ io JOIN IMG_OBJ_ATT ioa ON io.IMG_ID = ioa.IMG_ID AND io.OBJ_SAMPLE_ID = ioa.OBJ_SAMPLE_ID JOIN ATT_CLASSES a ON ioa.ATT_CLASS_ID = a.ATT_CLASS_ID WHERE io.IMG_ID = 400 AND io.W = (     SELECT MAX(W)     FROM IMG_OBJ     WHERE IMG_ID = 400 );
SELECT OC.OBJ_CLASS FROM OBJ_CLASSES OC JOIN IMG_OBJ IO ON OC.OBJ_CLASS_ID = IO.OBJ_CLASS_ID GROUP BY OC.OBJ_CLASS ORDER BY COUNT(IO.IMG_ID) DESC LIMIT 1;
SELECT W, H  FROM IMG_OBJ  WHERE IMG_ID = 1 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'van');
SELECT IMG_OBJ.X, IMG_OBJ.Y FROM IMG_OBJ JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID AND IMG_OBJ.OBJ_SAMPLE_ID = IMG_OBJ_ATT.OBJ_SAMPLE_ID JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID WHERE IMG_OBJ.IMG_ID = 1 AND ATT_CLASSES.ATT_CLASS = 'sparse';
SELECT      DIVIDE(COUNT(DISTINCT IMG_OBJ.OBJ_SAMPLE_ID) FILTER (WHERE OBJ_CLASSES.OBJ_CLASS = 'street lights'),              COUNT(DISTINCT IMG_OBJ.OBJ_SAMPLE_ID)) AS percentage FROM      IMG_OBJ JOIN      OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID;
SELECT      DIVIDE(COUNT(IMG_OBJ.OBJ_SAMPLE_ID) FILTER (WHERE OBJ_CLASSES.OBJ_CLASS = 'windows' AND IMG_OBJ.IMG_ID = 5),             COUNT(IMG_OBJ.OBJ_SAMPLE_ID) FILTER (WHERE IMG_OBJ.IMG_ID = 5)) AS percentage FROM      IMG_OBJ JOIN      OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE      IMG_OBJ.IMG_ID = 5;
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ  WHERE X = 5 AND Y = 5;
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ  GROUP BY IMG_ID  HAVING COUNT(OBJ_SAMPLE_ID) < 15;
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ_ATT  GROUP BY IMG_ID  HAVING COUNT(ATT_CLASS_ID) = 10;
SELECT DISTINCT IMG_ID FROM IMG_REL GROUP BY IMG_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID HAVING COUNT(PRED_CLASS_ID) > 1;
SELECT COUNT(DISTINCT img.IMG_ID) AS image_count FROM IMG_OBJ img JOIN OBJ_CLASSES obj ON img.OBJ_CLASS_ID = obj.OBJ_CLASS_ID WHERE obj.OBJ_CLASS IN ('vegetables', 'fruits') GROUP BY img.IMG_ID HAVING COUNT(DISTINCT obj.OBJ_CLASS) = 2;
SELECT IMG_ID  FROM IMG_REL  WHERE PRED_CLASS_ID = (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'parked on');
SELECT DISTINCT OC.OBJ_CLASS FROM IMG_OBJ IO JOIN OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID WHERE IO.X = 5 AND IO.Y = 5;
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ  WHERE OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'keyboard');
SELECT W, H  FROM IMG_OBJ  WHERE OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'keyboard')  AND X = 5 AND Y = 647;
SELECT DISTINCT IMG_ID  FROM IMG_OBJ_ATT  JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID  WHERE ATT_CLASSES.ATT_CLASS = 'horse';
SELECT IMG_OBJ.X, IMG_OBJ.Y FROM IMG_OBJ JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE ATT_CLASSES.ATT_CLASS = 'horse' AND OBJ_CLASSES.OBJ_CLASS = 'fur';
SELECT a.ATT_CLASS FROM ATT_CLASSES a JOIN IMG_OBJ_ATT ia ON a.ATT_CLASS_ID = ia.ATT_CLASS_ID WHERE ia.IMG_ID = 15;
SELECT COUNT(DISTINCT img.IMG_ID) AS image_count FROM IMG_REL img_rel JOIN IMG_OBJ img ON img_rel.IMG_ID = img.IMG_ID WHERE img_rel.PRED_CLASS_ID IN (     SELECT PRED_CLASS_ID     FROM PRED_CLASSES     WHERE PRED_CLASS = 'reading' ) GROUP BY img_rel.OBJ1_SAMPLE_ID, img_rel.OBJ2_SAMPLE_ID HAVING COUNT(DISTINCT img_rel.PRED_CLASS_ID) > 1;
SELECT COUNT(DISTINCT IMG_ID)  FROM IMG_OBJ_ATT  JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID  WHERE ATT_CLASSES.ATT_CLASS = 'picture';
SELECT COUNT(DISTINCT img.IMG_ID) AS image_count FROM IMG_OBJ img JOIN OBJ_CLASSES obj ON img.OBJ_CLASS_ID = obj.OBJ_CLASS_ID JOIN IMG_OBJ_ATT img_att ON img.IMG_ID = img_att.IMG_ID JOIN ATT_CLASSES att ON img_att.ATT_CLASS_ID = att.ATT_CLASS_ID WHERE obj.OBJ_CLASS = 'bear' AND att.ATT_CLASS = 'picture';
SELECT DISTINCT a.ATT_CLASS FROM ATT_CLASSES a JOIN IMG_OBJ_ATT ioa ON a.ATT_CLASS_ID = ioa.ATT_CLASS_ID JOIN IMG_OBJ io ON ioa.IMG_ID = io.IMG_ID WHERE io.X = 5 AND io.Y = 5;
SELECT AVG(image_count) AS average_images FROM (     SELECT COUNT(DISTINCT IMG_ID) AS image_count     FROM IMG_OBJ_ATT     JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID     WHERE ATT_CLASSES.ATT_CLASS = 'keyboard'     GROUP BY IMG_ID ) AS subquery;
SELECT      DIVIDE(         COUNT(CASE WHEN OC.OBJ_CLASS = 'man' THEN IO.IMG_ID END),          COUNT(CASE WHEN OC.OBJ_CLASS = 'person' THEN IO.IMG_ID END)     ) AS ratio FROM      IMG_OBJ IO JOIN      OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID;
SELECT OBJ_SAMPLE_ID  FROM IMG_OBJ  WHERE IMG_ID = 17 AND X = 0 AND Y = 0;
SELECT W, H FROM IMG_OBJ WHERE OBJ_SAMPLE_ID = 2;
SELECT COUNT(*)  FROM IMG_OBJ  WHERE IMG_ID = 12 AND Y = 0;
SELECT a.ATT_CLASS FROM ATT_CLASSES a JOIN IMG_OBJ_ATT ia ON a.ATT_CLASS_ID = ia.ATT_CLASS_ID WHERE ia.IMG_ID = 22;
SELECT OBJ_CLASSES.OBJ_CLASS FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 36 AND IMG_OBJ.X = 0 AND IMG_OBJ.Y = 0;
SELECT X, Y, W, H  FROM IMG_OBJ  WHERE OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'pizza')  LIMIT 10;
SELECT o.OBJ_CLASS FROM IMG_OBJ i JOIN OBJ_CLASSES o ON i.OBJ_CLASS_ID = o.OBJ_CLASS_ID WHERE i.X = 126 AND i.Y = 363;
SELECT OBJ_CLASS_ID FROM IMG_OBJ WHERE IMG_ID = 56 GROUP BY OBJ_CLASS_ID ORDER BY COUNT(OBJ_CLASS_ID) DESC LIMIT 1;
SELECT OBJ_CLASSES.OBJ_CLASS, IMG_OBJ.W, IMG_OBJ.H FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 22;
SELECT PRED_CLASS  FROM PRED_CLASSES  WHERE PRED_CLASS_ID IN (SELECT PRED_CLASS_ID FROM IMG_REL WHERE IMG_ID = 68);
SELECT COUNT(*)  FROM IMG_REL  WHERE IMG_ID = 107 AND PRED_CLASS_ID IN (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'has');
SELECT PRED_CLASS_ID FROM IMG_REL WHERE IMG_ID = 4434 GROUP BY PRED_CLASS_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) AS dress_count, X, Y  FROM IMG_OBJ  JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID  WHERE OBJ_CLASSES.OBJ_CLASS = 'dress' AND IMG_OBJ.IMG_ID = 1764  GROUP BY X, Y;
SELECT IMG_OBJ.X, IMG_OBJ.Y FROM IMG_OBJ JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID AND IMG_OBJ.OBJ_SAMPLE_ID = IMG_OBJ_ATT.OBJ_SAMPLE_ID JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID WHERE IMG_OBJ.IMG_ID = 23 AND ATT_CLASSES.ATT_CLASS = 'cast';
SELECT COUNT(*)  FROM IMG_OBJ_ATT  JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID  WHERE ATT_CLASSES.ATT_CLASS = 'blue' AND IMG_OBJ_ATT.IMG_ID = 2355735;
SELECT AVG(W) AS average_width, AVG(H) AS average_height, oc.OBJ_CLASS FROM IMG_OBJ io JOIN OBJ_CLASSES oc ON io.OBJ_CLASS_ID = oc.OBJ_CLASS_ID WHERE io.IMG_ID = 47 GROUP BY oc.OBJ_CLASS;
SELECT firstName, lastName  FROM Master  WHERE birthCountry != 'USA' AND birthYear = 1990;
SELECT nameGiven  FROM Master  WHERE shootCatch IS NULL AND pos = 'F';
SELECT DISTINCT M.playerID, M.firstName, M.lastName FROM Master M LEFT JOIN HOF H ON M.hofID = H.hofID WHERE H.hofID IS NULL;
SELECT firstName, birthYear, birthMon, birthDay FROM Master WHERE deathYear IS NULL ORDER BY birthYear DESC, birthMon DESC, birthDay DESC LIMIT 1;
SELECT CONCAT(firstName, ' ', lastName) AS player_name,         (deathYear - birthYear) AS age_when_died FROM Master WHERE deathYear IS NOT NULL    AND shootCatch IS NULL;
SELECT M.firstName, M.lastName FROM Goalies G JOIN Master M ON G.playerID = M.playerID WHERE G.year BETWEEN 2000 AND 2005 GROUP BY M.playerID HAVING COUNT(DISTINCT G.tmID) > 2;
SELECT AVG(weight) AS average_weight FROM Master WHERE height > 72;
SELECT m.firstName, m.birthCountry FROM Goalies g JOIN Master m ON g.playerID = m.playerID GROUP BY g.playerID, m.firstName, m.birthCountry HAVING SUM(g.Min) > 5000;
SELECT DISTINCT g1.playerID, m.firstName, m.lastName FROM Goalies g1 JOIN Master m ON g1.playerID = m.playerID WHERE g1.lgID = 'PCHA' AND g1.playerID IN (     SELECT g2.playerID     FROM Goalies g2     WHERE g2.lgID = 'NHL' );
SELECT g.lastName, g.year, MAX(g.Min) AS maxMinutes FROM Goalies g JOIN Master m ON g.playerID = m.playerID WHERE m.deathYear IS NOT NULL GROUP BY g.lastName, g.year ORDER BY g.lastName;
SELECT      m.nameGiven AS given_name,      m.height,      m.weight,      YEAR(NOW()) - m.birthYear AS age FROM      Goalies g JOIN      Master m ON g.playerID = m.playerID WHERE      g.year BETWEEN 2000 AND 2010      AND g.tmID = 'COL';
SELECT g.playerID, g.year FROM Goalies g WHERE g.ENG >= 10;
SELECT playerID, year, (GA * 100.0 / SA) AS goals_against_percentage FROM Goalies WHERE SA > 0 ORDER BY goals_against_percentage ASC LIMIT 1;
SELECT g.playerID, m.firstName, m.lastName, t.name FROM Goalies g JOIN Master m ON g.playerID = m.playerID JOIN Teams t ON g.tmID = t.tmID AND g.year = t.year WHERE g.year = 2005 AND m.height < 72;
SELECT m.nameNick, t.tmID, t.year FROM Master m JOIN Teams t ON m.playerID = t.tmID WHERE m.playerID = 'aubinje01';
SELECT g.playerID, COUNT(g.year) AS seasons_played, AVG(g.Min) AS average_time_per_season FROM Goalies g GROUP BY g.playerID HAVING COUNT(g.year) = (     SELECT MAX(seasons)     FROM (         SELECT COUNT(year) AS seasons         FROM Goalies         GROUP BY playerID     ) AS subquery );
SELECT g.playerID, g.year FROM Goalies g WHERE (g.SHO / NULLIF(g.GA, 0)) * 100 = 5.00;
SELECT firstName, lastName  FROM Master  WHERE birthCountry != deathCountry  ORDER BY birthYear;
SELECT firstName, firstNHL, firstWHA FROM Master WHERE firstNHL IS NOT NULL AND firstWHA IS NOT NULL;
SELECT firstName, pos FROM Master WHERE deathYear IS NULL AND playerID IN (     SELECT playerID     FROM Scoring     GROUP BY playerID     HAVING COUNT(DISTINCT pos) = 2 );
SELECT nameNick, lastNHL  FROM Master  WHERE height = (SELECT MAX(height) FROM Master)  AND lastNHL IS NOT NULL;
SELECT      CASE          WHEN birthYear >= 1990 THEN '1990 and after'          ELSE 'Before 1990'      END AS birth_group,     AVG(height) AS average_height FROM Master GROUP BY birth_group;
SELECT DISTINCT g.playerID, m.firstName, m.lastName, t.name AS teamName FROM Goalies g JOIN Master m ON g.playerID = m.playerID JOIN Coaches c ON g.playerID = c.coachID JOIN Teams t ON g.tmID = t.tmID AND g.year = t.year WHERE m.shootCatch = 'L' AND m.pos = 'G';
SELECT g.playerID, g.year, g.tmID, g.lgID, m.firstName, m.lastName FROM Goalies g JOIN Master m ON g.playerID = m.playerID WHERE m.deathYear IS NOT NULL AND m.birthCountry = 'Canada';
SELECT g.playerID, g.year FROM Goalies g JOIN Teams t ON g.tmID = t.tmID AND g.year = t.year WHERE t.name = 'Boston Bruins' AND t.rank = 1;
SELECT DISTINCT T.name FROM Goalies G JOIN Master M ON G.playerID = M.playerID JOIN Teams T ON G.tmID = T.tmID AND G.year = T.year WHERE M.firstNHL < 1950 AND M.deathYear IS NULL;
SELECT m.nameGiven, c.tmID, c.year FROM Master m JOIN Coaches c ON m.coachID = c.coachID WHERE m.playerID IN (     SELECT playerID     FROM Goalies     WHERE year < (SELECT MAX(year) FROM Coaches WHERE coachID = m.coachID)     UNION     SELECT playerID     FROM Scoring     WHERE year < (SELECT MAX(year) FROM Coaches WHERE coachID = m.coachID) );
SELECT c.firstName, c.lastName, t.name FROM Coaches c JOIN Teams t ON c.tmID = t.tmID AND c.year = t.year WHERE c.coachID NOT IN (SELECT DISTINCT coachID FROM Master) ORDER BY (c.w * 1.0 / c.g) DESC LIMIT 1;
SELECT c.coachID, c.year, (c.w * 1.0 / NULLIF(c.g, 0)) * 100 AS winning_percentage FROM Coaches c WHERE c.tmID = 'DET' ORDER BY winning_percentage DESC LIMIT 1;
SELECT      m.nameGiven AS given_name,      CONCAT(m.birthDay, '-', m.birthMon, '-', m.birthYear) AS date_of_birth,      GROUP_CONCAT(DISTINCT c.tmID) AS teams_coached FROM      Coaches c JOIN      Master m ON c.coachID = m.coachID WHERE      c.tmID = (SELECT tmID FROM Teams WHERE name = 'Montreal Canadiens') GROUP BY      c.coachID ORDER BY      COUNT(DISTINCT c.year) DESC LIMIT 1;
SELECT m.firstName, m.lastName, g.tmID FROM Goalies g JOIN Master m ON g.playerID = m.playerID WHERE g.L > g.W GROUP BY m.playerID, g.tmID HAVING COUNT(DISTINCT g.year) >= 2;
SELECT      g.playerID,      g.year,      (g.W * 100.0 / g.GP) AS winning_percentage FROM      Goalies g JOIN      Master m ON g.playerID = m.playerID WHERE      m.birthYear = 1987      AND m.shootCatch IS NULL;
SELECT      m.nameGiven AS given_name,     DIVIDE(SUM(g.Min), SUM(g.GP)) AS average_time_minutes FROM      Master m JOIN      Goalies g ON m.playerID = g.playerID WHERE      m.playerID = 'aebisda01' AND g.pos = 'G' GROUP BY      m.nameGiven;
SELECT m.lastName, m.firstName FROM Goalies g JOIN Master m ON g.playerID = m.playerID WHERE (SUM(g.W) / SUM(g.GP)) * 100 > 50 AND m.deathYear IS NULL GROUP BY m.lastName, m.firstName;
SELECT      (SELECT COUNT(*) FROM AwardsPlayers WHERE note = 'posthumous') AS awarded_players,     (SELECT COUNT(*) FROM AwardsCoaches WHERE note = 'posthumous') AS awarded_coaches;
SELECT COUNT(DISTINCT p.playerID) AS goalie_count FROM AwardsPlayers ap JOIN Master p ON ap.playerID = p.playerID WHERE ap.year = 1983 AND p.pos = 'G';
SELECT COUNT(*)  FROM Coaches  WHERE year = 2007 AND notes = 'interim';
SELECT COUNT(*) AS total_shutouts FROM CombinedShutouts WHERE year = 1977 AND `R/P` = 'R';
SELECT COUNT(*)  FROM CombinedShutouts  WHERE year = 2005 AND R/P = 'R' AND IDgoalie1 IS NOT NULL;
SELECT DISTINCT year  FROM Goalies  WHERE lgID = 'NHL' AND SA IS NOT NULL;
SELECT COUNT(*) AS team_count FROM TeamsPost WHERE PostW = PostL;
SELECT name FROM HOF WHERE year = 1978;
SELECT COUNT(*)  FROM HOF  WHERE category = 'Builder';
SELECT COUNT(*)  FROM HOF  WHERE year > 1980 AND category = 'Player';
SELECT nameNick  FROM Master  JOIN HOF ON Master.hofID = HOF.hofID  WHERE HOF.year = 2007;
SELECT HOF.year FROM Master AS M JOIN HOF ON M.hofID = HOF.hofID WHERE M.height = (SELECT MAX(height) FROM Master);
SELECT DISTINCT ac.award FROM AwardsCoaches ac JOIN Coaches c ON ac.coachID = c.coachID JOIN Master m ON c.coachID = m.coachID WHERE m.birthCountry = 'Canada';
SELECT COUNT(DISTINCT c.coachID)  FROM Coaches c JOIN Teams t ON c.tmID = t.tmID AND c.year = t.year JOIN Master m ON c.coachID = m.coachID WHERE t.W > 30 AND m.birthCountry = 'USA';
SELECT COUNT(DISTINCT c.coachID)  FROM Coaches c  JOIN Master m ON c.coachID = m.coachID  WHERE m.birthCountry = 'Canada' AND c.lgID = 'NHL';
SELECT DISTINCT ac.award FROM AwardsCoaches ac JOIN Coaches c ON ac.coachID = c.coachID JOIN Master m ON c.coachID = m.coachID WHERE m.birthYear = '1952';
SELECT COUNT(DISTINCT c.coachID)  FROM Coaches c JOIN AwardsCoaches ac ON c.coachID = ac.coachID JOIN Master m ON c.coachID = m.coachID WHERE ac.year = 1940 AND m.birthCity = 'Toronto';
SELECT COUNT(DISTINCT c.coachID)  FROM Coaches c JOIN AwardsCoaches a ON c.coachID = a.coachID JOIN Master m ON c.coachID = m.coachID WHERE a.year > 1940 AND m.deathYear IS NOT NULL;
SELECT DISTINCT ac.award FROM AwardsCoaches ac JOIN Coaches c ON ac.coachID = c.coachID JOIN Master m ON c.coachID = m.coachID WHERE c.lgID = 'NHL' AND m.deathYear IS NOT NULL;
SELECT COUNT(DISTINCT c.coachID) AS HallOfFameCoachesOver195 FROM Coaches c JOIN Master m ON c.coachID = m.coachID JOIN HOF h ON m.hofID = h.hofID WHERE m.weight > 195;
SELECT DISTINCT m.firstName FROM Master m JOIN Goalies g ON m.playerID = g.playerID JOIN HOF h ON m.hofID = h.hofID WHERE g.shootCatch IS NULL;
SELECT COUNT(DISTINCT m.playerID) AS hof_coaches_count FROM Master m JOIN Coaches c ON m.coachID = c.coachID JOIN HOF h ON m.hofID = h.hofID WHERE m.playerID IS NOT NULL AND c.coachID IS NOT NULL;
SELECT DISTINCT M.birthCity FROM AwardsPlayers AP JOIN Master M ON AP.playerID = M.playerID WHERE AP.year = 1970;
SELECT COUNT(DISTINCT p.playerID) AS num_players FROM Master p JOIN AwardsPlayers a ON p.playerID = a.playerID WHERE p.birthCity = 'Toronto' AND a.award = 'All-Rookie';
SELECT COUNT(DISTINCT p.playerID) AS deceased_players FROM AwardsPlayers a JOIN Master p ON a.playerID = p.playerID WHERE a.award = 'All-Rookie' AND p.deathYear IS NOT NULL;
SELECT COUNT(DISTINCT mp.playerID) AS award_winners FROM Master mp JOIN AwardsPlayers ap ON mp.playerID = ap.playerID WHERE mp.deathState = 'Massachussets';
SELECT DISTINCT ap.award FROM AwardsPlayers ap JOIN Master m ON ap.playerID = m.playerID WHERE m.deathCity = 'Arlington';
SELECT DISTINCT m.nameNick FROM Master m JOIN AwardsPlayers a ON m.playerID = a.playerID WHERE a.award = 'All-Rookie' AND m.birthMon = '3';
SELECT COUNT(DISTINCT hofID)  FROM HOF  WHERE name IN (     SELECT CONCAT(firstName, ' ', lastName)      FROM Master      WHERE birthMon IN ('7', '8') );
SELECT birthMon FROM Master WHERE playerID = (     SELECT playerID     FROM AwardsPlayers     GROUP BY playerID     ORDER BY COUNT(award) DESC     LIMIT 1 );
SELECT birthYear, COUNT(award) AS total_awards FROM Master JOIN AwardsPlayers ON Master.playerID = AwardsPlayers.playerID GROUP BY birthYear ORDER BY total_awards DESC LIMIT 1;
SELECT birthCountry FROM Master WHERE playerID IN (     SELECT playerID     FROM AwardsPlayers     GROUP BY playerID     ORDER BY COUNT(award) DESC     LIMIT 1 );
SELECT birthCountry, COUNT(*) AS player_count FROM Master JOIN HOF ON Master.hofID = HOF.hofID GROUP BY birthCountry ORDER BY player_count DESC LIMIT 1;
SELECT DISTINCT M.pos FROM Master M JOIN AwardsPlayers A ON M.playerID = A.playerID WHERE M.birthCountry = 'Canada' AND A.award = 'All-Rookie';
SELECT AVG(weight / (height * height)) AS average_BMI FROM Coaches JOIN HOF ON Coaches.coachID = HOF.hofID;
SELECT (COUNT(CASE WHEN M.birthCountry = 'USA' THEN 1 END) * 100.0 / COUNT(H.hofID)) AS percentage_american_players FROM HOF H JOIN Master M ON H.hofID = M.hofID;
SELECT MAX(year) - MIN(year) AS years_played FROM Master WHERE playerID = 'healygl01';
SELECT tmID  FROM Master  JOIN Scoring ON Master.playerID = Scoring.playerID  WHERE Master.playerID = 'roypa01' AND Scoring.year = 1992;
SELECT SUM(GP) AS total_games FROM Scoring WHERE playerID = 'rutlewa01' AND year = 1967;
SELECT Min  FROM Goalies  WHERE playerID = 'valiqst01' AND year = 2007;
SELECT SUM(W) AS TotalWins FROM Goalies WHERE playerID = 'vanbijo01' AND year = 1990
SELECT SUM(T) + SUM(OTL) AS Total_Ties_Overtime_Losses FROM Goalies WHERE playerID = 'vernomi01' AND year = 1998;
SELECT SUM(c.w) AS total_wins FROM Coaches c JOIN AwardsCoaches ac ON c.coachID = ac.coachID WHERE ac.award = 'Second Team All-Star' AND ac.year = 1933;
SELECT COUNT(*) > 0 AS attended FROM HOF JOIN Master ON HOF.name = Master.firstName || ' ' || Master.lastName WHERE Master.legendsID = 'P194502' AND HOF.note != 'posthumous';
SELECT pos  FROM Master  WHERE firstName = 'Mike' AND lastName = 'Antonovich';
SELECT CONCAT(m.birthCountry, '-', m.birthState, '-', m.birthCity) AS birth_place FROM Coaches c JOIN Master m ON c.coachID = m.coachID WHERE c.year = 1998 AND c.notes = 'co-coach' AND c.coachID IN (     SELECT coachID     FROM Coaches     WHERE year = 1998 AND tmID IN (         SELECT tmID         FROM Coaches         WHERE year = 1998 AND coachID = (             SELECT coachID             FROM Master             WHERE firstName = 'Dave' AND lastName = 'Lewis'         )     ) );
SELECT CONCAT(m.firstName, ' ', m.lastName) AS fullName FROM Goalies g JOIN Master m ON g.playerID = m.playerID WHERE g.stint = 3 ORDER BY m.weight DESC LIMIT 1;
SELECT CONCAT(m.firstName, ' ', m.lastName) AS fullName FROM Goalies g JOIN Master m ON g.playerID = m.playerID WHERE g.ENG = 10 ORDER BY m.height DESC LIMIT 1;
SELECT shootCatch  FROM Goalies  WHERE year = 2010  AND SHO = (SELECT MAX(SHO) FROM Goalies WHERE year = 2010);
SELECT playerID, birthYear, birthMon, birthDay FROM Goalies JOIN Master ON Goalies.playerID = Master.playerID WHERE year = 2002 AND GA > 150 ORDER BY birthYear DESC, birthMon DESC, birthDay DESC LIMIT 1;
SELECT CONCAT(m.firstName, ' ', m.lastName) AS fullName FROM Goalies g JOIN Master m ON g.playerID = m.playerID WHERE g.tmID = 'NJD' ORDER BY (g.SA - g.GA) DESC LIMIT 1;
SELECT name FROM TeamsPost WHERE year = 2010 ORDER BY BenchMinor DESC LIMIT 1;
SELECT Pts FROM TeamsPost WHERE year = 1995 AND tmID = (     SELECT tmID     FROM Goalies     WHERE year = 1995     GROUP BY tmID     ORDER BY SUM(PostSHO) DESC     LIMIT 1 );
SELECT c.coachID, m.nameNick, (c.w * 1.0 / (c.w + c.l)) AS winning_rate FROM Coaches c JOIN Master m ON c.coachID = m.coachID WHERE c.year = 2009 ORDER BY winning_rate DESC LIMIT 1;
SELECT CONCAT(m.firstName, ' ', m.lastName) AS fullName FROM Teams t JOIN Coaches c ON t.tmID = c.tmID AND t.year = c.year JOIN Master m ON c.coachID = m.coachID WHERE t.year = 2011 AND (t.PPG / NULLIF(t.PPC, 0)) = (     SELECT MAX(PPG / NULLIF(PPC, 0))     FROM Teams     WHERE year = 2011 )
SELECT SUM(GP) AS TotalGames FROM Scoring WHERE playerID = 'broadpu01' AND year = 1922;
SELECT COUNT(DISTINCT year) AS years_to_finals FROM SeriesPost WHERE (tmIDWinner IN (SELECT tmID FROM Teams WHERE year = SeriesPost.year AND lgID = 'NHL')         OR tmIDLoser IN (SELECT tmID FROM Teams WHERE year = SeriesPost.year AND lgID = 'NHL')) AND year IN (SELECT DISTINCT year FROM Teams WHERE tmID IN (SELECT tmID FROM Goalies WHERE playerID = 'cleghsp01'));
SELECT SUM(G) AS total_goals FROM Scoring WHERE playerID = 'dyeba01' AND year = 1921 AND tmID IN (     SELECT tmID     FROM SeriesPost     WHERE year = 1921 AND round = 'Finals' );
SELECT playerID, year, tmID, MAX(A) AS max_assists FROM Scoring WHERE year IN (SELECT year FROM SeriesPost WHERE round = 'Finals') GROUP BY playerID, year, tmID ORDER BY max_assists DESC LIMIT 1;
SELECT lgID  FROM Master  WHERE playerID = 'adamsja01'  AND firstNHL <= 1920  AND (lastNHL >= 1920 OR lastNHL IS NULL);
SELECT pos  FROM Scoring  WHERE playerID = 'hartgi01'  AND year = (SELECT MAX(year) FROM SeriesPost WHERE round = 'Finals');
SELECT T.W FROM Teams T JOIN Goalies G ON T.tmID = G.tmID AND G.year = 2011 WHERE G.year = 2011 AND G.stint = 'Post'  GROUP BY T.tmID HAVING COUNT(DISTINCT G.playerID) = 3;
SELECT birthYear  FROM Goalies  WHERE year = 2008  ORDER BY PostSA DESC  LIMIT 1;
SELECT COUNT(DISTINCT year) AS years_after_retirement FROM Teams WHERE year > (SELECT MAX(year) - MAX(lastNHL) FROM Master WHERE firstName = 'Don' AND lastName = 'Waddell');
SELECT shootCatch  FROM Goalies  WHERE year = 1996  AND SHO = (SELECT MAX(SHO) FROM Goalies WHERE year = 1996);
SELECT CONCAT(birthYear, '/', birthMon, '/', birthDay) AS birthday FROM Goalies JOIN Master ON Goalies.playerID = Master.playerID WHERE year = '1965' ORDER BY GA DESC LIMIT 1;
SELECT CONCAT(m.firstName, ' ', m.lastName) AS fullName FROM Scoring s JOIN Master m ON s.playerID = m.playerID WHERE s.year = '1981' ORDER BY s.`+/-` DESC LIMIT 1;
SELECT weight  FROM Master  WHERE playerID = (     SELECT playerID      FROM Scoring      WHERE year > 2000      ORDER BY PPG DESC      LIMIT 1 );
SELECT shootCatch  FROM Master  WHERE playerID IN (     SELECT playerID      FROM Scoring      WHERE year = 1989 AND SHG = 7 );
SELECT CONCAT(m.firstName, ' ', m.lastName) AS fullName FROM Scoring s JOIN Master m ON s.playerID = m.playerID WHERE s.year = 1986 ORDER BY s.GWG DESC LIMIT 1;
SELECT SOG  FROM Scoring  WHERE playerID = (SELECT playerID FROM Master WHERE firstName = 'Cam' AND lastName = 'Neely')  AND year = 1990;
SELECT CONCAT(m.firstName, ' ', m.lastName) AS CoachName FROM Teams t JOIN Coaches c ON t.tmID = c.tmID AND t.year = c.year JOIN Master m ON c.coachID = m.coachID WHERE t.year = 2003 ORDER BY t.BenchMinor DESC LIMIT 1;
SELECT playerID, GA FROM Goalies WHERE weight > 190 AND year = 1978 ORDER BY GA DESC LIMIT 1;
SELECT      (SELECT          (SUM(w) / (SUM(w) + SUM(l))) * 100       FROM          Coaches       WHERE          tmID = 'VAN' AND year = '2005/2006') -      (SELECT          (SUM(w) / (SUM(w) + SUM(l))) * 100       FROM          Coaches       WHERE          tmID = 'VAN' AND year = '2006') AS winning_rate_improvement;
SELECT legendsID  FROM Goalies  WHERE year = 2011  ORDER BY (1 - (PostGA / NULLIF(PostSA, 0))) * 100 DESC  LIMIT 1;
SELECT COUNT(DISTINCT m.coachID) AS former_athletes_as_coaches FROM Master m JOIN Coaches c ON m.coachID = c.coachID WHERE m.playerID IS NOT NULL;
SELECT T.name, SUM(COALESCE(TS.BenchMinor, 0)) AS TotalPenalties FROM Teams T JOIN TeamsPost TS ON T.year = TS.year AND T.lgID = TS.lgID AND T.tmID = TS.tmID WHERE T.T > 0 GROUP BY T.name ORDER BY T.T DESC LIMIT 1;
SELECT award, COUNT(*) AS award_count FROM AwardsCoaches WHERE coachID = (     SELECT coachID     FROM Coaches     ORDER BY w DESC     LIMIT 1 ) GROUP BY award ORDER BY award_count DESC LIMIT 1;
SELECT PPG / (PPG + BenchMinor) * 100 AS PowerPlayPercentage FROM Teams WHERE L = (SELECT MAX(L) FROM Teams);
SELECT AVG(player_count) AS average_players_hof FROM (     SELECT COUNT(hofID) AS player_count     FROM HOF     WHERE year BETWEEN 1950 AND 1980     GROUP BY year ) AS yearly_counts;
SELECT birthCountry, COUNT(playerID) AS player_count, MAX(birthYear) AS most_common_birth_year FROM Master GROUP BY birthCountry ORDER BY player_count DESC LIMIT 1;
SELECT T.W FROM Teams T JOIN Goalies G ON T.tmID = G.tmID WHERE G.SHO = (SELECT MAX(SHO) FROM Goalies)
SELECT tmID FROM TeamSplits WHERE year = 2005 ORDER BY rW DESC LIMIT 1;
SELECT pos  FROM Master  ORDER BY birthYear, birthMon, birthDay  LIMIT 1 OFFSET 8;
SELECT SUM(GA) AS TotalGoalsAgainst FROM Goalies WHERE year = 1924 AND lgID = 'WCHL' AND playerID = (     SELECT playerID     FROM Goalies     WHERE year = 1924 AND lgID = 'WCHL'     ORDER BY PostGA DESC     LIMIT 1 );
SELECT tmID, OctL FROM Teams WHERE year = 2006 ORDER BY OctL DESC LIMIT 1;
SELECT COUNT(*)  FROM Master  WHERE shootCatch IS NULL AND firstNHL = 2011;
SELECT year, MAX(G) AS max_goals, (year - birthYear) AS age FROM Scoring JOIN Master ON Scoring.playerID = Master.playerID GROUP BY year ORDER BY max_goals DESC LIMIT 1;
SELECT AVG(height) AS average_height,         t.name AS team_name FROM Goalies g JOIN Master m ON g.playerID = m.playerID JOIN Teams t ON g.tmID = t.tmID AND g.year = t.year WHERE m.birthYear BETWEEN 1970 AND 1979    AND m.shootCatch = 'L'   AND g.pos = 'G'   AND t.year = (SELECT MAX(year)                  FROM Teams                  WHERE tmID = g.tmID) GROUP BY t.name ORDER BY average_height DESC LIMIT 1;
SELECT CONCAT(m.nameGiven, ' ', m.lastName) AS fullName, SUM(s.A) AS totalAssists FROM Scoring s JOIN Master m ON s.playerID = m.playerID WHERE s.lgID = 'NHL' GROUP BY s.playerID ORDER BY SUM(s.A) DESC LIMIT 1;
SELECT      t.name AS team_name,     t.PPG,     t.PPC,     (t.PPG * 1.0 / t.PPC) * 100 AS power_play_percentage,     s.tmIDLoser AS opponent_team_id,     CASE          WHEN s.tmIDWinner = t.tmID THEN 'Victorious'          ELSE 'Lost'      END AS result FROM      Teams t JOIN      TeamsPost s ON t.tmID = s.tmID WHERE      t.PKC = (SELECT MIN(PKC) FROM Teams)
SELECT ac.coachID, ac.award FROM Coaches c JOIN AwardsCoaches ac ON c.coachID = ac.coachID WHERE c.tmID = (     SELECT tmID     FROM Teams     WHERE W = (         SELECT MAX(W)         FROM Teams     ) );
SELECT Teams.name  FROM SeriesPost  JOIN Teams ON SeriesPost.tmIDLoser = Teams.tmID  WHERE SeriesPost.year = 1912 AND SeriesPost.note = 'EX';
SELECT      CONCAT(m.nameGiven, ' ', m.lastName) AS fullName,     (YEAR(s.year) - m.firstNHL) AS duration FROM      Scoring s JOIN      Master m ON s.playerID = m.playerID WHERE      s.lgID = 'NHL' GROUP BY      s.playerID ORDER BY      MIN(s.`+/-`) ASC LIMIT 1;
SELECT firstName FROM Master m JOIN Scoring s ON m.playerID = s.playerID WHERE s.year BETWEEN 2003 AND 2005 AND s.PIM BETWEEN 200 AND 250 GROUP BY m.playerID, m.firstName HAVING MAX(s.GP) = (     SELECT MAX(GP)     FROM Scoring     WHERE year BETWEEN 2003 AND 2005 AND PIM BETWEEN 200 AND 250 );
SELECT lastNHL - birthYear AS age FROM Goalies JOIN Master ON Goalies.playerID = Master.playerID WHERE Goalies.GA = (SELECT MIN(GA) FROM Goalies)
WITH AwardCounts AS (     SELECT pos, COUNT(award) AS award_count     FROM AwardsPlayers     GROUP BY pos ), MaxAwardCount AS (     SELECT pos     FROM AwardCounts     WHERE award_count = (SELECT MAX(award_count) FROM AwardCounts) ), RecentAward AS (     SELECT ap.playerID, ap.award, ap.year, m.nameGiven, m.lastName     FROM AwardsPlayers ap     JOIN Master m ON ap.playerID = m.playerID     WHERE ap.pos IN (SELECT pos FROM MaxAwardCount)     ORDER BY ap.year DESC     LIMIT 1 ) SELECT ra.award, CONCAT(ra.nameGiven, ' ', ra.lastName) AS full_name FROM RecentAward ra;
SELECT SUM(c.g) AS total_games FROM Coaches c JOIN AwardsCoaches ac ON c.coachID = ac.coachID WHERE ac.award = 'Second Team All-Star' AND ac.year = (SELECT MIN(year) FROM AwardsCoaches WHERE award = 'Second Team All-Star')
WITH MostVictories AS (     SELECT tmID, name, W     FROM Teams     JOIN abbrev ON Teams.lgID = abbrev.Code     WHERE year = 1915     ORDER BY W DESC     LIMIT 1 ), OpposingTeams AS (     SELECT DISTINCT oppID     FROM TeamVsTeam     WHERE year = 1915 AND tmID = (SELECT tmID FROM MostVictories) ) SELECT (SELECT name FROM MostVictories) AS TeamName, COUNT(*) AS OpponentCount, GROUP_CONCAT(DISTINCT oppID) AS OpposingTeams FROM OpposingTeams;
SELECT playerID, MAX(GWG) AS max_GWG FROM Scoring WHERE SHG BETWEEN 1 AND 5 GROUP BY playerID ORDER BY max_GWG DESC LIMIT 1;
SELECT coachID, SUM(l) AS total_losses FROM Coaches WHERE tmID = (SELECT tmID FROM Teams WHERE name = 'Tampa Bay Lightning' AND year = 1997)   AND year = 1997   AND notes = 'interim' GROUP BY coachID;
SELECT t.year, t.name, t.rank FROM Teams t JOIN Scoring s ON t.playerID = s.playerID WHERE s.SHA >= 7 GROUP BY t.year, t.name, t.rank ORDER BY SUM(s.A) DESC LIMIT 1;
SELECT c.coachID, m.firstName, m.lastName FROM Coaches c JOIN Teams t ON c.tmID = t.tmID AND c.year = t.year JOIN Master m ON c.coachID = m.coachID WHERE t.rank = 4 AND t.year = 1969;
SELECT name  FROM TeamsHalf  WHERE year BETWEEN 1917 AND 1920 AND rank = 1;
SELECT CONCAT(m.nameGiven, ' ', m.lastName) AS complete_name, s.year, t.name AS team FROM Master m JOIN Scoring s ON m.playerID = s.playerID JOIN Teams t ON s.tmID = t.tmID AND s.year = t.year WHERE m.birthCountry = 'Canada'   AND (m.firstNHL - m.birthYear) BETWEEN 18 AND 24   AND s.G < 5 GROUP BY m.playerID, s.year, t.name
SELECT SUM(BenchMinor) AS TotalBenchMinor FROM Teams WHERE name = 'St. Louis Blues';
SELECT DIVIDE(SUM(PPG), SUM(PPC)) AS PowerPlayChances FROM Teams WHERE name = 'New York Rangers' AND year = 2009;
SELECT MAX(Pts) AS highest_total_points FROM Teams;
SELECT COUNT(*)  FROM Teams  WHERE year = 2006 AND W > L AND Pts > 100;
SELECT name, SUM(BenchMinor) AS TotalBenchMinor FROM Teams WHERE year = 2006 GROUP BY name ORDER BY TotalBenchMinor DESC LIMIT 1;
SELECT name, PIM  FROM Teams  WHERE year = 2006  ORDER BY PIM DESC  LIMIT 3;
SELECT name, MAX(PKC) AS highest_PKC FROM Teams WHERE year = 1995 AND name IN ('Florida Panthers', 'Edmonton Oilers', 'Los Angeles Kings') GROUP BY name ORDER BY highest_PKC DESC LIMIT 1;
SELECT name  FROM Teams  WHERE year = 1917 AND W > L AND playoff = 'Stanley Cup';
SELECT tmIDWinner AS TeamID FROM SeriesPost WHERE year = 1922;
SELECT COUNT(tmID)  FROM Teams  WHERE year = 1922 AND Pts > 20 AND tmID IN (     SELECT tmIDWinner FROM SeriesPost WHERE year = 1922     UNION     SELECT tmIDLoser FROM SeriesPost WHERE year = 1922 );
SELECT PIM  FROM Teams  WHERE year = 1923 AND rank = 2;
SELECT name, MAX(W) AS MostWins FROM TeamsPost WHERE year IN (SELECT year FROM SeriesPost WHERE round = 'Finals') GROUP BY name ORDER BY MostWins DESC LIMIT 1;
SELECT SUM(W) AS TotalWins FROM TeamVsTeam WHERE year = 1985 AND lgID = 'NHL' AND tmID = (SELECT tmID FROM Teams WHERE name = 'Philadelphia Flyers' AND year = 1985) AND oppID = (SELECT tmID FROM Teams WHERE name = 'Boston Bruins' AND year = 1985);
SELECT name  FROM Teams  WHERE year = 1909 AND T > 0;
SELECT DISTINCT m.firstName FROM Coaches c JOIN Teams t ON c.tmID = t.tmID AND c.year = t.year JOIN Master m ON c.coachID = m.coachID WHERE t.name = 'Montreal Canadiens';
SELECT COUNT(DISTINCT c.coachID)  FROM Coaches c  JOIN HOF h ON c.coachID = h.hofID  JOIN Teams t ON c.tmID = t.tmID  WHERE t.name = 'Montreal Canadiens' AND h.hofID IS NOT NULL;
SELECT MAX(Master.height) AS tallest_coach_height FROM Coaches JOIN Master ON Coaches.coachID = Master.coachID JOIN Teams ON Coaches.tmID = Teams.tmID WHERE Teams.name = 'Montreal Canadiens';
SELECT DISTINCT c.firstName FROM Coaches c JOIN Teams t ON c.tmID = t.tmID WHERE t.year = 1922 AND t.playoff = 'Y';
SELECT COUNT(DISTINCT c.coachID) AS MarchCoaches FROM Coaches c JOIN Teams t ON c.tmID = t.tmID JOIN Master m ON c.coachID = m.coachID WHERE t.name = 'Philadelphia Flyers' AND m.birthMon = 3;
SELECT COUNT(DISTINCT c.coachID)  FROM Coaches c JOIN Master m ON c.coachID = m.coachID JOIN Teams t ON c.tmID = t.tmID WHERE m.birthCountry = 'USA' AND t.name = 'Philadelphia Flyers';
SELECT COUNT(DISTINCT c.coachID)  FROM Coaches c  JOIN Teams t ON c.tmID = t.tmID  JOIN Master m ON c.coachID = m.coachID  WHERE t.name = 'Buffalo Sabres' AND m.deathYear IS NOT NULL;
SELECT DISTINCT m.nameNick FROM Coaches c JOIN Master m ON c.coachID = m.coachID JOIN Teams t ON c.tmID = t.tmID WHERE m.birthCountry = 'USA' AND t.name = 'Buffalo Sabres' AND c.coachID IS NOT NULL;
SELECT COUNT(DISTINCT c.coachID)  FROM Coaches c JOIN Teams t ON c.tmID = t.tmID AND c.year = t.year JOIN SeriesPost s ON t.year = s.year AND (s.tmIDWinner = t.tmID OR s.tmIDLoser = t.tmID) JOIN Master m ON c.coachID = m.coachID WHERE s.year = 1922 AND m.birthCountry = 'USA';
SELECT tmID, COUNT(*) AS games_played FROM TeamVsTeam WHERE year = 2000 AND oppID = (SELECT tmID FROM Teams WHERE name = 'Buffalo Sabres') GROUP BY tmID ORDER BY games_played DESC LIMIT 1;
SELECT DISTINCT t.name FROM Teams t JOIN TeamVsTeam tvt ON t.tmID = tvt.oppID WHERE tvt.year IN (SELECT DISTINCT year FROM Teams WHERE name = 'Buffalo Sabres');
SELECT SUM(PIM) AS TotalPenaltyMinutes FROM TeamsPost WHERE year = 1918 AND name = 'Montreal Canadiens';
SELECT SUM(W) AS total_wins FROM Teams WHERE tmID = (SELECT tmID FROM Teams WHERE name = 'Montreal Canadiens' AND year = (SELECT year FROM TeamsPost WHERE tmID = (SELECT tmID FROM Teams WHERE name = 'Montreal Canadiens') AND PIM = 24))
SELECT year  FROM TeamsPost  WHERE tmID = (SELECT tmID FROM Teams WHERE name = 'Montreal Canadiens')  AND PIM = 49  AND year IN (1924, 1923, 1918);
SELECT firstName  FROM Coaches  WHERE tmID = (SELECT tmID FROM Teams WHERE name = 'Montreal Canadiens')  ORDER BY year ASC  LIMIT 1;
SELECT AVG(CAST(W AS FLOAT) / G) AS average_winning_rate FROM Teams WHERE name = 'Buffalo Sabres' AND year = 2000;
SELECT AVG(PIM) AS Average_Penalty_Minutes FROM TeamsPost WHERE tmID = (SELECT tmID FROM Teams WHERE name = 'Montreal Canadiens') AND year IN (SELECT year FROM SeriesPost WHERE round = 'Finals');
SELECT AVG(W / G) AS average_winning_rate FROM SeriesPost WHERE (tmIDWinner = (SELECT tmID FROM Teams WHERE name = 'Montreal Canadiens') OR         tmIDLoser = (SELECT tmID FROM Teams WHERE name = 'Montreal Canadiens')) AND year IN (SELECT DISTINCT year FROM Teams WHERE name = 'Montreal Canadiens');
SELECT      (COUNT(CASE WHEN M.birthCountry = 'USA' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      Coaches C JOIN      Master M ON C.coachID = M.coachID JOIN      Teams T ON C.tmID = T.tmID WHERE      T.name = 'Montreal Canadiens';
SELECT name  FROM HOF  WHERE category NOT IN ('player', 'builder')  ORDER BY year DESC  LIMIT 1;
SELECT hofID  FROM HOF  WHERE category = 'referee' AND year BETWEEN 1970 AND 1979;
SELECT COUNT(*) AS total_hall_of_famers FROM HOF WHERE year = 1958 AND category = 'player';
SELECT COUNT(DISTINCT h.hofID) AS HallOfFamersCount FROM HOF h JOIN Master m ON h.name = m.name JOIN Coaches c ON m.coachID = c.coachID WHERE m.playerID IS NOT NULL AND c.coachID IS NOT NULL;
SELECT COUNT(*)  FROM Master  WHERE lastName = 'Green'  AND playerID IS NOT NULL  AND coachID IS NULL;
SELECT BenchMinor  FROM Teams  WHERE tmID = (SELECT tmID                 FROM Coaches                 WHERE coachID = (SELECT coachID                                  FROM Master                                  WHERE firstName = 'Scotty' AND lastName = 'Bowman')                 AND year = 1982);
SELECT CONCAT(firstName, ' ', lastName) AS fullName FROM Master WHERE playerID IN (     SELECT playerID     FROM Goalies     WHERE ENG = 10 ) ORDER BY height DESC LIMIT 1;
SELECT CONCAT(m.firstName, ' ', m.lastName) AS fullName, g.shootCatch FROM Goalies g JOIN Master m ON g.playerID = m.playerID WHERE g.year = 1973 AND g.tmID = 'QUN' AND g.GP = 32;
SELECT COUNT(DISTINCT g.tmID) AS team_count FROM Goalies g JOIN Master m ON g.playerID = m.playerID WHERE m.lastName = 'Young';
SELECT g.playerID, g.year, g.tmID FROM Goalies g JOIN Coaches c ON g.playerID = c.coachID LEFT JOIN HOF h ON c.coachID = h.hofID WHERE g.tmID = 'BOS' AND g.year = 1972 AND c.coachID IS NOT NULL AND h.hofID IS NULL;
SELECT SUM(GP) AS TotalGames FROM Goalies WHERE playerID IN (     SELECT playerID     FROM Master     WHERE legendsID = 'P196402' );
SELECT CONCAT(m.firstName, ' ', m.lastName) AS fullName FROM Goalies g JOIN Master m ON g.playerID = m.playerID JOIN Teams t ON g.tmID = t.tmID WHERE t.name = 'Quebec Bulldogs' GROUP BY g.playerID ORDER BY MAX(g.Min) DESC LIMIT 1;
SELECT COUNT(DISTINCT playerID)  FROM Goalies  WHERE tmID = (SELECT tmID FROM Teams WHERE name = 'Calgary Flames');
SELECT playerID, MAX(GA) AS MaxGoalsAgainst FROM Goalies WHERE tmID = (SELECT tmID FROM Teams WHERE name = 'Minnesota North Stars') GROUP BY playerID ORDER BY MaxGoalsAgainst DESC LIMIT 1;
SELECT COUNT(DISTINCT m.playerID) AS HallOfFameGoalies FROM Master m JOIN HOF h ON m.hofID = h.hofID JOIN Goalies g ON m.playerID = g.playerID JOIN Teams t ON g.tmID = t.tmID WHERE t.name = 'Haileybury Hockey Club' AND m.playerID IS NOT NULL;
SELECT shootCatch  FROM Goalies  WHERE year = 2010  AND SHO = (SELECT MAX(SHO) FROM Goalies WHERE year = 2010);
SELECT      (SUM(GP) FILTER (WHERE year = 2005) - SUM(GP) FILTER (WHERE year = 2006)) / SUM(GP) FILTER (WHERE year = 2005) AS decrease_rate FROM      Goalies WHERE      playerID = (SELECT playerID FROM Master WHERE lastName = 'Aebischer' AND firstName = 'David');
SELECT DISTINCT m.playerID, c.coachID FROM Master m JOIN Coaches c ON m.coachID = c.coachID WHERE m.playerID IS NOT NULL AND c.coachID IS NOT NULL;
SELECT playerID  FROM Master  WHERE height = 75;
SELECT playerID  FROM Master  ORDER BY weight DESC  LIMIT 5;
SELECT firstName, lastName FROM Master WHERE birthCountry = 'Finland';
SELECT playerID FROM Master WHERE deathYear IS NOT NULL;
SELECT DISTINCT firstName  FROM Coaches  WHERE year > 2000;
SELECT DISTINCT m.height, m.weight FROM AwardsCoaches ac JOIN Coaches c ON ac.coachID = c.coachID JOIN Master m ON c.coachID = m.coachID WHERE ac.year = 1930;
SELECT      SUM(S.G) AS total_goals,      YEAR(CURDATE()) - M.birthYear AS age  FROM      Scoring S  JOIN      Master M ON S.playerID = M.playerID  WHERE      M.playerID = 'aaltoan01';
SELECT DISTINCT c.coachID FROM Coaches c JOIN AwardsCoaches a ON c.coachID = a.coachID WHERE c.playerID IS NULL;
SELECT playerID  FROM Master  WHERE pos = 'L' AND weight > 200;
SELECT SUM(GP) AS total_games_played FROM Master JOIN Scoring ON Master.playerID = Scoring.playerID WHERE Master.birthCountry = 'USA';
SELECT SUM(Scoring.Pts) AS TotalPoints, Coaches.* FROM Scoring JOIN Coaches ON Scoring.tmID = Coaches.tmID WHERE Scoring.tmID = 'ANA' GROUP BY Coaches.coachID;
SELECT SUM(G) AS total_goals FROM Teams WHERE year = 1976 AND tmID = 'BIR' AND divID = 'EW';
SELECT      SUM(T.L) AS total_losses,     SUM(S.A) AS total_assists FROM      Teams T JOIN      Scoring S ON T.tmID = S.tmID AND T.year = S.year WHERE      T.year = 2010 AND T.tmID = 'BOS';
SELECT SUM(Master.weight) AS total_weight FROM Master JOIN Teams ON Master.playerID = Teams.tmID WHERE Teams.tmID = 'ANA' AND Teams.year = 1997;
SELECT playerID, tmID  FROM Master  WHERE height = (SELECT MIN(height) FROM Master WHERE birthYear BETWEEN 1925 AND 1936);
SELECT t.tmID, m.birthCountry FROM Teams t JOIN Goalies g ON t.tmID = g.tmID AND g.year = 2000 JOIN Master m ON g.playerID = m.playerID WHERE t.year = 2000 GROUP BY t.tmID, m.birthCountry HAVING MAX(DIVIDE(COUNT(g.W), COUNT(g.W) + COUNT(g.L))) = (     SELECT MAX(DIVIDE(COUNT(W), COUNT(W) + COUNT(L)))     FROM Teams     WHERE year = 2000     GROUP BY tmID );
SELECT      t.tmID,      DIVIDE(t.W, t.G) AS wins_per_game,      s.playerID,      MAX(s.G) AS most_goals FROM      Teams t JOIN      Scoring s ON t.tmID = s.tmID AND s.year = t.year WHERE      t.year = 1998 AND t.tmID = 'CAR' GROUP BY      t.tmID, s.playerID ORDER BY      most_goals DESC LIMIT 1;
SELECT Name FROM Country WHERE LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM Country);
SELECT DISTINCT c.Name  FROM Country c  JOIN CountryLanguage cl ON c.Code = cl.CountryCode  WHERE cl.Language = 'English' AND cl.IsOfficial = 'T'  LIMIT 5;
SELECT AVG(Population) AS AveragePopulation FROM City WHERE District = 'Karnataka';
SELECT Language  FROM CountryLanguage  WHERE CountryCode = 'USA';
SELECT COUNT(DISTINCT CountryCode) AS NumberOfCountries FROM CountryLanguage WHERE Language = 'Portuguese';
SELECT COUNT(*) FROM City WHERE District = 'England';
SELECT COUNT(*)  FROM City  WHERE CountryCode = (SELECT Code FROM Country ORDER BY SurfaceArea DESC LIMIT 1);
SELECT City.Name AS CapitalCity, City.Population FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.Name = 'San Marino';
SELECT Language  FROM CountryLanguage  WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Turkmenistan');
SELECT c.Name, c.Capital, cl.Language FROM Country c JOIN CountryLanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' AND c.LifeExpectancy = (SELECT MAX(LifeExpectancy) FROM Country);
SELECT c.Name AS Country, cl.Language AS OfficialLanguage FROM Country c JOIN CountryLanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Antarctica' AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Name  FROM Country c JOIN CountryLanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' LIMIT 5;
SELECT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE c.Region = 'Baltic Countries' AND cl.Percentage > 80;
SELECT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE c.Region = 'Baltic Countries' AND cl.Percentage > 80;
SELECT c.Name AS CityName, co.Name AS CountryName, co.LifeExpectancy FROM City c JOIN Country co ON c.CountryCode = co.Code WHERE c.Population = (SELECT MAX(Population) FROM City);
SELECT c.Name AS CapitalCity, cl.Language FROM Country c JOIN City ci ON c.Code = ci.CountryCode JOIN CountryLanguage cl ON c.Code = cl.CountryCode WHERE c.LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM Country) AND ci.Name = c.Capital;
SELECT c.Name AS Country, c.Population, c.Capital, cl.Language AS OfficialLanguage FROM Country c JOIN CountryLanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' AND c.SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country);
SELECT      (COUNT(CASE WHEN cl.Language = 'English' THEN 1 END) * 100.0) / COUNT(*) AS Percentage FROM      Country c JOIN      CountryLanguage cl ON c.Code = cl.CountryCode WHERE      c.Continent = 'North America';
SELECT District  FROM City  WHERE Population = (SELECT MIN(Population) FROM City);
SELECT Continent  FROM Country  WHERE SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country);
SELECT c.HeadOfState FROM City ci JOIN Country c ON ci.CountryCode = c.Code WHERE ci.Population = (SELECT MAX(Population) FROM City);
SELECT Name  FROM Country  WHERE Code IN (     SELECT CountryCode      FROM CountryLanguage      WHERE Language = 'English' AND IsOfficial = 'T' )  ORDER BY Capital DESC  LIMIT 1;
SELECT City.Name  FROM City  JOIN Country ON City.CountryCode = Country.Code  WHERE Country.LifeExpectancy = 66.4;
SELECT HeadOfState  FROM Country  WHERE Code = (     SELECT CountryCode      FROM CountryLanguage      WHERE Language = 'English'      ORDER BY Percentage ASC      LIMIT 1 );
SELECT c.SurfaceArea  FROM Country c  JOIN City ci ON c.Code = ci.CountryCode  WHERE ci.Name = 'Sutton Coldfield';
SELECT cl.Language FROM Country c JOIN CountryLanguage cl ON c.Code = cl.CountryCode WHERE c.Population < 8000;
SELECT cl.Language  FROM CountryLanguage cl  JOIN Country c ON cl.CountryCode = c.Code  WHERE c.Name = 'Belgium' AND cl.IsOfficial = 'T';
SELECT City.Name, City.District  FROM City  JOIN Country ON City.CountryCode = Country.Code  WHERE Country.LocalName = 'Hajastan';
SELECT COUNT(*)  FROM CountryLanguage  WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Cyprus');
SELECT Language  FROM CountryLanguage  WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Belize');
SELECT DISTINCT C.District FROM City C JOIN Country Co ON C.CountryCode = Co.Code WHERE Co.HeadOfState = 'Adolf Ogi';
SELECT c.HeadOfState FROM City ci JOIN Country c ON ci.CountryCode = c.Code WHERE ci.District = 'Santa Catarina';
SELECT      (SUM(CASE WHEN cl.Language = 'English' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS EnglishPercentage FROM      Country c JOIN      CountryLanguage cl ON c.Code = cl.CountryCode WHERE      c.GNP > 1500;
SELECT      ABS(         (SELECT COUNT(DISTINCT c.Code)           FROM Country c           JOIN CountryLanguage cl ON c.Code = cl.CountryCode           WHERE cl.Language = 'English' AND c.GovernmentForm = 'Republic') -          (SELECT COUNT(DISTINCT c.Code)           FROM Country c           JOIN CountryLanguage cl ON c.Code = cl.CountryCode           WHERE cl.Language = 'English' AND c.GovernmentForm = 'Constitutional Monarchy')     ) AS Difference;
SELECT Name FROM Country WHERE IndepYear = 1994;
SELECT Name FROM Country WHERE Continent = 'Asia';
SELECT Name  FROM Country  WHERE Continent = 'Asia'  ORDER BY GNP DESC  LIMIT 1;
SELECT COUNT(*) FROM City WHERE CountryCode = 'PHL';
SELECT LocalName FROM Country WHERE Name = 'Ukraine';
SELECT COUNT(*)  FROM Country  WHERE GovernmentForm = 'Socialistic Republic';
SELECT Language  FROM CountryLanguage  WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'China')  AND IsOfficial = 'T';
SELECT cl.Percentage FROM Country c JOIN CountryLanguage cl ON c.Code = cl.CountryCode WHERE c.Name = 'China' AND cl.Language = 'Chinese';
SELECT c.GovernmentForm  FROM Country c  JOIN City ci ON c.Code = ci.CountryCode  WHERE ci.Name = 'Manila';
SELECT Name FROM City WHERE ID = (SELECT Capital FROM Country WHERE Name = 'Philippines');
SELECT DISTINCT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Europe';
SELECT c.HeadOfState FROM Country c JOIN City ci ON c.Code = ci.CountryCode WHERE ci.Name = 'Pyongyang';
SELECT COUNT(*)  FROM CountryLanguage  WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Italy')  AND IsOfficial = 'F';
SELECT Name FROM City WHERE CountryCode = 'RUS' ORDER BY Population ASC LIMIT 1;
SELECT City.Name FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.LifeExpectancy = (SELECT MAX(LifeExpectancy) FROM Country);
SELECT Language, IsOfficial  FROM CountryLanguage  WHERE CountryCode = (SELECT Code FROM Country WHERE IndepYear = 1830);
SELECT Capital  FROM Country  WHERE Population = (SELECT MAX(Population) FROM Country);
SELECT DISTINCT c.Name FROM Country c JOIN CountryLanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' AND cl.Language = 'English' AND cl.IsOfficial = 'F';
SELECT AVG(C.GNP) AS AverageGNP FROM Country C JOIN CountryLanguage CL ON C.Code = CL.CountryCode WHERE CL.Language = 'Arabic';
SELECT      (SUM(CASE WHEN cl.Language = 'Chinese' THEN c.SurfaceArea ELSE 0 END) / SUM(c.SurfaceArea)) * 100 AS PercentageOfSurfaceAreaUsingChinese FROM      Country c JOIN      CountryLanguage cl ON c.Code = cl.CountryCode WHERE      cl.Language = 'Chinese';
SELECT Name FROM Country WHERE SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country);
SELECT Name FROM Country WHERE Population = (SELECT MAX(Population) FROM Country);
SELECT cl.Language  FROM Country c  JOIN CountryLanguage cl ON c.Code = cl.CountryCode  WHERE c.Population = (SELECT MIN(Population) FROM Country);
SELECT c.Name FROM Country c JOIN CountryLanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'T';
SELECT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE cl.IsOfficial = 'T' AND c.IndepYear > 1990;
SELECT Percentage  FROM CountryLanguage  WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Australia')  AND Language = 'English';
SELECT Language  FROM CountryLanguage  WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Malaysia');
SELECT c.Name  FROM City ci  JOIN Country c ON ci.CountryCode = c.Code  WHERE ci.Population = (SELECT MAX(Population) FROM City);
SELECT c.LifeExpectancy FROM Country c JOIN City ci ON c.Code = ci.CountryCode WHERE ci.Population = (SELECT MAX(Population) FROM City);
SELECT c.GNP FROM Country c JOIN City ci ON c.Code = ci.CountryCode WHERE ci.Population = (SELECT MIN(Population) FROM City);
SELECT cl.CountryCode, COUNT(cl.Language) AS LanguageCount FROM City c JOIN Country co ON c.CountryCode = co.Code JOIN CountryLanguage cl ON co.Code = cl.CountryCode WHERE c.ID IN (     SELECT ID     FROM City     ORDER BY Population DESC     LIMIT 5 ) GROUP BY cl.CountryCode ORDER BY LanguageCount DESC LIMIT 1;
SELECT c.Name FROM Country c JOIN City ci ON c.Code = ci.CountryCode WHERE c.SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country) AND ci.Population = (SELECT MAX(Population) FROM City WHERE CountryCode = c.Code);
SELECT Name FROM City WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'China');
SELECT City.Name  FROM City  JOIN Country ON City.CountryCode = Country.Code  WHERE Country.LocalName = 'Â´Uman';
SELECT AVG(c.LifeExpectancy) AS AverageLifeExpectancy FROM Country c JOIN CountryLanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Arabic';
SELECT (c.GNP - c.GNPOld) / c.GNPOld AS GNP_Growth_Rate FROM Country c JOIN City ci ON c.Code = ci.CountryCode WHERE ci.Name = 'Shanghai';
SELECT District FROM City WHERE Name = 'Zaanstad';
SELECT Name FROM City ORDER BY Population DESC LIMIT 1;
SELECT District FROM City WHERE Population = 201843;
SELECT Name FROM Country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM Country);
SELECT COUNT(*)  FROM Country  WHERE LifeExpectancy = 75.1;
SELECT IndepYear FROM Country WHERE Name = 'Brunei';
SELECT COUNT(*)  FROM Country  WHERE GNP = 0;
SELECT AVG(SurfaceArea) AS AverageSurfaceArea FROM Country;
SELECT COUNT(DISTINCT cl.Language) AS LanguageCount FROM City c JOIN Country co ON c.CountryCode = co.Code JOIN CountryLanguage cl ON co.Code = cl.CountryCode WHERE c.District = 'Tocantins';
SELECT DISTINCT C.District FROM City C JOIN Country Co ON C.CountryCode = Co.Code WHERE Co.SurfaceArea = (SELECT MAX(SurfaceArea) FROM Country);
SELECT COUNT(*)  FROM City  WHERE CountryCode = (SELECT Code FROM Country WHERE HeadOfState = 'Kostis Stefanopoulos');
SELECT cl.Language  FROM CountryLanguage cl  JOIN Country c ON cl.CountryCode = c.Code  WHERE c.Name = 'Greece' AND cl.IsOfficial = 'T';
SELECT c.Population  FROM Country c  JOIN City ci ON c.Code = ci.CountryCode  WHERE ci.Name = 'Queimados';
SELECT cl.Language  FROM CountryLanguage cl  JOIN Country c ON cl.CountryCode = c.Code  JOIN City ci ON c.Code = ci.CountryCode  WHERE cl.IsOfficial = 'T'  AND c.Code = (SELECT ci2.CountryCode                FROM City ci2                ORDER BY ci2.Population ASC                LIMIT 1);
SELECT c.SurfaceArea, c.GNP FROM Country c JOIN City ci ON c.Code = ci.CountryCode WHERE ci.District = 'Namibe';
SELECT c.Name  FROM Country c  JOIN CountryLanguage cl ON c.Code = cl.CountryCode  WHERE cl.Language = 'English' AND cl.IsOfficial = 'T';
SELECT DISTINCT C.District FROM City C JOIN Country Co ON C.CountryCode = Co.Code WHERE Co.SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country);
SELECT c.Name FROM Country c JOIN CountryLanguage cl ON c.Code = cl.CountryCode WHERE c.GNP < 1000 AND cl.Language = 'Dutch';
SELECT c.GNP  FROM Country c  JOIN City ci ON c.Code = ci.CountryCode  WHERE ci.District = 'Entre Rios';
SELECT c.LocalName  FROM City ci  JOIN Country c ON ci.CountryCode = c.Code  WHERE ci.Name = 'The Valley';
SELECT City.Name  FROM City  JOIN Country ON City.CountryCode = Country.Code  WHERE Country.SurfaceArea > 7000000;
SELECT c.LifeExpectancy FROM Country c JOIN CountryLanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Japanese';
SELECT COUNT(*)  FROM City  WHERE CountryCode = (SELECT Code FROM Country WHERE SurfaceArea = 652090);
SELECT cl.Language  FROM CountryLanguage cl  JOIN Country c ON cl.CountryCode = c.Code  WHERE c.IndepYear BETWEEN 1980 AND 1995;
SELECT c.LifeExpectancy  FROM City ci  JOIN Country c ON ci.CountryCode = c.Code  WHERE ci.Name = 'Calama';
SELECT cl.Language  FROM Country c  JOIN CountryLanguage cl ON c.Code = cl.CountryCode  WHERE c.HeadOfState = 'Pierre Buyoya';
SELECT      (SUM(CASE WHEN c.District = 'England' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS Percentage FROM      Country co JOIN      City c ON co.Code = c.CountryCode WHERE      co.GovernmentForm = 'Constitutional Monarchy';
SELECT DISTINCT c.Name AS Country FROM City ci JOIN Country c ON ci.CountryCode = c.Code WHERE ci.Population BETWEEN 140000 AND 150000 AND c.LifeExpectancy > (SELECT AVG(LifeExpectancy) * 0.8 FROM Country);
SELECT      (SUM(CASE WHEN c.GovernmentForm = 'Republic' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS PercentageOfRepublics FROM      CountryLanguage cl JOIN      Country c ON cl.CountryCode = c.Code WHERE      cl.Language = 'Italian';
SELECT COUNT(*) AS podcast_count FROM podcasts WHERE podcast_id IN (     SELECT podcast_id     FROM categories     GROUP BY category     HAVING COUNT(podcast_id) = (         SELECT MAX(category_count)         FROM (             SELECT COUNT(podcast_id) AS category_count             FROM categories             GROUP BY category         ) AS category_counts     ) );
SELECT      (COUNT(DISTINCT CASE WHEN category_count >= 4 THEN podcast_id END) * 100.0 / COUNT(DISTINCT podcast_id)) AS percentage FROM (     SELECT          podcast_id,          COUNT(category) AS category_count     FROM          categories     GROUP BY          podcast_id ) AS categorized_podcasts;
SELECT itunes_id, itunes_url FROM podcasts WHERE title = 'Brown Suga Diaries';
SELECT title, itunes_url  FROM podcasts  WHERE title LIKE '%Dream%';
SELECT c.category  FROM categories c  JOIN podcasts p ON c.podcast_id = p.podcast_id  WHERE p.title = 'I Heart My Life Show';
SELECT p.title, p.itunes_url FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'society-culture';
SELECT COUNT(DISTINCT r.author_id)  FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id WHERE r.rating = 5  AND p.title LIKE '%spoiler%'  AND c.category = 'art';
SELECT DISTINCT author_id  FROM reviews  WHERE podcast_id = (SELECT podcast_id FROM podcasts WHERE title = 'Pop Rocket')  AND created_at LIKE '2016%'  AND rating < 5;
SELECT p.title, c.category FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id GROUP BY p.title, c.category HAVING AVG(r.rating) > 3.0;
SELECT r.content, p.title FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'fiction' AND r.rating = 5;
SELECT p.title, r.content, r.rating FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE r.title = 'Love it!';
SELECT author_id, rating, created_at  FROM reviews  WHERE podcast_id = (SELECT podcast_id FROM podcasts WHERE title = 'In The Thick');
SELECT p.title, r.created_at, r.rating FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id ORDER BY r.created_at DESC LIMIT 1;
SELECT p.title, r.rating, r.content FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.author_id = '76A4C24B6038145';
SELECT p.title AS podcast_title, r.title AS review_title, r.content AS review_content FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE r.rating = 1;
SELECT p.title, r.rating FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE r.created_at LIKE '2019-05%';
SELECT AVG(rating) AS average_rating FROM reviews WHERE podcast_id = (     SELECT podcast_id     FROM reviews     GROUP BY podcast_id     ORDER BY COUNT(podcast_id) DESC     LIMIT 1 );
SELECT c.category  FROM podcasts p  JOIN categories c ON p.podcast_id = c.podcast_id  WHERE p.title = 'SciFi Tech Talk';
SELECT p.title, p.itunes_url FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.title = 'Long time listener, calling it quits';
SELECT p.title  FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'true crime';
SELECT r.content  FROM reviews r  JOIN podcasts p ON r.podcast_id = p.podcast_id  WHERE p.title = 'StormCast: The Official Warhammer Age of Sigmar Podcast';
SELECT r.title, r.content  FROM reviews r  JOIN podcasts p ON r.podcast_id = p.podcast_id  WHERE p.title = 'More Stupider: A 90-Day Fiance Podcast' AND r.rating = 1;
SELECT COUNT(*)  FROM reviews r  JOIN podcasts p ON r.podcast_id = p.podcast_id  WHERE p.title = 'LifeAfter/The Message' AND r.rating < 3;
SELECT c.category, AVG(r.rating) AS average_rating FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id LEFT JOIN reviews r ON p.podcast_id = r.podcast_id WHERE p.title = 'More Stupider: A 90-Day Fiance Podcast' GROUP BY c.category;
SELECT      category,      COUNT(podcast_id) AS podcast_count  FROM      categories  WHERE      category IN ('arts-books', 'arts-design')  GROUP BY      category  ORDER BY      podcast_count DESC  LIMIT 1;  SELECT      ABS(         (SELECT COUNT(podcast_id) FROM categories WHERE category = 'arts-books') -          (SELECT COUNT(podcast_id) FROM categories WHERE category = 'arts-design')     ) AS numerical_difference;
SELECT SUM(reviews_added) AS total_reviews FROM runs WHERE run_at BETWEEN '2022-06-01 00:00:00' AND '2022-06-30 23:59:59';
SELECT COUNT(*)  FROM reviews  WHERE rating = 3  AND created_at BETWEEN '2015-01-01T00:00:00-07:00' AND '2015-03-31T23:59:59-07:00';
SELECT      (COUNT(CASE WHEN c.category = 'fiction-science-fiction' THEN p.podcast_id END) * 100.0 / COUNT(p.podcast_id)) AS percentage FROM      podcasts p LEFT JOIN      categories c ON p.podcast_id = c.podcast_id;
SELECT AVG(rating) AS average_rating FROM reviews WHERE created_at BETWEEN '2019-01-01T00:00:00' AND '2019-12-31T23:59:59';
SELECT      YEAR(run_at) AS year,     (SUM(CASE WHEN run_at LIKE '2021%' THEN reviews_added ELSE 0 END) / SUM(reviews_added) * 100) AS percentage_2021,     (SUM(CASE WHEN run_at LIKE '2022%' THEN reviews_added ELSE 0 END) / SUM(reviews_added) * 100) AS percentage_2022 FROM      runs GROUP BY      YEAR(run_at);
SELECT p.title  FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'fiction';
SELECT r.rating, c.category FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id WHERE p.title = 'Sitcomadon';
SELECT author_id FROM reviews WHERE podcast_id IN (SELECT podcast_id FROM podcasts WHERE itunes_id = 1516665400);
SELECT p.title  FROM podcasts p  JOIN reviews r ON p.podcast_id = r.podcast_id  WHERE r.created_at BETWEEN '2018-08-22T11:53:16-07:00' AND '2018-11-20T11:14:20-07:00';
SELECT c.category  FROM reviews r  JOIN categories c ON r.podcast_id = c.podcast_id  WHERE r.author_id = 'EFB34EAC8E9397C';
SELECT slug, itunes_url  FROM podcasts  JOIN reviews ON podcasts.podcast_id = reviews.podcast_id  WHERE reviews.content = 'Can''t stop listening';
SELECT r.created_at  FROM podcasts p  JOIN reviews r ON p.podcast_id = r.podcast_id  WHERE p.title = "Don't Lie To Your Life Coach";
SELECT DISTINCT c.category FROM reviews r JOIN categories c ON r.podcast_id = c.podcast_id WHERE r.created_at BETWEEN '2016-07-01T00:00:00-07:00' AND '2016-12-31T23:59:59-07:00';
SELECT AVG(r.rating) AS average_rating FROM reviews r JOIN categories c ON r.podcast_id = c.podcast_id WHERE c.category = 'true-crime';
SELECT p.title  FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'arts';
SELECT AVG(rating) AS average_rating FROM reviews WHERE podcast_id IN (     SELECT podcast_id     FROM categories     WHERE category = 'arts' );
SELECT p.title  FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'arts' AND r.created_at LIKE '2018%';
SELECT p.title  FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'music' AND r.rating > 3;
SELECT p.title  FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id WHERE r.content = 'love'    AND c.category = 'art'    AND r.created_at BETWEEN '2018-01-01' AND '2019-12-31';
SELECT c.category, p.itunes_url  FROM podcasts p  JOIN categories c ON p.podcast_id = c.podcast_id  WHERE p.title = 'Scaling Global';
SELECT AVG(rating) AS average_rating FROM reviews WHERE podcast_id IN (     SELECT podcast_id     FROM categories     WHERE category = 'comedy' );
SELECT category FROM categories GROUP BY category ORDER BY COUNT(category) ASC LIMIT 1;
SELECT MAX(LENGTH(content)) AS longest_review_length FROM reviews;
SELECT podcast_id FROM reviews WHERE title = 'Hosts bring the show down';
SELECT title  FROM podcasts  WHERE podcast_id IN (SELECT podcast_id FROM categories WHERE category = 'music')  ORDER BY LENGTH(title) DESC  LIMIT 1;
SELECT c.category FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE p.title LIKE '%jessica%';
SELECT c.category  FROM podcasts p  JOIN categories c ON p.podcast_id = c.podcast_id  WHERE p.title = 'Moist Boys';
SELECT r.title AS review_title, r.content AS review_content, c.category FROM reviews r JOIN categories c ON r.podcast_id = c.podcast_id WHERE r.rating = 2;
SELECT p.* FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.title = 'Inspired & On Fire!';
SELECT p.title, c.category FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id WHERE r.content LIKE '%Absolutely fantastic%';
SELECT c.category, COUNT(r.podcast_id) AS review_count FROM categories c JOIN reviews r ON c.podcast_id = r.podcast_id GROUP BY c.category ORDER BY review_count DESC LIMIT 1;
SELECT p.itunes_url  FROM podcasts p  JOIN categories c ON p.podcast_id = c.podcast_id  WHERE c.category = 'fiction-science-fiction';
SELECT content  FROM reviews  WHERE podcast_id = (SELECT podcast_id FROM podcasts WHERE title = 'Stuff You Should Know')  ORDER BY created_at ASC  LIMIT 1;
SELECT COUNT(*)  FROM reviews  WHERE podcast_id = (SELECT podcast_id FROM podcasts WHERE title = 'Planet Money');
SELECT AVG(rating) AS average_rating  FROM reviews  WHERE podcast_id = (SELECT podcast_id FROM podcasts WHERE title = 'crime-junkie');
SELECT      (COUNT(CASE WHEN c.category = 'technology' THEN 1 END) * 100.0 / COUNT(p.podcast_id)) AS percentage_technology_podcasts,     p.* FROM      podcasts p LEFT JOIN      categories c ON p.podcast_id = c.podcast_id GROUP BY      p.podcast_id;
SELECT content  FROM reviews  WHERE title = 'really interesting!' AND created_at = '2018-04-24T12:05:16-07:00';
SELECT c.category  FROM podcasts p  JOIN categories c ON p.podcast_id = c.podcast_id  WHERE p.title = 'Scaling Global';
SELECT p.title  FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'arts-performing-arts';
SELECT COUNT(*)  FROM reviews  WHERE podcast_id = (SELECT podcast_id FROM podcasts WHERE title = 'Scaling Global');
SELECT COUNT(*)  FROM reviews r  JOIN podcasts p ON r.podcast_id = p.podcast_id  WHERE p.title = 'Please Excuse My Dead Aunt Sally'  AND r.created_at LIKE '2019%';
SELECT p.title  FROM podcasts p  JOIN reviews r ON p.podcast_id = r.podcast_id  WHERE r.author_id = 'F7E5A318989779D';
SELECT COUNT(*)  FROM reviews  WHERE podcast_id = (SELECT podcast_id FROM podcasts WHERE title = 'Please Excuse My Dead Aunt Sally')  AND rating = 5;
SELECT AVG(rating) AS average_rating FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Please Excuse My Dead Aunt Sally';
SELECT COUNT(*)  FROM university_year  WHERE num_students > 80000 AND year = 2011;
SELECT ranking_system_id  FROM ranking_criteria  WHERE criteria_name = 'Award';
SELECT COUNT(*) AS state_university_count  FROM university  WHERE university_name LIKE '%State%';
SELECT student_staff_ratio  FROM university_year  WHERE student_staff_ratio = (SELECT MAX(student_staff_ratio) FROM university_year);
SELECT COUNT(*)  FROM ranking_criteria  WHERE ranking_system_id = 3;
SELECT university_id  FROM university_year  WHERE pct_international_students = 1  AND year BETWEEN 2011 AND 2015;
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id GROUP BY c.country_name ORDER BY COUNT(u.id) DESC LIMIT 1;
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.pct_international_students = (     SELECT MAX(pct_international_students)     FROM university_year     WHERE university_id = u.id ) GROUP BY u.id HAVING COUNT(DISTINCT uy.year) >= 6;
SELECT u.university_name FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE ur.year = 2014 AND rc.criteria_name = 'Publications Rank' AND ur.score = (     SELECT MAX(score)     FROM university_ranking_year     WHERE year = 2014 AND ranking_criteria_id = rc.id );
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.num_students = (SELECT MIN(num_students) FROM university_year);
SELECT COUNT(*)  FROM university  WHERE country_id = (SELECT id FROM country WHERE country_name = 'United States of America');
SELECT u.university_name FROM university u JOIN country c ON u.country_id = c.id JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE c.country_name = 'Australia'    AND ur.year = 2016    AND rc.criteria_name = 'Citations' ORDER BY ur.score DESC LIMIT 1;
SELECT COUNT(DISTINCT ur.university_id) AS universities_with_zero_awards FROM university_ranking_year ur JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE rc.criteria_name = 'Award' AND ur.score = 0 AND ur.year BETWEEN 2005 AND 2015;
SELECT c.country_name  FROM university u  JOIN country c ON u.country_id = c.id  WHERE u.university_name = 'University of Oxford';
SELECT COUNT(*)  FROM university_ranking_year ur  JOIN university u ON ur.university_id = u.id  JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id  WHERE u.university_name = 'Yale University'  AND rc.criteria_name = 'Quality of Education Rank'  AND ur.score >= 10;
SELECT rc.criteria_name FROM ranking_criteria rc JOIN ranking_system rs ON rc.ranking_system_id = rs.id WHERE rs.system_name = 'Center for World University Rankings';
SELECT university_name  FROM university  JOIN university_year ON university.id = university_year.university_id  WHERE university_year.year = 2012 AND university_year.num_students > 50000;
SELECT DISTINCT c.country_name FROM university_year uy JOIN university u ON uy.university_id = u.id JOIN country c ON u.country_id = c.id WHERE uy.year BETWEEN 2011 AND 2016 AND uy.pct_international_students > 50;
SELECT COUNT(*) AS total_universities,        SUM(CASE WHEN c.country_name = 'United States of America' THEN 1 ELSE 0 END) AS us_universities FROM university_year uy JOIN university u ON uy.university_id = u.id JOIN country c ON u.country_id = c.id WHERE uy.year = 2016   AND (uy.pct_female_students * uy.num_students / 100) >= 20000;
SELECT university_name FROM university u JOIN university_year uy ON u.id = uy.university_id ORDER BY (uy.num_students * uy.pct_international_students / 100) DESC LIMIT 5;
SELECT university_id  FROM university_year  WHERE student_staff_ratio = (SELECT MAX(student_staff_ratio) FROM university_year);
SELECT year  FROM university_year  WHERE num_students = (SELECT MIN(num_students) FROM university_year);
SELECT AVG(pct_female_students) AS average_percentage_female_students FROM university_year;
SELECT      num_students,     DIVIDE(MULTIPLY(pct_international_students, num_students), 100) AS international_students FROM      university_year WHERE      university_id = 20 AND year = 2013;
SELECT id FROM university WHERE university_name = 'Harvard University';
SELECT university_id  FROM university_ranking_year  WHERE year = 2011 AND score = 100;
SELECT rs.system_name FROM ranking_criteria rc JOIN ranking_system rs ON rc.ranking_system_id = rs.id WHERE rc.criteria_name = 'Quality of Education Rank';
SELECT uy.student_staff_ratio  FROM university_year uy  JOIN university u ON uy.university_id = u.id  WHERE u.university_name = 'Harvard University' AND uy.year = 2012;
SELECT c.country_name  FROM university u  JOIN country c ON u.country_id = c.id  WHERE u.id = 112;
SELECT SUM(u.num_students) AS total_students FROM university_year u JOIN university un ON u.university_id = un.id JOIN country c ON un.country_id = c.id WHERE c.country_name = 'Sweden';
SELECT university_ranking_year.ranking_criteria_id  FROM university  JOIN university_ranking_year ON university.id = university_ranking_year.university_id  WHERE university.university_name = 'Brown University' AND university_ranking_year.year = 2014;
SELECT university_name  FROM university  JOIN country ON university.country_id = country.id  WHERE country_name = 'Spain';
SELECT rc.criteria_name  FROM university_ranking_year ur  JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id  WHERE ur.university_id = 32 AND ur.year = 2015;
SELECT AVG(ur.score) AS average_score FROM university u JOIN country c ON u.country_id = c.id JOIN university_ranking_year ur ON u.id = ur.university_id WHERE c.country_name = 'Brazil';
SELECT c.country_name FROM university u JOIN university_year uy ON u.id = uy.university_id JOIN country c ON u.country_id = c.id WHERE uy.year = 2014 ORDER BY uy.num_students DESC LIMIT 1;
SELECT      ury.score,      DIVIDE(MULTIPLY(uy.num_students, uy.pct_international_students), 100) AS international_students FROM      university_ranking_year ury JOIN      university_year uy ON ury.university_id = uy.university_id WHERE      ury.university_id = 100 AND ury.year = 2015 AND uy.year = 2015;
SELECT u.num_students  FROM university_year u  JOIN university_ranking_year ur ON u.university_id = ur.university_id  WHERE ur.score = 98 AND ur.year = 2013;
SELECT criteria_name  FROM ranking_criteria  WHERE ranking_system_id = (SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings');
SELECT c.country_name FROM university u JOIN university_year uy ON u.id = uy.university_id JOIN country c ON u.country_id = c.id WHERE uy.num_students > (SELECT AVG(num_students) * 0.98 FROM university_year WHERE year = 2013) AND uy.year = 2013;
SELECT      DIVIDE(SUM(DIVIDE(MULTIPLY(u.num_students, u.pct_international_students), 100)), SUM(u.num_students)) AS international_student_percentage FROM      university_year u JOIN      university_ranking_year r ON u.university_id = r.university_id WHERE      r.year = 2015 AND r.score < 80;
SELECT SUM(num_students) AS total_students FROM university_year WHERE year = 2011;
SELECT SUM(num_students * pct_female_students / 100) AS total_female_students FROM university_year WHERE year = 2011;
SELECT student_staff_ratio  FROM university_year  WHERE student_staff_ratio = (SELECT MAX(student_staff_ratio) FROM university_year);
SELECT university_id  FROM university_year  WHERE year = 2011  ORDER BY num_students DESC  LIMIT 1;
SELECT COUNT(*)  FROM university_year  WHERE year = 2011    AND num_students > 50000    AND pct_international_students > 10;
SELECT university_id  FROM university_year  WHERE year = 2012  ORDER BY pct_female_students DESC  LIMIT 1;
SELECT u.university_name FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id WHERE ur.year = 2012 ORDER BY ur.score DESC LIMIT 1;
SELECT university_name  FROM university  JOIN university_year ON university.id = university_year.university_id  WHERE university_year.year = 2011  ORDER BY num_students DESC  LIMIT 1;
SELECT u.university_name FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE rc.criteria_name = 'Teaching' ORDER BY ur.score DESC LIMIT 1;
SELECT pct_international_students  FROM university_year  JOIN university ON university_year.university_id = university.id  WHERE university.university_name = 'Harvard University' AND university_year.year = 2011;
SELECT DIVIDE(MULTIPLY(uys.pct_female_students, uys.num_students), 100) AS female_students FROM university_year uys JOIN university u ON u.id = uys.university_id WHERE u.university_name = 'Stanford University' AND uys.year = 2011;
SELECT c.country_name  FROM university u  JOIN country c ON u.country_id = c.id  WHERE u.university_name = 'Harvard University';
SELECT rs.system_name FROM ranking_criteria rc JOIN ranking_system rs ON rc.ranking_system_id = rs.id WHERE rc.criteria_name = 'Teaching';
SELECT u.university_name FROM university u JOIN country c ON u.country_id = c.id JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE c.country_name = 'Argentina' GROUP BY u.id ORDER BY SUM(ur.score) DESC LIMIT 1;
SELECT COUNT(*)  FROM university  WHERE country_id = (SELECT id FROM country WHERE country_name = 'Argentina');
SELECT university.university_name  FROM university  JOIN university_year ON university.id = university_year.university_id  WHERE university_year.year = 2011 AND university_year.num_students > 100000;
SELECT COUNT(*)  FROM ranking_criteria  WHERE ranking_system_id = (SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings');
SELECT u.num_students  FROM university_year u  JOIN university_ranking_year ur ON u.university_id = ur.university_id  WHERE ur.year = 2011 AND ur.score = 90;
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id GROUP BY u.id, u.university_name ORDER BY SUM(uy.pct_international_students * uy.num_students / 100) DESC LIMIT 3;
SELECT      SUM(num_students) - SUM((pct_international_students * num_students) / 100) AS enrollment_difference FROM      university_year  WHERE      university_id = (SELECT id FROM university WHERE university_name = 'Harvard University')      AND year BETWEEN 2011 AND 2012;
SELECT COUNT(*)  FROM university_year  WHERE year = 2011 AND num_students > 30000;
SELECT country_id FROM university WHERE university_name = 'University of Tokyo';
SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings';
SELECT id FROM ranking_criteria WHERE criteria_name = 'Publications Rank';
SELECT COUNT(*)  FROM university_year  WHERE year = 2013 AND pct_international_students > 30;
SELECT COUNT(DISTINCT university_id)  FROM university_ranking_year  WHERE ranking_criteria_id = 6 AND year = 2011 AND score < 50;
SELECT num_students  FROM university_year  JOIN university ON university_year.university_id = university.id  WHERE university.university_name = 'Yale University' AND university_year.year = 2016;
SELECT university_name  FROM university  WHERE country_id = (SELECT id FROM country WHERE country_name = 'Denmark');
SELECT num_students / student_staff_ratio AS number_of_staff FROM university_year JOIN university ON university_year.university_id = university.id WHERE university.university_name = 'University of Auckland' AND university_year.year = 2015;
SELECT c.country_name  FROM country c  JOIN university u ON c.id = u.country_id  WHERE u.university_name = 'University of São Paulo';
SELECT DIVIDE(MULTIPLY(num_students, pct_international_students), 100) AS international_students FROM university_year JOIN university ON university_year.university_id = university.id WHERE university.university_name = 'Harvard University' AND university_year.year = 2012;
SELECT DIVIDE(MULTIPLY(uys.pct_female_students, uys.num_students), 100) AS female_students FROM university_year uys JOIN university u ON u.id = uys.university_id WHERE u.university_name = 'Arizona State University' AND uys.year = 2014;
SELECT u.university_name, SUM(ur.score) AS total_score FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id GROUP BY u.id, u.university_name HAVING total_score = (SELECT MAX(total_score)                        FROM (SELECT SUM(score) AS total_score                             FROM university_ranking_year                             GROUP BY university_id) AS scores);
SELECT criteria_name  FROM ranking_criteria  WHERE ranking_system_id = (SELECT id FROM ranking_system WHERE system_name = 'Shanghai Ranking');
SELECT u.university_name, MIN(ur.score) AS lowest_score FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE ur.year = 2011 AND rc.criteria_name = 'Teaching' GROUP BY u.university_name ORDER BY lowest_score ASC LIMIT 1;
SELECT rs.system_name FROM ranking_criteria rc JOIN ranking_system rs ON rc.ranking_system_id = rs.id WHERE rc.criteria_name = 'Quality of Education Rank';
WITH scored_universities AS (     SELECT u.university_name, ur.score     FROM university u     JOIN university_ranking_year ur ON u.id = ur.university_id     JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id     WHERE rc.criteria_name = 'International' AND ur.year = 2016 AND ur.score > 80 ), total_universities AS (     SELECT COUNT(*) AS total     FROM university )  SELECT      (COUNT(*) * 100.0 / (SELECT total FROM total_universities)) AS percent_above_80,     MAX(university_name) AS highest_scoring_university FROM scored_universities;
SELECT rc.criteria_name, ury.score FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE u.university_name = 'Harvard University' AND ury.year = 2005;
SELECT AVG(score) AS average_score FROM university_ranking_year WHERE ranking_criteria_id = (SELECT id FROM ranking_criteria WHERE criteria_name = 'Alumni')   AND year = 2008;
SELECT u.university_name, c.country_name FROM university_year uy JOIN university u ON uy.university_id = u.id JOIN country c ON u.country_id = c.id WHERE uy.year = 2015 ORDER BY (uy.num_students * uy.pct_international_students / 100) DESC LIMIT 1;
SELECT num_students  FROM university_year  WHERE university_id = 1 AND year = 2011;
SELECT university_id  FROM university_year  WHERE year = 2011  ORDER BY num_students DESC  LIMIT 1;
SELECT university_id  FROM university_year  WHERE year = 2011 AND student_staff_ratio > 15;
SELECT COUNT(*)  FROM university_year  WHERE year = 2011    AND num_students > 20000    AND pct_international_students > 25;
SELECT university_id  FROM university_year  WHERE year = 2011  ORDER BY pct_female_students DESC  LIMIT 3;
SELECT year  FROM university_year  WHERE university_id = 1  ORDER BY num_students DESC  LIMIT 1;
SELECT num_students  FROM university_year  WHERE university_id = (SELECT id FROM university WHERE university_name = 'Harvard University')  AND year = 2011;
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2011 ORDER BY (uy.num_students * uy.pct_international_students / 100) DESC LIMIT 1;
SELECT university_name  FROM university  WHERE country_id = (SELECT id FROM country WHERE country_name = 'Australia');
SELECT COUNT(*)  FROM university u  JOIN country c ON u.country_id = c.id  JOIN university_year uy ON u.id = uy.university_id  WHERE c.country_name = 'Australia' AND uy.year = 2011 AND uy.num_students > 15000;
SELECT c.country_name  FROM university u  JOIN country c ON u.country_id = c.id  WHERE u.university_name = 'Harvard University';
SELECT u.university_name FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE rc.criteria_name = 'Teaching' AND ur.year = 2011 ORDER BY ur.score DESC LIMIT 1;
SELECT u.university_name FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE rc.criteria_name = 'Teaching' AND ur.year = 2011 AND ur.score > 90;
SELECT COUNT(DISTINCT u.id) AS university_count FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id JOIN country c ON u.country_id = c.id WHERE ur.year = 2011    AND rc.criteria_name = 'Teaching'    AND ur.score > 90    AND c.country_name = 'United States of America';
SELECT rc.criteria_name FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE u.university_name = 'Harvard University' AND ur.year = 2011;
SELECT u.university_name FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE ur.year = 2011 AND ur.score = 98 AND rc.criteria_name = 'Teaching';
SELECT u.university_name FROM university u JOIN country c ON u.country_id = c.id JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE c.country_name = 'United States of America'   AND ur.year = 2011   AND rc.criteria_name = 'Teaching'   AND ur.score < 60;
SELECT COUNT(*)  FROM university u JOIN country c ON u.country_id = c.id JOIN university_year uy ON u.id = uy.university_id WHERE c.country_name = 'Australia'  AND uy.year = 2011  AND uy.student_staff_ratio > 15;
SELECT DIVIDE(MULTIPLY(uys.pct_female_students, uys.num_students), 100) AS female_students FROM university_year uys JOIN university u ON u.id = uys.university_id WHERE u.university_name = 'Stanford University' AND uys.year = 2011;
SELECT      (COUNT(CASE WHEN c.country_name = 'United States of America' THEN 1 END) * 100.0) / COUNT(u.id) AS percentage FROM      university u JOIN      university_ranking_year ur ON u.id = ur.university_id JOIN      ranking_criteria rc ON ur.ranking_criteria_id = rc.id JOIN      country c ON u.country_id = c.id WHERE      ur.year = 2011 AND rc.criteria_name = 'Teaching' AND ur.score > 90;
SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings';
SELECT c.id  FROM university u  JOIN country c ON u.country_id = c.id  WHERE u.university_name = 'University of Veterinary Medicine Vienna';
SELECT id FROM ranking_criteria WHERE criteria_name = 'Citations Rank';
SELECT id FROM university WHERE university_name = 'University of Orléans';
SELECT num_students  FROM university_year  WHERE university_id = 268 AND year = 2013;
SELECT country_name FROM country WHERE id = 66;
SELECT c.country_name  FROM university u  JOIN country c ON u.country_id = c.id  WHERE u.university_name = 'McMaster University';
SELECT COUNT(*)  FROM university  WHERE country_id = (SELECT id FROM country WHERE country_name = 'Turkey');
SELECT university_name  FROM university  JOIN university_year ON university.id = university_year.university_id  WHERE university_year.year = 2011  ORDER BY num_students DESC  LIMIT 1;
SELECT num_students  FROM university_year  WHERE university_id = (SELECT id FROM university WHERE university_name = 'University of Michigan')  AND year = 2011;
SELECT ury.score  FROM university_ranking_year ury JOIN university u ON ury.university_id = u.id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE u.university_name = 'Chosun University'    AND ury.year = 2015    AND rc.criteria_name = 'Influence Rank';
SELECT pct_international_students  FROM university_year  JOIN university ON university_year.university_id = university.id  WHERE university.university_name = 'University of Oslo'  AND university_year.year = 2015;
SELECT c.criteria_name FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria c ON ur.ranking_criteria_id = c.id WHERE u.university_name = 'University of Southampton' AND ur.year = 2015 ORDER BY ur.score DESC LIMIT 1;
SELECT rs.system_name FROM ranking_criteria rc JOIN ranking_system rs ON rc.ranking_system_id = rs.id WHERE rc.criteria_name = 'Total Shanghai';
SELECT DIVIDE(MULTIPLY(u.pct_female_students, u.num_students), 100) AS female_students FROM university_year u JOIN university un ON u.university_id = un.id WHERE un.university_name = 'Pierre and Marie Curie University' AND u.year = 2015;
SELECT ury.score  FROM university_ranking_year ury JOIN university u ON ury.university_id = u.id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE u.university_name = 'University of Florida'    AND rc.criteria_name = 'N and S'    AND ury.year = 2014;
SELECT DIVIDE(MULTIPLY(u.num_students, u.pct_international_students), 100) AS international_students FROM university_year u JOIN university un ON u.university_id = un.id WHERE un.university_name = 'University of Wisconsin-Madison' AND u.year = 2013;
SELECT university_name  FROM university  JOIN university_year ON university.id = university_year.university_id  WHERE year = 2015  ORDER BY num_students ASC  LIMIT 1;
SELECT      (SELECT SUM(num_students) FROM university_year       JOIN university ON university_year.university_id = university.id       WHERE university.university_name = 'University of Ottawa' AND university_year.year = 2013) /     (SELECT SUM(num_students) FROM university_year       JOIN university ON university_year.university_id = university.id       WHERE university.university_name = 'Joseph Fourier University' AND university_year.year = 2013) AS times_more
SELECT AVG(criteria_count) AS average_criteria FROM (     SELECT COUNT(c.id) AS criteria_count     FROM ranking_criteria c     JOIN ranking_system s ON c.ranking_system_id = s.id     WHERE s.system_name IN ('Times Higher Education World University Ranking', 'Shanghai Ranking', 'Center for World University Rankings')     GROUP BY s.id ) AS criteria_counts;
SELECT AVG(num_students) AS average_students FROM university_year WHERE year = 2012;
SELECT score  FROM university_ranking_year  WHERE university_id = 68 AND year = 2015;
SELECT id FROM country WHERE country_name = 'Cyprus';
SELECT university_id  FROM university_year  WHERE pct_international_students = (SELECT MAX(pct_international_students) FROM university_year);
SELECT criteria_name FROM ranking_criteria WHERE id = 13;
SELECT AVG(score) AS average_score FROM university_ranking_year WHERE year = 2012;
SELECT SUM((pct_female_students * num_students) / 100) AS total_female_students FROM university_year WHERE university_id = 40 AND year BETWEEN 2011 AND 2013;
SELECT AVG(score) AS average_score FROM university_ranking_year WHERE university_id = 79 AND year BETWEEN 2013 AND 2015;
SELECT student_staff_ratio FROM university_year WHERE university_id = 35;
SELECT ur.score FROM university_year uy JOIN university_ranking_year ur ON uy.university_id = ur.university_id WHERE uy.year = 2011 AND uy.num_students = (     SELECT MAX(num_students)     FROM university_year     WHERE year = 2011 );
SELECT rc.criteria_name FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE u.university_name = 'Harvard University' AND ur.score = 100;
SELECT university.id, university.university_name  FROM university  JOIN country ON university.country_id = country.id  WHERE country.country_name = 'Turkey';
SELECT COUNT(*)  FROM ranking_criteria  WHERE ranking_system_id = (SELECT id FROM ranking_system WHERE system_name = 'Shanghai Ranking');
SELECT u.university_name, ur.score  FROM university u  JOIN university_ranking_year ur ON u.id = ur.university_id  WHERE u.id = 124;
SELECT DIVIDE(MULTIPLY(num_students, pct_female_students), 100) AS female_students FROM university_year JOIN university ON university_year.university_id = university.id WHERE university.university_name = 'University of Pennsylvania' AND university_year.year = 2011;
SELECT u.university_name FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id WHERE ur.score < 50;
SELECT COUNT(*)  FROM university  WHERE country_id = (SELECT id FROM country WHERE country_name = 'Japan');
SELECT university_name  FROM university  JOIN university_year ON university.id = university_year.university_id  ORDER BY num_students - (num_students * pct_female_students / 100) DESC  LIMIT 1;
SELECT DISTINCT c.country_name FROM country c JOIN university u ON c.id = u.country_id JOIN university_ranking_year ur ON u.id = ur.university_id WHERE ur.year = 2016 AND ur.score < 70;
SELECT num_students - (num_students * (100 - pct_female_students) / 100) AS male_students FROM university_year JOIN university ON university.id = university_year.university_id WHERE university.university_name = 'Emory University' AND university_year.year = 2011;
SELECT c.country_name  FROM university u  JOIN country c ON u.country_id = c.id  WHERE u.university_name = 'Johns Hopkins University';
SELECT university_name  FROM university  JOIN university_year ON university.id = university_year.university_id  WHERE num_students BETWEEN 400 AND 1000;
SELECT year  FROM university_ranking_year  WHERE university_id = (SELECT id FROM university WHERE university_name = 'Brown University')  ORDER BY score DESC  LIMIT 1;
SELECT AVG(ur.score) AS average_score FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id WHERE u.university_name = 'Emory University' AND ur.year BETWEEN 2011 AND 2016;
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2015 ORDER BY uy.num_students DESC LIMIT 1;
SELECT c.country_name, (u.num_students * u.pct_female_students / 100) AS num_female_students FROM university u JOIN country c ON u.country_id = c.id WHERE u.id = 23 AND u.year = 2011;
SELECT COUNT(DISTINCT university_id)  FROM university_ranking_year  WHERE score = 40  AND ranking_criteria_id IN (     SELECT id      FROM ranking_criteria      WHERE criteria_name = 'Teaching' );
SELECT      DIVIDE(SUM(DIVIDE(MULTIPLY(u.num_students, u.pct_female_students), 100)), SUM(u.num_students)) AS percentage_female_students FROM      university_year u JOIN      university un ON u.university_id = un.id JOIN      country c ON un.country_id = c.id WHERE      c.country_name = 'United States of America' AND u.year = 2016;
SELECT      SUM(num_students) - SUM(DIVIDE(MULTIPLY(num_students, pct_international_students), 100)) AS difference FROM      university_year  WHERE      university_id = (SELECT id FROM university WHERE university_name = 'University of Tokyo')      AND year BETWEEN 2011 AND 2014;
SELECT u.university_name FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id WHERE ur.year = 2015 AND ur.score < (SELECT AVG(score) * 0.28 FROM university_ranking_year WHERE year = 2015);
SELECT SUM(units)  FROM sales_in_weather  WHERE store_nbr = 1 AND item_nbr = 9 AND date = '2012-01-01';
SELECT SUM(units) AS total_units FROM sales_in_weather WHERE store_nbr = 1 AND item_nbr = 9 AND SUBSTR(date, 1, 4) = '2012' AND SUBSTR(date, 6, 2) = '01';
SELECT item_nbr  FROM sales_in_weather  WHERE date = '2012-01-01' AND store_nbr = 1  ORDER BY units DESC  LIMIT 1;
SELECT (tmax - tmin) AS temperature_range FROM weather WHERE station_nbr = 1 AND date = '2012-01-01';
SELECT w.date FROM weather w WHERE w.station_nbr = 2 AND w.depart > 0;
SELECT      date,      MAX(avgspeed) AS max_wind_speed FROM      weather WHERE      station_nbr = 1 AND      date IN ('2012-01-01', '2012-01-02') GROUP BY      date ORDER BY      max_wind_speed DESC LIMIT 1;
SELECT SUM(s.units) AS total_units FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.item_nbr = 5    AND s.store_nbr = 3    AND SUBSTR(s.date, 1, 4) = '2012'    AND w.depart < 0;
SELECT SUM(s.units) AS total_units FROM sales_in_weather s JOIN weather w ON s.date = w.date JOIN relation r ON s.store_nbr = r.store_nbr AND r.station_nbr = w.station_nbr WHERE s.item_nbr = 5    AND s.store_nbr = 3    AND w.tmax = (SELECT MAX(tmax)                  FROM weather                  WHERE SUBSTR(date, 1, 4) = '2012')   AND SUBSTR(s.date, 1, 4) = '2012';
SELECT w.dewpoint FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.item_nbr = 5 AND s.store_nbr = 3 AND SUBSTR(s.date, 1, 4) = '2012' ORDER BY s.units DESC LIMIT 1;
SELECT COUNT(DISTINCT sw.date) AS days_count FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE w.tmax > 90 AND sw.item_nbr = 5 AND sw.store_nbr = 3 AND sw.units > 100;
SELECT SUM(s.units) AS total_units FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.item_nbr = 5 AND s.store_nbr = 3 AND (w.tmax - w.tmin) = (     SELECT MAX(tmax - tmin)     FROM weather )
SELECT ws.date, MAX(ws.tmax - ws.tmin) AS max_temp_range FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather ws ON r.station_nbr = ws.station_nbr AND s.date = ws.date WHERE s.units > 100 AND s.item_nbr = 5 AND s.store_nbr = 3 GROUP BY ws.date ORDER BY max_temp_range DESC LIMIT 1;
SELECT SUM(s.units) AS total_units FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.item_nbr = 5 AND s.store_nbr = 3 AND w.preciptotal > 0.05;
SELECT s.date FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.item_nbr = 5 AND s.store_nbr = 3 AND s.units > 100 AND w.avgspeed > 10;
SELECT SUM(s.units) AS total_units FROM sales_in_weather s JOIN weather w ON s.date = w.date JOIN relation r ON s.store_nbr = r.store_nbr WHERE r.store_nbr = 3    AND SUBSTRING(s.date, 1, 4) = '2012'   AND w.tmax = (SELECT MAX(tmax)                  FROM weather                  JOIN relation ON weather.station_nbr = relation.station_nbr                  JOIN sales_in_weather ON sales_in_weather.date = weather.date                  WHERE relation.store_nbr = 3                    AND SUBSTRING(sales_in_weather.date, 1, 4) = '2012')
SELECT      (SUM(CASE WHEN s.store_nbr = 5 THEN s.units ELSE 0 END) -       SUM(CASE WHEN s.store_nbr = 10 THEN s.units ELSE 0 END)) AS units_difference FROM      sales_in_weather s JOIN      weather w ON s.date = w.date JOIN      relation r ON s.store_nbr = r.store_nbr WHERE      s.item_nbr = 16      AND w.tmax = (SELECT MAX(tmax)                    FROM weather                    WHERE SUBSTR(date, 1, 4) = '2012')     AND SUBSTR(s.date, 1, 4) = '2012'     AND (s.store_nbr = 5 OR s.store_nbr = 10);
SELECT item_nbr FROM sales_in_weather WHERE store_nbr = 3 AND date IN (     SELECT date     FROM weather     WHERE station_nbr IN (         SELECT station_nbr         FROM relation         WHERE store_nbr = 3     ) AND tmax = (         SELECT MAX(tmax)         FROM weather         WHERE station_nbr IN (             SELECT station_nbr             FROM relation             WHERE store_nbr = 3         ) AND SUBSTRING(date, 1, 4) = '2012'     ) ) AND SUBSTRING(date, 1, 4) = '2012' GROUP BY item_nbr ORDER BY SUM(units) DESC LIMIT 1;
SELECT COUNT(*) AS no_sales_items FROM sales_in_weather WHERE store_nbr = 3 AND units = 0 AND date = (     SELECT date     FROM weather     WHERE SUBSTR(date, 1, 4) = '2012'     ORDER BY tmax DESC     LIMIT 1 );
SELECT AVG(total_units) AS average_units FROM (     SELECT SUM(s.units) AS total_units, s.date     FROM sales_in_weather s     JOIN relation r ON s.store_nbr = r.store_nbr     JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date     WHERE s.item_nbr = 5 AND s.store_nbr = 3 AND w.tmax > 90     GROUP BY s.date ) AS daily_sales;
SELECT      (SUM(CASE WHEN siw.item_nbr = 5 THEN siw.units ELSE 0 END) * 100.0 / SUM(siw.units)) AS percentage FROM      sales_in_weather siw JOIN      weather w ON siw.date = w.date JOIN      relation r ON siw.store_nbr = r.store_nbr WHERE      siw.store_nbr = 3      AND SUBSTR(siw.date, 1, 4) = '2012'      AND w.tmax = (SELECT MAX(tmax) FROM weather WHERE SUBSTR(date, 1, 4) = '2012');
SELECT item_nbr  FROM sales_in_weather  WHERE store_nbr = 1 AND date = '2012-01-01'  ORDER BY units DESC  LIMIT 1;
SELECT SUM(units)  FROM sales_in_weather  WHERE item_nbr = 9 AND store_nbr = 11 AND date = '2012-12-07';
SELECT tavg FROM weather WHERE station_nbr = 20 AND date = '2014-10-17';
SELECT resultspeed  FROM weather  WHERE station_nbr = 9 AND date = '2014-01-15';
SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1;
SELECT station_nbr FROM relation WHERE store_nbr = 20;
SELECT (w.tmax - w.tmin) AS temperature_range FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 7 AND w.date = '2014-04-28';
SELECT COUNT(DISTINCT r.store_nbr) AS store_count FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE w.depart = (SELECT MAX(depart) FROM weather);
SELECT w.dewpoint  FROM weather w  JOIN relation r ON w.station_nbr = r.station_nbr  WHERE r.store_nbr = 15 AND w.date = '2012-02-18';
SELECT w.wetbulb  FROM weather w  JOIN relation r ON w.station_nbr = r.station_nbr  WHERE r.store_nbr = 6 AND w.date = '2012-02-15';
SELECT COUNT(DISTINCT r.store_nbr) AS number_of_stores FROM relation r JOIN weather w ON r.station_nbr = w.station_nbr WHERE w.avgspeed = (SELECT MAX(avgspeed) FROM weather);
SELECT w.tmax  FROM weather w  JOIN relation r ON w.station_nbr = r.station_nbr  WHERE r.store_nbr = 21 AND w.date = '2012-11-09';
SELECT w.sunrise  FROM weather w  JOIN relation r ON w.station_nbr = r.station_nbr  WHERE r.store_nbr = 30 AND w.date = '2014-02-21';
SELECT COUNT(DISTINCT r.store_nbr) AS number_of_stores FROM relation r JOIN weather w ON r.station_nbr = w.station_nbr WHERE w.snowfall = (SELECT MAX(snowfall) FROM weather);
SELECT w.codesum FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 2 AND w.date = '2013-02-12';
SELECT w.sealevel  FROM weather w  JOIN relation r ON w.station_nbr = r.station_nbr  WHERE r.store_nbr = 19 AND w.date = '2013-02-24';
SELECT SUM(w.preciptotal) AS total_precipitation FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 2 AND w.date = '2012-12-25';
SELECT w.stnpressure  FROM weather w  JOIN relation r ON w.station_nbr = r.station_nbr  WHERE r.store_nbr = 12 AND w.date = '2012-05-15';
SELECT      (SUM(CASE WHEN s.store_nbr = 10 THEN s.units ELSE 0 END) / SUM(s.units)) * 100 AS percentage FROM      sales_in_weather s JOIN      relation r ON s.store_nbr = r.store_nbr JOIN      weather w ON r.station_nbr = w.station_nbr WHERE      s.date = '2014-10-31' AND w.date = '2014-10-31';
SELECT      ((w2.tavg - w1.tavg) / w1.tavg) * 100 AS increase_percentage FROM      relation r JOIN      weather w1 ON r.station_nbr = w1.station_nbr AND w1.date = '2012-02-02' JOIN      weather w2 ON r.station_nbr = w2.station_nbr AND w2.date = '2012-02-03' WHERE      r.store_nbr = 9;
SELECT item_nbr  FROM sales_in_weather  WHERE store_nbr = 1 AND date = '2012-01-01'  ORDER BY units DESC  LIMIT 1;
SELECT COUNT(store_nbr)  FROM relation  WHERE station_nbr = 12;
SELECT COUNT(DISTINCT item_nbr)  FROM sales_in_weather  WHERE store_nbr = 2 AND date = '2012-01-01' AND units = 0;
SELECT date, MAX(tmax) AS hottest_temp FROM weather WHERE station_nbr = 1 AND SUBSTR(date, 1, 4) BETWEEN '2012' AND '2014' GROUP BY date ORDER BY hottest_temp DESC LIMIT 1;
SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1;
SELECT r.station_nbr FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE w.depart < 0   AND SUBSTRING(w.date, 1, 4) = '2014'   AND SUBSTRING(w.date, 6, 2) = '03' GROUP BY r.station_nbr ORDER BY COUNT(w.date) DESC LIMIT 1;
SELECT r.station_nbr FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr WHERE s.item_nbr = 9 GROUP BY r.station_nbr ORDER BY SUM(s.units) DESC LIMIT 1;
SELECT COUNT(DISTINCT r.store_nbr) AS store_count FROM relation r JOIN weather w ON r.station_nbr = w.station_nbr WHERE w.avgspeed = (SELECT MAX(avgspeed) FROM weather);
SELECT DISTINCT s.store_nbr FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr WHERE r.station_nbr = 14   AND s.item_nbr = 44   AND s.units >= 300   AND SUBSTRING(s.date, 1, 7) = '2014-02';
SELECT item_nbr, SUM(units) AS total_units FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE w.codesum = 'RA'    AND SUBSTR(s.date, 1, 7) = '2013-06'    AND w.station_nbr = 9 GROUP BY item_nbr ORDER BY total_units DESC LIMIT 1;
SELECT r.station_nbr FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr WHERE s.item_nbr = 5 GROUP BY r.station_nbr ORDER BY SUM(s.units) DESC LIMIT 1;
SELECT MIN(w.sunrise) AS earliest_sunrise FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE SUBSTR(w.date, 1, 7) = '2012-02' GROUP BY r.station_nbr HAVING COUNT(r.store_nbr) <= 1;
SELECT store_nbr, SUM(units) AS total_units FROM sales_in_weather JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr WHERE relation.station_nbr = 17    AND SUBSTR(sales_in_weather.date, 1, 7) = '2012-10'    AND sales_in_weather.item_nbr = 45 GROUP BY store_nbr ORDER BY total_units DESC LIMIT 1;
SELECT DISTINCT siw.item_nbr FROM sales_in_weather siw JOIN relation r ON siw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr WHERE w.snowfall = (SELECT MAX(snowfall) FROM weather);
SELECT r.station_nbr, MAX(s.units) AS max_units FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr GROUP BY r.station_nbr ORDER BY max_units DESC LIMIT 3;
SELECT COUNT(DISTINCT r.store_nbr)  FROM relation r  JOIN weather w ON r.station_nbr = w.station_nbr  WHERE w.heat = (SELECT MAX(heat) FROM weather);
SELECT w.tmin  FROM weather w  JOIN relation r ON w.station_nbr = r.station_nbr  WHERE r.store_nbr = 29 AND w.date = '2014-02-08';
SELECT COUNT(DISTINCT r.station_nbr)  FROM relation r JOIN weather w ON r.station_nbr = w.station_nbr WHERE w.date = '2014-02-18'  AND w.stnpressure < 30  AND r.station_nbr IN (     SELECT station_nbr      FROM relation      GROUP BY station_nbr      HAVING COUNT(store_nbr) = 3 );
SELECT r.station_nbr, AVG(w.tmax) AS avg_max_temp FROM relation r JOIN weather w ON r.station_nbr = w.station_nbr WHERE w.date LIKE '2012-02%' GROUP BY r.station_nbr HAVING COUNT(DISTINCT r.store_nbr) = (     SELECT MAX(store_count)     FROM (         SELECT COUNT(DISTINCT store_nbr) AS store_count         FROM relation         GROUP BY station_nbr     ) AS store_counts )
SELECT      (SUM(CASE WHEN s.store_nbr = 10 THEN s.units ELSE 0 END) * 100.0 / SUM(s.units)) AS percentage FROM      sales_in_weather s JOIN      relation r ON s.store_nbr = r.store_nbr WHERE      r.station_nbr = 12      AND s.item_nbr = 5      AND SUBSTR(s.date, 1, 4) = '2014';
SELECT MAX(avgspeed) AS maximum_average_speed FROM weather;
SELECT COUNT(DISTINCT w.date) AS days_with_snowfall_over_5_inches FROM weather w WHERE w.snowfall > 5;
SELECT COUNT(*)  FROM weather  WHERE sunrise < TIME('05:00:00');
SELECT MIN(dewpoint) AS minimum_dew_point FROM weather;
SELECT MAX(tmax) AS max_temperature, MIN(tmin) AS min_temperature  FROM weather  WHERE station_nbr = 1 AND date = '2012-01-15';
SELECT COUNT(DISTINCT r.station_nbr) AS station_count FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr WHERE s.item_nbr = 5 AND SUBSTRING(s.date, 1, 7) = '2014-01';
SELECT MIN(w.tmin) AS lowest_minimum_temperature FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr WHERE s.store_nbr = 16 AND SUBSTRING(w.date, 1, 7) = '2012-01';
SELECT SUM(s.units) AS total_units_sold FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.item_nbr = 7 AND s.store_nbr = 7 AND w.snowfall < 5;
SELECT SUM(s.units) AS total_units_sold FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.store_nbr = 9 AND w.snowfall > 0 AND w.snowfall IS NOT NULL;
SELECT r.station_nbr, s.item_nbr FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr WHERE s.store_nbr = 17;
SELECT DISTINCT sw.date FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr WHERE sw.store_nbr = 35 AND w.codesum LIKE '%HZ%';
SELECT w.sealevel, w.avgspeed FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr WHERE s.store_nbr IN (3, 4) GROUP BY w.sealevel, w.avgspeed;
SELECT item_nbr, MAX(units) AS max_units FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.store_nbr = 1 AND w.codesum LIKE '%RA%' GROUP BY item_nbr ORDER BY max_units DESC LIMIT 1;
SELECT MAX(w.tmax) / MIN(w.tmin) AS temperature_ratio FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.store_nbr = 11;
SELECT      (SUM(CASE WHEN r.station_nbr = 1 THEN s.units ELSE 0 END) -       SUM(CASE WHEN r.station_nbr = 2 THEN s.units ELSE 0 END)) AS units_difference FROM      sales_in_weather s JOIN      relation r ON s.store_nbr = r.store_nbr WHERE      SUBSTRING(s.date, 1, 4) = '2012';
SELECT      ABS(         (SELECT tavg FROM weather w           JOIN relation r ON w.station_nbr = r.station_nbr           WHERE r.store_nbr = 18 AND w.date = '2022-09-16') -          (SELECT tavg FROM weather w           JOIN relation r ON w.station_nbr = r.station_nbr           WHERE r.store_nbr = 19 AND w.date = '2022-09-16')     ) AS average_temperature_difference;
SELECT SUM(s.units) AS total_units FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.item_nbr = 1 AND w.tavg = 83;
SELECT      SUM(CASE WHEN w.sunset = (SELECT MIN(sunset) FROM weather) THEN s.units ELSE 0 END) -     SUM(CASE WHEN w.sunset = (SELECT MAX(sunset) FROM weather) THEN s.units ELSE 0 END) AS unit_difference FROM      sales_in_weather s JOIN      relation r ON s.store_nbr = r.store_nbr JOIN      weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE      s.item_nbr = 1;
SELECT SUM(s.units) AS total_units FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.item_nbr = 10 AND w.tavg < (SELECT AVG(tavg) FROM weather);
SELECT      (SUM(CASE WHEN r.store_nbr = 6 THEN w.tavg END) / COUNT(CASE WHEN r.store_nbr = 6 THEN w.date END)) -      (SUM(CASE WHEN r.store_nbr = 7 THEN w.tavg END) / COUNT(CASE WHEN r.store_nbr = 7 THEN w.date END)) AS avg_temp_difference FROM      sales_in_weather s JOIN      relation r ON s.store_nbr = r.store_nbr JOIN      weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE      SUBSTR(s.date, 1, 7) = '2012-05' AND (r.store_nbr = 6 OR r.store_nbr = 7);
SELECT Country  FROM language  WHERE Name = 'Polish'  ORDER BY Percentage ASC  LIMIT 1;
SELECT Country  FROM ethnicGroup  WHERE Name = 'African' AND Percentage > 90;
SELECT e.Name AS EthnicGroup, e.Percentage AS EthnicPercentage, l.Name AS Language, l.Percentage AS LanguagePercentage FROM ethnicGroup e JOIN language l ON e.Country = l.Country WHERE e.Country = 'Singapore';
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM country) AS Independence_Percentage FROM politics WHERE Independence = 'Yes' AND Government = 'Republic' AND YEAR(Independence_Date) > 1970;
SELECT e.GDP, p.Government  FROM economy e  JOIN politics p ON e.Country = p.Country  WHERE e.Country = 'Bosnia and Herzegovina';
SELECT country.Name, population.Population FROM country JOIN population ON country.Name = population.Country WHERE population.Population_Growth > 2 AND population.Infant_Mortality < 5;
SELECT e.Name, e.Percentage FROM ethnicGroup e JOIN country c ON e.Country = c.Name WHERE c.Population > 10000000 AND e.Percentage = (     SELECT MAX(Percentage)     FROM ethnicGroup     WHERE Country = c.Name );
SELECT c.Name AS Country, eg.Name AS EthnicGroup, eg.Percentage FROM country c JOIN ethnicGroup eg ON c.Name = eg.Country WHERE eg.Percentage = (     SELECT MAX(ethnic_count)     FROM (         SELECT Country, COUNT(*) AS ethnic_count         FROM ethnicGroup         GROUP BY Country     ) AS counts ) ORDER BY eg.Percentage DESC;
SELECT country.Name  FROM country  JOIN ethnicGroup ON country.Name = ethnicGroup.Country  WHERE ethnicGroup.Percentage = 100 AND ethnicGroup.Name = 'Africans';
SELECT p.Infant_Mortality FROM population p JOIN ethnicGroup e ON p.Country = e.Country WHERE e.Name = 'Amerindian' ORDER BY e.Percentage ASC LIMIT 1;
SELECT economy.Agriculture / economy.GDP * 100 AS Agriculture_Percentage FROM country JOIN economy ON country.Name = economy.Country WHERE country.Area > 600000;
SELECT p.Country FROM politics p JOIN population pop ON p.Country = pop.Country WHERE p.Government = 'Republic' ORDER BY pop.Population_Growth DESC LIMIT 1;
SELECT Independence FROM politics WHERE Country = 'Bulgaria';
SELECT e.Country,         (e.Percentage * c.Population) / 100 AS Arab_Population FROM ethnicGroup e JOIN country c ON e.Country = c.Name WHERE e.Name = 'Arab';
SELECT (e.Percentage * c.Population) AS African_Population FROM ethnicGroup e JOIN country c ON e.Country = c.Name WHERE e.Name = 'African' AND c.Name = 'Turks and Caicos Islands';
SELECT      p.Population_Growth * c.Population AS Growth_Population FROM      population p JOIN      country c ON p.Country = c.Name WHERE      p.Infant_Mortality = (SELECT MIN(Infant_Mortality) FROM population);
SELECT Capital, Population  FROM country  WHERE GDP > 400000;
SELECT Economy.Service * Economy.GDP AS Service_GDP FROM economy AS Economy JOIN country AS Country ON Economy.Country = Country.Name WHERE Country.Name = 'Brazil';
SELECT Country, Population_Growth  FROM population  WHERE Infant_Mortality = (SELECT MAX(Infant_Mortality) FROM population);
SELECT Country, Population, Population_Growth  FROM population  WHERE Population_Growth < 0;
SELECT country.Name, population.Infant_Mortality FROM country JOIN population ON country.Name = population.Country WHERE country.Area BETWEEN 500000 AND 1000000;
SELECT country.Name, economy.GDP FROM country JOIN population ON country.Name = population.Country JOIN economy ON country.Name = economy.Country WHERE population.Population_Growth > 3;
SELECT Infant_Mortality FROM population WHERE Country = 'Ethiopia';
SELECT GDP * Industry AS Industry_GDP FROM economy WHERE Country = 'Singapore';
SELECT GDP, Agriculture  FROM economy  WHERE Country = (SELECT Name                   FROM country                   ORDER BY Area                   LIMIT 1);
SELECT Country, Percentage  FROM ethnicGroup  WHERE Name = 'Albanian'  ORDER BY Percentage DESC  LIMIT 1;
SELECT COUNT(*)  FROM country  WHERE Population > 10000000  AND Name IN (SELECT Country FROM ethnicGroup WHERE Name = 'African');
SELECT Country FROM ethnicGroup GROUP BY Country HAVING COUNT(Name) > 5;
SELECT Country, GDP  FROM economy  ORDER BY GDP DESC  LIMIT 1;
SELECT COUNT(*)  FROM country c  JOIN economy e ON c.Name = e.Country  WHERE c.Population > 10000000 AND e.GDP > 500000;
SELECT city.Name  FROM city  JOIN economy ON city.Country = economy.Country  WHERE economy.Inflation < 2 AND city.Name = (SELECT country.Capital FROM country WHERE country.Name = city.Country);
SELECT Country FROM economy ORDER BY Inflation ASC LIMIT 1;
SELECT COUNT(*)  FROM country  WHERE Area > 8000000  AND Name IN (     SELECT Country      FROM economy      WHERE Agriculture < 50 );
SELECT COUNT(DISTINCT l.City) AS CityCount FROM located l JOIN lake la ON l.Lake = la.Name WHERE la.Type = 'Salt Lake';
SELECT l.Depth  FROM lake l  JOIN located loc ON l.Name = loc.Lake  WHERE loc.Province = 'Albania';
SELECT c.Name AS City FROM lake l JOIN located loc ON l.Name = loc.Lake JOIN city c ON loc.City = c.Name WHERE l.Altitude = (SELECT MAX(Altitude) FROM lake);
SELECT COUNT(*)  FROM lake  WHERE Area > 1000000 AND Name IN (SELECT Lake FROM located WHERE Province = 'Canary Islands');
SELECT Country, COUNT(Name) AS LanguageCount FROM language GROUP BY Country ORDER BY LanguageCount DESC LIMIT 1;
SELECT country.Capital  FROM country  JOIN language ON country.Name = language.Country  WHERE language.Name = 'Armenian' AND language.Percentage > 90;
SELECT COUNT(DISTINCT Country)  FROM language  WHERE Country IN (SELECT Name FROM country WHERE Population < 1000000)  GROUP BY Country  HAVING COUNT(Name) > 2;
SELECT COUNT(*)  FROM organization o  JOIN country c ON o.Country = c.Name  WHERE c.Population < 1000000;
SELECT COUNT(*)  FROM organization o  JOIN economy e ON o.Country = e.Country  WHERE o.Established > '1999-01-01' AND e.GDP < 500000;
SELECT COUNT(DISTINCT im.Country)  FROM isMember im  JOIN economy e ON im.Country = e.Country  GROUP BY im.Country  HAVING COUNT(im.Organization) > 3 AND e.Inflation > 5;
SELECT COUNT(*)  FROM organization  WHERE Country = (     SELECT Country      FROM ethnicGroup      GROUP BY Country      ORDER BY COUNT(*) DESC      LIMIT 1 );
SELECT DISTINCT o.Name FROM organization o JOIN language l ON o.Country = l.Country WHERE l.Name = 'Dutch';
SELECT COUNT(*)  FROM organization  WHERE Country IN (     SELECT Country      FROM language      WHERE Name = 'Bosnian' );
SELECT MAX(Infant_Mortality) AS Highest_Infant_Mortality FROM population p JOIN economy e ON p.Country = e.Country WHERE e.Inflation < 3;
SELECT COUNT(*)  FROM economy e  JOIN population p ON e.Country = p.Country  WHERE e.GDP > 1000000 AND p.Population_Growth > 3;
SELECT Country, (GDP / Population) AS GDP_per_capita FROM economy e JOIN population p ON e.Country = p.Country ORDER BY GDP_per_capita DESC LIMIT 1;
SELECT c.Name AS Country,         (SUM(l.Area) / c.Area) * 100 AS Lake_Area_Coverage FROM country c JOIN lake l ON c.Name = l.River GROUP BY c.Name ORDER BY Lake_Area_Coverage DESC LIMIT 1;
SELECT AVG(p.Population_Growth) AS Average_Population_Growth FROM population p JOIN (     SELECT Country     FROM language     GROUP BY Country     HAVING COUNT(Name) > 3 ) AS lang_countries ON p.Country = lang_countries.Country;
SELECT Country  FROM economy  WHERE Inflation > 1.3 * (SELECT AVG(Inflation) FROM economy);
SELECT Country FROM city WHERE Name = 'Baghdad';
SELECT Name, Percentage  FROM religion  WHERE Country = 'Martinique'  ORDER BY Percentage DESC  LIMIT 1;
SELECT Country FROM religion WHERE Name = 'Christian' AND Percentage = 41;
SELECT DISTINCT country.Name FROM river JOIN geo_river ON river.Name = geo_river.River JOIN country ON geo_river.Country = country.Code WHERE river.Name = 'Detroit River';
SELECT Country1, Country2  FROM borders  ORDER BY Length DESC  LIMIT 1;
SELECT Country1 AS Country FROM borders GROUP BY Country1 ORDER BY COUNT(Country2) DESC LIMIT 1;
SELECT Country FROM geo_mountain WHERE Mountain = 'Cerro Chirripo';
SELECT COUNT(*)  FROM geo_mountain  WHERE Country = 'Indonesia';
SELECT COUNT(*) AS MountainCount  FROM geo_mountain  WHERE Country = 'Japan';
SELECT i.Latitude  FROM island i  JOIN mountainOnIsland moi ON i.Name = moi.Island  JOIN mountain m ON moi.Mountain = m.Name  WHERE m.Name = 'Andrinjitra';
SELECT c1.Code, c2.Code FROM mountain m JOIN geo_mountain gm ON m.Name = gm.Mountain JOIN country c1 ON gm.Country = c1.Name JOIN borders b ON b.Country1 = c1.Name OR b.Country2 = c1.Name JOIN country c2 ON (b.Country1 = c2.Name OR b.Country2 = c2.Name) AND c1.Name <> c2.Name WHERE m.Height = (SELECT DISTINCT Height FROM mountain ORDER BY Height DESC LIMIT 1 OFFSET 1);
SELECT (c.Area / SUM(co.Area) * 100) AS Egypt_Area_Percentage FROM country c JOIN encompasses e ON c.Name = e.Country JOIN continent co ON e.Continent = co.Name WHERE c.Name = 'Egypt' AND co.Name = 'Asia';
SELECT (c.Area / SUM(co.Area) * 100) AS Egypt_Area_Percentage FROM country c JOIN encompasses e ON c.Name = e.Country JOIN continent co ON e.Continent = co.Name WHERE c.Name = 'Egypt' AND co.Name = 'Asia';
SELECT Name  FROM city  WHERE Country = 'Japan'  ORDER BY Population DESC  LIMIT 1;
SELECT Capital FROM country WHERE Name = (SELECT Country FROM city WHERE Name = 'Olsztyn');
SELECT Province  FROM geo_mountain  WHERE Height = (SELECT MAX(Height) FROM geo_mountain);
SELECT Independence FROM politics WHERE Country = 'Uganda';
SELECT Government FROM politics WHERE Country = 'Iran';
SELECT Name FROM country WHERE Name = 'Bermuda';
SELECT c.Capital  FROM country c  JOIN ethnicGroup e ON c.Name = e.Country  WHERE e.Name = 'Malay'  ORDER BY e.Percentage DESC  LIMIT 1;
SELECT Name, Percentage  FROM ethnicGroup  WHERE Country = (SELECT Name                   FROM country                   ORDER BY Population DESC                   LIMIT 1 OFFSET 2)  ORDER BY Percentage DESC  LIMIT 1;
SELECT country.Name  FROM country  JOIN city ON city.Country = country.Name  WHERE city.Population = 114339;
SELECT COUNT(*)  FROM river r  JOIN sea s ON r.Sea = s.Name  WHERE s.Depth = 459;
SELECT Area FROM country WHERE Name = (SELECT Country FROM politics WHERE Independence = '1921-03-13');
SELECT (c.Population / c.Area) AS PopulationDensity FROM country c JOIN city ci ON c.Name = ci.Country WHERE ci.Name = 'Petropavl';
SELECT      (SELECT Percentage FROM language WHERE Country = 'United Kingdom' AND Name = 'English') -     (SELECT Percentage FROM language WHERE Country = 'United Kingdom' AND Name = 'Scottish') AS Difference
SELECT c.Name FROM city c JOIN country co ON c.Country = co.Name WHERE co.Population / co.Area = (     SELECT DISTINCT Population / Area     FROM country     ORDER BY Population / Area DESC     LIMIT 1 OFFSET 11 ) ORDER BY c.Population DESC LIMIT 1;
SELECT      (SELECT MAX(Length) FROM borders WHERE Country1 = 'United States' OR Country2 = 'United States') /      (SELECT MIN(Length) FROM borders WHERE Country1 = 'United States' OR Country2 = 'United States') AS times_longer;
SELECT DISTINCT c.Capital FROM country c JOIN geo_mountain gm ON c.Name = gm.Country GROUP BY c.Name HAVING COUNT(gm.Mountain) > 4;
SELECT COUNT(*)  FROM geo_mountain  WHERE Country = (SELECT Name                   FROM country                   ORDER BY Population DESC                   LIMIT 1);
SELECT COUNT(DISTINCT c.Name)  FROM economy e  JOIN country c ON e.Country = c.Name  LEFT JOIN geo_mountain gm ON c.Name = gm.Country  WHERE e.Agriculture > 40 AND (SELECT COUNT(*) FROM geo_mountain WHERE Country = c.Name) < 2;
SELECT m.Name FROM mountain m JOIN economy e ON m.Country = e.Country WHERE e.Inflation = (SELECT MIN(Inflation) FROM economy);
SELECT MAX(desert_count) AS max_deserts FROM (     SELECT p.Country, COUNT(gd.Desert) AS desert_count     FROM politics p     JOIN geo_desert gd ON p.Country = gd.Country     WHERE p.Independence = 'Yes' AND p.Government = 'Republic'     GROUP BY p.Country ) AS desert_counts;
SELECT d.Name FROM desert d JOIN country c ON d.Country = c.Name WHERE c.Population > 100000 AND c.Area < 500000;
SELECT COUNT(*)  FROM desert d  WHERE d.Country IN (     SELECT l.Country      FROM language l      WHERE l.Name = 'Armenian' AND l.Percentage > 90 );
SELECT m.Name, m.Height, c.Name AS Country FROM mountain m JOIN country c ON m.Country = c.Name JOIN politics p ON c.Name = p.Country WHERE p.Independence = 'Yes' ORDER BY m.Height DESC LIMIT 1;
SELECT COUNT(*)  FROM mountain  WHERE Type = 'Volcanic'  AND Name IN (     SELECT Name      FROM country      WHERE Population <= 5000000 );
SELECT COUNT(DISTINCT c.Name)  FROM economy e  JOIN geo_mountain m ON e.Country = m.Country  JOIN country c ON e.Country = c.Name  WHERE e.GDP > 1000000 AND m.Height > 1000;
SELECT MAX(b.Length) AS Greatest_Border_Length FROM borders b JOIN politics p1 ON b.Country1 = p1.Country AND p1.Independent = 'Yes' JOIN politics p2 ON b.Country2 = p2.Country AND p2.Independent = 'Yes';
SELECT COUNT(DISTINCT b.Country1) AS RepublicBorderCount FROM politics p JOIN borders b ON p.Country = b.Country1 OR p.Country = b.Country2 WHERE p.Government = 'Republic' AND b.Length > 200;
SELECT Country1, Country2, Length FROM borders WHERE Length = (SELECT MIN(Length) FROM borders);
SELECT AVG(GDP) AS Average_GDP FROM economy e JOIN encompasses en ON e.Country = en.Country WHERE en.Continent = 'Europe';
SELECT COUNT(*)  FROM geo_mountain gm  JOIN encompasses e ON gm.Country = e.Country  WHERE e.Continent = 'Africa';
SELECT d.Name, d.Area FROM desert d JOIN encompasses e ON d.Country = e.Country WHERE e.Continent = 'America' ORDER BY d.Area DESC LIMIT 1;
SELECT c.Name  FROM country c  JOIN encompasses e ON c.Name = e.Country  JOIN population p ON c.Name = p.Country  WHERE e.Continent = 'Europe' AND p.Population_Growth > 3;
SELECT COUNT(DISTINCT c.Name) AS CountryCount FROM country c JOIN politics p ON c.Name = p.Country JOIN encompasses e ON c.Name = e.Country WHERE e.Continent = 'Europe' AND p.Infant_Mortality > 100;
SELECT COUNT(DISTINCT l.Country)  FROM language l  JOIN population p ON l.Country = p.Country  WHERE l.Name = 'Bosnian' AND p.Population_Growth <= 0;
SELECT AVG(Agriculture / GDP * 100) AS Average_Agriculture_Percentage FROM economy e JOIN country c ON e.Country = c.Name JOIN encompasses en ON c.Name = en.Country WHERE en.Continent = 'Africa';
SELECT COUNT(*)  FROM economy e JOIN politics p ON e.Country = p.Country WHERE p.Independence = 'Yes' AND (e.GDP / (SELECT Population FROM country WHERE Name = e.Country)) > 5000;
SELECT AVG(e.Inflation) AS Average_Inflation FROM economy e JOIN encompasses en ON e.Country = en.Country JOIN continent c ON en.Continent = c.Name WHERE c.Area = (SELECT MAX(Area) FROM continent);
SELECT i.Name, i.Area FROM city c JOIN locatedOn lo ON c.Name = lo.City JOIN island i ON lo.Island = i.Name WHERE c.Name = 'Balikpapan';
SELECT c.Name, c.Population  FROM city c  JOIN locatedOn lo ON c.Name = lo.City  WHERE lo.Island = 'Sumatra';
SELECT i.Name, i.Longitude, i.Latitude FROM island i JOIN locatedOn lo ON i.Name = lo.Island JOIN city c ON lo.City = c.Name AND lo.Province = c.Province WHERE c.Province = 'South Yorkshire';
SELECT i.Name FROM island i JOIN islandIn ii ON i.Name = ii.Island JOIN located l ON ii.Island = l.City WHERE l.Province = 'Warwickshire' AND i.Area > (SELECT Area FROM island WHERE Name = (SELECT DISTINCT Island FROM located WHERE Province = 'Warwickshire'));
SELECT i.Name AS IslandName, l.City AS City FROM island i JOIN locatedOn lo ON i.Name = lo.Island JOIN city l ON lo.City = l.Name AND lo.Province = l.Province AND lo.Country = l.Country WHERE i.Area < 200;
SELECT p.Name AS Province, p.Capital  FROM city c  JOIN province p ON c.Province = p.Name  WHERE c.Name = 'Glenrothes';
SELECT city.Name, city.Population FROM city JOIN province ON city.Province = province.Name WHERE province.Population > 1000000;
SELECT island.Name AS Coral_Island, located.City, located.Province FROM island JOIN islandIn ON island.Name = islandIn.Island JOIN geo_sea ON islandIn.Sea = geo_sea.Name JOIN located ON located.Island = island.Name WHERE island.Type = 'Coral';
SELECT AVG(c.Population) AS AveragePopulation FROM city c JOIN located l ON c.Name = l.City AND c.Province = l.Province AND c.Country = l.Country JOIN geo_sea gs ON l.Sea = gs.Name WHERE gs.Name = 'Baltic Sea';
SELECT (c.Population / p.Population) * 100 AS Population_Percentage FROM city c JOIN province p ON c.Province = p.Name WHERE c.Name = 'Edmonton';
SELECT r.Name  FROM river r  JOIN geo_sea gs ON r.Sea = gs.Name  WHERE gs.Name = 'Black Sea';
SELECT l.Name AS LakeName, c.Name AS CityName FROM lake l JOIN located loc ON l.Name = loc.Lake JOIN city c ON loc.City = c.Name WHERE c.Province = 'Albania';
SELECT Name, Height  FROM mountain  WHERE Type = 'Himalaya'  ORDER BY Height DESC  LIMIT 1;
SELECT Name, Longitude, Latitude  FROM mountain  WHERE Type = 'Volcanic';
SELECT Name FROM mountain WHERE Height BETWEEN 2000 AND 4000 AND Type = 'Volcano';
SELECT r.Name FROM river r JOIN geo_sea gs ON r.Sea = gs.Name WHERE gs.Name = 'Mediterranean Sea' ORDER BY r.Length DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN Type != 'volcano' THEN 1 END) * 100.0 / COUNT(*)) AS Percent_Non_Volcanic FROM      mountain WHERE      Mountains = 'Andes';
SELECT DISTINCT c.Name AS City, c.Province FROM city c JOIN located l ON c.Name = l.City AND c.Province = l.Province AND c.Country = l.Country JOIN river r ON l.River = r.Name JOIN geo_sea gs ON r.Sea = gs.Name WHERE gs.Name = 'Atlantic Ocean';
SELECT r.Name, r.Length FROM river r JOIN located l ON r.Name = l.River WHERE l.City = 'Orleans';
SELECT m.Height, m.Longitude, m.Latitude FROM mountain m JOIN river r ON r.Mountains = m.Name WHERE r.Name = 'Lech';
SELECT r.Name AS River, m.Name AS Mountain FROM located l JOIN river r ON l.River = r.Name JOIN geo_source gs ON r.Name = gs.River JOIN mountain m ON gs.Country = m.Country WHERE l.Province = 'Lorraine';
SELECT m.Name, m.Height FROM geo_source gs JOIN river r ON gs.River = r.Name JOIN mountainOnIsland moi ON r.SourceLongitude = moi.Mountain JOIN mountain m ON moi.Mountain = m.Name WHERE r.Name = 'Blue Nile';
SELECT r.Name, r.Length  FROM river r  JOIN located l ON r.Name = l.River  WHERE l.City = 'Little Rock';
SELECT Name, Province  FROM river  WHERE Length > 1000;
SELECT Province, Country, Height  FROM geo_mountain  WHERE Mountain = 'Moldoveanu';
SELECT Name, Length FROM river WHERE Country = 'USA';
SELECT AVG(Height) AS Average_Height FROM mountain WHERE Country = 'Nepal';
SELECT MAX(Population) - MIN(Population) AS Population_Difference FROM city WHERE Country IN (     SELECT Country     FROM located     WHERE River = 'Seine' );
SELECT r.Name, r.Length FROM river r JOIN located l ON r.Name = l.River WHERE l.City = 'Belgrade';
SELECT Country  FROM language  WHERE Name = 'Spanish' AND Percentage = 100;
SELECT Country  FROM politics  WHERE Dependent = 'British Crown';
SELECT Name FROM river WHERE Country = 'Canada';
SELECT Country  FROM economy  ORDER BY Inflation DESC  LIMIT 1;
SELECT Province, Population  FROM city  WHERE Country = 'United Kingdom'  ORDER BY Population DESC  LIMIT 1 OFFSET 3;
SELECT (Population * (SELECT Percentage FROM ethnicGroup WHERE Country = 'Moldova' AND Name = 'Jewish')) AS Jewish_Residents FROM country WHERE Name = 'Moldova';
SELECT AVG(Area) AS Average_Area FROM country WHERE Code IN (SELECT Country FROM encompasses WHERE Continent = 'Asia');
SELECT d.Country, d.Longitude, d.Latitude FROM desert d WHERE d.Area = (SELECT MIN(Area) FROM desert);
SELECT Percentage FROM language WHERE Country = 'Montenegro' AND Name = 'Serbian';
SELECT COUNT(*)  FROM geo_mountain  WHERE Country = (SELECT Name                   FROM country                   ORDER BY Area DESC                   LIMIT 1);
SELECT s.Name AS Sea, c.Name AS Country FROM sea s JOIN geo_sea gs ON s.Name = gs.Sea JOIN country c ON gs.Country = c.Name ORDER BY s.Depth ASC LIMIT 1;
SELECT e.Country, e.GDP FROM economy e JOIN politics p ON e.Country = p.Country WHERE p.Government = 'Communist' ORDER BY e.GDP ASC LIMIT 1;
SELECT p.Government FROM economy e JOIN politics p ON e.Country = p.Country WHERE e.Inflation = (SELECT MAX(Inflation) FROM economy);
SELECT Country, Infant_Mortality  FROM population  JOIN politics ON population.Country = politics.Country  WHERE politics.Independence = 1960  ORDER BY Infant_Mortality DESC  LIMIT 1;
SELECT b.Length, p1.Government AS Government1, p2.Government AS Government2 FROM borders b JOIN politics p1 ON b.Country1 = p1.Country JOIN politics p2 ON b.Country2 = p2.Country WHERE b.Length = (SELECT MIN(Length) FROM borders);
SELECT Name, Population  FROM country  WHERE Name IN (SELECT Country FROM language WHERE Name = 'Arabic' AND Percentage = 100)  ORDER BY Population ASC  LIMIT 1;
SELECT geo_desert.Province FROM desert JOIN geo_desert ON desert.Name = geo_desert.Desert WHERE desert.Area = (SELECT MAX(Area) FROM desert);
SELECT COUNT(*)  FROM lake  WHERE Country = (     SELECT Name      FROM country      WHERE Code IN (         SELECT Country          FROM politics          WHERE Government = 'Republic'      )      ORDER BY Population DESC      LIMIT 1 OFFSET 3 );
SELECT r.Name, MAX(r.Percentage) AS Max_Percentage FROM religion r JOIN country c ON r.Country = c.Name WHERE c.Province IN (SELECT DISTINCT Province FROM province WHERE Country IN (SELECT Name FROM continent WHERE Name = 'Asia')) GROUP BY r.Name ORDER BY Max_Percentage DESC LIMIT 1;
SELECT ABS(c1.Population - c2.Population) AS Population_Difference FROM country c1 JOIN geo_mountain gm ON c1.Name = gm.Country JOIN mountain m ON gm.Mountain = m.Name JOIN country c2 ON c2.Name = (SELECT Country FROM geo_mountain WHERE Mountain = m.Name ORDER BY Height DESC LIMIT 1) WHERE m.Height = (SELECT MAX(Height) FROM mountain);
SELECT s.Name FROM sea s JOIN island i ON i.Name IN (SELECT ii.Island FROM islandIn ii WHERE ii.Sea = s.Name) WHERE i.Area = (SELECT MAX(Area) FROM island);
SELECT DISTINCT country.Name FROM country JOIN river ON country.Name = river.Name WHERE river.Sea = 'Atlantic Ocean' ORDER BY river.Length DESC LIMIT 3;
SELECT Population  FROM city  WHERE Name = (SELECT Capital                FROM country                WHERE Independence = '1947-08-15');
SELECT SUM(ethnicGroup.Percentage * country.Population / 100) AS Total_Afro_Asian FROM country JOIN ethnicGroup ON country.Name = ethnicGroup.Country WHERE country.Province = 'Asia' AND country.Name = (     SELECT Name     FROM country     WHERE Government = 'Monarchy'     ORDER BY Population DESC     LIMIT 1 ) AND ethnicGroup.Name = 'Afro-Asian';
SELECT c.Name AS City, co.Capital AS CapitalCity FROM geo_river gr JOIN located l ON gr.River = l.River JOIN city c ON l.City = c.Name JOIN country co ON c.Country = co.Name WHERE gr.River = 'Euphrat';
SELECT      SUM(CASE WHEN l.Name = 'English' THEN c.Population * l.Percentage / 100 ELSE 0 END) AS English_Speaking_Population,     SUM(c.Population) AS Total_Population,     (SUM(CASE WHEN l.Name = 'English' THEN c.Population * l.Percentage / 100 ELSE 0 END) / SUM(c.Population)) AS Proportion_English_Speaking FROM      country c JOIN      isMember im ON c.Name = im.Country JOIN      language l ON c.Name = l.Country WHERE      im.Organization = 'United States';
SELECT c.Name AS Country,         COUNT(p.Name) AS NumberOfProvinces,         e.Service AS ServiceGDPPercentage,         (c.Population / c.Area) AS PopulationDensity FROM country c JOIN province p ON c.Name = p.Country JOIN economy e ON c.Name = e.Country WHERE c.Government = 'Federal Republic' AND c.Continent = 'Europe' GROUP BY c.Name, e.Service ORDER BY NumberOfProvinces DESC LIMIT 1;
SELECT c.Capital, (CAST(ci.Population AS FLOAT) / co.Population) * 100 AS CapitalPopulationRatio FROM country co JOIN city ci ON co.Capital = ci.Name WHERE co.Province IN (SELECT DISTINCT Province FROM country WHERE Continent = 'Asia') ORDER BY co.Population DESC LIMIT 1 OFFSET 2;
SELECT Name  FROM desert  ORDER BY Area DESC  LIMIT 1 OFFSET 1;
SELECT Name  FROM language  WHERE Country = 'MNE'  ORDER BY Percentage DESC  LIMIT 1;
SELECT Percentage FROM language WHERE Country = 'Cayman Islands' AND Name = 'English';
SELECT Country FROM river WHERE Name = 'Pjandsh';
SELECT Name  FROM country  WHERE Population > 1000000000  ORDER BY (SELECT GDP FROM economy WHERE economy.Country = country.Name) ASC  LIMIT 1;
SELECT c.Capital  FROM country c  JOIN geo_mountain gm ON gm.Country = c.Name  WHERE gm.Mountain = 'Licancabur';
SELECT SUM(s.Depth) AS Total_Sea_Depth FROM sea s JOIN islandIn i ON s.Name = i.Sea JOIN mountainOnIsland m ON i.Island = m.Island JOIN mountain mt ON m.Mountain = mt.Name WHERE mt.Name = 'Kerinci';
SELECT DISTINCT country.Name FROM river JOIN country ON river.Country = country.Code WHERE river.Name = 'Amazonas';
SELECT Country FROM politics WHERE Independence = '1492-01-01';
SELECT COUNT(*)  FROM city  WHERE Country = 'France' AND Population > 100000;
SELECT r.Name, r.Length FROM river r JOIN sea s ON r.Sea = s.Name WHERE s.Depth = 540 ORDER BY r.Length DESC LIMIT 1;
SELECT Code  FROM country  WHERE Name = (     SELECT Country      FROM geo_mountain      ORDER BY Height DESC      LIMIT 1 OFFSET 1 );
SELECT i.Longitude  FROM mountain m  JOIN mountainOnIsland mo ON m.Name = mo.Mountain  JOIN island i ON mo.Island = i.Name  WHERE m.Name = 'Mount Olympos';
SELECT Country, GDP  FROM economy  WHERE Country IN (SELECT Name FROM country WHERE Area < 100)  ORDER BY GDP DESC  LIMIT 1;
SELECT COUNT(*) AS Total_Cities FROM city WHERE Country = 'Japan';
SELECT Name  FROM city  WHERE Country = 'Bangladesh' AND Name <> (SELECT Capital FROM country WHERE Name = 'Bangladesh')  ORDER BY Population DESC  LIMIT 1;
SELECT Name, Population  FROM city  WHERE Name NOT IN (SELECT Capital FROM country)  ORDER BY Population DESC  LIMIT 1;
SELECT country.Name  FROM city  JOIN country ON city.Country = country.Code  WHERE city.Name = 'Grozny';
SELECT Name  FROM religion  WHERE Country = 'Japan'  ORDER BY Percentage DESC  LIMIT 1;
SELECT Country1, Country2  FROM borders  WHERE Length = 803;
SELECT (SUM(CASE WHEN c.Name = 'Europe' THEN c.Area ELSE 0 END) / (SELECT Area FROM country WHERE Name = 'Russia')) * 100 AS Percentage FROM continent c JOIN encompasses e ON c.Name = e.Continent WHERE e.Country = 'Russia';
SELECT Country FROM encompasses GROUP BY Country HAVING COUNT(DISTINCT Continent) > 1;
SELECT Population FROM country WHERE Name = (SELECT Country FROM city WHERE Name = 'Fareham');
SELECT Infant_Mortality * Population * Population_Growth AS Number_Infant_Mortality FROM population JOIN country ON population.Country = country.Name WHERE country.Name = 'Switzerland';
SELECT COUNT(*) FROM geo_mountain WHERE Country = 'United States';
SELECT Independence FROM politics WHERE Country = 'Equatorial Guinea';
SELECT economy.GDP / country.Population AS GDP_per_capita FROM economy JOIN country ON economy.Country = country.Name WHERE country.Name = 'Switzerland';
SELECT GDP, Service FROM economy WHERE Country = (SELECT Country FROM city WHERE Name = 'Fuenlabrada');
SELECT      (SELECT MAX(Length) FROM river WHERE Country = 'TJ') /      (SELECT MIN(Length) FROM river WHERE Country = 'TJ') AS Ratio;
SELECT c.Population / c.Area AS PopulationDensity FROM country c JOIN city ci ON c.Name = ci.Country WHERE ci.Name = 'Hanoi';
SELECT Country, Name, Percentage FROM ethnicGroup WHERE Country IN (     SELECT Country     FROM ethnicGroup     GROUP BY Country     HAVING COUNT(*) > 1 ) AND (Country, Percentage) IN (     SELECT Country, MAX(Percentage)     FROM ethnicGroup     GROUP BY Country );
SELECT d.Name FROM desert d LEFT JOIN geo_desert gd ON d.Name = gd.Desert GROUP BY d.Name HAVING COUNT(DISTINCT gd.Country) < 2;
SELECT geo_river.Province FROM geo_river JOIN river ON geo_river.River = river.Name GROUP BY geo_river.River, geo_river.Province HAVING COUNT(DISTINCT geo_river.Country) > 1;
SELECT b.Country2, (b.Length / (SELECT SUM(Length) FROM borders WHERE Country1 = 'Angola')) * 100 AS Border_Percentage FROM borders b WHERE b.Country1 = 'Angola';
SELECT      (COUNT(CASE WHEN Area <= 300 THEN 1 END) * 100.0 / COUNT(*)) AS Percent FROM      island WHERE      Type = 'Non Volcanic' AND      Islands IN (SELECT Name FROM island WHERE Name IN ('Lesser Antilles'));
SELECT      (COUNT(CASE WHEN Percentage = 100 THEN Country END) * 100.0 / COUNT(DISTINCT Country)) AS English_Only_Percentage FROM      language WHERE      Name = 'English';
SELECT Capital  FROM country  WHERE Population < (SELECT Population * 0.0005 FROM country ORDER BY Population DESC LIMIT 1);
SELECT AVG(Length) AS Average_Length FROM river WHERE Name IN (     SELECT River     FROM geo_estuary     WHERE River = 'Donau' );
SELECT (COUNT(CASE WHEN r.Name != 'Christian' THEN 1 END) * 100.0 / COUNT(*)) AS non_christian_percentage FROM target t JOIN religion r ON t.Country = r.Country;
SELECT DISTINCT c.Name FROM country c JOIN city ci ON c.Name = ci.Country JOIN isMember im ON c.Name = im.Country JOIN organization o ON im.Organization = o.Name WHERE ci.Population BETWEEN 50000 AND 300000   AND o.Established BETWEEN '1991-03-01' AND '1991-04-30'   AND im.Organization = 'EBRD';
SELECT Name  FROM river  WHERE Length > 500 AND Lake = 'Donau' AND Country = 'Slovenia';
SELECT located.City FROM sea JOIN located ON located.Sea = sea.Name WHERE sea.Depth = (SELECT Depth - 4232 FROM sea WHERE Name = 'Bay of Bengal');
SELECT located.City  FROM located  JOIN lake ON located.Lake = lake.Name  WHERE lake.Longitude = -85.35 AND lake.Latitude = 11.6;
SELECT e.Continent FROM economy AS ec JOIN encompasses AS e ON ec.Country = e.Country ORDER BY ec.Inflation DESC LIMIT 1;
SELECT b.Country1, b.Country2  FROM borders b  JOIN country c1 ON b.Country1 = c1.Name  JOIN country c2 ON b.Country2 = c2.Name  WHERE b.Length = 1782 AND c1.Continent = 'Asia' AND c2.Continent = 'Asia';
SELECT Name, Depth  FROM lake  WHERE Country = 'Bolivia'  ORDER BY Depth DESC  LIMIT 1;
SELECT r.Lake FROM river r WHERE r.Name = 'Manicouagan';
SELECT i.Islands  FROM mountain m  JOIN mountainOnIsland moi ON m.Name = moi.Mountain  JOIN island i ON moi.Island = i.Name  WHERE m.Name = 'Rinjani';
SELECT DISTINCT m1.Name AS Sea1, m2.Name AS Sea2 FROM mergesWith JOIN sea AS m1 ON mergesWith.Sea1 = m1.Name JOIN sea AS m2 ON mergesWith.Sea2 = m2.Name WHERE m1.Depth = (SELECT MAX(Depth) FROM sea);
SELECT c.Name FROM country c JOIN encompasses e ON c.Name = e.Country GROUP BY c.Name HAVING COUNT(DISTINCT e.Continent) > 1 AND AVG(c.Population / c.Area) <= 10;
SELECT Name, Population / Area AS PeoplePerSquareMeter FROM country WHERE Name IN (SELECT Country FROM religion WHERE Name = 'Hindu') ORDER BY PeoplePerSquareMeter ASC LIMIT 1;
SELECT p.Independence FROM economy e JOIN politics p ON e.Country = p.Country WHERE e.GDP > (SELECT GDP * 4 FROM economy WHERE Country = 'Saint Kitts and Nevis');
SELECT AVG(population.Area / population.Population) AS average_population_ratio FROM organization JOIN country ON organization.Country = country.Name JOIN population ON country.Name = population.Country WHERE organization.Established = 1947;
SELECT Capital, Province, Country FROM country WHERE Name = 'Anguilla';
SELECT c.Name AS Country, c.Capital, ci.Province FROM country c JOIN city ci ON c.Capital = ci.Name ORDER BY c.Population ASC LIMIT 1;
SELECT      (SELECT Area FROM continent WHERE Name = 'Asia') -      (SELECT Area FROM continent WHERE Name = 'Europe') AS SpaceDifference;
SELECT Longitude, Latitude  FROM city  WHERE Name = 'Aarhus';
SELECT      (SELECT Population FROM country WHERE Name = 'United Kingdom') -      (SELECT Population FROM country WHERE Name = 'Italy') AS Population_Gap;
SELECT city.Name, city.Province FROM city JOIN organization ON city.Name = organization.City WHERE organization.Name = 'European Bank for Reconstruction and Development';
SELECT Name, Area, Depth  FROM lake  ORDER BY Area * Depth DESC  LIMIT 1;
SELECT Country1, Country2  FROM borders  ORDER BY Length DESC  LIMIT 1;
SELECT Name FROM country  JOIN economy ON country.Name = economy.Country  ORDER BY GDP DESC LIMIT 1;
SELECT country.Name  FROM country  JOIN language ON country.Name = language.Country  WHERE language.Percentage = (SELECT MIN(Percentage) FROM language WHERE Country IN (SELECT Name FROM country WHERE Code IN (SELECT DISTINCT Country FROM ethnicGroup WHERE Name LIKE '%African%')))
SELECT country.Name FROM country JOIN religion ON country.Name = religion.Country JOIN language ON country.Name = language.Country WHERE religion.Name IN ('Anglicanism', 'Christianity', 'Roman Catholicism') AND language.Name = 'English' GROUP BY country.Name HAVING COUNT(DISTINCT religion.Name) = 3;
SELECT Country, Inflation  FROM economy  ORDER BY Inflation DESC  LIMIT 3;
SELECT DISTINCT country.Name FROM country JOIN language ON country.Name = language.Country WHERE language.Name = 'English' AND language.Percentage = 100;
SELECT COUNT(*)  FROM organization  WHERE Established > 1960 AND Country IN (SELECT Country FROM politics WHERE Independence = 'No');
SELECT located.Province, river.Length FROM river JOIN located ON river.Name = located.River WHERE river.Name = 'Klaeaelv';
SELECT COUNT(DISTINCT p.Name) AS Italian_Regions_Bordered_By_Mediterranean_Sea, s.Depth FROM province p JOIN located l ON p.Name = l.Province AND p.Country = 'Italy' JOIN geo_sea gs ON l.Sea = gs.Sea JOIN sea s ON gs.Sea = s.Name WHERE s.Name = 'Mediterranean Sea';
SELECT Country FROM politics WHERE Government = 'British Overseas Territories';
SELECT Country, Agriculture FROM economy WHERE Country IN (     SELECT Country     FROM economy     ORDER BY GDP DESC     LIMIT 3 ) ORDER BY Agriculture ASC LIMIT 1;
SELECT SUM(Area) AS Total_Area, COUNT(Name) AS Number_of_Nations FROM country WHERE Code IN (SELECT Country FROM encompasses WHERE Continent = 'Africa');
SELECT Province, COUNT(*) AS CorporateHeadquarters FROM organization WHERE Country = 'United States' GROUP BY Province ORDER BY CorporateHeadquarters DESC LIMIT 1;
SELECT Country  FROM politics  WHERE Independence IS NOT NULL  ORDER BY Independence DESC  LIMIT 3;
SELECT Name FROM country WHERE Name IN (SELECT Country FROM politics WHERE Government = 'Republic' AND Independence >= 1991);
SELECT o.Name  FROM organization o  JOIN isMember im ON o.Name = im.Organization  WHERE im.Type = 'associated';
SELECT DISTINCT geo_desert.Country FROM geo_desert JOIN desert ON geo_desert.Desert = desert.Name WHERE desert.Name = 'Kalahari';
SELECT Name  FROM desert  WHERE Area = (SELECT MAX(Area) FROM desert WHERE Country = 'Kazakhstan');
SELECT m.Sea2, s.Depth FROM mergesWith m JOIN sea s ON m.Sea1 = s.Name WHERE m.Sea1 = 'Baltic Sea';
SELECT country.Name, COUNT(organization.Name) AS OrganizationCount FROM country JOIN isMember ON country.Name = isMember.Country JOIN organization ON isMember.Organization = organization.Name JOIN politics ON country.Name = politics.Country WHERE politics.Government = 'Constitutional Monarchy' AND organization.Established > 1907 GROUP BY country.Name ORDER BY OrganizationCount DESC;
SELECT m.Type, m.Province, m.Country FROM mountain m WHERE m.Name = 'Ampato';
SELECT m.Name  FROM mountain m  JOIN geo_mountain gm ON m.Name = gm.Mountain  JOIN country c ON gm.Country = c.Name  WHERE m.Type = 'Volcano' AND c.Province = 'Ecuador';
SELECT      (COUNT(DISTINCT p.Country) * 100.0 / (SELECT COUNT(DISTINCT c.Name) FROM country c)) AS Percentage,     (SELECT GROUP_CONCAT(DISTINCT c.Name LIMIT 3)       FROM country c       JOIN politics p ON c.Name = p.Country       WHERE p.Independence > '1993-01-01' AND p.Government = 'Parliamentary Democracy') AS Three_Parliamentary_Democracies FROM      politics p WHERE      p.Independence > '1993-01-01' AND p.Government = 'Parliamentary Democracy';
SELECT      (SELECT COUNT(*) FROM river WHERE Length > 3000) * 100.0 / COUNT(*) AS Proportion,     (SELECT Name FROM river WHERE Country = 'Russia' AND Length > 3000 LIMIT 1) AS Russian_River FROM      river;
SELECT Name, Established FROM organization WHERE Abbreviation = 'ABEDA';
SELECT Name  FROM organization  WHERE Established BETWEEN 1970 AND 1980;
SELECT Name FROM organization WHERE City = 'London';
SELECT o.Name, o.City FROM organization o WHERE o.Country = 'USA';
SELECT Abbreviation, Name, Established  FROM organization  WHERE City = 'Paris'  ORDER BY Established ASC  LIMIT 1;
SELECT Name, City  FROM organization  WHERE Name LIKE '%United Nation%';
SELECT Country1, Country2, Length FROM borders ORDER BY Length DESC LIMIT 1;
SELECT Country2 AS Country FROM borders WHERE Country1 = 'Bulgaria' UNION SELECT Country1 AS Country FROM borders WHERE Country2 = 'Bulgaria';
SELECT Country1 AS CountryName FROM borders WHERE Length > 4000 UNION SELECT Country2 AS CountryName FROM borders WHERE Length > 4000;
SELECT c.Name, c.Population FROM country c JOIN isMember im ON c.Name = im.Country WHERE im.Organization = 'IOC' ORDER BY c.Population DESC LIMIT 1;
SELECT Country, Type  FROM isMember  WHERE Organization = 'Islamic Development Bank';
SELECT c.Area, c.Population FROM country c JOIN isMember im ON c.Name = im.Country WHERE im.Organization = 'Asia Pacific Economic Cooperation';
SELECT Organization  FROM isMember  WHERE Type = 'National Society';
SELECT Country, COUNT(Organization) AS MembershipCount FROM isMember GROUP BY Country ORDER BY MembershipCount ASC LIMIT 1;
SELECT country.Name, country.Capital FROM country JOIN isMember ON country.Name = isMember.Country WHERE isMember.Organization = 'IFAD' AND isMember.Type = 'Category III';
SELECT Organization, COUNT(Country) AS MemberCount FROM isMember GROUP BY Organization ORDER BY MemberCount DESC LIMIT 1;
SELECT o.Name AS Organization FROM country c LEFT JOIN organization o ON c.Capital = o.City WHERE c.Name = 'Australia';
SELECT (COUNT(CASE WHEN City = 'Washington' THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM organization WHERE Country = 'USA';
SELECT Length FROM borders WHERE Country1 = 'USA' AND Country2 = 'MEX';
SELECT o.Name  FROM organization o  JOIN isMember im ON o.Name = im.Organization  WHERE im.Country = 'Singapore'  ORDER BY o.Established DESC  LIMIT 1;
SELECT c.Population  FROM city c  JOIN organization o ON c.Country = o.Country  WHERE o.Name = 'World Tourism Organization';
SELECT m.Height, g.Province  FROM mountain m  JOIN geo_mountain g ON m.Name = g.Mountain  WHERE m.Name = 'Dhaulagiri';
SELECT Name, Height  FROM mountain  WHERE Country = 'United States' AND Province = 'Alaska';
SELECT p.Country, c.Population FROM population p JOIN country c ON p.Country = c.Name WHERE p.Infant_Mortality = (SELECT MAX(Infant_Mortality) FROM population);
SELECT Inflation FROM economy WHERE Country = 'Greece';
SELECT p.Government FROM economy e JOIN politics p ON e.Country = p.Country WHERE e.Agriculture = (SELECT MAX(Agriculture) FROM economy);
SELECT country.Name AS Country, country.Capital FROM country JOIN politics ON country.Name = politics.Country WHERE politics.Government = 'Parliamentary democracy';
SELECT country.Name, country.Population FROM country JOIN ethnicGroup ON country.Name = ethnicGroup.Country WHERE ethnicGroup.Name = 'Chinese' AND ethnicGroup.Percentage > 70;
SELECT c.Name AS City,         c.Population AS CityPopulation,         (c.Population * 100.0 / co.Population) AS PercentageOfCountryPopulation FROM city c JOIN country co ON c.Country = co.Name ORDER BY c.Population DESC LIMIT 1;
SELECT Independence FROM politics WHERE Country = 'United States of America';
SELECT Name, Height  FROM mountain  WHERE Type = 'Volcanic'  ORDER BY Height DESC  LIMIT 1;
SELECT Name  FROM organization  WHERE Country = 'Saudi Arabia'  ORDER BY Established DESC  LIMIT 1;
SELECT Country  FROM population  ORDER BY Infant_Mortality DESC  LIMIT 1 OFFSET 4;
SELECT Country, COUNT(Name) AS ReligionCount FROM religion GROUP BY Country ORDER BY ReligionCount DESC LIMIT 1;
SELECT Name, Length  FROM river  ORDER BY Length  LIMIT 1 OFFSET 16;
SELECT Independence  FROM politics  WHERE Country = (SELECT Name FROM country WHERE Capital = 'Nouakchott');
SELECT c.Name, e.GDP FROM country c JOIN economy e ON c.Name = e.Country ORDER BY c.Population ASC LIMIT 1;
SELECT l.Name, l.Depth FROM lake l JOIN country c ON l.River = c.Province WHERE c.Name = 'Zaire' ORDER BY l.Depth DESC LIMIT 1;
SELECT Height, Type  FROM mountain  WHERE Name IN (     SELECT Mountain      FROM mountainOnIsland      WHERE Island = 'Madagaskar' )  ORDER BY Height ASC  LIMIT 1;
SELECT Country, GDP  FROM economy  JOIN country ON economy.Country = country.Name  WHERE country.Population BETWEEN 60000000 AND 99000000  ORDER BY GDP DESC  LIMIT 1;
SELECT Country, Agriculture  FROM economy  WHERE Country IN (SELECT Name FROM country WHERE Code IN (SELECT Code FROM continent WHERE Name = 'Asia'))  ORDER BY Agriculture DESC  LIMIT 1;
SELECT p.Government  FROM economy e  JOIN politics p ON e.Country = p.Country  WHERE e.GDP = (SELECT MIN(GDP) FROM economy);
SELECT YEAR(Established) AS Year, COUNT(*) AS OrganizationCount FROM organization o JOIN country c ON o.Country = c.Name JOIN encompasses e ON c.Name = e.Country WHERE e.Continent = 'Europe' GROUP BY Year ORDER BY OrganizationCount DESC LIMIT 1;
SELECT b.Country2, b.Length FROM borders b JOIN country c ON b.Country1 = c.Name WHERE c.Population = (SELECT MAX(Population) FROM country)
SELECT      (c.Population / co.Area) AS PopulationDensity,     (e.Industry / e.GDP) AS IndustryGDPPortion FROM      city c JOIN      country co ON c.Country = co.Name JOIN      economy e ON co.Name = e.Country WHERE      c.Province = 'Distrito Federal';
SELECT Country, Government  FROM politics  WHERE Government = 'Parliamentary Democracy'  AND Independence BETWEEN '1950-01-01' AND '1999-12-31';
SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM country)) AS Percentage FROM politics WHERE Independence = 1960;
SELECT Name FROM desert WHERE Latitude < 30 OR Latitude > 40;
SELECT d.Latitude, d.Longitude FROM desert d JOIN geo_desert gd ON d.Name = gd.Desert GROUP BY d.Name, d.Latitude, d.Longitude HAVING COUNT(DISTINCT gd.Country) > 1;
SELECT Capital FROM province WHERE Population < 80000 ORDER BY Population / Area DESC LIMIT 1;
SELECT COUNT(*)  FROM Customers  WHERE MARITAL_STATUS = 'Never-married';
SELECT COUNT(*) AS TeenagerCount FROM Customers WHERE age BETWEEN 13 AND 19;
SELECT OCCUPATION  FROM Customers  WHERE EDUCATIONNUM = 11;
SELECT COUNT(*) AS true_response_count FROM (     SELECT C.ID, M.RESPONSE     FROM Customers C     JOIN mailings3 M ON C.ID = M.REFID     WHERE M.RESPONSE = 'true'     LIMIT 60000 ) AS subquery;
SELECT COUNT(*)  FROM Customers  WHERE age > 30 AND OCCUPATION = 'Machine-op-inspct';
SELECT COUNT(*)  FROM Customers  WHERE EDUCATIONNUM > 11 AND SEX = 'Female';
SELECT COUNT(*)  FROM Customers  WHERE SEX = 'Female'  AND ID IN (     SELECT C.ID      FROM Customers C      JOIN mailings3 M ON C.ID = M.REFID      WHERE M.RESPONSE = 'true'      LIMIT 60000 );
SELECT DISTINCT Customers.OCCUPATION FROM Customers JOIN mailings3 ON Customers.ID = mailings3.REFID WHERE Customers.age > 40 AND mailings3.RESPONSE = 'true';
SELECT COUNT(*)  FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Male' AND d.INHABITANTS_K > 30;
SELECT COUNT(*)  FROM Customers  WHERE GEOID = (SELECT GEOID                 FROM Demog                 ORDER BY INCOME_K DESC                 LIMIT 1);
SELECT COUNT(*)  FROM Customers  WHERE GEOID IN (     SELECT GEOID      FROM Demog      WHERE INHABITANTS_K BETWEEN 20 AND 30 ) AND OCCUPATION = 'Machine-op-inspct';
SELECT      CASE          WHEN (SELECT INHABITANTS_K FROM Demog WHERE GEOID = (SELECT GEOID FROM Customers WHERE ID = 0)) >               (SELECT INHABITANTS_K FROM Demog WHERE GEOID = (SELECT GEOID FROM Customers WHERE ID = 1))          THEN 'Customer 0'          ELSE 'Customer 1'      END AS Customer_With_More_Inhabitants;
SELECT COUNT(*)  FROM (     SELECT c.ID      FROM Customers c     JOIN mailings3 m ON c.ID = m.REFID     JOIN Demog d ON c.GEOID = d.GEOID     WHERE m.RESPONSE = 'true'      AND d.INHABITANTS_K > 30     LIMIT 60000 ) AS subquery;
SELECT COUNT(*)  FROM (     SELECT c.ID      FROM Customers c     JOIN mailings3 m ON c.ID = m.REFID     WHERE m.RESPONSE = 'true'      AND c.SEX = 'Male'      AND c.MARITAL_STATUS = 'Divorced'     LIMIT 60000 ) AS subquery;
SELECT COUNT(DISTINCT c.ID) AS true_responses FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID JOIN mailings3 m ON c.ID = m.REFID WHERE d.INCOME_K = (SELECT MAX(INCOME_K) FROM Demog)   AND m.RESPONSE = 'true'   AND c.ID IN (SELECT ID FROM Customers ORDER BY ID LIMIT 60000);
SELECT INHABITANTS_K  FROM Demog  WHERE GEOID = (     SELECT GEOID      FROM Customers      GROUP BY GEOID      ORDER BY COUNT(ID) DESC      LIMIT 1 );
SELECT COUNT(*)  FROM Customers  WHERE GEOID IN (SELECT GEOID FROM Demog WHERE INHABITANTS_K = 25746)  AND SEX = 'Male';
SELECT COUNT(*)  FROM Customers  WHERE ID IN (     SELECT C.ID      FROM Customers C     JOIN mailings3 M ON C.ID = M.REFID      WHERE M.RESPONSE = 'true'      LIMIT 60000 )  AND age BETWEEN 13 AND 19;
SELECT AVG(C.educationnum) AS average_education_level FROM Customers C WHERE C.GEOID = (     SELECT D.GEOID     FROM Demog D     ORDER BY D.INCOME_K DESC     LIMIT 1 );
SELECT AVG(age)  FROM Customers  WHERE ID IN (     SELECT C.ID      FROM Customers C     JOIN mailings3 M ON C.ID = M.REFID      WHERE M.RESPONSE = 'true'      LIMIT 60000 );
SELECT COUNT(*) AS Male_Customers FROM Customers WHERE SEX = 'Male';
SELECT GEOID  FROM Customers  WHERE OCCUPATION = 'Handlers-cleaners';
SELECT COUNT(*) AS total_customers_below_30 FROM Customers WHERE age < 30;
SELECT GEOID  FROM Demog  WHERE INCOME_K BETWEEN 2100 AND 2500;
SELECT COUNT(*)  FROM Demog  WHERE GEOID BETWEEN 20 AND 50 AND INHABITANTS_K < 20;
SELECT INHABITANTS_K, INCOME_K  FROM Demog  WHERE GEOID = 239;
SELECT Customers.EDUCATIONNUM, Customers.OCCUPATION FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.age BETWEEN 20 AND 35 AND Demog.INCOME_K < 2000;
SELECT SUM(Demog.INHABITANTS_K) AS Total_Inhabitants FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.MARITAL_STATUS = 'Divorced' AND Customers.age > 50;
SELECT c.GEOID, d.INCOME_K FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.age = (SELECT MAX(age) FROM Customers);
SELECT D.INCOME_K FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID WHERE C.SEX = 'Male' AND C.EDUCATIONNUM < 4;
SELECT Customers.OCCUPATION, Demog.INCOME_K FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.SEX = 'Male' AND Customers.EDUCATIONNUM BETWEEN 4 AND 6;
SELECT COUNT(*)  FROM Customers c  JOIN Demog d ON c.GEOID = d.GEOID  WHERE c.SEX = 'Male'  AND c.age BETWEEN 40 AND 60  AND c.MARITAL_STATUS = 'Widowed'  AND d.INCOME_K >= 3000;
SELECT DISTINCT Customers.OCCUPATION FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Demog.INHABITANTS_K BETWEEN 30 AND 40;
SELECT D.INCOME_K FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID WHERE C.SEX = 'Female'    AND C.MARITAL_STATUS = 'Widowed'    AND C.EDUCATIONNUM <= 5;
SELECT MARITAL_STATUS  FROM Customers  WHERE age BETWEEN 40 AND 60  AND GEOID = (SELECT GEOID               FROM Demog               WHERE INCOME_K = (SELECT MAX(INCOME_K)                                 FROM Demog                                 WHERE GEOID IN (SELECT GEOID                                                 FROM Customers                                                 WHERE age BETWEEN 40 AND 60)));
SELECT SUM(Demog.INHABITANTS_K) AS total_inhabitants FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.SEX = 'Male'    AND Customers.age BETWEEN 20 AND 30    AND (Customers.OCCUPATION = 'Farming' OR Customers.OCCUPATION = 'Fishing');
SELECT D.INHABITANTS_K, C.age FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID WHERE C.MARITAL_STATUS = 'married-civ-spouse' AND C.OCCUPATION = 'Machine-op-inspct';
SELECT COUNT(*)  FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Female'  AND c.age BETWEEN 50 AND 60  AND d.INHABITANTS_K BETWEEN 19 AND 24;
SELECT D.INCOME_K, D.INHABITANTS_K FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID WHERE C.age > (SELECT AVG(age) * 0.8 FROM Customers);
SELECT      (COUNT(CASE WHEN D.INCOME_K >= 2500 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      Customers C JOIN      Demog D ON C.GEOID = D.GEOID WHERE      C.MARITAL_STATUS = 'Never-married';
SELECT ID, GEOID  FROM Customers  WHERE age > 65 AND EDUCATIONNUM < 3;
SELECT GEOID  FROM Demog  WHERE INCOME_K > (SELECT AVG(INCOME_K) FROM Demog);
SELECT COUNT(DISTINCT c.ID) AS Non_Responding_Customers FROM Customers c LEFT JOIN mailings3 m ON c.ID = m.REFID AND m.RESPONSE = 'false' WHERE m.REF_DATE BETWEEN '2007-02-01 12:00:00.0' AND '2007-02-28 12:00:00.0' AND m.REFID IS NULL;
SELECT COUNT(*)  FROM Customers  WHERE age BETWEEN 13 AND 19 AND OCCUPATION = 'Machine-op-inspct';
SELECT COUNT(*)  FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.OCCUPATION = 'Other-service' AND d.INHABITANTS_K > 20;
SELECT COUNT(*)  FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Male'  AND c.age BETWEEN 20 AND 29  AND d.INCOME_K > 3000;
SELECT      (COUNT(CASE WHEN age > 65 AND MARITAL_STATUS = 'never married' THEN ID END) * 100.0 / COUNT(ID)) AS percentage FROM      Customers WHERE      GEOID = 24;
SELECT      (COUNT(CASE WHEN age BETWEEN 80 AND 89 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      Customers WHERE      GEOID IN (SELECT GEOID FROM Demog WHERE INCOME_K > 3000);
SELECT COUNT(DISTINCT Customers.ID) AS TrueResponseCount FROM Customers JOIN mailings3 ON Customers.ID = mailings3.REFID WHERE mailings3.RESPONSE = 'TRUE';
SELECT DISTINCT Customers.ID FROM Customers JOIN mailings3 ON Customers.ID = mailings3.REFID WHERE mailings3.RESPONSE = 'true';
SELECT COUNT(*)  FROM Customers  WHERE MARITAL_STATUS = 'Widowed' AND age < 50;
SELECT GEOID  FROM Demog  WHERE INHABITANTS_K < 30;
SELECT COUNT(*)  FROM Demog  WHERE GEOID BETWEEN 10 AND 30 AND INCOME_K < 2000;
SELECT MARITAL_STATUS  FROM Customers  WHERE age = 62 AND EDUCATIONNUM = 7;
SELECT SUM(Demog.INHABITANTS_K) AS Total_Inhabitants FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID JOIN mailings3 ON Customers.ID = mailings3.REFID WHERE Customers.MARITAL_STATUS = 'widowed' AND mailings3.RESPONSE = 'false';
SELECT m.RESPONSE, d.INHABITANTS_K FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID JOIN mailings3 m ON c.ID = m.REFID WHERE c.SEX = 'Female' AND c.age = (SELECT MAX(age) FROM Customers WHERE SEX = 'Female');
SELECT D.INCOME_K FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID WHERE C.SEX = 'Female' AND C.EDUCATIONNUM <= 3;
SELECT Customers.EDUCATIONNUM, Demog.INCOME_K FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.age BETWEEN 30 AND 55 AND Customers.ID IN (SELECT REFID FROM mailings3 WHERE RESPONSE = 'true');
SELECT COUNT(*)  FROM Customers c  JOIN Demog d ON c.GEOID = d.GEOID  WHERE c.SEX = 'Male'  AND c.age BETWEEN 30 AND 50  AND d.INCOME_K BETWEEN 2000 AND 2300;
SELECT c.EDUCATIONNUM, m.RESPONSE FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID JOIN mailings3 m ON c.ID = m.REFID WHERE c.age BETWEEN 20 AND 30 AND d.INHABITANTS_K = (SELECT MAX(INHABITANTS_K) FROM Demog)
SELECT D.INCOME_K FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID WHERE C.SEX = 'Female' AND C.age BETWEEN 30 AND 55 AND C.OCCUPATION = 'machine-op-inspct';
SELECT MARITAL_STATUS, RESPONSE FROM Customers JOIN mailings3 ON Customers.ID = mailings3.REFID WHERE SEX = 'Female' AND EDUCATIONNUM >= 8;
SELECT age  FROM Customers  JOIN Demog ON Customers.GEOID = Demog.GEOID  WHERE Customers.SEX = 'Female' AND Demog.INHABITANTS_K < 30;
SELECT D.INCOME_K, M.RESPONSE FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID JOIN mailings3 M ON C.ID = M.REFID WHERE C.SEX = 'Male'    AND C.MARITAL_STATUS = 'Divorced'    AND C.EDUCATIONNUM >= 6;
SELECT Customers.OCCUPATION, mailings3.RESPONSE FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID JOIN mailings3 ON Customers.ID = mailings3.REFID WHERE Customers.SEX = 'Female' AND Demog.INHABITANTS_K BETWEEN 20 AND 25;
SELECT      (COUNT(CASE WHEN m.RESPONSE = 'true' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      Customers c JOIN      mailings3 m ON c.ID = m.REFID WHERE      c.OCCUPATION = 'Handlers-cleaners'      AND c.SEX = 'Male';
SELECT D.INCOME_K, D.INHABITANTS_K FROM Demog D JOIN Customers C ON D.GEOID = C.GEOID WHERE C.ID > (SELECT 0.5 * COUNT(*) FROM mailings3 WHERE RESPONSE = 'false') / (SELECT COUNT(*) FROM mailings3);
SELECT      DIVIDE(         COUNT(CASE WHEN SEX = 'Male' AND age BETWEEN 13 AND 19 AND EDUCATIONNUM > 10 THEN 1 END),         COUNT(CASE WHEN SEX = 'Female' AND age BETWEEN 13 AND 19 AND EDUCATIONNUM > 10 THEN 1 END)     ) AS gender_ratio FROM      Customers;
SELECT GEOID, SUM(12 * INHABITANTS_K * INCOME_K) AS total_income_per_year FROM Demog WHERE INCOME_K > 3300 GROUP BY GEOID;
SELECT      CASE          WHEN (SELECT COUNT(REFID) FROM mailings3 WHERE RESPONSE = 'true') >               (SELECT COUNT(REFID) FROM mailings3 WHERE RESPONSE = 'false')          THEN 'Responding'          ELSE 'Not Responding'      END AS Greater_Response
SELECT D.GEOID, (D.INHABITANTS_K * D.INCOME_K * 12) AS YEARLY_INCOME FROM Demog D JOIN Customers C ON D.GEOID = C.GEOID WHERE C.SEX = 'Female' AND C.OCCUPATION = 'Sales';
SELECT EDUCATIONNUM, OCCUPATION, age  FROM Customers  WHERE GEOID IN (SELECT GEOID FROM Demog WHERE INHABITANTS_K = 33.658)  AND SEX = 'Female'  AND MARITAL_STATUS = 'Widowed';
SELECT m3.RESPONSE FROM mailings3 m3 JOIN Customers c ON m3.REFID = c.ID WHERE c.GEOID = 134;
SELECT      d.GEOID,     AVG(d.INCOME_K) AS average_income_per_month,     (SUM(d.INHABITANTS_K * d.INCOME_K) * 12) AS yearly_income FROM      Demog d JOIN      Customers c ON d.GEOID = c.GEOID WHERE      c.ID IN ('209556', '290135') GROUP BY      d.GEOID;
SELECT C.EDUCATIONNUM FROM mailings3 M JOIN Customers C ON M.REFID = C.ID WHERE M.REFID < 10 AND M.RESPONSE = 'true';
SELECT COUNT(*)  FROM Community_Area  WHERE side = 'Central';
SELECT d.district_name FROM District d JOIN Community_Area ca ON d.district_no = ca.side WHERE ca.community_area_name = 'Lincoln Square';
SELECT d.district_name, COUNT(ca.community_area_no) AS community_area_count FROM District d JOIN Crime c ON d.district_no = c.district_no JOIN Community_Area ca ON c.community_area_no = ca.community_area_no GROUP BY d.district_name ORDER BY community_area_count DESC LIMIT 1;
SELECT community_area_name  FROM Community_Area  ORDER BY population ASC  LIMIT 1;
SELECT commander  FROM District  WHERE district_name = 'Central';
SELECT email FROM District WHERE district_name = 'Central';
SELECT ca.community_area_name  FROM Community_Area ca JOIN Neighborhood n ON ca.community_area_no = n.community_area_no WHERE n.neighborhood_name = 'Albany Park';
SELECT COUNT(*)  FROM Neighborhood  WHERE community_area_no = (SELECT community_area_no FROM Community_Area WHERE community_area_name = 'Lincoln Square');
SELECT n.neighborhood_name FROM Neighborhood n JOIN Community_Area ca ON n.community_area_no = ca.community_area_no WHERE ca.population = (SELECT MAX(population) FROM Community_Area);
SELECT n.neighborhood_name  FROM Neighborhood n  JOIN Community_Area ca ON n.community_area_no = ca.community_area_no  WHERE ca.side = 'Central';
SELECT latitude, longitude  FROM Crime  WHERE district_no IN (SELECT district_no FROM District WHERE district_name = 'Central');
SELECT COUNT(*)  FROM Crime  WHERE district_no IN (SELECT district_no FROM District WHERE district_name = 'Central');
SELECT COUNT(*)  FROM Crime  WHERE district_no IN (SELECT district_no FROM District WHERE district_name = 'Central')  AND domestic = 'TRUE';
SELECT case_number  FROM Crime  WHERE arrest = 'FALSE'  AND district_no IN (SELECT district_no FROM District WHERE district_name = 'Central');
SELECT COUNT(*)  FROM Crime  WHERE community_area_no = (     SELECT community_area_no      FROM Community_Area      WHERE population = (SELECT MAX(population) FROM Community_Area) );
SELECT COUNT(*)  FROM Crime  WHERE community_area_no IN (     SELECT community_area_no      FROM Community_Area      WHERE community_area_name = 'Woodlawn' )  AND date LIKE '%1/2018%';
SELECT community_area_name, COUNT(report_no) AS crime_count FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE date LIKE '%1/2018%' AND community_area_name IN ('Woodlawn', 'Lincoln Square') GROUP BY community_area_name ORDER BY crime_count DESC LIMIT 1;
SELECT d.fax FROM District d JOIN Crime c ON d.district_no = c.district_no WHERE c.date LIKE '%1/2018%' GROUP BY d.district_no ORDER BY COUNT(c.case_number) DESC LIMIT 1;
SELECT AVG(crime_count) AS average_crimes FROM (     SELECT COUNT(c.report_no) AS crime_count     FROM Crime c     JOIN Neighborhood n ON c.community_area_no = n.community_area_no     JOIN Community_Area ca ON n.community_area_no = ca.community_area_no     WHERE ca.side = 'Central'     GROUP BY n.neighborhood_name ) AS neighborhood_crime_counts;
SELECT (COUNT(CASE WHEN d.district_name = 'Central' THEN c.case_number END) * 100.0 / COUNT(c.case_number)) AS percentage FROM Crime c JOIN District d ON c.district_no = d.district_no;
SELECT COUNT(*)  FROM Community_Area  WHERE side = 'Far North';
SELECT commander FROM District WHERE district_name = 'Morgan Park';
SELECT d.district_name  FROM Crime c  JOIN District d ON c.district_no = d.district_no  WHERE c.case_number = 'JB100065';
SELECT d.district_name FROM Crime c JOIN District d ON c.district_no = d.district_no WHERE c.latitude = 41.66236555 AND c.longitude = -87.63470194;
SELECT d.commander  FROM Crime c  JOIN District d ON c.district_no = d.district_no  WHERE c.case_number = 'JB524952';
SELECT COUNT(*)  FROM Crime  WHERE iucr_no IN (     SELECT iucr_no      FROM IUCR      WHERE primary_description = 'ASSAULT' AND secondary_description = 'SIMPLE' )  AND date LIKE '%9/8/2018%';
SELECT district_no FROM Crime WHERE iucr_no IN (SELECT iucr_no FROM IUCR WHERE secondary_description = 'FIRST DEGREE MURDER') GROUP BY district_no ORDER BY COUNT(case_number) DESC LIMIT 1;
SELECT IUCR.index_code FROM Crime JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE Crime.case_number = 'JB296775';
SELECT ca.community_area_name FROM Crime c JOIN IUCR i ON c.iucr_no = i.iucr_no JOIN Community_Area ca ON c.community_area_no = ca.community_area_no WHERE i.primary_description = 'THEFT' AND i.secondary_description = 'POCKET-PICKING' GROUP BY ca.community_area_name ORDER BY COUNT(c.case_number) DESC LIMIT 1;
SELECT CONCAT(w.alderman_first_name, ' ', w.alderman_last_name) AS full_name FROM Crime c JOIN Ward w ON c.ward_no = w.ward_no WHERE c.case_number = 'JB103470';
SELECT n.neighborhood_name  FROM Neighborhood n  JOIN Community_Area ca ON n.community_area_no = ca.community_area_no  WHERE ca.community_area_name = 'West Englewood';
SELECT COUNT(DISTINCT neighborhood_name)  FROM Neighborhood  WHERE community_area_no IN (SELECT community_area_no FROM Community_Area WHERE community_area_name = 'Roseland');
SELECT f.description  FROM Crime c  JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no  WHERE c.case_number = 'JB134191';
SELECT COUNT(case_number)  FROM Crime  JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no  WHERE arrest = 'TRUE' AND Community_Area.community_area_name = 'North Lawndale';
SELECT      (COUNT(CASE WHEN iucr.secondary_description = '$500 AND UNDER' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      Crime c JOIN      IUCR iucr ON c.iucr_no = iucr.iucr_no JOIN      Community_Area ca ON c.community_area_no = ca.community_area_no WHERE      iucr.primary_description = 'THEFT'      AND ca.community_area_name = 'West Englewood';
SELECT      (COUNT(CASE WHEN f.title = 'Larceny' THEN c.case_number END) * 100.0 / COUNT(c.case_number)) AS larceny_percentage FROM      Crime c JOIN      Community_Area ca ON c.community_area_no = ca.community_area_no JOIN      FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE      ca.community_area_name = 'Edgewater';
SELECT COUNT(*)  FROM Crime  WHERE block = '018XX S KOMENSKY AVE'  AND date LIKE '5/%/2018%';
SELECT community_area_name  FROM Community_Area  WHERE population = (SELECT MAX(population) FROM Community_Area);
SELECT COUNT(*)  FROM Crime  WHERE domestic = 'TRUE'  AND location_description = 'ABANDONED BUILDING'  AND date LIKE '%2018%';
SELECT MIN(total_population) AS least_population FROM (     SELECT d.district_no, SUM(ca.population) AS total_population     FROM District d     JOIN Crime c ON d.district_no = c.district_no     JOIN Community_Area ca ON c.community_area_no = ca.community_area_no     GROUP BY d.district_no ) AS district_population;
SELECT COUNT(*)  FROM Crime  WHERE arrest = 'TRUE'    AND date LIKE '%2018%'    AND location_description = 'ANIMAL HOSPITAL'    AND fbi_code_no = '08B';
SELECT * FROM Crime WHERE fbi_code_no IN (     SELECT fbi_code_no     FROM FBI_Code     WHERE crime_against = 'Society' );
SELECT commander  FROM District  WHERE district_no = (     SELECT district_no      FROM Crime      JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no      WHERE FBI_Code.title = 'Disorderly Conduct'      GROUP BY district_no      ORDER BY COUNT(district_no) DESC      LIMIT 1 );
SELECT f.title, COUNT(*) AS crime_count FROM Crime c JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no GROUP BY f.title ORDER BY crime_count DESC LIMIT 1;
SELECT COUNT(*)  FROM Crime c JOIN District d ON c.district_no = d.district_no JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE d.district_name = 'Albany Park'    AND c.location_description = 'APARTMENT'    AND f.title = 'Criminal Sexual Abuse';
SELECT latitude, longitude FROM Crime WHERE fbi_code_no = 3 AND community_area_no IN (     SELECT community_area_no     FROM Community_Area     WHERE community_area_name = 'Rogers Park' ) GROUP BY latitude, longitude ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*)  FROM Crime  JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no  JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no  WHERE IUCR.secondary_description = 'SOLICIT ON PUBLIC WAY'    AND IUCR.primary_description = 'PROSTITUTION'    AND Crime.arrest = 'TRUE'    AND Community_Area.community_area_name = 'West Garfield Park';
SELECT COUNT(*) AS domestic_violence_incidents FROM Crime WHERE domestic = 'TRUE'    AND location_description = 'BAR OR TAVERN'    AND ward_no = (       SELECT ward_no       FROM Ward       ORDER BY Population DESC       LIMIT 1   );
SELECT COUNT(DISTINCT neighborhood_name)  FROM Neighborhood  WHERE community_area_no IN (SELECT community_area_no FROM Community_Area WHERE community_area_name = 'Near North Side');
SELECT COUNT(*)  FROM Crime  WHERE domestic = 'TRUE'  AND ward_no = (SELECT ward_no FROM Ward WHERE alderman_first_name = 'Walter' AND alderman_last_name = 'Burnett Jr.');
SELECT f.title FROM Crime c JOIN Community_Area ca ON c.community_area_no = ca.community_area_no JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE ca.population = (SELECT MIN(population) FROM Community_Area) GROUP BY f.title ORDER BY COUNT(*) DESC LIMIT 1;
SELECT w.ward_office_address  FROM Crime c  JOIN Ward w ON c.ward_no = w.ward_no  WHERE c.block = '010XX W LAKE ST';
SELECT ca.community_area_name FROM Crime c JOIN IUCR i ON c.iucr_no = i.iucr_no JOIN Community_Area ca ON c.community_area_no = ca.community_area_no WHERE i.primary_description = 'PROSTITUTION' GROUP BY ca.community_area_name ORDER BY COUNT(c.case_number) DESC LIMIT 1;
SELECT COUNT(*)  FROM Crime c JOIN Ward w ON c.ward_no = w.ward_no JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE f.title = 'Vandalism' AND c.arrest = 'TRUE' AND w.alderman_first_name = 'Edward' AND w.alderman_last_name = 'Burke';
SELECT COUNT(*)  FROM Crime  WHERE domestic = 'TRUE' AND date LIKE '5/%/2018%';
SELECT iucr_no, index_code  FROM IUCR  WHERE primary_description = 'HOMICIDE';
SELECT commander, email  FROM District  WHERE district_name = 'Chicago Lawn';
SELECT CONCAT(ward.alderman_first_name, ' ', ward.alderman_last_name, ' ', ward.alderman_name_suffix) AS full_name FROM Ward ward WHERE ward.Population = (SELECT MAX(Population) FROM Ward);
SELECT community_area_name  FROM Community_Area  WHERE side = 'Northwest';
SELECT f.title, f.description FROM FBI_Code f WHERE f.crime_against = 'Persons';
SELECT iucr.secondary_description, crime.latitude, crime.longitude FROM IUCR iucr JOIN Crime crime ON iucr.iucr_no = crime.iucr_no WHERE iucr.iucr_no = 142;
SELECT COUNT(*)  FROM Crime  WHERE date LIKE '10/7/2018%'  AND district_no IN (     SELECT district_no      FROM District      WHERE commander = 'Brendan Reilly' );
SELECT COUNT(*)  FROM Crime  JOIN District ON Crime.district_no = District.district_no  WHERE Crime.arrest = 'TRUE'  AND Crime.location_description = 'RESTAURANT'  AND District.district_name = 'Englewood';
SELECT      c.case_number,      CONCAT(w.alderman_first_name, ' ', w.alderman_last_name, ' ', w.alderman_name_suffix) AS alderman_full_name,      d.district_name  FROM      Crime c  JOIN      Ward w ON c.ward_no = w.ward_no  JOIN      District d ON c.district_no = d.district_no  WHERE      c.block = '0000X N FRANCISCO AVE';
SELECT COUNT(*)  FROM Crime  WHERE fbi_code_no = (SELECT fbi_code_no FROM FBI_Code WHERE title = 'Misc Non-Index Offense');
SELECT n.neighborhood_name FROM Neighborhood n JOIN Community_Area ca ON n.community_area_no = ca.community_area_no WHERE ca.community_area_name = 'Douglas';
SELECT      COUNT(c.report_no) / 12 AS average_crime_rate_per_month FROM      Crime c JOIN      Community_Area ca ON c.community_area_no = ca.community_area_no WHERE      ca.population = (SELECT MAX(population) FROM Community_Area);
SELECT      (COUNT(CASE WHEN f.title = 'Larceny' THEN c.report_no END) * 100.0 / COUNT(c.report_no)) AS larceny_percentage FROM      Crime c JOIN      Community_Area ca ON c.community_area_no = ca.community_area_no JOIN      FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE      ca.side = 'Central';
SELECT c.location_description,         CONCAT(w.alderman_first_name, ' ', w.alderman_last_name, ' ', w.alderman_name_suffix) AS alderman_full_name FROM Crime c JOIN IUCR i ON c.iucr_no = i.iucr_no JOIN Ward w ON c.ward_no = w.ward_no WHERE i.primary_description = 'ARSON'    AND i.secondary_description = 'BY EXPLOSIVE';
SELECT date, latitude, longitude  FROM Crime  WHERE iucr_no IN (     SELECT iucr_no      FROM IUCR      WHERE primary_description = 'DECEPTIVE PRACTICE'      AND secondary_description = 'UNLAWFUL USE OF RECORDED SOUND' );
SELECT COUNT(*)  FROM Crime c JOIN District d ON c.district_no = d.district_no JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE f.title = 'Criminal Sexual Assault'  AND d.commander = 'Adnardo Gutierrez'  AND c.location_description = 'RESIDENCE';
SELECT      (COUNT(CASE WHEN arrest = 'TRUE' THEN report_no END) * 100.0 / COUNT(report_no)) AS percent_arrested FROM      Crime  WHERE      domestic = 'TRUE'      AND community_area_no IN (SELECT community_area_no FROM Community_Area WHERE community_area_name = 'West Pullman');
WITH domestic_cases AS (     SELECT report_no     FROM Crime     WHERE domestic = 'TRUE' AND ward_no IN (         SELECT ward_no         FROM Ward         WHERE alderman_first_name = 'Christopher' AND alderman_last_name = 'Taliaferro'     ) ), total_cases AS (     SELECT report_no     FROM Crime     WHERE ward_no IN (         SELECT ward_no         FROM Ward         WHERE alderman_first_name = 'Christopher' AND alderman_last_name = 'Taliaferro'     ) ), bank_cases AS (     SELECT report_no     FROM Crime     WHERE location_description = 'BANK' AND ward_no IN (         SELECT ward_no         FROM Ward         WHERE alderman_first_name = 'Christopher' AND alderman_last_name = 'Taliaferro'     ) )  SELECT      (COUNT(dc.report_no) * 100.0 / NULLIF(COUNT(tc.report_no), 0)) AS domestic_percentage,     STRING_AGG(bc.report_no, ', ') AS bank_report_numbers FROM domestic_cases dc JOIN total_cases tc ON 1=1 LEFT JOIN bank_cases bc ON dc.report_no = bc.report_no;
SELECT COUNT(*)  FROM Ward  WHERE alderman_first_name = 'James';
SELECT COUNT(*)  FROM Crime  WHERE date LIKE '1/1/2018%';
SELECT AVG(population) AS average_population FROM Community_Area WHERE side = 'West';
SELECT report_no  FROM Crime  WHERE ward_no = (SELECT ward_no FROM Ward WHERE alderman_first_name = 'Edward' AND alderman_last_name = 'Burke')  AND community_area_no = (SELECT community_area_no FROM Community_Area ORDER BY population DESC LIMIT 1)  ORDER BY beat DESC  LIMIT 1;
SELECT COUNT(*)  FROM Crime  WHERE location_description = 'STREET'  AND fbi_code_no = (SELECT fbi_code_no FROM FBI_Code WHERE title = 'Homicide 1st & 2nd Degree');
SELECT CONCAT(ward.alderman_first_name, ' ', ward.alderman_last_name, ' ', ward.alderman_name_suffix) AS alderman_name FROM Crime JOIN Ward ON Crime.ward_no = Ward.ward_no WHERE Crime.report_no = 23769;
SELECT c.case_number FROM Crime c JOIN Community_Area ca ON c.community_area_no = ca.community_area_no WHERE c.domestic = 'TRUE' AND ca.community_area_name = 'Lincoln Square';
SELECT c.case_number  FROM Crime c  JOIN Ward w ON c.ward_no = w.ward_no  WHERE w.ward_office_address = '1958 N. Milwaukee Ave.'  AND c.location_description = 'APARTMENT';
SELECT COUNT(beat)  FROM Crime  WHERE community_area_no = (SELECT community_area_no FROM Community_Area WHERE community_area_name = 'Bridgeport')  AND beat < 1000;
SELECT c.report_no FROM Crime c JOIN Community_Area ca ON c.community_area_no = ca.community_area_no WHERE ca.side = 'Far North' AND ca.population > 60000;
SELECT c.report_no FROM Crime c JOIN Community_Area ca ON c.community_area_no = ca.community_area_no JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE f.crime_against = 'Property' AND ca.community_area_name = 'Riverdale';
SELECT COUNT(*)  FROM Crime  JOIN Ward ON Crime.ward_no = Ward.ward_no  WHERE Crime.domestic = 'TRUE' AND Ward.ward_email = 'ward13@cityofchicago.org';
SELECT d.address  FROM Crime c  JOIN District d ON c.district_no = d.district_no  WHERE c.case_number = 'JB107731';
SELECT SUM(c.beat) AS total_beat FROM Crime c JOIN Community_Area ca ON c.community_area_no = ca.community_area_no WHERE ca.side = 'Central' AND ca.population > 50000;
SELECT case_number  FROM Crime  WHERE fbi_code_no IN (SELECT fbi_code_no FROM FBI_Code WHERE crime_against = 'Society')  AND date LIKE '6/%/2018%';
SELECT      (COUNT(CASE WHEN c.domestic = 'TRUE' THEN 1 END) * 100.0 / COUNT(*)) AS domestic_violence_percentage FROM      Crime c JOIN      Community_Area ca ON c.community_area_no = ca.community_area_no WHERE      ca.population = (SELECT MAX(population) FROM Community_Area);
SELECT c.case_number FROM Crime c JOIN Ward w ON c.ward_no = w.ward_no WHERE w.Population < 52000  AND c.beat > (SELECT AVG(beat) * 0.9 FROM Crime);
SELECT community_area_name  FROM Community_Area  WHERE side = 'Far North' AND population BETWEEN 50000 AND 70000;
SELECT latitude, longitude  FROM Crime  WHERE location_description = 'ALLEY' AND arrest = 'TRUE';
SELECT commander, email, phone  FROM District  WHERE district_name = 'Ogden';
SELECT fbi_code_no, description  FROM FBI_Code  WHERE title = 'Gambling';
SELECT (COUNT(CASE WHEN iucr.index_code = 'I' THEN 1 END) * 100.0 / COUNT(iucr.iucr_no)) AS severe_percentage FROM Crime JOIN IUCR iucr ON Crime.iucr_no = iucr.iucr_no;
SELECT location_description, COUNT(case_number) AS crime_count FROM Crime WHERE district_no IN (SELECT district_no FROM District WHERE district_name = 'Austin') GROUP BY location_description ORDER BY crime_count DESC LIMIT 1;
SELECT AVG(community_area_count) AS average_community_areas_per_side FROM (     SELECT side, COUNT(DISTINCT community_area_no) AS community_area_count     FROM Community_Area     GROUP BY side ) AS side_community_areas;
SELECT community_area_no FROM Crime WHERE location_description = 'STREET' GROUP BY community_area_no ORDER BY COUNT(location_description) DESC LIMIT 1;
SELECT district.district_name,         COUNT(crime.report_no) AS reckless_homicide_count,        COUNT(crime.district_no) AS total_districts,        COUNT(crime.report_no) * 1.0 / COUNT(crime.district_no) AS average_reckless_homicides FROM Crime crime JOIN IUCR iucr ON crime.iucr_no = iucr.iucr_no JOIN District district ON crime.district_no = district.district_no WHERE iucr.secondary_description = 'RECKLESS HOMICIDE' GROUP BY district.district_name;
SELECT w.ward_office_address, w.ward_office_phone FROM Ward w JOIN Crime c ON w.ward_no = c.ward_no WHERE c.arrest = 'FALSE' GROUP BY w.ward_no, w.ward_office_address, w.ward_office_phone ORDER BY COUNT(c.arrest) DESC LIMIT 1;
SELECT case_number, latitude, longitude  FROM Crime  WHERE iucr_no IN (SELECT iucr_no FROM IUCR WHERE secondary_description = 'CHILD ABDUCTION');
SELECT iucr.secondary_description, COUNT(*) AS crime_count FROM Crime AS c JOIN IUCR AS iucr ON c.iucr_no = iucr.iucr_no JOIN Community_Area AS ca ON c.community_area_no = ca.community_area_no WHERE ca.side = 'Northwest' GROUP BY iucr.secondary_description ORDER BY crime_count DESC LIMIT 1;
SELECT community_area_no FROM Crime WHERE domestic = 'TRUE' GROUP BY community_area_no ORDER BY COUNT(*) ASC LIMIT 1;
SELECT      (COUNT(CASE WHEN iucr.secondary_description LIKE '%CANNABIS%' THEN 1 END) * 100.0 / COUNT(*)) AS cannabis_percentage FROM      Crime c JOIN      IUCR iucr ON c.iucr_no = iucr.iucr_no JOIN      FBI_Code fbi ON c.fbi_code_no = fbi.fbi_code_no WHERE      fbi.title = 'Drug Abuse';
SELECT COUNT(case_number) / 28.0 AS average_less_severe_crimes_per_day FROM Crime WHERE date LIKE '2/%/2018' AND iucr_no IN (SELECT iucr_no FROM IUCR WHERE index_code = 'N');
SELECT ca.community_area_name, ca.population FROM Community_Area ca JOIN Crime c ON ca.community_area_no = c.community_area_no JOIN IUCR i ON c.iucr_no = i.iucr_no WHERE i.secondary_description = 'SOLICIT FOR PROSTITUTE' GROUP BY ca.community_area_no, ca.community_area_name, ca.population HAVING COUNT(c.iucr_no) > (SELECT COUNT(*) * 1.0 / COUNT(i2.iucr_no)                             FROM Crime c2                             JOIN IUCR i2 ON c2.iucr_no = i2.iucr_no                             WHERE i2.secondary_description = 'SOLICIT FOR PROSTITUTE');
SELECT      (COUNT(CASE WHEN f.title = 'Disorderly Conduct' THEN 1 END) * 100.0 / COUNT(c.report_no)) AS percentage FROM      Crime c JOIN      District d ON c.district_no = d.district_no JOIN      FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE      d.district_name = 'Harrison';
SELECT      district_no,     AVG(CASE WHEN secondary_description = 'VEHICULAR HIJACKING' THEN 1 ELSE 0 END) AS avg_vehicular_hijacking,     AVG(CASE WHEN secondary_description = 'AGGRAVATED VEHICULAR HIJACKING' THEN 1 ELSE 0 END) AS avg_aggravated_vehicular_hijacking,     AVG(CASE WHEN secondary_description = 'VEHICULAR HIJACKING' THEN 1 ELSE 0 END) -      AVG(CASE WHEN secondary_description = 'AGGRAVATED VEHICULAR HIJACKING' THEN 1 ELSE 0 END) AS difference FROM      Crime GROUP BY      district_no;
SELECT COUNT(*)  FROM Crime  WHERE longitude = -8772658001;
SELECT *  FROM Crime  WHERE iucr_no IN (     SELECT iucr_no      FROM IUCR      WHERE primary_description = 'NARCOTICS' );
SELECT alderman_first_name  FROM Ward  WHERE Population > 50000;
SELECT c.report_no FROM Crime c JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE f.title = 'Drug Abuse';
SELECT COUNT(*)  FROM Crime  JOIN District ON Crime.district_no = District.district_no  JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no  WHERE District.district_name = 'Calumet'  AND IUCR.primary_description = 'WEAPON VIOLATION';
SELECT latitude, longitude  FROM Crime  WHERE community_area_no = (SELECT community_area_no FROM Community_Area WHERE community_area_name = 'Belmont Cragin');
SELECT COUNT(DISTINCT iucr.primary_description) AS different_crime_types FROM Crime c JOIN Neighborhood n ON c.community_area_no = n.community_area_no JOIN IUCR iucr ON c.iucr_no = iucr.iucr_no WHERE n.neighborhood_name = 'Hermosa';
SELECT COUNT(*)  FROM Crime  JOIN District ON Crime.district_no = District.district_no  WHERE Crime.domestic = 'TRUE'  AND District.commander = 'Ronald A. Pontecore Jr.';
SELECT COUNT(*)  FROM Crime c JOIN District d ON c.district_no = d.district_no JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE d.district_name = 'Wentworth' AND f.crime_against = 'Society';
SELECT d.phone  FROM District d  JOIN Crime c ON d.district_no = c.district_no  JOIN Ward w ON c.ward_no = w.ward_no  WHERE w.alderman_first_name = 'Emma' AND w.alderman_last_name = 'Mitts'  LIMIT 1;
SELECT COUNT(*)  FROM Crime c JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no JOIN Community_Area ca ON c.community_area_no = ca.community_area_no WHERE f.description = 'The theft of a motor vehicle'  AND ca.community_area_name = 'Lake View';
SELECT d.district_name, COUNT(c.case_number) AS intimidation_count FROM Crime c JOIN District d ON c.district_no = d.district_no JOIN IUCR i ON c.iucr_no = i.iucr_no WHERE i.primary_description = 'INTIMIDATION' GROUP BY d.district_name ORDER BY intimidation_count DESC LIMIT 1;
SELECT iucr.primary_description, COUNT(*) AS domestic_crime_count FROM Crime c JOIN IUCR iucr ON c.iucr_no = iucr.iucr_no JOIN Community_Area ca ON c.community_area_no = ca.community_area_no WHERE c.domestic = 'TRUE' AND ca.community_area_name = 'North Lawndale' GROUP BY iucr.primary_description ORDER BY domestic_crime_count DESC LIMIT 1;
SELECT w.ward_no FROM Ward w JOIN Crime c ON w.ward_no = c.ward_no JOIN IUCR i ON c.iucr_no = i.iucr_no WHERE w.Population > 55000    AND i.primary_description = 'INTIMIDATION'    AND i.secondary_description = 'EXTORTION' GROUP BY w.ward_no ORDER BY COUNT(c.ward_no) DESC;
SELECT d.commander, COUNT(c.case_number) AS case_count FROM Crime c JOIN District d ON c.district_no = d.district_no JOIN IUCR i ON c.iucr_no = i.iucr_no WHERE i.secondary_description = 'CRIMINAL SEXUAL ABUSE' GROUP BY d.commander ORDER BY case_count DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN domestic = 'FALSE' THEN case_number END) * 100.0 / COUNT(case_number)) AS percentage_non_domestic FROM      Crime WHERE      district_no = (SELECT district_no FROM District WHERE district_name = 'Jefferson Park');
SELECT AVG(w.Population) AS average_population FROM Crime c JOIN Ward w ON c.ward_no = w.ward_no WHERE c.location_description = 'APARTMENT' AND c.arrest = 'FALSE';
SELECT CONCAT(a.alderman_first_name, ' ', a.alderman_last_name) AS full_name FROM Ward a ORDER BY a.Population DESC LIMIT 5;
SELECT COUNT(*)  FROM Crime  WHERE fbi_code_no IN (SELECT fbi_code_no FROM FBI_Code WHERE crime_against = 'Property');
SELECT COUNT(*)  FROM District  WHERE zip_code = '60608';
SELECT * FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE FBI_Code.title = 'Criminal Sexual Abuse';
SELECT ca.community_area_name FROM Community_Area ca JOIN Neighborhood n ON ca.community_area_no = n.community_area_no GROUP BY ca.community_area_name ORDER BY COUNT(n.neighborhood_name) DESC LIMIT 1;
SELECT COUNT(*)  FROM Crime  WHERE latitude = 41.64820151 AND longitude = -87.54430496 AND iucr_no IN (SELECT iucr_no FROM IUCR WHERE index_code = 'I');
SELECT d.commander FROM Crime c JOIN District d ON c.district_no = d.district_no WHERE c.arrest = 'FALSE' GROUP BY d.district_no, d.commander ORDER BY COUNT(c.report_no) DESC LIMIT 1;
SELECT iucr.primary_description AS general_description,         iucr.secondary_description AS specific_description FROM Crime c JOIN IUCR iucr ON c.iucr_no = iucr.iucr_no WHERE c.location_description = 'AIRCRAFT' GROUP BY iucr.primary_description, iucr.secondary_description HAVING COUNT(c.iucr_no) = (     SELECT MAX(crime_count)     FROM (         SELECT COUNT(iucr_no) AS crime_count         FROM Crime         WHERE location_description = 'AIRCRAFT'         GROUP BY iucr_no     ) AS subquery );
SELECT district_no, district_name, COUNT(*) AS crime_count FROM Crime WHERE district_no IN (     SELECT district_no FROM District WHERE district_name IN ('Deering', 'Near West') ) AND location_description = 'LIBRARY' GROUP BY district_no, district_name ORDER BY crime_count DESC LIMIT 1;
SELECT COUNT(*)  FROM Crime  WHERE iucr_no IN (     SELECT iucr_no      FROM IUCR      WHERE primary_description = 'BURGLARY'      AND secondary_description = 'FORCIBLE ENTRY' )  AND location_description = 'DAY CARE CENTER'  AND arrest = 'TRUE';
SELECT d.district_name FROM Crime c JOIN District d ON c.district_no = d.district_no WHERE c.domestic = 'TRUE' GROUP BY d.district_name ORDER BY COUNT(c.case_number) DESC LIMIT 1;
SELECT location_description FROM Crime WHERE community_area_no = (     SELECT community_area_no     FROM Community_Area     WHERE population = (SELECT MIN(population) FROM Community_Area) ) GROUP BY location_description ORDER BY COUNT(location_description) DESC LIMIT 1;
SELECT COUNT(*)  FROM Crime  WHERE arrest = 'FALSE';
SELECT latitude, longitude FROM Crime WHERE iucr_no IN (SELECT iucr_no FROM IUCR WHERE primary_description = 'Simple Assault') AND community_area_no = (SELECT community_area_no FROM Community_Area WHERE community_area_name = 'Chatham') GROUP BY latitude, longitude ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ca.community_area_name FROM Crime c JOIN Community_Area ca ON c.community_area_no = ca.community_area_no JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE f.description = 'unlawful taking, carrying, leading, or riding away of property from the possession or constructive possession of another person' AND ca.side = 'South' GROUP BY ca.community_area_name ORDER BY COUNT(c.fbi_code_no) DESC LIMIT 1;
SELECT COUNT(*)  FROM Crime c JOIN Community_Area ca ON c.community_area_no = ca.community_area_no JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE ca.community_area_name = 'Englewood'  AND f.crime_against = 'Society';
WITH FraudIncidents AS (     SELECT          location_description,         COUNT(report_no) AS incident_count     FROM          Crime     WHERE          fbi_code_no IN (SELECT fbi_code_no FROM FBI_Code WHERE title = 'Fraud') AND         SUBSTR(date, 1, 1) = '1' AND          SUBSTR(date, 5, 4) = '2018'     GROUP BY          location_description ), WeeklyAverage AS (     SELECT          AVG(incident_count) AS weekly_average     FROM          FraudIncidents ) SELECT      weekly_average,     location_description FROM      WeeklyAverage,     (SELECT location_description FROM FraudIncidents ORDER BY incident_count DESC LIMIT 1) AS MajorityLocation;
SELECT community_area_name  FROM Community_Area  WHERE population > 50000  LIMIT 3;
SELECT community_area_name  FROM Community_Area  WHERE side = 'Central';
SELECT      (SELECT COUNT(community_area_no) FROM Community_Area WHERE side = 'South' AND population > 30000) -      (SELECT COUNT(community_area_no) FROM Community_Area WHERE side = 'North' AND population > 30000) AS difference;
SELECT phone, fax, tty, twitter  FROM District  WHERE district_name = 'Near West';
SELECT commander  FROM District  WHERE district_name = 'Lincoln';
SELECT iucr.primary_description AS general_description, iucr.secondary_description AS specific_description FROM IUCR iucr WHERE iucr.iucr_no = 275;
SELECT      (COUNT(CASE WHEN iucr.primary_description = 'CRIME SEXUAL ASSAULT' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_severe_sexual_assault FROM      Crime c JOIN      IUCR iucr ON c.iucr_no = iucr.iucr_no WHERE      iucr.index_code = 'I';
SELECT n.neighborhood_name  FROM Neighborhood n  JOIN Community_Area ca ON n.community_area_no = ca.community_area_no  WHERE ca.community_area_name = 'North Center';
SELECT COUNT(neighborhood_name)  FROM Neighborhood  WHERE community_area_no = (SELECT community_area_no FROM Community_Area WHERE community_area_name = 'Forest Glen');
SELECT SUM(ca.population) AS total_population FROM Neighborhood n JOIN Community_Area ca ON n.community_area_no = ca.community_area_no WHERE n.neighborhood_name IN ('Avondale Gardens', 'Irving Park', 'Kilbourn Park', 'Merchant Park', 'Old Irving Park', 'The Villa');
SELECT COUNT(report_no)  FROM Crime  WHERE fbi_code_no IN (     SELECT fbi_code_no      FROM FBI_Code      WHERE title = 'Weapons Violation' );
SELECT DISTINCT case_number FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE FBI_Code.title = 'Criminal Sexual Assault' AND FBI_Code.crime_against = 'Persons' AND Crime.arrest = 'TRUE' LIMIT 3;
SELECT d.district_name  FROM Crime c  JOIN District d ON c.district_no = d.district_no  WHERE c.case_number = 'JB106545';
SELECT IUCR.primary_description  FROM Crime  JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no  WHERE Crime.case_number = 'JB106010';
SELECT DISTINCT ca.community_area_name FROM Community_Area ca JOIN Crime c ON ca.community_area_no = c.community_area_no JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE f.title = 'Fraud Incident' LIMIT 3;
SELECT f.title AS major_crime_type FROM Crime c JOIN Community_Area ca ON c.community_area_no = ca.community_area_no JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE ca.community_area_name = 'Rogers Park' GROUP BY f.title ORDER BY COUNT(*) DESC LIMIT 1;
SELECT d.district_name FROM Crime c JOIN District d ON c.district_no = d.district_no WHERE c.case_number = 'JB120039' GROUP BY d.district_name HAVING COUNT(c.case_number) > 1;
SELECT      (COUNT(CASE WHEN c.fbi_code_no IN (SELECT f.fbi_code_no FROM FBI_Code f WHERE f.title = 'Drug Abuse') AND c.location_description = 'STREET' THEN 1 END) * 100.0) / COUNT(c.fbi_code_no) AS percentage FROM      Crime c;
SELECT ward_no  FROM Ward  ORDER BY Population DESC  LIMIT 1;
SELECT beat, location_description  FROM Crime  WHERE case_number = 'JB112212';
SELECT fbi_code_no  FROM FBI_Code  WHERE description = 'The killing of one human being by another.';
SELECT DISTINCT w.ward_office_address FROM Crime c JOIN Community_Area ca ON c.community_area_no = ca.community_area_no JOIN Ward w ON c.ward_no = w.ward_no WHERE ca.community_area_name = 'Montclare' LIMIT 5;
SELECT d.commander FROM Crime c JOIN District d ON c.district_no = d.district_no WHERE c.location_description = 'YARD' AND c.beat = 532;
SELECT n.neighborhood_name  FROM Neighborhood n  JOIN Community_Area ca ON n.community_area_no = ca.community_area_no  WHERE ca.community_area_name = 'Lake View';
SELECT n.neighborhood_name  FROM Crime c  JOIN Neighborhood n ON c.community_area_no = n.community_area_no  WHERE c.report_no = 23843;
SELECT f.description  FROM Crime c  JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no  WHERE c.report_no = 23778;
SELECT c.report_no FROM Crime c JOIN District d ON c.district_no = d.district_no WHERE d.commander = 'Jill M. Stevens';
SELECT      (COUNT(CASE WHEN c.location_description = 'HOUSE' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_inside_house FROM      Crime c JOIN      Neighborhood n ON c.community_area_no = n.community_area_no WHERE      n.neighborhood_name = 'Avalon Park';
SELECT CONCAT(alderman_first_name, ' ', alderman_last_name, ' ', alderman_name_suffix) AS full_name FROM Ward WHERE ward_no = 21;
SELECT ward_no  FROM Ward  ORDER BY Population DESC  LIMIT 1;
SELECT COUNT(*)  FROM Crime  WHERE iucr_no IN (SELECT iucr_no FROM IUCR WHERE primary_description = 'ASSAULT');
SELECT COUNT(*) AS severe_incidents FROM Crime WHERE iucr_no IN (     SELECT iucr_no     FROM IUCR     WHERE index_code = 'I' );
SELECT COUNT(*)  FROM Crime  WHERE arrest = 'FALSE'  AND ward_no = (SELECT ward_no FROM Ward WHERE alderman_first_name = 'Pat' AND alderman_last_name = 'Dowell');
SELECT CONCAT(w.alderman_first_name, ' ', w.alderman_last_name, ' ', w.alderman_name_suffix) AS full_name FROM Crime c JOIN Ward w ON c.ward_no = w.ward_no WHERE SUBSTR(c.date, 1, 1) = '1' AND SUBSTR(c.date, 5, 4) = '2018' GROUP BY w.ward_no, w.alderman_first_name, w.alderman_last_name, w.alderman_name_suffix ORDER BY COUNT(c.ward_no) DESC LIMIT 1;
SELECT COUNT(*)  FROM Crime  WHERE ward_no = (     SELECT ward_no      FROM Ward      WHERE Population = (SELECT MAX(Population) FROM Ward) ) AND domestic = 'TRUE';
SELECT latitude, longitude  FROM Crime  WHERE ward_no = (SELECT ward_no FROM Ward WHERE alderman_first_name = 'Pat' AND alderman_last_name = 'Dowell');
SELECT      w.alderman_first_name,      w.alderman_last_name,      COUNT(c.report_no) AS incident_count FROM      Crime c JOIN      Ward w ON c.ward_no = w.ward_no WHERE      SUBSTR(c.date, 1, 2) = '01' AND      SUBSTR(c.date, 4, 4) = '2018' AND      (w.alderman_first_name = 'Pat' AND w.alderman_last_name = 'Dowell' OR       w.alderman_first_name = 'Sophia' AND w.alderman_last_name = 'King') GROUP BY      w.alderman_first_name,      w.alderman_last_name ORDER BY      incident_count DESC LIMIT 1;
SELECT c.case_number FROM Crime c JOIN IUCR i ON c.iucr_no = i.iucr_no WHERE i.primary_description = 'BATTERY';
SELECT COUNT(*)  FROM Crime  WHERE iucr_no IN (SELECT iucr_no FROM IUCR WHERE primary_description = 'BATTERY')  AND arrest = 'FALSE';
SELECT c.case_number FROM Crime c JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE f.title = 'Homicide 1st & 2nd Degree';
SELECT COUNT(*)  FROM Crime  JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no  WHERE Substr(date, 1, 1) = '1' AND Substr(date, 5, 4) = '2018'  AND FBI_Code.crime_against = 'Property';
SELECT COUNT(*)  FROM Crime  WHERE district_no IN (     SELECT district_no      FROM District      WHERE commander = 'Robert A. Rubio' )  AND SUBSTR(date, 1, 1) = '1'  AND SUBSTR(date, 5, 4) = '2018';
SELECT commander, COUNT(*) AS incident_count FROM Crime JOIN District ON Crime.district_no = District.district_no WHERE (commander = 'Robert A. Rubio' OR commander = 'Glenn White') AND SUBSTR(date, 1, 2) = '01' AND SUBSTR(date, 7, 4) = '2018' GROUP BY commander ORDER BY incident_count DESC LIMIT 1;
SELECT DISTINCT c.block FROM Crime c JOIN District d ON c.district_no = d.district_no WHERE d.commander = 'Robert A. Rubio';
SELECT AVG(monthly_incidents) AS average_incidents_per_month FROM (     SELECT COUNT(c.case_number) AS monthly_incidents     FROM Crime c     JOIN Ward w ON c.ward_no = w.ward_no     WHERE w.Population = (SELECT MAX(Population) FROM Ward)       AND c.date LIKE '%2018%'     GROUP BY MONTH(c.date) ) AS monthly_counts;
SELECT      (COUNT(CASE WHEN iucr.primary_description = 'BATTERY' THEN 1 END) * 100.0 / COUNT(*)) AS battery_percentage FROM      Crime crime JOIN      IUCR iucr ON crime.iucr_no = iucr.iucr_no WHERE      crime.arrest = 'FALSE';
SELECT COUNT(*)  FROM businesses  WHERE owner_state = 'CA';
SELECT COUNT(DISTINCT business_id) AS restaurant_count FROM inspections WHERE score = 100;
SELECT COUNT(*)  FROM inspections  WHERE YEAR(date) = 2016 AND type = 'Routine - Unscheduled';
SELECT b.name  FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = 100;
SELECT COUNT(DISTINCT b.business_id)  FROM businesses b  JOIN inspections i ON b.business_id = i.business_id  WHERE YEAR(i.date) = 2016 AND b.city IN ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO');
SELECT type  FROM inspections  WHERE business_id = (SELECT business_id FROM businesses WHERE name = 'Tiramisu Kitchen')  AND date = '2014-01-14';
SELECT COUNT(*)  FROM violations v JOIN inspections i ON v.business_id = i.business_id AND v.date = i.date JOIN businesses b ON i.business_id = b.business_id WHERE b.name = 'Tiramisu Kitchen'  AND i.date = '2014-01-14'  AND v.risk_category = 'Low Risk';
SELECT DISTINCT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id JOIN violations v ON b.business_id = v.business_id AND i.date = v.date WHERE YEAR(i.date) = 2014 AND v.risk_category = 'Low Risk';
SELECT description  FROM violations  WHERE business_id = (SELECT business_id FROM businesses WHERE name = 'Tiramisu Kitchen')  AND date = '2014-01-14'  AND risk_category = 'Low Risk';
SELECT v.description  FROM violations v  JOIN businesses b ON v.business_id = b.business_id  WHERE b.name = 'Tiramisu Kitchen' AND v.risk_category = 'High Risk';
SELECT COUNT(*)  FROM inspections  WHERE business_id = (SELECT business_id FROM businesses WHERE name = 'Tiramisu Kitchen')  AND type = 'Routine - Unscheduled';
SELECT COUNT(*)  FROM inspections  WHERE business_id = (SELECT business_id FROM businesses WHERE name = 'Tiramisu Kitchen')  AND type = 'Routine - Unscheduled'  AND score > 70;
SELECT name, COUNT(*) AS low_risk_violations FROM violations WHERE business_id IN (     SELECT business_id FROM businesses WHERE name IN ('Tiramisu Kitchen', 'OMNI S.F. Hotel - 2nd Floor Pantry') ) AND risk_category = 'Low Risk' GROUP BY name ORDER BY low_risk_violations DESC LIMIT 1;
SELECT COUNT(*) AS total_high_risk_violations FROM violations v JOIN businesses b ON v.business_id = b.business_id WHERE b.city IN ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO') AND v.risk_category = 'High Risk';
SELECT b.name, COUNT(v.violation_type_id) AS high_risk_count FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High Risk' GROUP BY b.business_id ORDER BY high_risk_count DESC LIMIT 1;
SELECT AVG(i.score) AS average_score FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE b.name = 'Tiramisu Kitchen';
SELECT business_id FROM inspections GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1;
SELECT business_id FROM violations GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1;
SELECT b.name  FROM businesses b  JOIN inspections i ON b.business_id = i.business_id  WHERE i.score = 100  AND i.type = 'Routine - Unscheduled'  AND i.date = '2016-09-28';
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High' GROUP BY b.business_id, b.name ORDER BY COUNT(v.business_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT violation_type_id)  FROM violations  WHERE business_id = (SELECT business_id FROM businesses WHERE name = 'Stacks Restaurant')  AND date = '2016-10-04';
SELECT v.description  FROM violations v  JOIN businesses b ON v.business_id = b.business_id  WHERE b.name = 'Chez Fayala, Inc.'  AND v.risk_category = 'Moderate Risk'  AND v.date = '2016-07-01';
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.type = 'Routine - Unscheduled' AND i.date = '2016-09-26' ORDER BY i.score ASC LIMIT 1;
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.type = 'Complaint' GROUP BY b.business_id, b.name ORDER BY COUNT(i.business_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM inspections  JOIN businesses ON inspections.business_id = businesses.business_id  WHERE businesses.name = 'Soma Restaurant And Bar'  AND inspections.type = 'Routine - Unscheduled';
SELECT b.address FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'Low Risk' GROUP BY b.business_id, b.address HAVING COUNT(v.business_id) = (     SELECT MAX(low_risk_count)     FROM (         SELECT COUNT(business_id) AS low_risk_count         FROM violations         WHERE risk_category = 'Low Risk'         GROUP BY business_id     ) AS counts );
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'Low Risk' AND v.description = 'Permit license or inspection report not posted' ORDER BY v.date ASC LIMIT 1;
SELECT COUNT(i.business_id) AS inspection_count FROM inspections i JOIN (     SELECT business_id     FROM violations     GROUP BY business_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) v ON i.business_id = v.business_id;
SELECT COUNT(*)  FROM violations  WHERE business_id = (SELECT business_id FROM businesses WHERE business_certificate = '304977')  AND date = '2013-10-07';
SELECT AVG(score) AS average_score FROM inspections i JOIN businesses b ON i.business_id = b.business_id WHERE b.name = 'Chairman Bao' AND i.type = 'Routine - Unscheduled';
SELECT      DIVIDE(COUNT(CASE WHEN v.risk_category = 'Moderate Risk' THEN 1 END), COUNT(v.business_id)) * 100 AS percentage FROM      businesses b JOIN      violations v ON b.business_id = v.business_id WHERE      b.name = 'Melody Lounge';
SELECT COUNT(*) FROM businesses WHERE city = 'HAYWARD';
SELECT COUNT(DISTINCT business_id)  FROM inspections  WHERE score < 50;
SELECT COUNT(*)  FROM businesses  WHERE application_date BETWEEN '2012-01-01' AND '2012-12-31';
SELECT COUNT(*)  FROM inspections  WHERE type = 'Foodborne Illness Investigation'  AND date BETWEEN '2014-01-01' AND '2014-12-31';
SELECT owner_name, COUNT(business_id) AS establishment_count FROM businesses GROUP BY owner_name HAVING COUNT(business_id) >= 5;
SELECT b.name  FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = 100 AND YEAR(i.date) = 2013;
SELECT city, COUNT(DISTINCT b.business_id) AS establishment_count FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High Risk' AND YEAR(v.date) = 2016 GROUP BY city ORDER BY establishment_count DESC LIMIT 1;
SELECT b.name  FROM businesses b  JOIN inspections i ON b.business_id = i.business_id  WHERE i.score = (SELECT MIN(score) FROM inspections);
SELECT COUNT(*)  FROM violations  WHERE business_id = (SELECT business_id FROM businesses WHERE name = 'Tiramisu Kitchen')  AND risk_category = 'High Risk';
SELECT COUNT(DISTINCT b.business_id)  FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE b.tax_code = 'H24' AND i.type = 'Complaint' GROUP BY b.business_id HAVING COUNT(i.business_id) >= 5;
SELECT DISTINCT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.description = 'Contaminated or adulterated food' AND v.date LIKE '2013%';
SELECT COUNT(DISTINCT b.business_id)  FROM businesses b  JOIN inspections i ON b.business_id = i.business_id  WHERE b.postal_code = '94102' AND i.score >= 90 AND YEAR(i.date) = 2015;
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = 100 GROUP BY b.business_id HAVING COUNT(DISTINCT YEAR(i.date)) = 4;
SELECT AVG(i.score) AS average_inspection_score FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE b.owner_name = 'Yiu Tim Chan'   AND b.address = '808 Pacific Ave'   AND b.city = 'San Francisco'   AND YEAR(i.date) BETWEEN 2014 AND 2016;
SELECT AVG(i.score) AS average_score FROM inspections i JOIN businesses b ON i.business_id = b.business_id WHERE b.owner_name = (     SELECT owner_name     FROM businesses     GROUP BY owner_name     ORDER BY COUNT(business_id) DESC     LIMIT 1 );
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'Low Risk' AND YEAR(v.date) = 2014 GROUP BY b.business_id ORDER BY COUNT(v.violation_type_id) DESC LIMIT 1;
SELECT owner_name FROM (     SELECT b.owner_name, COUNT(b.business_id) AS establishment_count     FROM businesses b     GROUP BY b.owner_name     ORDER BY establishment_count DESC     LIMIT 5 ) AS top_owners JOIN (     SELECT v.business_id, COUNT(v.risk_category) AS high_risk_count     FROM violations v     WHERE v.risk_category = 'High Risk'     GROUP BY v.business_id ) AS high_risk_violations ON top_owners.owner_name = (SELECT owner_name FROM businesses WHERE business_id = high_risk_violations.business_id) ORDER BY high_risk_count DESC LIMIT 1;
SELECT b.name, AVG(i.score) AS average_score FROM businesses b JOIN inspections i ON b.business_id = i.business_id GROUP BY b.business_id ORDER BY COUNT(i.business_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT business_id)  FROM inspections  WHERE score = 100 AND YEAR(date) = 2013;
SELECT business_id  FROM inspections  WHERE type = 'Structural Inspection'  AND YEAR(date) = 2016  AND MONTH(date) = 2;
SELECT COUNT(DISTINCT b.business_id) AS low_risk_eateries FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'Low Risk'  AND v.description LIKE '%unpermitted food facility%';
SELECT business_id, risk_category, description  FROM violations  WHERE violation_type_id = '103101';
SELECT MAX(i.date) AS highest_score_date FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE b.city = 'San Bruno' AND i.score = 100;
SELECT i.type AS inspection_type, v.description AS violation_description FROM businesses b JOIN inspections i ON b.business_id = i.business_id JOIN violations v ON b.business_id = v.business_id WHERE b.name = "ART's CAFÉ" AND v.risk_category = 'Moderate Risk';
SELECT violation_type_id, description  FROM violations  WHERE business_id IN (SELECT business_id FROM businesses WHERE name = 'STARBUCKS')  AND risk_category = 'High Risk';
SELECT i.date, i.score, i.type FROM inspections i JOIN businesses b ON i.business_id = b.business_id WHERE b.tax_code = 'AA';
SELECT b.business_id, b.name, b.address FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.date = '2016-07-30';
SELECT v.date, v.risk_category, v.description, b.name FROM violations v JOIN businesses b ON v.business_id = b.business_id WHERE b.owner_name = 'Jade Chocolates LLC';
SELECT b.name, v.risk_category, v.description FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.violation_type_id = 103111;
SELECT b.name, b.city, b.tax_code FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.date = '2014-06-03' AND v.risk_category = 'High Risk' LIMIT 5;
SELECT type  FROM inspections  WHERE business_id = (SELECT business_id FROM businesses WHERE name = 'El Aji Peruvian Restaurant')  AND score = (SELECT MAX(score) FROM inspections WHERE business_id = (SELECT business_id FROM businesses WHERE name = 'El Aji Peruvian Restaurant'));
SELECT DISTINCT b.owner_name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High Risk'  AND v.description = 'Improper cooking time or temperatures';
SELECT b.name, b.address FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.date = '2015-02-02' AND i.type = 'Reinspection/Followup';
SELECT b.name, b.business_certificate FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score < 50;
SELECT COUNT(*)  FROM businesses  WHERE address = '1825 POST St #223' AND city = 'San Francisco';
SELECT owner_name FROM businesses WHERE owner_zip = '94104';
SELECT COUNT(*) AS total_businesses FROM businesses WHERE tax_code = 'H25';
SELECT COUNT(*)  FROM violations  WHERE YEAR(date) = 2014 AND risk_category = 'Low Risk';
SELECT b.business_id, v.risk_category FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE b.owner_name = 'San Francisco Madeleine, Inc.';
SELECT b.owner_name  FROM businesses b  JOIN inspections i ON b.business_id = i.business_id  WHERE i.score = 100;
SELECT COUNT(DISTINCT b.business_id) AS total_high_risk_businesses FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE b.postal_code = '94117' AND v.risk_category = 'High Risk';
SELECT v.violation_type_id, v.risk_category FROM businesses b JOIN inspections i ON b.business_id = i.business_id JOIN violations v ON b.business_id = v.business_id WHERE i.score BETWEEN 70 AND 80;
SELECT b.tax_code, i.type FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE b.name = 'Rue Lepic';
SELECT b.name  FROM businesses b  JOIN violations v ON b.business_id = v.business_id  JOIN inspections i ON b.business_id = i.business_id  WHERE v.violation_type_id = 103157  AND v.date = '2016-05-27'  AND i.type = 'Routine - Unscheduled';
SELECT b.owner_name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.violation_type_id = 103109    AND v.risk_category = 'High Risk'    AND v.description = 'Unclean or unsanitary food contact surfaces';
SELECT b.name  FROM businesses b  JOIN inspections i ON b.business_id = i.business_id  WHERE b.owner_city = 'Cameron Park' AND i.score = 100;
SELECT violation_type_id  FROM violations  WHERE business_id BETWEEN 30 AND 50  AND business_id IN (SELECT business_id FROM businesses WHERE address = '747 IRVING St' AND city = 'San Francisco');
SELECT b.owner_name  FROM businesses b  JOIN violations v ON b.business_id = v.business_id  WHERE v.violation_type_id = 103156 AND v.date = '2014-06-12';
SELECT i.type FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE b.owner_address = '500 California St, 2nd Floor' AND b.owner_city = 'SAN FRANCISCO' ORDER BY i.score DESC LIMIT 1;
SELECT COUNT(*)  FROM violations v JOIN inspections i ON v.business_id = i.business_id AND v.date = i.date WHERE YEAR(v.date) = 2016 AND i.type = 'Routine - Unschedule';
SELECT b.name, v.risk_category FROM businesses b JOIN inspections i ON b.business_id = i.business_id JOIN violations v ON b.business_id = v.business_id WHERE i.score > (0.8 * (SELECT AVG(score) FROM inspections));
SELECT      (COUNT(CASE WHEN v.risk_category = 'Low Risk' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      businesses b JOIN      inspections i ON b.business_id = i.business_id JOIN      violations v ON b.business_id = v.business_id WHERE      i.score < 95 AND b.postal_code = '94110';
SELECT DISTINCT b.state FROM breweries b JOIN beers br ON b.id = br.brewery_id WHERE br.ibu = (SELECT MIN(ibu) FROM beers);
SELECT b.name AS brewery_name, br.city FROM breweries br JOIN beers b ON br.id = b.brewery_id WHERE br.state = 'NY' ORDER BY b.ibu DESC LIMIT 1;
SELECT AVG(abv) AS average_abv FROM beers JOIN breweries ON beers.brewery_id = breweries.id WHERE breweries.name = 'Boston Beer Company' AND beers.ounces = 12;
SELECT      (COUNT(CASE WHEN b.style = 'American Adjunct Lager' THEN 1 END) * 100.0 / COUNT(*)) AS percent_allotted FROM      breweries br JOIN      beers b ON br.id = b.brewery_id WHERE      br.name = 'Stevens Point Brewery';
WITH BitterBeers AS (     SELECT b.city, b.state, MAX(be.ibu) AS max_ibu, MIN(be.ibu) AS min_ibu     FROM breweries b     JOIN beers be ON b.id = be.brewery_id     GROUP BY b.city, b.state ), MostLeastBitter AS (     SELECT city, state, max_ibu, min_ibu, (max_ibu - min_ibu) AS bitterness_difference     FROM BitterBeers ) SELECT mlb.city, mlb.state, mlb.max_ibu, mlb.min_ibu, mlb.bitterness_difference,         (SELECT GROUP_CONCAT(be.name)          FROM beers be          JOIN breweries b ON b.id = be.brewery_id          WHERE b.city = mlb.city AND b.state = mlb.state AND be.ibu = mlb.max_ibu) AS most_bitter_beers,        (SELECT GROUP_CONCAT(be.name)          FROM beers be          JOIN breweries b ON b.id = be.brewery_id          WHERE b.city = mlb.city AND b.state = mlb.state AND be.ibu = mlb.min_ibu) AS least_bitter_beers FROM MostLeastBitter mlb;
SELECT      (COUNT(DISTINCT b.id) * 100.0 / (SELECT COUNT(*) FROM breweries)) AS percentage FROM      breweries br JOIN      beers b ON br.id = b.brewery_id WHERE      b.style = 'American Blonde Ale' AND br.state = 'Wisconsin';
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id ORDER BY n.total_fat DESC LIMIT 1;
SELECT (n.total_fat - n.sat_fat) AS unsaturated_fat FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE r.title = 'Raspberry Chiffon Pie';
SELECT r.title  FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.sodium < 5;
SELECT r.title  FROM Recipe r  JOIN Nutrition n ON r.recipe_id = n.recipe_id  WHERE n.iron > 20;
SELECT title, vitamin_c  FROM Recipe  JOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id  WHERE title IN ('Raspberry Chiffon Pie', 'Fresh Apricot Bavarian')  ORDER BY vitamin_c DESC  LIMIT 1;
SELECT title  FROM Recipe  WHERE prep_min > 10  ORDER BY (SELECT calories FROM Nutrition WHERE recipe_id = Recipe.recipe_id) DESC  LIMIT 1;
SELECT calories FROM Nutrition  JOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id  WHERE Recipe.title = 'Raspberry Chiffon Pie';
SELECT optional  FROM Quantity q  JOIN Recipe r ON q.recipe_id = r.recipe_id  JOIN Ingredient i ON q.ingredient_id = i.ingredient_id  WHERE i.name = 'graham cracker crumbs' AND r.title = 'Raspberry Chiffon Pie';
SELECT COUNT(*) AS rationed_ingredients FROM Quantity q JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE r.title = 'Raspberry Chiffon Pie' AND q.max_qty = q.min_qty;
SELECT i.name  FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE r.title = 'Raspberry Chiffon Pie' AND q.preparation IS NULL;
SELECT COUNT(DISTINCT q.recipe_id) AS recipe_count FROM Quantity q JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'graham cracker crumbs';
SELECT MIN(q.max_qty) AS min_cups FROM Quantity q JOIN Recipe r ON q.recipe_id = r.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE r.title = 'Raspberry Chiffon Pie' AND i.name = 'graham cracker crumbs' AND q.unit = 'cups';
SELECT (n.calories * n.pcnt_cal_fat) / 100 AS calories_from_fat FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE r.title = 'Raspberry Chiffon Pie';
SELECT AVG(calories) AS average_calories FROM Nutrition n JOIN Recipe r ON n.recipe_id = r.recipe_id WHERE r.source = 'Produce for Better Health Foundation and 5 a Day';
SELECT calories  FROM Nutrition  WHERE recipe_id = (SELECT recipe_id FROM Recipe WHERE title = 'turkey tenderloin bundles');
SELECT max_qty  FROM Quantity  WHERE recipe_id = 1436 AND ingredient_id = (SELECT ingredient_id FROM Ingredient WHERE name = '1% lowfat milk');
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.total_fat = (SELECT MAX(total_fat) FROM Nutrition);
SELECT COUNT(*)  FROM Quantity q JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'seedless red grapes';
SELECT i.name  FROM Quantity q  JOIN Ingredient i ON q.ingredient_id = i.ingredient_id  WHERE q.recipe_id = 1397 AND q.optional = 'TRUE';
SELECT r.title FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'frozen raspberries in light syrup' AND q.max_qty = q.min_qty ORDER BY q.max_qty DESC LIMIT 1;
SELECT name  FROM Ingredient  WHERE ingredient_id = (     SELECT ingredient_id      FROM Quantity      GROUP BY ingredient_id      ORDER BY COUNT(ingredient_id) DESC      LIMIT 1 );
SELECT preparation  FROM Quantity q JOIN Ingredient i ON q.ingredient_id = i.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE i.name = 'apple juice' AND r.title = 'raspberry-pear couscous cake';
SELECT q.max_qty FROM Quantity q JOIN Recipe r ON q.recipe_id = r.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE r.title = 'chicken pocket sandwich' AND i.name = 'almonds' AND q.unit = 'cups';
SELECT r.title  FROM Recipe r  JOIN Nutrition n ON r.recipe_id = n.recipe_id  WHERE n.vitamin_c = (SELECT MAX(vitamin_c) FROM Nutrition);
SELECT n.vitamin_a  FROM Recipe r  JOIN Nutrition n ON r.recipe_id = n.recipe_id  WHERE r.title = 'Sherried Beef';
SELECT r.title FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id GROUP BY r.recipe_id, r.title ORDER BY COUNT(DISTINCT q.ingredient_id) DESC LIMIT 1;
SELECT      (SELECT sodium FROM Nutrition n JOIN Recipe r ON n.recipe_id = r.recipe_id WHERE r.title = 'Lasagne-Spinach Spirals') /      (SELECT sodium FROM Nutrition n JOIN Recipe r ON n.recipe_id = r.recipe_id WHERE r.title = 'Beef and Spinach Pita Pockets') AS sodium_ratio;
SELECT AVG(n.calories) AS average_calories FROM Nutrition n JOIN Quantity q ON n.recipe_id = q.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'coarsely ground black pepper';
SELECT r.title  FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.iron > 20;
SELECT COUNT(*)  FROM Quantity  WHERE recipe_id = (SELECT recipe_id FROM Recipe WHERE title = 'Apricot Yogurt Parfaits');
SELECT i.name  FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id WHERE q.preparation LIKE '%cook in beef broth%';
SELECT COUNT(q.ingredient_id) AS ingredient_count FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id JOIN Quantity q ON r.recipe_id = q.recipe_id WHERE n.vitamin_a = (SELECT MAX(vitamin_a) FROM Nutrition);
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id ORDER BY n.vitamin_c DESC LIMIT 5;
SELECT ingredient_id FROM Quantity GROUP BY ingredient_id ORDER BY COUNT(recipe_id) ASC LIMIT 1;
SELECT COUNT(*)  FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE i.category = 'baking product' AND r.title = 'No-Bake Chocolate Cheesecake';
SELECT i.name, q.max_qty, q.min_qty, q.unit FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE r.title = 'Strawberry Sorbet';
SELECT i.name, q.max_qty, q.min_qty, q.unit, q.preparation FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE r.title = 'Warm Chinese Chicken Salad' AND q.optional = 'TRUE';
SELECT title, MAX(prep_min) AS longest_prep_time FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.alcohol > 10 GROUP BY r.recipe_id, r.title ORDER BY longest_prep_time DESC LIMIT 1;
SELECT servings  FROM Recipe  WHERE recipe_id = (     SELECT recipe_id      FROM Nutrition      ORDER BY (total_fat - sat_fat) DESC      LIMIT 1 );
SELECT r.title, n.calories FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE r.source = 'National Potato Board' ORDER BY n.calories DESC LIMIT 1;
SELECT r.recipe_id, r.title, (SUM(q.max_qty) + SUM(q.min_qty) + r.prep_min + r.cook_min + r.stnd_min) AS total_time FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id GROUP BY r.recipe_id ORDER BY COUNT(q.ingredient_id) DESC LIMIT 1;
SELECT      i.name,      COUNT(q.ingredient_id) AS appearance_count,     (COUNT(q.ingredient_id) * 100.0 / (SELECT COUNT(*) FROM Quantity)) AS appearance_percentage FROM      Quantity q JOIN      Ingredient i ON q.ingredient_id = i.ingredient_id GROUP BY      i.ingredient_id ORDER BY      appearance_count DESC LIMIT 1;
SELECT r.title, (r.prep_min + r.cook_min + r.stnd_min) AS total_time FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id ORDER BY n.total_fat DESC LIMIT 1;
SELECT r.title  FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'almond extract';
SELECT i.name, q.max_qty, q.min_qty, q.unit FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE r.title = 'Tomato-Cucumber Relish';
SELECT COUNT(*) AS ingredient_count FROM Quantity q JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE r.title = 'Idaho Potato Supreme';
SELECT i.name, q.max_qty, q.min_qty, q.unit FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id WHERE q.recipe_id = (     SELECT recipe_id     FROM Nutrition     ORDER BY carbo DESC     LIMIT 1 );
SELECT r.title  FROM Recipe r  JOIN Nutrition n ON r.recipe_id = n.recipe_id  WHERE n.iron > 20;
SELECT i.* FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.vitamin_a = (SELECT MAX(vitamin_a) FROM Nutrition);
SELECT i.name, q.max_qty FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE r.servings = 7;
SELECT      (COUNT(CASE WHEN sodium BETWEEN 0 AND 5 THEN recipe_id END) * 100.0) / COUNT(recipe_id) AS percentage_sodium_free FROM      Recipe r JOIN      Nutrition n ON r.recipe_id = n.recipe_id WHERE      r.source = 'The California Tree Fruit Agreement';
SELECT * FROM Ingredient  WHERE ingredient_id IN (     SELECT ingredient_id FROM Quantity      WHERE unit = 'slice(s)' );
SELECT COUNT(DISTINCT r.recipe_id) AS recipe_count FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.category = 'canned dairy';
SELECT r.title, (r.prep_min + r.cook_min + r.stnd_min) AS total_time FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'lima beans' GROUP BY r.recipe_id HAVING COUNT(DISTINCT i.ingredient_id) = 1;
SELECT      (COUNT(CASE WHEN r.servings >= 10 THEN r.recipe_id END) * 100.0 / COUNT(r.recipe_id)) AS percent_serving_10_or_more FROM      Recipe r JOIN      Quantity q ON r.recipe_id = q.recipe_id JOIN      Ingredient i ON q.ingredient_id = i.ingredient_id WHERE      i.name = 'sea bass';
SELECT total_fat  FROM Nutrition  JOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id  WHERE Recipe.title = 'Raspberry Chiffon Pie';
SELECT n.pcnt_cal_prot  FROM Recipe r  JOIN Nutrition n ON r.recipe_id = n.recipe_id  WHERE r.title = 'Raspberry Chiffon Pie';
SELECT COUNT(*) AS ingredient_count FROM Quantity q JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE r.title = 'Raspberry Chiffon Pie';
SELECT r.title  FROM Recipe r  JOIN Nutrition n ON r.recipe_id = n.recipe_id  WHERE n.alcohol = 0;
SELECT AVG(n.vitamin_c) AS average_vitamin_c FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE r.title LIKE '%cake%';
SELECT COUNT(*)  FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.category = 'dairy' AND r.servings > 10;
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.iron > 20;
SELECT title, calories  FROM Recipe  JOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id  ORDER BY calories DESC  LIMIT 1;
SELECT COUNT(DISTINCT r.recipe_id) AS non_dairy_recipes FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.category NOT LIKE '%dairy';
SELECT i.name, q.max_qty, q.min_qty, q.unit FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE r.title = 'Apricot Yogurt Parfaits';
SELECT DISTINCT r.recipe_id, r.title FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id WHERE q.max_qty <> q.min_qty;
SELECT i.name, i.plural FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE r.cook_min = (SELECT MAX(cook_min) FROM Recipe);
SELECT      (COUNT(CASE WHEN n.cholestrl = 0 AND r.cook_min < 20 THEN r.recipe_id END) * 100.0) / COUNT(r.recipe_id) AS percentage_no_cholesterol_fast_cooking FROM      Recipe r JOIN      Nutrition n ON r.recipe_id = n.recipe_id;
SELECT      (COUNT(CASE WHEN n.calories > 200 THEN r.recipe_id END) * 100.0) / COUNT(r.recipe_id) AS percentage FROM      Recipe r JOIN      Quantity q ON r.recipe_id = q.recipe_id JOIN      Ingredient i ON q.ingredient_id = i.ingredient_id JOIN      Nutrition n ON r.recipe_id = n.recipe_id WHERE      i.category = 'cheese';
SELECT firstname, lastname  FROM employee  WHERE salary = (SELECT MAX(salary) FROM employee);
SELECT COUNT(*) AS good_performance_count FROM employee WHERE performance = 'Good';
SELECT ssn FROM employee WHERE gender = 'M' AND salary > 70000;
SELECT educationrequired  FROM position  WHERE positiontitle = 'Regional Manager';
SELECT positiontitle, MIN(minsalary) AS min_salary FROM position WHERE positiontitle IN ('Account Representative', 'Trainee') GROUP BY positiontitle ORDER BY min_salary ASC LIMIT 1;
SELECT l.locationcity  FROM employee e  JOIN location l ON e.locationID = l.locationID  WHERE e.firstname = 'Sandy' AND e.lastname = 'Adams';
SELECT COUNT(*)  FROM employee e  JOIN location l ON e.locationID = l.locationID  WHERE l.state = 'NY' AND e.performance = 'Good';
SELECT l.officephone  FROM employee e  JOIN location l ON e.locationID = l.locationID  WHERE e.firstname = 'Sandy' AND e.lastname = 'Adams';
SELECT COUNT(*)  FROM employee e  JOIN location l ON e.locationID = l.locationID  WHERE e.gender = 'M' AND l.address = '450 Peachtree Rd';
SELECT COUNT(*)  FROM employee  WHERE positionID IN (SELECT positionID FROM position WHERE positiontitle = 'Account Representative');
SELECT e.salary - p.minsalary AS salary_difference FROM employee e JOIN position p ON e.positionID = p.positionID WHERE e.firstname = 'James' AND e.lastname = 'Johnson';
SELECT COUNT(*)  FROM employee e  JOIN position p ON e.positionID = p.positionID  JOIN location l ON e.locationID = l.locationID  WHERE p.positiontitle = 'Trainees' AND l.state = 'NY';
SELECT CONCAT(firstname, ' ', lastname) AS full_name FROM employee WHERE positionID IN (SELECT positionID FROM position WHERE positiontitle = 'Trainee');
SELECT e.firstname, e.lastname, p.educationrequired FROM employee e JOIN position p ON e.positionID = p.positionID WHERE (e.firstname = 'Jose' AND e.lastname = 'Rodriguez')     OR (e.firstname = 'Sandy' AND e.lastname = 'Adams') ORDER BY p.educationrequired DESC LIMIT 1;
SELECT DISTINCT l.zipcode FROM employee e JOIN location l ON e.locationID = l.locationID WHERE e.gender = 'M' AND e.performance = 'Good';
SELECT e.ssn  FROM employee e  JOIN location l ON e.locationID = l.locationID  WHERE l.state = 'CA';
SELECT COUNT(*)  FROM employee  WHERE positionID = (SELECT positionID FROM position WHERE positiontitle = 'Trainee')  AND salary > 20000;
SELECT AVG(salary) AS average_salary FROM employee WHERE positionID IN (SELECT positionID FROM position WHERE positiontitle = 'Trainee');
SELECT (AVG(e.salary) - p.minsalary) / p.minsalary * 100 AS percentage_higher FROM employee e JOIN position p ON e.positionID = p.positionID WHERE p.positiontitle = 'Trainee';
SELECT COUNT(*) AS number_of_female_employees FROM employee WHERE gender = 'F';
SELECT l.locationcity  FROM employee e  JOIN location l ON e.locationID = l.locationID  WHERE e.firstname = 'Jose' AND e.lastname = 'Rodriguez';
SELECT l.state  FROM employee e  JOIN location l ON e.locationID = l.locationID  WHERE e.firstname = 'Emily' AND e.lastname = 'Wood';
SELECT p.educationrequired  FROM employee e  JOIN position p ON e.positionID = p.positionID  WHERE e.firstname = 'David' AND e.lastname = 'Whitehead';
SELECT COUNT(*)  FROM employee  WHERE locationID IN (SELECT locationID FROM location WHERE locationcity = 'Miami');
SELECT CONCAT(e.firstname, ' ', e.lastname) AS full_name FROM employee e JOIN location l ON e.locationID = l.locationID WHERE l.locationcity = 'Boston' ORDER BY e.salary DESC LIMIT 1;
SELECT e.ssn  FROM employee e  JOIN location l ON e.locationID = l.locationID  WHERE l.locationcity = 'New York City' AND e.performance = 'Good';
SELECT COUNT(*)  FROM employee e JOIN position p ON e.positionID = p.positionID JOIN location l ON e.locationID = l.locationID WHERE p.positiontitle = 'account representative'  AND l.locationcity = 'Chicago'  AND e.performance = 'Good';
SELECT p.positiontitle  FROM employee e  JOIN position p ON e.positionID = p.positionID  WHERE e.firstname = 'Kenneth' AND e.lastname = 'Charles';
SELECT CONCAT(l.address, ', ', l.locationcity, ', ', l.state, ' ', l.zipcode) AS full_address FROM employee e JOIN position p ON e.positionID = p.positionID JOIN location l ON e.locationID = l.locationID WHERE p.positiontitle = 'manager' AND e.salary = (SELECT MAX(salary) FROM employee WHERE positionID IN (SELECT positionID FROM position WHERE positiontitle = 'manager'));
SELECT MAX(p.maxsalary)  FROM employee e  JOIN position p ON e.positionID = p.positionID  WHERE e.firstname = 'Tracy' AND e.lastname = 'Coulter';
SELECT      (MAX(p.maxsalary) - e.salary) / e.salary * 100 AS salary_increase_percentage FROM      employee e JOIN      position p ON e.positionID = p.positionID WHERE      e.firstname = 'Jose' AND e.lastname = 'Rodriguez';
SELECT COUNT(*)  FROM employee  WHERE performance = 'Poor' AND salary > 50000;
SELECT firstname, lastname  FROM employee  WHERE salary = (SELECT MAX(salary) FROM employee);
SELECT COUNT(*)  FROM position  WHERE maxsalary <= 100000;
SELECT salary  FROM employee  WHERE hiredate = (SELECT MIN(hiredate) FROM employee);
SELECT minsalary  FROM position  WHERE educationrequired = (SELECT MAX(educationrequired) FROM position);
SELECT CONCAT(address, ', ', locationcity, ', ', state, ' ', zipcode) AS full_office_location_address FROM location WHERE locationID = (     SELECT locationID     FROM employee     GROUP BY locationID     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT AVG(salary) AS average_salary FROM employee WHERE positionID IN (     SELECT positionID     FROM position     WHERE educationrequired = '2 year degree' );
SELECT COUNT(*)  FROM employee  WHERE gender = 'M' AND positionID IN (SELECT positionID FROM position WHERE positiontitle = 'Regional Manager');
SELECT p.positiontitle FROM employee e JOIN position p ON e.positionID = p.positionID WHERE e.performance = 'Poor' GROUP BY p.positiontitle ORDER BY COUNT(e.ssn) DESC LIMIT 1;
SELECT positionID FROM employee WHERE educationrequired = '2 year degree' AND gender = 'F' GROUP BY positionID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*)  FROM employee e  JOIN position p ON e.positionID = p.positionID  JOIN location l ON e.locationID = l.locationID  WHERE p.positiontitle = 'Account Representative'  AND l.state = 'Illinois'  AND e.performance = 'good';
SELECT AVG(e.salary) AS average_salary FROM employee e JOIN position p ON e.positionID = p.positionID WHERE e.performance = 'Poor' AND p.positiontitle = 'Manager';
SELECT l.state, COUNT(e.ssn) AS good_performers FROM employee e JOIN position p ON e.positionID = p.positionID JOIN location l ON e.locationID = l.locationID WHERE e.performance = 'Good' AND p.positiontitle = 'Account Representative' GROUP BY l.state ORDER BY good_performers DESC LIMIT 1;
SELECT CONCAT(e.firstname, ' ', e.lastname) AS full_name, e.performance FROM employee e WHERE e.salary = (     SELECT MIN(salary)     FROM employee     WHERE YEAR(hiredate) = YEAR(e.hiredate) )
SELECT locationcity  FROM location  WHERE state IN ('CO', 'UT', 'CA');
SELECT locationcity, address FROM location WHERE zipcode > 90000;
SELECT positiontitle  FROM position  WHERE educationrequired = '4 year degree';
SELECT maxsalary FROM position WHERE positiontitle = 'Trainer';
SELECT CONCAT(firstname, ' ', lastname) AS full_name, ssn FROM employee WHERE positionID = (SELECT positionID FROM position WHERE positiontitle = 'Account Representative') AND performance = 'Average';
SELECT hiredate, positionID, salary  FROM employee  WHERE firstname = 'Emily' AND lastname = 'Wood';
SELECT p.positiontitle, p.minsalary, p.maxsalary FROM employee e JOIN position p ON e.positionID = p.positionID WHERE e.firstname = 'Bill' AND e.lastname = 'Marlin';
SELECT CONCAT(e.firstname, ' ', e.lastname) AS full_name, e.gender, p.positiontitle FROM employee e JOIN location l ON e.locationID = l.locationID JOIN position p ON e.positionID = p.positionID WHERE l.locationcity = 'New York City';
SELECT CONCAT(e.firstname, ' ', e.lastname) AS full_name, e.hiredate, e.performance FROM employee e JOIN location l ON e.locationID = l.locationID WHERE l.state = 'UT';
SELECT CONCAT(e.firstname, ' ', e.lastname) AS full_name, l.locationcity, l.address, l.zipcode FROM employee e JOIN position p ON e.positionID = p.positionID JOIN location l ON e.locationID = l.locationID WHERE e.performance = 'Poor' AND p.positiontitle = 'Manager';
SELECT      CONCAT(e.firstname, ' ', e.lastname) AS full_name,      e.salary,      p.educationrequired  FROM      employee e  JOIN      position p ON e.positionID = p.positionID  WHERE      p.positiontitle = 'Account Representative'      AND e.performance = 'Poor';
SELECT CONCAT(e.firstname, ' ', e.lastname) AS full_name, e.performance, l.locationcity FROM employee e JOIN location l ON e.locationID = l.locationID WHERE e.ssn = '767-74-7373';
SELECT CONCAT(e.firstname, ' ', e.lastname) AS full_name,         p.positiontitle,         l.locationcity,         l.officephone  FROM employee e  JOIN position p ON e.positionID = p.positionID  JOIN location l ON e.locationID = l.locationID  WHERE l.state = 'CO';
SELECT      e.firstname,      e.lastname,      p.positiontitle,      l.locationcity,      MAX(e.salary) / 12 AS monthly_average_salary FROM      employee e JOIN      position p ON e.positionID = p.positionID JOIN      location l ON e.locationID = l.locationID WHERE      e.salary = (SELECT MAX(salary) FROM employee) GROUP BY      e.firstname, e.lastname, p.positiontitle, l.locationcity;
SELECT start_station_name, end_station_name FROM trip ORDER BY duration DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN subscription_type = 'Subscriber' THEN 1 END) * 100.0 / COUNT(id)) AS percentage FROM      trip;
SELECT end_station_name, city  FROM trip  JOIN station ON trip.end_station_id = station.id  WHERE bike_id = 13  AND end_date = (SELECT MAX(end_date) FROM trip WHERE bike_id = 13);
SELECT trip.end_station_name, station.city FROM trip JOIN station ON trip.end_station_id = station.id WHERE DATE(trip.start_date) <> DATE(trip.end_date;
SELECT s.name, s.lat, s.long FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available = 0 AND st.time = '2013-11-03 02:01:01';
SELECT start_station_name, city FROM trip JOIN station ON trip.start_station_id = station.id GROUP BY start_station_name, city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT max_temperature_f  FROM weather  WHERE date = (SELECT start_date FROM trip WHERE id = 4080);
SELECT s.name, st.time, MAX(st.bikes_available) AS max_bikes_available FROM station s JOIN status st ON s.id = st.station_id WHERE s.name = 'San Jose Diridon Caltrain Station' GROUP BY s.name, st.time ORDER BY max_bikes_available DESC LIMIT 1;
SELECT trip.start_date, trip.duration FROM trip JOIN weather ON trip.start_date::date = weather.date WHERE weather.events = 'Rain';
SELECT start_date FROM trip WHERE end_station_id IN (     SELECT id     FROM station     WHERE lat = 37.331415 AND long = -121.8932 );
SELECT COUNT(*) AS bikes_borrowed FROM trip WHERE start_station_name = 'Redwood City' AND start_date LIKE '8%2013%';
SELECT      trip.start_station_name,      trip.end_station_name,      weather.mean_temperature_f FROM      trip JOIN      weather ON DATE(trip.start_date) = weather.date WHERE      trip.duration < 300;
SELECT      t.start_date::date AS borrowing_day,     AVG(w.min_temperature_f) AS average_coldest_temperature FROM      trip t JOIN      weather w ON t.start_date::date = w.date WHERE      t.start_date::date = (         SELECT              t2.start_date::date         FROM              trip t2         GROUP BY              t2.start_date::date         ORDER BY              COUNT(t2.id) DESC         LIMIT 1     ) GROUP BY      borrowing_day;
SELECT      trip.bike_id,     SUM(trip.duration) / COUNT(trip.bike_id) AS average_usage,     SUM(weather.wind_dir_degrees) / COUNT(weather.date) AS average_wind_direction FROM      trip JOIN      weather ON DATE(trip.start_date) = weather.date WHERE      trip.start_date >= '2013-07-01' AND trip.start_date < '2013-10-01' GROUP BY      trip.bike_id;
SELECT name  FROM station  WHERE city = 'San Jose'  AND installation_date BETWEEN '2014-01-01' AND '2014-12-31';
SELECT MAX(duration) AS longest_trip_duration FROM trip WHERE start_date = '2013-08-29' AND end_date = '2013-08-29';
SELECT duration / 60 AS duration_minutes FROM trip WHERE bike_id = 426   AND start_station_name = 'Market at 4th'   AND end_station_name = '2nd at South Park'   AND start_date::date = '2013-08-29'   AND end_date::date = '2013-08-29';
SELECT bike_id FROM trip WHERE start_date = '2013-08-29' AND end_date = '2013-08-29'   AND start_station_name = 'University and Emerson'   AND end_station_name = 'California Ave Caltrain Station' ORDER BY duration DESC LIMIT 1;
SELECT COUNT(*)  FROM station  WHERE city = 'San Francisco' AND dock_count > 20;
SELECT date FROM weather WHERE max_temperature_f = (SELECT MAX(max_temperature_f) FROM weather);
SELECT max_dew_point_f  FROM weather  WHERE date = '2014-07-15' AND zip_code = '94301';
SELECT YEAR(date) AS year, COUNT(*) AS rain_count FROM weather WHERE events = 'Rain' GROUP BY year ORDER BY rain_count DESC LIMIT 1;
SELECT MIN(duration) AS fastest_trip_duration, bike_id FROM trip WHERE start_station_id = (     SELECT id     FROM station     WHERE lat = '37.789625' AND long = '-122.400811' ) AND DATE(start_date) = '2014-10-20';
SELECT      s.dock_count,      t.end_station_name  FROM      trip t  JOIN      station s ON t.start_station_name = s.name  WHERE      s.name = 'South Van Ness at Market'      AND t.subscription_type = 'Subscriber'      AND t.start_date = '2013-12-01'  ORDER BY      t.duration ASC  LIMIT 1;
SELECT MAX(w.max_humidity) FROM trip t JOIN weather w ON DATE(t.start_date) = w.date WHERE t.start_station_name = 'Powell Street BART'   AND t.bike_id = '496'   AND DATE(t.start_date) = '2013-08-29';
SELECT      w.date,      COUNT(t.id) AS total_bikes_borrowed FROM      weather w JOIN      trip t ON DATE(t.start_date) = w.date WHERE      w.zip_code = '94301'      AND w.events = 'Fog'      AND w.date BETWEEN '2014-11-01' AND '2014-11-30' GROUP BY      w.date;
SELECT start_station_name, installation_date FROM trip JOIN station ON trip.start_station_id = station.id WHERE subscription_type = 'Customer' GROUP BY start_station_name, installation_date ORDER BY COUNT(*) ASC LIMIT 1;
SELECT s.name FROM status st JOIN station s ON st.station_id = s.id WHERE st.bikes_available = 0 AND st.time = '11/3/2013';
SELECT AVG(duration) AS average_duration FROM trip WHERE start_station_id IN (     SELECT id     FROM station     WHERE city = 'Palo Alto' );
SELECT      t.start_station_name,      s1.city AS start_city,      t.end_station_name,      s2.city AS end_city,      MAX(t.duration) AS longest_duration FROM      trip t JOIN      station s1 ON t.start_station_id = s1.id JOIN      station s2 ON t.end_station_id = s2.id GROUP BY      t.start_station_name, s1.city, t.end_station_name, s2.city ORDER BY      longest_duration DESC LIMIT 1;
SELECT name, installation_date, city  FROM station  WHERE installation_date BETWEEN '2013-08-05' AND '2013-12-31';
SELECT AVG(duration) AS average_duration FROM trip WHERE start_station_name = 'Adobe on Almaden' AND end_station_name = 'Ryland Park';
SELECT s.name, s.lat, s.long, st.time FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available = 0;
SELECT t.id AS trip_id, s.lat, s.long FROM trip t JOIN station s ON t.start_station_id = s.id WHERE t.start_station_name = t.end_station_name;
SELECT SUM(dock_count) - MAX(bikes_available) AS bikes_borrowed FROM status WHERE station_id = (SELECT id FROM station WHERE name = 'San Jose Diridon Caltrain Station') AND time = '2013-08-29 18:14:01';
SELECT trip.id FROM trip JOIN weather ON DATE(trip.start_date) = weather.date WHERE trip.bike_id = '10'   AND trip.subscription_type = 'Subscriber'   AND weather.mean_temperature_f > 62;
SELECT w.max_gust_speed_mph, w.cloud_cover FROM trip t JOIN weather w ON DATE(t.start_date) = w.date WHERE t.bike_id = 10   AND t.duration = 386   AND t.start_station_name = 'MLK Library'   AND t.end_station_name = 'San Salvador';
SELECT COUNT(*)  FROM trip  WHERE subscription_type = 'Subscriber'    AND start_station_name = '2nd at Folsom'    AND end_station_name = 'Civic Center BART (7th at Market)'    AND duration < 490    AND start_date IN (       SELECT date        FROM weather        WHERE mean_visibility_miles < 4   );
SELECT docks_available  FROM status  WHERE station_id = (SELECT start_station_id FROM trip WHERE id = 912900);
SELECT trip.id FROM trip JOIN weather ON trip.end_date::date = weather.date WHERE weather.min_temperature_f < 45;
WITH trip_data AS (     SELECT          duration,         MIN(duration) OVER () AS min_duration,         AVG(duration) OVER () AS avg_duration     FROM trip     WHERE          subscription_type = 'Subscriber' AND          start_station_name = '2nd at Folsom' AND          end_station_name = '5th at Howard' AND          start_date >= '2014-01-01 00:00' AND          end_date <= '2014-12-31 23:59' ), weather_data AS (     SELECT          w.min_temperature_f,         w.max_gust_speed_mph,         w.events     FROM weather w     JOIN trip t ON DATE(t.start_date) = w.date     WHERE          t.subscription_type = 'Subscriber' AND          t.start_station_name = '2nd at Folsom' AND          t.end_station_name = '5th at Howard' AND          t.start_date >= '2014-01-01 00:00' AND          t.end_date <= '2014-12-31 23:59' ) SELECT      td.min_duration,     td.avg_duration,     td.avg_duration - td.min_duration AS duration_difference,     wd.min_temperature_f,     wd.max_gust_speed_mph,     wd.events FROM trip_data td JOIN weather_data wd ON 1=1 LIMIT 1;
SELECT AVG(duration) AS average_ride_time FROM trip WHERE start_station_name = 'Steuart at Market'   AND end_station_name = 'Embarcadero at Sansome'   AND start_date >= '2014-07-01 00:00:00'   AND end_date <= '2014-07-31 23:59:59';
SELECT      AVG(max_temperature_f) AS average_max_temperature,     AVG(min_temperature_f) AS average_min_temperature FROM      weather WHERE      date BETWEEN '2015-05-01' AND '2015-05-31'     AND mean_humidity BETWEEN 65 AND 75;
SELECT      SUM(subscription_type = 'Subscriber') - SUM(subscription_type = 'Customer') AS difference FROM      trip WHERE      start_date BETWEEN '2013-06-01 00:00' AND '2013-06-30 23:59';
SELECT DISTINCT t.bike_id FROM trip t JOIN weather w ON DATE(t.start_date) = w.date WHERE YEAR(w.date) = 2013 AND w.events = 'Fog-Rain';
SELECT      t.duration,     w.mean_visibility_miles,     w.mean_wind_speed_mph,     w.events,     s1.name AS start_station_name,     s1.lat AS start_station_lat,     s1.long AS start_station_long,     s2.name AS end_station_name,     s2.lat AS end_station_lat,     s2.long AS end_station_long FROM      trip t JOIN      weather w ON DATE(t.start_date) = w.date JOIN      station s1 ON t.start_station_id = s1.id JOIN      station s2 ON t.end_station_id = s2.id WHERE      w.events = 'fog' ORDER BY      t.duration DESC LIMIT 1;
SELECT MIN(w.min_temperature_f) AS coldest_temperature FROM trip t JOIN weather w ON DATE(t.start_date) = w.date WHERE t.start_station_name = 'Market at 10th'   AND t.end_station_name = 'South Van Ness at Market'   AND t.start_date BETWEEN '2013-08-01 00:00' AND '2013-08-31 12:59';
SELECT start_station_name, end_station_name, duration FROM trip WHERE start_date IN (     SELECT date     FROM weather     WHERE events = 'rain' ) ORDER BY duration DESC LIMIT 1;
SELECT AVG(duration) AS average_ride_duration FROM trip t JOIN weather w ON DATE(t.start_date) = w.date WHERE w.precipitation_inches > 0.8 AND w.events LIKE '%rain%';
SELECT DISTINCT s.name, s.city FROM trip t JOIN station s ON t.start_station_id = s.id GROUP BY s.id, s.name, s.city HAVING AVG(t.duration) > (SELECT AVG(duration) FROM trip);
SELECT COUNT(*)  FROM station  WHERE city = 'San Francisco' AND installation_date LIKE '%2014%';
SELECT COUNT(*)  FROM trip  WHERE end_station_name IN (     SELECT name      FROM station      WHERE city = 'Mountain View' )  AND start_date LIKE '%2006%';
SELECT id  FROM trip  WHERE start_station_name IN (SELECT name FROM station WHERE city = 'Redwood City')  ORDER BY duration DESC  LIMIT 1;
SELECT DISTINCT trip.bike_id FROM trip JOIN station ON trip.start_station_id = station.id WHERE station.installation_date LIKE '%2013';
SELECT COUNT(*)  FROM trip  WHERE subscription_type = 'Subscriber'  AND end_station_name IN (SELECT name FROM station WHERE city = 'San Jose');
SELECT * FROM trip WHERE start_station_id = (     SELECT id     FROM station     WHERE dock_count = 15 ) ORDER BY duration ASC LIMIT 1;
SELECT EXTRACT(YEAR FROM start_date) AS trip_year, COUNT(*) AS trip_count FROM trip JOIN station ON trip.start_station_id = station.id WHERE station.city = 'San Francisco' GROUP BY trip_year ORDER BY trip_count DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN t.duration > 800 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      trip t JOIN      station s ON t.start_station_id = s.id WHERE      s.city = 'San Jose';
SELECT COUNT(*)  FROM trip  WHERE start_date LIKE '%2013%' AND duration > 1000;
SELECT AVG(duration) AS average_duration FROM trip WHERE start_station_name = 'South Van Ness at Market'  AND YEAR(start_date) = 2015;
SELECT COUNT(*) AS same_station_trips FROM trip WHERE start_station_id = end_station_id;
SELECT id  FROM trip  WHERE start_date = (SELECT date                       FROM weather                       ORDER BY max_temperature_f DESC                       LIMIT 1);
SELECT * FROM trip t JOIN weather w ON DATE(t.end_date) = w.date WHERE t.start_station_name = 'Mountain View City Hall' AND w.events = 'rain';
SELECT AVG(duration) AS average_duration FROM trip JOIN weather ON DATE(end_date) = date WHERE events = 'fog';
SELECT MAX(duration)  FROM trip  WHERE DATE(start_date) IN (     SELECT date      FROM weather      WHERE max_wind_speed_mph = 30 );
SELECT AVG(w.mean_temperature_f) AS average_temperature FROM trip t JOIN weather w ON DATE(t.start_date) = w.date WHERE t.start_station_name = 'Market at 4th' AND t.start_date LIKE '%2013%';
SELECT w.mean_humidity FROM trip t JOIN weather w ON DATE(t.start_date) = w.date WHERE t.id = 4275;
SELECT      (COUNT(CASE WHEN w.events = 'Rain' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      trip t JOIN      weather w ON DATE(t.end_date) = w.date WHERE      t.subscription_type = 'Customer'      AND t.end_date LIKE '%2015%';
SELECT COUNT(*)  FROM station  WHERE year(installation_date) > 2013 AND city = 'San Jose';
SELECT mean_temperature_f  FROM weather  WHERE date = '8/29/2013' AND zip_code = '94107';
SELECT MAX(max_temperature_f) - MIN(min_temperature_f) AS temperature_difference FROM weather WHERE date = '2013-08-29' AND zip_code = '94107';
SELECT bikes_available  FROM status  JOIN station ON status.station_id = station.id  WHERE station.name = 'San Jose Diridon Caltrain Station'  AND status.time = '2013-08-29 12:06:01';
SELECT city  FROM station  WHERE id = (SELECT start_station_id FROM trip WHERE id = 4069);
SELECT COUNT(*)  FROM trip  WHERE start_date LIKE '9%' AND start_date LIKE '%2013'  AND start_date IN (     SELECT date      FROM weather      WHERE max_temperature_f > 70 AND zip_code = '94107' );
SELECT DISTINCT trip.start_station_name FROM trip JOIN weather ON trip.start_date::date = weather.date WHERE weather.max_humidity > 80 AND weather.zip_code = '94107' AND trip.start_date LIKE '%2013%';
SELECT COUNT(*)  FROM trip  WHERE subscription_type = 'Subscriber'  AND start_date LIKE '8%'  AND start_date LIKE '%2013%'  AND start_station_id IN (     SELECT id      FROM station      WHERE dock_count > 20 );
SELECT s.lat, s.long FROM trip t JOIN station s ON t.start_station_id = s.id WHERE t.duration = (SELECT MAX(duration) FROM trip);
SELECT s.docks_available FROM trip t JOIN status s ON t.end_station_id = s.station_id WHERE t.id = 4069;
SELECT COUNT(*)  FROM trip  WHERE start_date LIKE '%2013%'  AND start_station_name = '2nd at Townsend'  AND start_date IN (     SELECT date      FROM weather      WHERE events = 'fog' );
SELECT MAX(duration)  FROM trip  WHERE start_date LIKE '%2013%'  AND start_date IN (SELECT date FROM weather WHERE events = 'fog');
SELECT s.installation_date  FROM station s  JOIN trip t ON s.id = t.start_station_id  WHERE t.id = 4069;
SELECT COUNT(*)  FROM trip  WHERE start_station_id IN (     SELECT id      FROM station      WHERE city = 'San Francisco' ) AND subscription_type = 'Subscriber';
SELECT COUNT(*)  FROM trip  WHERE start_station_name = '2nd at Folsom'  AND start_date LIKE '%2014%'  AND DATE(start_date) = (     SELECT date      FROM weather      WHERE max_temperature_f = (         SELECT MAX(max_temperature_f)          FROM weather          WHERE date LIKE '%2014%'     ) );
SELECT AVG(duration) AS average_duration FROM trip WHERE start_date LIKE '%2014%' AND start_date IN (     SELECT date     FROM weather     WHERE max_temperature_f = (         SELECT MAX(max_temperature_f)         FROM weather         WHERE date LIKE '%2014%'     ) );
SELECT DISTINCT end_station_name  FROM trip  WHERE start_station_name = '2nd at South Park';
SELECT COUNT(*)  FROM weather  WHERE events = 'rain' AND zip_code = 94041;
SELECT MAX(dock_count) AS total_bikes FROM station WHERE city = 'Redwood City' AND YEAR(installation_date) < 2014;
SELECT MAX(duration) / 86400 AS longest_trip_duration_days FROM trip;
SELECT      date,     (max_temperature_f - 32) / 1.800 AS Celsius1,     (mean_temperature_f - 32) / 1.800 AS Celsius2,     (min_temperature_f - 32) / 1.800 AS Celsius3 FROM      weather WHERE      zip_code IN (SELECT DISTINCT zip_code FROM station WHERE city = 'San Francisco')     AND date BETWEEN '2013-08-01' AND '2013-08-31';
SELECT      SUM(CASE WHEN subscription_type = 'Subscriber' THEN 1 ELSE 0 END) AS subscriber_count,     SUM(CASE WHEN subscription_type = 'Customer' THEN 1 ELSE 0 END) AS customer_count,     (SUM(CASE WHEN subscription_type = 'Subscriber' THEN 1 ELSE 0 END) * 1.0 /       NULLIF(SUM(CASE WHEN subscription_type = 'Customer' THEN 1 ELSE 0 END), 0)) AS ratio FROM      trip WHERE      start_station_name = '2nd at South Park'      AND end_station_name = '2nd at South Park';
SELECT COUNT(*) = 0 AS all_stations_in_sf FROM station WHERE city <> 'San Francisco' AND id IN (     SELECT station_id     FROM status     WHERE station_id IN (         SELECT id         FROM station         WHERE city = 'San Francisco' AND id IN (             SELECT start_station_id             FROM trip             WHERE zip_code = '94107'         )     ) );
SELECT s.name  FROM station s  JOIN weather w ON s.city = w.zip_code  WHERE w.mean_temperature_f = (20 * 1.8 + 32)  AND w.date LIKE '%2014%';
SELECT COUNT(*)  FROM trip  WHERE start_station_id IN (     SELECT id      FROM station      WHERE city = 'San Jose' )  AND start_date LIKE '8/%/2013%';
SELECT DISTINCT s1.city AS start_city, s2.city AS end_city FROM trip t JOIN station s1 ON t.start_station_id = s1.id JOIN station s2 ON t.end_station_id = s2.id WHERE t.start_station_name != t.end_station_name AND t.start_date LIKE '%2014%';
SELECT DIVIDE(SUM(duration), 3600) AS hour FROM trip WHERE bike_id = 16 AND start_station_name != end_station_name;
SELECT      (COUNT(CASE WHEN subscription_type = 'customer' THEN 1 END) * 1.0) /      NULLIF(COUNT(CASE WHEN subscription_type = 'subscriber' THEN 1 END), 0) AS ratio FROM      trip WHERE      start_station_id IN (SELECT id FROM station WHERE city = 'Mountain View')     OR end_station_id IN (SELECT id FROM station WHERE city = 'Mountain View');
SELECT DIVIDE(SUM(t.duration), 3600) AS total_trip_duration_hours FROM trip t JOIN station s ON t.start_station_id = s.id WHERE s.city = 'Palo Alto';
SELECT      trip.bike_id,      SUM(trip.duration) / 3600 AS total_duration_hours FROM      trip JOIN      station AS start_station ON trip.start_station_id = start_station.id JOIN      station AS end_station ON trip.end_station_id = end_station.id WHERE      start_station.city = end_station.city GROUP BY      trip.bike_id ORDER BY      COUNT(trip.id) ASC LIMIT 1;
SELECT COUNT(*)  FROM trip  WHERE start_station_name = 'Market at 4th'  AND subscription_type = 'subscriber';
SELECT name  FROM station  WHERE city = 'Mountain View' AND installation_date = '2013-12-31';
SELECT city, SUM(dock_count) AS total_dock_count FROM station WHERE name = 'Townsend at 7th Station' GROUP BY city;
SELECT      SUM(s.dock_count) AS total_dock_count,     COUNT(t.id) AS subscriber_count FROM      station s LEFT JOIN      trip t ON s.name = t.start_station_name WHERE      s.name = 'Evelyn Park and Ride' AND      t.subscription_type = 'subscriber';
SELECT      COUNT(DISTINCT trip.id) AS subscriber_count,     MAX(weather.max_temperature_f) AS hottest_temperature FROM      trip JOIN      weather ON trip.zip_code = weather.zip_code WHERE      trip.subscription_type = 'Subscriber' AND      trip.zip_code = '94301';
SELECT      (SUM(CASE WHEN subscription_type = 'customer' THEN 1 ELSE 0 END) * 100.0) /      NULLIF(SUM(CASE WHEN subscription_type = 'subscriber' THEN 1 ELSE 0 END), 0) AS percentage FROM      trip WHERE      start_station_id IN (SELECT id FROM station WHERE city = 'San Francisco');
SELECT AVG(t.duration) AS average_duration, s.lat, s.long FROM trip t JOIN station s ON t.start_station_name = s.name WHERE s.name = 'Santa Clara at Almaden';
SELECT MIN(t.duration) AS shortest_trip, w.max_wind_Speed_mph FROM trip t JOIN weather w ON DATE(t.start_date) = w.date WHERE t.start_station_name = 'Franklin at Maple';
SELECT      s.lat,      s.long,      SUM(st.bikes_available) AS bikes_borrowed FROM      station s JOIN      status st ON s.id = st.station_id WHERE      s.name = 'San Jose Diridon Caltrain Station'      AND st.time = '2013-10-20 08:11:01' GROUP BY      s.lat, s.long;
SELECT s.city, s.installation_date FROM trip t JOIN station s ON t.start_station_id = s.id WHERE t.id = 585842;
SELECT COUNT(DISTINCT s.id) AS station_count,         COUNT(t.id) AS customer_count FROM station s LEFT JOIN trip t ON s.id = t.start_station_id WHERE s.installation_date = '2013-08-16'    AND t.subscription_type = 'Customer';
SELECT s.lat, s.long FROM trip t JOIN station s ON t.end_station_id = s.id WHERE t.start_station_name = 'Market at 4th'   AND t.end_date = '2013-08-29 12:45:00';
SELECT COUNT(*) AS subscriber_count, s.dock_count FROM trip t JOIN station s ON t.end_station_id = s.id WHERE t.subscription_type = 'subscriber' AND s.name = 'MLK Library';
SELECT AVG(w.min_temperature_f) AS average_coldest_temperature,        s.name,        s.lat,        s.long FROM weather w JOIN station s ON s.city = 'Palo Alto' -- Assuming city for zip code 94301 is Palo Alto WHERE w.zip_code = '94301' GROUP BY s.name, s.lat, s.long;
SELECT      AVG(duration) AS average_duration,     s.installation_date FROM      trip t JOIN      station s ON t.start_station_id = s.id AND t.end_station_id = s.id WHERE      t.subscription_type = 'subscriptions'      AND s.name = 'Mountain View City Hall';
SELECT description FROM film WHERE title = 'ACADEMY DINOSAUR';
SELECT COUNT(*) AS film_count FROM film WHERE rental_duration > 6;
SELECT title  FROM film  WHERE release_year = 2006 AND rental_rate = 2.99;
SELECT title  FROM film  WHERE length = (SELECT MAX(length) FROM film);
SELECT title, replacement_cost  FROM film  WHERE title IN ('ACE GOLDFINGER', 'ACADEMY DINOSAUR')  ORDER BY replacement_cost DESC  LIMIT 1;
SELECT COUNT(*)  FROM film  WHERE release_year = 2006 AND rating = 'NC-17';
SELECT COUNT(*)  FROM film  WHERE rental_rate = 2.99 AND special_features LIKE '%Deleted Scenes%';
SELECT title  FROM film  WHERE LENGTH(special_features) - LENGTH(REPLACE(special_features, ',', '')) > 2;
SELECT email FROM staff WHERE first_name = 'Jon' AND last_name = 'Stephens';
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM staff WHERE active = 1;
SELECT release_year  FROM film  WHERE replacement_cost = (SELECT MAX(replacement_cost) FROM film);
SELECT title  FROM film  ORDER BY replacement_cost DESC  LIMIT 3;
SELECT l.name  FROM film f  JOIN language l ON f.language_id = l.language_id  WHERE f.title = 'ACADEMY DINOSAUR';
SELECT COUNT(*)  FROM film  WHERE language_id = (SELECT language_id FROM language WHERE name = 'English');
SELECT f.title  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS';
SELECT COUNT(DISTINCT fa.actor_id) AS actor_count FROM film f JOIN film_actor fa ON f.film_id = fa.film_id WHERE f.title = 'ACADEMY DINOSAUR';
SELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id WHERE f.title = 'ACADEMY DINOSAUR';
SELECT COUNT(*)  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' AND f.release_year = 2006;
SELECT f.title  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' ORDER BY f.replacement_cost DESC LIMIT 1;
SELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id WHERE f.replacement_cost = (SELECT MAX(replacement_cost) FROM film);
SELECT COUNT(f.film_id) AS english_film_count FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id JOIN language l ON f.language_id = l.language_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' AND l.name = 'English';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' ORDER BY f.length DESC LIMIT 1;
SELECT f.title  FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror';
SELECT COUNT(f.film_id) AS film_count FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror';
SELECT f.title  FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror' AND f.rental_rate = 2.99;
SELECT COUNT(rental.rental_id) AS rental_count FROM customer JOIN rental ON customer.customer_id = rental.customer_id WHERE customer.first_name = 'RUTH' AND customer.last_name = 'MARTINEZ';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ';
SELECT COUNT(DISTINCT f.film_id) AS film_count FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ' AND f.release_year = 2006;
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ' ORDER BY f.replacement_cost DESC LIMIT 1;
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE f.replacement_cost = (SELECT MAX(replacement_cost) FROM film);
SELECT COUNT(*)  FROM rental r JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ'  AND YEAR(r.return_date) = 2005 AND MONTH(r.return_date) = 8;
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id GROUP BY c.customer_id ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT c.customer_id) AS active_customers FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE f.title = 'ACADEMY DINOSAUR' AND c.active = 1;
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.film_id, f.title ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT      c.first_name,      c.last_name,      COUNT(r.rental_id) AS rental_count FROM      customer c JOIN      rental r ON c.customer_id = r.customer_id WHERE      CONCAT(c.first_name, ' ', c.last_name) IN ('RUTH MARTINEZ', 'LINDA WILLIAMS') GROUP BY      c.customer_id ORDER BY      rental_count DESC LIMIT 1;
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' ORDER BY (f.rental_rate / f.rental_duration) DESC LIMIT 1;
SELECT AVG(f.replacement_cost) AS average_replacement_cost FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror';
SELECT      (COUNT(CASE WHEN c.name = 'Music' THEN 1 END) * 100.0 / COUNT(f.film_id)) AS music_percentage FROM      customer cu JOIN      rental r ON cu.customer_id = r.customer_id JOIN      inventory i ON r.inventory_id = i.inventory_id JOIN      film f ON i.film_id = f.film_id JOIN      film_category fc ON f.film_id = fc.film_id JOIN      category c ON fc.category_id = c.category_id WHERE      cu.first_name = 'RUTH' AND cu.last_name = 'MARTINEZ';
SELECT AVG(f.length) AS average_duration FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS';
SELECT email FROM customer WHERE first_name = 'Diane' AND last_name = 'Collins';
SELECT COUNT(*) AS inactive_customers FROM customer WHERE active = 0;
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM customer WHERE email = 'JEREMY.HURTADO@sakilacustomer.org';
SELECT postal_code FROM address WHERE address_id = 65;
SELECT COUNT(address_id) AS number_of_addresses FROM address WHERE district = 'Nordrhein-Westfalen';
SELECT phone FROM address WHERE address_id = 72;
SELECT COUNT(*) AS number_of_films FROM film WHERE length = 178;
SELECT special_features  FROM film  WHERE title = 'Uprising Uptown';
SELECT description FROM film WHERE title = 'ARTIST COLDBLOODED';
SELECT a.address, a.address2, a.district FROM store s JOIN address a ON s.address_id = a.address_id WHERE s.store_id = 2;
SELECT c.country FROM city ci JOIN country c ON ci.country_id = c.country_id WHERE ci.city = 'Clarksville';
SELECT COUNT(fa.actor_id) AS actor_count FROM film f JOIN film_actor fa ON f.film_id = fa.film_id WHERE f.release_year = 2006    AND f.rental_duration = 7    AND f.rental_rate = 4.99    AND f.length = 98;
SELECT f.rating  FROM film f  JOIN film_actor fa ON f.film_id = fa.film_id  JOIN actor a ON fa.actor_id = a.actor_id  WHERE a.first_name = 'Dan' AND a.last_name = 'Harris'  AND f.length = 77 AND f.replacement_cost = 9.99;
SELECT COUNT(fa.film_id) AS film_count FROM film_actor fa JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Daryl' AND a.last_name = 'Wahlberg';
SELECT return_date  FROM rental  JOIN customer ON rental.customer_id = customer.customer_id  WHERE customer.first_name = 'Sherri' AND customer.last_name = 'Rhodes'  AND rental.rental_date = '2005-07-28 12:27:27';
SELECT CONCAT(s.first_name, ' ', s.last_name) AS manager_name FROM store st JOIN staff s ON st.manager_staff_id = s.staff_id WHERE st.store_id = 1;
SELECT address, address2, district  FROM address  WHERE address_id = (SELECT address_id FROM store WHERE store_id = 1);
SELECT a.address, a.address2, a.district  FROM staff s  JOIN address a ON s.address_id = a.address_id  WHERE s.first_name = 'Jon' AND s.last_name = 'Stephens';
SELECT COUNT(*)  FROM address  WHERE city_id = (SELECT city_id FROM city WHERE city = 'Woodridge');
SELECT COUNT(*)  FROM film  WHERE language_id = (SELECT language_id FROM language WHERE name = 'English');
SELECT a.address, a.address2, a.district, c.city, co.country FROM customer AS cu JOIN address AS a ON cu.address_id = a.address_id JOIN city AS c ON a.city_id = c.city_id JOIN country AS co ON c.country_id = co.country_id WHERE cu.first_name = 'Heather' AND cu.last_name = 'Morris';
SELECT c.email  FROM customer c  JOIN address a ON c.address_id = a.address_id  WHERE a.address = '1411 Lillydale Drive';
SELECT amount  FROM payment  WHERE customer_id = 297  AND rental_id IN (     SELECT rental_id      FROM rental      WHERE rental_date = '2005-07-28 12:27:27' );
SELECT c.name  FROM film f  JOIN film_category fc ON f.film_id = fc.film_id  JOIN category c ON fc.category_id = c.category_id  WHERE f.title = 'Working Microcosmos';
SELECT COUNT(f.film_id) AS number_of_documentary_films FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Documentary';
SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id GROUP BY c.category_id ORDER BY COUNT(fc.film_id) DESC LIMIT 1;
SELECT f.title  FROM film f  JOIN inventory i ON f.film_id = i.film_id  WHERE i.inventory_id = 3479;
SELECT      (SUM(CASE WHEN s.store_id = 2 THEN p.amount ELSE 0 END) -       SUM(CASE WHEN s.store_id = 1 THEN p.amount ELSE 0 END)) /      NULLIF(SUM(CASE WHEN s.store_id = 1 THEN p.amount ELSE 0 END), 0) * 100 AS percentage_more FROM      store s JOIN      staff st ON s.store_id = st.store_id JOIN      customer c ON st.staff_id = c.store_id JOIN      payment p ON c.customer_id = p.customer_id JOIN      rental r ON p.rental_id = r.rental_id WHERE      s.store_id IN (1, 2);
SELECT      (SELECT COUNT(*) FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'India')) /     (SELECT COUNT(*) FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'Italy')) AS times;
SELECT      (SELECT COUNT(fa.film_id)       FROM film_actor fa       JOIN actor a ON fa.actor_id = a.actor_id       WHERE a.first_name = 'GINA' AND a.last_name = 'DEGENERES') /      (SELECT COUNT(fa.film_id)       FROM film_actor fa       JOIN actor a ON fa.actor_id = a.actor_id       WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS') AS times_number_of_films;
SELECT COUNT(*)  FROM film  WHERE rating = 'R' AND release_year = 2006;
SELECT COUNT(DISTINCT actor_id) AS actor_count FROM film_actor WHERE film_id = 508;
SELECT special_features  FROM film  WHERE title = 'Smoochy Control';
SELECT COUNT(DISTINCT customer_id)  FROM payment  WHERE amount > 10 AND payment_date LIKE '2005-08%';
SELECT title  FROM film  WHERE length > 180;
SELECT SUM(amount) AS total_rental_payment FROM payment WHERE rental_id BETWEEN 1 AND 10;
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM staff WHERE active = 1;
SELECT first_name, last_name  FROM staff  WHERE staff_id = (SELECT manager_staff_id FROM store WHERE store_id = 2);
SELECT COUNT(*) AS total_rentals_returned FROM rental WHERE return_date = '2005-05-27';
SELECT f.title  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Laura' AND a.last_name = 'Brody';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id WHERE i.store_id = 2 AND f.film_id NOT IN (     SELECT i2.film_id     FROM inventory i2     WHERE i2.store_id <> 2 );
SELECT DISTINCT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM rental r JOIN customer c ON r.customer_id = c.customer_id WHERE DATEDIFF(r.return_date, r.rental_date) = 7;
SELECT COUNT(f.film_id) AS horror_film_count FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.film_id, f.title ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT special_features FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Science Fiction' GROUP BY special_features ORDER BY COUNT(*) DESC LIMIT 1;
SELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id ORDER BY COUNT(fa.film_id) DESC LIMIT 1;
SELECT COUNT(f.film_id) AS comedy_count FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE f.rental_duration = 7 AND c.name = 'Comedy';
SELECT s.first_name, s.last_name FROM store AS st JOIN staff AS s ON st.manager_staff_id = s.staff_id JOIN customer AS c ON st.store_id = c.store_id WHERE c.active = 0 GROUP BY st.store_id, s.first_name, s.last_name ORDER BY COUNT(c.customer_id) DESC LIMIT 1;
SELECT MAX(rental_rate / rental_duration) AS rental_price_per_day FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Children';
SELECT CONCAT(a.address, ', ', a.address2, ', ', a.district) AS complete_address FROM store s JOIN address a ON s.address_id = a.address_id WHERE s.store_id = 1;
SELECT COUNT(*)  FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id WHERE ci.city = 'Lethbridge';
SELECT COUNT(*)  FROM city  WHERE country_id = (SELECT country_id FROM country WHERE country = 'United States');
SELECT CONCAT(c.first_name, ' ', c.last_name) AS customer_name FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id JOIN country co ON ci.country_id = co.country_id WHERE co.country = 'India';
SELECT COUNT(f.film_id)  FROM film f  JOIN film_category fc ON f.film_id = fc.film_id  JOIN category c ON fc.category_id = c.category_id  WHERE c.name = 'Classics' AND f.rental_rate < 1;
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id GROUP BY c.customer_id ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT COUNT(rental_id) AS rented_times FROM rental JOIN inventory ON rental.inventory_id = inventory.inventory_id JOIN film ON inventory.film_id = film.film_id WHERE film.title = 'BLANKET BEVERLY';
SELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id WHERE f.rating = 'R' GROUP BY a.actor_id ORDER BY COUNT(f.film_id) DESC LIMIT 1;
SELECT      CONCAT(a.first_name, ' ', a.last_name) AS full_name,     COUNT(fa.film_id) AS film_count,     COUNT(fa.film_id) / 5.0 AS average_films FROM      actor a JOIN      film_actor fa ON a.actor_id = fa.actor_id GROUP BY      a.actor_id ORDER BY      film_count DESC LIMIT 5;
SELECT actor_id FROM actor WHERE last_name = 'KILMER';
SELECT title  FROM film  WHERE replacement_cost = (SELECT MIN(replacement_cost) FROM film WHERE rating = 'G')  AND rating = 'G';
SELECT title, description, special_features FROM film WHERE length = (SELECT MAX(length) FROM film) LIMIT 5;
SELECT COUNT(rental_id)  FROM rental  WHERE rental_date = '2005-05-26' AND return_date = '2005-05-30';
SELECT customer_id, AVG(amount) AS average_payment FROM payment GROUP BY customer_id;
SELECT CONCAT(first_name, ' ', last_name) AS name, email  FROM staff  WHERE store_id = 2;
SELECT (COUNT(customer_id) FILTER (WHERE active = 0) * 100.0 / COUNT(customer_id)) AS inactive_percentage FROM customer;
SELECT title, description FROM film WHERE film_id = 996;
SELECT SUM(amount) AS total_payment FROM payment WHERE payment_date LIKE '2005-08%';
SELECT f.title  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Emily' AND a.last_name = 'Dee';
SELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id WHERE f.title = 'CHOCOLATE DUCK';
SELECT COUNT(f.film_id) AS film_count FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror' AND f.rating = 'PG-13';
SELECT c.name AS category_name, f.title AS film_title FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE a.first_name = 'Judy' AND a.last_name = 'Dean';
SELECT f.title  FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Documentary' LIMIT 5;
SELECT l.name AS language, (f.rental_rate / f.rental_duration) AS rental_cost_per_day FROM film f JOIN language l ON f.language_id = l.language_id WHERE f.title = 'UNTOUCHABLES SUNRISE';
SELECT f.title  FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id WHERE r.rental_date LIKE '2005-05-24%';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'Brian' AND c.last_name = 'Wyman' AND YEAR(r.rental_date) = 2005 AND MONTH(r.rental_date) = 7;
SELECT i.inventory_id, CONCAT(a.first_name, ' ', a.last_name) AS actor_name FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE f.title = 'STREETCAR INTENTIONS';
SELECT f.title, c.name FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer cu ON r.customer_id = cu.customer_id WHERE cu.first_name = 'Natalie' AND cu.last_name = 'Meyer' AND YEAR(r.rental_date) = 2006 AND MONTH(r.rental_date) = 2;
SELECT COUNT(rental.rental_id)  FROM customer  JOIN rental ON customer.customer_id = rental.customer_id  WHERE customer.first_name = 'Eleanor' AND customer.last_name = 'Hunt';
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name, ci.city FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id WHERE f.title = 'DREAM PICKUP';
SELECT (COUNT(CASE WHEN c.customer_id IS NOT NULL THEN 1 END) * 100.0 / COUNT(c.customer_id)) AS percentage_customers_in_india FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id JOIN country co ON ci.country_id = co.country_id WHERE co.country = 'India';
SELECT      (SUM(CASE WHEN CONCAT(a.first_name, ' ', a.last_name) = 'Mary Keitel' THEN 1 ELSE 0 END) -       SUM(CASE WHEN CONCAT(a.first_name, ' ', a.last_name) = 'Angela Witherspoon' THEN 1 ELSE 0 END)) /      NULLIF(SUM(CASE WHEN CONCAT(a.first_name, ' ', a.last_name) = 'Angela Witherspoon' THEN 1 ELSE 0 END), 0) * 100 AS percentage_difference FROM      actor a JOIN      film_actor fa ON a.actor_id = fa.actor_id GROUP BY      a.actor_id;
SELECT c.email, a.address, ci.city, co.country FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id JOIN country co ON ci.country_id = co.country_id WHERE c.first_name = 'Lillie' AND c.last_name = 'Kim';
SELECT DISTINCT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN staff s ON r.staff_id = s.staff_id WHERE CONCAT(s.first_name, ' ', s.last_name) = 'Mike Hillyer' LIMIT 5;
SELECT SUM(p.amount) AS total_payment FROM payment p JOIN customer c ON p.customer_id = c.customer_id WHERE c.first_name = 'Diane' AND c.last_name = 'Collins';
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name, c.email FROM customer c JOIN payment p ON c.customer_id = p.customer_id GROUP BY c.customer_id HAVING AVG(p.amount) * 0.7 < (SELECT AVG(amount) FROM payment);
SELECT COUNT(*) AS film_count FROM film WHERE rental_rate = 0.99;
SELECT COUNT(*)  FROM customer  WHERE customer_id < 100 AND last_name = 'Thomas';
SELECT a.last_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id WHERE f.description = 'A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies';
SELECT f.title  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Liza' AND a.last_name = 'Bergman' ORDER BY f.replacement_cost DESC LIMIT 1;
SELECT title  FROM film  WHERE film_id IN (     SELECT film_id      FROM inventory      WHERE store_id = 2 )  ORDER BY rental_rate DESC  LIMIT 1;
SELECT f.title  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Angelina' AND a.last_name = 'Astaire' AND f.replacement_cost = 27.99;
SELECT inventory_id  FROM inventory  WHERE film_id = (SELECT film_id FROM film WHERE title = 'African Egg');
SELECT COUNT(f.film_id) AS film_count FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE f.length = 113 AND CONCAT(a.first_name, ' ', a.last_name) = 'Kirk Jovovich';
SELECT COUNT(*)  FROM film  WHERE film_id IN (     SELECT film_id      FROM inventory      WHERE inventory_id BETWEEN 20 AND 60 ) AND rating = 'G';
SELECT COUNT(DISTINCT f.film_id) AS total_films FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE f.rental_rate = 4.99 AND CONCAT(a.first_name, ' ', a.last_name) = 'Bob Fawcett';
SELECT i.inventory_id FROM inventory i JOIN film f ON i.film_id = f.film_id JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Russell' AND a.last_name = 'Close' AND f.length BETWEEN 110 AND 150;
SELECT store.store_id, inventory.inventory_id FROM film JOIN inventory ON film.film_id = inventory.film_id JOIN store ON inventory.store_id = store.store_id WHERE film.length = (SELECT MAX(length) FROM film);
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Elvis' AND a.last_name = 'Marx';
SELECT i.inventory_id FROM inventory i JOIN film f ON i.film_id = f.film_id JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE f.rental_rate = 4.99 AND CONCAT(a.first_name, ' ', a.last_name) = 'Lucille Dee';
SELECT DISTINCT i.store_id FROM film f JOIN inventory i ON f.film_id = i.film_id WHERE f.rental_rate > (SELECT AVG(rental_rate) * 0.6 FROM film);
SELECT      (SUM(CASE WHEN f.rating = 'G' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_g_rating FROM      film f JOIN      film_actor fa ON f.film_id = fa.film_id JOIN      actor a ON fa.actor_id = a.actor_id WHERE      a.first_name = 'Nick' AND a.last_name = 'Wahlberg';
SELECT address  FROM address  WHERE district = 'Texas'  ORDER BY city_id ASC;
SELECT CONCAT(first_name, ' ', last_name) AS full_name, email FROM customer WHERE active = 0 AND YEAR(create_date) = 2006;
SELECT (SUM(CASE WHEN rating = 'PG-13' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage_pg13 FROM film;
SELECT title, MAX(rental_rate) AS price_per_day FROM film GROUP BY title ORDER BY price_per_day DESC LIMIT 10;
SELECT AVG(amount) AS average_rent_amount FROM payment WHERE customer_id = 15;
SELECT COUNT(DISTINCT customer_id) AS above_average_customers FROM rental WHERE (return_date - rental_date) > (     SELECT AVG(return_date - rental_date)     FROM rental );
SELECT (COUNT(CASE WHEN c.name = 'Horror' THEN 1 END) * 100.0 / COUNT(*)) AS horror_percentage FROM film_category fc JOIN category c ON fc.category_id = c.category_id JOIN film f ON fc.film_id = f.film_id;
SELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id ORDER BY COUNT(fa.film_id) DESC LIMIT 1;
SELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film_category fc ON fa.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Drama' GROUP BY a.actor_id ORDER BY COUNT(fa.film_id) DESC LIMIT 1;
SELECT      (SELECT AVG(daily_rentals) FROM (         SELECT COUNT(rental_id) AS daily_rentals         FROM rental r         JOIN customer c ON r.customer_id = c.customer_id         JOIN address a ON c.address_id = a.address_id         JOIN city ci ON a.city_id = ci.city_id         JOIN country co ON ci.country_id = co.country_id         WHERE co.country = 'Australia'         GROUP BY DATE(r.rental_date)     ) AS australia_avg) -      (SELECT AVG(daily_rentals) FROM (         SELECT COUNT(rental_id) AS daily_rentals         FROM rental r         JOIN customer c ON r.customer_id = c.customer_id         JOIN address a ON c.address_id = a.address_id         JOIN city ci ON a.city_id = ci.city_id         JOIN country co ON ci.country_id = co.country_id         WHERE co.country = 'Canada'         GROUP BY DATE(r.rental_date)     ) AS canada_avg) AS difference;
SELECT      (COUNT(CASE WHEN c.name = 'Action' THEN 1 END) * 100.0 / COUNT(*)) AS action_percentage FROM      actor a JOIN      film_actor fa ON a.actor_id = fa.actor_id JOIN      film f ON fa.film_id = f.film_id JOIN      film_category fc ON f.film_id = fc.film_id JOIN      category c ON fc.category_id = c.category_id WHERE      a.first_name = 'Reese' AND a.last_name = 'Kilmer';
SELECT SUM(p.amount) AS total_rent FROM payment p JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE f.title = 'Clockwork Paradice';
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id GROUP BY c.customer_id HAVING COUNT(DISTINCT fc.category_id) > 5;
SELECT AVG(actor_count) AS average_actors FROM (     SELECT COUNT(fa.actor_id) AS actor_count     FROM film_category fc     JOIN category c ON fc.category_id = c.category_id     JOIN film f ON fc.film_id = f.film_id     JOIN film_actor fa ON f.film_id = fa.film_id     WHERE c.name = 'Comedy'     GROUP BY f.film_id ) AS actor_counts;
SELECT f.title, COUNT(r.rental_id) AS rental_count FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id WHERE c.name = 'Children' GROUP BY f.title ORDER BY rental_count DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN p.amount > (SELECT AVG(amount) FROM payment WHERE customer_id IN (SELECT customer_id FROM customer WHERE store_id = 1)) THEN 1 END) * 100.0) / COUNT(DISTINCT c.customer_id) AS percentage_above_average FROM      payment p JOIN      customer c ON p.customer_id = c.customer_id WHERE      c.store_id = 1;
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category cat ON fc.category_id = cat.category_id WHERE cat.name IN ('Family', 'Sci-Fi') GROUP BY c.customer_id HAVING SUM(cat.name = 'Family') > SUM(cat.name = 'Sci-Fi');
SELECT title FROM film WHERE rating = 'NC-17';
SELECT COUNT(*) FROM actor WHERE last_name = 'Kilmer';
SELECT COUNT(*) FROM film WHERE length > 100;
SELECT COUNT(*) AS total_payments FROM payment WHERE payment_date LIKE '2005-08%';
SELECT country.country  FROM address  JOIN city ON address.city_id = city.city_id  JOIN country ON city.country_id = country.country_id  WHERE address.address = '1386 Nakhon Sawan Boulevard';
SELECT l.name FROM film f JOIN language l ON f.language_id = l.language_id WHERE f.release_year = 2006 GROUP BY l.language_id ORDER BY COUNT(f.film_id) DESC LIMIT 1;
SELECT f.title  FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Classics';
SELECT COUNT(r.rental_id) AS total_rentals FROM customer c JOIN rental r ON c.customer_id = r.customer_id WHERE c.first_name = 'Ella' AND c.last_name = 'Oliver' AND r.rental_date BETWEEN '2016-06-01' AND '2016-06-30';
SELECT COUNT(DISTINCT c.customer_id) AS different_clients FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN staff s ON r.staff_id = s.staff_id WHERE CONCAT(c.first_name, ' ', c.last_name) = 'Jon Stephens';
SELECT SUM(amount) AS total_amount FROM payment JOIN rental ON payment.rental_id = rental.rental_id WHERE rental.rental_date = '2005-07-29';
SELECT first_name  FROM customer  WHERE address_id IN (     SELECT address_id      FROM address      WHERE postal_code LIKE '76%' );
SELECT r.return_date  FROM rental r  JOIN inventory i ON r.inventory_id = i.inventory_id  JOIN film f ON i.film_id = f.film_id  WHERE f.title = 'BLOOD ARGONAUTS';
SELECT f.title  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Cuba' AND a.last_name = 'Allen';
SELECT COUNT(DISTINCT fa.actor_id) AS actor_count FROM film_category fc JOIN film_actor fa ON fc.film_id = fa.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Music';
SELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film_category fc ON fa.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Comedy' GROUP BY a.actor_id ORDER BY COUNT(fa.film_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT c.customer_id) AS non_renting_customers FROM customer c LEFT JOIN rental r ON c.customer_id = r.customer_id LEFT JOIN inventory i ON r.inventory_id = i.inventory_id LEFT JOIN store s ON i.store_id = s.store_id LEFT JOIN staff st ON s.manager_staff_id = st.staff_id WHERE st.first_name != 'Mike' AND r.rental_id IS NULL;
SELECT CONCAT(a.first_name, ' ', a.last_name) AS actor_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id WHERE f.rating = 'PG-13' AND f.replacement_cost = (     SELECT MAX(replacement_cost)     FROM film     WHERE rating = 'PG-13' );
SELECT CONCAT(c.first_name, ' ', c.last_name) AS client_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id WHERE r.return_date IS NULL GROUP BY c.customer_id ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id WHERE ci.city = 'Miyakonojo';
SELECT COUNT(DISTINCT c.customer_id) AS non_active_clients FROM customer c JOIN rental r ON c.customer_id = r.customer_id WHERE c.active = 0 AND r.return_date IS NULL;
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Animation' ORDER BY f.length ASC LIMIT 1;
SELECT country.country FROM customer JOIN rental ON customer.customer_id = rental.customer_id JOIN inventory ON rental.inventory_id = inventory.inventory_id JOIN store ON inventory.store_id = store.store_id JOIN address ON store.address_id = address.address_id JOIN city ON address.city_id = city.city_id JOIN country ON city.country_id = country.country_id WHERE customer.first_name = 'Hector' AND customer.last_name = 'Poinexter';
SELECT AVG(p.amount) AS average_rental_payment FROM payment p JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror';
SELECT AVG(p.amount) AS average_rent FROM customer c JOIN payment p ON c.customer_id = p.customer_id WHERE c.first_name = 'Christy' AND c.last_name = 'Vargas';
SELECT      (SUM(CASE WHEN f.length < 100 AND c.name = 'Drama' THEN 1 ELSE 0 END) * 100.0 / COUNT(f.film_id)) AS percentage FROM      film f JOIN      film_category fc ON f.film_id = fc.film_id JOIN      category c ON fc.category_id = c.category_id;
SELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name FROM actor a WHERE a.first_name = (SELECT first_name FROM actor WHERE last_name = 'Depp' LIMIT 1);
SELECT address_id  FROM address  WHERE district = 'Gansu';
SELECT category_id, name, last_update  FROM category  LIMIT 3;
SELECT first_name || ' ' || last_name AS full_name FROM customer WHERE active = 0 LIMIT 3;
SELECT DIV(f.rental_rate, f.rental_duration) AS rental_price_per_day FROM film f WHERE f.title = 'Airplane Sierra';
SELECT a.address, a.address2, a.district  FROM store s  JOIN address a ON s.address_id = a.address_id  WHERE s.store_id = 2;
SELECT city.city  FROM address  JOIN city ON address.city_id = city.city_id  WHERE address.address = '1623 Kingstown Drive';
SELECT city FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'Algeria') LIMIT 3;
SELECT c.name AS category FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE f.title = 'Agent Truman';
SELECT f.title  FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'action' LIMIT 3;
SELECT      (SELECT COUNT(f.film_id)       FROM film f       JOIN film_category fc ON f.film_id = fc.film_id       JOIN category c ON fc.category_id = c.category_id       WHERE c.name = 'Children') -      (SELECT COUNT(f.film_id)       FROM film f       JOIN film_category fc ON f.film_id = fc.film_id       JOIN category c ON fc.category_id = c.category_id       WHERE c.name = 'Action') AS difference;
SELECT a.district  FROM customer c  JOIN address a ON c.address_id = a.address_id  WHERE c.first_name = 'Maria' AND c.last_name = 'Miller';
SELECT first_name, last_name  FROM customer  JOIN address ON customer.address_id = address.address_id  WHERE customer.active = 1  AND address.address = '1795 Santiago de Compostela Way'  AND address.district = 'Texas';
SELECT COUNT(*)  FROM film  WHERE language_id = (SELECT language_id FROM language WHERE name = 'English')  AND length > 50  AND replacement_cost < 10.99;
SELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id WHERE f.title = 'ACADEMY DINOSAUR';
SELECT f.title  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Penelope' AND a.last_name = 'Guiness' LIMIT 2;
SELECT (COUNT(CASE WHEN c.name = 'Documentary' THEN 1 END) * 100.0 / COUNT(f.film_id)) AS percentage_documentary FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id;
SELECT COUNT(*)  FROM film  WHERE language_id = (SELECT language_id FROM language WHERE name = 'English')  AND rating = 'NC-17';
SELECT title  FROM film  WHERE length = (SELECT MAX(length) FROM film);
SELECT COUNT(*) FROM actor WHERE first_name = 'Dan';
SELECT first_name FROM customer GROUP BY first_name ORDER BY COUNT(first_name) DESC LIMIT 1;
SELECT rating  FROM film  WHERE special_features = 'Behind the Scenes';
SELECT MAX(rental_count) AS largest_number_of_films_rented FROM (     SELECT customer_id, COUNT(rental_id) AS rental_count     FROM rental     GROUP BY customer_id ) AS rental_counts;
SELECT title  FROM film  WHERE description LIKE '%Lacklusture%';
SELECT COUNT(r.rental_id) AS films_rented FROM customer c JOIN rental r ON c.customer_id = r.customer_id WHERE c.first_name = 'Francis' AND c.last_name = 'Sikes';
SELECT s.manager_staff_id, CONCAT(st.first_name, ' ', st.last_name) AS manager_name FROM store s JOIN inventory i ON s.store_id = i.store_id JOIN staff st ON s.manager_staff_id = st.staff_id GROUP BY s.store_id, s.manager_staff_id, st.first_name, st.last_name ORDER BY COUNT(i.film_id) DESC LIMIT 1;
SELECT a.address, a.address2, a.district, c.city, co.country FROM customer AS cu JOIN address AS a ON cu.address_id = a.address_id JOIN city AS c ON a.city_id = c.city_id JOIN country AS co ON c.country_id = co.country_id WHERE cu.active = 0;
SELECT c.name, COUNT(fc.category_id) AS category_count FROM film_category fc JOIN category c ON fc.category_id = c.category_id GROUP BY c.name ORDER BY category_count DESC LIMIT 1;
SELECT a.first_name, a.last_name FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE f.title = 'Jason trap';
SELECT c.first_name, c.last_name, SUM(p.amount) AS total_payment FROM customer c JOIN payment p ON c.customer_id = p.customer_id JOIN rental r ON p.rental_id = r.rental_id GROUP BY c.customer_id ORDER BY total_payment DESC LIMIT 1;
SELECT f.title, COUNT(r.rental_id) AS rental_count FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.film_id ORDER BY rental_count DESC LIMIT 5;
SELECT country.country  FROM city  JOIN country ON city.country_id = country.country_id  WHERE city.city = 'Sasebo';
SELECT a.address, a.address2, a.district, c.city, co.country FROM store s JOIN address a ON s.address_id = a.address_id JOIN city c ON a.city_id = c.city_id JOIN country co ON c.country_id = co.country_id;
SELECT f.title  FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Animation';
SELECT c.city, COUNT(cu.customer_id) AS customer_count FROM customer cu JOIN address a ON cu.address_id = a.address_id JOIN city c ON a.city_id = c.city_id GROUP BY c.city ORDER BY customer_count DESC LIMIT 1;
SELECT a.first_name, a.last_name, COUNT(fa.film_id) AS film_count FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id ORDER BY film_count DESC LIMIT 1;
SELECT (SUM(c.name = 'Horror') / COUNT(f.film_id)) * 100 AS horror_percentage FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id;
SELECT CONCAT(first_name, ' ', last_name) AS full_name  FROM actor  WHERE actor_id = 5;
SELECT COUNT(film_id)  FROM film_category  WHERE category_id = 11;
SELECT c.name  FROM film f  JOIN film_category fc ON f.film_id = fc.film_id  JOIN category c ON fc.category_id = c.category_id  WHERE f.title = 'BABY HALL';
SELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id WHERE f.rental_rate = (SELECT MAX(rental_rate) FROM film);
SELECT f.description  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'JENNIFER' AND a.last_name = 'DAVIS';
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN payment p ON c.customer_id = p.customer_id WHERE p.amount > 10;
SELECT address  FROM address  WHERE address_id = (SELECT address_id                      FROM customer                      WHERE first_name = 'SUSAN' AND                            address_id IN (SELECT address_id                                           FROM address                                           WHERE postal_code = '77948'));
SELECT CONCAT(c.first_name, ' ', c.last_name) AS customer_name FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id WHERE ci.city = 'Abu Dhabi';
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN address a ON c.address_id = a.address_id WHERE a.address = '692 Joliet Street';
SELECT f.title  FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE f.length > 120 AND c.name = 'action';
SELECT a.first_name, a.last_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id WHERE f.title = 'ANONYMOUS HUMAN';
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror' ORDER BY f.rental_rate ASC LIMIT 1;
SELECT f.description FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Travel';
SELECT SUM(p.amount) AS total_payment FROM payment p JOIN customer c ON p.customer_id = c.customer_id JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id WHERE a.district = 'Nagasaki';
SELECT      (SUM(p.amount) / (SELECT SUM(amount) FROM payment) * 100) AS percentage FROM      payment p JOIN      customer c ON p.customer_id = c.customer_id WHERE      c.first_name = 'MARGARET' AND c.last_name = 'MOORE';
SELECT      (COUNT(CASE WHEN f.length > 120 AND c.name = 'Horror' THEN 1 END) * 100.0 / COUNT(f.title)) AS horror_percentage FROM      film f JOIN      film_category fc ON f.film_id = fc.film_id JOIN      category c ON fc.category_id = c.category_id;
SELECT COUNT(title) AS film_count FROM film WHERE release_year = 2006;
SELECT title FROM film WHERE film_id BETWEEN 1 AND 10;
SELECT film_id  FROM film  WHERE rental_duration = (SELECT MAX(rental_duration) FROM film);
SELECT title  FROM film  WHERE rental_rate = (SELECT MAX(rental_rate) FROM film);
SELECT title FROM film WHERE rating = 'G';
SELECT l.name  FROM film f  JOIN language l ON f.language_id = l.language_id  WHERE f.title = 'CHILL LUCK';
SELECT f.last_update FROM film f JOIN language l ON f.language_id = l.language_id WHERE l.name = 'English' AND f.release_year = 2006;
SELECT COUNT(f.title) AS italian_deleted_scenes_count FROM film f JOIN language l ON f.language_id = l.language_id WHERE l.name = 'Italian' AND f.special_features LIKE '%deleted scenes%';
SELECT COUNT(f.title) AS adult_animation_count FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Animation' AND f.rating = 'NC-17';
SELECT DISTINCT f.rating FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'action';
SELECT f.film_id FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Comedy';
SELECT f.title  FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'documentary'  AND f.length = (SELECT MAX(length) FROM film WHERE film_id IN (SELECT film_id FROM film_category WHERE category_id = (SELECT category_id FROM category WHERE name = 'documentary')));
SELECT c.name AS category FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE f.title = 'BLADE POLISH';
SELECT r.rental_id  FROM customer c  JOIN rental r ON c.customer_id = r.customer_id  WHERE c.first_name = 'Mary' AND c.last_name = 'Smith';
SELECT c.first_name  FROM customer c  JOIN rental r ON c.customer_id = r.customer_id  WHERE r.staff_id = 1;
SELECT c.email  FROM customer c  JOIN rental r ON c.customer_id = r.customer_id  JOIN staff s ON r.staff_id = s.staff_id  WHERE s.staff_id = 2;
SELECT fa.actor_id  FROM film f  JOIN film_actor fa ON f.film_id = fa.film_id  WHERE f.title = 'BOUND CHEAPER';
SELECT i.inventory_id  FROM inventory i JOIN film f ON i.film_id = f.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'Karen' AND c.last_name = 'Jackson';
SELECT f.title  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Jane' AND a.last_name = 'Jackman';
SELECT a.first_name, a.last_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id WHERE f.title = 'BIRD INDEPENDENCE';
SELECT SUM(f.rental_rate) AS total_rental_rate FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Animation';
SELECT AVG(f.rental_rate) AS average_rental_rate FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Sci-Fi';
SELECT      (COUNT(f.film_id) FILTER (WHERE c.name = 'Horror') * 100.0 / COUNT(f.film_id)) AS horror_percentage FROM      film f JOIN      film_category fc ON f.film_id = fc.film_id JOIN      category c ON fc.category_id = c.category_id JOIN      language l ON f.language_id = l.language_id WHERE      l.name = 'English';
SELECT COUNT(*)  FROM film  WHERE rating = 'NC-17' AND rental_duration < 4;
SELECT title  FROM film  WHERE rating = 'R' AND length = 71 AND replacement_cost = 29.99;
SELECT c.email  FROM customer c  JOIN rental r ON c.customer_id = r.customer_id  WHERE c.active = 1  AND r.rental_date BETWEEN '2005-05-25 19:37:47' AND '2005-05-26 10:06:49';
SELECT SUM(p.amount) AS total_payment FROM payment p JOIN customer c ON p.customer_id = c.customer_id JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE c.first_name = 'Sarah' AND c.last_name = 'Lewis';
SELECT COUNT(*) AS payment_count FROM payment p JOIN customer c ON p.customer_id = c.customer_id WHERE c.first_name = 'Susan' AND c.last_name = 'Wilson' AND p.payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 22:08:29';
SELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id WHERE f.title = 'ALABAMA DEVIL';
SELECT f.title  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Sandra' AND a.last_name = 'Kilmer';
SELECT COUNT(*)  FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'documentary' AND f.rating = 'PG-13';
SELECT f.title, c.name AS category_name, f.special_features FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE (f.rental_duration * f.rental_rate) > 30;
SELECT CONCAT(a.first_name, ' ', a.last_name) AS cast_member_name FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE f.title = 'AFRICAN EGG';
SELECT COUNT(DISTINCT f.film_id) AS number_of_movies_rented FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE c.first_name = 'Maria' AND c.last_name = 'Miller';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'Dorothy' AND c.last_name = 'Taylor' ORDER BY r.rental_date DESC LIMIT 1;
SELECT COUNT(*) AS action_movie_count FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Action' AND f.film_id IN (SELECT film_id FROM inventory);
SELECT a.address, f.rental_rate FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN store s ON i.store_id = s.store_id JOIN address a ON s.address_id = a.address_id WHERE f.title = 'WYOMING STORM';
SELECT DATEDIFF(r.return_date, r.rental_date) AS days_taken FROM rental r JOIN customer c ON r.customer_id = c.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE c.first_name = 'Austin' AND c.last_name = 'Cintron' AND f.title = 'DESTINY SATURDAY';
SELECT COUNT(DISTINCT f.film_id) AS number_of_movies FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Nick' AND a.last_name = 'Stallone';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.film_id HAVING f.length = (SELECT MIN(length) FROM film) ORDER BY SUM(f.rental_duration * f.rental_rate) DESC LIMIT 1;
SELECT SUM(p.amount) AS total_amount FROM payment p JOIN customer c ON p.customer_id = c.customer_id WHERE c.first_name = 'Stephanie' AND c.last_name = 'Mitchell'  AND p.payment_date LIKE '2005-06%';
SELECT AVG(replacement_cost) AS average_replacement_cost FROM film WHERE rental_rate = 4.99;
SELECT AVG(rental_rate) AS average_rental_rate FROM film WHERE rating = 'PG-13';
SELECT (COUNT(CASE WHEN active = 0 THEN 1 END) * 100.0 / COUNT(customer_id)) AS inactive_percentage FROM customer WHERE store_id = 1;
SELECT rental_duration FROM film WHERE title = 'DIRTY ACE';
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM customer WHERE email = 'SHEILA.WELLS@sakilacustomer.org';
SELECT title  FROM film  WHERE length = (SELECT MAX(length) FROM film)  ORDER BY title;
SELECT COUNT(*) FROM category;
SELECT      COUNT(DISTINCT r.inventory_id) AS total_rentals,     (COUNT(DISTINCT CASE WHEN MONTH(r.rental_date) = 6 THEN r.inventory_id END) * 100.0 / COUNT(DISTINCT r.inventory_id)) AS percentage_june FROM      customer c JOIN      rental r ON c.customer_id = r.customer_id WHERE      c.first_name = 'Mary' AND c.last_name = 'Smith' AND YEAR(r.rental_date) = 2005;
SELECT COUNT(*) AS active_customers FROM customer WHERE active = 1;
SELECT title FROM film WHERE rating = 'PG-13';
SELECT title  FROM film  WHERE rental_duration > 5  LIMIT 10;
SELECT city.city  FROM city  JOIN country ON city.country_id = country.country_id  WHERE country.country = 'United Arab Emirates';
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN payment p ON c.customer_id = p.customer_id WHERE p.amount > 10 LIMIT 5;
SELECT f.title  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Burt' AND a.last_name = 'Dukakis';
SELECT CONCAT(a.first_name, ' ', a.last_name) AS full_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id WHERE f.title = 'ENDING CROWDS';
SELECT a.first_name, a.last_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id WHERE f.title = 'BOUND CHEAPER';
SELECT f.title  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Karl' AND a.last_name = 'Berr' AND f.rating = 'PG';
SELECT city.city  FROM city  JOIN country ON city.country_id = country.country_id  WHERE country.country = 'Philippines'  LIMIT 3;
SELECT f.title, COUNT(r.customer_id) AS rental_count FROM film f LEFT JOIN inventory i ON f.film_id = i.film_id LEFT JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.film_id ORDER BY rental_count ASC LIMIT 10;
SELECT f.description  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Lucille' AND a.last_name = 'Tracy';
SELECT c.name  FROM film f  JOIN film_category fc ON f.film_id = fc.film_id  JOIN category c ON fc.category_id = c.category_id  WHERE f.title = 'BEACH HEARTBREAKERS';
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror' LIMIT 10;
SELECT DISTINCT a.last_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id WHERE f.rating = 'NC-17';
SELECT AVG(f.rental_rate) AS average_rate FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Lucille' AND a.last_name = 'Tracy';
SELECT COUNT(*)  FROM film  WHERE length BETWEEN 100 AND 110;
SELECT actor_id FROM actor WHERE last_name = 'Dee';
SELECT COUNT(*)  FROM customer  WHERE first_name = 'Nina' AND active = 1;
SELECT COUNT(*)  FROM film  WHERE rating = 'R'  AND film_id IN (SELECT film_id FROM inventory WHERE store_id = 2);
SELECT DISTINCT i.store_id FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id JOIN inventory i ON f.film_id = i.film_id WHERE a.first_name = 'Reese' AND a.last_name = 'West' AND f.length < 100;
SELECT f.length FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Nick' AND a.last_name = 'Wahlberg' ORDER BY f.rental_rate DESC LIMIT 1;
SELECT f.title  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Russell' AND a.last_name = 'Close';
SELECT i.store_id  FROM film f  JOIN inventory i ON f.film_id = i.film_id  WHERE f.title = 'Amadeus Holy';
SELECT COUNT(DISTINCT f.film_id) AS film_count FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE f.rental_rate = 2.99 AND a.first_name = 'Nina' AND a.last_name = 'Soto';
SELECT      (SELECT COUNT(f.film_id)       FROM film f       JOIN inventory i ON f.film_id = i.film_id       JOIN film_actor fa ON f.film_id = fa.film_id       WHERE i.store_id = 1 AND fa.actor_id = (SELECT actor_id FROM actor WHERE first_name = 'Reese' AND last_name = 'West')) AS count_store_1,          (SELECT COUNT(f.film_id)       FROM film f       JOIN inventory i ON f.film_id = i.film_id       JOIN film_actor fa ON f.film_id = fa.film_id       WHERE i.store_id = 2 AND fa.actor_id = (SELECT actor_id FROM actor WHERE first_name = 'Reese' AND last_name = 'West')) AS count_store_2,      (SELECT COUNT(f.film_id)       FROM film f       JOIN inventory i ON f.film_id = i.film_id       JOIN film_actor fa ON f.film_id = fa.film_id       WHERE i.store_id = 1 AND fa.actor_id = (SELECT actor_id FROM actor WHERE first_name = 'Reese' AND last_name = 'West')) -      (SELECT COUNT(f.film_id)       FROM film f       JOIN inventory i ON f.film_id = i.film_id       JOIN film_actor fa ON f.film_id = fa.film_id       WHERE i.store_id = 2 AND fa.actor_id = (SELECT actor_id FROM actor WHERE first_name = 'Reese' AND last_name = 'West')) AS difference;
SELECT postal_code  FROM address  WHERE address = '692 Joliet Street';
SELECT COUNT(*) AS active_customers FROM customer WHERE active = 1;
SELECT COUNT(*)  FROM customer  WHERE store_id = 1 AND active = 1;
SELECT a.address, a.address2, a.district, c.city, co.country  FROM customer AS cu JOIN address AS a ON cu.address_id = a.address_id JOIN city AS c ON a.city_id = c.city_id JOIN country AS co ON c.country_id = co.country_id WHERE cu.first_name = 'Mary' AND cu.last_name = 'Smith';
SELECT COUNT(*)  FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id WHERE c.active = 1 AND ci.city = 'Arlington';
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id JOIN country co ON ci.country_id = co.country_id WHERE co.country = 'Italy';
SELECT country.country  FROM customer  JOIN address ON customer.address_id = address.address_id  JOIN city ON address.city_id = city.city_id  JOIN country ON city.country_id = country.country_id  WHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith';
SELECT MAX(p.amount)  FROM payment p  JOIN customer c ON p.customer_id = c.customer_id  WHERE c.first_name = 'Mary' AND c.last_name = 'Smith';
SELECT COUNT(rental.rental_id) AS rental_count FROM customer JOIN rental ON customer.customer_id = rental.customer_id WHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith';
SELECT SUM(p.amount) AS total_spent FROM payment p JOIN customer c ON p.customer_id = c.customer_id WHERE c.first_name = 'Mary' AND c.last_name = 'Smith';
SELECT COUNT(*)  FROM rental r JOIN payment p ON r.rental_id = p.rental_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'Mary' AND c.last_name = 'Smith'  AND YEAR(p.payment_date) = 2005 AND MONTH(p.payment_date) = 6;
SELECT CONCAT(c.first_name, ' ', c.last_name) AS full_name FROM customer c JOIN payment p ON c.customer_id = p.customer_id ORDER BY p.amount DESC LIMIT 1;
SELECT SUM(p.amount) AS total_spent FROM payment p JOIN customer c ON p.customer_id = c.customer_id JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id JOIN country co ON ci.country_id = co.country_id WHERE co.country = 'Italy';
SELECT COUNT(*)  FROM payment p JOIN customer c ON p.customer_id = c.customer_id WHERE c.first_name = 'Mary' AND c.last_name = 'Smith' AND p.amount > 4.99;
SELECT AVG(amount) AS average_amount_spent FROM payment JOIN customer ON payment.customer_id = customer.customer_id JOIN address ON customer.address_id = address.address_id JOIN city ON address.city_id = city.city_id JOIN country ON city.country_id = country.country_id WHERE country.country = 'Italy';
SELECT MAX("Percent (%) Eligible Free (K-12)") AS Highest_Eligible_Free_Rate FROM frpm WHERE "County Name" = 'Alameda';
SELECT      s.School,      (f."Free Meal Count (Ages 5-17)"::float / f."Enrollment (Ages 5-17)"::float) AS Eligible_Free_Rate FROM      frpm f JOIN      schools s ON f.CDSCode = s.CDSCode WHERE      f."School Type" = 'Continuation School' ORDER BY      Eligible_Free_Rate ASC LIMIT 3;
SELECT DISTINCT s.Zip FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.County Name = 'Fresno County Office of Education' AND f.Charter School (Y/N) = 'Y';
SELECT s.MailStreet, s.MailCity, s.MailZip, s.MailState FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode ORDER BY f."FRPM Count (K-12)" DESC LIMIT 1;
SELECT s.Phone  FROM schools s  JOIN frpm f ON s.CDSCode = f.CDSCode  WHERE f.Charter_School_Y_N = 'Y'  AND f.Charter_Funding_Type = 'Direct'  AND s.OpenDate > '2000-01-01';
SELECT COUNT(*)  FROM satscores s JOIN schools sch ON s.cds = sch.CDSCode WHERE s.AvgScrMath < 400 AND sch.Virtual = 'F';
SELECT s.School, s.District, s.County FROM satscores sat JOIN schools s ON sat.cds = s.CDSCode WHERE sat.NumTstTakr > 500 AND s.Magnet = 1;
SELECT s.Phone FROM satscores s WHERE s.NumTstTakr = (     SELECT MAX(NumTstTakr)     FROM satscores     WHERE NumGE1500 > 0 ) AND s.NumGE1500 > 0 JOIN schools sch ON s.cds = sch.CDSCode;
SELECT SUM(s.NumTstTakr) AS Total_SAT_Test_Takers FROM satscores s JOIN frpm f ON s.cds = f.CDSCode WHERE f.FRPM_Count_K12 = (     SELECT MAX(FRPM_Count_K12)     FROM frpm )
SELECT COUNT(*)  FROM satscores s JOIN schools sch ON s.cds = sch.CDSCode WHERE s.AvgScrMath > 560 AND sch.FundingType = 'Charter';
SELECT f."FRPM Count (Ages 5-17)" FROM satscores s JOIN frpm f ON s.cds = f.CDSCode WHERE s.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores);
SELECT CDSCode  FROM frpm  WHERE (Enrollment (K-12) + Enrollment (Ages 5-17)) > 500;
SELECT MAX((frpm."Free Meal Count (Ages 5-17)"::float / frpm."Enrollment (Ages 5-17)"::float) * 100) AS highest_eligible_free_rate FROM satscores JOIN frpm ON satscores.cds = frpm.CDSCode WHERE (satscores.NumGE1500::float / satscores.NumTstTakr::float) > 0.3;
SELECT s.Phone FROM satscores s WHERE s.NumTstTakr > 0 ORDER BY (s.NumGE1500 * 1.0 / s.NumTstTakr) DESC LIMIT 3;
SELECT s.NCESSchool FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode ORDER BY f.[Enrollment (Ages 5-17)] DESC LIMIT 5;
SELECT dname, AVG(AvgScrRead) AS AvgReadingScore FROM satscores s JOIN schools sch ON s.cds = sch.CDSCode WHERE sch.StatusType = 'Active' GROUP BY dname ORDER BY AvgReadingScore DESC LIMIT 1;
SELECT COUNT(*)  FROM schools s  JOIN satscores sa ON s.CDSCode = sa.cds  WHERE s.County = 'Alameda'  AND sa.NumTstTakr < 100;
SELECT s."Charter School Number" FROM satscores sa JOIN schools s ON sa.cds = s.CDSCode WHERE sa.AvgScrWrite = 499;
SELECT COUNT(*)  FROM schools s  JOIN satscores sa ON s.CDSCode = sa.cds  WHERE s.County = 'Contra Costa'  AND s.FundingType = 'Directly Funded'  AND sa.NumTstTakr <= 250;
SELECT s.Phone FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode ORDER BY ss.AvgScrMath DESC LIMIT 1;
SELECT COUNT(*)  FROM frpm  WHERE County Name = 'Amador'  AND Low Grade = 9  AND High Grade = 12;
SELECT COUNT(*)  FROM frpm  WHERE County Name = 'Los Angeles'  AND Free Meal Count (K-12) > 500  AND FRPM Count (K-12) < 700;
SELECT s.School, s.District, s.County, sa.NumTstTakr FROM schools s JOIN satscores sa ON s.CDSCode = sa.cds WHERE s.County = 'Contra Costa' ORDER BY sa.NumTstTakr DESC LIMIT 1;
SELECT s.School,         s.Street,         s.StreetAbr,         s.City,         s.Zip,         s.State FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE ABS(f.Enrollment (K-12) - f.Enrollment (Ages 5-17)) > 30;
SELECT s.School FROM frpm f JOIN satscores s ON f.CDSCode = s.cds WHERE f.Percent_Eligible_Free_K12 > 0.1 AND s.NumTstTakr > 0 AND s.NumGE1500 > 0;
SELECT s.School, s.FundingType FROM schools s JOIN satscores sa ON s.CDSCode = sa.cds WHERE s.County = 'Riverside' GROUP BY s.School, s.FundingType HAVING AVG(sa.AvgScrMath) > 400;
SELECT s.School,         CONCAT(s.Street, ', ', s.City, ', ', s.Zip, ', ', s.State) AS FullAddress FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.County Name = 'Monterey'    AND f.High Grade = '12'    AND f.FRPM Count (Ages 5-17) > 800;
SELECT s.School, AVG(sa.AvgScrWrite) AS AvgWritingScore, s.Phone FROM schools s JOIN satscores sa ON s.CDSCode = sa.cds WHERE s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-01-01' GROUP BY s.School, s.Phone;
WITH EnrollmentDifference AS (     SELECT          s.School AS SchoolName,         s.DOCType,         (f."Enrollment (K-12)" - f."Enrollment (Ages 5-17)") AS Difference     FROM          frpm f     JOIN          schools s ON f.CDSCode = s.CDSCode     WHERE          f."Charter Funding Type" = 'Locally Funded' ), AverageDifference AS (     SELECT          AVG(Difference) AS AvgDiff     FROM          EnrollmentDifference ) SELECT      ed.SchoolName,     ed.DOCType FROM      EnrollmentDifference ed JOIN      AverageDifference ad ON ed.Difference > ad.AvgDiff;
SELECT OpenDate  FROM schools  WHERE CDSCode = (     SELECT CDSCode      FROM frpm      ORDER BY Enrollment DESC      LIMIT 1 );
SELECT City, SUM(Enrollment) AS TotalEnrollment FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE LowGrade <= 1 AND HighGrade >= 12 GROUP BY City ORDER BY TotalEnrollment ASC LIMIT 5;
SELECT      School_Name,      (Free_Meal_Count_K12 / Enrollment_K12) AS Eligible_Free_Rate FROM      frpm ORDER BY      Enrollment_K12 DESC LIMIT 10 OFFSET 9;
SELECT      s.School,      (f."FRPM Count (K-12)"::float / f."Enrollment (K-12)"::float) AS Eligible_Free_Reduced_Price_Meal_Rate FROM      frpm f JOIN      schools s ON f.CDSCode = s.CDSCode WHERE      s.StatusType = '66'      AND f."Enrollment (K-12)" > 0 ORDER BY      f."FRPM Count (K-12)" DESC LIMIT 5;
SELECT s.Website, s.School FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.FreeMealCount_Ages_5_17 BETWEEN 1900 AND 2000;
SELECT      (frpm."Free Meal Count (Ages 5-17)"::float / frpm."Enrollment (Ages 5-17)"::float) * 100 AS free_rate FROM      frpm JOIN      schools ON frpm.CDSCode = schools.CDSCode WHERE      schools.AdmFName1 = 'Kacey' AND schools.AdmLName1 = 'Gibson';
SELECT s.AdmEmail1 FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f."Charter School (Y/N)" = 'Y' ORDER BY f."Enrollment (K-12)" ASC LIMIT 1;
SELECT CONCAT(sch.AdmFName1, ' ', sch.AdmLName1) AS FullName FROM satscores sat JOIN schools sch ON sat.cds = sch.CDSCode WHERE sat.NumGE1500 = (     SELECT MAX(NumGE1500)     FROM satscores     WHERE NumGE1500 >= 1500 )
SELECT s.Street, s.City, s.Zip, s.State FROM satscores s JOIN (     SELECT cds, MIN(NumGE1500 / NumTstTakr) AS MinExcellenceRate     FROM satscores     WHERE NumTstTakr > 0     GROUP BY cds ) AS min_rate ON s.cds = min_rate.cds WHERE (NumGE1500 / NumTstTakr) = min_rate.MinExcellenceRate LIMIT 1;
SELECT s.Website  FROM satscores sat  JOIN schools s ON sat.cds = s.CDSCode  WHERE s.County = 'Los Angeles'  AND sat.NumTstTakr BETWEEN 2000 AND 3000;
SELECT AVG(NumTstTakr) AS AverageTestTakers FROM satscores s JOIN schools sch ON s.cds = sch.CDSCode WHERE sch.County = 'Fresno'  AND sch.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';
SELECT s.Phone FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode WHERE s.District = 'Fresno Unified' ORDER BY ss.AvgScrRead ASC LIMIT 1;
SELECT s.School, s.City, s.County, sa.AvgScrRead FROM schools s JOIN satscores sa ON s.CDSCode = sa.cds WHERE s.Virtual = 'F' ORDER BY sa.AvgScrRead DESC LIMIT 5;
SELECT s.School, s.SchoolType FROM satscores sat JOIN schools s ON sat.cds = s.CDSCode WHERE sat.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores);
SELECT AVG(AvgScrMath) AS AverageMathScore, s.County FROM satscores s JOIN (     SELECT cds, (AvgScrMath + AvgScrRead + AvgScrWrite) AS TotalAvgScore     FROM satscores ) AS avg_scores ON s.cds = avg_scores.cds WHERE TotalAvgScore = (     SELECT MIN(AvgScrMath + AvgScrRead + AvgScrWrite)     FROM satscores ) GROUP BY s.County;
SELECT s.City, AVG(sa.AvgScrWrite) AS AverageWritingScore FROM satscores sa JOIN schools s ON sa.cds = s.CDSCode WHERE sa.NumTstTakr = (     SELECT MAX(NumTstTakr)     FROM satscores     WHERE NumGE1500 > 0 ) AND sa.NumGE1500 > 0 GROUP BY s.City;
SELECT s.School, AVG(sa.AvgScrWrite) AS Average_Writing_Score FROM schools s JOIN satscores sa ON s.CDSCode = sa.cds WHERE s.AdmFName1 = 'Ricci' AND s.AdmLName1 = 'Ulrich' GROUP BY s.School;
SELECT s.School, SUM(f.Enrollment) AS TotalEnrollment FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.DOC = 31 GROUP BY s.School ORDER BY TotalEnrollment DESC LIMIT 1;
SELECT COUNT(*) / 12 AS Monthly_Average_Schools_Opened FROM schools WHERE County = 'Alameda'   AND DOC = 52   AND YEAR(OpenDate) = 1980;
SELECT      (SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = 54) AS Unified_School_District_Count,     (SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = 52) AS Elementary_School_District_Count,     (SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = 54) * 1.0 / NULLIF((SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = 52), 0) AS Ratio
SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' ORDER BY County GROUP BY County HAVING COUNT(*) = (     SELECT MAX(closed_count)     FROM (         SELECT COUNT(*) AS closed_count         FROM schools         WHERE StatusType = 'Closed'         GROUP BY County     ) AS county_closed_counts );
SELECT s.Street, s.City, s.Zip, s.State, s.School FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode ORDER BY ss.AvgScrMath DESC LIMIT 1 OFFSET 5;
SELECT s.MailStreet, s.School FROM satscores sat JOIN schools s ON sat.cds = s.CDSCode WHERE sat.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores)
SELECT COUNT(*)  FROM schools s  JOIN satscores sa ON s.CDSCode = sa.cds  WHERE (sa.AvgScrRead + sa.AvgScrMath + sa.AvgScrWrite) >= 1500  AND s.MailCity = 'Lakeport';
SELECT SUM(s.NumTstTakr) AS TotalTestTakers FROM satscores s JOIN schools sch ON s.cds = sch.CDSCode WHERE sch.MailCity = 'Fresno';
SELECT s.School, s.MailZip FROM schools s WHERE (s.AdmFName1 = 'Avetik' AND s.AdmLName1 = 'Atoian')    OR (s.AdmFName2 = 'Avetik' AND s.AdmLName2 = 'Atoian')    OR (s.AdmFName3 = 'Avetik' AND s.AdmLName3 = 'Atoian');
SELECT      (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND MailState = 'CA') * 1.0 /      (SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND MailState = 'CA') AS ratio
SELECT COUNT(*)  FROM schools  WHERE State = 'CA' AND StatusType = 'Active' AND County = 'San Joaquin';
SELECT s.Phone, s.Ext FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode ORDER BY ss.AvgScrWrite DESC LIMIT 1 OFFSET 332;
SELECT School, Phone, Ext  FROM schools  WHERE MailZip = '95203-3704';
SELECT s.Website  FROM schools s  WHERE (s.AdmFName1 = 'Mike' AND s.AdmLName1 = 'Larson')     OR (s.AdmFName1 = 'Dante' AND s.AdmLName1 = 'Alvarez');
SELECT Website  FROM schools  WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin';
SELECT COUNT(*)  FROM schools  WHERE City = 'Hickman' AND DOC = 52 AND Charter = 1;
SELECT COUNT(*)  FROM frpm  WHERE County Name = 'Los Angeles'    AND Charter School (Y/N) = 'N'    AND (Free Meal Count (K-12) * 100.0 / Enrollment (K-12)) < 0.18;
SELECT s.School, s.City,         CONCAT(s.AdmFName1, ' ', s.AdmLName1) AS Administrator1,        CONCAT(s.AdmFName2, ' ', s.AdmLName2) AS Administrator2,        CONCAT(s.AdmFName3, ' ', s.AdmLName3) AS Administrator3 FROM schools s WHERE s.Charter = 1 AND s.CharterNum = '00D2';
SELECT COUNT(*)  FROM schools  WHERE MailCity = 'Hickman' AND CharterNum = '00D4';
SELECT      (COUNT(CASE WHEN FundingType = 'Locally Funded' THEN 1 END) * 100.0 / COUNT(*)) AS RatioPercentage FROM      schools WHERE      County = 'Santa Clara';
SELECT COUNT(*)  FROM schools  WHERE FundingType = 'Directly Funded'  AND County = 'Stanislaus'  AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';
SELECT COUNT(*) AS TotalClosure FROM schools WHERE StatusType = 'Closed'    AND OpenDate <= '1989-12-31'    AND ClosedDate >= '1989-01-01'    AND City = 'San Francisco'    AND SchoolType = 'Community College District';
SELECT County, COUNT(*) AS ClosureCount FROM schools WHERE StatusType = 'Closed'    AND SOC = 11    AND OpenDate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY County ORDER BY ClosureCount DESC LIMIT 1;
SELECT NCESDist  FROM schools  WHERE SOC = 31;
SELECT StatusType, COUNT(*) AS SchoolCount FROM schools WHERE County = 'Alpine' AND StatusType IN ('Active', 'Closed') AND SchoolType = 'District Community Day School' GROUP BY StatusType;
SELECT District_Code  FROM schools  WHERE City = 'Fresno' AND Magnet = 0;
SELECT SUM(f.Enrollment_Ages_5_17) AS Total_Enrollment FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.School = 'State Special School'   AND s.City = 'Fremont'   AND f.Academic_Year = '2014-2015';
SELECT f."FRPM Count (Ages 5-17)" FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.School = 'Youth Authority School' AND s.MailStreet = 'PO Box 1040';
SELECT Low_Grade  FROM frpm  JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE schools.NCESDist = '613360' AND frpm.Educational_Option_Type = 'SPECON';
SELECT s.School FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.NSLP_Provision_Status = 'Breakfast Provision 2' AND f.County_Code = 37;
SELECT s.City FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.County Name = 'Merced'   AND f.Low Grade = 9   AND f.High Grade = 12   AND f.NSLP Provision Status = '2'   AND f.EILCode = 'HS';
SELECT s.School,         (f."Free Meal Count (Ages 5-17)"::float / f."Enrollment (Ages 5-17)" * 100) AS "Percent (%) Eligible FRPM (Ages 5-17)" FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.LowGrade = 'K'    AND f.HighGrade = '9'    AND f.County Name = 'Los Angeles';
SELECT "School Type", COUNT(*) AS count FROM schools WHERE City = 'Adelanto' GROUP BY "School Type" ORDER BY count DESC LIMIT 1;
SELECT County, COUNT(*) AS SchoolCount FROM schools WHERE Virtual = 'F' AND County IN ('San Diego', 'Santa Barbara') GROUP BY County ORDER BY SchoolCount DESC LIMIT 1;
SELECT School, Latitude, School_Type FROM schools WHERE Latitude = (SELECT MAX(Latitude) FROM schools);
SELECT s.City, s.LowGrade, s.School FROM schools s WHERE s.State = 'CA' ORDER BY s.Latitude ASC LIMIT 1;
SELECT Low_Grade, High_Grade  FROM schools  WHERE Longitude = (SELECT MAX(Longitude) FROM schools);
SELECT      s.City,      COUNT(s.School) AS SchoolCount FROM      schools s WHERE      s.GSserved = 'K-8'      AND s.Magnet = 1 GROUP BY      s.City;
SELECT AdmFName1 AS FirstName, District, COUNT(*) AS NameCount FROM schools GROUP BY AdmFName1, District ORDER BY NameCount DESC LIMIT 2;
SELECT f."District Code" FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.AdmFName1 = 'Alusine';
SELECT s.AdmLName1, s.District, s.County, s.School FROM schools s WHERE s.CharterNum = 40;
SELECT AdmEmail1  FROM schools  WHERE County = 'San Bernardino'    AND District = 'San Bernardino City Unified'    AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31'    AND (SOC = 62 OR DOC = 54);
SELECT s.AdmEmail1, s.School FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode WHERE ss.NumGE1500 > 0 ORDER BY ss.NumTstTakr DESC LIMIT 1;
SELECT COUNT(DISTINCT a.account_id)  FROM account a JOIN trans t ON a.account_id = t.account_id JOIN district d ON a.district_id = d.district_id JOIN card c ON a.account_id = c.account_id WHERE d.A3 = 'East Bohemia'  AND c.type = 'POPLATEK PO OBRATU';
SELECT COUNT(DISTINCT a.account_id)  FROM account a JOIN district d ON a.district_id = d.district_id JOIN loan l ON a.account_id = l.account_id WHERE d.A3 = 'Prague' AND l.status = 'eligible';
SELECT      CASE          WHEN AVG(A12) > AVG(A13) THEN '1995 has a higher unemployment ratio'         WHEN AVG(A12) < AVG(A13) THEN '1996 has a higher unemployment ratio'         ELSE 'Both years have the same unemployment ratio'     END AS result FROM district;
SELECT COUNT(DISTINCT district_id) AS num_districts FROM client JOIN district ON client.district_id = district.district_id WHERE gender = 'F' AND A11 > 6000 AND A11 < 10000;
SELECT COUNT(*)  FROM client c  JOIN district d ON c.district_id = d.district_id  WHERE c.gender = 'M' AND d.A3 = 'North Bohemia' AND d.A11 > 8000;
WITH SalaryStats AS (     SELECT          c.client_id,         a.account_id,         c.gender,         c.birth_date,         d.A11 AS average_salary     FROM          client c     JOIN          disp d ON c.client_id = d.client_id     JOIN          account a ON d.account_id = a.account_id     WHERE          c.gender = 'F' ), OldestLowest AS (     SELECT          account_id,         MIN(average_salary) AS lowest_average_salary     FROM          SalaryStats     WHERE          birth_date = (SELECT MAX(birth_date) FROM SalaryStats)     GROUP BY          account_id ), HighestSalary AS (     SELECT          MAX(average_salary) AS highest_average_salary     FROM          SalaryStats ) SELECT      o.account_id,     (h.highest_average_salary - o.lowest_average_salary) AS salary_gap FROM      OldestLowest o, HighestSalary h;
SELECT c.client_id, a.account_id FROM client c JOIN district d ON c.district_id = d.district_id JOIN account a ON a.account_id = (SELECT account_id FROM disp WHERE client_id = c.client_id) WHERE d.A11 = (SELECT MAX(A11) FROM district) ORDER BY c.birth_date DESC LIMIT 1;
SELECT COUNT(DISTINCT c.client_id) AS owner_count FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE ca.type = 'POPLATEK TYDNE' AND c.gender = 'Owner';
SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id JOIN trans t ON d.account_id = t.account_id WHERE ca.type = 'POPLATEK PO OBRATU' AND t.type = 'Disponent';
SELECT a.account_id, l.amount FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.status = 'approved' AND YEAR(l.date) = 1997 ORDER BY l.amount ASC LIMIT 1;
SELECT a.account_id, l.amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 AND YEAR(a.date) = 1993 ORDER BY l.amount DESC LIMIT 1;
SELECT COUNT(DISTINCT c.client_id) AS female_customers FROM client c JOIN district d ON c.district_id = d.district_id JOIN account a ON c.client_id = (SELECT disp.client_id FROM disp disp WHERE disp.account_id = a.account_id) WHERE c.gender = 'F'    AND c.birth_date < '1950-01-01'    AND d.A2 = 'Slokolov';
SELECT account_id  FROM trans  WHERE YEAR(date) = 1995  ORDER BY date ASC  LIMIT 1;
SELECT DISTINCT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.date < '1997-01-01' AND l.amount > 3000;
SELECT c.client_id  FROM client c  JOIN disp d ON c.client_id = d.client_id  JOIN card ca ON d.disp_id = ca.disp_id  WHERE ca.issued = '1994-03-03';
SELECT date FROM account WHERE account_id = (     SELECT account_id FROM trans WHERE amount = 840 AND date = '1998-10-14' );
SELECT a.district_id FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.date = '1994-08-25' AND l.status = 'approved';
SELECT MAX(t.amount) AS biggest_transaction FROM trans t JOIN card c ON t.account_id = c.account_id JOIN disp d ON c.disp_id = d.disp_id JOIN client cl ON d.client_id = cl.client_id WHERE c.issued = '1996-10-21';
SELECT c.gender FROM client c JOIN account a ON c.client_id = a.account_id JOIN district d ON c.district_id = d.district_id WHERE c.birth_date = (     SELECT MIN(birth_date)     FROM client c2     JOIN account a2 ON c2.client_id = a2.account_id     JOIN district d2 ON c2.district_id = d2.district_id     WHERE d2.A11 = (         SELECT MAX(A11)         FROM district     ) )
SELECT t.amount FROM trans t JOIN account a ON t.account_id = a.account_id JOIN loan l ON a.account_id = l.account_id WHERE l.amount = (     SELECT MAX(amount)     FROM loan ) AND t.date = (     SELECT MIN(date)     FROM trans     WHERE account_id = a.account_id );
SELECT COUNT(DISTINCT c.client_id) AS female_clients FROM client c JOIN district d ON c.district_id = d.district_id JOIN account a ON c.client_id = a.account_id WHERE d.A2 = 'Jesenik' AND c.gender = 'F';
SELECT d.disp_id FROM trans t JOIN disp d ON t.account_id = d.account_id WHERE t.amount = 5100 AND t.date = '1998-09-02';
SELECT COUNT(*)  FROM account a  JOIN district d ON a.district_id = d.district_id  WHERE d.A2 = 'Litomerice' AND YEAR(a.date) = 1996;
SELECT d.A2  FROM client c  JOIN account a ON c.district_id = a.district_id  JOIN district d ON c.district_id = d.district_id  WHERE c.gender = 'F' AND c.birth_date = '1976-01-29';
SELECT c.birth_date FROM client c JOIN loan l ON c.client_id = (SELECT d.client_id FROM disp d WHERE d.account_id = l.account_id) WHERE l.amount = 98832 AND l.date = '1996-01-03';
SELECT a.account_id FROM account a JOIN client c ON a.district_id = c.district_id JOIN district d ON c.district_id = d.district_id WHERE d.A3 = 'Prague' ORDER BY a.date LIMIT 1;
SELECT      (COUNT(CASE WHEN c.gender = 'M' THEN 1 END) * 100.0 / COUNT(c.client_id)) AS male_percentage FROM      client c JOIN      district d ON c.district_id = d.district_id WHERE      d.A3 = 'South Bohemia'     AND d.A4 = (SELECT MAX(A4) FROM district WHERE A3 = 'South Bohemia');
SELECT      ((final_balance.balance - initial_balance.balance) / initial_balance.balance) * 100 AS increase_rate FROM      (SELECT          t.balance       FROM          loan l       JOIN          account a ON l.account_id = a.account_id       JOIN          trans t ON a.account_id = t.account_id       WHERE          l.date = '1993-07-05'          AND t.date = '1993-03-22') AS initial_balance,     (SELECT          t.balance       FROM          loan l       JOIN          account a ON l.account_id = a.account_id       JOIN          trans t ON a.account_id = t.account_id       WHERE          l.date = '1993-07-05'          AND t.date = '1998-12-27') AS final_balance;
SELECT      (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) / SUM(amount)) * 100 AS percentage_paid FROM      loan;
SELECT      (COUNT(CASE WHEN l.status = 'C' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_running_accounts FROM      loan l WHERE      l.amount < 100000;
SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region FROM account a JOIN district d ON a.district_id = d.district_id JOIN trans t ON a.account_id = t.account_id JOIN card c ON c.disp_id = t.trans_id WHERE YEAR(a.date) = 1993  AND c.type = 'POPLATEK PO OBRATU'  AND c.issued > t.date;
SELECT a.account_id, a.frequency FROM account a JOIN district d ON a.district_id = d.district_id JOIN disp disp ON a.account_id = disp.account_id JOIN client c ON disp.client_id = c.client_id WHERE d.A2 = 'east Bohemia'  AND a.date BETWEEN '1995-01-01' AND '2000-12-31';
SELECT a.account_id, a.date FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Prachatice';
SELECT d.A2 AS district, d.A3 AS region FROM loan l JOIN account a ON l.account_id = a.account_id JOIN client c ON a.district_id = c.district_id JOIN district d ON c.district_id = d.district_id WHERE l.loan_id = '4990';
SELECT a.account_id, d.A2 AS district, d.A3 AS region FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.amount > 300000;
SELECT l.loan_id, d.A3 AS district, d.A11 AS average_salary FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.duration = 60;
SELECT d.district_id,         ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_increment_rate FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp di ON a.account_id = di.account_id JOIN client c ON di.client_id = c.client_id JOIN district d ON c.district_id = d.district_id WHERE l.status = 'D';
SELECT      (COUNT(a.account_id) * 100.0 / (SELECT COUNT(*) FROM account WHERE YEAR(date) = 1993)) AS percentage FROM      account a JOIN      district d ON a.district_id = d.district_id WHERE      d.A2 = 'Decin' AND YEAR(a.date) = 1993;
SELECT DISTINCT account_id  FROM account  WHERE frequency = 'POPLATEK MESICNE';
SELECT d.A2 AS district, COUNT(DISTINCT c.client_id) AS female_account_holders FROM district d JOIN client c ON d.district_id = c.district_id JOIN disp di ON c.client_id = di.client_id JOIN account a ON di.account_id = a.account_id WHERE c.gender = 'F' GROUP BY d.A2 ORDER BY female_account_holders DESC LIMIT 10;
SELECT d.A2 AS district_name, SUM(t.amount) AS total_withdrawals FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' GROUP BY d.A2 ORDER BY total_withdrawals DESC LIMIT 10;
SELECT COUNT(DISTINCT a.account_id) AS no_credit_card_count FROM account a JOIN client c ON a.district_id = c.district_id JOIN district d ON c.district_id = d.district_id LEFT JOIN card ca ON a.account_id = ca.account_id WHERE d.A3 = 'South Bohemia' AND ca.card_id IS NULL;
SELECT d.A3 AS district_name, COUNT(l.loan_id) AS active_loans FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status IN ('C', 'D') GROUP BY d.A3 ORDER BY active_loans DESC LIMIT 1;
SELECT AVG(loan.amount) AS average_loan_amount FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.district_id = client.district_id WHERE client.gender = 'M';
SELECT A2 AS district_name, A13 AS unemployment_rate FROM district WHERE A13 IS NOT NULL ORDER BY A13 DESC LIMIT 1;
SELECT COUNT(a.account_id) AS accounts_opened FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A16 = (SELECT MAX(A16) FROM district)
SELECT COUNT(DISTINCT a.account_id) AS negative_balance_accounts FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.balance < 0   AND t.operation = 'VYBER KARTOU'   AND a.frequency = 'POPLATEK MESICNE';
SELECT COUNT(*)  FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.date BETWEEN '1995-01-01' AND '1997-12-31'    AND l.amount >= 250000    AND a.frequency = 'POPLATEK MESICNE'    AND l.status = 'approved';
SELECT COUNT(DISTINCT a.account_id)  FROM account a JOIN loan l ON a.account_id = l.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A2 = 'Branch location 1' AND (l.status = 'C' OR l.status = 'D');
SELECT COUNT(*) AS male_client_count FROM client WHERE district_id = (     SELECT district_id     FROM district     ORDER BY A15 DESC     LIMIT 1 OFFSET 1 ) AND gender = 'M';
SELECT COUNT(*)  FROM card  WHERE type = 'gold' AND disp_id IN (SELECT disp_id FROM disp WHERE type = 'disponent');
SELECT COUNT(*)  FROM account a  JOIN district d ON a.district_id = d.district_id  WHERE d.A2 = 'Pisek';
SELECT DISTINCT d.district_id FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.amount > 10000 AND YEAR(t.date) = 1997;
SELECT DISTINCT a.account_id FROM account a JOIN order o ON a.account_id = o.account_id JOIN district d ON a.district_id = d.district_id WHERE o.k_symbol = 'SIPO' AND d.A2 = 'Pisek';
SELECT DISTINCT a.account_id FROM account a JOIN disp d ON a.account_id = d.account_id JOIN card c ON d.disp_id = c.disp_id WHERE c.type IN ('gold', 'junior') GROUP BY a.account_id HAVING COUNT(DISTINCT c.type) = 2;
SELECT AVG(amount) AS average_credit_card_withdrawal FROM trans WHERE operation = 'VYBER KARTOU'   AND YEAR(date) = 2021 GROUP BY MONTH(date);
SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id JOIN trans t ON ca.card_id = t.account_id WHERE t.operation = 'VYBER KARTOU'   AND YEAR(t.date) = 1998 GROUP BY c.client_id, MONTH(t.date) HAVING SUM(t.amount) < (SELECT AVG(monthly_spent)                           FROM (SELECT SUM(t2.amount) AS monthly_spent                                FROM trans t2                                JOIN card ca2 ON t2.account_id = ca2.card_id                                JOIN disp d2 ON ca2.disp_id = d2.disp_id                                JOIN client c2 ON d2.client_id = c2.client_id                                WHERE t2.operation = 'VYBER KARTOU'                                  AND YEAR(t2.date) = 1998                                GROUP BY MONTH(t2.date)) AS avg_spent);
SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id JOIN loan l ON d.account_id = l.account_id WHERE c.gender = 'F';
SELECT COUNT(DISTINCT a.account_id)  FROM account a JOIN client c ON a.district_id = c.district_id JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND d.A3 = 'south Bohemia';
SELECT a.account_id FROM account a JOIN district d ON a.district_id = d.district_id JOIN disp di ON a.account_id = di.account_id WHERE d.A2 = 'Tabor' AND di.type = 'OWNER';
SELECT DISTINCT a.frequency FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A11 > 8000 AND d.A11 <= 9000 AND a.frequency <> 'OWNER';
SELECT COUNT(DISTINCT a.account_id)  FROM account a JOIN district d ON a.district_id = d.district_id JOIN trans t ON a.account_id = t.account_id WHERE d.A3 = 'North Bohemia' AND t.bank = 'AB';
SELECT DISTINCT d.A2 FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.type = 'VYDAJ';
SELECT AVG(d.A15) AS average_crimes FROM district d JOIN account a ON d.district_id = a.district_id WHERE d.A15 > 4000 AND a.date >= '1997-01-01' AND a.date < '1998-01-01';
SELECT COUNT(DISTINCT c.card_id) AS classic_card_eligible_for_loan FROM card c JOIN disp d ON c.disp_id = d.disp_id JOIN account a ON d.account_id = a.account_id JOIN loan l ON a.account_id = l.account_id WHERE c.type = 'classic' AND a.frequency = 'OWNER';
SELECT COUNT(*)  FROM client c  JOIN district d ON c.district_id = d.district_id  WHERE d.A2 = 'Hl.m. Praha' AND c.gender = 'M';
SELECT (COUNT(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 END) * 100.0) / COUNT(*) AS percent_gold FROM card;
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN loan l ON a.account_id = l.account_id WHERE l.amount = (SELECT MAX(amount) FROM loan);
SELECT A15  FROM district  WHERE district_id = (SELECT district_id FROM account WHERE account_id = 532);
SELECT d.district_id  FROM order o  JOIN account a ON o.account_id = a.account_id  JOIN district d ON a.district_id = d.district_id  WHERE o.order_id = 33333;
SELECT *  FROM trans  WHERE operation = 'VYBER'  AND account_id IN (SELECT account_id FROM disp WHERE client_id = 3356);
SELECT COUNT(DISTINCT a.account_id) AS weekly_loan_accounts FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000;
SELECT c.type  FROM client cl  JOIN disp d ON cl.client_id = d.client_id  JOIN card c ON d.disp_id = c.disp_id  WHERE cl.client_id = 13539;
SELECT d.A3  FROM client c  JOIN district d ON c.district_id = d.district_id  WHERE c.client_id = 3541;
SELECT d.district_id, COUNT(a.account_id) AS account_count FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY account_count DESC LIMIT 1;
SELECT c.client_id FROM order o JOIN account a ON o.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE o.order_id = 32423;
SELECT *  FROM trans  WHERE account_id IN (SELECT account_id FROM account WHERE district_id = 5);
SELECT COUNT(*)  FROM account  WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik');
SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE ca.type = 'junior' AND ca.issued >= '1997-01-01';
SELECT      (COUNT(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_women FROM      client c JOIN      district d ON c.district_id = d.district_id JOIN      account a ON c.client_id = a.client_id WHERE      d.A11 > 10000;
SELECT      (SUM(CASE WHEN YEAR(l.date) = 1997 THEN l.amount ELSE 0 END) -       SUM(CASE WHEN YEAR(l.date) = 1996 THEN l.amount ELSE 0 END)) /       NULLIF(SUM(CASE WHEN YEAR(l.date) = 1996 THEN l.amount ELSE 0 END), 0) * 100 AS growth_rate FROM      loan l JOIN      account a ON l.account_id = a.account_id JOIN      disp d ON a.account_id = d.account_id JOIN      client c ON d.client_id = c.client_id WHERE      c.gender = 'M' AND      YEAR(l.date) IN (1996, 1997);
SELECT COUNT(*)  FROM trans  WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';
SELECT      (SUM(CASE WHEN d.A3 = 'North Bohemia' THEN d.A16 ELSE 0 END) -      SUM(CASE WHEN d.A3 = 'East Bohemia' THEN d.A16 ELSE 0 END)) AS crime_difference FROM      district d WHERE      d.A16 IS NOT NULL;
SELECT      COUNT(CASE WHEN type = 'owner' THEN 1 END) AS owner_count,     COUNT(CASE WHEN type = 'disponent' THEN 1 END) AS disponent_count FROM      disp  WHERE      account_id BETWEEN 1 AND 10;
SELECT      COUNT(*) AS statement_requests  FROM      trans  WHERE      account_id = 3      AND type = 'statement';  SELECT      k_symbol,      SUM(amount) AS total_debit  FROM      trans  WHERE      account_id = 3539  GROUP BY      k_symbol;
SELECT birth_date  FROM client  WHERE client_id = (SELECT client_id                     FROM disp                     WHERE account_id = 130);
SELECT COUNT(DISTINCT a.account_id) AS account_count FROM account a JOIN disp d ON a.account_id = d.account_id WHERE d.type = 'owner' AND a.frequency = 'POPLATEK PO OBRATU';
SELECT      SUM(loan.amount) AS total_debt,     SUM(CASE WHEN loan.status = 'paid' THEN loan.payments ELSE 0 END) AS total_paid,     SUM(CASE WHEN loan.status = 'unpaid' THEN loan.payments ELSE 0 END) AS total_unpaid FROM      client JOIN      disp ON client.client_id = disp.client_id JOIN      account ON disp.account_id = account.account_id JOIN      loan ON account.account_id = loan.account_id WHERE      client.client_id = 992;
SELECT      SUM(t.amount) AS total_amount,     c.gender FROM      trans t JOIN      account a ON t.account_id = a.account_id JOIN      disp d ON a.account_id = d.account_id JOIN      client c ON d.client_id = c.client_id WHERE      c.client_id = 4 AND      t.trans_id = 851 GROUP BY      c.gender;
SELECT c.type  FROM card c  JOIN disp d ON c.disp_id = d.disp_id  WHERE d.client_id = 9;
SELECT SUM(t.amount) AS total_paid FROM trans t JOIN account a ON t.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id WHERE d.client_id = 617 AND YEAR(t.date) = 1998;
SELECT c.client_id FROM client c JOIN district d ON c.district_id = d.district_id JOIN account a ON a.district_id = d.district_id WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND d.A2 = 'East Bohemia';
SELECT c.client_id FROM client c JOIN loan l ON c.client_id = l.account_id WHERE c.gender = 'F' ORDER BY l.amount DESC LIMIT 3;
SELECT COUNT(DISTINCT c.client_id)  FROM client c JOIN disp d ON c.client_id = d.client_id JOIN loan l ON d.account_id = l.account_id JOIN trans t ON l.account_id = t.account_id WHERE c.gender = 'M'    AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31'    AND t.type = 'SIPO'    AND t.amount > 4000;
SELECT COUNT(*)  FROM account a  JOIN district d ON a.district_id = d.district_id  WHERE d.A2 = 'Beroun' AND a.date > '1996-01-01';
SELECT COUNT(DISTINCT c.client_id) AS female_customers_with_junior_card FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE c.gender = 'F' AND ca.type = 'junior';
SELECT      (COUNT(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS female_proportion FROM      client c JOIN      district d ON c.district_id = d.district_id JOIN      account a ON c.client_id = (SELECT disp.client_id FROM disp disp WHERE disp.account_id = a.account_id LIMIT 1) WHERE      d.A3 = 'Prague';
SELECT      (COUNT(CASE WHEN c.gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_male_weekly_statements FROM      client c JOIN      disp d ON c.client_id = d.client_id JOIN      account a ON d.account_id = a.account_id JOIN      trans t ON a.account_id = t.account_id WHERE      t.type = 'POPLATEK TYDNE';
SELECT COUNT(DISTINCT c.client_id) AS client_count FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE a.frequency = 'POPLATEK TYDNE';
SELECT a.account_id, l.amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 24 AND a.date < '1997-01-01' ORDER BY l.amount ASC LIMIT 1;
SELECT a.account_id FROM account a JOIN client c ON a.district_id = c.district_id JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' ORDER BY c.birth_date ASC, d.A11 ASC LIMIT 1;
SELECT COUNT(*)  FROM client c  JOIN district d ON c.district_id = d.district_id  WHERE YEAR(c.birth_date) = 1920 AND d.A3 = 'East Bohemia';
SELECT COUNT(*)  FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.duration = 24  AND a.frequency = 'POPLATEK TYDNE';
SELECT AVG(l.amount) AS average_loan_amount FROM loan l JOIN trans t ON l.account_id = t.account_id WHERE l.status IN ('C', 'D') AND t.type = 'POPLATEK PO OBRATU';
SELECT DISTINCT c.client_id, c.district_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id LEFT JOIN loan l ON a.account_id = l.account_id LEFT JOIN order o ON a.account_id = o.account_id WHERE l.loan_id IS NULL AND o.order_id IS NULL;
SELECT c.client_id,         FLOOR(DATEDIFF(CURDATE(), c.birth_date) / 365) AS age FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id JOIN loan l ON d.account_id = l.account_id WHERE ca.type = 'gold' AND l.status = 'eligible';
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1;
SELECT COUNT(DISTINCT a.molecule_id) AS chlorine_molecule_count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-' AND a.element = 'cl';
SELECT AVG(oxygen_count) AS average_oxygen_atoms FROM (     SELECT m.molecule_id, COUNT(a.atom_id) AS oxygen_count     FROM molecule m     JOIN bond b ON m.molecule_id = b.molecule_id     JOIN connected c ON b.bond_id = c.bond_id     JOIN atom a ON c.atom_id = a.atom_id     WHERE b.bond_type = '-' AND a.element = 'o'     GROUP BY m.molecule_id ) AS oxygen_counts;
SELECT AVG(single_bonded_count) AS average_single_bonded_carcinogenic FROM (     SELECT m.molecule_id, COUNT(c.atom_id) AS single_bonded_count     FROM molecule m     JOIN bond b ON m.molecule_id = b.molecule_id AND b.bond_type = '-'     JOIN connected c ON b.bond_id = c.bond_id     WHERE m.label = '+'     GROUP BY m.molecule_id ) AS subquery;
SELECT COUNT(*)  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE a.element = 'na' AND m.label = '-';
SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '+';
SELECT      (SUM(a.element = 'c') / COUNT(a.atom_id)) * 100 AS carbon_percentage FROM      atom a JOIN      bond b ON a.molecule_id = b.molecule_id WHERE      b.bond_type = ' = ';
SELECT COUNT(*) FROM bond WHERE bond_type = '#';
SELECT COUNT(*) AS atom_count FROM atom WHERE element != 'br';
SELECT COUNT(*) AS carcinogenic_count FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';
SELECT DISTINCT molecule_id  FROM atom  WHERE element = 'si';
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR004_8_9';
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = ' = ';
SELECT label FROM molecule WHERE molecule_id IN (     SELECT DISTINCT molecule_id     FROM atom     WHERE element = 'h' ) GROUP BY label ORDER BY COUNT(*) DESC LIMIT 1;
SELECT b.bond_type  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  JOIN bond b ON c.bond_id = b.bond_id  WHERE a.element = 'te';
SELECT a1.atom_id, a2.atom_id2 FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '-';
SELECT a1.atom_id, a2.atom_id2 FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN molecule m ON a1.molecule_id = m.molecule_id WHERE m.label = '-';
SELECT element, COUNT(*) AS element_count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-' GROUP BY element ORDER BY element_count ASC LIMIT 1;
SELECT b.bond_type  FROM bond b  JOIN connected c ON b.bond_id = c.bond_id  WHERE (c.atom_id = 'TR004_8' AND c.atom_id2 = 'TR004_20')     OR (c.atom_id = 'TR004_20' AND c.atom_id2 = 'TR004_8');
SELECT DISTINCT m.label FROM molecule m WHERE m.molecule_id NOT IN (     SELECT DISTINCT a.molecule_id     FROM atom a     WHERE a.element = 'sn' );
SELECT COUNT(*)  FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id WHERE (a.element = 'i' OR a.element = 's') AND b.bond_type = '-';
SELECT a1.atom_id, a2.atom_id FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';
SELECT DISTINCT a2.atom_id FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a1.molecule_id = 'TR181';
SELECT      (1 - DIVIDE(SUM(a.element = 'f'), COUNT(DISTINCT m.molecule_id))) * 100 AS percent_non_fluorine_carcinogenic FROM      molecule m JOIN      atom a ON m.molecule_id = a.molecule_id WHERE      m.label = '+';
SELECT      DIVIDE(SUM(bond.bond_type = '#'), COUNT(bond.bond_id)) AS percent FROM      bond JOIN      molecule ON bond.molecule_id = molecule.molecule_id WHERE      molecule.label = '+';
SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element LIMIT 3;
SELECT a.atom_id, a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR001' AND b.bond_id = 'TR001_2_6';
SELECT      SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) -      SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END) AS difference FROM      molecule;
SELECT c.atom_id, c.atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_id = 'TR_000_2_5';
SELECT bond_id  FROM connected  WHERE atom_id2 = 'TR000_2';
SELECT DISTINCT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' ORDER BY m.label LIMIT 5;
SELECT      (SUM(bond_type = ' = ') * 100.0 / COUNT(bond_id)) AS percent  FROM      bond  WHERE      molecule_id = 'TR008';
SELECT DIVIDE(SUM(label = '+'), COUNT(molecule_id)) AS percent FROM molecule;
SELECT DIVIDE(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END), COUNT(atom_id)) * 100 AS percent FROM atom WHERE molecule_id = 'TR206';
SELECT b.bond_type  FROM bond b  WHERE b.molecule_id = 'TR000';
SELECT a.element, m.label  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE m.molecule_id = 'TR060';
SELECT bond.bond_type,         CASE             WHEN molecule.label = '+' THEN 'Carcinogenic'             ELSE 'Non-Carcinogenic'         END AS carcinogenic_status FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.molecule_id = 'TR018' GROUP BY bond.bond_type ORDER BY COUNT(bond.bond_type) DESC LIMIT 1;
SELECT DISTINCT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '-'  AND m.label = '-' ORDER BY m.label LIMIT 3;
SELECT bond_type  FROM bond  WHERE molecule_id = 'TR006'  ORDER BY bond_type  LIMIT 2;
SELECT COUNT(*)  FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.molecule_id = 'TR009'  AND (c.atom_id = 'TR009_12' OR c.atom_id2 = 'TR009_12');
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m  JOIN atom a ON m.molecule_id = a.molecule_id  WHERE m.label = '+' AND a.element = 'br';
SELECT b.bond_type, c.atom_id, c.atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.molecule_id = 'TR001_6_9';
SELECT m.label,         CASE WHEN m.label = '+' THEN 'Carcinogenic' ELSE 'Not Carcinogenic' END AS carcinogenic_status FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_10';
SELECT COUNT(DISTINCT molecule_id)  FROM bond  WHERE bond_type = '#';
SELECT COUNT(*) AS connection_count FROM connected WHERE atom_id = 'TR%_19' OR atom_id2 = 'TR%_19';
SELECT DISTINCT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR004';
SELECT COUNT(*)  FROM molecule  WHERE label = '-';
SELECT DISTINCT m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE SUBSTRING(a.atom_id, 7, 2) BETWEEN '21' AND '25' AND m.label = '+';
SELECT DISTINCT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a1.element = 'p' AND a2.element = 'n'    OR a1.element = 'n' AND a2.element = 'p';
SELECT CASE             WHEN COUNT(b.bond_id) > 0 THEN                 (SELECT label FROM molecule WHERE molecule_id = m.molecule_id)             ELSE                 'Not Carcinogenic'         END AS carcinogenic_status FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '=' GROUP BY m.molecule_id ORDER BY COUNT(b.bond_id) DESC LIMIT 1;
SELECT AVG(bond_count) AS average_bonds FROM (     SELECT a.atom_id, COUNT(c.bond_id) AS bond_count     FROM atom a     LEFT JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2     WHERE a.element = 'i'     GROUP BY a.atom_id ) AS bond_counts;
SELECT b.bond_type, b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id = 45 OR c.atom_id2 = 45;
SELECT DISTINCT a.element FROM atom a WHERE a.atom_id NOT IN (SELECT DISTINCT c.atom_id FROM connected c);
SELECT a.atom_id, a.element FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE b.molecule_id = 'TR447' AND b.bond_type = '#';
SELECT a.element  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  JOIN bond b ON m.molecule_id = b.molecule_id  JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2  WHERE b.bond_id = 'TR144_8_19';
SELECT m.label, COUNT(b.bond_id) AS double_bond_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+' AND b.bond_type = ' = ' GROUP BY m.label ORDER BY double_bond_count DESC LIMIT 1;
SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1;
SELECT DISTINCT a2.atom_id, a2.element FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a1.element = 'pb';
SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';
SELECT      (COUNT(b.bond_id) * 100.0 /       (SELECT COUNT(*) FROM bond)) AS percentage FROM      bond b JOIN      connected c ON b.bond_id = c.bond_id JOIN      atom a1 ON c.atom_id = a1.atom_id JOIN      atom a2 ON c.atom_id2 = a2.atom_id GROUP BY      a1.element, a2.element ORDER BY      COUNT(b.bond_id) DESC LIMIT 1;
SELECT DIVIDE(SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END), COUNT(b.bond_id)) AS proportion FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-';
SELECT COUNT(*) AS total_atoms FROM atom WHERE element IN ('c', 'h');
SELECT c.atom_id2  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id  WHERE a.element = 's';
SELECT DISTINCT b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'sn';
SELECT COUNT(DISTINCT a.element) AS element_count FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '-';
SELECT COUNT(DISTINCT a.atom_id) AS total_atoms FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '#' AND (a.element = 'p' OR a.element = 'br');
SELECT b.bond_id  FROM bond b  JOIN molecule m ON b.molecule_id = m.molecule_id  WHERE m.label = '+';
SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-' AND m.label = '-';
SELECT      (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(a.atom_id)) AS percent FROM      atom a JOIN      bond b ON a.molecule_id = b.molecule_id WHERE      b.bond_type = '-';
SELECT label  FROM molecule  WHERE molecule_id IN ('TR000', 'TR001', 'TR002');
SELECT molecule_id FROM molecule WHERE label = '-';
SELECT COUNT(*) AS total_carcinogenic_molecules FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+';
SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR050';
SELECT a.element  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2  JOIN bond b ON c.bond_id = b.bond_id  WHERE b.bond_id = 'TR001_10_11';
SELECT COUNT(DISTINCT c.bond_id) AS bond_count FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE a.element = 'i';
SELECT      CASE          WHEN COUNT(CASE WHEN m.label = '+' THEN 1 END) > COUNT(CASE WHEN m.label = '-' THEN 1 END) THEN 'Mostly Carcinogenic'         ELSE 'Mostly Non Carcinogenic'     END AS carcinogenic_status FROM      atom a JOIN      molecule m ON a.molecule_id = m.molecule_id WHERE      a.element = 'ca';
SELECT COUNT(DISTINCT a.element) = 2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE b.bond_id = 'TR001_1_8' AND a.element IN ('cl', 'c';
SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'c'    AND b.bond_type = '#'    AND m.label = '-' LIMIT 2;
SELECT      (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT m.molecule_id)) AS percentage FROM      molecule m JOIN      atom a ON m.molecule_id = a.molecule_id WHERE      m.label = '+';
SELECT DISTINCT a.element  FROM atom a  WHERE a.molecule_id = 'TR001';
SELECT molecule_id FROM bond WHERE bond_type = ' = ';
SELECT c.atom_id, c.atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '#';
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR005_16_26';
SELECT COUNT(DISTINCT m.molecule_id) AS non_carcinogenic_single_bonds FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-' AND m.label = '-';
SELECT m.label  FROM bond b  JOIN molecule m ON b.molecule_id = m.molecule_id  WHERE b.bond_id = 'TR001_10_11';
SELECT b.bond_id,         CASE             WHEN m.label = '+' THEN 'Carcinogenic'             ELSE 'Non-Carcinogenic'         END AS carcinogenic_status FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '#';
SELECT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND SUBSTR(a.atom_id, 7, 1) = '4';
SELECT      label,      DIVIDE(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END), COUNT(*)) AS hydrogen_ratio FROM      atom  JOIN      molecule ON atom.molecule_id = molecule.molecule_id WHERE      atom.molecule_id = 'TR006';
SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca';
SELECT b.bond_type FROM bond b JOIN atom a ON b.molecule_id = a.molecule_id WHERE a.element = 'te';
SELECT a1.element AS element1, a2.element AS element2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id = 'TR001_10_11';
SELECT      (COUNT(DISTINCT m.molecule_id) * 100.0 / (SELECT COUNT(DISTINCT molecule_id) FROM molecule)) AS percent_triple_bond FROM      bond b JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      b.bond_type = '#';
SELECT      (SUM(bond_type = ' = ') * 100.0 / COUNT(bond_id)) AS percent FROM      bond WHERE      molecule_id = 'TR047';
SELECT m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'TR001_1' AND m.label = '+';
SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule WHERE label = '+' AND molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR151');
SELECT DISTINCT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR151' AND a.element IN ('cl', 'br', 'f', 'i', 'sn', 'pb', 'te');
SELECT COUNT(*)  FROM molecule  WHERE label = '+';
SELECT a.* FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND SUBSTR(m.molecule_id, 3, 3) > '010' AND SUBSTR(m.molecule_id, 3, 3) < '050';
SELECT COUNT(a.atom_id)  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE m.label = '+';
SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = ' = ' AND m.label = '+';
SELECT COUNT(a.atom_id)  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE a.element = 'h' AND m.label = '+';
SELECT DISTINCT a.molecule_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'TR00_1_2' AND a.element = 'TR00_1';
SELECT a.atom_id  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE a.element = 'c' AND m.label = '-';
SELECT      (SUM(CASE WHEN label = '+' AND element = 'h' THEN 1 ELSE 0 END) * 100.0) / COUNT(molecule_id) AS percentage FROM      molecule  JOIN      atom ON molecule.molecule_id = atom.molecule_id;
SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule WHERE label = '+' AND molecule_id = 'TR124';
SELECT a.atom_id, a.element  FROM atom a  WHERE a.molecule_id = (SELECT m.molecule_id FROM molecule m WHERE m.label = 'TR186');
SELECT b.bond_type  FROM bond b  JOIN molecule m ON b.molecule_id = m.molecule_id  WHERE m.label = 'TR007_4_19';
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'TR001_2_4';
SELECT      COUNT(b.bond_id) AS double_bond_count,     m.label FROM      bond b JOIN      molecule m ON b.molecule_id = m.molecule_id WHERE      m.label = '+' OR m.label = '-'     AND m.molecule_id = 'TR006'     AND b.bond_type = ' = ' GROUP BY      m.label;
SELECT m.label, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+';
SELECT b.bond_id, a1.element AS atom1, a2.element AS atom2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '-';
SELECT DISTINCT m.label, a.element FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE b.bond_type = '#';
SELECT a.element  FROM atom a  JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2  JOIN bond b ON c.bond_id = b.bond_id  WHERE b.bond_type = 'TR000_2_3';
SELECT COUNT(DISTINCT c.bond_id) AS bond_count FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE a.element = 'cl';
SELECT a.atom_id, COUNT(DISTINCT b.bond_type) AS bond_type_count FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = 'TR346' GROUP BY a.atom_id;
SELECT COUNT(DISTINCT m.molecule_id) AS carcinogenic_molecules_count FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '=' AND m.label = '+';
SELECT COUNT(DISTINCT m.molecule_id)  FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id AND a.element = 's' LEFT JOIN bond b ON m.molecule_id = b.molecule_id AND b.bond_type = ' = ' WHERE a.atom_id IS NULL AND b.bond_id IS NULL;
SELECT m.label  FROM bond b  JOIN molecule m ON b.molecule_id = m.molecule_id  WHERE b.bond_id = 'TR001_2_4' AND m.label = '+';
SELECT COUNT(*)  FROM atom  WHERE molecule_id = 'TR005';
SELECT COUNT(*) AS single_bond_count  FROM bond  WHERE bond_type = '-';
SELECT DISTINCT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' AND m.label = '+';
SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'c' AND m.label = '-';
SELECT      DIVIDE(SUM(CASE WHEN m.label = '+' AND a.element = 'Cl' THEN 1 ELSE 0 END), COUNT(m.molecule_id)) AS percentage FROM      molecule m JOIN      atom a ON m.molecule_id = a.molecule_id WHERE      m.label = '+';
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';
SELECT COUNT(DISTINCT a.element) AS element_count FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE b.bond_id = 'TR001_3_4';
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a1.element = 'TR000_1' AND a2.element = 'TR000_2';
SELECT m.label  FROM molecule m JOIN atom a1 ON m.molecule_id = a1.molecule_id JOIN connected c ON a1.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a1.atom_id = 'TR000_2' AND a2.atom_id = 'TR000_4';
SELECT element FROM atom WHERE atom_id = 'TR000_1';
SELECT CASE             WHEN label = '+' THEN 'Carcinogenic'             WHEN label = '-' THEN 'Non-carcinogenic'             ELSE 'Unknown'         END AS carcinogenic_status FROM molecule WHERE molecule_id = 'TR000';
SELECT      (SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END) * 100.0 / COUNT(b.bond_id)) AS percentage FROM      bond b JOIN      connected c ON b.bond_id = c.bond_id JOIN      atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id GROUP BY      a.molecule_id;
SELECT COUNT(DISTINCT m.molecule_id) AS carcinogenic_molecule_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'n' AND m.label = '+';
SELECT DISTINCT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 's' AND b.bond_type = ' = ';
SELECT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '-' GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5;
SELECT DISTINCT a.element FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '=' AND a.molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR024');
SELECT m.label, COUNT(a.atom_id) AS atom_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' GROUP BY m.label ORDER BY atom_count DESC LIMIT 1;
SELECT      (SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT m.molecule_id) AS carcinogenic_percentage FROM      molecule m JOIN      bond b ON m.molecule_id = b.molecule_id JOIN      connected c ON b.bond_id = c.bond_id JOIN      atom a ON c.atom_id = a.atom_id WHERE      a.element = 'h' AND b.bond_type = '#';
SELECT COUNT(*)  FROM molecule  WHERE label = '+';
SELECT COUNT(DISTINCT b.molecule_id) AS single_bond_molecule_count FROM bond b WHERE b.bond_type = '-' AND b.molecule_id BETWEEN 'TR004' AND 'TR010';
SELECT COUNT(*)  FROM atom  WHERE molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR008')  AND element = 'c';
SELECT a.element  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE a.atom_id = 'TR004_7' AND m.label = '-';
SELECT COUNT(DISTINCT m.molecule_id) AS total_molecules FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a1.element = 'o' AND a2.element = 'o' AND b.bond_type = ' = ';
SELECT COUNT(DISTINCT m.molecule_id) AS non_carcinogenic_triple_bond_molecules FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '#' AND m.label = '-';
SELECT a.element, b.bond_type FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE a.molecule_id = 'TR016';
SELECT a.atom_id  FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR012' AND a.element = 'c' AND b.bond_type = ' = ';
SELECT a.atom_id  FROM atom a  JOIN molecule m ON a.molecule_id = m.molecule_id  WHERE m.label = '+' AND a.element = 'o';
SELECT * FROM cards  WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT * FROM cards  WHERE borderColor = 'borderless'  AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL);
SELECT name  FROM cards  WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards);
SELECT name  FROM cards  WHERE edhrecRank < 100 AND frameVersion = 2015;
SELECT c.* FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator';
SELECT legalities.* FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.type = 'Artifact'   AND cards.side IS NULL   AND legalities.format = 'vintage';
SELECT c.id, c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE (c.power = '*' OR c.power IS NULL)  AND l.format = 'commander'  AND l.status = 'Legal';
SELECT      c.name AS card_name,     c.flavorText AS card_flavor_text,     r.text AS ruling_text,     CASE          WHEN c.hasContentWarning = 1 THEN 'Missing or degraded properties and values'         ELSE 'No missing or degraded properties and values'     END AS properties_status FROM      cards c JOIN      rulings r ON c.uuid = r.uuid WHERE      c.artist = 'Stephen Daniele';
SELECT r.* FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';
SELECT c.name, c.artist, c.isPromo FROM cards c JOIN rulings r ON c.uuid = r.uuid GROUP BY c.id ORDER BY COUNT(r.uuid) DESC LIMIT 1;
SELECT DISTINCT fd.language  FROM foreign_data fd  JOIN cards c ON fd.multiverseid = c.multiverseId  WHERE c.name = 'Annul' AND c.number = '29';
SELECT c.name  FROM cards c  JOIN foreign_data f ON c.uuid = f.uuid  WHERE f.language = 'Japanese';
SELECT (SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage FROM foreign_data;
SELECT s.name, s.totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian';
SELECT COUNT(DISTINCT type) AS card_types FROM cards WHERE artist = 'Aaron Boyd';
SELECT keywords FROM cards WHERE name = 'Angel of Mercy';
SELECT COUNT(*) FROM cards WHERE power = '*';
SELECT promoTypes FROM cards WHERE name = 'Duress';
SELECT borderColor FROM cards WHERE name = "Ancestor's Chosen";
SELECT originalType  FROM cards  WHERE name = "Ancestor's Chosen";
SELECT DISTINCT st.language FROM cards c JOIN sets s ON c.setCode = s.code JOIN set_translations st ON s.code = st.setCode WHERE c.name = 'Angel of Mercy';
SELECT COUNT(*)  FROM cards  JOIN legalities ON cards.uuid = legalities.uuid  WHERE legalities.status = 'restricted' AND cards.isTextless = 0;
SELECT r.text  FROM rulings r  JOIN cards c ON r.uuid = c.uuid  WHERE c.name = 'Condemn';
SELECT COUNT(DISTINCT c.id)  FROM cards c  JOIN legalities l ON c.uuid = l.uuid  WHERE l.status = 'restricted' AND c.isStarter = 1;
SELECT legalities.status  FROM cards  JOIN legalities ON cards.uuid = legalities.uuid  WHERE cards.name = 'Cloudchaser Eagle';
SELECT type FROM cards WHERE name = 'Benalish Knight';
SELECT legalities.format, legalities.status  FROM cards  JOIN legalities ON cards.uuid = legalities.uuid  WHERE cards.name = 'Benalish Knight';
SELECT DISTINCT c.artist  FROM cards c  JOIN foreign_data f ON c.id = f.multiverseid  WHERE f.language = 'Phyrexian';
SELECT (COUNT(CASE WHEN borderColor = 'borderless' THEN 1 END) * 100.0 / COUNT(id)) AS percentage_borderless FROM cards;
SELECT COUNT(*)  FROM cards  JOIN foreign_data ON cards.uuid = foreign_data.uuid  WHERE foreign_data.language = 'German' AND cards.isReprint = 1;
SELECT COUNT(*)  FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.borderColor = 'borderless' AND f.language = 'Russian';
SELECT      (COUNT(CASE WHEN f.language = 'French' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_french_story_spotlight FROM      cards c JOIN      foreign_data f ON c.id = f.multiverseid WHERE      c.isStorySpotlight = 1;
SELECT COUNT(*) FROM cards WHERE toughness = 99;
SELECT name FROM cards WHERE artist = 'Aaron Boyd';
SELECT COUNT(*)  FROM cards  WHERE borderColor = 'black' AND availability = 'mtgo';
SELECT id FROM cards WHERE convertedManaCost = 0;
SELECT layout  FROM cards  WHERE keywords LIKE '%flying%';
SELECT COUNT(*)  FROM cards  WHERE originalType = 'Summon - Angel'  AND subtypes NOT LIKE '%Angel%';
SELECT id  FROM cards  WHERE hasFoil = 1 AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
SELECT id FROM cards WHERE duelDeck = 'a';
SELECT edhrecRank FROM cards WHERE frameVersion = '2015';
SELECT DISTINCT f.name AS artist_name FROM cards c JOIN foreign_data f ON c.id = f.multiverseid WHERE f.language = 'Chinese Simplified';
SELECT DISTINCT c.* FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.availability = 'paper' AND f.language = 'Japanese';
SELECT COUNT(*)  FROM cards  JOIN legalities ON cards.uuid = legalities.uuid  WHERE legalities.status = 'Banned' AND cards.borderColor = 'white';
SELECT l.uuid, f.language FROM legalities l JOIN foreign_data f ON l.uuid = f.uuid WHERE l.format = 'legacy';
SELECT r.text  FROM rulings r  JOIN cards c ON r.uuid = c.uuid  WHERE c.name = 'Beacon of Immortality';
SELECT COUNT(c.id) AS card_count, l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = 'future' AND l.status = 'legal' GROUP BY l.status;
SELECT name, colors  FROM cards  WHERE setCode = 'OGW';
SELECT c.name, st.language FROM cards c JOIN sets s ON c.setCode = s.code JOIN set_translations st ON s.code = st.setCode WHERE s.code = '10E' AND c.convertedManaCost = 5;
SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType = 'Creature - Elf';
SELECT c.colors, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.id BETWEEN 1 AND 20;
SELECT c.* FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.originalType = 'Artifact' AND c.colors = 'B';
SELECT c.name FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'uncommon' ORDER BY r.date ASC LIMIT 3;
SELECT COUNT(*)  FROM cards  WHERE artist = 'John Avon' AND cardKingdomFoilId IS NULL;
SELECT COUNT(*)  FROM cards  WHERE borderColor = 'white'  AND cardKingdomFoilId = cardKingdomId  AND cardKingdomId IS NOT NULL;
SELECT COUNT(*)  FROM cards  WHERE artist = 'UDON'  AND availability = 'mtgo'  AND hand = -1;
SELECT COUNT(*)  FROM cards  WHERE frameVersion = '1993'  AND availability = 'paper'  AND hasContentWarning = 1;
SELECT manaCost  FROM cards  WHERE layout = 'normal'  AND frameVersion = '2003'  AND borderColor = 'black'  AND availability IN ('paper', 'mtgo');
SELECT SUM(convertedManaCost) AS total_unconverted_mana FROM cards WHERE artist = 'Rob Alexander';
SELECT DISTINCT subtypes AS card_type FROM cards WHERE availability = 'arena' UNION SELECT DISTINCT supertypes AS card_type FROM cards WHERE availability = 'arena';
SELECT DISTINCT st.setCode FROM set_translations st WHERE st.language = 'Spanish';
SELECT      (COUNT(CASE WHEN hand = '+3' THEN 1 END) * 100.0 / COUNT(id)) AS percentage FROM      cards WHERE      frameEffects = 'legendary';
SELECT      (SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) * 100.0) /      NULLIF(COUNT(*), 0) AS percentage,     id FROM      cards WHERE      isStorySpotlight = 1 GROUP BY      id;
SELECT      c.name,      (COUNT(f.id) * 100.0 / (SELECT COUNT(*) FROM cards)) AS percentage FROM      cards c LEFT JOIN      foreign_data f ON c.uuid = f.uuid AND f.language = 'Spanish' GROUP BY      c.name;
SELECT DISTINCT st.language  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE s.baseSetSize = 309;
SELECT COUNT(*)  FROM set_translations st  JOIN sets s ON st.setCode = s.code  WHERE st.language = 'Portuguese (Brasil)' AND s.block = 'Commander';
SELECT c.id  FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types LIKE '%Creature%' AND l.status = 'legal';
SELECT DISTINCT      COALESCE(c.subtypes, '') AS type  FROM      cards c  JOIN      foreign_data f ON c.name = f.name  WHERE      f.language = 'German'      AND (c.subtypes IS NOT NULL OR c.supertypes IS NOT NULL);
SELECT COUNT(*)  FROM cards  WHERE power IS NULL AND text LIKE '%triggered ability%';
SELECT COUNT(DISTINCT c.id)  FROM cards c  JOIN legalities l ON c.uuid = l.uuid  JOIN rulings r ON c.uuid = r.uuid  WHERE l.format = 'pre-modern'    AND r.text = 'This is a triggered mana ability'    AND c.side IS NULL;
SELECT c.id  FROM cards c  JOIN legalities l ON c.uuid = l.uuid  WHERE c.artist = 'Erica Yang'  AND l.format = 'pauper'  AND c.availability = 'paper';
SELECT artist  FROM cards  WHERE id = (SELECT uuid FROM foreign_data WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation');
SELECT fd.name  FROM cards c  JOIN foreign_data fd ON c.uuid = fd.uuid  WHERE c.type = 'Creature'    AND c.layout = 'normal'    AND c.borderColor = 'black'    AND c.artist = 'Matthew D. Wilson'    AND fd.language = 'French';
SELECT COUNT(*)  FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'rare' AND r.date = '2009-01-10';
SELECT st.language  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE s.baseSetSize = 180 AND s.block = 'Ravnica';
SELECT      (COUNT(CASE WHEN c.hasContentWarning = 0 THEN 1 END) * 100.0 / COUNT(c.id)) AS percentage FROM      cards c JOIN      legalities l ON c.uuid = l.uuid WHERE      l.format = 'commander' AND l.status = 'legal';
SELECT      (COUNT(CASE WHEN f.language = 'French' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      cards c JOIN      foreign_data f ON c.uuid = f.uuid WHERE      c.power IS NULL OR c.power = '*';
SELECT      (COUNT(CASE WHEN s.type = 'expansion' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      sets s JOIN      set_translations st ON s.code = st.setCode WHERE      st.language = 'Japanese';
SELECT availability FROM cards WHERE artist = 'Daren Bader';
SELECT COUNT(*)  FROM cards  WHERE borderColor = 'borderless' AND edhrecRank > 12000 AND colors IS NOT NULL;
SELECT COUNT(*)  FROM cards  WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;
SELECT name, power FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3;
SELECT foreign_data.language  FROM foreign_data  WHERE foreign_data.multiverseid = 149934;
SELECT DISTINCT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3;
SELECT      (COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) * 100.0) / COUNT(*) AS proportion FROM      cards;
SELECT number  FROM cards  WHERE otherFaceIds IS NULL  AND subtypes LIKE '%Angel%'  AND subtypes LIKE '%Wizard%';
SELECT name, code  FROM sets  WHERE mtgoCode IS NULL OR mtgoCode = ''  ORDER BY name  LIMIT 3;
SELECT DISTINCT st.language  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE s.mcmName = 'Archenemy' AND s.code = 'ARC';
SELECT s.name, st.translation  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE s.id = 5;
SELECT st.language, s.type FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.id = 206;
SELECT s.id, s.name FROM sets s JOIN cards c ON s.code = c.setCode JOIN foreign_data f ON c.uuid = f.uuid WHERE f.language = 'Italian' AND s.block = 'Shadowmoor' GROUP BY s.id, s.name ORDER BY s.name LIMIT 2;
SELECT s.id  FROM sets s  JOIN foreign_data f ON s.code = f.setCode  WHERE s.isForeignOnly = 1    AND s.isFoilOnly = 1    AND f.language = 'Japanese';
SELECT name, MAX(baseSetSize) AS max_cards FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Russian' GROUP BY name ORDER BY max_cards DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN f.language = 'Chinese Simplified' AND c.isOnlineOnly = 1 THEN 1 END) * 100.0) /      COUNT(*) AS percentage FROM      cards c JOIN      foreign_data f ON c.uuid = f.uuid;
SELECT COUNT(*)  FROM sets  WHERE language = 'Japanese'  AND (mtgoCode IS NULL OR mtgoCode = '');
SELECT id FROM cards WHERE borderColor = 'black';
SELECT id FROM cards WHERE frameEffects = 'extendedart';
SELECT * FROM cards WHERE borderColor = 'black' AND isFullArt = 1;
SELECT DISTINCT language FROM set_translations WHERE setCode = '174';
SELECT name FROM sets WHERE code = 'ALL';
SELECT DISTINCT foreign_data.language  FROM foreign_data  JOIN cards ON foreign_data.multiverseid = cards.multiverseId  WHERE cards.name = 'A Pedra Fellwar';
SELECT code FROM sets WHERE releaseDate = '2007-07-13';
SELECT baseSetSize, code  FROM sets  WHERE block IN ('Masques', 'Mirage');
SELECT code FROM sets WHERE type = 'expansion';
SELECT fd.name, c.type FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.watermark = 'boros';
SELECT fd.language, fd.flavorText, c.type FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.watermark = 'colorpie';
SELECT (COUNT(CASE WHEN convertedManaCost = 10 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Abyssal Horror');
SELECT code FROM sets WHERE type = 'expansion' AND name LIKE '%Commander%';
SELECT fd.name, c.type  FROM cards c  JOIN foreign_data fd ON c.uuid = fd.uuid  WHERE c.watermark = 'abzan';
SELECT fd.language, c.type FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.watermark = 'azorius';
SELECT COUNT(*)  FROM cards  WHERE artist = 'Aaron Miller'  AND cardKingdomFoilId = cardKingdomId  AND cardKingdomId IS NOT NULL;
SELECT COUNT(*)  FROM cards  WHERE availability LIKE '%paper%' AND hand LIKE '+%';
SELECT name FROM cards WHERE isTextless = 0;
SELECT convertedManaCost FROM cards WHERE name = 'Ancestor\'s Chosen';
SELECT COUNT(*)  FROM cards  WHERE borderColor = 'white' AND (power = '*' OR power IS NULL);
SELECT name  FROM cards  WHERE isPromo = 1 AND side IS NOT NULL;
SELECT subtypes, supertypes  FROM cards  WHERE name = 'Molimo, Maro-Sorcerer';
SELECT purchaseUrls  FROM cards  WHERE promoTypes = 'bundle';
SELECT COUNT(DISTINCT artist)  FROM cards  WHERE borderColor = 'black'  AND availability LIKE '%arena,mtgo%';
SELECT name, convertedManaCost  FROM cards  WHERE name IN ('Serra Angel', 'Shrine Keeper');
SELECT artist  FROM cards  WHERE flavorName = 'Battra, Dark Destroyer';
SELECT name  FROM cards  WHERE frameVersion = '2003'  ORDER BY convertedManaCost DESC  LIMIT 3;
SELECT st.translation  FROM cards c  JOIN sets s ON c.setCode = s.code  JOIN set_translations st ON s.code = st.setCode  WHERE c.name = 'Ancestor\'s Chosen' AND st.language = 'Italian';
SELECT COUNT(st.id)  FROM set_translations st  JOIN cards c ON st.setCode = c.setCode  WHERE c.name = 'Angel of Mercy';
SELECT c.name  FROM cards c  JOIN sets s ON c.setCode = s.code  JOIN set_translations st ON s.code = st.setCode  WHERE st.translation = 'Hauptset Zehnte Edition';
SELECT COUNT(*) > 0 AS has_korean_version FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE c.name = 'Ancestor\'s Chosen' AND fd.language = 'Korean';
SELECT COUNT(*)  FROM cards  JOIN sets ON cards.setCode = sets.code  JOIN set_translations ON sets.code = set_translations.setCode  WHERE set_translations.translation = 'Hauptset Zehnte Edition'  AND cards.artist = 'Adam Rex';
SELECT baseSetSize  FROM sets  WHERE id = (SELECT setCode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition');
SELECT translation  FROM set_translations  WHERE setCode = (SELECT code FROM sets WHERE name = 'Eighth Edition')  AND language = 'Simplified Chinese';
SELECT s.name  FROM cards c  JOIN sets s ON c.setCode = s.code  WHERE c.name = 'Angel of Mercy' AND s.mtgoCode IS NOT NULL;
SELECT s.releaseDate  FROM cards c  JOIN sets s ON c.setCode = s.code  WHERE c.name = 'Ancestor''s Chosen';
SELECT type FROM sets  WHERE code = (SELECT setCode FROM set_translations                WHERE translation = 'Hauptset Zehnte Edition');
SELECT COUNT(*)  FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.block = 'Ice Age' AND st.language = 'Italian';
SELECT s.isForeignOnly  FROM cards c  JOIN sets s ON c.setCode = s.code  WHERE c.name = 'Adarkar Valkyrie';
SELECT COUNT(DISTINCT s.id)  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE st.language = 'Italian' AND st.translation IS NOT NULL  AND s.baseSetSize < 10;
SELECT COUNT(*)  FROM cards  WHERE setCode = 'Coldsnap' AND borderColor = 'black';
SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' ORDER BY c.convertedManaCost DESC LIMIT 1;
SELECT DISTINCT artist  FROM cards  WHERE setCode = 'Coldsnap' AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');
SELECT * FROM cards WHERE setCode = 'Coldsnap' AND number = '4';
SELECT COUNT(*) FROM cards T1 JOIN sets T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL);
SELECT flavorText FROM foreign_data WHERE language = 'Italian' AND name = 'Ancestor''s Chosen';
SELECT DISTINCT foreign_data.language FROM foreign_data JOIN cards ON foreign_data.multiverseid = cards.multiverseId WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.flavorText IS NOT NULL;
SELECT type FROM foreign_data WHERE name = 'Ancestor''s Chosen' AND language = 'German';
SELECT r.text  FROM rulings r JOIN cards c ON r.uuid = c.uuid JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND r.language = 'Italian';
SELECT fd.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND fd.language = 'Italian' AND c.convertedManaCost = (     SELECT MAX(convertedManaCost)     FROM cards     WHERE setCode = 'COLD' );
SELECT date FROM rulings WHERE uuid IN (SELECT uuid FROM cards WHERE name = 'Reminisce');
SELECT (SUM(CASE WHEN convertedManaCost = 7 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap');
SELECT      (SUM(CASE WHEN cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage_incredibly_powerful FROM      cards WHERE      setCode = 'Coldsnap';
SELECT code FROM sets WHERE releaseDate = '2017-07-14';
SELECT keyruneCode FROM sets WHERE code = 'PKHC';
SELECT mcmId FROM sets WHERE code = 'SS2';
SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09';
SELECT type FROM sets WHERE name LIKE '%From the Vault: Lore%';
SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';
SELECT c.name, c.id, r.text AS ruling_text,         CASE WHEN c.hasContentWarning = 1 THEN 'Missing or degraded properties and values'              ELSE 'No missing or degraded properties and values' END AS properties_status FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Jim Pavelec';
SELECT s.releaseDate  FROM cards c  JOIN sets s ON c.setCode = s.code  WHERE c.name = 'Evacuation';
SELECT baseSetSize  FROM sets  WHERE id = (SELECT setCode FROM set_translations WHERE translation = 'Rinascita di Alara');
SELECT type FROM sets  WHERE code IN (SELECT setCode FROM set_translations WHERE translation = 'Huitième édition');
SELECT st.translation  FROM cards c  JOIN sets s ON c.setCode = s.code  JOIN set_translations st ON s.code = st.setCode  WHERE c.name = 'Tendo Ice Bridge' AND st.language = 'French';
SELECT COUNT(*)  FROM set_translations  WHERE setCode = (SELECT code FROM sets WHERE name = 'Salvat 2011')  AND translation IS NOT NULL;
SELECT st.translation  FROM sets s  JOIN cards c ON s.code = c.setCode  JOIN set_translations st ON s.code = st.setCode  WHERE c.name = 'Fellwar Stone' AND st.language = 'Japanese';
SELECT name  FROM cards  WHERE setCode = 'Journey into Nyx Hero''s Path'  ORDER BY convertedManaCost DESC  LIMIT 1;
SELECT s.releaseDate  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE st.translation = 'Ola de frío';
SELECT sets.type  FROM sets  JOIN cards ON sets.code = cards.setCode  WHERE cards.name = 'Samite Pilgrim';
SELECT COUNT(*)  FROM cards  WHERE convertedManaCost = 3  AND setCode = (SELECT code FROM sets WHERE name = 'World Championship Decks 2004');
SELECT translation  FROM set_translations  WHERE language = 'Chinese Simplified'  AND setCode = (SELECT code FROM sets WHERE name = 'Mirrodin');
SELECT      (SUM(CASE WHEN c.isNonFoilOnly = 1 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage_non_foil FROM      cards c JOIN      set_translations st ON c.setCode = st.setCode WHERE      st.language = 'Japanese';
SELECT      (SUM(CASE WHEN c.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage_online_only FROM      cards c JOIN      foreign_data f ON c.name = f.name WHERE      f.language = 'Portuguese (Brazil)';
SELECT DISTINCT availability  FROM cards  WHERE artist = 'Aleksi Briclot' AND isTextless = 1;
SELECT id  FROM sets  WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets);
SELECT artist  FROM cards  WHERE otherFaceIds IS NULL  ORDER BY convertedManaCost DESC  LIMIT 1;
SELECT frameEffects, COUNT(*) as count FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY count DESC LIMIT 1;
SELECT COUNT(*)  FROM cards  WHERE (power IS NULL OR power = '*')  AND hasFoil = 0  AND duelDeck = 'a';
SELECT id  FROM sets  WHERE type = 'commander'  ORDER BY totalSetSize DESC  LIMIT 1;
SELECT c.name, MAX(c.convertedManaCost) AS highest_unconverted_mana_cost FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'duel' GROUP BY c.name ORDER BY highest_unconverted_mana_cost DESC LIMIT 10;
SELECT MIN(c.originalReleaseDate) AS oldest_mythic_release_date, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'legal' GROUP BY l.format;
SELECT COUNT(*)  FROM cards c JOIN foreign_data f ON c.id = f.multiverseid WHERE c.artist = 'Volkan Baga' AND f.language = 'French';
SELECT COUNT(*)  FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'rare'    AND 'Enchantment' IN (SELECT unnest(c.types))    AND c.name = 'Abundance'    AND l.status = 'Legal' GROUP BY c.uuid HAVING COUNT(DISTINCT l.format) = (SELECT COUNT(DISTINCT format) FROM legalities WHERE uuid = c.uuid);
SELECT l.format, c.name FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE l.status = 'banned' GROUP BY l.format, c.name HAVING COUNT(*) = (     SELECT MAX(banned_count)     FROM (         SELECT COUNT(*) AS banned_count         FROM legalities         WHERE status = 'banned'         GROUP BY format     ) AS banned_counts );
SELECT DISTINCT st.language  FROM sets s  JOIN set_translations st ON s.code = st.setCode  WHERE s.name = 'Battlebond';
SELECT l.format, c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = (     SELECT artist     FROM cards     GROUP BY artist     ORDER BY COUNT(*) ASC     LIMIT 1 );
SELECT l.status  FROM cards c  JOIN legalities l ON c.uuid = l.uuid  WHERE c.frameVersion = '1997'    AND c.artist = 'D. Alexander Gregory'    AND c.hasContentWarning = 1    AND l.format = 'legacy';
SELECT c.name, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.edhrecRank = 1 AND l.status = 'banned';
SELECT AVG(set_count) AS annual_average_sets, common_language FROM (     SELECT YEAR(releaseDate) AS release_year, COUNT(*) AS set_count     FROM sets     WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31'     GROUP BY release_year ) AS yearly_sets CROSS JOIN (     SELECT language, COUNT(*) AS lang_count     FROM foreign_data     GROUP BY language     ORDER BY lang_count DESC     LIMIT 1 ) AS common_lang;
SELECT DISTINCT artist  FROM cards  WHERE borderColor = 'black' AND availability = 'arena';
SELECT c.uuid  FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'oldschool' AND (l.status = 'banned' OR l.status = 'restricted');
SELECT COUNT(*)  FROM cards  WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';
SELECT r.text  FROM rulings r  JOIN cards c ON r.uuid = c.uuid  WHERE c.artist = 'Kev Walker'  ORDER BY r.date DESC;
SELECT c.name, l.format FROM cards c JOIN sets s ON c.setCode = s.code JOIN legalities l ON c.uuid = l.uuid WHERE s.name = 'Hour of Devastation' AND l.status = 'legal';
SELECT s.name FROM sets s LEFT JOIN set_translations st ON s.code = st.setCode GROUP BY s.id HAVING SUM(st.language = 'Korean') > 0 AND SUM(st.language LIKE '%Japanese%') = 0;
SELECT DISTINCT c.frameVersion, c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Allen Williams' OR l.status = 'banned';
SELECT DisplayName, Reputation  FROM users  WHERE DisplayName IN ('Harlan', 'Jarrod Dixon')  ORDER BY Reputation DESC  LIMIT 1;
SELECT DisplayName  FROM users  WHERE YEAR(CreationDate) = 2014;
SELECT COUNT(*)  FROM users  WHERE LastAccessDate > '2014-09-01 00:00:00';
SELECT DisplayName  FROM users  WHERE Views = (SELECT MAX(Views) FROM users);
SELECT COUNT(*)  FROM users  WHERE UpVotes > 100 AND DownVotes > 1;
SELECT COUNT(*)  FROM users  WHERE Views > 10 AND CreationDate > '2013-01-01';
SELECT COUNT(*)  FROM posts  WHERE OwnerDisplayName = 'csgillespie';
SELECT Title  FROM posts  WHERE OwnerDisplayName = 'csgillespie';
SELECT DisplayName  FROM users  WHERE Id = (SELECT OwnerUserId               FROM posts               WHERE Title = 'Eliciting priors from experts');
SELECT Title  FROM posts  WHERE OwnerDisplayName = 'csgillespie'  ORDER BY ViewCount DESC  LIMIT 1;
SELECT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);
SELECT SUM(CommentCount) AS TotalComments FROM posts WHERE OwnerDisplayName = 'csgillespie';
SELECT AnswerCount  FROM posts  WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')  ORDER BY AnswerCount DESC  LIMIT 1;
SELECT u.DisplayName  FROM posts p  JOIN users u ON p.LastEditorUserId = u.Id  WHERE p.Title = 'Examples for teaching: Correlation does not mean causation';
SELECT COUNT(*) AS RootPostCount FROM posts WHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL;
SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ClosedDate IS NOT NULL;
SELECT COUNT(*)  FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age > 65 AND p.Score >= 20;
SELECT u.Location  FROM posts p  JOIN users u ON p.OwnerUserId = u.Id  WHERE p.Title = 'Eliciting priors from experts';
SELECT p.Body FROM posts p JOIN tags t ON t.ExcerptPostId = p.Id WHERE t.TagName = 'bayesian';
SELECT p.Body FROM posts p JOIN tags t ON t.ExcerptPostId = p.Id WHERE t.Count = (SELECT MAX(Count) FROM tags);
SELECT COUNT(*) AS BadgeCount FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';
SELECT b.Name  FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';
SELECT COUNT(*)  FROM badges  WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')  AND YEAR(Date) = 2011;
SELECT DisplayName  FROM users  WHERE Id = (     SELECT UserId      FROM badges      GROUP BY UserId      ORDER BY COUNT(Id) DESC      LIMIT 1 );
SELECT AVG(Score) AS AverageScore FROM posts WHERE OwnerDisplayName = 'csgillespie';
SELECT AVG(badge_count) AS average_badges FROM (     SELECT u.Id, COUNT(b.Id) AS badge_count     FROM users u     LEFT JOIN badges b ON u.Id = b.UserId     WHERE u.Views > 200     GROUP BY u.Id ) AS user_badge_counts;
SELECT      (COUNT(CASE WHEN u.Age > 65 THEN p.Id END) * 100.0 / COUNT(p.Id)) AS ElderUserPercentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      p.Score > 20;
SELECT COUNT(*)  FROM votes  WHERE UserId = 58 AND DATE(CreationDate) = '2010-07-19';
SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1;
SELECT COUNT(*) AS RevivalBadgeCount  FROM badges  WHERE Name = 'Revival';
SELECT p.Title FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score = (SELECT MAX(Score) FROM comments);
SELECT COUNT(*) AS CommentCount FROM comments WHERE PostId = (SELECT Id FROM posts WHERE ViewCount = 1910);
SELECT FavoriteCount  FROM posts  WHERE Id = (SELECT PostId              FROM comments              WHERE UserId = '3025'              AND CreationDate = '2014-04-23 20:29:39.0');
SELECT Text  FROM comments  WHERE PostId = (SELECT Id FROM posts WHERE ParentId = 107829)  LIMIT 1;
SELECT CASE             WHEN p.ClosedDate IS NULL THEN 'Yes'             ELSE 'No'         END AS IsWellFinished FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.UserId = '23853'    AND c.CreationDate = '2013-07-12 09:08:18.0';
SELECT u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Id = 65041;
SELECT COUNT(*) AS PostCount FROM posts WHERE OwnerDisplayName = 'Tiago Pasqualini';
SELECT u.DisplayName  FROM votes v  JOIN users u ON v.UserId = u.Id  WHERE v.Id = 6347;
SELECT COUNT(*) AS VoteCount FROM votes WHERE PostId IN (     SELECT Id     FROM posts     WHERE Title LIKE '%data visualization%' );
SELECT b.Name  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';
SELECT      (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) /      NULLIF((SELECT COUNT(*) FROM votes WHERE UserId = 24), 0) AS PostVoteRatio
SELECT ViewCount  FROM posts  WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';
SELECT Text FROM comments WHERE Score = 17;
SELECT DisplayName  FROM users  WHERE WebsiteUrl = 'http://stackoverflow.com';
SELECT b.Name  FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'SilentGhost';
SELECT UserDisplayName  FROM comments  WHERE Text = 'thank you user93!';
SELECT Text  FROM comments  WHERE UserDisplayName = 'A Lion.';
SELECT u.DisplayName, u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Understanding what Dassault iSight is doing?';
SELECT c.Text  FROM comments c  JOIN posts p ON c.PostId = p.Id  WHERE p.Title = 'How does gentle boosting differ from AdaBoost?';
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Necromancer' LIMIT 10;
SELECT LastEditorDisplayName  FROM posts  WHERE Title = 'Open source tools for visualizing multi-dimensional data';
SELECT Title  FROM posts  WHERE LastEditorDisplayName = 'Vebjorn Ljosa';
SELECT SUM(p.Score) AS TotalScore, u.WebsiteUrl FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Yevgeny';
SELECT c.* FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND p.LastEditorUserId IS NOT NULL;
SELECT SUM(v.BountyAmount) AS TotalBountyAmount FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.Title LIKE '%data%';
SELECT u.DisplayName FROM votes v JOIN posts p ON v.PostId = p.Id JOIN users u ON v.UserId = u.Id WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%';
SELECT p.Title, c.Text, c.Score, AVG(p.ViewCount) AS AverageViewCount FROM posts p JOIN tags t ON p.Tags LIKE CONCAT('%', t.TagName, '%') LEFT JOIN comments c ON p.Id = c.PostId WHERE t.TagName = 'humor' GROUP BY p.Id, c.Id;
SELECT COUNT(*) AS TotalComments FROM comments WHERE UserId = 13;
SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1;
SELECT Id FROM users ORDER BY Views ASC LIMIT 1;
SELECT COUNT(DISTINCT UserId) AS SupporterBadgeCount FROM badges WHERE Name = 'Supporter' AND YEAR(Date) = 2011;
SELECT COUNT(DISTINCT UserId) AS UserCount FROM badges GROUP BY UserId HAVING COUNT(Name) > 5;
SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u JOIN badges b1 ON u.Id = b1.UserId AND b1.Name = 'Supporter' JOIN badges b2 ON u.Id = b2.UserId AND b2.Name = 'Teacher' WHERE u.Location = 'New York';
SELECT u.DisplayName, u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Id = 1;
SELECT u.Id, u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN postHistory ph ON p.Id = ph.PostId GROUP BY u.Id, u.DisplayName, p.Id HAVING COUNT(ph.Id) = 1 AND p.ViewCount >= 1000;
SELECT u.DisplayName, COUNT(c.Id) AS CommentCount, b.Name AS BadgeName FROM users u JOIN comments c ON u.Id = c.UserId LEFT JOIN badges b ON u.Id = b.UserId GROUP BY u.Id, b.Name HAVING COUNT(c.Id) = (     SELECT MAX(CommentCount)     FROM (         SELECT COUNT(Id) AS CommentCount         FROM comments         GROUP BY UserId     ) AS subquery ) ORDER BY u.DisplayName;
SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'India' AND b.Name = 'Teacher';
SELECT      (COUNT(CASE WHEN YEAR(Date) = 2010 THEN 1 END) * 100.0 / COUNT(Name)) -      (COUNT(CASE WHEN YEAR(Date) = 2011 THEN 1 END) * 100.0 / COUNT(Name)) AS PercentageDifference FROM      badges WHERE      Name = 'Students';
SELECT PostHistoryTypeId FROM postHistory WHERE PostId = 3720;  SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720;
SELECT p.Id, p.Title, p.ViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.RelatedPostId WHERE pl.PostId = 61217;
SELECT p.Score, pl.LinkTypeId FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Id = 395;
SELECT Id AS PostId, OwnerUserId AS UserId FROM posts WHERE Score > 60;
SELECT SUM(FavoriteCount)  FROM posts  WHERE OwnerUserId = 686 AND YEAR(CreaionDate) = 2011;
SELECT      AVG(UpVotes) AS AverageUpVotes,      AVG(Age) AS AverageAge FROM      users  WHERE      Id IN (         SELECT OwnerUserId          FROM posts          GROUP BY OwnerUserId          HAVING COUNT(Id) > 10     );
SELECT COUNT(DISTINCT UserId) AS UserCount FROM badges WHERE Name = 'Announcer';
SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08';
SELECT COUNT(*) AS PositiveCommentCount FROM comments WHERE Score > 60;
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47.0';
SELECT COUNT(*) AS PostCount FROM posts WHERE Score = 10;
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users);
SELECT u.Reputation FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Date = '2010-07-19 19:39:08.0';
SELECT b.Name  FROM badges b  JOIN users u ON b.UserId = u.Id  WHERE u.DisplayName = 'Pierre';
SELECT b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY';
SELECT      (COUNT(DISTINCT CASE WHEN b.Name = 'Teacher' THEN b.UserId END) * 100.0 / COUNT(DISTINCT u.Id)) AS TeacherBadgePercentage FROM      users u LEFT JOIN      badges b ON u.Id = b.UserId;
SELECT      (COUNT(CASE WHEN u.Age BETWEEN 13 AND 18 THEN 1 END) * 100.0 / COUNT(u.Id)) AS TeenagerPercentage FROM      users u JOIN      badges b ON u.Id = b.UserId WHERE      b.Name = 'Organizer';
SELECT Score  FROM comments  WHERE PostId = (SELECT Id FROM posts WHERE CreationDate = '2010-07-19 19:19:56.0');
SELECT Text  FROM comments  WHERE CreationDate = '2010-07-19 19:37:33.0';
SELECT u.Age FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'Vienna, Austria';
SELECT COUNT(DISTINCT u.Id) AS AdultSupporters FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65;
SELECT SUM(u.Views) AS TotalViews FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Date = '2010-07-19 19:39:08.0';
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users);
SELECT b.Name  FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Sharpie';
SELECT COUNT(DISTINCT u.Id) AS ElderSupporters FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age > 65;
SELECT DisplayName FROM users WHERE Id = 30;
SELECT COUNT(*) FROM users WHERE Location = 'New York';
SELECT COUNT(*) AS VoteCount FROM votes WHERE YEAR(CreationDate) = 2010;
SELECT COUNT(*) AS AdultUserCount FROM users WHERE Age BETWEEN 19 AND 65;
SELECT DisplayName, Views  FROM users  ORDER BY Views DESC  LIMIT 1;
SELECT      DIVIDE(COUNT(CASE WHEN YEAR(CreationDate) = 2010 THEN Id END),              COUNT(CASE WHEN YEAR(CreationDate) = 2011 THEN Id END)) AS VoteRatio FROM votes;
SELECT t.TagName  FROM tags t JOIN posts p ON t.Id = p.Tags JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'John Stauffer';
SELECT COUNT(*)  FROM posts  WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo');
SELECT COUNT(*)  FROM votes  WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan');
SELECT Id  FROM posts  WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'slashnick')  ORDER BY AnswerCount DESC  LIMIT 1;
SELECT OwnerDisplayName, SUM(ViewCount) AS TotalViewCount FROM posts WHERE OwnerDisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY OwnerDisplayName ORDER BY TotalViewCount DESC LIMIT 1;
SELECT COUNT(DISTINCT p.Id) AS PostCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN votes v ON p.Id = v.PostId WHERE u.DisplayName = 'Matt Parker' GROUP BY p.Id HAVING COUNT(v.Id) > 4;
SELECT COUNT(*)  FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE c.Score < 60 AND u.DisplayName = 'Neil McGuigan';
SELECT DISTINCT t.TagName FROM tags t JOIN posts p ON t.Id IN (SELECT value FROM STRING_SPLIT(p.Tags, ',')) JOIN users u ON p.OwnerUserId = u.Id LEFT JOIN comments c ON p.Id = c.PostId WHERE u.DisplayName = 'Mark Meckes' AND c.Id IS NULL;
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Organizer';
SELECT      (COUNT(CASE WHEN t.TagName = 'r' THEN p.Id END) * 100.0 / COUNT(CASE WHEN u.DisplayName = 'Community' THEN p.Id END)) AS percentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id JOIN      postTags pt ON p.Id = pt.PostId JOIN      tags t ON pt.TagId = t.Id WHERE      u.DisplayName = 'Community';
SELECT      (SELECT SUM(ViewCount) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Mornington') -      (SELECT SUM(ViewCount) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Amos') AS ViewCountDifference;
SELECT COUNT(DISTINCT UserId)  FROM badges  WHERE Name = 'commentator' AND YEAR(Date) = 2014;
SELECT COUNT(*)  FROM posts  WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';
SELECT DisplayName, Age  FROM users  WHERE Views = (SELECT MAX(Views) FROM users);
SELECT LastEditDate, LastEditorUserId  FROM posts  WHERE Title = 'Detecting a given face in a database of facial images';
SELECT COUNT(*)  FROM comments  WHERE UserId = 13 AND Score < 60;
SELECT p.Title, c.UserDisplayName FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score > 60;
SELECT b.Name  FROM badges b JOIN users u ON b.UserId = u.Id WHERE YEAR(b.Date) = 2011 AND u.Location = 'North Pole';
SELECT users.DisplayName, users.WebsiteUrl FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.FavoriteCount > 150;
SELECT      p.Title,     COUNT(ph.Id) AS PostHistoryCount,     MAX(ph.CreationDate) AS LastEditDate FROM      posts p LEFT JOIN      postHistory ph ON p.Id = ph.PostId WHERE      p.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY      p.Title;
SELECT u.LastAccessDate, u.Location FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Outliers';
SELECT p2.Title  FROM posts p1 JOIN postLinks pl ON p1.Id = pl.PostId JOIN posts p2 ON pl.RelatedPostId = p2.Id WHERE p1.Title = 'How to tell if something happened in a data set which monitors a value over time';
SELECT p.Id AS PostId, b.Name AS BadgeName FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN badges b ON u.Id = b.UserId WHERE u.DisplayName = 'Samuel' AND YEAR(p.CreaionDate) = 2013 AND YEAR(b.Date) = 2013;
SELECT OwnerDisplayName  FROM posts  WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts);
SELECT u.DisplayName, u.Location FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'hypothesis-testing';
SELECT pl.RelatedPostId, pl.LinkTypeId FROM postLinks pl JOIN posts p ON pl.PostId = p.Id WHERE p.Title = 'What are principal component scores?';
SELECT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ParentId IS NOT NULL ORDER BY p.Score DESC LIMIT 1;
SELECT u.DisplayName, u.WebsiteUrl FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.VoteTypeId = 8 AND v.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8);
SELECT Title  FROM posts  ORDER BY ViewCount DESC  LIMIT 5;
SELECT COUNT(*)  FROM tags  WHERE Count BETWEEN 5000 AND 7000;
SELECT OwnerUserId  FROM posts  WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);
SELECT Age  FROM users  WHERE Reputation = (SELECT MAX(Reputation) FROM users);
SELECT COUNT(DISTINCT p.Id) AS PostCount FROM posts p JOIN votes v ON p.Id = v.PostId WHERE YEAR(p.CreaionDate) = 2011 AND v.BountyAmount = 50;
SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users);
SELECT p.Score FROM posts p JOIN tags t ON FIND_IN_SET(t.TagName, p.Tags) WHERE t.Count = (SELECT MAX(Count) FROM tags);
SELECT DIVIDE(COUNT(Id), 12) AS AverageMonthlyLinks FROM postLinks WHERE YEAR(CreationDate) = 2010 AND PostId IN (     SELECT Id     FROM posts     WHERE AnswerCount <= 2 );
SELECT PostId  FROM votes  WHERE UserId = 1465  ORDER BY (SELECT FavoriteCount FROM posts WHERE Id = PostId) DESC  LIMIT 1;
SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.CreationDate = (SELECT MIN(CreationDate) FROM postLinks);
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId GROUP BY u.Id ORDER BY COUNT(b.Name) DESC LIMIT 1;
SELECT MIN(CreationDate) AS FirstVoteDate FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl';
SELECT MIN(p.CreaionDate) AS FirstPostDate FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Age = (SELECT MIN(Age) FROM users);
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Autobiographer' ORDER BY b.Date ASC LIMIT 1;
SELECT COUNT(DISTINCT u.Id) AS UserCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4;
SELECT AVG(vote_count) AS AveragePostsVoted FROM (     SELECT COUNT(v.PostId) AS vote_count     FROM votes v     JOIN users u ON v.UserId = u.Id     WHERE u.Age = (SELECT MAX(Age) FROM users)     GROUP BY u.Id ) AS user_votes;
SELECT DisplayName  FROM users  WHERE Reputation = (SELECT MAX(Reputation) FROM users);
SELECT COUNT(*)  FROM users  WHERE Reputation > 2000 AND Views > 1000;
SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65;
SELECT COUNT(*)  FROM posts  WHERE OwnerDisplayName = 'Jay Stevens' AND YEAR(CreationDate) = 2010;
SELECT Id, Title  FROM posts  WHERE OwnerDisplayName = 'Harvey Motulsky'  ORDER BY ViewCount DESC  LIMIT 1;
SELECT Id, Title  FROM posts  WHERE Score = (SELECT MAX(Score) FROM posts);
SELECT AVG(p.Score) AS AverageScore FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Stephen Turner';
SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ViewCount > 20000 AND YEAR(p.CreaionDate) = 2011;
SELECT Id, OwnerDisplayName  FROM posts  WHERE YEAR(CreaionDate) = 2010  ORDER BY FavoriteCount DESC  LIMIT 1;
SELECT      (COUNT(CASE WHEN p.CreaionDate BETWEEN '2011-01-01' AND '2011-12-31' AND u.Reputation > 1000 THEN p.Id END) * 100.0) /      COUNT(CASE WHEN p.CreaionDate BETWEEN '2011-01-01' AND '2011-12-31' THEN p.Id END) AS percentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      p.CreaionDate BETWEEN '2011-01-01' AND '2011-12-31';
SELECT      DIVIDE(COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN Id END), COUNT(Id)) AS percentage FROM      users;
SELECT p.ViewCount, u.DisplayName FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Title = 'Computer Game Datasets';
SELECT COUNT(*) AS TotalPostsAboveAverage FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);
SELECT COUNT(*)  FROM comments  WHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1);
SELECT COUNT(*)  FROM posts  WHERE ViewCount > 35000 AND CommentCount = 0;
SELECT u.DisplayName, u.Location FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Id = 183 ORDER BY p.LastEditDate DESC LIMIT 1;
SELECT Name  FROM badges  WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett')  ORDER BY Date DESC  LIMIT 1;
SELECT COUNT(*) AS AdultUserCount FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;
SELECT DATEDIFF(b.Date, u.CreationDate) AS DaysToGetBadge FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Zolomon';
SELECT      COUNT(DISTINCT p.Id) AS PostCount,      COUNT(DISTINCT c.Id) AS CommentCount FROM      users u LEFT JOIN      posts p ON u.Id = p.OwnerUserId LEFT JOIN      comments c ON u.Id = c.UserId WHERE      u.CreationDate = (SELECT MAX(CreationDate) FROM users);
SELECT c.Text, c.UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Analysing wind data with R' ORDER BY c.CreationDate DESC LIMIT 1;
SELECT COUNT(*) AS UserCount FROM badges WHERE Name = 'Citizen Patrol';
SELECT COUNT(p.Id) AS PostCount FROM posts p JOIN postLinks pl ON p.Id = pl.PostId JOIN tags t ON pl.RelatedPostId = t.Id WHERE t.TagName = 'careers';
SELECT u.Reputation, p.ViewCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.DisplayName = 'Jarrod Dixon';
SELECT      COUNT(c.Id) AS CommentCount,      COUNT(CASE WHEN p.PostTypeId = 2 THEN 1 END) AS AnswerCount FROM      posts p LEFT JOIN      comments c ON p.Id = c.PostId WHERE      p.Title = 'Clustering 1D data';
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';
SELECT COUNT(*) AS NumberOfPostsWithBounty FROM votes WHERE BountyAmount > 30;
SELECT      (COUNT(CASE WHEN p.Score > 50 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id WHERE      u.Reputation = (SELECT MAX(Reputation) FROM users);
SELECT COUNT(*) FROM posts WHERE Score < 20;
SELECT COUNT(*)  FROM tags  WHERE Id < 15 AND Count <= 20;
SELECT ExcerptPostId, WikiPostId  FROM tags  WHERE TagName = 'sample';
SELECT u.Reputation, u.UpVotes FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'fine, you win :)';
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title LIKE '%linear regression%';
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;
SELECT u.CreationDate, u.Age FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text LIKE '%http://%';
SELECT COUNT(DISTINCT c.PostId) AS PostCount FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.ViewCount < 5;
SELECT COUNT(*) AS CommentsWithZeroScore FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CommentCount = 1 AND c.Score = 0;
SELECT COUNT(DISTINCT u.Id) AS TotalUsers FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score = 0 AND u.Age = 40;
SELECT p.Id AS PostId, c.Text AS Comment FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item';
SELECT u.UpVotes FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text = 'R is also lazy evaluated.';
SELECT * FROM comments WHERE UserDisplayName = 'Harvey Motulsky';
SELECT DISTINCT c.UserDisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 1 AND 5 AND u.DownVotes = 0;
SELECT      (COUNT(CASE WHEN u.UpVotes = 0 THEN 1 END) * 100.0 / COUNT(c.UserId)) AS percentage FROM      comments c JOIN      users u ON c.UserId = u.Id WHERE      c.Score BETWEEN 5 AND 10;
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = '3-D Man';
SELECT COUNT(DISTINCT hp.hero_id) AS superhero_count FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength';
SELECT COUNT(DISTINCT sh.id)  FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND sh.height_cm > 200;
SELECT sh.full_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id GROUP BY sh.full_name HAVING COUNT(hp.power_id) > 15;
SELECT COUNT(*)  FROM superhero  WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue');
SELECT c.colour  FROM superhero s  JOIN colour c ON s.skin_colour_id = c.id  WHERE s.superhero_name = 'Apocalypse';
SELECT COUNT(DISTINCT sh.id) AS superhero_count FROM superhero sh JOIN colour c ON sh.eye_colour_id = c.id JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE c.colour = 'Blue' AND sp.power_name = 'Agility';
SELECT superhero.superhero_name  FROM superhero  JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id  JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id  WHERE eye_colour.colour = 'Blue' AND hair_colour.colour = 'Blond';
SELECT COUNT(*)  FROM superhero  WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT full_name  FROM superhero  WHERE height_cm = (SELECT MAX(height_cm)                     FROM superhero                     WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'));
SELECT p.publisher_name  FROM superhero s  JOIN publisher p ON s.publisher_id = p.id  WHERE s.superhero_name = 'Sauron';
SELECT COUNT(*)  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue';
SELECT AVG(height_cm) AS average_height FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT      (SUM(sp.power_name = 'Super Strength') * 100.0 / COUNT(sh.id)) AS percentage FROM      superhero sh JOIN      publisher p ON sh.publisher_id = p.id JOIN      hero_power hp ON sh.id = hp.hero_id JOIN      superpower sp ON hp.power_id = sp.id WHERE      p.publisher_name = 'Marvel Comics';
SELECT COUNT(*)  FROM superhero  WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics');
SELECT p.publisher_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN publisher p ON s.publisher_id = p.id WHERE a.attribute_name = 'Speed' ORDER BY ha.attribute_value ASC LIMIT 1;
SELECT COUNT(*)  FROM superhero s JOIN colour c ON s.eye_colour_id = c.id JOIN publisher p ON s.publisher_id = p.id WHERE c.colour = 'Gold' AND p.publisher_name = 'Marvel Comics';
SELECT publisher.publisher_name  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE superhero.superhero_name = 'Blue Beetle II';
SELECT COUNT(*)  FROM superhero  WHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond');
SELECT s.superhero_name  FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Intelligence'  AND ha.attribute_value = (     SELECT MIN(attribute_value)      FROM hero_attribute ha2      JOIN attribute a2 ON ha2.attribute_id = a2.id      WHERE a2.attribute_name = 'Intelligence' );
SELECT r.race  FROM superhero s  JOIN race r ON s.race_id = r.id  WHERE s.superhero_name = 'Copycat';
SELECT COUNT(DISTINCT ha.hero_id) AS superhero_count FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50;
SELECT s.superhero_name  FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Death Touch';
SELECT COUNT(DISTINCT sh.id) AS female_superheroes_with_strength_100 FROM superhero sh JOIN gender g ON sh.gender_id = g.id JOIN hero_attribute ha ON sh.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100;
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.superhero_name ORDER BY COUNT(hp.power_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM superhero  WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');
SELECT      (COUNT(CASE WHEN a.alignment = 'Bad' THEN 1 END) * 100.0 / COUNT(s.id)) AS percentage,     COUNT(CASE WHEN a.alignment = 'Bad' AND p.publisher_name = 'Marvel Comics' THEN 1 END) AS marvel_count FROM      superhero s JOIN      alignment a ON s.alignment_id = a.id JOIN      publisher p ON s.publisher_id = p.id;
SELECT      (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) -     (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) AS difference
SELECT id FROM publisher WHERE publisher_name = 'Star Trek';
SELECT AVG(attribute_value) AS average_attribute_value FROM hero_attribute;
SELECT COUNT(*) AS total_superheroes_without_full_name  FROM superhero  WHERE full_name IS NULL;
SELECT c.colour  FROM superhero s  JOIN colour c ON s.eye_colour_id = c.id  WHERE s.id = 75;
SELECT sp.power_name  FROM superhero s  JOIN hero_power hp ON s.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  WHERE s.superhero_name = 'Deathlok';
SELECT AVG(weight_kg) AS average_weight FROM superhero WHERE gender_id = 2;
SELECT DISTINCT sp.power_name FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE g.gender = 'Male' LIMIT 5;
SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');
SELECT superhero_name  FROM superhero  WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1;
SELECT sp.power_name  FROM hero_power hp  JOIN superpower sp ON hp.power_id = sp.id  WHERE hp.hero_id = 56;
SELECT full_name  FROM superhero  WHERE race_id = (SELECT id FROM race WHERE race = 'Demi-God')  LIMIT 5;
SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');
SELECT race.race  FROM superhero  JOIN race ON superhero.race_id = race.id  WHERE superhero.weight_kg = 169;
SELECT c.colour FROM superhero s JOIN race r ON s.race_id = r.id JOIN colour c ON s.hair_colour_id = c.id WHERE s.height_cm = 185 AND r.race = 'human';
SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.weight_kg = (SELECT MAX(weight_kg) FROM superhero);
SELECT      (COUNT(CASE WHEN publisher_id = 13 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_marvel_heroes FROM      superhero WHERE      height_cm BETWEEN 150 AND 180;
SELECT full_name  FROM superhero  WHERE gender_id = (SELECT id FROM gender WHERE gender = 'male')  AND weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero);
SELECT power_name, COUNT(*) AS power_count FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id GROUP BY power_name ORDER BY power_count DESC LIMIT 1;
SELECT ha.attribute_value  FROM superhero s  JOIN hero_attribute ha ON s.id = ha.hero_id  WHERE s.superhero_name = 'Abomination';
SELECT sp.power_name  FROM hero_power hp  JOIN superpower sp ON hp.power_id = sp.id  WHERE hp.hero_id = 1;
SELECT COUNT(DISTINCT hp.hero_id) AS hero_count FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'stealth';
SELECT sh.full_name  FROM superhero sh JOIN hero_attribute ha ON sh.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'strength' AND ha.attribute_value = (     SELECT MAX(attribute_value)      FROM hero_attribute      JOIN attribute ON hero_attribute.attribute_id = attribute.id      WHERE attribute.attribute_name = 'strength' );
SELECT DIVIDE(COUNT(superhero.id), SUM(skin_colour_id = 1)) AS average_no_skin_colour FROM superhero WHERE skin_colour_id IS NULL;
SELECT COUNT(*)  FROM superhero  WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');
SELECT sh.superhero_name FROM superhero sh JOIN publisher p ON sh.publisher_id = p.id JOIN hero_attribute ha ON sh.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'durability' AND p.publisher_name = 'Dark Horse Comics' ORDER BY ha.attribute_value DESC LIMIT 1;
SELECT colour.colour  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE superhero.full_name = 'Abraham Sapien';
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Flight';
SELECT s.eye_colour_id, s.hair_colour_id, s.skin_colour_id FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics';
SELECT s.superhero_name, p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.eye_colour_id = s.hair_colour_id AND s.hair_colour_id = s.skin_colour_id;
SELECT r.race  FROM superhero s  JOIN race r ON s.race_id = r.id  WHERE s.superhero_name = 'A-Bomb';
SELECT      (COUNT(CASE WHEN c.colour = 'Blue' THEN 1 END) * 100.0 / COUNT(*)) AS blue_female_percentage FROM      superhero s JOIN      gender g ON s.gender_id = g.id JOIN      colour c ON s.eye_colour_id = c.id WHERE      g.gender = 'Female';
SELECT superhero_name, race.race  FROM superhero  JOIN race ON superhero.race_id = race.id  WHERE superhero.full_name = 'Charles Chandler';
SELECT g.gender  FROM superhero s  JOIN gender g ON s.gender_id = g.id  WHERE s.superhero_name = 'Agent 13';
SELECT s.superhero_name  FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Adaptation';
SELECT COUNT(*)  FROM hero_power hp  JOIN superhero s ON hp.hero_id = s.id  WHERE s.superhero_name = 'Amazo';
SELECT sp.power_name  FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.full_name = 'Hunter Zolomon';
SELECT superhero.height_cm  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE colour.colour = 'Amber';
SELECT superhero_name  FROM superhero  WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Black')  AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Black');
SELECT DISTINCT c1.colour AS eye_colour FROM superhero s JOIN colour c1 ON s.eye_colour_id = c1.id JOIN colour c2 ON s.skin_colour_id = c2.id WHERE c2.colour = 'Gold';
SELECT full_name  FROM superhero  WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');
SELECT superhero_name  FROM superhero  WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral');
SELECT COUNT(DISTINCT ha.hero_id) AS hero_count FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Strength' AND ha.attribute_value = (     SELECT MAX(attribute_value)     FROM hero_attribute     JOIN attribute ON hero_attribute.attribute_id = attribute.id     WHERE attribute.attribute_name = 'Strength' );
SELECT r.race, a.alignment FROM superhero s JOIN race r ON s.race_id = r.id JOIN alignment a ON s.alignment_id = a.id WHERE s.superhero_name = 'Cameron Hicks';
SELECT      (COUNT(CASE WHEN g.gender = 'Female' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage FROM      superhero s JOIN      gender g ON s.gender_id = g.id JOIN      publisher p ON s.publisher_id = p.id WHERE      p.publisher_name = 'Marvel Comics';
SELECT AVG(weight_kg) AS average_weight FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');
SELECT      (SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') -      (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler') AS weight_difference;
SELECT AVG(height_cm) AS average_height FROM superhero;
SELECT sp.power_name  FROM superhero s  JOIN hero_power hp ON s.id = hp.hero_id  JOIN superpower sp ON hp.power_id = sp.id  WHERE s.superhero_name = 'Abomination';
SELECT COUNT(*)  FROM superhero  WHERE race_id = 21 AND gender_id = 1;
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' ORDER BY ha.attribute_value DESC LIMIT 1;
SELECT COUNT(*)  FROM superhero  WHERE alignment_id = 3;
SELECT a.attribute_name, ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = '3-D Man';
SELECT superhero_name  FROM superhero  WHERE eye_colour_id = 7 AND hair_colour_id = 9;
SELECT p.publisher_name  FROM superhero s  JOIN publisher p ON s.publisher_id = p.id  WHERE s.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');
SELECT COUNT(*)  FROM superhero  WHERE publisher_id = 1;
SELECT (COUNT(CASE WHEN eye_colour_id = 7 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_blue_eyes FROM superhero;
SELECT      SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) * 1.0 /      NULLIF(SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END), 0) AS gender_ratio FROM      superhero;
SELECT superhero_name  FROM superhero  ORDER BY height_cm DESC  LIMIT 1;
SELECT id FROM superpower WHERE power_name = 'cryokinesis';
SELECT superhero_name FROM superhero WHERE id = 294;
SELECT full_name  FROM superhero  WHERE weight_kg = 0 OR weight_kg IS NULL;
SELECT colour.colour  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE superhero.full_name = 'Karen Beecher-Duncan';
SELECT sp.power_name  FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.full_name = 'Helen Parr';
SELECT r.race  FROM superhero s  JOIN race r ON s.race_id = r.id  WHERE s.weight_kg = 108 AND s.height_cm = 188;
SELECT publisher.publisher_name  FROM superhero  JOIN publisher ON superhero.publisher_id = publisher.id  WHERE superhero.id = 38;
SELECT r.race FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN race r ON s.race_id = r.id WHERE ha.attribute_value = (     SELECT MAX(attribute_value)     FROM hero_attribute )
SELECT a.alignment, sp.power_name FROM superhero s JOIN alignment a ON s.alignment_id = a.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Atom IV';
SELECT superhero.full_name  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE colour.colour = 'Blue'  LIMIT 5;
SELECT AVG(ha.attribute_value) AS average_attribute_value FROM superhero s JOIN alignment a ON s.alignment_id = a.id JOIN hero_attribute ha ON s.id = ha.hero_id WHERE a.id = 3;
SELECT colour.colour FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value = 100;
SELECT COUNT(*)  FROM superhero  WHERE alignment_id = 1 AND gender_id = 2;
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_value BETWEEN 75 AND 80;
SELECT r.race  FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN colour c ON s.hair_colour_id = c.id JOIN race r ON s.race_id = r.id WHERE g.gender = 'male' AND c.colour = 'blue';
SELECT      (SUM(CASE WHEN g.id = 2 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS female_percentage FROM      superhero s JOIN      alignment a ON s.alignment_id = a.id JOIN      gender g ON s.gender_id = g.id WHERE      a.id = 2;
SELECT      (SUM(CASE WHEN s.eye_colour_id = 7 THEN 1 ELSE 0 END) -       SUM(CASE WHEN s.eye_colour_id = 1 THEN 1 ELSE 0 END)) AS difference FROM      superhero s WHERE      s.weight_kg = 0 OR s.weight_kg IS NULL;
SELECT ha.attribute_value  FROM superhero s  JOIN hero_attribute ha ON s.id = ha.hero_id  JOIN attribute a ON ha.attribute_id = a.id  WHERE s.superhero_name = 'Hulk' AND a.attribute_name = 'Strength';
SELECT sp.power_name  FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Ajax';
SELECT COUNT(*)  FROM superhero  WHERE skin_colour_id = (SELECT id FROM colour WHERE colour = 'Green')  AND alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');
SELECT COUNT(*)  FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id WHERE g.gender = 'Female' AND p.publisher_name = 'Marvel Comics';
SELECT s.superhero_name  FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Wind Control' ORDER BY s.superhero_name ASC;
SELECT g.gender FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN gender g ON s.gender_id = g.id WHERE sp.power_name = 'Phoenix Force';
SELECT superhero_name  FROM superhero  WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')  ORDER BY weight_kg DESC  LIMIT 1;
SELECT AVG(height_cm) AS average_height FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN race ON superhero.race_id = race.id WHERE race.race <> 'Human' AND publisher.publisher_name = 'Dark Horse Comics';
SELECT COUNT(DISTINCT ha.hero_id) AS fastest_superheroes FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' AND ha.attribute_value = 100;
SELECT      SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END) AS dc_count,     SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS marvel_count,     ABS(SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END) -          SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)) AS difference FROM      superhero JOIN      publisher ON superhero.publisher_id = publisher.id;
SELECT a.attribute_name FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = 'Black Panther' ORDER BY ha.attribute_value ASC LIMIT 1;
SELECT colour.colour  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE superhero.superhero_name = 'Abomination';
SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1;
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';
SELECT      (SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS female_percentage FROM      superhero s JOIN      gender g ON s.gender_id = g.id JOIN      publisher p ON s.publisher_id = p.id WHERE      p.publisher_name = 'George Lucas';
SELECT      (SUM(CASE WHEN a.alignment = 'Good' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS good_superhero_percentage FROM      superhero s JOIN      publisher p ON s.publisher_id = p.id JOIN      alignment a ON s.alignment_id = a.id WHERE      p.publisher_name = 'Marvel Comics';
SELECT COUNT(*) AS total_superheroes FROM superhero WHERE full_name LIKE 'John%';
SELECT ha.hero_id  FROM hero_attribute ha  WHERE ha.attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute);
SELECT full_name FROM superhero WHERE superhero_name = 'Alien';
SELECT full_name  FROM superhero  WHERE weight_kg < 100 AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'brown');
SELECT ha.attribute_value  FROM superhero s  JOIN hero_attribute ha ON s.id = ha.hero_id  WHERE s.superhero_name = 'Aquababy';
SELECT weight_kg, race_id FROM superhero WHERE id = 40;
SELECT AVG(height_cm) AS average_height FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral');
SELECT superhero.id  FROM superhero  JOIN hero_power ON superhero.id = hero_power.hero_id  JOIN superpower ON hero_power.power_id = superpower.id  WHERE superpower.power_name = 'Intelligence';
SELECT colour.colour  FROM superhero  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE superhero.superhero_name = 'Blackwulf';
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero);
SELECT d.driverRef FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 18 AND q.q1 IS NOT NULL ORDER BY q.q1 ASC LIMIT 5;
SELECT d.surname FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 19 ORDER BY q.q2 ASC LIMIT 1;
SELECT DISTINCT r.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Shanghai';
SELECT r.url  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE c.name = 'Circuit de Barcelona-Catalunya';
SELECT r.name  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE c.country = 'Germany';
SELECT c.name, c.location, c.country FROM circuits c JOIN results r ON c.circuitId = r.raceId JOIN constructors co ON r.constructorId = co.constructorId WHERE co.name = 'Renault';
SELECT COUNT(*)  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE r.year = 2010  AND c.country NOT IN ('Asia', 'Europe');
SELECT r.name  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE c.country = 'Spain';
SELECT lat, lng  FROM circuits  WHERE circuitId IN (     SELECT circuitId      FROM races      WHERE name LIKE '%Australian Grand Prix%' );
SELECT r.url  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE c.name = 'Sepang International Circuit';
SELECT r.time  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE c.circuitRef = 'sepang';
SELECT lat, lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix';
SELECT c.country FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE cr.points = 1 AND cr.raceId = 24;
SELECT q1  FROM qualifying  WHERE raceId = 354 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna');
SELECT d.nationality  FROM qualifying q  JOIN drivers d ON q.driverId = d.driverId  WHERE q.raceId = 355 AND q.q2 = '0:01:40';
SELECT d.number  FROM qualifying q  JOIN drivers d ON q.driverId = d.driverId  WHERE q.raceId = 903 AND q.q3 = '0:01:54';
SELECT COUNT(DISTINCT d.driverId) AS drivers_not_finished FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Bahrain Grand Prix' AND ra.year = 2007 AND r.statusId != (SELECT statusId FROM status WHERE status = 'Finished');
SELECT s.year, s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;
SELECT COUNT(DISTINCT driverId) AS finished_drivers FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29');
SELECT d.* FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = 592 AND r.time IS NOT NULL ORDER BY d.dob ASC LIMIT 1;
SELECT d.url  FROM lapTimes lt  JOIN drivers d ON lt.driverId = d.driverId  WHERE lt.raceId = 161 AND lt.time = '00:01:27';
SELECT d.nationality FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = 933 AND r.fastestLapSpeed = (     SELECT MAX(fastestLapSpeed)     FROM results     WHERE raceId = 933 );
SELECT lat, lng  FROM circuits  WHERE name = 'Malaysian Grand Prix';
SELECT c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE cr.raceId = 9 ORDER BY cr.points DESC LIMIT 1;
SELECT q1  FROM qualifying  WHERE raceId = 345 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi');
SELECT d.nationality  FROM drivers d  JOIN qualifying q ON d.driverId = q.driverId  WHERE q.raceId = 347 AND q.q2 = '0:01:15';
SELECT d.code  FROM drivers d  JOIN qualifying q ON d.driverId = q.driverId  WHERE q.raceId = 45 AND q.q3 = '0:01:33';
SELECT r.time  FROM results r  JOIN drivers d ON r.driverId = d.driverId  WHERE d.forename = 'Bruce' AND d.surname = 'McLaren' AND r.raceId = 743;
SELECT d.forename, d.surname  FROM results r  JOIN races ra ON r.raceId = ra.raceId  JOIN drivers d ON r.driverId = d.driverId  WHERE ra.name = 'San Marino Grand Prix' AND ra.year = 2006 AND r.position = 2;
SELECT s.year, s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;
SELECT COUNT(DISTINCT driverId) AS numberOfDrivers FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29');
SELECT driverId, MIN(dob) AS youngest_dob FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE raceId = 872 AND time IS NOT NULL GROUP BY driverId ORDER BY youngest_dob ASC LIMIT 1;
SELECT CONCAT(d.forename, ' ', d.surname) AS full_name FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.raceId = 348 ORDER BY lt.time ASC LIMIT 1;
SELECT d.nationality FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results);
SELECT      (SELECT fastestLapSpeed FROM results WHERE raceId = 853 AND driverId = (SELECT driverId FROM drivers WHERE driverRef = 'di Resta')) AS fastestLapSpeed853,     (SELECT fastestLapSpeed FROM results WHERE raceId = 854 AND driverId = (SELECT driverId FROM drivers WHERE driverRef = 'di Resta')) AS fastestLapSpeed854,     ((SELECT fastestLapSpeed FROM results WHERE raceId = 853 AND driverId = (SELECT driverId FROM drivers WHERE driverRef = 'di Resta')) -       (SELECT fastestLapSpeed FROM results WHERE raceId = 854 AND driverId = (SELECT driverId FROM drivers WHERE driverRef = 'di Resta'))) /       (SELECT fastestLapSpeed FROM results WHERE raceId = 853 AND driverId = (SELECT driverId FROM drivers WHERE driverRef = 'di Resta')) * 100 AS percentage
SELECT      (COUNT(r.driverId) FILTER (WHERE r.time IS NOT NULL) * 100.0 / COUNT(r.driverId)) AS race_completion_rate FROM      results r JOIN      races ra ON r.raceId = ra.raceId WHERE      ra.date = '1983-07-16';
SELECT MIN(year) AS first_singapore_grand_prix_year FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE circuitRef = 'singapore');
SELECT COUNT(*) AS race_count, name  FROM races  WHERE year = 2005  GROUP BY name  ORDER BY name DESC;
SELECT * FROM races WHERE YEAR(date) = (SELECT YEAR(MIN(date)) FROM races) AND MONTH(date) = (SELECT MONTH(MIN(date)) FROM races);
SELECT r.name, r.date  FROM races r  WHERE r.year = 1999  AND r.round = (SELECT MAX(round) FROM races WHERE year = 1999);
SELECT year, COUNT(*) AS race_count FROM races GROUP BY year ORDER BY race_count DESC LIMIT 1;
SELECT r.name  FROM races r  WHERE r.year = 2017  AND r.raceId NOT IN (SELECT raceId FROM races WHERE year = 2000);
SELECT c.name AS circuit, c.location, c.country FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.name = 'European Grand Prix' AND r.year = (SELECT MIN(year) FROM races WHERE name = 'European Grand Prix');
SELECT MAX(s.year) AS last_season FROM seasons s JOIN races r ON s.year = r.year JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Brands Hatch' AND r.name = 'British Grand Prix';
SELECT COUNT(DISTINCT s.year) AS seasons_count FROM races r JOIN circuits c ON r.circuitId = c.circuitId JOIN seasons s ON r.year = s.year WHERE c.name = 'Silverstone Circuit' AND r.name = 'British Grand Prix';
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2010 AND ra.name = 'Singapore Grand Prix' ORDER BY r.positionOrder;
SELECT CONCAT(d.forename, ' ', d.surname) AS full_name, SUM(ds.points) AS total_points FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId GROUP BY d.driverId ORDER BY total_points DESC LIMIT 1;
SELECT d.forename, d.surname, ds.points FROM driverStandings ds JOIN drivers d ON ds.driverId = d.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.year = 2017 AND r.name = 'Chinese Grand Prix' ORDER BY ds.points DESC LIMIT 3;
SELECT d.forename, d.surname, r.name AS race_name, MIN(lt.time) AS best_lap_time FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId GROUP BY d.driverId, r.raceId ORDER BY best_lap_time ASC LIMIT 1;
SELECT AVG(lt.time) AS average_lap_time FROM lapTimes lt JOIN results r ON lt.raceId = r.raceId AND lt.driverId = r.driverId JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE d.forename = 'Sebastian' AND d.surname = 'Vettel'  AND ra.year = 2009 AND ra.name = 'Chinese Grand Prix';
SELECT      (COUNT(CASE WHEN d.surname = 'Hamilton' AND r.year >= 2010 AND rs.position > 1 THEN 1 END) * 100.0) /      COUNT(CASE WHEN d.surname = 'Hamilton' AND r.year >= 2010 THEN 1 END) AS percentage FROM      results rs JOIN      races r ON rs.raceId = r.raceId JOIN      drivers d ON rs.driverId = d.driverId WHERE      d.surname = 'Hamilton' AND r.year >= 2010;
SELECT d.forename, d.surname, d.nationality, AVG(ds.points) AS average_points FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN (     SELECT driverId, COUNT(wins) AS total_wins     FROM driverStandings     GROUP BY driverId ) AS win_counts ON d.driverId = win_counts.driverId WHERE win_counts.total_wins = (     SELECT MAX(total_wins)     FROM (         SELECT driverId, COUNT(wins) AS total_wins         FROM driverStandings         GROUP BY driverId     ) AS subquery ) GROUP BY d.driverId;
SELECT CONCAT(forename, ' ', surname) AS name,         (2022 - YEAR(dob) + 1) AS age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;
SELECT c.name, c.location, c.country FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE YEAR(r.date) BETWEEN 1990 AND 2000 GROUP BY c.circuitId HAVING COUNT(r.raceId) = 4;
SELECT c.name AS circuit_name, c.location AS circuit_location, r.name AS race_name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE c.country = 'USA' AND r.year = 2006;
SELECT r.name AS race_name, c.name AS circuit_name, c.location  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE MONTH(r.date) = 9 AND YEAR(r.date) = 2005;
SELECT r.name, r.date  FROM results res  JOIN races r ON res.raceId = r.raceId  JOIN drivers d ON res.driverId = d.driverId  WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND res.positionOrder < 10;
SELECT COUNT(*) AS wins FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN circuits c ON ra.circuitId = c.circuitId JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher'  AND c.circuitRef = 'sepang' AND r.points = (SELECT MAX(points) FROM results WHERE raceId = r.raceId);
SELECT r.name AS race, r.year FROM results res JOIN races r ON res.raceId = r.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher' AND res.fastestLap = 1 ORDER BY res.fastestLapTime ASC LIMIT 1;
SELECT AVG(ds.points) AS average_points FROM driverStandings ds JOIN races r ON ds.raceId = r.raceId JOIN drivers d ON ds.driverId = d.driverId WHERE d.forename = 'Eddie' AND d.surname = 'Irvine' AND r.year = 2000;
SELECT r.date, drs.points FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId JOIN driverStandings drs ON r.raceId = drs.raceId AND d.driverId = drs.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY r.date ASC LIMIT 1;
SELECT r.name, c.country  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE r.year = 2017  ORDER BY r.date;
SELECT r.name AS race_name, r.year, c.location FROM races r JOIN circuits c ON r.circuitId = c.circuitId JOIN results res ON r.raceId = res.raceId GROUP BY r.raceId ORDER BY COUNT(res.laps) DESC LIMIT 1;
SELECT (COUNT(CASE WHEN c.country = 'Germany' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.name = 'European Grand Prix';
SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';
SELECT name, lat  FROM circuits  WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring')  ORDER BY lat DESC  LIMIT 1;
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';
SELECT country  FROM circuits  WHERE alt = (SELECT MAX(alt) FROM circuits);
SELECT COUNT(*) AS drivers_without_code FROM drivers WHERE code IS NULL;
SELECT nationality  FROM drivers  WHERE dob = (SELECT MIN(dob) FROM drivers);
SELECT surname FROM drivers WHERE nationality = 'italian';
SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';
SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';
SELECT c.name  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE r.year = 2009 AND r.name = 'Spanish Grand Prix';
SELECT DISTINCT s.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId JOIN seasons s ON r.year = s.year WHERE c.name = 'Silverstone Circuit';
SELECT r.*, c.url  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE c.name = 'Silverstone';
SELECT r.time  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE c.name = 'Abu Dhabi Circuit' AND r.year BETWEEN 2010 AND 2019;
SELECT COUNT(*)  FROM races  WHERE circuitId IN (SELECT circuitId FROM circuits WHERE country = 'Italy');
SELECT r.date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Barcelona-Catalunya';
SELECT c.url  FROM circuits c  JOIN races r ON c.circuitId = r.circuitId  WHERE r.year = 2009 AND r.name LIKE '%Spanish Grand Prix%';
SELECT MIN(fastestLapTime) AS fastestLapTime FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';
SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.fastestLapSpeed = (     SELECT MAX(fastestLapSpeed)     FROM results );
SELECT d.driverRef  FROM results r  JOIN drivers d ON r.driverId = d.driverId  JOIN races ra ON r.raceId = ra.raceId  WHERE ra.name = 'Australian Grand Prix' AND ra.year = 2008 AND r.positionOrder = 1;
SELECT r.name, r.date, r.time  FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';
SELECT r.name, r.date, r.time, d.position, d.rank FROM results d JOIN races r ON d.raceId = r.raceId JOIN drivers dr ON d.driverId = dr.driverId WHERE dr.forename = 'Lewis' AND dr.surname = 'Hamilton' ORDER BY d.rank ASC LIMIT 1;
SELECT MAX(fastestLapSpeed) AS fastest_lap_speed FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';
SELECT DISTINCT s.year FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId JOIN seasons s ON ra.year = s.year WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';
SELECT positionOrder  FROM results  WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')  AND raceId = (SELECT raceId FROM races WHERE year = 2008 AND round = 1);
SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.grid = 4;
SELECT COUNT(DISTINCT driverId) AS finished_drivers FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND time IS NOT NULL;
SELECT fastestLapTime  FROM results r  JOIN drivers d ON r.driverId = d.driverId  JOIN races ra ON r.raceId = ra.raceId  WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'  AND ra.year = 2008 AND ra.name = 'Australian Grand Prix';
SELECT r.time  FROM results r  JOIN races ra ON r.raceId = ra.raceId  WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.positionOrder = 2;
SELECT d.forename, d.surname, d.url  FROM results r  JOIN drivers d ON r.driverId = d.driverId  JOIN races ra ON r.raceId = ra.raceId  WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.positionOrder = 1;
SELECT COUNT(DISTINCT d.driverId) AS driver_count FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE d.nationality = 'American' AND ra.year = 2008 AND ra.name = 'Australian Grand Prix';
SELECT COUNT(DISTINCT d.driverId) AS participating_drivers FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND r.position IS NOT NULL;
SELECT SUM(ds.points) AS total_points FROM driverStandings ds JOIN drivers d ON ds.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';
SELECT AVG(TIME_TO_SEC(STR_TO_DATE(fastestLapTime, '%i:%s.%f'))) AS average_fastest_lap_time FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT      (COUNT(CASE WHEN r.time IS NOT NULL THEN r.raceId END) * 1.0 / COUNT(r.raceId)) AS completion_rate FROM      results r JOIN      races ra ON r.raceId = ra.raceId WHERE      ra.year = 2008 AND ra.name = 'Australian Grand Prix';
SELECT      (TIMESTAMPDIFF(MICROSECOND,          (SELECT time FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND round = 1) AND positionOrder = 1 AND time IS NOT NULL),          (SELECT time FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND round = 1) AND positionOrder = (SELECT MAX(positionOrder) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND round = 1) AND time IS NOT NULL) AND time IS NOT NULL)     ) /      (SELECT time FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND round = 1) AND positionOrder = (SELECT MAX(positionOrder) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND round = 1) AND time IS NOT NULL) AND time IS NOT NULL)     ) * 100 AS percentage_faster FROM dual;
SELECT COUNT(*) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia';
SELECT lat, lng FROM circuits WHERE country = 'USA';
SELECT COUNT(*)  FROM drivers  WHERE nationality = 'British' AND dob > '1980-01-01';
SELECT AVG(cr.points) AS average_points FROM constructorResults cr JOIN constructors c ON cr.constructorId = c.constructorId WHERE c.nationality = 'British';
SELECT c.name, SUM(cr.points) AS total_points FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId GROUP BY c.constructorId ORDER BY total_points DESC LIMIT 1;
SELECT c.name  FROM constructors c LEFT JOIN constructorResults cr ON c.constructorId = cr.constructorId AND cr.raceId = 291 WHERE cr.points = 0 OR cr.constructorResultsId IS NULL;
SELECT COUNT(DISTINCT c.constructorId) AS japaneseConstructorsWithZeroPoints FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE c.nationality = 'Japanese' AND cr.points = 0 GROUP BY c.constructorId HAVING COUNT(cr.raceId) = 2;
SELECT DISTINCT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.position = 1;
SELECT COUNT(DISTINCT c.constructorId) AS FrenchConstructorCount FROM constructors c JOIN results r ON c.constructorId = r.constructorId JOIN races ra ON r.raceId = ra.raceId JOIN lapTimes lt ON r.raceId = lt.raceId WHERE c.nationality = 'French' AND lt.lap > 50;
SELECT      (COUNT(r.resultId) * 100.0 / NULLIF(COUNT(DISTINCT r.driverId), 0)) AS race_completion_percentage FROM      results r JOIN      drivers d ON r.driverId = d.driverId JOIN      races ra ON r.raceId = ra.raceId WHERE      d.nationality = 'Japanese'      AND ra.year BETWEEN 2007 AND 2009      AND r.time IS NOT NULL;
SELECT s.year, AVG(TIME_TO_SEC(r.time)) AS average_time_seconds FROM results r JOIN driverStandings ds ON r.raceId = ds.raceId AND r.driverId = ds.driverId JOIN seasons s ON r.raceId = (SELECT raceId FROM races WHERE year = s.year ORDER BY round LIMIT 1) WHERE ds.position = 1 AND r.time IS NOT NULL GROUP BY s.year;
SELECT d.forename, d.surname FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE YEAR(d.dob) > 1975 AND ds.position = 2;
SELECT COUNT(DISTINCT d.driverId) AS ItalianDriversNotFinished FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE d.nationality = 'Italian' AND r.time IS NULL;
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.fastestLap = 1 ORDER BY r.fastestLapTime ASC LIMIT 1;
SELECT r.lap AS fastest_lap_number FROM results r JOIN driverStandings ds ON r.driverId = ds.driverId WHERE ds.raceId = r.raceId AND ds.position = 1 AND ds.year = 2009 ORDER BY r.fastestLapTime ASC LIMIT 1;
SELECT AVG(fastestLapSpeed) AS average_fastest_lap_speed FROM results JOIN races ON results.raceId = races.raceId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;
SELECT r.name, r.year FROM results res JOIN races r ON res.raceId = r.raceId WHERE res.milliseconds IS NOT NULL ORDER BY res.milliseconds ASC LIMIT 1;
SELECT      (COUNT(DISTINCT d.driverId) * 100.0 / NULLIF(COUNT(DISTINCT d2.driverId), 0)) AS percentage FROM      drivers d JOIN      results r ON d.driverId = r.driverId JOIN      races ra ON r.raceId = ra.raceId WHERE      d.dob < '1985-01-01'      AND ra.year BETWEEN 2000 AND 2005      AND r.laps > 50;
SELECT COUNT(DISTINCT d.driverId) AS FrenchDriverCount FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE d.nationality = 'French' AND l.time < '00:02:00';
SELECT code FROM drivers WHERE nationality = 'America';
SELECT raceId FROM races WHERE year = 2009;
SELECT COUNT(DISTINCT driverId) AS driver_count FROM results WHERE raceId = 18;
Error: 第 10396 个样本有 2 个SQL。
SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';
SELECT COUNT(*)  FROM drivers  WHERE nationality = 'Australian' AND YEAR(dob) = 1980;
SELECT d.driverId, d.forename, d.surname, MIN(lt.time) AS earliest_lap_time FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'German' AND YEAR(d.dob) BETWEEN 1980 AND 1990 GROUP BY d.driverId, d.forename, d.surname ORDER BY earliest_lap_time LIMIT 3;
SELECT driverRef  FROM drivers  WHERE nationality = 'German'  ORDER BY dob ASC  LIMIT 1;
SELECT d.driverId, d.code FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE YEAR(d.dob) = 1971 AND r.fastestLapTime IS NOT NULL;
SELECT d.driverId, d.forename, d.surname, MAX(lt.time) AS latest_lap_time FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'Spanish' AND YEAR(d.dob) < 1982 GROUP BY d.driverId, d.forename, d.surname ORDER BY latest_lap_time DESC LIMIT 10;
SELECT r.year FROM races r JOIN results res ON r.raceId = res.raceId WHERE res.fastestLapTime IS NOT NULL ORDER BY res.fastestLapTime ASC LIMIT 1;
SELECT year, MAX(lapTimes.time) AS lowest_speed_lap_time FROM seasons JOIN races ON seasons.year = races.year JOIN lapTimes ON races.raceId = lapTimes.raceId GROUP BY year ORDER BY lowest_speed_lap_time ASC LIMIT 1;
SELECT driverId FROM lapTimes WHERE lap = 1 GROUP BY driverId ORDER BY MIN(time) ASC LIMIT 5;
SELECT COUNT(*)  FROM results  WHERE raceId > 50 AND raceId < 100 AND statusId = 2 AND time IS NOT NULL;
SELECT c.name, c.location, c.country, c.lat, c.lng, COUNT(r.raceId) AS timesHeld FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE c.country = 'Austria' GROUP BY c.name, c.location, c.country, c.lat, c.lng;
SELECT r.round AS race_number, COUNT(r.resultId) AS finisher_count FROM results r WHERE r.time IS NOT NULL GROUP BY r.round ORDER BY finisher_count DESC LIMIT 1;
SELECT d.driverRef, d.nationality, d.dob FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 23 AND q.q2 IS NOT NULL;
SELECT r.year, r.name, r.date, r.time FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE d.dob = (SELECT MIN(dob) FROM drivers) ORDER BY r.date, r.time LIMIT 1;
SELECT COUNT(DISTINCT d.driverId) AS disqualified_american_drivers FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE d.nationality = 'American' AND r.statusId = 2;
SELECT c.name, c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE c.nationality = 'Italian' ORDER BY cs.points DESC LIMIT 1;
SELECT c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId GROUP BY c.constructorId, c.url ORDER BY SUM(cs.wins) DESC LIMIT 1;
SELECT d.forename, d.surname, MAX(lt.time) AS slowest_time FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId JOIN drivers d ON lt.driverId = d.driverId WHERE r.name = 'French Grand Prix' AND lt.lap = 3 GROUP BY d.driverId ORDER BY slowest_time DESC LIMIT 1;
SELECT r.name AS race_name, MIN(lt.time) AS fastest_first_lap_time FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId WHERE lt.lap = 1 GROUP BY r.raceId ORDER BY fastest_first_lap_time ASC LIMIT 1;
SELECT AVG(fastestLapTime) AS average_fastest_lap_time FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2006 AND races.name = 'United States Grand Prix' AND results.positionOrder < 11;
SELECT d.driverId, d.forename, d.surname, AVG(p.duration) AS avg_duration FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE d.nationality = 'German' AND YEAR(d.dob) BETWEEN 1980 AND 1985 GROUP BY d.driverId, d.forename, d.surname ORDER BY avg_duration ASC LIMIT 5;
SELECT d.forename, d.surname, r.time FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.year = 2008 AND ra.name = 'Canadian Grand Prix' AND r.positionOrder = 1;
SELECT c.constructorRef, c.url FROM constructorResults cr JOIN results r ON cr.raceId = r.raceId AND cr.constructorId = r.constructorId JOIN constructors c ON cr.constructorId = c.constructorId WHERE r.raceId = (SELECT raceId FROM races WHERE year = 2009 AND name = 'Singapore Grand Prix') AND cr.points = (SELECT MAX(points) FROM constructorResults WHERE raceId = (SELECT raceId FROM races WHERE year = 2009 AND name = 'Singapore Grand Prix'));
SELECT CONCAT(forename, ' ', surname) AS full_name, dob  FROM drivers  WHERE nationality = 'Austrian' AND YEAR(dob) BETWEEN 1981 AND 1991;
SELECT CONCAT(forename, ' ', surname) AS full_name, url AS wikipedia_page, dob FROM drivers WHERE nationality = 'German' AND YEAR(dob) BETWEEN 1971 AND 1985 ORDER BY dob DESC;
SELECT location, country, lat, lng  FROM circuits  WHERE circuitRef = 'hungaroring';
SELECT      SUM(cr.points) AS score,      c.name,      c.nationality  FROM      races r  JOIN      constructorResults cr ON r.raceId = cr.raceId  JOIN      constructors c ON cr.constructorId = c.constructorId  WHERE      r.name = 'Monaco Grand Prix'      AND r.year BETWEEN 1980 AND 2010  GROUP BY      c.constructorId  ORDER BY      score DESC  LIMIT 1;
SELECT AVG(ds.points) AS average_score FROM driverStandings ds JOIN races r ON ds.raceId = r.raceId JOIN drivers d ON ds.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND r.name LIKE '%Turkish Grand Prix%';
SELECT AVG(race_count) AS annual_average_races FROM (     SELECT YEAR(date) AS year, COUNT(*) AS race_count     FROM races     WHERE date BETWEEN '2000-01-01' AND '2010-12-31'     GROUP BY YEAR(date) ) AS yearly_races;
SELECT nationality, COUNT(*) as count FROM drivers GROUP BY nationality ORDER BY count DESC LIMIT 1;
SELECT COUNT(*) AS victories FROM driverStandings ds JOIN results r ON ds.raceId = r.raceId AND ds.driverId = r.driverId WHERE ds.position = 91 AND r.positionOrder = 1;
SELECT r.name FROM results res JOIN races r ON res.raceId = r.raceId WHERE res.fastestLapSpeed = (     SELECT MIN(fastestLapSpeed)     FROM results )
SELECT CONCAT(c.location, ', ', c.country) AS full_location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.date = (SELECT MAX(date) FROM races);
SELECT CONCAT(d.forename, ' ', d.surname) AS full_name FROM qualifying q JOIN races r ON q.raceId = r.raceId JOIN drivers d ON q.driverId = d.driverId JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2008 AND r.round = 3 AND c.circuitRef = 'marina_bay' AND q.position = 1;
SELECT CONCAT(d.forename, ' ', d.surname) AS full_name, d.nationality, r.name AS first_race FROM drivers d JOIN results res ON d.driverId = res.driverId JOIN races r ON res.raceId = r.raceId WHERE d.dob = (SELECT MAX(dob) FROM drivers) ORDER BY r.date ASC LIMIT 1;
SELECT COUNT(*) AS accident_count FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix') AND driverId = (SELECT driverId                  FROM results                  WHERE raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix')                  AND statusId = 3                  GROUP BY driverId                  ORDER BY COUNT(*) DESC                  LIMIT 1) AND statusId = 3;
SELECT CONCAT(forename, ' ', surname) AS full_name, COUNT(results.resultId) AS wins FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE dob = (SELECT MIN(dob) FROM drivers) GROUP BY full_name;
SELECT MAX(duration) AS longestPitStopTime FROM pitStops;
SELECT MIN(time) AS fastest_lap_time FROM lapTimes;
SELECT MAX(duration) AS longest_pit_stop_time FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT pitStops.lap  FROM pitStops  JOIN races ON pitStops.raceId = races.raceId  JOIN drivers ON pitStops.driverId = drivers.driverId  WHERE drivers.forename = 'Lewis'  AND drivers.surname = 'Hamilton'  AND races.year = 2011  AND races.name = 'Australian Grand Prix';
SELECT p.driverId, p.duration FROM pitStops p JOIN races r ON p.raceId = r.raceId WHERE r.year = 2011 AND r.name = 'Australian Grand Prix';
SELECT MIN(lapTimes.time) AS lap_record FROM lapTimes JOIN results ON lapTimes.raceId = results.raceId AND lapTimes.driverId = results.driverId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT CONCAT(d.forename, ' ', d.surname) AS full_name FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.time = (SELECT MIN(time) FROM lapTimes);
SELECT r.position FROM results r JOIN lapTimes l ON r.raceId = l.raceId AND r.driverId = l.driverId JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'  AND l.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = r.raceId AND driverId = r.driverId);
SELECT MIN(lapTimes.time) AS lap_record FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.circuitRef = 'austrian' AND races.name LIKE '%Grand Prix%';
SELECT l.raceId, l.driverId, l.lap, l.time, l.milliseconds, c.name AS circuitName FROM lapTimes l JOIN races r ON l.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Italy' AND l.time = (     SELECT MIN(time)     FROM lapTimes     WHERE raceId = l.raceId ) ORDER BY l.raceId, l.lap;
SELECT r.name, l.time FROM races r JOIN lapTimes l ON r.raceId = l.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Austrian Grand Prix' ORDER BY l.time ASC LIMIT 1;
SELECT p.duration FROM races r JOIN lapTimes l ON r.raceId = l.raceId JOIN pitStops p ON r.raceId = p.raceId AND l.driverId = p.driverId WHERE r.circuitId = (SELECT circuitId FROM circuits WHERE circuitRef = 'austrian') AND l.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = r.raceId);
SELECT c.lat, c.lng FROM circuits c JOIN results r ON c.circuitId = r.circuitId WHERE r.fastestLapTime = '1:29.488';
SELECT AVG(duration) AS average_pit_stop_time FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT AVG(lapTimes.milliseconds) AS average_lap_time FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';
SELECT player_api_id  FROM Player_Attributes  WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
SELECT player_name, height  FROM Player  ORDER BY height DESC  LIMIT 1;
SELECT preferred_foot  FROM Player_Attributes  WHERE potential = (SELECT MIN(potential) FROM Player_Attributes);
SELECT COUNT(*)  FROM Player_Attributes  WHERE overall_rating >= 60 AND overall_rating < 65  AND defensive_work_rate = 'low';
SELECT player_api_id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5;
SELECT l.name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals FROM Match m JOIN League l ON m.league_id = l.id WHERE m.season = '2015/2016' GROUP BY l.name ORDER BY total_goals DESC LIMIT 1;
SELECT home_team_api_id, COUNT(*) AS lost_matches FROM Match WHERE season = '2015/2016' AND (home_team_goal - away_team_goal) < 0 GROUP BY home_team_api_id ORDER BY lost_matches ASC LIMIT 1;
SELECT player_name FROM Player_Attributes ORDER BY penalties DESC LIMIT 10;
SELECT away_team_api_id, COUNT(*) AS away_wins FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Scotland Premier League')   AND season = '2009/2010'   AND away_team_goal > home_team_goal GROUP BY away_team_api_id ORDER BY away_wins DESC LIMIT 1;
SELECT team_fifa_api_id, buildUpPlaySpeed FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 4;
SELECT l.name, COUNT(*) AS draw_count FROM Match m JOIN League l ON m.league_id = l.id WHERE m.season = '2015/2016' AND m.home_team_goal = m.away_team_goal GROUP BY l.id ORDER BY draw_count DESC LIMIT 1;
SELECT      player_name,      FLOOR(DATEDIFF(CURDATE(), birthday) / 365) AS age FROM      Player  JOIN      Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE      sprint_speed >= 97      AND date >= '2013-01-01 00:00:00'      AND date <= '2015-12-31 00:00:00';
SELECT L.name, COUNT(M.id) AS match_count FROM Match M JOIN League L ON M.league_id = L.id GROUP BY L.id ORDER BY match_count DESC LIMIT 1;
SELECT AVG(height) AS average_height FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';
SELECT player_api_id  FROM Player_Attributes  WHERE overall_rating > (SELECT AVG(overall_rating)                           FROM Player_Attributes                           WHERE substr(date, 1, 4) = '2010')    AND substr(date, 1, 4) = '2010' GROUP BY player_api_id;
SELECT team_fifa_api_id  FROM Team_Attributes  WHERE buildUpPlaySpeed BETWEEN 51 AND 59;
SELECT t.team_long_name FROM Team_Attributes t WHERE t.date BETWEEN '2012-01-01' AND '2012-12-31' AND t.buildUpPlayPassing > (     SELECT AVG(buildUpPlayPassing)     FROM Team_Attributes     WHERE buildUpPlayPassing IS NOT NULL     AND strftime('%Y', date) = '2012' )
SELECT      (SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) * 1.0 / COUNT(player_fifa_api_id)) * 100 AS percentage_left_foot FROM      Player WHERE      birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00';
SELECT L.name, SUM(M.home_team_goal + M.away_team_goal) AS total_goals FROM Match M JOIN League L ON M.league_id = L.id GROUP BY L.id ORDER BY total_goals ASC LIMIT 5;
SELECT AVG(long_shots) AS average_long_shots FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Ahmed Samir Farag');
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_fifa_api_id = pa.player_fifa_api_id WHERE p.height > 180 GROUP BY p.player_name ORDER BY AVG(pa.heading_accuracy) DESC LIMIT 10;
SELECT t.team_long_name, ta.chanceCreationPassing FROM Team_Attributes ta JOIN Team t ON ta.team_fifa_api_id = t.team_fifa_api_id WHERE ta.buildUpPlayDribblingClass = 'Normal' AND ta.date >= '2014-01-01 00:00:00' AND ta.date <= '2014-01-31 00:00:00' AND ta.chanceCreationPassing < (     SELECT AVG(chanceCreationPassing)     FROM Team_Attributes     WHERE date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00' ) ORDER BY ta.chanceCreationPassing DESC;
SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal;
SELECT team_short_name  FROM Team  WHERE team_long_name = 'Queens Park Rangers';
SELECT player_name  FROM Player  WHERE substr(birthday, 1, 4) = '1970' AND substr(birthday, 6, 2) = '10';
SELECT pa.attacking_work_rate  FROM Player_Attributes pa  JOIN Player p ON pa.player_api_id = p.player_api_id  WHERE p.player_name = 'Franco Zennaro';
SELECT buildUpPlayPositioningClass  FROM Team_Attributes  WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Team WHERE team_long_name = 'ADO Den Haag');
SELECT heading_accuracy  FROM Player_Attributes  WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Francois Affolter')  AND date = '2014-09-18 00:00:00';
SELECT pa.overall_rating  FROM Player_Attributes pa  JOIN Player p ON pa.player_api_id = p.player_api_id  WHERE p.player_name = 'Gabriel Tamas' AND strftime('%Y', pa.date) = '2011';
SELECT COUNT(*)  FROM Match m  JOIN League l ON m.league_id = l.id  WHERE l.name = 'Scotland Premier League' AND m.season = '2015/2016';
SELECT preferred_foot  FROM Player  ORDER BY birthday DESC  LIMIT 1;
SELECT player_name, potential  FROM Player  JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id  WHERE potential = (SELECT MAX(potential) FROM Player_Attributes);
SELECT COUNT(*)  FROM Player  WHERE weight < 130 AND preferred_foot = 'left';
SELECT team_short_name  FROM Team_Attributes  WHERE chanceCreationPassingClass = 'Risky';
SELECT pa.defensive_work_rate  FROM Player_Attributes pa  JOIN Player p ON pa.player_api_id = p.player_api_id  WHERE p.player_name = 'David Wilson';
SELECT p.birthday  FROM Player p  JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id  WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
SELECT League.name  FROM League  JOIN Country ON League.country_id = Country.id  WHERE Country.name = 'Netherlands';
SELECT AVG(home_team_goal)  FROM Match  JOIN Country ON Match.country_id = Country.id  WHERE Country.name = 'Poland' AND Match.season = '2010/2011';
SELECT AVG(pa.finishing) AS average_finishing_rate FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.height = (SELECT MAX(height) FROM Player)    OR p.height = (SELECT MIN(height) FROM Player) GROUP BY p.height ORDER BY average_finishing_rate DESC LIMIT 1;
SELECT player_name FROM Player WHERE height > 180;
SELECT COUNT(*)  FROM Player  WHERE strftime('%Y', birthday) > '1990';
SELECT COUNT(*)  FROM Player  WHERE player_name LIKE 'Adam%' AND weight > 170;
SELECT p.player_name  FROM Player_Attributes pa  JOIN Player p ON pa.player_api_id = p.player_api_id  WHERE pa.overall_rating > 80  AND strftime('%Y', pa.date) BETWEEN '2008' AND '2010';
SELECT potential  FROM Player_Attributes  WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran');
SELECT * FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'left');
SELECT team_long_name  FROM Team_Attributes  WHERE buildUpPlaySpeedClass = 'Fast';
SELECT buildUpPlayPassingClass  FROM Team_Attributes  WHERE team_short_name = 'CLB';
SELECT team_short_name  FROM Team_Attributes  WHERE buildUpPlayPassing > 70;
SELECT AVG(pa.overall_rating) AS average_overall_rating FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE strftime('%Y', pa.date) BETWEEN '2010' AND '2015'  AND p.height > 170;
SELECT player_name, height  FROM Player  ORDER BY height ASC  LIMIT 1;
SELECT Country.name  FROM League  JOIN Country ON League.country_id = Country.id  WHERE League.name = 'Italy Serie A';
SELECT team_short_name  FROM Team_Attributes  WHERE buildUpPlaySpeed = 31    AND buildUpPlayDribbling = 53    AND buildUpPlayPassing = 32;
SELECT AVG(pa.overall_rating) AS average_overall_rating FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Aaron Doran';
SELECT COUNT(*)  FROM Match  WHERE league_id = (SELECT id FROM League WHERE name = 'Germany 1. Bundesliga')  AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';
SELECT T.team_short_name  FROM Match M  JOIN Team T ON M.home_team_api_id = T.team_api_id  WHERE M.home_team_goal = 10;
SELECT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61) AND pa.potential = 61;
SELECT      (SELECT AVG(pa.ball_control) FROM Player_Attributes pa       JOIN Player p ON pa.player_api_id = p.player_api_id       WHERE p.player_name = 'Abdou Diallo') -      (SELECT AVG(pa.ball_control) FROM Player_Attributes pa       JOIN Player p ON pa.player_api_id = p.player_api_id       WHERE p.player_name = 'Aaron Appindangoye') AS ball_control_difference;
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';
SELECT player_name, birthday  FROM Player  WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada')  ORDER BY birthday ASC  LIMIT 1;
SELECT player_name, height  FROM Player  WHERE height = (SELECT MAX(height) FROM Player);
SELECT COUNT(*)  FROM Player_Attributes  WHERE preferred_foot = 'left'  AND attacking_work_rate = 'low';
SELECT Country.name  FROM League  JOIN Country ON League.country_id = Country.id  WHERE League.name = 'Belgium Jupiler League';
SELECT name FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Germany');
SELECT player_name, overall_rating  FROM Player  JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id  WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
SELECT COUNT(*)  FROM Player  JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id  WHERE strftime('%Y', birthday) < '1986'  AND defensive_work_rate = 'high';
SELECT player_name, MAX(crossing) AS best_crossing FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') GROUP BY player_name ORDER BY best_crossing DESC LIMIT 1;
SELECT pa.heading_accuracy  FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Ariel Borysiuk';
SELECT COUNT(DISTINCT p.id)  FROM Player p  JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id  WHERE p.height > 180 AND pa.volleys > 70;
SELECT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.volleys > 70 AND pa.dribbling > 70;
SELECT COUNT(*)  FROM Match m  JOIN Country c ON m.country_id = c.id  WHERE c.name = 'Belgium' AND m.season = '2008/2009';
SELECT long_passing  FROM Player_Attributes  WHERE player_api_id = (     SELECT player_api_id      FROM Player      ORDER BY birthday ASC      LIMIT 1 );
SELECT COUNT(*)  FROM Match  WHERE league_id = (SELECT id FROM League WHERE name = 'Belgium Jupiler League')  AND strftime('%Y', date) = '2009'  AND strftime('%m', date) = '04';
SELECT league_id, COUNT(*) AS match_count FROM Match WHERE season = '2008/2009' GROUP BY league_id ORDER BY match_count DESC LIMIT 1;
SELECT AVG(overall_rating) AS average_overall_rating FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE strftime('%Y', birthday) < '1986';
SELECT      (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk')) -     (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel')) AS difference,     ((SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk')) -     (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel'))) /     (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel')) * 100 AS percentage_difference;
SELECT AVG(ta.buildUpPlaySpeed) AS average_build_up_play_speed FROM Team_Attributes ta JOIN Team t ON ta.team_fifa_api_id = t.team_fifa_api_id WHERE t.team_long_name = 'Heart of Midlothian';
SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes T1 JOIN Player T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino';
SELECT SUM(pa.crossing) AS total_crossing_score FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Aaron Lennox';
SELECT MAX(chanceCreationPassing) AS highest_chance_creation_passing_score,         chanceCreationPassingClass  FROM Team_Attributes  WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Team WHERE team_long_name = 'Ajax');
SELECT preferred_foot  FROM Player  JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id  WHERE player_name = 'Abdou Diallo';
SELECT MAX(pa.overall_rating) AS highest_overall_rating FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Dorlan Pabon';
SELECT AVG(away_team_goal) AS average_goals FROM Match m JOIN Team t ON m.away_team_api_id = t.team_api_id WHERE t.team_long_name = 'Parma' AND m.country_id = (SELECT id FROM Country WHERE name = 'Italy');
SELECT player_name  FROM Player  WHERE player_api_id IN (     SELECT player_api_id      FROM Player_Attributes      WHERE overall_rating = 77 AND date = '2016-06-23' )  ORDER BY birthday ASC  LIMIT 1;
SELECT pa.overall_rating  FROM Player_Attributes pa  JOIN Player p ON pa.player_api_id = p.player_api_id  WHERE p.player_name = 'Aaron Mooy' AND pa.date = '2016-02-04 00:00:00';
SELECT potential  FROM Player_Attributes  WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Francesco Parravicini')  AND date = '2010-08-30 00:00:00';
SELECT pa.attacking_work_rate  FROM Player_Attributes pa  JOIN Player p ON pa.player_api_id = p.player_api_id  WHERE p.player_name = 'Francesco Migliore' AND pa.date = '2015-05-01 00:00:00';
SELECT pa.defensive_work_rate  FROM Player_Attributes pa  JOIN Player p ON pa.player_api_id = p.player_api_id  WHERE p.player_name = 'Kevin Berigaud' AND pa.date = '2013-02-22 00:00:00';
SELECT date  FROM Player_Attributes  WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant')  AND crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant'))  ORDER BY date  LIMIT 1;
SELECT ta.buildUpPlaySpeedClass  FROM Team_Attributes ta  JOIN Team t ON ta.team_fifa_api_id = t.team_fifa_api_id  WHERE t.team_long_name = 'Willem II' AND ta.date = '2012-02-22 00:00:00';
SELECT buildUpPlayDribblingClass  FROM Team_Attributes  WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Team WHERE team_short_name = 'LEI')  AND date = '2015-09-10 00:00:00';
SELECT buildUpPlayPassingClass  FROM Team_Attributes  WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Team WHERE team_long_name = 'FC Lorient')  AND date = '2010-02-22';
SELECT chanceCreationPassingClass  FROM Team_Attributes  WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Team WHERE team_long_name = 'PEC Zwolle')  AND date = '2013-09-20 00:00:00';
SELECT ta.chanceCreationCrossingClass  FROM Team_Attributes ta  JOIN Team t ON ta.team_fifa_api_id = t.team_fifa_api_id  WHERE t.team_long_name = 'Hull City' AND ta.date = '2010-02-22 00:00:00';
SELECT defenceAggressionClass  FROM Team_Attributes  WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Team WHERE team_long_name = 'Hannover 96')  AND date = '2015-09-10 00:00:00';
SELECT AVG(pa.overall_rating) AS average_overall_rating FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Marko Arnautovic' AND pa.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00';
SELECT      (SELECT overall_rating FROM Player_Attributes       WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Landon Donovan')       AND date = '2013-07-12') AS landon_rating,     (SELECT overall_rating FROM Player_Attributes       WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Jordan Bowery')       AND date = '2013-07-12') AS jordan_rating,     ((SELECT overall_rating FROM Player_Attributes        WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Landon Donovan')        AND date = '2013-07-12') -       (SELECT overall_rating FROM Player_Attributes        WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Jordan Bowery')        AND date = '2013-07-12')) /      (SELECT overall_rating FROM Player_Attributes       WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Landon Donovan')       AND date = '2013-07-12') * 100 AS percentage_difference
SELECT player_name  FROM Player  ORDER BY height DESC  LIMIT 5;
SELECT player_api_id  FROM Player  ORDER BY weight DESC  LIMIT 10;
SELECT player_name  FROM Player  WHERE datetime('now', 'localtime') - datetime(birthday) > 34 * 365.25;
SELECT SUM(m.home_team_goal) AS total_home_goals FROM Match m JOIN Player p ON FIND_IN_SET(p.player_api_id, m.home_player_X1, m.home_player_X2, m.home_player_X3, m.home_player_X4, m.home_player_X5, m.home_player_X6, m.home_player_X7, m.home_player_X8, m.home_player_X9, m.home_player_X10, m.home_player_X11) WHERE p.player_name = 'Aaron Lennon';
SELECT SUM(m.away_team_goal) AS total_away_goals FROM Match m JOIN Player p1 ON p1.player_api_id = m.away_player_X1 OR p1.player_api_id = m.away_player_X2 OR p1.player_api_id = m.away_player_X3 OR p1.player_api_id = m.away_player_X4 OR p1.player_api_id = m.away_player_X5 OR p1.player_api_id = m.away_player_X6 OR p1.player_api_id = m.away_player_X7 OR p1.player_api_id = m.away_player_X8 OR p1.player_api_id = m.away_player_X9 OR p1.player_api_id = m.away_player_X10 OR p1.player_api_id = m.away_player_X11 JOIN Player p2 ON p2.player_api_id = m.away_player_Y1 OR p2.player_api_id = m.away_player_Y2 OR p2.player_api_id = m.away_player_Y3 OR p2.player_api_id = m.away_player_Y4 OR p2.player_api_id = m.away_player_Y5 OR p2.player_api_id = m.away_player_Y6 OR p2.player_api_id = m.away_player_Y7 OR p2.player_api_id = m.away_player_Y8 OR p2.player_api_id = m.away_player_Y9 OR p2.player_api_id = m.away_player_Y10 OR p2.player_api_id = m.away_player_Y11 WHERE (p1.player_name = 'Daan Smith' OR p2.player_name = 'Filipe Ferreira');
SELECT SUM(m.home_team_goal) AS total_home_goals FROM Match m JOIN Player p ON m.home_player_1 = p.player_api_id OR m.home_player_2 = p.player_api_id OR m.home_player_3 = p.player_api_id OR m.home_player_4 = p.player_api_id OR m.home_player_5 = p.player_api_id OR m.home_player_6 = p.player_api_id OR m.home_player_7 = p.player_api_id OR m.home_player_8 = p.player_api_id OR m.home_player_9 = p.player_api_id OR m.home_player_10 = p.player_api_id OR m.home_player_11 = p.player_api_id WHERE (strftime('%Y', 'now') - strftime('%Y', p.birthday)) <= 30;
SELECT player_name  FROM Player  JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id  ORDER BY overall_rating DESC  LIMIT 10;
SELECT p.player_name  FROM Player p  JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id  WHERE pa.potential = (SELECT MAX(potential) FROM Player_Attributes);
SELECT player_name  FROM Player  JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id  WHERE attacking_work_rate = 'high';
SELECT player_name  FROM Player  WHERE player_api_id IN (     SELECT player_api_id      FROM Player_Attributes      WHERE finishing = 1 )  ORDER BY birthday ASC  LIMIT 1;
SELECT p.player_name  FROM Player p  JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id  JOIN Team t ON pa.player_fifa_api_id = t.team_fifa_api_id  JOIN Match m ON t.team_api_id = m.home_team_api_id OR t.team_api_id = m.away_team_api_id  JOIN League l ON m.league_id = l.id  JOIN Country c ON l.country_id = c.id  WHERE c.name = 'Belgium';
SELECT p.player_name, c.name AS country FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id JOIN Team t ON p.player_api_id = t.team_api_id JOIN Match m ON t.team_api_id = m.home_team_api_id OR t.team_api_id = m.away_team_api_id JOIN Country c ON m.country_id = c.id WHERE pa.vision > 89;
SELECT c.name AS country_name, AVG(p.weight) AS average_weight FROM Player p JOIN Team t ON p.player_api_id = t.team_api_id JOIN Match m ON t.team_api_id = m.home_team_api_id OR t.team_api_id = m.away_team_api_id JOIN League l ON m.league_id = l.id JOIN Country c ON l.country_id = c.id GROUP BY c.name ORDER BY average_weight DESC LIMIT 1;
SELECT team_long_name  FROM Team_Attributes  WHERE buildUpPlaySpeedClass = 'Slow';
SELECT DISTINCT t.team_short_name FROM Team_Attributes ta JOIN Team t ON ta.team_fifa_api_id = t.team_fifa_api_id WHERE ta.chanceCreationPassingClass = 'Safe';
SELECT AVG(p.height) AS average_height FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id JOIN Team t ON pa.player_fifa_api_id = t.team_fifa_api_id JOIN Match m ON t.team_api_id = m.home_team_api_id OR t.team_api_id = m.away_team_api_id JOIN League l ON m.league_id = l.id JOIN Country c ON l.country_id = c.id WHERE c.name = 'Italy';
SELECT player_name  FROM Player  WHERE height > 180  ORDER BY player_name  LIMIT 3;
SELECT COUNT(*)  FROM Player  WHERE player_name LIKE 'Aaron%' AND birthday > '1990-12-31';
SELECT      (SELECT jumping FROM Player_Attributes WHERE player_api_id = 6) -      (SELECT jumping FROM Player_Attributes WHERE player_api_id = 23) AS jumping_difference;
SELECT player_api_id  FROM Player_Attributes  WHERE potential = (SELECT MIN(potential) FROM Player_Attributes)  AND preferred_foot = 'right'  LIMIT 3;
SELECT COUNT(*)  FROM Player_Attributes  WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes)  AND preferred_foot = 'left';
SELECT      (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player_Attributes)) AS percentage FROM      Player_Attributes WHERE      strength > 80 AND stamina > 80;
SELECT c.name  FROM League l  JOIN Country c ON l.country_id = c.id  WHERE l.name = 'Ekstraklasa' AND c.name = 'Poland';
SELECT home_team_goal, away_team_goal  FROM Match  WHERE date LIKE '2008-09-24%'  AND league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League');
SELECT pa.sprint_speed, pa.agility, pa.acceleration FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Alexis Blin';
SELECT buildUpPlaySpeedClass  FROM Team_Attributes  WHERE team_fifa_api_id = (SELECT team_fifa_api_id FROM Team WHERE team_long_name = 'KSV Cercle Brugge');
SELECT COUNT(*)  FROM Match  WHERE season = '2015/2016' AND league_id = (SELECT id FROM League WHERE name = 'Serie A' AND country_id = (SELECT id FROM Country WHERE name = 'Italy'));
SELECT MAX(home_team_goal) AS highest_home_score FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Eredivisie' AND country_id = (SELECT id FROM Country WHERE name = 'Netherlands'));
SELECT pa.finishing, pa.curve FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.weight = (SELECT MAX(weight) FROM Player);
SELECT l.name, COUNT(m.id) AS game_count FROM Match m JOIN League l ON m.league_id = l.id WHERE m.season = '2015/2016' GROUP BY l.name ORDER BY game_count DESC LIMIT 1;
SELECT t.team_long_name FROM Match m JOIN Team t ON m.away_team_api_id = t.team_api_id WHERE m.away_team_goal = (SELECT MAX(away_team_goal) FROM Match)
SELECT player_name  FROM Player  JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id  WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player WHERE height IS NOT NULL)) AS percentage FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.height < 180 AND pa.overall_rating > 70;
SELECT      (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '+') AS Inpatient_Male,     (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '-') AS Outpatient_Male,     (SELECT          (COUNT(ID) WHERE SEX = 'M' AND Admission = '+') -          (COUNT(ID) WHERE SEX = 'M' AND Admission = '-')       FROM Patient) AS Male_Deviation FROM Patient;
SELECT      (COUNT(ID) * 100.0 / (SELECT COUNT(ID) FROM Patient WHERE SEX = 'F')) AS FemalePercentage FROM      Patient WHERE      YEAR(Birthday) > 1930 AND SEX = 'F';
SELECT      (COUNT(CASE WHEN Admission = '+' THEN 1 END) * 100.0 / COUNT(*)) AS inpatient_percentage FROM      Patient WHERE      Birthday BETWEEN '1930-01-01' AND '1940-12-31';
SELECT      DIVIDE(         COUNT(ID) WHERE Diagnosis = 'SLE' AND Admission = '+',          COUNT(ID) WHERE Diagnosis = 'SLE' AND Admission = '-'     ) AS ratio FROM Patient WHERE Diagnosis = 'SLE';
SELECT p.Diagnosis, l.Date  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE p.ID = '30609';
SELECT Patient.SEX, Patient.Birthday, Examination.Examination_Date, Examination.Symptoms FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = '163109';
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH > 500;
SELECT Patient.ID,         SUBTRACT(YEAR(CURRENT_TIMESTAMP), YEAR(Patient.Birthday)) AS age FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.RVVT = '+';
SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 2;
SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.First_Date, Patient.Admission, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE YEAR(Patient.Birthday) = '1937' AND Laboratory.T-CHO >= '250';
SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALB < 3.5;
SELECT      (COUNT(CASE WHEN P.SEX = 'F' AND L.TP < 6.0 OR L.TP > 8.5 THEN 1 END) * 100.0) / COUNT(P.ID) AS Percentage_Female_Abnormal_TP FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      P.SEX = 'F';
SELECT AVG(Examination.aCL_IgG) AS average_aCL_IgG FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Admission = '+'  AND (YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday)) >= 50;
SELECT COUNT(*)  FROM Patient  WHERE SEX = 'F' AND YEAR(Description) = 1997 AND Admission = '-';
SELECT MIN(YEAR(`First Date`) - YEAR(Birthday)) AS Youngest_Age FROM Patient;
SELECT COUNT(DISTINCT p.ID) AS WomenWithSeriousThrombosis FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.Thrombosis = '1' AND p.SEX = 'F' AND YEAR(e.Examination_Date) = 1997;
SELECT MAX(YEAR(Birthday)) - MIN(YEAR(Birthday)) AS age_gap FROM Patient WHERE ID IN (     SELECT ID     FROM Laboratory     WHERE TG < 200 )
SELECT E.Symptoms, P.Diagnosis FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Birthday = (SELECT MIN(Birthday) FROM Patient);
SELECT DIVIDE(COUNT(L.ID), 12) AS Average_Male_Patients FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.Date BETWEEN '1998-01-01' AND '1998-12-31';
SELECT      MAX(L.Date) AS Lab_Work_Completion_Date,      YEAR(P.First_Date) - YEAR(P.Birthday) AS Age_At_Admission FROM      Patient P JOIN      Laboratory L ON P.ID = L.ID WHERE      P.Diagnosis = 'SJS' GROUP BY      P.ID ORDER BY      P.Birthday ASC LIMIT 1;
SELECT      SUM(CASE WHEN SEX = 'M' AND UA <= 8.0 THEN 1 ELSE 0 END) AS Male_Abnormal,     SUM(CASE WHEN SEX = 'F' AND UA <= 6.5 THEN 1 ELSE 0 END) AS Female_Abnormal,     CASE          WHEN SUM(CASE WHEN SEX = 'F' AND UA <= 6.5 THEN 1 ELSE 0 END) = 0 THEN NULL         ELSE SUM(CASE WHEN SEX = 'M' AND UA <= 8.0 THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN SEX = 'F' AND UA <= 6.5 THEN 1 ELSE 0 END)     END AS Male_to_Female_Ratio FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      (SEX = 'M' AND UA <= 8.0) OR (SEX = 'F' AND UA <= 6.5);
SELECT COUNT(DISTINCT p.ID) AS PatientCount FROM Patient p LEFT JOIN Examination e ON p.ID = e.ID WHERE e.ID IS NULL OR (YEAR(e.Examination_Date) - YEAR(p.First_Date)) >= 1;
SELECT COUNT(DISTINCT p.ID) AS UnderagePatientCount FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE YEAR(p.Birthday) > 1975 AND e.Examination_Date BETWEEN '1990-01-01' AND '1993-12-31';
SELECT COUNT(*)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE p.SEX = 'M' AND l.T-BIL > 2.0;
SELECT Diagnosis, COUNT(Diagnosis) AS DiagnosisCount FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY DiagnosisCount DESC LIMIT 1;
SELECT AVG(YEAR('1991-10-01') - YEAR(P.Birthday)) AS Average_Age FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.Date BETWEEN '1991-10-01' AND '1991-10-31';
SELECT      SUBTRACT(YEAR(e.`Examination Date`), YEAR(p.Birthday)) AS Age,     p.Diagnosis FROM      Examination e JOIN      Patient p ON e.ID = p.ID JOIN      Laboratory l ON e.ID = l.ID WHERE      l.HGB = (SELECT MAX(HGB) FROM Laboratory)
SELECT ANA  FROM Examination  WHERE ID = 3605340 AND Examination_Date = '1996-12-02';
SELECT T-CHO < 250 AS Is_Normal FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04';
SELECT SEX  FROM Patient  WHERE Diagnosis = 'AORTITIS'  ORDER BY First Date  LIMIT 1;
SELECT e.aCL_IgM FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Diagnosis = 'SLE'  AND p.First_Date = '1994-02-19'  AND e.Examination_Date = '1993-11-12';
SELECT SEX  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE GPT = '9' AND Date = '1992-06-12';
SELECT SUBTRACT('1991', YEAR(P.Birthday)) AS Age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.UA = '8.4' AND L.Date = '1991-10-21';
SELECT COUNT(Laboratory.ID) AS Total_Laboratory_Tests FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.First_Date = '1991-06-13'    AND Patient.Diagnosis = 'SJS'    AND YEAR(Laboratory.Date) = 1995;
SELECT p.Diagnosis  FROM Patient p  WHERE p.ID IN (     SELECT e.ID      FROM Examination e      WHERE e.Diagnosis = 'SLE' AND e.Examination_Date = '1997-01-27' )  AND p.First_Date = (     SELECT MIN(First_Date)      FROM Patient      WHERE ID = p.ID );
SELECT E.Symptoms  FROM Examination E  JOIN Patient P ON E.ID = P.ID  WHERE P.Birthday = '1959-03-01' AND E.Examination_Date = '1993-09-27';
SELECT      (SUM(CASE WHEN Date LIKE '1981-11-%' THEN T-CHO ELSE 0 END) -       SUM(CASE WHEN Date LIKE '1981-12-%' THEN T-CHO ELSE 0 END)) AS Decrease_Rate FROM      Laboratory  WHERE      ID IN (SELECT ID FROM Patient WHERE Birthday = '1959-02-18');
SELECT DISTINCT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Diagnosis = 'Behcet' AND Examination.Examination_Date >= '1997-01-01' AND Examination.Examination_Date <= '1997-12-31';
SELECT DISTINCT Patient.ID FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.Examination_Date BETWEEN '1987-07-06' AND '1996-01-31' AND Laboratory.GPT > 30 AND Laboratory.ALB < 4;
SELECT ID  FROM Patient  WHERE SEX = 'F' AND YEAR(Birthday) = 1964 AND Admission = '+';
SELECT COUNT(*)  FROM Examination  WHERE Thrombosis = 2  AND ANA = 'S'  AND aCL_IgM > (SELECT AVG(aCL_IgM) * 1.2 FROM Examination);
SELECT      (COUNT(CASE WHEN UA <= 6.5 THEN 1 END) * 100.0 / COUNT(CASE WHEN U_PRO > 0 AND U_PRO < 30 THEN 1 END)) AS percentage FROM      Laboratory WHERE      U_PRO > 0 AND U_PRO < 30;
SELECT      (SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS Percentage FROM      Patient WHERE      SEX = 'M' AND      YEAR(`First Date`) = 1981;
SELECT DISTINCT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.Date LIKE '1991-10%' AND Laboratory.T-BIL < 2.0;
SELECT COUNT(*)  FROM Patient  WHERE SEX = 'F'  AND Birthday BETWEEN '1980-01-01' AND '1989-12-31'  AND ID NOT IN (SELECT ID FROM Examination WHERE [ANA Pattern] = 'p');
SELECT P.SEX  FROM Patient P  JOIN Examination E ON P.ID = E.ID  JOIN Laboratory L ON P.ID = L.ID  WHERE E.Diagnosis = 'PSS'  AND L.CRP > 2  AND L.CRE = 1  AND L.LDH = 123;
SELECT AVG(LAB.ALB) AS Average_Albumin_Level FROM Patient PAT JOIN Laboratory LAB ON PAT.ID = LAB.ID WHERE PAT.SEX = 'F' AND LAB.PLT > 400 AND PAT.Diagnosis = 'SLE';
SELECT Symptoms, COUNT(*) as Count FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY Count DESC LIMIT 1;
SELECT MIN(First Date) AS First_Documented_Date, Diagnosis  FROM Patient  WHERE ID = 48473;
SELECT COUNT(*)  FROM Patient  WHERE SEX = 'F' AND Diagnosis = 'APS';
SELECT COUNT(DISTINCT Patient.ID)  FROM Laboratory  JOIN Patient ON Laboratory.ID = Patient.ID  WHERE YEAR(Date) = 1997  AND (TP < 6 OR TP > 8.5);
SELECT      (SUM(CASE WHEN P.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) * 100.0) /      NULLIF(SUM(CASE WHEN E.Symptoms LIKE '%thrombocytopenia%' THEN 1 ELSE 0 END), 0) AS Proportion FROM      Patient P JOIN      Examination E ON P.ID = E.ID WHERE      E.Symptoms LIKE '%thrombocytopenia%';
SELECT      (COUNT(CASE WHEN SEX = 'F' THEN 1 END) * 100.0) / COUNT(*) AS percentage_women FROM      Patient WHERE      YEAR(Birthday) = 1980 AND Diagnosis = 'RA';
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE p.SEX = 'M'    AND e.Examination_Date BETWEEN '1995-01-01' AND '1997-12-31'    AND p.Diagnosis = 'BEHCET'    AND p.Admission = '-';
SELECT COUNT(*)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE p.SEX = 'F' AND l.WBC < 3.5;
SELECT DATEDIFF(E.`Examination Date`, P.`First Date`) AS Days_Between FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.ID = 821298 ORDER BY E.`Examination Date` ASC LIMIT 1;
SELECT      CASE          WHEN (SEX = 'M' AND UA <= 8.0) OR (SEX = 'F' AND UA <= 6.5) THEN 'No'          ELSE 'Yes'      END AS Is_UA_Normal FROM      Patient  JOIN      Laboratory ON Patient.ID = Laboratory.ID  WHERE      Patient.ID = 57266;
SELECT Date  FROM Laboratory  WHERE ID = '48473' AND GOT >= 60;
SELECT Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GOT < 60 AND YEAR(Laboratory.Date) = 1994;
SELECT DISTINCT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.GPT >= 60;
SELECT DISTINCT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GPT > 60 ORDER BY Patient.Birthday ASC;
SELECT AVG(LDH) AS average_LDH FROM Laboratory WHERE LDH < 500;
SELECT Patient.ID,         SUBTRACT(YEAR(CURRENT_TIMESTAMP), YEAR(Patient.Birthday)) AS age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH BETWEEN 600 AND 800;
SELECT Patient.ID, Patient.Admission FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALP < 300;
SELECT p.ID,         CASE             WHEN l.ALP < 300 THEN 'Within normal range'             ELSE 'Not within normal range'         END AS ALP_Status FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = '1982-04-01';
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0;
SELECT P.ID, (L.TP - 8.5) AS TP_Deviation FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.TP > 8.5;
SELECT P.* FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'M' AND (L.ALB <= 3.5 OR L.ALB >= 5.5) ORDER BY P.Birthday DESC;
SELECT P.ID,         CASE             WHEN L.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range'             ELSE 'Outside Normal Range'         END AS Albumin_Status FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE YEAR(P.Birthday) = 1982;
SELECT      (COUNT(CASE WHEN UA > 6.5 THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      p.SEX = 'F';
SELECT AVG(L.UA) AS Average_UA FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5) AND L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = P.ID);
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UN = 29;
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'RA' AND Laboratory.UN < 30;
SELECT COUNT(*)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE p.SEX = 'M' AND l.CRE >= 1.5;
SELECT      (SUM(CASE WHEN SEX = 'M' AND CRE >= 1.5 THEN 1 ELSE 0 END) >       SUM(CASE WHEN SEX = 'F' AND CRE >= 1.5 THEN 1 ELSE 0 END)) AS result FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID;
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.T-BIL = (SELECT MAX(T-BIL) FROM Laboratory);
SELECT Patient.SEX, COUNT(Patient.ID) AS TotalPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.T-BIL >= 2.0 GROUP BY Patient.SEX;
SELECT p.ID, l.T-CHO FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = (SELECT MIN(Birthday) FROM Patient) AND l.T-CHO = (SELECT MAX(T-CHO) FROM Laboratory)
SELECT AVG(YEAR(CURDATE()) - YEAR(Birthday)) AS average_age FROM Patient WHERE SEX = 'M' AND ID IN (     SELECT ID     FROM Laboratory     WHERE T-CHO >= 250 );
SELECT Patient.ID, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TG > 300;
SELECT COUNT(*)  FROM Patient  WHERE ID IN (     SELECT ID      FROM Laboratory      WHERE TG >= 200 )  AND (YEAR(CURRENT_TIMESTAMP) - YEAR(Birthday)) > 50;
SELECT DISTINCT ID  FROM Laboratory  WHERE Admission = '-' AND CPK < 250;
SELECT COUNT(*)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE YEAR(p.Birthday) BETWEEN 1936 AND 1956  AND p.SEX = 'M'  AND l.CPK >= 250;
SELECT P.ID, P.SEX, YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday) AS Age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU >= 180 AND L.T_CHO < 250;
SELECT Patient.ID, Laboratory.GLU FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE YEAR(Patient.First Date) = 1991 AND Laboratory.GLU < 180;
SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.WBC <= 3.5 OR L.WBC >= 9.0 GROUP BY P.SEX, P.ID, P.Birthday ORDER BY YEAR(CURDATE()) - YEAR(P.Birthday) ASC;
SELECT Patient.ID,         SUBTRACT(YEAR(CURRENT_TIMESTAMP), YEAR(Patient.Birthday)) AS Age,         Patient.Diagnosis  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Laboratory.RBC < 3.5;
SELECT P.ID, P.ADMISSION FROM Patient P WHERE P.SEX = 'F' AND (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) >= 50 AND (P.ID IN (SELECT ID FROM Laboratory WHERE RBC <= 3.5 OR RBC >= 6.0));
SELECT DISTINCT Patient.ID, Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Admission = '-' AND Examination.HGB < 10;
SELECT ID, SEX  FROM Patient  WHERE Diagnosis = 'SLE'  AND ID IN (     SELECT ID      FROM Laboratory      WHERE HGB > 10 AND HGB < 17 )  ORDER BY Birthday ASC  LIMIT 1;
SELECT p.ID, SUBTRACT(YEAR(CURRENT_TIMESTAMP), YEAR(p.Birthday)) AS age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.HCT >= 52 GROUP BY p.ID HAVING COUNT(l.ID) > 2;
SELECT AVG(HCT) AS Average_HCT FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;
SELECT      SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) AS Lower_Than_Normal,     SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS Higher_Than_Normal FROM      Laboratory WHERE      PLT < 100 OR PLT > 400;
SELECT p.ID, p.SEX, p.Birthday, p.Description, p.First_Date, p.Admission, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.Date LIKE '1984%' AND (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) < 50 AND l.PLT BETWEEN 100 AND 400;
SELECT      (SUM(CASE WHEN SEX = 'F' AND PT >= 14 THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(PT >= 14), 0)) * 100 AS female_abnormal_pt_percentage FROM      Patient p JOIN      Laboratory l ON p.ID = l.ID WHERE      SUBTRACT(YEAR(CURRENT_TIMESTAMP), YEAR(Birthday)) > 55;
SELECT DISTINCT Patient.ID, Patient.Description FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE YEAR(Patient.`First Date`) > 1992 AND Laboratory.PT < 14;
SELECT COUNT(*)  FROM Examination e  JOIN Laboratory l ON e.ID = l.ID  WHERE e.Examination_Date > '1997-01-01' AND l.APTT < 45;
SELECT COUNT(DISTINCT p.ID) AS MildThrombosisCount FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.APTT > 45 AND e.Thrombosis = 3;
SELECT COUNT(DISTINCT p.ID) AS AbnormalFibrinogenCount FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M'   AND l.WBC BETWEEN 3.5 AND 9.0   AND (l.FG <= 150 OR l.FG >= 450);
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE p.Birthday > '1980-01-01' AND (l.FG < 150 OR l.FG > 450);
SELECT DISTINCT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.U-PRO >= 30;
SELECT ID  FROM Patient  WHERE Diagnosis = 'SLE'  AND ID IN (     SELECT ID      FROM Laboratory      WHERE U-PRO > 0 AND U-PRO < 30 );
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Laboratory.IGG < 900 AND Examination.Symptoms = 'abortion';
SELECT COUNT(*)  FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.IGG BETWEEN 900 AND 2000 AND e.Symptoms IS NOT NULL;
SELECT p.Diagnosis FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.IGA BETWEEN 80 AND 500 ORDER BY l.IGA DESC LIMIT 1;
SELECT COUNT(*)  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Laboratory.IGA BETWEEN 80 AND 500  AND YEAR(Patient.`First Date`) >= 1990;
SELECT Diagnosis, COUNT(Diagnosis) AS DiagnosisCount FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.aCL_IgM NOT BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY DiagnosisCount DESC LIMIT 1;
SELECT COUNT(*)  FROM Patient  WHERE Description IS NULL  AND ID NOT IN (     SELECT ID      FROM Laboratory      WHERE CRP LIKE '+' OR CRP LIKE '-' OR CRP < 1.0 );
SELECT COUNT(DISTINCT P.ID)  FROM Patient P  JOIN Laboratory L ON P.ID = L.ID  WHERE L.CRP NOT IN ('+-', '-') AND L.CRP >= 1.0  AND (YEAR(CURDATE()) - YEAR(P.Birthday)) < 18;
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE p.RA = '-' AND e.KCT = '+';
SELECT DISTINCT Patient.Diagnosis FROM Patient WHERE YEAR(Patient.Birthday) >= 1995 AND Patient.RA IN ('-', '+-');
SELECT Patient.ID  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Laboratory.RF < 20 AND (YEAR(CURDATE()) - YEAR(Patient.Birthday)) > 60;
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Examination ON Patient.ID = Examination.ID  WHERE Patient.Diagnosis = 'normal RF' AND Examination.RF < 20 AND Examination.Thrombosis = '0';
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  JOIN Laboratory l ON p.ID = l.ID  WHERE l.C3 > 35 AND e.ANA_Pattern = 'P';
SELECT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.HCT < 29 OR e.HCT > 52 ORDER BY e.aCL_IgA DESC LIMIT 1;
SELECT COUNT(DISTINCT p.ID) AS Normal_C4_Patients FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.Thrombosis = 'Yes' AND l.C4 > 10;
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE (Laboratory.RNP = '-' OR Laboratory.RNP = '+-')  AND Patient.Admission = '+';
SELECT Birthday  FROM Patient  WHERE ID IN (     SELECT ID      FROM Laboratory      WHERE RNP NOT IN ('-', '+-') )  ORDER BY Birthday DESC  LIMIT 1;
SELECT COUNT(*)  FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.SM IN ('-', '0') AND e.Thrombosis = '1';
SELECT ID  FROM Patient  WHERE ID IN (SELECT ID FROM Laboratory WHERE SM NOT IN ('-', '+-'))  ORDER BY Birthday DESC  LIMIT 3;
SELECT DISTINCT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.`Examination Date` >= '1997-01-01' AND Laboratory.SC170 IN ('-', '+-');
SELECT COUNT(DISTINCT p.ID) AS Male_Vertigo_Patients FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.SC170 IN ('-', '+-') AND p.SEX = 'M' AND p.Symptoms = 'vertigo';
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Laboratory.SSA IN ('-', '+-')  AND YEAR(Patient.`First Date`) < 1990;
SELECT ID  FROM Patient  WHERE ID IN (     SELECT ID      FROM Laboratory      WHERE SSA NOT IN ('-', '+-') )  ORDER BY `First Date`  LIMIT 1;
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  WHERE e.SSB IN ('-', '+-') AND p.Diagnosis = 'SLE';
SELECT COUNT(DISTINCT p.ID) AS DistinctPatientsWithSymptoms FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.SSB IN ('-', '+-') AND e.Symptoms IS NOT NULL;
SELECT COUNT(*)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE l.CENTROMEA IN ('-', '+-')  AND l.SSB IN ('-', '+-')  AND p.SEX = 'M';
SELECT DISTINCT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.DNA >= 8;
SELECT COUNT(DISTINCT P.ID) AS UniquePatients FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.DNA < 8 AND P.Description IS NULL;
SELECT COUNT(DISTINCT Patient.ID)  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Laboratory.DNA-II >= 8 AND Patient.Admission = '+';
SELECT      (COUNT(CASE WHEN L.GOT >= 60 AND P.Diagnosis = 'SLE' THEN 1 END) * 1.0 / COUNT(CASE WHEN L.GOT >= 60 THEN 1 END)) * 100 AS percentage FROM      Laboratory L JOIN      Patient P ON L.ID = P.ID;
SELECT COUNT(*)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE p.SEX = 'M' AND l.GOT < 60;
SELECT MAX(P.Birthday) AS Youngest_Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GOT >= 60;
SELECT p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GPT < 60 ORDER BY l.GPT DESC LIMIT 3;
SELECT COUNT(*)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE l.GOT < 60 AND p.SEX = 'M';
SELECT MIN(P.First_Date) AS First_Recorded_Date FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.LDH < 500 AND L.LDH = (SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500);
SELECT MAX(L.Date) AS Latest_Medical_Data FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.First_Date = (SELECT MAX(First_Date) FROM Patient) AND L.LDH >= 500;
SELECT COUNT(*)  FROM Laboratory l  JOIN Patient p ON l.ID = p.ID  WHERE l.ALP >= 300 AND p.Admission = '+';
SELECT COUNT(*)  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Patient.Admission = '-' AND Laboratory.ALP < 300;
SELECT DISTINCT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0;
SELECT COUNT(*)  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Patient.Diagnosis = 'SJS'  AND Laboratory.TP > 6.0  AND Laboratory.TP < 8.5;
SELECT e.Examination_Date FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.ALB = (SELECT MAX(ALB) FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5);
SELECT COUNT(*)  FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M'  AND l.ALB > 3.5 AND l.ALB < 5.5  AND l.TP BETWEEN 6.0 AND 8.5;
SELECT aCL_IgG, aCL_IgM, aCL_IgA FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'F' AND l.UA <= 6.50 ORDER BY l.UA DESC LIMIT 1;
SELECT MAX(ANA) AS Highest_ANA FROM Examination e JOIN Patient p ON e.ID = p.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.CRE < 1.5;
SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID WHERE l.CRE < 1.5 GROUP BY p.ID HAVING e.aCL_IgA = (SELECT MAX(e2.aCL_IgA) FROM Examination e2 WHERE e2.ID = p.ID);
SELECT COUNT(DISTINCT p.ID)  FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l."T-BIL" >= 2.0 AND e."ANA Pattern" LIKE '%P%';
SELECT ANA  FROM Examination  WHERE ID = (SELECT ID              FROM Laboratory              WHERE T-BIL = (SELECT MAX(T-BIL)                             FROM Laboratory                             WHERE T-BIL < 2.0));
SELECT COUNT(*)  FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.T-CHO >= 250 AND e.KCT = '-';
SELECT COUNT(DISTINCT p.ID) AS PatientCount FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.T-CHO < 250 AND e.ANA_Pattern = 'P';
SELECT COUNT(*)  FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.TG < 200 AND e.Symptoms IS NOT NULL;
SELECT p.Diagnosis FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.TG < 200 ORDER BY l.TG DESC LIMIT 1;
SELECT DISTINCT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Thrombosis = 0 AND Laboratory.CPK < 250;
SELECT COUNT(DISTINCT p.ID)  FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE l.CPK < 250  AND (e.KCT = '+' OR e.RVVT = '+' OR e.LAC = '+');
SELECT MIN(Birthday) AS Oldest_Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE GLU > 180;
SELECT COUNT(*)  FROM Patient p JOIN Laboratory l ON p.ID = l.ID JOIN Examination e ON p.ID = e.ID WHERE l.GLU < 180 AND e.Thrombosis = 0;
SELECT COUNT(*)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE p.Admission = '+' AND l.WBC BETWEEN 3.5 AND 9.0;
SELECT COUNT(*)  FROM Patient p  JOIN Laboratory l ON p.ID = l.ID  WHERE p.Diagnosis = 'SLE' AND l.WBC BETWEEN 3.5 AND 9.0;
SELECT DISTINCT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE (Laboratory.RBC <= 3.5 OR Laboratory.RBC >= 6.0) AND Patient.Admission = '-';
SELECT COUNT(*)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  JOIN Laboratory l ON p.ID = l.ID  WHERE l.PLT > 100 AND l.PLT < 400 AND p.Diagnosis IS NOT NULL;
SELECT Laboratory.PLT  FROM Patient  JOIN Laboratory ON Patient.ID = Laboratory.ID  WHERE Laboratory.PLT > 100 AND Laboratory.PLT < 400  AND Patient.Diagnosis = 'MCTD';
SELECT AVG(PT) AS Average_Prothrombin_Time FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.PT < 14;
SELECT COUNT(DISTINCT p.ID)  FROM Patient p  JOIN Examination e ON p.ID = e.ID  JOIN Laboratory l ON p.ID = l.ID  WHERE e.Thrombosis IN (1, 2) AND l.PT < 14;
SELECT major.major_name  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';
SELECT COUNT(*)  FROM member m JOIN major j ON m.link_to_major = j.major_id WHERE j.college = 'Engineering';
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name FROM member m JOIN major maj ON m.link_to_major = maj.major_id WHERE maj.department = 'Art and Design';
SELECT COUNT(DISTINCT a.link_to_member) AS student_count FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer';
SELECT m.phone  FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer';
SELECT COUNT(*)  FROM member  JOIN attendance ON member.member_id = attendance.link_to_member  JOIN event ON attendance.link_to_event = event.event_id  WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium';
SELECT e.event_name, COUNT(a.link_to_event) AS attendance FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id ORDER BY attendance DESC LIMIT 1;
SELECT major.college  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE member.position = 'Vice President';
SELECT e.event_name  FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean';
SELECT COUNT(e.event_id) AS events_attended FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison' AND YEAR(e.event_date) = 2019;
SELECT COUNT(DISTINCT e.event_id) AS meeting_count FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id HAVING COUNT(a.link_to_member) > 10 AND e.type = 'Meeting';
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id, e.event_name HAVING COUNT(a.link_to_member) > 20;
SELECT DIVIDE(COUNT(event_id), COUNT(DISTINCT event_name)) AS average_attendance FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;
SELECT expense_description, MAX(cost) AS max_cost FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE link_to_event IS NOT NULL) GROUP BY expense_description ORDER BY max_cost DESC LIMIT 1;
SELECT COUNT(*)  FROM member  WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Environmental Engineering');
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud';
SELECT m.last_name  FROM member m  JOIN major j ON m.link_to_major = j.major_id  WHERE j.major_name = 'Law and Constitutional Studies';
SELECT z.county  FROM member m  JOIN zip_code z ON m.zip = z.zip_code  WHERE m.first_name = 'Sherri' AND m.last_name = 'Ramsey';
SELECT college  FROM major  JOIN member ON major.major_id = member.link_to_major  WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt';
SELECT SUM(i.amount) AS total_funds_received FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.position = 'Vice President';
SELECT SUM(b.spent) AS total_spent_on_food FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Food' AND e.event_name = 'September Meeting';
SELECT z.city, z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.position = 'President';
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM member WHERE zip IN (SELECT zip_code FROM zip_code WHERE state = 'IL');
SELECT SUM(e.cost) AS total_spent FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE b.category = 'Advertisement' AND ev.event_name = 'September Meeting';
SELECT m.major_id, ma.department FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.first_name IN ('Pierce', 'Guidi');
SELECT SUM(amount) AS total_budgeted_amount  FROM budget  WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'October Speaker');
SELECT e.expense_id, e.expense_description, e.approved FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08';
SELECT AVG(e.cost) AS average_cost FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.first_name = 'Elijah' AND m.last_name = 'Allen' AND MONTH(e.expense_date) IN (9, 10;
SELECT      SUM(CASE WHEN YEAR(e.event_date) = 2019 THEN b.spent ELSE 0 END) -      SUM(CASE WHEN YEAR(e.event_date) = 2020 THEN b.spent ELSE 0 END) AS amount_difference FROM      event e JOIN      budget b ON e.event_id = b.link_to_event WHERE      YEAR(e.event_date) IN (2019, 2020);
SELECT location FROM event WHERE event_name = 'Spring Budget Review';
SELECT cost  FROM expense  WHERE expense_description = 'Posters'  AND expense_date = '2019-09-04';
SELECT remaining  FROM budget  WHERE amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food');
SELECT notes  FROM income  WHERE source = 'Fundraising' AND date_received = '2019-09-14';
SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';
SELECT z.county  FROM member m  JOIN zip_code z ON m.zip = z.zip_code  WHERE m.first_name = 'Adela' AND m.last_name = 'O\'Gallagher';
SELECT COUNT(*)  FROM budget  WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'November Meeting')  AND remaining < 0;
SELECT SUM(amount) AS total_budget_amount FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'September Speaker');
SELECT e.status  FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE ex.expense_description = 'Post Cards, Posters'  AND ex.expense_date = '2019-08-20';
SELECT major.major_name  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason';
SELECT COUNT(*)  FROM member  WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Human Development and Family Studies')  AND t_shirt_size = 'Large';
SELECT z.type  FROM member m  JOIN zip_code z ON m.zip = z.zip_code  WHERE m.first_name = 'Christof' AND m.last_name = 'Nielson';
SELECT major.major_name  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE member.position = 'Vice President';
SELECT z.state  FROM member m  JOIN zip_code z ON m.zip = z.zip_code  WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';
SELECT m.major_id, maj.department FROM member m JOIN major maj ON m.link_to_major = maj.major_id WHERE m.position = 'President';
SELECT date_received  FROM income  WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Connor' AND last_name = 'Hilton')  AND source = 'Dues';
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.source = 'Dues' ORDER BY i.date_received ASC LIMIT 1;
SELECT      (SELECT SUM(amount)       FROM budget b       JOIN event e ON b.link_to_event = e.event_id       WHERE b.category = 'Advertisement' AND e.event_name = 'Yearly Kickoff') /      (SELECT SUM(amount)       FROM budget b       JOIN event e ON b.link_to_event = e.event_id       WHERE b.category = 'Advertisement' AND e.event_name = 'October Meeting') AS budget_ratio;
SELECT (SUM(b.amount) / (SELECT SUM(b2.amount) FROM budget b2                           JOIN event e ON b2.link_to_event = e.event_id                           WHERE e.event_name = 'November Speaker') * 100) AS parking_percentage FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Parking' AND e.event_name = 'November Speaker';
SELECT SUM(cost) AS total_cost_of_pizzas FROM expense WHERE expense_description = 'Pizza';
SELECT COUNT(DISTINCT city)  FROM zip_code  WHERE county = 'Orange County' AND state = 'Virginia';
SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT z.city, z.county, z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Amy' AND m.last_name = 'Firth';
SELECT e.expense_description FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.remaining = (SELECT MIN(remaining) FROM budget);
SELECT m.first_name, m.last_name, m.email FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';
SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY COUNT(member.member_id) DESC LIMIT 1;
SELECT major.major_name  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE member.phone = '809-555-3360';
SELECT e.event_name  FROM event e  JOIN budget b ON e.event_id = b.link_to_event  ORDER BY b.amount DESC  LIMIT 1;
SELECT e.expense_id, e.expense_description, e.expense_date, e.cost FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position = 'Vice President';
SELECT COUNT(DISTINCT a.link_to_member) AS member_count FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer';
SELECT i.date_received  FROM income i  JOIN member m ON i.link_to_member = m.member_id  WHERE m.first_name = 'Casey' AND m.last_name = 'Mason';
SELECT COUNT(*)  FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.state = 'MD';
SELECT COUNT(a.link_to_event) AS event_count FROM attendance a JOIN member m ON a.link_to_member = m.member_id WHERE m.phone = '954-555-6240';
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name FROM member m JOIN major maj ON m.link_to_major = maj.major_id WHERE maj.department = 'School of Applied Sciences, Technology and Education';
SELECT event.event_name, MAX(budget.spent / budget.amount) AS spend_to_budget_ratio FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event.status = 'Closed' GROUP BY event.event_name ORDER BY spend_to_budget_ratio DESC LIMIT 1;
SELECT COUNT(*) AS president_count FROM member WHERE position = 'President';
SELECT MAX(spent) AS highest_budget_spend FROM budget;
SELECT COUNT(*)  FROM event  WHERE type = 'Meeting' AND YEAR(event_date) = 2020;
SELECT SUM(spent) AS total_amount_spent_for_food FROM budget WHERE category = 'Food';
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member GROUP BY m.member_id HAVING COUNT(a.link_to_event) > 7;
SELECT m.first_name, m.last_name, m.email FROM member m JOIN major j ON m.link_to_major = j.major_id JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE j.major_name = 'Interior Design' AND e.event_name = 'Community Theater';
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Georgetown' AND z.state = 'SC';
SELECT SUM(income.amount) AS total_income FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.amount > 40;
SELECT SUM(e.cost) AS total_expense FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'Yearly Kickoff';
SELECT m.first_name, m.last_name FROM member m JOIN budget b ON m.member_id = b.link_to_member JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'Yearly Kickoff';
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, i.source FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.amount = (SELECT MAX(amount) FROM income);
SELECT e.event_name  FROM event e  JOIN budget b ON e.event_id = b.link_to_event  WHERE b.spent = (SELECT MIN(spent) FROM budget);
SELECT      (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN ex.cost ELSE 0 END) / SUM(ex.cost)) * 100 AS percentage_cost FROM      event e JOIN      attendance a ON e.event_id = a.link_to_event JOIN      expense ex ON a.link_to_member = ex.link_to_member GROUP BY      e.event_name;
SELECT      DIVIDE(SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END),             SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END)) AS ratio FROM      member  JOIN      major ON member.link_to_major = major.major_id;
SELECT source, SUM(amount) AS total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY total_amount DESC LIMIT 1;
SELECT CONCAT(first_name, ' ', last_name) AS full_name, email  FROM member  WHERE position = 'Secretary';
SELECT COUNT(*)  FROM member  WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Physics Teaching');
SELECT COUNT(a.link_to_member) AS member_count FROM attendance a JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Community Theater' AND YEAR(e.event_date) = 2019;
SELECT COUNT(a.link_to_event) AS event_count, m.link_to_major FROM member m JOIN attendance a ON m.member_id = a.link_to_member WHERE m.first_name = 'Luisa' AND m.last_name = 'Guidi' GROUP BY m.link_to_major;
SELECT DIVIDE(SUM(b.spent), COUNT(b.spent)) AS average_spent_on_food FROM budget b WHERE b.category = 'Food' AND b.event_status = 'Closed';
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Advertisement' ORDER BY b.spent DESC LIMIT 1;
SELECT a.link_to_event  FROM attendance a  JOIN event e ON a.link_to_event = e.event_id  JOIN member m ON a.link_to_member = m.member_id  WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean' AND e.event_name = 'Women''s Soccer';
SELECT      (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) * 100.0) / COUNT(event_id) AS percentage_share FROM      event WHERE      event_date BETWEEN '2019-01-01' AND '2019-12-31';
SELECT e.event_name, ex.cost  FROM event e  JOIN budget b ON e.event_id = b.link_to_event  JOIN expense ex ON b.budget_id = ex.link_to_budget  WHERE e.event_name = 'September Speaker' AND ex.expense_description = 'Posters';
SELECT t_shirt_size, COUNT(t_shirt_size) AS size_count FROM member GROUP BY t_shirt_size ORDER BY size_count DESC LIMIT 1;
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' AND b.remaining < 0 ORDER BY b.remaining ASC LIMIT 1;
SELECT e.expense_description, SUM(e.cost) AS total_value FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND e.approved = 1 GROUP BY e.expense_description;
SELECT category, amount  FROM budget  WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'April Speaker')  ORDER BY amount ASC;
SELECT MAX(amount) AS highest_budgeted_amount FROM budget WHERE category = 'Food';
SELECT * FROM budget WHERE category = 'Advertising' ORDER BY amount DESC LIMIT 3;
SELECT SUM(cost) AS total_cost_spent_for_parking FROM expense WHERE expense_description = 'Parking';
SELECT SUM(cost) AS total_expense  FROM expense  WHERE expense_date = '2019-08-20';
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, SUM(e.cost) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.member_id;
SELECT expense_description  FROM expense  WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Sacha' AND last_name = 'Harrison');
SELECT DISTINCT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.t_shirt_size = 'X-Large';
SELECT m.zip FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost < 50;
SELECT major.major_name  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen';
SELECT m.position  FROM member m  JOIN major j ON m.link_to_major = j.major_id  WHERE j.major_name = 'Business';
SELECT COUNT(*)  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';
SELECT DISTINCT e.type FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 30;
SELECT DISTINCT type  FROM event  WHERE location = 'MU 215';
SELECT e.type  FROM event e  WHERE e.event_date = '2020-03-24T12:00:00';
SELECT major.major_name  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE member.position = 'Vice President';
SELECT (SUM(CASE WHEN m.position = 'Member' AND maj.major_name = 'Mathematics' THEN 1 ELSE 0 END) * 100.0) / COUNT(m.member_id) AS percentage_mathematics_members FROM member m JOIN major maj ON m.link_to_major = maj.major_id;
SELECT DISTINCT type  FROM event  WHERE location = 'MU 215';
SELECT COUNT(*) FROM income WHERE amount = 50;
SELECT COUNT(*)  FROM member  WHERE position = 'Member' AND t_shirt_size = 'X-Large';
SELECT COUNT(*)  FROM major  WHERE department = 'School of Applied Sciences, Technology and Education'  AND college = 'College of Agriculture and Applied Sciences';
SELECT m.last_name, maj.department, maj.college FROM member m JOIN major maj ON m.link_to_major = maj.major_id WHERE maj.major_name = 'Environmental Engineering';
SELECT b.category FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.location = 'MU 215'    AND e.type = 'Guest Speaker'    AND b.spent = 0;
SELECT z.city, z.state FROM member m JOIN major maj ON m.link_to_major = maj.major_id JOIN zip_code z ON m.zip = z.zip_code WHERE maj.department = 'Electrical and Computer Engineering' AND m.position = 'Member';
SELECT e.event_name  FROM event e  JOIN attendance a ON e.event_id = a.link_to_event  JOIN member m ON a.link_to_member = m.member_id  WHERE e.type = 'Social'  AND m.position = 'Vice President'  AND e.location = '900 E. Washington St.';
SELECT m.last_name, m.position FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE e.expense_description = 'Pizza' AND e.expense_date = '2019-09-10';
SELECT m.last_name  FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE m.position = 'Member' AND e.event_name = 'Women\'s Soccer';
SELECT      (COUNT(CASE WHEN i.amount = 50 THEN 1 END) * 100.0 / COUNT(m.member_id)) AS percentage FROM      member m LEFT JOIN      income i ON m.member_id = i.link_to_member WHERE      m.t_shirt_size = 'Medium' AND m.position = 'Member';
SELECT DISTINCT state FROM zip_code WHERE type = 'PO Box';
SELECT zip_code  FROM zip_code  WHERE type = 'PO Box'  AND county = 'San Juan Municipio'  AND state = 'Puerto Rico';
SELECT event_name  FROM event  WHERE type = 'Game'  AND status = 'Closed'  AND event_date BETWEEN '2019-03-15' AND '2020-03-20';
SELECT DISTINCT a.link_to_event FROM attendance a JOIN expense e ON a.link_to_member = e.link_to_member WHERE e.cost > 50;
SELECT m.member_id, m.first_name, m.last_name, a.link_to_event FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN attendance a ON a.link_to_member = m.member_id WHERE e.approved = 'true'  AND e.expense_date BETWEEN '2019-01-10' AND '2019-11-19';
SELECT major.college  FROM member  JOIN major ON member.link_to_major = major.major_id  WHERE member.first_name = 'Katy' AND member.link_to_major = 'rec1N0upiVLy5esTO';
SELECT m.phone  FROM member m  JOIN major j ON m.link_to_major = j.major_id  WHERE j.major_name = 'Business' AND j.college = 'College of Agriculture and Applied Sciences';
SELECT DISTINCT m.email FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.date_received BETWEEN '2019-09-10' AND '2019-11-19' AND i.amount > 20;
SELECT COUNT(*)  FROM member m  JOIN major j ON m.link_to_major = j.major_id  WHERE j.major_name = 'education' AND j.college = 'College of Education & Human Services';
SELECT (SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(event_id)) AS percentage_over_budget FROM budget;
SELECT event_id, location, status  FROM event  WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';
SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50;
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM member WHERE t_shirt_size = 'X-Large';
SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0 / COUNT(zip_code)) AS percentage_po_boxes FROM zip_code;
SELECT e.event_name, e.location FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 0;
SELECT e.event_name, e.event_date FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE ex.expense_description = 'Pizza' AND ex.cost > 50 AND ex.cost < 100;
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, maj.major_name FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN major maj ON m.link_to_major = maj.major_id WHERE e.cost > 100;
SELECT z.city, z.county FROM event e JOIN income i ON e.event_id = i.link_to_event JOIN zip_code z ON e.location = z.zip_code GROUP BY e.event_id HAVING COUNT(i.income_id) > 40;
SELECT e.link_to_member, SUM(exp.cost) AS total_cost FROM expense exp JOIN attendance a ON exp.link_to_member = a.link_to_member GROUP BY e.link_to_member HAVING COUNT(DISTINCT a.link_to_event) > 1 ORDER BY total_cost DESC LIMIT 1;
SELECT AVG(cost) AS average_amount_paid FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position != 'Member';
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Parking' AND b.spent < (SELECT AVG(spent) FROM budget WHERE category = 'Parking');
SELECT      (SUM(e.cost) / COUNT(ev.event_id)) * 100 AS percentage_of_game_event_cost FROM      event ev JOIN      attendance a ON ev.event_id = a.link_to_event JOIN      expense e ON a.link_to_member = e.link_to_member WHERE      ev.type = 'Game';
SELECT b.budget_id, MAX(e.cost) AS max_cost FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description = 'Water, chips, cookies' GROUP BY b.budget_id ORDER BY max_cost DESC LIMIT 1;
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, SUM(e.cost) AS total_spent FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id ORDER BY total_spent DESC LIMIT 5;
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id HAVING SUM(e.cost) > (SELECT AVG(cost) FROM expense);
SELECT      (SUM(CASE WHEN state = 'Maine' THEN 1 ELSE 0 END) * 100.0 / COUNT(CASE WHEN position = 'Member' THEN 1 END)) -      (SUM(CASE WHEN state = 'Vermont' THEN 1 ELSE 0 END) * 100.0 / COUNT(CASE WHEN position = 'Member' THEN 1 END)) AS percentage_difference FROM member JOIN zip_code ON member.zip = zip_code.zip_code;
SELECT m.first_name, m.last_name, maj.major_name, maj.department FROM member m JOIN major maj ON m.link_to_major = maj.major_id WHERE m.first_name = 'Garrett' AND m.last_name = 'Gerke';
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, e.cost FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE e.expense_description IN ('Water', 'Veggie tray', 'supplies');
SELECT m.last_name, m.phone FROM member m JOIN major j ON m.link_to_major = j.major_id WHERE j.major_name = 'Elementary Education';
SELECT b.category, b.amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'January Speaker';
SELECT e.event_name  FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Food';
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, i.amount FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.date_received = '2019-09-09';
SELECT b.category  FROM expense e  JOIN budget b ON e.link_to_budget = b.budget_id  WHERE e.expense_description = 'Posters';
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, maj.college FROM member m JOIN major maj ON m.link_to_major = maj.major_id WHERE m.position = 'Secretary';
SELECT e.event_name, SUM(b.spent) AS total_spent FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name;
SELECT z.city  FROM member m  JOIN zip_code z ON m.zip = z.zip_code  WHERE m.first_name = 'Garrett' AND m.last_name = 'Girke';
SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, m.position FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Lincolnton' AND z.state = 'North Carolina';
SELECT COUNT(*)  FROM gasstations g  JOIN products p ON g.GasStationID = p.ProductID  WHERE g.Country = 'CZE' AND p.Description = 'Premium gas';
SELECT      (SELECT COUNT(*) FROM customers WHERE Currency = 'EUR') * 1.0 /      (SELECT COUNT(*) FROM customers WHERE Currency = 'CZK') AS ratio
SELECT CustomerID, SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE Date BETWEEN 201201 AND 201212 AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'LAM') GROUP BY CustomerID ORDER BY TotalConsumption ASC LIMIT 1;
SELECT AVG(Consumption) / 12 AS AverageMonthlyConsumption FROM yearmonth WHERE CustomerID IN (     SELECT CustomerID     FROM customers     WHERE Segment = 'SME' ) AND Date BETWEEN 201301 AND 201312;
SELECT c.CustomerID, SUM(t.Amount) AS TotalGas FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE c.Currency = 'CZK' AND t.Date BETWEEN 201101 AND 201112 GROUP BY c.CustomerID ORDER BY TotalGas DESC LIMIT 1;
SELECT COUNT(DISTINCT y.CustomerID)  FROM yearmonth y  JOIN customers c ON y.CustomerID = c.CustomerID  WHERE c.Segment = 'KAM'  AND y.Consumption < 30000  AND y.Date BETWEEN 201201 AND 201212;
SELECT      (SELECT SUM(Consumption)       FROM yearmonth       WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'CZK')       AND Date BETWEEN 201201 AND 201212) -      (SELECT SUM(Consumption)       FROM yearmonth       WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR')       AND Date BETWEEN 201201 AND 201212) AS ConsumptionDifference;
SELECT YEAR(t.Date) AS Year, SUM(t.Amount) AS TotalGasUse FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' GROUP BY YEAR(t.Date) ORDER BY TotalGasUse DESC LIMIT 1;
SELECT Segment, SUM(Consumption) AS TotalConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID GROUP BY Segment ORDER BY TotalConsumption ASC LIMIT 1;
SELECT SUBSTRING(Date, 1, 4) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'CZK' GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1;
SELECT YEAR(Date) AS Year, MONTH(Date) AS Month, SUM(Consumption) AS TotalConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND YEAR(Date) = 2013 GROUP BY Year, Month ORDER BY TotalConsumption DESC LIMIT 1;
WITH AnnualConsumption AS (     SELECT          c.Segment,         SUM(ym.Consumption) AS TotalConsumption,         COUNT(DISTINCT c.CustomerID) AS CustomerCount     FROM          customers c     JOIN          yearmonth ym ON c.CustomerID = ym.CustomerID     WHERE          ym.Date BETWEEN 201301 AND 201312         AND c.Currency = 'CZK'     GROUP BY          c.Segment ), LowestConsumption AS (     SELECT          Segment,         TotalConsumption / CustomerCount AS AnnualAverage     FROM          AnnualConsumption     WHERE          TotalConsumption = (SELECT MIN(TotalConsumption) FROM AnnualConsumption AS ac WHERE ac.Segment = AnnualConsumption.Segment) ) SELECT      (SELECT AnnualAverage FROM LowestConsumption WHERE Segment = 'SME') -      (SELECT AnnualAverage FROM LowestConsumption WHERE Segment = 'LAM') AS SME_LAM_Difference,     (SELECT AnnualAverage FROM LowestConsumption WHERE Segment = 'LAM') -      (SELECT AnnualAverage FROM LowestConsumption WHERE Segment = 'KAM') AS LAM_KAM_Difference,     (SELECT AnnualAverage FROM LowestConsumption WHERE Segment = 'KAM') -      (SELECT AnnualAverage FROM LowestConsumption WHERE Segment = 'SME') AS KAM_SME_Difference
WITH ConsumptionData AS (     SELECT          c.Segment,         SUM(CASE WHEN ym.Date BETWEEN '201201' AND '201212' THEN ym.Consumption ELSE 0 END) AS Consumption_2012,         SUM(CASE WHEN ym.Date BETWEEN '201301' AND '201312' THEN ym.Consumption ELSE 0 END) AS Consumption_2013     FROM          yearmonth ym     JOIN          customers c ON ym.CustomerID = c.CustomerID     WHERE          c.Currency = 'EUR'     GROUP BY          c.Segment ), PercentageChange AS (     SELECT          Segment,         Consumption_2012,         Consumption_2013,         (Consumption_2013 - Consumption_2012) AS Increase,         (CASE              WHEN Consumption_2013 != 0 THEN (Consumption_2013 - Consumption_2012) / Consumption_2013 * 100              ELSE NULL          END) AS Percentage_Increase     FROM          ConsumptionData ) SELECT      Segment,     Percentage_Increase FROM      PercentageChange ORDER BY      Percentage_Increase ASC;
SELECT SUM(Amount) AS TotalConsumption FROM transactions_1k WHERE CustomerID = 6 AND Date BETWEEN '20130801' AND '20131130';
SELECT      (SELECT COUNT(*) FROM gasstations WHERE Country = 'Czech Republic' AND Segment = 'discount') -     (SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia' AND Segment = 'discount') AS More_Discount_Gas_Stations;
SELECT      (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = 201304) -      (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = 201304) AS ConsumptionDifference;
SELECT      (SELECT COUNT(DISTINCT t.CustomerID)       FROM transactions_1k t       JOIN customers c ON t.CustomerID = c.CustomerID       WHERE c.Segment = 'SME' AND c.Currency = 'CZK') -     (SELECT COUNT(DISTINCT t.CustomerID)       FROM transactions_1k t       JOIN customers c ON t.CustomerID = c.CustomerID       WHERE c.Segment = 'SME' AND c.Currency = 'EUR') AS Difference
SELECT c.CustomerID, y.Consumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Segment = 'LAM'    AND c.Currency = 'Euro'    AND y.Date = 201310 ORDER BY y.Consumption DESC LIMIT 1;
SELECT c.CustomerID, SUM(t.Amount) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE c.Segment = 'KAM' GROUP BY c.CustomerID ORDER BY TotalConsumption DESC LIMIT 1;
SELECT SUM(t.Amount) AS TotalConsumption FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Segment = 'KAM' AND ym.Date = 201305;
SELECT      (COUNT(CASE WHEN Consumption > 46.73 THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM      customers c JOIN      yearmonth ym ON c.CustomerID = ym.CustomerID WHERE      c.Segment = 'LAM';
SELECT g.Country, COUNT(*) AS ValueForMoneyGasStations FROM gasstations g WHERE g.Segment = 'value for money' GROUP BY g.Country;
SELECT      (COUNT(CASE WHEN c.Currency = 'EUR' THEN 1 END) * 100.0 / COUNT(*)) AS Percentage_KAM_Euros FROM      customers c WHERE      c.Segment = 'KAM';
SELECT      (COUNT(DISTINCT y.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM yearmonth WHERE Date = '201202')) AS Percentage FROM      yearmonth y WHERE      y.Date = '201202' AND y.Consumption > 528.3;
SELECT (COUNT(CASE WHEN Segment = 'premium' THEN 1 END) * 100.0 / COUNT(*)) AS PremiumPercentage FROM gasstations WHERE Country = 'Slovakia';
SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1;
SELECT c.Segment, SUM(ym.Consumption) AS TotalConsumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE ym.Date = '201309' GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1;
SELECT c.CustomerID, SUM(ym.Consumption) AS TotalConsumption FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Segment = 'SME' AND ym.Date = '201206' GROUP BY c.CustomerID ORDER BY TotalConsumption ASC LIMIT 1;
SELECT MAX(Consumption) AS HighestMonthlyConsumption FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012';
SELECT MAX(MonthlyConsumption) AS BiggestMonthlyConsumption FROM (     SELECT SUM(Consumption) / 12 AS MonthlyConsumption     FROM yearmonth ym     JOIN customers c ON ym.CustomerID = c.CustomerID     WHERE c.Currency = 'euro'     GROUP BY ym.CustomerID ) AS MonthlyConsumptions;
SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE t.Date LIKE '201309%';
SELECT DISTINCT g.Country FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.Date LIKE '201306%';
SELECT DISTINCT gs.ChainID FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'euro';
SELECT p.Description FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID JOIN products p ON t.ProductID = p.ProductID WHERE c.Currency = 'EUR';
SELECT AVG(Price) AS AverageTotalPrice FROM transactions_1k WHERE Date LIKE '2012-01%';
SELECT COUNT(DISTINCT c.CustomerID)  FROM customers c  JOIN yearmonth ym ON c.CustomerID = ym.CustomerID  WHERE c.Currency = 'euro' AND ym.Consumption > 1000;
SELECT p.Description FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE g.Country = 'CZE';
SELECT DISTINCT t.Time FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.ChainID = 11;
SELECT COUNT(*)  FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Price > 1000;
SELECT COUNT(*)  FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Date > '2012-01-01';
SELECT AVG(Price) AS AverageTotalPrice FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE';
SELECT AVG(TotalPrice) AS AverageTotalPrice FROM (     SELECT CustomerID, SUM(Price) AS TotalPrice     FROM transactions_1k     WHERE CustomerID IN (         SELECT CustomerID         FROM customers         WHERE Currency = 'euro'     )     GROUP BY CustomerID ) AS CustomerTotals;
SELECT CustomerID, SUM(Amount) AS TotalPaid FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY TotalPaid DESC LIMIT 1;
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-25' ORDER BY t.Time LIMIT 1;
SELECT c.Currency  FROM transactions_1k t  JOIN customers c ON t.CustomerID = c.CustomerID  WHERE t.Time = '16:25:00' AND t.Date = '2012-08-24';
SELECT c.Segment  FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-23' AND t.Time = '21:20:00';
SELECT COUNT(*)  FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR'  AND t.Date = '2012-08-26'  AND t.Time < '13:00:00';
SELECT Segment  FROM customers  WHERE CustomerID = (SELECT CustomerID FROM customers ORDER BY CustomerID LIMIT 1);
SELECT g.Country  FROM transactions_1k t  JOIN gasstations g ON t.GasStationID = g.GasStationID  WHERE t.Date = '2012-08-24' AND t.Time = '12:42:00';
SELECT ProductID  FROM transactions_1k  WHERE Date = '2012-08-23' AND Time = '21:20:00';
SELECT Date, SUM(Amount) AS TotalSpent FROM transactions_1k WHERE CustomerID = (     SELECT CustomerID     FROM transactions_1k     WHERE Amount = 124.05 AND Date = '2012-08-24' ) AND Date >= '2012-01-01' AND Date < '2012-02-01' GROUP BY Date;
SELECT COUNT(*)  FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE'  AND t.Date = '2012-08-26'  AND t.Time BETWEEN '08:00:00' AND '09:00:00';
SELECT c.Currency  FROM customers c  JOIN transactions_1k t ON c.CustomerID = t.CustomerID  JOIN yearmonth ym ON c.CustomerID = ym.CustomerID  WHERE ym.Date LIKE '201306%'  AND t.Amount = 214582.17  LIMIT 1;
SELECT g.Country  FROM transactions_1k t  JOIN gasstations g ON t.GasStationID = g.GasStationID  WHERE t.CardID = 667467;
SELECT c.Country  FROM customers c  JOIN transactions_1k t ON c.CustomerID = t.CustomerID  JOIN gasstations g ON t.GasStationID = g.GasStationID  WHERE t.Amount = 548.4 AND t.Date = '2012-08-24';
SELECT      (COUNT(DISTINCT t.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM customers WHERE Currency = 'EUR')) AS Percentage FROM      transactions_1k t JOIN      customers c ON t.CustomerID = c.CustomerID WHERE      c.Currency = 'EUR' AND t.Date = '2012-08-25';
SELECT      (y1.Consumption - y2.Consumption) / y1.Consumption AS ConsumptionDecreaseRate FROM      transactions_1k t JOIN      yearmonth y1 ON t.CustomerID = y1.CustomerID AND y1.Date = '2012-08-25' JOIN      yearmonth y2 ON t.CustomerID = y2.CustomerID AND y2.Date = '2013-08-25' WHERE      t.Amount = 634.8 AND      t.Date = '2012-08-25';
SELECT GasStationID, SUM(Amount) AS TotalRevenue FROM transactions_1k GROUP BY GasStationID ORDER BY TotalRevenue DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN c.Segment = 'premium' THEN 1 END) * 100.0 / COUNT(*)) AS premium_percentage FROM      customers c JOIN      gasstations g ON c.CustomerID = g.Segment WHERE      g.Country = 'SVK';
SELECT      SUM(Amount) AS TotalSpent,     (SELECT SUM(Amount)       FROM transactions_1k       WHERE CustomerID = '38508' AND Date = '201201') AS January2012Spent FROM      transactions_1k  WHERE      CustomerID = '38508';
SELECT p.Description, SUM(t.Amount) AS TotalSales FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID GROUP BY p.Description ORDER BY TotalSales DESC LIMIT 5;
SELECT      c.CustomerID,      AVG(t.Price / t.Amount) AS AveragePricePerItem,      c.Currency FROM      transactions_1k t JOIN      customers c ON t.CustomerID = c.CustomerID GROUP BY      c.CustomerID ORDER BY      SUM(t.Price) DESC LIMIT 1;
SELECT g.Country FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.ProductID = 2 ORDER BY t.Price DESC LIMIT 1;
SELECT y.CustomerID, y.Consumption FROM transactions_1k t JOIN yearmonth y ON t.CustomerID = y.CustomerID WHERE t.ProductID = 5    AND t.Price / t.Amount > 29.00    AND y.Date LIKE '201208%';
