SELECT COUNT(*)  FROM head  WHERE age > 56;
SELECT T2.name, T2.born_state, T2.age FROM management AS T1  JOIN head AS T2 ON T1.head_id = T2.head_id ORDER BY T2.age;
SELECT Creation, Name, Budget_in_Billions  FROM department;
SELECT MAX(Budget_in_Billions) AS MaxBudget, MIN(Budget_in_Billions) AS MinBudget FROM department;
SELECT AVG(Num_Employees)  FROM department  WHERE Ranking BETWEEN 10 AND 15;
SELECT name FROM head WHERE born_state != 'California';
SELECT DISTINCT T1.Creation FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID JOIN head AS T3 ON T2.head_ID = T3.head_ID WHERE T3.born_state = 'Alabama';
SELECT born_state  FROM head  GROUP BY born_state  HAVING COUNT(head_ID) >= 3;
SELECT Creation, COUNT(*) AS Num_Departments FROM department GROUP BY Creation ORDER BY Num_Departments DESC LIMIT 1;
SELECT department.Name, department.Num_Employees  FROM department  JOIN management ON department.Department_ID = management.department_ID  WHERE management.temporary_acting = 'Yes';
SELECT COUNT(DISTINCT temporary_acting) FROM management;
SELECT COUNT(*)  FROM department  WHERE department_ID NOT IN (SELECT department_ID FROM management)
SELECT DISTINCT T2.age FROM management AS T1 JOIN head AS T2 ON T1.head_id = T2.head_id WHERE T1.temporary_acting = 'Yes'
SELECT born_state  FROM head  WHERE head_ID IN (     SELECT h.head_ID      FROM head h     JOIN management m ON h.head_ID = m.head_ID     JOIN department d ON m.department_ID = d.Department_ID     WHERE d.Name IN ('Treasury', 'Homeland Security') ) GROUP BY born_state  HAVING COUNT(*) > 1;
SELECT d.Department_ID, d.Name, COUNT(m.head_ID) AS Num_of_Heads FROM department d JOIN management m ON d.Department_ID = m.department_ID GROUP BY d.Department_ID, d.Name HAVING COUNT(m.head_ID) > 1;
SELECT head_ID, name FROM head WHERE name LIKE '%Ha%';
SELECT COUNT(*) FROM farm;
SELECT COUNT(*) FROM farm;
SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC;
SELECT farm.Farm_ID, farm.Total_Horses  FROM farm  ORDER BY farm.Total_Horses ASC;
SELECT T3.Hosts FROM farm_competition AS T1 JOIN competition_record AS T2 ON T1.Competition_ID = T2.Competition_ID JOIN city AS T3 ON T1.Host_city_ID = T3.City_ID WHERE T1.Theme != 'Aliens'
SELECT Hosts  FROM farm_competition  WHERE Theme != 'Aliens';
SELECT Theme  FROM farm_competition  ORDER BY Year ASC;
SELECT Theme  FROM farm_competition  ORDER BY Year ASC;
SELECT AVG(Working_Horses)  FROM farm  WHERE Total_Horses > 5000;
SELECT AVG(Working_Horses)  FROM farm  WHERE Total_Horses > 5000;
SELECT MAX(T2.Cows) AS MaxCows ,  MIN(T2.Cows) AS MinCows FROM farm AS T2;
SELECT MAX(Total_Cattle) AS Max_Cows, MIN(Total_Cattle) AS Min_Cows FROM farm;
SELECT COUNT(DISTINCT Status) FROM city;
SELECT COUNT(DISTINCT Status) FROM city;
SELECT Official_Name  FROM city  ORDER BY Population DESC;
SELECT Official_Name  FROM city  ORDER BY Population DESC;
SELECT Official_Name, Status FROM city WHERE Population = (SELECT MAX(Population) FROM city);
SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1;
SELECT fc.Year, c.Official_Name  FROM farm_competition AS fc  JOIN city AS c ON fc.Host_city_ID = c.City_ID;
SELECT fc.Year, c.Official_Name  FROM farm_competition AS fc  JOIN city AS c ON fc.Host_city_ID = c.City_ID;
SELECT T1.Official_Name  FROM city AS T1  JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID  GROUP BY T1.City_ID  HAVING COUNT(T2.Competition_ID) > 1
SELECT T1.Official_Name  FROM city AS T1  JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID  GROUP BY T1.City_ID  HAVING COUNT(T2.Competition_ID) > 1
SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(T2.Competition_ID) DESC LIMIT 1;
SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(T2.Competition_ID) DESC LIMIT 1
SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000;
SELECT fc.Theme FROM farm_competition fc JOIN city c ON fc.Host_city_ID = c.City_ID WHERE c.Population > 1000;
SELECT Status, AVG(Population)  FROM city  GROUP BY Status;
SELECT Status, AVG(Population)  FROM city  GROUP BY Status;
SELECT Status, COUNT(*) AS NumberOfCities FROM city GROUP BY Status ORDER BY NumberOfCities DESC;
SELECT Status, COUNT(*) AS Frequency  FROM city  GROUP BY Status  ORDER BY Frequency ASC;
SELECT Status, COUNT(*) AS Count  FROM city  GROUP BY Status  ORDER BY Count DESC  LIMIT 1;
SELECT Status, COUNT(*) AS count  FROM city  GROUP BY Status  ORDER BY count DESC  LIMIT 1;
SELECT Official_Name  FROM city  WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition);
SELECT Official_Name  FROM city  WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition);
Error: 第 51 个样本有 2 个SQL。
SELECT Status  FROM city  WHERE Population > 1500  INTERSECT  SELECT Status  FROM city  WHERE Population < 500;
SELECT Official_Name  FROM city  WHERE Population < 500 OR Population > 1500;
SELECT Official_Name  FROM city  WHERE Population > 1500 OR Population < 500;
SELECT Official_Name, Census_Ranking  FROM city  WHERE Status != 'Village';
SELECT Census_Ranking FROM city WHERE Status != 'Village';
SELECT c.course_name, COUNT(scr.student_id) AS num_students FROM Courses c JOIN Student_Course_Registrations scr ON c.course_id = scr.course_id GROUP BY c.course_name ORDER BY num_students DESC LIMIT 1;
SELECT c.course_name  FROM Courses c JOIN Student_Course_Registrations scr ON c.course_id = scr.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(scr.student_id) DESC LIMIT 1;
SELECT student_id  FROM (   SELECT student_id, COUNT(course_id) as course_count   FROM Student_Course_Registrations   GROUP BY student_id ) as subquery WHERE course_count = (   SELECT MIN(course_count)   FROM (     SELECT COUNT(course_id) as course_count     FROM Student_Course_Registrations     GROUP BY student_id   ) as subquery2 )
SELECT student_id  FROM (   SELECT student_id, COUNT(course_id) as num_courses   FROM Student_Course_Registrations   GROUP BY student_id ) as subquery WHERE num_courses = (   SELECT MIN(num_courses)   FROM (     SELECT COUNT(course_id) as num_courses     FROM Student_Course_Registrations     GROUP BY student_id   ) as subquery2 );
SELECT first_name, last_name  FROM People  WHERE person_id IN (SELECT candidate_id FROM Candidates);
SELECT first_name, last_name  FROM People  WHERE person_id IN (SELECT candidate_id FROM Candidates);
SELECT student_id  FROM Students  WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Attendance)
SELECT s.student_id  FROM Students s  LEFT JOIN Student_Course_Attendance sca  ON s.student_id = sca.student_id  WHERE sca.student_id IS NULL;
SELECT DISTINCT student_id  FROM Student_Course_Attendance;
SELECT DISTINCT student_id  FROM Student_Course_Attendance;
SELECT sc.student_id, c.course_name  FROM Student_Course_Registrations sc  JOIN Courses c ON sc.course_id = c.course_id;
SELECT s.student_details  FROM Students s JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id  WHERE scr.registration_date = (SELECT MAX(registration_date) FROM Student_Course_Registrations)
SELECT s.student_id, s.student_details, MAX(registration_date)  FROM Students s JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id  GROUP BY s.student_id, s.student_details  ORDER BY MAX(scr.registration_date) DESC;
SELECT COUNT(*)  FROM Student_Course_Attendance  JOIN Courses ON Student_Course_Attendance.course_id = Courses.course_id  WHERE Courses.course_name = 'English';
SELECT COUNT(*)  FROM Student_Course_Attendance sca JOIN Courses c ON sca.course_id = c.course_id WHERE c.course_name = 'English';
SELECT COUNT(*)  FROM Student_Course_Attendance  WHERE student_id = 171;
SELECT COUNT(*)  FROM Student_Course_Attendance  WHERE student_id = 171;
SELECT candidate_id FROM Candidates WHERE candidate_details = (SELECT People.person_id FROM People WHERE email_address = 'stanley.monahan@example.org');
SELECT T1.candidate_id FROM Candidates AS T1 JOIN People AS T2 ON T1.candidate_id = T2.person_id WHERE T2.email_address = 'stanley.monahan@example.org'
SELECT c.candidate_id  FROM Candidates c JOIN Candidate_Assessments ca ON c.candidate_id = ca.candidate_id WHERE ca.assessment_date = (SELECT MAX(assessment_date) FROM Candidate_Assessments)
SELECT c.candidate_id  FROM Candidates c JOIN Candidate_Assessments ca ON c.candidate_id = ca.candidate_id WHERE ca.assessment_date = (SELECT MAX(assessment_date) FROM Candidate_Assessments)
SELECT s.student_details FROM Students s JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id GROUP BY s.student_id, s.student_details ORDER BY COUNT(scr.course_id) DESC LIMIT 1;
SELECT s.student_details FROM Students s JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id GROUP BY s.student_id, s.student_details ORDER BY COUNT(scr.course_id) DESC LIMIT 1;
SELECT student_id, COUNT(course_id)  FROM Student_Course_Registrations  GROUP BY student_id HAVING COUNT(course_id) > 0;
SELECT student_id, COUNT(course_id) AS num_courses_registered  FROM Student_Course_Registrations  GROUP BY student_id;
SELECT Courses.course_name, COUNT(Student_Course_Registrations.student_id) AS Number_of_Students  FROM Courses  JOIN Student_Course_Registrations ON Courses.course_id = Student_Course_Registrations.course_id  GROUP BY Courses.course_name;
SELECT Courses.course_id, Courses.course_name, COUNT(Students.student_id) AS number_of_students FROM Courses JOIN Student_Course_Registrations ON Courses.course_id = Student_Course_Registrations.course_id JOIN Students ON Students.student_id = Student_Course_Registrations.student_id GROUP BY Courses.course_id, Courses.course_name;
SELECT candidate_id  FROM Candidate_Assessments  WHERE asessment_outcome_code = 'Pass';
SELECT candidate_id  FROM Candidate_Assessments  WHERE asessment_outcome_code = 'Pass';
SELECT P.cell_mobile_number  FROM People P JOIN Candidates C ON P.person_id = C.candidate_id JOIN Candidate_Assessments CA ON C.candidate_id = CA.candidate_id WHERE CA.asessment_outcome_code = 'Fail';
SELECT p.cell_mobile_number  FROM People p JOIN Candidates c ON p.person_id = c.candidate_id JOIN Candidate_Assessments ca ON c.candidate_id = ca.candidate_id WHERE ca.asessment_outcome_code = 'Fail';
SELECT student_id FROM Student_Course_Registrations WHERE course_id = 301;
SELECT student_id FROM Student_Course_Registrations WHERE course_id = 301;
SELECT student_id  FROM Student_Course_Registrations  WHERE course_id = 301  ORDER BY registration_date DESC  LIMIT 1;
SELECT student_id  FROM Student_Course_Registrations  WHERE course_id = 301  ORDER BY registration_date DESC  LIMIT 1;
SELECT DISTINCT city FROM Addresses;
SELECT DISTINCT city FROM Addresses WHERE city IS NOT NULL;
SELECT DISTINCT A.city  FROM Addresses A  JOIN People_Addresses PA ON A.address_id = PA.address_id  JOIN People P ON PA.person_id = P.person_id  JOIN Students S ON P.person_id = S.student_id;
SELECT DISTINCT city FROM Addresses WHERE address_id IN (SELECT address_id FROM People_Addresses WHERE person_id IN (SELECT student_id FROM Students));
SELECT course_name  FROM Courses  ORDER BY course_name ASC;
SELECT course_name  FROM Courses  ORDER BY course_name ASC;
SELECT first_name  FROM People  ORDER BY first_name ASC;
SELECT first_name  FROM People  ORDER BY first_name ASC;
SELECT DISTINCT student_id FROM Student_Course_Registrations  UNION  SELECT DISTINCT student_id FROM Student_Course_Attendance;
SELECT DISTINCT student_id  FROM (SELECT student_id FROM Student_Course_Registrations        UNION        SELECT student_id FROM Student_Course_Attendance) as temp
SELECT DISTINCT c.course_id  FROM Courses c JOIN Student_Course_Registrations scr ON c.course_id = scr.course_id JOIN Student_Course_Attendance sca ON c.course_id = sca.course_id WHERE scr.student_id = 121 OR sca.student_id = 121;
SELECT DISTINCT cr.course_id  FROM Student_Course_Registrations cr JOIN Student_Course_Attendance ca ON cr.student_id = ca.student_id AND cr.course_id = ca.course_id WHERE cr.student_id = 121 OR ca.student_id = 121;
SELECT s.* FROM Students s JOIN Student_Course_Registrations scr ON s.student_id = scr.student_id LEFT JOIN Student_Course_Attendance sca ON s.student_id = sca.student_id AND scr.course_id = sca.course_id WHERE sca.student_id IS NULL;
SELECT s.student_id, s.student_details FROM Students s WHERE EXISTS (   SELECT 1    FROM Student_Course_Registrations scr    WHERE s.student_id = scr.student_id ) AND NOT EXISTS (   SELECT 1    FROM Student_Course_Attendance sca    WHERE s.student_id = sca.student_id )
SELECT sc.student_id  FROM Student_Course_Registrations sc JOIN Courses c ON sc.course_id = c.course_id WHERE c.course_name = 'statistics' ORDER BY sc.registration_date;
SELECT sc.student_id  FROM Student_Course_Registrations sc JOIN Courses c ON sc.course_id = c.course_id WHERE c.course_name = 'statistics' ORDER BY sc.registration_date;
SELECT sc.student_id  FROM Student_Course_Attendance sc JOIN Courses c ON sc.course_id = c.course_id WHERE c.course_name = 'statistics' ORDER BY sc.date_of_attendance;
SELECT sc.student_id  FROM Student_Course_Attendance sc JOIN Courses c ON sc.course_id = c.course_id WHERE c.course_name = 'statistics' ORDER BY sc.date_of_attendance;
SELECT date  FROM weather  WHERE max_temperature_f > 85;
SELECT date  FROM weather  WHERE max_temperature_f > 85;
SELECT name FROM station WHERE lat < 37.5;
SELECT name FROM station WHERE lat < 37.5;
SELECT city, MAX(lat)  FROM station  GROUP BY city;
SELECT city, MAX(lat)  FROM station  GROUP BY city;
SELECT start_station_name, end_station_name  FROM trip  ORDER BY id  LIMIT 3;
SELECT start_station_name, end_station_name  FROM trip  WHERE id IN (SELECT MIN(id) FROM trip LIMIT 3)
SELECT AVG(lat) AS avg_lat, AVG(long) AS avg_long  FROM station  WHERE city = 'San Jose';
SELECT AVG(lat) AS avg_latitude, AVG(long) AS avg_longitude  FROM station  WHERE city = 'San Jose';
SELECT id FROM trip ORDER BY duration LIMIT 1;
SELECT id  FROM trip  ORDER BY duration  LIMIT 1;
SELECT SUM(duration) AS total_duration, MAX(duration) AS max_duration  FROM trip  WHERE bike_id = 636;
SELECT SUM(duration) AS total_duration, MAX(duration) AS max_duration  FROM trip  WHERE bike_id = 636;
SELECT zip_code, AVG(mean_temperature_f) as avg_mean_temperature FROM weather WHERE MONTH(date) = 8 GROUP BY zip_code;
SELECT zip_code, AVG(mean_temperature_f) AS avg_mean_temp FROM weather WHERE date LIKE '8%' GROUP BY zip_code;
SELECT COUNT(DISTINCT bike_id) FROM trip;
SELECT COUNT(DISTINCT bike_id) FROM trip;
SELECT COUNT(DISTINCT city) FROM station;
SELECT COUNT(DISTINCT city) FROM station;
SELECT COUNT(*) FROM station WHERE city = 'Mountain View';
SELECT COUNT(*) FROM station WHERE city = 'Mountain View';
SELECT DISTINCT s.name  FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available = 7;
SELECT DISTINCT s.name  FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available = 7;
SELECT start_station_name, start_station_id  FROM trip  WHERE start_date >= '2022-08-01' AND start_date < '2022-09-01'  GROUP BY start_station_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT start_station_name, start_station_id  FROM trip  WHERE start_date BETWEEN '2022-08-01' AND '2022-08-31'  GROUP BY start_station_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT bike_id, COUNT(*) as trip_count  FROM trip  WHERE zip_code = 94002  GROUP BY bike_id  ORDER BY trip_count DESC  LIMIT 1;
SELECT bike_id, COUNT(*) as trip_count  FROM trip  WHERE zip_code = 94002  GROUP BY bike_id  ORDER BY trip_count DESC  LIMIT 1;
SELECT COUNT(*)  FROM (   SELECT date    FROM weather    WHERE mean_humidity > 50 AND mean_visibility_miles > 8 ) AS result;
SELECT COUNT(DISTINCT date)  FROM weather  WHERE mean_humidity > 50 AND mean_visibility_miles > 8;
SELECT s.lat, s.long, s.city  FROM station s JOIN trip t ON s.id = t.start_station_id  WHERE t.duration = (SELECT MIN(duration) FROM trip)
SELECT T1.lat, T1.long, T1.city  FROM station AS T1  JOIN trip AS T2  ON T1.id = T2.start_station_id  ORDER BY T2.duration  LIMIT 1;
SELECT s.id  FROM station s  JOIN status st ON s.id = st.station_id  WHERE s.city = 'San Francisco'  GROUP BY s.id  HAVING AVG(st.bikes_available) > 10;
SELECT s.id  FROM station s  JOIN status st ON s.id = st.station_id  WHERE s.city = 'San Francisco'  GROUP BY s.id  HAVING AVG(st.bikes_available) > 10;
SELECT s.name, s.id  FROM station s WHERE s.id IN (     SELECT st.station_id     FROM status st     GROUP BY st.station_id     HAVING AVG(st.bikes_available) > 14 ) OR MONTH(s.installation_date) = 12;
SELECT s.name, s.id  FROM station s JOIN status st ON s.id = st.station_id WHERE (s.installation_date LIKE '12/%' OR         s.id IN (          SELECT station_id           FROM status          GROUP BY station_id          HAVING AVG(bikes_available) > 14        ))
SELECT cloud_cover, COUNT(*) as frequency  FROM weather  WHERE zip_code = 94107  GROUP BY cloud_cover  ORDER BY frequency DESC  LIMIT 3;
SELECT cloud_cover, COUNT(*) as frequency  FROM weather  WHERE zip_code = 94107  GROUP BY cloud_cover  ORDER BY frequency DESC  LIMIT 3;
SELECT zip_code  FROM weather  GROUP BY zip_code  ORDER BY AVG(mean_sea_level_pressure_inches) ASC  LIMIT 1;
SELECT zip_code  FROM weather  GROUP BY zip_code  ORDER BY AVG(mean_sea_level_pressure_inches)  LIMIT 1;
SELECT AVG(status.bikes_available)  FROM status  JOIN station ON status.station_id = station.id  WHERE station.city <> 'Palo Alto';
SELECT AVG(bikes_available)  FROM status  WHERE station_id NOT IN (SELECT id FROM station WHERE city = 'Palo Alto');
SELECT AVG(T1.long)  FROM station AS T1  WHERE T1.id NOT IN (SELECT T2.station_id FROM status AS T2 WHERE T2.bikes_available > 10)
SELECT AVG(long)  FROM station  WHERE id NOT IN (     SELECT station_id      FROM status      WHERE bikes_available > 10 )
SELECT date, zip_code  FROM weather  WHERE max_temperature_f >= 80;
SELECT w.zip_code, w.date  FROM weather w JOIN status s ON DATE(w.date) = DATE(s.time) WHERE w.max_temperature_f >= 80 AND w.zip_code IN (     SELECT DISTINCT t.zip_code      FROM trip t     WHERE t.start_station_id IN (         SELECT st.id          FROM station st         WHERE st.city = (             SELECT w2.city              FROM weather w2              WHERE w2.zip_code = w.zip_code              LIMIT 1         )     ) );
SELECT T1.id  FROM trip AS T1  JOIN weather AS T2  ON DATE(T1.start_date) = T2.date  AND T1.zip_code = T2.zip_code  WHERE T2.mean_temperature_f > 60;
SELECT T1.zip_code, T1.id  FROM (     SELECT zip_code, AVG(mean_temperature_f) as avg_mean_temp     FROM trip      JOIN weather ON trip.start_date = weather.date AND trip.zip_code = weather.zip_code      GROUP BY zip_code     HAVING avg_mean_temp > 60 ) AS T2  JOIN trip AS T1 ON T1.zip_code = T2.zip_code  ORDER BY T1.zip_code;
SELECT zip_code, COUNT(*) as num_times_max_wind_25  FROM weather  WHERE max_wind_speed_mph >= 25  GROUP BY zip_code;
SELECT zip_code, COUNT(*) as count_max_wind_speed_25mph  FROM weather  WHERE max_wind_Speed_mph >= 25  GROUP BY zip_code;
SELECT date, zip_code  FROM weather  WHERE min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107)
SELECT date, zip_code  FROM weather  WHERE min_dew_point_f < (     SELECT MIN(min_dew_point_f)      FROM weather      WHERE zip_code = 94107 )  GROUP BY date, zip_code;
SELECT t.id, s.installation_date  FROM trip t JOIN station s ON t.end_station_id = s.id;
SELECT T3.installation_date, T2.end_station_name FROM trip AS T2 JOIN station AS T3 ON T2.end_station_id = T3.id;
SELECT trip.id  FROM trip  JOIN station ON trip.start_station_id = station.id  WHERE station.dock_count = (SELECT MAX(dock_count) FROM station) LIMIT 1;
SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T2.id = T1.start_station_id WHERE T2.dock_count = (SELECT MAX(dock_count) FROM station)
SELECT COUNT(*)  FROM trip  WHERE end_station_name NOT IN (     SELECT name      FROM station      WHERE city = 'San Francisco' );
SELECT COUNT(*)  FROM trip  WHERE end_station_name NOT IN (     SELECT name      FROM station      WHERE city = 'San Francisco' );
SELECT date  FROM weather  WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%'
SELECT date  FROM weather  WHERE zip_code = 94107 AND events NOT LIKE '%Fog%' AND events NOT LIKE '%Rain%'
SELECT s.id  FROM station s WHERE s.lat > 37.4  AND s.id NOT IN (     SELECT st.station_id      FROM status st      WHERE st.bikes_available < 7 )
SELECT s.id  FROM station s WHERE s.lat > 37.4  AND s.id NOT IN (     SELECT st.station_id      FROM status st      WHERE st.bikes_available < 7 )
SELECT s.name  FROM station s JOIN status st ON s.id = st.station_id WHERE s.city <> 'San Jose' GROUP BY s.name HAVING AVG(st.bikes_available) > 10;
SELECT s.name  FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available > 10 AND s.city != 'San Jose'
SELECT name, lat, city  FROM station  ORDER BY lat ASC  LIMIT 1;
SELECT name, lat, city FROM station WHERE lat = (SELECT MIN(lat) FROM station);
SELECT date, mean_temperature_f, mean_humidity  FROM weather  ORDER BY max_gust_speed_mph DESC  LIMIT 3;
SELECT date, mean_temperature_f, mean_humidity  FROM weather  ORDER BY max_gust_speed_mph DESC  LIMIT 3;
SELECT city, COUNT(name) as num_stations  FROM station  GROUP BY city  HAVING COUNT(name) >= 15;
SELECT city, COUNT(*) AS station_count  FROM station  GROUP BY city  HAVING COUNT(*) >= 15;
SELECT start_station_id, start_station_name  FROM trip  GROUP BY start_station_id, start_station_name  HAVING COUNT(*) >= 200;
SELECT start_station_id, start_station_name  FROM trip  GROUP BY start_station_id, start_station_name  HAVING COUNT(*) >= 200;
SELECT zip_code  FROM weather  GROUP BY zip_code  HAVING AVG(mean_visibility_miles) < 10;
SELECT zip_code FROM (   SELECT zip_code, AVG(mean_visibility_miles) as avg_visibility   FROM weather   GROUP BY zip_code ) subquery WHERE avg_visibility < 10;
SELECT city, MAX(lat) as max_lat FROM station GROUP BY city ORDER BY max_lat DESC;
SELECT city, MAX(lat) as max_lat FROM station GROUP BY city ORDER BY max_lat DESC;
SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5;
SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5;
SELECT id, duration  FROM trip  ORDER BY duration DESC  LIMIT 3;
SELECT id, duration  FROM trip  WHERE duration = (SELECT MAX(duration) FROM trip)
SELECT s.long, AVG(t.duration)  FROM station s  JOIN trip t ON s.id = t.start_station_id  GROUP BY s.long;
SELECT      s.start_station_id,     s.name,     s.long,     AVG(t.duration) as average_duration FROM      trip t JOIN      station s ON t.start_station_id = s.id GROUP BY      s.start_station_id, s.name, s.long;
SELECT s.name, s.lat, MIN(t.duration)  FROM station s  JOIN trip t ON s.id = t.end_station_id  GROUP BY s.name, s.lat;
SELECT T1.end_station_id, T2.name, T2.lat, MIN(T1.duration) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id GROUP BY T1.end_station_id, T2.name, T2.lat
SELECT DISTINCT start_station_name  FROM trip  WHERE duration < 100;
SELECT DISTINCT start_station_name  FROM trip  WHERE duration < 100;
SELECT DISTINCT(zip_code)  FROM weather  WHERE zip_code NOT IN (     SELECT zip_code      FROM weather      WHERE max_dew_point_f >= 70 )
Error: 第 197 个样本有 2 个SQL。
SELECT id  FROM trip  WHERE duration >= (     SELECT AVG(duration)      FROM trip      WHERE zip_code = 94103 );
SELECT trip.id  FROM trip  WHERE trip.duration >= (     SELECT AVG(trip.duration)      FROM trip      WHERE trip.zip_code = 94103 ) AND trip.zip_code = 94103;
SELECT date  FROM weather  WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31;
SELECT date  FROM weather  WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31;
SELECT date, ABS(max_temperature_f - min_temperature_f) AS temp_difference  FROM weather  GROUP BY date  ORDER BY temp_difference ASC  LIMIT 1;
SELECT date, (max_temperature_f - min_temperature_f) AS temp_range FROM weather GROUP BY date ORDER BY temp_range ASC LIMIT 1;
SELECT DISTINCT s.id, s.name  FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available > 12;
SELECT DISTINCT s.id, s.name  FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available > 12;
SELECT w.zip_code  FROM weather w  JOIN trip t ON w.zip_code = t.zip_code  GROUP BY w.zip_code  HAVING AVG(w.mean_humidity) < 70 AND COUNT(t.id) >= 100;
SELECT T3.zip_code  FROM (     SELECT T2.zip_code, AVG(T1.mean_humidity) AS avg_mean_humidity      FROM weather AS T1      JOIN trip AS T2 ON T1.zip_code = T2.zip_code      GROUP BY T1.zip_code ) AS T3  JOIN (     SELECT zip_code, COUNT(*) AS trip_count      FROM trip      GROUP BY zip_code      HAVING COUNT(*) >= 100 ) AS T4 ON T3.zip_code = T4.zip_code  WHERE T3.avg_mean_humidity < 70;
SELECT s.name  FROM station s WHERE s.city = 'Palo Alto'  AND s.id NOT IN (     SELECT t.end_station_id      FROM trip t      GROUP BY t.end_station_id      HAVING COUNT(t.id) > 100 )
SELECT s.name  FROM station s  WHERE s.city = 'Palo Alto'  AND s.id NOT IN (     SELECT t.end_station_id      FROM trip t )
SELECT COUNT(*)  FROM trip  WHERE start_station_name IN (     SELECT name      FROM station      WHERE city = 'Mountain View' ) AND end_station_name IN (     SELECT name      FROM station      WHERE city = 'Palo Alto' );
SELECT COUNT(*)  FROM trip  WHERE start_station_name IN (     SELECT name      FROM station      WHERE city = 'Mountain View' )  AND end_station_name IN (     SELECT name      FROM station      WHERE city = 'Palo Alto' );
SELECT AVG(lat) AS avg_lat, AVG(long) AS avg_long  FROM station  WHERE id IN (     SELECT start_station_id      FROM trip )
SELECT AVG(lat) AS avg_latitude, AVG(long) AS avg_longitude  FROM station  WHERE id IN (SELECT start_station_id FROM trip);
SELECT COUNT(*) FROM book;
SELECT Writer FROM book ORDER BY Writer ASC;
SELECT book.Title  FROM book  JOIN publication ON book.Book_ID = publication.Book_ID  ORDER BY book.Issues ASC;
SELECT Title  FROM book  WHERE Writer != 'Elaine Lee';
SELECT Title, Issues FROM book;
SELECT Publication_Date  FROM publication  ORDER BY Price DESC;
SELECT DISTINCT Publisher  FROM publication  WHERE Price > 5000000;
SELECT Publisher FROM publication WHERE Price = (SELECT MAX(Price) FROM publication);
SELECT P.Publication_Date  FROM publication P ORDER BY P.Price  LIMIT 3;
SELECT b.Title, p.Publication_Date  FROM book AS b  JOIN publication AS p ON b.Book_ID = p.Book_ID;
SELECT b.Writer FROM book b JOIN publication p ON b.Book_ID = p.Book_ID WHERE p.Price > 4000000;
SELECT b.Title  FROM book_2.publication p  JOIN book_2.book b ON p.Book_ID = b.Book_ID  ORDER BY p.Price DESC;
SELECT Publisher  FROM publication  GROUP BY Publisher  HAVING COUNT(Publication_ID) > 1;
SELECT Publisher, COUNT(Publication_ID)  FROM publication  GROUP BY Publisher;
SELECT Publication_Date, COUNT(*) as count  FROM publication  GROUP BY Publication_Date  ORDER BY count DESC  LIMIT 1;
SELECT Writer  FROM book  GROUP BY Writer  HAVING COUNT(Book_ID) > 1;
SELECT Title  FROM book  WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)
SELECT DISTINCT p.Publisher  FROM publication p  WHERE p.Price > 10000000  INTERSECT  SELECT DISTINCT p.Publisher  FROM publication p  WHERE p.Price < 5000000;
SELECT COUNT(DISTINCT Publication_Date) FROM publication;
SELECT COUNT(DISTINCT Publication_Date) FROM publication;
SELECT Price  FROM publication  WHERE Publisher IN ('Person', 'Wiley');
SELECT COUNT(*) FROM actor;
SELECT COUNT(*) FROM actor;
SELECT Name  FROM actor  ORDER BY Name ASC;
SELECT Name  FROM actor  ORDER BY Name ASC;
SELECT Character, Duration FROM actor;
SELECT Actor_ID, Name, Character, Duration  FROM actor;
SELECT Name  FROM actor  WHERE age <> 20;
SELECT Name FROM actor WHERE age <> 20;
SELECT T2.Character FROM actor AS T2 JOIN musical AS T1 ON T2.Musical_ID = T1.Musical_ID ORDER BY T2.age DESC
SELECT Character FROM actor ORDER BY age DESC;
SELECT MAX(Duration)  FROM actor  WHERE age = (SELECT MAX(age) FROM actor);
SELECT Duration  FROM actor  WHERE age = (SELECT MAX(age) FROM actor);
SELECT T1.Name FROM musical AS T1 WHERE T1.Nominee = "Bob Fosse"
SELECT T1.Name  FROM musical AS T1  JOIN actor AS T2  ON T1.Musical_ID = T2.Musical_ID  WHERE T1.Nominee = 'Bob Fosse';
SELECT DISTINCT T1.Nominee  FROM musical AS T1  WHERE T1.Award != "Tony Award"
SELECT DISTINCT Nominee  FROM musical  WHERE Award != 'Tony Award'
SELECT actor.Name, musical.Name  FROM actor  JOIN musical  ON actor.Musical_ID = musical.Musical_ID;
SELECT actor.Name, musical.Name  FROM actor  JOIN musical  ON actor.Musical_ID = musical.Musical_ID;
SELECT actor.Name  FROM actor  JOIN musical ON actor.Musical_ID = musical.Musical_ID  WHERE musical.Name = 'The Phantom of the Opera';
SELECT actor.Name  FROM actor  JOIN musical ON actor.Musical_ID = musical.Musical_ID  WHERE musical.Name = 'The Phantom of the Opera';
SELECT actor.Name  FROM actor  JOIN musical  ON actor.Musical_ID = musical.Musical_ID  WHERE musical.Result = 'Awarded' ORDER BY musical.Year DESC;
SELECT actor.Name  FROM actor  JOIN musical  ON actor.Musical_ID = musical.Musical_ID  WHERE musical.Result = 'Awarded'  ORDER BY musical.Year DESC;
SELECT T1.Name, COUNT(T2.Actor_ID)  FROM musical AS T1  JOIN actor AS T2 ON T1.Musical_ID = T2.Musical_ID  GROUP BY T1.Name;
SELECT musical.Musical_ID, Name, COUNT(actor.Actor_ID) as Num_of_Actors FROM musical LEFT JOIN actor ON musical.Musical_ID = actor.Musical_ID GROUP BY musical.Musical_ID, Name;
SELECT T1.Name  FROM musical AS T1  JOIN actor AS T2 ON T1.Musical_ID = T2.Musical_ID  GROUP BY T1.Musical_ID  HAVING COUNT(T2.Actor_ID) >= 3
SELECT m.Name FROM musical m JOIN actor a ON m.Musical_ID = a.Musical_ID GROUP BY m.Name HAVING COUNT(a.Actor_ID) >= 3;
SELECT Nominee, COUNT(Musical_ID)  FROM musical  GROUP BY Nominee;
SELECT Nominee, COUNT(Musical_ID)  FROM musical  GROUP BY Nominee;
SELECT Nominee, COUNT(*) AS Nomination_Count  FROM musical  GROUP BY Nominee  ORDER BY Nomination_Count DESC  LIMIT 1;
SELECT Nominee, COUNT(Musical_ID) AS Num_Nominations  FROM musical  GROUP BY Nominee  ORDER BY Num_Nominations DESC  LIMIT 1;
SELECT Result, COUNT(*) AS frequency  FROM musical  GROUP BY Result  ORDER BY frequency DESC  LIMIT 1;
SELECT Result  FROM musical  GROUP BY Result  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T1.Nominee  FROM musical AS T1  GROUP BY T1.Nominee  HAVING COUNT(T1.Musical_ID) > 2
SELECT Nominee  FROM musical  GROUP BY Nominee  HAVING COUNT(Nominee) > 2;
SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)
SELECT Name  FROM musical  WHERE Musical_ID NOT IN (SELECT DISTINCT Musical_ID FROM actor)
SELECT Nominee  FROM musical  WHERE Award = 'Tony Award'  INTERSECT  SELECT Nominee  FROM musical  WHERE Award = 'Drama Desk Award'
SELECT Nominee  FROM musical  WHERE Award = 'Tony Award'  INTERSECT  SELECT Nominee  FROM musical  WHERE Award = 'Drama Desk Award'
SELECT Nominee  FROM musical  WHERE Award = 'Bob Fosse' OR Award = 'Cleavant Derricks';
Error: 第 274 个样本有 2 个SQL。
SELECT email FROM user_profiles WHERE name = 'Mary';
SELECT partitionid  FROM user_profiles  WHERE name = 'Iron Man';
SELECT COUNT(*) FROM user_profiles;
SELECT up.uid, up.name, COUNT(f.f1) as followers_count FROM user_profiles up LEFT JOIN follows f ON up.uid = f.f2 GROUP BY up.uid, up.name;
SELECT up.uid, up.name, COUNT(f.f1) as followers_count FROM user_profiles up LEFT JOIN follows f ON up.uid = f.f2 GROUP BY up.uid, up.name;
SELECT COUNT(*) FROM tweets;
SELECT COUNT(DISTINCT uid)  FROM tweets;
SELECT name, email  FROM user_profiles  WHERE name LIKE '%Swift%';
SELECT name  FROM user_profiles  WHERE email LIKE '%superstar%' OR email LIKE '%edu%';
SELECT text  FROM tweets  WHERE text LIKE '%intern%';
SELECT name, email  FROM user_profiles  WHERE followers > 1000;
SELECT name  FROM user_profiles  WHERE followers > (SELECT followers FROM user_profiles WHERE name = 'Tyler Swift')
SELECT name, email  FROM user_profiles  WHERE uid IN (     SELECT f1      FROM follows      GROUP BY f1      HAVING COUNT(f2) > 1 );
SELECT U.name FROM user_profiles U JOIN tweets T ON U.uid = T.uid GROUP BY T.uid HAVING COUNT(T.id) > 1;
Error: 第 289 个样本有 2 个SQL。
Error: 第 290 个样本有 2 个SQL。
Error: 第 291 个样本有 2 个SQL。
SELECT name, email  FROM user_profiles  WHERE uid = (     SELECT uid      FROM (         SELECT followers, uid          FROM user_profiles          ORDER BY followers          LIMIT 1     ) as least_followed )
SELECT up.name, COUNT(f.f1) AS followers_count FROM user_profiles up LEFT JOIN follows f ON up.uid = f.f2 GROUP BY up.uid, up.name ORDER BY followers_count DESC;
SELECT name  FROM user_profiles  WHERE uid IN (     SELECT f1      FROM follows      GROUP BY f1      ORDER BY COUNT(f2) DESC      LIMIT 5 );
SELECT text  FROM tweets  ORDER BY createdate;
SELECT UP.name, COUNT(T.id) as tweet_count FROM user_profiles UP LEFT JOIN tweets T ON UP.uid = T.uid GROUP BY UP.uid, UP.name;
SELECT UP.name, UP.partitionid  FROM user_profiles UP  JOIN tweets T ON UP.uid = T.uid  GROUP BY T.uid  HAVING COUNT(T.id) < 2;
SELECT UP.name, COUNT(T.id) as tweet_count  FROM tweets T  JOIN user_profiles UP ON T.uid = UP.uid  GROUP BY T.uid  HAVING COUNT(T.id) > 1;
SELECT AVG(followers)  FROM user_profiles  WHERE uid NOT IN (SELECT DISTINCT(uid) FROM tweets)
SELECT AVG(t2.followers) FROM tweets t1 JOIN user_profiles t2 ON t1.uid = t2.uid WHERE t1.uid IN (SELECT uid FROM tweets)
SELECT MAX(followers), SUM(followers) FROM user_profiles;
SELECT catalog_entry_name FROM Catalog_Contents;
SELECT catalog_entry_name FROM Catalog_Contents;
SELECT attribute_data_type  FROM Attribute_Definitions  GROUP BY attribute_data_type  HAVING COUNT(attribute_id) > 3;
SELECT attribute_data_type  FROM Attribute_Definitions  GROUP BY attribute_data_type  HAVING COUNT(attribute_id) > 3;
SELECT attribute_data_type  FROM Attribute_Definitions  WHERE attribute_name = 'Green';
SELECT attribute_data_type  FROM Attribute_Definitions  WHERE attribute_name = 'Green';
SELECT catalog_level_name, catalog_level_number  FROM Catalog_Structure  WHERE catalog_level_number BETWEEN 5 AND 10;
SELECT catalog_level_name, catalog_level_number  FROM Catalog_Structure  WHERE catalog_level_number BETWEEN 5 AND 10;
SELECT DISTINCT catalog_publisher  FROM Catalogs  WHERE catalog_publisher LIKE '%Murray%';
SELECT DISTINCT catalog_publisher  FROM Catalogs  WHERE catalog_publisher LIKE '%Murray%';
SELECT catalog_publisher, COUNT(catalog_id) as num_of_catalogs FROM Catalogs GROUP BY catalog_publisher ORDER BY num_of_catalogs DESC LIMIT 1;
SELECT catalog_publisher, COUNT(catalog_id) AS num_catalogs FROM Catalogs GROUP BY catalog_publisher ORDER BY num_catalogs DESC LIMIT 1;
SELECT T1.catalog_name, T1.date_of_publication  FROM Catalogs AS T1  JOIN Catalog_Structure AS T2  ON T1.catalog_id = T2.catalog_id  WHERE T2.catalog_level_number > 5;
SELECT c.catalog_name, c.date_of_latest_revision  FROM Catalogs c JOIN Catalog_Structure cs ON c.catalog_id = cs.catalog_id WHERE cs.catalog_level_number > 5;
SELECT cc.catalog_entry_name FROM Catalog_Contents cc JOIN Catalog_Contents_Additional_Attributes ccaa ON cc.catalog_entry_id = ccaa.catalog_entry_id WHERE ccaa.attribute_id = (     SELECT attribute_id     FROM (         SELECT attribute_id, COUNT(*) AS count         FROM Catalog_Contents_Additional_Attributes         GROUP BY attribute_id         ORDER BY count DESC         LIMIT 1     ) as most_common_attribute ) GROUP BY cc.catalog_entry_name;
SELECT CC.catalog_entry_name FROM Catalog_Contents CC JOIN Catalog_Contents_Additional_Attributes CCAA ON CC.catalog_entry_id = CCAA.catalog_entry_id WHERE CCAA.attribute_id IN (     SELECT attribute_id     FROM (         SELECT attribute_id, COUNT(*) AS cnt         FROM Catalog_Contents_Additional_Attributes         GROUP BY attribute_id     ) t     WHERE cnt = (         SELECT MAX(cnt)         FROM (             SELECT COUNT(*) AS cnt             FROM Catalog_Contents_Additional_Attributes             GROUP BY attribute_id         ) t2     ) );
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE price_in_dollars = (SELECT MAX(price_in_dollars) FROM Catalog_Contents);
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE price_in_dollars = (SELECT MAX(price_in_dollars) FROM Catalog_Contents);
SELECT cs.catalog_level_name FROM Catalog_Structure cs JOIN Catalog_Contents cc ON cs.catalog_level_number = cc.catalog_level_number ORDER BY cc.price_in_dollars LIMIT 1;
SELECT cs.catalog_level_name FROM Catalog_Structure cs JOIN Catalog_Contents cc ON cs.catalog_level_number = cc.catalog_level_number WHERE cc.price_in_dollars = (     SELECT MIN(price_in_dollars)     FROM Catalog_Contents ) LIMIT 1;
SELECT AVG(price_in_euros) AS average_price_in_euros, MIN(price_in_euros) AS minimum_price_in_euros  FROM Catalog_Contents;
SELECT AVG(price_in_euros) AS average_price_in_euros, MIN(price_in_euros) AS minimum_price_in_euros  FROM Catalog_Contents;
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE height = (SELECT MAX(height) FROM Catalog_Contents);
SELECT CC.catalog_entry_name  FROM Catalog_Contents CC  WHERE CC.height = (SELECT MAX(height) FROM Catalog_Contents);
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE capacity = (SELECT MIN(capacity) FROM Catalog_Contents);
SELECT CC.catalog_entry_name FROM Catalog_Contents CC WHERE CC.capacity = (     SELECT MIN(CC2.capacity)     FROM Catalog_Contents CC2 )
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE product_stock_number LIKE '2%';
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE product_stock_number LIKE '2%';
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE catalog_level_number = 8;
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE catalog_level_number = 8;
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE length < 3 OR height > 5;
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE length < 3 OR length > 5;
SELECT Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_id  FROM Attribute_Definitions  JOIN Catalog_Contents_Additional_Attributes  ON Attribute_Definitions.attribute_id = Catalog_Contents_Additional_Attributes.attribute_id  WHERE Catalog_Contents_Additional_Attributes.attribute_value = 0;
SELECT Attribute_Definitions.attribute_name, Attribute_Definitions.attribute_id  FROM Attribute_Definitions  JOIN Catalog_Contents_Additional_Attributes  ON Attribute_Definitions.attribute_id = Catalog_Contents_Additional_Attributes.attribute_id  WHERE Catalog_Contents_Additional_Attributes.attribute_value = 0;
SELECT catalog_entry_name, capacity  FROM Catalog_Contents  WHERE price_in_dollars > 700;
SELECT catalog_entry_name, capacity  FROM Catalog_Contents  WHERE price_in_dollars > 700;
SELECT date_of_latest_revision, COUNT(*)  FROM Catalogs  GROUP BY date_of_latest_revision  HAVING COUNT(*) > 1;
SELECT date_of_latest_revision, COUNT(*)  FROM Catalogs  GROUP BY date_of_latest_revision  HAVING COUNT(*) > 1;
SELECT COUNT(*) FROM Catalog_Contents;
SELECT COUNT(*) FROM Catalog_Contents;
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE next_entry_id > 8;
SELECT catalog_entry_name  FROM Catalog_Contents  WHERE next_entry_id > 8;
SELECT COUNT(*) FROM aircraft;
SELECT COUNT(*) FROM aircraft;
SELECT name, distance FROM aircraft;
SELECT name, distance FROM aircraft;
SELECT aid FROM aircraft WHERE distance > 1000;
SELECT aid FROM aircraft WHERE distance > 1000;
SELECT COUNT(*) FROM aircraft WHERE distance BETWEEN 1000 AND 5000;
SELECT COUNT(*)  FROM aircraft  WHERE distance BETWEEN 1000 AND 5000;
SELECT name, distance FROM aircraft WHERE aid = 12;
SELECT name, distance FROM aircraft WHERE aid = 12;
SELECT MIN(distance) AS Min_Distance, AVG(distance) AS Average_Distance, MAX(distance) AS Max_Distance  FROM aircraft;
SELECT MIN(distance) AS Min_Distance, AVG(distance) AS Average_Distance, MAX(distance) AS Max_Distance  FROM aircraft;
SELECT aid, name FROM aircraft WHERE distance = (SELECT MAX(distance) FROM aircraft);
SELECT aid, name FROM aircraft WHERE distance = (SELECT MAX(distance) FROM aircraft);
SELECT name FROM aircraft ORDER BY distance ASC LIMIT 3;
SELECT name  FROM aircraft  ORDER BY distance  LIMIT 3;
SELECT name FROM aircraft WHERE distance > (SELECT AVG(distance) FROM aircraft);
SELECT name  FROM aircraft  WHERE distance > (SELECT AVG(distance) FROM aircraft);
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT name, salary  FROM employee  ORDER BY salary;
SELECT name, salary  FROM employee  ORDER BY salary;
SELECT eid FROM employee WHERE salary >= 100000;
SELECT eid FROM employee WHERE salary >= 100000;
SELECT COUNT(*) FROM employee WHERE salary BETWEEN 100000 AND 200000;
SELECT COUNT(*) FROM employee WHERE salary BETWEEN 100000 AND 200000;
SELECT name, salary FROM employee WHERE eid = 242518965;
SELECT name, salary FROM employee WHERE eid = 242518965;
SELECT AVG(salary) AS average_salary, MAX(salary) AS max_salary FROM employee;
SELECT AVG(salary) AS average_salary, MAX(salary) AS max_salary FROM employee;
SELECT eid, name FROM employee WHERE salary = (SELECT MAX(salary) FROM employee);
SELECT eid, name FROM employee WHERE salary = (SELECT MAX(salary) FROM employee);
SELECT name FROM employee ORDER BY salary ASC LIMIT 3;
SELECT name  FROM employee  ORDER BY salary  LIMIT 3;
SELECT name FROM employee WHERE salary > (SELECT AVG(salary) FROM employee);
SELECT name FROM employee WHERE salary > (SELECT AVG(salary) FROM employee)
SELECT eid, salary FROM employee WHERE name = 'Mark Young';
SELECT eid, salary FROM employee WHERE name = 'Mark Young';
SELECT COUNT(*) FROM flight_1.flight;
SELECT COUNT(*) FROM flight
SELECT flno, origin, destination  FROM flight  ORDER BY origin ASC;
SELECT flno, origin, destination  FROM flight  ORDER BY origin ASC;
SELECT flno FROM flight WHERE origin = 'Los Angeles';
SELECT COUNT(*) FROM flight WHERE origin = 'Los Angeles'
SELECT origin FROM flight WHERE destination = 'Honolulu';
SELECT origin FROM flight WHERE destination = 'Honolulu';
SELECT departure_date, arrival_date  FROM flight  WHERE origin = 'Los Angeles' AND destination = 'Honolulu';
SELECT departure_date, arrival_date  FROM flight  WHERE origin = 'LA' AND destination = 'Honolulu';
SELECT flno FROM flight WHERE distance > 2000;
SELECT COUNT(*) FROM flight WHERE distance > 2000;
SELECT AVG(price)  FROM flight  WHERE origin = 'Los Angeles' AND destination = 'Honolulu';
SELECT AVG(price)  FROM flight  WHERE origin = 'LA' AND destination = 'Honolulu';
SELECT origin, destination  FROM flight  WHERE price > 300;
SELECT origin, destination FROM flight WHERE price > 300;
SELECT flno, distance FROM flight WHERE price = (SELECT MAX(price) FROM flight);
SELECT flno, distance FROM flight WHERE price = (SELECT MAX(price) FROM flight);
SELECT flno  FROM flight  ORDER BY distance  LIMIT 3;
Error: 第 401 个样本有 2 个SQL。
SELECT AVG(distance) AS avg_distance, AVG(price) AS avg_price  FROM flight  WHERE origin = 'Los Angeles';
SELECT AVG(distance), AVG(price)  FROM flight  WHERE origin = 'LA';
SELECT origin, COUNT(*) AS num_flights  FROM flight  GROUP BY origin;
SELECT origin, COUNT(*) AS num_flights  FROM flight  GROUP BY origin;
SELECT destination, COUNT(*)  FROM flight  GROUP BY destination;
SELECT destination, COUNT(*) AS num_flights  FROM flight  GROUP BY destination;
SELECT origin, COUNT(*) AS num_flights  FROM flight  GROUP BY origin  ORDER BY num_flights DESC  LIMIT 1;
SELECT origin, COUNT(*) as num_flights  FROM flight  GROUP BY origin  ORDER BY num_flights DESC  LIMIT 1;
SELECT destination  FROM flight  GROUP BY destination  ORDER BY COUNT(*)  LIMIT 1;
SELECT destination  FROM flight  GROUP BY destination  ORDER BY COUNT(*)  LIMIT 1;
SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99;
SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99;
SELECT flno FROM flight WHERE aid IN (SELECT aid FROM aircraft WHERE name = 'Airbus A340-300');
SELECT flno  FROM flight  WHERE aid IN (SELECT aid FROM aircraft WHERE name = 'Airbus A340-300');
SELECT aircraft.name, COUNT(flight.flno) AS NumOfFlights FROM aircraft JOIN flight ON aircraft.aid = flight.aid GROUP BY aircraft.name;
SELECT a.name, COUNT(f.flno) AS Num_of_Flights FROM aircraft a LEFT JOIN flight f ON a.aid = f.aid GROUP BY a.name;
SELECT T2.name  FROM flight AS T1  JOIN aircraft AS T2  ON T1.aid = T2.aid  GROUP BY T1.aid  HAVING COUNT(*) >= 2;
SELECT T2.name  FROM flight AS T1  JOIN aircraft AS T2 ON T1.aid = T2.aid  GROUP BY T1.aid  HAVING COUNT(*) >= 2;
SELECT COUNT(*) FROM certificate
SELECT COUNT(DISTINCT eid) FROM certificate;
SELECT eid FROM employee WHERE eid NOT IN (SELECT eid FROM certificate)
SELECT eid FROM employee WHERE eid NOT IN (SELECT eid FROM certificate)
SELECT T2.name FROM certificate AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 ON T1.eid = T3.eid WHERE T3.name = 'John Williams'
SELECT T2.name FROM certificate AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid JOIN employee AS T3 ON T1.eid = T3.eid WHERE T3.name = 'John Williams'
SELECT E.name  FROM employee E, certificate C, aircraft A  WHERE C.eid = E.eid AND C.aid = A.aid AND A.name = 'Boeing 737-800';
SELECT E.name FROM employee E, certificate C, aircraft A WHERE C.eid = E.eid AND C.aid = A.aid AND A.name = 'Boeing 737-800'
SELECT T1.name  FROM employee AS T1  JOIN certificate AS T2 ON T1.eid = T2.eid  JOIN aircraft AS T3 ON T3.aid = T2.aid  WHERE T3.name IN ('Boeing 737-800', 'Airbus A340-300')  GROUP BY T1.eid  HAVING COUNT(DISTINCT T3.name) = 2;
SELECT T1.name  FROM employee AS T1  JOIN certificate AS T2 ON T1.eid = T2.eid  JOIN aircraft AS T3 ON T3.aid = T2.aid  WHERE T3.name IN ('Boeing 737-800', 'Airbus A340-300')  GROUP BY T1.eid  HAVING COUNT(DISTINCT T3.name) = 2;
SELECT e.name FROM employee e WHERE NOT EXISTS (     SELECT *     FROM certificate c     JOIN aircraft a ON c.aid = a.aid     WHERE c.eid = e.eid AND a.name = 'Boeing 737-800' );
SELECT e.name  FROM employee e LEFT JOIN certificate c ON e.eid = c.eid LEFT JOIN aircraft a ON c.aid = a.aid AND a.name = 'Boeing 737-800' WHERE a.name IS NULL;
SELECT T2.name FROM certificate AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY COUNT(T1.eid) ASC LIMIT 1
SELECT T2.name FROM certificate AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY COUNT(*) LIMIT 1
SELECT T2.name, T2.distance  FROM certificate AS T1  JOIN aircraft AS T2  ON T1.aid = T2.aid  WHERE T2.distance > 5000  GROUP BY T1.aid  HAVING COUNT(T1.eid) >= 5;
SELECT a.name, a.distance  FROM aircraft a  JOIN certificate c ON a.aid = c.aid  GROUP BY a.aid  HAVING COUNT(c.eid) >= 5 AND a.distance > 5000;
SELECT E.name, E.salary  FROM employee E JOIN certificate C ON E.eid = C.eid GROUP BY E.eid, E.name, E.salary ORDER BY COUNT(C.aid) DESC LIMIT 1;
SELECT E.name, E.salary FROM employee E JOIN (     SELECT eid, COUNT(*) AS cnt     FROM certificate     GROUP BY eid     ORDER BY cnt DESC     LIMIT 1 ) C ON E.eid = C.eid;
Error: 第 438 个样本有 2 个SQL。
SELECT e.name, e.salary  FROM employee e JOIN certificate c ON e.eid = c.eid JOIN aircraft a ON c.aid = a.aid WHERE a.distance > 5000 GROUP BY e.eid ORDER BY COUNT(certificate.*) DESC LIMIT 1;
SELECT COUNT(DISTINCT Allergy) FROM Allergy_Type;
SELECT COUNT(*) FROM Has_Allergy;
SELECT COUNT(DISTINCT AllergyType) FROM allergy_1.Allergy_Type;
SELECT COUNT(DISTINCT Allergy) FROM Allergy_Type;
SELECT DISTINCT AllergyType FROM Allergy_Type;
SELECT DISTINCT AllergyType FROM Allergy_Type;
SELECT Allergy, AllergyType FROM Allergy_Type;
SELECT Allergy, AllergyType FROM Allergy_Type;
SELECT AT.Allergy  FROM Allergy_Type AT  WHERE AT.AllergyType = 'food';
SELECT DISTINCT Allergy  FROM Allergy_Type  WHERE AllergyType = 'food';
SELECT AT.AllergyType  FROM Allergy_Type AT  JOIN Has_Allergy HA ON AT.Allergy = HA.Allergy  WHERE HA.Allergy = 'Cat';
SELECT AT.AllergyType  FROM Allergy_Type AT  WHERE AT.Allergy = 'cat';
SELECT COUNT(*)  FROM Allergy_Type  WHERE AllergyType = 'animal';
SELECT COUNT(*)  FROM Allergy_Type  WHERE AllergyType = 'Animal';
SELECT AllergyType, COUNT(*) AS NumberOfAllergies FROM Allergy_Type JOIN Has_Allergy ON Allergy_Type.Allergy = Has_Allergy.Allergy GROUP BY AllergyType;
SELECT AllergyType, COUNT(*) AS NumberOfAllergies FROM Allergy_Type JOIN Has_Allergy ON Allergy_Type.Allergy = Has_Allergy.Allergy GROUP BY AllergyType;
SELECT AllergyType, COUNT(*) AS Count  FROM Allergy_Type  GROUP BY AllergyType  ORDER BY Count DESC  LIMIT 1;
SELECT AllergyType, COUNT(*) AS Count  FROM Allergy_Type  JOIN Has_Allergy ON Allergy_Type.Allergy = Has_Allergy.Allergy  GROUP BY AllergyType  ORDER BY Count DESC  LIMIT 1;
SELECT AT.AllergyType, COUNT(HA.Allergy) AS AllergyCount FROM Allergy_Type AT LEFT JOIN Has_Allergy HA ON AT.Allergy = HA.Allergy GROUP BY AT.AllergyType ORDER BY AllergyCount ASC LIMIT 1;
SELECT AT.AllergyType FROM Allergy_Type AT GROUP BY AT.AllergyType ORDER BY COUNT(AT.Allergy) ASC LIMIT 1;
SELECT COUNT(*) FROM Student;
SELECT COUNT(*) FROM Student;
SELECT Fname, Lname  FROM Student;
SELECT Fname, LName FROM Student;
SELECT COUNT(DISTINCT Advisor) FROM Student;
SELECT COUNT(DISTINCT Advisor) FROM Student;
SELECT DISTINCT Major FROM Student;
SELECT DISTINCT Major FROM Student;
SELECT DISTINCT city_code FROM Student;
SELECT DISTINCT city_code FROM Student;
SELECT Fname, Lname, Age  FROM Student  WHERE Sex = 'F';
SELECT Fname, LName, Age  FROM Student  WHERE Sex = 'F';
SELECT StuID FROM Student WHERE Sex = 'M';
SELECT StuID FROM Student WHERE Sex = 'M';
SELECT COUNT(*) FROM Student WHERE Age = 18;
SELECT COUNT(*) FROM Student WHERE Age = 18;
SELECT StuID FROM Student WHERE Age > 20;
SELECT StuID FROM Student WHERE Age > 20;
SELECT city_code FROM Student WHERE LName = 'Kim'
SELECT city_code FROM Student WHERE LName = 'Kim';
SELECT Advisor FROM Student WHERE StuID = 1004;
SELECT Advisor FROM Student WHERE StuID = 1004;
SELECT COUNT(*)  FROM Student  WHERE city_code IN ('HKG', 'CHI');
SELECT COUNT(*)  FROM Student  WHERE city_code IN ('HKG', 'CHI');
SELECT MIN(Age) AS MinAge, AVG(Age) AS AvgAge, MAX(Age) AS MaxAge  FROM Student;
SELECT MIN(Age) as Min_Age, AVG(Age) as Mean_Age, MAX(Age) as Max_Age  FROM Student;
SELECT LName  FROM Student  WHERE Age = (SELECT MIN(Age) FROM Student);
SELECT LName  FROM Student  WHERE Age = (SELECT MIN(Age) FROM Student);
SELECT StuID FROM Student WHERE Age=(SELECT MAX(Age) FROM Student);
SELECT StuID FROM Student WHERE Age = (SELECT MAX(Age) FROM Student);
SELECT Major, COUNT(*) AS Num_Students  FROM Student  GROUP BY Major;
SELECT Major, COUNT(*)  FROM Student  GROUP BY Major;
SELECT Major, COUNT(*) AS NumStudents FROM Student GROUP BY Major ORDER BY NumStudents DESC LIMIT 1;
SELECT Major  FROM Student  GROUP BY Major  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Age, COUNT(*)  FROM Student  GROUP BY Age;
SELECT Age, COUNT(*) AS Num_Students  FROM Student  GROUP BY Age;
SELECT Sex, AVG(Age)  FROM Student  GROUP BY Sex;
SELECT Sex, AVG(Age)  FROM Student  GROUP BY Sex;
SELECT city_code, COUNT(*)  FROM Student  GROUP BY city_code;
SELECT city_code, COUNT(*)  FROM Student  GROUP BY city_code;
SELECT Advisor, COUNT(*) AS NumberOfStudents FROM Student GROUP BY Advisor;
SELECT Advisor, COUNT(StuID) AS Num_Students FROM Student GROUP BY Advisor;
SELECT Advisor, COUNT(*) AS NumStudents  FROM Student  GROUP BY Advisor  ORDER BY NumStudents DESC  LIMIT 1;
SELECT Advisor, COUNT(StuID) AS NumStudents  FROM Student  GROUP BY Advisor  ORDER BY NumStudents DESC  LIMIT 1;
SELECT COUNT(*)  FROM Has_Allergy  JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy  WHERE Allergy_Type.Allergy = 'cat';
SELECT COUNT(*)  FROM Has_Allergy  JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy  WHERE Allergy_Type.Allergy = 'cat';
SELECT StuID  FROM Has_Allergy  GROUP BY StuID  HAVING COUNT(Allergy) >= 2;
SELECT StuID  FROM Has_Allergy  GROUP BY StuID  HAVING COUNT(Allergy) > 1;
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)
SELECT StuID, LName, Fname FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Allergy)
SELECT COUNT(*)  FROM Has_Allergy ha  JOIN Student s ON ha.StuID = s.StuID  WHERE s.Sex = 'F' AND ha.Allergy IN ('milk', 'egg');
SELECT COUNT(*)  FROM Has_Allergy ha  JOIN Student s ON ha.StuID = s.StuID  JOIN Allergy_Type at ON ha.Allergy = at.Allergy  WHERE s.Sex = 'F' AND (at.Allergy = 'milk' OR at.Allergy = 'eggs');
SELECT COUNT(*)  FROM Has_Allergy ha JOIN Allergy_Type at ON ha.Allergy = at.Allergy WHERE at.AllergyType = 'Food'
SELECT COUNT(*)  FROM Has_Allergy ha JOIN Allergy_Type at ON ha.Allergy = at.Allergy WHERE at.AllergyType = 'Food'
SELECT A.Allergy  FROM Allergy_Type A  JOIN Has_Allergy H ON A.Allergy = H.Allergy  GROUP BY A.Allergy  ORDER BY COUNT(H.StuID) DESC  LIMIT 1;
SELECT Allergy, COUNT(*) AS Count  FROM Has_Allergy  GROUP BY Allergy  ORDER BY Count DESC  LIMIT 1;
SELECT A.Allergy, COUNT(H.StuID) AS NumOfStudents FROM Allergy_Type A JOIN Has_Allergy H ON A.Allergy = H.Allergy GROUP BY A.Allergy;
SELECT Allergy, COUNT(*)  FROM Has_Allergy  GROUP BY Allergy;
SELECT AT.AllergyType, COUNT(HA.StuID) AS NumOfStudents FROM Allergy_Type AT JOIN Has_Allergy HA ON AT.Allergy = HA.Allergy GROUP BY AT.AllergyType;
SELECT AT.AllergyType, COUNT(HA.StuID) AS NumOfStudents FROM Allergy_Type AT JOIN Has_Allergy HA ON AT.Allergy = HA.Allergy GROUP BY AT.AllergyType;
SELECT S.LName, S.Age  FROM Student S  JOIN Has_Allergy H1 ON S.StuID = H1.StuID  JOIN Has_Allergy H2 ON S.StuID = H2.StuID  WHERE H1.Allergy = 'milk' AND H2.Allergy = 'cat';
SELECT S.LName, S.Age  FROM Student S  JOIN Has_Allergy H ON S.StuID = H.StuID  JOIN Allergy_Type A ON H.Allergy = A.Allergy  WHERE A.AllergyType IN ('Milk', 'Cat')  GROUP BY S.StuID  HAVING COUNT(DISTINCT A.AllergyType) = 2;
SELECT AT.Allergy, AT.AllergyType  FROM Allergy_Type AS AT  JOIN Has_Allergy AS HA ON AT.Allergy = HA.Allergy  JOIN Student AS S ON HA.StuID = S.StuID  WHERE S.Fname = 'Lisa'  ORDER BY AT.Allergy;
SELECT A.Allergy, AT.AllergyType  FROM Has_Allergy AS A  JOIN Allergy_Type AS AT ON A.Allergy = AT.Allergy  JOIN Student AS S ON A.StuID = S.StuID  WHERE S.Fname = 'Lisa' AND S.Sex = 'F'  ORDER BY A.Allergy;
SELECT S.Fname, S.Sex  FROM Student S  JOIN Has_Allergy HA ON S.StuID = HA.StuID  JOIN Allergy_Type AT ON HA.Allergy = AT.Allergy  WHERE AT.Allergy = 'Milk'  AND NOT EXISTS (SELECT 1 FROM Has_Allergy HAC WHERE HAC.StuID = S.StuID AND HAC.Allergy = 'Cat');
SELECT S.Fname, S.Sex  FROM Student S  JOIN Has_Allergy HA ON S.StuID = HA.StuID  JOIN Allergy_Type AT ON HA.Allergy = AT.Allergy  WHERE AT.Allergy = 'Milk' AND NOT EXISTS (     SELECT 1 FROM Has_Allergy HAC      JOIN Allergy_Type ATC ON HAC.Allergy = ATC.Allergy      WHERE HAC.StuID = S.StuID AND ATC.Allergy = 'Cat' );
SELECT AVG(Student.Age) FROM Student JOIN Has_Allergy ON Student.StuID = Has_Allergy.StuID JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy WHERE Allergy_Type.AllergyType IN ('food', 'animal');
SELECT AVG(Age)  FROM Student  WHERE StuID IN (     SELECT Has_Allergy.StuID      FROM Has_Allergy      JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy      WHERE AllergyType IN ('food', 'animal') );
SELECT S.Fname, S.LName  FROM Student S  WHERE NOT EXISTS (     SELECT 1      FROM Has_Allergy HA      JOIN Allergy_Type AT ON HA.Allergy = AT.Allergy      WHERE S.StuID = HA.StuID AND AT.AllergyType = 'food' );
SELECT S.Fname, S.LName FROM Student S WHERE S.StuID NOT IN (     SELECT HA.StuID     FROM Has_Allergy HA     JOIN Allergy_Type AT ON HA.Allergy = AT.Allergy     WHERE AT.AllergyType = 'Food' );
SELECT COUNT(*)  FROM Has_Allergy ha  JOIN Allergy_Type at ON ha.Allergy = at.Allergy  JOIN Student s ON ha.StuID = s.StuID  WHERE at.AllergyType = 'food' AND s.Sex = 'M';
SELECT COUNT(*)  FROM Has_Allergy ha  JOIN Student s ON ha.StuID = s.StuID  JOIN Allergy_Type at ON ha.Allergy = at.Allergy  WHERE s.Sex = 'M' AND at.AllergyType = 'Food';
SELECT DISTINCT S.Fname, S.city_code  FROM Student S  JOIN Has_Allergy H ON S.StuID = H.StuID  JOIN Allergy_Type A ON H.Allergy = A.Allergy  WHERE A.Allergy IN ('Milk', 'Cat');
SELECT DISTINCT S.Fname, S.city_code  FROM Student S  JOIN Has_Allergy H ON S.StuID = H.StuID  JOIN Allergy_Type A ON H.Allergy = A.Allergy  WHERE A.Allergy IN ('milk', 'cat');
SELECT COUNT(*)  FROM Student  WHERE Age > 18 AND StuID NOT IN (     SELECT Has_Allergy.StuID      FROM Has_Allergy      JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy      WHERE AllergyType IN ('Food', 'Animal') );
SELECT COUNT(*)  FROM Student  WHERE Age > 18 AND StuID NOT IN (     SELECT Has_Allergy.StuID      FROM Has_Allergy     JOIN Allergy_Type ON Has_Allergy.Allergy = Allergy_Type.Allergy     WHERE AllergyType IN ('food', 'animal') );
SELECT S.Fname, S.Major  FROM Student S  WHERE NOT EXISTS (     SELECT HA.StuID      FROM Has_Allergy HA      JOIN Allergy_Type AT ON HA.Allergy = AT.Allergy      WHERE S.StuID = HA.StuID AND AT.Allergy = 'soy' );
SELECT S.Fname, S.Major  FROM Student S  WHERE NOT EXISTS (     SELECT HA.StuID      FROM Has_Allergy HA      JOIN Allergy_Type AT ON HA.Allergy = AT.Allergy      WHERE S.StuID = HA.StuID AND AT.AllergyType = 'soy' );
SELECT billing_country, COUNT(*) as num_invoices FROM invoices GROUP BY billing_country ORDER BY num_invoices DESC LIMIT 5;
SELECT billing_country, COUNT(*) as invoice_count  FROM invoices  GROUP BY billing_country  ORDER BY invoice_count DESC  LIMIT 5;
SELECT      billing_country,     SUM(total) as Gross_Invoice_Size FROM      invoices  GROUP BY      billing_country ORDER BY      Gross_Invoice_Size DESC LIMIT 8;
SELECT      billing_country,     SUM(total) as total_invoice_size FROM      invoices GROUP BY      billing_country ORDER BY      total_invoice_size DESC LIMIT 8;
SELECT T1.country, AVG(T2.total) AS AvgInvoiceSize  FROM customers AS T1  JOIN invoices AS T2 ON T1.id = T2.customer_id  GROUP BY T1.country  ORDER BY AvgInvoiceSize DESC  LIMIT 10;
SELECT billing_country, AVG(total) as avg_invoice_size  FROM invoices  GROUP BY billing_country  ORDER BY avg_invoice_size DESC  LIMIT 10;
SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id ORDER BY T2.invoice_date DESC LIMIT 5;
SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id ORDER BY T2.invoice_date DESC LIMIT 5;
SELECT c.first_name, c.last_name, COUNT(i.id) as total_orders FROM customers c  JOIN invoices i ON c.id = i.customer_id GROUP BY c.id ORDER BY total_orders DESC LIMIT 10;
SELECT c.first_name, c.last_name, COUNT(i.id) as order_count  FROM customers c  JOIN invoices i ON c.id = i.customer_id  GROUP BY c.id  ORDER BY order_count DESC  LIMIT 10;
SELECT T1.first_name, T1.last_name, SUM(T2.total) as total_gross_sales FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.id ORDER BY total_gross_sales DESC LIMIT 10;
SELECT c.first_name, c.last_name, SUM(il.quantity * il.unit_price) as gross_sales FROM customers c JOIN invoices i ON c.id = i.customer_id JOIN invoice_lines il ON i.id = il.invoice_id GROUP BY c.id ORDER BY gross_sales DESC LIMIT 10;
SELECT g.name, COUNT(t.id) as total_tracks FROM genres g JOIN tracks t ON g.id = t.genre_id GROUP BY g.name ORDER BY total_tracks DESC LIMIT 5;
SELECT g.name, COUNT(t.id) as track_count FROM genres g JOIN tracks t ON g.id = t.genre_id GROUP BY g.id ORDER BY track_count DESC LIMIT 5;
SELECT title FROM albums;
SELECT title FROM albums;
SELECT title FROM albums ORDER BY title ASC;
SELECT title FROM albums ORDER BY title ASC;
SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title ASC;
SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;
SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id ORDER BY T2.total ASC LIMIT 10;
SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id ORDER BY T2.total LIMIT 10;
SELECT SUM(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL';
SELECT SUM(total) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL';
SELECT COUNT(*) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL';
SELECT COUNT(*) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL';
SELECT billing_state, COUNT(*)  FROM invoices  WHERE billing_country = 'USA'  GROUP BY billing_state;
SELECT billing_state, COUNT(*)  FROM invoices  WHERE billing_state IS NOT NULL  GROUP BY billing_state;
SELECT billing_state, COUNT(*) as invoice_count  FROM invoices  WHERE billing_country = 'USA'  GROUP BY billing_state  ORDER BY invoice_count DESC  LIMIT 1;
SELECT billing_state, COUNT(*) as total_invoices  FROM invoices  WHERE billing_state IS NOT NULL  GROUP BY billing_state  ORDER BY total_invoices DESC  LIMIT 1;
SELECT COUNT(invoice_id), SUM(total)  FROM invoices  WHERE billing_state = 'CA';
SELECT COUNT(*), SUM(total) FROM invoices WHERE billing_state = 'CA';
SELECT albums.title  FROM albums  JOIN artists ON albums.artist_id = artists.id  WHERE artists.name = 'Aerosmith';
SELECT albums.title  FROM albums  JOIN artists ON albums.artist_id = artists.id  WHERE artists.name = 'Aerosmith';
SELECT COUNT(*) FROM albums WHERE artist_id = (SELECT id FROM artists WHERE name = 'Billy Cobham');
SELECT COUNT(*) FROM albums WHERE artist_id = (SELECT id FROM artists WHERE name = 'Billy Cobam');
SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins';
SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martins';
SELECT email, phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber';
SELECT email, phone FROM customers WHERE first_name = 'Astrid' AND last_name = 'Gruber';
SELECT COUNT(*) FROM customers WHERE city = 'Prague';
SELECT COUNT(*) FROM customers WHERE city = 'Prague';
SELECT COUNT(*) FROM customers WHERE state = 'CA';
SELECT COUNT(*) FROM customers WHERE state = 'California';
SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida';
SELECT country FROM customers WHERE first_name = 'Roberto' AND last_name = 'Almeida';
SELECT albums.title  FROM albums  JOIN artists ON albums.artist_id = artists.id  WHERE artists.name LIKE '%Led%';
SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name LIKE '%Led%';
SELECT COUNT(*)  FROM customers  WHERE support_rep_id = (SELECT id FROM employees WHERE first_name = 'Steve' AND last_name = 'Johnson');
SELECT COUNT(*) FROM customers WHERE support_rep_id = (SELECT id FROM employees WHERE first_name = 'Steve' AND last_name = 'Johnson');
SELECT title, phone, hire_date FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';
SELECT title, phone, hire_date FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';
SELECT first_name, last_name  FROM employees  WHERE reports_to = (     SELECT id      FROM employees      WHERE first_name = 'Nancy' AND last_name = 'Edwards' );
SELECT T1.first_name, T1.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id WHERE T2.first_name = 'Nancy' AND T2.last_name = 'Edwards';
SELECT address FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';
SELECT address, city, state, country, postal_code  FROM employees  WHERE first_name = 'Nancy' AND last_name = 'Edwards';
SELECT E.first_name, E.last_name  FROM employees E JOIN customers C ON E.id = C.support_rep_id GROUP BY E.id ORDER BY COUNT(C.id) DESC LIMIT 1;
SELECT E.first_name, E.last_name FROM employees E JOIN customers C ON E.id = C.support_rep_id GROUP BY E.id ORDER BY COUNT(C.id) DESC LIMIT 1;
SELECT COUNT(*) FROM employees WHERE country = 'Canada';
SELECT COUNT(*) FROM employees WHERE country = 'Canada';
SELECT phone FROM employees WHERE first_name = 'Nancy' AND last_name = 'Edwards';
SELECT phone FROM customers WHERE first_name = 'Nancy' AND last_name = 'Edwards';
SELECT first_name, last_name FROM employees WHERE hire_date = (SELECT MAX(hire_date) FROM employees);
SELECT first_name, last_name FROM employees WHERE hire_date = (SELECT MAX(hire_date) FROM employees);
SELECT first_name, last_name  FROM employees  ORDER BY hire_date  LIMIT 10;
SELECT first_name, last_name FROM employees ORDER BY hire_date ASC LIMIT 10;
SELECT city, COUNT(*)  FROM employees  WHERE title = 'IT Staff'  GROUP BY city;
SELECT city, COUNT(*)  FROM employees  WHERE title = 'IT Staff'  GROUP BY city;
SELECT E1.first_name, E1.last_name, COUNT(E2.id) AS NumberOfReports  FROM employees E1  LEFT JOIN employees E2 ON E1.id = E2.reports_to  GROUP BY E1.id  ORDER BY NumberOfReports DESC  LIMIT 1;
SELECT E1.first_name, E1.last_name, COUNT(E2.id) as NumberOfReports FROM employees E1 LEFT JOIN employees E2 ON E1.id = E2.reports_to GROUP BY E1.id;
SELECT COUNT(*) FROM invoices WHERE customer_id = (SELECT id FROM customers WHERE first_name = 'Lucas' AND last_name = 'Mancini');
SELECT COUNT(*) FROM invoices WHERE customer_id = (SELECT id FROM customers WHERE first_name = 'Luca' AND last_name = 'Mancini');
SELECT SUM(i.total)  FROM invoices i  JOIN customers c ON i.customer_id = c.id  WHERE c.first_name = 'Lucas' AND c.last_name = 'Mancini';
SELECT SUM(i.total)  FROM invoices i JOIN customers c ON i.customer_id = c.id WHERE c.first_name = 'Lucas' AND c.last_name = 'Mancini';
SELECT * FROM media_types;
SELECT name FROM media_types;
SELECT DISTINCT name FROM genres;
SELECT DISTINCT name FROM genres;
SELECT name FROM playlists;
SELECT name FROM playlists;
SELECT composer FROM tracks WHERE name = 'Fast As a Shark';
SELECT T1.composer FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id WHERE T1.name = 'Fast As a Shark';
SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark';
SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark';
SELECT tracks.name FROM tracks JOIN genres ON tracks.genre_id = genres.id WHERE genres.name = 'Rock';
SELECT T1.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id WHERE T2.name = 'Rock';
SELECT albums.title  FROM albums  JOIN tracks ON albums.id = tracks.album_id  WHERE tracks.name = 'Balls to the Wall';
SELECT albums.title  FROM albums  JOIN tracks ON albums.id = tracks.album_id  WHERE tracks.name = 'Ball to the Wall';
SELECT T1.name FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id WHERE T2.title = 'Balls to the Wall';
SELECT T1.name FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id = T2.id WHERE T2.title = 'Balls to the Wall';
SELECT A.title  FROM albums A WHERE A.id IN (     SELECT T.album_id      FROM tracks T      GROUP BY T.album_id      HAVING COUNT(T.id) > 10 );
SELECT a.title FROM albums a WHERE a.id IN (     SELECT alb_id     FROM (         SELECT album_id as alb_id, COUNT(*) as cnt         FROM tracks         GROUP BY album_id     ) AS t     WHERE cnt > 10 );
SELECT tracks.name FROM tracks  JOIN genres ON tracks.genre_id = genres.id  JOIN media_types ON tracks.media_type_id = media_types.id  WHERE genres.name = 'Rock' AND media_types.name = 'MPEG audio file';
SELECT T1.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id JOIN media_types AS T3 ON T1.media_type_id = T3.id WHERE T2.name = 'Rock' AND T3.name = 'MPEG audio file';
SELECT T1.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id JOIN media_types AS T3 ON T1.media_type_id = T3.id WHERE T2.name = 'Rock' OR T3.name = 'MPEG audio file';
SELECT tracks.name FROM tracks  JOIN genres ON tracks.genre_id = genres.id  JOIN media_types ON tracks.media_type_id = media_types.id  WHERE genres.name = 'Rock' AND media_types.name = 'MPEG audio file'
SELECT T1.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id WHERE T2.name = 'Rock' OR T2.name = 'Jazz';
SELECT T1.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id WHERE T2.name = 'Rock' OR T2.name = 'Jazz';
SELECT T3.name FROM playlists AS T1  JOIN playlist_tracks AS T2 ON T1.id = T2.playlist_id  JOIN tracks AS T3 ON T2.track_id = T3.id  WHERE T1.name = 'Movies';
SELECT T3.name FROM playlists AS T1  JOIN playlist_tracks AS T2 ON T1.id = T2.playlist_id  JOIN tracks AS T3 ON T2.track_id = T3.id  WHERE T1.name = 'Movies';
SELECT P.name FROM playlists P JOIN playlist_tracks PT ON P.id = PT.playlist_id GROUP BY P.id HAVING COUNT(PT.track_id) > 100;
SELECT T1.name FROM playlists AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.playlist_id GROUP BY T1.id HAVING COUNT(T2.track_id) > 100;
SELECT T.name  FROM tracks T JOIN invoice_lines IL ON T.id = IL.track_id JOIN invoices I ON IL.invoice_id = I.id JOIN customers C ON I.customer_id = C.id WHERE C.first_name = 'Daan' AND C.last_name = 'Peeters';
SELECT T1.name FROM tracks AS T1  JOIN invoice_lines AS T2 ON T1.id = T2.track_id  JOIN invoices AS T3 ON T3.id = T2.invoice_id  JOIN customers AS T4 ON T4.id = T3.customer_id  WHERE T4.first_name = 'Dean' AND T4.last_name = 'Peeters';
SELECT tracks.unit_price  FROM tracks  WHERE tracks.name = 'Fast As a Shark';
SELECT unit_price FROM tracks WHERE name = 'Fast As a Shark';
SELECT T1.name  FROM tracks AS T1  JOIN playlist_tracks AS T2 ON T1.id = T2.track_id  JOIN playlists AS T3 ON T2.playlist_id = T3.id  WHERE T3.name = 'Movies'  EXCEPT  SELECT T1.name  FROM tracks AS T1  JOIN playlist_tracks AS T2 ON T1.id = T2.track_id  JOIN playlists AS T3 ON T2.playlist_id = T3.id  WHERE T3.name = 'Music'
SELECT T1.name  FROM tracks AS T1  JOIN playlist_tracks AS T2 ON T1.id = T2.track_id  JOIN playlists AS T3 ON T2.playlist_id = T3.id  WHERE T3.name = 'Movies'  EXCEPT  SELECT T1.name  FROM tracks AS T1  JOIN playlist_tracks AS T2 ON T1.id = T2.track_id  JOIN playlists AS T3 ON T2.playlist_id = T3.id  WHERE T3.name = 'Music'
SELECT T1.name  FROM tracks AS T1  JOIN playlist_tracks AS T2 ON T1.id = T2.track_id  JOIN playlists AS T3 ON T2.playlist_id = T3.id  WHERE T3.name IN ('Movies', 'Music')  GROUP BY T1.name  HAVING COUNT(DISTINCT T3.name) > 1;
SELECT T.name FROM tracks T WHERE T.id IN (SELECT PT1.track_id FROM playlist_tracks PT1 JOIN playlists P1 ON PT1.playlist_id = P1.id WHERE P1.name = 'Movies') AND T.id IN (SELECT PT2.track_id FROM playlist_tracks PT2 JOIN playlists P2 ON PT2.playlist_id = P2.id WHERE P2.name = 'music')
SELECT genres.name, COUNT(tracks.id)  FROM tracks  JOIN genres ON tracks.genre_id = genres.id  GROUP BY genres.name;
SELECT g.name, COUNT(t.id) as track_count FROM genres g JOIN tracks t ON g.id = t.genre_id GROUP BY g.name;
SELECT COUNT(*) FROM editor;
SELECT Name  FROM editor  ORDER BY Age ASC;
SELECT Name, Age FROM editor;
SELECT Name  FROM editor  WHERE Age > 25;
SELECT Name  FROM editor  WHERE Age IN (24, 25);
SELECT Name  FROM editor  ORDER BY Age  LIMIT 1;
SELECT Age, COUNT(*)  FROM editor  GROUP BY Age;
SELECT Age, COUNT(*) AS Count_Age  FROM editor  GROUP BY Age  ORDER BY Count_Age DESC  LIMIT 1;
SELECT DISTINCT Theme FROM journal;
SELECT editor.Name, journal.Theme  FROM editor  JOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID  JOIN journal ON journal.Journal_ID = journal_committee.Journal_ID;
SELECT editor.Name, journal.Theme  FROM journal_committee  JOIN editor ON journal_committee.Editor_ID = editor.Editor_ID  JOIN journal ON journal_committee.Journal_ID = journal.Journal_ID;
SELECT E.Name, E.Age, J.Theme FROM editor E JOIN journal_committee JC ON E.Editor_ID = JC.Editor_ID JOIN journal J ON JC.Journal_ID = J.Journal_ID ORDER BY J.Theme ASC;
SELECT e.Name  FROM editor e JOIN journal_committee jc ON e.Editor_ID = jc.Editor_ID JOIN journal j ON jc.Journal_ID = j.Journal_ID WHERE j.Sales > 3000;
SELECT E.Editor_ID, E.Name, COUNT(JC.Journal_ID)  FROM editor E  LEFT JOIN journal_committee JC ON E.Editor_ID = JC.Editor_ID  GROUP BY E.Editor_ID, E.Name;
SELECT e.Name  FROM editor e JOIN journal_committee jc ON e.Editor_ID = jc.Editor_ID GROUP BY e.Editor_ID, e.Name HAVING COUNT(jc.Journal_ID) >= 2;
SELECT Name  FROM editor  WHERE Editor_ID NOT IN (SELECT Editor_ID FROM journal_committee)
SELECT Date, Theme, Sales  FROM journal  WHERE Journal_ID NOT IN (SELECT Journal_ID FROM journal_committee)
SELECT AVG(T1.Sales)  FROM journal AS T1  JOIN journal_committee AS T2 ON T1.Journal_ID = T2.Journal_ID  WHERE T2.Work_Type = 'Photo';
SELECT COUNT(*) FROM Accounts;
SELECT COUNT(*) FROM Accounts;
SELECT account_id, customer_id, account_name  FROM Accounts;
SELECT account_id, customer_id, account_name  FROM Accounts;
SELECT other_account_details  FROM Accounts  WHERE account_name = '338';
SELECT other_account_details  FROM Accounts  WHERE account_name = '338';
SELECT Customers.customer_first_name, Customers.customer_last_name, Customers.customer_phone  FROM Customers  JOIN Accounts ON Customers.customer_id = Accounts.customer_id  WHERE Accounts.account_name = '162';
SELECT Customers.customer_first_name, Customers.customer_last_name, Customers.customer_phone  FROM Customers  JOIN Accounts ON Customers.customer_id = Accounts.customer_id  WHERE Accounts.account_name = '162';
SELECT COUNT(*)  FROM Accounts  JOIN Customers ON Accounts.customer_id = Customers.customer_id  WHERE Customers.customer_first_name = 'Art' AND Customers.customer_last_name = 'Turcotte';
SELECT COUNT(*)  FROM Accounts  WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_first_name = 'Art' AND customer_last_name = 'Turcotte');
SELECT customer_id, COUNT(account_id)  FROM Accounts  GROUP BY customer_id;
SELECT customer_id, COUNT(account_id) as numberOfAccounts FROM Accounts GROUP BY customer_id;
SELECT customer_id, COUNT(account_id) AS num_of_accounts FROM Accounts GROUP BY customer_id ORDER BY num_of_accounts DESC LIMIT 1;
SELECT T1.customer_id, COUNT(T2.account_id) AS num_of_accounts  FROM Customers AS T1  JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id  GROUP BY T1.customer_id  ORDER BY num_of_accounts DESC  LIMIT 1;
SELECT C.customer_first_name, C.customer_last_name, C.customer_id FROM Customers C JOIN Accounts A ON C.customer_id = A.customer_id GROUP BY C.customer_id, C.customer_first_name, C.customer_last_name HAVING COUNT(A.account_id) = (     SELECT MIN(num_accounts)     FROM (         SELECT COUNT(account_id) AS num_accounts         FROM Accounts         GROUP BY customer_id     ) AS subquery )
SELECT C.customer_id, C.customer_first_name, C.customer_last_name  FROM Customers C JOIN (   SELECT A.customer_id, COUNT(*) AS num_accounts   FROM Accounts A   GROUP BY A.customer_id ) AS AC ON C.customer_id = AC.customer_id WHERE AC.num_accounts = (   SELECT MIN(num_accounts)   FROM (     SELECT COUNT(*) AS num_accounts     FROM Accounts     GROUP BY customer_id   ) ) LIMIT 1;
SELECT COUNT(*)  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)
SELECT COUNT(*)  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)
SELECT customer_first_name, customer_last_name  FROM Customers  WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Accounts)
SELECT Customers.customer_first_name, Customers.customer_last_name  FROM Customers  LEFT JOIN Accounts ON Customers.customer_id = Accounts.customer_id  WHERE Accounts.account_id IS NULL;
SELECT DISTINCT c.customer_first_name, c.customer_last_name  FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id;
SELECT Customers.customer_first_name, Customers.customer_last_name  FROM Accounts JOIN Customers ON Accounts.customer_id = Customers.customer_id;
SELECT COUNT(DISTINCT customer_id)  FROM Accounts;
SELECT COUNT(DISTINCT customer_id)  FROM Accounts;
SELECT COUNT(*) FROM Customers;
SELECT COUNT(*) FROM Customers;
SELECT customer_id, customer_first_name, customer_last_name, customer_phone  FROM Customers;
SELECT customer_id, customer_first_name, customer_last_name, customer_phone  FROM Customers;
SELECT customer_phone, customer_email  FROM Customers  WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest';
SELECT customer_phone, customer_email  FROM Customers  WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest';
SELECT COUNT(*) FROM Customers_Cards;
SELECT COUNT(*) FROM Customers_Cards;
SELECT card_id, customer_id, card_type_code, card_number  FROM Customers_Cards;
SELECT card_id, customer_id, card_type_code, card_number  FROM Customers_Cards;
SELECT date_valid_from, date_valid_to  FROM Customers_Cards  WHERE card_number = '4560596484842';
SELECT date_valid_from, date_valid_to  FROM Customers_Cards  WHERE card_number = '4560596484842';
SELECT Customers.customer_first_name, Customers.customer_last_name, Customers.customer_phone  FROM Customers  JOIN Customers_Cards ON Customers.customer_id = Customers_Cards.customer_id  WHERE Customers_Cards.card_number = '4560596484842';
SELECT Customers.customer_first_name, Customers.customer_last_name, Customers.customer_phone  FROM Customers JOIN Customers_Cards ON Customers.customer_id = Customers_Cards.customer_id  WHERE Customers_Cards.card_number = '4560596484842';
SELECT COUNT(*)  FROM Customers_Cards  WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_first_name = 'Art' AND customer_last_name = 'Turcotte');
SELECT COUNT(*)  FROM Customers_Cards  WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_first_name = 'Art' AND customer_last_name = 'Turcotte');
SELECT COUNT(*)  FROM Customers_Cards  WHERE card_type_code = 'debit';
SELECT COUNT(*)  FROM Customers_Cards  WHERE card_type_code = 'Debit';
SELECT COUNT(*)  FROM Customers_Cards  WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_first_name = 'Blanche' AND customer_last_name = 'Huels') AND card_type_code = 'Credit';
SELECT COUNT(*)  FROM Customers_Cards  JOIN Customers ON Customers_Cards.customer_id = Customers.customer_id  WHERE Customers.customer_first_name = 'Blanche'  AND Customers.customer_last_name = 'Huels'  AND Customers_Cards.card_type_code = 'Credit';
SELECT Customers.customer_id, COUNT(Customers_Cards.card_id) AS number_of_cards FROM Customers JOIN Customers_Cards ON Customers.customer_id = Customers_Cards.customer_id GROUP BY Customers.customer_id;
SELECT customer_id, COUNT(card_id) as number_of_cards FROM Customers_Cards GROUP BY customer_id;
SELECT customer_id, COUNT(card_id) as num_cards FROM Customers_Cards GROUP BY customer_id ORDER BY num_cards DESC LIMIT 1;
SELECT CC.customer_id, COUNT(CC.card_id) AS num_of_cards FROM Customers_Cards CC GROUP BY CC.customer_id ORDER BY num_of_cards DESC LIMIT 1;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN (     SELECT customer_id      FROM Customers_Cards      GROUP BY customer_id      HAVING COUNT(card_id) >= 2 ) cc ON c.customer_id = cc.customer_id;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Customers_Cards cc ON c.customer_id = cc.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name HAVING COUNT(cc.card_id) >= 2;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name  FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id  GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name  ORDER BY COUNT(a.account_id)  LIMIT 1;
SELECT C.customer_id, C.customer_first_name, C.customer_last_name  FROM Customers C JOIN Accounts A ON C.customer_id = A.customer_id GROUP BY C.customer_id, C.customer_first_name, C.customer_last_name ORDER BY COUNT(A.account_id) ASC LIMIT 1;
SELECT card_type_code, COUNT(card_id) AS numberOfCards FROM Customers_Cards GROUP BY card_type_code;
SELECT card_type_code, COUNT(card_id) AS number_of_cards FROM Customers_Cards GROUP BY card_type_code;
SELECT card_type_code, COUNT(card_id) AS num_of_cards FROM Customers_Cards GROUP BY card_type_code ORDER BY num_of_cards DESC LIMIT 1;
SELECT card_type_code  FROM Customers_Cards  GROUP BY card_type_code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT card_type_code  FROM Customers_Cards  GROUP BY card_type_code  HAVING COUNT(card_id) >= 5;
SELECT card_type_code  FROM Customers_Cards  GROUP BY card_type_code  HAVING COUNT(card_id) >= 5;
SELECT card_type_code, COUNT(customer_id) AS numberOfCustomers FROM Customers_Cards GROUP BY card_type_code;
SELECT card_type_code, COUNT(DISTINCT customer_id) AS num_customers FROM Customers_Cards GROUP BY card_type_code;
SELECT c.customer_id, c.customer_first_name  FROM Customers c LEFT JOIN Customers_Cards cc ON c.customer_id = cc.customer_id  WHERE cc.card_id IS NULL OR cc.card_type_code != 'Credit' GROUP BY c.customer_id, c.customer_first_name HAVING COUNT(cc.card_id) = 0 OR MAX(cc.card_type_code) != 'Credit';
SELECT c.customer_id, c.customer_first_name  FROM Customers c WHERE c.customer_id NOT IN (     SELECT cc.customer_id      FROM Customers_Cards cc      WHERE cc.card_type_code = 'Credit' );
SELECT DISTINCT card_type_code FROM Customers_Cards;
SELECT DISTINCT card_type_code FROM Customers_Cards;
SELECT COUNT(DISTINCT card_type_code) FROM Customers_Cards;
SELECT COUNT(DISTINCT card_type_code) FROM Customers_Cards;
SELECT DISTINCT transaction_type FROM Financial_Transactions;
SELECT DISTINCT transaction_type FROM Financial_Transactions;
SELECT COUNT(DISTINCT transaction_type) FROM Financial_Transactions;
SELECT COUNT(DISTINCT transaction_type) FROM Financial_Transactions;
SELECT AVG(transaction_amount) AS average_transaction_amount,         SUM(transaction_amount) AS total_transaction_amount  FROM Financial_Transactions;
SELECT AVG(transaction_amount) AS average_transaction_amount, SUM(transaction_amount) AS total_transaction_amount  FROM Financial_Transactions;
SELECT cc.card_type_code, COUNT(ft.transaction_id)  FROM Customers_Cards cc  LEFT JOIN Financial_Transactions ft ON cc.card_id = ft.card_id  GROUP BY cc.card_type_code;
SELECT cc.card_type_code, COUNT(ft.transaction_id) AS transaction_count FROM Customers_Cards cc JOIN Financial_Transactions ft ON cc.card_id = ft.card_id GROUP BY cc.card_type_code;
SELECT transaction_type, COUNT(*) as number_of_transactions  FROM Financial_Transactions  GROUP BY transaction_type;
SELECT transaction_type, COUNT(*) as transaction_count FROM Financial_Transactions GROUP BY transaction_type;
SELECT transaction_type, SUM(transaction_amount) as total_amount  FROM Financial_Transactions  GROUP BY transaction_type  ORDER BY total_amount DESC  LIMIT 1;
SELECT transaction_type, SUM(transaction_amount) as total_amount FROM Financial_Transactions GROUP BY transaction_type ORDER BY total_amount DESC LIMIT 1;
SELECT Accounts.account_id, COUNT(Financial_Transactions.transaction_id) AS transaction_count FROM Accounts  JOIN Financial_Transactions  ON Accounts.account_id = Financial_Transactions.account_id GROUP BY Accounts.account_id;
SELECT account_id, COUNT(*) as transaction_count  FROM Financial_Transactions  GROUP BY account_id;
SELECT COUNT(*) FROM track;
SELECT COUNT(*) FROM track;
SELECT Name, Location FROM track;
SELECT Name, Location FROM track;
SELECT Name, Seating  FROM track  WHERE Year_Opened > 2000  ORDER BY Seating;
SELECT Name, Seating  FROM track  WHERE Year_Opened > 2000  ORDER BY Seating;
SELECT Name, Location, Seating  FROM track  ORDER BY Year_Opened DESC  LIMIT 1;
SELECT Name, Location, Seating  FROM track  WHERE Year_Opened = (SELECT MAX(Year_Opened) FROM track);
SELECT MIN(Seating) as Min_Seating, MAX(Seating) as Max_Seating, AVG(Seating) as Avg_Seating  FROM track;
SELECT MIN(Seating) as Min_Seating, MAX(Seating) as Max_Seating, AVG(Seating) as Avg_Seating  FROM track;
SELECT Name, Location, Year_Opened  FROM track  WHERE Seating > (SELECT AVG(Seating) FROM track);
SELECT Name, Location, Year_Opened  FROM track  WHERE Seating > (SELECT AVG(Seating) FROM track);
SELECT DISTINCT Location FROM track;
SELECT DISTINCT Location FROM track;
SELECT COUNT(*) FROM race;
SELECT COUNT(*) FROM race;
SELECT DISTINCT Class FROM race;
SELECT DISTINCT Class FROM race;
SELECT Name, Class, Date FROM race;
SELECT Name, Class, Date FROM race;
SELECT Class, COUNT(*) AS NumberOfRaces FROM race GROUP BY Class;
SELECT Class, COUNT(*)  FROM race  GROUP BY Class;
SELECT Class  FROM race  GROUP BY Class  ORDER BY COUNT(Race_ID) DESC  LIMIT 1;
SELECT Class  FROM race  GROUP BY Class  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Class  FROM race  GROUP BY Class  HAVING COUNT(Race_ID) >= 2;
SELECT Class  FROM race  GROUP BY Class  HAVING COUNT(Race_ID) >= 2;
SELECT T2.Name  FROM track AS T2  WHERE NOT EXISTS (     SELECT *      FROM race AS T1      WHERE T1.Track_ID = T2.Track_ID AND T1.Class = 'GT' )
SELECT T1.Name  FROM track AS T1  LEFT JOIN race AS T2 ON T1.Track_ID = T2.Track_ID  WHERE T2.Class != 'GT' OR T2.Class IS NULL GROUP BY T1.Track_ID HAVING COUNT(T2.Race_ID) = 0
SELECT Name  FROM track  WHERE Track_ID NOT IN (SELECT Track_ID FROM race);
SELECT Name  FROM track  WHERE Track_ID NOT IN (SELECT Track_ID FROM race);
SELECT Year_Opened  FROM track  WHERE Seating >= 5000 INTERSECT  SELECT Year_Opened  FROM track  WHERE Seating <= 4000;
SELECT Year_Opened  FROM track  WHERE Seating BETWEEN 4000 AND 5000;
SELECT T2.Name, COUNT(T1.Race_ID) FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID GROUP BY T2.Name;
SELECT T2.Name, COUNT(T1.Race_ID)  FROM race AS T1  JOIN track AS T2  ON T1.Track_ID = T2.Track_ID  GROUP BY T1.Track_ID;
SELECT T2.Name  FROM race AS T1  JOIN track AS T2  ON T1.Track_ID = T2.Track_ID  GROUP BY T2.Name  ORDER BY COUNT(T1.Race_ID) DESC  LIMIT 1;
SELECT T2.Name  FROM race AS T1  JOIN track AS T2 ON T1.Track_ID = T2.Track_ID  GROUP BY T1.Track_ID  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT race.Name, race.Date, track.Name  FROM race  JOIN track ON race.Track_ID = track.Track_ID;
SELECT race.Name AS Race_Name, race.Date, track.Name AS Track_Name  FROM race  JOIN track ON race.Track_ID = track.Track_ID;
SELECT T2.Name, T2.Location  FROM race AS T1  JOIN track AS T2  ON T1.Track_ID = T2.Track_ID  GROUP BY T1.Track_ID  HAVING COUNT(*) = 1;
SELECT T2.Name, T2.Location  FROM race AS T1  JOIN track AS T2  ON T1.Track_ID = T2.Track_ID  GROUP BY T1.Track_ID  HAVING COUNT(*) = 1;
SELECT T1.Location  FROM track AS T1  JOIN track AS T2 ON T1.Location = T2.Location  WHERE T1.Seating > 90000 AND T2.Seating < 70000 GROUP BY T1.Location HAVING COUNT(*) >= 2;
SELECT Location  FROM track  WHERE Seating > 90000  INTERSECT  SELECT Location  FROM track  WHERE Seating < 70000;
SELECT COUNT(*)  FROM member  WHERE Membership_card = 'Black';
SELECT Address, COUNT(*) AS Num_of_Members  FROM member  GROUP BY Address;
SELECT Name  FROM member  WHERE Address IN ('Harford', 'Waterbury');
SELECT Member_ID, Name  FROM member  WHERE Age < 30 OR Membership_card = 'Black';
SELECT Time_of_purchase, Age, Address  FROM member  ORDER BY Time_of_purchase;
SELECT Membership_card, COUNT(*) AS num_members FROM member GROUP BY Membership_card HAVING num_members > 5;
SELECT Address  FROM member  WHERE Age < 30  INTERSECT  SELECT Address  FROM member  WHERE Age > 40;
SELECT T1.Membership_card  FROM member AS T1  WHERE T1.Address = 'Hartford'  INTERSECT  SELECT T1.Membership_card  FROM member AS T1  WHERE T1.Address = 'Waterbury'
SELECT COUNT(*) FROM member WHERE Address <> 'Hartford';
SELECT Address  FROM shop  WHERE NOT EXISTS (     SELECT *      FROM member      WHERE shop.Address = member.Address AND member.Membership_card = 'black' )
SELECT Address FROM coffee_shop.shop ORDER BY Open_Year;
SELECT AVG(Score), AVG(Num_of_staff) FROM shop;
SELECT Shop_ID, Address  FROM shop  WHERE Score < (SELECT AVG(Score) FROM shop);
SELECT Address, Num_of_staff  FROM shop  WHERE Shop_ID NOT IN (SELECT DISTINCT Shop_ID FROM happy_hour);
SELECT T1.Shop_ID, T1.Address  FROM shop AS T1  JOIN happy_hour AS T2 ON T1.Shop_ID = T2.Shop_ID  WHERE T2.Month = 'May';
SELECT Shop_ID, COUNT(*) AS Num_of_HH FROM happy_hour GROUP BY Shop_ID ORDER BY Num_of_HH DESC LIMIT 1;
SELECT Month, COUNT(*) AS Total_Happy_Hours  FROM happy_hour  GROUP BY Month  ORDER BY Total_Happy_Hours DESC  LIMIT 1;
SELECT Month  FROM happy_hour  GROUP BY Month  HAVING COUNT(HH_ID) > 2;
SELECT COUNT(*) FROM Album;
SELECT COUNT(*) FROM Album;
SELECT Name FROM Genre;
SELECT DISTINCT Name FROM Genre;
SELECT * FROM Customer WHERE State = 'NY';
SELECT * FROM Customer WHERE State = 'NY';
SELECT FirstName, LastName FROM Employee WHERE City = 'Calgary';
SELECT FirstName, LastName FROM Employee WHERE City = 'Calgary';
SELECT DISTINCT BillingCountry FROM Invoice;
SELECT DISTINCT BillingCountry FROM Invoice;
SELECT Name FROM Artist WHERE Name LIKE '%a%';
SELECT Name FROM Artist WHERE Name LIKE '%a%';
SELECT Album.Title  FROM Album  JOIN Artist ON Album.ArtistId = Artist.ArtistId  WHERE Artist.Name = 'AC/DC';
SELECT A.Title  FROM Album A  JOIN Artist ART ON A.ArtistId = ART.ArtistId  WHERE ART.Name = 'AC/DC';
SELECT COUNT(*)  FROM Album  WHERE ArtistId = (SELECT ArtistId FROM Artist WHERE Name = 'Metallica');
SELECT COUNT(*)  FROM Album  WHERE ArtistId = (     SELECT ArtistId      FROM Artist      WHERE Name = 'Metallica' );
SELECT T2.Name  FROM Album AS T1  JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId  WHERE T1.Title = 'Balls to the Wall'
SELECT T2.Name  FROM Album AS T1  JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId  WHERE T1.Title = 'Balls to the Wall';
SELECT T2.Name, COUNT(T1.AlbumId) AS NumberOfAlbums FROM Album AS T1 JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY NumberOfAlbums DESC LIMIT 1;
SELECT T2.Name  FROM Album AS T1  JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId  GROUP BY T2.Name  ORDER BY COUNT(T1.AlbumId) DESC  LIMIT 1;
SELECT Name  FROM Track  WHERE Name LIKE '%you%';
SELECT Name FROM Track WHERE Name LIKE '%you%';
SELECT AVG(UnitPrice) FROM Track;
SELECT AVG(UnitPrice) FROM Track;
SELECT MAX(Milliseconds) AS LongestTrack, MIN(Milliseconds) AS ShortestTrack FROM Track;
SELECT MAX(Milliseconds) AS MaxDuration, MIN(Milliseconds) AS MinDuration FROM Track;
SELECT A.AlbumId, A.Title, COUNT(T.TrackId) AS NumberOfTracks FROM Album A JOIN Track T ON A.AlbumId = T.AlbumId GROUP BY A.AlbumId, A.Title;
SELECT A.Title, A.AlbumId, COUNT(T.TrackId) AS NumberOfTracks FROM Album A JOIN Track T ON A.AlbumId = T.AlbumId GROUP BY A.AlbumId, A.Title;
SELECT T1.Name FROM Genre AS T1 JOIN Track AS T2 ON T1.GenreId = T2.GenreId GROUP BY T1.GenreId ORDER BY COUNT(T2.TrackId) DESC LIMIT 1;
SELECT T1.Name  FROM Genre AS T1  JOIN Track AS T2 ON T1.GenreId = T2.GenreId  GROUP BY T1.GenreId  ORDER BY COUNT(T2.TrackId) DESC  LIMIT 1;
SELECT MediaType.Name FROM MediaType JOIN Track ON MediaType.MediaTypeId = Track.MediaTypeId GROUP BY MediaType.Name ORDER BY COUNT(Track.TrackId) ASC LIMIT 1;
SELECT MediaType.Name FROM MediaType JOIN Track ON MediaType.MediaTypeId = Track.MediaTypeId GROUP BY MediaType.Name ORDER BY COUNT(Track.TrackId) ASC LIMIT 1;
SELECT Album.Title, Album.AlbumId  FROM Album  JOIN Track ON Album.AlbumId = Track.AlbumId  WHERE Track.UnitPrice > 1;
SELECT A.Title, A.AlbumId  FROM Album A  JOIN Track T ON A.AlbumId = T.AlbumId  WHERE T.UnitPrice > 1;
SELECT COUNT(*)  FROM Track  JOIN Genre ON Track.GenreId = Genre.GenreId  WHERE Genre.Name = 'Rock';
SELECT COUNT(*)  FROM Track  JOIN Genre ON Track.GenreId = Genre.GenreId  WHERE Genre.Name = 'Rock';
SELECT AVG(T.UnitPrice)  FROM Track T JOIN Genre G ON T.GenreId = G.GenreId WHERE G.Name = 'Jazz';
SELECT AVG(UnitPrice)  FROM Track  JOIN Genre ON Track.GenreId = Genre.GenreId  WHERE Genre.Name = 'Jazz';
SELECT FirstName, LastName FROM Customer WHERE Email = 'luisg@embraer.com.br';
SELECT FirstName, LastName FROM Customer WHERE Email = 'luisg@embraer.com.br';
SELECT COUNT(*) FROM Customer WHERE Email LIKE '%gmail.com';
SELECT COUNT(*) FROM Customer WHERE Email LIKE '%gmail.com';
SELECT E.FirstName, E.LastName  FROM Employee E JOIN Customer C ON E.EmployeeId = C.SupportRepId WHERE C.FirstName = 'Leonie';
SELECT E.FirstName, E.LastName  FROM Employee E JOIN Customer C ON E.EmployeeId = C.SupportRepId WHERE C.FirstName = 'Leonie';
SELECT T2.City FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = '70174'
SELECT DISTINCT E.City  FROM Employee E JOIN Customer C ON E.EmployeeId = C.SupportRepId WHERE C.PostalCode = '70174';
SELECT COUNT(DISTINCT City) FROM Employee;
SELECT COUNT(DISTINCT City) FROM Employee;
SELECT InvoiceDate  FROM Invoice  WHERE CustomerId IN (     SELECT CustomerId      FROM Customer      WHERE FirstName = 'Astrid' AND LastName = 'Gruber' );
SELECT InvoiceDate FROM Invoice WHERE CustomerId IN (SELECT CustomerId FROM Customer WHERE FirstName = 'Astrid' AND LastName = 'Gruber');
SELECT DISTINCT Customer.LastName  FROM Customer  WHERE NOT EXISTS (     SELECT *      FROM Invoice      WHERE Invoice.CustomerId = Customer.CustomerId AND Invoice.Total > 20 );
SELECT DISTINCT Customer.LastName  FROM Customer  LEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId  WHERE Invoice.Total <= 20 OR Invoice.CustomerId IS NULL;
SELECT DISTINCT C.FirstName  FROM Customer C  JOIN Invoice I ON C.CustomerId = I.CustomerId  WHERE C.Country = 'Brazil';
SELECT DISTINCT c.FirstName  FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId WHERE c.Country = 'Brazil';
SELECT DISTINCT C.Address  FROM Customer C JOIN Invoice I ON C.CustomerId = I.CustomerId  WHERE C.Country = 'Germany';
SELECT DISTINCT c.Address  FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId  WHERE c.Country = 'Germany';
SELECT Phone FROM Employee;
SELECT Phone FROM Employee;
SELECT COUNT(*)  FROM Track  WHERE MediaTypeId = (     SELECT MediaTypeId      FROM MediaType      WHERE Name = 'AAC audio file' );
SELECT COUNT(*)  FROM Track  JOIN MediaType ON Track.MediaTypeId = MediaType.MediaTypeId  WHERE MediaType.Name = 'AAC audio file';
SELECT AVG(Milliseconds)  FROM Track  WHERE GenreId IN (     SELECT GenreId      FROM Genre      WHERE Name IN ('Latin', 'Pop') );
SELECT AVG(T2.Milliseconds)  FROM Genre T1  JOIN Track T2 ON T1.GenreId = T2.GenreId  WHERE T1.Name = 'Latin' OR T1.Name = 'Pop';
SELECT T1.FirstName, T1.EmployeeId FROM Employee AS T1 JOIN Customer AS T2 ON T1.EmployeeId = T2.SupportRepId GROUP BY T1.EmployeeId HAVING COUNT(T2.CustomerId) >= 10;
SELECT T1.FirstName, T1.EmployeeId FROM Employee AS T1 JOIN Customer AS T2 ON T1.EmployeeId = T2.SupportRepId GROUP BY T1.EmployeeId HAVING COUNT(T2.CustomerId) >= 10;
SELECT Employee.LastName, COUNT(Customer.CustomerId) AS CustomerCount FROM Employee JOIN Customer ON Employee.EmployeeId = Customer.SupportRepId GROUP BY Employee.LastName HAVING CustomerCount <= 20;
SELECT T1.LastName  FROM Employee AS T1  JOIN Customer AS T2 ON T1.EmployeeId = T2.SupportRepId  GROUP BY T1.EmployeeId  HAVING COUNT(T2.CustomerId) <= 20;
SELECT Title FROM Album ORDER BY Title ASC;
SELECT Title  FROM Album  ORDER BY Title ASC;
SELECT T2.Name, T1.ArtistId FROM Album AS T1 JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T1.ArtistId HAVING COUNT(T1.AlbumId) >= 3 ORDER BY T2.Name;
SELECT A.Name, B.ArtistId FROM (     SELECT ArtistId, COUNT(*) as num_albums     FROM Album     GROUP BY ArtistId     HAVING COUNT(*) >= 3 ) B JOIN Artist A ON A.ArtistId = B.ArtistId ORDER BY A.Name;
SELECT Name  FROM Artist  WHERE ArtistId NOT IN (SELECT ArtistId FROM Album);
SELECT Name  FROM Artist  WHERE ArtistId NOT IN (SELECT ArtistId FROM Album)
SELECT AVG(UnitPrice)  FROM Track  JOIN Genre ON Track.GenreId = Genre.GenreId  WHERE Genre.Name = 'Rock';
SELECT AVG(T.UnitPrice)  FROM Track T JOIN Genre G ON T.GenreId = G.GenreId WHERE G.Name = 'Rock';
SELECT      MAX(T3.Milliseconds) AS Longest_Pop_Track,     MIN(T3.Milliseconds) AS Shortest_Pop_Track FROM      Genre T1 INNER JOIN      Track T3 ON T1.GenreId = T3.GenreId WHERE      T1.Name = 'Pop';
SELECT MAX(T2.Milliseconds) AS MaxMilliseconds, MIN(T2.Milliseconds) AS MinMilliseconds  FROM Genre T1  JOIN Track T2 ON T1.GenreId = T2.GenreId  WHERE T1.Name = 'Pop';
SELECT BirthDate FROM Employee WHERE City = 'Edmonton';
SELECT BirthDate FROM Employee WHERE City = 'Edmonton';
SELECT DISTINCT(UnitPrice) FROM Track;
SELECT DISTINCT UnitPrice FROM Track;
SELECT COUNT(*)  FROM Artist  WHERE ArtistId NOT IN (SELECT ArtistId FROM Album)
SELECT COUNT(*)  FROM Artist  WHERE ArtistId NOT IN (SELECT ArtistId FROM Album)
SELECT DISTINCT A.Title  FROM Album A  JOIN Track T ON A.AlbumId = T.AlbumId  JOIN Genre G ON T.GenreId = G.GenreId  WHERE G.Name IN ('Reggae', 'Rock')  GROUP BY A.Title  HAVING COUNT(DISTINCT G.Name) = 2;
SELECT DISTINCT A.Title  FROM Album A JOIN Track T ON A.AlbumId = T.AlbumId JOIN Genre G ON T.GenreId = G.GenreId WHERE G.Name IN ('Reggae', 'Rock') GROUP BY A.Title HAVING COUNT(DISTINCT G.Name) > 1;
SELECT DISTINCT Available_Policies.Customer_Phone  FROM Available_Policies;
SELECT DISTINCT Available_Policies.Customer_Phone  FROM Available_Policies;
SELECT DISTINCT Available_Policies.Customer_Phone  FROM Available_Policies  JOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID  WHERE Available_Policies.policy_type_code = 'Life Insurance';
SELECT DISTINCT Available_Policies.Customer_Phone  FROM Available_Policies  JOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID  WHERE Available_Policies.policy_type_code = 'Life Insurance';
SELECT policy_type_code, COUNT(*) as record_count  FROM Available_Policies  GROUP BY policy_type_code  ORDER BY record_count DESC  LIMIT 1;
SELECT policy_type_code, COUNT(*) as count  FROM Available_Policies  GROUP BY policy_type_code  ORDER BY count DESC  LIMIT 1;
SELECT DISTINCT AP.Customer_Phone  FROM Available_Policies AP  JOIN Customers_Policies CP ON AP.Policy_ID = CP.Policy_ID  WHERE AP.policy_type_code = (     SELECT policy_type_code      FROM (         SELECT policy_type_code, COUNT(*) AS cnt          FROM Available_Policies          GROUP BY policy_type_code          ORDER BY cnt DESC          LIMIT 1     ) AS subquery );
SELECT T3.Customer_Phone FROM (     SELECT Policy_Type_Code     FROM Available_Policies     GROUP BY Policy_Type_Code     ORDER BY COUNT(*) DESC     LIMIT 1 ) AS MostCommonPolicyType, Available_Policies AS T1 JOIN Customers_Policies AS T2 ON T1.Policy_ID = T2.Policy_ID JOIN Customers AS T3 ON T2.Customer_ID = T3.Customer_ID WHERE T1.Policy_Type_Code = MostCommonPolicyType.Policy_Type_Code;
Error: 第 900 个样本有 2 个SQL。
SELECT policy_type_code  FROM (     SELECT policy_type_code, COUNT(DISTINCT Customer_ID) as num_customers     FROM Available_Policies     JOIN Customers_Policies ON Available_Policies.Policy_ID = Customers_Policies.Policy_ID     GROUP BY policy_type_code ) AS subquery WHERE num_customers > 4;
SELECT SUM(Settlement_Amount) AS Total_Settlement_Amount, AVG(Settlement_Amount) AS Average_Settlement_Amount  FROM Settlements;
SELECT SUM(Settlement_Amount) AS Total_Sum, AVG(Settlement_Amount) AS Average_Sum  FROM Settlements;
SELECT s.Service_name  FROM Services s JOIN First_Notification_of_Loss fnol ON s.Service_ID = fnol.Service_ID GROUP BY s.Service_ID, s.Service_name HAVING COUNT(fnol.FNOL_ID) > 2;
SELECT s.Service_name FROM Services s JOIN First_Notification_of_Loss fnol ON s.Service_ID = fnol.Service_ID GROUP BY s.Service_ID, s.Service_name HAVING COUNT(fnol.FNOL_ID) > 2;
SELECT Claims.Effective_Date  FROM Claims  JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID  GROUP BY Claims.Effective_Date  ORDER BY SUM(Settlements.Settlement_Amount) DESC  LIMIT 1;
SELECT Claims.Effective_Date FROM Claims JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID GROUP BY Claims.Effective_Date ORDER BY SUM(Settlements.Settlement_Amount) DESC LIMIT 1;
SELECT COUNT(*)  FROM Customers  JOIN Customers_Policies ON Customers.Customer_ID = Customers_Policies.Customer_ID  JOIN Available_Policies ON Customers_Policies.Policy_ID = Available_Policies.Policy_ID  WHERE Customers.Customer_name = 'Dayana Robel';
SELECT COUNT(*)  FROM Customers  JOIN Customers_Policies ON Customers.Customer_ID = Customers_Policies.Customer_ID  JOIN Available_Policies ON Customers_Policies.Policy_ID = Available_Policies.Policy_ID  WHERE Customers.Customer_name = 'Dayana Robel';
SELECT C.Customer_name  FROM Customers AS C JOIN Customers_Policies AS CP ON C.Customer_ID = CP.Customer_ID GROUP BY C.Customer_name ORDER BY COUNT(CP.Policy_ID) DESC LIMIT 1;
SELECT C.Customer_name FROM Customers C JOIN Customers_Policies CP ON C.Customer_ID = CP.Customer_ID GROUP BY C.Customer_name ORDER BY COUNT(CP.Policy_ID) DESC LIMIT 1;
SELECT ap.policy_type_code  FROM Available_Policies ap  JOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID  JOIN Customers c ON cp.Customer_ID = c.Customer_ID  WHERE c.Customer_name = 'Dayana Robel';
SELECT ap.policy_type_code  FROM Available_Policies ap  JOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID  JOIN Customers c ON cp.Customer_ID = c.Customer_ID  WHERE c.Customer_name = 'Dayana Robel';
SELECT ap.policy_type_code  FROM Available_Policies ap  JOIN Customers_Policies cp ON ap.Policy_ID = cp.Policy_ID  WHERE cp.Customer_ID = (     SELECT cp2.Customer_ID      FROM Customers_Policies cp2      GROUP BY cp2.Customer_ID      ORDER BY COUNT(cp2.Policy_ID) DESC      LIMIT 1 ) GROUP BY ap.policy_type_code;
SELECT policy_type_code  FROM Available_Policies  WHERE Policy_ID IN (     SELECT Policy_ID      FROM Customers_Policies      WHERE Customer_ID = (         SELECT Customer_ID          FROM (             SELECT Customer_ID, COUNT(*) as policy_count              FROM Customers_Policies              GROUP BY Customer_ID              ORDER BY policy_count DESC              LIMIT 1         ) as subquery     ) );
SELECT Service_name FROM Services ORDER BY Service_name;
SELECT Service_name  FROM Services  ORDER BY Service_name ASC;
SELECT COUNT(*) FROM Services;
SELECT COUNT(*) FROM Services;
SELECT c.Customer_name  FROM Customers c  LEFT JOIN First_Notification_of_Loss fnol ON c.Customer_ID = fnol.Customer_ID  WHERE fnol.FNOL_ID IS NULL;
SELECT c.Customer_name  FROM Customers c LEFT JOIN First_Notification_of_Loss fnol ON c.Customer_ID = fnol.Customer_ID WHERE fnol.FNOL_ID IS NULL;
SELECT DISTINCT c.Customer_name FROM Customers c JOIN First_Notification_of_Loss fnol ON c.Customer_ID = fnol.Customer_ID JOIN Services s ON fnol.Service_ID = s.Service_ID WHERE s.Service_name IN ('Close a policy', 'Upgrade a policy');
SELECT DISTINCT c.Customer_name FROM Customers c JOIN First_Notification_of_Loss fnol ON c.Customer_ID = fnol.Customer_ID JOIN Services s ON fnol.Service_ID = s.Service_ID WHERE s.Service_name IN ('Close a policy', 'Upgrade a policy');
SELECT c.Customer_name  FROM Customers c JOIN First_Notification_of_Loss fnol1      ON c.Customer_ID = fnol1.Customer_ID      JOIN Services s1      ON fnol1.Service_ID = s1.Service_ID AND s1.Service_name = 'Close a policy' JOIN First_Notification_of_Loss fnol2      ON c.Customer_ID = fnol2.Customer_ID      JOIN Services s2      ON fnol2.Service_ID = s2.Service_ID AND s2.Service_name = 'New policy application' GROUP BY c.Customer_name HAVING COUNT(DISTINCT s1.Service_ID) > 0 AND COUNT(DISTINCT s2.Service_ID) > 0;
SELECT c.Customer_name  FROM Customers c JOIN First_Notification_of_Loss fnol1      ON c.Customer_ID = fnol1.Customer_ID          AND fnol1.Service_ID IN (             SELECT s.Service_ID              FROM Services s              WHERE s.Service_name = 'Close a policy'         ) JOIN First_Notification_of_Loss fnol2      ON c.Customer_ID = fnol2.Customer_ID          AND fnol2.Service_ID IN (             SELECT s.Service_ID              FROM Services s              WHERE s.Service_name = 'Upgrade a policy'         ) GROUP BY c.Customer_name  HAVING COUNT(DISTINCT fnol1.Service_ID) > 1  AND COUNT(DISTINCT fnol2.Service_ID) > 1
SELECT Customer_ID FROM Customers WHERE Customer_name LIKE '%Diana%';
SELECT Customer_ID FROM Customers WHERE Customer_name LIKE '%Diana%';
SELECT MAX(Settlement_Amount) AS Maximum_Settlement_Amount, MIN(Settlement_Amount) AS Minimum_Settlement_Amount FROM Settlements;
SELECT MAX(Settlement_Amount) AS Maximum_Amount, MIN(Settlement_Amount) AS Minimum_Amount  FROM Settlements;
SELECT * FROM Customers ORDER BY Customer_ID ASC;
SELECT DISTINCT Customer_ID FROM Customers ORDER BY Customer_ID;
SELECT cp.Date_Opened, cp.Date_Closed  FROM Customers AS c  JOIN Customers_Policies AS cp ON c.Customer_ID = cp.Customer_ID  WHERE c.Customer_name LIKE '%Diana%';
SELECT cp.Date_Opened, cp.Date_Closed  FROM Customers AS c  JOIN Customers_Policies AS cp ON c.Customer_ID = cp.Customer_ID  WHERE c.Customer_name LIKE '%Diana%';
SELECT COUNT(DISTINCT name) FROM enzyme;
SELECT COUNT(*) FROM enzyme;
SELECT name FROM enzyme ORDER BY name DESC;
SELECT name FROM enzyme ORDER BY name DESC;
SELECT e.name, e.Location  FROM enzyme AS e;
SELECT name, Location FROM enzyme;
SELECT MAX(OMIM) FROM enzyme;
SELECT MAX(OMIM) FROM enzyme;
SELECT Product, Chromosome, Porphyria  FROM enzyme  WHERE Location = 'Cytosol';
SELECT Product, Chromosome, Porphyria  FROM enzyme  WHERE Location = 'Cytosol';
SELECT name FROM enzyme WHERE Product != 'Heme';
SELECT name FROM enzyme WHERE Product != 'Heme';
SELECT name, Trade_Name  FROM medicine  WHERE FDA_approved = 'Yes';
SELECT name, Trade_Name FROM medicine WHERE FDA_approved = 'Yes';
SELECT e.name  FROM enzyme e JOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id JOIN medicine m ON m.id = mei.medicine_id WHERE m.name = 'Amisulpride' AND mei.interaction_type = 'inhibitor';
SELECT e.name  FROM enzyme e JOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id JOIN medicine m ON m.id = mei.medicine_id WHERE m.name = 'Amisulpride' AND mei.interaction_type = 'inhibitor';
SELECT T2.id, T2.name FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id GROUP BY T2.id HAVING COUNT(T1.enzyme_id) >= 2
SELECT m.id, m.name  FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id GROUP BY m.id, m.name HAVING COUNT(mei.enzyme_id) > 1;
SELECT m.id, m.name, m.FDA_approved FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id GROUP BY m.id, m.name, m.FDA_approved ORDER BY COUNT(mei.enzyme_id) DESC;
SELECT m.id, m.name, m.FDA_approved, COUNT(me.interaction_type) as interaction_count FROM medicine m JOIN medicine_enzyme_interaction me ON m.id = me.medicine_id GROUP BY m.id, m.name, m.FDA_approved ORDER BY interaction_count DESC;
SELECT e.id, e.name  FROM enzyme e JOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id WHERE mei.interaction_type = 'activator' GROUP BY e.id, e.name ORDER BY COUNT(mei.medicine_id) DESC LIMIT 1;
SELECT e.id, e.name  FROM enzyme e  JOIN medicine_enzyme_interaction mei  ON e.id = mei.enzyme_id  WHERE mei.interaction_type = 'activator'  GROUP BY e.id, e.name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT interaction_type  FROM medicine_enzyme_interaction  WHERE enzyme_id = (SELECT id FROM enzyme WHERE name = 'ALA synthase')  AND medicine_id = (SELECT id FROM medicine WHERE name = 'Aripiprazole');
SELECT interaction_type  FROM medicine_enzyme_interaction  WHERE enzyme_id = (SELECT id FROM enzyme WHERE name = 'ALA synthase')  AND medicine_id = (SELECT id FROM medicine WHERE name = 'Aripiprazole');
SELECT interaction_type, COUNT(*) as count  FROM medicine_enzyme_interaction  GROUP BY interaction_type  ORDER BY count DESC  LIMIT 1;
SELECT interaction_type, COUNT(*) as count  FROM medicine_enzyme_interaction  GROUP BY interaction_type  ORDER BY count DESC;
SELECT COUNT(*) FROM medicine WHERE FDA_approved = 'No';
SELECT COUNT(*) FROM medicine WHERE FDA_approved = 'No';
SELECT COUNT(*) FROM enzyme WHERE id NOT IN (SELECT enzyme_id FROM medicine_enzyme_interaction)
SELECT COUNT(*) FROM enzyme WHERE id NOT IN (SELECT enzyme_id FROM medicine_enzyme_interaction)
SELECT m.id, m.Trade_Name  FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id GROUP BY m.id, m.Trade_Name HAVING COUNT(mei.enzyme_id) >= 3;
SELECT m.id, m.Trade_Name FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id GROUP BY m.id, m.Trade_Name HAVING COUNT(mei.enzyme_id) >= 3;
SELECT DISTINCT e.name, e.Location, e.Product  FROM enzyme e JOIN medicine_enzyme_interaction mei ON e.id = mei.enzyme_id  WHERE mei.interaction_type = 'inhibitor';
SELECT DISTINCT enzyme.name, enzyme.Location, enzyme.Product  FROM enzyme  JOIN medicine_enzyme_interaction  ON enzyme.id = medicine_enzyme_interaction.enzyme_id  WHERE medicine_enzyme_interaction.interaction_type = 'inhibitor';
SELECT m.name, m.Trade_Name  FROM medicine m JOIN medicine_enzyme_interaction mie1 ON m.id = mie1.medicine_id JOIN medicine_enzyme_interaction mie2 ON m.id = mie2.medicine_id WHERE mie1.interaction_type = 'inhibitor'  AND mie2.interaction_type = 'activitor' GROUP BY m.name, m.Trade_Name;
SELECT m.name, m.Trade_Name  FROM medicine m  JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id  WHERE mei.interaction_type IN ('inhibitor', 'activator');
SELECT m.name, m.Trade_Name  FROM medicine m WHERE m.id NOT IN (     SELECT mei.medicine_id      FROM medicine_enzyme_interaction mei     JOIN enzyme e ON mei.enzyme_id = e.id     WHERE e.Product = 'Heme' );
SELECT m.name, m.Trade_Name  FROM medicine m  WHERE NOT EXISTS (     SELECT *      FROM medicine_enzyme_interaction mei      JOIN enzyme e ON mei.enzyme_id = e.id      WHERE mei.medicine_id = m.id AND e.Product = 'Heme' );
SELECT COUNT(DISTINCT FDA_approved) FROM medicine;
SELECT COUNT(DISTINCT FDA_approved) FROM medicine;
SELECT name FROM enzyme WHERE name LIKE '%ALA%';
SELECT name FROM enzyme WHERE name LIKE '%ALA%';
SELECT Trade_Name, COUNT(*) as num_medicines  FROM medicine  GROUP BY Trade_Name;
SELECT Trade_Name, COUNT(name)  FROM medicine  GROUP BY Trade_Name;
SELECT university.School, university.Nickname  FROM university  ORDER BY university.Founded;
SELECT university.School, university.Nickname  FROM university  ORDER BY university.Founded;
SELECT School, Location  FROM university  WHERE Affiliation = 'Public';
SELECT School, Location FROM university WHERE Affiliation = 'Public';
SELECT Founded FROM university WHERE Enrollment = (SELECT MAX(Enrollment) FROM university)
SELECT Founded FROM university WHERE Enrollment = (SELECT MAX(Enrollment) FROM university);
SELECT Founded FROM university WHERE Affiliation != 'Public' ORDER BY Founded DESC LIMIT 1;
SELECT Founded FROM university WHERE Affiliation != 'Public' ORDER BY Founded DESC LIMIT 1;
SELECT COUNT(DISTINCT School_ID) FROM basketball_match;
SELECT COUNT(DISTINCT School_ID)  FROM basketball_match;
SELECT MAX(ACC_Percent) FROM basketball_match;
SELECT MAX(ACC_Percent) FROM basketball_match;
SELECT T2.Primary_conference FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.ACC_Percent = (SELECT MIN(ACC_Percent) FROM basketball_match)
SELECT T1.Primary_conference  FROM university AS T1  JOIN basketball_match AS T2 ON T1.School_ID = T2.School_ID  ORDER BY T2.ACC_Percent  LIMIT 1;
SELECT basketball_match.Team_Name, basketball_match.ACC_Regular_Season  FROM basketball_match  JOIN university ON basketball_match.School_ID = university.School_ID  WHERE university.Founded = (SELECT MIN(Founded) FROM university);
SELECT basketball_match.Team_Name, basketball_match.ACC_Regular_Season  FROM basketball_match  JOIN university ON basketball_match.School_ID = university.School_ID  WHERE university.Founded = (SELECT MIN(Founded) FROM university);
SELECT university.Location, basketball_match.All_Games  FROM basketball_match  JOIN university ON basketball_match.School_ID = university.School_ID  WHERE basketball_match.Team_Name = 'Clemson';
SELECT T1.All_Games, T2.Location FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T2.Nickname = 'Clemson'
SELECT AVG(Enrollment)  FROM university  WHERE Founded < 1850;
SELECT AVG(Enrollment)  FROM university  WHERE Founded < 1850;
SELECT Enrollment, Primary_conference  FROM university  WHERE Founded = (SELECT MIN(Founded) FROM university);
SELECT Enrollment, Primary_conference  FROM university  ORDER BY Founded  LIMIT 1;
SELECT SUM(Enrollment) AS Total_Enrollment, MIN(Enrollment) AS Min_Enrollment FROM university;
SELECT SUM(Enrollment) AS Total_Enrollment, MIN(Enrollment) AS Min_Enrollment FROM university;
SELECT Affiliation, SUM(Enrollment) as Total_Enrollment FROM university GROUP BY Affiliation;
SELECT Affiliation, SUM(Enrollment)  FROM university  GROUP BY Affiliation;
SELECT COUNT(*)  FROM university  WHERE School_ID NOT IN (SELECT School_ID FROM basketball_match)
SELECT COUNT(*)  FROM university  WHERE School_ID NOT IN (SELECT School_ID FROM basketball_match)
SELECT School  FROM university  WHERE Founded > 1850 OR Affiliation = 'Public'
SELECT School  FROM university  WHERE Founded < 1850 OR Affiliation = 'Public';
SELECT COUNT(DISTINCT Affiliation) FROM university;
SELECT COUNT(DISTINCT Affiliation) FROM university;
SELECT COUNT(*)  FROM university  WHERE Location LIKE '%NY%';
SELECT COUNT(*) FROM university WHERE Location LIKE '%NY%';
SELECT T1.Team_Name  FROM basketball_match AS T1  JOIN university AS T2  ON T1.School_ID = T2.School_ID  WHERE T2.Enrollment < (SELECT AVG(Enrollment) FROM university)
SELECT bm.Team_Name  FROM basketball_match bm JOIN university u ON bm.School_ID = u.School_ID  WHERE u.Enrollment < (SELECT AVG(Enrollment) FROM university);
SELECT Affiliation, COUNT(School_ID)  FROM university  WHERE Enrollment > 20000  GROUP BY Affiliation;
SELECT Affiliation, COUNT(*) AS Num_Schools FROM university WHERE Enrollment > 20000 GROUP BY Affiliation;
SELECT Affiliation, SUM(Enrollment) as Total_Enrollment  FROM university  WHERE Founded > 1850  GROUP BY Affiliation;
SELECT Affiliation, SUM(Enrollment) AS Total_Enrollment FROM university WHERE Founded > 1850 GROUP BY Affiliation;
SELECT MAX(Enrollment) FROM university;
SELECT MAX(Enrollment) FROM university;
SELECT * FROM basketball_match;
SELECT * FROM basketball_match;
SELECT Team_Name  FROM basketball_match  ORDER BY All_Home DESC;
SELECT Team_Name  FROM basketball_match  ORDER BY All_Home DESC;
SELECT Model_name  FROM chip_model  WHERE Launch_year BETWEEN 2002 AND 2004;
Error: 第 1025 个样本有 2 个SQL。
SELECT chip_model.Model_name, screen_mode.Graphics_mode  FROM phone  JOIN chip_model ON phone.chip_model = chip_model.Model_name  JOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode  WHERE phone.Hardware_Model_name = 'LG-P760';
SELECT COUNT(*) FROM phone WHERE Company_name = 'Nokia Corporation';
SELECT MAX(T1.RAM_MiB) AS Max_RAM, MIN(T1.RAM_MiB) AS Min_RAM  FROM chip_model AS T1  JOIN phone AS T2 ON T1.Model_name = T2.chip_model  WHERE T2.Company_name = 'Nokia Corporation';
SELECT AVG(T1.ROM_MiB)  FROM chip_model AS T1  JOIN phone AS T2 ON T1.Model_name = T2.chip_model  WHERE T2.Company_name = 'Nokia Corporation';
SELECT Hardware_Model_name, Company_name  FROM phone  JOIN chip_model ON phone.chip_model = chip_model.Model_name  WHERE chip_model.Launch_year = 2002 OR chip_model.RAM_MiB > 32;
SELECT Hardware_Model_name, Company_name  FROM phone  WHERE Accreditation_type LIKE '%Full%';
SELECT T2.Char_cells, T2.Pixels, T2.Hardware_colours  FROM phone AS T1  JOIN screen_mode AS T2  ON T1.screen_mode = T2.Graphics_mode  WHERE T1.Hardware_Model_name = 'LG-P760';
SELECT Hardware_Model_name, Company_name  FROM phone  JOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode  WHERE screen_mode.Type = 'Graphics';
SELECT Company_name, COUNT(Hardware_Model_name) AS Model_Count FROM phone GROUP BY Company_name ORDER BY Model_Count ASC LIMIT 1;
SELECT Company_name  FROM phone  GROUP BY Company_name  HAVING COUNT(DISTINCT Hardware_Model_name) > 1;
SELECT MAX(used_kb) AS Maximum, MIN(used_kb) AS Minimum, AVG(used_kb) AS Average  FROM screen_mode;
SELECT p.Hardware_Model_name  FROM phone p JOIN chip_model cm ON p.chip_model = cm.Model_name WHERE cm.Launch_year = 2002 ORDER BY cm.RAM_MiB DESC LIMIT 1;
SELECT T1.WiFi, T3.Type  FROM chip_model AS T1  JOIN phone AS T2 ON T1.Model_name = T2.chip_model  JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode  WHERE T2.Hardware_Model_name = 'LG-P760';
SELECT T1.Hardware_Model_name  FROM phone AS T1  JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode  JOIN chip_model AS T3 ON T1.chip_model = T3.Model_name  WHERE (T2.Type = 'Text') OR (T3.RAM_MiB > 32)
SELECT Hardware_Model_name  FROM phone  WHERE Company_name = 'Nokia Corporation'  OR screen_mode IN (SELECT Graphics_mode FROM screen_mode WHERE Type = 'Graphics');
SELECT Hardware_Model_name  FROM phone  WHERE Company_name = 'Nokia Corporation'  AND screen_mode NOT IN (SELECT Graphics_mode FROM screen_mode WHERE Type = 'Text');
SELECT T1.Hardware_Model_name, T1.Company_name  FROM phone AS T1  JOIN screen_mode AS T2  ON T1.screen_mode = T2.Graphics_mode  WHERE T2.used_kb BETWEEN 10 AND 15;
SELECT Accreditation_type, COUNT(*)  FROM phone  GROUP BY Accreditation_type;
SELECT Accreditation_type, COUNT(*)  FROM phone  GROUP BY Accreditation_type;
SELECT Accreditation_level  FROM phone  GROUP BY Accreditation_level  HAVING COUNT(Hardware_Model_name) > 3;
SELECT * FROM chip_model;
SELECT COUNT(*) FROM chip_model WHERE WiFi = 0;
SELECT COUNT(*) FROM chip_model WHERE WiFi = 0;
SELECT Model_name FROM chip_model ORDER BY Launch_year;
SELECT AVG(RAM_MiB)  FROM chip_model  WHERE Model_name NOT IN (SELECT chip_model FROM phone)
SELECT Model_name  FROM chip_model  WHERE Model_name NOT IN (     SELECT chip_model      FROM phone      WHERE Accreditation_type = 'full' )
SELECT T2.Pixels  FROM phone AS T1  JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode  WHERE T1.Accreditation_type = 'Full'  INTERSECT  SELECT T2.Pixels  FROM phone AS T1  JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode  WHERE T1.Accreditation_type = 'Provisional'
SELECT COUNT(*) FROM country;
SELECT COUNT(*) FROM country;
SELECT Country_name, Capital FROM country;
SELECT Country_name, Capital FROM country;
SELECT Official_native_language FROM country WHERE Official_native_language LIKE '%English%';
SELECT Official_native_language FROM country WHERE Official_native_language LIKE '%English%';
SELECT DISTINCT Position FROM match_season;
SELECT DISTINCT Position FROM match_season;
SELECT Player  FROM match_season  WHERE College = 'UCLA';
SELECT Player  FROM match_season  WHERE College = 'UCLA';
SELECT DISTINCT Position  FROM match_season  WHERE College = 'UCLA' OR College = 'Duke';
SELECT DISTINCT Position  FROM match_season  WHERE College = 'UCLA' OR College = 'Duke';
SELECT Draft_Pick_Number, Draft_Class  FROM match_season  WHERE Position = 'Defender';
SELECT Draft_Pick_Number, Draft_Class  FROM match_season  WHERE Position = 'Defender';
SELECT COUNT(DISTINCT Team) FROM match_season;
SELECT COUNT(DISTINCT Team) FROM match_season;
SELECT player.Player, Years_Played  FROM player;
SELECT Player, Years_Played  FROM player  GROUP BY Player;
SELECT Name FROM team;
SELECT Name FROM team;
SELECT match_season.Season, match_season.Player, country.Country_name  FROM match_season  JOIN country ON match_season.Country = country.Country_id;
SELECT player.Player, match_season.Season, country.Country_name  FROM player  JOIN match_season ON player.Player_ID = match_season.Player  JOIN country ON match_season.Country = country.Country_id;
SELECT player.Player  FROM player  JOIN country ON player.Team = country.Country_id  WHERE country.Country_name = 'Indonesia';
SELECT player.Player  FROM player  JOIN country ON player.Team = country.Country_id  WHERE country.Country_name = 'Indonesia';
SELECT DISTINCT m.position  FROM match_season m JOIN country c ON m.country = c.country_id  WHERE c.capital = 'Dublin';
SELECT DISTINCT match_season.Position  FROM match_season  JOIN country ON match_season.Country = country.Country_id  WHERE country.Capital = 'Dublin';
SELECT DISTINCT c.Official_native_language  FROM country c JOIN match_season ms ON c.Country_id = ms.Country WHERE ms.College IN ('Maryland', 'Duke');
SELECT DISTINCT c.Official_native_language  FROM country AS c JOIN match_season AS ms ON c.Country_id = ms.Country  WHERE ms.College IN ('Maryland', 'Duke');
SELECT COUNT(DISTINCT T3.Official_native_language)  FROM match_season AS T1  JOIN player AS T2 ON T1.Player = T2.Player_ID  JOIN country AS T3 ON T1.Country = T3.Country_id  WHERE T1.Position = 'Defender';
SELECT COUNT(DISTINCT c.Official_native_language)  FROM country c JOIN match_season ms ON c.Country_id = ms.Country WHERE ms.Position = 'Defender';
SELECT match_season.Season, match_season.Player, team.Name  FROM match_season  JOIN team ON match_season.Team = team.Team_id;
SELECT DISTINCT player.Player, match_season.Season, team.Name  FROM player  JOIN match_season ON player.Player_ID = match_season.Player  JOIN team ON match_season.Team = team.Team_id;
SELECT match_season.Position  FROM match_season  JOIN team ON match_season.Team = team.Team_id  WHERE team.Name = "Ryley Goldner";
SELECT match_season.Position  FROM match_season  JOIN team ON match_season.Team = team.Team_id  WHERE team.Name = 'Ryley Goldner';
SELECT COUNT(DISTINCT T3.College)  FROM team AS T1  JOIN match_season AS T2 ON T1.Team_id = T2.Team  JOIN player AS T3 ON T2.Player = T3.Player_ID  WHERE T1.Name = 'Columbus Crew';
SELECT COUNT(DISTINCT T3.College)  FROM team AS T1  JOIN match_season AS T2 ON T1.Team_id = T2.Team  JOIN player AS T3 ON T3.Player_ID = T2.Player  WHERE T1.Name = 'Columbus Crew'
SELECT player.Player, player.Years_Played  FROM player  JOIN team ON player.Team = team.Team_id  WHERE team.Name = 'Columbus Crew';
SELECT player.Player, Years_Played  FROM player  JOIN team ON player.Team = team.Team_id  WHERE team.Name = 'Columbus Crew';
SELECT Position, COUNT(*) AS NumberOfPlayers FROM match_season GROUP BY Position;
SELECT Position, COUNT(*) AS Num_Players FROM match_season GROUP BY Position;
SELECT country.Country_name, COUNT(player.Player_ID) as Num_of_Players FROM country JOIN match_season ON country.Country_id = match_season.Country JOIN player ON match_season.Player = player.Player_ID GROUP BY country.Country_name;
SELECT Country, COUNT(Player)  FROM match_season  GROUP BY Country;
SELECT Player  FROM match_season  ORDER BY College ASC;
SELECT player.Player, match_season.College  FROM player  JOIN match_season ON player.Player_ID = match_season.Player  ORDER BY match_season.College ASC;
SELECT Position, COUNT(*) AS Commonality FROM match_season GROUP BY Position ORDER BY Commonality DESC LIMIT 1;
SELECT Position, COUNT(*) AS count  FROM match_season  GROUP BY Position  ORDER BY count DESC  LIMIT 1;
SELECT College, COUNT(*) AS Frequency  FROM match_season  GROUP BY College  ORDER BY Frequency DESC  LIMIT 3;
SELECT College  FROM match_season  GROUP BY College  ORDER BY COUNT(Player) DESC  LIMIT 3;
SELECT College  FROM match_season  GROUP BY College  HAVING COUNT(Player) >= 2;
SELECT College  FROM match_season  GROUP BY College  HAVING COUNT(Player) >= 2;
SELECT College  FROM match_season  GROUP BY College  HAVING COUNT(Player) >= 2  ORDER BY College DESC;
SELECT College  FROM match_season  GROUP BY College  HAVING COUNT(Player) >= 2  ORDER BY College DESC;
SELECT team.Name  FROM team  LEFT JOIN match_season ON team.Team_id = match_season.Team  WHERE match_season.Team IS NULL;
SELECT team.Name  FROM team  LEFT JOIN match_season ON team.Team_id = match_season.Team  WHERE match_season.Team IS NULL;
SELECT c.Country_name  FROM country c  JOIN match_season ms ON c.Country_id = ms.Country  WHERE ms.Position = 'Forward'  INTERSECT  SELECT c.Country_name  FROM country c  JOIN match_season ms ON c.Country_id = ms.Country  WHERE ms.Position = 'Defender'
SELECT DISTINCT c.Country_name  FROM country c JOIN match_season ms ON c.Country_id = ms.Country WHERE ms.Position = 'Forward'  INTERSECT  SELECT DISTINCT c.Country_name  FROM country c JOIN match_season ms ON c.Country_id = ms.Country WHERE ms.Position = 'Defender';
SELECT College  FROM match_season  WHERE Position = 'midfielder'  INTERSECT  SELECT College  FROM match_season  WHERE Position = 'defender'
SELECT College  FROM match_season  WHERE Position = 'Midfielder'  INTERSECT  SELECT College  FROM match_season  WHERE Position = 'Defender'
SELECT COUNT(*) FROM climber;
SELECT COUNT(*) FROM climber;
SELECT Name  FROM climber  ORDER BY Points DESC;
SELECT Name  FROM climber  ORDER BY Points DESC;
SELECT Name  FROM climber  WHERE Country <> 'Switzerland';
SELECT Name  FROM climber  WHERE Country <> 'Switzerland';
SELECT MAX(Points)  FROM climber  WHERE Country = 'United Kingdom';
SELECT MAX(Points)  FROM climber  WHERE Country = 'United Kingdom';
SELECT COUNT(DISTINCT Country) FROM climber;
SELECT COUNT(DISTINCT Country) FROM climber;
SELECT Name FROM mountain ORDER BY Name ASC;
SELECT Name FROM mountain ORDER BY Name ASC;
SELECT Country FROM mountain WHERE Height > 5000;
SELECT Country FROM mountain WHERE Height > 5000;
SELECT Name FROM mountain WHERE Height = (SELECT MAX(Height) FROM mountain);
SELECT Name FROM mountain WHERE Height = (SELECT MAX(Height) FROM mountain);
SELECT DISTINCT Range  FROM mountain  WHERE Prominence IN (SELECT TOP 3 Prominence FROM mountain ORDER BY Prominence DESC)
SELECT DISTINCT Range  FROM mountain  WHERE Mountain_ID IN (SELECT Mountain_ID                        FROM mountain                        ORDER BY Prominence DESC                        LIMIT 3)
SELECT climber.Name AS Climber_Name, mountain.Name AS Mountain_Name  FROM climber  JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID;
SELECT climber.Name AS Climber_Name, mountain.Name AS Mountain_Name  FROM climber  JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID;
SELECT climber.Name, mountain.Height  FROM climber  JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID;
SELECT climber.Name, mountain.Height  FROM climber  INNER JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID;
SELECT m.Height  FROM mountain m JOIN climber c ON m.Mountain_ID = c.Mountain_ID  WHERE c.Points = (SELECT MAX(Points) FROM climber);
SELECT T1.Height FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Points = (SELECT MAX(Points) FROM climber)
SELECT DISTINCT m.Name  FROM mountain m JOIN climber c ON m.Mountain_ID = c.Mountain_ID WHERE c.Country = 'West Germany';
SELECT DISTINCT m.Name  FROM mountain m JOIN climber c ON m.Mountain_ID = c.Mountain_ID WHERE c.Country = 'West Germany';
SELECT climber.Time  FROM climber  JOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID  WHERE mountain.Country = 'Uganda';
SELECT T1.Time  FROM climber AS T1  JOIN mountain AS T2  ON T1.Mountain_ID = T2.Mountain_ID  WHERE T2.Country = 'Uganda'
SELECT Country, COUNT(*) AS Num_Climbers  FROM climber  GROUP BY Country;
SELECT Country, COUNT(*)  FROM climber  GROUP BY Country;
SELECT Country  FROM mountain  GROUP BY Country  HAVING COUNT(Mountain_ID) > 1;
SELECT Country  FROM mountain  GROUP BY Country  HAVING COUNT(Mountain_ID) > 1;
SELECT Name  FROM mountain  WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)
SELECT Name  FROM mountain  WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)
SELECT DISTINCT Country  FROM climbing.mountain  WHERE Height > 5600 OR Height < 5200;
SELECT Country  FROM mountain  WHERE Height > 5600  INTERSECT  SELECT Country  FROM mountain  WHERE Height < 5200;
SELECT Range  FROM mountain  GROUP BY Range  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Range, COUNT(*) as mountain_count  FROM climbing.mountain  GROUP BY Range  ORDER BY mountain_count DESC  LIMIT 1;
SELECT Name  FROM mountain  WHERE Height > 5000 OR Prominence > 1000;
SELECT Name  FROM mountain  WHERE Height > 5000 OR Prominence > 1000;
SELECT COUNT(*) FROM body_builder;
SELECT Total  FROM body_builder  ORDER BY Total ASC;
SELECT bb.Snatch, bb.Clean_Jerk  FROM body_builder bb  ORDER BY bb.Snatch ASC;
SELECT AVG(Snatch) FROM body_builder;
Error: 第 1155 个样本有 2 个SQL。
SELECT Birth_Date  FROM people  ORDER BY Height ASC;
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM body_builder);
SELECT p.Name FROM people p JOIN body_builder bb ON p.People_ID = bb.People_ID WHERE bb.Total > 300;
SELECT p.Name  FROM people p JOIN body_builder bb ON p.People_ID = bb.People_ID  WHERE p.Weight = (SELECT MAX(Weight) FROM people);
SELECT p.Birth_Date, p.Birth_Place  FROM people p JOIN body_builder bb ON p.People_ID = bb.People_ID  WHERE bb.Total = (SELECT MAX(Total) FROM body_builder);
SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total < 315;
SELECT AVG(T1.Total)  FROM body_builder AS T1  JOIN people AS T2 ON T1.People_ID = T2.People_ID  WHERE T2.Height > 200;
SELECT p.Name  FROM people p JOIN body_builder bb ON p.People_ID = bb.People_ID  ORDER BY bb.Total DESC;
SELECT Birth_Place, COUNT(*)  FROM people  GROUP BY Birth_Place;
SELECT Birth_Place, COUNT(*) as count  FROM people  GROUP BY Birth_Place  ORDER BY count DESC  LIMIT 1;
SELECT Birth_Place  FROM people  GROUP BY Birth_Place  HAVING COUNT(People_ID) >= 2;
SELECT Height, Weight FROM people ORDER BY Height DESC;
SELECT body_builder.*, people.Name, people.Height, people.Weight, people.Birth_Date, people.Birth_Place  FROM body_builder  JOIN people ON body_builder.People_ID = people.People_ID;
SELECT Name, Birth_Place  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM body_builder);
SELECT COUNT(DISTINCT Birth_Place) FROM people;
SELECT COUNT(*) FROM people WHERE People_ID NOT IN (SELECT People_ID FROM body_builder)
SELECT p.Weight  FROM people p  JOIN body_builder bb ON p.People_ID = bb.People_ID  WHERE bb.Snatch > 140 OR p.Height > 200;
SELECT T1.Total  FROM body_builder AS T1  JOIN people AS T2  ON T1.People_ID = T2.People_ID  WHERE T2.Birth_Date LIKE '%January%';
SELECT MIN(Snatch) FROM body_builder;
SELECT COUNT(*) FROM election
SELECT Votes FROM election ORDER BY Votes DESC;
SELECT Date, Vote_Percent FROM election;
SELECT MIN(Vote_Percent) AS Min_Vote_Percent, MAX(Vote_Percent) AS Max_Vote_Percent FROM election;
SELECT Name, Party FROM representative;
SELECT Name  FROM representative  WHERE Party != 'Republican';
SELECT Lifespan  FROM representative  WHERE State IN ('New York', 'Indiana');
SELECT representative.Name, election.Date  FROM election  JOIN representative ON election.Representative_ID = representative.Representative_ID;
SELECT r.Name FROM representative r JOIN election e ON r.Representative_ID = e.Representative_ID WHERE e.Votes > 10000;
SELECT r.Name  FROM election e  JOIN representative r ON e.Representative_ID = r.Representative_ID  ORDER BY e.Votes DESC;
SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T1.Votes = (SELECT MIN(Votes) FROM election)
SELECT r.Lifespan FROM election e JOIN representative r ON e.Representative_ID = r.Representative_ID ORDER BY e.Vote_Percent DESC;
SELECT AVG(e.Votes)  FROM election e JOIN representative r ON e.Representative_ID = r.Representative_ID WHERE r.Party = 'Republican';
SELECT Party, COUNT(*)  FROM representative  GROUP BY Party;
SELECT Party  FROM representative  GROUP BY Party  ORDER BY COUNT(Representative_ID) DESC  LIMIT 1;
SELECT Party  FROM representative  GROUP BY Party  HAVING COUNT(*) >= 3;
SELECT State  FROM representative  GROUP BY State  HAVING COUNT(Representative_ID) >= 2;
SELECT Name  FROM representative  WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)
SELECT Party  FROM representative  WHERE State = 'New York'  INTERSECT  SELECT Party  FROM representative  WHERE State = 'Pennsylvania'
SELECT COUNT(DISTINCT Party) FROM representative;
SELECT COUNT(*) FROM Apartment_Bookings;
SELECT COUNT(*) FROM Apartment_Bookings;
SELECT booking_start_date, booking_end_date FROM Apartment_Bookings;
SELECT booking_start_date, booking_end_date  FROM Apartment_Bookings;
SELECT DISTINCT building_description FROM Apartment_Buildings;
SELECT DISTINCT building_description FROM Apartment_Buildings;
SELECT building_short_name  FROM Apartment_Buildings  WHERE building_manager = 'Emma';
SELECT building_short_name  FROM Apartment_Buildings  WHERE building_manager = 'Emma';
SELECT building_address, building_phone  FROM Apartment_Buildings  WHERE building_manager = 'Brenden';
SELECT building_address, building_phone  FROM Apartment_Buildings  WHERE building_manager = 'Brenden';
SELECT building_full_name  FROM Apartment_Buildings  WHERE building_full_name LIKE '%court%';
SELECT building_full_name  FROM Apartment_Buildings  WHERE building_full_name LIKE '%court%';
SELECT MIN(bathroom_count) AS min_bathrooms, MAX(bathroom_count) AS max_bathrooms  FROM Apartments;
SELECT MIN(bathroom_count) AS min_bathroom_count, MAX(bathroom_count) AS max_bathroom_count FROM Apartments;
SELECT AVG(bedroom_count) FROM Apartments;
SELECT AVG(bedroom_count)  FROM Apartments;
SELECT apt_number, room_count  FROM Apartments;
SELECT apt_number, room_count  FROM Apartments;
SELECT AVG(room_count)  FROM Apartments  WHERE apt_type_code = 'Studio';
SELECT AVG(room_count)  FROM Apartments  WHERE apt_type_code = 'Studio';
SELECT apt_number  FROM Apartments  WHERE apt_type_code = 'Flat';
SELECT apt_number  FROM Apartments  WHERE apt_type_code = 'Flat';
SELECT guest_first_name, guest_last_name FROM Guests;
SELECT guest_first_name, guest_last_name FROM Guests;
SELECT date_of_birth  FROM Guests  WHERE gender_code = 'Male';
SELECT Guests.date_of_birth  FROM Guests  WHERE Guests.gender_code = 'Male';
SELECT A.apt_number, AB.booking_start_date, AB.booking_end_date  FROM Apartments A  JOIN Apartment_Bookings AB ON A.apt_id = AB.apt_id;
SELECT A.apt_number, AB.booking_start_date, AB.booking_end_date  FROM Apartments A  JOIN Apartment_Bookings AB ON A.apt_id = AB.apt_id;
SELECT T1.booking_start_date, T1.booking_end_date  FROM Apartment_Bookings AS T1  JOIN Apartments AS T2  ON T1.apt_id = T2.apt_id  WHERE T2.apt_type_code = 'Duplex';
SELECT ab.booking_start_date, ab.booking_end_date  FROM Apartment_Bookings ab  JOIN Apartments a ON ab.apt_id = a.apt_id  WHERE a.apt_type_code = 'Duplex';
SELECT AB.booking_start_date, AB.booking_end_date  FROM Apartment_Bookings AB  JOIN Apartments A ON AB.apt_id = A.apt_id  WHERE A.bedroom_count > 2;
SELECT ab.booking_start_date, ab.booking_end_date  FROM Apartment_Bookings ab  JOIN Apartments a ON ab.apt_id = a.apt_id  WHERE a.bedroom_count > 2;
SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = 'Suite 634'
SELECT booking_status_code  FROM Apartment_Bookings  JOIN Apartments ON Apartment_Bookings.apt_id = Apartments.apt_id  WHERE Apartments.apt_number = 'Suite 634';
SELECT DISTINCT A.apt_number  FROM Apartments A  JOIN Apartment_Bookings AB ON A.apt_id = AB.apt_id  WHERE AB.booking_status_code = 'Confirmed';
SELECT Apartments.apt_number  FROM Apartments  JOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id  WHERE Apartment_Bookings.booking_status_code = 'Confirmed';
SELECT AVG(A.room_count)  FROM Apartments A JOIN Apartment_Bookings AB ON A/apt_id = AB.apt_id WHERE AB.booking_status_code = 'Provisional';
SELECT AVG(A.room_count)  FROM Apartments A JOIN Apartment_Bookings AB ON A/apt_id = AB.apt_id WHERE AB.booking_status_code = 'Provisional';
SELECT Guests.guest_first_name, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date  FROM Apartment_Bookings  JOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id;
SELECT G.guest_first_name, AB.booking_start_date, AB.booking_end_date  FROM Apartment_Bookings AB  JOIN Guests G ON AB.guest_id = G.guest_id;
SELECT ab.booking_start_date, ab.booking_end_date  FROM Apartment_Bookings ab  JOIN Guests g ON ab.guest_id = g.guest_id  WHERE g.gender_code = 'Female';
SELECT ab.booking_start_date, ab.booking_end_date  FROM Apartment_Bookings ab  JOIN Guests g ON ab.guest_id = g.guest_id  WHERE g.gender_code = 'Female';
SELECT Guests.guest_first_name, Guests.guest_last_name  FROM Guests JOIN Apartment_Bookings ON Guests.guest_id = Apartment_Bookings.guest_id WHERE Apartment_Bookings.booking_status_code = 'Confirmed';
SELECT Guests.guest_first_name, Guests.guest_last_name  FROM Guests  JOIN Apartment_Bookings ON Guests.guest_id = Apartment_Bookings.guest_id  WHERE Apartment_Bookings.booking_status_code = 'Confirmed';
SELECT T2.facility_code  FROM Apartments AS T1  JOIN Apartment_Facilities AS T2 ON T1.apt_id = T2.apt_id  WHERE T1.bedroom_count > 4;
SELECT T2.facility_code  FROM Apartments AS T1  JOIN Apartment_Facilities AS T2 ON T1.apt_id = T2.apt_id  WHERE T1.bedroom_count > 4;
SELECT SUM(A.room_count)  FROM Apartments A JOIN Apartment_Facilities AF ON A.apt_id = AF.apt_id WHERE AF.facility_code = 'Gym';
SELECT SUM(A.room_count)  FROM Apartments A JOIN Apartment_Facilities AF ON A.apt_id = AF.apt_id WHERE AF.facility_code = 'Gym';
SELECT SUM(Apartment.room_count)  FROM Apartments  JOIN Apartment_Buildings  ON Apartments.building_id = Apartment_Buildings.building_id  WHERE Apartment_Buildings.building_short_name = 'Columbus Square';
SELECT SUM(Apartment.room_count)  FROM Apartment  JOIN Apartment_Buildings  ON Apartment.building_id = Apartment_Buildings.building_id  WHERE Apartment_Buildings.building_short_name = 'Columbus Square';
SELECT DISTINCT building_address  FROM Apartment_Buildings  JOIN Apartments ON Apartment_Buildings.building_id = Apartments.building_id  WHERE bathroom_count > 2;
SELECT DISTINCT ab.building_address  FROM Apartment_Buildings ab  JOIN Apartments a ON ab.building_id = a.building_id  WHERE a.bathroom_count > 2;
SELECT Apartments.apt_type_code, Apartments.apt_number  FROM Apartments  JOIN Apartment_Buildings ON Apartments.building_id = Apartment_Buildings.building_id  WHERE Apartment_Buildings.building_manager = 'Kyle';
SELECT Apartments.apt_type_code, Apartments.apt_number  FROM Apartments  JOIN Apartment_Buildings ON Apartments.building_id = Apartment_Buildings.building_id  WHERE Apartment_Buildings.building_manager = 'Kyle';
SELECT booking_status_code, COUNT(*) as number_of_bookings FROM Apartment_Bookings GROUP BY booking_status_code;
SELECT booking_status_code, COUNT(*) as num_bookings FROM Apartment_Bookings GROUP BY booking_status_code;
SELECT apt_number  FROM Apartments  ORDER BY room_count ASC;
SELECT apt_number  FROM Apartments  ORDER BY room_count ASC;
SELECT apt_number  FROM Apartments  WHERE bedroom_count = (SELECT MAX(bedroom_count) FROM Apartments);
SELECT apt_number  FROM Apartments  WHERE bedroom_count = (SELECT MAX(bedroom_count) FROM Apartments) LIMIT 1;
SELECT apt_type_code, COUNT(*) AS num_apartments FROM Apartments GROUP BY apt_type_code ORDER BY num_apartments ASC;
SELECT apt_type_code, COUNT(*) AS num_apartments FROM Apartments GROUP BY apt_type_code ORDER BY num_apartments ASC;
SELECT apt_type_code, AVG(room_count) as avg_rooms FROM Apartments GROUP BY apt_type_code ORDER BY avg_rooms DESC LIMIT 3;
SELECT apt_type_code, AVG(room_count) as avg_room_count FROM Apartments GROUP BY apt_type_code ORDER BY avg_room_count DESC LIMIT 3;
SELECT apt_type_code, bathroom_count, bedroom_count  FROM Apartments  WHERE (room_count + bathroom_count + bedroom_count) =  (SELECT MAX(room_count + bathroom_count + bedroom_count) FROM Apartments)
SELECT apt_type_code, bathroom_count, bedroom_count  FROM Apartments  GROUP BY apt_type_code, bathroom_count, bedroom_count  ORDER BY SUM(room_count) DESC  LIMIT 1;
SELECT apt_type_code, COUNT(*) as count FROM Apartments GROUP BY apt_type_code ORDER BY count DESC LIMIT 1;
SELECT apt_type_code, COUNT(*) as count  FROM Apartments  GROUP BY apt_type_code  ORDER BY count DESC  LIMIT 1;
SELECT apt_type_code  FROM Apartments  WHERE bathroom_count > 1  GROUP BY apt_type_code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT apt_type_code  FROM Apartments  WHERE bathroom_count > 1  GROUP BY apt_type_code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT apt_type_code, MAX(room_count) AS max_rooms, MIN(room_count) AS min_rooms  FROM Apartments  GROUP BY apt_type_code;
SELECT apt_type_code, MAX(room_count) AS max_rooms, MIN(room_count) AS min_rooms  FROM Apartments  GROUP BY apt_type_code;
SELECT Guests.gender_code, COUNT(Guests.guest_id) AS guest_count FROM Guests GROUP BY Guests.gender_code ORDER BY guest_count DESC;
SELECT gender_code, COUNT(*) as count FROM Guests GROUP BY gender_code ORDER BY count DESC;
SELECT COUNT(*)  FROM Apartments  WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)
SELECT COUNT(*)  FROM Apartments  WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)
SELECT DISTINCT A.apt_number  FROM Apartments A  JOIN Apartment_Bookings AB1  ON A.apt_id = AB1.apt_id  JOIN Apartment_Bookings AB2  ON A.apt_id = AB2.apt_id  WHERE AB1.booking_status_code = 'Provisional'  AND AB2.booking_status_code = 'Confirmed';
SELECT DISTINCT A.apt_number  FROM Apartments A  JOIN Apartment_Bookings AB1  ON A.apt_id = AB1.apt_id  JOIN Apartment_Bookings AB2  ON A.apt_id = AB2.apt_id  WHERE AB1.booking_status_code = 'Provisional'  AND AB2.booking_status_code = 'Confirmed';
SELECT a.apt_number  FROM Apartments a WHERE a.apt_id IN (     SELECT vas.apt_id      FROM View_Unit_Status vas     WHERE vas.available_yn = 0 )  AND a.apt_id IN (     SELECT vas.apt_id      FROM View_Unit_Status vas     WHERE vas.available_yn = 1 )
SELECT DISTINCT A.apt_number  FROM Apartments A JOIN View_Unit_Status VUS1 ON A.apt_id = VUS1.apt_id AND VUS1.available_yn = 0 JOIN View_Unit_Status VUS2 ON A.apt_id = VUS2.apt_id AND VUS2.available_yn = 1;
SELECT COUNT(*) FROM game WHERE Season > 2007;
SELECT T2.Date  FROM stadium AS T1  JOIN game AS T2 ON T1.id = T2.stadium_id  GROUP BY T2.Home_team  ORDER BY T2.Date DESC;
SELECT Season, Home_team, Away_team  FROM game;
SELECT MAX(Home_Games) AS Max_Home_Games, MIN(Home_Games) AS Min_Home_Games, AVG(Home_Games) AS Avg_Home_Games FROM stadium;
SELECT AVG(Average_Attendance)  FROM stadium  WHERE Capacity_Percentage > 100;
SELECT Player, Number_of_matches, Source  FROM injury_accident  WHERE Injury != 'Knee problem';
SELECT T1.Season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.Player = 'Walter Samuel'
SELECT game.id, game.Score, game.Date  FROM game  JOIN injury_accident ON game.id = injury_accident.game_id  GROUP BY game.id  HAVING COUNT(injury_accident.id) >= 2;
SELECT T1.id, T1.name  FROM stadium AS T1  JOIN game AS T2 ON T1.id = T2.stadium_id  JOIN injury_accident AS T3 ON T2.id = T3.game_id  GROUP BY T1.id, T1.name  ORDER BY COUNT(T3.id) DESC  LIMIT 1;
SELECT s.id, s.name  FROM stadium s JOIN game g ON s.id = g.stadium_id JOIN injury_accident ia ON g.id = ia.game_id GROUP BY s.id, s.name ORDER BY COUNT(ia.id) DESC LIMIT 1;
SELECT game.Season, stadium.name  FROM injury_accident  JOIN game ON injury_accident.game_id = game.id  JOIN stadium ON game.stadium_id = stadium.id  WHERE injury_accident.Injury IN ('Foot injury', 'Knee problem');
SELECT COUNT(DISTINCT Source) FROM injury_accident;
SELECT COUNT(*)  FROM game  WHERE id NOT IN (SELECT game_id FROM injury_accident);
SELECT COUNT(DISTINCT i.Injury)  FROM injury_accident i JOIN game g ON i.game_id = g.id WHERE g.Season > 2010;
SELECT T1.name  FROM stadium AS T1  JOIN game AS T2 ON T1.id = T2.stadium_id  JOIN injury_accident AS T3 ON T2.id = T3.game_id  WHERE T3.Player = 'Walter Samuel'  INTERSECT  SELECT T1.name  FROM stadium AS T1  JOIN game AS T2 ON T1.id = T2.stadium_id  JOIN injury_accident AS T3 ON T2.id = T3.game_id  WHERE T3.Player = 'Thiago Motta'
SELECT s.name, s.Average_Attendance, s.Total_Attendance  FROM stadium s  WHERE s.id NOT IN (     SELECT DISTINCT g.stadium_id      FROM game g      JOIN injury_accident ia ON g.id = ia.game_id )
SELECT name FROM stadium WHERE name LIKE '%Bank%';
SELECT s.name, COUNT(g.id) as Total_Games FROM stadium s JOIN game g ON s.id = g.stadium_id GROUP BY s.name;
SELECT injury_accident.id, game.Date, injury_accident.Player  FROM injury_accident  JOIN game ON injury_accident.game_id = game.id  ORDER BY game.Season DESC;
SELECT Country.name, League.name  FROM Country  JOIN League ON Country.id = League.country_id;
SELECT COUNT(*) FROM League WHERE id IN (SELECT id FROM Country WHERE name = 'England');
SELECT AVG(weight) FROM Player;
SELECT MAX(height) AS max_height, MIN(height) AS min_height FROM Player;
SELECT player_name  FROM Player  WHERE player_api_id IN (     SELECT player_api_id      FROM Player_Attributes      WHERE overall_rating > (         SELECT AVG(overall_rating)          FROM Player_Attributes     ) );
SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling = (SELECT MAX(dribbling) FROM Player_Attributes)
SELECT Player.player_name  FROM Player  JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id  WHERE Player_Attributes.crossing > 90 AND Player_Attributes.preferred_foot = 'right';
SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.preferred_foot = "left" AND T1.overall_rating BETWEEN 85 AND 90;
SELECT preferred_foot, AVG(overall_rating)  FROM Player_Attributes  GROUP BY preferred_foot;
SELECT preferred_foot, COUNT(*)  FROM Player_Attributes  WHERE overall_rating > 80  GROUP BY preferred_foot;
SELECT player_api_id  FROM Player  JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id  WHERE Player.height >= 180 AND Player_Attributes.overall_rating > 85;
SELECT player_api_id  FROM Player_Attributes  WHERE preferred_foot = 'left'  AND player_api_id IN (SELECT player_api_id FROM Player WHERE height BETWEEN 180 AND 190);
SELECT p.player_name, pa.overall_rating  FROM Player_Attributes pa  JOIN Player p ON pa.player_api_id = p.player_api_id  ORDER BY pa.overall_rating DESC  LIMIT 3;
SELECT player_name, birthday  FROM Player  WHERE player_api_id IN (     SELECT player_api_id      FROM Player_Attributes      ORDER BY potential DESC      LIMIT 5 )
SELECT COUNT(*) FROM performance;
SELECT Host  FROM performance  ORDER BY Attendance ASC;
SELECT Date, Location FROM performance;
SELECT Attendance  FROM performance  WHERE Location IN ('TD Garden', 'Bell Centre');
SELECT AVG(Attendance) FROM performance;
SELECT Date  FROM performance  WHERE Attendance = (SELECT MAX(Attendance) FROM performance);
SELECT Location, COUNT(*) AS NumberOfPerformances FROM performance GROUP BY Location;
SELECT Location, COUNT(*) as Count  FROM performance  GROUP BY Location  ORDER BY Count DESC  LIMIT 1;
SELECT Location  FROM performance  GROUP BY Location  HAVING COUNT(Performance_ID) >= 2;
SELECT Location  FROM performance  WHERE Attendance > 2000  INTERSECT  SELECT Location  FROM performance  WHERE Attendance < 1000;
SELECT m.Name, p.Location  FROM member m  JOIN member_attendance ma ON m.Member_ID = ma.Member_ID  JOIN performance p ON ma.Performance_ID = p.Performance_ID;
SELECT m.Name, p.Location  FROM member AS m  JOIN member_attendance AS ma ON m.Member_ID = ma.Member_ID  JOIN performance AS p ON ma.Performance_ID = p.Performance_ID  ORDER BY m.Name ASC;
SELECT DISTINCT p.Date  FROM performance p JOIN member_attendance ma ON p.Performance_ID = ma.Performance_ID  JOIN member m ON ma.Member_ID = m.Member_ID  WHERE m.Role = 'Violin';
SELECT m.Name, p.Date  FROM member_attendance ma  JOIN member m ON ma.Member_ID = m.Member_ID  JOIN performance p ON ma.Performance_ID = p.Performance_ID  ORDER BY p.Attendance DESC;
SELECT Name  FROM member  WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)
SELECT building  FROM classroom  WHERE capacity > 50;
SELECT DISTINCT building  FROM classroom  WHERE capacity > 50;
SELECT COUNT(*)  FROM classroom  WHERE building <> 'Lamberton';
SELECT COUNT(*)  FROM classroom  WHERE building != 'Lamberton';
SELECT dept_name, building  FROM department  WHERE budget > (SELECT AVG(budget) FROM department);
SELECT name, building  FROM department  WHERE budget > (SELECT AVG(budget) FROM department);
SELECT building, room_number FROM classroom WHERE capacity BETWEEN 50 AND 100;
SELECT room_number, building FROM classroom WHERE capacity BETWEEN 50 AND 100;
SELECT dept_name, building  FROM department  WHERE budget = (SELECT MAX(budget) FROM department);
SELECT dept_name, building  FROM department  WHERE budget = (SELECT MAX(budget) FROM department);
SELECT name  FROM student  WHERE dept_name = 'History'  ORDER BY tot_cred DESC  LIMIT 1;
SELECT name  FROM student  WHERE dept_name = 'History'  ORDER BY tot_cred DESC  LIMIT 1;
SELECT COUNT(*)  FROM classroom  WHERE building = 'Lamberton';
SELECT COUNT(*)  FROM classroom  WHERE building = 'Lamberton';
SELECT COUNT(*) FROM advisor;
SELECT COUNT(*) FROM advisor;
SELECT COUNT(DISTINCT dept_name)  FROM course;
SELECT COUNT(DISTINCT dept_name)  FROM course;
SELECT COUNT(DISTINCT course_id)  FROM course  WHERE dept_name = 'Physics';
SELECT COUNT(*)  FROM course  WHERE dept_name = 'Physics';
SELECT c.title  FROM course c JOIN prereq p ON c.course_id = p.course_id GROUP BY c.course_id HAVING COUNT(p.prereq_id) = 2;
SELECT c.title  FROM course c JOIN prereq p ON c.course_id = p.course_id GROUP BY c.course_id HAVING COUNT(p.prereq_id) = 2;
SELECT C.title, C.credits, C.dept_name  FROM course C  WHERE C.course_id IN (     SELECT P.course_id      FROM prereq P      GROUP BY P.course_id      HAVING COUNT(P.prereq_id) > 1 );
SELECT C.title, C.credits, C.dept_name  FROM course C  WHERE C.course_id IN (     SELECT P.course_id      FROM prereq P      GROUP BY P.course_id      HAVING COUNT(P.prereq_id) > 1 );
SELECT COUNT(*)  FROM course  WHERE course_id NOT IN (SELECT course_id FROM prereq);
SELECT COUNT(*)  FROM course  WHERE NOT EXISTS (SELECT * FROM prereq WHERE prereq.course_id = course.course_id);
SELECT title  FROM course  WHERE course_id NOT IN (SELECT course_id FROM prereq)
SELECT title  FROM course  WHERE course_id NOT IN (SELECT course_id FROM prereq)
SELECT COUNT(DISTINCT ID)  FROM teaches;
SELECT COUNT(DISTINCT ID)  FROM teaches;
SELECT SUM(budget)  FROM department  WHERE dept_name IN ('Marketing', 'Finance');
SELECT SUM(budget)  FROM department  WHERE dept_name IN ('Marketing', 'Finance');
SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%';
SELECT T2.dept_name FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name WHERE T1.name LIKE '%Soisalon%';
SELECT COUNT(*)  FROM classroom  WHERE building = 'Lamberton' AND capacity < 50;
SELECT COUNT(*)  FROM classroom  WHERE building = 'Lamberton' AND capacity < 50;
SELECT name, budget FROM department WHERE budget > (SELECT AVG(budget) FROM department);
SELECT dept_name, budget  FROM department  WHERE budget > (SELECT AVG(budget) FROM department);
SELECT name  FROM instructor  WHERE dept_name = 'Statistics'  ORDER BY salary  LIMIT 1;
SELECT name  FROM instructor  WHERE dept_name = 'Statistics'  ORDER BY salary  LIMIT 1;
SELECT title  FROM course  WHERE dept_name = 'Statistics'  INTERSECT  SELECT title  FROM course  WHERE dept_name = 'Psychology';
SELECT title  FROM course AS T1  WHERE T1.dept_name = 'Statistics'  INTERSECT  SELECT title  FROM course AS T2  WHERE T2.dept_name = 'Psychology';
SELECT title  FROM course  WHERE dept_name = 'Statistics'  EXCEPT  SELECT title  FROM course  WHERE dept_name = 'Psychology';
SELECT title  FROM course  WHERE dept_name = 'Statistics'  EXCEPT  SELECT title  FROM course  WHERE dept_name = 'Psychology';
SELECT ID  FROM teaches  WHERE semester = 'Fall' AND year = 2009  EXCEPT  SELECT ID  FROM teaches  WHERE semester = 'Spring' AND year = 2010;
SELECT ID  FROM teaches  WHERE semester = 'Fall' AND year = 2009  EXCEPT  SELECT ID  FROM teaches  WHERE semester = 'Spring' AND year = 2010;
SELECT DISTINCT s.name  FROM student s  JOIN takes t ON s.ID = t.ID  WHERE t.year IN (2009, 2010);
SELECT DISTINCT s.name  FROM student s  JOIN takes t ON s.ID = t.ID  WHERE t.year IN (2009, 2010);
SELECT dept_name, COUNT(course_id) AS course_count FROM course GROUP BY dept_name ORDER BY course_count DESC LIMIT 3;
SELECT dept_name  FROM course  GROUP BY dept_name  ORDER BY COUNT(course_id) DESC  LIMIT 3;
SELECT T1.dept_name  FROM department AS T1  JOIN (     SELECT dept_name, SUM(credits) as total_credits      FROM course      GROUP BY dept_name      ORDER BY total_credits DESC      LIMIT 1 ) AS T2  ON T1.dept_name = T2.dept_name;
SELECT T2.dept_name  FROM course AS T1  JOIN department AS T2 ON T1.dept_name = T2.dept_name  GROUP BY T2.dept_name  ORDER BY SUM(T1.credits) DESC  LIMIT 1;
SELECT title  FROM course  ORDER BY title, credits;
SELECT title  FROM course  ORDER BY title, credits;
SELECT dept_name FROM department WHERE budget = (SELECT MIN(budget) FROM department);
SELECT dept_name FROM department ORDER BY budget ASC LIMIT 1;
SELECT dept_name, building  FROM department  ORDER BY budget DESC;
SELECT dept_name, building  FROM department  ORDER BY budget DESC;
SELECT name FROM instructor WHERE salary = (SELECT MAX(salary) FROM instructor);
SELECT name FROM instructor WHERE salary = (SELECT MAX(salary) FROM instructor);
SELECT * FROM instructor ORDER BY salary ASC;
SELECT * FROM instructor ORDER BY salary ASC;
SELECT name, dept_name  FROM student  ORDER BY tot_cred ASC;
SELECT name, dept_name  FROM student  ORDER BY tot_cred;
SELECT course.title, instructor.name  FROM course  JOIN teaches ON course.course_id = teaches.course_id  JOIN instructor ON instructor.ID = teaches.ID  WHERE teaches.year = 2008  ORDER BY course.title, instructor.name;
SELECT course.title, instructor.name  FROM course  JOIN teaches ON course.course_id = teaches.course_id  JOIN instructor ON instructor.ID = teaches.ID  WHERE teaches.year = 2008  ORDER BY course.title ASC;
SELECT i.name FROM instructor i JOIN advisor a ON i.ID = a.i_ID GROUP BY i.name HAVING COUNT(a.s_ID) > 1;
SELECT T1.name  FROM instructor AS T1  JOIN advisor AS T2 ON T1.ID = T2.i_ID  GROUP BY T2.i_ID  HAVING COUNT(*) > 1;
SELECT T1.name  FROM student AS T1  JOIN advisor AS T2 ON T1.ID = T2.s_ID  GROUP BY T1.ID  HAVING COUNT(T2.i_ID) > 1;
SELECT s.name  FROM student s JOIN advisor a ON s.ID = a.s_ID GROUP BY s.name HAVING COUNT(a.i_ID) > 1;
SELECT building, COUNT(*) AS num_rooms FROM classroom WHERE capacity > 50 GROUP BY building;
SELECT building, COUNT(*)  FROM classroom  WHERE capacity > 50  GROUP BY building;
SELECT building, MAX(capacity) AS max_capacity, AVG(capacity) AS avg_capacity  FROM classroom  GROUP BY building;
SELECT building, MAX(capacity) AS greatest_capacity, AVG(capacity) AS average_capacity  FROM classroom  GROUP BY building;
Error: 第 1397 个样本有 2 个SQL。
SELECT title  FROM course  GROUP BY title  HAVING COUNT(dept_name) > 1;
SELECT dept_name, SUM(credits) as total_credits FROM course GROUP BY dept_name;
SELECT dept_name, SUM(credits)  FROM course  GROUP BY dept_name;
SELECT MIN(salary)  FROM instructor  WHERE dept_name IN (     SELECT dept_name      FROM instructor      GROUP BY dept_name      HAVING AVG(salary) > (         SELECT AVG(salary)          FROM instructor     ) )
SELECT MIN(salary)  FROM instructor  WHERE dept_name IN (     SELECT dept_name      FROM instructor      GROUP BY dept_name      HAVING AVG(salary) > (         SELECT AVG(salary)          FROM instructor     ) )
SELECT semester, year, COUNT(*) AS num_courses FROM section GROUP BY semester, year;
SELECT semester, year, COUNT(*) AS num_courses FROM section GROUP BY semester, year;
SELECT year  FROM section  GROUP BY year  ORDER BY COUNT(course_id) DESC  LIMIT 1;
SELECT year, COUNT(*) as num_courses  FROM section  GROUP BY year  ORDER BY num_courses DESC  LIMIT 1;
SELECT year, semester  FROM section  GROUP BY year, semester  ORDER BY COUNT(course_id) DESC  LIMIT 1;
SELECT year, semester  FROM section  GROUP BY year, semester  ORDER BY COUNT(course_id) DESC  LIMIT 1;
SELECT dept_name, COUNT(*) AS num_students FROM student GROUP BY dept_name ORDER BY num_students DESC LIMIT 1;
SELECT T3.dept_name  FROM student AS T1  JOIN department AS T3 ON T1.dept_name = T3.dept_name  GROUP BY T3.dept_name  ORDER BY COUNT(T1.ID) DESC  LIMIT 1
SELECT dept_name, COUNT(*) AS total_students FROM student GROUP BY dept_name;
SELECT dept_name, COUNT(*) AS num_students FROM student GROUP BY dept_name;
SELECT semester, year  FROM takes GROUP BY semester, year ORDER BY COUNT(ID) ASC LIMIT 1;
SELECT semester, year  FROM (     SELECT semester, year, COUNT(ID) AS num_students     FROM takes     GROUP BY semester, year ) AS student_count ORDER BY num_students ASC LIMIT 1;
SELECT i_ID  FROM advisor  WHERE s_ID IN (SELECT ID                 FROM student                 WHERE dept_name = 'History')  GROUP BY i_ID  HAVING COUNT(*) = (SELECT COUNT(*)                     FROM student                     WHERE dept_name = 'History');
SELECT i.ID  FROM instructor i  JOIN advisor a ON i.ID = a.i_ID  JOIN student s ON a.s_ID = s.ID  WHERE s.dept_name = 'History';
SELECT DISTINCT T2.name, T2.salary  FROM advisor AS T1  JOIN instructor AS T2 ON T1.i_ID = T2.ID  JOIN student AS T3 ON T1.s_ID = T3.ID  WHERE T3.dept_name = 'History';
SELECT T2.name, T2.salary  FROM advisor AS T1  JOIN instructor AS T2 ON T1.i_ID = T2.ID  JOIN student AS T3 ON T1.s_ID = T3.ID  WHERE T3.dept_name = 'History'
SELECT course_id FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq);
SELECT course_id FROM course WHERE NOT EXISTS (SELECT * FROM prereq WHERE course.course_id = prereq.course_id);
SELECT title  FROM course  WHERE course_id NOT IN (SELECT course_id FROM prereq)
SELECT title  FROM course  WHERE NOT EXISTS (     SELECT *      FROM prereq      WHERE course.course_id = prereq.course_id );
SELECT p.prereq_id, c.title  FROM prereq AS p  JOIN course AS c ON p.prereq_id = c.course_id  WHERE p.course_id = (SELECT course_id FROM course WHERE title = 'International Finance');
SELECT T3.title  FROM course AS T1  JOIN prereq AS T2 ON T1.course_id = T2.course_id  JOIN course AS T3 ON T3.course_id = T2.prereq_id  WHERE T1.title = 'International Finance'
SELECT c.title  FROM course c JOIN prereq p ON c.course_id = p.course_id WHERE p.prereq_id IN (     SELECT course_id      FROM course      WHERE title = 'Differential Geometry' );
SELECT c.title  FROM course c  JOIN prereq p ON c.course_id = p.course_id  WHERE p.prereq_id = (SELECT course_id FROM course WHERE title = 'Differential Geometry');
SELECT DISTINCT s.name  FROM student s, takes t  WHERE s.ID = t.ID AND t.semester = 'Fall' AND t.year = 2003;
SELECT DISTINCT s.name  FROM student s  JOIN takes t ON s.ID = t.ID  WHERE t.semester = 'Fall' AND t.year = 2003;
SELECT T1.title  FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id  WHERE T2.building = 'Chandler' AND T2.semester = 'fall' AND T2.year = 2010;
SELECT T1.title  FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id  WHERE T2.building = 'Chandler' AND T2.semester = 'Fall' AND T2.year = 2010;
SELECT T3.name  FROM course AS T1  JOIN teaches AS T2 ON T1.course_id = T2.course_id  JOIN instructor AS T3 ON T3.ID = T2.ID  WHERE T1.title = 'C Programming' AND T2.semester < SYSDATE();
SELECT DISTINCT T2.name  FROM course AS T1  JOIN instructor AS T2 ON T1.dept_name = T2.dept_name  JOIN teaches AS T3 ON T2.ID = T3.ID  WHERE T1.title = 'C Programming';
SELECT T1.name, T1.salary  FROM instructor AS T1  JOIN advisor AS T2 ON T1.ID = T2.i_ID  JOIN student AS T3 ON T2.s_ID = T3.ID  WHERE T3.dept_name = 'Math';
SELECT T2.name, T2.salary  FROM advisor AS T1  JOIN instructor AS T2 ON T1.i_ID = T2.ID  JOIN student AS T3 ON T1.s_ID = T3.ID  WHERE T3.dept_name = 'Math'
SELECT T3.name  FROM advisor AS T1  JOIN student AS T2 ON T1.s_ID = T2.ID  JOIN instructor AS T3 ON T1.i_ID = T3.ID  WHERE T2.dept_name = 'Math'  ORDER BY T2.tot_cred;
SELECT T3.name  FROM advisor AS T1  JOIN student AS T2 ON T1.s_ID = T2.ID  JOIN instructor AS T3 ON T1.i_ID = T3.ID  WHERE T2.dept_name = 'math'  ORDER BY T2.tot_cred;
SELECT T1.title  FROM course AS T1  JOIN prereq AS T2  ON T1.course_id = T2.prereq_id  WHERE T2.course_id = 'Mobile Computing'
SELECT title  FROM course  WHERE course_id IN (SELECT prereq_id FROM prereq WHERE course_id = 'Mobile Computing');
SELECT T3.name FROM student AS T1 JOIN advisor AS T2 ON T1.ID = T2.s_ID JOIN instructor AS T3 ON T3.ID = T2.i_ID WHERE T1.tot_cred = (SELECT MAX(tot_cred) FROM student)
SELECT T3.name FROM student AS T1 JOIN advisor AS T2 ON T1.ID = T2.s_ID JOIN instructor AS T3 ON T3.ID = T2.i_ID WHERE T1.tot_cred = (SELECT MAX(tot_cred) FROM student)
SELECT name  FROM instructor  WHERE ID NOT IN (SELECT ID FROM teaches);
SELECT name  FROM instructor  WHERE ID NOT IN (SELECT ID FROM teaches);
SELECT ID FROM instructor WHERE ID NOT IN (SELECT ID FROM teaches)
SELECT ID FROM instructor WHERE ID NOT IN (SELECT ID FROM teaches)
SELECT name  FROM instructor  WHERE ID NOT IN (     SELECT teaches.ID      FROM teaches      WHERE semester = 'Spring' );
SELECT name  FROM instructor  WHERE ID NOT IN (     SELECT teaches.ID      FROM teaches      WHERE semester = 'Spring' );
SELECT dept_name, AVG(salary) as avg_salary FROM instructor GROUP BY dept_name ORDER BY avg_salary DESC LIMIT 1;
SELECT dept_name, AVG(salary) as avg_salary FROM instructor GROUP BY dept_name ORDER BY avg_salary DESC LIMIT 1;
SELECT COUNT(*), AVG(salary)  FROM instructor  WHERE dept_name = (     SELECT dept_name      FROM department      ORDER BY budget DESC      LIMIT 1 );
SELECT COUNT(i.ID), AVG(i.salary)  FROM instructor i JOIN department d ON i.dept_name = d.dept_name WHERE d.budget = (SELECT MAX(budget) FROM department);
SELECT T3.title, T3.credits FROM classroom AS T1 JOIN section AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.capacity = (SELECT MAX(capacity) FROM classroom)
SELECT T1.title, T1.credits  FROM course AS T1  JOIN section AS T2 ON T1.course_id = T2.course_id  JOIN classroom AS T3 ON T3.building = T2.building AND T3.room_number = T2.room_number  WHERE T3.capacity = (SELECT MAX(capacity) FROM classroom);
SELECT s.name  FROM student s WHERE s.dept_name != 'Biology' AND NOT EXISTS (     SELECT *     FROM takes t     JOIN section sec ON t.course_id = sec.course_id AND t.sec_id = sec.sec_id AND t.semester = sec.semester AND t.year = sec.year     JOIN course c ON sec.course_id = c.course_id     WHERE t.ID = s.ID     AND c.dept_name = 'Biology' );
SELECT s.name  FROM student s  WHERE s.ID NOT IN (     SELECT t.ID      FROM takes t      JOIN course c ON t.course_id = c.course_id      WHERE c.dept_name = 'Biology' )
SELECT      s.dept_name,     COUNT(DISTINCT s.ID) AS total_students,     COUNT(DISTINCT i.ID) AS total_instructors FROM      student s LEFT JOIN      instructor i ON s.dept_name = i.dept_name GROUP BY      s.dept_name;
SELECT      s.dept_name AS department,      COUNT(DISTINCT s.ID) AS num_students,      COUNT(DISTINCT i.ID) AS num_instructors  FROM      student s  LEFT JOIN      instructor i ON s.dept_name = i.dept_name  GROUP BY      s.dept_name;
SELECT T3.name  FROM prereq AS T1  JOIN course AS T2 ON T1.course_id = T2.course_id  JOIN takes AS T4 ON T4.course_id = T1.prereq_id  JOIN student AS T3 ON T3.ID = T4.ID  WHERE T2.title = 'International Finance' GROUP BY T3.name;
SELECT s.name  FROM student s JOIN takes t ON s.ID = t.ID JOIN prereq p ON t.course_id = p.prereq_id WHERE p.course_id IN (SELECT course_id FROM course WHERE title = 'International Finance') GROUP BY s.name;
SELECT name, salary  FROM instructor  WHERE salary < (     SELECT AVG(salary)      FROM instructor      WHERE dept_name = 'Physics' ) AND dept_name = 'Physics';
SELECT name, salary  FROM instructor  WHERE salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics')  AND dept_name = 'Physics';
SELECT DISTINCT s.name  FROM student s, takes t, course c  WHERE s.ID = t.ID AND c.course_id = t.course_id AND c.dept_name = 'Statistics';
SELECT DISTINCT s.name  FROM student s JOIN takes t ON s.ID = t.ID JOIN section sec ON t.course_id = sec.course_id AND t.sec_id = sec.sec_id AND t.semester = sec.semester AND t.year = sec.year JOIN course c ON sec.course_id = c.course_id WHERE c.dept_name = 'Statistics';
SELECT building, room_number, semester, year  FROM section  JOIN course ON section.course_id = course.course_id  WHERE course.dept_name = 'Psychology'  ORDER BY course.title;
SELECT building, room_number, semester, year  FROM section  JOIN course ON section.course_id = course.course_id  WHERE course.dept_name = 'Psychology'  ORDER BY course.title;
SELECT name FROM instructor WHERE dept_name = 'Computer Science';
SELECT name  FROM instructor  WHERE dept_name = 'Comp. Sci.';
SELECT name  FROM instructor  WHERE dept_name = 'Comp. Sci.' AND salary > 80000;
SELECT name  FROM instructor  WHERE dept_name = 'Comp. Sci.' AND salary > 80000;
SELECT DISTINCT T1.name, T2.course_id  FROM instructor AS T1  JOIN teaches AS T2 ON T1.ID = T2.ID;
SELECT T1.name, T2.course_id  FROM instructor AS T1  JOIN teaches AS T2  ON T1.ID = T2.ID;
SELECT DISTINCT T1.name, T3.course_id  FROM instructor AS T1  JOIN teaches AS T2 ON T1.ID = T2.ID  JOIN course AS T3 ON T2.course_id = T3.course_id  WHERE T1.dept_name = 'Art';
SELECT T1.name, T3.course_id  FROM instructor AS T1  JOIN teaches AS T2 ON T1.ID = T2.ID  JOIN section AS T3 ON T2.course_id = T3.course_id AND T2.sec_id = T3.sec_id AND T2.semester = T3.semester AND T2.year = T3.year  WHERE T1.dept_name = 'Art';
SELECT name FROM instructor WHERE name LIKE '%dar%';
SELECT name FROM instructor WHERE name LIKE '%dar%';
SELECT DISTINCT name  FROM instructor  ORDER BY name ASC;
SELECT DISTINCT name FROM instructor ORDER BY name;
SELECT course_id FROM section WHERE (semester='Fall' AND year=2009) OR (semester='Spring' AND year=2010);
SELECT DISTINCT course_id FROM section WHERE semester='Fall' AND year=2009 UNION SELECT DISTINCT course_id FROM section WHERE semester='Spring' AND year=2010;
SELECT DISTINCT course_id FROM section WHERE (semester = 'Fall' AND year = 2009) OR (semester = 'Spring' AND year = 2010);
SELECT course_id FROM section WHERE semester = 'Fall' AND year = 2009 GROUP BY course_id HAVING EXISTS (     SELECT *     FROM section s2     WHERE s2.course_id = section.course_id     AND s2.semester = 'Spring' AND s2.year = 2010 )
SELECT course_id FROM section WHERE semester = 'Fall' AND year = 2009 EXCEPT SELECT course_id FROM section WHERE semester = 'Spring' AND year = 2010;
SELECT course_id FROM section WHERE semester = 'Fall' AND year = 2009 EXCEPT SELECT course_id FROM section WHERE semester = 'Spring' AND year = 2010;
SELECT DISTINCT salary  FROM instructor  WHERE salary < (SELECT MAX(salary) FROM instructor);
SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT MAX(salary) FROM instructor);
SELECT COUNT(DISTINCT T1.name)  FROM instructor AS T1  JOIN teaches AS T2 ON T1.ID = T2.ID  WHERE T2.semester = 'Spring' AND T2.year = 2010;
SELECT COUNT(DISTINCT T1.name)  FROM instructor AS T1  JOIN teaches AS T2 ON T1.ID = T2.ID  WHERE T2.semester = 'Spring' AND T2.year = 2010;
SELECT dept_name, AVG(salary)  FROM instructor  GROUP BY dept_name  HAVING AVG(salary) > 42000;
SELECT dept_name, AVG(salary)  FROM instructor  GROUP BY dept_name  HAVING AVG(salary) > 42000;
SELECT name  FROM instructor  WHERE salary > (SELECT MIN(salary)                  FROM instructor                  WHERE dept_name = 'Biology')
SELECT name  FROM instructor  WHERE salary > (SELECT MIN(salary)                  FROM instructor                  WHERE dept_name = 'Biology') AND dept_name != 'Biology' UNION SELECT name  FROM instructor  WHERE dept_name = 'Biology';
SELECT name  FROM instructor  WHERE salary > (     SELECT MAX(salary)      FROM instructor      WHERE dept_name = 'Biology' )
SELECT name  FROM instructor  WHERE salary > ANY (     SELECT salary      FROM instructor      WHERE dept_name = 'Biology' ) AND NOT dept_name = 'Biology';
SELECT COUNT(*) FROM debate;
SELECT Venue  FROM debate  ORDER BY Num_of_Audience ASC;
SELECT Date, Venue FROM debate;
SELECT Date  FROM debate  WHERE Num_of_Audience > 150;
SELECT Name  FROM people  WHERE Age IN (35, 36);
SELECT Party FROM people WHERE Age = (SELECT MIN(Age) FROM people)
SELECT Party, COUNT(*) AS Num_of_People FROM people GROUP BY Party;
SELECT Party  FROM people  GROUP BY Party  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT DISTINCT Venue FROM debate;
SELECT p.Name, d.Date, d.Venue  FROM people p  JOIN debate_people dp ON p.People_ID = dp.Affirmative  JOIN debate d ON dp.Debate_ID = d.Debate_ID;
SELECT P.Name, D.Date, D.Venue  FROM people AS P  JOIN debate_people AS DP ON P.People_ID = DP.Negative  JOIN debate AS D ON DP.Debate_ID = D.Debate_ID  ORDER BY P.Name ASC;
SELECT p.Name  FROM people p  JOIN debate_people dp ON p.People_ID = dp.Affirmative  JOIN debate d ON dp.Debate_ID = d.Debate_ID  WHERE d.Num_of_Audience > 200;
SELECT P.Name, COUNT(DP.Affirmative)  FROM people P  JOIN debate_people DP ON P.People_ID = DP.Affirmative  GROUP BY P.Name;
SELECT p.Name FROM people p JOIN debate_people dp ON p.People_ID = dp.Negative GROUP BY p.Name HAVING COUNT(*) >= 2;
SELECT p.Name  FROM people p  LEFT JOIN debate_people dp ON p.People_ID = dp.Affirmative  WHERE dp.Affirmative IS NULL;
SELECT Customer_Details  FROM Customers  ORDER BY Customer_Details ASC;
SELECT Customer_Details  FROM Customers  ORDER BY Customer_Details ASC;
SELECT Policies.Policy_Type_Code  FROM Policies  JOIN Customers ON Policies.Customer_ID = Customers.Customer_ID  WHERE Customers.Customer_Details = 'Dayana Robel';
SELECT T2.Policy_Type_Code  FROM Customers AS T1  JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID  WHERE T1.Customer_Details = 'Dayana Robel';
SELECT Policy_Type_Code, COUNT(*) as frequency FROM Policies GROUP BY Policy_Type_Code ORDER BY frequency DESC LIMIT 1;
SELECT Policy_Type_Code, COUNT(*) as frequency FROM Policies GROUP BY Policy_Type_Code ORDER BY frequency DESC LIMIT 1;
SELECT Policy_Type_Code  FROM Policies  GROUP BY Policy_Type_Code  HAVING COUNT(DISTINCT Customer_ID) > 2;
SELECT Policy_Type_Code  FROM Policies  GROUP BY Policy_Type_Code  HAVING COUNT(Customer_ID) > 2;
SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid  FROM Claim_Headers;
SELECT SUM(Amount_Paid) AS Total_Amount_Paid, AVG(Amount_Paid) AS Average_Amount_Paid  FROM Claim_Headers;
SELECT SUM(ch.Amount_Claimed)  FROM Claim_Headers ch  JOIN Claims_Documents cd ON ch.Claim_Header_ID = cd.Claim_ID  WHERE cd.Created_Date = (SELECT MAX(Created_Date) FROM Claims_Documents)
SELECT SUM(Amount_Claimed)  FROM Claim_Headers WHERE Claim_Header_ID IN (     SELECT Claim_ID     FROM Claims_Documents     WHERE Created_Date = (         SELECT MAX(Created_Date)         FROM Claims_Documents     ) );
SELECT C.Customer_Details FROM Customers C JOIN Policies P ON C.Customer_ID = P.Customer_ID JOIN Claim_Headers CH ON P.Policy_ID = CH.Policy_ID WHERE CH.Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claim_Headers)
SELECT C.Customer_Details FROM Customers C JOIN Policies P ON C.Customer_ID = P.Customer_ID JOIN Claim_Headers CH ON P.Policy_ID = CH.Policy_ID WHERE CH.Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claim_Headers) LIMIT 1;
SELECT C.Customer_Details FROM Customers C JOIN Policies P ON C.Customer_ID = P.Customer_ID JOIN Claim_Headers CH ON P.Policy_ID = CH.Policy_ID WHERE CH.Amount_Piad = (     SELECT MIN(Amount_Piad)     FROM Claim_Headers )
SELECT C.Customer_Details FROM Customers C JOIN Policies P ON C.Customer_ID = P.Customer_ID JOIN Claim_Headers CH ON P.Policy_ID = CH.Policy_ID WHERE CH.Amount_Claimed = (     SELECT MIN(Amount_Claimed)     FROM Claim_Headers ) LIMIT 1;
SELECT Customer_Details  FROM Customers  WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Policies);
SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Policies)
SELECT COUNT(*) FROM Claims_Processing_Stages;
SELECT COUNT(DISTINCT Claim_Stage_ID) FROM Claims_Processing_Stages;
SELECT Claim_Status_Name, COUNT(*) AS Number_of_Claims FROM Claims_Processing_Stages cps JOIN Claims_Processing cp ON cps.Claim_Stage_ID = cp.Claim_Stage_ID GROUP BY Claim_Status_Name ORDER BY Number_of_Claims DESC LIMIT 1;
SELECT cpst.Claim_Status_Name, COUNT(cp.Claim_Processing_ID) as Total_Claims FROM Claims_Processing_Stages cpst JOIN Claims_Processing cp ON cpst.Claim_Stage_ID = cp.Claim_Stage_ID GROUP BY cpst.Claim_Status_Name ORDER BY Total_Claims DESC LIMIT 1;
SELECT Customer_Details  FROM Customers  WHERE Customer_Details LIKE '%Diana%';
SELECT Customer_Details  FROM Customers  WHERE Customer_Details LIKE '%Diana%';
SELECT DISTINCT C.Customer_Details FROM Customers C JOIN Policies P ON C.Customer_ID = P.Customer_ID WHERE P.Policy_Type_Code = 'DP';
SELECT Customers.Customer_Details  FROM Customers  JOIN Policies ON Customers.Customer_ID = Policies.Customer_ID  WHERE Policies.Policy_Type_Code = 'Deputy';
SELECT DISTINCT c.Customer_Details FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID WHERE p.Policy_Type_Code IN ('Deputy', 'Uniformed');
SELECT Customer_Details FROM Customers WHERE Customer_ID IN (     SELECT Customer_ID     FROM Policies     WHERE Policy_Type_Code IN ('Deputy', 'Uniform') );
SELECT Customer_Details AS Customer_Name FROM Customers UNION SELECT Staff_Details AS Staff_Name FROM Staff;
SELECT Customer_Details FROM Customers UNION SELECT Staff_Details FROM Staff
SELECT Policy_Type_Code, COUNT(*) AS Number_of_Records FROM Policies GROUP BY Policy_Type_Code;
SELECT Policy_Type_Code, COUNT(*) AS Policy_Count FROM Policies GROUP BY Policy_Type_Code;
SELECT c.Customer_Details, COUNT(p.Policy_ID) AS PolicyCount FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID GROUP BY c.Customer_Details ORDER BY PolicyCount DESC LIMIT 1;
SELECT C.Customer_Details, COUNT(P.Policy_ID) AS NumberOfPolicies FROM Customers C JOIN Policies P ON C.Customer_ID = P.Customer_ID GROUP BY C.Customer_Details ORDER BY NumberOfPolicies DESC LIMIT 1;
SELECT Claim_Status_Description  FROM Claims_Processing_Stages  WHERE Claim_Status_Name = 'Open';
SELECT Claim_Status_Description  FROM Claims_Processing_Stages  WHERE Claim_Status_Name = 'Open';
SELECT COUNT(DISTINCT Claim_Outcome_Code) FROM Claims_Processing;
SELECT COUNT(DISTINCT Claim_Outcome_Code)  FROM Claims_Processing;
SELECT c.Customer_Details FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID WHERE p.Start_Date = (SELECT MAX(Start_Date) FROM Policies);
SELECT c.Customer_Details FROM Customers c JOIN Policies p ON c.Customer_ID = p.Customer_ID WHERE p.Start_Date = (     SELECT MAX(Start_Date)     FROM Policies )
SELECT COUNT(*) FROM Accounts;
SELECT COUNT(*) FROM Accounts;
SELECT COUNT(DISTINCT T1.customer_id)  FROM Customers AS T1  JOIN Accounts AS T2  ON T1.customer_id = T2.customer_id;
SELECT COUNT(DISTINCT T1.customer_id)  FROM Customers AS T1  JOIN Accounts AS T2  ON T1.customer_id = T2.customer_id;
SELECT account_id, date_account_opened, account_name, other_account_details  FROM Accounts;
SELECT account_id, date_account_opened, account_name, other_account_details FROM Accounts;
SELECT a.account_id, a.account_name, a.other_account_details FROM Accounts AS a JOIN Customers AS c ON a.customer_id = c.customer_id WHERE c.customer_first_name = 'Meaghan';
SELECT Accounts.account_id, Accounts.account_name, Accounts.date_account_opened, Accounts.other_account_details  FROM Accounts  JOIN Customers ON Accounts.customer_id = Customers.customer_id  WHERE Customers.customer_first_name = 'Meaghan';
SELECT Accounts.account_name, Accounts.other_account_details FROM Accounts JOIN Customers ON Accounts.customer_id = Customers.customer_id WHERE Customers.customer_first_name = 'Meaghan' AND Customers.customer_last_name = 'Keeling';
SELECT a.account_id, a.date_account_opened, a.account_name, a.other_account_details FROM Accounts a JOIN Customers c ON a.customer_id = c.customer_id WHERE c.customer_first_name = 'Meaghan' AND c.customer_last_name = 'Keeling';
SELECT Customers.customer_first_name, Customers.customer_last_name  FROM Customers JOIN Accounts ON Customers.customer_id = Accounts.customer_id WHERE Accounts.account_name = '900';
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id WHERE a.account_name = '900';
SELECT COUNT(*)  FROM Customers  WHERE NOT EXISTS (     SELECT 1      FROM Accounts      WHERE Accounts.customer_id = Customers.customer_id );
SELECT COUNT(*)  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)
SELECT DISTINCT c.customer_first_name, c.customer_last_name, c.phone_number  FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id;
SELECT DISTINCT c.customer_first_name, c.customer_last_name, c.phone_number  FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id;
SELECT customer_id  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)
SELECT COUNT(*) AS NumberOfAccounts, customer_id  FROM Accounts  GROUP BY customer_id;
SELECT customer_id, COUNT(*) as num_accounts FROM Accounts GROUP BY customer_id;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name, COUNT(a.account_id) as num_accounts FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name ORDER BY num_accounts DESC LIMIT 1;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name  FROM Customers c JOIN (     SELECT customer_id, COUNT(*) as account_count     FROM Accounts     GROUP BY customer_id     ORDER BY account_count DESC     LIMIT 1 ) a ON c.customer_id = a.customer_id;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name, COUNT(a.account_id) as num_accounts FROM Customers c LEFT JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name, COUNT(a.account_id) as num_accounts FROM Customers c LEFT JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name
SELECT c.customer_first_name, c.customer_id FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_id, c.customer_first_name HAVING COUNT(a.account_id) >= 2;
SELECT c.customer_id, c.customer_first_name FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_id, c.customer_first_name HAVING COUNT(a.account_id) >= 2;
SELECT COUNT(*) FROM Customers;
SELECT COUNT(*) FROM Customers;
SELECT gender, COUNT(*) AS number_of_customers FROM Customers GROUP BY gender;
SELECT gender, COUNT(*) AS number_of_customers FROM Customers GROUP BY gender;
SELECT COUNT(*) FROM Financial_Transactions;
SELECT COUNT(*) FROM Financial_Transactions;
SELECT COUNT(transaction_id) AS Number_of_Transactions, account_id  FROM Financial_Transactions  GROUP BY account_id;
SELECT account_id, COUNT(*)  FROM Financial_Transactions  GROUP BY account_id;
SELECT COUNT(*)  FROM Financial_Transactions  WHERE account_id = (SELECT account_id FROM Accounts WHERE account_name = '337');
SELECT COUNT(*)  FROM Financial_Transactions  WHERE account_id = (SELECT account_id FROM Accounts WHERE account_name = '337');
SELECT AVG(transaction_amount) AS average_transaction_amount,        MIN(transaction_amount) AS minimum_transaction_amount,        MAX(transaction_amount) AS maximum_transaction_amount,        SUM(transaction_amount) AS total_transaction_amount FROM Financial_Transactions;
SELECT AVG(transaction_amount) as Average_Amount,         MIN(transaction_amount) as Minimum_Amount,         MAX(transaction_amount) as Maximum_Amount,         SUM(transaction_amount) as Total_Amount  FROM Financial_Transactions;
SELECT transaction_id  FROM Financial_Transactions  WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM Financial_Transactions);
SELECT transaction_id FROM Financial_Transactions WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM Financial_Transactions);
SELECT transaction_type, SUM(transaction_amount)  FROM Financial_Transactions  GROUP BY transaction_type;
SELECT transaction_type, SUM(transaction_amount) AS total_transaction_amount  FROM Financial_Transactions  GROUP BY transaction_type;
SELECT Accounts.account_name, Accounts.account_id, COUNT(Financial_Transactions.transaction_id) AS num_transactions FROM Accounts LEFT JOIN Financial_Transactions ON Accounts.account_id = Financial_Transactions.account_id GROUP BY Accounts.account_id;
SELECT Accounts.account_id, Accounts.account_name, COUNT(Financial_Transactions.transaction_id) AS num_transactions FROM Accounts LEFT JOIN Financial_Transactions ON Accounts.account_id = Financial_Transactions.account_id GROUP BY Accounts.account_id, Accounts.account_name
SELECT account_id, COUNT(*) as transaction_count FROM Financial_Transactions GROUP BY account_id ORDER BY transaction_count DESC LIMIT 1;
SELECT account_id  FROM Financial_Transactions  GROUP BY account_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T1.account_id, T1.account_name  FROM Accounts AS T1  JOIN Financial_Transactions AS T2 ON T1.account_id = T2.account_id  GROUP BY T1.account_id, T1.account_name  HAVING COUNT(T2.transaction_id) >= 4;
SELECT a.account_id, a.account_name FROM Accounts a JOIN Financial_Transactions ft ON a.account_id = ft.account_id GROUP BY a.account_id, a.account_name HAVING COUNT(ft.transaction_id) >= 4;
SELECT DISTINCT product_size FROM Products;
SELECT DISTINCT product_size FROM Products;
SELECT DISTINCT product_color FROM Products;
SELECT DISTINCT product_color  FROM Products;
SELECT Invoice_number, COUNT(*) AS Number_of_Transactions FROM Financial_Transactions GROUP BY Invoice_number;
SELECT invoice_number, COUNT(*) as transaction_count FROM Financial_Transactions GROUP BY invoice_number;
SELECT T1.invoice_number, T1.invoice_date  FROM Invoices AS T1  JOIN Financial_Transactions AS T2  ON T1.invoice_number = T2.invoice_number  GROUP BY T1.invoice_number  ORDER BY COUNT(T2.transaction_id) DESC  LIMIT 1;
SELECT T1.invoice_number, T1.invoice_date  FROM Invoices AS T1  JOIN Financial_Transactions AS T2  ON T1.invoice_number = T2.invoice_number  GROUP BY T1.invoice_number  ORDER BY COUNT(T2.transaction_id) DESC  LIMIT 1;
SELECT COUNT(*) FROM Invoices;
SELECT COUNT(*) FROM Invoices;
SELECT i.invoice_date, o.order_id, o.order_details  FROM Invoices i  JOIN Orders o ON i.order_id = o.order_id;
SELECT i.invoice_date, o.order_id, o.order_details  FROM Invoices i  JOIN Orders o ON i.order_id = o.order_id;
SELECT order_id, COUNT(invoice_number) AS num_invoices FROM Invoices GROUP BY order_id;
SELECT order_id, COUNT(invoice_number) as invoice_count FROM Invoices GROUP BY order_id;
SELECT o.order_id, o.order_details FROM Orders o WHERE (     SELECT COUNT(*)     FROM Invoices i     WHERE o.order_id = i.order_id ) > 2;
SELECT o.order_id, o.order_details FROM Orders o WHERE o.order_id IN (     SELECT i.order_id     FROM Invoices i     GROUP BY i.order_id     HAVING COUNT(i.invoice_number) >= 2 )
SELECT c.customer_last_name, c.customer_id, c.phone_number FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_last_name, c.phone_number ORDER BY COUNT(o.order_id) DESC LIMIT 1;
SELECT C.customer_last_name, C.customer_id, C.phone_number FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.customer_last_name, C.phone_number ORDER BY COUNT(O.order_id) DESC LIMIT 1;
SELECT Products.product_name  FROM Products  LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id  WHERE Order_Items.product_id IS NULL;
SELECT p.product_name  FROM Products p  LEFT JOIN Order_Items oi ON p.product_id = oi.product_id  WHERE oi.product_id IS NULL;
SELECT p.product_name, SUM(oi.product_quantity) AS total_quantity_ordered FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_name;
SELECT Products.product_name, SUM(Order_Items.product_quantity) as total_quantity_ordered FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_name;
SELECT Orders.order_id, COUNT(Order_Items.order_item_id) AS number_of_items FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id;
SELECT order_id, COUNT(order_item_id) AS numberOfOrderItems FROM Order_Items GROUP BY order_id;
SELECT product_id, COUNT(DISTINCT order_id) AS unique_orders FROM Order_Items GROUP BY product_id;
SELECT product_id, COUNT(DISTINCT order_id)  FROM Order_Items  GROUP BY product_id;
SELECT P.product_name, COUNT(DISTINCT C.customer_id) AS NumberOfCustomers FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id GROUP BY P.product_name;
SELECT p.product_name, COUNT(DISTINCT o.customer_id) AS num_customers FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id GROUP BY p.product_name;
SELECT Orders.order_id, COUNT(Order_Items.product_id) AS numberOfProducts FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id;
SELECT order_id, COUNT(DISTINCT product_id)  FROM Order_Items  GROUP BY order_id;
SELECT Orders.order_id, SUM(Order_Items.product_quantity) as total_quantity FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id;
SELECT Orders.order_id, SUM(Order_Items.product_quantity) AS total_product_quantity FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id;
SELECT COUNT(*)  FROM Products  WHERE product_id NOT IN (SELECT product_id FROM Order_Items)
SELECT COUNT(*)  FROM Products  WHERE product_id NOT IN (SELECT product_id FROM Order_Items)
SELECT COUNT(*) FROM church WHERE Open_Date < 1850;
SELECT Name, Open_Date, Organized_by FROM church;
SELECT Name  FROM church  ORDER BY Open_Date DESC;
SELECT Open_Date AS Opening_Year FROM church GROUP BY Open_Date HAVING COUNT(*) >= 2
SELECT Organized_by, Name  FROM church  WHERE Open_Date BETWEEN 1830 AND 1840;
SELECT Open_Date, COUNT(*)  FROM church  GROUP BY Open_Date;
Error: 第 1636 个样本有 2 个SQL。
SELECT COUNT(*) FROM people WHERE Age > 30 AND Is_Male = 'No';
SELECT DISTINCT Country  FROM people  WHERE Age > 25 AND Age < 30;
SELECT MIN(Age) AS Min_Age, MAX(Age) AS Max_Age, AVG(Age) AS Avg_Age FROM people;
SELECT Name, Country  FROM people  WHERE Age < (SELECT AVG(Age) FROM people);
SELECT p1.Name, p2.Name  FROM wedding w  JOIN people p1 ON w.Male_ID = p1.People_ID  JOIN people p2 ON w.Female_ID = p2.People_ID  WHERE w.Year > 2014;
SELECT Name, Age  FROM people  WHERE Is_Male = 1 AND People_ID NOT IN (SELECT Male_ID FROM wedding);
SELECT Name  FROM church  WHERE Church_ID NOT IN (SELECT Church_ID FROM wedding WHERE Year = 2015)
SELECT T2.Name  FROM wedding AS T1  JOIN church AS T2 ON T1.Church_ID = T2.Church_ID  GROUP BY T2.Name  HAVING COUNT(*) >= 2;
SELECT p.Name FROM people p JOIN wedding w ON p.People_ID = w.Female_ID WHERE p.Country = 'Canada' AND p.Is_Male = 'No' AND w.Year = 2016;
SELECT COUNT(*)  FROM wedding  WHERE Year = 2016;
SELECT T2.Name FROM wedding AS T1 JOIN church AS T2 ON T1.Church_ID = T2.Church_ID JOIN people AS T3 ON T1.Male_ID = T3.People_ID OR T1.Female_ID = T3.People_ID WHERE T3.Age > 30
SELECT Country, COUNT(*) AS NumberOfPeople FROM people GROUP BY Country;
SELECT COUNT(DISTINCT T1.Church_ID) FROM church AS T1 JOIN wedding AS T2 ON T1.Church_ID = T2.Church_ID WHERE T2.Year = 2016
SELECT COUNT(*) FROM artist;
SELECT COUNT(*) FROM artist;
SELECT Name, Age, Country  FROM artist  ORDER BY Year_Join;
SELECT Name, Age, Country FROM artist ORDER BY Year_Join;
SELECT DISTINCT Country FROM artist;
SELECT DISTINCT Country FROM artist;
SELECT Name, Year_Join  FROM artist  WHERE Country <> 'United States';
SELECT Name, Year_Join  FROM artist  WHERE Country != 'United States';
SELECT COUNT(*) FROM artist WHERE Age > 46 AND Year_Join > 1990;
SELECT COUNT(*) FROM artist WHERE Age > 46 AND Year_Join > 1990;
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age  FROM artist  WHERE Country = 'United States';
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age  FROM artist  WHERE Country = 'United States';
SELECT Name FROM artist WHERE Year_Join = (SELECT MAX(Year_Join) FROM artist);
SELECT Name  FROM artist  ORDER BY Year_Join DESC  LIMIT 1;
SELECT COUNT(*)  FROM exhibition  WHERE Year >= 2005;
SELECT COUNT(*)  FROM exhibition  WHERE Year >= 2005;
SELECT Theme, Year FROM exhibition WHERE Ticket_Price < 15;
SELECT Theme, Year FROM exhibition WHERE Ticket_Price < 15;
SELECT A.Name, COUNT(E.Exhibition_ID)  FROM artist A  JOIN exhibition E ON A.Artist_ID = E.Artist_ID  GROUP BY A.Name;
SELECT a.Name, COUNT(e.Exhibition_ID) as Num_Exhibitions FROM artist a JOIN exhibition e ON a.Artist_ID = e.Artist_ID GROUP BY a.Artist_ID, a.Name;
SELECT T1.Name, T1.Country  FROM artist AS T1  JOIN exhibition AS T2  ON T1.Artist_ID = T2.Artist_ID  GROUP BY T1.Artist_ID  ORDER BY COUNT(T2.Exhibition_ID) DESC  LIMIT 1;
SELECT T1.Name, T1.Country  FROM artist AS T1  JOIN exhibition AS T2 ON T1.Artist_ID = T2.Artist_ID  GROUP BY T1.Artist_ID  ORDER BY COUNT(T2.Exhibition_ID) DESC  LIMIT 1;
SELECT Name  FROM artist  WHERE Artist_ID NOT IN (SELECT DISTINCT Artist_ID FROM exhibition);
SELECT Name  FROM artist  WHERE Artist_ID NOT IN (SELECT Artist_ID FROM exhibition);
SELECT exhibition.Theme, artist.Name  FROM exhibition  JOIN artist ON exhibition.Artist_ID = artist.Artist_ID  WHERE exhibition.Ticket_Price > (SELECT AVG(Ticket_Price) FROM exhibition);
SELECT T1.Name, T2.Theme  FROM artist AS T1  JOIN exhibition AS T2 ON T1.Artist_ID = T2.Artist_ID  WHERE T2.Ticket_Price > (SELECT AVG(Ticket_Price) FROM exhibition);
SELECT AVG(Ticket_Price) AS Average_Price, MIN(Ticket_Price) AS Min_Price, MAX(Ticket_Price) AS Max_Price  FROM exhibition  WHERE Year < 2009;
SELECT AVG(Ticket_Price) AS Average_Price, MIN(Ticket_Price) AS Minimum_Price, MAX(Ticket_Price) AS Maximum_Price  FROM exhibition  WHERE Year < 2009;
SELECT Theme, Year  FROM exhibition  ORDER BY Ticket_Price DESC;
SELECT Theme, Year  FROM exhibition  ORDER BY Ticket_Price DESC;
SELECT exhibition.Theme, exhibition_record.Date, exhibition_record.Attendance  FROM exhibition  JOIN exhibition_record ON exhibition.Exhibition_ID = exhibition_record.Exhibition_ID  WHERE exhibition.Year = 2004;
SELECT exhibition.Theme, exhibition_record.Date, exhibition_record.Attendance  FROM exhibition  JOIN exhibition_record ON exhibition.Exhibition_ID = exhibition_record.Exhibition_ID  WHERE YEAR(exhibition_record.Date) = 2004;
SELECT Name  FROM artist  WHERE Artist_ID NOT IN (     SELECT Artist_ID      FROM exhibition      WHERE Year = 2004 );
SELECT Name  FROM artist  WHERE Artist_ID NOT IN (     SELECT Artist_ID      FROM exhibition      WHERE Year = 2004 );
SELECT T1.Theme  FROM exhibition AS T1  JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID  WHERE T2.Attendance < 100  INTERSECT  SELECT T1.Theme  FROM exhibition AS T1  JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID  WHERE T2.Attendance > 500
SELECT T1.Theme  FROM exhibition AS T1  JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID  WHERE T2.Attendance < 100  INTERSECT  SELECT T1.Theme  FROM exhibition AS T1  JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID  WHERE T2.Attendance > 500
SELECT COUNT(*)  FROM exhibition e  JOIN exhibition_record er ON e.Exhibition_ID = er.Exhibition_ID  WHERE er.Attendance > 100 OR e.Ticket_Price < 10;
SELECT COUNT(*)  FROM exhibition e  JOIN exhibition_record er ON e.Exhibition_ID = er.Exhibition_ID  WHERE er.Attendance > 100 OR e.Ticket_Price < 10;
SELECT T1.Name  FROM artist AS T1  JOIN exhibition AS T2 ON T1.Artist_ID = T2.Artist_ID  JOIN exhibition_record AS T3 ON T2.Exhibition_ID = T3.Exhibition_ID  GROUP BY T1.Artist_ID  HAVING AVG(T3.Attendance) > 200;
SELECT T1.Name  FROM artist AS T1  JOIN exhibition AS T2 ON T1.Artist_ID = T2.Artist_ID  JOIN exhibition_record AS T3 ON T2.Exhibition_ID = T3.Exhibition_ID  GROUP BY T1.Artist_ID  HAVING AVG(T3.Attendance) > 200;
SELECT i_id FROM item WHERE title = 'orange';
SELECT * FROM item;
SELECT COUNT(*) FROM review;
SELECT COUNT(*) FROM useracct;
SELECT AVG(rating), MAX(rating) FROM review;
SELECT MAX(rank) FROM review;
SELECT COUNT(DISTINCT u_id) FROM review;
SELECT COUNT(DISTINCT i_id) FROM review;
SELECT COUNT(*)  FROM item  WHERE i_id NOT IN (SELECT i_id FROM review)
SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)
SELECT title  FROM item  WHERE i_id IN (SELECT i_id                 FROM review                 WHERE rating = 10)
SELECT i.title  FROM item i  JOIN review r ON i.i_id = r.i_id  WHERE r.rating > (SELECT AVG(rating) FROM review) GROUP BY i.title;
SELECT DISTINCT i.title  FROM item i JOIN review r ON i.i_id = r.i_id WHERE r.rating < 5;
SELECT title  FROM item  WHERE i_id IN (     SELECT i_id      FROM review      WHERE rating > 8     )  AND i_id IN (     SELECT i_id      FROM review      WHERE rating < 5 )
SELECT i.title  FROM item i JOIN review r ON i.i_id = r.i_id GROUP BY i.i_id, i.title HAVING AVG(r.rating) > 5 AND MAX(r.rank) > 3
SELECT i.title  FROM item i  JOIN review r ON i.i_id = r.i_id  GROUP BY i.title  ORDER BY AVG(r.rating) ASC  LIMIT 1;
SELECT title  FROM item  ORDER BY title ASC;
SELECT U.name  FROM useracct U  JOIN review R ON U.u_id = R.u_id  GROUP BY R.u_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT i.title, i.i_id  FROM item i  JOIN review r ON i.i_id = r.i_id  GROUP BY i.i_id, i.title  ORDER BY AVG(r.rating) DESC  LIMIT 1;
SELECT i.title, i.i_id  FROM item i JOIN review r ON i.i_id = r.i_id GROUP BY i.i_id, i.title ORDER BY AVG(r.rank) DESC LIMIT 1;
SELECT U.name, AVG(R.rating)  FROM useracct AS U  JOIN review AS R ON U.u_id = R.u_id  GROUP BY R.u_id;
SELECT U.name, COUNT(R.a_id) AS num_reviews FROM useracct U JOIN review R ON U.u_id = R.u_id GROUP BY U.u_id, U.name;
SELECT U.name  FROM useracct U  JOIN review R ON U.u_id = R.u_id  WHERE R.rating = (SELECT MAX(rating) FROM review);
SELECT T1.name  FROM useracct AS T1  JOIN (   SELECT source_u_id, AVG(trust) as avg_trust    FROM trust    GROUP BY source_u_id ) AS T2  ON T1.u_id = T2.source_u_id  ORDER BY avg_trust DESC  LIMIT 1;
SELECT T2.name, AVG(T1.trust) AS avg_trust  FROM trust AS T1  JOIN useracct AS T2 ON T1.target_u_id = T2.u_id  GROUP BY T1.target_u_id;
SELECT U.name  FROM useracct U  JOIN trust T ON U.u_id = T.target_u_id  WHERE T.trust = (SELECT MIN(trust) FROM trust) LIMIT 1;
SELECT title  FROM item  WHERE i_id NOT IN (SELECT i_id FROM review)
SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)
SELECT COUNT(*)  FROM useracct  WHERE u_id NOT IN (SELECT u_id FROM review)
SELECT COUNT(*)  FROM item  WHERE i_id NOT IN (SELECT i_id FROM review)
SELECT COUNT(*) FROM player;
SELECT Player_name  FROM player  ORDER BY Votes ASC;
SELECT Gender, Occupation FROM player;
SELECT Player_name, Residence  FROM player  WHERE Occupation != 'Researcher';
SELECT Sponsor_name  FROM player  WHERE Residence IN ('Brandon', 'Birtle');
SELECT Player_name FROM player WHERE Votes = (SELECT MAX(Votes) FROM player);
SELECT Occupation, COUNT(Player_ID)  FROM player  GROUP BY Occupation;
SELECT Occupation, COUNT(*) AS count FROM player GROUP BY Occupation ORDER BY count DESC LIMIT 1;
SELECT Residence  FROM player  GROUP BY Residence  HAVING COUNT(Player_ID) >= 2;
SELECT p.Player_name, c.Coach_name  FROM player p JOIN player_coach pc ON p.Player_ID = pc.Player_ID JOIN coach c ON pc.Coach_ID = c.Coach_ID;
SELECT p.Player_name  FROM player p  JOIN player_coach pc ON p.Player_ID = pc.Player_ID  JOIN coach c ON pc.Coach_ID = c.Coach_ID  WHERE c.Rank = 1;
SELECT p.Player_name, p.Gender  FROM player p  JOIN player_coach pc ON p.Player_ID = pc.Player_ID  WHERE pc.Starting_year > 2011;
SELECT p.Player_name, c.Coach_name FROM player p JOIN player_coach pc ON p.Player_ID = pc.Player_ID JOIN coach c ON pc.Coach_ID = c.Coach_ID ORDER BY p.Votes DESC;
SELECT Player_name  FROM player  WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)
SELECT      Residence  FROM      player  WHERE      Gender = 'M'  INTERSECT  SELECT      Residence  FROM      player  WHERE      Gender = 'F'
SELECT c.Club_ID, c.Club_name, COUNT(co.Coach_ID) AS NumberOfCoaches FROM club c JOIN coach co ON c.Club_ID = co.Club_ID GROUP BY c.Club_ID, c.Club_name;
SELECT T1.Gold  FROM ( SELECT T2.Club_ID, COUNT(T2.Coach_ID) AS Coach_Count  FROM coach AS T2  GROUP BY T2.Club_ID  ORDER BY Coach_Count DESC  LIMIT 1 ) AS T1  JOIN match_result AS T3  ON T1.Club_ID = T3.Club_ID;
SELECT COUNT(*) FROM gymnast
SELECT COUNT(*) FROM gymnast;
SELECT Gymnast_ID, Total_Points  FROM gymnast  ORDER BY Total_Points DESC;
SELECT Gymnast_ID, Total_Points  FROM gymnast  ORDER BY Total_Points DESC;
SELECT g.Total_Points  FROM gymnast g ORDER BY g.Floor_Exercise_Points DESC;
SELECT Gymnast_ID, Total_Points  FROM gymnast  ORDER BY Floor_Exercise_Points DESC;
SELECT AVG(Horizontal_Bar_Points) FROM gymnast;
SELECT AVG(Horizontal_Bar_Points) FROM gymnast;
SELECT Name  FROM people  ORDER BY Name ASC;
SELECT Name  FROM people  ORDER BY Name ASC;
SELECT Name FROM people WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast)
SELECT Name  FROM people  WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast);
SELECT p.Name FROM people p JOIN gymnast g ON p.People_ID = g.Gymnast_ID WHERE p.Hometown <> 'Santo Domingo';
SELECT p.Name FROM people p JOIN gymnast g ON p.People_ID = g.Gymnast_ID WHERE p.Hometown <> 'Santo Domingo';
SELECT Age  FROM people  WHERE Height = (SELECT MAX(Height) FROM people);
SELECT Age  FROM people  WHERE Height = (SELECT MAX(Height) FROM people);
SELECT Name  FROM people  ORDER BY Age DESC  LIMIT 5;
SELECT Name  FROM people  ORDER BY Age DESC  LIMIT 5;
SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Age = (SELECT MIN(Age) FROM people)
SELECT T1.Total_Points  FROM gymnast AS T1  JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID  WHERE T2.Age = (SELECT MIN(Age) FROM people)
SELECT AVG(Age)  FROM people  WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast);
SELECT AVG(Age)  FROM people  WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast);
SELECT DISTINCT T2.Hometown  FROM gymnast AS T1  JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID  WHERE T1.Total_Points > 57.5;
SELECT DISTINCT T2.Hometown  FROM gymnast AS T1  JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID  WHERE T1.Total_Points > 57.5;
SELECT p.Hometown, COUNT(g.Gymnast_ID)  FROM people p  JOIN gymnast g ON p.People_ID = g.Gymnast_ID  GROUP BY p.Hometown;
SELECT p.Hometown, COUNT(g.Gymnast_ID)  FROM people p  JOIN gymnast g ON p.People_ID = g.Gymnast_ID  GROUP BY p.Hometown;
SELECT T2.Hometown, COUNT(T1.Gymnast_ID) AS Count  FROM gymnast AS T1  JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID  GROUP BY T2.Hometown  ORDER BY Count DESC  LIMIT 1;
SELECT T2.Hometown  FROM gymnast AS T1  JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID  GROUP BY T2.Hometown  ORDER BY COUNT(T2.Hometown) DESC  LIMIT 1;
SELECT Hometown  FROM people  WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast)  GROUP BY Hometown  HAVING COUNT(*) >= 2;
SELECT Hometown  FROM people  WHERE People_ID IN (SELECT Gymnast_ID FROM gymnast)  GROUP BY Hometown  HAVING COUNT(*) >= 2;
SELECT p.Name  FROM people p JOIN gymnast g ON p.People_ID = g.Gymnast_ID  ORDER BY p.Height ASC;
SELECT people.Name FROM people INNER JOIN gymnast ON people.People_ID = gymnast.Gymnast_ID ORDER BY people.Height ASC;
SELECT DISTINCT Hometown  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM gymnast)
SELECT Hometown  FROM people  WHERE People_ID NOT IN (SELECT Gymnast_ID FROM gymnast)
SELECT Hometown  FROM people  WHERE Age > 20 AND Age < 23
SELECT Hometown  FROM people  WHERE Age > 23  INTERSECT  SELECT Hometown  FROM people  WHERE Age < 20
SELECT COUNT(DISTINCT Hometown) FROM people;
SELECT COUNT(DISTINCT Hometown) FROM people;
SELECT T2.Age  FROM gymnast AS T1  JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID  ORDER BY T1.Total_Points DESC;
SELECT T2.Age  FROM gymnast AS T1  JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID  ORDER BY T1.Total_Points DESC;
SELECT SUM(S.balance)  FROM SAVINGS S  JOIN ACCOUNTS A ON S.custid = A.custid  WHERE A.name <> 'Brown';
SELECT SUM(S.balance)  FROM SAVINGS S  WHERE S.custid NOT IN (SELECT A.custid FROM ACCOUNTS A WHERE A.name = 'Brown');
SELECT COUNT(*) FROM ACCOUNTS;
SELECT COUNT(*) FROM ACCOUNTS;
SELECT SUM(balance) FROM CHECKING;
SELECT SUM(balance)  FROM CHECKING;
SELECT AVG(balance) FROM CHECKING;
SELECT AVG(balance)  FROM CHECKING;
SELECT COUNT(*)  FROM (     SELECT a.custid     FROM ACCOUNTS a     JOIN SAVINGS s ON a.custid = s.custid     WHERE s.balance > (SELECT AVG(balance) FROM SAVINGS) ) as t;
SELECT COUNT(*)  FROM (   SELECT s.custid   FROM SAVINGS s   JOIN ACCOUNTS a ON s.custid = a.custid   WHERE s.balance > (SELECT AVG(balance) FROM SAVINGS) ) as result;
SELECT a.custid, a.name  FROM ACCOUNTS a  JOIN CHECKING c ON a.custid = c.custid  WHERE c.balance < (SELECT MAX(balance) FROM CHECKING);
SELECT a.custid, a.name  FROM accounts a  JOIN checking c ON a.custid = c.custid  WHERE c.balance < (SELECT MAX(balance) FROM checking);
SELECT C.balance FROM ACCOUNTS A JOIN CHECKING C ON A.custid = C.custid WHERE A.name LIKE '%ee%';
SELECT C.balance FROM ACCOUNTS A JOIN CHECKING C ON A.custid = C.custid WHERE A.name LIKE '%ee%';
SELECT c.balance AS checking_balance, s.balance AS savings_balance  FROM ACCOUNTS a  JOIN CHECKING c ON a.custid = c.custid  JOIN SAVINGS s ON a.custid = s.custid  WHERE a.name = 'Brown';
SELECT CHECKING.balance AS checking_balance, SAVINGS.balance AS savings_balance  FROM ACCOUNTS  JOIN CHECKING ON ACCOUNTS.custid = CHECKING.custid  JOIN SAVINGS ON ACCOUNTS.custid = SAVINGS.custid  WHERE ACCOUNTS.name = 'Brown';
SELECT a.name FROM ACCOUNTS a JOIN CHECKING c ON a.custid = c.custid JOIN SAVINGS s ON a.custid = s.custid WHERE c.balance > (SELECT AVG(balance) FROM CHECKING) AND s.balance < (SELECT AVG(balance) FROM SAVINGS);
SELECT A.name FROM ACCOUNTS A JOIN CHECKING C ON A.custid = C.custid JOIN SAVINGS S ON A.custid = S.custid WHERE C.balance > (SELECT AVG(balance) FROM CHECKING) AND S.balance < (SELECT AVG(balance) FROM SAVINGS);
SELECT C.balance FROM CHECKING AS C JOIN SAVINGS AS S ON C.custid = S.custid WHERE S.balance > (SELECT AVG(balance) FROM SAVINGS)
SELECT C.balance FROM CHECKING AS C JOIN ACCOUNTS AS A ON C.custid = A.custid JOIN SAVINGS AS S ON A.custid = S.custid WHERE S.balance > (SELECT AVG(balance) FROM SAVINGS)
SELECT name  FROM ACCOUNTS  ORDER BY name ASC;
SELECT name  FROM ACCOUNTS  ORDER BY name ASC;
SELECT a.name  FROM ACCOUNTS a JOIN SAVINGS s ON a.custid = s.custid JOIN CHECKING c ON a.custid = c.custid WHERE (s.balance + c.balance) = (     SELECT MIN(s2.balance + c2.balance)     FROM SAVINGS s2     JOIN CHECKING c2 ON s2.custid = c2.custid )
SELECT a.name  FROM ACCOUNTS a JOIN SAVINGS s ON a.custid = s.custid JOIN CHECKING c ON a.custid = c.custid WHERE (s.balance + c.balance) = (     SELECT MIN(s2.balance + c2.balance)     FROM SAVINGS s2     JOIN CHECKING c2 ON s2.custid = c2.custid )
SELECT a.name, s.balance + c.balance AS total_balance FROM ACCOUNTS a JOIN SAVINGS s ON a.custid = s.custid JOIN CHECKING c ON a.custid = c.custid WHERE s.balance > (SELECT AVG(balance) FROM SAVINGS)
SELECT A.name, SUM(C.balance + S.balance) AS total_balance FROM ACCOUNTS A JOIN CHECKING C ON A.custid = C.custid JOIN SAVINGS S ON A.custid = S.custid WHERE S.balance > (SELECT AVG(balance) FROM SAVINGS) GROUP BY A.custid, A.name;
SELECT A.name, C.balance FROM ACCOUNTS A JOIN SAVINGS S ON A.custid = S.custid JOIN CHECKING C ON A.custid = C.custid WHERE S.balance = (SELECT MIN(balance) FROM SAVINGS)
SELECT A.name, C.balance  FROM ACCOUNTS A  JOIN CHECKING C ON A.custid = C.custid  WHERE A.custid = (     SELECT S.custid      FROM SAVINGS S      WHERE S.balance = (         SELECT MIN(balance)          FROM SAVINGS     ) );
SELECT a.name, COUNT(c.custid)  FROM ACCOUNTS a  LEFT JOIN CHECKING c ON a.custid = c.custid  GROUP BY a.name;
SELECT a.name, COUNT(c.custid) AS checking_accounts FROM ACCOUNTS a LEFT JOIN CHECKING c ON a.custid = c.custid GROUP BY a.custid, a.name;
SELECT a.name, SUM(s.balance) as total_savings FROM ACCOUNTS a JOIN SAVINGS s ON a.custid = s.custid GROUP BY a.name;
SELECT a.name, SUM(s.balance) as total_savings FROM ACCOUNTS a JOIN SAVINGS s ON a.custid = s.custid GROUP BY a.name;
SELECT a.name  FROM ACCOUNTS a  JOIN CHECKING c ON a.custid = c.custid  WHERE c.balance < (SELECT AVG(balance) FROM CHECKING);
SELECT a.name FROM ACCOUNTS a JOIN CHECKING c ON a.custid = c.custid WHERE c.balance < (SELECT AVG(balance) FROM CHECKING)
SELECT s.balance FROM savings s JOIN (   SELECT custid   FROM checking   ORDER BY balance DESC   LIMIT 1 ) c ON s.custid = c.custid;
Error: 第 1812 个样本有 2 个SQL。
SELECT a.custid,         (s.balance + c.balance) AS total_balance FROM ACCOUNTS a LEFT JOIN SAVINGS s ON a.custid = s.custid LEFT JOIN CHECKING c ON a.custid = c.custid ORDER BY total_balance ASC;
SELECT      a.custid,     (s.balance + c.balance) AS total_balance FROM      ACCOUNTS a LEFT JOIN      SAVINGS s ON a.custid = s.custid LEFT JOIN      CHECKING c ON a.custid = c.custid ORDER BY      total_balance;
SELECT A.name, C.balance FROM ACCOUNTS A JOIN CHECKING C ON A.custid = C.custid JOIN SAVINGS S ON A.custid = S.custid WHERE S.balance = (SELECT MIN(balance) FROM SAVINGS)
SELECT A.name, C.balance FROM ACCOUNTS A JOIN SAVINGS S ON A.custid = S.custid JOIN CHECKING C ON A.custid = C.custid WHERE S.balance = (SELECT MIN(balance) FROM SAVINGS)
SELECT      a.name,      c.balance AS checking_balance,      s.balance AS savings_balance FROM      ACCOUNTS a LEFT JOIN      CHECKING c ON a.custid = c.custid LEFT JOIN      SAVINGS s ON a.custid = s.custid;
SELECT      a.name,      c.balance AS checking_balance,      s.balance AS savings_balance FROM      ACCOUNTS a LEFT JOIN      CHECKING c ON a.custid = c.custid LEFT JOIN      SAVINGS s ON a.custid = s.custid;
SELECT      a.name,     c.balance AS checking_balance,     s.balance AS savings_balance FROM      ACCOUNTS a LEFT JOIN      CHECKING c ON a.custid = c.custid LEFT JOIN      SAVINGS s ON a.custid = s.custid ORDER BY      (c.balance + s.balance) DESC;
SELECT      a.name,     c.balance AS checking_balance,     s.balance AS savings_balance FROM      ACCOUNTS a LEFT JOIN      CHECKING c ON a.custid = c.custid LEFT JOIN      SAVINGS s ON a.custid = s.custid ORDER BY      (c.balance + s.balance) DESC;
SELECT a.name  FROM ACCOUNTS a  JOIN CHECKING c ON a.custid = c.custid  JOIN SAVINGS s ON a.custid = s.custid  WHERE c.balance > s.balance;
SELECT A.name  FROM ACCOUNTS A  JOIN CHECKING C ON A.custid = C.custid  JOIN SAVINGS S ON A.custid = S.custid  WHERE C.balance > S.balance;
SELECT a.name, (c.balance + s.balance) as total_balance  FROM ACCOUNTS a  JOIN CHECKING c ON a.custid = c.custid  JOIN SAVINGS s ON a.custid = s.custid  WHERE s.balance < c.balance;
SELECT      a.name,     (c.balance + s.balance) AS total_balance FROM      ACCOUNTS a JOIN      SAVINGS s ON a.custid = s.custid JOIN      CHECKING c ON a.custid = c.custid WHERE      s.balance < c.balance;
SELECT a.name, s.balance FROM accounts a JOIN savings s ON a.custid = s.custid ORDER BY s.balance DESC LIMIT 3;
SELECT a.name, s.balance FROM accounts a JOIN savings s ON a.custid = s.custid ORDER BY s.balance DESC LIMIT 3;
SELECT COUNT(*)  FROM browser  WHERE market_share >= 5;
SELECT name  FROM browser  ORDER BY market_share DESC;
SELECT id, name, market_share FROM browser;
SELECT MAX(market_share) AS Maximum, MIN(market_share) AS Minimum, AVG(market_share) AS Average  FROM browser;
SELECT id, market_share FROM browser WHERE name = 'Safari';
Error: 第 1832 个样本有 4 个SQL。
SELECT b.name  FROM browser AS b  JOIN accelerator_compatible_browser AS acb ON b.id = acb.browser_id  JOIN Web_client_accelerator AS wca ON wca.id = acb.accelerator_id  WHERE wca.name = 'CProxy' AND acb.compatible_since_year > 1998;
SELECT wca.id, wca.name  FROM Web_client_accelerator wca JOIN accelerator_compatible_browser acb ON wca.id = acb.accelerator_id GROUP BY wca.id, wca.name HAVING COUNT(acb.browser_id) >= 2;
SELECT b.id, b.name  FROM browser b JOIN accelerator_compatible_browser abc ON b.id = abc.browser_id GROUP BY b.id, b.name ORDER BY COUNT(abc.accelerator_id) DESC LIMIT 1;
SELECT acb.compatible_since_year  FROM accelerator_compatible_browser acb  JOIN Web_client_accelerator wca ON acb.accelerator_id = wca.id  JOIN browser b ON acb.browser_id = b.id  WHERE wca.name = 'CACHEbox' AND b.name = 'Internet Explorer';
SELECT COUNT(DISTINCT Client) FROM Web_client_accelerator;
SELECT COUNT(*)  FROM Web_client_accelerator wca LEFT JOIN accelerator_compatible_browser acb ON wca.id = acb.accelerator_id WHERE acb.accelerator_id IS NULL;
SELECT DISTINCT wca.name  FROM Web_client_accelerator wca JOIN accelerator_compatible_browser acb ON wca.id = acb.accelerator_id JOIN browser b ON b.id = acb.browser_id WHERE b.market_share > 15;
SELECT b.name  FROM browser b JOIN accelerator_compatible_browser acb1 ON b.id = acb1.browser_id  JOIN Web_client_accelerator wca1 ON wca1.id = acb1.accelerator_id AND wca1.name = 'CACHEbox' JOIN accelerator_compatible_browser acb2 ON b.id = acb2.browser_id  JOIN Web_client_accelerator wca2 ON wca2.id = acb2.accelerator_id AND wca2.name = 'Fasterfox' GROUP BY b.name HAVING COUNT(DISTINCT wca1.name) > 0 AND COUNT(DISTINCT wca2.name) > 0;
SELECT wca.name, wca.Operating_system  FROM Web_client_accelerator wca  WHERE wca.id NOT IN (     SELECT acb.accelerator_id      FROM accelerator_compatible_browser acb      JOIN browser b ON acb.browser_id = b.id      WHERE b.name = 'Opera' )
SELECT name FROM Web_client_accelerator WHERE name LIKE '%Opera%';
SELECT Operating_system, COUNT(*) as num_accelerators FROM Web_client_accelerator GROUP BY Operating_system;
SELECT b.name AS browser_name, w.name AS accelerator_name, ac.compatible_since_year  FROM accelerator_compatible_browser ac  JOIN browser b ON ac.browser_id = b.id  JOIN Web_client_accelerator w ON ac.accelerator_id = w.id  ORDER BY ac.compatible_since_year DESC;
SELECT COUNT(*) FROM wrestler;
SELECT COUNT(*) FROM wrestler;
SELECT Name  FROM wrestler  ORDER BY Days_held DESC;
SELECT Name  FROM wrestler  ORDER BY Days_held DESC;
SELECT Name  FROM wrestler  ORDER BY Days_held  LIMIT 1;
SELECT Name  FROM wrestler  ORDER BY Days_held  LIMIT 1;
SELECT DISTINCT Reign FROM wrestler WHERE Location != 'Tokyo,Japan';
SELECT DISTINCT Reign FROM wrestler WHERE Location != 'Tokyo, Japan'
SELECT Name, Location FROM wrestler;
SELECT Name, Location FROM wrestler;
SELECT E.Elimination_Move  FROM Elimination E  JOIN wrestler W ON E.Wrestler_ID = W.Wrestler_ID  WHERE W.Team = 'Team Orton';
SELECT E.Elimination_Move  FROM Elimination E  JOIN wrestler W ON E.Wrestler_ID = W.Wrestler_ID  WHERE W.Name IN (SELECT W.Name FROM wrestler W WHERE W.Team = 'Team Orton');
SELECT w.Name, e.Elimination_Move  FROM wrestler w  JOIN Elimination e ON w.Wrestler_ID = e.Wrestler_ID;
SELECT w.Name, e.Elimination_Move  FROM wrestler w  JOIN Elimination e ON w.Wrestler_ID = e.Wrestler_ID;
SELECT w.Name, e.Team  FROM wrestler w  JOIN Elimination e ON w.Wrestler_ID = e.Wrestler_ID  ORDER BY w.Days_held DESC;
SELECT w.Name, e.Team  FROM wrestler w  JOIN Elimination e ON w.Wrestler_ID = e.Wrestler_ID  ORDER BY w.Days_held DESC;
SELECT E.Time  FROM Elimination E  JOIN wrestler W ON E.Wrestler_ID = W.Wrestler_ID  WHERE W.Days_held = (SELECT MAX(Days_held) FROM wrestler);
SELECT E.Time  FROM Elimination E  JOIN wrestler W ON E.Wrestler_ID = W.Wrestler_ID  WHERE W.Days_held = (SELECT MAX(Days_held) FROM wrestler);
SELECT E.Time  FROM Elimination E  JOIN wrestler W ON E.Wrestler_ID = W.Wrestler_ID  WHERE W.Days_held > 50;
SELECT E.Time  FROM Elimination E  JOIN wrestler W ON E.Wrestler_ID = W.Wrestler_ID  WHERE W.Days_held > 50;
SELECT Team, COUNT(*) AS NumberOfEliminations FROM Elimination GROUP BY Team;
SELECT Team, COUNT(*) AS Eliminations  FROM Elimination  GROUP BY Team;
SELECT Team FROM Elimination GROUP BY Team HAVING COUNT(Elimination_ID) > 3;
SELECT Team FROM Elimination GROUP BY Team HAVING COUNT(Elimination_ID) > 3;
SELECT Reign, Days_held FROM wrestler;
SELECT Reign, Days_held FROM wrestler;
SELECT Name  FROM wrestler  WHERE Days_held < 100;
SELECT Name  FROM wrestler  WHERE Days_held < 100;
SELECT Reign, COUNT(*) AS Frequency  FROM wrestler  GROUP BY Reign  ORDER BY Frequency DESC  LIMIT 1;
SELECT Reign, COUNT(*) AS Count  FROM wrestler  GROUP BY Reign  ORDER BY Count DESC  LIMIT 1;
SELECT Location  FROM wrestler  GROUP BY Location  HAVING COUNT(Wrestler_ID) > 2;
SELECT Location  FROM wrestler  GROUP BY Location  HAVING COUNT(Wrestler_ID) > 2;
SELECT w.Name  FROM wrestler w  LEFT JOIN Elimination e ON w.Wrestler_ID = e.Wrestler_ID  WHERE e.Wrestler_ID IS NULL;
SELECT Name  FROM wrestler  WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM Elimination);
SELECT Team  FROM Elimination  WHERE Eliminated_By = 'Orton'  INTERSECT  SELECT Team  FROM Elimination  WHERE Eliminated_By = 'Benjamin'
SELECT T1.Team  FROM Elimination AS T1  JOIN Elimination AS T2  ON T1.Team = T2.Team  WHERE T1.Eliminated_By = 'Orton' AND T2.Eliminated_By = 'Benjamin' GROUP BY T1.Team HAVING COUNT(*) >= 2
SELECT COUNT(DISTINCT Team) FROM Elimination
SELECT COUNT(DISTINCT Team) FROM Elimination;
SELECT E.Time  FROM Elimination E  JOIN wrestler W ON E.Wrestler_ID = W.Wrestler_ID  WHERE W.Name = 'Punk' OR W.Name = 'Orton';
SELECT Time  FROM Elimination  WHERE Eliminated_By IN ('Punk', 'Orton');
SELECT COUNT(*) FROM School;
SELECT COUNT(*) FROM School;
SELECT School_name FROM School ORDER BY School_name ASC;
SELECT School_name, Location, Mascot  FROM School;
SELECT SUM(Enrollment) AS Total_Enrollment, AVG(Enrollment) AS Average_Enrollment FROM School;
SELECT Mascot  FROM School  WHERE Enrollment > (SELECT AVG(Enrollment) FROM School)
SELECT School_name  FROM School  ORDER BY Enrollment  LIMIT 1;
SELECT AVG(Enrollment) AS Average_Enrollment, MAX(Enrollment) AS Maximum_Enrollment, MIN(Enrollment) AS Minimum_Enrollment  FROM School;
SELECT County, COUNT(School_id) AS NumberOfSchools, SUM(Enrollment) AS TotalEnrollment FROM School GROUP BY County;
SELECT COUNT(*)  FROM endowment  JOIN School ON endowment.School_id = School.School_id  WHERE School.School_name = 'Glenn';
SELECT donator_name, amount  FROM endowment  ORDER BY amount DESC;
SELECT School_name  FROM School  WHERE School_id NOT IN (SELECT School_id FROM endowment)
SELECT S.School_name FROM School S JOIN endowment E ON S.School_id = E.School_id WHERE E.amount <= 10;
SELECT T3.donator_name  FROM endowment AS T1  JOIN School AS T2 ON T1.School_id = T2.School_id  JOIN (SELECT donator_name FROM endowment WHERE School_id IN (SELECT School_id FROM School WHERE School_name = 'Glenn')) AS T3 ON T3.donator_name = T1.donator_name  WHERE T2.School_name = 'Triton' GROUP BY T3.donator_name  HAVING COUNT(*) > 1;
SELECT donator_name  FROM endowment  WHERE amount >= 9;
SELECT amount, donator_name  FROM endowment  ORDER BY amount DESC  LIMIT 1;
SELECT COUNT(*)  FROM budget  WHERE Budgeted > 3000 AND Year <= 2001;
SELECT COUNT(*)  FROM budget  WHERE Year <= 2001 AND Budgeted > 3000;
SELECT School.School_name, budget.Budgeted, budget.Invested FROM School JOIN budget ON School.School_id = budget.School_id WHERE budget.Year >= 2002;
SELECT donator_name  FROM endowment;
SELECT COUNT(*)  FROM budget  WHERE Budgeted < Invested;
SELECT SUM(budget.Budgeted)  FROM school_finance.budget  JOIN school_finance.School ON budget.School_id = School.School_id  WHERE School.School_name = 'Glenn';
SELECT s.School_name  FROM School s JOIN budget b ON s.School_id = b.School_id JOIN endowment e ON s.School_id = e.School_id WHERE (b.Budgeted > 100 OR SUM(e.amount) > 10) GROUP BY s.School_name;
SELECT s.School_name FROM School s JOIN endowment e ON s.School_id = e.School_id WHERE e.amount > 8.5 GROUP BY s.School_name HAVING COUNT(e.endowment_id) > 1;
SELECT COUNT(DISTINCT T1.School_id)  FROM School AS T1  JOIN (     SELECT School_id, COUNT(*) as donor_count     FROM endowment     WHERE amount < 8.5     GROUP BY School_id     HAVING COUNT(*) > 1 ) AS T2 ON T1.School_id = T2.School_id;
SELECT S.School_name, S.IHSAA_Football_Class, S.Mascot  FROM School S JOIN budget B ON S.School_id = B.School_id WHERE B.Budgeted > 6000 OR B.Year < 2003 ORDER BY B.total_budget_percent_invested, B.total_budget_percent_budgeted;
SELECT COUNT(*) FROM building;
SELECT Name, Street_address, Floors  FROM building  ORDER BY Floors;
SELECT Name FROM building WHERE Height_feet = (SELECT MAX(Height_feet) FROM building);
SELECT AVG(Floors) AS Average_Floors, MAX(Floors) AS Max_Floors, MIN(Floors) AS Min_Floors FROM building;
SELECT COUNT(*)  FROM building  WHERE Height_feet > (SELECT AVG(Height_feet) FROM building)  OR Floors > (SELECT AVG(Floors) FROM building);
SELECT Name  FROM building  WHERE Height_feet >= 200 AND Floors >= 20;
SELECT Institution, Location  FROM Institution  WHERE Founded > 1990 AND Type = 'Private';
SELECT Type, COUNT(Institution_id) AS Num_Institutions, SUM(Enrollment) AS Total_Enrollment FROM Institution GROUP BY Type;
SELECT Type  FROM Institution  GROUP BY Type  ORDER BY COUNT(Institution_id) DESC  LIMIT 1;
SELECT T1.Type  FROM Institution AS T1  JOIN building AS T2  ON T1.building_id = T2.building_id  WHERE T1.Founded > 1990 AND T1.Enrollment >= 1000;
SELECT Name  FROM building  WHERE building_id NOT IN (SELECT building_id FROM Institution)
SELECT Name FROM building WHERE building_id NOT IN (SELECT building_id FROM Institution WHERE Founded = 2003)
SELECT building.Name, COUNT(Institution.Institution_id)  FROM building  LEFT JOIN Institution ON building.building_id = Institution.building_id  GROUP BY building.building_id, building.Name;
SELECT b.Name, b.Height_feet  FROM building b JOIN Institution i ON b.building_id = i.building_id WHERE i.Founded > 1880 GROUP BY b.building_id HAVING COUNT(i.Institution_id) >= 2;
SELECT DISTINCT Type FROM Institution;
SELECT Institution.Institution, COUNT(protein.protein_name)  FROM Institution  JOIN protein ON Institution.Institution_id = protein.Institution_id  GROUP BY Institution.Institution;
SELECT COUNT(*)  FROM protein  WHERE Institution_id IN (     SELECT Institution_id      FROM Institution      WHERE Founded > 1880 OR Type = 'Private' );
SELECT protein.protein_name, Institution.Institution  FROM protein  JOIN Institution ON protein.Institution_id = Institution.Institution_id;
SELECT COUNT(*)  FROM protein  WHERE Institution_id IN (     SELECT Institution_id      FROM Institution      WHERE building_id IN (         SELECT building_id          FROM building          WHERE Floors >= 20     ) );
SELECT COUNT(*) FROM Institution WHERE Institution_id NOT IN (SELECT Institution_id FROM protein)
Error: 第 1931 个样本有 2 个SQL。
SELECT Location  FROM cinema  WHERE Openning_year = 2010  INTERSECT  SELECT Location  FROM cinema  WHERE Openning_year = 2011
SELECT COUNT(*) FROM cinema;
SELECT COUNT(*) FROM cinema;
SELECT Name, Openning_year, Capacity FROM cinema;
SELECT Name, Location  FROM cinema  WHERE Capacity > (SELECT AVG(Capacity) FROM cinema);
SELECT DISTINCT Location FROM cinema;
SELECT DISTINCT Location FROM cinema;
SELECT Name, Openning_year  FROM cinema  ORDER BY Openning_year DESC;
SELECT Name, Location  FROM cinema  ORDER BY Capacity DESC  LIMIT 1;
SELECT AVG(Capacity) AS Average_Capacity, MIN(Capacity) AS Min_Capacity, MAX(Capacity) AS Max_Capacity  FROM cinema  WHERE Openning_year >= 2011;
SELECT Location, COUNT(*) AS NumberOfCinemas FROM cinema GROUP BY Location;
SELECT Location, COUNT(Cinema_ID) AS Cinema_Count  FROM cinema  WHERE Openning_year >= 2010  GROUP BY Location  ORDER BY Cinema_Count DESC  LIMIT 1;
SELECT Location  FROM cinema  WHERE Capacity > 300  GROUP BY Location  HAVING COUNT(Cinema_ID) >= 2;
SELECT Location FROM cinema WHERE Capacity > 300 GROUP BY Location HAVING COUNT(Cinema_ID) >= 2;
SELECT Title, Directed_by FROM film;
SELECT Title, Directed_by FROM film;
SELECT DISTINCT Directed_by FROM film;
SELECT DISTINCT Directed_by FROM film;
SELECT Directed_by, COUNT(*)  FROM film  GROUP BY Directed_by;
SELECT T2.Name, SUM(T3.Show_times_per_day) AS Total_Show_Times  FROM schedule AS T1  JOIN cinema AS T2 ON T1.Cinema_ID = T2.Cinema_ID  JOIN film AS T3 ON T1.Film_ID = T3.Film_ID  GROUP BY T2.Name;
SELECT T1.Title, MAX(T3.Price)  FROM film AS T1  JOIN schedule AS T3 ON T1.Film_ID = T3.Film_ID  GROUP BY T1.Title;
SELECT film.Title, MAX(schedule.Price)  FROM film  JOIN schedule ON film.Film_ID = schedule.Film_ID  GROUP BY film.Title;
SELECT c.Name, f.Title, s.Date, s.Price  FROM schedule s  JOIN cinema c ON s.Cinema_ID = c.Cinema_ID  JOIN film f ON s.Film_ID = f.Film_ID;
SELECT film.Title, film.Directed_by  FROM film  LEFT JOIN schedule ON film.Film_ID = schedule.Film_ID  WHERE schedule.Film_ID IS NULL;
SELECT f.Directed_by, SUM(s.Show_times_per_day) as Total_Show_Times  FROM film f  JOIN schedule s ON f.Film_ID = s.Film_ID  GROUP BY f.Directed_by  ORDER BY Total_Show_Times DESC  LIMIT 1;
SELECT Location FROM cinema WHERE Capacity > 300 GROUP BY Location HAVING COUNT(Cinema_ID) > 1;
SELECT Location FROM cinema WHERE Capacity > 300 GROUP BY Location HAVING COUNT(*) > 1;
SELECT COUNT(*) FROM film WHERE Title LIKE '%Dummy%';
SELECT COUNT(*) FROM film WHERE Title LIKE '%Dummy%';
SELECT good_or_bad_customer  FROM Customers  WHERE coupon_id IN (     SELECT coupon_id      FROM Discount_Coupons      WHERE coupon_amount = 500 );
SELECT      c.customer_id,      c.first_name,      COUNT(b.booking_id) as number_of_bookings FROM      Customers c LEFT JOIN      Bookings b ON c.customer_id = b.customer_id GROUP BY      c.customer_id,      c.first_name;
SELECT Customers.customer_id, MAX(SUM(Payments.amount_paid)) AS max_total_amount_paid FROM Customers JOIN Payments ON Customers.customer_id = Payments.customer_id GROUP BY Customers.customer_id ORDER BY max_total_amount_paid DESC LIMIT 1;
SELECT b.booking_id, b.amount_of_refund  FROM Bookings b JOIN Payments p ON b.booking_id = p.booking_id GROUP BY b.booking_id ORDER BY COUNT(p.payment_id) DESC LIMIT 1;
SELECT product_id  FROM Products_Booked  GROUP BY product_id  HAVING COUNT(*) = 3;
SELECT T2.product_description  FROM Products_Booked AS T1  JOIN Products_for_Hire AS T2  ON T1.product_id = T2.product_id  WHERE T1.booked_amount = 102.76;
SELECT B.booking_start_date, B.booking_end_date  FROM Bookings B JOIN Products_Booked PB ON B.booking_id = PB.booking_id JOIN Products_for_Hire PH ON PB.product_id = PH.product_id WHERE PH.product_name = 'Book collection A'
SELECT p.product_name  FROM Products_for_Hire p  JOIN View_Product_Availability vpa  ON p.product_id = vpa.product_id  WHERE vpa.available_yn = 1;
SELECT COUNT(DISTINCT product_type_code)  FROM Products_for_Hire;
SELECT first_name, last_name, gender_mf  FROM Customers  WHERE good_or_bad_customer = 'good'  ORDER BY last_name;
SELECT AVG(amount_due) FROM Payments;
SELECT MAX(booked_count) as Maximum, MIN(booked_count) as Minimum, AVG(booked_count) as Average  FROM Products_Booked;
SELECT DISTINCT payment_type_code  FROM Payments;
SELECT daily_hire_cost  FROM Products_for_Hire  WHERE product_name LIKE '%Book%';
SELECT COUNT(*)  FROM Products_for_Hire p WHERE NOT EXISTS (     SELECT *     FROM Products_Booked pb      WHERE pb.product_id = p.product_id AND pb.booked_amount > 200 );
Error: 第 1976 个样本有 2 个SQL。
SELECT payment_date  FROM Payments  WHERE amount_paid > 300 OR payment_type_code = 'Check'
SELECT product_name, product_description  FROM Products_for_Hire  WHERE product_type_code = 'Cutlery' AND daily_hire_cost < 20;
SELECT COUNT(*) FROM phone
SELECT Name  FROM phone  ORDER BY Price ASC;
SELECT Memory_in_G, Carrier FROM phone;
SELECT DISTINCT Carrier  FROM phone  WHERE Memory_in_G > 32;
SELECT Name  FROM phone  WHERE Carrier IN ('Sprint', 'TMobile');
SELECT Carrier FROM phone WHERE Price = (SELECT MAX(Price) FROM phone)
SELECT Carrier, COUNT(*) AS Num_of_Phones  FROM phone  GROUP BY Carrier;
SELECT Carrier, COUNT(*) as frequency  FROM phone  GROUP BY Carrier  ORDER BY frequency DESC  LIMIT 1;
SELECT Carrier  FROM phone  WHERE Memory_in_G < 32  INTERSECT  SELECT Carrier  FROM phone  WHERE Memory_in_G > 64;
SELECT p.Name, m.District  FROM phone_market AS pm  JOIN phone AS p ON pm.Phone_ID = p.Phone_ID  JOIN market AS m ON pm.Market_ID = m.Market_ID;
SELECT p.Name, m.District  FROM phone AS p  JOIN phone_market AS pm ON p.Phone_ID = pm.Phone_ID  JOIN market AS m ON pm.Market_ID = m.Market_ID  ORDER BY m.Ranking ASC;
SELECT p.Name  FROM phone p  JOIN phone_market pm ON p.Phone_ID = pm.Phone_ID  JOIN market m ON pm.Market_ID = m.Market_ID  WHERE m.Num_of_shops > 50;
SELECT p.Name, SUM(pm.Num_of_stock)  FROM phone AS p  JOIN phone_market AS pm ON p.Phone_ID = pm.Phone_ID  GROUP BY p.Name;
SELECT p.Name FROM phone p JOIN phone_market pm ON p.Phone_ID = pm.Phone_ID GROUP BY p.Name HAVING SUM(pm.Num_of_stock) > 2000 ORDER BY SUM(pm.Num_of_stock) DESC;
SELECT Name  FROM phone  WHERE Phone_ID NOT IN (SELECT Phone_ID FROM phone_market)
SELECT COUNT(*) FROM company;
SELECT COUNT(*) FROM company;
SELECT Company, Rank  FROM company  ORDER BY Sales_billion DESC;
SELECT Company, Rank  FROM company  ORDER BY Sales_billion DESC;
SELECT Company, Main_Industry  FROM company  WHERE Headquarters != 'USA';
SELECT Company, Main_Industry FROM company WHERE Headquarters != 'United States';
SELECT Company, Headquarters  FROM company  ORDER BY Market_Value DESC;
SELECT Company, Headquarters  FROM company  ORDER BY Market_Value DESC;
SELECT MIN(Market_Value) as Min_Market_Value, MAX(Market_Value) as Max_Market_Value, AVG(Market_Value) as Avg_Market_Value FROM company;
SELECT MIN(Market_Value) AS MinMarketValue, MAX(Market_Value) AS MaxMarketValue, AVG(Market_Value) AS AvgMarketValue  FROM company;
SELECT Main_Industry FROM company;
SELECT DISTINCT Main_Industry FROM company;
SELECT Headquarters, COUNT(Company_ID)  FROM company  GROUP BY Headquarters;
SELECT Headquarters, COUNT(*) AS Num_of_Companies FROM company GROUP BY Headquarters;
SELECT Main_Industry, SUM(Market_Value)  FROM company  GROUP BY Main_Industry;
SELECT Main_Industry, SUM(Market_Value)  FROM company  GROUP BY Main_Industry;
SELECT Main_Industry, COUNT(*) AS Number_of_Companies FROM company GROUP BY Main_Industry ORDER BY SUM(Market_Value) DESC LIMIT 1;
SELECT Main_Industry, COUNT(Company)  FROM company  WHERE Market_Value IN (SELECT MAX(Market_Value)                        FROM company                        GROUP BY Main_Industry)  GROUP BY Main_Industry;
SELECT Headquarters  FROM company  WHERE Main_Industry = 'Banking'  GROUP BY Headquarters  HAVING COUNT(*) >= 2;
SELECT Headquarters  FROM company  WHERE Main_Industry = 'Banking'  GROUP BY Headquarters  HAVING COUNT(*) >= 2;
SELECT Station_ID, Location, Manager_Name FROM gas_station ORDER BY Open_Year;
SELECT Station_ID, Location, Manager_Name  FROM gas_station  ORDER BY Open_Year ASC;
SELECT COUNT(*)  FROM gas_station  WHERE Open_Year BETWEEN 2000 AND 2005;
SELECT COUNT(*)  FROM gas_station  WHERE Open_Year BETWEEN 2000 AND 2005;
SELECT Location, COUNT(Station_ID)  FROM gas_station  GROUP BY Location  ORDER BY COUNT(Station_ID);
SELECT Location, COUNT(Station_ID) AS NumberOfStations FROM gas_station GROUP BY Location ORDER BY NumberOfStations;
SELECT DISTINCT Headquarters  FROM company  WHERE Main_Industry = 'Banking'  INTERSECT  SELECT DISTINCT Headquarters  FROM company  WHERE Main_Industry = 'Oil and gas';
SELECT DISTINCT c.Headquarters  FROM company c  WHERE c.Main_Industry IN ('Banking', 'Oil and Gas')  GROUP BY c.Headquarters  HAVING COUNT(DISTINCT c.Main_Industry) = 2;
SELECT DISTINCT Headquarters  FROM company  WHERE Main_Industry <> 'Banking';
SELECT DISTINCT Headquarters  FROM company  WHERE Main_Industry <> 'Banking';
SELECT Company, COUNT(Station_ID)  FROM company  JOIN station_company ON company.Company_ID = station_company.Company_ID  GROUP BY Company;
SELECT Company, COUNT(Station_ID) as NumberOfStations FROM company JOIN station_company ON company.Company_ID = station_company.Company_ID GROUP BY Company_ID, Company;
SELECT Company, Main_Industry  FROM company  WHERE Company_ID NOT IN (SELECT DISTINCT Company_ID FROM station_company)
SELECT Main_Industry, Company  FROM company  WHERE Company_ID NOT IN (SELECT DISTINCT Company_ID FROM station_company)
SELECT gs.Manager_Name  FROM gas_station gs  JOIN station_company sc ON gs.Station_ID = sc.Station_ID  JOIN company c ON sc.Company_ID = c.Company_ID  WHERE c.Company = 'ExxonMobil';
SELECT gs.Manager_Name  FROM gas_station gs  JOIN station_company sc ON gs.Station_ID = sc.Station_ID  JOIN company c ON sc.Company_ID = c.Company_ID  WHERE c.Company = 'ExxonMobil';
SELECT gs.Location  FROM gas_station gs  JOIN station_company sc ON gs.Station_ID = sc.Station_ID  JOIN company c ON sc.Company_ID = c.Company_ID  WHERE c.Market_Value > 100;
SELECT DISTINCT gs.Location  FROM gas_station gs  JOIN station_company sc ON gs.Station_ID = sc.Station_ID  JOIN company c ON sc.Company_ID = c.Company_ID  WHERE c.Market_Value > 100;
SELECT Manager_Name, COUNT(Manager_Name) as Station_Count  FROM gas_station  WHERE Open_Year > 2000  GROUP BY Manager_Name  ORDER BY Station_Count DESC  LIMIT 1;
SELECT Manager_Name  FROM gas_station  WHERE Open_Year > 2000  GROUP BY Manager_Name  ORDER BY COUNT(Station_ID) DESC  LIMIT 1;
SELECT Location  FROM gas_station  ORDER BY Open_Year;
SELECT Location  FROM gas_station  ORDER BY Open_Year;
SELECT Rank, Company, Market_Value  FROM company  WHERE Main_Industry = 'banking'  ORDER BY Sales_billion, Profits_billion;
SELECT Rank, Company, Market_Value  FROM company  WHERE Main_Industry = 'Banking'  ORDER BY Sales_billion, Profits_billion;
SELECT gs.Location, gs.Representative_Name  FROM gas_station gs  JOIN station_company sc ON gs.Station_ID = sc.Station_ID  JOIN company c ON sc.Company_ID = c.Company_ID  WHERE c.Assets_billion IN (     SELECT Assets_billion      FROM company      ORDER BY Assets_billion DESC      LIMIT 3 );
Error: 第 2039 个样本有 2 个SQL。
SELECT COUNT(*) FROM region;
SELECT COUNT(*) FROM region;
SELECT DISTINCT Region_name  FROM region  ORDER BY Label;
SELECT DISTINCT Region_name  FROM region  ORDER BY Label;
SELECT COUNT(*) FROM party;
SELECT COUNT(DISTINCT Party_name) FROM party;
SELECT Minister, Took_office, Left_office  FROM party  ORDER BY Left_office;
SELECT Minister, Took_office, Left_office  FROM party  ORDER BY Left_office;
SELECT Minister FROM party WHERE Took_office > '1961-01-01' OR Took_office < '1959-01-01';
SELECT Minister FROM party WHERE Took_office > '1961-01-01' OR Took_office < '1959-01-01';
SELECT Minister FROM party WHERE Party_name != 'Progress Party';
SELECT Minister  FROM party  WHERE Party_name <> 'Progress Party'
Error: 第 2052 个样本有 3 个SQL。
Error: 第 2053 个样本有 2 个SQL。
SELECT Minister  FROM party  WHERE Left_office = (SELECT MAX(Left_office) FROM party);
SELECT Minister  FROM party  WHERE Left_office = (SELECT MAX(Left_office) FROM party);
SELECT member.Member_Name, party.Party_name  FROM member  JOIN party ON member.Party_ID = party.Party_ID;
SELECT member.Member_Name, party.Party_name  FROM member  JOIN party ON member.Party_ID = party.Party_ID;
SELECT p.Party_name, COUNT(m.Member_ID) AS NumberOfMembers FROM party p JOIN member m ON p.Party_ID = m.Party_ID GROUP BY p.Party_name;
SELECT p.Party_name, COUNT(m.Member_ID) as Number_of_Members FROM party p JOIN member m ON p.Party_ID = m.Party_ID GROUP BY p.Party_name;
SELECT p.Party_name FROM party p JOIN member m ON p.Party_ID = m.Party_ID GROUP BY p.Party_ID, p.Party_name ORDER BY COUNT(m.Member_ID) DESC LIMIT 1;
SELECT p.Party_name FROM party p JOIN member m ON p.Party_ID = m.Party_ID GROUP BY p.Party_ID, p.Party_name ORDER BY COUNT(m.Member_ID) DESC LIMIT 1;
SELECT p.Party_name, r.Region_name  FROM party AS p  JOIN region AS r ON p.Region_ID = r.Region_ID;
SELECT p.Party_name, r.Region_name  FROM party AS p  JOIN region AS r ON p.Region_ID = r.Region_ID;
SELECT Party_name FROM party WHERE Party_ID NOT IN (SELECT Party_ID FROM member)
SELECT Party_name  FROM party  WHERE Party_ID NOT IN (SELECT Party_ID FROM member)
SELECT T1.Member_Name  FROM member AS T1  JOIN party AS T2 ON T1.Party_ID = T2.Party_ID  WHERE T2.Party_ID = 3 INTERSECT  SELECT T1.Member_Name  FROM member AS T1  JOIN party AS T2 ON T1.Party_ID = T2.Party_ID  WHERE T2.Party_ID = 1;
SELECT T1.Member_Name  FROM member AS T1  JOIN party AS T2 ON T1.Party_ID = T2.Party_ID  WHERE T2.Party_ID = 3  INTERSECT  SELECT T1.Member_Name  FROM member AS T1  JOIN party AS T2 ON T1.Party_ID = T2.Party_ID  WHERE T2.Party_ID = 1;
SELECT Member_Name  FROM member  WHERE NOT EXISTS (     SELECT *      FROM party      WHERE member.Party_ID = party.Party_ID AND party.Party_name = 'Progress Party' );
SELECT Member_Name  FROM member  WHERE Party_ID NOT IN (SELECT Party_ID FROM party WHERE Party_name = 'Progress Party')
SELECT COUNT(*) FROM party_events;
SELECT COUNT(*) FROM party_events;
SELECT p.Party_name, COUNT(pe.Event_ID)  FROM party AS p  JOIN party_events AS pe ON p.Party_ID = pe.Party_ID  GROUP BY p.Party_name;
SELECT COUNT(party_events.Event_ID), party.Party_name  FROM party_events  JOIN party ON party_events.Party_ID = party.Party_ID  GROUP BY party.Party_name;
SELECT Member_Name  FROM member  WHERE Member_ID NOT IN (SELECT Member_in_charge_ID FROM party_events)
SELECT Member_Name  FROM member  WHERE Member_ID NOT IN (SELECT Member_in_charge_ID FROM party_events)
SELECT p.Party_name  FROM party p JOIN party_events pe ON p.Party_ID = pe.Party_ID GROUP BY p.Party_ID, p.Party_name HAVING COUNT(pe.Event_ID) >= 2;
SELECT p.Party_name FROM party p JOIN party_events pe ON p.Party_ID = pe.Party_ID GROUP BY p.Party_ID, p.Party_name HAVING COUNT(pe.Event_ID) >= 2;
SELECT T1.Member_Name  FROM member AS T1  JOIN party_events AS T2  ON T1.Member_ID = T2.Member_in_charge_ID  GROUP BY T2.Member_in_charge_ID  ORDER BY COUNT(T2.Event_ID) DESC  LIMIT 1;
SELECT T1.Member_Name, COUNT(T2.Event_ID) AS Event_Count  FROM member AS T1  JOIN party_events AS T2 ON T1.Member_ID = T2.Member_in_charge_ID  GROUP BY T1.Member_Name  ORDER BY Event_Count DESC  LIMIT 1;
SELECT Event_Name  FROM party_events  GROUP BY Event_Name  HAVING COUNT(*) > 2;
SELECT Event_Name FROM party_events GROUP BY Event_Name HAVING COUNT(Event_Name) > 2;
SELECT COUNT(*)  FROM party_events pe JOIN party p ON pe.Party_ID = p.Party_ID JOIN region r ON p.Region_ID = r.Region_ID WHERE pe.Event_Name = 'Annual Meeting' AND r.Region_name = 'United Kingdom';
SELECT COUNT(*)  FROM party_events  JOIN party ON party_events.Party_ID = party.Party_ID  JOIN region ON party.Region_ID = region.Region_ID  WHERE region.Region_name = 'United Kingdom' AND party_events.Event_Name = 'Annual Meeting';
SELECT COUNT(*) FROM pilot;
SELECT Pilot_name  FROM pilot  ORDER BY Rank ASC;
SELECT Position, Team FROM pilot;
SELECT DISTINCT Position  FROM pilot  WHERE Age > 30;
SELECT Pilot_name  FROM pilot  WHERE Team IN ('Bradley', 'Fordham');
SELECT T1.Join_Year FROM pilot AS T1 JOIN pilot_record AS T2 ON T1.Pilot_ID = T2.Pilot_ID WHERE T1.Rank = (SELECT MIN(Rank) FROM pilot)
SELECT Nationality, COUNT(*)  FROM pilot  GROUP BY Nationality;
SELECT Nationality, COUNT(*) as count FROM pilot GROUP BY Nationality ORDER BY count DESC LIMIT 1;
SELECT Position  FROM pilot  WHERE Join_Year > 2005  INTERSECT  SELECT Position  FROM pilot  WHERE Join_Year < 2000;
SELECT pilot.Pilot_name, aircraft.Model  FROM pilot  JOIN pilot_record ON pilot.Pilot_ID = pilot_record.Pilot_ID  JOIN aircraft ON aircraft.Aircraft_ID = pilot_record.Aircraft_ID;
SELECT T2.Pilot_name, T3.Fleet_Series  FROM pilot_record AS T1  JOIN pilot AS T2 ON T1.Pilot_ID = T2.Pilot_ID  JOIN aircraft AS T3 ON T1.Aircraft_ID = T3.Aircraft_ID  ORDER BY T2.Rank ASC;
SELECT DISTINCT a.Fleet_Series  FROM aircraft a  JOIN pilot_record pr ON a.Aircraft_ID = pr.Aircraft_ID  JOIN pilot p ON pr.Pilot_ID = p.Pilot_ID  WHERE p.Age < 34;
SELECT T2.Pilot_name, COUNT(T1.Record_ID)  FROM pilot_record AS T1  JOIN pilot AS T2 ON T1.Pilot_ID = T2.Pilot_ID  GROUP BY T2.Pilot_name;
SELECT T1.Pilot_name  FROM pilot AS T1  JOIN pilot_record AS T2 ON T1.Pilot_ID = T2.Pilot_ID  GROUP BY T1.Pilot_ID  HAVING COUNT(T2.Record_ID) > 1;
SELECT Pilot_name  FROM pilot  WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)
SELECT document_status_code FROM Ref_Document_Status;
SELECT document_status_description  FROM Ref_Document_Status  WHERE document_status_code = 'working';
SELECT document_type_code FROM Ref_Document_Types;
SELECT document_type_description  FROM Ref_Document_Types  WHERE document_type_code = 'Paper';
SELECT shipping_agent_name FROM Ref_Shipping_Agents;
SELECT shipping_agent_code  FROM Ref_Shipping_Agents  WHERE shipping_agent_name = 'UPS';
SELECT role_code FROM Roles;
SELECT role_description FROM Roles WHERE role_code = 'ED';
SELECT COUNT(*) FROM Employees;
SELECT Roles.role_description  FROM Roles  JOIN Employees ON Roles.role_code = Employees.role_code  WHERE Employees.employee_name = 'Koby';
SELECT document_id, receipt_date  FROM Documents;
SELECT      R.role_description,      R.role_code,      COUNT(E.employee_id) AS number_of_employees FROM      Roles R LEFT JOIN      Employees E ON R.role_code = E.role_code GROUP BY      R.role_code,      R.role_description;
SELECT Roles.role_description, COUNT(Employees.employee_id) AS NumberOfEmployees FROM Roles JOIN Employees ON Roles.role_code = Employees.role_code GROUP BY Roles.role_code HAVING COUNT(Employees.employee_id) > 1;
SELECT Ref_Document_Status.document_status_description  FROM Ref_Document_Status  JOIN Documents  ON Ref_Document_Status.document_status_code = Documents.document_status_code  WHERE Documents.document_id = 1;
SELECT COUNT(*)  FROM Documents  WHERE document_status_code = 'done';
SELECT document_type_code  FROM Documents  WHERE document_id = 2;
SELECT document_id  FROM Documents  WHERE document_status_code = 'done' AND document_type_code = 'paper';
SELECT Ref_Shipping_Agents.shipping_agent_name  FROM Documents  JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code  WHERE Documents.document_id = 2;
SELECT COUNT(*)  FROM Documents  WHERE shipping_agent_code = 'USPS';
SELECT Ref_Shipping_Agents.shipping_agent_name, COUNT(Documents.document_id) AS NumberOfDocuments FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_name ORDER BY NumberOfDocuments DESC LIMIT 1;
SELECT receipt_date FROM Documents WHERE document_id = 3;
SELECT Addresses.address_details  FROM Documents_Mailed  JOIN Addresses ON Documents_Mailed.mailed_to_address_id = Addresses.address_id  WHERE document_id = 4;
SELECT mailing_date  FROM Documents_Mailed  WHERE document_id = 7;
SELECT document_id FROM Documents WHERE document_status_code = (SELECT document_status_code FROM Ref_Document_Status WHERE document_status_description = 'done') AND document_type_code = (SELECT document_type_code FROM Ref_Document_Types WHERE document_type_description = 'Paper') AND shipping_agent_code != (SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = 'USPS');
SELECT document_id  FROM Documents  WHERE document_status_code = (SELECT document_status_code FROM Ref_Document_Status WHERE document_status_description = 'done')  AND document_type_code = (SELECT document_type_code FROM Ref_Document_Types WHERE document_type_description = 'Paper')  AND shipping_agent_code = (SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = 'USPS');
SELECT draft_details  FROM Document_Drafts  WHERE document_id = 7;
SELECT COUNT(*) FROM Draft_Copies WHERE document_id = 2;
SELECT document_id, COUNT(*) as num_draft_copies FROM Draft_Copies GROUP BY document_id ORDER BY num_draft_copies DESC LIMIT 1;
SELECT document_id, COUNT(*) AS num_draft_copies FROM Draft_Copies GROUP BY document_id HAVING COUNT(*) > 1;
SELECT E.employee_name FROM Circulation_History CH JOIN Employees E ON CH.employee_id = E.employee_id WHERE CH.document_id = 1;
SELECT e.employee_name  FROM Employees e LEFT JOIN Circulation_History ch ON e.employee_id = ch.employee_id WHERE ch.employee_id IS NULL;
SELECT E.employee_name, COUNT(CH.document_id) as Num_Drafts_and_Copies FROM Circulation_History CH JOIN Employees E ON CH.employee_id = E.employee_id GROUP BY E.employee_name ORDER BY Num_Drafts_and_Copies DESC LIMIT 1;
SELECT      CH.document_id,      COUNT(DISTINCT CH.employee_id) AS num_employees FROM      Circulation_History CH GROUP BY      CH.document_id;
SELECT Dname  FROM department  ORDER BY Mgr_start_date;
SELECT Dependent_name  FROM dependent  WHERE Relationship = 'Spouse';
SELECT COUNT(*)  FROM dependent  WHERE Sex = 'F';
SELECT department.Dname  FROM department  JOIN dept_locations ON department.Dnumber = dept_locations.Dnumber  WHERE dept_locations.Dlocation = 'Houston';
SELECT Fname, Lname  FROM employee  WHERE Salary > 30000;
SELECT COUNT(*), Sex  FROM employee  WHERE Salary < 50000  GROUP BY Sex;
SELECT Fname, Lname, Address  FROM employee  ORDER BY Bdate ASC;
SELECT T3.Event_Details FROM Services AS T1 JOIN Events AS T3 ON T1.Service_ID = T3.Service_ID WHERE T1.Service_Type_Code = 'Marriage';
SELECT E.Event_ID, E.Event_Details  FROM Events E JOIN Participants_in_Events PE1  ON E.Event_ID = PE1.Event_ID  GROUP BY E.Event_ID, E.Event_Details  HAVING COUNT(PE1.Participant_ID) > 1;
SELECT P.Participant_ID, P.Participant_Type_Code, COUNT(PIE.Event_ID) AS NumberOfEventsAttended FROM Participants P JOIN Participants_in_Events PIE ON P.Participant_ID = PIE.Participant_ID GROUP BY P.Participant_ID, P.Participant_Type_Code;
SELECT Participant_ID, Participant_Type_Code, Participant_Details FROM Participants;
SELECT COUNT(*)  FROM Participants  WHERE Participant_Type_Code = 'Organizer';
SELECT DISTINCT Service_Type_Code  FROM Services  ORDER BY Service_Type_Code ASC;
SELECT E.Service_ID, S.Service_Type_Code AS ServiceDetails FROM Events E JOIN Services S ON E.Service_ID = S.Service_ID;
SELECT COUNT(*)  FROM Events e  JOIN Participants_in_Events pe ON e.Event_ID = pe.Event_ID  JOIN Participants p ON pe.Participant_ID = p.Participant_ID  WHERE p.Participant_Details LIKE '%Dr.%';
SELECT Participant_Type_Code, COUNT(*) AS Count  FROM Participants  GROUP BY Participant_Type_Code  ORDER BY Count DESC  LIMIT 1;
SELECT S.Service_ID, S.Service_Type_Code  FROM Services S  WHERE S.Service_ID IN (     SELECT E.Service_ID      FROM Events E      JOIN Participants_in_Events PIE ON E.Event_ID = PIE.Event_ID      GROUP BY E.Service_ID      ORDER BY COUNT(PIE.Participant_ID)      LIMIT 1 )
SELECT Event_ID  FROM Participants_in_Events  GROUP BY Event_ID  ORDER BY COUNT(Participant_ID) DESC  LIMIT 1;
SELECT Event_ID FROM Events WHERE Event_ID NOT IN (SELECT Event_ID FROM Participants_in_Events WHERE Participant_ID IN (SELECT Participant_ID FROM Participants WHERE Participant_Details = 'Kenyatta Kuhn'))
SELECT s.Service_Type_Code  FROM Services s JOIN Events e ON s.Service_ID = e.Service_ID WHERE e.Event_Details LIKE '%successful%' GROUP BY s.Service_Type_Code HAVING COUNT(*) > 1 AND         (SELECT COUNT(*)         FROM Events e2         WHERE e2.Service_ID = s.Service_ID AND               e2.Event_Details LIKE '%failure%') > 0;
SELECT COUNT(*)  FROM Events  WHERE Event_ID NOT IN (SELECT Event_ID FROM Participants_in_Events)
SELECT DISTINCT Participant_ID  FROM Participants_in_Events;
SELECT name FROM races WHERE date = (SELECT MAX(date) FROM races);
SELECT name FROM races WHERE date = (SELECT MAX(date) FROM races);
SELECT name, date  FROM races  ORDER BY date DESC  LIMIT 1;
SELECT name, date FROM races ORDER BY date DESC LIMIT 1;
SELECT name FROM races WHERE year = 2017;
SELECT name FROM races WHERE year = 2017;
SELECT DISTINCT name FROM races WHERE year BETWEEN 2014 AND 2017;
SELECT DISTINCT name FROM races WHERE year BETWEEN 2014 AND 2017;
SELECT DISTINCT d.forename, d.surname  FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId  WHERE lt.milliseconds < 93000;
SELECT DISTINCT d.forename, d.surname  FROM drivers d  JOIN lapTimes lt ON d.driverId = lt.driverId  WHERE lt.milliseconds < 93000;
SELECT DISTINCT d.driverId, d.nationality  FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.milliseconds > 100000;
SELECT DISTINCT d.driverId, d.nationality  FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.milliseconds > 100000;
SELECT d.forename, d.surname  FROM drivers d  JOIN (   SELECT driverId, MIN(milliseconds) as min_milliseconds    FROM lapTimes    GROUP BY driverId ) lt  ON d.driverId = lt.driverId  ORDER BY lt.min_milliseconds  LIMIT 1;
SELECT d.forename, d.surname  FROM drivers d  JOIN (   SELECT driverId, MIN(milliseconds) as min_milliseconds    FROM lapTimes    GROUP BY driverId ) lt  ON d.driverId = lt.driverId  ORDER BY lt.min_milliseconds  LIMIT 1;
SELECT T1.driverId, T1.surname FROM drivers AS T1 JOIN (     SELECT driverId, MAX(milliseconds) AS max_laptime     FROM lapTimes     GROUP BY driverId ) AS T2 ON T1.driverId = T2.driverId WHERE T2.max_laptime = (     SELECT MAX(milliseconds)     FROM lapTimes )
SELECT T1.driverId, T1.surname  FROM drivers AS T1  JOIN results AS T2 ON T1.driverId = T2.driverId  JOIN (   SELECT driverId, MAX(milliseconds) as max_laptime    FROM lapTimes    GROUP BY driverId ) AS T3 ON T2.driverId = T3.driverId  ORDER BY T3.max_laptime DESC  LIMIT 1;
SELECT T2.driverId, T1.forename, T1.surname FROM drivers AS T1 JOIN (     SELECT driverId, COUNT(*) as count FROM (         SELECT raceId, driverId FROM lapTimes WHERE position = 1     ) AS innerQuery     GROUP BY driverId     HAVING count >= 2 ) AS T2 ON T1.driverId = T2.driverId;
SELECT T1.driverId, T1.forename, T1.surname  FROM drivers AS T1  JOIN (     SELECT driverId      FROM lapTimes      WHERE position = 1      GROUP BY driverId      HAVING COUNT(*) >= 2 ) AS T2 ON T1.driverId = T2.driverId;
SELECT COUNT(*)  FROM results  JOIN races ON results.raceId = races.raceId  WHERE races.name = 'Australian Grand Prix' AND races.year = 2009;
SELECT COUNT(*)  FROM results  JOIN races ON results.raceId = races.raceId  WHERE races.name = 'Australian Grand Prix' AND races.year = 2009;
SELECT COUNT(DISTINCT d.driverId) FROM drivers d LEFT JOIN results r ON d.driverId = r.driverId AND r.raceId IN (     SELECT raceId     FROM races     WHERE year = 2009 ) WHERE r.driverId IS NULL;
SELECT COUNT(DISTINCT d.driverId) FROM drivers d LEFT JOIN results r ON d.driverId = r.driverId AND r.raceId IN (     SELECT raceId     FROM races     WHERE year = 2009 ) WHERE r.driverId IS NULL
SELECT DISTINCT r.name, r.year  FROM races r JOIN results rs ON r.raceid = rs.raceid JOIN drivers d ON d.driverid = rs.driverid WHERE d.forename = 'Lewis';
SELECT T2.name, T2.year  FROM results AS T1  JOIN races AS T2 ON T1.raceid = T2.raceid  JOIN drivers AS T3 ON T1.driverid = T3.driverid  WHERE T3.surname = 'Lewis'
SELECT forename, surname FROM drivers WHERE nationality = 'German';
SELECT forename, surname FROM drivers WHERE nationality = 'German';
SELECT T1.driverId, T1.forename  FROM drivers AS T1  JOIN results AS T2 ON T1.driverId = T2.driverId  JOIN races AS T3 ON T2.raceId = T3.raceId  WHERE T3.name = 'Australian Grand Prix'  INTERSECT  SELECT T1.driverId, T1.forename  FROM drivers AS T1  JOIN results AS T2 ON T1.driverId = T2.driverId  JOIN races AS T3 ON T2.raceId = T3.raceId  WHERE T3.name = 'Chinese Grand Prix'
SELECT T3.driverId, T3.forename  FROM races AS T1  JOIN results AS T2 ON T1.raceId = T2.raceId  JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T1.name IN ('Australian Grand Prix', 'Chinese Grand Prix') GROUP BY T3.driverId, T3.forename HAVING COUNT(*) > 1;
SELECT d.forename, d.surname  FROM drivers d  JOIN results r ON d.driverId = r.driverId  JOIN races ra ON r.raceId = ra.raceId  WHERE ra.name = 'Australian Grand Prix'  AND d.driverId NOT IN (SELECT driverId                        FROM results                        WHERE raceId IN (SELECT raceId                                        FROM races                                        WHERE name = 'Chinese Grand Prix')) GROUP BY d.driverId;
SELECT d.forename, d.surname  FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Australian Grand Prix' EXCEPT SELECT d.forename, d.surname  FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races rc ON r.raceId = rc.raceId WHERE rc.name = 'Chinese Grand Prix';
SELECT DISTINCT d.forename FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.position = 1 AND ds.wins = 1;
SELECT DISTINCT d.forename  FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.position = 1 AND ds.wins > 0;
SELECT DISTINCT d.forename FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.position = 1 AND ds.points > 20;
SELECT DISTINCT d.forename  FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.position = 1 AND ds.points > 20;
SELECT nationality, COUNT(*)  FROM constructors  GROUP BY nationality;
SELECT nationality, COUNT(DISTINCT constructorId)  FROM constructors  GROUP BY nationality;
SELECT constructorId, COUNT(*) as num_races  FROM results  GROUP BY constructorId;
SELECT constructorId, COUNT(raceId)  FROM constructorResults  GROUP BY constructorId;
SELECT races.name  FROM races  JOIN circuits ON races.circuitId = circuits.circuitId  WHERE races.year > 2017 AND circuits.country = 'Spain';
SELECT T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Spain' AND T2.year > 2017;
SELECT DISTINCT T2.name FROM races AS T2 JOIN circuits AS T1 ON T2.circuitId = T1.circuitId WHERE T2.year > 2000 AND T1.country = 'Spain'
SELECT T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Spain' AND T2.year > 2000;
SELECT DISTINCT T.driverId, T.stop  FROM pitStops AS T  WHERE T.duration < (SELECT MAX(T2.duration) FROM pitStops AS T2 WHERE T2.raceId = 841)
SELECT T1.driverId, T1.stop FROM pitStops AS T1 WHERE T1.duration < (SELECT T2.duration FROM pitStops AS T2 WHERE T2.raceId = 841 AND T2.driverId = T1.driverId) ORDER BY T1.driverId, T1.stop;
Error: 第 2198 个样本有 3 个SQL。
SELECT DISTINCT T2.stop, T2.duration FROM pitStops AS T1 JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 AND T2.duration > (SELECT duration FROM pitStops WHERE raceId = 841)
SELECT DISTINCT forename  FROM drivers  ORDER BY forename ASC;
SELECT DISTINCT forename  FROM drivers  ORDER BY forename ASC;
SELECT DISTINCT name FROM races ORDER BY name DESC;
SELECT DISTINCT name FROM races ORDER BY name DESC;
SELECT name FROM races WHERE year BETWEEN 2009 AND 2011;
SELECT name FROM races WHERE year BETWEEN 2009 AND 2011;
SELECT name FROM races WHERE time > '12:00:00' OR time < '09:00:00';
SELECT name FROM races WHERE time > '12:00:00' OR time < '09:00:00';
SELECT d.forename, d.surname, d.driverId FROM drivers d WHERE d.driverId IN (     SELECT p.driverId     FROM pitStops p     GROUP BY p.driverId     HAVING COUNT(*) > 8 ) OR d.driverId IN (     SELECT r.driverId     FROM results r     GROUP BY r.driverId     HAVING COUNT(*) > 5 );
SELECT d.forename, d.surname, d.driverId FROM drivers d JOIN (     SELECT driverId, COUNT(*) as stop_count     FROM pitStops     GROUP BY driverId     HAVING COUNT(*) > 8 ) ps ON d.driverId = ps.driverId UNION SELECT d.forename, d.surname, d.driverId FROM drivers d JOIN (     SELECT driverId, COUNT(*) as race_count     FROM results     GROUP BY driverId     HAVING COUNT(*) > 5 ) r ON d.driverId = r.driverId;
SELECT d.surname, d.driverId  FROM drivers d JOIN (     SELECT driverId      FROM pitStops      GROUP BY driverId      HAVING COUNT(*) = 11 ) p ON d.driverId = p.driverId JOIN (     SELECT driverId      FROM results      GROUP BY driverId      HAVING COUNT(*) > 5 ) r ON d.driverId = r.driverId;
SELECT d.surname, d.driverId  FROM drivers d JOIN (     SELECT driverId      FROM pitStops      GROUP BY driverId      HAVING COUNT(*) = 11 ) p ON d.driverId = p.driverId JOIN (     SELECT driverId      FROM results      GROUP BY driverId      HAVING COUNT(*) > 5 ) r ON d.driverId = r.driverId;
SELECT T1.driverId, T1.surname  FROM drivers AS T1  JOIN results AS T2 ON T1.driverId = T2.driverId  JOIN races AS T3 ON T2.raceId = T3.raceId  WHERE T3.year > 2010  GROUP BY T1.driverId  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T1.driverId, T1.surname  FROM drivers AS T1  JOIN results AS T2 ON T1.driverId = T2.driverId  JOIN races AS T3 ON T2.raceId = T3.raceId  WHERE T3.year > 2010  GROUP BY T1.driverId  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT name FROM circuits WHERE country IN ('UK', 'Malaysia');
SELECT name FROM circuits WHERE country = 'UK' OR country = 'Malaysia';
SELECT circuitId, location FROM circuits WHERE country = 'France' OR country = 'Belgium';
SELECT circuitId, location FROM circuits WHERE country = 'France' OR country = 'Belgium';
SELECT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE c.nationality = 'Japanese' AND cs.points > 5;
SELECT c.name  FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE c.nationality = 'Japanese' AND cs.points > 5;
SELECT AVG(T2.fastestLapSpeed)  FROM races AS T1  JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T1.name = 'Monaco Grand Prix' AND T1.year = 2008;
SELECT AVG(T2.fastestLapSpeed)  FROM races AS T1  JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T1.name = 'Monaco Grand Prix' AND T1.year = 2008;
SELECT MAX(T2.fastestLapSpeed)  FROM races AS T1  JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T1.name = 'Monaco Grand Prix' AND T1.year = 2008;
SELECT MAX(T1.fastestLapSpeed)  FROM results AS T1  JOIN races AS T2 ON T1.raceId = T2.raceId  WHERE T2.name = 'Monaco Grand Prix' AND T2.year = 2008;
SELECT T1.name, T1.year, MAX(T2.fastestLapSpeed)  FROM races AS T1  JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T1.year > 2004  GROUP BY T1.name, T1.year  ORDER BY T1.year;
SELECT T1.name, MAX(T2.fastestLapSpeed)  FROM races AS T1  JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T1.year > 2004  GROUP BY T1.name  ORDER BY T1.year;
SELECT T1.name, T1.year, AVG(T2.fastestLapSpeed)  FROM races AS T1  JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T1.year > 2004  GROUP BY T1.raceId  ORDER BY T1.year;
SELECT r.name, AVG(results.fastestLapSpeed) as avg_speed, r.year  FROM races r  JOIN results  ON r.raceId = results.raceId  WHERE r.year > 2004  GROUP BY r.raceId, r.year  ORDER BY r.year;
SELECT T1.driverId, T1.forename, COUNT(T2.raceId) AS num_races FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId HAVING COUNT(T2.raceId) >= 2;
SELECT T1.driverId, T1.forename, COUNT(T2.raceId)  FROM drivers AS T1  JOIN results AS T2 ON T1.driverId = T2.driverId  GROUP BY T1.driverId  HAVING COUNT(T2.raceId) >= 2;
SELECT driverId, COUNT(raceId)  FROM results  GROUP BY driverId  HAVING COUNT(raceId) <= 30;
SELECT driverId, COUNT(raceId) AS race_count FROM results GROUP BY driverId HAVING COUNT(raceId) <= 30;
SELECT T1.driverId, T1.surname  FROM drivers AS T1  JOIN results AS T2 ON T1.driverId = T2.driverId  GROUP BY T1.driverId  ORDER BY COUNT(T2.raceId) DESC  LIMIT 1;
SELECT T2.driverId, T2.surname FROM (   SELECT driverId, COUNT(*) AS race_count   FROM results   GROUP BY driverId ) AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.race_count = (   SELECT MAX(race_count)   FROM (     SELECT COUNT(*) AS race_count     FROM results     GROUP BY driverId   ) AS subquery )
SELECT COUNT(*) FROM technician;
SELECT COUNT(*) FROM technician;
SELECT Name FROM technician ORDER BY Age ASC;
SELECT Name FROM technician ORDER BY Age ASC;
SELECT Team, Starting_Year FROM technician;
SELECT Team, Starting_Year FROM technician;
SELECT Name FROM technician WHERE Team != 'NYY';
SELECT Name FROM technician WHERE Team != 'NYY'
SELECT Name  FROM technician  WHERE Age IN (36, 37);
SELECT Name  FROM technician  WHERE Age IN (36, 37);
SELECT Starting_Year  FROM technician  ORDER BY Age DESC  LIMIT 1;
SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1;
SELECT Team, COUNT(*) AS Num_Technicians FROM technician GROUP BY Team;
SELECT Team, COUNT(*) AS NumberOfTechnicians  FROM technician  GROUP BY Team;
SELECT Team  FROM technician  GROUP BY Team  ORDER BY COUNT(technician_id) DESC  LIMIT 1;
SELECT Team, COUNT(*) AS num_technicians  FROM technician  GROUP BY Team  ORDER BY num_technicians DESC  LIMIT 1;
SELECT Team  FROM technician  GROUP BY Team  HAVING COUNT(technician_id) >= 2;
SELECT Team  FROM technician  GROUP BY Team  HAVING COUNT(technician_id) >= 2;
SELECT T2.Name, T3.Machine_series  FROM repair_assignment AS T1  JOIN technician AS T2 ON T1.technician_id = T2.technician_id  JOIN machine AS T3 ON T1.Machine_ID = T3.Machine_ID;
SELECT T2.Name, T3.Machine_series  FROM repair_assignment AS T1  JOIN technician AS T2 ON T1.technician_id = T2.technician_id  JOIN machine AS T3 ON T1.Machine_ID = T3.Machine_ID;
SELECT T3.Name  FROM repair_assignment AS T1  JOIN machine AS T2 ON T1.Machine_ID = T2.Machine_ID  JOIN technician AS T3 ON T1.technician_id = T3.technician_id  ORDER BY T2.quality_rank ASC;
SELECT T3.Name  FROM machine AS T1  JOIN repair_assignment AS T2 ON T1.Machine_ID = T2.Machine_ID  JOIN technician AS T3 ON T2.technician_id = T3.technician_id  ORDER BY T1.quality_rank ASC;
SELECT T3.Name  FROM repair_assignment AS T1  JOIN machine AS T2 ON T1.Machine_ID = T2.Machine_ID  JOIN technician AS T3 ON T1.technician_id = T3.technician_id  WHERE T2.value_points > 70;
SELECT T2.Name  FROM repair_assignment AS T1  JOIN technician AS T2 ON T1.technician_id = T2.technician_id  JOIN machine AS T3 ON T1.Machine_ID = T3.Machine_ID  WHERE T3.value_points > 70;
SELECT T1.Name, COUNT(T3.repair_ID)  FROM technician AS T1  JOIN repair_assignment AS T2  ON T1.technician_id = T2.technician_id  JOIN repair AS T3  ON T2.repair_ID = T3.repair_ID  GROUP BY T1.Name;
SELECT T1.Name, COUNT(T3.Machine_ID) AS NumberOfMachines FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id JOIN machine AS T3 ON T2.Machine_ID = T3.Machine_ID GROUP BY T1.Name;
SELECT Name  FROM technician  WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)
SELECT Name  FROM technician  WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)
SELECT Starting_Year  FROM technician  WHERE Team = 'CLE'  INTERSECT  SELECT Starting_Year  FROM technician  WHERE Team = 'CWS'
SELECT Starting_Year  FROM technician  WHERE Team = 'CLE' OR Team = 'CWS' GROUP BY Starting_Year;
SELECT COUNT(*) FROM entrepreneur
SELECT COUNT(*) FROM entrepreneur;
SELECT Company  FROM entrepreneur  ORDER BY Money_Requested DESC;
SELECT Company  FROM entrepreneur  ORDER BY Money_Requested DESC;
SELECT Company, Investor FROM entrepreneur;
Error: 第 2269 个样本有 2 个SQL。
SELECT AVG(Money_Requested)  FROM entrepreneur;
SELECT AVG(Money_Requested)  FROM entrepreneur;
SELECT Name  FROM people  ORDER BY Weight ASC;
SELECT Name  FROM people  ORDER BY Weight ASC;
SELECT p.Name FROM people p JOIN entrepreneur e ON p.People_ID = e.People_ID;
SELECT p.Name FROM people p JOIN entrepreneur e ON p.People_ID = e.People_ID;
SELECT p.Name FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID WHERE e.Investor != 'Rachel Elnaugh';
SELECT p.Name FROM people p JOIN entrepreneur e ON p.People_ID = e.People_ID WHERE e.Investor <> 'Rachel Elnaugh'
SELECT Weight  FROM people  WHERE Height = (SELECT MIN(Height) FROM people);
SELECT Weight  FROM people  WHERE Height = (SELECT MIN(Height) FROM people);
SELECT p.Name  FROM people p JOIN entrepreneur e ON p.People_ID = e.People_ID WHERE p.Weight = (SELECT MAX(Weight) FROM people WHERE People_ID IN (SELECT People_ID FROM entrepreneur))
SELECT p.Name  FROM people p JOIN entrepreneur e ON p.People_ID = e.People_ID WHERE p.Weight = (SELECT MAX(Weight) FROM people WHERE People_ID IN (SELECT People_ID FROM entrepreneur))
SELECT SUM(e.Money_Requested)  FROM entrepreneur e  JOIN people p ON e.People_ID = p.People_ID  WHERE p.Height > 1.85;
SELECT SUM(Money_Requested)  FROM entrepreneur  JOIN people ON entrepreneur.People_ID = people.People_ID  WHERE Height > 1.85;
SELECT p.Date_of_Birth  FROM entrepreneur e  JOIN people p ON e.People_ID = p.People_ID  WHERE e.Investor IN ('Simon Woodroffe', 'Peter Jones');
SELECT p.Date_of_Birth  FROM entrepreneur e  JOIN people p ON e.People_ID = p.People_ID  WHERE e.Investor IN ('Simon Woodroffe', 'Peter Jones');
SELECT p.Weight  FROM entrepreneur e  JOIN people p ON e.People_ID = p.People_ID  ORDER BY e.Money_Requested DESC;
SELECT p.Weight  FROM entrepreneur e  JOIN people p ON e.People_ID = p.People_ID  ORDER BY e.Money_Requested DESC;
SELECT Investor, COUNT(Entrepreneur_ID) AS Num_Entrepreneurs FROM entrepreneur GROUP BY Investor;
SELECT Investor, COUNT(Entrepreneur_ID)  FROM entrepreneur  GROUP BY Investor;
SELECT Investor  FROM entrepreneur  GROUP BY Investor  ORDER BY COUNT(Entrepreneur_ID) DESC  LIMIT 1;
SELECT Investor, COUNT(*) AS NumberOfInvestments  FROM entrepreneur  GROUP BY Investor  ORDER BY NumberOfInvestments DESC  LIMIT 1;
SELECT Investor  FROM entrepreneur  GROUP BY Investor  HAVING COUNT(DISTINCT Entrepreneur_ID) >= 2;
SELECT Investor  FROM entrepreneur  GROUP BY Investor  HAVING COUNT(Entrepreneur_ID) >= 2;
SELECT p.Name, e.Company, e.Money_Requested  FROM entrepreneur e  JOIN people p ON e.People_ID = p.People_ID  ORDER BY e.Money_Requested DESC;
SELECT p.Name, e.Investor, e.Money_Requested  FROM entrepreneur e  JOIN people p ON e.People_ID = p.People_ID  ORDER BY e.Money_Requested DESC;
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur);
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)
SELECT Investor  FROM entrepreneur  WHERE Money_Requested > 140000  INTERSECT  SELECT Investor  FROM entrepreneur  WHERE Money_Requested < 120000;
SELECT Investor  FROM entrepreneur  WHERE Money_Requested > 140000  INTERSECT  SELECT Investor  FROM entrepreneur  WHERE Money_Requested < 120000;
SELECT COUNT(DISTINCT Company) FROM entrepreneur;
SELECT COUNT(DISTINCT Company) FROM entrepreneur;
SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = (SELECT MAX(Height) FROM people);
SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = (SELECT MAX(Height) FROM people);
SELECT COUNT(*) FROM perpetrator
Error: 第 2305 个样本有 2 个SQL。
Error: 第 2306 个样本有 2 个SQL。
SELECT AVG(Injured) FROM perpetrator;
SELECT Location  FROM perpetrator  WHERE Killed = (SELECT MAX(Killed) FROM perpetrator);
SELECT Name  FROM people  ORDER BY Height ASC;
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM perpetrator)
SELECT p.Name FROM perpetrator pr JOIN people p ON pr.People_ID = p.People_ID WHERE p.Country != 'China'
SELECT p.Name  FROM people p JOIN perpetrator pr ON p.People_ID = pr.People_ID  WHERE p.Weight = (SELECT MAX(Weight) FROM people);
SELECT SUM(k.Killed)  FROM perpetrator k  JOIN people p ON k.People_ID = p.People_ID  WHERE p.Height > 1.84;
SELECT p.Name  FROM perpetrator pr  JOIN people p ON pr.People_ID = p.People_ID  WHERE pr.Country = 'China' OR pr.Country = 'Japan';
SELECT p.Height FROM people p JOIN perpetrator pr ON p.People_ID = pr.People_ID ORDER BY pr.Injured DESC;
SELECT Country, COUNT(Perpetrator_ID)  FROM perpetrator  GROUP BY Country;
SELECT Country, COUNT(Perpetrator_ID) as Num_Perpetrators FROM perpetrator GROUP BY Country ORDER BY Num_Perpetrators DESC LIMIT 1;
SELECT Country, COUNT(Perpetrator_ID) as Num_Perpetrators FROM perpetrator GROUP BY Country HAVING COUNT(Perpetrator_ID) >= 2;
SELECT p.Name  FROM perpetrator pr  JOIN people p ON pr.People_ID = p.People_ID  ORDER BY pr.Year DESC;
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)
SELECT Country  FROM perpetrator  WHERE Injured > 50  INTERSECT  SELECT Country  FROM perpetrator  WHERE Injured < 20;
SELECT COUNT(DISTINCT Location) FROM perpetrator
SELECT T1.Date  FROM perpetrator AS T1  JOIN people AS T2  ON T1.People_ID = T2.People_ID  WHERE T2.Height = (SELECT MAX(Height) FROM people);
SELECT Year FROM perpetrator ORDER BY Year DESC LIMIT 1;
SELECT Campus FROM Campuses WHERE County = 'Los Angeles';
SELECT Campus FROM Campuses WHERE County = 'Los Angeles';
SELECT Campus FROM Campuses WHERE Location = 'Chico';
SELECT Campus FROM Campuses WHERE Location = 'Chico';
SELECT Campus FROM Campuses WHERE Year = 1958;
SELECT Campus FROM Campuses WHERE Year = 1958;
SELECT Campus FROM Campuses WHERE Year < 1800;
SELECT Campus FROM Campuses WHERE Year < 1800;
SELECT Campus FROM Campuses WHERE Year BETWEEN 1935 AND 1939;
SELECT Campus FROM Campuses WHERE Year BETWEEN 1935 AND 1939;
SELECT Campus  FROM Campuses  WHERE (Location = 'Northridge' AND County = 'Los Angeles')  OR (Location = 'San Francisco' AND County = 'San Francisco');
SELECT Campus  FROM Campuses  WHERE Location = 'Northridge' AND County = 'Los Angeles' OR Location = 'San Francisco' AND County = 'San Francisco';
SELECT CampusFee  FROM csu_fees  WHERE Campus = 'San Jose State University' AND Year = 1996;
SELECT CampusFee  FROM csu_fees  WHERE Campus = 'San Jose State University' AND Year = 1996;
SELECT CampusFee  FROM csu_fees  WHERE Campus = 'San Francisco State University' AND Year = 1996;
SELECT CampusFee  FROM csu_fees  WHERE Campus = 'San Francisco State University' AND Year = 1996;
SELECT COUNT(*)  FROM csu_fees  WHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_fees);
SELECT COUNT(*)  FROM csu_fees  WHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_fees);
SELECT COUNT(*)  FROM csu_fees  WHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_fees);
SELECT COUNT(*)  FROM csu_fees  WHERE CampusFee > (SELECT AVG(CampusFee) FROM csu_fees);
SELECT Campus FROM Campuses WHERE County = 'Los Angeles' AND Year > 1950;
SELECT Campus FROM Campuses WHERE County = 'Los Angeles' AND Year > 1950;
SELECT Year  FROM degrees  GROUP BY Year  ORDER BY SUM(Degrees) DESC  LIMIT 1;
SELECT Year  FROM degrees  GROUP BY Year  ORDER BY SUM(Degrees) DESC  LIMIT 1;
SELECT Campus  FROM degrees  GROUP BY Campus  ORDER BY SUM(Degrees) DESC  LIMIT 1;
SELECT Campus  FROM degrees  GROUP BY Campus  ORDER BY SUM(Degrees) DESC  LIMIT 1;
SELECT Campus  FROM faculty  WHERE Year = 2003  GROUP BY Campus  ORDER BY COUNT(Faculty) DESC  LIMIT 1;
SELECT T1.Campus  FROM faculty AS T1  JOIN Campuses AS T2  ON T1.Campus = T2.Id  WHERE T1.Year = 2003  ORDER BY T1.Faculty DESC  LIMIT 1;
SELECT AVG(CampusFee)  FROM csu_fees  WHERE Year = 1996;
SELECT AVG(CampusFee)  FROM csu_fees  WHERE Year = 1996;
SELECT AVG(CampusFee)  FROM csu_fees  WHERE Year = 2005;
SELECT AVG(CampusFee)  FROM csu_fees  WHERE Year = 2005;
SELECT SUM(Degrees)  FROM degrees  WHERE Year BETWEEN 1998 AND 2002;
SELECT SUM(Degrees)  FROM degrees  WHERE Year BETWEEN 1998 AND 2002;
SELECT Campus, COUNT(Degrees)  FROM degrees  JOIN campuses ON degrees.Campus = campuses.Id  WHERE campuses.County = 'Orange' AND degrees.Year > 2000  GROUP BY Campus;
SELECT campuses.Campus, SUM(degrees.Degrees) as Total_Degrees FROM campuses JOIN degrees ON campuses.Id = degrees.Campus WHERE campuses.County = 'Orange' AND degrees.Year > 2000 GROUP BY campuses.Campus;
SELECT C1.Campus  FROM campuses AS C1  JOIN faculty AS F1 ON C1.Id = F1.Campus  WHERE F1.Year = 2002  AND F1.Faculty > (     SELECT MAX(F2.Faculty)      FROM campuses AS C2      JOIN faculty AS F2 ON C2.Id = F2.Campus      WHERE C2.County = 'Orange' AND F2.Year = 2002 )
SELECT T1.campus  FROM campuses AS T1  JOIN faculty AS T2  ON T1.id = T2.campus  WHERE T2.year = 2002  AND T2.faculty > (     SELECT MAX(faculty)      FROM campuses      JOIN faculty      ON campuses.id = faculty.campus      WHERE campuses.county = 'Orange'      AND faculty.year = 2002 )
SELECT Campus  FROM enrollments  WHERE Year = 1956 AND TotalEnrollment_AY > 400 AND FTE_AY > 200;
SELECT c.Campus FROM Campuses c JOIN enrollments e ON c.Id = e.Campus WHERE c.Year = 1956 AND e.FTE_AY > 200 AND e.TotalEnrollment_AY > 400;
SELECT COUNT(*)  FROM Campuses  WHERE County = 'Los Angeles';
SELECT COUNT(*)  FROM Campuses  WHERE County = 'LA';
SELECT Campus FROM Campuses WHERE County = 'Los Angeles';
SELECT Campus FROM Campuses WHERE County = 'Los Angeles';
SELECT SUM(Degrees)  FROM degrees  JOIN Campuses ON degrees.Campus = Campuses.Id  WHERE Campus = 'San Jose State University' AND Year = 2000;
SELECT SUM(Degrees)  FROM degrees  WHERE Campus = 'San Jose State University' AND Year = 2000;
SELECT Degrees  FROM degrees  JOIN Campuses ON degrees.Campus = Campuses.Id  WHERE Campuses.Campus = 'San Francisco State University' AND degrees.Year = 2001;
SELECT degrees  FROM degrees  JOIN campuses ON degrees.Campus = campuses.Id  WHERE campuses.Campus = 'San Francisco State University' AND degrees.Year = 2001;
SELECT SUM(Faculty)  FROM faculty  WHERE Year = 2002;
SELECT SUM(Faculty)  FROM faculty  WHERE Year = 2002;
SELECT COUNT(*)  FROM faculty  WHERE Campus = 'Long Beach State University' AND Year = 2002;
SELECT COUNT(Faculty)  FROM faculty  WHERE Campus = 'Long Beach State University' AND Year = 2002;
SELECT COUNT(*)  FROM faculty  WHERE Campus = 'San Francisco State University' AND Year = 2004;
SELECT COUNT(*)  FROM faculty  WHERE Campus = 'San Francisco State University' AND Year = 2004;
SELECT Campus  FROM faculty  WHERE Year = 2004 AND Faculty BETWEEN 600 AND 1000;
SELECT Campus FROM faculty WHERE Year = 2004 AND Faculty BETWEEN 600 AND 1000;
SELECT f.Faculty FROM faculty f JOIN (     SELECT d.Campus, COUNT(d.Degrees) as degree_count     FROM degrees d     WHERE d.Year = 2002     GROUP BY d.Campus     ORDER BY degree_count DESC     LIMIT 1 ) max_degrees_campus ON f.Campus = max_degrees_campus.Campus WHERE f.Year = 2002;
SELECT f.Faculty FROM faculty f JOIN (     SELECT d.Campus, d.Degrees     FROM degrees d     WHERE d.Year = 2002     ORDER BY d.Degrees DESC     LIMIT 1 ) max_degrees ON f.Campus = max_degrees.Campus WHERE f.Year = 2002;
SELECT COUNT(faculty.Faculty)  FROM faculty  JOIN campuses ON faculty.Campus = campuses.Id  WHERE faculty.Year = 2001 AND campuses.Campus = (     SELECT c.Campus      FROM degrees d      JOIN campuses c ON d.Campus = c.Id      WHERE d.Year = 2001      GROUP BY c.Campus      ORDER BY SUM(d.Degrees) ASC      LIMIT 1 )
SELECT COUNT(faculty.Faculty)  FROM faculty  JOIN campuses ON faculty.Campus = campuses.Id  JOIN degrees ON campuses.Id = degrees.Campus AND faculty.Year = degrees.Year  WHERE faculty.Year = 2001  GROUP BY faculty.Campus  ORDER BY (SELECT COUNT(degrees.Degrees) FROM degrees WHERE degrees.Campus = faculty.Campus AND degrees.Year = 2001)  LIMIT 1;
SELECT SUM(Undergraduate) FROM discipline_enrollments WHERE Campus = 'San Jose State University' AND Year = 2004;
Error: 第 2386 个样本有 2 个SQL。
SELECT SUM(discipline_enrollments.Graduate) FROM discipline_enrollments JOIN campuses ON discipline_enrollments.Campus = campuses.Id WHERE campuses.Campus = 'San Francisco State University' AND discipline_enrollments.Year = 2004;
SELECT SUM(degrees.Degrees)  FROM degrees  JOIN campuses ON degrees.Campus = campuses.Id  WHERE campuses.Campus = 'San Francisco State University' AND degrees.Year = 2004;
SELECT CampusFee  FROM csu_fees  WHERE Campus = 'San Francisco State University' AND Year = 2000;
SELECT CampusFee  FROM csu_fees  WHERE Campus = 'San Francisco State University' AND Year = 2000;
SELECT CampusFee  FROM csu_fees  WHERE Campus = 'San Jose State University' AND Year = 2000;
SELECT CampusFee  FROM csu_fees  WHERE Campus = 'San Jose State University' AND Year = 2000;
SELECT COUNT(*) FROM Campuses;
SELECT COUNT(*) FROM Campuses;
SELECT COUNT(*) FROM candidate
SELECT COUNT(*) FROM candidate
SELECT Poll_Source, COUNT(Candidate_ID) AS Num_Candidates FROM candidate GROUP BY Poll_Source ORDER BY Num_Candidates DESC LIMIT 1;
SELECT Poll_Source, COUNT(Candidate_ID) AS Num_Candidates FROM candidate GROUP BY Poll_Source ORDER BY Num_Candidates DESC LIMIT 1;
SELECT Candidate_ID, People_ID, Poll_Source, Date, Support_rate  FROM candidate  ORDER BY Support_rate DESC  LIMIT 3;
Error: 第 2400 个样本有 2 个SQL。
SELECT Candidate_ID FROM candidate WHERE Oppose_rate = (SELECT MIN(Oppose_rate) FROM candidate);
SELECT Candidate_ID FROM candidate_poll.candidate WHERE Oppose_rate = (SELECT MIN(Oppose_rate) FROM candidate_poll.candidate);
SELECT c.Candidate_ID, c.Support_rate, c.Consider_rate, c.Oppose_rate, c.Unsure_rate FROM candidate_poll.candidate c ORDER BY c.Unsure_rate ASC;
SELECT c.Candidate_ID, c.Support_rate, c.Consider_rate, c.Oppose_rate  FROM candidate AS c  ORDER BY c.Unsure_rate ASC;
SELECT Poll_Source FROM candidate WHERE Oppose_rate = (SELECT MAX(Oppose_rate) FROM candidate)
SELECT T1.Poll_Source FROM candidate AS T1 WHERE T1.Oppose_rate > 0
SELECT Name  FROM people  ORDER BY Date_of_Birth ASC;
SELECT Name  FROM people  ORDER BY Date_of_Birth;
SELECT AVG(Height), AVG(Weight)  FROM people  WHERE Sex = 'M';
SELECT AVG(Height), AVG(Weight)  FROM people  WHERE Sex = 'M';
SELECT Name  FROM people  WHERE Height > 200 OR Height < 190;
SELECT Name  FROM people  WHERE Height > 200 OR Height < 190;
SELECT AVG(Weight), MIN(Weight), Sex  FROM people  GROUP BY Sex;
SELECT AVG(Weight), MIN(Weight), Sex  FROM people  GROUP BY Sex;
SELECT p.Name, p.Sex  FROM people p JOIN candidate c ON p.People_ID = c.People_ID  WHERE c.Support_rate = (SELECT MAX(Support_rate) FROM candidate);
SELECT p.Name, p.Sex  FROM people p JOIN candidate c ON p.People_ID = c.People_ID  WHERE c.Support_rate = (SELECT MAX(Support_rate) FROM candidate);
SELECT p.Name, p.Sex, c.Oppose_rate FROM people p JOIN (     SELECT People_ID, MIN(Oppose_rate) AS Min_Oppose     FROM candidate     GROUP BY People_ID ) cmin ON p.People_ID = cmin.People_ID JOIN candidate c ON c.People_ID = p.People_ID AND c.Oppose_rate = cmin.Min_Oppose WHERE (     SELECT COUNT(*)     FROM candidate c2     WHERE c2.People_ID = p.People_ID AND c2.Oppose_rate < c.Oppose_rate ) = 0 AND (     SELECT COUNT(*)     FROM candidate c3     WHERE c3.People_ID <> p.People_ID AND c3.Sex = p.Sex AND c3.Oppose_rate <= c.Oppose_rate ) = 0 GROUP BY p.Sex;
SELECT p.Name, p.Sex FROM people p JOIN (   SELECT People_ID, MAX(Oppose_rate) as MaxOpposeRate   FROM candidate   WHERE Oppose_rate = (     SELECT MAX(Oppose_rate)     FROM candidate c2     WHERE c2.Sex = candidate.Sex   )   GROUP BY Sex ) max_oppose ON p.People_ID = max_oppose.People_ID;
SELECT p.Sex, AVG(c.Unsure_rate) as Average_Unsure_Ratio FROM candidate c JOIN people p ON c.People_ID = p.People_ID GROUP BY p.Sex ORDER BY Average_Unsure_Ratio DESC LIMIT 1;
SELECT p.Sex  FROM people p JOIN candidate c ON p.People_ID = c.People_ID WHERE c.Unsure_rate = (SELECT MAX(Unsure_rate) FROM candidate);
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM candidate)
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM candidate)
SELECT p.Name FROM candidate c JOIN people p ON c.People_ID = p.People_ID WHERE c.Support_rate < c.Oppose_rate;
SELECT p.Name FROM candidate c JOIN people p ON c.People_ID = p.People_ID WHERE c.Support_rate < c.Oppose_rate;
SELECT Sex, COUNT(*)  FROM people  WHERE Weight > 85  GROUP BY Sex;
SELECT Sex, COUNT(*)  FROM people  WHERE Weight > 85  GROUP BY Sex;
SELECT MAX(Support_rate) AS Highest_Support, MIN(Consider_rate) AS Lowest_Consider, MIN(Oppose_rate) AS Lowest_Oppose FROM candidate_poll.candidate;
SELECT MAX(Support_rate) AS Max_Support_Rate, MIN(Consider_rate) AS Min_Consider_Rate, MIN(Oppose_rate) AS Min_Oppose_Rate FROM candidate_poll.candidate;
SELECT p.Name FROM candidate c JOIN people p ON c.People_ID = p.People_ID WHERE p.Sex = 'F' ORDER BY p.Name;
SELECT p.Name FROM people p JOIN candidate c ON p.People_ID = c.People_ID WHERE p.Sex = 'F' ORDER BY p.Name ASC;
SELECT Name  FROM people  WHERE Height < (SELECT AVG(Height) FROM people)
SELECT Name  FROM people  WHERE Height < (SELECT AVG(Height) FROM people)
SELECT * FROM people;
SELECT * FROM people;
SELECT title  FROM Movie  WHERE director = 'steven spielberg';
SELECT title  FROM Movie  WHERE director = 'Steven Spielberg';
SELECT title FROM Movie WHERE year > 2000 AND director = 'James Cameron';
SELECT title  FROM Movie  WHERE director = 'James Cameron' AND year > 2000;
SELECT COUNT(*) FROM Movie WHERE year < 2000;
SELECT COUNT(*) FROM Movie WHERE year < 2000;
SELECT director FROM Movie WHERE title = 'Avatar';
SELECT director FROM Movie WHERE title = 'Avatar';
SELECT COUNT(*) FROM Reviewer;
SELECT COUNT(*) FROM Reviewer;
SELECT rID FROM Reviewer WHERE name LIKE '%Mike%';
SELECT rID FROM Reviewer WHERE name LIKE '%Mike%';
SELECT rID FROM Reviewer WHERE name = 'Daniel Lewis';
SELECT rID FROM Reviewer WHERE name = 'Daniel Lewis';
SELECT COUNT(*)  FROM Rating  WHERE stars > 3;
SELECT COUNT(*)  FROM Rating  WHERE stars > 3;
SELECT MIN(stars) AS Lowest_Rating, MAX(stars) AS Highest_Rating FROM Rating;
SELECT MAX(stars) AS Max_Stars, MIN(stars) AS Min_Stars FROM Rating;
SELECT DISTINCT Movie.year FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE Rating.stars IN (4, 5) ORDER BY Movie.year ASC;
SELECT DISTINCT Movie.year FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE Rating.stars >= 4 ORDER BY Movie.year;
SELECT Movie.director, Movie.title  FROM Movie  JOIN Rating ON Movie.mID = Rating.mID  WHERE Rating.stars = 5;
SELECT Movie.director, Movie.title  FROM Movie  JOIN Rating ON Movie.mID = Rating.mID  WHERE Rating.stars = 5;
SELECT r.name, AVG(ra.stars)  FROM Rating ra  JOIN Reviewer r ON ra.rID = r.rID  GROUP BY r.name;
SELECT Reviewer.rID, Reviewer.name, AVG(Rating.stars)  FROM Reviewer  JOIN Rating ON Reviewer.rID = Rating.rID  GROUP BY Reviewer.rID, Reviewer.name;
SELECT title  FROM Movie  WHERE mID NOT IN (SELECT mID FROM Rating)
SELECT title  FROM Movie  WHERE mID NOT IN (SELECT mID FROM Rating)
SELECT DISTINCT R.name  FROM Reviewer R, Rating Ra  WHERE R.rID = Ra.rID AND Ra.ratingDate IS NULL;
SELECT DISTINCT name  FROM Reviewer  WHERE rID NOT IN (SELECT rID FROM Rating WHERE ratingDate IS NULL)
SELECT AVG(Rating.stars), Movie.title  FROM Rating  JOIN Movie ON Rating.mID = Movie.mID  WHERE Movie.year = (SELECT MIN(year) FROM Movie) GROUP BY Movie.title;
SELECT AVG(Rating.stars), Movie.title  FROM Rating  JOIN Movie ON Rating.mID = Movie.mID  WHERE Movie.year = (SELECT MIN(year) FROM Movie) GROUP BY Movie.title;
SELECT title FROM Movie WHERE year = (SELECT MAX(year) FROM Movie);
SELECT title FROM Movie WHERE year = (SELECT MAX(year) FROM Movie);
SELECT MAX(Rating.stars), Movie.year  FROM Rating  JOIN Movie ON Rating.mID = Movie.mID  WHERE Movie.year = (SELECT MAX(year) FROM Movie)
SELECT MAX(T3.stars), T1.year  FROM Movie AS T1  JOIN Rating AS T3 ON T1.mID = T3.mID  WHERE T1.year = (SELECT MAX(year) FROM Movie)
SELECT title  FROM Movie  WHERE year > (SELECT MAX(year) FROM Movie WHERE director = 'Steven Spielberg')
SELECT title  FROM Movie  WHERE year > (     SELECT MAX(year)      FROM Movie      WHERE director = 'Steven Spielberg' );
SELECT T1.title, T1.director  FROM Movie AS T1  JOIN Rating AS T2 ON T1.mID = T2.mID  WHERE T2.stars > (SELECT AVG(T3.stars)                    FROM Rating AS T3                    JOIN Movie AS T4 ON T3.mID = T4.mID                    WHERE T4.director = 'James Cameron')
SELECT Movie.title, Movie.director  FROM Movie  JOIN Rating ON Movie.mID = Rating.mID  WHERE Rating.stars > (     SELECT AVG(Rating.stars)      FROM Rating      JOIN Movie ON Rating.mID = Movie.mID      WHERE Movie.director = 'James Cameron' )
SELECT R.name, M.title, Ra.stars, Ra.ratingDate  FROM Rating AS Ra  JOIN Movie AS M ON Ra.mID = M.mID  JOIN Reviewer AS R ON Ra.rID = R.rID  ORDER BY R.name, M.title, Ra.stars;
SELECT R.name, M.title, Ra.stars, Ra.ratingDate  FROM Rating AS Ra  JOIN Movie AS M ON Ra.mID = M.mID  JOIN Reviewer AS R ON Ra.rID = R.rID  ORDER BY R.name, M.title, Ra.stars, Ra.ratingDate;
SELECT R.name FROM Reviewer R JOIN Rating Ra ON R.rID = Ra.rID GROUP BY R.name HAVING COUNT(Ra.rID) >= 3;
SELECT R.name FROM Reviewer R JOIN Rating Ra ON R.rID = Ra.rID GROUP BY R.name HAVING COUNT(Ra.mID) >= 3;
SELECT DISTINCT R.name  FROM Reviewer R, Rating Ra, Movie M  WHERE M.title = 'Gone with the Wind' AND M.mID = Ra.mID AND R.rID = Ra.rID;
SELECT DISTINCT R.name  FROM Reviewer R, Rating Ra, Movie M  WHERE M.title = 'Gone with the Wind' AND M.mID = Ra.mID AND R.rID = Ra.rID;
SELECT DISTINCT M.director FROM Movie M, Rating R, Reviewer Rev WHERE M.mID = R.mID AND Rev.rID = R.rID AND Rev.name = 'Sarah Martinez';
SELECT DISTINCT M.director FROM Movie M JOIN Rating R ON M.mID = R.mID JOIN Reviewer Re ON R.rID = Re.rID WHERE Re.name = 'Sarah Martinez';
SELECT R.name, M.title, Ra.stars  FROM Rating AS Ra  JOIN Movie AS M ON Ra.mID = M.mID  JOIN Reviewer AS R ON Ra.rID = R.rID  WHERE M.director = R.name;
SELECT DISTINCT R.name, M.title, Ra.stars  FROM Rating AS Ra  JOIN Reviewer AS R ON Ra.rID = R.rID  JOIN Movie AS M ON Ra.mID = M.mID  WHERE R.name = M.director;
SELECT Reviewer.name, Movie.title  FROM Reviewer  CROSS JOIN Movie;
Error: 第 2484 个样本有 2 个SQL。
SELECT Movie.title  FROM Movie  WHERE Movie.mID NOT IN (     SELECT Rating.mID      FROM Rating, Reviewer      WHERE Rating.rID = Reviewer.rID AND Reviewer.name = 'Chris Jackson' );
SELECT Movie.title  FROM Movie  WHERE Movie.mID NOT IN (     SELECT Rating.mID      FROM Rating, Reviewer      WHERE Rating.rID = Reviewer.rID AND Reviewer.name = 'Chris Jackson' );
SELECT M.title, M.director FROM Movie M WHERE M.director IN (     SELECT director     FROM Movie     GROUP BY director     HAVING COUNT(mID) > 1 ) ORDER BY M.director, M.title;
SELECT M1.director, M1.title  FROM Movie M1  JOIN (     SELECT director      FROM Movie      GROUP BY director      HAVING COUNT(mID) > 1 ) AS M2  ON M1.director = M2.director;
SELECT T1.title, T1.year  FROM Movie AS T1  JOIN (   SELECT director    FROM Movie    GROUP BY director    HAVING COUNT(mID) > 1 ) AS T2  ON T1.director = T2.director;
SELECT M1.title, M1.year  FROM Movie AS M1  JOIN (   SELECT director    FROM Movie    GROUP BY director    HAVING COUNT(mID) > 1 ) AS D  ON M1.director = D.director;
SELECT director  FROM Movie  GROUP BY director  HAVING COUNT(*) = 1;
SELECT director  FROM Movie  GROUP BY director  HAVING COUNT(mID) = 1;
SELECT director  FROM Movie  WHERE director IS NOT NULL  GROUP BY director  HAVING COUNT(mID) = 1;
SELECT director  FROM Movie  WHERE director IS NOT NULL  GROUP BY director  HAVING COUNT(mID) = 1;
SELECT M.director, COUNT(R.rID) AS NumReviews FROM Movie M LEFT JOIN Rating R ON M.mID = R.mID GROUP BY M.director;
SELECT Movie.director, COUNT(Rating.rID) AS NumberOfReviews FROM Movie JOIN Rating ON Movie.mID = Rating.mID GROUP BY Movie.director;
SELECT T1.title, AVG(T3.stars) AS avg_rating FROM Movie AS T1  JOIN Rating AS T3 ON T1.mID = T3.mID  GROUP BY T1.mID  ORDER BY avg_rating DESC  LIMIT 1;
SELECT T1.title, AVG(T3.stars) as avg_rating  FROM Movie AS T1  JOIN Rating AS T3 ON T1.mID = T3.mID  GROUP BY T1.title  ORDER BY avg_rating DESC  LIMIT 1;
SELECT Movie.title, AVG(Rating.stars) as average_rating  FROM Movie  JOIN Rating ON Movie.mID = Rating.mID  GROUP BY Movie.title  ORDER BY average_rating ASC  LIMIT 1;
SELECT Movie.title, AVG(Rating.stars) as average_rating FROM Movie JOIN Rating ON Movie.mID = Rating.mID GROUP BY Movie.title HAVING AVG(Rating.stars) = (     SELECT MIN(avg_stars)     FROM (         SELECT AVG(Rating.stars) as avg_stars         FROM Rating         GROUP BY Rating.mID     ) AS subquery );
SELECT M.title, M.year  FROM Movie M  JOIN Rating R ON M.mID = R.mID  GROUP BY M.mID  ORDER BY AVG(R.stars) DESC  LIMIT 3;
SELECT M.title, M.year  FROM Movie M  JOIN Rating R ON M.mID = R.mID  ORDER BY R.stars DESC  LIMIT 3;
SELECT D.name AS Director, M.title AS Movie_Title, MAX(R.stars) AS Highest_Rating FROM Rating R JOIN Movie M ON R.mID = M.mID JOIN (     SELECT mID, director     FROM Movie     WHERE director IS NOT NULL     GROUP BY director ) AS MD ON M.mID = MD.mID JOIN Reviewer D ON R.rID = D.rID WHERE M.director = MD.director GROUP BY MD.director ORDER BY Highest_Rating DESC;
Error: 第 2504 个样本有 3 个SQL。
SELECT R.name, M.title, MIN(Ra.stars) FROM Reviewer R JOIN Rating Ra ON R.rID = Ra.rID JOIN Movie M ON M.mID = Ra.mID GROUP BY R.name, M.title HAVING Ra.stars = (     SELECT MIN(stars)     FROM Rating     WHERE rID = R.rID );
Error: 第 2506 个样本有 2 个SQL。
SELECT M.title, R.stars FROM (     SELECT director, MIN(R.stars) AS min_stars     FROM Movie M     JOIN Rating R ON M.mID = R.mID     GROUP BY director ) AS MinStars JOIN Movie M ON MinStars.director = M.director JOIN Rating R ON M.mID = R.mID WHERE R.stars = MinStars.min_stars;
Error: 第 2508 个样本有 2 个SQL。
SELECT title  FROM Movie  WHERE mID IN (     SELECT mID      FROM Rating      GROUP BY mID      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Movie.title  FROM Movie  JOIN Rating ON Movie.mID = Rating.mID  WHERE Rating.stars BETWEEN 3 AND 5;
SELECT Movie.title  FROM Movie  JOIN Rating ON Movie.mID = Rating.mID  WHERE Rating.stars BETWEEN 3 AND 5;
SELECT DISTINCT R.name  FROM Reviewer R, Rating Ra  WHERE R.rID = Ra.rID AND Ra.stars > 3;
SELECT DISTINCT R.name  FROM Reviewer R, Rating Ra  WHERE R.rID = Ra.rID AND Ra.stars > 3;
SELECT Movie.title, AVG(Rating.stars) as average_rating FROM Movie JOIN Rating ON Movie.mID = Rating.mID WHERE Rating.rID NOT IN (     SELECT Reviewer.rID     FROM Reviewer     WHERE Reviewer.name = 'Brittany Harris' ) GROUP BY Movie.title;
SELECT Movie.mID, title, AVG(stars) as avg_rating  FROM Movie  LEFT JOIN Rating ON Movie.mID = Rating.mID  WHERE Movie.mID NOT IN (     SELECT mID      FROM Rating      INNER JOIN Reviewer ON Rating.rID = Reviewer.rID      WHERE name = 'Brittany Harris' ) GROUP BY Movie.mID, title;
SELECT mID  FROM Movie  WHERE mID NOT IN (     SELECT T1.mID      FROM Rating AS T1      JOIN Reviewer AS T2      ON T1.rID = T2.rID      WHERE T2.name = 'Brittany Harris' )
SELECT m.mID  FROM Movie m  LEFT JOIN Rating r ON m.mID = r.mID  LEFT JOIN Reviewer rv ON r.rID = rv.rID  WHERE rv.name != 'Brittany Harris' OR rv.name IS NULL GROUP BY m.mID;
SELECT m.title, AVG(r.stars) as average_rating FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.mID HAVING COUNT(r.rID) >= 2;
SELECT Movie.mID, title, AVG(Rating.stars) as average_rating FROM Movie JOIN Rating ON Movie.mID = Rating.mID GROUP BY Movie.mID, title HAVING COUNT(Rating.rID) > 3;
SELECT rID FROM Reviewer WHERE rID NOT IN (SELECT rID FROM Rating WHERE stars = 4)
SELECT rID FROM Reviewer WHERE rID NOT IN (SELECT rID FROM Rating WHERE stars = 4)
Error: 第 2523 个样本有 2 个SQL。
SELECT rID FROM Reviewer  WHERE rID NOT IN (SELECT rID FROM Rating WHERE stars = 4)
SELECT Movie.title  FROM Movie  WHERE Movie.year > 2000  UNION  SELECT Movie.title  FROM Movie, Rating, Reviewer  WHERE Movie.mID = Rating.mID AND Rating.rID = Reviewer.rID AND Reviewer.name = 'Brittany Harris';
SELECT Movie.title  FROM Movie  WHERE Movie.year > 2000  UNION  SELECT Movie.title  FROM Movie, Rating, Reviewer  WHERE Rating.mID = Movie.mID AND Rating.rID = Reviewer.rID AND Reviewer.name = 'Brittany Harris';
SELECT title FROM Movie WHERE year < 1980 OR director = 'James Cameron';
SELECT title FROM Movie WHERE year < 1980 OR director = 'James Cameron';
SELECT DISTINCT R.name  FROM Reviewer R  JOIN Rating Ra ON R.rID = Ra.rID  WHERE Ra.stars IN (3, 4);
SELECT DISTINCT R.name  FROM Reviewer R, Rating Ra  WHERE R.rID = Ra.rID AND Ra.stars IN (3, 4);
SELECT T1.title  FROM Movie AS T1  JOIN Rating AS T2 ON T1.mID = T2.mID  WHERE T2.stars IN (3,4) GROUP BY T1.title;
SELECT Movie.title  FROM Movie  JOIN Rating ON Movie.mID = Rating.mID  WHERE Rating.stars IN (3, 4)
SELECT COUNT(*) FROM county_public_safety;
SELECT COUNT(DISTINCT Name) FROM county_public_safety;
SELECT Name  FROM county_public_safety  ORDER BY Population DESC;
SELECT Name  FROM county_public_safety  ORDER BY Population DESC;
SELECT DISTINCT Police_force  FROM county_public_safety  WHERE Location != 'East Side'
SELECT DISTINCT Police_force  FROM county_public_safety  WHERE Location != 'East';
SELECT MIN(Crime_rate) AS Min_Crime_Rate, MAX(Crime_rate) AS Max_Crime_Rate FROM county_public_safety;
SELECT MIN(Crime_rate) AS Min_Crime_Rate, MAX(Crime_rate) AS Max_Crime_Rate FROM county_public_safety;
SELECT Crime_rate  FROM county_public_safety  ORDER BY Police_officers ASC;
SELECT Crime_rate  FROM county_public_safety  ORDER BY Police_officers ASC;
SELECT Name  FROM city  ORDER BY Name ASC;
SELECT Name  FROM city  ORDER BY Name;
Error: 第 2545 个样本有 2 个SQL。
Error: 第 2546 个样本有 2 个SQL。
SELECT Name  FROM county_public_safety  ORDER BY Population DESC  LIMIT 1;
SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1;
SELECT Name  FROM city  ORDER BY White DESC  LIMIT 5;
SELECT Name  FROM city  ORDER BY White DESC  LIMIT 5;
SELECT city.Name AS City_Name, county_public_safety.Name AS County_Name  FROM city  JOIN county_public_safety ON city.County_ID = county_public_safety.County_ID;
SELECT city.Name AS City_Name, county_public_safety.Name AS County_Name  FROM city  JOIN county_public_safety ON city.County_ID = county_public_safety.County_ID;
SELECT city.White, county_public_safety.Crime_rate  FROM city  INNER JOIN county_public_safety ON city.County_ID = county_public_safety.County_ID;
SELECT city.White, county_public_safety.Crime_rate  FROM city  JOIN county_public_safety ON city.County_ID = county_public_safety.County_ID;
SELECT T2.Name  FROM county_public_safety AS T1  JOIN city AS T2 ON T1.County_ID = T2.County_ID  WHERE T1.Police_officers = (SELECT MAX(Police_officers) FROM county_public_safety)
SELECT T2.Name FROM county_public_safety AS T1 JOIN city AS T2 ON T1.County_ID = T2.County_ID WHERE T1.Police_officers = (SELECT MAX(Police_officers) FROM county_public_safety)
SELECT COUNT(*)  FROM city  WHERE County_ID IN (SELECT County_ID FROM county_public_safety WHERE Population > 20000);
SELECT COUNT(*)  FROM city  WHERE County_ID IN (SELECT County_ID       FROM county_public_safety       WHERE Population > 20000)
SELECT cps.Crime_rate  FROM county_public_safety cps JOIN city c ON cps.County_ID = c.County_ID WHERE c.White > 90;
SELECT cps.Crime_rate  FROM county_public_safety cps JOIN city c ON cps.County_ID = c.County_ID WHERE c.White > 90;
SELECT Police_force, COUNT(County_ID)  FROM county_public_safety  GROUP BY Police_force;
SELECT Police_force, COUNT(County_ID)  FROM county_public_safety  GROUP BY Police_force;
SELECT Location, COUNT(*) AS County_Count FROM county_public_safety GROUP BY Location ORDER BY County_Count DESC LIMIT 1;
SELECT Location, COUNT(*) AS County_Count FROM county_public_safety GROUP BY Location ORDER BY County_Count DESC LIMIT 1;
SELECT Name  FROM county_public_safety  WHERE County_ID NOT IN (SELECT County_ID FROM city)
SELECT Name  FROM county_public_safety  WHERE County_ID NOT IN (SELECT County_ID FROM city)
SELECT Police_force FROM county_public_safety WHERE Location = 'East' OR Location = 'West';
SELECT pf.Name  FROM county_public_safety cps1  JOIN county_public_safety cps2 ON cps1.Police_force = cps2.Police_force  WHERE cps1.Location = 'East' AND cps2.Location = 'West' GROUP BY cps1.Police_force HAVING COUNT(*) > 1
SELECT city.Name  FROM city  JOIN county_public_safety ON city.County_ID = county_public_safety.County_ID  WHERE county_public_safety.Crime_rate < 100;
SELECT T2.Name  FROM county_public_safety AS T1  JOIN city AS T2 ON T1.County_ID = T2.County_ID  WHERE T1.Crime_rate < 100;
SELECT County_ID, Name, Case_burden  FROM county_public_safety  ORDER BY Population DESC;
SELECT County_ID, Case_burden  FROM county_public_safety  ORDER BY Population DESC;
SELECT roomName FROM Rooms WHERE decor = 'modern' AND basePrice < 160 AND beds = 2;
SELECT roomName FROM Rooms WHERE decor = 'modern' AND basePrice < 160 AND beds = 2;
SELECT RoomId, roomName  FROM Rooms  WHERE basePrice > 160 AND maxOccupancy > 2;
SELECT RoomId, roomName  FROM Rooms  WHERE basePrice > 160 AND maxOccupancy > 2;
SELECT R.RoomId, R.roomName, COUNT(*) AS NumberOfReservations FROM Rooms R JOIN Reservations Res ON R.RoomId = Res.Room GROUP BY R.RoomId, R.roomName ORDER BY NumberOfReservations DESC LIMIT 1;
SELECT R.RoomId, R.roomName, COUNT(*) AS NumberOfReservations FROM Rooms R JOIN Reservations Res ON R.RoomId = Res.Room GROUP BY R.RoomId, R.roomName ORDER BY NumberOfReservations DESC LIMIT 1;
SELECT SUM(Kids)  FROM Reservations  WHERE FirstName = 'ROY' AND LastName = 'SWEAZY';
SELECT SUM(Kids)  FROM Reservations  WHERE FirstName = 'ROY' AND LastName = 'SWEAZ';
SELECT COUNT(*)  FROM Reservations  WHERE FirstName = 'ROY' AND LastName = 'SWEAZY';
SELECT COUNT(*)  FROM Reservations  WHERE FirstName = 'ROY' AND LastName = 'SWEAZY';
SELECT R.roomName, Res.Rate, Res.CheckIn, Res.CheckOut  FROM Reservations AS Res  JOIN Rooms AS R ON Res.Room = R.RoomId  WHERE Res.Rate = (SELECT MAX(Rate) FROM Reservations);
SELECT R.FirstName, R.LastName, Reservations.Rate, Reservations.CheckIn, Reservations.CheckOut  FROM Reservations  JOIN Rooms AS R ON Reservations.Room = R.RoomId  WHERE Reservations.Rate = (SELECT MAX(Rate) FROM Reservations);
SELECT Adults FROM Reservations WHERE FirstName = 'CONRAD' AND LastName = 'SELBIG' AND CheckIn = '2010-10-23';
SELECT Adults  FROM Reservations  WHERE FirstName = 'CONRAD'  AND LastName = 'SELBIG'  AND CheckIn = '2010-10-23';
SELECT Kids FROM Reservations WHERE FirstName = 'DAMIAEN' AND LastName = 'TRACHSEL' AND CheckIn = '2010-09-21';
Error: 第 2588 个样本有 2 个SQL。
SELECT COUNT(*)  FROM Rooms  WHERE bedType = 'King';
SELECT SUM(beds) AS TotalKingBeds  FROM Rooms  WHERE bedType = 'King';
SELECT roomName, decor  FROM Rooms  WHERE bedType = 'King'  ORDER BY basePrice;
SELECT roomName, decor  FROM Rooms  WHERE bedType = 'King'  ORDER BY basePrice;
SELECT roomName, basePrice  FROM Rooms  ORDER BY basePrice ASC  LIMIT 1;
SELECT roomName, basePrice  FROM Rooms  ORDER BY basePrice  LIMIT 1;
SELECT decor  FROM Rooms  WHERE roomName = 'Recluse and defiance';
SELECT decor  FROM Rooms  WHERE roomName = 'Recluse and defiance';
SELECT bedType, AVG(basePrice)  FROM Rooms  GROUP BY bedType;
SELECT bedType, AVG(basePrice)  FROM Rooms  GROUP BY bedType;
SELECT SUM(maxOccupancy)  FROM Rooms  WHERE decor = 'modern';
SELECT SUM(maxOccupancy)  FROM Rooms  WHERE decor = 'modern';
SELECT R.decor FROM Rooms R JOIN Reservations Res ON R.RoomId = Res.Room GROUP BY R.decor ORDER BY COUNT(*) ASC LIMIT 1;
SELECT decor  FROM Rooms  WHERE RoomId NOT IN (     SELECT Room      FROM Reservations      GROUP BY Room      ORDER BY COUNT(*) DESC      LIMIT 1 )  LIMIT 1;
SELECT COUNT(*)  FROM Reservations R, Rooms M  WHERE R.Room = M.RoomId AND (R.Adults + R.Kids) = M.maxOccupancy;
SELECT COUNT(*)  FROM Reservations R, Rooms M  WHERE R.Room = M.RoomId AND R.Adults + R.Kids >= M.maxOccupancy;
SELECT FirstName, LastName  FROM Reservations  JOIN Rooms ON Reservations.Room = Rooms.RoomId  WHERE Rate > BasePrice;
SELECT FirstName, LastName  FROM Reservations  JOIN Rooms  ON Reservations.Room = Rooms.RoomId  WHERE Rate > BasePrice;
SELECT COUNT(*) FROM Rooms;
SELECT COUNT(*) FROM Rooms;
SELECT COUNT(*)  FROM Rooms  WHERE bedType = 'King';
SELECT COUNT(*)  FROM Rooms  WHERE bedType = 'King';
SELECT bedType, COUNT(*) as NumOfRooms FROM Rooms GROUP BY bedType;
SELECT bedType, COUNT(*) as NumOfRooms FROM Rooms GROUP BY bedType;
SELECT roomName FROM Rooms WHERE maxOccupancy = (SELECT MAX(maxOccupancy) FROM Rooms);
SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;
SELECT RoomId, roomName  FROM Rooms  ORDER BY basePrice DESC  LIMIT 1;
SELECT roomName FROM Rooms WHERE basePrice = (SELECT MAX(basePrice) FROM Rooms);
SELECT bedType, roomName  FROM Rooms  WHERE decor = 'traditional';
SELECT roomName, bedType  FROM Rooms  WHERE decor = 'traditional';
SELECT decor, COUNT(*) AS NumberOfRooms  FROM Rooms  WHERE bedType = 'King'  GROUP BY decor;
SELECT decor, COUNT(*) AS NumberOfRooms  FROM Rooms  WHERE bedType = 'King'  GROUP BY decor;
SELECT decor, AVG(basePrice) AS Average_Price, MIN(basePrice) AS Minimum_Price FROM Rooms GROUP BY decor;
SELECT decor, AVG(basePrice) AS Average_Price FROM Rooms GROUP BY decor;
SELECT roomName  FROM Rooms  ORDER BY basePrice;
SELECT roomName  FROM Rooms  ORDER BY basePrice;
SELECT decor, COUNT(*) as NumberOfRooms FROM Rooms WHERE basePrice > 120 GROUP BY decor;
SELECT decor, COUNT(*) as NumberOfRooms FROM Rooms WHERE basePrice > 120 GROUP BY decor;
SELECT bedType, AVG(basePrice)  FROM Rooms  GROUP BY bedType;
SELECT bedType, AVG(basePrice)  FROM Rooms  GROUP BY bedType;
SELECT roomName  FROM Rooms  WHERE bedType IN ('king', 'queen');
SELECT roomName  FROM Rooms  WHERE bedType IN ('king', 'queen');
SELECT COUNT(DISTINCT bedType) FROM Rooms;
SELECT COUNT(DISTINCT bedType) FROM Rooms;
SELECT RoomId, roomName  FROM Rooms  ORDER BY basePrice DESC  LIMIT 3;
SELECT roomName, RoomId FROM Rooms ORDER BY basePrice DESC LIMIT 3;
SELECT roomName  FROM Rooms  WHERE basePrice > (SELECT AVG(basePrice) FROM Rooms);
SELECT roomName  FROM Rooms  WHERE basePrice > (SELECT AVG(basePrice) FROM Rooms);
SELECT COUNT(*)  FROM Rooms  WHERE RoomId NOT IN (SELECT Room FROM Reservations);
SELECT COUNT(*)  FROM Rooms  WHERE RoomId NOT IN (SELECT Room FROM Reservations)
SELECT R.roomName, COUNT(*) AS NumberOfReservations FROM Rooms R JOIN Reservations Res ON R.RoomId = Res.Room GROUP BY R.roomName;
SELECT R.roomName, COUNT(*) as ReservationCount FROM Rooms R JOIN Reservations Res ON R.RoomId = Res.Room GROUP BY R.roomName;
SELECT R.roomName FROM Rooms R JOIN Reservations Res ON R.RoomId = Res.Room GROUP BY R.roomName HAVING COUNT(Res.Code) > 60;
SELECT R.roomName  FROM Rooms R JOIN Reservations Res ON R.RoomId = Res.Room GROUP BY R.roomName HAVING COUNT(Res.Code) > 60;
SELECT roomName FROM Rooms WHERE basePrice BETWEEN 120 AND 150;
SELECT roomName  FROM Rooms  WHERE basePrice BETWEEN 120 AND 150;
SELECT R.roomName  FROM Rooms R  JOIN Reservations Res  ON R.RoomId = Res.Room  WHERE Res.FirstName LIKE '%ROY%';
SELECT R.roomName  FROM Rooms R  JOIN Reservations Res  ON R.RoomId = Res.Room  WHERE Res.FirstName LIKE '%ROY%';
SELECT cmi_details FROM Customer_Master_Index WHERE master_customer_id IN (SELECT master_customer_id FROM CMI_Cross_References WHERE source_system_code = 'Tax');
SELECT cr.cmi_cross_ref_id, cr.source_system_code FROM CMI_Cross_References cr JOIN Council_Tax ct ON cr.cmi_cross_ref_id = ct.cmi_cross_ref_id GROUP BY cr.cmi_cross_ref_id, cr.source_system_code;
SELECT      cmi_cr.cmi_cross_ref_id,      cmi_cr.master_customer_id,      COUNT(br.business_rates_id) as num_of_business_rates FROM      CMI_Cross_References cmi_cr JOIN      Business_Rates br ON cmi_cr.cmi_cross_ref_id = br.cmi_cross_ref_id GROUP BY      cmi_cr.cmi_cross_ref_id,      cmi_cr.master_customer_id;
SELECT      cr.source_system_code,      bo.council_tax_id FROM      Benefits_Overpayments bo JOIN      CMI_Cross_References cr ON bo.cmi_cross_ref_id = cr.cmi_cross_ref_id ORDER BY      bo.council_tax_id;
SELECT P.parking_fines_id, C.cmi_cross_ref_id, C.source_system_code  FROM Parking_Fines P  JOIN CMI_Cross_References C ON P.cmi_cross_ref_id = C.cmi_cross_ref_id;
SELECT Rent_Arrears.council_tax_id  FROM Rent_Arrears  JOIN CMI_Cross_References ON Rent_Arrears.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id  JOIN Customer_Master_Index ON CMI_Cross_References.master_customer_id = Customer_Master_Index.master_customer_id  WHERE Customer_Master_Index.cmi_details != 'Schmidt, Kertzmann and Lubowitz';
SELECT er.electoral_register_id  FROM Electoral_Register er JOIN CMI_Cross_References ccr ON er.cmi_cross_ref_id = ccr.cmi_cross_ref_id WHERE ccr.source_system_code IN ('Electoral', 'Tax');
SELECT COUNT(DISTINCT source_system_code)  FROM CMI_Cross_References;
SELECT * FROM Customer_Master_Index ORDER BY cmi_details DESC;
SELECT T1.council_tax_id, T2.cmi_cross_ref_id  FROM Parking_Fines AS T1  JOIN Council_Tax AS T2 ON T1.council_tax_id = T2.council_tax_id;
SELECT COUNT(*)  FROM Council_Tax ct JOIN CMI_Cross_References ccr ON ct.cmi_cross_ref_id = ccr.cmi_cross_ref_id JOIN Rent_Arrears ra ON ra.cmi_cross_ref_id = ccr.cmi_cross_ref_id;
SELECT DISTINCT CCI.source_system_code  FROM CMI_Cross_References CCI JOIN Customer_Master_Index CMI ON CCI.master_customer_id = CMI.master_customer_id WHERE CMI.cmi_details = 'Gottlieb, Becker and Wyman';
SELECT cmi_cross_ref_id  FROM CMI_Cross_References  WHERE cmi_cross_ref_id NOT IN (SELECT cmi_cross_ref_id FROM Parking_Fines)
SELECT DISTINCT source_system_code  FROM CMI_Cross_References  WHERE source_system_code LIKE '%en%';
SELECT COUNT(*) FROM party;
SELECT COUNT(*) FROM party;
SELECT Party_Theme  FROM party  ORDER BY Number_of_hosts ASC;
Error: 第 2664 个样本有 2 个SQL。
SELECT Party_Theme, Location FROM party;
SELECT Party_Theme, Location FROM party;
SELECT First_year, Last_year  FROM party  WHERE Party_Theme = 'Spring' OR Party_Theme = 'Technology';
SELECT First_year, Last_year  FROM party  WHERE Party_Theme = 'Spring' OR Party_Theme = 'Technology';
SELECT AVG(Number_of_hosts)  FROM party;
SELECT AVG(Number_of_hosts)  FROM party;
SELECT T1.Location  FROM party AS T1  JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID  GROUP BY T1.Party_ID  ORDER BY COUNT(T2.Host_ID) DESC  LIMIT 1
SELECT T1.Location  FROM party AS T1  JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID  GROUP BY T1.Party_ID  ORDER BY COUNT(T2.Host_ID) DESC  LIMIT 1;
SELECT Nationality, COUNT(*) AS NumberOfHosts FROM host GROUP BY Nationality;
SELECT Nationality, COUNT(*)  FROM host  GROUP BY Nationality;
SELECT Nationality, COUNT(*) as count  FROM host  GROUP BY Nationality  ORDER BY count DESC  LIMIT 1;
SELECT Nationality, COUNT(*) AS Count_Hosts FROM host GROUP BY Nationality ORDER BY Count_Hosts DESC LIMIT 1;
SELECT Nationality  FROM host  WHERE Age > 45  INTERSECT  SELECT Nationality  FROM host  WHERE Age < 35;
SELECT Nationality  FROM host  WHERE Age > 45  INTERSECT  SELECT Nationality  FROM host  WHERE Age < 35;
SELECT party.Party_Theme, host.Name  FROM party  JOIN party_host ON party.Party_ID = party_host.Party_ID  JOIN host ON party_host.Host_ID = host.Host_ID;
SELECT p.Party_Theme, h.Name  FROM party p  JOIN party_host ph ON p.Party_ID = ph.Party_ID  JOIN host h ON ph.Host_ID = h.Host_ID;
SELECT p.Location, h.Name  FROM party AS p  JOIN party_host AS ph ON p.Party_ID = ph.Party_ID  JOIN host AS h ON h.Host_ID = ph.Host_ID  ORDER BY h.Age ASC;
SELECT p.Location, h.Name  FROM party p  JOIN party_host ph ON p.Party_ID = ph.Party_ID  JOIN host h ON h.Host_ID = ph.Host_ID  ORDER BY h.Age ASC;
SELECT p.Location  FROM party p  JOIN party_host ph ON p.Party_ID = ph.Party_ID  JOIN host h ON h.Host_ID = ph.Host_ID  WHERE h.Age > 50;
SELECT T1.Location  FROM party AS T1  JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID  JOIN host AS T3 ON T2.Host_ID = T3.Host_ID  WHERE T3.Age > 50;
SELECT h.Name  FROM host h  JOIN party_host ph ON h.Host_ID = ph.Host_ID  JOIN party p ON ph.Party_ID = p.Party_ID  WHERE p.Number_of_hosts > 20;
SELECT p.Party_Theme, h.Name FROM party p JOIN party_host ph ON p.Party_ID = ph.Party_ID JOIN host h ON ph.Host_ID = h.Host_ID GROUP BY p.Party_Theme, h.Name HAVING COUNT(h.Host_ID) > 20;
SELECT Name, Nationality FROM host WHERE Age = (SELECT MAX(Age) FROM host);
SELECT Name, Nationality  FROM host  WHERE Age = (SELECT MAX(Age) FROM host);
SELECT Name  FROM host  WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)
SELECT Name  FROM host  WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)
SELECT COUNT(*) FROM region;
SELECT COUNT(*) FROM region;
SELECT Region_code, Region_name  FROM region  ORDER BY Region_code;
SELECT Region_code, Region_name  FROM region  ORDER BY Region_code;
SELECT Region_name  FROM region  ORDER BY Region_name ASC;
SELECT Region_name  FROM region  ORDER BY Region_name ASC;
SELECT Region_name  FROM region  WHERE Region_name != 'Denmark';
SELECT Region_name  FROM region  WHERE Region_name <> 'Denmark';
SELECT COUNT(*)  FROM storm  WHERE Number_Deaths > 0;
SELECT COUNT(*)  FROM storm  WHERE Number_Deaths > 0;
SELECT Name, Dates_active, Number_Deaths  FROM storm  WHERE Number_Deaths >= 1;
SELECT Name, Dates_active, Number_Deaths  FROM storm  WHERE Number_Deaths >= 1;
SELECT AVG(Damage_millions_USD), MAX(Damage_millions_USD)  FROM storm  WHERE Max_speed > 1000;
SELECT AVG(Damage_millions_USD), MAX(Damage_millions_USD)  FROM storm  WHERE Max_speed > 1000;
SELECT SUM(Number_Deaths) AS Total_Deaths, SUM(Damage_millions_USD) AS Total_Damage FROM storm WHERE Max_speed > (SELECT AVG(Max_speed) FROM storm);
SELECT SUM(Number_Deaths) AS Total_Deaths, SUM(Damage_millions_USD) AS Total_Damage FROM storm WHERE Max_speed > (SELECT AVG(Max_speed) FROM storm);
SELECT Name, Damage_millions_USD  FROM storm  ORDER BY Max_speed DESC;
SELECT Name, Damage_millions_USD  FROM storm  ORDER BY Max_speed DESC;
SELECT COUNT(DISTINCT Region_id) FROM affected_region;
SELECT COUNT(DISTINCT Region_id) FROM affected_region;
SELECT Region_name  FROM region  WHERE Region_id NOT IN (SELECT Region_id FROM affected_region)
SELECT Region_name  FROM region  WHERE Region_id NOT IN (SELECT Region_id FROM affected_region);
SELECT R.Region_name, COUNT(S.Storm_ID) AS Number_of_storms FROM region R JOIN affected_region AR ON R.Region_id = AR.Region_id JOIN storm S ON AR.Storm_ID = S.Storm_ID GROUP BY R.Region_name;
SELECT r.Region_name, COUNT(s.Storm_ID) AS NumberOfStorms FROM region r JOIN affected_region ar ON r.Region_id = ar.Region_id JOIN storm s ON ar.Storm_ID = s.Storm_ID GROUP BY r.Region_name;
SELECT storm.Name, COUNT(affected_region.Region_id) AS Number_of_Affected_Regions FROM storm  JOIN affected_region ON storm.Storm_ID = affected_region.Storm_ID GROUP BY storm.Name;
SELECT Storm_ID, COUNT(Region_id) as Number_of_Regions_Affected FROM affected_region GROUP BY Storm_ID;
SELECT s.Name, s.Max_speed  FROM storm s JOIN (   SELECT Storm_ID, COUNT(*) as num_regions   FROM affected_region   GROUP BY Storm_ID   ORDER BY num_regions DESC   LIMIT 1 ) a ON s.Storm_ID = a.Storm_ID;
SELECT s.Name, s.Max_speed  FROM storm s WHERE s.Storm_ID = (     SELECT a.Storm_ID      FROM (         SELECT Storm_ID, COUNT(DISTINCT Region_id) as num_regions          FROM affected_region          GROUP BY Storm_ID     ) a     ORDER BY num_regions DESC      LIMIT 1 );
SELECT Name  FROM storm  WHERE Storm_ID NOT IN (SELECT Storm_ID FROM affected_region)
SELECT Name  FROM storm  WHERE Storm_ID NOT IN (SELECT Storm_ID FROM affected_region)
SELECT s.Name  FROM storm s JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID  GROUP BY s.Name  HAVING COUNT(DISTINCT ar.Region_id) >= 2 AND SUM(ar.Number_city_affected) >= 10;
SELECT s.Name  FROM storm s JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID  GROUP BY s.Name  HAVING COUNT(DISTINCT ar.Region_id) >= 2 AND SUM(ar.Number_city_affected) >= 10;
SELECT Name  FROM storm  WHERE Storm_ID NOT IN (     SELECT Storm_ID      FROM (         SELECT Storm_ID, COUNT(Region_id) as num_regions          FROM affected_region          GROUP BY Storm_ID     ) as temp      WHERE num_regions >= 2 )
SELECT s.Name  FROM storm s LEFT JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID GROUP BY s.Storm_ID HAVING COUNT(ar.Region_id) < 2;
SELECT DISTINCT r.Region_name FROM region r JOIN affected_region ar ON r.Region_id = ar.Region_id JOIN storm s ON ar.Storm_ID = s.Storm_ID WHERE s.Number_Deaths >= 10;
SELECT r.Region_name  FROM region r  JOIN affected_region ar ON r.Region_id = ar.Region_id  JOIN storm s ON ar.Storm_ID = s.Storm_ID  WHERE s.Number_Deaths >= 10;
SELECT s.Name  FROM storm s JOIN affected_region ar ON s.Storm_ID = ar.Storm_ID JOIN region r ON ar.Region_id = r.Region_id WHERE r.Region_name = 'Denmark';
SELECT storm.Name FROM storm  JOIN affected_region ON storm.Storm_ID = affected_region.Storm_ID  JOIN region ON affected_region.Region_id = region.Region_id  WHERE region.Region_name = 'Denmark';
SELECT R.Region_name  FROM region R  JOIN affected_region AR ON R.Region_id = AR.Region_id  JOIN storm S ON AR.Storm_ID = S.Storm_ID  GROUP BY R.Region_name  HAVING COUNT(S.Storm_ID) >= 2;
SELECT R.Region_name  FROM region R JOIN affected_region AR ON R.Region_id = AR.Region_id GROUP BY R.Region_id, R.Region_name HAVING COUNT(AR.Storm_ID) >= 2;
SELECT r.Region_name  FROM region r  JOIN affected_region ar ON r.Region_id = ar.Region_id  JOIN storm s ON ar.Storm_ID = s.Storm_ID  WHERE s.Number_Deaths = (SELECT MAX(Number_Deaths) FROM storm);
SELECT r.Region_name  FROM region r  JOIN affected_region ar ON r.Region_id = ar.Region_id  JOIN storm s ON ar.Storm_ID = s.Storm_ID  WHERE s.Number_Deaths = (SELECT MAX(Number_Deaths) FROM storm);
SELECT s.Name  FROM storm s  JOIN affected_region ar1 ON s.Storm_ID = ar1.Storm_ID  JOIN region r1 ON ar1.Region_id = r1.Region_id  JOIN affected_region ar2 ON s.Storm_ID = ar2.Storm_ID  JOIN region r2 ON ar2.Region_id = r2.Region_id  WHERE r1.Region_name = 'Afghanistan' AND r2.Region_name = 'Albania';
SELECT s.Name  FROM storm s JOIN affected_region ar1 ON s.Storm_ID = ar1.Storm_ID  JOIN region r1 ON ar1.Region_id = r1.Region_id JOIN affected_region ar2 ON s.Storm_ID = ar2.Storm_ID  JOIN region r2 ON ar2.Region_id = r2.Region_id WHERE r1.Region_name = 'Afghanistan' AND r2.Region_name = 'Albania' GROUP BY s.Name;
SELECT COUNT(*) FROM county;
SELECT COUNT(*) FROM county;
SELECT County_name, Population FROM county;
SELECT County_name, Population FROM county;
SELECT AVG(Population) FROM county;
SELECT AVG(Population) FROM county;
SELECT MAX(Population) as Max_Population, MIN(Population) as Min_Population FROM county;
SELECT MAX(Population) AS Max_Population, MIN(Population) AS Min_Population FROM county;
SELECT DISTINCT District FROM election;
SELECT DISTINCT District FROM election;
SELECT Zip_code FROM county WHERE County_name = "Howard";
SELECT Zip_code FROM county WHERE County_name = 'Howard';
SELECT Delegate FROM election WHERE District = 1;
SELECT Delegate  FROM election  WHERE District = 1;
SELECT Delegate, Committee FROM election;
SELECT Delegate, Committee FROM election;
SELECT COUNT(DISTINCT Governor) FROM party;
SELECT COUNT(DISTINCT Governor) FROM party;
SELECT Lieutenant_Governor, Comptroller  FROM party  WHERE Party = 'Democratic'
SELECT Lieutenant_Governor, Comptroller  FROM party  WHERE Party = 'Democratic'
SELECT DISTINCT Year  FROM party  WHERE Governor = 'Eliot Spitzer';
SELECT DISTINCT Year  FROM party  WHERE Governor = 'Eliot Spitzer';
SELECT * FROM election;
SELECT * FROM election;
SELECT election.Delegate, county.County_name  FROM election  JOIN county ON election.Counties_Represented = county.County_Id;
SELECT e.Delegate, c.County_name  FROM election AS e  JOIN county AS c ON e.Counties_Represented = c.County_Id;
SELECT DISTINCT e.Delegate  FROM election e JOIN county c ON e.Counties_Represented = c.County_name  WHERE c.Population < 100000;
SELECT DISTINCT e.Delegate FROM election e JOIN county c ON e.Counties_Represented = c.County_name WHERE c.Population < 100000;
SELECT COUNT(DISTINCT T3.Delegate)  FROM county AS T1  JOIN election AS T3 ON T1.County_Id = T3.Counties_Represented  WHERE T1.Population > 50000;
SELECT COUNT(DISTINCT T3.Delegate)  FROM county AS T1  JOIN election AS T3 ON T1.County_Id = T3.Counties_Represented  WHERE T1.Population > 50000;
SELECT T1.County_name  FROM county AS T1  JOIN election AS T2 ON T1.County_Id = T2.Counties_Represented  WHERE T2.Committee = 'Appropriations'
SELECT T1.County_name  FROM county AS T1  JOIN election AS T2 ON T1.County_Id = T2.Counties_Represented  WHERE T2.Committee = 'Appropriations';
SELECT Delegate, Party  FROM election;
Error: 第 2768 个样本有 2 个SQL。
SELECT T2.Governor  FROM election AS T1  JOIN party AS T2 ON T1.Party = T2.Party_ID  WHERE T1.District = 1;
SELECT p.Governor FROM election e JOIN party p ON e.Party = p.Party_ID WHERE e.District = 1;
SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District IN (1, 2)
SELECT e.Delegate, p.Comptroller FROM election e JOIN party p ON e.Party = p.Party_ID WHERE e.District IN (1, 2)
SELECT DISTINCT Committee  FROM election  WHERE Party = 'Democratic';
SELECT DISTINCT Committee  FROM election  WHERE Party = 'Democratic';
SELECT C.County_name, COUNT(E.Delegate) AS NumberOfDelegates FROM county C JOIN election E ON C.County_Id = E.Counties_Represented GROUP BY C.County_name;
SELECT C.County_name, COUNT(E.Delegate) AS Num_Delegates FROM county C JOIN election E ON C.County_Id = E.Counties_Represented GROUP BY C.County_name;
SELECT T2.Party, COUNT(T1.Delegate)  FROM election AS T1  JOIN party AS T2  ON T1.Party = T2.Party_ID  GROUP BY T2.Party;
SELECT Party, COUNT(DISTINCT Delegate)  FROM election  GROUP BY Party;
SELECT County_name FROM county ORDER BY Population ASC;
SELECT County_name FROM county ORDER BY Population ASC;
SELECT County_name FROM county ORDER BY County_name DESC;
SELECT County_name FROM county ORDER BY County_name DESC;
SELECT County_name  FROM county  ORDER BY Population DESC  LIMIT 1;
SELECT County_name  FROM county  ORDER BY Population DESC  LIMIT 1;
SELECT County_name  FROM county  ORDER BY Population ASC  LIMIT 3;
SELECT County_name  FROM county  ORDER BY Population ASC  LIMIT 3;
SELECT T1.County_name  FROM county AS T1  JOIN election AS T2 ON T1.County_Id = T2.Counties_Represented  GROUP BY T1.County_name  HAVING COUNT(T2.Delegate) >= 2;
SELECT c.County_name FROM county c JOIN election e ON c.County_Id = e.Counties_Represented GROUP BY c.County_name HAVING COUNT(e.Delegate) >= 2;
SELECT Party  FROM party  GROUP BY Party  HAVING COUNT(*) >= 2;
SELECT Party  FROM election  GROUP BY Party  HAVING COUNT(*) >= 2;
SELECT T2.Party  FROM election AS T1  JOIN party AS T2  ON T1.Party = T2.Party_ID  GROUP BY T2.Party  ORDER BY COUNT(T1.Delegate) DESC  LIMIT 1;
SELECT T2.Party  FROM election AS T1  JOIN party AS T2  ON T1.Party = T2.Party_ID  GROUP BY T2.Party  ORDER BY COUNT(T1.Delegate) DESC  LIMIT 1
SELECT Governor, COUNT(*) AS Times_Governor  FROM party  GROUP BY Governor  ORDER BY Times_Governor DESC  LIMIT 1;
SELECT Governor, COUNT(*) AS Frequency  FROM party  GROUP BY Governor  ORDER BY Frequency DESC  LIMIT 1;
SELECT Comptroller, COUNT(Comptroller) AS Times FROM party GROUP BY Comptroller ORDER BY Times DESC LIMIT 1;
SELECT Comptroller, COUNT(*) AS Frequency  FROM party  GROUP BY Comptroller  ORDER BY Frequency DESC  LIMIT 1;
SELECT Party  FROM party  WHERE Party NOT IN (SELECT Party FROM election)
Error: 第 2798 个样本有 2 个SQL。
Error: 第 2799 个样本有 2 个SQL。
SELECT T1.Party  FROM party AS T1  JOIN election AS T2  ON T1.Party_ID = T2.Party  WHERE T2.Committee = 'Appropriations'  INTERSECT  SELECT T1.Party  FROM party AS T1  JOIN election AS T2  ON T1.Party_ID = T2.Party  WHERE T2.Committee = 'Economic Matters'
SELECT T1.Committee  FROM election AS T1  JOIN party AS T2 ON T1.Party = T2.Party_ID  WHERE T2.Party = 'Democratic'  INTERSECT  SELECT T1.Committee  FROM election AS T1  JOIN party AS T2 ON T1.Party = T2.Party_ID  WHERE T2.Party = 'Liberal'
SELECT T1.Committee  FROM election AS T1  JOIN party AS T2 ON T1.Party = T2.Party_ID  WHERE T2.Party = 'Democratic'  INTERSECT  SELECT T1.Committee  FROM election AS T1  JOIN party AS T2 ON T1.Party = T2.Party_ID  WHERE T2.Party = 'Liberal'
SELECT COUNT(*) FROM journalist;
SELECT Name  FROM journalist  ORDER BY Years_working ASC;
SELECT Nationality, Age FROM journalist;
SELECT Name  FROM journalist  WHERE Nationality IN ('England', 'Wales');
SELECT AVG(Years_working) FROM journalist;
SELECT Nationality  FROM journalist  ORDER BY Years_working DESC  LIMIT 1;
SELECT Nationality, COUNT(*) AS Num_of_Journalists FROM journalist GROUP BY Nationality;
SELECT Nationality, COUNT(Nationality) AS Count  FROM journalist  GROUP BY Nationality  ORDER BY Count DESC  LIMIT 1;
SELECT Nationality  FROM journalist  WHERE Years_working > 10  INTERSECT  SELECT Nationality  FROM journalist  WHERE Years_working < 3;
SELECT Date, Venue, Name  FROM event  ORDER BY Event_Attendance DESC;
SELECT j.Name, e.Date  FROM journalist j  JOIN news_report nr ON j.journalist_ID = nr.journalist_ID  JOIN event e ON nr.Event_ID = e.Event_ID;
SELECT journalist.Name, event.Name  FROM journalist  JOIN news_report ON journalist.journalist_ID = news_report.journalist_ID  JOIN event ON news_report.Event_ID = event.Event_ID  ORDER BY journalist.Name, event.Name ASC;
SELECT j.Name, COUNT(nr.Event_ID)  FROM journalist j  JOIN news_report nr ON j.journalist_ID = nr.journalist_ID  GROUP BY j.journalist_ID, j.Name;
SELECT j.Name  FROM journalist j  JOIN news_report nr ON j.journalist_ID = nr.journalist_ID  GROUP BY j.Name  HAVING COUNT(nr.Event_ID) > 1;
SELECT j.Name  FROM journalist j  LEFT JOIN news_report nr ON j.journalist_ID = nr.journalist_ID  WHERE nr.journalist_ID IS NULL
SELECT AVG(Event_Attendance) AS Average_Attendance, MAX(Event_Attendance) AS Maximum_Attendance  FROM event;
SELECT Work_Type, AVG(Age) as Average_Age, AVG(Years_working) as Average_Experience FROM journalist JOIN news_report ON journalist.journalist_ID = news_report.journalist_ID GROUP BY Work_Type;
SELECT Venue, Name  FROM event  ORDER BY Event_Attendance DESC  LIMIT 2;
SELECT * FROM Restaurant;
SELECT Address FROM Restaurant WHERE ResName = 'Subway';
SELECT Rating FROM Restaurant WHERE ResName = 'Subway';
Error: 第 2824 个样本有 2 个SQL。
SELECT ResTypeDescription  FROM Restaurant_Type  WHERE ResTypeName = 'Sandwich';
SELECT ResName, Rating  FROM Restaurant  WHERE Rating = (SELECT MAX(Rating) FROM Restaurant);
SELECT Age FROM Student WHERE Fname = 'Linda' AND LName = 'Smith';
SELECT Sex FROM Student WHERE Fname = 'Linda' AND LName = 'Smith';
SELECT Fname, LName  FROM Student  WHERE Major = 600;
SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith';
SELECT COUNT(*) FROM Student WHERE Advisor = 1121;
SELECT Advisor, COUNT(StuID) AS NumStudents FROM Student GROUP BY Advisor ORDER BY NumStudents DESC LIMIT 1;
SELECT Major, COUNT(*) AS NumStudents FROM Student GROUP BY Major ORDER BY NumStudents ASC LIMIT 1;
SELECT Major, COUNT(*) AS NumStudents  FROM Student  GROUP BY Major  HAVING NumStudents BETWEEN 2 AND 30;
SELECT Fname, LName  FROM Student  WHERE Age > 18 AND Major = 600;
SELECT Fname, LName  FROM Student  WHERE Sex = 'F' AND Age > 18 AND Major != 600;
SELECT COUNT(*)  FROM Type_Of_Restaurant  JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID  WHERE Restaurant_Type.ResTypeName = 'Sandwich';
Error: 第 2838 个样本有 2 个SQL。
SELECT COUNT(*)  FROM Visits_Restaurant  JOIN Student ON Visits_Restaurant.StuID = Student.StuID  JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID  WHERE Student.Fname = 'Linda' AND Student.LName = 'Smith' AND Restaurant.ResName = 'Subway';
SELECT vr.Time  FROM Visits_Restaurant vr  JOIN Student s ON vr.StuID = s.StuID  JOIN Restaurant r ON vr.ResID = r.ResID  WHERE s.Fname = 'Linda' AND s.LName = 'Smith' AND r.ResName = 'Subway';
SELECT R.ResName, SUM(VR.Spent) AS TotalTimeSpent  FROM Visits_Restaurant VR  JOIN Restaurant R ON VR.ResID = R.ResID  GROUP BY R.ResID  ORDER BY TotalTimeSpent ASC  LIMIT 1;
SELECT S.Fname, S.LName  FROM Student S JOIN Visits_Restaurant VR ON S.StuID = VR.StuID  GROUP BY S.StuID, S.Fname, S.LName  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT actual_order_id FROM Actual_Orders WHERE order_status_code = 'Success';
SELECT P.product_name, P.product_price FROM Products P JOIN Actual_Order_Products AOP ON P.product_id = AOP.product_id GROUP BY P.product_id, P.product_name, P.product_price ORDER BY COUNT(AOP.product_id) DESC LIMIT 1;
SELECT COUNT(*) FROM Customers;
SELECT COUNT(DISTINCT payment_method) FROM Customers;
SELECT * FROM Trucks ORDER BY truck_licence_number;
SELECT product_name  FROM Products  ORDER BY product_price DESC  LIMIT 1;
SELECT Customers.customer_name FROM Customers JOIN Customer_Addresses ON Customers.customer_id = Customer_Addresses.customer_id JOIN Addresses ON Customer_Addresses.address_id = Addresses.address_id WHERE Addresses.state_province_county <> 'California';
SELECT Customers.customer_name, Customers.customer_email  FROM Customers  WHERE Customers.payment_method = 'Visa';
SELECT Customers.customer_name, Customers.customer_phone  FROM Customers  JOIN Customer_Addresses ON Customers.customer_id = Customer_Addresses.customer_id  JOIN Addresses ON Customer_Addresses.address_id = Addresses.address_id  WHERE Addresses.state_province_county = 'California';
SELECT state_province_county  FROM Addresses  WHERE address_id NOT IN (     SELECT DISTINCT employee_address_id      FROM Employees ) GROUP BY state_province_county;
SELECT customer_name, customer_phone, customer_email  FROM Customers  ORDER BY date_became_customer;
SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5;
SELECT payment_method, COUNT(*) as frequency  FROM Customers  GROUP BY payment_method  ORDER BY frequency DESC  LIMIT 1;
SELECT route_name  FROM Delivery_Routes  ORDER BY route_name ASC;
SELECT dr.route_name, COUNT(od.location_code) as delivery_count FROM Delivery_Routes dr JOIN Delivery_Route_Locations drl ON dr.route_id = drl.route_id JOIN Order_Deliveries od ON drl.location_code = od.location_code GROUP BY dr.route_name ORDER BY delivery_count DESC LIMIT 1;
SELECT Addresses.state_province_county, COUNT(Customers.customer_id) AS num_of_customers FROM Addresses JOIN Customer_Addresses ON Addresses.address_id = Customer_Addresses.address_id JOIN Customers ON Customers.customer_id = Customer_Addresses.customer_id GROUP BY Addresses.state_province_county ORDER BY num_of_customers DESC;
SELECT COUNT(*) FROM Authors;
SELECT COUNT(*) FROM Authors;
SELECT COUNT(*) FROM Inst;
SELECT COUNT(*) FROM Inst;
SELECT COUNT(*) FROM Papers;
SELECT COUNT(*) FROM Papers;
SELECT p.title  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Authors au ON a.authID = au.authID  WHERE au.fname = 'Jeremy' AND au.lname = 'Gibbons';
SELECT p.title  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Authors au ON a.authID = au.authID  WHERE au.fname = 'Jeremy' AND au.lname = 'Gibbons';
SELECT p.title  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Authors au ON a.authID = au.authID  WHERE au.fname = 'Aaron' AND au.lname = 'Turon';
SELECT p.title  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Authors au ON a.authID = au.authID  WHERE au.fname = 'Aaron' AND au.lname = 'Turon';
SELECT COUNT(Papers.paperID)  FROM Papers  JOIN Authorship ON Papers.paperID = Authorship.paperID  JOIN Authors ON Authorship.authID = Authors.authID  WHERE Authors.fname = 'Atsushi' AND Authors.lname = 'Ohori';
SELECT COUNT(*)  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Authors au ON a.authID = au.authID  WHERE au.fname = 'Atsushi' AND au.lname = 'Ohori';
SELECT Inst.name  FROM Inst  JOIN Authors ON Inst.instID = Authors.instID  WHERE Authors.fname = 'Matthias' AND Authors.lname = 'Blume';
SELECT Inst.name  FROM Inst  JOIN Authors ON Inst.instID = Authors.instID  WHERE Authors.fname = 'Matthias' AND Authors.lname = 'Blume';
SELECT Inst.name  FROM Inst  JOIN Authors ON Inst.instID = Authors.instID  WHERE Authors.fname = 'Katsuhiro' AND Authors.lname = 'Ueno';
SELECT Inst.name  FROM Inst  JOIN Authors ON Inst.instID = Authors.instID  WHERE Authors.fname = 'Katsuhiro' AND Authors.lname = 'Ueno';
SELECT Authors.fname, Authors.lname  FROM Authors  JOIN Authorship ON Authors.authID = Authorship.authID  JOIN Inst ON Authorship.instID = Inst.instID  WHERE Inst.name = 'University of Oxford';
SELECT Authors.fname, Authors.lname  FROM Authors  JOIN Authorship ON Authors.authID = Authorship.authID  JOIN Inst ON Authorship.instID = Inst.instID  WHERE Inst.name = 'University of Oxford';
SELECT Authors.fname, Authors.lname  FROM Authors  JOIN Authorship ON Authors.authID = Authorship.authID  JOIN Inst ON Authorship.instID = Inst.instID  WHERE Inst.name = 'Google';
SELECT A.fname, A.lname  FROM Authors A  JOIN Authorship AS ON A.authID = AS.authID  JOIN Inst I ON AS.instID = I.instID  WHERE I.name = 'Google';
SELECT Authors.lname  FROM Authors  JOIN Authorship ON Authors.authID = Authorship.authID  JOIN Papers ON Authorship.paperID = Papers.paperID  WHERE Papers.title = 'Binders Unbound';
SELECT Authors.lname  FROM Authors  JOIN Authorship ON Authors.authID = Authorship.authID  JOIN Papers ON Authorship.paperID = Papers.paperID  WHERE Papers.title = 'Binders Unbound';
SELECT A.fname, A.lname  FROM Authors A JOIN Authorship AS  ON A.authID = AS.authID JOIN Papers P  ON AS.paperID = P.paperID WHERE P.title = 'Nameless, Painless';
SELECT A.fname, A.lname  FROM Authors A JOIN Authorship AS  ON A.authID = AS.authID JOIN Papers P  ON AS.paperID = P.paperID WHERE P.title = 'Nameless, Painless';
SELECT p.title  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Inst i ON a.instID = i.instID  WHERE i.name = 'Indiana University';
SELECT p.title  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Inst i ON a.instID = i.instID  WHERE i.name = 'Indiana University';
SELECT p.title  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Inst i ON a.instID = i.instID  WHERE i.name = 'Google';
SELECT p.title  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Inst i ON a.instID = i.instID  WHERE i.name = 'Google';
SELECT COUNT(*)  FROM Papers p JOIN Authorship a ON p.paperID = a.paperID JOIN Inst i ON a.instID = i.instID WHERE i.name = 'Tokohu University';
SELECT COUNT(*)  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Inst i ON a.instID = i.instID  WHERE i.name = 'Tokohu University';
SELECT COUNT(*)  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Inst i ON a.instID = i.instID  WHERE i.name = 'University of Pennsylvania';
SELECT COUNT(DISTINCT p.paperID)  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Inst i ON a.instID = i.instID  WHERE i.name = 'University of Pennsylvania';
SELECT p.title  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Authors au ON a.authID = au.authID  WHERE au.fname = 'Olin' AND au.lname = 'Shivers';
SELECT p.title  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Authors au ON a.authID = au.authID  WHERE au.fname = 'Olin' AND au.lname = 'Shivers';
SELECT p.title  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Authors au ON a.authID = au.authID  WHERE au.fname = 'Stephanie' AND au.lname = 'Weirich';
SELECT p.title  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Authors au ON a.authID = au.authID  WHERE au.fname = 'Stephanie' AND au.lname = 'Weirich';
SELECT p.title  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Inst i ON a.instID = i.instID  JOIN Authors au ON a.authID = au.authID  WHERE i.country = 'USA' AND au.lname = 'Turon' AND a.authOrder = 2;
SELECT p.title  FROM Papers p  JOIN Authorship a1 ON p.paperID = a1.paperID  JOIN Authors au1 ON a1.authID = au1.authID  JOIN Inst i ON a1.instID = i.instID  WHERE a1.authOrder = 2  AND au1.lname = 'Turon'  AND i.country = 'USA';
SELECT p.title  FROM Papers p  JOIN Authorship a ON p.paperID = a.paperID  JOIN Authors au ON a.authID = au.authID  JOIN Inst i ON a.instID = i.instID  WHERE a.authOrder = 1  AND i.country = 'Japan'  AND au.lname = 'Ohori';
SELECT P.title  FROM Papers P  JOIN Authorship A ON P.paperID = A.paperID  JOIN Inst I ON A.instID = I.instID  JOIN Authors Au ON A.authID = Au.authID  WHERE I.country = 'Japan' AND Au.lname = 'Ohori' AND A.authOrder = 1;
SELECT a.lname FROM Authors a JOIN Authorship au ON a.authID = au.authID JOIN Papers p ON au.paperID = p.paperID GROUP BY a.lname ORDER BY COUNT(p.paperID) DESC LIMIT 1;
SELECT Authors.lname  FROM Authors  JOIN Authorship ON Authors.authID = Authorship.authID  GROUP BY Authors.lname  ORDER BY COUNT(DISTINCT Authorship.paperID) DESC  LIMIT 1;
SELECT Inst.country FROM Inst JOIN Authorship ON Inst.instID = Authorship.instID JOIN Papers ON Authorship.paperID = Papers.paperID GROUP BY Inst.country ORDER BY COUNT(Papers.paperID) DESC LIMIT 1;
SELECT Inst.country, COUNT(Papers.paperID) AS PaperCount FROM Inst JOIN Authorship ON Inst.instID = Authorship.instID JOIN Papers ON Authorship.paperID = Papers.paperID GROUP BY Inst.country ORDER BY PaperCount DESC LIMIT 1;
SELECT Inst.name FROM Inst  JOIN Authorship ON Inst.instID = Authorship.instID  JOIN Papers ON Authorship.paperID = Papers.paperID  GROUP BY Inst.name  ORDER BY COUNT(Papers.paperID) DESC  LIMIT 1;
SELECT Inst.name  FROM Inst  JOIN Authorship ON Inst.instID = Authorship.instID  JOIN Papers ON Authorship.paperID = Papers.paperID  GROUP BY Inst.name  ORDER BY COUNT(Papers.paperID) DESC  LIMIT 1;
SELECT title  FROM Papers  WHERE title LIKE '%ML%';
SELECT title FROM Papers WHERE title LIKE '%ML%';
SELECT title  FROM Papers  WHERE title LIKE '%Database%';
SELECT title  FROM Papers  WHERE title LIKE '%Database%';
SELECT DISTINCT A.fname  FROM Authors A  JOIN Authorship AS ON A.authID = AS.authID  JOIN Papers P ON AS.paperID = P.paperID  WHERE P.title LIKE '%Functional%';
SELECT DISTINCT A.fname  FROM Authors A  JOIN Authorship AS ON A.authID = AS.authID  JOIN Papers P ON AS.paperID = P.paperID  WHERE P.title LIKE '%Functional%';
SELECT DISTINCT A.lname  FROM Authors A JOIN Authorship AS  JOIN Papers P ON AS.paperID = P.paperID WHERE P.title LIKE '%Monadic%';
SELECT DISTINCT A.lname  FROM Authors A, Papers P, Authorship ASH  WHERE A.authID = ASH.authID AND        P.paperID = ASH.paperID AND        P.title LIKE '%Monadic%';
SELECT P.title  FROM Papers P  JOIN Authorship A ON P.paperID = A.paperID  GROUP BY P.title  ORDER BY COUNT(A.authID) DESC  LIMIT 1;
SELECT P.title  FROM Papers P  JOIN Authorship A ON P.paperID = A.paperID  GROUP BY P.paperID, P.title  ORDER BY COUNT(A.authID) DESC  LIMIT 1;
SELECT fname  FROM Authors  WHERE lname = 'Ueno';
SELECT fname FROM Authors WHERE lname = 'Ueno';
SELECT lname  FROM Authors  WHERE fname = 'Amal';
SELECT lname  FROM Authors  WHERE fname = 'Amal';
SELECT fname  FROM Authors  ORDER BY fname ASC;
SELECT fname  FROM Authors  ORDER BY fname ASC;
SELECT DISTINCT Authors.lname  FROM Authors  ORDER BY Authors.lname ASC;
SELECT DISTINCT lname  FROM Authors  ORDER BY lname ASC;
SELECT fname, lname  FROM Authors  ORDER BY lname, fname;
SELECT fname, lname  FROM Authors  ORDER BY lname, fname;
SELECT COUNT(DISTINCT last_name) FROM actor;
SELECT COUNT(DISTINCT last_name) FROM actor;
SELECT actor.first_name, COUNT(*) as count  FROM actor  GROUP BY actor.first_name  ORDER BY count DESC  LIMIT 1;
SELECT first_name, COUNT(*) as count  FROM actor  GROUP BY first_name  ORDER BY count DESC  LIMIT 1;
SELECT T1.first_name, T1.last_name, COUNT(*) AS popularity  FROM actor AS T1  JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id  GROUP BY T1.actor_id  ORDER BY popularity DESC  LIMIT 1;
SELECT first_name, last_name  FROM actor  GROUP BY first_name, last_name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT district  FROM address  GROUP BY district  HAVING COUNT(address_id) >= 2;
SELECT district  FROM address  GROUP BY district  HAVING COUNT(address_id) >= 2;
SELECT phone, postal_code FROM address WHERE address = '1031 Daugavpils Parkway';
SELECT T1.phone, T1.postal_code  FROM address AS T1  JOIN city AS T2 ON T1.city_id = T2.city_id  JOIN country AS T3 ON T2.country_id = T3.country_id  WHERE T1.address = '1031 Daugavpils Parkway';
SELECT T2.city, COUNT(T1.address_id) AS num_addresses, T2.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T2.city_id ORDER BY num_addresses DESC LIMIT 1;
SELECT T1.city, T1.city_id, COUNT(T2.address_id)  FROM city AS T1  JOIN address AS T2 ON T1.city_id = T2.city_id  GROUP BY T1.city_id  ORDER BY COUNT(T2.address_id) DESC  LIMIT 1;
SELECT COUNT(*) FROM address WHERE district = 'California';
SELECT COUNT(*) FROM address WHERE district = 'California';
SELECT f.title, f.film_id  FROM film f  JOIN inventory i ON f.film_id = i.film_id  WHERE f.rental_rate = 0.99  GROUP BY f.film_id  HAVING COUNT(i.inventory_id) < 3;
SELECT f.title, f.film_id  FROM film f  JOIN inventory i ON f.film_id = i.film_id  WHERE f.rental_rate = 0.99  GROUP BY f.film_id  HAVING COUNT(i.inventory_id) < 3;
SELECT COUNT(*)  FROM city  JOIN country ON city.country_id = country.country_id  WHERE country.country = 'Australia';
SELECT COUNT(*) FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'Australia');
SELECT c.country FROM country c JOIN city ci ON c.country_id = ci.country_id GROUP BY c.country HAVING COUNT(ci.city_id) >= 3;
SELECT c.country FROM country c JOIN city ci ON c.country_id = ci.country_id GROUP BY c.country HAVING COUNT(ci.city_id) >= 3;
Error: 第 2945 个样本有 2 个SQL。
Error: 第 2946 个样本有 4 个SQL。
SELECT COUNT(*) FROM customer WHERE active = 1;
SELECT COUNT(*) FROM customer WHERE active = 1;
Error: 第 2949 个样本有 2 个SQL。
SELECT title, rental_rate FROM film WHERE rental_rate = (SELECT MAX(rental_rate) FROM film);
SELECT f.title, f.film_id, f.description FROM film f JOIN film_actor fa ON f.film_id = fa.film_id GROUP BY f.film_id ORDER BY COUNT(fa.actor_id) DESC LIMIT 1;
SELECT f.title, f.film_id, f.description  FROM film f JOIN film_actor fa ON f.film_id = fa.film_id GROUP BY f.film_id ORDER BY COUNT(fa.actor_id) DESC LIMIT 1;
SELECT A.first_name, A.last_name, A.actor_id FROM actor A JOIN film_actor FA ON A.actor_id = FA.actor_id GROUP BY A.actor_id ORDER BY COUNT(FA.film_id) DESC LIMIT 1;
SELECT A.actor_id, A.first_name, A.last_name  FROM actor A  JOIN film_actor FA ON A.actor_id = FA.actor_id  GROUP BY A.actor_id, A.first_name, A.last_name  ORDER BY COUNT(FA.film_id) DESC  LIMIT 1;
SELECT a.first_name, a.last_name  FROM actor a  JOIN film_actor fa ON a.actor_id = fa.actor_id  GROUP BY a.actor_id  HAVING COUNT(fa.film_id) > 30;
SELECT T1.first_name, T1.last_name  FROM actor AS T1  JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id  GROUP BY T1.actor_id  HAVING COUNT(T2.film_id) > 30;
SELECT store_id, COUNT(*) as num_items  FROM inventory  GROUP BY store_id  ORDER BY num_items DESC  LIMIT 1;
SELECT store_id, COUNT(*) as inventory_count  FROM inventory  GROUP BY store_id  ORDER BY inventory_count DESC  LIMIT 1;
SELECT SUM(amount) FROM payment;
SELECT SUM(amount) FROM payment;
SELECT c.first_name, c.last_name, c.customer_id  FROM customer c JOIN payment p ON c.customer_id = p.customer_id  GROUP BY c.customer_id, c.first_name, c.last_name  ORDER BY SUM(p.amount) ASC  LIMIT 1;
SELECT T1.customer_id, T1.first_name, T1.last_name FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY SUM(T2.amount) ASC LIMIT 1;
SELECT c.name  FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'HUNGER ROOF'
SELECT c.name  FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'HUNGER ROOF'
SELECT c.name AS genre_name, c.category_id AS genre_id, COUNT(fc.film_id) AS film_count FROM category c JOIN film_category fc ON c.category_id = fc.category_id GROUP BY c.category_id;
SELECT c.name, c.category_id, COUNT(fc.film_id) AS num_films FROM category c JOIN film_category fc ON c.category_id = fc.category_id GROUP BY c.category_id, c.name;
SELECT f.title, f.film_id  FROM film f  JOIN inventory i ON f.film_id = i.film_id  GROUP BY f.film_id  ORDER BY COUNT(i.inventory_id) DESC  LIMIT 1;
SELECT f.title, f.film_id  FROM film f  JOIN inventory i ON f.film_id = i.film_id  GROUP BY f.film_id  ORDER BY COUNT(i.inventory_id) DESC  LIMIT 1;
SELECT film.title, inventory.inventory_id  FROM inventory  JOIN film ON inventory.film_id = film.film_id  WHERE inventory.inventory_id IN (     SELECT rental.inventory_id      FROM rental      GROUP BY rental.inventory_id      ORDER BY COUNT(rental.inventory_id) DESC      LIMIT 1 )
SELECT f.title, i.inventory_id  FROM film f  JOIN inventory i ON f.film_id = i.film_id  JOIN rental r ON i.inventory_id = r.inventory_id  GROUP BY i.inventory_id, f.title  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(DISTINCT language_id) FROM film;
SELECT COUNT(DISTINCT language_id) FROM film;
SELECT title FROM film WHERE rating = 'R';
SELECT title  FROM film  WHERE rating = 'R';
SELECT address, district FROM sakila_1.address WHERE address_id = (SELECT address_id FROM sakila_1.store WHERE store_id = 1);
SELECT T1.address FROM address AS T1 JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 1;
SELECT staff_id, CONCAT(first_name, ' ', last_name) AS full_name  FROM staff  WHERE staff_id = (     SELECT staff_id      FROM payment      GROUP BY staff_id      ORDER BY COUNT(*)      LIMIT 1 )
SELECT s.staff_id, CONCAT(s.first_name, ' ', s.last_name) AS full_name  FROM staff s JOIN payment p ON s.staff_id = p.staff_id GROUP BY s.staff_id ORDER BY COUNT(p.payment_id) ASC LIMIT 1;
SELECT T2.name FROM film AS T1 JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'AIRPORT POLLOCK'
SELECT T2.name FROM film AS T1 JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'AIRPORT POLLOCK'
SELECT COUNT(*) FROM store;
SELECT COUNT(*) FROM store;
SELECT COUNT(DISTINCT rating) FROM sakila_1.film;
SELECT COUNT(DISTINCT rating) FROM sakila_1.film;
SELECT title FROM sakila_1.film WHERE special_features LIKE '%Deleted Scenes%';
SELECT title  FROM film  WHERE special_features LIKE '%Deleted Scenes%';
SELECT COUNT(*) FROM inventory WHERE store_id = 1;
SELECT COUNT(*) FROM inventory WHERE store_id = 1;
SELECT MIN(payment_date) FROM payment;
SELECT MIN(payment_date) FROM payment;
SELECT T2.address, T1.email  FROM customer AS T1  JOIN address AS T2  ON T1.address_id = T2.address_id  WHERE T1.first_name = 'Linda';
SELECT T2.address, T1.email  FROM customer AS T1  JOIN address AS T2  ON T1.address_id = T2.address_id  WHERE T1.first_name = 'Linda';
SELECT title  FROM film  WHERE length > 100 OR rating = 'PG'  EXCEPT  SELECT title  FROM film  WHERE replacement_cost > 200;
SELECT title  FROM film  WHERE (length > 100 OR rating = 'PG') AND replacement_cost <= 200;
SELECT T1.first_name, T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1;
SELECT c.first_name, c.last_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id ORDER BY r.rental_date ASC LIMIT 1;
SELECT s.first_name, s.last_name  FROM staff s  JOIN rental r ON s.staff_id = r.staff_id  JOIN customer c ON r.customer_id = c.customer_id  WHERE c.first_name = 'April' AND c.last_name = 'Burns';
SELECT s.first_name, s.last_name  FROM staff s JOIN rental r ON s.staff_id = r.staff_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'April' AND c.last_name = 'Burns' LIMIT 1;
SELECT store_id, COUNT(customer_id) as customer_count  FROM customer  GROUP BY store_id  ORDER BY customer_count DESC  LIMIT 1;
SELECT store_id  FROM customer  GROUP BY store_id  ORDER BY COUNT(customer_id) DESC  LIMIT 1;
SELECT MAX(amount) FROM payment;
SELECT MAX(amount) FROM payment;
SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = 'Elsa'
SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = 'Elsa'
SELECT first_name  FROM customer  WHERE customer_id NOT IN (     SELECT customer_id      FROM rental      WHERE rental_date > '2005-08-23 02:06:01' );
SELECT DISTINCT c.first_name  FROM customer c WHERE c.customer_id NOT IN (     SELECT r.customer_id      FROM rental r      WHERE r.rental_date > '2005-08-23 02:06:01' );
SELECT COUNT(*) FROM bank
SELECT COUNT(*) FROM bank;
Error: 第 3009 个样本有 2 个SQL。
SELECT SUM(no_of_customers) FROM bank;
SELECT SUM(no_of_customers)  FROM bank  WHERE city = 'New York City';
SELECT SUM(no_of_customers)  FROM bank  WHERE city = 'New York City';
SELECT AVG(no_of_customers)  FROM bank  WHERE state = 'Utah';
SELECT AVG(no_of_customers)  FROM bank  WHERE state = 'Utah';
SELECT AVG(no_of_customers) FROM bank;
SELECT AVG(no_of_customers) FROM bank;
SELECT city, state  FROM bank  WHERE bname = 'morningside';
SELECT city, state  FROM bank  WHERE bname = 'morningside';
SELECT bname  FROM bank  WHERE state = 'New York';
SELECT bname  FROM bank  WHERE state = 'New York';
SELECT cust_name  FROM customer  ORDER BY acc_bal ASC;
SELECT cust_name  FROM customer  ORDER BY acc_bal;
SELECT c.cust_name, SUM(l.amount) as total_loan_amount  FROM customer c  JOIN loan l ON c.cust_ID = l.cust_ID  GROUP BY c.cust_name  ORDER BY total_loan_amount;
SELECT c.cust_name  FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID  GROUP BY c.cust_name  ORDER BY SUM(l.amount) DESC;
SELECT T1.state, T1.acc_type, T1.credit_score  FROM customer AS T1  WHERE T1.no_of_loans = 0;
SELECT T1.state, T1.acc_type, T1.credit_score  FROM customer AS T1  WHERE T1.cust_ID NOT IN (SELECT T2.cust_ID FROM loan AS T2) AND T1.no_of_loans = 0;
SELECT COUNT(DISTINCT city) FROM bank;
SELECT COUNT(DISTINCT city) FROM bank;
SELECT COUNT(DISTINCT state)  FROM bank;
SELECT COUNT(DISTINCT state) FROM bank;
SELECT COUNT(DISTINCT acc_type) FROM customer;
SELECT COUNT(DISTINCT acc_type) FROM customer;
SELECT cust_name, acc_bal  FROM customer  WHERE cust_name LIKE '%a%';
SELECT cust_name, acc_bal  FROM customer  WHERE cust_name LIKE '%a%';
SELECT cust_name, SUM(acc_bal) as total_acc_balance FROM customer WHERE state IN ('Utah', 'Texas') GROUP BY cust_name;
SELECT cust_name, SUM(acc_bal)  FROM customer  WHERE state IN ('Utah', 'Texas')  GROUP BY cust_name;
SELECT cust_name  FROM customer  WHERE acc_type = 'saving'  INTERSECT  SELECT cust_name  FROM customer  WHERE acc_type = 'checking'
SELECT cust_name  FROM customer  WHERE acc_type = 'savings'  INTERSECT  SELECT cust_name  FROM customer  WHERE acc_type = 'checking'
SELECT cust_name  FROM customer  WHERE acc_type != 'saving';
SELECT cust_name  FROM customer  WHERE acc_type != 'saving'
SELECT cust_name  FROM customer  WHERE cust_ID NOT IN (SELECT cust_ID FROM loan WHERE loan_type = 'Mortgages');
SELECT cust_name  FROM customer  WHERE cust_ID NOT IN (SELECT cust_ID FROM loan WHERE loan_type = 'Mortgage')
SELECT c.cust_name  FROM customer c JOIN loan l1 ON c.cust_ID = l1.cust_ID  WHERE l1.loan_type = 'Mortgages' INTERSECT SELECT c.cust_name  FROM customer c JOIN loan l2 ON c.cust_ID = l2.cust_ID  WHERE l2.loan_type = 'Auto'
SELECT c.cust_name  FROM customer c JOIN loan l1 ON c.cust_ID = l1.cust_ID  JOIN loan l2 ON c.cust_ID = l2.cust_ID  WHERE l1.loan_type = 'Mortgage' AND l2.loan_type = 'Auto' GROUP BY c.cust_name HAVING COUNT(DISTINCT l1.loan_type) > 1;
SELECT cust_name  FROM customer  WHERE credit_score < (SELECT AVG(credit_score) FROM customer)
SELECT cust_name  FROM customer  WHERE credit_score < (SELECT AVG(credit_score) FROM customer)
SELECT bname  FROM bank  WHERE no_of_customers = (SELECT MAX(no_of_customers) FROM bank);
SELECT bname  FROM bank  ORDER BY no_of_customers DESC  LIMIT 1;
SELECT cust_name  FROM customer  WHERE credit_score = (SELECT MIN(credit_score) FROM customer)
SELECT cust_name  FROM customer  WHERE credit_score = (SELECT MIN(credit_score) FROM customer)
SELECT cust_name, acc_type, acc_bal  FROM customer  WHERE credit_score = (SELECT MAX(credit_score) FROM customer);
SELECT cust_name, acc_type, acc_bal  FROM customer  WHERE credit_score = (SELECT MAX(credit_score) FROM customer);
SELECT c.cust_name  FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID  GROUP BY c.cust_name ORDER BY SUM(l.amount) DESC LIMIT 1;
SELECT c.cust_name  FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID  GROUP BY c.cust_name ORDER BY SUM(l.amount) DESC LIMIT 1;
SELECT state, COUNT(*) AS num_customers FROM customer GROUP BY state ORDER BY num_customers DESC LIMIT 1;
SELECT state, SUM(no_of_customers) AS total_customers FROM bank GROUP BY state ORDER BY total_customers DESC LIMIT 1;
SELECT acc_type, AVG(acc_bal)  FROM customer  WHERE credit_score < 50  GROUP BY acc_type;
SELECT acc_type, AVG(acc_bal)  FROM customer  WHERE credit_score < 50  GROUP BY acc_type;
SELECT state, SUM(acc_bal)  FROM customer  WHERE credit_score > 100  GROUP BY state;
SELECT state, SUM(acc_bal)  FROM customer  WHERE credit_score > 100  GROUP BY state;
SELECT b.branch_ID, b.bname, SUM(l.amount) as total_loan_amount  FROM bank b  JOIN loan l ON b.branch_ID = l.branch_ID  GROUP BY b.branch_ID, b.bname;
SELECT b.bname, SUM(l.amount) as total_loan_amount FROM bank b JOIN loan l ON b.branch_ID = l.branch_ID GROUP BY b.bname;
SELECT c.cust_name FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID GROUP BY c.cust_ID, c.cust_name HAVING COUNT(l.loan_ID) > 1;
SELECT c.cust_name FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID GROUP BY c.cust_ID, c.cust_name HAVING COUNT(l.loan_ID) > 1;
SELECT c.cust_name, c.acc_bal  FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID  GROUP BY c.cust_ID, c.cust_name, c.acc_bal  HAVING SUM(l.amount) > 5000;
SELECT c.cust_name, c.acc_bal  FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID GROUP BY c.cust_ID, c.cust_name, c.acc_bal HAVING SUM(l.amount) > 5000;
SELECT b.bname  FROM bank b JOIN loan l ON b.branch_ID = l.branch_ID  GROUP BY b.bname ORDER BY SUM(l.amount) DESC LIMIT 1;
SELECT bname  FROM bank  WHERE branch_ID = (     SELECT branch_ID      FROM loan      GROUP BY branch_ID      ORDER BY SUM(amount) DESC      LIMIT 1 )
SELECT b.bname  FROM bank b  JOIN loan l ON b.branch_ID = l.branch_ID  WHERE l.cust_ID IN (SELECT c.cust_ID FROM customer c WHERE c.credit_score < 100)  GROUP BY b.bname  ORDER BY SUM(l.amount) DESC  LIMIT 1;
SELECT b.bname  FROM bank b  JOIN loan l ON b.branch_ID = l.branch_ID  WHERE l.cust_ID IN (SELECT c.cust_ID FROM customer c WHERE c.credit_score < 100)  GROUP BY b.bname  ORDER BY SUM(l.amount) DESC  LIMIT 1;
SELECT DISTINCT bname  FROM bank  WHERE branch_ID IN (SELECT DISTINCT branch_ID FROM loan);
SELECT DISTINCT bname  FROM bank  WHERE branch_ID IN (SELECT DISTINCT branch_ID FROM loan);
SELECT c.cust_name, c.credit_score  FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID;
SELECT DISTINCT c.cust_name, c.credit_score  FROM customer AS c  JOIN loan AS l ON c.cust_ID = l.cust_ID;
SELECT c.cust_name  FROM customer c  JOIN loan l ON c.cust_ID = l.cust_ID  WHERE l.amount > 3000;
SELECT c.cust_name  FROM customer c  JOIN loan l ON c.cust_ID = l.cust_ID  WHERE l.amount > 3000;
SELECT b.city, b.bname  FROM bank AS b JOIN loan AS l ON b.branch_ID = l.branch_ID  WHERE l.loan_type = 'business';
SELECT DISTINCT b.bname, b.city  FROM bank AS b JOIN loan AS l ON b.branch_ID = l.branch_ID WHERE l.loan_type = 'business';
SELECT DISTINCT bname  FROM bank  WHERE branch_ID IN (     SELECT branch_ID      FROM loan      WHERE cust_ID IN (         SELECT cust_ID          FROM customer          WHERE credit_score < 100     ) );
SELECT DISTINCT bname  FROM bank  WHERE branch_ID IN (     SELECT branch_ID      FROM loan      WHERE cust_ID IN (         SELECT cust_ID          FROM customer          WHERE credit_score < 100     ) );
SELECT SUM(amount)  FROM loan  WHERE branch_ID IN (SELECT branch_ID FROM bank WHERE state = 'New York');
SELECT SUM(amount)  FROM loan  JOIN bank ON loan.branch_ID = bank.branch_ID  WHERE bank.state = 'New York';
SELECT AVG(credit_score)  FROM customer  WHERE cust_ID IN (SELECT cust_ID FROM loan);
SELECT AVG(c.credit_score) FROM customer c JOIN loan l ON c.cust_ID = l.cust_ID;
SELECT AVG(credit_score)  FROM customer  WHERE cust_ID NOT IN (SELECT DISTINCT cust_ID FROM loan);
SELECT AVG(credit_score)  FROM customer  WHERE cust_ID NOT IN (SELECT DISTINCT cust_ID FROM loan);
SELECT COUNT(*) FROM Assessment_Notes;
SELECT date_of_notes FROM Assessment_Notes;
SELECT COUNT(*) FROM Addresses WHERE zip_postcode = 197;
SELECT COUNT(DISTINCT incident_type_code) FROM Ref_Incident_Type;
SELECT DISTINCT detention_type_code FROM Ref_Detention_Type;
SELECT date_incident_start, date_incident_end  FROM Behavior_Incident  WHERE incident_type_code = 'NOISE';
SELECT detention_summary FROM Detention;
SELECT cell_mobile_number, email_address FROM Students;
SELECT email_address  FROM Students  WHERE first_name = 'Emma' AND last_name = 'Rohan';
SELECT COUNT(DISTINCT student_id)  FROM Students_in_Detention;
SELECT gender FROM Teachers WHERE last_name = 'Medhurst';
SELECT incident_type_description  FROM Ref_Incident_Type  WHERE incident_type_code = 'VIOLENCE';
SELECT MAX(monthly_rental) as max_monthly_rental, MIN(monthly_rental) as min_monthly_rental  FROM Student_Addresses;
SELECT first_name  FROM Teachers  WHERE email_address LIKE '%man%';
SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC;
SELECT DISTINCT city FROM Addresses ORDER BY city ASC;
SELECT first_name, last_name  FROM Teachers  ORDER BY last_name ASC;
SELECT sa.*, a.* FROM Student_Addresses sa JOIN Addresses a ON sa.address_id = a.address_id ORDER BY sa.monthly_rental DESC;
SELECT T1.student_id, T2.first_name  FROM Assessment_Notes AS T1  JOIN Students AS T2 ON T1.student_id = T2.student_id  GROUP BY T1.student_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T1.teacher_id, T1.first_name FROM Teachers AS T1 JOIN Assessment_Notes AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id, T1.first_name ORDER BY COUNT(T2.notes_id) DESC LIMIT 3;
SELECT T1.student_id, T2.last_name  FROM Behavior_Incident AS T1  JOIN Students AS T2  ON T1.student_id = T2.student_id  GROUP BY T1.student_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T1.teacher_id, T1.last_name  FROM Teachers AS T1  JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id  WHERE T2.detention_type_code = 'AFTER'  GROUP BY T1.teacher_id, T1.last_name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT S.student_id, S.first_name  FROM Students S JOIN Student_Addresses SA ON S.student_id = SA.student_id GROUP BY S.student_id, S.first_name ORDER BY AVG(SA.monthly_rental) DESC LIMIT 1;
SELECT sa.student_id, a.city  FROM Student_Addresses sa  JOIN Addresses a ON sa.address_id = a.address_id  GROUP BY sa.student_id, a.city  ORDER BY AVG(sa.monthly_rental) DESC  LIMIT 1;
SELECT T1.incident_type_code, T2.incident_type_description  FROM Behavior_Incident AS T1  JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code  GROUP BY T1.incident_type_code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T1.detention_type_code, T1.detention_type_description  FROM Ref_Detention_Type AS T1  JOIN Detention AS T2 ON T1.detention_type_code = T2.detention_type_code  GROUP BY T1.detention_type_code  ORDER BY COUNT(T2.detention_id)  LIMIT 1;
SELECT date_of_notes  FROM Assessment_Notes  WHERE student_id IN (     SELECT student_id      FROM Students      WHERE first_name = 'Fanny' );
SELECT Assessment_Notes.text_of_notes  FROM Assessment_Notes  JOIN Teachers ON Assessment_Notes.teacher_id = Teachers.teacher_id  WHERE Teachers.last_name = 'Schuster';
SELECT date_incident_start, date_incident_end  FROM Behavior_Incident  WHERE student_id IN (SELECT student_id FROM Students WHERE last_name = 'Fahey');
SELECT D.datetime_detention_start, D.datetime_detention_end  FROM Detention D JOIN Teachers T ON D.teacher_id = T.teacher_id WHERE T.last_name = 'Schultz';
Error: 第 3117 个样本有 2 个SQL。
SELECT S.cell_mobile_number  FROM Students S JOIN Student_Addresses SA ON S.student_id = SA.student_id WHERE SA.monthly_rental = (SELECT MIN(monthly_rental) FROM Student_Addresses)
SELECT sa.monthly_rental  FROM Student_Addresses sa  JOIN Addresses a ON sa.address_id = a.address_id  WHERE a.state_province_county = 'Texas';
SELECT s.first_name, s.last_name  FROM Students s JOIN Addresses a ON s.address_id = a.address_id WHERE a.state_province_county = 'Wisconsin';
SELECT AVG(Student_Addresses.monthly_rental), Addresses.line_1  FROM Student_Addresses  JOIN Addresses ON Student_Addresses.address_id = Addresses.address_id;
SELECT Addresses.zip_postcode  FROM Addresses  JOIN Teachers ON Addresses.address_id = Teachers.address_id  WHERE Teachers.first_name = 'Lyla';
SELECT Teachers.email_address  FROM Teachers  JOIN Addresses ON Teachers.address_id = Addresses.address_id  WHERE Addresses.zip_postcode = '918';
SELECT COUNT(*)  FROM Students  WHERE student_id NOT IN (SELECT student_id FROM Behavior_Incident);
SELECT Teachers.last_name FROM Teachers WHERE Teachers.teacher_id NOT IN (     SELECT DISTINCT Detention.teacher_id     FROM Detention );
SELECT Addresses.line_1  FROM Addresses  WHERE Addresses.address_id IN (     SELECT DISTINCT sa.address_id FROM Student_Addresses sa     INTERSECT     SELECT DISTINCT ta.address_id FROM Teachers ta ) GROUP BY Addresses.line_1;
SELECT      Assets.asset_id,      Assets.asset_details FROM      Assets JOIN      Asset_Parts ON Assets.asset_id = Asset_Parts.asset_id JOIN      Fault_Log ON Assets.asset_id = Fault_Log.asset_id GROUP BY      Assets.asset_id,      Assets.asset_details HAVING      COUNT(DISTINCT Asset_Parts.part_id) = 2  AND      COUNT(DISTINCT Fault_Log.fault_log_entry_id) < 2;
SELECT COUNT(Assets.asset_id), Maintenance_Contracts.maintenance_contract_id  FROM Assets  JOIN Maintenance_Contracts  ON Assets.maintenance_contract_id = Maintenance_Contracts.maintenance_contract_id  GROUP BY Maintenance_Contracts.maintenance_contract_id;
SELECT COUNT(*) AS asset_count, T2.maintenance_contract_company_id  FROM Assets AS T1  JOIN Maintenance_Contracts AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id  JOIN Third_Party_Companies AS T3 ON T2.maintenance_contract_company_id = T3.company_id  GROUP BY T2.maintenance_contract_company_id;
SELECT T1.company_id, T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id, T1.company_name HAVING COUNT(T2.engineer_id) >= 2 UNION SELECT T3.company_id, T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id = T4.maintenance_contract_company_id GROUP BY T3.company_id, T3.company_name HAVING COUNT(T4.maintenance_contract_id) >= 2;
SELECT DISTINCT staff.staff_name, staff.staff_id  FROM Fault_Log  JOIN Staff ON Fault_Log.recorded_by_staff_id = Staff.staff_id  WHERE Fault_Log.fault_log_entry_id NOT IN (     SELECT Engineer_Visits.fault_log_entry_id      FROM Engineer_Visits )
SELECT e.engineer_id, e.first_name, e.last_name FROM Maintenance_Engineers e JOIN Engineer_Visits v ON e.engineer_id = v.engineer_id GROUP BY e.engineer_id, e.first_name, e.last_name ORDER BY COUNT(v.engineer_visit_id) DESC LIMIT 1;
SELECT p.part_id, p.part_name FROM Parts p JOIN Part_Faults pf ON p.part_id = pf.part_id GROUP BY p.part_id, p.part_name HAVING COUNT(pf.part_fault_id) > 2;
SELECT      e.first_name,      e.last_name,      e.other_details,      s.skill_description  FROM      Maintenance_Engineers e  JOIN      Engineer_Skills es ON e.engineer_id = es.engineer_id  JOIN      Skills s ON es.skill_id = s.skill_id;
SELECT      pf.fault_short_name,      sr.skill_description FROM      Part_Faults pf JOIN      Skills_Required_To_Fix srtf ON pf.part_fault_id = srtf.part_fault_id JOIN      Skills sr ON srtf.skill_id = sr.skill_id;
SELECT P.part_name, COUNT(AP.asset_id) AS num_assets FROM Parts P JOIN Asset_Parts AP ON P.part_id = AP.part_id GROUP BY P.part_id, P.part_name;
SELECT fault_description, fault_status  FROM Fault_Log  JOIN Engineer_Visits ON Fault_Log.fault_log_entry_id = Engineer_Visits.fault_log_entry_id;
SELECT fault_log_entry_id, COUNT(*) AS num_visits FROM Engineer_Visits GROUP BY fault_log_entry_id ORDER BY num_visits DESC LIMIT 1;
SELECT DISTINCT last_name FROM Maintenance_Engineers;
SELECT COUNT(DISTINCT fault_status) FROM Fault_Log_Parts;
SELECT ME.first_name, ME.last_name  FROM Maintenance_Engineers ME LEFT JOIN Engineer_Visits EV ON ME.engineer_id = EV.engineer_id WHERE EV.engineer_visit_id IS NULL;
SELECT asset_id, asset_details, asset_make, asset_model  FROM Assets;
SELECT MIN(asset_acquired_date)  FROM Assets;
SELECT P.part_id, P.part_name  FROM Parts AS P JOIN Part_Faults AS PF ON P.part_id = PF.part_id JOIN Skills_Required_To_Fix AS SRTF ON PF.part_fault_id = SRTF.part_fault_id GROUP BY P.part_id, P.part_name ORDER BY COUNT(SRTF.skill_id) DESC LIMIT 1;
SELECT P.part_name  FROM Parts P  JOIN Part_Faults PF ON P.part_id = PF.part_id  GROUP BY P.part_name  ORDER BY COUNT(PF.part_fault_id)  LIMIT 1;
SELECT E.engineer_id, E.first_name, E.last_name FROM Maintenance_Engineers E JOIN Engineer_Visits V ON E.engineer_id = V.engineer_id GROUP BY E.engineer_id, E.first_name, E.last_name ORDER BY COUNT(V.engineer_visit_id) ASC LIMIT 1;
SELECT Staff.staff_name, Maintenance_Engineers.first_name, Maintenance_Engineers.last_name  FROM Staff  JOIN Engineer_Visits ON Staff.staff_id = Engineer_Visits.contact_staff_id  JOIN Maintenance_Engineers ON Engineer_Visits.engineer_id = Maintenance_Engineers.engineer_id;
SELECT fl.fault_log_entry_id, fl.fault_description, fl.fault_log_entry_datetime  FROM Fault_Log AS fl  JOIN Fault_Log_Parts AS flp ON fl.fault_log_entry_id = flp.fault_log_entry_id  GROUP BY fl.fault_log_entry_id  ORDER BY COUNT(flp.part_fault_id) DESC  LIMIT 1;
SELECT SR.skill_id, S.skill_description FROM Skills_Required_To_Fix SR JOIN Skills S ON SR.skill_id = S.skill_id GROUP BY SR.skill_id, S.skill_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT asset_model FROM Assets;
SELECT asset_make, asset_model, asset_details  FROM Assets  ORDER BY asset_disposed_date ASC;
SELECT part_id, chargeable_amount  FROM Parts  WHERE chargeable_amount = (SELECT MIN(chargeable_amount) FROM Parts);
SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1
Error: 第 3154 个样本有 2 个SQL。
SELECT gender, COUNT(*) as count  FROM Staff  GROUP BY gender  ORDER BY count DESC  LIMIT 1;
SELECT Staff.staff_name, COUNT(DISTINCT Engineer_Visits.engineer_id) AS NumberOfEngineersContacted FROM Staff JOIN Engineer_Visits ON Staff.staff_id = Engineer_Visits.contact_staff_id GROUP BY Staff.staff_id, Staff.staff_name;
SELECT asset_model  FROM Assets  WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)
SELECT local_authority, services FROM station;
SELECT train_number, name  FROM train  ORDER BY time;
SELECT time, train_number FROM train WHERE destination = 'Chennai' ORDER BY time;
SELECT COUNT(*) FROM train WHERE name LIKE '%Express%';
SELECT train_number, time  FROM train  WHERE origin = 'Chennai' AND destination = 'Guruvayur';
SELECT origin, COUNT(*) as num_trains FROM train GROUP BY origin;
SELECT T1.name  FROM train AS T1  JOIN route AS T2 ON T1.id = T2.train_id  GROUP BY T1.id  ORDER BY COUNT(T2.station_id) DESC  LIMIT 1
SELECT station.network_name, station.services, COUNT(train.id) AS number_of_trains FROM station  JOIN route ON station.id = route.station_id  JOIN train ON train.id = route.train_id  GROUP BY station.id;
SELECT day_of_week, AVG(high_temperature)  FROM weekly_weather  GROUP BY day_of_week;
SELECT MAX(w.low_temperature) AS max_low_temperature, AVG(w.precipitation) AS avg_precipitation  FROM weekly_weather w  JOIN station s ON w.station_id = s.id  WHERE s.network_name = 'Amersham';
SELECT t.name, t.time  FROM train t  JOIN route r ON t.id = r.train_id  JOIN station s ON r.station_id = s.id  WHERE s.local_authority = 'Chiltern';
SELECT COUNT(DISTINCT services) FROM station;
SELECT s.id, s.local_authority  FROM station AS s JOIN weekly_weather AS w ON s.id = w.station_id GROUP BY s.id, s.local_authority ORDER BY AVG(w.high_temperature) DESC LIMIT 1;
SELECT s.id, s.local_authority  FROM station AS s JOIN weekly_weather AS w ON s.id = w.station_id GROUP BY s.id, s.local_authority HAVING MAX(w.precipitation) > 50;
SELECT MIN(low_temperature) AS lowest_low_temp, MAX(wind_speed_mph) AS highest_wind_speed FROM weekly_weather;
SELECT origin  FROM train  GROUP BY origin  HAVING COUNT(id) > 1;
SELECT COUNT(*)  FROM PROFESSOR  WHERE DEPT_CODE = (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'Accounting');
SELECT COUNT(*)  FROM PROFESSOR  WHERE DEPT_CODE = 'ACCT'
Error: 第 3176 个样本有 2 个SQL。
Error: 第 3177 个样本有 2 个SQL。
SELECT EMP_FNAME, EMP_LNAME  FROM EMPLOYEE  WHERE EMP_NUM IN (     SELECT EMP_NUM      FROM PROFESSOR      WHERE DEPT_CODE IN (         SELECT DEPT_CODE          FROM DEPARTMENT          WHERE DEPT_NAME = 'Biology'     ) );
SELECT EMP_FNAME, EMP_LNAME  FROM EMPLOYEE  WHERE EMP_NUM IN (     SELECT EMP_NUM      FROM PROFESSOR      WHERE DEPT_CODE = 'BIO' );
SELECT DISTINCT E.EMP_FNAME, E.EMP_DOB  FROM EMPLOYEE E  JOIN PROFESSOR P ON E.EMP_NUM = P.EMP_NUM  JOIN CLASS C ON P.EMP_NUM = C.PROF_NUM  JOIN COURSE CR ON C.CRS_CODE = CR.CRS_CODE  WHERE CR.CRS_CODE = 'ACCT-211';
SELECT EMP_FNAME, EMP_DOB  FROM EMPLOYEE  WHERE EMP_NUM IN (     SELECT PROF_NUM      FROM CLASS      WHERE CRS_CODE = 'ACCT-211' );
SELECT COUNT(*)  FROM CLASS  WHERE PROF_NUM = (SELECT EMP_NUM FROM EMPLOYEE WHERE EMP_LNAME = 'Graztevski');
SELECT COUNT(*)  FROM CLASS  WHERE PROF_NUM = (SELECT EMP_NUM FROM EMPLOYEE WHERE EMP_LNAME = 'Graztevski');
SELECT SCHOOL_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'Accounting'
SELECT SCHOOL_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'Accounting'
SELECT CRS_CREDIT, CRS_DESCRIPTION  FROM COURSE  WHERE CRS_CODE = 'CIS-220';
SELECT CRS_DESCRIPTION, CRS_CREDIT  FROM COURSE  WHERE CRS_CODE = 'CIS-220';
SELECT DEPT_ADDRESS  FROM DEPARTMENT  WHERE DEPT_NAME = 'History';
SELECT DEPT_ADDRESS  FROM DEPARTMENT  WHERE DEPT_NAME = 'History';
SELECT COUNT(DISTINCT DEPT_ADDRESS)  FROM DEPARTMENT  WHERE SCHOOL_CODE = 'BUS';
SELECT DISTINCT DEPT_ADDRESS  FROM DEPARTMENT  WHERE SCHOOL_CODE = 'BUS';
SELECT COUNT(DISTINCT DEPT_ADDRESS), SCHOOL_CODE  FROM DEPARTMENT  GROUP BY SCHOOL_CODE;
SELECT COUNT(DISTINCT DEPT_ADDRESS), SCHOOL_CODE  FROM DEPARTMENT  GROUP BY SCHOOL_CODE;
SELECT CRS_DESCRIPTION, CRS_CREDIT  FROM COURSE  WHERE CRS_CODE = 'QM-261';
SELECT CRS_DESCRIPTION, CRS_CREDIT  FROM COURSE  WHERE CRS_CODE = 'QM-261';
SELECT SCHOOL_CODE, COUNT(DEPT_CODE) AS Num_of_Departments FROM DEPARTMENT GROUP BY SCHOOL_CODE;
SELECT SCHOOL_CODE, COUNT(DEPT_CODE)  FROM DEPARTMENT  GROUP BY SCHOOL_CODE;
SELECT      SCHOOL_CODE,      COUNT(DISTINCT DEPT_CODE) AS num_departments FROM      DEPARTMENT GROUP BY      SCHOOL_CODE HAVING      COUNT(DISTINCT DEPT_CODE) < 5;
SELECT SCHOOL_CODE, COUNT(DISTINCT DEPT_CODE)  FROM DEPARTMENT  GROUP BY SCHOOL_CODE  HAVING COUNT(DEPT_CODE) < 5;
SELECT COUNT(Class.CLASS_CODE), Course.CRS_CODE FROM Class JOIN Course ON Class.CRS_CODE = Course.CRS_CODE GROUP BY Course.CRS_CODE;
SELECT COUNT(Class.CLASS_CODE), Course.CRS_CODE FROM Class JOIN Course ON Class.CRS_CODE = Course.CRS_CODE GROUP BY Course.CRS_CODE;
SELECT DEPT_CODE, SUM(CRS_CREDIT) as TOTAL_CREDIT FROM COURSE GROUP BY DEPT_CODE;
SELECT SUM(CRS_CREDIT) AS Total_Credits  FROM COURSE  GROUP BY DEPT_CODE;
SELECT COUNT(*), CLASS_ROOM  FROM CLASS  GROUP BY CLASS_ROOM  HAVING COUNT(*) >= 2;
SELECT CLASS_ROOM, COUNT(*) AS class_count FROM CLASS GROUP BY CLASS_ROOM HAVING COUNT(*) >= 2;
SELECT DEPARTMENT.DEPT_NAME, COUNT(CLASS.CLASS_CODE) AS NUMBER_OF_CLASSES FROM CLASS JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE JOIN DEPARTMENT ON COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME;
SELECT DEPARTMENT.DEPT_NAME, COUNT(CLASS.CLASS_CODE) AS NUMBER_OF_CLASSES FROM CLASS JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE JOIN DEPARTMENT ON COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME;
SELECT COUNT(DISTINCT CLASS_CODE) AS NumberOfClasses, T3.SCHOOL_CODE FROM CLASS AS T1  JOIN COURSE AS T2 ON T1.CRS_CODE = T2.CRS_CODE  JOIN DEPARTMENT AS T3 ON T2.DEPT_CODE = T3.DEPT_CODE  GROUP BY T3.SCHOOL_CODE;
SELECT COUNT(DISTINCT CLASS_CODE) AS NumberOfClasses, T3.SCHOOL_CODE  FROM CLASS  JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE  JOIN DEPARTMENT AS T3 ON COURSE.DEPT_CODE = T3.DEPT_CODE  GROUP BY T3.SCHOOL_CODE;
SELECT COUNT(*) AS num_of_professors, d.SCHOOL_CODE  FROM PROFESSOR p  JOIN DEPARTMENT d ON p.DEPT_CODE = d.DEPT_CODE  GROUP BY d.SCHOOL_CODE;
SELECT COUNT(DISTINCT T3.EMP_NUM), T2.SCHOOL_CODE  FROM PROFESSOR AS T1  JOIN DEPARTMENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE  JOIN EMPLOYEE AS T3 ON T1.EMP_NUM = T3.EMP_NUM  GROUP BY T2.SCHOOL_CODE;
SELECT EMP_JOBCODE, COUNT(*) AS COUNT_OF_EMPLOYEES FROM EMPLOYEE GROUP BY EMP_JOBCODE ORDER BY COUNT_OF_EMPLOYEES DESC LIMIT 1;
SELECT EMP_JOBCODE, COUNT(*)  FROM EMPLOYEE  GROUP BY EMP_JOBCODE  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T3.SCHOOL_CODE FROM PROFESSOR AS T1 JOIN DEPARTMENT AS T3 ON T1.DEPT_CODE = T3.DEPT_CODE GROUP BY T3.SCHOOL_CODE ORDER BY COUNT(*) ASC LIMIT 1
SELECT T3.SCHOOL_CODE  FROM PROFESSOR AS T1  JOIN DEPARTMENT AS T3 ON T1.DEPT_CODE = T3.DEPT_CODE  GROUP BY T3.SCHOOL_CODE  ORDER BY COUNT(*)  LIMIT 1
SELECT DEPT_CODE, COUNT(*)  FROM PROFESSOR  WHERE PROF_HIGH_DEGREE = 'Ph.D.'  GROUP BY DEPT_CODE;
SELECT DEPT_CODE, COUNT(*)  FROM PROFESSOR  WHERE PROF_HIGH_DEGREE = 'Ph.D.'  GROUP BY DEPT_CODE;
SELECT DEPT_CODE, COUNT(*) AS num_students FROM STUDENT GROUP BY DEPT_CODE;
SELECT DEPT_CODE, COUNT(*) AS Student_Count FROM STUDENT GROUP BY DEPT_CODE;
SELECT DEPT_CODE, SUM(STU_HRS) AS TOTAL_HOURS FROM STUDENT GROUP BY DEPT_CODE;
SELECT DEPARTMENT.DEPT_NAME, SUM(STUDENT.STU_HRS) AS Total_Hours FROM STUDENT JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE JOIN DEPARTMENT ON COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME;
SELECT DEPT_CODE, MAX(STU_GPA) AS MaxGPA, AVG(STU_GPA) AS AverageGPA, MIN(STU_GPA) AS MinGPA  FROM STUDENT  GROUP BY DEPT_CODE;
SELECT DEPT_CODE, MAX(STU_GPA) AS Highest_GPA, MIN(STU_GPA) AS Lowest_GPA, AVG(STU_GPA) AS Average_GPA  FROM STUDENT  GROUP BY DEPT_CODE;
SELECT DEPARTMENT.DEPT_NAME, AVG(STUDENT.STU_GPA) AS Average_GPA FROM DEPARTMENT JOIN STUDENT ON DEPARTMENT.DEPT_CODE = STUDENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME ORDER BY Average_GPA DESC LIMIT 1;
SELECT DEPARTMENT.DEPT_NAME, AVG(STUDENT.STU_GPA) AS Average_GPA FROM STUDENT JOIN DEPARTMENT ON STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME ORDER BY Average_GPA DESC LIMIT 1;
SELECT COUNT(DISTINCT SCHOOL_CODE) FROM DEPARTMENT;
SELECT COUNT(DISTINCT SCHOOL_CODE) FROM DEPARTMENT;
SELECT COUNT(DISTINCT CLASS_CODE) FROM CLASS;
SELECT COUNT(DISTINCT CLASS_CODE) FROM CLASS;
SELECT COUNT(*) FROM COURSE
SELECT COUNT(DISTINCT CRS_CODE) FROM CLASS;
SELECT COUNT(*) FROM DEPARTMENT;
SELECT COUNT(DISTINCT DEPT_CODE) FROM DEPARTMENT;
SELECT COUNT(*)  FROM COURSE  WHERE DEPT_CODE = (     SELECT DEPT_CODE      FROM DEPARTMENT      WHERE DEPT_NAME = 'Computer Info. Systems' );
SELECT COUNT(*)  FROM COURSE  WHERE DEPT_CODE = 'CIS';
SELECT COUNT(*)  FROM CLASS  WHERE CRS_CODE = 'ACCT-211';
SELECT COUNT(DISTINCT T1.CLASS_SECTION)  FROM CLASS AS T1  JOIN COURSE AS T2 ON T1.CRS_CODE = T2.CRS_CODE  WHERE T2.CRS_DESCRIPTION = 'ACCT-211';
SELECT DEPARTMENT.DEPT_CODE, SUM(COURSE.CRS_CREDIT) as TOTAL_CREDITS FROM CLASS JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE JOIN DEPARTMENT ON COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_CODE;
SELECT DEPARTMENT.DEPT_CODE, SUM(COURSE.CRS_CREDIT) as TOTAL_CREDITS  FROM COURSE  JOIN DEPARTMENT ON COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE  GROUP BY DEPARTMENT.DEPT_CODE;
SELECT DEPT_NAME  FROM DEPARTMENT  WHERE DEPT_CODE = (     SELECT DEPT_CODE      FROM COURSE      WHERE CRS_CODE = (         SELECT CRS_CODE          FROM CLASS          GROUP BY CRS_CODE          ORDER BY SUM(CRS_CREDIT) DESC          LIMIT 1     ) );
SELECT DEPARTMENT.DEPT_NAME, SUM(COURSE.CRS_CREDIT) as total_credits FROM COURSE JOIN DEPARTMENT ON COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME ORDER BY total_credits DESC LIMIT 1;
SELECT COUNT(*)  FROM ENROLL  JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE  WHERE CLASS.CRS_CODE = 'ACCT-211';
SELECT COUNT(*)  FROM ENROLL  JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE  WHERE CLASS.CRS_CODE = 'ACCT-211';
SELECT DISTINCT S.STU_FNAME  FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS C ON E.CLASS_CODE = C.CLASS_CODE JOIN COURSE CR ON C.CRS_CODE = CR.CRS_CODE WHERE CR.CRS_CODE = 'ACCT-211';
SELECT DISTINCT S.STU_FNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS C ON E.CLASS_CODE = C.CLASS_CODE JOIN COURSE Crs ON C.CRS_CODE = Crs.CRS_CODE WHERE Crs.CRS_CODE = 'ACCT-211';
SELECT S.STU_FNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS C ON E.CLASS_CODE = C.CLASS_CODE JOIN COURSE Cr ON C.CRS_CODE = Cr.CRS_CODE WHERE Cr.CRS_DESCRIPTION = 'ACCT-211' AND E.ENROLL_GRADE = 'C'
SELECT S.STU_FNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS C ON E.CLASS_CODE = C.CLASS_CODE JOIN COURSE Cr ON C.CRS_CODE = Cr.CRS_CODE WHERE Cr.CRS_DESCRIPTION = 'ACCT-211' AND E.ENROLL_GRADE = 'C'
SELECT COUNT(*) FROM EMPLOYEE;
SELECT COUNT(*) FROM EMPLOYEE;
SELECT COUNT(*)  FROM PROFESSOR  WHERE PROF_HIGH_DEGREE = 'Ph.D.'
SELECT COUNT(*)  FROM PROFESSOR  WHERE PROF_HIGH_DEGREE = 'Ph.D.'
SELECT COUNT(*)  FROM STUDENT S, ENROLL E, CLASS C, PROFESSOR P, DEPARTMENT D  WHERE S.STU_NUM = E.STU_NUM  AND E.CLASS_CODE = C.CLASS_CODE  AND C.PROF_NUM = P.EMP_NUM  AND P.DEPT_CODE = D.DEPT_CODE  AND D.DEPT_NAME = 'Accounting';
SELECT COUNT(*)  FROM STUDENT s JOIN ENROLL e ON s.STU_NUM = e.STU_NUM JOIN CLASS c ON e.CLASS_CODE = c.CLASS_CODE JOIN PROFESSOR p ON c.PROF_NUM = p.EMP_NUM JOIN DEPARTMENT d ON p.DEPT_CODE = d.DEPT_CODE WHERE d.DEPT_NAME = 'Accounting';
SELECT DEPARTMENT.DEPT_NAME FROM DEPARTMENT JOIN COURSE ON DEPARTMENT.DEPT_CODE = COURSE.DEPT_CODE JOIN CLASS ON COURSE.CRS_CODE = CLASS.CRS_CODE JOIN ENROLL ON CLASS.CLASS_CODE = ENROLL.CLASS_CODE GROUP BY DEPARTMENT.DEPT_NAME ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DEPARTMENT.DEPT_NAME FROM DEPARTMENT JOIN STUDENT ON DEPARTMENT.DEPT_CODE = STUDENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME ORDER BY COUNT(STUDENT.STU_NUM) DESC LIMIT 1;
SELECT DEPT_NAME  FROM DEPARTMENT  ORDER BY DEPT_NAME;
SELECT DEPT_NAME FROM DEPARTMENT ORDER BY DEPT_NAME;
SELECT CRS_CODE  FROM CLASS  WHERE CLASS_ROOM = 'KLR209';
SELECT DISTINCT c.CRS_CODE  FROM CLASS c  WHERE c.CLASS_ROOM = 'KLR209';
SELECT EMP_FNAME  FROM EMPLOYEE  WHERE EMP_JOBCODE = 'PROF'  ORDER BY EMP_DOB;
SELECT EMP_FNAME  FROM EMPLOYEE  WHERE EMP_JOBCODE = 'PROF'  ORDER BY EMP_DOB;
SELECT T1.EMP_FNAME, T2.PROF_OFFICE  FROM EMPLOYEE AS T1  JOIN PROFESSOR AS T2 ON T1.EMP_NUM = T2.EMP_NUM  ORDER BY T1.EMP_FNAME ASC;
SELECT P.EMP_FNAME, P.PROF_OFFICE  FROM PROFESSOR AS P  JOIN EMPLOYEE AS E ON P.EMP_NUM = E.EMP_NUM  ORDER BY P.EMP_FNAME;
SELECT EMP_FNAME, EMP_LNAME  FROM EMPLOYEE  WHERE EMP_DOB = (SELECT MIN(EMP_DOB) FROM EMPLOYEE);
SELECT EMP_FNAME, EMP_LNAME  FROM EMPLOYEE  WHERE EMP_DOB = (SELECT MIN(EMP_DOB) FROM EMPLOYEE);
SELECT STU_FNAME, STU_LNAME, STU_GPA  FROM STUDENT  WHERE STU_GPA > 3  ORDER BY STU_DOB DESC  LIMIT 1;
SELECT STU_FNAME, STU_LNAME, STU_GPA  FROM STUDENT  WHERE STU_GPA > 3  ORDER BY STU_DOB DESC  LIMIT 1;
SELECT DISTINCT S.STU_FNAME  FROM STUDENT S  JOIN ENROLL E ON S.STU_NUM = E.STU_NUM  WHERE E.ENROLL_GRADE = 'C';
SELECT DISTINCT S.STU_FNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM WHERE E.ENROLL_GRADE = 'C';
SELECT DEPT_NAME  FROM DEPARTMENT  WHERE DEPT_CODE IN (     SELECT DEPT_CODE      FROM PROFESSOR      GROUP BY DEPT_CODE      HAVING COUNT(*) = (         SELECT COUNT(*)          FROM PROFESSOR          GROUP BY DEPT_CODE          ORDER BY COUNT(*) ASC          LIMIT 1     ) )
SELECT DEPT_NAME  FROM DEPARTMENT  WHERE DEPT_CODE IN (     SELECT DEPT_CODE      FROM PROFESSOR      GROUP BY DEPT_CODE      ORDER BY COUNT(*)      LIMIT 1 )
SELECT DEPT_NAME  FROM DEPARTMENT  WHERE DEPT_CODE = (     SELECT DEPT_CODE      FROM PROFESSOR      WHERE PROF_HIGH_DEGREE = 'Ph.D.'      GROUP BY DEPT_CODE      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT DEPARTMENT.DEPT_NAME FROM DEPARTMENT JOIN PROFESSOR ON DEPARTMENT.DEPT_CODE = PROFESSOR.DEPT_CODE WHERE PROFESSOR.PROF_HIGH_DEGREE = 'Ph.D.' GROUP BY DEPARTMENT.DEPT_NAME ORDER BY COUNT(PROFESSOR.EMP_NUM) DESC LIMIT 1;
SELECT DISTINCT P.EMP_FNAME  FROM PROFESSOR P LEFT JOIN EMPLOYEE E ON P.EMP_NUM = E.EMP_NUM LEFT JOIN CLASS C ON E.EMP_NUM = C.PROF_NUM WHERE C.CLASS_CODE IS NULL;
SELECT P.EMP_FNAME  FROM PROFESSOR P  WHERE P.EMP_NUM NOT IN (SELECT C.PROF_NUM FROM CLASS C)
Error: 第 3276 个样本有 2 个SQL。
SELECT DISTINCT P.EMP_FNAME FROM PROFESSOR P JOIN EMPLOYEE E ON P.EMP_NUM = E.EMP_NUM WHERE P.DEPT_CODE IN (SELECT DEPT_CODE FROM DEPARTMENT WHERE DEPT_NAME = 'History') AND E.EMP_NUM NOT IN (SELECT PROF_NUM FROM CLASS)
SELECT EMPLOYEE.EMP_LNAME, PROFESSOR.PROF_OFFICE  FROM EMPLOYEE  JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM  JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE  WHERE DEPARTMENT.DEPT_NAME = 'HISTORY';
SELECT EMPLOYEE.EMP_LNAME, PROFESSOR.PROF_OFFICE  FROM EMPLOYEE  JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM  JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE  WHERE DEPARTMENT.DEPT_NAME = 'HISTORY';
SELECT DEPARTMENT.DEPT_NAME, PROFESSOR.PROF_OFFICE  FROM PROFESSOR  JOIN DEPARTMENT ON PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE  WHERE PROFESSOR.EMP_NUM = (SELECT EMP_NUM FROM EMPLOYEE WHERE EMP_LNAME = 'Heffington')
SELECT DEPARTMENT.DEPT_NAME, PROFESSOR.PROF_OFFICE  FROM DEPARTMENT  JOIN PROFESSOR ON DEPARTMENT.DEPT_CODE = PROFESSOR.DEPT_CODE  JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM  WHERE EMPLOYEE.EMP_LNAME = 'Heffington';
SELECT EMP_LNAME, EMP_HIREDATE  FROM EMPLOYEE  WHERE EMP_NUM IN (     SELECT EMP_NUM      FROM PROFESSOR      WHERE PROF_OFFICE = 'DRE 102' );
SELECT T1.EMP_LNAME, T1.EMP_HIREDATE  FROM EMPLOYEE AS T1  JOIN PROFESSOR AS T2  ON T1.EMP_NUM = T2.EMP_NUM  WHERE T2.PROF_OFFICE = 'DRE 102'
SELECT ENROLL.CLASS_CODE, COURSE.CRS_CODE  FROM ENROLL  JOIN STUDENT ON ENROLL.STU_NUM = STUDENT.STU_NUM  JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE  JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE  WHERE STUDENT.STU_LNAME = 'Smithson';
SELECT ENROLL.CLASS_CODE, COURSE.CRS_CODE  FROM ENROLL  JOIN STUDENT ON ENROLL.STU_NUM = STUDENT.STU_NUM  JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE  JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE  WHERE STUDENT.STU_LNAME = 'Smithson';
SELECT T3.CRS_DESCRIPTION, T3.CRS_CREDIT FROM ENROLL AS T1  JOIN CLASS AS T2 ON T1.CLASS_CODE = T2.CLASS_CODE  JOIN COURSE AS T3 ON T2.CRS_CODE = T3.CRS_CODE  JOIN STUDENT AS T4 ON T1.STU_NUM = T4.STU_NUM  WHERE T4.STU_LNAME = 'Smithson';
SELECT T2.crs_credit, T2.crs_description FROM ENROLL AS T1 JOIN CLASS AS T2 ON T1.class_code = T2.class_code JOIN COURSE AS T3 ON T2.crs_code = T3.crs_code JOIN STUDENT AS T4 ON T4.stu_num = T1.stu_num WHERE T4.stu_lname = 'Smithson'
SELECT COUNT(*)  FROM PROFESSOR  WHERE PROF_HIGH_DEGREE IN ('Ph.D.', 'MA');
SELECT COUNT(*)  FROM PROFESSOR  WHERE PROF_HIGH_DEGREE IN ('Ph.D.', 'Masters');
SELECT COUNT(*)  FROM PROFESSOR  WHERE DEPT_CODE IN ('ACC', 'BIO');
SELECT COUNT(*)  FROM PROFESSOR  WHERE DEPT_CODE IN ('ACC', 'BIO');
SELECT P.EMP_FNAME  FROM PROFESSOR P  JOIN EMPLOYEE E ON P.EMP_NUM = E.EMP_NUM  JOIN CLASS C ON P.EMP_NUM = C.PROF_NUM  JOIN COURSE Cr ON C.CRS_CODE = Cr.CRS_CODE  WHERE Cr.CRS_CODE IN ('CIS-220', 'QM-261')  GROUP BY P.EMP_NUM  HAVING COUNT(C.CRS_CODE) = 2;
SELECT DISTINCT P.EMP_FNAME  FROM PROFESSOR P JOIN EMPLOYEE E ON P.EMP_NUM = E.EMP_NUM JOIN CLASS C ON C.PROF_NUM = E.EMP_NUM JOIN COURSE Cr ON Cr.CRS_CODE = C.CRS_CODE WHERE Cr.CRS_CODE IN ('CIS-220', 'QM-261') GROUP BY P.EMP_FNAME HAVING COUNT(DISTINCT Cr.CRS_CODE) = 2;
SELECT DISTINCT S.STU_FNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS C ON E.CLASS_CODE = C.CLASS_CODE JOIN COURSE Cr ON C.CRS_CODE = Cr.CRS_CODE JOIN DEPARTMENT D ON Cr.DEPT_CODE = D.DEPT_CODE WHERE D.DEPT_NAME IN ('Accounting', 'Computer Info. Systems')
SELECT DISTINCT S.STU_FNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS C ON E.CLASS_CODE = C.CLASS_CODE JOIN COURSE CR ON C.CRS_CODE = CR.CRS_CODE JOIN DEPARTMENT D ON CR.DEPT_CODE = D.DEPT_CODE WHERE D.DEPT_NAME IN ('Accounting', 'Computer Information Systems');
SELECT AVG(STUDENT.STU_GPA)  FROM STUDENT  JOIN ENROLL ON STUDENT.STU_NUM = ENROLL.STU_NUM  JOIN CLASS ON ENROLL.CLASS_CODE = CLASS.CLASS_CODE  JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE  WHERE COURSE.CRS_CODE = 'ACCT-211';
SELECT AVG(STU_GPA)  FROM STUDENT  WHERE STU_NUM IN (     SELECT STU_NUM      FROM ENROLL      WHERE CLASS_CODE IN (         SELECT CLASS_CODE          FROM CLASS          WHERE CRS_CODE = 'ACCT-211'     ) );
SELECT STU_FNAME, STU_GPA, STU_PHONE  FROM STUDENT  ORDER BY STU_GPA DESC  LIMIT 5;
SELECT STU_FNAME, STU_GPA, STU_PHONE  FROM STUDENT  ORDER BY STU_GPA DESC  LIMIT 5;
SELECT DEPARTMENT.DEPT_NAME FROM DEPARTMENT JOIN STUDENT ON DEPARTMENT.DEPT_CODE = STUDENT.DEPT_CODE WHERE STUDENT.STU_GPA = (     SELECT MIN(STU_GPA)     FROM STUDENT );
SELECT DEPARTMENT.DEPT_NAME  FROM DEPARTMENT  JOIN STUDENT ON DEPARTMENT.DEPT_CODE = STUDENT.DEPT_CODE  WHERE STUDENT.STU_GPA = (SELECT MIN(STU_GPA) FROM STUDENT)
SELECT STU_FNAME, STU_GPA  FROM STUDENT  WHERE STU_GPA < (SELECT AVG(STU_GPA) FROM STUDENT);
SELECT STU_FNAME, STU_GPA  FROM STUDENT  WHERE STU_GPA < (SELECT AVG(STU_GPA) FROM STUDENT);
SELECT DEPARTMENT.DEPT_NAME, DEPARTMENT.DEPT_ADDRESS  FROM DEPARTMENT  JOIN STUDENT ON DEPARTMENT.DEPT_CODE = STUDENT.DEPT_CODE  GROUP BY DEPARTMENT.DEPT_CODE  ORDER BY COUNT(STUDENT.STU_NUM) DESC  LIMIT 1;
SELECT DEPARTMENT.DEPT_NAME, DEPARTMENT.DEPT_ADDRESS  FROM DEPARTMENT  JOIN STUDENT ON DEPARTMENT.DEPT_CODE = STUDENT.DEPT_CODE  GROUP BY DEPARTMENT.DEPT_NAME, DEPARTMENT.DEPT_ADDRESS  ORDER BY COUNT(STUDENT.STU_NUM) DESC  LIMIT 1;
SELECT DEPARTMENT.DEPT_NAME, DEPARTMENT.DEPT_ADDRESS, COUNT(STUDENT.STU_NUM) AS NUM_STUDENTS FROM DEPARTMENT JOIN STUDENT ON DEPARTMENT.DEPT_CODE = STUDENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_CODE ORDER BY NUM_STUDENTS DESC LIMIT 3;
SELECT DEPARTMENT.DEPT_NAME, DEPARTMENT.DEPT_ADDRESS, COUNT(STUDENT.STU_NUM) AS STUDENT_COUNT FROM DEPARTMENT JOIN STUDENT ON DEPARTMENT.DEPT_CODE = STUDENT.DEPT_CODE GROUP BY DEPARTMENT.DEPT_NAME, DEPARTMENT.DEPT_ADDRESS ORDER BY STUDENT_COUNT DESC LIMIT 3;
SELECT T1.EMP_FNAME, T2.PROF_OFFICE  FROM EMPLOYEE AS T1  JOIN PROFESSOR AS T2 ON T1.EMP_NUM = T2.EMP_NUM  WHERE T2.DEPT_CODE = 'HISTORY' AND T2.PROF_HIGH_DEGREE = 'Ph.D.'
SELECT EMP_FNAME, PROF_OFFICE  FROM PROFESSOR  JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM  WHERE DEPT_CODE = 'HISTORY' AND PROF_HIGH_DEGREE = 'Ph.D';
SELECT DISTINCT EMPLOYEE.EMP_FNAME, CLASS.CRS_CODE FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM;
SELECT EMPLOYEE.EMP_FNAME, CLASS.CRS_CODE  FROM EMPLOYEE  JOIN CLASS ON EMPLOYEE.EMP_NUM = CLASS.PROF_NUM;
SELECT DISTINCT E.EMP_FNAME, C.CRS_DESCRIPTION FROM EMPLOYEE E JOIN PROFESSOR P ON E.EMP_NUM = P.EMP_NUM JOIN CLASS CL ON P.EMP_NUM = CL.PROF_NUM JOIN COURSE CR ON CL.CRS_CODE = CR.CRS_CODE;
SELECT EMPLOYEE.EMP_FNAME, COURSE.CRS_DESCRIPTION FROM EMPLOYEE JOIN PROFESSOR ON EMPLOYEE.EMP_NUM = PROFESSOR.EMP_NUM JOIN CLASS ON PROFESSOR.EMP_NUM = CLASS.PROF_NUM JOIN COURSE ON CLASS.CRS_CODE = COURSE.CRS_CODE;
SELECT DISTINCT E.EMP_FNAME, P.PROF_OFFICE, C.CRS_DESCRIPTION FROM EMPLOYEE E JOIN PROFESSOR P ON E.EMP_NUM = P.EMP_NUM JOIN CLASS CL ON P.EMP_NUM = CL.PROF_NUM JOIN COURSE CR ON CL.CRS_CODE = CR.CRS_CODE;
SELECT DISTINCT E.EMP_FNAME, P.PROF_OFFICE  FROM EMPLOYEE E  JOIN PROFESSOR P ON E.EMP_NUM = P.EMP_NUM  JOIN CLASS C ON E.EMP_NUM = C.PROF_NUM;
SELECT DISTINCT E.EMP_FNAME, P.PROF_OFFICE, C.CRS_DESCRIPTION, D.DEPT_NAME FROM EMPLOYEE E JOIN PROFESSOR P ON E.EMP_NUM = P.EMP_NUM JOIN CLASS CL ON CL.PROF_NUM = E.EMP_NUM JOIN COURSE CR ON CR.CRS_CODE = CL.CRS_CODE JOIN DEPARTMENT D ON D.DEPT_CODE = CR.DEPT_CODE;
SELECT      E.EMP_FNAME AS Instructor_First_Name,     P.PROF_OFFICE AS Office_Location,     D.DEPT_NAME AS Department,     C.CRS_DESCRIPTION AS Course_Description FROM      EMPLOYEE E JOIN      PROFESSOR P ON E.EMP_NUM = P.EMP_NUM JOIN      DEPARTMENT D ON P.DEPT_CODE = D.DEPT_CODE JOIN      CLASS CL ON CL.PROF_NUM = E.EMP_NUM JOIN      COURSE C ON CL.CRS_CODE = C.CRS_CODE;
SELECT DISTINCT S.STU_FNAME, S.STU_LNAME, C.CRS_DESCRIPTION FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS CL ON E.CLASS_CODE = CL.CLASS_CODE JOIN COURSE C ON CL.CRS_CODE = C.CRS_CODE;
SELECT DISTINCT s.STU_FNAME, s.STU_LNAME, c.CRS_DESCRIPTION FROM STUDENT s JOIN ENROLL e ON s.STU_NUM = e.STU_NUM JOIN CLASS cl ON e.CLASS_CODE = cl.CLASS_CODE JOIN COURSE c ON cl.CRS_CODE = c.CRS_CODE;
SELECT DISTINCT s.STU_FNAME, s.STU_LNAME  FROM STUDENT s JOIN ENROLL e ON s.STU_NUM = e.STU_NUM  WHERE e.ENROLL_GRADE IN ('A', 'C');
SELECT DISTINCT s.STU_FNAME, s.STU_LNAME FROM STUDENT s JOIN ENROLL e ON s.STU_NUM = e.STU_NUM WHERE e.ENROLL_GRADE IN ('A', 'C');
SELECT P.EMP_FNAME, C.CLASS_ROOM FROM PROFESSOR P JOIN EMPLOYEE E ON P.EMP_NUM = E.EMP_NUM JOIN CLASS C ON P.EMP_NUM = C.PROF_NUM JOIN COURSE CR ON C.CRS_CODE = CR.CRS_CODE WHERE CR.DEPT_CODE = 'Accounting'
SELECT DISTINCT E.EMP_FNAME, C.CLASS_ROOM  FROM EMPLOYEE E  JOIN PROFESSOR P ON E.EMP_NUM = P.EMP_NUM  JOIN CLASS CL ON CL.PROF_NUM = E.EMP_NUM  JOIN COURSE CR ON CR.CRS_CODE = CL.CRS_CODE  WHERE P.DEPT_CODE = 'ACC'
SELECT P.EMP_FNAME, P.PROF_HIGH_DEGREE FROM PROFESSOR P JOIN EMPLOYEE E ON P.EMP_NUM = E.EMP_NUM JOIN CLASS C ON E.EMP_NUM = C.PROF_NUM JOIN COURSE CR ON C.CRS_CODE = CR.CRS_CODE JOIN DEPARTMENT D ON CR.DEPT_CODE = D.DEPT_CODE WHERE D.DEPT_NAME = 'Computer Info. Systems';
SELECT DISTINCT P.EMP_FNAME, P.PROF_HIGH_DEGREE  FROM PROFESSOR P  JOIN EMPLOYEE E ON P.EMP_NUM = E.EMP_NUM  JOIN DEPARTMENT D ON P.DEPT_CODE = D.DEPT_CODE  WHERE D.DEPT_NAME = 'Computer Information Systems';
SELECT S.STU_LNAME  FROM STUDENT S  JOIN ENROLL E ON S.STU_NUM = E.STU_NUM  WHERE E.ENROLL_GRADE = 'A' AND E.CLASS_CODE = '10018';
SELECT S.STU_LNAME  FROM STUDENT S  JOIN ENROLL E ON S.STU_NUM = E.STU_NUM  WHERE E.ENROLL_GRADE = 'A' AND E.CLASS_CODE = '10018';
SELECT EMP_FNAME, PROF_OFFICE  FROM PROFESSOR  JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM  WHERE DEPT_CODE = 'HISTORY' AND PROF_HIGH_DEGREE != 'Ph.D.';
SELECT EMP_FNAME, PROF_OFFICE  FROM PROFESSOR  JOIN EMPLOYEE ON PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM  WHERE DEPT_CODE = 'HISTORY' AND PROF_HIGH_DEGREE != 'Ph.D.'
SELECT P.EMP_FNAME FROM PROFESSOR P JOIN EMPLOYEE E ON P.EMP_NUM = E.EMP_NUM JOIN CLASS C ON E.EMP_NUM = C.PROF_NUM GROUP BY P.EMP_FNAME HAVING COUNT(C.CLASS_CODE) > 1;
SELECT T1.EMP_FNAME  FROM EMPLOYEE AS T1  JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM  GROUP BY T2.PROF_NUM  HAVING COUNT(*) > 1
SELECT S.STU_FNAME FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM WHERE (     SELECT COUNT(*)     FROM ENROLL E2     WHERE E.STU_NUM = E2.STU_NUM ) = 1 GROUP BY S.STU_FNAME;
SELECT STU_FNAME FROM STUDENT WHERE STU_NUM IN (     SELECT STU_NUM     FROM ENROLL     GROUP BY STU_NUM     HAVING COUNT(DISTINCT CRS_CODE) = 1 )
SELECT DEPARTMENT.DEPT_NAME  FROM DEPARTMENT  JOIN COURSE ON DEPARTMENT.DEPT_CODE = COURSE.DEPT_CODE  WHERE COURSE.CRS_DESCRIPTION LIKE '%Statistics%';
SELECT DEPARTMENT.DEPT_NAME  FROM DEPARTMENT  JOIN COURSE ON DEPARTMENT.DEPT_CODE = COURSE.DEPT_CODE  WHERE COURSE.CRS_DESCRIPTION LIKE '%Statistics%';
SELECT S.STU_FNAME  FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS C ON E.CLASS_CODE = C.CLASS_CODE JOIN COURSE Cr ON C.CRS_CODE = Cr.CRS_CODE WHERE S.STU_LNAME LIKE 'S%' AND Cr.CRS_DESCRIPTION = 'ACCT-211'
SELECT S.STU_FNAME  FROM STUDENT S JOIN ENROLL E ON S.STU_NUM = E.STU_NUM JOIN CLASS C ON E.CLASS_CODE = C.CLASS_CODE JOIN COURSE Cr ON C.CRS_CODE = Cr.CRS_CODE WHERE S.STU_LNAME LIKE 'S%' AND Cr.CRS_DESCRIPTION = 'ACCT-211'
SELECT COUNT(*) FROM club;
SELECT COUNT(*) FROM club;
SELECT DISTINCT Region FROM club ORDER BY Region ASC;
SELECT DISTINCT Region FROM club ORDER BY Region ASC;
SELECT AVG(Gold) FROM club_rank;
SELECT AVG(Gold) FROM club_rank;
SELECT Competition_type, Country FROM competition;
SELECT Competition_type, Country FROM competition;
SELECT DISTINCT Year FROM competition WHERE Competition_type != 'Tournament';
SELECT DISTINCT Year FROM competition WHERE Competition_type != 'tournament';
SELECT MAX(Silver) AS Max_Silver, MIN(Silver) AS Min_Silver  FROM club_rank;
SELECT MAX(Silver) AS Max_Silver, MIN(Silver) AS Min_Silver  FROM club_rank;
SELECT COUNT(*)  FROM club_rank  WHERE Gold + Silver + Bronze < 10;
SELECT COUNT(*)  FROM club c  JOIN club_rank cr ON c.Club_ID = cr.Club_ID  WHERE cr.Total < 10;
SELECT name  FROM club  ORDER BY Start_year ASC;
SELECT name FROM club ORDER BY Start_year ASC;
SELECT name  FROM club  ORDER BY name DESC;
SELECT name FROM club ORDER BY name DESC;
SELECT C.name AS Club_Name, P.name AS Player_Name  FROM club AS C  JOIN player AS P ON C.Club_ID = P.Club_ID;
SELECT name, Player_ID FROM club  JOIN player ON club.Club_ID = player.Club_ID;
SELECT DISTINCT c.name  FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Position = 'Right Wing';
SELECT DISTINCT c.name  FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Position = 'Right Wing';
SELECT AVG(T2.Points)  FROM club AS T1  JOIN player AS T2 ON T1.Club_ID = T2.Club_ID  WHERE T1.name = 'AIB';
SELECT AVG(Points)  FROM player  WHERE Club_ID = (SELECT Club_ID FROM club WHERE name = 'AIB');
SELECT Position, AVG(Points)  FROM player  GROUP BY Position;
SELECT player.Position, AVG(player.Points)  FROM player  GROUP BY player.Position;
SELECT p.Position  FROM player p GROUP BY p.Position  HAVING AVG(p.Points) > 20;
SELECT p.Position FROM player p GROUP BY p.Position HAVING AVG(p.Points) > 20;
SELECT Competition_type, COUNT(*)  FROM competition  GROUP BY Competition_type;
SELECT Competition_type, COUNT(*)  FROM competition  GROUP BY Competition_type;
SELECT Competition_type, COUNT(*) as count FROM competition GROUP BY Competition_type ORDER BY count DESC LIMIT 1;
SELECT Competition_type, COUNT(*) as count  FROM competition  GROUP BY Competition_type  ORDER BY count DESC  LIMIT 1;
SELECT Competition_type  FROM competition  GROUP BY Competition_type  HAVING COUNT(*) <= 5;
SELECT Competition_type  FROM competition  GROUP BY Competition_type  HAVING COUNT(Competition_ID) <= 5;
SELECT name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
SELECT name FROM club WHERE Club_ID NOT IN (SELECT DISTINCT Club_ID FROM player)
SELECT Position  FROM player  WHERE Points > 20  INTERSECT  SELECT Position  FROM player  WHERE Points < 10;
Error: 第 3375 个样本有 2 个SQL。
SELECT SUM(Points) FROM player;
SELECT SUM(Points) FROM player;
SELECT COUNT(DISTINCT Position) FROM player;
SELECT COUNT(DISTINCT Position) FROM player;
SELECT name  FROM player  WHERE Points > (SELECT AVG(Points) FROM player);
SELECT name  FROM player  WHERE Points > (SELECT AVG(Points) FROM player);
SELECT Position, COUNT(*)  FROM player  WHERE Points < 30  GROUP BY Position;
SELECT Position, COUNT(*)  FROM player  WHERE Points < 30  GROUP BY Position;
SELECT Country  FROM competition  WHERE Competition_type = 'Tournament'  GROUP BY Country  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Country  FROM competition  GROUP BY Country  ORDER BY COUNT(Competition_ID) DESC  LIMIT 1;
SELECT Country  FROM competition  WHERE Competition_type = 'Friendly'  INTERSECT  SELECT Country  FROM competition  WHERE Competition_type = 'Tournament'
SELECT      Country  FROM      competition  WHERE      Competition_type = 'friendly'  INTERSECT  SELECT      Country  FROM      competition  WHERE      Competition_type = 'tournament';
Error: 第 3388 个样本有 2 个SQL。
SELECT Country FROM competition WHERE Competition_type != 'Friendly' GROUP BY Country HAVING COUNT(*) = (SELECT COUNT(*) FROM competition WHERE Competition_type != 'Friendly')
SELECT SUM(Num_of_Component) FROM furniture
SELECT T1.Name, T1.Furniture_ID  FROM furniture AS T1  JOIN furniture_manufacte AS T2  ON T1.Furniture_ID = T2.Furniture_ID  WHERE T1.Market_Rate = (SELECT MAX(Market_Rate) FROM furniture)
SELECT SUM(Market_Rate)  FROM (   SELECT Market_Rate   FROM furniture   ORDER BY Market_Rate DESC   LIMIT 2 ) as TopTwo
SELECT f.Name, f.Num_of_Component  FROM furniture AS f WHERE f.Num_of_Component > 10;
SELECT T1.Name, T1.Num_of_Component  FROM furniture AS T1  JOIN furniture_manufacte AS T2  ON T1.Furniture_ID = T2.Furniture_ID  GROUP BY T2.Furniture_ID  ORDER BY AVG(T2.Price_in_Dollar) ASC, T1.Num_of_Component ASC  LIMIT 1;
SELECT f.Name  FROM furniture f  JOIN furniture_manufacte fm ON f.Furniture_ID = fm.Furniture_ID  WHERE fm.Price_in_Dollar < (SELECT MAX(Price_in_Dollar) FROM furniture_manufacte)
SELECT Name, Open_Year  FROM manufacturer  WHERE Num_of_Shops = (SELECT MAX(Num_of_Shops) FROM manufacturer);
SELECT AVG(Num_of_Factories)  FROM manufacturer  WHERE Num_of_Shops > 20;
SELECT Manufacturer_ID, Name  FROM manufacturer  ORDER BY Open_Year;
SELECT Name, Open_Year  FROM manufacturer  WHERE Num_of_Factories < 10 OR Num_of_Shops > 10;
SELECT AVG(Num_of_Factories), MAX(Num_of_Shops) FROM manufacturer WHERE Open_Year < 1990;
SELECT T1.Manufacturer_ID, T1.Num_of_Shops  FROM manufacturer AS T1  JOIN furniture_manufacte AS T2 ON T1.Manufacturer_ID = T2.Manufacturer_ID  JOIN furniture AS T3 ON T2.Furniture_ID = T3.Furniture_ID  WHERE T2.Price_in_Dollar = (SELECT MAX(Price_in_Dollar) FROM furniture_manufacte)
SELECT manufacturer.Name, COUNT(furniture.Furniture_ID) AS Num_of_Furniture_Types FROM manufacturer JOIN furniture_manufacte ON manufacturer.Manufacturer_ID = furniture_manufacte.Manufacturer_ID JOIN furniture ON furniture_manufacte.Furniture_ID = furniture.Furniture_ID GROUP BY manufacturer.Name;
SELECT T2.Name, T1.Price_in_Dollar  FROM furniture_manufacte AS T1  JOIN furniture AS T2 ON T1.Furniture_ID = T2.Furniture_ID;
SELECT f.Name, f.Market_Rate  FROM furniture f LEFT JOIN furniture_manufacte fm ON f.Furniture_ID = fm.Furniture_ID WHERE fm.Furniture_ID IS NULL;
SELECT m.Name  FROM manufacturer m JOIN furniture_manufacte fm ON m.Manufacturer_ID = fm.Manufacturer_ID  JOIN furniture f ON fm.Furniture_ID = f.Furniture_ID  WHERE f.Num_of_Component < 6  GROUP BY m.Name HAVING COUNT(f.Furniture_ID) > 0  AND EXISTS (     SELECT 1      FROM furniture_manufacte fm2      JOIN furniture f2 ON fm2.Furniture_ID = f2.Furniture_ID      WHERE m.Manufacturer_ID = fm2.Manufacturer_ID      AND f2.Num_of_Component > 10 );
SELECT e.FIRST_NAME, d.DEPARTMENT_NAME  FROM employees e  JOIN departments d  ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;
SELECT e.FIRST_NAME, d.DEPARTMENT_NAME  FROM employees e  JOIN departments d  ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;
SELECT FIRST_NAME, LAST_NAME, SALARY  FROM employees  WHERE SALARY < 6000;
Error: 第 3409 个样本有 2 个SQL。
SELECT first_name, department_id  FROM employees  WHERE last_name = 'McEwen';
SELECT FIRST_NAME, DEPARTMENT_ID  FROM employees  WHERE LAST_NAME = 'McEwen';
SELECT * FROM employees WHERE DEPARTMENT_ID IS NULL;
SELECT * FROM employees WHERE DEPARTMENT_ID IS NULL;
SELECT * FROM departments WHERE department_name = 'Marketing';
SELECT * FROM departments WHERE department_name = 'Marketing';
SELECT HIRE_DATE  FROM employees  WHERE NOT FIRST_NAME LIKE '%M%';
SELECT HIRE_DATE  FROM employees  WHERE NOT FIRST_NAME LIKE '%M%';
SELECT first_name, last_name, hire_date, salary, department_id  FROM employees  WHERE first_name NOT LIKE '%M%';
SELECT FIRST_NAME, LAST_NAME, HIRE_DATE, SALARY, DEPARTMENT_ID  FROM employees  WHERE FIRST_NAME NOT LIKE '%M%';
SELECT first_name, last_name, hire_date, salary, department_id  FROM employees  WHERE first_name NOT LIKE '%M%'  ORDER BY department_id ASC;
SELECT FIRST_NAME, LAST_NAME, HIRE_DATE, SALARY, DEPARTMENT_ID  FROM employees  WHERE FIRST_NAME NOT LIKE '%M%'  ORDER BY DEPARTMENT_ID ASC;
SELECT PHONE_NUMBER  FROM employees  WHERE SALARY BETWEEN 8000 AND 12000;
SELECT PHONE_NUMBER  FROM employees  WHERE SALARY BETWEEN 8000 AND 12000;
SELECT * FROM employees  WHERE SALARY BETWEEN 8000 AND 12000  AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40);
SELECT * FROM employees  WHERE SALARY BETWEEN 8000 AND 12000  AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40);
SELECT FIRST_NAME, LAST_NAME, SALARY  FROM employees  WHERE COMMISSION_PCT IS NULL;
SELECT FIRST_NAME, LAST_NAME, SALARY  FROM employees  WHERE COMMISSION_PCT IS NULL;
SELECT first_name, last_name, salary  FROM employees  WHERE first_name LIKE '%m';
Error: 第 3429 个样本有 2 个SQL。
SELECT EMPLOYEE_ID, HIRE_DATE  FROM employees  WHERE HIRE_DATE BETWEEN '2007-11-05' AND '2009-07-05';
SELECT EMPLOYEE_ID, JOB_ID, HIRE_DATE  FROM employees  WHERE HIRE_DATE BETWEEN '2007-11-06' AND '2009-07-05';
SELECT FIRST_NAME, LAST_NAME  FROM employees  WHERE DEPARTMENT_ID IN (70, 90);
SELECT FIRST_NAME, LAST_NAME  FROM employees  WHERE DEPARTMENT_ID IN (70, 90);
SELECT EMPLOYEE_ID, SALARY, MANAGER_ID  FROM employees  WHERE MANAGER_ID IS NOT NULL;
SELECT salary, manager_id FROM employees WHERE manager_id IS NOT NULL;
SELECT * FROM employees  WHERE hire_date < '2002-06-21';
SELECT * FROM employees WHERE hire_date < '2002-06-21';
SELECT * FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SALARY DESC;
SELECT * FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SALARY DESC;
SELECT * FROM employees WHERE HIRE_DATE > '1987-09-07';
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, HIRE_DATE  FROM employees  WHERE HIRE_DATE > '1987-09-07';
SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > 9000;
Error: 第 3443 个样本有 2 个SQL。
SELECT JOB_TITLE, (MAX_SALARY - MIN_SALARY) AS SALARY_DIFFERENCE  FROM jobs  WHERE MAX_SALARY BETWEEN 12000 AND 18000;
SELECT JOB_TITLE, MIN_SALARY, MAX_SALARY FROM jobs WHERE MAX_SALARY BETWEEN 12000 AND 18000;
SELECT email  FROM employees  WHERE commission_pct IS NULL  AND salary BETWEEN 7000 AND 12000  AND department_id = 50;
SELECT email  FROM employees  WHERE commission_pct IS NULL  AND salary BETWEEN 7000 AND 12000  AND department_id = 50;
SELECT e.EMPLOYEE_ID, jh.END_DATE  FROM employees e JOIN job_history jh ON e.EMPLOYEE_ID = jh.EMPLOYEE_ID;
SELECT e.EMPLOYEE_ID, jh.END_DATE  FROM employees e JOIN job_history jh ON e.EMPLOYEE_ID = jh.EMPLOYEE_ID WHERE jh.END_DATE IN (     SELECT MAX(jh2.END_DATE)     FROM job_history jh2     WHERE jh.EMPLOYEE_ID = jh2.EMPLOYEE_ID )
SELECT d.DEPARTMENT_NAME FROM departments d JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID WHERE e.COMMISSION_PCT IS NOT NULL GROUP BY d.DEPARTMENT_ID, d.DEPARTMENT_NAME HAVING COUNT(e.EMPLOYEE_ID) > 10;
SELECT DEPARTMENT_ID  FROM employees  GROUP BY DEPARTMENT_ID  HAVING COUNT(*) > 10  AND SUM(COMMISSION_PCT IS NOT NULL) > 0;
SELECT DISTINCT d.DEPARTMENT_ID  FROM departments d JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID WHERE d.MANAGER_ID = e.EMPLOYEE_ID GROUP BY d.DEPARTMENT_ID HAVING COUNT(e.EMPLOYEE_ID) >= 4;
SELECT d.department_id  FROM departments d JOIN employees e ON d.department_id = e.department_id AND d.manager_id = e.employee_id GROUP BY d.department_id HAVING COUNT(e.employee_id) > 3
SELECT departments.DEPARTMENT_NAME, AVG(employees.SALARY) as AVG_SALARY FROM employees JOIN departments ON employees.DEPARTMENT_ID = departments.DEPARTMENT_ID WHERE employees.COMMISSION_PCT IS NOT NULL GROUP BY departments.DEPARTMENT_NAME;
SELECT AVG(SALARY)  FROM employees  WHERE COMMISSION_PCT IS NOT NULL;
SELECT      COUNTRY_ID,      COUNT(CITY) AS NUMBER_OF_CITIES FROM      LOCATIONS GROUP BY      COUNTRY_ID;
SELECT COUNTRY_ID, COUNT(CITY) AS CITY_COUNT FROM locations GROUP BY COUNTRY_ID;
SELECT jh.JOB_ID FROM job_history jh GROUP BY jh.JOB_ID HAVING SUM(jh.END_DATE - jh.START_DATE) > 300 AND COUNT(jh.JOB_ID) >= 2;
SELECT jh1.JOB_ID  FROM job_history jh1 JOIN job_history jh2  ON jh1.JOB_ID = jh2.JOB_ID AND jh1.EMPLOYEE_ID <> jh2.EMPLOYEE_ID WHERE ABS(DATEDIFF(jh1.START_DATE, jh2.END_DATE)) > 300 GROUP BY jh1.JOB_ID HAVING COUNT(jh1.JOB_ID) > 1
SELECT EMPLOYEE_ID FROM job_history GROUP BY EMPLOYEE_ID HAVING COUNT(*) >= 2;
SELECT EMPLOYEE_ID FROM job_history GROUP BY EMPLOYEE_ID HAVING COUNT(*) >= 2;
SELECT e.EMPLOYEE_ID, c.COUNTRY_NAME  FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID WHERE e.EMPLOYEE_ID = <ID>;
SELECT e.EMPLOYEE_ID, c.COUNTRY_NAME  FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID;
SELECT d.DEPARTMENT_NAME, COUNT(e.EMPLOYEE_ID) AS NUM_EMPLOYEES FROM departments d LEFT JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME;
SELECT d.DEPARTMENT_NAME, COUNT(e.EMPLOYEE_ID) AS NUM_EMPLOYEES FROM departments d LEFT JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME;
SELECT j.* FROM jobs j JOIN job_history jh ON j.job_id = jh.job_id JOIN employees e ON e.employee_id = jh.employee_id WHERE e.salary >= 12000;
SELECT jh.* FROM job_history jh JOIN employees e ON jh.employee_id = e.employee_id WHERE e.salary >= 12000;
SELECT jobs.job_title, AVG(employees.salary) as average_salary FROM jobs JOIN employees ON jobs.job_id = employees.job_id GROUP BY jobs.job_title;
SELECT jobs.job_title, AVG(employees.salary) as average_salary FROM jobs  JOIN employees ON jobs.job_id = employees.job_id GROUP BY jobs.job_title;
SELECT first_name, last_name  FROM employees  WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163);
SELECT first_name, last_name  FROM employees  WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163);
SELECT DEPARTMENT_ID, MIN(SALARY)  FROM employees  GROUP BY DEPARTMENT_ID;
SELECT departments.DEPARTMENT_NAME, MIN(employees.SALARY)  FROM employees  JOIN departments ON employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  GROUP BY departments.DEPARTMENT_NAME;
SELECT e.FIRST_NAME, e.LAST_NAME, e.DEPARTMENT_ID FROM employees e JOIN (     SELECT DEPARTMENT_ID, MIN(SALARY) AS min_salary     FROM employees     GROUP BY DEPARTMENT_ID ) m ON e.SALARY = m.min_salary AND e.DEPARTMENT_ID = m.DEPARTMENT_ID;
Error: 第 3475 个样本有 2 个SQL。
SELECT EMPLOYEE_ID  FROM employees  WHERE SALARY > (SELECT AVG(SALARY) FROM employees);
SELECT EMPLOYEE_ID  FROM employees  WHERE SALARY > (SELECT AVG(SALARY) FROM employees);
SELECT EMPLOYEE_ID, SALARY  FROM employees  WHERE MANAGER_ID = (SELECT EMPLOYEE_ID FROM employees WHERE FIRST_NAME = 'Payam');
SELECT e.EMPLOYEE_ID, e.SALARY FROM employees e WHERE e.MANAGER_ID = (     SELECT e2.EMPLOYEE_ID     FROM employees e2     WHERE e2.LAST_NAME = 'Payam' );
SELECT d.department_name FROM departments d JOIN employees e ON d.department_id = e.department_id;
SELECT DISTINCT d.department_name FROM departments d JOIN employees e ON d.department_id = e.department_id;
SELECT e.* FROM employees e JOIN departments d ON e.employee_id = d.manager_id;
SELECT e.* FROM employees e JOIN departments d ON e.employee_id = d.manager_id;
SELECT * FROM departments WHERE department_name = 'Marketing';
SELECT * FROM departments WHERE department_name = 'Marketing';
SELECT EMPLOYEE_ID FROM job_history GROUP BY EMPLOYEE_ID HAVING COUNT(*) >= 2;
SELECT EMPLOYEE_ID FROM (   SELECT EMPLOYEE_ID,          COUNT(*) AS num_jobs   FROM job_history   GROUP BY EMPLOYEE_ID ) WHERE num_jobs >= 2;
SELECT DISTINCT d.DEPARTMENT_ID  FROM departments d JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID WHERE d.MANAGER_ID IN (     SELECT MANAGER_ID      FROM employees      GROUP BY MANAGER_ID      HAVING COUNT(*) >= 4 )
SELECT DISTINCT d.department_id  FROM departments d JOIN employees e ON d.department_id = e.department_id WHERE d.manager_id IN (     SELECT manager_id      FROM employees      GROUP BY manager_id      HAVING COUNT(employee_id) >= 4 )
SELECT j.job_id FROM jobs j JOIN employees e ON j.job_id = e.job_id GROUP BY j.job_id HAVING AVG(e.salary) > 8000;
SELECT job_id  FROM jobs  WHERE job_id IN (     SELECT job_id      FROM employees      GROUP BY job_id      HAVING AVG(salary) > 8000 );
SELECT e.EMPLOYEE_ID, j.JOB_TITLE FROM employees e JOIN jobs j ON e.JOB_ID = j.JOB_ID WHERE e.DEPARTMENT_ID = 80;
SELECT e.EMPLOYEE_ID, j.JOB_TITLE  FROM employees e JOIN jobs j ON e.JOB_ID = j.JOB_ID WHERE e.DEPARTMENT_ID = 80;
SELECT e.first_name, e.job_id  FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE d.department_name = 'Finance';
SELECT e.FIRST_NAME, e.JOB_ID  FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID WHERE d.DEPARTMENT_NAME = 'Finance';
SELECT * FROM employees  WHERE SALARY BETWEEN (SELECT MIN_SALARY FROM jobs WHERE MIN_SALARY > 0 ORDER BY MIN_SALARY LIMIT 1) AND 2500;
SELECT * FROM employees  WHERE salary > (SELECT MIN_SALARY FROM jobs WHERE jobs.JOB_ID = employees.JOB_ID)  AND salary < 2500;
SELECT DISTINCT e.EMPLOYEE_ID  FROM employees e WHERE e.DEPARTMENT_ID NOT IN (     SELECT d.DEPARTMENT_ID      FROM departments d      JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID      WHERE e.MANAGER_ID BETWEEN 100 AND 200 );
SELECT EMPLOYEE_ID  FROM employees  WHERE DEPARTMENT_ID NOT IN (     SELECT DEPARTMENT_ID      FROM departments      WHERE MANAGER_ID BETWEEN 100 AND 200 );
SELECT first_name, last_name, hire_date  FROM employees  WHERE department_id = (SELECT department_id FROM employees WHERE first_name = 'Clara')  AND first_name != 'Clara';
SELECT e1.first_name || ' ' || e1.last_name AS full_name, e1.hire_date FROM employees e1 JOIN employees e2 ON e1.department_id = e2.department_id WHERE e2.first_name = 'Clara';
SELECT first_name, last_name, hire_date  FROM employees  WHERE department_id = (     SELECT department_id      FROM employees      WHERE first_name = 'Clara' )  AND employee_id != (     SELECT employee_id      FROM employees      WHERE first_name = 'Clara' );
SELECT e.FIRST_NAME, e.LAST_NAME, e.HIRE_DATE  FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID WHERE d.DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM employees WHERE FIRST_NAME = 'Clara') AND e.FIRST_NAME != 'Clara';
SELECT e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME  FROM employees e WHERE e.DEPARTMENT_ID IN (     SELECT d.DEPARTMENT_ID      FROM employees e2      JOIN departments d ON e2.DEPARTMENT_ID = d.DEPARTMENT_ID      WHERE e2.FIRST_NAME LIKE '%T%' OR e2.LAST_NAME LIKE '%T%' );
SELECT DISTINCT e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN employees e2 ON e2.DEPARTMENT_ID = d.DEPARTMENT_ID WHERE e2.FIRST_NAME LIKE '%T%';
SELECT e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME, e.SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID WHERE e.SALARY > (SELECT AVG(SALARY) FROM employees) AND EXISTS (SELECT 1 FROM employees e2 WHERE e2.DEPARTMENT_ID = d.DEPARTMENT_ID AND e2.FIRST_NAME LIKE '%J%');
SELECT e.EMPLOYEE_ID, e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME, e.SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID WHERE e.SALARY > (SELECT AVG(SALARY) FROM employees) AND EXISTS (     SELECT 1     FROM employees e2     WHERE e2.DEPARTMENT_ID = d.DEPARTMENT_ID     AND LOWER(e2.FIRST_NAME) LIKE '%j%' );
SELECT EMPLOYEE_ID, JOB_ID  FROM employees  WHERE SALARY < ANY (     SELECT SALARY      FROM employees      WHERE JOB_ID = 'MK_MAN')
SELECT EMPLOYEE_ID, JOB_ID  FROM employees  WHERE SALARY < (     SELECT MIN(SALARY)      FROM employees      WHERE JOB_ID = 'MK_MAN' );
SELECT e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME, j.JOB_TITLE  FROM employees e  JOIN jobs j ON e.JOB_ID = j.JOB_ID  WHERE e.SALARY > ANY (     SELECT DISTINCT SALARY      FROM employees      WHERE JOB_ID = (SELECT JOB_ID FROM jobs WHERE JOB_TITLE = 'PU_MAN'));
SELECT e.EMPLOYEE_ID, e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME, e.JOB_ID  FROM employees e JOIN jobs j ON e.JOB_ID = j.JOB_ID WHERE e.SALARY > (SELECT MAX(SALARY) FROM employees WHERE JOB_ID = 'PU_MAN')
SELECT DEPARTMENT_ID, SUM(SALARY) AS TOTAL_SALARY FROM employees GROUP BY DEPARTMENT_ID HAVING COUNT(*) >= 2;
SELECT DEPARTMENT_ID, SUM(SALARY) as TOTAL_SALARY FROM employees GROUP BY DEPARTMENT_ID HAVING COUNT(*) > 2;
SELECT * FROM employees e WHERE NOT EXISTS (     SELECT 1     FROM job_history j     WHERE j.employee_id = e.employee_id );
SELECT e.* FROM employees e LEFT JOIN job_history jh ON e.employee_id = jh.employee_id WHERE jh.employee_id IS NULL;
SELECT e.DEPARTMENT_ID, e.FIRST_NAME, e.LAST_NAME, e.SALARY FROM employees e WHERE e.SALARY = (     SELECT MAX(e2.SALARY)     FROM employees e2     WHERE e.DEPARTMENT_ID = e2.DEPARTMENT_ID );
SELECT e.DEPARTMENT_ID, e.FIRST_NAME, e.LAST_NAME, e.SALARY FROM employees e INNER JOIN (     SELECT DEPARTMENT_ID, MAX(SALARY) AS max_salary     FROM employees     GROUP BY DEPARTMENT_ID ) m ON e.DEPARTMENT_ID = m.DEPARTMENT_ID AND e.SALARY = m.max_salary;
SELECT e.FIRST_NAME, e.LAST_NAME, d.DEPARTMENT_NAME, l.CITY, l.STATE_PROVINCE  FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID;
SELECT      e.FIRST_NAME || ' ' || e.LAST_NAME AS FULL_NAME,     d.DEPARTMENT_NAME,     l.CITY,     l.STATE_PROVINCE FROM      employees e JOIN      departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN      locations l ON d.LOCATION_ID = l.LOCATION_ID;
SELECT e.first_name, e.last_name, l.city  FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN locations l ON d.location_id = l.location_id WHERE e.first_name LIKE '%z%';
SELECT e.first_name, e.last_name, l.city  FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN locations l ON d.location_id = l.location_id WHERE e.first_name LIKE '%Z%';
SELECT d.DEPARTMENT_NAME, l.CITY, l.STATE_PROVINCE  FROM departments d  JOIN locations l  ON d.LOCATION_ID = l.LOCATION_ID;
SELECT d.DEPARTMENT_NAME, l.CITY, l.STATE_PROVINCE  FROM departments d  JOIN locations l  ON d.LOCATION_ID = l.LOCATION_ID;
SELECT e.EMPLOYEE_ID, e.FIRST_NAME, e.LAST_NAME, c.COUNTRY_NAME  FROM employees e  JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID  JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID  JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID;
SELECT e.FIRST_NAME, e.LAST_NAME, e.EMPLOYEE_ID, c.COUNTRY_NAME  FROM employees e  JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID  JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID  JOIN countries c ON l.COUNTRY_ID = c.COUNTRY_ID;
SELECT d.DEPARTMENT_NAME, COUNT(e.EMPLOYEE_ID) AS NUM_EMPLOYEES FROM departments d LEFT JOIN employees e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID GROUP BY d.DEPARTMENT_NAME;
SELECT departments.DEPARTMENT_NAME, COUNT(employees.EMPLOYEE_ID) AS Employee_Count FROM departments JOIN employees ON departments.DEPARTMENT_ID = employees.DEPARTMENT_ID GROUP BY departments.DEPARTMENT_NAME;
SELECT e.FIRST_NAME, e.LAST_NAME, e.SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID WHERE l.CITY = 'London';
SELECT e.FIRST_NAME, e.LAST_NAME, e.SALARY FROM employees e JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID JOIN locations l ON d.LOCATION_ID = l.LOCATION_ID WHERE l.CITY = 'London';
SELECT song_name FROM song WHERE releasedate IN (SELECT MAX(releasedate) FROM song)
SELECT song_name FROM song ORDER BY releasedate DESC LIMIT 1;
SELECT f_id FROM files WHERE duration = (SELECT MAX(duration) FROM files);
SELECT f_id FROM files WHERE duration = (SELECT MAX(duration) FROM files);
SELECT song_name FROM song WHERE languages = 'English';
SELECT song_name FROM song WHERE languages = 'English';
SELECT f_id  FROM files  WHERE formats = 'mp3';
SELECT f_id FROM files WHERE formats = 'mp3';
SELECT DISTINCT artist.artist_name, artist.country  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE song.rating > 9;
SELECT DISTINCT artist.artist_name, artist.country  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE song.rating > 9;
SELECT files.file_size, files.formats  FROM files  JOIN song ON files.f_id = song.f_id  WHERE song.resolution < 800;
SELECT files.file_size, files.formats  FROM files  JOIN song ON files.f_id = song.f_id  WHERE song.resolution < 800;
SELECT artist_name  FROM files  JOIN song ON files.f_id = song.f_id  WHERE duration = (SELECT MIN(duration) FROM files);
SELECT T2.artist_name  FROM files AS T1  JOIN song AS T2 ON T1.f_id = T2.f_id  WHERE T1.duration = (SELECT MIN(duration) FROM files)
SELECT T2.artist_name, T2.country  FROM song AS T1  JOIN artist AS T2 ON T1.artist_name = T2.artist_name  ORDER BY T1.rating DESC  LIMIT 3;
Error: 第 3545 个样本有 2 个SQL。
SELECT COUNT(*) FROM files  JOIN song ON files.f_id = song.f_id  WHERE files.duration = '4:00';
SELECT COUNT(*) FROM files WHERE duration BETWEEN 235 AND 265;
SELECT COUNT(*) FROM artist WHERE country = 'Bangladesh';
SELECT COUNT(*) FROM artist WHERE country = 'Bangladesh';
SELECT AVG(song.rating)  FROM song  JOIN artist ON song.artist_name = artist.artist_name  WHERE artist.gender = 'Female';
SELECT AVG(song_count)  FROM ( SELECT COUNT(*) as song_count  FROM song  WHERE artist_name IN (     SELECT artist_name      FROM artist      WHERE gender = 'Female' )  GROUP BY artist_name ) as subquery;
SELECT formats  FROM files  GROUP BY formats  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT formats  FROM files  GROUP BY formats  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT DISTINCT artist.artist_name  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE artist.country = 'UK' AND song.languages = 'English';
SELECT DISTINCT artist.artist_name  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE artist.country = 'UK' AND song.languages = 'English';
SELECT f_id FROM files WHERE formats = 'mp4' AND f_id IN (SELECT f_id FROM song WHERE resolution < 1000);
SELECT f_id FROM files WHERE formats = 'mp4' AND resolution < 1000;
SELECT T2.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = 'female' AND T2.languages = 'Bangla'
SELECT DISTINCT country  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE gender = 'Female' AND languages LIKE '%Bangla%';
SELECT AVG(T2.duration)  FROM files AS T2  JOIN song AS T1 ON T2.f_id = T1.f_id  WHERE T2.formats = 'mp3' AND T1.resolution < 800;
SELECT AVG(T2.duration)  FROM files AS T1  JOIN song AS T2 ON T1.f_id = T2.f_id  WHERE T1.formats = 'mp3' AND T2.resolution < 800;
SELECT gender, COUNT(*)  FROM artist  GROUP BY gender;
SELECT gender, COUNT(*)  FROM artist  GROUP BY gender;
SELECT languages, AVG(rating)  FROM song  GROUP BY languages;
SELECT languages, AVG(rating)  FROM song  GROUP BY languages;
SELECT artist.gender, artist.artist_name  FROM artist  JOIN song ON artist.artist_name = song.artist_name  ORDER BY song.resolution ASC  LIMIT 1;
SELECT artist.gender, artist.artist_name  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE song.resolution = (SELECT MIN(resolution) FROM song);
SELECT formats, COUNT(DISTINCT artist_name)  FROM files  GROUP BY formats;
SELECT files.formats, COUNT(song.song_name)  FROM files  JOIN song ON files.f_id = song.f_id  GROUP BY files.formats;
SELECT DISTINCT s.song_name  FROM song s  WHERE s.resolution > (     SELECT MIN(s2.resolution)      FROM song s2      WHERE s2.languages = 'English' );
SELECT DISTINCT song_name  FROM song  WHERE resolution > (     SELECT resolution      FROM song      WHERE languages = 'English' )
SELECT s.song_name  FROM song s  WHERE s.rating < (SELECT MAX(s2.rating) FROM song s2 WHERE s2.genre_is = 'blues')
SELECT song_name FROM song WHERE rating < (SELECT MAX(rating) FROM song WHERE genre_is = 'blues')
SELECT artist_name, country  FROM artist  JOIN song  ON artist.artist_name = song.artist_name  WHERE song.song_name LIKE '%love%';
SELECT artist.artist_name, artist.country  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE song.song_name LIKE '%love%';
SELECT DISTINCT artist.artist_name, artist.gender  FROM artist  JOIN song  ON artist.artist_name = song.artist_name  WHERE MONTH(song.releasedate) = 3;
SELECT DISTINCT artist.artist_name, artist.gender  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE MONTH(song.releasedate) = 3;
SELECT g_name, rating  FROM genre  ORDER BY g_name ASC;
SELECT g_name, rating FROM genre ORDER BY g_name ASC;
SELECT song_name FROM song ORDER BY resolution;
SELECT song_name FROM song ORDER BY resolution;
SELECT f_id FROM files WHERE formats = 'mp4' UNION SELECT f_id FROM song WHERE resolution > 720;
SELECT f_id FROM files WHERE formats = 'mp4' UNION SELECT f_id FROM song WHERE resolution > 720;
Error: 第 3584 个样本有 2 个SQL。
SELECT song_name FROM song WHERE duration BETWEEN 235 AND 265 OR languages = 'English';
SELECT languages, COUNT(*) AS count  FROM song  GROUP BY languages  ORDER BY count DESC  LIMIT 1;
SELECT languages, COUNT(*) AS count  FROM song  GROUP BY languages  ORDER BY count DESC  LIMIT 1;
SELECT languages  FROM song  WHERE resolution > 500  GROUP BY languages  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T2.languages, T1.artist_name FROM (     SELECT artist_name, COUNT(*) as num_songs     FROM song      WHERE resolution > 500     GROUP BY artist_name     ORDER BY num_songs DESC ) AS T1 JOIN (     SELECT languages, artist_name     FROM song ) AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.languages ORDER BY COUNT(T1.artist_name) DESC;
SELECT artist_name FROM artist WHERE gender = 'Male' AND country = 'UK';
SELECT artist_name FROM artist WHERE country = 'UK' AND gender = 'Male';
SELECT song_name FROM song WHERE genre_is = 'modern' OR languages = 'English';
SELECT song_name  FROM song  WHERE genre_is = 'modern' OR languages = 'English';
SELECT song_name  FROM song  JOIN files ON song.f_id = files.f_id  WHERE files.formats = 'mp3' AND song.resolution < 1000;
SELECT song_name  FROM song  JOIN files ON song.f_id = files.f_id  WHERE files.formats = 'mp3' AND song.resolution < 1000;
SELECT DISTINCT artist.artist_name  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE artist.country = 'UK' AND song.languages = 'English';
SELECT DISTINCT artist.artist_name  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE artist.country = 'UK' AND song.languages = 'English';
SELECT AVG(rating), AVG(resolution)  FROM song  WHERE languages = 'Bangla';
SELECT AVG(rating), AVG(resolution)  FROM song  WHERE languages = 'bangla';
SELECT MAX(resolution), MIN(resolution)  FROM song  WHERE duration = '3 minutes';
SELECT MAX(resolution), MIN(resolution)  FROM song  WHERE duration BETWEEN 2.5 AND 3.5;
SELECT languages, MAX(duration) as max_duration, MAX(resolution) as max_resolution  FROM song  GROUP BY languages  ORDER BY languages;
SELECT languages, MAX(duration) as max_duration, MAX(resolution) as max_resolution  FROM song  GROUP BY languages  ORDER BY languages;
SELECT genre_is, MIN(duration) AS shortest_duration, MIN(rating) AS lowest_rating  FROM song  GROUP BY genre_is  ORDER BY genre_is;
SELECT g.g_name, s.song_name, MIN(s.rating) as min_rating, MIN(f.duration) as min_duration FROM genre g JOIN song s ON g.g_name = s.genre_is JOIN files f ON s.f_id = f.f_id GROUP BY g.g_name ORDER BY g.g_name;
SELECT artist_name, COUNT(song_name) AS NumberOfWorks FROM song JOIN artist ON song.artist_name = artist.artist_name WHERE languages LIKE '%English%' GROUP BY artist_name HAVING COUNT(song_name) > 0;
SELECT artist_name, COUNT(song_name)  FROM song  WHERE languages LIKE '%English%'  GROUP BY artist_name;
SELECT DISTINCT artist_name, country  FROM song  JOIN artist ON song.artist_name = artist.artist_name  WHERE resolution > 900;
SELECT DISTINCT artist.artist_name, artist.country  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE song.resolution > 900;
SELECT artist_name, COUNT(song_name) AS num_songs  FROM song  GROUP BY artist_name  ORDER BY num_songs DESC  LIMIT 3;
SELECT artist_name, COUNT(song_name) as num_songs  FROM artist  JOIN song ON artist.artist_name = song.artist_name  GROUP BY artist_name  ORDER BY num_songs DESC  LIMIT 3;
SELECT T2.country  FROM (SELECT artist_name, COUNT(*) AS cnt FROM song GROUP BY artist_name) AS T1  JOIN artist AS T2 ON T1.artist_name = T2.artist_name  ORDER BY T1.cnt  LIMIT 1;
Error: 第 3613 个样本有 2 个SQL。
SELECT song_name  FROM song  WHERE rating < ALL (     SELECT rating      FROM song      WHERE languages = 'English')
SELECT song_name  FROM song  WHERE rating < (SELECT MIN(rating) FROM song WHERE languages = 'English')
SELECT f_id FROM song WHERE resolution > (SELECT MAX(resolution) FROM song WHERE rating < 8);
SELECT f_id FROM song WHERE resolution > (SELECT MIN(resolution) FROM song WHERE rating < 8);
SELECT f_id FROM song WHERE resolution > (SELECT AVG(resolution) FROM song WHERE genre_is = 'modern');
SELECT f_id FROM song WHERE resolution > (SELECT AVG(resolution) FROM song WHERE genre_is = 'modern');
SELECT artist_name, COUNT(*) as num_songs  FROM song  WHERE languages = 'Bangla'  GROUP BY artist_name  ORDER BY num_songs DESC  LIMIT 3;
SELECT artist_name  FROM song  WHERE languages = 'Bangla'  GROUP BY artist_name  ORDER BY COUNT(song_name) DESC  LIMIT 3;
SELECT f_id, genre_is, artist_name  FROM song  WHERE languages = 'English'  ORDER BY rating;
SELECT f.f_id, g.g_name, a.artist_name  FROM song s  JOIN files f ON s.f_id = f.f_id  JOIN genre g ON s.genre_is = g.g_name  JOIN artist a ON s.artist_name = a.artist_name  WHERE s.languages = 'English'  ORDER BY s.rating ASC;
SELECT files.duration, files.file_size, files.formats  FROM files  JOIN song ON files.f_id = song.f_id  JOIN genre ON song.genre_is = genre.g_name  WHERE genre.g_name = 'pop'  ORDER BY song.song_name;
SELECT files.duration, files.file_size, files.formats  FROM files  JOIN song  ON files.f_id = song.f_id  JOIN genre  ON song.genre_is = genre.g_name  WHERE genre.g_name = 'pop'  ORDER BY song.song_name;
SELECT DISTINCT artist.artist_name  FROM artist  JOIN song ON artist.artist_name = song.artist_name  WHERE song.languages = 'English'  AND NOT EXISTS (SELECT * FROM song WHERE song.artist_name = artist.artist_name AND song.rating > 8);
SELECT DISTINCT artist_name  FROM song  WHERE languages = 'English'  AND artist_name NOT IN (     SELECT artist_name      FROM song      WHERE rating > 8 );
SELECT artist_name  FROM artist  WHERE country = 'Bangladesh'  AND artist_name NOT IN (     SELECT artist_name      FROM song      WHERE rating > 7 );
SELECT DISTINCT artist_name  FROM artist  WHERE country = 'Bangladesh'  AND artist_name NOT IN (     SELECT artist_name      FROM song      WHERE rating > 7 );
SELECT T1.name_full, T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY COUNT(T2.player_id) DESC LIMIT 1;
SELECT T2.name_full, T2.college_id FROM player_college AS T1 JOIN college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT AVG(salary)  FROM salary  JOIN team  ON salary.team_id = team.team_id  WHERE team.name = 'Boston Red Stockings'
Error: 第 3633 个样本有 3 个SQL。
SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE T2.year = 1998;
SELECT p.name_first, p.name_last  FROM player AS p JOIN all_star AS a ON p.player_id = a.player_id WHERE a.year = 1998;
SELECT P.name_first, P.name_last, P.player_id, COUNT(ASG.player_id) AS count  FROM player P  JOIN all_star ASG ON P.player_id = ASG.player_id  GROUP BY ASG.player_id  ORDER BY count DESC  LIMIT 1;
SELECT p.name_first, p.name_last, p.player_id, COUNT(*) AS all_star_experiences  FROM player p  JOIN all_star a ON p.player_id = a.player_id  GROUP BY p.player_id  ORDER BY all_star_experiences DESC  LIMIT 1;
SELECT yearid, COUNT(player_id)  FROM hall_of_fame  WHERE inducted = 'Y'  GROUP BY yearid;
SELECT yearid, COUNT(player_id)  FROM hall_of_fame  WHERE inducted = 'Y'  GROUP BY yearid;
SELECT year, AVG(attendance) FROM home_game GROUP BY year;
SELECT YEAR, AVG(attendance)  FROM home_game  GROUP BY YEAR;
SELECT T1.team_id , T1.rank FROM team AS T1 JOIN home_game AS T2 ON T1.team_id = T2.team_id WHERE T2.year = 2014 GROUP BY T1.team_id ORDER BY AVG(T2.attendance) DESC LIMIT 1
SELECT T1.team_id, T1.rank FROM team AS T1 JOIN home_game AS T2 ON T1.team_id = T2.team_id WHERE T2.year = 2014 ORDER BY CAST(T2.attendance AS REAL) / T2.openings DESC LIMIT 1
SELECT T1.name_first, T1.name_last, T1.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.name_first, T1.name_last, T1.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(*) FROM park WHERE state = 'NY';
SELECT COUNT(*) FROM park WHERE state = 'NY';
SELECT p.name_first, p.name_last, p.player_id  FROM player p  JOIN player_award pa ON p.player_id = pa.player_id  GROUP BY p.player_id  ORDER BY COUNT(*) DESC  LIMIT 3;
SELECT T1.name_first, T1.name_last, T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY COUNT(*) DESC LIMIT 3;
SELECT birth_country, COUNT(player_id) as num_players  FROM player  GROUP BY birth_country  ORDER BY num_players ASC  LIMIT 3;
SELECT birth_country, COUNT(player_id) as num_players  FROM player  GROUP BY birth_country  ORDER BY num_players  LIMIT 3;
SELECT name_first, name_last FROM player WHERE death_year IS NULL;
SELECT name_first, name_last FROM player WHERE death_year IS NULL OR death_year = '';
SELECT COUNT(*) FROM player WHERE birth_country = 'USA' AND bats = 'R';
SELECT COUNT(*) FROM player WHERE birth_country = 'USA' AND bats = 'R';
SELECT AVG(T2.height) FROM player_college AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T1.college_id = T3.college_id WHERE T3.name_full = 'Yale University'
SELECT AVG(T2.height) FROM player_college AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T1.college_id = T3.college_id WHERE T3.name_full = 'Yale University'
SELECT team.name, team.team_id, MAX(salary.salary) as max_salary FROM salary JOIN team ON salary.team_id = team.team_id GROUP BY team.team_id;
SELECT team.name, team.team_id, MAX(salary.salary)  FROM team  JOIN salary ON team.team_id = salary.team_id  GROUP BY team.team_id;
SELECT T1.name, T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T2.team_id ORDER BY AVG(T2.salary) ASC LIMIT 1
SELECT team_id, name FROM team WHERE team_id = (SELECT team_id FROM salary GROUP BY team_id ORDER BY AVG(salary) ASC LIMIT 1);
SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id WHERE T2.year = 1960 INTERSECT SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id WHERE T2.year = 1961;
SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id WHERE T2.year = 1960 INTERSECT SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id WHERE T2.year = 1961;
SELECT name_first, name_last FROM player WHERE weight > 220 OR height < 75;
SELECT name_first, name_last FROM player WHERE weight > 220 OR height < 75;
SELECT MAX(T2.w) AS max_score FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.wins > T1.losses;
SELECT MAX(T2.w) AS max_score FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings';
SELECT COUNT(*) FROM postseason WHERE year = 2009 AND team_id_loser = 'BOS' AND team_id_winner != 'BOS';
SELECT COUNT(*)  FROM postseason  WHERE year = 2009 AND team_id_loser = (SELECT team_id FROM team WHERE name = 'Boston Red Stockings');
SELECT team_id_winner, name  FROM postseason  JOIN team ON postseason.team_id_winner = team.team_id  WHERE year = 2008  GROUP BY team_id_winner  ORDER BY wins DESC  LIMIT 1;
SELECT T1.name, T1.team_id FROM team AS T1 JOIN postseason AS T2 ON T1.team_id = T2.team_id_winner WHERE T2.year = 2008 GROUP BY T1.team_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T.year, COUNT(T.wins) AS wins  FROM postseason AS T  JOIN team AS Tm ON T.team_id_winner = Tm.team_id_br  WHERE Tm.name = 'Boston Red Stockings'  GROUP BY T.year;
Error: 第 3673 个样本有 2 个SQL。
SELECT COUNT(*) FROM postseason WHERE (team_id_winner = 'BOS' OR team_id_loser = 'BOS') AND franchise_name = 'Boston Red Stockings'
SELECT COUNT(*) FROM postseason WHERE team_id_winner = 'BOS' OR team_id_loser = 'BOS';
SELECT COUNT(*) FROM postseason WHERE year = 1885 AND ties = 1;
SELECT COUNT(*) FROM postseason WHERE year = 1885 AND ties = 1;
SELECT SUM(salary) AS total_salary  FROM salary  JOIN team ON salary.team_id = team.team_id  WHERE team.name = 'Boston Red Stockings' AND salary.year = 2010;
SELECT SUM(salary) FROM salary WHERE year = 2010 AND team_id IN (SELECT team_id FROM team WHERE name = 'Boston Red Stockings')
SELECT COUNT(DISTINCT player_id)  FROM appearances  JOIN team ON appearances.team_id = team.team_id  WHERE team.name = 'Boston Red Stockings' AND appearances.year = 2000;
SELECT COUNT(DISTINCT player_id)  FROM appearances  JOIN team ON appearances.team_id = team.team_id  WHERE team.name = 'Boston Red Stockings' AND appearances.year = 2000;
SELECT player_id, salary FROM salary WHERE year = 2001 ORDER BY salary DESC LIMIT 3;
SELECT player_id, salary FROM salary WHERE year = 2001 ORDER BY salary DESC LIMIT 3;
SELECT salary FROM salary WHERE year IN (2010, 2001)
SELECT salary FROM salary WHERE year IN (2010, 2001)
SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY COUNT(player_id) ASC LIMIT 1;
SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY COUNT(player_id) ASC LIMIT 1
Error: 第 3688 个样本有 2 个SQL。
SELECT COUNT(*) FROM park WHERE city = 'Atlanta'
SELECT COUNT(*) FROM home_game WHERE park_id = (SELECT park_id FROM park WHERE park_name = 'Columbia Park') AND year = 1907;
SELECT COUNT(*) FROM home_game WHERE park_id = (SELECT park_id FROM park WHERE park_name = 'Columbia Park') AND year = 1907;
SELECT SUM(T2.games) FROM home_game AS T2 JOIN park AS T1 ON T1.park_id = T2.park_id WHERE T1.city = 'Atlanta' AND T2.year = 2000;
SELECT COUNT(*) FROM home_game WHERE year = 2000 AND park_id IN (SELECT park_id FROM park WHERE city = 'Atlanta');
SELECT SUM(T2.attendance) FROM team AS T1 JOIN home_game AS T2 ON T1.team_id = T2.team_id WHERE T1.name = 'Boston Red Stockings' AND T2.year BETWEEN 2000 AND 2010;
SELECT SUM(T2.games)  FROM team AS T1  JOIN home_game AS T2 ON T1.team_id = T2.team_id  WHERE T1.name = 'Boston Red Stockings' AND T2.year BETWEEN 2000 AND 2010;
SELECT SUM(salary) FROM salary WHERE year BETWEEN 1985 AND 1990 AND player_id IN (SELECT player_id FROM player WHERE name_first = 'Len' AND name_last = 'Barker')
SELECT SUM(salary) FROM salary WHERE player_id = (SELECT player_id FROM player WHERE name_first = 'Len' AND name_last = 'Barker') AND year BETWEEN 1985 AND 1990;
SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN salary AS T2 ON T1.player_id = T2.player_id WHERE T2.team_id = 'WAS' AND (T2.year = 2005 OR T2.year = 2007) GROUP BY T1.player_id HAVING COUNT(T2.year) = 2
SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN salary AS T2 ON T1.player_id = T2.player_id WHERE T2.year = 2005 AND T2.team_id = 'WAS' INTERSECT SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN salary AS T2 ON T1.player_id = T2.player_id WHERE T2.year = 2007 AND T2.team_id = 'WAS'
SELECT SUM(games)  FROM home_game  WHERE team_id IN (     SELECT team_id      FROM team      WHERE name = 'Boston Red Stockings' ) AND year BETWEEN 1990 AND 2000;
Error: 第 3701 个样本有 2 个SQL。
SELECT team_id, MIN(attendance)  FROM home_game  WHERE year = 1980  GROUP BY team_id  ORDER BY attendance ASC  LIMIT 1;
SELECT team_id FROM home_game WHERE year = 1980 ORDER BY attendance ASC LIMIT 1;
SELECT state FROM park GROUP BY state HAVING COUNT(*) > 2
SELECT state FROM park GROUP BY state HAVING COUNT(park_id) > 2;
SELECT COUNT(*) FROM team_franchise WHERE active = 'Y';
SELECT COUNT(*) FROM team_franchise WHERE active = 'Y';
SELECT city FROM park GROUP BY city HAVING COUNT(park_id) BETWEEN 2 AND 4;
SELECT city FROM park GROUP BY city HAVING COUNT(park_id) BETWEEN 2 AND 4;
SELECT T2.park_name, MAX(T1.attendance) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2008 GROUP BY T1.park_id ORDER BY SUM(T1.attendance) DESC LIMIT 1;
SELECT park_id FROM home_game WHERE year = 2008 ORDER BY attendance DESC LIMIT 1;
SELECT COUNT(*) FROM camera_lens WHERE focal_length_mm > 15;
SELECT brand, name  FROM camera_lens  ORDER BY max_aperture DESC;
SELECT id, color, name FROM photos;
SELECT MAX(Height), AVG(Height) FROM mountain;
SELECT AVG(Prominence)  FROM mountain  WHERE Country = 'Morocco';
SELECT name, Height, Prominence  FROM mountain  WHERE Range != 'Aberdare Range';
SELECT p.id, p.name  FROM photos p JOIN mountain m ON p.mountain_id = m.id;
SELECT m.id, m.name  FROM mountain m JOIN photos p ON m.id = p.mountain_id GROUP BY m.id, m.name HAVING COUNT(p.id) >= 2;
SELECT cl.name, COUNT(DISTINCT p.mountain_id) as mountain_count FROM camera_lens cl JOIN photos p ON cl.id = p.camera_lens_id GROUP BY cl.name ORDER BY mountain_count DESC LIMIT 1;
SELECT p.name  FROM photos p JOIN camera_lens cl ON p.camera_lens_id = cl.id WHERE cl.brand IN ('Sigma', 'Olympus');
SELECT COUNT(DISTINCT brand) FROM camera_lens;
SELECT COUNT(*) FROM camera_lens WHERE id NOT IN (SELECT camera_lens_id FROM photos)
SELECT COUNT(DISTINCT T2.id)  FROM photos AS T1  JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id  JOIN mountain AS T3 ON T1.mountain_id = T3.id  WHERE T3.Country = 'Ethiopia';
SELECT cl.brand  FROM camera_lens cl  JOIN photos p1 ON cl.id = p1.camera_lens_id  JOIN mountain m1 ON p1.mountain_id = m1.id  JOIN photos p2 ON cl.id = p2.camera_lens_id  JOIN mountain m2 ON p2.mountain_id = m2.id  WHERE m1.Range = 'Toubkal Atlas' AND m2.Range = 'Lasta Massif' GROUP BY cl.brand
SELECT mountain.name, mountain.Prominence  FROM mountain  WHERE NOT EXISTS (     SELECT *      FROM photos      JOIN camera_lens ON photos.camera_lens_id = camera_lens.id      WHERE photos.mountain_id = mountain.id AND camera_lens.brand = 'Sigma' );
SELECT name FROM camera_lens WHERE name LIKE '%Digital%';
SELECT cl.name, COUNT(p.id)  FROM camera_lens cl  JOIN photos p ON cl.id = p.camera_lens_id  GROUP BY cl.name  ORDER BY COUNT(p.id) DESC;
SELECT Name FROM channel WHERE Owner != 'CCTV';
SELECT Name FROM channel WHERE Owner != 'CCTV';
SELECT Name  FROM channel  ORDER BY Rating_in_percent DESC;
SELECT Name  FROM channel  ORDER BY Rating_in_percent DESC;
SELECT T1.Owner FROM channel AS T1 WHERE T1.Rating_in_percent = (SELECT MAX(Rating_in_percent) FROM channel)
SELECT Owner FROM channel WHERE Rating_in_percent = (SELECT MAX(Rating_in_percent) FROM channel);
SELECT COUNT(*) FROM program;
SELECT COUNT(*) FROM program;
SELECT Name  FROM program  ORDER BY Launch;
SELECT Name  FROM program  ORDER BY Launch;
SELECT Name, Origin, Owner FROM program;
SELECT Name, Origin, Owner FROM program;
SELECT Name FROM program WHERE Launch = (SELECT MAX(Launch) FROM program);
SELECT Name  FROM program  ORDER BY Launch DESC  LIMIT 1;
SELECT SUM(Share_in_percent)  FROM channel  WHERE Owner = 'CCTV';
SELECT SUM(Share_in_percent)  FROM channel  WHERE Owner = 'CCTV';
SELECT c.Name FROM channel c JOIN broadcast b ON c.Channel_ID = b.Channel_ID WHERE b.Time_of_day = 'morning';
SELECT channel.Name  FROM channel  JOIN broadcast ON channel.Channel_ID = broadcast.Channel_ID  WHERE broadcast.Time_of_day = 'morning';
SELECT c.Name  FROM channel c  JOIN broadcast b ON c.Channel_ID = b.Channel_ID  WHERE b.Time_of_day = 'morning'  INTERSECT  SELECT c.Name  FROM channel c  JOIN broadcast b ON c.Channel_ID = b.Channel_ID  WHERE b.Time_of_day = 'night'
SELECT c.Name  FROM channel c  WHERE EXISTS (     SELECT *      FROM broadcast b      WHERE b.Channel_ID = c.Channel_ID      AND (b.Time_of_day = 'morning' OR b.Time_of_day = 'night')      GROUP BY b.Channel_ID      HAVING COUNT(DISTINCT b.Time_of_day) > 1 )
SELECT Time_of_day, COUNT(Program_ID) AS Num_of_Programs FROM broadcast GROUP BY Time_of_day;
SELECT Time_of_day, COUNT(Program_ID) AS Num_of_Programs  FROM broadcast  GROUP BY Time_of_day;
SELECT COUNT(DISTINCT Program_ID)  FROM broadcast  WHERE Time_of_day = 'night';
SELECT COUNT(DISTINCT T1.Name)  FROM program AS T1  JOIN broadcast AS T2 ON T1.Program_ID = T2.Program_ID  WHERE T2.Time_of_day = 'Night';
SELECT p.Name  FROM program p  WHERE NOT EXISTS (     SELECT 1      FROM broadcast b      WHERE b.Program_ID = p.Program_ID AND b.Time_of_day = 'morning' );
SELECT p.Name  FROM program p  WHERE p.Program_ID NOT IN (     SELECT b.Program_ID      FROM broadcast b      WHERE b.Time_of_day = 'morning' );
SELECT p.Owner FROM program p WHERE EXISTS (     SELECT 1     FROM broadcast b1     WHERE b1.Program_ID = p.Program_ID AND (b1.Time_of_day = 'morning' OR b1.Time_of_day = 'night')     INTERSECT     SELECT 1     FROM broadcast b2     WHERE b2.Program_ID = p.Program_ID AND b2.Time_of_day <> b1.Time_of_day );
SELECT p.Owner  FROM program p  WHERE p.Program_ID IN (     SELECT b1.Program_ID      FROM broadcast b1      WHERE b1.Time_of_day = 'morning'      INTERSECT      SELECT b2.Program_ID      FROM broadcast b2      WHERE b2.Time_of_day = 'night' ) GROUP BY p.Owner;
SELECT DISTINCT Origin FROM program ORDER BY Origin ASC;
SELECT Origin FROM program ORDER BY Origin ASC;
SELECT COUNT(DISTINCT Owner) FROM channel;
SELECT COUNT(DISTINCT Owner) FROM channel;
SELECT Name FROM program WHERE Origin != 'Beijing';
SELECT Name FROM program WHERE Origin != 'Beijing';
SELECT Name  FROM channel  WHERE Owner IN ('CCTV', 'HBS');
SELECT Name  FROM channel  WHERE Owner IN ('CCTV', 'HBS');
SELECT Owner, SUM(Rating_in_percent) as Total_Rating_Ratio FROM channel GROUP BY Owner;
SELECT Owner, SUM(Rating_in_percent) as Total_Rating FROM channel GROUP BY Owner;
SELECT p.Name  FROM program p JOIN broadcast b ON p.Program_ID = b.Program_ID GROUP BY p.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.Name  FROM program p JOIN broadcast b ON p.Program_ID = b.Program_ID GROUP BY p.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM Courses;
SELECT COUNT(*) FROM Courses;
SELECT course_description  FROM Courses  WHERE course_name = 'database';
SELECT course_description  FROM Courses  WHERE course_name = 'database';
SELECT address_line_1  FROM Course_Authors_and_Tutors  WHERE personal_name = 'Cathrine';
SELECT address_line_1  FROM Course_Authors_and_Tutors  WHERE personal_name = 'Cathrine';
SELECT address_line_1  FROM Course_Authors_and_Tutors;
SELECT address_line_1 FROM Course_Authors_and_Tutors;
SELECT login_name, family_name  FROM Course_Authors_and_Tutors;
SELECT login_name, family_name  FROM Course_Authors_and_Tutors;
SELECT date_of_enrolment, date_of_completion  FROM Student_Course_Enrolment;
SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment;
SELECT COUNT(DISTINCT student_id)  FROM Student_Course_Enrolment;
SELECT COUNT(DISTINCT student_id)  FROM Student_Course_Enrolment;
SELECT COUNT(DISTINCT course_id)  FROM Student_Course_Enrolment;
SELECT COUNT(DISTINCT course_id)  FROM Student_Course_Enrolment;
SELECT date_test_taken  FROM Student_Tests_Taken  WHERE test_result = 'Pass';
SELECT date_test_taken  FROM Student_Tests_Taken  WHERE test_result = 'Pass';
SELECT COUNT(*)  FROM Student_Tests_Taken  WHERE test_result = 'Fail';
SELECT COUNT(*) FROM Student_Tests_Taken WHERE test_result = 'Fail';
SELECT login_name FROM Students WHERE family_name = 'Ward';
SELECT login_name FROM Students WHERE family_name = 'Ward';
SELECT date_of_latest_logon  FROM Students  WHERE family_name = 'Jaskolski' OR family_name = 'Langosh';
SELECT date_of_latest_logon  FROM Students  WHERE family_name IN ('Jaskolski', 'Langosh') ORDER BY date_of_latest_logon DESC LIMIT 1;
SELECT COUNT(*)  FROM Students  WHERE personal_name LIKE '%son%';
SELECT COUNT(*)  FROM Students  WHERE personal_name LIKE '%son%'
SELECT subject_name FROM Subjects;
SELECT subject_name FROM Subjects;
SELECT * FROM Course_Authors_and_Tutors  ORDER BY personal_name ASC;
SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name ASC;
SELECT personal_name, family_name  FROM Students  ORDER BY family_name ASC;
SELECT personal_name, family_name  FROM Students  ORDER BY family_name ASC;
SELECT test_result, COUNT(*) as result_count FROM Student_Tests_Taken GROUP BY test_result ORDER BY result_count DESC;
SELECT test_result, COUNT(DISTINCT student_id)  FROM Student_Tests_Taken  GROUP BY test_result;
SELECT T1.login_name  FROM Course_Authors_and_Tutors AS T1  JOIN Courses AS T2 ON T1.author_id = T2.author_id  WHERE T2.course_name = 'advanced database';
SELECT T1.login_name  FROM Course_Authors_and_Tutors AS T1  JOIN Courses AS T2  ON T1.author_id = T2.author_id  WHERE T2.course_name = 'advanced database';
SELECT T1.address_line_1  FROM Course_Authors_and_Tutors AS T1  JOIN Courses AS T2  ON T1.author_id = T2.author_id  WHERE T2.course_name = 'operating system' OR T2.course_name = 'data structure';
SELECT T1.address_line_1  FROM Course_Authors_and_Tutors AS T1  JOIN Courses AS T2  ON T1.author_id = T2.author_id  JOIN Subjects AS T3  ON T2.subject_id = T3.subject_id  WHERE T3.subject_name = 'operating system' OR T3.subject_name = 'data structure';
SELECT T1.personal_name, T1.family_name, T2.author_id  FROM Course_Authors_and_Tutors AS T1  JOIN Courses AS T2 ON T1.author_id = T2.author_id  GROUP BY T2.author_id  ORDER BY COUNT(T2.course_id) DESC  LIMIT 1;
SELECT T1.personal_name, T1.family_name, T1.author_id  FROM Course_Authors_and_Tutors AS T1  JOIN Courses AS T2 ON T1.author_id = T2.author_id  GROUP BY T1.author_id  ORDER BY COUNT(T2.course_id) DESC  LIMIT 1;
SELECT T1.address_line_1, T1.author_id  FROM Course_Authors_and_Tutors AS T1  JOIN Courses AS T2 ON T1.author_id = T2.author_id  GROUP BY T1.author_id  HAVING COUNT(T2.course_id) >= 2;
SELECT CAAT.address_line_1, CAAT.author_id  FROM Course_Authors_and_Tutors AS CAAT JOIN Courses AS C ON CAAT.author_id = C.author_id GROUP BY CAAT.author_id HAVING COUNT(C.course_id) >= 2;
SELECT c.course_name  FROM Courses c  JOIN Course_Authors_and_Tutors cat  ON c.author_id = cat.author_id  WHERE cat.personal_name = 'Julio';
SELECT Courses.course_name  FROM Courses  JOIN Course_Authors_and_Tutors  ON Courses.author_id = Course_Authors_and_Tutors.author_id  WHERE Course_Authors_and_Tutors.personal_name = 'Julio';
SELECT Courses.course_name, Courses.course_description  FROM Courses  JOIN Subjects ON Courses.subject_id = Subjects.subject_id  WHERE Subjects.subject_name = 'Computer Science';
SELECT Courses.course_name, Courses.course_description  FROM Courses  JOIN Subjects ON Courses.subject_id = Subjects.subject_id  WHERE Subjects.subject_name = 'Computer Science';
SELECT s.subject_id, s.subject_name, COUNT(c.course_id) AS num_of_courses FROM Subjects s JOIN Courses c ON s.subject_id = c.subject_id GROUP BY s.subject_id, s.subject_name;
SELECT s.subject_id, s.subject_name, COUNT(c.course_id) AS num_of_courses FROM Subjects s JOIN Courses c ON s.subject_id = c.subject_id GROUP BY s.subject_id, s.subject_name;
SELECT s.subject_id, s.subject_name, COUNT(c.course_id) AS course_count FROM Subjects s JOIN Courses c ON s.subject_id = c.subject_id GROUP BY s.subject_id, s.subject_name ORDER BY course_count ASC;
SELECT      s.subject_id,      s.subject_name,      COUNT(c.course_id) AS number_of_courses FROM      Subjects s JOIN      Courses c ON s.subject_id = c.subject_id GROUP BY      s.subject_id,      s.subject_name ORDER BY      number_of_courses ASC;
SELECT T2.date_of_enrolment  FROM Courses AS T1  JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id  WHERE T1.course_name = 'Spanish';
SELECT date_of_enrolment  FROM Student_Course_Enrolment  JOIN Courses ON Student_Course_Enrolment.course_id = Courses.course_id  WHERE course_name = 'Spanish';
SELECT C.course_name  FROM Courses C JOIN Student_Course_Enrolment E ON C.course_id = E.course_id GROUP BY C.course_name ORDER BY COUNT(E.registration_id) DESC LIMIT 1;
SELECT C.course_name  FROM Courses C JOIN Student_Course_Enrolment SCE ON C.course_id = SCE.course_id GROUP BY C.course_name ORDER BY COUNT(SCE.registration_id) DESC LIMIT 1;
SELECT C.course_name  FROM Courses C JOIN Student_Course_Enrolment E ON C.course_id = E.course_id GROUP BY C.course_id HAVING COUNT(E.registration_id) = 1;
SELECT C.course_name  FROM Courses C JOIN Student_Course_Enrolment E ON C.course_id = E.course_id GROUP BY C.course_id HAVING COUNT(E.registration_id) = 1;
SELECT C.course_name, C.course_description  FROM Courses C WHERE C.course_id IN (     SELECT SC.course_id      FROM Student_Course_Enrolment SC      GROUP BY SC.course_id      HAVING COUNT(SC.student_id) > 2 );
SELECT C.course_name, C.course_description  FROM Courses C WHERE C.course_id IN (     SELECT SCE.course_id      FROM Student_Course_Enrolment SCE     GROUP BY SCE.course_id     HAVING COUNT(SCE.student_id) > 2 );
SELECT Courses.course_name, COUNT(Student_Course_Enrolment.registration_id) AS NumberOfEnrollments FROM Courses LEFT JOIN Student_Course_Enrolment ON Courses.course_id = Student_Course_Enrolment.course_id GROUP BY Courses.course_id;
SELECT Courses.course_name, COUNT(Student_Course_Enrolment.student_id) AS NumberOfStudents FROM Courses JOIN Student_Course_Enrolment ON Courses.course_id = Student_Course_Enrolment.course_id GROUP BY Courses.course_name;
SELECT DISTINCT SCE.date_of_enrolment  FROM Student_Course_Enrolment SCE JOIN Student_Tests_Taken STT ON SCE.registration_id = STT.registration_id WHERE STT.test_result = 'Pass';
SELECT DISTINCT SCE.date_of_enrolment  FROM Student_Course_Enrolment SCE JOIN Student_Tests_Taken STT ON SCE.registration_id = STT.registration_id WHERE STT.test_result = 'Pass';
SELECT DISTINCT SCE.date_of_completion  FROM Student_Course_Enrolment SCE JOIN Student_Tests_Taken STT ON SCE.registration_id = STT.registration_id WHERE STT.test_result = 'Fail';
SELECT STT.date_test_taken, SCE.date_of_completion  FROM Student_Tests_Taken AS STT  JOIN Student_Course_Enrolment AS SCE ON STT.registration_id = SCE.registration_id  WHERE STT.test_result = 'Fail';
SELECT date_of_enrolment, date_of_completion  FROM Student_Course_Enrolment  WHERE student_id = (SELECT student_id FROM Students WHERE personal_name = 'Karson');
SELECT sce.date_of_enrolment, sce.date_of_completion  FROM Student_Course_Enrolment sce  JOIN Students s ON sce.student_id = s.student_id  WHERE s.personal_name = 'Karson';
SELECT date_of_enrolment, date_of_completion  FROM Student_Course_Enrolment  JOIN Students ON Student_Course_Enrolment.student_id = Students.student_id  WHERE family_name = 'Zieme' AND personal_name = 'Bernie';
SELECT T2.date_of_enrolment, T2.date_of_completion  FROM Students AS T1  JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id  WHERE T1.family_name = 'Zieme' AND T1.personal_name = 'Bernie';
SELECT s.student_id, s.login_name  FROM Students s JOIN Student_Course_Enrolment sce ON s.student_id = sce.student_id GROUP BY s.student_id, s.login_name ORDER BY COUNT(sce.registration_id) DESC LIMIT 1;
SELECT S.student_id, S.login_name FROM Students S JOIN Student_Course_Enrolment SE ON S.student_id = SE.student_id GROUP BY S.student_id, S.login_name ORDER BY COUNT(SE.course_id) DESC LIMIT 1;
SELECT T1.student_id, T2.personal_name  FROM Student_Course_Enrolment T1  JOIN Students T2 ON T1.student_id = T2.student_id  GROUP BY T1.student_id, T2.personal_name  HAVING COUNT(*) >= 2;
SELECT s.student_id, s.personal_name FROM Students s JOIN Student_Course_Enrolment sce ON s.student_id = sce.student_id GROUP BY s.student_id, s.personal_name HAVING COUNT(sce.registration_id) >= 2;
SELECT T1.student_id, T1.middle_name  FROM Students AS T1  JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id  GROUP BY T1.student_id  HAVING COUNT(*) <= 2;
SELECT s.student_id, s.middle_name  FROM Students s JOIN Student_Course_Enrolment sce ON s.student_id = sce.student_id GROUP BY s.student_id, s.middle_name HAVING COUNT(sce.registration_id) <= 2;
SELECT personal_name  FROM Students  WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment);
SELECT personal_name  FROM Students  WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment);
SELECT COUNT(*)  FROM Students  WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment);
SELECT COUNT(*)  FROM Students  WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment);
SELECT login_name  FROM Course_Authors_and_Tutors  INTERSECT  SELECT login_name  FROM Students;
SELECT login_name  FROM Course_Authors_and_Tutors  WHERE login_name IN (SELECT login_name FROM Students)
SELECT personal_name  FROM Course_Authors_and_Tutors  INTERSECT  SELECT personal_name  FROM Students;
Error: 第 3850 个样本有 2 个SQL。
SELECT Claims.Date_Claim_Made, Claims.Claim_ID  FROM Claims  WHERE Claims.Claim_ID IN (     SELECT Claim_ID      FROM Settlements      GROUP BY Claim_ID      HAVING COUNT(Settlement_ID) > 2 ) OR Claims.Amount_Claimed = (     SELECT MAX(Amount_Claimed)      FROM Claims );
SELECT Claims.Date_Claim_Made, Claims.Claim_ID FROM Claims WHERE Claims.Claim_ID IN (     SELECT Claim_ID     FROM Settlements     GROUP BY Claim_ID     HAVING COUNT(Settlement_ID) > 2 ) OR Claims.Amount_Claimed = (     SELECT MAX(Amount_Claimed)     FROM Claims );
SELECT c.Customer_ID, c.Customer_Details FROM Customers c JOIN Customer_Policies cp ON c.Customer_ID = cp.Customer_ID WHERE NOT EXISTS (     SELECT *     FROM Claims cl     WHERE cl.Policy_ID = cp.Policy_ID ) GROUP BY c.Customer_ID, c.Customer_Details HAVING COUNT(cp.Policy_ID) >= 2;
SELECT c.Customer_ID, c.Customer_Details FROM Customers c JOIN Customer_Policies cp ON c.Customer_ID = cp.Customer_ID WHERE NOT EXISTS (     SELECT 1 FROM Claims cl WHERE cl.Policy_ID = cp.Policy_ID ) GROUP BY c.Customer_ID, c.Customer_Details HAVING COUNT(cp.Policy_ID) >= 2;
SELECT Payment_Method_Code, Date_Payment_Made, Amount_Payment  FROM Payments  ORDER BY Date_Payment_Made ASC;
SELECT Payments.Payment_Method_Code, Payments.Date_Payment_Made, Payments.Amount_Payment  FROM Payments  ORDER BY Payments.Date_Payment_Made ASC;
SELECT C.Amount_Settled, C.Amount_Claimed  FROM Claims C  WHERE C.Amount_Claimed = (SELECT MAX(Claims.Amount_Claimed) FROM Claims);
SELECT c.Amount_Settled, c.Amount_Claimed  FROM Claims c JOIN Settlements s ON c.Claim_ID = s.Claim_ID  WHERE c.Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claims);
SELECT Claims.Amount_Settled, Claims.Amount_Claimed  FROM Claims  JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID  ORDER BY Claims.Amount_Settled  LIMIT 1;
SELECT Claims.Amount_Settled, Claims.Amount_Claimed  FROM Claims  JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID  ORDER BY Claims.Amount_Settled  LIMIT 1;
SELECT Date_Claim_Made, Date_Claim_Settled  FROM Claims  WHERE Amount_Claimed > (SELECT AVG(Amount_Claimed) FROM Claims);
SELECT      c.Date_Claim_Made,      c.Date_Claim_Settled  FROM      Claims c  WHERE      c.Amount_Claimed > (SELECT AVG(Amount_Claimed) FROM Claims);
SELECT C.Date_Claim_Made  FROM Claims C JOIN Settlements S ON C.Claim_ID = S.Claim_ID  WHERE C.Amount_Claimed <= (SELECT AVG(Amount_Claimed) FROM Claims) GROUP BY C.Date_Claim_Made;
SELECT T1.Date_Claim_Made  FROM Claims AS T1  JOIN (SELECT AVG(Amount_Claimed) AS avg_claim FROM Claims) AS T2  WHERE T1.Amount_Claimed <= T2.avg_claim;
SELECT Claims.Claim_ID, COUNT(Settlements.Settlement_ID) AS Num_of_Settlelements FROM Claims LEFT JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID GROUP BY Claims.Claim_ID;
SELECT Claims.Claim_ID, COUNT(Settlements.Settlement_ID) AS Num_of_Settlelements FROM Claims LEFT JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID GROUP BY Claims.Claim_ID;
SELECT Claims.Claim_ID, Claims.Date_Claim_Made, COUNT(Settlements.Settlement_ID) AS NumberOfSettlements FROM Claims JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID GROUP BY Claims.Claim_ID, Claims.Date_Claim_Made ORDER BY NumberOfSettlements DESC LIMIT 1;
SELECT c.Claim_ID, c.Date_Claim_Made, COUNT(s.Settlement_ID) AS Settlement_Count FROM Claims c JOIN Settlements s ON c.Claim_ID = s.Claim_ID GROUP BY c.Claim_ID, c.Date_Claim_Made ORDER BY Settlement_Count DESC LIMIT 1;
SELECT COUNT(*), T1.Claim_ID FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_ID = T2.Claim_ID WHERE T2.Date_Claim_Settled = (SELECT MAX(Date_Claim_Settled) FROM Settlements);
SELECT Claims.Claim_ID, COUNT(Settlements.Settlement_ID) AS Num_Settlements FROM Claims JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID WHERE Settlements.Date_Claim_Settled = (SELECT MAX(Date_Claim_Settled) FROM Settlements) GROUP BY Claims.Claim_ID;
SELECT MIN(Date_Claim_Made) FROM Claims;
SELECT MIN(Date_Claim_Made) FROM Claims;
SELECT SUM(Amount_Settled) FROM Settlements;
SELECT SUM(Amount_Settled) FROM Settlements;
SELECT C.Customer_Details, C.Customer_ID FROM Customers C JOIN Customer_Policies CP ON C.Customer_ID = CP.Customer_ID GROUP BY C.Customer_ID, C.Customer_Details HAVING COUNT(CP.Policy_ID) > 1;
SELECT C.Customer_ID, C.Customer_Details FROM Customers C JOIN Customer_Policies CP ON C.Customer_ID = CP.Customer_ID GROUP BY C.Customer_ID, C.Customer_Details HAVING COUNT(CP.Policy_ID) > 1;
SELECT Claims.Date_Claim_Made, Settlements.Date_Claim_Settled  FROM Claims  JOIN Settlements ON Claims.Claim_ID = Settlements.Claim_ID;
SELECT Date_Claim_Made, Date_Claim_Settled FROM Settlements;
SELECT Payment_Method_Code, COUNT(*) as Total_Usage  FROM Payments  GROUP BY Payment_Method_Code  ORDER BY Total_Usage DESC  LIMIT 1;
SELECT Payment_Method_Code, COUNT(*) as Count  FROM Payments  GROUP BY Payment_Method_Code  ORDER BY Count DESC  LIMIT 1;
SELECT Payment_Method_Code, COUNT(*) as Payment_Count  FROM Payments  GROUP BY Payment_Method_Code  ORDER BY Payment_Count ASC  LIMIT 1;
SELECT Payment_Method_Code, COUNT(*) as Count  FROM Payments  GROUP BY Payment_Method_Code  ORDER BY Count ASC  LIMIT 1;
SELECT SUM(Amount_Payment) FROM Payments;
SELECT SUM(Amount_Payment) AS Total_Payment_Processed FROM Payments;
SELECT DISTINCT Customer_Details FROM Customers;
SELECT DISTINCT Customer_Details FROM Customers;
SELECT Policy_Type_Code, COUNT(*) as Number_of_Customers FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY Number_of_Customers DESC LIMIT 1;
SELECT Policy_Type_Code, COUNT(Customer_ID) as Num_Customers FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY Num_Customers DESC LIMIT 1;
SELECT COUNT(*) FROM Settlements;
SELECT COUNT(*) FROM Settlements;
SELECT Payment_ID, Date_Payment_Made, Amount_Payment  FROM Payments  WHERE Payment_Method_Code = 'Visa';
SELECT Payment_ID, Date_Payment_Made, Amount_Payment  FROM Payments  WHERE Payment_Method_Code = 'Visa';
SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customer_Policies)
SELECT Customers.Customer_Details  FROM Customers  LEFT JOIN Customer_Policies ON Customers.Customer_ID = Customer_Policies.Customer_ID  WHERE Customer_Policies.Policy_ID IS NULL;
SELECT C.Date_Claim_Made, C.Date_Claim_Settled, C.Amount_Settled FROM Claims C JOIN Settlements S ON C.Claim_ID = S.Claim_ID WHERE (SELECT COUNT(*) FROM Settlements WHERE Claim_ID = C.Claim_ID) = 1;
SELECT      c.Date_Claim_Made,      c.Date_Claim_Settled,      c.Amount_Settled  FROM      Claims c  WHERE      c.Claim_ID IN (         SELECT              Claim_ID          FROM              Settlements          GROUP BY              Claim_ID          HAVING              COUNT(Settlement_ID) = 1     );
SELECT SUM(Amount_Claimed) FROM Claims;
SELECT SUM(Amount_Claimed) FROM Claims;
SELECT Department.Name FROM Department JOIN Affiliated_With ON Department.DepartmentID = Affiliated_With.Department GROUP BY Department.Name ORDER BY COUNT(Affiliated_With.Physician) DESC LIMIT 1;
SELECT Department.Name FROM Department JOIN Affiliated_With ON Department.DepartmentID = Affiliated_With.Department GROUP BY Department.Name ORDER BY COUNT(Affiliated_With.Physician) DESC LIMIT 1;
SELECT D.Head FROM Department D WHERE D.DepartmentID = (     SELECT A.Department     FROM (         SELECT Department, COUNT(*) AS Count         FROM Affiliated_With         GROUP BY Department         ORDER BY Count         LIMIT 1     ) A )
Error: 第 3902 个样本有 2 个SQL。
SELECT D.Name, E.Position  FROM Department D  JOIN Physician E ON D.Head = E.EmployeeID  WHERE D.DepartmentID IN (     SELECT A.Department      FROM Affiliated_With A      GROUP BY A.Department      ORDER BY COUNT(A.Physician)      LIMIT 1 )
SELECT D.Name, P.Name, P.Position FROM Department D JOIN Physician P ON D.Head = P.EmployeeID WHERE D.DepartmentID IN (     SELECT A.Department     FROM Affiliated_With A     GROUP BY A.Department     ORDER BY COUNT(A.Physician) ASC     LIMIT 1 )
SELECT P.Name  FROM Patient P  JOIN Appointment A ON P.SSN = A.Patient;
SELECT P.Name  FROM Patient P  JOIN Appointment A ON P.SSN = A.Patient;
SELECT T1.Name, T1.Phone  FROM Patient AS T1  JOIN Appointment AS T2 ON T1.SSN = T2.Patient  GROUP BY T2.Patient  HAVING COUNT(T2.AppointmentID) > 1;
SELECT P.Name, P.Phone  FROM Patient P  JOIN Appointment A ON P.SSN = A.Patient  GROUP BY P.SSN  HAVING COUNT(A.AppointmentID) > 1;
SELECT AppointmentID FROM Appointment WHERE Start = (SELECT MAX(Start) FROM Appointment);
SELECT AppointmentID FROM Appointment ORDER BY Start DESC LIMIT 1;
SELECT DISTINCT P.Name  FROM Physician P  JOIN Appointment A ON P.EmployeeID = A.Physician;
SELECT DISTINCT P.Name  FROM Physician P  JOIN Appointment A ON P.EmployeeID = A.Physician;
SELECT P.Name  FROM Physician P  WHERE P.EmployeeID NOT IN (SELECT A.Physician FROM Appointment A)
SELECT P.Name  FROM Physician P  WHERE NOT EXISTS (     SELECT *      FROM Appointment A      WHERE A.Physician = P.EmployeeID );
SELECT P.Name AS PhysicianName, D.Name AS DepartmentName  FROM Physician P  JOIN Affiliated_With AW ON P.EmployeeID = AW.Physician  JOIN Department D ON AW.Department = D.DepartmentID  WHERE AW.PrimaryAffiliation = 1;
SELECT P.Name, D.Name  FROM Physician P  JOIN Affiliated_With AW ON P.EmployeeID = AW.Physician  JOIN Department D ON AW.Department = D.DepartmentID  WHERE AW.PrimaryAffiliation = 1;
SELECT P.Name  FROM Patient P  JOIN Appointment A ON P.SSN = A.Patient  WHERE A.Start = (SELECT MAX(Start) FROM Appointment);
SELECT P.Name  FROM Patient P, Appointment A  WHERE P.SSN = A.Patient  ORDER BY A.Start DESC  LIMIT 1;
SELECT COUNT(*)  FROM Stay  WHERE Room = '112';
SELECT COUNT(*) FROM Stay WHERE Room = 112;
SELECT COUNT(*)  FROM Prescribes p  JOIN Physician ph ON p.Physician = ph.EmployeeID  JOIN Patient pt ON p.Patient = pt.SSN  WHERE ph.Name = 'John Dorian';
SELECT COUNT(*)  FROM Prescribes p  JOIN Physician ph ON p.Physician = ph.EmployeeID  JOIN Patient pt ON p.Patient = pt.SSN  WHERE ph.Name = 'John Dorian';
SELECT M.Name  FROM Medication M, Prescribes P, Stay S, Room R  WHERE P.Medication = M.Code  AND P.Patient = S.Patient  AND S.Room = R.RoomNumber  AND R.RoomNumber = 111;
SELECT M.Name  FROM Medication M  JOIN Prescribes P ON M.Code = P.Medication  JOIN Stay S ON P.Patient = S.Patient  WHERE S.Room = (SELECT RoomNumber FROM Room WHERE RoomNumber = 111) AND P.Date BETWEEN S.StayStart AND S.StayEnd;
SELECT p.Name FROM Patient p JOIN Stay s ON p.SSN = s.Patient WHERE s.Room = 111 ORDER BY s.StayEnd DESC LIMIT 1;
SELECT Stay.Patient FROM Stay JOIN Room ON Stay.Room = Room.RoomNumber WHERE Room.RoomNumber = 111 ORDER BY Stay.StayEnd DESC LIMIT 1;
SELECT Nurse.Name FROM Nurse JOIN Appointment ON Nurse.EmployeeID = Appointment.PrepNurse GROUP BY Nurse.Name ORDER BY COUNT(Appointment.AppointmentID) DESC LIMIT 1;
SELECT Nurse.Name FROM Nurse JOIN Appointment ON Nurse.EmployeeID = Appointment.PrepNurse GROUP BY Nurse.Name ORDER BY COUNT(Appointment.AppointmentID) DESC LIMIT 1;
SELECT P.Name, COUNT(DISTINCT A.Patient) AS NumberOfPatients FROM Physician P JOIN Appointment A ON P.EmployeeID = A.Physician GROUP BY P.EmployeeID, P.Name;
SELECT Physician.Name, COUNT(Patient.SSN) AS NumberOfPatients FROM Physician JOIN Patient ON Physician.EmployeeID = Patient.PCP GROUP BY Physician.Name;
SELECT P.Name FROM Physician P JOIN Patient PT ON PT.PCP = P.EmployeeID GROUP BY P.EmployeeID, P.Name HAVING COUNT(PT.SSN) > 1;
SELECT P.Name FROM Physician P JOIN Patient PT ON P.EmployeeID = PT.PCP GROUP BY P.Name HAVING COUNT(PT.SSN) > 1;
SELECT BlockFloor, COUNT(RoomNumber) AS NumberOfRooms FROM Room GROUP BY BlockFloor;
SELECT BlockFloor, COUNT(RoomNumber) AS NumberOfRooms FROM Room GROUP BY BlockFloor;
SELECT BlockCode, COUNT(RoomNumber) AS NumberOfRooms FROM Room GROUP BY BlockCode;
SELECT BlockCode, COUNT(RoomNumber) AS NumberOfRooms FROM Room GROUP BY BlockCode;
SELECT DISTINCT BlockCode  FROM Block  WHERE BlockCode NOT IN (SELECT BlockCode FROM Room WHERE Unavailable = 1)
SELECT DISTINCT(BlockCode)  FROM Block  WHERE BlockCode NOT IN (SELECT BlockCode FROM Room WHERE Unavailable = 1)
SELECT COUNT(DISTINCT RoomType) FROM Room;
SELECT COUNT(DISTINCT RoomType) FROM Room;
SELECT P.Name  FROM Physician P  JOIN Prescribes Pr ON P.EmployeeID = Pr.Physician  JOIN Medication M ON M.Code = Pr.Medication  WHERE M.Name = 'Thesisin';
SELECT P.Name  FROM Physician P  JOIN Prescribes Pr ON P.EmployeeID = Pr.Physician  JOIN Medication M ON M.Code = Pr.Medication  WHERE M.Name = 'Thesisin';
SELECT DISTINCT P.Name, P.Position  FROM Physician P  JOIN Prescribes Pr ON P.EmployeeID = Pr.Physician  JOIN Medication M ON Pr.Medication = M.Code  WHERE M.Brand = 'X';
SELECT P.Name, P.Position  FROM Physician P  JOIN Prescribes Pr ON P.EmployeeID = Pr.Physician  JOIN Medication M ON Pr.Medication = M.Code  WHERE M.Brand = 'X';
SELECT Medication.Brand, COUNT(*) AS NumberOfPrescriptions FROM Prescribes JOIN Medication ON Prescribes.Medication = Medication.Code GROUP BY Medication.Brand;
SELECT Medication.Brand, COUNT(*)  FROM Prescribes  JOIN Medication ON Prescribes.Medication = Medication.Code  GROUP BY Medication.Brand;
SELECT Name FROM Physician WHERE Position LIKE '%senior%';
SELECT Name FROM Physician WHERE Position LIKE '%senior%';
SELECT p.Name FROM Patient p JOIN Undergoes u ON p.SSN = u.Patient WHERE u.DateUndergoes = (     SELECT MAX(DateUndergoes) FROM Undergoes );
SELECT p.Name FROM Patient p JOIN Undergoes u ON p.SSN = u.Patient ORDER BY u.DateUndergoes DESC LIMIT 1;
SELECT P.Name  FROM Patient P, Undergoes U, Stay S  WHERE P.SSN = U.Patient AND U.Patient = S.Patient AND S.Room = 111;
SELECT DISTINCT p.Name  FROM Patient p  JOIN Stay s ON p.SSN = s.Patient  JOIN Undergoes u ON p.SSN = u.Patient AND s.StayID = u.Stay  WHERE s.Room = '111';
SELECT DISTINCT Name  FROM Nurse  ORDER BY Name ASC;
SELECT DISTINCT Name  FROM Nurse  ORDER BY Name ASC;
SELECT DISTINCT N.Name  FROM Nurse N  JOIN On_Call OC ON N.EmployeeID = OC.Nurse  JOIN Stay S ON OC.BlockFloor = S.Room AND OC.BlockCode = S.Room AND OC.OnCallStart < S.StayEnd AND OC.OnCallEnd > S.StayStart  JOIN Undergoes U ON S.StayID = U.Stay
SELECT DISTINCT N.Name  FROM Nurse N  JOIN On_Call OC ON N.EmployeeID = OC.Nurse  JOIN Stay S ON OC.BlockFloor = S.Room.BlockFloor AND OC.BlockCode = S.Room.BlockCode  JOIN Undergoes U ON S.StayID = U.Stay;
SELECT DISTINCT Name  FROM Medication  ORDER BY Name ASC;
SELECT DISTINCT Name  FROM Medication  ORDER BY Name ASC;
SELECT P.Name  FROM Physician P  JOIN Prescribes Pr ON P.EmployeeID = Pr.Physician  WHERE Pr.Dose = (SELECT MAX(Dose) FROM Prescribes)
SELECT P.Name  FROM Physician P  JOIN Prescribes Pr ON P.EmployeeID = Pr.Physician  ORDER BY Pr.Dose DESC  LIMIT 1;
SELECT Physician, Department  FROM Affiliated_With  WHERE PrimaryAffiliation = 1;
SELECT Physician, Department FROM Affiliated_With WHERE PrimaryAffiliation = 1;
SELECT DISTINCT d.Name  FROM Department d JOIN Affiliated_With af ON d.DepartmentID = af.Department WHERE af.PrimaryAffiliation = 1;
SELECT DISTINCT d.Name  FROM Department d JOIN Affiliated_With af ON d.DepartmentID = af.Department WHERE af.PrimaryAffiliation = 1;
SELECT Nurse.Name  FROM On_Call  JOIN Nurse ON On_Call.Nurse = Nurse.EmployeeID  WHERE On_Call.BlockFloor = 1 AND On_Call.BlockCode = 1;
SELECT Nurse FROM On_Call WHERE BlockFloor = 1 AND BlockCode = 1;
SELECT MAX(Cost) AS Highest_Cost, MIN(Cost) AS Lowest_Cost, AVG(Cost) AS Average_Cost FROM Procedures;
SELECT MAX(Cost) AS Highest_Cost, MIN(Cost) AS Lowest_Cost, AVG(Cost) AS Average_Cost FROM Procedures;
SELECT Name, Cost  FROM Procedures  ORDER BY Cost DESC;
SELECT Name, Cost  FROM Procedures  ORDER BY Cost DESC;
SELECT Name, Cost  FROM Procedures  ORDER BY Cost DESC  LIMIT 3;
SELECT Name, Cost  FROM Procedures  ORDER BY Cost DESC  LIMIT 3;
SELECT DISTINCT P.Name  FROM Physician P  JOIN Trained_In T ON P.EmployeeID = T.Physician  JOIN Procedures Pr ON T.Treatment = Pr.Code  WHERE Pr.Cost > 5000;
SELECT DISTINCT P.Name  FROM Physician P  JOIN Trained_In T ON P.EmployeeID = T.Physician  JOIN Procedures Pr ON T.Treatment = Pr.Code  WHERE Pr.Cost > 5000;
SELECT P.Name  FROM Physician P  JOIN Trained_In TI ON P.EmployeeID = TI.Physician  JOIN Procedures PR ON TI.Treatment = PR.Code  ORDER BY PR.Cost DESC  LIMIT 1;
SELECT T3.Name FROM `Procedures` AS T1 JOIN `Trained_In` AS T2 ON T1.Code = T2.Treatment JOIN `Physician` AS T3 ON T3.EmployeeID = T2.Physician WHERE T1.Cost = (SELECT MAX(Cost) FROM `Procedures`)
SELECT AVG(T2.Cost) FROM Trained_In AS T1 JOIN Procedures AS T2 ON T1.Treatment = T2.Code JOIN Physician AS T3 ON T1.Physician = T3.EmployeeID WHERE T3.Name = 'John Wen'
SELECT AVG(T.Procedures.Cost)  FROM Procedures T.Procedures JOIN Trained_In T.Trained_In ON T.Procedures.Code = T.Trained_In.Treatment JOIN Physician T.Physician ON T.Trained_In.Physician = T.Physician.EmployeeID WHERE T.Physician.Name = 'John Wen';
SELECT T3.Name FROM Trained_In AS T1 JOIN Physician AS T2 ON T1.Physician = T2.EmployeeID JOIN Procedures AS T3 ON T1.Treatment = T3.Code WHERE T2.Name = 'John Wen'
SELECT T3.Name FROM `Trained_In` AS T1 JOIN `Physician` AS T2 ON T1.Physician = T2.EmployeeID JOIN `Procedures` AS T3 ON T1.Treatment = T3.Code WHERE T2.Name = 'John Wen'
Error: 第 3981 个样本有 2 个SQL。
Error: 第 3982 个样本有 3 个SQL。
SELECT p.Name  FROM Procedures p  WHERE p.Cost > 1000  AND p.Code NOT IN (SELECT t.Treatment                    FROM Trained_In t                    JOIN Physician ph ON t.Physician = ph.EmployeeID                    WHERE ph.Name = 'John Wen')
SELECT p.Name  FROM Procedures p  WHERE p.Cost > 1000  AND p.Code NOT IN (     SELECT t.Treatment      FROM Trained_In t      JOIN Physician doc ON t.Physician = doc.EmployeeID      WHERE doc.Name = 'John Wen' )
SELECT p.Name  FROM Procedures p  JOIN Trained_In t ON p.Code = t.Treatment  JOIN Physician ph ON t.Physician = ph.EmployeeID  WHERE p.Cost < 5000 AND ph.Name = 'John Wen';
SELECT p.Name  FROM Procedures p  JOIN Trained_In t ON p.Code = t.Treatment  JOIN Physician ph ON t.Physician = ph.EmployeeID  WHERE p.Cost < 5000 AND ph.Name = 'John Wen';
SELECT P.Name FROM Physician P JOIN Affiliated_With AW ON P.EmployeeID = AW.Physician JOIN Department D ON AW.Department = D.DepartmentID WHERE D.Name IN ('Surgery', 'Psychiatry') GROUP BY P.Name HAVING COUNT(DISTINCT D.Name) = 2;
SELECT P.Name FROM Physician P JOIN Affiliated_With AW ON P.EmployeeID = AW.Physician JOIN Department D ON AW.Department = D.DepartmentID WHERE D.Name IN ('Surgery', 'Psychiatry') GROUP BY P.Name HAVING COUNT(DISTINCT D.Name) = 2;
SELECT P.Name FROM Physician P JOIN Affiliated_With AW ON P.EmployeeID = AW.Physician JOIN Department D ON AW.Department = D.DepartmentID WHERE D.Name = 'Surgery' OR D.Name = 'Psychiatry';
SELECT P.Name FROM Physician P JOIN Affiliated_With AW ON P.EmployeeID = AW.Physician JOIN Department D ON AW.Department = D.DepartmentID WHERE D.Name = 'Surgery' OR D.Name = 'Psychiatry';
SELECT p.Name  FROM Patient p  WHERE p.SSN NOT IN (     SELECT pr.Patient      FROM Prescribes pr      JOIN Medication m ON pr.Medication = m.Code      WHERE m.Name = 'Procrastin-X' );
SELECT Name  FROM Patient  WHERE SSN NOT IN (SELECT Patient                   FROM Prescribes                   JOIN Medication ON Prescribes.Medication = Medication.Code                   WHERE Medication.Name = 'Procrastin-X')
SELECT COUNT(*)  FROM Patient  WHERE SSN NOT IN (SELECT Patient FROM Prescribes WHERE Medication IN (SELECT Code FROM Medication WHERE Name = 'Procrastin-X'));
SELECT COUNT(DISTINCT T1.SSN) FROM Patient AS T1  LEFT JOIN Prescribes AS T2 ON T1.SSN = T2.Patient  LEFT JOIN Medication AS T3 ON T2.Medication = T3.Code  WHERE T3.Name != 'Procrastin-X'
SELECT COUNT(*) FROM Appointment;
SELECT COUNT(*) FROM Appointment;
SELECT Name FROM Nurse WHERE EmployeeID IN (SELECT Nurse FROM On_Call);
SELECT DISTINCT Name FROM Nurse WHERE EmployeeID IN (SELECT Nurse FROM On_Call);
SELECT COUNT(*) FROM ship;
SELECT COUNT(*) FROM ship;
SELECT Name  FROM ship  ORDER BY Tonnage ASC;
SELECT Name FROM ship ORDER BY Tonnage ASC;
SELECT Type, Nationality FROM ship;
SELECT Type, Nationality FROM ship;
SELECT Name FROM ship WHERE Nationality != 'United States';
SELECT Name FROM ship WHERE Nationality != 'United States';
SELECT Name  FROM ship  WHERE Nationality IN ('United States', 'United Kingdom');
SELECT Name  FROM ship  WHERE Nationality IN ('US', 'UK');
SELECT Name FROM ship WHERE Tonnage = (SELECT MAX(Tonnage) FROM ship);
SELECT Name FROM ship WHERE Tonnage = (SELECT MAX(Tonnage) FROM ship)
SELECT Type, COUNT(*) AS NumberOfShips FROM ship GROUP BY Type;
SELECT Type, COUNT(*) AS NumberOfShips FROM ship GROUP BY Type;
SELECT Type, COUNT(*) AS Count  FROM ship  GROUP BY Type  ORDER BY Count DESC  LIMIT 1;
SELECT Type, COUNT(*) AS Count  FROM ship  GROUP BY Type  ORDER BY Count DESC  LIMIT 1;
SELECT Nationality  FROM ship  GROUP BY Nationality  HAVING COUNT(*) > 2;
SELECT Nationality  FROM ship  GROUP BY Nationality  HAVING COUNT(Ship_ID) > 2;
SELECT Type, AVG(Tonnage)  FROM ship  GROUP BY Type;
SELECT Type, AVG(Tonnage)  FROM ship  GROUP BY Type;
SELECT mission.Code, mission.Fate, ship.Name  FROM mission  JOIN ship ON mission.Ship_ID = ship.Ship_ID;
SELECT mission.Code, mission.Fate, ship.Name  FROM mission  JOIN ship ON mission.Ship_ID = ship.Ship_ID;
SELECT s.Name  FROM ship s JOIN mission m ON s.Ship_ID = m.Ship_ID  WHERE m.Launched_Year > 1928;
SELECT s.Name  FROM ship s JOIN mission m ON s.Ship_ID = m.Ship_ID WHERE m.Launched_Year > 1928;
SELECT DISTINCT T1.Fate  FROM `ship_mission`.`mission` AS T1  JOIN `ship_mission`.`ship` AS T2 ON T1.Ship_ID = T2.Ship_ID  WHERE T2.Nationality = "United States"
SELECT DISTINCT Fate FROM ship_mission.mission WHERE Ship_ID IN (SELECT Ship_ID FROM ship_mission.ship WHERE Nationality = 'United States');
SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)
SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)
SELECT Type  FROM ship  WHERE Tonnage > 6000  INTERSECT  SELECT Type  FROM ship  WHERE Tonnage < 4000;
SELECT Type  FROM ship  WHERE Tonnage > 6000  INTERSECT  SELECT Type  FROM ship  WHERE Tonnage < 4000;
SELECT COUNT(*) FROM student_1.list;
SELECT COUNT(*) FROM student_1.list;
SELECT LastName  FROM list  WHERE Classroom = 111;
SELECT LastName FROM list WHERE Classroom = 111;
SELECT FirstName FROM student_1.list WHERE Classroom = 108;
SELECT FirstName FROM student_1.list WHERE Classroom = 108;
SELECT FirstName FROM student_1.list WHERE Classroom = 107;
SELECT FirstName FROM student_1.list WHERE Classroom = 107;
SELECT DISTINCT Classroom, Grade  FROM student_1.list;
SELECT Grade, Classroom FROM student_1.list;
SELECT Grade FROM student_1.list WHERE Classroom = 103;
SELECT Grade FROM list WHERE Classroom = 103;
SELECT Grade FROM student_1.list WHERE Classroom = 105;
SELECT Grade FROM student_1.list WHERE Classroom = 105;
SELECT DISTINCT Classroom FROM student_1.list WHERE Grade = 4;
SELECT DISTINCT Classroom FROM student_1.list WHERE Grade = 4;
SELECT DISTINCT Classroom FROM student_1.list WHERE Grade = 5;
SELECT DISTINCT Classroom  FROM list  WHERE Grade = 5;
SELECT t.LastName  FROM teachers t JOIN list l ON t.Classroom = l.Classroom WHERE l.Grade = 'fifth'
SELECT t.LastName  FROM teachers t JOIN list l ON t.Classroom = l.Classroom WHERE l.Grade = 5;
SELECT t.FirstName  FROM teachers t JOIN list l ON t.Classroom = l.Classroom WHERE l.Grade = 'first'
SELECT t.FirstName  FROM teachers t JOIN list l ON t.Classroom = l.Classroom WHERE l.Grade = 1;
SELECT FirstName FROM teachers WHERE Classroom = 110;
SELECT FirstName FROM teachers WHERE Classroom = 110;
SELECT LastName  FROM teachers  WHERE Classroom = 109;
SELECT LastName  FROM teachers  WHERE Classroom = 109;
SELECT FirstName, LastName FROM teachers;
SELECT FirstName, LastName FROM teachers;
SELECT FirstName, LastName FROM student_1.list;
SELECT FirstName, LastName FROM list;
SELECT list.FirstName, list.LastName FROM list JOIN teachers ON list.Classroom = teachers.Classroom WHERE teachers.FirstName = 'OTHA' AND teachers.LastName = 'MOYER';
SELECT list.FirstName, list.LastName  FROM list  JOIN teachers ON list.Classroom = teachers.Classroom  WHERE teachers.FirstName = 'OTHA' AND teachers.LastName = 'MOYER';
SELECT list.FirstName, list.LastName FROM list JOIN teachers ON list.Classroom = teachers.Classroom WHERE teachers.LastName = 'MARROTTE' AND teachers.FirstName = 'KIRK';
SELECT list.FirstName, list.LastName  FROM list  JOIN teachers ON list.Classroom = teachers.Classroom  WHERE teachers.LastName = 'MARROTTE' AND teachers.FirstName = 'KIRK';
SELECT t.FirstName, t.LastName  FROM teachers t JOIN list l ON t.Classroom = l.Classroom WHERE l.FirstName = 'EVELINA' AND l.LastName = 'BROMLEY';
SELECT t.FirstName, t.LastName  FROM teachers t JOIN list l ON t.Classroom = l.Classroom WHERE l.FirstName = 'EVELINA' AND l.LastName = 'BROMLEY';
SELECT t.LastName  FROM teachers t JOIN list l ON t.Classroom = l.Classroom WHERE l.FirstName = 'TAMI' AND l.LastName = 'GELL';
SELECT t.LastName  FROM teachers t JOIN list l ON t.Classroom = l.Classroom WHERE l.FirstName = 'TAMI' AND l.LastName = 'GELL';
SELECT COUNT(*)  FROM student_1.list l JOIN student_1.teachers t ON l.Classroom = t.Classroom WHERE t.LastName = 'LORIA' AND t.FirstName = 'ONDERSMA';
SELECT COUNT(*)  FROM student_1.list  WHERE Classroom IN (     SELECT Classroom      FROM student_1.teachers      WHERE LastName = 'LORIA' AND FirstName = 'ONDERSMA' );
SELECT COUNT(*)  FROM student_1.list l JOIN student_1.teachers t ON l.Classroom = t.Classroom WHERE t.LastName = 'KAWA' AND t.FirstName = 'GORDON';
SELECT COUNT(*)  FROM student_1.list  WHERE Classroom IN (     SELECT Classroom      FROM student_1.teachers      WHERE LastName = 'KAWA' AND FirstName = 'GORDON' );
SELECT COUNT(*)  FROM student_1.list  WHERE Classroom IN (     SELECT Classroom      FROM student_1.teachers      WHERE LastName = 'TARRING' AND FirstName = 'LEIA' );
SELECT COUNT(*)  FROM student_1.list  WHERE Classroom IN (     SELECT Classroom      FROM student_1.teachers      WHERE LastName = 'TARRING' AND FirstName = 'LEIA' );
SELECT COUNT(*)  FROM student_1.list AS l JOIN student_1.teachers AS t ON l.Classroom = t.Classroom WHERE l.FirstName = 'CHRISSY' AND l.LastName = 'NABOZNY';
SELECT COUNT(*)  FROM teachers t JOIN list l ON t.Classroom = l.Classroom WHERE l.FirstName = 'CHRISSY' AND l.LastName = 'NABOZNY';
SELECT COUNT(*)  FROM student_1.list AS l JOIN student_1.teachers AS t ON l.Classroom = t.Classroom WHERE l.LastName = 'MADLOCK' AND l.FirstName = 'RAY';
SELECT COUNT(*)  FROM student_1.list l JOIN student_1.teachers t ON l.Classroom = t.Classroom WHERE l.FirstName = 'MADLOCK' AND l.LastName = 'RAY';
SELECT FirstName, LastName  FROM list  WHERE Grade = '1'  AND Classroom NOT IN (SELECT Classroom FROM teachers WHERE LastName = 'Moyer' AND FirstName = 'Otha');
SELECT list.FirstName, list.LastName  FROM list  WHERE list.Grade = '1st'  AND list.Classroom NOT IN (     SELECT teachers.Classroom      FROM teachers      WHERE teachers.LastName = 'Moyer'      AND teachers.FirstName = 'Otta' );
SELECT list.LastName  FROM list  WHERE list.Grade = '3'  AND list.Classroom NOT IN (     SELECT teachers.Classroom      FROM teachers      WHERE teachers.LastName = 'COVIN' AND teachers.FirstName = 'JEROME' );
SELECT list.LastName  FROM list  WHERE list.Grade = '3'  AND list.Classroom NOT IN (     SELECT teachers.Classroom      FROM teachers      WHERE teachers.LastName = 'COVIN' AND teachers.FirstName = 'JEROME' )
SELECT      g.Grade,     COUNT(DISTINCT g.Classroom) AS NumberOfClassrooms,     COUNT(g.LastName) AS TotalNumberOfStudents FROM      student_1.list AS g GROUP BY      g.Grade
SELECT      Grade,     COUNT(DISTINCT Classroom) AS NumberOfClassrooms,     COUNT(FirstName) AS TotalStudents FROM      student_1.list GROUP BY      Grade;
SELECT Classroom, COUNT(DISTINCT Grade)  FROM student_1.list  GROUP BY Classroom;
SELECT Classroom, COUNT(DISTINCT Grade)  FROM student_1.list  GROUP BY Classroom;
SELECT Classroom, COUNT(*) AS student_count  FROM student_1.list  GROUP BY Classroom  ORDER BY student_count DESC  LIMIT 1;
SELECT Classroom, COUNT(*) AS student_count  FROM list  GROUP BY Classroom  ORDER BY student_count DESC  LIMIT 1;
SELECT Classroom, COUNT(*) AS NumberOfStudents FROM student_1.list GROUP BY Classroom;
SELECT Classroom, COUNT(*) AS NumberOfStudents FROM student_1.list GROUP BY Classroom;
SELECT Grade, COUNT(*) AS Total_Students  FROM student_1.list  WHERE Grade = 0  GROUP BY Grade, Classroom;
SELECT Classroom, COUNT(*) AS StudentCount FROM student_1.list WHERE Grade = 0 GROUP BY Classroom;
SELECT Classroom, COUNT(*) AS Total_Students  FROM student_1.list  WHERE Grade = '4'  GROUP BY Classroom;
SELECT Classroom, COUNT(*) AS Total_Students  FROM student_1.list  WHERE Grade = '4'  GROUP BY Classroom;
SELECT t.FirstName, t.LastName FROM teachers t JOIN (   SELECT Classroom, COUNT(*) AS student_count   FROM list   GROUP BY Classroom   ORDER BY student_count DESC   LIMIT 1 ) l ON t.Classroom = l.Classroom;
SELECT T.FirstName, T.LastName  FROM teachers T  JOIN (     SELECT Classroom, COUNT(*) AS student_count      FROM list      GROUP BY Classroom      ORDER BY student_count DESC      LIMIT 1 ) L ON T.Classroom = L.Classroom;
SELECT Classroom, COUNT(*) AS NumOfStudents FROM student_1.list GROUP BY Classroom;
SELECT Classroom, COUNT(*) AS NumberOfStudents FROM student_1.list GROUP BY Classroom;
SELECT COUNT(*)  FROM company  WHERE Headquarters = 'US';
SELECT Name  FROM company  ORDER BY Sales_in_Billion ASC;
SELECT Headquarters, Industry FROM company;
SELECT Name  FROM company  WHERE Industry IN ('Banking', 'Retailing');
SELECT MAX(Market_Value_in_Billion) AS MaxMarketValue, MIN(Market_Value_in_Billion) AS MinMarketValue FROM company;
Error: 第 4102 个样本有 2 个SQL。
SELECT Headquarters, COUNT(*) AS Num_of_Companies FROM company GROUP BY Headquarters;
SELECT Headquarters  FROM company  GROUP BY Headquarters  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Headquarters  FROM company  GROUP BY Headquarters  HAVING COUNT(*) >= 2;
SELECT DISTINCT Headquarters  FROM company  WHERE Industry = 'Banking'  INTERSECT  SELECT DISTINCT Headquarters  FROM company  WHERE Industry = 'Oil and Gas'
SELECT company.Name AS Company_Name, people.Name AS Employee_Name  FROM company  JOIN employment ON company.Company_ID = employment.Company_ID  JOIN people ON employment.People_ID = people.People_ID;
SELECT c.Name AS Company_Name, p.Name AS Employee_Name, e.Year_working  FROM company AS c  JOIN employment AS e ON c.Company_ID = e.Company_ID  JOIN people AS p ON p.People_ID = e.People_ID  ORDER BY e.Year_working DESC;
SELECT p.Name FROM people p JOIN employment e ON p.People_ID = e.People_ID JOIN company c ON e.Company_ID = c.Company_ID WHERE c.Sales_in_Billion > 200;
SELECT company.Name, COUNT(employment.People_ID) AS NumberOfEmployees FROM company JOIN employment ON company.Company_ID = employment.Company_ID GROUP BY company.Name;
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM employment);
SELECT Name  FROM company  WHERE Sales_in_Billion > 200  ORDER BY Sales_in_Billion DESC, Profits_in_Billion DESC;
SELECT COUNT(*) FROM film;
SELECT COUNT(*) FROM film;
SELECT DISTINCT Director FROM film;
SELECT DISTINCT Director FROM film;
SELECT AVG(Gross_in_dollar) FROM film;
SELECT AVG(Gross_in_dollar) FROM film;
SELECT Low_Estimate, High_Estimate FROM film_market_estimation;
SELECT Low_Estimate, High_Estimate FROM film_market_estimation;
SELECT DISTINCT Type FROM film_market_estimation WHERE Year = 1995;
SELECT DISTINCT Type  FROM film_market_estimation  WHERE Year = 1995;
SELECT MAX(Number_cities) AS Max_Cities, MIN(Number_cities) AS Min_Cities  FROM market;
SELECT MAX(Number_cities) AS Max_Cities, MIN(Number_cities) AS Min_Cities  FROM market;
SELECT COUNT(*) FROM market WHERE Number_cities < 300;
SELECT COUNT(*)  FROM market  WHERE Number_cities < 300;
SELECT Country FROM market ORDER BY Country ASC;
SELECT Country FROM market ORDER BY Country ASC;
SELECT Country FROM market ORDER BY Number_cities DESC;
SELECT Country FROM market ORDER BY Number_cities DESC;
SELECT film.Title, film_market_estimation.Type  FROM film  JOIN film_market_estimation ON film.Film_ID = film_market_estimation.Film_ID;
SELECT film.Title, film_market_estimation.Type  FROM film  JOIN film_market_estimation ON film.Film_ID = film_market_estimation.Film_ID;
SELECT DISTINCT T1.Director  FROM film AS T1  JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID  WHERE T2.Year = 1995;
SELECT DISTINCT d.Director FROM film d JOIN film_market_estimation fme ON d.Film_ID = fme.Film_ID WHERE fme.Year = 1995;
SELECT AVG(T2.Number_cities)  FROM film_market_estimation AS T1  JOIN market AS T2 ON T1.Market_ID = T2.Market_ID  WHERE T1.Low_Estimate > 10000
SELECT AVG(T2.Number_cities)  FROM film_market_estimation AS T1  JOIN market AS T2 ON T1.Market_ID = T2.Market_ID  WHERE T1.Low_Estimate > 10000
SELECT T2.Country, T1.Year  FROM film_market_estimation AS T1  JOIN market AS T2  ON T1.Market_ID = T2.Market_ID;
SELECT T2.Country, T1.Year  FROM film_market_estimation AS T1  JOIN market AS T2  ON T1.Market_ID = T2.Market_ID;
SELECT fm.Year  FROM film_market_estimation fm JOIN market m ON fm.Market_ID = m.Market_ID WHERE m.Country = 'Japan' ORDER BY fm.Year DESC;
SELECT fm.Year  FROM film_market_estimation fm JOIN market m ON fm.Market_ID = m.Market_ID WHERE m.Country = 'Japan' ORDER BY fm.Year DESC;
SELECT Studio, COUNT(*) AS NumberOfFilms FROM film GROUP BY Studio;
SELECT Studio, COUNT(Title) AS Number_of_Films FROM film GROUP BY Studio;
SELECT Studio  FROM film  GROUP BY Studio  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Studio  FROM film  GROUP BY Studio  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Studio  FROM film  GROUP BY Studio  HAVING COUNT(Title) >= 2;
SELECT Studio  FROM film  GROUP BY Studio  HAVING COUNT(Studio) >= 2;
SELECT Title  FROM film  WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)
SELECT Title  FROM film  WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)
SELECT Studio FROM film WHERE Director = 'Nicholas Meyer' INTERSECT SELECT Studio FROM film WHERE Director = 'Walter Hill'
SELECT DISTINCT Studio  FROM film  WHERE Director = 'Nicholas Meyer'  INTERSECT  SELECT DISTINCT Studio  FROM film  WHERE Director = 'Walter Hill'
SELECT Title, Studio FROM film WHERE Studio LIKE '%Universal%';
SELECT Title, Studio FROM film WHERE Studio LIKE '%Universal%';
Error: 第 4153 个样本有 2 个SQL。
Error: 第 4154 个样本有 2 个SQL。
SELECT Studio  FROM film  GROUP BY Studio  HAVING AVG(Gross_in_dollar) > 4500000;
SELECT Studio FROM film  GROUP BY Studio  HAVING AVG(Gross_in_dollar) > 4500000;
SELECT f.Title  FROM film f JOIN film_market_estimation fme ON f.Film_ID = fme.Film_ID  WHERE fme.High_Estimate = (SELECT MAX(High_Estimate) FROM film_market_estimation);
SELECT f.Title  FROM film f  JOIN film_market_estimation fme ON f.Film_ID = fme.Film_ID  WHERE fme.High_Estimate = (SELECT MAX(High_Estimate) FROM film_market_estimation);
SELECT f.Title, f.Director  FROM film f  WHERE f.Film_ID NOT IN (     SELECT fm.Film_ID      FROM film_market_estimation fm      JOIN market m ON fm.Market_ID = m.Market_ID      WHERE m.Country = 'China' );
SELECT f.Title, f.Director  FROM film f  WHERE f.Film_ID NOT IN (     SELECT fm.Film_ID      FROM film_market_estimation fm      JOIN market m ON fm.Market_ID = m.Market_ID      WHERE m.Country = 'China' );
SELECT COUNT(*) FROM Ref_Calendar;
SELECT COUNT(*) FROM Ref_Calendar;
SELECT Calendar_Date, Day_Number FROM Ref_Calendar;
SELECT Calendar_Date, Day_Number FROM Ref_Calendar;
SELECT COUNT(*) FROM Ref_Document_Types;
SELECT COUNT(*) FROM Ref_Document_Types;
SELECT Document_Type_Code, Document_Type_Name  FROM Ref_Document_Types;
SELECT Document_Type_Code, Document_Type_Name  FROM Ref_Document_Types;
SELECT Document_Type_Name, Document_Type_Description  FROM Ref_Document_Types  WHERE Document_Type_Code = 'RV';
SELECT Document_Type_Name, Document_Type_Description  FROM Ref_Document_Types  WHERE Document_Type_Code = 'RV';
SELECT Document_Type_Code  FROM Ref_Document_Types  WHERE Document_Type_Name = 'Paper';
SELECT Document_Type_Code  FROM Ref_Document_Types  WHERE Document_Type_Name = 'Paper';
SELECT COUNT(*)  FROM All_Documents  WHERE Document_Type_Code IN ('CV', 'BK');
SELECT COUNT(*)  FROM All_Documents  WHERE Document_Type_Code IN ('CV', 'BK');
SELECT Date_Stored  FROM All_Documents  WHERE Document_Name = 'Marry CV';
SELECT Date_Stored  FROM All_Documents  WHERE Document_Name = 'Marry CV';
SELECT Ref_Calendar.Day_Number, Ref_Calendar.Calendar_Date  FROM Ref_Calendar  JOIN All_Documents ON Ref_Calendar.Calendar_Date = All_Documents.Date_Stored;
SELECT Ref_Calendar.Day_Number, All_Documents.Date_Stored  FROM All_Documents  JOIN Ref_Calendar ON All_Documents.Date_Stored = Ref_Calendar.Calendar_Date;
SELECT Ref_Document_Types.Document_Type_Name  FROM Ref_Document_Types  JOIN All_Documents  ON Ref_Document_Types.Document_Type_Code = All_Documents.Document_Type_Code  WHERE All_Documents.Document_Name = 'How to read a book';
SELECT T1.Document_Type_Name  FROM Ref_Document_Types AS T1  JOIN All_Documents AS T2  ON T1.Document_Type_Code = T2.Document_Type_Code  WHERE T2.Document_Name = 'How to read a book';
SELECT COUNT(*) FROM Ref_Locations;
SELECT COUNT(*) FROM Ref_Locations;
SELECT Location_Code, Location_Name FROM Ref_Locations;
SELECT Location_Code, Location_Name FROM Ref_Locations;
SELECT Location_Name, Location_Description  FROM Ref_Locations  WHERE Location_Code = 'x';
SELECT Location_Name, Location_Description  FROM Ref_Locations  WHERE Location_Code = 'x';
SELECT Location_Code  FROM Ref_Locations  WHERE Location_Name = 'Canada';
SELECT Location_Code  FROM Ref_Locations  WHERE Location_Name = 'Canada';
SELECT COUNT(*) FROM Roles;
SELECT COUNT(*) FROM Roles;
SELECT Role_Code, Role_Name, Role_Description FROM Roles;
SELECT Role_Code, Role_Name, Role_Description FROM Roles;
SELECT Role_Name, Role_Description  FROM Roles  WHERE Role_Code = 'MG';
SELECT Role_Name, Role_Description  FROM Roles  WHERE Role_Code = 'MG';
SELECT Role_Description  FROM Roles  WHERE Role_Name = 'Proof Reader';
SELECT Role_Description  FROM Roles  WHERE Role_Name = 'Proof Reader';
SELECT COUNT(*) FROM Employees;
SELECT COUNT(*) FROM Employees;
SELECT Employee_Name, Role_Code, Date_of_Birth  FROM Employees  WHERE Employee_Name = 'Armani';
SELECT Employee_Name, Role_Code, Date_of_Birth  FROM Employees  WHERE Employee_Name = 'Armani';
SELECT Employee_ID FROM Employees WHERE Employee_Name = 'Ebba';
SELECT Employee_ID FROM Employees WHERE Employee_Name = 'Ebba';
SELECT Employee_Name  FROM Employees  WHERE Role_Code = (SELECT Role_Code FROM Roles WHERE Role_Name = 'HR')
SELECT Employee_Name  FROM Employees  WHERE Role_Code = 'HR';
SELECT Roles.Role_Code, COUNT(Employees.Employee_ID) AS NumberOfEmployees FROM Roles JOIN Employees ON Roles.Role_Code = Employees.Role_Code GROUP BY Roles.Role_Code;
SELECT Roles.Role_Code, COUNT(Employees.Employee_ID) AS NumberOfEmployees FROM Roles LEFT JOIN Employees ON Roles.Role_Code = Employees.Role_Code GROUP BY Roles.Role_Code;
SELECT Role_Code  FROM Employees  GROUP BY Role_Code  ORDER BY COUNT(Employee_ID) DESC  LIMIT 1;
SELECT Role_Code  FROM Employees  GROUP BY Role_Code  ORDER BY COUNT(Employee_ID) DESC  LIMIT 1;
SELECT Role_Code FROM Employees GROUP BY Role_Code HAVING COUNT(Employee_ID) >= 3;
SELECT Role_Code FROM Roles WHERE Role_Code IN (     SELECT Role_Code     FROM Employees     GROUP BY Role_Code     HAVING COUNT(Employee_ID) >= 3 );
SELECT Role_Code, COUNT(Employee_ID) AS Num_Employees FROM Employees GROUP BY Role_Code ORDER BY Num_Employees ASC LIMIT 1;
SELECT Role_Code  FROM Employees  GROUP BY Role_Code  ORDER BY COUNT(Employee_ID)  LIMIT 1;
SELECT Roles.Role_Name, Roles.Role_Description  FROM Employees  JOIN Roles ON Employees.Role_Code = Roles.Role_Code  WHERE Employees.Employee_Name = 'Ebba';
SELECT Roles.Role_Name, Roles.Role_Description  FROM Roles  JOIN Employees ON Roles.Role_Code = Employees.Role_Code  WHERE Employees.Employee_Name = 'Ebba';
SELECT Employees.Employee_Name  FROM Employees  JOIN Roles ON Employees.Role_Code = Roles.Role_Code  WHERE Roles.Role_Name = 'Editor';
SELECT Employee_Name  FROM Employees  JOIN Roles ON Employees.Role_Code = Roles.Role_Code  WHERE Roles.Role_Name = 'Editor';
SELECT Employee_ID  FROM Employees  WHERE Role_Code IN (     SELECT Role_Code      FROM Roles      WHERE Role_Name = 'Human Resource' OR Role_Name = 'Manager' );
SELECT Employee_ID FROM Employees WHERE Role_Code IN (SELECT Role_Code FROM Roles WHERE Role_Name = 'Human Resource' OR Role_Name = 'Manager');
SELECT DISTINCT Location_Code FROM Document_Locations;
SELECT DISTINCT Location_Code FROM Document_Locations;
SELECT Ref_Locations.Location_Name  FROM Document_Locations  JOIN Ref_Locations ON Document_Locations.Location_Code = Ref_Locations.Location_Code  JOIN All_Documents ON Document_Locations.Document_ID = All_Documents.Document_ID  WHERE All_Documents.Document_Name = 'Robin CV';
SELECT Ref_Locations.Location_Name  FROM Document_Locations  JOIN Ref_Locations ON Document_Locations.Location_Code = Ref_Locations.Location_Code  JOIN All_Documents ON Document_Locations.Document_ID = All_Documents.Document_ID  WHERE All_Documents.Document_Name = 'Robin CV';
SELECT DL.Location_Code, DL.Date_in_Location_From, DL.Date_in_Locaton_To FROM Document_Locations DL;
SELECT dl.Document_ID, dl.Location_Code, dl.Date_in_Location_From, dl.Date_in_Locaton_To FROM Document_Locations dl;
SELECT Date_in_Location_From, Date_in_Locaton_To  FROM Document_Locations  JOIN All_Documents ON Document_Locations.Document_ID = All_Documents.Document_ID  WHERE All_Documents.Document_Name = 'Robin CV';
SELECT dl.Date_in_Location_From, dl.Date_in_Locaton_To  FROM Document_Locations dl  JOIN All_Documents ad ON dl.Document_ID = ad.Document_ID  WHERE ad.Document_Name = 'Robin CV';
SELECT DL.Location_Code, COUNT(DL.Document_ID) AS Number_of_Documents FROM Document_Locations DL GROUP BY DL.Location_Code;
SELECT DL.Location_Code, COUNT(DL.Document_ID) AS Number_of_Documents FROM Document_Locations DL GROUP BY DL.Location_Code;
SELECT Location_Code, COUNT(Document_ID) AS Document_Count  FROM Document_Locations  GROUP BY Location_Code  ORDER BY Document_Count DESC  LIMIT 1;
SELECT T2.Location_Code FROM All_Documents AS T1 JOIN Document_Locations AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Location_Code ORDER BY COUNT(T1.Document_ID) DESC LIMIT 1
SELECT Location_Code FROM Document_Locations GROUP BY Location_Code HAVING COUNT(Document_ID) >= 3;
SELECT Location_Code  FROM Document_Locations  GROUP BY Location_Code  HAVING COUNT(Document_ID) >= 3;
SELECT Ref_Locations.Location_Name, Ref_Locations.Location_Code  FROM Ref_Locations  JOIN Document_Locations ON Ref_Locations.Location_Code = Document_Locations.Location_Code  GROUP BY Ref_Locations.Location_Name, Ref_Locations.Location_Code  ORDER BY COUNT(Document_Locations.Document_ID) ASC  LIMIT 1;
SELECT T2.Location_Name, T2.Location_Code FROM Document_Locations AS T1  JOIN Ref_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code ORDER BY COUNT(T1.Document_ID) ASC LIMIT 1;
SELECT      D1.Employee_Name AS Destruction_Authorised_by,     D2.Employee_Name AS Destroyed_by FROM      Documents_to_be_Destroyed DTD JOIN      Employees D1 ON DTD.Destruction_Authorised_by_Employee_ID = D1.Employee_ID JOIN      Employees D2 ON DTD.Destroyed_by_Employee_ID = D2.Employee_ID;
SELECT      D1.Employee_Name AS 'Authorised_by',     D2.Employee_Name AS 'Destroyed_by' FROM      Documents_to_be_Destroyed DTD JOIN      Employees D1 ON DTD.Destruction_Authorised_by_Employee_ID = D1.Employee_ID JOIN      Employees D2 ON DTD.Destroyed_by_Employee_ID = D2.Employee_ID;
SELECT Employees.Employee_ID, COUNT(Documents_to_be_Destroyed.Document_ID)  FROM Employees  JOIN Documents_to_be_Destroyed  ON Employees.Employee_ID = Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID  GROUP BY Employees.Employee_ID;
SELECT E.Employee_ID, COUNT(D.Destruction_Authorised_by_Employee_ID) AS Num_Docs_Auth_Destroy FROM Employees E LEFT JOIN Documents_to_be_Destroyed D ON E.Employee_ID = D.Destruction_Authorised_by_Employee_ID GROUP BY E.Employee_ID;
SELECT      dbe.Destroyed_by_Employee_ID,      COUNT(DISTINCT dbe.Document_ID) AS Num_Documents_Destroyed FROM      Documents_to_be_Destroyed dbe WHERE      dbe.Actual_Destruction_Date IS NOT NULL GROUP BY      dbe.Destroyed_by_Employee_ID;
SELECT      E.Employee_ID,      COUNT(Destroyed_by_Employee_ID) as Num_Documents_Destroyed FROM      Employees E JOIN      Documents_to_be_Destroyed D  ON      E.Employee_ID = D.Destroyed_by_Employee_ID GROUP BY      E.Employee_ID;
SELECT Employee_ID  FROM Employees  WHERE Employee_ID NOT IN (SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed)
SELECT Employee_ID  FROM Employees  WHERE Employee_ID NOT IN (SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_Destroyed);
SELECT DISTINCT Destruction_Authorised_by_Employee_ID  FROM Documents_to_be_Destroyed;
SELECT DISTINCT Destruction_Authorised_by_Employee_ID  FROM Documents_to_be_Destroyed;
SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed;
SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed;
SELECT Employee_ID  FROM Employees  WHERE Employee_ID NOT IN (SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed)
SELECT Employee_ID  FROM Employees  WHERE Employee_ID NOT IN (SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed);
SELECT DISTINCT Employee_ID  FROM (     SELECT Destruction_Authorised_by_Employee_ID AS Employee_ID      FROM Documents_to_be_Destroyed      UNION      SELECT Destroyed_by_Employee_ID      FROM Documents_to_be_Destroyed  ) AS combined;
SELECT DISTINCT E.Employee_ID FROM Employees E WHERE E.Employee_ID IN (     SELECT D.Destroyed_by_Employee_ID     FROM Documents_to_be_Destroyed D     WHERE D.Destroyed_by_Employee_ID IS NOT NULL ) OR E.Employee_ID IN (     SELECT D.Destruction_Authorised_by_Employee_ID     FROM Documents_to_be_Destroyed D     WHERE D.Destruction_Authorised_by_Employee_ID IS NOT NULL );
SELECT COUNT(*) FROM Club;
SELECT COUNT(*) FROM Club;
SELECT ClubName FROM Club;
SELECT ClubName FROM Club;
SELECT COUNT(*) FROM Student;
SELECT COUNT(*) FROM Student;
SELECT Fname FROM Student;
SELECT Fname FROM Student;
SELECT s.LName FROM Student s JOIN Member_of_club m ON s.StuID = m.StuID JOIN Club c ON m.ClubID = c.ClubID WHERE c.ClubName = 'Bootup Baltimore';
SELECT Student.LName  FROM Student  JOIN Member_of_club ON Student.StuID = Member_of_club.StuID  JOIN Club ON Member_of_club.ClubID = Club.ClubID  WHERE Club.ClubName = 'Bootup Baltimore';
SELECT S.LName FROM Student S JOIN Member_of_club M ON S.StuID = M.StuID JOIN Club C ON M.ClubID = C.ClubID WHERE C.ClubName = 'Hopkins Student Enterprises';
SELECT S.LName  FROM Student S JOIN Member_of_club M ON S.StuID = M.StuID  JOIN Club C ON M.ClubID = C.ClubID WHERE C.ClubName = 'Hopkins Student Enterprises';
SELECT COUNT(*)  FROM Member_of_club JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE ClubName = 'Tennis Club';
SELECT COUNT(*)  FROM Member_of_club JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE ClubName = 'Tennis Club';
SELECT COUNT(*)  FROM Member_of_club M, Club C  WHERE M.ClubID = C.ClubID AND C.ClubName = 'Pen and Paper Gaming';
SELECT COUNT(*)  FROM Member_of_club M, Club C  WHERE M.ClubID = C.ClubID AND C.ClubName = 'Pen and Paper Gaming';
SELECT COUNT(*)  FROM Member_of_club M, Student S  WHERE S.StuID = M.StuID AND S.LName = 'Smith' AND S.Fname = 'Linda';
SELECT COUNT(*)  FROM Member_of_club M, Student S  WHERE S.StuID = M.StuID AND S.LName = 'Smith' AND S.Fname = 'Linda';
SELECT COUNT(*)  FROM Club  WHERE ClubID IN (     SELECT ClubID      FROM Member_of_club      WHERE StuID = (         SELECT StuID          FROM Student          WHERE Fname = 'Tracy' AND LName = 'Kim'     ) );
SELECT COUNT(*)  FROM Member_of_club M, Student S, Club C  WHERE S.StuID = M.StuID AND M.ClubID = C.ClubID AND S.Fname = 'Tracy' AND S.LName = 'Kim';
SELECT S.Fname, S.LName FROM Student S, Club C, Member_of_club M WHERE S.StuID = M.StuID AND C.ClubID = M.ClubID AND C.ClubName = 'Bootup Baltimore' AND S.Sex = 'F';
SELECT S.Fname, S.LName  FROM Student S, Club C, Member_of_club M  WHERE S.StuID = M.StuID AND C.ClubID = M.ClubID AND C.ClubName = 'Bootup Baltimore' AND S.Sex = 'F';
SELECT S.Fname, S.LName FROM Student S, Club C, Member_of_club M WHERE S.StuID = M.StuID AND C.ClubID = M.ClubID AND C.ClubName = 'Hopkins Student Enterprises' AND S.Sex = 'M';
SELECT S.Fname, S.LName FROM Student S, Club C, Member_of_club M WHERE S.StuID = M.StuID AND C.ClubID = M.ClubID AND C.ClubName = 'Hopkins Student Enterprises' AND S.Sex = 'M';
SELECT S.Fname, S.LName FROM Student S, Club C, Member_of_club M WHERE C.ClubName = 'Bootup Baltimore' AND S.Major = '600' AND S.StuID = M.StuID AND C.ClubID = M.ClubID;
SELECT S.Fname, S.LName FROM Student S JOIN Member_of_club M ON S.StuID = M.StuID JOIN Club C ON M.ClubID = C.ClubID WHERE C.ClubName = 'Bootup Baltimore' AND S.Major = '600';
SELECT Club.ClubName, COUNT(Member_of_club.StuID) as MemberCount FROM Club JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Student.Major = '600' GROUP BY Club.ClubName ORDER BY MemberCount DESC LIMIT 1;
SELECT Club.ClubName, COUNT(Member_of_club.StuID) as MemberCount FROM Club JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Student.Major = '600' GROUP BY Club.ClubID ORDER BY MemberCount DESC LIMIT 1;
SELECT ClubName  FROM Club  WHERE ClubID = (     SELECT ClubID      FROM (         SELECT ClubID, COUNT(*) AS FemalesCount          FROM Member_of_club          WHERE StuID IN (             SELECT StuID              FROM Student              WHERE Sex = 'F'         )          GROUP BY ClubID          ORDER BY FemalesCount DESC          LIMIT 1     ) AS subquery )
SELECT ClubName FROM Club  JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID  JOIN Student ON Student.StuID = Member_of_club.StuID  WHERE Student.Sex = 'F'  GROUP BY Club.ClubID  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT ClubDesc FROM Club WHERE ClubName = 'Tennis Club';
SELECT ClubDesc FROM Club WHERE ClubName = 'Tennis Club';
SELECT ClubDesc FROM Club WHERE ClubName = 'Pen and Paper Gaming';
SELECT ClubDesc FROM Club WHERE ClubName = 'Pen and Paper Gaming';
SELECT ClubLocation FROM Club WHERE ClubName = 'Tennis Club';
SELECT ClubLocation FROM Club WHERE ClubName = 'Tennis Club';
SELECT ClubLocation FROM Club WHERE ClubName = 'Pen and Paper Gaming';
SELECT ClubLocation FROM Club WHERE ClubName = 'Pen and Paper Gaming';
SELECT ClubLocation FROM Club WHERE ClubName = 'Hopkins Student Enterprises';
SELECT ClubLocation FROM Club WHERE ClubName = 'Hopkins Student Enterprises';
SELECT ClubName  FROM Club  WHERE ClubLocation = 'AKW';
SELECT ClubName FROM Club WHERE ClubLocation = 'AKW';
SELECT COUNT(*)  FROM Club  WHERE ClubLocation = 'HHH';
SELECT COUNT(*)  FROM Club  WHERE ClubLocation = 'HHH';
SELECT S.Fname, S.LName  FROM Student S  JOIN Member_of_club M ON S.StuID = M.StuID  JOIN Club C ON M.ClubID = C.ClubID  WHERE C.ClubName = 'Bootup Baltimore' AND M.Position = 'President';
SELECT S.Fname, S.LName  FROM Student S  JOIN Member_of_club M ON S.StuID = M.StuID  JOIN Club C ON M.ClubID = C.ClubID  WHERE C.ClubName = 'Bootup Baltimore' AND M.Position = 'President';
SELECT S.Fname, S.LName  FROM Student S, Club C, Member_of_club M  WHERE C.ClubName = 'Hopkins Student Enterprises'  AND C.ClubID = M.ClubID  AND S.StuID = M.StuID  AND M.Position = 'CTO';
SELECT S.Fname, S.LName  FROM Student S, Club C, Member_of_club M  WHERE C.ClubName = 'Hopkins Student Enterprises'  AND M.Position = 'CTO'  AND S.StuID = M.StuID  AND C.ClubID = M.ClubID;
SELECT COUNT(DISTINCT moc.Position)  FROM Member_of_club AS moc JOIN Club AS c ON moc.ClubID = c.ClubID WHERE c.ClubName = 'Bootup Baltimore';
SELECT COUNT(DISTINCT moc.Position)  FROM Member_of_club AS moc JOIN Club AS c ON moc.ClubID = c.ClubID WHERE c.ClubName = 'Bootup Baltimore';
SELECT COUNT(*)  FROM Student s  JOIN Member_of_club m ON s.StuID = m.StuID  JOIN Club c ON m.ClubID = c.ClubID  WHERE c.ClubName = 'Bootup Baltimore' AND s.Age > 18;
SELECT COUNT(*)  FROM Member_of_club mc JOIN Student s ON mc.StuID = s.StuID JOIN Club c ON mc.ClubID = c.ClubID WHERE c.ClubName = 'Bootup Baltimore' AND s.Age > 18;
SELECT COUNT(*)  FROM Student s  JOIN Member_of_club m ON s.StuID = m.StuID  JOIN Club c ON m.ClubID = c.ClubID  WHERE c.ClubName = 'Bootup Baltimore' AND s.Age < 18;
SELECT COUNT(*)  FROM Member_of_club mc JOIN Student s ON mc.StuID = s.StuID JOIN Club c ON mc.ClubID = c.ClubID WHERE c.ClubName = 'Bootup Baltimore' AND s.Age < 18;
SELECT ClubName  FROM Club  WHERE ClubID IN (     SELECT ClubID      FROM Member_of_club      WHERE StuID IN (         SELECT StuID          FROM Student          WHERE city_code = 'BAL'     ) );
SELECT ClubName  FROM Club  WHERE ClubID IN (     SELECT ClubID      FROM Member_of_club      WHERE StuID IN (         SELECT StuID          FROM Student          WHERE city_code = 'BAL'     ) );
SELECT Club.ClubName FROM Club JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID JOIN Student ON Member_of_club.StuID = Student.StuID WHERE Student.city_code = 'HOU' GROUP BY Club.ClubName HAVING COUNT(*) >= 1;
SELECT ClubName  FROM Club  WHERE ClubID IN (     SELECT ClubID      FROM Member_of_club      WHERE StuID IN (         SELECT StuID          FROM Student          WHERE city_code = 'HOU'     ) );
SELECT COUNT(*)  FROM Member_of_club M, Student S  WHERE M.StuID = S.StuID AND S.Fname = 'Eric' AND S.LName = 'Tai';
Error: 第 4310 个样本有 2 个SQL。
SELECT Club.ClubName FROM Club JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID JOIN Student ON Student.StuID = Member_of_club.StuID WHERE Student.Fname = 'Davis' AND Student.LName = 'Steven';
SELECT ClubName  FROM Club  WHERE ClubID IN (     SELECT ClubID      FROM Member_of_club      WHERE StuID IN (         SELECT StuID          FROM Student          WHERE Fname = 'Davis' AND LName = 'Steven'     ) );
SELECT ClubName  FROM Club  WHERE ClubID IN (     SELECT ClubID      FROM Member_of_club      WHERE StuID IN (         SELECT StuID          FROM Student          WHERE Advisor = '1121'     ) );
SELECT Club.ClubName  FROM Club  JOIN Member_of_club ON Club.ClubID = Member_of_club.ClubID  JOIN Student ON Student.StuID = Member_of_club.StuID  WHERE Student.Advisor = '1121' GROUP BY Club.ClubName;
SELECT AVG(Student.Age)  FROM Student  JOIN Member_of_club ON Student.StuID = Member_of_club.StuID  JOIN Club ON Club.ClubID = Member_of_club.ClubID  WHERE Club.ClubName = 'Bootup Baltimore';
SELECT AVG(T1.Age)  FROM Student AS T1  JOIN Member_of_club AS T2 ON T1.StuID = T2.StuID  JOIN Club AS T3 ON T2.ClubID = T3.ClubID  WHERE T3.ClubName = 'Bootup Baltimore';
SELECT AVG(T1.Age)  FROM Student AS T1  JOIN Member_of_club AS T2 ON T1.StuID = T2.StuID  JOIN Club AS T3 ON T2.ClubID = T3.ClubID  WHERE T3.ClubName = 'Hopkins Student Enterprises'
SELECT AVG(T1.Age)  FROM Student AS T1  JOIN Member_of_club AS T2 ON T1.StuID = T2.StuID  JOIN Club AS T3 ON T2.ClubID = T3.ClubID  WHERE T3.ClubName = 'Hopkins Student Enterprises'
SELECT AVG(Student.Age) FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Tennis Club';
SELECT AVG(Student.Age) FROM Student JOIN Member_of_club ON Student.StuID = Member_of_club.StuID JOIN Club ON Member_of_club.ClubID = Club.ClubID WHERE Club.ClubName = 'Tennis Club';
SELECT DISTINCT T1.grant_amount  FROM Grants AS T1  JOIN Documents AS T2 ON T1.grant_id = T2.grant_id  WHERE T2.sent_date < '1986-08-26 20:49:27' AND T1.grant_end_date > '1989-03-16 18:27:16';
SELECT DISTINCT G.grant_amount  FROM Grants G  JOIN Documents D ON G.grant_id = D.grant_id  WHERE D.sent_date < '1986-08-26 20:49:27'  AND G.grant_end_date < '1989-03-16 18:27:16';
SELECT P.project_details  FROM Projects P JOIN Project_Outcomes PO ON P.project_id = PO.project_id JOIN Research_Outcomes RO ON PO.outcome_code = RO.outcome_code WHERE RO.outcome_description IN ('patent', 'paper') GROUP BY P.project_id HAVING COUNT(DISTINCT RO.outcome_description) > 1;
SELECT p.project_details  FROM Projects p JOIN Project_Outcomes po ON p.project_id = po.project_id JOIN Research_Outcomes ro ON po.outcome_code = ro.outcome_code WHERE ro.outcome_description IN ('patents', 'papers') GROUP BY p.project_id HAVING COUNT(DISTINCT ro.outcome_description) > 1;
SELECT SUM(grant_amount)  FROM Grants  JOIN Organisations ON Grants.organisation_id = Organisations.organisation_id  JOIN Organisation_Types ON Organisations.organisation_type = Organisation_Types.organisation_type  WHERE Organisation_Types.organisation_type_description = 'research'
SELECT SUM(grant_amount)  FROM Grants;
SELECT ps.date_from, ps.date_to  FROM Project_Staff ps JOIN (     SELECT p.project_id     FROM Project_Staff ps     JOIN Projects p ON ps.project_id = p.project_id     GROUP BY p.project_id     ORDER BY COUNT(ps.staff_id) DESC     LIMIT 1 ) sub ON ps.project_id = sub.project_id;
SELECT MIN(date_from), MAX(date_to) FROM Project_Staff WHERE project_id = (     SELECT project_id     FROM (         SELECT project_id, COUNT(*) as staff_count         FROM Project_Staff         WHERE role_code IN (SELECT role_code FROM Staff_Roles WHERE role_description LIKE '%Leader%')         GROUP BY project_id         ORDER BY staff_count DESC         LIMIT 1     ) AS subquery );
SELECT Organisations.organisation_id, Organisations.organisation_details  FROM Organisations  JOIN Projects ON Organisations.organisation_id = Projects.organisation_id;
SELECT o.organisation_id, o.organisation_details FROM Organisations o JOIN Grants g ON o.organisation_id = g.organisation_id WHERE g.grant_amount > 6000;
Error: 第 4331 个样本有 2 个SQL。
SELECT T1.organisation_type, T1.organisation_id  FROM Organisations AS T1  JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id  GROUP BY T1.organisation_id  ORDER BY COUNT(T2.staff_id) DESC  LIMIT 1;
SELECT T2.organisation_type, COUNT(*) AS staff_count  FROM Research_Staff AS T1  JOIN Organisations AS T2 ON T1.employer_organisation_id = T2.organisation_id  GROUP BY T2.organisation_type  ORDER BY staff_count DESC  LIMIT 1;
SELECT T.organisation_type  FROM (     SELECT organisation_id, COUNT(*) AS staff_count     FROM Project_Staff      JOIN Projects ON Project_Staff.project_id = Projects.project_id     GROUP BY organisation_id     ORDER BY staff_count DESC     LIMIT 1 ) AS S JOIN Organisations AS T ON S.organisation_id = T.organisation_id;
SELECT D.sent_date  FROM Documents D  JOIN Grants G ON D.grant_id = G.grant_id  JOIN Organisations O ON G.organisation_id = O.organisation_id  JOIN Organisation_Types OT ON O.organisation_type = OT.organisation_type  WHERE G.grant_amount > 5000 AND OT.organisation_type_description = 'the specified description';
SELECT D.sent_date  FROM Documents D  JOIN Grants G ON D.grant_id = G.grant_id  WHERE G.grant_amount > 5000;
SELECT D.response_received_date  FROM Documents D  JOIN Document_Types DT ON D.document_type_code = DT.document_type_code  JOIN Grants G ON D.grant_id = G.grant_id  WHERE DT.document_description = 'Regular' OR G.grant_amount > 100;
SELECT d.response_received_date  FROM Documents d  JOIN Document_Types dt ON d.document_type_code = dt.document_type_code  JOIN Grants g ON d.grant_id = g.grant_id  WHERE dt.document_description = 'Regular'  AND g.grant_amount > 100;
SELECT p.project_details  FROM Projects p LEFT JOIN Project_Staff ps ON p.project_id = ps.project_id LEFT JOIN Staff_Roles sr ON ps.role_code = sr.role_code WHERE sr.role_description != 'Researcher' OR ps.role_code IS NULL GROUP BY p.project_id HAVING COUNT(ps.project_id) = 0 OR MAX(sr.role_description) != 'Researcher';
SELECT P.project_details  FROM Projects P  LEFT JOIN Project_Staff PS ON P.project_id = PS.project_id  LEFT JOIN Staff_Roles SR ON PS.role_code = SR.role_code  WHERE SR.role_description != 'Research Role' OR SR.role_description IS NULL GROUP BY P.project_id  HAVING COUNT(PS.staff_id) = 0;
SELECT T.Tasks.task_details, T.Tasks.task_id, T.Tasks.project_id FROM (     SELECT P.project_id     FROM Projects P     WHERE P.project_details = 'omnis'     UNION     SELECT PO.project_id     FROM Project_Outcomes PO     GROUP BY PO.project_id     HAVING COUNT(*) > 2 ) AS Proj JOIN Tasks T ON T.Tasks.project_id = Proj.project_id;
SELECT T.Tasks.task_details, T.Tasks.task_id, T.Tasks.project_id FROM (     SELECT P.project_id     FROM Projects P     WHERE P.project_details = 'omnis'     UNION     SELECT PO.project_id     FROM Project_Outcomes PO     GROUP BY PO.project_id     HAVING COUNT(PO.outcome_code) >= 3 ) AS Proj JOIN Tasks T ON T.project_id = Proj.project_id;
SELECT MIN(date_from) AS StartDate, MAX(date_to) AS EndDate  FROM Project_Staff  WHERE role_code = 'Researcher';
SELECT date_from, date_to  FROM Project_Staff;
SELECT COUNT(*) FROM Staff_Roles;
SELECT COUNT(DISTINCT role_code) FROM Project_Staff;
SELECT Organisations.organisation_id, SUM(Grants.grant_amount) as total_grant_amount  FROM Organisations  JOIN Grants ON Organisations.organisation_id = Grants.organisation_id  GROUP BY Organisations.organisation_id;
SELECT organisation_id, SUM(grant_amount) as total_grant_amount  FROM Grants  GROUP BY organisation_id;
SELECT P.project_details  FROM Projects P JOIN Project_Outcomes PO ON P.project_id = PO.project_id JOIN Research_Outcomes RO ON PO.outcome_code = RO.outcome_code WHERE RO.outcome_description LIKE '%Published%';
SELECT p.project_details  FROM Projects p  JOIN Project_Outcomes po ON p.project_id = po.project_id  JOIN Research_Outcomes ro ON po.outcome_code = ro.outcome_code  WHERE ro.outcome_description = 'Published';
SELECT p.project_id, COUNT(ps.staff_id) AS num_of_staff FROM Projects p JOIN Project_Staff ps ON p.project_id = ps.project_id GROUP BY p.project_id ORDER BY num_of_staff ASC;
SELECT project_id, COUNT(staff_id) AS staff_count FROM Project_Staff GROUP BY project_id ORDER BY staff_count ASC;
SELECT role_description  FROM Staff_Roles  WHERE role_code = 'Researcher';
SELECT Staff_Roles.role_description  FROM Staff_Roles  WHERE Staff_Roles.role_code = (SELECT Staff_Roles.role_code FROM Project_Staff WHERE Project_Staff.staff_id IN (SELECT Research_Staff.staff_id FROM Research_Staff))
SELECT MIN(date_from)  FROM Project_Staff;
SELECT MIN(date_from) AS first_start_date FROM Project_Staff;
SELECT P.project_details, P.project_id  FROM Projects P JOIN Project_Outcomes PO ON P.project_id = PO.project_id GROUP BY P.project_id, P.project_details ORDER BY COUNT(PO.outcome_code) DESC LIMIT 1;
SELECT p.project_id, p.project_details  FROM Projects p  JOIN Project_Outcomes po ON p.project_id = po.project_id  GROUP BY p.project_id, p.project_details  ORDER BY COUNT(po.outcome_code) DESC  LIMIT 1;
SELECT project_details  FROM Projects  WHERE project_id NOT IN (SELECT project_id FROM Project_Outcomes) ;
SELECT p.project_details  FROM Projects p  LEFT JOIN Project_Outcomes po ON p.project_id = po.project_id  WHERE po.project_id IS NULL;
SELECT O.organisation_id, OT.organisation_type, O.organisation_details FROM Organisations O JOIN Organisation_Types OT ON O.organisation_type = OT.organisation_type JOIN Research_Staff RS ON O.organisation_id = RS.employer_organisation_id GROUP BY O.organisation_id, OT.organisation_type, O.organisation_details ORDER BY COUNT(RS.staff_id) DESC LIMIT 1;
SELECT TOP 1 o.organisation_id, ot.organisation_type, o.organisation_details FROM Organisations o JOIN Organisation_Types ot ON o.organisation_type = ot.organisation_type JOIN Research_Staff rs ON o.organisation_id = rs.employer_organisation_id GROUP BY o.organisation_id, ot.organisation_type, o.organisation_details ORDER BY COUNT(rs.staff_id) DESC
SELECT PS.staff_id, SR.role_description  FROM Project_Staff PS  JOIN Staff_Roles SR ON PS.role_code = SR.role_code  WHERE PS.project_id IN (     SELECT PO.project_id      FROM Project_Outcomes PO      GROUP BY PO.project_id      ORDER BY COUNT(*) DESC      LIMIT 1 ) GROUP BY PS.staff_id, SR.role_description;
SELECT T3.staff_id, T2.role_description FROM ( SELECT T1.staff_id, T1.role_code, COUNT(T1.project_id) AS project_count FROM ( SELECT staff_id, role_code, project_id FROM Project_Staff GROUP BY staff_id, role_code, project_id) T1 JOIN Staff_Roles T2 ON T1.role_code = T2.role_code GROUP BY T1.staff_id, T1.role_code ORDER BY project_count DESC) T3 JOIN Staff_Roles T2 ON T3.role_code = T2.role_code WHERE ( T3.staff_id, T3.project_count) IN ( SELECT staff_id, MAX(project_count) FROM ( SELECT T1.staff_id, T1.role_code, COUNT(T1.project_id) AS project_count FROM ( SELECT staff_id, role_code, project_id FROM Project_Staff GROUP BY staff_id, role_code, project_id) T1 JOIN Staff_Roles T2 ON T1.role_code = T2.role_code GROUP BY T1.staff_id, T1.role_code) T4 GROUP BY T4.staff_id)
SELECT document_type_code  FROM Document_Types  WHERE document_description LIKE 'Initial%';
SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%';
SELECT G.grant_start_date  FROM Grants G JOIN Documents D1 ON G.grant_id = D1.grant_id JOIN Document_Types DT1 ON D1.document_type_code = DT1.document_type_code JOIN Documents D2 ON G.grant_id = D2.grant_id JOIN Document_Types DT2 ON D2.document_type_code = DT2.document_type_code WHERE DT1.document_description = 'Regular' AND DT2.document_description = 'Initial Application' GROUP BY G.grant_start_date HAVING COUNT(DISTINCT DT1.document_description) = 1 AND COUNT(DISTINCT DT2.document_description) = 1;
SELECT G.grant_start_date  FROM Grants G JOIN Documents D ON G.grant_id = D.grant_id JOIN Document_Types DT ON D.document_type_code = DT.document_type_code WHERE DT.document_description IN ('Regular', 'Initial Application');
SELECT grant_id, COUNT(document_id) AS num_documents FROM Documents GROUP BY grant_id ORDER BY num_documents DESC LIMIT 1;
SELECT      g.grant_id,     COUNT(d.document_id) AS num_documents FROM      Grants g LEFT JOIN      Documents d ON g.grant_id = d.grant_id GROUP BY      g.grant_id ORDER BY      num_documents DESC LIMIT 1;
SELECT OT.organisation_type_description  FROM Organisation_Types OT JOIN Organisations O ON OT.organisation_type = O.organisation_type WHERE O.organisation_details = 'quo';
SELECT T2.organisation_type_description FROM Organisations AS T1 JOIN Organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE T1.organisation_details = 'quo'
SELECT Organisations.organisation_details  FROM Organisations  JOIN Organisation_Types ON Organisations.organisation_type = Organisation_Types.organisation_type  WHERE Organisation_Types.organisation_type_description = 'Sponsor'  ORDER BY Organisations.organisation_details ASC;
SELECT organisation_details FROM Organisations JOIN Organisation_Types ON Organisations.organisation_type = Organisation_Types.organisation_type WHERE Organisation_Types.organisation_type_description = 'Sponsors' ORDER BY organisation_details ASC;
SELECT COUNT(*)  FROM Project_Outcomes  WHERE outcome_code = 'Patent';
SELECT COUNT(*)  FROM Project_Outcomes  WHERE outcome_code = 'Patent';
SELECT COUNT(*)  FROM Project_Staff  WHERE role_code = 'leader' OR date_from < '1989-04-24 23:51:54';
SELECT COUNT(*)  FROM Project_Staff  WHERE role_code = 'Leader' OR date_from < '1989-04-24 23:51:54';
SELECT MAX(date_to) AS LastDateOfStaffLeaving  FROM Project_Staff;
SELECT MAX(date_to) AS LastDateLeft FROM Project_Staff;
SELECT Research_Outcomes.outcome_description  FROM Research_Outcomes  JOIN Project_Outcomes ON Research_Outcomes.outcome_code = Project_Outcomes.outcome_code  JOIN Projects ON Projects.project_id = Project_Outcomes.project_id  WHERE Projects.project_details = 'sint';
SELECT Research_Outcomes.outcome_description  FROM Research_Outcomes  JOIN Project_Outcomes ON Research_Outcomes.outcome_code = Project_Outcomes.outcome_code  JOIN Projects ON Projects.project_id = Project_Outcomes.project_id  WHERE Projects.project_details = 'sint';
SELECT T.organisation_id, COUNT(T.outcome_code) AS OutcomeCount FROM (     SELECT P.organisation_id, PO.outcome_code     FROM Projects P     JOIN Project_Outcomes PO ON P.project_id = PO.project_id ) T GROUP BY T.organisation_id ORDER BY OutcomeCount DESC LIMIT 1;
SELECT T.organisation_id, COUNT(*) AS outcome_count FROM (     SELECT organisation_id, project_id     FROM Projects ) AS T JOIN Project_Outcomes ON T.project_id = Project_Outcomes.project_id GROUP BY T.organisation_id ORDER BY outcome_count DESC LIMIT 1;
SELECT Projects.project_details  FROM Projects  JOIN Organisations ON Projects.organisation_id = Organisations.organisation_id;
SELECT P.project_details  FROM Projects P WHERE P.organisation_id = (     SELECT organisation_id      FROM (         SELECT organisation_id, COUNT(*) AS project_count          FROM Projects          GROUP BY organisation_id          ORDER BY project_count DESC          LIMIT 1     ) AS subquery )
SELECT Research_Staff.staff_details  FROM Research_Staff  ORDER BY Research_Staff.staff_details ASC;
SELECT Research_Staff.staff_details  FROM Research_Staff  ORDER BY Research_Staff.staff_details ASC;
SELECT COUNT(*) FROM Tasks;
SELECT COUNT(*) FROM Tasks;
SELECT COUNT(Tasks.task_id) AS Task_Count, Projects.project_details  FROM Tasks  JOIN Projects ON Tasks.project_id = Projects.project_id  GROUP BY Projects.project_id, Projects.project_details;
SELECT project_id, COUNT(task_id) AS number_of_tasks FROM Tasks GROUP BY project_id;
SELECT DISTINCT Staff_Roles.role_description  FROM Staff_Roles  JOIN Project_Staff ON Staff_Roles.role_code = Project_Staff.role_code;
SELECT role_description  FROM Project_Staff  JOIN Staff_Roles ON Project_Staff.role_code = Staff_Roles.role_code  WHERE date_from >= '2003-04-19 15:06:20' AND date_to <= '2016-03-15 00:33:18';
SELECT outcome_details FROM Project_Outcomes;
SELECT outcome_description  FROM Project_Outcomes  JOIN Research_Outcomes ON Project_Outcomes.outcome_code = Research_Outcomes.outcome_code;
SELECT role_code, COUNT(*) as count  FROM Project_Staff  GROUP BY role_code  ORDER BY count DESC  LIMIT 1;
SELECT role_description, COUNT(*) as count  FROM Project_Staff  JOIN Staff_Roles ON Project_Staff.role_code = Staff_Roles.role_code  GROUP BY role_description  ORDER BY count DESC  LIMIT 1;
SELECT COUNT(friend)  FROM PersonFriend  WHERE name = 'Dan';
SELECT COUNT(friend)  FROM PersonFriend  WHERE name = 'Dan';
SELECT COUNT(*) FROM Person WHERE gender = 'female';
SELECT COUNT(*) FROM Person WHERE gender = 'female';
SELECT AVG(age) FROM Person;
SELECT AVG(age) FROM Person;
SELECT COUNT(DISTINCT city) FROM Person;
SELECT COUNT(DISTINCT city) FROM Person;
SELECT COUNT(DISTINCT job) FROM Person;
SELECT COUNT(DISTINCT job) FROM Person;
SELECT name  FROM Person  ORDER BY age DESC  LIMIT 1;
SELECT name  FROM Person  ORDER BY age DESC  LIMIT 1;
SELECT name  FROM Person  WHERE job = 'student'  ORDER BY age DESC  LIMIT 1;
SELECT name  FROM Person  WHERE age = (SELECT MAX(age) FROM Person) AND job = 'student';
SELECT name  FROM Person  WHERE gender = 'male'  ORDER BY age ASC  LIMIT 1;
SELECT name  FROM Person  WHERE gender = 'male'  ORDER BY age  LIMIT 1;
SELECT age FROM Person WHERE name = 'Zach' AND job = 'doctor';
SELECT age FROM Person WHERE name = 'Zach' AND job = 'doctor';
SELECT name FROM Person WHERE age < 30;
SELECT name  FROM Person  WHERE age < 30;
SELECT COUNT(*)  FROM Person  WHERE age > 30 AND job = 'engineer';
SELECT COUNT(*)  FROM Person  WHERE age > 30 AND job = 'engineer';
SELECT gender, AVG(age)  FROM Person  GROUP BY gender;
SELECT gender, AVG(age)  FROM Person  GROUP BY gender;
SELECT job, AVG(age)  FROM Person  GROUP BY job;
SELECT job, AVG(age)  FROM Person  GROUP BY job;
SELECT job, AVG(age)  FROM Person  WHERE gender = 'male'  GROUP BY job;
SELECT job, AVG(age)  FROM Person  WHERE gender = 'male'  GROUP BY job;
SELECT job, MIN(age)  FROM Person  GROUP BY job;
SELECT job, MIN(age)  FROM Person  GROUP BY job;
SELECT gender, COUNT(*) as num_people  FROM Person  WHERE age < 40  GROUP BY gender;
SELECT gender, COUNT(*)  FROM Person  WHERE age < 40  GROUP BY gender;
SELECT name  FROM Person  WHERE age > (SELECT MIN(age) FROM Person WHERE job = 'engineer')  AND job != 'engineer' ORDER BY age;
SELECT DISTINCT P.name  FROM Person P  WHERE P.age > ANY (     SELECT E.age      FROM Person E      WHERE E.job = 'engineer' ) ORDER BY P.age;
SELECT COUNT(*)  FROM Person  WHERE age > (     SELECT MAX(age)      FROM Person      WHERE job = 'engineer' );
SELECT COUNT(*)  FROM Person p1 WHERE NOT EXISTS (     SELECT *     FROM Person p2     WHERE p2.age > p1.age AND p2.job = 'engineer' );
SELECT name, job FROM Person ORDER BY name;
SELECT name, job  FROM Person ORDER BY name;
SELECT name  FROM Person  ORDER BY age DESC;
SELECT name FROM Person ORDER BY age DESC;
SELECT name, age  FROM Person  WHERE gender = 'male'  ORDER BY age;
SELECT name, age  FROM Person  WHERE gender = 'male'  ORDER BY age;
Error: 第 4441 个样本有 2 个SQL。
SELECT T1.name, T1.age  FROM Person AS T1  JOIN PersonFriend AS T2 ON T1.name = T2.name  WHERE T2.friend = 'Dan'  AND T2.name IN (SELECT T2.name FROM PersonFriend AS T2 WHERE T2.friend = 'Alice') GROUP BY T1.name, T1.age;
SELECT P.name, P.age  FROM Person P  JOIN PersonFriend PF ON P.name = PF.name  WHERE PF.friend = 'Dan' OR PF.friend = 'Alice';
SELECT DISTINCT T1.name, T1.age  FROM Person AS T1  JOIN PersonFriend AS T2  ON T1.name = T2.friend  WHERE T2.name IN ('Dan', 'alice');
SELECT P.name FROM Person P  JOIN PersonFriend PF ON P.name = PF.name  JOIN Person P2 ON PF.friend = P2.name  WHERE P2.age > 40 AND P2.age < 30;
SELECT DISTINCT p.name  FROM Person p JOIN PersonFriend pf ON p.name = pf.name JOIN Person f ON f.name = pf.friend WHERE (f.age > 40 OR f.age < 30);
SELECT DISTINCT p1.name  FROM Person p1  JOIN PersonFriend pf ON p1.name = pf.name  JOIN Person p2 ON pf.friend = p2.name  WHERE p2.age > 40 AND p2.age >= 30;
SELECT P.name  FROM Person P  WHERE P.age > 40  AND P.name NOT IN (     SELECT PF1.name      FROM PersonFriend PF1     JOIN Person P1 ON PF1.friend = P1.name      WHERE P1.age < 30 )
SELECT p.name  FROM Person p  WHERE NOT EXISTS (SELECT 1 FROM PersonFriend pf WHERE pf.name = p.name AND pf.friend IN (SELECT name FROM Person WHERE job = 'student'))
SELECT p.name  FROM Person p  WHERE NOT EXISTS (     SELECT pf.friend      FROM PersonFriend pf      JOIN Person p2 ON pf.friend = p2.name      WHERE pf.name = p.name AND p2.job = 'student' );
SELECT name  FROM PersonFriend  GROUP BY name  HAVING COUNT(friend) = 1;
SELECT PF1.name  FROM PersonFriend PF1 WHERE (SELECT COUNT(*) FROM PersonFriend PF2 WHERE PF1.name = PF2.name) = 1;
SELECT friend FROM network_2.PersonFriend WHERE name = 'Bob';
SELECT friend FROM network_2.PersonFriend WHERE name = 'Bob';
SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Bob';
SELECT friend FROM PersonFriend WHERE name = 'Bob';
SELECT p.name  FROM Person p  JOIN PersonFriend pf ON p.name = pf.name  WHERE pf.friend = 'Zach' AND p.gender = 'female';
SELECT p.name  FROM Person p  JOIN PersonFriend pf ON p.name = pf.name  WHERE pf.friend = 'Zach' AND p.gender = 'female';
SELECT pf.friend  FROM PersonFriend pf  JOIN Person p ON pf.friend = p.name  WHERE pf.name = 'Alice' AND p.gender = 'female';
SELECT pf.friend  FROM PersonFriend pf  JOIN Person p ON pf.friend = p.name  WHERE pf.name = 'Alice' AND p.gender = 'female';
SELECT pf.friend  FROM Person p  JOIN PersonFriend pf ON p.name = pf.name  WHERE p.name = 'Alice' AND p.gender = 'male' AND p.job = 'doctor';
SELECT pf.friend  FROM PersonFriend pf  JOIN Person p ON pf.friend = p.name  WHERE pf.name = 'Alice' AND p.job = 'doctor';
SELECT DISTINCT p.name  FROM Person p  JOIN PersonFriend pf ON p.name = pf.name  WHERE pf.friend IN (SELECT name FROM Person WHERE city = 'new york city');
SELECT pf.friend  FROM PersonFriend pf  JOIN Person p ON pf.friend = p.name  WHERE p.city = 'New York';
SELECT P.name  FROM Person P JOIN PersonFriend PF ON P.name = PF.friend JOIN Person P2 ON PF.name = P2.name WHERE P2.age < (SELECT AVG(age) FROM Person)
SELECT DISTINCT pf.friend  FROM PersonFriend pf  JOIN Person p ON pf.friend = p.name  WHERE p.age < (SELECT AVG(age) FROM Person WHERE name IN (SELECT friend FROM PersonFriend))
SELECT pf.name, pf.friend, p.age  FROM PersonFriend pf  JOIN Person p ON pf.friend = p.name  WHERE p.age > (SELECT AVG(age) FROM Person);
SELECT P.name, PF.friend, P.age  FROM Person P JOIN PersonFriend PF ON P.name = PF.name WHERE P.age > (SELECT AVG(age) FROM Person)
SELECT friend FROM network_2.PersonFriend WHERE name = 'Zach' ORDER BY year DESC LIMIT 1;
SELECT friend FROM network_2.PersonFriend WHERE name = 'Zach' ORDER BY year DESC LIMIT 1;
SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Zach' AND T2.year = (SELECT MAX(year) FROM PersonFriend WHERE name = 'Zach')
SELECT pf.friend, p.age  FROM PersonFriend pf  JOIN Person p ON pf.friend = p.name  WHERE pf.name = 'Zach'  AND pf.year = (SELECT MAX(year) FROM PersonFriend WHERE name = 'Zach');
SELECT PF.name  FROM PersonFriend AS PF  JOIN Person AS P ON PF.name = P.name  WHERE PF.friend = 'Alice'  ORDER BY PF.year  LIMIT 1;
SELECT PF.name  FROM PersonFriend PF  JOIN (   SELECT MIN(year) AS min_year    FROM PersonFriend    WHERE friend = 'Alice' ) AS Y  ON PF.year = Y.min_year  WHERE PF.friend = 'Alice';
SELECT P.name, P.age, P.job FROM Person P JOIN PersonFriend PF ON P.name = PF.name WHERE PF.friend = 'Alice' AND PF.year = (SELECT MAX(year) FROM PersonFriend WHERE friend = 'Alice');
SELECT P.name, P.age, P.job  FROM Person P  JOIN PersonFriend PF ON P.name = PF.name  WHERE PF.friend = 'Alice'  AND PF.year = (SELECT MAX(year) FROM PersonFriend WHERE friend = 'Alice');
SELECT name  FROM Person  WHERE name NOT IN (SELECT name FROM PersonFriend)
SELECT name  FROM Person  WHERE name NOT IN (SELECT name FROM PersonFriend)
SELECT T1.name  FROM Person AS T1  JOIN PersonFriend AS T2 ON T1.name = T2.friend  GROUP BY T2.name  ORDER BY AVG((SELECT age FROM Person WHERE name = T2.friend)) DESC  LIMIT 1;
Error: 第 4480 个样本有 2 个SQL。
SELECT COUNT(*)  FROM Person p WHERE NOT EXISTS (     SELECT 1      FROM PersonFriend pf      JOIN Person p2 ON pf.friend = p2.name AND p2.city = 'Austin'     WHERE pf.name = p.name );
SELECT COUNT(*)  FROM Person p WHERE NOT EXISTS (     SELECT 1      FROM PersonFriend pf      JOIN Person p2 ON pf.friend = p2.name AND p2.city = 'Austin'     WHERE pf.name = p.name );
SELECT pf2.friend  FROM PersonFriend AS pf1  JOIN PersonFriend AS pf2 ON pf1.friend = pf2.name  WHERE pf1.name = 'Alice' AND pf2.friend != 'Alice';
SELECT pf2.friend  FROM PersonFriend AS pf1  JOIN PersonFriend AS pf2 ON pf1.friend = pf2.name  WHERE pf1.name = 'Alice' AND pf2.friend != 'Alice';
SELECT COUNT(*) FROM member;
SELECT Name FROM member ORDER BY Name ASC;
SELECT Name, Country FROM member;
SELECT Name  FROM member  WHERE Country IN ("United States", "Canada");
SELECT Country, COUNT(*) AS NumberOfMembers FROM member GROUP BY Country;
SELECT Country, COUNT(*) as count  FROM member  GROUP BY Country  ORDER BY count DESC  LIMIT 1;
SELECT Country  FROM member  GROUP BY Country  HAVING COUNT(Member_ID) > 2;
SELECT Leader_Name, College_Location FROM college;
SELECT member.Name, college.Name  FROM member  JOIN college ON member.College_ID = college.College_ID;
SELECT member.Name, college.College_Location  FROM member  JOIN college ON member.College_ID = college.College_ID  ORDER BY member.Name ASC;
SELECT DISTINCT c.Leader_Name  FROM college c JOIN member m ON c.College_ID = m.College_ID WHERE m.Country = 'Canada';
SELECT member.Name, round.Decoration_Theme  FROM member  JOIN round ON member.Member_ID = round.Member_ID;
SELECT T2.Name  FROM round AS T1  JOIN member AS T2 ON T1.Member_ID = T2.Member_ID  WHERE T1.Rank_in_Round > 3;
SELECT member.Name  FROM member  JOIN round ON member.Member_ID = round.Member_ID  ORDER BY round.Rank_in_Round ASC;
SELECT T2.Name  FROM member AS T2  LEFT JOIN round AS T1  ON T2.Member_ID = T1.Member_ID  WHERE T1.Member_ID IS NULL;
SELECT document_name, access_count  FROM Documents  ORDER BY document_name ASC;
SELECT document_name, access_count  FROM Documents  ORDER BY document_name ASC;
Error: 第 4502 个样本有 2 个SQL。
SELECT document_name, MAX(access_count)  FROM Documents  ORDER BY access_count DESC  LIMIT 1;
SELECT document_type_code  FROM Documents  GROUP BY document_type_code  HAVING COUNT(document_code) > 4;
SELECT document_type_code  FROM Documents  GROUP BY document_type_code  HAVING COUNT(*) >= 4;
SELECT document_type_code, SUM(access_count) as total_access_count FROM Documents GROUP BY document_type_code ORDER BY total_access_count DESC LIMIT 1;
SELECT SUM(access_count)  FROM Documents  WHERE document_type_code = (     SELECT document_type_code      FROM Documents      GROUP BY document_type_code      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT AVG(access_count) FROM Documents;
SELECT AVG(access_count) AS average_access_count FROM Documents;
SELECT ds.document_structure_code, ds.document_structure_description FROM Document_Structures ds JOIN Documents d ON ds.document_structure_code = d.document_structure_code WHERE d.access_count = (     SELECT MIN(access_count)     FROM Documents ) LIMIT 1;
SELECT DS.document_structure_description FROM Document_Structures DS JOIN Documents D ON DS.document_structure_code = D.document_structure_code WHERE D.access_count = (     SELECT MIN(access_count)     FROM Documents ) LIMIT 1;
SELECT document_type_code  FROM Documents  WHERE document_name = 'David CV';
SELECT document_type_code  FROM Documents  WHERE document_name = 'David CV';
SELECT d.document_code, d.document_name  FROM Documents d WHERE d.document_type_code IN (     SELECT dtc.document_type_code      FROM (         SELECT document_type_code, RANK() OVER (ORDER BY COUNT(document_code) DESC) rank_type          FROM Documents          GROUP BY document_type_code     ) dtc      WHERE dtc.rank_type <= 3 ) AND d.document_structure_code IN (     SELECT dsc.document_structure_code      FROM (         SELECT document_structure_code, RANK() OVER (ORDER BY COUNT(document_code) DESC) rank_structure          FROM Documents          GROUP BY document_structure_code     ) dsc      WHERE dsc.rank_structure <= 3 ) GROUP BY d.document_code, d.document_name;
SELECT D.document_name  FROM Documents D WHERE D.document_type_code IN (     SELECT DT.document_type_code      FROM Documents DT      GROUP BY DT.document_type_code      ORDER BY COUNT(*) DESC      LIMIT 3) AND D.document_structure_code IN (     SELECT DS.document_structure_code      FROM Documents DS      GROUP BY DS.document_structure_code      ORDER BY COUNT(*) DESC      LIMIT 3)
SELECT document_type_code  FROM Documents  GROUP BY document_type_code  HAVING SUM(access_count) > 10000;
SELECT document_type_code  FROM Documents  GROUP BY document_type_code  HAVING SUM(access_count) <= 10000;
SELECT DS.section_title  FROM Document_Sections DS  JOIN Documents D ON DS.document_code = D.document_code  WHERE D.document_name = 'David CV';
SELECT DS.section_title  FROM Document_Sections DS  JOIN Documents D ON DS.document_code = D.document_code  WHERE D.document_name = 'David CV';
SELECT d.document_name  FROM Documents d  LEFT JOIN Document_Sections ds ON d.document_code = ds.document_code  WHERE ds.document_code IS NULL;
SELECT document_name  FROM Documents  WHERE document_code NOT IN (SELECT document_code FROM Document_Sections)
SELECT user_name, password  FROM Users  WHERE role_code = (     SELECT role_code      FROM (         SELECT role_code, COUNT(*) AS cnt          FROM Users          GROUP BY role_code          ORDER BY cnt DESC          LIMIT 1     ) AS subquery )
SELECT U.user_name, U.password  FROM Users U  JOIN (   SELECT role_code    FROM Users    GROUP BY role_code    ORDER BY COUNT(*) DESC    LIMIT 1 ) AS MostCommonRole ON U.role_code = MostCommonRole.role_code;
SELECT AVG(D.access_count)  FROM Documents D JOIN Document_Functional_Areas DFA ON D.document_code = DFA.document_code JOIN Functional_Areas FA ON DFA.functional_area_code = FA.functional_area_code WHERE FA.functional_area_description = 'Acknowledgement';
SELECT AVG(D.access_count)  FROM Documents D JOIN Document_Functional_Areas DFA ON D.document_code = DFA.document_code JOIN Functional_Areas FA ON DFA.functional_area_code = FA.functional_area_code WHERE FA.functional_area_description = 'Acknowledgement';
SELECT D.document_name  FROM Documents D  WHERE NOT EXISTS (     SELECT 1      FROM Document_Sections DS      JOIN Document_Sections_Images DSI ON DS.section_id = DSI.section_id      WHERE D.document_code = DS.document_code );
SELECT d.document_name  FROM Documents d  LEFT JOIN Document_Sections ds ON d.document_code = ds.document_code  LEFT JOIN Document_Sections_Images dsi ON ds.section_id = dsi.section_id  WHERE dsi.image_id IS NULL GROUP BY d.document_name;
SELECT D.document_name  FROM Documents D JOIN Document_Sections DS ON D.document_code = DS.document_code GROUP BY D.document_code, D.document_name ORDER BY COUNT(DS.section_id) DESC LIMIT 1;
SELECT D.document_name  FROM Documents D JOIN Document_Sections DS ON D.document_code = DS.document_code GROUP BY D.document_code, D.document_name ORDER BY COUNT(DS.section_id) DESC LIMIT 1;
SELECT document_name  FROM Documents  WHERE document_name LIKE '%CV%';
SELECT document_name  FROM Documents  WHERE document_name LIKE '%CV%';
SELECT COUNT(*) FROM Users WHERE user_login = 'logged_in';
SELECT COUNT(*) FROM Users WHERE user_login = 'logged_in';
SELECT R.role_description  FROM Roles R JOIN (   SELECT U.role_code   FROM Users U   WHERE U.user_login = 1   GROUP BY U.role_code   ORDER BY COUNT(*) DESC   LIMIT 1 ) AS T ON R.role_code = T.role_code;
SELECT R.role_description  FROM Roles R JOIN (   SELECT U.role_code, COUNT(*) AS cnt   FROM Users U   WHERE U.user_login = TRUE   GROUP BY U.role_code   ORDER BY cnt DESC   LIMIT 1 ) AS UC ON R.role_code = UC.role_code;
SELECT AVG(Documents.access_count)  FROM Documents  JOIN (   SELECT document_structure_code, COUNT(*) as cnt   FROM Documents    GROUP BY document_structure_code    ORDER BY cnt    LIMIT 1 ) AS LeastPopularStructure ON Documents.document_structure_code = LeastPopularStructure.document_structure_code;
SELECT AVG(Documents.access_count)  FROM Documents  WHERE Documents.document_structure_code = (     SELECT Document_Structures.document_structure_code      FROM Document_Structures      JOIN Documents ON Documents.document_structure_code = Document_Structures.document_structure_code      GROUP BY Document_Structures.document_structure_code      ORDER BY COUNT(Documents.document_code)      LIMIT 1 )
SELECT image_name, image_url  FROM Images  ORDER BY image_name;
SELECT image_name, image_url  FROM Images  ORDER BY image_name ASC;
SELECT role_code, COUNT(user_id) AS num_users FROM Users GROUP BY role_code;
SELECT role_code, COUNT(user_id) AS number_of_users FROM Users GROUP BY role_code;
SELECT document_type_code  FROM Documents  GROUP BY document_type_code  HAVING COUNT(document_code) > 2;
SELECT document_type_code  FROM Documents  GROUP BY document_type_code  HAVING COUNT(document_code) > 2;
SELECT COUNT(*) FROM Companies;
SELECT COUNT(*) FROM Companies;
SELECT name  FROM Companies  ORDER BY Market_Value_billion DESC;
SELECT name  FROM Companies  ORDER BY Market_Value_billion DESC;
SELECT name FROM Companies WHERE Headquarters <> 'USA';
SELECT name  FROM Companies  WHERE Headquarters != 'USA';
SELECT Companies.name, Companies.Assets_billion  FROM Companies  ORDER BY Companies.name ASC;
SELECT Companies.name, Companies.Assets_billion  FROM Companies  ORDER BY Companies.name ASC;
SELECT AVG(Profits_billion) FROM Companies;
SELECT AVG(Profits_billion) FROM Companies;
SELECT MAX(Sales_billion), MIN(Sales_billion)  FROM Companies  WHERE Industry != 'Banking';
SELECT MAX(Sales_billion), MIN(Sales_billion) FROM Companies WHERE Industry != 'Banking';
SELECT COUNT(DISTINCT Industry) FROM Companies;
SELECT COUNT(DISTINCT Industry) FROM Companies;
SELECT name  FROM buildings  ORDER BY Height DESC;
SELECT name  FROM buildings  ORDER BY Height DESC;
SELECT Stories FROM buildings WHERE Height = (SELECT MAX(Height) FROM buildings);
SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1;
SELECT b.name AS Building_Name, c.name AS Company_Name  FROM buildings b  JOIN Office_locations ol ON b.id = ol.building_id  JOIN Companies c ON c.id = ol.company_id;
SELECT Companies.name AS Company_Name, buildings.name AS Building_Name  FROM Companies  JOIN Office_locations ON Companies.id = Office_locations.company_id  JOIN buildings ON Office_locations.building_id = buildings.id;
SELECT b.name  FROM buildings b JOIN Office_locations ol ON b.id = ol.building_id GROUP BY b.id HAVING COUNT(ol.company_id) > 1;
SELECT b.name FROM buildings b JOIN Office_locations ol ON b.id = ol.building_id GROUP BY b.id, b.name HAVING COUNT(ol.company_id) > 1;
SELECT b.name FROM buildings b JOIN Office_locations ol ON b.id = ol.building_id GROUP BY b.name ORDER BY COUNT(ol.company_id) DESC LIMIT 1;
SELECT b.name FROM buildings b JOIN Office_locations ol ON b.id = ol.building_id GROUP BY b.name ORDER BY COUNT(ol.company_id) DESC LIMIT 1;
SELECT name  FROM buildings  WHERE status = 'on-hold'  ORDER BY stories ASC;
SELECT name  FROM buildings  WHERE Status = 'on-hold'  ORDER BY Stories ASC;
SELECT Industry, COUNT(*) AS Num_of_Companies FROM Companies GROUP BY Industry;
SELECT Industry, COUNT(*)  FROM Companies  GROUP BY Industry;
SELECT Industry, COUNT(*) AS Num_of_Companies FROM Companies GROUP BY Industry ORDER BY Num_of_Companies DESC;
SELECT Industry, COUNT(*) AS CompanyCount  FROM Companies  GROUP BY Industry  ORDER BY CompanyCount DESC;
SELECT Industry, COUNT(*) AS num_companies  FROM Companies  GROUP BY Industry  ORDER BY num_companies DESC  LIMIT 1;
SELECT Industry, COUNT(*) AS CompanyCount  FROM Companies  GROUP BY Industry  ORDER BY CompanyCount DESC  LIMIT 1;
SELECT name  FROM buildings  WHERE id NOT IN (SELECT building_id FROM Office_locations)
SELECT name  FROM buildings  WHERE id NOT IN (SELECT building_id FROM Office_locations)
SELECT      T1.Industry  FROM      Companies AS T1  JOIN      Office_locations AS T2  ON      T1.id = T2.company_id  WHERE      T1.Headquarters = 'USA'  INTERSECT  SELECT      T1.Industry  FROM      Companies AS T1  JOIN      Office_locations AS T2  ON      T1.id = T2.company_id  WHERE      T1.Headquarters = 'China'
SELECT Industry  FROM Companies  WHERE Headquarters = 'USA' INTERSECT SELECT Industry  FROM Companies  WHERE Headquarters = 'China'
SELECT COUNT(*)  FROM Companies  WHERE Industry IN ("Banking", "Conglomerate");
SELECT COUNT(*)  FROM Companies  WHERE Industry = 'Banking' OR Industry = 'Conglomerate';
SELECT Headquarters  FROM Companies  GROUP BY Headquarters  HAVING COUNT(*) > 2;
SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*) > 2;
SELECT COUNT(*) FROM Products;
SELECT Product_Name  FROM Products  ORDER BY Product_Price ASC;
SELECT Product_Name, Product_Type_Code FROM Products;
SELECT Product_Price  FROM Products  WHERE Product_Name = 'Dining' OR Product_Name = 'Trading Policy';
SELECT AVG(Product_Price) FROM Products;
SELECT Product_Name  FROM Products  WHERE Product_Price = (SELECT MAX(Product_Price) FROM Products);
SELECT Product_Type_Code, COUNT(*)  FROM Products  GROUP BY Product_Type_Code;
SELECT Product_Type_Code, COUNT(*) AS Type_Count FROM Products GROUP BY Product_Type_Code ORDER BY Type_Count DESC LIMIT 1;
SELECT Product_Type_Code  FROM Products  GROUP BY Product_Type_Code  HAVING COUNT(*) >= 2;
SELECT Product_Type_Code  FROM Products  WHERE Product_Price > 4500  INTERSECT  SELECT Product_Type_Code  FROM Products  WHERE Product_Price < 3000;
SELECT p.Product_Name, COUNT(ee.Event_ID) AS NumberOfEvents FROM Products p JOIN Products_in_Events pee ON p.Product_ID = pee.Product_ID JOIN Events ee ON pee.Event_ID = ee.Event_ID GROUP BY p.Product_Name
SELECT p.Product_Name, COUNT(pei.Event_ID) AS NumberOfEvents FROM Products p JOIN Products_in_Events pei ON p.Product_ID = pei.Product_ID GROUP BY p.Product_Name ORDER BY NumberOfEvents DESC;
SELECT p.Product_Name  FROM Products p JOIN Products_in_Events pie ON p.Product_ID = pie.Product_ID GROUP BY p.Product_Name HAVING COUNT(pie.Event_ID) >= 2;
SELECT P.Product_Name  FROM Products P JOIN Products_in_Events PIE ON P.Product_ID = PIE.Product_ID GROUP BY P.Product_Name HAVING COUNT(PIE.Event_ID) >= 2 ORDER BY P.Product_Name ASC;
SELECT Product_Name  FROM Products  WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events);
SELECT COUNT(*) FROM artwork;
SELECT Name  FROM artwork  ORDER BY Name ASC;
SELECT Name  FROM artwork  WHERE Type != 'Program Talent Show';
SELECT Festival_Name, Location FROM festival_detail;
SELECT T1.Chair_Name  FROM festival_detail AS T1 ORDER BY T1.Year ASC;
SELECT Location FROM festival_detail WHERE Num_of_Audience = (SELECT MAX(Num_of_Audience) FROM festival_detail);
SELECT Festival_Name FROM festival_detail WHERE Year = 2007;
SELECT AVG(Num_of_Audience) FROM festival_detail;
SELECT Festival_Name  FROM festival_detail  ORDER BY Year DESC  LIMIT 3;
SELECT a.Name AS Artwork_Name, fd.Festival_Name  FROM nomination n  JOIN artwork a ON n.Artwork_ID = a.Artwork_ID  JOIN festival_detail fd ON n.Festival_ID = fd.Festival_ID;
SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T3.Year = 2007
SELECT T3.Name  FROM nomination AS T1  JOIN festival_detail AS T2 ON T1.Festival_ID = T2.Festival_ID  JOIN artwork AS T3 ON T1.Artwork_ID = T3.Artwork_ID  ORDER BY T2.Year ASC;
SELECT T2.Festival_Name FROM nomination AS T1 JOIN festival_detail AS T2 ON T1.Festival_ID = T2.Festival_ID JOIN artwork AS T3 ON T1.Artwork_ID = T3.Artwork_ID WHERE T3.Type = "Program Talent Show"
SELECT T2.Festival_ID, T2.Festival_Name  FROM nomination AS T1  JOIN festival_detail AS T2 ON T1.Festival_ID = T2.Festival_ID  GROUP BY T2.Festival_ID  HAVING COUNT(T1.Artwork_ID) >= 2;
SELECT F.Festival_ID, F.Festival_Name, COUNT(N.Artwork_ID) AS Num_of_Nominations FROM festival_detail AS F JOIN nomination AS N ON F.Festival_ID = N.Festival_ID GROUP BY F.Festival_ID, F.Festival_Name;
SELECT Type, COUNT(*) AS Num_of_Artworks FROM artwork GROUP BY Type;
SELECT Type, COUNT(*) AS Count  FROM artwork  GROUP BY Type  ORDER BY Count DESC  LIMIT 1;
SELECT Year FROM festival_detail GROUP BY Year HAVING COUNT(Festival_ID) > 1;
SELECT Name  FROM artwork  WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)
SELECT Num_of_Audience  FROM festival_detail  WHERE Year IN (2008, 2010);
SELECT SUM(Num_of_Audience) FROM festival_detail;
SELECT Year FROM festival_detail WHERE Location = 'United States' INTERSECT SELECT Year FROM festival_detail WHERE Location != 'United States'
SELECT COUNT(*) FROM Premises;
SELECT DISTINCT premise_type FROM Premises;
SELECT premise_type, premise_details  FROM Premises  ORDER BY premise_type;
SELECT premise_type, COUNT(premise_id)  FROM Premises  GROUP BY premise_type;
SELECT      product_category,      COUNT(DISTINCT mailshot_id) AS num_mailshots FROM      Mailshot_Campaigns GROUP BY      product_category;
SELECT c.customer_name, c.customer_phone  FROM Customers c  LEFT JOIN Mailshot_Customers mc ON c.customer_id = mc.customer_id  WHERE mc.customer_id IS NULL;
SELECT c.customer_name, c.customer_phone  FROM Customers c  JOIN Mailshot_Customers mc ON c.customer_id = mc.customer_id  WHERE mc.outcome_code = 'No Response';
SELECT outcome_code, COUNT(*) AS number_of_mailshots FROM Mailshot_Customers GROUP BY outcome_code;
SELECT c.customer_name FROM Customers c JOIN Mailshot_Customers mc ON c.customer_id = mc.customer_id WHERE mc.outcome_code = 'Order' GROUP BY c.customer_name HAVING COUNT(mc.mailshot_id) >= 2;
SELECT C.customer_name, COUNT(MC.mailshot_id) as mailshot_count FROM Customers C JOIN Mailshot_Customers MC ON C.customer_id = MC.customer_id GROUP BY C.customer_name ORDER BY mailshot_count DESC LIMIT 1;
SELECT c.customer_name, c.payment_method  FROM Customers c WHERE EXISTS (     SELECT 1      FROM Mailshot_Customers mc1      WHERE mc1.customer_id = c.customer_id      AND mc1.outcome_code = 'Order' )  AND EXISTS (     SELECT 1      FROM Mailshot_Customers mc2      WHERE mc2.customer_id = c.customer_id      AND mc2.outcome_code = 'No Response' ) GROUP BY c.customer_name, c.payment_method;
SELECT P.premises_type, CA.address_type_code  FROM Premises P  JOIN Customer_Addresses CA ON P.premise_id = CA.premise_id;
SELECT DISTINCT address_type_code FROM Customer_Addresses;
SELECT T1.order_shipping_charges, T2.customer_id  FROM Customer_Orders AS T1  JOIN Customers AS T2 ON T1.customer_id = T2.customer_id  WHERE T1.order_status_code IN ('Cancelled', 'Paid');
SELECT DISTINCT c.customer_name  FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.shipping_method_code = 'FedEx' AND co.order_status_code = 'Paid';
SELECT COUNT(*) FROM Course;
SELECT COUNT(*) FROM Course;
SELECT COUNT(*)  FROM Course  WHERE Credits > 2;
SELECT COUNT(*)  FROM Course  WHERE Credits > 2;
SELECT CName FROM Course WHERE Credits = 1;
SELECT CName FROM Course WHERE Credits = 1;
Error: 第 4642 个样本有 2 个SQL。
SELECT CName  FROM Course  WHERE Days = 'MTW';
SELECT COUNT(*)  FROM Department  WHERE Division = 'AS';
SELECT COUNT(*)  FROM Department  WHERE Division = 'AS';
SELECT DPhone FROM Department WHERE Room = 268;
SELECT DPhone FROM Department WHERE Room = 268;
SELECT COUNT(DISTINCT StuID)  FROM Enrolled_in  WHERE Grade = 'B';
Error: 第 4649 个样本有 3 个SQL。
SELECT MAX(gradepoint) AS Max_Grade_Point, MIN(gradepoint) AS Min_Grade_Point  FROM Gradeconversion;
SELECT MAX(gradepoint) AS Maximum, MIN(gradepoint) AS Minimum  FROM Gradeconversion;
SELECT Fname  FROM Student  WHERE Fname LIKE '%a%';
SELECT Fname  FROM Student  WHERE Fname LIKE '%a%';
SELECT Fname, Lname  FROM Faculty  WHERE Sex = 'M' AND Building = 'NEB';
SELECT Fname, Lname  FROM Faculty  WHERE Sex = 'M' AND Building = 'NEB';
SELECT Room  FROM Faculty  WHERE Rank = 'Professor' AND Building = 'NEB';
SELECT T1.Room  FROM Faculty AS T1  JOIN Member_of AS T2  ON T1.FacID = T2.FacID  WHERE T1.Rank = 'Professor' AND T1.Building = 'NEB';
SELECT DName  FROM Department  WHERE Building = 'Mergenthaler';
SELECT DName FROM Department WHERE Building = 'Mergenthaler';
SELECT * FROM Course ORDER BY Credits ASC;
SELECT * FROM Course ORDER BY Credits ASC;
SELECT CName FROM Course ORDER BY Credits;
SELECT CName  FROM Course  ORDER BY Credits;
SELECT Fname FROM Student ORDER BY Age DESC;
SELECT Fname FROM Student ORDER BY Age DESC;
SELECT LName  FROM Student  WHERE Sex = 'F'  ORDER BY Age DESC;
SELECT LName  FROM Student  WHERE Sex = 'F'  ORDER BY Age DESC;
SELECT Lname  FROM Faculty  WHERE Building = 'Barton'  ORDER BY Lname ASC;
SELECT Lname FROM Faculty WHERE Building = 'Barton' ORDER BY Lname;
SELECT Fname  FROM Faculty  WHERE Rank = 'Professor'  ORDER BY Fname ASC;
SELECT Fname FROM Faculty WHERE Rank = 'Professor' ORDER BY Fname;
SELECT DName FROM Department WHERE DNO = (     SELECT DNO     FROM Minor_in     GROUP BY DNO     ORDER BY COUNT(DNO) DESC     LIMIT 1 )
SELECT DName FROM Department WHERE DNO = (     SELECT DNO     FROM Minor_in     GROUP BY DNO     ORDER BY COUNT(*) DESC     LIMIT 1 )
SELECT DName  FROM Department  WHERE NOT EXISTS (     SELECT *      FROM Minor_in      WHERE Department.DNO = Minor_in.DNO );
SELECT DName  FROM Department  WHERE DNO NOT IN (SELECT DNO FROM Minor_in)
SELECT DName  FROM Department  WHERE DNO IN (     SELECT DNO      FROM Member_of      GROUP BY DNO      ORDER BY COUNT(DNO)      LIMIT 1 )
SELECT DName  FROM Department  WHERE DNO IN (     SELECT DNO      FROM Member_of      GROUP BY DNO      ORDER BY COUNT(FacID)      LIMIT 1 )
SELECT Rank, COUNT(*) AS Count  FROM Faculty  GROUP BY Rank  ORDER BY Count ASC  LIMIT 1;
SELECT Rank  FROM Faculty  GROUP BY Rank  ORDER BY COUNT(*)  LIMIT 1;
SELECT T2.Fname, T2.Lname  FROM      (SELECT Instructor, COUNT(*) AS course_count       FROM Course       GROUP BY Instructor       ORDER BY course_count DESC       LIMIT 3) AS T1  JOIN Faculty AS T2  ON T1.Instructor = T2.FacID;
SELECT T1.Fname, T1.Lname FROM Faculty AS T1  JOIN Course AS T2 ON T1.FacID = T2.Instructor GROUP BY T1.FacID ORDER BY COUNT(T2.CID) DESC LIMIT 3;
SELECT Building  FROM Faculty  WHERE FacID = (     SELECT Instructor      FROM (         SELECT Instructor, COUNT(*) as course_count          FROM Course          GROUP BY Instructor          ORDER BY course_count DESC          LIMIT 1     ) as most_courses )
SELECT Building  FROM Faculty  WHERE FacID = (     SELECT Instructor      FROM (         SELECT Instructor, COUNT(*) AS course_count          FROM Course          GROUP BY Instructor          ORDER BY course_count DESC          LIMIT 1     ) AS most_courses )
SELECT CName FROM Course WHERE CID IN (     SELECT CID     FROM Enrolled_in     GROUP BY CID     HAVING COUNT(*) >= 5 )
SELECT CName FROM Course WHERE CID IN (     SELECT CID     FROM Enrolled_in     GROUP BY CID     HAVING COUNT(*) >= 5 )
SELECT Faculty.Fname, Faculty.Lname  FROM Faculty  JOIN Course ON Faculty.FacID = Course.Instructor  WHERE Course.CName = 'your_course_name';
SELECT Faculty.Fname, Faculty.Lname  FROM Faculty  JOIN Course ON Faculty.FacID = Course.Instructor  WHERE Course.CName = 'COMPUTER LITERACY';
SELECT Department.DName, Course.Room  FROM Course  JOIN Department ON Course.DNO = Department.DNO  WHERE Course.CName = 'INTRODUCTION TO COMPUTER SCIENCE';
SELECT Department.DName, Department.Room  FROM Department  JOIN Course ON Department.DNO = Course.DNO  WHERE Course.CName = 'INTRODUCTION TO COMPUTER SCIENCE';
SELECT S.Fname, S.LName, G.gradepoint FROM Student S JOIN Enrolled_in E ON S.StuID = E.StuID JOIN Gradeconversion G ON E.Grade = G.lettergrade;
SELECT S.Fname, S.LName, G.gradepoint FROM Student S JOIN Enrolled_in E ON S.StuID = E.StuID JOIN Gradeconversion G ON E.Grade = G.lettergrade;
Error: 第 4692 个样本有 2 个SQL。
SELECT DISTINCT S.Fname FROM Student S JOIN Enrolled_in E ON S.StuID = E.StuID JOIN Gradeconversion G ON E.Grade = G.lettergrade WHERE G.gradepoint >= 3.8;
SELECT Faculty.Fname, Faculty.Lname  FROM Faculty, Member_of  WHERE Faculty.FacID = Member_of.FacID AND Member_of.DNO = 520;
SELECT Faculty.Fname, Faculty.Lname  FROM Faculty  JOIN Member_of  ON Faculty.FacID = Member_of.FacID  WHERE Member_of.DNO = 520;
SELECT S.Fname, S.LName FROM Student S, Minor_in M WHERE S.StuID = M.StuID AND M.DNO = 140;
SELECT S.Fname, S.LName  FROM Student S, Minor_in M  WHERE S.StuID = M.StuID AND M.DNO = 140;
SELECT Faculty.Lname  FROM Faculty  JOIN Member_of ON Faculty.FacID = Member_of.FacID  JOIN Department ON Member_of.DNO = Department.DNO  WHERE Department.DName = 'Computer Science';
SELECT Faculty.Lname  FROM Faculty  JOIN Member_of ON Faculty.FacID = Member_of.FacID  JOIN Department ON Member_of.DNO = Department.DNO  WHERE Department.DName = 'Computer Science';
SELECT AVG(Gradeconversion.gradepoint)  FROM Student  JOIN Enrolled_in ON Student.StuID = Enrolled_in.StuID  JOIN Gradeconversion ON Enrolled_in.Grade = Gradeconversion.lettergrade  WHERE Student.LName = 'Smith'
SELECT AVG(Gradeconversion.gradepoint)  FROM Student  JOIN Enrolled_in ON Student.StuID = Enrolled_in.StuID  JOIN Gradeconversion ON Enrolled_in.Grade = Gradeconversion.lettergrade  WHERE Student.LName = 'Smith';
SELECT MAX(T2.gradepoint) AS MaxGradePoint, MIN(T2.gradepoint) AS MinGradePoint  FROM Student AS T1  JOIN Enrolled_in AS T2 ON T1.StuID = T2.StuID  JOIN Gradeconversion AS T3 ON T2.Grade = T3.lettergrade  WHERE T1.city_code = 'NYC';
SELECT MAX(T2.gradepoint) AS MaxGradepoint, MIN(T2.gradepoint) AS MinGradepoint  FROM Enrolled_in AS T1  JOIN Gradeconversion AS T2  ON T1.Grade = T2.lettergrade  JOIN Student AS T3  ON T1.StuID = T3.StuID  WHERE T3.city_code = 'NYC'
SELECT CName  FROM Course  WHERE (Credits = 3 AND Hours = 0) OR (Credits = 1 AND Hours = 4);
SELECT CName  FROM Course  WHERE (Credits = 3) OR (Credits = 1 AND Hours = 4);
SELECT DName  FROM Department  WHERE (Division = 'AS') OR (Division = 'EN' AND Building = 'NEB');
SELECT DName  FROM Department  WHERE Division = 'AS' OR (Division = 'EN' AND Building = 'NEB');
SELECT Fname  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Enrolled_in)
SELECT Fname  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Enrolled_in)
SELECT product_id FROM (   SELECT product_id, SUM(total_amount_purchased) as total_amount   FROM Product_Suppliers   GROUP BY product_id ) as subquery ORDER BY total_amount DESC LIMIT 3;
SELECT product_id  FROM Product_Suppliers  GROUP BY product_id  ORDER BY SUM(total_amount_purchased) DESC  LIMIT 3;
SELECT product_id, product_type_code  FROM Products  WHERE product_price = (SELECT MIN(product_price) FROM Products);
SELECT product_id, product_type_code  FROM Products  WHERE product_price = (SELECT MIN(product_price) FROM Products);
SELECT COUNT(DISTINCT product_type_code) FROM Products;
SELECT COUNT(DISTINCT product_type_code) FROM Products;
SELECT Addresses.address_details  FROM Addresses  JOIN Customer_Addresses ON Addresses.address_id = Customer_Addresses.address_id  WHERE Customer_Addresses.customer_id = 10;
SELECT Addresses.address_details  FROM Addresses  JOIN Customer_Addresses ON Addresses.address_id = Customer_Addresses.address_id  WHERE Customer_Addresses.customer_id = 10;
SELECT S.staff_id, S.staff_gender FROM Staff S JOIN Staff_Department_Assignments SD ON S.staff_id = SD.staff_id WHERE SD.job_title_code = 'Department Manager';
SELECT s.staff_id, s.staff_gender FROM Staff s JOIN Staff_Department_Assignments sd ON s.staff_id = sd.staff_id WHERE sd.job_title_code = 'Department Manager';
SELECT payment_method_code, COUNT(*) AS number_of_customers FROM Customers GROUP BY payment_method_code;
SELECT payment_method_code, COUNT(*) AS number_of_customers FROM Customers GROUP BY payment_method_code;
SELECT product_id, COUNT(*) as order_count  FROM Order_Items  GROUP BY product_id  ORDER BY order_count DESC  LIMIT 1;
SELECT product_id, COUNT(*) as frequency  FROM Order_Items  GROUP BY product_id  ORDER BY frequency DESC  LIMIT 1;
SELECT C.customer_name, C.customer_phone, C.customer_email  FROM Customers C  JOIN Customer_Orders CO ON C.customer_id = CO.customer_id  GROUP BY C.customer_id, C.customer_name, C.customer_phone, C.customer_email  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT c.customer_name, c.customer_phone, c.customer_email  FROM Customers c  JOIN (     SELECT customer_id, COUNT(*) as num_orders      FROM Customer_Orders      GROUP BY customer_id      ORDER BY num_orders DESC      LIMIT 1 ) co  ON c.customer_id = co.customer_id;
SELECT product_type_code, AVG(product_price)  FROM Products  GROUP BY product_type_code;
SELECT product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code;
SELECT COUNT(*)  FROM Department_Stores  WHERE dept_store_chain_id = (     SELECT dept_store_chain_id      FROM Department_Store_Chain      WHERE dept_store_chain_name = 'South' );
SELECT COUNT(*)  FROM Department_Stores  WHERE dept_store_chain_id = (     SELECT dept_store_chain_id      FROM Department_Store_Chain      WHERE dept_store_chain_name = 'South' );
SELECT S.staff_name, SD.job_title_code  FROM Staff S  JOIN Staff_Department_Assignments SD  ON S.staff_id = SD.staff_id  WHERE SD.date_assigned_from = (SELECT MAX(date_assigned_from) FROM Staff_Department_Assignments);
SELECT SD.staff_name, SD.job_title_code  FROM Staff_Department_Assignments SDA  JOIN Staff SD ON SDA.staff_id = SD.staff_id  WHERE SDA.date_assigned_from = (     SELECT MAX(date_assigned_from)      FROM Staff_Department_Assignments );
SELECT p.product_type_code, p.product_name, p.product_price FROM Products p JOIN Product_Suppliers ps ON p.product_id = ps.product_id WHERE ps.supplier_id = 3;
SELECT p.product_type_code, p.product_name, p.product_price FROM Products p JOIN Product_Suppliers ps ON p.product_id = ps.product_id WHERE ps.supplier_id = 3;
SELECT DISTINCT Customers.customer_name  FROM Customers  JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id  WHERE Customer_Orders.order_status_code = 'Pending'  ORDER BY Customers.customer_id;
SELECT DISTINCT Customers.customer_name  FROM Customers  JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id  WHERE Customer_Orders.order_status_code = 'Pending'  ORDER BY Customers.customer_id;
SELECT C.customer_name, A.address_details FROM Customers C JOIN Customer_Orders CO ON C.customer_id = CO.customer_id JOIN Customer_Addresses CA ON C.customer_id = CA.customer_id JOIN Addresses A ON CA.address_id = A.address_id WHERE CO.order_status_code IN ('New', 'Pending') GROUP BY C.customer_id, C.customer_name, A.address_details HAVING COUNT(DISTINCT CO.order_status_code) > 1;
SELECT C.customer_name, A.address_details FROM Customers C JOIN Customer_Orders CO ON C.customer_id = CO.customer_id JOIN Customer_Addresses CA ON C.customer_id = CA.customer_id JOIN Addresses A ON CA.address_id = A.address_id WHERE CO.order_status_code IN ('New', 'Pending') GROUP BY C.customer_id, C.customer_name, A.address_details HAVING COUNT(DISTINCT CO.order_status_code) = 2;
SELECT p.product_id  FROM Products p  JOIN Product_Suppliers ps ON p.product_id = ps.product_id  WHERE ps.supplier_id = 2 AND p.product_price > (SELECT AVG(product_price) FROM Products)
SELECT p.product_id  FROM Products p  JOIN Product_Suppliers ps ON p.product_id = ps.product_id  WHERE ps.supplier_id = 2 AND p.product_price > (SELECT AVG(product_price) FROM Products)
SELECT DS.dept_store_id, DS.store_name FROM Department_Stores DS JOIN Departments D ON DS.dept_store_id = D.dept_store_id WHERE D.department_name IN ('marketing', 'managing') GROUP BY DS.dept_store_id, DS.store_name HAVING COUNT(DISTINCT D.department_name) = 2;
SELECT T1.dept_store_id, T1.store_name  FROM Department_Stores AS T1  JOIN Departments AS T2 ON T1.dept_store_id = T2.dept_store_id  WHERE T2.department_name = 'Marketing'  INTERSECT  SELECT T1.dept_store_id, T1.store_name  FROM Department_Stores AS T1  JOIN Departments AS T2 ON T1.dept_store_id = T2.dept_store_id  WHERE T2.department_name = 'Managing'
SELECT ds.dept_store_chain_id  FROM Department_Stores ds GROUP BY ds.dept_store_chain_id ORDER BY COUNT(ds.dept_store_id) DESC LIMIT 2;
SELECT ds.dept_store_chain_id  FROM Department_Stores ds GROUP BY ds.dept_store_chain_id ORDER BY COUNT(ds.dept_store_id) DESC LIMIT 2;
SELECT department_id  FROM Staff_Department_Assignments  GROUP BY department_id  ORDER BY COUNT(staff_id)  LIMIT 1;
SELECT department_id  FROM Staff_Department_Assignments  GROUP BY department_id  ORDER BY COUNT(staff_id)  LIMIT 1;
SELECT product_type_code, MAX(product_price) AS max_price, MIN(product_price) AS min_price  FROM Products  GROUP BY product_type_code;
SELECT product_type_code, MAX(product_price) AS max_price, MIN(product_price) AS min_price  FROM Products  GROUP BY product_type_code;
SELECT product_type_code  FROM Products  GROUP BY product_type_code  HAVING AVG(product_price) > (SELECT AVG(product_price) FROM Products)
SELECT product_type_code  FROM Products  GROUP BY product_type_code  HAVING AVG(product_price) > (SELECT AVG(product_price) FROM Products);
SELECT SD.staff_id, S.staff_name  FROM Staff_Department_Assignments SD JOIN Staff S ON SD.staff_id = S.staff_id WHERE SD.date_assigned_to - SD.date_assigned_from = (     SELECT MIN(date_assigned_to - date_assigned_from)     FROM Staff_Department_Assignments ) LIMIT 1;
SELECT SD.staff_id, S.staff_name  FROM Staff_Department_Assignments SD JOIN Staff S ON SD.staff_id = S.staff_id  WHERE SD.date_assigned_to - SD.date_assigned_from = (     SELECT MIN(date_assigned_to - date_assigned_from)      FROM Staff_Department_Assignments ) LIMIT 1;
SELECT product_name, product_id  FROM Products  WHERE product_price BETWEEN 600 AND 700;
SELECT product_name, product_id  FROM Products  WHERE product_price BETWEEN 600 AND 700;
SELECT DISTINCT customer_id  FROM Customer_Orders  WHERE order_date > (SELECT MIN(order_date)       FROM Customer_Orders       WHERE order_status_code = 'Cancelled')
SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date > (SELECT MIN(order_date) FROM Customer_Orders WHERE order_status_code = 'Cancelled')
SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_from < (SELECT MIN(date_assigned_from) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical') LIMIT 1;
SELECT SD1.staff_id  FROM Staff_Department_Assignments SD1 WHERE SD1.date_assigned_from < ALL (     SELECT SD2.date_assigned_from      FROM Staff_Department_Assignments SD2      JOIN Staff S ON SD2.staff_id = S.staff_id      WHERE S.job_title_code = 'Clerical')
SELECT customer_name, customer_id FROM Customers WHERE customer_address LIKE '%TN%';
SELECT Customers.customer_name, Customers.customer_id  FROM Customers  JOIN Customer_Addresses ON Customers.customer_id = Customer_Addresses.customer_id  JOIN Addresses ON Customer_Addresses.address_id = Addresses.address_id  WHERE Addresses.address_details LIKE '%TN%';
SELECT Staff.staff_name, Staff.staff_gender  FROM Staff  JOIN Staff_Department_Assignments ON Staff.staff_id = Staff_Department_Assignments.staff_id  WHERE YEAR(Staff_Department_Assignments.date_assigned_from) = 2016;
SELECT s.staff_name, s.staff_gender  FROM Staff s JOIN Staff_Department_Assignments sd ON s.staff_id = sd.staff_id WHERE YEAR(sd.date_assigned_from) = 2016;
SELECT SD.staff_name  FROM Staff AS S  JOIN Staff_Department_Assignments AS SD  ON S.staff_id = SD.staff_id  GROUP BY SD.staff_id  HAVING COUNT(SD.job_title_code) > 1;
SELECT SD.staff_name  FROM Staff AS S  JOIN Staff_Department_Assignments AS SD  ON S.staff_id = SD.staff_id  GROUP BY SD.staff_id  HAVING COUNT(SD.job_title_code) > 1;
SELECT S.supplier_name, S.supplier_phone  FROM Suppliers S  JOIN Supplier_Addresses SA ON S.supplier_id = SA.supplier_id  JOIN Addresses A ON SA.address_id = A.address_id  ORDER BY A.address_details ASC;
SELECT Suppliers.supplier_name, Addresses.address_details, Suppliers.supplier_phone FROM Suppliers JOIN Supplier_Addresses ON Suppliers.supplier_id = Supplier_Addresses.supplier_id JOIN Addresses ON Supplier_Addresses.address_id = Addresses.address_id ORDER BY Addresses.address_details ASC;
SELECT Customers.customer_phone FROM Customers UNION SELECT Suppliers.supplier_phone FROM Suppliers
SELECT Customers.customer_phone FROM Customers UNION SELECT Suppliers.supplier_phone FROM Suppliers
Error: 第 4768 个样本有 4 个SQL。
Error: 第 4769 个样本有 2 个SQL。
SELECT product_id, product_name  FROM Products  WHERE product_price < 600 OR product_price > 900;
SELECT product_id, product_name  FROM Products  WHERE product_price < 600 OR product_price > 900;
SELECT supplier_id  FROM (   SELECT supplier_id, AVG(total_amount_purchased) as average_amount    FROM Product_Suppliers    GROUP BY supplier_id ) AS avg_amounts WHERE average_amount > 50000 OR average_amount < 30000;
SELECT supplier_id  FROM (   SELECT supplier_id, AVG(total_amount_purchased) as average_amount    FROM Product_Suppliers    GROUP BY supplier_id ) as avg_amounts  WHERE average_amount > 50000 OR average_amount < 30000;
SELECT AVG(total_amount_purchased), AVG(total_value_purchased) FROM (     SELECT product_id, supplier_id, total_amount_purchased, total_value_purchased     FROM Product_Suppliers     WHERE supplier_id = (         SELECT supplier_id         FROM (             SELECT supplier_id, COUNT(product_id) AS num_products_supplied             FROM Product_Suppliers             GROUP BY supplier_id             ORDER BY num_products_supplied DESC             LIMIT 1         ) AS subquery     ) ) AS subquery2
SELECT AVG(total_amount_purchased), AVG(total_value_purchased) FROM (     SELECT supplier_id, SUM(total_amount_purchased) as total_amount_purchased, SUM(total_value_purchased) as total_value_purchased     FROM Product_Suppliers     GROUP BY supplier_id     ORDER BY COUNT(product_id) DESC     LIMIT 1 ) as subquery;
SELECT MAX(customer_code) AS largest_customer_code, MIN(customer_code) AS smallest_customer_code FROM Customers;
SELECT MAX(customer_code) AS max_customer_code, MIN(customer_code) AS min_customer_code FROM Customers;
SELECT DISTINCT Customers.customer_name  FROM Customers  JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id  JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id  JOIN Products ON Order_Items.product_id = Products.product_id  WHERE Products.product_name = 'keyboard';
SELECT DISTINCT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'keyboard';
SELECT DISTINCT Suppliers.supplier_name, Suppliers.supplier_phone  FROM Suppliers  JOIN Product_Suppliers ON Suppliers.supplier_id = Product_Suppliers.supplier_id  JOIN Products ON Product_Suppliers.product_id = Products.product_id  WHERE Products.product_name = 'red jeans';
SELECT DISTINCT T2.supplier_name, T2.supplier_phone  FROM Products AS T1  JOIN Product_Suppliers AS T3 ON T1.product_id = T3.product_id  JOIN Suppliers AS T2 ON T2.supplier_id = T3.supplier_id  WHERE T1.product_name = 'red jeans';
SELECT product_type_code, MAX(product_price) AS highest_price, MIN(product_price) AS lowest_price  FROM Products  GROUP BY product_type_code  ORDER BY product_type_code ASC;
SELECT product_type_code, MAX(product_price) AS max_price, MIN(product_price) AS min_price  FROM Products  GROUP BY product_type_code  ORDER BY product_type_code;
SELECT order_id, customer_id  FROM Customer_Orders  WHERE order_status_code = 'Cancelled'  ORDER BY order_date;
SELECT order_id, customer_id  FROM Customer_Orders  WHERE order_status_code = 'Cancelled'  ORDER BY order_date;
SELECT P.product_name FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Customer_Orders CO ON OI.order_id = CO.order_id GROUP BY P.product_id, P.product_name HAVING COUNT(DISTINCT CO.customer_id) >= 2;
SELECT DISTINCT p.product_name  FROM Products p  JOIN Order_Items oi ON p.product_id = oi.product_id  JOIN Customer_Orders co ON oi.order_id = co.order_id  GROUP BY p.product_id  HAVING COUNT(DISTINCT co.customer_id) >= 2;
SELECT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY c.customer_name HAVING COUNT(DISTINCT p.product_id) >= 3;
SELECT DISTINCT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY c.customer_id, c.customer_name HAVING COUNT(DISTINCT oi.product_id) >= 3;
SELECT s.staff_name, s.staff_gender  FROM Staff s  JOIN Staff_Department_Assignments sd  ON s.staff_id = sd.staff_id  WHERE sd.job_title_code = 'Sales Person'  AND s.staff_id NOT IN (     SELECT staff_id      FROM Staff_Department_Assignments      WHERE job_title_code = 'Clerical Staff' ) GROUP BY s.staff_id;
SELECT s.staff_name, s.staff_gender  FROM Staff s  JOIN Staff_Department_Assignments sd  ON s.staff_id = sd.staff_id  WHERE sd.job_title_code = 'Sales Person'  AND s.staff_id NOT IN (     SELECT staff_id      FROM Staff_Department_Assignments      WHERE job_title_code = 'Clerical Staff' ) GROUP BY s.staff_id;
SELECT customer_id, customer_name  FROM Customers  WHERE customer_address LIKE '%WY%'  AND payment_method_code != 'CreditCard';
SELECT customer_id, customer_name  FROM Customers  WHERE customer_address LIKE '%WY%'  AND payment_method_code != 'CreditCard';
SELECT AVG(product_price)  FROM Products  WHERE product_type_code = 'Clothes';
SELECT AVG(product_price)  FROM Products  WHERE product_type_code = 'Clothes';
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price DESC LIMIT 1;
SELECT product_name  FROM Products  WHERE product_price = (SELECT MAX(product_price) FROM Products WHERE product_type_code = 'Hardware');
SELECT COUNT(*) FROM aircraft;
SELECT COUNT(*) FROM aircraft;
SELECT Description FROM aircraft;
SELECT Description FROM aircraft;
SELECT AVG(International_Passengers) FROM airport;
SELECT AVG(International_Passengers) FROM airport;
SELECT International_Passengers, Domestic_Passengers  FROM airport  WHERE Airport_Name = 'London Heathrow';
SELECT International_Passengers, Domestic_Passengers  FROM airport  WHERE Airport_Name = 'London Heathrow';
SELECT SUM(Domestic_Passengers)  FROM airport  WHERE Airport_Name LIKE '%London%';
SELECT SUM(Domestic_Passengers)  FROM airport  WHERE Airport_Name LIKE '%London%';
SELECT MAX(Transit_Passengers) AS Max_Transit_Passengers, MIN(Transit_Passengers) AS Min_Transit_Passengers FROM airport;
SELECT MAX(Transit_Passengers) AS Max_Transit_Passengers, MIN(Transit_Passengers) AS Min_Transit_Passengers FROM airport;
SELECT Name FROM pilot WHERE Age >= 25;
SELECT Name FROM pilot WHERE Age >= 25;
SELECT Name  FROM pilot  ORDER BY Name ASC;
SELECT Name FROM pilot ORDER BY Name ASC;
SELECT Name  FROM pilot  WHERE Age <= 30  ORDER BY Name DESC;
SELECT Name  FROM pilot  WHERE Age <= 30  ORDER BY Name DESC;
SELECT T3.Aircraft  FROM airport AS T1  JOIN airport_aircraft AS T2 ON T1.Airport_ID = T2.Airport_ID  JOIN aircraft AS T3 ON T2.Aircraft_ID = T3.Aircraft_ID  WHERE T1.Airport_Name = "London Gatwick"
SELECT T3.Aircraft  FROM airport_aircraft AS T1  JOIN airport AS T2 ON T1.Airport_ID = T2.Airport_ID  JOIN aircraft AS T3 ON T1.Aircraft_ID = T3.Aircraft_ID  WHERE T2.Airport_Name = 'London Gatwick'
SELECT T3.Aircraft, T3.Description  FROM airport AS T1  JOIN airport_aircraft AS T2 ON T1.Airport_ID = T2.Airport_ID  JOIN aircraft AS T3 ON T2.Aircraft_ID = T3.Aircraft_ID  WHERE T1.Total_Passengers > 10000000;
SELECT T3.Aircraft, T3.Description  FROM airport AS T1  JOIN airport_aircraft AS T2 ON T1.Airport_ID = T2.Airport_ID  JOIN aircraft AS T3 ON T2.Aircraft_ID = T3.Aircraft_ID  WHERE T1.Total_Passengers > 10000000;
SELECT AVG(T3.Total_Passengers)  FROM airport_aircraft AS T1  JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID  JOIN airport AS T3 ON T1.Airport_ID = T3.Airport_ID  WHERE T2.Aircraft = 'Robinson R-22';
SELECT AVG(T1.Total_Passengers)  FROM airport AS T1  JOIN airport_aircraft AS T2 ON T1.Airport_ID = T2.Airport_ID  JOIN aircraft AS T3 ON T2.Aircraft_ID = T3.Aircraft_ID  WHERE T3.Aircraft = 'Robinson R-22';
SELECT match.Location, aircraft.Aircraft  FROM match  JOIN aircraft ON match.Winning_Aircraft = aircraft.Aircraft_ID;
SELECT T2.Location, T3.Aircraft FROM match AS T1 JOIN aircraft AS T3 ON T1.Winning_Aircraft = T3.Aircraft_ID JOIN match AS T2 ON T1.Round = T2.Round;
SELECT T1.Aircraft  FROM aircraft AS T1  JOIN match AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft  GROUP BY T2.Winning_Aircraft  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T1.Aircraft  FROM aircraft AS T1  JOIN match AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft  GROUP BY T2.Winning_Aircraft  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT A.Aircraft, COUNT(M.Winning_Aircraft) AS Times_Won FROM aircraft A  JOIN match M ON A.Aircraft_ID = M.Winning_Aircraft GROUP BY A.Aircraft;
SELECT Aircraft, COUNT(*) AS Times_Won FROM match JOIN aircraft ON match.Winning_Aircraft = aircraft.Aircraft_ID GROUP BY Aircraft;
SELECT Name FROM pilot ORDER BY Age DESC;
SELECT Name FROM pilot ORDER BY Age DESC;
SELECT A.Aircraft  FROM aircraft A  JOIN match M ON A.Aircraft_ID = M.Winning_Aircraft  GROUP BY A.Aircraft  HAVING COUNT(M.Round) >= 2;
SELECT T1.Aircraft  FROM aircraft AS T1  JOIN match AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft  GROUP BY T2.Winning_Aircraft  HAVING COUNT(*) >= 2;
SELECT Aircraft  FROM aircraft  WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM match)
SELECT Aircraft  FROM aircraft  WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM match)
SELECT T3.Aircraft  FROM airport_aircraft AS T1  JOIN aircraft AS T3 ON T1.Aircraft_ID = T3.Aircraft_ID  JOIN airport AS T2 ON T1.Airport_ID = T2.Airport_ID  WHERE T2.Airport_Name = 'London Heathrow'  INTERSECT  SELECT T3.Aircraft  FROM airport_aircraft AS T1  JOIN aircraft AS T3 ON T1.Aircraft_ID = T3.Aircraft_ID  JOIN airport AS T2 ON T1.Airport_ID = T2.Airport_ID  WHERE T2.Airport_Name = 'London Gatwick'
SELECT T3.Aircraft  FROM airport_aircraft AS T1  JOIN airport AS T2 ON T1.Airport_ID = T2.Airport_ID  JOIN aircraft AS T3 ON T1.Aircraft_ID = T3.Aircraft_ID  WHERE T2.Airport_Name = 'London Heathrow'  INTERSECT  SELECT T3.Aircraft  FROM airport_aircraft AS T1  JOIN airport AS T2 ON T1.Airport_ID = T2.Airport_ID  JOIN aircraft AS T3 ON T1.Aircraft_ID = T3.Aircraft_ID  WHERE T2.Airport_Name = 'Gatwick'
SELECT * FROM airport  WHERE International_Passengers = (SELECT MAX(International_Passengers) FROM airport);
SELECT * FROM airport WHERE International_Passengers = (SELECT MAX(International_Passengers) FROM airport)
SELECT p.Name, p.Age  FROM pilot p JOIN match m ON p.Pilot_Id = m.Winning_Pilot  WHERE p.Age < 30  GROUP BY p.Pilot_Id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT p.Name, p.Age  FROM pilot p JOIN match m ON p.Pilot_Id = m.Winning_Pilot WHERE p.Age < 30 GROUP BY p.Pilot_Id, p.Name, p.Age ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.Name, T1.Age  FROM pilot AS T1  JOIN match AS T2 ON T1.Pilot_Id = T2.Winning_Pilot  WHERE T1.Age = (SELECT MIN(Age) FROM pilot WHERE Pilot_Id IN (SELECT Winning_Pilot FROM match))
SELECT T1.Name, T1.Age  FROM pilot AS T1  JOIN match AS T2 ON T1.Pilot_Id = T2.Winning_Pilot  WHERE T1.Age = (SELECT MIN(Age) FROM pilot WHERE Pilot_Id IN (SELECT Winning_Pilot FROM match))
SELECT p.Name  FROM pilot p  WHERE NOT EXISTS (     SELECT *      FROM match m      WHERE m.Winning_Pilot = p.Pilot_Id AND m.Country = 'Australia' );
SELECT p.Name  FROM pilot p  WHERE NOT EXISTS (     SELECT *      FROM match m      WHERE m.Winning_Pilot = p.Pilot_Id AND m.Country = 'Australia' );
SELECT Properties.property_id, COUNT(Residents.resident_id) AS Resident_Count FROM Properties LEFT JOIN Residents ON Properties.property_id = Residents.property_id GROUP BY Properties.property_id;
SELECT DISTINCT T2.service_type_code  FROM Organizations AS T1  JOIN Services AS T2 ON T1.organization_id = T2.organization_id  WHERE T1.organization_details = 'Denesik and Sons Party';
SELECT R.resident_id, R.other_details, COUNT(RS.service_id) AS Service_Count FROM Residents AS R JOIN Residents_Services AS RS ON R.resident_id = RS.resident_id GROUP BY R.resident_id, R.other_details ORDER BY Service_Count DESC;
SELECT S.service_id, S.service_details, COUNT(*) AS Number_of_Provision  FROM Services S  JOIN Residents_Services RS ON S.service_id = RS.service_id  GROUP BY S.service_id, S.service_details  ORDER BY Number_of_Provision DESC  LIMIT 1;
SELECT T1.thing_id, T1.Type_of_Thing_Code, T2.organization_details  FROM Things AS T1  JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id;
SELECT c.customer_id, c.customer_details FROM Customers c JOIN Customer_Events ce ON c.customer_id = ce.customer_id GROUP BY c.customer_id, c.customer_details HAVING COUNT(ce.Customer_Event_ID) >= 3;
SELECT Customers.customer_id, Customers.customer_details, Customer_Events.date_moved_in  FROM Customers  JOIN Customer_Events ON Customers.customer_id = Customer_Events.customer_id;
SELECT CE.Customer_Event_ID, CE.property_id  FROM Customer_Events CE JOIN Customer_Event_Notes CEN ON CE.Customer_Event_ID = CEN.Customer_Event_ID GROUP BY CE.Customer_Event_ID, CE.property_id HAVING COUNT(CEN.Customer_Event_Note_ID) BETWEEN 1 AND 3;
SELECT DISTINCT T1.thing_id, T1.Type_of_Thing_Code  FROM Things AS T1  JOIN Timed_Status_of_Things AS T2 ON T1.thing_id = T2.thing_id  WHERE T2.Status_of_Thing_Code = 'Close' OR T2.Date_and_Date < '2017-06-19 02:59:21';
SELECT COUNT(DISTINCT T2.Location_Code)  FROM Things AS T1  JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id = T2.thing_id  WHERE T1.service_details = 'Unsatisfied';
SELECT COUNT(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things;
SELECT organization_id FROM Organizations WHERE organization_id NOT IN (SELECT parent_organization_id FROM Organizations);
SELECT MAX(date_moved_in) AS Last_Move_In_Date FROM Residents;
SELECT resident_id, other_details  FROM Residents  WHERE other_details LIKE '%Miss%';
SELECT Customer_Event_ID, date_moved_in, property_id  FROM Customer_Events;
SELECT COUNT(*)  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Events)
SELECT DISTINCT date_moved_in FROM Residents;
SELECT COUNT(*) FROM school
SELECT COUNT(*) FROM school
SELECT Location FROM school ORDER BY Enrollment ASC;
SELECT Location FROM school ORDER BY Enrollment ASC;
SELECT Location  FROM school  ORDER BY Founded DESC;
SELECT Location  FROM school  ORDER BY Founded DESC;
SELECT Enrollment FROM school WHERE Denomination != 'Catholic'
SELECT Enrollment FROM school WHERE Denomination <> 'Catholic';
SELECT AVG(Enrollment) FROM school;
SELECT AVG(Enrollment) FROM school;
SELECT DISTINCT Team FROM player ORDER BY Team ASC;
SELECT p.Player, t.Team  FROM player p JOIN school_details t ON p.School_ID = t.School_ID ORDER BY t.Team ASC;
SELECT COUNT(DISTINCT Position) FROM player;
SELECT COUNT(DISTINCT Position) FROM player;
SELECT T.Player, T.Team  FROM player AS T  WHERE T.Age = (SELECT MAX(Age) FROM player);
Error: 第 4876 个样本有 2 个SQL。
SELECT T.Player, T.Team  FROM (     SELECT Player, Team, Age,             ROW_NUMBER() OVER (ORDER BY Age DESC) as row_num     FROM player ) AS T WHERE T.row_num <= 5;
Error: 第 4878 个样本有 2 个SQL。
SELECT player.Player, player.Team, school.Location  FROM player  JOIN school ON player.School_ID = school.School_ID;
SELECT T1.Team, T2.Location  FROM player AS T1  JOIN school AS T2  ON T1.School_ID = T2.School_ID;
SELECT T1.Location  FROM school AS T1  JOIN player AS T2  ON T1.School_ID = T2.School_ID  GROUP BY T1.School_ID  HAVING COUNT(T2.Player_ID) > 1;
SELECT T1.Location  FROM school AS T1  JOIN player AS T2  ON T1.School_ID = T2.School_ID  GROUP BY T1.School_ID  HAVING COUNT(T2.Player_ID) > 1;
SELECT T1.Denomination  FROM school AS T1  JOIN player AS T2  ON T1.School_ID = T2.School_ID  GROUP BY T1.Denomination  ORDER BY COUNT(T2.Player_ID) DESC  LIMIT 1;
SELECT T1.Denomination  FROM school AS T1  JOIN player AS T2  ON T1.School_ID = T2.School_ID  GROUP BY T1.Denomination  ORDER BY COUNT(T2.Player_ID) DESC  LIMIT 1;
SELECT T1.Location, T2.Nickname  FROM school AS T1  JOIN school_details AS T2 ON T1.School_ID = T2.School_ID;
SELECT T1.Location, T2.Nickname  FROM school AS T1  JOIN school_details AS T2  ON T1.School_ID = T2.School_ID;
SELECT Denomination, COUNT(School_ID) AS Num_Schools FROM school GROUP BY Denomination;
SELECT Denomination, COUNT(School_ID)  FROM school  GROUP BY Denomination;
SELECT Denomination, COUNT(School_ID) as Num_Schools FROM school GROUP BY Denomination ORDER BY Num_Schools DESC;
SELECT Denomination, COUNT(School_ID) as School_Count FROM school GROUP BY Denomination ORDER BY School_Count DESC;
SELECT T1.School_Colors  FROM school AS T1  JOIN school_details AS T2 ON T1.School_ID = T2.School_ID  WHERE T1.Enrollment = (SELECT MAX(Enrollment) FROM school)
SELECT School_Colors FROM school WHERE Enrollment = (SELECT MAX(Enrollment) FROM school)
SELECT Location  FROM school  WHERE School_ID NOT IN (SELECT School_ID FROM player)
SELECT Location  FROM school  WHERE School_ID NOT IN (SELECT School_ID FROM player)
SELECT Denomination  FROM school  WHERE Founded < 1890  INTERSECT  SELECT Denomination  FROM school  WHERE Founded > 1900;
SELECT Denomination  FROM school  WHERE Founded < 1890  INTERSECT  SELECT Denomination  FROM school  WHERE Founded > 1900;
SELECT T1.Nickname FROM school_details AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Division != 'Division 1'
SELECT T1.Nickname FROM school_details AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Division != '1'
SELECT Denomination  FROM school  GROUP BY Denomination  HAVING COUNT(*) > 1;
SELECT Denomination, COUNT(*)  FROM school  GROUP BY Denomination  HAVING COUNT(*) > 1;
SELECT DISTINCT District_name  FROM district  ORDER BY City_Area DESC;
SELECT DISTINCT District_name  FROM district  ORDER BY City_Area DESC;
SELECT max_page_size  FROM product  GROUP BY max_page_size  HAVING COUNT(product_id) > 3;
SELECT p.max_page_size FROM product p JOIN store_product sp ON p.product_id = sp.product_id GROUP BY sp.Store_ID, p.max_page_size HAVING COUNT(sp.Product_ID) > 3 ORDER BY p.max_page_size DESC LIMIT 1;
SELECT District_name, City_Population  FROM district  WHERE City_Population BETWEEN 200000 AND 2000000;
SELECT District_name, City_Population  FROM district  WHERE City_Population BETWEEN 200000 AND 2000000;
SELECT District_name  FROM district  WHERE City_Area > 10 OR City_Population > 100000;
SELECT District_name FROM district WHERE City_Area > 10 OR City_Population > 100000;
SELECT District_name FROM district WHERE City_Population = (SELECT MAX(City_Population) FROM district)
SELECT District_name  FROM district  ORDER BY City_Population DESC  LIMIT 1;
SELECT District_name FROM district ORDER BY City_Area ASC LIMIT 1;
SELECT District_name FROM district WHERE City_Area = (SELECT MIN(City_Area) FROM district)
SELECT SUM(City_Population)  FROM (     SELECT District_ID     FROM district     ORDER BY City_Area DESC     LIMIT 3 ) as top3districts JOIN district ON top3districts.District_ID = district.District_ID;
SELECT SUM(City_Population)  FROM district  ORDER BY City_Area DESC  LIMIT 3;
SELECT Type, COUNT(*)  FROM store  GROUP BY Type;
SELECT Type, COUNT(*)  FROM store  GROUP BY Type;
SELECT s.Store_Name  FROM store s JOIN store_district sd ON s.Store_ID = sd.Store_ID JOIN district d ON sd.District_ID = d.District_ID WHERE d.District_name = 'Khanewal';
SELECT s.Store_Name  FROM store s JOIN store_district sd ON s.Store_ID = sd.Store_ID JOIN district d ON sd.District_ID = d.District_ID WHERE d.District_name = 'Khanewal';
SELECT s.Store_Name  FROM store s JOIN store_district sd ON s.Store_ID = sd.Store_ID JOIN district d ON sd.District_ID = d.District_ID WHERE d.City_Population = (SELECT MAX(City_Population) FROM district)
SELECT s.Store_Name FROM store s JOIN store_district sd ON s.Store_ID = sd.Store_ID JOIN district d ON sd.District_ID = d.District_ID WHERE d.City_Population = (SELECT MAX(City_Population) FROM district)
Error: 第 4921 个样本有 2 个SQL。
SELECT T2.Headquartered_City FROM store AS T1 JOIN district AS T2 ON T1.Area_size = T2.City_Area WHERE T1.Store_Name = 'Blackville'
SELECT d.District_name, COUNT(s.Store_ID) as Number_of_Stores FROM store_district sd JOIN district d ON sd.District_ID = d.District_ID GROUP BY d.District_name;
SELECT District_name, COUNT(store.Store_ID)  FROM store  JOIN district ON store.District_ID = district.District_ID  GROUP BY District_name;
SELECT D.District_name FROM district D JOIN store_district SD ON D.District_ID = SD.District_ID GROUP BY D.District_name ORDER BY COUNT(SD.Store_ID) DESC LIMIT 1;
SELECT d.District_name, d.Headquartered_City  FROM district d JOIN store s ON d.District_ID = s.Store_ID WHERE s.Type = 'flagship' GROUP BY d.Headquartered_City ORDER BY COUNT(s.Store_ID) DESC LIMIT 1;
SELECT AVG(pages_per_minute_color) FROM product;
SELECT AVG(pages_per_minute_color) FROM product;
SELECT p.product FROM product p JOIN store_product sp ON p.product_id = sp.product_id JOIN store s ON sp.store_id = s.Store_ID WHERE s.Store_Name = 'Miramichi';
SELECT p.product  FROM product p JOIN store_product sp ON p.product_id = sp.product_id JOIN store s ON sp.store_id = s.Store_ID WHERE s.Store_Name = 'Miramichi';
SELECT * FROM product WHERE max_page_size = 'A4' AND pages_per_minute_color < 5;
SELECT product  FROM product  WHERE max_page_size = 'A4'  AND pages_per_minute_color < 5;
SELECT * FROM product WHERE max_page_size = 'A4' OR pages_per_minute_color < 5;
SELECT product  FROM product  WHERE max_page_size = 'A4' OR pages_per_minute_color < 5;
SELECT * FROM product WHERE product LIKE '%Scanner%';
SELECT * FROM product WHERE product LIKE '%Scanner%';
SELECT MAX(max_page_size) FROM product;
SELECT max_page_size, COUNT(*) as count FROM product GROUP BY max_page_size ORDER BY count DESC LIMIT 1;
SELECT p.product  FROM product p  WHERE p.max_page_size != (     SELECT max_page_size      FROM product      GROUP BY max_page_size      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT p.product  FROM product p  WHERE p.max_page_size != (     SELECT max_page_size      FROM product      GROUP BY max_page_size      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT SUM(City_Population)  FROM district  WHERE City_Area > (SELECT AVG(City_Area) FROM district);
SELECT SUM(City_Population)  FROM district  WHERE City_Area > (SELECT AVG(City_Area) FROM district);
SELECT D.District_name  FROM district D  WHERE EXISTS (     SELECT 1      FROM store S1      WHERE S1.Store_ID IN (         SELECT SD.Store_ID          FROM store_district SD          WHERE SD.District_ID = D.District_ID     ) AND S1.Type = 'city mall' ) AND EXISTS (     SELECT 1      FROM store S2      WHERE S2.Store_ID IN (         SELECT SD.Store_ID          FROM store_district SD          WHERE SD.District_ID = D.District_ID     ) AND S2.Type = 'village store' ) GROUP BY D.District_name;
SELECT D.District_name  FROM district AS D  JOIN store_district AS SD ON D.District_ID = SD.District_ID  JOIN store AS S ON SD.Store_ID = S.Store_ID  WHERE S.Type = 'mall'  INTERSECT  SELECT D.District_name  FROM district AS D  JOIN store_district AS SD ON D.District_ID = SD.District_ID  JOIN store AS S ON SD.Store_ID = S.Store_ID  WHERE S.Type = 'village'
SELECT SUM(enr) FROM College;
SELECT SUM(enr) FROM College;
SELECT AVG(enr) FROM College;
SELECT AVG(enr) FROM College;
SELECT COUNT(*) FROM College;
SELECT COUNT(DISTINCT cName) FROM College;
SELECT COUNT(*)  FROM Player  WHERE HS > 1000;
SELECT COUNT(DISTINCT pID)  FROM Player  WHERE HS > 1000;
SELECT COUNT(*)  FROM College  WHERE enr > 15000;
SELECT COUNT(*)  FROM College  WHERE enr > 15000;
SELECT AVG(Training_Hours)  FROM Player;
SELECT AVG(hoursTrained)  FROM Player;
SELECT pName, HS  FROM Player  WHERE HS < 1500;
SELECT pName, HS  FROM Player  WHERE HS < 1500;
SELECT COUNT(DISTINCT cName)  FROM Tryout;
SELECT COUNT(DISTINCT cName)  FROM Tryout;
SELECT DISTINCT pPos FROM Tryout;
SELECT DISTINCT pPos FROM Tryout;
SELECT COUNT(*)  FROM Tryout  WHERE decision = 'accepted';
SELECT COUNT(*)  FROM Tryout  WHERE decision = 'yes';
SELECT COUNT(*)  FROM Tryout  WHERE pPos = 'goalie';
SELECT COUNT(*)  FROM Tryout  WHERE pPos = 'goalie';
SELECT MAX(HS) AS Max_Hours, AVG(HS) AS Average_Hours, MIN(HS) AS Min_Hours  FROM Player;
SELECT AVG(trainingHours) AS Average_Training_Hours,        MAX(trainingHours) AS Maximum_Training_Hours,        MIN(trainingHours) AS Minimum_Training_Hours FROM Player;
SELECT AVG(enr)  FROM College  WHERE state = 'FL';
SELECT AVG(enr)  FROM College  WHERE state = 'Florida';
Error: 第 4971 个样本有 2 个SQL。
SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500;
SELECT pName FROM Player WHERE pName LIKE '%a%';
SELECT pName FROM Player WHERE pName LIKE '%a%';
SELECT cName, enr  FROM College  WHERE enr > 10000 AND state = 'LA';
SELECT cName, enr  FROM College  WHERE enr > 10000 AND state = 'Louisiana';
SELECT * FROM College ORDER BY enr ASC;
SELECT * FROM College ORDER BY enr ASC;
SELECT cName FROM College WHERE enr > 18000 ORDER BY cName;
SELECT cName FROM College WHERE enr > 18000 ORDER BY cName ASC;
SELECT p.pName  FROM Player p  WHERE p.yCard = 'yes'  ORDER BY p.HS DESC;
SELECT pName FROM Player WHERE yCard = 'card' ORDER BY HS DESC;
SELECT DISTINCT cName  FROM Tryout  ORDER BY cName ASC;
SELECT DISTINCT cName  FROM Tryout  ORDER BY cName ASC;
SELECT pPos, COUNT(*) as num  FROM Tryout  GROUP BY pPos  ORDER BY num DESC  LIMIT 1;
SELECT pPos, COUNT(*) as count  FROM Tryout  GROUP BY pPos  ORDER BY count DESC  LIMIT 1;
SELECT cName, COUNT(pID) as num_students FROM Tryout GROUP BY cName ORDER BY num_students DESC;
SELECT cName, COUNT(pID) as num_participants FROM Tryout GROUP BY cName ORDER BY num_participants DESC;
Error: 第 4989 个样本有 2 个SQL。
SELECT pPos, MIN(HS)  FROM Player  JOIN Tryout ON Player.pID = Tryout.pID  GROUP BY pPos;
SELECT cName  FROM College  ORDER BY enr DESC  LIMIT 3;
SELECT cName FROM College ORDER BY enr DESC LIMIT 3;
Error: 第 4993 个样本有 2 个SQL。
Error: 第 4994 个样本有 2 个SQL。
SELECT DISTINCT state  FROM College  WHERE cName IN (SELECT cName FROM Tryout)
SELECT DISTINCT state FROM College WHERE cName IN (SELECT cName FROM Tryout)
SELECT DISTINCT T1.state  FROM College AS T1  JOIN Tryout AS T2 ON T1.cName = T2.cName  WHERE T2.decision = 'yes';
SELECT DISTINCT T1.state  FROM College AS T1  JOIN Tryout AS T2 ON T1.cName = T2.cName  WHERE T2.decision = 'yes';
SELECT T2.pName, T1.cName  FROM Tryout AS T1  JOIN Player AS T2 ON T1.pID = T2.pID  WHERE T1.decision = 'yes';
SELECT Player.pName, College.cName  FROM Player  JOIN Tryout ON Player.pID = Tryout.pID  JOIN College ON Tryout.cName = College.cName  WHERE Tryout.decision = 'yes';
SELECT p.pName  FROM Player p  JOIN Tryout t ON p.pID = t.pID  ORDER BY p.pName;
SELECT pName FROM Player WHERE pID IN (SELECT pID FROM Tryout) ORDER BY pName ASC;
SELECT P.pName, P.HS  FROM Player AS P JOIN Tryout AS T ON P.pID = T.pID WHERE T.decision = 'yes';
SELECT P.pName, P.HS  FROM Player AS P  JOIN Tryout AS T ON P.pID = T.pID  WHERE T.decision = 'yes';
SELECT DISTINCT T1.state  FROM College AS T1  JOIN Tryout AS T2 ON T1.cName = T2.cName  WHERE T2.pPos = 'striker';
SELECT T1.state  FROM College AS T1  JOIN Tryout AS T2 ON T1.cName = T2.cName  WHERE T2.pPos = 'striker';
SELECT T2.pName FROM Tryout AS T1 JOIN Player AS T2 ON T1.pID = T2.pID WHERE T1.pPos = 'striker' AND T1.decision = 'yes'
SELECT Player.pName  FROM Player  JOIN Tryout ON Player.pID = Tryout.pID  WHERE Tryout.pPos = 'striker' AND Tryout.decision = 'yes';
SELECT T1.state  FROM College AS T1  JOIN Tryout AS T2 ON T1.cName = T2.cName  JOIN Player AS T3 ON T2.pID = T3.pID  WHERE T3.pName = 'Charles';
SELECT T1.state  FROM College AS T1  JOIN Player AS T2 ON T1.cName = T2.HS  WHERE T2.pName = 'Charles';
SELECT AVG(HS) AS avg_hours, MAX(HS) AS max_hours  FROM Player  WHERE pID IN (SELECT pID FROM Tryout WHERE decision = 'yes');
SELECT AVG(T2.HS) AS average_hours, MAX(T2.HS) AS max_hours  FROM Tryout AS T1  JOIN Player AS T2 ON T1.pID = T2.pID  WHERE T1.decision = 'yes';
SELECT AVG(T2.HS)  FROM Tryout AS T1  JOIN Player AS T2  ON T1.pID = T2.pID  WHERE T1.decision = 'no'
SELECT AVG(T2.HS)  FROM Tryout AS T1  JOIN Player AS T2 ON T1.pID = T2.pID  WHERE T1.decision = 'no'
SELECT pPos, MAX(HS)  FROM Player  WHERE HS > 1000  GROUP BY pPos;
SELECT pPos, MAX(HS)  FROM Player  WHERE HS > 1000  GROUP BY pPos;
SELECT T1.cName  FROM Tryout AS T1  JOIN Player AS T2  ON T1.pID = T2.pID  WHERE T2.pName LIKE 'D%';
SELECT T1.pName, T3.cName FROM Player AS T1  JOIN Tryout AS T2 ON T1.pID = T2.pID  JOIN College AS T3 ON T2.cName = T3.cName WHERE T1.pName LIKE 'D%';
Error: 第 5019 个样本有 2 个SQL。
SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes' AND T2.pPos = 'goalie'
SELECT T2.pName FROM  (SELECT cName FROM College WHERE enr = (SELECT MAX(enr) FROM College)) AS T1  JOIN Tryout AS T2 ON T1.cName = T2.cName  JOIN Player AS T3 ON T2.pID = T3.pID;
Error: 第 5022 个样本有 2 个SQL。
SELECT DISTINCT T1.state, T1.enr  FROM College AS T1  JOIN Tryout AS T2 ON T1.cName = T2.cName  WHERE T2.decision = 'yes';
SELECT COUNT(DISTINCT T1.pID), T2.state FROM Player AS T1  JOIN Tryout AS T2 ON T1.pID = T2.pID  JOIN College AS T3 ON T2.cName = T3.cName WHERE T2.decision = 'yes' GROUP BY T2.state;
SELECT cName  FROM College  WHERE (state = 'LA' AND enr > 15000) OR (state = 'AZ' AND enr < 13000);
SELECT cName  FROM College  WHERE (state = 'LA' AND enr > 15000) OR (state = 'AZ' AND enr < 13000);
SELECT DISTINCT cName  FROM Tryout  WHERE pPos IN ('goalie', 'mid')  GROUP BY cName  HAVING COUNT(DISTINCT pPos) > 1;
Error: 第 5028 个样本有 3 个SQL。
SELECT DISTINCT T1.state  FROM College AS T1  JOIN Tryout AS T2 ON T1.cName = T2.cName  WHERE T2.pPos IN ('goalie', 'mid');
SELECT DISTINCT T1.state  FROM College AS T1  JOIN Tryout AS T2 ON T1.cName = T2.cName  WHERE T2.pPos = 'goalie' OR T2.pPos = 'mid'
Error: 第 5031 个样本有 2 个SQL。
SELECT COUNT(DISTINCT T1.cName)  FROM College AS T1  JOIN Tryout AS T2 ON T1.cName = T2.cName  WHERE T2.pPos IN ('goalie', 'mid-field')  GROUP BY T1.cName  HAVING COUNT(*) >= 2;
SELECT DISTINCT cName  FROM Tryout  WHERE pPos = 'mid' AND cName NOT IN (SELECT cName FROM Tryout WHERE pPos = 'goalie')
SELECT cName  FROM College  WHERE cName IN (SELECT cName FROM Tryout WHERE pPos = 'mid')  AND cName NOT IN (SELECT cName FROM Tryout WHERE pPos = 'goalie')
SELECT DISTINCT state  FROM College  WHERE cName IN (     SELECT cName      FROM Tryout      WHERE pPos = 'mid' )  AND cName NOT IN (     SELECT cName      FROM Tryout      WHERE pPos = 'goalie' );
SELECT DISTINCT T1.state  FROM College AS T1  JOIN Tryout AS T2 ON T1.cName = T2.cName  WHERE T2.pPos = 'mid'  AND T1.cName NOT IN (SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = 'goalie')
SELECT COUNT(DISTINCT T1.state)  FROM College AS T1  JOIN Tryout AS T2 ON T1.cName = T2.cName  WHERE T2.pPos = 'mid'  AND T1.cName NOT IN (SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = 'goalie')
SELECT COUNT(DISTINCT T1.state)  FROM College AS T1  JOIN Tryout AS T2 ON T1.cName = T2.cName  WHERE T2.pPos = 'mid' AND T2.pPos <> 'goalie'
SELECT DISTINCT state  FROM College  WHERE enr < (SELECT MAX(enr) FROM College)
Error: 第 5040 个样本有 4 个SQL。
SELECT cName  FROM College  WHERE enr > ANY (SELECT enr FROM College WHERE state = 'FL');
SELECT DISTINCT cName  FROM College  WHERE enr > ANY (     SELECT enr      FROM College      WHERE state = 'Florida' );
SELECT cName  FROM College  WHERE enr > ALL (     SELECT enr      FROM College      WHERE state = 'FL' );
SELECT cName FROM College WHERE enr > (SELECT MAX(enr) FROM College WHERE state = 'Florida');
SELECT SUM(enr)  FROM College  WHERE NOT EXISTS (     SELECT *      FROM Tryout t, Player p      WHERE t.pID = p.pID AND t.cName = College.cName AND pPos = 'goalie' );
SELECT SUM(enr)  FROM College  WHERE NOT EXISTS (     SELECT *      FROM Tryout      WHERE Tryout.pPos = 'goalie' AND College.cName = Tryout.cName );
SELECT COUNT(DISTINCT state)  FROM College  WHERE enr > (SELECT AVG(enr) FROM College)
SELECT COUNT(DISTINCT state)  FROM College  WHERE enr > (SELECT AVG(enr) FROM College)
SELECT COUNT(DISTINCT state)  FROM College  WHERE enr < (SELECT AVG(enr) FROM College)
SELECT COUNT(*)  FROM (   SELECT state    FROM College    WHERE enr < (SELECT AVG(enr) FROM College)   GROUP BY state ) AS result
SELECT COUNT(*) FROM device;
SELECT COUNT(*) FROM device;
SELECT DISTINCT Carrier  FROM device  ORDER BY Carrier ASC;
SELECT DISTINCT Carrier  FROM device  ORDER BY Carrier ASC;
SELECT DISTINCT d.Carrier  FROM device d  WHERE d.Software_Platform != 'Android';
SELECT DISTINCT Carrier  FROM device  WHERE Software_Platform != 'Android';
SELECT Shop_Name  FROM shop  ORDER BY Open_Year ASC;
SELECT Shop_Name  FROM shop  ORDER BY Open_Year ASC;
SELECT AVG(Quantity) FROM stock;
SELECT AVG(Quantity) FROM stock;
SELECT Shop_Name, Location FROM shop ORDER BY Shop_Name ASC;
SELECT Shop_Name, Location  FROM shop  ORDER BY Shop_Name ASC;
SELECT COUNT(DISTINCT Software_Platform) FROM device;
SELECT COUNT(DISTINCT Software_Platform) FROM device;
SELECT Open_Date, Open_Year FROM shop WHERE Shop_Name = 'Apple';
SELECT Open_Date, Open_Year  FROM shop  WHERE Shop_Name = 'Apple';
SELECT Shop_Name FROM shop WHERE Open_Year = (SELECT MAX(Open_Year) FROM shop);
SELECT Shop_Name FROM shop WHERE Open_Year = (SELECT MAX(Open_Year) FROM shop)
SELECT shop.Shop_Name, device.Carrier  FROM stock  JOIN shop ON stock.Shop_ID = shop.Shop_ID  JOIN device ON stock.Device_ID = device.Device_ID;
SELECT s.Shop_Name, d.Carrier  FROM stock st  JOIN shop s ON st.Shop_ID = s.Shop_ID  JOIN device d ON st.Device_ID = d.Device_ID;
SELECT s.Shop_Name FROM shop s JOIN stock st ON s.Shop_ID = st.Shop_ID GROUP BY s.Shop_Name HAVING COUNT(DISTINCT st.Device_ID) > 1;
SELECT s.Shop_Name FROM shop s JOIN stock st ON s.Shop_ID = st.Shop_ID GROUP BY s.Shop_ID HAVING COUNT(DISTINCT st.Device_ID) > 1;
SELECT s.Shop_Name FROM shop s JOIN stock st ON s.Shop_ID = st.Shop_ID GROUP BY s.Shop_Name ORDER BY COUNT(DISTINCT st.Device_ID) DESC LIMIT 1;
SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(DISTINCT T1.Device_ID) DESC LIMIT 1
SELECT s.Shop_Name  FROM stock st  JOIN shop s ON st.Shop_ID = s.Shop_ID  WHERE st.Quantity = (SELECT MAX(Quantity) FROM stock)
SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.Quantity) DESC LIMIT 1;
SELECT Software_Platform, COUNT(*) AS Number_of_Devices FROM device GROUP BY Software_Platform;
SELECT Software_Platform, COUNT(*) AS Total_Devices  FROM device  GROUP BY Software_Platform;
SELECT Software_Platform, COUNT(*)  FROM device  GROUP BY Software_Platform  ORDER BY COUNT(*) DESC;
SELECT Software_Platform, COUNT(*) AS Frequency  FROM device  GROUP BY Software_Platform  ORDER BY Frequency DESC;
SELECT Software_Platform, COUNT(*) AS Total  FROM device  GROUP BY Software_Platform  ORDER BY Total DESC  LIMIT 1;
SELECT Software_Platform, COUNT(*) AS Count  FROM device  GROUP BY Software_Platform  ORDER BY Count DESC  LIMIT 1;
SELECT Shop_Name  FROM shop  WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)
SELECT Shop_Name  FROM shop  WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)
SELECT Location  FROM shop  WHERE Open_Year > 2012  INTERSECT  SELECT Location  FROM shop  WHERE Open_Year < 2008;
SELECT Location  FROM shop  WHERE Open_Year > 2012  INTERSECT  SELECT Location  FROM shop  WHERE Open_Year < 2008
SELECT DISTINCT d.Carrier  FROM device d  LEFT JOIN stock s ON d.Device_ID = s.Device_ID  WHERE s.Device_ID IS NULL;
SELECT DISTINCT d.Carrier  FROM device d  WHERE d.Device_ID NOT IN (SELECT s.Device_ID FROM stock s)
SELECT T1.Carrier  FROM device AS T1  JOIN stock AS T2 ON T1.Device_ID = T2.Device_ID  GROUP BY T1.Carrier  HAVING COUNT(T2.Shop_ID) > 1;
SELECT T1.Carrier  FROM device AS T1  JOIN stock AS T2 ON T1.Device_ID = T2.Device_ID  GROUP BY T1.Carrier  HAVING COUNT(DISTINCT T2.Shop_ID) > 1
SELECT COUNT(*) FROM Bookings;
SELECT COUNT(*) FROM Bookings;
SELECT Order_Date FROM Bookings;
SELECT Order_Date FROM Bookings;
SELECT Planned_Delivery_Date, Actual_Delivery_Date FROM Bookings;
SELECT Planned_Delivery_Date, Actual_Delivery_Date FROM Bookings;
SELECT COUNT(*) FROM Customers;
SELECT COUNT(*) FROM Customers;
SELECT Customers.Customer_Phone, Customers.Customer_Email_Address  FROM Customers  WHERE Customers.Customer_Name = 'Harold';
SELECT Customers.Customer_Phone, Customers.Customer_Email_Address  FROM Customers  WHERE Customers.Customer_Name = 'Harold';
SELECT Store_Name FROM Drama_Workshop_Groups;
SELECT T2.Store_Name FROM Drama_Workshop_Groups AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID
SELECT MIN(Order_Quantity) AS Min_Order_Quantity,        AVG(Order_Quantity) AS Average_Order_Quantity,        MAX(Order_Quantity) AS Max_Order_Quantity FROM Invoice_Items;
SELECT MIN(Order_Quantity) as Min_Quantity, AVG(Order_Quantity) as Avg_Quantity, MAX(Order_Quantity) as Max_Quantity FROM Invoice_Items;
SELECT DISTINCT payment_method_code FROM Invoices;
SELECT DISTINCT payment_method_code FROM Invoices;
SELECT Marketing_Region_Descriptrion  FROM Marketing_Regions  WHERE Marketing_Region_Name = 'China';
SELECT Marketing_Region_Descriptrion  FROM Marketing_Regions  WHERE Marketing_Region_Name = 'China';
SELECT DISTINCT Product_Name  FROM Products  WHERE Product_Price > (SELECT AVG(Product_Price) FROM Products);
SELECT DISTINCT Product_Name  FROM Products  WHERE Product_Price > (SELECT AVG(Product_Price) FROM Products);
SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1;
SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1;
SELECT Product_Name  FROM Products  ORDER BY Product_Price ASC;
SELECT Product_Name  FROM Products  ORDER BY Product_Price ASC;
SELECT T1.Customer_Phone  FROM Performers AS T1  JOIN Customers AS T2 ON T1.Customer_Name = T2.Customer_Name  WHERE T2.Customer_Name = 'Ashley';
SELECT Customer_Phone FROM Performers WHERE Customer_Name = 'Ashley';
SELECT payment_method_code, COUNT(*) AS Number_of_Orders FROM Invoices GROUP BY payment_method_code;
SELECT payment_method_code, COUNT(*) as Number_of_Orders FROM Invoices GROUP BY payment_method_code;
SELECT payment_method_code, COUNT(*) as order_count  FROM Invoices  GROUP BY payment_method_code  ORDER BY order_count DESC  LIMIT 1;
SELECT payment_method_code  FROM Invoices  GROUP BY payment_method_code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Addresses.City_Town  FROM Addresses  JOIN Stores ON Addresses.Address_ID = Stores.Address_ID  WHERE Stores.Store_Name = 'FJA Filming';
SELECT Addresses.City_Town  FROM Addresses  JOIN Stores ON Addresses.Address_ID = Stores.Address_ID  WHERE Stores.Store_Name = 'FJA Filming';
SELECT DISTINCT A.State_County  FROM Addresses A  JOIN Stores S ON A.Address_ID = S.Address_ID  WHERE S.Marketing_Region_Code = 'CA';
SELECT DISTINCT T2.State_County  FROM Stores AS T1  JOIN Addresses AS T2 ON T1.Address_ID = T2.Address_ID  WHERE T1.Marketing_Region_Code = 'CA';
SELECT Marketing_Regions.Marketing_Region_Name  FROM Marketing_Regions  JOIN Stores ON Marketing_Regions.Marketing_Region_Code = Stores.Marketing_Region_Code  WHERE Stores.Store_Name = 'Rob Dinning';
SELECT Marketing_Regions.Marketing_Region_Name  FROM Marketing_Regions  JOIN Stores ON Marketing_Regions.Marketing_Region_Code = Stores.Marketing_Region_Code  WHERE Stores.Store_Name = 'Rob Dinning';
SELECT T2.Service_Type_Description FROM Services AS T1 JOIN Ref_Service_Types AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T1.Product_Price > 100;
SELECT T2.Service_Type_Description  FROM Services AS T1  JOIN Ref_Service_Types AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code  WHERE T1.Product_Price > 100;
SELECT Ref_Service_Types.Service_Type_Description, Ref_Service_Types.Service_Type_Code, COUNT(Services.Service_ID) AS Service_Count FROM Ref_Service_Types LEFT JOIN Services ON Ref_Service_Types.Service_Type_Code = Services.Service_Type_Code GROUP BY Ref_Service_Types.Service_Type_Code, Ref_Service_Types.Service_Type_Description;
SELECT      T2.Service_Type_Description,     T1.Service_Type_Code,     COUNT(T1.Service_Type_Code) AS Number_of_Services FROM      Services AS T1 INNER JOIN      Ref_Service_Types AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY      T1.Service_Type_Code, T2.Service_Type_Description
SELECT T1.Service_Type_Description, T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code JOIN Bookings_Services AS T3 ON T2.Service_ID = T3.Product_ID GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.Service_Type_Description, T1.Service_Type_Code FROM Ref_Service_Types AS T1  JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code  GROUP BY T1.Service_Type_Code  ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT dwg.Store_Phone, dwg.Store_Email_Address  FROM Drama_Workshop_Groups dwg  JOIN Services s ON dwg.Workshop_Group_ID = s.Workshop_Group_ID;
SELECT DISTINCT Drama_Workshop_Groups.Store_Phone, Drama_Workshop_Groups.Store_Email_Address  FROM Drama_Workshop_Groups  JOIN Bookings_Services ON Drama_Workshop_Groups.Workshop_Group_ID = Bookings_Services.Workshop_Group_ID;
SELECT DISTINCT dwg.Store_Name  FROM Drama_Workshop_Groups dwg JOIN Services s ON dwg.Workshop_Group_ID = s.Workshop_Group_ID  WHERE s.Product_Name = 'film';
SELECT DISTINCT dwg.Store_Name  FROM Drama_Workshop_Groups dwg JOIN Services s ON dwg.Workshop_Group_ID = s.Workshop_Group_ID  WHERE s.Product_Name = 'film';
SELECT Product_Name, AVG(Product_Price)  FROM Products  GROUP BY Product_Name;
SELECT Product_Name, AVG(Product_Price)  FROM Products  GROUP BY Product_Name;
Error: 第 5139 个样本有 2 个SQL。
Error: 第 5140 个样本有 3 个SQL。
SELECT SUM(Order_Quantity)  FROM Order_Items  JOIN Products ON Order_Items.Product_ID = Products.Product_ID  WHERE Products.Product_Name LIKE '%photo%';
SELECT SUM(Order_Quantity)  FROM Order_Items  JOIN Products ON Order_Items.Product_ID = Products.Product_ID  WHERE Products.Product_Name = 'photo';
SELECT od.Order_ID, od.Order_Date, od.Planned_Delivery_Date, od.Actual_Delivery_Date, od.Other_Order_Details, p.Product_Name, p.Product_Price FROM Customer_Orders od JOIN Order_Items oi ON od.Order_ID = oi.Order_ID JOIN Products p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price > 2000;
SELECT od.Order_ID, od.Order_Date, od.Planned_Delivery_Date, p.Product_Name, p.Product_Price, oi.Order_Quantity FROM Customer_Orders od JOIN Order_Items oi ON od.Order_ID = oi.Order_ID JOIN Products p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price > 2000;
SELECT T1.Actual_Delivery_Date  FROM Bookings AS T1  JOIN Order_Items AS T2  ON T1.Order_ID = T2.Order_ID  WHERE T2.Order_Quantity = 1;
SELECT T1.Actual_Delivery_Date  FROM Customer_Orders AS T1  JOIN Order_Items AS T2  ON T1.Order_ID = T2.Order_ID  WHERE T2.Order_Quantity = 1;
SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID WHERE T3.Product_Price > 1000;
SELECT Order_Date  FROM Customer_Orders  JOIN Order_Items ON Customer_Orders.Order_ID = Order_Items.Order_ID  JOIN Products ON Order_Items.Product_ID = Products.Product_ID  WHERE Products.Product_Price > 1000;
SELECT COUNT(DISTINCT Currency_Code) FROM Drama_Workshop_Groups;
SELECT COUNT(DISTINCT Currency_Code) FROM Drama_Workshop_Groups;
SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.City_Town = 'Feliciaberg';
SELECT T2.Store_Name  FROM Addresses AS T1  JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID  WHERE T1.City_Town = 'Feliciaberg';
SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = 'Alaska'
SELECT T1.Store_Email_Address  FROM Drama_Workshop_Groups AS T1  JOIN Addresses AS T2 ON T1.Address_ID = T2.Address_ID  WHERE T2.State_County = 'Alaska';
SELECT      A.City_Town,      COUNT(D.WG.Workshop_Group_ID) AS Num_of_Workshop_Groups FROM      Addresses A  JOIN      Drama_Workshop_Groups WG  ON      A.Address_ID = WG.Address_ID GROUP BY      A.City_Town;
SELECT T2.City_Town, COUNT(T1.Workshop_Group_ID)  FROM Drama_Workshop_Groups AS T1  JOIN Addresses AS T2 ON T1.Address_ID = T2.Address_ID  GROUP BY T2.City_Town;
SELECT T2.Marketing_Region_Code, COUNT(*) AS count  FROM Drama_Workshop_Groups AS T1  JOIN Marketing_Regions AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code  GROUP BY T2.Marketing_Region_Code  ORDER BY count DESC  LIMIT 1;
SELECT Marketing_Region_Code, COUNT(*) AS NumberOfGroups FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY NumberOfGroups DESC LIMIT 1;
SELECT DISTINCT A.City_Town FROM Addresses A JOIN Customers C ON A.Address_ID = C.Address_ID WHERE NOT EXISTS (     SELECT *     FROM Addresses A2     JOIN Performers P ON A2.Address_ID = P.Address_ID     WHERE A.City_Town = A2.City_Town )
Error: 第 5160 个样本有 2 个SQL。
SELECT Status_Code, COUNT(*) as frequency  FROM Bookings  GROUP BY Status_Code  ORDER BY frequency DESC  LIMIT 1;
SELECT Status_Code, COUNT(*) as total  FROM Bookings  GROUP BY Status_Code  ORDER BY total DESC  LIMIT 1;
SELECT T2.Store_Name  FROM Bookings AS T1  JOIN Drama_Workshop_Groups AS T2  ON T1.Workshop_Group_ID = T2.Workshop_Group_ID  WHERE T1.Status_Code = 'stop'
SELECT DISTINCT dwg.Store_Name  FROM Drama_Workshop_Groups dwg JOIN Bookings b ON dwg.Workshop_Group_ID = b.Workshop_Group_ID WHERE b.Status_Code = 'stop';
SELECT Client_Name  FROM Clients  WHERE Client_ID NOT IN (SELECT Client_ID FROM Bookings)
SELECT Client_Name  FROM Clients  WHERE Client_ID NOT IN (SELECT Client_ID FROM Bookings);
SELECT AVG(Order_Quantity)  FROM Invoice_Items  JOIN Invoices ON Invoice_Items.Invoice_ID = Invoices.Invoice_ID  WHERE Invoices.payment_method_code = 'MasterCard';
SELECT AVG(Order_Quantity)  FROM Invoices  JOIN Ref_Payment_Methods ON Invoices.payment_method_code = Ref_Payment_Methods.payment_method_code  WHERE Ref_Payment_Methods.payment_method_description = 'MasterCard';
SELECT Product_ID, COUNT(*) as frequency FROM Invoice_Items GROUP BY Product_ID ORDER BY frequency DESC LIMIT 1;
SELECT Product_ID, COUNT(*) as frequency  FROM Invoice_Items  GROUP BY Product_ID  ORDER BY frequency DESC  LIMIT 1;
SELECT T2.Service_Type_Description  FROM Services AS T1  JOIN Ref_Service_Types AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code  WHERE T1.Product_Name = 'photo'  INTERSECT  SELECT T2.Service_Type_Description  FROM Services AS T1  JOIN Ref_Service_Types AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code  WHERE T1.Product_Name = 'film'
SELECT T2.Service_Type_Description  FROM Services AS T1  JOIN Ref_Service_Types AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code  WHERE T1.Product_Name = 'photo'  INTERSECT  SELECT T2.Service_Type_Description  FROM Services AS T1  JOIN Ref_Service_Types AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code  WHERE T1.Product_Name = 'film'
SELECT COUNT(*) FROM Band;
SELECT COUNT(*) FROM Band;
SELECT DISTINCT Label FROM Albums;
SELECT DISTINCT Label FROM Albums;
SELECT Title FROM Albums WHERE Year = 2012;
SELECT * FROM Albums WHERE Year = 2012;
SELECT P.StagePosition  FROM Performance P  JOIN Band B ON P.Bandmate = B.Id  WHERE B.Firstname = 'Solveig';
SELECT DISTINCT P.StagePosition  FROM Performance P  JOIN Band B ON P.Bandmate = B.Id  WHERE B.Firstname = 'Solveig';
SELECT COUNT(*) FROM Songs;
SELECT COUNT(*) FROM Songs;
SELECT Songs.Title  FROM Songs  JOIN Performance ON Songs.SongId = Performance.SongId  JOIN Band ON Performance.Bandmate = Band.Id  WHERE Band.Lastname = 'Heilo';
SELECT Songs.Title  FROM Songs  JOIN Performance ON Songs.SongId = Performance.SongId  JOIN Band ON Performance.Bandmate = Band.Id  WHERE Band.Lastname = "Heilo";
SELECT COUNT(*)  FROM Performance  WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Flash');
SELECT COUNT(*)  FROM Performance  WHERE SongId IN (SELECT SongId FROM Songs WHERE Title = 'Flash');
SELECT s.Title  FROM Songs s  JOIN Performance p ON s.SongId = p.SongId  JOIN Band b ON p.Bandmate = b.Id  WHERE b.Firstname = 'Marianne';
SELECT s.Title  FROM Songs s  JOIN Performance p ON s.SongId = p.SongId  JOIN Band b ON p.Bandmate = b.Id  WHERE b.Firstname = 'Marianne';
SELECT B.firstname, B.lastname  FROM Band B  JOIN Performance P ON B.id = P.Bandmate  JOIN Songs S ON S.SongId = P.SongId  WHERE S.Title = 'Badlands';
SELECT B.firstname, B.lastname  FROM Performance P  JOIN Band B ON P.Bandmate = B.Id  JOIN Songs S ON P.SongId = S.SongId  WHERE S.Title = 'Badlands';
SELECT B.firstname, B.lastname  FROM Band B  JOIN Performance P ON B.Id = P.Bandmate  WHERE P.StagePosition = 'back' AND P.SongId = (     SELECT S.SongId      FROM Songs S      WHERE S.Title = 'Badlands' );
SELECT B.firstname, B.lastname  FROM Band B  JOIN Performance P ON B.Id = P.Bandmate  JOIN Songs S ON S.SongId = P.SongId  WHERE S.Title = 'Badlands' AND P.StagePosition = 'back';
SELECT COUNT(DISTINCT Label) FROM Albums;
SELECT DISTINCT Label FROM Albums;
SELECT Label  FROM Albums  GROUP BY Label  ORDER BY COUNT(AId) DESC  LIMIT 1;
SELECT Label  FROM Albums  GROUP BY Label  ORDER BY COUNT(*) DESC  LIMIT 1;
Error: 第 5197 个样本有 2 个SQL。
SELECT B.Lastname, COUNT(*) AS SongsCount  FROM Songs S  JOIN Performance P ON S.SongId = P.SongId  JOIN Band B ON P.Bandmate = B.Id  GROUP BY B.Lastname  ORDER BY SongsCount DESC  LIMIT 1;
SELECT B.Lastname  FROM Band B  JOIN (     SELECT Bandmate, COUNT(*) as cnt      FROM Performance      WHERE StagePosition = 'back'      GROUP BY Bandmate      ORDER BY cnt DESC      LIMIT 1 ) P ON B.Id = P.Bandmate;
SELECT B.Lastname, COUNT(*) AS cnt  FROM Performance P  JOIN Band B ON P.Bandmate = B.Id  WHERE P.StagePosition = 'back'  GROUP BY B.Lastname  ORDER BY cnt DESC  LIMIT 1;
SELECT Title FROM Songs WHERE Title LIKE '%the%';
SELECT Title FROM Songs WHERE Title LIKE '%the%';
SELECT DISTINCT Instrument FROM Instruments;
SELECT DISTINCT Instrument FROM Instruments;
SELECT i.Instrument  FROM Instruments i  JOIN Band b ON i.BandmateId = b.Id  JOIN Songs s ON i.SongId = s.SongId  WHERE b.Lastname = 'Heilo' AND s.Title = 'Le Pop';
SELECT i.Instrument FROM Instruments i  JOIN Band b ON i.BandmateId = b.Id  JOIN Songs s ON i.SongId = s.SongId  WHERE b.Lastname = "Heilo" AND s.Title = "Le Pop";
SELECT Instrument, COUNT(*) AS Count  FROM Instruments  GROUP BY Instrument  ORDER BY Count DESC  LIMIT 1;
SELECT Instrument, COUNT(*) AS Count  FROM Instruments  GROUP BY Instrument  ORDER BY Count DESC  LIMIT 1;
SELECT COUNT(*)  FROM Instruments  WHERE Instrument = 'drums';
SELECT COUNT(*)  FROM Songs s  JOIN Instruments i ON s.SongId = i.SongId  WHERE i.Instrument = 'drums';
SELECT i.Instrument  FROM Instruments i  JOIN Songs s ON i.SongId = s.SongId  WHERE s.Title = 'Le Pop';
SELECT i.Instrument  FROM Instruments i  JOIN Songs s ON i.SongId = s.SongId  WHERE s.Title = 'Le Pop';
SELECT COUNT(*)  FROM Instruments  WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Le Pop');
SELECT COUNT(DISTINCT Instrument)  FROM Instruments  JOIN Songs ON Instruments.SongId = Songs.SongId  WHERE Songs.Title = 'Le Pop';
SELECT COUNT(*)  FROM Instruments  WHERE BandmateId IN (SELECT Id FROM Band WHERE Lastname = 'Heilo');
SELECT COUNT(DISTINCT i.Instrument)  FROM Instruments i  JOIN Band b ON i.BandmateId = b.Id  WHERE b.Lastname = 'Heilo';
SELECT DISTINCT Instruments.Instrument FROM Instruments JOIN Band ON Instruments.BandmateId = Band.Id WHERE Band.Lastname = 'Heilo';
SELECT DISTINCT i.Instrument  FROM Instruments i  JOIN Band b ON i.BandmateId = b.Id  WHERE b.Lastname = 'Heilo';
SELECT s.Title, COUNT(v.SongId) as VocalCount FROM Songs s JOIN Vocals v ON s.SongId = v.SongId GROUP BY s.SongId, s.Title ORDER BY VocalCount DESC LIMIT 1;
SELECT s.Title, COUNT(v.Type) as VocalCount  FROM Songs s  JOIN Vocals v ON s.SongId = v.SongId  GROUP BY s.Title  ORDER BY VocalCount DESC  LIMIT 1;
SELECT Type, COUNT(*) AS Frequency  FROM Vocals  GROUP BY Type  ORDER BY Frequency DESC  LIMIT 1;
SELECT Type, COUNT(*) AS Frequency  FROM Vocals  GROUP BY Type  ORDER BY Frequency DESC  LIMIT 1;
SELECT V.Type, COUNT(*) AS cnt  FROM Vocals V  JOIN Band B ON V.Bandmate = B.Id  WHERE B.Lastname = 'Heilo'  GROUP BY V.Type  ORDER BY cnt DESC  LIMIT 1;
SELECT V.Type FROM Vocals V JOIN Band B ON V.Bandmate = B.Id WHERE B.Lastname = 'Heilo' GROUP BY V.Type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT V.Type  FROM Vocals V  JOIN Songs S ON V.SongId = S.SongId  WHERE S.Title = 'Le Pop';
SELECT V.Type  FROM Vocals V  JOIN Songs S ON V.SongId = S.SongId  WHERE S.Title = 'Le Pop';
SELECT COUNT(DISTINCT V.Type)  FROM Songs S  JOIN Vocals V ON S.SongId = V.SongId  WHERE S.Title = 'Demon Kitty Rag';
SELECT V.Type  FROM Vocals V  JOIN Songs S ON V.SongId = S.SongId  WHERE S.Title = 'Demon Kitty Rag';
SELECT COUNT(DISTINCT T1.SongId)  FROM Songs AS T1  JOIN Vocals AS T2  ON T1.SongId = T2.SongId  WHERE T2.Type = 'lead';
SELECT COUNT(DISTINCT T1.SongId) FROM Songs AS T1 JOIN Vocals AS T2 ON T1.SongId = T2.SongId WHERE T2.Type = 'lead';
SELECT V.Type  FROM Vocals V  JOIN Songs S ON V.SongId = S.SongId  JOIN Band B ON V.Bandmate = B.Id  WHERE B.Firstname = 'Solveig' AND S.Title = 'A Bar in Amsterdam';
SELECT V.Type  FROM Vocals V  JOIN Songs S ON V.SongId = S.SongId  JOIN Band B ON V.Bandmate = B.Id  WHERE B.Firstname = 'Solveig' AND S.Title = 'A Bar in Amsterdam';
SELECT s.Title  FROM Songs s  LEFT JOIN Vocals v ON s.SongId = v.SongId  WHERE v.Type != 'Lead' OR v.Type IS NULL;
Error: 第 5234 个样本有 2 个SQL。
SELECT DISTINCT Type FROM Vocals;
SELECT DISTINCT Type FROM Vocals;
SELECT Title FROM Albums WHERE Year = 2010;
SELECT * FROM Albums WHERE Year = 2010;
SELECT B.Firstname, B.Lastname  FROM Band B  JOIN Performance P ON B.Id = P.Bandmate  JOIN Songs S ON S.SongId = P.SongId  WHERE S.Title = 'Le Pop';
SELECT B.firstname, B.lastname  FROM Band B  JOIN Performance P ON B.Id = P.Bandmate  JOIN Songs S ON S.SongId = P.SongId  WHERE S.Title = 'Le Pop';
SELECT B.Lastname  FROM Band B  JOIN (     SELECT BandmateId, COUNT(*) as num_songs      FROM Instruments      GROUP BY BandmateId      ORDER BY num_songs DESC      LIMIT 1 ) M  ON B.Id = M.BandmateId;
SELECT B.Lastname  FROM Band B  JOIN (     SELECT Bandmate, COUNT(*) as num_songs      FROM Performance      GROUP BY Bandmate      ORDER BY num_songs DESC      LIMIT 1 ) P  ON B.Id = P.Bandmate;
SELECT i.Instrument  FROM Instruments i  JOIN Band b ON i.BandmateId = b.Id  JOIN Songs s ON i.SongId = s.SongId  WHERE b.Lastname = 'Heilo' AND s.Title = 'Badlands';
SELECT i.Instrument  FROM Instruments i  JOIN Band b ON i.BandmateId = b.Id  JOIN Songs s ON i.SongId = s.SongId  WHERE b.Lastname = 'Heilo' AND s.Title = 'Badlands';
SELECT COUNT(*)  FROM Instruments  WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Badlands');
SELECT COUNT(DISTINCT Instrument)  FROM Instruments  WHERE SongId = (SELECT SongId FROM Songs WHERE Title = 'Badlands');
SELECT V.Type  FROM Vocals V  JOIN Songs S ON V.SongId = S.SongId  WHERE S.Title = 'Badlands';
SELECT V.Type  FROM Vocals V  JOIN Songs S ON V.SongId = S.SongId  WHERE S.Title = 'Badlands';
SELECT COUNT(DISTINCT Type)  FROM Vocals  JOIN Songs ON Vocals.SongId = Songs.SongId  WHERE Songs.Title = 'Le Pop';
SELECT COUNT(DISTINCT Type)  FROM Vocals  JOIN Songs ON Vocals.SongId = Songs.SongId  WHERE Songs.Title = 'Le Pop';
SELECT COUNT(*)  FROM Songs s  JOIN Vocals v ON s.SongId = v.SongId  WHERE v.Type = 'shared';
SELECT COUNT(DISTINCT SongId)  FROM Vocals  WHERE Type = 'shared';
SELECT s.Title  FROM Songs s  LEFT JOIN Vocals v ON s.SongId = v.SongId  WHERE v.Type != 'back' OR v.Type IS NULL GROUP BY s.Title;
SELECT DISTINCT s.Title  FROM Songs s  LEFT JOIN Vocals v ON s.SongId = v.SongId  WHERE v.Type != 'back' OR v.Type IS NULL;
SELECT V.Type FROM Vocals V JOIN Band B ON V.Bandmate = B.Id WHERE B.Firstname = 'Solveig' GROUP BY V.Type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT V.Type FROM Vocals V JOIN Band B ON V.Bandmate = B.Id WHERE B.Firstname = 'Solveig' GROUP BY V.Type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT V.Type  FROM Vocals V  JOIN Band B ON V.Bandmate = B.Id  JOIN Songs S ON V.SongId = S.SongId  WHERE B.Lastname = 'Heilo' AND S.Title = 'Der Kapitan';
SELECT V.Type  FROM Vocals V  JOIN Songs S ON V.SongId = S.SongId  JOIN Band B ON V.Bandmate = B.Id  WHERE B.Lastname = 'Heilo' AND S.Title = 'Der Kapitan';
SELECT B.firstname FROM Band B JOIN (   SELECT Bandmate AS max_performer   FROM Performance   GROUP BY Bandmate   ORDER BY COUNT(*) DESC   LIMIT 1 ) P ON B.Id = P.max_performer
SELECT B.firstname  FROM Band B  JOIN Performance P ON B.id = P.Bandmate  GROUP BY B.firstname  ORDER BY COUNT(P.SongId) DESC  LIMIT 1;
SELECT V.Type, COUNT(*) AS cnt  FROM Vocals V  JOIN Band B ON V.Bandmate = B.Id  WHERE B.Firstname = 'Marianne'  GROUP BY V.Type  ORDER BY cnt DESC  LIMIT 1;
SELECT V.Type  FROM Vocals V  JOIN Band B ON V.Bandmate = B.Id  WHERE B.Firstname = 'Marianne'  GROUP BY V.Type  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT B.firstname, B.lastname  FROM Performance P  JOIN Band B ON P.Bandmate = B.Id  JOIN Songs S ON P.SongId = S.SongId  WHERE S.Title = 'Der Kapitan' AND P.StagePosition = 'back';
SELECT B.firstname, B.lastname  FROM Band B  JOIN Performance P ON B.Id = P.Bandmate  WHERE P.StagePosition = 'back' AND P.SongId = (     SELECT S.Id      FROM Songs S      WHERE S.Title = 'Der Kapitan' );
SELECT s.Title  FROM Songs s  LEFT JOIN Vocals v ON s.SongId = v.SongId  WHERE v.Type != 'back' OR v.Type IS NULL GROUP BY s.Title;
SELECT s.Title  FROM Songs s  LEFT JOIN Vocals v ON s.SongId = v.SongId  WHERE v.Type != 'back' OR v.Type IS NULL GROUP BY s.Title;
SELECT s.Title  FROM Songs s  JOIN Tracklists t ON s.SongId = t.SongId  JOIN Albums a ON t.AlbumId = a.AId  WHERE a.Title = 'A Kiss Before You Go: Live in Hamburg';
SELECT s.Title  FROM Songs s  JOIN Tracklists t ON s.SongId = t.SongId  JOIN Albums a ON t.AlbumId = a.AId  WHERE a.Title = 'A Kiss Before You Go: Live in Hamburg';
SELECT s.Title  FROM Songs s  JOIN Tracklists t ON s.SongId = t.SongId  JOIN Albums a ON t.AlbumId = a.AId  WHERE a.Label = 'Universal Music Group';
SELECT S.Title  FROM Songs S JOIN Tracklists T ON S.SongId = T.SongId JOIN Albums A ON T.AlbumId = A.AId WHERE A.Label = 'Universal Music Group'
SELECT COUNT(S.SongId)  FROM Songs S  JOIN Tracklists T ON S.SongId = T.SongId  JOIN Albums A ON T.AlbumId = A.AId  WHERE A.Type = 'Studio';
SELECT COUNT(DISTINCT T1.SongId)  FROM Songs AS T1  JOIN Tracklists AS T2 ON T1.SongId = T2.SongId  JOIN Albums AS T3 ON T2.AlbumId = T3.AId  WHERE T3.Type = 'studio';
SELECT Founder FROM Manufacturers WHERE Name = 'Sony';
Error: 第 5274 个样本有 2 个SQL。
SELECT Headquarter FROM Manufacturers WHERE Founder = 'James';
SELECT Headquarter  FROM Manufacturers  WHERE Founder = 'James';
SELECT Name, Headquarter  FROM Manufacturers  ORDER BY Revenue DESC;
SELECT Name, Headquarter FROM Manufacturers ORDER BY Revenue DESC;
SELECT AVG(Revenue) AS Average_Revenue, MAX(Revenue) AS Maximum_Revenue, SUM(Revenue) AS Total_Revenue FROM manufactory_1.Manufacturers;
SELECT AVG(Revenue) AS AverageRevenue, MAX(Revenue) AS MaximumRevenue, SUM(Revenue) AS TotalRevenue  FROM Manufacturers;
SELECT COUNT(*)  FROM Manufacturers  WHERE Founder = 'Andy';
SELECT COUNT(*)  FROM Manufacturers  WHERE Founder = 'Andy';
Error: 第 5283 个样本有 2 个SQL。
SELECT SUM(Revenue)  FROM Manufacturers  WHERE Headquarter = 'Austin';
SELECT DISTINCT Headquarter FROM Manufacturers;
SELECT DISTINCT Headquarter FROM Manufacturers;
SELECT COUNT(*)  FROM Manufacturers  WHERE Headquarter = 'Tokyo' OR Headquarter = 'Beijing';
SELECT COUNT(*)  FROM Manufacturers  WHERE Headquarter = 'Tokyo' OR Headquarter = 'Beijing';
SELECT Founder  FROM Manufacturers  WHERE Name LIKE 'S%';
SELECT Founder FROM Manufacturers WHERE Name LIKE 'S%';
SELECT Name  FROM Manufacturers  WHERE Revenue BETWEEN 100 AND 150;
SELECT Name FROM Manufacturers WHERE Revenue BETWEEN 100 AND 150;
SELECT SUM(Revenue)  FROM Manufacturers  WHERE Headquarter IN ('Tokyo', 'Taiwan');
SELECT SUM(Revenue)  FROM Manufacturers  WHERE Headquarter IN ('Tokyo', 'Taiwan');
Error: 第 5295 个样本有 2 个SQL。
SELECT P.Name  FROM Products P JOIN Manufacturers M ON P.Manufacturer = M.Code WHERE M.Name IN ('Creative Labs', 'Sony') GROUP BY P.Name HAVING COUNT(DISTINCT M.Name) = 2;
SELECT Name, Headquarter, Founder  FROM Manufacturers  WHERE Revenue = (SELECT MAX(Revenue) FROM Manufacturers);
SELECT Name, Headquarter, Founder  FROM Manufacturers  WHERE Revenue = (SELECT MAX(Revenue) FROM Manufacturers);
SELECT Name, Headquarter, Revenue  FROM Manufacturers  ORDER BY Revenue DESC;
SELECT Name, Headquarter, Revenue  FROM Manufacturers  ORDER BY Revenue DESC;
SELECT Name  FROM Manufacturers  WHERE Revenue > (SELECT AVG(Revenue) FROM Manufacturers);
SELECT Name  FROM Manufacturers  WHERE Revenue > (SELECT AVG(Revenue) FROM Manufacturers);
SELECT Name  FROM Manufacturers  WHERE Revenue < ALL (     SELECT Revenue      FROM Manufacturers      WHERE Headquarter = 'Austin' );
SELECT Name  FROM Manufacturers  WHERE Revenue < (SELECT MIN(Revenue) FROM Manufacturers WHERE Headquarter = 'Austin')
SELECT SUM(Revenue)  FROM Manufacturers  WHERE Revenue > (     SELECT MIN(Revenue)      FROM Manufacturers      WHERE Headquarter = 'Austin' );
SELECT SUM(Revenue)  FROM Manufacturers  WHERE Revenue > (     SELECT MIN(Revenue)      FROM Manufacturers      WHERE Headquarter = 'Austin' );
SELECT Founder, SUM(Revenue)  FROM Manufacturers  GROUP BY Founder;
SELECT SUM(Revenue)  FROM Manufacturers  WHERE Founder = 'founder';
SELECT M1.Name, M1.Revenue, M1.Headquarter FROM Manufacturers M1 WHERE M1.Revenue = (     SELECT MAX(M2.Revenue)     FROM Manufacturers M2     WHERE M1.Headquarter = M2.Headquarter );
SELECT M1.Name, M1.Revenue, M1.Headquarter FROM Manufacturers M1 LEFT JOIN Manufacturers M2 ON (M1.Headquarter = M2.Headquarter AND M1.Revenue < M2.Revenue) WHERE M2.Code IS NULL;
SELECT M.Name, SUM(P.Price) as TotalRevenue FROM manufactory_1.Manufacturers M JOIN manufactory_1.Products P ON M.Code = P.Manufacturer GROUP BY M.Name;
SELECT `Name`, SUM(`Revenue`) as Total_Revenue  FROM `Manufacturers`  GROUP BY `Name`;
SELECT M.Name, AVG(P.Price) as AveragePrice FROM Manufacturers M JOIN Products P ON M.Code = P.Manufacturer GROUP BY M.Name;
SELECT AVG(Price), Manufacturer  FROM Products  GROUP BY Manufacturer;
SELECT COUNT(DISTINCT T2.Name) AS NumProducts, T1.Headquarter  FROM Manufacturers AS T1  JOIN Products AS T2 ON T1.Code = T2.Manufacturer  GROUP BY T1.Headquarter;
SELECT M.Headquarter, COUNT(DISTINCT P.Name)  FROM Manufacturers M  JOIN Products P  ON M.Code = P.Manufacturer  GROUP BY M.Headquarter;
SELECT COUNT(*) FROM Products WHERE Manufacturer != (SELECT Code FROM Manufacturers WHERE Name = 'Sony');
SELECT COUNT(*) FROM Products WHERE Manufacturer NOT IN (SELECT Code FROM Manufacturers WHERE Name = 'Sony');
SELECT Name  FROM Manufacturers  WHERE Code NOT IN (SELECT Manufacturer FROM Products WHERE Name = 'DVD drive');
SELECT Name  FROM Manufacturers  WHERE Code NOT IN (SELECT Manufacturer FROM Products WHERE Name = 'DVD drives')
SELECT M.Name, COUNT(P.Code) as NumberOfProducts FROM Manufacturers M JOIN Products P ON M.Code = P.Manufacturer GROUP BY M.Name;
SELECT Manufacturers.Name, COUNT(Products.Code) AS NumberOfProducts FROM Manufacturers JOIN Products ON Manufacturers.Code = Products.Manufacturer GROUP BY Manufacturers.Name;
SELECT Name FROM Products;
SELECT Name FROM Products;
SELECT Name, Price  FROM Products;
SELECT Name, Price FROM Products;
SELECT Name  FROM Products  WHERE Price <= 200;
SELECT Name  FROM Products  WHERE Price <= 200;
SELECT * FROM Products WHERE Price BETWEEN 60 AND 120;
SELECT * FROM Products WHERE Price BETWEEN 60 AND 120;
SELECT AVG(Price) FROM Products;
SELECT AVG(Price)  FROM Products;
SELECT AVG(Price)  FROM Products  WHERE Manufacturer = 2;
SELECT AVG(Price)  FROM Products  WHERE Manufacturer = 2;
SELECT COUNT(*)  FROM Products  WHERE Price >= 180;
SELECT COUNT(*)  FROM Products  WHERE Price >= 180;
SELECT Name, Price  FROM Products  WHERE Price >= 180  ORDER BY Price DESC, Name ASC;
SELECT Name, Price  FROM Products  WHERE Price >= 180  ORDER BY Price DESC, Name ASC;
SELECT Products.*, Manufacturers.Name AS ManufacturerName, Manufacturers.Headquarter, Manufacturers.Founder, Manufacturers.Revenue  FROM Products  JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code;
SELECT Products.*, Manufacturers.Name AS ManufacturerName  FROM Products  JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code;
SELECT Manufacturer, AVG(Price)  FROM Products  GROUP BY Manufacturer;
SELECT Manufacturer, AVG(Price)  FROM Products  GROUP BY Manufacturer;
SELECT M.Name, AVG(P.Price)  FROM Manufacturers M  JOIN Products P ON M.Code = P.Manufacturer  GROUP BY M.Name;
SELECT AVG(Products.Price), Manufacturers.Name  FROM Products  JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code  GROUP BY Manufacturers.Name;
SELECT M.Name  FROM Manufacturers M JOIN Products P ON M.Code = P.Manufacturer GROUP BY M.Name HAVING AVG(P.Price) >= 150;
SELECT M.Name, AVG(P.Price)  FROM Manufacturers M  JOIN Products P ON M.Code = P.Manufacturer  GROUP BY M.Name  HAVING AVG(P.Price) >= 150;
SELECT Name, Price  FROM Products  ORDER BY Price  LIMIT 1;
SELECT Name, Price  FROM Products  ORDER BY Price  LIMIT 1;
SELECT M.Name AS Manufacturer_Name, P.Name AS Product_Name, MAX(P.Price) AS Max_Product_Price FROM Manufacturers M JOIN Products P ON M.Code = P.Manufacturer GROUP BY M.Name;
SELECT M.Name, P.Name, P.Price FROM Manufacturers M JOIN Products P ON M.Code = P.Manufacturer WHERE (M.Code, P.Price) IN (     SELECT Code, MAX(Price)     FROM Products     GROUP BY Manufacturer );
SELECT P1.Name, P1.Code, P1.Price, P1.Manufacturer FROM Products P1 WHERE P1.Price = (     SELECT MIN(P2.Price)     FROM Products P2     WHERE P1.Manufacturer = P2.Manufacturer );
SELECT p1.Name, p1.Code, p1.Price FROM Products p1 WHERE p1.Price = (     SELECT MIN(p2.Price)     FROM Products p2     WHERE p1.Manufacturer = p2.Manufacturer );
SELECT problem_log_id FROM Problem_Log ORDER BY log_entry_date DESC LIMIT 1;
SELECT problem_log_id  FROM Problem_Log  ORDER BY log_entry_date DESC  LIMIT 1;
SELECT problem_log_id, problem_id  FROM Problem_Log  ORDER BY log_entry_date  LIMIT 1;
SELECT MIN(problem_log_id) as oldest_log_id, problem_id  FROM Problem_Log;
SELECT problem_log_id, log_entry_date  FROM Problem_Log  WHERE problem_id = 10;
SELECT problem_log_id, log_entry_date  FROM Problem_Log  WHERE problem_id = 10;
SELECT problem_log_id, log_entry_description  FROM Problem_Log;
SELECT problem_log_id, log_entry_description  FROM Problem_Log;
SELECT DISTINCT Staff.staff_first_name, Staff.staff_last_name  FROM Staff  JOIN Problem_Log  ON Staff.staff_id = Problem_Log.assigned_to_staff_id  WHERE Problem_Log.problem_id = 1;
SELECT Staff.staff_first_name, Staff.staff_last_name  FROM Staff  JOIN Problem_Log  ON Staff.staff_id = Problem_Log.assigned_to_staff_id  WHERE Problem_Log.problem_id = 1;
SELECT pl.problem_id, pl.problem_log_id  FROM Problem_Log pl JOIN Staff s ON pl.assigned_to_staff_id = s.staff_id WHERE s.staff_first_name = 'Rylan' AND s.staff_last_name = 'Homenick';
SELECT pl.problem_id, pl.problem_log_id  FROM Problem_Log pl JOIN Staff s ON pl.assigned_to_staff_id = s.staff_id WHERE s.staff_first_name = 'Rylan' AND s.staff_last_name = 'Homenick';
SELECT COUNT(*)  FROM Problems  JOIN Product ON Problems.product_id = Product.product_id  WHERE Product.product_name = 'voluptatem';
SELECT COUNT(*)  FROM Problems  JOIN Product ON Problems.product_id = Product.product_id  WHERE Product.product_name = 'voluptatem';
SELECT COUNT(Problems.problem_id) AS NumberOfProblems, Product.product_name  FROM Problems  JOIN Product ON Problems.product_id = Product.product_id  GROUP BY Product.product_name  ORDER BY NumberOfProblems DESC  LIMIT 1;
SELECT COUNT(Problems.problem_id) AS NumberOfProblems, Product.product_name  FROM Problems  JOIN Product ON Problems.product_id = Product.product_id  GROUP BY Product.product_name  ORDER BY NumberOfProblems DESC  LIMIT 1;
SELECT Problems.problem_description  FROM Problems  JOIN Staff ON Problems.reported_by_staff_id = Staff.staff_id  WHERE Staff.staff_first_name = 'Christop';
SELECT Problems.problem_description  FROM Problems  JOIN Staff ON Problems.reported_by_staff_id = Staff.staff_id  WHERE Staff.staff_first_name = 'Christop';
SELECT p.problem_id  FROM Problems p JOIN Staff s ON p.reported_by_staff_id = s.staff_id WHERE s.staff_last_name = 'Bosco';
SELECT problem_id  FROM Problems  WHERE reported_by_staff_id IN (     SELECT staff_id      FROM Staff      WHERE staff_last_name = 'Bosco' );
SELECT problem_id FROM Problems WHERE date_problem_reported > '1978-06-26';
SELECT problem_id  FROM Problems  WHERE date_problem_reported > '1978-06-26';
SELECT problem_id FROM Problems WHERE date_problem_reported < '1978-06-26';
SELECT problem_id  FROM Problems  WHERE date_problem_reported < '1978-06-26';
SELECT COUNT(Problems.problem_id), Product.product_id  FROM Problems  JOIN Product  ON Problems.product_id = Product.product_id  GROUP BY Product.product_id;
SELECT COUNT(Problems.problem_id), Product.product_id  FROM Problems  JOIN Product  ON Problems.product_id = Product.product_id  GROUP BY Product.product_id;
SELECT COUNT(Problems.problem_id), Product.product_id  FROM Problems  JOIN Product ON Problems.product_id = Product.product_id  WHERE Problems.date_problem_reported > '1986-11-13'  GROUP BY Product.product_id;
SELECT Product.product_id, COUNT(Problems.problem_id) AS problem_count FROM Product JOIN Problems ON Product.product_id = Problems.product_id WHERE Problems.date_problem_reported > '1986-11-13' GROUP BY Product.product_id;
SELECT DISTINCT product_name  FROM Product  ORDER BY product_name ASC;
SELECT DISTINCT product_name  FROM Product  ORDER BY product_name ASC;
SELECT DISTINCT product_name  FROM Product  ORDER BY product_id;
SELECT DISTINCT product_name  FROM Product  ORDER BY product_id;
SELECT p.problem_id  FROM Problems p JOIN Staff s ON p.reported_by_staff_id = s.staff_id WHERE s.staff_first_name IN ('Dameon', 'Jolie') AND s.staff_last_name IN ('Frami', 'Weber');
SELECT problem_id  FROM Problems  WHERE reported_by_staff_id IN (     SELECT staff_id      FROM Staff      WHERE staff_first_name = 'Dameon' AND staff_last_name = 'Frami'      OR staff_first_name = 'Jolie' AND staff_last_name = 'Weber' );
SELECT p.product_id  FROM Problems pr  JOIN Product p ON pr.product_id = p.product_id  JOIN Staff s1 ON pr.reported_by_staff_id = s1.staff_id  JOIN Staff s2 ON pr.closure_authorised_by_staff_id = s2.staff_id  WHERE s1.staff_first_name = 'Christop' AND s1.staff_last_name = 'Berge'  AND s2.staff_first_name = 'Ashley' AND s2.staff_last_name = 'Medhurst';
SELECT P.product_id  FROM Problems AS PR  JOIN Product AS P ON PR.product_id = P.product_id  JOIN Staff AS S1 ON PR.reported_by_staff_id = S1.staff_id  JOIN Staff AS S2 ON PR.closure_authorised_by_staff_id = S2.staff_id  WHERE S1.staff_first_name = 'Christop' AND S1.staff_last_name = 'Berge'  AND S2.staff_first_name = 'Ashley' AND S2.staff_last_name = 'Medhurst';
SELECT T1.problem_id FROM Problems AS T1 JOIN Staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T1.date_problem_reported < (SELECT MIN(date_problem_reported) FROM Problems WHERE reported_by_staff_id = (SELECT staff_id FROM Staff WHERE staff_first_name = "Lysanne" AND staff_last_name = "Turcotte"))
SELECT p.problem_id  FROM Problems p WHERE p.date_problem_reported < ALL (     SELECT pr.date_problem_reported      FROM Problems pr      JOIN Staff s ON pr.reported_by_staff_id = s.staff_id      WHERE s.staff_first_name = 'Lysanne' AND s.staff_last_name = 'Turcotte' );
SELECT p1.problem_id  FROM Problems p1  JOIN Staff s ON s.staff_id = p1.reported_by_staff_id  WHERE p1.date_problem_reported > (     SELECT MIN(p2.date_problem_reported)      FROM Problems p2      JOIN Staff s2 ON s2.staff_id = p2.reported_by_staff_id      WHERE s2.staff_first_name = 'Rylan' AND s2.staff_last_name = 'Homenick' )
SELECT p1.problem_id  FROM Problems p1, Problems p2  JOIN Staff s ON s.staff_id = p2.reported_by_staff_id  WHERE s.staff_first_name = 'Rylan' AND s.staff_last_name = 'Homenick'  AND p1.date_problem_reported > p2.date_problem_reported;
SELECT p.product_name, COUNT(pr.problem_id) AS problem_count FROM Product p JOIN Problems pr ON p.product_id = pr.product_id GROUP BY p.product_name ORDER BY problem_count DESC LIMIT 3;
SELECT p.product_name, COUNT(*) AS problem_count  FROM Problems pr  JOIN Product p ON pr.product_id = p.product_id  GROUP BY p.product_name  ORDER BY problem_count DESC  LIMIT 3;
SELECT p.problem_id  FROM Problems p JOIN Product pr ON p.product_id = pr.product_id WHERE pr.product_name = 'voluptatem' AND YEAR(p.date_problem_reported) > 1995;
SELECT p.problem_id  FROM Problems p JOIN Product pr ON p.product_id = pr.product_id WHERE pr.product_name = 'voluptatem' AND YEAR(p.date_problem_reported) > 1995;
SELECT Staff.staff_first_name, Staff.staff_last_name  FROM Problems  JOIN Staff ON Problems.reported_by_staff_id = Staff.staff_id  JOIN Product ON Problems.product_id = Product.product_id  WHERE Product.product_name LIKE 'rem%'  AND Product.product_name NOT LIKE 'aut%' ;
SELECT s.staff_first_name, s.staff_last_name FROM Staff s JOIN Problems p ON s.staff_id = p.reported_by_staff_id JOIN Product pr ON pr.product_id = p.product_id WHERE pr.product_name LIKE 'rem%' AND pr.product_name NOT LIKE 'aut%' GROUP BY s.staff_first_name, s.staff_last_name;
SELECT p.product_name  FROM Product p JOIN Problems pr ON p.product_id = pr.product_id JOIN Staff s ON pr.reported_by_staff_id = s.staff_id WHERE s.staff_first_name IN ('Lacey', 'Kenton') AND s.staff_last_name IN ('Bosco', 'Champlin') GROUP BY p.product_id HAVING COUNT(DISTINCT s.staff_first_name) = 2;
SELECT p.product_name  FROM Product p  JOIN Problems pr ON p.product_id = pr.product_id  WHERE pr.reported_by_staff_id IN (     SELECT s.staff_id      FROM Staff s      WHERE s.staff_first_name = 'Lacey' AND s.staff_last_name = 'Bosco' ) AND pr.product_id IN (     SELECT p2.product_id      FROM Product p2      JOIN Problems pr2 ON p2.product_id = pr2.product_id      WHERE pr2.reported_by_staff_id IN (         SELECT s2.staff_id          FROM Staff s2          WHERE s2.staff_first_name = 'Kenton' AND s2.staff_last_name = 'Champlin'     ) ) GROUP BY p.product_name;
SELECT COUNT(*)  FROM (   SELECT Branch_ID    FROM branch    WHERE membership_amount > (     SELECT AVG(membership_amount)      FROM branch   ) ) as result;
SELECT COUNT(*)  FROM branch  WHERE membership_amount > (SELECT AVG(membership_amount) FROM branch);
SELECT Name, Address_road, City  FROM branch  ORDER BY Open_year;
SELECT Name, Address_road, City  FROM branch  ORDER BY Open_year;
SELECT T2.Name  FROM membership_register_branch AS T1  JOIN branch AS T2  ON T1.Branch_ID = T2.Branch_ID  GROUP BY T2.Branch_ID  ORDER BY COUNT(*) DESC  LIMIT 3;
SELECT T2.Name  FROM membership_register_branch AS T1  JOIN branch AS T2  ON T1.Branch_ID = T2.Branch_ID  GROUP BY T2.Name  ORDER BY COUNT(*) DESC  LIMIT 3;
SELECT DISTINCT City  FROM branch  WHERE membership_amount >= 100;
SELECT DISTINCT City  FROM branch  WHERE membership_amount > 100;
SELECT Open_year  FROM branch  GROUP BY Open_year  HAVING COUNT(*) >= 2;
SELECT Open_year  FROM branch  GROUP BY Open_year  HAVING COUNT(*) >= 2;
SELECT MIN(membership_amount) AS MinMemberships, MAX(membership_amount) AS MaxMemberships  FROM branch  WHERE (Open_year = 2011 OR City = 'London');
SELECT MIN(membership_amount), MAX(membership_amount) FROM branch WHERE Open_year = 2011 OR City = 'London';
SELECT City, COUNT(*)  FROM branch  WHERE Open_year < 2010  GROUP BY City;
SELECT City, COUNT(*)  FROM branch  WHERE Open_year < 2010  GROUP BY City;
SELECT COUNT(DISTINCT Level) FROM member;
SELECT DISTINCT Level FROM member;
SELECT Card_Number, Name, Hometown  FROM member  ORDER BY Level DESC;
SELECT Card_Number, Name, Hometown  FROM member  ORDER BY Level DESC;
SELECT Level  FROM member  GROUP BY Level  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Level, COUNT(*) AS Num_Members  FROM member  GROUP BY Level  ORDER BY Num_Members DESC  LIMIT 1;
SELECT m.Name, b.Name  FROM member m  JOIN membership_register_branch mrb ON m.Member_ID = mrb.Member_ID  JOIN branch b ON b.Branch_ID = mrb.Branch_ID  ORDER BY mrb.Register_Year ASC;
SELECT m.Name, b.Name  FROM member m  JOIN membership_register_branch mrb ON m.Member_ID = mrb.Member_ID  JOIN branch b ON b.Branch_ID = mrb.Branch_ID  ORDER BY mrb.Register_Year ASC;
SELECT b.Name, COUNT(mrb.Member_ID) as Num_Members FROM branch b JOIN membership_register_branch mrb ON b.Branch_ID = mrb.Branch_ID WHERE mrb.Register_Year > 2015 GROUP BY b.Name;
SELECT B.Branch_ID, B.Name  FROM branch AS B  JOIN membership_register_branch AS MRB  ON B.Branch_ID = MRB.Branch_ID  WHERE MRB.Register_Year > 2015;
SELECT Name  FROM member  WHERE Member_ID NOT IN (SELECT Member_ID FROM membership_register_branch);
SELECT Name  FROM member  WHERE Member_ID NOT IN (SELECT Member_ID FROM membership_register_branch)
SELECT T1.Name, T1.City  FROM branch AS T1  LEFT JOIN membership_register_branch AS T2 ON T1.Branch_ID = T2.Branch_ID  GROUP BY T1.Branch_ID  HAVING COUNT(T2.Member_ID) = 0
SELECT T1.Name, T1.City  FROM branch AS T1  LEFT JOIN membership_register_branch AS T2 ON T1.Branch_ID = T2.Branch_ID  GROUP BY T1.Branch_ID  HAVING COUNT(T2.Branch_ID) = 0;
SELECT T1.Name, T1.Open_year  FROM branch AS T1  JOIN membership_register_branch AS T2 ON T1.Branch_ID = T2.Branch_ID  WHERE T2.Register_Year = 2016  GROUP BY T1.Branch_ID  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T2.Name, T2.Open_year  FROM membership_register_branch AS T1  JOIN branch AS T2 ON T1.Branch_ID = T2.Branch_ID  WHERE T1.Register_Year = 2016  GROUP BY T2.Branch_ID  ORDER BY COUNT(T1.Member_ID) DESC  LIMIT 1;
SELECT T1.Name, T1.Hometown  FROM member AS T1  JOIN membership_register_branch AS T2  ON T1.Member_ID = T2.Member_ID  WHERE T2.Register_Year = 2016;
SELECT T1.Name, T1.Hometown  FROM member AS T1  JOIN membership_register_branch AS T2  ON T1.Member_ID = T2.Member_ID  WHERE T2.Register_Year = 2016;
SELECT T1.City  FROM ( SELECT City  FROM branch  WHERE Open_year = 2001 ) AS T1 INTERSECT  SELECT T2.City  FROM ( SELECT City  FROM branch  WHERE membership_amount > 100 ) AS T2
SELECT T.City  FROM (     SELECT City      FROM branch      WHERE Open_year = 2001     UNION     SELECT City      FROM branch      WHERE membership_amount > 100 ) AS T GROUP BY T.City  HAVING COUNT(T.City) = 2;
Error: 第 5435 个样本有 2 个SQL。
Error: 第 5436 个样本有 3 个SQL。
SELECT SUM(Total_pounds)  FROM purchase  JOIN branch ON purchase.Branch_ID = branch.Branch_ID  WHERE branch.City = 'London' AND purchase.Year = 2018;
SELECT SUM(Total_pounds)  FROM purchase  JOIN branch ON purchase.Branch_ID = branch.Branch_ID  WHERE branch.City = 'London' AND purchase.Year = 2018;
SELECT COUNT(*)  FROM purchase  WHERE Member_ID IN (SELECT Member_ID FROM member WHERE Level = 6);
SELECT SUM(Total_pounds)  FROM purchase  JOIN member ON purchase.Member_ID = member.Member_ID  WHERE member.Level = 6;
SELECT T2.Name  FROM membership_register_branch AS T1  JOIN branch AS T2 ON T1.Branch_ID = T2.Branch_ID  JOIN member AS T3 ON T1.Member_ID = T3.Member_ID  WHERE T3.Hometown LIKE '%Louisville, Kentucky%'  INTERSECT  SELECT T2.Name  FROM membership_register_branch AS T1  JOIN branch AS T2 ON T1.Branch_ID = T2.Branch_ID  JOIN member AS T3 ON T1.Member_ID = T3.Member_ID  WHERE T3.Hometown LIKE '%Hiram, Georgia%'
Error: 第 5442 个样本有 2 个SQL。
SELECT Card_Number FROM member WHERE Hometown LIKE '%Kentucky%';
SELECT Card_Number FROM member WHERE Hometown LIKE '%Kentucky%';
SELECT COUNT(*) FROM Student;
SELECT COUNT(*) FROM Student;
SELECT COUNT(*) FROM Voting_record;
SELECT COUNT(*) FROM Voting_record;
SELECT COUNT(DISTINCT President_Vote) FROM Voting_record;
SELECT COUNT(DISTINCT President_Vote) FROM Voting_record;
SELECT MAX(Age) FROM Student;
SELECT MAX(Age) FROM Student;
SELECT LName  FROM Student  WHERE Major = 50;
SELECT LName  FROM Student  WHERE Major = 50;
SELECT Fname  FROM Student  WHERE Age > 22;
SELECT Fname  FROM Student  WHERE Age > 22;
SELECT Major FROM Student WHERE Sex = 'M';
SELECT Major  FROM Student  WHERE Sex = 'Male';
SELECT AVG(Age)  FROM Student  WHERE Sex = 'F';
SELECT AVG(Age)  FROM Student  WHERE Sex = 'F';
SELECT MAX(Age), MIN(Age)  FROM Student  WHERE Major = 600;
SELECT MAX(Age) AS Oldest, MIN(Age) AS Youngest  FROM Student  WHERE Major = 600;
SELECT Advisor FROM Student WHERE city_code = 'BAL';
SELECT Advisor  FROM Student  WHERE city_code = 'BAL';
SELECT DISTINCT Secretary_Vote  FROM Voting_record  WHERE Election_Cycle = 'Fall';
SELECT DISTINCT Secretary_Vote  FROM Voting_record  WHERE Election_Cycle = 'Fall';
SELECT DISTINCT President_Vote  FROM Voting_record  WHERE Registration_Date = '2015-08-30';
SELECT DISTINCT President_Vote  FROM Voting_record  WHERE Election_Cycle = '08/30/2015';
SELECT DISTINCT Registration_Date, Election_Cycle  FROM Voting_record;
SELECT DISTINCT Registration_Date, Election_Cycle FROM Voting_record;
SELECT DISTINCT President_Vote, Vice_President_Vote  FROM Voting_record;
SELECT DISTINCT President_Vote, Vice_President_Vote  FROM Voting_record;
SELECT DISTINCT S.LName FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.Class_President_Vote IS NOT NULL;
SELECT DISTINCT S.LName  FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.Class_President_Vote IS NOT NULL;
SELECT DISTINCT S.Fname FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.Class_Senator_Vote IS NOT NULL;
SELECT DISTINCT S.Fname FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.Class_President_Vote IS NOT NULL;
SELECT DISTINCT S.Age FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.Secretary_Vote IS NOT NULL AND V.Election_Cycle = 'Fall';
SELECT DISTINCT S.Age  FROM Student S JOIN Voting_record V ON S.StuID = V.StuID  WHERE V.Secretary_Vote IS NOT NULL AND V.Election_Cycle = 'Fall';
SELECT DISTINCT S.Advisor FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.Treasurer_Vote IS NOT NULL AND V.Election_Cycle = 'Spring';
SELECT DISTINCT s.Advisor FROM Student s JOIN Voting_record vr ON s.StuID = vr.StuID WHERE vr.Treasurer_Vote IS NOT NULL AND vr.Election_Cycle = 'Spring';
SELECT DISTINCT S.Major FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.Treasurer_Vote IS NOT NULL;
SELECT DISTINCT S.Major  FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE V.Treasurer_Vote IS NOT NULL;
SELECT S.Fname, S.LName FROM Student S JOIN Voting_record V ON S.StuID = V.StuID WHERE S.Sex = 'F' AND V.President_Vote IS NOT NULL;
SELECT S.Fname, S.LName  FROM Student S  JOIN Voting_record V  ON S.StuID = V.StuID  WHERE S.Sex = 'F' AND V.President_Vote IS NOT NULL;
SELECT S.Fname, S.LName  FROM Student S  JOIN Voting_record V ON S.StuID = V.StuID  WHERE S.Age = 18 AND V.Vice_President_Vote IS NOT NULL;
SELECT S.Fname, S.LName  FROM Student S  JOIN Voting_record V  ON S.StuID = V.StuID  WHERE S.Age = 18 AND V.Vice_President_Vote IS NOT NULL;
SELECT COUNT(*)  FROM Student s  JOIN Voting_record vr ON s.StuID = vr.StuID  WHERE s.Sex = 'M' AND vr.Election_Cycle = 'Fall' AND vr.Class_Senator_Vote IS NOT NULL;
SELECT COUNT(*)  FROM Student s  JOIN Voting_record vr  ON s.StuID = vr.StuID  WHERE s.Sex = 'M' AND vr.Class_Senator_Vote IS NOT NULL AND vr.Election_Cycle = 'Fall';
SELECT COUNT(*)  FROM Student s  JOIN Voting_record vr  ON s.StuID = vr.StuID  WHERE s.city_code = 'NYC' AND vr.Election_Cycle = 'Spring' AND vr.Class_Senator_Vote IS NOT NULL;
SELECT COUNT(*)  FROM Student s  JOIN Voting_record vr  ON s.StuID = vr.StuID  WHERE s.city_code = 'NYC' AND vr.Election_Cycle = 'Spring' AND vr.Class_Senator_Vote IS NOT NULL;
SELECT AVG(Student.Age) FROM Student JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE Student.city_code = 'NYC' AND Voting_record.Secretary_Vote IS NOT NULL AND Voting_record.Election_Cycle = 'spring';
SELECT AVG(Student.Age) FROM Student JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE Student.city_code = 'NYC' AND Voting_record.Secretary_Vote IS NOT NULL AND Voting_record.Election_Cycle = 'spring';
SELECT AVG(Student.Age) FROM Student JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE Student.Sex = 'F' AND Voting_record.Secretary_Vote IS NOT NULL AND Voting_record.Election_Cycle = 'spring';
SELECT AVG(Student.Age) FROM Student JOIN Voting_record ON Student.StuID = Voting_record.StuID WHERE Student.Sex = 'Female' AND Voting_record.Secretary_Vote IS NOT NULL AND Voting_record.Election_Cycle = 'Spring';
SELECT DISTINCT S.Fname FROM Student S JOIN Voting_record V ON S.StuID = V.Vice_President_Vote WHERE S.city_code <> 'PIT';
SELECT DISTINCT S.Fname  FROM Student S  JOIN Voting_record V ON S.StuID = V.Vice_President_Vote  WHERE S.city_code <> 'PIT';
SELECT DISTINCT S.LName FROM Student S JOIN Voting_record V ON S.StuID = V.President_Vote WHERE S.Advisor <> 2192;
SELECT DISTINCT S.LName  FROM Student S  JOIN Voting_record V ON S.StuID = V.President_Vote  WHERE S.Advisor <> 2192;
SELECT DISTINCT S.LName FROM Student S JOIN Voting_record V ON S.StuID = V.President_Vote WHERE S.Advisor = 8741;
SELECT DISTINCT S.LName  FROM Student S  JOIN Voting_record V ON S.StuID = V.StuID  WHERE S.Advisor = 8741 AND V.President_Vote IS NOT NULL;
SELECT Advisor, COUNT(*) AS Total_Students FROM Student GROUP BY Advisor;
SELECT Advisor, COUNT(*) AS Num_Students  FROM Student  GROUP BY Advisor;
SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) > 2;
SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) > 2;
SELECT Major  FROM Student  GROUP BY Major  HAVING COUNT(*) < 3;
SELECT Major  FROM Student  GROUP BY Major  HAVING COUNT(*) < 3;
SELECT Election_Cycle, COUNT(*) AS Number_of_Records  FROM Voting_record  GROUP BY Election_Cycle;
SELECT Election_Cycle, COUNT(*) AS NumberOfRecords  FROM Voting_record  GROUP BY Election_Cycle;
SELECT Major  FROM Student  GROUP BY Major  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Major  FROM Student  GROUP BY Major  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Major  FROM Student  WHERE Sex = 'F'  GROUP BY Major  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Major  FROM Student  WHERE Sex = 'F'  GROUP BY Major  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT city_code  FROM Student  GROUP BY city_code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT city_code  FROM Student  GROUP BY city_code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) > 2;
SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) > 2;
SELECT COUNT(*) FROM Products;
SELECT COUNT(*) FROM Products;
SELECT COUNT(*) FROM Ref_Colors;
SELECT COUNT(*) FROM Ref_Colors;
SELECT COUNT(*) FROM Characteristics;
SELECT COUNT(*) FROM Characteristics;
SELECT product_name, typical_buying_price FROM Products;
SELECT product_name, typical_buying_price FROM Products;
SELECT color_description FROM Ref_Colors;
SELECT color_description FROM Ref_Colors;
SELECT characteristic_name FROM Characteristics;
SELECT DISTINCT characteristic_name  FROM Characteristics;
SELECT p.product_name  FROM Products p JOIN Ref_Product_Categories rpc ON p.product_category_code = rpc.product_category_code WHERE rpc.product_category_description = 'Spices';
SELECT p.product_name  FROM Products p JOIN Ref_Product_Categories rpc ON p.product_category_code = rpc.product_category_code WHERE rpc.product_category_description = 'Spices';
SELECT p.product_name, c.color_description, p.product_description FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code WHERE p.product_category_code = (     SELECT product_category_code     FROM Ref_Product_Categories     WHERE product_category_description = 'Herbs' )
SELECT p.product_name, rcl.color_description, p.product_description FROM Products p JOIN Ref_Colors rcl ON p.color_code = rcl.color_code JOIN Ref_Product_Categories rpc ON p.product_category_code = rpc.product_category_code WHERE rpc.product_category_description = 'Herbs';
SELECT COUNT(*)  FROM Products  WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Seeds');
SELECT COUNT(*)  FROM Products  WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Seeds');
SELECT COUNT(*)  FROM Products  JOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code  WHERE Ref_Product_Categories.product_category_description = 'Spices' AND Products.typical_selling_price > 1000;
SELECT COUNT(*)  FROM Products  WHERE product_category_code = (SELECT product_category_code FROM Ref_Product_Categories WHERE product_category_description = 'Spices')  AND typical_selling_price > 1000;
SELECT T1.product_category_description, T2.typical_buying_price  FROM Ref_Product_Categories AS T1  JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code  WHERE T2.product_name = 'cumin';
SELECT T1.product_category_code, T1.typical_buying_price  FROM Products AS T1  JOIN Ref_Product_Categories AS T2 ON T1.product_category_code = T2.product_category_code  WHERE T1.product_name = 'cumin';
SELECT Ref_Product_Categories.product_category_description  FROM Products  INNER JOIN Ref_Product_Categories  ON Products.product_category_code = Ref_Product_Categories.product_category_code  WHERE Products.product_name = 'flax';
SELECT T.product_category_code FROM Products AS T WHERE T.product_name = 'flax'
SELECT p.product_name  FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code WHERE c.color_description = 'yellow';
SELECT p.product_name  FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code WHERE c.color_description = 'yellow';
SELECT Ref_Product_Categories.product_category_description  FROM Products  INNER JOIN Ref_Product_Categories  ON Products.product_category_code = Ref_Product_Categories.product_category_code  WHERE Products.product_description LIKE '%t%';
SELECT DISTINCT Ref_Product_Categories.product_category_description  FROM Ref_Product_Categories  JOIN Products ON Ref_Product_Categories.product_category_code = Products.product_category_code  WHERE Products.product_description LIKE '%t%';
SELECT T2.color_description FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code WHERE T1.product_name = "catnip";
SELECT Ref_Colors.color_description  FROM Products  JOIN Ref_Colors ON Products.color_code = Ref_Colors.color_code  WHERE Products.product_name = 'catnip';
SELECT p.color_code, r.color_description  FROM Products p JOIN Ref_Colors r ON p.color_code = r.color_code WHERE p.product_name = 'chervil';
SELECT p.color_code, r.color_description FROM Products p JOIN Ref_Colors r ON p.color_code = r.color_code WHERE p.product_name = 'chervil';
SELECT p.product_id, rc.color_description FROM Products p JOIN Ref_Colors rc ON p.color_code = rc.color_code WHERE p.product_id IN (     SELECT pc.product_id     FROM Product_Characteristics pc     GROUP BY pc.product_id     HAVING COUNT(pc.characteristic_id) >= 2 );
SELECT p.product_id, rc.color_description FROM Products p JOIN Ref_Colors rc ON p.color_code = rc.color_code WHERE p.product_id IN (     SELECT pc.product_id     FROM Product_Characteristics pc     GROUP BY pc.product_id     HAVING COUNT(pc.characteristic_id) >= 2 );
SELECT p.product_name FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code WHERE c.color_description = 'white';
SELECT p.product_name FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code WHERE c.color_description = 'white';
SELECT p.product_name, p.typical_buying_price, p.typical_selling_price  FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code WHERE c.color_description = 'yellow';
SELECT p.product_name, p.typical_buying_price, p.typical_selling_price  FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code WHERE c.color_description = 'yellow';
SELECT COUNT(*)  FROM Product_Characteristics pc JOIN Products p ON pc.product_id = p.product_id WHERE p.product_name = 'sesame';
SELECT COUNT(*)  FROM Product_Characteristics pc JOIN Products p ON pc.product_id = p.product_id WHERE p.product_name = 'sesame';
SELECT COUNT(DISTINCT c.characteristic_name) FROM Product_Characteristics pc JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id JOIN Products p ON pc.product_id = p.product_id WHERE p.product_name = 'cumin';
SELECT COUNT(DISTINCT c.characteristic_name) FROM Product_Characteristics pc JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id JOIN Products p ON pc.product_id = p.product_id WHERE p.product_name = 'cumin';
SELECT C.characteristic_name  FROM Characteristics C JOIN Product_Characteristics PC ON C.characteristic_id = PC.characteristic_id JOIN Products P ON P.product_id = PC.product_id WHERE P.product_name = 'sesame';
SELECT C.characteristic_name  FROM Product_Characteristics PC  JOIN Characteristics C ON PC.characteristic_id = C.characteristic_id  JOIN Products P ON PC.product_id = P.product_id  WHERE P.product_name = 'sesame';
SELECT C.characteristic_name, C.characteristic_data_type  FROM Product_Characteristics PC  JOIN Characteristics C ON PC.characteristic_id = C.characteristic_id  JOIN Products P ON PC.product_id = P.product_id  WHERE P.product_name = 'cumin';
SELECT C.characteristic_name, C.characteristic_data_type  FROM Characteristics AS C  JOIN Product_Characteristics AS PC ON C.characteristic_id = PC.characteristic_id  JOIN Products AS P ON PC.product_id = P.product_id  WHERE P.product_name = 'cumin';
SELECT pc.product_characteristic_value  FROM Product_Characteristics pc  JOIN Products p ON pc.product_id = p.product_id  JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id  WHERE p.product_name = 'sesame'  AND c.characteristic_type_code = 'Grade';
SELECT c.characteristic_name  FROM Characteristics c JOIN Product_Characteristics pc ON c.characteristic_id = pc.characteristic_id JOIN Products p ON p.product_id = pc.product_id JOIN Ref_Characteristic_Types rct ON rct.characteristic_type_code = c.characteristic_type_code WHERE p.product_name = 'sesame' AND rct.characteristic_type_code = 'Grade';
SELECT COUNT(*)  FROM Product_Characteristics pc JOIN Products p ON pc.product_id = p.product_id WHERE p.product_name = 'laurel';
SELECT COUNT(*)  FROM Product_Characteristics pc JOIN Products p ON pc.product_id = p.product_id WHERE p.product_name = 'laurel';
SELECT COUNT(*)  FROM Product_Characteristics pc JOIN Products p ON pc.product_id = p.product_id WHERE p.product_name = 'flax';
SELECT COUNT(*)  FROM Product_Characteristics pc JOIN Products p ON pc.product_id = p.product_id WHERE p.product_name = 'flax';
SELECT p.product_name  FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics ch ON pc.characteristic_id = ch.characteristic_id WHERE c.color_description = 'red' AND ch.characteristic_name = 'fast';
SELECT p.product_name  FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id JOIN Ref_Colors rc ON p.color_code = rc.color_code WHERE rc.color_description = 'red' AND c.characteristic_name = 'fast';
SELECT COUNT(*)  FROM Product_Characteristics pc JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id WHERE c.characteristic_name = 'hot';
SELECT COUNT(*)  FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id WHERE c.characteristic_name = 'hot';
SELECT DISTINCT p.product_name FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id WHERE c.characteristic_name = 'warm';
SELECT DISTINCT p.product_name FROM Products p JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id JOIN Ref_Characteristic_Types rct ON c.characteristic_type_code = rct.characteristic_type_code WHERE rct.characteristic_type_description = 'warm';
SELECT COUNT(*)  FROM Products p  JOIN Ref_Colors c ON p.color_code = c.color_code  JOIN Product_Characteristics pc ON p.product_id = pc.product_id  JOIN Characteristics ch ON pc.characteristic_id = ch.characteristic_id  WHERE c.color_description = 'red' AND ch.characteristic_name = 'slow';
SELECT COUNT(*)  FROM Products p  JOIN Ref_Colors c ON p.color_code = c.color_code  JOIN Product_Characteristics pc ON p.product_id = pc.product_id  JOIN Characteristics ch ON pc.characteristic_id = ch.characteristic_id  WHERE c.color_description = 'red' AND ch.characteristic_name = 'slow';
SELECT COUNT(*)  FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics ch ON pc.characteristic_id = ch.characteristic_id WHERE c.color_description = 'white' OR ch.characteristic_name = 'hot';
SELECT COUNT(DISTINCT p.product_id)  FROM Products p JOIN Ref_Colors rc ON p.color_code = rc.color_code JOIN Product_Characteristics pc ON p.product_id = pc.product_id JOIN Characteristics c ON pc.characteristic_id = c.characteristic_id WHERE rc.color_description = 'white' OR c.characteristic_name = 'hot';
SELECT unit_of_measure  FROM Ref_Product_Categories  WHERE product_category_code = 'Herbs';
SELECT Ref_Product_Categories.unit_of_measure  FROM Ref_Product_Categories  JOIN Products ON Ref_Product_Categories.product_category_code = Products.product_category_code  WHERE Products.product_name = 'Herb';
SELECT product_category_description  FROM Ref_Product_Categories  WHERE product_category_code = 'Spices';
SELECT product_category_description  FROM Ref_Product_Categories  WHERE product_category_code = 'Spices';
SELECT product_category_description, unit_of_measure  FROM Ref_Product_Categories  WHERE product_category_code = 'Herbs';
Error: 第 5584 个样本有 2 个SQL。
SELECT Ref_Product_Categories.unit_of_measure  FROM Products  INNER JOIN Ref_Product_Categories  ON Products.product_category_code = Ref_Product_Categories.product_category_code  WHERE Products.product_name = 'cumin';
SELECT Ref_Product_Categories.unit_of_measure  FROM Products  INNER JOIN Ref_Product_Categories  ON Products.product_category_code = Ref_Product_Categories.product_category_code  WHERE Products.product_name = 'cumin';
SELECT Ref_Product_Categories.unit_of_measure, Ref_Product_Categories.product_category_code  FROM Ref_Product_Categories  JOIN Products ON Ref_Product_Categories.product_category_code = Products.product_category_code  WHERE Products.product_name = 'chervil';
SELECT Ref_Product_Categories.unit_of_measure, Products.product_category_code FROM Products JOIN Ref_Product_Categories ON Products.product_category_code = Ref_Product_Categories.product_category_code WHERE Products.product_name = 'chervil';
SELECT p.product_name  FROM Products p JOIN Ref_Colors c ON p.color_code = c.color_code JOIN Ref_Product_Categories pc ON p.product_category_code = pc.product_category_code WHERE c.color_description = 'white' AND pc.unit_of_measure != 'Handful';
SELECT p.product_name  FROM Products p JOIN Ref_Product_Categories rpc ON p.product_category_code = rpc.product_category_code JOIN Ref_Colors rc ON p.color_code = rc.color_code WHERE rc.color_description != 'white' AND rpc.unit_of_measure != 'Handful';
SELECT T2.color_description FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code GROUP BY T1.color_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.color_description FROM Products AS T1  JOIN Ref_Colors AS T2  ON T1.color_code = T2.color_code GROUP BY T2.color_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.color_description FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code GROUP BY T1.color_code ORDER BY COUNT(*) ASC LIMIT 1
SELECT T2.color_description  FROM Products AS T1  JOIN Ref_Colors AS T2  ON T1.color_code = T2.color_code  GROUP BY T2.color_description  ORDER BY COUNT(*)  LIMIT 1;
SELECT c.characteristic_name FROM Characteristics c JOIN Product_Characteristics pc ON c.characteristic_id = pc.characteristic_id GROUP BY c.characteristic_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT c.characteristic_name FROM Characteristics c JOIN Product_Characteristics pc ON c.characteristic_id = pc.characteristic_id GROUP BY c.characteristic_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT c.characteristic_name, c.other_characteristic_details, c.characteristic_data_type  FROM Characteristics c  LEFT JOIN Product_Characteristics pc ON c.characteristic_id = pc.characteristic_id  WHERE pc.characteristic_id IS NULL;
SELECT c.characteristic_name, c.other_characteristic_details, c.characteristic_data_type  FROM Characteristics c  LEFT JOIN Product_Characteristics pc ON c.characteristic_id = pc.characteristic_id  WHERE pc.product_id IS NULL;
SELECT c.characteristic_name FROM Characteristics c JOIN Product_Characteristics pc ON c.characteristic_id = pc.characteristic_id GROUP BY c.characteristic_name HAVING COUNT(pc.product_id) >= 2;
SELECT c.characteristic_name FROM Characteristics c JOIN Product_Characteristics pc ON c.characteristic_id = pc.characteristic_id GROUP BY c.characteristic_name HAVING COUNT(pc.product_id) >= 2;
SELECT COUNT(*)  FROM Ref_Colors WHERE color_code NOT IN (SELECT color_code FROM Products)
SELECT COUNT(*)  FROM Ref_Colors  WHERE color_code NOT IN (SELECT color_code FROM Products)
SELECT COUNT(*) FROM event;
SELECT Name  FROM event  ORDER BY Year DESC;
SELECT T1.Name FROM event AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.ID ORDER BY T1.Year DESC LIMIT 1;
SELECT COUNT(*) FROM stadium;
SELECT name FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium);
SELECT name FROM stadium WHERE Capacity < (SELECT AVG(Capacity) FROM stadium)
SELECT Country, COUNT(*) AS Num_Stadiums  FROM stadium  GROUP BY Country  ORDER BY Num_Stadiums DESC  LIMIT 1;
SELECT Country  FROM stadium  GROUP BY Country  HAVING COUNT(*) <= 3;
SELECT Country  FROM stadium  WHERE Capacity > 60000  INTERSECT  SELECT Country  FROM stadium  WHERE Capacity < 50000;
SELECT COUNT(DISTINCT City) FROM stadium WHERE Opening_year < 2006;
SELECT Country, COUNT(*)  FROM stadium  GROUP BY Country;
SELECT DISTINCT Country FROM stadium WHERE Opening_year <= 2006 EXCEPT SELECT DISTINCT Country FROM stadium WHERE Opening_year > 2006;
SELECT COUNT(*) FROM stadium WHERE Country != 'Russia'
SELECT name FROM swimmer ORDER BY meter_100 ASC;
SELECT COUNT(DISTINCT Nationality) FROM swimmer;
SELECT Country FROM (   SELECT T1.Country, COUNT(*) AS cnt   FROM swimmer AS T1   GROUP BY T1.Country ) AS T2 WHERE T2.cnt > 1
SELECT r.Result  FROM record r  JOIN swimmer s ON r.Swimmer_ID = s.ID  WHERE s.Nationality = 'Australia' AND (r.Event_ID IN (SELECT e.ID FROM event e WHERE e.Name = '200 meter') OR r.Event_ID IN (SELECT e.ID FROM event e WHERE e.Name = '300 meter'));
SELECT S.name  FROM swimmer AS S  JOIN record AS R ON S.ID = R.Swimmer_ID  WHERE R.Result = 'win';
SELECT s.name  FROM stadium s JOIN event e ON s.ID = e.Stadium_ID GROUP BY s.ID ORDER BY COUNT(e.ID) DESC LIMIT 1;
SELECT T1.name, T1.Capacity FROM stadium AS T1 JOIN event AS T2 ON T1.ID = T2.Stadium_ID WHERE T2.Name = "World Junior";
SELECT name  FROM stadium  WHERE id NOT IN (SELECT stadium_id FROM event);
SELECT s.name  FROM swimmer s JOIN record r ON s.ID = r.Swimmer_ID GROUP BY s.ID ORDER BY COUNT(r.ID) DESC LIMIT 1;
SELECT s.name  FROM swimmer s JOIN record r ON s.ID = r.Swimmer_ID GROUP BY s.ID, s.name HAVING COUNT(r.ID) >= 2;
SELECT s.name, s.Nationality  FROM swimmer s JOIN record r ON s.ID = r.Swimmer_ID WHERE r.Result = 'win' GROUP BY s.ID HAVING COUNT(r.ID) > 1;
SELECT name  FROM swimmer  WHERE NOT EXISTS (     SELECT *      FROM record      WHERE record.Swimmer_ID = swimmer.ID );
SELECT s.name FROM swimmer s JOIN record r1 ON s.ID = r1.Swimmer_ID JOIN record r2 ON s.ID = r2.Swimmer_ID WHERE r1.Result = 'win' AND r2.Result = 'loss' GROUP BY s.name HAVING COUNT(DISTINCT r1.Result) > 1 AND COUNT(DISTINCT r2.Result) > 1;
SELECT DISTINCT s.name  FROM stadium s JOIN event e ON s.ID = e.Stadium_ID JOIN record r ON e.ID = r.Event_ID JOIN swimmer sw ON r.Swimmer_ID = sw.ID WHERE sw.Nationality = 'Australia';
SELECT s.name  FROM stadium s  JOIN event e ON s.ID = e.Stadium_ID  JOIN record r ON e.ID = r.Event_ID  GROUP BY s.ID  ORDER BY COUNT(DISTINCT r.Swimmer_ID) DESC  LIMIT 1;
SELECT * FROM swimmer;
SELECT AVG(Capacity)  FROM stadium  WHERE Opening_year = 2005;
SELECT COUNT(*) FROM railway
SELECT Builder FROM railway ORDER BY Builder ASC;
SELECT Wheels, Location FROM railway;
SELECT MAX(Level)  FROM manager  WHERE Country != 'Australia';
SELECT AVG(Age) FROM manager;
SELECT Name FROM manager ORDER BY Level ASC;
SELECT Name, Arrival FROM train;
SELECT Name FROM manager WHERE Age = (SELECT MAX(Age) FROM manager);
SELECT T1.Name, T2.Location  FROM train AS T1  JOIN railway AS T2  ON T1.Railway_ID = T2.Railway_ID;
SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.Name = 'Andaman Exp'
SELECT T1.Railway_ID, T1.Location  FROM railway AS T1  JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID  GROUP BY T1.Railway_ID  HAVING COUNT(T2.Train_ID) > 1;
SELECT T1.Railway_ID, T1.Builder  FROM railway AS T1  JOIN train AS T2  ON T1.Railway_ID = T2.Railway_ID  GROUP BY T1.Railway_ID  ORDER BY COUNT(T2.Train_ID) DESC  LIMIT 1;
SELECT Builder, COUNT(*) AS NumberOfRailways FROM railway GROUP BY Builder;
SELECT Builder, COUNT(*) AS Count  FROM railway  GROUP BY Builder  ORDER BY Count DESC  LIMIT 1;
SELECT Location, COUNT(Railway_ID)  FROM railway  GROUP BY Location;
SELECT Location  FROM railway  GROUP BY Location  HAVING COUNT(Railway_ID) > 1;
SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)
SELECT      Country  FROM      manager  WHERE      Age > 50  INTERSECT  SELECT      Country  FROM      manager  WHERE      Age < 46;
SELECT DISTINCT Country FROM manager;
SELECT Working_year_starts FROM manager ORDER BY Level DESC;
SELECT DISTINCT Country FROM manager WHERE Age > 50 OR Age < 46;
SELECT COUNT(*)  FROM Addresses  WHERE country = 'USA';
SELECT DISTINCT city FROM Addresses;
SELECT state_province_county, COUNT(address_id)  FROM Addresses  GROUP BY state_province_county;
SELECT customer_name, customer_phone  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Address_History)
SELECT c.customer_name  FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_name ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT product_type_code  FROM Products  GROUP BY product_type_code  HAVING COUNT(*) >= 2;
SELECT c.customer_name  FROM Customers c JOIN Customer_Orders co1 ON c.customer_id = co1.customer_id JOIN Customer_Orders co2 ON c.customer_id = co2.customer_id WHERE co1.order_status_code = 'completed' AND co2.order_status_code = 'part' GROUP BY c.customer_name HAVING COUNT(*) >= 2;
SELECT customer_name, customer_phone, payment_method_code  FROM Customers  ORDER BY customer_number DESC;
SELECT p.product_name, SUM(oi.order_quantity) as total_order_quantity FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_name;
SELECT MIN(product_price) AS MinPrice, MAX(product_price) AS MaxPrice, AVG(product_price) AS AvgPrice FROM Products;
SELECT COUNT(*)  FROM Products  WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT      c.customer_name,      a.city,      Cah.date_from,      Cah.date_to  FROM      customers c  JOIN      customer_address_history Cah ON c.customer_id = Cah.customer_id  JOIN      addresses a ON Cah.address_id = a.address_id;
SELECT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE c.payment_method_code = 'Credit Card' GROUP BY c.customer_name HAVING COUNT(co.order_id) > 2;
SELECT C.customer_name, C.customer_phone  FROM Customers C JOIN Customer_Orders CO ON C.customer_id = CO.customer_id JOIN Order_Items OI ON CO.order_id = OI.order_id WHERE C.customer_id = (     SELECT customer_id      FROM (         SELECT customer_id, SUM(order_quantity) as total_quantity          FROM Order_Items          JOIN Customer_Orders ON Order_Items.order_id = Customer_Orders.order_id         GROUP BY customer_id     )      ORDER BY total_quantity DESC      LIMIT 1 ) LIMIT 1;
SELECT product_type_code, product_name  FROM Products  WHERE product_price > 1000 OR product_price < 500;
SELECT dorm_name  FROM Dorm  WHERE gender = 'F';
SELECT dorm_name  FROM Dorm  WHERE gender = 'F'
SELECT dorm_name FROM Dorm WHERE student_capacity > 300;
SELECT dorm_name FROM Dorm WHERE student_capacity > 300;
SELECT COUNT(*)  FROM Student  WHERE Sex = 'F' AND Age < 25;
SELECT COUNT(*)  FROM Student  WHERE Sex = 'F' AND Age < 25;
SELECT Fname  FROM Student  WHERE Age > 20;
SELECT Fname  FROM Student  WHERE Age > 20;
SELECT Fname  FROM Student  WHERE city_code = 'PHL' AND Age BETWEEN 20 AND 25;
SELECT Fname  FROM Student  WHERE Age BETWEEN 20 AND 25  AND city_code = 'PHL';
SELECT COUNT(*) FROM Dorm;
SELECT COUNT(*) FROM Dorm;
SELECT COUNT(DISTINCT amenid) FROM Has_amenity;
SELECT COUNT(DISTINCT amenid) FROM Has_amenity;
SELECT SUM(student_capacity) FROM Dorm;
SELECT SUM(student_capacity) FROM Dorm;
SELECT COUNT(*) FROM Student;
SELECT COUNT(*) FROM Student;
SELECT city_code, AVG(Age)  FROM Student  WHERE StuID IN (SELECT StuID FROM Lives_in) GROUP BY city_code;
SELECT AVG(Age), city_code  FROM Student  GROUP BY city_code;
SELECT AVG(student_capacity) AS average_capacity, SUM(student_capacity) AS total_capacity  FROM Dorm  WHERE gender = 'X';
SELECT AVG(student_capacity) AS average_capacity, SUM(student_capacity) AS total_capacity  FROM Dorm  WHERE gender = 'X';
SELECT COUNT(DISTINCT dormid)  FROM Has_amenity;
SELECT COUNT(DISTINCT dormid)  FROM Has_amenity;
SELECT dorm_name  FROM Dorm  WHERE dormid NOT IN (SELECT dormid FROM Has_amenity)
SELECT dorm_name  FROM Dorm  WHERE dormid NOT IN (SELECT dormid FROM Has_amenity)
SELECT COUNT(DISTINCT gender) FROM Dorm;
SELECT COUNT(DISTINCT gender) FROM Dorm;
SELECT student_capacity, gender  FROM Dorm  WHERE dorm_name LIKE '%Donor%';
SELECT student_capacity, gender  FROM Dorm  WHERE dorm_name LIKE '%Donor%';
SELECT dorm_name, gender  FROM Dorm  WHERE student_capacity > 300 OR student_capacity < 100;
SELECT dorm_name, gender FROM Dorm WHERE student_capacity > 300 OR student_capacity < 100;
SELECT COUNT(DISTINCT Major) AS Num_Majors, COUNT(DISTINCT city_code) AS Num_Cities FROM Student;
SELECT COUNT(DISTINCT Major) AS DifferentMajors, COUNT(DISTINCT city_code) AS DifferentCityCodes  FROM Student;
SELECT D.dorm_name  FROM Dorm D  JOIN Has_amenity HA1 ON D.dormid = HA1.dormid  JOIN Dorm_amenity DA1 ON HA1.amenid = DA1.amenid AND DA1.amenity_name = 'TV Lounge' JOIN Has_amenity HA2 ON D.dormid = HA2.dormid  JOIN Dorm_amenity DA2 ON HA2.amenid = DA2.amenid AND DA2.amenity_name = 'Study Room'
SELECT D.dorm_name  FROM Dorm D JOIN Has_amenity HA ON D.dormid = HA.dormid JOIN Dorm_amenity DA ON HA.amenid = DA.amenid WHERE DA.amenity_name IN ('TV Lounge', 'Study Room') GROUP BY D.dorm_name HAVING COUNT(DISTINCT DA.amenity_name) = 2;
SELECT d.dorm_name  FROM Dorm d JOIN Has_amenity ha_tv ON d.dormid = ha_tv.dormid JOIN Dorm_amenity da_tv ON ha_tv.amenid = da_tv.amenid AND da_tv.amenity_name = 'TV Lounge' WHERE NOT EXISTS (     SELECT 1      FROM Has_amenity ha_study     JOIN Dorm_amenity da_study ON ha_study.amenid = da_study.amenid AND da_study.amenity_name = 'Study Room'     WHERE ha_study.dormid = d.dormid );
SELECT d.dorm_name  FROM Dorm d JOIN Has_amenity ha ON d.dormid = ha.dormid JOIN Dorm_amenity da ON ha.amenid = da.amenid WHERE da.amenity_name = 'TV Lounge' AND NOT EXISTS (     SELECT *     FROM Has_amenity ha2     JOIN Dorm_amenity da2 ON ha2.amenid = da2.amenid     WHERE ha2.dormid = d.dormid AND da2.amenity_name = 'Study Room' )
SELECT LName  FROM Student  WHERE (Sex = 'F' AND city_code = 'BAL') OR (Sex = 'M' AND Age < 20);
Error: 第 5708 个样本有 3 个SQL。
SELECT dorm_name FROM Dorm WHERE student_capacity = (SELECT MAX(student_capacity) FROM Dorm);
SELECT dorm_name FROM Dorm WHERE student_capacity = (SELECT MAX(student_capacity) FROM Dorm);
SELECT DISTINCT amenity_name  FROM Dorm_amenity  ORDER BY amenity_name ASC;
SELECT DISTINCT amenity_name  FROM Dorm_amenity  ORDER BY amenity_name ASC;
SELECT city_code  FROM Student  GROUP BY city_code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT city_code  FROM Student  GROUP BY city_code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Fname, LName  FROM Student  WHERE Age < (SELECT AVG(Age) FROM Student);
SELECT Fname, LName  FROM Student  WHERE Age < (SELECT AVG(Age) FROM Student);
SELECT Fname, LName  FROM Student  WHERE city_code != 'HKG'  ORDER BY Age;
SELECT Fname, LName  FROM Student  WHERE city_code != 'HKG'  ORDER BY Age;
SELECT amenity_name  FROM Dorm_amenity  JOIN Has_amenity ON Dorm_amenity.amenid = Has_amenity.amenid  JOIN Dorm ON Has_amenity.dormid = Dorm.dormid  WHERE Dorm.dorm_name = 'Anonymous Donor Hall'  ORDER BY amenity_name ASC;
SELECT Dorm_amenity.amenity_name  FROM Dorm_amenity  JOIN Has_amenity ON Dorm_amenity.amenid = Has_amenity.amenid  JOIN Dorm ON Has_amenity.dormid = Dorm.dormid  WHERE Dorm.dorm_name = 'Anonymous Donor Hall'  ORDER BY Dorm_amenity.amenity_name ASC;
SELECT gender, COUNT(dormid) AS num_dorms, SUM(student_capacity) AS total_capacity FROM Dorm GROUP BY gender;
SELECT COUNT(dormid) AS num_dorms, SUM(student_capacity) AS total_capacity, gender  FROM Dorm  GROUP BY gender;
SELECT Sex, AVG(Age) AS Average_Age, MAX(Age) AS Oldest_Age FROM Student GROUP BY Sex;
Error: 第 5724 个样本有 2 个SQL。
SELECT Major, COUNT(*) AS Num_Students  FROM Student  GROUP BY Major;
SELECT Major, COUNT(*)  FROM Student  GROUP BY Major;
SELECT COUNT(*), AVG(Age), city_code  FROM Student  GROUP BY city_code;
SELECT city_code, COUNT(*), AVG(Age)  FROM Student  JOIN Lives_in ON Student.StuID = Lives_in.stuid  GROUP BY city_code;
SELECT city_code, AVG(Age) as Average_Age, COUNT(*) as Number_of_Males  FROM Student  WHERE Sex = 'M'  GROUP BY city_code;
SELECT city_code, AVG(Age) as Average_Age, COUNT(*) as Male_Students  FROM Student  WHERE Sex = 'M'  GROUP BY city_code;
SELECT COUNT(*), T1.city_code  FROM Student AS T1  GROUP BY T1.city_code  HAVING COUNT(*) > 1;
Error: 第 5732 个样本有 2 个SQL。
SELECT Fname, LName  FROM Student  WHERE Major != (     SELECT Major      FROM (         SELECT Major, COUNT(*) AS cnt          FROM Student          GROUP BY Major          ORDER BY cnt DESC          LIMIT 1     ) AS largest_major )
SELECT Fname, LName  FROM Student  WHERE Major != (     SELECT Major      FROM (         SELECT Major, COUNT(*) AS cnt          FROM Student          GROUP BY Major          ORDER BY cnt DESC          LIMIT 1     ) AS largest_major )
SELECT COUNT(*), Sex  FROM Student  WHERE Age > (SELECT AVG(Age) FROM Student WHERE Sex = Student.Sex) GROUP BY Sex;
SELECT S.Sex, COUNT(*) AS Num_Students  FROM Student S  WHERE S.Age > (SELECT AVG(Age) FROM Student)  GROUP BY S.Sex;
SELECT D.dorm_name, AVG(S.Age) as Average_Age FROM Student S JOIN Lives_in L ON S.StuID = L.stuid JOIN Dorm D ON L.dormid = D.dormid GROUP BY D.dorm_name;
SELECT AVG(T1.Age) AS Avg_Age, T3.dorm_name  FROM Student AS T1  JOIN Lives_in AS T2 ON T1.StuID = T2.stuid  JOIN Dorm AS T3 ON T3.dormid = T2.dormid  GROUP BY T3.dorm_name;
SELECT Dorm.dorm_name, COUNT(Has_amenity.amenid) as Num_of_Amenities FROM Dorm LEFT JOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid WHERE Dorm.student_capacity > 100 GROUP BY Dorm.dormid;
SELECT Dorm.dormid, Dorm.dorm_name, COUNT(Has_amenity.amenid) as Num_of_Amenities FROM Dorm JOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid GROUP BY Dorm.dormid, Dorm.dorm_name;
SELECT d.dorm_name, COUNT(l.stuid) as NumOfStudents FROM Dorm d  JOIN Lives_in l ON d.dormid = l.dormid JOIN Student s ON l.stuid = s.StuID WHERE s.Age > 20 GROUP BY d.dorm_name;
SELECT d.dorm_name, COUNT(l.stuid)  FROM Lives_in l  JOIN Student s ON l.stuid = s.StuID  JOIN Dorm d ON l.dormid = d.dormid  WHERE s.Age > 20  GROUP BY d.dorm_name;
SELECT S.fname FROM Student S JOIN Lives_in L ON S.StuID = L.stuid JOIN Dorm D ON L.dormid = D.dormid WHERE D.dorm_name = 'Smith Hall';
SELECT S.Fname  FROM Student S, Lives_in L, Dorm D  WHERE S.StuID = L.stuid AND D.dormid = L.dormid AND D.dorm_name = 'Smith Hall';
SELECT AVG(T1.Age)  FROM Student AS T1  JOIN Lives_in AS T2 ON T1.StuID = T2.stuid  JOIN Dorm AS T3 ON T2.dormid = T3.dormid  WHERE T3.student_capacity = (SELECT MAX(student_capacity) FROM Dorm)
SELECT AVG(T1.Age)  FROM Student AS T1  JOIN Lives_in AS T2 ON T1.StuID = T2.stuid  JOIN Dorm AS T3 ON T2.dormid = T3.dormid  WHERE T3.student_capacity = (SELECT MAX(student_capacity) FROM Dorm)
SELECT COUNT(*)  FROM Student  JOIN Lives_in ON Student.StuID = Lives_in.stuid  JOIN Dorm ON Lives_in.dormid = Dorm.dormid  WHERE Dorm.gender = 'M';
SELECT COUNT(*)  FROM Student  JOIN Lives_in ON Student.StuID = Lives_in.stuid  JOIN Dorm ON Lives_in.dormid = Dorm.dormid  WHERE Dorm.gender = 'M';
SELECT COUNT(*)  FROM Student s  JOIN Lives_in l ON s.StuID = l.stuid  JOIN Dorm d ON l.dormid = d.dormid  WHERE s.Sex = 'F' AND d.dorm_name = 'Smith Hall';
SELECT COUNT(*)  FROM Student s  JOIN Lives_in l ON s.StuID = l.stuid  JOIN Dorm d ON l.dormid = d.dormid  WHERE s.Sex = 'F' AND d.dorm_name = 'Smith Hall';
SELECT Dorm_amenity.amenity_name  FROM Dorm  JOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid  JOIN Dorm_amenity ON Has_amenity.amenid = Dorm_amenity.amenid  WHERE Dorm.dorm_name = 'Smith Hall';
SELECT Dorm_amenity.amenity_name  FROM Dorm  JOIN Has_amenity ON Dorm.dormid = Has_amenity.dormid  JOIN Dorm_amenity ON Has_amenity.amenid = Dorm_amenity.amenid  WHERE Dorm.dorm_name = 'Smith Hall';
SELECT amenity_name  FROM Dorm_amenity  JOIN Has_amenity ON Dorm_amenity.amenid = Has_amenity.amenid  JOIN Dorm ON Has_amenity.dormid = Dorm.dormid  WHERE Dorm.dorm_name = 'Smith Hall'  ORDER BY amenity_name;
SELECT amenity_name  FROM Dorm_amenity  JOIN Has_amenity ON Dorm_amenity.amenid = Has_amenity.amenid  JOIN Dorm ON Has_amenity.dormid = Dorm.dormid  WHERE Dorm.dorm_name = 'Smith Hall'  ORDER BY amenity_name;
SELECT amenity_name  FROM Dorm_amenity  JOIN Has_amenity ON Dorm_amenity.amenid = Has_amenity.amenid  GROUP BY amenid  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Dorm_amenity.amenity_name, COUNT(*) AS count  FROM Has_amenity  JOIN Dorm_amenity ON Has_amenity.amenid = Dorm_amenity.amenid  GROUP BY Has_amenity.amenid  ORDER BY count DESC  LIMIT 1;
SELECT S.fname FROM Student S JOIN Lives_in L ON S.StuID = L.stuid JOIN (     SELECT H.dormid     FROM Has_amenity H     GROUP BY H.dormid     HAVING COUNT(H.amenid) = (         SELECT MAX(H2.count_amen)         FROM (             SELECT H2.dormid, COUNT(H2.amenid) as count_amen             FROM Has_amenity H2             GROUP BY H2.dormid         ) AS H2     ) ) AS T ON L.dormid = T.dormid;
SELECT S.fname FROM Student S JOIN Lives_in L ON S.StuID = L.stuid JOIN (     SELECT H.dormid     FROM Has_amenity H     GROUP BY H.dormid     HAVING COUNT(H.amenid) = (         SELECT MAX(H2.count_amen)         FROM (             SELECT H2.dormid, COUNT(H2.amenid) as count_amen             FROM Has_amenity H2             GROUP BY H2.dormid         ) AS H2     ) ) AS T ON L.dormid = T.dormid;
SELECT D.dorm_name, D.student_capacity FROM Dorm D WHERE D.dormid = (     SELECT H.dormid     FROM(         SELECT COUNT(*) AS cnt, H1.dormid         FROM Has_amenity H1         GROUP BY H1.dormid     ) H     ORDER BY H.cnt     LIMIT 1 )
SELECT D.dorm_name, D.student_capacity FROM Dorm D WHERE D.dormid = (     SELECT H.dormid     FROM(         SELECT COUNT(*) AS cnt, H1.dormid         FROM Has_amenity H1         GROUP BY H1.dormid     ) H     ORDER BY H.cnt     LIMIT 1 )
SELECT dorm_name  FROM Dorm  WHERE dormid NOT IN (SELECT dormid FROM Has_amenity WHERE amenid = (SELECT amenid FROM Dorm_amenity WHERE amenity_name = 'TV Lounge'))
SELECT dorm_name  FROM Dorm  WHERE dormid NOT IN (SELECT dormid FROM Has_amenity WHERE amenid = (SELECT amenid FROM Dorm_amenity WHERE amenity_name = 'TV Lounge'))
SELECT S.Fname, S.LName  FROM Student S  JOIN Lives_in L ON S.StuID = L.stuid  JOIN Has_amenity H ON L.dormid = H.dormid  JOIN Dorm_amenity D_A ON H.amenid = D_A.amenid  WHERE D_A.amenity_name = 'TV Lounge';
SELECT S.Fname, S.LName  FROM Student S  JOIN Lives_in L ON S.StuID = L.stuid  JOIN Has_amenity H ON L.dormid = H.dormid  JOIN Dorm_amenity D_A ON H.amenid = D_A.amenid  WHERE D_A.amenity_name = 'TV Lounge';
SELECT S.Fname, S.Age  FROM Student S, Lives_in L, Dorm D, Has_amenity H, Dorm_amenity A  WHERE S.StuID = L.stuid AND L.dormid = D.dormid AND D.dormid != ALL (SELECT HA.dormid FROM Has_amenity HA, Dorm_amenity DA WHERE DA.amenid = HA.amenid AND DA.amenity_name = 'TV Lounge')
SELECT S.Fname, S.Age  FROM Student S  JOIN Lives_in L ON S.StuID = L.stuid  JOIN Has_amenity H ON L.dormid = H.dormid  JOIN Dorm_amenity D ON H.amenid = D.amenid  WHERE D.amenity_name = 'TV Lounge';
SELECT Dorm_amenity.amenity_name  FROM Dorm_amenity  JOIN Has_amenity ON Dorm_amenity.amenid = Has_amenity.amenid  JOIN Dorm ON Has_amenity.dormid = Dorm.dormid  JOIN Lives_in ON Dorm.dormid = Lives_in.dormid  JOIN Student ON Lives_in.stuid = Student.StuID  WHERE Student.LName = 'Smith';
SELECT Dorm_amenity.amenity_name  FROM Dorm_amenity  JOIN Has_amenity ON Dorm_amenity.amenid = Has_amenity.amenid  JOIN Dorm ON Has_amenity.dormid = Dorm.dormid  JOIN Lives_in ON Dorm.dormid = Lives_in.dormid  JOIN Student ON Lives_in.stuid = Student.stuid  WHERE Student.LName = 'Smith';
SELECT COUNT(*) FROM Customers;
SELECT COUNT(*) FROM Customers;
SELECT email_address, phone_number  FROM Customers  ORDER BY email_address, phone_number;
SELECT email_address, phone_number  FROM Customers  ORDER BY email_address, phone_number;
SELECT town_city, COUNT(customer_id) as customer_count  FROM Customers  WHERE customer_type_code = 'Good Credit Rating'  GROUP BY town_city  ORDER BY customer_count ASC  LIMIT 1;
SELECT town_city  FROM Customers  WHERE customer_type_code = 'Good Credit Rating'  GROUP BY town_city  ORDER BY COUNT(customer_id)  LIMIT 1;
SELECT p.product_name, COUNT(c.complaint_id) AS num_complaints FROM Products p LEFT JOIN Complaints c ON p.product_id = c.product_id GROUP BY p.product_id, p.product_name;
SELECT p.product_name, COUNT(c.complaint_id) AS complaint_count FROM Products p JOIN Complaints c ON p.product_id = c.product_id GROUP BY p.product_name;
SELECT C.email_address FROM Customers C JOIN Complaints Co ON C.customer_id = Co.customer_id JOIN (     SELECT product_id     FROM Complaints     GROUP BY product_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) P ON Co.product_id = P.product_id;
SELECT C.email_address FROM Customers C JOIN Complaints Co ON C.customer_id = Co.customer_id JOIN (     SELECT product_id     FROM Complaints     GROUP BY product_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) P ON Co.product_id = P.product_id;
SELECT p.product_name  FROM Products p JOIN Complaints c ON p.product_id = c.product_id WHERE c.customer_id = (     SELECT c2.customer_id     FROM Complaints c2     GROUP BY c2.customer_id     ORDER BY COUNT(c2.complaint_id) ASC     LIMIT 1 ) GROUP BY p.product_id ORDER BY COUNT(c.complaint_id) DESC LIMIT 1;
SELECT p.product_name  FROM Products p  JOIN Complaints c ON p.product_id = c.product_id  JOIN (     SELECT customer_id, COUNT(*) as cnt      FROM Complaints      GROUP BY customer_id      ORDER BY cnt      LIMIT 1 ) sub ON c.customer_id = sub.customer_id;
SELECT c.phone_number  FROM customers c JOIN complaints co ON c.customer_id = co.customer_id  ORDER BY co.date_complaint_raised DESC  LIMIT 1;
SELECT c.phone_number  FROM customers c JOIN complaints co ON c.customer_id = co.customer_id WHERE co.date_complaint_raised = (SELECT MAX(date_complaint_raised) FROM complaints);
SELECT email_address, phone_number  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Complaints);
SELECT email_address, phone_number  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Complaints);
SELECT phone_number FROM Customers UNION SELECT phone_number FROM Staff;
SELECT phone_number FROM Customers UNION SELECT phone_number FROM Staff;
SELECT product_description  FROM Products  WHERE product_name = 'Chocolate';
SELECT product_description  FROM Products  WHERE product_name = 'Chocolate';
SELECT product_name, product_category_code  FROM Products  ORDER BY product_price DESC  LIMIT 1;
SELECT product_name, product_category_code  FROM Products  WHERE product_price = (SELECT MAX(product_price) FROM Products);
SELECT p.product_price  FROM Products p  LEFT JOIN Complaints c ON p.product_id = c.product_id  WHERE c.product_id IS NULL;
SELECT product_price  FROM Products  WHERE product_id NOT IN (SELECT product_id FROM Complaints)
SELECT product_category_code, AVG(product_price)  FROM Products  GROUP BY product_category_code;
SELECT product_category_code, AVG(product_price)  FROM Products  GROUP BY product_category_code;
SELECT S.last_name  FROM Staff S JOIN Complaints C ON S.staff_id = C.staff_id JOIN Products P ON C.product_id = P.product_id WHERE P.product_price = (     SELECT MIN(product_price)      FROM Products )
SELECT S.last_name  FROM Staff S JOIN Complaints C ON S.staff_id = C.staff_id JOIN Products P ON C.product_id = P.product_id WHERE P.product_price = (SELECT MIN(product_price) FROM Products) ORDER BY S.last_name DESC LIMIT 1;
SELECT complaint_status_code, COUNT(*) as record_count  FROM Complaints  GROUP BY complaint_status_code  HAVING COUNT(*) > 3;
SELECT complaint_status_code  FROM Complaints  GROUP BY complaint_status_code  HAVING COUNT(complaint_id) > 3;
SELECT last_name FROM Staff WHERE email_address LIKE '%wrau%';
SELECT last_name  FROM Staff  WHERE email_address LIKE '%wrau%';
SELECT COUNT(customer_id)  FROM Customers  WHERE customer_type_code = (     SELECT customer_type_code      FROM Customers      GROUP BY customer_type_code      ORDER BY COUNT(customer_id) DESC      LIMIT 1 )
SELECT COUNT(*)  FROM Customers  WHERE customer_type_code = (SELECT customer_type_code                              FROM Customers                              GROUP BY customer_type_code                              ORDER BY COUNT(*) DESC                              LIMIT 1);
SELECT T1.last_name FROM Staff AS T1 JOIN Complaints AS T2 ON T1.staff_id = T2.staff_id ORDER BY T2.date_complaint_raised ASC LIMIT 1;
SELECT T1.last_name  FROM Staff AS T1  JOIN Complaints AS T2 ON T1.staff_id = T2.staff_id  WHERE T2.date_complaint_raised = (SELECT MIN(date_complaint_raised) FROM Complaints)
SELECT COUNT(DISTINCT complaint_type_code) FROM Complaints;
SELECT COUNT(DISTINCT complaint_type_code) FROM Complaints;
SELECT address_line_1, address_line_2  FROM Customers  WHERE email_address = 'vbogisich@example.org';
SELECT address_line_1, address_line_2  FROM Customers  WHERE email_address = 'vbogisich@example.org';
SELECT complaint_status_code, COUNT(*)  FROM Complaints  WHERE complaint_type_code = 'Product Failure'  GROUP BY complaint_status_code;
SELECT complaint_status_code, COUNT(*)  FROM Complaints  WHERE complaint_type_code = 'Product Failure'  GROUP BY complaint_status_code;
SELECT s.first_name  FROM Staff s JOIN Complaints c ON s.staff_id = c.staff_id GROUP BY s.staff_id, s.first_name ORDER BY COUNT(c.complaint_id) DESC LIMIT 5;
SELECT T1.first_name  FROM Staff AS T1  JOIN Complaints AS T2 ON T1.staff_id = T2.staff_id  GROUP BY T1.staff_id  ORDER BY COUNT(T2.complaint_id) DESC  LIMIT 5;
SELECT state, COUNT(customer_id) as num_customers FROM Customers GROUP BY state ORDER BY num_customers DESC LIMIT 1;
SELECT state  FROM Customers  GROUP BY state  ORDER BY COUNT(customer_id) DESC  LIMIT 1;
SELECT COUNT(*) FROM submission;
SELECT COUNT(*) FROM submission;
SELECT Author  FROM submission  ORDER BY Scores ASC;
SELECT T1.Author  FROM submission AS T1  JOIN Acceptance AS T2 ON T1.Submission_ID = T2.Submission_ID  ORDER BY T1.Scores ASC;
SELECT Author, College FROM submission;
SELECT Author, College  FROM submission;
SELECT Author  FROM submission  WHERE College IN ('Florida', 'Temple');
SELECT Author  FROM submission  WHERE College IN ('Florida', 'Temple');
SELECT AVG(Scores) FROM submission;
SELECT AVG(Scores) FROM submission;
SELECT Author  FROM submission  WHERE Scores = (SELECT MAX(Scores) FROM submission);
SELECT Author  FROM submission  WHERE Scores = (SELECT MAX(Scores) FROM submission);
SELECT College, COUNT(Author) AS NumberOfAuthors FROM submission GROUP BY College;
SELECT College, COUNT(DISTINCT Author)  FROM submission  GROUP BY College;
SELECT College, COUNT(*) AS Count  FROM submission  GROUP BY College  ORDER BY Count DESC  LIMIT 1;
SELECT College, COUNT(DISTINCT Author) as Num_of_Authors  FROM submission  GROUP BY College  ORDER BY Num_of_Authors DESC  LIMIT 1;
SELECT College  FROM submission  WHERE Scores > 90  INTERSECT  SELECT College  FROM submission  WHERE Scores < 80;
SELECT College  FROM submission  WHERE Scores > 90  INTERSECT  SELECT College  FROM submission  WHERE Scores < 80;
SELECT submission.Author, Acceptance.Result  FROM submission  JOIN Acceptance ON submission.Submission_ID = Acceptance.Submission_ID;
SELECT s.Submission_ID, s.Author, a.Result FROM submission s JOIN Acceptance a ON s.Submission_ID = a.Submission_ID;
SELECT A.Result  FROM Acceptance A  JOIN submission S ON A.Submission_ID = S.Submission_ID  WHERE S.Scores = (SELECT MAX(Scores) FROM submission);
SELECT s.Submission_ID, s.Scores, a.Result  FROM submission s  JOIN Acceptance a ON s.Submission_ID = a.Submission_ID  WHERE s.Scores = (SELECT MAX(Scores) FROM submission) AND a.Result = 'Accepted';
SELECT s.Author, COUNT(DISTINCT a.Workshop_ID)  FROM submission s  JOIN Acceptance a ON s.Submission_ID = a.Submission_ID  GROUP BY s.Author;
SELECT s.Author, COUNT(DISTINCT a.Workshop_ID) AS NumOfWorkshops FROM submission s JOIN Acceptance a ON s.Submission_ID = a.Submission_ID GROUP BY s.Author;
SELECT s.Author FROM submission s JOIN Acceptance a ON s.Submission_ID = a.Submission_ID GROUP BY s.Author HAVING COUNT(DISTINCT a.Workshop_ID) > 1;
SELECT Author  FROM submission  WHERE Submission_ID IN (     SELECT Submission_ID      FROM (         SELECT Submission_ID, COUNT(DISTINCT Workshop_ID) as workshop_count          FROM Acceptance          GROUP BY Submission_ID     ) AS temp_table      WHERE workshop_count > 1 ) GROUP BY Author;
SELECT Date, Venue FROM workshop ORDER BY Venue ASC;
SELECT Date, Venue  FROM workshop  ORDER BY Venue ASC;
Error: 第 5843 个样本有 4 个SQL。
Error: 第 5844 个样本有 7 个SQL。
SELECT COUNT(*) FROM Investors;
SELECT Investor_details FROM Investors;
SELECT DISTINCT lot_details FROM Lots;
SELECT MAX(amount_of_transaction) FROM Transactions;
SELECT date_of_transaction, share_count  FROM Transactions;
SELECT SUM(share_count) AS total_share_of_transactions  FROM Transactions;
SELECT transaction_id  FROM Transactions  WHERE transaction_type_code = 'PUR';
SELECT date_of_transaction  FROM Transactions  WHERE transaction_type_code = 'SALE';
SELECT AVG(amount_of_transaction)  FROM Transactions  WHERE transaction_type_code = 'SALE';
SELECT transaction_type_description  FROM Ref_Transaction_Types  WHERE transaction_type_code = 'PUR';
SELECT MIN(amount_of_transaction)  FROM Transactions  WHERE transaction_type_code = 'PUR' AND share_count > 50;
Error: 第 5856 个样本有 2 个SQL。
SELECT date_of_transaction  FROM Transactions  WHERE share_count > 100 OR amount_of_transaction > 1000;
SELECT T2.transaction_type_description, T1.date_of_transaction  FROM Transactions AS T1  JOIN Ref_Transaction_Types AS T2  ON T1.transaction_type_code = T2.transaction_type_code  WHERE T1.share_count < 10;
SELECT i.Investor_details FROM Investors i JOIN Transactions t ON i.investor_id = t.investor_id WHERE t.share_count > 100;
SELECT COUNT(DISTINCT transaction_type_code)  FROM Transactions;
SELECT Lots.lot_details, Investors.investor_id  FROM Lots  JOIN Investors ON Lots.investor_id = Investors.investor_id;
SELECT L.lot_details FROM Lots L JOIN Investors I ON L.investor_id = I.investor_id WHERE I.Investor_details = 'l';
SELECT T2.purchase_details FROM Transactions AS T1 JOIN Purchases AS T2 ON T1.transaction_id = T2.purchase_transaction_id WHERE T1.amount_of_transaction > 10000;
SELECT Sales.sales_details, Transactions.date_of_transaction  FROM Transactions  JOIN Sales ON Transactions.transaction_id = Sales.sales_transaction_id  WHERE Transactions.amount_of_transaction < 3000;
SELECT L.lot_details  FROM Lots L JOIN Transactions_Lots TL ON L.lot_id = TL.lot_id JOIN Transactions T ON TL.transaction_id = T.transaction_id WHERE T.share_count < 50;
SELECT L.lot_details FROM Lots L JOIN Transactions_Lots TL ON L.lot_id = TL.lot_id JOIN Transactions T ON TL.transaction_id = T.transaction_id WHERE T.share_count > 100 AND T.transaction_type_code = 'PUR';
SELECT Ref_Transaction_Types.transaction_type_description, AVG(Transactions.amount_of_transaction)  FROM Transactions  JOIN Ref_Transaction_Types  ON Transactions.transaction_type_code = Ref_Transaction_Types.transaction_type_code  GROUP BY Ref_Transaction_Types.transaction_type_description;
SELECT      T1.transaction_type_description,     MAX(T2.share_count) AS max_share_count,     MIN(T2.share_count) AS min_share_count FROM      Ref_Transaction_Types T1 JOIN      Transactions T2 ON T1.transaction_type_code = T2.transaction_type_code GROUP BY      T1.transaction_type_description;
SELECT Investor_id, AVG(share_count)  FROM Transactions  GROUP BY Investor_id;
SELECT Investors.investor_id, AVG(Transactions.share_count) AS avg_share_count FROM Transactions JOIN Investors ON Transactions.investor_id = Investors.investor_id GROUP BY Investors.investor_id ORDER BY avg_share_count;
SELECT Investor_id, AVG(amount_of_transaction)  FROM Transactions  GROUP BY Investor_id;
SELECT T1.lot_id, AVG(T2.amount_of_transaction)  FROM Transactions_Lots AS T1  JOIN Transactions AS T2 ON T1.transaction_id = T2.transaction_id  GROUP BY T1.lot_id;
SELECT L.lot_id, AVG(T.amount_of_transaction) AS avg_amount  FROM Transactions AS T  JOIN Transactions_Lots AS TL ON T.transaction_id = TL.transaction_id  JOIN Lots AS L ON L.lot_id = TL.lot_id  GROUP BY L.lot_id  ORDER BY avg_amount DESC;
SELECT Investor_id, COUNT(transaction_id)  FROM Transactions  WHERE transaction_type_code = 'SALE'  GROUP BY Investor_id  HAVING COUNT(transaction_id) > 0;
SELECT Investor_id, COUNT(transaction_id)  FROM Transactions  GROUP BY Investor_id;
SELECT transaction_type_code  FROM Transactions  GROUP BY transaction_type_code  ORDER BY COUNT(*)  LIMIT 1;
SELECT transaction_type_code  FROM Transactions  GROUP BY transaction_type_code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T2.transaction_type_description  FROM Transactions AS T1  JOIN Ref_Transaction_Types AS T2  ON T1.transaction_type_code = T2.transaction_type_code  GROUP BY T1.transaction_type_code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT i.investor_id, i.Investor_details FROM Investors i JOIN Transactions t ON i.investor_id = t.investor_id GROUP BY i.investor_id, i.Investor_details ORDER BY COUNT(t.transaction_id) DESC LIMIT 1;
SELECT i.investor_id, i.Investor_details FROM Investors i JOIN Transactions t ON i.investor_id = t.investor_id GROUP BY i.investor_id, i.Investor_details ORDER BY COUNT(t.transaction_id) DESC LIMIT 3;
SELECT investor_id  FROM Transactions  GROUP BY investor_id  HAVING COUNT(transaction_id) >= 2;
SELECT i.investor_id, i.Investor_details FROM Investors i JOIN Transactions t ON i.investor_id = t.investor_id WHERE t.transaction_type_code = 'SALE' GROUP BY i.investor_id, i.Investor_details HAVING COUNT(t.transaction_id) >= 2;
SELECT date_of_transaction  FROM Transactions  WHERE share_count >= 100 OR amount_of_transaction > 100;
SELECT Sales.sales_details, Purchases.purchase_details  FROM ((Transactions JOIN Sales ON Transactions.sale_transaction_id = Sales.sales_transaction_id) UNION (Transactions JOIN Purchases ON Transactions.purchase_transaction_id = Purchases.purchase_transaction_id))
SELECT L.lot_details  FROM Lots L LEFT JOIN Transactions_Lots TL ON L.lot_id = TL.lot_id WHERE TL.lot_id IS NULL;
SELECT COUNT(*) FROM Hotels;
SELECT COUNT(*) FROM Hotels;
SELECT DISTINCT price_range FROM cre_Theme_park.Hotels;
SELECT price_range FROM Hotels;
SELECT DISTINCT Location_Name FROM Locations;
SELECT DISTINCT Location_Name FROM Locations;
SELECT Name, Other_Details FROM Staff;
SELECT Name, Other_Details FROM Staff;
SELECT * FROM Visitors;
SELECT Tourist_Details FROM Visitors;
SELECT price_range FROM Hotels WHERE star_rating_code = '5';
SELECT price_range FROM Hotels WHERE star_rating_code = '5';
SELECT AVG(price_range)  FROM Hotels  WHERE star_rating_code = 5 AND pets_allowed_yn = 'Y';
SELECT AVG(price_range)  FROM Hotels  WHERE star_rating_code = 5 AND pets_allowed_yn = 'Y';
SELECT Address FROM Locations WHERE Location_Name = 'UK Gallery';
SELECT Address FROM Locations WHERE Location_Name = 'UK Gallery';
SELECT Other_Details  FROM Locations  WHERE Location_Name = 'UK Gallery';
SELECT Other_Details FROM Locations WHERE Location_Name = 'UK Gallery';
SELECT Location_Name FROM Locations WHERE Location_Name LIKE '%film%';
SELECT * FROM Locations WHERE Location_Name LIKE '%film%';
SELECT COUNT(DISTINCT Name) FROM Photos;
SELECT COUNT(DISTINCT Name) FROM Photos;
SELECT DISTINCT Visit_Date FROM Visits;
SELECT DISTINCT Visit_Date FROM Visits;
SELECT Name  FROM Tourist_Attractions  WHERE How_to_Get_There = 'bus';
SELECT ta.Name  FROM Tourist_Attractions ta  WHERE ta.How_to_Get_There = 'bus';
SELECT Name, Opening_Hours  FROM Tourist_Attractions  WHERE How_to_Get_There = 'bus' OR How_to_Get_There = 'walk';
SELECT Name, Opening_Hours  FROM Tourist_Attractions  WHERE How_to_Get_There = 'bus' OR How_to_Get_There = 'walk';
SELECT Ref_Hotel_Star_Ratings.star_rating_description  FROM Ref_Hotel_Star_Ratings  JOIN Hotels ON Ref_Hotel_Star_Ratings.star_rating_code = Hotels.star_rating_code  WHERE Hotels.price_range > 10000;
SELECT Ref_Hotel_Star_Ratings.star_rating_description  FROM Ref_Hotel_Star_Ratings  JOIN Hotels ON Ref_Hotel_Star_Ratings.star_rating_code = Hotels.star_rating_code  WHERE Hotels.price_range > 10000
SELECT Museums.Museum_Details, Tourist_Attractions.Opening_Hours  FROM Museums  JOIN Tourist_Attractions  ON Museums.Museum_ID = Tourist_Attractions.Tourist_Attraction_ID  WHERE Tourist_Attractions.Attraction_Type_Code = 'Museum';
SELECT Museums.Museum_Details, Tourist_Attractions.Opening_Hours  FROM Museums  JOIN Tourist_Attractions  ON Museums.Museum_ID = Tourist_Attractions.Tourist_Attraction_ID  WHERE Tourist_Attractions.Attraction_Type_Code = 'Museum';
SELECT T1.Name  FROM Tourist_Attractions AS T1  JOIN Photos AS T2  ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID  WHERE T2.Name = "game1";
SELECT ta.Name  FROM Tourist_Attractions ta  JOIN Photos p ON ta.Tourist_Attraction_ID = p.Tourist_Attraction_ID  WHERE p.Name = "game1";
SELECT T2.Name, T2.Description  FROM Tourist_Attractions AS T1  JOIN Photos AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID  WHERE T1.Name = 'film festival';
SELECT T2.Name, T2.Description  FROM Tourist_Attractions AS T1  JOIN Photos AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID  WHERE T1.Name = 'film festival';
SELECT ta.Other_Details, ta.How_to_Get_There  FROM Tourist_Attractions ta  JOIN Royal_Family rf  ON ta.Tourist_Attraction_ID = rf.Royal_Family_ID;
Error: 第 5923 个样本有 2 个SQL。
SELECT Shop_Details  FROM Shops  WHERE Shop_ID IN (     SELECT Tourist_Attraction_ID      FROM Tourist_Attractions      WHERE How_to_Get_There = 'walk' );
SELECT S.Shop_Details FROM Shops S JOIN Tourist_Attractions TA ON S.Shop_ID = TA.Tourist_Attraction_ID WHERE TA.How_to_Get_There = 'walk';
SELECT S.Name  FROM Staff S  JOIN Tourist_Attractions T  ON S.Tourist_Attraction_ID = T.Tourist_Attraction_ID  WHERE T.Name = 'US museum';
SELECT S.Name  FROM Staff S  JOIN Tourist_Attractions T  ON S.Tourist_Attraction_ID = T.Tourist_Attraction_ID  WHERE T.Name = 'US museum';
SELECT Market_Details  FROM Street_Markets  WHERE How_to_Get_There IN ('walk', 'bus');
SELECT Market_Details  FROM Street_Markets  WHERE How_to_Get_There IN ('walk', 'bus');
SELECT Visit_Date, Visit_Details  FROM Visits  WHERE Tourist_ID = (SELECT Tourist_ID FROM Visitors WHERE Tourist_Details = 'Vincent');
SELECT Visits.Visit_Date, Visits.Visit_Details  FROM Visits  JOIN Visitors ON Visits.Tourist_ID = Visitors.Tourist_ID  WHERE Visitors.Tourist_Details = 'Vincent';
SELECT ta.Name  FROM Tourist_Attractions ta  JOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID  JOIN Visitors vis ON v.Tourist_ID = vis.Tourist_ID  WHERE vis.Tourist_Details = 'Vincent';
SELECT ta.Name  FROM Tourist_Attractions ta  JOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID  JOIN Visitors vis ON v.Tourist_ID = vis.Tourist_ID  WHERE vis.Tourist_Details = 'Vincent';
SELECT T2.Name, T1.Visit_Date  FROM Visits AS T1  JOIN Tourist_Attractions AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID  JOIN Visitors AS T3 ON T1.Tourist_ID = T3.Tourist_ID  WHERE T3.Tourist_Details IN ('Vincent', 'Vivian');
SELECT      t.Name AS Tourist_Attraction_Name,      v.Visit_Date FROM      Tourist_Attractions t JOIN      Visits v ON t.Tourist_Attraction_ID = v.Tourist_Attraction_ID JOIN      Visitors vis ON v.Tourist_ID = vis.Tourist_ID WHERE      vis.Tourist_Details IN ('Vincent', 'Vivian');
SELECT Ref_Hotel_Star_Ratings.star_rating_code, AVG(Hotels.price_range)  FROM Hotels  JOIN Ref_Hotel_Star_Ratings ON Hotels.star_rating_code = Ref_Hotel_Star_Ratings.star_rating_code  GROUP BY Ref_Hotel_Star_Ratings.star_rating_code;
SELECT Ref_Hotel_Star_Ratings.star_rating_code, AVG(Hotels.price_range)  FROM Hotels  JOIN Ref_Hotel_Star_Ratings ON Hotels.star_rating_code = Ref_Hotel_Star_Ratings.star_rating_code  GROUP BY Ref_Hotel_Star_Ratings.star_rating_code;
SELECT pets_allowed_yn, AVG(price_range)  FROM Hotels  GROUP BY pets_allowed_yn;
SELECT pets_allowed_yn, AVG(price_range)  FROM Hotels  GROUP BY pets_allowed_yn;
SELECT hotel_id, star_rating_code  FROM Hotels  ORDER BY price_range ASC;
SELECT hotel_id, star_rating_code  FROM Hotels  ORDER BY price_range ASC;
SELECT other_hotel_details FROM Hotels ORDER BY price_range DESC LIMIT 3;
SELECT other_hotel_details FROM Hotels ORDER BY price_range DESC LIMIT 3;
SELECT H.other_hotel_details, H.star_rating_code  FROM Hotels AS H  JOIN Ref_Hotel_Star_Ratings AS R ON H.star_rating_code = R.star_rating_code  ORDER BY H.price_range ASC  LIMIT 3;
SELECT other_hotel_details, star_rating_code  FROM Hotels  ORDER BY price_range ASC  LIMIT 3;
SELECT How_to_Get_There, COUNT(*) AS Num_of_Visitors FROM Tourist_Attractions JOIN Visits ON Tourist_Attractions.Tourist_Attraction_ID = Visits.Tourist_Attraction_ID GROUP BY How_to_Get_There ORDER BY Num_of_Visitors DESC LIMIT 1;
SELECT How_to_Get_There, COUNT(*) AS Count  FROM Tourist_Attractions  GROUP BY How_to_Get_There  ORDER BY Count DESC  LIMIT 1;
SELECT T1.Attraction_Type_Description, T1.Attraction_Type_Code  FROM Ref_Attraction_Types AS T1  JOIN Tourist_Attractions AS T2  ON T1.Attraction_Type_Code = T2.Attraction_Type_Code  GROUP BY T1.Attraction_Type_Code  ORDER BY COUNT(T2.Tourist_Attraction_ID) DESC  LIMIT 1;
SELECT Ref_Attraction_Types.Attraction_Type_Code, Ref_Attraction_Types.Attraction_Type_Description  FROM Ref_Attraction_Types  JOIN Tourist_Attractions ON Ref_Attraction_Types.Attraction_Type_Code = Tourist_Attractions.Attraction_Type_Code  GROUP BY Ref_Attraction_Types.Attraction_Type_Code  ORDER BY COUNT(Tourist_Attractions.Tourist_Attraction_ID) DESC  LIMIT 1;
SELECT      How_to_Get_There,      COUNT(Tourist_Attraction_ID) AS Number_of_Attractions FROM      Tourist_Attractions GROUP BY      How_to_Get_There;
SELECT      How_to_Get_There,      COUNT(Tourist_Attraction_ID) AS Number_of_Attractions FROM      Tourist_Attractions GROUP BY      How_to_Get_There;
SELECT T1.Name, T1.Tourist_Attraction_ID, COUNT(T2.Tourist_Attraction_ID) AS Number_of_Visits FROM Tourist_Attractions T1 LEFT JOIN Visits T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T1.Tourist_Attraction_ID, T1.Name;
SELECT      Tourist_Attractions.Name,      Tourist_Attractions.Tourist_Attraction_ID,      COUNT(Visits.Visit_ID) as Number_of_Visits FROM      Tourist_Attractions  LEFT JOIN      Visits  ON      Tourist_Attractions.Tourist_Attraction_ID = Visits.Tourist_Attraction_ID GROUP BY      Tourist_Attractions.Tourist_Attraction_ID,      Tourist_Attractions.Name;
SELECT T1.Name, T1.Tourist_Attraction_ID  FROM Tourist_Attractions AS T1  JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID  GROUP BY T1.Tourist_Attraction_ID  HAVING COUNT(T2.Visit_ID) >= 2;
SELECT Tourist_Attractions.Name, Tourist_Attractions.Tourist_Attraction_ID  FROM Tourist_Attractions  JOIN Visits ON Tourist_Attractions.Tourist_Attraction_ID = Visits.Tourist_Attraction_ID  GROUP BY Tourist_Attractions.Tourist_Attraction_ID  HAVING COUNT(Visits.Visit_ID) >= 2;
SELECT T1.Name, T1.Tourist_Attraction_ID  FROM Tourist_Attractions AS T1  JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID  GROUP BY T2.Tourist_Attraction_ID  HAVING COUNT(*) <= 1;
SELECT T1.Name, T1.Tourist_Attraction_ID  FROM Tourist_Attractions AS T1  JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID  GROUP BY T2.Tourist_Attraction_ID  HAVING COUNT(T2.Visit_ID) <= 1;
SELECT Name  FROM Tourist_Attractions  WHERE How_to_Get_There = 'walk' OR Location_ID IN (     SELECT Location_ID      FROM Locations      WHERE Address = '660 Shea Crescent' )
SELECT Name  FROM Tourist_Attractions  WHERE How_to_Get_There = 'walk'  OR Location_ID IN (SELECT Location_ID FROM Locations WHERE Address = '660 Shea Crescent');
SELECT T1.Name  FROM Tourist_Attractions T1 JOIN Tourist_Attraction_Features T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN Features T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.Feature_Details IN ('parking', 'shopping');
SELECT T.Name  FROM Tourist_Attractions T JOIN Tourist_Attraction_Features TAF ON T.Tourist_Attraction_ID = TAF.Tourist_Attraction_ID JOIN Features F ON TAF.Feature_ID = F.Feature_ID WHERE F.Feature_Details = 'parking' OR F.Feature_Details = 'shopping';
SELECT Name  FROM Tourist_Attractions  WHERE How_to_Get_There = 'bus' OR Location_ID IN (     SELECT Location_ID      FROM Locations      WHERE Address = '254 Ottilie Junction' );
SELECT Name  FROM Tourist_Attractions  WHERE How_to_Get_There = 'bus'  OR Location_ID IN (SELECT Location_ID FROM Locations WHERE Address = '254 Ottilie Junction');
SELECT T2.Name  FROM Visits AS T1  JOIN Tourist_Attractions AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID  JOIN Visitors AS T3 ON T1.Tourist_ID = T3.Tourist_ID  WHERE T3.Tourist_Details = 'Vincent' OR T3.Tourist_Details = 'Marcelle'
SELECT ta.Name  FROM Tourist_Attractions ta  JOIN Visits v ON ta.Tourist_Attraction_ID = v.Tourist_Attraction_ID  JOIN Visitors vis ON v.Tourist_ID = vis.Tourist_ID  WHERE vis.Tourist_Details IN ('Vincent', 'Marcelle') GROUP BY ta.Name;
SELECT ta.Name  FROM Tourist_Attractions ta  JOIN Visits v1 ON ta.Tourist_Attraction_ID = v1.Tourist_Attraction_ID  JOIN Visitors vis1 ON v1.Tourist_ID = vis1.Tourist_ID  WHERE vis1.Tourist_Details = 'Alison'  AND NOT EXISTS (SELECT 1                  FROM Visits v2                  JOIN Visitors vis2 ON v2.Tourist_ID = vis2.Tourist_ID                  WHERE v2.Tourist_Attraction_ID = ta.Tourist_Attraction_ID                  AND vis2.Tourist_Details = 'Rosalind')
SELECT ta.Name  FROM Tourist_Attractions ta  JOIN Visits v1 ON ta.Tourist_Attraction_ID = v1.Tourist_Attraction_ID  JOIN Visitors vis1 ON v1.Tourist_ID = vis1.Tourist_ID  WHERE vis1.Tourist_Details = 'Alison'  AND NOT EXISTS (SELECT *                  FROM Visits v2                  JOIN Visitors vis2 ON v2.Tourist_ID = vis2.Tourist_ID                  WHERE v2.Tourist_Attraction_ID = ta.Tourist_Attraction_ID                  AND vis2.Tourist_Details = 'Rosalind')
SELECT COUNT(*)  FROM Visitors  WHERE Tourist_ID NOT IN (SELECT Tourist_ID FROM Visits)
SELECT COUNT(*)  FROM Visitors  WHERE Tourist_ID NOT IN (SELECT Tourist_ID FROM Visits)
SELECT COUNT(*) FROM Video_Games;
SELECT COUNT(*) FROM Video_Games;
SELECT COUNT(DISTINCT GType) FROM Video_Games;
SELECT COUNT(DISTINCT GType) FROM Video_Games;
SELECT DISTINCT GType FROM Video_Games;
SELECT DISTINCT GType FROM Video_Games;
SELECT GName, GType  FROM Video_Games  ORDER BY GName;
SELECT GName, GType  FROM Video_Games  ORDER BY GName ASC;
SELECT GName  FROM Video_Games  WHERE GType = 'Collectible card game';
SELECT GName  FROM Video_Games  WHERE GType = 'Collectible Card'
SELECT GType  FROM Video_Games  WHERE GName = 'Call of Destiny';
SELECT GType  FROM Video_Games  WHERE GName = 'Call of Destiny';
SELECT COUNT(*)  FROM Video_Games  WHERE GType = 'Massively multiplayer online game';
SELECT COUNT(*)  FROM Video_Games  WHERE GType = 'Massively multiplayer online';
SELECT GType, COUNT(*) AS NumOfGames FROM Video_Games GROUP BY GType;
SELECT GType, COUNT(*)  FROM Video_Games  GROUP BY GType;
SELECT GType, COUNT(*) AS NumOfGames FROM Video_Games GROUP BY GType ORDER BY NumOfGames DESC LIMIT 1;
SELECT GType, COUNT(*) AS TotalGames  FROM Video_Games  GROUP BY GType  ORDER BY TotalGames DESC  LIMIT 1;
SELECT GType, COUNT(*) AS Game_Count FROM Video_Games GROUP BY GType ORDER BY Game_Count ASC LIMIT 1;
SELECT GType, COUNT(GameID) as GameCount  FROM Video_Games  GROUP BY GType  ORDER BY GameCount  LIMIT 1;
SELECT StuID FROM Student WHERE city_code = 'CHI';
SELECT StuID FROM Student WHERE city_code = 'CHI';
SELECT StuID FROM Student WHERE Advisor = 1121;
SELECT StuID FROM Student WHERE Advisor = 1121;
SELECT Fname  FROM Student  WHERE Major = 600;
SELECT Fname  FROM Student  WHERE Major = 600;
SELECT Major, AVG(Age) as Average_Age, MIN(Age) as Minimum_Age, MAX(Age) as Maximum_Age  FROM Student  GROUP BY Major;
SELECT Major, AVG(Age) as Average_Age, MIN(Age) as Minimum_Age, MAX(Age) as Maximum_Age  FROM Student  GROUP BY Major;
SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(StuID) >= 2;
SELECT DISTINCT Advisor FROM Student;
SELECT COUNT(DISTINCT SportName) FROM SportsInfo;
SELECT COUNT(DISTINCT SportName) FROM SportsInfo;
SELECT COUNT(*)  FROM SportsInfo;
SELECT COUNT(DISTINCT StuID) FROM SportsInfo;
SELECT StuID FROM SportsInfo WHERE OnScholarship = true;
SELECT StuID  FROM SportsInfo  WHERE OnScholarship = 'Yes';
SELECT Student.LName  FROM Student  JOIN SportsInfo ON Student.StuID = SportsInfo.StuID  WHERE SportsInfo.OnScholarship = 'Yes';
SELECT DISTINCT S.LName  FROM Student S JOIN SportsInfo Sp ON S.StuID = Sp.StuID WHERE Sp.OnScholarship = 'Yes';
SELECT COUNT(*)  FROM Plays_Games;
SELECT COUNT(*) FROM Plays_Games;
SELECT COUNT(*)  FROM Plays_Games pg JOIN SportsInfo si ON pg.StuID = si.StuID WHERE si.SportName = 'football' AND si.OnScholarship = 'yes';
SELECT COUNT(*)  FROM SportsInfo  WHERE SportName = 'football' AND OnScholarship = 'Yes';
SELECT SportName, COUNT(*) AS NumOfStudents  FROM SportsInfo  GROUP BY SportName;
SELECT SportsInfo.SportName, COUNT(DISTINCT SportsInfo.StuID) AS NumOfStudents FROM SportsInfo GROUP BY SportsInfo.SportName;
SELECT      StuID,      COUNT(SportName) AS Num_Sports,      SUM(GamesPlayed) AS Total_Games_Played FROM      SportsInfo GROUP BY      StuID;
SELECT      StuID,      COUNT(DISTINCT SportName) AS Num_Sports,     COUNT(DISTINCT GameID) AS Num_Games FROM      Student LEFT JOIN      Plays_Games ON Student.StuID = Plays_Games.StuID LEFT JOIN      SportsInfo ON Student.StuID = SportsInfo.StuID GROUP BY      StuID;
SELECT StuID  FROM SportsInfo  GROUP BY StuID  HAVING SUM(HoursPerWeek) > 10;
SELECT StuID  FROM SportsInfo  GROUP BY StuID  HAVING SUM(HoursPerWeek) > 10;
SELECT S.Fname, S.LName  FROM Student S JOIN (     SELECT StuID, COUNT(*) as sport_count     FROM SportsInfo     GROUP BY StuID     ORDER BY sport_count DESC     LIMIT 1 ) SI ON S.StuID = SI.StuID;
SELECT S.Fname, S.LName  FROM Student S JOIN SportsInfo SI ON S.StuID = SI.StuID  GROUP BY S.StuID, S.Fname, S.LName  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT SportName FROM SportsInfo WHERE OnScholarship = 'Yes' GROUP BY SportName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT SportName FROM SportsInfo WHERE OnScholarship = 'Yes' GROUP BY SportName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT StuID  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM SportsInfo)
SELECT StuID  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM SportsInfo)
SELECT StuID  FROM Student  JOIN SportsInfo ON Student.StuID = SportsInfo.StuID  WHERE Major = 600 AND OnScholarship = 'Yes';
SELECT StuID  FROM Student  JOIN SportsInfo ON Student.StuID = SportsInfo.StuID  WHERE Major = 600 AND OnScholarship = 'Yes';
SELECT Student.StuID  FROM Student  JOIN SportsInfo ON Student.StuID = SportsInfo.StuID  WHERE Student.Sex = 'F' AND SportsInfo.SportName = 'football';
SELECT s.StuID  FROM Student s  JOIN SportsInfo sp ON s.StuID = sp.StuID  WHERE s.Sex = 'F' AND sp.SportName = 'football';
SELECT Student.StuID  FROM Student  LEFT JOIN SportsInfo ON Student.StuID = SportsInfo.StuID  WHERE Student.Sex = 'M' AND SportsInfo.SportName != 'Football' OR SportsInfo.SportName IS NULL;
SELECT StuID  FROM Student  WHERE Sex = 'M'  AND StuID NOT IN (SELECT StuID FROM SportsInfo WHERE SportName = 'Football')
SELECT SportsInfo.HoursPerWeek, SportsInfo.GamesPlayed  FROM SportsInfo  JOIN Student ON SportsInfo.StuID = Student.StuID  WHERE Student.Fname = 'David' AND Student.LName = 'Shieber';
SELECT SUM(HoursPerWeek) AS Total_Hours_Per_Week, SUM(GamesPlayed) AS Total_Games_Played  FROM SportsInfo  WHERE StuID IN (     SELECT StuID      FROM Student      WHERE Fname = 'David' AND LName = 'Shieber' );
SELECT SportsInfo.HoursPerWeek, SportsInfo.GamesPlayed FROM SportsInfo JOIN Student ON SportsInfo.StuID = Student.StuID WHERE Student.Age < 20;
SELECT SUM(HoursPerWeek), SUM(GamesPlayed) FROM SportsInfo JOIN Student ON SportsInfo.StuID = Student.StuID WHERE Student.Age < 20;
SELECT COUNT(DISTINCT StuID)  FROM Plays_Games;
SELECT COUNT(DISTINCT StuID) FROM Plays_Games;
SELECT StuID  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Plays_Games)
SELECT StuID  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Plays_Games)
SELECT DISTINCT P.StuID  FROM Plays_Games P  JOIN Student S ON P.StuID = S.StuID JOIN SportsInfo SI ON S.StuID = SI.StuID;
SELECT DISTINCT P.StuID  FROM Plays_Games P  INNER JOIN SportsInfo S  ON P.StuID = S.StuID;
SELECT GameID, SUM(Hours_Played)  FROM Plays_Games  GROUP BY GameID;
SELECT GameID, SUM(Hours_Played) as Total_Hours_Played  FROM Plays_Games  GROUP BY GameID;
SELECT Student.StuID, SUM(Plays_Games.Hours_Played) AS Total_Hours_Played FROM Student JOIN Plays_Games ON Student.StuID = Plays_Games.StuID GROUP BY Student.StuID;
SELECT StuID, SUM(Hours_Played) AS Total_Hours_Played FROM Plays_Games GROUP BY StuID;
SELECT VG.GName  FROM Video_Games VG  JOIN Plays_Games PG ON VG.GameID = PG.GameID  GROUP BY VG.GName  ORDER BY SUM(PG.Hours_Played) DESC  LIMIT 1;
SELECT GName  FROM Video_Games  JOIN Plays_Games ON Video_Games.GameID = Plays_Games.GameID  GROUP BY Video_Games.GName  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT VG.GName FROM Video_Games VG JOIN Plays_Games PG ON VG.GameID = PG.GameID GROUP BY VG.GName HAVING SUM(PG.Hours_Played) >= 1000;
SELECT VG.GName  FROM Video_Games VG JOIN Plays_Games PG ON VG.GameID = PG.GameID GROUP BY VG.GName HAVING SUM(PG.Hours_Played) >= 1000;
SELECT VG.GName  FROM Video_Games VG  JOIN Plays_Games PG ON VG.GameID = PG.GameID  JOIN Student S ON S.StuID = PG.StuID  WHERE S.LName = 'Smith' AND S.Fname = 'Linda';
SELECT VG.GName  FROM Video_Games VG  JOIN Plays_Games PG ON VG.GameID = PG.GameID  JOIN Student S ON S.StuID = PG.StuID  WHERE S.LName = 'Smith' AND S.Fname = 'Linda';
SELECT Student.LName, Student.Fname  FROM Student  JOIN SportsInfo ON Student.StuID = SportsInfo.StuID  WHERE SportsInfo.SportName IN ('Football', 'Lacrosse');
SELECT S.Fname, S.LName FROM Student S JOIN SportsInfo SI ON S.StuID = SI.StuID WHERE SI.SportName IN ('Football', 'Lacrosse');
SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN SportsInfo AS T2 ON T1.StuID = T2.StuID WHERE T2.SportName = 'Football' INTERSECT SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN SportsInfo AS T2 ON T1.StuID = T2.StuID WHERE T2.SportName = 'Lacrosse'
SELECT S.Fname, S.Age  FROM Student S  JOIN SportsInfo SI1 ON S.StuID = SI1.StuID  JOIN SportsInfo SI2 ON S.StuID = SI2.StuID  WHERE SI1.SportName = 'Football' AND SI2.SportName = 'Lacrosse';
SELECT S.LName, S.Sex  FROM Student S JOIN Plays_Games PG1 ON S.StuID = PG1.StuID JOIN Video_Games VG1 ON PG1.GameID = VG1.GameID AND VG1.GName = 'Call of Destiny' JOIN Plays_Games PG2 ON S.StuID = PG2.StuID JOIN Video_Games VG2 ON PG2.GameID = VG2.GameID AND VG2.GName = 'Works of Widenius';
SELECT S.LName, S.Sex  FROM Student S JOIN Plays_Games PG1 ON S.StuID = PG1.StuID  JOIN Video_Games VG1 ON PG1.GameID = VG1.GameID AND VG1.GName = 'Call of Destiny' JOIN Plays_Games PG2 ON S.StuID = PG2.StuID  JOIN Video_Games VG2 ON PG2.GameID = VG2.GameID AND VG2.GName = 'Works of Widenius'
SELECT customer_name FROM Customers;
SELECT customer_name FROM Customers;
SELECT COUNT(*) FROM Customers;
SELECT COUNT(DISTINCT customer_id)  FROM Customers;
Error: 第 6060 个样本有 2 个SQL。
SELECT AVG(order_quantity)  FROM Order_Items;
SELECT customer_name  FROM Customers  WHERE payment_method = 'Cash';
SELECT customer_name  FROM Customers  WHERE payment_method = 'Cash';
SELECT date_became_customer  FROM Customers  WHERE customer_id BETWEEN 10 AND 20;
SELECT date_became_customer  FROM Customers  WHERE customer_id BETWEEN 10 AND 20;
SELECT payment_method, COUNT(customer_id) as customer_count FROM Customers GROUP BY payment_method ORDER BY customer_count DESC LIMIT 1;
SELECT payment_method, COUNT(*) as frequency  FROM Customers  GROUP BY payment_method  ORDER BY frequency DESC  LIMIT 1;
SELECT customer_name  FROM Customers  WHERE payment_method = (     SELECT payment_method      FROM Customers      GROUP BY payment_method      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT customer_name  FROM Customers  WHERE payment_method = (     SELECT payment_method      FROM Customers      GROUP BY payment_method      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT DISTINCT payment_method FROM Customers;
SELECT DISTINCT payment_method FROM Customers;
SELECT * FROM Products;
SELECT * FROM Products;
SELECT customer_name  FROM Customers  WHERE customer_name LIKE '%Alex%';
SELECT customer_name FROM Customers WHERE customer_name LIKE '%Alex%';
SELECT product_details  FROM Products  WHERE product_details LIKE '%Latte%' OR product_details LIKE '%Americano%';
SELECT product_details  FROM Products  WHERE product_details LIKE '%Latte%' OR product_details LIKE '%Americano%';
SELECT A.address_content  FROM Addresses A JOIN Customer_Addresses CA ON A.address_id = CA.address_id JOIN Customers C ON C.customer_id = CA.customer_id WHERE C.customer_name = 'Maudie Kertzmann';
SELECT A.address_content  FROM Addresses A JOIN Customer_Addresses CA ON A.address_id = CA.address_id JOIN Customers C ON C.customer_id = CA.customer_id WHERE C.customer_name = 'Maudie Kertzmann';
SELECT COUNT(DISTINCT c.customer_id)  FROM Customers c JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id JOIN Addresses a ON ca.address_id = a.address_id WHERE a.city = 'Lake Geovannyton';
SELECT COUNT(DISTINCT c.customer_id) FROM Customers c JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id JOIN Addresses a ON a.address_id = ca.address_id WHERE a.city = 'Lake Geovannyton';
SELECT c.customer_name FROM Customers c JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id JOIN Addresses a ON ca.address_id = a.address_id WHERE a.state_province_county = 'Colorado';
SELECT c.customer_name FROM Customers c JOIN Customer_Addresses ca ON c.customer_id = ca.customer_id JOIN Addresses a ON ca.address_id = a.address_id WHERE a.state_province_county = 'Colorado';
SELECT city  FROM Addresses  WHERE address_id NOT IN (     SELECT address_id      FROM Customer_Addresses  ) GROUP BY city;
SELECT city  FROM Addresses  WHERE address_id NOT IN (     SELECT DISTINCT address_id      FROM Customer_Addresses )
SELECT A.city, COUNT(C.customer_id) AS NumOfCustomers FROM Addresses A JOIN Customer_Addresses CA ON A.address_id = CA.address_id JOIN Customers C ON C.customer_id = CA.customer_id GROUP BY A.city ORDER BY NumOfCustomers DESC LIMIT 1;
SELECT A.city, COUNT(C.customer_id) AS NumOfCustomers FROM Addresses A JOIN Customer_Addresses CA ON A.address_id = CA.address_id GROUP BY A.city ORDER BY NumOfCustomers DESC LIMIT 1;
SELECT DISTINCT city FROM Addresses;
SELECT DISTINCT city FROM Addresses;
SELECT city  FROM Addresses  WHERE zip_postcode = 255;
SELECT city FROM Addresses WHERE zip_postcode = 255;
SELECT state_province_county, country  FROM Addresses  WHERE zip_postcode LIKE '4%';
SELECT state_province_county, country  FROM Addresses  WHERE zip_postcode LIKE '4%';
SELECT country FROM Addresses GROUP BY country HAVING COUNT(address_id) > 4;
SELECT country FROM Addresses GROUP BY country HAVING COUNT(DISTINCT address_id) > 4;
SELECT channel_code FROM Customer_Contact_Channels GROUP BY channel_code HAVING COUNT(*) < 5;
SELECT channel_code FROM Customer_Contact_Channels GROUP BY channel_code HAVING COUNT(*) < 5;
SELECT CCC.channel_code  FROM Customer_Contact_Channels CCC JOIN Customers C ON CCC.customer_id = C.customer_id WHERE C.customer_name = 'Tillman Ernser';
SELECT CCC.channel_code  FROM Customer_Contact_Channels CCC JOIN Customers C ON CCC.customer_id = C.customer_id WHERE C.customer_name = 'Tillman Ernser';
SELECT MAX(c3.active_to_date)  FROM Customer_Contact_Channels c3  JOIN Customers c2 ON c3.customer_id = c2.customer_id  WHERE c2.customer_name = 'Tillman Ernser';
SELECT MAX(Customer_Contact_Channels.active_to_date)  FROM Customer_Contact_Channels  JOIN Customers ON Customer_Contact_Channels.customer_id = Customers.customer_id  WHERE Customers.customer_name = 'Tillman Ernser';
SELECT AVG(active_to_date - active_from_date)  FROM Customer_Contact_Channels;
SELECT AVG(active_to_date - active_from_date)  FROM Customer_Contact_Channels;
SELECT channel_code, contact_number  FROM (   SELECT customer_id, channel_code, contact_number,           active_to_date - active_from_date AS active_days   FROM Customer_Contact_Channels ) subquery WHERE active_days = (SELECT MAX(active_to_date - active_from_date) FROM Customer_Contact_Channels);
SELECT channel_code, contact_number  FROM (     SELECT customer_id, channel_code, contact_number,          active_to_date - active_from_date AS duration      FROM Customer_Contact_Channels ) AS subquery WHERE duration = (     SELECT MAX(duration)      FROM (         SELECT active_to_date - active_from_date AS duration          FROM Customer_Contact_Channels     ) AS subquery2 );
SELECT C.customer_name, CCC.active_from_date FROM Customers C JOIN Customer_Contact_Channels CCC ON C.customer_id = CCC.customer_id WHERE CCC.channel_code = 'email';
SELECT c.customer_name, CCC.active_from_date  FROM Customers c JOIN Customer_Contact_Channels CCC ON c.customer_id = CCC.customer_id  WHERE CCC.channel_code = 'email';
SELECT C.customer_name  FROM Customers C  JOIN Customer_Orders CO ON C.customer_id = CO.customer_id  JOIN Order_Items OI ON CO.order_id = OI.order_id  WHERE OI.order_quantity = (SELECT MAX(order_quantity) FROM Order_Items)
SELECT C.customer_name  FROM Customers C  JOIN Customer_Orders CO ON C.customer_id = CO.customer_id  JOIN Order_Items OI ON CO.order_id = OI.order_id  GROUP BY C.customer_name  ORDER BY SUM(OI.order_quantity) DESC  LIMIT 1;
SELECT C.customer_name FROM Customers C JOIN Customer_Orders CO ON C.customer_id = CO.customer_id JOIN Order_Items OI ON CO.order_id = OI.order_id GROUP BY C.customer_name ORDER BY SUM(OI.order_quantity) DESC LIMIT 1;
SELECT C.customer_name  FROM Customers C JOIN Customer_Orders CO ON C.customer_id = CO.customer_id JOIN Order_Items OI ON CO.order_id = OI.order_id GROUP BY C.customer_name ORDER BY SUM(OI.order_quantity) DESC LIMIT 1;
SELECT C.payment_method FROM Customers C JOIN Customer_Orders CO ON C.customer_id = CO.customer_id JOIN Order_Items OI ON CO.order_id = OI.order_id GROUP BY C.payment_method HAVING SUM(OI.order_quantity) = (     SELECT MIN(total_quantity)     FROM (         SELECT SUM(order_quantity) AS total_quantity         FROM Order_Items         GROUP BY order_id     ) AS subquery );
SELECT C.payment_method  FROM Customers C WHERE C.customer_id = (     SELECT CO.customer_id      FROM Customer_Orders CO     JOIN Order_Items OI ON CO.order_id = OI.order_id     GROUP BY CO.customer_id     ORDER BY SUM(OI.order_quantity) ASC     LIMIT 1 )
SELECT COUNT(DISTINCT T3.product_id)  FROM Customer_Orders AS T1  JOIN Order_Items AS T2 ON T1.order_id = T2.order_id  JOIN Products AS T3 ON T2.product_id = T3.product_id  WHERE T1.customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Rodrick Heaney');
SELECT COUNT(DISTINCT oi.product_id)  FROM Order_Items oi  JOIN Customer_Orders co ON oi.order_id = co.order_id  JOIN Customers c ON co.customer_id = c.customer_id  WHERE c.customer_name = 'Rodrick Heaney';
SELECT SUM(order_quantity)  FROM Customer_Orders  JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id  JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id  WHERE Customers.customer_name = 'Rodrick Heaney';
SELECT SUM(order_quantity)  FROM Customer_Orders  JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id  JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id  WHERE Customers.customer_name = 'Rodrick Heaney';
SELECT COUNT(DISTINCT c.customer_id)  FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.order_status = 'Cancelled';
SELECT COUNT(DISTINCT c.customer_id)  FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.order_status = 'Cancelled';
SELECT COUNT(*)  FROM Customer_Orders  WHERE order_details = 'Second time';
SELECT COUNT(*)  FROM Customer_Orders  WHERE order_details = 'Second time';
SELECT Customers.customer_name, Customer_Orders.order_date  FROM Customer_Orders  INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id  WHERE Customer_Orders.order_status = 'Delivered';
SELECT Customers.customer_name, Customer_Orders.order_date  FROM Customer_Orders  INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id  WHERE Customer_Orders.order_status = 'Delivered';
Error: 第 6124 个样本有 2 个SQL。
SELECT SUM(order_quantity)  FROM Order_Items  JOIN Customer_Orders ON Order_Items.order_id = Customer_Orders.order_id  WHERE Customer_Orders.order_status = 'Cancelled';
SELECT SUM(oi.order_quantity) AS total_products_ordered  FROM Order_Items oi  JOIN Customer_Orders co ON oi.order_id = co.order_id  WHERE co.order_date < '2018-03-17 07:13:53';
SELECT SUM(oi.order_quantity) AS total_products_purchased  FROM Order_Items oi  JOIN Customer_Orders co ON oi.order_id = co.order_id  WHERE co.order_date < '2018-03-17 07:13:53';
SELECT Customers.customer_name FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id ORDER BY Customer_Orders.order_date DESC LIMIT 1;
SELECT c.customer_name FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.order_date = (SELECT MAX(order_date) FROM Customer_Orders)
SELECT p.product_id, p.product_details, SUM(oi.order_quantity) as total_ordered  FROM Products p  JOIN Order_Items oi ON p.product_id = oi.product_id  GROUP BY p.product_id, p.product_details  ORDER BY total_ordered DESC  LIMIT 1;
SELECT p.product_details  FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_details ORDER BY COUNT(oi.order_id) DESC LIMIT 1;
SELECT P.product_id, P.product_details FROM Products P JOIN (     SELECT OI.product_id, SUM(OI.order_quantity) as total_quantity     FROM Order_Items OI     GROUP BY OI.product_id     ORDER BY total_quantity DESC     LIMIT 1 ) T ON P.product_id = T.product_id;
SELECT P.product_id, P.product_details FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id GROUP BY P.product_id, P.product_details ORDER BY SUM(OI.order_quantity) DESC LIMIT 1;
SELECT address_content  FROM Addresses  WHERE (city='East Julianaside' AND state_province_county='Texas')  OR (city='Gleasonmouth' AND state_province_county='Arizona');
SELECT address_content  FROM Addresses  WHERE (city = 'East Julianaside' AND state_province_county = 'Texas')  OR (city = 'Gleasonmouth' AND state_province_county = 'Arizona');
SELECT DISTINCT c.customer_name  FROM Customers c WHERE c.payment_method != 'Cash'
SELECT customer_name  FROM Customers  WHERE payment_method != 'Cash';
SELECT c.customer_name  FROM Customers c  WHERE c.customer_id NOT IN (     SELECT co.customer_id      FROM Customer_Orders co      JOIN Order_Items oi ON co.order_id = oi.order_id      JOIN Products p ON oi.product_id = p.product_id      WHERE p.product_details = 'Latte' )
SELECT c.customer_name  FROM Customers c  WHERE c.customer_id NOT IN (     SELECT co.customer_id      FROM Customer_Orders co      JOIN Order_Items oi ON co.order_id = oi.order_id      JOIN Products p ON oi.product_id = p.product_id      WHERE p.product_details = 'Latte' )
SELECT c.customer_name FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.order_id IS NULL;
SELECT c.customer_name FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.order_id IS NULL;
SELECT c.customer_name  FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_details IN ('Latte', 'Americano') GROUP BY c.customer_name HAVING COUNT(DISTINCT p.product_details) = 2;
SELECT c.customer_name  FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_details IN ('Latte', 'Americano') GROUP BY c.customer_name HAVING COUNT(DISTINCT p.product_details) = 2;
SELECT COUNT(*) FROM artist;
SELECT COUNT(*) FROM artist;
SELECT Age FROM artist;
SELECT Age FROM artist;
SELECT AVG(Age) FROM artist;
SELECT AVG(Age) FROM artist;
SELECT Famous_Title FROM artist WHERE Artist = 'Triumfall';
SELECT Famous_Title FROM artist WHERE Artist = 'Triumfall';
SELECT DISTINCT Famous_Release_date FROM artist;
SELECT DISTINCT Famous_Release_date FROM artist;
SELECT Date_of_ceremony, Result FROM music_festival;
SELECT Date_of_ceremony, Result FROM music_festival;
SELECT Category FROM music_festival WHERE Result = 'Awarded';
SELECT Category  FROM music_festival  WHERE Result = 'Awarded';
SELECT MAX(Weeks_on_Top) AS Max_Weeks, MIN(Weeks_on_Top) AS Min_Weeks FROM volume;
SELECT MAX(Weeks_on_Top) AS Max_Weeks, MIN(Weeks_on_Top) AS Min_Weeks FROM volume;
SELECT v.Song  FROM volume v  WHERE v.Weeks_on_Top > 1;
SELECT v.Song  FROM volume v  WHERE v.Weeks_on_Top > 1;
SELECT v.Song  FROM volume v ORDER BY v.Song ASC;
SELECT Song FROM volume ORDER BY Song ASC;
SELECT COUNT(DISTINCT Artist_ID) FROM volume;
SELECT COUNT(DISTINCT Artist_ID)  FROM volume;
SELECT mf.Date_of_ceremony  FROM music_festival mf JOIN volume v ON mf.Volume = v.Volume_ID  WHERE v.Weeks_on_Top > 2;
SELECT mf.Date_of_ceremony  FROM music_festival mf JOIN volume v ON mf.Volume = v.Volume_ID  WHERE v.Weeks_on_Top > 2;
SELECT v.Song  FROM volume v  JOIN music_festival mf ON v.Volume_ID = mf.Volume  WHERE mf.Result = 'nominated';
SELECT v.Song  FROM volume v  JOIN music_festival mf ON v.Volume_ID = mf.Volume  WHERE mf.Result = 'Nominated';
SELECT Issue_Date  FROM volume  WHERE Artist_ID = (SELECT Artist_ID FROM artist WHERE Artist = "Gorgoroth");
SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = 'Gorgoroth'
SELECT v.Song  FROM volume v  JOIN artist a ON v.Artist_ID = a.Artist_ID  WHERE a.Age >= 32;
SELECT v.Song  FROM volume v  JOIN artist a ON v.Artist_ID = a.Artist_ID  WHERE a.Age >= 32;
SELECT AVG(T2.Weeks_on_Top)  FROM artist AS T1  JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID  WHERE T1.Age <= 25;
SELECT AVG(T2.Weeks_on_Top)  FROM artist AS T1  JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID  WHERE T1.Age <= 25;
SELECT T1.Famous_Title  FROM artist AS T1  JOIN volume AS T2  ON T1.Artist_ID = T2.Artist_ID  WHERE T2.Weeks_on_Top > 2;
SELECT a.Famous_Title FROM artist a JOIN volume v ON a.Artist_ID = v.Artist_ID WHERE v.Weeks_on_Top > 2;
SELECT Age, Famous_Title  FROM artist  ORDER BY Age DESC;
SELECT Famous_Title, Age  FROM artist  ORDER BY Age DESC;
SELECT Famous_Release_date  FROM artist  WHERE Age = (SELECT MAX(Age) FROM artist);
SELECT T1.Famous_Release_date FROM artist AS T1 WHERE T1.Age = (SELECT MAX(Age) FROM artist)
SELECT Category, COUNT(*)  FROM music_festival  GROUP BY Category;
SELECT Category, COUNT(*)  FROM music_festival  GROUP BY Category;
SELECT Result, COUNT(*) AS Count  FROM music_festival  GROUP BY Result  ORDER BY Count DESC  LIMIT 1;
SELECT Result, COUNT(*) AS Frequency  FROM music_festival  GROUP BY Result  ORDER BY Frequency DESC  LIMIT 1;
SELECT Category, COUNT(*)  FROM music_festival  GROUP BY Category  HAVING COUNT(*) > 1;
SELECT Category  FROM music_festival  GROUP BY Category  HAVING COUNT(ID) > 1;
SELECT v.Song  FROM volume v  WHERE v.Weeks_on_Top = (SELECT MAX(Weeks_on_Top) FROM volume);
SELECT v.Song  FROM volume v  WHERE v.Weeks_on_Top = (SELECT MAX(Weeks_on_Top) FROM volume);
SELECT Famous_Title  FROM artist  WHERE Artist_ID NOT IN (SELECT Artist_ID FROM volume)
SELECT Famous_Title  FROM artist  WHERE Artist_ID NOT IN (SELECT Artist_ID FROM volume)
SELECT T1.Famous_Title  FROM artist AS T1  JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID  WHERE T2.Weeks_on_Top > 2  INTERSECT  SELECT T1.Famous_Title  FROM artist AS T1  JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID  WHERE T2.Weeks_on_Top < 2;
SELECT T1.Famous_Title  FROM artist AS T1  JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID  WHERE T2.Weeks_on_Top > 2  INTERSECT  SELECT T1.Famous_Title  FROM artist AS T1  JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID  WHERE T2.Weeks_on_Top < 2;
SELECT Date_of_ceremony  FROM music_festival  WHERE Category = 'Best Song' AND Result = 'Awarded';
SELECT Date_of_ceremony  FROM music_festival  WHERE Category = 'Best Song' AND Result = 'Awarded';
SELECT Issue_Date FROM volume WHERE Weeks_on_Top = (SELECT MIN(Weeks_on_Top) FROM volume);
SELECT T1.Issue_Date FROM volume AS T1 WHERE T1.Weeks_on_Top = (SELECT MIN(Weeks_on_Top) FROM volume)
SELECT COUNT(DISTINCT Artist_ID)  FROM volume;
SELECT COUNT(DISTINCT Artist_ID) FROM volume;
SELECT Music_Festival, COUNT(*) AS Number_of_Music_Festivals  FROM music_festival  GROUP BY Music_Festival  ORDER BY Number_of_Music_Festivals;
SELECT Result, COUNT(*)  FROM music_festival  GROUP BY Result  ORDER BY COUNT(*) DESC;
SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Age <= 23;
SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Age <= 23;
SELECT COUNT(*) FROM roller_coaster;
SELECT Name  FROM roller_coaster  ORDER BY Length ASC;
SELECT Length, Height FROM roller_coaster;
SELECT Name  FROM country  WHERE Languages != 'German';
SELECT Status  FROM roller_coaster  WHERE Length > 3300 OR Height > 100;
SELECT T1.Speed  FROM roller_coaster AS T1  JOIN country AS T2 ON T1.Country_ID = T2.Country_ID  WHERE T1.Length = (SELECT MAX(Length) FROM roller_coaster);
SELECT AVG(Speed) FROM roller_coaster;
SELECT Status, COUNT(*)  FROM roller_coaster  GROUP BY Status;
SELECT Status, COUNT(*) AS Count  FROM roller_coaster  GROUP BY Status  ORDER BY Count DESC  LIMIT 1;
SELECT Status  FROM roller_coaster  GROUP BY Status  HAVING COUNT(*) > 2;
SELECT Park FROM roller_coaster WHERE Speed = (SELECT MAX(Speed) FROM roller_coaster);
SELECT roller_coaster.Name AS Roller_Coaster_Name, country.Name AS Country_Name FROM roller_coaster JOIN country ON roller_coaster.Country_ID = country.Country_ID;
SELECT c.Name  FROM country c JOIN roller_coaster rc ON c.Country_ID = rc.Country_ID GROUP BY c.Name HAVING COUNT(rc.Roller_Coaster_ID) > 1;
SELECT c.Name AS Country_Name, c.Population  FROM country c JOIN roller_coaster r  ON c.Country_ID = r.Country_ID  WHERE r.Height = (SELECT MAX(Height) FROM roller_coaster);
SELECT c.Name, AVG(rc.Speed)  FROM roller_coaster rc  JOIN country c ON rc.Country_ID = c.Country_ID  GROUP BY c.Name;
SELECT COUNT(*)  FROM country  WHERE Country_ID NOT IN (     SELECT Country_ID      FROM roller_coaster      WHERE Length > 3000 );
SELECT c.Name, c.Area, c.Population  FROM country AS c JOIN roller_coaster AS r ON c.Country_ID = r.Country_ID WHERE r.Speed > (     SELECT MIN(Speed)      FROM roller_coaster      WHERE Speed > 100 ) GROUP BY c.Country_ID HAVING COUNT(*) >= 2;
SELECT COUNT(DISTINCT Rank) FROM captain;
SELECT COUNT(DISTINCT Rank) FROM captain;
SELECT Rank, COUNT(*)  FROM captain  GROUP BY Rank;
SELECT Rank, COUNT(*)  FROM captain  GROUP BY Rank;
SELECT Rank, COUNT(*)  FROM captain  WHERE age < 50  GROUP BY Rank;
SELECT Rank, COUNT(*)  FROM captain  WHERE age < 50  GROUP BY Rank;
SELECT Name  FROM captain  ORDER BY age DESC;
SELECT Name  FROM captain  ORDER BY age DESC;
SELECT Name, Class, Rank FROM captain;
SELECT Name, Class, Rank FROM captain;
SELECT Rank, COUNT(*) as count  FROM captain  GROUP BY Rank  ORDER BY count DESC  LIMIT 1;
SELECT Rank  FROM captain  GROUP BY Rank  ORDER BY COUNT(Captain_ID)  LIMIT 1
SELECT Class  FROM captain  GROUP BY Class  HAVING COUNT(Captain_ID) > 2;
SELECT Class  FROM captain  GROUP BY Class  HAVING COUNT(Captain_ID) > 2
SELECT Name  FROM captain  WHERE Rank IN ('Midshipman', 'Lieutenant');
SELECT Name  FROM captain  WHERE Rank IN ('Midshipman', 'Lieutenant');
SELECT Class, AVG(age) AS Average_Age, MIN(age) AS Minimum_Age  FROM captain  GROUP BY Class;
SELECT Class, AVG(age) as Average_Age, MIN(age) as Minimum_Age  FROM captain  GROUP BY Class;
SELECT Rank  FROM captain  WHERE Class IN ('Cutter', 'Armed schooner')  GROUP BY Rank  HAVING COUNT(DISTINCT Class) = 2;
SELECT DISTINCT c.Rank  FROM captain c JOIN Ship s ON c.Ship_ID = s.Ship_ID  WHERE s.Class = 'Cutter' AND s.Type = 'Armed schooner';
Error: 第 6241 个样本有 3 个SQL。
Error: 第 6242 个样本有 3 个SQL。
SELECT Name  FROM captain  ORDER BY age  LIMIT 1;
SELECT Name  FROM captain  ORDER BY age  LIMIT 1;
SELECT COUNT(*) FROM Ship;
SELECT COUNT(*) FROM Ship;
SELECT T1.Name, T1.Type, T1.Flag  FROM Ship AS T1  WHERE T1.Built_Year = (SELECT MAX(Built_Year) FROM Ship);
SELECT T1.Name, T1.Type, T1.Flag  FROM Ship AS T1  WHERE T1.Built_Year = (SELECT MAX(Built_Year) FROM Ship);
SELECT Flag, COUNT(*) AS NumberOfShips FROM Ship GROUP BY Flag;
SELECT Flag, COUNT(*) AS NumberOfShips FROM Ship GROUP BY Flag;
SELECT Flag, COUNT(*) AS Count  FROM Ship  GROUP BY Flag  ORDER BY Count DESC  LIMIT 1;
SELECT Flag  FROM Ship  GROUP BY Flag  ORDER BY COUNT(*) DESC  LIMIT 1;
Error: 第 6253 个样本有 2 个SQL。
SELECT Ship.Name  FROM Ship  ORDER BY Ship.Built_Year, Ship.Class;
SELECT T1.Type  FROM Ship AS T1  JOIN (     SELECT Ship_ID      FROM Ship      WHERE Flag = 'Panama' ) AS T2 ON T1.Ship_ID = T2.Ship_ID  INTERSECT  SELECT T1.Type  FROM Ship AS T1  JOIN (     SELECT Ship_ID      FROM Ship      WHERE Flag = 'Malta' ) AS T3 ON T1.Ship_ID = T3.Ship_ID;
SELECT T1.Type  FROM Ship AS T1  JOIN (     SELECT Ship_ID      FROM captain      WHERE Flag = 'Panama' ) AS T2 ON T1.Ship_ID = T2.Ship_ID  INTERSECT  SELECT T1.Type  FROM Ship AS T1  JOIN (     SELECT Ship_ID      FROM captain      WHERE Flag = 'Malta' ) AS T3 ON T1.Ship_ID = T3.Ship_ID;
SELECT Built_Year, COUNT(*) AS Number_of_Ships FROM Ship GROUP BY Built_Year ORDER BY Number_of_Ships DESC LIMIT 1;
SELECT Built_Year, COUNT(*) AS Count  FROM Ship  GROUP BY Built_Year  ORDER BY Count DESC  LIMIT 1;
SELECT s.Name  FROM Ship s JOIN captain c ON s.Ship_ID = c.Ship_ID GROUP BY s.Name HAVING COUNT(c.Captain_ID) > 1;
SELECT s.Name FROM Ship s JOIN captain c ON s.Ship_ID = c.Ship_ID GROUP BY s.Name HAVING COUNT(c.Captain_ID) > 1;
SELECT Name, Class FROM Ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM captain)
SELECT Ship.Name, Ship.Class  FROM Ship  LEFT JOIN captain  ON Ship.Ship_ID = captain.Ship_ID  WHERE captain.Ship_ID IS NULL;
SELECT Ship.Name  FROM Ship  JOIN captain  ON Ship.Ship_ID = captain.Ship_ID  WHERE captain.age = (     SELECT MIN(age)      FROM captain );
SELECT Ship.Name  FROM Ship  JOIN captain  ON Ship.Ship_ID = captain.Ship_ID  WHERE captain.age = (     SELECT MIN(age)      FROM captain );
SELECT s.Name, s.Flag  FROM Ship s LEFT JOIN captain c ON s.Ship_ID = c.Ship_ID AND c.Rank = 'Midshipman' WHERE c.Ship_ID IS NULL;
SELECT s.Name, s.Flag  FROM Ship s LEFT JOIN captain c ON s.Ship_ID = c.Ship_ID  WHERE c.Rank <> 'Midshipman' OR c.Rank IS NULL;
SELECT s.Name  FROM Ship s  JOIN captain c1 ON s.Ship_ID = c1.Ship_ID  JOIN captain c2 ON s.Ship_ID = c2.Ship_ID  WHERE c1.Rank = 'Midshipman' AND c2.Rank = 'Lieutenant' GROUP BY s.Name HAVING COUNT(*) > 1;
SELECT s.Name  FROM Ship s  JOIN captain c1 ON s.Ship_ID = c1.Ship_ID  JOIN captain c2 ON s.Ship_ID = c2.Ship_ID  WHERE c1.Rank = 'Midshipman' AND c2.Rank = 'Lieutenant' GROUP BY s.Name HAVING COUNT(*) > 1;
Error: 第 6269 个样本有 2 个SQL。
SELECT T1.City_ID FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = (SELECT MAX(Year) FROM hosting_city)
SELECT T2.Match_ID FROM match AS T2 JOIN hosting_city AS T1 ON T2.Match_ID = T1.Match_ID WHERE T2.Competition = "1994 FIFA World Cup qualification"
SELECT Match_ID FROM match WHERE Competition = '1994 FIFA World Cup qualification';
SELECT DISTINCT c.City FROM city AS c JOIN hosting_city AS hc ON c.City_ID = hc.Host_City WHERE hc.Year > 2010;
SELECT DISTINCT Host_City FROM hosting_city WHERE Year > 2010;
SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City GROUP BY T2.Host_City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Host_City, COUNT(Match_ID) as Total_Events  FROM hosting_city  GROUP BY Host_City  ORDER BY Total_Events DESC  LIMIT 1;
SELECT T2.Venue FROM hosting_city AS T1 JOIN match AS T2 ON T1.Match_ID = T2.Match_ID JOIN city AS T3 ON T3.City_ID = T1.Host_City WHERE T2.Competition = '1994 FIFA World Cup qualification' AND T3.City = 'Nanjing ( Jiangsu )'
SELECT T2.Venue FROM hosting_city AS T1 JOIN match AS T2 ON T1.Match_ID = T2.Match_ID JOIN city AS T3 ON T3.City_ID = T1.Host_City WHERE T2.Competition = '1994 FIFA World Cup qualification' AND T3.City = 'Nanjing ( Jiangsu )'
SELECT t1.Jan  FROM temperature AS t1  JOIN city AS t2  ON t1.City_ID = t2.City_ID  WHERE t2.City = 'Shanghai';
SELECT t3.Jan  FROM city AS t1  JOIN temperature AS t3 ON t1.City_ID = t3.City_ID  WHERE t1.City = 'Shanghai'
SELECT Year FROM hosting_city WHERE Host_City IN (SELECT City_ID FROM city WHERE City = 'Taizhou ( Zhejiang )');
SELECT Year FROM hosting_city WHERE Host_City = (SELECT City_ID FROM city WHERE City = 'Taizhou ( Zhejiang )');
SELECT City FROM city ORDER BY Regional_Population DESC LIMIT 3;
SELECT City, Regional_Population FROM city ORDER BY Regional_Population DESC LIMIT 3;
SELECT City, GDP  FROM city  ORDER BY GDP  LIMIT 1;
SELECT City, GDP  FROM city  ORDER BY GDP  LIMIT 1;
SELECT T1.City FROM city AS T1 JOIN temperature AS T2 ON T1.City_ID = T2.City_ID ORDER BY T2.Feb DESC LIMIT 1;
SELECT T1.City  FROM city AS T1  JOIN temperature AS T2  ON T1.City_ID = T2.City_ID  ORDER BY T2.Feb DESC  LIMIT 1;
SELECT DISTINCT city.City  FROM city  JOIN temperature ON city.City_ID = temperature.City_ID  WHERE temperature.Mar < temperature.Jul OR temperature.Mar > temperature.Oct;
SELECT T1.City  FROM city AS T1  JOIN temperature AS T2  ON T1.City_ID = T2.City_ID  WHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct;
SELECT DISTINCT c.City  FROM city c JOIN temperature t ON c.City_ID = t.City_ID  JOIN hosting_city hc ON c.City_ID = hc.Host_City WHERE t.Mar < t.Jul;
SELECT DISTINCT c.City FROM city c JOIN temperature t ON c.City_ID = t.City_ID JOIN hosting_city hc ON c.City_ID = hc.Host_City WHERE t.Mar < t.Jul
SELECT city.City  FROM city  JOIN temperature ON city.City_ID = temperature.City_ID  WHERE temperature.Mar < temperature.Dec  AND city.City_ID NOT IN (SELECT hosting_city.Host_City FROM hosting_city);
SELECT C.City  FROM city AS C  JOIN temperature AS T ON C.City_ID = T.City_ID  WHERE T.Mar < T.Dec AND C.City_ID NOT IN (SELECT HC.Host_City FROM hosting_city AS HC)
SELECT DISTINCT c.City  FROM city c JOIN temperature t ON c.City_ID = t.City_ID WHERE t.Feb > t.Jun OR EXISTS (SELECT 1 FROM hosting_city hc WHERE hc.Host_City = c.City)
SELECT DISTINCT c.City FROM city c JOIN temperature t ON c.City_ID = t.City_ID WHERE t.Feb > t.Jun OR EXISTS (     SELECT 1 FROM hosting_city hc WHERE hc.Host_City = c.City )
SELECT City FROM city WHERE Regional_Population > 10000000;
SELECT City FROM city WHERE Regional_Population > 10000000;
SELECT City FROM city WHERE Regional_Population > 8000000 OR Regional_Population < 5000000;
SELECT City FROM city WHERE Regional_Population > 8000000 OR Regional_Population < 5000000;
SELECT Competition, COUNT(*)  FROM match  GROUP BY Competition;
SELECT Competition, COUNT(*)  FROM match  GROUP BY Competition;
Error: 第 6303 个样本有 2 个SQL。
SELECT Venue FROM match ORDER BY Date DESC;
SELECT GDP FROM city WHERE Regional_Population = (SELECT MAX(Regional_Population) FROM city);
SELECT GDP FROM city WHERE Regional_Population = (SELECT MAX(Regional_Population) FROM city);
SELECT T1.GDP, T1.Regional_Population  FROM city AS T1  JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City  GROUP BY T2.Host_City  HAVING COUNT(*) > 1;
SELECT T1.City, T1.GDP, T1.Regional_Population FROM city AS T1 JOIN (     SELECT Host_City, COUNT(*) AS times     FROM hosting_city     GROUP BY Host_City     HAVING times > 1 ) AS T2 ON T1.City_ID = T2.Host_City;
SELECT individual_first_name, individual_middle_name, individual_last_name  FROM Individuals  ORDER BY individual_last_name ASC;
SELECT individual_first_name, individual_middle_name, individual_last_name  FROM Individuals  ORDER BY individual_last_name;
SELECT DISTINCT form_type_code FROM Forms;
SELECT DISTINCT form_type_code FROM Forms;
SELECT F.form_name FROM Forms F JOIN Party_Forms PF ON F.form_id = PF.form_id GROUP BY F.form_name ORDER BY COUNT(PF.party_id) DESC LIMIT 1;
SELECT Forms.form_name, COUNT(Party_Forms.form_id) as form_count  FROM Party_Forms  JOIN Forms ON Party_Forms.form_id = Forms.form_id  GROUP BY Party_Forms.form_id  ORDER BY form_count DESC  LIMIT 1;
SELECT payment_method_code, party_phone  FROM Parties  WHERE party_email = 'enrico09@example.com';
SELECT payment_method_code, party_phone  FROM Parties  WHERE party_email = 'enrico09@example.com';
SELECT P.party_email  FROM (     SELECT party_id, COUNT(*) AS cnt     FROM Party_Forms     GROUP BY party_id     ORDER BY cnt DESC     LIMIT 1 ) PF  JOIN Parties P ON P.party_id = PF.party_id;
SELECT T1.party_email  FROM Parties AS T1  JOIN Party_Forms AS T2 ON T1.party_id = T2.party_id  GROUP BY T1.party_email  ORDER BY COUNT(T2.form_id) DESC  LIMIT 1;
SELECT organization_name  FROM Organizations  ORDER BY date_formed;
SELECT organization_name  FROM Organizations  ORDER BY date_formed ASC;
SELECT organization_name  FROM Organizations  ORDER BY date_formed DESC  LIMIT 1;
SELECT organization_name  FROM Organizations  WHERE date_formed = (SELECT MAX(date_formed) FROM Organizations);
SELECT I.individual_last_name  FROM Individuals I JOIN Organization_Contact_Individuals OCI ON I.individual_id = OCI.individual_id WHERE OCI.organization_id = (     SELECT O.organization_id      FROM Organizations O      WHERE O.organization_name = 'Labour Party' ) AND OCI.date_contact_to IS NULL  OR OCI.date_contact_to = (     SELECT MAX(date_contact_to)      FROM Organization_Contact_Individuals      WHERE organization_id = (         SELECT O.organization_id          FROM Organizations O          WHERE O.organization_name = 'Labour Party'     ) )
SELECT I.individual_last_name  FROM Individuals I  JOIN Organization_Contact_Individuals OCI ON I.individual_id = OCI.individual_id  JOIN Organizations O ON OCI.organization_id = O.organization_id  WHERE O.organization_name = 'Labour party'  ORDER BY OCI.date_contact_to DESC  LIMIT 1;
SELECT I.individual_last_name  FROM Individuals I JOIN Organization_Contact_Individuals OCI ON I.individual_id = OCI.individual_id JOIN Organizations O ON OCI.organization_id = O.organization_id WHERE O.uk_vat_number = (SELECT MAX(uk_vat_number) FROM Organizations) ORDER BY OCI.date_contact_from ASC LIMIT 1;
SELECT T1.individual_last_name  FROM Individuals AS T1  JOIN Organization_Contact_Individuals AS T2 ON T1.individual_id = T2.individual_id  JOIN Organizations AS T3 ON T2.organization_id = T3.organization_id  WHERE T3.uk_vat_number = (SELECT MAX(uk_vat_number) FROM Organizations) ORDER BY T2.date_contact_from ASC  LIMIT 1;
SELECT COUNT(*) FROM Services;
SELECT COUNT(*) FROM Services;
SELECT s.service_name  FROM Services s  LEFT JOIN Party_Services ps ON s.service_id = ps.service_id  WHERE ps.service_id IS NULL;
SELECT s.service_name  FROM Services s  LEFT JOIN Party_Services ps ON s.service_id = ps.service_id  WHERE ps.service_id IS NULL;
SELECT DISTINCT town_city, state_province_county FROM Addresses;
SELECT town_city, state_province_county FROM Addresses;
SELECT COUNT(DISTINCT town_city)  FROM Addresses  WHERE state_province_county = 'Colorado';
SELECT COUNT(DISTINCT town_city)  FROM Addresses  WHERE state_province_county = 'Colorado';
SELECT payment_method_code  FROM Parties  GROUP BY payment_method_code  HAVING COUNT(party_id) > 3;
SELECT payment_method_code  FROM Parties  GROUP BY payment_method_code  HAVING COUNT(party_id) > 3;
SELECT organization_name FROM Organizations WHERE organization_name LIKE '%Party%';
SELECT organization_name  FROM Organizations  WHERE organization_name LIKE '%Party%';
SELECT COUNT(DISTINCT payment_method_code) FROM Parties;
SELECT COUNT(DISTINCT payment_method_code) FROM Parties;
SELECT T1.party_email  FROM Parties AS T1  JOIN Party_Services AS T2 ON T1.party_id = T2.customer_id  GROUP BY T1.party_email  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T1.party_email  FROM Parties AS T1  JOIN Party_Services AS T2 ON T1.party_id = T2.customer_id  GROUP BY T1.party_email  ORDER BY COUNT(T2.service_id) DESC  LIMIT 1;
SELECT state_province_county  FROM Addresses  WHERE line_1_number_building = '6862 Kaitlyn Knolls';
SELECT Addresses.state_province_county  FROM Addresses  WHERE Addresses.line_1_number_building = '6862 Kaitlyn Knolls';
SELECT T1.organization_name  FROM Organizations AS T1  JOIN Organization_Contact_Individuals AS T2  ON T1.organization_id = T2.organization_id  GROUP BY T1.organization_name  ORDER BY COUNT(T2.individual_id) DESC  LIMIT 1;
SELECT T1.organization_name  FROM Organizations AS T1  JOIN Organization_Contact_Individuals AS T2  ON T1.organization_id = T2.organization_id  GROUP BY T1.organization_name  ORDER BY COUNT(T2.individual_id) DESC  LIMIT 1;
SELECT DISTINCT I.individual_last_name  FROM Individuals I  JOIN Organization_Contact_Individuals OCI  ON I.individual_id = OCI.individual_id  WHERE OCI.date_contact_to IS NULL OR OCI.date_contact_to = (     SELECT MAX(date_contact_to)      FROM Organization_Contact_Individuals      WHERE individual_id = I.individual_id );
SELECT DISTINCT I.individual_last_name  FROM Individuals I  JOIN Organization_Contact_Individuals OCI  ON I.individual_id = OCI.individual_id;
SELECT COUNT(*) FROM driver;
SELECT Name, Home_city, Age FROM driver;
SELECT Party, COUNT(Driver_ID)  FROM driver  GROUP BY Party;
SELECT Name  FROM driver  ORDER BY Age DESC;
SELECT DISTINCT Home_city FROM driver;
SELECT Home_city, COUNT(Driver_ID) as Num_Drivers  FROM driver  GROUP BY Home_city  ORDER BY Num_Drivers DESC  LIMIT 1;
SELECT Party  FROM driver  WHERE Home_city = 'Hartford' AND Age > 40;
SELECT Home_city  FROM driver  WHERE Age > 40  GROUP BY Home_city  HAVING COUNT(Driver_ID) >= 2;
Error: 第 6357 个样本有 2 个SQL。
SELECT Name  FROM driver  WHERE Driver_ID NOT IN (SELECT Driver_ID FROM school_bus)
SELECT Type  FROM school  GROUP BY Type  HAVING COUNT(School_ID) = 2;
SELECT school.School, driver.Name  FROM school_bus  JOIN driver ON school_bus.Driver_ID = driver.Driver_ID  JOIN school ON school_bus.School_ID = school.School_ID;
SELECT MAX(Years_Working) AS Maximum, MIN(Years_Working) AS Minimum, AVG(Years_Working) AS Average  FROM school_bus;
SELECT School, Type  FROM school  WHERE School_ID NOT IN (SELECT School_ID FROM school_bus)
SELECT s.Type, COUNT(sb.School_ID) as Num_Buses FROM school s JOIN school_bus sb ON s.School_ID = sb.School_ID GROUP BY s.Type;
SELECT COUNT(*)  FROM driver  WHERE Home_city = 'Hartford' OR Age < 40;
SELECT Name  FROM driver  WHERE Home_city = 'Hartford' AND Age < 40;
SELECT D.Name  FROM driver D JOIN school_bus SB ON D.Driver_ID = SB.Driver_ID  WHERE SB.Years_Working = (SELECT MAX(Years_Working) FROM school_bus);
SELECT COUNT(*) FROM flight WHERE Velocity > 200;
SELECT f.Vehicle_Flight_number, f.Date, f.Pilot  FROM flight f ORDER BY f.Altitude;
SELECT id, Country, City, name  FROM airport  ORDER BY name ASC;
SELECT MAX(Group_Equity_Shareholding) FROM operate_company;
SELECT Velocity FROM flight WHERE Pilot = 'Thompson';
SELECT DISTINCT operate_company.name, operate_company.Type  FROM operate_company  JOIN flight ON operate_company.id = flight.company_id;
SELECT name FROM airport WHERE Country != 'Iceland';
SELECT DISTINCT oc.Type  FROM operate_company oc  JOIN flight f ON oc.id = f.company_id  WHERE f.Velocity < 200;
SELECT company_id, name  FROM operate_company  WHERE id IN (     SELECT company_id      FROM flight      GROUP BY company_id      HAVING COUNT(*) > 1 );
SELECT T1.id, T1.name, T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY COUNT(T2.id) DESC LIMIT 1;
SELECT DISTINCT T3.Pilot  FROM airport AS T1  JOIN flight AS T3 ON T1.id = T3.airport_id  WHERE T1.Country = 'United States'  OR T1.name = 'Billund Airport';
SELECT Type, COUNT(*) AS count  FROM operate_company  GROUP BY Type  ORDER BY count DESC  LIMIT 1;
SELECT COUNT(*)  FROM airport  WHERE id NOT IN (     SELECT airport_id      FROM flight      WHERE Pilot = 'Thompson' );
SELECT pilot  FROM flight  JOIN operate_company ON flight.company_id = operate_company.id  WHERE operate_company.Type = 'Cargo'  INTERSECT  SELECT pilot  FROM flight  JOIN operate_company ON flight.company_id = operate_company.id  WHERE operate_company.Type = 'Catering services'
SELECT name FROM airport WHERE name LIKE '%international%';
SELECT airport.id, airport.name, COUNT(DISTINCT flight.company_id) as Number_of_Companies  FROM airport  JOIN flight ON airport.id = flight.airport_id  GROUP BY airport.id, airport.name;
SELECT Country, COUNT(*)  FROM airport  GROUP BY Country;
SELECT Country  FROM airport  GROUP BY Country  HAVING COUNT(id) > 2;
SELECT Pilot, COUNT(*) AS NumberOfFlights  FROM flight  GROUP BY Pilot  ORDER BY NumberOfFlights DESC  LIMIT 1;
SELECT COUNT(*) FROM Accounts;
SELECT COUNT(*) FROM Accounts;
SELECT Account_ID, Account_Details FROM Accounts;
SELECT Account_ID, Account_Details FROM Accounts;
SELECT COUNT(*) FROM Statements;
SELECT COUNT(*) FROM Statements;
SELECT Statement_ID, Statement_Details FROM Statements;
SELECT Statement_ID, Statement_Details FROM Statements;
SELECT A.Statement_ID, S.Statement_Details, A.Account_Details  FROM Accounts A  JOIN Statements S ON A.Statement_ID = S.Statement_ID;
SELECT Statements.Statement_ID, Statements.Statement_Details, Accounts.Account_Details  FROM Statements  JOIN Accounts  ON Statements.Statement_ID = Accounts.Statement_ID;
SELECT Statements.Statement_ID, COUNT(Accounts.Account_ID) AS NumberOfAccounts FROM Statements JOIN Accounts ON Statements.Statement_ID = Accounts.Statement_ID GROUP BY Statements.Statement_ID;
SELECT Statement_ID, COUNT(*) AS Number_of_Accounts FROM Accounts GROUP BY Statement_ID;
SELECT T1.Statement_ID, T1.Statement_Details  FROM Statements AS T1  JOIN Accounts AS T2 ON T1.Statement_ID = T2.Statement_ID  GROUP BY T1.Statement_ID  ORDER BY COUNT(T2.Account_ID) DESC  LIMIT 1;
SELECT S.Statement_ID, S.Statement_Details  FROM Statements S JOIN Accounts A ON S.Statement_ID = A.Statement_ID GROUP BY S.Statement_ID, S.Statement_Details ORDER BY COUNT(A.Account_ID) DESC LIMIT 1;
SELECT COUNT(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT Document_Type_Code, Document_Name, Document_Description  FROM Documents  WHERE Document_Name = 'Noel CV' OR Document_Name = 'King Book';
SELECT T1.Document_Type_Code, T1.Document_Type_Name, T1.Document_Type_Description  FROM Ref_Document_Types AS T1  JOIN Documents AS T2  ON T1.Document_Type_Code = T2.Document_Type_Code  WHERE T2.Document_Name = 'Noel CV' OR T2.Document_Name = 'King Book';
SELECT Document_ID, Document_Name  FROM Documents;
SELECT Document_ID, Document_Name  FROM Documents;
SELECT Document_Name, Document_ID  FROM Documents  WHERE Document_Type_Code = 'BK';
SELECT Document_Name, Document_ID  FROM Documents  WHERE Document_Type_Code = 'BK';
SELECT COUNT(Documents.Document_ID), Documents.Project_ID  FROM Documents  JOIN Ref_Document_Types  ON Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code  WHERE Ref_Document_Types.Document_Type_Code = 'BK'  GROUP BY Documents.Project_ID;
SELECT Project_ID, COUNT(*)  FROM Documents  WHERE Document_Type_Code = 'BK'  GROUP BY Project_ID;
SELECT Document_Name, Document_Date  FROM Documents  WHERE Project_ID = (SELECT Project_ID FROM Projects WHERE Project_Details = 'Graph Database project');
SELECT D.Document_Name, D.Document_Date  FROM Documents D JOIN Projects P ON D.Project_ID = P.Project_ID  WHERE P.Project_Details = 'Graph Database project';
SELECT Project_ID, COUNT(Document_ID) AS NumberOfDocuments FROM Documents GROUP BY Project_ID;
SELECT Project_ID, COUNT(Document_ID) as NumberOfDocuments FROM Documents GROUP BY Project_ID;
SELECT P.Project_ID  FROM Projects P JOIN Documents D ON P.Project_ID = D.Project_ID GROUP BY P.Project_ID ORDER BY COUNT(D.Document_ID) ASC LIMIT 1;
SELECT P.Project_ID  FROM Projects P JOIN Documents D ON P.Project_ID = D.Project_ID GROUP BY P.Project_ID ORDER BY COUNT(D.Document_ID) ASC LIMIT 1;
SELECT p.Project_ID  FROM Projects p JOIN Documents d ON p.Project_ID = d.Project_ID  GROUP BY p.Project_ID  HAVING COUNT(d.Document_ID) >= 2;
SELECT Project_ID  FROM Documents  GROUP BY Project_ID  HAVING COUNT(*) >= 2;
SELECT Ref_Document_Types.Document_Type_Code, COUNT(Documents.Document_ID) AS NumberOfDocuments FROM Ref_Document_Types JOIN Documents ON Ref_Document_Types.Document_Type_Code = Documents.Document_Type_Code GROUP BY Ref_Document_Types.Document_Type_Code;
SELECT Ref_Document_Types.Document_Type_Code, Ref_Document_Types.Document_Type_Name, COUNT(Documents.Document_ID) as Number_of_Documents FROM Ref_Document_Types JOIN Documents ON Ref_Document_Types.Document_Type_Code = Documents.Document_Type_Code GROUP BY Ref_Document_Types.Document_Type_Code, Ref_Document_Types.Document_Type_Name;
SELECT Document_Type_Code  FROM Documents  GROUP BY Document_Type_Code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Document_Type_Code  FROM Documents  GROUP BY Document_Type_Code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Document_Type_Code  FROM Documents  GROUP BY Document_Type_Code  HAVING COUNT(Document_ID) < 3;
Error: 第 6423 个样本有 2 个SQL。
SELECT S.Statement_Details, D.Document_Name  FROM Statements S  JOIN Documents_with_Expenses DWE ON S.Statement_ID = DWE.Document_ID  JOIN Documents D ON DWE.Document_ID = D.Document_ID  WHERE S.Statement_Details = 'Private Project';
SELECT S.Statement_Details, D.Document_Name  FROM Statements S  JOIN Accounts A ON S.Statement_ID = A.Statement_ID  JOIN Documents D ON D.Document_ID = A.Document_ID  JOIN Projects P ON P.Project_ID = D.Project_ID  WHERE S.Statement_Details = 'Private Project';
SELECT Document_Type_Code, Document_Type_Name, Document_Type_Description  FROM Ref_Document_Types;
SELECT Document_Type_Code, Document_Type_Name, Document_Type_Description  FROM Ref_Document_Types;
Error: 第 6428 个样本有 2 个SQL。
SELECT Document_Type_Description  FROM Ref_Document_Types  WHERE Document_Type_Name = 'Film';
SELECT Ref_Document_Types.Document_Type_Name,         Ref_Document_Types.Document_Type_Description,        Documents.Document_Date  FROM Documents  JOIN Ref_Document_Types  ON Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code;
SELECT Ref_Document_Types.Document_Type_Name,         Ref_Document_Types.Document_Type_Description,         Documents.Document_Date  FROM Documents  INNER JOIN Ref_Document_Types  ON Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code;
SELECT COUNT(*) FROM Projects;
SELECT COUNT(*) FROM Projects;
SELECT Project_ID, Project_Details FROM Projects;
SELECT Project_ID, Project_Details FROM Projects;
SELECT T1.Project_ID, T1.Project_Details FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID GROUP BY T1.Project_ID, T1.Project_Details HAVING COUNT(T2.Document_ID) >= 2;
SELECT P.Project_ID, P.Project_Details FROM Projects P JOIN Documents D ON P.Project_ID = D.Project_ID GROUP BY P.Project_ID, P.Project_Details HAVING COUNT(D.Document_ID) > 2
SELECT Projects.Project_Details  FROM Projects  JOIN Documents ON Projects.Project_ID = Documents.Project_ID  WHERE Documents.Document_Name = 'King Book';
SELECT Projects.Project_Details  FROM Projects  JOIN Documents ON Projects.Project_ID = Documents.Project_ID  WHERE Documents.Document_Name = 'King Book';
SELECT COUNT(*) FROM Ref_Budget_Codes;
SELECT COUNT(*) FROM Ref_Budget_Codes;
SELECT Budget_Type_Code, Budget_Type_Description  FROM Ref_Budget_Codes;
SELECT Budget_Type_Code, Budget_Type_Description  FROM Ref_Budget_Codes;
SELECT Budget_Type_Description  FROM Ref_Budget_Codes  WHERE Budget_Type_Code = 'ORG';
SELECT Budget_Type_Description  FROM Ref_Budget_Codes  WHERE Budget_Type_Code = 'ORG';
SELECT COUNT(*)  FROM Documents_with_Expenses;
SELECT COUNT(*) FROM Documents_with_Expenses;
SELECT Document_ID  FROM Documents_with_Expenses  WHERE Budget_Type_Code = 'SF';
SELECT Document_ID FROM Documents_with_Expenses WHERE Budget_Type_Code = 'SF';
SELECT Dwe.Budget_Type_Code, Rbc.Budget_Type_Description, Dwe.Document_ID  FROM Documents_with_Expenses Dwe JOIN Ref_Budget_Codes Rbc ON Dwe.Budget_Type_Code = Rbc.Budget_Type_Code;
SELECT Dwe.Budget_Type_Code, Rbc.Budget_Type_Description, Dwe.Document_ID  FROM Documents_with_Expenses Dwe JOIN Ref_Budget_Codes Rbc ON Dwe.Budget_Type_Code = Rbc.Budget_Type_Code;
SELECT D.Document_ID  FROM Documents D JOIN Documents_with_Expenses DE ON D.Document_ID = DE.Document_ID JOIN Ref_Budget_Codes RBC ON DE.Budget_Type_Code = RBC.Budget_Type_Code WHERE RBC.Budget_Type_Description = 'Government';
SELECT D.Document_ID  FROM Documents D JOIN Documents_with_Expenses DE ON D.Document_ID = DE.Document_ID JOIN Ref_Budget_Codes RBC ON DE.Budget_Type_Code = RBC.Budget_Type_Code WHERE RBC.Budget_Type_Description = 'Government';
SELECT Ref_Budget_Codes.Budget_Type_Code, COUNT(Documents_with_Expenses.Document_ID) AS NumberOfDocuments FROM Documents_with_Expenses JOIN Ref_Budget_Codes ON Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code GROUP BY Ref_Budget_Codes.Budget_Type_Code;
SELECT Ref_Budget_Codes.Budget_Type_Code, COUNT(Documents_with_Expenses.Document_ID) AS NumberOfDocuments FROM Ref_Budget_Codes JOIN Documents_with_Expenses ON Ref_Budget_Codes.Budget_Type_Code = Documents_with_Expenses.Budget_Type_Code GROUP BY Ref_Budget_Codes.Budget_Type_Code;
SELECT T2.Budget_Type_Code  FROM Documents_with_Expenses AS T1  JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code  GROUP BY T2.Budget_Type_Code  ORDER BY COUNT(T1.Document_ID) DESC  LIMIT 1;
SELECT T2.Budget_Type_Code  FROM Documents_with_Expenses AS T1  JOIN Ref_Budget_Codes AS T2  ON T1.Budget_Type_Code = T2.Budget_Type_Code  GROUP BY T2.Budget_Type_Code  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Document_ID FROM Documents WHERE Document_ID NOT IN (SELECT Document_ID FROM Documents_with_Expenses)
SELECT Document_ID FROM Documents WHERE Document_ID NOT IN (SELECT Document_ID FROM Documents_with_Expenses)
SELECT D.Document_ID  FROM Documents D LEFT JOIN Documents_with_Expenses DE ON D.Document_ID = DE.Document_ID  WHERE D.Document_Type_Code = 'CV' AND DE.Document_ID IS NULL;
SELECT D.Document_ID  FROM Documents D WHERE D.Document_Type_Code = 'CV' AND D.Document_ID NOT IN (SELECT DWED.Document_ID FROM Documents_with_Expenses DWED)
SELECT D.Document_ID  FROM Documents D  JOIN Documents_with_Expenses DE ON D.Document_ID = DE.Document_ID  WHERE D.Document_Name LIKE '%s%'
SELECT D.Document_ID  FROM Documents D  JOIN Documents_with_Expenses DE ON D.Document_ID = DE.Document_ID  WHERE D.Document_Name LIKE '%s%' ;
SELECT COUNT(*)  FROM Documents  WHERE Document_ID NOT IN (SELECT Document_ID FROM Documents_with_Expenses)
SELECT COUNT(*)  FROM Documents  WHERE Document_ID NOT IN (SELECT Document_ID FROM Documents_with_Expenses);
SELECT D.Document_Date  FROM Documents D JOIN Documents_with_Expenses DE1 ON D.Document_ID = DE1.Document_ID JOIN Documents_with_Expenses DE2 ON D.Document_ID = DE2.Document_ID WHERE DE1.Budget_Type_Code = 'GV' AND DE2.Budget_Type_Code = 'SF' GROUP BY D.Document_Date HAVING COUNT(DISTINCT D.Document_ID) > 1;
SELECT D.Document_Date  FROM Documents D JOIN Documents_with_Expenses DE1 ON D.Document_ID = DE1.Document_ID JOIN Documents_with_Expenses DE2 ON D.Document_ID = DE2.Document_ID WHERE DE1.Budget_Type_Code = 'GV' AND DE2.Budget_Type_Code = 'SF' GROUP BY D.Document_Date HAVING COUNT(DISTINCT DE1.Budget_Type_Code) > 0 AND COUNT(DISTINCT DE2.Budget_Type_Code) > 0;
SELECT Account_Details  FROM Accounts  WHERE Account_Details = (SELECT MAX(Account_Details) FROM Accounts)  OR Account_Details LIKE '%5%';
SELECT Account_Details  FROM Accounts  WHERE LENGTH(Account_Details) - LENGTH(REPLACE(Account_Details, '5', '')) >= 1  ORDER BY CAST(REPLACE(Account_Details, ',', '') AS DECIMAL) DESC  LIMIT 1;
SELECT COUNT(*) FROM Scientists;
SELECT COUNT(*) FROM Scientists;
SELECT SUM(Hours) FROM Projects;
SELECT SUM(Hours) FROM Projects;
SELECT COUNT(DISTINCT Scientist) FROM AssignedTo;
SELECT COUNT(DISTINCT Scientist) FROM AssignedTo;
SELECT COUNT(DISTINCT Project) FROM AssignedTo;
SELECT COUNT(DISTINCT Name) FROM Projects;
SELECT AVG(Hours) FROM Projects;
SELECT AVG(Hours) FROM Projects;
SELECT Name FROM Projects WHERE Hours = (SELECT MAX(Hours) FROM Projects);
SELECT p.Name  FROM Projects p JOIN AssignedTo at ON p.Code = at.Project GROUP BY p.Name ORDER BY SUM(p.Hours) DESC LIMIT 1;
SELECT Name  FROM Projects  WHERE Hours > (SELECT AVG(Hours) FROM Projects);
SELECT Name FROM Projects WHERE Hours > (SELECT AVG(Hours) FROM Projects);
SELECT P.Name, P.Hours  FROM Projects P JOIN (     SELECT Project, COUNT(*) AS scientist_count     FROM AssignedTo     GROUP BY Project     ORDER BY scientist_count DESC     LIMIT 1 ) AT ON P.Code = AT.Project;
SELECT P.Name, P.Hours  FROM Projects P JOIN (     SELECT Project, COUNT(*) AS scientist_count     FROM AssignedTo     GROUP BY Project     ORDER BY scientist_count DESC     LIMIT 1 ) AT ON P.Code = AT.Project;
SELECT P.Name  FROM Projects P JOIN AssignedTo A ON P.Code = A.Project JOIN Scientists S ON A.Scientist = S.SSN WHERE S.Name LIKE '%Smith%';
SELECT p.Name  FROM Projects p JOIN AssignedTo at ON p.Code = at.Project JOIN Scientists s ON at.Scientist = s.SSN WHERE s.Name LIKE '%Smith%';
SELECT SUM(Projects.Hours)  FROM Projects  JOIN AssignedTo ON Projects.Code = AssignedTo.Project  JOIN Scientists ON Scientists.SSN = AssignedTo.Scientist  WHERE Scientists.Name = 'Michael Rogers' OR Scientists.Name = 'Carol Smith';
SELECT SUM(P.Hours)  FROM Projects P  JOIN AssignedTo A ON P.Code = A.Project  JOIN Scientists S ON S.SSN = A.Scientist  WHERE S.Name = 'Michael Rogers' OR S.Name = 'Carol Smith';
SELECT Name  FROM Projects  WHERE Hours BETWEEN 100 AND 300;
SELECT Name  FROM Projects  WHERE Hours BETWEEN 100 AND 300;
SELECT s.Name FROM Scientists s JOIN AssignedTo at1 ON s.SSN = at1.Scientist JOIN Projects p1 ON at1.Project = p1.Code AND p1.Name = 'Matter of Time' JOIN AssignedTo at2 ON s.SSN = at2.Scientist JOIN Projects p2 ON at2.Project = p2.Code AND p2.Name = 'A Puzzling Parallax';
SELECT s.Name FROM Scientists s JOIN AssignedTo at ON s.SSN = at.Scientist JOIN Projects p ON at.Project = p.Code WHERE p.Name IN ('Matter of Time', 'A Puzzling Pattern') GROUP BY s.Name HAVING COUNT(DISTINCT p.Name) = 2;
SELECT Name FROM Scientists ORDER BY Name;
SELECT Name FROM Scientists ORDER BY Name;
SELECT Projects.Name, COUNT(*) as Num_Scientists FROM Projects JOIN AssignedTo ON Projects.Code = AssignedTo.Project GROUP BY Projects.Name;
SELECT Projects.Name, COUNT(AssignedTo.Scientist) AS NumberOfScientists FROM Projects LEFT JOIN AssignedTo ON Projects.Code = AssignedTo.Project GROUP BY Projects.Name;
SELECT COUNT(DISTINCT T1.SSN)  FROM AssignedTo AS T1  JOIN Projects AS T2 ON T1.Project = T2.Code  WHERE T2.Hours > 300;
SELECT p.Name, COUNT(a.Scientist) as Num_Scientists FROM Projects p JOIN AssignedTo a ON p.Code = a.Project WHERE p.Hours > 300 GROUP BY p.Name;
SELECT S.Name, COUNT(*) as NumProjects FROM Scientists S JOIN AssignedTo A ON S.SSN = A.Scientist GROUP BY S.Name;
SELECT S.Name, COUNT(AT.Project) AS NumberOfProjects FROM Scientists S JOIN AssignedTo AT ON S.SSN = AT.Scientist GROUP BY S.SSN, S.Name;
SELECT S.SSN, S.Name  FROM Scientists S JOIN AssignedTo AT ON S.SSN = AT.Scientist JOIN Projects P ON AT.Project = P.Code WHERE P.Hours = (SELECT MAX(Hours) FROM Projects);
SELECT S.SSN, S.Name  FROM Scientists S JOIN AssignedTo AT ON S.SSN = AT.Scientist JOIN Projects P ON AT.Project = P.Code WHERE P.Hours = (SELECT MAX(Hours) FROM Projects)
SELECT DISTINCT S.Name  FROM Scientists S JOIN AssignedTo A ON S.SSN = A.Scientist
SELECT DISTINCT S.Name  FROM Scientists S JOIN AssignedTo A ON S.SSN = A.Scientist;
SELECT Name  FROM Projects  WHERE Code NOT IN (SELECT Project FROM AssignedTo);
SELECT Name  FROM Projects  WHERE Code NOT IN (SELECT Project FROM AssignedTo)
SELECT Name  FROM Scientists  WHERE SSN NOT IN (SELECT Scientist FROM AssignedTo);
SELECT Name  FROM Scientists  WHERE SSN NOT IN (SELECT Scientist FROM AssignedTo);
SELECT COUNT(*)  FROM Scientists  WHERE SSN NOT IN (SELECT Scientist FROM AssignedTo);
SELECT COUNT(*)  FROM Scientists  WHERE SSN NOT IN (SELECT Scientist FROM AssignedTo)
SELECT s.Name FROM Scientists s WHERE NOT EXISTS (     SELECT 1     FROM AssignedTo at, Projects p     WHERE at.Scientist = s.SSN     AND at.Project = p.Code     AND p.Hours = (SELECT MAX(Hours) FROM Projects) );
SELECT s.Name FROM Scientists s WHERE s.SSN NOT IN (     SELECT at.Scientist     FROM AssignedTo at     JOIN Projects p ON at.Project = p.Code     WHERE p.Hours = (         SELECT MAX(hours)         FROM Projects     ) );
SELECT S.Name AS Scientist_Name, P.Name AS Project_Name, P.Hours AS Hours_Worked FROM Scientists S JOIN AssignedTo A ON S.SSN = A.Scientist JOIN Projects P ON A.Project = P.Code ORDER BY P.Name, S.Name;
SELECT S.Name AS Scientist_Name, P.Name AS Project_Name, P.Hours AS Project_Hours FROM Scientists S JOIN AssignedTo AT ON S.SSN = AT.Scientist JOIN Projects P ON AT.Project = P.Code ORDER BY P.Name, S.Name;
SELECT P.Name AS ProjectName, S.Name AS ScientistName FROM Projects P,      Scientists S,      AssignedTo AT WHERE P.Code = AT.Project AND S.SSN = AT.Scientist AND P.Hours = (SELECT MIN(Hours) FROM Projects);
SELECT P.Name AS Project_Name, S.Name AS Scientist_Name FROM Scientists S JOIN AssignedTo A ON S.SSN = A.Scientist JOIN Projects P ON A.Project = P.Code WHERE P.Hours = (SELECT MIN(Hours) FROM Projects)
SELECT Name FROM wine WHERE Score = (SELECT MAX(Score) FROM wine);
SELECT Name FROM wine WHERE Score = (SELECT MAX(Score) FROM wine);
SELECT Winery  FROM wine  WHERE Score = (SELECT MAX(Score) FROM wine);
SELECT Winery FROM wine WHERE Score = (SELECT MAX(Score) FROM wine)
SELECT Name FROM wine WHERE Year = 2008;
SELECT Name FROM wine WHERE Year = 2008;
SELECT G.Grape, A.Appelation FROM wine W JOIN grapes G ON W.Grape = G.ID JOIN appellations A ON W.Appelation = A.No;
SELECT grapes.Grape, appellations.Appelation  FROM wine JOIN grapes ON wine.Grape = grapes.ID JOIN appellations ON wine.Appelation = appellations.No;
SELECT Name, Score FROM wine;
SELECT Name, Score FROM wine;
SELECT Area, County FROM appellations;
SELECT DISTINCT Area, County FROM appellations;
SELECT Price FROM wine WHERE Year < 2010;
SELECT Price  FROM wine  WHERE Year < 2010;
SELECT DISTINCT Name  FROM wine  WHERE Score > 90;
SELECT Name FROM wine WHERE Score > 90;
SELECT DISTINCT w.Name  FROM wine w JOIN grapes g ON w.Grape = g.ID WHERE g.Color = 'Red';
SELECT w.Name FROM wine w JOIN grapes g ON w.Grape = g.Grape WHERE g.Color = 'Red'
SELECT DISTINCT w.Name  FROM wine w JOIN appellations a ON w.Appelation = a.Appelation WHERE a.Area = 'North Coast';
SELECT DISTINCT w.Name  FROM wine w JOIN appellations a ON w.Appelation = a.Appelation WHERE a.Area = 'North Coast';
SELECT COUNT(*) FROM wine WHERE Winery = 'Robert Biale';
SELECT COUNT(*)  FROM wine  WHERE Winery = 'Robert Biale';
SELECT COUNT(*)  FROM appellations  WHERE County = 'Napa';
SELECT COUNT(*)  FROM appellations  WHERE County = 'Napa';
SELECT AVG(wine.Price)  FROM wine  JOIN appellations ON wine.Appelation = appellations.Appelation  WHERE appellations.County = 'Sonoma County';
SELECT AVG(wine.Price)  FROM wine  JOIN appellations ON wine.Appelation = appellations.Appelation  WHERE appellations.County = 'Sonoma County';
SELECT w.Name, w.Score  FROM wine w JOIN grapes g ON w.Grape = g.ID WHERE g.Color = 'White';
SELECT w.Name, w.Score  FROM wine w JOIN grapes g ON w.Grape = g.ID WHERE g.Color = 'White';
SELECT MAX(wine.Price)  FROM wine  JOIN appellations ON wine.Appelation = appellations.Appelation  WHERE appellations.Area = 'Central Coast' AND wine.Year < 2005;
SELECT MAX(wine.Price)  FROM wine  JOIN appellations ON wine.Appelation = appellations.Appelation  WHERE appellations.Area = 'Central Coast' AND wine.Year < 2005;
SELECT G.Grape FROM grapes AS G JOIN wine AS W ON G.ID = W.Grape WHERE G.Color = 'White' AND W.Score > 90;
SELECT g.Grape FROM grapes AS g JOIN wine AS w ON g.ID = w.Grape WHERE g.Color = 'White' AND w.Score > 90;
SELECT wine.Name FROM wine JOIN grapes ON wine.Grape = grapes.ID WHERE wine.Price > 50 AND grapes.Color = 'Red';
SELECT w.Name  FROM wine w JOIN grapes g ON w.Grape = g.Grape WHERE g.Color = 'red' AND w.Price > 50;
SELECT wine.Name FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation WHERE wine.Price < 50 AND appellations.County = 'Monterey';
SELECT w.Name FROM wine w JOIN appellations a ON w.Appelation = a.Appelation WHERE w.Price < 50 AND a.County = 'Monterey';
SELECT Grape, COUNT(*) AS Num_Wines FROM wine GROUP BY Grape;
SELECT Grape, COUNT(*) AS NumberOfWines FROM wine GROUP BY Grape;
SELECT Year, AVG(Price)  FROM wine  GROUP BY Year;
SELECT Year, AVG(Price)  FROM wine  GROUP BY Year;
SELECT DISTINCT Name  FROM wine  WHERE Price > ANY (     SELECT Price      FROM wine      WHERE Winery = 'John Anthony' );
SELECT DISTINCT Name  FROM wine  WHERE Price > ANY (     SELECT Price      FROM wine      WHERE Winery = 'John Anthony' );
SELECT DISTINCT Name FROM wine ORDER BY Name ASC;
SELECT Name FROM wine ORDER BY Name ASC;
SELECT DISTINCT Name FROM wine ORDER BY Price;
SELECT Name FROM wine ORDER BY Price ASC;
SELECT T1.Area FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Year < 2010 GROUP BY T2.Appelation ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.Area FROM wine AS T1 JOIN appellations AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Year < 2010 GROUP BY T1.Appelation ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Color FROM grapes AS T1 JOIN wine AS T2 ON T1.ID = T2.Grape GROUP BY T2.Grape ORDER BY AVG(T2.Price) DESC LIMIT 1
SELECT T1.Color FROM grapes AS T1 JOIN wine AS T2 ON T1.ID = T2.Grape GROUP BY T2.Grape ORDER BY AVG(T2.Price) DESC LIMIT 1;
SELECT DISTINCT Name FROM wine WHERE Year < 2000 OR Year > 2010;
SELECT DISTINCT Name FROM wine WHERE Year < 2000 OR Year > 2010;
SELECT DISTINCT T2.Winery  FROM wine AS T2  JOIN grapes AS T1 ON T1.ID = T2.Grape  WHERE T2.Price BETWEEN 50 AND 100;
SELECT DISTINCT Winery  FROM wine  WHERE Price BETWEEN 50 AND 100;
SELECT AVG(Price), SUM(Cases)  FROM wine  WHERE YEAR = 2009 AND Grape = 'Zinfandel';
SELECT AVG(Price), SUM(Cases)  FROM wine  WHERE Grape = 'Zinfandel' AND Year = 2009;
SELECT MAX(wine.Price), MAX(wine.Score)  FROM wine  JOIN appellations ON wine.Appelation = appellations.Appelation  WHERE appellations.Appelation = 'St. Helena';
SELECT MAX(Price), MAX(Score)  FROM wine  WHERE Appelation = 'St. Helena';
SELECT Year, MAX(Price) as Max_Price, MAX(Score) as Max_Score FROM wine GROUP BY Year;
SELECT Year, MAX(Price) as Max_Price, MAX(Score) as Max_Score FROM wine GROUP BY Year;
SELECT Appelation, AVG(Price) AS Average_Price, AVG(Score) AS Average_Score FROM wine GROUP BY Appelation;
SELECT Appelation, AVG(Price) as Average_Price, AVG(Score) as Average_Score FROM wine GROUP BY Appelation;
SELECT Winery  FROM wine  GROUP BY Winery  HAVING COUNT(*) >= 4;
SELECT Winery  FROM wine  GROUP BY Winery  HAVING COUNT(*) >= 4;
SELECT T2.County FROM wine AS T1 JOIN appellations AS T2 ON T1.Appelation = T2.Appelation GROUP BY T1.Appelation HAVING COUNT(*) <= 3
SELECT T2.County FROM wine AS T1 JOIN appellations AS T2 ON T1.Appelation = T2.Appelation GROUP BY T1.Appelation HAVING COUNT(*) <= 3
SELECT Name FROM wine WHERE Year < ALL (SELECT Year FROM wine WHERE Winery = 'Brander')
SELECT Name  FROM wine  WHERE No IN (     SELECT No      FROM wine      WHERE Year < (         SELECT MIN(Year)          FROM wine          WHERE Winery = 'Brander'     ) )
SELECT Name  FROM wine  WHERE Price > ALL (     SELECT Price      FROM wine      WHERE Year = 2006 );
SELECT Name FROM wine WHERE Price > ANY (SELECT Price FROM wine WHERE YEAR = 2006);
SELECT w.Winery, COUNT(*) AS TotalWines FROM wine w JOIN grapes g ON w.Grape = g.ID WHERE g.Color = 'White' GROUP BY w.Winery ORDER BY TotalWines DESC LIMIT 3;
SELECT w.Winery, COUNT(*) AS TotalWines FROM wine w JOIN grapes g ON w.Grape = g.ID WHERE g.Color = 'White' GROUP BY w.Winery ORDER BY TotalWines DESC LIMIT 3;
SELECT Grape, Winery, Year  FROM wine  WHERE Price > 100  ORDER BY Year;
SELECT Grape, Winery, Year  FROM wine  WHERE Price > 100  ORDER BY Year;
SELECT grapes.Grape, appellations.Appelation, wine.Name FROM wine JOIN grapes ON wine.Grape = grapes.ID JOIN appellations ON wine.Appelation = appellations.No WHERE wine.Score > 93 ORDER BY wine.Name;
SELECT grapes.Grape, appellations.Appelation, wine.Name FROM wine JOIN grapes ON wine.Grape = grapes.ID JOIN appellations ON wine.Appelation = appellations.No WHERE wine.Score > 93 ORDER BY wine.Name;
SELECT DISTINCT Appelation  FROM wine  WHERE Year > 2008  AND Appelation NOT IN (     SELECT Appelation      FROM appellations      WHERE Area = 'Central Coast' );
SELECT DISTINCT Appelation  FROM wine  WHERE Year > 2008 AND Appelation NOT IN (     SELECT Appelation      FROM appellations      WHERE Area = 'Central Coast' );
SELECT AVG(Price)  FROM wine  WHERE Appelation NOT IN (SELECT Appelation FROM appellations WHERE County = 'Sonoma');
Error: 第 6597 个样本有 2 个SQL。
SELECT T2.County  FROM wine AS T1  JOIN appellations AS T2  ON T1.Appelation = T2.Appelation  WHERE T1.Score > 90  GROUP BY T2.County  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T2.County  FROM wine AS T1  JOIN appellations AS T2  ON T1.Appelation = T2.Appelation  WHERE T1.Score > 90  GROUP BY T2.County  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT COUNT(*) FROM station
SELECT Name, Location, Number_of_Platforms FROM station;
SELECT DISTINCT Location FROM station;
SELECT Name, Total_Passengers  FROM station  WHERE Location != 'London';
SELECT Name, Main_Services  FROM station  ORDER BY Total_Passengers DESC  LIMIT 3;
SELECT AVG(Total_Passengers) AS Average_Passengers, MAX(Total_Passengers) AS Max_Passengers  FROM station  WHERE Location = 'London' OR Location = 'Glasgow';
SELECT Location, SUM(Number_of_Platforms) AS Total_platforms, SUM(Total_Passengers) AS Total_passengers FROM station GROUP BY Location;
SELECT DISTINCT s.Location  FROM station s JOIN train_station ts ON s.Station_ID = ts.Station_ID WHERE s.Number_of_Platforms >= 15 AND s.Total_Passengers > 25;
Error: 第 6608 个样本有 2 个SQL。
SELECT Location, COUNT(Station_ID) as Num_Stations FROM station GROUP BY Location ORDER BY Num_Stations DESC LIMIT 1;
SELECT T2.Name, T2.Time, T2.Service  FROM train_station AS T1  JOIN train AS T2  ON T1.Train_ID = T2.Train_ID;
SELECT COUNT(*) FROM train;
SELECT T2.Name, T2.Service  FROM train_station AS T1  JOIN train AS T2  ON T1.Train_ID = T2.Train_ID  ORDER BY T2.Time;
SELECT s.Name, COUNT(ts.Train_ID) as Num_of_Trains FROM station s JOIN train_station ts ON s.Station_ID = ts.Station_ID GROUP BY s.Station_ID;
SELECT T2.Name AS Train_Name, S1.Name AS Station_Name  FROM train_station AS T1  JOIN station AS S1 ON T1.Station_ID = S1.Station_ID  JOIN train AS T2 ON T1.Train_ID = T2.Train_ID;
SELECT train.Name, train.Time  FROM train  JOIN train_station ON train.Train_ID = train_station.Train_ID  JOIN station ON station.Station_ID = train_station.Station_ID  WHERE station.Location = 'London'  ORDER BY train.Time DESC;
SELECT s.Name FROM station s JOIN train_station ts ON s.Station_ID = ts.Station_ID GROUP BY s.Name ORDER BY COUNT(ts.Train_ID) DESC LIMIT 1;
SELECT s.Name  FROM station s JOIN train_station ts ON s.Station_ID = ts.Station_ID GROUP BY s.Name HAVING COUNT(ts.Train_ID) >= 2;
SELECT Location  FROM station  GROUP BY Location  HAVING COUNT(Station_ID) = 1;
SELECT Name  FROM station  WHERE Station_ID NOT IN (SELECT Station_ID FROM train_station)
SELECT s.Name  FROM station s  JOIN train_station ts1 ON s.Station_ID = ts1.Station_ID  JOIN train t1 ON ts1.Train_ID = t1.Train_ID  WHERE t1.Name = 'Ananthapuri Express'  INTERSECT  SELECT s.Name  FROM station s  JOIN train_station ts2 ON s.Station_ID = ts2.Station_ID  JOIN train t2 ON ts2.Train_ID = t2.Train_ID  WHERE t2.Name = 'Guruvayur Express';
SELECT t.Name  FROM train t LEFT JOIN train_station ts ON t.Train_ID = ts.Train_ID LEFT JOIN station s ON ts.Station_ID = s.Station_ID WHERE s.Location != 'London' AND t.Train_ID NOT IN (SELECT Train_ID FROM train_station WHERE Station_ID IN (SELECT Station_ID FROM station WHERE Location = 'London'))
SELECT Name, Location  FROM station  ORDER BY Annual_entry_exit, Annual_interchanges;
SELECT vehicle_id FROM Vehicles;
SELECT vehicle_id FROM Vehicles;
SELECT COUNT(*) FROM Vehicles;
SELECT COUNT(*) FROM Vehicles;
SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;
SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;
SELECT first_name, middle_name, last_name FROM Staff;
SELECT first_name, middle_name, last_name FROM Staff;
SELECT date_of_birth FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';
SELECT date_of_birth  FROM Staff  WHERE first_name = 'Janessa' AND last_name = 'Sawayn';
SELECT date_joined_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';
SELECT date_joined_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';
SELECT date_left_staff  FROM Staff  WHERE first_name = 'Janessa' AND last_name = 'Sawayn';
SELECT date_left_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';
SELECT COUNT(*) FROM Staff WHERE first_name = 'Ludie';
SELECT COUNT(*) FROM Staff WHERE first_name = 'Ludie';
SELECT nickname FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';
SELECT nickname  FROM Staff  WHERE first_name = 'Janessa' AND last_name = 'Sawayn';
SELECT COUNT(*) FROM Staff;
SELECT COUNT(*) FROM Staff;
SELECT A.city  FROM Addresses A JOIN Staff S ON A.address_id = S.staff_address_id WHERE S.first_name = 'Janessa' AND S.last_name = 'Sawayn';
SELECT Addresses.city  FROM Addresses  JOIN Customers ON Addresses.address_id = Customers.customer_address_id  WHERE Customers.first_name = 'Janessa' AND Customers.last_name = 'Sawayn';
SELECT A.country, A.state_province_county  FROM Addresses A JOIN Staff S ON A.address_id = S.staff_address_id WHERE S.first_name = 'Janessa' AND S.last_name = 'Sawayn';
SELECT A.country, A.state_province_county  FROM Addresses A JOIN Customers C ON A.address_id = C.customer_address_id WHERE C.first_name = 'Janessa' AND C.last_name = 'Sawayn';
SELECT SUM(T2.lesson_time)  FROM Customers AS T1  JOIN Lessons AS T2 ON T1.customer_id = T2.customer_id  WHERE T1.first_name = 'Rylan' AND T1.last_name = 'Goodwin';
SELECT SUM(T2.lesson_time)  FROM Customers AS T1  JOIN Lessons AS T2 ON T1.customer_id = T2.customer_id  WHERE T1.first_name = 'Rylan' AND T1.last_name = 'Goodwin';
SELECT Addresses.zip_postcode  FROM Addresses  JOIN Staff ON Addresses.address_id = Staff.staff_address_id  WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn';
SELECT Addresses.zip_postcode  FROM Addresses  JOIN Staff ON Addresses.address_id = Staff.staff_address_id  WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn';
SELECT COUNT(*)  FROM Staff  JOIN Addresses ON Staff.staff_address_id = Addresses.address_id  WHERE Addresses.state_province_county = 'Georgia';
SELECT COUNT(*)  FROM Staff  JOIN Addresses ON Staff.staff_address_id = Addresses.address_id  WHERE Addresses.state_province_county = 'Georgia';
SELECT first_name, last_name  FROM Staff  JOIN Addresses ON Staff.staff_address_id = Addresses.address_id  WHERE Addresses.city = 'Damianfort';
SELECT first_name, last_name  FROM Staff  JOIN Addresses ON Staff.staff_address_id = Addresses.address_id  WHERE Addresses.city = 'Damianfort';
SELECT Addresses.city, COUNT(Staff.staff_id) AS NumOfStaffs FROM Addresses JOIN Staff ON Addresses.address_id = Staff.staff_address_id GROUP BY Addresses.city ORDER BY NumOfStaffs DESC LIMIT 1;
SELECT Addresses.city, COUNT(*) as num_employees FROM Staff JOIN Addresses ON Staff.staff_address_id = Addresses.address_id GROUP BY Addresses.city ORDER BY num_employees DESC LIMIT 1;
SELECT T1.state_province_county  FROM Addresses AS T1  JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id  GROUP BY T1.state_province_county  HAVING COUNT(T2.staff_id) BETWEEN 2 AND 4;
SELECT      T1.state_province_county AS State_Name,     COUNT(T2.staff_id) AS Employee_Count FROM      Addresses AS T1 INNER JOIN      Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY      T1.state_province_county HAVING      COUNT(T2.staff_id) BETWEEN 2 AND 4;
SELECT first_name, last_name  FROM Customers;
SELECT first_name, last_name FROM Customers;
SELECT email_address, date_of_birth  FROM Customers  WHERE first_name = 'Carole';
SELECT email_address, date_of_birth  FROM Customers  WHERE first_name = 'Carole';
SELECT phone_number, email_address  FROM Customers  WHERE amount_outstanding > 2000;
SELECT phone_number, email_address  FROM Customers  WHERE amount_outstanding > 2000;
SELECT customer_status_code, cell_mobile_phone_number, email_address  FROM Customers  WHERE last_name = 'Kohler' OR first_name = 'Marina';
SELECT customer_status_code, phone_number, email_address  FROM Customers  WHERE last_name = 'Kohler' OR first_name = 'Marina';
SELECT Customers.date_of_birth  FROM Customers  WHERE Customers.customer_status_code = 'Good Customer';
SELECT date_of_birth  FROM Customers  WHERE customer_status_code = 'Good Customer';
SELECT date_became_customer  FROM Customers  WHERE first_name = 'Carole' AND last_name = 'Bernhard';
SELECT date_became_customer  FROM Customers  WHERE first_name = 'Carole' AND last_name = 'Bernhard';
SELECT COUNT(*) FROM Customers;
SELECT COUNT(*) FROM Customers;
SELECT customer_status_code, COUNT(*) as num_customers FROM Customers GROUP BY customer_status_code;
SELECT customer_status_code, COUNT(*)  FROM Customers  GROUP BY customer_status_code;
SELECT customer_status_code, COUNT(*) as num_customers FROM Customers GROUP BY customer_status_code ORDER BY num_customers ASC LIMIT 1;
SELECT customer_status_code  FROM Customers  GROUP BY customer_status_code  ORDER BY COUNT(customer_id)  LIMIT 1;
SELECT COUNT(*)  FROM Lessons  JOIN Customers ON Lessons.customer_id = Customers.customer_id  WHERE Customers.first_name = 'Rylan'  AND Customers.last_name = 'Goodwin'  AND Lessons.lesson_status_code = 'completed';
SELECT COUNT(*)  FROM Lessons  JOIN Customers ON Lessons.customer_id = Customers.customer_id  WHERE Customers.first_name = 'Ryan' AND Customers.last_name = 'Goodwin' AND Lessons.lesson_status_code = 'completed';
SELECT MAX(amount_outstanding) AS Maximum, MIN(amount_outstanding) AS Minimum, AVG(amount_outstanding) AS Average  FROM Customers;
SELECT MAX(amount_outstanding) AS Maximum, MIN(amount_outstanding) AS Minimum, AVG(amount_outstanding) AS Average  FROM Customers;
SELECT first_name, last_name  FROM Customers  WHERE amount_outstanding BETWEEN 1000 AND 3000;
SELECT first_name, last_name  FROM Customers  WHERE amount_outstanding BETWEEN 1000 AND 3000;
SELECT Customers.first_name, Customers.last_name  FROM Customers  JOIN Addresses ON Customers.customer_address_id = Addresses.address_id  WHERE Addresses.city = 'Lockmanfurt';
SELECT Customers.first_name, Customers.last_name  FROM Customers  JOIN Addresses ON Customers.customer_address_id = Addresses.address_id  WHERE Addresses.city = 'Lockmanfurt';
SELECT Addresses.country  FROM Addresses  JOIN Customers ON Addresses.address_id = Customers.customer_address_id  WHERE Customers.first_name = 'Carole' AND Customers.last_name = 'Bernhard';
SELECT Addresses.country  FROM Addresses  JOIN Customers ON Addresses.address_id = Customers.customer_address_id  WHERE Customers.first_name = 'Carole' AND Customers.last_name = 'Bernhard';
SELECT Addresses.zip_postcode  FROM Addresses  JOIN Customers ON Addresses.address_id = Customers.customer_address_id  WHERE Customers.first_name = 'Carole' AND Customers.last_name = 'Bernhard';
SELECT Addresses.zip_postcode  FROM Addresses  JOIN Customers ON Addresses.address_id = Customers.customer_address_id  WHERE Customers.first_name = 'Carole' AND Customers.last_name = 'Bernhard';
SELECT T2.city, COUNT(*) AS num_customers  FROM Customers AS T1  JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id  GROUP BY T2.city  ORDER BY num_customers DESC  LIMIT 1;
SELECT Addresses.city, COUNT(Customers.customer_id) AS num_customers FROM Addresses JOIN Customers ON Addresses.address_id = Customers.customer_address_id GROUP BY Addresses.city ORDER BY num_customers DESC LIMIT 1;
SELECT SUM(amount_payment)  FROM Customer_Payments  JOIN Customers ON Customer_Payments.customer_id = Customers.customer_id  WHERE Customers.first_name = 'Carole' AND Customers.last_name = 'Bernhard';
SELECT SUM(amount_payment)  FROM Customer_Payments  JOIN Customers ON Customer_Payments.customer_id = Customers.customer_id  WHERE Customers.first_name = 'Carole' AND Customers.last_name = 'Bernhard';
SELECT COUNT(*)  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payments);
SELECT COUNT(*)  FROM Customers  WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payments);
SELECT C.first_name, C.last_name  FROM Customers C JOIN Customer_Payments CP ON C.customer_id = CP.customer_id GROUP BY C.customer_id, C.first_name, C.last_name HAVING COUNT(CP.payment_method_code) > 2;
SELECT first_name, last_name  FROM Customers  WHERE customer_id IN (     SELECT customer_id      FROM Customer_Payments      GROUP BY customer_id      HAVING COUNT(*) > 2 );
SELECT payment_method_code, COUNT(*) as number_of_payments FROM Customer_Payments GROUP BY payment_method_code;
SELECT payment_method_code, COUNT(*)  FROM Customer_Payments  GROUP BY payment_method_code;
SELECT COUNT(*)  FROM Lessons  WHERE lesson_status_code = 'cancelled';
SELECT COUNT(*)  FROM Lessons  WHERE lesson_status_code = 'Cancelled';
SELECT l.lesson_id  FROM Lessons l  JOIN Staff s ON l.staff_id = s.staff_id  WHERE s.first_name = 'Janessa' AND s.last_name = 'Sawayn' AND s.nickname LIKE '%s%';
SELECT L.lesson_id  FROM Lessons L JOIN Staff S ON L.staff_id = S.staff_id  WHERE S.nickname LIKE '%s%' AND S.first_name = 'Janessa' AND S.last_name = 'Sawayn';
SELECT COUNT(*)  FROM Lessons  JOIN Staff ON Lessons.staff_id = Staff.staff_id  WHERE Staff.first_name LIKE '%a%';
SELECT COUNT(*)  FROM Lessons  JOIN Staff ON Lessons.staff_id = Staff.staff_id  WHERE Staff.first_name LIKE '%a%';
SELECT SUM(T2.lesson_time)  FROM Staff AS T1  JOIN Lessons AS T2 ON T1.staff_id = T2.staff_id  WHERE T1.first_name = 'Janessa' AND T1.last_name = 'Sawayn';
SELECT SUM(lesson_time)  FROM Lessons  JOIN Staff ON Lessons.staff_id = Staff.staff_id  WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn';
SELECT AVG(L.price)  FROM Lessons L  JOIN Staff S ON L.staff_id = S.staff_id  WHERE S.first_name = 'Janessa' AND S.last_name = 'Sawayn';
SELECT AVG(L.price)  FROM Lessons L  JOIN Staff S ON L.staff_id = S.staff_id  WHERE S.first_name = 'Janessa' AND S.last_name = 'Sawayn';
SELECT COUNT(*)  FROM Lessons  WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ray');
SELECT COUNT(*)  FROM Lessons  WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'Ray')
Error: 第 6711 个样本有 2 个SQL。
SELECT DISTINCT last_name  FROM Customers  UNION  SELECT DISTINCT last_name  FROM Staff;
SELECT first_name  FROM Staff  WHERE staff_id NOT IN (SELECT staff_id FROM Lessons)
SELECT DISTINCT s.first_name  FROM Staff s LEFT JOIN Lessons l ON s.staff_id = l.staff_id WHERE l.staff_id IS NULL;
SELECT V.vehicle_id, V.vehicle_details FROM Vehicles V JOIN Lessons L ON V.vehicle_id = L.vehicle_id GROUP BY V.vehicle_id, V.vehicle_details ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM Faculty;
SELECT COUNT(*) FROM Faculty;
SELECT DISTINCT Rank FROM Faculty;
SELECT DISTINCT Rank FROM Faculty;
SELECT DISTINCT Building FROM Faculty;
SELECT DISTINCT Building FROM Faculty
SELECT Rank, Fname, Lname FROM Faculty;
SELECT Rank, Fname, Lname FROM Faculty;
SELECT Fname, Lname, Phone  FROM Faculty  WHERE Sex = 'F';
SELECT Fname, Lname, Phone  FROM Faculty  WHERE Sex = 'F';
SELECT FacID FROM Faculty WHERE Sex = 'M';
SELECT FacID FROM Faculty WHERE Sex = 'M';
SELECT COUNT(*) FROM Faculty WHERE Sex = 'F' AND Rank = 'Professor';
SELECT COUNT(*)  FROM Faculty  WHERE Sex = 'F' AND Rank = 'Professor';
SELECT Phone, Room, Building  FROM Faculty  WHERE Fname = 'Jerry' AND Lname = 'Prince';
SELECT Phone, Room, Building  FROM Faculty  WHERE Fname = 'Jerry' AND Lname = 'Prince';
SELECT COUNT(*)  FROM Faculty  WHERE Rank = 'Professor' AND Building = 'NEB';
SELECT COUNT(*)  FROM Faculty  WHERE Rank = 'Professor' AND Building = 'NEB';
SELECT Fname, Lname FROM Faculty WHERE Rank = 'Instructor';
SELECT Fname, Lname FROM Faculty WHERE Rank = 'Instructor';
SELECT Building, COUNT(FacID)  FROM Faculty  GROUP BY Building;
SELECT Building, COUNT(*)  FROM Faculty  GROUP BY Building;
SELECT Building, COUNT(*) AS FacultyCount  FROM Faculty  GROUP BY Building  ORDER BY FacultyCount DESC  LIMIT 1;
SELECT Building  FROM Faculty  GROUP BY Building  ORDER BY COUNT(FacID) DESC  LIMIT 1;
SELECT Building  FROM Faculty  GROUP BY Building  HAVING COUNT(Building) >= 10;
SELECT Building  FROM Faculty  GROUP BY Building  HAVING COUNT(*) >= 10;
SELECT Rank, COUNT(*)  FROM Faculty  GROUP BY Rank;
SELECT Rank, COUNT(*)  FROM Faculty  GROUP BY Rank;
Error: 第 6744 个样本有 2 个SQL。
SELECT Rank, Sex, COUNT(*)  FROM Faculty  GROUP BY Rank, Sex;
SELECT Rank  FROM Faculty  GROUP BY Rank  ORDER BY COUNT(*)  LIMIT 1;
SELECT Rank  FROM Faculty  GROUP BY Rank  ORDER BY COUNT(FacID)  LIMIT 1;
SELECT Sex, COUNT(*) AS Count  FROM Faculty  WHERE Rank = 'Assistant Professor'  GROUP BY Sex;
SELECT Sex, COUNT(*) AS Count  FROM Faculty  WHERE Rank = 'Assistant Professor'  GROUP BY Sex;
SELECT T1.Fname, T1.Lname  FROM Faculty AS T1  JOIN Student AS T2 ON T1.FacID = T2.Advisor  WHERE T2.Fname = 'Linda' AND T2.Lname = 'Smith';
Error: 第 6751 个样本有 2 个SQL。
SELECT s.StuID  FROM Student s JOIN Faculty f ON s.Advisor = f.FacID WHERE f.Rank = 'Professor';
SELECT S.StuID  FROM Student S JOIN Faculty F ON S.Advisor = F.FacID;
SELECT S.Fname, S.LName FROM Student S JOIN Faculty F ON S.Advisor = F.FacID WHERE F.Fname = 'Michael' AND F.Lname = 'Goodrich';
SELECT S.Fname, S.LName FROM Student S JOIN Faculty F ON S.Advisor = F.FacID WHERE F.Fname = 'Michael' AND F.Lname = 'Goodrich';
SELECT Faculty.FacID, COUNT(Student.StuID) as NumberOfStudentsAdvised FROM Faculty LEFT JOIN Student ON Faculty.FacID = Student.Advisor GROUP BY Faculty.FacID;
SELECT f.FacID, COUNT(s.StuID) AS NumberOfStudents FROM Faculty f LEFT JOIN Student s ON f.FacID = s.Advisor GROUP BY f.FacID;
SELECT Faculty.Rank, COUNT(Student.StuID) AS NumberOfStudentsAdvised FROM Faculty JOIN Student ON Faculty.FacID = Student.Advisor GROUP BY Faculty.Rank;
SELECT f.Rank, COUNT(s.StuID) AS NumberOfStudents FROM Faculty f JOIN Student s ON f.FacID = s.Advisor GROUP BY f.Rank;
SELECT Fname, Lname  FROM Faculty  WHERE FacID = (     SELECT Advisor      FROM Student      GROUP BY Advisor      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT f.Fname, f.Lname FROM Faculty f JOIN Student s ON f.FacID = s.Advisor GROUP BY f.FacID, f.Fname, f.Lname ORDER BY COUNT(s.StuID) DESC LIMIT 1;
SELECT FacID  FROM Faculty  WHERE FacID IN (     SELECT Advisor      FROM Student      GROUP BY Advisor      HAVING COUNT(*) >= 2 );
Error: 第 6763 个样本有 2 个SQL。
SELECT FacID FROM Faculty WHERE FacID NOT IN (SELECT Advisor FROM Student)
SELECT FacID  FROM Faculty  WHERE FacID NOT IN (SELECT Advisor FROM Student)
SELECT activity_name FROM Activity;
SELECT activity_name FROM activity_1.Activity;
SELECT COUNT(*) FROM Activity;
SELECT COUNT(*) FROM Activity
SELECT COUNT(*)  FROM Faculty_Participates_in
SELECT COUNT(*)  FROM Faculty_Participates_in
SELECT FacID  FROM Faculty  WHERE FacID NOT IN (SELECT FacID FROM Faculty_Participates_in)
SELECT FacID FROM Faculty WHERE FacID NOT IN (SELECT FacID FROM Faculty_Participates_in)
SELECT DISTINCT F.FacID  FROM Faculty AS F JOIN Faculty_Participates_in AS FP ON F.FacID = FP.FacID JOIN Student AS S ON F.FacID = S.Advisor
SELECT FacID  FROM Faculty_Participates_in  WHERE FacID IN (SELECT Advisor FROM Student);
SELECT COUNT(*)  FROM Participates_in  JOIN Activity ON Participates_in.actid = Activity.actid  JOIN Student ON Participates_in.stuid = Student.StuID  WHERE Student.Fname = 'Mark' AND Student.LName = 'Giuliano';
Error: 第 6777 个样本有 2 个SQL。
SELECT Activity.activity_name  FROM Activity  JOIN Participates_in ON Activity.actid = Participates_in.actid  JOIN Student ON Participates_in.stuid = Student.StuID  WHERE Student.Fname = 'Mark' AND Student.LName = 'Giuliano';
Error: 第 6779 个样本有 2 个SQL。
SELECT f.Fname, f.Lname, COUNT(fac_act.actid) AS num_activities FROM Faculty f JOIN Faculty_Participates_in fac_act ON f.FacID = fac_act.FacID GROUP BY f.FacID, f.Fname, f.Lname
SELECT f.Fname, f.Lname, COUNT(fac_act.actid) AS num_activities FROM Faculty f JOIN Faculty_Participates_in fac_act ON f.FacID = fac_act.FacID GROUP BY f.FacID, f.Fname, f.Lname HAVING COUNT(fac_act.actid) >= 1;
SELECT Activity.activity_name, COUNT(Faculty_Participates_in.FacID) AS Faculty_Count  FROM Activity  LEFT JOIN Faculty_Participates_in ON Activity.actid = Faculty_Participates_in.actid  GROUP BY Activity.activity_name;
SELECT A.activity_name, COUNT(FP.FacID)  FROM Activity A  JOIN Faculty_Participates_in FP ON A.actid = FP.actid  GROUP BY A.activity_name;
SELECT Fname, Lname  FROM Faculty  WHERE FacID IN (     SELECT FacID      FROM (         SELECT FacID, COUNT(actid) as activity_count          FROM Faculty_Participates_in          GROUP BY FacID          ORDER BY activity_count DESC          LIMIT 1     ) AS subquery )
SELECT Fname, Lname  FROM Faculty  WHERE FacID = (     SELECT FacID      FROM Faculty_Participates_in      GROUP BY FacID      ORDER BY COUNT(actid) DESC      LIMIT 1 )
SELECT A.activity_name  FROM Activity A JOIN Faculty_Participates_in FPI ON A.actid = FPI.actid GROUP BY A.actid ORDER BY COUNT(FPI.FacID) DESC LIMIT 1;
SELECT A.activity_name  FROM Activity A JOIN Faculty_Participates_in FPI ON A.actid = FPI.actid GROUP BY A.actid, A.activity_name ORDER BY COUNT(FPI.FacID) DESC LIMIT 1;
SELECT StuID  FROM Student  WHERE StuID NOT IN (SELECT stuid FROM Participates_in)
SELECT StuID FROM Student  WHERE StuID NOT IN (SELECT stuid FROM Participates_in)
SELECT S.StuID  FROM Student S  JOIN Participates_in P ON S.StuID = P.StuID  WHERE S.Age < 20;
SELECT s.StuID  FROM Student s  JOIN Participates_in p ON s.StuID = p.StuID  WHERE s.Age < 20  GROUP BY s.StuID  HAVING COUNT(p.actid) >= 1;
SELECT S.Fname, S.LName FROM Student S JOIN Participates_in P ON S.StuID = P.StuID GROUP BY P.StuID, S.Fname, S.LName ORDER BY COUNT(P.actid) DESC LIMIT 1;
SELECT S.Fname, S.LName FROM Student S JOIN Participates_in P ON S.StuID = P.StuID GROUP BY P.StuID, S.Fname, S.LName ORDER BY COUNT(P.actid) DESC LIMIT 1;
SELECT A.activity_name  FROM Activity A JOIN Participates_in P ON A.actid = P.actid GROUP BY A.activity_name ORDER BY COUNT(P.stuid) DESC LIMIT 1;
SELECT A.activity_name  FROM Activity A JOIN Participates_in P ON A.actid = P.actid GROUP BY A.activity_name ORDER BY COUNT(P.stuid) DESC LIMIT 1;
SELECT DISTINCT Fname  FROM Faculty  WHERE FacID IN (     SELECT FacID      FROM Faculty_Participates_in      WHERE actid IN (         SELECT actid          FROM Activity          WHERE activity_name IN ('Canoeing', 'Kayaking')     ) );
SELECT DISTINCT Faculty.Fname  FROM Faculty  JOIN Faculty_Participates_in ON Faculty.FacID = Faculty_Participates_in.FacID  JOIN Activity ON Activity.actid = Faculty_Participates_in.actid  WHERE Activity.activity_name IN ('Canoeing', 'Kayaking');
SELECT Fname  FROM Faculty  WHERE FacID NOT IN (     SELECT FacID      FROM Faculty_Participates_in      JOIN Activity ON Faculty_Participates_in.actid = Activity.actid      WHERE activity_name = 'Canoeing' OR activity_name = 'Kayaking' );
SELECT DISTINCT Fname  FROM Faculty  WHERE FacID NOT IN (     SELECT FacID      FROM Faculty_Participates_in      JOIN Activity ON Faculty_Participates_in.actid = Activity.actid      WHERE activity_name = 'Canoeing' OR activity_name = 'Kayaking' )
SELECT T3.Fname  FROM Activity AS T1  JOIN Faculty_Participates_in AS T2 ON T1.actid = T2.actid  JOIN Faculty AS T3 ON T2.FacID = T3.FacID  WHERE T1.activity_name IN ('Canoeing', 'Kayaking')
SELECT T1.Fname  FROM Faculty AS T1  JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID  JOIN Activity AS T3 ON T2.actid = T3.actid  WHERE T3.activity_name IN ('Canoeing', 'Kayaking')  GROUP BY T1.Fname  HAVING COUNT(DISTINCT T3.activity_name) = 2;
SELECT s.StuID  FROM Student s  JOIN Participates_in p ON s.StuID = p.StuID  JOIN Activity a ON p.actid = a.actid  WHERE a.activity_name IN ('Canoeing', 'Kayaking') GROUP BY s.StuID  HAVING COUNT(DISTINCT a.activity_name) = 2;
SELECT stuid  FROM Participates_in  WHERE actid IN (     SELECT actid      FROM Activity      WHERE activity_name IN ('Canoeing', 'Kayaking') ) GROUP BY stuid  HAVING COUNT(DISTINCT activity_name) = 2;
SELECT name FROM airports WHERE city = 'Goroka';
SELECT name FROM airports WHERE city = 'Goroka';
SELECT name, city, country, elevation  FROM airports  WHERE city = 'New York';
SELECT name, city, country, elevation  FROM airports  WHERE city = 'New York';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines WHERE country = 'Russia';
SELECT COUNT(*) FROM airlines WHERE country = 'Russia';
SELECT MAX(elevation) FROM airports WHERE country = 'Iceland'
SELECT MAX(elevation) FROM airports WHERE country = 'Iceland';
SELECT name FROM airports WHERE country = 'Cuba' OR country = 'Argentina';
SELECT name FROM airports WHERE country = 'Cuba' OR country = 'Argentina';
SELECT T2.country FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name LIKE 'Orbit%';
SELECT T2.country FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name LIKE 'Orbit%';
SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50;
SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50;
SELECT T1.country FROM airports AS T1 WHERE T1.elevation = (SELECT MAX(elevation) FROM airports)
SELECT T1.country FROM airports AS T1 WHERE T1.elevation = (SELECT MAX(elevation) FROM airports)
SELECT COUNT(*)  FROM airports  WHERE name LIKE '%International%';
SELECT COUNT(*)  FROM airports  WHERE name LIKE '%Interanation%';
SELECT COUNT(DISTINCT T1.city)  FROM airports AS T1  WHERE T1.country = 'Greenland';
SELECT COUNT(DISTINCT city)  FROM airports  WHERE country = 'Greenland';
SELECT COUNT(*) FROM routes WHERE airline = 'American Airlines';
SELECT COUNT(*)  FROM routes  WHERE alid = (SELECT alid FROM airlines WHERE name = 'American Airlines');
SELECT COUNT(*)  FROM routes  JOIN airports ON routes.dst_apid = airports.apid  WHERE airports.country = 'Canada';
SELECT COUNT(*)  FROM routes  JOIN airports ON routes.dst_apid = airports.apid  WHERE airports.country = 'Canada';
SELECT name, city, country  FROM airports  ORDER BY elevation  LIMIT 1;
SELECT name, city, country  FROM airports  WHERE elevation = (SELECT MIN(elevation) FROM airports);
SELECT name, city, country  FROM airports  WHERE y = (SELECT MAX(y) FROM airports);
SELECT name, city, country  FROM airports  ORDER BY elevation DESC  LIMIT 1;
SELECT T1.name, T1.city  FROM airports AS T1  JOIN routes AS T2  ON T1.apid = T2.dst_apid  GROUP BY T1.apid  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T1.name, T1.city FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY T1.apid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.name, COUNT(*) AS route_count  FROM flight_4.routes AS T1  JOIN flight_4.airlines AS T2 ON T1.alid = T2.alid  GROUP BY T1.alid  ORDER BY route_count DESC  LIMIT 10;
SELECT T2.name FROM ( SELECT alid, COUNT(*) AS route_count FROM flight_4.routes  GROUP BY alid  ORDER BY route_count DESC  LIMIT 10) AS T1  JOIN flight_4.airlines AS T2 ON T1.alid = T2.alid;
SELECT T1.name, T1.city  FROM airports AS T1  JOIN routes AS T2  ON T1.apid = T2.src_apid  GROUP BY T1.apid  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T1.name, T1.city FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT T2.apid) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T3.name = 'American Airlines'
SELECT COUNT(DISTINCT r.dst_apid)  FROM routes r  JOIN airlines a ON r.alid = a.alid  WHERE a.name = 'American Airlines';
SELECT country, COUNT(*) AS num_airlines FROM airlines GROUP BY country ORDER BY num_airlines DESC LIMIT 1;
Error: 第 6843 个样本有 2 个SQL。
SELECT T1.country, COUNT(*) AS num_airlines  FROM airlines AS T1  WHERE T1.active = 'Y'  GROUP BY T1.country  ORDER BY num_airlines DESC  LIMIT 1;
SELECT T1.country, COUNT(*) AS num_airlines  FROM airlines AS T1  WHERE T1.active = 'Y'  GROUP BY T1.country  ORDER BY num_airlines DESC;
SELECT T.country, COUNT(*) AS num_airlines FROM airlines AS T GROUP BY T.country ORDER BY num_airlines DESC;
SELECT a.country, COUNT(*) as num_airlines FROM airlines a GROUP BY a.country ORDER BY num_airlines DESC;
SELECT country, COUNT(*) AS num_airports  FROM airports  GROUP BY country  ORDER BY num_airports DESC;
SELECT country, COUNT(*) AS num_airports FROM airports GROUP BY country ORDER BY num_airports DESC;
SELECT city, COUNT(*) as num_airports  FROM airports  WHERE country = 'United States'  GROUP BY city  ORDER BY num_airports DESC;
SELECT city, COUNT(*) as num_airports FROM airports WHERE country = 'United States' GROUP BY city ORDER BY num_airports DESC;
SELECT city  FROM airports  WHERE country = 'United States'  GROUP BY city  HAVING COUNT(*) > 3;
SELECT COUNT(*)  FROM (   SELECT city   FROM airports   WHERE country = 'United States'   GROUP BY city   HAVING COUNT(apid) > 3 ) AS result;
SELECT COUNT(*)  FROM (   SELECT city    FROM airports    GROUP BY city    HAVING COUNT(apid) > 3 ) AS result;
SELECT COUNT(*)  FROM (   SELECT city    FROM airports    GROUP BY city    HAVING COUNT(apid) > 3 ) AS result;
SELECT city, COUNT(apid) AS num_airports FROM airports GROUP BY city HAVING COUNT(apid) > 1;
SELECT T1.city, COUNT(T1.apid) AS count  FROM airports AS T1  GROUP BY T1.city  HAVING COUNT(T1.apid) > 1;
SELECT city, COUNT(*) as airport_count FROM airports GROUP BY city HAVING COUNT(*) > 2 ORDER BY airport_count DESC;
SELECT city, COUNT(*) as num_airports FROM airports GROUP BY city HAVING num_airports > 2 ORDER BY num_airports DESC;
SELECT COUNT(r.rid) AS num_routes, a.name AS airport_name  FROM routes r  JOIN airports a ON r.src_apid = a.apid  GROUP BY r.src_apid, a.name;
SELECT airports.name, COUNT(routes.rid)  FROM routes  JOIN airports ON routes.src_apid = airports.apid  GROUP BY airports.name;
SELECT COUNT(r.rid) AS num_routes, a.name AS airport_name  FROM routes r  JOIN airports a ON r.src_apid = a.apid  GROUP BY r.src_apid, a.name  ORDER BY num_routes DESC;
SELECT a.name, COUNT(r.rid) AS num_routes FROM airports a JOIN routes r ON a.apid = r.src_apid GROUP BY a.name ORDER BY num_routes DESC;
SELECT AVG(elevation) as avg_elevation, country  FROM airports  GROUP BY country;
SELECT AVG(elevation), country  FROM airports  GROUP BY country;
SELECT city  FROM airports  GROUP BY city  HAVING COUNT(*) = 2;
SELECT city  FROM airports  GROUP BY city  HAVING COUNT(*) = 2;
SELECT airlines.country, airlines.name, COUNT(routes.rid) AS num_routes FROM routes JOIN airlines ON routes.alid = airlines.alid GROUP BY airlines.country, airlines.name;
SELECT COUNT(r.rid) AS total_routes, a.country, al.name  FROM routes r  JOIN airlines al ON r.alid = al.alid  JOIN airports a ON r.src_apid = a.apid OR r.dst_apid = a.apid  GROUP BY a.country, al.name;
SELECT COUNT(*)  FROM routes  WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'Italy');
SELECT COUNT(*)  FROM routes  WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'Italy');
SELECT COUNT(*)  FROM routes  JOIN airports ON routes.dst_apid = airports.apid  JOIN airlines ON routes.alid = airlines.alid  WHERE airports.country = 'Italy' AND airlines.name = 'American Airlines';
SELECT COUNT(*)  FROM routes  JOIN airlines ON routes.alid = airlines.alid  JOIN airports ON routes.dst_apid = airports.apid  WHERE airlines.name = 'American Airlines' AND airports.country = 'Italy';
Error: 第 6874 个样本有 2 个SQL。
SELECT COUNT(*) FROM routes WHERE dst_apid = (SELECT apid FROM airports WHERE name = 'John F Kennedy International Airport')
SELECT COUNT(*)  FROM routes  JOIN airports AS src ON routes.src_apid = src.apid  JOIN airports AS dst ON routes.dst_apid = dst.apid  WHERE src.country = 'United States' AND dst.country = 'Canada';
SELECT COUNT(*)  FROM routes  JOIN airports AS src ON routes.src_apid = src.apid  JOIN airports AS dst ON routes.dst_apid = dst.apid  WHERE src.country = 'United States' AND dst.country = 'Canada';
SELECT rid FROM routes WHERE src_apid IN (SELECT apid FROM airports WHERE country = 'United States') AND dst_apid IN (SELECT apid FROM airports WHERE country = 'United States');
SELECT rid FROM routes WHERE src_apid IN (SELECT apid FROM airports WHERE country = 'United States') AND dst_apid IN (SELECT apid FROM airports WHERE country = 'United States');
SELECT T2.name FROM routes AS T1 JOIN airlines AS T2 ON T1.alid = T2.alid GROUP BY T1.alid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.name FROM routes AS T1 JOIN airlines AS T2 ON T1.alid = T2.alid GROUP BY T1.alid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.name AS airport_name, COUNT(T2.rid) AS route_count FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE T1.country = 'China' GROUP BY T2.src_apid ORDER BY route_count DESC LIMIT 1;
SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT a.name  FROM airports a JOIN (     SELECT dst_apid, COUNT(*) as route_count     FROM routes      WHERE dst_apid IN (         SELECT apid          FROM airports          WHERE country = 'China'     )     GROUP BY dst_apid     ORDER BY route_count DESC     LIMIT 1 ) r ON a.apid = r.dst_apid;
SELECT T1.name  FROM airports AS T1  JOIN routes AS T2 ON T1.apid = T2.dst_apid  WHERE T2.src_apid IN (SELECT apid FROM airports WHERE country = 'China')  GROUP BY T1.name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT order_id FROM Orders ORDER BY date_order_placed DESC LIMIT 1;
SELECT order_id FROM Orders ORDER BY date_order_placed DESC LIMIT 1;
SELECT order_id, customer_id  FROM Orders  WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM Orders);
SELECT order_id, customer_id  FROM Orders  ORDER BY date_order_placed  LIMIT 1;
SELECT order_id FROM Shipments WHERE shipment_tracking_number = '3452';
SELECT order_id FROM Shipments WHERE shipment_tracking_number = '3452';
SELECT order_item_id FROM Order_Items WHERE product_id = 11;
SELECT order_item_id  FROM Order_Items  WHERE product_id = 11;
SELECT DISTINCT c.customer_name  FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_status = 'Packing';
SELECT DISTINCT c.customer_name  FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_status = 'Packing';
SELECT DISTINCT c.customer_details  FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_status = 'On Road';
SELECT DISTINCT c.customer_details FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_status = 'On Road';
SELECT C.customer_name  FROM Customers C  JOIN Orders O ON C.customer_id = O.customer_id  GROUP BY C.customer_name  ORDER BY COUNT(O.order_id) DESC  LIMIT 1;
SELECT c.customer_name  FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id  GROUP BY c.customer_name ORDER BY COUNT(o.order_id) DESC  LIMIT 1;
SELECT Customers.customer_id  FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.customer_id ORDER BY COUNT(Orders.order_id) DESC LIMIT 1;
SELECT c.customer_id  FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY COUNT(o.order_id) DESC LIMIT 1;
SELECT Orders.order_id, Orders.order_status  FROM Orders  JOIN Customers ON Orders.customer_id = Customers.customer_id  WHERE Customers.customer_name = 'Jeramie';
SELECT Orders.order_id, Orders.order_status  FROM Orders  JOIN Customers ON Orders.customer_id = Customers.customer_id  WHERE Customers.customer_name = 'Jeramie';
SELECT Orders.date_order_placed  FROM Orders  JOIN Customers ON Orders.customer_id = Customers.customer_id  WHERE Customers.customer_name = 'Jeramie';
SELECT Orders.date_order_placed  FROM Orders  JOIN Customers ON Orders.customer_id = Customers.customer_id  WHERE Customers.customer_name = 'Jeramie';
SELECT DISTINCT c.customer_name  FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.date_order_placed BETWEEN '2009-01-01' AND '2010-01-01';
SELECT DISTINCT c.customer_name  FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.date_order_placed BETWEEN '2009-01-01' AND '2010-01-01';
SELECT DISTINCT oi.product_id  FROM Order_Items oi  JOIN Orders o ON oi.order_id = o.order_id  WHERE o.date_order_placed BETWEEN '1975-01-01' AND '1976-01-01';
SELECT DISTINCT oi.product_id  FROM Order_Items oi  JOIN Orders o ON oi.order_id = o.order_id  WHERE o.date_order_placed BETWEEN '1975-01-01' AND '1976-01-01';
SELECT c.customer_name  FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id  WHERE o.order_status IN ('On Road', 'Shipped') GROUP BY c.customer_name HAVING COUNT(DISTINCT o.order_status) = 2
SELECT c.customer_name  FROM Customers c JOIN Orders o1 ON c.customer_id = o1.customer_id JOIN Orders o2 ON c.customer_id = o2.customer_id WHERE o1.order_status = 'On Road'  AND o2.order_status = 'Shipped' GROUP BY c.customer_name HAVING COUNT(DISTINCT o1.order_status) > 0  AND COUNT(DISTINCT o2.order_status) > 0;
SELECT c.customer_id  FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id  WHERE o.order_status = 'On Road' INTERSECT SELECT c.customer_id  FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id  WHERE o.order_status = 'Shipped';
SELECT c.customer_id  FROM Customers c JOIN Orders o1 ON c.customer_id = o1.customer_id JOIN Orders o2 ON c.customer_id = o2.customer_id WHERE o1.order_status = 'On Road'  AND o2.order_status = 'Shipped' GROUP BY c.customer_id HAVING COUNT(DISTINCT o1.order_status) = 1  AND COUNT(DISTINCT o2.order_status) = 1;
SELECT date_order_placed  FROM Orders  JOIN Shipments ON Orders.order_id = Shipments.order_id  WHERE shipment_tracking_number = 3452;
SELECT date_order_placed  FROM Orders  JOIN Shipments ON Orders.order_id = Shipments.order_id  WHERE shipment_tracking_number = 3452;
SELECT date_order_placed  FROM Orders  WHERE order_id = (SELECT order_id FROM Invoices WHERE invoice_number = 10);
SELECT date_order_placed  FROM Orders  WHERE order_id = (SELECT order_id FROM Invoices WHERE invoice_number = 10);
SELECT COUNT(*) AS product_count, product_id  FROM Order_Items  GROUP BY product_id;
SELECT p.product_id, COUNT(oi.order_item_id) AS num_ordered FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id;
SELECT p.product_name, COUNT(oi.order_item_id) AS product_count FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_name;
SELECT p.product_name, COUNT(oi.order_item_id) AS number_of_times_ordered FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_name;
SELECT DISTINCT o.order_id FROM Orders o JOIN Shipments s ON o.order_id = s.order_id WHERE s.shipment_date > '2000-01-01';
SELECT DISTINCT o.order_id FROM Orders o JOIN Shipments s ON o.order_id = s.order_id WHERE s.shipment_date > '2000-01-01';
SELECT order_id  FROM Shipments  WHERE shipment_date = (SELECT MAX(shipment_date) FROM Shipments);
SELECT o.order_id FROM Orders o JOIN Shipments s ON o.order_id = s.order_id WHERE s.shipment_date = (SELECT MAX(shipment_date) FROM Shipments)
SELECT DISTINCT product_name  FROM Products  ORDER BY product_name ASC;
SELECT DISTINCT product_name  FROM Products  ORDER BY product_name ASC;
SELECT DISTINCT order_id FROM Orders ORDER BY date_order_placed;
SELECT DISTINCT order_id  FROM Orders  ORDER BY date_order_placed;
SELECT order_id, COUNT(order_item_id) as item_count  FROM Order_Items  GROUP BY order_id  ORDER BY item_count DESC  LIMIT 1;
SELECT order_id, COUNT(order_item_id) as item_count  FROM Order_Items  GROUP BY order_id  ORDER BY item_count DESC  LIMIT 1;
SELECT C.customer_name  FROM Customers C  JOIN Orders O ON C.customer_id = O.customer_id  GROUP BY C.customer_name  ORDER BY COUNT(O.order_id) DESC  LIMIT 1;
SELECT C.customer_name, COUNT(O.order_id) as order_count FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_name ORDER BY order_count DESC LIMIT 1;
SELECT invoice_number  FROM Invoices  WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25';
SELECT invoice_number  FROM Invoices  WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25';
SELECT DISTINCT invoice_details  FROM Invoices  WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25';
SELECT DISTINCT invoice_details  FROM Invoices  WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25';
SELECT c.customer_name, COUNT(o.order_id) as num_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name HAVING COUNT(o.order_id) >= 2;
SELECT c.customer_name, COUNT(o.order_id) as num_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name HAVING COUNT(o.order_id) >= 2;
SELECT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name HAVING COUNT(o.order_id) <= 2;
SELECT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name HAVING COUNT(o.order_id) <= 2;
SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'food';
SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'food'
SELECT DISTINCT c.customer_name  FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE oi.order_item_status = 'Cancel' AND p.product_name = 'food';
SELECT DISTINCT c.customer_name  FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE oi.order_item_status = 'Cancel' AND p.product_name = 'food';
SELECT COUNT(*) FROM architect WHERE gender = 'female';
SELECT name, nationality, id  FROM architect  WHERE gender = 'male'  ORDER BY name;
SELECT MAX(b.length_meters), a.name  FROM architect a  JOIN bridge b ON a.id = b.architect_id  GROUP BY a.name;
SELECT AVG(length_feet) FROM bridge;
SELECT name, built_year  FROM mill  WHERE type = 'Grondzeiler';
SELECT DISTINCT a.name, a.nationality  FROM architect a JOIN mill m ON a.id = m.architect_id;
SELECT name FROM mill WHERE location != 'Donceel';
SELECT DISTINCT m.type  FROM mill m  JOIN architect a ON m.architect_id = a.id  WHERE a.nationality IN ('American', 'Canadian');
SELECT a.id, a.name  FROM architect a JOIN bridge b ON a.id = b.architect_id GROUP BY a.id, a.name HAVING COUNT(b.id) >= 3;
SELECT a.id, a.name, a.nationality FROM architect a JOIN mill m ON a.id = m.architect_id GROUP BY a.id, a.name, a.nationality ORDER BY COUNT(m.id) DESC LIMIT 1;
SELECT a.id, a.name, a.gender FROM architect a WHERE (   SELECT COUNT(*)    FROM bridge b    WHERE b.architect_id = a.id ) >= 2 OR (   SELECT COUNT(*)    FROM mill m    WHERE m.architect_id = a.id ) = 1;
SELECT location FROM bridge WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge';
SELECT name FROM mill WHERE name LIKE '%Moulin%';
SELECT DISTINCT m.name  FROM mill m JOIN architect a ON m.architect_id = a.id JOIN bridge b ON b.architect_id = a.id WHERE b.length_meters > 80;
SELECT type, COUNT(*) AS count  FROM mill  GROUP BY type  ORDER BY count DESC  LIMIT 1;
SELECT COUNT(*)  FROM architect  WHERE id NOT IN (     SELECT architect_id      FROM mill      WHERE built_year < 1850 );
SELECT bridge.name  FROM bridge  JOIN architect ON bridge.architect_id = architect.id  WHERE architect.nationality = 'American'  ORDER BY bridge.length_feet;
SELECT COUNT(*) FROM book_club;
SELECT COUNT(*) FROM book_club;
SELECT Book_Title, Author_or_Editor FROM book_club WHERE Year > 1989;
SELECT Book_Title, Author_or_Editor FROM book_club WHERE Year > 1989;
SELECT DISTINCT Publisher FROM book_club;
SELECT DISTINCT Publisher FROM book_club;
SELECT Year, Book_Title, Publisher  FROM book_club  ORDER BY Year DESC;
SELECT Year, Book_Title, Publisher FROM book_club ORDER BY Year DESC;
SELECT Publisher, COUNT(*)  FROM book_club  GROUP BY Publisher;
SELECT Publisher, COUNT(*)  FROM book_club  GROUP BY Publisher;
SELECT Publisher  FROM book_club  GROUP BY Publisher  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Publisher  FROM book_club  GROUP BY Publisher  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Category, COUNT(*) AS NumberOfBooks FROM book_club GROUP BY Category;
SELECT Category, COUNT(*)  FROM book_club  GROUP BY Category;
SELECT Category  FROM book_club  WHERE Year > 1989  GROUP BY Category  HAVING COUNT(*) >= 2;
SELECT Category  FROM book_club  WHERE Year > 1989  GROUP BY Category  HAVING COUNT(*) >= 2;
SELECT Publisher  FROM book_club  WHERE Year = 1989  INTERSECT  SELECT Publisher  FROM book_club  WHERE Year = 1990;
SELECT Publisher  FROM book_club  WHERE Year = 1989  INTERSECT  SELECT Publisher  FROM book_club  WHERE Year = 1990
Error: 第 6981 个样本有 2 个SQL。
Error: 第 6982 个样本有 2 个SQL。
SELECT Title, Year, Director  FROM movie  ORDER BY Budget_million;
SELECT Title, Year, Director  FROM movie  ORDER BY Budget_million;
SELECT COUNT(DISTINCT Director) FROM movie;
SELECT COUNT(DISTINCT Director) FROM movie;
SELECT Title, Director  FROM movie  WHERE Year <= 2000  ORDER BY Gross_worldwide DESC  LIMIT 1;
SELECT T1.Title, T1.Director  FROM movie AS T1  WHERE T1.Year <= 2000  ORDER BY T1.Gross_worldwide DESC  LIMIT 1;
SELECT Director  FROM movie  WHERE Year = 1999  INTERSECT  SELECT Director  FROM movie  WHERE Year = 2000;
SELECT Director  FROM movie  WHERE Year = 1999  INTERSECT  SELECT Director  FROM movie  WHERE Year = 2000;
SELECT Director FROM movie WHERE Year = 1999 OR Year = 2000;
SELECT DISTINCT Director  FROM movie  WHERE Year IN (1999, 2000)
SELECT AVG(Budget_million), MAX(Budget_million), MIN(Budget_million)  FROM movie  WHERE Year < 2000;
SELECT AVG(Budget_million) AS Average_Budget, MAX(Budget_million) AS Maximum_Budget, MIN(Budget_million) AS Minimum_Budget  FROM movie  WHERE Year < 2000;
SELECT DISTINCT c.Company_name  FROM culture_company c JOIN book_club b ON c.book_club_id = b.book_club_id  WHERE b.Publisher = 'Alyson';
SELECT DISTINCT c.Company_name  FROM culture_company c JOIN book_club b ON c.book_club_id = b.book_club_id  WHERE b.Publisher = 'Alyson';
SELECT T2.Title AS Movie_Title, T1.Book_Title  FROM book_club AS T1  JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id  JOIN movie AS T2 ON T2.movie_id = T3.movie_id  WHERE T3.Incorporated_in = 'China'
SELECT T2.Title AS Movie_Title, T3.Book_Title AS Book_Title  FROM culture_company AS T1  JOIN movie AS T2 ON T1.movie_id = T2.movie_id  JOIN book_club AS T3 ON T1.book_club_id = T3.book_club_id  WHERE T1.Incorporated_in = 'China'
SELECT Company_name  FROM culture_company  JOIN movie ON culture_company.movie_id = movie.movie_id  WHERE movie.Year = 1999;
SELECT DISTINCT c.Company_name  FROM culture_company c JOIN movie m ON c.movie_id = m.movie_id WHERE m.Year = 1999;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name, Country, Age  FROM singer  ORDER BY Age DESC;
SELECT Name, Country, Age  FROM singer  ORDER BY Age DESC;
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Min_Age, MAX(Age) AS Max_Age  FROM singer  WHERE Country = 'France';
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Min_Age, MAX(Age) AS Max_Age  FROM singer  WHERE Country = 'France';
SELECT s.Name, s.Song_Name, s.Song_release_year  FROM singer s  WHERE s.Age = (SELECT MIN(Age) FROM singer);
SELECT T1.Name, T1.Song_release_year  FROM singer AS T1  WHERE T1.Age = (SELECT MIN(Age) FROM singer);
SELECT DISTINCT Country  FROM singer  WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT Country, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Country;
SELECT Country, COUNT(*)  FROM singer  GROUP BY Country;
SELECT T1.Song_Name  FROM singer AS T1  JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  WHERE T1.Age > (SELECT AVG(Age) FROM singer)
SELECT T1.Song_Name  FROM singer AS T1  JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  WHERE T1.Age > (SELECT AVG(Age) FROM singer)
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity) AS Maximum_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium;
SELECT AVG(Capacity), MAX(Capacity) FROM stadium;
SELECT T1.Name, T1.Capacity  FROM stadium AS T1  JOIN (   SELECT Stadium_ID, MAX(Average) AS Max_Avg    FROM stadium ) AS T2  ON T1.Stadium_ID = T2.Stadium_ID;
SELECT T1.Name, T1.Capacity  FROM stadium AS T1  JOIN (     SELECT Stadium_ID, MAX(Average) AS Max_Avg      FROM stadium ) AS T2  ON T1.Stadium_ID = T2.Stadium_ID;
SELECT COUNT(*)  FROM concert  WHERE Year IN (2014, 2015);
SELECT COUNT(*)  FROM concert  WHERE Year IN (2014, 2015);
SELECT s.Name, COUNT(c.concert_ID)  FROM stadium s  JOIN concert c ON s.Stadium_ID = c.Stadium_ID  GROUP BY s.Name;
SELECT Stadium_ID, COUNT(concert_ID) AS Num_Concerts  FROM concert  GROUP BY Stadium_ID;
SELECT s.Name, s.Capacity  FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID  WHERE c.Year >= 2014  GROUP BY s.Stadium_ID  ORDER BY COUNT(c.concert_ID) DESC  LIMIT 1;
SELECT s.Name, s.Capacity  FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID  WHERE c.Year > 2013  GROUP BY s.Stadium_ID  ORDER BY COUNT(c.concert_ID) DESC  LIMIT 1;
SELECT Year, COUNT(*) AS Num_of_Concerts  FROM concert  GROUP BY Year  ORDER BY Num_of_Concerts DESC  LIMIT 1;
SELECT Year, COUNT(*) AS Total_Concerts  FROM concert  GROUP BY Year  ORDER BY Total_Concerts DESC  LIMIT 1;
SELECT Name  FROM stadium  WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);
SELECT Name  FROM stadium  WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
SELECT DISTINCT s1.Country  FROM singer s1, singer s2  WHERE s1.Age > 40 AND s2.Age < 30 AND s1.Country = s2.Country;
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)
SELECT Name  FROM stadium  WHERE Stadium_ID NOT IN (     SELECT Stadium_ID      FROM concert      WHERE Year = 2014 );
SELECT C.concert_Name, C.Theme, COUNT(SIC.Singer_ID) AS NumberOfSingers FROM concert AS C LEFT JOIN singer_in_concert AS SIC ON C.concert_ID = SIC.concert_ID GROUP BY C.concert_ID;
SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS NumberOfSingers FROM concert AS c JOIN singer_in_concert AS sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme;
SELECT s.Name, COUNT(c.concert_ID)  FROM singer s  JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID  JOIN concert c ON sic.concert_ID = c.concert_ID  GROUP BY s.Name;
SELECT s.Name, COUNT(c.concert_ID)  FROM singer s  JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID  JOIN concert c ON sic.concert_ID = c.concert_ID  GROUP BY s.Name;
SELECT s.Name  FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014;
SELECT s.Name  FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014;
SELECT Name, Country  FROM singer  WHERE Song_Name LIKE '%Hey%';
SELECT Name, Country  FROM singer  WHERE Song_Name LIKE '%Hey%';
SELECT T1.Name, T1.Location  FROM stadium AS T1  JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  WHERE T2.Year IN (2014, 2015)  GROUP BY T1.Stadium_ID  HAVING COUNT(DISTINCT T2.Year) >= 2;
SELECT T1.Name, T1.Location  FROM stadium AS T1  JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  WHERE T2.Year = 2014  INTERSECT  SELECT T1.Name, T1.Location  FROM stadium AS T1  JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  WHERE T2.Year = 2015;
SELECT COUNT(*)  FROM concert  WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);
SELECT COUNT(*)  FROM concert  WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);
SELECT COUNT(*)  FROM Pets  WHERE weight > 10;
SELECT COUNT(*)  FROM Pets  WHERE weight > 10;
SELECT P.weight  FROM Pets AS P  JOIN Has_Pet AS HP ON P.PetID = HP.PetID  WHERE P.PetType = 'dog'  ORDER BY P.pet_age  LIMIT 1;
SELECT P.weight  FROM Pets AS P  JOIN Has_Pet AS HP ON P.PetID = HP.PetID  WHERE P.PetType = 'dog'  AND P.pet_age = (     SELECT MIN(pet_age)      FROM Pets      WHERE PetType = 'dog' )
SELECT PetType, MAX(weight)  FROM Pets  GROUP BY PetType;
SELECT PetType, MAX(weight)  FROM Pets  GROUP BY PetType;
SELECT COUNT(*)  FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Student.Age > 20;
SELECT COUNT(*)  FROM Has_Pet  JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Student.Age > 20;
SELECT COUNT(*)  FROM Has_Pet hp  JOIN Student s ON hp.StuID = s.StuID  JOIN Pets p ON hp.PetID = p.PetID  WHERE s.Sex = 'F' AND p.PetType = 'dog';
SELECT COUNT(*)  FROM Student s  JOIN Has_Pet hp ON s.StuID = hp.StuID  JOIN Pets p ON hp.PetID = p.PetID  WHERE s.Sex = 'F' AND p.PetType = 'dog';
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog');
SELECT S.Fname  FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID  JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog');
SELECT S.Fname  FROM Student S WHERE S.StuID IN (     SELECT HP1.StuID      FROM Has_Pet HP1      JOIN Pets P1 ON HP1.PetID = P1.PetID      WHERE P1.PetType = 'cat' ) AND S.StuID IN (     SELECT HP2.StuID      FROM Has_Pet HP2      JOIN Pets P2 ON HP2.PetID = P2.PetID      WHERE P2.PetType = 'dog' )
SELECT s.Fname FROM Student s JOIN Has_Pet hp1 ON s.StuID = hp1.StuID JOIN Pets p1 ON hp1.PetID = p1.PetID JOIN Has_Pet hp2 ON s.StuID = hp2.StuID JOIN Pets p2 ON hp2.PetID = p2.PetID WHERE p1.PetType = 'cat' AND p2.PetType = 'dog' GROUP BY s.Fname;
SELECT Major, Age  FROM Student  WHERE StuID NOT IN (     SELECT StuID      FROM Has_Pet      JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE PetType = 'cat' );
SELECT S.Major, S.Age FROM Student S WHERE S.StuID NOT IN (     SELECT H.StuID     FROM Has_Pet H     INNER JOIN Pets P ON H.PetID = P.PetID     WHERE P.PetType = 'cat' );
SELECT StuID  FROM Student  WHERE StuID NOT IN (     SELECT StuID      FROM Has_Pet      JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE PetType = 'cat' );
SELECT StuID  FROM Student  WHERE StuID NOT IN (     SELECT StuID      FROM Has_Pet      JOIN Pets ON Has_Pet.PetID = Pets.PetID      WHERE PetType = 'cat' )
SELECT S.Fname, S.Age  FROM Student S  JOIN Has_Pet HP ON S.StuID = HP.StuID  JOIN Pets P ON HP.PetID = P.PetID  WHERE P.PetType = 'dog'  AND NOT EXISTS (SELECT 1 FROM Has_Pet HP2 JOIN Pets P2 ON HP2.PetID = P2.PetID WHERE HP2.StuID = S.StuID AND P2.PetType = 'cat');
SELECT S.Fname  FROM Student S  JOIN Has_Pet HP ON S.StuID = HP.StuID  JOIN Pets P ON HP.PetID = P.PetID  WHERE P.PetType = 'dog'  AND NOT EXISTS (SELECT 1 FROM Has_Pet HP2  JOIN Pets P2 ON HP2.PetID = P2.PetID  WHERE HP2.StuID = S.StuID AND P2.PetType = 'cat')
SELECT PetType, weight  FROM Pets  WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetID, weight  FROM Pets  WHERE pet_age > 1;
SELECT PetID, weight  FROM Pets  WHERE pet_age > 1;
SELECT Pets.PetType, AVG(Student.Age) AS Avg_Age, MAX(Student.Age) AS Max_Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Pets.PetType;
SELECT Pets.PetType, AVG(Student.Age) AS Avg_Age, MAX(Student.Age) AS Max_Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Pets.PetType;
SELECT PetType, AVG(weight)  FROM Pets  GROUP BY PetType;
SELECT PetType, AVG(weight)  FROM Pets  GROUP BY PetType;
SELECT S.Fname, S.Age  FROM Student S  JOIN Has_Pet HP ON S.StuID = HP.StuID;
SELECT DISTINCT S.Fname, S.Age  FROM Student S  JOIN Has_Pet HP ON S.StuID = HP.StuID;
SELECT P.PetID FROM Has_Pet HP JOIN Student S ON HP.StuID = S.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE S.LName = 'Smith'
SELECT P.PetID FROM Has_Pet HP JOIN Student S ON HP.StuID = S.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE S.LName = 'Smith'
SELECT StuID, COUNT(PetID) AS NumOfPets  FROM Has_Pet  GROUP BY StuID;
SELECT H.StuID, COUNT(H.PetID) AS NumberOfPets FROM Has_Pet H GROUP BY H.StuID;
SELECT S.Fname, S.Sex  FROM Student S  JOIN Has_Pet HP ON S.StuID = HP.StuID  GROUP BY S.StuID, S.Fname, S.Sex  HAVING COUNT(HP.PetID) > 1;
SELECT S.Fname, S.Sex  FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID GROUP BY S.StuID, S.Fname, S.Sex HAVING COUNT(HP.PetID) > 1;
SELECT S.LName  FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;
SELECT S.LName  FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;
SELECT AVG(Age)  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT AVG(Age)  FROM Student  WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT c.ContId, c.Continent, COUNT(cc.CountryId) AS NumberOfCountries FROM continents c JOIN countries cc ON c.ContId = cc.Continent GROUP BY c.ContId, c.Continent;
SELECT c.ContId, c.Continent, COUNT(cc.CountryId) AS NumberOfCountries FROM continents c JOIN countries cc ON c.ContId = cc.Continent GROUP BY c.ContId, c.Continent;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT      car_makers.FullName,     car_makers.Id,     COUNT(model_list.Model)  FROM      car_makers  JOIN      model_list ON car_makers.Id = model_list.Maker  GROUP BY      car_makers.FullName,     car_makers.Id;
SELECT      car_makers.Id,      car_makers.FullName,     COUNT(model_list.Model) as NumberOfModels FROM      car_makers JOIN      model_list ON car_makers.Id = model_list.Maker GROUP BY      car_makers.Id,      car_makers.FullName
SELECT model_list.Model  FROM model_list  JOIN cars_data ON model_list.ModelId = cars_data.Id  WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT model_list.Model  FROM model_list  JOIN cars_data ON model_list.ModelId = cars_data.Id  WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT model_list.Model  FROM model_list  JOIN cars_data ON model_list.ModelId = cars_data.Id  WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT model_list.Model  FROM cars_data  JOIN model_list ON cars_data.Id = model_list.ModelId  WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT DISTINCT cm.Maker  FROM car_makers cm  JOIN cars_data cd ON cm.Id = cd.Id  WHERE cd.Year = 1970;
SELECT DISTINCT cm.Maker  FROM car_makers cm  JOIN cars_data cd ON cm.Id = cd.Id  WHERE cd.Year = 1970;
SELECT T3.Make, T4.Year  FROM car_makers AS T1  JOIN cars_data AS T4 ON T1.Id = T4.Id  JOIN car_names AS T3 ON T1.Id = T3.MakeId  WHERE T4.Year = (SELECT MIN(Year) FROM cars_data)
SELECT T1.Maker, T3.Year  FROM car_makers AS T1  JOIN model_list AS T2 ON T1.Id = T2.Maker  JOIN cars_data AS T3 ON T2.ModelId = T3.Id  WHERE T3.Year = (SELECT MIN(Year) FROM cars_data);
SELECT DISTINCT model_list.Model  FROM model_list  JOIN cars_data ON model_list.ModelId = cars_data.Id  WHERE cars_data.Year > 1980;
SELECT DISTINCT model_list.Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT Continent, COUNT(*) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.ContId JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY Continent;
SELECT c.Continent, COUNT(cm.Id) as NumOfMakers FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;
SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T2.CountryName ORDER BY COUNT(T1.Id) DESC LIMIT 1;
SELECT T2.CountryName  FROM car_makers AS T1  JOIN countries AS T2 ON T1.Country = T2.CountryId  GROUP BY T2.CountryName  ORDER BY COUNT(T1.Id) DESC  LIMIT 1;
SELECT COUNT(model_list.Model) AS ModelCount, car_makers.FullName  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  GROUP BY car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Model) as NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT cars_data.Accelerate  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE car_names.Make = 'amc hornet sportabout (sw)'
SELECT cars_data.Accelerate  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE car_names.Make = 'amc' AND car_names.Model = 'hornet sportabout (sw)'
SELECT COUNT(*)  FROM car_makers  WHERE Country = 'France';
SELECT COUNT(*)  FROM car_makers  WHERE Country = 'France';
SELECT COUNT(*)  FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries co ON cm.Country = co.CountryId WHERE co.CountryName = 'usa';
SELECT COUNT(*)  FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries co ON cm.Country = co.CountryId WHERE co.CountryName = 'United States';
SELECT AVG(MPG)  FROM cars_data  WHERE Cylinders = 4;
SELECT AVG(MPG)  FROM cars_data  WHERE Cylinders = 4;
SELECT MIN(cars_data.Weight) FROM cars_data JOIN model_list ON cars_data.ModelId = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974;
SELECT MIN(cars_data.Weight)  FROM cars_data  JOIN model_list ON cars_data.Id = model_list.ModelId  WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974;
SELECT DISTINCT car_makers.Maker, model_list.Model  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker;
SELECT DISTINCT car_makers.Maker, model_list.Model  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker;
Error: 第 7124 个样本有 2 个SQL。
SELECT DISTINCT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country;
SELECT COUNT(*)  FROM cars_data  WHERE Horsepower > 150;
SELECT COUNT(*)  FROM cars_data  WHERE Horsepower > 150;
SELECT Year, AVG(Weight)  FROM cars_data  GROUP BY Year;
SELECT Year, AVG(Weight) as Avg_Weight, AVG(Year) as Avg_Year  FROM cars_data  GROUP BY Year;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country JOIN continents co ON c.ContId = co.ContId WHERE co.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3;
SELECT c.CountryName FROM countries c JOIN continents co ON c.ContId = co.ContId JOIN car_makers cm ON c.CountryId = cm.Country WHERE co.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(cm.Maker) >= 3;
SELECT MAX(cars_data.Horsepower), car_names.Make  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make;
SELECT c.model, c.horsepower, m.make  FROM cars_data c  JOIN car_names n ON c.model = n.Model  JOIN car_makers m ON n.MakeId = m.Id  WHERE c.Cylinders = 3  ORDER BY c.horsepower DESC  LIMIT 1;
SELECT model_list.Model  FROM model_list  JOIN cars_data  ON model_list.ModelId = cars_data.Id  ORDER BY cars_data.MPG DESC  LIMIT 1;
SELECT model_list.Model  FROM model_list  JOIN cars_data  ON model_list.ModelId = cars_data.Id  ORDER BY cars_data.MPG DESC  LIMIT 1;
SELECT AVG(horsepower)  FROM cars_data  WHERE year < 1980;
SELECT AVG(Horsepower)  FROM cars_data  WHERE Year < 1980;
SELECT AVG(edispl)  FROM cars_data  JOIN model_list ON cars_data.ModelId = model_list.ModelId  WHERE model_list.Model = 'volvo';
SELECT AVG(edispl)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE car_names.Model = 'Volvos';
SELECT Cylinders, MAX(Accelerate)  FROM cars_data  GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate)  FROM cars_data  GROUP BY Cylinders;
SELECT Model, COUNT(*) AS VersionCount  FROM car_names  GROUP BY Model  ORDER BY VersionCount DESC  LIMIT 1;
SELECT Model, COUNT(*) AS Versions  FROM model_list  GROUP BY Model  ORDER BY Versions DESC  LIMIT 1;
SELECT COUNT(*)  FROM cars_data  WHERE Cylinders > 4;
SELECT COUNT(*)  FROM cars_data  WHERE Cylinders > 4;
SELECT COUNT(*)  FROM cars_data  WHERE Year = 1980;
Error: 第 7147 个样本有 2 个SQL。
SELECT COUNT(*)  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.FullName = 'American Motor Company';
SELECT COUNT(*)  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.FullName = 'American Motor Company';
SELECT car_makers.FullName, car_makers.Id  FROM car_makers  JOIN model_list ON car_makers.Id = model_list.Maker  GROUP BY car_makers.Id  HAVING COUNT(model_list.ModelId) > 3;
SELECT cm.Id, cm.Maker  FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.ModelId) > 3;
SELECT DISTINCT m.Model  FROM model_list m  JOIN car_makers cm ON m.Maker = cm.Id  JOIN cars_data cd ON m.ModelId = cd.Id  WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500;
Error: 第 7153 个样本有 2 个SQL。
SELECT DISTINCT Year  FROM cars_data  WHERE Weight BETWEEN 3000 AND 4000;
SELECT DISTINCT Year  FROM cars_data  WHERE Weight < 4000 AND Id IN (     SELECT Id      FROM cars_data      WHERE Weight > 3000)
SELECT Horsepower  FROM cars_data  WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT T1.Horsepower  FROM cars_data AS T1  JOIN model_list AS T2 ON T1.ModelId = T2.ModelId  WHERE T1.Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT T4.Cylinders  FROM model_list AS T1  JOIN car_makers AS T2 ON T1.Maker = T2.Id  JOIN car_names AS T3 ON T1.Model = T3.MakeId  JOIN cars_data AS T4 ON T4.Id = T3.MakeId  WHERE T2.FullName = 'volvo'  ORDER BY T4.Accelerate ASC  LIMIT 1;
SELECT MIN(cars_data.Cylinders)  FROM cars_data  JOIN model_list ON cars_data.ModelId = model_list.ModelId  WHERE model_list.Maker = 'Volvo'  AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE ModelId IN (SELECT ModelId FROM model_list WHERE Maker = 'Volvo'));
Error: 第 7160 个样本有 2 个SQL。
SELECT COUNT(*)  FROM (   SELECT c.Id    FROM cars_data c    WHERE c.Accelerate > (     SELECT MIN(c2.Accelerate)      FROM cars_data c2      WHERE c2.Horsepower = (       SELECT MAX(Horsepower)        FROM cars_data     )   ) ) AS result;
Error: 第 7162 个样本有 2 个SQL。
SELECT COUNT(*)  FROM (   SELECT Country   FROM car_makers   GROUP BY Country   HAVING COUNT(*) > 2 ) as T;
SELECT COUNT(*)  FROM cars_data  WHERE Cylinders > 6;
SELECT COUNT(*)  FROM cars_data  WHERE Cylinders > 6;
SELECT model_list.Model  FROM model_list  JOIN cars_data ON model_list.ModelId = cars_data.Id  WHERE cars_data.Cylinders = 4  ORDER BY cars_data.Horsepower DESC  LIMIT 1;
SELECT model_list.Model  FROM model_list  JOIN cars_data ON model_list.ModelId = cars_data.Id  WHERE cars_data.Cylinders = 4  ORDER BY cars_data.Horsepower DESC  LIMIT 1;
SELECT      cn.MakeId,      cn.Make FROM      car_names cn JOIN      model_list ml ON cn.Model = ml.Model JOIN      cars_data cd ON ml.ModelId = cd.Id WHERE      cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND      cd.Cylinders <= 3;
SELECT cn.MakeId, cn.Make FROM car_names cn JOIN cars_data cd ON cn.Model = cd.Id WHERE cd.Cylinders < 4 AND cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)
SELECT MAX(MPG)  FROM cars_data  WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(MPG)  FROM cars_data  WHERE Cylinders = 8 OR Year < 1980;
SELECT model_list.Model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE model_list.Model NOT IN (     SELECT car_names.Model      FROM car_names      JOIN car_makers ON car_names.MakeId = car_makers.Id      WHERE car_makers.FullName = 'Ford Motor Company' ) AND model_list.Model IN (     SELECT cars_data.ModelId      FROM cars_data      WHERE cars_data.Weight < 3500 )
SELECT DISTINCT model_list.Model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  JOIN cars_data ON model_list.ModelId = cars_data.Id  WHERE cars_data.Weight < 3500 AND car_makers.FullName != 'Ford Motor Company';
SELECT CountryName  FROM countries  WHERE CountryId NOT IN (SELECT Country FROM car_makers)
SELECT countries.CountryName  FROM countries  LEFT JOIN car_makers ON countries.CountryId = car_makers.Country  WHERE car_makers.Id IS NULL;
Error: 第 7176 个样本有 3 个SQL。
SELECT cm.Id, cm.Maker  FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.ModelId = cn.MakeId GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.Model) >= 2 AND COUNT(cn.Make) > 3;
SELECT c.CountryId, c.CountryName  FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IN (     SELECT Country     FROM car_makers     GROUP BY Country     HAVING COUNT(*) > 3 ) OR c.CountryId IN (     SELECT Country     FROM car_makers     WHERE FullName = 'fiat' ) GROUP BY c.CountryId, c.CountryName;
SELECT T2.CountryId, T2.CountryName  FROM car_makers AS T1  JOIN countries AS T2 ON T1.Country = T2.CountryId  WHERE T1.Maker IN (     SELECT T4.Maker      FROM model_list AS T3      JOIN car_makers AS T4 ON T3.Maker = T4.Id      WHERE T3.Model = 'fiat' )  GROUP BY T2.CountryId, T2.CountryName  HAVING COUNT(T1.Id) > 3  UNION  SELECT T2.CountryId, T2.CountryName  FROM car_makers AS T1  JOIN countries AS T2 ON T1.Country = T2.CountryId  WHERE EXISTS (     SELECT *      FROM model_list AS T3      WHERE T3.Maker = T1.Id AND T3.Model = 'fiat' )  GROUP BY T2.CountryId, T2.CountryName  HAVING COUNT(T1.Id) <= 3;
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation  FROM airlines  WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation  FROM airlines  WHERE Airline = 'Jetblue Airways';
SELECT Airlines.Airline, Airlines.Abbreviation  FROM airlines  WHERE Airlines.Country = 'USA';
SELECT Airline, Abbreviation  FROM airlines  WHERE Country = 'USA';
SELECT AirportCode, AirportName  FROM airports  WHERE City = 'Anthony';
SELECT AirportCode, AirportName  FROM airports  WHERE City = 'Anthony';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT * FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT City, Country  FROM airports  WHERE AirportName = 'Alton';
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT COUNT(*)  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  JOIN airports as dest_airports ON flights.DestAirport = dest_airports.AirportCode  WHERE airports.City = 'Aberdeen' AND dest_airports.City = 'Ashley';
SELECT COUNT(*)  FROM flights  JOIN airports AS src ON flights.SourceAirport = src.AirportCode  JOIN airports AS dest ON flights.DestAirport = dest.AirportCode  WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley';
SELECT COUNT(*)  FROM flights  WHERE Airline = 'JetBlue Airways';
SELECT COUNT(*)  FROM flights  WHERE Airline = 'Jetblue Airways';
SELECT COUNT(*)  FROM flights  WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*)  FROM flights  WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*)  FROM flights  WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*)  FROM flights  WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*)  FROM flights  JOIN airlines ON flights.Airline = airlines.uid  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';
SELECT COUNT(*)  FROM flights  WHERE Airline = 'United Airlines' AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT City, COUNT(*) AS NumOfFlights  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  GROUP BY City  ORDER BY NumOfFlights DESC  LIMIT 1;
SELECT T2.City, T1.DestAirport, COUNT(*) AS Frequency  FROM flights AS T1  JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode  GROUP BY T1.DestAirport  ORDER BY Frequency DESC  LIMIT 1;
SELECT T2.City, COUNT(*) AS num_flights  FROM flights AS T1  JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode  GROUP BY T2.City  ORDER BY num_flights DESC  LIMIT 1;
SELECT City, COUNT(*) as frequency  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  GROUP BY City  ORDER BY frequency DESC  LIMIT 1;
SELECT T2.AirportCode FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode GROUP BY T1.SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.AirportCode FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode GROUP BY T1.SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.AirportCode FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode GROUP BY T2.AirportCode ORDER BY COUNT(*) ASC LIMIT 1
SELECT T2.AirportCode FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode GROUP BY T2.AirportCode ORDER BY COUNT(*) ASC LIMIT 1
SELECT Airline, COUNT(*) AS num_flights  FROM flights  GROUP BY Airline  ORDER BY num_flights DESC  LIMIT 1;
SELECT Airline, COUNT(*) AS FlightsCount  FROM flights  GROUP BY Airline  ORDER BY FlightsCount DESC  LIMIT 1;
SELECT a.Abbreviation, a.Country FROM airlines a JOIN flights f ON a.Airline = f.Airline GROUP BY a.Airline, a.Abbreviation, a.Country ORDER BY COUNT(f.FlightNo) ASC LIMIT 1;
SELECT T1.Abbreviation, T1.Country  FROM airlines AS T1  JOIN flights AS T2 ON T1.Airline = T2.Airline  GROUP BY T1.Airline  ORDER BY COUNT(T2.FlightNo)  LIMIT 1;
SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.Abbreviation = flights.Airline  WHERE flights.SourceAirport = 'AHD';
SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.Abbreviation = flights.Airline  WHERE flights.SourceAirport = 'AHD';
SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.Abbreviation = flights.Airline  WHERE flights.DestAirport = 'AHD';
SELECT DISTINCT airlines.Airline  FROM airlines  JOIN flights ON airlines.Abbreviation = flights.Airline  WHERE flights.DestAirport = 'AHD';
SELECT DISTINCT a.Airline  FROM airlines a  JOIN flights f1 ON a.Abbreviation = f1.Airline  JOIN flights f2 ON a.Abbreviation = f2.Airline  WHERE f1.SourceAirport = 'APG' OR f1.DestAirport = 'APG'  AND f2.SourceAirport = 'CVO' OR f2.DestAirport = 'CVO';
SELECT Airline  FROM flights  WHERE SourceAirport = 'APG'  INTERSECT  SELECT Airline  FROM flights  WHERE SourceAirport = 'CVO';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.Abbreviation = f.Airline WHERE f.SourceAirport = 'CVO' AND a.Abbreviation NOT IN (     SELECT Airline     FROM flights     WHERE SourceAirport = 'APG' );
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.Abbreviation = f.Airline WHERE f.SourceAirport IN (     SELECT ap.AirportCode     FROM airports ap     WHERE ap.City = 'CVO' ) AND f.SourceAirport NOT IN (     SELECT ap.AirportCode     FROM airports ap     WHERE ap.City = 'APG' );
SELECT a.Airline FROM airlines a JOIN flights f ON a.Abbreviation = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) >= 10;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT a.Airline FROM airlines a WHERE (     SELECT COUNT(*)     FROM flights f     WHERE f.Airline = a.Abbreviation ) < 200;
SELECT A.Airline FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.Airline HAVING COUNT(F.FlightNo) < 200;
SELECT FlightNo  FROM flights  WHERE Airline = 'United Airlines';
SELECT FlightNo  FROM flights  WHERE Airline = 'United Airlines';
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportName = 'APG';
SELECT FlightNo  FROM flights  WHERE SourceAirport = 'APG';
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.AirportName = 'APG';
SELECT FlightNo  FROM flights  WHERE DestAirport = 'APG';
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT f.FlightNo  FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT flights.FlightNo  FROM flights  JOIN airports ON flights.DestAirport = airports.AirportCode  WHERE airports.City = 'Aberdeen';
SELECT f.FlightNo  FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*)  FROM flights  WHERE DestAirport IN (     SELECT AirportCode      FROM airports      WHERE City IN ('Aberdeen', 'Abilene') );
SELECT COUNT(*)  FROM flights  WHERE DestAirport IN (     SELECT AirportCode      FROM airports      WHERE City IN ('Aberdeen', 'Abilene') );
SELECT AirportName  FROM airports  WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)
SELECT AirportCode  FROM airports  WHERE AirportCode NOT IN (     SELECT DISTINCT SourceAirport FROM flights      UNION      SELECT DISTINCT DestAirport FROM flights )
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT Name  FROM employee  ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT City, COUNT(*) AS Num_Employees  FROM employee  GROUP BY City;
SELECT City, COUNT(*) AS Num_Employees  FROM employee  GROUP BY City;
SELECT City  FROM employee  WHERE Age < 30  GROUP BY City  HAVING COUNT(*) > 1;
SELECT City  FROM employee  WHERE Age < 30  GROUP BY City  HAVING COUNT(*) > 1;
SELECT Location, COUNT(*) AS Num_of_Shops FROM shop GROUP BY Location;
SELECT Location, COUNT(Shop_ID)  FROM shop  GROUP BY Location;
SELECT T1.Manager_name, T1.District  FROM shop AS T1  WHERE T1.Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT Manager_name, District  FROM shop  WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;
SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;
SELECT Name, Location, District  FROM shop  ORDER BY Number_products DESC;
SELECT Name, Location, District  FROM shop  ORDER BY Number_products DESC;
SELECT Name  FROM shop  WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT Name  FROM shop  WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT e.Name  FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Name ORDER BY COUNT(ev.Year_awarded) DESC LIMIT 1;
SELECT e.Name  FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID  GROUP BY e.Name  ORDER BY COUNT(ev.Year_awarded) DESC  LIMIT 1;
SELECT e.Name  FROM employee e  JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID  WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation) GROUP BY e.Name;
SELECT e.Name  FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID  ORDER BY ev.Bonus DESC  LIMIT 1;
SELECT e.Name  FROM employee e  LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID  WHERE ev.Employee_ID IS NULL;
SELECT e.Name  FROM employee e  LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID  WHERE ev.Employee_ID IS NULL;
SELECT s.Name  FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;
SELECT s.Name  FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;
SELECT Name  FROM shop  WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)
SELECT Name  FROM shop  WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)
SELECT shop.Name, COUNT(hiring.Employee_ID)  FROM shop  JOIN hiring ON shop.Shop_ID = hiring.Shop_ID  GROUP BY shop.Name;
SELECT shop.Name, COUNT(hiring.Employee_ID) as Num_Employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT SUM(Bonus) FROM evaluation;
SELECT SUM(Bonus) FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT District  FROM shop  WHERE Number_products < 3000  INTERSECT  SELECT District  FROM shop  WHERE Number_products > 10000;
SELECT District  FROM shop  WHERE Number_products < 3000  INTERSECT  SELECT District  FROM shop  WHERE Number_products > 10000;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_Name, Template_ID  FROM Documents  WHERE Document_Description LIKE '%w%';
SELECT D.Document_Name, T.Template_ID  FROM Documents D  JOIN Templates T ON D.Template_ID = T.Template_ID  WHERE D.Document_Description LIKE '%w%';
SELECT Documents.Document_ID, Templates.Template_ID, Templates.Template_Details FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV';
SELECT Documents.Document_ID, Templates.Template_ID, Documents.Document_Description  FROM Documents  INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID  WHERE Documents.Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT Templates.Template_ID)  FROM Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
SELECT COUNT(DISTINCT Templates.Template_ID)  FROM Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
SELECT COUNT(*)  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PPT';
SELECT COUNT(*)  FROM Documents  JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT';
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS NumberOfDocuments FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Usage_Count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT T1.Template_ID, T2.Template_Type_Code  FROM Documents AS T1  JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID  JOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code  GROUP BY T1.Template_ID, T2.Template_Type_Code  ORDER BY COUNT(T1.Document_ID) DESC  LIMIT 1;
SELECT T1.Template_ID, T1.Template_Type_Code  FROM Templates AS T1  JOIN Documents AS D2 ON T1.Template_ID = D2.Template_ID  GROUP BY T1.Template_ID, T1.Template_Type_Code  ORDER BY COUNT(D2.Document_ID) DESC  LIMIT 1;
SELECT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID HAVING COUNT(d.Document_ID) > 1;
SELECT t.Template_ID  FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID HAVING COUNT(d.Document_ID) > 1;
SELECT T.Template_ID  FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID  WHERE D.Document_ID IS NULL;
SELECT Template_ID  FROM Templates  WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)
SELECT COUNT(*) FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code  FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code  FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT COUNT(*)  FROM Templates  WHERE Template_Type_Code = 'CV';
SELECT COUNT(*)  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Description = 'CV';
SELECT Version_Number, Template_Type_Code  FROM Templates  WHERE Version_Number > 5;
SELECT Version_Number, Template_Type_Code  FROM Templates  WHERE Version_Number > 5;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) as Number_of_Templates FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Template_Type_Code, COUNT(*) AS Number_of_Templates FROM Templates GROUP BY Template_Type_Code;
SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Count DESC LIMIT 1;
SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Count DESC LIMIT 1;
SELECT T1.Template_Type_Code  FROM Ref_Template_Types T1 JOIN Templates T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID) < 3;
SELECT Template_Type_Code  FROM Templates  GROUP BY Template_Type_Code  HAVING COUNT(Template_ID) < 3;
Error: 第 7336 个样本有 2 个SQL。
SELECT MIN(T.Version_Number), T.Template_Type_Code  FROM Templates AS T GROUP BY T.Template_Type_Code ORDER BY MIN(T.Version_Number);
SELECT T.Template_Type_Code  FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_Name = 'Data base';
SELECT T.Template_Type_Code  FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_Name = 'Data base';
SELECT D.Document_Name  FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID JOIN Ref_Template_Types R ON T.Template_Type_Code = R.Template_Type_Code WHERE R.Template_Type_Code = 'BK';
SELECT D.Document_Name  FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID  WHERE T.Template_Type_Code = 'BK';
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) AS NumberOfDocuments FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT RTT.Template_Type_Code, COUNT(DISTINCT D.Document_ID) AS Document_Count FROM Ref_Template_Types RTT JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY RTT.Template_Type_Code;
SELECT T.Template_Type_Code, COUNT(D.Document_ID) AS Document_Count FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code ORDER BY Document_Count DESC LIMIT 1;
SELECT T.Template_Type_Code, COUNT(*) AS Frequency FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID GROUP BY T.Template_Type_Code ORDER BY Frequency DESC LIMIT 1;
Error: 第 7346 个样本有 2 个SQL。
Error: 第 7347 个样本有 2 个SQL。
SELECT Template_Type_Code, Template_Type_Description  FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description  FROM Ref_Template_Types;
SELECT Template_Type_Description  FROM Ref_Template_Types  WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description  FROM Ref_Template_Types  WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Description = 'Book';
SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Description = "Book";
SELECT DISTINCT Ref_Template_Types.Template_Type_Description  FROM Ref_Template_Types  JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code  JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
SELECT DISTINCT T.Template_Type_Description  FROM Ref_Template_Types T JOIN Templates TM ON T.Template_Type_Code = TM.Template_Type_Code JOIN Documents D ON TM.Template_ID = D.Template_ID;
SELECT Templates.Template_ID  FROM Templates  JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code  WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT T.Template_ID  FROM Templates T JOIN Ref_Template_Types R ON T.Template_Type_Code = R.Template_Type_Code  WHERE R.Template_Type_Description = 'Presentation';
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*)  FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Summer Show';
SELECT COUNT(*)  FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea';
SELECT p.Paragraph_Text, d.Document_Name, t.Template_Details  FROM Paragraphs p  JOIN Documents d ON p.Document_ID = d.Document_ID  JOIN Templates t ON d.Template_ID = t.Template_ID  WHERE p.Paragraph_Text LIKE '%Korea%';
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text  FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Welcome to NY';
SELECT P.Paragraph_ID, P.Paragraph_Text  FROM Paragraphs P JOIN Documents D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Welcome to NY';
SELECT Paragraphs.Paragraph_Text  FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Customer reviews';
SELECT Paragraphs.Paragraph_Text  FROM Paragraphs  JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Customer reviews';
SELECT D.Document_ID, COUNT(P.Paragraph_ID) AS NumberOfParagraphs FROM Documents D LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY D.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS NumberOfParagraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS NumberOfParagraphs FROM Documents D LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name;
SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS NumberOfParagraphs FROM Documents D LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name;
SELECT D.Document_ID FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID HAVING COUNT(P.Paragraph_ID) >= 2;
SELECT D.Document_ID  FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID HAVING COUNT(P.Paragraph_ID) >= 2;
SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS NumberOfParagraphs FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name ORDER BY NumberOfParagraphs DESC LIMIT 1;
SELECT D.Document_ID, D.Document_Name  FROM Documents D  JOIN Paragraphs P ON D.Document_ID = P.Document_ID  GROUP BY D.Document_ID, D.Document_Name  ORDER BY COUNT(P.Paragraph_ID) DESC  LIMIT 1;
SELECT D.Document_ID  FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY COUNT(P.Paragraph_ID) ASC LIMIT 1;
SELECT D.Document_ID  FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY COUNT(P.Paragraph_ID) ASC LIMIT 1;
SELECT D.Document_ID  FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID HAVING COUNT(P.Paragraph_ID) BETWEEN 1 AND 2;
SELECT D.Document_ID  FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID HAVING COUNT(P.Paragraph_ID) BETWEEN 1 AND 2;
SELECT D.Document_ID  FROM Documents D  JOIN Paragraphs P ON D.Document_ID = P.Document_ID  WHERE P.Paragraph_Text IN ('Brazil', 'Ireland')  GROUP BY D.Document_ID  HAVING COUNT(DISTINCT P.Paragraph_Text) = 2;
SELECT D.Document_ID  FROM Documents D  JOIN Paragraphs P ON D.Document_ID = P.Document_ID  WHERE P.Paragraph_Text LIKE '%Brazil%'  AND P.Paragraph_Text LIKE '%Ireland%';
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT Name  FROM teacher  ORDER BY Age ASC;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Age, Hometown FROM teacher;
SELECT Age, Hometown FROM teacher;
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name  FROM teacher  WHERE Age IN (32, 33);
SELECT Name  FROM teacher  WHERE Age IN (32, 33);
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);
SELECT Hometown  FROM teacher  WHERE Age = (SELECT MIN(Age) FROM teacher);
SELECT Hometown, COUNT(*)  FROM teacher  GROUP BY Hometown;
SELECT Hometown, COUNT(Teacher_ID)  FROM teacher  GROUP BY Hometown;
SELECT Hometown, COUNT(*) as count  FROM teacher  GROUP BY Hometown  ORDER BY count DESC  LIMIT 1;
SELECT Hometown, COUNT(*) as Count  FROM teacher  GROUP BY Hometown  ORDER BY Count DESC  LIMIT 1;
SELECT Hometown  FROM teacher  GROUP BY Hometown  HAVING COUNT(Teacher_ID) >= 2;
SELECT Hometown  FROM teacher  GROUP BY Hometown  HAVING COUNT(Teacher_ID) >= 2;
SELECT teacher.Name, course.Course  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course.Course_ID = course_arrange.Course_ID;
SELECT teacher.Name, course.Course  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course.Course_ID = course_arrange.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT t.Name  FROM course_arrange ca  JOIN course c ON ca.Course_ID = c.Course_ID  JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID  WHERE c.Course = 'math';
SELECT T2.Name  FROM course_arrange AS T1  JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID  JOIN course AS T3 ON T1.Course_ID = T3.Course_ID  WHERE T3.Course = 'math'
SELECT T2.Name, COUNT(T1.Course_ID)  FROM course_arrange AS T1  JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T2.Name;
SELECT T2.Name, COUNT(T1.Course_ID)  FROM course_arrange AS T1  JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T2.Name;
SELECT t.Name  FROM teacher t  JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID  GROUP BY t.Name  HAVING COUNT(ca.Course_ID) >= 2;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID, t.Name HAVING COUNT(ca.Course_ID) >= 2;
SELECT Name  FROM teacher  WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT t.Name  FROM teacher t  LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID  WHERE ca.Teacher_ID IS NULL
SELECT COUNT(*)  FROM visitor  WHERE Age < 30;
SELECT Name  FROM visitor  WHERE Level_of_membership > 4  ORDER BY Level_of_membership DESC;
SELECT AVG(Age)  FROM visitor  WHERE Level_of_membership <= 4;
SELECT Name, Level_of_membership  FROM visitor  WHERE Level_of_membership > 4  ORDER BY Age DESC;
SELECT Museum_ID, Name  FROM museum  ORDER BY Num_of_Staff DESC  LIMIT 1;
SELECT AVG(Num_of_Staff)  FROM museum  WHERE Open_Year < 2009;
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT T1.Name  FROM museum AS T1  WHERE T1.Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)
SELECT v.ID, v.Name, v.Age  FROM visitor v JOIN visit vt ON v.ID = vt.visitor_ID GROUP BY v.ID, v.Name, v.Age HAVING COUNT(vt.Museum_ID) > 1;
SELECT v.ID, v.Name, v.Level_of_membership  FROM visitor v  JOIN (     SELECT visitor_ID, SUM(Total_spent) as total_spent      FROM visit      GROUP BY visitor_ID ) subquery  ON v.ID = subquery.visitor_ID  WHERE subquery.total_spent = (     SELECT MAX(total_spent)      FROM (         SELECT SUM(Total_spent) as total_spent          FROM visit          GROUP BY visitor_ID     ) as spending )
SELECT T1.Museum_ID, T2.Name  FROM visit AS T1  JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID  GROUP BY T1.Museum_ID  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT m.Name  FROM museum m  LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID  WHERE v.Museum_ID IS NULL;
SELECT v.Name, v.Age  FROM visitor v  JOIN visit vi ON v.ID = vi.visitor_ID  WHERE vi.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit);
SELECT AVG(Num_of_Ticket) AS Average_Tickets, MAX(Num_of_Ticket) AS Maximum_Tickets  FROM visit;
SELECT SUM(Total_spent)  FROM visit  WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)
SELECT v.Name  FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON m.Museum_ID = vi.Museum_ID WHERE m.Open_Year < 2009 INTERSECT SELECT v.Name  FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON m.Museum_ID = vi.Museum_ID WHERE m.Open_Year > 2011;
SELECT COUNT(*)  FROM visitor  WHERE ID NOT IN (SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010))
SELECT COUNT(*) FROM museum WHERE Open_Year < 2008 OR Open_Year > 2013;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA';
SELECT first_name, birth_date  FROM players  WHERE country_code = 'USA';
SELECT AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age  FROM matches;
SELECT AVG(winner_age) as avg_winner_age, AVG(loser_age) as avg_loser_age FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT AVG(winner_rank) FROM matches
Error: 第 7440 个样本有 2 个SQL。
SELECT MIN(ranking)  FROM rankings  WHERE player_id IN (SELECT loser_id FROM matches)
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(*) > 10;
SELECT tourney_name  FROM matches  GROUP BY tourney_name  HAVING COUNT(*) > 10
SELECT T1.winner_name  FROM (     SELECT winner_id FROM matches WHERE year = 2013 ) AS T1 JOIN (     SELECT winner_id FROM matches WHERE year = 2016 ) AS T2 ON T1.winner_id = T2.winner_id JOIN players AS P ON P.player_id = T1.winner_id GROUP BY T1.winner_id HAVING COUNT(*) > 0;
SELECT T1.first_name, T1.last_name  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE YEAR = 2013  GROUP BY T1.player_id  HAVING COUNT(*) > 0  INTERSECT  SELECT T1.first_name, T1.last_name  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE YEAR = 2016  GROUP BY T1.player_id  HAVING COUNT(*) > 0;
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*)  FROM matches  WHERE year IN (2013, 2016);
SELECT T1.country_code, T1.first_name  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.tourney_name = 'WTA Championships'  INTERSECT  SELECT T1.country_code, T1.first_name  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.tourney_name = 'Australian Open'
SELECT DISTINCT p.first_name, p.country_code  FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.player_id HAVING COUNT(DISTINCT m.tourney_name) = 2;
SELECT first_name, country_code  FROM players  WHERE birth_date = (SELECT MIN(birth_date) FROM players);
SELECT first_name, country_code  FROM players  WHERE birth_date = (SELECT MIN(birth_date) FROM players);
SELECT first_name, last_name  FROM players  ORDER BY birth_date;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name  FROM players  WHERE hand = 'L'  ORDER BY birth_date;
SELECT first_name, last_name  FROM players  WHERE hand = 'L'  ORDER BY birth_date;
SELECT T1.first_name, T1.country_code  FROM players AS T1  JOIN rankings AS T2 ON T1.player_id = T2.player_id  GROUP BY T1.player_id  ORDER BY SUM(T2.tours) DESC  LIMIT 1;
SELECT p.first_name, p.country_code  FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY COUNT(r.tours) DESC LIMIT 1;
SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT year, COUNT(*) as num_matches  FROM matches  GROUP BY year  ORDER BY num_matches DESC  LIMIT 1;
SELECT T2.winner_name, T2.winner_rank_points FROM (   SELECT winner_id, COUNT(*) AS win_times   FROM matches   GROUP BY winner_id ) AS T1 JOIN matches AS T2 ON T1.winner_id = T2.winner_id WHERE T1.win_times = (   SELECT MAX(win_times)   FROM (     SELECT winner_id, COUNT(*) AS win_times     FROM matches     GROUP BY winner_id   ) AS sub_query ) LIMIT 1;
SELECT T1.winner_name, T1.winner_rank_points FROM matches AS T1 JOIN (SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id ORDER BY win_count DESC LIMIT 1) AS T2 ON T1.winner_id = T2.winner_id;
SELECT T2.winner_name  FROM matches AS T2  JOIN rankings AS T1  ON T1.player_id = T2.winner_id  WHERE T2.tourney_name = 'Australian Open'  ORDER BY T2.winner_rank_points DESC  LIMIT 1;
SELECT T2.winner_name  FROM matches AS T2  JOIN rankings AS T1  ON T2.winner_id = T1.player_id  WHERE T2.tourney_name = 'Australian Open'  ORDER BY T2.winner_rank_points DESC  LIMIT 1;
SELECT loser_name, winner_name  FROM matches  WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT      T2.winner_name AS winner,      T2.loser_name AS loser  FROM      matches AS T2  ORDER BY      T2.minutes DESC  LIMIT 1;
SELECT players.first_name, AVG(rankings.ranking) as avg_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT players.first_name, AVG(rankings.ranking)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points)  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.first_name;
SELECT country_code, COUNT(player_id) as num_players FROM players GROUP BY country_code;
SELECT country_code, COUNT(player_id)  FROM players  GROUP BY country_code;
SELECT country_code  FROM players  GROUP BY country_code  ORDER BY COUNT(player_id) DESC  LIMIT 1;
SELECT country_code  FROM players  GROUP BY country_code  ORDER BY COUNT(player_id) DESC  LIMIT 1;
SELECT country_code  FROM players  GROUP BY country_code  HAVING COUNT(player_id) > 50;
SELECT country_code  FROM players  GROUP BY country_code  HAVING COUNT(player_id) > 50;
SELECT ranking_date, SUM(tours) as total_tours  FROM rankings  GROUP BY ranking_date;
SELECT ranking_date, SUM(tours) as total_tours  FROM rankings  GROUP BY ranking_date;
SELECT COUNT(*), year  FROM matches  GROUP BY year;
SELECT COUNT(*), year  FROM matches  GROUP BY year;
SELECT      w.winner_name,     w.winner_rank FROM      matches w JOIN      players p ON w.winner_id = p.player_id WHERE      (w.winner_id, w.tourney_date) IN (         SELECT              winner_id,             MIN(tourney_date)         FROM              matches         GROUP BY              winner_id     ) ORDER BY      w.winner_age ASC LIMIT 3;
SELECT T2.winner_name, T2.winner_rank  FROM matches AS T2  JOIN players AS T1 ON T1.player_id = T2.winner_id  ORDER BY T1.birth_date DESC  LIMIT 3;
SELECT COUNT(DISTINCT winner_id)  FROM matches  WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'
SELECT COUNT(*)  FROM matches  JOIN players ON matches.winner_id = players.player_id  WHERE players.hand = 'L' AND matches.tourney_name = 'WTA Championships';
SELECT p.first_name, p.country_code, p.birth_date  FROM players p  JOIN (   SELECT winner_id, MAX(winner_rank_points) as max_points    FROM matches ) m  ON p.player_id = m.winner_id;
Error: 第 7489 个样本有 2 个SQL。
SELECT hand, COUNT(player_id)  FROM players  GROUP BY hand;
SELECT hand, COUNT(player_id)  FROM players  GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage  FROM ship  ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(death.killed + death.injured) AS max_death_toll, MIN(death.killed + death.injured) AS min_death_toll  FROM death
SELECT AVG(injured) FROM death;
SELECT death.note, death.killed, death.injured  FROM death  JOIN ship ON death.caused_by_ship_id = ship.id  WHERE ship.tonnage = 't';
SELECT name, result  FROM battle  WHERE bulgarian_commander != 'Boril';
SELECT DISTINCT b.id, b.name  FROM battle b JOIN ship s ON s.lost_in_battle = b.id  WHERE s.ship_type = 'Brig';
SELECT b.id, b.name  FROM battle AS b JOIN death AS d ON b.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
SELECT T1.id, T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id, T1.name ORDER BY SUM(T2.injured) DESC LIMIT 1;
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = 225)
SELECT b.name, b.date  FROM battle AS b  JOIN ship AS s1 ON b.id = s1.lost_in_battle  JOIN ship AS s2 ON b.id = s2.lost_in_battle  WHERE (s1.name = 'Lettice' OR s2.name = 'HMS Atalanta')  AND (s1.name = 'Lettice' OR s2.name = 'HMS Atalanta');
SELECT b.name, b.result, b.bulgarian_commander  FROM battle AS b  LEFT JOIN ship AS s ON b.id = s.lost_in_battle  WHERE s.location <> 'English Channel' OR s.lost_in_battle IS NULL;
SELECT note FROM death WHERE note LIKE '%East%';
SELECT line_1, line_2 FROM Addresses;
SELECT line_1, line_2 FROM Addresses;
SELECT COUNT(*) FROM Courses;
SELECT COUNT(*) FROM Courses;
SELECT course_description  FROM Courses  WHERE course_name = 'math';
SELECT Courses.course_description  FROM Courses  JOIN Departments ON Courses.department_id = Departments.department_id  WHERE Departments.department_name = 'Math';
SELECT Addresses.zip_postcode  FROM Addresses  WHERE Addresses.city = 'Port Chelsea';
SELECT zip_postcode  FROM Addresses  WHERE city = 'Port Chelsea';
SELECT D.department_id, D.department_name  FROM Departments D JOIN Degree_Programs DP ON D.department_id = DP.department_id GROUP BY D.department_id, D.department_name ORDER BY COUNT(DP.degree_program_id) DESC LIMIT 1;
SELECT D.department_name, D.department_id  FROM Departments D JOIN Degree_Programs DP ON D.department_id = DP.department_id GROUP BY D.department_id, D.department_name ORDER BY COUNT(DP.degree_program_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT department_id)  FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id)  FROM Degree_Programs;
SELECT COUNT(DISTINCT d.degree_summary_name)  FROM Degree_Programs d;
SELECT COUNT(DISTINCT degree_summary_name)  FROM Degree_Programs;
SELECT COUNT(*)  FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'Engineering';
SELECT COUNT(*)  FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'Engineering';
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT C.course_id, C.course_name  FROM Courses C WHERE NOT EXISTS (     SELECT S.section_id      FROM Sections S      WHERE S.course_id = C.course_id     GROUP BY S.course_id     HAVING COUNT(S.section_id) > 2 );
SELECT Courses.course_id, Courses.course_name  FROM Courses  WHERE Courses.course_id NOT IN (     SELECT Sections.course_id      FROM Sections      GROUP BY Sections.course_id      HAVING COUNT(Sections.section_id) >= 2 )
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT Semesters.semester_id, Semesters.semester_name  FROM Semesters  JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id  GROUP BY Semesters.semester_id  ORDER BY COUNT(Student_Enrolment.student_id) DESC  LIMIT 1;
SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1
SELECT department_description  FROM Departments  WHERE department_name LIKE '%the computer%';
SELECT department_description  FROM Departments  WHERE department_name LIKE '%computer%';
SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id WHERE SE.student_id IN (     SELECT SE.student_id     FROM Student_Enrolment SE     JOIN Semesters SM ON SE.semester_id = SM.semester_id     GROUP BY SE.student_id, SM.semester_id     HAVING COUNT(DISTINCT SE.degree_program_id) = 2 ) GROUP BY S.student_id;
SELECT s.first_name, s.middle_name, s.last_name, s.student_id  FROM Students s  JOIN Student_Enrolment se ON s.student_id = se.student_id  GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name  HAVING COUNT(DISTINCT se.degree_program_id) = 2 AND COUNT(DISTINCT se.semester_id) = 1;
SELECT S.first_name, S.middle_name, S.last_name  FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name LIKE '%Bachelor%';
SELECT s.first_name, s.middle_name, s.last_name  FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelors%';
SELECT dp.department_name, COUNT(se.student_id) as num_students FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.department_name ORDER BY num_students DESC LIMIT 1;
SELECT dp.degree_summary_name, COUNT(se.student_id) AS num_students FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY num_students DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT      s.student_id,      s.first_name,      s.middle_name,      s.last_name,      COUNT(se.student_id) AS enrollments_count FROM      Students s JOIN      Student_Enrolment se ON s.student_id = se.student_id GROUP BY      s.student_id,      s.first_name,      s.middle_name,      s.last_name ORDER BY      enrollments_count DESC LIMIT 1;
SELECT      s.first_name,      s.middle_name,      s.last_name,      s.student_id,      COUNT(se.student_id) AS enrollments_count FROM      Students s JOIN      Student_Enrolment se ON s.student_id = se.student_id GROUP BY      s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY      enrollments_count DESC LIMIT 1;
SELECT s.semester_name  FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.student_enrolment_id IS NULL;
SELECT semester_name  FROM Semesters  WHERE semester_id NOT IN (     SELECT semester_id      FROM Student_Enrolment )
SELECT DISTINCT c.course_name  FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;
SELECT DISTINCT c.course_name  FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;
SELECT C.course_name  FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id GROUP BY C.course_name ORDER BY COUNT(SEC.student_course_id) DESC LIMIT 1;
SELECT C.course_name  FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id GROUP BY C.course_name ORDER BY COUNT(SEC.student_course_id) DESC LIMIT 1;
SELECT s.last_name  FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id  WHERE a.state_province_county = 'North Carolina'  AND s.student_id NOT IN (SELECT student_id FROM Student_Enrolment)
SELECT s.last_name  FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id  WHERE a.state_province_county = 'North Carolina'  AND s.student_id NOT IN (SELECT student_id FROM Student_Enrolment)
SELECT T1.transcript_date, T1.transcript_id  FROM Transcripts AS T1  JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T1.transcript_id  HAVING COUNT(T2.student_course_id) >= 2;
SELECT T1.transcript_date, T1.transcript_id  FROM Transcripts AS T1  JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T1.transcript_id  HAVING COUNT(T2.student_course_id) >= 2;
SELECT Students.cell_mobile_number  FROM Students  WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';
SELECT Students.cell_mobile_number  FROM Students  WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';
SELECT first_name, middle_name, last_name  FROM Students  ORDER BY date_first_registered ASC  LIMIT 1;
SELECT first_name, middle_name, last_name  FROM Students  ORDER BY date_first_registered ASC  LIMIT 1;
SELECT first_name, middle_name, last_name  FROM Students  WHERE date_left IS NOT NULL  ORDER BY date_left  LIMIT 1;
SELECT first_name, middle_name, last_name  FROM Students  WHERE date_left IS NOT NULL  ORDER BY date_left ASC  LIMIT 1;
SELECT s.first_name  FROM Students s WHERE s.current_address_id != s.permanent_address_id;
SELECT first_name  FROM Students  WHERE current_address_id != permanent_address_id;
SELECT Addresses.address_id, line_1, line_2, line_3  FROM Addresses  JOIN Students ON Addresses.address_id = Students.current_address_id  GROUP BY Addresses.address_id, line_1, line_2, line_3  ORDER BY COUNT(Students.student_id) DESC  LIMIT 1;
SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2  FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id, Addresses.line_1, Addresses.line_2 ORDER BY COUNT(Students.student_id) DESC LIMIT 1;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT T.transcript_date, T.other_details  FROM Transcripts T  ORDER BY T.transcript_date ASC  LIMIT 1;
SELECT T1.transcript_date, T1.other_details  FROM Transcripts AS T1  WHERE T1.transcript_date = (SELECT MIN(transcript_date) FROM Transcripts);
SELECT COUNT(*) FROM Transcripts;
SELECT COUNT(*) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT MAX(transcript_date) AS Last_Transcript_Release  FROM Transcripts;
SELECT student_course_id, COUNT(*) AS Transcript_Count FROM Transcript_Contents GROUP BY student_course_id ORDER BY Transcript_Count DESC LIMIT 1;
SELECT MAX(count), T2.student_course_id  FROM (     SELECT T1.course_id, COUNT(*) as count     FROM (         SELECT course_id FROM Student_Enrolment_Courses     ) T1     JOIN Transcript_Contents T3 ON T1.student_course_id = T3.student_course_id     GROUP BY T1.course_id ) T2 JOIN Student_Enrolment_Courses T4 ON T2.student_course_id = T4.student_course_id ORDER BY count DESC LIMIT 1;
SELECT T1.transcript_date, T1.transcript_id  FROM Transcripts AS T1  JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T1.transcript_id  ORDER BY COUNT(T2.student_course_id)  LIMIT 1;
SELECT T1.transcript_date, T1.transcript_id  FROM Transcripts AS T1  JOIN (   SELECT transcript_id, COUNT(*) AS cnt    FROM Transcript_Contents    GROUP BY transcript_id  ) AS T2  ON T1.transcript_id = T2.transcript_id  ORDER BY T2.cnt  LIMIT 1;
SELECT s.semester_name FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Master%' INTERSECT SELECT s.semester_name FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelor%'
SELECT se.semester_id  FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY se.semester_id HAVING COUNT(DISTINCT dp.degree_summary_name) = 2;
SELECT COUNT(DISTINCT current_address_id) FROM Students;
SELECT DISTINCT A.line_1, A.line_2, A.city, A.zip_postcode  FROM Addresses A  JOIN Students S ON A.address_id = S.current_address_id;
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC;
SELECT other_student_details  FROM Students  ORDER BY last_name DESC, first_name DESC;
SELECT * FROM Sections WHERE section_name = 'h';
SELECT section_description  FROM Sections  WHERE section_name = 'h';
SELECT first_name  FROM Students  WHERE permanent_address_id IN (     SELECT address_id      FROM Addresses      WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582';
SELECT first_name  FROM Students  WHERE country = 'Haiti' AND permanent_address_id = Addresses.address_id OR cell_mobile_number = '09700166582';
SELECT Title  FROM Cartoon  ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title  FROM Cartoon  WHERE Directed_by = 'Ben Jones';
SELECT COUNT(*)  FROM Cartoon  WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*)  FROM Cartoon  WHERE Written_by = 'Joseph Kuhr';
SELECT Title, Directed_by  FROM Cartoon  ORDER BY Original_air_date;
SELECT Title, Directed_by  FROM Cartoon  ORDER BY Original_air_date;
SELECT Title  FROM Cartoon  WHERE Directed_by IN ("Ben Jones", "Brandon Vietti");
SELECT Title  FROM Cartoon  WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Country, COUNT(*) AS Num_of_Channels FROM TV_Channel GROUP BY Country ORDER BY Num_of_Channels DESC LIMIT 1;
SELECT Country, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Country ORDER BY Channel_Count DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT Language, COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Language ORDER BY Num_Channels ASC LIMIT 1;
SELECT Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC LIMIT 1;
SELECT Language, COUNT(*) AS Num_Channels  FROM TV_Channel  GROUP BY Language;
SELECT Language, COUNT(*)  FROM TV_Channel  GROUP BY Language;
SELECT TV_Channel.series_name FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT tv_channel.series_name  FROM tv_channel  JOIN cartoon ON tv_channel.id = cartoon.Channel  WHERE cartoon.Title = 'The Rise of the Blue Beetle';
SELECT C.Title FROM Cartoon C JOIN TV_Channel T ON C.Channel = T.id WHERE T.series_name = 'Sky Radio';
SELECT C.Title FROM Cartoon C JOIN TV_Channel T ON C.Channel = T.id WHERE T.series_name = 'Sky Radio';
SELECT Episode FROM TV_series ORDER BY Rating;
SELECT Episode FROM TV_series ORDER BY Rating;
SELECT Episode, Rating  FROM TV_series  ORDER BY Rating DESC  LIMIT 3;
SELECT Episode, Rating  FROM TV_series  ORDER BY Rating DESC  LIMIT 3;
SELECT MIN(Share) AS Min_Share, MAX(Share) AS Max_Share FROM TV_series;
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM TV_series;
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT Original_air_date FROM Cartoon WHERE Title = 'A Love of a Lifetime';
SELECT Weekly_Rank  FROM TV_series  WHERE Episode = "A Love of a Lifetime";
SELECT Weekly_Rank  FROM TV_series  WHERE Episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name  FROM TV_Channel  JOIN TV_series ON TV_Channel.id = TV_series.Channel  WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT series_name FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = "Sky Radio";
SELECT Episode FROM TV_series WHERE Channel = 'Sky Radio';
SELECT Directed_by, COUNT(*)  FROM Cartoon  GROUP BY Directed_by;
SELECT Directed_by, COUNT(*)  FROM Cartoon  GROUP BY Directed_by;
SELECT Production_code, Channel FROM Cartoon WHERE Air_Date = (SELECT MAX(Air_Date) FROM Cartoon);
SELECT Production_code, Channel FROM Cartoon WHERE Air_Date = (SELECT MAX(Air_Date) FROM Cartoon)
SELECT TV_Channel.Package_Option, TV_Channel.series_name  FROM TV_Channel  WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_Channel.series_name  FROM TV_Channel  WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT DISTINCT TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Written_by = 'Todd Casey';
SELECT DISTINCT TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Written_by = 'Todd Casey';
SELECT DISTINCT TV_Channel.Country  FROM TV_Channel  WHERE TV_Channel.id NOT IN (     SELECT Cartoon.Channel      FROM Cartoon      WHERE Cartoon.Written_by = 'Todd Casey' );
SELECT DISTINCT Country  FROM TV_Channel  WHERE id NOT IN (     SELECT Channel      FROM Cartoon      WHERE Written_by = 'Todd Casey' );
SELECT TV_Channel.series_name, TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT TV_Channel.series_name, TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Directed_by = 'Ben Jones'  UNION  SELECT TV_Channel.series_name, TV_Channel.Country  FROM TV_Channel  JOIN Cartoon ON TV_Channel.id = Cartoon.Channel  WHERE Cartoon.Directed_by = 'Michael Chang';
SELECT Pixel_aspect_ratio_PAR, Country  FROM TV_Channel  WHERE Language != 'English';
SELECT Pixel_aspect_ratio_PAR, Country  FROM TV_Channel  WHERE Language != 'English';
Error: 第 7642 个样本有 2 个SQL。
SELECT id  FROM TV_Channel  GROUP BY id  HAVING COUNT(id) > 2;
SELECT tv.id  FROM TV_Channel tv  LEFT JOIN Cartoon c ON tv.id = c.Channel  WHERE c.Directed_by != 'Ben Jones' OR c.Directed_by IS NULL GROUP BY tv.id  HAVING COUNT(c.id) = 0;
SELECT id  FROM TV_Channel  WHERE id NOT IN (SELECT Channel                  FROM Cartoon                  WHERE Directed_by = 'Ben Jones');
SELECT Package_Option  FROM TV_Channel  WHERE id NOT IN (     SELECT Channel      FROM Cartoon      WHERE Directed_by = 'Ben Jones' );
SELECT DISTINCT TV_Channel.Package_Option  FROM TV_Channel  WHERE TV_Channel.id NOT IN (     SELECT Cartoon.Channel      FROM Cartoon      WHERE Cartoon.Directed_by = 'Ben Jones' );
SELECT COUNT(*) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT Earnings  FROM poker_player  ORDER BY Earnings DESC;
SELECT Earnings  FROM poker_player  ORDER BY Earnings DESC;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT Poker_Player.Poker_Player_ID, People.Name, Poker_Player.Final_Table_Made, Poker_Player.Best_Finish  FROM poker_player AS Poker_Player  JOIN people AS People ON Poker_Player.People_ID = People.People_ID;
SELECT AVG(Earnings) FROM poker_player;
SELECT AVG(Earnings)  FROM poker_player;
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT MAX(T1.Final_Table_Made)  FROM poker_player AS T1  JOIN people AS T2 ON T1.People_ID = T2.People_ID  WHERE T1.Earnings < 200000;
SELECT MAX(Final_Table_Made)  FROM poker_player  WHERE Earnings < 200000;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;
SELECT p.Birth_Date  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID  WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);
SELECT p.Birth_Date  FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID  WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);
SELECT p1.Money_Rank FROM poker_player p1 JOIN ( SELECT p2.People_ID FROM people p2 JOIN poker_player p3 ON p2.People_ID = p3.People_ID WHERE p2.Height = (  SELECT MAX(p4.Height) FROM people p4 JOIN poker_player p5 ON p4.People_ID = p5.People_ID ) ) t ON p1.People_ID = t.People_ID;
SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = (SELECT MAX(Height) FROM people)
SELECT AVG(T1.Earnings)  FROM poker_player AS T1  JOIN people AS T2 ON T1.People_ID = T2.People_ID  WHERE T2.Height > 200;
SELECT AVG(T1.Earnings)  FROM poker_player AS T1  JOIN people AS T2  ON T1.People_ID = T2.People_ID  WHERE T2.Height > 200;
SELECT people.Name  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY poker_player.Earnings DESC;
SELECT people.Name  FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY poker_player.Earnings DESC;
SELECT Nationality, COUNT(*) as NumberOfPeople  FROM people  GROUP BY Nationality;
SELECT Nationality, COUNT(*)  FROM people  GROUP BY Nationality;
SELECT Nationality, COUNT(*) as count  FROM people  GROUP BY Nationality  ORDER BY count DESC  LIMIT 1;
SELECT Nationality, COUNT(*) as count  FROM people  GROUP BY Nationality  ORDER BY count DESC  LIMIT 1;
SELECT Nationality  FROM people  GROUP BY Nationality  HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2;
SELECT Name, Birth_Date  FROM people  ORDER BY Name ASC;
SELECT people.Name, people.Birth_Date  FROM people  ORDER BY people.Name ASC;
SELECT Name  FROM people  WHERE Nationality != 'Russia';
SELECT Name  FROM people  WHERE Nationality != 'Russia';
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT Name  FROM people  WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT C.contestant_number, C.contestant_name  FROM CONTESTANTS C ORDER BY C.contestant_name DESC;
SELECT vote_id, phone_number, state FROM VOTES;
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;
Error: 第 7692 个样本有 2 个SQL。
SELECT contestant_name  FROM CONTESTANTS  WHERE contestant_name != 'Jessie Alloway';
SELECT DISTINCT state, created FROM VOTES;
SELECT C.contestant_number, CN.contestant_name  FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number JOIN CONTESTANTS CN ON C.contestant_number = CN.contestant_number GROUP BY C.contestant_number, CN.contestant_name HAVING COUNT(V.vote_id) >= 2;
SELECT C.contestant_number, C.contestant_name  FROM CONTESTANTS C JOIN VOTES V ON C.contestant_number = V.contestant_number  GROUP BY C.contestant_number, C.contestant_name  ORDER BY COUNT(V.vote_id)  LIMIT 1;
SELECT COUNT(*)  FROM VOTES  WHERE state IN ('NY', 'CA');
SELECT COUNT(*)  FROM CONTESTANTS  WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT ac.area_code, COUNT(v.vote_id) as vote_count FROM AREA_CODE_STATE ac JOIN VOTES v ON ac.state = v.state GROUP BY ac.area_code ORDER BY vote_count DESC LIMIT 1;
SELECT V.created, V.state, V.phone_number  FROM VOTES V  JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number  WHERE C.contestant_name = 'Tabatha Gehling'
SELECT DISTINCT acs.area_code  FROM AREA_CODE_STATE acs JOIN VOTES v1 ON acs.area_code = SUBSTRING(v1.phone_number, 1, 3) JOIN VOTES v2 ON acs.area_code = SUBSTRING(v2.phone_number, 1, 3) JOIN CONTESTANTS c1 ON v1.contestant_number = c1.contestant_number JOIN CONTESTANTS c2 ON v2.contestant_number = c2.contestant_number WHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss' AND v1.created < v2.created;
SELECT contestant_name  FROM CONTESTANTS  WHERE contestant_name LIKE '%Al%';
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%';
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT SUM(SurfaceArea)  FROM country  WHERE Region = 'Caribbean';
SELECT Continent FROM country WHERE Name = 'Anguilla';
SELECT Continent FROM country WHERE Name = 'Anguilla';
SELECT T2.Region FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Kabul'
SELECT T2.Region FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Kabul'
SELECT T2.Language  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T1.Name = 'Aruba'  ORDER BY T2.Percentage DESC  LIMIT 1;
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' AND T2.IsOfficial = 'T';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT T1.Region, T1.Population FROM country AS T1 WHERE T1.Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT AVG(LifeExpectancy)  FROM country  WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' ORDER BY T1.LifeExpectancy ASC LIMIT 1;
SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' ORDER BY T1.LifeExpectancy ASC LIMIT 1;
Error: 第 7723 个样本有 2 个SQL。
SELECT SUM(Population) AS Total_Population, MAX(GNP) AS Max_GNP  FROM country  WHERE Continent = 'Asia';
SELECT AVG(LifeExpectancy)  FROM country  WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';
SELECT AVG(LifeExpectancy)  FROM country  WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';
SELECT SUM(SurfaceArea)  FROM country  WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea)  FROM country  WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
SELECT AVG(GNP), SUM(Population)  FROM country  WHERE GovernmentForm = 'US Territory';
Error: 第 7732 个样本有 2 个SQL。
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm)  FROM country  WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm)  FROM country  WHERE Continent = 'Africa';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(T2.Language) DESC LIMIT 1;
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(T2.Language) DESC LIMIT 1;
SELECT T1.Continent  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Continent  ORDER BY COUNT(DISTINCT T2.Language) DESC  LIMIT 1;
SELECT C.Continent, COUNT(DISTINCT L.Language) AS NumberOfLanguages FROM country AS C JOIN countrylanguage AS L ON C.Code = L.CountryCode GROUP BY C.Continent ORDER BY NumberOfLanguages DESC LIMIT 1;
SELECT COUNT(*)  FROM (   SELECT CountryCode    FROM countrylanguage    WHERE Language = 'English'    INTERSECT    SELECT CountryCode    FROM countrylanguage    WHERE Language = 'Dutch' )
Error: 第 7746 个样本有 2 个SQL。
SELECT cl1.Name  FROM country AS cl1  JOIN countrylanguage AS cl2 ON cl1.Code = cl2.CountryCode  WHERE cl2.Language = 'English'  GROUP BY cl1.Name  HAVING COUNT(cl2.Language) > 1  INTERSECT  SELECT cl1.Name  FROM country AS cl1  JOIN countrylanguage AS cl3 ON cl1.Code = cl3.CountryCode  WHERE cl3.Language = 'French'  GROUP BY cl1.Name  HAVING COUNT(cl3.Language) > 1;
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'
SELECT cl1.CountryCode FROM countrylanguage cl1  JOIN countrylanguage cl2 ON cl1.CountryCode = cl2.CountryCode  WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T'  AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'French') AND T2.IsOfficial = 'T' GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Language) = 2;
SELECT COUNT(DISTINCT T1.Continent)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T2.Language = 'Chinese'
SELECT COUNT(DISTINCT c.Continent)  FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese';
SELECT DISTINCT c.Region  FROM country AS c  JOIN countrylanguage AS cl ON c.Code = cl.CountryCode  WHERE cl.Language IN ('English', 'Dutch');
Error: 第 7754 个样本有 2 个SQL。
SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.IsOfficial = 'T' AND (cl.Language = 'English' OR cl.Language = 'Dutch');
SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.IsOfficial = 'T' AND (cl.Language = 'English' OR cl.Language = 'Dutch');
SELECT T3.Language, SUM(T2.Population) AS Total_Population  FROM country AS T1  JOIN city AS T2 ON T1.Code = T2.CountryCode  JOIN countrylanguage AS T3 ON T1.Code = T3.CountryCode  WHERE T1.Continent = 'Asia' AND T3.IsOfficial = 'T'  GROUP BY T3.Language  ORDER BY Total_Population DESC  LIMIT 1;
SELECT T2.Language  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T1.Continent = 'Asia'  GROUP BY T2.Language  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm LIKE '%Republic%' GROUP BY cl.Language HAVING COUNT(*) = 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(cl.CountryCode) = 1;
SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1;
SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1;
SELECT T1.Name, T1.Population, T1.LifeExpectancy  FROM country AS T1  WHERE T1.Continent = 'Asia'  ORDER BY T1.SurfaceArea DESC  LIMIT 1;
SELECT T1.Name, T1.Population, T1.LifeExpectancy  FROM country AS T1  WHERE T1.Region = 'Asia' AND T1.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Region = 'Asia');
SELECT AVG(LifeExpectancy)  FROM country  WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
SELECT AVG(LifeExpectancy)  FROM country  WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'English')
SELECT SUM(c.Population)  FROM country c  LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode  WHERE cl.Language != 'English' OR cl.Language IS NULL;
SELECT SUM(Population)  FROM country  WHERE Code NOT IN (     SELECT CountryCode      FROM countrylanguage      WHERE Language = 'English' );
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T';
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.Language)  FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT T2.Language)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T1.IndepYear < 1930 AND T2.IsOfficial = 'T';
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT c.Name  FROM country AS c  WHERE c.Continent = 'Africa' AND c.Population < ALL (     SELECT c2.Population      FROM country AS c2      WHERE c2.Continent = 'Asia' )
SELECT c1.Name  FROM country AS c1  WHERE c1.Continent = 'Africa'  AND (     SELECT MAX(c2.Population)      FROM country AS c2      WHERE c2.Continent = 'Asia' ) > c1.Population;
SELECT c.Name  FROM country AS c  WHERE c.Continent = 'Asia'  AND c.Population > ALL (     SELECT c2.Population      FROM country AS c2      WHERE c2.Continent = 'Africa' )
SELECT c.Name  FROM country AS c  WHERE c.Continent = 'Asia'  AND c.Population > ALL (     SELECT c2.Population      FROM country AS c2      WHERE c2.Continent = 'Africa' )
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English'
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English'
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English'
SELECT Code FROM country WHERE Name NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic';
SELECT Code FROM country WHERE GovernmentForm != 'Republic' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'T';
SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = 'Europe' AND T3.IsOfficial = 'F' AND T3.Language = 'English';
SELECT DISTINCT c.Name  FROM city c  JOIN country co ON c.CountryCode = co.Code  JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode  WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Name  FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T';
SELECT Name, IndepYear, SurfaceArea  FROM country  WHERE Population = (SELECT MIN(Population) FROM country);
SELECT T1.Name, T1.IndepYear, T1.SurfaceArea  FROM country AS T1  JOIN(SELECT Code FROM country ORDER BY Population ASC LIMIT 1) AS T2  ON T1.Code = T2.Code;
SELECT T1.Name, T1.Population, T1.HeadOfState FROM country AS T1 WHERE T1.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT T1.Name, T1.Population, T1.HeadOfState  FROM country AS T1  WHERE T1.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT T1.Name, COUNT(T2.Language)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Name  HAVING COUNT(T2.Language) >= 3;
SELECT T1.Name, COUNT(T2.Language) AS NumLanguages FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Code HAVING NumLanguages > 2;
SELECT District, COUNT(*) AS CityCount FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
SELECT District, COUNT(*)  FROM city  WHERE Population > (SELECT AVG(Population) FROM city)  GROUP BY District;
SELECT T1.GovernmentForm, SUM(T1.Population) AS TotalPopulation  FROM country AS T1  JOIN (     SELECT GovernmentForm      FROM country      GROUP BY GovernmentForm      HAVING AVG(LifeExpectancy) > 72 ) AS T2 ON T1.GovernmentForm = T2.GovernmentForm  GROUP BY T1.GovernmentForm;
SELECT T1.GovernmentForm, SUM(T1.Population) AS TotalPopulation  FROM country AS T1  JOIN (     SELECT DISTINCT GovernmentForm      FROM country      WHERE LifeExpectancy > 72 ) AS T2 ON T1.GovernmentForm = T2.GovernmentForm  GROUP BY T1.GovernmentForm;
SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExp, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AvgLifeExp < 72;
SELECT Continent, SUM(Population) as TotalPopulation, AVG(LifeExpectancy) as AvgLifeExpectancy FROM country GROUP BY Continent HAVING AvgLifeExpectancy < 72;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT T2.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT T1.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Europe' AND T2.Population = 80000;
SELECT T1.Name FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Europe' AND T2.Population = 80000;
SELECT SUM(Population) AS Total_Population, AVG(SurfaceArea) AS Average_Area  FROM country  WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT SUM(Population) as Total_Population, AVG(SurfaceArea) as Average_SurfaceArea  FROM country  WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T2.Language ORDER BY COUNT(T1.Code) DESC LIMIT 1;
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T2.Language ORDER BY COUNT(T1.Code) DESC LIMIT 1
SELECT CL.CountryCode, CL.Language, MAX(CL.Percentage) as Max_Percentage FROM countrylanguage CL JOIN (   SELECT CountryCode, MAX(Percentage) as MaxPerc   FROM countrylanguage   GROUP BY CountryCode ) T ON CL.CountryCode = T.CountryCode AND CL.Percentage = T.MaxPerc GROUP BY CL.CountryCode;
SELECT CL.CountryCode, CL.Language  FROM countrylanguage CL  JOIN (   SELECT CountryCode, MAX(Percentage) as MaxPercentage    FROM countrylanguage    GROUP BY CountryCode ) CL2  ON CL.CountryCode = CL2.CountryCode AND CL.Percentage = CL2.MaxPercentage;
SELECT COUNT(*)  FROM (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'Spanish' AND Percentage = (     SELECT MAX(Percentage)     FROM countrylanguage     WHERE Language = 'Spanish'   ) );
SELECT COUNT(*) FROM countrylanguage WHERE Language='Spanish' AND IsOfficial='T';
SELECT cl.CountryCode  FROM countrylanguage cl  WHERE cl.Language = 'Spanish'  ORDER BY cl.Percentage DESC  LIMIT 1;
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age;
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Record_Company  FROM orchestra  ORDER BY Year_of_Founded DESC;
SELECT Record_Company  FROM orchestra  ORDER BY Year_of_Founded DESC;
SELECT AVG(Attendance) FROM show;
SELECT AVG(Attendance) FROM show;
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share  FROM performance  WHERE Type != 'Live final';
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share  FROM performance  WHERE Type != 'Live final';
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name  FROM conductor  ORDER BY Year_of_Work DESC;
SELECT Name  FROM conductor  ORDER BY Year_of_Work DESC  LIMIT 1;
SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor);
SELECT conductor.Name, orchestra.Orchestra  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra  FROM conductor  JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(o.Orchestra_ID) > 1;
SELECT c.Name  FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(o.Orchestra_ID) > 1;
SELECT T1.Name  FROM conductor AS T1  JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Conductor_ID  ORDER BY COUNT(T2.Orchestra_ID) DESC  LIMIT 1;
SELECT T1.Name  FROM conductor AS T1  JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T1.Conductor_ID  ORDER BY COUNT(T2.Orchestra_ID) DESC  LIMIT 1;
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008;
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008;
SELECT Record_Company, COUNT(Orchestra_ID)  FROM orchestra  GROUP BY Record_Company;
SELECT Record_Company, COUNT(Orchestra_ID)  FROM orchestra  GROUP BY Record_Company;
SELECT Major_Record_Format, COUNT(*)  FROM orchestra  GROUP BY Major_Record_Format  ORDER BY COUNT(*) ASC;
SELECT T1.Major_Record_Format, COUNT(*) AS Frequency  FROM orchestra AS T1  GROUP BY T1.Major_Record_Format  ORDER BY Frequency DESC;
SELECT Record_Company  FROM orchestra  GROUP BY Record_Company  ORDER BY COUNT(Orchestra_ID) DESC  LIMIT 1;
SELECT Record_Company  FROM orchestra  GROUP BY Record_Company  ORDER BY COUNT(Orchestra_ID) DESC  LIMIT 1;
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT Record_Company  FROM orchestra  WHERE Year_of_Founded < 2003  INTERSECT  SELECT Record_Company  FROM orchestra  WHERE Year_of_Founded > 2003;
SELECT Record_Company  FROM orchestra  WHERE Year_of_Founded < 2003  INTERSECT  SELECT Record_Company  FROM orchestra  WHERE Year_of_Founded > 2003;
SELECT COUNT(*)  FROM orchestra  WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(*)  FROM orchestra  WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT T2.Year_of_Founded  FROM performance AS T1  JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID  GROUP BY T2.Year_of_Founded  HAVING COUNT(T1.Performance_ID) > 1
SELECT T2.Year_of_Founded  FROM performance AS T1  JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID  GROUP BY T1.Orchestra_ID  HAVING COUNT(T1.Performance_ID) > 1;
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT DISTINCT grade FROM Highschooler;
SELECT grade FROM Highschooler;
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT grade, COUNT(*) AS num_highschoolers  FROM Highschooler  GROUP BY grade;
SELECT grade, COUNT(*) AS num_students  FROM Highschooler  GROUP BY grade;
SELECT grade, COUNT(*) as num_students  FROM Highschooler  GROUP BY grade  ORDER BY num_students DESC  LIMIT 1;
SELECT grade  FROM Highschooler  GROUP BY grade  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT grade  FROM Highschooler  GROUP BY grade  HAVING COUNT(ID) >= 4;
SELECT grade  FROM Highschooler  GROUP BY grade  HAVING COUNT(ID) >= 4;
SELECT T1.student_id, COUNT(T2.friend_id)  FROM network_1.Highschooler AS T1  LEFT JOIN network_1.Friend AS T2 ON T1.ID = T2.student_id  GROUP BY T1.student_id;
SELECT T1.name, COUNT(T2.friend_id) AS NumberOfFriends  FROM Highschooler T1  LEFT JOIN Friend T2 ON T1.ID = T2.student_id  GROUP BY T1.ID;
SELECT H.name, COUNT(F.friend_id) as NumOfFriends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.name;
SELECT H.name, COUNT(F.friend_id) as Num_of_Friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.name;
SELECT H.name  FROM Highschooler H  JOIN Friend F ON H.ID = F.student_id  GROUP BY H.name  ORDER BY COUNT(F.friend_id) DESC  LIMIT 1;
SELECT H.name  FROM Highschooler H  JOIN Friend F ON H.ID = F.student_id  GROUP BY H.name  ORDER BY COUNT(F.friend_id) DESC  LIMIT 1;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.name HAVING COUNT(F.friend_id) >= 3;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.name HAVING COUNT(F.friend_id) >= 3;
SELECT H.name  FROM Highschooler H  JOIN Friend F ON H.ID = F.friend_id  WHERE F.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT H.name  FROM Highschooler AS H  JOIN Friend AS F ON H.ID = F.friend_id  WHERE F.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(*)  FROM Friend  WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(*)  FROM Friend  WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT ID  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT H.ID  FROM Highschooler H  LEFT JOIN Friend F ON H.ID = F.student_id  WHERE F.student_id IS NULL;
SELECT H.name  FROM Highschooler H  LEFT JOIN Friend F ON H.ID = F.student_id  WHERE F.student_id IS NULL;
Error: 第 7898 个样本有 2 个SQL。
SELECT H.ID  FROM Highschooler H  WHERE EXISTS (     SELECT 1      FROM Friend F      WHERE F.student_id = H.ID )  AND EXISTS (     SELECT 1      FROM Likes L      WHERE L.student_id = H.ID );
SELECT student_id FROM Friend  INTERSECT  SELECT student_id FROM Likes;
SELECT H.name  FROM Highschooler H  JOIN Friend F ON H.ID = F.student_id  JOIN Likes L ON H.ID = L.student_id;
SELECT H.name  FROM Highschooler H  WHERE EXISTS (     SELECT 1      FROM Friend F      WHERE F.student_id = H.ID )  AND EXISTS (     SELECT 1      FROM Likes L      WHERE L.student_id = H.ID );
SELECT student_id, COUNT(*) as num_likes FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(*) as num_likes  FROM Likes  GROUP BY student_id;
SELECT H.name, COUNT(L.liked_id) AS Num_Likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name;
SELECT H.name, COUNT(L.liked_id) AS num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name;
SELECT H.name  FROM Highschooler H  JOIN Likes L ON H.ID = L.student_id  GROUP BY H.name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT H.name  FROM Highschooler H  JOIN Likes L ON H.ID = L.student_id  GROUP BY H.name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT H.name  FROM Highschooler H  JOIN Likes L ON H.ID = L.student_id  GROUP BY H.name  HAVING COUNT(L.liked_id) >= 2;
SELECT H.name  FROM Highschooler H  JOIN Likes L ON H.ID = L.student_id  GROUP BY H.name  HAVING COUNT(L.liked_id) >= 2;
SELECT H.name  FROM Highschooler H  JOIN Friend F ON H.ID = F.student_id  GROUP BY H.ID, H.name  HAVING COUNT(F.friend_id) >= 2 AND H.grade > 5;
SELECT H.name  FROM Highschooler H  JOIN Friend F ON H.ID = F.student_id  WHERE H.grade > 5  GROUP BY H.ID, H.name  HAVING COUNT(F.friend_id) >= 2;
SELECT COUNT(*)  FROM Likes  WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(*)  FROM Likes  JOIN Highschooler ON Likes.student_id = Highschooler.ID  WHERE Highschooler.name = 'Kyle';
SELECT AVG(T1.grade)  FROM Highschooler T1  JOIN Friend T2  ON T1.ID = T2.student_id;
SELECT AVG(H.grade) FROM Highschooler H JOIN Friend F ON H.ID = F.student_id
SELECT MIN(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade)  FROM Highschooler  WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT      state FROM      Owners INTERSECT SELECT      state FROM      Professionals
Error: 第 7920 个样本有 2 个SQL。
SELECT AVG(age)  FROM Dogs  WHERE dog_id IN (SELECT dog_id FROM Treatments);
SELECT AVG(age)  FROM Dogs  WHERE dog_id IN (SELECT dog_id FROM Treatments);
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p WHERE p.state = 'Indiana' OR (     SELECT COUNT(*)     FROM Treatments t     WHERE t.professional_id = p.professional_id ) > 2;
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p WHERE p.state = 'Indiana' OR (     SELECT COUNT(*)     FROM Treatments t     WHERE t.professional_id = p.professional_id ) > 2;
SELECT D.name FROM Dogs D LEFT JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.name HAVING SUM(T.cost_of_treatment) <= 1000 OR T.dog_id IS NULL;
SELECT D.name  FROM Dogs D  LEFT JOIN Treatments T ON D.dog_id = T.dog_id  LEFT JOIN Charges C ON C.charge_id = T.cost_of_treatment  WHERE D.owner_id IN (     SELECT O.owner_id      FROM Owners O      WHERE O.owner_id NOT IN (         SELECT T.dog_id          FROM Treatments T          JOIN Charges C ON T.cost_of_treatment = C.charge_id          GROUP BY T.dog_id          HAVING SUM(C.charge_amount) > 1000     ) ) GROUP BY D.name;
Error: 第 7927 个样本有 2 个SQL。
SELECT DISTINCT first_name  FROM (SELECT first_name FROM Professionals        UNION        SELECT first_name FROM Owners)  WHERE first_name NOT IN (SELECT name FROM Dogs);
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;
SELECT O.owner_id, O.first_name, O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id GROUP BY O.owner_id, O.first_name, O.last_name ORDER BY COUNT(D.dog_id) DESC LIMIT 1;
SELECT O.owner_id, O.first_name, O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id GROUP BY O.owner_id, O.first_name, O.last_name ORDER BY COUNT(D.dog_id) DESC LIMIT 1;
SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2;
SELECT p.professional_id, p.role_code, p.first_name  FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2;
SELECT b.breed_name  FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT B.breed_name FROM Breeds B JOIN Dogs D ON B.breed_code = D.breed_code GROUP BY B.breed_name ORDER BY COUNT(D.dog_id) DESC LIMIT 1;
SELECT O.owner_id, O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name ORDER BY COUNT(T.treatment_id) DESC LIMIT 1;
SELECT O.owner_id, O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1;
SELECT T1.treatment_type_description  FROM Treatment_Types AS T1  JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code  GROUP BY T1.treatment_type_description  ORDER BY SUM(T2.cost_of_treatment)  LIMIT 1;
SELECT T1.treatment_type_description  FROM Treatment_Types T1  JOIN Treatments T2 ON T1.treatment_type_code = T2.treatment_type_code  GROUP BY T1.treatment_type_description  ORDER BY SUM(T2.cost_of_treatment)  LIMIT 1;
SELECT O.owner_id, O.zip_code FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.zip_code ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1;
SELECT O.owner_id, O.zip_code FROM Owners O WHERE O.owner_id = (     SELECT D.owner_id     FROM Dogs D     JOIN Treatments T ON D.dog_id = T.dog_id     JOIN Charges C ON T.treatment_type_code = C.charge_id     GROUP BY D.owner_id     ORDER BY SUM(C.charge_amount) DESC     LIMIT 1 );
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
SELECT p.professional_id, p.cell_number  FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
SELECT P.first_name, P.last_name  FROM Professionals P  JOIN Treatments T ON P.professional_id = T.professional_id  WHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT P.first_name, P.last_name  FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id  WHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT T.date_of_treatment, P.first_name  FROM Treatments T  JOIN Professionals P ON T.professional_id = P.professional_id;
SELECT T.date_of_treatment, P.first_name  FROM Treatments AS T  JOIN Professionals AS P ON T.professional_id = P.professional_id;
SELECT TREATMENTS.cost_of_treatment, TREATMENT_TYPES.treatment_type_description  FROM Treatments  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT TREATMENTS.cost_of_treatment, TREATMENT_TYPES.treatment_type_description  FROM Treatments  JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT O.first_name, O.last_name, S.size_description  FROM Owners O  JOIN Dogs D ON O.owner_id = D.owner_id  JOIN Sizes S ON D.size_code = S.size_code;
SELECT Owners.first_name, Dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT D.name, T.date_of_treatment  FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id WHERE D.breed_code = (     SELECT B.breed_code      FROM Breeds B     JOIN Dogs DB ON B.breed_code = DB.breed_code     GROUP BY B.breed_code      HAVING COUNT(DB.dog_id) = (         SELECT MIN(DOUBT_count)         FROM (             SELECT COUNT(dog_id) AS DOUBT_count             FROM Dogs             GROUP BY breed_code         ) AS DCOUNT     ) );
SELECT D.name, T.date_of_treatment  FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id WHERE D.breed_code IN (     SELECT B.breed_code      FROM Breeds B     GROUP BY B.breed_code     HAVING COUNT(B.breed_code) = (         SELECT MIN(breed_count)         FROM (             SELECT COUNT(breed_code) AS breed_count             FROM Dogs             GROUP BY breed_code         ) AS BC     ) );
SELECT Owners.first_name, Dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  WHERE Owners.state = 'Virginia';
SELECT Owners.first_name, Dogs.name  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  WHERE Owners.state = 'Virginia';
SELECT d.date_arrived, d.date_departed  FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.date_departed IS NOT NULL;
SELECT d.date_arrived, d.date_departed  FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT O.last_name  FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id  WHERE D.date_of_birth = (SELECT MIN(date_of_birth) FROM Dogs);
Error: 第 7962 个样本有 2 个SQL。
SELECT email_address  FROM Professionals  WHERE state IN ('HI', 'WI');
SELECT email_address  FROM Professionals  WHERE state IN ('Hawaii', 'Wisconsin');
SELECT date_arrived, date_departed FROM Dogs;
SELECT date_arrived, date_departed FROM Dogs;
SELECT COUNT(DISTINCT d.dog_id)  FROM Dogs d  JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT COUNT(DISTINCT d.dog_id)  FROM Dogs d  JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT COUNT(DISTINCT professional_id)  FROM Treatments;
SELECT COUNT(DISTINCT professional_id)  FROM Treatments;
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%';
SELECT role_code, street, city, state  FROM Professionals  WHERE city LIKE '%West%';
SELECT first_name, last_name, email_address  FROM Owners  WHERE state LIKE '%North%';
SELECT first_name, last_name, email_address  FROM Owners  WHERE state LIKE '%North%';
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT COUNT(*)  FROM Dogs  WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)
SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments);
SELECT COUNT(*)  FROM Dogs  WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(*)  FROM Dogs  WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(*)  FROM Owners  WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL);
SELECT COUNT(*)  FROM Owners  WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE (date_departed IS NULL OR date_adopted IS NULL))
SELECT COUNT(*)  FROM Professionals  WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT COUNT(*)  FROM Professionals  WHERE professional_id NOT IN (SELECT professional_id FROM Treatments) ;
SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = 1;
SELECT name, age, weight  FROM Dogs  WHERE abandoned_yn = 1;
SELECT AVG(age) FROM Dogs;
SELECT AVG(age) FROM Dogs;
SELECT MAX(age) FROM Dogs;
SELECT MAX(age) FROM Dogs;
SELECT charge_type, charge_amount  FROM Charges;
SELECT charge_type, charge_amount  FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT Breeds.breed_name, Sizes.size_description  FROM Breeds, Sizes;
SELECT DISTINCT B.breed_name, S.size_description  FROM Breeds B JOIN Dogs D ON B.breed_code = D.breed_code JOIN Sizes S ON D.size_code = S.size_code;
SELECT P.first_name, TT.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;
SELECT P.first_name, TT.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name  FROM singer  ORDER BY Net_Worth_Millions ASC;
SELECT Name  FROM singer  ORDER BY Net_Worth_Millions ASC;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship <> 'France';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name  FROM singer  WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);
SELECT Citizenship, COUNT(*)  FROM singer  GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS Count  FROM singer  GROUP BY Citizenship  ORDER BY Count DESC  LIMIT 1;
SELECT Citizenship, COUNT(*) AS Count  FROM singer  GROUP BY Citizenship  ORDER BY Count DESC  LIMIT 1;
SELECT Citizenship, MAX(Net_Worth_Millions)  FROM singer  GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions)  FROM singer  GROUP BY Citizenship;
SELECT song.Title, singer.Name  FROM song  JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name  FROM song  JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT DISTINCT s.Name  FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000;
SELECT DISTINCT s.Name  FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000;
SELECT s.Name  FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Singer_ID, s.Name HAVING COUNT(sg.Song_ID) > 1;
SELECT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Singer_ID, s.Name HAVING COUNT(sg.Song_ID) > 1;
SELECT s.Name, SUM(so.Sales)  FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name;
SELECT s.Name, SUM(so.Sales)  FROM singer s  JOIN song so ON s.Singer_ID = so.Singer_ID  GROUP BY s.Name;
SELECT Name  FROM singer  WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
SELECT Name  FROM singer  WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
SELECT      Citizenship  FROM      singer  WHERE      Birth_Year < 1945  INTERSECT  SELECT      Citizenship  FROM      singer  WHERE      Birth_Year > 1955;
SELECT      Citizenship  FROM      singer  WHERE      Birth_Year < 1945  INTERSECT  SELECT      Citizenship  FROM      singer  WHERE      Birth_Year > 1955;
SELECT COUNT(*) FROM Other_Available_Features;
SELECT feature_type_name  FROM Ref_Feature_Types  WHERE feature_type_code = (SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon');
SELECT Ref_Property_Types.property_type_description  FROM Properties  INNER JOIN Ref_Property_Types  ON Properties.property_type_code = Ref_Property_Types.property_type_code;
SELECT p.property_name  FROM Properties p JOIN Ref_Property_Types r ON p.property_type_code = r.property_type_code  WHERE (r.property_type_description = 'House' OR r.property_type_description = 'Apartment') AND p.room_count > 1;
