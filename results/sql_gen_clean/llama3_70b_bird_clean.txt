SELECT movie_title FROM movies WHERE movie_release_year = 1945 ORDER BY movie_popularity DESC;
SELECT movie_title, movie_release_year, director_name FROM movies WHERE movie_popularity = (SELECT MAX(movie_popularity) FROM movies);
SELECT movie_title, movie_release_year FROM movies ORDER BY LENGTH(movie_title) DESC LIMIT 1;
SELECT movie_title FROM movies WHERE movie_id = (   SELECT movie_id   FROM ratings   GROUP BY movie_id   ORDER BY SUM(rating_score) DESC   LIMIT 1 );
SELECT AVG(m.movie_popularity)  FROM movies m  WHERE m.director_name = 'Stanley Kubrick';
SELECT AVG(r.rating_score)  FROM ratings r  JOIN movies m ON r.movie_id = m.movie_id  WHERE m.movie_title = 'When Will I Be Loved';
SELECT ru.user_avatar_image_url, m.movie_title FROM ratings_users ru JOIN ratings r ON ru.user_id = r.user_id JOIN movies m ON r.movie_id = m.movie_id WHERE ru.user_id = 41579158 ORDER BY r.rating_date_utc DESC LIMIT 1;
SELECT    DIVIDE(SUM(CASE WHEN r.user_subscriber = 1 THEN 1 ELSE 0 END), COUNT(*)) * 100 AS percent FROM    ratings r;
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id JOIN ratings_users ru ON r.user_id = ru.user_id WHERE r.rating_timestamp_utc LIKE '%2020-04-%' AND ru.user_trialist = 1;
SELECT ru.user_id, ru.user_avatar_image_url FROM ratings r JOIN ratings_users ru ON r.user_id = ru.user_id JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'Love Will Tear Us Apart' AND r.rating_score = 1;
SELECT m.movie_title, m.movie_popularity FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.rating_score = 5;
SELECT m.movie_title FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.rating_timestamp_utc LIKE '%2020%' AND r.rating_score >= 4;
SELECT m.movie_title, ru.user_id, r.rating_score, r.critic_comments FROM movies m JOIN ratings r ON m.movie_id = r.movie_id JOIN ratings_users ru ON r.user_id = ru.user_id WHERE r.critic IS NOT NULL;
SELECT    (SUM(CASE WHEN rating_score = 5 THEN 1 ELSE 0 END) / COUNT(rating_score)) * 100  FROM    ratings  WHERE    movie_id IN (SELECT movie_id FROM movies WHERE movie_title = 'Welcome to the Dollhouse');
SELECT    DIVIDE(SUM(CASE WHEN m.movie_release_year = 2021 THEN 1 ELSE 0 END), COUNT(r.rating_id)) AS percent FROM    ratings r JOIN    movies m ON r.movie_id = m.movie_id;
SELECT director_name FROM movies WHERE movie_title = 'Sex, Drink and Bloodshed';
SELECT list_title FROM lists WHERE list_followers = (SELECT MAX(list_followers) FROM lists);
SELECT list_url FROM lists WHERE list_followers BETWEEN 1 AND 2 AND list_update_timestamp_utc BETWEEN '2012-1-1' AND '2012-12-31';
SELECT list_id FROM lists WHERE user_id = 85981819 ORDER BY list_creation_timestamp_utc ASC LIMIT 1;
SELECT COUNT(DISTINCT r.user_id) FROM ratings r WHERE r.movie_id = 1269 AND r.rating_score <= 2 AND r.user_has_payment_method = 1 AND r.user_eligible_for_trial = 1;
SELECT movie_title, movie_popularity FROM movies WHERE movie_release_year = 2021 AND director_name = 'Steven Spielberg';
SELECT movie_release_year, director_name FROM movies ORDER BY movie_release_year ASC LIMIT 1;
SELECT user_id FROM (   SELECT user_id   FROM lists_users   WHERE user_subscriber = 1 ) AS subscriber_lists WHERE user_id IN (   SELECT user_id   FROM (     SELECT user_id, EXTRACT(YEAR FROM list_creation_date_utc) AS year     FROM lists_users     WHERE user_subscriber = 1   ) AS subscriber_lists_year   GROUP BY user_id   HAVING COUNT(DISTINCT year) >= 10   AND MIN(year) + 9 <= MAX(year) )
SELECT COUNT(DISTINCT u.user_id) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id JOIN ratings_users u ON r.user_id = u.user_id WHERE m.movie_title = 'Pavee Lackeen: The Traveller Girl' AND r.rating_score = 4;
SELECT lu.user_eligible_for_trial, l.list_followers FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE l.list_title = 'World War 2 and Kids' AND lu.list_creation_date_utc = l.list_creation_timestamp_utc;
WITH ranked_movies AS (   SELECT movie_title, movie_release_year, director_name,          ROW_NUMBER() OVER (PARTITION BY director_name ORDER BY movie_release_year) AS rank   FROM movies   WHERE director_name = 'Quentin Tarantino' ) SELECT m.movie_release_year, r.user_id FROM ranked_movies m JOIN movies ON m.movie_title = movies.movie_title JOIN ratings ON movies.movie_id = ratings.movie_id WHERE m.rank = 3 AND ratings.rating_score = 4;
SELECT m.director_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.user_id = 2452551 AND r.critic_likes = 39;
SELECT AVG(r.rating_score) AS average_rating_score, m.director_name FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_title = 'When Will I Be Loved';
SELECT lu.user_subscriber, m.movie_title FROM lists_users lu JOIN lists l ON lu.list_id = l.list_id JOIN movies m ON l.list_id = m.movie_id WHERE l.list_movie_number = (SELECT MAX(list_movie_number) FROM lists);
SELECT m.movie_title FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.critic_likes = (SELECT MAX(critic_likes) FROM ratings);
SELECT    m.movie_title,    m.movie_popularity,    MIN(r.rating_timestamp_utc) AS first_rating_timestamp FROM    movies m    JOIN ratings r ON m.movie_id = r.movie_id WHERE    m.movie_release_year BETWEEN 1920 AND 1929    AND r.rating_score = 1    AND r.user_has_payment_method = 1 GROUP BY    m.movie_id, m.movie_title, m.movie_popularity ORDER BY    m.movie_popularity DESC LIMIT 1;
SELECT    m.movie_title,    m.movie_popularity,    MAX(r.critic_likes) AS max_critic_likes FROM    movies m    JOIN ratings r ON m.movie_id = r.movie_id WHERE    m.director_name = 'Francis Ford Coppola'    AND m.movie_popularity > 1000 GROUP BY    m.movie_title,    m.movie_popularity;
SELECT ru.user_avatar_image_url FROM ratings r JOIN ratings_users ru ON r.user_id = ru.user_id WHERE r.movie_id = 1103 AND r.rating_score = 5 AND r.rating_timestamp_utc = '2020-04-19';
SELECT    l.list_id,    l.list_title,    l.list_followers,    lu.user_subscriber FROM    lists l    JOIN lists_users lu ON l.list_id = lu.list_id  WHERE    l.user_id = 4208563    AND l.list_id = (     SELECT        list_id      FROM        lists      WHERE        user_id = 4208563      ORDER BY        list_followers DESC      LIMIT 1   );
SELECT    m.movie_release_year,    m.movie_title FROM    movies m    JOIN (     SELECT        movie_release_year      FROM        movies      GROUP BY        movie_release_year      ORDER BY        COUNT(movie_id)      LIMIT 1   ) y ON m.movie_release_year = y.movie_release_year    JOIN (     SELECT        movie_id      FROM        ratings      WHERE        rating_score = 1      GROUP BY        movie_id      ORDER BY        COUNT(rating_id) DESC      LIMIT 1   ) r ON m.movie_id = r.movie_id;
SELECT COUNT(DISTINCT r.user_id) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_release_year = 1924 AND m.director_name = 'Erich von Stroheim' AND r.rating_score = 5 AND r.user_has_payment_method = 1;
SELECT AVG(l.list_movie_number), ru.user_avatar_image_url FROM lists l JOIN ratings_users ru ON l.user_id = ru.user_id WHERE l.user_id = 8516503;
SELECT COUNT(DISTINCT r.user_id), r.rating_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'The Magnificent Ambersons' AND r.rating_score < 2;
WITH february_list_creators AS (   SELECT lu.user_id, lu.user_eligible_for_trial   FROM lists_users lu   JOIN lists l ON lu.list_id = l.list_id   WHERE l.list_creation_timestamp_utc BETWEEN '2016-02-01' AND '2016-02-29'   AND lu.user_eligible_for_trial = 1 ) SELECT COUNT(*) AS num_users FROM february_list_creators;  WITH february_list_creators AS (   SELECT l.user_id, l.list_followers   FROM lists l   WHERE l.list_creation_timestamp_utc BETWEEN '2016-02-01' AND '2016-02-29' ) SELECT user_id FROM february_list_creators ORDER BY list_followers DESC LIMIT 1;
SELECT r.rating_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'Riff-Raff' AND r.user_id = 22030372 ORDER BY r.rating_score DESC LIMIT 1;
SELECT    d.director_name,    m.movie_title FROM    movies m    JOIN (     SELECT        director_name,        director_id     FROM        movies      WHERE        movie_release_year BETWEEN 1960 AND 1985      GROUP BY        director_name,        director_id      HAVING        COUNT(director_name) > 10   ) d ON m.director_id = d.director_id   JOIN (     SELECT        movie_id,        MAX(rating_score) AS max_rating     FROM        ratings      GROUP BY        movie_id   ) r ON m.movie_id = r.movie_id AND r.max_rating = 5 ORDER BY    d.director_name;
SELECT COUNT(DISTINCT r.user_id) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'The South' AND r.rating_score < 2 AND r.user_trialist = 0;
SELECT critic_likes FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'Apocalypse Now' AND rating_score = 5;
SELECT AVG(r.rating_score) AS average_rating, m.director_name AS director FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_title = 'The Crowd' GROUP BY m.director_name;
WITH director_rank AS (   SELECT director_id, COUNT(*) AS num_movies   FROM movies   GROUP BY director_id   ORDER BY num_movies DESC   LIMIT 1 ), first_movie AS (   SELECT movie_release_year   FROM movies   WHERE director_id = (SELECT director_id FROM director_rank)   ORDER BY movie_release_year ASC   LIMIT 1 ), top_critic_comments AS (   SELECT user_id   FROM ratings   GROUP BY user_id   ORDER BY SUM(critic_comments) DESC   LIMIT 1 ) SELECT (SELECT MIN(movie_release_year) FROM first_movie) AS first_movie_release_year,        (SELECT user_id FROM top_critic_comments) AS top_critic_user_id;
SELECT m.movie_title, MAX(r.rating_score) AS highest_rating FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_popularity BETWEEN 400 AND 500 GROUP BY m.movie_title;
SELECT r.rating_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.user_id = 45579900 AND m.movie_title = 'The Vertical Ray of the Sun' AND r.critic_likes = '20';
SELECT    m.movie_title,    AVG(m.movie_popularity) AS avg_popularity,   (SELECT MAX(r.rating_score) FROM ratings r WHERE r.movie_id = m.movie_id AND r.rating_score = 5) AS max_5_rating FROM    movies m WHERE    m.director_name = 'Christopher Nolan' GROUP BY    m.movie_title ORDER BY    max_5_rating DESC LIMIT 1;
SELECT m.movie_title, AVG(r.rating_score) AS avg_rating FROM ratings r JOIN movies m ON r.movie_id = m.movie_id JOIN lists_users lu ON r.user_id = lu.user_id JOIN lists l ON lu.list_id = l.list_id WHERE l.list_title = '100 Greatest Living American Filmmakers' AND r.rating_timestamp_utc BETWEEN '2013-01-01' AND '2013-12-31' GROUP BY m.movie_title;
SELECT AVG(r.rating_score) AS average_rating, m.movie_release_year FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_title = 'Pavee Lackeen: The Traveller Girl' GROUP BY m.movie_release_year;
SELECT COUNT(*) FROM lists WHERE list_update_timestamp_utc > (list_creation_timestamp_utc + INTERVAL 10 YEAR);
SELECT list_description FROM lists WHERE list_title = 'Short and pretty damn sweet';
SELECT list_url FROM lists WHERE list_title = 'Short and pretty damn sweet';
SELECT COUNT(*) FROM lists WHERE list_update_timestamp_utc > '2010-01-01' AND list_followers > 200;
SELECT COUNT(*) FROM lists WHERE user_id = 83373278 AND user_subscriber = 1;
SELECT movie_release_year FROM movies WHERE movie_title = 'La Antena';
SELECT movie_url FROM movies WHERE movie_title = 'La Antena';
SELECT movie_title FROM movies WHERE movie_title IN ('The General', 'Il grido') ORDER BY movie_popularity DESC LIMIT 1;
SELECT COUNT(m.movie_id) FROM movies m WHERE m.director_name = 'Hong Sang-soo';
SELECT user_trialist FROM lists_users WHERE list_id IN (   SELECT list_id   FROM lists   WHERE list_title = '250 Favourite Films' ) AND list_creation_date_utc = list_update_date_utc;
SELECT list_title FROM lists WHERE user_id = 32172230 AND list_creation_timestamp_utc IN (     SELECT list_creation_date_utc     FROM lists_users     WHERE user_id = 32172230 AND user_eligible_for_trial = 1 );
SELECT COUNT(*) FROM lists WHERE user_id = 85981819 AND list_movie_number > 100 AND user_has_payment_method = 1;
SELECT list_description FROM lists WHERE user_id = 85981819 AND list_followers = (     SELECT MAX(list_followers)     FROM lists     WHERE user_id = 85981819 );
SELECT list_update_timestamp_utc FROM lists WHERE list_title = '250 Favourite Films' ORDER BY list_update_timestamp_utc DESC LIMIT 1;
SELECT user_avatar_image_url FROM lists JOIN lists_users ON lists.user_id = lists_users.user_id WHERE list_title = '250 Favourite Films';
SELECT COUNT(*)  FROM lists  WHERE user_id = (   SELECT user_id    FROM lists    WHERE list_title = '250 Favourite Films' ) AND list_title!= '250 Favourite Films';
SELECT COUNT(DISTINCT u.user_id) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'A Way of Life' AND r.rating_score = 5;
SELECT critic FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'A Way of Life');
SELECT COUNT(DISTINCT critic)  FROM ratings  WHERE movie_id IN (   SELECT movie_id    FROM movies    WHERE movie_title = 'Imitation of Life' )  AND critic_likes > 1;
SELECT r.user_id FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'When Will I Be Loved' AND r.critic_comments = 2;
SELECT rating_timestamp_utc  FROM ratings  WHERE user_id = 39115684 AND movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'A Way of Life');
SELECT r.rating_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.user_id = 39115684 AND m.movie_title = 'When Will I Be Loved';
SELECT user_trialist FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE user_id = 39115684 AND movie_title = 'A Way of Life' AND user_trialist = 1;
SELECT COUNT(DISTINCT r.user_id) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'A Way of Life' AND r.user_trialist = 1;
SELECT r.rating_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'A Way of Life' AND r.critic IS NOT NULL;
SELECT COUNT(DISTINCT r.user_id) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_popularity = (SELECT MAX(movie_popularity) FROM movies);
SELECT m.movie_title, r.critic FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.user_id = 58149469 AND r.critic_likes = 1 AND r.critic_comments = 2;
SELECT COUNT(DISTINCT u.user_id) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id JOIN ratings_users u ON r.user_id = u.user_id WHERE m.movie_title = 'When Will I Be Loved' AND r.rating_score = 1 AND u.user_trialist = 1;
SELECT COUNT(*) FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'A Way of Life') AND rating_timestamp_utc > '2011';
SELECT r.rating_score FROM ratings r JOIN movies m ON r.movie_id = m.movie_id JOIN lists l ON r.user_id = l.user_id WHERE m.movie_title = 'Innocence Unprotected' AND l.list_title = '250 Favourite Films';
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id JOIN lists l ON r.user_id = l.user_id WHERE l.list_title = '250 Favourite Films';
SELECT AVG(r.rating_score)  FROM ratings r  JOIN movies m ON r.movie_id = m.movie_id  WHERE m.movie_title = 'A Way of Life';
SELECT    (COUNT(CASE WHEN r.rating_score = 1 THEN r.rating_id END) / COUNT(r.rating_id)) * 100 AS percentage FROM    ratings r   JOIN movies m ON r.movie_id = m.movie_id WHERE    m.movie_title = 'When Will I Be Loved';
SELECT    (AVG(CASE WHEN m.movie_title = 'Innocence Unprotected' THEN r.rating_score ELSE NULL END) -     AVG(CASE WHEN m.movie_title = 'When Will I Be Loved' THEN r.rating_score ELSE NULL END))    AS avg_rating_score_diff FROM    movies m    JOIN ratings r ON m.movie_id = r.movie_id;
SELECT director_name FROM movies WHERE movie_title = 'Tokyo Eyes';
SELECT COUNT(*)  FROM movies  WHERE movie_release_year = 2007;
SELECT movie_title, movie_popularity FROM movies WHERE movie_release_year = 2006 ORDER BY movie_popularity DESC LIMIT 1;
SELECT COUNT(*)  FROM movies  WHERE director_name = 'Ake Sandgren';
SELECT movie_title, movie_popularity FROM movies WHERE director_name = 'Álex de la Iclesia' ORDER BY movie_popularity DESC LIMIT 1;
SELECT movie_release_year  FROM movies  WHERE movie_title = 'Cops';
SELECT director_id FROM movies WHERE movie_title = 'It\'s Winter';
SELECT user_id FROM lists WHERE list_followers = (SELECT MAX(list_followers) FROM lists);
SELECT list_title FROM lists WHERE list_comments = (SELECT MAX(list_comments) FROM lists);
SELECT m.movie_title, r.rating_score FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_release_year = 2008 ORDER BY r.rating_score DESC LIMIT 1;
SELECT m.movie_title, r.critic_likes FROM movies m JOIN ratings r ON m.movie_id = r.movie_id ORDER BY r.critic_likes DESC LIMIT 3;
SELECT COUNT(DISTINCT l.user_id) FROM lists l WHERE l.list_followers > 100 AND EXTRACT(YEAR FROM l.list_creation_timestamp_utc) = 2009;
SELECT COUNT(DISTINCT u.user_id) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'White Night Wedding' AND r.rating_score = 5;
SELECT lu.user_cover_image_url FROM lists_users lu JOIN lists l ON lu.list_id = l.list_id WHERE l.list_title = 'Georgia related films' AND lu.list_creation_date_utc = l.list_creation_timestamp_utc;
SELECT list_followers  FROM lists  WHERE user_id IN (   SELECT user_id    FROM ratings_users    WHERE user_avatar_image_url = 'https://assets.mubicdn.net/images/avatars/74983/images-w150.jpg?1523895214' );
SELECT m.movie_title FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.user_id = 94978 AND r.rating_score = 5;
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_release_year = 2003 AND r.user_id = 2941;
SELECT COUNT(DISTINCT r.user_id) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'Patti Smith: Dream of Life' AND r.user_trialist = 0;
SELECT movie_title, AVG(rating_score) as avg_score FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id GROUP BY movie_title ORDER BY avg_score DESC LIMIT 1;
SELECT m.movie_title, r.critic_comments FROM movies m JOIN ratings r ON m.movie_id = r.movie_id ORDER BY r.critic_comments DESC LIMIT 3;
SELECT list_title, user_avatar_image_url FROM lists JOIN lists_users ON lists.list_id = lists_users.list_id WHERE lists_users.user_id = 85981819 AND lists.list_creation_timestamp_utc = (   SELECT MIN(list_creation_timestamp_utc)   FROM lists   WHERE user_id = 85981819 );
SELECT movie_title FROM movies WHERE movie_id IN (   SELECT movie_id   FROM ratings   WHERE rating_timestamp_utc LIKE '2020%'   GROUP BY movie_id   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT AVG(r.rating_score)  FROM ratings r  JOIN movies m ON r.movie_id = m.movie_id  WHERE m.movie_title = 'Versailles Rive-Gauche';
SELECT m.movie_title FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.user_id = 59988436 AND r.critic_comments = 21;
SELECT movie_title FROM movies WHERE movie_id IN (   SELECT movie_id   FROM ratings   WHERE critic_likes > 20 );
SELECT AVG(r.rating_score)  FROM movies m  JOIN ratings r ON m.movie_id = r.movie_id  WHERE m.movie_title = 'The Fall of Berlin' AND YEAR(r.rating_timestamp_utc) = 2019;
SELECT    (COUNT(CASE WHEN r.rating_score > 3 THEN 1 END) / COUNT(r.rating_score)) * 100 AS percentage FROM    ratings r   JOIN movies m ON r.movie_id = m.movie_id WHERE    m.movie_title = 'Patti Smith: Dream of Life';
SELECT movie_title, AVG(rating_score) as avg_score FROM movies JOIN ratings ON movies.movie_id = ratings.movie_id WHERE director_name = 'Abbas Kiarostami' GROUP BY movie_title ORDER BY avg_score DESC LIMIT 1;
SELECT movie_release_year FROM movies GROUP BY movie_release_year ORDER BY COUNT(movie_id) DESC LIMIT 1;
SELECT director_id FROM movies GROUP BY director_id ORDER BY COUNT(movie_id) DESC LIMIT 1;
SELECT COUNT(m.movie_id) FROM movies m WHERE m.director_id = (   SELECT director_id   FROM movies   ORDER BY movie_popularity DESC   LIMIT 1 )
SELECT COUNT(DISTINCT r.user_id) FROM ratings r JOIN ratings_users u ON r.user_id = u.user_id WHERE r.rating_timestamp_utc > '2014%' AND u.user_has_payment_method = 1;
SELECT lu.user_id FROM lists_users lu JOIN lists l ON lu.list_id = l.list_id WHERE l.list_creation_timestamp_utc = (SELECT MIN(list_creation_timestamp_utc) FROM lists) AND lu.user_subscriber = 0;
SELECT MAX(list_followers)  FROM lists  WHERE user_id IN (   SELECT user_id    FROM (     SELECT user_id, COUNT(list_id) AS count_lists      FROM lists      GROUP BY user_id      ORDER BY count_lists DESC      LIMIT 1   ) AS subquery );
SELECT list_followers  FROM lists  WHERE list_title = 'Non-American Films about World War II';
SELECT COUNT(DISTINCT r.user_id) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'Downfall' AND r.rating_score = 4;
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.rating_score = 5 GROUP BY m.movie_title ORDER BY COUNT(r.rating_score) DESC LIMIT 1;
SELECT movie_title FROM movies JOIN ratings ON movies.movie_id = ratings.movie_id GROUP BY movie_title ORDER BY MAX(critic_comments) DESC LIMIT 1;
SELECT user_avatar_image_url FROM ratings_users WHERE user_id IN (   SELECT user_id   FROM ratings   WHERE rating_timestamp_utc = '2019-10-17 01:36:36' );
SELECT lu.user_avatar_image_url FROM lists l JOIN lists_users lu ON l.user_id = lu.user_id WHERE l.list_title = 'Vladimir Vladimirovich Nabokov';
SELECT lu.user_has_payment_method FROM lists_users lu JOIN (   SELECT user_id   FROM lists   ORDER BY list_movie_number DESC   LIMIT 1 ) l ON lu.user_id = l.user_id AND lu.list_id = (   SELECT list_id   FROM lists   WHERE user_id = l.user_id   ORDER BY list_creation_date_utc   LIMIT 1 );
SELECT user_avatar_image_url FROM ratings_users WHERE user_id = (   SELECT user_id   FROM ratings   WHERE rating_score = 5   GROUP BY user_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT COUNT(DISTINCT critic)  FROM ratings  WHERE movie_id = (   SELECT movie_id    FROM movies    ORDER BY movie_popularity DESC    LIMIT 1 );
SELECT r.user_id FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.rating_score = 4 AND m.movie_title = 'Freaks' AND r.rating_timestamp_utc = '2013-05-04 06:33:32';
SELECT m.movie_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.rating_score = 5 AND r.rating_timestamp_utc = '2013-05-03 05:11:17';
SELECT COUNT(*) FROM ratings WHERE movie_id = (   SELECT movie_id   FROM movies   WHERE movie_release_year = '1998'   ORDER BY movie_popularity DESC   LIMIT 1 ) AND rating_score = 4;
SELECT m.movie_title, MIN(r.rating_score) AS min_rating FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_popularity > 13000 GROUP BY m.movie_title ORDER BY min_rating ASC LIMIT 1;
SELECT COUNT(DISTINCT r.user_id) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'One Flew Over the Cuckoo''s Nest' AND r.user_has_payment_method = 1;
SELECT COUNT(DISTINCT lu.user_id) FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE l.list_followers > 3000 AND lu.user_has_payment_method = 1;
SELECT m.movie_title, COUNT(r.rating_id) as total_ratings FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_release_year = '1988' GROUP BY m.movie_title ORDER BY total_ratings DESC LIMIT 1;
SELECT COUNT(*) FROM ratings WHERE movie_id = (   SELECT movie_id   FROM movies   WHERE movie_release_year = '1995'   ORDER BY movie_popularity DESC   LIMIT 1 ) AND rating_score < 3;
SELECT    (COUNT(CASE WHEN r.rating_score = 5 THEN 1 END) / COUNT(r.rating_score)) * 100 AS percentage FROM    ratings r   JOIN movies m ON r.movie_id = m.movie_id WHERE    m.movie_title = 'Go Go Tales';
SELECT    (COUNT(CASE WHEN r.user_subscriber = 1 THEN 1 END) / COUNT(r.user_subscriber)) * 100  FROM    ratings r    JOIN movies m ON r.movie_id = m.movie_id  WHERE    m.movie_title = 'G.I. Jane';
SELECT    (COUNT(CASE WHEN user_has_payment_method = 1 THEN 1 END) / COUNT(user_has_payment_method)) * 100  FROM    ratings  WHERE    movie_id IN (SELECT movie_id FROM movies WHERE movie_title = 'A Shot in the Dark');
SELECT list_title FROM lists WHERE user_id = 4208563;
SELECT list_id, list_title, list_update_timestamp_utc FROM lists WHERE list_creation_timestamp_utc LIKE '2016%' ORDER BY list_update_timestamp_utc DESC LIMIT 1;
SELECT    ROUND(     (COUNT(CASE WHEN lu.user_subscriber = 1 THEN 1 ELSE NULL END) / COUNT(l.list_id)) * 100, 2   ) AS percentage_of_subscriber_lists FROM    lists l   JOIN lists_users lu ON l.list_id = lu.list_id;
SELECT l.list_title FROM lists l JOIN lists_users lu ON l.user_id = lu.user_id AND l.list_id = lu.list_id WHERE lu.user_subscriber = 1;
SELECT l.list_title FROM lists l JOIN lists_users lu ON l.user_id = lu.user_id AND l.list_id = lu.list_id WHERE lu.user_eligible_for_trial = 1;
SELECT COUNT(DISTINCT l.list_id) FROM lists l JOIN lists_users lu ON l.user_id = lu.user_id AND l.list_id = lu.list_id WHERE l.list_followers >= 1 AND lu.user_subscriber = 1 AND lu.list_creation_date_utc = l.list_creation_timestamp_utc;
SELECT list_title, AVG(list_followers)  FROM lists  WHERE list_movie_number > 200  GROUP BY list_title;
SELECT list_title FROM lists WHERE user_subscriber = 1 AND list_movie_number < 50;
SELECT list_title,         TIMESTAMPDIFF(SECOND, list_update_timestamp_utc, CURRENT_TIMESTAMP) AS time_not_updated FROM lists ORDER BY list_update_timestamp_utc ASC LIMIT 1;
SELECT lu.user_id, lu.user_subscriber FROM lists_users lu JOIN lists l ON lu.list_id = l.list_id WHERE l.list_title = 'Sound and Vision' AND lu.list_creation_date_utc = l.list_creation_timestamp_utc;
SELECT list_title, TIMESTAMPDIFF(SECOND, list_creation_timestamp_utc, CURRENT_TIMESTAMP) AS list_age FROM lists WHERE list_followers > 200;
SELECT    DIVIDE(     COUNT(m.movie_id),     COUNT(DISTINCT m.movie_id)   ) AS percentage_of_unrated_movies FROM    movies m   LEFT JOIN ratings r ON m.movie_id = r.movie_id WHERE    r.movie_id IS NULL;
SELECT m.movie_title, r.rating_timestamp_utc, r.rating_score FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.user_id = 39115684;
SELECT COUNT(*) FROM movies WHERE movie_release_year BETWEEN 1970 AND 1980 AND movie_popularity > 11000;
SELECT COUNT(*) FROM movies WHERE director_name = 'Felipe Cazals' AND movie_release_year = 1976;
SELECT director_url FROM movies WHERE movie_title = 'Red Blooded American Girl';
SELECT list_title FROM lists WHERE list_update_timestamp_utc = (SELECT MAX(list_update_timestamp_utc) FROM lists);
SELECT user_id FROM lists WHERE list_comments = 142;
SELECT m.movie_title, AVG(r.rating_score) AS avg_rating FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.director_name = 'Jeannot Szwarc' GROUP BY m.movie_title ORDER BY m.movie_popularity DESC LIMIT 1;
SELECT    director_name,    COUNT(T1.movie_id) AS num_movies,   MAX(T2.rating_score) AS max_rating FROM    movies T1   LEFT JOIN ratings T2 ON T1.movie_id = T2.movie_id WHERE    T1.movie_release_year BETWEEN 1970 AND 1979 GROUP BY    director_name HAVING    COUNT(T1.movie_id) = (     SELECT        MAX(num_movies)      FROM (       SELECT          director_name,          COUNT(T1.movie_id) AS num_movies       FROM          movies T1       WHERE          T1.movie_release_year BETWEEN 1970 AND 1979       GROUP BY          director_name     ) AS subquery   ) ORDER BY    num_movies DESC;
SELECT COUNT(DISTINCT lu.user_id) FROM lists_users lu JOIN lists l ON lu.list_id = l.list_id JOIN ratings r ON lu.user_id = r.user_id JOIN movies m ON r.movie_id = m.movie_id WHERE lu.user_trialist = 1 AND m.movie_title = 'The Secret Life of Words' AND r.rating_score = 3 AND r.rating_timestamp_utc BETWEEN '2010-01-01%' AND '2020-12-31%';
SELECT m.movie_title, r.rating_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.critic_likes = (SELECT MAX(critic_likes) FROM ratings);
SELECT    m.movie_title,    m.movie_release_year,    m.movie_popularity,    COUNT(DISTINCT r.user_id) AS num_users_rated_5 FROM    movies m    JOIN ratings r ON m.movie_id = r.movie_id WHERE    m.movie_release_year >= 2000    AND r.rating_score = 5 GROUP BY    m.movie_title,    m.movie_release_year,    m.movie_popularity ORDER BY    m.movie_popularity DESC LIMIT 5;
SELECT AVG(list_followers)  FROM lists  WHERE user_id IN (   SELECT user_id    FROM ratings    JOIN movies ON ratings.movie_id = movies.movie_id    WHERE movie_title = 'Pavee Lackeen: The Traveller Girl'    AND rating_timestamp_utc = '2011-03-27 02:06:34' );
SELECT COUNT(DISTINCT r.user_id), m.movie_image_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.rating_timestamp_utc BETWEEN '2017-01-01 00:00:00' AND '2017-12-31 00:00:00' AND r.user_eligible_for_trial = 1 AND m.movie_title = 'Patti Smith: Dream of Life';
SELECT    AVG(list_movie_number) AS avg_movies_per_list,   COUNT(CASE WHEN rating_score = 5 THEN 1 END) AS num_five_star_ratings FROM    lists   LEFT JOIN lists_users ON lists.list_id = lists_users.list_id   LEFT JOIN ratings ON lists_users.user_id = ratings.user_id WHERE    lists_users.user_id = 8516503;
SELECT    m.director_name,    m.movie_release_year,    AVG(r.rating_score) AS avg_trialist_rating FROM    movies m   JOIN ratings r ON m.movie_id = r.movie_id WHERE    m.movie_popularity = (SELECT MAX(movie_popularity) FROM movies)   AND r.user_trialist = 1 GROUP BY    m.director_name,    m.movie_release_year;
SELECT m.movie_title FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.user_id = 57756708 AND r.rating_timestamp_utc = (     SELECT MAX(rating_timestamp_utc)     FROM ratings     WHERE user_id = 57756708 );
SELECT    M.movie_title,    M.movie_release_year,    M.director_name,    AVG(T2.rating_score) AS avg_rating_score FROM    movies M   JOIN ratings T2 ON M.movie_id = T2.movie_id GROUP BY    M.movie_title,    M.movie_release_year,    M.director_name ORDER BY    M.movie_release_year LIMIT 10;
SELECT ord_date, SUM(qty) as total_qty FROM sales GROUP BY ord_date ORDER BY total_qty DESC LIMIT 1;
SELECT title FROM titles WHERE title_id = (   SELECT title_id   FROM sales   WHERE YEAR(ord_date) = 1992   GROUP BY title_id   ORDER BY SUM(qty) DESC   LIMIT 1 );
SELECT t.title, t.price, t.pubdate FROM titles t JOIN sales s ON t.title_id = s.title_id WHERE s.payterms = 'ON invoice';
SELECT t.title FROM titles t JOIN roysched r ON t.title_id = r.title_id WHERE r.royalty >= 10 AND r.lorange <> 0;
SELECT t.title, r.royalty FROM titles t JOIN roysched r ON t.title_id = r.title_id WHERE t.title_id = 'BU2075' AND r.lorange <= 50000 AND r.hirange >= 10000;
SELECT t.title, r.hirange, r.lorange FROM titles t JOIN roysched r ON t.title_id = r.title_id WHERE t.royalty > 0 ORDER BY r.hirange DESC LIMIT 1;
SELECT t.title, p.pub_name FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE p.country = 'USA';
SELECT r.royalty FROM titles t JOIN roysched r ON t.title_id = r.title_id WHERE t.ytd_sales = (SELECT MAX(ytd_sales) FROM titles) AND r.hirange < 20000;
SELECT t.title, t.notes, p.pub_name FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE YEAR(t.pubdate) = 1991;
SELECT t.title FROM titles t JOIN sales s ON t.title_id = s.title_id JOIN stores st ON s.stor_id = st.stor_id WHERE s.qty > 20 AND st.state = 'CA';
SELECT s.stor_name, MIN(qty) AS least_qty FROM sales JOIN stores s ON sales.stor_id = s.stor_id WHERE s.stor_id = (   SELECT stor_id   FROM sales   GROUP BY stor_id   ORDER BY SUM(qty) DESC   LIMIT 1 );
SELECT t.title, p.pub_name, rs.lorange, rs.hirange, rs.royalty FROM titles t JOIN publishers p ON t.pub_id = p.pub_id JOIN roysched rs ON t.title_id = rs.title_id WHERE t.title_id = 'BU 2075';
SELECT stor_name,         (SUM(CASE WHEN payterms = 'Net 30' THEN qty ELSE 0 END) / SUM(qty)) * 100 AS percentage FROM stores JOIN sales ON stores.stor_id = sales.stor_id WHERE stores.stor_id = '7066' GROUP BY stor_name;
SELECT p.pub_name, AVG(t.ytd_sales) AS avg_ytd_sales FROM publishers p JOIN titles t ON p.pub_id = t.pub_id WHERE p.pub_id = 877 GROUP BY p.pub_name;
SELECT fname, minit, lname  FROM employee  WHERE YEAR(hire_date) < 1990;
SELECT fname, lname, hire_date FROM employee WHERE job_lvl = (SELECT MIN(job_lvl) FROM employee);
SELECT EXTRACT(YEAR FROM hire_date) AS hire_year, COUNT(emp_id) AS num_employees FROM employee GROUP BY EXTRACT(YEAR FROM hire_date) ORDER BY num_employees DESC LIMIT 1;
SELECT e.* FROM employee e JOIN jobs j ON e.job_id = j.job_id WHERE e.job_lvl = j.max_lvl;
SELECT fname, lname, hire_date FROM employee WHERE job_id = (   SELECT job_id   FROM jobs   WHERE job_desc = 'Chief Executive Officer' );
SELECT CONCAT(e.fname,'', e.lname) AS Employee_Name, p.pub_name AS Publisher_Name FROM employee e JOIN publishers p ON e.pub_id = p.pub_id WHERE p.country!= 'USA';
SELECT CONCAT(e.fname,'', e.lname) AS name, j.job_desc FROM employee e JOIN jobs j ON e.job_id = j.job_id JOIN publishers p ON e.pub_id = p.pub_id WHERE p.pub_name = 'GGG&G';
SELECT p.pub_name, t.type FROM publishers p JOIN titles t ON p.pub_id = t.pub_id ORDER BY p.pub_name;
SELECT p.pub_name FROM publishers p JOIN titles t ON p.pub_id = t.pub_id WHERE YEAR(t.pubdate) = 1991 GROUP BY p.pub_name ORDER BY COUNT(t.title_id) DESC LIMIT 1;
SELECT title FROM titles WHERE pub_id = (SELECT pub_id FROM publishers WHERE pub_name = 'Binnet & Hardley') AND price = (SELECT MAX(price) FROM titles WHERE pub_id = (SELECT pub_id FROM publishers WHERE pub_name = 'Binnet & Hardley'));
SELECT e.fname, e.minit, e.lname, j.job_desc FROM employee e JOIN jobs j ON e.job_id = j.job_id WHERE e.job_lvl > 200;
SELECT au_fname, au_lname FROM authors JOIN titleauthor ON authors.au_id = titleauthor.au_id JOIN titles ON titleauthor.title_id = titles.title_id WHERE titles.type = 'business';
SELECT t.title, t.ytd_sales, a.au_fname, a.au_lname FROM titles t JOIN titleauthor ta ON t.title_id = ta.title_id JOIN authors a ON ta.au_id = a.au_id WHERE a.contract = 0;
SELECT au_fname, au_lname, title FROM authors JOIN titleauthor ON authors.au_id = titleauthor.au_id JOIN titles ON titleauthor.title_id = titles.title_id WHERE authors.state = 'CA' AND authors.contract = 0 ORDER BY titles.ytd_sales DESC LIMIT 1;
SELECT au.au_fname, au.au_lname FROM authors au JOIN titleauthor ta ON au.au_id = ta.au_id JOIN titles t ON ta.title_id = t.title_id WHERE t.title = 'Sushi, Anyone?';
SELECT    (COUNT(CASE WHEN j.job_desc IN ('Editor', 'Designer') THEN 1 ELSE NULL END) / COUNT(e.emp_id)) * 100 FROM    employee e JOIN    jobs j ON e.job_id = j.job_id;
SELECT t.title, p.pub_name FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE t.ytd_sales > (SELECT AVG(ytd_sales) FROM titles) ORDER BY p.pub_name;
SELECT COUNT(*)  FROM publishers  WHERE country = 'USA';
SELECT *  FROM publishers  WHERE pub_name = 'New Moon Books';
SELECT fname  FROM employee  WHERE job_id IN (SELECT job_id                    FROM jobs                    WHERE job_desc = 'Managing Editor');
SELECT MAX(job_lvl)  FROM employee  WHERE hire_date = (SELECT MIN(hire_date) FROM employee);
SELECT city FROM stores WHERE stor_id = (   SELECT stor_id   FROM sales   GROUP BY stor_id   ORDER BY SUM(qty) DESC   LIMIT 1 );
SELECT price FROM titles WHERE title_id = (   SELECT title_id   FROM sales   GROUP BY title_id   ORDER BY SUM(qty) DESC   LIMIT 1 );
SELECT stor_name FROM stores WHERE stor_id IN (   SELECT stor_id   FROM sales   WHERE title_id IN (     SELECT title_id     FROM titles     WHERE title = 'Life Without Fear'   ) );
SELECT COUNT(DISTINCT s.stor_id) FROM stores s JOIN sales sa ON s.stor_id = sa.stor_id JOIN titles t ON sa.title_id = t.title_id WHERE t.title = 'Life Without Fear' AND s.state = 'MA';
SELECT p.country FROM publishers p JOIN titles t ON p.pub_id = t.pub_id WHERE t.title = 'Life Without Fear';
SELECT p.pub_name FROM publishers p JOIN titles t ON p.pub_id = t.pub_id WHERE t.price = (SELECT MAX(price) FROM titles);
SELECT COUNT(DISTINCT p.pub_id) FROM publishers p JOIN titles t ON p.pub_id = t.pub_id WHERE p.country = 'USA' AND t.price > 15;
SELECT t.title, SUM(s.qty) AS total_sales FROM titles t JOIN sales s ON t.title_id = s.title_id GROUP BY t.title ORDER BY total_sales DESC LIMIT 3;
SELECT COUNT(DISTINCT t.title_id) FROM titles t JOIN sales s ON t.title_id = s.title_id JOIN stores st ON s.stor_id = st.stor_id WHERE t.type = 'business' AND st.state = 'Massachusetts';
SELECT AVG(qty)  FROM sales  WHERE title_id IN (   SELECT title_id    FROM titles    WHERE title = 'Life Without Fear' );
SELECT AVG(e.job_lvl) AS avg_lvl,         MAX(j.max_lvl) - AVG(e.job_lvl) AS levels_between FROM employee e JOIN jobs j ON e.job_id = j.job_id WHERE j.job_desc = 'Managing Editor';
SELECT title FROM titles WHERE type = 'business' AND price = (SELECT MIN(price) FROM titles WHERE type = 'business');
SELECT type, MAX(advance) AS max_advance FROM titles GROUP BY type ORDER BY max_advance DESC LIMIT 1;
SELECT t.royalty, ti.title FROM titles ti JOIN (   SELECT title_id, MAX(qty) as max_qty   FROM sales   GROUP BY title_id ) s ON ti.title_id = s.title_id JOIN roysched t ON ti.title_id = t.title_id ORDER BY s.max_qty DESC LIMIT 1;
SELECT job_lvl FROM employee WHERE lname = 'O''Rourke';
SELECT emp_id FROM employee WHERE minit IS NULL OR minit = '' ORDER BY job_lvl DESC LIMIT 1;
SELECT au.contract FROM authors au JOIN titleauthor ta ON au.au_id = ta.au_id JOIN titles t ON ta.title_id = t.title_id WHERE t.title = 'Sushi, Anyone?';
SELECT e.fname, e.minit, e.lname  FROM employee e  JOIN publishers p ON e.pub_id = p.pub_id  WHERE e.job_lvl = (SELECT MAX(job_lvl) FROM employee);
SELECT j.job_desc FROM employee e JOIN jobs j ON e.job_id = j.job_id WHERE e.fname = 'Pedro' AND e.lname = 'S Afonso';
SELECT max_lvl - job_lvl AS levels_left FROM employee JOIN jobs ON employee.job_id = jobs.job_id WHERE fname = 'Diego' AND minit = 'W' AND lname = 'Roel';
SELECT notes FROM titles WHERE title_id IN (   SELECT title_id   FROM sales   WHERE ord_date = '1994-09-14' );
SELECT type FROM titles WHERE title_id IN (   SELECT title_id   FROM sales   WHERE ord_date = '1993-05-29' );
SELECT *  FROM publishers  WHERE country = 'France';
SELECT p.pub_name FROM publishers p JOIN titles t ON p.pub_id = t.pub_id WHERE t.title = 'Silicon Valley Gastronomic Treats';
SELECT city FROM employee JOIN authors ON employee.fname = 'Victoria' AND employee.lname = 'P Ashworth' AND employee.emp_id = (     SELECT au_id     FROM authors     WHERE au_fname = 'Victoria' AND au_lname = 'P Ashworth' );
SELECT COUNT(ord_num)  FROM sales  WHERE stor_id IN (   SELECT stor_id    FROM stores    WHERE city = 'Remulade' );
SELECT      (SUM(CASE WHEN s.city = 'Fremont' THEN sa.qty ELSE 0 END) -       SUM(CASE WHEN s.city = 'Portland' THEN sa.qty ELSE 0 END)) /      SUM(CASE WHEN s.city = 'Fremont' THEN sa.qty ELSE 0 END) * 100 FROM      sales sa JOIN      stores s ON sa.stor_id = s.stor_id WHERE      YEAR(sa.ord_date) = 1993;
SELECT    100 * (SUM(CASE WHEN j.job_desc = 'publisher' THEN 1 ELSE 0 END) -           SUM(CASE WHEN j.job_desc = 'designer' THEN 1 ELSE 0 END)) /          SUM(CASE WHEN j.job_desc = 'designer' THEN 1 ELSE 0 END) AS percent_more FROM employee e JOIN jobs j ON e.job_id = j.job_id;
SELECT CONCAT(fname,'', lname) AS full_name, job_lvl FROM employee WHERE YEAR(hire_date) BETWEEN 1990 AND 1995 ORDER BY job_lvl DESC;
SELECT t.title, t.type, t.price FROM titles t WHERE t.royalty > (SELECT AVG(r.royalty)                     FROM roysched r                     JOIN titles ti ON r.title_id = ti.title_id);
SELECT t.title, t.type, t.price FROM titles t JOIN (   SELECT title_id, SUM(qty) AS total_qty   FROM sales   WHERE YEAR(ord_date) = 1994   GROUP BY title_id ) s ON t.title_id = s.title_id WHERE s.total_qty < (   SELECT AVG(total_qty)   FROM (     SELECT title_id, SUM(qty) AS total_qty     FROM sales     WHERE YEAR(ord_date) = 1994     GROUP BY title_id   ) subquery );
SELECT title, type, price FROM titles WHERE pub_id IN (   SELECT pub_id   FROM publishers   WHERE pub_name = 'New Moon Books' ) ORDER BY price ASC;
SELECT t.title, t.royalty FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE p.country = 'USA' ORDER BY t.royalty DESC;
SELECT AVG(CASE WHEN p.country = 'USA' THEN t.royalty ELSE NULL END) -         AVG(CASE WHEN p.country!= 'USA' THEN t.royalty ELSE NULL END) AS royalty_diff FROM titles t JOIN publishers p ON t.pub_id = p.pub_id;
SELECT AVG(CASE WHEN p.country = 'USA' THEN e.job_lvl ELSE NULL END) - AVG(CASE WHEN p.country!= 'USA' THEN e.job_lvl ELSE NULL END) FROM employee e JOIN jobs j ON e.job_id = j.job_id JOIN publishers p ON e.pub_id = p.pub_id WHERE j.job_desc = 'Marketing manager';
SELECT t.title, p.pub_name, t.price FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE t.notes LIKE '%helpful hints on how to use your electronic resources%';
SELECT t.title, p.state, t.ytd_sales FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE t.notes LIKE '%Carefully researched study of the effects of strong emotions on the body%';
SELECT t.title, SUM(s.qty) AS total_sales FROM titles t JOIN sales s ON t.title_id = s.title_id JOIN stores st ON s.stor_id = st.stor_id WHERE st.state = 'CA' GROUP BY t.title HAVING SUM(s.qty) > (SELECT AVG(qty) FROM sales) ORDER BY total_sales DESC LIMIT 5;
SELECT    DATE_received FROM    callcenterlogs WHERE    ser_time = (SELECT                   MAX(ser_time)                 FROM                   callcenterlogs);
SELECT MIN(ser_start)  FROM callcenterlogs  WHERE "Date received" = '2017-03-22';
SELECT Complaint_ID, priority FROM callcenterlogs WHERE Complaint_ID IN ('CR2400594', 'CR2405641') ORDER BY priority DESC LIMIT 1;
SELECT CONCAT(first,'', middle,'', last) AS full_name FROM client WHERE sex = 'Male' AND year > 1990;
SELECT COUNT(e.Complaint_ID) FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Diesel' AND c.last = 'Galloway';
SELECT e.Sub_product FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE e.Date_received = '2014-07-03' AND c.first = 'Diesel' AND c.last = 'Galloway';
SELECT    e.Consumer_consent_provided? FROM    events e   JOIN client c ON e.Client_ID = c.client_id WHERE    e.Date_received = '2016-10-28'    AND c.first = 'Matthew'    AND c.last = 'Pierce';
SELECT    DATEDIFF(events."Date sent to company", events."Date received")  FROM    events    JOIN client ON events."Client_ID" = client."client_id"  WHERE    events."Date received" = '2016-10-28'    AND client."first" = 'Matthew'    AND client."last" = 'Pierce';
SELECT CONCAT(first,'', middle,'', last)  FROM client  WHERE client_id IN (   SELECT rand_client    FROM callcenterlogs    WHERE Date_received = '2017-03-27' AND server = 'MICHAL' );
SELECT ser_time FROM callcenterlogs JOIN client ON callcenterlogs.rand_client = client.client_id JOIN events ON callcenterlogs.Complaint_ID = events.Complaint_ID WHERE client.first = 'Rachel' AND client.last = 'Hicks' AND events.`Date received` = '2017-03-27';
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id JOIN events e ON c.client_id = e.Client_ID WHERE d.city = 'New York' AND e.Issue = 'Deposits and withdrawals';
SELECT CONCAT(c.first,'', c.middle,'', c.last) AS full_name FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e."Company response to consumer" = 'In progress';
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.`Timely response?` = 'Yes' AND c.city = 'New York';
SELECT COUNT(*)  FROM events  JOIN client ON events.Client_ID = client.client_id  WHERE events.Product = 'Credit card'  AND year(events.`Date received`) = 2016  AND client.sex = 'Male';
SELECT d.division FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.first = 'Diesel' AND c.last = 'Galloway';
SELECT CONCAT(first,'', middle,'', last) AS full_name FROM client WHERE sex = 'Male' AND district_id IN (     SELECT district_id     FROM district     WHERE division = 'Pacific' );
SELECT AVG(Complaint_ID)  FROM events  WHERE Product = 'Credit card'  AND city = 'New York'  AND "Date received" BETWEEN 2015 AND 2017;
SELECT      MULTIPLY(         DIVIDE(             SUBTRACT(                 SUM(CASE WHEN year(e."Date received") = 2017 THEN 1 ELSE 0 END),                  SUM(CASE WHEN year(e."Date received") = 2016 THEN 1 ELSE 0 END)             ),              SUM(CASE WHEN year(e."Date received") = 2016 THEN 1 ELSE 0 END)         ),          1.0     ) AS percentage_increase FROM      events e JOIN      client c ON e."Client_ID" = c.client_id JOIN      district d ON c.district_id = d.district_id WHERE      d.city = 'New York'      AND year(e."Date received") BETWEEN 2016 AND 2017;
SELECT ser_time FROM callcenterlogs JOIN client ON callcenterlogs.rand_client = client.client_id WHERE client.client_id = 'C00007127' AND Date_received = '2017-02-22';
SELECT s.State FROM client c JOIN state s ON c.state = s.StateCode WHERE c.email = 'wyatt.collins@gmail.com';
SELECT e.Sub_product FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Lennox' AND c.middle = 'Oliver' AND c.last = 'Drake' AND c.sex = 'Male';
SELECT e.Sub_issue FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE c.first = 'Gunner' AND c.middle = 'Omer' AND c.last = 'Fuller' AND c.sex = 'Male';
SELECT e."Consumer consent provided?" FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Lyric' AND c.middle = 'Emely' AND c.last = 'Taylor' AND c.sex = 'Female' AND e."Date received" = '2016-05-20';
SELECT DATEDIFF(e.Date_sent_to_company, e.Date_received) AS delay_days FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Brantley' AND c.middle = 'Julian' AND c.last = 'Stanley' AND c.sex = 'Male' AND e.Date_received = '2012-05-18';
SELECT d.city FROM reviews r JOIN district d ON r.district_id = d.district_id WHERE r.Date = '2018-09-11';
SELECT Reviews FROM reviews WHERE Date = '2017-07-22' AND district_id IN (     SELECT district_id     FROM district     WHERE city = 'Jacksonville' );
SELECT Product FROM reviews WHERE Date = '2016-10-07' AND district_id IN (     SELECT district_id     FROM district     WHERE city = 'Indianapolis' );
SELECT Stars FROM reviews WHERE Date = '2013-04-04' AND Product = 'Eagle Capital' AND district_id IN (   SELECT district_id   FROM district   WHERE city = 'Little Rock' );
SELECT day, month, year FROM client WHERE client_id IN (   SELECT Client_ID   FROM events   WHERE Complaint_ID = 'CR0217298' );
SELECT phone FROM client WHERE client_id IN (   SELECT rand_client   FROM callcenterlogs   WHERE Complaint_ID = 'CR0100432' );
SELECT    SUM(CASE WHEN c.sex = 'Female' THEN 1 ELSE 0 END) / COUNT(c.client_id) * 1.0 AS percentage_female FROM    client c   JOIN events e ON c.client_id = e.Client_ID WHERE    e.Date_received = '2017-03-27';
SELECT      ROUND(         (SUM(CASE WHEN e."Consumer consent provided?" = 'Consent provided' THEN 1 ELSE 0 END) / COUNT(c.client_id)) * 1.0, 2     ) AS percentage FROM      client c  JOIN      events e ON c.client_id = e.Client_ID  WHERE      c.first = 'Mason' AND c.middle = 'Javen' AND c.last = 'Lopez' AND c.sex = 'Male';
SELECT COUNT(DISTINCT Complaint_ID), Complaint_ID FROM callcenterlogs WHERE priority = 2 AND Date_received BETWEEN '2017-03-01' AND '2017-03-31';
SELECT CONCAT(first,'', middle,'', last) AS full_name,         CONCAT(year, '-', month, '-', day) AS date_of_birth,         email FROM client WHERE age > 65 ORDER BY age DESC;
SELECT Product, COUNT(Stars) as count_5_stars FROM reviews WHERE Stars = 5 GROUP BY Product ORDER BY count_5_stars DESC LIMIT 1;
SELECT State  FROM state  WHERE Region = 'South';
SELECT email FROM client WHERE client_id IN (   SELECT rand_client   FROM callcenterlogs   WHERE outcome = 'Hang' );
SELECT AVG(c.age)  FROM client c  JOIN district d ON c.district_id = d.district_id  JOIN state s ON d.state_abbrev = s.State  WHERE s.Region = 'Midwest';
SELECT CONCAT(first,'', middle,'', last) AS full_name, phone FROM client WHERE client_id IN (   SELECT Client_ID   FROM events   WHERE Submitted_via = 'fax' );
SELECT d.city FROM district d JOIN reviews r ON d.district_id = r.district_id WHERE r.Product = 'Eagle Capital' AND r.Stars < (SELECT AVG(Stars) FROM reviews WHERE Product = 'Eagle Capital');
SELECT COUNT(*) FROM callcenterlogs JOIN client ON callcenterlogs.rand_client = client.client_id JOIN district ON client.district_id = district.district_id WHERE district.division = 'Mountain' AND client.age BETWEEN 12 AND 20;
SELECT COUNT(e.Complaint_ID) FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE e.Product = 'Credit card' AND c.sex = 'female';
SELECT c.first, c.middle, c.last FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE c.sex = 'Male' AND c.year BETWEEN 1980 AND 2000 AND e."Submitted via" = 'Referral';
SELECT Submitted_via, COUNT(Complaint_ID) as count FROM events JOIN client ON events.Client_ID = client.client_id JOIN state ON client.state = state.State WHERE state.State = 'Florida' GROUP BY Submitted_via ORDER BY count DESC LIMIT 1;
SELECT    YEAR(e.Date_received),    AVG(e.Complaint_ID)  FROM    events e    JOIN client c ON e.Client_ID = c.client_id    JOIN district d ON c.district_id = d.district_id  WHERE    d.city = 'New Bedford'    AND e.Company_response_to_consumer = 'Closed with explanation'  GROUP BY    YEAR(e.Date_received);
SELECT    (SUM(CASE WHEN e."Consumer disputed?" = 'Yes' AND c.city = 'Houston' THEN 1 ELSE 0 END) / COUNT(c.client_id)) * 1.0 AS percentage FROM    client c   JOIN events e ON c.client_id = e.Client_ID   JOIN district d ON c.district_id = d.district_id WHERE    d.city = 'Houston';
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.city = 'Syracuse';
SELECT    SUM(CASE WHEN ccl.priority = 1 THEN 1 ELSE 0 END) / COUNT(ccl."Complaint ID") * 1.0  FROM    callcenterlogs ccl    JOIN client cl ON ccl."rand client" = cl.client_id    JOIN district d ON cl.district_id = d.district_id    JOIN state s ON d.state_abbrev = s.StateCode  WHERE    s.State = 'California';
SELECT    AVG(CASE WHEN c.age > 65 THEN c.age ELSE NULL END) -    AVG(CASE WHEN c.age BETWEEN 35 AND 55 THEN c.age ELSE NULL END) AS age_diff FROM    client c   JOIN district d ON c.district_id = d.district_id   JOIN state s ON d.state_abbrev = s.StateCode WHERE    s.Region = 'Northeast';
SELECT Complaint_ID, ser_time FROM callcenterlogs ORDER BY ser_time DESC LIMIT 3;
SELECT COUNT(*) FROM client WHERE email NOT LIKE '%@gmail.com';
SELECT client_id FROM client WHERE client_id IN (   SELECT Client_ID   FROM events   WHERE Consumer consent provided? IS NULL OR Consumer consent provided? = 'N/A' OR Consumer consent provided? = '' );
SELECT Complaint_ID FROM events WHERE Date_sent_to_company = '2014-09-25' ORDER BY SUBTRACT(Date_sent_to_company, Date_received) DESC LIMIT 1;
SELECT * FROM callcenterlogs WHERE priority = 2 ORDER BY "Date received";
SELECT COUNT(*)  FROM callcenterlogs  WHERE outcome!= 'AGENT';
SELECT COUNT(*)  FROM events  JOIN callcenterlogs  ON events.Complaint_ID = callcenterlogs.Complaint_ID  WHERE events.Product = 'Credit Card' AND callcenterlogs.server = 'SHARON';
SELECT r.Region, COUNT(r.Stars) as count_1_star FROM reviews JOIN district ON reviews.district_id = district.district_id JOIN state ON district.state_abbrev = state.State WHERE r.Stars = 1 GROUP BY r.Region ORDER BY count_1_star DESC LIMIT 1;
SELECT DISTINCT year FROM (   SELECT year, COUNT(*) as cnt   FROM (     SELECT year, Sub_product     FROM client     JOIN events ON client.client_id = events.Client_ID     WHERE Sub_product = '(CD) Certificate of deposit'   ) AS sub   GROUP BY year   HAVING cnt = (     SELECT MAX(cnt)     FROM (       SELECT year, COUNT(*) as cnt       FROM (         SELECT year, Sub_product         FROM client         JOIN events ON client.client_id = events.Client_ID         WHERE Sub_product = '(CD) Certificate of deposit'       ) AS sub       GROUP BY year     ) AS sub   ) ) AS sub;
SELECT COUNT(*) FROM events e JOIN client c ON e.Client_ID = c.client_id JOIN district d ON c.district_id = d.district_id WHERE e.Issue = 'Billing disputes' AND d.division = 'Mountain';
SELECT COUNT(*) FROM client WHERE sex = 'Male' AND state = 'MA';
SELECT last  FROM client  WHERE client_id IN (   SELECT Client_ID    FROM events    WHERE type = 'PS' AND Complaint_ID IN (     SELECT Complaint_ID      FROM callcenterlogs      WHERE server = 'TOVA'   ) );
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN events e ON c.client_id = e.Client_ID JOIN reviews r ON e.Complaint_ID = r.Complaint_ID WHERE c.age < 35 AND e.Product = 'Eagle National Mortgage' AND r.Stars = 1;
SELECT COUNT(*) FROM client JOIN events ON client.client_id = events.Client_ID WHERE client.sex = 'Male' AND client.year = 1977 AND events.priority = 0;
SELECT c.first FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Tags = 'Older American' AND e."Consumer consent provided?" NOT IN ('N/A', null, 'empty');
SELECT State  FROM state  WHERE StateCode IN (   SELECT state    FROM client    WHERE client_id IN (     SELECT Client_ID      FROM events      WHERE Complaint_ID IN (       SELECT Complaint_ID        FROM callcenterlogs        WHERE priority = 0     )   )   GROUP BY state    HAVING COUNT(DISTINCT Complaint_ID) = (     SELECT MAX(cnt)      FROM (       SELECT COUNT(DISTINCT Complaint_ID) AS cnt        FROM callcenterlogs        WHERE priority = 0        GROUP BY state     ) AS sub   ) )
SELECT COUNT(*) FROM events e JOIN client c ON e.Client_ID = c.client_id JOIN callcenterlogs cl ON e.Complaint_ID = cl.Complaint_ID WHERE c.sex = 'Female' AND cl.ser_time BETWEEN '15:00:01' AND '23:59:59' AND e."Timely response?" = 'Yes';
SELECT COUNT(c.Complaint_ID) FROM callcenterlogs c JOIN events e ON c.Complaint_ID = e.Complaint_ID WHERE c.ser_time < '00:05:00' AND c.server = 'DORIT' AND e."Company response to consumer" = 'Closed with explanation' AND e."Submitted via" = 'Phone';
SELECT COUNT(*) FROM client WHERE last = 'Alvarado' AND state = 'MD';
SELECT COUNT(*) FROM reviews JOIN client ON reviews.district_id = client.district_id WHERE client.age BETWEEN 30 AND 50 AND reviews.Reviews LIKE '%Great%';
SELECT c.address_1, c.address_2 FROM client c JOIN events e ON c.client_id = e.client_id WHERE e.Timely_response = 'Yes' AND e.Consumer_disputed = 'Yes';
SELECT COUNT(*) FROM client JOIN events ON client.client_id = events.Client_ID WHERE client.sex = 'Female' AND client.year = 2000 AND events."Submitted via"!= 'Web';
SELECT e."Consumer complaint narrative" FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Brenda' AND c.last = 'Mayer';
SELECT COUNT(DISTINCT e.Complaint_ID) FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.email LIKE '%gmail.com' AND e."Date received" BETWEEN '2017-01-01' AND '2017-02-28';
SELECT AVG(Stars)  FROM reviews  WHERE district_id IN (   SELECT district_id    FROM district    WHERE state_abbrev IN (     SELECT StateAbbrev      FROM state      WHERE State = 'Oregon'   ) );
SELECT    (SUM(CASE WHEN e."Submitted via" = 'Postal mail' AND c.age > 50 THEN 1 ELSE 0 END) / COUNT(c.client_id)) * 1.0 AS percentage FROM    client c   JOIN events e ON c.client_id = e.Client_ID;
SELECT AVG(age)  FROM client  WHERE city = 'Norwalk';
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id JOIN reviews r ON d.district_id = r.district_id WHERE d.city = 'Kansas City' AND r.Stars = 1;
SELECT s.State FROM (   SELECT district_id, COUNT(DISTINCT client_id) as cnt   FROM reviews   WHERE Stars = 5   GROUP BY district_id   HAVING COUNT(DISTINCT client_id) = (     SELECT MAX(cnt)     FROM (       SELECT district_id, COUNT(DISTINCT client_id) as cnt       FROM reviews       WHERE Stars = 5       GROUP BY district_id     ) t   ) ) r JOIN district d ON r.district_id = d.district_id JOIN state s ON d.state_abbrev = s.StateCode;
SELECT s.Region FROM client c JOIN district d ON c.district_id = d.district_id JOIN state s ON d.state_abbrev = s.StateCode WHERE c.first = 'Noah' AND c.last = 'Thompson';
SELECT e.Submitted_via FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Kyran' AND c.last = 'Muller';
SELECT DISTINCT e.Product FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.year > 2005;
SELECT ser_time FROM callcenterlogs JOIN events ON callcenterlogs.Complaint_ID = events.Complaint_ID JOIN client ON events.Client_ID = client.client_id WHERE client.first = 'Kendall' AND client.last = 'Allen' AND events.Product = 'Credit Card';
SELECT e.Issue FROM events e JOIN client c ON e.Client_ID = c.client_id JOIN callcenterlogs cl ON e.Complaint_ID = cl.Complaint_ID WHERE cl.ser_time = (SELECT MAX(ser_time) FROM callcenterlogs);
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id JOIN events e ON c.client_id = e.Client_ID WHERE d.city = 'New York City' AND e."Submitted via" = 'Fax';
SELECT    (SUM(CASE WHEN c.sex = 'Male' THEN 1 ELSE 0 END) / COUNT(c.client_id)) * 1.0 AS percentage FROM    client c   JOIN events e ON c.client_id = e.Client_ID WHERE    e.Product = 'Credit card';
SELECT CONCAT(c.first,'', c.middle,'', c.last) AS full_name FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Tags = 'Older American' AND e."Consumer consent provided?" IN (NULL, 'N/A', '') LIMIT 2;
SELECT day, month, year FROM client ORDER BY year DESC, month DESC, day DESC LIMIT 1;
SELECT COUNT(*) FROM events WHERE Consumer_disputed = 'No' AND Timely_response = 'No';
SELECT COUNT(*)  FROM callcenterlogs  WHERE ser_time > '00:15:00';
SELECT issue, COUNT(issue) as count FROM events WHERE Complaint_ID IN (   SELECT Complaint_ID   FROM callcenterlogs   WHERE priority = 2 ) GROUP BY issue ORDER BY count DESC LIMIT 1;
SELECT CONCAT(c.first,'', c.last) AS full_name FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.division = 'Pacific';
SELECT c.social FROM client c JOIN (   SELECT Client_ID   FROM events   GROUP BY Client_ID   ORDER BY COUNT(*) DESC   LIMIT 1 ) e ON c.client_id = e.Client_ID;
SELECT city FROM reviews JOIN district ON reviews.district_id = district.district_id WHERE Stars = 1 GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT address_1, address_2  FROM client  WHERE client_id IN (   SELECT Client_ID    FROM events    WHERE Date_received = '2012-03-14' AND Submitted_via = 'Postal mail' );
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN events e ON c.client_id = e.Client_ID JOIN callcenterlogs cl ON e.Complaint_ID = cl.Complaint_ID WHERE c.sex = 'Female' AND cl.priority = 1;
SELECT DISTINCT ccl.server FROM callcenterlogs ccl JOIN events e ON ccl.Complaint_ID = e.Complaint_ID WHERE e.Submitted_via = 'Phone' AND e.`Timely response?` = 'No';
SELECT e.Issue  FROM events e  JOIN client c ON e.Client_ID = c.client_id  WHERE c.first = 'Kaitlyn' AND c.middle = 'Eliza' AND c.last = 'Elliott';
SELECT s.State FROM client c JOIN state s ON c.state = s.StateCode WHERE c.email ='skylar.ramirez@gmail.com';
SELECT Region FROM district WHERE division = (   SELECT division   FROM (     SELECT division, COUNT(client_id) as count_client_id     FROM district     JOIN client ON district.district_id = client.district_id     GROUP BY division     ORDER BY count_client_id DESC     LIMIT 1 OFFSET 1   ) AS subquery )
SELECT c.first, c.middle, c.last FROM callcenterlogs cl JOIN client c ON cl.rand_client = c.client_id WHERE cl.server = 'MORIAH' AND cl.Date_received = '2013-09-11' AND cl.phonefinal = c.phone;
SELECT    CASE      WHEN c.age BETWEEN 13 AND 19 THEN 'teenager'     WHEN c.age BETWEEN 20 AND 65 THEN 'adult'     ELSE 'elder'   END AS age_group,   AVG(cl.ser_time) AS avg_time_in_minutes FROM    client c   JOIN callcenterlogs cl ON c.client_id = cl.rand_client GROUP BY    CASE      WHEN c.age BETWEEN 13 AND 19 THEN 'teenager'     WHEN c.age BETWEEN 20 AND 65 THEN 'adult'     ELSE 'elder'   END;
SELECT    SUM(CASE WHEN age <= 65 THEN 1 ELSE 0 END) / COUNT(client_id) * 100 AS percentage_of_elderly_complaints FROM client WHERE client_id IN (   SELECT Client_ID   FROM events );
SELECT    (COUNT(CASE WHEN sex = 'Male' THEN client_id END) / COUNT(client_id)) * 100  AS Percentage_of_Male_Clients FROM client WHERE city = 'Indianapolis';
SELECT    CASE      WHEN email LIKE '%@gmail.com' THEN 'Google'     WHEN email LIKE '%@outlook.com' THEN 'Microsoft'   END AS Account_Type,   COUNT(*) AS Count FROM client WHERE age > 13 AND age <= 19 GROUP BY    CASE      WHEN email LIKE '%@gmail.com' THEN 'Google'     WHEN email LIKE '%@outlook.com' THEN 'Microsoft'   END;
SELECT CONCAT(first,'', middle,'', last) AS full_name FROM client WHERE email = 'emily.garcia43@outlook.com';
SELECT first  FROM client  WHERE client_id IN (   SELECT rand_client    FROM callcenterlogs    WHERE priority = 2 );
SELECT email FROM client WHERE client_id IN (   SELECT rand_client   FROM callcenterlogs   WHERE type = 'PS' );
SELECT c.last FROM client c JOIN events e ON c.client_id = e.Client_ID JOIN callcenterlogs cl ON e.Complaint_ID = cl.Complaint_ID WHERE c.age <= 65 AND cl.server = 'YIFAT';
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id JOIN events e ON c.client_id = e.Client_ID JOIN callcenterlogs cl ON e.Complaint_ID = cl.Complaint_ID WHERE d.city = 'New York City' AND cl.outcome = 'AGENT';
SELECT CONCAT(c.first,'', c.middle,'', c.last) AS full_name FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.`Consumer disputed?` = 'Yes';
SELECT e.Complaint_ID FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.year = 1931;
SELECT    (COUNT(CASE WHEN c.email LIKE '%@gmail.com' THEN cl.Complaint_ID ELSE NULL END) / COUNT(cl.Complaint_ID)) * 100  AS Gmail_Complaint_Percentage FROM    client c    JOIN callcenterlogs cl ON c.client_id = cl.rand_client    JOIN events e ON cl.Complaint_ID = e.Complaint_ID  WHERE    cl.server = 'ZOHARI';
SELECT CONCAT(c.first,'', c.middle,'', c.last) AS full_name FROM client c JOIN callcenterlogs cl ON c.client_id = cl.rand_client WHERE cl.ser_time > '00:20:00';
SELECT c.last FROM client c JOIN callcenterlogs cl ON c.client_id = cl.rand_client WHERE cl.priority = 0 LIMIT 5;
SELECT call_id FROM callcenterlogs JOIN client ON callcenterlogs.rand_client = client.client_id WHERE client.first LIKE 'B%';
SELECT e.Product FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Alexander' AND c.last = 'Lewis' AND c.middle = 'Bronx';
SELECT c.first FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE c.sex = 'Male' AND e.`Timely response?` = 'No';
SELECT e.Product, COUNT(e.Client_ID) as num_complaints FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.age > 65 GROUP BY e.Product ORDER BY num_complaints DESC LIMIT 1;
SELECT    CASE      WHEN c.age BETWEEN 13 AND 19 THEN 'Teenager'     WHEN c.age BETWEEN 20 AND 65 THEN 'Adult'     ELSE 'Elder'   END AS Age_Group,   COUNT(e.Complaint_ID) AS Num_of_Complaints FROM    client c    JOIN events e ON c.client_id = e.Client_ID WHERE    e.Product = 'Credit Card' GROUP BY    CASE      WHEN c.age BETWEEN 13 AND 19 THEN 'Teenager'     WHEN c.age BETWEEN 20 AND 65 THEN 'Adult'     ELSE 'Elder'   END;
SELECT e.Issue FROM events e JOIN callcenterlogs c ON e.Complaint_ID = c.Complaint_ID WHERE c.ser_time < '00:10:00';
SELECT "Date received"  FROM events  WHERE "Submitted via" = 'Fax';
SELECT CONCAT(c.first,'', c.middle,'', c.last) AS full_name FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Issue = 'Balance transfer';
SELECT email FROM client WHERE client_id IN (   SELECT Client_ID   FROM events   WHERE Submitted_via = 'Postal mail' );
SELECT AVG(c.age)  FROM client c  JOIN events e ON c.client_id = e.Client_ID  WHERE e."Company response to consumer" = 'Closed with relief';
SELECT AVG(c.age)  FROM client c  JOIN callcenterlogs cl ON c.client_id = cl.rand_client  WHERE cl.type = 'TT';
SELECT Complaint_ID, call_id, phonefinal FROM callcenterlogs WHERE server = 'AVIDAN' AND Date_received BETWEEN '2014-01-01' AND '2014-12-30';
SELECT AVG(ser_time)  FROM callcenterlogs  WHERE Date_received BETWEEN '2017-01-01' AND '2017-04-01' AND server = 'DARMON';
SELECT    YEAR(e.Date_received),    COUNT(e.Complaint_ID)  FROM    events e  WHERE    e.Product = 'Credit card' AND e.Issue = 'Overlimit fee'  GROUP BY    YEAR(e.Date_received);
SELECT COUNT(*) FROM client WHERE sex = 'Female' AND age < 18 AND state IN (     SELECT State     FROM state     WHERE Region = 'Middle Atlantic' );
SELECT CONCAT(c.year, '-', c.month, '-', c.day) AS full_birthdate, c.email, c.phone FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.city = 'Indianapolis' ORDER BY c.year DESC, c.month DESC, c.day DESC LIMIT 1;
SELECT city, COUNT(*) as num_five_star FROM reviews JOIN district ON reviews.district_id = district.district_id WHERE Stars = 5 AND Date LIKE '2016%' GROUP BY city ORDER BY num_five_star DESC LIMIT 5;
SELECT MAX(ser_time)  FROM callcenterlogs  WHERE call_id IN (   SELECT Complaint_ID    FROM events    WHERE Issue = 'Arbitration' );
SELECT social, state  FROM client  WHERE phone = '100-121-8371';
SELECT CONCAT(c.first,'', c.middle,'', c.last) AS full_name, c.phone FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.division = 'Pacific';
SELECT c.social,         MAX(DATEDIFF(e.Date_sent_to_company, e.Date_received)) AS delay_days,        e.Company_response_to_consumer FROM client c JOIN events e ON c.client_id = e.Client_ID GROUP BY c.social, e.Company_response_to_consumer ORDER BY delay_days DESC LIMIT 1;
SELECT COUNT(*) FROM client WHERE sex = 'Female' AND age > 30;
SELECT first, last  FROM client  WHERE city = 'New York City';
SELECT MAX(age) FROM client WHERE sex = 'Male';
SELECT d.division, COUNT(c.client_id) AS num_clients FROM client c JOIN district d ON c.district_id = d.district_id GROUP BY d.division;
SELECT    (COUNT(CASE WHEN c.sex = 'Female' THEN c.client_id END) /     COUNT(c.client_id)) * 100 AS Percentage_of_Female_Clients FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.division = 'Middle Atlantic';
SELECT AVG(c.age)  FROM client c  JOIN district d ON c.district_id = d.district_id  WHERE d.division = 'South Atlantic';
SELECT d.city, COUNT(c.client_id) as num_clients FROM client c JOIN district d ON c.district_id = d.district_id JOIN state s ON d.state_abbrev = s.StateCode WHERE s.Region = 'Midwest' GROUP BY d.city ORDER BY num_clients LIMIT 1;
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id JOIN state s ON d.state_abbrev = s.State WHERE s.Region = 'Northeast' AND c.email LIKE '%@outlook.com';
SELECT city FROM district JOIN client ON district.district_id = client.district_id JOIN state ON district.state_abbrev = state.StateCode WHERE region = 'North Central' AND age > 60 GROUP BY city ORDER BY COUNT(client_id) DESC LIMIT 1;
SELECT    (COUNT(CASE WHEN e.priority = 2 AND e.Issue = 'late fee' THEN e.Complaint_ID END) /     COUNT(e.Complaint_ID)) * 100 AS percentage FROM    events e WHERE    YEAR(e.`Date received`) = 2017;
SELECT state_abbrev, COUNT(city) as num_cities FROM district GROUP BY state_abbrev ORDER BY num_cities DESC LIMIT 1;
SELECT first, phone FROM client WHERE client_id IN (   SELECT Client_ID   FROM events   WHERE Complaint_ID = 'CR0922485' );
SELECT email FROM client WHERE client_id IN (   SELECT Client_ID   FROM events   WHERE Date_received = '2014-07-03' );
SELECT COUNT(*) FROM events e JOIN client c ON e.Client_ID = c.client_id JOIN district d ON c.district_id = d.district_id WHERE e.Date_received LIKE '2012%' AND d.city = 'Omaha' AND e.Product = 'Credit card';
SELECT COUNT(*)  FROM events  JOIN client ON events.Client_ID = client.client_id  WHERE events.`Date received` BETWEEN '2012-01-01' AND '2015-12-31'  AND events.`Submitted via` = 'Email'  AND client.sex = 'Female';
SELECT c.phone, e.Complaint_ID FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.'Company response to consumer' = 'In progress';
SELECT COUNT(*) FROM events e JOIN client c ON e.Client_ID = c.client_id JOIN district d ON c.district_id = d.district_id WHERE e.Date_received LIKE '2015%' AND e.Issue = 'Billing disputes' AND d.city = 'Portland';
SELECT    (COUNT(CASE WHEN DATEDIFF(e.Date_sent_to_company, e.Date_received) > 5 THEN 1 END) / COUNT(e.Complaint_ID)) * 100 FROM    events e   JOIN client c ON e.Client_ID = c.client_id   JOIN district d ON c.district_id = d.district_id WHERE    e.Date_received LIKE '2014%' AND d.city = 'Houston';
SELECT COUNT(*)  FROM events  WHERE Date_received LIKE '2012%' AND Submitted_via = 'Email';
SELECT e.Client_ID FROM events e WHERE e.Date_received = '2014-04-16' AND e.Submitted_via = 'Fax';
SELECT r.Date FROM reviews r JOIN district d ON r.district_id = d.district_id WHERE r.Product = 'Eagle Capital' AND d.city = 'Indianapolis' AND d.state_abbrev = 'IN';
SELECT COUNT(*)  FROM events  WHERE Date_received LIKE '2015%'    AND Timely_response = 'Yes'    AND Company_response_to_consumer = 'Closed with explanation';
SELECT e.Date_received FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.sex = 'Female' AND c.age BETWEEN 20 AND 40;
SELECT Product FROM reviews WHERE Stars = 1 AND Date = '2016-03-14' AND district_id IN (     SELECT district_id     FROM district     WHERE city = 'Newton' AND state_abbrev = 'MA' );
SELECT COUNT(*) FROM reviews JOIN district ON reviews.district_id = district.district_id WHERE reviews.Product = 'Eagle National Bank'  AND reviews.Stars = 5  AND district.city = 'Nashville'  AND district.state_abbrev = 'TN';
SELECT e.Issue FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.sex = 'Male' AND c.age < 25;
SELECT r.Product FROM reviews r JOIN district d ON r.district_id = d.district_id JOIN state s ON d.state_abbrev = s.StateCode WHERE r.Stars = 1 AND s.Region = 'Midwest';
SELECT DISTINCT e.Product FROM events e JOIN callcenterlogs c ON e.Complaint_ID = c.Complaint_ID WHERE c.server = 'TOVA' AND c.`Date received` LIKE '%03%' AND c.`Date received` LIKE '2017%';
SELECT d.division FROM reviews r JOIN district d ON r.district_id = d.district_id WHERE r.Date = '2017-12-17' AND r.Stars = 5 AND r.Product = 'Eagle National Mortgage';
SELECT c.phone FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Product = 'Credit card' AND c.age = (SELECT MAX(age) FROM client WHERE client_id IN (     SELECT Client_ID FROM events WHERE Product = 'Credit card' ));
SELECT COUNT(*)  FROM events  WHERE Date_received LIKE '2014%' AND Submitted_via = 'Phone';
SELECT e.Product, e.Issue FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.age > (SELECT AVG(age) * 0.6 FROM client);
SELECT    COUNT(CASE WHEN d.division = 'East North Central' THEN 1 END) / COUNT(*) * 100 AS percentage FROM    reviews r   JOIN district d ON r.district_id = d.district_id WHERE    r.Stars = 5;
SELECT company_name FROM production_company WHERE company_id IN (   SELECT company_id   FROM movie_company   WHERE movie_id IN (     SELECT movie_id     FROM movie     WHERE title = 'Four Rooms'   ) );
SELECT COUNT(DISTINCT mc.company_id) FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id WHERE m.title = 'Four Rooms';
SELECT m.title FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Universal Pictures';
SELECT m.title FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Universal Pictures' ORDER BY m.release_date DESC LIMIT 1;
SELECT p.person_name FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE mc.job = 'Director of Photography' AND m.title = 'Pirates of the Caribbean: At World''s End';
SELECT mc.job FROM movie_crew mc JOIN movie m ON mc.movie_id = m.movie_id JOIN person p ON mc.person_id = p.person_id WHERE m.title = 'Pirates of the Caribbean: At World''s End' AND p.person_name = 'Dariusz Wolski';
SELECT p.person_name FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Pirates of the Caribbean: At World''s End';
SELECT COUNT(*) FROM movie_crew JOIN movie ON movie_crew.movie_id = movie.movie_id WHERE movie.title = 'Pirates of the Caribbean: At World''s End' AND job = 'Producer';
SELECT p.person_name FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Pirates of the Caribbean: At World''s End' AND mc.job = 'Producer';
SELECT COUNT(DISTINCT m.movie_id) FROM movie m JOIN movie_crew mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE mc.job = 'Director of Photography' AND p.person_name = 'Dariusz Wolski';
SELECT title FROM movie WHERE movie_id IN (   SELECT mc.movie_id   FROM movie_crew mc   JOIN person p ON mc.person_id = p.person_id   WHERE mc.job = 'Director of Photography' AND p.person_name = 'Dariusz Wolski' ) ORDER BY vote_average DESC LIMIT 1;
SELECT MAX(m.release_date)  FROM movie m  JOIN movie_crew mc ON m.movie_id = mc.movie_id  JOIN person p ON mc.person_id = p.person_id  WHERE p.person_name = 'Dariusz Wolski';
SELECT    SUM(CASE WHEN m.vote_average > 5 THEN 1 ELSE 0 END) / COUNT(m.movie_id) * 100 AS percentage FROM    movie m   JOIN movie_crew mc ON m.movie_id = mc.movie_id   JOIN person p ON mc.person_id = p.person_id WHERE    mc.job = 'Director of Photography' AND p.person_name = 'Dariusz Wolski';
SELECT AVG(revenue)  FROM movie  WHERE movie_id IN (   SELECT mc.movie_id    FROM movie_crew mc    JOIN person p ON mc.person_id = p.person_id    WHERE mc.job = 'Director of Photography' AND p.person_name = 'Dariusz Wolski' )
SELECT title FROM movie WHERE revenue = '559852396';
SELECT mc.job FROM movie m JOIN movie_crew mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE m.title = 'Days of Thunder' AND p.person_name = 'David Rubin';
SELECT COUNT(mc.movie_id) FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id WHERE mc.job = 'Director' AND p.person_name = 'Michael Bay';
SELECT COUNT(mk.keyword_id)  FROM movie m  JOIN movie_keywords mk ON m.movie_id = mk.movie_id  WHERE m.title = 'I Hope They Serve Beer in Hell';
SELECT p.person_name FROM movie m JOIN movie_crew mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE m.title = 'Land of the Dead' AND mc.job = 'Director';
SELECT COUNT(mc.movie_id) FROM movie_company mc JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Paramount Animation';
SELECT COUNT(*) FROM movie_cast JOIN movie ON movie_cast.movie_id = movie.movie_id JOIN gender ON movie_cast.gender_id = gender.gender_id WHERE movie.title = 'Spider-Man 3' AND gender.gender = 'Female';
SELECT keyword_name, COUNT(keyword_name) as count FROM movie_keywords JOIN keyword ON movie_keywords.keyword_id = keyword.keyword_id GROUP BY keyword_name ORDER BY count DESC LIMIT 1;
SELECT COUNT(mc.person_id)  FROM movie_crew mc  JOIN movie m ON mc.movie_id = m.movie_id  WHERE m.title = 'The Amityville Horror' AND mc.job = 'Producer';
SELECT company_name FROM movie_company JOIN movie ON movie.movie_id = movie_company.movie_id WHERE title = 'Crazy Heart';
SELECT COUNT(m.movie_id) FROM movie m JOIN movie_keywords mk ON m.movie_id = mk.movie_id JOIN keyword k ON mk.keyword_id = k.keyword_id WHERE k.keyword_name ='saving the world';
SELECT title, popularity FROM movie WHERE movie_id IN (   SELECT movie_id   FROM movie_company   WHERE company_id IN (     SELECT company_id     FROM production_company     WHERE company_name = 'Cruel and Unusual Films'   ) ) ORDER BY popularity DESC LIMIT 1;
SELECT d.department_name FROM movie m JOIN movie_crew mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id JOIN department d ON mc.department_id = d.department_id WHERE m.title = 'Reign of Fire' AND p.person_name = 'Marcia Ross';
SELECT AVG(m.budget)  FROM movie m  JOIN movie_crew mc ON m.movie_id = mc.movie_id  JOIN person p ON mc.person_id = p.person_id  WHERE mc.job = 'Director' AND p.person_name = 'Jaume Collet-Serra';
SELECT    SUM(CASE WHEN mc.gender_id IN (SELECT gender_id FROM gender WHERE gender = 'Male') THEN 1 ELSE 0 END) / COUNT(mc.gender_id) * 100 AS percentage FROM    movie_cast mc JOIN    movie m ON mc.movie_id = m.movie_id WHERE    m.title = 'Bride Wars';
SELECT title FROM movie ORDER BY budget DESC LIMIT 1;
SELECT COUNT(*) FROM movie WHERE revenue > 1000000000;
SELECT MIN(release_date)  FROM movie;
SELECT COUNT(*) FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'John Young';
SELECT title FROM movie ORDER BY popularity DESC LIMIT 1;
SELECT person_name FROM person WHERE person_id = 1325273;
SELECT company_name FROM production_company WHERE company_id = (   SELECT company_id   FROM movie_company   GROUP BY company_id   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT p.person_name FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE mc.character_name = 'Captain Jack Sparrow' AND m.title LIKE 'Pirates of the Caribbean%';
SELECT m.title, m.popularity FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Walt Disney Pictures' ORDER BY m.popularity DESC LIMIT 1;
SELECT COUNT(mc.movie_id) FROM movie_company mc JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Universal Studios';
SELECT company_name FROM production_company WHERE company_id = (   SELECT company_id   FROM movie_company   WHERE movie_id = (     SELECT movie_id     FROM movie     ORDER BY revenue DESC     LIMIT 1   ) )
SELECT COUNT(mc.person_id) FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id JOIN gender g ON p.gender_id = g.gender_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Mr. Smith Goes to Washington' AND g.gender = 'Female';
SELECT company_name FROM production_company WHERE company_id IN (   SELECT company_id   FROM movie_company   GROUP BY company_id   HAVING COUNT(*) >= 200 );
SELECT COUNT(mc.movie_id) FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Harrison Ford';
SELECT m.title FROM movie m JOIN movie_cast mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Jamie Foxx' ORDER BY m.release_date DESC LIMIT 1;
SELECT COUNT(DISTINCT m.movie_id) FROM movie m JOIN movie_cast mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE m.release_date LIKE '1995%' AND p.person_name = 'Quentin Tarantino';
SELECT m.title FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'Crime' ORDER BY m.release_date LIMIT 1;
SELECT COUNT(m.movie_id) FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'Horror';
SELECT person_id FROM movie_crew WHERE movie_id = 12 AND job = 'Second Film Editor' AND cast_order = 2;
SELECT COUNT(*) FROM movie_crew WHERE movie_id = 129 AND job = 'Animation';
SELECT mc.job, p.person_name FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id WHERE mc.movie_id = 19 AND mc.department_id = 7;
SELECT person_id, character_name FROM movie_cast WHERE movie_id = 285 AND cast_order BETWEEN 2 AND 9;
SELECT COUNT(*)  FROM movie_cast  WHERE person_id IN (SELECT person_id FROM person WHERE person_name = 'Bob Peterson');
SELECT mc.movie_id, mc.character_name FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Jim Carrey';
SELECT p.person_name FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id JOIN gender g ON mc.gender_id = g.gender_id WHERE mc.movie_id = 1865 AND g.gender = 'Female';
SELECT m.title FROM movie m JOIN movie_cast mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Jim Carrey';
SELECT p.person_name FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE mc.job = 'Director' AND m.release_date BETWEEN '1916-01-02' AND '1925-12-30';
SELECT COUNT(DISTINCT m.movie_id) FROM movie m JOIN movie_cast mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE m.release_date BETWEEN '1990-01-02' AND '2000-12-30' AND p.person_name = 'Uma Thurman';
SELECT m.title FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'Horror' AND m.vote_average > 7;
SELECT mg.genre_name, m.popularity FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.revenue >= 120000000 AND m.release_date BETWEEN '2012-01-01' AND '2015-12-31';
SELECT COUNT(*) FROM movie JOIN production_country ON movie.movie_id = production_country.movie_id WHERE country_id IN (SELECT country_id FROM country WHERE country_name = 'India') AND release_date BETWEEN '1990-01-02' AND '2003-12-30' AND revenue > 75000000 AND popularity >= 20;
SELECT m.title, m.budget, m.revenue, c.country_name FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE m.budget = (SELECT MAX(budget) FROM movie);
SELECT m.title FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE l.language_name = 'Latin' AND m.release_date BETWEEN '1990-01-01' AND '1995-12-31';
SELECT AVG(m.revenue) FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE c.country_name = 'United States of America' AND m.release_date LIKE '2006%';
SELECT    AVG_USA - AVG_INDIA AS revenue_gap FROM (   SELECT      AVG(revenue) FILTER (WHERE c.country_name = 'United States of America') AS AVG_USA,     AVG(revenue) FILTER (WHERE c.country_name = 'India') AS AVG_INDIA   FROM      movie m   JOIN      production_country pc ON m.movie_id = pc.movie_id   JOIN      country c ON pc.country_id = c.country_id   WHERE      m.release_date LIKE '2016%' ) AS subquery;
SELECT    SUM(CASE WHEN mg.genre_id IN (SELECT genre_id FROM genre WHERE genre_name = 'Romance') THEN 1 ELSE 0 END) / COUNT(m.movie_id) * 100 AS percentage FROM    movie m   JOIN production_country pc ON m.movie_id = pc.movie_id   JOIN country c ON pc.country_id = c.country_id   JOIN movie_genres mg ON m.movie_id = mg.movie_id WHERE    c.country_name = 'India'    AND m.release_date BETWEEN '2015-01-01' AND '2015-12-31';
SELECT p.person_name FROM person p JOIN movie_cast mc ON p.person_id = mc.person_id WHERE mc.character_name = 'Optimus Prime (voice)';
SELECT g.gender FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id JOIN gender g ON mc.gender_id = g.gender_id WHERE mc.character_name = 'USAF Master Sgt. Epps';
SELECT company_name FROM production_company WHERE company_id IN (   SELECT company_id   FROM movie_company   WHERE movie_id IN (     SELECT movie_id     FROM movie     WHERE title = 'Ultramarines: A Warhammer 40,000 Movie'   ) )
SELECT m.title FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Radiant Film GmbH';
SELECT g.genre_name FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.title = 'Sky Captain and the World of Tomorrow';
SELECT k.keyword_name FROM movie_keywords mk JOIN movie m ON mk.movie_id = m.movie_id JOIN keyword k ON mk.keyword_id = k.keyword_id WHERE m.title = 'Sky Captain and the World of Tomorrow';
SELECT c.country_name FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE m.title = 'Gojira ni-sen mireniamu';
SELECT m.title FROM movie m JOIN movie_keywords mk ON m.movie_id = mk.movie_id JOIN keyword k ON mk.keyword_id = k.keyword_id WHERE k.keyword_name = 'extremis';
SELECT m.title FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE c.country_name = 'France' LIMIT 10;
SELECT p.person_name FROM movie m JOIN movie_crew mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE m.title = 'Transformers' AND mc.job = 'Director';
SELECT p.person_name, mc.job FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Mad Max: Fury Road' LIMIT 10;
SELECT    SUM(CASE WHEN mg.genre_id IN (SELECT genre_id FROM genre WHERE genre_name = 'animation') THEN 1 ELSE 0 END) / COUNT(mc.movie_id) * 100 AS percentage FROM    movie m JOIN    production_country pc ON m.movie_id = pc.movie_id JOIN    country c ON pc.country_id = c.country_id JOIN    movie_genres mg ON m.movie_id = mg.movie_id WHERE    c.country_name = 'Japan';
SELECT    SUM(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) / SUM(CASE WHEN gender.gender = 'Male' THEN 1 ELSE 0 END) AS ratio,   SUM(CASE WHEN gender.gender IS NULL THEN 1 ELSE 0 END) AS unspecified_genders FROM    movie_cast   JOIN person ON movie_cast.person_id = person.person_id   JOIN gender ON movie_cast.gender_id = gender.gender_id   JOIN movie ON movie_cast.movie_id = movie.movie_id WHERE    movie.title = 'Iron Man';
SELECT title FROM movie WHERE release_date < '2000-01-01' LIMIT 5;
SELECT mk.keyword_id FROM movie_keywords mk JOIN movie m ON mk.movie_id = m.movie_id WHERE m.title = 'Sin City';
SELECT m.title FROM movie m JOIN movie_keywords mk ON m.movie_id = mk.movie_id JOIN keyword k ON mk.keyword_id = k.keyword_id WHERE k.keyword_name = 'angel';
SELECT keyword_name FROM keyword WHERE keyword_id IN (     SELECT keyword_id     FROM movie_keywords     WHERE movie_id IN (         SELECT movie_id         FROM movie         WHERE popularity = (SELECT MAX(popularity) FROM movie)     ) );
SELECT mg.genre_id FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id WHERE m.title = 'The Dark Knight';
SELECT m.title FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'Thriller';
SELECT m.title FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.movie_status = 'rumoured' AND g.genre_name = 'Drama' LIMIT 5;
SELECT g.genre_name FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.revenue = (SELECT MIN(revenue) FROM movie);
SELECT g.genre_name FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.runtime = 14;
SELECT g.genre_name FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.vote_average = (SELECT MAX(vote_average) FROM movie) AND m.revenue = (SELECT MIN(revenue) FROM movie);
SELECT g.genre_name FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.tagline = 'A long time ago in a galaxy far, far away…';
SELECT pc.country_id FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id WHERE m.title = 'Pirates of the Caribbean: Dead Man''s Chest';
SELECT m.title FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE c.country_name = 'Canada';
SELECT SUM(m.budget)  FROM movie m  JOIN movie_keywords mk ON m.movie_id = mk.movie_id  JOIN keyword k ON mk.keyword_id = k.keyword_id  WHERE k.keyword_name = 'video game';
SELECT AVG(m.revenue)  FROM movie m  JOIN movie_keywords mk ON m.movie_id = mk.movie_id  JOIN keyword k ON mk.keyword_id = k.keyword_id  WHERE k.keyword_name = 'civil war';
SELECT popularity FROM movie WHERE vote_count = (SELECT MAX(vote_count) FROM movie);
SELECT title FROM movie WHERE budget = 0 ORDER BY revenue DESC LIMIT 1;
SELECT mc.company_id FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id WHERE m.title = 'Gladiator';
SELECT mc.company_id FROM movie_company mc JOIN movie m ON mc.movie_id = m.movie_id WHERE m.release_date LIKE '1916%';
SELECT m.title FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Lucasfilm';
SELECT title FROM movie WHERE movie_id IN (   SELECT movie_id   FROM movie_company   WHERE company_id IN (     SELECT company_id     FROM production_company     WHERE company_name = 'Warner Bros. Pictures'   ) ) AND revenue = (   SELECT MAX(revenue)   FROM movie   WHERE movie_id IN (     SELECT movie_id     FROM movie_company     WHERE company_id IN (       SELECT company_id       FROM production_company       WHERE company_name = 'Warner Bros. Pictures'     )   ) );
SELECT m.release_date FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Twentieth Century Fox Film Corporation';
SELECT ml.language_id FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id WHERE m.title = 'Walk the Line';
SELECT language_id FROM movie_languages WHERE movie_id = (   SELECT movie_id   FROM movie   ORDER BY popularity DESC   LIMIT 1 )
SELECT l.language_name FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE m.title = 'C''era una volta il West';
SELECT m.title FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE m.movie_status = 'Post Production' AND l.language_name = 'Nederlands';
SELECT m.tagline FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE l.language_name = 'Polski';
SELECT m.homepage FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE l.language_name = 'Bahasa Indonesia';
SELECT    SUM(CASE WHEN ml.language_name = 'English' THEN m.revenue ELSE 0 END) -    SUM(CASE WHEN ml.language_name = 'Latin' THEN m.revenue ELSE 0 END) AS revenue_difference FROM    movie m JOIN    movie_languages ml ON m.movie_id = ml.movie_id JOIN    language l ON ml.language_id = l.language_id;
SELECT SUM(m.revenue) AS total_revenue FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name IN ('Fantasy Films', 'Live Entertainment');
SELECT AVG(m.revenue)  FROM movie m  JOIN movie_languages ml ON m.movie_id = ml.movie_id  JOIN language l ON ml.language_id = l.language_id  WHERE l.language_name = 'Latin';
SELECT LEFT(person_name, LOCATE(' ', person_name) - 1) AS first_name, COUNT(*) AS count FROM person GROUP BY first_name ORDER BY count DESC LIMIT 1;
SELECT AVG(crew_count) AS avg_crews_per_movie FROM (   SELECT movie_id, COUNT(person_id) AS crew_count   FROM movie_crew   GROUP BY movie_id ) AS crew_counts;
SELECT keyword_name FROM keyword WHERE keyword_name LIKE '%christmas%';
SELECT MAX(runtime)  FROM movie;
SELECT country_iso_code  FROM country  WHERE country_name = 'Kyrgyz Republic';
SELECT overview FROM movie WHERE title = 'The Pacifier';
SELECT COUNT(mc.movie_id) FROM movie_company mc JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Eddie Murphy Productions';
SELECT p.person_name FROM person p JOIN movie_cast mc ON p.person_id = mc.person_id WHERE mc.character_name LIKE '%captain%';
SELECT keyword_name, COUNT(keyword_name) as count FROM movie_keywords JOIN movie ON movie_keywords.movie_id = movie.movie_id JOIN keyword ON movie_keywords.keyword_id = keyword.keyword_id WHERE release_date LIKE '%2006%' GROUP BY keyword_name ORDER BY count DESC LIMIT 1;
SELECT COUNT(DISTINCT m.movie_id) FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE l.language_code = 'vi';
SELECT genre_name FROM genre WHERE genre_id IN (     SELECT genre_id     FROM movie_genres     GROUP BY genre_id     ORDER BY COUNT(*) ASC     LIMIT 1 OFFSET 2 );
SELECT l.language_name FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id JOIN language_role lr ON ml.language_role_id = lr.role_id WHERE m.tagline = 'An offer you can\'t refuse.' AND lr.language_role = 'Original';
SELECT AVG(m.revenue) FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE c.country_name = 'France';
SELECT mc.character_name FROM movie_cast mc JOIN gender g ON mc.gender_id = g.gender_id WHERE g.gender = 'Unspecified';
SELECT p.person_name, MAX(m.popularity) AS max_popularity FROM movie m JOIN movie_crew mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE mc.job = 'Director' GROUP BY p.person_name ORDER BY max_popularity DESC LIMIT 5;
SELECT mg.genre_name, m.title, m.budget FROM (   SELECT genre_name, MAX(budget) as max_budget   FROM movie m   JOIN movie_genres mg ON m.movie_id = mg.movie_id   JOIN genre g ON mg.genre_id = g.genre_id   GROUP BY genre_name ) AS sub JOIN movie m ON sub.max_budget = m.budget JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE (mg.genre_name, m.budget) IN (   SELECT genre_name, MAX(budget)   FROM movie m   JOIN movie_genres mg ON m.movie_id = mg.movie_id   JOIN genre g ON mg.genre_id = g.genre_id   GROUP BY genre_name ) ORDER BY mg.genre_name;
SELECT title FROM movie WHERE movie_id = (   SELECT movie_id   FROM movie_keywords   GROUP BY movie_id   ORDER BY COUNT(keyword_id) DESC   LIMIT 1 );
SELECT department_name, COUNT(department_id) as count FROM movie_crew JOIN department ON movie_crew.department_id = department.department_id GROUP BY department_name ORDER BY count DESC LIMIT 1;
SELECT    SUM(CASE WHEN pc.country_iso_code = 'US' THEN 1 ELSE 0 END) / COUNT(pc.country_id) * 100 AS percentage FROM    production_country pc   INNER JOIN movie m ON pc.movie_id = m.movie_id;
SELECT    AVG(female_male_ratio) AS average_ratio FROM (   SELECT      movie_id,     SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) /      SUM(CASE WHEN gender = 'Male' THEN 1 ELSE 0 END) AS female_male_ratio   FROM      movie_cast   JOIN      person ON movie_cast.person_id = person.person_id   JOIN      gender ON person.gender_id = gender.gender_id   GROUP BY      movie_id ) AS subquery;
SELECT title FROM movie WHERE release_date LIKE '1945%';
SELECT country_id, country_iso_code FROM country WHERE country_name = 'Belgium';
SELECT mc.character_name FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Catherine Deneuve';
SELECT m.title FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE l.language_name = 'Somali';
SELECT m.release_date, l.language_name FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE m.popularity = (SELECT MAX(popularity) FROM movie);
SELECT l.language_name FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id JOIN language_role lr ON ml.language_role_id = lr.role_id WHERE m.title = 'Four Rooms' AND lr.language_role = 'Original';
SELECT character_name FROM movie_cast WHERE movie_id = (SELECT movie_id FROM movie WHERE title = 'Open Water');
SELECT p.person_name FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Pirates of the Caribbean: At World''s End' AND mc.cast_order = (SELECT MIN(mc2.cast_order) FROM movie_cast mc2 WHERE mc2.movie_id = mc.movie_id);
SELECT p.person_name FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id WHERE mc.job = 'Camera Supervisor';
SELECT job FROM movie_crew WHERE person_id = (   SELECT person_id   FROM person   WHERE person_name = 'Sally Menke' );
SELECT p.person_name, d.department_name FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id JOIN department d ON mc.department_id = d.department_id JOIN movie m ON mc.movie_id = m.movie_id WHERE mc.job = 'Music Editor' AND m.title = 'Pirates of the Caribbean: At World''s End';
SELECT m.title, m.revenue FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'DreamWorks';
SELECT COUNT(m.movie_id) FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE c.country_name = 'Canada';
SELECT g.genre_name FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.title = 'Forrest Gump';
SELECT mc.company_name FROM movie_company mc JOIN (   SELECT movie_id   FROM movie   WHERE release_date LIKE '2016%'   AND (runtime - AVG(runtime)) / AVG(runtime) * 100 > 35 ) m ON mc.movie_id = m.movie_id;
SELECT    (COUNT(CASE WHEN mk.keyword_name = 'woman director' THEN 1 ELSE NULL END) -     COUNT(CASE WHEN mk.keyword_name = 'independent film' THEN 1 ELSE NULL END)) /    COUNT(m.movie_id) * 100 AS percentage FROM    movie m    JOIN movie_keywords mk ON m.movie_id = mk.movie_id    JOIN keyword k ON mk.keyword_id = k.keyword_id  WHERE    k.keyword_name IN ('woman director', 'independent film');
SELECT g.genre_name FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.title = 'Dancer in the Dark';
SELECT COUNT(*) FROM movie JOIN movie_genres ON movie.movie_id = movie_genres.movie_id JOIN genre ON movie_genres.genre_id = genre.genre_id WHERE genre.genre_name = 'Adventure' AND movie.release_date LIKE '2000%';
SELECT m.title FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Paramount Pictures' AND m.release_date LIKE '2000%';
SELECT keyword_name FROM movie_keywords JOIN movie ON movie_keywords.movie_id = movie.movie_id WHERE title = 'Finding Nemo';
SELECT m.title FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'horror' AND m.vote_average > 7;
SELECT COUNT(DISTINCT company_name)  FROM (   SELECT company_id, company_name    FROM movie_company    GROUP BY company_id, company_name    HAVING COUNT(DISTINCT movie_id) > 150 ) AS subquery;
SELECT mc.job FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id WHERE p.person_name = 'Mark Hammel';
SELECT COUNT(DISTINCT mc.person_id) FROM movie m JOIN movie_cast mc ON m.movie_id = mc.movie_id JOIN gender g ON mc.gender_id = g.gender_id WHERE m.title = 'Pirates of the Caribbean: At World''s End' AND g.gender ='male' AND mc.cast_order = (SELECT MIN(cast_order) FROM movie_cast WHERE movie_id = m.movie_id);
SELECT m.title FROM movie m JOIN movie_cast mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Harrison Ford';
SELECT character_name FROM movie_cast JOIN person ON movie_cast.person_id = person.person_id JOIN movie ON movie_cast.movie_id = movie.movie_id WHERE person.person_name = 'Orlando Bloom' AND movie.title = 'Pirates of the Caribbean: The Curse of the Black Pearl';
SELECT AVG(horror_count) AS avg_horror_movies FROM (   SELECT COUNT(m.movie_id) AS horror_count   FROM movie m   JOIN movie_genres mg ON m.movie_id = mg.movie_id   JOIN genre g ON mg.genre_id = g.genre_id   WHERE g.genre_name = 'horror'   GROUP BY m.movie_id ) AS horror_movies;
SELECT p.person_name FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Pirates of the Caribbean: At World''s End' AND mc.job = 'Producer';
SELECT AVG(m.revenue) AS average_income, m.title FROM movie m JOIN movie_keywords mk ON m.movie_id = mk.movie_id JOIN keyword k ON mk.keyword_id = k.keyword_id WHERE k.keyword_name = 'paris' GROUP BY m.title;
SELECT COUNT(*) FROM Method WHERE Lang = 'en' AND CommentIsXml = 1;
SELECT    SPLIT_PART(Name, '.', 2) AS task FROM    Method WHERE    NameTokenized = 'online median filter test median window filling';
SELECT SolutionId, MAX(SampledAt) AS MaxSampledAt FROM Method GROUP BY SolutionId ORDER BY MaxSampledAt DESC LIMIT 1;
SELECT Url, Forks FROM Repo ORDER BY Forks DESC LIMIT 1;
SELECT RepoId FROM Solution GROUP BY RepoId ORDER BY COUNT(Path) DESC LIMIT 1;
SELECT Url, Stars FROM Repo ORDER BY Stars DESC LIMIT 1;
SELECT Path FROM Solution WHERE ProcessedTime = (SELECT MAX(ProcessedTime) FROM Solution);
SELECT MAX(r.Watchers), r.ProcessedTime FROM Repo r ORDER BY r.Watchers DESC LIMIT 1;
SELECT r.Url FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE s.Path = 'nofear_Mara\Mara.sln';
SELECT r.Url, MAX(r.ProcessedTime) AS LongestProcessedTime,         CASE WHEN s.WasCompiled = 1 THEN 'Yes' ELSE 'No' END AS CanBeImplementedWithoutCompilation FROM Repo r JOIN Solution s ON r.Id = s.RepoId GROUP BY r.Url, s.WasCompiled ORDER BY LongestProcessedTime DESC LIMIT 1;
SELECT m.NameTokenized FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE s.Path ='maravillas_linq-to-delicious\tasty.sln';
SELECT r.Url, COUNT(s.Path) AS num_solution_paths FROM Repo r JOIN Solution s ON r.Id = s.RepoId WHERE r.Stars BETWEEN 6000 AND 9000 AND s.WasCompiled = 0 GROUP BY r.Url ORDER BY num_solution_paths DESC LIMIT 1;
SELECT ApiCalls FROM Method JOIN Solution ON Method.SolutionId = Solution.Id JOIN Repo ON Solution.RepoId = Repo.Id WHERE Repo.Url = 'https://github.com/wallerdev/htmlsharp.git';
SELECT COUNT(DISTINCT s.Path) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Watchers = (     SELECT MAX(Watchers)     FROM Repo     WHERE Watchers < (         SELECT MAX(Watchers)         FROM Repo     ) )
SELECT AVG(S.ProcessedTime)  FROM Solution S  JOIN Repo R ON S.RepoId = R.Id  WHERE R.Url = 'https://github.com/zphingphong/DiscardCustomerApp.git';
SELECT m.FullComment FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.Path = 'bmatzelle_nini\Source\Nini.sln' AND m.NameTokenized = 'alias text add alias';
SELECT ApiCalls FROM Method WHERE SolutionId = (   SELECT Id   FROM Solution   WHERE Path ='mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln' );
SELECT COUNT(s.Path) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Url = 'https://github.com/jeffdik/tachy.git' AND s.WasCompiled = 0;
SELECT Lang, ProcessedTime FROM Method WHERE NameTokenized = 'about box1 dispose';
SELECT m.SampledAt FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Name = 'GitHubRepo.Cli.GitHubClientWrapper.GetReleases' AND s.Path ='maxild_playground\Playground.sln';
SELECT m.Lang FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE s.Path = 'opendns_diagnosticapp\windows\OpenDnsDiagnostic.sln';
SELECT    SPLIT_PART(Name, '.', 2) AS task FROM    Method WHERE    NameTokenized = 'html parser feed';
SELECT CommentIsXml  FROM Method  WHERE Name = 'HtmlSharp.HtmlParser.Feed';
SELECT *  FROM Method  WHERE Summary = 'Write a command to the log';
SELECT COUNT(DISTINCT s.Id) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Stars = (SELECT MAX(Stars) FROM Repo);
SELECT s.Path FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Stars = (SELECT MAX(Stars) FROM Repo);
SELECT r.Url FROM Repo r JOIN Solution s ON r.Id = s.RepoId WHERE s.Id = 12;
SELECT COUNT(*) FROM Solution WHERE RepoId IN (   SELECT Id   FROM Repo   WHERE Forks > 1000 ) AND WasCompiled = 0;
SELECT s.Id FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE s.Id IN (18, 19) AND r.Watchers > (SELECT r2.Watchers                    FROM Solution s2                    JOIN Repo r2 ON s2.RepoId = r2.Id                    WHERE s2.Id IN (18, 19)                    AND s2.Id!= s.Id);
SELECT COUNT(*) FROM Solution WHERE ProcessedTime = (SELECT MAX(ProcessedTime) FROM Solution) AND WasCompiled = 0;
SELECT r.ProcessedTime FROM Repo r JOIN Solution s ON r.Id = s.RepoId WHERE s.Path = 'jeffdik_tachy\src\Tachy.sln';
SELECT r.Url FROM Repo r JOIN Solution s ON r.Id = s.RepoId WHERE s.Id = 9;
SELECT s.Path FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Url = 'https://github.com/maxild/playground.git';
SELECT COUNT(DISTINCT r.Id) FROM Repo r JOIN Solution s ON r.Id = s.RepoId WHERE r.Stars > 200 AND s.ProcessedTime < 636439500080712000;
SELECT s.Id FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Id IN (   SELECT Id   FROM Repo   ORDER BY Forks DESC   LIMIT 3 )
SELECT AVG(s.ProcessedTime)  FROM Solution s  JOIN Repo r ON s.RepoId = r.Id  WHERE r.Url = 'https://github.com/jeffdik/tachy.git';
SELECT    ((r1.Forks - r2.Forks) / r2.Forks) * 100  FROM    Repo r1    INNER JOIN Solution s1 ON r1.Id = s1.RepoId    INNER JOIN Repo r2    INNER JOIN Solution s2 ON r2.Id = s2.RepoId  WHERE    s1.Id = 18    AND s2.Id = 19;
SELECT Lang FROM Method WHERE Name = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn';
SELECT FullComment FROM Method WHERE Name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows';
SELECT Summary FROM Method WHERE Name = 'Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection';
SELECT NameTokenized  FROM Method  WHERE Name = 'Supay.Irc.Messages.KnockMessage.GetTokens';
SELECT r.Stars FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE s.Id = 45997;
SELECT COUNT(s.Id) FROM Repo r JOIN Solution s ON r.Id = s.RepoId WHERE r.Stars = 8094;
SELECT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally';
SELECT s.ProcessedTime FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.NameTokenized = 'interp parser expr';
SELECT RepoId FROM Solution WHERE Id IN (   SELECT SolutionId   FROM Method   WHERE Name = 'SCore.Poisson.ngtIndex' );
SELECT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Name = 'ExportToRTF.RTFStyleSheet.H6Write';
SELECT COUNT(S.Id) FROM Repo R JOIN Solution S ON R.Id = S.RepoId WHERE R.Watchers = 8094;
SELECT r.Url FROM Repo r JOIN Solution s ON r.Id = s.RepoId GROUP BY r.Url ORDER BY COUNT(s.Id) DESC LIMIT 1;
SELECT COUNT(s.Id) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Forks = 1445;
SELECT Path FROM Solution WHERE RepoId IN (   SELECT SolutionId   FROM Method   WHERE Lang = 'zh-cn' ) GROUP BY Path ORDER BY COUNT(*) DESC LIMIT 1;
SELECT r.Watchers FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE s.Id = 338082;
SELECT COUNT(s.Id) FROM Repo r JOIN Solution s ON r.Id = s.RepoId WHERE r.Stars = 189 AND s.WasCompiled = 0;
SELECT s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy';
SELECT s.ProcessedTime FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.NameTokenized = 't jadwal entity get single mpic';
SELECT r.Id FROM Method m JOIN Solution s ON m.SolutionId = s.Id JOIN Repo r ON s.RepoId = r.Id WHERE m.Name = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal';
SELECT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Summary = 'Refetches the Entity from the persistent storage. Refetch is used to re-load an Entity which is marked "Out-of-sync", due to a save action. Refetching an empty Entity has no effect.';
SELECT COUNT(s.Id) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Stars = 3060;
SELECT s.Path FROM Solution s JOIN (   SELECT SolutionId   FROM Method   WHERE Lang ='sw'   GROUP BY SolutionId   ORDER BY COUNT(*) DESC   LIMIT 1 ) m ON s.Id = m.SolutionId;
SELECT    ((     (SELECT Watchers FROM Repo WHERE Id =        (SELECT RepoId FROM Solution WHERE Id = 83855)     ) -      (SELECT Watchers FROM Repo WHERE Id =        (SELECT RepoId FROM Solution WHERE Id = 1502)     )   ) * 100) /    (SELECT Watchers FROM Repo WHERE Id =      (SELECT RepoId FROM Solution WHERE Id = 1502)   ) AS percentage;
SELECT    ((     (SELECT Stars FROM Repo r       JOIN Solution s ON r.Id = s.RepoId       WHERE s.Id = 51424)      -      (SELECT Stars FROM Repo r       JOIN Solution s ON r.Id = s.RepoId       WHERE s.Id = 167053)   ) * 100.0)    /    (SELECT Stars FROM Repo r     JOIN Solution s ON r.Id = s.RepoId     WHERE s.Id = 167053)  AS percentage;
SELECT      ((         (SELECT Forks FROM Repo WHERE Id IN (SELECT RepoId FROM Solution WHERE Id = 53546)) -         (SELECT Forks FROM Repo WHERE Id IN (SELECT RepoId FROM Solution WHERE Id = 1502))     ) / (SELECT Forks FROM Repo WHERE Id IN (SELECT RepoId FROM Solution WHERE Id = 1502)) * 100)  AS PercentageDifference;
SELECT m.Name FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.ProcessedTime = '636449700980488000';
SELECT COUNT(s.Id) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Url = 'https://github.com/derickbailey/presentations-and-training.git';
SELECT AVG(s.ProcessedTime) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Id IN (   SELECT r.Id   FROM Repo r   GROUP BY r.Id   ORDER BY COUNT(r.Forks) DESC   LIMIT 1 );
SELECT s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.Lang = 'it';
SELECT s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.Name ='spinachLexer.mT__55';
SELECT m.* FROM Method m JOIN Solution s ON m.SolutionId = s.Id JOIN Repo r ON s.RepoId = r.Id WHERE m.Lang = 'en' AND r.Id = 1093;
SELECT s.Path FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Url = 'https://github.com/ecoffey/Bebop.git';
SELECT DISTINCT r.Id FROM Repo r JOIN Solution s ON r.Id = s.RepoId JOIN Method m ON s.Id = m.SolutionId WHERE m.Lang = 'ro';
SELECT r.Id FROM Method m JOIN Solution s ON m.SolutionId = s.Id JOIN Repo r ON s.RepoId = r.Id WHERE m.NameTokenized = 'crc parameters get hash code';
SELECT COUNT(m.Id) FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.Path ='maravillas_linq-to-delicious\tasty.sln';
SELECT s.Id FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.ProcessedTime = '636430969128176000';
SELECT r.Url FROM Repo r JOIN Solution s ON r.Id = s.RepoId WHERE s.ProcessedTime = (SELECT MAX(ProcessedTime) FROM Solution);
SELECT s.Id FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Forks > (r.Watchers / 2);
SELECT (Forks / Stars) * 100 AS Percentage FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 104086);
SELECT Id FROM Repo ORDER BY Stars DESC LIMIT 1;
SELECT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Name = 'HtmlSharp.HtmlParser.Feed';
SELECT Forks FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 35);
SELECT s.Id FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Watchers = (SELECT MAX(Watchers) FROM Repo);
SELECT r.Stars FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE s.Id = 20;
SELECT    COUNT(m.Id) AS MethodsCount,    s.WasCompiled = 0 AS NeedsToBeCompiled FROM    Method m    JOIN Solution s ON m.SolutionId = s.Id  WHERE    s.Id = 1;
SELECT    (SUM(CASE WHEN m.CommentIsXml = 1 AND s.WasCompiled = 0 THEN 1 ELSE 0 END) / COUNT(CASE WHEN m.CommentIsXml = 1 THEN s.Id END)) * 100 FROM    Method m   JOIN Solution s ON m.SolutionId = s.Id;
SELECT m.Name FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.Path = 'wallerdev_htmlsharp\HtmlSharp.sln';
SELECT    (COUNT(CASE WHEN Stars > 2000 THEN 1 END) * 100.0) / COUNT(Id)  AS percentage FROM Repo;
SELECT r.Url FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE s.Id = 1;
SELECT Id FROM Repo WHERE Stars = 21 ORDER BY Forks DESC LIMIT 1;
SELECT    ROUND(     100.0 * SUM(CASE WHEN Lang = 'en' THEN 1 ELSE 0 END) / COUNT(*)   ) AS percentage FROM    Method WHERE    CommentIsXml = 1;
SELECT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.NameTokenized = 'html parser feed';
SELECT s.Id FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Forks = 238;
SELECT m.NameTokenized FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Lang = 'en' AND s.WasCompiled = 0;
SELECT COUNT(s.Id) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Stars > r.Forks + (r.Forks / 3);
SELECT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.FullComment = 'Feeds data into the parser';
SELECT COUNT(m.Id) FROM Method m JOIN Solution s ON m.SolutionId = s.Id JOIN Repo r ON s.RepoId = r.Id WHERE r.Id = 3 AND m.CommentIsXml = 1;
SELECT    (SUM(CASE WHEN s.WasCompiled = 0 THEN 1 ELSE 0 END) / COUNT(s.Id)) * 100 AS percentage FROM    Solution s   JOIN Method m ON s.Id = m.SolutionId WHERE    m.Lang = 'en';
SELECT    ((SELECT Stars FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 1))    - (SELECT Stars FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 2)))    * 100 / (SELECT Stars FROM Repo WHERE Id = (SELECT RepoId FROM Solution WHERE Id = 2))  AS PercentageDifference;
SELECT COUNT(DISTINCT s.Id) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Stars > r.Forks / 3;
SELECT SUBSTRING_INDEX(Name, '.', -1) AS Task FROM Method WHERE Id = 2;
SELECT CommentIsXml FROM Method WHERE Id = 8;
SELECT Url FROM Repo ORDER BY Watchers DESC LIMIT 1;
SELECT SUBSTRING_INDEX(Name, '.', -1) AS Task FROM Method WHERE Lang = 'cs';
SELECT s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Id = 3;
SELECT Lang FROM Method WHERE Id = 28 AND SolutionId IN (   SELECT Id   FROM Solution   WHERE RepoId = 3 );
SELECT s.ProcessedTime, COUNT(m.Id) AS NumMethods FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE s.Id = 1;
SELECT COUNT(DISTINCT m.Id) FROM Method m JOIN Solution s ON m.SolutionId = s.Id JOIN Repo r ON s.RepoId = r.Id WHERE m.NameTokenized LIKE 'query language%' GROUP BY r.Id HAVING COUNT(DISTINCT m.NameTokenized) > 1;
SELECT m.ApiCalls, s.Path FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Id = 10;
SELECT COUNT(m.Id) FROM Method m JOIN Solution s ON m.SolutionId = s.Id JOIN Repo r ON s.RepoId = r.Id WHERE r.Id = 150 AND m.FullComment IS NULL AND m.Summary IS NULL;
SELECT m.CommentIsXml FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Id = 50 AND s.Path ='managedfusion_managedfusion\ManagedFusion.sln';
SELECT    SUBSTRING_INDEX(Name, '.', -1) AS TaskMethod FROM    Method WHERE    NameTokenized ='string extensions to pascal case';
SELECT NameTokenized  FROM Method  WHERE NameTokenized = 'Sky.Excel.ExcelBook.TypeConvert';
SELECT COUNT(DISTINCT s.Path)  FROM Repo r  JOIN Solution s ON r.Id = s.RepoId  WHERE r.Url = 'https://github.com/jeffdik/tachy.git';
SELECT r.Watchers FROM Repo r JOIN Solution s ON r.Id = s.RepoId WHERE s.Path ='maff_se3ue7\US7.sln';
SELECT r.Url FROM Repo r JOIN Solution s ON r.Id = s.RepoId WHERE s.WasCompiled = 0 LIMIT 5;
SELECT s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.NameTokenized ='matrix multiply';
SELECT COUNT(*) FROM Method m JOIN Solution s ON m.SolutionId = s.Id JOIN Repo r ON s.RepoId = r.Id WHERE r.Url = 'https://github.com/dogeth/vss2git.git' AND m.CommentIsXml = 1;
SELECT TOP 5 s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.SampledAt = '636431758961741000';
SELECT r.Url FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE s.Path = 'joeyrobert_bloomfilter\DataTypes.BloomFilter.sln';
SELECT m.Name FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.Path = 'graffen_NLog.Targets.Syslog\src\NLog.Targets.Syslog.sln';
SELECT m.NameTokenized FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE s.Path = 'jurney_P4Backup\P4Backup\P4Backup.sln';
SELECT r.Url, m.Summary FROM Method m JOIN Solution s ON m.SolutionId = s.Id JOIN Repo r ON s.RepoId = r.Id WHERE m.Summary = 'A test for Decompose';
SELECT r.Stars FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE s.Path = 'ninject_Ninject\Ninject.sln';
SELECT COUNT(s.Path) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Stars = 111 AND r.Forks = 58 AND r.Watchers = 111;
SELECT AVG(s.ProcessedTime)  FROM Solution s  JOIN Repo r ON s.RepoId = r.Id  WHERE r.Stars = 254 AND r.Forks = 88 AND r.Watchers = 254;
SELECT COUNT(DISTINCT Lang)  FROM Method  JOIN Solution ON Method.SolutionId = Solution.Id  JOIN Repo ON Solution.RepoId = Repo.Id  WHERE Repo.Url = 'https://github.com/managedfusion/managedfusion.git';
SELECT COUNT(*)  FROM trains  WHERE direction = 'east';
SELECT COUNT(*)  FROM cars  WHERE train_id = 1;
SELECT shape FROM cars WHERE train_id = 1 AND position = 4;
SELECT t.id FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.shape IN ('elipse', 'bucket') GROUP BY t.id HAVING COUNT(DISTINCT c.id) >= 1;
SELECT COUNT(*)  FROM cars  WHERE train_id = 1 AND roof = 'none';
SELECT id FROM cars WHERE train_id = 1 AND wheels = 2;
SELECT COUNT(DISTINCT t.id) FROM trains t JOIN cars c ON t.id = c.train_id WHERE t.direction = 'east' AND c.shape IN ('elipse', 'bucket');
SELECT t.id FROM trains t WHERE t.direction = 'east' AND t.id IN (   SELECT train_id   FROM cars   GROUP BY train_id   HAVING COUNT(id) < 4 )
SELECT c.id FROM cars c JOIN trains t ON c.train_id = t.id WHERE c.sides = 'double' AND t.direction = 'west';
SELECT COUNT(*) FROM trains WHERE direction = 'east' AND id IN (   SELECT train_id   FROM cars   WHERE len > 5   GROUP BY train_id   HAVING COUNT(*) > 2 );
SELECT direction FROM trains WHERE id IN (   SELECT train_id   FROM cars   WHERE load_num = 0 ) GROUP BY direction;
SELECT direction FROM trains WHERE id IN (   SELECT train_id   FROM cars   WHERE shape = 'ellipse' );
SELECT COUNT(c.id) FROM cars c JOIN trains t ON c.train_id = t.id WHERE t.direction = 'east' AND c.len ='short';
SELECT c.shape FROM cars c JOIN trains t ON c.train_id = t.id WHERE c.position = 1 AND t.direction = 'east';
SELECT COUNT(c.id) FROM cars c JOIN trains t ON c.train_id = t.id WHERE t.direction = 'east' AND c.roof = 'flat';
SELECT COUNT(*) FROM cars WHERE train_id IN (SELECT id FROM trains WHERE direction = 'east') AND roof = 'flat' AND load_shape = 'circle';
SELECT direction, rectCarsNum FROM (   SELECT direction, COUNT(CASE WHEN shape ='rectangle' THEN 1 END) AS rectCarsNum   FROM trains   JOIN cars ON trains.id = cars.train_id   GROUP BY direction ) AS subquery ORDER BY rectCarsNum DESC LIMIT 1;
SELECT direction FROM trains WHERE id IN (   SELECT train_id   FROM cars   WHERE len ='short' AND position = 4   GROUP BY train_id   HAVING COUNT(id) = 4 );
SELECT AVG(calculation)  FROM (   SELECT train_id, COUNT(id) / COUNT(DISTINCT train_id) AS calculation    FROM cars    WHERE train_id IN (     SELECT id      FROM trains      WHERE direction = 'east'   )   GROUP BY train_id ) AS subquery;
SELECT    COUNT(CASE WHEN t.direction = 'east' THEN t.id END) / COUNT(t.id) * 100 FROM    trains t WHERE    t.id IN (     SELECT        train_id     FROM        cars     WHERE        shape IN ('bucket', 'ellipse')     GROUP BY        train_id     HAVING        COUNT(id) > 0   )
SELECT COUNT(*)  FROM cars  WHERE len ='short' AND shape = 'hexagon';
SELECT COUNT(*)  FROM trains  WHERE direction = 'west';
SELECT load_shape FROM cars WHERE shape = 'ellipse' AND len ='short';
SELECT c.train_id FROM cars c JOIN trains t ON c.train_id = t.id WHERE t.direction = 'east';
SELECT SUM(wheels)  FROM cars  WHERE len = 'long';
SELECT direction FROM trains GROUP BY direction ORDER BY COUNT(id) DESC LIMIT 1;
SELECT COUNT(*) FROM trains WHERE direction = 'east' AND id IN (   SELECT train_id   FROM cars   GROUP BY train_id   HAVING COUNT(*) >= 4 );
SELECT direction FROM trains WHERE id IN (   SELECT train_id   FROM cars   WHERE position = 2 AND shape ='rectangle'   GROUP BY train_id   HAVING COUNT(id) = (     SELECT MAX(cnt)     FROM (       SELECT train_id, COUNT(id) AS cnt       FROM cars       WHERE position = 2 AND shape ='rectangle'       GROUP BY train_id     ) AS subquery   ) )
SELECT COUNT(DISTINCT t.id) FROM trains t JOIN cars c ON t.id = c.train_id WHERE t.direction = 'west' AND c.sides = 'double' AND c.position = 3;
SELECT COUNT(*) FROM trains JOIN cars ON trains.id = cars.train_id WHERE trains.direction = 'east' AND cars.position = 1 AND cars.shape ='rectangular';
SELECT COUNT(DISTINCT t.id) FROM trains t JOIN (   SELECT train_id   FROM cars   WHERE roof = 'none'   GROUP BY train_id   HAVING COUNT(id) <= 1 ) c ON t.id = c.train_id WHERE t.direction = 'west';
SELECT direction FROM trains WHERE id IN (   SELECT train_id   FROM cars   GROUP BY train_id   HAVING COUNT(id) = 3 ) GROUP BY direction ORDER BY COUNT(direction) DESC LIMIT 1;
SELECT COUNT(t.id) FROM trains t JOIN cars c ON t.id = c.train_id WHERE t.direction = 'east' AND c.position = 1 AND c.load_num = 3;
SELECT COUNT(*) FROM cars JOIN trains ON cars.train_id = trains.id WHERE trains.direction = 'east' AND cars.position = 'trailPosi' AND cars.sides = 'double';
SELECT direction FROM trains WHERE id IN (   SELECT train_id   FROM cars   WHERE load_num = 0 );
SELECT direction FROM trains WHERE id IN (   SELECT train_id   FROM cars   WHERE position = 2 AND load_shape = 'diamond' );
SELECT COUNT(DISTINCT t.id) FROM trains t JOIN cars c ON t.id = c.train_id WHERE t.direction = 'west' AND c.wheels = 3 AND c.roof = 'jagged';
SELECT t.direction FROM trains t JOIN (   SELECT train_id   FROM cars   GROUP BY train_id   HAVING COUNT(*) <= 2 ) c ON t.id = c.train_id;
SELECT    direction,    COUNT(*) AS num_trains,    COUNT(*) / (SELECT COUNT(*) FROM trains) * 100 AS percentage FROM    trains  WHERE    id IN (     SELECT        train_id      FROM        cars      GROUP BY        train_id      HAVING        COUNT(*) >= 4   ) GROUP BY    direction;
WITH head_cars AS (   SELECT train_id, load_shape   FROM cars   WHERE position = 1 ), max_load_shape AS (   SELECT load_shape   FROM head_cars   GROUP BY load_shape   ORDER BY COUNT(*) DESC   LIMIT 1 ) SELECT    mls.load_shape,   COUNT(t.direction = 'east') * 100.0 / COUNT(t.id) AS percentage FROM    head_cars hc   JOIN trains t ON hc.train_id = t.id   CROSS JOIN max_load_shape mls GROUP BY    mls.load_shape;
SELECT CharacterName FROM characters WHERE MovieID = (SELECT MovieID                  FROM movie                  WHERE Title = 'Look Who''s Talking');
SELECT CharacterName, screentime FROM characters WHERE MovieID IN (   SELECT MovieID   FROM movie   WHERE Title = 'Batman' ) ORDER BY screentime DESC LIMIT 1;
SELECT a.Name FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE c.CharacterName = 'Joker' AND m.Title = 'Batman';
SELECT a.Name FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Batman';
SELECT m.Title FROM movie m JOIN characters c ON m.MovieID = c.MovieID WHERE c.Character_Name = 'Dr. Archibald ''Moonlight'' Graham';
SELECT m.Title FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Name = 'Tom Cruise';
SELECT COUNT(m.MovieID) FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Name = 'Morgan Freeman' AND m.MPAA_Rating = 'PG';
SELECT m.Title, m.Rating FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Name = 'Tom Cruise' ORDER BY m.Rating DESC LIMIT 1;
SELECT c.CharacterName FROM characters c JOIN actor a ON c.ActorID = a.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE a.Name = 'Tom Cruise' AND m.Title = 'Born on the Fourth of July';
SELECT CharacterName FROM characters JOIN actor ON characters.ActorID = actor.ActorID WHERE actor.Name = 'Tom Cruise';
SELECT a.Name, a.Height_Inches FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Batman' ORDER BY a.Height_Inches DESC LIMIT 1;
SELECT COUNT(DISTINCT m.MovieID) FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Gender = 'Male' AND a.Ethnicity = 'African American';
SELECT AVG(m.Rating)  FROM movie m  JOIN characters c ON m.MovieID = c.MovieID  JOIN actor a ON c.ActorID = a.ActorID  WHERE a.Name = 'Tom Cruise';
SELECT    ((MAX(st.screentime) - MIN(st.screentime)) / MIN(st.screentime)) * 100  FROM    characters st    JOIN movie m ON st.MovieID = m.MovieID  WHERE    m.Title = 'Batman';
SELECT Title FROM movie WHERE Budget = (SELECT MAX(Budget) FROM movie);
SELECT m.MPAA_Rating FROM movie m JOIN characters c ON m.MovieID = c.MovieID WHERE c.Character_Name = 'Peter Quill';
SELECT a.Name FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE c.creditOrder = 1 AND m.Genre = 'Thriller' AND m.Rating = (SELECT MAX(Rating) FROM movie WHERE Genre = 'Thriller');
SELECT a.Name FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Batman' ORDER BY c.screentime DESC LIMIT 1;
SELECT COUNT(m.MovieID) FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.NetWorth = (SELECT MAX(NetWorth) FROM actor);
SELECT a.Name FROM actor a JOIN characters c ON a.ActorID = c.ActorID WHERE c.CharacterName = 'Chanice Kobolowski';
SELECT a.[Date of Birth] FROM actor a JOIN characters c ON a.ActorID = c.ActorID WHERE c.[Character Name] = 'Sully';
SELECT BirthCity FROM actor WHERE ActorID IN (   SELECT ActorID   FROM characters   WHERE CharacterName = 'Gabriel Martin' );
SELECT a.Biography FROM actor a JOIN characters c ON a.ActorID = c.ActorID WHERE c.CharacterName = 'Michael Moscovitz';
SELECT a.Height FROM actor a JOIN characters c ON a.ActorID = c.ActorID WHERE c.CharacterName = 'Lurch';
SELECT CharacterName FROM characters WHERE MovieID = (SELECT MovieID FROM movie WHERE Title = 'G.I. Joe: The Rise of Cobra') AND creditOrder = 3;
SELECT a.Name FROM characters c JOIN actor a ON c.ActorID = a.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'American Hustle' AND c.creditOrder = 2;
SELECT a.Name FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE m.ReleaseDate = '2015-10-26' AND c.creditOrder = '1';
SELECT    (COUNT(CASE WHEN a.BirthCountry = 'USA' THEN 1 END) / COUNT(a.ActorID)) * 100  FROM    actor a    JOIN characters c ON a.ActorID = c.ActorID    JOIN movie m ON c.MovieID = m.MovieID  WHERE    m.Title = 'Mrs. Doubtfire';
SELECT    (COUNT(a.ActorID) / (SELECT COUNT(*) FROM characters c WHERE c.MovieID = (SELECT MovieID FROM movie WHERE Title = 'Dawn of the Planet of the Apes')) * 100) AS percentage FROM    characters c    JOIN actor a ON c.ActorID = a.ActorID    JOIN movie m ON c.MovieID = m.MovieID  WHERE    m.Title = 'Dawn of the Planet of the Apes'    AND a.Date_of_Birth > '1970-01-01';
SELECT MovieID FROM movie WHERE Budget = 15000000 AND Rating BETWEEN 7 AND 8;
SELECT COUNT(*)  FROM movie  WHERE MPAA_Rating = 'PG' AND Release_Date BETWEEN '1990-06-01' AND '1990-06-30';
SELECT Name FROM actor WHERE ActorID = 439 AND Gender = 'Male' AND Ethnicity = 'White';
SELECT m.Genre FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE a.BirthCity = 'New York City' AND m.Rating > 5;
SELECT COUNT(DISTINCT m.MovieID) FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE m.Genre = 'Romance' AND a.Name = 'John Travolta';
SELECT a.Height, a.NetWorth FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Three Men and a Little Lady';
SELECT m.Genre FROM movie m JOIN (   SELECT MovieID   FROM characters c   JOIN (     SELECT ActorID     FROM actor     ORDER BY NetWorth DESC     LIMIT 1   ) a ON c.ActorID = a.ActorID ) mc ON m.MovieID = mc.MovieID WHERE m.MPAA_Rating = 'PG';
SELECT NetWorth FROM actor WHERE ActorID IN (   SELECT ActorID   FROM characters   WHERE MovieID IN (     SELECT MovieID     FROM movie     WHERE Title = 'Misery'   ) ) AND Height (Inches) BETWEEN 60 AND 70;
SELECT COUNT(*) FROM actor WHERE Gender = 'Male' AND Birth Country = 'USA' AND ActorID IN (     SELECT ActorID     FROM characters     WHERE MovieID IN (         SELECT MovieID         FROM movie         WHERE Title = 'Ghost'     ) );
SELECT m.Title, m.MPAA_Rating FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Name = 'Leonardo DiCaprio' AND m.Budget = (SELECT MAX(Budget) FROM movie m2                 JOIN characters c2 ON m2.MovieID = c2.MovieID                 JOIN actor a2 ON c2.ActorID = a2.ActorID                 WHERE a2.Name = 'Leonardo DiCaprio');
SELECT a.NetWorth, a.[Date of Birth] FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Die Hard 2' AND a.Height BETWEEN 60 AND 65;
SELECT m.Runtime FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Ethnicity = 'African American' AND a.`Date of Birth` = '1954-12-28';
SELECT a.Name FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE c.CharacterName = 'Don Altobello' AND m.Genre = 'Drama' AND m.Gross = 136766062;
SELECT m.Gross FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE m.Genre = 'Comedy' AND m.Rating < 7 AND a.NetWorth > '$375,000,000.00';
SELECT m.Runtime FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Name = 'Jackie Chan' AND m.Rating > 7;
SELECT    (COUNT(DISTINCT a.ActorID) / (SELECT COUNT(DISTINCT a2.ActorID)                                   FROM actor a2                                   JOIN characters c2 ON a2.ActorID = c2.ActorID                                   JOIN movie m2 ON c2.MovieID = m2.MovieID                                   WHERE m2.Genre = 'Drama') * 100) AS percentage FROM actor a  JOIN characters c ON a.ActorID = c.ActorID  JOIN movie m ON c.MovieID = m.MovieID  WHERE m.Genre = 'Drama' AND a.NetWorth > '$400,000,000.00';
SELECT c.CharacterName FROM characters c JOIN actor a ON c.ActorID = a.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE a.Gender = 'Female' AND a.BirthCity = 'Sherman Oaks' AND m.Title = 'Bruce Almighty' AND a.Height > (SELECT AVG(Height) * 0.5 FROM actor);
SELECT COUNT(*)  FROM twitter  WHERE Lang = 'en';
SELECT text FROM twitter WHERE IsReshare = 'TRUE';
SELECT COUNT(*) FROM twitter WHERE Reach > 1000;
SELECT COUNT(*)  FROM twitter  WHERE Sentiment > 0 AND Weekday = 'Thursday';
SELECT text FROM twitter WHERE Likes = (SELECT MAX(Likes) FROM twitter);
SELECT City FROM location WHERE Country = 'Argentina';
SELECT COUNT(*)  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE location.Country = 'Argentina';
SELECT l.City, COUNT(t.TweetID) AS NumTweets FROM social_media.twitter t JOIN social_media.location l ON t.LocationID = l.LocationID JOIN social_media.user u ON t.UserID = u.UserID WHERE l.Country = 'Argentina' GROUP BY l.City ORDER BY NumTweets DESC LIMIT 1;
SELECT COUNT(*) FROM twitter JOIN location ON twitter.LocationID = location.LocationID JOIN user ON twitter.UserID = user.UserID WHERE IsReshare = 'TRUE' AND location.City = 'Buenos Aires';
SELECT text FROM twitter JOIN location ON twitter.LocationID = location.LocationID WHERE location.City = 'Buenos Aires' AND Sentiment > 0;
SELECT l.Country FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE t.Likes = (SELECT MAX(Likes) FROM twitter);
SELECT l.Country FROM (   SELECT l.Country, COUNT(t.TweetID) as count   FROM twitter t   JOIN location l ON t.LocationID = l.LocationID   JOIN user u ON t.UserID = u.UserID   WHERE t.Sentiment > 0 AND l.Country IN ('Argentina', 'Australia')   GROUP BY l.Country ) sub WHERE count = (   SELECT MAX(count)   FROM (     SELECT l.Country, COUNT(t.TweetID) as count     FROM twitter t     JOIN location l ON t.LocationID = l.LocationID     JOIN user u ON t.UserID = u.UserID     WHERE t.Sentiment > 0 AND l.Country IN ('Argentina', 'Australia')     GROUP BY l.Country   ) sub )
SELECT COUNT(*)  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE location.City = 'Buenos Aires' AND twitter.Weekday = 'Thursday';
SELECT COUNT(*) FROM user WHERE Gender = 'Male' AND UserID IN (     SELECT UserID     FROM twitter     WHERE Likes > 1000 );
SELECT COUNT(t.TweetID) FROM twitter t JOIN user u ON t.UserID = u.UserID WHERE u.Gender = 'Male';
SELECT u.Gender FROM user u JOIN twitter t ON u.UserID = t.UserID WHERE t.Reach = (SELECT MAX(Reach) FROM twitter);
SELECT COUNT(t.TweetID) FROM twitter t JOIN user u ON t.UserID = u.UserID JOIN location l ON t.LocationID = l.LocationID WHERE u.Gender = 'Male' AND l.Country = 'Argentina';
SELECT t.text FROM twitter t JOIN user u ON t.UserID = u.UserID JOIN location l ON t.LocationID = l.LocationID WHERE u.Gender = 'Male' AND l.City = 'Buenos Aires';
SELECT AVG(city_tweets) AS avg_tweets_per_city FROM (   SELECT l.City, COUNT(t.TweetID) AS city_tweets   FROM twitter t   JOIN location l ON t.LocationID = l.LocationID   WHERE l.Country = 'Argentina'   GROUP BY l.City ) AS city_tweets;
SELECT    (COUNT(CASE WHEN u.Gender = 'Male' THEN t.TweetID ELSE NULL END) / COUNT(t.TweetID)) * 100 FROM    twitter t JOIN    user u ON t.UserID = u.UserID WHERE    t.Sentiment > 0;
SELECT COUNT(*)  FROM user  WHERE Gender = 'Unknown';
SELECT COUNT(DISTINCT State)  FROM location  WHERE Country = 'United Kingdom';
SELECT StateCode FROM location WHERE State = 'Gwynedd';
SELECT LocationID FROM location WHERE State = 'West Sussex';
SELECT COUNT(*)  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE IsReshare = 'TRUE' AND location.State = 'Texas';
SELECT l.Country FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE t.Reach = 547851;
SELECT COUNT(*)  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE location.City = 'Ha Noi' AND Sentiment > 0;
SELECT text FROM twitter JOIN location ON twitter.LocationID = location.LocationID WHERE location.State = 'Connecticut' AND Klout = (SELECT MAX(Klout) FROM twitter JOIN location ON twitter.LocationID = location.LocationID WHERE location.State = 'Connecticut');
SELECT COUNT(DISTINCT u.UserID) FROM user u JOIN twitter t ON u.UserID = t.UserID JOIN location l ON t.LocationID = l.LocationID WHERE u.Gender = 'Female' AND l.State = 'Wisconsin';
SELECT u.Gender FROM twitter t JOIN user u ON t.UserID = u.UserID WHERE t.TweetID = 'tw-715909161071091712';
SELECT l.City FROM twitter t JOIN location l ON t.LocationID = l.LocationID JOIN user u ON t.UserID = u.UserID WHERE t.text = 'One of our favorite stories is @FINRA_News''s move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a';
SELECT u.Gender FROM user u JOIN twitter t ON u.UserID = t.UserID WHERE t.RetweetCount = 535;
SELECT u.Gender FROM user u JOIN twitter t ON u.UserID = t.UserID WHERE t.Weekday = 'Wednesday' AND t.Klout = (SELECT MAX(Klout) FROM twitter WHERE Weekday = 'Wednesday');
SELECT u.Gender FROM twitter t JOIN user u ON t.UserID = u.UserID WHERE t.Likes = (SELECT MAX(Likes) FROM twitter);
SELECT COUNT(TweetID)  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE location.State = 'Michigan' AND twitter.Weekday = 'Thursday';
SELECT l.State, l.StateCode FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE t.TweetID = 'tw-685681052912873473';
SELECT    (COUNT(CASE WHEN u.Gender = 'Male' THEN 1 END) / COUNT(u.UserID)) * 100 AS Percentage FROM    user u   JOIN twitter t ON u.UserID = t.UserID   JOIN location l ON t.LocationID = l.LocationID WHERE    l.State = 'Florida';
SELECT    (COUNT(CASE WHEN Sentiment > 0 THEN TweetID END) / COUNT(TweetID)) * 100 AS Percentage_Positive_Tweets FROM    twitter   JOIN location ON twitter.LocationID = location.LocationID WHERE    location.State = 'California';
SELECT Weekday FROM twitter WHERE TweetID = 'tw-682712873332805633';
SELECT COUNT(DISTINCT t.UserID) FROM twitter t WHERE t.text = 'Happy New Year to all those AWS instances of ours!';
SELECT COUNT(TweetID)  FROM twitter  WHERE Lang = 'en';
SELECT LocationID  FROM twitter  WHERE TweetID = 'tw-682714048199311366'  AND LocationID = 3751;
SELECT COUNT(*)  FROM twitter  WHERE Weekday = 'Wednesday';
SELECT text FROM twitter WHERE Weekday = 'Thursday';
SELECT u.Gender FROM user u JOIN twitter t ON u.UserID = t.UserID WHERE t.TweetID = 'tw-682714583044243456';
SELECT t.text FROM twitter t JOIN user u ON t.UserID = u.UserID WHERE u.Gender = 'Unknown';
SELECT COUNT(t.TweetID) FROM twitter t JOIN user u ON t.UserID = u.UserID WHERE u.Gender = 'Male';
SELECT u.Gender, COUNT(t.text) as num_tweets FROM user u JOIN twitter t ON u.UserID = t.UserID WHERE t.Lang = 'en' GROUP BY u.Gender ORDER BY num_tweets DESC LIMIT 1;
SELECT Gender FROM user WHERE UserID IN (   SELECT UserID   FROM twitter   WHERE RetweetCount > 30 );
SELECT COUNT(*) FROM user JOIN twitter ON user.UserID = twitter.UserID WHERE user.Gender = 'Female' AND twitter.IsReshare = 'TRUE';
SELECT l.Country, SUM(t.Likes) as Total_Likes FROM twitter t JOIN location l ON t.LocationID = l.LocationID GROUP BY l.Country ORDER BY Total_Likes DESC LIMIT 1;
SELECT l.Country FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE t.TweetID = 'tw-682723090279841798';
SELECT t.text FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE l.Country = 'Australia';
SELECT t.text FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE l.City = 'Rawang' AND l.State = 'Selangor' AND l.Country = 'Malaysia';
SELECT Lang FROM twitter JOIN location ON twitter.LocationID = location.LocationID WHERE location.Country = 'Brazil';
SELECT l.Country FROM location l JOIN twitter t ON l.LocationID = t.LocationID WHERE t.Sentiment > 0 GROUP BY l.Country ORDER BY COUNT(t.Sentiment > 0) DESC LIMIT 1;
SELECT SUM(Likes)  FROM twitter  JOIN user ON twitter.UserID = user.UserID  WHERE Lang = 'ru' AND Gender = 'Male';
SELECT AVG(male_tweets_per_user) AS avg_male_tweets_per_user_per_week FROM (   SELECT COUNT(t.TweetID) / COUNT(u.UserID) / (31 / 7) AS male_tweets_per_user   FROM twitter t   JOIN user u ON t.UserID = u.UserID   WHERE u.Gender = 'Male'   GROUP BY WEEK(t.Day) ) AS subquery;
SELECT COUNT(*)  FROM twitter  WHERE Klout > 50;
SELECT text FROM twitter WHERE Lang <> 'en';
SELECT UserID FROM twitter GROUP BY UserID ORDER BY COUNT(TweetID) DESC LIMIT 1;
SELECT COUNT(*)  FROM twitter  WHERE Weekday = 'Monday' AND IsReshare = 'TRUE';
SELECT text FROM twitter WHERE Reach IN (   SELECT DISTINCT TOP 3 Reach   FROM twitter   ORDER BY Reach DESC ) ORDER BY Reach DESC;
SELECT COUNT(*)  FROM twitter  WHERE IsReshare = 'TRUE' AND Likes > 100;
SELECT COUNT(TweetID)  FROM twitter  JOIN user ON twitter.UserID = user.UserID  WHERE user.Gender = 'Male' AND twitter.Weekday = 'Monday';
SELECT u.Gender FROM user u JOIN twitter t ON u.UserID = t.UserID WHERE t.Likes = (SELECT MAX(Likes) FROM twitter);
SELECT text FROM twitter JOIN user ON twitter.UserID = user.UserID WHERE Lang = 'fr' AND Gender = 'Male';
SELECT COUNT(*)  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE Lang = 'fr' AND location.Country = 'Australia';
SELECT COUNT(*) FROM twitter JOIN user ON twitter.UserID = user.UserID JOIN location ON twitter.LocationID = location.LocationID WHERE Sentiment > 0 AND Gender = 'Male' AND Country = 'Australia';
SELECT    COUNT(CASE WHEN Sentiment > 0 THEN TweetID ELSE NULL END) -    COUNT(CASE WHEN Sentiment = 0 THEN TweetID ELSE NULL END) AS difference FROM    twitter   JOIN user ON twitter.UserID = user.UserID WHERE    user.Gender = 'Male';
SELECT City FROM twitter JOIN location ON twitter.LocationID = location.LocationID WHERE RetweetCount = (SELECT MAX(RetweetCount) FROM twitter);
SELECT l.City, COUNT(t.TweetID) AS NumTweets FROM twitter t JOIN location l ON t.LocationID = l.LocationID WHERE l.City IN ('Bangkok', 'Chiang Mai') GROUP BY l.City ORDER BY NumTweets DESC LIMIT 1;
SELECT COUNT(*)  FROM twitter  JOIN location ON twitter.LocationID = location.LocationID  WHERE location.Country = 'Argentina' AND location.State = 'Santa Fe' AND twitter.Day = 31;
SELECT l.City, COUNT(t.TweetID) AS NumTweets FROM social_media.twitter t JOIN social_media.location l ON t.LocationID = l.LocationID WHERE l.Country = 'Canada' GROUP BY l.City ORDER BY NumTweets DESC LIMIT 3;
SELECT l.City FROM location l JOIN twitter t ON l.LocationID = t.LocationID WHERE t.Sentiment = 0;
SELECT text FROM twitter JOIN user ON twitter.UserID = user.UserID JOIN location ON twitter.LocationID = location.LocationID WHERE user.Gender = 'Male' AND location.Country = 'Argentina' ORDER BY Likes DESC LIMIT 1;
SELECT AVG(Likes) AS Average_Likes FROM twitter JOIN user ON twitter.UserID = user.UserID WHERE user.Gender = 'Male' AND twitter.Weekday = 'Monday';
SELECT    l.City,    AVG(t.Likes) AS avg_likes FROM    twitter t    INNER JOIN location l ON t.LocationID = l.LocationID WHERE    l.City IN ('Bangkok', 'Chiang Mai') GROUP BY    l.City ORDER BY    avg_likes DESC LIMIT 1;
SELECT name FROM course WHERE name IN ('Intro to BlockChain', 'Computer Network') ORDER BY diff DESC LIMIT 1;
SELECT name FROM course WHERE credit < (SELECT credit FROM course WHERE name = 'Machine Learning Theory');
SELECT COUNT(*) FROM prof WHERE popularity > (SELECT popularity                      FROM prof                      WHERE first_name = 'Zhou' AND last_name = 'Zhihua');
SELECT phone_number FROM student WHERE f_name = 'Kerry' AND l_name = 'Pryor';
SELECT p.first_name, p.last_name FROM RA r JOIN student s ON r.student_id = s.student_id JOIN prof p ON r.prof_id = p.prof_id WHERE s.f_name = 'Faina' AND s.l_name = 'Mallinar';
SELECT COUNT(DISTINCT RA.student_id) FROM RA JOIN prof ON RA.prof_id = prof.prof_id WHERE prof.first_name = 'Sauveur' AND prof.last_name = 'Skyme';
SELECT f_name, l_name  FROM student  WHERE student_id IN (   SELECT student_id    FROM RA    WHERE capability = 5 );
SELECT AVG(salary) AS average_salary FROM RA WHERE prof_id IN (   SELECT prof_id   FROM prof   WHERE first_name = 'Ogdon' AND last_name = 'Zywicki' );
SELECT s.f_name, s.l_name FROM student s, registration r, course c WHERE s.student_id = r.student_id AND r.course_id = c.course_id AND c.name = 'Machine Learning Theory';
SELECT COUNT(*) FROM student WHERE student_id IN (   SELECT student_id   FROM registration   WHERE grade = 'B' AND course_id IN (     SELECT course_id     FROM course     WHERE name = 'Machine Learning Theory'   ) ) AND gpa > 3;
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.f_name = 'Laughton' AND s.l_name = 'Antonio';
SELECT s.f_name, s.l_name FROM student s, registration r, course c WHERE s.student_id = r.student_id AND r.course_id = c.course_id AND c.name = 'Intro to Database 2' AND r.grade IS NULL;
SELECT s.f_name, s.l_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Machine Learning Theory' AND s.f_name IN ('Willie', 'Laughton') ORDER BY r.sat DESC LIMIT 1;
SELECT COUNT(*) FROM prof WHERE prof_id IN (   SELECT prof_id   FROM RA   GROUP BY prof_id   HAVING COUNT(student_id) > 3 ) AND gender ='male';
SELECT COUNT(*) FROM student WHERE type = 'UG' AND student_id IN (     SELECT student_id     FROM registration     WHERE course_id IN (         SELECT course_id         FROM course         WHERE name = 'Machine Learning Theory'     ) );
SELECT p.first_name, p.last_name FROM RA r JOIN student s ON r.student_id = s.student_id JOIN prof p ON r.prof_id = p.prof_id WHERE s.f_name = 'Willie' AND s.l_name = 'Rechert';
SELECT AVG(s.gpa)  FROM student s, RA r, prof p  WHERE s.student_id = r.student_id AND r.prof_id = p.prof_id AND p.first_name = 'Ogdon' AND p.last_name = 'Zywicki';
SELECT AVG(sat)  FROM registration  WHERE course_id IN (SELECT course_id                      FROM course                      WHERE name = 'Machine Learning Theory');
SELECT COUNT(*)  FROM student  WHERE type = 'RPG';
SELECT f_name, l_name FROM student WHERE gpa = (SELECT MAX(gpa) FROM student);
SELECT COUNT(DISTINCT r.student_id) FROM registration r JOIN course c ON r.course_id = c.course_id WHERE c.diff = 1 AND c.credit = 3 AND r.grade = 'A';
SELECT COUNT(DISTINCT s.student_id) FROM registration r JOIN course c ON r.course_id = c.course_id JOIN student s ON r.student_id = s.student_id WHERE c.diff = 5;
SELECT p.first_name, p.last_name FROM RA r JOIN student s ON r.student_id = s.student_id JOIN prof p ON r.prof_id = p.prof_id WHERE s.f_name = 'Oliy' AND s.l_name = 'Spratling';
SELECT p.popularity FROM prof p, RA r, student s WHERE r.prof_id = p.prof_id AND r.student_id = s.student_id AND s.f_name = 'Harrietta' AND s.l_name = 'Lydford';
SELECT COUNT(DISTINCT RA.student_id) FROM RA JOIN prof ON RA.prof_id = prof.prof_id WHERE prof.gender = 'female' AND prof.teachingability = '1';
SELECT first_name, last_name FROM prof WHERE prof_id IN (   SELECT prof_id   FROM RA   GROUP BY prof_id   HAVING COUNT(student_id) > 2 ) ORDER BY teachingability DESC LIMIT 1;
SELECT grade FROM registration JOIN student ON registration.student_id = student.student_id JOIN course ON registration.course_id = course.course_id WHERE student.f_name = 'Rik' AND student.l_name = 'Unsworth' AND course.name = 'Computer Network';
SELECT COUNT(c.course_id) FROM registration r JOIN student s ON r.student_id = s.student_id JOIN course c ON r.course_id = c.course_id WHERE s.f_name = 'Alvera' AND s.l_name = 'McQuillin';
SELECT s.f_name, s.l_name FROM student s, RA r, prof p WHERE s.student_id = r.student_id AND r.prof_id = p.prof_id AND p.first_name = 'Zhihua' AND p.last_name = 'Zhou' AND s.type = 'RPG';
SELECT COUNT(DISTINCT s.student_id) FROM registration r JOIN course c ON r.course_id = c.course_id JOIN student s ON r.student_id = s.student_id WHERE c.name = 'Statistical Learning';
SELECT s.f_name, s.l_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Applied Deep Learning' AND r.grade IS NULL;
SELECT phone_number FROM student WHERE student_id IN (   SELECT student_id   FROM registration   WHERE grade = 'A' AND course_id IN (     SELECT course_id     FROM course     WHERE name = 'Intro to BlockChain'   ) );
SELECT    DIVIDE(     COUNT(s.student_id),      (SELECT COUNT(*) FROM RA ra WHERE ra.prof_id = (SELECT prof_id FROM prof WHERE first_name = 'Ogdon' AND last_name = 'Zywicki'))   ) AS percentage FROM    RA ra   JOIN student s ON ra.student_id = s.student_id   JOIN prof p ON ra.prof_id = p.prof_id WHERE    p.first_name = 'Ogdon'    AND p.last_name = 'Zywicki'    AND s.type = 'TPG';
SELECT      DIVIDE(COUNT(reg.student_id),              (SELECT COUNT(reg.student_id)               FROM registration reg               JOIN course c ON reg.course_id = c.course_id               WHERE c.name = 'Computer Network'))      * 100 as percentage FROM registration reg  JOIN course c ON reg.course_id = c.course_id  WHERE c.name = 'Computer Network' AND reg.grade = 'B';
SELECT COUNT(*)  FROM course  WHERE diff = 5;
SELECT CONCAT(first_name,'', last_name) AS full_name FROM prof WHERE graduate_from IN ('Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University');
SELECT name FROM course WHERE diff = (SELECT MAX(diff) FROM course WHERE credit = (SELECT MAX(credit) FROM course));
SELECT COUNT(*) FROM student WHERE type = 'UG' AND intelligence = (SELECT MAX(intelligence) FROM student WHERE type = 'UG');
SELECT COUNT(*)  FROM prof  WHERE gender = 'female' AND popularity = (SELECT MAX(popularity) FROM prof);
SELECT COUNT(*)  FROM student  WHERE type = 'RPG';
SELECT COUNT(DISTINCT s.student_id) FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Applied Deep Learning' AND r.grade = 'A';
SELECT gpa FROM student WHERE student_id IN (   SELECT student_id   FROM RA   WHERE salary = 'free' );
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id WHERE c.diff = 1 GROUP BY c.name ORDER BY COUNT(r.grade) DESC LIMIT 1;
SELECT COUNT(DISTINCT r.course_id) FROM registration r JOIN student s ON r.student_id = s.student_id WHERE s.gpa = (SELECT MAX(gpa) FROM student);
SELECT COUNT(DISTINCT s.student_id) FROM student s JOIN RA r ON s.student_id = r.student_id JOIN prof p ON r.prof_id = p.prof_id WHERE p.first_name = 'Ogdon' AND p.last_name = 'Zywicki';
SELECT name FROM course WHERE course_id = (   SELECT course_id   FROM registration   GROUP BY course_id   ORDER BY AVG(sat) DESC   LIMIT 1 );
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.intelligence = 1 AND r.sat = 1;
SELECT    c.name,    COUNT(DISTINCT r.student_id) AS num_students_with_A FROM    course c    JOIN registration r ON c.course_id = r.course_id WHERE    c.name IN ('Advanced Operating System', 'Intro to BlockChain')    AND r.grade = 'A' GROUP BY    c.name ORDER BY    num_students_with_A DESC LIMIT 1;
SELECT p.popularity FROM prof p JOIN RA r ON p.prof_id = r.prof_id WHERE r.capability = (SELECT MAX(capability) FROM RA);
SELECT AVG(stu_count) AS avg_students FROM (   SELECT course_id, COUNT(student_id) AS stu_count   FROM registration   WHERE course_id IN (     SELECT course_id     FROM course     WHERE diff = 4   )   GROUP BY course_id ) AS subquery;
SELECT COUNT(DISTINCT s.student_id) FROM student s JOIN registration r ON s.student_id = r.student_id WHERE s.gpa BETWEEN 3 AND 4 AND r.grade IS NULL OR r.grade = '';
SELECT COUNT(DISTINCT s.student_id) FROM student s JOIN registration r ON s.student_id = r.student_id WHERE s.type = 'UG' GROUP BY s.student_id HAVING MIN(r.grade) = 'A';
SELECT s.f_name, s.l_name FROM student s JOIN RA r ON s.student_id = r.student_id WHERE r.capability = 5 AND r.salary = 'high' GROUP BY s.f_name, s.l_name HAVING AVG(s.gpa) = (   SELECT AVG(gpa)   FROM student   JOIN RA ON student.student_id = RA.student_id   WHERE RA.capability = 5 AND RA.salary = 'high' );
SELECT RA.prof_id, RA.student_id FROM RA WHERE RA.capability = (SELECT MIN(capability) FROM RA);
SELECT CONCAT(first_name,'', last_name) AS full_name FROM prof WHERE graduate_from = 'University of Boston';
SELECT r.course_id, r.student_id FROM registration r WHERE r.grade IS NULL OR r.grade = '';
SELECT    COUNT(CASE WHEN gender = 'Male' THEN prof_id ELSE NULL END) /    COUNT(CASE WHEN gender = 'Female' THEN prof_id ELSE NULL END) AS ratio FROM prof;
SELECT name, credit FROM course WHERE diff = (SELECT MIN(diff) FROM course);
SELECT s.f_name, s.l_name, s.gpa FROM student s, RA r, prof p WHERE s.student_id = r.student_id AND r.prof_id = p.prof_id AND p.popularity = (     SELECT MAX(popularity)     FROM prof );
SELECT s.f_name, s.l_name, s.email FROM student s JOIN RA r ON s.student_id = r.student_id WHERE r.salary = 'free';
SELECT s.f_name, s.l_name, ra.capability, s.gpa FROM RA ra JOIN student s ON ra.student_id = s.student_id JOIN prof p ON ra.prof_id = p.prof_id WHERE p.first_name = 'Merwyn' AND p.last_name = 'Conkay';
SELECT CONCAT(s.f_name,'', s.l_name) AS full_name, r.grade FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Intro to BlockChain';
SELECT s.f_name, s.l_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.diff = (SELECT MAX(diff) FROM course) AND r.grade = 'A';
SELECT p.first_name, p.last_name, p.graduate_from FROM prof p JOIN RA r ON p.prof_id = r.prof_id JOIN student s ON r.student_id = s.student_id WHERE s.f_name = 'Olia' AND s.l_name = 'Rabier';
SELECT s.f_name, s.l_name FROM student s, registration r, course c WHERE s.student_id = r.student_id AND r.course_id = c.course_id AND c.name = 'Advanced Database Systems' AND r.sat = (     SELECT MAX(sat)     FROM registration     WHERE course_id = (         SELECT course_id         FROM course         WHERE name = 'Advanced Database Systems'     ) );
SELECT    SUM(credit * CASE grade      WHEN 'A' THEN 4      WHEN 'B' THEN 3      WHEN 'C' THEN 2      WHEN 'D' THEN 1    END) / SUM(credit) AS semester_gpa FROM    registration    JOIN course ON registration.course_id = course.course_id    JOIN student ON registration.student_id = student.student_id  WHERE    student.f_name = 'Laughton' AND student.l_name = 'Antonio';
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.type = 'UG' AND s.gpa > 3.7;
SELECT s.f_name, s.l_name, r.capability FROM student s JOIN RA r ON s.student_id = r.student_id JOIN prof p ON r.prof_id = p.prof_id WHERE p.graduate_from = 'University of Washington';
SELECT s.f_name, s.l_name, s.email, s.intelligence FROM student s JOIN RA r ON s.student_id = r.student_id WHERE r.capability = (SELECT MAX(capability) FROM RA) AND r.salary = 'high';
SELECT c.name, c.credit FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id JOIN RA ra ON s.student_id = ra.student_id JOIN prof p ON ra.prof_id = p.prof_id WHERE p.gender = 'Female' AND p.teachingability = (     SELECT MAX(teachingability)     FROM prof     WHERE gender = 'Female' );
SELECT COUNT(*)  FROM prof  WHERE gender = 'Female';
SELECT name FROM course WHERE diff = (SELECT MAX(diff) FROM course);
SELECT COUNT(*) FROM student WHERE gpa BETWEEN 3.1 AND 3.7 AND type = 'UG';
SELECT credit FROM course WHERE name = 'Computer Vision';
SELECT s.student_id FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE s.gpa = 2.5 AND c.name = 'C for Programmers';
SELECT s.l_name FROM student s, registration r, course c WHERE s.student_id = r.student_id AND r.course_id = c.course_id AND c.name = 'Intro to Database 2' AND r.sat = (SELECT MAX(sat) FROM registration WHERE course_id = c.course_id);
SELECT COUNT(*) FROM student WHERE gpa > 3 AND student_id IN (     SELECT student_id     FROM RA     WHERE salary = 'high' );
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.type = 'UG' GROUP BY c.name ORDER BY AVG(r.sat) DESC LIMIT 1;
SELECT RA.capability FROM RA JOIN student ON RA.student_id = student.student_id WHERE student.type = 'RPG' AND student.intelligence >= 4;
SELECT COUNT(*) FROM student WHERE intelligence = 3 AND student_id IN (   SELECT student_id   FROM registration   WHERE grade = 'B' );
SELECT c.diff FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE s.intelligence = 5 AND r.grade = 'A';
SELECT COUNT(DISTINCT r.student_id) FROM RA r JOIN (   SELECT prof_id   FROM prof   WHERE popularity = (SELECT MAX(popularity) FROM prof) ) p ON r.prof_id = p.prof_id WHERE r.capability = 5;
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id WHERE r.grade = 'D';
SELECT RA.capability FROM RA JOIN student ON RA.student_id = student.student_id WHERE student.f_name = 'Alvera' AND student.l_name = 'McQuillin';
SELECT COUNT(DISTINCT s.student_id) FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE c.credit = 3 AND s.gpa = 3.2;
SELECT COUNT(*) FROM student WHERE gpa = 3.5 AND student_id IN (   SELECT student_id   FROM RA   WHERE salary = 'low' );
SELECT s.email FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE r.grade = 'B' AND c.diff > (SELECT AVG(diff) * 0.8 FROM course);
SELECT    (COUNT(CASE WHEN ra.salary = 'low' THEN 1 END) / COUNT(ra.salary)) * 1.0 AS percentage FROM    prof    JOIN RA ON prof.prof_id = RA.prof_id WHERE    prof.teachingability <= 3;
SELECT name FROM course WHERE (credit, diff) IN (   (SELECT MAX(credit), MAX(diff) FROM course) );
SELECT AVG(teachingability)  FROM prof  WHERE popularity = (SELECT MAX(popularity) FROM prof);
SELECT AVG(sat) AS average_satisfaction FROM registration WHERE grade = 'B';
SELECT CONCAT(f_name,'', l_name) AS full_name, phone_number FROM student WHERE intelligence < 4 AND gpa > 3;
SELECT f_name, l_name FROM student WHERE student_id IN (   SELECT student_id   FROM RA   WHERE capability > (SELECT AVG(capability) FROM RA) );
SELECT s.f_name, s.l_name, c.name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE s.intelligence = 5 AND s.gpa < 3;
SELECT AVG(capability)  FROM RA, student  WHERE RA.student_id = student.student_id AND student.gpa < 2.5;
SELECT p.first_name, p.last_name FROM prof p, RA r, student s WHERE p.prof_id = r.prof_id AND r.student_id = s.student_id AND s.intelligence = 1;
SELECT    AVG(gpa) FILTER (WHERE s.student_id IN (     SELECT r.student_id      FROM registration r      JOIN course c ON r.course_id = c.course_id      WHERE c.diff = (SELECT MAX(diff) FROM course)   )) -    AVG(gpa) FILTER (WHERE s.student_id IN (     SELECT r.student_id      FROM registration r      JOIN course c ON r.course_id = c.course_id      WHERE c.diff = (SELECT MIN(diff) FROM course)   )) FROM student s;
SELECT s.f_name, s.l_name, RA.capability FROM student s JOIN RA ON s.student_id = RA.student_id WHERE s.student_id IN (   SELECT student_id   FROM registration   WHERE grade IS NULL );
SELECT COUNT(DISTINCT s.student_id) FROM student s JOIN RA r ON s.student_id = r.student_id JOIN registration reg ON s.student_id = reg.student_id JOIN course c ON reg.course_id = c.course_id WHERE r.salary = 'High' AND c.name = 'Computer Vision';
SELECT p.first_name, p.last_name, p.popularity FROM prof p JOIN RA r ON p.prof_id = r.prof_id GROUP BY p.prof_id, p.first_name, p.last_name, p.popularity ORDER BY COUNT(r.student_id) DESC LIMIT 1;
SELECT c.name, s.f_name, s.l_name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE r.grade = 'A' AND c.course_id = (   SELECT course_id   FROM registration   WHERE grade = 'A'   GROUP BY course_id   ORDER BY COUNT(student_id) DESC   LIMIT 1 );
SELECT AVG(CASE WHEN r.salary = 'high' THEN reg.sat ELSE NULL END) -         AVG(CASE WHEN r.salary = 'free' THEN reg.sat ELSE NULL END)  AS avg_satisfaction_difference FROM registration reg JOIN RA r ON reg.student_id = r.student_id;
SELECT graduate_from FROM prof WHERE prof_id IN (   SELECT prof_id   FROM RA   WHERE student_id IN (     SELECT student_id     FROM student     WHERE type = 'UG'   )   GROUP BY prof_id   ORDER BY COUNT(student_id) DESC   LIMIT 1 );
SELECT CONCAT(first_name,'', last_name) AS full_name, email FROM prof WHERE teachingability > (SELECT AVG(teachingability) FROM prof) AND prof_id IN (   SELECT prof_id   FROM RA   GROUP BY prof_id   HAVING COUNT(student_id) >= 2 );
SELECT      (COUNT(CASE WHEN sat = (SELECT MAX(sat) FROM registration) THEN 1 ELSE NULL END) /       (SELECT COUNT(*) FROM student)) * 1.0 AS percentage FROM      registration r JOIN      course c ON r.course_id = c.course_id WHERE      c.name = 'Intro to Database 2';
SELECT f_name, l_name FROM student WHERE gpa = (SELECT MAX(gpa) FROM student);
SELECT COUNT(DISTINCT r.student_id) FROM RA r JOIN (   SELECT prof_id   FROM prof   WHERE teachingability = (SELECT MAX(teachingability) FROM prof) ) p ON r.prof_id = p.prof_id WHERE r.salary = 'high';
SELECT MIN(salary) AS min_salary, MAX(salary) AS max_salary FROM RA WHERE prof_id IN (   SELECT prof_id   FROM prof   WHERE email = 'grosellg@hku.hk' );
SELECT COUNT(*) FROM student WHERE student_id IN (   SELECT student_id   FROM registration   WHERE course_id IN (     SELECT course_id     FROM course     WHERE name = 'Statistical Learning'   ) AND sat = 4 ) AND gpa = 3.8;
SELECT COUNT(DISTINCT s.student_id) FROM student s, registration r, course c WHERE s.intelligence = 2 AND r.student_id = s.student_id AND r.course_id = c.course_id AND c.diff = 3;
SELECT s.f_name, s.l_name FROM student s, registration r, course c WHERE s.student_id = r.student_id AND r.course_id = c.course_id AND c.name = 'Applied Deep Learning' AND r.grade = 'C';
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.type = 'RPG' AND r.sat = 1;
SELECT    (COUNT(CASE WHEN s.type = 'UG' THEN 1 END) -     COUNT(CASE WHEN s.type = 'RPG' THEN 1 END)) AS difference FROM student s JOIN RA r ON s.student_id = r.student_id WHERE r.capability < 3;
SELECT p_id_dummy, AVG(cnt)  FROM (   SELECT p_id_dummy, COUNT(*) as cnt    FROM advisedBy    GROUP BY p_id_dummy ) AS subquery  GROUP BY p_id_dummy;
SELECT COUNT(DISTINCT p.p_id) FROM person p JOIN taughtBy t ON p.p_id = t.p_id WHERE t.course_id = 18 AND p.professor = 'true';
SELECT course_id FROM course WHERE courseLevel = 'Level_500';
SELECT COUNT(course_id) FROM course WHERE courseLevel = 'Level_300';
SELECT p.p_id, tb.course_id FROM person p JOIN taughtBy tb ON p.p_id = tb.p_id WHERE p.professor = 1 AND p.hasPosition = 0;
SELECT p_id FROM taughtBy WHERE course_id IN (   SELECT course_id   FROM course   WHERE courseLevel = 'Level_400' ) AND p_id IN (   SELECT p_id   FROM person   WHERE professor = 'True' );
SELECT c.course_id, c.courseLevel FROM course c JOIN taughtBy t ON c.course_id = t.course_id JOIN advisedBy a ON t.p_id = a.p_id_dummy WHERE a.p_id = 376;
SELECT p.professor FROM person p, advisedBy a, person s WHERE a.p_id = p.p_id AND a.p_id_dummy = s.p_id AND s.yearsInProgram = 'Year_3';
SELECT courseLevel FROM course WHERE course_id IN (   SELECT course_id   FROM taughtBy   WHERE p_id = 297 );
SELECT c.courseLevel, p.professor FROM course c JOIN taughtBy t ON c.course_id = t.course_id JOIN person p ON t.p_id = p.p_id WHERE c.course_id = 165 AND p.professor IS NOT NULL;
SELECT p.p_id, p.yearsInProgram FROM person p JOIN advisedBy a ON p.p_id = a.p_id JOIN taughtBy t ON a.p_id_dummy = t.p_id WHERE a.p_id_dummy = 5 AND p.student = 'true';
SELECT c.course_id, c.courseLevel FROM course c JOIN taughtBy t ON c.course_id = t.course_id JOIN person p ON t.p_id = p.p_id WHERE p.professor = 1 AND p.hasPosition = 'Faculty_eme';
SELECT ab.p_id_dummy, c.courseLevel FROM advisedBy ab JOIN person p ON ab.p_id_dummy = p.p_id JOIN taughtBy tb ON p.p_id = tb.p_id JOIN course c ON tb.course_id = c.course_id WHERE ab.p_id = 80;
SELECT p_id FROM taughtBy WHERE p_id IN (   SELECT p_id   FROM taughtBy   WHERE course_id IN (     SELECT course_id     FROM course     WHERE courseLevel = 'Level_400'   ) ) AND p_id IN (   SELECT p_id   FROM taughtBy   WHERE course_id IN (     SELECT course_id     FROM course     WHERE courseLevel = 'Level_500'   ) );
SELECT p_id_dummy FROM advisedBy JOIN person ON advisedBy.p_id = person.p_id WHERE yearsInProgram = 'Year_12' AND professor = 'True';
SELECT c.course_id, c.courseLevel FROM course c JOIN (   SELECT course_id, COUNT(p_id) as count_prof   FROM taughtBy   GROUP BY course_id   ORDER BY count_prof DESC   LIMIT 1 ) t ON c.course_id = t.course_id;
SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_300';
SELECT COUNT(DISTINCT p_id)  FROM taughtBy  WHERE course_id = 11;
SELECT    CASE      WHEN (SELECT COUNT(*) FROM taughtBy WHERE course_id = 16) >           (SELECT COUNT(*) FROM taughtBy WHERE course_id = 18) THEN 16     ELSE 18   END AS course_id;
SELECT COUNT(*) FROM person WHERE professor = 1 AND hasPosition = 'Faculty_eme';
SELECT p_id_dummy FROM advisedBy GROUP BY p_id_dummy HAVING COUNT(p_id) > 4;
SELECT COUNT(DISTINCT c.course_id) FROM course c JOIN taughtBy t ON c.course_id = t.course_id JOIN person p ON t.p_id = p.p_id WHERE c.courseLevel = 'Level_300' AND p.professor = 1;
SELECT p.p_id FROM person p JOIN taughtBy t ON p.p_id = t.p_id JOIN course c ON t.course_id = c.course_id WHERE p.hasPosition = 'Faculty_eme' AND c.courseLevel = 'Level_300';
SELECT hasPosition!= 0 FROM person WHERE p_id IN (   SELECT p_id   FROM taughtBy   WHERE course_id = 9 );
SELECT courseLevel FROM course WHERE course_id IN (   SELECT course_id   FROM taughtBy   WHERE p_id = 79 );
SELECT p_id_dummy FROM advisedBy WHERE p_id IN (   SELECT p_id   FROM person   WHERE yearsInProgram = 'Year_5' );
SELECT COUNT(DISTINCT a.p_id) FROM advisedBy a JOIN person p ON a.p_id = p.p_id JOIN taughtBy t ON a.p_id_dummy = t.p_id JOIN course c ON t.course_id = c.course_id WHERE p.student = 1 AND c.courseLevel = 'Level_300';
SELECT COUNT(DISTINCT c.course_id) FROM course c JOIN taughtBy t ON c.course_id = t.course_id JOIN person p ON t.p_id = p.p_id WHERE c.courseLevel = 'Level_300' AND p.hasPosition!= 0;
SELECT tb.course_id FROM person p, advisedBy ab, taughtBy tb WHERE p.p_id = ab.p_id_dummy AND p.professor = 1 AND ab.p_id = 6 AND p.p_id = tb.p_id;
SELECT courseLevel FROM course WHERE course_id = (   SELECT course_id   FROM taughtBy   GROUP BY course_id   ORDER BY COUNT(p_id) DESC   LIMIT 1 );
SELECT p_id FROM taughtBy JOIN person ON taughtBy.p_id = person.p_id WHERE professor = 1 GROUP BY p_id HAVING COUNT(course_id) > 3;
SELECT p_id, COUNT(course_id) as num_courses FROM taughtBy JOIN person ON taughtBy.p_id = person.p_id WHERE professor = 1 GROUP BY p_id ORDER BY num_courses DESC LIMIT 3;
SELECT COUNT(DISTINCT p_id_dummy)  FROM person  JOIN advisedBy ON person.p_id = advisedBy.p_id  WHERE yearsInProgram = 'Year_3' AND student = 'True';
SELECT AVG(course_count)  FROM (   SELECT p_id, COUNT(course_id) as course_count    FROM taughtBy    WHERE p_id IN (SELECT p_id FROM person WHERE professor = 1)    GROUP BY p_id ) AS professor_courses;
SELECT    COUNT(CASE WHEN professor = 1 THEN p_id END) /    COUNT(CASE WHEN student = 1 THEN p_id END) AS ratio FROM person;
SELECT    (COUNT(CASE WHEN courseLevel = 'Level_400' THEN course_id ELSE NULL END) / COUNT(course_id)) * 100  AS percentage FROM course;
SELECT p_id FROM taughtBy WHERE course_id = 18;
SELECT hasPosition, p_id_dummy FROM person, advisedBy WHERE person.p_id = advisedBy.p_id_dummy AND advisedBy.p_id = 303 AND person.professor = 'true';
SELECT p.p_id, c.courseLevel FROM person p JOIN taughtBy t ON p.p_id = t.p_id JOIN course c ON t.course_id = c.course_id WHERE p.professor = 1 AND p.hasPosition = 'Faculty_aff';
SELECT inPhase, yearsInProgram FROM person WHERE p_id IN (   SELECT p_id   FROM advisedBy   GROUP BY p_id   HAVING COUNT(p_id_dummy) = (     SELECT MAX(cnt)     FROM (       SELECT p_id, COUNT(p_id_dummy) cnt       FROM advisedBy       GROUP BY p_id     ) t   ) ) AND student = 1;
SELECT ab.p_id, ab.p_id_dummy FROM person p JOIN advisedBy ab ON p.p_id = ab.p_id WHERE p.hasPosition = 'Faculty_eme';
SELECT c.course_id, c.courseLevel FROM course c JOIN taughtBy t ON c.course_id = t.course_id WHERE t.p_id BETWEEN 40 AND 50;
SELECT c.courseLevel, t.p_id FROM course c JOIN taughtBy t ON c.course_id = t.course_id WHERE c.course_id = 147;
SELECT p.p_id, c.courseLevel FROM person p, taughtBy t, course c WHERE p.p_id = t.p_id AND t.course_id = c.course_id AND p.professor = 1 AND p.hasPosition!= 0 AND c.course_id = 104;
SELECT p.p_id, p.hasPosition FROM person p, course c, taughtBy t WHERE p.p_id = t.p_id AND t.course_id = c.course_id AND p.professor = 1 AND c.courseLevel = 'Level_400' AND c.course_id < 10;
SELECT p_id FROM taughtBy WHERE course_id BETWEEN 121 AND 130 AND course_id IN (   SELECT course_id   FROM course   WHERE courseLevel = 'Level_300' );
SELECT ab.p_id_dummy FROM advisedBy ab JOIN person p ON ab.p_id = p.p_id WHERE p.yearsInProgram = 'Year_8' AND p.hasPosition = 1 AND p.professor = 1;
SELECT tb.course_id, tb.p_id FROM taughtBy tb JOIN course c ON tb.course_id = c.course_id WHERE c.courseLevel = 'Level_500' LIMIT 5;
SELECT COUNT(*) FROM person WHERE p_id IN (   SELECT p_id   FROM advisedBy   WHERE p_id_dummy = 415 ) AND student = 1;
SELECT COUNT(*)  FROM course  WHERE courseLevel = 'Level_500';
SELECT COUNT(*) FROM person WHERE hasPosition = 0 AND inPhase = 0;
SELECT p_id, COUNT(course_id) as num_courses FROM taughtBy GROUP BY p_id ORDER BY num_courses ASC LIMIT 1;
SELECT COUNT(*) FROM person WHERE student = 'TRUE' AND yearsInProgram = 'Year_5' AND p_id IN (   SELECT p_id   FROM advisedBy   WHERE p_id_dummy = 5 );
SELECT p_id, COUNT(course_id) as num_courses FROM taughtBy JOIN course ON taughtBy.course_id = course.course_id JOIN person ON taughtBy.p_id = person.p_id WHERE course.courseLevel = 'Level_500' AND person.professor = 'True' GROUP BY p_id ORDER BY num_courses DESC LIMIT 1;
SELECT COUNT(DISTINCT p.p_id) FROM person p JOIN taughtBy t ON p.p_id = t.p_id JOIN course c ON t.course_id = c.course_id WHERE p.professor = 1 AND p.hasPosition = 'Faculty_aff' AND c.courseLevel = 'Level_500';
SELECT p.p_id, COUNT(c.course_id) as num_courses FROM person p JOIN taughtBy t ON p.p_id = t.p_id JOIN course c ON t.course_id = c.course_id WHERE p.professor = 'True' AND c.courseLevel IN ('Level_500', 'Master', 'Undergraduate') GROUP BY p.p_id ORDER BY num_courses DESC LIMIT 5;
SELECT COUNT(DISTINCT ab.p_id_dummy) FROM advisedBy ab JOIN person p ON ab.p_id = p.p_id WHERE p.student = 1 AND p.yearsInProgram = 'Year_1';
SELECT COUNT(DISTINCT tb.p_id) FROM person p JOIN taughtBy tb ON p.p_id = tb.p_id JOIN course c ON tb.course_id = c.course_id WHERE p.professor = 'True' AND c.courseLevel = 'Level_400' GROUP BY tb.p_id HAVING COUNT(tb.course_id) <= 2;
SELECT p.p_id FROM person p JOIN taughtBy t ON p.p_id = t.p_id JOIN course c ON t.course_id = c.course_id WHERE p.hasPosition = 'Faculty_eme' AND p.professor = 1 AND c.courseLevel = 'Level_400';
SELECT hasPosition FROM person WHERE professor = 1 AND p_id = (     SELECT p_id     FROM taughtBy     GROUP BY p_id     ORDER BY COUNT(course_id) DESC     LIMIT 1 );
SELECT inPhase FROM person WHERE student = 1 AND p_id IN (     SELECT p_id     FROM advisedBy     GROUP BY p_id     HAVING COUNT(p_id_dummy) > 2 )
SELECT COUNT(DISTINCT p_id) FROM taughtBy WHERE course_id IN (   SELECT course_id   FROM course   WHERE courseLevel = 'Level_300' );
SELECT yearsInProgram FROM person WHERE student = 1 AND p_id IN (     SELECT p_id     FROM advisedBy     GROUP BY p_id_dummy     HAVING COUNT(p_id) = (         SELECT MAX(cnt)         FROM (             SELECT p_id_dummy, COUNT(p_id) AS cnt             FROM advisedBy             GROUP BY p_id_dummy         ) AS subquery     ) ) GROUP BY yearsInProgram ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM person WHERE student = 1 AND inPhase = 'Pre-Quals' AND p_id IN (SELECT p_id FROM advisedBy);
SELECT AVG(course_count) AS avg_course_per_professor FROM (   SELECT p_id, COUNT(course_id) AS course_count   FROM taughtBy   JOIN course ON taughtBy.course_id = course.course_id   JOIN person ON taughtBy.p_id = person.p_id   WHERE course.courseLevel = 'Level_500' AND person.professor = TRUE   GROUP BY p_id ) AS subquery;
SELECT COUNT(DISTINCT course_id) FROM taughtBy GROUP BY course_id HAVING COUNT(p_id) > 4;
SELECT course_id FROM course WHERE courseLevel = 'Level_500';
SELECT SUM(yearsInProgram = 'Year_1' OR yearsInProgram = 'Year_2')  FROM person  WHERE student = 1;
SELECT COUNT(DISTINCT t.course_id) FROM taughtBy t JOIN person p ON t.p_id = p.p_id WHERE p.professor = 1 AND p.hasPosition <> 0;
SELECT p.hasPosition, COUNT(tb.course_id) as num_taught FROM person p JOIN taughtBy tb ON p.p_id = tb.p_id WHERE p.professor = TRUE GROUP BY p.hasPosition, tb.p_id ORDER BY num_taught DESC LIMIT 1;
SELECT tb.course_id FROM taughtBy tb JOIN person p ON tb.p_id = p.p_id WHERE p.professor = 1 AND p.hasPosition = 0;
SELECT p.professor, COUNT(c.course_id) as num_courses, AVG(c.courseLevel) as avg_course_level FROM person p JOIN taughtBy tb ON p.p_id = tb.p_id JOIN course c ON tb.course_id = c.course_id WHERE p.hasPosition <> 0 GROUP BY p.professor ORDER BY num_courses DESC LIMIT 1;
SELECT device_id FROM gender_age WHERE age = (SELECT MAX(age) FROM gender_age);
SELECT COUNT(*)  FROM events  WHERE longitude = 97 AND latitude = 40;
SELECT COUNT(*)  FROM gender_age  WHERE gender = 'M' AND group = 'M32-38';
SELECT COUNT(*)  FROM gender_age  WHERE gender = 'F' AND age > 50;
SELECT COUNT(DISTINCT device_id)  FROM events  WHERE event_id = 2 AND is_active = 1;
SELECT gender FROM gender_age WHERE age = (SELECT MIN(age) FROM gender_age);
SELECT category FROM label_categories WHERE label_id IN (     SELECT label_id     FROM app_labels     GROUP BY label_id     ORDER BY COUNT(app_id) DESC     LIMIT 1 );
SELECT p.device_model FROM phone_brand_device_model2 p JOIN gender_age g ON p.device_id = g.device_id WHERE g.age = (SELECT MAX(age) FROM gender_age);
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id JOIN events e ON pb.device_id = e.device_id JOIN app_events ae ON e.event_id = ae.event_id JOIN app_all a ON ae.app_id = a.app_id JOIN app_labels al ON a.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'Home Decoration';
SELECT COUNT(DISTINCT ga.device_id) FROM events e JOIN app_events ae ON e.event_id = ae.event_id JOIN gender_age ga ON e.device_id = ga.device_id WHERE ga.gender = 'M' AND ae.is_active = 1 AND e.timestamp LIKE '2016-05-01%';
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE ga.gender = 'F' AND pb.device_model = 'ZenFone 5';
SELECT MAX(ga.age)  FROM gender_age ga  JOIN events e ON ga.device_id = e.device_id  JOIN app_events ae ON e.event_id = ae.event_id  WHERE ae.is_active = 1 AND e.timestamp LIKE '2016-05-06%' AND e.longitude = 121 AND e.latitude = 31;
SELECT device_model FROM phone_brand_device_model2 JOIN gender_age ON phone_brand_device_model2.device_id = gender_age.device_id WHERE gender = 'F' AND group = 'F27-28' GROUP BY device_model ORDER BY COUNT(device_id) DESC LIMIT 1;
SELECT lc.category FROM (   SELECT e.event_id, e.timestamp, al.label_id   FROM events e   JOIN app_events ae ON e.event_id = ae.event_id   JOIN app_labels al ON ae.app_id = al.app_id   ORDER BY e.timestamp   LIMIT 2 ) AS oldest_events JOIN label_categories lc ON oldest_events.label_id = lc.label_id;
SELECT gender FROM gender_age WHERE device_id IN (     SELECT device_id     FROM phone_brand_device_model2     WHERE phone_brand = 'vivo' ) GROUP BY gender ORDER BY COUNT(*) DESC LIMIT 1;
SELECT category, COUNT(DISTINCT a.app_id) as num_users FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id JOIN (   SELECT label_id, COUNT(DISTINCT app_id) as cnt   FROM app_labels   GROUP BY label_id   ORDER BY cnt DESC   LIMIT 1 ) t ON al.label_id = t.label_id JOIN app_all a ON al.app_id = a.app_id GROUP BY category ORDER BY num_users DESC LIMIT 1;
SELECT COUNT(DISTINCT ga.device_id) FROM app_all a JOIN app_labels al ON a.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id JOIN phone_brand_device_model2 pbdm ON pbdm.device_id = ga.device_id JOIN gender_age ga ON ga.device_id = pbdm.device_id WHERE lc.category = 'MOBA';
SELECT    CONCAT(ROUND(COUNT(CASE WHEN gender = 'F' THEN device_id END) / COUNT(*) * 100, 2), '%') AS 'the percentage of female OPPO users',   CONCAT(ROUND(COUNT(CASE WHEN gender = 'M' THEN device_id END) / COUNT(*) * 100, 2), '%') AS 'the percentage of male OPPO users' FROM    gender_age   JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE    phone_brand = 'OPPO';
SELECT longitude, latitude FROM events WHERE timestamp LIKE '2016-05-08%';
SELECT app_id, is_installed FROM app_events WHERE event_id = 844;
SELECT COUNT(*)  FROM events  WHERE timestamp LIKE '2016-04-30%';
SELECT COUNT(DISTINCT device_id)  FROM phone_brand_device_model2  WHERE phone_brand = 'vivo' AND device_model = 'Xplay3S';
SELECT    DIVIDE(     COUNT(CASE WHEN gender = 'M' AND `group` = 'M27-28' THEN device_id END),     COUNT(CASE WHEN gender = 'F' AND `group` = 'F27-28' THEN device_id END)   ) AS ratio FROM gender_age;
SELECT al.label_id FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category IN ('online shopping', 'online malls');
SELECT DISTINCT pbdm.phone_brand, pbdm.device_model FROM phone_brand_device_model2 pbdm JOIN events e ON pbdm.device_id = e.device_id WHERE e.timestamp LIKE '2016-05-05%' AND e.longitude = 112 AND e.latitude = 44;
SELECT a.app_id, e.timestamp FROM app_events e JOIN app_all a ON e.app_id = a.app_id WHERE e.event_id = 82;
SELECT ga.gender, ga.age FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE e.event_id = 15251;
SELECT COUNT(e.event_id) FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE ga.age = 88 AND ga.gender = 'M' AND e.timestamp LIKE '2016-05-04%';
SELECT    ga.gender,    ga.age,    COUNT(e.event_id) AS num_events FROM    events e    JOIN gender_age ga ON e.device_id = ga.device_id  WHERE    e.longitude = -102 AND e.latitude = 38  GROUP BY    ga.gender, ga.age;
SELECT pb.device_model, pb.phone_brand FROM phone_brand_device_model2 pb JOIN events e ON pb.device_id = e.device_id WHERE e.longitude = 80 AND e.latitude = 44;
SELECT lc.category FROM events e JOIN app_events ae ON e.event_id = ae.event_id JOIN app_labels al ON ae.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE e.event_id = 155;
SELECT device_id FROM phone_brand_device_model2 JOIN gender_age ON phone_brand_device_model2.device_id = gender_age.device_id WHERE phone_brand = 'HTC' AND device_model = 'Butterfly' AND gender = 'F' LIMIT 5;
SELECT COUNT(DISTINCT a.app_id) FROM app_labels a JOIN label_categories b ON a.label_id = b.label_id WHERE b.category ='science fiction';
SELECT gender, age FROM gender_age WHERE device_id IN (   SELECT device_id   FROM phone_brand_device_model2   WHERE phone_brand = 'LG' AND device_model = 'L70' );
SELECT    CONCAT(ROUND(     (COUNT(a.app_id) / (SELECT COUNT(*) FROM app_all)) * 100, 2   ), '%') AS percentage FROM    app_all a   JOIN app_labels al ON a.app_id = al.app_id   JOIN label_categories lc ON al.label_id = lc.label_id WHERE    lc.category = 'Industry tag';
SELECT    CONCAT(COUNT(device_id) * 100 / (SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE phone_brand = 'LG'), '%') AS percentage,   COUNT(device_id) / (SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE phone_brand = 'LG' AND device_model = 'Nexus 5') AS ratio_male_female FROM phone_brand_device_model2 JOIN gender_age ON phone_brand_device_model2.device_id = gender_age.device_id WHERE phone_brand = 'LG' AND device_model = 'Nexus 5' AND gender IN ('M', 'F') GROUP BY gender;
SELECT COUNT(DISTINCT e.device_id) FROM events e JOIN app_events ae ON e.event_id = ae.event_id WHERE e.event_id = 2 AND ae.is_active = 0;
SELECT COUNT(*)  FROM events  WHERE timestamp LIKE '2016%';
SELECT COUNT(*)  FROM events  WHERE device_id = 29182687948017100 AND timestamp LIKE '2016%';
SELECT COUNT(DISTINCT device_id)  FROM gender_age  WHERE gender = 'M';
SELECT MAX(age)  FROM gender_age;
SELECT COUNT(*)  FROM gender_age  WHERE gender = 'F' AND age < 30;
SELECT COUNT(*) FROM gender_age JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE phone_brand_device_model2.device_model = 'Galaxy Note 2' AND gender_age.gender = 'F';
SELECT age FROM gender_age WHERE device_id IN (   SELECT device_id   FROM phone_brand_device_model2   WHERE device_model = 'Galaxy Note 2' );
SELECT p.device_model FROM phone_brand_device_model2 p JOIN gender_age g ON p.device_id = g.device_id WHERE g.age = (SELECT MAX(age) FROM gender_age);
SELECT group FROM gender_age WHERE device_id IN (     SELECT device_id     FROM phone_brand_device_model2     WHERE phone_brand = 'vivo' ) GROUP BY group ORDER BY COUNT(group) DESC LIMIT 1;
SELECT COUNT(DISTINCT a.app_id) FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'Securities';
SELECT category FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE app_labels.app_id = 1977658975649780000;
SELECT lc.category FROM app_labels al JOIN app_events ae ON al.app_id = ae.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE ae.event_id = 2 AND ae.is_active = 0;
SELECT e.longitude, e.latitude FROM events e JOIN app_events ae ON e.event_id = ae.event_id WHERE e.event_id = 2 AND ae.is_active = 0;
SELECT MIN(e.timestamp) FROM events e JOIN app_events ae ON e.event_id = ae.event_id WHERE e.event_id = 2 AND ae.is_active = 0;
SELECT e.event_id FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE p.phone_brand = 'vivo';
SELECT COUNT(DISTINCT e.device_id) FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE e.event_id = 2 AND p.phone_brand = 'vivo';
SELECT e.timestamp FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE e.event_id = '2' AND p.phone_brand = 'vivo';
SELECT COUNT(e.event_id) FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE p.phone_brand = 'vivo' AND YEAR(e.timestamp) = 2016;
SELECT COUNT(*) FROM gender_age WHERE gender = 'F' AND age < 30 AND device_id IN (     SELECT device_id     FROM phone_brand_device_model2     WHERE phone_brand = 'vivo' );
SELECT lc.category FROM (   SELECT al.label_id, COUNT(DISTINCT al.app_id) as app_count   FROM app_labels al   GROUP BY al.label_id   ORDER BY app_count DESC   LIMIT 1 ) sub JOIN label_categories lc ON sub.label_id = lc.label_id;
SELECT phone_brand FROM phone_brand_device_model2 WHERE device_id IN (   SELECT device_id   FROM gender_age   WHERE gender = 'F'   ORDER BY age   LIMIT 1 );
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE ga.group = 'M23-26' AND pb.phone_brand = 'vivo';
SELECT    (COUNT(CASE WHEN g.group = 'M23-26' THEN 1 ELSE NULL END) / COUNT(*)) * 100  FROM    gender_age g    JOIN phone_brand_device_model2 p ON g.device_id = p.device_id  WHERE    p.phone_brand = 'vivo';
SELECT    SUM(IF(phone_brand = 'vivo', 1, 0)) / COUNT(device_id) * 100  FROM    phone_brand_device_model2  WHERE    device_id IN (SELECT device_id FROM events WHERE event_id = '2');
SELECT AVG(age)  FROM gender_age  WHERE device_id IN (   SELECT device_id    FROM phone_brand_device_model2    WHERE phone_brand = 'vivo' )
SELECT COUNT(*)  FROM gender_age  WHERE gender = 'F' AND group = 'F27-28';
SELECT MAX(age) FROM gender_age WHERE gender = 'M';
SELECT COUNT(DISTINCT a.app_id) FROM app_events a WHERE a.is_installed = 1 AND a.is_active = 0;
SELECT MIN(age) FROM gender_age WHERE gender = 'F';
SELECT COUNT(DISTINCT device_model)  FROM phone_brand_device_model2  WHERE phone_brand = 'VIVO';
SELECT DISTINCT device_model  FROM phone_brand_device_model2  WHERE phone_brand = 'OPPO'  LIMIT 15;
SELECT device_model FROM phone_brand_device_model2 WHERE device_id IN (   SELECT device_id   FROM gender_age   WHERE gender = 'M' AND group = 'M39+' ) GROUP BY device_model ORDER BY COUNT(*) DESC LIMIT 10;
SELECT DISTINCT pbdm.device_model FROM app_events ae JOIN app_all aa ON ae.app_id = aa.app_id JOIN events e ON ae.event_id = e.event_id JOIN phone_brand_device_model2 pbdm ON e.device_id = pbdm.device_id WHERE ae.is_installed = 1 AND ae.is_active = 1 LIMIT 5;
SELECT COUNT(DISTINCT ga.device_id) FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id JOIN app_all aa ON al.app_id = aa.app_id JOIN app_events ae ON aa.app_id = ae.app_id JOIN events e ON ae.event_id = e.event_id JOIN gender_age ga ON e.device_id = ga.device_id WHERE lc.category = 'Financial Information';
SELECT COUNT(DISTINCT ga.device_id) FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id JOIN app_all aa ON al.app_id = aa.app_id JOIN phone_brand_device_model2 pbdm ON aa.app_id = pbdm.device_id JOIN gender_age ga ON pbdm.device_id = ga.device_id WHERE lc.category = 'game-Art Style';
SELECT COUNT(*)  FROM gender_age  WHERE gender = 'Male' AND device_id IN (     SELECT device_id      FROM phone_brand_device_model2      WHERE phone_brand = 'OPPO' );
SELECT phone_brand FROM phone_brand_device_model2 WHERE device_id IN (   SELECT device_id   FROM gender_age   ORDER BY age   LIMIT 1 )
SELECT category, COUNT(DISTINCT device_id) as num_users FROM (   SELECT e.device_id, l.category   FROM events e   JOIN app_events ae ON e.event_id = ae.event_id   JOIN app_labels al ON ae.app_id = al.app_id   JOIN label_categories l ON al.label_id = l.label_id ) t GROUP BY category ORDER BY num_users LIMIT 3;
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE ga.gender = 'M' AND pb.device_model = 'Galaxy Ace Plus';
SELECT    group  FROM    gender_age  WHERE    device_id IN (     SELECT        device_id      FROM        phone_brand_device_model2      WHERE        phone_brand = 'OPPO'      GROUP BY        device_id      ORDER BY        COUNT(device_id) DESC      LIMIT 1   )
SELECT device_model, COUNT(device_model) as count FROM phone_brand_device_model2 JOIN gender_age ON phone_brand_device_model2.device_id = gender_age.device_id WHERE gender_age.gender = 'F' GROUP BY device_model ORDER BY count DESC LIMIT 5;
SELECT    DIVIDE(SUM(IF(lc.category = '80s Japanese comic',1,0)), COUNT(aa.app_id)) * 100 as '80s',   DIVIDE(SUM(IF(lc.category = '90s Japanese comic',1,0)), COUNT(aa.app_id)) * 100 as '90s',   DIVIDE(SUM(IF(lc.category = '80s Japanese comic',1,0)), COUNT(aa.app_id)) / DIVIDE(SUM(IF(lc.category = '90s Japanese comic',1,0)), COUNT(aa.app_id)) * 100 as ratio FROM    app_all aa JOIN    app_labels al ON aa.app_id = al.app_id JOIN    label_categories lc ON al.label_id = lc.label_id;
SELECT    SUM(IF(phone_brand = 'OPPO' AND device_model = 'R815T', 1, 0)) /   SUM(IF(gender = 'F' AND phone_brand = 'OPPO', 1, 0))  AS percentage FROM    gender_age    JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id;
SELECT phone_brand FROM phone_brand_device_model2 WHERE device_model = '坚果手机';
SELECT COUNT(DISTINCT device_model)  FROM phone_brand_device_model2  WHERE phone_brand = '中兴';
SELECT group FROM gender_age WHERE age = 24;
SELECT timestamp FROM events WHERE event_id = '887711';
SELECT COUNT(*)  FROM events  WHERE timestamp LIKE '2016-05-06 %';
SELECT pbdm.device_model FROM events e JOIN phone_brand_device_model2 pbdm ON e.device_id = pbdm.device_id WHERE e.timestamp = '2016/5/7 23:55:16' AND e.longitude = 113 AND e.latitude = 28;
SELECT COUNT(DISTINCT a.app_id) FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'game-Fishing';
SELECT COUNT(DISTINCT ga.device_id) FROM phone_brand_device_model2 pb JOIN gender_age ga ON pb.device_id = ga.device_id JOIN sample_submission ss ON ga.device_id = ss.device_id WHERE pb.device_model = '魅蓝Note 2' AND ss.F29_32 = 1;
SELECT COUNT(DISTINCT ga.device_id) FROM events e JOIN app_events ae ON e.event_id = ae.event_id JOIN gender_age ga ON e.device_id = ga.device_id WHERE ae.is_active = 1 AND ga.age = '30' AND e.timestamp LIKE '2016-05-02%';
SELECT COUNT(DISTINCT a.app_id) FROM app_events a JOIN events e ON a.event_id = e.event_id WHERE e.timestamp = '2016/5/6 23:33:34' AND a.is_installed = 1;
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE ga.gender = 'F' AND pb.phone_brand = 'E派';
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE ga.gender = 'M' AND pb.device_model = 'Galaxy S5';
SELECT COUNT(DISTINCT ga.device_id) FROM events e JOIN gender_age ga ON e.device_id = ga.device_id JOIN app_events ae ON e.event_id = ae.event_id WHERE ga.group = 'F29-32' AND ae.is_active = '1' AND e.timestamp LIKE '2016-05-07%';
SELECT category  FROM app_labels  JOIN label_categories ON app_labels.label_id = label_categories.label_id  WHERE app_id = 894384172610331000;
SELECT COUNT(DISTINCT a.app_id) FROM app_events a JOIN events e ON a.event_id = e.event_id WHERE e.timestamp = '2016/5/6 14:09:49' AND e.longitude = '116' AND e.latitude = '40' AND a.is_active = '1';
SELECT DIVIDE(     SUM(IF(timestamp = '2016/5/2 7:50:28' AND is_active = '1', 1, 0)),     SUM(IF(timestamp = '2016/5/2 7:41:03' AND is_active = '1', 1, 0)) ) AS result FROM events JOIN app_events ON events.event_id = app_events.event_id;
SELECT COUNT(*)  FROM phone_brand_device_model2  WHERE phone_brand = 'vivo';
SELECT    SUBTRACT(SUM(IF(phone_brand = 'vivo',1,0)), SUM(IF(phone_brand = 'LG',1,0)))  FROM    phone_brand_device_model2;
SELECT device_id FROM gender_age WHERE age = (SELECT MIN(age) FROM gender_age);
SELECT COUNT(*)  FROM gender_age  WHERE gender = 'F' AND age > 30;
SELECT gender FROM gender_age WHERE age = (SELECT MAX(age) FROM gender_age);
SELECT MIN(age) FROM gender_age WHERE gender = 'F';
SELECT MIN(age) FROM gender_age WHERE device_id IN (   SELECT device_id   FROM phone_brand_device_model2   WHERE phone_brand = 'vivo' );
SELECT DISTINCT a.app_id FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'Securities';
SELECT gender FROM gender_age WHERE device_id = (   SELECT device_id   FROM events   WHERE timestamp = '2016-05-01 00:55:25' );
SELECT COUNT(DISTINCT e.device_id) FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE YEAR(e.timestamp) = 2016 AND ga.group = 'M23-26';
SELECT phone_brand FROM phone_brand_device_model2 WHERE device_id IN (   SELECT device_id   FROM gender_age   WHERE group = 'M23-26' ) GROUP BY phone_brand ORDER BY COUNT(device_id) DESC LIMIT 1;
SELECT e.longitude, e.latitude FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE p.device_model = 'Galaxy Note 2';
SELECT DISTINCT pbdm.device_model FROM phone_brand_device_model2 pbdm JOIN gender_age ga ON pbdm.device_id = ga.device_id WHERE ga.gender = 'F';
SELECT category FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE app_labels.app_id = '7324884708820020000';
SELECT COUNT(DISTINCT a.app_id) FROM app_events ae JOIN app_labels al ON ae.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE ae.event_id = 2 AND ae.is_active = 0 AND lc.category = 'Property Industry 1.0';
SELECT COUNT(DISTINCT lc.category) FROM app_events ae JOIN app_labels al ON ae.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE ae.event_id = 2 AND ae.is_active = 0;
SELECT device_model FROM (   SELECT device_model, COUNT(gender) as count_female   FROM phone_brand_device_model2   JOIN gender_age ON phone_brand_device_model2.device_id = gender_age.device_id   WHERE gender = 'F' AND age > 30   GROUP BY device_model ) AS subquery ORDER BY count_female DESC LIMIT 1;
SELECT DISTINCT pbdm.device_model FROM phone_brand_device_model2 pbdm JOIN events e ON pbdm.device_id = e.device_id WHERE e.longitude = 121 AND e.latitude = 31;
SELECT    lc.category,    COUNT(DISTINCT ae.app_id) AS num_app_users FROM    app_events ae   JOIN app_labels al ON ae.app_id = al.app_id   JOIN label_categories lc ON al.label_id = lc.label_id GROUP BY    lc.category ORDER BY    num_app_users DESC LIMIT 3;
SELECT e.event_id FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE ga.age = (SELECT MAX(age) FROM gender_age);
SELECT COUNT(e.event_id) FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE ga.gender = 'F' AND ga.age = (SELECT MIN(age) FROM gender_age WHERE gender = 'F');
SELECT COUNT(DISTINCT ga.device_id) FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE e.timestamp = '2016-05-01' AND ga.gender = 'M';
SELECT    IF(SUM(category = 'Securities') > SUM(category = 'Finance'), 'Securities', 'Finance') as more FROM    app_labels   JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE    category IN ('Securities', 'Finance');
SELECT DISTINCT pbdm2.device_model FROM phone_brand_device_model2 pbdm2 JOIN gender_age ga ON pbdm2.device_id = ga.device_id WHERE ga.group = 'M23-26';
SELECT AVG(age)  FROM gender_age  WHERE gender = 'F' AND device_id IN (     SELECT device_id      FROM phone_brand_device_model2      WHERE phone_brand = 'vivo' );
SELECT    SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) /    SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) AS ratio FROM    gender_age ga JOIN    phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id WHERE    pbdm.phone_brand = 'vivo';
SELECT    DIVIDE(     SUM(CASE WHEN lc.category = 'Securities' THEN 1 ELSE 0 END),     SUM(CASE WHEN lc.category = 'Finance' THEN 1 ELSE 0 END)   ) AS ratio FROM    app_all a   JOIN app_labels al ON a.app_id = al.app_id   JOIN label_categories lc ON al.label_id = lc.label_id;
SELECT label_id FROM label_categories WHERE category = 'Third-party card management';
SELECT    DIVIDE(SUM(CASE WHEN is_active = 1 THEN 1 ELSE 0 END), SUM(CASE WHEN is_active = 0 THEN 1 ELSE 0 END)) AS ratio FROM    app_events WHERE    event_id = '58';
SELECT COUNT(*)  FROM events  WHERE device_id = '3915082290673130000';
SELECT      SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) / COUNT(device_id) * 100  FROM      gender_age;
SELECT COUNT(*)  FROM events  WHERE longitude = -156;
SELECT COUNT(DISTINCT a.app_id) FROM app_labels a WHERE a.label_id = 48;
SELECT COUNT(*)  FROM label_categories  WHERE category LIKE 'game%';
SELECT COUNT(*)  FROM events  WHERE longitude = 80 AND latitude = 37;
SELECT l.label_id, lc.category FROM app_labels l JOIN label_categories lc ON l.label_id = lc.label_id WHERE l.app_id = '5758400314709850000';
SELECT a.app_id FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'game-Rowing';
SELECT al.app_id, al.label_id FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'Chinese Classical Mythology';
SELECT    COUNT(DISTINCT a.app_id) AS num_app_ids,   e.longitude, e.latitude FROM    app_events e   JOIN app_all a ON e.app_id = a.app_id WHERE    e.event_id = '79641';
SELECT e.longitude, e.latitude, e.timestamp FROM app_all a JOIN app_events ae ON a.app_id = ae.app_id JOIN events e ON ae.event_id = e.event_id WHERE a.app_id = '8715964299802120000';
SELECT COUNT(DISTINCT e.device_id) FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE p.phone_brand = 'OPPO' AND e.timestamp LIKE '2016-05-01 00:%';
SELECT    DIVIDE(SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END), SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END)) AS ratio FROM    gender_age   JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE    phone_brand = 'vivo' AND device_model = 'X5Pro';
SELECT COUNT(*) FROM gender_age JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE gender_age.gender = 'F' AND phone_brand_device_model2.phone_brand = 'ZUK' AND phone_brand_device_model2.device_model = 'Z1' AND gender_age.group = 'F23-';
SELECT pbdm.phone_brand, pbdm.device_model FROM phone_brand_device_model2 pbdm JOIN gender_age ga ON pbdm.device_id = ga.device_id WHERE ga.age < 10;
SELECT    DIVIDE(SUM(CASE WHEN ga.gender = 'F' AND ga.age > 80 THEN 1 ELSE 0 END), COUNT(ga.device_id))  FROM    gender_age ga  JOIN    phone_brand_device_model2 pb  ON    ga.device_id = pb.device_id  WHERE    pb.phone_brand = 'HTC';
SELECT p.phone_brand, p.device_model FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE e.event_id = '6701';
SELECT gender, age, COUNT(event_id) as event_count FROM (   SELECT e.device_id, ga.gender, ga.age   FROM events e   JOIN gender_age ga ON e.device_id = ga.device_id   WHERE e.device_id BETWEEN -9215352913819630000 AND -9222956879900150000 ) AS sub GROUP BY gender, age ORDER BY event_count DESC LIMIT 1;
SELECT timestamp FROM events WHERE event_id = 12;
SELECT COUNT(DISTINCT app_id)  FROM app_events  WHERE is_active = 1;
SELECT COUNT(DISTINCT device_id)  FROM phone_brand_device_model2  WHERE device_model = 'A51';
SELECT gender FROM gender_age WHERE device_id = -9222956879900150000;
SELECT COUNT(DISTINCT al.label_id) FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'game-card';
SELECT ga.group FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE pb.phone_brand = 'vivo';
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE ga.age < 30 AND pb.device_model = 'Galaxy Note 2';
SELECT      (SUM(CASE WHEN age < 50 THEN 1 ELSE 0 END) / COUNT(device_id)) * 1.0 AS percentage FROM      gender_age WHERE      device_id IN (         SELECT              device_id         FROM              phone_brand_device_model2         WHERE              phone_brand = 'OPPO'     )
SELECT AVG(age)  FROM gender_age  WHERE device_id IN (   SELECT device_id    FROM phone_brand_device_model2    WHERE device_model = 'R7' )
SELECT category FROM label_categories WHERE label_id = (   SELECT label_id   FROM app_labels   WHERE app_id = '5902120154267990000' );
SELECT ga.group FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE pb.phone_brand = 'LG';
SELECT category FROM label_categories WHERE label_id IN (   SELECT label_id   FROM app_labels   WHERE app_id = 4955831798976240000 );
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE ga.gender = 'F' AND pb.device_model = 'MI 3';
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE ga.gender = 'M' AND pb.device_model = 'Desire 820';
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE ga.age > 20 AND pb.device_model = 'ELIFE E7 Mini';
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE ga.age BETWEEN 20 AND 50 AND pb.device_model = 'Galaxy Premier';
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE ga.gender = 'M' AND pb.phone_brand = 'HTC';
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE ga.age BETWEEN 20 AND 60 AND pb.phone_brand = 'TCL';
SELECT    (SUM(CASE WHEN age > 20 THEN 1 ELSE 0 END) / COUNT(device_id)) * 1.0 AS percentage FROM    gender_age   JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE    phone_brand = 'SUGAR';
SELECT longitude, latitude FROM events WHERE timestamp BETWEEN '2016-04-30 00:00:00' AND '2016-04-30 23:59:59';
SELECT COUNT(DISTINCT device_model)  FROM phone_brand_device_model2  WHERE phone_brand = 'HTC';
SELECT app_id FROM app_events WHERE is_installed = 1 AND is_active = 1;
SELECT COUNT(DISTINCT a.app_id) FROM app_labels a WHERE a.label_id = 7;
SELECT device_id FROM gender_age WHERE gender = 'F' AND age BETWEEN 29 AND 31;
SELECT DISTINCT a.app_id FROM app_all a JOIN app_labels al ON a.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'game-stress reliever';
SELECT    DATE(timestamp) AS date,    COUNT(event_id) AS num_events FROM    events    JOIN gender_age ON events.device_id = gender_age.device_id WHERE    gender_age.age = 40 AND gender_age.gender = 'M' GROUP BY    DATE(timestamp) ORDER BY    num_events DESC LIMIT 1;
SELECT phone_brand, COUNT(is_installed) as installed_count FROM app_events JOIN phone_brand_device_model2 ON app_events.app_id IN (SELECT app_id FROM app_all) JOIN events ON app_events.event_id = events.event_id JOIN gender_age ON events.device_id = gender_age.device_id JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE is_installed = 1 GROUP BY phone_brand ORDER BY installed_count DESC LIMIT 1;
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN (   SELECT ae.app_id, ae.is_installed, ae.is_active   FROM app_events ae   JOIN app_all a ON ae.app_id = a.app_id ) ae ON ga.device_id IN (   SELECT e.device_id   FROM events e   JOIN app_events ae ON e.event_id = ae.event_id   WHERE ae.is_installed = 1 AND ae.is_active = 0 ) WHERE ga.gender = 'M' AND ga.age < 23;
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id JOIN events e ON pb.device_id = e.device_id JOIN app_events ae ON e.event_id = ae.event_id JOIN app_labels al ON ae.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE ga.gender = 'F' AND ae.is_installed = 1 AND lc.category = 'game-Finding fault';
SELECT gender FROM (   SELECT gender, COUNT(gender) AS count_gender   FROM events   JOIN gender_age ON events.device_id = gender_age.device_id   WHERE timestamp BETWEEN '2016-05-01 00:00:00' AND '2016-05-10 23:59:59'   GROUP BY gender   ORDER BY count_gender DESC   LIMIT 1 ) AS subquery;
SELECT group, COUNT(*) as count FROM gender_age JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE device_model = 'SM-T2558' GROUP BY group ORDER BY count DESC LIMIT 1;
SELECT COUNT(*) FROM gender_age WHERE age > 50 AND device_id NOT IN (   SELECT device_id   FROM phone_brand_device_model2   WHERE phone_brand = 'HTC' AND device_model = 'One M8 Eye' );
SELECT e.longitude, e.latitude FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE ga.gender = 'F' AND ga.age < 30;
SELECT    (SUM(CASE WHEN ga.gender = 'F' AND ae.is_installed = 0 THEN 1 ELSE 0 END) /     SUM(CASE WHEN ga.gender = 'M' THEN 1 ELSE 0 END)) * 1.0 AS percentage FROM    gender_age ga LEFT JOIN    app_events ae ON ga.device_id = ae.device_id LEFT JOIN    app_all a ON ae.app_id = a.app_id;
SELECT AVG(age)  FROM gender_age  WHERE device_id IN (   SELECT device_id    FROM events    WHERE event_id IN (     SELECT event_id      FROM app_events      WHERE is_installed = 1 AND is_active = 0   ) )
SELECT e.event_id FROM events e WHERE e.timestamp LIKE '2016-05-01%' AND e.latitude = 31 LIMIT 3;
SELECT event_id FROM events WHERE longitude = 0 AND latitude = 0 LIMIT 3;
SELECT    SUBTRACT(SUM(latitude!= 0 AND longitude!= 0), SUM(latitude = 0 AND longitude = 0)) AS difference FROM    events WHERE    device_id = -9222956879900150000;
SELECT device_id FROM gender_age WHERE gender = 'F' LIMIT 3;
SELECT l.category, al.label_id FROM label_categories l JOIN app_labels al ON l.label_id = al.label_id WHERE l.category LIKE '%game%' LIMIT 5;
SELECT DISTINCT device_model FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO' LIMIT 3;
SELECT    (SUM(CASE WHEN is_installed = 1 AND is_active = 0 THEN 1 ELSE 0 END) / COUNT(app_id)) * 1.0 AS percentage FROM    app_events WHERE    event_id = 6;
SELECT    IF(SUM(gender = 'M') > SUM(gender = 'F'), 'M', 'F') AS gender_owned_more FROM    gender_age ga   JOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id WHERE    pbdm.device_model = 'Galaxy Note 2';
SELECT timestamp, COUNT(DISTINCT device_id)  FROM events  JOIN app_events ON events.event_id = app_events.event_id  WHERE events.event_id = 2 AND app_events.is_active = 1;
SELECT category FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE app_labels.app_id = 5902120154267990000;
SELECT COUNT(DISTINCT ga.device_id) FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id JOIN app_all aa ON al.app_id = aa.app_id JOIN app_events ae ON aa.app_id = ae.app_id JOIN events e ON ae.event_id = e.event_id JOIN gender_age ga ON e.device_id = ga.device_id WHERE lc.category = 'comics';
SELECT ga.gender, ga.age FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE e.event_id = 1 AND e.device_id = 29182687948017100;
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN events e ON ga.device_id = e.device_id WHERE ga.gender = 'M' AND e.longitude = 114;
SELECT timestamp FROM events WHERE event_id = 7 AND device_id IN (     SELECT device_id     FROM app_all     JOIN app_events ON app_all.app_id = app_events.app_id     WHERE app_all.app_id = -8022267440849930000 );
SELECT category FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE app_id = -9222198347540750000;
SELECT ga.group FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE pb.phone_brand = 'LG' AND pb.device_model = 'Nexus 4';
SELECT gender FROM gender_age WHERE device_id IN (   SELECT device_id   FROM phone_brand_device_model2   WHERE phone_brand = 'HTC' AND device_model = 'Desire 826' ) LIMIT 1;
SELECT      SUM(CASE WHEN la.category = 'Academic Information' THEN 1 ELSE 0 END) / COUNT(DISTINCT a.app_id) * 1.0 AS percentage FROM      app_all a JOIN      app_labels al ON a.app_id = al.app_id JOIN      label_categories la ON al.label_id = la.label_id;
SELECT    SUM(CASE WHEN ga.group = 'F27-28' THEN 1 ELSE 0 END) / COUNT(ga.device_id) * 1.0 AS percentage FROM    gender_age ga   JOIN events e ON ga.device_id = e.device_id WHERE    e.timestamp LIKE '2016-05-03%'    AND ga.group = 'F27-28';
SELECT COUNT(*)  FROM phone_brand_device_model2  WHERE phone_brand = 'OPPO';
SELECT `group`, COUNT(*) as count FROM gender_age GROUP BY `group` ORDER BY count DESC LIMIT 1;
SELECT COUNT(*)  FROM events  WHERE device_id = '4069764298338760000';
SELECT COUNT(DISTINCT a.app_id) FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'Equity Fund';
SELECT e.longitude, e.latitude FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE ga.gender = 'F' AND ga.group = 'F24-26';
SELECT COUNT(*) FROM gender_age JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE gender = 'M' AND device_model = 'Galaxy Note 3';
SELECT p.phone_brand, p.device_model FROM events e JOIN phone_brand_device_model2 p ON e.device_id = p.device_id WHERE e.timestamp = '2016-05-07 06:03:22';
SELECT phone_brand FROM phone_brand_device_model2 JOIN gender_age ON phone_brand_device_model2.device_id = gender_age.device_id WHERE age BETWEEN 20 AND 30 GROUP BY phone_brand ORDER BY COUNT(phone_brand) DESC LIMIT 1;
SELECT    SUM(CASE WHEN gender IS NULL AND age IS NULL AND `group` IS NULL THEN 1 ELSE 0 END) / COUNT(device_id) * 1.0 AS percentage FROM    gender_age ga   JOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id WHERE    pbdm.phone_brand = 'vivo';
SELECT k.keyword FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id WHERE e.title = 'Refuge: Part 1';
SELECT COUNT(k.keyword) FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id WHERE e.series = 'law_and_order' AND e.season = 9 AND e.episode = 23;
SELECT title FROM Episode WHERE episode_id IN (   SELECT episode_id   FROM Keyword   WHERE keyword = 'laundering money' );
SELECT k.keyword FROM Keyword k JOIN Episode e ON k.episode_id = e.episode_id WHERE e.rating > 8;
SELECT COUNT(*)  FROM Vote  WHERE stars = 10 AND episode_id IN (     SELECT episode_id      FROM Episode      WHERE title = 'Cherished' );
SELECT SUM(votes)  FROM Episode  JOIN Vote  ON Episode.episode_id = Vote.episode_id  WHERE title = 'Cherished';
SELECT e.title FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 10 ORDER BY v.votes DESC LIMIT 1;
SELECT role FROM Credit JOIN Person ON Credit.person_id = Person.person_id JOIN Episode ON Credit.episode_id = Episode.episode_id WHERE Person.name = 'Park Dietz' AND Episode.title = 'Cherished' AND credited = 'true';
SELECT COUNT(DISTINCT p.person_id) FROM Person p JOIN Award a ON p.person_id = a.person_id JOIN Episode e ON a.episode_id = e.episode_id WHERE e.title = 'Cherished' AND NOT EXISTS (   SELECT 1   FROM Credit c   WHERE c.episode_id = e.episode_id   AND c.person_id = p.person_id   AND c.credited <> '' );
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id JOIN Episode e ON c.episode_id = e.episode_id WHERE e.title = 'Cherished' AND c.role = 'technical advisor' AND c.credited = 'true';
SELECT COUNT(*)  FROM Credit  WHERE person_id = (SELECT person_id FROM Person WHERE name = 'Park Dietz') AND credited = 'true';
SELECT e.title FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'Park Dietz' AND c.credited = 'true';
SELECT credited FROM Credit WHERE episode_id = 'tt0629204' AND person_id = (   SELECT person_id   FROM Person   WHERE name = 'Anthony Azzara' );
SELECT COUNT(k.keyword) FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id WHERE e.title = 'Disciple';
SELECT e.title FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = '1' ORDER BY v.votes DESC LIMIT 1;
SELECT COUNT(*)  FROM Award  WHERE series = 'Law and Order'  AND episode_id IN (   SELECT episode_id    FROM Episode    WHERE series = 'Law and Order'    AND season = 9    AND episode = 20 );
SELECT COUNT(role) FROM Credit WHERE episode_id IN (   SELECT episode_id   FROM Episode   WHERE series = 'Law and Order' AND season = 9 AND episode = 17 ) AND credited = 'true';
SELECT e.summary FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.award_id = '296';
SELECT c.role FROM Credit c JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'Joseph Blair';
SELECT COUNT(*)  FROM Award  WHERE person_id IN (   SELECT person_id    FROM Person    WHERE name = 'Rene Balcer' );
SELECT air_date FROM Episode WHERE votes = (SELECT MAX(votes) FROM Episode);
SELECT p.name FROM Award a JOIN Person p ON a.person_id = p.person_id WHERE a.award_id = '313';
SELECT COUNT(DISTINCT e.episode_id) FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'J.K. Simmons';
SELECT COUNT(*)  FROM Vote  WHERE stars = '9' AND episode_id IN (     SELECT episode_id      FROM Episode      WHERE title = 'Sideshow' );
SELECT    (SELECT COUNT(*) FROM Keyword k     JOIN Episode e ON k.episode_id = e.episode_id     WHERE e.title = 'Refuge: Part 1') /    (SELECT COUNT(*) FROM Keyword k     JOIN Episode e ON k.episode_id = e.episode_id     WHERE e.title = 'Shield') AS times;
SELECT AVG(cast_members)  FROM (   SELECT episode_id, COUNT(DISTINCT person_id) AS cast_members    FROM Credit    WHERE category = 'Cast' AND credited = 'TRUE'    AND episode_id IN (     SELECT episode_id      FROM Episode      WHERE number_in_series BETWEEN 185 AND 193   )    GROUP BY episode_id ) AS subquery;
SELECT p.name FROM Person p WHERE p.person_id NOT IN (   SELECT c.person_id   FROM Credit c   WHERE c.episode_id = 'tt0629391' AND c.credited <> '' );
SELECT COUNT(DISTINCT p.person_id) FROM Person p JOIN Award a ON p.person_id = a.person_id WHERE a.result = 'Winner' GROUP BY p.person_id HAVING COUNT(a.result) >= 3;
SELECT p.name FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE e.episode_id = 'tt0629204' AND c.role ='script supervisor';
SELECT COUNT(*)  FROM Award  WHERE person_id IN (SELECT person_id FROM Person WHERE name = 'Julia Roberts')  AND result = 'Nominee';
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.role = 'camera operator' ORDER BY p.height_meters DESC LIMIT 1;
SELECT COUNT(DISTINCT p.person_id) FROM Person p JOIN Award a ON p.person_id = a.person_id WHERE p.birth_country = 'Canada' AND a.year = 1999 AND a.result = 'won';
SELECT COUNT(DISTINCT v.episode_id) FROM Vote v JOIN Episode e ON v.episode_id = e.episode_id WHERE v.stars = 10 AND e.rating = (SELECT MAX(rating) FROM Episode);
SELECT k.keyword FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id WHERE e.title = 'Shield';
SELECT (COUNT(CASE WHEN stars = 1 THEN episode_id END) / COUNT(episode_id)) * 100 FROM Vote WHERE episode_id IN (SELECT episode_id FROM Episode WHERE title = 'True North');
SELECT e.title FROM Episode e JOIN (   SELECT episode_id, COUNT(keyword) as keyword_count   FROM Keyword   GROUP BY episode_id   ORDER BY keyword_count DESC   LIMIT 1 ) k ON e.episode_id = k.episode_id;
SELECT COUNT(DISTINCT e.episode_id) FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE e.air_date LIKE '1998%' AND a.organization = 'International Monitor Awards' AND a.result = 'Winner';
SELECT COUNT(*)  FROM Episode  JOIN Award ON Episode.episode_id = Award.episode_id  WHERE Episode.title = 'Agony' AND Award.result = 'Winner';
SELECT    -- count of episodes in 9th season   (SELECT COUNT(*) FROM Episode WHERE series = 'Law and Order' AND season = 9) AS episodes_in_9th_season,      -- average number of casts per season   (SELECT AVG(casts_per_episode) FROM (     SELECT        COUNT(DISTINCT c.person_id) AS casts_per_episode     FROM        Episode e     JOIN        Credit c ON e.episode_id = c.episode_id     WHERE        e.series = 'Law and Order' AND c.category = 'Cast'     GROUP BY        e.season   ) AS casts_per_season) AS avg_casts_per_season;
SELECT k.keyword FROM Keyword k JOIN Episode e ON k.episode_id = e.episode_id WHERE e.episode_id = (   SELECT episode_id   FROM Vote   ORDER BY votes DESC   LIMIT 1 OFFSET 1 );
SELECT COUNT(*)  FROM Award  WHERE episode_id IN (SELECT episode_id FROM Episode WHERE title = 'Agony')  AND result = 'Winner';
SELECT p.name FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE e.title = 'Flight' AND c.role = 'Narrator';
SELECT organization FROM Award WHERE result = 'Winner' AND person_id = (     SELECT person_id     FROM Award     WHERE result = 'Winner' AND person_id = (         SELECT person_id         FROM Person         WHERE name = 'Constantine Makris'     ) ) GROUP BY organization ORDER BY COUNT(award_id) DESC LIMIT 1;
SELECT p.name FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE e.episode = 3 AND c.role ='stunt coordinator';
SELECT COUNT(DISTINCT p.person_id) FROM Person p WHERE p.person_id NOT IN (   SELECT c.person_id   FROM Credit c   JOIN Episode e ON c.episode_id = e.episode_id   WHERE e.title = 'Admissions' AND c.credited <> '' );
SELECT e.title FROM Episode e JOIN (   SELECT episode_id   FROM Credit   WHERE category = 'Art Department'   GROUP BY episode_id   ORDER BY COUNT(person_id) DESC   LIMIT 1 ) c ON e.episode_id = c.episode_id;
SELECT COUNT(DISTINCT role) FROM Credit WHERE person_id IN (   SELECT person_id   FROM Person   WHERE name = 'Julia Roberts' ) AND episode_id IN (   SELECT episode_id   FROM Episode   WHERE series ='series_name'  -- replace'series_name' with the actual series name );
SELECT title FROM Episode WHERE episode_id IN (   SELECT episode_id   FROM Vote   WHERE stars = 10 AND votes >= 30 ) ORDER BY votes DESC LIMIT 3;
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.role = 'Clerk' ORDER BY p.birthdate DESC LIMIT 1;
SELECT COUNT(DISTINCT p.person_id) FROM Person p JOIN Credit c ON p.person_id = c.person_id JOIN Episode e ON c.episode_id = e.episode_id JOIN Vote v ON e.episode_id = v.episode_id WHERE e.episode = 24 AND v.stars = 1;
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.category = 'Cast';
SELECT    p.name,    COUNT(c.person_id) AS appearances,   COUNT(c.person_id) / (SELECT COUNT(*) FROM Credit) * 100 AS percentage FROM    Credit c JOIN    Person p ON c.person_id = p.person_id GROUP BY    c.person_id, p.name ORDER BY    appearances DESC LIMIT 1;
SELECT e.episode_id, e.title, e.air_date FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE e.series = 'Law & Order' AND a.award_category = 'Primetime Emmy';
SELECT COUNT(*) FROM Episode e WHERE e.episode_id NOT IN (   SELECT a.episode_id   FROM Award a   WHERE a.result!= 'Nominee' AND a.series LIKE 'Law & Order%' );
SELECT DISTINCT p.name, c.role FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.credited = '' AND c.role IS NOT NULL;
SELECT title FROM Episode ORDER BY rating ASC LIMIT 3;
SELECT CONCAT(birth_place, ', ', birth_region)  FROM Person  WHERE birth_name = 'Rene Chenevert Balcer';
SELECT name FROM Person WHERE birth_country = 'USA';
SELECT title FROM Episode WHERE episode_id IN (   SELECT episode_id   FROM Vote   WHERE stars = 1 );
SELECT p.name FROM Person p JOIN Award a ON p.person_id = a.person_id WHERE a.result = 'Winner' AND a.role = 'director' LIMIT 2;
SELECT votes FROM Episode WHERE title = 'Juvenile';
SELECT e.title FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'Anthony Azzara' AND c.credited = '';
SELECT DISTINCT a.year FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE e.title = 'DWB' AND a.result = 'Winner';
SELECT birth_region FROM Person WHERE person_id IN (   SELECT person_id   FROM Credit   WHERE role = 'assistant location manager' );
SELECT SUM(stars)  FROM Vote  WHERE episode_id IN (   SELECT episode_id    FROM Credit    WHERE person_id = (     SELECT person_id      FROM Person      WHERE name = 'Donna Villella'   ) )
SELECT role FROM Award JOIN Person ON Award.person_id = Person.person_id WHERE Person.name = 'Julia Roberts' AND Award.result = 'Nominee';
SELECT c.role FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE p.height_meters = (SELECT MAX(height_meters) FROM Person);
SELECT e.title FROM Episode e JOIN (   SELECT episode_id   FROM Award   WHERE result = 'Nominee'   GROUP BY episode_id   ORDER BY COUNT(episode_id) DESC   LIMIT 1 ) a ON e.episode_id = a.episode_id;
SELECT e.rating FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'Jace Alexander';
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id JOIN Episode e ON c.episode_id = e.episode_id WHERE e.season = 9 AND e.episode = 19;
SELECT AVG(stars) AS average_star_rating FROM Vote WHERE episode_id IN (   SELECT episode_id   FROM Credit   WHERE person_id IN (     SELECT person_id     FROM Person     WHERE name = 'Jim Bracchitta'   ) )
SELECT    (COUNT(DISTINCT p.person_id) / (SELECT COUNT(DISTINCT person_id) FROM Credit c WHERE c.episode_id IN (SELECT episode_id FROM Episode WHERE title = 'True North')) * 100) AS percentage FROM    Credit c    JOIN Episode e ON c.episode_id = e.episode_id    JOIN Person p ON c.person_id = p.person_id  WHERE    e.title = 'True North'    AND c.role = 'Additional Crew';
SELECT e.title, e.summary, e.air_date FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 10 AND v.votes = 72;
SELECT e.air_date, e.rating, v.stars, v.votes, v.percent FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE e.episode = 12 AND v.stars = 6;
SELECT p.name, a.role FROM Award a JOIN Person p ON a.person_id = p.person_id WHERE a.award = 'Best Television Episode' AND a.award_category = 'Edgar' AND a.year = 2000 AND a.result = 'won';
SELECT a.organization, a.year, a.award, a.award_category FROM Award a JOIN Person p ON a.person_id = p.person_id WHERE p.name = 'Rene Balcer' AND a.result = 'Winner';
SELECT a.year, a.episode_id FROM Award a JOIN Person p ON a.person_id = p.person_id WHERE a.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' AND a.award_category = 'Silver Gavel Award' AND a.award = 'Television' AND a.result = 'Winner' AND p.name = 'Constantine Makris' AND a.year IN (   SELECT year   FROM (     SELECT year,      LAG(year) OVER (ORDER BY year) AS prev_year     FROM Award     JOIN Person ON Award.person_id = Person.person_id     WHERE organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'     AND award_category = 'Silver Gavel Award'     AND award = 'Television'     AND result = 'Winner'     AND name = 'Constantine Makris'   ) t   WHERE year - prev_year = 1 )
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id JOIN Award a ON p.person_id = a.person_id WHERE c.role = 'writer' AND a.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' AND a.award_category = 'Silver Gavel Award' AND a.award = 'Television' AND a.result = 'Winner' AND a.episode_id IN (   SELECT episode_id   FROM Episode   WHERE series = 'Law and Order' ) AND a.year IN (   SELECT year   FROM Award   WHERE organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'   AND award_category = 'Silver Gavel Award'   AND award = 'Television'   AND result = 'Winner'   AND episode_id IN (     SELECT episode_id     FROM Episode     WHERE series = 'Law and Order'   )   GROUP BY year   HAVING COUNT(*) = 2 );
SELECT COUNT(*)  FROM Award  WHERE series = 'Law and Order'    AND episode_id = 20    AND organization = 'Primetime Emmy Awards'    AND year = 1999    AND result = 'nominee';
SELECT e.title, a.role FROM Award a JOIN Episode e ON a.episode_id = e.episode_id JOIN Person p ON a.person_id = p.person_id WHERE a.organization = 'Primetime Emmy Awards' AND a.year = 1999 AND a.award = 'Outstanding Guest Actress in a Drama Series' AND a.result = 'Winner' AND p.name = 'Julia Roberts';
SELECT e.title, e.air_date FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'Billy Fox' AND c.role = 'producer';
SELECT COUNT(*) FROM Credit c JOIN Person p ON c.person_id = p.person_id WHERE c.episode_id = 'tt0629228' AND p.birth_country = 'USA' AND c.category = 'Cast' AND c.credited = '';
SELECT role FROM Credit WHERE episode_id = 9 AND person_id = (SELECT person_id FROM Person WHERE name = 'Jason Kuschner');
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id JOIN Episode e ON c.episode_id = e.episode_id WHERE e.episode = 1 AND c.role = 'president of NBC West Coast';
SELECT title FROM Episode JOIN Vote ON Episode.episode_id = Vote.episode_id GROUP BY title ORDER BY SUM(stars * percent) / 100 DESC LIMIT 3;
SELECT    (COUNT(CASE WHEN p.birth_country = 'USA' THEN 1 END) / COUNT(*)) AS ratio,   c.role FROM    Episode e   JOIN Credit c ON e.episode_id = c.episode_id   JOIN Person p ON c.person_id = p.person_id WHERE    e.series ='series_name' AND e.episode = 2 AND c.category = 'Cast' GROUP BY    c.role;
SELECT COUNT(DISTINCT p.person_id) FROM Person p JOIN Award a ON p.person_id = a.person_id WHERE p.birth_country = 'Canada' AND a.award IS NOT NULL;
SELECT COUNT(DISTINCT e.episode_id) FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'Jerry Orbach';
SELECT p.name FROM Credit c JOIN Person p ON c.person_id = p.person_id WHERE c.episode_id = 9;
SELECT award FROM Award WHERE episode_id = 20 AND result IN ('Winner', 'Nominee');
SELECT p.name, a.role FROM Award a JOIN Person p ON a.person_id = p.person_id WHERE a.episode_id IN (   SELECT episode_id   FROM Episode   GROUP BY season, episode_id ) GROUP BY a.role, p.name HAVING COUNT(a.role) > 1;
SELECT p.name, e.episode FROM Award a JOIN Episode e ON a.episode_id = e.episode_id JOIN Person p ON a.person_id = p.person_id JOIN Credit c ON e.episode_id = c.episode_id AND p.person_id = c.person_id WHERE a.result = 'Winner' AND c.role = 'director';
SELECT e.episode_id, e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.result = 'Nominee';
SELECT    season,    episode,    AVG(rating) AS average_rating FROM    Episode WHERE    season = 9 GROUP BY    season, episode;
SELECT    (SELECT votes FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE episode = 1 AND series = (SELECT series FROM Episode ORDER BY air_date LIMIT 1)) AND stars = 10) -    (SELECT votes FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE episode = 24 AND series = (SELECT series FROM Episode ORDER BY air_date DESC LIMIT 1)) AND stars = 10) AS difference;
SELECT e.rating FROM Episode e JOIN (   SELECT episode_id   FROM Award   WHERE result = 'Winner'   GROUP BY episode_id   ORDER BY COUNT(*) DESC   LIMIT 1 ) a ON e.episode_id = a.episode_id;
SELECT COUNT(*)  FROM Credit  WHERE episode_id IN (   SELECT episode_id    FROM Episode    WHERE number_in_series >= 1 AND number_in_series <= 10 ) AND credited = 'true';
SELECT e.* FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id WHERE k.keyword ='mafia';
SELECT AVG(stars / votes * 100) AS average_star FROM Vote WHERE episode_id IN (   SELECT episode_id   FROM Award   WHERE result = 'Winner' ) AND episode_id IN (   SELECT episode_id   FROM Vote   GROUP BY episode_id   HAVING percent = (     SELECT MAX(percent)     FROM Vote   ) );
SELECT SUM(e.rating) / SUM(e.episode_id) AS average_ranking FROM Episode e JOIN Award a ON e.episode_id = a.episode_id;
SELECT COUNT(DISTINCT person_id) FROM Award WHERE organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' AND award = 'Television' AND result = 'Winner';
SELECT birth_country  FROM Person  WHERE name = 'Michael Preston';
SELECT p.name FROM Award a JOIN Episode e ON a.episode_id = e.episode_id JOIN Person p ON a.person_id = p.person_id WHERE a.result = 'Nominee' AND a.role = 'Katrina Ludlow' AND e.series = 'Law & Order';
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id JOIN Episode e ON c.episode_id = e.episode_id JOIN Award a ON e.episode_id = a.episode_id WHERE c.role = 'teleplay' AND a.award = 'Best Television Episode' AND a.result = 'Winner';
SELECT p.birthdate FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.role = 'writer';
SELECT e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.award = 'Outstanding Costume Design for a Series' AND a.result = 'Nominated';
SELECT title FROM Episode WHERE episode_id = (   SELECT episode_id   FROM Vote   GROUP BY episode_id   ORDER BY SUM(votes) DESC   LIMIT 1 );
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.role = 'Alex Brown' AND c.credited = 'true';
SELECT birth_place FROM Person WHERE person_id = 'nm0007064' AND person_id NOT IN (   SELECT person_id   FROM Credit   WHERE role = 'narrator' AND credited = '' );
SELECT k.keyword FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id WHERE e.title = 'Shield';
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id JOIN Episode e ON c.episode_id = e.episode_id JOIN Award a ON e.episode_id = a.episode_id WHERE p.height_meters > 1.80 AND a.result = 'Winner' AND c.category = 'Actor';
SELECT e.title FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id WHERE k.keyword IN ('nun', 'priest') GROUP BY e.title HAVING COUNT(DISTINCT k.keyword) = 2;
SELECT episode_id FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.award = 'Best Television Episode' AND a.result = 'Winner' AND e.rating = (   SELECT MAX(rating)   FROM Episode   WHERE rating < (     SELECT MAX(rating)     FROM Episode   ) );
SELECT title FROM Episode WHERE episode_id IN (   SELECT episode_id   FROM Vote   WHERE stars = 10   ORDER BY votes DESC   LIMIT 3 );
SELECT VALUE FROM observations WHERE DATE = '2008-03-11' AND DESCRIPTION = 'Body Height' AND PATIENT IN (     SELECT patient     FROM patients     WHERE first = 'Elly' AND last = 'Koss' );
SELECT    MAX(CASE WHEN YEAR(o.DATE) = 2009 THEN o.VALUE END) -    MAX(CASE WHEN YEAR(o.DATE) = 2008 THEN o.VALUE END) AS weight_increase FROM    observations o JOIN    patients p ON o.PATIENT = p.patient WHERE    o.DESCRIPTION = 'Body Weight' AND p.first = 'Elly' AND p.last = 'Koss';
SELECT MAX(VALUE) FROM observations WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss') AND DESCRIPTION = 'Systolic Blood Pressure';
SELECT COUNT(*)  FROM observations  WHERE DESCRIPTION = 'Systolic Blood Pressure'  AND PATIENT IN (SELECT patient                   FROM patients                   WHERE first = 'Elly' AND last = 'Koss');
SELECT p.first, p.last FROM patients p JOIN observations o ON p.patient = o.patient WHERE o.description = 'Systolic Blood Pressure' AND o.value = (   SELECT MAX(value)   FROM observations   WHERE description = 'Systolic Blood Pressure' );
SELECT    patient,    SUM(     MULTIPLY(365, SUBTRACT(strftime('%Y', STOP), strftime('%Y', START))),      MULTIPLY(30, SUBTRACT(strftime('%m', STOP), strftime('%m', STOP))),      SUBTRACT(strftime('%d', STOP), strftime('%d', START))   )  AS duration  FROM medications  WHERE DESCRIPTION LIKE 'Acetaminophen%'  AND patient IN (   SELECT patient    FROM patients    WHERE first = 'Elly' AND last = 'Koss' );
SELECT DESCRIPTION FROM medications WHERE PATIENT IN (SELECT patient                    FROM patients                    WHERE first = 'Elly' AND last = 'Koss');
SELECT m.REASONDESCRIPTION FROM medications m JOIN patients p ON m.PATIENT = p.patient WHERE m.DESCRIPTION LIKE 'Acetaminophen%' AND p.first = 'Elly' AND p.last = 'Koss';
SELECT m.DESCRIPTION FROM medications m JOIN encounters e ON m.ENCOUNTER = e.ID JOIN patients p ON e.PATIENT = p.patient WHERE p.first = 'Elly' AND p.last = 'Koss' AND e.REASONDESCRIPTION LIKE 'Streptococcal sore throat%';
SELECT p.first, p.last  FROM patients p  JOIN medications m ON p.patient = m.patient  WHERE m.DESCRIPTION LIKE 'Acetaminophen%';
SELECT DESCRIPTION  FROM conditions  WHERE PATIENT = (SELECT patient                    FROM patients                    WHERE first = 'Elly' AND last = 'Koss')    AND START = '2009-01-08';
SELECT    SUM(     MULTIPLY(365, SUBTRACT(strftime('%Y', STOP), strftime('%Y', START))) +      MULTIPLY(30, SUBTRACT(strftime('%m', STOP), strftime('%m', START))) +      SUBTRACT(strftime('%d', STOP), strftime('%d', START))   )  FROM    conditions  WHERE    PATIENT = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss')    AND DESCRIPTION = 'Cystitis';
SELECT DIVIDE(SUM(VALUE), COUNT(VALUE))  FROM observations  WHERE DESCRIPTION = 'Body Weight' AND PATIENT = 'Elly Koss';
SELECT    DIVIDE(COUNT(marital = 'M'), COUNT(patient)) as percentage FROM    patients    JOIN conditions ON patients.patient = conditions.patient WHERE    conditions.DESCRIPTION = 'Cystitis';
SELECT o.DESCRIPTION, o.VALUE, o.UNITS FROM observations o JOIN patients p ON o.PATIENT = p.patient WHERE o.DESCRIPTION = 'Body Height' AND o.DATE = '2010-08-02' AND p.first = 'Vincent' AND p.last = 'Wyman' AND p.prefix = 'Mr.';
SELECT COUNT(*)  FROM careplans  WHERE PATIENT IN (   SELECT patient    FROM patients    WHERE first = 'Norman' AND last = 'Berge' AND prefix = 'Mrs.' );
SELECT m.REASONDESCRIPTION FROM medications m JOIN patients p ON m.PATIENT = p.patient WHERE m.DESCRIPTION = 'Leucovorin 100 MG Injection'    AND m.START = '1970-12-19'    AND p.FIRST = 'Annabelle'    AND p.PREFIX = 'Mrs.';
SELECT PREVALENCE_PERCENTAGE  FROM all_prevalences  WHERE ITEM = '64859006';
SELECT PREVALENCE_RATE  FROM all_prevalences  WHERE ITEM = '368581000119106';
SELECT p.DESCRIPTION FROM procedures p JOIN patients pt ON p.PATIENT = pt.patient WHERE p.DATE = '2009-08-09' AND pt.first = 'Jacquelyn' AND pt.last = 'Shanahan' AND pt.prefix = 'Ms.';
SELECT COUNT(*)  FROM claims  WHERE PATIENT = (SELECT patient                   FROM patients                   WHERE first = 'Abbie' AND last = 'Cole')  AND BILLABLEPERIOD BETWEEN '2010-12-31' AND '2012-01-01';
SELECT COUNT(*)  FROM allergies  WHERE PATIENT = (SELECT patient                   FROM patients                   WHERE first = 'Saundra' AND last = 'Monahan' AND prefix = 'Mrs.');
SELECT p.first, p.last  FROM patients p  JOIN claims c ON p.patient = c.patient  WHERE c.BILLABLEPERIOD = '1947-09-11';
SELECT e.DESCRIPTION FROM encounters e JOIN patients p ON e.PATIENT = p.patient WHERE e.DATE = '2008-10-25' AND p.FIRST = 'Hubert' AND p.LAST = 'Baumbach' AND p.PREFIX = 'Mr.';
SELECT DESCRIPTION FROM conditions WHERE PATIENT = (SELECT patient                   FROM patients                   WHERE first = 'Keven' AND last = 'Kuhn')   AND START = '2016-09-24' AND STOP = '2016-10-10';
SELECT p.first, p.last, pr.DATE FROM patients p JOIN procedures pr ON p.patient = pr.PATIENT WHERE p.first = 'Ira' AND p.prefix = 'Mrs.' AND pr.DESCRIPTION = 'Standard pregnancy test';
SELECT AVG(DATEDIFF(stop, start))  FROM careplans  WHERE patient = (SELECT patient                   FROM patients                   WHERE first = 'Wesley' AND last = 'Lemke' AND prefix = 'Mr.');
SELECT AVG(DATEDIFF(stop, start)) / COUNT(*) FROM conditions WHERE patient = (SELECT patient                   FROM patients                   WHERE first = 'Angelena' AND last = 'Kertzmann')   AND description = 'Normal pregnancy';
SELECT PATIENT FROM allergies WHERE STOP IS NOT NULL GROUP BY PATIENT ORDER BY MAX(   CASE      WHEN SUBSTR(STOP, -2, 1)!= '9' THEN SUBSTR(STOP, LENGTH(STOP) - 1) + 2000      ELSE SUBSTR(STOP, LENGTH(STOP) - 1) + 1900    END -    CASE      WHEN SUBSTR(START, -2, 1) = '9' THEN SUBSTR(START, LENGTH(START) - 1) + 1900      ELSE SUBSTR(START, LENGTH(START) - 1) + 2000    END ) DESC LIMIT 1;
SELECT COUNT(DISTINCT c.PATIENT) FROM conditions c WHERE c.DESCRIPTION = 'Diabetes' AND c.START LIKE '1988%';
SELECT COUNT(DISTINCT a.PATIENT) FROM allergies a WHERE a.DESCRIPTION = 'Allergy to eggs';
SELECT PATIENT FROM conditions WHERE DESCRIPTION = 'Hypertension' ORDER BY START DESC LIMIT 1;
SELECT DESCRIPTION, COUNT(*) as count FROM allergies GROUP BY DESCRIPTION ORDER BY count DESC LIMIT 1;
SELECT PATIENT FROM observations WHERE DESCRIPTION = 'Body Height' AND VALUE = (SELECT MAX(VALUE) FROM observations WHERE DESCRIPTION = 'Body Height');
SELECT DESCRIPTION, COUNT(*) as count FROM conditions JOIN patients ON conditions.PATIENT = patients.patient WHERE patients.gender = 'F' AND patients.ethnicity = 'american' GROUP BY DESCRIPTION ORDER BY count DESC LIMIT 1;
SELECT COUNT(*) FROM medications WHERE DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet' AND START LIKE '2016%' AND ethnicity = 'dominican' AND SUBSTR(STRFTIME('%m', STOP), 1, 2) - SUBSTR(STRFTIME('%m', START), 1, 2) = 1 AND patient IN (SELECT patient FROM patients WHERE ethnicity = 'dominican');
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN conditions c ON p.patient = c.patient WHERE p.birthdate LIKE '192%' AND c.DESCRIPTION = 'Pneumonia';
SELECT CONCAT(p.first,'', p.last)  FROM patients p  JOIN medications m ON p.patient = m.patient  WHERE m.DESCRIPTION = 'Yaz 28 Day Pack' AND m.START LIKE '2011%';
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN immunizations i ON p.patient = i.patient WHERE p.race = 'black' AND i.DESCRIPTION = 'DTaP' AND i.DATE LIKE '2013%';
SELECT COUNT(i.DATE) FROM immunizations i JOIN (   SELECT p.patient   FROM patients p   JOIN (     SELECT c.PATIENT     FROM conditions c     JOIN (       SELECT MAX(PR.PREVALENCE RATE) AS max_rate       FROM all_prevalences PR       JOIN (         SELECT MAX(c.START) AS max_start, c.CODE         FROM conditions c         GROUP BY c.CODE       ) recent_conditions ON PR.ITEM = recent_conditions.CODE       WHERE PR.POPULATION TYPE = 'condition'     ) recent_condition_rates ON c.CODE = recent_condition_rates.CODE   ) recent_condition_patients ON p.patient = recent_condition_patients.PATIENT ) recent_condition_patient ON i.PATIENT = recent_condition_patient.patient;
SELECT p.patient FROM patients p JOIN (   SELECT c.PATIENT   FROM conditions c   JOIN (     SELECT ITEM     FROM all_prevalences     WHERE PREVALENCE RATE = (SELECT MAX(PREVALENCE RATE) FROM all_prevalences)   ) ap ON c.CODE = ap.ITEM ) cc ON p.patient = cc.PATIENT;
SELECT MAX(c.DESCRIPTION)  FROM conditions c  JOIN patients p ON c.PATIENT = p.patient  JOIN immunizations i ON p.patient = i.PATIENT  WHERE i.DESCRIPTION = 'Influenza seasonal injectable preservative free';
SELECT DISTINCT c.PATIENT FROM conditions c JOIN all_prevalences ap ON c.CODE = ap.ITEM WHERE ap.PREVALENCE PERCENTAGE = 18.8;
SELECT COUNT(*)  FROM conditions  JOIN patients ON conditions.PATIENT = patients.patient  WHERE patients.first = 'Tyree' AND patients.last = 'Eichmann';
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN immunizations i ON p.patient = i.patient JOIN conditions c ON p.patient = c.patient WHERE i.DESCRIPTION ='meningococcal MCV4P' AND c.DESCRIPTION = 'Viral sinusitis (disorder)' AND i.DATE < c.START;
SELECT COUNT(*) FROM patients WHERE gender = 'F' AND patient IN (   SELECT PATIENT   FROM conditions   WHERE DESCRIPTION = 'Prediabetes' );
SELECT CONCAT(p.first,'', p.last) AS full_name FROM patients p JOIN observations o ON p.patient = o.patient WHERE o.DESCRIPTION = 'Body Mass Index' AND o.UNITS = 'kg/m2' AND o.VALUE = (SELECT MIN(VALUE) FROM observations WHERE DESCRIPTION = 'Body Mass Index' AND UNITS = 'kg/m2');
SELECT    strftime('%Y', '2023-03-16') - strftime('%Y', p.birthdate) AS age FROM    patients p    JOIN conditions c ON p.patient = c.patient  WHERE    c.DESCRIPTION = 'Hypertension'    AND p.first = 'Giovanni'    AND p.last = 'Russel';
SELECT COUNT(*) FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE p.gender = 'F' AND p.ethnicity = 'Asian' AND m.DESCRIPTION = 'oxaliplatin 5 MG/ML [Eloxatin]';
SELECT COUNT(*) FROM patients p JOIN conditions c ON p.patient = c.patient WHERE p.deathdate IS NULL AND c.DESCRIPTION = 'Stroke';
SELECT COUNT(*) FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE p.race LIKE 'asian%' AND a.DESCRIPTION = 'Allergy to peanuts';
SELECT AVG(o.VALUE)  FROM observations o  JOIN patients p ON o.PATIENT = p.patient  JOIN conditions c ON p.patient = c.PATIENT  WHERE c.DESCRIPTION = 'Hypertension' AND o.DESCRIPTION = 'Diastolic Blood Pressure';
SELECT m.DESCRIPTION FROM medications m JOIN patients p ON m.PATIENT = p.patient WHERE p.ssn = '999-94-3751';
SELECT p.ssn FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE p.gender = 'F' AND p.ethnicity = 'irish' AND a.DESCRIPTION = 'Allergy to grass pollen';
SELECT p.first, p.last FROM careplans c JOIN patients p ON c.patient = p.patient WHERE c.code = '311791003';
SELECT c.DESCRIPTION FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE p.deathdate IS NOT NULL AND (strftime('%Y', p.deathdate) - strftime('%Y', p.birthdate)) = (   SELECT MAX(strftime('%Y', deathdate) - strftime('%Y', birthdate))   FROM patients   WHERE deathdate IS NOT NULL );
SELECT ITEM FROM all_prevalences ORDER BY OCCURRENCES DESC LIMIT 1;
SELECT o.VALUE, o.UNITS FROM observations o JOIN patients p ON o.PATIENT = p.patient WHERE o.DESCRIPTION = 'Glucose' AND p.address = '365 Della Crossroad Suite 202 Deerfield MA 01342 US';
SELECT p.ssn FROM patients p JOIN conditions c ON p.patient = c.patient JOIN all_prevalences ap ON c.CODE = ap.ITEM WHERE ap.PREVALENCE PERCENTAGE < 0.3 * (SELECT AVG(PREVALENCE PERCENTAGE) FROM all_prevalences WHERE ITEM IN (SELECT CODE FROM conditions)) LIMIT 5;
SELECT    DIVIDE(COUNT(DISTINCT p.patient),           (SELECT COUNT(DISTINCT patient)            FROM conditions c            WHERE c.DESCRIPTION = 'Acute bronchitis (disorder)'))    AS percentage FROM conditions c  JOIN patients p ON c.PATIENT = p.patient  WHERE c.DESCRIPTION = 'Acute bronchitis (disorder)'    AND p.gender = 'F'    AND p.race = 'asian';
SELECT COUNT(e.ID)  FROM encounters e  JOIN patients p ON e.PATIENT = p.patient  WHERE p.first = 'Major' AND p.last = 'D''Amore';
SELECT p.DESCRIPTION FROM procedures p JOIN patients pt ON p.PATIENT = pt.patient WHERE pt.first = 'Emmy' AND pt.last = 'Waelchi';
SELECT CONCAT(p.first,'', p.last) AS full_name FROM patients p JOIN procedures pr ON p.patient = pr.PATIENT WHERE pr.DESCRIPTION = 'Extraction of wisdom tooth';
SELECT VALUE, UNITS FROM observations WHERE DESCRIPTION = 'Body Weight' AND PATIENT = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss');
SELECT p.first, p.last FROM patients p JOIN allergies a ON p.patient = a.patient WHERE a.DESCRIPTION = 'Allergy to soya';
SELECT COUNT(*)  FROM immunizations  WHERE DESCRIPTION = 'DTaP' AND PATIENT IN (SELECT patient                                           FROM patients                                           WHERE first = 'Keven' AND last = 'Kuhn');
SELECT p.first, p.last FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE m.DESCRIPTION = 'Clopidogrel 75 MG Oral Tablet' AND (strftime('%Y', m.STOP) - strftime('%Y', m.START)) > 10;
SELECT p.DESCRIPTION, m.DESCRIPTION FROM procedures p JOIN medications m ON p.PATIENT = m.PATIENT JOIN conditions c ON p.PATIENT = c.PATIENT WHERE c.DESCRIPTION = 'Third degree burn';
SELECT m.DESCRIPTION FROM medications m JOIN patients p ON m.PATIENT = p.patient JOIN allergies a ON p.patient = a.PATIENT WHERE a.DESCRIPTION = 'Allergy to mould' AND m.START = '6/6/16';
SELECT cp.DESCRIPTION FROM careplans cp JOIN conditions c ON cp.PATIENT = c.PATIENT WHERE c.DESCRIPTION = 'Secondary malignant neoplasm of colon';
SELECT PREVALENCE_RATE  FROM all_prevalences  WHERE ITEM IN (   SELECT DESCRIPTION    FROM conditions    WHERE START = '5/9/2014' );
SELECT CONCAT(p.first,'', p.last) AS name,         IFNULL(p.deathdate, DATE('now')) - p.birthdate AS age FROM patients p JOIN observations o ON p.patient = o.patient WHERE o.DESCRIPTION = 'Systolic Blood Pressure'   AND o.VALUE = 200   AND o.UNITS ='mmHg'   AND o.DATE LIKE '2011%';
SELECT    COUNT(CASE WHEN e.ethnicity = 'english' THEN 1 END) AS english_patients,   ROUND(COUNT(CASE WHEN i.DESCRIPTION = 'Influenza seasonal injectable preservative free' THEN 1 END) / (SELECT COUNT(DISTINCT p.patient) FROM patients p) * 100, 2) AS percentage FROM    immunizations i   JOIN patients p ON i.PATIENT = p.patient   JOIN encounters e ON i.ENCOUNTER = e.ID WHERE    strftime('%Y', i.DATE) = '2017';
SELECT p.first  FROM patients p  JOIN encounters e ON p.patient = e.PATIENT  WHERE e.REASONDESCRIPTION = 'Normal pregnancy';
SELECT p.birthdate FROM patients p JOIN encounters e ON p.patient = e.PATIENT JOIN careplans c ON e.ID = c.ENCOUNTER WHERE c.DESCRIPTION = 'Outpatient Encounter';
SELECT p.first  FROM patients p  JOIN conditions c ON p.patient = c.patient  WHERE c.DESCRIPTION = 'Cystitis';
SELECT COUNT(*) FROM patients p JOIN conditions c ON p.patient = c.patient WHERE c.DESCRIPTION = 'Stroke' AND p.marital = 'M';
SELECT p.address FROM patients p JOIN encounters e ON p.patient = e.PATIENT JOIN claims c ON e.ID = c.ENCOUNTER WHERE YEAR(c.BILLABLEPERIOD) = 2010;
SELECT last  FROM patients  WHERE patient IN (   SELECT patient    FROM allergies    WHERE DESCRIPTION = 'Allergy to dairy product' );
SELECT START  FROM allergies  WHERE PATIENT = 'Angelo Buckridge';
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN allergies a ON p.patient = a.patient WHERE p.gender = 'M' AND a.DESCRIPTION = 'House dust mite allergy';
SELECT DESCRIPTION, COUNT(*) as count FROM allergies JOIN patients ON allergies.PATIENT = patients.patient WHERE race = 'white' GROUP BY DESCRIPTION ORDER BY count DESC LIMIT 1;
SELECT p.first  FROM patients p  JOIN immunizations i ON p.patient = i.patient  WHERE i.DESCRIPTION = 'Influenza seasonal injectable preservative free';
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN immunizations i ON p.patient = i.patient WHERE p.gender = 'F' AND i.DESCRIPTION = 'HPV quadrivalent';
SELECT e.DESCRIPTION FROM encounters e JOIN patients p ON e.PATIENT = p.patient WHERE p.birthplace = 'Pittsfield MA US';
SELECT DESCRIPTION, COUNT(*) AS total_type FROM allergies JOIN patients ON allergies.PATIENT = patients.patient WHERE patients.ethnicity = 'german' GROUP BY DESCRIPTION;
SELECT AVG(DATEDIFF(CURRENT_DATE, birthdate)) AS average_age FROM patients WHERE patient IN (   SELECT patient   FROM careplans   WHERE REASONDESCRIPTION = 'Prediabetes' );
SELECT COUNT(*) FROM patients WHERE patient IN (   SELECT PATIENT   FROM medications   WHERE REASONDESCRIPTION = 'Coronary Heart Disease' AND STOP IS NOT NULL ) AND deathdate IS NULL;
SELECT COUNT(*) FROM patients WHERE patients.drivers IS NOT NULL AND patients.patient IN (   SELECT PATIENT   FROM procedures   WHERE DESCRIPTION = 'Bone immobilization' );
SELECT p.first, p.last FROM patients p JOIN (   SELECT PATIENT   FROM allergies   GROUP BY PATIENT   HAVING COUNT(DISTINCT DESCRIPTION) >= 3 ) a ON p.patient = a.patient;
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN allergies a ON p.patient = a.patient JOIN immunizations i ON p.patient = i.patient WHERE a.DESCRIPTION = 'Allergy to eggs' AND i.DESCRIPTION = 'Td (adult) preservative free';
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN observations o ON p.patient = o.patient JOIN careplans c ON p.patient = c.patient WHERE o.DESCRIPTION = 'Body Weight' AND o.VALUE > 100 AND o.UNITS = 'kg' AND c.DESCRIPTION = 'Diabetes self management plan';
SELECT gender, COUNT(gender) as count FROM patients JOIN allergies ON patients.patient = allergies.patient WHERE allergies.DESCRIPTION = 'Dander (animal) allergy' GROUP BY gender ORDER BY count DESC LIMIT 1;
SELECT BILLABLEPERIOD FROM claims WHERE PATIENT IN (   SELECT patient   FROM patients   WHERE last = 'Dickinson' );
SELECT CONCAT(p.first,'', p.last) AS full_name FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Otitis media';
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN medications m ON p.patient = m.patient WHERE p.ethnicity = 'Irish' AND m.REASONDESCRIPTION = 'Myocardial Infarction';
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN careplans c ON p.patient = c.patient WHERE c.DESCRIPTION = 'Concussion with loss of consciousness' AND p.marital = 'M';
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN immunizations i ON p.patient = i.patient JOIN careplans c ON p.patient = c.patient WHERE i.description = 'rotavirus monovalent' AND c.stop = '2013-11-23';
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN medications m ON p.patient = m.patient WHERE p.gender = 'F' AND m.DESCRIPTION = 'Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual]';
SELECT    (COUNT(DISTINCT p.patient) / (SELECT COUNT(*) FROM patients WHERE birthplace = 'Pembroke MA US')) * 100.0 FROM    patients p    JOIN allergies a ON p.patient = a.PATIENT  WHERE    a.DESCRIPTION = 'Allergy to grass pollen'    AND p.birthplace = 'Pembroke MA US';
SELECT AVG(o.VALUE)  FROM observations o  JOIN patients p ON o.PATIENT = p.patient  WHERE o.DESCRIPTION = 'Body Weight'  AND o.UNITS = 'kg'  AND p.race = 'asian';
SELECT p.ssn FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE a.DESCRIPTION = 'Latex allergy';
SELECT    DATEDIFF(allergies.STOP, allergies.START) AS duration,   allergies.DESCRIPTION AS allergy_type FROM    allergies   INNER JOIN patients ON allergies.PATIENT = patients.patient WHERE    patients.first = 'Isadora' AND patients.last = 'Moen';
SELECT COUNT(*)  FROM careplans  WHERE PATIENT = 'Elly Koss'  AND START BETWEEN '2009-11-1' AND '2010-10-23';
SELECT p.first, p.last FROM patients p JOIN careplans c ON p.patient = c.PATIENT WHERE p.marital = 'M' AND year(c.START) = 2009 AND DATEDIFF(c.STOP, c.START) > 60;
SELECT i.DATE FROM immunizations i JOIN patients p ON i.PATIENT = p.patient WHERE p.first = 'Elly' AND p.last = 'Koss' AND i.DESCRIPTION = 'Influenza seasonal injectable preservative free';
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN immunizations i ON p.patient = i.patient WHERE p.race = 'black' AND i.DESCRIPTION ='meningococcal MCV4P' AND i.DATE BETWEEN '2010-07-09' AND '2013-10-29';
SELECT i.DATE, i.CODE FROM immunizations i JOIN patients p ON i.PATIENT = p.patient WHERE p.first = 'Jacquelyn' AND p.last = 'Shanahan' AND i.DESCRIPTION = 'Influenza seasonal injectable preservative free';
SELECT    p.first,    p.last,    DATEDIFF(medications.STOP, medications.START) AS duration FROM    patients p    JOIN medications ON p.patient = medications.PATIENT    JOIN encounters e ON medications.ENCOUNTER = e.ID  WHERE    p.first = 'Berry'    AND p.last = 'Keebler'    AND medications.DESCRIPTION = 'Acetaminophen 160 MG'    AND medications.REASONDESCRIPTION = 'Acute bronchitis (disorder)';
SELECT COUNT(DISTINCT p.patient) FROM medications m JOIN patients p ON m.patient = p.patient WHERE substr(m.START, 1, 4) = '2010'    AND substr(m.stop, 1, 4) = '2010'    AND m.DESCRIPTION = 'Nitrofurantoin 5 MG/ML [Furadantin]'    AND m.REASONDESCRIPTION = 'Cystitis'    AND p.marital = 'S';
SELECT REASONDESCRIPTION  FROM encounters  WHERE DATE = '2013-11-20' AND PATIENT = (SELECT patient                                          FROM patients                                          WHERE first = 'Lavelle' AND last = 'Vandervort');
SELECT COUNT(*) FROM patients JOIN encounters ON patients.patient = encounters.PATIENT WHERE ethnicity = 'german' AND encounters.DATE BETWEEN '2011-09-01' AND '2012-08-29' AND encounters.DESCRIPTION = 'Outpatient Encounter';
SELECT p.ssn, p.address FROM patients p JOIN encounters e ON p.patient = e.PATIENT WHERE e.REASONDESCRIPTION = 'Viral sinusitis (disorder)' AND e.DATE = '2008-06-13';
SELECT    m.REASONDESCRIPTION,    m.DESCRIPTION,    JULIANDAY(m.STOP) - JULIANDAY(m.START) AS DURATION FROM    medications m   INNER JOIN encounters e ON m.ENCOUNTER = e.ID   INNER JOIN patients p ON e.PATIENT = p.patient WHERE    e.ID = '23c293ec-dbae-4a22-896e-f12cf3c8bac3'   AND (p.deathdate IS NULL);
SELECT p.first, p.last FROM patients p JOIN allergies a ON p.patient = a.patient WHERE a.DESCRIPTION = 'Shellfish allergy' AND (julianday(p.deathdate) - julianday(p.birthdate)) / 365 < 12;
SELECT julianday(medications.STOP) - julianday(medications.START)  FROM medications  JOIN patients ON medications.PATIENT = patients.patient  WHERE medications.DESCRIPTION = 'Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]'  AND patients.first = 'Major' AND patients.last = 'D''Amore';
SELECT COUNT(DISTINCT m.DESCRIPTION) FROM patients p JOIN encounters e ON p.patient = e.PATIENT JOIN medications m ON e.ID = m.ENCOUNTER WHERE p.first = 'Major' AND p.last = 'D''Amore';
SELECT o.DESCRIPTION, o.VALUE, o.UNITS FROM observations o JOIN patients p ON o.PATIENT = p.patient WHERE p.first = 'Bella' AND p.last = 'Rolfson';
SELECT p.first, p.last FROM patients p JOIN observations o ON p.patient = o.patient WHERE o.DESCRIPTION = 'Calcium' AND o.VALUE < 8.6;
SELECT c.DESCRIPTION, COUNT(c.DESCRIPTION) AS count FROM conditions c JOIN patients p ON c.PATIENT = p.patient JOIN observations o ON p.patient = o.PATIENT WHERE o.DESCRIPTION = 'Body Mass Index' AND o.VALUE < 18.5 GROUP BY c.DESCRIPTION ORDER BY count DESC LIMIT 5;
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN encounters e ON p.patient = e.PATIENT JOIN immunizations i ON e.ID = i.ENCOUNTER WHERE e.REASONDESCRIPTION = 'Normal pregnancy';
SELECT careplans.DESCRIPTION FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.first = 'Elly' AND patients.prefix = 'Mrs.' AND substr(careplans.START, 1, 4) = '1970' AND substr(careplans.STOP, 1, 4) = '1970';
SELECT    c.DESCRIPTION AS care_plan,    p.DESCRIPTION AS procedure,    m.DESCRIPTION AS medication,    CONCAT(pa.first,'', pa.last) AS full_name FROM    encounters e   JOIN patients pa ON e.PATIENT = pa.patient   JOIN careplans c ON e.ID = c.ENCOUNTER   JOIN procedures p ON e.ID = p.ENCOUNTER   JOIN medications m ON e.ID = m.ENCOUNTER WHERE    e.ID = '6f2e3935-b203-493e-a9c0-f23e847b9798';
SELECT    gender,    COUNT(DISTINCT p.patient) AS count FROM    patients p    JOIN conditions c ON p.patient = c.patient WHERE    c.DESCRIPTION = 'Hypertension' GROUP BY    gender;
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN conditions c ON p.patient = c.patient WHERE p.marital = 'S' AND p.gender = 'F' AND c.DESCRIPTION = 'normal pregnancy';
SELECT p.DESCRIPTION, m.DESCRIPTION FROM procedures p JOIN encounters e ON p.ENCOUNTER = e.ID JOIN medications m ON e.ID = m.ENCOUNTER WHERE e.REASONDESCRIPTION = 'Drug overdose';
SELECT AVG(o.VALUE)  FROM observations o  JOIN patients p ON o.PATIENT = p.patient  WHERE o.DESCRIPTION = 'Body Mass Index'  AND p.patient IN (   SELECT o.PATIENT    FROM observations o    WHERE o.DESCRIPTION = 'Total Cholesterol'    AND o.VALUE >= 200 );
SELECT    sum(case when t2.DATE-t1.birthdate between 20 and 29 then t2.VALUE else 0 end)/count(case when t2.DATE-t1.birthdate between 20 and 29 then t2.PATIENT else null end) -   sum(case when t2.DATE-t1.birthdate between 50 and 59 then t2.VALUE else 0 end)/count(case when t2.DATE-t1.birthdate between 50 and 59 then t2.PATIENT else null end) FROM    patients t1    JOIN observations t2 ON t1.patient = t2.PATIENT  WHERE    t2.CODE = 'glucose'    AND t2.VALUE IS NOT NULL;
SELECT    c.DESCRIPTION,    COUNT(DISTINCT p.patient) AS count,    ROUND(COUNT(DISTINCT p.patient) / (SELECT COUNT(DISTINCT patient) FROM patients WHERE TIMESTAMPDIFF(YEAR, birthdate, CURDATE()) > 60) * 10, 2) AS percentage FROM    conditions c    JOIN patients p ON c.PATIENT = p.patient  WHERE    TIMESTAMPDIFF(YEAR, p.birthdate, c.START) > 60  GROUP BY    c.DESCRIPTION  ORDER BY    count DESC  LIMIT 1;
SELECT e.REASONDESCRIPTION FROM encounters e JOIN patients p ON e.PATIENT = p.patient WHERE substr(e.DATE, 1, 7) = '2009-07' AND p.first = 'Walter' AND p.last = 'Bahringer';
SELECT    TIMESTAMPDIFF(YEAR, p.birthdate, MIN(e.DATE)) AS age_at_admission FROM    patients p    JOIN encounters e ON p.patient = e.PATIENT WHERE    p.first = 'Stacy' AND p.last = 'Morar' AND e.REASONDESCRIPTION = 'Drug overdose' GROUP BY    p.patient;
SELECT DESCRIPTION, COUNT(*) as count FROM medications WHERE REASONDESCRIPTION = 'Child attention deficit disorder' GROUP BY DESCRIPTION ORDER BY count DESC LIMIT 1;
SELECT CONCAT(p.first,'', p.last) AS full_name FROM patients p JOIN procedures pr ON p.patient = pr.PATIENT WHERE pr.DESCRIPTION = 'Transplant of lung (procedure)';
SELECT AVG(yearly_avg) AS avg_patients_per_year FROM (   SELECT COUNT(DISTINCT p.PATIENT) / COUNT(DISTINCT substr(p.DATE, 1, 4)) AS yearly_avg   FROM procedures p   WHERE p.DESCRIPTION = 'Combined chemotherapy and radiation therapy (procedure)'   GROUP BY substr(p.DATE, 1, 4) ) AS yearly_data;
SELECT    JULIANDAY(careplans.STOP) - JULIANDAY(careplans.START) AS time_frame,   careplans.DESCRIPTION FROM    careplans   INNER JOIN patients ON careplans.PATIENT = patients.patient WHERE    patients.first = 'Jacquelyn' AND patients.last = 'Shanahan' ORDER BY    careplans.START DESC LIMIT 1;
SELECT    DATEDIFF(allergies.STOP, allergies.START) AS allergy_period,    allergies.DESCRIPTION  FROM    allergies    INNER JOIN patients ON allergies.PATIENT = patients.patient  WHERE    patients.first = 'Isadora' AND patients.last = 'Moen';
SELECT    TIMESTAMPDIFF(YEAR, patients.birthdate, MIN(encounters.DATE)) AS age_at_encounter FROM    patients    INNER JOIN encounters ON patients.patient = encounters.PATIENT WHERE    patients.first = 'Laronda' AND patients.last = 'Bernier' GROUP BY    patients.patient;
SELECT conditions.DESCRIPTION FROM conditions JOIN patients ON conditions.PATIENT = patients.patient WHERE patients.first = 'Joye' AND patients.last = 'Homenick' AND substr(conditions.START, 1, 4) = '2017';
SELECT MAX(i.DATE)  FROM immunizations i  JOIN patients p ON i.PATIENT = p.patient  WHERE i.DESCRIPTION = 'Influenza seasonal injectable preservative free'  AND p.first = 'Joye' AND p.last = 'Homenick' AND p.prefix = 'Mrs.';
SELECT patient, description, julianday(stop) - julianday(start) AS duration FROM medications JOIN patients ON medications.patient = patients.patient WHERE description = 'Acetaminophen 160 MG' AND patients.first = 'Elly' AND patients.last = 'Koss';
SELECT    COUNT(DISTINCT e.PATIENT) AS num_patients,   c.DESCRIPTION AS care_plan FROM    encounters e   JOIN careplans c ON e.ID = c.ENCOUNTER WHERE    e.REASONDESCRIPTION = 'Second degree burn' GROUP BY    c.DESCRIPTION;
SELECT    MULTIPLY(DIVIDE(COUNT(e.PATIENT),                     (SELECT COUNT(PATIENT)                      FROM encounters                      WHERE REASONDESCRIPTION = 'Contact dermatitis'                        AND substr(DATE, 1, 4) = '2010')),               1.0) * 100 AS percentage FROM encounters e JOIN patients p ON e.PATIENT = p.patient WHERE e.REASONDESCRIPTION = 'Contact dermatitis'    AND substr(e.DATE, 1, 4) = '2010'    AND p.gender = 'F';
SELECT    COUNT(encounters.ID) AS total_interactions,   COUNT(CASE WHEN encounters.DESCRIPTION = 'Prenatal visit' THEN 1 ELSE NULL END) / COUNT(encounters.ID) * 1.0 AS prenatal_visit_percentage FROM    encounters   INNER JOIN patients ON encounters.PATIENT = patients.patient WHERE    patients.first = 'Lorri' AND patients.last = 'Simons'    AND substr(encounters.DATE, 1, 4) BETWEEN '2010' AND '2017';
SELECT m.DESCRIPTION FROM medications m JOIN patients p ON m.PATIENT = p.patient WHERE p.FIRST = 'Joe' AND p.LAST = 'Homenick';
SELECT careplans.START FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.maiden = 'Adams';
SELECT p.first, p.last, cp.START FROM patients p JOIN careplans cp ON p.patient = cp.PATIENT WHERE p.gender = 'M' ORDER BY cp.START LIMIT 1;
SELECT    MULTIPLY(DIVIDE(COUNT(DISTINCT c.PATIENT),                     (SELECT COUNT(DISTINCT p.patient)                      FROM patients p                      WHERE p.ethnicity = 'hispanic')), 1.0)  FROM    careplans c    JOIN patients p ON c.PATIENT = p.patient  WHERE    p.ethnicity = 'hispanic'    AND substr(c.stop, 1, 4) = '2011';
SELECT careplans.REASONDESCRIPTION FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.first = 'Angelo' AND patients.last = 'Buckridge';
SELECT c.DESCRIPTION FROM careplans c JOIN patients p ON c.PATIENT = p.patient WHERE p.ETHNICITY = 'american';
SELECT e.ID FROM encounters e JOIN patients p ON e.PATIENT = p.patient WHERE p.birthplace = 'Pembroke MA US';
SELECT DISTINCT c.START FROM careplans c JOIN patients p ON c.PATIENT = p.patient WHERE p.deathdate IS NULL;
SELECT COUNT(*) FROM patients JOIN careplans ON patients.patient = careplans.PATIENT WHERE patients.race = 'white' AND careplans.REASONCODE = '10509002';
SELECT CONCAT(p.first,'', p.last) AS full_name FROM patients p JOIN careplans c ON p.patient = c.patient WHERE c.DESCRIPTION = 'Diabetic diet';
SELECT cp.STOP FROM careplans cp JOIN patients p ON cp.PATIENT = p.patient WHERE p.deathdate IS NOT NULL;
SELECT COUNT(*) FROM patients p JOIN careplans c ON p.patient = c.patient WHERE p.ethnicity = 'italian' AND c.code = '304510005';
SELECT    COUNT(DISTINCT p.patient) / (SELECT COUNT(DISTINCT patient) FROM patients) * 100 AS percentage FROM    careplans c   JOIN patients p ON c.PATIENT = p.patient WHERE    p.gender = 'F' AND substr(c.START, 1, 4) = '2010';
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN careplans c ON p.patient = c.PATIENT WHERE p.race = 'black' AND substr(c.STOP, 1, 4) = '2017';
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN conditions c ON p.patient = c.patient WHERE p.gender = 'M' AND c.DESCRIPTION = 'Prediabetes';
SELECT CONCAT(p.first,'', p.last) AS full_name FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE a.DESCRIPTION = 'Allergy to nut';
SELECT c.CODE, c.DESCRIPTION, c.START, c.STOP FROM conditions c JOIN patients p ON c.PATIENT = p.patient WHERE p.first = 'Wilmer' AND p.last = 'Koepp';
SELECT gender, COUNT(gender)  FROM patients  WHERE patient IN (   SELECT PATIENT    FROM conditions    WHERE DESCRIPTION = 'Viral sinusitis (disorder)' )  GROUP BY gender  ORDER BY COUNT(gender) DESC  LIMIT 1;
SELECT CONCAT(p.first,'', p.last)  FROM patients p  JOIN medications m ON p.patient = m.patient  WHERE m.DESCRIPTION = 'Penicillin V Potassium 250 MG'  AND SUBSTR(m.START, 1, 4) >= '1948';
SELECT COUNT(*) FROM patients JOIN conditions ON patients.patient = conditions.PATIENT WHERE race = 'white' AND substr(birthdate, 1, 4) = '1935' AND conditions.DESCRIPTION = 'Stroke';
SELECT c.DESCRIPTION FROM conditions c JOIN immunizations i ON c.PATIENT = i.PATIENT WHERE i.DESCRIPTION = 'IPV';
SELECT p.patient FROM patients p JOIN (   SELECT CODE   FROM all_prevalences   ORDER BY OCCURRENCES DESC   LIMIT 1 ) ap ON p.patient IN (   SELECT PATIENT   FROM conditions   WHERE CODE = ap.CODE )
SELECT CONCAT(p.first,'', p.last) AS full_name FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Cystitis';
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN immunizations i ON p.patient = i.patient WHERE p.gender = 'M' AND i.DESCRIPTION = 'HPV quadrivalent';
SELECT START  FROM careplans  WHERE PATIENT = 'Walter Bahringer';
SELECT c.ID, c.START, c.STOP, c.DESCRIPTION, c.REASONCODE, c.REASONDESCRIPTION FROM careplans c JOIN patients p ON c.PATIENT = p.patient WHERE p.first = 'Major' AND p.last = 'D''Amore';
SELECT      (COUNT(DISTINCT p.patient) / (SELECT COUNT(DISTINCT patient) FROM patients WHERE gender = 'M')) * 100 AS percentage FROM      patients p JOIN      conditions c ON p.patient = c.patient WHERE      p.gender = 'M' AND c.DESCRIPTION = 'Viral sinusitis (disorder)';
SELECT    COUNT(CASE WHEN p.gender = 'F' THEN 1 END) / COUNT(*) * 100 AS percentage FROM    patients p   JOIN medications m ON p.patient = m.patient WHERE    m.DESCRIPTION = 'Penicillin V Potassium 250 MG';
SELECT AVG(o.VALUE)  FROM patients p  JOIN observations o ON p.patient = o.PATIENT  WHERE p.race = 'white' AND o.DESCRIPTION = 'Body Height';
SELECT c.CODE, c.DESCRIPTION FROM careplans c JOIN patients p ON c.PATIENT = p.patient WHERE p.address = '179 Sydni Roads Taunton MA 02780 US';
SELECT a.DESCRIPTION FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE p.ethnicity = 'Dominican' AND p.first = 'Dirk' AND p.last = 'Languish';
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN allergies a ON p.patient = a.patient JOIN conditions c ON p.patient = c.patient WHERE a.DESCRIPTION = 'Allergy to peanuts' AND c.DESCRIPTION = 'Asthma';
SELECT p.first, p.last FROM patients p JOIN conditions c ON p.patient = c.patient WHERE (julianday(c.START) - julianday(p.birthdate)) / 365 = 44 AND c.DESCRIPTION = 'drug overdose';
SELECT p.ssn FROM patients p JOIN observations o ON p.patient = o.patient WHERE o.DESCRIPTION = 'Systolic Blood Pressure' AND o.VALUE = (SELECT MAX(VALUE) FROM observations WHERE DESCRIPTION = 'Systolic Blood Pressure');
SELECT c.DESCRIPTION FROM careplans c JOIN (   SELECT ITEM   FROM all_prevalences   ORDER BY PREVALENCE PERCENTAGE DESC   LIMIT 1 ) p ON c.CODE = p.ITEM;
SELECT c.CODE, c.DESCRIPTION FROM careplans c JOIN patients p ON c.PATIENT = p.patient WHERE p.ssn = '999-15-3685';
SELECT AVG((julianday(substr(datetime('now'), 1, 10)) - julianday(patients.birthdate)) / 365) FROM patients JOIN conditions ON patients.patient = conditions.patient WHERE patients.gender = 'M' AND conditions.DESCRIPTION = 'Hypertension';
SELECT p.first, p.last FROM patients p JOIN medications m ON p.patient = m.patient WHERE m.REASONDESCRIPTION = 'Streptococcal sore throat (disorder)' LIMIT 5;
SELECT p.first, p.last FROM patients p JOIN observations o ON p.patient = o.patient WHERE o.DESCRIPTION = 'Body Weight' AND o.VALUE = 61.97 AND o.UNITS = 'kg';
SELECT p.birthdate FROM patients p JOIN medications m ON p.patient = m.patient WHERE p.gender = 'M' AND m.DESCRIPTION = 'Penicillin V Potassium 250 MG' LIMIT 5;
SELECT p.first, p.last  FROM patients p  JOIN conditions c ON p.patient = c.patient  JOIN all_prevalences ap ON c.CODE = ap.ITEM  WHERE p.ethnicity = 'irish' AND ap.OCCURRENCES > (SELECT AVG(OCCURRENCES) * 0.96 FROM all_prevalences);
SELECT    (COUNT(p.patient) - COUNT(q.patient)) AS difference FROM    patients p   INNER JOIN conditions c ON p.patient = c.patient WHERE    p.marital = 'M' AND c.DESCRIPTION = 'Diabetes' MINUS SELECT    COUNT(patient) FROM    patients WHERE    marital = 'S' AND patient IN (     SELECT        patient     FROM        conditions     WHERE        DESCRIPTION = 'Diabetes'   )
SELECT country, COUNT(*) as num_customers FROM customers GROUP BY country;
SELECT    p.productVendor,    SUM(od.quantityOrdered) AS total_orders,    SUM((p.MSRP - p.buyPrice) * od.quantityOrdered) AS total_earnings FROM    orderdetails od    JOIN products p ON od.productCode = p.productCode GROUP BY    p.productVendor ORDER BY    total_orders DESC LIMIT 1;
SELECT e.firstName, e.lastName FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber JOIN payments p ON c.customerNumber = p.customerNumber WHERE p.paymentDate BETWEEN '2004-01-01' AND '2004-12-31' GROUP BY c.customerNumber, e.firstName, e.lastName ORDER BY SUM(p.amount) DESC LIMIT 1;
SELECT SUM(od.quantityOrdered * od.priceEach) AS total_price FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber WHERE c.customerName = 'Rovelli Gifts Distributors Ltd.'  AND o.shippedDate BETWEEN '2003-01-01' AND '2003-12-31';
SELECT COUNT(*)  FROM employees e  JOIN offices o ON e.officeCode = o.officeCode  WHERE o.city = 'Sydney' AND e.jobTitle IN ('Sales Agent', 'Sales Representative');
SELECT e.employeeNumber FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE o.city = 'New York' AND e.reportsTo = 1143;
SELECT    AVG(annual_amount) AS average_annual_payments,   MAX(annual_amount) AS highest_annual_payments,   MIN(annual_amount) AS lowest_annual_payments FROM (   SELECT      YEAR(paymentDate) AS year,     SUM(amount) / 3 AS annual_amount   FROM      payments   WHERE      paymentDate BETWEEN '2003-01-01' AND '2005-12-31'   GROUP BY      YEAR(paymentDate) ) AS subquery;
SELECT DISTINCT c.country, c.addressLine1, c.addressLine2, c.city, c.state, c.postalCode FROM customers c JOIN payments p ON c.customerNumber = p.customerNumber WHERE p.amount IN (   SELECT DISTINCT amount   FROM payments   ORDER BY amount DESC   LIMIT 5 ) ORDER BY p.amount DESC;
SELECT COUNT(*) FROM payments p JOIN customers c ON p.customerNumber = c.customerNumber WHERE c.customerName = 'Euro+ Shopping Channel' AND YEAR(p.paymentDate) = '2004';
SELECT p.productName FROM products p JOIN orderdetails od ON p.productCode = od.productCode JOIN productlines pl ON p.productLine = pl.productLine WHERE pl.productLine = 'Classic Cars' AND p.productScale = '1:18' GROUP BY p.productName ORDER BY SUM(od.quantityOrdered) DESC LIMIT 1;
SELECT    COUNT(DISTINCT c.customerNumber) AS num_customers,   (SELECT MAX(total_amount) FROM      (SELECT customerNumber, SUM(amount) AS total_amount       FROM payments       WHERE YEAR(paymentDate) = '2004'       GROUP BY customerNumber) AS subquery) AS max_total_payment FROM customers c WHERE c.creditLimit <= 100000;
SELECT c.customerName, c.contactFirstName, SUM(p.amount) AS total_amount FROM customers c JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber JOIN employees vp ON e.reportsTo = vp.employeeNumber JOIN payments p ON c.customerNumber = p.customerNumber WHERE e.officeCode IN (SELECT o.officeCode FROM offices o WHERE o.city = 'Tokyo') AND vp.employeeNumber = 1056 GROUP BY c.customerName, c.contactFirstName ORDER BY total_amount DESC LIMIT 1;
SELECT    productCode,    productName,    SUM(quantityOrdered) * priceEach AS totalPrice,    MSRP - buyPrice AS expectedProfit FROM    orderdetails    JOIN products ON orderdetails.productCode = products.productCode GROUP BY    productCode,    productName,    priceEach,    MSRP,    buyPrice ORDER BY    expectedProfit DESC LIMIT 1 UNION ALL SELECT    productCode,    productName,    SUM(quantityOrdered) * priceEach AS totalPrice,    MSRP - buyPrice AS expectedProfit FROM    orderdetails    JOIN products ON orderdetails.productCode = products.productCode GROUP BY    productCode,    productName,    priceEach,    MSRP,    buyPrice ORDER BY    expectedProfit LIMIT 1;
SELECT COUNT(DISTINCT o.orderNumber) FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber WHERE o.status = 'Cancelled' AND od.quantityOrdered * od.priceEach > 4000;
SELECT COUNT(DISTINCT o.orderNumber) FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber WHERE year(o.orderDate) = '2003' AND od.quantityOrdered < 30;
SELECT SUM(od.quantityOrdered * od.priceEach)  FROM orders o  JOIN orderdetails od ON o.orderNumber = od.orderNumber  WHERE o.status = 'Cancelled';
SELECT SUM(od.quantityOrdered * od.priceEach) AS total_value FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode JOIN productlines pl ON p.productLine = pl.productLine WHERE pl.productLine = 'Motorcycles';
SELECT COUNT(o.orderNumber) FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode JOIN productlines pl ON p.productLine = pl.productLine WHERE pl.productLine = 'Planes';
SELECT COUNT(o.orderNumber) FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE (p.MSRP - p.buyPrice) * od.quantityOrdered > 100;
SELECT AVG(total_price)  FROM (   SELECT orderNumber, SUM(quantityOrdered * priceEach) AS total_price   FROM orderdetails   JOIN orders ON orderdetails.orderNumber = orders.orderNumber   JOIN products ON orderdetails.productCode = products.productCode   WHERE products.productVendor = 'Exoto Designs' AND YEAR(orders.orderDate) = '2005'   GROUP BY orderNumber ) AS subquery;
SELECT COUNT(DISTINCT e.employeeNumber) FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE e.jobTitle = 'Sales Rep' AND o.officeCode = 1;
SELECT c.customerName, p.amount FROM customers c JOIN payments p ON c.customerNumber = p.customerNumber WHERE p.amount > 50000;
SELECT SUM(p.amount)  FROM payments p  JOIN customers c ON p.customerNumber = c.customerNumber  WHERE c.country = 'USA';
SELECT SUM(p.amount)  FROM payments p  JOIN customers c ON p.customerNumber = c.customerNumber  WHERE c.creditLimit = 0 AND YEAR(p.paymentDate) = 2003;
SELECT c.customerName, c.phone FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE o.status = 'Cancelled';
SELECT COUNT(DISTINCT c.customerNumber) FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE c.country = 'France'  AND o.status = 'Cancelled'  GROUP BY c.customerNumber HAVING COUNT(o.orderNumber) = 2;
SELECT AVG(total_price)  FROM (   SELECT od.orderNumber, SUM(od.quantityOrdered * od.priceEach) AS total_price    FROM orderdetails od    JOIN orders o ON od.orderNumber = o.orderNumber    JOIN customers c ON o.customerNumber = c.customerNumber    WHERE o.status = 'Shipped' AND c.country = 'Germany'    GROUP BY od.orderNumber ) AS subquery;
SELECT CONCAT(firstName,'', lastName) AS fullName FROM employees JOIN offices ON employees.officeCode = offices.officeCode WHERE offices.city = 'Tokyo';
SELECT CONCAT(e.firstName,'', e.lastName) AS fullName, e.email FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE e.jobTitle = 'Sales Rep' AND o.city = 'Tokyo';
SELECT e.email FROM employees e WHERE e.reportsTo = 1002 AND e.officeCode IN (   SELECT o.officeCode   FROM offices o   WHERE o.city = 'San Francisco' );
SELECT email, employeeNumber FROM employees WHERE officeCode IN (   SELECT officeCode   FROM offices   WHERE country = 'USA' AND state = 'MA' );
SELECT email FROM employees WHERE jobTitle = 'Sales Manager' AND officeCode IN (   SELECT officeCode   FROM offices   WHERE city = 'Sydney' );
SELECT e.email, o.country FROM employees e JOIN offices o ON e.officeCode = o.officeCode JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE o.country = 'Australia' AND c.creditLimit < 20000;
SELECT e.email FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE e.jobTitle = 'Sales Rep' AND c.country = 'UK' ORDER BY c.creditLimit LIMIT 10;
SELECT COUNT(*) FROM customers WHERE country = 'Australia' AND creditLimit < 220000;
SELECT customerNumber FROM payments ORDER BY amount DESC LIMIT 3;
SELECT email, employeeNumber FROM employees WHERE officeCode IN (   SELECT officeCode   FROM offices   WHERE country = 'USA' AND state = 'CA' );
SELECT CONCAT(firstName,'', lastName) AS fullName FROM employees WHERE officeCode IN (   SELECT officeCode   FROM offices   WHERE city = 'Boston' );
SELECT email FROM employees WHERE jobTitle = 'Sales Rep' AND officeCode IN (   SELECT officeCode   FROM customers   WHERE country = 'UK' ) ORDER BY (   SELECT creditLimit   FROM customers   WHERE salesRepEmployeeNumber = employees.employeeNumber ) DESC LIMIT 3;
SELECT COUNT(*) FROM customers WHERE country = 'Norway' AND creditLimit < 220000;
SELECT CONCAT(firstName,'', lastName) AS fullName, email FROM employees WHERE officeCode IN (SELECT officeCode FROM offices WHERE city = 'Paris');
SELECT p.productCode FROM products p JOIN productlines pl ON p.productLine = pl.productLine WHERE pl.productLine ='motorcycle' ORDER BY p.quantityInStock DESC LIMIT 5;
SELECT COUNT(*)  FROM customers  WHERE country = 'Germany' AND creditLimit = 0;
SELECT COUNT(DISTINCT p.customerNumber) FROM payments p WHERE p.paymentDate BETWEEN '2003-01-01' AND '2004-12-31' GROUP BY p.customerNumber HAVING COUNT(p.customerNumber) > 3;
SELECT AVG(priceEach - buyPrice)  FROM orderdetails  JOIN products ON orderdetails.productCode = products.productCode  WHERE productName = '1937 Lincoln Berline';
SELECT p.productName, SUM(od.quantityOrdered) AS total_ordered FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode JOIN productlines pl ON p.productLine = pl.productLine WHERE pl.productLine = 'Motorcycles' AND p.productScale = '1:10' AND c.country = 'USA' GROUP BY p.productName ORDER BY total_ordered DESC LIMIT 1;
SELECT p.checkNumber FROM payments p JOIN customers c ON p.customerNumber = c.customerNumber WHERE c.customerName = 'Mini Gifts Distributors Ltd.' AND p.paymentDate BETWEEN '2003-08-01' AND '2004-08-30';
SELECT MAX(total_price) - AVG(total_price) AS exceeds_avg FROM (   SELECT productLine, SUM(quantityOrdered * priceEach) AS total_price   FROM orderdetails   JOIN products ON orderdetails.productCode = products.productCode   WHERE productLine = 'Planes'   GROUP BY productLine ) AS subquery;
SELECT SUM(od.quantityOrdered * od.priceEach) AS total_value FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode JOIN productlines pl ON p.productLine = pl.productLine WHERE o.status = 'Shipped' AND pl.productLine = 'Vintage Cars' AND YEAR(o.orderDate) BETWEEN 2003 AND 2004;
SELECT    Concat(e.firstName,'', e.lastName) AS salesAgent,   Concat(s.firstName,'', s.lastName) AS supervisor FROM    employees e   JOIN employees s ON e.reportsTo = s.employeeNumber WHERE    e.employeeNumber = (     SELECT        salesRepEmployeeNumber     FROM        customers     WHERE        customerNumber = (         SELECT            customerNumber         FROM            payments         ORDER BY            amount DESC         LIMIT 1       )   )
SELECT    p.productName,    o.quantityOrdered * o.priceEach AS amount FROM    orderdetails o   JOIN products p ON o.productCode = p.productCode   JOIN orders ord ON o.orderNumber = ord.orderNumber   JOIN customers c ON ord.customerNumber = c.customerNumber   JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber   JOIN offices off ON e.officeCode = off.officeCode WHERE    off.city = 'Boston' ORDER BY    amount DESC LIMIT 1;
SELECT SUM(od.priceEach - p.buyPrice)  FROM orders o  JOIN customers c ON o.customerNumber = c.customerNumber  JOIN orderdetails od ON o.orderNumber = od.orderNumber  JOIN products p ON od.productCode = p.productCode  WHERE o.orderDate BETWEEN '2003-01-06' AND '2005-05-09' AND c.country = 'USA';
SELECT    o.addressLine1 +'' + o.addressLine2 AS full_address,    o.phone FROM    offices o JOIN    employees e ON o.officeCode = e.officeCode JOIN    (     SELECT        salesRepEmployeeNumber     FROM        (         SELECT            salesRepEmployeeNumber,            SUM(oi.quantityOrdered * oi.priceEach) AS total_sales         FROM            orders o         JOIN            orderdetails oi ON o.orderNumber = oi.orderNumber         WHERE            o.orderDate BETWEEN '2005-01-01' AND '2005-12-31'         GROUP BY            salesRepEmployeeNumber         ORDER BY            total_sales DESC         LIMIT 1       ) t   ) s ON e.employeeNumber = s.salesRepEmployeeNumber;
SELECT phone FROM customers WHERE lastName LIKE 'M%' AND country <> 'Germany';
SELECT AVG(amount)  FROM payments  WHERE paymentDate >= '2004-01-01' AND paymentDate < '2004-07-01';
SELECT    DIVIDE(SUM(CASE WHEN o.customerNumber = 186 THEN 1 ELSE 0 END), COUNT(o.orderNumber)) AS percentage FROM    orders o WHERE    o.status ='shipped' AND YEAR(o.shippedDate) = 2005;
SELECT COUNT(*) FROM customers WHERE creditLimit > 115000 AND customerNumber IN (   SELECT customerNumber   FROM orders   WHERE status = 'cancelled' );
SELECT p.paymentDate FROM payments p JOIN customers c ON p.customerNumber = c.customerNumber JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber WHERE e.firstName = 'Barry' AND e.lastName = 'Jones' AND c.creditLimit = (   SELECT MIN(creditLimit)   FROM customers   WHERE salesRepEmployeeNumber IN (     SELECT employeeNumber     FROM employees     WHERE firstName = 'Barry' AND lastName = 'Jones'   ) );
SELECT e.lastName, e.firstName FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE c.country = 'France';
SELECT CONCAT(c.addressLine1, ', ', c.addressLine2) AS full_address FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE o.shippedDate = '2005-04-04' AND o.comments LIKE '%DHL%';
SELECT CONCAT(o.addressLine1, ', ', o.addressLine2) AS full_address FROM offices o JOIN employees e ON o.officeCode = e.officeCode JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE c.city = 'New York City';
SELECT addressLine1 + addressLine2 AS full_address FROM offices WHERE officeCode IN (   SELECT officeCode   FROM employees   GROUP BY officeCode   HAVING COUNT(*) = 4 AND SUM(CASE WHEN jobTitle = 'Sales Manager' THEN 1 ELSE 0 END) > 0 )
SELECT SUM(p.MSRP - p.buyPrice) AS profit FROM products p WHERE p.productVendor = 'Carousel DieCast Legends' AND p.productDescription = 'The perfect holiday or anniversary gift for executives';
SELECT customerName, AVG(amount) AS avg_amount FROM customers JOIN payments ON customers.customerNumber = payments.customerNumber WHERE city = 'Boston' GROUP BY customerName ORDER BY avg_amount DESC;
SELECT    SUM(od.quantityOrdered) AS total_quantity_ordered,   AVG(od.priceEach) AS average_price FROM    orderdetails od   JOIN products p ON od.productCode = p.productCode WHERE    p.productName = '18th Century Vintage Horse Carriage';
SELECT COUNT(DISTINCT p.productCode) FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE o.orderNumber = 10252;
SELECT e.firstName, e.lastName FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber JOIN orders o ON c.customerNumber = o.customerNumber WHERE c.addressLine1 = '25 Maiden Lane' AND c.addressLine2 = 'Floor No. 4';
SELECT addressLine1, addressLine2, city, state, country, postalCode FROM offices WHERE officeCode IN (   SELECT officeCode   FROM employees   WHERE firstName = 'Foon Yue' AND lastName = 'Tseng' );
SELECT    orderDate,    SUM(quantityOrdered * priceEach) AS TotalPrice FROM    orders    JOIN orderdetails ON orders.orderNumber = orderdetails.orderNumber WHERE    orderDate IN ('2005-04-08', '2005-04-10') GROUP BY    orderDate ORDER BY    TotalPrice DESC LIMIT 1;
SELECT SUM(od.quantityOrdered) AS total_sold FROM orderdetails od JOIN products p ON od.productCode = p.productCode WHERE p.MSRP - p.buyPrice = (   SELECT MAX(MSRP - buyPrice)   FROM products );
SELECT amount FROM payments WHERE customerNumber = (   SELECT customerNumber   FROM customers   WHERE customerName = 'Petit Auto' ) AND paymentDate = '2004-08-09';
SELECT c.customerName FROM customers c JOIN payments p ON c.customerNumber = p.customerNumber WHERE p.checkNumber = 'NR157385';
SELECT contactFirstName, contactLastName  FROM customers  WHERE customerNumber = (   SELECT customerNumber    FROM orders    WHERE orderNumber = 10160 );
SELECT addressLine1, addressLine2, city, state, postalCode, country FROM orders JOIN customers ON orders.customerNumber = customers.customerNumber WHERE orders.orderNumber = 10383;
SELECT p.textDescription FROM productlines p JOIN products pr ON p.productLine = pr.productLine WHERE pr.productCode = 'S18_2949';
SELECT e.email FROM customers c JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber WHERE c.customerName = 'Dragon Souveniers, Ltd.';
SELECT COUNT(DISTINCT c.customerNumber) FROM customers c JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber WHERE e.firstName = 'Gerard' AND e.lastName = 'Hernandez' AND c.country = 'France';
SELECT o.orderDate, p.productName FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE o.customerNumber = 114 ORDER BY o.orderDate DESC LIMIT 1;
SELECT (MSRP - priceEach) / MSRP  FROM products  JOIN orderdetails  ON products.productCode = orderdetails.productCode  WHERE products.productCode = 'S18_3482'  AND orderdetails.orderNumber = 10108;
SELECT CONCAT(e.firstName,'', e.lastName)  FROM employees e  WHERE e.employeeNumber = (   SELECT reportsTo    FROM employees    WHERE firstName = 'Steve' AND lastName = 'Patterson' );
SELECT email, phone FROM employees WHERE jobTitle = 'President';
SELECT CONCAT(e.firstName,'', e.lastName) AS salesRepresentativeName FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE c.customerName = 'Muscle Machine Inc' AND e.jobTitle = 'Sales Rep';
SELECT e.email FROM customers c JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber JOIN employees m ON e.reportsTo = m.employeeNumber WHERE c.customerName = 'Muscle Machine Inc';
SELECT * FROM customers WHERE salesRepEmployeeNumber IN (   SELECT employeeNumber   FROM employees   WHERE firstName = 'Steve' AND lastName = 'Patterson' );
SELECT COUNT(DISTINCT c.customerNumber) FROM customers c JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber WHERE e.reportsTo IN (   SELECT employeeNumber   FROM employees   WHERE firstName = 'William' AND lastName = 'Patterson' );
SELECT phone FROM customers WHERE salesRepEmployeeNumber IN (   SELECT employeeNumber   FROM employees   WHERE firstName = 'Leslie' AND lastName = 'Jennings' ) ORDER BY creditLimit DESC LIMIT 3;
SELECT COUNT(DISTINCT e.employeeNumber) FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE e.jobTitle = 'Sales Rep' AND o.country = 'USA';
SELECT addressLine1, addressLine2 FROM offices WHERE officeCode IN (   SELECT officeCode   FROM employees   WHERE jobTitle = 'President' );
SELECT o.postalCode FROM offices o JOIN employees e ON o.officeCode = e.officeCode WHERE e.jobTitle = 'VP Sales';
SELECT SUM(od.quantityOrdered * od.priceEach)  FROM orders o  JOIN customers c ON o.customerNumber = c.customerNumber  JOIN orderdetails od ON o.orderNumber = od.orderNumber  WHERE o.orderDate = '2003-03-03' AND c.customerName = 'Cruz & Sons Co.';
SELECT p.productName FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE c.customerName = 'Cruz & Sons Co.' AND o.orderDate = '2003-03-03';
SELECT p.productName FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE c.customerName = 'Cruz & Sons Co.' ORDER BY od.quantityOrdered DESC LIMIT 1;
SELECT o.shippedDate FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber WHERE c.customerName = 'Cruz & Sons Co.' AND o.orderDate = '2003-03-03';
SELECT      o.orderDate,      COUNT(DISTINCT c.customerNumber) AS num_customers FROM      orders o  JOIN      customers c ON o.customerNumber = c.customerNumber  JOIN      orderdetails od ON o.orderNumber = od.orderNumber  JOIN      products p ON od.productCode = p.productCode  WHERE      p.productName = '1957 Chevy Pickup'      AND o.orderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)  GROUP BY      o.orderDate;
SELECT productName FROM products WHERE productLine = 'Classic Cars' AND MSRP - buyPrice = (   SELECT MAX(MSRP - buyPrice)   FROM products   WHERE productLine = 'Classic Cars' );
SELECT customerName FROM customers WHERE customerNumber IN (   SELECT customerNumber   FROM orders   WHERE status = 'In Process' );
SELECT    COUNT(CASE WHEN DATEDIFF(shippedDate, requiredDate) > 3 THEN orderNumber ELSE NULL END) / COUNT(orderNumber) * 100 AS percentage FROM    orders WHERE    status = 'Shipped';
SELECT c.customerName FROM customers c JOIN payments p ON c.customerNumber = p.customerNumber WHERE YEAR(p.paymentDate) = 2005 ORDER BY p.amount DESC LIMIT 1;
SELECT p.productName, MAX(od.quantityOrdered) AS max_quantity, (p.MSRP - p.buyPrice) AS profit_margin FROM orderdetails od JOIN products p ON od.productCode = p.productCode GROUP BY p.productName, p.MSRP, p.buyPrice ORDER BY max_quantity DESC LIMIT 1;
SELECT c.customerName FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber JOIN (   SELECT orderNumber   FROM orderdetails   GROUP BY orderNumber   ORDER BY SUM(quantityOrdered * priceEach) DESC   LIMIT 1 ) od ON o.orderNumber = od.orderNumber;
SELECT c.customerName  FROM customers c  JOIN orders o ON c.customerNumber = o.customerNumber  WHERE o.status = 'Disputed';
SELECT    (COUNT(e.employeeNumber) * 100 / (SELECT COUNT(*) FROM employees)) AS percentage FROM    employees e JOIN    offices o ON e.officeCode = o.officeCode WHERE    o.city = 'Paris';
SELECT e.firstName, e.lastName, o.city FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE e.jobTitle = 'Sales Manager' AND o.territory = 'EMEA';
SELECT e.firstName, e.lastName, m.firstName, m.lastName FROM employees e JOIN employees m ON e.reportsTo = m.employeeNumber JOIN offices o ON e.officeCode = o.officeCode WHERE o.country = 'Japan';
SELECT c.customerName FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE p.productName = '1939 Chevrolet Deluxe Coupe' AND od.priceEach = (   SELECT MAX(od2.priceEach)   FROM orderdetails od2   JOIN products p2 ON od2.productCode = p2.productCode   WHERE p2.productName = '1939 Chevrolet Deluxe Coupe' );
SELECT    DIVIDE(SUM(p.amount), (SELECT SUM(amount) FROM payments WHERE YEAR(paymentDate) = 2004)) * 100 AS percentage FROM    payments p   JOIN customers c ON p.customerNumber = c.customerNumber WHERE    c.customerName = 'Atelier graphique'    AND YEAR(p.paymentDate) = 2004;
SELECT    SUM((od.quantityOrdered * od.priceEach) - (od.quantityOrdered * p.buyPrice))  AS    actual_profit FROM    orderdetails od   JOIN products p ON od.productCode = p.productCode WHERE    od.orderNumber = 10100;
SELECT SUM(amount)  FROM payments  WHERE customerNumber = 103;
SELECT SUM(quantityOrdered * priceEach)  FROM orderdetails  WHERE orderNumber = 10100;
SELECT productName FROM products ORDER BY (   SELECT MAX(priceEach)   FROM orderdetails   WHERE orderdetails.productCode = products.productCode ) DESC LIMIT 3;
SELECT contactFirstName, contactLastName  FROM customers  WHERE salesRepEmployeeNumber = 1370  ORDER BY creditLimit DESC  LIMIT 1;
SELECT COUNT(od.quantityOrdered)  FROM orders o  JOIN orderdetails od ON o.orderNumber = od.orderNumber  JOIN products p ON od.productCode = p.productCode  WHERE p.productName = '2003 Harley-Davidson Eagle Drag Bikes';
SELECT shippedDate FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber WHERE priceEach = (SELECT MAX(priceEach) FROM orderdetails);
SELECT    SUM(od.quantityOrdered)  FROM    orders o    JOIN orderdetails od ON o.orderNumber = od.orderNumber    JOIN products p ON od.productCode = p.productCode    JOIN productlines pl ON p.productLine = pl.productLine  WHERE    pl.productLine = 'Motorcycles'    AND YEAR(o.orderDate) = 2004;
SELECT o.orderNumber FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber WHERE c.creditLimit = 45300;
SELECT o.customerNumber, c.customerName,         SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)) AS profit FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode GROUP BY o.orderNumber, c.customerName ORDER BY profit DESC LIMIT 1;
SELECT    YEAR(p.paymentDate) AS year,    COUNT(*) AS num_transactions FROM    payments p WHERE    p.amount < 10000 GROUP BY    YEAR(p.paymentDate)
SELECT p.productName, SUM(od.quantityOrdered) AS total_quantity_sold FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE YEAR(o.orderDate) = 2003 GROUP BY p.productName ORDER BY total_quantity_sold DESC LIMIT 3;
SELECT e.firstName, e.lastName, SUM(od.quantityOrdered) AS quantity_sold FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber JOIN orders o ON c.customerNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE p.productName = '1969 Harley Davidson Ultimate Chopper' AND YEAR(o.orderDate) = 2003 GROUP BY e.firstName, e.lastName;
SELECT CONCAT(firstName,'', lastName) AS FullName FROM employees WHERE jobTitle = 'Sales Rep' AND officeCode IN (     SELECT officeCode     FROM offices     WHERE city = 'NYC' );
SELECT c.customerName, c.country, p.checkNumber FROM customers c JOIN payments p ON c.customerNumber = p.customerNumber WHERE p.checkNumber = 'GG31455';
SELECT SUM(od.quantityOrdered)  FROM orders o  JOIN orderdetails od ON o.orderNumber = od.orderNumber  JOIN products p ON od.productCode = p.productCode  WHERE p.productName = '2001 Ferrari Enzo';
SELECT p.productName FROM products p JOIN orderdetails od ON p.productCode = od.productCode GROUP BY p.productName ORDER BY SUM(od.quantityOrdered) ASC LIMIT 5;
SELECT customerName FROM customers WHERE customerNumber IN (   SELECT customerNumber   FROM orders   WHERE status = 'disputed' );
SELECT COUNT(DISTINCT o.officeCode) FROM offices o JOIN employees e ON o.officeCode = e.officeCode JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber JOIN orders ord ON c.customerNumber = ord.customerNumber WHERE o.country = 'USA' AND ord.status = 'In Process';
SELECT SUM(od.quantityOrdered * od.priceEach)  FROM orders o  JOIN customers c ON o.customerNumber = c.customerNumber  JOIN orderdetails od ON o.orderNumber = od.orderNumber  JOIN products p ON od.productCode = p.productCode  JOIN productlines pl ON p.productLine = pl.productLine  WHERE o.status = 'Shipped'  AND c.customerName = 'Land of Toys Inc'  AND pl.productLine = 'Classic Cars';
SELECT COUNT(*) FROM generalinfo WHERE review < 3;
SELECT food_type FROM generalinfo WHERE review = 4 ORDER BY review DESC LIMIT 4;
SELECT COUNT(DISTINCT gi.id_restaurant) FROM generalinfo gi JOIN location l ON gi.id_restaurant = l.id_restaurant WHERE gi.food_type ='mediterranean' AND l.city = 'Richmond';
SELECT city FROM geographic WHERE county = 'Sonoma';
SELECT DISTINCT county FROM geographic WHERE region!= 'bay area';
SELECT city FROM geographic WHERE region = 'Northern California';
SELECT l.id_restaurant FROM location l WHERE l.street_name = '11th street' AND l.city = 'oakland';
SELECT COUNT(DISTINCT l.id_restaurant) FROM location l WHERE l.street_num = 871;
SELECT l.street_num FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE l.street_name = '9th Avenue' AND l.city = 'San Francisco';
SELECT food_type FROM generalinfo WHERE city = 'Berkeley' AND id_restaurant IN (   SELECT id_restaurant   FROM location   WHERE city = 'Berkeley'   AND street_name = 'Adeline St' );
SELECT region FROM geographic WHERE city NOT IN (   SELECT city   FROM generalinfo   WHERE food_type = 'african' ) GROUP BY region;
SELECT DISTINCT g.county FROM geographic g JOIN location l ON g.city = l.city JOIN generalinfo gi ON l.id_restaurant = gi.id_restaurant WHERE gi.label = 'a & w root beer';
SELECT l.street_name, l.street_num FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.label = 'adelitas taqueria';
SELECT food_type FROM generalinfo WHERE id_restaurant IN (   SELECT id_restaurant   FROM location   WHERE street_num = 3140 AND street_name = 'alpine rd' ) AND city IN (   SELECT city   FROM geographic   WHERE county ='san mateo county' );
SELECT l.street_name FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.city = 'San Francisco' AND g.food_type ='seafood';
SELECT DISTINCT county  FROM geographic  WHERE city NOT IN (   SELECT city    FROM generalinfo    WHERE label <> 'bakers square restaurant & pie shop' );
SELECT COUNT(DISTINCT county)  FROM geographic g  JOIN location l ON g.city = l.city  WHERE l.street_name = 'appian way';
SELECT review FROM generalinfo WHERE city IN (   SELECT city   FROM location   WHERE street_name = 'atlantic ave' );
SELECT gi.id_restaurant FROM generalinfo gi JOIN geographic g ON gi.city = g.city WHERE g.county = 'Contra Costa County';
SELECT gi.label FROM generalinfo gi JOIN geographic g ON gi.city = g.city WHERE g.county = 'Yolo County';
SELECT gi.label FROM generalinfo gi JOIN location l ON gi.id_restaurant = l.id_restaurant WHERE l.street_name = 'drive' AND l.city ='san rafael' AND gi.food_type <> 'american';
SELECT l.street_name FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.city = 'San Francisco' AND g.review = 1.7;
SELECT gi.label FROM generalinfo gi JOIN location l ON gi.id_restaurant = l.id_restaurant WHERE l.street_name = 'Alameda de las Pulgas' AND l.city = 'Menlo Park' ORDER BY gi.review ASC LIMIT 1;
SELECT l.street_name FROM geographic g JOIN location l ON g.city = l.city JOIN generalinfo gi ON l.id_restaurant = gi.id_restaurant WHERE g.county = 'Tuolumne' AND gi.label = 'Good Heavens';
SELECT l.street_num FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.label = 'aux delices vietnamese restaurant';
SELECT gi.id_restaurant FROM generalinfo gi JOIN geographic g ON gi.city = g.city WHERE g.county = 'Marin County';
SELECT region FROM geographic WHERE city NOT IN (   SELECT city   FROM generalinfo   WHERE food_type = 'pizza' ) GROUP BY region;
SELECT AVG(review)  FROM generalinfo  WHERE city IN (   SELECT city    FROM geographic    WHERE county ='santa cruz county' );
SELECT    COUNT(CASE WHEN gi.food_type ='mexican' THEN gi.id_restaurant END) /    COUNT(gi.id_restaurant) * 100 FROM    generalinfo gi   JOIN location l ON gi.id_restaurant = l.id_restaurant   JOIN geographic g ON l.city = g.city WHERE    g.county ='monterey county';
SELECT    (COUNT(CASE WHEN l.street_name = '11th st' AND g.county = 'alameda county' THEN 1 END) /     COUNT(CASE WHEN g.county = 'alameda county' THEN 1 END)) * 100 AS percentage FROM    location l JOIN    geographic g ON l.city = g.city;
SELECT gi.label FROM generalinfo gi WHERE gi.food_type = 'european';
SELECT DISTINCT g.city FROM geographic g WHERE g.region = 'northern california';
SELECT label FROM generalinfo WHERE food_type = '24 hour diner';
SELECT city FROM geographic WHERE county = 'unknown' AND region = 'unknown' LIMIT 5;
SELECT county, region  FROM geographic  WHERE city = 'Davis';
SELECT l.street_name FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.city = 'Clayton';
SELECT label FROM generalinfo WHERE city = 'San Francisco' ORDER BY review DESC LIMIT 1;
SELECT COUNT(*) FROM generalinfo WHERE food_type = 'american' AND city = 'Carmel' AND review = (     SELECT MIN(review)     FROM generalinfo     WHERE food_type = 'american' AND city = 'Carmel' );
SELECT    (COUNT(CASE WHEN gi.food_type = 'american food' THEN gi.id_restaurant END) /     COUNT(gi.id_restaurant)) * 100 AS percentage FROM    generalinfo gi WHERE    gi.city = 'dublin';
SELECT l.street_num, l.street_name, l.city  FROM location l  JOIN generalinfo g ON l.id_restaurant = g.id_restaurant  WHERE g.label = 'Albert\'s Café';
SELECT gi.label FROM generalinfo gi JOIN location l ON gi.id_restaurant = l.id_restaurant WHERE l.street_name = '19th St' AND l.city = 'Oakland';
SELECT food_type FROM generalinfo WHERE id_restaurant IN (   SELECT id_restaurant   FROM location   WHERE street_name = 'E 25th Ave' AND street_num = '106' );
SELECT gi.label FROM generalinfo gi JOIN geographic g ON gi.city = g.city WHERE g.region = 'unknown' LIMIT 3;
SELECT gi.label FROM generalinfo gi JOIN location l ON gi.id_restaurant = l.id_restaurant WHERE gi.food_type = 'chinese' AND l.street_num = 104 AND l.street_name ='san tomas aquino road' AND l.city = 'campbell';
SELECT COUNT(*) FROM generalinfo T1 JOIN location T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.food_type = 'thai' AND T2.street_name ='san pablo ave' AND T2.city = 'albany';
SELECT g.county, g.region FROM geographic g JOIN location l ON g.city = l.city JOIN generalinfo gi ON l.id_restaurant = gi.id_restaurant WHERE gi.label = 'plearn-thai cuisine';
SELECT gi.label FROM geographic g JOIN location l ON g.city = l.city JOIN generalinfo gi ON l.id_restaurant = gi.id_restaurant WHERE g.county = 'El Dorado' AND g.region = 'Lake Tahoe';
SELECT g.county, g.region FROM geographic g JOIN location l ON g.city = l.city WHERE l.street_name = 'E. El Camino Real';
SELECT label FROM generalinfo WHERE food_type = 'Indian restaurant' AND city = 'berkeley' AND id_restaurant IN (   SELECT id_restaurant   FROM location   WHERE street_name ='shattuck ave'   AND city = 'berkeley' ) ORDER BY review LIMIT 1;
SELECT    (COUNT(CASE WHEN g.region = 'Bay Area' AND gi.review > 4 THEN gi.id_restaurant END) /     COUNT(CASE WHEN g.region = 'Bay Area' THEN gi.id_restaurant END)) * 100 AS percentage FROM    geographic g   JOIN generalinfo gi ON g.city = gi.city   JOIN location l ON gi.id_restaurant = l.id_restaurant;
SELECT city FROM geographic WHERE county = 'San Mateo';
SELECT COUNT(*) FROM generalinfo WHERE review > 4;
SELECT street_name, COUNT(street_name) as count FROM location GROUP BY street_name ORDER BY count DESC LIMIT 1;
SELECT label FROM generalinfo WHERE food_type = 'chicken' AND review = (SELECT MAX(review) FROM generalinfo WHERE food_type = 'chicken');
SELECT county FROM geographic WHERE city = 'el cerrito';
SELECT COUNT(DISTINCT l.id_restaurant) FROM location l WHERE l.street_name = 'irving';
SELECT gi.label FROM generalinfo gi JOIN geographic g ON gi.city = g.city WHERE g.county = 'Marin';
SELECT l.street_num, l.street_name FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.label = 'Peking Duck Restaurant';
SELECT l.street_name FROM location l JOIN geographic g ON l.city = g.city WHERE g.county = 'Alameda' GROUP BY l.street_name HAVING COUNT(l.id_restaurant) > 10;
SELECT DISTINCT g.region FROM geographic g JOIN location l ON g.city = l.city JOIN generalinfo gi ON l.id_restaurant = gi.id_restaurant WHERE gi.food_type = 'greek';
SELECT l.street_num, l.street_name FROM location l JOIN geographic g ON l.city = g.city WHERE g.region = 'unknown';
SELECT review FROM generalinfo WHERE id_restaurant IN (   SELECT id_restaurant   FROM location   WHERE street_num = 8440 AND street_name ='murray ave' );
SELECT food_type FROM generalinfo WHERE city IN (SELECT city                FROM geographic                WHERE county = 'Monterey') GROUP BY food_type ORDER BY COUNT(food_type) DESC LIMIT 1;
SELECT street_name FROM location JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant WHERE city ='san francisco' AND food_type = 'burgers' GROUP BY street_name ORDER BY COUNT(street_name) DESC LIMIT 1;
SELECT g.region FROM geographic g JOIN location l ON g.city = l.city WHERE l.street_num = 1149 AND l.street_name = 'el camino real';
SELECT g.county FROM geographic g JOIN location l ON g.city = l.city JOIN generalinfo gi ON l.id_restaurant = gi.id_restaurant WHERE gi.label ='sankee';
SELECT COUNT(DISTINCT l.street_name) FROM location l JOIN geographic g ON l.city = g.city WHERE g.region = 'Northern California';
SELECT gi.label FROM generalinfo gi JOIN location l ON gi.id_restaurant = l.id_restaurant WHERE l.street_name = 'Park St';
SELECT    COUNT(CASE WHEN g.region = 'bay area' THEN 1 ELSE NULL END) / COUNT(g.region) * 100 FROM    geographic g   JOIN generalinfo gi ON g.city = gi.city WHERE    gi.id_restaurant IS NOT NULL;
SELECT    g.county,    AVG(gi.review) AS avg_review FROM    generalinfo gi    JOIN geographic g ON gi.city = g.city  WHERE    gi.food_type = 'chinese'  GROUP BY    g.county  ORDER BY    avg_review DESC;
SELECT l.street_name FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.city = 'San Francisco';
SELECT l.id_restaurant FROM location l WHERE l.city = 'Danville';
SELECT COUNT(DISTINCT g.city) FROM geographic g WHERE g.region = 'bay area';
SELECT COUNT(DISTINCT gi.label) FROM generalinfo gi JOIN geographic g ON gi.city = g.city WHERE g.county = 'unknown';
SELECT l.street_name FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.food_type = 'American';
SELECT label FROM generalinfo WHERE city IN (   SELECT city   FROM geographic   WHERE county = 'Santa Cruz county' );
SELECT review FROM generalinfo WHERE id_restaurant IN (   SELECT id_restaurant   FROM location   WHERE street_num = 430 AND street_name = 'Broadway' );
SELECT l.street_num, l.street_name FROM location l JOIN (   SELECT city, MAX(review) AS max_review   FROM generalinfo   GROUP BY city ) AS gi ON l.city = gi.city JOIN generalinfo g ON l.id_restaurant = g.id_restaurant AND g.city = gi.city AND g.review = gi.max_review ORDER BY g.review DESC LIMIT 1;
SELECT g.region, COUNT(gi.food_type) as count FROM generalinfo gi JOIN location l ON gi.id_restaurant = l.id_restaurant JOIN geographic g ON l.city = g.city WHERE gi.food_type = 'Italian' GROUP BY g.region ORDER BY count DESC LIMIT 1;
SELECT    (COUNT(CASE WHEN g.region = 'Napa Valley' THEN 1 ELSE NULL END) / COUNT(g.region)) * 100    AS percentage_of_restaurants_in_napa_valley FROM    geographic g   JOIN generalinfo gi ON g.city = gi.city   JOIN location l ON gi.id_restaurant = l.id_restaurant;
SELECT COUNT(DISTINCT g.city)  FROM geographic g  WHERE g.region = 'bay area';
SELECT city FROM geographic WHERE county = 'unknown';
SELECT g.city FROM geographic g WHERE g.region = 'bay area' AND g.county ='santa clara county';
SELECT l.id_restaurant FROM location l WHERE l.city ='sunnyvale';
SELECT COUNT(*) FROM location WHERE street_num < 1000 AND street_name = 'railroad';
SELECT label FROM generalinfo WHERE food_type = '24 hour diner' AND city ='san francisco';
SELECT review FROM generalinfo WHERE city ='santa cruz' AND id_restaurant IN (   SELECT id_restaurant   FROM location   WHERE street_name = 'ocean st' AND city ='santa cruz' );
SELECT l.street_num FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.food_type = 'bar' AND g.city = 'oakland' AND g.review = 2.7;
SELECT COUNT(*) FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.food_type = 'bakery' AND l.street_name = 'university ave' AND l.city = 'palo alto';
SELECT l.street_num FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE g.food_type = 'winery' AND g.label = 'Tulocay Winery';
SELECT g.label, g.review FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE l.street_name ='mission blvd' AND l.city = 'hayward';
SELECT COUNT(*) FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE g.food_type = 'indian' AND l.street_name = 'castro st' AND l.city ='mountainview' AND g.label LIKE '%cookhouse%';
SELECT COUNT(*) FROM location WHERE id_restaurant IN (   SELECT id_restaurant   FROM generalinfo   WHERE review = 2 ) AND street_num < 500;
SELECT COUNT(*) FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE g.food_type = 'asian' AND l.street_name = 'n milpitas blvd' AND l.city ='milpitas' AND g.id_restaurant > 385;
SELECT gi.label, gi.id_restaurant FROM generalinfo gi JOIN location l ON gi.id_restaurant = l.id_restaurant WHERE l.street_name = 'ocean avenue' AND l.city ='san francisco';
SELECT l.city, l.street_num, l.street_name FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.label = 'Sanuki Restaurant';
SELECT gi.food_type FROM generalinfo gi JOIN location l ON gi.id_restaurant = l.id_restaurant WHERE l.street_num = 22779 AND l.street_name = '6th St' AND l.city = 'Hayward City';
SELECT COUNT(*) FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE g.food_type = 'american' AND l.street_name = 'front' AND l.city ='san francisco';
SELECT gi.id_restaurant FROM generalinfo gi JOIN location l ON gi.id_restaurant = l.id_restaurant WHERE gi.food_type = 'american' AND l.street_num > 2000 AND gi.review > (SELECT 0.7 * AVG(review) FROM generalinfo WHERE food_type = 'american');
SELECT    (COUNT(CASE WHEN food_type = 'afghani' THEN id_restaurant ELSE NULL END) / COUNT(id_restaurant)) * 100 AS percentage FROM    generalinfo    JOIN location ON generalinfo.id_restaurant = location.id_restaurant  WHERE    location.street_num BETWEEN 1000 AND 2000;
SELECT label FROM generalinfo WHERE city ='san francisco' AND food_type = 'asian' ORDER BY review DESC LIMIT 1;
SELECT COUNT(DISTINCT g.city)  FROM geographic g  WHERE g.region ='monterey';
SELECT COUNT(*) FROM generalinfo WHERE food_type = 'deli' AND city = 'belmont' AND review > 1;
SELECT county, COUNT(DISTINCT city) as city_count FROM geographic WHERE region = 'northern california' GROUP BY county ORDER BY city_count DESC LIMIT 1;
SELECT COUNT(DISTINCT gi.id_restaurant) FROM generalinfo gi WHERE gi.city = 'concord';
SELECT region FROM geographic WHERE city IN (   SELECT city   FROM (     SELECT city     FROM generalinfo     ORDER BY review DESC     LIMIT 4   ) AS top4 );
SELECT COUNT(*) FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE g.food_type = 'chinese' AND l.street_name = '1st st' AND l.city = 'Livermore';
SELECT COUNT(*) FROM generalinfo WHERE food_type = 'indian' AND city IN (   SELECT city   FROM geographic   WHERE region = 'los angeles area' );
SELECT food_type, COUNT(food_type) as count FROM generalinfo JOIN geographic ON generalinfo.city = geographic.city WHERE geographic.region = 'bay area' GROUP BY food_type ORDER BY count DESC LIMIT 1;
SELECT COUNT(DISTINCT l.id_restaurant) FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE l.street_name = 'broadway' AND l.city = 'oakland' AND g.review < 3;
SELECT region FROM geographic WHERE city IN (   SELECT city   FROM generalinfo   WHERE label = 'baskin robbins'   GROUP BY city   ORDER BY COUNT(city) DESC   LIMIT 1 )
SELECT l.street_name FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.city ='san jose' AND g.food_type = 'pizza';
SELECT COUNT(DISTINCT gi.food_type) FROM generalinfo gi JOIN location l ON gi.id_restaurant = l.id_restaurant JOIN geographic g ON l.city = g.city WHERE g.region IN ('Yosemite', 'Mono Lake');
SELECT l.street_num, l.street_name, l.city FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.review = (SELECT MAX(review) FROM generalinfo);
SELECT county FROM geographic WHERE city IN (   SELECT city   FROM (     SELECT city     FROM generalinfo     GROUP BY city     HAVING COUNT(DISTINCT label) = (       SELECT MAX(cnt)       FROM (         SELECT city, COUNT(DISTINCT label) cnt         FROM generalinfo         GROUP BY city       ) t     )   ) t ) GROUP BY county;
SELECT region, COUNT(g.id_restaurant) as num_restaurants FROM geographic g JOIN location l ON g.city = l.city JOIN generalinfo g2 ON l.id_restaurant = g2.id_restaurant GROUP BY region ORDER BY num_restaurants DESC LIMIT 1;
SELECT l.street_num, l.street_name, l.city FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.food_type = 'american' AND g.review > 4;
SELECT COUNT(*)  FROM Player  WHERE SUBSTR(DOB, 1, 4) > 1985;
SELECT COUNT(*)  FROM Match  WHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5';
SELECT COUNT(*)  FROM Match  WHERE Man_of_the_Match = 41;
SELECT Match_Id FROM Match WHERE SUBSTR(Match_Date, 1, 4) = '2008';
SELECT COUNT(*)  FROM Player  WHERE Country_Name = 'Australia';
SELECT Country_Name FROM Player WHERE DOB = (SELECT MIN(DOB) FROM Player);
SELECT Bowling_skill FROM Player WHERE Player_Name = 'SC Ganguly';
SELECT COUNT(*) FROM Player WHERE Batting_hand = 'Right-hand bat' AND SUBSTR(DOB, 1, 4) > 1985;
SELECT p.Player_Name FROM Player p JOIN Batting_Style bs ON p.Batting_hand = bs.Batting_hand WHERE bs.Batting_hand = 'Right-hand bat' AND p.Country_Name = 'Australia';
SELECT Bowling_skill FROM Player WHERE Country_Name = 'Australia';
SELECT MIN(DOB)  FROM Player  WHERE Bowling_skill = 'Legbreak';
SELECT Bowling_Skill, COUNT(Bowling_Skill) as count FROM Player JOIN Bowling_Style ON Player.Bowling_Skill = Bowling_Style.Bowling_Id GROUP BY Bowling_Skill ORDER BY count DESC LIMIT 1;
SELECT p.Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id WHERE m.Match_Date = '2008-04-18' AND m.Man_of_the_Match = pm.Player_Id;
SELECT COUNT(*) FROM Player_Match pm JOIN Player p ON pm.Player_Id = p.Player_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id WHERE p.Player_Name = 'SC Ganguly' AND r.Role_Desc = 'Captain';
SELECT R.Role_Desc FROM Player_Match PM JOIN Player P ON PM.Player_Id = P.Player_Id JOIN Rolee R ON PM.Role_Id = R.Role_Id JOIN Match M ON PM.Match_Id = M.Match_Id WHERE P.Player_Name = 'SC Ganguly' AND M.Match_Date = '2008-04-18';
SELECT MAX(Win_Margin)  FROM Match  WHERE Match_Id IN (   SELECT Match_Id    FROM Player_Match    WHERE Player_Id = (     SELECT Player_Id      FROM Player      WHERE Player_Name = 'SC Ganguly'   ) );
SELECT AVG(Win_Margin)  FROM Match  WHERE Match_Id IN (   SELECT Match_Id    FROM Player_Match    WHERE Player_Id = (     SELECT Player_Id      FROM Player      WHERE Player_Name = 'SC Ganguly'   ) );
SELECT    (COUNT(CASE WHEN Batting_hand = 'Right-hand bat' THEN Player_Id END) / COUNT(Player_Id)) * 100  FROM    Player  WHERE    SUBSTR(DOB, 1, 4) > 1985;
SELECT Player_Name FROM Player WHERE DOB = (SELECT MAX(DOB) FROM Player);
SELECT COUNT(Toss_Winner)  FROM Match  WHERE Toss_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Sunrisers Hyderabad');
SELECT p.Player_Name FROM Ball_by_Ball bb JOIN Player p ON bb.Striker = p.Player_Id WHERE bb.Match_Id = 419169 AND bb.Over_Id = 3 AND bb.Ball_Id = 2 AND bb.Innings_No = 2;
SELECT Venue_Name FROM Venue WHERE Venue_Id IN (     SELECT Venue_Id     FROM Match     WHERE Win_Margin = 138 );
SELECT p.Player_Name FROM Match m JOIN Player_Match pm ON m.Match_Id = pm.Match_Id JOIN Player p ON pm.Player_Id = p.Player_Id WHERE m.Match_Date = '2008-05-12' AND m.Man_of_the_Match = pm.Player_Id;
SELECT p.Player_Name FROM Player_Match pm JOIN Player p ON pm.Player_Id = p.Player_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id WHERE pm.Match_Id = '419117' AND r.Role_Desc = 'CaptainKeeper';
SELECT p.Player_Name FROM Season s JOIN Player p ON s.Man_of_the_Series = p.Player_Id WHERE s.Season_Year = 2013;
SELECT p.DOB FROM Player p, Season s WHERE p.Player_Name = s.Orange_Cap AND s.Season_Year = 2014;
SELECT Country_Name FROM Season JOIN Player ON Season.Purple_Cap = Player.Player_Id JOIN Country ON Player.Country_Name = Country.Country_Name WHERE Season_Id = 7;
SELECT c.Country_Name FROM City ci JOIN Country c ON ci.Country_id = c.Country_Id WHERE ci.City_Name = 'Ranchi';
SELECT COUNT(DISTINCT c.City_Name) FROM City c JOIN Country co ON c.Country_id = co.Country_Id WHERE co.Country_Name = 'India';
SELECT City_Name FROM City WHERE City_Id = (   SELECT City_Id   FROM Venue   GROUP BY City_Id   ORDER BY COUNT(Venue_Id) DESC   LIMIT 1 );
SELECT Batting_hand FROM Player JOIN Batting_Style ON Player.Batting_hand = Batting_Style.Batting_Id WHERE Player_Name = 'MK Pandey';
SELECT    COUNT(CASE WHEN c.Country_Name = 'India' THEN c.City_Id END) /    COUNT(CASE WHEN c.Country_Name = 'South Africa' THEN c.City_Id END)  AS ratio FROM City c JOIN Country co ON c.Country_id = co.Country_Id;
SELECT    (SELECT COUNT(Match_Id) FROM Match WHERE Venue_Id IN (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'M Chinnaswamy Stadium'))   /   (SELECT COUNT(Match_Id) FROM Match WHERE Venue_Id IN (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'Maharashtra Cricket Association Stadium')) AS result;
SELECT Player_Name FROM Player WHERE DOB = (SELECT MIN(DOB) FROM Player);
SELECT COUNT(*)  FROM Match  WHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5';
SELECT COUNT(*)  FROM Player  WHERE DOB >= '1990-01-01' AND DOB <= '1999-12-31';
SELECT COUNT(*)  FROM Match  WHERE (Team_1 = 10 OR Team_2 = 10) AND SUBSTR(Match_Date, 1, 4) = '2012';
SELECT p.Player_Id FROM Player p JOIN (   SELECT Orange_Cap   FROM Season   WHERE Season_Year IN (     SELECT DISTINCT Season_Year     FROM Season     WHERE Season_Year BETWEEN (       SELECT MIN(Season_Year)       FROM Season     ) AND (       SELECT MAX(Season_Year)       FROM Season     )   ) ) AS s ON p.Player_Id = s.Orange_Cap GROUP BY p.Player_Id HAVING COUNT(DISTINCT s.Season_Year) > 1;
SELECT COUNT(*)  FROM Match  WHERE Season_Id = 7;
SELECT COUNT(Umpire_Id) FROM Umpire WHERE Umpire_Country IN (     SELECT Country_Id     FROM Country     WHERE Country_Name = 'South Africa' );
SELECT p.Player_Name FROM Player p JOIN (   SELECT Match_Winner, COUNT(*) as count_man_of_the_match   FROM Match   GROUP BY Match_Winner   ORDER BY count_man_of_the_match DESC   LIMIT 1 ) m ON p.Player_Name = m.Match_Winner;
SELECT Country_Name FROM Player GROUP BY Country_Name ORDER BY COUNT(Country_Name) DESC LIMIT 1;
SELECT COUNT(*)  FROM Season  WHERE Man_of_the_Series = (   SELECT Player_Id    FROM Player    WHERE Player_Name = 'CH Gayle' );
SELECT Season_Year, COUNT(Match_Id) as num_matches FROM Match JOIN Venue ON Match.Venue_Id = Venue.Venue_Id JOIN Season ON Match.Season_Id = Season.Season_Id WHERE Venue_Name = 'M Chinnaswamy Stadium' GROUP BY Season_Year ORDER BY num_matches DESC LIMIT 1;
SELECT Team_Name FROM Team WHERE Team_Id IN (     SELECT Team_Id     FROM Match     WHERE Season_Id = 1 AND Match_Winner = Team_Id     GROUP BY Team_Id     ORDER BY COUNT(Match_Winner) DESC     LIMIT 1 );
SELECT Venue_Name FROM Venue WHERE Venue_Id = (   SELECT Venue_Id   FROM Match   WHERE Team_1 = (     SELECT Team_Id     FROM Team     WHERE Team_Name = 'Kolkata Knight Riders'   )   GROUP BY Venue_Id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Team_Name,         COUNT(*) AS losses FROM (   SELECT Team_1 AS Team_Id   FROM Match   WHERE Team_1 <> Match_Winner   UNION ALL   SELECT Team_2   FROM Match   WHERE Team_2 <> Match_Winner ) AS losses JOIN Team ON losses.Team_Id = Team.Team_Id GROUP BY Team_Name ORDER BY losses DESC LIMIT 1;
SELECT p.Player_Name FROM Player p JOIN Match m ON p.Player_Id = m.Man_of_the_Match WHERE m.Match_Date = (SELECT MIN(m2.Match_Date) FROM Match m2);
SELECT MIN(Match_Date)  FROM Match  WHERE Team_1 = 'Chennai Super Kings' OR Team_2 = 'Chennai Super Kings';
SELECT COUNT(*) FROM Player WHERE Batting_hand = 'Left-hand bat' AND Country_Name = 'India';
SELECT p.Player_Name FROM Player_Match pm JOIN Player p ON pm.Player_Id = p.Player_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id JOIN Team t ON pm.Team_Id = t.Team_Id WHERE r.Role_Desc = 'Captain' AND t.Team_Name = 'Deccan Chargers' GROUP BY p.Player_Name ORDER BY COUNT(pm.Role_Id) DESC LIMIT 1;
SELECT    (COUNT(CASE WHEN Batting_hand = 'Right-hand bat' THEN Player_Id ELSE NULL END) / COUNT(Player_Id)) * 100  AS Right_Hand_Batting_Percentage FROM Player;
SELECT Player_Name FROM Player WHERE DOB = '1981-07-07';
SELECT COUNT(DISTINCT M.Match_Id) FROM Player_Match PM JOIN Match M ON PM.Match_Id = M.Match_Id WHERE PM.Player_Id = 2;
SELECT Team_Name FROM Team WHERE Team_Id = (   SELECT Team_1   FROM Match   ORDER BY Win_Margin DESC   LIMIT 1 );
SELECT Country_Name FROM Country JOIN City ON Country.Country_Id = City.Country_id JOIN Venue ON City.City_Id = Venue.City_Id WHERE Venue_Name = 'St George''s Park';
SELECT p.Player_Name FROM Player_Match pm JOIN Player p ON pm.Player_Id = p.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Team t ON pm.Team_Id = t.Team_Id WHERE m.Match_Id = 335990 AND t.Team_Name = 'Mumbai Indians';
SELECT Team_Name FROM Team WHERE Team_Id = (   SELECT Match_Winner   FROM Match   WHERE Match_Date = '2009-05-07' AND Win_Margin = 7 );
SELECT COUNT(*)  FROM Match  WHERE Outcome_type = 'Superover';
SELECT City_Name FROM City WHERE Country_id = (SELECT Country_Id FROM Country WHERE Country_Name = 'U.A.E');
SELECT COUNT(*)  FROM Match  WHERE Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Pune Warriors');
SELECT Team_Name  FROM Match  JOIN Team ON Match_Winner = Team_Id  WHERE Match_Id = 829768 AND Match_Date LIKE '2015%';
SELECT R.Role_Desc FROM Player_Match PM JOIN Player P ON PM.Player_Id = P.Player_Id JOIN Rolee R ON PM.Role_Id = R.Role_Id WHERE P.Player_Name = 'K Goel' AND PM.Match_Id = 335992;
SELECT COUNT(DISTINCT c.City_Name) FROM City c JOIN Country co ON c.Country_id = co.Country_Id WHERE co.Country_Name = 'South Africa';
SELECT COUNT(*)  FROM Match  WHERE Venue_Id IN (SELECT Venue_Id                     FROM Venue                     WHERE Venue_Name = 'Newlands');
SELECT Win_Margin FROM Match WHERE (Team_1 = 'Mumbai Indians' AND Team_2 = 'Royal Challengers Bangalore'         OR Team_1 = 'Royal Challengers Bangalore' AND Team_2 = 'Mumbai Indians')        AND Match_Date = '2008-05-28';
SELECT Team1.Team_Name, Team2.Team_Name FROM Match JOIN Team AS Team1 ON Match.Team_1 = Team1.Team_Id JOIN Team AS Team2 ON Match.Team_2 = Team2.Team_Id WHERE Match.Match_Date LIKE '2011%' AND        Match.Win_Margin < (SELECT AVG(Win_Margin) * 0.3 FROM Match WHERE Match_Date LIKE '2011%');
SELECT    (COUNT(CASE WHEN p.DOB LIKE '1977%' AND r.Role_Desc = 'Captain' THEN r.Role_Id END) /     COUNT(CASE WHEN p.DOB LIKE '1977%' THEN r.Role_Id END)) * 100 AS Percentage_Of_Captains FROM    Player p JOIN    Player_Match pm ON p.Player_Id = pm.Player_Id JOIN    Rolee r ON pm.Role_Id = r.Role_Id;
SELECT COUNT(DISTINCT Over_Id)  FROM Ball_by_Ball  WHERE Match_Id = 335996 AND Innings_No = 1;
SELECT Over_Id, Ball_Id, Innings_No FROM Batsman_Scored WHERE Match_Id = 336004 AND Runs_Scored = (SELECT MAX(Runs_Scored) FROM Batsman_Scored WHERE Match_Id = 336004);
SELECT DISTINCT Match_Id FROM Ball_by_Ball WHERE Over_Id >= 20 LIMIT 5;
SELECT COUNT(DISTINCT Player_Out)  FROM Wicket_Taken  WHERE Match_Id = 548335 AND Innings_No = 1;
SELECT Player_Name FROM Player WHERE DOB LIKE '1971%';
SELECT Match_Id FROM Match WHERE DATE(Match_Date) = '2015-04-18';
SELECT DISTINCT wt.Match_Id FROM Wicket_Taken wt JOIN Out_Type ot ON wt.Kind_Out = ot.Out_Id WHERE ot.Out_Name = 'hit wicket';
SELECT COUNT(DISTINCT w.Player_Out) FROM Wicket_Taken w JOIN Out_Type o ON w.Kind_Out = o.Out_Id WHERE o.Out_Name ='stumped' AND w.Innings_No = 2;
SELECT COUNT(*)  FROM Season  WHERE Man_of_the_Series IN (   SELECT Player_Id    FROM Player    WHERE Player_Name = 'Yuvraj Singh' );
SELECT Player_Name, DOB FROM Player WHERE DOB LIKE '1977%' AND Country_Name = 'England';
SELECT p.Player_Name FROM Player p, Season s WHERE s.Man_of_the_Series = p.Player_Id AND s.Season_Year = 2010;
SELECT    (COUNT(CASE WHEN Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Chennai Super Kings') THEN Match_Id ELSE NULL END) / COUNT(Match_Id)) * 100 AS Win_Rate FROM    Match WHERE    Team_1 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Chennai Super Kings')    OR Team_2 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Chennai Super Kings');
SELECT p.Player_Name, p.Country_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Team t ON pm.Team_Id = t.Team_Id WHERE t.Team_Name = 'Gujarat Lions' AND m.Match_Date = '2016-04-11';
SELECT Player_Name, DOB FROM Player WHERE Bowling_skill = 'Left-arm fast';
SELECT Country_Name FROM Umpire JOIN Country ON Umpire.Umpire_Country = Country.Country_Id WHERE Umpire_Name = 'BR Doctrove';
SELECT p.Player_Name FROM Player_Match pm JOIN Player p ON pm.Player_Id = p.Player_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id JOIN Match m ON pm.Match_Id = m.Match_Id WHERE m.Match_Date = '2008-06-01' AND m.Match_Winner = pm.Team_Id AND r.Role_Desc = 'Captain';
SELECT Team_Name, COUNT(DISTINCT Match_Id) AS Total_Matches_Played FROM Player_Match JOIN Player ON Player_Match.Player_Id = Player.Player_Id JOIN Team ON Player_Match.Team_Id = Team.Team_Id WHERE Player_Name = 'CK Kapugedera' GROUP BY Team_Name;
SELECT    (COUNT(CASE WHEN v.Venue_Name = 'Wankhede Stadium' THEN m.Match_Id ELSE NULL END) /     COUNT(m.Match_Id)) * 100 AS percentage FROM    Match m   JOIN Venue v ON m.Venue_Id = v.Venue_Id   JOIN City c ON v.City_Id = c.City_Id WHERE    c.City_Name = 'Mumbai';
SELECT    (COUNT(CASE WHEN wt.Kind_Out = 'bowled' THEN wt.Player_Out ELSE NULL END) / COUNT(wt.Player_Out)) * 100 AS Percentage_Out_By_Bowl FROM    Wicket_Taken wt   JOIN Out_Type ot ON wt.Kind_Out = ot.Out_Name WHERE    wt.Match_Id = 392187;
SELECT    (COUNT(CASE WHEN Toss_Name = 'field' THEN Toss_Id ELSE NULL END) / COUNT(Toss_Id)) * 100 AS Percentage FROM    Match   JOIN Toss_Decision ON Match.Toss_Decide = Toss_Decision.Toss_Id WHERE    Match_Date BETWEEN '2010-01-01' AND '2016-12-31';
SELECT Toss_Winner FROM Match WHERE Toss_Decide = 2;
SELECT Match_Id FROM Match WHERE Man_of_the_Match = 'BB McCullum';
SELECT p.DOB FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id WHERE m.Man_of_the_Match = p.Player_Id;
SELECT Team_Name FROM Team WHERE Team_Id IN (   SELECT Toss_Winner   FROM Match   WHERE Match_Id BETWEEN 336010 AND 336020 );
SELECT COUNT(*)  FROM Match  WHERE Match_Winner = 'Mumbai Indians';
SELECT Team_Name FROM Team WHERE Team_Id IN (   SELECT Team_2   FROM Match   WHERE Team_1 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Pune Warriors') );
SELECT Team_Name FROM Team WHERE Team_Id = (   SELECT Match_Winner   FROM Match   WHERE Match_Id = 336000 );
SELECT Match_Id FROM Match WHERE Venue_Id IN (   SELECT Venue_Id   FROM Venue   WHERE Venue_Name = 'Brabourne Stadium' );
SELECT v.Venue_Name FROM Venue v JOIN Match m ON v.Venue_Id = m.Venue_Id JOIN Season s ON m.Season_Id = s.Season_Id WHERE s.Season_Id = 2;
SELECT City_Name FROM City JOIN Venue ON City.City_Id = Venue.City_Id WHERE Venue_Name = 'M Chinnaswamy Stadium';
SELECT Venue_Name FROM Venue WHERE City_Id IN (SELECT City_Id                    FROM City                    WHERE City_Name = 'Mumbai');
SELECT m.Match_Winner FROM Match m JOIN Venue v ON m.Venue_Id = v.Venue_Id WHERE v.Venue_Name LIKE 'St George%';
SELECT 1 FROM Venue WHERE Venue_Name = 'SuperSport Park' AND City_Id IN (     SELECT City_Id     FROM City     WHERE City_Name = 'Centurion' );
SELECT COUNT(*)  FROM Match  WHERE Match_Winner = 'Deccan Chargers';
SELECT COUNT(*)  FROM Venue  WHERE City_Id IN (SELECT City_Id                     FROM City                     WHERE City_Name = 'Pune');
SELECT non_striker FROM Ball_by_Ball WHERE Match_Id = 501219 GROUP BY non_striker ORDER BY COUNT(Ball_Id) DESC LIMIT 1;
SELECT AVG(Runs_Scored) AS Average_Runs_Scored FROM Batsman_Scored WHERE Innings_No = 1 AND Over_Id BETWEEN 1 AND 24;
SELECT    Match_Id,    AVG(Extra_Runs) AS Average_Extra_Runs FROM    Extra_Runs WHERE    Innings_No = 2 GROUP BY    Match_Id;
SELECT    COUNT(CASE WHEN Win_Margin > 100 THEN Match_Id END) / COUNT(Match_Id) * 100 AS percentage FROM    Match;
SELECT Player_Name FROM Player WHERE DOB BETWEEN '1970-01-01' AND '1990-12-31' ORDER BY DOB DESC;
SELECT COUNT(*)  FROM Wicket_Taken  WHERE Over_Id = 3 AND Fielders = '';
SELECT c.Country_Name, COUNT(u.Umpire_Id) as Num_Umpires FROM Umpire u JOIN Country c ON u.Umpire_Country = c.Country_Id GROUP BY c.Country_Name ORDER BY Num_Umpires DESC LIMIT 1;
SELECT    COUNT(CASE WHEN rm.Role_Desc = 'CaptainKeeper' THEN p.Player_Id END) / COUNT(p.Player_Id) * 100 AS percentage FROM    Player p   JOIN Player_Match pm ON p.Player_Id = pm.Player_Id   JOIN Rolee rm ON pm.Role_Id = rm.Role_Id;
SELECT COUNT(DISTINCT p.Player_Id) FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Wicket_Taken wt ON pm.Match_Id = wt.Match_Id AND pm.Player_Id = wt.Player_Out JOIN Out_Type ot ON wt.Kind_Out = ot.Out_Id WHERE ot.Out_Name = 'hit wicket';
SELECT    Country_Name,    AVG(Right_Hand_Count) AS Avg_Right_Hand_Batsmen FROM (   SELECT      p.Country_Name,      COUNT(p.Player_Id) AS Right_Hand_Count   FROM      Player p     JOIN Batting_Style bs ON p.Batting_hand = bs.Batting_hand   WHERE      bs.Batting_hand = 'Right-hand bat'   GROUP BY      p.Country_Name ) AS subquery GROUP BY    Country_Name;
SELECT    SUM(CASE WHEN Bowling_skill = 'Legbreak' THEN 1 ELSE 0 END) / COUNT(Player_Id) * 100 AS percentage FROM    Player;
SELECT COUNT(DISTINCT m.Match_Winner) FROM Match m WHERE m.Win_Margin < 50 AND m.Win_Type = 'wickets';
SELECT COUNT(DISTINCT v.Venue_Id) FROM Match m JOIN Venue v ON m.Venue_Id = v.Venue_Id WHERE m.Toss_Winner = m.Team_2 AND m.Match_Winner = m.Team_1;
SELECT p.Player_Name, p.Country_Name FROM Player p, Season s WHERE p.Player_Id = s.Man_of_the_Series AND s.Season_Year = 2012;
SELECT Venue_Name FROM Venue WHERE Venue_Id = (   SELECT Venue_Id   FROM Match   GROUP BY Venue_Id   ORDER BY COUNT(Match_Id) DESC   LIMIT 1 );
SELECT City_Name FROM Venue JOIN (   SELECT Venue_Id, COUNT(*) AS count   FROM Match   WHERE Win_Type = 'NoResult'   GROUP BY Venue_Id   HAVING COUNT(*) = (     SELECT MIN(count)     FROM (       SELECT Venue_Id, COUNT(*) AS count       FROM Match       WHERE Win_Type = 'NoResult'       GROUP BY Venue_Id     ) AS sub   ) ) AS sub ON Venue.Venue_Id = sub.Venue_Id;
SELECT p.Player_Name FROM Player p WHERE p.Player_Name IN (   SELECT s.Man_of_the_Series   FROM Season s   GROUP BY s.Man_of_the_Series   HAVING COUNT(s.Man_of_the_Series) > 1 );
SELECT p.Player_Name, p.Country_Name, COUNT(wt.Player_Out) as Catches FROM Player_Match pm JOIN Player p ON pm.Player_Id = p.Player_Id JOIN Wicket_Taken wt ON pm.Match_Id = wt.Match_Id AND pm.Player_Id = wt.Fielders JOIN Out_Type ot ON wt.Kind_Out = ot.Out_Id WHERE ot.Out_Name = 'caught' GROUP BY p.Player_Name, p.Country_Name HAVING COUNT(wt.Player_Out) > (SELECT COUNT(*) / (SELECT COUNT(DISTINCT wt.Fielders) FROM Wicket_Taken wt JOIN Out_Type ot ON wt.Kind_Out = ot.Out_Id WHERE ot.Out_Name = 'caught') FROM Wicket_Taken wt JOIN Out_Type ot ON wt.Kind_Out = ot.Out_Id WHERE ot.Out_Name = 'caught') ORDER BY Catches;
SELECT    COUNT(CASE WHEN M.Match_Winner = M.Team_1 AND M.Toss_Winner = M.Team_1 THEN 1 END) / COUNT(*) * 100 AS percentage FROM    Match M WHERE    M.Win_Type = 'runs' AND M.Match_Winner = M.Team_1;
SELECT    AVG(CASE WHEN w.Out_Id = 4 THEN 1 ELSE NULL END) -    AVG(CASE WHEN w.Out_Id = 3 THEN 1 ELSE NULL END) AS difference FROM    Wicket_Taken w   JOIN Out_Type o ON w.Kind_Out = o.Out_Id;
SELECT Over_Id FROM Ball_by_Ball WHERE Striker = 7;
SELECT COUNT(*) FROM Match WHERE Team_1 = Toss_Winner AND Toss_Decide = 2;
SELECT COUNT(*)  FROM Match  WHERE Match_Date LIKE '2010-03%';
SELECT COUNT(*)  FROM Player  WHERE DOB < '1990-06-29' AND Player_Name!= 'Gurkeerat Singh';
SELECT COUNT(*)  FROM Match  WHERE Man_of_the_Match = (SELECT Player_Id                           FROM Player                           WHERE Player_Name = 'SR Watson');
SELECT p.Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id JOIN Team t ON pm.Team_Id = t.Team_Id WHERE t.Team_Name = 'Delhi Daredevils' GROUP BY p.Player_Name HAVING COUNT(DISTINCT pm.Role_Id) = (     SELECT MAX(role_count)     FROM (         SELECT COUNT(DISTINCT pm.Role_Id) as role_count         FROM Player p         JOIN Player_Match pm ON p.Player_Id = pm.Player_Id         JOIN Rolee r ON pm.Role_Id = r.Role_Id         JOIN Team t ON pm.Team_Id = t.Team_Id         WHERE t.Team_Name = 'Delhi Daredevils'         GROUP BY p.Player_Name     ) subquery )
SELECT p.Player_Name FROM Player p JOIN (   SELECT Man_of_the_Series, COUNT(*) as count   FROM Season   GROUP BY Man_of_the_Series   ORDER BY count DESC   LIMIT 1 ) s ON p.Player_Id = s.Man_of_the_Series;
SELECT s.Season_Year FROM Season s JOIN Player_Match pm ON s.Man_of_the_Series = pm.Player_Id JOIN Player p ON pm.Player_Id = p.Player_Id WHERE p.Player_Name = 'SP Narine' AND s.Orange_Cap = pm.Player_Id;
SELECT DISTINCT t.Team_Name FROM Team t JOIN Player_Match pm ON t.Team_Id = pm.Team_Id JOIN Player p ON pm.Player_Id = p.Player_Id JOIN Season s ON pm.Match_Id IN (     SELECT m.Match_Id     FROM Match m     JOIN Season ss ON m.Season_Id = ss.Season_Id     WHERE ss.Purple_Cap = p.Player_Name AND ss.Orange_Cap = (         SELECT p2.Player_Name         FROM Player p2         JOIN Player_Match pm2 ON p2.Player_Id = pm2.Player_Id         WHERE pm2.Match_Id = m.Match_Id AND pm2.Team_Id = pm.Team_Id     ) )
SELECT Player_Name FROM Player WHERE Country_Name = 'Zimbabwe';
SELECT COUNT(*)  FROM Player  WHERE Batting_hand = 'Left-hand bat';
SELECT COUNT(*)  FROM Match  WHERE Win_Type!= 'runs';
SELECT Umpire_Name FROM Umpire WHERE Umpire_Country = 'New Zealand';
SELECT Country_Name FROM Country WHERE Country_Id = (   SELECT Country_Id   FROM Player   JOIN Bowling_Style ON Player.Bowling_skill = Bowling_Style.Bowling_skill   WHERE Bowling_Style.Bowling_skill = 'Slow left-arm chinaman'   GROUP BY Country_Id   ORDER BY COUNT(Player_Id) DESC   LIMIT 1 )
SELECT Venue_Name FROM Venue WHERE Venue_Id = (   SELECT Venue_Id   FROM Match   WHERE Team_1 = 'Kochi Tuskers Kerala' OR Team_2 = 'Kochi Tuskers Kerala'   GROUP BY Venue_Id   ORDER BY COUNT(Match_Id) DESC   LIMIT 1 );
SELECT COUNT(DISTINCT m.Match_Id) FROM Match m JOIN Team t ON (m.Team_1 = t.Team_Id AND t.Team_Name = 'Delhi Daredevils') OR (m.Team_2 = t.Team_Id AND t.Team_Name = 'Delhi Daredevils') JOIN Ball_by_Ball bb ON m.Match_Id = bb.Match_Id JOIN Batsman_Scored bs ON bb.Match_Id = bs.Match_Id AND bb.Over_Id = bs.Over_Id AND bb.Ball_Id = bs.Ball_Id WHERE bs.Runs_Scored = 0;
SELECT    COUNT(CASE WHEN Win_Margin < 10 THEN Venue_Id ELSE NULL END) /    SUM(COUNT(Venue_Id)) * 100 AS percentage FROM    Match WHERE    Venue_Id IN (     SELECT        Venue_Id     FROM        Venue     WHERE        Venue_Name = 'Dr DY Patil Sports Academy'   );
SELECT AVG(avg_extra_runs) AS avg_noball_runs FROM (   SELECT SUM(er.Extra_Runs) / COUNT(er.Extra_Runs) AS avg_extra_runs   FROM Extra_Runs er   JOIN Extra_Type et ON er.Extra_Type_Id = et.Extra_Id   WHERE et.Extra_Name = 'noballs' ) AS subquery;
SELECT Player_Id FROM Player ORDER BY Bowling_skill DESC LIMIT 5;
SELECT COUNT(*) FROM Player WHERE DOB < '1975-10-16' AND Bowling_skill < 3;
SELECT Player_Name FROM Player WHERE DOB = (SELECT MAX(DOB) FROM Player);
SELECT Player_Id FROM Player_Match pm JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Season s ON m.Season_Id = s.Season_Id WHERE s.Season_Year > 2011 AND s.Season_Year < 2015 AND pm.Player_Id = s.Man_of_the_Series;
SELECT SUM(Runs_Scored)  FROM Batsman_Scored  WHERE Match_Id = 335988 AND Innings_No = 2;
SELECT COUNT(*) FROM Batsman_Scored WHERE Match_Id BETWEEN 335989 AND 336999 AND Over_Id = 1 AND Ball_Id = 1 AND Innings_No = 1 AND Runs_Scored > 3;
SELECT m.Match_Id, m.Match_Date FROM Match m JOIN Venue v ON m.Venue_Id = v.Venue_Id WHERE v.Venue_Name = 'Kingsmead' AND m.Match_Date IN (   SELECT DISTINCT m2.Match_Date   FROM Match m2   JOIN Venue v2 ON m2.Venue_Id = v2.Venue_Id   WHERE v2.Venue_Name = 'Kingsmead'   GROUP BY m2.Match_Date   HAVING COUNT(DISTINCT m2.Match_Date) >= 3   AND MIN(m2.Match_Date) = MAX(m2.Match_Date) - 2 ) ORDER BY m.Match_Date;
SELECT COUNT(*)  FROM Match  WHERE Venue_Id IN (SELECT Venue_Id                     FROM Venue                     WHERE Venue_Name = 'MA Chidambaram Stadium')  AND Match_Date BETWEEN '2009-05-09' AND '2011-08-08';
SELECT V.Venue_Name, C.City_Name FROM Match M JOIN Venue V ON M.Venue_Id = V.Venue_Id JOIN City C ON V.City_Id = C.City_Id WHERE M.Match_Id = '336005';
SELECT Toss_Winner, Toss_Name FROM Match JOIN Toss_Decision ON Match.Toss_Decide = Toss_Decision.Toss_Id WHERE Match_Id = 336011;
SELECT COUNT(*)  FROM Player  WHERE Country_Name = 'South Africa' AND DOB < '1980-04-11';
SELECT Player_Name FROM Player WHERE Bowling_skill = 'Legbreak';
SELECT p.Player_Name, r.Role_Desc, m.Match_Date FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id JOIN Match m ON pm.Match_Id = m.Match_Id WHERE p.DOB = (SELECT MAX(DOB) FROM Player) AND m.Match_Date = (SELECT MIN(m2.Match_Date) FROM Match m2 JOIN Player_Match pm2 ON m2.Match_Id = pm2.Match_Id JOIN Player p2 ON pm2.Player_Id = p2.Player_Id WHERE p2.DOB = (SELECT MAX(DOB) FROM Player));
SELECT COUNT(DISTINCT m.Match_Id) FROM Match m JOIN Player_Match pm ON m.Match_Id = pm.Match_Id JOIN Player p ON pm.Player_Id = p.Player_Id WHERE p.Player_Name = 'V Kohli' AND m.Man_of_the_Match = p.Player_Id;
SELECT COUNT(DISTINCT p.Player_Id) FROM Match m JOIN Player_Match pm ON m.Match_Id = pm.Match_Id JOIN Player p ON pm.Player_Id = p.Player_Id WHERE m.Match_Date BETWEEN '2011%' AND '2012%' AND p.Country_Name = 'Australia' AND m.Man_of_the_Match = p.Player_Id;
SELECT p.Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Season s ON pm.Match_Id = s.Season_Id WHERE s.Man_of_the_Series = p.Player_Name AND s.Orange_Cap = p.Player_Name;
SELECT MIN(Match_Date)  FROM Match  WHERE Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Sunrisers Hyderabad');
SELECT U.Umpire_Name, U.Umpire_Id FROM Umpire U, Country C WHERE U.Umpire_Country = C.Country_Id AND C.Country_Name = 'England';
SELECT    SUM(CASE WHEN bbb.Team_Batting = m.Team_1 THEN bs.Runs_Scored ELSE 0 END) /    COUNT(CASE WHEN bbb.Team_Bowling = m.Team_2 THEN 1 ELSE NULL END) AS Run_Rate FROM    Match m    JOIN Ball_by_Ball bbb ON m.Match_Id = bbb.Match_Id    JOIN Batsman_Scored bs ON bbb.Match_Id = bs.Match_Id AND bbb.Over_Id = bs.Over_Id AND bbb.Ball_Id = bs.Ball_Id  WHERE    m.Match_Id = 335987    AND m.Match_Date = '2008-04-18'    AND bbb.Over_Id <= 17;
SELECT    (COUNT(bs.Runs_Scored) / SUM(bb.Over_Id)) * 6 AS Run_Rate,   p.Player_Name AS Man_of_the_Match FROM    Ball_by_Ball bb   JOIN Batsman_Scored bs ON bb.Match_Id = bs.Match_Id AND bb.Over_Id = bs.Over_Id AND bb.Ball_Id = bs.Ball_Id   JOIN Match m ON bb.Match_Id = m.Match_Id   JOIN Player_Match pm ON bb.Match_Id = pm.Match_Id   JOIN Player p ON pm.Player_Id = p.Player_Id WHERE    bb.Match_Id = 335999    AND bb.Innings_No = (SELECT Innings_No FROM Ball_by_Ball WHERE Match_Id = 335999 AND Toss_Name = 'bat')   AND bb.Over_Id <= 16   AND m.Man_of_the_Match = p.Player_Id GROUP BY    p.Player_Name;
SELECT Team_Id FROM (   SELECT Team_Id, COUNT(Match_Winner) as wins   FROM Match   WHERE Match_Winner IS NOT NULL   GROUP BY Team_Id   ORDER BY wins DESC   LIMIT 1 ) AS subquery;
SELECT EXTRACT(YEAR FROM DOB) AS birth_year FROM Player GROUP BY EXTRACT(YEAR FROM DOB) ORDER BY COUNT(Player_Id) DESC LIMIT 1;
SELECT Match_Date FROM Match WHERE Win_Margin = (SELECT MAX(Win_Margin) FROM Match);
SELECT Season_Year, COUNT(Match_Id) AS Num_Matches FROM Match JOIN Season ON Match.Season_Id = Season.Season_Id GROUP BY Season_Year ORDER BY Num_Matches ASC LIMIT 1;
SELECT COUNT(DISTINCT p.Player_Id) FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id WHERE m.Man_of_the_Match = p.Player_Id GROUP BY p.Player_Id HAVING COUNT(m.Match_Id) >= 5;
SELECT p.Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Season s ON m.Season_Id = s.Season_Id WHERE m.Match_Date = (SELECT MAX(m2.Match_Date) FROM Match m2 WHERE m2.Season_Id = 9) AND m.Man_of_the_Match = p.Player_Id;
SELECT Team_Name FROM Team WHERE Team_Id = (   SELECT Match_Winner   FROM Match   ORDER BY Match_Date   LIMIT 1 )
SELECT COUNT(City_Id)  FROM City  WHERE Country_id IN (     SELECT Country_Id      FROM Country      WHERE Country_Name = 'U.A.E' );
SELECT Umpire_Name FROM Umpire WHERE Umpire_Country = 'England';
SELECT COUNT(DISTINCT p.Player_Id) FROM Player p JOIN Bowling_Style bs ON p.Bowling_skill = bs.Bowling_skill WHERE bs.Bowling_skill = 'Legbreak';
SELECT COUNT(Match_Id) FROM Match WHERE Season_Id = 8 AND (Team_1 = 'Rajasthan Royals' OR Team_2 = 'Rajasthan Royals');
SELECT Country_Name FROM Umpire JOIN Country ON Umpire.Umpire_Country = Country.Country_Id WHERE Umpire_Name = 'TH Wijewardene';
SELECT Venue_Name FROM Venue WHERE City_Id IN (SELECT City_Id                    FROM City                    WHERE City_Name = 'Abu Dhabi');
SELECT Country_Name FROM Player WHERE DOB = (SELECT MAX(DOB) FROM Player);
SELECT p.Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id WHERE m.Season_Id = 1 AND m.Match_Date = (SELECT MIN(Match_Date) FROM Match WHERE Season_Id = 1) AND m.Match_Winner = pm.Team_Id;
SELECT p.Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Season s ON m.Season_Id = s.Season_Id WHERE s.Purple_Cap = p.Player_Id ORDER BY s.Season_Year - p.DOB LIMIT 1;
SELECT v.Venue_Name, c.City_Name, co.Country_Name FROM Match m JOIN Venue v ON m.Venue_Id = v.Venue_Id JOIN City c ON v.City_Id = c.City_Id JOIN Country co ON c.Country_id = co.Country_Id WHERE m.Match_Date = (SELECT MAX(Match_Date) FROM Match);
SELECT Innings_No, COUNT(DISTINCT Over_Id) AS Overs FROM Ball_by_Ball WHERE Match_Id = '336011' GROUP BY Innings_No;
SELECT Ball_Id, Runs_Scored, Innings_No FROM Batsman_Scored WHERE Match_Id = '335988' AND Over_Id = 20;
SELECT COUNT(*)  FROM Match  WHERE Match_Date LIKE '2011%';
SELECT SUBTRACT(2022, SUBSTR(DOB, 1, 4))  FROM Player  WHERE Player_Name = 'Ishan Kishan';
SELECT    COUNT(CASE WHEN Toss_Winner = Match_Winner THEN 1 END) / COUNT(CASE WHEN Match_Date LIKE '2012%' THEN 1 END) AS Win_Rate FROM    Match WHERE    Match_Date LIKE '2012%';
SELECT COUNT(*) FROM Match WHERE Match_Date LIKE '2009%' AND Win_Margin < 10;
SELECT pm1.Player_Id, p1.Player_Name, pm2.Player_Id, p2.Player_Name FROM Player_Match pm1, Player_Match pm2, Player p1, Player p2, Match m WHERE pm1.Match_Id = m.Match_Id AND pm2.Match_Id = m.Match_Id AND pm1.Team_Id = m.Team_1 AND pm2.Team_Id = m.Team_2 AND p1.Player_Id = pm1.Player_Id AND p2.Player_Id = pm2.Player_Id AND SUBSTR(m.Match_Date, 7, 1) = 6 AND SUBSTR(m.Match_Date, 1, 4) = 2014;
SELECT COUNT(DISTINCT M.Match_Id) FROM Player_Match PM JOIN Player P ON PM.Player_Id = P.Player_Id JOIN Match M ON PM.Match_Id = M.Match_Id WHERE P.Player_Name = 'Mohammad Hafeez';
SELECT Player_Name FROM Player WHERE Country_Name = 'South Africa' AND DOB LIKE '1984%';
SELECT    ROUND(     (COUNT(CASE WHEN Match_Winner = Team_Id THEN 1 END) / COUNT(Match_Id)) * 100, 2   ) AS win_percentage FROM    Match   JOIN Team ON Team_Id = Team.Team_Id WHERE    Team_Name = 'Mumbai Indians' AND Match_Date LIKE '2009%';
SELECT    COUNT(CASE WHEN Batting_hand = 'Left-hand bat' THEN 1 END) /    COUNT(CASE WHEN Batting_hand = 'Right-hand bat' THEN 1 END) AS ratio FROM Player;
SELECT MIN(DOB), Country_Name FROM Player GROUP BY Country_Name ORDER BY MIN(DOB) ASC LIMIT 1;
SELECT DISTINCT BS.Bowling_skill FROM Player P JOIN Bowling_Style BS ON P.Bowling_skill = BS.Bowling_Id WHERE P.Country_Name = 'Zimbabwea';
SELECT Umpire_Id, Umpire_Name FROM Umpire WHERE Umpire_Country = 'New Zealand';
SELECT p.Player_Name FROM Player_Match pm JOIN Player p ON pm.Player_Id = p.Player_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id JOIN Team t ON pm.Team_Id = t.Team_Id WHERE r.Role_Desc = 'CaptainKeeper' AND t.Team_Name = 'Rising Pune Supergiants';
SELECT COUNT(*)  FROM Match  WHERE Team_1 = 'Sunrisers Hyderabad' AND Match_Date LIKE '2013%' AND Match_Winner = 'Sunrisers Hyderabad'    OR Team_2 = 'Sunrisers Hyderabad' AND Match_Date LIKE '2013%' AND Match_Winner = 'Sunrisers Hyderabad';
SELECT DISTINCT m.Match_Id FROM Match m JOIN Extra_Runs er ON m.Match_Id = er.Match_Id JOIN Extra_Type et ON er.Extra_Type_Id = et.Extra_Id WHERE et.Extra_Name = 'penalty';
SELECT Team_1, Team_2 FROM Match WHERE Win_Type = 'Tie' AND SUBSTR(Match_Date, 1, 4) = 2015;
SELECT    AVG(COUNT(DISTINCT wt.Player_Out)) AS avg_players_out_per_match,   COUNT(CASE WHEN ot.Out_Name = 'lbw' THEN 1 ELSE NULL END) AS lbw_outs FROM    Wicket_Taken wt   JOIN Out_Type ot ON wt.Kind_Out = ot.Out_Id WHERE    wt.Innings_No = 1 GROUP BY    wt.Match_Id;
SELECT COUNT(*)  FROM Match  WHERE Match_Date LIKE '2008%';
SELECT COUNT(DISTINCT m.Match_Id) FROM Match m JOIN Ball_by_Ball bb ON m.Match_Id = bb.Match_Id GROUP BY m.Match_Id HAVING COUNT(DISTINCT bb.Innings_No) = 2;
SELECT Country_Name FROM City JOIN Country ON City.Country_id = Country.Country_Id WHERE City_Name = 'Rajkot';
SELECT COUNT(*)  FROM Match  WHERE Win_Type = 'wickets';
SELECT Team_Name FROM Team WHERE Team_Id IN (   SELECT Team_1   FROM Match   WHERE Match_Date = '2009-04-30' AND Win_Margin = 38   UNION   SELECT Team_2   FROM Match   WHERE Match_Date = '2009-04-30' AND Win_Margin = 38 )
SELECT Team_Name FROM Team WHERE Team_Id IN (   SELECT Team_Id   FROM Player_Match   WHERE Player_Id IN (     SELECT Player_Id     FROM Player     WHERE Player_Name = 'T Kohli'   ) AND Match_Id = 335989 );
SELECT COUNT(*)  FROM Venue  WHERE City_Id IN (     SELECT City_Id      FROM City      WHERE City_Name = 'Centurion' AND Country_id IN (         SELECT Country_Id          FROM Country          WHERE Country_Name = 'South Africa'     ) );
SELECT COUNT(*) FROM Match WHERE Team_1 = 'Delhi Daredevils' OR Team_2 = 'Delhi Daredevils' AND Match_Date LIKE '%2014%' AND Win_Type IS NOT NULL;
SELECT Match_Id FROM Match WHERE Team_1 = 'Royal Challengers Bangalore' OR Team_2 = 'Royal Challengers Bangalore' ORDER BY Win_Margin DESC LIMIT 1;
SELECT COUNT(*) FROM Player_Match WHERE Player_Id IN (SELECT Player_Id FROM Player WHERE Player_Name = 'K Goel') AND Role_Id = 3;
SELECT AVG(Win_Margin)  FROM Match  WHERE Venue_Id IN (SELECT Venue_Id                     FROM Venue                     WHERE Venue_Name = 'Newlands');
SELECT Team_Name  FROM Team  WHERE Team_Id = (   SELECT Team_1    FROM Match    WHERE Match_Id = 336039    AND Team_1 NOT IN (     SELECT Match_Winner      FROM Match      WHERE Match_Id = 336039   ) ) OR Team_Id = (   SELECT Team_2    FROM Match    WHERE Match_Id = 336039    AND Team_2 NOT IN (     SELECT Match_Winner      FROM Match      WHERE Match_Id = 336039   ) );
SELECT Venue_Name FROM Venue WHERE Venue_Id = (   SELECT Venue_Id   FROM Match   WHERE Match_Id = 829768 );
SELECT t.Team_Name FROM Match m JOIN Team t ON m.Team_2 = t.Team_Id WHERE m.Win_Margin = (SELECT MIN(Win_Margin) FROM Match);
SELECT    (COUNT(CASE WHEN Match_Winner = 7 THEN 1 END) / COUNT(Match_Winner)) * 100 FROM    Match WHERE    Match_Date LIKE '2013%';
SELECT    ABS(SUM(CASE WHEN Role_Id = 1 THEN 1 ELSE 0 END) -         SUM(CASE WHEN Role_Id > 1 THEN 1 ELSE 0 END))  FROM    Player_Match  WHERE    Player_Id = (SELECT Player_Id FROM Player WHERE Player_Name = 'SC Ganguly');
SELECT COUNT(*) FROM Player WHERE Bowling_skill > 2;
SELECT COUNT(*)  FROM Player  WHERE DOB LIKE '1970%';
SELECT COUNT(*) FROM Player p JOIN Bowling_Style bs ON p.Bowling_skill = bs.Bowling_Id WHERE p.DOB LIKE '198%' AND bs.Bowling_skill = 2;
SELECT COUNT(*)  FROM Match  WHERE Match_Date LIKE '2008-04%';
SELECT City_Name  FROM City  WHERE Country_id = 3;
SELECT COUNT(*)  FROM Match  WHERE Match_Date LIKE '2008%';
SELECT City.Country_id FROM City WHERE City.City_Name = 'East London';
SELECT SUBTRACT(2008, strftime('%Y',DOB)) AS Age FROM Player WHERE Player_Name = 'SC Ganguly';
SELECT Player_Name FROM Player WHERE Batting_hand = 'Left-hand bat';
SELECT COUNT(*)  FROM Player  WHERE Country_Name = 'India';
SELECT Player_Name FROM Player WHERE Country_Name = 'England';
SELECT Venue_Name FROM Venue WHERE City_Id = (SELECT City_Id                  FROM City                  WHERE City_Name = 'Bangalore');
SELECT p.Player_Name FROM Player_Match pm JOIN Player p ON pm.Player_Id = p.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Season s ON m.Season_Id = s.Season_Id WHERE s.Season_Year = 2008;
SELECT p.Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Batsman_Scored bs ON pm.Match_Id = bs.Match_Id AND pm.Player_Id = bs.Player_Id WHERE bs.Runs_Scored < 3;
SELECT r.Role_Desc FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id WHERE p.Player_Name = 'SC Ganguly';
SELECT p.Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id WHERE r.Role_Desc = 'Keeper';
SELECT p.Player_Name FROM Player_Match pm JOIN Player p ON pm.Player_Id = p.Player_Id WHERE pm.Team_Id = 1;
SELECT COUNT(DISTINCT p.Player_Id) FROM Player_Match pm JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id WHERE m.Match_Date LIKE '2008%' AND r.Role_Desc = 'Captain';
SELECT DISTINCT t.Team_Name FROM Player_Match pm JOIN Player p ON pm.Player_Id = p.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Season s ON m.Season_Id = s.Season_Id JOIN Team t ON pm.Team_Id = t.Team_Id WHERE p.Player_Name = 'SC Ganguly' AND s.Season_Year = 2008;
SELECT w.Win_Type FROM Match m JOIN Win_By w ON m.Win_Type = w.Win_Id WHERE m.Match_Id = 336000;
SELECT Country_Name FROM Player WHERE Player_Name = 'SB Joshi';
SELECT COUNT(*)  FROM Player  WHERE Bowling_skill = 'Left-arm fast';
SELECT Outcome_Type FROM Match JOIN Outcome ON Match.Outcome_type = Outcome.Outcome_Id WHERE Match_Id = 392195;
SELECT MIN(p.DOB), c.City_Name FROM Player p JOIN City c ON p.Country_Name = (SELECT Country_Name FROM Country WHERE Country_Id = c.Country_id) GROUP BY c.City_Name ORDER BY MIN(p.DOB) LIMIT 1;
SELECT COUNT(*)  FROM Match  WHERE Match_Winner = 'Kings XI Punjab' AND Season_Year = 2008;
SELECT COUNT(DISTINCT m.Season_Id) FROM Match m JOIN Team t ON m.Team_1 = t.Team_Id OR m.Team_2 = t.Team_Id WHERE t.Team_Name = 'Pune Warriors';
SELECT    YEAR(p.DOB) AS birth_year,    r.Role_Desc AS role_played FROM    Player p    JOIN Player_Match pm ON p.Player_Id = pm.Player_Id    JOIN Rolee r ON pm.Role_Id = r.Role_Id  WHERE    p.Player_Name = 'R Dravid';
SELECT COUNT(*)  FROM Season  WHERE Man_of_the_Series IN (   SELECT Player_Id    FROM Player    WHERE Player_Name = 'SC Ganguly' );
SELECT COUNT(*)  FROM Match  WHERE Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Mumbai Indians')  AND Match_Date LIKE '2008%';
SELECT Team_Name FROM Team WHERE Team_Id = (   SELECT Win_Margin   FROM Match   WHERE Match_Id = 335993 AND Win_Type = 'wickets' );
SELECT COUNT(*)  FROM Match  WHERE Win_Type = 'wickets';
SELECT r.Role_Desc FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Season s ON m.Season_Id = s.Season_Id WHERE p.Player_Name = 'W Jaffer' AND s.Season_Year = 2012;
SELECT p.Player_Name FROM Player p WHERE p.Player_Id IN (   SELECT m.Man_of_the_Series   FROM Season s   JOIN Match m ON s.Season_Id = m.Season_Id   WHERE s.Season_Year = 2008   GROUP BY m.Man_of_the_Series   HAVING COUNT(m.Man_of_the_Series) > 5 )
SELECT AVG(CASE WHEN strftime('%Y', P.DOB) BETWEEN '1975' AND '1985' THEN 1.0 ELSE NULL END)  FROM Player P  WHERE P.Country_Name = 'India';
SELECT    (COUNT(CASE WHEN Batting_hand = 'Left-hand bat' THEN 1 ELSE NULL END) / COUNT(Player_Id)) * 100.0  AS    Percentage_Left_Hand_Batting_Style_Players FROM    Player;
SELECT (COUNT(CASE WHEN Win_Type = 1 THEN 1 END) / COUNT(Win_Type)) * 100 AS Percentage_Won_By_Runs FROM Match;
SELECT COUNT(*)  FROM Match  WHERE Win_Margin = 7;
SELECT COUNT(*)  FROM Player  WHERE strftime('%Y', DOB) BETWEEN '1970' AND '1975';
SELECT Match_Winner  FROM Match  WHERE Match_Date = '2009-04-26' AND Win_Margin = 6;
SELECT Team_Name FROM Match JOIN Team ON Match.Match_Winner = Team.Team_Id WHERE Match_Id = 419135;
SELECT Match_Id FROM Match WHERE Venue_Id = (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'St George''s Park') AND Win_Margin = (SELECT MAX(Win_Margin) FROM Match WHERE Venue_Id = (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'St George''s Park'));
SELECT COUNT(*)  FROM Player  WHERE Country_Name = 'Sri Lanka';
SELECT p.Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id WHERE r.Role_Desc = 'captain';
SELECT Venue_Name, Match_Winner FROM Match JOIN Venue ON Match.Venue_Id = Venue.Venue_Id WHERE Match_Id = 392194;
SELECT    (COUNT(CASE WHEN M.Win_Type = 'wickets' THEN 1 END) / COUNT(*)) * 100 AS Percentage_Won_By_Wickets FROM    Match M   JOIN Team T ON M.Team_1 = T.Team_Id OR M.Team_2 = T.Team_Id WHERE    (T.Team_Name = 'Delhi Daredevils')    AND (M.Match_Date LIKE '2009%');
SELECT groupName  FROM torrents  WHERE artist = 'Ron Hunt'  AND groupYear = 1979  AND releaseType ='single'  AND totalSnatched = 239;
SELECT totalSnatched  FROM torrents  WHERE artist = 'blowfly' AND groupYear = 1980 AND releaseType = 'album';
SELECT t.tag FROM tags t JOIN (   SELECT groupId   FROM torrents   WHERE releaseType = 'album'   ORDER BY totalSnatched DESC   LIMIT 1 ) torrent ON t.id = torrent.groupId;
SELECT t.tag, SUM(tr.totalSnatched) as total_downloads FROM tags t JOIN torrents tr ON t.id = tr.id GROUP BY t.tag ORDER BY total_downloads DESC LIMIT 5;
SELECT t.groupName  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE tg.tag = 'funk' AND t.releaseType ='single'  AND t.groupYear = (SELECT MIN(groupYear)                     FROM torrents                     WHERE releaseType ='single'                     AND id IN (SELECT id                                FROM tags                                WHERE tag = 'funk'));
SELECT t.groupName  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE t.releaseType = 'ep' AND tg.tag = 'alternative';
SELECT t.tag FROM tags JOIN (   SELECT groupId, id   FROM (     SELECT groupId, totalSnatched     FROM torrents     WHERE releaseType = 'live album'     ORDER BY totalSnatched     LIMIT 5   ) AS sub ) AS sub2 ON tags.id = sub2.id;
SELECT t.artist, ta.tag FROM torrents t JOIN (   SELECT id, tag   FROM tags ) ta ON t.id = ta.id WHERE t.releaseType ='single' AND t.totalSnatched = (   SELECT MAX(totalSnatched)   FROM torrents   WHERE releaseType ='single' );
SELECT COUNT(DISTINCT t.id) FROM torrents t JOIN tags tg ON t.id = tg.id WHERE tg.tag = '1980s';
SELECT totalSnatched  FROM torrents  WHERE groupName = 'city funk';
SELECT groupName FROM torrents WHERE totalSnatched > 20000;
SELECT t.tag FROM tags t JOIN torrents tor ON t.id = tor.id WHERE tor.groupName ='sugarhill gang';
SELECT COUNT(t.tag) FROM tags t JOIN torrents tor ON t.id = tor.id WHERE tor.groupName = 'city funk';
SELECT t.groupName  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE tg.tag = '1980s';
SELECT t.groupName FROM torrents t JOIN tags tg ON t.id = tg.id WHERE tg.tag = '1980s' ORDER BY t.totalSnatched DESC LIMIT 1;
SELECT COUNT(t.id) FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.artist ='michael jackson' AND tg.tag = 'pop';
SELECT COUNT(*) FROM torrents JOIN tags ON torrents.id = tags.id WHERE groupYear = 2000 AND releaseType = 'album' AND tag = 'pop';
SELECT AVG(t.totalSnatched)  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE tg.tag = '1980s';
SELECT groupName  FROM torrents  ORDER BY totalSnatched DESC  LIMIT 3;
SELECT groupName, artist FROM torrents WHERE totalSnatched = (   SELECT MAX(totalSnatched)   FROM torrents   WHERE groupYear = 2012 AND releaseType ='single' ) AND groupYear = 2012 AND releaseType ='single';
SELECT    releaseType,    COUNT(DISTINCT groupId)  FROM    torrents  WHERE    artist = '50 cent'    AND groupYear BETWEEN 2010 AND 2015    AND releaseType IN ('album','single')  GROUP BY    releaseType;
SELECT MIN(groupYear) - 1991  FROM torrents  WHERE artist = '2Pac' AND releaseType = 'album'  AND groupYear > 1991;
SELECT AVG(totalSnatched)  FROM torrents  WHERE artist = '2Pac' AND releaseType ='single' AND groupYear BETWEEN 2001 AND 2013;
SELECT t.groupName, t.groupYear, ta.tag FROM torrents t JOIN (   SELECT groupId, tag   FROM tags   WHERE id IN (     SELECT id     FROM torrents     WHERE releaseType = 'live album'     ORDER BY totalSnatched DESC     LIMIT 1   ) ) ta ON t.groupId = ta.groupId WHERE t.releaseType = 'live album' ORDER BY t.totalSnatched DESC LIMIT 1;
SELECT artist FROM torrents WHERE groupYear = 2016 AND releaseType = 'bootleg' GROUP BY artist HAVING COUNT(releaseType = 'bootleg') >= 2;
SELECT artist FROM torrents WHERE releaseType ='single' AND groupYear BETWEEN 1980 AND 1982;
SELECT groupName FROM torrents WHERE releaseType ='single' AND totalSnatched >= 20 AND groupId BETWEEN 10 AND 20;
SELECT t.artist FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.groupYear BETWEEN 1980 AND 1982 AND tg.tag = 'disco';
SELECT t.artist FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.totalSnatched <= 100 AND t.groupYear = 1980 AND tg.tag = 'funk';
SELECT artist FROM torrents JOIN tags ON torrents.id = tags.id WHERE tags.tag ='soul' AND releaseType ='single' GROUP BY artist ORDER BY COUNT(releaseType) DESC LIMIT 1;
SELECT artist FROM torrents WHERE id BETWEEN 10 AND 30 AND groupYear = 1980 AND groupId IN (     SELECT groupId     FROM tags     WHERE tag = 'funk' );
SELECT t.groupName FROM torrents t JOIN tags tg ON t.id = tg.id WHERE tg.tag = 'jazz' AND t.groupYear >= 1982 AND t.totalSnatched = (SELECT MAX(totalSnatched)                         FROM torrents                         JOIN tags ON torrents.id = tags.id                         WHERE tags.tag = 'jazz' AND torrents.groupYear >= 1982);
SELECT t.artist, ta.tag FROM torrents t JOIN (   SELECT id, tag   FROM tags ) ta ON t.id = ta.id WHERE t.id = 16;
SELECT artist FROM torrents WHERE id BETWEEN 10 AND 50 AND id IN (     SELECT id     FROM tags     WHERE tag = 'new.york' ) GROUP BY artist ORDER BY totalSnatched DESC LIMIT 1;
SELECT DISTINCT t.artist FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.releaseType IN ('albums','mixtape') AND t.groupYear BETWEEN 1980 AND 1985 AND tg.tag = 'dance';
SELECT COUNT(*) FROM torrents JOIN tags ON torrents.id = tags.id WHERE releaseType ='single' AND groupYear BETWEEN 1979 AND 1981 AND tag ='soul';
SELECT COUNT(*)  FROM torrents  WHERE releaseType ='single' AND groupYear = 1979;
SELECT COUNT(*)  FROM torrents  WHERE artist ='sugar daddy' AND releaseType ='single' AND groupYear = 1980;
SELECT COUNT(DISTINCT t.groupId) FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.releaseType = 'album' AND t.groupYear = 2004 AND tg.tag = 'christmas';
SELECT t.tag FROM tags t JOIN torrents tor ON t.id = tor.id WHERE tor.artist = 'kurtis blow' AND tor.groupYear BETWEEN 2000 AND 2010;
SELECT t.groupName, ta.tag FROM torrents t JOIN tags ta ON t.id = ta.id WHERE t.artist ='millie jackson' AND t.releaseType = 'album' AND t.groupYear = 1980;
SELECT t.groupName  FROM torrents t  JOIN tags tg ON t.id = tg.id  WHERE tg.tag = 'jazz' AND t.groupYear = 2005;
SELECT artist FROM torrents JOIN tags ON torrents.id = tags.id WHERE tags.tag = 'disco' AND groupYear BETWEEN 1980 AND 2000 GROUP BY artist ORDER BY COUNT(id) DESC LIMIT 1;
SELECT t.artist FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.releaseType ='single' AND tg.tag = '1970s';
SELECT    DIVIDE(     COUNT(CASE WHEN t.releaseType = 'album' AND EXISTS (SELECT 1 FROM tags WHERE t.id = tags.id AND tags.tag = 'united.states') THEN 1 END),     COUNT(CASE WHEN t.releaseType = 'album' THEN 1 END)   ) AS percentage FROM torrents t WHERE t.groupYear BETWEEN 1979 AND 1982;
SELECT COUNT(DISTINCT c.CountryCode) FROM Country c WHERE c.OtherGroups = 'HIPC' AND c.LendingCategory = 'IDA';
SELECT ShortName FROM Country WHERE LendingCategory = 'IDA' AND ExternalDebtReportingStatus = 'Estimate';
SELECT cn.Description FROM CountryNotes cn JOIN Country c ON cn.CountryCode = c.CountryCode JOIN Series s ON cn.SeriesCode = s.SeriesCode WHERE c.ShortName = 'Aruba' AND s.SeriesCode = 'SM.POP.TOTL';
SELECT c.ShortName, cn.Description FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE c.Region = 'Latin America & Caribbean' AND cn.Seriescode = 'SM.POP.TOTL';
SELECT COUNT(DISTINCT c.CountryCode) FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.CountryCode JOIN Series s ON cn.SeriesCode = s.SeriesCode WHERE s.SeriesCode = 'SM.POP.TOTL' AND cn.Description IS NOT NULL AND c.IncomeGroup = 'Low income';
SELECT cn.Description FROM CountryNotes cn JOIN Country c ON cn.CountryCode = c.CountryCode WHERE cn.SeriesCode = 'SM.POP.TOTL' AND c.LendingCategory = 'IDA';
SELECT COUNT(DISTINCT c.CountryCode) FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE c.IncomeGroup = 'Low income' AND c.LendingCategory = 'IDA' AND cn.Seriescode = 'SM.POP.TOTL';
SELECT COUNT(DISTINCT c.CountryCode) FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.CountryCode WHERE c.IncomeGroup = 'High'  AND c.CurrencyUnit = 'Euro'  AND cn.SeriesCode = 'SP.DYN.AMRT.FE'  AND cn.Description IS NOT NULL;
SELECT c.LongName FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.CountryCode JOIN Series s ON cn.SeriesCode = s.SeriesCode WHERE s.SeriesCode = 'SM.POP.TOTL' AND cn.Description = 'Estimates are derived from data on foreign-born population.';
SELECT f.Description FROM Footnotes f JOIN Country c ON f.CountryCode = c.CountryCode WHERE f.SeriesCode = 'AG.LND.FRST.K2'  AND f.Year = 1990  AND c.ShortName = 'Aruba';
SELECT DISTINCT Year FROM Footnotes WHERE Countrycode = (SELECT CountryCode FROM Country WHERE ShortName = 'Aruba')  AND Seriescode = 'AG.LND.FRST.K2';
SELECT c.CountryCode, c.ShortName FROM Country c JOIN Footnotes f ON c.CountryCode = f.CountryCode WHERE f.SeriesCode = 'DC.DAC.AUSL.CD' AND f.Year = 2002 AND f.Description = 'Data are classified as official aid';
SELECT COUNT(*)  FROM Footnotes  WHERE Countrycode = (SELECT CountryCode                       FROM Country                       WHERE ShortName = 'Aruba')  AND Year = 2002;
SELECT MAX(consecutive_years)  FROM (   SELECT CountryCode, SeriesCode,           (CASE WHEN @year = Year AND @series = SeriesCode AND @country = CountryCode THEN @count := @count + 1 ELSE @count := 1 END) AS consecutive_years,          (@year := Year) AS year,           (@series := SeriesCode) AS series,           (@country := CountryCode) AS country   FROM Footnotes, (SELECT @count := 0, @year := 0, @series := '', @country := '') AS init   WHERE CountryCode = (SELECT CountryCode FROM Country WHERE ShortName = 'Aruba')      AND SeriesCode = 'BX.KLT.DINV.CD.WD'   ORDER BY Year ) AS subquery;
SELECT AVG(value) / SUM(CASE WHEN IndicatorName LIKE 'adolescent fertility rate%' THEN 1 ELSE 0 END) FROM Indicators WHERE CountryCode = (   SELECT CountryCode   FROM Country   WHERE Alpha2Code = '1A' );
SELECT SpecialNotes FROM Country WHERE CountryCode = (   SELECT CountryCode   FROM Indicators   WHERE IndicatorName LIKE 'adolescent fertility rate%'   GROUP BY CountryCode   ORDER BY SUM(Value) / SUM(CASE WHEN IndicatorName LIKE 'adolescent fertility rate%' THEN 1 ELSE 0 END) DESC   LIMIT 1 )
SELECT ShortName, Alpha2Code FROM Country WHERE Region = 'East Asia & Pacific' AND IncomeGroup = 'High income: nonOECD';
SELECT LongName, Alpha2Code FROM Country WHERE LatestTradeData = 2013 AND LatestWaterWithdrawalData = 2013;
SELECT AVG(Value)  FROM Indicators  WHERE IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)'  AND CountryName = 'Algeria'  AND Year BETWEEN 1975 AND 1980;
SELECT s.IndicatorName, s.AggregationMethod FROM Series s WHERE s.Topic = 'Economic Policy & Debt: Balance of payments: Capital & financial account';
SELECT s.SeriesCode, c.Alpha2Code FROM Series s JOIN Country c ON s.SeriesCode IN (   SELECT SeriesCode   FROM Series   WHERE Topic = 'Environment: Emissions' AND LicenseType = 'Restricted' ) WHERE s.Topic = 'Environment: Emissions' AND s.LicenseType = 'Restricted';
SELECT COUNT(DISTINCT c.CountryCode) FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE c.Region = 'Middle East & North Africa' AND i.IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)' AND i.Year = 1970 AND i.Value > 600;
SELECT    c.ShortName,    AVG(i.Value) AS avg_co2_emissions,    MAX(i.Value) AS max_co2_emissions,    MAX(i.Year) AS max_co2_emissions_year FROM    Indicators i JOIN    Country c ON i.CountryCode = c.CountryCode WHERE    c.Region IN ('Latin America', 'Caribbean')    AND i.IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)'    AND i.Year > 1965 GROUP BY    c.ShortName ORDER BY    avg_co2_emissions DESC LIMIT 3;
SELECT sn.Description FROM SeriesNotes sn JOIN Series s ON sn.SeriesCode = s.SeriesCode WHERE s.SeriesCode = 'SP.DYN.TO65.MA.ZS' AND s.Topic = 'Health: Mortality' AND sn.Year = 'YR1967';
SELECT f.Description FROM Footnotes f JOIN Country c ON f.CountryCode = c.CountryCode WHERE c.ShortName = 'Albania' AND f.Year = 1981;
SELECT f.Description FROM Footnotes f JOIN Country c ON f.CountryCode = c.CountryCode WHERE f.SeriesCode = 'SH.DTH.IMRT' AND f.Year = 1984 AND c.ShortName = 'The Bahamas';
SELECT c.ShortName  FROM Country c  JOIN Indicators i ON c.CountryCode = i.CountryCode  WHERE i.IndicatorName = 'Net bilateral aid flows from DAC donors, Sweden (current US$)'  AND i.Year = 1970  AND i.Value > 570000;
SELECT c.Wb2Code, c.LendingCategory FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.CountryCode WHERE cn.Description = 'Data source : Human Mortality Database by University of California, Berkeley, and Max Planck Institute for Demographic Research.';
SELECT s.Topic, s.SeriesCode, s.LicenseType FROM Indicators i JOIN Series s ON i.IndicatorName = s.IndicatorName WHERE i.CountryName = 'Haiti' AND i.Year = 1961 AND i.Value = 3000000;
SELECT COUNT(DISTINCT c.CountryCode) FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorName = 'Adjusted net national income per capita (constant 2005 US$)' AND i.Value > 1000 AND c.ExternalDebtReportingStatus = 'Preliminary';
SELECT CountryName FROM Indicators WHERE IndicatorName = 'Fertility rate, total (births per woman)' AND Year = 1979 AND Value BETWEEN 4 AND 5;
SELECT c.ShortName, c.TableName, c.SourceOfMostRecentIncomeAndExpenditureData FROM Country c WHERE c.Region = 'South Asia' AND c.IncomeGroup = 'Low income';
SELECT cn.Description FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode JOIN Series s ON i.IndicatorCode = s.SeriesCode JOIN CountryNotes cn ON c.CountryCode = cn.CountryCode AND s.SeriesCode = cn.SeriesCode WHERE c.Region = 'Latin America & Caribbean' AND s.IndicatorName = 'Out-of-school children of primary school age, both sexes (number)';
SELECT cn.Description FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode JOIN Series s ON i.IndicatorCode = s.SeriesCode JOIN CountryNotes cn ON c.CountryCode = cn.CountryCode AND s.SeriesCode = cn.SeriesCode WHERE c.Region = 'South American' AND i.Year = '2002' AND s.IndicatorName = 'Net migration';
SELECT cn.Description FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode JOIN Series s ON i.IndicatorCode = s.SeriesCode JOIN CountryNotes cn ON c.CountryCode = cn.CountryCode AND s.SeriesCode = cn.SeriesCode WHERE c.Region = 'North America' AND s.IndicatorName = 'Out-of-school children of primary school age, both sexes (number)';
SELECT c.ShortName, i.Value FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE c.LatestTradeData = 2013 AND i.IndicatorName = 'GDP growth (annual %)' AND i.Year = 2014 ORDER BY i.Value ASC;
SELECT c.ShortName, i.Value, sn.Description FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode JOIN Series s ON i.IndicatorCode = s.SeriesCode JOIN SeriesNotes sn ON s.SeriesCode = sn.SeriesCode WHERE i.Year = 2005 AND s.IndicatorName = 'Out-of-pocket health expenditure (% of private expenditure on health)' AND c.Region = 'Europe' ORDER BY i.Value DESC LIMIT 10;
SELECT COUNT(DISTINCT c.CountryCode) FROM Country c WHERE c.Region = 'South Asia' AND c.IncomeGroup = 'Low income';
SELECT ShortName FROM Country WHERE LatestTradeData > 2010;
SELECT      DIVIDE(         COUNT(CountryCode) FILTER (WHERE SystemOfTrade = 'Special trade system' AND Region = 'Sub-Saharan Africa'),         COUNT(CountryCode) FILTER (WHERE Region = 'Sub-Saharan Africa')     ) AS percentage FROM Country;
SELECT AVG(avg_value)  FROM (   SELECT CountryCode, SUM(Value) / COUNT(CountryCode) AS avg_value   FROM Indicators    INNER JOIN Country ON Indicators.CountryCode = Country.CountryCode    WHERE Region = 'European & Central Asian'    AND IndicatorName = 'Arms imports (SIPRI trend indicator values)'    GROUP BY CountryCode ) AS subquery;
SELECT c.ShortName, i.Value FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'CO2 emissions (kt)' AND c.IncomeGroup = 'Upper middle income' ORDER BY i.Value ASC LIMIT 1;
SELECT MIN(i.Value) FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'International migrant stock, total' AND c.OtherGroups LIKE '%HIPC%';
SELECT i.IndicatorName FROM Indicators i JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE s.Topic = 'Education: Inputs' AND i.Year = 'YR2000';
SELECT COUNT(DISTINCT i.IndicatorCode) FROM Indicators i JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE s.AggregationMethod = 'Sum' AND s.Periodicity = 'Annual' AND i.Year IN ('YR2001', 'YR2002', 'YR2003');
SELECT DISTINCT s.SeriesCode FROM Series s JOIN Indicators i ON s.SeriesCode = i.IndicatorCode WHERE i.Year = 2005 AND s.Source LIKE '%International Monetary Fund, Balance of Payments Statistics Yearbook and data files%';
SELECT    DIVIDE(     COUNT(DISTINCT c.CountryCode)  ,      (SELECT COUNT(DISTINCT CountryCode) FROM Country WHERE Region = 'South Asia')   ) * 100 AS percentage FROM    Country c   JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE    i.IndicatorName = 'Life expectancy at birth, female (years)'   AND i.Value > 50   AND c.Region = 'South Asia';
SELECT CountryName, MAX(Value) AS HighestDeathRate FROM Indicators WHERE IndicatorName = 'Death rate, crude (per 1,000 people)' AND Year BETWEEN '1960' AND '1965' GROUP BY CountryName ORDER BY HighestDeathRate DESC LIMIT 1;
SELECT i.IndicatorName FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE c.ShortName = 'Arab World' AND i.Year = '1960' AND i.Value > 50;
SELECT CountryName, Value FROM Indicators WHERE IndicatorName = 'Merchandise imports by the reporting economy (current US$)' ORDER BY Value DESC LIMIT 1;
SELECT DISTINCT i.IndicatorName FROM Indicators i JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE i.Year = '1965' AND i.Value > 100 AND s.Periodicity = 'Annual';
SELECT DISTINCT i.IndicatorName FROM Indicators i JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE i.Year BETWEEN '1968' AND '1970' AND i.Value < 100 AND s.LicenseType = 'Open';
SELECT c.ShortName, i.IndicatorName FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE s.Topic = 'Private Sector & Trade: Exports' ORDER BY i.Value DESC LIMIT 1;
SELECT i.IndicatorName, MIN(i.Value) AS LowestValue FROM Indicators i JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE s.AggregationMethod = 'Weighted average' GROUP BY i.IndicatorName;
SELECT i.IndicatorName FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE c.ShortName = 'Sudan' AND i.Year = 1961 AND i.IndicatorCode IN (   SELECT s.SeriesCode   FROM Series s   WHERE s.Periodicity = 'Annual' );
SELECT CountryName FROM Indicators WHERE IndicatorName = 'Population: Structure' AND Year BETWEEN '1960' AND '1965' GROUP BY CountryName ORDER BY MIN(Value) ASC LIMIT 1;
SELECT    (COUNT(DISTINCT c.CountryCode) /     (SELECT COUNT(DISTINCT CountryCode) FROM Country WHERE IncomeGroup = 'Upper middle income')) * 100 FROM    Country c   JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE    i.IndicatorName = 'CO2 emissions from liquid fuel consumption (% of total)'   AND i.Value < 80   AND c.IncomeGroup = 'Upper middle income';
SELECT IndicatorCode FROM Indicators WHERE IndicatorName = 'Rural population';
SELECT TableName FROM Country WHERE SystemOfNationalAccounts = '2008 System of National Accounts methodology';
SELECT DISTINCT s.SeriesCode FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE c.CurrencyUnit = 'Euro';
SELECT c.LongName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorCode = 'DT.DOD.DSTC.CD';
SELECT DISTINCT s.SeriesCode FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE c.CurrencyUnit = 'Hong Kong dollar';
SELECT c.TableName  FROM Country c  JOIN Indicators i ON c.CountryCode = i.CountryCode  WHERE i.IndicatorCode = 'SP.DYN.TO65.MA.ZS';
SELECT LongName FROM Country WHERE IncomeGroup = 'Low income';
SELECT s.SeriesCode, c.CountryCode FROM Series s JOIN Country c ON s.SeriesCode = cn.SeriesCode JOIN CountryNotes cn ON c.CountryCode = cn.CountryCode WHERE c.Region = 'Latin American & Carribbean' AND c.IncomeGroup = 'Low income';
SELECT DISTINCT s.SeriesCode, c.ShortName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE c.CurrencyUnit = 'Australian dollar' AND c.IncomeGroup = 'Low middle income';
SELECT c.LongName, c.Region FROM Country c WHERE c.IncomeGroup = 'Upper middle income' AND c.NationalAccountsBaseYear = (   SELECT MIN(NationalAccountsBaseYear)   FROM Country   WHERE IncomeGroup = 'Upper middle income' );
SELECT c.CountryCode, c.ShortName FROM Country c WHERE c.IncomeGroup = 'High Income Group' AND c.CurrencyUnit = 'Euro';
SELECT c.TableName, c.CurrencyUnit FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorCode = 'FP.CPI.TOTL';
SELECT DISTINCT IndicatorName, IndicatorCode FROM Indicators JOIN Country ON Indicators.CountryCode = Country.CountryCode WHERE IncomeGroup = 'High income: non-OECD';
SELECT DISTINCT s.SeriesCode, c.IncomeGroup, c.ShortName FROM Country c JOIN Series s ON c.CountryCode = s.SeriesCode WHERE c.CurrencyUnit = 'Pound Sterling' AND c.IncomeGroup = 'High income';
SELECT CountryCode, ShortName FROM Country LIMIT 10;
SELECT Alpha2Code FROM Country WHERE ShortName LIKE 'A%';
SELECT TableName  FROM Country  WHERE CurrencyUnit = 'Euro';
SELECT LongName FROM Country WHERE SpecialNotes IS NULL;
SELECT ShortName, LongName  FROM Country  WHERE Region = 'Asia' AND IncomeGroup = 'High income';
SELECT LongName FROM Country WHERE NationalAccountsBaseYear < 1980;
SELECT c.CountryCode FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE c.IncomeGroup = 'Low income' AND i.IndicatorCode = 'DT.DOD.DECT.CD';
SELECT c.TableName  FROM Country c  JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode  WHERE cn.Description = 'Covers mainland Tanzania only';
SELECT sn.Description, sn.SeriesCode FROM SeriesNotes sn JOIN Country c ON c.ShortName = 'Benin' JOIN Indicators i ON i.CountryCode = c.CountryCode AND i.Year = 'YR2005' WHERE sn.SeriesCode = i.IndicatorCode AND sn.Year = i.Year;
SELECT f.Description FROM Footnotes f JOIN Country c ON f.Countrycode = c.CountryCode WHERE c.ShortName = 'Finland' AND f.Year = 'YR2000';
SELECT DISTINCT i.Year, c.TableName FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'Air transport, passengers carried';
SELECT c.LongName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorName IS NOT NULL AND i.Year = '1980';
SELECT c.CurrencyUnit, i.IndicatorCode FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE c.LongName = 'Malaysia' AND i.Year = '1970';
SELECT c.CountryCode, c.Region FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.CountryCode IN (     SELECT CountryCode     FROM Indicators     ORDER BY Value DESC     LIMIT 5 );
SELECT c.CurrencyUnit FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE cn.Description = 'Sources: UN Energy Statistics (2014)';
SELECT    COUNT(DISTINCT f.CountryCode) AS NumOfFootnotes,   c.TableName FROM    Footnotes f   JOIN Country c ON f.CountryCode = c.CountryCode WHERE    f.Year = 'YR1980' GROUP BY    c.TableName;
SELECT s.SeriesCode, c.Wb2Code FROM Series s JOIN CountryNotes cn ON s.SeriesCode = cn.SeriesCode JOIN Country c ON cn.CountryCode = c.CountryCode WHERE cn.Description = 'Data sources : Eurostat';
SELECT CountryName, Value FROM Indicators WHERE IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND CountryCode IN (   SELECT CountryCode   FROM Country   WHERE IncomeGroup = 'Low income' ) ORDER BY Value ASC LIMIT 1;
SELECT SUM(Value)  FROM Indicators  WHERE IndicatorName = 'Urban population'  AND Year = 1960  AND CountryCode IN (     SELECT CountryCode      FROM Country      WHERE IncomeGroup = 'Middle income' );
SELECT c.ShortName, c.CurrencyUnit FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'Adjusted net national income (annual % growth)' AND i.Year = 1980 AND i.Value = (   SELECT MAX(Value)   FROM Indicators   WHERE IndicatorName = 'Adjusted net national income (annual % growth)'   AND Year = 1980 );
SELECT COUNT(DISTINCT CountryCode)  FROM Country  WHERE SystemOfNationalAccounts = '1993 System of National Accounts methodology';
SELECT ShortName FROM Country WHERE VitalRegistrationComplete = 'Yes';
SELECT CONCAT(c.ShortName,'', c.LongName) AS CountryName FROM Country c WHERE c.LatestPopulationCensus BETWEEN '2010' AND '2012' AND c.VitalRegistrationComplete = 'Yes';
SELECT CountryName FROM Indicators WHERE IndicatorName = 'CO2 emissions (metric tons per capita)' AND Year = 1960 ORDER BY Value DESC LIMIT 1;
SELECT    MAX(CASE WHEN IndicatorName = 'Number of infant deaths' AND Year = 1971 THEN Value END) /    MIN(CASE WHEN IndicatorName = 'Number of infant deaths' AND Year = 1971 THEN Value END) AS Ratio,   (SELECT CountryName     FROM Indicators     WHERE IndicatorName = 'Number of infant deaths' AND Year = 1971     ORDER BY Value DESC LIMIT 1) AS Highest_Country,   (SELECT CountryName     FROM Indicators     WHERE IndicatorName = 'Number of infant deaths' AND Year = 1971     ORDER BY Value ASC LIMIT 1) AS Lowest_Country FROM Indicators;
SELECT ShortName FROM Country WHERE CountryCode IN (   SELECT CountryCode   FROM Indicators   WHERE IndicatorCode = 'SP.DYN.CBRT.IN' );
SELECT cn.ShortName FROM CountryNotes cn JOIN Country c ON cn.CountryCode = c.CountryCode WHERE cn.Description = 'Data are classified as official aid.';
SELECT cn.LongName FROM Country cn JOIN CountryNotes ctn ON cn.CountryCode = ctn.Countrycode WHERE ctn.Description = 'Estimates are based on regression.';
SELECT c.LongName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE c.Region = 'East Asia & Pacific'  AND i.IndicatorName = 'Urban population'  AND i.Year = 1970  AND i.Value > 2000000;
SELECT CountryName, Value FROM Indicators WHERE Year = '1960' AND IndicatorName = 'Population, total' AND CountryCode IN (     SELECT CountryCode     FROM Country     WHERE IncomeGroup = 'Upper middle income' ) ORDER BY Value DESC LIMIT 1;
SELECT COUNT(DISTINCT CountryCode)  FROM Country  WHERE SystemOfNationalAccounts = '1968 System of National Accounts methodology';
SELECT c.ShortName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE c.IncomeGroup = 'Upper middle income' AND c.Region = 'East Asia & Pacific' AND s.Topic = 'Social Protection & Labor: Migration';
SELECT c.LongName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE s.Topic = 'Poverty: Shared Prosperity';
SELECT TableName  FROM Country  WHERE LatestTradeData = '2013' AND CountryCode IN (     SELECT CountryCode      FROM Indicators      WHERE IndicatorCode = 'SP.DYN.CDRT.IN' );
SELECT LongName FROM Country WHERE Region = 'Sub-Saharan Africa' AND CountryCode IN (     SELECT CountryCode     FROM Indicators     WHERE IndicatorCode = 'SP.DYN.AMRT.FE' );
SELECT CurrencyUnit, COUNT(DISTINCT ShortName) AS CountOfCountries FROM Country GROUP BY CurrencyUnit HAVING COUNT(DISTINCT ShortName) > 3;
SELECT LongName FROM Country WHERE Region = 'South Asia' AND IncomeGroup = 'Low income';
SELECT LongName FROM Country WHERE SystemOfTrade = 'Special trade system' LIMIT 2;
SELECT CountryName, Value FROM Indicators WHERE IndicatorName = 'CO2 emissions from transport (% of total fuel combustion)' ORDER BY Value DESC LIMIT 1;
SELECT CountryName FROM Indicators WHERE IndicatorName = 'Arable land (% of land area)' AND Value = (SELECT MIN(Value)               FROM Indicators               WHERE IndicatorName = 'Arable land (% of land area)');
SELECT DISTINCT Topic FROM Series WHERE LicenseType = 'Restricted';
SELECT CountryCode FROM Country WHERE IncomeGroup = 'Upper middle income' AND ExternalDebtReportingStatus = 'Preliminary';
SELECT    (COUNT(CASE WHEN ExternalDebtReportingStatus = 'Actual' THEN CountryCode ELSE NULL END) / COUNT(CountryCode)) * 100 AS percentage FROM    Country WHERE    Region = 'Middle East & North Africa';
SELECT    GovernmentAccountingConcept,    COUNT(DISTINCT CountryCode) AS NumCountries FROM    Country WHERE    ExternalDebtReportingStatus = 'Actual' GROUP BY    GovernmentAccountingConcept ORDER BY    NumCountries DESC;
SELECT COUNT(DISTINCT CountryCode)  FROM Country  WHERE Region = 'East Asia & Pacific' AND ExternalDebtReportingStatus = 'Estimate';
SELECT    (COUNT(CASE WHEN IncomeGroup = 'Low income' THEN CountryCode END) / COUNT(CountryCode)) * 100 AS proportion FROM    Country WHERE    Region = 'Sub-Saharan Africa';
SELECT MAX(Value)  FROM Indicators  WHERE Year BETWEEN '1961' AND '1980'  AND IndicatorName = 'Agricultural land (% of land area)'  AND CountryName = 'Republic of Benin';
SELECT c.LongName FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.CountryCode WHERE cn.SeriesCode IN (   SELECT s.SeriesCode   FROM Series s   JOIN SeriesNotes sn ON s.SeriesCode = sn.SeriesCode   WHERE sn.Description = 'UN Energy Statistics (2014)' ) LIMIT 3;
SELECT Value FROM Indicators WHERE IndicatorName = 'Deposit interest rate (%)'    AND CountryCode = (SELECT CountryCode                       FROM Country                       WHERE LongName = 'Commonwealth of Australia')    AND Year = 1979;
SELECT s.SeriesCode, s.LongDefinition FROM Country c JOIN Series s ON c.TableName = s.Topic WHERE c.ShortName = 'Germany';
SELECT s.Topic FROM Series s JOIN Country c ON s.SeriesCode = (   SELECT SeriesCode   FROM CountryNotes   WHERE Countrycode = (     SELECT CountryCode     FROM Country     WHERE ShortName = 'Austria'   ) )
SELECT Topic, Description FROM Series JOIN SeriesNotes ON Series.SeriesCode = SeriesNotes.SeriesCode WHERE Series.SeriesCode = 'SP.DYN.AMRT.MA';
SELECT COUNT(DISTINCT c.LongName) AS count_of_countries FROM Country c JOIN Footnotes f ON c.CountryCode = f.CountryCode WHERE f.Description = 'Not specified';  SELECT c.LongName FROM Country c JOIN Footnotes f ON c.CountryCode = f.CountryCode WHERE f.Description = 'Not specified' LIMIT 3;
SELECT c.ShortName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE c.ExternalDebtReportingStatus = 'Actual' AND i.IndicatorName = 'Land under cereal production' AND i.Year = 1980 AND i.Value = 3018500;
SELECT    (COUNT(DISTINCT c.ShortName) /     (SELECT COUNT(DISTINCT ShortName) FROM Country WHERE Region = 'Latin America & Caribbean')) * 100 FROM    Country c   JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE    c.Region = 'Latin America & Caribbean'    AND i.IndicatorName = 'Agricultural land (% of land area)'    AND i.Year = '1961'    AND i.Value > 50;
SELECT LongName FROM Country WHERE Region = 'South Asia' AND IncomeGroup = 'Low income';
SELECT i.IndicatorCode FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode JOIN Series s ON i.IndicatorName = s.IndicatorName WHERE c.CountryName = 'Brazil' AND s.IndicatorName = 'Mobile cellular subscriptions';
SELECT LongName FROM Country WHERE Region = 'Europe & Central Asia' AND CurrencyUnit = 'Danish krone';
SELECT i.CountryName, i.Value FROM Indicators i WHERE i.IndicatorName = 'Rural population (% of total population)' AND i.Value = (SELECT MAX(Value)                 FROM Indicators                 WHERE IndicatorName = 'Rural population (% of total population)');
SELECT LongName FROM Country WHERE LatestPopulationCensus = '2011';
SELECT Value FROM Indicators WHERE CountryName = 'Italy' AND Year = 1968 AND IndicatorName = 'Agricultural land (sq. km)';
SELECT i.Year, i.Value FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'Out-of-school children of primary school age, female (number)' AND c.Region = 'Sub-Saharan Africa' ORDER BY i.Value DESC LIMIT 1;
SELECT s.SeriesCode FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE c.LongName = 'Islamic State of Afghanistan' AND i.IndicatorName = 'Number of infant deaths' AND i.Year = 1965;
SELECT    COUNT(DISTINCT c.CountryCode) AS count_of_countries,   (SELECT c.ShortName     FROM Country c     JOIN Indicators i ON c.CountryCode = i.CountryCode     WHERE c.SystemOfNationalAccounts = '1968 System of National Accounts methodology'     AND c.Region = 'Middle East & North Africa'     AND i.IndicatorName = 'CO2 emissions from solid fuel consumption (kt)'     ORDER BY i.Value DESC     LIMIT 1) AS country_with_highest_co2_emissions FROM Country c  WHERE c.SystemOfNationalAccounts = '1968 System of National Accounts methodology'  AND c.Region = 'Middle East & North Africa';
SELECT i.IndicatorCode FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE c.LongName = 'Republic of Albania' AND i.Year = 1960;
SELECT LendingCategory  FROM Country  WHERE CountryCode IN (   SELECT CountryCode    FROM Indicators    WHERE IndicatorName = 'Cereal production (metric tons)'    AND Year = '1966'    AND Value > 6140000 );
SELECT c.Region, c.ShortName FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'Population in largest city' AND i.Year BETWEEN '1960' AND '1979' GROUP BY c.Region, c.ShortName HAVING COUNT(DISTINCT i.Year) = 19 ORDER BY MAX(i.Value) DESC LIMIT 1;
SELECT    SUM(value) AS total_co2_emission,    MAX(value) AS max_co2_emission,    (SELECT Year FROM Indicators WHERE IndicatorName LIKE 'CO2%' AND value = (SELECT MAX(value) FROM Indicators WHERE IndicatorName LIKE 'CO2%' AND Year BETWEEN 1975 AND 1980)) AS highest_co2_emission_year FROM    Indicators  WHERE    IndicatorName LIKE 'CO2%' AND Year BETWEEN 1975 AND 1980;
SELECT c.ShortName, i.Value, c.IncomeGroup FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'Land area (sq. km)' AND i.Year BETWEEN 1961 AND 1979 GROUP BY c.ShortName, c.IncomeGroup, i.Value HAVING COUNT(DISTINCT i.Year) = 19 ORDER BY i.Value ASC LIMIT 1;
SELECT    AVG(i.Value) AS avg_passengers,   c.SystemOfTrade FROM    Indicators i   JOIN Country c ON i.CountryCode = c.CountryCode WHERE    i.IndicatorName = 'Air transport, passengers carried'   AND i.CountryName = 'Bulgaria'   AND i.Year BETWEEN 1970 AND 1980 GROUP BY    c.SystemOfTrade;
SELECT LatestHouseholdSurvey FROM Country WHERE ShortName = 'Angola';
SELECT COUNT(DISTINCT CountryCode)  FROM Country  WHERE Region = 'North America' AND VitalRegistrationComplete = 'Yes';
SELECT DISTINCT i.Year FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE c.Alpha2Code = '1A' AND i.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)';
SELECT c.LongName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE i.Year = 1960 AND i.Value = 3000000 AND s.IndicatorName = 'Arms exports (SIPRI trend indicator values)';
SELECT c.Alpha2Code FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorName = 'Rural population' AND i.Year = '1960';
SELECT c.SpecialNotes FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND i.Year = '1960' AND i.Value = (   SELECT MAX(Value)   FROM Indicators   WHERE IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)'   AND Year = '1960' );
SELECT    SUM(CASE WHEN Year = 1961 THEN Value ELSE NULL END) -    SUM(CASE WHEN Year = 1960 THEN Value ELSE NULL END) AS Increase FROM    Indicators WHERE    CountryCode = (SELECT Alpha2Code FROM Country WHERE Alpha2Code = '1A')    AND IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%';
SELECT cn.Description FROM CountryNotes cn JOIN Country c ON cn.CountryCode = c.CountryCode JOIN Series s ON cn.SeriesCode = s.SeriesCode WHERE c.ShortName = 'Australia' AND s.SeriesCode = 'SP.ADO.TFRT';
SELECT cn.Description FROM CountryNotes cn JOIN Country c ON cn.CountryCode = c.CountryCode JOIN Series s ON cn.SeriesCode = s.SeriesCode JOIN Indicators i ON s.SeriesCode = i.IndicatorCode WHERE c.ShortName = 'Aruba' AND s.Topic = 'Environment: Energy production & use';
SELECT DISTINCT c.ShortName FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE cn.Seriescode = 'BX.KLT.DINV.CD.WD';
SELECT c.Region FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorName = 'Inflation, consumer prices (annual %)'   AND EXISTS (     SELECT 1     FROM CountryNotes cn     WHERE cn.CountryCode = c.CountryCode       AND cn.SeriesCode = (         SELECT s.SeriesCode         FROM Series s         WHERE s.IndicatorName = 'Inflation, consumer prices (annual %)'       )   );
SELECT COUNT(DISTINCT cn.CountryCode) FROM CountryNotes cn JOIN Indicators i ON cn.CountryCode = i.CountryCode JOIN Series s ON cn.SeriesCode = s.SeriesCode WHERE s.IndicatorName = 'Stocks traded, turnover ratio of domestic shares (%)';
SELECT s.AggregationMethod FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE i.Year = 1960 AND i.Value = 133 AND c.Region = 'Arab World';
SELECT Value FROM Indicators WHERE IndicatorCode = (   SELECT SeriesCode   FROM Series   WHERE LongDefinition = "Adolescent fertility rate is the number of births per 1,000 women ages 15-19." ) AND CountryName = 'Arab World' AND Year = 1960;
SELECT    ((SUM(CASE WHEN Year = 1961 THEN Value ELSE NULL END) -     SUM(CASE WHEN Year = 1960 THEN Value ELSE NULL END)) /     SUM(CASE WHEN Year = 1960 THEN Value ELSE NULL END)) * 100 AS PercentageIncrease FROM    Indicators WHERE    CountryCode = (SELECT CountryCode FROM Country WHERE Alpha2Code = '1A') AND   IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%';
SELECT AVG(Value) FROM Indicators WHERE IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND CountryCode = (   SELECT CountryCode   FROM Country   WHERE Alpha2Code = '1A' );
SELECT DISTINCT d.directorid FROM movies2directors d JOIN movies m ON d.movieid = m.movieid JOIN u2base u ON m.movieid = u.movieid WHERE u.rating > 4;
SELECT COUNT(*)  FROM users  WHERE u_gender = 'M' AND userid IN (     SELECT userid      FROM u2base      WHERE rating = 5 );
SELECT genre FROM movies2directors WHERE movieid IN (   SELECT movieid   FROM movies2actors   WHERE actorid = 851 AND cast_num = 1 );
SELECT COUNT(DISTINCT m.movieid) FROM movies m JOIN u2base u ON m.movieid = u.movieid WHERE m.country = 'USA' AND u.rating < 3;
SELECT COUNT(*) FROM movies WHERE country = 'France' AND movieid IN (     SELECT movieid     FROM movies2directors     WHERE genre = 'drama' );
SELECT occupation, AVG(CASE WHEN occupation LIKE '%[^0-9]%' THEN 0 ELSE CAST(occupation AS INT) END) AS avg_occupation FROM users WHERE userid IN (   SELECT userid   FROM u2base   WHERE rating <= 2 );
SELECT m.movieid, AVG(u2.rating) AS avg_rating FROM movielens.movies m JOIN movielens.u2base u2 ON m.movieid = u2.movieid WHERE m.country = 'USA' GROUP BY m.movieid ORDER BY avg_rating DESC LIMIT 10;
SELECT AVG(cast_num)  FROM movies2actors  WHERE movieid IN (SELECT movieid FROM movies WHERE country='USA');
SELECT m.movieid, m.year, m.country FROM movies m WHERE m.isEnglish = 'F' GROUP BY m.movieid, m.year, m.country ORDER BY COUNT(DISTINCT u.userid) DESC LIMIT 5;
SELECT COUNT(DISTINCT a.actorid) FROM actors a JOIN (   SELECT actorid   FROM actors   ORDER BY a_quality DESC   LIMIT 10 ) AS best_actors ON a.actorid = best_actors.actorid JOIN movies2actors ma ON a.actorid = ma.actorid JOIN u2base u ON ma.movieid = u.movieid WHERE u.rating = 5;
SELECT AVG(rating)  FROM u2base  WHERE movieid IN (   SELECT movieid    FROM movies    WHERE country = 'France'    AND year = 4 );
SELECT COUNT(*) FROM movies WHERE country = 'UK' AND runningtime < 120 AND movieid IN (     SELECT movieid     FROM u2base     GROUP BY movieid     ORDER BY COUNT(*) DESC     LIMIT 10 );
SELECT u.userid FROM users u JOIN u2base ub ON u.userid = ub.userid JOIN movies m ON ub.movieid = m.movieid WHERE u.u_gender = 'M' AND m.country = 'France' AND m.runningtime = 2 AND ub.rating < 3;
SELECT COUNT(DISTINCT a.actorid) FROM actors a JOIN movies2actors ma ON a.actorid = ma.actorid JOIN u2base u ON ma.movieid = u.movieid WHERE a.a_quality = 0 AND u.rating > 3;
SELECT userid FROM u2base WHERE rating = 5 GROUP BY userid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ma.actorid, md.genre FROM movies2actors ma JOIN movies2directors md ON ma.movieid = md.movieid WHERE md.directorid = 22397;
SELECT a.actorid, d.directorid FROM actors a JOIN movies2actors ma ON a.actorid = ma.actorid JOIN movies2directors md ON ma.movieid = md.movieid JOIN directors d ON md.directorid = d.directorid WHERE md.genre = 'action';
SELECT COUNT(DISTINCT a.actorid) FROM actors a JOIN movies2actors ma ON a.actorid = ma.actorid JOIN movies m ON ma.movieid = m.movieid WHERE a.a_gender = 'F' AND m.year = 2004;
SELECT a.actorid FROM actors a JOIN movies2actors ma ON a.actorid = ma.actorid JOIN movies m ON ma.movieid = m.movieid WHERE a.a_quality = 3 AND m.isEnglish = 'T' AND m.country = 'USA';
SELECT m.movieid FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN directors d ON md.directorid = d.directorid WHERE m.runningtime = 3 AND d.avg_revenue = 1;
SELECT m2d.genre FROM movies m JOIN movies2directors m2d ON m.movieid = m2d.movieid WHERE m.country = 'UK';
SELECT genre, COUNT(*) as count FROM u2base JOIN users ON u2base.userid = users.userid JOIN movies ON u2base.movieid = movies.movieid JOIN movies2directors ON movies.movieid = movies2directors.movieid WHERE age = 18 GROUP BY genre ORDER BY count DESC LIMIT 1;
SELECT DISTINCT a.actorid FROM actors a JOIN movies2actors ma ON a.actorid = ma.actorid JOIN u2base ub ON ma.movieid = ub.movieid JOIN users u ON ub.userid = u.userid WHERE u.occupation = 5 GROUP BY a.actorid ORDER BY COUNT(DISTINCT ub.userid) DESC;
SELECT DISTINCT age FROM users WHERE userid IN (   SELECT userid   FROM u2base   WHERE rating = 3 );
SELECT country, COUNT(*) as count FROM movies2directors JOIN movies ON movies2directors.movieid = movies.movieid JOIN directors ON movies2directors.directorid = directors.directorid WHERE genre = 'Action' GROUP BY country ORDER BY count DESC;
SELECT m.movieid FROM movies m JOIN movies2actors ma ON m.movieid = ma.movieid JOIN (   SELECT actorid   FROM (     SELECT a.actorid, AVG(u2.rating) as avg_rating     FROM actors a     JOIN movies2actors ma ON a.actorid = ma.actorid     JOIN u2base u2 ON ma.movieid = u2.movieid     GROUP BY a.actorid     ORDER BY avg_rating DESC     LIMIT 5   ) top_actors ) top_5_actors ON ma.actorid = top_5_actors.actorid;
SELECT m.movieid, m.year, m.country FROM movies m JOIN movies2directors md ON m.movieid = md.movieid WHERE m.isEnglish = 'F' AND m.country = 'UK' AND md.genre = 'adventure' LIMIT 5;
SELECT    ROUND(     (       SELECT COUNT(DISTINCT u.userid)        FROM users u        JOIN u2base ub ON u.userid = ub.userid        WHERE u.u_gender = 'F' AND ub.rating = 2     ) /      (       SELECT COUNT(DISTINCT userid)        FROM users     ) * 100, 2   ) AS percentage_of_female_audiences;
SELECT    (SUM(CASE WHEN u_gender = 'F' THEN 1 ELSE 0 END) -     SUM(CASE WHEN u_gender = 'M' THEN 1 ELSE 0 END))  AS difference FROM users u JOIN u2base ub ON u.userid = ub.userid JOIN movies m ON ub.movieid = m.movieid JOIN movies2directors md ON m.movieid = md.movieid WHERE md.genre = 'horror';
SELECT m2d.genre FROM movies m JOIN movies2directors m2d ON m.movieid = m2d.movieid WHERE m.year = (SELECT MAX(year) FROM movies WHERE isEnglish = 'T') AND m.isEnglish = 'T';
SELECT COUNT(*) FROM movies WHERE country = 'USA' AND genre = 'action' AND isEnglish = 'F';
SELECT COUNT(*)  FROM u2base  WHERE userid IN (   SELECT userid    FROM users    WHERE u_gender = 'M' AND age <= 18 ) AND rating = (   SELECT MAX(rating)    FROM u2base );
SELECT movieid FROM u2base WHERE userid IN (   SELECT userid   FROM users   WHERE u_gender = 'F' ) GROUP BY movieid ORDER BY COUNT(DISTINCT userid) DESC LIMIT 1;
SELECT COUNT(DISTINCT m.movieid) FROM movies m JOIN u2base u ON m.movieid = u.movieid WHERE m.country = 'UK' AND u.rating = (   SELECT MAX(rating)   FROM u2base ) AND m.movieid IN (   SELECT movieid   FROM movies2directors   GROUP BY movieid   HAVING COUNT(DISTINCT directorid) > 1 );
SELECT m.movieid FROM movies m JOIN u2base u ON m.movieid = u.movieid WHERE m.year = (SELECT MAX(year) FROM movies) AND u.rating = 1;
SELECT COUNT(DISTINCT m.movieid) FROM movies m JOIN u2base u ON m.movieid = u.movieid WHERE m.isEnglish = 'T' AND m.year = 1 AND u.rating = 1;
SELECT COUNT(DISTINCT u.userid) FROM users u JOIN u2base ub ON u.userid = ub.userid JOIN movies m ON ub.movieid = m.movieid WHERE u.u_gender = 'F' AND m.country = 'France';
SELECT COUNT(DISTINCT d.directorid) FROM directors d JOIN movies2directors md ON d.directorid = md.directorid WHERE d.d_quality = 4 AND md.genre = 'action';
SELECT m2d.genre FROM movies2directors m2d JOIN (   SELECT directorid   FROM directors   ORDER BY avg_revenue DESC   LIMIT 1 ) d ON m2d.directorid = d.directorid;
SELECT COUNT(DISTINCT m.movieid) FROM movies m JOIN movies2actors ma ON m.movieid = ma.movieid JOIN actors a ON ma.actorid = a.actorid WHERE m.isEnglish = 'T' AND a.a_gender = 'M' AND a.a_quality = (SELECT MAX(a_quality) FROM actors WHERE a_gender = 'M');
SELECT country FROM movies WHERE movieid IN (   SELECT movieid   FROM movies2actors   WHERE actorid IN (     SELECT actorid     FROM actors     WHERE a_gender = 'F' AND a_quality = 0   ) ) GROUP BY country;
SELECT AVG(rating)  FROM u2base  WHERE movieid IN (   SELECT m.movieid    FROM movies m    JOIN movies2directors md ON m.movieid = md.movieid    WHERE m.country = 'USA' AND md.genre = 'action' );
SELECT COUNT(*) FROM movies WHERE movieid IN (   SELECT movieid   FROM movies2directors   WHERE directorid IN (     SELECT directorid     FROM directors     WHERE d_quality = 5   ) ) AND movieid IN (   SELECT movieid   FROM u2base   GROUP BY movieid   HAVING AVG(rating) > 3.5 );
SELECT m.movieid, AVG(u.rating) as avg_rating FROM u2base u JOIN movies m ON u.movieid = m.movieid JOIN movies2directors md ON m.movieid = md.movieid WHERE md.genre = 'adventure' GROUP BY m.movieid ORDER BY avg_rating DESC LIMIT 1;
SELECT COUNT(*)  FROM users  WHERE userid IN (SELECT userid                    FROM u2base                    WHERE movieid = '2462959')  AND u_gender = 'F';
SELECT movieid FROM movies WHERE runningtime = 0 AND movieid IN (   SELECT movieid   FROM u2base   GROUP BY movieid   ORDER BY COUNT(DISTINCT rating) DESC   LIMIT 1 );
SELECT m2a.actorid, u2b.rating FROM movies2actors m2a JOIN u2base u2b ON m2a.movieid = u2b.movieid WHERE m2a.movieid = 1722327;
SELECT d.directorid, COUNT(m2d.movieid) AS num_films FROM directors d JOIN movies2directors m2d ON d.directorid = m2d.directorid WHERE d.d_quality = 5 GROUP BY d.directorid ORDER BY num_films DESC;
SELECT COUNT(*) FROM u2base JOIN movies ON u2base.movieid = movies.movieid JOIN movies2directors ON movies.movieid = movies2directors.movieid WHERE rating = 3 AND genre = 'drama';
SELECT COUNT(DISTINCT m.movieid) FROM u2base u JOIN users us ON u.userid = us.userid JOIN movies m ON u.movieid = m.movieid WHERE u.rating = 5 AND us.age BETWEEN 25 AND 35;
SELECT m.movieid, m.year, m.country, u.rating FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN u2base u ON m.movieid = u.movieid WHERE md.genre = 'horror' AND u.rating = 1;
SELECT d.directorid FROM directors d JOIN movies2directors md ON d.directorid = md.directorid JOIN movies m ON md.movieid = m.movieid WHERE m.country = 'France';
SELECT u.userid, u.age FROM users u JOIN u2base b ON u.userid = b.userid WHERE b.movieid = 1695219;
SELECT genre, COUNT(*) as num_films FROM movies2directors JOIN movies ON movies2directors.movieid = movies.movieid WHERE isEnglish = 'F' GROUP BY genre ORDER BY num_films DESC LIMIT 1;
SELECT ma.actorid, d.directorid FROM movies m JOIN movies2actors ma ON m.movieid = ma.movieid JOIN movies2directors md ON m.movieid = md.movieid JOIN directors d ON md.directorid = d.directorid WHERE m.movieid = 1949144;
SELECT    COUNT(DISTINCT a.actorid) AS total_actors,   COUNT(CASE WHEN u2b.rating >= 3 THEN a.actorid ELSE NULL END) AS rated_actors,   COUNT(CASE WHEN u2b.rating >= 3 THEN a.actorid ELSE NULL END) / COUNT(DISTINCT a.actorid) * 100 AS percentage FROM    actors a   JOIN movies2actors m2a ON a.actorid = m2a.actorid   JOIN movies m ON m2a.movieid = m.movieid   JOIN u2base u2b ON m.movieid = u2b.movieid WHERE    m.country = 'UK';
SELECT    (COUNT(CASE WHEN d.avg_revenue > d.d_quality THEN 1 ELSE NULL END) /     COUNT(*)) * 100 AS proportion FROM    directors d   JOIN movies2directors md ON d.directorid = md.directorid WHERE    md.genre = 'action';
SELECT ma.actorid FROM movies2actors ma JOIN movies m ON ma.movieid = m.movieid WHERE m.year = 4;
SELECT ma.actorid FROM movies m JOIN movies2actors ma ON m.movieid = ma.movieid WHERE m.isEnglish = 'T' AND m.runningtime = 2;
SELECT a.actorid FROM actors a JOIN movies2actors ma ON a.actorid = ma.actorid JOIN movies m ON ma.movieid = m.movieid WHERE m.country = 'France' GROUP BY a.actorid HAVING COUNT(DISTINCT m.movieid) >= 2;
SELECT COUNT(*) FROM movies WHERE country = 'USA' AND movieid IN (     SELECT movieid     FROM movies2actors     GROUP BY movieid     HAVING COUNT(*) > 1 );
SELECT m.movieid FROM movies m JOIN movies2actors ma ON m.movieid = ma.movieid WHERE m.year = 1 AND ma.cast_num = 0;
SELECT COUNT(DISTINCT a.actorid) FROM actors a JOIN movies2actors ma ON a.actorid = ma.actorid JOIN movies m ON ma.movieid = m.movieid WHERE m.country IN ('US', 'UK') GROUP BY a.actorid HAVING COUNT(DISTINCT m.country) = 2;
SELECT COUNT(DISTINCT d.directorid) FROM directors d JOIN movies2directors md ON d.directorid = md.directorid WHERE d.avg_revenue = 4 AND md.genre IN ('action', 'adventure');
SELECT d.directorid FROM directors d JOIN movies2directors md ON d.directorid = md.directorid GROUP BY d.directorid HAVING d.d_quality >= 3 AND COUNT(DISTINCT md.genre) >= 2;
SELECT COUNT(*) FROM movies WHERE country = 'USA' AND genre = 'comedy';
SELECT COUNT(*) FROM movies WHERE genre IN ('drama', 'action') AND year = (SELECT MAX(year) FROM movies);
SELECT movieid FROM movies WHERE isEnglish = 'English' AND genre = 'Horror' AND runningtime >= 2;
SELECT    (COUNT(CASE WHEN u2.rating = 1 THEN 1 END) / COUNT(DISTINCT m.movieid)) * 100 AS negative_critical_reception FROM    u2base u2   JOIN movies m ON u2.movieid = m.movieid WHERE    m.country = 'America'
SELECT COUNT(DISTINCT m.movieid) FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN u2base u ON m.movieid = u.movieid WHERE md.genre = 'comedy' AND u.rating = 1;
SELECT    d.avg_revenue,    COUNT(u2.movieid) AS num_one_ratings FROM    movies2directors m2d    JOIN directors d ON m2d.directorid = d.directorid    JOIN u2base u2 ON m2d.movieid = u2.movieid    JOIN movies m ON m2d.movieid = m.movieid  WHERE    u2.rating = 1  GROUP BY    d.avg_revenue  ORDER BY    num_one_ratings DESC  LIMIT 1;
SELECT COUNT(*)  FROM movies  WHERE country = 'France'  AND movieid IN (   SELECT movieid    FROM u2base    GROUP BY movieid    ORDER BY AVG(rating) DESC    LIMIT 1 );
SELECT m.movieid, COUNT(u2.movieid) as count FROM u2base u2 JOIN users u ON u2.userid = u.userid JOIN movies m ON u2.movieid = m.movieid WHERE u.age = 25 GROUP BY m.movieid ORDER BY count DESC LIMIT 1;
SELECT COUNT(DISTINCT u.userid) FROM users u JOIN u2base ub ON u.userid = ub.userid JOIN movies m ON ub.movieid = m.movieid WHERE u.age = 35 AND m.country = 'UK';
SELECT u.userid, u.age FROM users u JOIN u2base b ON u.userid = b.userid WHERE b.movieid = 2409051 AND b.rating = 2;
SELECT movieid FROM movies WHERE year = 1 AND movieid IN (     SELECT movieid     FROM u2base     GROUP BY movieid     ORDER BY COUNT(rating) DESC     LIMIT 1 );
SELECT m.movieid, m.country, COUNT(u2.movieid) AS num_ratings FROM movies m JOIN u2base u2 ON m.movieid = u2.movieid WHERE m.country = 'France' GROUP BY m.movieid, m.country ORDER BY num_ratings LIMIT 1;
SELECT COUNT(DISTINCT a.actorid) FROM actors a JOIN movies2actors ma ON a.actorid = ma.actorid JOIN movies m ON ma.movieid = m.movieid WHERE a.a_gender = 'F' AND m.country IN ('France', 'USA');
SELECT COUNT(DISTINCT a.actorid) FROM u2base u JOIN movies m ON u.movieid = m.movieid JOIN movies2actors ma ON m.movieid = ma.movieid JOIN actors a ON ma.actorid = a.actorid WHERE u.rating = 5;
SELECT m.movieid, AVG(u.rating) AS avg_rating FROM u2base u JOIN movies m ON u.movieid = m.movieid JOIN movies2directors md ON m.movieid = md.movieid WHERE md.genre = 'Crime' GROUP BY m.movieid ORDER BY avg_rating ASC LIMIT 1;
SELECT    COUNT(CASE WHEN a.a_gender = 'M' THEN 1 END) / COUNT(CASE WHEN a.a_gender = 'F' THEN 1 END) AS ratio FROM    movies m   JOIN movies2actors ma ON m.movieid = ma.movieid   JOIN actors a ON ma.actorid = a.actorid WHERE    m.country = 'UK';
SELECT COUNT(*) FROM users JOIN u2base ON users.userid = u2base.userid WHERE users.age = 35 AND users.u_gender = 'F' AND u2base.movieid = 1711133 AND u2base.rating = 3;
SELECT COUNT(DISTINCT u.userid) FROM u2base u JOIN movies m ON u.movieid = m.movieid WHERE u.rating = 1 AND m.country = 'UK' AND m.runningtime = 2 AND m.year = 2;
SELECT DISTINCT d.directorid FROM directors d JOIN movies2directors md ON d.directorid = md.directorid WHERE d.avg_revenue = 2 AND d.d_quality = 3 AND md.genre!= 'comedy';
SELECT    (COUNT(DISTINCT a.actorid) / (SELECT COUNT(*) FROM actors WHERE a_gender = 'F')) * 100 FROM    actors a    JOIN movies2actors ma ON a.actorid = ma.actorid  WHERE    a.a_gender = 'F'    AND a.a_quality = 2    AND ma.movieid = 1672580    AND ma.cast_num = 2;
SELECT    CONCAT(     (SELECT COUNT(*) FROM actors WHERE a_gender = 'M' AND a_quality = 0),     ':',     (SELECT COUNT(*) FROM actors WHERE a_gender = 'F' AND a_quality = 0)   ) AS ratio FROM    dual;
SELECT actorid, COUNT(DISTINCT movieid) as num_films FROM movies2actors GROUP BY actorid ORDER BY num_films DESC LIMIT 1;
SELECT genre, COUNT(*) as num_movies FROM movies2directors GROUP BY genre ORDER BY num_movies DESC LIMIT 1;
SELECT genre, COUNT(*) as count FROM movies2directors WHERE directorid IN (   SELECT directorid   FROM directors   WHERE d_quality = 0 ) GROUP BY genre ORDER BY count DESC;
SELECT m.movieid FROM movies m JOIN u2base u ON m.movieid = u.movieid WHERE m.country = 'USA' AND m.isEnglish = 'F' GROUP BY m.movieid ORDER BY AVG(u.rating) ASC LIMIT 1;
SELECT AVG(rating)  FROM u2base  WHERE movieid IN (   SELECT movieid    FROM movies2directors    WHERE directorid IN (     SELECT directorid      FROM directors      WHERE d_quality = 4 AND avg_revenue = 4   ) );
SELECT m.movieid, AVG(u2.rating) AS avg_rating FROM users u JOIN u2base u2 ON u.userid = u2.userid JOIN movies m ON u2.movieid = m.movieid WHERE u.u_gender = 'F' AND u.occupation = 3 GROUP BY m.movieid ORDER BY avg_rating DESC;
SELECT    COUNT(DISTINCT a.actorid) AS num_female_actors,    m.country,    m.runningtime FROM    movies m    JOIN movies2actors ma ON m.movieid = ma.movieid    JOIN actors a ON ma.actorid = a.actorid  WHERE    m.movieid = 2312852    AND a.a_gender = 'F';
SELECT COUNT(*) FROM movies JOIN movies2directors ON movies.movieid = movies2directors.movieid JOIN directors ON movies2directors.directorid = directors.directorid WHERE genre = 'horror' AND d_quality = 0;
SELECT DISTINCT m2d.genre FROM movies JOIN movies2directors m2d ON movies.movieid = m2d.movieid WHERE isEnglish = 'T' AND country!= 'USA' AND runningtime <= 120;
SELECT m.movieid, m.year FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN u2base u ON m.movieid = u.movieid JOIN users us ON u.userid = us.userid WHERE m.isEnglish = 1 AND m.country = 'UK' AND md.genre = 'comedy' AND m.runningtime = 3 AND us.age BETWEEN 45 AND 50 GROUP BY m.movieid, m.year HAVING MAX(u.rating);
SELECT    ([count(case when isEnglish = 'T' then 1 end) - count(case when isEnglish = 'F' then 1 end)] / count(*)) * 100 FROM    movies WHERE    country!= 'USA' AND year = 1993 AND genre = 'crime';
SELECT    d.directorid, d.genre,   SUM(CASE WHEN a.a_gender = 'M' THEN 1 ELSE 0 END) AS male_actors,   SUM(CASE WHEN a.a_gender = 'F' THEN 1 ELSE 0 END) AS female_actors,   ROUND((SUM(CASE WHEN a.a_quality = 5 THEN 1 ELSE 0 END) /           SUM(CASE WHEN a.a_quality = 0 THEN 1 ELSE 0 END)) * 100, 2) AS proportion FROM    movies2actors ma   JOIN actors a ON ma.actorid = a.actorid   JOIN movies2directors md ON ma.movieid = md.movieid   JOIN directors d ON md.directorid = d.directorid WHERE    ma.movieid = 1684910 GROUP BY    d.directorid, d.genre;
SELECT p.ProductName FROM product p JOIN central_superstore cs ON p.ProductID = cs.ProductID WHERE cs.OrderID = 'CA-2011-112326';
SELECT MAX(SHIPMENT_TIME) AS LONGEST_SHIPMENT_TIME FROM (   SELECT (julianday("Ship Date") - julianday("Order Date")) + 1 AS SHIPMENT_TIME   FROM (     SELECT "Order Date", "Ship Date"     FROM central_superstore     WHERE "Customer ID" IN (       SELECT "Customer ID"       FROM people       WHERE "Customer Name" = 'Aimee Bixby'     )     UNION ALL     SELECT "Order Date", "Ship Date"     FROM east_superstore     WHERE "Customer ID" IN (       SELECT "Customer ID"       FROM people       WHERE "Customer Name" = 'Aimee Bixby'     )     UNION ALL     SELECT "Order Date", "Ship Date"     FROM south_superstore     WHERE "Customer ID" IN (       SELECT "Customer ID"       FROM people       WHERE "Customer Name" = 'Aimee Bixby'     )     UNION ALL     SELECT "Order Date", "Ship Date"     FROM west_superstore     WHERE "Customer ID" IN (       SELECT "Customer ID"       FROM people       WHERE "Customer Name" = 'Aimee Bixby'     )   ) );
SELECT COUNT(*) FROM (   SELECT 'central' AS store, * FROM central_superstore   UNION ALL   SELECT 'east' AS store, * FROM east_superstore   UNION ALL   SELECT'south' AS store, * FROM south_superstore   UNION ALL   SELECT 'west' AS store, * FROM west_superstore ) AS all_orders JOIN people ON all_orders.Customer ID = people.Customer ID WHERE people.Customer Name = 'Aimee Bixby' AND all_orders.Ship Mode = 'Standard Class';
SELECT COUNT(DISTINCT o.Order_ID)  FROM      (SELECT * FROM central_superstore       UNION ALL       SELECT * FROM east_superstore       UNION ALL       SELECT * FROM south_superstore       UNION ALL       SELECT * FROM west_superstore) o  JOIN people p ON o.Customer_ID = p.Customer_ID  WHERE p.Customer_Name = 'Aimee Bixby';
SELECT o.Order_ID FROM (   SELECT Order_ID   FROM (     SELECT c.Order_ID, p.Product_ID     FROM central_superstore c     JOIN people p ON c.Customer_ID = p.Customer_ID     WHERE p.Customer_Name = 'Aimee Bixby'     UNION ALL     SELECT e.Order_ID, p.Product_ID     FROM east_superstore e     JOIN people p ON e.Customer_ID = p.Customer_ID     WHERE p.Customer_Name = 'Aimee Bixby'     UNION ALL     SELECT s.Order_ID, p.Product_ID     FROM south_superstore s     JOIN people p ON s.Customer_ID = p.Customer_ID     WHERE p.Customer_Name = 'Aimee Bixby'     UNION ALL     SELECT w.Order_ID, p.Product_ID     FROM west_superstore w     JOIN people p ON w.Customer_ID = p.Customer_ID     WHERE p.Customer_Name = 'Aimee Bixby'   ) AS orders   GROUP BY Order_ID   HAVING COUNT(DISTINCT Product_ID) > 3 ) AS result;
SELECT COUNT(DISTINCT o.Order_ID) FROM (   SELECT * FROM central_superstore   UNION ALL   SELECT * FROM east_superstore   UNION ALL   SELECT * FROM south_superstore   UNION ALL   SELECT * FROM west_superstore ) o JOIN people p ON o.Customer_ID = p.Customer_ID JOIN product pr ON o.Product_ID = pr.Product_ID WHERE p.Customer_Name = 'Aimee Bixby' AND pr.Category = 'Furniture';
SELECT p.Product_Name FROM (   SELECT * FROM central_superstore   UNION ALL   SELECT * FROM east_superstore   UNION ALL   SELECT * FROM south_superstore   UNION ALL   SELECT * FROM west_superstore ) AS orders JOIN people AS pe ON orders.Customer_ID = pe.Customer_ID JOIN product AS p ON orders.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Aimee Bixby' AND strftime('%Y', orders.Order_Date) = '2016';
SELECT SUM(Quantity)  FROM central_superstore  WHERE Product ID IN (   SELECT Product ID    FROM product    WHERE Product Name = 'Telescoping Adjustable Floor Lamp' );
SELECT p.Customer Name FROM people p JOIN (   SELECT Customer ID   FROM (     SELECT * FROM central_superstore     UNION ALL     SELECT * FROM east_superstore     UNION ALL     SELECT * FROM south_superstore     UNION ALL     SELECT * FROM west_superstore   ) AS all_superstores   JOIN product pr ON all_superstores.Product ID = pr.Product ID   WHERE pr.Product Name = 'Telescoping Adjustable Floor Lamp' ) AS orders ON p.Customer ID = orders.Customer ID;
SELECT COUNT(DISTINCT c.Customer ID) FROM people c JOIN (   SELECT Customer ID   FROM central_superstore   WHERE Product ID IN (     SELECT Product ID     FROM product     WHERE Product Name = 'Telescoping Adjustable Floor Lamp'   )   UNION ALL   SELECT Customer ID   FROM east_superstore   WHERE Product ID IN (     SELECT Product ID     FROM product     WHERE Product Name = 'Telescoping Adjustable Floor Lamp'   )   UNION ALL   SELECT Customer ID   FROM south_superstore   WHERE Product ID IN (     SELECT Product ID     FROM product     WHERE Product Name = 'Telescoping Adjustable Floor Lamp'   )   UNION ALL   SELECT Customer ID   FROM west_superstore   WHERE Product ID IN (     SELECT Product ID     FROM product     WHERE Product Name = 'Telescoping Adjustable Floor Lamp'   ) ) o ON c.Customer ID = o.Customer ID WHERE c.Segment = 'Consumer';
SELECT Quantity FROM (   SELECT * FROM central_superstore   UNION ALL   SELECT * FROM east_superstore   UNION ALL   SELECT * FROM south_superstore   UNION ALL   SELECT * FROM west_superstore ) AS all_superstores JOIN product ON all_superstores.Product_ID = product.Product_ID JOIN people ON all_superstores.Customer_ID = people.Customer_ID WHERE product.Product_Name = 'Xerox 1952'  AND people.Customer_Name = 'Aimee Bixby'  AND all_superstores.Order_Date = DATE('2014-09-10');
SELECT COUNT(*) FROM (   SELECT *   FROM central_superstore   UNION ALL   SELECT *   FROM east_superstore   UNION ALL   SELECT *   FROM south_superstore   UNION ALL   SELECT *   FROM west_superstore ) AS all_superstores JOIN people ON all_superstores.Customer ID = people.Customer ID JOIN product ON all_superstores.Product ID = product.Product ID WHERE people.Customer Name = 'Aimee Bixby' AND product.Product Name = 'Xerox 1952';
SELECT (Sales / (1 - Discount)) AS Original_Price FROM (   SELECT Sales, Discount   FROM (     SELECT Sales, Discount     FROM central_superstore     UNION ALL     SELECT Sales, Discount     FROM east_superstore     UNION ALL     SELECT Sales, Discount     FROM south_superstore     UNION ALL     SELECT Sales, Discount     FROM west_superstore   ) AS All_Superstores   JOIN product ON All_Superstores.Product_ID = product.Product_ID   JOIN people ON All_Superstores.Customer_ID = people.Customer_ID   WHERE product.Product_Name = 'Xerox 1952'   AND people.Customer_Name = 'Aimee Bixby'   AND All_Superstores.Order_Date = DATE('2014-09-10') ) AS Result;
SELECT (p.Sales * (1 - p.Discount) * p.Quantity) - p.Profit AS total_cost FROM (   SELECT *    FROM central_superstore    UNION ALL    SELECT *    FROM east_superstore    UNION ALL    SELECT *    FROM south_superstore    UNION ALL    SELECT *    FROM west_superstore ) p JOIN product pr ON p.Product_ID = pr.Product_ID JOIN people pe ON p.Customer_ID = pe.Customer_ID WHERE pr.Product_Name = 'Xerox 1952'    AND pe.Customer_Name = 'Aimee Bixby'    AND p.Order_Date = '2014-09-10';
SELECT COUNT(*) FROM east_superstore es JOIN product p ON es.Product ID = p.Product ID WHERE strftime('%Y', es.Order Date) = '2013' AND p.Sub-Category = 'Art';
SELECT p.Customer Name FROM (   SELECT Customer ID,           MAX((Sales / (1 - Discount)) * Quantity - Profit) AS Max_Cost   FROM (     SELECT Customer ID,             Sales,             Discount,             Quantity,             Profit     FROM central_superstore     UNION ALL     SELECT Customer ID,             Sales,             Discount,             Quantity,             Profit     FROM east_superstore     UNION ALL     SELECT Customer ID,             Sales,             Discount,             Quantity,             Profit     FROM south_superstore     UNION ALL     SELECT Customer ID,             Sales,             Discount,             Quantity,             Profit     FROM west_superstore   ) AS Orders   GROUP BY Customer ID   ORDER BY Max_Cost DESC   LIMIT 1 ) AS Max_Cost_Customer JOIN people p ON p.Customer ID = Max_Cost_Customer.Customer ID;
SELECT p.Product_Name FROM product p JOIN (   SELECT Product_ID, MAX(Sales / (1 - Discount)) as max_price   FROM (     SELECT Product_ID, Sales, Discount     FROM central_superstore     UNION ALL     SELECT Product_ID, Sales, Discount     FROM east_superstore     UNION ALL     SELECT Product_ID, Sales, Discount     FROM south_superstore     UNION ALL     SELECT Product_ID, Sales, Discount     FROM west_superstore   ) as all_superstores   GROUP BY Product_ID ) as max_price_product ON p.Product_ID = max_price_product.Product_ID;
SELECT p.ProductName FROM (   SELECT ProductID   FROM (     SELECT CustomerID, MAX(OrderDate) AS MaxOrderDate     FROM central_superstore     UNION ALL     SELECT CustomerID, MAX(OrderDate) AS MaxOrderDate     FROM east_superstore     UNION ALL     SELECT CustomerID, MAX(OrderDate) AS MaxOrderDate     FROM south_superstore     UNION ALL     SELECT CustomerID, MAX(OrderDate) AS MaxOrderDate     FROM west_superstore   ) AS RecentOrders   JOIN (     SELECT CustomerID, OrderID, OrderDate, ProductID     FROM central_superstore     UNION ALL     SELECT CustomerID, OrderID, OrderDate, ProductID     FROM east_superstore     UNION ALL     SELECT CustomerID, OrderID, OrderDate, ProductID     FROM south_superstore     UNION ALL     SELECT CustomerID, OrderID, OrderDate, ProductID     FROM west_superstore   ) AS AllOrders ON RecentOrders.CustomerID = AllOrders.CustomerID AND RecentOrders.MaxOrderDate = AllOrders.OrderDate   JOIN people ON AllOrders.CustomerID = people.CustomerID ) AS RecentProduct JOIN product p ON RecentProduct.ProductID = p.ProductID WHERE people.CustomerName = 'Darren Powers';
SELECT SUM(Quantity)  FROM (   SELECT Quantity    FROM central_superstore    WHERE Product ID IN (     SELECT Product ID      FROM product      WHERE Product Name = 'Advantus plastic paper clips'   )   UNION ALL   SELECT Quantity    FROM east_superstore    WHERE Product ID IN (     SELECT Product ID      FROM product      WHERE Product Name = 'Advantus plastic paper clips'   )   UNION ALL   SELECT Quantity    FROM south_superstore    WHERE Product ID IN (     SELECT Product ID      FROM product      WHERE Product Name = 'Advantus plastic paper clips'   )   UNION ALL   SELECT Quantity    FROM west_superstore    WHERE Product ID IN (     SELECT Product ID      FROM product      WHERE Product Name = 'Advantus plastic paper clips'   ) ) AS subquery;
SELECT Order_ID, MAX(Sales * (1 - Discount) * Quantity - Profit) AS Total_Cost FROM (     SELECT Order_ID, Sales, Discount, Quantity, Profit     FROM (         SELECT * FROM central_superstore         UNION ALL         SELECT * FROM east_superstore         UNION ALL         SELECT * FROM south_superstore         UNION ALL         SELECT * FROM west_superstore     ) AS All_Superstores     JOIN product ON All_Superstores.Product_ID = product.Product_ID     WHERE product.Product_Name = 'Logitech G600 MMO Gaming Mouse' ) AS Orders;
SELECT p.ProductName FROM (central_superstore UNION ALL east_superstore UNION ALL south_superstore UNION ALL west_superstore) o JOIN people pe ON o.CustomerID = pe.CustomerID JOIN product p ON o.ProductID = p.ProductID WHERE pe.CustomerName = 'Alejandro Grove';
SELECT COUNT(DISTINCT c.Customer ID) FROM people c JOIN (   SELECT Customer ID   FROM (     SELECT *      FROM central_superstore     UNION ALL     SELECT *      FROM east_superstore     UNION ALL     SELECT *      FROM south_superstore     UNION ALL     SELECT *      FROM west_superstore   ) s   JOIN product p ON s.Product ID = p.Product ID   WHERE p.Product Name = 'Cardinal EasyOpen D-Ring Binders' AND s.Quantity >= 10 ) o ON c.Customer ID = o.Customer ID WHERE c.City = 'Chicago';
SELECT p.ProductName FROM product p WHERE p.ProductID IN (   SELECT ProductID   FROM (     SELECT ProductID     FROM central_superstore     WHERE Profit >= 1000     UNION ALL     SELECT ProductID     FROM east_superstore     WHERE Profit >= 1000     UNION ALL     SELECT ProductID     FROM south_superstore     WHERE Profit >= 1000     UNION ALL     SELECT ProductID     FROM west_superstore     WHERE Profit >= 1000   ) AS subquery );
SELECT DISTINCT p.Product_Name FROM product p JOIN east_superstore es ON p.Product_ID = es.Product_ID WHERE es.Ship_Mode = 'First Class' LIMIT 10;
SELECT p.Product_Name FROM central_superstore cs JOIN people pe ON cs.Customer_ID = pe.Customer_ID JOIN product p ON cs.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Becky Martin' AND pe.Region = 'Central';
SELECT DISTINCT p.Customer Name FROM people p JOIN west_superstore w ON p.Customer ID = w.Customer ID WHERE w.Ship Mode = 'Second Class' AND p.Region = 'West' LIMIT 5;
SELECT SUM(Profit)  FROM central_superstore  WHERE Customer ID IN (   SELECT Customer ID    FROM people    WHERE Customer Name = 'Patrick Gardner' AND Region = 'Central' );
SELECT p.Product_Name FROM south_superstore s JOIN product p ON s.Product_ID = p.Product_ID WHERE s.Order_Date = '2013-03-04' AND s.Ship_Mode = 'Same Day';
SELECT SUM(Sales)  FROM central_superstore  WHERE Product ID IN (   SELECT Product ID    FROM product    WHERE Product Name = 'Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack' );
SELECT p.Product_Name FROM east_superstore es JOIN people pe ON es.Customer_ID = pe.Customer_ID JOIN product p ON es.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Jonathan Doherty' AND es.Region = 'East' ORDER BY es.Quantity DESC LIMIT 1;
SELECT p.Product_Name, SUM(e.Quantity) AS Total_Quantity FROM east_superstore e JOIN product p ON e.Product_ID = p.Product_ID WHERE e.Ship_Date = Date('2015-03-25') AND p.Region = 'East' GROUP BY p.Product_Name;
SELECT p.Customer Name FROM people p JOIN east_superstore e ON p.Customer ID = e.Customer ID JOIN product pr ON e.Product ID = pr.Product ID WHERE pr.Product Name = 'Global High-Back Leather Tilter, Burgundy' AND e.Order Date = DATE('2013-10-13') AND e.Region = 'East';
SELECT p.Category FROM south_superstore ss JOIN people pe ON ss.Customer ID = pe.Customer ID JOIN product p ON ss.Product ID = p.Product ID WHERE pe.Customer Name = 'Katherine Murray' AND ss.Order Date = Date('2018-11-04') AND ss.Region = 'South';
SELECT      (SUM(CASE WHEN p.Category = 'Furniture' THEN ws.Quantity ELSE 0 END) * 1.0) /      SUM(ws.Quantity) * 100 FROM      west_superstore ws JOIN      product p ON ws.Product_ID = p.Product_ID WHERE      ws.Ship_Mode = 'Standard Class' AND ws.Region = 'West';
SELECT cs.Ship_Date FROM central_superstore cs JOIN people p ON cs.Customer_ID = p.Customer_ID WHERE p.Customer_Name = 'Ann Chong' AND p.Region = 'Central';
SELECT p.Segment FROM people p JOIN west_superstore ws ON p.Customer ID = ws.Customer ID WHERE ws.Order ID = 'CA-2011-108189';
SELECT SUM(Sales)  FROM west_superstore  WHERE Product ID IN (   SELECT Product ID    FROM product    WHERE Product Name = 'Hon Valutask Swivel Chairs' );
SELECT cs.OrderID FROM south_superstore cs JOIN people p ON cs.CustomerID = p.CustomerID WHERE p.CustomerName = 'Frank Olsen' AND p.Region = 'South';
SELECT p.Product_Name FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE cs.Order_Date = date('2018-04-26') AND cs.Ship_Date <= date('2018-04-27') AND cs.Region = 'Central';
SELECT p.City, p.State FROM people p JOIN (   SELECT Customer_ID   FROM (     SELECT Customer_ID, Sales     FROM (       SELECT Customer_ID, Sales       FROM central_superstore       UNION ALL       SELECT Customer_ID, Sales       FROM east_superstore       UNION ALL       SELECT Customer_ID, Sales       FROM south_superstore       UNION ALL       SELECT Customer_ID, Sales       FROM west_superstore     ) AS AllStores     ORDER BY Sales DESC     LIMIT 1   ) AS MaxSalesCustomer ) AS MaxSales ON p.Customer_ID = MaxSales.Customer_ID;
SELECT p.Customer Name FROM people p JOIN east_superstore e ON p.Customer ID = e.Customer ID WHERE e.Profit = (SELECT MAX(Profit) FROM east_superstore);
SELECT MAX(Quantity)  FROM (   SELECT Quantity    FROM central_superstore    WHERE Customer ID IN (     SELECT Customer ID      FROM people      WHERE City = 'Chicago' AND State = 'Illinois'   )   UNION ALL    SELECT Quantity    FROM east_superstore    WHERE Customer ID IN (     SELECT Customer ID      FROM people      WHERE City = 'Chicago' AND State = 'Illinois'   )   UNION ALL    SELECT Quantity    FROM south_superstore    WHERE Customer ID IN (     SELECT Customer ID      FROM people      WHERE City = 'Chicago' AND State = 'Illinois'   )   UNION ALL    SELECT Quantity    FROM west_superstore    WHERE Customer ID IN (     SELECT Customer ID      FROM people      WHERE City = 'Chicago' AND State = 'Illinois'   ) ) AS subquery;
SELECT o.Order_Date, p.Product_Name FROM central_superstore o JOIN product p ON o.Product_ID = p.Product_ID WHERE o.Order_ID = 'CA-2011-137274';
SELECT p.Customer Name FROM people p JOIN south_superstore ss ON p.Customer ID = ss.Customer ID JOIN product pr ON ss.Product ID = pr.Product ID WHERE pr.Product Name = 'Xerox 23';
SELECT p.Product_Name, MAX(cs.Sales) AS Highest_Sales FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE p.Category = 'Office Supplies' GROUP BY p.Product_Name;
SELECT p.Customer Name FROM people p JOIN west_superstore ws ON p.Customer ID = ws.Customer ID WHERE ws.Discount = (SELECT MAX(Discount) FROM west_superstore);
SELECT p.Product_Name FROM product p JOIN east_superstore e ON p.Product_ID = e.Product_ID WHERE e.Profit > (SELECT 0.98 * AVG(Profit) FROM east_superstore);
SELECT p.Customer Name FROM people p JOIN east_superstore e ON p.Customer ID = e.Customer ID WHERE (e.Sales * e.Quantity * (1 - e.Discount) - e.Profit) > 80000 AND p.Region = 'East';
SELECT COUNT(DISTINCT o.Order_ID) FROM (   SELECT * FROM central_superstore   UNION ALL   SELECT * FROM east_superstore   UNION ALL   SELECT * FROM south_superstore   UNION ALL   SELECT * FROM west_superstore ) o JOIN people p ON o.Customer_ID = p.Customer_ID WHERE p.Customer_Name = 'Maxwell Schwartz' AND strftime('%Y', o.Order_Date) = '2015';
SELECT p.Customer Name FROM central_superstore cs JOIN people p ON cs.Customer ID = p.Customer ID JOIN product pr ON cs.Product ID = pr.Product ID WHERE pr.Product Name = 'Bush Mission Pointe Library' AND cs.Region = 'Central';
SELECT SUM(Profit) AS TotalProfit FROM (   SELECT Profit   FROM central_superstore   WHERE Product ID IN (     SELECT Product ID     FROM product     WHERE Product Name = 'Cisco SPA301'   )   UNION ALL   SELECT Profit   FROM east_superstore   WHERE Product ID IN (     SELECT Product ID     FROM product     WHERE Product Name = 'Cisco SPA301'   )   UNION ALL   SELECT Profit   FROM south_superstore   WHERE Product ID IN (     SELECT Product ID     FROM product     WHERE Product Name = 'Cisco SPA301'   )   UNION ALL   SELECT Profit   FROM west_superstore   WHERE Product ID IN (     SELECT Product ID     FROM product     WHERE Product Name = 'Cisco SPA301'   ) ) AS SubQuery;
SELECT p.Product_Name FROM west_superstore ws JOIN people pe ON ws.Customer_ID = pe.Customer_ID JOIN product p ON ws.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Anne McFarland';
SELECT p.Product_Name FROM (central_superstore cs  JOIN people pe ON cs.Customer_ID = pe.Customer_ID  JOIN product p ON cs.Product_ID = p.Product_ID)  WHERE pe.City = 'Coachella' UNION SELECT p.Product_Name FROM (east_superstore es  JOIN people pe ON es.Customer_ID = pe.Customer_ID  JOIN product p ON es.Product_ID = p.Product_ID)  WHERE pe.City = 'Coachella' UNION SELECT p.Product_Name FROM (south_superstore ss  JOIN people pe ON ss.Customer_ID = pe.Customer_ID  JOIN product p ON ss.Product_ID = p.Product_ID)  WHERE pe.City = 'Coachella' UNION SELECT p.Product_Name FROM (west_superstore ws  JOIN people pe ON ws.Customer_ID = pe.Customer_ID  JOIN product p ON ws.Product_ID = p.Product_ID)  WHERE pe.City = 'Coachella';
SELECT    'East' AS Store, COUNT(*) AS NumOrders FROM    east_superstore WHERE    strftime('%Y', "Order Date") = '2015' UNION ALL SELECT    'West' AS Store, COUNT(*) AS NumOrders FROM    west_superstore WHERE    strftime('%Y', "Order Date") = '2015';
SELECT p.Product_Name FROM west_superstore ws JOIN people pe ON ws.Customer_ID = pe.Customer_ID JOIN product p ON ws.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Matt Abelman' AND ws.Order_Date LIKE '2013%';
SELECT SUM(((Sales/(1-Discount))*Quantity)-Profit) AS TotalCost FROM (   SELECT * FROM central_superstore   UNION ALL   SELECT * FROM east_superstore   UNION ALL   SELECT * FROM south_superstore   UNION ALL   SELECT * FROM west_superstore ) AS AllSuperstores JOIN people ON people.Customer ID = AllSuperstores.Customer ID WHERE people.Customer Name = 'Brad Thomas' AND strftime('%Y', AllSuperstores.Order Date) = '2016';
SELECT p.Customer Name, p.City, p.Country FROM people p JOIN (   SELECT Customer ID   FROM (     SELECT *      FROM central_superstore     UNION ALL     SELECT *      FROM east_superstore     UNION ALL     SELECT *      FROM south_superstore     UNION ALL     SELECT *      FROM west_superstore   ) AS all_superstores   JOIN product pr   ON all_superstores.Product ID = pr.Product ID   WHERE pr.Product Name = 'Plantronics Single Ear Headset' ) AS customer_ids ON p.Customer ID = customer_ids.Customer ID;
SELECT p.ProductName, c.ShipDate FROM (   SELECT * FROM central_superstore   UNION ALL   SELECT * FROM east_superstore   UNION ALL   SELECT * FROM south_superstore   UNION ALL   SELECT * FROM west_superstore ) c JOIN product p ON c.ProductID = p.ProductID JOIN people pe ON c.CustomerID = pe.CustomerID WHERE pe.CustomerName = 'Gene Hale';
SELECT COUNT(DISTINCT Order_ID)  FROM south_superstore  JOIN product ON south_superstore.Product_ID = product.Product_ID  WHERE Ship_Mode = 'First Class' AND Category = 'Furniture';
SELECT COUNT(*) FROM south_superstore ss JOIN product p ON ss.Product_ID = p.Product_ID JOIN people pe ON ss.Customer_ID = pe.Customer_ID WHERE p.Category = 'Office Supplies' AND pe.Customer_Name = 'Cindy Stewart';
SELECT p.Category FROM south_superstore ss JOIN product p ON ss.Product_ID = p.Product_ID GROUP BY p.Category ORDER BY SUM(ss.Profit) DESC LIMIT 1;
SELECT p.ProductName FROM east_superstore es JOIN people pe ON es.CustomerID = pe.CustomerID JOIN product p ON es.ProductID = p.ProductID WHERE pe.CustomerName = 'Cindy Stewart';
SELECT p.Product_Name FROM west_superstore ws JOIN product p ON ws.Product_ID = p.Product_ID WHERE ws.Ship_Mode = 'Same Day' AND ws.Ship_Date BETWEEN '2013-01-01' AND '2013-12-31';
SELECT DISTINCT p.Category FROM central_superstore cs JOIN east_superstore es ON cs.Product_ID = es.Product_ID JOIN people pe ON cs.Customer_ID = pe.Customer_ID JOIN product p ON cs.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Sam Craven';
SELECT SUM(s.Quantity)  FROM south_superstore s  JOIN people p ON s.Customer_ID = p.Customer_ID  JOIN product pr ON s.Product_ID = pr.Product_ID  WHERE p.Customer_Name = 'Cindy Stewart' AND pr.Product_Name = 'Lexmark X 9575 Professional All-in-One Color Printer';
SELECT p.Product_Name FROM product p JOIN (   SELECT Product_ID   FROM central_superstore   WHERE Ship_Mode = 'Standard Class'   GROUP BY Product_ID   HAVING COUNT(Order_ID) >= 10 ) c ON p.Product_ID = c.Product_ID;
SELECT p.Category FROM west_superstore ws JOIN product p ON ws.Product_ID = p.Product_ID GROUP BY p.Category ORDER BY SUM(ws.Sales) ASC LIMIT 1;
SELECT SUM(Profit)  FROM south_superstore  WHERE Product ID IN (   SELECT Product ID    FROM product    WHERE Product Name = 'Memorex Froggy Flash Drive 8 GB' );
SELECT SUM(Sales) AS Total_Sales FROM east_superstore es JOIN product p ON es.Product_ID = p.Product_ID WHERE p.Category = 'Furnitures' AND es.Order_Date BETWEEN '2016-01-01' AND '2016-12-31';
SELECT AVG(Sales) AS Average_Sales FROM (   SELECT Sales   FROM east_superstore   WHERE Product ID IN (     SELECT Product ID     FROM product     WHERE Product Name = 'Sharp AL-1530CS Digital Copier'   )   UNION ALL   SELECT Sales   FROM west_superstore   WHERE Product ID IN (     SELECT Product ID     FROM product     WHERE Product Name = 'Sharp AL-1530CS Digital Copier'   ) ) AS SubQuery;
SELECT    (SUM(CASE WHEN p.Category = 'Office Supplies' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS Percentage FROM    central_superstore cs   JOIN product p ON cs.Product_ID = p.Product_ID WHERE    cs.Region IN ('Central', 'South') UNION ALL SELECT    (SUM(CASE WHEN p.Category = 'Office Supplies' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS Percentage FROM    south_superstore ss   JOIN product p ON ss.Product_ID = p.Product_ID WHERE    ss.Region IN ('Central', 'South');
SELECT    SUM(CASE WHEN State = 'Texas' THEN 1 ELSE 0 END) /    SUM(CASE WHEN State = 'Indiana' THEN 1 ELSE 0 END) AS Ratio FROM people;
SELECT p.Product_Name, COUNT(cs.Product_ID) AS order_number FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE p.Sub_Category = 'Art' GROUP BY p.Product_Name ORDER BY order_number DESC LIMIT 1;
SELECT p.Customer_Name FROM people p JOIN south_superstore ss ON p.Customer_ID = ss.Customer_ID WHERE ss.Order_Date BETWEEN '2015-01-01' AND '2015-12-31' GROUP BY p.Customer_Name HAVING COUNT(ss.Order_ID) > 3;
SELECT MAX(Profit)  FROM central_superstore  WHERE Customer ID IN (   SELECT Customer ID    FROM people    WHERE Customer Name = 'Anna Chung' );
SELECT COUNT(DISTINCT o.Order_ID) FROM (   SELECT * FROM central_superstore   UNION ALL   SELECT * FROM east_superstore   UNION ALL   SELECT * FROM south_superstore   UNION ALL   SELECT * FROM west_superstore ) o JOIN people p ON o.Customer_ID = p.Customer_ID WHERE p.Customer_Name = 'Corey Roper' AND YEAR(o.Order_Date) = 2015;
SELECT    SUM(CASE WHEN e.Region = 'East' THEN e.Sales ELSE 0 END) -    SUM(CASE WHEN w.Region = 'West' THEN w.Sales ELSE 0 END) AS Sales_Difference FROM    east_superstore e, west_superstore w;
SELECT p.Product_Name FROM product p JOIN central_superstore cs ON p.Product_ID = cs.Product_ID WHERE cs.Profit < 0;
SELECT p.Product_Name, w.Ship_Mode FROM west_superstore w JOIN product p ON w.Product_ID = p.Product_ID WHERE w.Ship_Date - w.Order_Date = (   SELECT MIN(ws.Ship_Date - ws.Order_Date)   FROM west_superstore ws );
SELECT COUNT(*) FROM central_superstore WHERE Product ID IN (   SELECT Product ID   FROM product   WHERE Product Name = 'O''Sullivan Plantations 2-Door Library in Landvery Oak' ) AND Ship Mode = 'First Class';
SELECT p.Customer Name FROM people p JOIN (   SELECT Customer ID, COUNT(Order ID) AS order_number   FROM east_superstore   WHERE Order Date BETWEEN '2016-01-01' AND '2016-12-31'   GROUP BY Customer ID   ORDER BY order_number DESC   LIMIT 1 ) e ON p.Customer ID = e.Customer ID WHERE p.Segment = 'Corporate' AND p.State = 'Rhode Island';
SELECT COUNT(*) FROM west_superstore ws JOIN people p ON ws.Customer ID = p.Customer ID WHERE ws.Sales >= 5000 AND p.State = 'California';
SELECT p.Segment FROM people p JOIN east_superstore e ON p.Customer ID = e.Customer ID WHERE e.Sales / (1 - e.Discount) = (   SELECT MAX(Sales / (1 - Discount))   FROM east_superstore );
SELECT DATEDIFF(Ship_Date, Order_Date) AS Shipment_Duration FROM (   SELECT Ship_Date, Order_Date   FROM central_superstore   WHERE Order_ID = 'CA-2011-134103'   UNION ALL   SELECT Ship_Date, Order_Date   FROM east_superstore   WHERE Order_ID = 'CA-2011-134103'   UNION ALL   SELECT Ship_Date, Order_Date   FROM south_superstore   WHERE Order_ID = 'CA-2011-134103'   UNION ALL   SELECT Ship_Date, Order_Date   FROM west_superstore   WHERE Order_ID = 'CA-2011-134103' ) AS subquery;
SELECT COUNT(*) FROM (   SELECT *   FROM central_superstore   UNION ALL   SELECT *   FROM east_superstore   UNION ALL   SELECT *   FROM south_superstore   UNION ALL   SELECT *   FROM west_superstore ) AS all_superstores WHERE Quantity > 5 AND ShipMode = 'First Class';
SELECT *  FROM (   SELECT *    FROM central_superstore    UNION ALL    SELECT *    FROM east_superstore    UNION ALL    SELECT *    FROM south_superstore    UNION ALL    SELECT *    FROM west_superstore ) AS all_superstores  WHERE Profit < 0  LIMIT 3;
SELECT p.ProductName FROM people pe JOIN central_superstore cs ON pe.CustomerID = cs.CustomerID JOIN product p ON cs.ProductID = p.ProductID WHERE pe.CustomerName = 'Phillina Ober' UNION SELECT p.ProductName FROM people pe JOIN east_superstore es ON pe.CustomerID = es.CustomerID JOIN product p ON es.ProductID = p.ProductID WHERE pe.CustomerName = 'Phillina Ober' UNION SELECT p.ProductName FROM people pe JOIN south_superstore ss ON pe.CustomerID = ss.CustomerID JOIN product p ON ss.ProductID = p.ProductID WHERE pe.CustomerName = 'Phillina Ober' UNION SELECT p.ProductName FROM people pe JOIN west_superstore ws ON pe.CustomerID = ws.CustomerID JOIN product p ON ws.ProductID = p.ProductID WHERE pe.CustomerName = 'Phillina Ober';
SELECT p.Customer Name FROM south_superstore ss JOIN people p ON ss.Customer ID = p.Customer ID JOIN product pr ON ss.Product ID = pr.Product ID WHERE pr.Product Name = 'Hon Multipurpose Stacking Arm Chairs' GROUP BY p.Customer Name ORDER BY SUM(ss.Quantity) DESC LIMIT 1;
SELECT SUM(Profit)  FROM (   SELECT Profit    FROM central_superstore    WHERE Product ID IN (     SELECT Product ID      FROM product      WHERE Product Name = 'O''Sullivan Living Dimensions 2-Shelf Bookcases'   )   UNION ALL   SELECT Profit    FROM east_superstore    WHERE Product ID IN (     SELECT Product ID      FROM product      WHERE Product Name = 'O''Sullivan Living Dimensions 2-Shelf Bookcases'   )   UNION ALL   SELECT Profit    FROM south_superstore    WHERE Product ID IN (     SELECT Product ID      FROM product      WHERE Product Name = 'O''Sullivan Living Dimensions 2-Shelf Bookcases'   )   UNION ALL   SELECT Profit    FROM west_superstore    WHERE Product ID IN (     SELECT Product ID      FROM product      WHERE Product Name = 'O''Sullivan Living Dimensions 2-Shelf Bookcases'   ) ) AS Profit;
SELECT SUM(Quantity)  FROM west_superstore  WHERE Product ID IN (   SELECT Product ID    FROM product    WHERE Product Name = 'Hon Pagoda Stacking Chairs' );
SELECT COUNT(DISTINCT o.Order_ID) FROM (   SELECT * FROM central_superstore   UNION ALL   SELECT * FROM east_superstore   UNION ALL   SELECT * FROM south_superstore   UNION ALL   SELECT * FROM west_superstore ) o JOIN people p ON o.Customer_ID = p.Customer_ID WHERE p.Customer_Name = 'Aaron Bergman' AND o.Ship_Mode = 'Standard Class';
SELECT Sales / (1 - Discount) AS Original_Price FROM (   SELECT Sales, Discount   FROM central_superstore   WHERE Product_ID IN (     SELECT Product_ID     FROM product     WHERE Product_Name = 'Black Avery Flip-Chart Easel Binder'   )   UNION ALL   SELECT Sales, Discount   FROM east_superstore   WHERE Product_ID IN (     SELECT Product_ID     FROM product     WHERE Product_Name = 'Black Avery Flip-Chart Easel Binder'   )   UNION ALL   SELECT Sales, Discount   FROM south_superstore   WHERE Product_ID IN (     SELECT Product_ID     FROM product     WHERE Product_Name = 'Black Avery Flip-Chart Easel Binder'   )   UNION ALL   SELECT Sales, Discount   FROM west_superstore   WHERE Product_ID IN (     SELECT Product_ID     FROM product     WHERE Product_Name = 'Black Avery Flip-Chart Easel Binder'   ) ) AS subquery;
SELECT p.ProductName FROM (   SELECT *    FROM central_superstore    UNION ALL    SELECT *    FROM east_superstore    UNION ALL    SELECT *    FROM south_superstore    UNION ALL    SELECT *    FROM west_superstore ) AS orders JOIN people pe ON orders.CustomerID = pe.CustomerID JOIN product p ON orders.ProductID = p.ProductID WHERE pe.CustomerName = 'Aimee Bixby';
SELECT Profit FROM (   SELECT Profit   FROM central_superstore   WHERE Product ID IN (     SELECT Product ID     FROM product     WHERE Product Name = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish'   )   UNION ALL   SELECT Profit   FROM east_superstore   WHERE Product ID IN (     SELECT Product ID     FROM product     WHERE Product Name = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish'   )   UNION ALL   SELECT Profit   FROM south_superstore   WHERE Product ID IN (     SELECT Product ID     FROM product     WHERE Product Name = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish'   )   UNION ALL   SELECT Profit   FROM west_superstore   WHERE Product ID IN (     SELECT Product ID     FROM product     WHERE Product Name = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish'   ) ) AS Profit;
SELECT COUNT(*) FROM east_superstore es JOIN product p ON es.Product_ID = p.Product_ID WHERE p.Category = 'Furniture' AND es.Ship_Mode = 'Standard Class';
SELECT * FROM east_superstore WHERE Customer ID IN (   SELECT Customer ID   FROM people   WHERE City = 'Houston' AND State = 'Texas' ) ORDER BY Profit DESC LIMIT 1;
SELECT COUNT(*) FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE p.Category = 'Furniture';
SELECT p.Product_Name FROM product p JOIN central_superstore cs ON p.Product_ID = cs.Product_ID WHERE cs.Ship_Date LIKE '2013-03%';
SELECT COUNT(DISTINCT cs.OrderID) FROM central_superstore cs JOIN people p ON cs.CustomerID = p.CustomerID WHERE p.State = 'Texas';
SELECT COUNT(DISTINCT o.Order_ID) FROM central_superstore o JOIN people p ON o.Customer_ID = p.Customer_ID WHERE p.Customer_Name = 'Alan Barnes' AND o.Order_Date LIKE '2015%';
SELECT p.Product_Name FROM east_superstore e JOIN product p ON e.Product_ID = p.Product_ID WHERE e.Order_ID = 'CA-2011-115791';
SELECT    SUM(CASE WHEN Discount = 0.2 THEN 1 ELSE 0 END) / SUM(1) * 100 AS percentage FROM    central_superstore   INNER JOIN people ON central_superstore.Customer ID = people.Customer ID WHERE    people.State = 'Texas';
SELECT    SUM(CASE      WHEN p.Category = 'Furniture' AND c.Ship_Mode = 'First Class' AND c.Ship_Date LIKE '2013%' THEN 1      ELSE 0    END) / COUNT(*) * 100 AS percentage FROM    central_superstore c    JOIN product p ON c.Product_ID = p.Product_ID;
SELECT p.Customer Name FROM people p JOIN west_superstore ws ON p.Customer ID = ws.Customer ID WHERE ws.Order Date = '2013-08-12' AND ws.Discount = 0.2;
SELECT OrderID FROM central_superstore JOIN product ON central_superstore.ProductID = product.ProductID WHERE product.ProductName = 'Security-Tint Envelopes' AND central_superstore.OrderDate = '2013-06-03' AND central_superstore.Region = 'Central';
SELECT p.Product_Name FROM central_superstore cs JOIN people pe ON cs.Customer_ID = pe.Customer_ID JOIN product p ON cs.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Bill Shonely' AND pe.Region = 'Central';
SELECT p.Customer Name FROM people p JOIN west_superstore ws ON p.Customer ID = ws.Customer ID WHERE ws.Quantity = 8 AND p.Region = 'West';
SELECT SUM(cs.Profit)  FROM central_superstore cs  JOIN people p ON cs.Customer_ID = p.Customer_ID  WHERE p.City = 'Houston' AND p.State = 'Texas';
SELECT p.Customer Name FROM people p JOIN east_superstore e ON p.Customer ID = e.Customer ID WHERE e.Ship Date = '2013-03-05' AND e.Region = 'East';
SELECT p.Product_Name, MIN(cs.Profit) AS Lowest_Profit FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE cs.Order_Date LIKE '2016%' AND cs.Region = 'Central' GROUP BY p.Product_Name ORDER BY Lowest_Profit ASC LIMIT 1;
SELECT p.Customer Name FROM east_superstore es JOIN people p ON es.Customer ID = p.Customer ID WHERE es.Order ID = 'CA-2011-118976' AND es.Region = 'East';
SELECT p.Product_Name FROM product p JOIN south_superstore ss ON p.Product_ID = ss.Product_ID GROUP BY p.Product_Name ORDER BY SUM(ss.Sales) DESC LIMIT 1;
SELECT p.Sub_Category, e.Sales, e.Profit FROM east_superstore e JOIN product p ON e.Product_ID = p.Product_ID WHERE e.Order_ID = 'US-2011-126571' AND e.Region = 'East';
SELECT p.ProductName FROM (   SELECT ProductID, MAX(Quantity) AS MaxQuantity   FROM (     SELECT ProductID, Quantity     FROM central_superstore     UNION ALL     SELECT ProductID, Quantity     FROM east_superstore     UNION ALL     SELECT ProductID, Quantity     FROM south_superstore     UNION ALL     SELECT ProductID, Quantity     FROM west_superstore   ) AS AllStores   GROUP BY ProductID   ORDER BY MaxQuantity DESC   LIMIT 1 ) AS MaxQuantityProduct JOIN product p ON MaxQuantityProduct.ProductID = p.ProductID;
SELECT p.Customer Name FROM people p JOIN south_superstore ss ON p.Customer ID = ss.Customer ID WHERE ss.Ship Mode = 'Standard Class' AND ss.Sales > (SELECT AVG(Sales) * 0.88 FROM central_superstore UNION ALL SELECT AVG(Sales) FROM east_superstore UNION ALL SELECT AVG(Sales) FROM south_superstore UNION ALL SELECT AVG(Sales) FROM west_superstore);
SELECT    SUM(CASE WHEN cs.Discount = 0 THEN 1 ELSE 0 END) / COUNT(*) * 100 AS percentage FROM    central_superstore cs   JOIN people p ON cs.Customer_ID = p.Customer_ID WHERE    p.State = 'Indiana';
SELECT    (COUNT(CASE WHEN race = 'W' THEN 1 END) / COUNT(*)) * 100 AS percentage FROM    officers WHERE    gender = 'M';
SELECT    (COUNT(CASE WHEN officer_count > 3 THEN case_number END) /     COUNT(CASE WHEN date BETWEEN '2010-01-01' AND '2015-12-31' THEN case_number END)) * 100  AS percentage FROM    incidents;
SELECT year(date) AS year, COUNT(case_number) AS count FROM incidents WHERE subject_weapon = 'Handgun' GROUP BY year(date) ORDER BY count DESC LIMIT 1;
SELECT    COUNT(CASE WHEN subject_statuses = 'injured' THEN 1 END) / COUNT(*) * 100 AS percentage FROM    incidents WHERE    grand_jury_disposition = 'No Bill';
SELECT    '2007' AS year, COUNT(case_number) AS count_2007 FROM    incidents WHERE    date BETWEEN '2007-01-01' AND '2007-12-31' AND subject_weapon = 'Vehicle' UNION ALL SELECT    '2008' AS year, COUNT(case_number) AS count_2008 FROM    incidents WHERE    date BETWEEN '2008-01-01' AND '2008-12-31' AND subject_weapon = 'Vehicle';
SELECT    COUNT(CASE WHEN subject_statuses = 'Shoot and Miss' THEN 1 END) /    COUNT(*) * 100  FROM    incidents  WHERE    subject_weapon = 'Handgun';
SELECT o.last_name, o.gender FROM officers o JOIN incidents i ON o.case_number = i.case_number WHERE i.grand_jury_disposition = 'No Bill';
SELECT i.case_number, i.subject_statuses, i.subject_weapon FROM incidents i JOIN subjects s ON i.case_number = s.case_number WHERE s.gender = 'F';
SELECT i.case_number, i.location, i.subject_statuses FROM incidents i JOIN subjects s ON i.case_number = s.case_number WHERE s.gender = 'M';
SELECT i.case_number, i.subject_statuses FROM incidents i JOIN officers o ON i.case_number = o.case_number WHERE o.full_name = 'Evenden, George';
SELECT o.last_name, i.subject_statuses FROM incidents i JOIN officers o ON i.case_number = o.case_number WHERE i.case_number = '134472-2015';
SELECT s.last_name, s.gender, s.race, s.case_number FROM subjects s JOIN incidents i ON s.case_number = i.case_number WHERE i.subject_statuses = 'Deceased';
SELECT    (COUNT(CASE WHEN s.gender = 'F' AND s.subject_weapon = 'Vehicle' THEN i.case_number END) /     COUNT(CASE WHEN s.gender = 'F' THEN i.case_number END)) * 100 AS percentage FROM    incidents i JOIN    subjects s ON i.case_number = s.case_number;
SELECT    (COUNT(CASE WHEN subject_weapon = 'knife' THEN case_number END) /     COUNT(CASE WHEN subject_weapon = 'toy handgun' THEN case_number END)) AS ratio FROM incidents WHERE subject_statuses = 'Injured';
SELECT i.case_number FROM incidents i WHERE i.date BETWEEN '2012-01-01' AND '2012-12-31' AND i.subject_statuses = 'Deceased';
SELECT    (COUNT(CASE WHEN race = 'B' THEN 1 END) / COUNT(*)) * 100 AS percentage FROM    officers WHERE    gender = 'M';
SELECT COUNT(i.case_number) FROM incidents i JOIN officers o ON i.case_number = o.case_number WHERE i.subject_weapon = 'Vehicle' AND o.gender = 'F';
SELECT COUNT(DISTINCT i.case_number) FROM incidents i JOIN subjects s ON i.case_number = s.case_number WHERE s.gender = 'F' AND i.subject_statuses = 'Deceased';
SELECT COUNT(DISTINCT o.case_number) FROM officers o JOIN incidents i ON o.case_number = i.case_number WHERE o.race = 'B' AND i.date BETWEEN '2010-01-01' AND '2015-12-31';
SELECT COUNT(DISTINCT case_number)  FROM incidents  WHERE date BETWEEN '2015-06-01' AND '2015-06-30';
SELECT COUNT(*) FROM incidents WHERE date BETWEEN '2006-01-01' AND '2013-12-31' AND subject_weapon = 'handgun' AND subject_statuses = 'injured';
SELECT subject_weapon, COUNT(subject_weapon) as count FROM incidents WHERE subject_statuses = 'Deceased' GROUP BY subject_weapon ORDER BY count DESC LIMIT 1;
SELECT    'White Males' AS Category,    COUNT(CASE WHEN race = 'W' AND gender = 'M' THEN 1 ELSE NULL END) / COUNT(*) * 100 AS Proportion FROM    officers UNION ALL SELECT    'White Females' AS Category,    COUNT(CASE WHEN race = 'W' AND gender = 'F' THEN 1 ELSE NULL END) / COUNT(*) * 100 AS Proportion FROM    officers;
SELECT    (SUM(CASE WHEN s.gender = 'F' AND s.race = 'B' THEN 1 ELSE 0 END) -     SUM(CASE WHEN s.gender = 'F' AND s.race = 'W' THEN 1 ELSE 0 END))  AS result FROM incidents i JOIN subjects s ON i.case_number = s.case_number;
SELECT    (COUNT(CASE WHEN subject_weapon = 'rifles' AND subject_statuses = 'Deceased' THEN 1 END) /     COUNT(CASE WHEN subject_statuses = 'Deceased' THEN 1 END)) * 100  AS rifle_deaths_percentage FROM incidents;
SELECT subject_weapon, race, gender FROM incidents JOIN subjects ON incidents.case_number = subjects.case_number WHERE incidents.case_number = '031347-2015';
SELECT i.case_number, s.race, s.gender FROM incidents i JOIN officers o ON i.case_number = o.case_number JOIN subjects s ON i.case_number = s.case_number WHERE o.full_name = 'Ruben Fredirick' AND i.subject_statuses = 'Deceased Injured';
SELECT    COUNT(CASE WHEN o.gender = 'M' THEN i.case_number END) /    COUNT(i.case_number) * 100 AS proportion FROM    incidents i   JOIN officers o ON i.case_number = o.case_number WHERE    i.subject_statuses = 'Injured';
SELECT COUNT(DISTINCT Chromosome)  FROM Genes  WHERE Localization = 'plasma membrane';
SELECT COUNT(*) FROM Genes WHERE Essential = 'false' AND Localization = 'nucleus';
SELECT COUNT(*) FROM Genes WHERE Phenotype = 'nucleic acid metabolism defects' AND Localization = 'vacuole';
SELECT Localization FROM Genes WHERE Chromosome = (SELECT MAX(Chromosome) FROM Genes);
SELECT MAX(Expression_Corr) FROM Interactions WHERE GeneID1 IN (   SELECT GeneID   FROM Genes   WHERE Localization = 'nucleus' ) AND GeneID2 IN (   SELECT GeneID   FROM Genes   WHERE Localization = 'nucleus' );
SELECT G1.Function, G2.Function FROM Interactions I JOIN Genes G1 ON I.GeneID1 = G1.GeneID JOIN Genes G2 ON I.GeneID2 = G2.GeneID WHERE I.Expression_Corr = (SELECT MIN(Expression_Corr) FROM Interactions);
SELECT COUNT(*) FROM Interactions WHERE GeneID1 NOT IN (   SELECT GeneID   FROM Genes   WHERE Class ='motorproteins' ) AND GeneID2 NOT IN (   SELECT GeneID   FROM Genes   WHERE Class ='motorproteins' ) AND Expression_Corr < 0;
SELECT MAX(i.Expression_Corr) FROM Genes g1, Genes g2, Interactions i WHERE g1.GeneID = i.GeneID1 AND g2.GeneID = i.GeneID2 AND g1.Chromosome = 8 AND g2.Chromosome = 6;
SELECT Motif FROM Genes WHERE Localization = 'cytoplasm' AND Chromosome = 7;
SELECT COUNT(*) FROM Genes WHERE Essential = 'No' AND Function = 'transcription' AND Localization <> 'cytoplasm';
SELECT COUNT(*) FROM Interactions WHERE GeneID1 IN (SELECT GeneID FROM Genes WHERE Essential = 'No') AND GeneID2 IN (SELECT GeneID FROM Genes WHERE Essential = 'No') AND Expression_Corr > 0;
SELECT    COUNT(CASE WHEN g1.Chromosome > 10 AND g2.Chromosome > 10 THEN 1 ELSE NULL END) /    COUNT(*) AS possibility FROM    Interactions i   JOIN Genes g1 ON i.GeneID1 = g1.GeneID   JOIN Genes g2 ON i.GeneID2 = g2.GeneID WHERE    i.Expression_Corr > 0;
SELECT AVG(i.Expression_Corr) FROM Interactions i JOIN Genes g1 ON i.GeneID1 = g1.GeneID JOIN Genes g2 ON i.GeneID2 = g2.GeneID WHERE g1.Class = 'ATPases' AND g2.Class = 'ATPases';
SELECT GeneID FROM Genes WHERE Localization = 'cytoplasm' AND Function ='metabolism';
SELECT COUNT(DISTINCT g.GeneID) FROM Genes g JOIN Classification c ON g.GeneID = c.GeneID WHERE c.Localization IN ('plasma', 'nucleus');
SELECT    Type,    COUNT(CASE WHEN Expression_Corr < 0 THEN 1 ELSE NULL END) AS Negatively_Correlated,    COUNT(*) AS Total,    COUNT(CASE WHEN Expression_Corr < 0 THEN 1 ELSE NULL END) / COUNT(*) * 100 AS Percentage_Negatively_Correlated FROM    Interactions WHERE    Type = 'physical';
SELECT    (COUNT(CASE WHEN g.Class IS NULL THEN 1 ELSE NULL END) /     COUNT(*) * 100) AS Percentage_Of_Unknown_Class,   COUNT(CASE WHEN g.Class IS NULL AND g.Phenotype NOT LIKE '%conditional%' THEN 1 ELSE NULL END) AS Count_Of_Non_Conditional_Phenotypes FROM Genes g JOIN Classification c ON g.GeneID = c.GeneID WHERE c.Localization = 'cytoskeleton';
SELECT DISTINCT Type FROM Interactions WHERE GeneID1 IN (   SELECT GeneID   FROM Genes   WHERE Function LIKE '%cellular transport%' AND Essential = 'non-essential' ) OR GeneID2 IN (   SELECT GeneID   FROM Genes   WHERE Function LIKE '%transport medicine%' AND Essential = 'non-essential' );
SELECT G.GeneID FROM Genes G JOIN Interactions I ON G.GeneID = I.GeneID1 JOIN Classification C ON I.GeneID2 = C.GeneID WHERE C.Localization = 'nucleus' AND I.Expression_Corr > 0;
SELECT g.GeneID, g.Function, i.GeneID2 FROM Genes g JOIN Interactions i ON g.GeneID = i.GeneID1 WHERE g.Essential = 'Y' AND g.Class = 'transcription factors' AND g.Localization = 'nucleus' AND i.Type = 'genetic';
SELECT COUNT(*) FROM Genes WHERE Essential = 'false' AND Class!='motorprotein' AND Phenotype = 'cell cycle defects'  AND GeneID NOT IN (   SELECT GeneID1   FROM Interactions   WHERE Type = 'physical'   UNION   SELECT GeneID2   FROM Interactions   WHERE Type = 'physical' );
SELECT    (COUNT(CASE WHEN i.GeneID2 IS NOT NULL THEN 1 ELSE NULL END) /     COUNT(*)) * 100 AS percentage_positive_interaction FROM    Genes g   LEFT JOIN Interactions i ON g.GeneID = i.GeneID1 WHERE    g.Phenotype = 'nucleic acid metabolism defects' AND    g.Motif = 'PS00107';
WITH correlated_genes AS (   SELECT GeneID1, GeneID2, Type, Expression_Corr, G.Essential   FROM Interactions I   JOIN Genes G ON I.GeneID1 = G.GeneID   WHERE Expression_Corr < 0 ) SELECT    COUNT(CASE WHEN Essential = 'non-essential' THEN 1 ELSE NULL END) /    COUNT(*) * 100 AS Percentage_of_Essensity FROM correlated_genes;
SELECT p.App, r.Translated_Review FROM playstore p JOIN user_reviews r ON p.App = r.App WHERE p.Last_Updated BETWEEN 'January 1, 2018' and 'January 31, 2018' AND r.Sentiment = 'Positive' GROUP BY p.App;
SELECT COUNT(DISTINCT Sentiment_Polarity) AS count_users, MAX(u.Translated_Review) AS last_updated FROM user_reviews u JOIN playstore p ON u.App = p.App WHERE p.App = '7 Minute Workout' AND u.Sentiment_Polarity >= 0 AND u.Sentiment_Polarity < 0.5;
SELECT p.Rating, COUNT(ur.App) AS Neutral_Reviews FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.App = 'HTC Weather' AND ur.Sentiment = 'Neutral';
SELECT p.App, p.Category FROM playstore p JOIN (   SELECT App, COUNT(*) as count   FROM user_reviews   WHERE Sentiment_Polarity = -1   GROUP BY App   ORDER BY count DESC   LIMIT 1 ) ur ON p.App = ur.App;
SELECT AVG(ur.Sentiment_Polarity) AS avg_polarity, ps.Content_Rating AS target_age_group FROM playstore ps JOIN user_reviews ur ON ps.App = ur.App WHERE ps.App = 'Cooking Fever';
SELECT MIN(sr.Sentiment_Polarity), p.Installs FROM user_reviews sr JOIN playstore p ON sr.App = p.App WHERE sr.App = 'Basketball Stars' AND sr.Sentiment_Polarity < -0.5;
SELECT    COUNT(ur.App) AS num_reviews,   ps.Size AS current_version FROM    playstore ps   JOIN user_reviews ur ON ps.App = ur.App WHERE    ps.App = 'Akinator' AND ur.Sentiment_Subjectivity <= 0.5 GROUP BY    ps.Size;
SELECT COUNT(*)  FROM playstore  WHERE Rating = 5;
SELECT App, Installs FROM playstore WHERE Price = 0 ORDER BY Installs DESC LIMIT 5;
SELECT App, Reviews FROM playstore ORDER BY Reviews DESC LIMIT 10;
SELECT p.Category, COUNT(ur.Sentiment) AS Neutral_Reviews_Count FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.App = '10 Best Foods for You' AND ur.Sentiment = 'Neutral' GROUP BY p.Category;
SELECT p.App, p.Installs FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE ur.Sentiment_Polarity = 'Positive' GROUP BY p.App, p.Installs;
SELECT p.App, ur.Translated_Review FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.Rating = 3.9;
SELECT p.App, ur.Sentiment, ur.Sentiment_Polarity, ur.Sentiment_Subjectivity FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.Android_Version = '8.0 and up';
SELECT p.App, COUNT(p.Genres) AS Num_Genres, SUM(ur.Sentiment_Subjectivity) AS Total_Sentiment_Subjectivity FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.Genres > 1 GROUP BY p.App;
SELECT p.App, p.Last_Updated, ur.Sentiment FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.Last_Updated < '2015-01-01';
SELECT    p.App,    SUM(p.Installs) AS Total_Installs,    ur.Translated_Review FROM    playstore p    JOIN user_reviews ur ON p.App = ur.App WHERE    p.Content_Rating = '18+' GROUP BY    p.App, ur.Translated_Review;
SELECT p.App, p.Price, p.Installs, ur.Sentiment_Polarity FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.Price * p.Installs = (SELECT MAX(Price * Installs) FROM playstore);
SELECT    AVG(p.Rating) AS avg_rating,   SUM(CASE WHEN ur.Sentiment = 'Positive' THEN 1 ELSE 0 END) AS positive_users FROM    playstore p JOIN    user_reviews ur ON p.App = ur.App WHERE    p.Category = 'COMICS';
SELECT Rating FROM playstore WHERE App = 'Draw A Stickman';
SELECT COUNT(*) FROM user_reviews WHERE App = 'Brit + Co' AND Translated_Review IS NOT NULL;
SELECT App, Reviews FROM playstore WHERE Genres = 'Shopping' ORDER BY Reviews DESC LIMIT 5;
SELECT COUNT(*)  FROM user_reviews  WHERE App = 'Dino War: Rise of Beasts' AND Sentiment = 'Neutral';
SELECT App FROM playstore WHERE Installs = '5,000+';
SELECT Translated_Review FROM user_reviews WHERE App = 'Dog Run - Pet Dog Simulator' AND Sentiment = 'Negative';
SELECT p.App, COUNT(ur.Sentiment) as count_negative FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.Type = 'Free' AND ur.Sentiment = 'Negative' GROUP BY p.App ORDER BY count_negative DESC LIMIT 1;
SELECT COUNT(*) FROM user_reviews WHERE Sentiment = 'Negative' AND App IN (   SELECT App   FROM playstore   WHERE Installs >= 100000000 );
SELECT p.Content_Rating FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE ur.Translated_Review LIKE '%gr8%';
SELECT SUM(Sentiment_Polarity)  FROM user_reviews  WHERE App = (SELECT App               FROM playstore               ORDER BY Price DESC               LIMIT 1);
SELECT p.Rating, ur.Translated_Review FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.App = 'Garden Coloring Book';
SELECT p.App, SUM(ur.Sentiment_Subjectivity) AS Total_Sentiment_Subjectivity FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.Genres = 'Photography' GROUP BY p.App ORDER BY Total_Sentiment_Subjectivity DESC LIMIT 1;
SELECT ur.Translated_Review FROM user_reviews ur JOIN playstore p ON ur.App = p.App WHERE p.Content_Rating = 'Mature 17+' AND p.Rating = 1;
SELECT p.Installs FROM playstore p JOIN (   SELECT App, SUM(Sentiment_Polarity) as polarity_score   FROM user_reviews   GROUP BY App   ORDER BY polarity_score DESC   LIMIT 1 ) ur ON p.App = ur.App;
SELECT COUNT(*) FROM user_reviews JOIN playstore ON user_reviews.App = playstore.App WHERE playstore.Genres = 'Weather' AND user_reviews.Sentiment = 'Neutral';
SELECT p.App, COUNT(ur.Translated_Review) AS no_comment_reviews FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.Installs > 1000000000 AND ur.Translated_Review = 'nan' GROUP BY p.App ORDER BY no_comment_reviews DESC LIMIT 1;
SELECT p.Rating, SUM(ur.Sentiment_Subjectivity) AS Total_Sentiment_Subjectivity FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.App = 'Onefootball - Soccer Scores';
SELECT    ROUND(     SUM(CASE WHEN p.Content_Rating = 'Teen' THEN 1 ELSE 0 END) /      COUNT(*) * 100, 2   ) AS percentage_of_no_comment_reviews FROM    playstore p   JOIN user_reviews ur ON p.App = ur.App WHERE    ur.Translated_Review = 'nan';
SELECT App FROM playstore WHERE Rating = 5;
SELECT App FROM playstore WHERE Reviews > 75000000 AND Content_Rating = 'Teen';
SELECT Genres FROM playstore WHERE Installs LIKE '%1,000,000,000+%'  GROUP BY Genres;
SELECT AVG(Price)  FROM playstore  WHERE Genres = 'Dating';
SELECT AVG(Installs)  FROM playstore  WHERE Category = 'ENTERTAINMENT' AND Size <= '1.0M';
SELECT AVG(Reviews)  FROM playstore  WHERE Rating = 5;
SELECT Genres, COUNT(*) as count FROM playstore JOIN user_reviews ON playstore.App = user_reviews.App WHERE Sentiment_Polarity > 0.5 GROUP BY Genres ORDER BY count DESC LIMIT 3;
SELECT    ROUND(     (       SUM(         CASE            WHEN p.Rating = 4.7 AND ur.Sentiment = 'Positive' THEN 1            ELSE 0          END       ) - SUM(         CASE            WHEN p.Rating = 4.7 AND ur.Sentiment = 'Negative' THEN 1            ELSE 0          END       )      ) / SUM(       CASE          WHEN p.Rating = 4.7 THEN 1          ELSE 0        END     ) * 100, 2   ) AS percentage FROM    playstore p    JOIN user_reviews ur ON p.App = ur.App WHERE    p.Rating = 4.7 AND (ur.Sentiment = 'Positive' OR ur.Sentiment = 'Negative');
SELECT p.App, AVG(p.Rating) AS Average_Rating FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE ur.Sentiment!= 'Negative' GROUP BY p.App;
SELECT    p.App,    (SUM(CASE WHEN sr.Sentiment = 'Negative' THEN 1 ELSE 0 END) - SUM(CASE WHEN sr.Sentiment = 'Positive' THEN 1 ELSE 0 END)) / SUM(CASE WHEN sr.Sentiment = 'Negative' THEN 1 ELSE 0 END) * 100 AS percent FROM    playstore p   JOIN user_reviews sr ON p.App = sr.App WHERE    p.Last_Updated <= '2015' GROUP BY    p.App;
SELECT    ROUND(     SUM(Type = 'Free' AND Rating > 4.5 AND substr("Last Updated",-4,4) <= '2018') /      COUNT(App) * 100, 2   ) AS percent FROM playstore;
SELECT Genres FROM playstore WHERE App = 'Honkai Impact 3rd';
SELECT Rating FROM playstore WHERE App = 'Learn C++';
SELECT AVG(Price)  FROM playstore  WHERE Genres = 'Arcade' AND Content_Rating = 'Everyone 10+';
SELECT    p.Size,    COUNT(ur.App) AS Positive_Reviews_Count FROM    playstore p    JOIN user_reviews ur ON p.App = ur.App WHERE    p.App = 'Browser 4G'    AND ur.Sentiment_Polarity = 0.5;
SELECT p.App, p.Installs FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE ur.Sentiment_Subjectivity = 0.3;
SELECT    AVG(ur.Sentiment_Polarity) AS avg_sentiment_polarity,   p.Rating FROM    user_reviews ur   JOIN playstore p ON ur.App = p.App WHERE    p.App = 'Golf GPS Rangefinder: Golf Pad';
SELECT p.App, p.Rating, COUNT(ur.Sentiment_Polarity) AS Negative_Sentiments FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.Genres = 'Puzzle' AND ur.Sentiment_Polarity < 0 GROUP BY p.App, p.Rating ORDER BY p.Rating ASC LIMIT 5;
SELECT    p.Size,    ROUND(((SUM(CASE WHEN ur.Sentiment = 'Positive' THEN 1 ELSE 0 END) /             SUM(CASE WHEN ur.Sentiment = 'Negative' THEN 1 ELSE 0 END)) * 100, 2) AS ratio FROM    playstore p JOIN    user_reviews ur ON p.App = ur.App WHERE    p.App = 'Fate/Grand Order';
SELECT    p.Installs,    (SUM(CASE WHEN ur.Sentiment = 'Positive' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS Positive_Sentiment_Percentage FROM    playstore p   JOIN user_reviews ur ON p.App = ur.App WHERE    p.App = 'FREEDOME VPN Unlimited anonymous Wifi Security';
SELECT p.Genres, MAX(ur.Sentiment_Polarity) AS Highest_Sentiment_Polarity FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.App = 'Honkai Impact 3rd';
SELECT    p.Rating,    COUNT(ur.Sentiment_Polarity) AS Dislikes FROM    playstore p    JOIN user_reviews ur ON p.App = ur.App WHERE    p.App = 'Dragon Ball Legends' AND ur.Sentiment_Polarity < -0.5;
SELECT p.App, p.Rating, ur.Translated_Review FROM playstore p LEFT JOIN user_reviews ur ON p.App = ur.App WHERE p.Category = 'EDUCATION' AND p.Rating = 1 ORDER BY p.Rating ASC LIMIT 1;
SELECT p.App, p.Category, ur.Translated_Review FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.Type = 'Free' AND p.Category = 'SPORTS';
SELECT    COUNT(DISTINCT p.App) AS count_of_apps,   AVG(ur.Sentiment_Polarity) AS avg_sentiment_polarity FROM    playstore p   JOIN user_reviews ur ON p.App = ur.App WHERE    p.Genres = 'Role Playing' AND p.Content_Rating = 'Teen';
SELECT    AVG(p.Rating) AS avg_rating,   ROUND((SUM(CASE WHEN ur.Sentiment = 'Positive' THEN 1 ELSE 0 END) / COUNT(*) * 100), 2) AS positive_sentiment_ratio FROM    playstore p   JOIN user_reviews ur ON p.App = ur.App WHERE    p.Genres = 'Racing';
SELECT Region, COUNT(SalesTeamID) as NumOfSalesTeam FROM Sales_Team GROUP BY Region ORDER BY NumOfSalesTeam DESC LIMIT 1;
SELECT *  FROM Customers  WHERE CustomerNames LIKE '%Group%';
SELECT AVG(MedianIncome)  FROM StoreLocations  WHERE Type = 'City';
SELECT st.SalesTeam, r.Region FROM SalesOrders so JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID JOIN Regions r ON st.Region = r.StateCode WHERE so.OrderNumber = 'SO - 000137';
SELECT so.OrderNumber, p.ProductName FROM SalesOrders so JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID JOIN Products p ON so._ProductID = p.ProductID WHERE st.SalesTeam = 'Douglas Tucker';
SELECT c.Customer Names FROM Sales Orders so JOIN Customers c ON so._CustomerID = c.CustomerID JOIN Products p ON so._ProductID = p.ProductID WHERE so.OrderDate BETWEEN '2020-01-01' AND '2020-12-31' AND p.Product Name = 'Cocktail Glasses' AND so.Discount Applied = (     SELECT MAX(so2.Discount Applied)     FROM Sales Orders so2     JOIN Products p2 ON so2._ProductID = p2.ProductID     WHERE so2.OrderDate BETWEEN '2020-01-01' AND '2020-12-31'     AND p2.Product Name = 'Cocktail Glasses' );
SELECT so.OrderNumber, sl.CityName FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE so.SalesChannel = 'In-Store';
SELECT c.CustomerNames, so.OrderDate FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID WHERE so.UnitCost = (SELECT MAX(UnitCost) FROM SalesOrders);
SELECT so.OrderNumber FROM Sales_Orders so JOIN Customers c ON so._CustomerID = c.CustomerID WHERE c.CustomerNames = 'Rochester Ltd' AND SUBSTR(so.OrderDate, -2) = '18' ORDER BY so.OrderNumber;
SELECT    so.OrderNumber,    p.ProductName,    st.SalesTeam FROM    SalesOrders so    JOIN Products p ON so._ProductID = p.ProductID    JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE    so.WarehouseCode = 'WARE-NMK1003';
SELECT CustomerNames FROM Customers WHERE CustomerID IN (   SELECT _CustomerID   FROM SalesOrders   WHERE SalesChannel = 'Online' );
SELECT AVG(UnitPrice - UnitCost) AS AverageNetProfit FROM SalesOrders JOIN Products ON SalesOrders._ProductID = Products.ProductID WHERE Products.ProductName = 'Bakeware';
SELECT st.SalesTeam FROM SalesTeam st JOIN SalesOrders so ON st.SalesTeamID = so._SalesTeamID WHERE so.OrderDate LIKE '%/20' GROUP BY st.SalesTeam ORDER BY SUM((so.UnitPrice - so.UnitCost) * so.OrderQuantity) DESC LIMIT 1;
SELECT    so.OrderNumber,    (so.UnitPrice - so.UnitCost) * so.OrderQuantity AS NetProfit FROM    SalesOrders so    JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID    JOIN Customers c ON so._CustomerID = c.CustomerID  WHERE    st.SalesTeam = 'Joshua Bennett';
SELECT    DIVIDE(     COUNT(so.OrderNumber)      FILTER (WHERE p.ProductName = 'Home Fragrances' AND SUBSTR(so.ShipDate, 5, 2) = '07' AND SUBSTR(so.ShipDate, -2) = '18'),     COUNT(so.OrderNumber)      FILTER (WHERE SUBSTR(so.ShipDate, 5, 2) = '07' AND SUBSTR(so.ShipDate, -2) = '18')   ) AS percentage FROM    SalesOrders so   JOIN Products p ON so._ProductID = p.ProductID WHERE    so.ShipDate BETWEEN '2018-07-01' AND '2018-07-31';
SELECT CustomerID, CustomerNames FROM Customers WHERE CustomerNames LIKE 'W%';
SELECT ProductID, ProductName FROM Products WHERE ProductName LIKE '%Outdoor%';
SELECT COUNT(DISTINCT so._ProductID) FROM SalesOrders so WHERE so.DiscountApplied = 0.4 AND so.SalesChannel = 'In-Store' AND so.WarehouseCode = 'WARE-NMK1003';
SELECT CityName, MedianIncome FROM StoreLocations WHERE StateCode = 'FL' ORDER BY Population DESC LIMIT 1;
SELECT StoreID, CityName, State FROM Store_Locations WHERE County = 'Allen';
SELECT StoreID, CityName, State, Region FROM StoreLocations WHERE Type = (   SELECT CASE      WHEN COUNT(CASE WHEN Type = 'Borough' THEN StoreID END) < COUNT(CASE WHEN Type = 'CDP' THEN StoreID END) THEN 'Borough'     ELSE 'CDP'   END   FROM StoreLocations )
SELECT r.Region, st.SalesTeam FROM SalesTeam st JOIN Regions r ON st.Region = r.Region WHERE st.SalesTeamID = 18 AND       (SELECT COUNT(so.OrderNumber)         FROM SalesOrders so         WHERE so._SalesTeamID = 18 AND so.SalesChannel = 'In-Store') >        (SELECT COUNT(so.OrderNumber)         FROM SalesOrders so         WHERE so._SalesTeamID = 18 AND so.SalesChannel = 'Online');
SELECT      DIVIDE(COUNT(OrderNumber) FILTER (WHERE Sales_Channel = 'In-Store' AND c.Customer_Names = 'Medline'),              COUNT(OrderNumber) FILTER (WHERE c.Customer_Names = 'Medline'))      AS percentage FROM      Sales_Orders so JOIN      Customers c ON so._CustomerID = c.CustomerID;
SELECT c.CustomerNames,         SUBTRACT(so.DeliveryDate, so.OrderDate) AS LastingDeliveryPeriod FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID JOIN Products p ON so._ProductID = p.ProductID WHERE so.SalesChannel = 'Wholesale' AND p.ProductName = 'Bedroom Furniture' AND SUBSTR(so.OrderDate, -2) = '19';
SELECT c.CustomerNames, p.ProductName FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID JOIN Products p ON so._ProductID = p.ProductID WHERE (so.UnitPrice - so.UnitCost) * so.OrderQuantity > 3800;
SELECT sl.CityName, r.Region FROM StoreLocations sl JOIN Regions r ON sl.StateCode = r.StateCode WHERE sl.State = 'California' AND sl.WaterArea = 0;
SELECT      DIVIDE(COUNT(so.OrderNumber), (SELECT COUNT(OrderNumber) FROM SalesOrders)) * 100 as percentage FROM      SalesOrders so JOIN      SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE      st.SalesTeam = 'Carlos Miller';
SELECT    (SELECT COUNT(OrderNumber) FROM Sales_Orders WHERE _ProductID IN (SELECT ProductID FROM Products WHERE Product_Name = 'Platters')) AS Platters_Orders,   (SELECT COUNT(OrderNumber) FROM Sales_Orders WHERE _ProductID IN (SELECT ProductID FROM Products WHERE Product_Name = 'Serveware')) AS Serveware_Orders;
SELECT    SUM((UnitPrice - UnitCost) * OrderQuantity) AS TotalNetProfit FROM    SalesOrders   INNER JOIN StoreLocations ON SalesOrders._StoreID = StoreLocations.StoreID WHERE    CityName = (     SELECT        CityName     FROM        StoreLocations     ORDER BY        MedianIncome DESC     LIMIT 1   )
SELECT _SalesTeamID, COUNT(OrderNumber) AS NumOfOrders FROM SalesOrders WHERE _SalesTeamID BETWEEN 1 AND 9 AND _SalesTeamID IN (SELECT SalesTeamID FROM SalesTeam WHERE Region = 'South') GROUP BY _SalesTeamID;
SELECT COUNT(OrderNumber) FROM SalesOrders WHERE OrderDate = '2018-05-31';
SELECT OrderNumber FROM SalesOrders WHERE DeliveryDate = '2018-06-13';
SELECT COUNT(*)  FROM SalesOrders  WHERE OrderQuantity > 5;
SELECT State FROM Regions WHERE StateCode = 'GA';
SELECT COUNT(DISTINCT State) FROM Regions WHERE Region = 'Midwest';
SELECT p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.UnitCost = 781.22;
SELECT so.DeliveryDate FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE p.ProductName = 'Cookware';
SELECT COUNT(*) FROM Sales_Orders WHERE _ProductID IN (   SELECT ProductID   FROM Products   WHERE Product_Name = 'Furniture Cushions' ) AND SUBSTR(OrderDate, -2) = '18';
SELECT p.ProductName FROM Products p JOIN SalesOrders so ON p.ProductID = so._ProductID WHERE so.DiscountApplied = 0.1;
SELECT AVG(UnitPrice - UnitCost) AS AverageNetProfit FROM SalesOrders JOIN Products ON SalesOrders._ProductID = Products.ProductID WHERE Products.ProductName = 'Phones' AND SalesOrders.SalesChannel = 'Distributor';
SELECT AVG(UnitPrice - UnitCost) AS AverageNetProfit FROM SalesOrders WHERE _ProductID IN (SELECT ProductID FROM Products WHERE ProductName = 'Bar Tools') AND OrderQuantity > 5;
SELECT sl.CityName FROM StoreLocations sl JOIN Regions r ON sl.StateCode = r.StateCode WHERE r.Region = 'South';
SELECT DISTINCT Region FROM Store_Locations WHERE Type = 'Town';
SELECT COUNT(OrderNumber) FROM Sales_Orders WHERE _CustomerID IN (   SELECT CustomerID   FROM Customers   WHERE Customer_Names = 'Medsep Group' );
SELECT so.OrderNumber, so.DiscountApplied FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID WHERE c.CustomerNames = 'Ole Group' AND so.DiscountApplied IS NOT NULL;
SELECT c.CustomerNames FROM Customers c JOIN SalesOrders so ON c.CustomerID = so._CustomerID WHERE so.ShipDate = '7/8/18';
SELECT COUNT(*) FROM SalesOrders WHERE _CustomerID IN (   SELECT CustomerID   FROM Customers   WHERE CustomerNames = 'Ei' ) AND OrderQuantity > 4;
SELECT COUNT(*) FROM SalesOrders WHERE _CustomerID IN (SELECT CustomerID FROM Customers WHERE CustomerNames = 'Pacific Ltd') AND DiscountApplied = 0.05;
SELECT c.CustomerNames FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID WHERE so.UnitCost > 4000;
SELECT StoreID, Latitude, Longitude FROM Store_Locations WHERE City_Name = 'Birmingham';
SELECT CityName FROM StoreLocations WHERE Population = (SELECT MAX(Population) FROM StoreLocations);
SELECT COUNT(*) FROM Store_Locations WHERE State = 'California' AND Type = 'CDP';
SELECT so.OrderNumber, p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.UnitPrice = (SELECT MIN(UnitPrice) FROM SalesOrders);
SELECT p.ProductName, MAX(so.UnitPrice - so.UnitCost) AS MaxNetProfit FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.OrderDate LIKE '%/19' GROUP BY p.ProductName ORDER BY MaxNetProfit DESC LIMIT 1;
SELECT AVG(Unit Price) FROM Sales Orders JOIN Products ON Sales Orders._ProductID = Products.ProductID WHERE Product Name = 'Cookware';
SELECT st.SalesTeam FROM SalesTeam st JOIN SalesOrders so ON st.SalesTeamID = so._SalesTeamID WHERE so.OrderDate = '5/31/18';
SELECT st.SalesTeam, COUNT(so.OrderNumber) AS TotalOrders FROM SalesOrders so JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE SUBSTR(so.OrderDate, -2) = '19' GROUP BY st.SalesTeam ORDER BY TotalOrders ASC LIMIT 1;
SELECT SUBSTR(so.OrderDate, -2) AS Year, COUNT(so.OrderNumber) AS NumOrders FROM SalesOrders so JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE st.SalesTeam = 'George Lewis' AND SUBSTR(so.OrderDate, -2) IN ('18', '19', '20') GROUP BY SUBSTR(so.OrderDate, -2) ORDER BY NumOrders DESC LIMIT 1;
SELECT    DIVIDE(COUNT(OrderNumber) FILTER (WHERE sl.County = 'Orange County' AND SUBSTR(so.OrderDate, -2) = '18'),           COUNT(OrderNumber) FILTER (WHERE SUBSTR(so.OrderDate, -2) = '18')) AS percentage FROM    SalesOrders so JOIN    StoreLocations sl ON so._StoreID = sl.StoreID WHERE    SUBSTR(so.OrderDate, -2) = '18';
SELECT OrderNumber, UnitPrice FROM SalesOrders WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM SalesOrders);
SELECT _SalesTeamID, COUNT(OrderNumber) AS NumOrders FROM SalesOrders WHERE SUBSTR(OrderDate, -2) = '18' GROUP BY _SalesTeamID ORDER BY NumOrders DESC LIMIT 1;
SELECT UnitCost FROM SalesOrders WHERE OrderNumber = 'SO - 000103';
SELECT COUNT(so.OrderNumber) AS TotalOrders FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE sl.County = 'Maricopa' AND SUBSTR(so.OrderDate, -2) = '20';
SELECT Latitude, Longitude FROM Store_Locations WHERE StoreID IN (   SELECT _StoreID   FROM Sales_Orders   WHERE OrderNumber = 'SO - 000115' );
SELECT sl.CityName, COUNT(so.OrderNumber) AS TotalOrders FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE so.OrderDate BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY sl.CityName;
SELECT c.CustomerNames FROM Customers c JOIN SalesOrders so ON c.CustomerID = so._CustomerID WHERE SUBSTR(so.OrderDate, -2) = '18' GROUP BY c.CustomerNames HAVING COUNT(so.OrderNumber) > 3;
SELECT COUNT(OrderNumber) AS Total_Orders FROM Sales_Orders WHERE _CustomerID IN (SELECT CustomerID FROM Customers WHERE Customer_Names = 'Medsep Group') AND SUBSTR(OrderDate, -2) IN ('18', '19', '20');
SELECT c.CustomerNames FROM Customers c JOIN SalesOrders so ON c.CustomerID = so._CustomerID WHERE so.OrderDate = '2018-06-01' AND so.OrderQuantity > 5;
SELECT    (COUNT(CASE WHEN (UnitPrice - UnitCost) > 1000 THEN OrderNumber ELSE NULL END) /     COUNT(CASE WHEN SalesTeamID IN (SELECT SalesTeamID FROM SalesTeam WHERE SalesTeam = 'Stephen Payne') THEN OrderNumber ELSE NULL END)) * 100  AS percentage FROM SalesOrders  JOIN SalesTeam ON SalesOrders._SalesTeamID = SalesTeam.SalesTeamID  WHERE SalesTeamID IN (SELECT SalesTeamID FROM SalesTeam WHERE SalesTeam = 'Stephen Payne');
SELECT COUNT(DISTINCT st.SalesTeamID) FROM Sales_Team st JOIN Regions r ON st.Region = r.Region WHERE r.Region = 'Northeast';
SELECT CityName, Latitude, Longitude FROM StoreLocations WHERE County = 'Maricopa County';
SELECT OrderNumber FROM SalesOrders WHERE UnitCost = (SELECT MAX(UnitCost) FROM SalesOrders);
SELECT ProductName FROM Products WHERE ProductID BETWEEN 30 AND 40;
SELECT MAX(Unit_Cost) / MIN(Unit_Cost) AS Ratio FROM Sales_Orders;
SELECT p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE SUBSTR(so.OrderDate, -2) = '18' GROUP BY p.ProductName ORDER BY COUNT(so.OrderNumber) DESC LIMIT 1;
SELECT SUM(so.OrderQuantity)  FROM SalesOrders so  JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID  JOIN Products p ON so._ProductID = p.ProductID  WHERE st.SalesTeam = 'Adam Hernandez';
SELECT so.OrderNumber FROM Sales_Orders so JOIN Store_Locations sl ON so._StoreID = sl.StoreID WHERE sl.City_Name = 'Daly City';
SELECT COUNT(OrderNumber) FROM Sales_Orders WHERE _CustomerID IN (   SELECT CustomerID   FROM Customers   WHERE Customer_Names = 'Rochester Ltd' );
SELECT so.OrderNumber FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID WHERE c.CustomerNames = 'Qualitest' AND so.OrderQuantity = (     SELECT MAX(so2.OrderQuantity)     FROM SalesOrders so2     JOIN Customers c2 ON so2._CustomerID = c2.CustomerID     WHERE c2.CustomerNames = 'Qualitest' );
SELECT so.OrderNumber, p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.SalesChannel = 'In-Store';
SELECT COUNT(*)  FROM SalesOrders  WHERE SalesChannel = 'Online'  AND OrderDate LIKE '5/%/18'  AND _StoreID IN (SELECT StoreID                    FROM StoreLocations                    WHERE CityName = 'Norman');
SELECT p.ProductName FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID JOIN Products p ON so._ProductID = p.ProductID WHERE sl.County = 'Maricopa' GROUP BY p.ProductName ORDER BY MIN(so.OrderQuantity) LIMIT 1;
SELECT so.OrderNumber FROM Sales_Orders so JOIN Sales_Team st ON so._SalesTeamID = st.SalesTeamID WHERE st.Sales_Team = 'Samuel Fowler';
SELECT SUM(OrderQuantity)  FROM SalesOrders  JOIN Products ON SalesOrders._ProductID = Products.ProductID  WHERE Products.ProductName = 'Baseball'  AND SalesOrders.OrderDate LIKE '12/%/17';
SELECT    AVG(monthly_ornaments) AS avg_ornaments_per_month FROM (   SELECT      SUM(CASE WHEN p.ProductName = 'Ornaments' THEN so.OrderQuantity ELSE 0 END) AS monthly_ornaments   FROM      SalesOrders so   JOIN      Products p ON so._ProductID = p.ProductID   WHERE      so.OrderDate LIKE '%/18'   GROUP BY      MONTH(so.OrderDate) ) AS subquery;
SELECT    DIVIDE(     SUM(so.Order_Quantity)   ,      (SELECT SUM(Order_Quantity) FROM Sales_Orders WHERE SUBSTR(OrderDate, -2) = '18')   ) * 100 AS percentage FROM    Sales_Orders so   JOIN Store_Locations sl ON so._StoreID = sl.StoreID WHERE    sl.City_Name = 'Burbank'    AND SUBSTR(so.OrderDate, -2) = '18';
SELECT    ABS(COUNT(CASE WHEN WarehouseCode = 'WARE-MKL1006' THEN OrderNumber END)       - COUNT(CASE WHEN WarehouseCode = 'WARE-NBV1002' THEN OrderNumber END))  AS Difference_In_Order_Number FROM Sales_Orders;
SELECT p.ProductName FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID JOIN Products p ON so._ProductID = p.ProductID WHERE c.CustomerNames = 'Sundial' AND so.DeliveryDate LIKE '%/21';
SELECT sl.StoreID, r.Region FROM Store_Locations sl JOIN Regions r ON sl.StateCode = r.StateCode WHERE r.State = 'Michigan';
SELECT    CustomerNames,    COUNT(OrderNumber) AS TotalOrders FROM    SalesOrders    INNER JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID WHERE    CustomerNames IN ('Apollo Ltd', 'Pacific Ltd') GROUP BY    CustomerNames;
SELECT _StoreID, COUNT(OrderNumber) as order_count FROM SalesOrders JOIN StoreLocations ON SalesOrders._StoreID = StoreLocations.StoreID WHERE CityName BETWEEN 'Aurora (Township)' AND 'Babylon (Town)' GROUP BY _StoreID ORDER BY order_count DESC LIMIT 1;
SELECT c.CustomerNames, p.ProductName FROM SalesOrders so JOIN Customers cu ON so._CustomerID = cu.CustomerID JOIN Products p ON so._ProductID = p.ProductID JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE st.SalesTeam = 'Anthony Torres' AND so.SalesChannel = 'Distributor';
SELECT c.CustomerID, c.CustomerNames FROM Customers c WHERE c.CustomerID IN (   SELECT so._CustomerID   FROM SalesOrders so   WHERE so.SalesChannel = 'Online'   GROUP BY so._CustomerID   HAVING SUM(so.UnitPrice - so.UnitCost) * so.OrderQuantity > 5000 )
SELECT SUM(UnitPrice - UnitCost) AS NetProfit FROM SalesOrders JOIN Products ON SalesOrders._ProductID = Products.ProductID WHERE Products.ProductName = 'Floral' AND SalesOrders.DeliveryDate LIKE '%/21';
SELECT COUNT(so.OrderNumber) FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE sl.Population BETWEEN 3000000 AND 4000000;
SELECT p.ProductName FROM Products p JOIN SalesOrders so ON p.ProductID = so._ProductID JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE so.SalesChannel = 'Wholesale' AND sl.TimeZone = 'Pacific/Honolulu';
SELECT so.OrderNumber, p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.OrderDate = '6/5/18';
SELECT AVG(Order_Quantity) AS Average_Order FROM Sales_Orders WHERE _CustomerID = (SELECT CustomerID FROM Customers WHERE Customer_Names = 'Weimei Corp') AND SUBSTR(OrderDate, -2) IN ('18', '19', '20');
SELECT    AVG_Monthly_Order = COUNT(OrderNumber) / 12,   Percentage_Warehouse = (COUNT(CASE WHEN WarehouseCode = 'WARE-NMK1003' THEN OrderNumber ELSE NULL END) * 1.0 / COUNT(OrderNumber)) * 100,   Num_Orders_Floor_Lamps = COUNT(CASE WHEN _ProductID IN (SELECT ProductID FROM Products WHERE ProductName = 'Floor Lamps') THEN OrderNumber ELSE NULL END) FROM    SalesOrders WHERE    SUBSTR(OrderDate, -2) = '19';
SELECT ProcuredDate FROM Sales_Orders WHERE _CustomerID = 11;
SELECT COUNT(*) FROM SalesOrders WHERE SalesChannel = 'Distributor' AND OrderQuantity = (SELECT MIN(OrderQuantity) FROM SalesOrders WHERE SalesChannel = 'Distributor');
SELECT DISTINCT so._SalesTeamID FROM SalesOrders so WHERE so.DiscountApplied = 0.1 AND so.SalesChannel = 'In-Store';
SELECT COUNT(*) FROM Store_Locations WHERE City_Name = 'Brooklyn' AND Type = 'Borough' AND Population < 3000000;
SELECT COUNT(DISTINCT State) FROM Regions WHERE Region = 'Midwest';
SELECT    p.ProductName,    SUM(so.OrderQuantity * (so.UnitPrice - so.UnitCost)) AS NetProfit FROM    SalesOrders so   JOIN Products p ON so._ProductID = p.ProductID GROUP BY    p.ProductName ORDER BY    NetProfit DESC LIMIT 10;
SELECT CustomerNames FROM Customers WHERE CustomerID IN (   SELECT _CustomerID   FROM SalesOrders   WHERE OrderQuantity = 3 AND OrderDate LIKE '2/%/18' );
SELECT st.SalesTeam FROM SalesTeam st JOIN SalesOrders so ON st.SalesTeamID = so._SalesTeamID JOIN Customers c ON so._CustomerID = c.CustomerID WHERE c.CustomerNames = 'Apotheca, Ltd';
SELECT DISTINCT r.Region FROM Sales_Orders so JOIN Store_Locations sl ON so._StoreID = sl.StoreID JOIN Regions r ON sl.StateCode = r.StateCode WHERE so.WarehouseCode = 'WARE-UHY1004';
SELECT sl.CityName FROM SalesOrders so JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID JOIN StoreLocations sl ON so._StoreID = sl.StoreID JOIN Products p ON so._ProductID = p.ProductID WHERE st.SalesTeam = 'Shawn Torres' AND p.ProductName = 'Audio';
SELECT p.ProductName, c.CustomerNames FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID JOIN Customers c ON so._CustomerID = c.CustomerID WHERE so.OrderDate = '10/21/18' AND so.DeliveryDate = '11/21/19';
SELECT COUNT(DISTINCT sl.StoreID) FROM Sales_Orders so JOIN Store_Locations sl ON so._StoreID = sl.StoreID WHERE so.ProcuredDate = '10/27/18' AND sl.State = 'Oregon';
SELECT SalesChannel, COUNT(*) AS Frequency FROM SalesOrders JOIN StoreLocations ON SalesOrders._StoreID = StoreLocations.StoreID WHERE StoreLocations.StoreID IN (   SELECT StoreID   FROM StoreLocations   ORDER BY MedianIncome DESC   LIMIT 3 ) GROUP BY SalesChannel ORDER BY Frequency DESC;
SELECT    st.SalesTeam,    SUM((so.UnitPrice - so.UnitCost) * so.OrderQuantity) AS NetProfit FROM    SalesOrders so    INNER JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID GROUP BY    st.SalesTeam ORDER BY    NetProfit DESC LIMIT 5;
SELECT MAX(Discount_Applied)  FROM Sales_Orders  WHERE _StoreID IN (     SELECT StoreID      FROM Store_Locations      WHERE StateCode = 'CO' AND Land_Area = 111039036 );
SELECT COUNT(DISTINCT Time_Zone) FROM Store_Locations WHERE StateCode IN (   SELECT StateCode   FROM Regions   WHERE Region = 'Northeast' );
SELECT Type FROM Store_Locations JOIN Sales_Orders ON Store_Locations.StoreID = Sales_Orders._StoreID JOIN Regions ON Store_Locations.StateCode = Regions.StateCode WHERE Regions.Region = 'South' GROUP BY Type ORDER BY COUNT(Type) DESC LIMIT 1;
SELECT r.Region FROM Sales_Team st JOIN Sales_Orders so ON st.SalesTeamID = so._SalesTeamID JOIN Regions r ON st.Region = r.StateCode WHERE so.WarehouseCode = 'WARE-MKL1006' GROUP BY r.Region ORDER BY COUNT(r.Region) DESC LIMIT 1;
SELECT sl.City_Name FROM Store_Locations sl JOIN Sales_Orders so ON sl.StoreID = so._StoreID WHERE so.Unit_Price = (SELECT MAX(Unit_Price) FROM Sales_Orders);
SELECT COUNT(*)  FROM SalesOrders  WHERE _CustomerID IN (SELECT CustomerID FROM Customers WHERE CustomerNames = 'Ole Group')  AND SalesChannel = 'Online'  AND OrderDate LIKE '5/%/19';
SELECT COUNT(DISTINCT sl.StoreID) FROM Sales_Orders so JOIN Store_Locations sl ON so._StoreID = sl.StoreID WHERE so.Order_Quantity = 1 AND so.Sales_Channel = 'Distributor' AND sl.County = 'Washtenaw County';
SELECT p.ProductName FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID JOIN Products p ON so._ProductID = p.ProductID WHERE sl.CityName = 'Santa Clarita' GROUP BY p.ProductName ORDER BY COUNT(p.ProductName) LIMIT 1;
SELECT sl.Latitude, sl.Longitude FROM Sales_Orders so JOIN Store_Locations sl ON so._StoreID = sl.StoreID WHERE so.WarehouseCode = 'WARE-PUJ1005' GROUP BY sl.Latitude, sl.Longitude ORDER BY COUNT(so.WarehouseCode) ASC LIMIT 1;
SELECT    (SUM(CASE WHEN sl.OrderDate = '2020-04-04' AND stl.State = 'New York' THEN 1 ELSE 0 END) /     COUNT(CASE WHEN sl.OrderDate = '2020-04-04' THEN 1 ELSE NULL END)) * 100 AS Percentage FROM    SalesOrders sl JOIN    StoreLocations stl ON sl._StoreID = stl.StoreID WHERE    sl.OrderDate = '2020-04-04';
SELECT AVG(sl.Land_Area)  FROM Store_Locations sl  JOIN Sales_Orders so ON sl.StoreID = so._StoreID  JOIN Products p ON so._ProductID = p.ProductID  WHERE so.Unit_Price = 998.30;
SELECT AVG(Household_Income)  FROM Store_Locations  WHERE State = 'New Hampshire' AND Type = 'City';
SELECT COUNT(DISTINCT st.SalesTeamID) FROM Sales_Team st JOIN Regions r ON st.Region = r.Region WHERE r.Region = 'Midwest';
SELECT OrderNumber FROM SalesOrders WHERE OrderDate > '2018-01-01';
SELECT COUNT(DISTINCT so.SalesChannel) FROM SalesOrders so JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID JOIN Regions r ON st.Region = r.Region WHERE r.Region = 'Midwest';
SELECT st.SalesTeam, MAX(so.UnitPrice) AS Highest_Unit_Price FROM SalesOrders so JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID GROUP BY st.SalesTeam ORDER BY Highest_Unit_Price DESC LIMIT 1;
SELECT r.Region, MAX(so.DiscountApplied) AS MaxDiscount FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID JOIN Regions r ON sl.StateCode = r.StateCode WHERE so.SalesChannel = 'Online' GROUP BY r.Region ORDER BY MaxDiscount DESC;
SELECT OrderDate, OrderNumber, UnitPrice FROM SalesOrders WHERE _CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerNames = 'Apollo Ltd') AND UnitPrice = (SELECT MAX(UnitPrice) FROM SalesOrders                  WHERE _CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerNames = 'Apollo Ltd'));
SELECT so.OrderNumber, so.WarehouseCode FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID WHERE c.CustomerNames = 'Elorac, Corp';
SELECT c.CustomerNames FROM Customers c JOIN SalesOrders so ON c.CustomerID = so._CustomerID JOIN Products p ON so._ProductID = p.ProductID WHERE p.ProductName = 'Cocktail Glasses' AND so.SalesChannel = 'online';
SELECT sl.City Name, (so.Unit Price - so.Unit Cost) * so.Order Quantity AS NetProfit FROM Sales Orders so JOIN Store Locations sl ON so._StoreID = sl.StoreID JOIN Regions r ON sl.StateCode = r.StateCode WHERE r.State = 'Arizona' ORDER BY NetProfit DESC LIMIT 1;
SELECT    (SELECT UnitPrice     FROM SalesOrders     JOIN StoreLocations ON SalesOrders._StoreID = StoreLocations.StoreID     JOIN Products ON SalesOrders._ProductID = Products.ProductID     WHERE Products.ProductName = 'Computers' AND StoreLocations.State = 'Florida')    -    (SELECT UnitPrice     FROM SalesOrders     JOIN StoreLocations ON SalesOrders._StoreID = StoreLocations.StoreID     JOIN Products ON SalesOrders._ProductID = Products.ProductID     WHERE Products.ProductName = 'Computers' AND StoreLocations.State = 'Texas') AS UnitPriceDifference;
SELECT st.SalesTeam FROM SalesTeam st JOIN Regions r ON st.Region = r.Region JOIN SalesOrders so ON st.SalesTeamID = so._SalesTeamID WHERE r.Region = 'Midwest' AND so.OrderQuantity > 5 GROUP BY st.SalesTeam HAVING SUM(so.OrderQuantity) > 5;
SELECT sl.StoreID FROM Sales_Orders so JOIN Store_Locations sl ON so._StoreID = sl.StoreID WHERE so.Discount_Applied = '0.2' AND so.Sales_Channel = 'In-Store' AND sl.State = 'California';
SELECT CustomerNames FROM Customers WHERE CustomerID = (   SELECT _CustomerID   FROM SalesOrders   WHERE OrderDate BETWEEN '2018-01-01' AND '2020-12-31'   GROUP BY _CustomerID   ORDER BY SUM(OrderQuantity) DESC   LIMIT 1 );
SELECT    SUM(CASE WHEN p.ProductName = 'Candles' THEN so.OrderQuantity ELSE 0 END) AS TotalCandlesOrder,   (SUM(CASE WHEN p.ProductName = 'Candles' THEN so.OrderQuantity ELSE 0 END) / SUM(so.OrderQuantity)) * 100 AS PercentageOfCandles FROM    SalesOrders so   JOIN Products p ON so._ProductID = p.ProductID;
SELECT r.Region FROM Sales_Team st JOIN Regions r ON st.Region = r.Region WHERE st.Sales_Team = 'Joshua Bennett';
SELECT StoreID FROM Store_Locations WHERE Population = (SELECT MAX(Population) FROM Store_Locations);
SELECT COUNT(DISTINCT st.SalesTeamID) FROM Sales_Team st JOIN Regions r ON st.Region = r.Region WHERE r.Region = 'Midwest';
SELECT Type FROM Store_Locations WHERE City_Name = (   SELECT City_Name   FROM Store_Locations   ORDER BY Water_Area DESC   LIMIT 1 ) AND Type = 'City';
SELECT COUNT(*) FROM SalesOrders WHERE SalesChannel = 'Online' AND SUBSTR(ShipDate, 1, 1) = '6' AND SUBSTR(ShipDate, -2) = '18';
SELECT MAX(DiscountApplied)  FROM SalesOrders  WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM SalesOrders);
SELECT p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID GROUP BY p.ProductName ORDER BY (so.UnitPrice - so.UnitCost) DESC LIMIT 1;
SELECT sl.City_Name, AVG(sl.Household_Income) / COUNT(sl.City_Name) AS Avg_Household_Income FROM Store_Locations sl JOIN Regions r ON sl.StateCode = r.StateCode WHERE r.Region = 'Northeast' AND sl.StateCode IN (     SELECT StateCode     FROM Store_Locations     GROUP BY StateCode     ORDER BY COUNT(StoreID) DESC     LIMIT 1 ) GROUP BY sl.City_Name;
SELECT DISTINCT r.Region FROM Store_Locations sl JOIN Regions r ON sl.StateCode = r.StateCode WHERE sl.Median_Income < 30000;
SELECT COUNT(DISTINCT sl.StoreID) FROM Store_Locations sl JOIN Regions r ON sl.StateCode = r.StateCode WHERE r.Region = 'West' AND sl.Land_Area < 20000000;
SELECT c.CustomerNames FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID WHERE (so.UnitPrice - so.UnitCost) = (   SELECT MAX(so2.UnitPrice - so2.UnitCost)   FROM SalesOrders so2 );
SELECT st.SalesTeam, COUNT(so.OrderNumber) AS TotalOrders FROM SalesOrders so JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE SUBSTR(so.OrderDate, -2) = '19' AND SUBSTR(so.ShipDate, -2) = '19' GROUP BY st.SalesTeam ORDER BY TotalOrders DESC LIMIT 1;
SELECT p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.OrderQuantity > 5 AND so.ShipDate LIKE '5/%/19' GROUP BY p.ProductName ORDER BY (so.UnitPrice - so.UnitCost) ASC LIMIT 1;
SELECT sl.Latitude, sl.Longitude FROM Sales_Orders so JOIN Store_Locations sl ON so._StoreID = sl.StoreID JOIN Products p ON so._ProductID = p.ProductID ORDER BY (so.Unit_Price - so.Unit_Cost) * so.Order_Quantity DESC OFFSET 3 ROW FETCH NEXT 1 ROW ONLY;
SELECT st.SalesTeam, COUNT(so.OrderNumber) AS TotalOrders FROM SalesOrders so JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE SUBSTR(so.ShipDate, -2) = '20' GROUP BY st.SalesTeam ORDER BY TotalOrders DESC LIMIT 1;
SELECT AVG(orders_per_year) AS avg_shipped_orders_per_year FROM (   SELECT COUNT(DISTINCT so.OrderNumber) AS orders_per_year   FROM Sales_Orders so   JOIN Sales_Team st ON so._SalesTeamID = st.SalesTeamID   WHERE st.Sales_Team = 'Carl Nguyen'   AND SUBSTR(so.ShipDate, -2) IN ('18', '19', '20')   GROUP BY SUBSTR(so.ShipDate, -2) ) AS subquery;
SELECT    MAX(Discount_Applied) AS Max_Discount,   P.Product_Name FROM    Sales_Orders SO   JOIN Products P ON SO._ProductID = P.ProductID WHERE    (Unit_Price - Unit_Cost) = (     SELECT        MAX(Unit_Price - Unit_Cost)      FROM        Sales_Orders   ) GROUP BY    P.Product_Name;
SELECT c.CustomerNames FROM Customers c JOIN SalesOrders so ON c.CustomerID = so._CustomerID GROUP BY c.CustomerNames ORDER BY (so.UnitPrice * so.OrderQuantity - so.DiscountApplied) DESC LIMIT 3;
SELECT SalesChannel FROM SalesOrders WHERE Substr(OrderDate, 1, 1) = '1' AND Substr(OrderDate, -2) = '20' GROUP BY SalesChannel ORDER BY COUNT(OrderNumber) DESC LIMIT 1;
SELECT p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.OrderNumber = 'SO - 0005951';
SELECT sl.CityName, st.SalesTeam FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE so.OrderNumber = 'SO - 0001004';
SELECT c.CustomerID, c.CustomerNames,         MAX(so.UnitPrice - so.UnitCost) AS MaxNetProfit FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE sl.CityName = 'Gilbert' AND sl.State = 'Arizona' AND so.ProcuredDate LIKE '%/19' GROUP BY c.CustomerID, c.CustomerNames ORDER BY MaxNetProfit DESC LIMIT 1;
SELECT COUNT(*) FROM SalesOrders WHERE _StoreID IN (   SELECT StoreID   FROM StoreLocations   WHERE CityName = 'Chandler' ) AND Substr(OrderDate, -2) = '20';
SELECT AVG(HouseholdIncome)  FROM StoreLocations  WHERE CityName = 'Glendale';
SELECT MAX(Discount_Applied)  FROM Sales_Orders  WHERE SUBSTR(OrderDate, -2) = '20';
WITH tied_games AS (   SELECT Date, AwayTeam, FTR,          CASE WHEN FTR = 'D' THEN 1 ELSE 0 END AS is_tie,          (CASE WHEN FTR = 'D' THEN 1 ELSE 0 END) -          ROW_NUMBER() OVER (PARTITION BY AwayTeam, CASE WHEN FTR = 'D' THEN 1 ELSE 0 END ORDER BY Date) AS tie_group   FROM matchs   WHERE AwayTeam = 'Ebbsfleet' AND season = '2008' ) SELECT MAX(COUNT(*)) AS max_consecutive_ties FROM tied_games WHERE is_tie = 1 GROUP BY tie_group;
SELECT      DIVIDE(COUNT(CASE WHEN country = 'England' THEN division END), COUNT(division))  AS percentage;
SELECT    COUNT(CASE WHEN FTR = 'H' THEN 1 END) / COUNT(*) * 100 AS win_pct,   COUNT(CASE WHEN FTR = 'A' THEN 1 END) / COUNT(*) * 100 AS loss_pct,   COUNT(CASE WHEN FTR = 'D' THEN 1 END) / COUNT(*) * 100 AS draw_pct FROM matchs WHERE HomeTeam = 'Cittadella';
SELECT AwayTeam,         MAX(DIVIDE(COUNT(CASE WHEN FTR = 'A' THEN 1 END), COUNT(*)) AS percentage FROM matchs WHERE AwayTeam IS NOT NULL AND HomeTeam = 'Caen' AND season = '2010' GROUP BY AwayTeam ORDER BY percentage DESC LIMIT 1;
SELECT    DIVIDE(COUNT(CASE WHEN Div = 'F1' AND Date = '2005-07-30' THEN 1 END),           COUNT(CASE WHEN Date = '2005-07-30' THEN 1 END)) * 100 AS percentage FROM matchs;
SELECT    ROUND(     100.0 * COUNT(CASE WHEN FTR = 'D' THEN 1 END) / COUNT(*)   ) AS percentage FROM    matchs WHERE    HomeTeam = 'Sassuolo' OR AwayTeam = 'Sassuolo';
SELECT    DIVIDE(COUNT(*), (SELECT COUNT(*) FROM matchs WHERE season = 2017)) * 100 as percentage FROM    matchs WHERE    season = 2017 AND FTAG = 2;
SELECT DISTINCT HomeTeam FROM matchs WHERE Div = 'E2' UNION SELECT DISTINCT AwayTeam FROM matchs WHERE Div = 'E2';
SELECT COUNT(DISTINCT t) FROM (   SELECT HomeTeam AS t   FROM european_football_1.matchs   WHERE FTAG >= 4 AND Div IN (     SELECT division     FROM european_football_1.divisions     WHERE country = 'Greece'   )   UNION ALL   SELECT AwayTeam AS t   FROM european_football_1.matchs   WHERE FTHG >= 4 AND Div IN (     SELECT division     FROM european_football_1.divisions     WHERE country = 'Greece'   ) ) AS subquery;
SELECT COUNT(*) FROM matchs m JOIN divisions d ON m.Div = d.division WHERE d.name = 'Scottish Championship' AND m.season = '2019' AND m.FTHG = 2 AND m.FTAG = 2;
SELECT HomeTeam, season FROM matchs WHERE FTHG = 10 AND Div IN (SELECT division FROM divisions WHERE country = 'Scotland') GROUP BY HomeTeam, season HAVING COUNT(DISTINCT HomeTeam) = 2;
SELECT    HomeTeam,    COUNT(FTR) AS wins,    COUNT(FTR) / (SELECT COUNT(*) FROM matchs WHERE Div IN (SELECT division FROM divisions WHERE name = 'LaLiga' AND country = 'Spain' AND season = 2017)) * 100 AS percentage FROM    matchs  WHERE    Div IN (SELECT division FROM divisions WHERE name = 'LaLiga' AND country = 'Spain' AND season = 2017)    AND FTR = 'H'  GROUP BY    HomeTeam  ORDER BY    wins DESC  LIMIT 1;
SELECT    d.division,    COUNT(DISTINCT m.HomeTeam) AS num_teams,    ROUND(COUNT(DISTINCT m.HomeTeam) / (SELECT COUNT(DISTINCT HomeTeam) FROM matchs WHERE season = 2012) * 100, 2) AS percentage FROM    matchs m    JOIN divisions d ON m.Div = d.division  WHERE    m.season = 2012 AND    d.country = 'England'  GROUP BY    d.division;
SELECT HomeTeam, FTHG + FTAG AS TotalGoals FROM matchs WHERE season = 2021 ORDER BY TotalGoals DESC LIMIT 1;
SELECT HomeTeam FROM matchs WHERE Div = 'P1' AND FTHG = (SELECT MAX(FTHG) FROM matchs WHERE Div = 'P1');
SELECT    d.division,    (COUNT(CASE WHEN m.FTR = 'H' THEN 1 ELSE NULL END) / COUNT(*) - COUNT(CASE WHEN m.FTR = 'A' THEN 1 ELSE NULL END) / COUNT(*)) AS win_percentage_diff FROM    european_football_1.matchs m   JOIN european_football_1.divisions d ON m.Div = d.division WHERE    m.season = 2010 GROUP BY    d.division;
SELECT d.name, COUNT(m.Div) as num_draft_matches FROM european_football_1.matchs m JOIN european_football_1.divisions d ON m.Div = d.division WHERE m.FTR = 'D' AND m.season = '2008' GROUP BY d.name ORDER BY num_draft_matches DESC LIMIT 1;
SELECT HomeTeam FROM matchs WHERE Div = 'EC' AND Date = '2008-01-20' AND FTR = 'H';
SELECT d.name FROM divisions d JOIN matchs m ON d.division = m.Div WHERE m.Date = '2009-09-13' AND m.HomeTeam = 'Club Brugge' AND m.AwayTeam = 'Genk';
SELECT COUNT(*) FROM matchs m JOIN divisions d ON m.Div = d.division WHERE d.name = 'Scottish Premiership' AND m.season BETWEEN 2006 AND 2008;
SELECT d.name, d.country FROM divisions d JOIN matchs m ON d.division = m.Div WHERE m.HomeTeam = 'Hearts' AND m.AwayTeam = 'Hibernian';
SELECT AwayTeam, MAX(FTAG) AS Max_FT_Away_Goals FROM matchs WHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga') GROUP BY AwayTeam ORDER BY Max_FT_Away_Goals DESC LIMIT 1;
SELECT AwayTeam FROM matchs WHERE Div IN (SELECT division                FROM divisions                WHERE country = 'Italy') LIMIT 3;
SELECT d.name FROM divisions d JOIN (   SELECT Div, MIN(num_draft_matches) AS min_draft_matches   FROM (     SELECT Div, COUNT(CASE WHEN FTR = 'D' THEN 1 END) AS num_draft_matches     FROM matchs     WHERE season = '2019'     GROUP BY Div   ) AS sub   GROUP BY Div ) AS sub2 ON d.division = sub2.Div;
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'LaLiga' AND m.HomeTeam = 'Valencia' AND m.FTR = 'H';
SELECT COUNT(*) FROM matchs m JOIN divisions d ON m.Div = d.division WHERE d.name = 'Seria A' AND m.FTR = 'D';
SELECT COUNT(*)  FROM divisions  WHERE country = 'England';
SELECT name FROM divisions WHERE country = 'Netherlands';
SELECT AwayTeam FROM matchs WHERE Date = '2009-10-10' AND HomeTeam = 'East Fife' AND AwayTeam = 'Dumbarton' AND FTR = 'A';
SELECT FTHG, FTAG  FROM matchs  WHERE HomeTeam = 'Bursaspor' AND AwayTeam = 'Denizlispor' AND Date = '2009-04-26';
SELECT MIN(Date) FROM matchs WHERE FTHG + FTAG > 10;
SELECT HomeTeam FROM matchs WHERE Div = (SELECT division FROM divisions WHERE name = 'Ligue 2') AND FTR = 'A' AND (FTHG + FTAG) = (SELECT MAX(goals) FROM (     SELECT FTHG + FTAG AS goals     FROM matchs     WHERE Div = (SELECT division FROM divisions WHERE name = 'Ligue 2') ) AS subquery);
SELECT COUNT(*) FROM matchs m JOIN divisions d ON m.Div = d.division WHERE d.name = 'LaLiga 2' AND m.Date = '2016-03-27' AND m.FTR = 'A';
SELECT COUNT(*) FROM matchs m JOIN divisions d ON m.Div = d.division WHERE m.Date = '2018-08-07' AND m.FTR = 'D' AND d.name = 'National League';
SELECT country FROM divisions WHERE division = (   SELECT Div   FROM matchs   GROUP BY Div   ORDER BY MAX(FTAG) DESC   LIMIT 1 )
SELECT d.name FROM european_football_1.divisions d JOIN european_football_1.matchs m ON d.division = m.Div WHERE m.season = '2011' AND m.FTHG = '1' AND m.FTAG = '8';
SELECT d.name FROM divisions d JOIN (   SELECT Div, COUNT(*) AS num_games   FROM matchs   WHERE Date = '2020-02-22' AND FTHG + FTAG > 5   GROUP BY Div   ORDER BY num_games DESC   LIMIT 1 ) m ON d.division = m.Div;
SELECT d.name FROM divisions d JOIN (   SELECT Div, COUNT(*) as cnt   FROM matchs   WHERE FTHG = '0' AND FTAG = '0'   GROUP BY Div   ORDER BY cnt DESC   LIMIT 1 ) m ON d.division = m.Div;
SELECT COUNT(*) FROM matchs WHERE Div = (SELECT division               FROM divisions               WHERE name = 'Scottish League One' AND country = 'Scotland')   AND Date = (SELECT Date                FROM matchs                WHERE HomeTeam = 'Pro Vercelli' AND AwayTeam = 'Pescara' AND FTHG = 5 AND FTAG = 2);
SELECT COUNT(*) FROM matchs m JOIN divisions d ON m.Div = d.division WHERE d.country = 'Greece' AND m.FTHG = '5' AND m.FTAG = '0';
SELECT country FROM divisions WHERE division IN (   SELECT Div   FROM matchs   WHERE HomeTeam = 'Bradford' OR AwayTeam = 'Bradford' );
SELECT COUNT(DISTINCT m.HomeTeam) FROM european_football_1.matchs m JOIN european_football_1.divisions d ON m.Div = d.division WHERE d.name = 'Eredivisie' AND m.season = '2008';
SELECT    DIVIDE(COUNT(CASE WHEN FTR = 'H' THEN 1 ELSE NULL END), COUNT(*)) AS percentage FROM    matchs   JOIN divisions ON matchs.Div = divisions.division WHERE    season = '2021'    AND name = 'Bundesliga';
SELECT    DIVIDE(COUNT(*),            (SELECT COUNT(*)             FROM matchs             WHERE FTHG = '1' AND FTAG = '1'))    AS percentage FROM matchs  WHERE FTHG = '1' AND FTAG = '1' AND Div IN    (SELECT division     FROM divisions     WHERE name = 'Liga NOS');
SELECT COUNT(*) FROM matchs WHERE Div = (SELECT division               FROM divisions               WHERE name = 'Premier League')   AND season = '2021';
SELECT HomeTeam FROM matchs WHERE Div = (SELECT division              FROM divisions              WHERE name = 'Bundesliga') AND Date = '2020/10/2';
SELECT HomeTeam FROM matchs WHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga')   AND Date = '2020/10/2'   AND FTR = 'H';
SELECT HomeTeam, COUNT(*) AS HomeWins FROM matchs WHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga') AND FTR = 'H' GROUP BY HomeTeam ORDER BY HomeWins DESC LIMIT 1;
SELECT COUNT(*) FROM matchs m JOIN divisions d ON m.Div = d.division WHERE d.name = 'Bundesliga' AND m.AwayTeam = 'Werder Bremen' AND m.FTR = 'A';
SELECT COUNT(*) FROM matchs m JOIN divisions d ON m.Div = d.division WHERE d.name = 'Bundesliga' AND m.FTR = 'A' AND m.season = '2021';
SELECT COUNT(*)  FROM matchs m  JOIN divisions d ON m.Div = d.division  WHERE d.name = 'Bundesliga' AND m.FTR = 'D';
SELECT    ABS(     (SELECT COUNT(*) FROM matchs m JOIN divisions d ON m.Div = d.division       WHERE m.season = 2021 AND d.name = 'Bundesliga' AND m.FTR = 'H')     -     (SELECT COUNT(*) FROM matchs m JOIN divisions d ON m.Div = d.division       WHERE m.season = 2021 AND d.name = 'Premier League' AND m.FTR = 'H')   )
SELECT HomeTeam FROM matchs WHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga')   AND season = '2021'   AND FTR = 'H';
SELECT HomeTeam FROM matchs WHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga')   AND season = '2021'   AND HomeTeam IN ('Augsburg', 'Mainz')   AND FTR = 'H' GROUP BY HomeTeam ORDER BY COUNT(*) DESC LIMIT 1;
SELECT HomeTeam, MAX(FTHG) AS Max_FTHG FROM matchs WHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga') AND season = '2021' GROUP BY HomeTeam ORDER BY Max_FTHG DESC LIMIT 1;
SELECT SUM(FTHG)  FROM matchs  WHERE Div IN (SELECT division                 FROM divisions                 WHERE name = 'Bundesliga')  AND season = '2021';
SELECT    SUM(CASE WHEN FTR = 'H' THEN 1 ELSE 0 END) + SUM(CASE WHEN FTR = 'A' THEN 1 ELSE 0 END) * 1.0 /    COUNT(*) AS winning_rate FROM    matchs WHERE    season = 2021 AND    (HomeTeam = 'Club Brugge' OR AwayTeam = 'Club Brugge') AND    Div IN (SELECT division FROM divisions WHERE name = 'Premier League');
SELECT (homeWon / won) * 100 AS percentage_of_winning_at_home FROM teams;
SELECT tmID FROM teams WHERE lost > 0 AND games > 0 AND lost / games > 0.75;
SELECT t1.name, t1.won FROM teams t1 WHERE t1.year = 2005 AND t1.won > (     SELECT t2.won     FROM teams t2     WHERE t2.year = 2004 AND t1.tmID = t2.tmID )
SELECT name, o_pts FROM teams WHERE (homeWon - homeLost) / games > 0.8;
SELECT    (COUNT(CASE WHEN rank = 1 THEN 1 END) / COUNT(*)) * 100 AS percentage FROM    teams WHERE    playoff IS NOT NULL;
SELECT coachID, won, lost FROM coaches WHERE tmID = 'BOS' AND year = 1950;
SELECT coachID, tmID FROM coaches WHERE year BETWEEN 1970 AND 1980 GROUP BY coachID, tmID ORDER BY COUNT(DISTINCT year) DESC LIMIT 1;
SELECT c.coachID, t.name, c.won FROM coaches c JOIN teams t ON c.tmID = t.tmID WHERE c.year = 2000 AND c.won > 50;
SELECT c.coachID, t.name, c.year FROM coaches c JOIN teams t ON c.tmID = t.tmID WHERE c.year BETWEEN 2000 AND 2010 AND c.lost > c.won;
SELECT t.name, t.year, t.o_fgm FROM teams t JOIN coaches c ON t.tmID = c.tmID AND t.year = c.year WHERE c.coachID = 'adelmri01' AND t.year BETWEEN 1990 AND 1995;
SELECT tmID, year, coachID, won, games FROM teams JOIN coaches ON teams.tmID = coaches.tmID AND teams.year = coaches.year WHERE won / games > 0.9;
SELECT    (COUNT(CASE WHEN p.birthState = 'NY' THEN ap.playerID END) / COUNT(ap.playerID)) * 100 AS percentage FROM    awards_players ap   JOIN players p ON ap.playerID = p.playerID WHERE    ap.award = 'All-Defensive First Team' AND ap.year BETWEEN 1980 AND 2000;
SELECT t.divID FROM teams t JOIN coaches c ON t.tmID = c.tmID JOIN awards_coaches ac ON c.coachID = ac.coachID WHERE ac.year = 1977 AND ac.award = 'NBA Coach of the Year' AND t.year = 1976;
SELECT c.coachID FROM coaches c JOIN teams t ON c.tmID = t.tmID JOIN awards_coaches ac ON c.coachID = ac.coachID WHERE t.name = 'Chicago Bulls' AND c.year = 1981 AND ac.year BETWEEN 1970 AND 1979 AND ac.award = 'NBA Coach of the Year';
SELECT nameNick FROM players WHERE playerID IN (   SELECT playerID   FROM player_allstar   WHERE season_id = 2006 AND conference = 'West' AND blocks = 2 );
SELECT year FROM series_post WHERE round = 'DSF' AND tmIDLoser = 'HSM' ORDER BY rank LIMIT 1;
SELECT birthDate FROM players WHERE playerID = (   SELECT playerID   FROM player_allstar   WHERE season_id = 1985   ORDER BY assists DESC   LIMIT 1 );
SELECT p.firstName, p.lastName FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE p.birthCity = 'Winter Haven' AND pa.season_id BETWEEN 1980 AND 1989 AND pa.minutes = 12;
SELECT COUNT(*) FROM player_allstar JOIN players ON player_allstar.playerID = players.playerID WHERE conference = 'East' AND minutes < 5 AND college = 'Illinois';
SELECT    p.firstName,    p.lastName,    SUM(pt.rebounds) AS total_rebounds,    SUM(pt.dRebounds) AS total_defensive_rebounds,    (SUM(pt.dRebounds) / SUM(pt.rebounds)) * 100 AS defensive_rebound_percentage FROM    players p    JOIN players_teams pt ON p.playerID = pt.playerID WHERE    pt.year BETWEEN 1990 AND 2007 GROUP BY    p.firstName,    p.lastName HAVING    (SUM(pt.dRebounds) / SUM(pt.rebounds)) * 100 > 75;
SELECT year, MAX(won / (won + lost)) AS best_balance FROM coaches WHERE coachID = 'costela01' GROUP BY year;
SELECT SUM(pa.minutes)  FROM players p  JOIN player_allstar pa ON p.playerID = pa.playerID  WHERE p.birthCity = 'Brooklyn' AND p.nameNick LIKE '%Superman%';
SELECT t.tmID, t.name, MAX(t.homeLost) AS max_home_lost FROM teams t JOIN coaches c ON t.tmID = c.tmID JOIN awards_coaches ac ON c.coachID = ac.coachID WHERE ac.year = 1994 AND ac.award = 'NBA Coach of the Year' GROUP BY t.tmID, t.name ORDER BY max_home_lost DESC LIMIT 1;
SELECT tmIDWinner FROM series_post WHERE year = 1996 AND lgIDWinner = 'NBA' AND round = 'CSF' AND tmIDLoser = 'LAL' AND tmIDWinner IN (   SELECT tmID   FROM teams   WHERE year = 1996 AND lgID = 'NBA' AND won > 60 );
SELECT lgID FROM players WHERE height = 80 AND weight = (SELECT MAX(weight) * 0.6 FROM players);
SELECT c.firstName, c.lastName FROM coaches c GROUP BY c.coachID HAVING COUNT(DISTINCT c.tmID) > 2;
SELECT c.firstName, c.lastName FROM coaches c JOIN (   SELECT coachID   FROM coaches   ORDER BY post_wins DESC   LIMIT 1 ) AS max_coach ON c.coachID = max_coach.coachID;
SELECT c.coachID, c.year, t.tmID, t.post_losses FROM coaches c JOIN (   SELECT coachID   FROM coaches   GROUP BY coachID   HAVING COUNT(DISTINCT tmID) >= 2 ) AS filtered_coaches ON c.coachID = filtered_coaches.coachID JOIN (   SELECT tmID, MIN(post_losses) AS min_post_losses   FROM coaches   GROUP BY tmID ) AS min_post_losses ON c.tmID = min_post_losses.tmID AND c.post_losses = min_post_losses.min_post_losses;
SELECT COUNT(DISTINCT playerID) FROM players WHERE lgID = 'ABA' AND pos IN ('C', 'F-C');
SELECT firstName FROM players WHERE pos IN ('F', 'F-C') AND lgID = 'NBA';
SELECT COUNT(DISTINCT p.playerID) FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON pt.tmID = t.tmID WHERE p.hsCity = 'Chicago' AND t.divID = 'WE';
SELECT p.college FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON pt.tmID = t.tmID WHERE t.divID = 'EA';
SELECT COUNT(*)  FROM players  WHERE lgID = 'NBL' AND birthCity = 'Spencer';
SELECT birthDate FROM players WHERE playerID = (   SELECT playerID   FROM awards_players   WHERE award = 'Most Valuable Player'   GROUP BY playerID   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT COUNT(DISTINCT p.playerID) FROM players p JOIN awards_players ap ON p.playerID = ap.playerID WHERE p.birthCity = 'Whitestone' AND ap.award = 'Most Valuable Player';
SELECT MAX(height) FROM players WHERE playerID IN (   SELECT playerID   FROM awards_players   WHERE award = 'Rookie of the Year' );
SELECT AVG(p.weight)  FROM players p  JOIN awards_players ap ON p.playerID = ap.playerID  WHERE ap.award = 'Rookie of the Year';
SELECT AVG(p.height)  FROM players p  JOIN awards_players ap ON p.playerID = ap.playerID  WHERE p.highSchool LIKE '%New York%' AND ap.award = 'Most Valuable Player';
SELECT name, o_pts FROM teams WHERE year = 2000 ORDER BY o_pts DESC LIMIT 10;
SELECT * FROM teams WHERE (won / (won + lost)) < 0.5;
SELECT DISTINCT c.coachID FROM coaches c JOIN teams t ON c.tmID = t.tmID WHERE t.won / (t.won + t.lost) > 0.8;
SELECT coachID FROM coaches WHERE lgID = 'NBA' GROUP BY coachID HAVING MAX(year) - MIN(year) > 10;
SELECT COUNT(DISTINCT t.tmID) FROM teams t JOIN (   SELECT tmID   FROM players_teams pt   JOIN players p ON pt.playerID = p.playerID   JOIN awards_players ap ON p.playerID = ap.playerID   WHERE ap.award = 'Most Valuable Player' ) AS mvpt ON t.tmID = mvpt.tmID WHERE t.o_pts >= 3800;
SELECT p.firstName, p.lastName, p.height FROM players p JOIN players_teams pt ON p.playerID = pt.playerID WHERE pt.tmID = 'AFS' ORDER BY p.height DESC LIMIT 1;
SELECT lastName FROM players WHERE playerID IN (   SELECT playerID   FROM players_teams   WHERE tmID = 'BLB' );
SELECT COUNT(DISTINCT coachID)  FROM awards_coaches  WHERE year BETWEEN 1962 AND 1975;
SELECT coachID FROM awards_coaches WHERE year BETWEEN 1970 AND 1990 GROUP BY coachID HAVING COUNT(coachID) = 2;
SELECT COUNT(DISTINCT coachID)  FROM awards_coaches  WHERE year BETWEEN 1962 AND 2011  AND coachID IN (   SELECT coachID    FROM awards_coaches    WHERE award LIKE 'NBA%'    INTERSECT    SELECT coachID    FROM awards_coaches    WHERE award LIKE 'ABA%' );
SELECT AVG(points) AS avg_points FROM player_allstar WHERE season_id = 1975 AND playerID IN (     SELECT playerID     FROM players     WHERE birthCountry = 'USA' );
SELECT p.lastName, p.firstName FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE p.height > 75;
SELECT MIN(p.weight) FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE p.college = 'UCLA';
SELECT MAX(weight) FROM players WHERE birthCountry = 'USA' AND playerID IN (   SELECT playerID   FROM player_allstar );
SELECT SUM(points)  FROM player_allstar  WHERE season_id BETWEEN 1960 AND 1970  AND playerID IN (SELECT playerID                    FROM players                    WHERE deathDate = '0000-00-00');
SELECT p.lastName, p.firstName FROM players p JOIN players_teams pt ON p.playerID = pt.playerID WHERE p.birthDate >= '1950-01-01' AND pt.oRebounds / pt.rebounds > 0.3;
SELECT COUNT(DISTINCT playerID)  FROM awards_players  WHERE award = 'Rookie of the Year' AND year BETWEEN 1969 AND 2010;
SELECT t.name FROM teams t JOIN (   SELECT tmID   FROM players_teams pt   JOIN player_allstar pa ON pt.playerID = pa.playerID   GROUP BY tmID   HAVING COUNT(DISTINCT pa.playerID) >= 3 ) AS allstar_teams ON t.tmID = allstar_teams.tmID;
SELECT MAX(p.points) FROM players_teams p JOIN teams t ON p.tmID = t.tmID AND p.year = t.year WHERE t.rank = 1 AND p.year BETWEEN 1950 AND 1970;
SELECT p.lastName, p.firstName FROM players p JOIN (   SELECT tmID   FROM teams   WHERE year BETWEEN 1937 AND 1940   GROUP BY tmID   HAVING COUNT(CASE WHEN rank = 1 THEN 1 END) >= 3 ) t ON p.playerID IN (   SELECT playerID   FROM player_allstar   WHERE tmID = t.tmID )
SELECT t.name FROM teams t JOIN (   SELECT tmID, MAX(points) AS max_points   FROM players_teams   WHERE year BETWEEN 1937 AND 1940   GROUP BY tmID ) pt ON t.tmID = pt.tmID WHERE t.year BETWEEN 1937 AND 1940 AND t.rank = 3 ORDER BY max_points DESC LIMIT 1;
SELECT COUNT(DISTINCT t.tmID) FROM teams t JOIN players_teams pt ON t.tmID = pt.tmID AND t.year = pt.year WHERE t.year = 1937 GROUP BY pt.tmID HAVING SUM(pt.points) >= 500;
SELECT COUNT(DISTINCT p.playerID) FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year WHERE t.year = 1990 AND t.won / t.games > 0.75;
SELECT * FROM players WHERE race = 'B' ORDER BY height ASC LIMIT 3;
SELECT COUNT(*) FROM draft WHERE firstName = 'Joe' AND draftYear = 1970;
SELECT SUM(fg_made)  FROM player_allstar  WHERE first_name = 'George' AND last_name = 'Mikan' AND season_id BETWEEN 1951 AND 1953;
SELECT    CONCAT(firstName,'', lastName) AS player_name,   weight,   height,   ROUND((weight / (height * height)) * 703, 2) AS bmi FROM    players;
SELECT name FROM teams WHERE (homeLost / (homeWon + homeLost)) = (     SELECT MAX(homeLost / (homeWon + homeLost))     FROM teams );
SELECT draftYear - YEAR(birthDate) AS age_when_drafted FROM draft JOIN players ON draft.playerID = players.playerID WHERE firstName = 'Alexis' AND lastName = 'Ajinca' AND draftYear = (   SELECT MIN(draftYear)   FROM draft   JOIN players ON draft.playerID = players.playerID   WHERE firstName = 'Alexis' AND lastName = 'Ajinca' );
SELECT p.firstName, p.lastName, p.height FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON pt.tmID = t.tmID WHERE t.name = 'Denver Nuggets' AND pt.year > 1980 ORDER BY p.height DESC LIMIT 1;
SELECT p.playerID, COUNT(ap.award) AS num_awards FROM players p JOIN awards_players ap ON p.playerID = ap.playerID WHERE p.deathDate IS NOT NULL GROUP BY p.playerID ORDER BY num_awards DESC LIMIT 1;
SELECT t.name FROM teams t JOIN (   SELECT tmID   FROM players   WHERE college = 'UCLA'   GROUP BY tmID   ORDER BY COUNT(playerID) DESC   LIMIT 1 ) p ON t.tmID = p.tmID;
SELECT AVG(weight / (height * height) * 703) AS avg_bmi FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID;
SELECT name FROM teams WHERE (year, lgID) IN (   SELECT year, lgID   FROM (     SELECT year, lgID,      (won / (won + lost)) - (LAG(won / (won + lost)) OVER (PARTITION BY lgID, tmID ORDER BY year)) AS growth_rate     FROM teams     WHERE year IN (1972, 1973) AND lgID = 'ABA'   ) AS subquery   WHERE growth_rate = (     SELECT MAX(growth_rate)     FROM (       SELECT year, lgID,        (won / (won + lost)) - (LAG(won / (won + lost)) OVER (PARTITION BY lgID, tmID ORDER BY year)) AS growth_rate       FROM teams       WHERE year IN (1972, 1973) AND lgID = 'ABA'     ) AS subquery   ) ) AND year = 1973;
SELECT p.firstName FROM players p JOIN players_teams pt ON p.playerID = pt.playerID WHERE pt.lgID = 'NBL' GROUP BY p.firstName ORDER BY COUNT(pt.PF) DESC LIMIT 1;
SELECT AVG(p.height)  FROM players p  JOIN player_allstar pa ON p.playerID = pa.playerID  WHERE pa.conference = 'East';
SELECT coachID, MAX(won) AS max_won FROM coaches WHERE coachID IN (SELECT coachID FROM awards_coaches WHERE award = 'ABA Coach of the Year') GROUP BY coachID ORDER BY max_won DESC LIMIT 1;
SELECT t.name FROM coaches c JOIN awards_coaches ac ON c.coachID = ac.coachID JOIN teams t ON c.tmID = t.tmID WHERE ac.year = 1992 AND ac.award = 'NBA Coach of the Year';
SELECT p.firstName, p.lastName FROM players p JOIN (   SELECT playerID, MAX(fgMade / fgAttempted) AS max_fg_rate   FROM player_allstar   WHERE season_id = 1973   GROUP BY playerID ) AS max_fg_rate ON p.playerID = max_fg_rate.playerID JOIN player_allstar pa ON p.playerID = pa.playerID WHERE pa.season_id = 1973;
SELECT t.name FROM draft d JOIN teams t ON d.tmID = t.tmID WHERE d.firstName = 'Mike' AND d.lastName = 'Lynn';
SELECT COUNT(DISTINCT p.playerID) FROM players p JOIN awards_players ap ON p.playerID = ap.playerID WHERE ap.award = 'Most Improved Player' AND ap.year BETWEEN 1985 AND 1990 AND p.birthCountry = 'USA';
SELECT p.firstName, p.lastName FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE p.college = 'California';
SELECT COUNT(DISTINCT coachID)  FROM awards_coaches  WHERE year BETWEEN 1950 AND 1970  GROUP BY coachID  HAVING COUNT(award) > 1;
SELECT COUNT(DISTINCT playerID)  FROM awards_players  WHERE award = 'Most Valuable Player' AND year BETWEEN 1969 AND 1975;
SELECT t.name FROM teams t JOIN (   SELECT tmID, birthState   FROM players   GROUP BY tmID, birthState   HAVING COUNT(DISTINCT playerID) >= 5 ) p ON t.tmID = p.tmID;
SELECT COUNT(DISTINCT t.tmID) FROM teams t JOIN players_teams pt ON t.tmID = pt.tmID JOIN player_allstar pa ON pt.playerID = pa.playerID WHERE t.lgID = 'NBA' GROUP BY t.tmID HAVING COUNT(pa.playerID) > 3;
SELECT birthState, COUNT(playerID) as num_players FROM players WHERE playerID IN (SELECT playerID FROM player_allstar) GROUP BY birthState ORDER BY num_players DESC LIMIT 1;
SELECT COUNT(DISTINCT p.playerID) FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year WHERE t.year = 1937 AND t.rank = 6;
SELECT COUNT(DISTINCT p.playerID) FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year WHERE t.year = 1950 AND t.lost / (t.won + t.lost) < 0.2;
SELECT CONCAT(firstName,'', middleName,'', lastName) AS full_name FROM players WHERE birthCountry!= 'USA';
SELECT coachID FROM coaches GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2;
SELECT coachID FROM coaches WHERE year = 1988 ORDER BY won - lost DESC LIMIT 1;
SELECT t.name FROM coaches c JOIN awards_coaches ac ON c.coachID = ac.coachID JOIN teams t ON c.tmID = t.tmID WHERE ac.year = 2010 AND ac.award = 'NBA Coach of the Year';
SELECT firstName, lastName, height, weight FROM players WHERE playerID IN (   SELECT playerID   FROM player_allstar   WHERE ftAttempted > 0 AND ftAttempted = ftMade );
SELECT p.firstName, p.lastName, t.name FROM players p JOIN draft d ON p.playerID = d.playerID JOIN teams t ON d.tmID = t.tmID WHERE d.draftFrom = 'Seattle' AND d.draftYear BETWEEN 1965 AND 1970;
SELECT CONCAT(p.firstName,'', p.middleName,'', p.lastName) AS full_name,         2003 - YEAR(p.birthDate) AS age FROM players p JOIN awards_players ap ON p.playerID = ap.playerID WHERE ap.year = 2003 AND ap.award = 'Finals MVP';
SELECT t.name, sp.year FROM series_post sp JOIN teams t ON sp.tmIDWinner = t.tmID AND sp.year = t.year WHERE sp.round = 'F' AND sp.year BETWEEN 1950 AND 1960;
SELECT t.name, c.coachID FROM teams t JOIN coaches c ON t.tmID = c.tmID JOIN series_post sp ON t.tmID = sp.tmIDWinner WHERE sp.year = 1946 AND sp.round = 'QF';
SELECT CONCAT(p.firstName,'', p.middleName,'', p.lastName) AS full_name FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON pt.tmID = t.tmID JOIN series_post sp ON t.tmID = sp.tmIDWinner WHERE sp.year = 1970 AND sp.round = 'F';
SELECT college FROM players WHERE playerID IN (   SELECT playerID   FROM awards_players   WHERE year = 1970   GROUP BY playerID   ORDER BY COUNT(award) DESC   LIMIT 1 );
SELECT p.firstName, p.lastName FROM players p JOIN awards_players ap ON p.playerID = ap.playerID WHERE ap.award = 'Rookie of the Year' AND p.birthDate = (   SELECT MAX(birthDate)   FROM players p2   JOIN awards_players ap2 ON p2.playerID = ap2.playerID   WHERE ap2.award = 'Rookie of the Year' );
SELECT CONCAT(p.firstName,'', p.middleName,'', p.lastName) AS full_name FROM players p JOIN draft d ON p.playerID = d.playerID WHERE d.draftYear = 1973 AND d.draftRound = 1 AND p.birthCountry <> 'USA';
SELECT (SUM(o_rebounds) / SUM(rebounds)) * 100 AS percentage FROM players_teams WHERE year = 2000;
SELECT t.name, c.year, c.coachID FROM coaches c JOIN teams t ON c.tmID = t.tmID WHERE c.won / (c.won + c.lost) > 0.75;
SELECT c.coachID, c.year FROM coaches c JOIN teams t ON c.tmID = t.tmID WHERE t.name = 'Oklahoma City Thunder';
SELECT COUNT(DISTINCT p.playerID) FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE pa.season_id = 1990 AND pa.o_rebounds <= pa.d_rebounds * 0.5;
SELECT COUNT(DISTINCT p.playerID) FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE pa.season_id BETWEEN 2000 AND 2005 GROUP BY p.playerID HAVING SUM(pa.steals) <= 10;
SELECT p.firstName, p.lastName FROM draft d JOIN players p ON d.playerID = p.playerID JOIN awards_players ap ON p.playerID = ap.playerID WHERE d.draftYear = 1971 AND d.draftRound = 2 AND d.tmID = 'POR' AND ap.award = 'Rookie of the Year' AND ap.year = 1971;
SELECT COUNT(DISTINCT p.playerID) FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE p.race = 'B' AND pa.season_id = 1973;
SELECT name FROM teams WHERE year = 1947 AND playoff = 'QF' AND d_pts >= 3513;
SELECT (SUM(lost) / SUM(games)) * 100 AS percentage_lost FROM teams WHERE name = 'Houston Mavericks';
SELECT playerID FROM awards_players WHERE award = 'Most Valuable Player' AND year > 1990 AND lgID = 'NBA';
SELECT COUNT(DISTINCT year) FROM players_teams WHERE playerID = 'abdulka01' AND tmID = 'LAL' AND year BETWEEN 1975 AND 1980;
SELECT    (COUNT(DISTINCT c.coachID) / (SELECT COUNT(DISTINCT coachID) FROM coaches WHERE year = 1969) * 100)    AS percentage FROM    awards_coaches ac   JOIN coaches c ON ac.coachID = c.coachID WHERE    ac.year = 1969    AND ac.award = 'NBA Coach of the Year';
SELECT    (CAST((SELECT COUNT(*) FROM series_post WHERE year = 1947 AND tmIDWinner = 'CHS') AS FLOAT) /     (SELECT COUNT(*) FROM series_post WHERE year = 1947) -     (CAST((SELECT COUNT(*) FROM series_post WHERE year = 1946 AND tmIDWinner = 'CHS') AS FLOAT) /      (SELECT COUNT(*) FROM series_post WHERE year = 1946))) * 100 AS winning_rate_diff
SELECT COUNT(*)  FROM awards_players  WHERE year = 2010 AND playerID IN (   SELECT playerID    FROM players    WHERE hsCity = 'Chicago' );
SELECT    (COUNT(ap.playerID) / (SELECT COUNT(*) FROM players WHERE college = 'Auburn')) * 100 FROM    players p   JOIN awards_players ap ON p.playerID = ap.playerID WHERE    p.college = 'Auburn' AND ap.award = 'All-Defensive Second Team';
SELECT CONCAT(p.firstName,'', p.middleName,'', p.lastName) AS full_name, pt.steals FROM players p JOIN players_teams pt ON p.playerID = pt.playerID WHERE pt.year = 1997 ORDER BY pt.steals DESC LIMIT 5;
SELECT p.highSchool FROM players p JOIN draft d ON p.playerID = d.playerID JOIN awards_players ap ON p.playerID = ap.playerID WHERE ap.year = 1990 AND ap.award = 'Finals MVP' AND ap.lgID = 'NBA';
SELECT playerID FROM player_allstar WHERE season_id = 1996 AND lgID = 'NBA' AND ft_made >= 0 AND ft_attempted > 0 AND ft_made / ft_attempted > 0.7;
SELECT COUNT(DISTINCT p.playerID) FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE pa.season_id BETWEEN 1980 AND 1983 AND pa.league_id = 'NBA' AND pa.threeMade / pa.threeAttempted > 0.6;
SELECT coachID FROM coaches WHERE tmID = 'STL' AND lgID = 'NBA' AND won > lost;
SELECT COUNT(*)  FROM awards_coaches  WHERE award = 'Coach of the Year'  AND lgID = 'NBA'  AND coachID IN (SELECT coachID                   FROM coaches                   WHERE tmID = 'CHI');
SELECT p.firstName, p.lastName FROM players p JOIN draft d ON p.playerID = d.playerID JOIN player_allstar pa ON p.playerID = pa.playerID WHERE d.lgID = 'NBA' AND d.draftYear BETWEEN 1990 AND 2000 GROUP BY p.firstName, p.lastName ORDER BY SUM(pa.points) DESC LIMIT 1;
SELECT CONCAT(p.firstName,'', p.middleName,'', p.lastName) AS full_name FROM player_allstar pa JOIN players p ON pa.playerID = p.playerID WHERE p.highSchool = 'Wake Forest college' GROUP BY pa.playerID, p.firstName, p.middleName, p.lastName ORDER BY SUM(pa.o_rebounds) - SUM(pa.d_rebounds) DESC LIMIT 1;
SELECT    CONCAT(p.firstName,'', p.middleName,'', p.lastName) AS full_name,   t.tmID AS team_id FROM    players p   JOIN (     SELECT        playerID,        MAX(blocks) AS max_blocks     FROM        players_teams     GROUP BY        playerID   ) pt ON p.playerID = pt.playerID   JOIN players_teams pt2 ON p.playerID = pt2.playerID   JOIN teams t ON pt2.tmID = t.tmID WHERE    p.birthCity = 'Atlanta'   AND pt2.blocks = pt.max_blocks ORDER BY    pt2.blocks DESC LIMIT 1;
SELECT name FROM teams WHERE year BETWEEN 1980 AND 2000 GROUP BY name HAVING COUNT(CASE WHEN rank = 1 THEN 1 END) >= 5 AND SUM(lost) > 2;
SELECT p.firstName, p.lastName, t.name, MAX(points / minutes) AS max_points_per_minute FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON pt.tmID = t.tmID WHERE pt.year BETWEEN 1991 AND 2000 AND pt.lgID = 'NBA' GROUP BY p.firstName, p.lastName, t.name ORDER BY max_points_per_minute DESC LIMIT 1;
SELECT    AVG(CASE WHEN d.lgID = 'ABA' THEN 1970 - YEAR(p.birthDate) END) -    AVG(CASE WHEN d.lgID = 'NBA' THEN 1970 - YEAR(p.birthDate) END)  AS age_diff FROM draft d JOIN players p ON d.playerID = p.playerID WHERE d.draftYear BETWEEN 1970 AND 1970;
SELECT playerID, MAX(GP) AS max_GP FROM players_teams WHERE year = 2011 AND lgID = 'NBA' GROUP BY playerID ORDER BY max_GP DESC LIMIT 1;
SELECT COUNT(DISTINCT d.playerID) FROM draft d JOIN players p ON d.playerID = p.playerID JOIN player_allstar pa ON p.playerID = pa.playerID WHERE d.draftYear = 1996 AND d.draftRound = 1 AND d.lgID = 'NBA';
SELECT tmID FROM awards_players WHERE award LIKE '%MVP' AND year = 1997 AND lgID = 'NBA';
SELECT won FROM teams WHERE year = 2001 AND lgID = 'NBA' AND tmID IN (     SELECT tmID     FROM players_teams     WHERE year = 2001 AND lgID = 'NBA' AND points = (         SELECT MAX(points)         FROM players_teams         WHERE year = 2001 AND lgID = 'NBA'     ) );
SELECT AVG(turnovers) AS turnovers_per_game FROM players_teams WHERE year = 2003 AND lgID = 'NBA' AND playerID IN (   SELECT playerID   FROM players_teams   WHERE year = 2003 AND lgID = 'NBA'   ORDER BY assists DESC   LIMIT 1 );
SELECT COUNT(DISTINCT s.year)  FROM players p  JOIN players_teams pt ON p.playerID = pt.playerID  JOIN teams t ON pt.tmID = t.tmID  JOIN series_post s ON t.tmID = s.tmIDWinner  WHERE p.firstName = 'Ray' AND p.lastName = 'Allen' AND s.lgIDWinner = 'NBA';
SELECT    (SUM(CASE WHEN d.draftYear = 2004 THEN t.won ELSE 0 END) /     (SUM(CASE WHEN d.draftYear = 2004 THEN t.won ELSE 0 END) +      SUM(CASE WHEN d.draftYear = 2004 THEN t.lost ELSE 0 END))) -    (SUM(CASE WHEN d.draftYear = 2003 THEN t.won ELSE 0 END) /     (SUM(CASE WHEN d.draftYear = 2003 THEN t.won ELSE 0 END) +      SUM(CASE WHEN d.draftYear = 2003 THEN t.lost ELSE 0 END))) AS win_rate_increase FROM    draft d    JOIN teams t ON d.tmID = t.tmID  WHERE    d.draftRound = 1 AND d.draftYear IN (2003, 2004);
SELECT COUNT(DISTINCT c.coachID) FROM coaches c JOIN awards_coaches ac ON c.coachID = ac.coachID WHERE ac.award = 'NBA coach of the year' AND ac.year BETWEEN 1971 AND 1975 AND c.tmID = 'POR';
SELECT    (COUNT(CASE WHEN steals > 0 THEN playerID ELSE NULL END) / COUNT(playerID)) * 100 FROM    players_teams WHERE    lgID = 'NBA' AND tmID = 'LAL';
SELECT CONCAT(p.firstName,'', p.middleName,'', p.lastName) AS player_name FROM players p JOIN players_teams pt ON p.playerID = pt.playerID WHERE pt.year = 1996 AND pt.steals = (   SELECT MAX(pt2.steals)   FROM players_teams pt2   JOIN teams t ON pt2.tmID = t.tmID AND pt2.year = t.year   WHERE pt2.year = 1996 AND t.playoff IS NULL ) AND NOT EXISTS (   SELECT 1   FROM players_teams pt3   JOIN teams t2 ON pt3.tmID = t2.tmID AND pt3.year = t2.year   WHERE pt3.playerID = p.playerID AND pt3.year = 1996 AND t2.playoff IS NOT NULL );
SELECT playerID FROM players_teams WHERE year = 1988 AND PostGP = 0 ORDER BY turnovers DESC LIMIT 1;
SELECT name FROM teams WHERE year = 2000 AND lgID = 'NBA' AND playoff = 0 ORDER BY won / (won + lost) DESC LIMIT 1;
SELECT name, o_pts FROM teams WHERE year = 1998 AND playoff = 0 ORDER BY o_pts DESC LIMIT 1;
SELECT name FROM teams WHERE year = 2001 AND PostGP = 0 AND won = (     SELECT MAX(won)     FROM teams     WHERE year = 2001 AND PostGP = 0 );
SELECT tmID, o_Rebounds FROM teams WHERE year = 1997 AND playoff = 0 ORDER BY o_Rebounds DESC LIMIT 1;
SELECT pt.tmID FROM draft d JOIN players p ON d.playerID = p.playerID JOIN players_teams pt ON p.playerID = pt.playerID WHERE d.draftYear = 1976 AND d.draftRound = 1 AND d.draftSelection = 6 AND pt.year = 1976;
SELECT homeWon FROM teams WHERE year = 1998 AND tmID IN (     SELECT tmID     FROM draft     WHERE draftYear = 1998 AND draftRound = 1 AND draftSelection = 12 );
SELECT p.height, p.weight FROM players p JOIN (   SELECT playerID, MAX(rebounds) AS max_rebounds   FROM player_allstar   GROUP BY playerID   ORDER BY max_rebounds DESC   LIMIT 1 ) pa ON p.playerID = pa.playerID;
SELECT hsCity, hsState, hsCountry FROM players WHERE playerID = (   SELECT playerID   FROM player_allstar   ORDER BY rebounds DESC   LIMIT 1 );
SELECT tmID FROM players_teams WHERE year = 1997 AND playerID IN (   SELECT playerID   FROM player_allstar   WHERE season_id = 1997   ORDER BY rebounds DESC   LIMIT 1 ) GROUP BY tmID HAVING COUNT(DISTINCT playerID) = 1;
SELECT SUM(points)  FROM players_teams  WHERE playerID = (   SELECT playerID    FROM players    WHERE pos LIKE '%C%' AND pos LIKE '%F%' AND pos LIKE '%G%'    ORDER BY firstseason DESC    LIMIT 1 );
SELECT tmID FROM players WHERE pos LIKE '%F' AND birthDate = (SELECT MAX(birthDate)                   FROM players                   WHERE pos LIKE '%F'                   AND lgID = 'NBA');
SELECT p.firstName, p.lastName FROM players p JOIN (   SELECT playerID   FROM player_allstar   GROUP BY playerID   HAVING SUM(games_played) = (     SELECT MAX(sum_games)     FROM (       SELECT playerID, SUM(games_played) sum_games       FROM player_allstar       GROUP BY playerID     ) t   ) ) pa ON p.playerID = pa.playerID WHERE p.college = 'Central Missouri State';
SELECT t.name FROM players_teams pt JOIN teams t ON pt.tmID = t.tmID WHERE pt.year = 2000 AND pt.GP = 82 ORDER BY pt.minutes LIMIT 1;
SELECT p.firstName, p.lastName FROM players p JOIN players_teams pt ON p.playerID = pt.playerID WHERE pt.year = 1995 AND pt.GP = 82 ORDER BY pt.turnovers DESC LIMIT 1;
SELECT tmID FROM players_teams WHERE year = 2011 AND GP = GS GROUP BY tmID ORDER BY MAX(steals) DESC LIMIT 1;
SELECT t.name FROM (   SELECT tmID, COUNT(DISTINCT playerID) AS same_starting_players   FROM players_teams   WHERE GP = GS   GROUP BY tmID   ORDER BY same_starting_players DESC   LIMIT 1 ) AS sub JOIN teams t ON sub.tmID = t.tmID;
SELECT birthDate FROM players WHERE playerID = (   SELECT playerID   FROM player_allstar   WHERE year = 2001   ORDER BY rebounds DESC   LIMIT 1 );
SELECT t.name FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON pt.tmID = t.tmID JOIN (   SELECT playerID   FROM player_allstar   WHERE season_id = 1997   ORDER BY rebounds DESC   LIMIT 1 ) AS rc ON p.playerID = rc.playerID WHERE pt.year = 1997;
SELECT t.name FROM teams t JOIN (   SELECT tmID   FROM players_teams   WHERE year = 2011 AND rebounds > 600   GROUP BY tmID   HAVING COUNT(playerID) > 1 ) p ON t.tmID = p.tmID AND t.year = 2011;
SELECT COUNT(*)  FROM works  WHERE Date < 1602;
SELECT COUNT(DISTINCT Scene)  FROM chapters  WHERE Act = 1 AND work_id IN (SELECT id FROM works WHERE Title = 'Twelfth Night');
SELECT c.Description FROM chapters c JOIN works w ON c.work_id = w.id WHERE w.Title = 'Twelfth Night' AND c.Act = 1 AND c.Scene = 2;
SELECT    (SUM(CASE WHEN Act = 1 THEN 1 ELSE 0 END) -     SUM(CASE WHEN Act = 5 THEN 1 ELSE 0 END))  AS MoreScenes FROM chapters WHERE work_id = (SELECT id FROM works WHERE Title = 'Twelfth Night');
SELECT w.Title FROM characters c JOIN paragraphs p ON c.id = p.character_id JOIN chapters ch ON p.chapter_id = ch.id JOIN works w ON ch.work_id = w.id WHERE c.CharName = 'Lord Abergavenny';
SELECT c.CharName FROM characters c JOIN paragraphs p ON c.id = p.character_id JOIN chapters ch ON p.chapter_id = ch.id JOIN works w ON ch.work_id = w.id WHERE w.Title = 'Twelfth Night';
SELECT COUNT(p.id) FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id JOIN works w ON c.work_id = w.id WHERE c.Act = 1 AND c.Scene = 1 AND w.Title = 'Twelfth Night';
SELECT p.PlainText FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id JOIN works w ON c.work_id = w.id WHERE w.Title = 'Twelfth Night' AND c.Act = 1 AND c.Scene = 1;
SELECT COUNT(*) FROM paragraphs WHERE character_id IN (   SELECT id   FROM characters   WHERE CharName = 'Lord Abergavenny' );
SELECT p.id FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE c.Description ='son to Tamora';
SELECT COUNT(*) FROM chapters WHERE Description = 'OLIVIA’S house.' AND work_id IN (SELECT id FROM works WHERE Title = 'Twelfth Night');
SELECT COUNT(DISTINCT c.id) FROM characters c JOIN paragraphs p ON c.id = p.character_id JOIN chapters ch ON p.chapter_id = ch.id JOIN works w ON ch.work_id = w.id WHERE w.Title = 'Twelfth Night';
SELECT w.Title FROM works w JOIN (   SELECT work_id, COUNT(character_id) as count   FROM paragraphs   GROUP BY work_id   ORDER BY count DESC   LIMIT 1 ) p ON w.id = p.work_id;
SELECT AVG(char_count) AS avg_char_per_work FROM (   SELECT work_id, COUNT(DISTINCT character_id) AS char_count   FROM paragraphs   GROUP BY work_id ) AS char_per_work;
SELECT AVG(scenes_per_act) AS avg_scenes_per_act FROM (   SELECT Act, COUNT(Scene) AS scenes_per_act   FROM chapters   WHERE work_id = (SELECT id FROM works WHERE Title = 'Twelfth Night')   GROUP BY Act ) AS scenes_per_act_table;
SELECT COUNT(*)  FROM works  WHERE GenreType = 'Comedy';
SELECT MIN(Date)  FROM works  WHERE GenreType = 'Poem';
SELECT Abbrev FROM characters WHERE CharName = 'Earl of Westmoreland';
SELECT Description FROM chapters WHERE id = (   SELECT chapter_id   FROM paragraphs   GROUP BY chapter_id   ORDER BY COUNT(chapter_id) DESC   LIMIT 1 );
SELECT CharName FROM characters WHERE id IN (   SELECT character_id   FROM paragraphs   WHERE PlainText = 'Would he do so, I\'ld beg your precious mistress, Which he counts but a trifle.' );
SELECT COUNT(DISTINCT c.id) FROM characters c JOIN paragraphs p ON c.id = p.character_id JOIN chapters ch ON p.chapter_id = ch.id JOIN works w ON ch.work_id = w.id WHERE w.Title = 'Titus Andronicus';
SELECT COUNT(DISTINCT Act)  FROM chapters  WHERE work_id IN (   SELECT id    FROM works    WHERE LongTitle = 'Two Gentlemen of Verona' );
SELECT c.Description FROM characters c JOIN paragraphs p ON c.id = p.character_id WHERE p.id = '640171';
SELECT w.Title FROM works w JOIN chapters c ON w.id = c.work_id JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE ch.CharName = 'Shylock';
SELECT COUNT(DISTINCT Scene)  FROM chapters  WHERE work_id IN (   SELECT id    FROM works    WHERE Title = 'King John' );
SELECT COUNT(DISTINCT c.id) FROM characters ch JOIN paragraphs p ON ch.id = p.character_id JOIN chapters c ON p.chapter_id = c.id WHERE ch.CharName = 'Demetrius';
SELECT w.Title FROM works w JOIN chapters c ON w.id = c.work_id JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE ch.id = 324 AND p.PlainText LIKE '%this friend of Caesar%';
SELECT Description FROM chapters WHERE Act = '2' AND Scene = '2' AND work_id = (   SELECT id   FROM works   WHERE Title = 'Midsummer Night''s Dream' );
SELECT w.LongTitle FROM works w WHERE w.GenreType = 'Tragedy' AND w.id IN (   SELECT c.work_id   FROM chapters c   GROUP BY c.work_id   HAVING COUNT(c.Scene) = (     SELECT MAX(cnt)     FROM (       SELECT COUNT(c.Scene) AS cnt       FROM chapters c       WHERE c.work_id IN (         SELECT w.id         FROM works w         WHERE w.GenreType = 'Tragedy'       )       GROUP BY c.work_id     ) t   ) )
SELECT COUNT(p.id) FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id WHERE c.Description = 'A Sea-port in Cyprus. An open place near the quay.';
SELECT    SUM(CASE WHEN w.GenreType = 'Tragedy' THEN 1 ELSE 0 END) / COUNT(c.Scene) * 100 AS percentage FROM    chapters c JOIN    works w ON c.work_id = w.id WHERE    w.Date = '1594';
SELECT AVG(chapter_count) AS avg_chapters FROM (   SELECT COUNT(c.id) AS chapter_count   FROM chapters c   JOIN works w ON c.work_id = w.id   WHERE w.Date = '1599'   GROUP BY w.id ) AS subquery;
SELECT COUNT(*)  FROM characters  WHERE Description ='servant to Timon';
SELECT Title FROM works WHERE Date = (SELECT MIN(Date) FROM works);
SELECT COUNT(*)  FROM works  WHERE GenreType = 'Poem';
SELECT COUNT(DISTINCT Scene)  FROM chapters  WHERE Act = 1 AND work_id = 7;
SELECT COUNT(*)  FROM works  WHERE Date BETWEEN 1500 AND 1599 AND GenreType = 'Tragedy';
SELECT CharName  FROM characters  WHERE Description = 'Daughter to Capulet';
SELECT COUNT(*) FROM paragraphs WHERE PlainText = 'Ay, surely, mere the truth: I know his lady.';
SELECT w.LongTitle FROM works w JOIN (   SELECT work_id   FROM chapters   WHERE Act = 1   GROUP BY work_id   ORDER BY COUNT(Scene) DESC   LIMIT 1 ) c ON w.id = c.work_id;
SELECT c.Description FROM chapters c JOIN (   SELECT chapter_id   FROM paragraphs   GROUP BY chapter_id   ORDER BY COUNT(*) DESC   LIMIT 1 ) p ON c.id = p.chapter_id;
SELECT Description FROM chapters WHERE work_id = (SELECT id FROM works WHERE LongTitle = 'Twelfth Night, Or What You Will') AND Act = 2 AND Scene = 2;
SELECT c.Description FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id GROUP BY c.id, c.Description HAVING AVG(p.ParagraphNum) < 150;
SELECT w.Title FROM works w JOIN chapters c ON w.id = c.work_id WHERE c.Description = 'A field near Windsor';
SELECT COUNT(p.ParagraphNum) FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id WHERE c.Act = '1' AND c.Scene = (   SELECT MAX(Scene)   FROM chapters   WHERE Act = '1' )
SELECT CharName FROM characters WHERE CharName!= '(stage directions)' AND id IN (   SELECT character_id   FROM paragraphs   WHERE chapter_id IN (     SELECT id     FROM chapters     WHERE Description = 'The sea-coast.'   )   GROUP BY character_id   HAVING COUNT(character_id) = 5 );
SELECT COUNT(ch.id) FROM chapters ch JOIN works w ON ch.work_id = w.id WHERE w.Title = 'As You Like It' AND ch.id IN (   SELECT p.chapter_id   FROM paragraphs p   WHERE p.ParagraphNum <= 50 );
SELECT p.character_id FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id WHERE c.Description = 'Florence. Without the walls. A tucket afar off' AND p.PlainText = 'His name, I pray you.';
SELECT COUNT(DISTINCT p.character_id) FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id JOIN works w ON c.work_id = w.id WHERE w.Title = 'Hamlet';
SELECT COUNT(DISTINCT Scene)  FROM chapters  WHERE Act = 5 AND work_id IN (SELECT id FROM works WHERE LongTitle = 'History of Henry VIII');
SELECT COUNT(DISTINCT w.id) FROM works w JOIN chapters c ON w.id = c.work_id WHERE w.GenreType = 'History' GROUP BY w.id HAVING COUNT(CASE WHEN c.Act = 1 THEN c.Scene END) < 2;
SELECT COUNT(DISTINCT c.Act)  FROM chapters c  JOIN works w ON c.work_id = w.id  WHERE w.Title = 'Sonnets';
SELECT c.Description FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id JOIN characters chr ON p.character_id = chr.id WHERE chr.Abbrev = '1Play' AND p.chapter_id = (   SELECT MIN(p2.chapter_id)   FROM paragraphs p2   JOIN characters chr2 ON p2.character_id = chr2.id   WHERE chr2.Abbrev = '1Play' );
SELECT w.Title, w.GenreType FROM works w JOIN chapters c ON w.id = c.work_id GROUP BY w.id, w.Title, w.GenreType HAVING COUNT(c.Act) = 1;
SELECT COUNT(p.id) FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id JOIN characters ch ON p.character_id = ch.id WHERE ch.CharName = 'Sir Richard Ratcliff' AND c.id = (   SELECT chapter_id   FROM paragraphs   GROUP BY chapter_id   ORDER BY MAX(ParagraphNum) DESC   LIMIT 1 );
SELECT c.Description FROM chapters c JOIN works w ON c.work_id = w.id WHERE w.Title = 'A Lover''s Complaint' AND c.Act = 1 AND c.Scene = 1;
SELECT w.Date FROM works w JOIN chapters c ON w.id = c.work_id GROUP BY w.Date HAVING COUNT(c.Scene) = 154;
SELECT AVG(scenes_per_work) AS avg_scenes_per_comedy_work FROM (   SELECT COUNT(DISTINCT c.Scene) AS scenes_per_work   FROM works w   JOIN chapters c ON w.id = c.work_id   WHERE w.GenreType = 'Comedy'   GROUP BY w.id ) AS comedy_works;
WITH character_counts AS (   SELECT      c.CharName,      COUNT(p.character_id) AS count,     COUNT(DISTINCT p.character_id) OVER () AS total_chars   FROM      paragraphs p   JOIN      characters c ON p.character_id = c.id   JOIN      chapters ch ON p.chapter_id = ch.id   JOIN      works w ON ch.work_id = w.id   WHERE      w.LongTitle = 'The Tragedy of Romeo and Juliet'   GROUP BY      c.CharName ) SELECT    CharName,    count,    ROUND(count::numeric / total_chars * 100, 2) AS percentage FROM    character_counts WHERE    CharName IN ('Romeo', 'Juliet') ORDER BY    count DESC;
SELECT ParagraphNum FROM paragraphs WHERE PlainText = 'This is Illyria, lady';
SELECT COUNT(*)  FROM paragraphs  WHERE chapter_id = 18881;
SELECT Title FROM works WHERE GenreType = 'History' LIMIT 5;
SELECT COUNT(DISTINCT Scene)  FROM chapters  WHERE Act = 5 AND work_id = 9;
SELECT c.CharName, c.Description FROM characters c JOIN paragraphs p ON c.id = p.character_id WHERE p.chapter_id = 18710;
SELECT COUNT(*)  FROM chapters  WHERE work_id = (SELECT id FROM works WHERE Title = 'Midsummer Night''s Dream');
SELECT COUNT(p.id) FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id JOIN works w ON c.work_id = w.id WHERE w.Title = 'Comedy of Errors' AND c.Act = 5 AND c.Scene = 1;
SELECT c.CharName, c.Description FROM characters c JOIN paragraphs p ON c.id = p.character_id JOIN chapters ch ON p.chapter_id = ch.id JOIN works w ON ch.work_id = w.id WHERE w.Title = 'Venus and Adonis';
SELECT w.Title FROM works w JOIN chapters c ON w.id = c.work_id JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE ch.CharName = 'Froth';
SELECT COUNT(DISTINCT c.id) FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE ch.CharName = 'First Witch';
SELECT c.Scene, c.Description FROM chapters c JOIN works w ON c.work_id = w.id WHERE w.LongTitle = 'Pericles, Prince of Tyre' AND c.Act = 1;
SELECT w.LongTitle  FROM works w  JOIN chapters c ON w.id = c.work_id  JOIN paragraphs p ON c.id = p.chapter_id  JOIN characters ch ON p.character_id = ch.id  WHERE ch.Description = 'Servant to Montague';
SELECT w.Title, c.Act, c.Scene FROM chapters c JOIN works w ON c.work_id = w.id WHERE c.Description = 'The house of ANTIPHOLUS of Ephesus';
SELECT c.CharName, p.ParagraphNum, p.PlainText FROM characters c JOIN paragraphs p ON c.id = p.character_id WHERE c.Description = 'cousin to the king';
SELECT AVG(ScenePerAct) AS AverageScenePerAct FROM (   SELECT Act, COUNT(Scene) AS ScenePerAct   FROM chapters   WHERE work_id = (     SELECT id     FROM works     WHERE Title = 'Antony and Cleopatra'   )   GROUP BY Act ) AS ActSceneCounts;
SELECT    SUM(CASE WHEN w.Title = 'All''s Well That Ends Well' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS percentage FROM    paragraphs p JOIN    chapters c ON p.chapter_id = c.id JOIN    works w ON c.work_id = w.id;
SELECT COUNT(*)  FROM characters  WHERE Abbrev = 'all';
SELECT Title FROM works WHERE GenreType = 'comedy' LIMIT 3;
SELECT    (SELECT COUNT(*) FROM works WHERE Date > 1593 AND GenreType = 'comedy') -    (SELECT COUNT(*) FROM works WHERE Date > 1593 AND GenreType = 'History')  AS difference;
SELECT LongTitle FROM works WHERE GenreType = 'History' ORDER BY Date DESC LIMIT 1;
SELECT id FROM works WHERE Title LIKE '%Henry%';
SELECT CharName FROM characters WHERE Description = 'a senator of Venice';
SELECT CharName FROM characters WHERE id IN (   SELECT character_id   FROM paragraphs   WHERE ParagraphNum = 8 AND chapter_id = 18820 );
SELECT c.Description FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE c.id = 18704 AND ch.CharName = 'Orsino';
SELECT COUNT(DISTINCT Scene)  FROM chapters  WHERE work_id IN (   SELECT id    FROM works    WHERE LongTitle = 'Twelfth Night, Or What You Will' );
SELECT c.Description FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE p.ParagraphNum = 20;
SELECT COUNT(DISTINCT c.id) FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE ch.CharName = 'Gratiano' AND ch.Description = 'friend to Antonio and Bassiano';
SELECT c.Description FROM chapters c JOIN works w ON c.work_id = w.id WHERE c.id = 18706 AND w.Title = 'All''s Well That Ends Well';
SELECT CharName FROM characters WHERE id IN (   SELECT character_id   FROM paragraphs   WHERE ParagraphNum = 3 );
SELECT p.ParagraphNum FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE c.CharName = 'Aedile';
SELECT DISTINCT c.CharName FROM characters c JOIN paragraphs p ON c.id = p.character_id WHERE p.chapter_id = 18708 LIMIT 2;
SELECT COUNT(DISTINCT c.Act)  FROM chapters c  JOIN works w ON c.work_id = w.id  WHERE w.Title = 'Two Gentlemen of Verona' AND w.GenreType = 'comedy';
SELECT    COUNT(CASE      WHEN w.GenreType = 'history' AND c.SceneCount >= 5 THEN w.id    END) / COUNT(CASE      WHEN w.GenreType = 'history' THEN w.id    END) * 100 AS percentage FROM    works w   JOIN (     SELECT        work_id, COUNT(DISTINCT Scene) AS SceneCount     FROM        chapters     GROUP BY        work_id     HAVING        COUNT(DISTINCT Scene) >= 5   ) c ON w.id = c.work_id WHERE    w.Date BETWEEN 1500 AND 1599;
SELECT    SUM(CASE WHEN Act = 5 THEN 1 ELSE 0 END) / COUNT(Act) * 100 AS percentage FROM    chapters WHERE    work_id IN (     SELECT        id     FROM        works     WHERE        Title = 'Titus Andronicus'   );
SELECT COUNT(*)  FROM works  WHERE GenreType = 'Tragedy';
SELECT COUNT(*)  FROM works  WHERE Title LIKE '%Henry%';
SELECT character_id FROM paragraphs WHERE PlainText = 'O my poor brother! and so perchance may he be.';
SELECT p.ParagraphNum, p.PlainText FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE c.CharName = 'Sir Andrew Aguecheek';
SELECT w.Title, c.CharName FROM works w JOIN characters c ON w.id IN (   SELECT work_id   FROM chapters   JOIN paragraphs p ON chapters.id = p.chapter_id   WHERE work_id = (     SELECT id     FROM works     ORDER BY Date DESC     LIMIT 1   ) ) ORDER BY w.Date DESC LIMIT 1;
SELECT p.PlainText FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE p.ParagraphNum >= 1900 AND p.ParagraphNum <= 1950 AND c.Description = 'a sea captain, friend to Sebastian';
SELECT w.LongTitle FROM works w JOIN chapters c ON w.id = c.work_id WHERE c.Act = 4 AND c.Scene = 5 AND c.Description = 'Mytilene. A street before the brothel.';
SELECT c.CharName FROM characters c JOIN paragraphs p ON c.id = p.character_id WHERE p.PlainText = 'This is Illyria, lady.';
SELECT COUNT(DISTINCT w.id) FROM works w JOIN chapters c ON w.id = c.work_id JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE w.Date >= 1600 AND w.Date <= 1610 AND ch.CharName = 'Third Servingman';
SELECT Description FROM chapters WHERE work_id = (SELECT id FROM works WHERE Title = 'Venus and Adonis') AND Scene = (SELECT MAX(Scene) FROM chapters                WHERE work_id = (SELECT id FROM works WHERE Title = 'Venus and Adonis'));
SELECT COUNT(p.id)  FROM paragraphs p  JOIN chapters c ON p.chapter_id = c.id  JOIN characters ch ON p.character_id = ch.id  JOIN works w ON c.work_id = w.id  WHERE w.Title = 'Twelfth Night'  AND c.Act = 1  AND c.Scene = 2  AND ch.CharName = 'Viola';
SELECT p.character_id, w.id FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id JOIN works w ON c.work_id = w.id WHERE p.PlainText = 'Fear not thou, man, thou shalt lose nothing here.';
SELECT c.Description FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id WHERE p.PlainText = 'What, wilt thou hear some music, my sweet love?';
SELECT c.Scene FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id JOIN characters chr ON p.character_id = chr.id JOIN works w ON c.work_id = w.id WHERE chr.CharName = 'Sir Toby Belch' AND w.Title = 'Twelfth Night';
SELECT w.Title FROM works w JOIN characters c ON w.id IN (   SELECT p.chapter_id   FROM paragraphs p   WHERE p.character_id = (     SELECT id     FROM characters     WHERE CharName = 'Tybalt'   ) ) WHERE w.Date < 1600 AND w.GenreType = 'Tragedy';
SELECT c.id FROM chapters c JOIN works w ON c.work_id = w.id WHERE w.Date > (SELECT (SUM(DATE) / COUNT(DATE)) * 0.89 FROM works);
SELECT    SUM(CASE WHEN c.CharName = 'antonio' THEN 1 ELSE 0 END) / COUNT(*) AS percentage FROM    works w   JOIN chapters ch ON w.id = ch.work_id   JOIN paragraphs p ON ch.id = p.chapter_id   JOIN characters c ON p.character_id = c.id WHERE    w.GenreType = 'Comedy';
SELECT d.car_name FROM data d JOIN price p ON d.ID = p.ID WHERE d.cylinders = 8 ORDER BY p.price DESC LIMIT 1;
SELECT COUNT(*) FROM data JOIN price ON data.ID = price.ID WHERE data.weight > 3000 AND price.price < 30000;
SELECT d.acceleration FROM data d JOIN price p ON d.ID = p.ID WHERE p.price = (SELECT MAX(price) FROM price);
SELECT p.price FROM data d JOIN price p ON d.ID = p.ID WHERE d.car_name = 'ford torino';
SELECT c.origin FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.country WHERE d.car_name = 'ford torino' AND p.model_year = 1970;
SELECT COUNT(DISTINCT d.model) FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.country WHERE p.model_year = 1970 AND c.origin = 'USA';
SELECT d.car_name FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.country WHERE c.origin = 'USA';
SELECT d.car_name FROM data d JOIN price p ON d.ID = p.ID ORDER BY p.price DESC LIMIT 3;
SELECT model_year FROM production p JOIN data d ON p.ID = d.ID WHERE d.car_name = 'Chevrolet Impala';
SELECT COUNT(*) FROM data JOIN price ON data.ID = price.ID WHERE acceleration > 10 AND price < 30000 AND price > 20000;
SELECT d.weight FROM data d JOIN price p ON d.ID = p.ID WHERE p.price > 40000;
SELECT MAX(acceleration)  FROM data  WHERE ID IN (   SELECT ID    FROM price    WHERE price > 40000 );
SELECT AVG(p.price)  FROM data d  JOIN price p ON d.ID = p.ID  WHERE d.cylinders = 8;
SELECT MAX(displacement / cylinders) AS max_sweep_volume FROM data WHERE ID IN (   SELECT ID   FROM price   WHERE price < 30000 );
SELECT COUNT(d.ID) FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.country WHERE c.origin = 'Europe';
SELECT c.origin FROM country c JOIN production p ON c.country = p.country JOIN data d ON p.ID = d.ID WHERE d.car_name = 'Chevrolet Malibu';
SELECT mpg FROM data WHERE ID = (SELECT ID              FROM price              ORDER BY price DESC              LIMIT 1);
SELECT c.origin FROM country c JOIN production p ON c.country = p.country JOIN data d ON p.ID = d.ID WHERE d.ID = 382;
SELECT c.origin FROM country c JOIN production p ON c.country = p.country JOIN data d ON p.ID = d.ID JOIN price pr ON d.ID = pr.ID WHERE pr.price = 44274.40748;
SELECT p.price FROM data d JOIN price p ON d.ID = p.ID WHERE d.car_name = 'volkswagen dasher' AND d.acceleration = 14.1;
SELECT displacement FROM data WHERE ID = (SELECT ID FROM price WHERE price = 37443.85589);
SELECT p.model_year FROM production p JOIN data d ON p.ID = d.ID JOIN price pr ON d.ID = pr.ID WHERE pr.price = 32650.65157;
SELECT p.price FROM data d JOIN price p ON d.ID = p.ID WHERE d.car_name = 'toyota corona hardtop';
SELECT cylinders FROM data WHERE ID = (SELECT ID              FROM price              ORDER BY price              LIMIT 1);
SELECT d.car_name, p.price FROM data d JOIN price p ON d.ID = p.ID WHERE d.weight = (SELECT MAX(weight) FROM data);
SELECT c.origin FROM country c JOIN production p ON c.country = p.country JOIN data d ON p.ID = d.ID ORDER BY d.horsepower DESC LIMIT 1;
SELECT    (COUNT(CASE WHEN c.country = 'Japan' THEN d.ID END) / COUNT(d.ID)) * 100 AS percentage_of_japanese_cars FROM    data d   JOIN production p ON d.ID = p.ID   JOIN country c ON p.country = c.origin;
SELECT displacement / cylinders AS swept_volume FROM data WHERE ID IN (   SELECT ID   FROM price   WHERE price = 34538.97449 );
SELECT d.car_name FROM data d JOIN price p ON d.ID = p.ID ORDER BY p.price DESC LIMIT 1;
SELECT COUNT(*) FROM production p JOIN data d ON p.ID = d.ID JOIN country c ON p.country = c.origin WHERE p.model_year = 1981 AND c.country = 'USA';
SELECT p.price FROM data d JOIN price p ON d.ID = p.ID WHERE d.displacement / d.cylinders = (SELECT MAX(displacement / cylinders) FROM data);
SELECT d.car_name FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.origin WHERE c.country = 'Japan' ORDER BY d.horsepower DESC LIMIT 1;
SELECT COUNT(*)  FROM data  WHERE car_name = 'ford maverick';
SELECT c.country FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.origin WHERE d.mpg = (SELECT MAX(mpg) FROM data);
SELECT d.car_name, p.price FROM data d JOIN price p ON d.ID = p.ID WHERE d.car_name LIKE 'dodge%' ORDER BY p.price ASC LIMIT 1;
SELECT d.car_name FROM data d JOIN price p ON d.ID = p.ID JOIN production pr ON d.ID = pr.ID JOIN country c ON pr.country = c.country WHERE c.origin = 'USA' ORDER BY p.price DESC LIMIT 1;
SELECT COUNT(*) FROM data JOIN price ON data.ID = price.ID WHERE displacement > 400 AND price > 30000;
SELECT model_year FROM production WHERE country = 'Europe' GROUP BY model_year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.price FROM data d JOIN price p ON d.ID = p.ID WHERE d.car_name = 'peugeot 505s turbo diesel';
SELECT d.acceleration FROM data d JOIN price p ON d.ID = p.ID JOIN production pr ON d.ID = pr.ID JOIN country c ON pr.country = c.country WHERE c.origin = 'USA' AND p.price = (SELECT MIN(p2.price) FROM price p2);
SELECT country, COUNT(ID) AS total_cars, COUNT(DISTINCT model_year) AS total_years,         COUNT(ID) / COUNT(DISTINCT model_year) AS avg_annual_cars FROM production JOIN country ON production.country = country.origin GROUP BY country ORDER BY total_cars DESC LIMIT 1;
SELECT    (COUNT(CASE WHEN c.country = 'Japan' THEN d.ID END) /     COUNT(d.ID)) * 100 AS percentage FROM    data d   JOIN production p ON d.ID = p.ID   JOIN country c ON p.country = c.origin WHERE    d.displacement / d.cylinders > 30;
SELECT d.car_name FROM data d JOIN production p ON d.ID = p.ID WHERE p.model_year = 1975;
SELECT AVG(p.price)  FROM price p  JOIN data d ON p.ID = d.ID  JOIN production pr ON d.ID = pr.ID  JOIN country c ON pr.country = c.country  WHERE c.origin = 'Europe';
SELECT p.price FROM price p WHERE p.ID = 15;
SELECT COUNT(*) FROM data JOIN production ON data.ID = production.ID JOIN country ON production.country = country.origin WHERE country.country = 'Japan' AND data.weight < 3000;
SELECT COUNT(*) FROM data WHERE horsepower < 100 AND ID IN (   SELECT ID   FROM production   WHERE model_year = 1973 );
SELECT d.ID FROM data d JOIN price p ON d.ID = p.ID JOIN production pr ON d.ID = pr.ID JOIN country c ON pr.country = c.origin WHERE c.country = 'Japan' AND p.price > 35000 AND d.acceleration = 14;
SELECT p.model_year FROM production p JOIN data d ON p.ID = d.ID WHERE d.weight = (SELECT MAX(weight) FROM data);
SELECT d.horsepower, p.model_year FROM data d JOIN production p ON d.ID = p.ID WHERE d.car_name = 'Subaru Dl';
SELECT d.car_name FROM data d JOIN price p ON d.ID = p.ID JOIN production pr ON d.ID = pr.ID JOIN country c ON pr.country = c.country WHERE c.origin = 'Japan' AND p.price = (SELECT MAX(p2.price) FROM price p2                 JOIN production pr2 ON p2.ID = pr2.ID                 JOIN country c2 ON pr2.country = c2.country                 WHERE c2.origin = 'Japan');
SELECT d.car_name FROM data d JOIN price p ON d.ID = p.ID WHERE p.price = 20000;
SELECT COUNT(*) FROM data JOIN production ON data.ID = production.ID JOIN country ON production.country = country.origin JOIN price ON data.ID = price.ID WHERE price.price > 40000 AND country.country = 'USA';
SELECT p.price, c.country FROM data d JOIN price p ON d.ID = p.ID JOIN production pr ON d.ID = pr.ID JOIN country c ON pr.country = c.origin WHERE d.car_name = 'Ford Maverick';
SELECT d.car_name FROM data d JOIN price p ON d.ID = p.ID WHERE p.price > (SELECT AVG(price) * 0.85 FROM price);
SELECT    ABS(     (SELECT COUNT(*) FROM data d       JOIN production p ON d.ID = p.ID       WHERE d.horsepower = 130 AND p.model_year = 1970)      -     (SELECT COUNT(*) FROM data d       JOIN production p ON d.ID = p.ID       WHERE d.horsepower = 130 AND p.model_year = 1976)   ) AS difference;
SELECT d.ID FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.country WHERE c.origin = 'Asia' AND p.model_year = 1979;
SELECT c.country FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.origin WHERE d.mpg = (SELECT MIN(mpg) FROM data);
SELECT d.car_name, d.model, d.displacement / d.cylinders AS sweep_volume, p.model_year FROM data d JOIN production p ON d.ID = p.ID WHERE d.weight = (SELECT MAX(weight) FROM data);
SELECT d.car_name, d.horsepower FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.country WHERE p.model_year = 1977 AND c.origin = 'Europe';
SELECT d.car_name, d.model FROM data d JOIN price p ON d.ID = p.ID WHERE p.price = (SELECT MAX(price) FROM price);
SELECT p.price FROM data d JOIN price p ON d.ID = p.ID WHERE d.car_name = 'Chevrolet Bel Air';
SELECT AVG(p.price)  FROM price p  JOIN data d ON p.ID = d.ID  JOIN production pr ON d.ID = pr.ID  JOIN country c ON pr.country = c.country  WHERE c.origin = 'Japan';
SELECT c.country FROM production p JOIN data d ON p.ID = d.ID JOIN price pr ON d.ID = pr.ID JOIN country c ON p.country = c.origin WHERE pr.price = (SELECT MIN(price) FROM price);
SELECT d.ID, d.car_name, p.country FROM data d JOIN production p ON d.ID = p.ID WHERE p.model_year = 1975 AND d.cylinders = (     SELECT MAX(cylinders)     FROM data     JOIN production ON data.ID = production.ID     WHERE model_year = 1975 )
SELECT d.acceleration, d.cylinders, p.model_year FROM data d JOIN price p1 ON d.ID = p1.ID JOIN production p ON d.ID = p.ID WHERE p1.price = (SELECT MIN(price) FROM price);
SELECT d.car_name, p.price FROM data d JOIN price p ON d.ID = p.ID WHERE d.model = 82 AND d.mpg > 30;
SELECT COUNT(DISTINCT d.model) FROM data d JOIN production p ON d.ID = p.ID WHERE d.car_name = 'ford maverick';
SELECT    (COUNT(CASE WHEN d.country = 'USA' THEN d.ID ELSE NULL END) / COUNT(d.ID)) * 100 AS percentage FROM    data d   JOIN production p ON d.ID = p.ID   JOIN country c ON p.country = c.origin;
SELECT    AVG(production_rate) AS avg_production_rate,    d.car_name FROM    (   SELECT      model_year,      COUNT(ID) / 9 AS production_rate   FROM      production   WHERE      model_year BETWEEN 1971 AND 1980   GROUP BY      model_year   ) AS subquery JOIN    data d ON subquery.model_year = d.model_year WHERE    d.weight < 1800;
SELECT AVG(p.price)  FROM data d  JOIN price p ON d.ID = p.ID  WHERE d.model = 70;
SELECT p.price FROM data d JOIN price p ON d.ID = p.ID WHERE d.car_name = 'Chevrolet Vega 2300';
SELECT c.country FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.origin WHERE d.car_name = 'chevy c20';
SELECT p.price FROM data d JOIN price p ON d.ID = p.ID JOIN production pr ON d.ID = pr.ID WHERE d.car_name LIKE 'ford%' AND pr.model_year BETWEEN 1970 AND 1980;
SELECT car_name, mpg FROM data WHERE ID IN (   SELECT ID   FROM production   WHERE model_year = 1975 ) ORDER BY mpg DESC LIMIT 1;
SELECT d.car_name, d.mpg, p.price FROM data d JOIN price p ON d.ID = p.ID WHERE d.mpg = (SELECT MIN(mpg) FROM data) AND p.price = (SELECT MAX(price) FROM price);
SELECT COUNT(*) FROM data JOIN production ON data.ID = production.ID JOIN country ON production.country = country.origin WHERE country.country = 'USA' AND data.acceleration < 12;
SELECT COUNT(*) FROM data JOIN production ON data.ID = production.ID JOIN country ON production.country = country.origin WHERE country.country = 'Japan' AND data.weight > 2000;
SELECT d.car_name FROM data d JOIN price p ON d.ID = p.ID ORDER BY p.price DESC LIMIT 1;
SELECT model_year FROM production JOIN data ON production.ID = data.ID WHERE car_name = 'buick skylark 320';
SELECT c.country FROM production p JOIN data d ON p.ID = d.ID JOIN price pr ON d.ID = pr.ID JOIN country c ON p.country = c.origin WHERE p.model_year = 1970 AND pr.price = (SELECT MAX(pr2.price) FROM price pr2);
SELECT COUNT(*) FROM data JOIN production ON data.ID = production.ID WHERE horsepower > 200 AND model_year = 1975;
SELECT    (COUNT(CASE WHEN c.country = 'USA' THEN d.ID END) / COUNT(d.ID)) * 100 AS american_cars_percentage FROM    data d   JOIN production p ON d.ID = p.ID   JOIN country c ON p.country = c.origin;
SELECT AVG(d.weight) FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.country WHERE c.origin = 'Japan' AND d.cylinders = 4 AND p.model_year BETWEEN 1975 AND 1980;
SELECT SUM(donation_total)  FROM donations  WHERE donation_timestamp LIKE '2012%';
SELECT MAX(donation_total) AS highest_donation,         donation_timestamp AS timestamp FROM donations GROUP BY donation_timestamp ORDER BY donation_total DESC LIMIT 1;
SELECT SUM(donation_total)  FROM donations  WHERE donation_timestamp LIKE '2011%'  AND for_honoree = 't'  AND via_giving_page = 't';
SELECT    donor_acctid,    (donation_optional_support / donation_total) * 100 AS percentage_for_optional_support FROM    donations WHERE    is_teacher_acct = 'f';
SELECT e.title FROM essays e JOIN projects p ON e.projectid = p.projectid WHERE p.primary_focus_subject = 'Literacy';
SELECT e.title FROM essays e JOIN projects p ON e.projectid = p.projectid WHERE p.poverty_level = 'highest poverty';
SELECT p.primary_focus_subject FROM projects p WHERE p.title = 'Toot Your Flute!';  SELECT p.title FROM projects p WHERE p.primary_focus_subject = (   SELECT p.primary_focus_subject   FROM projects p   WHERE p.title = 'Toot Your Flute!' ) AND p.title!= 'Toot Your Flute!';
SELECT e.title FROM essays e JOIN projects p ON e.projectid = p.projectid WHERE p.teacher_prefix = 'Dr.';
SELECT title, total_price_excluding_optional_support FROM projects WHERE students_reached = 320;
SELECT d.donation_message, e.title FROM donations d JOIN projects p ON d.projectid = p.projectid JOIN essays e ON p.projectid = e.projectid WHERE d.donor_city = 'Texas City';
SELECT v.vendor_name, r.item_name, r.item_unit_price FROM resources r JOIN projects p ON r.projectid = p.projectid JOIN essays e ON p.projectid = e.projectid JOIN (   SELECT projectid   FROM essays   WHERE title = 'Lights, Camera, Action!' ) AS proj ON e.projectid = proj.projectid JOIN (   SELECT resourceid, vendorid, vendor_name   FROM resources ) AS v ON r.resourceid = v.resourceid;
SELECT SUM(donation_to_project)  FROM donations  WHERE projectid IN (   SELECT projectid    FROM essays    WHERE title = 'Whistle While We Work!' );
SELECT title, short_description FROM projects WHERE teacher_ny_teaching_fellow = 't';
SELECT e.title, p.total_price_excluding_optional_support FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid WHERE p.poverty_level ='moderate poverty' AND p.students_reached >= 600 GROUP BY e.title, p.total_price_excluding_optional_support HAVING SUM(d.donation_total) >= p.total_price_excluding_optional_support;
SELECT    SUM(CASE WHEN p.school_metro = 'rural' THEN d.donation_to_project ELSE 0 END) / SUM(d.donation_to_project) * 100 AS percentage FROM    donations d   JOIN projects p ON d.projectid = p.projectid;
SELECT    e.title,    p.total_price_excluding_optional_support AS total_cost,    SUM(d.donation_to_project) AS amount_collected,    (p.total_price_excluding_optional_support - SUM(d.donation_to_project)) / SUM(d.donation_to_project) * 100 AS percentage_lacking FROM    essays e    JOIN projects p ON e.projectid = p.projectid    JOIN donations d ON p.projectid = d.projectid  GROUP BY    e.title, p.total_price_excluding_optional_support  ORDER BY    p.total_price_excluding_optional_support DESC  LIMIT 1;
SELECT COUNT(DISTINCT school_district)  FROM projects  WHERE school_district = 'West New York School District'  AND poverty_level = 'highest poverty';
SELECT COUNT(*)  FROM donations  WHERE is_teacher_acct = 't' AND donor_state = 'CO-Colorado';
SELECT projectid FROM projects WHERE total_price_including_optional_support = (   SELECT MAX(total_price_including_optional_support)   FROM projects );
SELECT donor_state, COUNT(donor_state) as count FROM donations WHERE payment_method = 'paypal' AND for_honoree = 't' AND payment_included_campaign_gift_card = 't' GROUP BY donor_state ORDER BY count DESC LIMIT 1;
SELECT donationid, donation_total FROM donations ORDER BY donation_total DESC LIMIT 1;
SELECT p.projectid, r.item_name FROM projects p JOIN (   SELECT projectid, MAX(total_price_including_optional_support - total_price_excluding_optional_support) AS max_tip   FROM projects   GROUP BY projectid   ORDER BY max_tip DESC   LIMIT 1 ) AS max_tip_project ON p.projectid = max_tip_project.projectid JOIN resources r ON p.projectid = r.projectid;
SELECT r.item_name, r.item_quantity,         CASE WHEN p.teacher_prefix = 'Dr.'THEN 'Yes' ELSE 'No' END AS has_phd FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.projectid = 'd6ef27c07c30c81f0c16c32b6acfa2ff';
SELECT total_price_including_optional_support FROM projects p JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Recording Rockin\' Readers';
SELECT school_latitude, school_longitude FROM projects WHERE projectid IN (   SELECT projectid   FROM essays   WHERE title = 'Smile for the Camera!!!' );
SELECT    SUM(d.donation_total) AS total_donations,   e.title AS essay_title FROM    donations d   JOIN projects p ON d.projectid = p.projectid   JOIN essays e ON p.projectid = e.projectid WHERE    d.donor_acctid = (     SELECT        donor_acctid     FROM        donations     ORDER BY        donation_total DESC     LIMIT 1   ) GROUP BY    e.title;
SELECT    d.donor_acctid,    r.project_resource_type,    COUNT(r.project_resource_type) AS favorite_project_type_count FROM    donations d    JOIN projects p ON d.projectid = p.projectid    JOIN resources r ON p.projectid = r.projectid WHERE    d.donor_acctid IN (     SELECT        donor_acctid      FROM        donations      GROUP BY        donor_acctid      ORDER BY        SUM(donation_total) DESC      LIMIT 10   ) GROUP BY    d.donor_acctid,    r.project_resource_type ORDER BY    favorite_project_type_count DESC;
SELECT p.date_posted, r.item_name FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE p.date_posted = (SELECT MIN(date_posted) FROM projects);
SELECT r.vendor_name FROM resources r JOIN essays e ON r.projectid = e.projectid WHERE e.title = 'iMath';
SELECT p.date_posted, p.grade_level FROM projects p JOIN (   SELECT projectid   FROM resources   GROUP BY projectid   ORDER BY SUM(item_quantity) DESC   LIMIT 1 ) r ON p.projectid = r.projectid;
SELECT AVG(donation_to_project) AS avg_donation_amount FROM donations WHERE projectid IN (   SELECT projectid   FROM essays   WHERE title = 'Recording Rockin\' Readers' );
SELECT    e.title,    d.donor_acctid,    (d.donation_to_project / p.total_price_excluding_optional_support) * 100 AS percent_donated FROM    projects p   JOIN essays e ON p.projectid = e.projectid   JOIN donations d ON p.projectid = d.projectid WHERE    p.total_price_excluding_optional_support = (     SELECT        MAX(total_price_excluding_optional_support)      FROM        projects   )   AND d.donation_to_project = (     SELECT        MAX(donation_to_project)      FROM        donations      WHERE        projectid = p.projectid   );
SELECT    d.donor_state,    d.donor_acctid,    AVG(d.donation_optional_support) AS avg_optional_support,    r.project_resource_type FROM    donations d   JOIN (     SELECT        donor_acctid,        MAX(donation_optional_support) AS max_optional_support     FROM        donations     GROUP BY        donor_acctid     ORDER BY        max_optional_support DESC     LIMIT 5   ) AS top_donors ON d.donor_acctid = top_donors.donor_acctid   JOIN resources r ON d.projectid = r.projectid GROUP BY    d.donor_state,    d.donor_acctid,    r.project_resource_type ORDER BY    avg_optional_support DESC;
SELECT P.projectid, R.item_name FROM projects P JOIN resources R ON P.projectid = R.projectid WHERE P.school_city = 'Brooklyn' GROUP BY P.projectid, R.item_name HAVING COUNT(R.item_name) = (   SELECT MAX(cnt)   FROM (     SELECT COUNT(R1.item_name) AS cnt     FROM projects P1     JOIN resources R1 ON P1.projectid = R1.projectid     WHERE P1.school_city = 'Brooklyn'     GROUP BY P1.projectid   ) AS T1 );
SELECT COUNT(DISTINCT p.schoolid) FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE p.school_metro = 'urban' AND r.project_resource_type = 'Books';
SELECT schoolid FROM projects p JOIN (   SELECT projectid   FROM resources r   WHERE vendor_name = 'Amazon'   GROUP BY projectid   ORDER BY COUNT(*) DESC   LIMIT 1 ) AS max_resources ON p.projectid = max_resources.projectid LIMIT 1;
SELECT COUNT(DISTINCT d.donor_acctid) FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE d.donor_city = 'Los Angeles' AND p.school_city!= 'Los Angeles';
SELECT teacher_prefix FROM projects WHERE title = 'Reading About Other Cultures';
SELECT students_reached  FROM projects  WHERE title = 'Fit Firsties!';
SELECT p.title, d.donor_acctid FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE p.school_city = 'Chicago';
SELECT e.title FROM essays e JOIN projects p ON e.projectid = p.projectid WHERE p.teacher_prefix = 'Dr.' AND p.students_reached > 300;
SELECT DISTINCT r.vendor_name FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE r.project_resource_type = 'Book' AND p.primary_focus_subject = 'Literacy';
SELECT p.title FROM projects p JOIN (   SELECT projectid, MAX(item_unit_price * item_quantity) AS max_fund   FROM resources   GROUP BY projectid ) r ON p.projectid = r.projectid JOIN resources res ON p.projectid = res.projectid WHERE res.item_unit_price * res.item_quantity = r.max_fund;
SELECT COUNT(*)  FROM donations  WHERE donor_state = 'NY' AND is_teacher_acct = 't';
SELECT COUNT(DISTINCT donor_acctid) FROM donations WHERE donor_state = 'NJ' AND for_honoree = 't';
SELECT donation_message FROM donations WHERE donationid = 'a84dace1ff716f6f6f0c7af8ef9090a5d5';
SELECT DISTINCT project_resource_type FROM resources WHERE vendor_name = 'Lakeshore Learning Materials';
SELECT item_name FROM resources WHERE vendor_name = 'Lakeshore Learning Materials' AND item_quantity = (   SELECT MAX(item_quantity)   FROM resources   WHERE vendor_name = 'Lakeshore Learning Materials' );
SELECT COUNT(DISTINCT p.projectid) FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE p.teacher_ny_teaching_fellow = 't' AND d.donor_city = 'New York';
SELECT COUNT(p.projectid) FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE r.vendor_name = 'Lakeshore Learning Materials' AND p.teacher_prefix = 'Dr.';
SELECT DISTINCT r.vendor_name FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.poverty_level = 'highest poverty';
SELECT schoolid FROM projects WHERE projectid IN (   SELECT projectid   FROM resources   WHERE vendor_name = 'Lakeshore Learning Materials' ) ORDER BY fulfillment_labor_materials DESC LIMIT 1;
SELECT r.vendor_name FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.projectid = (   SELECT projectid   FROM projects   ORDER BY total_price_including_optional_support - total_price_excluding_optional_support DESC   LIMIT 1 )
SELECT SUM(d.donation_total)  FROM donations d  JOIN projects p ON d.projectid = p.projectid  WHERE p.school_city = 'Brooklyn';
SELECT d.donation_message FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.school_city = 'Brooklyn' AND p.school_magnet = 't';
SELECT COUNT(donationid) FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE payment_included_acct_credit = 't' AND p.school_year_round = 't';
SELECT SUM(d.dollar_amount)  FROM donations d  JOIN projects p ON d.projectid = p.projectid  WHERE p.primary_focus_area = 'Literacy & Language';
SELECT donor_acctid FROM donations WHERE projectid IN (   SELECT projectid   FROM projects   WHERE primary_focus_area = 'Literacy & Language' ) GROUP BY donor_acctid ORDER BY SUM(donation_total) DESC LIMIT 1;
SELECT item_name, MAX(item_quantity) AS max_quantity FROM resources JOIN projects ON resources.projectid = projects.projectid WHERE primary_focus_area = 'Literacy & Language' AND project_resource_type = 'Supplies' GROUP BY item_name ORDER BY max_quantity DESC LIMIT 1;
SELECT item_name, item_unit_price FROM resources WHERE projectid IN (   SELECT projectid   FROM projects   WHERE primary_focus_area = 'Literacy & Language' ) ORDER BY item_unit_price DESC LIMIT 1;
SELECT AVG(d.donation_total) FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.school_city = 'Brooklyn';
SELECT donor_city FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5';
SELECT is_teacher_acct FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5' LIMIT 1;
SELECT    CASE      WHEN primary_focus_subject LIKE '%Ph.D%' OR primary_focus_subject LIKE '%doctor%'        OR primary_focus_area LIKE '%Ph.D%' OR primary_focus_area LIKE '%doctor%'        OR secondary_focus_subject LIKE '%Ph.D%' OR secondary_focus_subject LIKE '%doctor%'        OR secondary_focus_area LIKE '%Ph.D%' OR secondary_focus_area LIKE '%doctor%'      THEN 'Yes'      ELSE 'No'    END  AS Has_Doctor_Degree  FROM projects  WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973';
SELECT teacher_ny_teaching_fellow FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973';
SELECT p.title FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE p.school_city = 'Abington';
SELECT r.item_name FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e';
SELECT COUNT(DISTINCT p.schoolid) FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.payment_included_acct_credit = 'f' AND p.school_magnet = 't' AND p.school_charter = 'f';
SELECT r.project_resource_type FROM resources r JOIN projects p ON r.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid WHERE d.donationid = 'b39547f29dfc25fb13c6e9e8d940dc43';
SELECT    COUNT(CASE WHEN pr.project_resource_type = 'Books' THEN p.projectid END) / COUNT(p.projectid) * 100 AS percentage FROM    projects p   JOIN resources r ON p.projectid = r.projectid   JOIN projects pr ON p.projectid = pr.projectid WHERE    p.school_magnet = 't';
SELECT COUNT(DISTINCT s.schoolid) FROM resources r JOIN projects p ON r.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid JOIN (   SELECT DISTINCT schoolid   FROM projects ) s ON p.schoolid = s.schoolid WHERE r.vendor_name = 'ABC School Supply' AND s.school_magnet = 't';
SELECT COUNT(DISTINCT p.schoolid) FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.donor_acctid = '000eebf28658900e63b538cf8a73afbd' AND p.poverty_level = 'highest poverty';
SELECT e.short_description FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid WHERE p.schoolid = '301c9bf0a45d159d162b65a93fddd74e';
SELECT school_city FROM projects p JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'iMath';
SELECT payment_method FROM donations WHERE projectid IN (   SELECT projectid   FROM projects   WHERE teacher_acctid = '822b7b8768c17456fdce78b65abcc18e' );
SELECT SUM(donation_total)  FROM donations  WHERE projectid IN (   SELECT projectid    FROM projects    WHERE teacher_acctid = '822b7b8768c17456fdce78b65abcc18e' );
SELECT is_teacher_acct = 't'  FROM donations  WHERE projectid IN (   SELECT projectid    FROM projects    WHERE schoolid = 'd4af834b1d3fc8061e1ee1b3f1a77b85' );
SELECT    COUNT(CASE WHEN school_city = 'Brooklyn' THEN 1 END) / COUNT(school_city) * 100 AS percentage FROM    projects p   JOIN donations d ON p.projectid = d.projectid WHERE    d.is_teacher_acct = 't';
SELECT    COUNT(CASE WHEN p.students_reached > 30 THEN 1 END) / COUNT(p.students_reached) * 100 AS percentage FROM    projects p   JOIN donations d ON p.projectid = d.projectid WHERE    d.is_teacher_acct = 't';
SELECT COUNT(DISTINCT school_city)  FROM projects  WHERE school_city = 'Bethlehem' AND school_metro ='suburban';
SELECT COUNT(*)  FROM projects  WHERE school_city = 'Los Angeles' AND school_year_round = 't';
SELECT COUNT(*) FROM projects WHERE school_magnet = 't' AND school_state = 'New York' AND school_city = 'Manhattan';
SELECT COUNT(DISTINCT teacher_acctid) FROM projects WHERE school_city = 'Twin Falls' AND primary_focus_area = 'Math & Science';
SELECT COUNT(DISTINCT teacher_acctid) FROM projects WHERE primary_focus_subject = 'Literature & Writing' AND teacher_prefix = 'Mr';
SELECT COUNT(DISTINCT p.projectid) FROM projects p WHERE p.grade_level = 'Grades 3-5' AND p.school_district = 'Boston Public School District';
SELECT school_city FROM projects p JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'ABC Read';
SELECT teacher_prefix  FROM projects  WHERE projectid = (SELECT projectid FROM essays WHERE title = 'Creating Memories and Inspiring Dreams');
SELECT d.is_teacher_acct  FROM donations d JOIN essays e ON d.projectid = e.projectid WHERE e.title = 'Calculate, Financial Security For Tomorrow Starts Today!';
SELECT e.title  FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid WHERE d.donation_message = 'Donation on behalf of Matt Carpenter because I''m a strong believer in education';
SELECT COUNT(*)  FROM donations  JOIN projects ON donations.projectid = projects.projectid  JOIN essays ON projects.projectid = essays.projectid  WHERE essays.title = 'A Rug For Reaching Readers';
SELECT SUM(donations.donation_to_project + donations.donation_optional_support)  FROM donations  JOIN essays ON donations.projectid = essays.projectid  WHERE essays.title = 'Engaging Young Readers with a Leveled Classroom Library';
SELECT d.donation_optional_support  FROM donations d JOIN projects p ON d.projectid = p.projectid JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Armenian Genocide';
SELECT e.short_description  FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid WHERE d.donation_timestamp = '2012-09-06 14:44:29';
SELECT d.donationid, d.donation_to_project, d.donation_included_optional_support  FROM donations d JOIN essays e ON d.projectid = e.projectid WHERE e.title = 'I Can''t See It...Can You Help Me???' AND d.donation_included_optional_support = true;
SELECT p.teacher_acctid  FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.donation_timestamp = '2008-07-29 11:38:43';
SELECT schoolid  FROM projects  WHERE title = 'Virtual Aquarium Needs Help!';
SELECT e.title  FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid WHERE d.donation_total = (SELECT MAX(donation_total) FROM donations);
SELECT (d.donation_optional_support / d.donation_total) * 100 AS tip_percentage FROM donations d JOIN projects p ON d.projectid = p.projectid JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Awesome Audiobooks Make Avid Readers';
SELECT (COUNT(CASE WHEN d.payment_method = 'creditcard' THEN d.projectid END) * 100.0 / COUNT(d.projectid)) AS percentage FROM donations AS d JOIN essays AS e ON d.projectid = e.projectid WHERE e.title = 'Bringing Drama to Life';
SELECT short_description  FROM essays  WHERE title = 'Future Einsteins Of America';
Error: 第 3248 个样本有 2 个SQL。
SELECT COUNT(*)  FROM projects  WHERE school_district = 'Livingston Parish School District' AND school_metro = 'suburban';
SELECT vendor_name FROM resources WHERE item_name = 'Classroom Keepers Management Center';
SELECT DISTINCT project_resource_type  FROM resources  WHERE vendor_name = 'Sax Arts & Crafts';
SELECT school_county, COUNT(*) as num_projects FROM projects WHERE school_state = 'NY' AND poverty_level = 'low poverty' GROUP BY school_county ORDER BY num_projects DESC LIMIT 1;
SELECT school_district  FROM projects  WHERE projectid = (SELECT projectid FROM essays WHERE title = 'Future Einsteins Of America');
SELECT d.payment_method  FROM donations d JOIN projects p ON d.projectid = p.projectid JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Needed Resource Materials For My Students';
SELECT COUNT(*)  FROM donations  JOIN projects ON donations.projectid = projects.projectid  WHERE projects.school_district = 'Memphis City School District' AND donations.payment_method = 'creditcard';
SELECT DISTINCT p.school_district FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE r.vendor_name = 'Barnes and Noble';
SELECT essays.projectid, essays.teacher_acctid, essays.title, essays.short_description, essays.need_statement, essays.essay, projects.school_latitude, projects.school_longitude FROM essays JOIN projects ON essays.projectid = projects.projectid JOIN resources ON projects.projectid = resources.projectid WHERE resources.item_name = 'R & A Plant Genetics' AND resources.vendor_name = 'Benchmark Education';
SELECT payment_method, COUNT(*) as count  FROM donations  JOIN projects ON donations.projectid = projects.projectid  WHERE projects.school_state = 'GA'  GROUP BY payment_method  ORDER BY count DESC  LIMIT 1;
SELECT p.school_latitude, p.school_longitude, p.resource_type  FROM projects p JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Look, Look, We Need a Nook!';
SELECT d.donation_message  FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.school_district = 'Newark School District' AND p.school_latitude = 40.735332 AND p.school_longitude = -74.196014;
SELECT p.date_posted FROM projects p JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Lets Share Ideas'
SELECT d.donation_message  FROM donations d  JOIN projects p ON d.projectid = p.projectid  JOIN essays e ON p.projectid = e.projectid  WHERE e.title = 'Lets Share Ideas' AND d.payment_method = 'credit card';
SELECT T4.project_resource_type, COUNT(T4.project_resource_type) AS frequency  FROM projects AS T1  JOIN resources AS T4 ON T1.projectid = T4.projectid  WHERE T1.school_district = 'Los Angeles Unif Sch Dist'  GROUP BY T4.project_resource_type  ORDER BY frequency DESC  LIMIT 1;
SELECT DISTINCT school_city  FROM projects  JOIN resources ON projects.projectid = resources.projectid  WHERE school_district = 'Los Angeles Unified School District'  AND vendor_name = 'Quill.com'  AND project_resource_type = 'supplies';
SELECT SUM(r.item_unit_price * r.item_quantity) AS total_price, d.school_latitude, d.school_longitude, d.school_district FROM resources r JOIN projects d ON r.projectid = d.projectid WHERE r.vendor_name = 'ABC School Supply' AND r.project_resource_type = 'Other' GROUP BY d.school_latitude, d.school_longitude, d.school_district;
SELECT SUM(d.donation_total) AS total_donated, e.school_city, p.poverty_level FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid WHERE e.title = 'Lets Share Ideas' AND d.payment_method = 'paypal' GROUP BY e.school_city, p.poverty_level;
SELECT COUNT(*)  FROM donations  WHERE donor_city = 'Pocatello' AND is_teacher_acct = 'f';
SELECT COUNT(DISTINCT schoolid) FROM projects WHERE school_county = 'Suffolk' AND teacher_prefix = 'Dr.';
SELECT SUM(donation_to_project + donation_optional_support)  FROM donations  WHERE payment_method = 'Amazon';
Error: 第 3270 个样本有 2 个SQL。
SELECT vendorid, COUNT(*) as resource_count  FROM resources  WHERE item_unit_price < 15 AND project_resource_type != 'technology'  GROUP BY vendorid;
SELECT COUNT(*)  FROM projects p  JOIN resources r ON p.projectid = r.projectid  WHERE r.item_quantity BETWEEN 5 AND 10  AND r.vendor_name = 'Quill.com';
SELECT projects.projectid  FROM projects  WHERE projects.school_district = 'Union Pub School District I-9'  AND projects.teacher_ny_teaching_fellow = 't';
SELECT DISTINCT school_city  FROM projects  WHERE school_county = 'Los Angeles' AND school_metro = 'Suburban';
SELECT projectid, vendor_name  FROM resources  WHERE project_resource_type = 'Books';
SELECT      (COUNT(DISTINCT CASE WHEN d.payment_included_campaign_gift_card = 't' THEN p.projectid ELSE NULL END) * 100 / COUNT(DISTINCT p.projectid)) AS percentage FROM      projects p LEFT JOIN      donations d ON p.projectid = d.projectid WHERE      d.payment_method = 'no_cash_received'
SELECT      (COUNT(CASE WHEN school_metro = 'suburban' THEN projectid END) * 100.0 / COUNT(projectid)) AS percentage_suburban FROM      projects WHERE      school_city = 'Santa Barbara';
SELECT      payment_method,     (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM donations WHERE substr(donation_timestamp,1,7) = '2013-03')) AS Percentage FROM      donations WHERE      substr(donation_timestamp,1,7) = '2013-03' GROUP BY      payment_method;
SELECT AVG(item_unit_price)  FROM resources  WHERE vendor_name = 'AKJ Books';
SELECT COUNT(DISTINCT p.schoolid) FROM projects p JOIN donations d ON p.projectid = d.projectid JOIN resources r ON p.projectid = r.projectid WHERE p.school_city = 'Brooklyn' AND p.school_metro = 'urban' AND d.for_honoree = 't' AND r.item_name = 'TT992 - Refill Pack for Safety Name Tags';
SELECT COUNT(DISTINCT p.schoolid) FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE p.poverty_level = 'highest' AND d.payment_included_campaign_gift_card = 't';
SELECT T2.school_city, COUNT(*) AS num_schools FROM donations AS T1 JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.dollar_amount = 'under_10' GROUP BY T2.school_city ORDER BY num_schools DESC LIMIT 1;
SELECT e.title  FROM essays e JOIN projects p ON e.projectid = p.projectid WHERE p.school_latitude = 42003718 AND p.school_longitude = -87668289;
SELECT      CASE          WHEN teacher_ny_teaching_fellow = 't' THEN 'Yes'         ELSE 'No'     END AS Is_NY_Teaching_Fellow FROM essays e JOIN projects p ON e.projectid = p.projectid WHERE e.title = 'Team More Books!';
SELECT DISTINCT r.vendor_name  FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.primary_focus_area = 'Literature';
SELECT DISTINCT vendor_name  FROM resources  JOIN projects ON resources.projectid = projects.projectid  WHERE projects.grade_level = 'Grades 9-12';
SELECT COUNT(DISTINCT d.donor_acctid) FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.school_city = 'Chicago' AND d.is_teacher_acct = 't';
SELECT COUNT(*)  FROM projects p  JOIN donations d ON p.projectid = d.projectid  WHERE p.school_city = 'Rock Hill' AND d.is_teacher_acct = 't';
SELECT SUM(donation_total)  FROM donations  JOIN projects ON donations.projectid = projects.projectid  WHERE donation_included_optional_support = 't' AND projects.students_reached > 300;
SELECT SUM(item_quantity)  FROM resources  JOIN projects ON resources.projectid = projects.projectid  WHERE projects.school_district = 'Onslow Co School District'  AND projects.school_metro = 'urban';
SELECT AVG(donation_to_project + donation_optional_support) AS average_donation FROM donations JOIN projects ON donations.projectid = projects.projectid WHERE projects.school_county = 'Fresno' GROUP BY projects.projectid;
SELECT      (COUNT(CASE WHEN e.title = 'ABC Read' THEN p.school_county ELSE NULL END) / COUNT(p.school_county)) * 100 AS percentage_of_counties_with_ABC_Read FROM      essays e JOIN      projects p ON e.projectid = p.projectid;
SELECT      AVG(dpr.avg_resources) AS average_resources_per_honoree FROM (     SELECT          d.projectid,         SUM(r.item_quantity) as total_resources,         COUNT(d.donationid) as donations_per_honoree     FROM          donations d     JOIN          resources r ON d.projectid = r.projectid     WHERE          d.for_honoree = 't'     GROUP BY          d.projectid ) dpr WHERE      dpr.donations_per_honoree > 0;
SELECT date_posted  FROM projects  JOIN essays ON projects.projectid = essays.projectid  WHERE title = 'Photojournalists Want to Exhibit Their Best Works';
SELECT r.item_name, MAX(r.item_unit_price)  FROM resources r  JOIN projects p ON r.projectid = p.projectid  WHERE p.primary_focus_subject = 'Mathematics'  GROUP BY r.item_name  ORDER BY MAX(r.item_unit_price) DESC  LIMIT 1;
SELECT school_latitude, school_longitude  FROM resources  JOIN projects ON resources.projectid = projects.projectid  WHERE item_name = 'Viewscreen LCD from Texas Instruments, TI-84 Plus';
SELECT COUNT(*)  FROM donations  JOIN projects ON donations.projectid = projects.projectid  WHERE projects.title = 'Look, Look, We Need a Nook!';
SELECT DISTINCT p.poverty_level  FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.donor_zip = '7079';
SELECT r.vendor_name  FROM resources r JOIN projects p ON r.projectid = p.projectid JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Bloody Times' GROUP BY r.vendor_name;
SELECT r.item_name, p.school_zip  FROM resources r  JOIN projects p ON r.projectid = p.projectid  WHERE r.vendor_name = 'Sax Arts & Crafts';
SELECT school_longitude, school_latitude  FROM essays  JOIN projects ON essays.projectid = projects.projectid  WHERE title = 'Wiping Away Bad Grades';
SELECT p.primary_focus_subject FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.payment_included_campaign_gift_card = 't';
SELECT r.item_name, r.item_unit_price, p.short_description FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE r.project_resource_type = 'Books' ORDER BY r.item_unit_price DESC LIMIT 1;
SELECT grade_level  FROM essays  JOIN projects ON essays.projectid = projects.projectid  WHERE title = 'Too Close for Comfort';
SELECT SUM(p.students_reached)  FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.donor_zip = '22205';
SELECT      (COUNT(CASE WHEN d.via_giving_page = 't' THEN d.donationid ELSE NULL END) * 100 / COUNT(d.donationid)) AS percentage,     p.primary_focus_area FROM      donations d JOIN      projects p ON d.projectid = p.projectid GROUP BY      p.primary_focus_area;
SELECT      (COUNT(CASE WHEN r.vendor_name = 'Best Buy for Business' THEN r.resourceid ELSE NULL END) * 100 / COUNT(r.resourceid)) AS percentage_bestbuy,     p.date_posted FROM      resources r JOIN      projects p ON r.projectid = p.projectid WHERE      r.project_resource_type = 'Technology' GROUP BY      p.date_posted;
SELECT      (SELECT SUM(num_sales) FROM region_sales WHERE game_platform_id = 50 AND region_id = 1) -     (SELECT SUM(num_sales) FROM region_sales WHERE game_platform_id = 51 AND region_id = 1) AS result;
SELECT g.game_name  FROM game g  JOIN genre ge ON g.genre_id = ge.id  WHERE ge.genre_name = (SELECT genre_name FROM genre JOIN game ON genre.id = game.genre_id WHERE game_name = '3D Lemmings') AND g.game_name != '3D Lemmings';
SELECT COUNT(*)  FROM game  WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'Action');
SELECT g.genre_name  FROM genre g JOIN game gm ON g.id = gm.genre_id WHERE gm.game_name = '3D Lemmings';
SELECT p.publisher_name  FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id WHERE g.game_name = '3D Lemmings';
SELECT g.game_name  FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = '10TACLE Studios';
SELECT COUNT(*)  FROM game  JOIN game_publisher ON game.id = game_publisher.game_id  JOIN publisher ON game_publisher.publisher_id = publisher.id  JOIN genre ON game.genre_id = genre.id  WHERE publisher.publisher_name = '10TACLE Studios' AND genre.genre_name = 'Puzzle';
SELECT g.game_name  FROM game g JOIN genre ge ON g.genre_id = ge.id JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = '10TACLE Studios' AND ge.genre_name = 'Puzzle';
SELECT publisher_name, COUNT(game_id) as total_games FROM game_publisher GROUP BY publisher_name ORDER BY total_games DESC LIMIT 1;
SELECT T3.platform_name FROM game_platform AS T1 JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id JOIN game AS T3 ON T2.game_id = T3.id JOIN platform AS T4 ON T1.platform_id = T4.id WHERE T3.game_name = 'Panzer Tactics' AND T4.release_year = 2007;
SELECT T3.release_year FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.game_name = 'Panzer Tactics' AND T4.platform_name = 'DS';
SELECT DISTINCT p.publisher_name  FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN genre gen ON g.genre_id = gen.id WHERE gen.genre_name = 'Puzzle';
SELECT p.publisher_name  FROM publisher p  JOIN game_publisher gp ON p.id = gp.publisher_id  JOIN game g ON gp.game_id = g.id  JOIN genre g_genre ON g.genre_id = g_genre.id  WHERE g_genre.genre_name = 'Puzzle'  GROUP BY p.id  ORDER BY COUNT(gp.id) DESC  LIMIT 1;
SELECT COUNT(DISTINCT publisher_id)  FROM game_publisher  JOIN game ON game_publisher.game_id = game.id  JOIN genre ON game.genre_id = genre.id  WHERE genre.genre_name = 'Puzzle'  GROUP BY game_publisher.publisher_id  HAVING COUNT(game.id) > 3;
SELECT      (COUNT(CASE WHEN g.genre_id IN (SELECT id FROM genre WHERE genre_name = 'Sports') AND gp.publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Nintendo'))      / COUNT(CASE WHEN gp.publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Nintendo'))) * 100 AS percentage FROM      game g JOIN      game_publisher gp ON g.id = gp.game_id
SELECT      AVG(DIVIDE(SUM(MULTIPLY(region_sales.num_sales, 100000)), 4)) AS avg_sales_per_region FROM      region_sales  JOIN      game_platform ON region_sales.game_platform_id = game_platform.id  JOIN      platform ON game_platform.platform_id = platform.id  WHERE      platform.platform_name = 'DS';
SELECT COUNT(game_id)  FROM game_publisher  WHERE publisher_id = 352;
SELECT genre.genre_id  FROM game  JOIN genre_publisher ON game.id = genre_publisher.game_id  JOIN genre ON genre_publisher.genre_id = genre.id  WHERE game.game_name = 'Pro Evolution Soccer 2012';
SELECT id FROM region WHERE region_name = 'Japan';
SELECT game_platform_id  FROM region_sales  WHERE region_id = 2  GROUP BY game_platform_id  ORDER BY SUM(num_sales) DESC  LIMIT 1;
SELECT genre.genre_id  FROM genre  JOIN game ON genre.id = game.genre_id  GROUP BY genre.id  ORDER BY COUNT(game.id) DESC  LIMIT 1;
SELECT game.id  FROM game  WHERE game.game_name = 'Resident Evil Archives: Resident Evil';
SELECT COUNT(*)  FROM game_platform  JOIN platform ON game_platform.platform_id = platform.id  WHERE platform.platform_name = 'X360' AND game_platform.release_year = '2010';
SELECT T4.publisher_name FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN publisher AS T4 ON T2.publisher_id = T4.id WHERE T1.game_name = 'ModNation Racers';
SELECT game_platform_id  FROM region_sales  JOIN region ON region_sales.region_id = region.id  WHERE region_name = 'Japan'  ORDER BY num_sales DESC  LIMIT 1;
SELECT COUNT(DISTINCT T3.platform_id) FROM game_platform AS T3 JOIN game AS T1 ON T1.id = T3.game_id JOIN platform AS T2 ON T2.id = T3.platform_id WHERE T1.game_name = 'Pro Evolution Soccer 2016';
SELECT COUNT(*)  FROM game  JOIN genre ON game.genre_id = genre.id  WHERE genre.genre_name = 'Sports';
SELECT T3.publisher_name  FROM game_publisher AS T1  JOIN publisher AS T3 ON T1.publisher_id = T3.id  JOIN game AS T2 ON T1.game_id = T2.id  WHERE T2.id = '10031'
SELECT p.publisher_name  FROM publisher p  JOIN game_publisher gp ON p.id = gp.publisher_id  GROUP BY p.publisher_name  ORDER BY COUNT(gp.id) DESC  LIMIT 1;
SELECT      (SUM(CASE WHEN g.genre_name = 'Sports' THEN 1 ELSE 0 END) - SUM(CASE WHEN g.genre_name = 'Simulation' THEN 1 ELSE 0 END)) as difference FROM      genre g JOIN      game_publisher gp ON g.id = gp.genre_id JOIN      game g2 ON gp.game_id = g2.id;
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id   JOIN game ON game.id = game_publisher.game_id   WHERE game.game_name = 'Resident Evil: Revelations';
SELECT (num_sales * 100000) AS Sales FROM region_sales JOIN region ON region_sales.region_id = region.id WHERE region_sales.game_platform_id = 3871 AND region.region_name = 'Europe';
SELECT COUNT(*)  FROM game  JOIN game_publisher ON game.id = game_publisher.game_id  JOIN publisher ON game_publisher.publisher_id = publisher.id  WHERE publisher.publisher_name = 'Ascaron Entertainment GmbH';
SELECT platform_name  FROM platform  WHERE id IN (     SELECT game_platform.platform_id      FROM game_platform      ORDER BY release_year ASC      LIMIT 1 );
SELECT      (SUM(CASE WHEN g.genre_name = 'Adventure' THEN 1 ELSE 0 END) * 100.0 / COUNT(g.id)) as percentage FROM      game_publisher gp JOIN      publisher p ON gp.publisher_id = p.id JOIN      game g ON gp.game_id = g.id JOIN      genre ge ON g.genre_id = ge.id WHERE      p.publisher_name = 'Namco Bandai Games';
SELECT      (SUM(CASE WHEN p.publisher_name = 'Atari' THEN 1 ELSE 0 END))::float /      SUM(CASE WHEN p.publisher_name = 'Athena' THEN 1 ELSE 0 END) AS times_more FROM      game_publisher gp JOIN      publisher p ON gp.publisher_id = p.id
SELECT COUNT(*)  FROM game_publisher  JOIN publisher ON game_publisher.publisher_id = publisher.id  WHERE publisher.publisher_name = 'Electronic Arts';
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id   JOIN game ON game.id = game_publisher.game_id   WHERE game.game_name = 'Advent Rising';
SELECT COUNT(*)  FROM (game        JOIN game_publisher ON game.id = game_publisher.game_id)  JOIN publisher ON publisher.id = game_publisher.publisher_id  JOIN genre ON genre.id = game.genre_id  WHERE genre.genre_name = 'Role-Playing' AND publisher.publisher_name = 'Microsoft Game Studios';
SELECT publisher_name, COUNT(*) as num_games_published FROM game_publisher JOIN publisher ON game_publisher.publisher_id = publisher.id GROUP BY publisher_name ORDER BY num_games_published DESC LIMIT 1;
SELECT T3.platform_name FROM game_publisher AS T1 JOIN game AS T2 ON T1.game_id = T2.id JOIN game_platform AS T3 ON T1.id = T3.game_publisher_id JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T2.publisher_id IN (     SELECT T5.publisher_id     FROM publisher AS T5     WHERE T5.publisher_name = 'Codemasters' ) AND T3.release_year = 2004;
SELECT COUNT(*)  FROM game_platform  JOIN platform ON game_platform.platform_id = platform.id  WHERE platform.platform_name = 'PS4' AND game_platform.release_year = 2014;
SELECT DISTINCT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game_platform gp2 ON gp2.id = gp.game_publisher_id WHERE gp2.release_year = (SELECT MIN(r.release_year) FROM game_platform r);
SELECT COUNT(DISTINCT T4.publisher_id)  FROM region AS T1  JOIN region_sales AS T2 ON T1.id = T2.region_id  JOIN game_platform AS T3 ON T2.game_platform_id = T3.id  JOIN platform AS T4 ON T3.platform_id = T4.id  JOIN game_publisher AS T5 ON T3.id = T5.game_platform_id  JOIN publisher AS T6 ON T5.publisher_id = T6.id  WHERE T1.region_name = 'Japan' AND T4.platform_name = 'X360' AND T3.release_year = 2011;
SELECT gp.platform_id  FROM game_platform gp  JOIN region_sales rs ON gp.id = rs.game_platform_id  JOIN region r ON rs.region_id = r.id  WHERE r.region_name = 'Europe'  GROUP BY gp.platform_id  ORDER BY SUM(rs.num_sales) DESC  LIMIT 1;
SELECT      release_year FROM      game_platform JOIN      game_publisher ON game_platform.id = game_publisher.game_platform_id JOIN      platform ON game_platform.platform_id = platform.id WHERE      platform.platform_name = 'PC' GROUP BY      release_year ORDER BY      COUNT(game_id) DESC LIMIT 1;
SELECT DISTINCT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id GROUP BY p.id, p.publisher_name HAVING COUNT(gp.game_id) = 1;
SELECT g.game_name  FROM game g  JOIN game_publisher gp ON g.id = gp.game_id  JOIN publisher p ON gp.publisher_id = p.id  WHERE p.publisher_name = '505 Games';
SELECT genre.id FROM genre JOIN game ON genre.id = game.genre_id WHERE game.game_name = '25 to Life';
SELECT game.id FROM game JOIN genre ON game.genre_id = genre.id WHERE genre.id = 2;
SELECT game_platform.release_year FROM game_platform JOIN game_publisher ON game_publisher.id = game_platform.game_publisher_id JOIN game ON game.id = game_publisher.game_id WHERE game.id BETWEEN 1 AND 10;
SELECT game_publisher_id  FROM game_platform  WHERE platform_id = 15;
SELECT game.id FROM game JOIN game_platform ON game.id = game_platform.game_id WHERE game_platform.release_year BETWEEN 2000 AND 2003;
SELECT (num_sales * 100000) AS Sales FROM region_sales WHERE region_id = 2 AND game_platform_id = 9615;
SELECT DISTINCT p.platform_name FROM platform p JOIN game_platform gp ON p.id = gp.platform_id WHERE gp.release_year = 2016;
SELECT T3.release_year FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T1.game_name = '3DS Classic Collection';
SELECT (AVG(t.num_sales) * 100000) AS average_sales_japan FROM region_sales t JOIN region r ON t.region_id = r.id WHERE r.region_name = 'Japan';
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id  JOIN game_platform ON game_publisher.id = game_platform.game_publisher_id  WHERE game_platform.release_year BETWEEN 2000 AND 2002;
SELECT g.game_name  FROM game g  JOIN game_publisher gp ON g.id = gp.game_id  JOIN publisher p ON gp.publisher_id = p.id  WHERE p.publisher_name = '3DO';
SELECT COUNT(*)  FROM genre g  JOIN game_platform gp ON g.id = gp.genre_id  WHERE g.genre_name = 'Role-Playing';
SELECT T3.region_name FROM region_sales AS T1 JOIN region AS T3 ON T1.region_id = T3.id WHERE T1.num_sales > 3
SELECT p.publisher_name  FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game_platform gp_pl ON gp.id = gp_pl.game_publisher_id JOIN region_sales rs ON gp_pl.id = rs.game_platform_id WHERE rs.region_id IN (     SELECT id FROM region WHERE region_name = 'North America' ) GROUP BY p.id ORDER BY SUM(rs.num_sales) DESC LIMIT 1;
SELECT game_platform.release_year FROM region_sales JOIN game_platform ON region_sales.game_platform_id = game_platform.id JOIN region ON region_sales.region_id = region.id WHERE region_sales.num_sales = 3.5 AND region.region_name = 'North America';
SELECT T3.platform_name FROM game AS T1 JOIN game_platform AS T2 ON T1.id = T2.game_id JOIN platform AS T3 ON T3.id = T2.platform_id WHERE T1.game_name = '15 Days';
SELECT T3.publisher_name  FROM game_publisher AS T1  JOIN publisher AS T3 ON T1.publisher_id = T3.id  JOIN game AS T2 ON T1.game_id = T2.id  WHERE T2.id = 75;
SELECT g.game_name  FROM region r  JOIN region_sales rs ON r.id = rs.region_id  JOIN game_platform gp ON rs.game_platform_id = gp.id  JOIN game g ON gp.game_publisher_id = game_publisher.id  JOIN publisher p ON game_publisher.publisher_id = p.id  WHERE r.region_name = 'Japan'  GROUP BY g.game_name  ORDER BY SUM(rs.num_sales) DESC  LIMIT 1;
SELECT T4.publisher_name FROM region_sales AS T1 JOIN game_platform AS T2 ON T1.game_platform_id = T2.id JOIN region AS T3 ON T3.id = T1.region_id JOIN game_publisher AS T4 ON T4.id = T2.game_publisher_id WHERE T3.region_name = 'Japan' AND T1.num_sales > (SELECT 0.9 * AVG(T5.num_sales) FROM region_sales AS T5 JOIN game_platform AS T6 ON T5.game_platform_id = T6.id JOIN region AS T7 ON T7.id = T5.region_id WHERE T7.region_name = 'Japan')
SELECT      (COUNT(CASE WHEN T4.platform_name = 'PSP' THEN T5.id ELSE NULL END)      / COUNT(T5.id)) * 100 AS percentage FROM      game_platform AS T5 JOIN      platform AS T4 ON T4.id = T5.platform_id WHERE      T5.release_year = 2004;
SELECT COUNT(*)  FROM game_platform  WHERE release_year = 1981;
SELECT genre.id FROM genre JOIN game ON genre.id = game.genre_id WHERE game.game_name = '2Xtreme';
SELECT SUM(region_sales.num_sales * 100000) as total_sales FROM region_sales JOIN game_platform ON region_sales.game_platform_id = game_platform.id JOIN platform ON game_platform.platform_id = platform.id WHERE platform.id = 9658;
SELECT id  FROM publisher  WHERE publisher_name = '1C Company';
SELECT genre.genre_name  FROM genre  WHERE genre.id = 3;
SELECT game.id FROM game JOIN game_platform ON game.id = game_platform.game_id WHERE game_platform.release_year = 2017;
SELECT T3.release_year FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T1.game_name = 'Adventure Island'
SELECT COUNT(*)  FROM genre  JOIN game ON genre.id = game.genre_id  WHERE genre.genre_name = 'Puzzle';
SELECT g.game_name  FROM game g  JOIN game_platform gp ON g.id = gp.game_publisher_id  JOIN platform p ON gp.platform_id = p.id  WHERE p.platform_name = 'SCD';
SELECT COUNT(*)  FROM game  JOIN game_publisher ON game.id = game_publisher.game_id  JOIN publisher ON game_publisher.publisher_id = publisher.id  WHERE publisher.publisher_name = 'Acclaim Entertainment';
SELECT T3.publisher_name FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Chronicles of the Sword';
SELECT SUM(num_sales * 100000) AS total_sales FROM region_sales  JOIN game_platform ON region_sales.game_platform_id = game_platform.id JOIN platform ON game_platform.platform_id = platform.id JOIN region ON region_sales.region_id = region.id WHERE region.name = 'North America' AND platform.name = 'PS4';
SELECT gp.id FROM game_platform gp JOIN region_sales rs ON gp.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Europe' GROUP BY gp.id ORDER BY SUM(rs.num_sales) DESC LIMIT 1;
SELECT game.game_name  FROM game  JOIN game_platform ON game.id = game_platform.game_publisher_id  WHERE game_platform.release_year = 2011;
SELECT COUNT(*)  FROM game_platform  JOIN platform ON game_platform.platform_id = platform.id  WHERE platform.platform_name = 'Wii';
SELECT g.game_name, gp.release_year FROM game g JOIN genre gen ON g.genre_id = gen.id JOIN game_publisher gp ON g.id = gp.game_id WHERE gen.genre_name = 'Sports' LIMIT 5;
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id   JOIN game ON game_publisher.game_id = game.id   WHERE game.game_name = '2Xtreme';
SELECT T3.platform_name FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T1.game_name = 'Panzer Tactics';
SELECT      (SUM(CASE WHEN r.region_name = 'North America' THEN rs.num_sales ELSE 0 END)      - AVG(rs.num_sales)) / AVG(rs.num_sales) * 100 AS percent FROM      region r JOIN      region_sales rs ON r.id = rs.region_id WHERE      rs.game_platform_id = 9577;
SELECT game_name FROM game WHERE LENGTH(game_name) = (     SELECT MAX(LENGTH(game_name))     FROM game );
SELECT COUNT(*)  FROM game_platform  WHERE release_year = 2001;
SELECT SUM(region_sales.num_sales) AS total_sales FROM region_sales;
SELECT      (COUNT(gp.game_id) / COUNT(DISTINCT gp.publisher_id)) AS avg_games_published_by_publisher FROM      game_publisher gp;
SELECT MIN(game_platform.release_year) AS first_release_year FROM game_platform;
SELECT genre.genre_name  FROM genre  WHERE (SELECT COUNT(*) FROM game_publisher WHERE game_publisher.genre_id = genre.id)  IN  (SELECT MIN(cnt) FROM      (SELECT COUNT(*) AS cnt FROM game_publisher GROUP BY genre_id) subquery );
SELECT T3.publisher_name  FROM game AS T1  JOIN game_publisher AS T2 ON T1.id = T2.game_id  JOIN publisher AS T3 ON T2.publisher_id = T3.id  WHERE T1.game_name = 'Prism: Light the Way';
SELECT      g.p.platform_name,     YEAR(gp.release_year) AS release_year,     COUNT(gp.id) AS total_games FROM      game_platform gp JOIN      game_game_publisher gp2 ON gp.id = gp2.game_platform_id JOIN      game g ON gp2.id = g.id JOIN      platform g_p ON gp.id = g_p.id GROUP BY      g_p.platform_id, YEAR(gp.release_year) ORDER BY      YEAR(gp.release_year) DESC, total_games DESC;
SELECT COUNT(*)  FROM region_sales  JOIN region ON region_sales.region_id = region.id  WHERE region.sales = 0  AND region.region_name = 'Europe'
SELECT game.game_name  FROM game  JOIN game_platform ON game.id = game_platform.game_id  WHERE game_platform.release_year = 2006;
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id   JOIN game ON game.id = game_publisher.game_id   WHERE game.game_name = 'Mario vs. Donkey Kong';
SELECT publisher_name, COUNT(game_id) as num_games FROM game_publisher GROUP BY publisher_name ORDER BY num_games DESC LIMIT 1;
SELECT g.game_name  FROM game g  JOIN genre ge ON g.genre_id = ge.id  WHERE ge.genre_name = 'Platform';
SELECT DISTINCT T2.release_year  FROM game_platform AS T2 JOIN platform AS T1 ON T2.platform_id = T1.id WHERE T1.platform_name = 'WiiU'
SELECT g.game_name  FROM game_platform gp JOIN region r ON gp.region_id = r.id  JOIN region_sales rs ON gp.id = rs.game_platform_id   JOIN game g ON gp.game_publisher_id = g.id WHERE r.region_name = 'Japan' ORDER BY rs.num_sales DESC LIMIT 1;
SELECT game.game_name  FROM game  JOIN game_publisher ON game.id = game_publisher.game_id  JOIN publisher ON game_publisher.publisher_id = publisher.id  WHERE publisher.publisher_name = 'Activision';
SELECT COUNT(DISTINCT T4.publisher_id)  FROM game AS T1  JOIN game_publisher AS T2 ON T1.id = T2.game_id  JOIN publisher AS T4 ON T2.publisher_id = T4.id  WHERE T1.game_name LIKE 'Marvel%';
SELECT      (SUM(CASE WHEN genre.genre_name = 'sports' THEN 1 ELSE 0 END) * 100.0 / COUNT(game.game_name)) as percentage FROM      game JOIN      genre ON game.genre_id = genre.id;
SELECT      (SUM(CASE WHEN r.region_name = 'North America' THEN r.num_sales ELSE 0 END)      / SUM(CASE WHEN r.region_name = 'Japan' THEN r.num_sales ELSE 0 END)) AS sales_ratio FROM      region_sales rs JOIN      region r ON rs.region_id = r.id;
SELECT release_year FROM game_platform WHERE COUNT(release_year) = (     SELECT MAX(count_releases)     FROM (         SELECT COUNT(release_year) AS count_releases         FROM game_platform         GROUP BY release_year     ) temp_table );
SELECT COUNT(*)  FROM publisher  WHERE publisher_name LIKE '%Interactive%';
SELECT p.platform_name  FROM platform p  JOIN game_platform gp ON p.id = gp.platform_id  JOIN region_sales rs ON gp.id = rs.game_platform_id  JOIN region r ON rs.region_id = r.id  WHERE r.region_name = 'North America'  GROUP BY p.id  ORDER BY SUM(rs.num_sales) DESC  LIMIT 2;
SELECT COUNT(*)  FROM game  JOIN game_publisher ON game.id = game_publisher.game_id  JOIN publisher ON game_publisher.publisher_id = publisher.id  JOIN game_platform ON game_publisher.id = game_platform.game_publisher_id  WHERE publisher.publisher_name = 'BMG Interactive Entertainment'  AND game_platform.release_year = 2012;
SELECT      g.publisher_name FROM      game_platform gp JOIN      game_publisher gp ON gp.id = gp.game_publisher_id JOIN      game g ON g.id = gp_game.id WHERE      gp.release_year = 2007 GROUP BY      g.publisher_name ORDER BY      COUNT(g.publisher_name) DESC LIMIT 1;
SELECT COUNT(DISTINCT T3.publisher_id) FROM game_platform AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_publisher_id JOIN game AS T3 ON T3.id = T2.game_id WHERE T3.game_name = 'Minecraft';
SELECT p.publisher_name  FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN genre ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Action' GROUP BY p.publisher_name ORDER BY COUNT(g.id) DESC LIMIT 1;
SELECT COUNT(*)  FROM (game        JOIN genre ON game.genre_id = genre.id)        JOIN game_publisher ON game.id = game_publisher.game_id        JOIN publisher ON game_publisher.publisher_id = publisher.id  WHERE genre.genre_name = 'Sports' AND publisher.publisher_name = 'Nintendo';
SELECT genre.genre_name  FROM genre  JOIN game ON genre.id = game.genre_id  WHERE game.game_name = '2 Games in 1: Sonic Advance & ChuChu Rocket!';
SELECT COUNT(*)  FROM region_sales  JOIN region ON region_sales.region_id = region.id  JOIN game_platform ON region_sales.game_platform_id = game_platform.id  JOIN platform ON game_platform.platform_id = platform.id  WHERE region.region_name = 'Other'  AND game_platform.platform_name = 'DS'  AND game_platform.num_sales > 0;
SELECT T1.game_name FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN publisher AS T3 ON T3.id = T2.publisher_id WHERE T3.publisher_name = 'American Softworks';
SELECT COUNT(*)  FROM game  JOIN genre ON game.genre_id = genre.id  WHERE genre.genre_name = 'Strategy';
SELECT p.publisher_name  FROM publisher AS p  JOIN game_publisher AS gp ON p.id = gp.publisher_id  JOIN game AS g ON gp.game_id = g.id  WHERE g.game_name = 'Overwatch';
SELECT genre_name  FROM genre  WHERE id IN (     SELECT genre_id      FROM game      GROUP BY genre_id      ORDER BY COUNT(game_name) DESC      LIMIT 1 );
SELECT      SUM(total_number_of_games_sold) AS games_sold_in_europe FROM  (     SELECT          r.num_sales * 100000 AS total_number_of_games_sold     FROM          region_sales rs     JOIN          region r ON rs.region_id = r.id     WHERE          r.region_name = 'Europe' AND         rs.game_platform_id = 26 ) subquery;
SELECT COUNT(*)  FROM game_platform  WHERE release_year = 2001;
SELECT COUNT(*)  FROM game  WHERE game_name LIKE '%Box%';
SELECT game_name FROM region_sales GROUP BY game_platform_id ORDER BY SUM(num_sales) DESC LIMIT 3;
SELECT MIN(release_year)  FROM game_platform;
SELECT DISTINCT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id WHERE p.publisher_name LIKE '%Entertainment%';
SELECT game.game_name  FROM game  JOIN genre ON game.genre_id = genre.id  WHERE genre.genre_name = 'Adventure';
SELECT T1.game_name  FROM game AS T1  JOIN game_publisher AS T2 ON T1.id = T2.game_id  JOIN publisher AS T3 ON T2.publisher_id = T3.id  WHERE T3.publisher_name = 'Pioneer LDC'
SELECT T1.game_name  FROM game AS T1  JOIN game_platform AS T2 ON T1.id = T2.game_publisher_id  JOIN platform AS T3 ON T3.id = T2.platform_id  WHERE T3.platform_name = 'SCD';
SELECT T1.game_name FROM game AS T1 JOIN game_platform AS T2 ON T1.id = T2.game_id JOIN region AS T3 ON T3.id = T2.region_id WHERE T3.region_name = 'Japan';
SELECT DISTINCT g.genre_name FROM genre g JOIN game_publisher gp ON g.id = gp.genre_id JOIN publisher p ON gp.publisher_id = p.id JOIN game_platform gp2 ON gp.id = gp2.game_publisher_id WHERE p.publisher_name = 'Agatsuma Entertainment';
SELECT COUNT(*)  FROM game  WHERE genre_id NOT IN (     SELECT id      FROM genre      WHERE genre_name IN ('Role-Playing', 'Shooter', 'Simulation') );
SELECT      r.region_name,     gp.platform_id,     COUNT(rs.num_sales) as total_sales FROM      region_sales rs JOIN      region r ON rs.region_id = r.id JOIN      game_platform gp ON gp.id = rs.game_platform_id GROUP BY      r.region_name, gp.platform_id ORDER BY      total_sales DESC LIMIT 1;
SELECT p.publisher_name  FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN genre g_genre ON g.genre_id = g_genre.id WHERE g_genre.genre_name = 'Puzzle' GROUP BY p.publisher_name ORDER BY COUNT(p.publisher_name) DESC LIMIT 1;
SELECT game_name FROM (   SELECT game.game_name, SUM(region_sales.num_sales) as total_sales   FROM game   JOIN game_publisher ON game.id = game_publisher.game_id   JOIN region_sales ON game_publisher.id = region_sales.game_platform_id   GROUP BY game.game_name ) AS game_sales WHERE total_sales = (SELECT MIN(total_sales) FROM game_sales)
SELECT T4.publisher_name FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN publisher AS T4 ON T2.publisher_id = T4.id JOIN (     SELECT game_id     FROM game     WHERE game_name = 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3' ) AS T3 ON T1.id = T3.game_id;
SELECT T3.region_name FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN game_platform AS T4 ON T2.id = T4.game_publisher_id JOIN region_sales AS T5 ON T4.id = T5.game_platform_id JOIN region AS T3 ON T5.region_id = T3.id WHERE T1.game_name = 'Pengo'
SELECT game_name FROM game JOIN game_platform ON game.id = game_platform.game_publisher_id WHERE release_year = 2010;
SELECT AVG(T2.num_sales * 100000) AS AverageSales FROM game_platform AS T1 JOIN region_sales AS T2 ON T1.id = T2.game_platform_id JOIN platform AS T3 ON T3.platform_name = 'PS2' WHERE T3.id = T1.platform_id;
SELECT      (SUM(CASE WHEN T4.publisher_name = 'Brash Entertainment' THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.id)) AS percentage FROM      genre AS T1 JOIN      game AS T2 ON T1.id = T2.genre_id JOIN      game_publisher AS T3 ON T2.id = T3.game_id JOIN      publisher AS T4 ON T3.publisher_id = T4.id;
SELECT SUM(num_sales) * 100000 AS total_sold FROM region_sales  WHERE region_id = 1;
SELECT COUNT(*)  FROM game  WHERE genre_id IN (     SELECT id      FROM genre      WHERE genre_name = 'Sports' )  AND game_name LIKE '%FIFA%';
SELECT T3.platform_name FROM region_sales AS T1 JOIN game_platform AS T2 ON T1.game_platform_id = T2.id JOIN platform AS T3 ON T2.platform_id = T3.id WHERE T1.region_id IN (     SELECT id FROM region WHERE region_name = 'Europe' ) GROUP BY T2.id ORDER BY SUM(T1.num_sales) DESC LIMIT 1;
SELECT T3.publisher_name FROM game_platform AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_publisher_id JOIN publisher AS T3 ON T2.publisher_id = T3.id JOIN game AS T4 ON T4.id = T2.game_id WHERE T4.game_name = '2002 FIFA World Cup';
SELECT T4.platform_name FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.game_name = '3Xtreme';
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id   JOIN game ON game_publisher.game_id = game.id   WHERE game.game_name = '2010 FIFA World Cup South Africa';
SELECT region_name FROM region WHERE region.id = (     SELECT region_id      FROM region_sales     GROUP BY region_id     ORDER BY SUM(num_sales) DESC     LIMIT 1 );
SELECT      SUM(T3.num_sales) * 100000 AS total_sold  FROM      game_platform AS T1  JOIN      region AS T2 ON T1.region_id = T2.id  JOIN      region_sales AS T3 ON T1.game_platform_id = T3.game_platform_id  JOIN      platform AS T4 ON T1.platform_id = T4.id  JOIN      game_publisher AS T5 ON T1.game_publisher_id = T5.id  JOIN      publisher AS T6 ON T5.publisher_id = T6.id  JOIN      game AS T7 ON T5.id = T7.game_publisher_id  JOIN      genre AS T8 ON T7.genre_id = T8.id  WHERE      T4.platform_name = 'PS3'  AND      T2.region_name = 'Japan';
SELECT T1.game_name FROM game G AS T1 JOIN game_platform GP ON T1.id = GP.game_publisher_id WHERE GP.release_year = 2007;
SELECT COUNT(*)  FROM game  JOIN game_publisher ON game.id = game_publisher.game_id  JOIN publisher ON game_publisher.publisher_id = publisher.id  WHERE publisher.publisher_name = 'Activision';
SELECT gp.release_year  FROM region_sales rs  JOIN game_platform gp ON rs.game_platform_id = gp.id  JOIN region r ON rs.region_id = r.id  WHERE r.region_name = 'Japan' AND rs.num_sales > 200000;
SELECT COUNT(*)  FROM game_platform  JOIN platform ON game_platform.platform_id = platform.id  WHERE game_platform.release_year = 2010 AND platform.platform_name = 'PS3';
SELECT publisher_name FROM game_publisher GROUP BY publisher_name ORDER BY COUNT(game_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM game  JOIN genre ON game.genre_id = genre.id  WHERE genre.genre_name = 'shooter';
SELECT      (SUM(CASE WHEN p.platform_name = 'PS4' THEN 1 ELSE 0 END) * 100.0 / COUNT(gp.id)) AS percentage FROM      game_platform gp JOIN      platform p ON gp.platform_id = p.id WHERE      gp.release_year = 2014;
SELECT SUM(region_sales.num_sales)  FROM region_sales  JOIN game_platform ON region_sales.game_platform_id = game_platform.id  JOIN region ON region_sales.region_id = region.id  WHERE region.region_name = 'ID 4';
SELECT game_platform_id  FROM region_sales  WHERE region_id = 1;
SELECT      (SUM(region_sales.num_sales WHERE region_sales.region_id = 2)) -      (SUM(region_sales.num_sales WHERE region_sales.region_id = 3)) AS sales_difference;
SELECT DISTINCT gp.platform_id FROM game_platform AS gp WHERE gp.release_year = 2007;
SELECT game_publisher_id  FROM game_platform  WHERE id = 16;
SELECT COUNT(DISTINCT gp.id)  FROM game_platform gp  WHERE gp.release_year = 1984;
SELECT DISTINCT gp.platform_id FROM game_platform gp JOIN region_sales rs ON gp.id = rs.game_platform_id WHERE rs.region_id = 3;
SELECT T3.game_name, SUM(T5.num_sales) AS sales FROM game_platform AS T4 JOIN region AS T5 ON T4.region_id = T5.id JOIN game AS T3 ON T4.game_publisher_id = T3.id WHERE T5.region_name = 'Japan'
SELECT COUNT(DISTINCT gp.id)  FROM game_publisher gp JOIN game_platform gp_pl ON gp.id = gp_pl.game_publisher_id JOIN platform p ON p.id = gp_pl.platform_id  WHERE p.platform_name = 'X360';
SELECT DISTINCT p.platform_name FROM platform p JOIN game_platform gp ON p.id = gp.platform_id WHERE gp.release_year = 2000;
SELECT      (SUM(CASE WHEN p.platform_name = 'PS3' THEN 1 ELSE 0 END) -       SUM(CASE WHEN p.platform_name = 'X360' THEN 1 ELSE 0 END)) as difference FROM      game_platform gp JOIN      platform p ON gp.platform_id = p.id JOIN      game_publisher gpb ON gp.id = gpb.game_publisher_id JOIN      publisher pub ON gpb.publisher_id = pub.id;
SELECT game.id FROM game JOIN game_publisher ON game.id = game_publisher.game_id JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE publisher.publisher_name = 'Bethesda Softworks';
SELECT COUNT(*)  FROM game_publisher  JOIN publisher ON game_publisher.publisher_id = publisher.id  WHERE publisher_name IN ('Capcom', 'Sony Computer Entertainment')
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id   JOIN game ON game.id = game_publisher.game_id   WHERE game.game_name = 'Grand Theft Auto V';
SELECT game.game_name  FROM game  JOIN genre ON game.genre_id = genre.id  WHERE genre.genre_name = 'Racing';
SELECT COUNT(*)  FROM genre  JOIN game  ON genre.id = game.genre_id  WHERE genre.genre_name = 'Fighting';
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id  JOIN publisher ON game_publisher.publisher_id = publisher.id  WHERE publisher.id = 464;
SELECT T3.platform_name FROM game AS T1 JOIN game_platform AS T2 ON T1.id = T2.game_id JOIN platform AS T3 ON T3.id = T2.platform_id WHERE T1.game_name = 'Final Fantasy XIII-2';
SELECT SUM(region_sales.num_sales)  FROM region_sales  JOIN game_platform ON region_sales.game_platform_id = game_platform.id  WHERE game_platform.release_year = 2000;
SELECT      (SUM(CASE WHEN game_platform.release_year = 2000 THEN region_sales.num_sales ELSE 0 END) -      SUM(CASE WHEN game_platform.release_year = 1990 THEN region_sales.num_sales ELSE 0 END)) AS sales_difference FROM      region_sales JOIN      game_platform ON region_sales.game_platform_id = game_platform.id;
SELECT DISTINCT gp.platform_id FROM game_platform gp WHERE gp.release_year = 2006;
SELECT AVG(region_sales.num_sales * 100000) as average_sales FROM region_sales JOIN game_platform ON region_sales.game_platform_id = game_platform.id JOIN region ON region_sales.region_id = region.id WHERE region.region_name = 3;
SELECT release_year  FROM game_platform  WHERE id = 19  AND game_publisher_id = 6657;
SELECT SUM(region_sales.num_sales) * 100000 AS total_sales_in_all_regions FROM region_sales WHERE region_sales.game_platform_id = 66;
SELECT game_name FROM game WHERE id = 44;
SELECT g.game_name  FROM game g  JOIN game_platform gp ON g.id = gp.game_publisher_id  JOIN platform p ON gp.platform_id = p.id  WHERE p.platform_name = 'Wii';
SELECT game_name FROM game JOIN game_platform ON game.id = game_platform.game_publisher_id WHERE game_platform.release_year = 2015;
SELECT COUNT(*)  FROM game  JOIN genre ON game.genre_id = genre.id  JOIN game_platform ON game.id = game_platform.game_publisher_id  WHERE genre.genre_name = 'Adventure' AND game_platform.release_year = 2005;
SELECT T3.publisher_name FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Adventure Time: Explore the Dungeon Because I Don't Know!';
SELECT gp.id, r.region_name  FROM game_platform gp  JOIN region_sales rs ON gp.id = rs.game_platform_id  JOIN region r ON rs.region_id = r.id  WHERE rs.num_sales < 0.2;
SELECT T3.game_name FROM game_platform AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_publisher_id JOIN game AS T3 ON T3.id = T1.game_id JOIN publisher AS T4 ON T4.id = T2.publisher_id WHERE T4.publisher_name = '505 Games' AND T1.release_year = 2006;
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id  JOIN game ON game.id = game_publisher.game_id  WHERE game.id = 119;
SELECT gp.game_id  FROM game_publisher gp  JOIN publisher p ON gp.publisher_id = p.id  WHERE p.publisher_name = 'Abylight';
SELECT region_name FROM region WHERE region.id IN (     SELECT region_id     FROM region_sales     WHERE num_sales = (         SELECT MIN(num_sales)         FROM region_sales rsi         JOIN game_platform gp ON rsi.game_platform_id = gp.id         JOIN game_publisher gpj ON gp.game_publisher_id = gpj.id         JOIN game g ON gpj.game_id = g.id     ) );
SELECT game.game_name  FROM game  JOIN genre ON game.genre_id = genre.id  WHERE genre.genre_name = 'Strategy';
SELECT T4.platform_name  FROM game_platform AS T1  JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id  JOIN game AS T3 ON T2.game_id = T3.id  JOIN platform AS T4 ON T4.id = T1.platform_id  WHERE T3.id = 178;
SELECT genre.genre_name  FROM genre  JOIN game ON genre.id = game.genre_id  WHERE game.game_name IN ('Airlock', 'Airline Tycoon', 'Airblade');
SELECT SUM(T2.num_sales) * 100000 AS total_sales_in_North_America FROM region_sales AS T1 JOIN region AS T2 ON T1.region_id = T2.id JOIN game_platform AS T3 ON T1.game_platform_id = T3.id WHERE T2.region_name = 'North America';
SELECT DISTINCT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game_platform gp2 ON gp.game_id = gp2.game_publisher_id JOIN region_sales rs ON gp2.id = rs.game_platform_id WHERE rs.num_sales < 0.1 LIMIT 5;
SELECT game_platform.platform_id FROM game JOIN game_platform ON game.id = game_platform.game_publisher_id JOIN platform ON game_platform.platform_id = platform.id WHERE game.game_name = 'Airborne Troops: Countdown to D-Day';
SELECT COUNT(*)  FROM game_platform  JOIN platform ON game_platform.platform_id = platform.id  WHERE platform.platform_name = 'PSP' AND game_platform.release_year = 2004;
SELECT genre.genre_name  FROM genre  JOIN game_publisher ON genre.id = game_publisher.genre_id   JOIN game ON game.id = game_publisher.game_id   WHERE game.game_name = '999: Nine Hours, Nine Persons, Nine Doors';
SELECT release_year  FROM game_platform  WHERE id = (SELECT id              FROM game_platform              WHERE game_id = 156);
SELECT      (SUM(T1.platform_id = (SELECT id FROM platform WHERE platform_name = 'SNES')) - SUM(T1.platform_id = (SELECT id FROM platform WHERE platform_name = 'DS'))) AS difference FROM      game_platform AS T1 JOIN      game_publisher AS T2 ON T1.game_publisher_id = T2.id JOIN      publisher AS T3 ON T2.publisher_id = T3.id WHERE      T3.publisher_name = 'Culture Brain';
SELECT      (COUNT(CASE WHEN T4.release_year = 2007 THEN T1.id ELSE NULL END) * 100.0 / COUNT(T1.id)) AS percentage FROM      genre AS T2 JOIN      game AS T3 ON T2.id = T3.genre_id JOIN      game_platform AS T4 ON T3.id = T4.game_publisher_id JOIN      platform AS T5 ON T4.platform_id = T5.id WHERE      T5.platform_name = 'Wii';
SELECT gp.platform_id FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Europe' AND rs.num_sales < (SELECT AVG(num_sales) * 0.3 FROM region_sales WHERE region_id = r.id)
SELECT COUNT(DISTINCT pa.AuthorId) FROM PaperAuthor pa JOIN Author a ON pa.AuthorId = a.Id WHERE a.Affiliation = 'University of California Berkeley';
SELECT T3.Title, T4.Keyword  FROM Paper AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId  JOIN Author AS T4 ON T2.AuthorId = T4.Id  JOIN Paper AS T3 ON T1.Id = T3.Id  WHERE T3.Title = 'Stitching videos streamed by mobile phones in real-time';
SELECT P.Title  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON A.Id = PA.AuthorId  JOIN Paper AS PJ ON PJ.Id = P.Id  JOIN Journal AS J ON J.Id = PJ.JournalId  WHERE J.FullName = 'Concepts in Magnetic Resonance Part A' AND P.Year = 2008;
SELECT COUNT(*)  FROM Paper  JOIN Journal ON Paper.JournalId = Journal.Id  WHERE Journal.FullName = 'Concepts in Magnetic Resonance Part A'
SELECT J.FullName, J.HomePage  FROM Journal AS J  JOIN Paper AS P ON J.Id = P.JournalId  WHERE P.Title = 'Area Effects in Cepaea';
SELECT COUNT(*)  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  JOIN Journal ON Journal.Id = Paper.JournalId  WHERE Journal.FullName = 'Molecular Brain' AND Paper.Year = 2011;
SELECT COUNT(*)  FROM Paper  JOIN Journal ON Paper.JournalId = Journal.Id  WHERE Journal.ShortName = 'Mol Brain' AND Paper.Year = 2011;
SELECT COUNT(DISTINCT pa.AuthorId) FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON a.Id = pa.AuthorId WHERE p.Title = 'Equation Solving in Geometrical Theories';
SELECT T3.Name  FROM Paper AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId  JOIN Author AS T3 ON T3.Id = T2.AuthorId  WHERE T1.Title = 'Area Effects in Cepaea';
SELECT COUNT(*)  FROM PaperAuthor  JOIN Paper ON PaperAuthor.PaperId = Paper.Id  JOIN Paper AS OtherPaper ON Paper.Title = 'FIBER: A Generalized Framework for Auto-tuning Software'  JOIN PaperAuthor AS OtherPaperAuthor ON OtherPaper.Id = OtherPaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  JOIN Author AS OtherAuthor ON OtherPaper.Id = OtherPaperAuthor.PaperId  WHERE Paper.Title = 'Stitching videos streamed by mobile phones in real-time'  AND Author.Affiliation = 'Cairo Microsoft Innovation Lab'  OR OtherAuthor.Affiliation = 'Cairo Microsoft Innovation Lab';
SELECT Paper.Title  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  WHERE PaperAuthor.Name = 'Klaus Zimmermann';
SELECT A.Name FROM Paper p JOIN PaperAuthor PA ON p.Id = PA.PaperId JOIN Author A ON PA.AuthorId = A.Id JOIN Paper ASK ON p.Id = ASK.Id WHERE ASK.Title = 'Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web' AND A.Affiliation = 'National Taiwan University Department of Computer Science and Information Engineering Taiwan';
SELECT P.Title  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  WHERE P.Year = 1995 AND PA.Name = 'Thomas Wiegand';
SELECT COUNT(*)  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  WHERE Author.Name = 'Thomas Wiegand' AND Paper.Year = 1995;
SELECT CAST(COUNT(p.Id) AS REAL) / 4 FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE j.FullName = 'Molecular Brain' AND p.Year BETWEEN 2008 AND 2011;
SELECT      (COUNT(CASE WHEN J.FullName = 'Cases Journal' THEN 1 END) - COUNT(CASE WHEN J.FullName = 'Molecular Brain' THEN 1 END)) /      COUNT(CASE WHEN J.FullName = 'Molecular Brain' THEN 1 END) * 100 AS PercentageDifference FROM      Journal J JOIN      Paper P ON J.Id = P.JournalId
SELECT COUNT(*)  FROM Journal  WHERE FullName LIKE '%computing%'
SELECT PA.PaperId, PA.AuthorId FROM PaperAuthor AS PA JOIN Author AS A ON A.Id = PA.AuthorId WHERE A.Affiliation = 'Cairo Microsoft Innovation Lab';
SELECT c.ShortName, c.FullName  FROM Conference c  WHERE c.HomePage = 'http://www.informatik.uni-trier.de/~ley/db/conf/ices/index.html';
SELECT AuthorId FROM PaperAuthor WHERE Name = 'Peter';
SELECT DISTINCT Paper.Title, Conference.ShortName  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  JOIN Conference ON Conference.Id = Paper.ConferenceId  WHERE Conference.Id BETWEEN 160 AND 170;
SELECT P.Title, J.HomePage  FROM Paper AS P  JOIN Journal AS J  ON P.JournalId = J.Id  WHERE P.Year = (SELECT MAX(Year) FROM Paper)
SELECT P.Title, C.ShortName  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON A.Id = PA.AuthorId  JOIN Paper AS PC ON P.ConferenceId = PC.Id  JOIN Conference AS C ON C.Id = PC.Id  WHERE A.Name LIKE 'Philip%' AND P.Year = 1999;
SELECT COUNT(p.Id), c.HomePage  FROM Paper p  JOIN Conference c ON p.ConferenceId = c.Id  WHERE c.Id = 187 AND p.Year BETWEEN 1990 AND 2000;
SELECT P.Title  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON A.Id = PA.AuthorId  WHERE P.Year = 2003 AND A.Affiliation = 'Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications';
SELECT DISTINCT A.Name, J.ShortName  FROM PaperAuthor PA JOIN Author A ON PA.AuthorId = A.Id JOIN Paper P ON PA.PaperId = P.Id JOIN Journal J ON P.JournalId = J.Id WHERE P.Title LIKE '%chemiluminescence%'  AND J.Id BETWEEN 245 AND 250;
SELECT DISTINCT PA.Name, PA.Affiliation  FROM PaperAuthor PA  JOIN Paper P ON PA.PaperId = P.Id  JOIN PaperAuthor PA2 ON P.Id = PA2.PaperId  JOIN Author A ON PA2.AuthorId = A.Id  WHERE P.ConferenceId = 0 AND P.JournalId < 100;
SELECT P.Title, PA.AuthorId  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Conference AS C ON P.ConferenceId = C.Id  WHERE C.Id < 100 AND P.Year = 2006;
SELECT DISTINCT Paper.Id  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Conference ON Paper.ConferenceId = Conference.Id  WHERE Conference.HomePage LIKE 'http://www.informatik.uni-trier.de/~ley/db/conf/%';
SELECT J.HomePage, PA.AuthorId  FROM Journal AS J JOIN Paper AS P ON J.Id = P.JournalId JOIN PaperAuthor AS PA ON P.Id = PA.PaperId WHERE P.Title LIKE '%SOCIAL%' AND P.Year BETWEEN 2000 AND 2005;
SELECT A.Id, A.Affiliation  FROM Author A  JOIN PaperAuthor PA ON A.Id = PA.AuthorId  JOIN Paper P ON PA.PaperId = P.Id  WHERE P.JournalId = 0 AND P.Year = 2009;
SELECT      COUNT(CASE WHEN ConferenceId = 0 THEN 1 ELSE NULL END) * 100.0 / COUNT(*) AS percentage FROM      Paper JOIN      Journal ON Paper.JournalId = Journal.Id WHERE      JournalId BETWEEN 200 AND 300 AND ShortName LIKE 'A%'
SELECT      COUNT(CASE WHEN Paper.Year = 2001 THEN Paper.Id END) * 100.0 / COUNT(Paper.Id) AS PaperPublicationRate2001 FROM      Paper WHERE      Paper.Year BETWEEN 2001 AND 2010;
SELECT FullName, HomePage  FROM Conference  WHERE ShortName = 'ICWE';
SELECT      Affiliation FROM      Author WHERE      Affiliation BETWEEN 'Stanford University' AND 'Massachusetts Institute of Technology' GROUP BY      Affiliation ORDER BY      COUNT(Id) DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN Affiliation IS NOT NULL THEN 1 END) :: REAL) /      (COUNT(CASE WHEN Affiliation IS NULL THEN 1 END) :: REAL) AS Ratio FROM      Authors;
SELECT A.Id, A.Name  FROM Author A  JOIN PaperAuthor PA ON A.Id = PA.AuthorId  WHERE A.Affiliation = 'University of Oulu';
SELECT      Paper.Title,      Author.Affiliation  FROM      Paper  JOIN      PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN      Author ON Author.Id = PaperAuthor.AuthorId  WHERE      PaperConferenceId = 0 AND      PaperJournalId = 0 AND      PaperAuthor.Name = 'Roger J. Marshall';
SELECT P.Id, P.Title, P.Year, J.FullName  FROM Paper AS P JOIN PaperAuthor AS PA ON P.Id = PA.PaperId JOIN Author AS A ON A.Id = PA.AuthorId JOIN Paper AS P2 ON P2.Id = PA.PaperId JOIN CountSubQuery AS C ON C.Count = COUNT(P2.Id) JOIN Journal AS J ON J.Id = P.JournalId WHERE C.SubQuery := (   SELECT MAX(Count)    FROM (     SELECT COUNT(P.Id) AS Count      FROM Paper AS P     JOIN PaperAuthor AS PA ON P.Id = PA.PaperId     GROUP BY PA.AuthorId   ) )
SELECT      Paper.Title,      Paper.Year,      Conference.ShortName,      GROUP_CONCAT(PaperAuthor.Name) FROM      Paper JOIN      PaperAuthor ON Paper.Id = PaperAuthor.PaperId JOIN      Conference ON Paper.ConferenceId = Conference.Id WHERE      Paper.Id = 15 GROUP BY      Paper.Id;
SELECT P.Id, P.Year, P.Keyword  FROM PaperAuthor PA  JOIN Author A ON PA.AuthorId = A.Id  JOIN Paper P ON PA.PaperId = P.Id  WHERE A.Id < 100 AND A.Affiliation = 'Zurich, ETH'
SELECT A.Name, A.Id  FROM Author AS A  JOIN PaperAuthor AS PA ON A.Id = PA.AuthorId  JOIN Paper AS P ON PA.PaperId = P.Id  JOIN PaperAuthor AS PA2 ON P.Id = PA2.PaperId  JOIN Author AS A2 ON PA2.AuthorId = A2.Id  WHERE P.Title = 'Inspection resistant memory: Architectural support for security from physical examination'  AND A2.Affiliation = 'Microsoft Research, USA';
SELECT      A.Name,      A.Affiliation,      J.ShortName,      J.FullName FROM      PaperAuthor PA JOIN      Author A ON A.Id = PA.AuthorId JOIN      Paper P ON P.Id = PA.PaperId JOIN      (SELECT PaperId FROM Paper WHERE Title = 'Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats') AS MatchingPaper ON MatchingPaper.PaperId = P.Id JOIN      (SELECT Id, ShortName, FullName FROM Journal) AS J ON J.Id = P.JournalId;
SELECT P.Title, J.Id  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON PA.AuthorId = A.Id  JOIN Conference AS C ON P.ConferenceId = C.Id  JOIN Journal AS J ON P.JournalId = J.Id  WHERE C.FullName = 'International Symposium of Robotics Research';
SELECT P.Title, P.Year, P.Keyword  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON A.Id = PA.AuthorId  WHERE A.Id = 661002 AND A.Affiliation = 'Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA';
SELECT      (COUNT(p.Id) WHERE p.Year = 2000) - (COUNT(p.Id) WHERE p.Year = 2010) as Difference FROM      Paper p JOIN      Journal j ON p.JournalId = j.Id WHERE      j.ShortName = 'IWC';
SELECT J.Id AS JournalId, J.ShortName, J.FullName FROM Journal AS J JOIN Paper AS P ON J.Id = P.JournalId WHERE P.Year = 2013 LIMIT 4;
SELECT      p.Title,      pa.Name,      pa.Affiliation FROM      Paper p JOIN      PaperAuthor pa ON p.Id = pa.PaperId JOIN      Conference c ON c.Id = p.ConferenceId WHERE      c.ShortName = 'MICRO' AND      p.Year BETWEEN '1971' AND '1980' UNION ALL (     SELECT          NULL,         NULL,         NULL      FROM          dual ) UNION ALL SELECT      CONCAT('Average needed papers: ', ROUND((COUNT(p.Id WHERE Year BETWEEN '1991' AND '2000') - COUNT(p.Id WHERE Year BETWEEN '1971' AND '1980')) / 10)) FROM      Paper p JOIN      Conference c ON c.Id = p.ConferenceId WHERE      c.ShortName = 'MICRO';
SELECT COUNT(*)  FROM Paper  WHERE Year = 0;
SELECT c.FullName FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON pa.AuthorId = a.Id JOIN PaperAuthor paConf ON a.Id = paConf.AuthorId JOIN Paper pConf ON paConf.PaperId = pConf.Id JOIN Conference c ON pConf.ConferenceId = c.Id WHERE p.Title = 'The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure';
SELECT T3.HomePage  FROM Paper AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId  JOIN Author AS T4 ON T4.Id = T2.AuthorId  JOIN Paper AS T5 ON T5.Id = T1.PaperId  JOIN Conference AS T6 ON T6.Id = T5.ConferenceId  WHERE T5.Title = 'Energy-efficiency bounds for noise-tolerant dynamic circuits'
SELECT T3.Name, T3.Affiliation  FROM PaperAuthor AS T1  JOIN Author AS T3 ON T1.AuthorId = T3.Id  JOIN Paper AS T2 ON T1.PaperId = T2.Id  WHERE T2.Id BETWEEN 100 AND 106;
SELECT DISTINCT c.ShortName  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  JOIN Author a ON pa.AuthorId = a.Id  JOIN PaperAuthor pa2 ON p.Id = pa2.PaperId  JOIN Paper p2 ON pa2.PaperId = p2.Id  JOIN Conference c ON p2.ConferenceId = c.Id  WHERE p.Year = 2009  LIMIT 10;
SELECT J.HomePage  FROM Journal AS J  JOIN Paper AS P ON J.Id = P.JournalId  WHERE P.Title = '364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results';
SELECT P.Title FROM Paper AS P JOIN PaperAuthor AS PA ON P.Id = PA.PaperId JOIN Author AS A ON A.Id = PA.AuthorId JOIN Paper ON P.Id = Paper.Id JOIN Conference ON Conference.Id = Paper.ConferenceId WHERE Conference.FullName = 'International Conference on Internet Computing';
SELECT A.Name FROM Paper P JOIN PaperAuthor PA ON P.Id = PA.PaperId  JOIN Author A ON PA.AuthorId = A.Id WHERE P.Year = '2005' AND P.Keyword = 'LOAD; IDE; SNP; haplotype; association studies'
SELECT COUNT(DISTINCT pa.AuthorId) FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON pa.AuthorId = a.Id JOIN Paper AS p1 ON p1.Title LIKE '%145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT:' AND p1.Id = p.Id;
SELECT T3.Title  FROM PaperAuthor AS T1  JOIN Author AS T2 ON T1.AuthorId = T2.Id  JOIN Paper AS T3 ON T3.Id = T1.PaperId  WHERE T2.Name = 'Jei Keon Chae'  AND T1.Name = 'Jei Keon Chee';
SELECT      c.FullName AS ConferenceName,     j.FullName AS JournalName,     GROUP_CONCAT(pa.Name) AS CoAuthors,     p.Title AS PaperTitle FROM      PaperAuthor pa JOIN      Author a ON pa.AuthorId = a.Id JOIN      Paper p ON p.Id = pa.PaperId JOIN      Conference c ON c.Id = p.ConferenceId JOIN      Journal j ON j.Id = p.JournalId WHERE      a.Name = 'Shueh-Lin Yau' GROUP BY      c.Id, j.Id, p.Id;
SELECT COUNT(Paper.Id)  FROM Paper  WHERE Paper.Year BETWEEN '1990' AND '2000';
SELECT DISTINCT A.Name  FROM Author A  JOIN PaperAuthor PA ON A.Id = PA.AuthorId  WHERE A.Affiliation = 'Birkbeck University of London';
SELECT c.ShortName  FROM Conference c  WHERE c.FullName LIKE 'International Symposium%'
SELECT COUNT(*)  FROM Journal  WHERE HomePage = '';
SELECT DISTINCT A.Name  FROM PaperAuthor PA  JOIN Paper P ON PA.PaperId = P.Id  JOIN Author A ON PA.AuthorId = A.Id  WHERE P.Year = 0;
SELECT DISTINCT A.Affiliation  FROM Author AS A  JOIN PaperAuthor AS PA ON A.Id = PA.AuthorId  JOIN Paper AS P ON PA.PaperId = P.Id  WHERE P.Keyword = 'Quantum Physics';
SELECT DISTINCT p.Title  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  JOIN Author a ON a.Id = pa.AuthorId  JOIN Conference c ON p.ConferenceId = c.Id  WHERE c.FullName IS NOT NULL  AND p.JournalId = 0  AND p.Year > 0  AND p.ConferenceId != 0;
SELECT DISTINCT p.Title  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  JOIN Author a ON a.Id = pa.AuthorId  LEFT JOIN Conference c ON c.Id = p.ConferenceId  WHERE c.HomePage IS NULL OR c.HomePage = ''
SELECT DISTINCT J.FullName  FROM Journal J  LEFT JOIN Paper P ON J.Id = P.JournalId  WHERE J.ShortName IS NULL OR J.ShortName = ''
SELECT A.Affiliation  FROM Author A  JOIN PaperAuthor PA ON A.Id = PA.AuthorId  JOIN Paper P ON PA.PaperId = P.Id  JOIN Journal J ON P.JournalId = J.Id  WHERE J.FullName = 'A combined search for the standard model Higgs boson at s = 1.96 Â TeV'
SELECT DISTINCT J.FullName  FROM Journal AS J  JOIN Paper AS P ON J.Id = P.JournalId  WHERE P.Year = 2001;
SELECT T3.Name, T3.Affiliation  FROM Paper AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId  JOIN Author AS T3 ON T3.Id = T2.AuthorId  WHERE T1.Title = 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker';
SELECT COUNT(DISTINCT Paper.Id) AS NumberOfPapers, Paper.Year FROM Paper JOIN Conference ON Paper.ConferenceId = Conference.Id WHERE Conference.FullName = 'International Conference on Database Theory' AND Paper.Year != 0;
SELECT J.FullName  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  JOIN Author a ON pa.AuthorId = a.Id  JOIN Paper p2 ON p2.Title = p.Title AND p2.ConferenceId = p.ConferenceId AND p2.JournalId = p.JournalId  JOIN Journal j ON p2.JournalId = j.Id  WHERE p.Keyword = 'Sustainability';
SELECT DISTINCT A.Name  FROM Author A  JOIN PaperAuthor PA ON A.Id = PA.AuthorId  JOIN Paper P ON PA.PaperId = P.Id  JOIN Conference C ON P.ConferenceId = C.Id  WHERE C.FullName LIKE '%Workshop%'
SELECT      (COUNT(CASE WHEN Affiliation LIKE '%INFN%' THEN 1 END)       OVER () / COUNT(*) OVER ()) * 100 AS percentage FROM      PaperAuthor  JOIN      Paper ON PaperAuthor.PaperId = Paper.Id  WHERE      Paper.Title LIKE '%Charged particle multiplicity%';
SELECT      (COUNT(CASE WHEN j.ShortName LIKE 'ANN%' AND p.Year = 1989 THEN j.Id ELSE NULL END)      / COUNT(j.Id)) * 100 AS percentage FROM      Journal j JOIN      Paper p ON j.Id = p.JournalId;
SELECT COUNT(DISTINCT pa.AuthorId) FROM PaperAuthor pa JOIN Author a ON pa.AuthorId = a.Id JOIN Paper p ON pa.PaperId = p.Id WHERE a.Affiliation LIKE '%Microsoft Research%' AND p.Id = 1;
SELECT      p.Title, p.Year, j.FullName AS Topic FROM      Paper p JOIN      Journal j ON p.JournalId = j.Id WHERE      p.Title = 'A Formal Approach to Service Component Architecture';
SELECT      (COUNT(CASE WHEN Year > 2000 AND ConferenceId = 0 AND JournalId = 0 THEN 1 END)      OVER () * 100.0 / COUNT(*) OVER ()) AS percentage FROM Paper;
SELECT T3.Name, T3.Affiliation  FROM Paper AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId  JOIN Author AS T3 ON T3.Id = T2.AuthorId  WHERE T1.Title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers';
SELECT J.FullName  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  JOIN Author a ON pa.AuthorId = a.Id  JOIN Paper p2 ON p2.Title = 'Multiple paternity in a natural population of a salamander with long-term sperm storage'  JOIN PaperAuthor pa2 ON p2.Id = pa2.PaperId  JOIN Journal j ON p2.JournalId = j.Id;
SELECT COUNT(p.JournalId)  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  WHERE pa.Name = 'Iet Software/iee Proceedings - Software'
SELECT c.FullName  FROM Conference c  JOIN Paper p ON c.Id = p.ConferenceId  WHERE p.Id = 5;
SELECT Paper.Title FROM Paper JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId WHERE PaperAuthor.Name LIKE '%Jun du%' LIMIT 2;
SELECT P.Title  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON A.Id = PA.AuthorId  WHERE A.Name = 'Cheng Huang' AND A.Affiliation LIKE 'Microsoft%'
SELECT T2.FullName  FROM PaperAuthor AS T1  JOIN Paper AS T3 ON T1.PaperId = T3.Id  JOIN Conference AS T2 ON T3.ConferenceId = T2.Id  WHERE T1.Name = 'Jean-luc Hainaut'
SELECT J.FullName FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON a.Id = pa.AuthorId JOIN Paper p2 ON p2.ConferenceId = p.ConferenceId AND p2.JournalId = p.JournalId JOIN Journal J ON J.Id = p2.JournalId WHERE a.Name = 'Andrew Cain' GROUP BY J.FullName LIMIT 3;
SELECT DISTINCT A.Affiliation  FROM Author AS A  JOIN PaperAuthor AS PA ON A.Id = PA.AuthorId  JOIN Paper AS P ON PA.PaperId = P.Id  WHERE P.Title = 'FIBER: A Generalized Framework for Auto-tuning Software';
SELECT p.Title, j.FullName  FROM Paper AS p  JOIN PaperAuthor AS pa ON p.Id = pa.PaperId  JOIN Author AS a ON a.Id = pa.AuthorId  JOIN Paper AS p2 ON p2.Id = p.PaperId  JOIN Journal AS j ON j.Id = p2.JournalId  WHERE p.Year = 0 LIMIT 2;
SELECT J.ShortName, J.FullName  FROM Journal J  JOIN Paper P ON J.Id = P.JournalId  JOIN PaperAuthor PA ON P.Id = PA.PaperId  WHERE PA.Keyword = 'Materials';
SELECT A.Name FROM Author A JOIN PaperAuthor PA ON A.Id = PA.AuthorId WHERE A.Affiliation = 'University of Oxford' ORDER BY A.Name ASC;
SELECT Conference.ShortName, Conference.HomePage  FROM Conference  JOIN Paper ON Conference.Id = Paper.ConferenceId  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON PaperAuthor.AuthorId = Author.Id  WHERE Conference.FullName LIKE 'International Conference on Artificial Intelligence%'
SELECT Paper.Title FROM Paper WHERE Paper.Year = 1996;
SELECT P.Title, PA.Name  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Journal AS J ON P.JournalId = J.Id  WHERE J.FullName = 'Neoplasia' AND P.Year = 2007;
SELECT DISTINCT A.Name, P.Title  FROM Author A  JOIN PaperAuthor PA ON A.Id = PA.AuthorId  JOIN Paper P ON PA.PaperId = P.Id  JOIN Author ASU ON A.Id = ASU.Id  WHERE ASU.Affiliation = 'Soongsil University' AND P.Year = 2000;
SELECT P.Title, A.Name  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON PA.AuthorId = A.Id  JOIN Paper AS PC ON P.ConferenceId = PC.Id  JOIN Conference AS C ON PC.ConferenceId = C.Id  JOIN Paper AS PJS ON P.JournalId = PJS.Id  JOIN Journal AS J ON PJS.JournalId = J.Id  WHERE P.Year BETWEEN 2000 AND 2005  AND PC.HomePage IS NOT NULL  AND J.HomePage IS NOT NULL  AND P.Keyword LIKE '%optical properties%'
SELECT      AVG(p.Year) AS AverageYearlyPapers FROM      Paper p JOIN      Conference c ON p.ConferenceId = c.Id WHERE      c.FullName = 'World Computer Congress';
SELECT P.Title, PA.Name  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  WHERE P.Year = 1997 AND P.ConferenceId = 0 AND P.JournalId = 0
SELECT P.Title, J.FullName  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON A.Id = PA.AuthorId  JOIN Paper AS PJ ON P.Id = PJ.Id  JOIN Journal AS J ON J.Id = PJ.JournalId  WHERE A.Name = 'Adam Jones'  AND P.Year BETWEEN 2005 AND 2010;
SELECT COUNT(DISTINCT T1.Name)  FROM Author AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId  WHERE T1.Affiliation = 'Otterbein University';
SELECT COUNT(DISTINCT pa.AuthorId) FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON a.Id = pa.AuthorId WHERE p.Title = 'Subcellular localization of nuclease in barley aleurone';
SELECT Conference.FullName FROM Paper JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId JOIN Author ON Author.Id = PaperAuthor.AuthorId JOIN Paper ON Paper.Id = PaperAuthor.PaperId JOIN Conference ON Conference.Id = Paper.ConferenceId WHERE Paper.Title = 'Extended Fuzzy Regression Models';
SELECT COUNT(*)  FROM Paper  JOIN Conference ON Paper.ConferenceId = Conference.Id  WHERE Conference.FullName = 'Mathematics of Program Construction';
SELECT T3.Name, T3.Affiliation FROM Paper AS T1 JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId JOIN Author AS T3 ON T3.Id = T2.AuthorId WHERE T1.Title = 'Open Sourcing Social Solutions (Building Communities of Change)';
SELECT Paper.Title  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  WHERE Author.Name = 'Jianli Hua';
SELECT PA.Name FROM PaperAuthor PA JOIN Paper P ON PA.PaperId = P.Id WHERE P.Title = 'Testing timed automata';
SELECT COUNT(*)  FROM Paper  JOIN Conference ON Paper.ConferenceId = Conference.Id  WHERE Conference.ShortName = 'SSPR' AND Paper.Year = 2000;
SELECT p.Title FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE j.FullName = 'Theoretical Computer Science' AND p.Year = 2003;
SELECT T3.HomePage FROM Paper AS T1 JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId JOIN Author AS T4 ON T4.Id = T2.AuthorId JOIN Paper AS T5 ON T5.Id = T1.PaperId JOIN Conference AS T3 ON T3.Id = T5.ConferenceId WHERE T1.Title = 'Quality evaluation of long duration audiovisual content';
SELECT DISTINCT A.Name  FROM Author A  JOIN PaperAuthor PA ON A.Id = PA.AuthorId  JOIN Paper P ON PA.PaperId = P.Id  WHERE P.Title = 'A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus' AND A.Affiliation = 'Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea';
SELECT COUNT(*)  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  JOIN Journal ON Journal.Id = Paper.JournalId  WHERE Journal.FullName = 'Software - Practice and Experience';
SELECT DISTINCT Paper.Title  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  JOIN Conference ON Conference.Id = Paper.ConferenceId  WHERE Conference.HomePage = 'http://www.irma-international.org/'
SELECT AVG(T.PaperCount)  FROM (     SELECT COUNT(P.Id) AS PaperCount      FROM Paper P      JOIN Conference C ON P.ConferenceId = C.Id      WHERE C.FullName = 'Information and Knowledge Engineering'      AND P.Year BETWEEN 2002 AND 2010 ) T;
SELECT      SUBTRACT(SUM(CASE WHEN T2.FullName = 'International Conference on Supercomputing' THEN 1 ELSE 0 END),              SUM(CASE WHEN T2.FullName = 'Informatik & Schule' THEN 1 ELSE 0 END)) AS Difference FROM      Paper AS T1 JOIN      Conference AS T2 ON T1.ConferenceId = T2.Id WHERE      T1.Year BETWEEN 1991 AND 2000;
SELECT FullName FROM Conference WHERE ShortName = 'Software - Concepts and Tools / Structured Programming';
SELECT FullName  FROM Journal  JOIN Paper ON Journal.Id = Paper.JournalId  WHERE Title = 'Education, democracy and growth';
SELECT COUNT(Paper.Id)  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  JOIN Journal ON Journal.Id = Paper.JournalId  WHERE Journal.FullName = 'IEEE Transactions on Nuclear Science' AND Paper.Year = 1999;
SELECT Title  FROM Paper  JOIN Journal ON Paper.JournalId = Journal.Id  WHERE Journal.FullName = 'IEEE Transactions on Pattern Analysis and Machine Intelligence' AND Year = '2011';
SELECT T3.Keyword  FROM Journal AS T1  JOIN Paper AS T2 ON T1.Id = T2.JournalId  JOIN PaperAuthor AS T4 ON T2.Id = T4.PaperId  JOIN Author AS T5 ON T4.AuthorId = T5.Id  JOIN Paper AS T6 ON T5.Id = T6.PaperId  JOIN PaperAuthor AS T7 ON T6.Id = T7.PaperId  JOIN Keyword AS T3 ON T6.Id = T3.PaperId  WHERE T1.FullName = 'Modeling Identification and Control' AND T2.Year = '1994';
SELECT p.Id, p.Title  FROM Paper AS p  JOIN PaperAuthor AS pa ON p.Id = pa.PaperId  WHERE pa.Name = 'Zvezdan Protić' AND p.Year = 0;
SELECT Conference.FullName FROM Paper JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId JOIN Author ON Author.Id = PaperAuthor.AuthorId JOIN Paper ON Paper.Id = PaperAuthor.PaperId JOIN Conference ON Conference.Id = Paper.ConferenceId WHERE Paper.Title = 'Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes';
SELECT COUNT(Paper.Id)  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Conference ON Paper.ConferenceId = Conference.Id  WHERE Conference.FullName = 'International Symposium on Software Testing and Analysis';
SELECT c.HomePage  FROM Conference AS c  JOIN Paper AS p ON c.Id = p.ConferenceId  JOIN PaperAuthor AS pa ON p.Id = pa.PaperId  WHERE p.Title = 'Increasing the Concurrency in Estelle' AND pa.Name = 'Author Name';
SELECT COUNT(DISTINCT pa.AuthorId) FROM PaperAuthor pa JOIN Paper p ON pa.PaperId = p.Id WHERE p.Title = 'An Improved Active Suspension Model for Attitude Control of Electric Vehicles';
SELECT Conference.ShortName  FROM Conference  JOIN Paper ON Conference.Id = Paper.ConferenceId  WHERE Paper.Year = 2012  GROUP BY Conference.Id  ORDER BY COUNT(Paper.Id) DESC  LIMIT 1;
SELECT COUNT(*)  FROM Paper  JOIN Conference ON Paper.ConferenceId = Conference.Id  WHERE Conference.ShortName = 'ECSQARU' AND Paper.Year = '2003';
SELECT T4.Keyword  FROM Conference AS T1  JOIN Paper AS T4 ON T4.ConferenceId = T1.Id  WHERE T1.FullName = 'International Radar Symposium' AND T4.Year = '2012'
SELECT      (SUM(CASE WHEN c.FullName = 'International Conference on Thermoelectrics' THEN 1 ELSE 0 END) -       SUM(CASE WHEN c.FullName = 'International Conference on Wireless Networks, Communications and Mobile Computing' THEN 1 ELSE 0 END)) AS Calculation FROM      Conference c
SELECT      (COUNT(CASE          WHEN p.Name = 'John Van Reenen' AND pa.ConferenceId = 0 AND pa.JournalId = 0 THEN p.Id         ELSE NULL     END)      / COUNT(CASE WHEN p.Name = 'John Van Reenen' THEN p.Id ELSE NULL END)) * 100 AS PreprintPercentage FROM      Paper p  JOIN      PaperAuthor pa ON p.Id = pa.PaperId  WHERE      pa.Name = 'John Van Reenen'
SELECT Title FROM Paper WHERE Year = (SELECT MIN(Year) FROM Paper);
SELECT FullName  FROM Conference  ORDER BY LENGTH(FullName) DESC  LIMIT 1;
SELECT COUNT(DISTINCT pa.AuthorId) FROM PaperAuthor pa JOIN Author a ON pa.AuthorId = a.Id WHERE a.Affiliation = 'NASA Langley Research Center';
SELECT COUNT(*)  FROM Journal  WHERE ShortName IS NULL;
SELECT COUNT(*)  FROM Paper  WHERE Year = 0;
SELECT p.Title  FROM Paper p  JOIN (     SELECT PaperId, COUNT(*) AS author_count      FROM PaperAuthor      GROUP BY PaperId      ORDER BY author_count DESC      LIMIT 1 ) as max_authors ON p.Id = max_authors.PaperId
SELECT Title  FROM Paper  JOIN Journal ON Paper.JournalId = Journal.Id  WHERE Journal.ShortName = 'TUBERCLE LUNG DIS'  ORDER BY Year ASC  LIMIT 1;
SELECT P.Title FROM Paper AS P JOIN PaperAuthor AS PA ON P.Id = PA.PaperId JOIN Author AS A ON A.Id = PA.AuthorId WHERE A.Name = 'Karin Rengefors'
SELECT COUNT(*)  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Conference ON Conference.Id = Paper.ConferenceId  WHERE Conference.FullName = 'Virtual Reality, IEEE Annual International Symposium' AND Paper.Year = 2012;
SELECT J.FullName  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  JOIN Author a ON pa.AuthorId = a.Id  JOIN Paper p2 ON p2.Title = 'A Case of Unilateral Ashy Dermatosis' AND p2.Id = p.Id  JOIN Paper p3 ON p3.Id = p2.ConferenceId  JOIN Journal j ON j.Id = p3.JournalId  WHERE p2.Title = 'A Case of Unilateral Ashy Dermatosis';
SELECT      pa.Name,      pa.Affiliation  FROM      PaperAuthor pa  JOIN      Author a ON pa.AuthorId = a.Id  WHERE      a.Name = 'Mark A. Musen';
SELECT T3.Name, T3.Affiliation  FROM Paper AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId  JOIN Author AS T3 ON T3.Id = T2.AuthorId  WHERE T1.Title = 'Determination of Planetary Meteorology from Aerobot Flight Sensors';
SELECT P.Title, J.FullName  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON PA.AuthorId = A.Id  JOIN Paper AS PJ ON P.Id = PJ.Id  JOIN Journal AS J ON PJ.JournalId = J.Id  WHERE P.Year BETWEEN 1960 AND 1970;
SELECT Year FROM Conference JOIN Paper ON Conference.Id = Paper.ConferenceId WHERE Conference.FullName = 'Internet, Multimedia Systems and Applications' ORDER BY COUNT(Year) DESC LIMIT 1;
SELECT DISTINCT PaperTitle, Paper.Year  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  WHERE Author.Name = 'Randall Davis';
SELECT DISTINCT c.ShortName, c.FullName, c.HomePage  FROM Conference c  JOIN Paper p ON c.Id = p.ConferenceId  WHERE p.Year = 2008;
SELECT J.HomePage  FROM Journal AS J  JOIN Paper AS P ON J.Id = P.JournalId  GROUP BY J.Id  ORDER BY COUNT(P.Id) DESC  LIMIT 1;
SELECT      A.Name,     A.Affiliation,     COUNT(P.Id) AS PapersWithCancerKeyword FROM      Author A JOIN      PaperAuthor PA ON A.Id = PA.AuthorId JOIN      Paper P ON PA.PaperId = P.Id WHERE      P.Keyword = 'cancer' GROUP BY      A.Name, A.Affiliation ORDER BY      PapersWithCancerKeyword DESC;
SELECT Name FROM Author WHERE Id = 1722;
SELECT COUNT(*)  FROM Paper  WHERE Year = 0;
SELECT A.Name FROM Author A JOIN PaperAuthor PA ON A.Id = PA.AuthorId WHERE A.Affiliation = 'University of Illinois Chicago';
SELECT      (SUM(CASE WHEN p.Year = 2005 THEN 1 ELSE 0 END) -       SUM(CASE WHEN p.Year = 2004 THEN 1 ELSE 0 END)) AS difference FROM      Paper p
SELECT P.Title FROM Paper AS P JOIN Journal AS J ON P.JournalId = J.Id WHERE J.FullName = 'Ibm Journal of Research and Development'
SELECT A.Name, A.Affiliation  FROM Author AS A JOIN PaperAuthor AS PA ON A.Id = PA.AuthorId JOIN Paper AS P ON PA.PaperId = P.Id WHERE P.Title = 'Education, democracy and growth';
SELECT COUNT(PaperAuthor.Name)  FROM PaperAuthor  JOIN Paper ON Paper.Id = PaperAuthor.PaperId  JOIN Journal ON Journal.Id = Paper.JournalId  WHERE Journal.FullName = 'IEEE Computer';
SELECT Conference.FullName FROM Paper JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId JOIN Author ON Author.Id = PaperAuthor.AuthorId WHERE Paper.Title = 'A context-based navigation paradigm for accessing Web data';
SELECT COUNT(*)  FROM Paper  JOIN Conference ON Paper.ConferenceId = Conference.Id  WHERE Conference.FullName = 'International Workshop on Inductive Logic Programming' AND Paper.Year BETWEEN 2001 AND 2009;
SELECT      Paper.Id,     AVG(COUNT(PaperAuthor.AuthorId)) AS AverageAuthorsPerPaper FROM      Paper     JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId WHERE      Paper.Year BETWEEN 1990 AND 2000 GROUP BY      Paper.Id;
SELECT Year, J.FullName  FROM Paper  JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId  JOIN Author ON Author.Id = PaperAuthor.AuthorId  JOIN Paper AS ConfPaper ON ConfPaper.Id = Paper.ConferenceId  JOIN Conference ON Conference.Id = ConfPaper.ConferenceId  JOIN Paper AS JPaper ON JPaper.Id = Paper.JournalId  JOIN Journal ON Journal.Id = JPaper.JournalId  WHERE Paper.Title = 'Area Effects in Cepaea'  AND Conference.ShortName IS NOT NULL AND Journal.ShortName IS NOT NULL;
SELECT A.Name, A.Affiliation  FROM Paper AS P JOIN PaperAuthor AS PA ON P.Id = PA.PaperId JOIN Author AS A ON A.Id = PA.AuthorId WHERE P.Title = 'Real-Time Automata';
SELECT A.Name FROM Author A JOIN PaperAuthor PA ON A.Id = PA.AuthorId WHERE A.Affiliation = 'ABB Electrical Machines';
SELECT COUNT(p.Id)  FROM Paper p  JOIN Journal j ON p.JournalId = j.Id  WHERE j.FullName = 'Academic Medicine' AND p.Year BETWEEN 2005 AND 2010;
SELECT P.Title  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  JOIN Author AS A ON A.Id = PA.AuthorId  WHERE A.Name = 'Zuliang Du'  ORDER BY P.Year DESC  LIMIT 1;
SELECT COUNT(*)  FROM Paper  JOIN Conference ON Paper.ConferenceId = Conference.Id  WHERE Conference.FullName = 'Adaptive Multimedia Retrieval' AND Paper.Year = 2007;
SELECT      AVG(p.Year) AS Annual_Papers FROM      Paper p JOIN      Journal j ON p.JournalId = j.Id WHERE      j.FullName = 'Information Sciences';
SELECT COUNT(*)  FROM PaperAuthor  JOIN Author ON PaperAuthor.AuthorId = Author.Id  WHERE Author.Name = 'Howard F. Lipson'
SELECT      (COUNT(CASE WHEN P.Title LIKE '%Turbulent Fluids%' AND J.FullName = 'Physics of Fluids' THEN 1 ELSE NULL END)      / COUNT(CASE WHEN P.Title LIKE '%Turbulent Fluids%' THEN 1 ELSE NULL END)) * 100 AS Percentage FROM      Paper AS P JOIN      PaperAuthor AS PA ON P.Id = PA.PaperId JOIN      Author AS A ON A.Id = PA.AuthorId JOIN      Paper AS P2 ON P2.Title LIKE '%Turbulent Fluids%' JOIN      PaperAuthor AS PA2 ON P2.Id = PA2.PaperId JOIN      Author AS A2 ON A2.Id = PA2.AuthorId AND A.Name = A2.Name AND A.Affiliation = A2.Affiliation JOIN      Journal AS J ON P.JournalId = J.Id;
SELECT COUNT(DISTINCT T1.Name)  FROM Author AS T1  JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId  WHERE T1.Affiliation = 'Arizona State University';
SELECT FullName, HomePage  FROM Conference  WHERE ShortName = 'ICCI';
SELECT P.Title FROM Paper AS P JOIN PaperAuthor AS PA ON P.Id = PA.PaperId JOIN Author AS A ON A.Id = PA.AuthorId WHERE A.Name = 'Joe Lograsso';
SELECT COUNT(*)  FROM PaperAuthor  JOIN Author ON PaperAuthor.AuthorId = Author.Id  WHERE Author.Affiliation = 'University of Hong Kong';
SELECT P.Year, P.Title  FROM Paper AS P  JOIN PaperAuthor AS PA ON P.Id = PA.PaperId  WHERE PA.Name = 'Barrasa';
SELECT A.Name, P.Year  FROM PaperAuthor PA  JOIN Author A ON PA.AuthorId = A.Id  JOIN Paper P ON PA.PaperId = P.Id  WHERE P.Id = 2;
SELECT A.Name, P.Keyword  FROM PaperAuthor PA  JOIN Author A ON PA.AuthorId = A.Id  JOIN Paper P ON PA.PaperId = P.Id  WHERE P.Id = 5;
SELECT c.FullName  FROM Paper p  JOIN PaperAuthor pa ON p.Id = pa.PaperId  JOIN Author a ON pa.AuthorId = a.Id  JOIN Paper p2 ON p2.Title = '2004 YD5'  JOIN PaperAuthor pa2 ON pa2.PaperId = p2.Id  JOIN Conference c ON c.Id = p2.ConferenceId;
SELECT chronname  FROM institution_grads  JOIN institution_details ON institution_grads.unitid = institution_details.unitid  WHERE race = 'Ai' AND year = '2007'  GROUP BY chronname  ORDER BY COUNT(race = 'Ai') DESC  LIMIT 1;
SELECT      chronname,      site  FROM      college_completion.institution_details  JOIN      college_completion.institution_grads ON college_completion.institution_details.unitid = college_completion.institution_grads.unitid  WHERE      college_completion.institution_grads.year = '2011' AND      college_completion.institution_grads.grad_cohort = 209;
SELECT COUNT(*)  FROM institution_grads  JOIN institution_details ON institution_grads.unitid = institution_details.unitid  WHERE institution_details.chronname = 'Gateway Community College'  AND institution_details.state_sector_ct = (SELECT stateid FROM state_sector_details WHERE state = (SELECT state FROM institution_details WHERE chronname = 'Gateway Community College'))  AND institution_grads.year BETWEEN 2011 AND 2013  AND institution_grads.gender = 'F';
SELECT SUM(i.grad_cohort)  FROM institution_details i JOIN institution_grads ig ON i.unitid = ig.unitid JOIN state_sector_grads ssg ON i.state = ssg.state_abbr AND i.year = ssg.year WHERE i.gender = 'M' AND i.year = 2012 AND i.aid_value = (SELECT MAX(aid_value) FROM institution_details);
SELECT      state_sector_details.state,     AVG(institution_details.med_sat_value) AS average_med_sat_value FROM      institution_details JOIN      institution_grads ON institution_details.unitid = institution_grads.unitid AND institution_grads.year = 2013 JOIN      state_sector_grads ON institution_details.state = state_sector_grads.state_abbr AND institution_grads.gender = 'M' AND institution_grads.year = 2013 JOIN      state_sector_details ON institution_details.state = state_sector_details.stateid WHERE      MAX(state_sector_grads.grad_cohort) = SUM(state_sector_grads.grad_cohort WHERE institution_grads.gender = 'M') GROUP BY      state_sector_details.state;
SELECT      state,     chronname FROM      college_completion.state_sector_grads JOIN      college_completion.institution_details  ON      college_completion.state_sector_grads.stateid = college_completion.institution_details.unitid WHERE      college_completion.state_sector_grads.year = 2012 AND      college_completion.institution_details.control = 'Private for-profit' GROUP BY      state, chronname ORDER BY      SUM(college_completion.state_sector_grads.grad_cohort) DESC LIMIT 1;
SELECT chronname FROM institution_details JOIN state_sector_grads ON institution_details.unitid = state_sector_grads.state_sector_ct WHERE control = 'Public' AND year = 2013 AND state_sector_grads.grad_cohort = (SELECT MIN(grad_cohort) FROM state_sector_grads WHERE year = 2013);
SELECT      i.chronname,     i.fte_value FROM      institution_details i JOIN      institution_grads ig ON i.unitid = ig.unitid WHERE      ig.year = 2013 AND      ig.gender = 'B' AND      ig.race = 'X' AND      ig.grad_cohort < 200;
SELECT COUNT(*)  FROM institution_grads  JOIN institution_details ON institution_grads.unitid = institution_details.unitid  WHERE institution_details.chronname = 'Oakwood University'  AND institution_details.year = 2013  AND institution_details.gender = 'F'  AND institution_grads.cohort = 'all';
SELECT COUNT(*)  FROM institution_grads  JOIN institution_details ON institution_grads.unitid = institution_details.unitid  WHERE institution_details.chronname = 'University of Alaska at Anchorage'  AND institution_details.year = 2012  AND institution_grads.gender = 'F'  AND institution_grads.race = 'A'  AND institution_grads.cohort = '4y other';
SELECT      i.year,     COUNT(ig.grad_cohort) AS total_grad_cohort FROM      institution_details i JOIN      institution_grads ig ON i.unitid = ig.unitid WHERE      i.chronname = 'Auburn University' AND     i.gender = 'B' AND     i.race = 'X' AND     ig.cohort IN ('4y other', '4y bach') AND     i.year BETWEEN 2011 AND 2013 GROUP BY      i.year;
SELECT      (SUM(CASE WHEN i.control = 'Private for-profit' AND i.race = 'B' THEN 1 ELSE 0 END) * 100.0 /       SUM(CASE WHEN i.control = 'Private for-profit' THEN 1 ELSE 0 END)) AS black_student_percentage FROM      institution_details i JOIN      institution_grads ig ON i.unitid = ig.unitid WHERE      i.control = 'Private for-profit';
SELECT      state,     year,     SUM(CASE WHEN race = 'A' THEN 1 ELSE 0 END) * 100.0 / SUM(grad_cohort) AS asian_percentage_graduated FROM      college_completion.institution_grads JOIN      college_completion.state_sector_grads ON institution_grads.unitid = state_sector_grads.unitid WHERE      state = 'Alabama'     AND year = 2013     AND grad_100 = 1 GROUP BY      state,     year;
SELECT      (SUM(CASE WHEN i.gender = 'M' THEN i.grad_cohort ELSE 0 END)      / SUM(CASE WHEN i.gender = 'F' THEN i.grad_cohort ELSE 0 END)) * 1.0 AS asian_male_to_female_grad_ratio FROM      institution_details i JOIN      institution_grads ig ON i.unitid = ig.unitid WHERE      i.chronname = 'Harvard University' AND      ig.year = 2013 AND      i.race = 'A'
SELECT chronname, MIN(grad_100_value) FROM institution_details WHERE chronname = 'Amridge University' OR chronname = 'Auburn University' ORDER BY MIN(grad_100_value) ASC LIMIT 1;
SELECT COUNT(*)  FROM institution_details  WHERE control = 'Private not-for-profit';
SELECT COUNT(*)  FROM institution_details  JOIN institution_grads ON institution_details.unitid = institution_grads.unitid  WHERE institution_details.chronname = 'Amridge University'  AND institution_grads.gender = 'M'  AND institution_grads.race = 'H';
SELECT COUNT(*)  FROM institution_grads  JOIN institution_details ON institution_grads.unitid = institution_details.unitid  WHERE institution_details.chronname = 'Lincoln College'  AND institution_details.year = 2011  AND institution_details.cohort = '4y bach';
SELECT COUNT(*)  FROM institution_grads  JOIN institution_details ON institution_grads.unitid = institution_details.unitid  WHERE      institution_details.chronname = 'Central Alabama Community College' AND      institution_details.year = 2011 AND      institution_grads.gender = 'M' AND      institution_grads.race = 'H' AND      institution_grads.grad_100 = 1;
SELECT SUM(i.grad_100 + i.grad_150) AS total_graduates  FROM institution_details i  JOIN institution_grads ig ON i.unitid = ig.unitid  WHERE i.chronname = 'Central Alabama Community College' AND ig.year = 2011;
SELECT      CASE          WHEN (SELECT SUM(ig.grad_150) FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Central Alabama Community College' AND ig.year = 2011 AND ig.gender = 'F' AND id.race = 'w') / (SELECT COUNT(*) FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Central Alabama Community College' AND ig.year = 2011 AND id.gender = 'F') >          (SELECT SUM(ig.grad_150) FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Central Alabama Community College' AND ig.year = 2011 AND ig.gender = 'M' AND id.race = 'w') / (SELECT COUNT(*) FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Central Alabama Community College' AND ig.year = 2011 AND id.gender = 'M')          THEN 'Female White Students'         ELSE 'Male White Students'     END AS CohortWithHigherPercentage
SELECT `chronname`  FROM `institution_details` JOIN `institution_grads` ON `institution_details.unitid` = `institution_grads.unitid` WHERE `institution_grads.year` = 2011  AND `institution_grads.gender` = 'M' AND `institution_grads.race` = 'w' AND `institution_grads.grad_150` = 1;
SELECT      i.chronname  FROM      institution_details AS i JOIN      institution_grads AS ig ON i.unitid = ig.unitid WHERE      i.year = 2011 AND      ig.gender = 'M' AND      ig.race = 'W' AND      ig.grad_150 > 20;
SELECT COUNT(*)  FROM institution_grads i  JOIN state_sector_grads s ON i.unitid = s.stateid  WHERE i.year = 2011  AND i.cohort = '2y all'  AND s.state = 'Alabama'  AND s.gender = 'B';
SELECT      SUM(state_sector_grads.grad_cohort) AS grad_cohort_2012 FROM      state_sector_grads WHERE      state_sector_grads.state = 'Alabama' AND     state_sector_grads.control = 'Public' AND     state_sector_grads.level = '2 yr' AND     state_sector_grads.year = 2012 AND     state_sector_grads.chronname = 'Central Alabama Community College' UNION ALL SELECT      SUM(state_sector_grads.grad_cohort) AS grad_cohort_2011 FROM      state_sector_grads WHERE      state_sector_grads.state = 'Alabama' AND     state_sector_grads.control = 'Public' AND     state_sector_grads.level = '2 yr' AND     state_sector_grads.year = 2011 AND     state_sector_grads.chronname = 'Central Alabama Community College' SELECT      (grad_cohort_2012 - grad_cohort_2011) AS difference_in_grads FROM     ( ... ) AS subquery
SELECT COUNT(*)  FROM institution_details  JOIN state_sector_grads ON institution_details.unitid = state_sector_grads.state_sector_ct  JOIN state_sector_details ON state_sector_details.stateid = state_sector_grads.stateid  WHERE state_sector_details.state = 'Alabama'  AND state_sector_details.med_sat_percentile = 77  AND state_sector_grads.year = 2011  AND state_sector_grads.grad_cohort_ct > 500;
SELECT COUNT(*)  FROM institution_details  JOIN state_sector_grads ON institution_details.unitid = state_sector_grads.state_sector_ct  WHERE state_sector_grads.state_abbr = 'AL'  AND institution_details.control = 'Public'  AND institution_details.year = 2011  AND state_sector_grads.grad_100 > 30;
SELECT `chronname`  FROM `institution_details`  JOIN `state_sector_grads` ON `institution_details.unitid` = `state_sector_grads.unitid` WHERE `state_sector_grads.state_abbr` = 'AL' AND `state_sector_grads.year` = 2011 AND `state_sector_grads.grad_cohort` > 500;
SELECT      AVG(SUM(`grad_cohort`              WHERE `year` IN (2011, 2012, 2013)              AND `chronname` = 'Central Alabama Community College')) AS avg_grads FROM `state_sector_grads`;
SELECT AVG(T2.grad_100_rate) AS avg_percentage FROM institution_details AS T1 JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Central Alabama Community College';
SELECT site  FROM institution_details  WHERE chronname = 'Swarthmore College';
SELECT state  FROM institution_details  WHERE chronname = 'Mercer University';
SELECT city  FROM institution_details  WHERE chronname = 'Rensselaer Polytechnic Institute';
SELECT state_abbr  FROM state_sector_details  WHERE state = 'Delaware';
SELECT COUNT(*)  FROM state_sector_details  WHERE state = 'California'  AND level = '2-year'  AND control = 'public';
SELECT state_post FROM state_sector_details WHERE state = 'Idaho';
SELECT chronname FROM institution_details WHERE state_abbr = 'NJ' AND level = '4-year' ORDER BY student_count DESC LIMIT 1;
SELECT `site` FROM `state_sector_details` JOIN `institution_details` ON `institution_details.unitid` = `state_sector_details.stateid` WHERE `state_sector_details.state_abbr` = 'PA' ORDER BY `institution_details.lat_y` DESC LIMIT 1;
SELECT COUNT(*)  FROM institution_details  JOIN state_sector_grads ON institution_details.unitid = state_sector_grads.stateid  WHERE institution_details.level = '4-year'  AND institution_details.control = 'Public'  AND institution_details.state = 'UT'  AND institution_details.awards_per_value > (SELECT awards_per_state_value FROM state_sector_details WHERE state_abbr = 'UT');
SELECT COUNT(*)  FROM institution_details  JOIN state_sector_grads ON institution_details.unitid = state_sector_grads.state_sector_ct  WHERE institution_details.level = '2-year'  AND institution_details.control = 'Private not-for-profit'  AND institution_details.state = 'CT'  AND institution_details.awards_per_value < (SELECT AVG(awards_per_value) FROM state_sector_details WHERE state_abbr = 'CT');
SELECT chronname FROM institution_details WHERE state_abbr = 'ID' AND level = '4-year' AND control = 'Public' ORDER BY grad_100_value ASC LIMIT 1;
SELECT unitid FROM institution_details WHERE state_abbr = 'KY' AND level = '4-year' AND control = 'Private for-profit' AND grad_150_value = (SELECT MAX(grad_150_value) FROM institution_details WHERE state_abbr = 'KY' AND level = '4-year' AND control = 'Private for-profit');
SELECT COUNT(*)  FROM institution_grads  JOIN institution_details ON institution_grads.unitid = institution_details.unitid  WHERE      institution_details.chronname = 'Pennsylvania State University-Altoona' AND      institution_grads.gender = 'F' AND      institution_grads.race = 'H' AND      institution_grads.grad_100 = 1;
SELECT cohort  FROM institution_details  WHERE cohort_size = (SELECT MAX(cohort_size) FROM institution_details);
SELECT COUNT(*)  FROM institution_details  JOIN state_sector_grads ON institution_details.unitid = state_sector_grads.state_sector_ct  WHERE level = '4-year'  AND control = 'Private not-for-profit'  AND chronname = 'Brevard Community College';
SELECT SUM(state_sector_grads.grad_cohort) FROM state_sector_grads WHERE state = 'Alabama' AND level = '2-year' AND control = 'Public' AND year = 2011;
SELECT COUNT(*)  FROM institution_grads  JOIN institution_details ON institution_grads.unitid = institution_details.unitid  JOIN state_sector_grads ON institution_details.state = state_sector_grads.state_abbr  WHERE institution_details.level = '2-year'  AND institution_details.control = 'public'  AND institution_details.race = 'A'  AND institution_details.schools_count = 113  AND institution_details.year = 2013  AND institution_grads.cohort = '2y all'  AND state_sector_grads.cohort = '2y all';
SELECT      state_appr_rank  FROM      state_sector_details  WHERE      chronname = 'Madison Area Technical College' AND      control = 'Public' AND      level = '4-year' AND      state = 'Alabama';
SELECT state, chronname  FROM college_completion.institution_details  WHERE year BETWEEN 2010 AND 2012  AND race = 'B';
SELECT DISTINCT state FROM state_sector_details WHERE year = '2011' AND awards_per_natl_value < 20;
SELECT      control, level  FROM      institution_details  WHERE      race = 'X'  GROUP BY      control, level  ORDER BY      SUM(student_count) DESC  LIMIT 1;
SELECT DISTINCT state FROM state_sector_details WHERE control = 'Public' AND school_count < 20;
SELECT `institution_details`.`basic` FROM `institution_details` JOIN `institution_grads` ON `institution_details`.`unitid` = `institution_grads`.`unitid` WHERE `institution_grads`.`year` = '2012' AND `institution_grads`.`gender` = 'M' AND `institution_grads`.`race` = 'X';
SELECT COUNT(*)  FROM state_sector_grads  JOIN state_sector_details ON state_sector_grads.stateid = state_sector_details.stateid  JOIN institution_details ON state_sector_grads.unitid = institution_details.unitid  WHERE state_sector_details.state = 'Alaska'  AND year BETWEEN '2011' AND '2013'  AND institution_details.state_sector_ct = 1  AND state_sector_grads.race = 'W';
SELECT T1.chronname  FROM institution_details AS T1 JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.race = 'Ai' AND T2.grad_cohort BETWEEN 1 AND 3;
SELECT COUNT(*)  FROM state_sector_grads  JOIN state_sector_details ON state_sector_grads.stateid = state_sector_details.stateid  WHERE state_sector_grads.year = '2012'  AND state_sector_grads.awards_per_natl_value = 16.5  AND state_sector_details.state LIKE 'A%'  AND state_sector_grads.control = state_sector_details.control  AND state_sector_grads.level = state_sector_details.level;
SELECT `site` FROM institution_details WHERE `student_count` BETWEEN 500 AND 1000 AND `vsa_year` = (SELECT MAX(`vsa_year`) FROM institution_details);
SELECT s.state  FROM state_sector_grads sg  JOIN state_sector_details sd ON sg.state = sd.stateid  JOIN institution_grads ig ON ig.unitid = sg.state_sector_ct  JOIN institution_details id ON id.unitid = ig.unitid  WHERE ig.year = '2011'  AND id.control = 'Private for-profit'  AND ig.gender = 'M'  AND id.race = 'B';
SELECT      id.institution_site,     id.chronname FROM      institution_details AS id JOIN      institution_grads AS ig ON id.unitid = ig.unitid JOIN      state_sector_grads AS ss ON id.state = ss.state_abbr AND ig.year = '2011' AND ss.year = '2011' WHERE      ig.race = 'B' AND ig.cohort BETWEEN 20 AND 30;
SELECT COUNT(*)  FROM state_sector_grads  JOIN state_sector_details ON state_sector_grads.stateid = state_sector_details.stateid  WHERE gender = 'F'  AND year = 2012  AND state_sector_details.schools_count BETWEEN 10 AND 20;
SELECT DISTINCT institution_details.race  FROM institution_details  JOIN state_sector_details ON institution_details.unitid = state_sector_details.stateid  WHERE state_sector_details.state = 'Alabama' AND institution_details.student_count > (SELECT AVG(student_count) * 0.9 FROM institution_details);
SELECT      state_appr_value  FROM      state_sector_details  JOIN      institution_details  ON      state_sector_details.stateid = institution_details.unitid  WHERE      state_sector_details.state = 'Hawaii'      AND institution_details.level = '2-year'      AND institution_details.year = 2010;
SELECT chronname  FROM institution_details  JOIN state_sector_grads ON institution_details.unitid = state_sector_grads.state_sector_ct  WHERE state_abbr = 'CT' AND control IN ('Public', 'Private')  AND level = 'Undergraduate'  GROUP BY chronname  ORDER BY retain_percentile DESC  LIMIT 1;
SELECT T1.site  FROM institution_details AS T1  JOIN institution_grads AS T2 ON T1.unitid = T2.unitid  WHERE T2.year = 2008  AND T2.cohort = '2y all'  AND T2.race = 'W'  AND T1.site IS NOT NULL  ORDER BY T2.grad_cohort_ct DESC  LIMIT 1;
SELECT year  FROM institution_details  WHERE chronname = 'Harvard University'  AND cohort = 'first-time' AND ft_pct = 'full-time' AND student_count > 0; -- Assuming zero count means no exclusions
SELECT `chronname`  FROM `institution_details` JOIN `state_sector_details` ON `institution_details.unitid` = `state_sector_details.stateid` WHERE `state_sector_details.year` = 2010 AND `state_sector_details.state_appr_value` = (SELECT MAX(`state_appr_value`) FROM `state_sector_details` WHERE `year` = 2011) ORDER BY `student_count` ASC LIMIT 1;
SELECT AVG(T2.grad_cohort)  FROM institution_details AS T1  JOIN institution_grads AS T2  ON T1.unitid = T2.unitid  WHERE T1.chronname = 'Yale University'  AND T2.cohort = '4y bach'  AND T2.year BETWEEN 2002 AND 2005;
SELECT      chronname FROM      institution_details WHERE      chronname LIKE 'Brown University'     OR chronname LIKE 'Columbia University'     OR chronname LIKE 'Cornell University'     OR chronname LIKE 'Dartmouth College'     OR chronname LIKE 'Harvard University'     OR chronname LIKE 'Princeton University'     OR chronname LIKE 'University of Pennsylvania'     OR chronname LIKE 'Yale University'     AND institution_details.year = (SELECT MAX(year) FROM institution_grads)     AND institution_grads.race = 'H' GROUP BY      chronname ORDER BY      SUM(institution_grads.grad_cohort) DESC LIMIT 1;
SELECT COUNT(*) AS num_institutions, chronname  FROM college_completion.institution_details  JOIN college_completion.state_sector_details  ON college_completion.institution_details.unitid = college_completion.state_sector_details.stateid  WHERE college_completion.state_sector_details.state = 'Florida'  AND college_completion.institution_details.level = '4-year'  AND college_completion.institution_details.control = 'Public'  GROUP BY chronname;
SELECT      state  FROM      college_completion.state_sector_details WHERE      chronname = 'Brown University' OR chronname = 'Columbia University' OR chronname = 'Cornell University' OR chronname = 'Dartmouth College' OR chronname = 'Harvard University' OR chronname = 'Princeton University' OR chronname = 'University of Pennsylvania' OR chronname = 'Yale University' AND year = 2011 ORDER BY      state_appr_value ASC LIMIT 1;
SELECT chronname FROM state_sector_details ssd JOIN institution_details id ON ssd.state = id.state WHERE ssd.schools_count = (SELECT MAX(schools_count) FROM state_sector_details) AND id.ft_pct >= 90;
SELECT      state_appr_value,     AVG(chronname) AS avg_med_sat_value FROM      state_sector_details s1 JOIN      (SELECT stateid FROM state_sector_details WHERE state_appr_value = (SELECT MIN(state_appr_value) FROM state_sector_details WHERE vsa_year = 2011)) s2 ON s1.stateid = s2.stateid JOIN      institution_details i ON s1.chronname = i.unitid WHERE      i.vsa_year = 2011;
SELECT chronname FROM institution_grads WHERE gender = 'F' AND cohort = '4y' AND grad_cohort = (     SELECT MAX(grad_cohort)      FROM institution_grads      WHERE gender = 'F'      AND cohort = '4y' ) AND (cohort = '4y other' OR cohort IS NULL);
SELECT      i.chronname  FROM      institution_details AS i JOIN      institution_grads AS ig ON i.unitid = ig.unitid WHERE      i.control = 'Private' AND i.level = 'Baccalaureate/Associate's' AND      i.chronname IN ('Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University') AND      ig.year = 2013 AND ig.gender = 'U' AND ig.race = 'B' AND ig.cohort = '4y bach' AND ig.grad_150 IS NOT NULL GROUP BY      i.unitid, i.chronname ORDER BY      COUNT(ig.grad_150) DESC LIMIT 1;
SELECT AVG(i.grad_150)  FROM institution_details AS i  JOIN institution_grads AS ig ON i.unitid = ig.unitid  WHERE i.year BETWEEN '2011' AND '2013'  AND i.chronname = 'United Education Institute-Huntington Park Campus'  AND ig.gender = 'M'  AND i.race = 'H'  AND i.level = '2'
SELECT      i.chronname,     sd.state_appr_value FROM      institution_details i JOIN      state_sector_details sd ON i.unitid = sd.stateid WHERE      MAX(i.awards_per_value - i.awards_per_natl_value) = (         SELECT              MAX(awds_val - awds_natl_val)         FROM              (SELECT                  unitid,                  awards_per_value as awds_val,                  awards_per_natl_value as awds_natl_val             FROM                  institution_details) subq     )
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND stars < 3;
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND active = 'False';
SELECT COUNT(*)  FROM Reviews  WHERE user_id = 36139 AND review_length = 'long';
SELECT COUNT(*)  FROM Users  WHERE user_fans = 'uber';
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Attributes.attribute_name = 'Open 24 Hours' AND Attributes.attribute_value = 'true';
SELECT attribute_value  FROM Business_Attributes  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE business_id = 10172 AND attribute_name = 'Wi-Fi';
SELECT COUNT(*)  FROM Business_Categories  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Bars';
SELECT      (SUM(CASE WHEN business_categories.category_id = (SELECT category_id FROM Categories WHERE category_name = 'Buffets') THEN 1 ELSE 0 END) -       SUM(CASE WHEN business_categories.category_id = (SELECT category_id FROM Categories WHERE category_name = 'Gyms') THEN 1 ELSE 0 END)) AS difference FROM     Business INNER JOIN     Business_Categories ON Business.business_id = Business_Categories.business_id INNER JOIN     Categories ON Business_Categories.category_id = Categories.category_id
SELECT      b.category_name  FROM      Business_Categories bc  JOIN      Business b ON bc.business_id = b.business_id  JOIN      Reviews r ON b.business_id = r.business_id  WHERE      r.review_stars = 5  GROUP BY      b.category_name  ORDER BY      COUNT(*) DESC  LIMIT 1;
SELECT U.user_yelping_since_year  FROM Users U  JOIN Reviews R ON U.user_id = R.user_id  WHERE R.review_stars = 5  GROUP BY U.user_id, U.user_yelping_since_year  ORDER BY COUNT(R.review_id) DESC  LIMIT 1;
SELECT      u.user_id,      AVG(r.review_stars) as average_ratings FROM      Users u JOIN      Reviews r ON u.user_id = r.user_id WHERE      r.review_length = 'long' GROUP BY      u.user_id ORDER BY      COUNT(r.review_length) DESC LIMIT 1;
SELECT      c.category_name  FROM      Business_Categories AS bc JOIN      Categories AS c ON bc.category_id = c.category_id JOIN      Business AS b ON bc.business_id = b.business_id JOIN      Reviews AS r ON b.business_id = r.business_id WHERE      r.review_length = 'long' GROUP BY      c.category_id ORDER BY      COUNT(*) DESC LIMIT 1;
SELECT      c.category_name  FROM      Business b  JOIN      Business_Categories bc ON b.business_id = bc.business_id  JOIN      Business_Tips bt ON b.business_id = bt.business_id  JOIN      Categories c ON bc.category_id = c.category_id  WHERE      bt.tip_length = 'short'  GROUP BY      c.category_id, c.category_name  ORDER BY      COUNT(bt.tip_length) DESC  LIMIT 1;
SELECT U.user_yelping_since_year  FROM Users AS U JOIN Tips AS T ON U.user_id = T.user_id WHERE T.tip_length = 'Short' GROUP BY U.user_id, U.user_yelping_since_year ORDER BY COUNT(T.tip_id) DESC LIMIT 1;
SELECT      b.category_name  FROM      Users u  JOIN      Tips t ON u.user_id = t.user_id  JOIN      Business b ON t.business_id = b.business_id  WHERE      u.user_id = 70271  AND      t.tip_length = 'short';
SELECT Business.stars  FROM Business  JOIN Tips ON Business.business_id = Tips.business_id  WHERE Tips.user_id = 69722 AND Tips.tip_length = 'short';
SELECT      (SUM(CASE WHEN c.category_name = 'Automotive' THEN 1 ELSE 0 END) * 1.0 / COUNT(b.business_id)) * 100 AS percentage FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id;
SELECT      (SUM(CASE WHEN c.category_name = 'Women''s Clothing' THEN 1 ELSE 0 END) - SUM(CASE WHEN c.category_name = 'Men''s Clothing' THEN 1 ELSE 0 END)) * 1.0 / COUNT(b.business_id) * 100 AS percentage_more FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id;
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year = 2004;
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year = 2005 AND user_fans = 'None';
SELECT COUNT(*)  FROM Business  WHERE city = 'Tolleson' AND active = 'TRUE';
SELECT COUNT(*)  FROM Reviews  WHERE user_id = 21679;
SELECT COUNT(*)  FROM Reviews  WHERE business_id = 10682 AND review_stars = 5;
SELECT `business_id`  FROM Business  WHERE `city` = 'Sun City' AND `active` = 'False'  ORDER BY `review_count` DESC  LIMIT 1;
SELECT COUNT(*)  FROM Reviews  JOIN Business ON Reviews.business_id = Business.business_id  WHERE Business.city = 'Yuma' AND Reviews.review_length = 'Medium';
SELECT ba.attribute_value  FROM Business_Attributes ba  JOIN Business b ON ba.business_id = b.business_id  WHERE b.business_id = '4960' AND ba.attribute_name = 'Has TV';
SELECT COUNT(*)  FROM Business_Attributes  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  JOIN Business ON Business_Attributes.business_id = Business.business_id  WHERE Attributes.attribute_name = 'Dogs Allowed' AND Attributes.attribute_value = 'true';
SELECT      (B ClosingTime - B OpeningTime) AS HoursOpen FROM      Business_Hours B JOIN      Business_Attributes BA ON B.business_id = BA.business_id JOIN      Days D ON B.day_id = D.day_id WHERE      BA.attribute_value = 5734 AND     D.day_of_week = 'Saturday';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Hair Removal';
SELECT      (SUM(CASE WHEN business_categories.category_id = (SELECT category_id FROM Categories WHERE category_name = 'Chinese') THEN 1 ELSE 0 END) -      SUM(CASE WHEN business_categories.category_id = (SELECT category_id FROM Categories WHERE category_name = 'Filipino') THEN 1 ELSE 0 END)) AS more_chinese_than_filipino FROM      Business JOIN      Business_Categories ON Business.business_id = Business_Categories.business_id;
SELECT Business.city  FROM Business  JOIN Tips ON Business.business_id = Tips.business_id  JOIN Users ON Users.user_id = Tips.user_id  WHERE Users.user_id = 63469 AND Tips.likes = 1;
SELECT COUNT(DISTINCT c.category_name)  FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id JOIN Business_Categories bc ON ba.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE ba.business_id = 1141 AND a.attribute_name LIKE '%music%' AND ba.attribute_value = 'true';
SELECT COUNT(*)  FROM Users_Compliments uc  JOIN Compliments c ON uc.compliment_id = c.compliment_id  WHERE c.compliment_type = 'cute' AND uc.user_id = 57400;
SELECT user_id  FROM Users_Compliments  WHERE compliment_id IN (     SELECT compliment_id      FROM Compliments      WHERE compliment_type = 'funny' )  GROUP BY user_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Attributes.attribute_name = 'Drive-Thru'  AND Business.city = 'Scottsdale'  AND Business.business_id < 1000;
SELECT AVG(Business.stars)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  WHERE Business_Attributes.attribute_name = 'Open 24 Hours' AND Business_Attributes.attribute_value = 'true';
SELECT      (COUNT(CASE WHEN business.city = 'Phoenix' AND business_attribute.attribute_name = 'BYOB' AND business_attribute.attribute_value = 'TRUE' THEN 1 END) * 1.0 / COUNT(business.business_id)) * 100 AS percentage FROM     Business INNER JOIN     Business_Attributes business_attribute ON Business.business_id = Business_Attributes.business_id WHERE     Business_attribute.attribute_name = 'BYOB' AND Business_attribute.attribute_value = 'TRUE' AND     Business.city = 'Phoenix';
SELECT Business.name FROM Business JOIN Business_Categories ON Business.business_id = Business_Categories.business_id JOIN Categories ON Business_Categories.category_id = Categories.category_id WHERE Categories.category_name = 'Restaurants' AND Business.state = 'AZ' AND Business.stars = 5;
SELECT COUNT(*)  FROM Business  WHERE active = 'true' AND review_count = 'Low';
SELECT user_id  FROM Users  WHERE user_id BETWEEN 1 AND 20  AND user_fans = 'None'  AND user_review_count = 'Low';
SELECT B.business_id, B.opening_time, B.closing_time FROM Business_Hours AS BH JOIN Business_Categories AS BC ON BH.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id WHERE C.category_name = 'fashion';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Shopping' AND Business_Hours.opening_time < '8AM'
SELECT Business.name FROM Business JOIN Business_Categories ON Business.business_id = Business_Categories.business_id JOIN Categories ON Business_Categories.category_id = Categories.category_id WHERE Categories.category_name = 'pets' AND Business.active AND Business.closing_time > '9PM';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Categories.category_name = 'Your Category'  AND Days.day_of_week BETWEEN 'Monday' AND 'Thursday'  AND Business_Hours.opening_time IS NOT NULL  AND Business_Hours.closing_time IS NOT NULL  AND Business.active = 1;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Active Life' AND Business.city = 'Phoenix';
SELECT B.business_id AS "business name" FROM Business B JOIN Business_Categories BC ON B.business_id = BC.business_id JOIN Categories C ON BC.category_id = C.category_id WHERE B.stars < 5 AND C.category_name = 'men\'s clothing';
SELECT B.business_id, B.name  FROM Business AS B JOIN Reviews AS R ON B.business_id = R.business_id WHERE B.active = 'False' AND R.review_votes_useful = 'Low';
SELECT Business.name FROM Business JOIN Reviews ON Business.business_id = Reviews.business_id WHERE Reviews.review_length = 'Long' AND Business.business_id BETWEEN 1 AND 20;
SELECT ba.attribute_value  FROM Business_Attributes ba  JOIN Business_Categories bc ON ba.business_id = bc.business_id  JOIN Categories c ON bc.category_id = c.category_id  WHERE c.category_name = 'Fashion' AND c.city = 'Scottsdale';
SELECT COUNT(*)  FROM Users  JOIN Users_Compliments ON Users.user_id = Users_Compliments.user_id  JOIN Business ON Business.business_id = Reviews.business_id  WHERE Users_Compliments.number_of_compliments = 'Medium'  AND Business.city = 'Phoenix';
SELECT Business.name FROM Business JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id JOIN Days ON Business_Hours.day_id = Days.day_id WHERE Business.city = 'Tempe' AND Business_Hours.opening_time < '8AM';
SELECT COUNT(*)  FROM Business  WHERE city = 'Glendale'  AND active = 'true'  AND Business_Hours.opening_time = '8AM'  AND Business_Hours.closing_time = '6PM';
SELECT      (COUNT(CASE WHEN business.city = 'Phoenix' THEN business.business_id END) * 1.0 / COUNT(business.business_id)) * 100 AS 'Percentage' FROM      Business business;
SELECT      COUNT(DISTINCT CASE          WHEN C.category_name = 'Active Life' AND B.review_count < 'LOW_THRESHOLD'         THEN C.city END) AS cities_with_active_life_category_low_review_count,     (COUNT(DISTINCT CASE          WHEN C.category_name = 'Active Life' AND B.review_count < 'LOW_THRESHOLD'         THEN C.city END) / CAST(COUNT(DISTINCT B.city) AS REAL)) * 100 AS percentage FROM      Business_BusinessCategories AS BB JOIN      Categories AS C ON BB.category_id = C.category_id JOIN      Business AS B ON BB.business_id = B.business_id WHERE      C.category_name = 'Active Life';
SELECT COUNT(*)  FROM Business  WHERE active = 'true' AND city = 'Phoenix';
SELECT COUNT(*)  FROM Business  WHERE city = 'Scottsdale' AND stars > 3;
SELECT AVG(Business.stars)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  WHERE Business.active = 'False'
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Business.state = 'AZ' AND Attributes.attribute_name = 'beer_and_wine';
SELECT B.city FROM Business_Attributes A JOIN Business B ON A.business_id = B.business_id JOIN Attributes AT ON A.attribute_id = AT.attribute_id WHERE AT.attribute_name = 'full_bar' GROUP BY B.city ORDER BY COUNT(A.business_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Fashion' AND Business.stars = 5;
SELECT B.city FROM Business B JOIN Business_Categories BC ON B.business_id = BC.business_id JOIN Categories C ON BC.category_id = C.category_id WHERE C.category_name = 'Food' AND B.review_count = 'High' GROUP BY B.city ORDER BY COUNT(B.business_id) DESC LIMIT 1;
SELECT business_id FROM Business WHERE city = 'Mesa' AND stars > 3;
SELECT T1.city  FROM Business AS T1  JOIN Reviews AS T2 ON T1.business_id = T2.business_id  WHERE T2.review_votes_funny = 'Low'  GROUP BY T1.city  ORDER BY COUNT(T1.business_id) ASC  LIMIT 1;
SELECT      (COUNT(CASE          WHEN b.city = 'Chandler' AND bc.category_id IN (             SELECT category_id FROM Categories WHERE category_name = 'Real Estate'         ) AND b.stars = 5         THEN 1     END) * 100.0 / COUNT(b.business_id)) as percentage FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id;
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year = '2012' AND user_votes_funny = 'High';
SELECT SUM(Reviews.review_votes_useful) FROM Reviews WHERE Reviews.business_id = 2 AND Reviews.user_id = 52592;
SELECT attribute_id FROM Attributes WHERE attribute_name LIKE '%payment%'
SELECT review_length  FROM Reviews  WHERE business_id = 2 AND user_id = 612;
SELECT COUNT(*)  FROM Business  WHERE city = 'Gilbert' AND active = 'true';
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND review_count = 'low';
SELECT business_id FROM Business WHERE state = 'AZ' AND EXISTS (   SELECT *   FROM Reviews   WHERE Business.business_id = Reviews.business_id AND review_stars = 5 );
SELECT attribute_name  FROM Attributes  WHERE attribute_id NOT IN (     SELECT attribute_id      FROM Business_Attributes      WHERE business_id = 2 AND attribute_value != 'none' );
SELECT COUNT(*)  FROM Users_Compliments  JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id  WHERE User_Compliments.user_id = 33 AND Compliments.compliment_type = 'cool';
SELECT opening_time, closing_time  FROM Business_Hours  WHERE business_id = 53 AND day_of_week = 'Friday';
SELECT attribute_name  FROM Attributes  JOIN Business_Attributes ON Attributes.attribute_id = Business_Attributes.attribute_id  WHERE Business_Attributes.business_id = 56 AND Business_Attributes.attribute_value = 'true';
SELECT bc.category_id, c.category_name  FROM Business_Categories AS bc JOIN Categories AS c ON bc.category_id = c.category_id WHERE bc.business_id = 15;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Business.city = 'Scottsdale' AND Categories.category_name = 'Beauty & Spas';
SELECT user_id FROM Users_Compliments JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id WHERE Compliments.compliment_type = 'cute' AND Users_Compliments.number_of_compliments = 'Uber' LIMIT 2;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Accessories'  AND Business.stars > 3;
SELECT      b.opening_time AS business_opening_time,     b.closing_time AS business_closing_time FROM      Business_Hours bh JOIN      Business b ON bh.business_id = b.business_id JOIN      Days d ON bh.day_id = d.day_id WHERE      b.business_id = 12 AND      d.day_of_week = 3 AND      b.city = 'Scottsdale' ;
SELECT COUNT(*)  FROM Business  JOIN Business_Hours ON Business.business_id = Business_Hours.business_id  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business.state = 'AZ'  AND Days.day_of_week = 'Thursday'  AND Business_Hours.closing_time = 'None';
SELECT COUNT(*)  FROM Business  WHERE city = 'Scottsdale';
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND active = 'true';
SELECT COUNT(*)  FROM Business  WHERE city = 'Scottsdale' AND stars > 3;
SELECT      b.city FROM      Business b WHERE      b.city IN ('Scottsdale', 'Anthem') AND      MAX(b.review_count) IS NOT NULL;
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND stars > 4;
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ';
SELECT T1.city  FROM Business AS T1  JOIN Reviews AS T2 ON T1.business_id = T2.business_id  WHERE T2.stars = 5;
SELECT COUNT(*)  FROM Reviews  WHERE user_id = 3;
SELECT COUNT(*)  FROM Reviews  WHERE user_id = 3 AND review_length = 'Long';
SELECT COUNT(*)  FROM Reviews  WHERE user_id = 3 AND review_length = 'Long' AND review_votes_useful = 'medium';
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year = '2012';
SELECT user_id FROM Users WHERE user_fans = 'High';
SELECT COUNT(*)  FROM Business_Attributes  WHERE attribute_name = 'Alcohol' AND attribute_value = 'none';
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Business.state = 'AZ' AND Attributes.attribute_name = 'Alcohol' AND Business_Attributes.attribute_value = 'none';
SELECT Business.business_id  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  WHERE Business_Attributes.attribute_name = 'Good for Kids' AND Business_Attributes.attribute_value = 'true';
SELECT COUNT(*)  FROM Business_Categories  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Shopping';
SELECT bc.category_id, c.category_name  FROM Business_Categories AS bc JOIN Categories AS c ON bc.category_id = c.category_id WHERE bc.business_id = 1;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Business.active = 'true' AND Categories.category_name = 'Food';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Business.city = 'Anthem' AND Categories.category_name = 'Food';
SELECT B.business_id  FROM Business AS B JOIN Business_Categories AS BC ON B.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id WHERE C.category_name = 'Food' AND B.active = 1 ORDER BY (ELT.EligibilityScore) DESC LIMIT 1;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  WHERE Categories.category_name = 'Food'  AND Business_Attributes.attribute_name = 'Good for Kids'  AND Business_Attributes.attribute_value = 'true';
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND EXISTS (   SELECT 1    FROM Reviews    WHERE Business.business_id = Reviews.business_id AND Reviews.user_id = 3 )
SELECT c.category_name  FROM Categories c  JOIN Business_Categories bc ON c.category_id = bc.category_id  WHERE bc.business_id IN (     SELECT b.business_id      FROM Business b      WHERE b.state = 'AZ' );
SELECT      b.day_id,     d.day_of_week,     bh.opening_time,     bh.closing_time FROM      Business_Hours bh JOIN      Business b ON bh.business_id = b.business_id JOIN      Days d ON bh.day_id = d.day_id WHERE      b.business_id = 1 AND      d.day_of_week = 'Tuesday' ORDER BY      bh.day_id ASC LIMIT 1;
SELECT Business_Hours.opening_time  FROM Business_Hours  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business_Hours.business_id = 1 AND Days.day_of_week = 'Tuesday';
SELECT COUNT(*)  FROM Business  JOIN Business_Hours ON Business.business_id = Business_Hours.business_id  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business.active = 1  AND Days.day_of_week = 'Monday'  AND Business_Hours.closing_time IN ('9PM', '10PM', '11PM', '12PM')
SELECT Business_Hours.opening_time  FROM Business_Hours  JOIN Business ON Business.business_id = Business_Hours.business_id  JOIN Days ON Days.day_id = Business_Hours.day_id  WHERE Days.day_of_week = 'Monday'  AND Business.city = 'Anthem'  AND Business.active = 'true';
SELECT COUNT(*)  FROM Business  JOIN Business_Hours ON Business.business_id = Business_Hours.business_id  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business.state = 'AZ'  AND Business_Hours.closing_time = '12PM'  AND Days.day_of_week = 'Sunday';
SELECT bc.category_name  FROM Business_Categories AS bc  JOIN Business_Hours AS bh ON bc.business_id = bh.business_id  WHERE bh.closing_time = '12PM' AND bh.day_id IN (SELECT day_id FROM Days WHERE day_of_week = 'Sunday');
SELECT COUNT(*)  FROM Business_Attributes ba  JOIN Attributes a ON ba.attribute_id = a.attribute_id  JOIN Business b ON ba.business_id = b.business_id  WHERE a.attribute_name = 'Good for Kids' AND ba.attribute_value = 'true' AND EXISTS (   SELECT 1 FROM Days d WHERE d.day_id BETWEEN 1 AND 7 AND EXISTS (     SELECT 1 FROM Business_Hours bh WHERE bh.business_id = b.business_id AND bh.day_id = d.day_id   ) );
SELECT COUNT(*)  FROM Users  WHERE year_id = user_yelping_since_year;
SELECT      b.business_id,     MAX(TIMESTAMPDIFF(SECOND, oh.opening_time, oh.closing_time)) AS longest_business_time FROM      Business_Hours bh JOIN      Business_Hours oh ON bh.business_id = oh.business_id JOIN      Days d ON bh.day_id = d.day_id JOIN      Business_Attributes ba ON bh.business_id = ba.business_id JOIN      Categories c ON ba.business_id = c.business_id WHERE      d.day_of_week = 'Monday' AND     c.category_name = 'Shopping' GROUP BY      b.business_id;
SELECT B.business_id  FROM Business_Hours AS BH  JOIN Days AS D ON BH.day_id = D.day_id  WHERE D.day_of_week = 'Sunday' AND         (BH.closing_time - BH.opening_time) > 12;
SELECT COUNT(*)  FROM Reviews  JOIN Users ON Reviews.user_id = Users.user_id  WHERE business_id = 1 AND user_id IN (SELECT user_id FROM Elite WHERE business_id = 1);
SELECT COUNT(*)  FROM Users  WHERE user_review_count > 10 AND user_id IN (SELECT user_id FROM Elite);
SELECT Business.business_id, Business.name  FROM Business  JOIN Reviews ON Business.business_id = Reviews.business_id  WHERE Business.state = 'AZ'  GROUP BY Business.business_id, Business.name  ORDER BY COUNT(Reviews.business_id) DESC  LIMIT 1;
SELECT AVG(Business.stars)  FROM Business  JOIN Reviews ON Business.business_id = Reviews.business_id  JOIN Users ON Reviews.user_id = Users.user_id  WHERE Business.city = 'Anthem';
SELECT AVG(T2.stars)  FROM Users AS T1  JOIN Reviews AS T2 ON T1.user_id = T2.user_id  WHERE T1.user_id = 3 AND T2.business_state = 'AZ'
SELECT      AVG(DIVIDE(SUBTRACT(bh.closing_time, bh.opening_time), 2)) AS avg_business_time FROM      Business_Hours bh JOIN      Days d ON bh.day_id = d.day_id WHERE      bh.business_id = 1 AND (d.day_of_week = 'Saturday' OR d.day_of_week = 'Sunday');
SELECT AVG(Business.stars)  FROM Business  JOIN Business_Hours ON Business.business_id = Business_Hours.business_id  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business_Hours.closing_time = '12PM' AND Days.day_of_week = 'Sunday';
SELECT COUNT(*)  FROM Business  WHERE city = 'Casa Grande';
SELECT COUNT(*)  FROM Business  WHERE active = 'true' AND state = 'AZ' AND review_count < 10;
SELECT business_id FROM Business WHERE stars >= 2 AND stars < 4 AND city = 'Mesa';
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year >= 2011 AND user_yelping_since_year < 2014 AND user_fans > 100;
SELECT review_length  FROM Reviews  WHERE business_id = 2 AND user_id = 35026;
SELECT Business_Attributes.attribute_value  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  WHERE Business.city = 'Chandler' AND Business.review_count <= 'threshold'
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Mexican' AND Business.stars < 4;
SELECT B.business_id, B.stars  FROM Business AS B JOIN Business_Categories AS BC ON B.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id WHERE B.active = 'true' AND C.category_name = 'Fashion';
SELECT B.category_name  FROM Business_Categories AS BC  JOIN Business AS B ON BC.business_id = B.business_id  WHERE B.stars = (SELECT MAX(stars) FROM Business)
SELECT bc.category_id, bn.category_name  FROM Business_Categories AS bc JOIN Business AS bn ON bc.business_id = bn.business_id JOIN Reviews AS rv ON bn.business_id = rv.business_id WHERE rv.review_length BETWEEN (SELECT MIN(rev_len) FROM (SELECT business_id, LENGTH(review) AS rev_len FROM Reviews WHERE business_id BETWEEN 6 AND 9) AS subquery) AND rv.review_stars = (SELECT MAX(review_stars) FROM Reviews WHERE business_id BETWEEN 6 AND 9) AND bn.business_id BETWEEN 6 AND 9;
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Business.active = 'true' AND Attributes.attribute_name = 'Caters' AND Business.review_count < 10;
SELECT      b.business_id,      bh.opening_time,      bh.closing_time  FROM      Business b      JOIN Business_Categories bc ON b.business_id = bc.business_id      JOIN Categories c ON bc.category_id = c.category_id      JOIN Business_Hours bh ON b.business_id = bh.business_id  WHERE      c.category_name = 'Restaurants' AND      b.city = 'Tempe' AND      b.stars = (SELECT MAX(stars) FROM Business WHERE city = 'Tempe')
SELECT      b.category_id,      c.category_name,      ba.attribute_id,      a.attribute_name FROM      Business AS b JOIN      Business_Categories AS bc ON b.business_id = bc.business_id JOIN      Categories AS c ON bc.category_id = c.category_id JOIN      Business_Attributes AS ba ON b.business_id = ba.business_id JOIN      Attributes AS a ON ba.attribute_id = a.attribute_id WHERE      b.active = 'true' AND      b.city = 'Chandler' AND      b.state = 'AZ' AND      b.review_count BETWEEN (SELECT AVG(review_count) FROM Business WHERE city = 'Chandler' AND state = 'AZ') - 10 AND      (SELECT AVG(review_count) FROM Business WHERE city = 'Chandler' AND state = 'AZ') + 10;
SELECT bc.category_id, cn.category_name FROM Business_Attributes ba JOIN Business b ON ba.business_id = b.business_id JOIN Business_Categories bc ON bc.business_id = b.business_id JOIN Categories cn ON cn.category_id = bc.category_id WHERE b.active = 'true' AND b.city = 'Surprise' AND b.state = 'AZ';
SELECT B.city, B.state  FROM Business_BusinessHours BH JOIN Days D ON BH.day_id = D.day_id  JOIN Business B ON BH.business_id = B.business_id  WHERE D.day_of_week = 'Friday'  AND BH.opening_time = '8AM'  AND BH.closing_time = '9PM';
SELECT attribute_value FROM Business_Attributes ba JOIN Business b ON ba.business_id = b.business_id WHERE b.active = 'true' AND b.city = 'Mesa' AND b.state = 'AZ' AND b.stars = 3 AND b.review_count >= 100;
Error: 第 3896 个样本有 2 个SQL。
SELECT      COUNT(*) FILTER (WHERE business.years < 4) * 100.0 / COUNT(*)  FROM      Business  JOIN      Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN      Categories ON Business_Categories.category_id = Categories.category_id  WHERE      Categories.category_name = 'Accessories'
SELECT Business_Hours.closing_time, Days.day_of_week  FROM Business_Hours  JOIN Business ON Business.business_id = Business_Hours.business_id  JOIN Days ON Days.day_id = Business_Hours.day_id  WHERE Business.active = 'true'  AND Business.city = 'Tempe'  AND Business.stars > (SUM(Business.stars) OVER () / COUNT(Business.business_id)) * 0.7;
SELECT COUNT(*)  FROM Business  WHERE city = 'Phoenix' AND active = 'true';
SELECT COUNT(*)  FROM Business  WHERE `review_count` = 'High';
SELECT COUNT(DISTINCT business_id)  FROM Business_Attributes  WHERE attribute_id IN (SELECT attribute_id FROM Attributes WHERE attribute_name = 'beer_and_wine')
SELECT COUNT(attribute_id)  FROM Business_Attributes  WHERE business_id = 2;
SELECT COUNT(*)  FROM Users_Compliments  WHERE compliment_id = 1 AND number_of_compliments = 'High';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Business.city = 'Phoenix' AND Categories.category_name = 'waiter services';
SELECT Business_Hours.business_id, Attribute.attribute_name  FROM Business_Hours JOIN Business_Attributes ON Business_Hours.business_id = Business_Attributes.business_id JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE (Business_Hours.opening_time = Business_Hours.closing_time AND Business_Hours.day_id IN (1, 2, 3, 4, 5, 6, 7)) AND COUNT(Business_Hours.day_id) = 7;
SELECT Business.name FROM Business JOIN Business_Categories ON Business.business_id = Business_Categories.business_id JOIN Categories ON Business_Categories.category_id = Categories.category_id WHERE Categories.category_name = 'Fashion' ORDER BY COUNT(Reviews.user_id) DESC LIMIT 1;
SELECT      b.category_name FROM      Business_Categories AS bc JOIN      Business AS b ON bc.business_id = b.business_id WHERE      b.state = 'AZ' AND AVG(CASE WHEN r.review_stars >= 3 THEN 1 ELSE 0 END) OVER (PARTITION BY bc.category_id) > 0.5 GROUP BY      bc.category_id, b.category_name ORDER BY      COUNT(*) DESC;
SELECT      COUNT(CASE WHEN u.user_average_stars = 5 THEN 1 END) / COUNT(CASE WHEN u.user_average_stars = 1 THEN 1 END) AS ratio_best_to_worse_elite FROM      Users u JOIN      Elite e ON u.user_id = e.user_id JOIN      Years y ON u.user_yelping_since_year = y.actual_year WHERE      y.actual_year = 2013;
SELECT      years.actual_year,     (COUNT(CASE WHEN years.actual_year BETWEEN 2005 AND 2013 THEN elites.user_id END) /       COUNT(CASE WHEN years.actual_year = 2014 THEN elites.user_id END)) * 100 AS increment_percentage FROM      years JOIN      elites ON elites.year_id = years.year_id GROUP BY      years.actual_year;
SELECT COUNT(DISTINCT business_id) AS reviewed_business_count,         (EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - user_yelping_since_year) AS years_with_yelp FROM Reviews JOIN Users ON Reviews.user_id = Users.user_id WHERE Reviews.user_id = 3;
SELECT      (COUNT(reviews.business_id)) / (EXTRACT(YEAR FROM CURRENT_DATE) - COALESCE(users.user_yelping_since_year, 0)) AS yearly_average_reviews FROM      Reviews JOIN      Users ON Reviews.user_id = Users.user_id WHERE      Users.user_id = 3;
SELECT      b.business_id,     AVG(r.review_stars) AS avg_reviews FROM      Business b JOIN      Elite e ON b.business_id = e.business_id JOIN      Reviews r ON b.business_id = r.business_id GROUP BY      b.business_id;
SELECT U.user_id, AVG(T.likes) AS average_likes FROM Users U JOIN Elite E ON U.user_id = E.user_id JOIN Years Y ON U.user_id = Y.user_id AND E.year_id = Y.year_id - 1 GROUP BY U.user_id HAVING COUNT(Y.year_id) >= 5;
SELECT      b.business_name,     AVG(r.review_stars) AS average_star FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id JOIN      Reviews r ON b.business_id = r.business_id WHERE      c.category_name = 'Hotel & Travel' GROUP BY      b.business_id,      b.business_name ORDER BY      COUNT(r.review_id) DESC LIMIT      1;
SELECT      AVG(Reviews.review_stars) AS AvgReviewStars,     AVG(Business.stars) AS AvgBusinessStars FROM      Reviews JOIN      Business ON Reviews.business_id = Business.business_id;
SELECT COUNT(*)  FROM Business  WHERE active = 'true';
SELECT business_id FROM Business WHERE city = 'Phoenix' AND review_count = 'Low';
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND active = 'true' AND review_count = 'High';
SELECT business_id FROM Business WHERE stars BETWEEN 3 AND 4 AND city = 'Tempe';
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year >= '2010' AND user_yelping_since_year < '2013' AND user_fans = 'Low';
SELECT review_length  FROM Reviews  WHERE business_id = 1 AND user_id = 60776;
SELECT B.attribute_name  FROM Business_Attributes BA  JOIN Business B ON BA.business_id = B.business_id  JOIN Days D ON B.day_id = D.day_id  JOIN Years Y ON B.year_id = Y.year_id  WHERE B.city = 'Scottsdale' AND B.review_count = 'High'
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Automotive' AND Business.stars < 3;
SELECT B.business_id, B.stars  FROM Business AS B JOIN Business_Categories AS BC ON B.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id WHERE B.active = 'true' AND C.category_name = 'Pets';
SELECT attribute_name FROM Business_Attributes ba JOIN Business b ON ba.business_id = b.business_id WHERE ba.attribute_id = [your_attribute_id] -- replace [your_attribute_id] with the actual attribute_id for 'stars' ORDER BY b.stars DESC LIMIT 1;
SELECT Business_Categories.category_name  FROM Reviews  JOIN Business ON Reviews.business_id = Business.business_id  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  WHERE Reviews.review_length = 'Short'  AND Business.business_id BETWEEN 5 AND 10  ORDER BY Reviews.review_stars DESC  LIMIT 1;
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Attributes.attribute_name = 'Wi-Fi' AND Business.active = 'true' AND Business.review_count = 'Medium';
SELECT      b.business_id,      bh.opening_time,      bh.closing_time  FROM      Business b      JOIN Business_Categories bc ON b.business_id = bc.business_id      JOIN Categories c ON bc.category_id = c.category_id      JOIN Business_Hours bh ON b.business_id = bh.business_id  WHERE      c.category_name = 'Restaurants' AND      b.city = 'Gilbert' AND      b.stars = (SELECT MAX(stars) FROM Business WHERE city = 'Gilbert')
SELECT      b.category_id,      c.category_name,      ba.attribute_id,      a.attribute_name FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id JOIN      Business_Attributes ba ON b.business_id = ba.business_id JOIN      Attributes a ON ba.attribute_id = a.attribute_id WHERE      b.active = 'true' AND      b.city = 'Mesa' AND      b.state = 'AZ' AND      b.review_count = 'Low';
SELECT bc.category_id, cat.category_name FROM Business AS b JOIN Business_Attributes AS ba ON b.business_id = ba.business_id JOIN Business_Categories AS bc ON b.business_id = bc.business_id JOIN Categories AS cat ON bc.category_id = cat.category_id WHERE b.active = 'FALSE' AND b.state = 'AZ';
SELECT B.city FROM Business_Hours AS BH JOIN Days AS D ON BH.day_id = D.day_id JOIN Business AS B ON BH.business_id = B.business_id WHERE D.day_of_week = 'Saturday' AND BH.opening_time = '9AM' AND BH.closing_time = '9PM';
SELECT Business_Attributes.attribute_value  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  WHERE Business.active = 'FALSE'  AND Business.review_count = 'Medium'  AND Business.stars = 3.5  AND Business.city = 'Phoenix'  AND Business.state = 'AZ';
SELECT B.business_id, B.active, H.opening_time  FROM Business B  JOIN Business_Hours H ON B.business_id = H.business_id  WHERE B.active = 'true' AND B.city = 'Surprise' AND B.review_count = 'Low';
SELECT      (COUNT(CASE          WHEN b.stars < 3 THEN b.business_id      END) * 100.0 / COUNT(b.business_id)) AS percentage FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id WHERE      c.category_name = 'Local Services'
SELECT Business_Hours.closing_time, Days.day_of_week  FROM Business_Hours  JOIN Business ON Business.business_id = Business_Hours.business_id  JOIN Days ON Days.day_id = Business_Hours.day_id  WHERE Business.active = 'true'  AND Business.city = 'Scottsdale'  AND Business.stars > (SELECT AVG(stars) * 0.6 FROM Business)
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year = 2014 AND user_fans = 'None';
SELECT user_id FROM Users_Compliments WHERE compliment_id IN (     SELECT compliment_id FROM Compliments WHERE compliment_type = 'low' ) GROUP BY user_id HAVING COUNT(*) < 5;
SELECT user_id FROM Users WHERE user_average_stars = 4 LIMIT 10;
SELECT B.city FROM Business_Hours AS BH JOIN Business AS B ON B.business_id = BH.business_id JOIN Days AS D ON D.day_id = BH.day_id WHERE D.day_of_week = 'Sunday' AND BH.opening_time = '10AM' AND BH.closing_time = '12PM';
SELECT COUNT(*)  FROM Business_Attributes  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  JOIN Business ON Business_Attributes.business_id = Business.business_id  WHERE Attributes.attribute_name = 'Open 24 Hours' AND Attributes.attribute_value = 'true'
SELECT b.business_id  FROM Business AS b JOIN Business_Attributes AS ba ON b.business_id = ba.business_id WHERE ba.attribute_value IN ('Good for Groups', 'Good for Dancing') AND b.active = true;
SELECT B.business_id, B.name  FROM Business AS B JOIN Business_Categories AS BC ON B.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id JOIN Days AS D ON B.day_id = D.day_id WHERE B.active = 'true' AND C.category_name = 'Ahwatukee' AND D.day_of_week = 'Sunday';
SELECT DISTINCT c.category_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.active = 'true' AND b.state != 'AZ';
SELECT Business_Categories.category_name  FROM Business_Categories  JOIN Business ON Business_Categories.business_id = Business.business_id  WHERE Business.review_count = 'High' AND Business.stars = 2;
SELECT COUNT(*)  FROM Business_Attributes  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  JOIN Business_Categories ON Business_Attributes.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Attributes.attribute_name = 'ambience_romantic' AND Attributes.attribute_value = 'true';
SELECT B.city FROM Business_Hours AS BH JOIN Business AS B ON B.business_id = BH.business_id JOIN Days AS D ON D.day_id = BH.day_id WHERE BH.opening_time = '1PM' AND BH.closing_time = '6PM' AND D.day_of_week = 'Saturday';
SELECT MAX(T2.likes) AS max_likes, T1.user_id AS fan_id FROM Users AS T1 JOIN Tips AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id ORDER BY max_likes DESC LIMIT 1;
SELECT B.city FROM Business_Hours AS H JOIN Business AS B ON H.business_id = B.business_id JOIN Days AS D ON D.day_id = H.day_id WHERE D.day_of_week = 'Saturday' AND H.opening_time = '12AM' AND H.closing_time = '1AM';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Shopping Centers' AND Business.review_count = 'High';
SELECT COUNT(*)  FROM Business_Attributes  WHERE attribute_id IN (     SELECT attribute_id      FROM Attributes      WHERE attribute_name = 'Accepts Insurance' AND attribute_value = 'true' ) AND attribute_value = 'true';
SELECT      AVG(Review.Stars) AS Average_Review_Stars FROM      Business  JOIN      Reviews ON Business.Business_ID = Reviews.Business_ID WHERE      Business.State IN ('SC', 'CA')
SELECT      (COUNT(CASE WHEN d.day_of_week = 'Monday' THEN b.business_id END) -       COUNT(CASE WHEN d.day_of_week = 'Tuesday' THEN b.business_id END)) as diff_open_businesses FROM      Business b JOIN      Business_Hours bh ON b.business_id = bh.business_id JOIN      Days d ON d.day_id = bh.day_id WHERE      bh.opening_time = '10AM' AND      bh.closing_time = '9PM'
SELECT attribute_id FROM Attributes WHERE attribute_name = 'Accepts Insurance';
SELECT COUNT(*)  FROM Business  WHERE city = 'Phoenix' AND active = 'true';
SELECT COUNT(*)  FROM Business  WHERE stars = 4 AND city = 'Mesa';
SELECT COUNT(*)  FROM Business  WHERE city = 'Gilbert' AND stars > 3;
SELECT business_id FROM Business WHERE city = 'Gilbert' AND active = 'true' AND review_count = (SELECT MAX(review_count) FROM Business WHERE city = 'Gilbert' AND active = 'true');
SELECT COUNT(*)  FROM Reviews  JOIN Business ON Reviews.business_id = Business.business_id  WHERE Business.city = 'Tempe'  AND Business.stars = 3.5  AND Business.review_count = 'Uber'  AND Reviews.review_length = 'Long';
SELECT      b.business_id,      a.attribute_value AS noise_level FROM      Business_Attributes a JOIN      Business b ON a.business_id = b.business_id JOIN      Attributes at ON a.attribute_id = at.attribute_id WHERE      b.city = 'Mesa' AND     b.review_count = 'Uber' AND     at.attribute_name = 'Noise Level';
SELECT      b.business_id,     a.attribute_value FROM     Business_Attributes AS ba JOIN     Attributes AS a ON ba.attribute_id = a.attribute_id JOIN     Business AS b ON b.business_id = ba.business_id WHERE     b.business_id = 14033 AND     a.attribute_name = 'good_for_dinner';
SELECT      Business_Hours.opening_time, Business_Hours.closing_time FROM      Business_Hours JOIN      Days ON Business_Hours.day_id = Days.day_id WHERE      Business_Hours.business_id = '15098' AND Days.day_of_week = 'Monday';
SELECT business_id FROM Reviews WHERE review_stars = 5 AND review_votes_funny = 'Uber' AND business_id IN (     SELECT business_id     FROM Business     WHERE city = 'Phoenix' );
SELECT B.city FROM Tips T JOIN Business B ON T.business_id = B.business_id WHERE T.tip_length = 'Medium' AND T.likes = 3;
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year = '2010' AND user_average_stars = '4.5' AND user_fans >= (SELECT MAX(fans) FROM Users);
SELECT COUNT(*)  FROM Users_Compliments  JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id  WHERE Compliments.compliment_type = 'cool' AND Users_Compliments.user_id = 41717;
SELECT COUNT(*)  FROM Business_Attributes  WHERE business_id = '12476'  AND attribute_id IN (SELECT attribute_id FROM Attributes WHERE attribute_name = 'parking_lot');
SELECT      b.business_id FROM      Business_Attributes ba JOIN      Business b ON ba.business_id = b.business_id JOIN      Attributes a ON ba.attribute_id = a.attribute_id WHERE      b.business_id = '12476' AND     a.attribute_name = 'payment_types' AND     ba.attribute_value = 'mastercard';
SELECT      (COUNT(CASE WHEN c.category_name = 'Pets' THEN b.business_id END)::decimal / COUNT(b.business_id)) * 100 AS pets_category_percentage FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id;
SELECT      COUNT(*) AS womenClothingCount,     COUNT(*) AS menClothingCount,     (COUNT(CASE WHEN category_name = 'Women''s Clothing' THEN 1 END) /       COUNT(CASE WHEN category_name = 'Men''s Clothing' THEN 1 END)) AS times FROM      Business_Categories bc  JOIN      Categories c ON bc.category_id = c.category_id
SELECT business_id, active, city  FROM Business  WHERE state = 'CA';
SELECT      (COUNT(CASE WHEN active = 'true' THEN business_id END) * 100.0 / COUNT(business_id)) AS percentage_running_business FROM      Business;
SELECT attribute_id, attribute_name  FROM Attributes  WHERE attribute_name LIKE 'music%';
SELECT year_id FROM Elite WHERE year_id BETWEEN 2006 AND 2007 GROUP BY year_id ORDER BY COUNT(user_id) DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN uco.number_of_compliments = 'Low' THEN uco.user_id ELSE NULL END)      OVER ()      / COUNT(DISTINCT uco.user_id)      OVER ()) * 100 AS percentage_low_compliments FROM      Users_Compliments uco
SELECT business_id, user_id  FROM Reviews  WHERE review_votes_cool = 'Uber';
SELECT U.user_id, B.business_id, T.tip_length  FROM Users U  JOIN Tips T ON U.user_id = T.user_id  WHERE U.user_yelping_since_year = '2004' AND U.user_fans = 'High';
SELECT      b.business_id,     b.active,     u.user_id,     u.user_yelping_since_year FROM      Reviews r JOIN      Business b ON r.business_id = b.business_id JOIN      Users u ON r.user_id = u.user_id WHERE      r.review_votes_funny = 'Uber' AND      r.review_votes_cool = 'Uber' AND      r.review_length > 100; -- Assuming 100 characters as long review length
SELECT attribute_id, business_id, city, active  FROM Business_Attributes ba  JOIN Attributes a ON ba.attribute_id = a.attribute_id  WHERE a.attribute_name = 'music_playlist' AND ba.attribute_value = 'true';
SELECT      (COUNT(CASE WHEN attribute_name = 'Accepts Credit Cards' THEN 1 END) * 100.0 / COUNT(business_id)) as percentage FROM Business_Attributes;
SELECT U.user_id, R.review_length  FROM Users AS U JOIN Business AS B ON U.user_id = B.user_id JOIN Reviews AS R ON B.business_id = R.business_id WHERE B.city = 'San Tan Valley' AND B.active = 'false' AND R.review_stars = 5;
SELECT user_average_stars, Elite.year_id, Compliments.compliment_type  FROM Users  JOIN Elite ON Users.user_id = Elite.user_id  JOIN Users_Compliments ON Users.user_id = Users_Compliments.user_id  JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id  WHERE Users.user_id = 6027 AND Users_Compliments.number_of_compliments = 'Uber';
SELECT      b.business_id,      b.state,      b.city  FROM      Business b  JOIN      Business_Categories bc ON b.business_id = bc.business_id  JOIN      Categories c ON bc.category_id = c.category_id  WHERE      c.category_name = 'Coffee & Tea'  LIMIT 5;
SELECT      c.category_name  FROM      Categories c  JOIN      Business_Categories bc ON c.category_id = bc.category_id  GROUP BY      c.category_name  HAVING      (COUNT(bc.business_id) / (SELECT COUNT(*) FROM Business_Categories)) * 100 > 10;
SELECT U.user_id, U.user_fans  FROM Business AS B  JOIN Reviews AS R ON B.business_id = R.business_id  JOIN Users AS U ON R.user_id = U.user_id  WHERE B.city = 'Sun Lakes' AND B.stars = 5;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name IN ('Men''s Clothing', 'Women''s Clothing') GROUP BY Categories.category_name;
SELECT      c.compliment_type, u.user_fans FROM      Users_Compliments uc JOIN      Compliments c ON uc.compliment_id = c.compliment_id JOIN      Users u ON uc.user_id = u.user_id WHERE      uc.number_of_compliments = (SELECT MAX(number_of_compliments) FROM Users_Compliments WHERE user_id < 100) AND      u.user_id < 100;
SELECT B.business_id  FROM Business_Hours AS BH  JOIN Business AS B ON BH.business_id = B.business_id  WHERE BH.closing_time = '8PM' AND B.active = 0;
SELECT COUNT(*)  FROM Business  WHERE stars = 2 AND city = 'Phoenix' AND state = 'AZ';
SELECT COUNT(*)  FROM Business  WHERE city = 'Tempe' AND stars > 3;
SELECT user_id FROM Users WHERE user_average_stars < 3 AND user_yelping_since_year = 2012;
SELECT      (COUNT(CASE WHEN business.stars = 5 THEN business.business_id END)       / CAST(COUNT(business.business_id) AS REAL)) * 100 AS five_star_percentage FROM      Business;
SELECT      MAX(Reviews.review_count) - MIN(Reviews.review_count) AS review_difference FROM      Reviews;
SELECT B.business_id, B.business_name  FROM Business B JOIN Business_Categories BC ON B.business_id = BC.business_id JOIN Categories C ON BC.category_id = C.category_id WHERE C.category_name = 'Tires' AND COUNT(DISTINCT B.Business_Hours.opening_time) = 7;
SELECT user_id FROM Elite WHERE year_id = 2012;
SELECT B.business_id  FROM Business AS B JOIN Business_Categories AS BC ON B.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id WHERE C.category_name = 'Shopping' AND B.stars = 4;
SELECT COUNT(*)  FROM Business_Hours  WHERE day_of_week = 'Sunday' AND label_time_10 = 'Low';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id   JOIN Reviews ON Business.business_id = Reviews.business_id  WHERE Business.city = 'Glendale'  AND Reviews.user_id = 20241;
SELECT B.city FROM Business B JOIN Business_Categories BC ON B.business_id = BC.business_id JOIN Categories C ON BC.category_id = C.category_id WHERE C.category_name = 'Pet Services';
SELECT COUNT(DISTINCT uc.user_id) FROM Users_Compliments uc JOIN Compliments c ON uc.compliment_id = c.compliment_id JOIN Reviews r ON r.user_id = uc.user_id WHERE c.compliment_type = 'photos' AND r.review_votes_cool = 'High';
SELECT COUNT(*)  FROM Business  WHERE active = 'false' AND EXISTS (   SELECT 1    FROM Business_Attributes    WHERE Business_Attributes.business_id = Business.business_id    GROUP BY Business_Attributes.business_id    HAVING COUNT(Business_Attributes.attribute_id) > 10 )
SELECT Business.name FROM Business JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE Attributes.attribute_name = 'Alcohol' AND Business.city = 'Mesa';
SELECT      COUNT(*) FILTER (WHERE business_id IN (         SELECT b.business_id         FROM Business b         JOIN Business_locations bl ON b.business_id = bl.business_id         WHERE bl.city = 'Phoenix'         AND EXISTS (             SELECT 1 FROM Reviews r WHERE r.business_id = b.business_id AND r.review_votes_funny = 'Low'         )     )) * 100.0 / COUNT(*) AS low_funny_votes_percentage FROM Business b JOIN Business_locations bl ON b.business_id = bl.business_id WHERE bl.city = 'Phoenix'
SELECT      (COUNT(CASE WHEN c.category_name = 'Shopping' THEN b.business_id END)::FLOAT / COUNT(CASE WHEN c.category_name = 'Pets' THEN b.business_id END)) AS category_ratio FROM      Business_Categories bc JOIN      Categories c ON bc.category_id = c.category_id JOIN      Business b ON bc.business_id = b.business_id;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Banks & Credit Unions';
SELECT COUNT(*)  FROM Business  WHERE city = 'Casa Grande' AND active = 'true';
SELECT opening_time  FROM Business_Hours  WHERE business_id = 12 AND day_of_week = 'Monday';
SELECT COUNT(*)  FROM Business_Attributes  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  JOIN Business_Categories ON Business_Attributes.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Attributes.attribute_name = 'Good for Kids' AND Attributes.attribute_value = 'true';
SELECT B.business_id, B.name  FROM Business AS B JOIN Business_Attributes AS BA ON B.business_id = BA.business_id JOIN Attributes AS A ON BA.attribute_id = A.attribute_id WHERE A.attribute_name = 'active' AND BA.attribute_value = 'true'  AND B.city = 'Gilbert' ORDER BY B.review_count DESC, B.stars DESC LIMIT 1;
SELECT Business.category_name  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  WHERE Business.city = 'Ahwatukee' AND Business.stars = 5;
SELECT      (COUNT(CASE WHEN business.stars > 3 AND business.active = 'false' THEN business.business_id ELSE NULL END)      / COUNT(CASE WHEN business.active = 'false' THEN business.business_id ELSE NULL END)) * 100 AS percent_wonderful_experience FROM      Business business WHERE      business.city = 'Avondale';
SELECT U.user_id, U.user_yelping_since_year, E.year_id  FROM Users U  JOIN Elite E ON U.user_id = E.user_id  WHERE U.user_yelping_since_year = 2004;
SELECT      (COUNT(CASE WHEN R.review_length = 'Long' AND R.review_stars = 5 THEN R.business_id ELSE NULL END)      / COUNT(DISTINCT R.business_id)) * 100 AS long_reviews_percentage FROM      Reviews R
SELECT      COUNT(*) * 100.0 / (         SELECT COUNT(*)         FROM Users         WHERE user_average_stars >= 4     ) AS percentage FROM Users WHERE user_average_stars >= 4 AND user_fans = 'None'
SELECT COUNT(*)  FROM Tips  JOIN Business_Categories ON Business_Categories.business_id = Tips.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Tips.business_id = 2 AND Categories.category_name = 'Short tips' AND Tips.tip_length = 'Short';
SELECT user_id FROM Users WHERE user_average_stars = 5 AND user_yelping_since_year = (SELECT MIN(user_yelping_since_year) FROM Users);
SELECT B.business_id, B.city, B.state, B.stars, B.review_count, H.opening_time, H.closing_time FROM Business B JOIN Business_Hours H ON B.business_id = H.business_id WHERE B.city = 'Black Canyon City' AND B.review_count > (SELECT AVG(review_count) FROM Business WHERE city = 'Black Canyon City');
SELECT      (COUNT(CASE WHEN u.user_id IN (         SELECT uc.user_id          FROM Users_Compliments uc          WHERE uc.compliment_id = (             SELECT c.compliment_id              FROM Compliments c              WHERE c.compliment_type = 'cute'         ) AND uc.number_of_compliments = 'High'     )) / COUNT(DISTINCT u.user_id)) * 100 AS percent_cute_compliments  FROM Users u;
SELECT COUNT(*)  FROM Business  WHERE business_id NOT IN (SELECT business_id FROM Business_Attributes WHERE attribute_value IN ('none', 'no', 'false'))
SELECT opening_time, closing_time  FROM Business_Hours  WHERE business_id = 1 AND day_id = 2;
SELECT DISTINCT B.city  FROM Business AS B  JOIN Reviews AS R ON B.business_id = R.business_id  WHERE R.review_length = 'Medium';
SELECT Business_Hours.closing_time  FROM Business_Hours  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business_Hours.business_id = 4 AND Days.day_of_week = 'Sunday';
SELECT * FROM Business  JOIN Reviews ON Business.business_id = Reviews.business_id  WHERE Reviews.review_length = 'Short' AND Business.city = 'Phoenix';
SELECT COUNT(*)  FROM Users  WHERE user_fans = 'Medium'  AND number_of_compliments = 'High';
SELECT U.user_id  FROM Users_Compliments UC  JOIN Users U ON UC.user_id = U.user_id  WHERE UC.compliment_id = 'Low' AND U.user_yelping_since_year = 2012;
SELECT COUNT(*)  FROM Business  WHERE business_id IN (     SELECT business_id      FROM Business_Attributes      WHERE attribute_id IN (         SELECT attribute_id          FROM Attributes          WHERE attribute_name = 'None'     ) ) AND city = 'Gilbert';
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Attributes.attribute_name = 'full_bar' AND Business.stars >= (SELECT AVG(stars) FROM Business);
SELECT DISTINCT B.state  FROM Business B  JOIN Business_Hours BH ON B.business_id = BH.business_id  WHERE BH.opening_time = '01:00'
SELECT T2.category_name FROM Business_Categories AS T1 JOIN Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.business_id = 5;
SELECT user_id  FROM Users_Compliments  WHERE compliment_type = 'photos';
SELECT      (COUNT(CASE WHEN T2.tip_length = 'Medium' THEN 1 END) / COUNT(T2.tip_length)) * 100 AS percentage,     T1.user_yelping_since_year FROM      Users AS T1 JOIN      Tips AS T2 ON T1.user_id = T2.user_id WHERE      T2.tip_length = 'Medium' GROUP BY      T1.user_yelping_since_year;
SELECT      (COUNT(business_id) FILTER (WHERE city = 'Mesa') / COUNT(T1.business_id) * 100) AS percentage,     GROUP_CONCAT(DISTINCT attribute_value ORDER BY business_id) AS attribute_values FROM      Business JOIN      Business_Attributes ON Business.business_id = Business_Attributes.business_id WHERE      T1.city = 'Mesa';
SELECT DISTINCT B.state  FROM Business B  JOIN Business_Hours BH ON B.business_id = BH.business_id  WHERE BH.closing_time = '24:00'
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Attributes.attribute_name = 'beer_and_wine' AND Business.city = 'Peoria';
SELECT U.user_id, U.user_yelping_since_year  FROM Users_Compliments UC  JOIN Users U ON UC.user_id = U.user_id  WHERE UC.number_of_compliments = 'High'  ORDER BY U.user_yelping_since_year ASC  LIMIT 1;
SELECT business_id FROM Reviews GROUP BY business_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT y.actual_year  FROM Years y  JOIN Elite e ON y.year_id = e.year_id  GROUP BY y.actual_year  ORDER BY COUNT(DISTINCT e.user_id) DESC  LIMIT 1;
SELECT COUNT(*)  FROM Reviews  WHERE business_id IN (     SELECT business_id      FROM Business      WHERE stars = 5.0 ) AND review_stars = 5.0 AND review_votes_funny = 'uber';
SELECT COUNT(*)  FROM Users  WHERE user_id IN (     SELECT DISTINCT user_id      FROM Reviews      WHERE review_votes_funny = 'uber' )
SELECT business_id FROM Business_Hours WHERE SUBTRACT(closing_time, opening_time) = (     SELECT MIN(SUBTRACT(closing_time, opening_time))     FROM Business_Hours );
SELECT business_id FROM Business_Hours WHERE day_id BETWEEN 1 AND 7 AND opening_time = closing_time;
SELECT      b.business_id,     u.user_id,     t.tip_length,     c.category_name,     COUNT(CASE WHEN t.tip_length > AVG(t.tip_length) THEN 1 END) AS num_likes_longer_than_avg,     COUNT(CASE WHEN t.tip_length <= AVG(t.tip_length) THEN 1 END) AS num_likes_shorter_or_equal_to_avg FROM     Tips t JOIN     Business_Categories bc ON t.business_id = bc.business_id JOIN     Categories c ON bc.category_id = c.category_id JOIN     Business b ON t.business_id = b.business_id JOIN     Users u ON t.user_id = u.user_id WHERE     c.category_name = 'Hotels & Travel' GROUP BY     b.business_id,     u.user_id,     t.tip_length,     c.category_name;
SELECT user_average_stars  FROM Users  WHERE user_id IN (     SELECT DISTINCT u.user_id      FROM Users u      JOIN Reviews r ON u.user_id = r.user_id      WHERE r.review_votes_funny = 'uber' AND r.review_votes_useful = 'uber' AND r.review_votes_cool = 'uber' );
SELECT      (COUNT(CASE WHEN business.stars BETWEEN 3.5 AND 5 THEN business.business_id ELSE NULL END)      OVER ()::float / COUNT(CASE WHEN business.stars BETWEEN 1 AND 2.5 THEN business.business_id ELSE NULL END) OVER ())::float AS star_ratio FROM      Business JOIN      Business_Hours ON business.business_id = Business_Hours.business_id WHERE      Business_Hours.day_id BETWEEN 1 AND 7 AND Business_Hours.opening_time = Business_Hours.closing_time;
SELECT      b.business_id,     COUNT(r.user_id) AS review_count,     bc.category_name FROM     Business AS b JOIN     Business_Categories AS bc ON b.business_id = bc.business_id JOIN     Reviews AS r ON b.business_id = r.business_id GROUP BY     b.business_id,     bc.category_name ORDER BY     review_count DESC,     b.business_id LIMIT 10;  SELECT      DISTINCT bc.category_name  FROM     Business_Categories AS bc ORDER BY      COUNT(bc.category_name) DESC LIMIT 3;
SELECT COUNT(*)  FROM Business  JOIN Users ON Business.user_id = Users.user_id  WHERE Business.state = 'Arizona'  AND AVG(Reviews.review_stars) < 3.0;
SELECT      (COUNT(users.user_id) - COUNT(Elite.user_id)) * 100.0 / COUNT(users.user_id) AS percentage_not_elite FROM      Users;
SELECT U.user_id, C.compliment_type  FROM Users_Compliments UC JOIN Compliments C ON UC.compliment_id = C.compliment_id JOIN Users U ON U.user_id = UC.user_id WHERE U.user_fans = 'uber' GROUP BY C.compliment_type ORDER BY COUNT(UC.compliment_id) DESC LIMIT 1;
SELECT AVG(`user_yelping_since_year`)  FROM `Users`  WHERE `user_fans` = 'uber';
SELECT AVG(year_id)  FROM Elite;
SELECT      COUNT(*) AS total_businesses,     (COUNT(*) FILTER (WHERE active = 'true' AND city = 'Mesa' AND SUBTRACT(Business_Hours.closing_time, Business_Hours.opening_time) > 8)      / COUNT(*) FILTER (WHERE city = 'Mesa' AND SUBTRACT(Business_Hours.closing_time, Business_Hours.opening_time) > 8)) * 100 AS percentage FROM      Business JOIN      Business_Hours ON Business.business_id = Business_Hours.business_id;
SELECT      c.category_name  FROM      Business b  JOIN      Business_Hours bh ON b.business_id = bh.business_id  JOIN      Days d ON bh.day_id = d.day_id  JOIN      Business_Categories bc ON b.business_id = bc.business_id  JOIN      Categories c ON bc.category_id = c.category_id  WHERE      b.active = 'true' AND      bh.opening_time >= '17:00' AND      d.day_of_week LIKE '%Phoenix%'  GROUP BY      c.category_name  ORDER BY      COUNT(b.business_id) DESC  LIMIT 3;
SELECT user_id FROM Reviews JOIN Business_Attributes ON Reviews.business_id = Business_Attributes.business_id JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE Attributes.attribute_name = 'Delivery' GROUP BY user_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AVG(T2.review_count)  FROM Business AS T1  JOIN Reviews AS T2 ON T1.business_id = T2.business_id  WHERE T1.active = 'true' AND (     SELECT SUM(CLOSING_TIME - OPENING_TIME)      FROM Business_Hours AS T3      WHERE T1.business_id = T3.business_id ) < 30;
SELECT COUNT(DISTINCT business_id)  FROM Business_Hours  WHERE opening_time = '8AM' AND closing_time = '6PM';
SELECT B.business_id  FROM Business_Hours B  JOIN Days D ON B.day_id = D.day_id  WHERE B.opening_time = '10AM' AND D.day_of_week = 'Saturday';
SELECT B.business_id, D.day_id  FROM Business H  JOIN Business_Hours BH ON H.business_id = BH.business_id  JOIN Days D ON D.day_id = BH.day_id  WHERE BH.opening_time = '8AM' AND BH.closing_time = '6PM';
SELECT COUNT(DISTINCT business_id)  FROM Reviews  WHERE review_stars > 4;
SELECT bc.category_id, c.category_name  FROM Business_Hours bh  JOIN Business b ON bh.business_id = b.business_id  JOIN Days d ON bh.day_id = d.day_id  JOIN Business_Categories bc ON b.business_id = bc.business_id  JOIN Categories c ON bc.category_id = c.category_id  WHERE d.day_of_week = 1;
SELECT B_H.day_id FROM Business_Hours AS B_H JOIN Business_Categories AS B_C ON B_H.business_id = B_C.business_id JOIN Categories AS C ON B_C.category_id = C.category_id WHERE C.category_name = 'Pets';
SELECT bh.closing_time, dh.day_of_week  FROM Business_Categories bc  JOIN Business b ON bc.business_id = b.business_id  JOIN Business_Hours bh ON b.business_id = bh.business_id  JOIN Days dh ON bh.day_id = dh.day_id  WHERE bc.category_id IN (SELECT category_id FROM Categories WHERE category_name = 'Doctors')
SELECT      b.category_name  FROM      Business_Categories AS bc JOIN      Business_Hours AS bh ON bc.business_id = bh.business_id JOIN      Days AS d ON bh.day_id = d.day_id JOIN      Business AS b ON bc.business_id = b.business_id WHERE      d.day_of_week BETWEEN 2 AND 7 GROUP BY      bc.category_name ORDER BY      COUNT(*) DESC LIMIT 1;
SELECT B.business_id  FROM Business_Hours AS BH  JOIN Business_Categories AS BC ON BH.business_id = BC.business_id  JOIN Categories AS C ON BC.category_id = C.category_id  WHERE C.category_name = 'Arts & Entertainment'  AND BH.day_id = (SELECT day_id FROM Days WHERE day_of_week = 'Sunday')
SELECT COUNT(DISTINCT business_id)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  WHERE Business_Categories.category_id IN (     SELECT category_id FROM Categories WHERE category_name = 'DJs' ) AND Business.stars < 5;
SELECT bh.business_id  FROM Business_Hours bh  JOIN Business b ON bh.business_id = b.business_id  WHERE bh.opening_time = '7AM' AND bh.closing_time = '8PM' AND b.active = 'true';
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Stadiums & Arenas' AND Business.stars = (SELECT MAX(stars) FROM Business);
SELECT COUNT(DISTINCT bc.category_id) FROM Business_Categories AS bc JOIN Business AS b ON bc.business_id = b.business_id WHERE b.stars > 2 AND b.review_count < 5;
SELECT B.business_id  FROM Business_Businesses AS B  JOIN Business_Categories AS BC ON B.business_id = BC.business_id  JOIN Categories AS C ON BC.category_id = C.category_id  WHERE C.category_name = 'Accessories' AND B.opening_time < '7AM'
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Days ON Business.business_id = Business_Hours.business_id AND Business_Hours.day_id = Days.day_id  WHERE Business.state = 'Arizona' AND Business.active = 'true' AND Business_Hours.opening_time > '12PM';
SELECT B.name  FROM Business AS B  JOIN Business_Categories AS BC ON B.business_id = BC.business_id  JOIN Categories AS C ON BC.category_id = C.category_id  WHERE BC.user_id = '16328';
SELECT      COUNT(*) AS total_food_businesses,     SUM(CASE WHEN stars < 2 THEN 1 ELSE 0 END) AS less_than_two_stars,     (SUM(CASE WHEN stars < 2 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_less_than_two_stars FROM     Business JOIN     Business_Categories ON Business.business_id = Business_Categories.business_id JOIN     Categories ON Business_Categories.category_id = Categories.category_id WHERE     Categories.category_name = 'Food'
SELECT      (COUNT(CASE          WHEN b.category_id IN (             SELECT c.category_id              FROM Categories c              WHERE c.category_name = 'Food'         ) AND bh.opening_time BETWEEN '07:00:00' AND '20:00:00'     END) * 100 / COUNT(CASE          WHEN bh.opening_time BETWEEN '07:00:00' AND '20:00:00'     END)) AS percentage FROM      Business_Attributes ba JOIN      Business_Hours bh ON ba.business_id = bh.business_id JOIN      Business_Categories bc ON ba.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id;
SELECT      COUNT(business_id) AS total_running_business,     CASE         WHEN `review_count` = 'High' THEN 'High'         WHEN `review_count` = 'Medium' THEN 'Medium'         WHEN `review_count` = 'Low' THEN 'Low'     ELSE 'Other'     END AS review_count_category FROM      Business WHERE      `city` = 'Cave Creek' AND `active` = 'true' GROUP BY      review_count_category;
SELECT AVG(user_id)  FROM Users  WHERE user_yelping_since_year BETWEEN '2005' AND '2014';
SELECT      (COUNT(CASE WHEN business.active = 'true' AND business.review_count = 'Low' THEN business.business_id END) :: REAL) /      (COUNT(CASE WHEN business.active = 'false' AND business.review_count = 'Low' THEN business.business_id END) :: REAL) AS active_inactive_ratio FROM      Business business;
SELECT user_id FROM Elite WHERE year_id = '2006' LIMIT 5;
SELECT category_id, category_name  FROM Categories  WHERE category_name LIKE 'P%';
SELECT U.user_id, R.review_stars FROM Users U JOIN Reviews R ON U.user_id = R.user_id WHERE R.review_length = 'medium' AND R.business_id = 35;
SELECT Business_Attributes.business_id, Business_Attributes.attribute_value  FROM Business_Attributes JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE Attributes.attribute_name = 'payment_types_visa';
SELECT B.business_id AS ID, B.active AS Active_Status FROM Business_Business AS BB JOIN Business_Categories AS BC ON BB.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id WHERE C.category_name = 'Diagnostic Imaging';
SELECT U.user_id  FROM Users U  JOIN Reviews R ON U.user_id = R.user_id  WHERE R.business_id = 143 AND R.review_stars = 5;
SELECT user_id, user_yelping_since_year  FROM Users_Compliments  JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id  WHERE compliment_type = 'profile' AND number_of_compliments = 'Uber'  LIMIT 5;
SELECT U.user_id, B.business_id  FROM Users U  JOIN Tips T ON U.user_id = T.user_id  WHERE T.likes = (SELECT MAX(likes) FROM Tips)
SELECT U.user_id, COUNT(UC.compliment_id) AS number_of_compliments FROM Users U JOIN Users_Compliments UC ON U.user_id = UC.user_id JOIN Compliments C ON UC.compliment_id = C.compliment_id WHERE U.user_id IN (SELECT user_id FROM Elite WHERE year_id BETWEEN 2005 AND 2014) AND C=compliment_type='photos';
SELECT      (COUNT(CASE          WHEN Bh.opening_time = '9AM' AND Bh.closing_time = '9PM' AND Db.day_of_week = 'Sunday' THEN 1     END)      / COUNT(CASE          WHEN Db.day_of_week = 'Sunday' THEN 1     END)) * 100 AS percentage FROM      Business_Hours Bh  JOIN      Days Db ON Bh.day_id = Db.day_id;
SELECT B.business_id, D.day_of_week  FROM Business AS B  JOIN Business_Hours AS BH ON B.business_id = BH.business_id  JOIN Days AS D ON BH.day_id = D.day_id  WHERE B.city = 'Black Canyon City' AND B.active = 'true';
SELECT user_id, review_length  FROM Users  WHERE user_yelping_since_year = 2004 AND user_average_stars = 5;
SELECT B.business_id, B.active, B.city  FROM Business AS B JOIN Reviews AS R ON B.business_id = R.business_id WHERE (R.stars > 4) AND (DIVIDE(SUM(R.stars > 4), COUNT(R.business_id)) = 0.65)
SELECT      SUM(CASE          WHEN B.city = 'Glendale' AND B.active = 'true' THEN 1          ELSE 0      END) -      SUM(CASE          WHEN B.city = 'Mesa' AND B.active = 'true' THEN 1          ELSE 0      END) AS difference_in_running_businesses FROM Business B;
SELECT COUNT(T2.likes)  FROM Users AS T1  JOIN Tips AS T2 ON T1.user_id = T2.user_id  WHERE T1.user_yelping_since_year = 2010 AND T2.tip_length = 'Short';
SELECT      tip_length FROM      Users  JOIN      Reviews ON Users.user_id = Reviews.user_id WHERE      Users.user_average_stars = 3 GROUP BY      tip_length ORDER BY      COUNT(Reviews.user_id) DESC LIMIT 1;
SELECT SUM(T2.likes)  FROM Reviews AS T1  JOIN Tips AS T2 ON T1.business_id = T2.business_id  WHERE T1.review_length = 'Short' AND T1.business_id IN (     SELECT T3.business_id      FROM Business AS T3      WHERE T3.city = 'Goodyear' )
SELECT DISTINCT B.state  FROM Business AS B  JOIN Reviews AS R ON B.business_id = R.business_id  WHERE R.review_length = 'Long';
SELECT      AVG(DATE_DIFF(`closing_time`, `opening_time`, MINUTE)) AS avg_operating_time_per_day  FROM      `Business_Hours`  JOIN      `Business` ON `Business.business_id` = `Business_Hours.business_id`  WHERE      `Business.city` = 'El Mirage' AND `Business.state` = 'AZ';
SELECT Business_Hours.closing_time  FROM Business  JOIN Business_Hours ON Business.business_id = Business_Hours.business_id  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business.state = 'SC';
SELECT bc.category_name  FROM Business_Categories AS bc  JOIN Business AS b ON bc.business_id = b.business_id  WHERE b.stars = 5;
SELECT DISTINCT B.state  FROM Business AS B  JOIN Business_Attributes AS BA ON B.business_id = BA.business_id  WHERE BA.attribute_value = 'beer_and_wine';
SELECT COUNT(*)  FROM Users_Compliments  JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id  WHERE Compliments.compliment_type = 'photo' AND Users_Compliments.number_of_compliments = 'Medium';
SELECT B.business_id  FROM Business_Attributes BA  JOIN Business B ON BA.business_id = B.business_id  JOIN Attributes A ON BA.attribute_id = A.attribute_id  WHERE A.attribute_name = 'Wi-Fi' AND A.attribute_value = 'true' AND B.state = 'SC';
SELECT COUNT(*)  FROM Business_Attributes  WHERE attribute_id IN (     SELECT attribute_id      FROM Attributes      WHERE attribute_name = 'ambience_romantic' AND attribute_value = 'true' ) AND business_id IN (     SELECT business_id      FROM Business      WHERE active = 1 );
SELECT      (COUNT(CASE WHEN attribute_name = 'Good for Kids' AND attribute_value = 'true' THEN 1 END)      / NULLIF(COUNT(business_id), 0)) * 100 AS percentage FROM      Business_Attributes WHERE      attribute_name = 'Good for Kids';
SELECT COUNT(*)  FROM Business  WHERE city = 'Mesa' AND active = 'true';
SELECT COUNT(DISTINCT business_id)  FROM Reviews  WHERE review_stars IN (2, 1);
SELECT B.business_id  FROM Business AS B  JOIN Business_Categories AS BC ON B.business_id = BC.business_id  WHERE BC.category_id IN (SELECT category_id FROM Categories WHERE category_name = 'Paradise Valley')  AND B.city = 'Paradise Valley'  AND B.review_count = 'Low'  AND B.stars > 3;
SELECT COUNT(*)  FROM Business_Attributes  WHERE attribute_value > 1;
SELECT COUNT(*)  FROM Business_Hours  WHERE (closing_time - opening_time) = (     SELECT MIN(TIMESTAMPDIFF(HOUR, opening_time, closing_time))      FROM Business_Hours      WHERE day_id BETWEEN 1 AND 7 )
SELECT COUNT(*)  FROM Reviews  WHERE business_id IN (     SELECT business_id      FROM Business      WHERE active = 'true' )  AND review_votes_funny = 'Uber';
SELECT COUNT(*)  FROM Users  WHERE `user_fans` = 'None' AND `number_of_compliments` = 'High';
SELECT compliment_type FROM Users_Compliments GROUP BY compliment_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT U.user_id, U.user_average_stars  FROM Users AS U JOIN Tips AS T ON U.user_id = T.user_id WHERE T.likes = (SELECT MAX(likes) FROM Tips) LIMIT 3;
SELECT bc.category_id, c.category_name  FROM Business_Categories AS bc JOIN Business AS b ON bc.business_id = b.business_id JOIN Categories AS c ON bc.category_id = c.category_id WHERE b.city = 'Arcadia' AND COUNT(*) = 1;
SELECT B.business_id  FROM Business_Hours BH  JOIN Days D ON BH.day_id = D.day_id  WHERE D.day_of_week = 'Sunday' AND BH.opening_time IS NOT NULL;
SELECT COUNT(*)  FROM Business_Attributes  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  JOIN Business ON Business_Attributes.business_id = Business.business_id  WHERE Attributes.attribute_name = 'music_karaoke' AND Attributes.attribute_value = 'true' AND Business.active = 'false';
SELECT COUNT(*)  FROM Business  WHERE city = 'Phoenix' AND active = 'true' AND LENGTH(reviews.review_text) > 20;
SELECT COUNT(DISTINCT u.user_id) FROM Users u JOIN Reviews r ON u.user_id = r.user_id WHERE u.user_votes_cool = 'Low' AND r.review_votes_cool = 'Low';
SELECT COUNT(*)  FROM Tips t  JOIN Users u ON t.user_id = u.user_id  WHERE t.tip_length = 'Long' AND t.likes = 2 AND u.user_fans = 'High';
SELECT COUNT(DISTINCT business_id)  FROM Business_Attributes  WHERE attribute_name = 'ambience_trendy'  AND attribute_value = 'false';
SELECT COUNT(*)  FROM Business  JOIN Business_Hours ON Business.business_id = Business_Hours.business_id  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business.city = 'Scottsdale'  AND Days.day_of_week = 'Sunday'  AND Business_Hours.opening_time = '12PM';
SELECT AVG(Business.stars)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  WHERE Business_Categories.category_id IN (     SELECT category_id FROM Categories WHERE category_name = 'Obstetricians & Gynecologists' );
SELECT      (COUNT(CASE WHEN u.user_fans = 'High' THEN u.user_id END)       OVER ()      / COUNT(CASE WHEN e.actual_year = 2011 THEN e.user_id END) OVER ()) * 100 AS percentage FROM      Users u JOIN      Elite e ON u.user_id = e.user_id WHERE      e.actual_year = 2011;
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'city' AND Business.city = 'Surprise';
SELECT business_id FROM Business WHERE city = 'Tempe' AND stars > 3;
SELECT COUNT(*)  FROM Business  WHERE state = 'AZ' AND active = 'true' AND review_count = 'Medium';
SELECT business_id FROM Business WHERE stars BETWEEN 3 AND 5 AND city = 'Chandler';
SELECT COUNT(*)  FROM Users  WHERE user_yelping_since_year BETWEEN 2009 AND 2011  AND user_fans = 'Low';
SELECT review_length  FROM Reviews  WHERE business_id = 3 AND user_id = 11021;
SELECT B.business_id, A.attribute_name  FROM Business_Attributes BA  JOIN Attributes A ON BA.attribute_id = A.attribute_id  JOIN Business B ON BA.business_id = B.business_id  JOIN Cities C ON B.city_id = C.city_id  WHERE C.city_name = 'Tempe' AND B.review_count = 'Medium'
SELECT COUNT(*)  FROM Business  JOIN Business_Categories ON Business.business_id = Business_Categories.business_id  JOIN Categories ON Business_Categories.category_id = Categories.category_id  WHERE Categories.category_name = 'Food' AND Business.stars < 3;
SELECT B.business_id, B.stars  FROM Business AS B JOIN Business_Categories AS BC ON B.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id WHERE B.active = 'true' AND C.category_name = 'Food';
SELECT      b.category_id,     c.category_name,     COUNT(DISTINCT ba.attribute_id) AS num_attributes,     AVG(b.stars) AS avg_star_rating FROM      Business_Categories bc JOIN      Business b ON bc.business_id = b.business_id JOIN      Categories c ON bc.category_id = c.category_id JOIN      Business_Attributes ba ON b.business_id = ba.business_id GROUP BY      bc.business_id, c.category_name HAVING      AVG(b.stars) = (SELECT MAX(stars) FROM Business)
SELECT bc.category_name  FROM Business_Categories AS bc  JOIN Reviews AS r ON bc.business_id = r.business_id  WHERE r.review_length = 'Short' AND bc.business_id BETWEEN 7 AND 14  ORDER BY r.stars DESC  LIMIT 1;
SELECT COUNT(*)  FROM Business  JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id  JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id  WHERE Business.active = 'true'  AND Attributes.attribute_name = 'BYOB'  AND Business.review_count = 'High';
SELECT      b.business_id,      bh.opening_time,      bh.closing_time  FROM      Business b      JOIN Business_Categories bc ON b.business_id = bc.business_id      JOIN Categories c ON bc.category_id = c.category_id      JOIN Business_Hours bh ON b.business_id = bh.business_id  WHERE      c.category_name = 'Glendale' AND      b.stars = (SELECT MAX(stars) FROM Business WHERE city = 'Glendale')
SELECT      b.category_id,      c.category_name,      ba.attribute_name FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id JOIN      Business_Attributes ba ON b.business_id = ba.business_id WHERE      b.active = 'true' AND      b.city = 'Goodyear' AND      b.state = 'AZ' AND      b.review_count = 'High';
SELECT bc.category_id, c.category_name  FROM Business_Attributes ba  JOIN Business b ON ba.business_id = b.business_id  JOIN Business_Categories bc ON bc.business_id = b.business_id  JOIN Categories c ON c.category_id = bc.category_id  WHERE b.active = 'true' AND b.city = 'Glendale' AND b.state = 'AZ';
SELECT B.city FROM Business_Hours AS BH JOIN Business AS B ON B.business_id = BH.business_id JOIN Days AS D ON D.day_id = BH.day_id WHERE D.day_of_week = 'Wednesday' AND BH.opening_time = '7AM' AND BH.closing_time = '7PM';
SELECT attribute_value FROM Business_Attributes ba JOIN Business b ON ba.business_id = b.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.active = 'true' AND b.review_count = 'Low' AND b.stars = 3 AND b.city = 'Goodyear' AND b.state = 'AZ';
SELECT B.business_id, BH.opening_time FROM Business B JOIN Business_Hours BH ON B.business_id = BH.business_id JOIN Business_Categories BC ON B.business_id = BC.business_id WHERE B.active = 'true' AND B.city = 'Glendale' AND B.review_count = 'Medium';
SELECT      (COUNT(CASE WHEN business.business_id THEN business.business_id END) FILTER (WHERE business_categories.category_name = 'Food' AND business.stars > 3)) * 100.0 / COUNT(business.business_id) FROM      Business b JOIN      Business_Categories bc ON b.business_id = bc.business_id JOIN      Categories c ON bc.category_id = c.category_id WHERE      c.category_name = 'Food';
SELECT Business_Hours.closing_time, Days.day_of_week  FROM Business_Hours  JOIN Business ON Business.business_id = Business_Hours.business_id  JOIN Days ON Business_Hours.day_id = Days.day_id  WHERE Business.active = 'true'  AND Business.city = 'Goodyear'  AND Business.stars > (SELECT AVG(Business.stars) * 0.8 FROM Business);
SELECT      (COUNT(p1.paper_id) * 100.0 / COUNT(c.paper_id)) AS percentage  FROM      cites c  JOIN      paper p1 ON c.cited_paper_id = p1.paper_id  WHERE      p1.class_label = 'Agents';
SELECT T1.word_cited_id, COUNT(T1.word_cited_id) AS citation_count  FROM content AS T1  JOIN cites AS T2 ON T1.paper_id = T2.cited_paper_id  GROUP BY T1.word_cited_id  ORDER BY citation_count DESC  LIMIT 1;
SELECT COUNT(*)  FROM paper p  JOIN content c ON p.paper_id = c.paper_id  WHERE p.class_label = 'AI';
SELECT cites.citing_paper_id, paper.class_label  FROM cites JOIN content ON cites.word_cited_id = content.word_cited_id AND cites.cited_paper_id = 315017 JOIN paper ON cites.citing_paper_id = paper.paper_id;
SELECT content.word_cited_id  FROM content  JOIN paper ON content.paper_id = paper.paper_id  WHERE paper.class_label = 'DB'  GROUP BY content.word_cited_id  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT      (COUNT(c.content_id) * 100.0 / (SELECT COUNT(*) FROM content WHERE paper_id IN (SELECT paper_id FROM paper WHERE class_label = 'Agents'))) AS agents_word_percentage FROM      content c
SELECT p.paper_id, cl.class_label  FROM paper p  JOIN cites c ON p.paper_id = c.cited_paper_id  JOIN content co ON p.paper_id = co.paper_id  WHERE co.word_cited_id = (SELECT MAX(word_cited_id) FROM content)  GROUP BY p.paper_id, cl.class_label  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT p.paper_id, p.class_label  FROM paper p  JOIN cites c ON p.paper_id = c.cited_paper_id  JOIN content co ON p.paper_id = co.paper_id  WHERE co.word_cited_id = 'word1002';
SELECT DISTINCT content.word_cited_id  FROM content  JOIN paper ON content.paper_id = paper.paper_id  WHERE paper.class_label = 'AI';
SELECT      p.class_label,     COUNT(c.word_cited_id) as cited_words_count FROM      paper p JOIN      cites c ON p.paper_id = c.cited_paper_id WHERE      p.paper_id = 'chakrabarti01integrating' GROUP BY      p.class_label;
SELECT p.paper_id, p.class_label  FROM paper p  JOIN (     SELECT cited_paper_id      FROM cites      GROUP BY cited_paper_id      HAVING COUNT(*) > 20 ) AS cited ON p.paper_id = cited.cited_paper_id;
SELECT DISTINCT c.word_cited_id  FROM content c  JOIN paper p1 ON c.paper_id = p1.paper_id  JOIN paper p2 ON c纸ier_paper_id = p2.paper_id  WHERE p1.class_label = 'AI' AND p2.class_label = 'IR'
SELECT      (SELECT `citing_paper_id`, COUNT(*) AS max_citations      FROM `cites`      GROUP BY `cited_paper_id`      ORDER BY max_citations DESC      LIMIT 1) AS most_cited_paper,     (SELECT `citing_paper_id`, COUNT(*) AS min_citations      FROM `cites`      GROUP BY `cited_paper_id`      ORDER BY min_citations ASC      LIMIT 1) AS least_cited_paper,     (SELECT COUNT(*) FROM `cites` WHERE cited_paper_id = (SELECT `cited_paper_id` FROM (SELECT `cited_paper_id`, MAX(`count_column`) AS `max_citations`      FROM (SELECT `cited_paper_id`, COUNT(*) AS `count_column`      FROM `cites`      GROUP BY `cited_paper_id`) t2      GROUP BY `cited_paper_id`) t1)) AS most_cited_count,     (SELECT COUNT(*) FROM `cites` WHERE cited_paper_id = (SELECT `cited_paper_id` FROM (SELECT `cited_paper_id`, MIN(`count_column`) AS `min_citations`      FROM (SELECT `cited_paper_id`, COUNT(*) AS `count_column`      FROM `cites`      GROUP BY `cited_paper_id`) t2      GROUP BY `cited_paper_id`) t1)) AS least_cited_count
SELECT      AVG(1.0 * COUNT(p.paper_id)) AS avg_ml_papers FROM      paper p  WHERE      p.class_label = 'ML';
SELECT DISTINCT content.word_cited_id  FROM content  JOIN paper ON content.paper_id = paper.paper_id  JOIN cites ON paper.paper_id = cites.citing_paper_id  WHERE cites.cited_paper_id IN (     SELECT cited_paper_id      FROM cites      WHERE citing_paper_id = 'sima01computational' );
SELECT COUNT(*)  FROM cites  JOIN paper ON cites.citing_paper_id = paper.paper_id   WHERE paper.class_label = 'schmidt99advanced' AND EXISTS (     SELECT 1 FROM content WHERE content.paper_id = cites.cited_paper_id AND content.word_cited_id = 3555 );
SELECT p.class_label  FROM paper p  JOIN cites c ON p.paper_id = c.cited_paper_id  JOIN content co ON p.paper_id = co.paper_id  WHERE co.word_cited_id = 'word1163';
SELECT p.papers_id, COUNT(*) as word_count  FROM paper AS p  JOIN content AS c ON p.papers_id = c.paper_id   WHERE p.class_label = 'DB'  GROUP BY p.papers_id  ORDER BY word_count DESC  LIMIT 1;
SELECT COUNT(*)  FROM cites  JOIN paper ON cites.citing_paper_id = paper.paper_id  WHERE paper.class_label = 'ML' AND cites.cited_paper_id IN (     SELECT paper_id      FROM content      WHERE word_cited_id = 'butz01algorithmic' );
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person WHERE p.birthdate = (SELECT MIN(birthdate) FROM Person) AND c.season >= 20;
SELECT `nickname`  FROM `Person` WHERE `name` = 'Dan Castellaneta';
SELECT COUNT(*)  FROM Person  WHERE birth_region = 'New York' AND ('%Y', birthdate) > 1970 AND name LIKE '%Crew Member%';
SELECT T3.birth_country  FROM Award AS T1  JOIN Person AS T3 ON T1.person = T3.name  WHERE T1.award = 'Outstanding Voice-Over Performance' AND T1.year = 2009 AND T1.result = 'Winner';
SELECT DISTINCT A.award  FROM Award A  JOIN Person P ON A.person = P.name  JOIN Credit C ON A.episode_id = C.episode_id  WHERE P.nickname = 'Doofus' AND C.category LIKE '%Crew%' AND A.result = 'Winner';
SELECT COUNT(*)  FROM Person  WHERE birth_country = 'USA'  AND EXISTS (     SELECT 1      FROM Award a      WHERE a.person = Person.name      AND a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'      AND a.result = 'Nominee'      AND a.year = 2009 )
SELECT c.character  FROM Award a  JOIN Character_Award ca ON a.award_id = ca.award_id  JOIN Episode e ON a.episode_id = e.episode_id  WHERE a.year = 2009 AND a.award = 'Outstanding Voice-Over Performance' AND a.result = 'Winner';
SELECT T1.keyword  FROM Keyword AS T1  JOIN Episode AS T2 ON T1.episode_id = T2.episode_id  WHERE T2.title = 'Lost Verizon';
SELECT COUNT(T2.keyword)  FROM Episode AS T1  JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id  WHERE T1.air_date = '2008-10-19';
SELECT Episode.rating FROM Episode JOIN Award ON Episode.episode_id = Award.episode_id WHERE Award.person = 'Dan Castellaneta' AND Award.year = 2009 AND Award.result = 'Winner';
SELECT COUNT(*)  FROM Vote  WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'Lost Verizon')  AND stars = 7;
SELECT MAX(Vote.votes) AS max_votes, stars  FROM Vote  WHERE Vote.episode_id = (SELECT episode_id FROM Episode WHERE title = 'Lost Verizon')  GROUP BY stars  ORDER BY max_votes DESC  LIMIT 1;
SELECT Episode.title FROM Episode JOIN Vote ON Episode.episode_id = Vote.episode_id WHERE Vote.votes > 200 AND Vote.stars = 10;
SELECT COUNT(*)  FROM Episode  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE DATE_FORMAT(air_date, '%Y') = '2009' AND stars = 10 AND (Votes.percent / COALESCE(SUM(votes), 0)) > 15;
SELECT e.title  FROM Episode e  JOIN Vote v ON e.episode_id = v.episode_id  WHERE v.stars = 7  GROUP BY e.episode_id  ORDER BY COUNT(v.votes) DESC  LIMIT 1;
SELECT      SUM(T2.stars * T1.votes) / SUM(T1.votes) AS average_stars  FROM      Episode AS T1  JOIN      Vote AS T2 ON T1.episode_id = T2.episode_id  WHERE      T1.title = 'Lost Verizon';
SELECT      (COUNT(CASE          WHEN A.award_category = 'Primetime Emmy'          THEN A.episode_id          END) / COUNT(T.episode_id)) * 100 AS percentage FROM      Award A JOIN      Episode T ON A.episode_id = T.episode_id WHERE      T.rating > 7;
SELECT title  FROM Episode  JOIN Credit ON Episode.episode_id = Credit.episode_id  WHERE Credit.person = 'Pamela Hayden' AND Credit.role = 'Ruthie';
SELECT      c.episode_id,     e.season,     e.episode,     e.number_in_series,     c.role FROM      Credit c JOIN      Episode e ON c.episode_id = e.episode_id JOIN      Person p ON c.person = p.name WHERE      p.name = 'Matt Groening' AND e.title = 'In the Name of the Grandfather';
SELECT title, summary  FROM Episode  JOIN Keyword ON Episode.episode_id = Keyword.episode_id  WHERE Keyword.keyword = 'eviction';
SELECT AVG(V.stars)  FROM Vote V  JOIN Episode E ON V.episode_id = E.episode_id  WHERE E.title = 'Wedding for Disaster';
SELECT title, keyword  FROM Episode  JOIN Keyword ON Episode.episode_id = Keyword.episode_id  WHERE air_date = '2009-03-22';
SELECT `birth_name`  FROM Person  JOIN Credit ON Person.name = Credit.person  WHERE Credit.role = 'Helen Lovejoy';
SELECT      e.title,     GROUP_CONCAT(CONCAT(p.name, ' as ', c.role) SEPARATOR ', ') AS uncredited_actors FROM      Episode e JOIN      Award a ON e.episode_id = a.episode_id AND a.year = 2017 AND a.award_category = 'Jupiter Award' AND a.award = 'Best International TV Series' AND a.result = 'Winner' JOIN      Credit c ON e.episode_id = c.episode_id JOIN      Person p ON c.person = p.name WHERE      c.credited = '' GROUP BY      e.episode_id;
SELECT COUNT(*)  FROM Episode  WHERE votes > 1000;
SELECT COUNT(*)  FROM Person  WHERE birth_place = 'New York' AND birth_country = 'USA';
SELECT      A.award,     A.award_category FROM      Award AS A JOIN      Credit AS C ON A.award_id = C.episode_id JOIN      Person AS P ON C.person = P.name WHERE      P.name = 'Marc Wilmore' AND      C.role = 'nominated' ;
SELECT p.name, p.nickname  FROM Person p  WHERE p.nickname IS NOT NULL;
SELECT      name,     AVG(height_meters) AS average_height FROM      Person GROUP BY      name;
SELECT      MAX(e.votes) - MIN(e.votes) AS vote_difference FROM      Episode e;
SELECT Character.name FROM Award JOIN Character_Award ON Award.award_id = Character_Award.award_id JOIN Episode ON Award.episode_id = Episode.episode_id JOIN Character ON Character_Award.character = Character.character_id WHERE Award.year = 2009 AND Award.award = 'Outstanding Voice-Over Performance';
SELECT COUNT(*)  FROM Person  JOIN Award ON Person.person = Award.person  WHERE Award.result = 'Nominee' AND Award.year = 2009 AND Person.birth_place = 'California';
SELECT Episode.title  FROM Episode  JOIN Award ON Episode.episode_id = Award.episode_id  WHERE Award.award = 'Best International TV Series' AND Award.year = 2017 AND Award.result = 'Winner';
SELECT p.name FROM Person p JOIN Credit c ON p.person = c.person WHERE c.episode_id = (SELECT episode_id FROM Episode WHERE title = 'How the Test Was Won')  AND c.credited = ' ';
SELECT title  FROM Episode  JOIN Keyword ON Episode.episode_id = Keyword.episode_id  WHERE Keyword.keyword = 'riot'  AND Keyword.keyword = 'cake';
SELECT e.episode_id FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 10 GROUP BY e.episode_id ORDER BY COUNT(v.votes) DESC LIMIT 1;
SELECT DISTINCT p.name  FROM Person p  JOIN Credit c ON p.name = c.person  WHERE c.episode_id IN (     SELECT e.episode_id      FROM Episode e      WHERE strftime('%m', e.air_date) BETWEEN '10' AND '11'      AND e.season = '20s' )
SELECT T3.name  FROM Episode AS T1  JOIN Credit AS T2 ON T1.episode_id = T2.episode_id  JOIN Person AS T3 ON T2.person = T3.person_id  WHERE T1.title = 'Treehouse of Horror XIX' AND T2.role = 'director';
SELECT COUNT(*)  FROM Credit  WHERE episode_id = (SELECT episode_id FROM Episode WHERE season = 20 AND episode = 5)
SELECT K.keyword  FROM Keyword K  JOIN Episode E ON K.episode_id = E.episode_id  WHERE E.title = 'Take My Life,Please'
SELECT      COUNT(*) AS EpisodeCount,     (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE e.votes > 950 AND a.result = 'Nominee')) AS Percentage FROM      Episode e  JOIN      Award a ON e.episode_id = a.episode_id  WHERE      e.votes > 950  AND      a.award = 'Outstanding Voice-Over Performance Award'  AND      a.year = 2009;
SELECT      (votes WHERE title = 'No Loan Again, Naturally') AS no_loan_votes,     (votes WHERE title = 'Coming to Homerica') AS coming_homerica_votes,     (votes WHERE title = 'No Loan Again, Naturally') / (votes WHERE title = 'Coming to Homerica') AS ratio FROM     Episode;
SELECT COUNT(*)  FROM Award  JOIN Person ON Award.person = Person.name  WHERE Person.name = 'Ian Maxtone-Graham'  AND Award.result = 'Nominee'  AND Award.organization = 'Writers Guild of America, USA';
SELECT p.name FROM Person p JOIN Award a ON p.person_id = a.person WHERE a.result = 'Nominee' GROUP BY p.person_id ORDER BY COUNT(a.award_id) DESC LIMIT 1;
SELECT title  FROM Episode  WHERE rating = (SELECT MIN(rating) FROM Episode);
SELECT A.year FROM Award A JOIN Character_Award CA ON A.award_id = CA.award_id WHERE A.award_category = 'People\'s Choice Award' AND A.award = 'Favorite Animated Comedy' AND A.result = 'Winner' ORDER BY A.year LIMIT 1;
SELECT COUNT(*)  FROM Episode e  JOIN Credit c ON e.episode_id = c.episode_id  WHERE NOT EXISTS (SELECT 1 FROM Person p WHERE p.name = 'Dell Hake' AND c.person = p.name AND c.credited = 'true')
SELECT      T1.birthdate,     (T3.year - SUBSTR(T1.birthdate, 1, 4)) AS age_when_awarded,     T3.organization,     T3.award,     T3.result FROM      Person AS T1 JOIN      Award AS T3 ON T1.name = T3.person AND T3.award = 'Outstanding Voice-Over Performance' AND T3.organization = 'Primetime Emmy Awards' AND T3.result = 'Winner' WHERE      T3.year = (SELECT MIN(year) FROM Award WHERE award = 'Outstanding Voice-Over Performance' AND organization = 'Primetime Emmy Awards')
SELECT Character_Award.character FROM Award JOIN Character_Award ON Award.award_id = Character_Award.award_id JOIN Person ON Award.person = Person.name WHERE Award.result = 'Winner' AND Award.organization = 'Primetime Emmy Awards' AND Award.year = 2009 AND Person.name = 'Dan Castellaneta';
SELECT COUNT(*)  FROM Episode  WHERE SUBSTR(air_date, 6, 2) = '04'  AND SUBSTR(air_date, 1, 4) = '2009'  AND EXISTS (     SELECT 1      FROM Award      WHERE Episode.episode_id = Award.episode_id      AND result = 'Winner' );
SELECT `birth_place`  FROM Person  JOIN Award ON Person.person = Award.person  WHERE Award.award = 'Best Voice-Over Performance' AND Award.organization = 'Online Film & Television Association' AND Award.result = 'Winner' AND Award.year = 2009;
SELECT      T1.episode_id,      T1.rating,      SUM(T2.votes) AS total_votes FROM      Episode AS T1 JOIN      Vote AS T2 ON T1.episode_id = T2.episode_id WHERE      T2.stars = 10 GROUP BY      T1.episode_id, T1.rating ORDER BY      total_votes DESC, T1.rating DESC LIMIT 4;
SELECT SUM(T2.stars)  FROM Episode AS T1  JOIN Vote AS T2 ON T1.episode_id = T2.episode_id  WHERE T1.title = 'No Loan Again, Naturally' AND T2.stars < 50;
SELECT COUNT(DISTINCT A.person)  FROM Award AS A JOIN Person AS P ON A.person = P.name WHERE A.result = 'Winner' AND P.birth_country = 'USA';
SELECT COUNT(*)  FROM Credit  JOIN Person ON Credit.person = Person.name  WHERE Credit.episode_id = 'S20-E11' AND Person.birth_name = 'Doofus' AND Credit.credited = 'true';
SELECT p.name FROM Person p JOIN Award a ON p.person_id = a.person WHERE a.result = 'Winner' ORDER BY a.year ASC LIMIT 1;
SELECT Vote.percent FROM Episode JOIN Vote ON Episode.episode_id = Vote.episode_id WHERE Episode.title = 'Sex, Pies and Idiot Scrapes' AND Vote.stars = 9;
SELECT      A.award  FROM      Award A  JOIN      Person P ON A.person = P.name  WHERE      A.year = 2009 AND A.result = 'Winner';
SELECT name, birthdate  FROM Person  WHERE birth_place = 'Los Angeles' AND height_meters >= 1.8;
SELECT episode_number, title, rating  FROM Episode  WHERE SUBSTR(air_date, 6, 2) = '10' AND SUBSTR(air_date, 0, 4) = '2008';
SELECT      A.award_id,     A.award AS award_name,     C.person AS winner FROM      Award AS A JOIN      Character_Award AS CA ON A.award_id = CA.award_id JOIN      Credit AS C ON A.person = C.person JOIN      Person AS P ON C.person = P.name WHERE      CA.character = 'Homer simpson 20' AND      A.result = 'Winner';
SELECT      A.award      , A.result      , C.category      , C.credited FROM      Award AS A JOIN      Character_Award AS CA ON A.award_id = CA.award_id JOIN      Credit AS C ON A.episode_id = C.episode_id WHERE      CA.character = 'Billy Kimball'     AND C.person = 'Billy Kimball'     AND C.credited = 'true';
SELECT      p.name,     a.award,     a.organization,     a.result,     c.credited FROM      Person p JOIN      Credit c ON p.name = c.person JOIN      Episode e ON c.episode_id = e.episode_id JOIN      Award a ON e.episode_id = a.episode_id WHERE      e.season = 20 AND e.episode = 13 AND c.role = 'assistant director' AND c.credited = 'true';
SELECT      birth_country,      height_meters,      name FROM      Person  WHERE      birth_country IS NOT NULL AND height_meters IS NOT NULL AND name IS NOT NULL AND credited = '' AND category = 'Casting Department';
SELECT      A.person AS nominee,     B.keyword,     E.episode_id FROM      Episode E JOIN      Award A ON E.episode_id = A.episode_id JOIN      Keyword B ON E.episode_id = B.episode_id WHERE      E.title = 'The Good, the Sad and the Drugly' AND      A.result = 'Nominee';
SELECT Vote.votes AS VotingNumbers, (Vote.votes / COUNT(*) OVER() * 100) AS Percentage  FROM Vote  JOIN Keyword ON Vote.episode_id = Keyword.episode_id  WHERE Keyword.keyword = 'arab stereotype' AND Vote.stars = 10;
SELECT      A.award,     E.air_date,     E.rating FROM      Episode E JOIN      Award A ON E.episode_id = A.episode_id WHERE      A.organization = 'Jupiter Award' AND A.result = 'Winner';
SELECT e.episode_id, e.title, kw1.keyword, kw2.keyword, kw3.keyword  FROM Episode e  JOIN Keyword k ON e.episode_id = k.episode_id  JOIN Vote v ON e.episode_id = v.episode_id AND v.stars = 1  WHERE v.votes = (SELECT MAX(votes) FROM Vote WHERE stars = 1)  ORDER BY e.episode_id  LIMIT 1;
SELECT      Episode.title,      Episode.episode_image,      Award.award,      Person.name FROM      Episode JOIN      Award ON Episode.episode_id = Award.episode_id JOIN      Person ON Award.person = Person.person_id WHERE      Episode.rating BETWEEN 7 AND 10 AND      SUBSTRING_INDEX(Award.air_date, '/', 3) = '2008' AND      Award.result = 'Nominee';
SELECT      A.award,     P.name AS person,     CA.character AS character_name FROM      Award A JOIN      Person P ON A.person = P.name JOIN      Character_Award CA ON A.award_id = CA.award_id WHERE      A.award_id = 326;
SELECT      p.name,      p.birth_country,      c.role,      2022 - STR_TO_DATE(SUBSTRING_INDEX(p.birthdate, '-', 1), '%Y') AS age_in_2022 FROM      Person p     JOIN Credit c ON p.name = c.person WHERE      p.birthdate = (SELECT MIN(birthdate) FROM Person) ORDER BY      c.credited DESC LIMIT 1;
SELECT COUNT(c.credited), c.category, c.role, p.birth_place  FROM Credit AS c  JOIN Person AS p ON c.person = p.name  WHERE p.birth_country = 'North Korea'  GROUP BY c.category, c.role, p.birth_place;
SELECT      A.person AS 'Winner Name',     B.award AS 'Award Name',     E.title AS 'Episode Title',     C.role AS 'Role in Episode' FROM      Award A JOIN      Person B ON A.person = B.name JOIN      Episode E ON A.episode_id = E.episode_id JOIN      Credit C ON E.episode_id = C.episode_id WHERE      A.year = 2010 AND      A.result = 'winner' GROUP BY      A.person, B.award, E.title, C.role;
SELECT e.title FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = (SELECT MAX(stars) FROM Vote) AND v.votes = (SELECT MAX(votes) FROM Vote);
SELECT COUNT(*)  FROM Award  WHERE organization = 'The simpson 20s' AND year = 2010 AND result = 'Winner';
SELECT title  FROM Episode  JOIN Award ON Episode.episode_id = Award.episode_id  WHERE Award.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'  AND Award.organization = 'Primetime Emmy Awards'  AND Award.result = 'Nominee'  AND COUNT(Award.episode_id) = 21;
SELECT AVG(Vote.stars) AS Average_Stars, Episode.summary  FROM Vote  JOIN Episode ON Vote.episode_id = Episode.episode_id  WHERE Episode.title = 'The simpson 20s: S20-E12';
SELECT p.name  FROM Person p  JOIN Award a ON p.person_id = a.person  JOIN Character_Award ca ON a.award_id = ca.award_id  WHERE a.organization = 'Primetime Emmy Awards'  AND a.award = 'Outstanding Voice-Over Performance'  AND a.result = 'Winner'  AND ca.character = 'Homer Simpson 20';
SELECT p.birth_name, c.role  FROM Person p  JOIN Credit c ON p.name = 'Al Jean'  WHERE c.episode_id IN (SELECT e.episode_id FROM Episode e WHERE e.title LIKE '%Simpsons 20s: Season 20%')
SELECT COUNT(*)  FROM Award  JOIN Character_Award ON Award.award_id = Character_Award.award_id  WHERE Award.year = 2010 AND Character_Award.character = 'Billy Kimball' AND Award.result = 'Nominee';
SELECT K.keyword  FROM Keyword K  JOIN Episode E ON K.episode_id = E.episode_id  WHERE E.title = 'Take My Life, Please'
SELECT p.name, ac.award_category  FROM Person p  JOIN Award aw ON aw.person = p.name  JOIN Character_Award ca ON ca.award_id = aw.award_id  JOIN Award_Category ac ON ac.award_id = aw.award_id  WHERE aw.year = (SELECT MAX(year) FROM Award WHERE result = 'Winner')  AND ca.result = 'Winner';
SELECT      (SUM(CASE WHEN Award.result = 'winner' THEN 1 ELSE 0 END) / COUNT(Award.award_id)) * 100 AS AverageWinningRate FROM      Award WHERE      Award.year BETWEEN 2019 AND 2029 AND      SUBSTR(Award.season, 3) = '20';
SELECT COUNT(*)  FROM Episode  WHERE air_date BETWEEN '2008-10-01' AND '2008-11-30';
SELECT title  FROM Episode  WHERE year(air_date) = 2009  AND rating = (SELECT MIN(rating) FROM Episode WHERE year(air_date) = 2009);
SELECT      c.category,      cr.role  FROM      Person p  JOIN      Credit cr ON p.name = 'Bonita Pietila'  JOIN      Episode e ON cr.episode_id = e.episode_id  WHERE      p.name = 'Bonita Pietila';
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person WHERE p.birthdate = '1957-10-29' AND p.birth_place = 'Chicago' AND p.birth_region = 'Illinois' AND c.season = 20 AND c.episode_id IS NOT NULL;
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person WHERE c.role = 'producer' AND c.episode_id IN (SELECT e.episode_id FROM Episode e WHERE e.season = 20 AND e.title LIKE '%The simpson 20s%');
SELECT p.name,         (2009 - bd.birthdate) AS age_when_nominated_for_emmy_music_composition,        bd.birthdate FROM Person p JOIN Award a ON p.person = a.person AND a.role = 'composer' JOIN Episode e ON a.episode_id = e.episode_id JOIN `Organization` o ON a.organization = o.organization_id WHERE o.name = 'Primetime Emmy Awards' AND a.year = 2009 AND a.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND a.result = 'Nominee';
SELECT e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id JOIN Person p ON a.person = p.name WHERE a.organization LIKE '%20s%' AND p.name = 'The simpson' AND e.season = 20 GROUP BY e.episode_id ORDER BY COUNT(a.award_id) DESC LIMIT 1;
SELECT `birth_place`  FROM Person  WHERE `name` = 'Dan Castellaneta' AND `nickname` IS NULL;
SELECT COUNT(*)  FROM Person  WHERE birth_country = 'USA';
SELECT p.name FROM Person p WHERE p.birthdate < '1970-01-01';
SELECT name  FROM Person  WHERE birth_place = 'California' AND birth_country = 'USA'  AND birthdate BETWEEN '1958-01-01' AND '1969-12-31';
SELECT episode_id FROM Vote WHERE stars = 5 AND votes > 100;
SELECT T1.keyword  FROM Keyword AS T1  JOIN Episode AS T2 ON T1.episode_id = T2.episode_id  WHERE T2.title = 'Double, Double, Boy in Trouble';
SELECT e.episode_id FROM Episode e WHERE e.season * 10 + e.episode BETWEEN 10 AND 20 AND (SELECT COUNT(*) FROM Vote v WHERE v.episode_id = e.episode_id) > 200;
SELECT T1.keyword  FROM Keyword AS T1  JOIN Episode AS T2 ON T1.episode_id = T2.episode_id  JOIN Award AS T3 ON T2.episode_id = T3.episode_id AND T2.season = T3.season  WHERE T3.award_category = 'Primetime Emmy'
SELECT p.name FROM Award a JOIN Person p ON a.person = p.name WHERE a.award_category = 'Primetime Emmy' ORDER BY a.votes DESC LIMIT 1;
SELECT Episode.episode_id  FROM Award  JOIN Episode ON Award.episode_id = Episode.episode_id  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE Award.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND Vote.stars = 10;
SELECT p.name FROM Person p JOIN Award a ON p.person_id = a.person JOIN Episode e ON e.episode_id = a.episode_id WHERE a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND e.title = 'No Loan Again, Naturally' AND a.role = 'director';
SELECT DISTINCT p.name  FROM Person p  JOIN Credit c ON p.name = c.person  JOIN Award a ON c.role = 'writer' AND c.episode_id = a.episode_id  JOIN Vote v ON c.episode_id = v.episode_id  WHERE a.year = 2009 AND v.stars > 5;
SELECT COUNT(*)  FROM Person  WHERE birth_country = 'USA'  AND birthdate BETWEEN '2009-01-01' AND '2010-12-31'  AND award.organization = 'WGA Award (TV)';
SELECT e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person = p.name WHERE a.role = 'composer' AND a.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND a.result = 'Winner' AND e.votes > 200;
SELECT e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id JOIN Person p ON a.person = p.name WHERE p.name = 'Al Jean' AND a.year = 2009 AND a.award_category = 'Primetime Emmy'
SELECT      (SUM(CASE WHEN Episode.episode_id = 1 THEN Votes.votes ELSE 0 END) -      SUM(CASE WHEN Episode.episode_id = 5 THEN Votes.votes ELSE 0 END)) AS vote_difference FROM     Episode JOIN Votes ON Episode.episode_id = Votes.episode_id;
SELECT      A.award  FROM      Episode E  JOIN      Credit C ON E.episode_id = C.episode_id  JOIN      Person P ON P.name = 'Homer Simpson' AND C.person = P.name  JOIN      Award W ON W.year = 2009 AND E.season = 20 AND E.episode = ANY (W.episode_id)  WHERE      C.role = 'Homer Simpson 20';
SELECT      COUNT(*) AS total_episodes,     SUM(CASE WHEN A.votes < 100 THEN 1 ELSE 0 END) AS episodes_with_less_than_100_votes,     (SUM(CASE WHEN A.votes < 100 THEN 1 ELSE 0 END) * 100 / COUNT(*)) AS percentage_of_episodes FROM      simpson_episodes A JOIN      Award B ON A.episode_id = B.episode_id WHERE      B.award = 'Outstanding Animated Program (Programming Under One Hour)';
SELECT      COUNT(*) AS 'Total_Primetime_Emmys_Born_USA',     (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Award)) AS 'Percentage_Americans' FROM      Award WHERE      award_category = 'Primetime Emmy' AND      birth_country = 'USA';
SELECT DISTINCT p.name  FROM Person p  JOIN Award a ON p.person_id = a.person  JOIN Episode e ON a.episode_id = e.episode_id  WHERE a.award = 'Outstanding Voice-Over Performance'  AND a.role = 'Narrator'  AND e.season = 20;
SELECT COUNT(*)  FROM Award  JOIN Person ON Award.person = Person.name  WHERE Award.result = 'Nominee'  AND Award.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'  AND Award.role = 'executive producer';
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person WHERE p.birthdate IS NOT NULL AND p.birth_region = 'California' AND EXTRACT(YEAR FROM p.birthdate) = 1962
SELECT COUNT(*)  FROM Person  WHERE height_meters > 1.70 AND birth_country = 'Canada' AND name IN (     SELECT person      FROM Credit      WHERE category = 'crew' );
SELECT COUNT(DISTINCT pa.person)  FROM Award AS a JOIN Character_Award AS ca ON a.award_id = ca.award_id JOIN Person AS pa ON a.person = pa.person WHERE a.award = 'Animation' AND a.result = 'Nominee';
SELECT title, air_date, rating  FROM Episode  WHERE rating > 7 AND rating <= 10  LIMIT 3;
SELECT episode_id, title, votes  FROM Vote  ORDER BY votes DESC  LIMIT 5;
SELECT e.episode_id, e.title, COUNT(v.votes) AS vote_count FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 1 GROUP BY e.episode_id ORDER BY vote_count DESC LIMIT 3;
SELECT ca.character FROM Character_Award ca JOIN Person p ON ca.person = p.name JOIN Award a ON ca.award_id = a.award_id WHERE a.award LIKE '%Voice-Over%'
SELECT e.episode_id, e.title FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE e.air_date LIKE '2008%' AND v.stars = 10 GROUP BY e.episode_id, e.title ORDER BY COUNT(v.vote) DESC LIMIT 1;
SELECT keyword  FROM Keyword  WHERE episode_id IN (     SELECT episode_id      FROM Episode      WHERE title = 'Take My Life, Please' );
SELECT Episode.title  FROM Episode  JOIN Keyword ON Episode.episode_id = Keyword.episode_id  WHERE Keyword.keyword = '1930s to 2020s'  LIMIT 2;
SELECT Episode.title FROM Episode JOIN Award ON Episode.episode_id = Award.episode_id WHERE Award.year = 2010 AND Award.person = 'Joel H. Cohen' AND Award.result = 'Winner';
SELECT COUNT(*)  FROM Vote  WHERE episode_id IN (     SELECT episode_id      FROM Episode      WHERE title = 'Lisa the Drama Queen' ) AND stars = 5;
SELECT COUNT(*)  FROM Episode  JOIN Keyword ON Episode.episode_id = Keyword.episode_id  WHERE Keyword.keyword = 'reference to the fantastic four' AND Vote.stars = 10;
SELECT      (SUM(CASE WHEN v.stars = 1 THEN v.votes ELSE 0 END) - SUM(CASE WHEN v.stars = 10 THEN v.votes ELSE 0 END)) as vote_difference FROM      simpson_episodes e JOIN      Vote v ON e.episode_id = v.episode_id WHERE      e.title = 'The Burns and the Bees';
SELECT T1.keyword  FROM Keyword AS T1  JOIN Episode AS T2 ON T1.episode_id = T2.episode_id  WHERE T2.votes = (SELECT MIN(votes) FROM Episode)
SELECT e.episode_id, e.title FROM Episode e JOIN (     SELECT ee.episode_id, COUNT(v.vote) as num_2_star_votes     FROM Episode ee     JOIN Vote v ON ee.episode_id = v.episode_id     WHERE v.stars = 2     GROUP BY ee.episode_id     HAVING COUNT(v.vote) > 20 ) tv ON e.episode_id = tv.episode_id WHERE e.rating >= 5 AND e.rating <= 7 GROUP BY e.episode_id HAVING AVG(CASE WHEN v.stars = 2 THEN 1 ELSE 0 END) * COUNT(v.vote) / SUM(CASE WHEN v.stars IS NULL THEN 0 ELSE 1 END) > 20;
SELECT episode_id FROM Vote GROUP BY episode_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.name FROM Person p JOIN Credit c ON p.name = c.person WHERE p.birthdate = (SELECT MIN(birthdate) FROM Person)
SELECT e.title FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person = p.name WHERE p.name = 'Oscar Cervantes' AND c.credited = 'true';
SELECT      c.person,      c.role  FROM      Credit c  JOIN      Person p ON c.person = p.name  WHERE      p.birth_country != 'USA';
SELECT COUNT(*)  FROM Episode  WHERE rating = (SELECT MIN(rating) FROM Episode) AND votes > 0;
SELECT c.character FROM Award a JOIN Character_Award ca ON a.award_id = ca.award_id JOIN Episode e ON a.episode_id = e.episode_id JOIN Credit c ON e.episode_id = c.episode_id WHERE a.award = 'Outstanding Voice-Over Performance' AND a.result = 'Winner';
SELECT Episode.summary  FROM Episode  JOIN Credit ON Episode.episode_id = Credit.episode_id  WHERE Credit.person = 'Emily Blunt';
SELECT `role` FROM Credit JOIN Episode ON Credit.episode_id = Episode.episode_id WHERE Episode.title = 'The Tiny Canadian';
SELECT e.episode_id, e.title, MAX(v.percent) as max_star_percent FROM Episode e JOIN Award a ON e.episode_id = a.episode_id JOIN Credit c ON e.episode_id = c.episode_id JOIN Vote v ON e.episode_id = v.episode_id WHERE v.star = 5 AND a.result = 'Nominee' OR a.result = 'Winner' GROUP BY e.episode_id, e.title ORDER BY max_star_percent DESC LIMIT 1;
SELECT      person, role  FROM      Credit  WHERE      episode_id IN (         SELECT episode_id          FROM Episode          WHERE title = 'In the Name of the Grandfather'     ) AND      category = 'Cast' AND      credited = 'true';
SELECT p.birthdate  FROM Person p  JOIN Award a ON p.name = a.person  WHERE a.result = 'Winner';
SELECT C.person  FROM Credit AS C  JOIN Episode AS E ON C.episode_id = E.episode_id  JOIN Vote AS V ON E.episode_id = V.episode_id  WHERE C.role = 'Writer' AND V.stars = 10  GROUP BY C.episode_id, C.person  HAVING COUNT(V.vote_id) = (SELECT MAX(count_votes) FROM      (SELECT COUNT(*) as count_votes FROM Vote WHERE stars = 10) AS subquery)
SELECT award  FROM Award  JOIN Episode ON Award.episode_id = Episode.episode_id  WHERE Episode.air_date = '11/30/2008' AND Award.result = 'Winner';
SELECT *  FROM Credit  WHERE category = 'Music Department';
SELECT T1.keyword  FROM Keyword AS T1  JOIN Episode AS T2 ON T1.episode_id = T2.episode_id  WHERE T2.number_in_series = 426;
SELECT e.title FROM Episode e JOIN (     SELECT season, SUM(IF(v.votes = 7, 1, 0)) AS seven_star_votes, COUNT(*) AS total_votes     FROM Vote v     GROUP BY season ) avg_votes ON e.season = avg_votes.season WHERE e.episode_id IN (     SELECT v.episode_id     FROM Vote v     WHERE v.votes = 7     GROUP BY v.episode_id     HAVING SUM(v.votes = 7) > avg_votes.seven_star_votes / avg_votes.total_votes )
SELECT      (SUM(CASE WHEN A.award = 'Nominated' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) OVER () ) AS nominated_percentage  FROM      Episode E  JOIN      Award A ON E.episode_id = A.episode_id  WHERE      A.result = 'Nominee';
SELECT name  FROM Person  WHERE nickname IS NOT NULL;
SELECT `birth_country`  FROM `Person`  WHERE `height_meters` = (SELECT MAX(`height_meters`) FROM `Person`);
SELECT AVG(T2.height_meters)  FROM Person AS T2  JOIN Award AS T1 ON T1.person = T2.name  WHERE T2.birth_country = 'USA';
SELECT      COUNT(CASE          WHEN birthdate > '1970-01-01' AND birth_region = 'California' THEN 1     END) * 100.0 / COUNT(*) AS percentage FROM Person;
SELECT COUNT(*)  FROM Person  WHERE birth_region != 'Connecticut' AND birth_country != 'USA'
SELECT title  FROM Episode  WHERE episode_id IN ('S20-E1', 'S20-E2', 'S20-E3');
SELECT episode_image  FROM Episode  WHERE episode_id = 5;
SELECT COUNT(*)  FROM Episode  WHERE rating > 7.0;
SELECT COUNT(*)  FROM Credit  WHERE category = 'Casting Department';
SELECT COUNT(*)  FROM Person  WHERE birth_country = 'USA' AND role = 'additional timer';
SELECT COUNT(*)  FROM Person  WHERE birthdate > '1970-01-01' AND EXISTS  (SELECT * FROM Credit WHERE Person.name = Credit.person AND Credit.role = 'animation executive producer');
SELECT summary  FROM Episode  WHERE episode_id IN (     SELECT e.episode_id      FROM Episode e      LEFT JOIN Credit c ON e.episode_id = c.episode_id      WHERE c.credited = '' );
SELECT Episode.rating FROM Episode JOIN Credit ON Episode.episode_id = Credit.episode_id WHERE Credit.person = 'Jason Bikowski';
SELECT AVG(T2.height_meters)  FROM Credit AS T1  JOIN Person AS T2 ON T1.person = T2.name  WHERE T1.category = 'Animation Department' AND T2.birth_name = 'Crew Member';
SELECT Character_Award.character FROM Award JOIN Character_Award ON Award.award_id = Character_Award.award_id WHERE Award.award_category = 'Primetime Emmy' AND Award.year = 2009;
SELECT DISTINCT c.character  FROM Award a  JOIN Character_Award ca ON a.award_id = ca.award_id  JOIN Episode e ON a.episode_id = e.episode_id  JOIN Person p ON a.person = p.name  JOIN Award w ON a.award_id = w.award_id  WHERE w.award_category = 'Primetime Emmy'  AND w.result = 'Nominee'  AND a.year BETWEEN 2009 AND 2010;
SELECT SUM(T1.votes)  FROM Episode AS T1  JOIN Credit AS T2 ON T1.episode_id = T2.episode_id  JOIN Person AS T3 ON T2.person = T3.name  WHERE T3.name = 'Adam Kuhlman'
SELECT      K.keyword,     C.person FROM      Episode E JOIN      Credit C ON E.episode_id = C.episode_id JOIN      Keyword K ON E.episode_id = K.episode_id WHERE      E.episode_id = 'S20-E1';
SELECT K.keyword  FROM Keyword K  JOIN Vote V ON K.episode_id = V.episode_id  WHERE V.stars = 10 AND V.percent >= 30;
SELECT      (SUM(CASE WHEN v.stars = 5 THEN 1 ELSE 0 END) / COUNT(v.vote_id)) * 100 AS percentage FROM      simpson_episodes.episode e JOIN      simpson_episodes.vote v ON e.episode_id = v.episode_id WHERE      e.title = 'Sex, Pies and Idiot Scrapes';
SELECT COUNT(*)  FROM Keyword  WHERE episode_id IN (     SELECT episode_id      FROM Episode      WHERE title = 'Dangerous Curves' ) AND keyword = 'limbo dancing';
SELECT Episode.title FROM Episode JOIN Award ON Episode.episode_id = Award.episode_id WHERE Award.award = 'Best International TV Series' AND Award.year = 2017 AND Award.result = 'Winner';
SELECT K.keyword FROM Keyword K JOIN Award A ON K.episode_id = A.episode_id WHERE A.award_category = 'WGA Award (TV)' AND A.result = 'Winner';
SELECT T2.birth_place  FROM Award AS T1  JOIN Person AS T2 ON T1.person = T2.name  JOIN Credit AS T3 ON T3.episode_id = (SELECT T4.episode_id FROM Credit AS T4 WHERE T4.role = 'co-executive producer')  WHERE T1.award_category = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T1.result = 'Nominee';
SELECT SUM(Vote.votes)  FROM Vote  JOIN Award ON Vote.episode_id = Award.episode_id AND Award.award = 'Blimp Award'  WHERE Award.result IN ('Winner', 'Nominee') AND Vote.stars BETWEEN 1 AND 5;
SELECT SUM(E.rating) FROM Episode AS E JOIN Award AS Aw ON E.episode_id = Aw.episode_id WHERE Aw.award = 'OFTA Television Award' OR Aw.award = 'WGA Award (TV)' AND Aw.result = 'Winner';
SELECT      (SUM(CASE WHEN 5 <= v.stars AND v.stars <= 10 THEN v.percent ELSE 0 END) / NULLIF(TotalVotes, 0)) * 100 AS PercentageOfRating FROM     simpson_episodes e JOIN     Vote v ON e.episode_id = v.episode_id WHERE     e.title = 'No Loan Again, Naturally' AND e.rating = 6.8;
SELECT COUNT(*)  FROM Vote  WHERE stars > 8;
SELECT Episode.episode_id, votes  FROM Episode  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE votes = (SELECT MAX(votes) FROM Vote);
SELECT COUNT(*)  FROM Episode  JOIN Keyword ON Episode.episode_id = Keyword.episode_id  WHERE Keyword.keyword = '2d animation';
SELECT organization FROM Award WHERE award_id = 328;
SELECT COUNT(*)  FROM Award  WHERE year = 2009;
SELECT COUNT(*)  FROM Award  WHERE award_category = 'Primetime Emmy';
SELECT `birth_name`  FROM `Person`  WHERE `role` = 'co-executive producer' AND `height_meters` > 1.60;
SELECT      (SUM(CASE WHEN result = 'Nominee' AND birth_country = 'USA' THEN 1 ELSE 0 END) / COUNT(p.name)) * 100 AS percentage FROM      Award w  JOIN      Person p ON w.person = p.name WHERE      w.result = 'Nominee' AND p.birth_country = 'USA'
SELECT      (SUM(CASE WHEN A.award = 'Winner' AND B.height_meters > 1.75 THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN A.award = 'Winner' THEN 1 ELSE 0 END), 0)) * 100 AS percentage_winners_over_175 FROM      Award A JOIN      Person B ON A.person = B.name;
SELECT title  FROM Episode  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE Vote.stars = 2;
SELECT Vote.episode_id, Vote.stars FROM Vote JOIN Episode ON Vote.episode_id = Episode.episode_id WHERE Episode.title = 'How the Test Was Won';
SELECT COUNT(*)  FROM Episode  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE Vote.stars > 5 AND SUBSTRING(air_date, 1, 4) = '2008'
SELECT T3.character  FROM Award AS T1  JOIN Character_Award AS T2 ON T1.award_id = T2.award_id  JOIN Episode AS T3 ON T3.episode_id = T1.episode_id  WHERE T1.year = 2009;
SELECT DISTINCT A.year  FROM Award AS A  JOIN Character_Award AS CA ON A.award_id = CA.award_id  JOIN Person AS P ON A.person = P.name  WHERE P.name = 'Mr. Burns'
SELECT      c.award_category  FROM      Episode e JOIN      Credit c ON e.episode_id = c.episode_id JOIN      Character_Award ca ON c.episode_id = ca.episode_id JOIN      Award a ON c.episode_id = a.episode_id AND c.person = a.person WHERE      ca.character = 'Lenny' AND a.result = 'Winner';
SELECT p.name  FROM Person p  JOIN Credit c ON p.person_id = c.person  WHERE c.role = 'Smithers';
SELECT T1.keyword  FROM Keyword AS T1  JOIN Episode AS T2 ON T1.episode_id = T2.episode_id  WHERE T2.title = 'Dangerous Curves';
SELECT T1.keyword  FROM Keyword AS T1  JOIN Episode AS T2 ON T1.episode_id = T2.episode_id  WHERE T2.air_date LIKE '2008%'
SELECT COUNT(*)  FROM Episode  WHERE Episode.rating > 7 AND Episode.air_date LIKE '2009%'
SELECT `birth_name`  FROM Person  WHERE `role` IN (SELECT role FROM Credit WHERE `category` = 'Director')  AND `birth_country` = 'South Korea';
SELECT COUNT(*)  FROM Award  WHERE episode_id IN (     SELECT episode_id      FROM Episode      WHERE season = 20 AND air_date LIKE '2009%' ) AND result = 'Winner';
SELECT COUNT(*)  FROM Episode  WHERE rating < 7;
SELECT name  FROM Person  WHERE birth_region = 'California' AND birth_country = 'USA';
SELECT COUNT(*)  FROM Episode  JOIN Credit ON Episode.episode_id = Credit.episode_id  WHERE Episode.season = 'S2' AND Episode.episode BETWEEN 'S2-EP5' AND 'S2-EP10' AND Credit.credited = 'true' AND Credit.role = 'casting';
SELECT episode_id FROM Vote WHERE stars = 2 AND votes = 9;
SELECT Episode.title  FROM Episode  JOIN Award ON Episode.episode_id = Award.episode_id  WHERE Award.organization = 'Primetime Emmy Awards'  AND Award.year = 2009  AND Award.result = 'Winner';
SELECT episode_id FROM Episode WHERE air_date LIKE '2008%' AND stars < 5;
SELECT `category` FROM Credit WHERE `episode_id` IN (   SELECT `episode_id`   FROM Vote   WHERE `votes` = (SELECT MAX(`votes`) FROM Vote) ) AND `person` = 'Carlton Batten';
SELECT `percent` FROM `simpson_episodes`.Vote WHERE `air_date` LIKE '2008%' AND `votes` BETWEEN 920 AND 950;
SELECT Episode.episode_id, Episode.title  FROM Episode  JOIN Credit ON Episode.episode_id = Credit.episode_id  WHERE Credit.person = 'Bonita Pietila' AND Credit.credited = 'true';
SELECT COUNT(*)  FROM Episode e  JOIN Award a ON e.episode_id = a.episode_id  JOIN Vote v ON e.episode_id = v.episode_id  WHERE a.result = 'Nominee' AND a.organization = 'Annie Awards' AND v.percent > 6;
SELECT Episode.title FROM Episode JOIN Award ON Episode.episode_id = Award.episode_id WHERE Award.award_category = 'WGA Award (TV)' AND Award.result = 'Nominee' AND Award.votes > 1000;
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person WHERE c.category = 'Animation Department' AND c.role = 'additional timer' AND c.episode_id IN (     SELECT e.episode_id     FROM Episode e     WHERE e.title = 'How the Test Was Won' ) AND c.credited = 'true';
SELECT Vote.stars  FROM Episode  JOIN Vote ON Episode.episode_id = Vote.episode_id  WHERE Episode.air_date LIKE '2008-11%';
SELECT Episode.title  FROM Episode  JOIN Award ON Episode.episode_id = Award.episode_id  WHERE Award.stars = 5 AND Award.result = 'Nominee' AND Award.award_category = 'Prism Award' AND Episode.air_date = '2009-04-19';
SELECT T3.category  FROM Episode AS T1  JOIN Award AS T2 ON T1.episode_id = T2.episode_id  JOIN Character_Award AS T3 ON T2.award_id = T3.award_id  WHERE T1.votes = (SELECT MAX(votes) FROM Episode)  AND T2.result = 'Nominee'
SELECT COUNT(*)  FROM Episode  JOIN Credit ON Episode.episode_id = Credit.episode_id  WHERE Episode.air_date LIKE '2009%' AND Credit.person = 'Sam Im' AND Credit.credited = 'true' AND Credit.role = 'additional timer';
SELECT title  FROM Episode  WHERE stars > (SELECT AVG(stars) * 0.7 FROM Episode)
SELECT      (COUNT(CASE WHEN A.award = 'Nominee' THEN 1 END) / COUNT(*) * 100) AS percentage FROM     Award A JOIN      Episode E ON A.episode_id = E.episode_id WHERE     A.year = 2009 AND E.title = 'Gone Maggie Gone'
SELECT COUNT(*)  FROM enrolled  WHERE name IN (     SELECT name      FROM student_loan      WHERE `month` = 0 );
SELECT month  FROM longest_absense_from_school  WHERE month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT COUNT(*)  FROM enlist  WHERE organ = 'navy';
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month >= 5  AND name IN (SELECT name FROM male);
SELECT p.name FROM person p JOIN enlisted e ON p.name = e.name WHERE e.organ = 'navy' AND EXISTS (     SELECT *     FROM male m     WHERE m.name = p.name );
SELECT COUNT(*)  FROM student_loan.filed_for_bankrupcy AS A JOIN student_loan.longest_absense_from_school AS B ON A.name = B.name WHERE B.month > 5;
SELECT COUNT(*)  FROM student_loan.person p  JOIN student_loan.enlist e ON p.name = e.name  JOIN student_loan.bool b ON p.name = b.name WHERE e.organ = 'navy' AND b.bool = 'pos';
SELECT T1.name  FROM male AS T1  JOIN disabled AS T2 ON T1.name = T2.name  JOIN filed_for_bankrupcy AS T3 ON T1.name = T3.name;
SELECT COUNT(*)  FROM disabled  WHERE name IN (SELECT name FROM male)  AND name NOT IN (SELECT name FROM male)
SELECT COUNT(*)  FROM student_loan.unemployed u  JOIN student_loan.no_payment_due npd ON u.name = npd.name;
SELECT MAX(longest_absense_from_school.month)  FROM enrolled JOIN person ON enrolled.name = person.name JOIN enlist ON enlist.name = person.name WHERE enlist.organ = 'navy';
SELECT COUNT(*)  FROM disabled  WHERE NOT EXISTS (     SELECT *      FROM longest_absense_from_school      WHERE name = disabled.name AND month != 0 )
SELECT DISTINCT school  FROM longest_absense_from_school  WHERE month = 9;
SELECT organ  FROM disabled  GROUP BY organ  ORDER BY COUNT(name) DESC  LIMIT 1;
SELECT f.name  FROM filed_for_bankrupcy f  WHERE NOT EXISTS (   SELECT * FROM male m WHERE f.name = m.name );
SELECT      (COUNT(CASE WHEN T2.organ = 'navy' THEN T1.name END) /       CAST(COUNT(T1.name) AS REAL)) * 100 AS percentage_male_in_navy FROM      person AS T1 JOIN      enlist AS T2  ON      T1.name = T2.name WHERE      T2.organ = 'navy' AND T1.gender = 'male';
SELECT AVG(longest_absense_from_school.month)  FROM disabled JOIN longest_absense_from_school ON disabled.name = longest_absense_from_school.name;
SELECT p.name  FROM person p  JOIN enlist e ON p.name = e.name  WHERE e.organ = 'foreign_legion';
SELECT      no_payment_due.bool  FROM      no_payment_due  WHERE      no_payment_due.name = 'student348';
SELECT school FROM enrolled WHERE name = 'student829';
SELECT month FROM longest_absense_from_school WHERE name = 'student217';
SELECT p.name FROM person p JOIN longest_absense_from_school las ON p.name = las.name WHERE las.month = 6;
SELECT `organ`  FROM `enlist`  WHERE `name` = 'student285';
SELECT `school`  FROM `enrolled`  JOIN `person` ON `enrolled.name` = `person.name`  WHERE `person.name` = 'student281'  AND `disabled.name` = 'student281';
SELECT enrolled.school  FROM enlisted  JOIN enrolled ON enlisted.name = enrolled.name  WHERE enlisted.organ = 'air_force';
SELECT p.name  FROM person p  WHERE p.name IN (     SELECT n.name      FROM no_payment_due n      WHERE n.bool = 'neg' )  AND p.name NOT IN (SELECT name FROM male) LIMIT 10;
SELECT p.name, e.organ  FROM person p  JOIN no_payment_due npd ON p.name = npd.name  JOIN enlist e ON p.name = e.name  WHERE npd.bool = 'pos';
SELECT p.name  FROM person p  JOIN disabled d ON p.name = d.name  JOIN enrolled e ON p.name = e.name  WHERE e.school = 'smc';
SELECT p.name FROM person p JOIN enlisted e ON p.name = e.name JOIN filed_for_bankruptcy f ON p.name = f.name WHERE e.organ = 'foreign_legion';
SELECT COUNT(*)  FROM (person p        JOIN male m ON p.name = m.name)  JOIN no_payment_due npd ON p.name = npd.name  WHERE npd.bool = 'neg';
SELECT p.name FROM person p JOIN enlisted e ON p.name = e.name WHERE e.organ = 'marines' AND EXISTS (     SELECT *     FROM longest_absense_from_school las     WHERE las.name = p.name     AND las.month = 6 );
SELECT COUNT(*)  FROM enrolled  JOIN person ON enrolled.name = person.name  WHERE school = 'smc' AND unemployed.name IS NOT NULL;
SELECT COUNT(*)  FROM unemployed  JOIN enrolled ON unemployed.name = enrolled.name  WHERE enrolled.month = 6;
SELECT COUNT(*)  FROM enrolled  JOIN person ON enrolled.name = person.name  WHERE school = 'ucsd'  AND EXISTS (     SELECT 1      FROM enlist      WHERE name = person.name      AND organ = 'peace_corps' );
SELECT T1.organ  FROM enlist AS T1  JOIN longest_absense_from_school AS T2  ON T1.name = T2.name;
SELECT      (COUNT(CASE WHEN bool.value = 'pos' AND enlist.organ = 'foreign_legion' THEN 1 END)      / NULLIF(COUNT(bool.value), 0)) * 100 AS percentage_ratio FROM      bool  JOIN      enlist ON bool.name = enlist.name WHERE      bool.value IN ('pos', 'neg');
SELECT      (COUNT(CASE WHEN T2.organ = 'navy' THEN 1 END)      OVER()      / COUNT(CASE WHEN T3.school = 'occ' THEN 1 END)      OVER()) * 100 AS percentage FROM      enlist AS T1 JOIN      person AS T2  ON      T1.name = T2.name JOIN      enrolled AS T3 ON      T2.name = T3.name;
SELECT `name` FROM `longest_absense_from_school` ORDER BY `month` DESC LIMIT 1;
SELECT COUNT(DISTINCT enrolled.name) AS total_students_in_school FROM enrolled;
SELECT `month`  FROM `longest_absense_from_school`  WHERE `month` = (SELECT MAX(`month`) FROM `longest_absense_from_school`)
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month = 4;
SELECT COUNT(*)  FROM (SELECT name FROM unemployed WHERE name IN (SELECT name FROM filed_for_bankrupcy)) AS intersection;
SELECT T1.organ  FROM disabled AS T1  JOIN enlist AS T2 ON T1.name = T2.name;
SELECT COUNT(*)  FROM (      unemployed u      JOIN filed_for_bankrupcy fb ON u.name = fb.name      WHERE fb.name IS NOT NULL AND u.name IN (SELECT name FROM no_payment_due WHERE bool = 'pos')  ) subquery;
SELECT COUNT(*)  FROM (SELECT name FROM disabled WHERE name = '124') AS disabled_check JOIN (SELECT name FROM male WHERE name = '124') AS male_check ON disabled_check.name = male_check.name;
SELECT      CASE          WHEN m.name = 'student180' THEN 'female'         ELSE 'male'     END AS gender,     d.name AS disability,     e.name AS employment,     npd.bool AS school_debt_status FROM      person p180 JOIN male m ON p180.name = m.name AND p180.name = 'student180'      LEFT JOIN disabled d ON p180.name = d.name     LEFT JOIN enlisted e ON p180.name = e.name     LEFT JOIN no_payment_due npd ON p180.name = npd.name WHERE      p180.name = 'student180' UNION ALL SELECT      CASE          WHEN p.name = 'student117' THEN 'female'         ELSE 'male'     END AS gender,     d.name AS disability,     e.name AS employment,     npd.bool AS school_debt_status FROM      person p117 JOIN male m ON p117.name = m.name AND p117.name = 'student117'      LEFT JOIN disabled d ON p117.name = d.name     LEFT JOIN enlisted e ON p117.name = e.name     LEFT JOIN no_payment_due npd ON p117.name = npd.name WHERE      p117.name = 'student117';
SELECT COUNT(*)  FROM person  JOIN bool ON person.name = bool.name  JOIN male ON person.name != male.name  JOIN enlist ON person.name = enlist.name  WHERE bool.name IS NULL AND        disen.name IS NULL AND        (enlist.organ = 'marines' OR enlist.organ = 'air_force')
SELECT      enlist.organ,     enrolled.school FROM      enlist JOIN      person ON enlist.name = person.name JOIN      enrolled ON person.name = enrolled.name WHERE      person.name IN ('student27', 'student17', 'student101');
SELECT      (COUNT(CASE WHEN d.name IS NOT NULL AND m.name IS NULL THEN s.name END) :: REAL) /      (COUNT(CASE WHEN d.name IS NULL AND m.name IS NOT NULL THEN s.name END) :: REAL) AS ratio FROM      student_loan.bool b      JOIN student_loan.person p ON b.name = p.name     LEFT JOIN student_loan.disabled d ON b.name = d.name     LEFT JOIN student_loan.male m ON b.name = m.name;
SELECT COUNT(*)  FROM (enlist.name AS student) JOIN female ON student = female.name LEFT JOIN male ON student = male.name WHERE male.name IS NULL
SELECT p.name  FROM person p  JOIN filed_for_bankrupcy fb ON p.name = fb.name  JOIN no_payment_due npd ON p.name = npd.name  WHERE fb.name IS NOT NULL AND npd.bool = 'neg';
SELECT AVG(longest_absense_from_school.month)  FROM longest_absense_from_school;
SELECT AVG(longest_absense_from_school.month)  FROM enrolled JOIN person ON enrolled.name = person.name WHERE unemployed.name IS NULL
SELECT AVG(longest_absense_from_school.month)  FROM disabled JOIN longest_absense_from_school  ON disabled.name = longest_absense_from_school.name;
SELECT T2.organ  FROM enlist AS T1  JOIN bool AS T2 ON T1.name = T2.name  WHERE T2.name = '313';
SELECT COUNT(*)  FROM enlist  WHERE organ = 'fire_department';
SELECT COUNT(*)  FROM enrolled  WHERE name IN (     SELECT name      FROM student_loan      WHERE `month` = 0 );
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month > 2;
SELECT COUNT(*)  FROM no_payment_due  WHERE bool = 'neg';
SELECT COUNT(*)  FROM no_payment_due  WHERE bool = 'pos';
SELECT p.name  FROM person p  JOIN disabled d ON p.name = d.name  WHERE d.name NOT IN (     SELECT name FROM longest_absense_from_school WHERE month != 0 )
SELECT COUNT(*)  FROM unemployed  WHERE name IN (SELECT name FROM enlisted WHERE organ = 'navy')
SELECT COUNT(*)  FROM male  JOIN enlist ON male.name = enlist.name  WHERE enlist.organ = 'foreign_legion';
SELECT COUNT(*)  FROM person p  JOIN female f ON p.name = f.name  JOIN enlist e ON p.name = e.name  WHERE e.organ = 'air_force';
SELECT T1.name  FROM disabled AS T1  JOIN longest_absense_from_school AS T2  ON T1.name = T2.name  WHERE T2.month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT p.name FROM person p JOIN unemployed u ON p.name = u.name JOIN enlist e ON p.name = e.name WHERE e.organ = 'marines';
SELECT AVG(longest_absense_from_school.month)  FROM disabled JOIN longest_absense_from_school  ON disabled.name = longest_absense_from_school.name;
SELECT      (COUNT(CASE WHEN u.name = s.name AND l.month = 5 THEN u.name END)      / COUNT(s.name)) * 100 AS percentage FROM      unemployed u  JOIN      enrolled s ON u.name = s.name  JOIN      longest_absense_from_school l ON s.name = l.name;
SELECT COUNT(*)  FROM unemployed  JOIN disabled ON unemployed.name = disabled.name  JOIN enrolled ON unemployed.name = enrolled.name  WHERE enrolled.month = 8;
SELECT U.name FROM unemployed U JOIN (     SELECT name, MAX(month) AS max_absense     FROM longest_absense_from_school     GROUP BY name ) LA ON U.name = LA.name;
SELECT p.name  FROM unemployed u  JOIN person p ON u.name = p.name  JOIN longest_absense_from_school las ON u.name = las.name  WHERE las.month = 0;
SELECT COUNT(*)  FROM (disabled  JOIN longest_absense_from_school ON disabled.name = longest_absense_from_school.name)  WHERE longest_absense_from_school.month = 3;
SELECT p.name  FROM person p  JOIN filed_for_bankrupcy fb ON p.name = fb.name  JOIN longest_absense_from_school las ON p.name = las.name  WHERE fb.name IS NOT NULL AND las.month = 0;
SELECT T1.name  FROM (filed_for_bankrupcy AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name)  WHERE T2.month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT      m.gender FROM      (SELECT 'male' AS gender UNION SELECT 'female') AS m     LEFT JOIN male AS ml ON m.gender = 'male' AND ml.name = 'student1000' WHERE      ml.name IS NULL;
SELECT COUNT(*)  FROM disabled  WHERE name IS NOT NULL;
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month > 6;
SELECT `name`  FROM longest_absense_from_school  WHERE `month` = (SELECT MAX(`month`) FROM longest_absense_from_school);
SELECT COUNT(*)  FROM enlist  WHERE organ = 'army';
SELECT AVG(longest_absense_from_school.month) AS average_absences FROM longest_absense_from_school;
SELECT COUNT(*)  FROM enlist  WHERE organ IN ('foreign_legion', 'peace_corps', 'army');
SELECT COUNT(*)  FROM (enlist        INNER JOIN disabled ON enlist.name = disabled.name)  WHERE enlist.organ = 'marines';
SELECT COUNT(*)  FROM unemployed  JOIN no_payment_due  ON unemployed.name = no_payment_due.name  WHERE no_payment_due.bool = 'pos';
SELECT p.name FROM person p JOIN female f ON p.name = f.name JOIN enrolled e ON p.name = e.name WHERE e.month_absent = 0;
SELECT school  FROM enrolled  JOIN disabled ON enrolled.name = disabled.name  GROUP BY school  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT T1.organ  FROM enlist AS T1  JOIN filed_for_bankrupcy AS T2  ON T1.name = T2.name;
SELECT COUNT(*)  FROM enlist  JOIN male ON enlist.name = male.name  GROUP BY name  HAVING COUNT(organ) > 1;
SELECT p.name FROM person p JOIN enlisted e ON p.name = e.name JOIN disabled d ON p.name = d.name WHERE e.organ = 'navy';
SELECT COUNT(*)  FROM enrolled  JOIN longest_absense_from_school ON enrolled.name = longest_absense_from_school.name  WHERE enrolled.school = 'smc' AND longest_absense_from_school.month = 7;
SELECT p.name FROM person p JOIN disabled d ON p.name = d.name JOIN male m ON 0=1 -- Ensuring no male students are selected
SELECT      CAST(COUNT(u.name) AS REAL) / COUNT(d.name) AS unemployment_ratio  FROM      unemployed u  JOIN      disabled d ON u.name = d.name;
SELECT      (COUNT(CASE WHEN m.name THEN 1 END) * 1.0 / COUNT(s.name)) * 100 AS percentage FROM      person s JOIN      bool b ON s.name = b.name JOIN      male m ON s.name = m.name JOIN      enlist e ON s.name = e.name WHERE      e.organ = 'fire_department';
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month = 5;
SELECT COUNT(*)  FROM enlist  WHERE organ = 'army';
SELECT COUNT(*)  FROM enrolled  WHERE school = 'ucla';
SELECT `name`  FROM `longest_absense_from_school`  WHERE `month` = (SELECT MAX(`month`) FROM `longest_absense_from_school`)  LIMIT 5;
SELECT COUNT(*)  FROM enlist  WHERE COUNT(organ) >= 2;
SELECT COUNT(*)  FROM enlist  WHERE organ = 'navy';
SELECT COUNT(*)  FROM (person        JOIN male ON person.name = male.name)        LEFT JOIN no_payment_due ON person.name = no_payment_due.name  WHERE no_payment_due.bool = 'neg';
SELECT COUNT(*)  FROM enlisted  JOIN person ON enlisted.name = person.name  WHERE organ = 'peace_corps'  AND school = 'ucsd';
SELECT COUNT(*)  FROM unemployed u  JOIN no_payment_due npd ON u.name = npd.name  WHERE npd.bool = 'neg';
SELECT COUNT(*)  FROM student_loan.person  WHERE name NOT IN (SELECT name FROM student_loan.male) AND name NOT IN (SELECT name FROM student_loan.no_payment_due WHERE bool = 'pos')
SELECT COUNT(*)  FROM unemployed  WHERE name IN (     SELECT name      FROM person      WHERE name NOT IN (         SELECT DISTINCT name          FROM longest_absense_from_school          WHERE month != 0     ) )
SELECT p.name  FROM person p  JOIN no_payment_due npd ON p.name = npd.name  JOIN enlist e ON p.name = e.name  JOIN filed_for_bankrupcy ffb ON p.name = ffb.name  JOIN unemployed u ON p.name = u.name  JOIN disabled d ON p.name = d.name  JOIN male m ON p.name = m.name  JOIN enrolled er ON p.name = er.name  JOIN longest_absense_from_school las ON p.name = las.name  JOIN bool b ON p.name = b.name  JOIN disabled d2 ON p.name = d2.name  JOIN filed_for_bankrupcy ffb2 ON p.name = ffb2.name  JOIN unemployed u2 ON p.name = u2.name  JOIN enrolled er2 ON p.name = er2.name  JOIN longest_absense_from_school las2 ON p.name = las2.name  JOIN bool b2 ON p.name = b2.name  WHERE npd.bool = 'neg'  AND e.organ = 'fire_department'  AND p.name IS NOT NULL;
SELECT COUNT(*)  FROM (enlist        INNER JOIN person ON enlist.name = person.name)        INNER JOIN male ON person.name = male.name  WHERE enlist.organ = 'navy'  AND NOT EXISTS (SELECT * FROM male WHERE person.name = male.name);
SELECT COUNT(*)  FROM unemployed  JOIN enlisted ON unemployed.name = enlisted.name  WHERE organ = 'army';
SELECT COUNT(*)  FROM unemployed  JOIN no_payment_due  ON unemployed.name = no_payment_due.name  WHERE no_payment_due.bool = 'pos';
SELECT p.name  FROM person p  JOIN no_payment_due npd ON p.name = npd.name  JOIN enlist el ON p.name = el.name  JOIN disabled d ON p.name = d.name  JOIN unemployed u ON p.name = u.name  JOIN bool b ON p.name = b.name AND b.bool = 'pos'  WHERE el.organ = 'Peace Corps'
SELECT COUNT(*)  FROM disabled  WHERE disabled.name NOT IN (SELECT name FROM male);
SELECT COUNT(*)  FROM (disabled        JOIN no_payment_due ON disabled.name = no_payment_due.name)  WHERE no_payment_due.bool = 'pos';
SELECT      AVG(1) AS average  FROM      (SELECT COUNT(*) AS count FROM disabled WHERE name NOT IN (SELECT name FROM male) AND organ = 'foreign_legion') AS subquery;
SELECT      CONCAT(         'FEMALE: ',         CAST(             (COUNT(CASE WHEN enlist.organ = 'fire_department' AND NOT EXISTS (                 SELECT * FROM male WHERE enlist.name = male.name             ) THEN enlist.name ELSE NULL END) * 100.0 / COUNT(CASE WHEN enlist.organ = 'fire_department' THEN enlist.name ELSE NULL END)) AS DECIMAL(5,2)),         '%'     ) AS Female_Fire_Department_Ratio,     CONCAT(         'MALE: ',         CAST(             (COUNT(CASE WHEN enlist.organ = 'fire_department' AND EXISTS (                 SELECT * FROM male WHERE enlist.name = male.name             ) THEN enlist.name ELSE NULL END) * 100.0 / COUNT(CASE WHEN enlist.organ = 'fire_department' THEN enlist.name ELSE NULL END)) AS DECIMAL(5,2)),         '%'     ) AS Male_Fire_Department_Ratio FROM      enlist;
SELECT COUNT(*)  FROM enlist  WHERE organ = 'navy';
SELECT      CONCAT(DIVIDE(COUNT(CASE WHEN month = 0 THEN name END),                    COUNT(name)) * 100, '%') AS percentage_of_never BEEN_absent FROM      longest_absense_from_school;
SELECT      (COUNT(CASE WHEN `bool` = 'pos' THEN name END) /       COUNT(CASE WHEN `bool` = 'neg' THEN name END)) * 100 AS ratio FROM      no_payment_due
SELECT `name`, `school`  FROM `enrolled`  WHERE `month` = 15;
SELECT      DIVIDE(         FLOOR(COUNT(enlist.name)),         COUNT(DISTINCT enlist.organ)     ) as avg_enlisted_students_per_org FROM      enlist;
SELECT school, month  FROM enrolled  WHERE name = 'student214';
SELECT      (COUNT(disabled.name) * 100 / (SELECT COUNT(*) FROM person WHERE name NOT IN (SELECT name FROM disabled))) AS percentage FROM      disabled;
SELECT COUNT(*)  FROM longest_absense_from_school  JOIN person ON longest_absense_from_school.name = person.name  WHERE longest_absense_from_school.month = 9 AND EXISTS (     SELECT 1      FROM disabled      WHERE disabled.name = person.name );
SELECT p.name FROM person p WHERE p.name NOT IN (SELECT f.name FROM filed_for_bankrupcy f);
SELECT      person.name FROM      person JOIN      enlisted ON person.name = enlisted.name JOIN      male ON person.name = male.name JOIN      disabled ON person.name = disabled.name JOIN      filed_for_bankrupcy ON person.name = filed_for_bankrupcy.name JOIN      longest_absense_from_school ON person.name = longest_absense_from_school.name JOIN      unemployed ON person.name = unemployed.name JOIN      enrolled ON person.name = enrolled.name WHERE      person.name NOT IN (SELECT name FROM male) AND      enlisted.organ = 'air_force'; LIMIT 5;
SELECT COUNT(DISTINCT person.name)  FROM person  WHERE person.name NOT IN (SELECT name FROM disabled);
SELECT      CASE          WHEN m.name = 'student995' THEN 'male'         ELSE 'female'     END AS gender,     e.school FROM      enrolled AS e JOIN      male AS m ON e.name = m.name WHERE      m.name = 'student995';
SELECT disabled.name FROM disabled JOIN unemployed ON disabled.name = unemployed.name LIMIT 5;
SELECT COUNT(*)  FROM unemployed  WHERE name IN (SELECT name FROM filed_for_bankrupcy);
SELECT p.name, e.organ  FROM longest_absense_from_school AS las  JOIN person AS p ON las.name = p.name  JOIN enlisted AS e ON p.name = e.name  WHERE las.month = 4  LIMIT 5;
SELECT COUNT(*)  FROM no_payment_due  WHERE bool = 'pos' AND name IN (SELECT name FROM unemployed);
SELECT      enlist.organ,     CASE          WHEN no_payment_due.bool = 'pos' THEN 'Has payment due'         WHEN no_payment_due.bool = 'neg' THEN 'No payment due'     END AS payment_due_status FROM      enlist JOIN      student_loan.person p ON enlist.name = p.name JOIN      no_payment_due ON no_payment_due.name = p.name WHERE      p.name = 'student160';
SELECT m.name FROM male m JOIN enlist e ON m.name = e.name JOIN person p ON m.name = p.name JOIN disabled d ON m.name = d.name JOIN filed_for_bankrupcy fb ON m.name = fb.name JOIN longest_absense_from_school las ON m.name = las.name JOIN enrolled enr ON m.name = enr.name AND enr.school IS NOT NULL JOIN unemployed u ON m.name = u.name JOIN bool b ON m.name = b.name AND b.bool = 'true' WHERE m.name IN (     SELECT name FROM enlist WHERE organ = 'foreign_legion' ) LIMIT 10;
SELECT      CONCAT(DIVIDE(COUNT(p.name),                    (SELECT COUNT(*) FROM person p) * 100), '%') AS female_percentage FROM      person p WHERE      p.name NOT IN (SELECT name FROM male);
SELECT COUNT(*)  FROM filed_for_bankrupcy;
SELECT COUNT(*)  FROM enrolled  WHERE school = 'smc' AND month = 1;
SELECT COUNT(*)  FROM enlist  WHERE organ = 'air_force';
SELECT organ FROM enlist WHERE name = 'student168';
SELECT COUNT(*)  FROM disabled  JOIN male ON disabled.name = male.name  JOIN enlist ON disabled.name = enlist.name AND enlist.organ IS NOT NULL;
SELECT      s.school,     COUNT(DISTINCT d.name) AS disability_count FROM      enrolled e JOIN      student_loan.dbo.school s ON e.school = s.name JOIN      disabled d ON e.name = d.name GROUP BY      s.school;
SELECT      organ,     COUNT(CASE WHEN male.name IS NOT NULL THEN 1 END) AS male_count,     COUNT(CASE WHEN enlist.name IS NOT NULL AND enlist.name NOT IN (SELECT name FROM male) THEN 1 END) AS female_count FROM      enlisted JOIN      organ ON enlisted.organ = organ GROUP BY      organ;
SELECT e.name FROM enrolled e JOIN (SELECT name FROM enlisted WHERE COUNT(organ) = 2) orgs ON e.name = orgs.name GROUP BY e.name HAVING COUNT(school) = 2;
SELECT      CONCAT(DIVIDE(         MULTIPLY(             SUBTRACT(                 (SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 0),                 (SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 9)             ),             100         ),         (SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 0)     )) AS '%Difference',     '%' AS unit FROM longest_absense_from_school;
SELECT enrolled.school, COUNT(*) AS total_enrollment, SUM(CASE WHEN filed_for_bankrupcy.name IS NOT NULL THEN 1 ELSE 0 END) AS students_file_bankruptcy FROM enrolled JOIN filed_for_bankrupcy ON enrolled.name = filed_for_bankrupcy.name GROUP BY enrolled.school ORDER BY total_enrollment DESC LIMIT 1;
SELECT COUNT(*)  FROM disabled  JOIN unemployed ON disabled.name = unemployed.name;
SELECT p.name FROM enrolled e JOIN person p ON e.name = p.name WHERE e.school = 'occ' AND EXISTS (     SELECT *     FROM enlist el     WHERE el.name = p.name AND el.organ = 'fire_department' );
SELECT p.name  FROM male m  JOIN unemployed u ON m.name = u.name  JOIN disabled d ON m.name = d.name  JOIN longest_absense_from_school las ON m.name = las.name  WHERE las.month = 5;
SELECT e.name  FROM enrolled e  JOIN person p ON e.name = p.name  JOIN male m ON p.name = m.name  WHERE m.name IS NULL AND e.school IN ('occ', 'ulca');
SELECT enrolled.school, enlist.organ  FROM enrolled  JOIN enlist ON enrolled.name = 'student211' WHERE enrolled.name = 'student211';
SELECT      (COUNT(CASE WHEN ffb.name IN (SELECT name FROM male) THEN ffb.name END) -      COUNT(CASE WHEN ffb.name NOT IN (SELECT name FROM male) THEN ffb.name END)) AS difference FROM      filed_for_bankrupcy ffb JOIN      person p ON ffb.name = p.name;
SELECT AVG(longest_absense_from_school.month)  FROM student_loan.longest_absense_from_school  JOIN student_loan.person ON person.name = longest_absense_from_school.name  JOIN student_loan.male ON male.name = person.name  JOIN student_loan.unemployed ON unemployed.name = person.name
SELECT  CASE      WHEN (COUNT(CASE WHEN t1.name IN (SELECT name FROM disabled) THEN t2.name ELSE NULL END) * 100 / COUNT(t2.name)) -           (COUNT(CASE WHEN t1.name NOT IN (SELECT name FROM disabled) THEN t2.name ELSE NULL END) * 100 / COUNT(t2.name)) > 0      THEN CONCAT('Percentage difference:', (COUNT(CASE WHEN t1.name IN (SELECT name FROM disabled) THEN t2.name ELSE NULL END) * 100 / COUNT(t2.name)) -                   (COUNT(CASE WHEN t1.name NOT IN (SELECT name FROM disabled) THEN t2.name ELSE NULL END) * 100 / COUNT(t2.name)), '%, Disabled students have better attendance.')     ELSE CONCAT('Percentage difference:', (COUNT(CASE WHEN t1.name NOT IN (SELECT name FROM disabled) THEN t2.name ELSE NULL END) * 100 / COUNT(t2.name)) -                   (COUNT(CASE WHEN t1.name IN (SELECT name FROM disabled) THEN t2.name ELSE NULL END) * 100 / COUNT(t2.name)), '%, Disabled students do not have better attendance.') END AS Percentage_Difference_Between_Attendance FROM person t1 JOIN longest_absense_from_school t2 ON t1.name = t2.name;
SELECT      AVG(T3.month) AS avg_duration FROM     disabled AS T1 JOIN     male AS T2 ON T1.name = T2.name JOIN     longest_absense_from_school AS T3 ON T1.name = T3.name WHERE     T1.name IN (SELECT name FROM male);
SELECT      CONCAT(DIVIDE(COUNT(CASE WHEN u.month = 0 THEN u.name END), COUNT(e.month)) * 100, '%') AS unemployed_ratio FROM      unemployed u JOIN      enrolled e ON u.name = e.name WHERE      u.month = 0 AND e.month = 0;
SELECT COUNT(*)  FROM (male  JOIN no_payment_due ON male.name = no_payment_due.name)  WHERE no_payment_due.bool = 'neg';
SELECT COUNT(*)  FROM student_loan.filed_for_bankrupcy AS b JOIN student_loan.no_payment_due AS p ON b.name = p.name WHERE p.bool = 'pos';
SELECT `bool`  FROM no_payment_due  WHERE `name` = 'student124';
SELECT COUNT(*)  FROM disabled  JOIN no_payment_due  ON disabled.name = no_payment_due.name  WHERE no_payment_due.bool = 'pos';
SELECT T1.name  FROM longest_absense_from_school AS T1  JOIN no_payment_due AS T2 ON T1.name = T2.name  WHERE T2.bool = 'neg'  ORDER BY T1.month DESC  LIMIT 1;
SELECT T1.name  FROM longest_absense_from_school AS T1  JOIN no_payment_due AS T2 ON T1.name = T2.name  WHERE T1.month = 5 AND T2.bool = 'neg';
SELECT COUNT(*)  FROM disabled  JOIN enlist ON disabled.name = enlist.name  WHERE enlist.organ = 'marines';
SELECT COUNT(*)  FROM (   SELECT longest_absense_from_school.name    FROM longest_absense_from_school    WHERE longest_absense_from_school.organ = 'peace_corps' AND longest_absense_from_school.month = (SELECT MAX(month) FROM longest_absense_from_school) ) AS combined_table;
SELECT COUNT(*)  FROM (   SELECT name    FROM filed_for_bankrupcy    WHERE name IN (     SELECT name      FROM enlist      WHERE organ = 'navy'   ) ) as subquery
SELECT COUNT(*)  FROM enlist  JOIN no_payment_due  ON enlist.name = no_payment_due.name  WHERE organ = 'marines' AND bool = 'pos';
SELECT      (SUM(CASE WHEN d.month = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(d.name)) AS percentage FROM      disabled d JOIN      longest_absense_from_school las ON d.name = las.name WHERE      las.month = 0;
SELECT COUNT(*)  FROM enlist  WHERE organ = 'air_force';
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month < 4;
SELECT COUNT(*)  FROM (enlist        INNER JOIN person ON enlist.name = person.name)  WHERE person.name NOT IN (SELECT name FROM male)  AND enlist.organ = 'marines';
SELECT      AVG(T2.month)  FROM      longest_absense_from_school AS T2  LEFT JOIN      male AS T3  ON      T2.name = T3.name  WHERE      T3.name IS NULL;
SELECT f.name  FROM filed_for_bankrupcy f  WHERE NOT EXISTS (   SELECT * FROM male m WHERE f.name = m.name );
SELECT `bool`  FROM no_payment_due  WHERE `name` = 'student299';
SELECT COUNT(*)  FROM enlist  WHERE organ = 'air_force';
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month > 1;
SELECT p.name FROM person p JOIN enlist e ON p.name = e.name JOIN bool b ON p.name = b.name AND b.bool = 'true' WHERE e.organ = 'fire_department';
SELECT COUNT(*)  FROM (disabled        JOIN no_payment_due ON disabled.name = no_payment_due.name)  WHERE no_payment_due.bool = 'pos';
SELECT COUNT(*)  FROM student_loan.filed_for_bankrupcy AS A JOIN student_loan.enrolled AS B ON A.name = B.name WHERE B.school = 'occ'
SELECT COUNT(*)  FROM (disabled        JOIN male ON disabled.name = male.name)
SELECT p.name  FROM person p  JOIN disabled d ON p.name = d.name  JOIN enlist e ON p.name = e.name  WHERE e.organ = 'navy';
SELECT p.name FROM male m JOIN no_payment_due npd ON m.name = npd.name WHERE m.name IN (SELECT name FROM person) AND npd.bool = 'pos';
SELECT      u.employment_status,     nd.bool AS payment_status FROM      unemployed u      LEFT JOIN no_payment_due nd ON u.name = nd.name WHERE      u.name = 'student110' UNION SELECT      'Employed' AS employment_status,     (SELECT bool FROM no_payment_due WHERE name = 'student110') AS payment_status FROM      dual WHERE      NOT EXISTS (         SELECT              1          FROM              unemployed          WHERE              unemployed.name = 'student110'     );
SELECT      (COUNT(male.name) * 100.0 / COUNT(person.name)) AS percentage_male_students FROM      male,     person;
SELECT `school`, gender FROM `enrolled`  JOIN `male` ON `enrolled.name` = `male.name` WHERE `enrolled.name` = 'student34' OR `male.name` = 'student34';
SELECT l.longest_absense_from_school, l.organ  FROM longest_absense_from_school l  JOIN enlist e ON l.name = e.name  JOIN enlist d ON d.name = l.name AND d.organ = 'fire_department'  WHERE l.month = (SELECT MAX(month) FROM longest_absense_from_school WHERE name = d.name) AND d.organ = 'fire_department';
SELECT COUNT(*)  FROM longest_absense_from_school  JOIN person ON longest_absense_from_school.name = person.name  WHERE longest_absense_from_school.month = 1  AND enlist.organ = 'air_force';
SELECT unemployed.name FROM unemployed JOIN male ON unemployed.name = male.name JOIN disabled ON unemployed.name = disabled.name;
SELECT COUNT(*)  FROM male  JOIN enrolled ON male.name = enrolled.name  WHERE school = 'occ';
SELECT      (COUNT(CASE WHEN m.name THEN 1 END) / COUNT(p.name)) * 100 AS male_percentage_in_air_force FROM      person p JOIN      enlisted e ON p.name = e.name JOIN      male m ON p.name = m.name JOIN      filed_for_bankrupcy f ON p.name = f.name JOIN      unemployed u ON p.name = u.name JOIN      longest_absense_from_school l ON p.name = l.name JOIN      bool b ON p.name = b.name JOIN      enrolled en ON p.name = en.name JOIN      disabled d ON p.name = d.name WHERE      en.school = 'ucla'     AND en.month IS NOT NULL     AND e.organ = 'air_force';
SELECT      AVG(COUNT(enrolled.name)) AS average_number FROM      disabled JOIN      person ON disabled.name = person.name LEFT JOIN      male ON person.name = male.name LEFT JOIN      enrolled ON enrolled.name = person.name WHERE      disabled.name NOT IN (SELECT name FROM male) AND enrolled.school = 'uci';
SELECT COUNT(*)  FROM enrolled  WHERE month = 0;
SELECT p.name FROM person p JOIN enlist e ON p.name = e.name WHERE e.organ = 'marines';
SELECT COUNT(*)  FROM enlist  WHERE organ = 'navy';
SELECT name FROM longest_absense_from_school WHERE month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT organ  FROM enlist  GROUP BY organ  ORDER BY COUNT(name) DESC  LIMIT 1;
SELECT COUNT(*)  FROM longest_absense_from_school  WHERE month < 3;
SELECT COUNT(*)  FROM no_payment_due  WHERE bool = 'neg' AND name IN (SELECT name FROM unemployed);
SELECT COUNT(*)  FROM (enlist        INNER JOIN female_students ON enlist.name = female_students.name)        INNER JOIN male ON female_students.name != male.name  WHERE organ = 'army';
SELECT organ FROM enlist JOIN male ON enlist.name = male.name GROUP BY organ ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(*)  FROM disabled  WHERE name IN (     SELECT name      FROM longest_absense_from_school      WHERE month = 0 );
SELECT COUNT(*)  FROM unemployed  WHERE name IN (SELECT name FROM disabled)  AND name IN (SELECT name FROM unemployed);
SELECT p.name  FROM person p  JOIN disabled d ON p.name = d.name  JOIN longest_absense_from_school las ON p.name = las.name  WHERE las.month > 5;
SELECT COUNT(*)  FROM (enlisted e JOIN filed_for_bankruptcy fb ON e.name = fb.name)  JOIN enlist l ON e.name = l.name AND l.organ = 'marines';
SELECT COUNT(*)  FROM student_loan.filed_for_bankrupcy AS F  INNER JOIN student_loan.disabled AS D  ON F.name = D.name;
SELECT MAX(COUNT(longest_absense_from_school.month))  FROM enrolled  JOIN longest_absense_from_school ON enrolled.name = longest_absense_from_school.name  WHERE EXISTS (     SELECT * FROM enlist      WHERE enlist.name = enrolled.name AND enlist.organ = 'air_force' )
SELECT COUNT(*)  FROM (   SELECT p.name    FROM person AS p    JOIN filed_for_bankrupcy AS fb ON p.name = fb.name    JOIN longest_absense_from_school AS las ON p.name = las.name    WHERE las.month < 6 ) AS student_absence JOIN enlist AS e ON student_absence.name = e.name AND e.organ = 'fire_department'
SELECT COUNT(*)  FROM disabled  WHERE name IN (SELECT name FROM person)  AND name NOT IN (SELECT name FROM unemployed)  AND name NOT IN (SELECT name FROM longest_absense_from_school WHERE month = 0);
SELECT      organ,     (COUNT(CASE WHEN name IN (SELECT name FROM male) THEN 1 END) * 1.0 / COUNT(DISTINCT person.name)) * 100 AS percentage_of_males FROM      enlist e JOIN      person p ON e.name = p.name GROUP BY      organ ORDER BY      COUNT(CASE WHEN name IN (SELECT name FROM male) THEN 1 END) DESC LIMIT 1;
SELECT COUNT(*)  FROM Answer  WHERE AnswerText = 'No' AND QuestionID = 19;
SELECT COUNT(DISTINCT T3.UserID) AS UserCount  FROM Question AS T1  JOIN Answer AS T3 ON T1.QuestionID = T3.QuestionID   JOIN Survey AS T2 ON T3.SurveyID = T2.SurveyID   WHERE T1.questionid = 13 AND T2.SurveyID BETWEEN 2016 AND 2019
SELECT COUNT(DISTINCT UserID)  FROM Answer  JOIN Survey ON Answer.SurveyID = Survey.SurveyID  JOIN Question ON Answer.QuestionID = Question.QuestionID  WHERE Answer.AnswerText BETWEEN '27' AND '35'  AND Question.questiontext = 'Age'  AND Survey.Description LIKE '%2018%'
SELECT COUNT(DISTINCT A.UserID)  FROM Answer A  JOIN Survey S ON A.SurveyID = S.SurveyID  JOIN Question Q1 ON A.QuestionID = Q1.QuestionID  JOIN Question Q2 ON A.QuestionID = Q2.QuestionID  WHERE S.Description = 2019  AND Q1.questiontext = 'Are you from the United States?'  AND Q1.AnswerText = 'Yes'  AND Q2.questiontext = 'Do you have a family history of mental illness?'  AND Q2.AnswerText = 'Yes'
SELECT      s.Description AS SurveyYear, COUNT(*) AS NumberOfPeopleWithMentalIllness FROM      Survey s JOIN      Answer a ON s.SurveyID = a.SurveyID JOIN      Question q ON a.QuestionID = q.QuestionID WHERE      s.SurveyID BETWEEN 2016 AND 2019 AND      q.questionid = 34 AND      a.AnswerText = 'Yes' GROUP BY      s.Description ORDER BY      NumberOfPeopleWithMentalIllness DESC LIMIT 1;
SELECT COUNT(*)  FROM Answer A  JOIN Survey S ON A.SurveyID = S.SurveyID  JOIN Question Q ON A.QuestionID = Q.QuestionID   WHERE Q.questiontext = 'Do you have a family history of mental illness?'    AND A.AnswerText = 'Yes'    AND S.Description LIKE '%2017%'    AND Q.questionid = (     SELECT Q1.questionid      FROM Question Q1      WHERE Q1.questiontext = 'Are you a female?'        AND Q1.AnswerText = 'Female'   )    AND Q.questionid = (     SELECT Q2.questionid      FROM Question Q2      WHERE Q2.questiontext = 'What state do you live in?'        AND Q2.AnswerText = 'Nebraska'   );
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE AnswerText = 'Yes' AND QuestionID = 54;
SELECT      MIN(SurveyID) as YoungestUserID, MAX(SurveyID) as OldestUserID FROM      Answer  WHERE      QuestionID = 1;
SELECT Country  FROM (   SELECT Answer.SurveyID, T2.Country, COUNT(*) as UserCount   FROM Answer    INNER JOIN (     SELECT SurveyID, MAX(SurveyID) as MaxSurveyID, Description, Country     FROM Survey     GROUP BY Description     HAVING MAX(Description) LIKE '%Country%'   ) AS T2 ON Answer.SurveyID = T2.MaxSurveyID   GROUP BY Answer.SurveyID, T2.Country ) AS SubQuery WHERE UserCount = (   SELECT MIN(UserCount)   FROM (     SELECT COUNT(*) as UserCount     FROM Answer     WHERE QuestionID = 3     GROUP BY SurveyID   ) AS MinUserQuery )
SELECT AVG(Age)  FROM (     SELECT T3.Age      FROM Answer AS T1      JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID      JOIN Question AS T3 ON T1.QuestionID = T3.QuestionID      WHERE T3.QuestionText = 'United States' AND T1.AnswerText = 'United States' AND T3.QuestionID = 3 )
SELECT      (SUM(CASE WHEN AT.AnswerText IN ('Yes', 'Maybe') THEN 1 ELSE 0 END) * 100 / COUNT(AA.SurveyID)) AS Percentage FROM      Answer AT JOIN      Answer AS AA ON AT.SurveyID = AA.SurveyID JOIN      Survey QS ON AA.SurveyID = QS.SurveyID JOIN      Question Q ON AA.QuestionID = Q.QuestionID WHERE      Q.questiontext = 'Would you bring up a mental health issue with a potential employer in an interview?';
SELECT COUNT(DISTINCT s.SurveyID)  FROM Survey s  JOIN Answer a ON s.SurveyID = a.SurveyID  WHERE YEAR(s.Description) = 2014  GROUP BY s.SurveyID  HAVING COUNT(a.AnswerText) > 200;
SELECT MAX(A.AnswerText)  FROM Answer A  JOIN Survey S ON A.SurveyID = S.SurveyID  JOIN Question Q ON A.QuestionID = Q.QuestionID  WHERE Q.questiontext = 'what is your age?' AND S.Description = '2014'
SELECT COUNT(*)  FROM Answer  JOIN Question ON Answer.QuestionID = Question.QuestionID  JOIN Survey ON Answer.SurveyID = Survey.SurveyID  WHERE Question.questiontext = 'Would you bring up a mental health issue with a potential employer in an interview?'  AND Answer.AnswerText = 'No'  AND Survey.Description = 2014;
SELECT T3.UserID  FROM Question AS T1  JOIN Answer AS T3 ON T1.questionid = T3.QuestionID  JOIN Survey AS T2 ON T2.SurveyID = T3.SurveyID  WHERE T1.questiontext = 'Do you think that discussing a physical health issue with your employer would have negative consequences?'  AND T3.AnswerText = 'Yes'  AND T2.Description = 2014;
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE SurveyID = 2014;
SELECT AnswerText  FROM Answer  JOIN Survey ON Answer.SurveyID = Survey.SurveyID  JOIN Question ON Answer.QuestionID = Question.QuestionID  WHERE Question.questiontext = 'Any additional notes or comments' AND Survey.Description = '2014' AND AnswerText != -1;
SELECT q.questiontext  FROM Question q  JOIN Answer a ON q.questionid = a.questionid  JOIN Survey s ON a.surveyid = s.surveyid  WHERE s.Description IN ('2014', '2016')  GROUP BY q.questionid  HAVING COUNT(DISTINCT s.surveyid) = 2;
SELECT COUNT(DISTINCT s.UserID)  FROM Survey s  JOIN Answer a ON s.SurveyID = a.SurveyID  JOIN Question q ON a.QuestionID = q.QuestionID  WHERE q.QuestionID = (SELECT questionid FROM question WHERE questiontext = 'Country where user lived')  AND a.AnswerText = 'Canada'  AND s.Description = '2018's survey';
SELECT q.questiontext  FROM Question q  JOIN Survey s ON q.QuestionID = s.SurveyID  WHERE s.Description = 2014;
SELECT COUNT(*)  FROM Answer A  JOIN Survey S ON A.SurveyID = S.SurveyID  JOIN Question Q ON A.QuestionID = Q.QuestionID  WHERE S.Description = '2016'  AND Q.questionid = 32  AND A.AnswerText = 'Yes';
SELECT COUNT(DISTINCT Answer.UserID)  FROM Answer  JOIN Question ON Answer.QuestionID = Question.questionid  JOIN Survey ON Answer.SurveyID = Survey.SurveyID  WHERE Question.questiontext = 'Have you had a mental health disorder in the past?' AND Answer.AnswerText = 'Yes' AND Survey.SurveyID BETWEEN 2016 AND 2018;
SELECT AVG(T3.AnswerText)  FROM Question AS T1  JOIN Answer AS T3 ON T1.questionid = T3.QuestionID  JOIN Survey AS T2 ON T2.SurveyID = T3.SurveyID  WHERE T1.questiontext = 'What is your age?' AND T2.Description = 2014
SELECT      (COUNT(CASE WHEN s.SurveyID = 2019 AND q.QuestionID = 33 AND a.AnswerText = 'Yes' THEN s.SurveyID END) / COUNT(CASE WHEN s.SurveyID = 2019 AND q.QuestionID = 33 THEN s.SurveyID END) - COUNT(CASE WHEN s.SurveyID = 2016 AND q.QuestionID = 33 AND a.AnswerText = 'Yes' THEN s.SurveyID END) / COUNT(CASE WHEN s.SurveyID = 2016 AND q.QuestionID = 33 THEN s.SurveyID END)) * 100 AS RateIncrease FROM      Question q INNER JOIN      Answer a ON q.questionid = a.questionid INNER JOIN      Survey s ON a.surveyid = s.surveyid WHERE      q.questiontext = 'Do you currently have a mental disorder?';
SELECT questionid  FROM Question  WHERE questiontext = 'Would you bring up a physical health issue with a potential employer in an interview?';
SELECT COUNT(*)  FROM Answer  WHERE QuestionID = 20;
SELECT COUNT(*)  FROM Answer  WHERE UserID = 5;
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE SurveyID = 2016;
SELECT COUNT(*)  FROM Question  WHERE QuestionID IN (     SELECT A.QuestionID      FROM Answer A      JOIN Survey S ON A.SurveyID = S.SurveyID      WHERE S.Description = 'mental health survey for 2018' );
SELECT COUNT(*)  FROM Answer A  JOIN Survey S ON A.SurveyID = S.SurveyID  JOIN Question Q ON A.QuestionID = Q.QuestionID  WHERE Q.questiontext = 'What country do you work in?';
SELECT Answer.AnswerText  FROM Answer  JOIN Survey ON Answer.SurveyID = Survey.SurveyID  JOIN Question ON Answer.QuestionID = Question.QuestionID  WHERE Survey.Description = 'Do you currently have a mental health disorder?'  AND Answer.UserID = 2681;
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE SurveyID = 2016;
SELECT AnswerText  FROM Answer  JOIN Question ON Answer.QuestionID = Question.QuestionID  JOIN Survey ON Answer.SurveyID = Survey.SurveyID   WHERE Question.questiontext = 'What country do you work in?'  GROUP BY AnswerText  ORDER BY COUNT(AnswerText) DESC  LIMIT 1;
SELECT COUNT(DISTINCT AnswerText)  FROM Answer  JOIN Question ON Answer.QuestionID = Question.QuestionID  WHERE Question.questiontext = 'Describe the conversation you had with your previous employer about your mental health, including their reactions and actions taken to address your mental health issue/questions.';
SELECT COUNT(*)  FROM Answer  JOIN Question ON Answer.QuestionID = Question.questionid  WHERE Question.questiontext = 'What US state or territory do you work in?' AND Answer.AnswerText = 'Kansas';
SELECT COUNT(*)  FROM Answer  WHERE AnswerText != '-1' AND QuestionID = (SELECT questionid FROM Question WHERE questiontext = 'Any additional notes or comments.')
SELECT COUNT(*)  FROM Answer  JOIN Question ON Answer.QuestionID = Question.questionid  JOIN Survey ON Answer.SurveyID = Survey.SurveyID  WHERE Question.questiontext = 'Have you ever been diagnosed with a mental health disorder?' AND Answer.AnswerText = 'Yes';
SELECT COUNT(DISTINCT UserID)  FROM Answer  WHERE SurveyID = 2018;
SELECT COUNT(DISTINCT Answer.UserID)  FROM Answer  JOIN Question ON Answer.QuestionID = Question.questionid  WHERE Question.questiontext = 'Overall, how much importance does your employer place on physical health?'
SELECT q.questiontext  FROM Question q  JOIN Answer a ON q.questionid = a.QuestionID  WHERE a.UserID = 2183 AND a.AnswerText = 'Mood Disorder (Depression, Bipolar Disorder, etc)';
SELECT      (COUNT(CASE WHEN A.AnswerText = 'Yes' THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM      Answer A  JOIN      Survey S ON A.SurveyID = S.SurveyID  JOIN      Question Q ON A.QuestionID = Q.QuestionID  WHERE      Q.questiontext = 'Has your employer ever formally discussed mental health (for example, as part of a wellness campaign or other official communication)?';
SELECT      CASE          WHEN (COUNT(A.UserID) - COUNT(B.UserID)) > 0 THEN COUNT(A.UserID) / COUNT(B.UserID) ELSE NULL END AS 'TimesMore'  FROM      Answer A  JOIN      Survey S1 ON A.SurveyID = S1.SurveyID  WHERE      S1.Description = 'mental health survey for 2017' UNION ALL SELECT      CASE          WHEN (COUNT(C.UserID) - COUNT(D.UserID)) > 0 THEN COUNT(C.UserID) / COUNT(D.UserID) ELSE NULL END AS 'TimesMore'  FROM      Answer C  JOIN      Survey S2 ON C.SurveyID = S2.SurveyID  WHERE      S2.Description = 'mental health survey for 2018'
SELECT      (COUNT(CASE          WHEN Survey.SurveyID LIKE '2016%' AND Answer.AnswerText = 'Yes' AND Answer.QuestionID = (SELECT questionid FROM Question WHERE questiontext = 'Have you ever been diagnosed with a mental health disorder?')     THEN Survey.SurveyID END)      / COUNT(CASE          WHEN Survey.SurveyID LIKE '2016%'          THEN Survey.SurveyID END)) * 100 AS Percentage FROM      Survey JOIN Answer ON Survey.SurveyID = Answer.SurveyID  JOIN Question ON Answer.QuestionID = Question.questionid WHERE      Question.questiontext = 'Have you ever been diagnosed with a mental health disorder?';
SELECT COUNT(*)  FROM Answer A  JOIN Survey S ON A.SurveyID = S.SurveyID  JOIN Question Q ON A.QuestionID = Q.QuestionID  WHERE Q.questiontext = 'Age' AND A.AnswerText < 25 AND S.Description = 2016;
SELECT      AVG(COUNT(A.UserID)) AS AverageRespondentsPerSurvey FROM      Survey  WHERE      Survey.Description BETWEEN 2014 AND 2019;
SELECT COUNT(DISTINCT s.UserID)  FROM Survey s  JOIN Answer a ON s.SurveyID = a.SurveyID  WHERE s.Description = '2019 Survey'  AND a.AnswerText = '1'  AND a.QuestionID = (SELECT Q.questionid FROM Question Q WHERE Q.questiontext = 'Have you ever sought treatment for a mental health disorder from a mental health professional?');
SELECT COUNT(*)  FROM Answer A  JOIN Survey S ON A.SurveyID = S.SurveyID  JOIN Question Q ON A.QuestionID = Q.QuestionID  WHERE S.Description = '2014' AND Q.questiontext = 'work remotely at least 50% of the time' AND A.AnswerText = 'Yes';
SELECT COUNT(DISTINCT QuestionID)  FROM Answer  WHERE SurveyID = 'Mental_Health_Survey_ID';
SELECT COUNT(DISTINCT s.SurveyID)  FROM Answer a  JOIN Question q ON a.QuestionID = q.QuestionID  JOIN Survey s ON a.SurveyID = s.SurveyID  WHERE q.questiontext = 'Substance Use Disorder' AND a.AnswerText = 'Diagnosed';
SELECT AnswerText, COUNT(*) as Frequency FROM Answer JOIN Survey ON Answer.SurveyID = Survey.SurveyID WHERE Survey.SurveyID = 2017 AND Answer.QuestionID = 85 GROUP BY AnswerText ORDER BY Frequency DESC LIMIT 3;
SELECT      (SUM(revenue['Year'] = 1998) - SUM(revenue['Year'] = 1997)) AS revenue_difference FROM      revenue;
SELECT      'Studio Entertainment' as Segment,      SUM(`Disney Consumer Products[NI 2]` + `Disney Interactive[NI 3][Rev 1]` + `Walt Disney Parks and Resorts` + `Disney Media Networks`) as Revenue  FROM      revenue  WHERE      Year = 1998  UNION  SELECT      'Disney Media Networks',      SUM(`Disney Consumer Products[NI 2]` + `Disney Interactive[NI 3][Rev 1]` + `Walt Disney Parks and Resorts`) as Revenue  FROM      revenue  WHERE      Year = 1998  ORDER BY      Revenue DESC  LIMIT 1;
SELECT director.name FROM director JOIN movies_total_gross ON director.name = movies_total_gross.director JOIN characters ON movies_total_gross.movie_title = characters.movie_title WHERE characters.movie_title = 'Pinocchio';
SELECT villains  FROM characters  WHERE movie_title IN (     SELECT title      FROM movies_total_gross      WHERE director = 'Wolfgang Reitherman' );
SELECT COUNT(*)  FROM director d  JOIN movies_total_gross m ON d.name = 'Wolfgang Reitherman' AND instr(m.release_date, '-') + 1 = 3 AND SUBSTR(m.release_date, instr(m.release_date, '-') + 1, 3) = 'Dec'
SELECT director.name FROM characters JOIN movie_title ON characters.movie_title = movie_title JOIN director ON movie_title = director.movie_title WHERE characters.song = 'Once Upon a Dream';
SELECT T3.voice_actor  FROM characters AS T1  JOIN voice_actors AS T3 ON T3.character = T1.villain  WHERE T1.movie_title = 'Alice in Wonderland'
SELECT m.release_date  FROM movies_total_gross m  JOIN voice_actors v ON m.movie_title = v.movie  WHERE v.voice_actor = 'Alan Tudyk';
SELECT COUNT(*)  FROM voice-actors v  JOIN characters c ON v.character = c.movie_title  WHERE v.voice-actor = 'Alan Tudyk' AND (c.release_date, INSTR(c.release_date, '-') + 5) > 12;
SELECT COUNT(movie_title)  FROM movies_total_gross  WHERE director = 'Wolfgang Reitherman' AND genre = 'Comedy';
SELECT movie_title FROM movies_total_gross JOIN director ON movies_total_gross.release_date = director.release_date WHERE director.name = 'Wolfgang Reitherman' AND movies_total_gross.total_gross = (     SELECT MAX(total_gross)     FROM movies_total_gross );
SELECT movie_title FROM movies_total_gross JOIN director ON movies_total_gross.release_date = director.release_date WHERE director.name = 'Wolfgang Reitherman' AND movies_total_gross.MPAA_rating = 'G';
SELECT characters.movie_title, characters.villain FROM characters JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title WHERE movies_total_gross.total_gross = (SELECT MAX(total_gross) FROM movies_total_gross) GROUP BY characters.villain ORDER BY COUNT(*) DESC LIMIT 1;
SELECT genre  FROM movies_total_gross  WHERE title IN (SELECT movie_title                  FROM characters                  WHERE villian = 'Commander Rourke');
SELECT villian  FROM characters  WHERE movie_title = 'Beauty and the Beast';
SELECT movie_title FROM characters WHERE hero = 'Robin Hood';
SELECT movie_title FROM characters WHERE song = 'I Thought I Lost You';
SELECT voice_actor  FROM voice-actors  WHERE character = 'Binkie Muddlefoot';
SELECT characters.hero  FROM characters  JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title  WHERE movies_total_gross.total_gross = '$222,527,828';
SELECT song  FROM characters  JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title  WHERE substr(release_date, instr(release_date, ', ') + 1) BETWEEN 1970 AND 1979  ORDER BY total_gross DESC  LIMIT 1;
SELECT characters.movie_title, characters.hero  FROM characters  JOIN director ON characters.director = director.name  WHERE director.name = 'Will Finn';
SELECT voice_actor  FROM voice-actors  WHERE movie = 'The Little Mermaid' AND character = 'hero';
SELECT director.name FROM director JOIN voice_actors ON director.name = voice_actors.director JOIN characters ON characters.movie_title = voice_actors.movie WHERE characters.character = 'Aunt Sarah' AND voice_actors.voice_actor = 'Verna Felton';
SELECT `release_date`  FROM `movies_total_gross`  JOIN `voice-actors` ON `movies_total_gross.movie_title` = `voice-actors.movie`  WHERE `voice-actors.character` = 'Hyacinth Hippo' AND `voice-actors.voice-actor` = 'Tress MacNeille';
SELECT director.name FROM characters JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title WHERE movies_total_gross.genre = 'Adventure' AND movies_total_gross.release_date = 'Mar 30, 2007';
SELECT m.movie_title  FROM movies_total_gross m  JOIN director d ON m.director = d.name  WHERE d.name = 'Wolfgang Reitherman'  AND m.inflation_adjusted_gross = (     SELECT MAX(inflation_adjusted_gross) FROM movies_total_gross )
SELECT heroes.movie_title, characters.hero  FROM characters  JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title  WHERE movies_total_gross.release_date = '4-Mar-16' AND movies_total_gross.genre = 'Adventure';
SELECT m.movie_title  FROM movies_total_gross m  JOIN characters c ON m.movie_title = c.movie_title  WHERE c.hero = 'Donald Duck'  GROUP BY m.movie_title, c.movie_title  HAVING COUNT(m.movie_title) > 1  ORDER BY MAX(m.total_gross) DESC  LIMIT 1;
SELECT COUNT(*)  FROM director  WHERE name = 'Wolfgang Reitherman';
SELECT name  FROM director  GROUP BY name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM movies_total_gross  WHERE MPAA_rating = 'R'  AND genre = 'Horror'  AND (cast(SUBSTR(release_date, instr(release_date, ', ') + 1) as int) BETWEEN 1990 AND 2015);
SELECT character  FROM voice-actors  WHERE voice-actor = 'Frank Welker';
SELECT mtg.total_gross  FROM movies_total_gross mtg  JOIN characters ch ON mtg.movie_title = ch.movie_title  WHERE ch.song = 'Little Wonders';
SELECT MPAA_rating  FROM disney.movies_total_gross  WHERE villains = 'Turbo';
SELECT COUNT(*)  FROM voice-actors v  JOIN characters c ON v.character = c.movie_title  JOIN movies_total_gross mg ON c.movie_title = mg.movie_title  WHERE v.voice_actor = 'Bill Thompson' AND mg.MPAA_rating IN ('R', 'PG')
SELECT COUNT(*)  FROM director d  JOIN movies_total_gross m ON d.name = 'Gary Trousdale' AND m.genre = 'Adventure';
SELECT d.name FROM director d JOIN voice_actors v ON d.name = v.director WHERE v.voice_actor = 'Bill Thompson' GROUP BY d.name ORDER BY COUNT(d.name) DESC LIMIT 1;
SELECT movie_title FROM movies_total_gross WHERE genre = 'Animation' AND MPAA_rating = 'PG' AND director IN (     SELECT name     FROM director     WHERE director = 'Ron Clements' ) ORDER BY total_gross DESC LIMIT 1;
SELECT DISTINCT v.voice-actor  FROM voice_actors v  JOIN characters c ON v.character = c.movie_title  JOIN director d ON c.release_date = 'Feb 9, 1940' AND d.name = 'Ben Sharpsteen';
SELECT COUNT(*)  FROM disney.director d  JOIN disney.movies_total_gross mg ON d.name = mg.director  WHERE d.name = 'Ron Clements'  AND mg.genre = 'Adventure'  AND mg.MPAA_rating = 'PG';
SELECT COUNT(*)  FROM movies_total_gross  WHERE genre = 'Horror';
SELECT villian FROM characters WHERE movie_title = 'The Great Mouse Detective';
SELECT voice_actor  FROM voice-actors  WHERE movie = 'Meet the Robinsons';
SELECT name  FROM director  GROUP BY name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT Year FROM revenue WHERE Year BETWEEN 2000 AND 2010 AND `Studio Entertainment[NI 1]` = (SELECT MAX(`Studio Entertainment[NI 1]`) FROM revenue WHERE Year BETWEEN 2000 AND 2010);
SELECT song  FROM `movies_total_gross`  JOIN `characters` ON `movies_total_gross.movie_title` = `characters.movie_title`  WHERE `genre` = 'Drama';
SELECT va.voice_actor  FROM characters c  JOIN voice_actors va ON c.movie_title = va.movie AND c.hero = 1;
SELECT DISTINCT d.name  FROM director AS d  JOIN movies_total_gross AS mg ON mg.director = d.name  WHERE cast(SUBSTR(mg.release_date, instr(mg.release_date, ', ') + 1) as int) BETWEEN 1990 AND 2000;
SELECT `voice-actor`  FROM `voice-actors`  WHERE `movie` = 'The Rescuers' AND `villian` = 'TRUE';
SELECT director.name, characters.movie_title, voice_actors.voice_actor FROM director JOIN characters ON director.name = characters.director JOIN voice_actors ON characters.movie_title = voice_actors.movie AND characters.hero = voice_actors.character OR characters.villian = voice_actors.character;
SELECT DISTINCT c.movie_title, c.hero, c.villian FROM characters c JOIN movies_total_gross mg ON c.movie_title = mg.movie_title WHERE mg.genre LIKE '%animation%' AND mg.MPAA_rating = 'PG';
SELECT movie_title FROM movies_total_gross WHERE total_gross = (SELECT MAX(total_gross) FROM movies_total_gross) AND song IS NULL;
SELECT director.name FROM director JOIN (SELECT movie_title, COUNT(DISTINCT character) AS num_voice_actors       FROM characters       JOIN voice_actors ON characters.movie_title = voice_actors.movie       GROUP BY movie_title       ORDER BY num_voice_actors DESC       LIMIT 1) AS mv ON director.name = director_direct_movie.director
SELECT T3.voice_actor  FROM characters AS T1  JOIN movies_total_gross AS T2 ON T1.movie_title = T2.movie_title  JOIN voice_actors AS T3 ON T1.movie_title = T3.movie  WHERE T2.release_date = 'Nov 24, 2010';
SELECT DISTINCT d.name  FROM director d  JOIN characters c ON d.director = c.movie_title  WHERE c.song IS NOT NULL;
SELECT mtg.total_gross  FROM movies_total_gross mtg  JOIN voice_actors va ON mtg.movie_title = va.movie  WHERE va.voice_actor = 'Jim Cummings';
SELECT m.movie_title  FROM movies_total_gross m  JOIN director d ON m.release_date = d.release_date  WHERE d.name = 'Ron Clements'  ORDER BY m.total_gross DESC  LIMIT 1;
SELECT AVG(movies_total_gross.total_gross)  FROM movies_total_gross  JOIN voice_actors ON movies_total_gross.movie_title = voice_actors.movie  WHERE voice_actors.voice_actor = 'Sterling Holloway';
SELECT      (SUM(CASE WHEN movie_title IN (SELECT DISTINCT movie_title FROM characters WHERE song IS NOT NULL) THEN movies_total_gross.total_gross ELSE 0 END) / SUM(movies_total_gross.total_gross)) * 100 AS percentage FROM      movies_total_gross;
SELECT movie_title, genre FROM movies_total_gross WHERE substr(release_date, length(release_date) - 3, length(release_date)) = '2016';
SELECT villian  FROM characters  WHERE movie_title = 'Little Mermaid';
SELECT movie_title  FROM director  WHERE name = 'Jack Kinney';
SELECT      m1.movie_title,     (m1.inflation_adjusted_gross / m1.total_gross) as estimated_inflation_rate FROM      movies_total_gross AS m1 WHERE      m1.total_gross = (SELECT MAX(total_gross) FROM movies_total_gross)
SELECT `movie_title`, `release_date` FROM `movies_total_gross` WHERE `MPAA_rating` = 'PG-13' AND `genre` = 'Romantic Comedy';
SELECT m.title, c.character  FROM movies_total_gross m JOIN voice_actors v ON m.title = v.movie  JOIN characters c ON m.title = c.movie_title WHERE v.voice_actor = 'Bill Thompson';
SELECT      c.movie_title,      c.song  FROM      characters c  JOIN      director d ON c.director = d.name  WHERE      d.name = 'Ron Clements';
SELECT      movie_title,      hero,      song FROM      characters WHERE      director.name = 'Wolfgang Reitherman'     AND STRFTIME('%Y', release_date) = '1977';
SELECT m.movie_title, d.name  FROM movies_total_gross m  JOIN characters c ON m.movie_title = c.movie_title  JOIN director d ON m.movie_title = d.director  WHERE c.hero = 'Donald Duck';
SELECT      characters.hero,     director.name,     movies_total_gross.release_date FROM      characters JOIN      director ON characters.movie_title = director.director JOIN      movies_total_gross ON characters.movie_title = movies_total_gross.movie_title WHERE      characters.movie_title = 'Mulan';
SELECT movie_title, total_gross, MPAA_rating  FROM movies_total_gross WHERE movie_title IN (     SELECT DISTINCT movie_title      FROM characters      WHERE hero = 'Elsa' );
SELECT      movie_title,     name as director,     release_date FROM      characters c JOIN      voice-actors va ON c.movie_title = va.movie AND va.voice-actor = 'Freddie Jones';
SELECT m.movie_title, mg.total_gross FROM voice-actors v JOIN characters c ON v.character = c.character JOIN movies_total_gross mg ON c.movie_title = mg.movie_title JOIN movies_total_gross mg_adj ON c.movie_title = mg_adj.movie_title AND mg_adj.inflation_adjusted_gross IS NOT NULL WHERE v.voice-actor = 'Frank Welker' AND (mg_adj.inflation_adjusted_gross / mg.total_gross) < 2;
SELECT D.name FROM director D JOIN movies_total_gross MTG ON D.director = MTG.director WHERE MTG.total_gross = (SELECT MAX(total_gross) FROM movies_total_gross)
SELECT      v.voice_actor,     c.villian FROM      voice-actors v JOIN      characters c ON v.character = c.movie_title WHERE      c.movie_title = 'Cinderella';
SELECT `voice-actors.voice-actor` FROM `voice-actors` JOIN `movies_total_gross` ON `movies_total_gross.movie_title` = 'Lion King' JOIN `characters` ON `characters.movie_title` = `movies_total_gross.movie_title` WHERE `characters.hero` = 'Yes';
SELECT      d.name,     m.MPAA_rating FROM      characters c JOIN      movies_total_gross m ON c.movie_title = m.movie_title JOIN      director d ON c.movie_title = d.director WHERE      m.genre = 'Musical' AND      SUBSTR(m.release_date, LENGTH(m.release_date) - 3, LENGTH(m.release_date)) = '1993';
SELECT      m.movie_title,      d.name AS director FROM      movies_total_gross m JOIN      director d ON m.director = d.name WHERE      m.genre = 'Comedy' AND      SUBSTR(m.release_date, INSTR(m.release_date, '-') + 3, 4) BETWEEN '1991' AND '2000' LIMIT 5;
SELECT m.movie_title, d.name  FROM movies_total_gross m  JOIN director d ON m.director = d.name  WHERE STR_TO_DATE(m.release_date, '%Y-%m-%d') BETWEEN '2001-01-01' AND '2005-12-31'  AND m.total_gross > (SELECT AVG(m2.total_gross) FROM movies_total_gross m2) * 1.1;
SELECT voice_actor  FROM voice-actors  WHERE movie = 'Hercules' AND character = 'Calliope';
SELECT COUNT(*)  FROM voice-actors  JOIN characters ON voice-actors.character = characters.movie_title  WHERE characters.movie_title = 'Aladdin';
SELECT movie_title FROM voice-actors WHERE voice-actor = 'Jeff Bennett';
SELECT director.name FROM characters JOIN movie ON characters.movie_title = movie.title JOIN director ON movie.director_id = director.id WHERE characters.movie_title = 'Wreck-It Ralph';
SELECT title  FROM director  WHERE name = 'Jack Kinney';
SELECT COUNT(*)  FROM movies_total_gross  WHERE substr(release_date, length(release_date) - 1, length(release_date)) between '37' and '50';
SELECT song  FROM characters  JOIN director ON characters.director = director.name  WHERE director.name = 'Ben Sharpsteen';
SELECT `release_date`  FROM characters  JOIN director ON characters.director = director.name  WHERE characters.movie_title = 'The Lion King' AND director.name = 'Roger Allers';
SELECT      villains.villain  FROM      characters  JOIN      voice_actors ON characters.movie_title = voice_actors.movie  WHERE      (characters.hero = 'Scott Weinger' AND characters.villian IS NOT NULL) OR      (characters.hero = 'Brad Kane' AND characters.villian IS NOT NULL);
SELECT movie_title FROM characters JOIN director ON characters.release_date = director.release_date WHERE director.name = 'Wolfgang Reitherman' AND villain IS NULL;
SELECT movie_title  FROM disney.director  WHERE name = 'Jack Kinney' AND SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) < '47';
SELECT DISTINCT d.name  FROM director AS d  JOIN movies_total_gross AS mg ON d.director = mg.director  WHERE mg.total_gross > 100000000;
SELECT movie_title, song  FROM characters  JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title  WHERE total_gross = (SELECT MAX(total_gross) FROM movies_total_gross);
SELECT d.name FROM director AS d JOIN characters AS c ON d.director = c.director JOIN movies_total_gross AS mg ON c.movie_title = mg.movie_title WHERE substr(mg.release_date, length(mg.release_date) - 3, length(mg.release_date)) BETWEEN '1937' AND '1990' GROUP BY d.name ORDER BY SUM(mg.total_gross) DESC LIMIT 1;
SELECT characters.movie_title, characters.hero  FROM characters  JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title  WHERE movies_total_gross.genre = 'Comedy';
SELECT DISTINCT v.voice-actor  FROM voice-actors v  JOIN characters c ON v.character = c.movie_title  JOIN director d ON c.director = d.name  WHERE d.name = 'Wolfgang Reitherman';
SELECT genre  FROM characters  WHERE hero = 'Taran';
SELECT      v.voice_actor  FROM      characters c  JOIN      voice_actors v ON c.movie_title = v.movie  WHERE      c.hero = 'Elsa' AND c.character IN (SELECT character FROM voice_actors WHERE movie IN (SELECT movie_title FROM characters WHERE hero = 'Elsa'));
SELECT      (COUNT(DISTINCT d.name) * 1.0 / COUNT(DISTINCT DISTINCT_director.name)) * 100 AS percentage FROM      (SELECT DISTINCT name FROM director) AS DISTINCT_director JOIN      movies_total_gross mg ON DISTINCT_director.name = mg.director WHERE      mg.total_gross > 100000000;
SELECT      (COUNT(CASE WHEN c.genre = 'Drama' THEN 1 END)       / COUNT(*)::float) * 100 AS percentage FROM      movies_total_gross m JOIN      characters c ON m.movie_title = c.movie_title WHERE      c.hero IS NOT NULL OR c.villian IS NOT NULL;
SELECT movie_title FROM characters WHERE substr(release_date, length(release_date) - 1, length(release_date)) ASC LIMIT 1;
SELECT COUNT(movie_title)  FROM movies_total_gross  WHERE substr(release_date, length(release_date) - 1, length(release_date)) BETWEEN '10' AND '16';
SELECT villian FROM characters WHERE release_date < (SELECT substr(release_date, length(release_date) - 1, length(release_date)) FROM characters ORDER BY release_date LIMIT 1);
SELECT movie_title FROM movies_total_gross JOIN characters ON movies_total_gross.movie_title = characters.movie_title WHERE characters.genre = 'Action' ORDER BY movies_total_gross.total_gross DESC LIMIT 1;
SELECT voice_actor  FROM voice-actors  WHERE character = 'Akela';
SELECT SUM(movies_total_gross.total_gross) FROM movies_total_gross WHERE movies_total_gross.release_date BETWEEN '2010-01-01' AND '2016-12-31';
SELECT      c.hero FROM      characters c JOIN      movies_total_gross m ON c.movie_title = m.movie_title WHERE      m.genre = 'Adventure' AND m.inflation_adjusted_gross = (SELECT MAX(inflation_adjusted_gross) FROM movies_total_gross)
SELECT director.name FROM director JOIN movies_total_gross ON director.name = director WHERE movies_total_gross.total_gross = (SELECT MIN(total_gross) FROM movies_total_gross)
SELECT      (SUM(`Walt Disney Parks and Resorts`) WHERE YEAR = 2010) /      (SUM(`Total`) WHERE YEAR = 2010) AS percentage FROM      revenue;
SELECT      (SUM(movies_total_gross.total_gross)      WHERE movies_total_gross.genre = 'Action' AND movies_total_gross.MPAA_rating = 'PG-13') /      (COUNT(movies_total_gross.movie_title)      WHERE movies_total_gross.genre = 'Action' AND movies_total_gross.MPAA_rating = 'PG-13') AS avg_gross FROM      movies_total_gross;
SELECT COUNT(*)  FROM voice-actors  JOIN movie ON voice-actors.movie = movie.title  WHERE movie.name = 'Bambi';
SELECT      DIVIDE(movies_total_gross.inflation_adjusted_gross, movies_total_gross.total_gross) as inflation_rate FROM      movies_total_gross WHERE      substr(movies_total_gross.release_date, length(movies_total_gross.release_date) - 3, length(movies_total_gross.release_date)) = '1995';
SELECT      (SELECT inflation_adjusted_gross FROM movies_total_gross WHERE movie_title = 'Cars') -      (SELECT inflation_adjusted_gross FROM movies_total_gross WHERE movie_title = 'Cars 2') AS Gross_Difference,     (SELECT movie_title FROM movies_total_gross ORDER BY inflation_adjusted_gross DESC LIMIT 1) AS More_Popular_Movie FROM      movies_total_gross;
SELECT      c.movie_title,     m.inflation_adjusted_gross FROM     director d JOIN     characters c ON d.name = c.director JOIN     movies_total_gross m ON c.movie_title = m.movie_title WHERE     d.name = 'Chris Buck' ORDER BY     m.release_date DESC LIMIT 1;
SELECT DISTINCT v.voice-actor  FROM voice-actors v  GROUP BY v.voice-actor  HAVING COUNT(v.character) > 5;
SELECT      MAX(movies_total_gross.inflation_adjusted_gross) AS highest_grossing,     (SUM(MAX(movies_total_gross.inflation_adjusted_gross)) OVER () * 100 / SUM(movies_total_gross.inflation_adjusted_gross)) AS percentage FROM      movies_total_gross ORDER BY      inflation_adjusted_gross DESC LIMIT 5;
SELECT      (COUNT(CASE WHEN m.total_gross > 100000000 THEN m.movie_title END)      / COUNT(CASE WHEN d.name = 'Gary Trousdale' THEN m.movie_title END)) * 100 AS percentage FROM      movies_total_gross m JOIN      director d ON m.director = d.name;
SELECT COUNT(*)  FROM current  WHERE ballotpedia_id IS NULL OR ballotpedia_id = '';
SELECT official_full_name  FROM current  WHERE cspan_id IS NULL OR cspan_id = '';
SELECT COUNT(*)  FROM current  WHERE birthday_bio > '1960-01-01';
SELECT COUNT(*)  FROM current  WHERE gender_bio = 'F' AND fec_id IS NULL;
SELECT google_entity_id_id  FROM current  WHERE official_full_name = 'Sherrod Brown';
SELECT      official_full_name  FROM      current  WHERE      official_full_name IN ('Sherrod Brown', 'Maria Cantwell')  ORDER BY      birthday_bio ASC  LIMIT 1;
SELECT T1.facebook  FROM current AS T1  WHERE T1.official_full_name = 'Todd Young';
SELECT COUNT(*)  FROM current  WHERE instagram IS NULL;
SELECT `official_full_name`  FROM current  JOIN social-media ON current.bioguide_id = social-media.bioguide  WHERE social-media.twitter_id = '234128524';
SELECT      c.votesmart_id, c.official_full_name, c.gender_bio, s.youtube FROM      current AS c JOIN      social_media AS s ON c.bioguide = s.bioguide WHERE      c.gender_bio = 'F';
SELECT      c.facebook FROM      current AS c WHERE      c.facebook IS NOT NULL AND     MAX(c.birthday_bio) = (SELECT MAX(birthday_bio) FROM current)
SELECT COUNT(*)  FROM current  WHERE opensecrets_id IS NULL OR opensecrets_id = ''  AND instagram IS NULL;
SELECT COUNT(*)  FROM current  WHERE official_full_name = 'Roger F. Wicker'  AND (district IS NULL OR district = '');
SELECT COUNT(*)  FROM current  WHERE official_full_name = 'Sherrod Brown';
SELECT      official_full_name  FROM      current  WHERE      bioguide_id IN (         SELECT              bioguide          FROM              historical-terms          WHERE              state_rank IS NOT NULL     );
SELECT state  FROM current  JOIN current_terms ON current.bioguide_id = current_terms.bioguide  WHERE official_full_name = 'Sherrod Brown' AND start = '1993-01-05';
SELECT COUNT(*)  FROM current  WHERE gender_bio = 'F' AND (   SELECT COUNT(*)    FROM current_terms    WHERE bioguide = current.bioguide AND type = 'total' ) > 4;
SELECT COUNT(*)  FROM current  WHERE bioguide_id IN (   SELECT bioguide FROM current_terms WHERE terms > 6 ) AND birthday_bio >= '1960-01-01'
SELECT      AVG(terms.end - terms.start) AS avg_terms FROM      current,     (         SELECT              bioguide,             MAX(end) - MIN(start) AS terms         FROM              current-terms         WHERE              gender_bio = 'F'         GROUP BY              bioguide     ) terms WHERE      current.bioguide = terms.bioguide;
SELECT      (COUNT(CASE WHEN religion_bio = 'Roman Catholic' AND instagram IS NULL THEN 1 END)      / COUNT(CASE WHEN religion_bio = 'Roman Catholic' THEN 1 END)) * 1.0 AS percentage FROM legislator.current
SELECT COUNT(*)  FROM legislator.current  WHERE gender_bio = 'M';
SELECT COUNT(*)  FROM current  WHERE party = 'Republican';
SELECT COUNT(*)  FROM social_media  WHERE instagram IS NOT NULL AND instagram <> '';
SELECT COUNT(*)  FROM legislator.historical  WHERE gender_bio = 'F';
SELECT COUNT(*)  FROM legislator.current  WHERE gender_bio = 'M' AND religion_bio = 'Roman Catholic';
SELECT `party` FROM legislator.current-terms WHERE `last` = 'Sherrod'  AND `first_name` = 'Brown' AND `start` = 2005;
SELECT official_full_name  FROM legislator.current-terms  WHERE type = 'sen' AND state_rank = 'senior' AND start LIKE '2013%';
SELECT      t1.youtube_username  FROM      (SELECT           official_full_name,           youtube       FROM           current       WHERE           official_full_name = 'Chris Van Hollen') AS t1  WHERE      t1.youtube IS NOT NULL;
SELECT COUNT(*)  FROM social_media  JOIN (     SELECT official_full_name FROM current WHERE first_name = 'Mark' AND last_name = 'Warner' ) AS mark_warner ON social_media.bioguide = current.bioguide_id  WHERE (facebook IS NOT NULL OR instagram IS NOT NULL OR twitter IS NOT NULL OR youtube IS NOT NULL)
SELECT last_name  FROM current  WHERE state = 'CA';
SELECT      official_full_name  FROM      legislator.current  WHERE      gender_bio = 'F'      AND type = 'sen';
SELECT `govtrack_id`  FROM legislator.current  WHERE `official_full_name` = 'Chris Van Hollen';
SELECT `twitter`  FROM `current`  WHERE `official_full_name` = 'Roger F. Wicker';
SELECT      official_full_name  FROM      historical  WHERE      party = 'Pro-Administration'      AND start <= 1791      AND end >= 1791;
SELECT      official_full_name  FROM      current  WHERE      gender_bio = 'F' AND party = 'Republican' AND END > Date();
SELECT `district`  FROM `current` WHERE `official_full_name` = 'Chris Van Hollen';
SELECT COUNT(*)  FROM legislator.current  JOIN legislator.historical ON legislator.current.bioguide_id = legislator.historical.bioguide_id  WHERE legislator.current.first_name = 'Richard'  AND legislator.current.last_name = 'Durbin'  AND legislator.historical.district = 20;
SELECT COUNT(DISTINCT c.bioguide_id) / 22.0 AS average_male_democrats FROM current c JOIN current_terms ct ON c.bioguide_id = ct.bioguide WHERE c.gender_bio = 'M' AND ct.party = 'Democrat' AND ct.start >= 2000 AND ct.end <= 2021;
SELECT      CASE          WHEN (calculation_with_current_legislators > calculation_with_historical_legislators) THEN 'Current female legislators'         ELSE 'Past female legislators'     END AS highest_percentage,     MAX(calculation_with_current_legislators) AS max_value FROM (     SELECT          MULTIPLY(DIVIDE(COUNT(CASE WHEN current.gender_bio = 'F' THEN current.bioguide_id END)),                   COUNT(CASE WHEN historical.gender_bio = 'F' THEN historical.bioguide_id END)) AS calculation,         (COUNT(CASE WHEN current.gender_bio = 'F' THEN current.bioguide_id END) +           COUNT(CASE WHEN historical.gender_bio = 'F' THEN historical.bioguide_id END)) AS total     FROM current, historical ) AS female_legislators_calculations
SELECT youtube_id  FROM social-media  WHERE bioguide = 'RepWassermanSchultz';
SELECT      s.facebook,      s.twitter,      s.youtube FROM      social_media s JOIN      current c ON s.bioguide = c.bioguide_id WHERE      c.official_full_name = 'Adam Kinzinger'
SELECT `party` FROM legislator.current WHERE `first_name` = 'Christopher' AND `middle_name` = 'Henderson' AND `last_name` = 'Clark';
SELECT      official_full_name  FROM      legislator.social-media  WHERE      youtube_id IS NOT NULL AND      (instagram_id IS NULL OR instagram_id = '') LIMIT 10;
SELECT official_full_name  FROM legislator.current  WHERE state = 'VA';
SELECT first_name, last_name  FROM historical  WHERE party = 'National Greenbacker';
SELECT `official_full_name` FROM `social-media` JOIN `current` ON `current.bioguide_id` = `social-media.bioguide` WHERE `social-media.youtube` = 'RoskamIL06';
SELECT      official_full_name  FROM      social-media  WHERE      youtube IS NULL AND youtube = ''      AND instagram IS NULL AND instagram = ''      AND twitter IS NULL AND twitter = ''      AND facebook IS NOT NULL AND facebook <> ''; LIMIT 10;
SELECT      official_full_name  FROM      legislator.current WHERE      state_rank = 'junior' AND      party = 'Republican';
SELECT      contact_form FROM      current WHERE      official_full_name = 'Claire McCaskill';
SELECT wikipedia_id  FROM historical  WHERE party = 'Readjuster Democrat';
SELECT      official_full_name  FROM      legislator.current  WHERE      party = 'Republican' AND      nickname_name IS NOT NULL;
SELECT      state,      party  FROM      legislator.current  WHERE      first_name = 'Veronica' AND      middle_name = 'Grace' AND      last_name = 'Boland';
SELECT COUNT(*)  FROM historical  WHERE birthday_bio = 1973;
SELECT      (COUNT(CASE WHEN gender_bio = 'M' THEN bioguide_id END) / COUNT(CASE WHEN gender_bio = 'F' THEN bioguide_id END)) AS male_to_female_ratio FROM      historical;
SELECT COUNT(*)  FROM current-terms  WHERE end = '2009' AND party = 'Republican';
SELECT official_full_name, gender_bio  FROM legislator.current  WHERE last_name = 'Collins';
SELECT      (COUNT(CASE WHEN `class` = 1 THEN `bioguide` END) * 1.0 / COUNT(`bioguide`)) * 100 AS percent_senators_from_class_1 FROM      legislator.current-terms WHERE      `type` = 'sen';
SELECT `official_full_name` FROM `current` WHERE `party` = 'Independent'
SELECT SUM(T2.END - T2.start)  FROM social-media AS T1  JOIN historical-terms AS T2  ON T1.bioguide = T2.bioguide  WHERE T1.thomas = 'Jr. John Conyers';
SELECT      MIN(terms.start) - legislator.birthday_bio AS age_when_first_started FROM      legislator  JOIN      historical_terms AS terms ON legislator.bioguide_id = terms.bioguide  WHERE      legislator.official_full_name = 'Jr. F. James Sensenbrenner';
SELECT      official_full_name,      religion_bio,      party FROM      legislator.current JOIN      legislator.current_terms  ON      legislator.current.bioguide_id = legislator.current_terms.bioguide  WHERE      legislator.current_terms.state = "ME";
SELECT      official_full_name,      nickname_name  FROM      social-media  JOIN      current  ON      social-media.bioguide = current.bioguide_id  WHERE      social-media.instagram IS NOT NULL  AND      current.thomas_id < 1000;
SELECT `end`  FROM `historical-terms`  WHERE `name` = 'Matt Salmon'  AND `official_full_name` IS NULL;
SELECT `party`, `state`  FROM legislator.current  WHERE `house_history_id` IS NOT NULL AND `birthday_bio` = 1738;
SELECT      c.ballotpedia_id,      c.full_name  FROM      current AS c  JOIN      current_terms AS ct ON c.bioguide_id = ct.bioguide  WHERE      c.party_bio = 'Liberal Republican';
SELECT COUNT(*)  FROM legislator.current-terms  WHERE start = '1793-12-02' AND gender_bio = 'M';
SELECT      COUNT(*) AS legislators_1875,     COUNT(*) AS legislators_2005 FROM      current-terms WHERE      start LIKE '1875%' UNION ALL SELECT      COUNT(*) AS legislators_1875,     COUNT(*) AS legislators_2005 FROM      historical-terms WHERE      start LIKE '2005%' ;
SELECT      official_full_name,     twitter_id,     youtube_id FROM      legislator.current WHERE      first_name = 'Richard';
SELECT      t2.start,      t2.end,      t2.party  FROM      historical AS t1  JOIN      historical_terms AS t2 ON t1.bioguide_id = t2.bioguide  WHERE      t1.first_name = 'Pearl' AND      t1.middle_name = 'Peden' AND      t1.last_name = 'Oldfield';
SELECT birthday_bio  FROM legislator.current  WHERE first_name = 'Amy' AND last_name = 'Klobuchar';
SELECT COUNT(*)  FROM legislator.current  WHERE fec_id IS NULL OR fec_id = '';
SELECT COUNT(*)  FROM legislator.current  WHERE gender_bio = 'F';
SELECT official_full_name FROM current WHERE opensecrets_id IS NOT NULL AND opensecrets_id <> '';
SELECT middle_name  FROM legislator.current  WHERE birthday_bio = '1956-08-24';
SELECT COUNT(*)  FROM current  WHERE `title` = 'Majority Leader';
SELECT title FROM current  WHERE birthday_bio = '1942-02-20';
SELECT gender_bio  FROM legislator.current  WHERE address = '317 Russell Senate Office Building Washington DC 20510';
SELECT first_name FROM legislator.current JOIN legislator.current_terms ON legislator.current.bioguide_id = legislator.current_terms.bioguide WHERE legislator.current_terms.state_rank = 'senior' AND legislator.current_terms.type = 'senator';
SELECT COUNT(*)  FROM legislator.current  WHERE gender_bio = 'M' AND (class IS NULL OR class = '');
SELECT      (COUNT(CASE WHEN T2.class IS NOT NULL AND T1.birthday_bio = 1964 THEN T1.bioguide_id ELSE NULL END) * 1.0 / COUNT(T1.bioguide_id)) * 100 AS percentage FROM      legislator.current AS T1 JOIN      legislator.current_terms AS T2 ON T1.bioguide_id = T2.bioguide
SELECT      (COUNT(CASE WHEN class IS NULL AND birthday_bio <= 1975 THEN bioguide_id ELSE NULL END) * 1.0 / COUNT(bioguide_id)) * 100 AS percentage_not_senator_and_born_before_1975 FROM legislator.current;
SELECT twitter FROM current WHERE birthday_bio = '1946-05-27';
SELECT opensecrets_id FROM social-media WHERE youtube = 'Bluetkemeyer';
SELECT      s.facebook FROM      social-media s JOIN      current c ON s.bioguide = c.bioguide_id WHERE      c.first_name = 'Ralph' AND c.last_name = 'Abraham';
SELECT first_name  FROM legislator.current  JOIN legislator.current_terms ON legislator.current.bioguide_id = legislator.current_terms.bioguide  WHERE address = '1005 Longworth HOB; Washington DC 20515-1408';
SELECT instagram FROM social_media  JOIN current ON social_media.bioguide = current.bioguide_id  WHERE current.birthday_bio = '1952-08-24';
SELECT COUNT(*)  FROM legislator.current  WHERE gender_bio = 'F' AND (class IS NULL OR class = '');
SELECT `religion_bio`  FROM legislator.social-media  JOIN legislator.current ON legislator.social-media.bioguide = legislator.current.bioguide_id  WHERE legislator.social-media.youtube = 'MaxineWaters';
SELECT COUNT(*)  FROM current  WHERE title = 'Minority Leader' ANDfec_id IS NULL OR fec_id = '';
SELECT COUNT(*)  FROM legislator.current  WHERE gender_bio = 'M';
SELECT facebook_id FROM social-media WHERE name = 'RepWilson';
SELECT COUNT(*)  FROM legislator.current  WHERE first_name = 'John';
SELECT DISTINCT district  FROM legislator.current-terms  WHERE party = 'Anti-Administration'
SELECT official_full_name  FROM legislator.current  WHERE birthday_bio LIKE '1960%';
SELECT google_entity_id_id  FROM legislator.current  WHERE official_full_name = 'Benjamin Hawkins';
SELECT      h.bioguide_id, h.first_name || ' ' || h.last_name AS senator FROM      historical h JOIN      historical_terms ht ON h.bioguide_id = ht.bioguide WHERE      ht.party = 'Pro-Administration' AND     ht.type = 'sen' AND     ht.start = '1789-03-04' AND     ht.end = '1791-12-31';
SELECT first_name, last_name  FROM current  JOIN current_terms ON current.bioguide_id = current_terms.bioguide  WHERE current_terms.district = '9' AND current_terms.type = 'rep';
SELECT `official_full_name`  FROM legislator.current  WHERE `party_bio` = 'Independent';
SELECT opensecrets_id, thomas_id  FROM legislator.current  JOIN legislator.current_terms  ON legislator.current.bioguide_id = legislator.current_terms.bioguide  WHERE legislator.current.party = 'democrat'  AND legislator.current_terms.type = 'sen'  AND legislator.current_terms.state = 'NJ';
SELECT google_entity_id_id  FROM legislator.current  WHERE type = 'sen' AND state = 'NY';
SELECT `religion`  FROM legislator.current  JOIN legislator.current_terms ON current.bioguide = current_terms.bioguide  WHERE current_terms.rss_url = 'http://www.corker.senate.gov/public/index.cfm/rss/feed';
SELECT `party` FROM legislator.current WHERE `official_full_name` = 'Susan M. Collins';
SELECT `district`  FROM current  WHERE `first_name` = 'Jonathan' AND `last_name` = 'Grout' AND type = 'rep'
SELECT `party`, `state`  FROM legislator.current  JOIN legislator.historical_terms ON legislator.current.bioguide = legislator.historical_terms.bioguide  WHERE `opensecrets_id` = 'N00003689' AND `thomas_id` = 186;
SELECT      official_full_name,     birthday_bio FROM      legislators.current WHERE      contact_form = 'http://www.brown.senate.gov/contact/';
SELECT state, type  FROM legislator.current-terms  WHERE google_entity_id_id = 'kg:/m/02pyzk';
SELECT type, end  FROM current-terms  WHERE name = 'John Vining';
SELECT      (SUM(CASE              WHEN type = 'sen' AND gender_bio = 'F' AND strftime('%Y', birthday_bio) BETWEEN '1930' AND '1970' THEN 1              ELSE 0          END) -     SUM(CASE              WHEN type = 'rep' AND gender_bio = 'F' AND strftime('%Y', birthday_bio) BETWEEN '1930' AND '1970' THEN 1              ELSE 0          END)      ) as difference FROM legislator.current
SELECT      (SUM(CASE WHEN party = 'Independent' AND gender_bio = 'M' THEN 1 ELSE 0 END) * 100.0 / COUNT(CASE WHEN gender_bio = 'M' AND strftime('%Y', birthday_bio) BETWEEN '1955' AND '1965' THEN 1 ELSE NULL END)) as percentage FROM legislator.current WHERE gender_bio = 'M' AND strftime('%Y', birthday_bio) BETWEEN '1955' AND '1965';
SELECT first_name, last_name  FROM legislator.current  WHERE bioguide_id = 'W000059';
SELECT      EXISTS (SELECT 1 FROM legislator.current WHERE first_name = 'Thomas' AND last_name = 'Carnes' AND ballotpedia_id IS NOT NULL)
SELECT COUNT(*)  FROM legislator.current  WHERE birthday_bio LIKE '1736%';
SELECT * FROM legislator.current  WHERE gender_bio = 'F';
SELECT COUNT(*)  FROM legislator.current-terms  WHERE state = 'ID';
SELECT COUNT(*)  FROM current  WHERE NOT (EXISTS (SELECT * FROM historical_terms WHERE current.bioguide = historical_terms.bioguide AND historical_terms.title = 'senator')) AND NOT (historical_terms.title IS NULL);
SELECT      (SUM(CASE WHEN gender_bio = 'M' THEN 1 ELSE 0 END) / CAST(SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) AS REAL)) AS male_to_female_ratio FROM legislator.current;
SELECT      (COUNT(CASE WHEN wikipedia_id IS NOT NULL THEN 1 END) * 100.0 / COUNT(*) AS famous_legislators_percentage FROM legislator.current;
SELECT      c.ballotpedia_id, c.bioguide_id FROM      current AS c JOIN      social_media AS sm ON c.bioguide_id = sm.bioguide WHERE      sm.instagram IS NULL;
SELECT      h.name,     h.district,     h.state FROM      historical AS h JOIN      historical_terms AS ht ON h.bioguide = ht.bioguide WHERE      ht.type = 'rep' AND      ht.start LIKE '1789%'
SELECT `district` FROM `historical-terms` WHERE `name` = 'Benjamin Contee'
SELECT address  FROM legislator.current-terms  WHERE name = 'Amy Klobuchar' AND start = '2001-04-01';
SELECT      c.name FROM      current_terms c JOIN      current_legislator l ON c.bioguide = l.bioguide_id WHERE      c.state_rank = 'junior' AND c.start LIKE '1997%';
SELECT COUNT(*)  FROM legislator.current-terms  WHERE gender_bio = 'F'  AND type = 'rep'  AND state = 'CA'  AND DATE(start) BETWEEN '2015-01-01' AND '2015-12-31';
SELECT twitter_id  FROM social-media  WHERE name = 'Emanuel Cleaver';
SELECT DISTINCT facebook_id  FROM current  JOIN current_terms ON current.bioguide_id = current_terms.bioguide  WHERE current.gender_bio = 'F' OR current.gender_bio = 'M'  AND current_terms.party = 'Democrat';
SELECT      h.bioguide_id,      h.first_name,      h.last_name  FROM      historical h  WHERE      h.gender_bio = 'F' AND h.end = '1791-03-03';
SELECT      c.bioguide_id, c.first_name, c.last_name FROM      current AS c JOIN      current_terms AS ct ON c.bioguide_id = ct.bioguide WHERE      c.religion_bio = 'Jewish' AND      ct.state = 'FL';
SELECT      (COUNT(CASE WHEN current.wikipedia_id IS NOT NULL THEN 1 END) * 1.0 /      COUNT(CASE WHEN historical.wikipedia_id IS NOT NULL THEN 1 END)) AS ratio FROM      current JOIN      historical ON current.bioguide_id = historical.bioguide_id;
SELECT      (SUM(CASE WHEN strftime('%Y', t2.start) BETWEEN '2000' AND '2017' THEN 1 ELSE 0 END) * 100.0 / COUNT(t1.bioguide_id)) AS percentage FROM current AS t1 JOIN historical_terms AS t2 ON t1.bioguide = t2.bioguide
SELECT COUNT(*)  FROM legislator.current  WHERE religion_bio = 'Catholic' AND ballotpedia_id IS NULL;
SELECT COUNT(*)  FROM legislator.current-terms  WHERE type = 'sen' AND class = 1 AND party = 'Republican';
SELECT official_full_name  FROM legislator.current  WHERE gender_bio = 'F'  AND google_entity_id_id IS NULL  AND fec_id IS NULL;
SELECT COUNT(*)  FROM legislator.current-terms  WHERE state = 'CA' AND type = 'rep' AND end LIKE '1995%';
SELECT      first_name,      last_name  FROM      legislator.current  WHERE      birthday_bio = (SELECT MIN(birthday_bio) FROM legislator.current);
SELECT DISTINCT c.bioguide_id  FROM current AS c  JOIN current_terms AS ct ON c.bioguide_id = ct.bioguide  WHERE ct.party = 'Democrat'  AND ct.district = '13'  AND ct.end = '2019-01-03';
SELECT twitter FROM current WHERE official_full_name = 'Jason Lewis';
SELECT      official_full_name  FROM      legislator.current-terms  WHERE      party = 'Independent'      AND type = 'sen'      AND strftime('%Y', start) >= '2011'      AND caucus = 'Democrat';
SELECT COUNT(*)  FROM legislator.current  WHERE religion_bio = 'Jewish' AND facebook IS NULL;
SELECT      party  FROM      legislator.current  JOIN      legislator.current_terms ON legislator.current.bioguide_id = legislator.current_terms.bioguide  JOIN      legislator.historical ON legislator.current.bioguide_id = legislator.historical.bioguide_id  WHERE      legislator.current.religion_bio = 'Baptist'  GROUP BY      party  ORDER BY      COUNT(*) DESC  LIMIT 1;
SELECT official_full_name  FROM social-media  WHERE facebook IS NOT NULL  AND instagram IS NOT NULL  AND twitter IS NOT NULL  AND youtube IS NOT NULL;
SELECT COUNT(*)  FROM legislator.current  JOIN legislator.historical ON legislator.current.bioguide_id = legislator.historical.bioguide_id  WHERE legislator.current.first_name = 'John' AND legislator.current.last_name = 'Conyers' AND legislator.historical.middle_name = 'Jr.'
SELECT wikipedia_id  FROM legislator.current  JOIN legislator.current_terms ON legislator.current.bioguide_id = legislator.current_terms.bioguide  WHERE type = 'sen' AND party = 'Anti-Administration';
SELECT      official_full_name  FROM      legislator.current-terms  WHERE      district = 13  AND      (strftime('%Y', `end`) - strftime('%Y', `start`)) = 26;
SELECT COUNT(*)  FROM legislator.current-terms  WHERE party = 'Federalist' AND type = 'rep' AND first_name = 'Benjamin';
SELECT COUNT(*)  FROM legislator.current  JOIN legislator.current_terms ON legislator.current.bioguide_id = legislator.current_terms.bioguide  WHERE legislator.current.gender_bio = 'F'  AND legislator.current_terms.state = 'CA'  AND (strftime('%Y', legislator.current_terms.end) - strftime('%Y', legislator.current_terms.start)) > 10  AND legislator.current_terms.type = 'rep';
SELECT      t1.party  FROM      (SELECT Min(birthday_bio) AS oldest FROM legislator.current) AS t1 INNER JOIN legislator.current AS t2 ON t2.birthday_bio = t1.oldest AND t2.type = 'current';
SELECT      c.first_name || ' ' || c.last_name AS Representative_Name FROM      current AS c JOIN      current_terms AS ct ON c.bioguide_id = ct.bioguide WHERE      c.religion_bio = 'Lutheran' AND     ct.chamber = 'House' AND     ct.state = 'OH' AND     (strftime('%Y', ct.end) - strftime('%Y', ct.start)) = 14 AND     EXISTS (         SELECT              1          FROM              historical AS h         WHERE              h.bioguide_id = c.bioguide_id AND             h.type = 'sen'     );
SELECT COUNT(*)  FROM current  WHERE strftime('%Y', birthday_bio) > '1960' AND google_entity_id_id IS NULL;
SELECT official_full_name  FROM current  WHERE house_history_id IS NOT NULL;
SELECT COUNT(*)  FROM current  WHERE icpsr_id IS NOT NULL AND maplight_id IS NOT NULL;
SELECT COUNT(*)  FROM current  WHERE gender_bio = 'F' AND lis_id IS NOT NULL;
SELECT `religion_bio`  FROM `current`  WHERE `last_name` = 'Sherrod' AND `first_name` = 'Brown';
SELECT MAX(count(religion_bio)) as max_religion_count FROM (   SELECT religion_bio, COUNT(*) as count   FROM legislator.current   GROUP BY religion_bio ) as subquery;
SELECT `instagram`  FROM `social-media`  WHERE `official_full_name` = 'Bob Corker';
SELECT COUNT(*)  FROM current  WHERE thomas_id IS NOT NULL AND instagram IS NOT NULL;
SELECT      c.fb FROM      current c JOIN      wikipedia_id w ON c.bioguide_id = w.bioguide_id WHERE      w.wikipedia_id IS NOT NULL;
SELECT COUNT(*)  FROM current  WHERE birthday_bio = (SELECT MIN(birthday_bio) FROM current);
SELECT `office` FROM current-terms WHERE `name` = 'Sherrod Brown' AND `start` = '2013-01-03' AND `type` = 'DC Office' AND `phone` IS NOT NULL;
SELECT COUNT(*)  FROM current  JOIN current_terms ON current.bioguide = current_terms.bioguide  WHERE current.first_name = 'Sherrod' AND current.last_name = 'Brown' AND current.gender_bio = 'M' AND current_terms.party = 'Democrat';
SELECT      official_full_name  FROM      current  JOIN      current_terms  ON      current.bioguide_id = current_terms.bioguide  WHERE      start = '2013-01-03';
SELECT COUNT(*)  FROM current  JOIN current_terms ON current.bioguide_id = current_terms.bioguide  WHERE current.gender_bio = 'F' AND current_terms.start = '2013-01-03';
SELECT      official_full_name  FROM      current  WHERE      bioguide IN (         SELECT              bioguide          FROM              current-terms          GROUP BY              bioguide          ORDER BY              COUNT(*) DESC          LIMIT 1     );
SELECT COUNT(*)  FROM current  JOIN current_terms ON current.bioguide_id = current_terms.bioguide  WHERE current.first_name = 'Sherrod' AND current.last_name = 'Brown' AND current_terms.district = 13;
SELECT      official_full_name  FROM      legislator.current  WHERE      facebook = 'senjoniernst';
SELECT      CASE          WHEN SUM(CASE WHEN T1.official_full_name = 'Maria Cantwell' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.official_full_name = 'Sherrod Brown' THEN 1 ELSE 0 END) THEN 'Maria Cantwell'         ELSE 'Sherrod Brown'     END AS longest_serviced_legislator FROM current AS T1 JOIN current_terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name IN ('Maria Cantwell', 'Sherrod Brown') GROUP BY T1.official_full_name ORDER BY 1 LIMIT 1;
SELECT      (SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_female FROM      current JOIN      current_terms ON current.bioguide_id = current_terms.bioguide WHERE      COUNT(current_terms.bioguide) > 4;
SELECT AVG(T2.bioguide)  FROM legislator.current AS T1  JOIN legislator.current_terms AS T2  ON T1.bioguide_id = T2.bioguide  WHERE T1.wikipedia_id IS NOT NULL;
SELECT COUNT(*)  FROM legislator.current  WHERE gender_bio = 'F';
SELECT COUNT(*)  FROM legislator.current  JOIN legislator.historical_terms ON current.bioguide_id = historical_terms.bioguide  WHERE historical_terms.type = 'rep' AND historical_terms.state = 'NJ';
SELECT address  FROM current  JOIN current_terms ON current.bioguide_id = current_terms.bioguide  WHERE contact_form = 'http://www.carper.senate.gov/contact/';
SELECT instagram FROM social-media WHERE official_full_name = 'Benjamin Hawkins';
SELECT bioguide  FROM legislator.current  JOIN legislator.historical USING (bioguide_id)  JOIN legislator.current_terms USING (bioguide)  JOIN legislator.historical_terms USING (bioguide)  WHERE religion_bio = 'Catholic' AND state = 'NE';
SELECT DISTINCT maplight_id FROM legislator.current WHERE state = 'ME' AND type = 'rep';
SELECT type, start  FROM legislator.current-terms  WHERE birthday_bio = '1727-11-26';
SELECT `contact_form`  FROM `current`  WHERE `official_full_name` = 'Rick Crawford';
SELECT COUNT(*)  FROM legislator.current  JOIN legislator.current_terms ON legislator.current.bioguide_id = legislator.current_terms.bioguide  WHERE legislator.current.gender_bio = 'F'  AND legislator.current_terms.type = 'rep'  AND legislator.current_terms.state = 'MI';
SELECT      (SUM(CASE WHEN type = 'sen' AND state = 'ME' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) OVER () AS percentage_of_senators_in_Maine FROM      legislator.current WHERE      gender_bio = 'F';
SELECT DISTINCT g.games_name FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person p ON p.id = gc.person_id WHERE p.full_name = 'John Aalberg';
SELECT games.games_name  FROM games  JOIN games_competitor ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  WHERE person.full_name = 'John Aalberg' AND games_competitor.age = 31;
SELECT T3.age  FROM person AS T1  JOIN games_competitor AS T3 ON T1.id = T3.person_id  JOIN games AS T2 ON T2.id = T3.games_id  WHERE T1.full_name = 'John Aalberg' AND T2.games_name = '1994 Winter';
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  WHERE noc_region.region_name = 'Finland';
SELECT p.full_name  FROM person p  JOIN person_region pr ON p.id = pr.person_id  JOIN noc_region nr ON pr.region_id = nr.id  WHERE nr.region_name = 'Finland';
SELECT T4.region_name FROM person AS T1 JOIN games_competitor AS T2 ON T1.id = T2.person_id JOIN games_city AS T3 ON T2.games_id = T3.games_id JOIN city AS T4 ON T4.id = T3.city_id WHERE T1.full_name = 'John Aalberg'
SELECT      pr.region_id  FROM      person p  JOIN      person_region pr ON p.id = pr.person_id  JOIN      noc_region nr ON pr.region_id = nr.id  WHERE      p.gender = 'M' AND      p.height = (SELECT MAX(height) FROM person WHERE gender = 'M')
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  WHERE noc_region.region_name = 'Finland' AND person.gender = 'F';
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_name = '1992 Summer';
SELECT games.games_name  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE city.city_name = 'London';
SELECT games_year  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE city_name = 'London'  ORDER BY games_year ASC  LIMIT 1;
SELECT COUNT(*)  FROM games_city  JOIN city ON games_city.city_id = city.id  WHERE city.city_name = 'London';
SELECT AVG(person.height)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  WHERE noc_region.region_name = 'Finland' AND person.gender = 'M';
SELECT      (COUNT(CASE WHEN noc_region.region_name = 'Finland' THEN person_region.person_id END)      / COUNT(person_region.person_id)) * 100 AS percentage  FROM      games  JOIN      games_city ON games.id = games_city.games_id  JOIN      noc_region ON games_city.city_id = noc_region.id  JOIN      games_competitor ON games.id = games_competitor.games_id  JOIN      person_region ON games_competitor.person_id = person_region.person_id  JOIN      person ON person.id = games_competitor.person_id  WHERE      games.name = '1994 Winter';
SELECT sport_name  FROM sport  JOIN event ON sport.id = event.sport_id  WHERE event.event_name = 'Shooting Women''s Trap';
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_name = '1936 Winter';
SELECT COUNT(DISTINCT gc.games_id) FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id WHERE c.city_name = 'London';
SELECT COUNT(*)  FROM event  JOIN sport ON event.sport_id = sport.id  WHERE sport.sport_name = 'Swimming';
SELECT region_name  FROM person_region  JOIN noc_region ON person_region.region_id = noc_region.id  WHERE full_name = 'Peter Kohnke';
SELECT games.games_id  FROM games  JOIN games_competitor ON games.id = games_competitor.games_id  JOIN person ON games_competitor.person_id = person.id  WHERE person.full_name = 'Jessica Carolina Aguilera Aguilera';
SELECT sport_name FROM sport WHERE id IN (     SELECT sport_id     FROM event     GROUP BY sport_id     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT p.full_name  FROM person p  JOIN person_region pr ON p.id = pr.person_id  JOIN noc_region nr ON pr.region_id = nr.id  WHERE nr.region_name = 'Sweden'  AND p.height = (SELECT MAX(height) FROM person WHERE region_id IN (SELECT id FROM noc_region WHERE region_name = 'Sweden'));
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  WHERE noc_region.region_name = 'Guatemala';
SELECT p.full_name  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  GROUP BY p.id, p.full_name  ORDER BY COUNT(gc.id) DESC  LIMIT 1;
SELECT `full_name`  FROM `person`  WHERE `id` = 90991;
SELECT COUNT(T2.competitor_id) FROM competitor_event AS T1 JOIN person AS T2 ON T2.id = T1.competitor_id WHERE T2.full_name = 'Martina Kohlov'
SELECT      (weight / (height * height)) AS BMI FROM      person WHERE      id = 147420;
SELECT      (COUNT(CASE WHEN p.gender = 'M' THEN 1 END) /       CAST(COUNT(p.id) AS REAL)) * 100 as percentage FROM      person p JOIN      person_region pr ON p.id = pr.person_id JOIN      noc_region nr ON pr.region_id = nr.id WHERE      nr.region_name = 'Estonia';
SELECT p.full_name  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  WHERE gc.age = (SELECT MIN(age) FROM games_competitor)
SELECT COUNT(*)  FROM games_competitor  JOIN person ON games_competitor.person_id = person.id  JOIN sport ON event.sport_id = sport.id  JOIN event ON competitor_event.event_id = event.id  WHERE person.age = 24 AND sport.sport_name = 'Basketball Men\'s Basketball';
SELECT e.event_name  FROM event e  JOIN sport s ON e.sport_id = s.id  WHERE s.sport_name = 'Art Competitions';
SELECT COUNT(*)  FROM medal  JOIN competitor_event ON medal.id = competitor_event.medal_id  JOIN person ON person.id = competitor_event.competitor_id  WHERE medal.medal_name = 'Gold' AND person.full_name = 'Henk Jan Zwolle';
SELECT e.event_name  FROM event e  JOIN competitor_event ce ON e.id = ce.event_id  JOIN medal m ON m.id = ce.medal_id  WHERE m.medal_name = 'Gold'  GROUP BY e.event_name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  WHERE noc_region.region_name = 'Australia';
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  GROUP BY c.id, c.city_name  HAVING COUNT(gc.games_id) >= 3;
SELECT COUNT(*)  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE season = 'Summer' AND city_name = 'Stockholm';
SELECT region_name  FROM noc_region  JOIN person_region ON noc_region.id = person_region.region_id  GROUP BY region_name  ORDER BY COUNT(person_id) DESC  LIMIT 1;
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_year = (SELECT MIN(games_year) FROM games);
SELECT games.games_name  FROM games  JOIN games_competitor ON games.id = games_competitor.games_id  WHERE games_competitor.age = (SELECT MAX(age) FROM games_competitor);
SELECT COUNT(*)  FROM games_competitor  JOIN games ON games.id = games_competitor.games_id  WHERE games.games_name = '1928 Summer';
SELECT      COUNT(competitor_event.event_id) AS total_events,     (COUNT(competitor_event.event_id) FILTER (WHERE medal.name = 'Gold')::NUMERIC / COUNT(competitor_event.event_id)) * 100 AS gold_medal_percentage FROM      person JOIN      games_competitor ON person.id = games_competitor.person_id JOIN      competitor_event ON games_competitor.id = competitor_event.competitor_id JOIN      medal ON competitor_event.medal_id = medal.id WHERE      person.full_name = 'Michael Fred Phelps, II';
SELECT      CASE          WHEN (COUNT(ce.competitor_id) IN              (SELECT COUNT(ce.competitor_id) FROM competitor_event ce JOIN games g ON ce.game_id = g.id WHERE g.season = 'Summer' AND g.games_year = 1988))          THEN '1988 Summer'         ELSE '1988 Winter'     END AS game_with_most_competitors,     ABS((SELECT COUNT(ce.competitor_id) FROM competitor_event ce JOIN games g ON ce.game_id = g.id WHERE g.season = 'Summer' AND g.games_year = 1988) -           (SELECT COUNT(ce.competitor_id) FROM competitor_event ce JOIN games g ON ce.game_id = g.id WHERE g.season = 'Winter' AND g.games_year = 1988)) AS difference_in_competitors FROM      competitor_event ce JOIN      games g ON ce.game_id = g.id GROUP BY      game_with_most_competitors;
SELECT `age` FROM games_competitor WHERE (SELECT COUNT(person_id) FROM games_competitor WHERE age = `age`) = (     SELECT MAX(age_count)     FROM (         SELECT `age`, COUNT(person_id) as age_count         FROM games_competitor         GROUP BY `age`     ) subquery );
SELECT DISTINCT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id WHERE c.city_name LIKE 'M%'
SELECT DISTINCT c.city_name FROM city c JOIN games g ON c.id = g.games_city_id JOIN games_city gc ON g.id = gc.games_id WHERE g.season = 'Winter' AND g.games_name = '1976' UNION SELECT DISTINCT c.city_name FROM city c JOIN games g ON c.id = g.games_city_id JOIN games_city gc ON g.id = gc.games_id WHERE g.season = 'Summer' AND g.games_name = '1976';
SELECT medal.medal_name  FROM medal  JOIN competitor_event ON medal.id = competitor_event.medal_id  JOIN person ON competitor_event.competitor_id = person.id  WHERE person.full_name = 'Coleen Dufresne';
SELECT p.full_name  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  JOIN competitor_event ce ON gc.id = ce.competitor_id  GROUP BY p.full_name  ORDER BY COUNT(ce.medal_id) DESC  LIMIT 1;
SELECT t4.region_name  FROM person AS t1  JOIN games_competitor AS t2 ON t1.id = t2.person_id  JOIN games_city AS t3 ON t2.games_id = t3.games_id  JOIN noc_region AS t4 ON t4.id = t3.city_id  WHERE t1.full_name = 'Estelle Nze Minko'
SELECT DISTINCT s.sport_name  FROM sport s  JOIN event e ON s.id = e.sport_id  JOIN competitor_event ce ON e.id = ce.event_id  JOIN person p ON ce.competitor_id = p.id  JOIN person_region pr ON p.id = pr.person_id  JOIN noc_region nr ON nr.id = pr.region_id  WHERE p.full_name = 'Chin Eei Hui' AND nr.region_name = 'China';
SELECT olympics.person.full_name  FROM olympics.city JOIN olympics.games_city ON city.id = games_city.city_id JOIN olympics.games ON games.id = games_city.games_id JOIN olympics.games_competitor ON games.id = games_competitor.games_id JOIN olympics.person ON person.id = games_competitor.person_id WHERE person.age = (SELECT MAX(age) FROM olympics.games_competitor)
SELECT games_year FROM games WHERE games.id IN (     SELECT games.id     FROM games      JOIN games_competitor ON games.id = games_competitor.games_id     JOIN person ON games_competitor.person_id = person.id     WHERE person.gender = 'F'     GROUP BY games.id     ORDER BY COUNT(person.gender) DESC     LIMIT 1 )
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  JOIN city ON games_city.city_id = city.id  JOIN games_competitor ON games_competitor.person_id = person.id  WHERE person.gender = 'M'  AND noc_region.region_name = 'Belgium';
SELECT COUNT(*)  FROM games_competitor  JOIN games ON games.id = games_competitor.games_id  JOIN city ON city.id = games_city.city_id  WHERE city.city_name = 'Sapporo';
SELECT games.games_year  FROM games  JOIN games_competitor ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  WHERE person.full_name = 'Morten Aleksander Djupvik';
SELECT COUNT(*)  FROM person  JOIN games_competitor ON person.id = games_competitor.person_id  JOIN competitor_event ON games_competitor.id = competitor_event.competitor_id  JOIN event ON competitor_event.event_id = event.id  WHERE event.event_name = 'Sailing Mixed 12 metres';
SELECT COUNT(DISTINCT event.id)  FROM event  JOIN sport ON event.sport_id = sport.id  WHERE sport.sport_name = 'Modern Pentathlon';
SELECT      (COUNT(CASE WHEN person.gender = 'F' THEN person.id END) /       CAST(COUNT(person.id) AS REAL)) * 100 as percentage FROM      person JOIN      games_competitor ON person.id = games_competitor.person_id JOIN      competitor_event ON games_competitor.id = competitor_event.competitor_id JOIN      event ON competitor_event.event_id = event.id WHERE      event.event_name = 'Equestrianism Mixed Three-Day Event, Individual';
SELECT AVG(T2.age)  FROM games AS T1  JOIN games_competitor AS T2 ON T1.id = T2.games_id  WHERE T1.games_name = '1992 Summer';
SELECT games_year FROM games WHERE season = 'Summer' GROUP BY games_year HAVING COUNT(games_name) = 1;
SELECT COUNT(*)  FROM games  WHERE games_year BETWEEN 1990 AND 1999;
SELECT COUNT(T2.person_id)  FROM games AS T1  JOIN games_competitor AS T2 ON T1.id = T2.games_id  WHERE T1.games_name = '2014 Winter';
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN competitor_event ON person_region.person_id = competitor_event.competitor_id   JOIN medal ON competitor_event.medal_id = medal.id  WHERE medal.id != 4 AND person_region.region_id = 151;
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  JOIN games_competitor ON person.id = games_competitor.person_id  JOIN games ON games.id = games_competitor.games_id  JOIN games_city ON games.id = games_city.games_id  JOIN noc_region AS noc_region_games ON noc_region.id = games_city.city_id  WHERE noc_region.region_name = 'China'  AND games.games_name = '2016 Summer'  AND games.season = 'Summer';
SELECT COUNT(*)  FROM competitor_event  JOIN event ON competitor_event.event_id = event.id  JOIN medal ON competitor_event.medal_id = medal.id  WHERE event.event_name = 'Ice Hockey Men''s Ice Hockey' AND medal.medal_name = 'Gold';
SELECT      p.region_id,      r.region_name,     COUNT(IF(ce.medal_id <> 4, 1, NULL)) AS total_medals FROM      person p JOIN      person_region pr ON p.id = pr.person_id JOIN      noc_region n ON pr.region_id = n.id JOIN      competitor_event ce ON p.id = ce.competitor_id GROUP BY      p.region_id,      r.region_name ORDER BY      total_medals DESC LIMIT 1;
SELECT p.full_name  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  JOIN competitor_event ce ON gc.id = ce.competitor_id  JOIN event e ON ce.event_id = e.id  JOIN sport s ON e.sport_id = s.id  WHERE s.sport_name = 'Cycling' AND ce.medal_id = (SELECT id FROM medal WHERE medal_name = 'Gold');
SELECT T3.medal_name  FROM person AS T1  JOIN games_competitor AS T2 ON T1.id = T2.person_id  JOIN competitor_event AS T4 ON T2.id = T4.competitor_id  JOIN medal AS T3 ON T4.medal_id = T3.id  WHERE T1.full_name = 'Lee Chong Wei' AND T3.medal_name != 'No Medal'
SELECT      (COUNT(CASE WHEN p.gender = 'F' AND c.age < 20 THEN p.id END)      / COUNT(p.id)) * 100 AS percentage  FROM      games g  JOIN      games_city gc ON g.id = gc.games_id  JOIN      city c ON gc.city_id = c.id  JOIN      games_competitor gc2 ON g.id = gc2.games_id  JOIN      person p ON gc2.person_id = p.id  WHERE      g.games_name = '2002 Winter';
SELECT      (COUNT(CASE WHEN gender = 'M' THEN 1 END) / COUNT(CASE WHEN gender = 'F' THEN 1 END)) AS male_to_female_ratio FROM      person p JOIN      games_competitor gc ON p.id = gc.person_id JOIN      games g ON gc.games_id = g.id WHERE      g.season = 'Summer' AND g.games_year = 2012;
SELECT      g.games_name  FROM      games g  JOIN      games_city gc ON g.id = gc.games_id  JOIN      person_region pr ON gc.city_id = pr.city_id  JOIN      games_competitor gc2 ON pr.person_id = gc2.person_id  WHERE      g.season = 'Summer'  GROUP BY      g.id  ORDER BY      COUNT(gc2.person_id) DESC, COUNT(gc2.person_id) ASC  LIMIT 1;
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  JOIN games_competitor ON person.id = games_competitor.person_id  JOIN competitor_event ON games_competitor.id = competitor_event.competitor_id  JOIN medal ON competitor_event.medal_id = medal.id  JOIN noc_region AS region_noc ON noc_region.id = region_noc.id  WHERE region_noc.region_name = 'Malaysia' AND medal.id <> 4;
SELECT COUNT(*)  FROM games  JOIN games_competitor ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  JOIN person_region ON person_region.person_id = person.id  JOIN noc_region ON noc_region.id = person_region.region_id  JOIN games_city ON games_city.games_id = games.id  JOIN sport ON sport.id = event.sport_id  JOIN event ON event.id = competitor_event.event_id  JOIN competitor_event ON competitor_event.competitor_id = games_competitor.id  WHERE      noc_region.region_name = 'Canoeing'      AND games.games_name = '2008 Summer'      AND person.gender != 'F'      AND (person.weight / POWER(person.height, 2)) < 30;
SELECT AVG(person.height)  FROM person  JOIN games_competitor ON person.id = games_competitor.person_id  JOIN sport ON event.sport_id = sport.id  JOIN competitor_event ON games_competitor.id = competitor_event.competitor_id  JOIN event ON competitor_event.event_id = event.id  WHERE sport.sport_name = 'Basketball' AND person.gender = 'M';
SELECT COUNT(*)  FROM person  JOIN person_region ON person.id = person_region.person_id  JOIN noc_region ON person_region.region_id = noc_region.id  WHERE person.gender = 'F' AND noc_region.region_name = 'Philippines';
SELECT region_name  FROM noc_region  JOIN person_region ON noc_region.id = person_region.region_id  JOIN person ON person.id = person_region.person_id  WHERE person.full_name = 'Yao Ming';
SELECT MIN(T2.age)  FROM person AS T1  JOIN games_competitor AS T2 ON T1.id = T2.person_id  WHERE T1.full_name = 'Michael Fred Phelps, II';
SELECT COUNT(*)  FROM person  WHERE id IN (     SELECT person_id      FROM person_region      WHERE region_id IN (         SELECT id          FROM noc_region          WHERE region_name = (             SELECT region_name              FROM city              JOIN games_city ON city.id = games_city.city_id              JOIN games_competitor ON games_competitor.games_id = games.id              JOIN person_region ON person_region.person_id = games_competitor.person_id              JOIN person ON person.id = person_region.person_id              WHERE person.full_name = 'Clara Hughes'         )     ) )
SELECT COUNT(*)  FROM competitor_event ce  JOIN event e ON ce.event_id = e.id  JOIN sport s ON e.sport_id = s.id  JOIN person p ON ce.competitor_id = p.id  WHERE s.sport_name = 'Swimming' AND e.event_name = 'Men''s 200 metres Freestyle' AND p.full_name = 'Ian James Thorpe';
SELECT COUNT(*)  FROM games  JOIN games_competitor ON games.id = games_competitor.games_id  JOIN competitor_event ON competitor_event.competitor_id = games_competitor.person_id  JOIN event ON event.id = competitor_event.event_id  JOIN medal ON medal.id = competitor_event.medal_id  JOIN person ON person.id = games_competitor.person_id  WHERE person.full_name = 'Larysa Semenivna Latynina (Diriy-)'  AND event.event_name = 'Gymnastics Women''s Individual All-Around'  AND (medal.medal_name = 'Gold' OR medal.id = 1);
SELECT T3.city_name FROM person AS T1 JOIN games_competitor AS T2 ON T1.id = T2.person_id JOIN games_city AS T4 ON T2.games_id = T4.games_id JOIN city AS T3 ON T4.city_id = T3.id WHERE T1.full_name = 'Carl Lewis Borack'
SELECT COUNT(*)  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE city.city_name = 'London';
SELECT c.city_name  FROM city c  JOIN games g ON c.id = g.games_city_id  WHERE g.games_name = '1992 Summer'
SELECT COUNT(*)  FROM games_competitor  JOIN games ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  WHERE games.games_name = '2016 Summer' AND person.age > 59;
SELECT games_name  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE city_name = 'Los Angeles'  GROUP BY games_name  ORDER BY COUNT(*) DESC  LIMIT 1;
SELECT COUNT(*)  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON city.id = games_city.city_id  JOIN games_competitor ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  JOIN competitor_event ON competitor_event.competitor_id = games_competitor.id  JOIN event ON event.id = competitor_event.event_id  JOIN sport ON sport.id = event.sport_id  WHERE games.season = 'Summer'  AND games.games_year = (SELECT games_year FROM games WHERE games_name = '2020 Summer Olympics')  AND person.age = 10  AND event.event_name = 'Gymnastics Men''s Parallel Bars, Teams';
SELECT AVG(T2.age)  FROM games AS T1  JOIN games_competitor AS T2 ON T1.id = T2.games_id  JOIN person_region AS T3 ON T2.person_id = T3.person_id  JOIN noc_region AS T4 ON T3.region_id = T4.id  WHERE T1.games_name = '2016 Summer' AND T4.region_name = 'USA';
SELECT region_name  FROM noc_region  WHERE noc = 'COL';
SELECT sport_name  FROM sport  WHERE id = 19;
SELECT event.id  FROM event  WHERE event.event_name = 'Shooting Mixed Skeet';
SELECT id  FROM sport  WHERE sport_name = 'hockey';
SELECT `weight`  FROM `person`  WHERE `full_name` = 'Dagfinn Sverre Aarskog';
SELECT `id`  FROM `city`  WHERE `city_name` = 'Rio de Janeiro';
SELECT COUNT(*)  FROM competitor_event  JOIN event ON competitor_event.event_id = event.id  JOIN medal ON competitor_event.medal_id = medal.id  WHERE medal.medal_name = 'Gold'  AND event.event_name = 'Rowing Women''s Coxed Eights';
SELECT COUNT(event.id)  FROM event  JOIN sport ON event.sport_id = sport.id  WHERE sport.sport_name = 'Cycling';
SELECT T4.region_name FROM person AS T1 JOIN person_region AS T2 ON T1.id = T2.person_id JOIN noc_region AS T3 ON T2.region_id = T3.id JOIN city AS T5 ON T5.id = T1.person_region.city_id JOIN games_city AS T6 ON T6.city_id = T5.id JOIN games_competitor AS T7 ON T7.person_id = T1.id WHERE T1.full_name = 'Vijay Singh Chauhan';
SELECT games_year  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE city.city_name = 'Roma';
SELECT COUNT(*)  FROM games_competitor  JOIN games ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  WHERE games.games_name = '1984 Summer' AND person.age = 20;
SELECT COUNT(DISTINCT games.id)  FROM games  JOIN games_competitor ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  WHERE person.full_name = 'Prithipal Singh';
SELECT COUNT(*)  FROM games_competitor  JOIN games ON games.id = games_competitor.games_id  JOIN person ON person.id = games_competitor.person_id  WHERE games.games_name = '1984 Summer' AND person.age > 50;
SELECT COUNT(DISTINCT e.event_name)  FROM event e JOIN sport s ON e.sport_id = s.id WHERE s.sport_name = 'Athletics';
SELECT p.full_name  FROM person p  JOIN person_region pr ON p.id = pr.person_id  JOIN noc_region nr ON pr.region_id = nr.id  WHERE nr.region_name = 'Russia' AND p.weight = (SELECT MAX(weight) FROM person WHERE region_id IN (SELECT id FROM noc_region WHERE region_name = 'Russia'))
SELECT p.height FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Portugal' ORDER BY p.height DESC LIMIT 1;
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_name = '1968 Winter';
SELECT region_name FROM person_region JOIN noc_region ON person_region.region_id = noc_region.id GROUP BY region_name ORDER BY COUNT(person_id) DESC LIMIT 1;
SELECT      (COUNT(CASE WHEN p.height > 175 THEN 1 END)       OVER () / COUNT(*)       OVER () * 100) as percentage FROM      person p JOIN      person_region pr ON p.id = pr.person_id JOIN      noc_region nr ON pr.region_id = nr.id WHERE      nr.region_name = 'Vanuatu';
SELECT AVG(person.weight) FROM person JOIN person_region ON person.id = person_region.person_id JOIN noc_region ON person_region.region_id = noc_region.id WHERE noc_region.region_name = 'Tonga' AND person.gender = 'M';
SELECT c.city_name  FROM city c  JOIN games_city gc ON c.id = gc.city_id  JOIN games g ON gc.games_id = g.id  WHERE g.games_name = '1920 Summer';
SELECT COUNT(*)  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON city.id = games_city.city_id  WHERE games_year BETWEEN 1900 AND 1992  AND city_name = 'London';
SELECT COUNT(*)  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE season = 'Summer' AND city_name = 'Paris';
SELECT games.games_name  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE city.city_name = 'Los Angeles';
SELECT city_name FROM city JOIN games_city ON city.id = games_city.city_id GROUP BY city_name ORDER BY COUNT(games_id) DESC LIMIT 1;
SELECT games.games_name  FROM games  JOIN games_city ON games.id = games_city.games_id  JOIN city ON games_city.city_id = city.id  WHERE city.city_name = 'Beijing' AND games.games_year = '2008';
SELECT      (COUNT(CASE WHEN c.age > 30 AND ce.medal_id = 1 THEN 1 END)      OVER ()      / COUNT(*) OVER ()) * 100 AS percentage_champions_over_30 FROM      games_competitor c JOIN      competitor_event ce ON c.id = ce.competitor_id WHERE      ce.medal_id = 1;
SELECT T3.age  FROM person AS T1  JOIN games_competitor AS T3 ON T1.id = T3.person_id  JOIN games AS T2 ON T2.id = T3.games_id  WHERE T1.full_name = 'A Lamusi' AND T2.games_name = '2012 Summer';
SELECT COUNT(gc.id) FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_name = '2000 Summer' AND gc.age = 31;
SELECT COUNT(DISTINCT gc.person_id) FROM games_competitor gc JOIN games g ON gc.games_id = g.id JOIN person p ON gc.person_id = p.id WHERE g.games_name = '1948 Summer' AND p.gender = 'M';
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN games g ON gc.games_id = g.id WHERE g.games_name = '1936 Summer';
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN games g ON gc.games_id = g.id WHERE g.games_name = '2014 Winter' AND gc.age = (   SELECT MIN(gc2.age)   FROM games_competitor gc2   JOIN games g2 ON gc2.games_id = g2.id   WHERE g2.games_name = '2014 Winter' );
SELECT AVG(gc.age) FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_name = '1988 Winter';
SELECT      DIVIDE(         COUNT(gc.person_id),         (             SELECT COUNT(gc.person_id)             FROM games_competitor gc             JOIN games g ON gc.games_id = g.id             WHERE g.games_year = 1988         )     ) * 100 as percentage FROM games_competitor gc JOIN games g ON gc.games_id = g.id JOIN person p ON gc.person_id = p.id WHERE g.games_year = 1988 AND p.gender = 'F' AND p.height > 170;
SELECT sport_name FROM sport JOIN event ON sport.id = event.sport_id WHERE event_name = 'Cross Country Skiing Men''s 10/15 kilometres Pursuit';
SELECT      DIVIDE(COUNT(CASE WHEN g.season = 'Winter' AND gc.age > 24 THEN 1 END), COUNT(p.id)) AS percentage FROM      person p JOIN      games_competitor gc ON p.id = gc.person_id JOIN      games g ON gc.games_id = g.id WHERE      g.season = 'Winter';
SELECT pr.region_id FROM person p JOIN person_region pr ON p.id = pr.person_id WHERE p.full_name = 'Christine Jacoba Aaftink';
SELECT p.height FROM person p JOIN person_region pr ON p.id = pr.person_id WHERE pr.region_id = 7;
SELECT city_name FROM city WHERE id IN (   SELECT city_id   FROM games_city   WHERE games_id = 3 );
SELECT gc.games_id FROM games_city gc JOIN city c ON gc.city_id = c.id WHERE c.city_name = 'London';
SELECT COUNT(DISTINCT p.id) FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN games g ON gc.games_id = g.id WHERE gc.age < 30 AND g.season = 'Summer';
SELECT g.games_name FROM games g JOIN games_competitor gc ON g.id = gc.games_id WHERE gc.games_id = 13;
SELECT AVG(gc.age) FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.season = 'Winter';
SELECT      ROUND(         (COUNT(CASE WHEN gc.age < 35 THEN 1 END) / COUNT(gc.person_id)) * 100, 2     ) AS percentage FROM      games_competitor gc JOIN      games g ON gc.games_id = g.id WHERE      g.season = 'Summer';
SELECT event_name FROM event WHERE sport_id = (SELECT id FROM sport WHERE sport_name = 'Basketball');
SELECT m.medal_name FROM competitor_event ce JOIN medal m ON ce.medal_id = m.id WHERE ce.competitor_id = 9;
SELECT ce.event_id FROM competitor_event ce JOIN medal m ON ce.medal_id = m.id WHERE m.medal_name = 'Gold';
SELECT full_name FROM person WHERE weight = (SELECT MAX(weight) FROM person);
SELECT city_name FROM city JOIN games_city ON city.id = games_city.city_id JOIN games ON games_city.games_id = games.id WHERE games_year = 1992;
SELECT region_name FROM person_region JOIN noc_region ON person_region.region_id = noc_region.id GROUP BY region_name ORDER BY COUNT(region_name) DESC LIMIT 1;
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id WHERE gc.age = (SELECT MAX(gc2.age)                  FROM games_competitor gc2);
SELECT s.sport_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id JOIN event e ON ce.event_id = e.id JOIN sport s ON e.sport_id = s.id WHERE p.full_name = 'John Aalberg';
SELECT COUNT(DISTINCT p.id) FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE p.gender = 'M' AND nr.region_name = 'Belgium' AND p.id IN (SELECT person_id FROM games_competitor);
SELECT COUNT(DISTINCT gc.person_id) FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id JOIN games_competitor gc2 ON g.id = gc2.games_id WHERE c.city_name = 'Barcelona';
SELECT COUNT(DISTINCT e.event_name) FROM event e JOIN sport s ON e.sport_id = s.id WHERE s.sport_name = 'Football';
SELECT city_name FROM city WHERE id IN (   SELECT city_id   FROM games_city   WHERE games_id IN (     SELECT games_id     FROM games_competitor     WHERE person_id = (       SELECT id       FROM person       WHERE full_name = 'John Aalberg'     )   ) );
SELECT COUNT(DISTINCT g.id) FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id WHERE c.city_name = 'Barcelona';
SELECT COUNT(DISTINCT gc.person_id) FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE gc.age > 30 AND g.games_name = '1992 Winter';
SELECT g.games_name FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id JOIN games_competitor gc2 ON g.id = gc2.games_id WHERE c.city_name = 'Barcelona' GROUP BY g.games_name HAVING COUNT(gc2.id) = (   SELECT MAX(cnt)   FROM (     SELECT g.games_name, COUNT(gc2.id) cnt     FROM games g     JOIN games_city gc ON g.id = gc.games_id     JOIN city c ON gc.city_id = c.id     JOIN games_competitor gc2 ON g.id = gc2.games_id     WHERE c.city_name = 'Barcelona'     GROUP BY g.games_name   ) subquery );
SELECT p.full_name FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Argentina';
SELECT AVG(gc.age) FROM games_competitor gc JOIN games g ON gc.games_id = g.id JOIN person p ON gc.person_id = p.id JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE g.games_name = '2012 Summer' AND nr.region_name = 'Argentina';
SELECT      DIVIDE(         COUNT(ce.competitor_id),         (             SELECT COUNT(ce2.competitor_id)             FROM competitor_event ce2             JOIN event e2 ON ce2.event_id = e2.id             WHERE e2.event_name = 'Basketball Men''s Basketball'         )     ) * 100 AS percentage FROM competitor_event ce JOIN event e ON ce.event_id = e.id JOIN medal m ON ce.medal_id = m.id JOIN games_competitor gc ON ce.competitor_id = gc.id JOIN person p ON gc.person_id = p.id WHERE e.event_name = 'Basketball Men''s Basketball' AND m.medal_name = 'Bronze' AND p.gender = 'M';
SELECT g.games_name FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'Georgios Abaris';
SELECT p.full_name FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Greece';
SELECT AVG(gc.age) FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_name = '1924 Winter';
SELECT noc FROM noc_region WHERE id IN (   SELECT region_id   FROM person_region   WHERE person_id IN (     SELECT id     FROM person     WHERE weight = 77   ) );
SELECT g.games_name FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id WHERE c.city_name = 'Paris';
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN games g ON gc.games_id = g.id WHERE g.games_name = '2000 Summer';
SELECT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id JOIN games_competitor gc2 ON g.id = gc2.games_id WHERE gc2.age = (SELECT MAX(gc3.age) FROM games_competitor gc3);
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id WHERE gc.age = (SELECT MIN(gc2.age)                  FROM games_competitor gc2);
SELECT gc.games_id FROM games_city gc JOIN city c ON gc.city_id = c.id WHERE c.city_name = 'Tokyo';
SELECT nr.noc, nr.region_name FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE p.weight = (SELECT MAX(weight) FROM person);
SELECT g.games_year, g.season FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN games g ON gc.games_id = g.id WHERE p.full_name = 'Sohail Abbas';
SELECT AVG(p.weight) FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id JOIN medal m ON ce.medal_id = m.id WHERE m.medal_name = 'Silver';
SELECT city_name FROM city JOIN games_city ON city.id = games_city.city_id JOIN games ON games_id = games.id WHERE games_name = '2004 Summer';
SELECT g.season FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN games g ON gc.games_id = g.id WHERE p.height = 180 AND p.weight = 73;
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id JOIN medal m ON ce.medal_id = m.id WHERE m.medal_name = 'Gold';
SELECT AVG(p.height)  FROM person p  JOIN games_competitor gc ON p.id = gc.person_id  WHERE gc.age BETWEEN 22 AND 28;
SELECT COUNT(DISTINCT p.id) FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE p.gender = 'F' AND nr.region_name = 'Iran';
SELECT gc.age FROM games_competitor gc JOIN person p ON gc.person_id = p.id WHERE p.height = (SELECT MAX(height) FROM person);
SELECT    SUBTRACT(     COUNT(CASE WHEN p.weight > 70 THEN 1 END),      COUNT(CASE WHEN p.weight < 70 THEN 1 END)   ) AS difference FROM person p JOIN games_competitor gc ON p.id = gc.person_id WHERE gc.age <= 24;
SELECT    DIVIDE(COUNT(CASE WHEN gc.age = 28 THEN 1 END), COUNT(gc.id)) AS percentage FROM    games g    JOIN games_competitor gc ON g.id = gc.games_id  WHERE    g.games_name = '2014 Winter';
SELECT nr.region_name FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE p.gender = 'M' AND p.height > (SELECT 0.87 * AVG(height) FROM person) GROUP BY nr.region_name;
SELECT SUM(households)  FROM zip_data  WHERE county_fips IN (   SELECT county    FROM country    WHERE county = 'ARECIBO' );
SELECT zd.zip_code FROM zip_data zd JOIN country c ON zd.zip_code = c.zip_code WHERE c.county = 'ARECIBO' ORDER BY zd.avg_house_value DESC LIMIT 1;
SELECT SUM(zd.male_population)  FROM zip_data zd  JOIN country c ON zd.zip_code = c.zip_code  WHERE c.county = 'ARECIBO' AND zd.type = 'Residential';
SELECT COUNT(*) FROM zip_data WHERE state = 'DE' AND type = 'Residential' AND daylight_savings = 'Yes';
SELECT zd.zip_code FROM zip_data zd JOIN country c ON zd.zip_code = c.zip_code WHERE c.county = 'ARECIBO' AND zd.type = 'Residential' ORDER BY zd.white_population DESC LIMIT 1;
SELECT county  FROM country  WHERE zip_code = (   SELECT zip_code    FROM zip_data    ORDER BY avg_income_per_household DESC    LIMIT 1 );
SELECT DISTINCT county FROM country JOIN zip_data ON country.zip_code = zip_data.zip_code WHERE daylight_savings = 'Yes' AND residential_mailboxes > 0;
SELECT zd.zip_code FROM zip_data zd JOIN country c ON zd.county_fips = c.county WHERE c.county = 'HUNTINGDON' AND zd.employees > 30;
SELECT z.asian_population FROM zip_data z JOIN avoid a ON z.zip_code = a.zip_code WHERE a.bad_alias = 'URB San Joaquin';
SELECT COUNT(*) FROM zip_data z JOIN avoid a ON z.zip_code = a.zip_code WHERE a.bad_alias = 'Internal Revenue Service' AND z.time_zone = 'Eastern' AND z.type = 'Residential';
SELECT a.bad_alias FROM avoid a JOIN (   SELECT zip_code   FROM zip_data   ORDER BY avg_house_value DESC   LIMIT 1 ) z ON a.zip_code = z.zip_code;
SELECT bad_alias FROM avoid WHERE zip_code IN (   SELECT zip_code   FROM zip_data   WHERE median_female_age > 32 AND residential_mailboxes > 0 )
SELECT MAX(male_female_ratio) AS highest_gender_ratio FROM (   SELECT zip_code, male_population, female_population, male_population / female_population AS male_female_ratio   FROM zip_data   WHERE county_fips IN (     SELECT county_fips     FROM country     WHERE county = 'ARECIBO'   ) ) AS subquery;
SELECT AVG(median_female_age) AS avg_median_female_age FROM (   SELECT zip_code, median_female_age   FROM zip_data   WHERE county = 'ARECIBO' ) AS subquery;
SELECT ac.area_code FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE zd.female_median_age > 32;
SELECT a.alias FROM alias a JOIN zip_data z ON a.zip_code = z.zip_code WHERE z.city = 'Hartford';
SELECT COUNT(DISTINCT county) FROM country WHERE state IN (   SELECT abbreviation   FROM state   WHERE name = 'Alabama' );
SELECT COUNT(DISTINCT zip_code)  FROM zip_data  WHERE state = 'NY' AND CBSA IN (   SELECT CBSA    FROM CBSA    WHERE CBSA_type = 'Post Office' AND state IN (     SELECT abbreviation      FROM state      WHERE name = 'New York'   ) );
SELECT z.city, z.latitude, z.longitude FROM zip_data z JOIN area_code a ON z.zip_code = a.zip_code WHERE a.area_code = '787';
SELECT MAX(total_delivery_receptacles)  FROM zip_data  WHERE state = 'CA' AND CBSA_type = 'Community Post Office';
SELECT county FROM country WHERE zip_code = (   SELECT zip_code   FROM zip_data   ORDER BY female_population DESC   LIMIT 1 )
SELECT s.name FROM state s JOIN zip_data z ON s.abbreviation = z.state WHERE z.organization IS NULL;
SELECT MAX(population_2020) - population_2010 FROM zip_data WHERE CBSA IN (   SELECT CBSA   FROM CBSA   WHERE CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ' );
SELECT zd.zip_code FROM zip_data zd JOIN country c ON zd.zip_code = c.zip_code JOIN state s ON c.state = s.name WHERE c.county = 'NEW CASTLE' AND s.name = 'Delaware';
SELECT COUNT(congress.cognress_rep_id) FROM congress JOIN (   SELECT state   FROM zip_data   GROUP BY state   ORDER BY MAX(monthly_benefits_retired_workers) DESC   LIMIT 1 ) AS max_state ON congress.state = max_state.state;
SELECT COUNT(DISTINCT zd.city) FROM zip_data zd JOIN congress c ON zd.state = c.state WHERE c.first_name = 'Lisa' AND c.last_name = 'Murkowski' AND zd.employees = 0;
SELECT s.name, c.first_name, c.last_name FROM state s JOIN congress c ON s.abbreviation = c.state JOIN (   SELECT TOP 3 z.state   FROM zip_data z   GROUP BY z.state   ORDER BY SUM(z.asian_population) DESC ) top_states ON s.abbreviation = top_states.state ORDER BY s.name;
SELECT s.name FROM country c JOIN state s ON c.state = s.abbreviation WHERE c.county = 'OUTAGAMIE';
SELECT party FROM congress JOIN zip_congress ON congress.District = zip_congress.district JOIN zip_data ON zip_congress.zip_code = zip_data.zip_code WHERE zip_data.zip_code = '91701';
SELECT SUM(male_population)  FROM zip_data  WHERE county_fips IN (   SELECT county_fips    FROM country    WHERE county = 'NEW HAVEN' AND state = 'CT' );
SELECT a.alias FROM alias a JOIN zip_data z ON a.zip_code = z.zip_code WHERE z.latitude = '18.090875' AND z.longitude = '-66.867756';
SELECT ac.area_code FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE zd.city = (   SELECT city   FROM zip_data   ORDER BY over_65 DESC   LIMIT 1 )
SELECT COUNT(av.bad_alias)  FROM avoid av  JOIN zip_data zd ON av.zip_code = zd.zip_code  JOIN congress c ON zd.CBSA = c.CID  WHERE c.first_name = 'Bennie' AND c.last_name = 'Thompson';
SELECT z.latitude, z.longitude FROM zip_data z JOIN area_code a ON z.zip_code = a.zip_code WHERE a.area_code = '636';
SELECT z.zip_code FROM zip_congress z JOIN congress c ON z.zip_code = c.CID WHERE c.first_name = 'Vernon' AND c.last_name = 'Buchanan';
SELECT s.name FROM area_code a JOIN zip_data z ON a.zip_code = z.zip_code JOIN state s ON z.state = s.abbreviation WHERE a.area_code = '878';
SELECT COUNT(DISTINCT county) FROM country WHERE state = 'Virginia';
SELECT z.CBSA, zd.latitude, zd.longitude FROM zip_data z JOIN CBSA c ON z.CBSA = c.CBSA WHERE z.zip_code = '45503';
SELECT c.county FROM zip_congress zc JOIN zip_data zd ON zc.zip_code = zd.zip_code JOIN congress cng ON zd.CBSA = cng.CID JOIN country c ON zd.county_fips = c.county WHERE cng.first_name = 'Vicky' AND cng.last_name = 'Hartzler';
SELECT AVG(male_median_age) / COUNT(DISTINCT county)  FROM zip_data  WHERE county_fips IN (     SELECT county_fips      FROM country      WHERE county = 'WINDHAM' AND state_fips IN (         SELECT state_fips          FROM state          WHERE abbreviation IN (             SELECT state              FROM zip_data              WHERE county_fips IN (                 SELECT county_fips                  FROM country                  WHERE county = 'WINDHAM'             )         )     ) );
SELECT AVG(female_median_age) / COUNT(DISTINCT county_fips)  FROM zip_data  WHERE CBSA IN (   SELECT CBSA    FROM congress    WHERE first_name = 'Ron' AND last_name = 'DeSantis' );
SELECT ac.area_code FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE zd.city = 'Bishopville' AND zd.state = 'SC';
SELECT a.alias FROM alias a JOIN zip_data z ON a.zip_code = z.zip_code JOIN avoid av ON a.zip_code = av.zip_code WHERE z.city = 'Geneva' AND z.state = 'AL';
SELECT z.city, z.state FROM zip_data z JOIN avoid a ON z.zip_code = a.zip_code WHERE a.bad_alias = 'Lawrenceville';
SELECT a.alias, av.bad_alias FROM alias a JOIN avoid av ON a.zip_code = av.zip_code WHERE a.zip_code = '38015';
SELECT zc.zip_code FROM congress c JOIN zip_congress zc ON c.District = zc.district WHERE c.first_name = 'Steven' AND c.last_name = 'King';
SELECT CBSA_name, CBSA_type FROM CBSA WHERE CBSA IN (   SELECT CBSA   FROM zip_data   WHERE city = 'York' AND state = 'ME' );
SELECT z.city, z.zip_code, a.area_code FROM zip_data z JOIN area_code a ON z.zip_code = a.zip_code WHERE z.median_age > 40 LIMIT 10;
SELECT c.county FROM country c JOIN avoid a ON c.zip_code = a.zip_code WHERE a.bad_alias = 'Druid Hills';
SELECT ac.area_code FROM area_code ac JOIN country c ON ac.zip_code = c.zip_code JOIN state s ON c.state = s.abbreviation WHERE c.county = 'PHILLIPS' AND s.name = 'Montana';
SELECT c.first_name, c.last_name, zc.zip_code, c.District FROM congress c JOIN zip_congress zc ON c.District = zc.district JOIN state s ON c.state = s.abbreviation WHERE s.name = 'Wisconsin' AND c.land_area = (SELECT MAX(land_area) FROM congress WHERE state = 'WI');
SELECT s.name FROM state s JOIN zip_data z ON s.abbreviation = z.state WHERE z.time_zone = 'Central' GROUP BY s.name;
SELECT z.city, s.name FROM zip_data z JOIN state s ON z.state = s.abbreviation JOIN CBSA c ON z.CBSA = c.CBSA WHERE c.CBSA_name = 'Lexington-Fayette, KY' LIMIT 10;
SELECT    zip_code,    party,    COUNT(party) AS count,    ROUND(COUNT(CASE WHEN party = 'Democrat' THEN 1 END) / COUNT(CASE WHEN party = 'Republican' THEN 1 END) * 100, 2) AS ratio FROM    congress    JOIN zip_congress ON congress.CID = zip_congress.district    JOIN zip_data ON zip_congress.zip_code = zip_data.zip_code  WHERE    state = 'Indiana'  GROUP BY    party, zip_code  HAVING    party = 'Democrat';
SELECT    (SELECT COUNT(*) FROM congress WHERE state = 'Alabama') /    (SELECT COUNT(*) FROM congress WHERE state = 'Illinois') AS ratio;
SELECT AVG(population_2020)  FROM zip_data;
SELECT zd.zip_code, zd.male_population FROM zip_data zd JOIN zip_congress zc ON zd.zip_code = zc.zip_code JOIN congress c ON zc.district = c.District JOIN cbsa cs ON c.CBSA = cs.CBSA WHERE cs.CBSA_name = 'Berlin, NH';
SELECT CBSA, CBSA_name, CBSA_type  FROM CBSA  WHERE CBSA IN (   SELECT CBSA    FROM zip_data    GROUP BY CBSA    HAVING COUNT(zip_code) > 10 );
SELECT bad_alias FROM avoid WHERE zip_code IN (   SELECT zip_code   FROM zip_data   WHERE state = 'PR' );
SELECT z.latitude, z.longitude FROM congress c JOIN zip_congress zc ON c.District = zc.district JOIN zip_data z ON zc.zip_code = z.zip_code WHERE c.first_name = 'Grayson' AND c.last_name = 'Alan';
SELECT s.name FROM area_code a JOIN zip_data z ON a.zip_code = z.zip_code JOIN state s ON z.state = s.abbreviation WHERE a.area_code = '787';
SELECT c.first_name, c.last_name FROM congress c JOIN zip_congress zc ON c.District = zc.district JOIN zip_data zd ON zc.zip_code = zd.zip_code WHERE zd.population_2020 > 30000;
SELECT z.zip_code FROM zip_data z JOIN area_code a ON z.zip_code = a.zip_code JOIN state s ON z.state = s.name WHERE s.name = 'Massachusetts' GROUP BY z.zip_code HAVING COUNT(a.area_code) > 1;
SELECT country.county FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code WHERE zip_data.city = 'Arecibo';
SELECT COUNT(DISTINCT zd.zip_code) FROM zip_data zd JOIN CBSA c ON zd.CBSA = c.CBSA WHERE c.CBSA_name = 'Barre, VT';
SELECT zd.zip_code, zd.land_area FROM zip_data zd JOIN country c ON zd.zip_code = c.zip_code WHERE c.county = 'SAINT CROIX' ORDER BY zd.land_area DESC LIMIT 1;
SELECT    z.zip_code,    z.city,    z.state,    z.population_2020,    z.population_2010,    z.population_2020 - z.population_2010 AS difference FROM    zip_data z   JOIN congress c ON z.state = c.state AND z.zip_code = c.CID WHERE    c.first_name = 'Griffin' AND c.last_name = 'Tim';
SELECT    zip_code,    (asian_population / population_2020) * 100 AS asian_population_percentage FROM    zip_data  WHERE    CBSA IN (     SELECT        CBSA      FROM        CBSA      WHERE        CBSA_name = 'Atmore, AL'   )
SELECT city FROM zip_data WHERE area_code = 939 AND asian_population = (SELECT MAX(asian_population) FROM zip_data WHERE area_code = 939);
SELECT c.country, s.name FROM zip_data zd JOIN country c ON zd.zip_code = c.zip_code JOIN state s ON zd.state = s.abbreviation WHERE zd.elevation = 1039;
SELECT a.alias, z.elevation FROM zip_data z JOIN alias a ON z.zip_code = a.zip_code WHERE z.zip_code = '10280';
SELECT ac.area_code FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE zd.land_area = (SELECT MAX(land_area) FROM zip_data);
SELECT ac.area_code FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE zd.white_population BETWEEN 1700 AND 2000;
SELECT z.asian_population FROM zip_data z JOIN alias a ON z.zip_code = a.zip_code WHERE a.alias = 'Leeds';
SELECT ac.area_code, c.county, c.state FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code JOIN country c ON zd.zip_code = c.zip_code WHERE zd.city = 'Savoy';
SELECT a.alias FROM alias a JOIN zip_data z ON a.zip_code = z.zip_code WHERE z.population_2010 = 0;
SELECT COUNT(DISTINCT z.city) FROM zip_data z JOIN area_code a ON z.zip_code = a.zip_code WHERE a.area_code = '608' AND z.daylight_savings = 'Yes';
SELECT AVG(zd.elevation)  FROM zip_data zd  JOIN alias a ON zd.zip_code = a.zip_code  WHERE a.alias = 'Amherst';
SELECT c.country, s.name FROM zip_data zd JOIN country c ON zd.zip_code = c.zip_code JOIN state s ON zd.state = s.abbreviation WHERE zd.city = 'Dalton';
SELECT a.alias FROM alias a JOIN zip_data z ON a.zip_code = z.zip_code WHERE z.type = 'Post Office' LIMIT 5;
SELECT    SUBTRACT(COUNT(CASE WHEN zd.type = 'P.O. Box Only' THEN 1 END),             COUNT(CASE WHEN zd.type = 'Post Office' THEN 1 END)) FROM    zip_data zd   JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE    ac.area_code = 787;
SELECT    (SUM(population_2020) - SUM(population_2010)) / SUM(population_2010) * 100 as percentage FROM    zip_data WHERE    county = 'ARROYO';
SELECT zd.zip_code, zd.city FROM zip_data zd JOIN state s ON zd.state = s.name WHERE s.name = 'Texas' AND zd.total_beneficiaries > 10000;
SELECT COUNT(DISTINCT zd.zip_code) FROM zip_data zd JOIN country c ON zd.zip_code = c.zip_code WHERE c.county = 'DISTRICT OF COLUMBIA' AND zd.black_population > 20000;
SELECT z.city, a.alias FROM zip_data z JOIN alias a ON z.zip_code = a.zip_code WHERE z.zip_code = '19019';
SELECT bad_alias FROM avoid WHERE zip_code IN (   SELECT zip_code   FROM zip_data   WHERE city = 'Camuy' );
SELECT zd.zip_code, zd.city, CONCAT(c.first_name,'', c.last_name) AS full_name FROM zip_data zd JOIN congress c ON zd.state = c.state JOIN zip_congress zc ON zd.zip_code = zc.zip_code WHERE zd.population_2020 = (SELECT MAX(population_2020) FROM zip_data) GROUP BY zd.zip_code, zd.city, full_name;
SELECT COUNT(DISTINCT zd.zip_code) FROM zip_data zd JOIN state s ON zd.state = s.name WHERE zd.daylight_savings = 'Yes' AND zd.region = 'Midwest' AND s.name = 'Illinois';
SELECT c.zip_code, c.county FROM country c JOIN state s ON c.state = s.abbreviation WHERE s.name = 'Virgin Islands';
SELECT z.zip_code, a.alias FROM zip_data z JOIN alias a ON z.zip_code = a.zip_code WHERE z.city = 'Greeneville';
SELECT    (SELECT COUNT(zd.zip_code)     FROM zip_data zd     JOIN congress c ON zd.state = c.state     WHERE c.first_name = 'Smith' AND c.last_name = 'Adrian')    >   (SELECT COUNT(zd.zip_code)     FROM zip_data zd     JOIN congress c ON zd.state = c.state     WHERE c.first_name = 'Heck' AND c.last_name = 'Joe');
SELECT zd.zip_code, c.CBSA_name FROM zip_data zd JOIN zip_congress zc ON zd.zip_code = zc.zip_code JOIN congress c ON zc.district = c.District WHERE zd.city = 'Oxford';
SELECT zd.zip_code, zd.organization FROM zip_data zd JOIN CBSA c ON zd.CBSA = c.CBSA WHERE c.CBSA_name = 'Kingsport-Bristol, TN-VA';
SELECT zd.zip_code, CONCAT(c.first_name,'', c.last_name) AS congress_representative FROM zip_data zd JOIN congress c ON zd.state = c.state AND zd.zip_code = zc.zip_code JOIN zip_congress zc ON zd.zip_code = zc.zip_code WHERE zd.organization = 'Readers Digest';
SELECT    DIVIDE(COUNT(zd.zip_code), (SELECT COUNT(zd.zip_code) FROM zip_data zd WHERE zd.state = 'CA')) * 100 as percentage FROM    zip_data zd WHERE    zd.state = 'CA' AND zd.type = 'Post Office';
SELECT zd.zip_code FROM zip_data zd JOIN congress c ON zd.state = c.state WHERE c.House = 'Senate';
SELECT z.city, COUNT(a.bad_alias) as bad_alias_count FROM zip_data z JOIN alias a ON z.zip_code = a.zip_code JOIN avoid av ON a.zip_code = av.zip_code GROUP BY z.city ORDER BY bad_alias_count DESC LIMIT 1;
SELECT county  FROM country  WHERE state = (SELECT abbreviation                  FROM state                  WHERE name = 'Georgia');
SELECT zd.latitude, zd.longitude FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE ac.area_code = '410';
SELECT CBSA_name  FROM CBSA  WHERE CBSA = (   SELECT CBSA    FROM zip_data    ORDER BY avg_house_value DESC    LIMIT 1 );
SELECT bad_alias FROM avoid WHERE zip_code IN (   SELECT zip_code   FROM zip_data   WHERE city = 'East Setauket' );
SELECT SUM(population_2010)  FROM zip_data  WHERE county_fips IN (   SELECT county_fips    FROM country    WHERE county = 'WILCOX' AND state = (     SELECT abbreviation      FROM state      WHERE name = 'Alabama'   ) );
SELECT a.area_code FROM zip_data z JOIN area_code a ON z.zip_code = a.zip_code WHERE z.asian_population = (SELECT MAX(asian_population) FROM zip_data);
SELECT city FROM zip_data WHERE CBSA IN (   SELECT CBSA   FROM CBSA   WHERE CBSA_type = 'Micro' );
SELECT name FROM state WHERE abbreviation IN (   SELECT state   FROM country   GROUP BY state   HAVING COUNT(county) = (     SELECT MAX(cnt)     FROM (       SELECT state, COUNT(county) AS cnt       FROM country       GROUP BY state     ) AS subquery   ) );
SELECT households FROM zip_data WHERE CBSA IN (   SELECT CBSA   FROM zip_congress   WHERE district = 'FL-10' );
SELECT AVG(avg_income_per_household)  FROM zip_data  WHERE zip_code IN (   SELECT zip_code    FROM avoid    WHERE bad_alias = 'Danzig' );
SELECT state FROM (   SELECT state, AVG(female_population) OVER () AS avg_female_pop   FROM zip_data   GROUP BY state ) AS subquery WHERE female_population > avg_female_pop;
SELECT    DIVIDE(SUM(CASE WHEN county = 'CORYELL' THEN households ELSE 0 END), SUM(households)) AS percentage FROM    zip_data WHERE    state = (SELECT state FROM country WHERE county = 'CORYELL');
SELECT CBSA_name, CBSA_type FROM CBSA JOIN zip_data ON CBSA.CBSA = zip_data.CBSA WHERE city = 'Cabo Rojo';
SELECT c.country  FROM zip_data z  JOIN country c ON z.zip_code = c.zip_code  WHERE z.city = 'Las Marias';
SELECT COUNT(DISTINCT zd.city)  FROM congress c  JOIN zip_congress zc ON c.District = zc.district  JOIN zip_data zd ON zc.zip_code = zd.zip_code  WHERE c.first_name = 'Pedro' AND c.last_name = 'Pierluisi';
SELECT a.alias FROM alias a JOIN zip_data z ON a.zip_code = z.zip_code JOIN avoid av ON a.zip_code = av.zip_code WHERE z.city = 'Aguadilla' AND av.bad_alias IS NOT NULL;
SELECT CONCAT(c.first_name,'', c.last_name) AS congressman_name FROM congress c JOIN zip_data z ON c.state = z.state WHERE z.city = 'Guanica';
SELECT s.name, COUNT(av.bad_alias) as bad_alias_count FROM avoid av JOIN zip_data zd ON av.zip_code = zd.zip_code JOIN state s ON zd.state = s.abbreviation GROUP BY s.name ORDER BY bad_alias_count DESC LIMIT 1;
SELECT    SUBTRACT(     (SELECT COUNT(ba.bad_alias)       FROM avoid ba       JOIN zip_data zd ON ba.zip_code = zd.zip_code       WHERE zd.city = 'Aguada'),     (SELECT COUNT(ba.bad_alias)       FROM avoid ba       JOIN zip_data zd ON ba.zip_code = zd.zip_code       WHERE zd.city = 'Aguadilla')   ) AS difference;
SELECT s.name FROM state s JOIN (   SELECT CBSA_type, state   FROM CBSA   JOIN zip_data ON CBSA.CBSA = zip_data.CBSA   JOIN state ON zip_data.state = state.abbreviation ) AS metro_cbsa ON s.abbreviation = metro_cbsa.state WHERE metro_cbsa.CBSA_type = 'Metro' GROUP BY s.name HAVING COUNT(metro_cbsa.CBSA_type) > 50;
SELECT SUM(population_2020)  FROM zip_data  WHERE county_fips IN (   SELECT county_fips    FROM country    WHERE county = 'ARECIBO' );
SELECT country  FROM country  JOIN zip_data ON country.zip_code = zip_data.zip_code  WHERE population_2010 > 10000;
SELECT c.country FROM country c JOIN zip_data z ON c.zip_code = z.zip_code GROUP BY c.country ORDER BY SUM(z.households) DESC LIMIT 1;
SELECT    DIVIDE(SUM(CASE WHEN zip_data.population_2020 > 10000 THEN households ELSE 0 END), SUM(households)) as percentage FROM    zip_data   JOIN country ON zip_data.zip_code = country.zip_code WHERE    zip_data.type = 'Residential';
SELECT    DIVIDE(COUNT(CASE WHEN type = 'Post Office' THEN 1 END), COUNT(*)) as percentage FROM    zip_data WHERE    county_fips IN (     SELECT        county_fips     FROM        country     WHERE        county = 'SAINT CROIX'   );
SELECT c.country FROM area_code a JOIN zip_data z ON a.zip_code = z.zip_code JOIN country c ON z.zip_code = c.zip_code WHERE a.area_code = '787' AND z.type = 'Unique Post Office';
SELECT elevation FROM zip_data WHERE city = (SELECT alias                FROM alias                WHERE alias = 'East Longmeadow');
SELECT COUNT(DISTINCT city)  FROM zip_data  WHERE daylight_savings = 'No';
SELECT c.country, a.area_code FROM zip_data z JOIN country c ON z.zip_code = c.zip_code JOIN area_code a ON z.zip_code = a.zip_code WHERE z.zip_code = '1116';
SELECT z.city, z.type FROM zip_data z JOIN alias a ON z.zip_code = a.zip_code WHERE a.alias = 'St Thomas';
SELECT city FROM zip_data WHERE state = 'OK' AND county_fips IN (   SELECT county_fips   FROM country   WHERE county = 'Noble' AND state = 'OK' );
SELECT ac.area_code FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE zd.water_area = (SELECT MAX(water_area) FROM zip_data);
SELECT a.alias FROM alias a JOIN (   SELECT zip_code   FROM zip_data   WHERE population_2020 = (SELECT MAX(population_2020) FROM zip_data) ) z ON a.zip_code = z.zip_code;
SELECT elevation FROM zip_data WHERE state = 'MA' AND county_fips = (   SELECT county   FROM country   WHERE county = 'Hampden' AND state = 'MA' );
SELECT ac.area_code FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE zd.hispanic_population = (SELECT MAX(hispanic_population) FROM zip_data);
SELECT a.alias FROM alias a JOIN zip_data z ON a.zip_code = z.zip_code WHERE z.asian_population = 7;
SELECT AVG(zd.white_population) FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE ac.area_code = '920';
SELECT    DIVIDE(COUNT(CASE WHEN county_fips < 20 THEN 1 END), COUNT(*)) as percentage FROM    zip_data    JOIN alias ON zip_data.zip_code = alias.zip_code   JOIN country ON zip_data.zip_code = country.zip_code WHERE    alias.alias = 'Ponce';
SELECT country FROM country WHERE zip_code IN (   SELECT zip_code   FROM zip_data   WHERE population_2020 > 0.97 * (SELECT AVG(population_2020) FROM zip_data)   GROUP BY city );
SELECT COUNT(DISTINCT zd.zip_code) FROM zip_data zd JOIN zip_congress zc ON zd.zip_code = zc.zip_code JOIN congress c ON zc.district = c.District WHERE c.first_name = 'Ann' AND c.last_name = 'Kirkpatrick';
SELECT zd.zip_code, zd.latitude, zd.longitude FROM zip_data zd JOIN CBSA c ON zd.CBSA = c.CBSA WHERE c.CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ';
SELECT zd.zip_code, zd.city, zd.latitude, zd.longitude FROM zip_data zd JOIN avoid a ON zd.zip_code = a.zip_code WHERE a.bad_alias = 'Shared Reshipper';
SELECT c.first_name, c.last_name FROM congress c JOIN zip_congress zc ON c.District = zc.district JOIN zip_data zd ON zc.zip_code = zd.zip_code WHERE zd.city = 'Garfield';
SELECT COUNT(DISTINCT zd.zip_code) FROM zip_data zd JOIN CBSA c ON zd.CBSA = c.CBSA WHERE c.CBSA_name = 'New York-Newark-Jersey City, NY-NJ-PA';
SELECT COUNT(DISTINCT zd.zip_code) FROM zip_data zd JOIN congress c ON zd.state = c.state WHERE c.state = 'Puerto Rico';
SELECT COUNT(DISTINCT zd.zip_code) AS num_postal_points, COUNT(DISTINCT c.county) AS num_countries FROM zip_data zd JOIN state s ON zd.state = s.name JOIN country c ON zd.zip_code = c.zip_code WHERE s.name = 'West Virginia';
SELECT zd.zip_code, ac.area_code FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE zd.type = 'Community Post Office' AND zd.elevation > 6000;
SELECT COUNT(DISTINCT zd.zip_code) FROM zip_data zd JOIN congress c ON zd.state = c.state WHERE c.House = 'House' AND c.state = 'Mississippi';
SELECT c.CID FROM congress c JOIN zip_congress zc ON c.District = zc.district JOIN zip_data zd ON zc.zip_code = zd.zip_code WHERE zd.city = 'East Springfield';
SELECT CBSA.CBSA_name FROM CBSA JOIN zip_congress ON CBSA.CBSA = zip_congress.zip_code JOIN zip_data ON zip_congress.zip_code = zip_data.zip_code WHERE zip_data.employees = (SELECT MAX(employees) FROM zip_data);
SELECT COUNT(DISTINCT zd.zip_code) FROM zip_data zd JOIN state s ON zd.state = s.name WHERE s.name = 'Ohio' AND zd.type = 'Unique Post Office';
SELECT AVG(total_beneficiaries) / COUNT(DISTINCT z.zip_code)  FROM zip_data z  JOIN state s ON z.state = s.abbreviation  WHERE s.name = 'Guam';
SELECT    DIVIDE(COUNT(c.party), COUNT(c.congress_rep_id)) as percentage,   COUNT(zd.zip_code) as postal_points FROM    congress c   JOIN zip_data zd ON c.state = zd.state WHERE    c.party = 'Democrat'    AND zd.state = 'Hawaii';
SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear = (SELECT MIN(FirstBrewedYear) FROM rootbeerbrand);
SELECT COUNT(DISTINCT BreweryName)  FROM rootbeerbrand  WHERE Country = 'United States';
SELECT BrandName FROM rootbeerbrand WHERE FacebookPage IS NOT NULL;
SELECT BrandName FROM rootbeerbrand WHERE WholesaleCost = (   SELECT MAX(WholesaleCost)   FROM rootbeerbrand   WHERE CurrentRetailPrice > WholesaleCost ) OR (   WholesaleCost = (     SELECT MIN(WholesaleCost)     FROM rootbeerbrand   )   AND CurrentRetailPrice = (     SELECT MAX(CurrentRetailPrice)     FROM rootbeerbrand   ) );
SELECT Description FROM rootbeerbrand WHERE BrandName = 'A&W';
SELECT City FROM rootbeerbrand WHERE BreweryName = 'AJ Stephans Beverages';
SELECT COUNT(*) FROM transaction JOIN customers ON transaction.CustomerID = customers.CustomerID WHERE First = 'Frank-Paul' AND Last = 'Santangelo'  AND SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07';
SELECT COUNT(*) FROM transaction JOIN customers ON transaction.CustomerID = customers.CustomerID WHERE SUBSTR(TransactionDate, 1, 4) = '2014'  AND SUBSTR(TransactionDate, 6, 2) = '07'  AND customers.Gender = 'M';
SELECT COUNT(DISTINCT c.CustomerID) FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID WHERE c.SubscribedToEmailList = 'TRUE' AND t.CreditCardType = 'Visa' AND SUBSTR(t.TransactionDate, 1, 4) = '2014' AND SUBSTR(t.TransactionDate, 6, 2) = '07';
SELECT First, Last  FROM customers  WHERE CustomerID = (   SELECT CustomerID    FROM transaction    WHERE SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08'    GROUP BY CustomerID    ORDER BY COUNT(TransactionID) DESC    LIMIT 1 )
SELECT rbb.BrandName FROM rootbeerbrand rbb JOIN rootbeer rb ON rbb.BrandID = rb.BrandID JOIN transaction t ON rb.RootBeerID = t.RootBeerID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.First = 'Frank-Paul' AND c.Last = 'Santangelo' AND t.TransactionDate = '2014-07-07';
SELECT COUNT(*) FROM transaction t JOIN rootbeer r ON t.RootBeerID = r.RootBeerID JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.TransactionDate = '2014-07-07' AND c.First = 'Frank-Paul' AND c.Last = 'Santangelo' AND r.ContainerType = 'Can';
SELECT COUNT(*) FROM transaction JOIN rootbeer ON transaction.RootBeerID = rootbeer.RootBeerID JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID WHERE rootbeerbrand.BrandName = 'Bulldog' AND SUBSTR(transaction.TransactionDate, 1, 4) = '2014' AND SUBSTR(transaction.TransactionDate, 6, 2) = '08';
SELECT CONCAT(c.First,'', c.Last) AS FullName FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID JOIN rootbeer r ON t.RootBeerID = r.RootBeerID JOIN rootbeerbrand b ON r.BrandID = b.BrandID WHERE b.BreweryName = 'AJ Stephans Beverages';
SELECT COUNT(DISTINCT rbb.BrandID) FROM rootbeerbrand rbb JOIN rootbeer rb ON rbb.BrandID = rb.BrandID JOIN transaction t ON rb.RootBeerID = t.RootBeerID WHERE rbb.Twitter IS NULL AND SUBSTR(t.TransactionDate, 1, 4) = '2014' AND SUBSTR(t.TransactionDate, 6, 2) = '08';
SELECT t.CreditCardNumber FROM transaction t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.First = 'Frank-Paul' AND c.Last = 'Santangelo' AND t.TransactionDate = '2014-07-07';
SELECT COUNT(*) FROM rootbeer r JOIN rootbeerbrand b ON r.BrandID = b.BrandID JOIN customers c ON r.LocationID IN (SELECT LocationID                                      FROM location                                      WHERE City = (SELECT City                                                    FROM customers                                                    WHERE First = 'Frank-Paul' AND Last = 'Santangelo')) JOIN transaction t ON r.RootBeerID = t.RootBeerID WHERE b.Honey = 'FALSE' AND b.ArtificialSweetener = 'FALSE';
SELECT TransactionDate FROM transaction WHERE CustomerID IN (   SELECT CustomerID   FROM customers   WHERE Gender = 'M' ) AND TransactionDate IN (   SELECT TransactionDate   FROM transaction   GROUP BY TransactionDate, CustomerID   HAVING COUNT(RootBeerID) > 3 ) GROUP BY TransactionDate;
SELECT AVG(daily_sales) AS average_daily_sales FROM (   SELECT COUNT(RootBeerID) AS daily_sales   FROM transaction   JOIN rootbeer ON transaction.RootBeerID = rootbeer.RootBeerID   JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID   WHERE BrandName = 'A&W' AND SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08'   GROUP BY SUBSTR(TransactionDate, 1, 10) ) AS daily_sales_table;
SELECT    DIVIDE(MULTIPLY(SUM(rb.BrandID IN (     SELECT BrandID      FROM rootbeerbrand      WHERE BreweryName = 'AJ Stephans Beverages'   )), 1.0), COUNT(rb.RootBeerID))  FROM    rootbeer rb    JOIN transaction t ON rb.RootBeerID = t.RootBeerID  WHERE    SUBSTR(t.TransactionDate, 1, 4) = '2014';
SELECT COUNT(*)  FROM rootbeerreview  WHERE CustomerID IN (   SELECT CustomerID    FROM customers    WHERE First = 'James' AND Last = 'House' );
SELECT t.CreditCardNumber FROM transaction t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.First = 'Lisa' AND c.Last = 'Ling';
SELECT Latitude, Longitude  FROM geolocation  WHERE LocationID IN (   SELECT LocationID    FROM location    WHERE LocationName = 'Sac State American River Courtyard' );
SELECT l.LocationName FROM location l JOIN transaction t ON l.LocationID = t.LocationID WHERE t.TransactionID = 100885;
SELECT City FROM customers WHERE CustomerID = (   SELECT CustomerID   FROM transaction   WHERE TransactionID = 103545 );
SELECT PhoneNumber FROM customers WHERE CustomerID = (   SELECT CustomerID   FROM transaction   WHERE CreditCardNumber = '6011179359005380' );
SELECT First, Last FROM customers WHERE CustomerID = (   SELECT CustomerID   FROM rootbeerreview   GROUP BY CustomerID   ORDER BY COUNT(CustomerID) DESC   LIMIT 1 );
SELECT FirstPurchaseDate  FROM customers  WHERE CustomerID IN (   SELECT CustomerID    FROM rootbeerreview    WHERE Review = 'Tastes like Australia.' );
SELECT FirstPurchaseDate  FROM customers  WHERE First = 'Natalie' AND Last = 'Dorris';
SELECT rbb.BreweryName FROM rootbeerbrand rbb JOIN (   SELECT BrandID   FROM rootbeerreview   WHERE StarRating = 5   GROUP BY BrandID   HAVING COUNT(StarRating) = (     SELECT MAX(cnt)     FROM (       SELECT BrandID, COUNT(StarRating) cnt       FROM rootbeerreview       WHERE StarRating = 5       GROUP BY BrandID     ) t   ) ) rbr ON rbb.BrandID = rbr.BrandID;
SELECT SubscribedToEmailList FROM customers WHERE CustomerID IN (   SELECT CustomerID   FROM rootbeerreview   WHERE BrandID IN (     SELECT BrandID     FROM rootbeerbrand     WHERE BrandName = 'Frostie'   ) AND StarRating = 3 AND ReviewDate = '2014-04-24' );
SELECT rbb.CurrentRetailPrice FROM rootbeerbrand rbb JOIN rootbeerreview rbr ON rbb.BrandID = rbr.BrandID WHERE rbr.Review = 'The quintessential dessert root beer. No ice cream required.';
SELECT      (SUM(CASE WHEN StarRating = 5 THEN 1 ELSE 0 END) / COUNT(*) * 1.0)      AS PercentageOf5StarRatings FROM      rootbeerreview  WHERE      BrandID IN (         SELECT              BrandID          FROM              rootbeerbrand          WHERE              BrandName = 'River City'     );
SELECT AVG(reviews_per_brand) AS avg_reviews FROM (   SELECT BrandID, COUNT(CustomerID) AS reviews_per_brand   FROM rootbeerreview   JOIN rootbeerbrand ON rootbeerreview.BrandID = rootbeerbrand.BrandID   JOIN location ON rootbeerbrand.LocationID = location.LocationID   WHERE location.State = 'CA'   GROUP BY BrandID ) AS subquery;
SELECT COUNT(*) FROM customers WHERE Gender = 'F' AND SubscribedToEmailList = 'TRUE';
SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear = (SELECT MAX(FirstBrewedYear) FROM rootbeerbrand);
SELECT CONCAT(First,'', Last) AS FullName FROM customers ORDER BY FirstPurchaseDate LIMIT 10;
SELECT COUNT(DISTINCT BreweryName)  FROM rootbeerbrand  WHERE Country = 'Australia';
SELECT COUNT(*) FROM customers WHERE First = 'Charles' AND City = 'Sacramento';
SELECT COUNT(*)  FROM transaction  WHERE CreditCardType = 'MasterCard'  AND TransactionDate >= '2014-01-01'  AND TransactionDate <= '2014-12-31';
SELECT rbb.BrandName FROM rootbeerreview rbr JOIN customers c ON rbr.CustomerID = c.CustomerID JOIN rootbeerbrand rbb ON rbr.BrandID = rbb.BrandID WHERE c.First = 'Jayne' AND c.Last = 'Collins' AND rbr.StarRating = (     SELECT MIN(StarRating)     FROM rootbeerreview     WHERE CustomerID = (         SELECT CustomerID         FROM customers         WHERE First = 'Jayne' AND Last = 'Collins'     ) );
SELECT COUNT(*) FROM transaction t JOIN rootbeer r ON t.RootBeerID = r.RootBeerID JOIN rootbeerbrand b ON r.BrandID = b.BrandID JOIN location l ON r.LocationID = l.LocationID WHERE b.Honey = 'TRUE' AND r.ContainerType = 'Bottle' AND b.CaneSugar = 'FALSE'  AND r.PurchaseDate <= '2015-12-31' AND l.LocationName = 'Sac State American River Courtyard';
SELECT rbb.BreweryName FROM rootbeerbrand rbb JOIN (   SELECT BrandID   FROM rootbeer   WHERE PurchaseDate >= '2016-01-01' AND PurchaseDate <= '2016-12-31'   GROUP BY BrandID   ORDER BY COUNT(BrandID) DESC   LIMIT 1 ) rb ON rbb.BrandID = rb.BrandID;
SELECT c.First, c.Last  FROM customers c  JOIN rootbeerreview r ON c.CustomerID = r.CustomerID  JOIN rootbeerbrand b ON r.BrandID = b.BrandID  WHERE b.BrandName = 'River City' AND r.StarRating = 5;
SELECT COUNT(r.RootBeerID) FROM transaction t JOIN customers c ON t.CustomerID = c.CustomerID JOIN rootbeer r ON t.RootBeerID = r.RootBeerID WHERE c.First = 'Tom' AND c.Last = 'Hanks' AND t.TransactionDate >= '2015-01-01' AND t.TransactionDate < '2016-12-31';
SELECT rbb.BrandName FROM rootbeerbrand rbb JOIN rootbeerreview rbr ON rbb.BrandID = rbr.BrandID WHERE rbr.StarRating = 5 GROUP BY rbb.BrandName ORDER BY COUNT(rbr.StarRating) DESC LIMIT 1;
SELECT COUNT(r.RootBeerID) FROM rootbeer r JOIN rootbeerbrand b ON r.BrandID = b.BrandID JOIN transaction t ON r.RootBeerID = t.RootBeerID JOIN customers c ON t.CustomerID = c.CustomerID WHERE b.BrandName = 'Henry Weinhard''s' AND c.First = 'Nicholas' AND c.Last = 'Sparks';
SELECT BrandName, COUNT(BrandID) as num_purchases FROM rootbeerbrand JOIN rootbeer ON rootbeerbrand.BrandID = rootbeer.BrandID WHERE FacebookPage IS NULL AND Twitter IS NULL GROUP BY BrandName ORDER BY num_purchases DESC LIMIT 1;
SELECT l.LocationName, COUNT(rb.BrandID) AS TotalSold FROM rootbeer rb JOIN location l ON rb.LocationID = l.LocationID JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID WHERE l.LocationName IN ('Sac State American River Courtyard', 'Sac State Union') AND rbb.BrandName = 'Dog n Suds' GROUP BY l.LocationName ORDER BY TotalSold DESC LIMIT 1;
SELECT COUNT(*) FROM rootbeer r JOIN rootbeerbrand b ON r.BrandID = b.BrandID WHERE r.ContainerType = 'Can' AND b.BrandName = 'A&W' AND r.PurchaseDate >= '2016-01-01' AND r.PurchaseDate <= '2016-12-31';
SELECT geolocation.Latitude, geolocation.Longitude FROM geolocation JOIN location ON geolocation.LocationID = location.LocationID WHERE location.LocationName = 'Sac State Union';
SELECT rbb.BrandName FROM rootbeerbrand rbb JOIN rootbeer rb ON rbb.BrandID = rb.BrandID JOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID GROUP BY rbb.BrandName HAVING COUNT(rbr.CustomerID) >= 5 AND rbr.StarRating = 5;
SELECT    b.BrandName,    (COUNT(rb.BrandID) / (SELECT COUNT(*) FROM rootbeerbrand WHERE BreweryName = 'Dr Pepper Snapple Group')) * 100 AS PercentageOfPurchases FROM    rootbeer rb    JOIN rootbeerbrand b ON rb.BrandID = b.BrandID  WHERE    b.BreweryName = 'Dr Pepper Snapple Group'    AND rb.PurchaseDate >= '2014-01-01'    AND rb.PurchaseDate <= '2016-12-31'  GROUP BY    b.BrandName;
WITH      brand_profit AS (         SELECT              BrandID,              BrandName,              CurrentRetailPrice,              WholesaleCost,              CurrentRetailPrice - WholesaleCost AS unit_profit         FROM              rootbeerbrand     ),      min_profit_brand AS (         SELECT              BrandID,              BrandName,              unit_profit         FROM              brand_profit         WHERE              unit_profit = (SELECT MIN(unit_profit) FROM brand_profit)     ),      customer_purchases AS (         SELECT              CustomerID,              BrandID,              COUNT(*) AS num_purchases         FROM              transaction          INNER JOIN              rootbeer          ON              transaction.RootBeerID = rootbeer.RootBeerID          INNER JOIN              rootbeerbrand          ON              rootbeer.BrandID = rootbeerbrand.BrandID         GROUP BY              CustomerID,              BrandID     ),      max_purchases_customer AS (         SELECT              CustomerID,              BrandID,              num_purchases         FROM              customer_purchases         WHERE              (BrandID, num_purchases) IN (                 SELECT                      BrandID,                      MAX(num_purchases)                  FROM                      customer_purchases                  GROUP BY                      BrandID             )     ) SELECT      mpb.BrandID,      mpb.BrandName,      mpc.CustomerID FROM      min_profit_brand mpb INNER JOIN      max_purchases_customer mpc  ON      mpb.BrandID = mpc.BrandID;
SELECT CONCAT(First,'', Last) AS FullName, PhoneNumber FROM customers WHERE City = 'Fair Oaks' AND Gender = 'M' AND SubscribedToEmailList = 'TRUE';
SELECT      (SUM(CASE WHEN ContainerType = 'Can' THEN 1 ELSE 0 END) / COUNT(RootBeerID)) * 1.0 FROM      rootbeer WHERE      PurchaseDate >= '2014-01-01' AND PurchaseDate <= '2014-12-31';
SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear >= 1996 AND FirstBrewedYear <= 2000 ORDER BY FirstBrewedYear DESC;
SELECT rbb.BrandID FROM rootbeerbrand rbb JOIN rootbeer rb ON rbb.BrandID = rb.BrandID JOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID WHERE rbr.StarRating = 1 GROUP BY rbb.BrandID ORDER BY COUNT(rbr.StarRating) DESC LIMIT 1;
SELECT      (SUM(CASE WHEN CreditCardType = 'Visa' THEN 1 ELSE 0 END) / COUNT(TransactionID)) * 1.0 FROM      transaction;
SELECT COUNT(DISTINCT BrandID) FROM rootbeerbrand WHERE AvailableInCans = 'TRUE' AND CornSyrup = 'TRUE' AND ArtificialSweetener = 'TRUE';
SELECT      (SUM(CASE WHEN l.LocationName = 'Sac State American River Courtyard' THEN 1 ELSE 0 END) / COUNT(l.LocationID)) * 1.0 AS percentage FROM      transaction t JOIN      location l ON t.LocationID = l.LocationID;
SELECT AVG(daily_sales) AS avg_daily_caffeinated_sales FROM (   SELECT COUNT(rb.RootBeerID) AS daily_sales   FROM rootbeer rb   JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID   JOIN transaction t ON rb.RootBeerID = t.RootBeerID   WHERE rbb.Caffeinated = 'TRUE'   GROUP BY t.TransactionDate ) AS daily_caffeinated_sales;
WITH ProfitPerUnit AS (   SELECT      ContainerType,      BrandID,      (CurrentRetailPrice - WholesaleCost) AS Profit   FROM      rootbeer    JOIN      rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID ) SELECT    'Most Profitable' AS Type,    ContainerType,    Profit FROM    ProfitPerUnit WHERE    Profit = (SELECT MAX(Profit) FROM ProfitPerUnit)  UNION ALL  SELECT    'Least Profitable' AS Type,    ContainerType,    Profit FROM    ProfitPerUnit WHERE    Profit = (SELECT MIN(Profit) FROM ProfitPerUnit);
SELECT AVG(PurchasePrice) AS AverageCost FROM transaction JOIN rootbeer ON transaction.RootBeerID = rootbeer.RootBeerID WHERE PurchasePrice > 2 AND rootbeer.ContainerType = 'Bottle';
SELECT COUNT(*) FROM rootbeer r JOIN location l ON r.LocationID = l.LocationID JOIN geolocation g ON l.LocationID = g.LocationID WHERE r.ContainerType = 'Bottle' AND g.Latitude = 38.559615 AND g.Longitude = -121.42243;
SELECT    SUM(CASE WHEN r.StarRating > 3 THEN 1 ELSE 0 END) /    COUNT(c.CustomerID) * 1.0 AS percentage FROM customers c LEFT JOIN rootbeerreview r ON c.CustomerID = r.CustomerID WHERE c.SubscribedToEmailList = 'FALSE';
SELECT rbb.BrandName FROM rootbeerbrand rbb JOIN rootbeer rb ON rbb.BrandID = rb.BrandID JOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID WHERE rbb.FirstBrewedYear = 2012 AND rbr.StarRating = 5 GROUP BY rbb.BrandName ORDER BY COUNT(rbr.StarRating) DESC LIMIT 1;
SELECT COUNT(DISTINCT c.CustomerID) FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID JOIN rootbeer r ON t.RootBeerID = r.RootBeerID JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID WHERE c.Gender = 'F' AND rb.ArtificialSweetener = 'TRUE';
SELECT    SUBTRACT(     SUM(CASE WHEN rb.CaneSugar = 'TRUE' THEN 1 ELSE 0 END),     SUM(CASE WHEN rb.CornSyrup = 'TRUE' THEN 1 ELSE 0 END)   ) AS difference FROM    rootbeerbrand rb   JOIN rootbeer r ON rb.BrandID = r.BrandID   JOIN transaction t ON r.RootBeerID = t.RootBeerID;
SELECT rbb.BreweryName, COUNT(tr.RootBeerID) AS TotalSold FROM transaction tr JOIN rootbeer rb ON tr.RootBeerID = rb.RootBeerID JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID WHERE tr.TransactionDate BETWEEN '2015-01-01' AND '2015-12-31' GROUP BY rbb.BreweryName ORDER BY TotalSold DESC LIMIT 1;
SELECT    (SUM(CASE WHEN b.BrandName = 'Dominion' THEN 1 ELSE 0 END) * 1.0 / COUNT(*)) * 100 AS Percentage FROM    customers c   JOIN transaction t ON c.CustomerID = t.CustomerID   JOIN rootbeer r ON t.RootBeerID = r.RootBeerID   JOIN rootbeerbrand b ON r.BrandID = b.BrandID WHERE    c.Gender = 'M'    AND c.City = 'Sacramento'    AND t.TransactionDate >= '2013-01-01'    AND t.TransactionDate < '2014-01-01';
SELECT    AVG(CASE WHEN b.Honey = 'TRUE' THEN 1.0 ELSE 0 END) / COUNT(DISTINCT t.TransactionDate) -    AVG(CASE WHEN b.Honey = 'FALSE' THEN 1.0 ELSE 0 END) / COUNT(DISTINCT t.TransactionDate) FROM    transaction t JOIN    rootbeer r ON t.RootBeerID = r.RootBeerID JOIN    rootbeerbrand b ON r.BrandID = b.BrandID;
SELECT c.First, c.Last, c.Email FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID JOIN location l ON t.LocationID = l.LocationID WHERE t.CreditCardType = 'American Express' AND l.LocationName = 'Sac State Union';
SELECT rbb.BrandName, MAX(rbr.StarRating) AS HighestStarRating FROM rootbeerreview rbr JOIN rootbeerbrand rbb ON rbr.BrandID = rbb.BrandID WHERE rbr.ReviewDate LIKE '2014-09%' GROUP BY rbb.BrandName ORDER BY HighestStarRating DESC LIMIT 1;
SELECT g.Latitude, g.Longitude FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID JOIN geolocation g ON t.LocationID = g.LocationID WHERE t.CreditCardType = 'American Express';
SELECT COUNT(DISTINCT c.CustomerID) FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID WHERE c.City = 'Folsom' AND t.CreditCardType = 'Visa';
SELECT DISTINCT c.City FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID WHERE r.StarRating = 5 AND r.ReviewDate LIKE '2012-11%';
SELECT rbb.BrandName FROM rootbeerbrand rbb JOIN rootbeer rb ON rbb.BrandID = rb.BrandID JOIN transaction t ON rb.RootBeerID = t.RootBeerID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.First = 'Peg' AND c.Last = 'Winchester';
SELECT b.BrandName FROM rootbeerbrand b JOIN rootbeerreview r ON b.BrandID = r.BrandID WHERE r.StarRating = 1 GROUP BY b.BrandName ORDER BY COUNT(r.StarRating) DESC LIMIT 1;
SELECT CreditCardType, COUNT(CreditCardType) as count FROM transaction JOIN rootbeer ON transaction.RootBeerID = rootbeer.RootBeerID JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID WHERE Alcoholic = 'FALSE' GROUP BY CreditCardType ORDER BY count DESC LIMIT 1;
SELECT CONCAT(c.First,'', c.Last) AS CustomerName FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID WHERE r.StarRating = 5;
SELECT Latitude FROM geolocation JOIN location ON geolocation.LocationID = location.LocationID JOIN rootbeer ON location.LocationID = rootbeer.LocationID JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID WHERE rootbeerbrand.BrandName = 'Thomas Kemper' GROUP BY Latitude ORDER BY COUNT(Latitude) DESC LIMIT 1;
SELECT StarRating FROM rootbeerreview JOIN rootbeer ON rootbeerreview.BrandID = rootbeer.BrandID JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID WHERE CornSyrup = 'TRUE' GROUP BY StarRating ORDER BY COUNT(StarRating) DESC LIMIT 1;
SELECT Latitude, Longitude FROM geolocation JOIN location ON geolocation.LocationID = location.LocationID WHERE location.ZipCode = '95819';
SELECT rbb.BrandName FROM rootbeerbrand rbb JOIN rootbeer rb ON rbb.BrandID = rb.BrandID JOIN location l ON rb.LocationID = l.LocationID JOIN geolocation g ON l.LocationID = g.LocationID WHERE g.Latitude = 38.566129 AND g.Longitude = -121.426432;
SELECT AVG(CurrentRetailPrice - WholesaleCost) AS AverageUnitProfit FROM rootbeerbrand rbb JOIN rootbeer rb ON rbb.BrandID = rb.BrandID WHERE rb.ContainerType = 'Can';
SELECT      ROUND(         (COUNT(DISTINCT t.CustomerID) /           (SELECT COUNT(DISTINCT CustomerID)            FROM transaction            WHERE CreditCardType = 'Discover')) * 100, 2     ) AS percentage FROM      transaction t JOIN      rootbeerreview r ON t.CustomerID = r.CustomerID WHERE      t.CreditCardType = 'Discover'      AND r.StarRating = 3;
SELECT DISTINCT rbb.BrandID FROM rootbeerbrand rbb JOIN rootbeer rb ON rbb.BrandID = rb.BrandID JOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID WHERE rbr.StarRating > 3;
SELECT COUNT(DISTINCT rb.BrandID) FROM rootbeer rb WHERE rb.ContainerType = 'Bottle' AND rb.PurchaseDate BETWEEN '2015-04-03' AND '2015-10-26';
SELECT CONCAT(c.First,'', c.Last) AS FullName FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID WHERE r.StarRating = 5 AND r.Review = 'The quintessential dessert root beer. No ice cream required';
SELECT Email, PhoneNumber FROM customers WHERE City = 'Sacramento' AND CustomerID IN (     SELECT CustomerID     FROM rootbeerreview     WHERE StarRating > 3 AND ReviewDate LIKE '2014%' );
SELECT COUNT(*) FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID WHERE c.Gender = 'F'  AND c.SubscribedToEmailList = 'TRUE'  AND c.City = 'Sacramento'  AND r.StarRating = 4  AND r.ReviewDate BETWEEN '2016-01-03' AND '2016-10-26';
SELECT rbb.BreweryName, rbb.BrandName FROM rootbeerbrand rbb JOIN rootbeer rb ON rbb.BrandID = rb.BrandID JOIN transaction t ON rb.RootBeerID = t.RootBeerID WHERE rb.ContainerType = 'Can' AND t.PurchaseDate < '2015-06-06';
SELECT rbb.BrandName FROM rootbeerbrand rbb WHERE rbb.FirstBrewedYear <= 1930 AND rbb.BrandID IN (   SELECT rb.BrandID   FROM rootbeer rb   WHERE rb.ContainerType = 'Bottle' );
SELECT COUNT(*) FROM transaction JOIN customers ON transaction.CustomerID = customers.CustomerID WHERE First = 'Anna' AND Last = 'Himes' AND CreditCardType = 'MasterCard' AND TransactionDate BETWEEN '2014-12-25' AND '2016-05-20';
SELECT AVG(StarRating)  FROM rootbeerreview  WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Gender = 'F')  AND BrandID = 10018  AND ReviewDate BETWEEN '2015-01-25' AND '2015-03-10';
SELECT rbb.BrandName FROM rootbeerreview rbr JOIN rootbeerbrand rbb ON rbr.BrandID = rbb.BrandID WHERE rbr.CustomerID = 331115 AND rbr.StarRating = 1 AND rbr.Review = 'Yuk, more like licorice soda';
SELECT SUM(PurchasePrice) AS TotalPurchases FROM transaction JOIN location ON transaction.LocationID = location.LocationID WHERE CreditCardType = 'Visa' AND LocationName = 'Sac State American River Courtyard' AND TransactionDate BETWEEN '2014-06-03' AND '2015-11-27';
SELECT COUNT(*) FROM transaction JOIN location ON transaction.LocationID = location.LocationID WHERE location.LocationName = 'Sac State Union' AND transaction.CreditCardType = 'American Express' AND transaction.TransactionDate LIKE '2014%';
SELECT Latitude, Longitude FROM geolocation WHERE LocationID IN (   SELECT LocationID   FROM location   WHERE LocationName = 'Sac State Union' );
SELECT Review FROM rootbeerreview JOIN customers ON rootbeerreview.CustomerID = customers.CustomerID JOIN rootbeerbrand ON rootbeerreview.BrandID = rootbeerbrand.BrandID WHERE BrandName = 'Bulldog' AND ReviewDate = '2013-07-26';
SELECT    rb.BrandName,    (rb.CurrentRetailPrice - rb.WholesaleCost) AS UnitProfit FROM    rootbeerbrand rb   JOIN rootbeerreview r ON rb.BrandID = r.BrandID WHERE    r.StarRating = 5 AND r.ReviewDate LIKE '2013%';
SELECT CONCAT(c.First,'', c.Last) AS FullName,         TIMESTAMPDIFF(DAY, c.FirstPurchaseDate, r.ReviewDate) AS DaysSinceFirstReview FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID ORDER BY r.ReviewDate LIMIT 1;
SELECT CreditCardType  FROM transaction  JOIN customers ON transaction.CustomerID = customers.CustomerID  WHERE customers.First = 'Kenneth' AND customers.Last = 'Walton';
SELECT r.ContainerType, rb.BrandName, rbr.StarRating FROM rootbeer r JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID JOIN rootbeerreview rbr ON r.BrandID = rbr.BrandID WHERE r.RootBeerID = 10054;
SELECT r.RootBeerID, rb.BrandName, r.ContainerType FROM rootbeer r JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID JOIN transaction t ON r.RootBeerID = t.RootBeerID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.First = 'Tim' AND c.Last = 'Ocel'    OR c.First = 'Dawn' AND c.Last = 'Childress';
SELECT r.RootBeerID FROM rootbeer r JOIN rootbeerbrand b ON r.BrandID = b.BrandID WHERE b.BrandName IN ('Bulldog', 'Bundaberg', 'Dad''s', 'Dog n Suds', 'Virgil''s');
SELECT COUNT(r.RootBeerID) FROM rootbeer r JOIN transaction t ON r.RootBeerID = t.RootBeerID JOIN customers c ON t.CustomerID = c.CustomerID WHERE r.ContainerType = 'Bottle' AND c.First = 'Jim' AND c.Last = 'Breech';
SELECT COUNT(*) FROM transaction t JOIN rootbeer r ON t.RootBeerID = r.RootBeerID JOIN rootbeerbrand b ON r.BrandID = b.BrandID WHERE b.State = 'CA';
SELECT AVG(StarRating)  FROM rootbeerreview  WHERE CustomerID IN (   SELECT CustomerID    FROM customers    WHERE SubscribedToEmailList = 'TRUE' );
SELECT    ABS(     (SELECT COUNT(*) FROM rootbeer r      JOIN location l ON r.LocationID = l.LocationID      WHERE r.ContainerType = 'Bottle' AND l.State = 'LA')     -     (SELECT COUNT(*) FROM rootbeer r      JOIN location l ON r.LocationID = l.LocationID      WHERE r.ContainerType = 'Bottle' AND l.State = 'MO')   ) AS difference;
SELECT    SUM(CASE WHEN l.LocationName = 'Sac State American River Courtyard' THEN 1 ELSE 0 END) /    SUM(CASE WHEN l.LocationName = 'Sac State Union' THEN 1 ELSE 0 END) AS TransactionRatio FROM    transaction t JOIN    location l ON t.LocationID = l.LocationID;
SELECT c.First, c.Last, t.CreditCardType FROM customers c JOIN (   SELECT CustomerID, CreditCardType, SUM(PurchasePrice) as TotalSpend   FROM transaction   GROUP BY CustomerID, CreditCardType   ORDER BY TotalSpend DESC   LIMIT 10 ) t ON c.CustomerID = t.CustomerID;
SELECT    b.BrandName,    SUM(t.PurchasePrice) AS TotalAmountSold FROM    rootbeerbrand b   JOIN rootbeer r ON b.BrandID = r.BrandID   JOIN transaction t ON r.RootBeerID = t.RootBeerID WHERE    b.Caffeinated = 'FALSE' AND b.CaneSugar = 'FALSE' GROUP BY    b.BrandName;
SELECT BrandName FROM rootbeerbrand WHERE BrandID IN (   SELECT BrandID   FROM rootbeer   GROUP BY BrandID   HAVING COUNT(BrandID) = (     SELECT MIN(cnt)     FROM (       SELECT BrandID, COUNT(BrandID) as cnt       FROM rootbeer       GROUP BY BrandID     ) AS subquery   ) )
SELECT    b.BrandName,    COUNT(rb.BrandID) AS TotalSales,    AVG(r.StarRating) AS AverageStarRating FROM    rootbeer rb    JOIN rootbeerbrand b ON rb.BrandID = b.BrandID    JOIN rootbeerreview r ON rb.BrandID = r.BrandID  GROUP BY    b.BrandName  ORDER BY    TotalSales DESC  LIMIT 1;
SELECT      (SUM(CASE WHEN b.BrandName = 'River City' THEN t.PurchasePrice ELSE 0 END) -       SUM(CASE WHEN b.BrandName = 'Frostie' THEN t.PurchasePrice ELSE 0 END)) * 100 /     SUM(CASE WHEN b.BrandName = 'Frostie' THEN t.PurchasePrice ELSE 0 END) AS percentage_difference FROM      transaction t JOIN      rootbeer r ON t.RootBeerID = r.RootBeerID JOIN      rootbeerbrand b ON r.BrandID = b.BrandID;
SELECT DISTINCT City FROM location WHERE State = 'CA';
SELECT      (COUNT(CASE WHEN Gender = 'F' AND SubscribedToEmailList = 'TRUE' THEN CustomerID END) / COUNT(CASE WHEN SubscribedToEmailList = 'TRUE' THEN CustomerID END)) * 1.0 AS PercentageOfFemaleSubscribers FROM      customers;
SELECT DISTINCT CreditCardType FROM transaction JOIN customers ON transaction.CustomerID = customers.CustomerID WHERE customers.First = 'Dick' AND customers.Last = 'Ruthven';
SELECT COUNT(*)  FROM transaction  WHERE LocationID IN (   SELECT LocationID    FROM location    WHERE LocationName = 'Sac State Union' );
SELECT StarRating FROM rootbeerreview JOIN customers ON rootbeerreview.CustomerID = customers.CustomerID JOIN rootbeerbrand ON rootbeerreview.BrandID = rootbeerbrand.BrandID WHERE First = 'Urijah' AND Last = 'Faber' AND BrandName = 'Frostie';
SELECT rbb.BrandName FROM rootbeerbrand rbb JOIN rootbeer rb ON rbb.BrandID = rb.BrandID JOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID WHERE rbr.Review = 'Too Spicy!' GROUP BY rbb.BrandName HAVING MIN(rbr.StarRating) = (   SELECT MIN(rbr.StarRating)   FROM rootbeerbrand rbb   JOIN rootbeer rb ON rbb.BrandID = rb.BrandID   JOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID   WHERE rbr.Review = 'Too Spicy!' );
SELECT COUNT(*)  FROM transaction  JOIN location ON transaction.LocationID = location.LocationID  WHERE location.LocationName = 'Sac State American River Courtyard'  AND CreditCardType = 'MasterCard';
SELECT rbb.BrandName FROM rootbeerbrand rbb JOIN rootbeerreview rbr ON rbb.BrandID = rbr.BrandID WHERE rbb.CaneSugar = 'TRUE' AND rbb.Honey = 'TRUE' AND rbr.ReviewDate LIKE '2012%' GROUP BY rbb.BrandName HAVING MIN(rbr.StarRating) = (     SELECT MIN(rbr.StarRating)     FROM rootbeerbrand rbb     JOIN rootbeerreview rbr ON rbb.BrandID = rbr.BrandID     WHERE rbb.CaneSugar = 'TRUE' AND rbb.Honey = 'TRUE' AND rbr.ReviewDate LIKE '2012%' );
SELECT g.Latitude, g.Longitude FROM transaction t JOIN customers c ON t.CustomerID = c.CustomerID JOIN location l ON t.LocationID = l.LocationID JOIN geolocation g ON l.LocationID = g.LocationID WHERE c.First = 'Tommy' AND c.Last = 'Kono' AND t.TransactionDate LIKE '2014%';
SELECT Email FROM customers WHERE CustomerID = (SELECT CustomerID                     FROM transaction                     WHERE TransactionID = 100016);
SELECT COUNT(*) FROM transaction t JOIN rootbeer r ON t.RootBeerID = r.RootBeerID WHERE r.ContainerType = 'Bottle' AND t.CreditCardType = 'American Express';
SELECT LocationName FROM location WHERE LocationID = (   SELECT LocationID   FROM rootbeer   WHERE ContainerType = 'Bottle'   GROUP BY LocationID   ORDER BY COUNT(LocationID) DESC   LIMIT 1 )
SELECT BrandName FROM rootbeerbrand WHERE BrandID IN (   SELECT BrandID   FROM rootbeerreview   GROUP BY BrandID   ORDER BY COUNT(CASE WHEN StarRating = 5 THEN 1 END) DESC   LIMIT 3 )
SELECT Latitude, Longitude FROM geolocation JOIN location ON geolocation.LocationID = location.LocationID WHERE location.LocationName = 'Sac State American River Courtyard';
SELECT COUNT(SalesID)  FROM Sales  WHERE CustomerID = 80;
SELECT SUM(Quantity)  FROM Sales  WHERE SalesID BETWEEN 1 AND 10;
SELECT AVG(Quantity)  FROM Sales  WHERE SalesID BETWEEN 20 AND 30;
SELECT ProductID FROM Sales WHERE Quantity = (SELECT MAX(Quantity) FROM Sales);
SELECT COUNT(DISTINCT ProductID)  FROM Sales  WHERE ProductID IN (     SELECT ProductID      FROM Products      WHERE Price = (SELECT MIN(Price) FROM Products) );
SELECT Name FROM Products WHERE Price = 0;
SELECT Name FROM Products WHERE ProductID BETWEEN 1 AND 10;
SELECT p.Name FROM Products p JOIN Sales s ON p.ProductID = s.ProductID WHERE s.Quantity = (SELECT MIN(Quantity) FROM Sales);
SELECT COUNT(DISTINCT s.CustomerID) FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Hex Nut 9';
SELECT COUNT(SalesID) FROM Sales WHERE ProductID IN (   SELECT ProductID   FROM Products   WHERE Name = 'Flat Washer 8' );
SELECT p.Name FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.SalesPersonID = 10;
SELECT FirstName FROM Customers WHERE CustomerID IN (   SELECT CustomerID   FROM Sales   WHERE ProductID = 1 );
SELECT LastName FROM Customers WHERE CustomerID = (SELECT CustomerID FROM Sales WHERE SalesID = 178);
SELECT p.ProductID FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID JOIN Products p ON s.ProductID = p.ProductID WHERE c.FirstName = 'Abby';
SELECT p.ProductID FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID JOIN Products p ON s.ProductID = p.ProductID WHERE c.FirstName = 'Meander';
SELECT LastName FROM Employees WHERE EmployeeID = (   SELECT SalesPersonID   FROM Sales   WHERE SalesID = 100 );
SELECT E.FirstName FROM Employees E JOIN Sales S ON E.EmployeeID = S.SalesPersonID JOIN Customers C ON S.CustomerID = C.CustomerID WHERE C.FirstName = 'Abigail';
SELECT SUM(Quantity)  FROM Sales  JOIN Products ON Sales.ProductID = Products.ProductID  WHERE CustomerID = 11782 AND Price = 0;
SELECT CONCAT(c.FirstName,'', c.MiddleInitial,'', c.LastName) AS FullName FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID WHERE s.SalesPersonID = 5;
SELECT s.SalesID FROM Sales s JOIN Employees e ON s.SalesPersonID = e.EmployeeID WHERE e.FirstName LIKE's%';
SELECT MAX(P.Price) FROM Sales S JOIN Customers C ON S.CustomerID = C.CustomerID JOIN Products P ON S.ProductID = P.ProductID WHERE C.CustomerID BETWEEN 1 AND 100;
SELECT FirstName, MiddleInitial, LastName FROM Customers WHERE LastName = 'Valdez' AND CustomerID IN (     SELECT CustomerID     FROM Sales     WHERE Quantity = (         SELECT MAX(Quantity)         FROM Sales         WHERE CustomerID IN (             SELECT CustomerID             FROM Customers             WHERE LastName = 'Valdez'         )     ) );
SELECT SUM(s.SalesID) FROM Sales s JOIN Employees e ON s.SalesPersonID = e.EmployeeID WHERE e.FirstName IN ('Morningstar', 'Heather', 'Dean');
SELECT CASE      WHEN EXISTS (SELECT 1                    FROM Sales                    JOIN Customers ON Sales.CustomerID = Customers.CustomerID                    WHERE ProductID = 498 AND FirstName = 'Alex')      THEN 'Yes'      ELSE 'No'  END AS HasAlexPurchasedProduct;
SELECT SUM(p.Price * s.Quantity)  FROM Sales s  JOIN Customers c ON s.CustomerID = c.CustomerID  JOIN Products p ON s.ProductID = p.ProductID  WHERE c.FirstName = 'Adam';
SELECT SUM(Price * Quantity) AS TotalPrice FROM Sales JOIN Products ON Sales.ProductID = Products.ProductID WHERE Products.ProductID BETWEEN 400 AND 500;
SELECT SUM(Quantity)  FROM Sales  WHERE ProductID IN (   SELECT ProductID    FROM Products    WHERE Name LIKE 'C%' );
SELECT SUM(s.Quantity)  FROM Sales s  JOIN Customers c ON s.CustomerID = c.CustomerID  WHERE c.FirstName = 'Adrian';
SELECT ProductID FROM Products ORDER BY Price DESC LIMIT 5;
SELECT COUNT(*)  FROM Products  WHERE Price = 0;
SELECT p.Name FROM Products p JOIN Sales s ON p.ProductID = s.ProductID GROUP BY p.Name HAVING SUM(s.Quantity) > 950;
SELECT CONCAT(E.FirstName,'', E.MiddleInitial,'', E.LastName) AS EmployeeFullName FROM Employees E JOIN Sales S ON E.EmployeeID = S.SalesPersonID GROUP BY E.EmployeeID, E.FirstName, E.MiddleInitial, E.LastName HAVING SUM(S.Quantity) = 1000;
SELECT p.Name, s.Quantity FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.SalesID BETWEEN 1 AND 10;
SELECT SUM(p.Price * s.Quantity)  FROM Sales s  JOIN Products p ON s.ProductID = p.ProductID  WHERE p.Name = 'Reflector';
SELECT    Name  FROM    Products p    JOIN Sales s ON p.ProductID = s.ProductID  WHERE    Name LIKE 'HL Mountain Frame - %' AND Name LIKE '%42'  GROUP BY    Name  ORDER BY    SUM(Quantity) DESC  LIMIT 1;
SELECT    ABS((SELECT Price FROM Products WHERE Name = 'HL Mountain Frame - Black, 42')    - (SELECT Price FROM Products WHERE Name = 'LL Mountain Frame - Black, 42'))  AS PriceDifference;
SELECT COUNT(*)  FROM Sales  WHERE Sales.SalesPersonID IN (   SELECT EmployeeID    FROM Employees    WHERE FirstName = 'Michel' AND MiddleInitial = 'E.' AND LastName = 'DeFrance' );
SELECT AVG(customer_count) AS avg_customers_per_salesperson FROM (   SELECT SalesPersonID, COUNT(DISTINCT CustomerID) AS customer_count   FROM Sales   GROUP BY SalesPersonID ) AS subquery;
SELECT COUNT(DISTINCT c.CustomerID) FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID JOIN Employees e ON s.SalesPersonID = e.EmployeeID JOIN Products p ON s.ProductID = p.ProductID WHERE e.FirstName = 'Innes' AND e.MiddleInitial = 'E.' AND e.LastName = 'del Castillo' AND p.Name = 'Short-Sleeve Classic Jersey, L';
SELECT CONCAT(E.FirstName,'', E.MiddleInitial,'', E.LastName) AS SalesPersonName FROM Sales S JOIN Customers C ON S.CustomerID = C.CustomerID JOIN Employees E ON S.SalesPersonID = E.EmployeeID JOIN Products P ON S.ProductID = P.ProductID WHERE C.FirstName = 'Elizabeth' AND C.MiddleInitial = 'A' AND C.LastName = 'White' AND P.Name = 'Road-250 Black, 48';
SELECT COUNT(DISTINCT e.EmployeeID) FROM Sales s JOIN Employees e ON s.SalesPersonID = e.EmployeeID JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Headlights - Weatherproof';
SELECT SUM(s.Quantity * p.Price) AS Revenue FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'HL Road Frame - Red, 56';
SELECT COUNT(SalesID) FROM Sales JOIN Customers ON Sales.CustomerID = Customers.CustomerID WHERE Customers.FirstName = 'Joe' AND Customers.MiddleInitial = 'L.' AND Customers.LastName = 'Lopez';
SELECT CONCAT(c.FirstName,'', c.MiddleInitial,'', c.LastName) AS CustomerName FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Touring Rim' AND s.Quantity = 0;
SELECT e.FirstName, e.LastName, COUNT(DISTINCT c.CustomerID) AS NumOfCustomers FROM Employees e JOIN Sales s ON e.EmployeeID = s.SalesPersonID JOIN Customers c ON s.CustomerID = c.CustomerID GROUP BY e.FirstName, e.LastName;
SELECT COUNT(DISTINCT s.SalesPersonID) FROM Sales s WHERE s.SalesPersonID IN (   SELECT SalesPersonID   FROM Sales   GROUP BY SalesPersonID   HAVING COUNT(DISTINCT CustomerID) = (SELECT COUNT(*) FROM Customers) );
SELECT CONCAT(FirstName,'', MiddleInitial,'', LastName) AS SalesPersonName FROM Employees WHERE EmployeeID = 7;
SELECT 'Most Expensive Product' AS ProductType, p.Name FROM Products p WHERE p.Price = (SELECT MAX(Price) FROM Products WHERE Price > 0)  UNION  SELECT 'Least Expensive Product' AS ProductType, p.Name FROM Products p WHERE p.Price = (SELECT MIN(Price) FROM Products WHERE Price > 0);
SELECT    SUM(CASE      WHEN e.FirstName = 'Albert' AND e.MiddleInitial = 'I' AND e.LastName = 'Ringer'      THEN 1.0      ELSE 0.0    END) / COUNT(DISTINCT c.CustomerID) * 100 AS Percentage FROM    Sales s   INNER JOIN Customers c ON s.CustomerID = c.CustomerID   INNER JOIN Employees e ON s.SalesPersonID = e.EmployeeID   INNER JOIN Products p ON s.ProductID = p.ProductID WHERE    p.Name = 'ML Bottom Bracket';
SELECT COUNT(*)  FROM Customers  WHERE FirstName = 'Abigail';
SELECT SUM(Quantity)  FROM Sales  WHERE ProductID IN (SELECT ProductID                      FROM Products                      WHERE Name = 'Blade');
SELECT e.FirstName, e.LastName FROM Employees e JOIN (   SELECT SalesPersonID, SUM(Quantity) as TotalQuantity   FROM Sales   GROUP BY SalesPersonID   ORDER BY TotalQuantity DESC   LIMIT 1 ) s ON e.EmployeeID = s.SalesPersonID;
SELECT CONCAT(c.FirstName,'', c.LastName) AS FullName FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID GROUP BY c.CustomerID, c.FirstName, c.LastName ORDER BY SUM(s.Quantity) DESC LIMIT 1;
SELECT p.Name FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.SalesPersonID = 20 GROUP BY p.Name ORDER BY SUM(s.Quantity) DESC LIMIT 1;
SELECT e.FirstName FROM Employees e JOIN Sales s ON e.EmployeeID = s.SalesPersonID GROUP BY e.FirstName HAVING SUM(s.Quantity) > 500;
SELECT FirstName FROM Customers WHERE CustomerID IN (   SELECT CustomerID   FROM Sales   WHERE SalesPersonID = 1 );
SELECT SUM(s.Quantity)  FROM Sales s  JOIN Employees e ON s.SalesPersonID = e.EmployeeID  JOIN Customers c ON s.CustomerID = c.CustomerID  WHERE e.FirstName = 'Abraham' AND c.FirstName = 'Aaron' AND c.LastName = 'Alexander';
SELECT CONCAT(c.FirstName,'', c.LastName) AS FullName FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID WHERE s.Quantity > 600;
SELECT c.FirstName, c.LastName FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID WHERE c.FirstName = 'Cameron' GROUP BY c.FirstName, c.LastName ORDER BY SUM(s.Quantity) DESC LIMIT 1;
SELECT s.SalesID FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Hex Nut' AND p.Price > 100;
SELECT DISTINCT s.CustomerID FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Price BETWEEN 1000 AND 2000;
SELECT SUM(s.Quantity)  FROM Sales s  JOIN Products p ON s.ProductID = p.ProductID  WHERE p.Price = 0;
SELECT      (SUM(CASE WHEN p.Price = 0 THEN s.Quantity ELSE 0 END) / SUM(s.Quantity)) * 1.0 AS Percentage FROM      Sales s JOIN      Products p ON s.ProductID = p.ProductID;
SELECT      (SUM(s.Quantity) / (SELECT SUM(Quantity) FROM Sales) * 100) AS PercentageOfBlades FROM      Sales s JOIN      Products p ON s.ProductID = p.ProductID WHERE      p.Name = 'Blade';
SELECT COUNT(*)  FROM Employees  WHERE LastName = 'Ringer';
SELECT COUNT(*) FROM Products WHERE ProductID < 15 AND Price <= 10;
SELECT p.Name FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID JOIN Products p ON s.ProductID = p.ProductID WHERE c.FirstName = 'Aaron' AND c.LastName = 'Alexander';
SELECT p.ProductID, p.Name FROM Products p WHERE p.Price = (   SELECT MAX(Price)   FROM Products   WHERE ProductID IN (     SELECT ProductID     FROM Sales     WHERE Quantity BETWEEN 400 AND 500   ) );
SELECT FirstName, MAX(Quantity) AS Highest_Quantity FROM Sales JOIN Customers ON Sales.CustomerID = Customers.CustomerID WHERE FirstName = 'Kate' GROUP BY FirstName;
SELECT s.CustomerID, s.SalesID FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Price BETWEEN 100 AND 150 AND s.Quantity < 25;
SELECT s.Quantity, p.Price FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID JOIN Products p ON s.ProductID = p.ProductID WHERE c.FirstName = 'Abigail' AND c.LastName = 'Henderson';
SELECT COUNT(*) FROM Sales JOIN Products ON Sales.ProductID = Products.ProductID WHERE Sales.Quantity = 60 AND Products.Price <= 500;
SELECT COUNT(DISTINCT c.CustomerID) FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID WHERE c.FirstName = 'Erica' AND s.Quantity < 200;
SELECT p.Name FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID JOIN Products p ON s.ProductID = p.ProductID WHERE c.FirstName = 'Kathryn' AND c.LastName = 'Ashe' AND s.Quantity = (     SELECT MAX(Quantity)     FROM Sales     WHERE CustomerID = c.CustomerID );
SELECT p.Price, s.Quantity FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Seat Tube';
SELECT p.Name, p.Price FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID JOIN Products p ON s.ProductID = p.ProductID WHERE c.FirstName = 'Erica' AND c.LastName = 'Xu';
SELECT s.SalesID FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'External Lock Washer 7' AND s.Quantity = 590;
SELECT c.FirstName, c.LastName FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID WHERE s.SalesID BETWEEN 30 AND 40 GROUP BY c.FirstName, c.LastName HAVING SUM(s.Quantity) = 403;
SELECT c.CustomerID, c.LastName FROM Customers c WHERE c.CustomerID IN (   SELECT s.CustomerID   FROM Sales s   WHERE s.Quantity > (SELECT AVG(s2.Quantity) * 0.9 FROM Sales s2) );
SELECT      SUM(CASE WHEN p.Price BETWEEN 200 AND 300 THEN 1 ELSE 0 END) / COUNT(*) * 1.0 FROM      Sales s JOIN      Products p ON s.ProductID = p.ProductID WHERE      s.SalesID BETWEEN 1 AND 200;
SELECT Name FROM Products WHERE Price = (SELECT MAX(Price) FROM Products);
SELECT COUNT(*)  FROM Customers  WHERE FirstName = 'Madison';
SELECT COUNT(DISTINCT Name)  FROM Products  WHERE Name LIKE '%HL Touring Frame%';
SELECT COUNT(*)  FROM (   SELECT LastName    FROM Customers    GROUP BY LastName    HAVING COUNT(LastName) = (     SELECT MAX(cnt)      FROM (       SELECT COUNT(LastName) AS cnt        FROM Customers        GROUP BY LastName     ) AS sub   ) ) AS sub;
SELECT COUNT(*) FROM Products WHERE Price = 0;
SELECT CONCAT(E.FirstName,'', E.MiddleInitial,'', E.LastName) AS SalesPersonName FROM Employees E JOIN (     SELECT SalesPersonID, COUNT(SalesID) AS TotalSales     FROM Sales     GROUP BY SalesPersonID     ORDER BY TotalSales DESC     LIMIT 1 ) S ON E.EmployeeID = S.SalesPersonID;
SELECT CONCAT(c.FirstName,'', c.MiddleInitial,'', c.LastName) AS FullName FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID JOIN Products p ON s.ProductID = p.ProductID WHERE s.SalesID = (     SELECT SalesID     FROM Sales     JOIN Products USING (ProductID)     GROUP BY SalesID     ORDER BY SUM(Quantity * Price) DESC     LIMIT 1 );
SELECT SUM(Quantity)  FROM Sales  WHERE ProductID IN (   SELECT ProductID    FROM Products    WHERE Name = 'Mountain-500 Black 42' );
SELECT SUM(s.Quantity * p.Price)  FROM Sales s  JOIN Employees e ON s.SalesPersonID = e.EmployeeID  JOIN Products p ON s.ProductID = p.ProductID  WHERE e.FirstName = 'Heather' AND e.LastName = 'McBadden';
SELECT SUM(s.Quantity) FROM Sales s JOIN Employees e ON s.SalesPersonID = e.EmployeeID JOIN Products p ON s.ProductID = p.ProductID WHERE e.FirstName = 'Stearns' AND e.MiddleInitial = '' AND e.LastName = 'MacFeather' AND p.Name = 'Mountain-100 Silver, 38';
SELECT COUNT(DISTINCT p.ProductID) FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID JOIN Products p ON s.ProductID = p.ProductID WHERE c.FirstName = 'Dalton' AND c.MiddleInitial = 'M.' AND c.LastName = 'Coleman';
SELECT CONCAT(FirstName,'', MiddleInitial,'', LastName) AS FullName FROM Employees WHERE EmployeeID IN (     SELECT SalesPersonID     FROM Sales     GROUP BY SalesPersonID     ORDER BY COUNT(SalesID) DESC     LIMIT 3 )
SELECT Name FROM Products WHERE Name LIKE 'Mountain-500 Black%' AND ProductID IN (     SELECT ProductID     FROM Sales     GROUP BY ProductID     ORDER BY SUM(Quantity) DESC     LIMIT 1 );
SELECT COUNT(DISTINCT e.EmployeeID) FROM Sales s JOIN Employees e ON s.SalesPersonID = e.EmployeeID JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'ML Road Frame-W - Yellow, 40';
SELECT Quantity FROM Sales WHERE ProductID = (SELECT ProductID FROM Products WHERE Name = 'Chainring Bolts') AND SalesID = 551971;
SELECT COUNT(DISTINCT e.EmployeeID) FROM Employees e JOIN Sales s ON e.EmployeeID = s.SalesPersonID JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Touring-2000 Blue, 50' AND s.Quantity > 20000;
SELECT SUM(s.Quantity * p.Price)  FROM Sales s  JOIN Employees e ON s.SalesPersonID = e.EmployeeID  JOIN Products p ON s.ProductID = p.ProductID  WHERE e.FirstName = 'Abraham' AND e.MiddleInitial = 'E.' AND e.LastName = 'Bennet'  AND p.Name = 'Road-650, Red, 60';
SELECT p.Name, SUM(s.Quantity * p.Price) AS TotalPrice FROM Sales s JOIN Products p ON s.ProductID = p.ProductID GROUP BY p.Name ORDER BY SUM(s.Quantity) DESC LIMIT 1;
SELECT FirstName FROM Customers WHERE LastName = 'Chen';
SELECT MiddleInitial FROM Employees GROUP BY MiddleInitial ORDER BY COUNT(MiddleInitial) DESC LIMIT 1;
SELECT AVG(Price)  FROM Products  WHERE Price BETWEEN 100 AND 200;
SELECT CONCAT(c.FirstName,'', c.MiddleInitial,'', c.LastName) AS FullName FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID GROUP BY c.CustomerID, c.FirstName, c.MiddleInitial, c.LastName HAVING s.Quantity > (SELECT AVG(Quantity) FROM Sales);
SELECT CONCAT(c.FirstName,'', c.MiddleInitial,'', c.LastName) AS FullName FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID JOIN Products p ON s.ProductID = p.ProductID GROUP BY c.CustomerID, c.FirstName, c.MiddleInitial, c.LastName ORDER BY SUM(s.Quantity * p.Price) DESC LIMIT 1;
SELECT e.FirstName, e.LastName, SUM(s.Quantity * p.Price) AS TotalSales FROM Sales s JOIN Employees e ON s.SalesPersonID = e.EmployeeID JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Blade' GROUP BY e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;
SELECT CONCAT(c.FirstName,'', c.MiddleInitial,'', c.LastName) AS FullName FROM Customers c JOIN (     SELECT CustomerID, SUM(s.Quantity * p.Price) AS TotalSpent     FROM Sales s     JOIN Products p ON s.ProductID = p.ProductID     GROUP BY CustomerID     HAVING SUM(s.Quantity * p.Price) > 50000 ) t ON c.CustomerID = t.CustomerID ORDER BY t.TotalSpent DESC;
SELECT p.Name FROM Products p JOIN (   SELECT ProductID, MAX(Quantity) as MaxQuantity   FROM Sales   GROUP BY ProductID ) s ON p.ProductID = s.ProductID;
SELECT p.Name FROM Products p JOIN Sales s ON p.ProductID = s.ProductID GROUP BY p.Name HAVING AVG(s.Quantity) < (SELECT AVG(Quantity) FROM Sales);
SELECT COUNT(*) FROM Dish WHERE first_appeared < 1851 OR first_appeared > 2012;
SELECT    CASE      WHEN (SELECT last_appeared - first_appeared FROM Dish WHERE name = 'Anchovies') >           (SELECT last_appeared - first_appeared FROM Dish WHERE name = 'Fresh lobsters in every style')      THEN 'Anchovies'     ELSE 'Fresh lobsters in every style'   END AS dish_lasted_longer;
SELECT name FROM Dish WHERE lowest_price = 0 ORDER BY menus_appeared DESC LIMIT 1;
SELECT COUNT(*)  FROM Menu  WHERE name = 'Waldorf Astoria' AND page_count = 4;
SELECT d.name FROM MenuItem mi JOIN Dish d ON mi.dish_id = d.id WHERE mi.menu_page_id = 1389 AND mi.xpos < 0.25 AND mi.ypos < 0.25;
SELECT mi.price, mp.page_number FROM MenuItem mi JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Clear green turtle';
SELECT COUNT(*) FROM MenuPage mp JOIN MenuItem mi ON mp.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Clear green turtle' AND d.highest_price IS NULL;
SELECT MAX(mi.price)  FROM MenuItem mi  JOIN Dish d ON mi.dish_id = d.id  WHERE d.name = 'Clear green turtle';
SELECT m.id FROM Menu m JOIN MenuItem mi ON m.id = mi.menu_page_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Clear green turtle';
SELECT COUNT(DISTINCT m.id) FROM Menu m JOIN MenuItem mi ON m.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Clear green turtle' AND m.currency = 'Dollars';
SELECT COUNT(*) FROM Menu WHERE id IN (   SELECT m.id   FROM Menu m   JOIN MenuItem mi ON m.id = mi.menu_page_id   JOIN Dish d ON mi.dish_id = d.id   WHERE d.name = 'Clear green turtle' ) AND call_number IS NULL;
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE m.name = 'Zentral Theater Terrace';
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE m.name = 'Zentral Theater Terrace' ORDER BY mi.price DESC LIMIT 1;
SELECT COUNT(DISTINCT mi.dish_id) FROM MenuItem mi JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE m.name = 'Zentral Theater Terrace';
SELECT COUNT(DISTINCT d.id)  FROM Dish d  JOIN MenuItem mi ON d.id = mi.dish_id  JOIN MenuPage mp ON mi.menu_page_id = mp.id  JOIN Menu m ON mp.menu_id = m.id  WHERE m.name = 'Waldorf Astoria';
SELECT m.id FROM Menu m JOIN MenuItem mi ON m.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE m.sponsor IS NULL AND d.name = 'Clear green turtle';
SELECT AVG(mp.page_number)  FROM MenuItem mi  JOIN MenuPage mp ON mi.menu_page_id = mp.id  JOIN Dish d ON mi.dish_id = d.id  WHERE d.name = 'Clear green turtle';
SELECT AVG(mi.price)  FROM MenuItem mi  JOIN MenuPage mp ON mi.menu_page_id = mp.id  JOIN Menu m ON mp.menu_id = m.id  WHERE m.name = 'Zentral Theater Terrace';
SELECT COUNT(*)  FROM MenuItem  WHERE created_at LIKE '2011-03-28%';
SELECT COUNT(DISTINCT mi.dish_id) FROM MenuItem mi WHERE mi.menu_page_id = 144;
SELECT COUNT(*)  FROM Menu  WHERE location = 'Dutcher House';
SELECT COUNT(*)  FROM Dish  WHERE times_appeared > 1;
SELECT COUNT(*)  FROM Menu  WHERE venue = 'STEAMSHIP';
SELECT COUNT(mp.id)  FROM Menu m  JOIN MenuPage mp ON m.id = mp.menu_id  WHERE m.date = '1898-11-17';
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE mp.id = 174;
SELECT d.name, mi.menu_page_id FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id WHERE d.first_appeared = 1861;
SELECT d.name, MAX(mi.price) AS highest_price FROM MenuItem mi JOIN Dish d ON mi.dish_id = d.id WHERE mi.menu_page_id = 7610 AND mi.created_at LIKE '2011-05-23%' GROUP BY d.name;
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE mp.page_number = 30 AND mp.full_height = (   SELECT MIN(full_height)   FROM MenuPage   WHERE page_number = 30 );
SELECT mp.page_number, m.name FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id WHERE m.page_count = (SELECT MAX(page_count) FROM Menu);
SELECT COUNT(mi.dish_id) FROM MenuItem mi JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE m.id = (SELECT id FROM Menu WHERE dish_count = (SELECT MAX(dish_count) FROM Menu)) AND mp.page_number = 2;
SELECT mi.xpos, mi.ypos, mi.id FROM MenuItem mi JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Fresh lobsters in every style';
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE m.sponsor = 'CHAS.BRADLEY''S OYSTER & DINING ROOM' AND mi.xpos < 0.25 AND mi.ypos < 0.25;
SELECT m.sponsor, m.event FROM Menu m JOIN MenuItem mi ON m.id = mi.menu_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Cerealine with Milk';
SELECT    (SUM(CASE WHEN xpos BETWEEN 0.25 AND 0.75 AND ypos BETWEEN 0.25 AND 0.75 THEN 1 ELSE 0 END) / COUNT(id) * 1.0)    AS percent FROM    MenuItem mi   JOIN Dish d ON mi.dish_id = d.id WHERE    d.name LIKE '%Bluefish%';
SELECT sponsor FROM Menu WHERE id = 12463;
SELECT event  FROM Menu  WHERE sponsor = 'REPUBLICAN HOUSE';
SELECT location FROM Menu WHERE id = 12472;
SELECT physical_description FROM Menu WHERE sponsor = 'Noviomagus';
SELECT occasion FROM Menu WHERE id = 12463;
SELECT location  FROM Menu  WHERE sponsor = 'Norddeutscher Lloyd Bremen';
SELECT mp.id FROM MenuPage mp JOIN Menu m ON mp.menu_id = m.id WHERE m.sponsor = 'Occidental & Oriental';
SELECT mp.image_id FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id WHERE m.location = 'Manhattan Hotel';
SELECT mp.full_height, mp.full_width FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id WHERE m.name = 'El Fuerte Del Palmar';
SELECT 'c02c9a3b-6881-7080-e040-e00a180631aa' = uuid  FROM MenuPage  JOIN Menu ON MenuPage.menu_id = Menu.id  WHERE Menu.name = 'The Biltmore' LIMIT 1;
SELECT m.name FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id WHERE mp.full_height = (SELECT MAX(full_height) FROM MenuPage);
SELECT m.page_count  FROM Menu m  JOIN MenuPage mp ON m.id = mp.menu_id  WHERE mp.id = 130;
SELECT mi.price FROM MenuItem mi JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE mp.image_id = 4000009194;
SELECT mp.page_number FROM MenuItem mi JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE mi.xpos > 0.75 AND mi.ypos < 0.25;
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE SUBSTR(m.date, 7, 1) = '4';
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE mp.id = 1389;
SELECT MAX(mi.price)  FROM MenuItem mi  WHERE mi.id BETWEEN 1 AND 5;
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id WHERE mi.xpos < 0.25 AND mi.ypos < 0.25;
SELECT SUM(m.dish_count)  FROM Menu m  JOIN MenuPage mp ON m.id = mp.menu_id  WHERE mp.uuid IN ('510d47e4-2958-a3d9-e040-e00a18064a99', '510d47e4-295a-a3d9-e040-e00a18064a99');
SELECT SUM(mi.price) AS total_price FROM MenuItem mi JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE m.id = 12882;
SELECT name, MAX(highest_price) as highest_price FROM Dish GROUP BY name ORDER BY highest_price DESC LIMIT 5;
SELECT COUNT(*)  FROM Dish  WHERE lowest_price = 0;
SELECT name  FROM Dish  WHERE first_appeared = 1855 AND last_appeared = 1900;
SELECT * FROM Menu ORDER BY dish_count DESC LIMIT 10;
SELECT COUNT(DISTINCT mi.dish_id) FROM MenuItem mi WHERE mi.xpos > 0.75 AND mi.ypos < 0.25;
SELECT    D.name,    TIMESTAMPDIFF(DAY, D.first_appeared, D.last_appeared) AS duration,   (SELECT MAX(MI.updated_at) FROM MenuItem MI WHERE MI.dish_id = D.id) AS latest_update FROM    Dish D WHERE    D.name = 'Clear Green Turtle';
SELECT COUNT(*)  FROM Dish  WHERE (DATE_PART('year', last_appeared) - DATE_PART('year', first_appeared)) > 100;
SELECT COUNT(*)  FROM Dish  WHERE (DATE_PART('year', AGE(last_appeared, first_appeared))) < 5;
SELECT d.name, mi.price FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id WHERE d.lowest_price = 0;
SELECT mi.price FROM MenuItem mi JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id JOIN Dish d ON mi.dish_id = d.id WHERE m.id = 12474 AND mp.page_number = 2;
SELECT COUNT(DISTINCT mi.dish_id) FROM MenuItem mi WHERE mi.created_at BETWEEN '2011-03-31 20:24:46 UTC' AND '2011-04-15 23:09:51 UTC';
SELECT m.sponsor FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id WHERE mp.full_height > 10000;
SELECT mp.image_id, mp.full_height, mp.full_width FROM MenuPage mp JOIN Menu m ON mp.menu_id = m.id WHERE m.event = '100TH ANNIVERSARY OF BIRTH OF DANIEL WEBSTER';
SELECT m.event FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id WHERE mp.full_width < 2000;
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id WHERE mi.price = 180000;
SELECT xpos, ypos, last_appeared - first_appeared AS duration FROM MenuItem JOIN Dish ON MenuItem.dish_id = Dish.id WHERE Dish.name = 'Small Hominy';
SELECT mp.page_number, mp.image_id, mp.full_height * mp.full_width AS image_area FROM MenuItem mi JOIN Dish d ON mi.dish_id = d.id JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE d.name = 'Baked Stuffed Mullet & Sauce Pomard';
SELECT COUNT(*)  FROM Dish  WHERE times_appeared > 1;
SELECT COUNT(*)  FROM Menu  WHERE sponsor = 'Krogs Fiskerestaurant'  AND date LIKE '2015-04%';
SELECT name FROM Dish ORDER BY last_appeared - first_appeared DESC LIMIT 1;
SELECT event FROM Menu WHERE id = 21380 AND date = '1887-07-21';
SELECT COUNT(mp.id)  FROM Menu m  JOIN MenuPage mp ON m.id = mp.menu_id  WHERE m.name = 'Emil Kuehn';
SELECT COUNT(m.id) FROM Menu m JOIN MenuItem mi ON m.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'puree of split peas aux croutons';
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id WHERE d.highest_price IS NULL AND SUBSTR(mi.created_at, 1, 4) = '2011' AND SUBSTR(mi.created_at, 7, 1) = '4';
SELECT m.name FROM Menu m JOIN (   SELECT menu_id, COUNT(page_number) as page_count   FROM MenuPage   GROUP BY menu_id   ORDER BY page_count DESC   LIMIT 1 ) mp ON m.id = mp.menu_id;
SELECT mp.id FROM MenuPage mp JOIN MenuItem mi ON mp.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name ='mashed potatoes';
SELECT COUNT(*) FROM Menu WHERE sponsor = 'PACIFIC MAIL STEAMSHIP COMPANY' AND id IN (   SELECT menu_id   FROM MenuPage   GROUP BY menu_id   HAVING COUNT(page_number) <= 2 );
SELECT mp.id FROM Menu m JOIN MenuItem mi ON m.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name ='milk' ORDER BY mi.price DESC LIMIT 1;
SELECT menu_id FROM Menu WHERE sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY' AND page_count = (   SELECT MAX(page_count)   FROM Menu   WHERE sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY' );
SELECT xpos, ypos, m.name FROM MenuItem mi JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'breaded veal cutlet with peas';
SELECT d.name FROM MenuItem mi JOIN Dish d ON mi.dish_id = d.id WHERE mi.menu_page_id = (   SELECT id   FROM MenuPage mp   WHERE mp.page_number = 48706 ) AND mi.xpos > 0.75 AND mi.ypos > 0.75;
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE m.sponsor = 'THE SOCIETY OF THE CUMBERLAND' AND m.event = '19NTH REUNION' AND m.place = 'GRAND PACIFIC HOTEL, CHICAGO, ILL';
SELECT m.sponsor FROM Menu m JOIN (   SELECT mi.menu_page_id, MAX(mi.price) AS max_price   FROM MenuItem mi   JOIN Dish d ON mi.dish_id = d.id   WHERE d.name = 'baked apples with cream'   GROUP BY mi.menu_page_id ) AS sub ON m.id = (   SELECT mp.menu_id   FROM MenuPage mp   WHERE mp.id = sub.menu_page_id ) ORDER BY max_price DESC LIMIT 1;
SELECT    AVG(dish_count) AS avg_dish_per_menu,   (SELECT name     FROM Dish     WHERE id = (SELECT dish_id                  FROM MenuItem                  GROUP BY dish_id                  ORDER BY COUNT(dish_id) DESC                  LIMIT 1)) AS most_appeared_dish FROM Menu  WHERE name = 'Souper de Luxe';
SELECT id FROM Menu WHERE sponsor IS NULL;
SELECT COUNT(*)  FROM Menu  WHERE event = 'LUNCH';
SELECT COUNT(*)  FROM Menu  WHERE page_count > 10 AND dish_count > 20;
SELECT id FROM Menu ORDER BY dish_count DESC LIMIT 1;
SELECT COUNT(DISTINCT mi.dish_id) FROM MenuItem mi JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE m.name = 'Zentral Theater Terrace';
SELECT COUNT(*) FROM Menu WHERE call_number IS NULL AND strftime('%Y', date) < '1950';
SELECT mp.image_id FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id WHERE m.name = 'Zentral Theater Terrace' AND mp.page_number = 1;
SELECT m.name FROM MenuPage mp JOIN Menu m ON mp.menu_id = m.id WHERE mp.image_id = 5189412;
SELECT    CASE      WHEN SUM(CASE WHEN m.name = 'Zentral Theater Terrace' THEN mp.full_width ELSE 0 END) >           SUM(CASE WHEN m.name = 'Young''s Hotel' THEN mp.full_width ELSE 0 END)      THEN 'Zentral Theater Terrace'     ELSE 'Young''s Hotel'   END AS bigger_width_menu FROM    Menu m    JOIN MenuPage mp ON m.id = mp.menu_id  WHERE    mp.page_number = 1    AND m.name IN ('Zentral Theater Terrace', 'Young''s Hotel');
SELECT mp.page_number, mp.full_height FROM MenuPage mp JOIN Menu m ON mp.menu_id = m.id WHERE m.name = 'Ritz Carlton' ORDER BY mp.full_height DESC LIMIT 1;
SELECT COUNT(*) FROM MenuPage mp JOIN Menu m ON mp.menu_id = m.id WHERE m.name = 'Ritz Carlton' AND mp.full_width > 1000;
SELECT COUNT(DISTINCT mi.dish_id) FROM MenuItem mi JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE mp.menu_id = 12882 AND mp.page_number = 1;
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE m.id = 12882 AND mp.page_number = 1;
SELECT mp.page_number FROM MenuItem mi JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Chicken gumbo';
SELECT mp.menu_id FROM MenuItem mi JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Chicken gumbo' ORDER BY mp.full_width DESC LIMIT 1;
SELECT times_appeared  FROM Dish  WHERE name = 'Chicken gumbo';
SELECT COUNT(*) FROM MenuPage mp JOIN MenuItem mi ON mp.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Paysanne Soup' AND mi.high_price IS NULL;
SELECT MAX(mi.price)  FROM MenuItem mi  JOIN Dish d ON mi.dish_id = d.id  WHERE d.name = 'Chicken gumbo';
SELECT full_height * full_width AS space_covered FROM MenuPage WHERE menu_id = (SELECT id FROM Menu WHERE name = 'Zentral Theater Terrace') AND page_number = 1;
SELECT AVG(dish_count)  FROM (   SELECT menu_page_id, COUNT(dish_id) as dish_count   FROM MenuItem   WHERE menu_page_id IN (     SELECT id     FROM MenuPage     WHERE menu_id = 12882   )   GROUP BY menu_page_id ) AS subquery;
SELECT COUNT(*) FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id WHERE customer.cust_name = 'S K L Enterprises Inc' AND CAST(ship_date AS DATE) = '2017-01-01';
SELECT SUM(weight)  FROM shipment  WHERE cust_id IN (SELECT cust_id FROM customer WHERE cust_name = 'S K L Enterprises Inc');
SELECT COUNT(*) FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id JOIN driver ON shipment.driver_id = driver.driver_id WHERE customer.cust_name = 'S K L Enterprises Inc' AND driver.first_name = 'Sue' AND driver.last_name = 'Newell';
SELECT COUNT(*) FROM shipment WHERE cust_id IN (   SELECT cust_id   FROM customer   WHERE state = 'FL' );
SELECT ship_id FROM shipment WHERE cust_id IN (   SELECT cust_id   FROM customer   WHERE cust_type ='retailer' );
SELECT COUNT(DISTINCT c.cust_id) FROM customer c WHERE c.annual_revenue > 30000000 AND        c.cust_id IN (         SELECT s.cust_id         FROM shipment s         WHERE CAST(s.ship_date AS DATE) = 2017       );
SELECT COUNT(*) FROM shipment JOIN driver ON shipment.driver_id = driver.driver_id WHERE Cast(ship_date AS DATE) = 2017 AND driver.first_name = 'Sue' AND driver.last_name = 'Newell';
SELECT d.first_name, d.last_name FROM driver d JOIN (   SELECT driver_id   FROM shipment   WHERE CAST(ship_date AS DATE) = 2017   GROUP BY driver_id   ORDER BY SUM(weight) DESC   LIMIT 1 ) s ON d.driver_id = s.driver_id;
SELECT COUNT(*) FROM shipment WHERE CAST(ship_date AS DATE) = 2017 AND city_id IN (   SELECT city_id   FROM city   WHERE state = 'New Jersey' );
SELECT MAX(weight) FROM shipment JOIN city ON shipment.city_id = city.city_id WHERE city.city_name = 'New York';
SELECT    SUM(CASE WHEN c.city_name = 'New York' THEN s.weight ELSE 0 END) -    SUM(CASE WHEN c.city_name = 'Chicago' THEN s.weight ELSE 0 END)  AS total_pounds_diff FROM shipment s JOIN city c ON s.city_id = c.city_id;
SELECT c.city_name FROM shipment s JOIN customer cu ON s.cust_id = cu.cust_id JOIN city c ON s.city_id = c.city_id WHERE cu.cust_name = 'S K L Enterprises Inc' ORDER BY c.city_name;
SELECT AVG(weight) AS avg_weight FROM shipment WHERE cust_id IN (   SELECT cust_id   FROM customer   WHERE cust_name = 'S K L Enterprises Inc' );
SELECT    (COUNT(CASE WHEN c.city_name = 'Jacksonville' THEN 1 END) /     COUNT(*)) * 100 AS percentage FROM    shipment s   JOIN city c ON s.city_id = c.city_id WHERE    c.state = 'Florida';
SELECT    CASE t.make      WHEN 'Peterbit' THEN 'Texax(TX)'     WHEN 'Mack' THEN 'North Carolina (NC)'     WHEN 'Kenworth' THEN 'Washington (WA)'   END AS headquarter FROM    shipment s    JOIN truck t ON s.truck_id = t.truck_id  WHERE    s.ship_id = 1045;
SELECT COUNT(*) FROM shipment WHERE truck_id IN (   SELECT truck_id   FROM truck   WHERE model_year = (     SELECT MIN(model_year)     FROM truck   ) );
SELECT cust_name FROM customer WHERE cust_id = (SELECT cust_id FROM shipment WHERE ship_id = 1275);
SELECT city_name FROM shipment JOIN city ON shipment.city_id = city.city_id WHERE ship_id = 1701;
SELECT d.first_name, d.last_name FROM shipment s JOIN driver d ON s.driver_id = d.driver_id WHERE s.ship_id = 1021;
SELECT d.first_name, d.last_name FROM shipment s JOIN driver d ON s.driver_id = d.driver_id WHERE s.ship_date = '2017-11-05';
SELECT population FROM city WHERE city_id = (SELECT city_id FROM shipment WHERE ship_id = 1398);
SELECT MIN(s.ship_date) FROM shipment s JOIN customer c ON s.cust_id = c.cust_id WHERE c.state = 'SC';
SELECT weight FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id WHERE cust_name = 'Leszek Kieltyka' AND ship_date = '2017-09-25';
SELECT c.area FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE s.ship_id = 1346;
SELECT weight FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id WHERE cust_name = 'U-haul Center Of N Syracuse' AND ship_date = '2016/09/21';
SELECT d.first_name, d.last_name FROM shipment s JOIN driver d ON s.driver_id = d.driver_id JOIN truck t ON s.truck_id = t.truck_id WHERE s.ship_date = '2016-09-19' AND t.truck_id = 3;
SELECT area / population AS population_density FROM city WHERE city_id = (   SELECT city_id   FROM shipment   WHERE ship_id = 1369 );
SELECT AVG(shipments_per_truck) AS avg_shipments FROM (   SELECT truck_id, COUNT(ship_id) AS shipments_per_truck   FROM shipment   JOIN truck ON shipment.truck_id = truck.truck_id   WHERE truck.make = 'Kenworth'   GROUP BY truck_id ) AS kenworth_shipments;
SELECT weight FROM shipment JOIN driver ON shipment.driver_id = driver.driver_id WHERE first_name = 'Sue' AND last_name = 'Newell' AND ship_date = (   SELECT MIN(ship_date)   FROM shipment   JOIN driver ON shipment.driver_id = driver.driver_id   WHERE first_name = 'Sue' AND last_name = 'Newell' );
SELECT c.cust_name FROM shipment s JOIN customer c ON s.cust_id = c.cust_id WHERE s.weight = (SELECT MAX(weight) FROM shipment);
SELECT d.first_name, d.last_name FROM driver d JOIN shipment s ON d.driver_id = s.driver_id WHERE s.ship_date = (SELECT MIN(ship_date) FROM shipment);
SELECT COUNT(*) FROM shipment WHERE cust_id IN (   SELECT cust_id   FROM customer   WHERE cust_name = 'Olympic Camper Sales Inc' );
SELECT COUNT(*) FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id JOIN city ON shipment.city_id = city.city_id WHERE city.city_name = 'New York' AND customer.cust_name = 'Harry''s Hot Rod Auto & Truck Accessories';
SELECT COUNT(*) FROM shipment WHERE truck_id IN (   SELECT truck_id   FROM shipment   JOIN truck ON shipment.truck_id = truck.truck_id   ORDER BY weight DESC   LIMIT 5 ) AND truck_id IN (   SELECT truck_id   FROM truck   WHERE make = 'Mack' );
SELECT d.first_name, d.last_name FROM driver d WHERE d.driver_id = (   SELECT driver_id   FROM shipment s   WHERE s.city_id = (     SELECT city_id     FROM city     ORDER BY population     LIMIT 1   )   GROUP BY driver_id   ORDER BY COUNT(ship_id) DESC   LIMIT 1 )
SELECT COUNT(*) FROM shipment WHERE truck_id = (   SELECT truck_id   FROM truck   ORDER BY model_year   LIMIT 1 ) AND weight < 1000;
SELECT annual_revenue FROM customer WHERE cust_id = (   SELECT cust_id   FROM shipment   GROUP BY cust_id   ORDER BY COUNT(ship_id) DESC   LIMIT 1 );
SELECT COUNT(*) FROM shipment WHERE city_id IN (SELECT city_id FROM city WHERE city_name = 'Downey') AND year(ship_date) = 2016 AND city_id IN (SELECT city_id FROM city WHERE state = 'CA');
SELECT COUNT(*) FROM shipment JOIN driver ON shipment.driver_id = driver.driver_id JOIN city ON shipment.city_id = city.city_id WHERE driver.first_name = 'Holger' AND driver.last_name = 'Nohr' AND city.city_name = 'North Las Vegas';
SELECT COUNT(s.ship_id) FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE c.area / c.population = (SELECT MAX(area / population) FROM city);
SELECT    (COUNT(CASE WHEN state = 'TX' AND cust_type ='manufacturer' THEN cust_id END) / COUNT(cust_id)) * 100 FROM    customer WHERE    cust_name = 'Lorenzo';
SELECT SUM(weight)  FROM shipment  JOIN city ON shipment.city_id = city.city_id  WHERE city.city_name = 'San Mateo' AND city.state = 'California'  AND CAST(ship_date AS DATE) = '2016-01-01';
SELECT SUM(weight) FROM shipment JOIN truck ON shipment.truck_id = truck.truck_id WHERE CAST(ship_date AS DATE) = '2016-01-01' AND make = 'Peterbilt' AND model_year = (SELECT MAX(model_year) FROM truck WHERE make = 'Peterbilt');
SELECT MAX(s.weight), c.cust_name FROM shipment s JOIN customer c ON s.cust_id = c.cust_id JOIN city ci ON s.city_id = ci.city_id WHERE ci.city_name = 'Boston' GROUP BY c.cust_name;
SELECT city_name FROM shipment JOIN city ON shipment.city_id = city.city_id WHERE ship_id = 1002;
SELECT AVG(s.weight) FROM shipment s JOIN truck t ON s.truck_id = t.truck_id WHERE t.make = 'Mack' AND t.model_year = (   SELECT MIN(model_year)   FROM truck   WHERE make = 'Mack' );
SELECT d.first_name, d.last_name FROM shipment s JOIN driver d ON s.driver_id = d.driver_id JOIN city c ON s.city_id = c.city_id WHERE c.city_name = 'New York' AND s.ship_date LIKE '2016-02%';
SELECT c.cust_name FROM customer c JOIN shipment s ON c.cust_id = s.cust_id JOIN city ci ON s.city_id = ci.city_id WHERE ci.city_name = 'Oak Park';
SELECT COUNT(ship_id) FROM shipment JOIN driver ON shipment.driver_id = driver.driver_id JOIN city ON shipment.city_id = city.city_id WHERE driver.first_name = 'Andrea' AND driver.last_name = 'Simons'  AND city.city_name = 'Huntsville'  AND CAST(ship_date AS DATE) = '2016-01-01';
SELECT    d.driver_id,    d.first_name,    d.last_name,    COUNT(s.ship_id) / (24 * COUNT(DISTINCT d.driver_id)) AS avg_shipments_per_month FROM    shipment s    JOIN driver d ON s.driver_id = d.driver_id  GROUP BY    d.driver_id,    d.first_name,    d.last_name;
SELECT    SUM(CASE WHEN s.weight >= 10000 THEN 1 ELSE 0 END) / COUNT(*) * 100 AS percentage FROM    shipment s   JOIN customer c ON s.cust_id = c.cust_id WHERE    c.cust_name = 'Sunguard Window Tinting & Truck Accessories'    AND CAST(s.ship_date AS DATE) = '2017-01-01';
SELECT    (COUNT(CASE WHEN c.cust_name = 'Autoware Inc' THEN s.ship_id END) / COUNT(s.ship_id)) * 100 AS percentage FROM    shipment s   JOIN customer c ON s.cust_id = c.cust_id   JOIN driver d ON s.driver_id = d.driver_id WHERE    d.first_name = 'Sue' AND d.last_name = 'Newel';
SELECT COUNT(DISTINCT c.city_id) FROM city c JOIN shipment s ON c.city_id = s.city_id WHERE c.state = 'New Jersey' GROUP BY c.city_id HAVING SUM(s.weight) > 20000;
SELECT COUNT(DISTINCT c.city_id) FROM city c JOIN shipment s ON c.city_id = s.city_id WHERE c.population > 50000 AND YEAR(s.ship_date) = 2017;
SELECT weight FROM shipment JOIN truck ON shipment.truck_id = truck.truck_id WHERE truck.make = 'Peterbilt';
SELECT model_year FROM shipment JOIN truck ON shipment.truck_id = truck.truck_id WHERE ship_id = 1003;
SELECT make FROM shipment JOIN truck ON shipment.truck_id = truck.truck_id WHERE shipment.ship_id = 1011;
SELECT d.first_name FROM driver d JOIN shipment s ON d.driver_id = s.driver_id WHERE s.ship_id = 1028;
SELECT d.state FROM driver d JOIN shipment s ON d.driver_id = s.driver_id WHERE s.ship_id = 1055;
SELECT d.address FROM driver d JOIN shipment s ON d.driver_id = s.driver_id GROUP BY d.address HAVING SUM(s.weight) > 50000;
SELECT CONCAT(d.first_name,'', d.last_name) AS full_name FROM driver d JOIN shipment s ON d.driver_id = s.driver_id WHERE s.ship_date = '2016-02-03';
SELECT AVG(c.annual_revenue) FROM customer c JOIN shipment s ON c.cust_id = s.cust_id WHERE s.weight < 65000;
SELECT    (COUNT(CASE WHEN c.cust_type = 'wholesaler' AND s.weight < 70000 THEN c.cust_id END) /     COUNT(CASE WHEN c.cust_type = 'wholesaler' THEN c.cust_id END)) * 100 AS percentage FROM customer c JOIN shipment s ON c.cust_id = s.cust_id;
SELECT last_name FROM driver WHERE driver_id IN (   SELECT driver_id   FROM shipment   WHERE ship_id = 1088 );
SELECT d.phone FROM driver d JOIN shipment s ON d.driver_id = s.driver_id GROUP BY d.driver_id, d.phone HAVING SUM(s.weight) > 20000;
SELECT make, model_year FROM truck WHERE truck_id IN (   SELECT truck_id   FROM shipment   WHERE ship_id = 1055 );
SELECT COUNT(truck_id) FROM truck WHERE model_year = 2009;
SELECT COUNT(*)  FROM customer  WHERE cust_type ='manufacturer';
SELECT COUNT(*) FROM customer WHERE state = 'CA' AND cust_type ='retailer';
SELECT COUNT(*)  FROM city  WHERE state = 'Connecticut';
SELECT city_name, population FROM city WHERE state = 'CA' ORDER BY population DESC LIMIT 1;
SELECT annual_revenue  FROM customer  WHERE cust_name = 'Klett & Sons Repair';
SELECT d.first_name, d.last_name FROM driver d, shipment s WHERE d.driver_id = s.driver_id AND s.weight = (SELECT MIN(weight) FROM shipment);
SELECT COUNT(*) FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id WHERE customer.state = 'CA' AND YEAR(ship_date) = 2016;
SELECT t.make FROM shipment s JOIN truck t ON s.truck_id = t.truck_id JOIN driver d ON s.driver_id = d.driver_id WHERE d.first_name = 'Zachery' AND d.last_name = 'Hicks';
SELECT cust_name FROM customer WHERE cust_id IN (   SELECT cust_id   FROM shipment   WHERE ship_date LIKE '2017-02-%' );
SELECT t.make, d.first_name, d.last_name FROM shipment s JOIN customer c ON s.cust_id = c.cust_id JOIN truck t ON s.truck_id = t.truck_id JOIN driver d ON s.driver_id = d.driver_id WHERE c.cust_name = 'Klett & Sons Repair';
SELECT s.ship_id FROM shipment s JOIN driver d ON s.driver_id = d.driver_id WHERE d.first_name = 'Zachery' AND d.last_name = 'Hicks' AND s.weight = (SELECT MAX(weight) FROM shipment WHERE driver_id = d.driver_id);
SELECT COUNT(*) FROM shipment JOIN driver ON shipment.driver_id = driver.driver_id JOIN city ON shipment.city_id = city.city_id WHERE driver.first_name = 'Zachery' AND driver.last_name = 'Hicks'  AND city.city_name = 'New York' AND CAST(ship_date AS DATE) = '2016-01-01';
SELECT    CASE t.make      WHEN 'Peterbilt' THEN 'Texas (TX)'     WHEN 'Mack' THEN 'North Carolina (NC)'     WHEN 'Kenworth' THEN 'Washington (WA)'   END AS headquarter,   COUNT(s.ship_id) AS shipment_count FROM    shipment s    JOIN truck t ON s.truck_id = t.truck_id WHERE    CAST(s.ship_date AS DATE) = '2016-01-01' GROUP BY    CASE t.make      WHEN 'Peterbilt' THEN 'Texas (TX)'     WHEN 'Mack' THEN 'North Carolina (NC)'     WHEN 'Kenworth' THEN 'Washington (WA)'   END ORDER BY    shipment_count DESC LIMIT 1;
SELECT COUNT(s.ship_id) FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE c.state = 'California' AND c.population = (   SELECT MIN(population)   FROM city   WHERE state = 'California' );
SELECT c.city_name FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE s.weight = (SELECT MAX(weight) FROM shipment);
SELECT city_name FROM city WHERE city_id IN (   SELECT city_id   FROM shipment   WHERE driver_id IN (     SELECT driver_id     FROM driver     WHERE first_name = 'Zachery' AND last_name = 'Hicks'   ) );
SELECT AVG(shipments_per_year) AS avg_shipments FROM (   SELECT COUNT(s.ship_id) AS shipments_per_year   FROM shipment s   JOIN driver d ON s.driver_id = d.driver_id   WHERE d.first_name = 'Zachery' AND d.last_name = 'Hicks'   AND EXTRACT(YEAR FROM s.ship_date) = 2017   GROUP BY EXTRACT(YEAR FROM s.ship_date) ) AS yearly_shipments;
SELECT    (SUM(CASE WHEN d.first_name = 'Zachery' AND d.last_name = 'Hicks' AND c.state = 'California' AND CAST(s.ship_date AS DATE) = '2016-01-01' THEN s.weight ELSE 0 END) /     SUM(s.weight)) * 100 AS percentage FROM    shipment s JOIN    driver d ON s.driver_id = d.driver_id JOIN    city c ON s.city_id = c.city_id;
SELECT COUNT(*) FROM shipment WHERE driver_id IN (   SELECT driver_id   FROM driver   WHERE first_name = 'Zachary' AND last_name = 'Hicks' );
SELECT ship_id FROM shipment WHERE city_id = (   SELECT city_id   FROM city   ORDER BY area DESC   LIMIT 1 );
SELECT d.first_name, d.last_name FROM driver d JOIN shipment s ON d.driver_id = s.driver_id JOIN city c ON s.city_id = c.city_id WHERE c.population = (SELECT MIN(population) FROM city);
SELECT COUNT(*) FROM shipment WHERE city_id IN (   SELECT city_id   FROM city   WHERE city_name = 'Cicero' AND state = 'Illinois' ) AND weight BETWEEN 9000 AND 15000;
SELECT t.model_year FROM shipment s JOIN truck t ON s.truck_id = t.truck_id WHERE s.ship_id = 1233;
SELECT d.address FROM shipment s JOIN customer c ON s.cust_id = c.cust_id JOIN driver d ON s.driver_id = d.driver_id WHERE c.address = '7052 Carroll Road' AND c.city = 'San Diego' AND c.state = 'California';
SELECT COUNT(*) FROM shipment JOIN driver ON shipment.driver_id = driver.driver_id WHERE driver.first_name = 'Maria' AND driver.last_name = 'Craft' AND CAST(ship_date AS DATE) = '2017-01-01';
SELECT t.model_year FROM shipment s JOIN truck t ON s.truck_id = t.truck_id WHERE s.ship_id = 1245;
SELECT address  FROM driver  WHERE driver_id = (SELECT driver_id                     FROM shipment                     WHERE ship_id = 1127);
SELECT annual_revenue FROM customer WHERE cust_id IN (   SELECT cust_id   FROM shipment   WHERE ship_id = 1047 );
SELECT weight FROM shipment JOIN driver ON shipment.driver_id = driver.driver_id WHERE driver.first_name = 'Andrea' AND driver.last_name = 'Simons' AND ship_date = '2016-03-07';
SELECT c.city_name FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE s.ship_date = '2017-01-16';
SELECT COUNT(*) FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id WHERE customer.state = 'NY';
SELECT cust_name FROM customer WHERE cust_id = (   SELECT cust_id   FROM shipment   WHERE ship_id = 1147 );
SELECT s.ship_id FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE c.population = (SELECT MAX(population) FROM city);
SELECT d.first_name, d.last_name FROM shipment s JOIN driver d ON s.driver_id = d.driver_id WHERE s.ship_date = '2016-02-22';
SELECT weight FROM shipment WHERE cust_id IN (   SELECT cust_id   FROM customer   WHERE annual_revenue = 39448581 );
SELECT address FROM customer WHERE cust_id = (   SELECT cust_id   FROM shipment   WHERE ship_id = 1117 );
SELECT    (COUNT(CASE WHEN CAST(ship_date AS DATE) = 2017 THEN ship_id ELSE NULL END) /     COUNT(ship_id)) * 100  AS    percentage_of_shipments_in_2017 FROM    shipment  WHERE    city_id IN (SELECT city_id FROM city WHERE state = 'TX')    AND cust_id IN (SELECT cust_id FROM customer WHERE state = 'TX');
SELECT    ABS((SELECT COUNT(ship_id) FROM shipment         WHERE truck_id IN (SELECT truck_id FROM truck WHERE model_year = 2005))    - (SELECT COUNT(ship_id) FROM shipment       WHERE truck_id IN (SELECT truck_id FROM truck WHERE model_year = 2006)))  AS difference;
SELECT d.first_name, d.last_name FROM driver d JOIN shipment s ON d.driver_id = s.driver_id WHERE s.weight > (SELECT AVG(weight) * 0.95 FROM shipment);
SELECT title, COUNT(DISTINCT w.word) AS num_words FROM pages p JOIN langs l ON p.lid = l.lid JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE l.lang = 'Catalan' GROUP BY p.title ORDER BY LENGTH(p.title) DESC LIMIT 1;
SELECT p.title FROM pages p JOIN langs l ON p.lid = l.lid WHERE l.lang = 'Catalan' AND p.pid IN (   SELECT pw.pid   FROM pages_words pw   GROUP BY pw.pid   HAVING COUNT(DISTINCT pw.wid) < 10 );
SELECT p.page FROM langs l JOIN pages p ON l.lid = p.lid WHERE l.lang = 'Catalan' AND p.title LIKE '%Art%';
SELECT title FROM pages WHERE revision = 16203226 AND lid IN (     SELECT lid     FROM langs     WHERE lang = 'Catalan' );
SELECT p.title FROM pages p JOIN langs l ON p.lid = l.lid WHERE l.lang = 'Catalan' AND p.revision BETWEEN 106600 AND 106700;
SELECT COUNT(DISTINCT p.pid) FROM pages p JOIN langs l ON p.lid = l.lid JOIN (   SELECT pid   FROM pages_words   GROUP BY pid   HAVING COUNT(DISTINCT wid) BETWEEN 1000 AND 2000 ) pw ON p.pid = pw.pid WHERE l.lang = 'Catalan';
SELECT p.pid FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid JOIN langs l ON p.lid = l.lid WHERE l.lang = 'Catalan' AND w.word = 'decimal';
SELECT w.word FROM words w JOIN pages_words pw ON w.wid = pw.wid JOIN pages p ON pw.pid = p.pid JOIN langs l ON p.lid = l.lid WHERE l.lang = 'Catalan' GROUP BY w.word ORDER BY SUM(pw.occurrences) DESC LIMIT 1;
SELECT w1st.word FROM biwords JOIN words w1st ON biwords.w1st = w1st.wid JOIN words w2nd ON biwords.w2nd = w2nd.wid WHERE w2nd.word = 'antic';
SELECT p.title, pw.occurrences FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE w.word = 'quipu';
SELECT AVG(occurrences)  FROM biwords  WHERE w1st ='system';
SELECT SUM(pages)  FROM langs  WHERE lang = 'ca';
SELECT    bw.w1st, bw.w2nd, bw.occurrences FROM    biwords bw   JOIN langs l ON bw.lid = l.lid   JOIN words w1 ON bw.w1st = w1.wid   JOIN words w2 ON bw.w2nd = w2.wid WHERE    l.lang = 'Catalan' ORDER BY    bw.occurrences DESC LIMIT 1;
SELECT w.wid FROM langs l JOIN langs_words lw ON l.lid = lw.lid JOIN words w ON lw.wid = w.wid WHERE l.lang = 'Catalan' AND lw.occurrences <= 10;
SELECT title FROM pages WHERE lid = (SELECT lid              FROM langs              WHERE lang = 'Catalan'              ORDER BY words DESC              LIMIT 1);
SELECT pid FROM pages WHERE title = 'Arqueozoologia';
SELECT wid, MAX(occurrences)  FROM pages_words  WHERE pid IN (SELECT pid FROM pages WHERE title = 'Abadia')  AND wid IN (SELECT wid FROM langs_words WHERE lid IN (SELECT lid FROM langs WHERE lang = 'Catalan'));
SELECT p.title, w.wid FROM pages p JOIN (   SELECT pid, MAX(wid) AS max_wid   FROM pages_words pw   JOIN (     SELECT pid     FROM pages     WHERE lid = (SELECT lid FROM langs WHERE lang = 'Catalan')     ORDER BY words LIMIT 5   ) p5 ON pw.pid = p5.pid   GROUP BY pw.pid ) pw_max ON p.pid = pw_max.pid JOIN words w ON w.wid = pw_max.max_wid;
SELECT SUM(b.occurrences)  FROM biwords b  JOIN langs l ON b.lid = l.lid  JOIN words w1st ON b.w1st = w1st.wid  JOIN words w2nd ON b.w2nd = w2nd.wid  WHERE l.lang = 'Catalan' AND w1st.word = 'i' AND w2nd.word = 'a';
SELECT b.w1st, w1.word, b.w2nd, w2.word FROM biwords b JOIN words w1 ON b.w1st = w1.wid JOIN words w2 ON b.w2nd = w2.wid WHERE b.occurrences = 2;
SELECT w1.word, w2.word, bi.occurrences FROM biwords bi JOIN words w1 ON bi.w1st = w1.wid JOIN words w2 ON bi.w2nd = w2.wid JOIN pages p ON bi.lid = p.lid WHERE p.title = 'Addicio' ORDER BY bi.occurrences DESC LIMIT 1;
SELECT SUM(p.words)  FROM pages p  WHERE p.title IN ('Adam', 'Acampada');
SELECT revision  FROM pages  WHERE title LIKE 'Aigua dolça%';
SELECT title FROM pages WHERE words = (SELECT MAX(words) FROM pages);
SELECT AVG(words)  FROM (   SELECT title, words    FROM pages    WHERE words >= 10    ORDER BY words    LIMIT 10 ) AS subquery;
SELECT pid FROM pages WHERE words < 10 LIMIT 5;
SELECT pid FROM pages WHERE title LIKE 'b%';
SELECT p.title FROM words w JOIN pages_words pw ON w.wid = pw.wid JOIN pages p ON pw.pid = p.pid WHERE w.word = 'desena';
SELECT w.wid FROM words w JOIN pages_words pw ON w.wid = pw.wid JOIN pages p ON pw.pid = p.pid WHERE p.title = 'Sometent';
SELECT 1 FROM words w JOIN pages_words pw ON w.wid = pw.wid JOIN pages p ON pw.pid = p.pid WHERE w.wid = 88 AND p.title = 'Animals';
SELECT w.occurrences FROM words w JOIN pages_words pw ON w.wid = pw.wid JOIN pages p ON pw.pid = p.pid WHERE w.word = 'del' AND p.title = 'Any anomalÃ­stic';
SELECT w1.word, w2.word FROM biwords JOIN words w1 ON biwords.w1st = w1.wid JOIN words w2 ON biwords.w2nd = w2.wid WHERE biwords.occurrences = 4 LIMIT 1;
SELECT SUM(b.occurrences)  FROM biwords b  JOIN words w1 ON b.w1st = w1.wid  JOIN words w2 ON b.w2nd = w2.wid  WHERE w1.word = 'nombre' OR w2.word = 'nombre';
SELECT w.word FROM biwords bw JOIN words w ON bw.w1st = w.wid OR bw.w2nd = w.wid WHERE bw.w1st IN (SELECT wid FROM words WHERE word = 'John')     OR bw.w2nd IN (SELECT wid FROM words WHERE word = 'John') LIMIT 10;
SELECT p.pid, p.revision FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE w.word = 'fresc';
SELECT w1.word, w2.word FROM words w1 JOIN biwords b ON w1.wid = b.w1st JOIN words w2 ON b.w2nd = w2.wid WHERE w1.wid BETWEEN 1 AND 10;
SELECT w.word, SUM(ow.occurrences) AS total_occurrences FROM words w JOIN pages_words pw ON w.wid = pw.wid JOIN pages p ON pw.pid = p.pid WHERE p.title = 'Atomium' GROUP BY w.word ORDER BY total_occurrences DESC LIMIT 3;
SELECT word FROM words WHERE occurrences = (SELECT MAX(occurrences) FROM words);
SELECT p.pid FROM pages p JOIN langs l ON p.lid = l.lid WHERE l.lang = 'Catalan' AND p.title REGEXP '[0-9]';
SELECT title FROM pages WHERE pid = (   SELECT pid   FROM pages_words   GROUP BY pid   ORDER BY COUNT(wid) ASC   LIMIT 1 );
SELECT w1st, w2nd FROM biwords WHERE occurrences = (SELECT MAX(occurrences) FROM biwords);
SELECT SUM(occurrences)  FROM words  WHERE LENGTH(word) = 3;
SELECT AVG(word_count) AS avg_diff_words FROM (   SELECT pid, COUNT(DISTINCT wid) AS word_count   FROM pages_words   WHERE pid IN (     SELECT pid     FROM pages     WHERE title LIKE 'A%'   )   GROUP BY pid ) AS subquery;
SELECT AVG(occurrences)  FROM biwords  WHERE w1st = 34;
SELECT    DIVIDE(COUNT(DISTINCT pw.pid), COUNT(p.pid)) AS percentage FROM    pages p   JOIN pages_words pw ON p.pid = pw.pid GROUP BY    p.pid HAVING    COUNT(DISTINCT pw.wid) = 1500;
SELECT    DIVIDE(COUNT(CASE WHEN w1st = w2nd THEN occurrences END), COUNT(occurrences)) AS percentage FROM    biwords;
SELECT p.title FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE w.word = 'comunitat';
SELECT COUNT(DISTINCT pw.pid) FROM words w JOIN pages_words pw ON w.wid = pw.wid WHERE w.word = 'ripoll';
SELECT SUM(occurrences) - COUNT(*) FROM pages_words WHERE pid IN (   SELECT pid   FROM pages   WHERE title = 'Llista de conflictes armats' );
SELECT EXISTS (   SELECT 1   FROM biwords b   JOIN words w1 ON b.w1st = w1.wid   JOIN words w2 ON b.w2nd = w2.wid   WHERE (w1.word = 'fukunaga' AND w2.word = 'd''egees')      OR (w1.word = 'd''egees' AND w2.word = 'fukunaga') ) AS has_pair;
SELECT AVG(avg_occurrences) AS average_repetitions FROM (   SELECT pid, SUM(occurrences) AS sum_occurrences, COUNT(wid) AS count_words   FROM pages_words   GROUP BY pid   HAVING COUNT(wid) = 100 ) AS pages_with_100_words JOIN (   SELECT pid, SUM(occurrences) / COUNT(DISTINCT wid) AS avg_occurrences   FROM pages_words   GROUP BY pid   HAVING COUNT(DISTINCT wid) = 100 ) AS avg_occurrences_per_page ON pages_with_100_words.pid = avg_occurrences_per_page.pid;
SELECT p.page FROM langs l JOIN langs_words lw ON l.lid = lw.lid JOIN words w ON lw.wid = w.wid JOIN pages_words pw ON w.wid = pw.wid JOIN pages p ON pw.pid = p.pid WHERE l.lang = 'Catalan' AND w.word = 'Acampada';
SELECT page FROM pages WHERE words > 300 LIMIT 3;
SELECT occurrences FROM words WHERE wid = 8;
SELECT wid, word, occurrences FROM words ORDER BY occurrences DESC LIMIT 3;
SELECT occurrences FROM biwords WHERE (w1st = 1 AND w2nd = 25) OR (w1st = 25 AND w2nd = 1);
SELECT SUM(occurrences)  FROM pages_words  WHERE pid IN (SELECT pid                 FROM pages                 WHERE revision = 27457362);
SELECT    DIVIDE(COUNT(*), (SELECT COUNT(*) FROM words WHERE lid = 1)) * 100 AS percentage FROM    words  WHERE    lid = 1 AND occurrences > 16000;
SELECT page FROM pages WHERE lid = 1 ORDER BY words DESC LIMIT 1;
SELECT    DIVIDE(COUNT(lid), COUNT(*)) AS percentage FROM    biwords WHERE    lid IN (SELECT lid FROM langs WHERE lang = 'Catalan')    AND occurrences < 80;
SELECT COUNT(DISTINCT p.pid) FROM langs l JOIN pages p ON l.lid = p.lid WHERE l.lang = 'ca';
SELECT p.page, p.title, p.revision FROM pages p JOIN langs l ON p.lid = l.lid WHERE l.lid = 1 LIMIT 3;
SELECT lang FROM biwords JOIN langs ON biwords.lid = langs.lid WHERE w1st = 1 AND w2nd = 616;
SELECT occurrences FROM words JOIN langs_words ON words.wid = langs_words.wid WHERE lang = 'Catalan' AND lid = 1 AND word = 'nombre';
SELECT w.word FROM biwords bw JOIN words w ON bw.w2nd = w.wid WHERE bw.w1st = 1 AND bw.w2nd = 8968;
SELECT w.word, lw.occurrences FROM langs_words lw JOIN words w ON lw.wid = w.wid WHERE lw.lid = 1 ORDER BY lw.occurrences DESC LIMIT 1;
SELECT occurrences FROM pages_words WHERE pid = 44 AND wid IN (   SELECT wid   FROM words   WHERE word = 'votives' );
SELECT occurrences FROM biwords WHERE lid IN (SELECT lid FROM pages WHERE pid = 16) AND w1st = 1 AND w2nd = 109;
SELECT    DIVIDE(COUNT(wid), COUNT(*)) AS percentage FROM    words w   JOIN langs_words lw ON w.wid = lw.wid   JOIN langs l ON lw.lid = l.lid WHERE    l.lang = 'ca' AND w.occurrences < 180;
SELECT    DIVIDE(COUNT(*), (SELECT COUNT(*) FROM pages WHERE lang = 'ca')) AS percentage FROM    pages  WHERE    lang = 'ca' AND words > 10000;
SELECT occurrences FROM words WHERE word = 'desena';
SELECT COUNT(*)  FROM words  WHERE occurrences > 10;
SELECT SUM(pages)  FROM langs  WHERE lang = 'Catalan';
SELECT COUNT(*)  FROM words  WHERE occurrences BETWEEN 2000 AND 5000;
SELECT p.title FROM langs l JOIN pages p ON l.lid = p.lid WHERE l.lang = 'Catalan' AND p.revision = 106601;
SELECT title FROM pages WHERE revision = 28040864;
SELECT occurrences FROM biwords WHERE (w1st = (SELECT wid FROM words WHERE word = 'barcelona') AND w2nd = (SELECT wid FROM words WHERE word = 'precolombina'))    OR (w1st = (SELECT wid FROM words WHERE word = 'precolombina') AND w2nd = (SELECT wid FROM words WHERE word = 'barcelona'));
SELECT locale FROM langs WHERE lid IN (   SELECT lid   FROM pages   WHERE title = 'Anys 90' );
SELECT w.word FROM words w JOIN langs_words lw ON w.wid = lw.wid JOIN langs l ON lw.lid = l.lid WHERE l.lang = 'Catalan' AND lw.occurrences = 71303;
SELECT locale FROM langs WHERE lid IN (   SELECT lid   FROM pages   WHERE title = 'Abril' );
SELECT SUM(pw.occurrences)  FROM pages_words pw  JOIN biwords b ON pw.pid = b.lid  WHERE b.w1st = 100 AND b.w2nd = 317;
SELECT COUNT(DISTINCT pw.pid) FROM words w JOIN pages_words pw ON w.wid = pw.wid WHERE w.occurrences = 2593;
SELECT title FROM pages_words JOIN words ON pages_words.wid = words.wid JOIN pages ON pages_words.pid = pages.pid WHERE words.wid < 20;
SELECT COUNT(DISTINCT w.word) FROM words w WHERE w.wid IN (   SELECT wid   FROM (     SELECT wid, COUNT(DISTINCT wid) as cnt     FROM words     GROUP BY wid     HAVING cnt = 3   ) AS sub );
SELECT w.wid, w.word, pw.lid FROM words w JOIN pages_words pw ON w.wid = pw.wid WHERE pw.occurrences = 8;
SELECT AVG(percentage)  FROM (   SELECT pid, SUM(occurrences) / COUNT(*) as percentage   FROM pages_words   WHERE pid IN (SELECT pid FROM pages WHERE revision < 106680)   GROUP BY pid ) AS subquery;
SELECT SUM(p.pages)  FROM words w  JOIN pages_words pw ON w.wid = pw.wid  JOIN pages p ON pw.pid = p.pid  WHERE w.occurrences > 3000;
SELECT w1.word, w2.word FROM words w1, words w2 WHERE w1.wid = 20 AND w2.wid = 50;
SELECT COUNT(pid) FROM pages WHERE lid IN (SELECT lid FROM langs WHERE lang = 'ca');
SELECT title FROM pages WHERE lid = 1 AND words > 4000;
SELECT SUM(occurrences)  FROM pages_words  WHERE pid IN (   SELECT pid    FROM pages    WHERE title = 'Asclepi' );
SELECT title FROM pages WHERE title IN ('Afluent', 'Asclepi') AND (title = 'Afluent' AND words > (SELECT words FROM pages WHERE title = 'Asclepi')) OR (title = 'Asclepi' AND words > (SELECT words FROM pages WHERE title = 'Afluent'));
SELECT occurrences FROM words WHERE word = 'nombre';
SELECT w.word FROM words w JOIN langs_words lw ON w.wid = lw.wid JOIN langs l ON lw.lid = l.lid WHERE l.lang = 'Catalan' AND lw.occurrences > 200000;
SELECT locale FROM langs WHERE lid IN (   SELECT lid   FROM pages   WHERE title = 'Asclepi' );
SELECT occurrences FROM pages_words WHERE pid IN (SELECT pid                FROM pages                WHERE title = 'Àbac')        AND wid IN (SELECT wid                    FROM words                    WHERE word = 'grec');
SELECT p.title FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE w.word = 'grec' AND pw.occurrences > 20;
SELECT COUNT(DISTINCT w.wid) FROM words w JOIN pages_words pw ON w.wid = pw.wid WHERE w.word = 'grec' AND pw.occurrences = 52;
SELECT b.occurrences FROM biwords b JOIN words w1 ON b.w1st = w1.wid JOIN words w2 ON b.w2nd = w2.wid WHERE w1.word = 'àbac' AND w2.word = 'xinès';
SELECT    w1st, w2nd, occurrences FROM    biwords WHERE    (w1st, w2nd) IN    (('àbac', 'xinès'), ('àbac', 'grec')) ORDER BY    occurrences DESC LIMIT 1;
SELECT w.occurrences - b.occurrences FROM biwords b JOIN words w ON b.w1st = w.wid WHERE b.w1st = (SELECT wid FROM words WHERE word = 'àbac') AND b.w2nd = (SELECT wid FROM words WHERE word = 'xinès');
SELECT *  FROM biwords  WHERE w1st = (SELECT wid FROM words WHERE word = 'àbac');
SELECT SUM(occurrences)  FROM biwords  WHERE w1st = (SELECT wid FROM words WHERE word = 'àbac');
SELECT COUNT(DISTINCT p.pid) FROM biwords b JOIN langs l ON b.lid = l.lid JOIN langs_words lw ON l.lid = lw.lid JOIN words w1 ON lw.wid = w1.wid AND w1.word = 'àbac' JOIN words w2 ON b.w2nd = w2.wid AND w2.word = 'xinès' JOIN pages p ON l.lid = p.lid;
SELECT    ROUND(     100.0 * (       (SELECT occurrences FROM pages_words pw         JOIN pages p ON pw.pid = p.pid         JOIN words w ON pw.wid = w.wid         WHERE p.title = 'Àbac' AND w.word = 'grec')       -       (SELECT occurrences FROM pages_words pw         JOIN pages p ON pw.pid = p.pid         JOIN words w ON pw.wid = w.wid         WHERE p.title = 'Astronomia' AND w.word = 'grec')     ) /      (SELECT occurrences FROM pages_words pw       JOIN pages p ON pw.pid = p.pid       JOIN words w ON pw.wid = w.wid       WHERE p.title = 'Astronomia' AND w.word = 'grec')  , 2)  AS percentage_diff
SELECT COUNT(pid) FROM pages WHERE lid IN (SELECT lid FROM langs WHERE lang = 'ca');
SELECT wid FROM langs_words WHERE lid = (SELECT lid FROM langs WHERE lang = 'Catalan') GROUP BY wid ORDER BY SUM(occurrences) DESC LIMIT 1;
SELECT w2nd FROM biwords ORDER BY occurrences DESC LIMIT 1;
SELECT occurrences FROM words WHERE word = 'panajot';
SELECT word FROM words WHERE occurrences = 340691;
SELECT wid FROM words WHERE word = 'periodograma';
SELECT w2nd FROM biwords WHERE occurrences = 116430;
SELECT    SUM(occurrences)  FROM    biwords  WHERE    w1st IN (SELECT wid FROM words WHERE word = 'riu')    OR w2nd IN (SELECT wid FROM words WHERE word = 'riu');
SELECT w.wid FROM words w JOIN (   SELECT wid, MAX(occurrences) AS max_occurrences   FROM pages_words   WHERE pid = (     SELECT pid     FROM pages     WHERE title = 'Agricultura'   )   GROUP BY wid ) AS pages_words_sampling ON w.wid = pages_words_sampling.wid;
SELECT occurrences FROM pages_words WHERE pid IN (SELECT pid                FROM pages                WHERE title = 'Astre') AND wid = 2823;
SELECT title FROM pages WHERE pid = (   SELECT pid   FROM pages_words   WHERE wid = 174   ORDER BY occurrences DESC   LIMIT 1 )
SELECT SUM(pw.occurrences)  FROM pages_words pw  JOIN words w ON pw.wid = w.wid  JOIN pages p ON pw.pid = p.pid  WHERE w.word = 'heròdot';
SELECT wid FROM pages_words WHERE pid = (SELECT pid FROM pages WHERE revision = 28278070) GROUP BY wid ORDER BY SUM(occurrences) DESC LIMIT 1;
SELECT occurrences FROM biwords WHERE w1st = (SELECT wid FROM words WHERE word = 'que') AND w2nd = (SELECT wid FROM words WHERE word = 'gregorio');
SELECT SUM(occurrences)  FROM biwords  WHERE w2nd = (SELECT wid FROM words WHERE word = 'base');
SELECT occurrences FROM langs_words WHERE lid = 1 AND wid = (SELECT wid FROM words WHERE word = 'exemple');
SELECT w.word FROM words w JOIN langs_words lw ON w.wid = lw.wid WHERE lw.lid = 1 AND lw.occurrences = 274499;
SELECT    (SELECT occurrences FROM biwords WHERE w1st = (SELECT wid FROM words WHERE word = 'a') AND w2nd = (SELECT wid FROM words WHERE word = 'base'))   /   (SELECT occurrences FROM biwords WHERE w1st = (SELECT wid FROM words WHERE word = 'a') AND w2nd = (SELECT wid FROM words WHERE word = 'decimal'))   -   1;
SELECT    (lw.occurrences / pw.occurrences) * 100 AS percentage FROM    langs_words lw   JOIN words w ON lw.wid = w.wid   JOIN pages_words pw ON w.wid = pw.wid   JOIN pages p ON pw.pid = p.pid WHERE    w.word = 'grec' AND p.title = 'Art';
SELECT COUNT(DISTINCT pw.pid) FROM pages_words pw JOIN pages p ON pw.pid = p.pid JOIN langs l ON p.lid = l.lid WHERE l.lid = 1 GROUP BY pw.pid HAVING COUNT(DISTINCT pw.wid) > 4000;
SELECT p.title FROM pages p JOIN (   SELECT pid   FROM pages_words pw   GROUP BY pid   HAVING COUNT(DISTINCT pw.wid) = 10 ) pw ON p.pid = pw.pid WHERE p.lid = 1;
SELECT w.word FROM langs l JOIN langs_words lw ON l.lid = lw.lid JOIN words w ON lw.wid = w.wid WHERE l.lang = 'Catalan' GROUP BY w.word ORDER BY SUM(lw.occurrences) DESC LIMIT 1;
SELECT title FROM pages WHERE lid = 1 ORDER BY words DESC LIMIT 3;
SELECT revision FROM pages WHERE lid = 1 AND title = 'Arqueologia';
SELECT COUNT(*) FROM pages WHERE lid = 1 AND revision > 28330000 AND pid IN (   SELECT pid   FROM pages_words   GROUP BY pid   HAVING COUNT(DISTINCT wid) > 300 )
SELECT pid FROM pages_words JOIN words ON pages_words.wid = words.wid WHERE words.word = 'nombre';
SELECT COUNT(DISTINCT p.pid) FROM pages p JOIN langs l ON p.lid = l.lid JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE l.lang = 'Catalan' AND w.word = 'nombre' AND pw.occurrences > 5;
SELECT COUNT(*)  FROM biwords  WHERE w2nd IN (SELECT wid FROM words WHERE word = 'grec');
SELECT p.title FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE w.word = 'grec' AND pw.occurrences = 52;
SELECT COUNT(*)  FROM biwords  WHERE w1st = (SELECT wid FROM words WHERE word = 'àbac') AND occurrences > 10;
SELECT pid, AVG(occurrences) AS avg_occurrences FROM pages_words WHERE wid = (SELECT wid FROM words WHERE word = 'grec') GROUP BY pid;
SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018-08-01';
SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018-08-01' AND ORIGIN = 'JFK';
SELECT DISTINCT DEST FROM Airlines WHERE FL_DATE = '2018-08-01' AND CANCELLED = 1;
SELECT FL_DATE FROM Airlines WHERE CANCELLED = 1 AND CANCELLATION_CODE = 'A';
SELECT ORIGIN FROM Airlines WHERE FL_DATE = '2018-08-01' AND DEP_DELAY > 0;
SELECT COUNT(*) FROM Airlines JOIN Airports ON Airlines.ORIGIN_AIRPORT_ID = Airports.Code WHERE FL_DATE = '2018-08-01' AND Airports.Description = 'New York, NY: John F. Kennedy International';
SELECT DEST FROM Airlines WHERE FL_DATE = '2018-08-01' AND DEP_DELAY = (SELECT MAX(DEP_DELAY)                   FROM Airlines                   WHERE FL_DATE = '2018-08-01');
SELECT COUNT(*) FROM Airlines JOIN Airports ON Airlines.ORIGIN_AIRPORT_ID = Airports.Code WHERE Airports.Description = 'New York, NY: John F. Kennedy International' AND ARR_DELAY < 0;
SELECT MIN(DEP_TIME)  FROM Airlines  JOIN Airports ON Airlines.ORIGIN_AIRPORT_ID = Airports.Code  WHERE FL_DATE = '2018-08-01' AND Airports.Description = 'New York, NY: John F. Kennedy International';
SELECT COUNT(*) FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE FL_DATE = '2018-08-01' AND AirCarriers.Description = 'American Airlines Inc.: AA';
SELECT OP_CARRIER_FL_NUM FROM Airlines JOIN Airports ON Airlines.ORIGIN_AIRPORT_ID = Airports.Code JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE AirCarriers.Description = 'American Airlines Inc.: AA' AND Airports.Description = 'New York, NY: John F. Kennedy International';
SELECT COUNT(*) FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE FL_DATE = '2018-08-01'    AND AirCarriers.Description = 'American Airlines Inc.: AA'    AND ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME;
SELECT OP_CARRIER_FL_NUM FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE AirCarriers.Description = 'American Airlines Inc.: AA' AND DEP_DELAY = (SELECT MAX(DEP_DELAY)                  FROM Airlines                  JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code                  WHERE AirCarriers.Description = 'American Airlines Inc.: AA');
SELECT COUNT(*) FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE AirCarriers.Description = 'American Airlines Inc.: AA' AND Airlines.DEST = 'JFK';
SELECT COUNT(*) FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE FL_DATE = '2018-08-01' AND AirCarriers.Description = 'American Airlines Inc.: AA' AND CANCELLED = 1;
SELECT    CASE      WHEN AA.flights > EA.flights THEN 'American Airlines Inc.'     WHEN AA.flights < EA.flights THEN 'Endeavor Air Inc.'     ELSE 'Equal'   END AS result FROM    (SELECT COUNT(*) AS flights     FROM Airlines     JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code     WHERE FL_DATE = '2018-08-01' AND AirCarriers.Description = 'American Airlines Inc.') AS AA,   (SELECT COUNT(*) AS flights     FROM Airlines     JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code     WHERE FL_DATE = '2018-08-01' AND AirCarriers.Description = 'Endeavor Air Inc.') AS EA;
SELECT AVG(DEP_DELAY) AS Average_Departure_Delay_Time FROM Airlines JOIN Air_Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_Carriers.Code WHERE Air_Carriers.Description = 'American Airlines Inc.: AA';
SELECT DIVIDE(COUNT(OP_CARRIER_FL_NUM), 31)  FROM Airlines  JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code  WHERE FL_DATE LIKE '2018/8%' AND AirCarriers.Description = 'American Airlines Inc.: AA';
SELECT COUNT(*)  FROM Air_Carriers;
SELECT COUNT(DISTINCT TAIL_NUM) FROM Airlines JOIN Airports ON Airlines.ORIGIN_AIRPORT_ID = Airports.Code WHERE FL_DATE = '2018-08-27' AND Airports.Description = 'Los Angeles, CA: Los Angeles International';
SELECT COUNT(DISTINCT TAIL_NUM) FROM Airlines JOIN Airports ON DEST_AIRPORT_ID = Code WHERE FL_DATE = '2018-08-07' AND Description LIKE '%Oakland%';
SELECT COUNT(*) FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE FL_DATE = '2018-08-02' AND DEP_DELAY > 0 AND AirCarriers.Description = 'Alaska Airlines Inc.: AS';
SELECT COUNT(*) FROM Airlines WHERE DEST = 'MIA' AND FL_DATE = '2018-08-12' AND ARR_DELAY < 0;
SELECT COUNT(*) FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE AirCarriers.Description = 'American Airlines Inc.: AA' AND Cancelled = 1 AND CANCELLATION_CODE = 'A';
SELECT COUNT(*) FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE AirCarriers.Description = 'Endeavor Air Inc.: 9E'  AND FL_DATE = '2018-08-31'  AND ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME;
SELECT COUNT(DISTINCT TAIL_NUM) FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE FL_DATE = '2018-08-07' AND Description = 'Spirit Air Lines: NK';
SELECT ac.Description FROM Airlines a JOIN AirCarriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.TAIL_NUM = 'N702SK';
SELECT a.Description FROM Airlines al JOIN Airports a ON al.DEST_AIRPORT_ID = a.Code WHERE al.FL_DATE = '2018-08-15' GROUP BY a.Description ORDER BY COUNT(al.DEST_AIRPORT_ID) DESC LIMIT 1;
SELECT ac.Description FROM Airlines a JOIN AirCarriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.ORIGIN = 'ATL' AND a.DEST = 'PHL' AND a.FL_DATE = '2018-08-01' AND a.CRS_DEP_TIME = '2040';
SELECT COUNT(*) FROM Airlines JOIN Airports ON Airlines.DEST_AIRPORT_ID = Airports.Code WHERE FL_DATE = '2018-08-15' AND Airports.Description = 'Lake Charles, LA: Lake Charles Regional';
SELECT COUNT(*) FROM Airlines JOIN Airports AS O ON Airlines.ORIGIN_AIRPORT_ID = O.Code JOIN Airports AS D ON Airlines.DEST_AIRPORT_ID = D.Code WHERE O.Description = 'San Diego, CA: San Diego International' AND D.Description = 'Los Angeles, CA: Los Angeles International' AND Airlines.FL_DATE LIKE '2018/8%';
SELECT      (SUM(CASE WHEN CANCELLATION_CODE = 'C' THEN 1 ELSE 0 END) / COUNT(Code)) * 100 AS percentage FROM      Airlines JOIN      Airports ON Airlines.ORIGIN_AIRPORT_ID = Airports.Code WHERE      Airports.Description = 'Los Angeles, CA: Los Angeles International'      AND Cancelled = 1;
SELECT      ROUND(         100 * SUM(A.ACTUAL_ELAPSED_TIME < A.CRS_ELAPSED_TIME) / COUNT(*)     ) AS percentage FROM      Airlines A JOIN      Airports B ON A.DEST_AIRPORT_ID = B.Code WHERE      B.Description LIKE '%Pittsburgh%';
SELECT Description FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE OP_CARRIER_AIRLINE_ID = '19049';
SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018-08-01' AND DEP_DELAY <= 0;
SELECT Code FROM Airports WHERE Description LIKE '%Ankara, Turkey%';
SELECT MAX(WEATHER_DELAY)  FROM Airlines  WHERE ORIGIN_AIRPORT_ID = 12264;
SELECT Code FROM Airports WHERE Description = 'Anita Bay, AK: Anita Bay Airport';
SELECT ORIGIN_AIRPORT_ID FROM Airlines WHERE LATE_AIRCRAFT_DELAY = (SELECT MAX(LATE_AIRCRAFT_DELAY) FROM Airlines);
SELECT COUNT(*) FROM Airlines JOIN Airports o ON Airlines.ORIGIN_AIRPORT_ID = o.Code JOIN Airports d ON Airlines.DEST_AIRPORT_ID = d.Code WHERE o.Description = 'Chicago, IL: Chicago O''Hare International' AND d.Description = 'Atlanta, GA: Hartsfield-Jackson Atlanta International';
SELECT COUNT(DISTINCT TAIL_NUM) FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE AirCarriers.Description = 'Southwest Airlines Co.: WN';
SELECT EXTRACT(DAY FROM FL_DATE) AS DAY  FROM Airlines  JOIN Airports ON Airlines.DEST_AIRPORT_ID = Airports.Code  WHERE FL_DATE LIKE '2018/8%'  AND CANCELLED = 1  AND CANCELLATION_CODE = 'A'  AND Airports.Description = 'Dallas/Fort Worth, TX: Dallas/Fort Worth International'  GROUP BY DAY  ORDER BY COUNT(FL_DATE) DESC  LIMIT 1;
SELECT TAIL_NUM FROM Airlines JOIN Airports ON Airlines.DEST_AIRPORT_ID = Airports.Code WHERE ARR_DELAY <= 0 AND FL_DATE LIKE '2018/8%' AND Airports.Description = 'Bakersfield, CA: Meadows Field';
SELECT OP_CARRIER_AIRLINE_ID FROM Airlines WHERE DEST_AIRPORT_ID IN (   SELECT Code   FROM Airports   WHERE Description = 'Boston, MA: Logan International' ) GROUP BY OP_CARRIER_AIRLINE_ID ORDER BY MAX(SECURITY_DELAY) DESC LIMIT 1;
SELECT ac.Description, COUNT(al.TAIL_NUM) as num_aircraft FROM Airlines al JOIN AirCarriers ac ON al.OP_CARRIER_AIRLINE_ID = ac.Code GROUP BY ac.Description ORDER BY num_aircraft DESC LIMIT 5;
SELECT ac.Description FROM Airlines a JOIN AirCarriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.CANCELLED = 0 GROUP BY ac.Description ORDER BY COUNT(a.CANCELLED = 0) DESC LIMIT 1;
SELECT ac.Description FROM Airlines a JOIN AirCarriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.TAIL_NUM = 'N202NN';
SELECT ac.Description FROM Airlines a JOIN Airports d ON a.DEST_AIRPORT_ID = d.Code JOIN Airlines al ON a.OP_CARRIER_AIRLINE_ID = al.Code JOIN AirCarriers ac ON al.Code = ac.Code WHERE d.Description = 'Chicago, IL: Chicago Midway International' GROUP BY ac.Description ORDER BY COUNT(a.DEST) DESC LIMIT 1;
SELECT TAIL_NUM FROM Airlines WHERE OP_CARRIER_AIRLINE_ID IN (     SELECT OP_CARRIER_AIRLINE_ID     FROM Airlines     WHERE ORIGIN = 'LAX' AND DEST = 'ABQ'     GROUP BY OP_CARRIER_AIRLINE_ID     ORDER BY COUNT(OP_CARRIER_AIRLINE_ID) DESC     LIMIT 1 ) AND OP_CARRIER_AIRLINE_ID IN (     SELECT Code     FROM AirCarriers     WHERE Description = 'Compass Airlines: CP' );
SELECT a.Description, a.Code, COUNT(a.Code) as count FROM Airlines al JOIN Airports a ON al.ORIGIN_AIRPORT_ID = a.Code JOIN AirCarriers ac ON al.OP_CARRIER_AIRLINE_ID = ac.Code WHERE ac.Description = 'Republic Airline: YX' GROUP BY a.Description, a.Code ORDER BY count DESC LIMIT 1;
SELECT ac.Description FROM Airlines a JOIN AirCarriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.ACTUAL_ELAPSED_TIME - a.CRS_ELAPSED_TIME = (   SELECT MIN(a.ACTUAL_ELAPSED_TIME - a.CRS_ELAPSED_TIME)   FROM Airlines a );
SELECT    SUM(LATE_AIRCRAFT_DELAY)/60 AS total_delayed_hours,   TAIL_NUM FROM    Airlines   JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE    AirCarriers.Description = 'Delta Air Lines Inc.: DL'   AND FL_DATE LIKE '2018/8/%' GROUP BY    TAIL_NUM ORDER BY    total_delayed_hours DESC LIMIT 1;
SELECT Code, Description FROM Airports LIMIT 3;
SELECT Code FROM AirCarriers WHERE Description LIKE 'Mississippi Valley Airlines%';
SELECT CRS_DEP_TIME, DEP_TIME FROM Airlines WHERE ORIGIN = 'PHL' AND DEST = 'MDT' AND TAIL_NUM = 'N627AE' AND FL_DATE = '2018-08-13';
SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018-08-01' AND ORIGIN = 'ABE';
SELECT DISTINCT DEST FROM Airlines WHERE ORIGIN = 'ABY';
SELECT COUNT(*) FROM Airlines WHERE ORIGIN = 'DFW' AND DEST = 'SNA' AND DEP_DELAY = 0;
SELECT COUNT(*) FROM Airlines JOIN Airports AS O ON Airlines.ORIGIN_AIRPORT_ID = O.Code JOIN Airports AS D ON Airlines.DEST_AIRPORT_ID = D.Code WHERE O.Description = 'Charlotte, NC: Charlotte Douglas International' AND D.Description = 'Austin, TX: Austin - Bergstrom International' AND CANCELLATION_CODE = 'A';
SELECT ac.Description, COUNT(CANCELLED) as Cancelled_Flights FROM Airlines a JOIN AirCarriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.CANCELLED = 1 GROUP BY ac.Description ORDER BY Cancelled_Flights DESC LIMIT 1;
SELECT DEP_TIME FROM Airlines JOIN Airports ON Airlines.DEST_AIRPORT_ID = Airports.Code JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE TAIL_NUM = 'N903JB' AND FL_DATE = '2018/8/20' AND Airports.Description LIKE '%Fort Lauderdale-Hollywood%' AND AirCarriers.Description LIKE '%JetBlue Airways%';
SELECT ac.Description FROM Airlines a JOIN AirCarriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.ORIGIN = 'ACY' AND a.DEST = 'FLL';
SELECT Description FROM Airports WHERE Code = 'A11';
SELECT COUNT(*) FROM Airlines WHERE ORIGIN = 'OKC';
SELECT COUNT(*)  FROM Airports  WHERE Code LIKE 'C%';
SELECT DEST FROM Airlines WHERE OP_CARRIER_FL_NUM = 1596;
SELECT Description FROM Airports WHERE Code LIKE '%3';
SELECT Code FROM Airports WHERE Description = 'Driftwood Bay, AK: Driftwood Bay Airport';
SELECT COUNT(*)  FROM Airlines  WHERE CANCELLED = 1;
SELECT TAIL_NUM FROM Airlines WHERE FL_DATE = '2018-08-17';
SELECT ORIGIN FROM Airlines WHERE ACTUAL_ELAPSED_TIME = (SELECT MIN(ACTUAL_ELAPSED_TIME) FROM Airlines);
SELECT FL_DATE, TAIL_NUM FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE AirCarriers.Description = 'Ross Aviation Inc.: GWE';
SELECT ac.Description, ac.Code FROM Airlines a JOIN AirCarriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.ARR_TIME = (SELECT MIN(ARR_TIME) FROM Airlines);
SELECT COUNT(*) FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE AirCarriers.Description LIKE '%JetBlue Airways%' AND Airlines.ARR_DELAY_NEW = 0;
SELECT ac.Description FROM Airlines a JOIN AirCarriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.DEST = 'MIA';
SELECT ac.Description FROM Airlines a JOIN AirCarriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.CANCELLED = 1;
SELECT ACTUAL_ELAPSED_TIME FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE AirCarriers.Description = 'Semo Aviation Inc.: SEM';
SELECT TAIL_NUM FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE AirCarriers.Description = 'Asap Air Inc.: ASP' AND DEP_DELAY = (SELECT MAX(DEP_DELAY)                  FROM Airlines                  JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code                  WHERE AirCarriers.Description = 'Asap Air Inc.: ASP');
SELECT ac.Description FROM Airlines a JOIN AirCarriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.DEP_DELAY = 0;
SELECT ac.Description FROM Airlines a JOIN AirCarriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.ACTUAL_ELAPSED_TIME = (SELECT MAX(ACTUAL_ELAPSED_TIME) FROM Airlines);
SELECT DISTINCT DEST FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE AirCarriers.Description = 'Southeast Alaska Airlines: WEB';
SELECT COUNT(*) FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE FL_DATE BETWEEN '2018-08-10' AND '2018-08-20' AND CANCELLED = 1 AND AirCarriers.Description = 'Spirit Air Lines: NK';
SELECT COUNT(*) FROM Airlines JOIN Air_Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_Carriers.Code WHERE FL_DATE = '2018/8/2' AND Air_Carriers.Description LIKE '%Horizon Air%';
SELECT TAIL_NUM  FROM Airlines  JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code  WHERE AirCarriers.Description = 'Iscargo Hf: ICQ' AND ARR_TIME <= 1000;
SELECT FL_DATE FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE AirCarriers.Description = 'Profit Airlines Inc.: XBH' AND ACTUAL_ELAPSED_TIME < 100;
SELECT COUNT(*) FROM Airlines JOIN AirCarriers ON Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code WHERE AirCarriers.Description LIKE '%Republic Airline%' AND Airlines.DEP_DELAY > 30;
SELECT ac.Description FROM Airlines a JOIN AirCarriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.FL_DATE = '2018/8/25' AND a.DEP_DELAY = -5;
SELECT ac.Description FROM Airlines a JOIN AirCarriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.TAIL_NUM = 'N922US' AND a.ORIGIN = 'PHX';
SELECT ac.Description FROM Airlines a JOIN AirCarriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.ARR_DELAY < 0 AND a.DEP_DELAY < 0;
SELECT TAIL_NUM FROM Airlines WHERE OP_CARRIER_AIRLINE_ID IN (   SELECT Code   FROM AirCarriers   WHERE Description = 'Southwest Airlines Co.: WN' ) AND ACTUAL_ELAPSED_TIME < (   SELECT AVG(ACTUAL_ELAPSED_TIME) * 0.8   FROM Airlines   WHERE OP_CARRIER_AIRLINE_ID IN (     SELECT Code     FROM AirCarriers     WHERE Description = 'Southwest Airlines Co.: WN'   ) );
SELECT ac.Description FROM Air_Carriers ac JOIN Airlines al ON ac.Code = al.OP_CARRIER_AIRLINE_ID WHERE al.ARR_TIME < (SELECT AVG(ARR_TIME) * 0.4                      FROM Airlines                      WHERE DEST = 'PHX');
SELECT      MULTIPLY(DIVIDE(SUM(DEP_DELAY < 0), COUNT(DEP_DELAY)), 1.0) AS Percentage_Earlier_Departure FROM      Airlines  JOIN      AirCarriers  ON      Airlines.OP_CARRIER_AIRLINE_ID = AirCarriers.Code  WHERE      AirCarriers.Description LIKE '%American Airlines%';
SELECT COUNT(*) FROM book WHERE publisher_id = 1929 AND num_pages > 500;
SELECT publication_date FROM book WHERE num_pages = (SELECT MAX(num_pages) FROM book);
SELECT p.publisher_name FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id WHERE b.title = 'The Illuminati';
SELECT COUNT(b.book_id) FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id WHERE p.publisher_name = 'Thomas Nelson';
SELECT publisher_name FROM publisher WHERE publisher_id = (   SELECT publisher_id   FROM book   GROUP BY publisher_id   ORDER BY COUNT(book_id) DESC   LIMIT 1 );
SELECT title FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Thomas Nelson') AND publication_date = (SELECT MIN(publication_date)                          FROM book                          WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Thomas Nelson'));
SELECT COUNT(*) FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Thomas Nelson') AND num_pages > 300;
SELECT p.publisher_name FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id WHERE b.num_pages = (SELECT MAX(num_pages) FROM book);
SELECT COUNT(b.book_id) FROM book b JOIN book_language bl ON b.language_id = bl.language_id WHERE bl.language_name = 'English';
SELECT b.title FROM book b JOIN book_language bl ON b.language_id = bl.language_id WHERE bl.language_name = 'British English';
SELECT MIN(ol.price)  FROM order_line ol  JOIN book b ON ol.book_id = b.book_id  WHERE b.title = 'The Little House';
SELECT b.title FROM book b JOIN order_line ol ON b.book_id = ol.book_id JOIN cust_order co ON ol.order_id = co.order_id JOIN customer c ON co.customer_id = c.customer_id WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';
SELECT COUNT(*) FROM order_line JOIN cust_order ON order_line.order_id = cust_order.order_id JOIN customer ON cust_order.customer_id = customer.customer_id JOIN book ON order_line.book_id = book.book_id WHERE customer.first_name = 'Lucas' AND customer.last_name = 'Wyldbore' AND book.num_pages > 300;
SELECT SUM(ol.price)  FROM cust_order co  JOIN customer c ON co.customer_id = c.customer_id  JOIN order_line ol ON co.order_id = ol.order_id  WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';
SELECT AVG(ol.price)  FROM order_line ol  JOIN cust_order co ON ol.order_id = co.order_id  JOIN customer c ON co.customer_id = c.customer_id  WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';
SELECT    SUM(CASE WHEN ol.price > 13 THEN 1 ELSE 0 END) / COUNT(ol.order_id) * 100 AS percentage FROM    order_line ol   JOIN cust_order co ON ol.order_id = co.order_id   JOIN customer c ON co.customer_id = c.customer_id WHERE    c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';
SELECT city FROM address WHERE address_id = 547;
SELECT COUNT(o.order_id) FROM cust_order o JOIN customer c ON o.customer_id = c.customer_id WHERE c.first_name = 'Cordy' AND c.last_name = 'Dumbarton';
SELECT b.title FROM book b JOIN book_language bl ON b.language_id = bl.language_id WHERE bl.language_name = 'Japanese' ORDER BY b.publication_date LIMIT 1;
SELECT p.publisher_name FROM publisher p JOIN (   SELECT publisher_id   FROM book   GROUP BY publisher_id   ORDER BY COUNT(book_id) DESC   LIMIT 1 ) b ON p.publisher_id = b.publisher_id;
SELECT COUNT(b.book_id) FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id WHERE p.publisher_name = 'Kensington';
SELECT language_name FROM book JOIN book_language ON book.language_id = book_language.language_id WHERE book_id = 1405;
SELECT first_name, last_name FROM customer WHERE customer_id = (   SELECT customer_id   FROM cust_order   GROUP BY customer_id   ORDER BY COUNT(order_id) DESC   LIMIT 1 )
SELECT title FROM book WHERE book_id IN (   SELECT book_id   FROM order_line   GROUP BY book_id   ORDER BY COUNT(order_id) DESC   LIMIT 1 );
SELECT COUNT(b.book_id) FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'David Foster Wallace';
SELECT COUNT(cust_order.order_id) FROM cust_order JOIN order_line ON cust_order.order_id = order_line.order_id JOIN book ON order_line.book_id = book.book_id WHERE book.title = 'O Xará';
SELECT c.country_name FROM customer cu JOIN customer_address ca ON cu.customer_id = ca.customer_id JOIN address a ON ca.address_id = a.address_id JOIN country c ON a.country_id = c.country_id WHERE cu.first_name = 'Malina' AND cu.last_name = 'Johnson';
SELECT COUNT(*)  FROM address  WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'Ukraine');
SELECT country_name FROM country WHERE country_id IN (   SELECT country_id   FROM address   WHERE city = 'Žirovnica' );
SELECT    SUM(CASE WHEN sm.method_name = 'International' THEN 1 ELSE 0 END) / COUNT(co.order_id) * 100 AS international_percentage FROM    cust_order co   JOIN shipping_method sm ON co.shipping_method_id = sm.method_id WHERE    co.order_date LIKE '2022-11-10%';
SELECT AVG(b.num_pages)  FROM book b  JOIN book_author ba ON b.book_id = ba.book_id  JOIN author a ON ba.author_id = a.author_id  WHERE a.author_name = 'David Coward';
SELECT cost FROM shipping_method WHERE method_name = 'Standard';
SELECT title FROM book WHERE publication_date = (SELECT MIN(publication_date)                           FROM book                           WHERE publication_date LIKE '1900%');
SELECT first_name, last_name  FROM customer  WHERE email = 'aalleburtonkc@yellowbook.com';
SELECT COUNT(DISTINCT co.order_id) FROM cust_order co JOIN customer_address ca ON co.dest_address_id = ca.address_id JOIN address a ON ca.address_id = a.address_id JOIN country c ON a.country_id = c.country_id WHERE co.order_date LIKE '2022%' AND c.country_name = 'Iran';
SELECT COUNT(*)  FROM cust_order  WHERE customer_id IN (   SELECT customer_id    FROM customer    WHERE first_name = 'Daisey' AND last_name = 'Lamball' )  AND shipping_method_id IN (   SELECT method_id    FROM shipping_method    WHERE method_name = 'International' );
SELECT c.first_name, c.last_name FROM customer c WHERE c.customer_id = (   SELECT customer_id   FROM cust_order   GROUP BY customer_id   ORDER BY COUNT(order_id) DESC   LIMIT 1 );
SELECT COUNT(cust_order.order_id) FROM cust_order JOIN customer ON cust_order.customer_id = customer.customer_id JOIN order_history ON cust_order.order_id = order_history.order_id JOIN order_status ON order_history.status_id = order_status.status_id WHERE customer.first_name = 'Antonia' AND customer.last_name = 'Poltun' AND order_status.status_value = 'Returned';
SELECT method_name FROM shipping_method WHERE method_id = (   SELECT method_id   FROM cust_order   GROUP BY method_id   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT COUNT(DISTINCT oh.order_id) FROM order_history oh WHERE oh.status_value = 'Delivered' AND oh.status_date LIKE '2021%';
SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'J.K Rowling' ORDER BY b.publication_date LIMIT 1;
SELECT COUNT(b.book_id) FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'A.R. Braunmuller';
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Agatha Christie' ORDER BY b.publication_date LIMIT 1;
SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Danielle Steel';
SELECT COUNT(b.book_id) FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id JOIN publisher p ON b.publisher_id = p.publisher_id WHERE a.author_name = 'William Shakespeare' AND p.publisher_name = 'Penguin Classics';
SELECT publisher_name FROM publisher WHERE publisher_id = (   SELECT publisher_id   FROM book   GROUP BY publisher_id   ORDER BY COUNT(book_id) DESC   LIMIT 1 );
SELECT    SUM(s.cost) AS total_shipping_cost,   COUNT(CASE WHEN o.order_date LIKE '2022%' THEN 1 END) AS num_orders_2022 FROM    cust_order o   JOIN customer c ON o.customer_id = c.customer_id   JOIN shipping_method s ON o.shipping_method_id = s.method_id WHERE    c.first_name = 'Page' AND c.last_name = 'Holsey';
SELECT publisher_name FROM publisher WHERE publisher_id = 22;
SELECT COUNT(*) FROM book WHERE num_pages < 400 AND book_id IN (   SELECT ba.book_id   FROM book_author ba   JOIN author a ON ba.author_id = a.author_id   WHERE a.author_name = 'Al Gore' );
SELECT a.author_name, p.publisher_name FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id JOIN publisher p ON b.publisher_id = p.publisher_id WHERE b.publication_date LIKE '1997-07-10';
SELECT language_name FROM book JOIN book_language ON book.language_id = book_language.language_id WHERE isbn13 = '23755004321';
SELECT title FROM book WHERE book_id = (   SELECT book_id   FROM order_line   ORDER BY price DESC   LIMIT 1 );
SELECT SUM(ol.price) AS total_price FROM cust_order co JOIN customer c ON co.customer_id = c.customer_id JOIN order_line ol ON co.order_id = ol.order_id WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';
SELECT b.isbn13 FROM book b JOIN book_language bl ON b.language_id = bl.language_id WHERE bl.language_name = 'Spanish';
SELECT COUNT(b.book_id) FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id JOIN order_line ol ON b.book_id = ol.book_id WHERE p.publisher_name = 'Berkley Trade' AND ol.price < 1;
SELECT b.title FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE c.first_name = 'Zia' AND c.last_name = 'Roizin';
SELECT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN (   SELECT book_id   FROM book   ORDER BY num_pages DESC   LIMIT 1 ) b ON ba.book_id = b.book_id;
SELECT c.email FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'Switch on the Night';
SELECT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id JOIN publisher p ON b.publisher_id = p.publisher_id WHERE p.publisher_name = 'Abrams';
SELECT p.publisher_name FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id WHERE b.title = 'The Illuminati';
SELECT    (SUM(CASE WHEN b.publication_date LIKE '1992%' THEN 1 ELSE 0 END) / COUNT(b.publication_date)) * 100  AS    percentage FROM    book b    JOIN book_author ba ON b.book_id = ba.book_id    JOIN author a ON ba.author_id = a.author_id  WHERE    a.author_name = 'Abraham Lincoln';
SELECT p.publisher_name FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id WHERE b.publication_date LIKE '2004%' AND b.num_pages > (SELECT 0.7 * AVG(num_pages) FROM book) GROUP BY p.publisher_name;
SELECT email FROM customer WHERE first_name = 'Moss' AND last_name = 'Zarb';
SELECT street_name FROM address WHERE city = 'Dallas';
SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Orson Scott Card' AND b.publication_date LIKE '2001%';
SELECT COUNT(b.book_id) FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Orson Scott Card';
SELECT a.author_name, b.title FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id WHERE b.num_pages > 3000;
SELECT author_name FROM author JOIN book_author ON author.author_id = book_author.author_id JOIN book ON book_author.book_id = book.book_id WHERE book.title = 'The Prophet';
SELECT COUNT(b.book_id) FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id WHERE p.publisher_name = 'Ace Hardcover';
SELECT p.publisher_name FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id JOIN publisher p ON b.publisher_id = p.publisher_id WHERE a.author_name = 'Barry Eisler';
SELECT COUNT(b.book_id) FROM book b JOIN book_language bl ON b.language_id = bl.language_id WHERE bl.language_name = 'Japanese';
SELECT SUM(ol.price)  FROM order_line ol  JOIN book b ON ol.book_id = b.book_id  WHERE b.title = 'The Prophet';
SELECT COUNT(cust_order.order_id)  FROM cust_order  JOIN customer ON cust_order.customer_id = customer.customer_id  WHERE customer.first_name = 'Daisey' AND customer.last_name = 'Lamball' AND cust_order.order_date LIKE '2021%';
SELECT COUNT(DISTINCT c.customer_id) FROM customer c JOIN customer_address ca ON c.customer_id = ca.customer_id JOIN address a ON ca.address_id = a.address_id JOIN country co ON a.country_id = co.country_id WHERE co.country_name = 'Australia';
SELECT COUNT(DISTINCT oh.order_id) FROM order_history oh JOIN order_status os ON oh.status_id = os.status_id WHERE os.status_value = 'Delivered' AND oh.status_date LIKE '2019-12%';
SELECT c.first_name, c.last_name FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'Fantasmas';
SELECT    SUM(CASE WHEN sm.method_name = 'International' THEN 1 ELSE 0 END) / COUNT(co.order_id) * 100 AS international_shipping_percentage FROM    cust_order co   JOIN shipping_method sm ON co.shipping_method_id = sm.method_id WHERE    co.order_date LIKE '2020%';
SELECT * FROM author WHERE author_name LIKE 'George%';
SELECT EXTRACT(YEAR FROM o.order_date) AS year, COUNT(o.order_id) AS num_orders FROM cust_order o GROUP BY EXTRACT(YEAR FROM o.order_date) ORDER BY num_orders DESC LIMIT 1;
SELECT AVG(price)  FROM order_line;
SELECT title FROM book WHERE publication_date LIKE '1995%';
SELECT    SUBSTR(email, CHARINDEX('@', email) + 1, LENGTH(email) - CHARINDEX('@', email)) AS domain,   COUNT(*) AS count FROM    customer GROUP BY    SUBSTR(email, CHARINDEX('@', email) + 1, LENGTH(email) - CHARINDEX('@', email)) ORDER BY    count DESC LIMIT 1;
SELECT COUNT(*) FROM publisher WHERE publisher_name LIKE '%book%';
SELECT language_name FROM book_language WHERE language_id = (   SELECT language_id   FROM book   GROUP BY language_id   ORDER BY COUNT(book_id) ASC   LIMIT 1 );
SELECT o.order_date FROM cust_order o JOIN customer c ON o.customer_id = c.customer_id WHERE c.first_name = 'Adrian' AND c.last_name = 'Kunzelmann';
SELECT COUNT(a.address_id) FROM address a JOIN country c ON a.country_id = c.country_id WHERE c.country_name = 'Philippines';
SELECT author_name FROM author WHERE author_id = (   SELECT author_id   FROM book_author   GROUP BY author_id   ORDER BY COUNT(book_id) DESC   LIMIT 1 );
SELECT b.title FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id WHERE p.publisher_name = 'Harper Collins';
SELECT COUNT(DISTINCT oh.order_id) FROM order_history oh JOIN order_status os ON oh.status_id = os.status_id WHERE os.status_value = 'Returned' AND oh.status_date LIKE '%2020%';
SELECT method_name FROM shipping_method WHERE method_id IN (   SELECT method_id   FROM (     SELECT method_id, COUNT(*) as count     FROM cust_order     GROUP BY method_id     ORDER BY count     OFFSET 1 ROW     FETCH NEXT 1 ROW ONLY   ) AS subquery );
SELECT COUNT(*)  FROM customer_address  WHERE status_id IN (SELECT status_id                      FROM address_status                      WHERE address_status = 'Inactive');
SELECT b.title, COUNT(ol.order_id) AS num_orders FROM book b JOIN order_line ol ON b.book_id = ol.book_id GROUP BY b.title ORDER BY num_orders DESC LIMIT 1;
SELECT a.street_name, a.city FROM address a JOIN (   SELECT dest_address_id, COUNT(*) as cnt   FROM cust_order   GROUP BY dest_address_id   ORDER BY cnt DESC   LIMIT 1 ) b ON a.address_id = b.dest_address_id;
SELECT    strftime('%Y', oh.status_date) - strftime('%Y', co.order_date) AS "year",   strftime('%m', oh.status_date) - strftime('%m', co.order_date) AS "month",   strftime('%d', oh.status_date) - strftime('%d', oh.order_date) AS "day" FROM    cust_order co   JOIN order_history oh ON co.order_id = oh.order_id WHERE    co.order_id = '2398' ORDER BY    oh.status_date DESC LIMIT 1;
SELECT first_name, last_name FROM customer WHERE customer_id IN (   SELECT customer_id   FROM customer_address   GROUP BY customer_id   ORDER BY COUNT(address_id) DESC   LIMIT 1 )
SELECT    SUM(CASE WHEN sm.method_name = 'International' THEN ol.price ELSE 0 END) / SUM(ol.price) * 100 AS international_shipment_percentage FROM    cust_order co JOIN    shipping_method sm ON co.shipping_method_id = sm.method_id JOIN    order_line ol ON co.order_id = ol.order_id;
SELECT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id WHERE b.num_pages < (SELECT AVG(num_pages) FROM book) GROUP BY a.author_name;
SELECT MIN(price) FROM order_line WHERE price != 0;
SELECT COUNT(DISTINCT c.customer_id) FROM customer AS c JOIN customer_address AS ca ON c.customer_id = ca.customer_id JOIN address AS a ON ca.address_id = a.address_id WHERE a.city = 'Villeneuve-la-Garenne';
SELECT COUNT(*) FROM author WHERE author_name LIKE 'Adam';
SELECT COUNT(*) FROM customer WHERE email LIKE '%@yahoo.com';
SELECT T3.city FROM customer AS T1 JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id JOIN address AS T3 ON T2.address_id = T3.address_id JOIN country AS T4 ON T3.country_id = T4.country_id WHERE T4.country_name = 'United States of America';
SELECT COUNT(*) FROM cust_order co JOIN customer c ON co.customer_id = c.customer_id JOIN shipping_method sm ON co.shipping_method_id = sm.method_id WHERE c.first_name = 'Marcelia' AND c.last_name = 'Goering' AND substr(co.order_date, 1, 4) = '2021' AND sm.method_name = 'Priority Shipping';
SELECT b.title, MAX(ol.price) as max_price FROM book b JOIN order_line ol ON b.book_id = ol.book_id GROUP BY b.title ORDER BY max_price DESC LIMIT 1;
SELECT COUNT(DISTINCT c.customer_id) FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'Anleitung zum Zickigsein';
SELECT MAX(ol.price) FROM order_line ol JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'Bite Me If You Can (Argeneau #6)'
SELECT COUNT(DISTINCT co.customer_id) FROM cust_order co JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.publication_date = (     SELECT MIN(publication_date)     FROM book );
SELECT b.title FROM book b JOIN book_language bl ON b.language_id = bl.language_id JOIN publisher p ON b.publisher_id = p.publisher_id WHERE bl.language_name = 'Spanish' AND p.publisher_name = 'Alfaguara';
SELECT COUNT(DISTINCT c.customer_id) FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Stephen King' AND b.publication_date = (     SELECT MIN(publication_date)     FROM book     WHERE book_id IN (         SELECT book_id         FROM book_author         WHERE author_id = (             SELECT author_id             FROM author             WHERE author_name = 'Stephen King'         )     ) );
SELECT bl.language_name FROM book b JOIN book_language bl ON b.language_id = bl.language_id ORDER BY b.publication_date LIMIT 2;
SELECT publisher_name FROM publisher JOIN book ON publisher.publisher_id = book.publisher_id WHERE book.title = 'The Secret Garden';
SELECT COUNT(*) FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE author.author_name = 'J.K Rowling' AND publisher.publisher_name = 'Scholastic';
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id GROUP BY p.publisher_id, p.publisher_name HAVING COUNT(b.book_id) >= 30;
SELECT DISTINCT SUBSTR(street_number, -1) AS last_number, street_name FROM address;
SELECT a.street_number, a.street_name, a.city, c.country_name FROM address a JOIN country c ON a.country_id = c.country_id WHERE a.city = 'Lazaro Cardenas';
SELECT isbn13 FROM book WHERE num_pages > 135 AND num_pages < 140;
SELECT title FROM book ORDER BY publication_date LIMIT 6;
SELECT COUNT(*) FROM order_line ol JOIN cust_order co ON ol.order_id = co.order_id WHERE Substr(co.order_date, 1, 7) = '2020-12';
SELECT first_name, last_name FROM customer WHERE last_name LIKE 'K%';
SELECT DISTINCT city FROM address WHERE country_id IN (     SELECT country_id     FROM country     WHERE country_name = 'Costa Rica' ) AND address_id IN (     SELECT address_id     FROM customer_address     WHERE customer_id IN (         SELECT customer_id         FROM customer     ) );
SELECT a.street_number, a.street_name, a.city FROM address a JOIN customer_address ca ON a.address_id = ca.address_id JOIN address_status as ON as.status_id = ca.status_id WHERE as.address_status = 'Inactive';
SELECT c.first_name, c.last_name FROM customer c JOIN customer_address ca ON c.customer_id = ca.customer_id JOIN address a ON ca.address_id = a.address_id WHERE a.city = 'Baiyin';
SELECT DISTINCT c.email FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN shipping_method sm ON co.shipping_method_id = sm.method_id WHERE sm.method_name = 'Priority';
SELECT CO.order_date FROM cust_order CO JOIN customer_address CA ON CO.customer_id = CA.customer_id JOIN address A ON CA.address_id = A.address_id WHERE A.street_number = '460';
Error: 第 6037 个样本有 2 个SQL。
SELECT os.status_value FROM order_status os JOIN order_history oh ON os.status_id = oh.status_id JOIN cust_order co ON oh.order_id = co.order_id WHERE SUBSTR(co.order_date, 1, 10) = '2022-04-10' GROUP BY os.status_value;
SELECT MAX(ol.price) FROM order_line ol JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'The Prophet';
SELECT T1.order_date FROM cust_order AS T1 JOIN order_line AS T2 ON T1.order_id = T2.order_id WHERE T2.price = 16.54;
SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Peter H. Smith';
SELECT COUNT(*) FROM book WHERE num_pages < 300 AND publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'HarperCollins Publishers');
SELECT COUNT(*) FROM book JOIN book_language ON book.language_id = book_language.language_id WHERE book_language.language_name = 'Japanese';
SELECT AVG(b.num_pages) FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON a.author_id = ba.author_id WHERE a.author_name = 'Jennifer Crusie';
SELECT     (SUM(CASE WHEN sm.method_name = 'International' THEN 1 ELSE 0 END) * 100 / COUNT(co.order_id)) AS percentage FROM     cust_order co JOIN     shipping_method sm ON co.shipping_method_id = sm.method_id JOIN     customer c ON co.customer_id = c.customer_id WHERE     c.first_name = 'Kaleena';
SELECT c.first_name, c.last_name FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'The Sorrows of Young Werther';
SELECT b.title FROM book b JOIN order_line ol ON b.book_id = ol.book_id JOIN cust_order co ON ol.order_id = co.order_id JOIN customer c ON c.customer_id = co.customer_id WHERE c.first_name = 'Ursola' AND c.last_name = 'Purdy';
SELECT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id WHERE b.num_pages = (SELECT MAX(num_pages) FROM book);
SELECT COUNT(*) FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'Akira Watanabe';
SELECT a.street_number, a.street_name, a.city, c.country_name FROM address a JOIN country c ON a.country_id = c.country_id JOIN customer_address ca ON a.address_id = ca.address_id JOIN customer cu ON ca.customer_id = cu.customer_id WHERE cu.first_name = 'Ursola' AND cu.last_name = 'Purdy';
SELECT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id WHERE b.title = 'The Mystery in the Rocky Mountains';
SELECT publisher_name FROM publisher JOIN book ON publisher.publisher_id = book.publisher_id WHERE book.title = 'Girls'' Night In';
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id WHERE b.publication_date = (SELECT MIN(publication_date) FROM book);
SELECT     (SELECT SUM(cost) FROM shipping_method WHERE method_name = 'Express') -     (SELECT SUM(cost) FROM shipping_method WHERE method_name = 'Priority') AS cost_difference;
SELECT COUNT(*) FROM order_history JOIN order_status ON order_history.status_id = order_status.status_id WHERE order_status.status_value = 'Cancelled' AND SUBSTR(order_history.status_date, 1, 4) = '2022';
SELECT b.title FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id WHERE p.publisher_name = 'BBC Audiobooks';
SELECT COUNT(*) FROM book WHERE SUBSTR(publication_date, 1, 4) = '2017';
SELECT isbn13 FROM book WHERE title = 'The Mystery in the Rocky Mountains';
SELECT     (COUNT(CASE WHEN oh.status_value = 'Returned' THEN 1 END) * 100 / COUNT(oh.status_id)) AS return_percentage FROM     order_history oh WHERE     SUBSTR(oh.status_date, 1, 4) = '2022';
SELECT     (COUNT(CASE WHEN a.status_id = (SELECT status_id FROM address_status WHERE address_status = 'Inactive') THEN a.address_id END) * 100.0 / COUNT(a.address_id)) AS percentage_inactive FROM     address a JOIN     customer_address ca ON a.address_id = ca.address_id JOIN     address_status as1 ON ca.status_id = as1.status_id;
SELECT num_pages FROM book WHERE title = 'Seaward';
SELECT author_name FROM author JOIN book_author ON author.author_id = book_author.author_id JOIN book ON book.book_id = book_author.book_id WHERE title = 'First Things First';
SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Tom Clancy';
SELECT title FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'Hirohiko Araki' AND book.publication_date = '2006-06-06';
SELECT publisher_name FROM publisher JOIN book ON publisher.publisher_id = book.publisher_id WHERE book.title = 'Hitchhiker\'s Guide To The Galaxy: The Filming of the Douglas Adams classic'
SELECT title FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'ADV Manga');
SELECT c.first_name, c.last_name FROM customer c JOIN customer_address ca ON c.customer_id = ca.customer_id JOIN address a ON ca.address_id = a.address_id WHERE a.street_number = '55' AND a.street_name = 'Dorton Pass' AND a.city = 'Huangqiao';
SELECT c.country_name FROM country c JOIN address a ON c.country_id = a.country_id WHERE a.street_number = '9' AND a.street_name = 'Green Ridge Point' AND a.city = 'Arendal'
SELECT a.street_number, a.street_name, a.city FROM address a JOIN country c ON a.country_id = c.country_id WHERE c.country_name = 'Poland' LIMIT 10;
SELECT sm.method_name FROM cust_order co JOIN shipping_method sm ON co.shipping_method_id = sm.method_id JOIN customer c ON co.customer_id = c.customer_id WHERE c.first_name = 'Nicolette' AND c.last_name = 'Sadler' AND co.order_date = '2020-06-29 19:40:07';
SELECT title FROM book JOIN book_language ON book.language_id = book_language.language_id WHERE book_language.language_name = 'Arabic';
SELECT bl.language_name FROM book b JOIN book_language bl ON b.language_id = bl.language_id WHERE b.title = 'El plan infinito';
SELECT     (COUNT(CASE WHEN bau.author_id = au.author_id AND pu.publisher_name = 'Viz Media' THEN ba.book_id END) * 100.0 / COUNT(DISTINCT ba.book_id)) AS percentage FROM     book_author ba     INNER JOIN author au ON ba.author_id = au.author_id     INNER JOIN book b ON ba.book_id = b.book_id     INNER JOIN publisher pu ON b.publisher_id = pu.publisher_id WHERE     au.author_name = 'Hirohiko Araki';
SELECT AVG(b.num_pages) FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON a.author_id = ba.author_id WHERE a.author_name = 'Zilpha Keatley Snyder';
SELECT first_name, last_name FROM customer WHERE email = 'ckupis4@tamu.edu';
SELECT title FROM book WHERE num_pages = (SELECT MAX(num_pages) FROM book);
SELECT COUNT(*) FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'A.J. Ayer';
SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON a.author_id = ba.author_id WHERE a.author_name = 'A.J. Ayer';
SELECT b.publisher_id, p.publisher_name FROM book AS b JOIN publisher AS p ON b.publisher_id = p.publisher_id WHERE b.title = 'The Season: A Candid Look at Broadway';
SELECT COUNT(b.book_id) / (SELECT COUNT(*) FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Carole Marsh Mysteries')) AS average_english_books FROM book b JOIN book_language bl ON b.language_id = bl.language_id JOIN publisher p ON b.publisher_id = p.publisher_id WHERE bl.language_name = 'English' AND p.publisher_name = 'Carole Marsh Mysteries';
SELECT b.title FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id WHERE b.num_pages = (SELECT MAX(num_pages) FROM book WHERE SUBSTR(publication_date, 1, 4) BETWEEN '1990' AND '2000') AND p.publisher_name = 'Free Press' AND SUBSTR(b.publication_date, 1, 4) BETWEEN '1990' AND '2000';
SELECT ol.price FROM order_line ol JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'The Servant Leader' AND SUBSTR(b.publication_date, 1, 4) = '2003'
SELECT a.street_number, a.street_name, a.city FROM address AS a JOIN customer_address AS ca ON a.address_id = ca.address_id JOIN address_status AS as ON ca.status_id = as.status_id JOIN customer AS c ON ca.customer_id = c.customer_id WHERE c.first_name = 'Kandy' AND as.address_status = 1;
SELECT COUNT(*) FROM (     SELECT ol.book_id     FROM order_line ol     JOIN cust_order co ON ol.order_id = co.order_id     JOIN customer c ON co.customer_id = c.customer_id     WHERE c.first_name = 'Kandy' AND c.last_name = 'Adamec' ) as T;
SELECT COUNT(*) FROM order_history JOIN order_status ON order_history.status_id = order_status.status_id WHERE order_status.status_value = 'Returned' AND SUBSTR(order_history.status_date, 1, 4) = '2022';
SELECT T3.country_name FROM customer AS T1 JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id JOIN country AS T3 ON T2.country_id = T3.country_id WHERE T1.email = 'rturbitt2@geocities.jp'
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id GROUP BY p.publisher_name ORDER BY COUNT(b.book_id) DESC LIMIT 1;
SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON a.author_id = ba.author_id WHERE a.author_name = 'A.J. Ayer' ORDER BY b.publication_date ASC LIMIT 1;
SELECT     (COUNT(CASE WHEN ol.price > 10 THEN b.book_id END) * 100.0 / COUNT(b.book_id)) AS percentage FROM     book b JOIN     order_line ol ON b.book_id = ol.book_id JOIN     cust_order co ON co.order_id = ol.order_id JOIN     customer c ON c.customer_id = co.customer_id WHERE     c.first_name || ' ' || c.last_name = 'Ruthanne Vatini';
SELECT title FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'AK Press');
SELECT c.first_name, c.last_name FROM customer AS c JOIN cust_order AS co ON c.customer_id = co.customer_id JOIN order_line AS ol ON co.order_id = ol.order_id WHERE ol.price = (SELECT MIN(price) FROM order_line) LIMIT 1;
SELECT b.isbn13 FROM book b JOIN order_line ol ON b.book_id = ol.book_id JOIN cust_order co ON ol.order_id = co.order_id JOIN customer c ON co.customer_id = c.customer_id WHERE c.email = 'fsier3e@ihg.com';
SELECT DISTINCT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id JOIN order_line ol ON b.book_id = ol.book_id WHERE ol.price >= 19;
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id WHERE b.isbn13 = '76092025986';
SELECT COUNT(*) FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Birlinn') AND num_pages BETWEEN 600 AND 700 AND SUBSTR(publication_date, 1, 4) = '2008';
SELECT ol.price FROM order_line ol JOIN book b ON ol.book_id = b.book_id WHERE b.isbn13 = '9780763628321';
SELECT b.num_pages FROM book b JOIN order_line ol ON b.book_id = ol.book_id WHERE ol.order_id = 1167;
SELECT title FROM book WHERE language_id IN (     SELECT language_id     FROM book_language     WHERE language_name = 'British English' );
SELECT COUNT(*) FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Brava') AND SUBSTR(publication_date, 1, 4) = '2006';
SELECT b.isbn13, ol.price FROM book b JOIN order_line ol ON b.book_id = ol.book_id WHERE b.book_id = 7160;
SELECT b.title FROM book b JOIN order_line ol ON b.book_id = ol.book_id WHERE ol.order_id = 931;
SELECT bl.language_name FROM book b JOIN book_language bl ON b.language_id = bl.language_id WHERE b.title = 'Zorro';
SELECT DISTINCT c.email FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id WHERE ol.price BETWEEN 3 AND 5;
SELECT b.isbn13 FROM book b JOIN order_line ol ON b.book_id = ol.book_id WHERE ol.price = 7.5;
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON a.author_id = ba.author_id WHERE a.author_name = 'Alan Lee';
SELECT SUM(b.num_pages) FROM book b JOIN order_line ol ON b.book_id = ol.book_id JOIN cust_order co ON ol.order_id = co.order_id JOIN customer c ON co.customer_id = c.customer_id WHERE c.first_name = 'Mick' AND c.last_name = 'Sever';
SELECT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id WHERE b.publication_date = (SELECT MAX(publication_date) FROM book);
SELECT     (COUNT(CASE WHEN bl.language_name = 'English' THEN b.book_id END) * 100.0 / COUNT(b.book_id)) AS percentage FROM     book b JOIN     publisher p ON b.publisher_id = p.publisher_id JOIN     book_language bl ON b.language_id = bl.language_id WHERE     p.publisher_name = 'Ace Book';
SELECT     (SELECT COUNT(b.book_id) FROM book b JOIN order_line ol ON b.book_id = ol.book_id WHERE b.num_pages < 500 AND ol.price < 1) -     (SELECT COUNT(b.book_id) FROM book b JOIN order_line ol ON b.book_id = ol.book_id WHERE b.num_pages > 500 AND ol.price < 1)
SELECT bl.language_name, b.title FROM book b JOIN book_language bl ON b.language_id = bl.language_id JOIN order_line ol ON b.book_id = ol.book_id WHERE ol.price < (SELECT AVG(price) * 0.2 FROM order_line)
SELECT first_name, last_name FROM employee WHERE title = 'sanitarian' AND supervisor = 'Darlisha Jacobs';
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE e.title = 'Sanitarian' AND i.inspection_date LIKE '2010-05%';
SELECT COUNT(*) FROM inspection JOIN employee ON inspection.employee_id = employee.employee_id WHERE employee.first_name = 'Joshua' AND employee.last_name = 'Rosa' AND inspection.inspection_date LIKE '2010%';
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN employee em ON i.employee_id = em.employee_id WHERE em.first_name = 'Joshua' AND em.last_name = 'Rosa';
SELECT COUNT(DISTINCT e.license_no) FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_date LIKE '2010%' AND (e.facility_type = 'Restaurant' OR e.facility_type = 'Cafeteria');
SELECT e.latitude, e.longitude FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_date = '2010-05-11';
SELECT COUNT(DISTINCT e.license_no) FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_date LIKE '2010%' AND e.ward = 42;
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE est.dba_name = 'Burbank';
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results = 'Fail' AND i.inspection_date LIKE '2010%';
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE est.dba_name = 'AMUNDSEN HIGH SCHOOL' AND i.inspection_date = '2010-05-11';
SELECT COUNT(*) FROM inspection WHERE results = 'Pass' AND employee_id IN (     SELECT employee_id     FROM employee     WHERE first_name = 'Joshua' AND last_name = 'Rosa' AND title = 'sanitarian' );
SELECT i.inspection_date FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.dba_name = 'Azha Restaurant Inc.' AND i.followup_to = (SELECT inspection_id FROM inspection WHERE inspection_date = '2010-01-21' AND license_no = (SELECT license_no FROM establishment WHERE dba_name = 'Azha Restaurant Inc.'))
SELECT COUNT(DISTINCT e.license_no) FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN violation v ON i.inspection_id = v.inspection_id WHERE i.inspection_date LIKE '2010%' AND e.risk_level = 3;
SELECT COUNT(i.inspection_id) / COUNT(DISTINCT e.employee_id) AS average_inspections FROM inspection i JOIN employee e ON i.employee_id = e.employee_id WHERE i.inspection_date LIKE '2010%' AND e.salary > 70000;
SELECT point_level FROM inspection_point WHERE Description = 'Refrigeration and metal stem thermometers provided and conspicuous';
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id = 48224;
SELECT COUNT(*) FROM inspection JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.dba_name = 'All Style Buffet' AND establishment.facility_type = 'Restaurant';
SELECT MIN(i.inspection_date) FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.aka_name = 'WING HUNG CHOP SUEY RESTAURANT';
SELECT COUNT(*) FROM establishment JOIN inspection ON establishment.license_no = inspection.license_no WHERE establishment.facility_type = 'Restaurant' AND inspection.inspection_date = '2015-05-08';
SELECT COUNT(*) FROM violation JOIN inspection_point ON violation.point_id = inspection_point.point_id WHERE inspection_point.category = 'Food Maintenance' AND violation.inspection_id = 1454071;
SELECT COUNT(*) FROM violation JOIN inspection ON violation.inspection_id = inspection.inspection_id JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.dba_name = 'ROYAL THAI CUISINE' AND inspection.inspection_date = '2015-05-08';
SELECT COUNT(*) FROM inspection WHERE license_no IN (     SELECT license_no     FROM establishment     WHERE address = '3635 W DIVERSEY AVE' AND facility_type = 'Grocery Store' );
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id GROUP BY e.employee_id, e.first_name, e.last_name ORDER BY COUNT(i.inspection_id) DESC LIMIT 1;
SELECT COUNT(*) FROM inspection JOIN employee ON inspection.employee_id = employee.employee_id WHERE employee.first_name = 'Lisa' AND employee.last_name = 'Tillman' AND inspection.results = 'Out of Business';
SELECT COUNT(*) FROM inspection JOIN employee ON inspection.employee_id = employee.employee_id WHERE employee.title = 'Sanitarian' AND employee.address = '5000 N Wolcott Ave' AND inspection.inspection_date BETWEEN '2011-05-01' AND '2011-05-31';
SELECT e.phone FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id = 634597 AND e.title = 'Sanitarian';
SELECT e.salary FROM employee e JOIN inspection i ON e.employee_id = i.employee_id GROUP BY e.employee_id, e.salary ORDER BY COUNT(i.inspection_id) DESC LIMIT 1;
SELECT COUNT(i.inspection_id) / COUNT(DISTINCT e.license_no) AS average_inspections FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.risk_level = '3' AND e.facility_type = 'TAVERN' GROUP BY e.risk_level, e.facility_type;
Error: 第 6139 个样本有 2 个SQL。
SELECT COUNT(*) FROM employee WHERE title = 'Sanitarian' AND city = 'Chicago' AND zip = 60617;
SELECT dba_name FROM establishment WHERE address = '2903 W IRVING PARK RD ';
SELECT first_name, last_name FROM employee WHERE salary = (SELECT MIN(salary) FROM employee);
SELECT COUNT(*) FROM establishment WHERE dba_name = 'HOMEMADE PIZZA' AND risk_level = 2;
SELECT COUNT(*) FROM inspection JOIN violation ON inspection.inspection_id = violation.inspection_id WHERE violation.point_id = 3 AND violation.fine = 500;
SELECT COUNT(*) FROM employee WHERE supervisor = 'Gregory Cardenas';
SELECT MIN(i.inspection_date) FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.dba_name = 'RENALDI''S PIZZA';
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_date LIKE '2016-03%' GROUP BY e.employee_id ORDER BY COUNT(i.inspection_id) DESC LIMIT 1;
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results = 'Pass w/ Conditions' AND i.inspection_date LIKE '2012-05%';
SELECT COUNT(*) FROM inspection WHERE inspection_type = 'Short Form Complaint' AND results = 'Pass' AND employee_id IN (SELECT employee_id FROM employee WHERE first_name = 'David' AND last_name = 'Hodges');
SELECT COUNT(DISTINCT e.license_no) FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.ward = 42 AND i.results = 'Fail' AND i.inspection_date BETWEEN '2010-01-01' AND '2015-12-31' GROUP BY e.license_no HAVING COUNT(i.inspection_id) >= 5;
SELECT e.salary FROM employee e JOIN inspection i ON e.employee_id = i.employee_id GROUP BY e.employee_id, e.salary ORDER BY COUNT(i.inspection_id) DESC LIMIT 1;
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN violation v ON i.inspection_id = v.inspection_id WHERE i.inspection_date LIKE '2014%' GROUP BY e.dba_name ORDER BY SUM(v.fine) DESC LIMIT 1;
SELECT e.latitude, e.longitude FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results = 'Fail' GROUP BY e.license_no ORDER BY COUNT(*) DESC LIMIT 1;
SELECT v.inspector_comment FROM violation v JOIN inspection i ON v.inspection_id = i.inspection_id JOIN establishment e ON i.license_no = e.license_no WHERE e.dba_name = 'TAQUERIA LA FIESTA' AND i.inspection_date = '2010-01-25';
SELECT SUM(violation.fine) AS total_fine FROM violation JOIN inspection ON violation.inspection_id = inspection.inspection_id JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.dba_name = 'RON OF JAPAN INC' AND inspection.inspection_date LIKE '2014-02%';
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE est.dba_name = 'TAQUERIA LA PAZ';
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN violation v ON i.inspection_id = v.inspection_id GROUP BY e.employee_id, e.first_name, e.last_name ORDER BY SUM(v.fine) DESC LIMIT 1;
Error: 第 6158 个样本有 2 个SQL。
WITH inspections_count AS (   SELECT     e.dba_name,     COUNT(i.inspection_id) as total_inspections,     SUM(CASE WHEN i.results = 'Pass' THEN 1 ELSE 0 END) as pass_inspections,     SUM(CASE WHEN i.results = 'Fail' THEN 1 ELSE 0 END) as fail_inspections   FROM     food_inspection_2.inspection i   JOIN     food_inspection_2.establishment e ON i.license_no = e.license_no   GROUP BY     e.dba_name ), max_inspections AS (   SELECT     MAX(total_inspections) as max_inspections   FROM     inspections_count ) SELECT   ic.dba_name,   ic.total_inspections,   (ic.pass_inspections * 100.0 / ic.total_inspections) as pass_percentage,   (ic.fail_inspections * 100.0 / ic.total_inspections) as fail_percentage FROM   inspections_count ic JOIN   max_inspections mi WHERE   ic.total_inspections = mi.max_inspections;
SELECT e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE est.address = '7211 S Hermitage Ave' AND est.city = 'Chicago' AND est.state = 'IL';
SELECT e.first_name, e.last_name, est.dba_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE i.inspection_id = 44256 AND i.inspection_date = '2010-05-05';
SELECT e.address FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.facility_type = 'School' AND i.results = 'Pass' AND i.inspection_date LIKE '2010-03%';
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_type = 'Canvass' AND i.inspection_date = '2010-03-09';
SELECT i.inspection_id FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.dba_name = 'PIZZA RUSTICA, INC.';
SELECT COUNT(*) FROM (   SELECT i.inspection_id   FROM inspection i   JOIN establishment e ON i.license_no = e.license_no   WHERE e.facility_type = 'Restaurant'   AND e.risk_level = (SELECT MAX(risk_level) FROM establishment WHERE facility_type = 'Restaurant')   AND i.results = 'Pass' ) as subquery;
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN violation v ON i.inspection_id = v.inspection_id JOIN inspection_point ip ON v.point_id = ip.point_id WHERE ip.category = 'Display of Inspection Report Summary';
SELECT T1.title FROM employee AS T1 JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 60332;
SELECT COUNT(*) FROM inspection JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.facility_type = 'Restaurant' AND establishment.risk_level = (SELECT MIN(risk_level) FROM establishment WHERE facility_type = 'Restaurant') AND inspection.results = 'Fail' AND inspection.inspection_type = 'Complaint';
SELECT e.state, e.city, e.address, v.fine FROM violation v JOIN inspection i ON v.inspection_id = i.inspection_id JOIN establishment e ON i.license_no = e.license_no WHERE v.inspection_id = 48216;
SELECT inspection_id FROM violation WHERE point_id IN (SELECT point_id FROM inspection_point WHERE point_level = 'Critical') AND fine = 500 AND inspector_comment = 'CDI ON 5-17-10';
SELECT ip.Description, v.inspector_comment FROM inspection AS i JOIN violation AS v ON i.inspection_id = v.inspection_id JOIN inspection_point AS ip ON v.point_id = ip.point_id WHERE i.inspection_id = 164795;
SELECT violation.inspector_comment, inspection_point.code FROM violation JOIN inspection_point ON violation.point_id = inspection_point.point_id WHERE violation.inspection_id = 54216 AND violation.point_id = 34;
SELECT     (COUNT(CASE WHEN e.risk_level = (         SELECT MAX(risk_level) FROM establishment     ) THEN e.license_no END) / COUNT(e.license_no) * 100) AS percentage FROM     inspection i JOIN     establishment e ON i.license_no = e.license_no WHERE     i.results = 'Fail';
SELECT     (SELECT COUNT(DISTINCT e.employee_id)      FROM employee e      JOIN inspection i ON e.employee_id = i.employee_id      JOIN violation v ON i.inspection_id = v.inspection_id      WHERE e.salary BETWEEN 75000 AND 85000 AND v.fine = 100) -     (SELECT COUNT(DISTINCT e.employee_id)      FROM employee e      JOIN inspection i ON e.employee_id = i.employee_id      JOIN violation v ON i.inspection_id = v.inspection_id      WHERE e.salary BETWEEN 75000 AND 85000 AND v.fine = 500) AS difference
SELECT COUNT(*) FROM inspection WHERE inspection_date LIKE '2011-01%';
SELECT COUNT(*) FROM inspection WHERE results = 'Fail' AND inspection_date LIKE '2014%';
SELECT (COUNT(v.inspection_id) * 100.0 / (SELECT COUNT(*) FROM inspection)) AS percentage FROM violation v JOIN inspection_point ip ON v.point_id = ip.point_id WHERE ip.fine = 100;
SELECT point_id, fine FROM violation JOIN inspection ON violation.inspection_id = inspection.inspection_id WHERE inspection.inspection_date = '2010-08-07';
SELECT COUNT(*) FROM inspection JOIN inspection_point ON inspection.inspection_id = inspection_point.inspection_id WHERE inspection_point.category = 'Personnel';
SELECT e.dba_name, i.results FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.city = 'BURNHAM';
SELECT     (SELECT COUNT(*)      FROM inspection i      JOIN inspection_point ip ON i.inspection_id = ip.point_id      WHERE ip.category = 'Toxic Items') AS Toxic_Items_Count,     (SELECT COUNT(*)      FROM inspection i      JOIN inspection_point ip ON i.inspection_id = ip.point_id      WHERE ip.category = 'No Smoking Regulations') AS No_Smoking_Regulations_Count;
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN employee em ON i.employee_id = em.employee_id WHERE em.first_name = 'Sarah' AND em.last_name = 'Lindsey' AND i.inspection_date = '2012-11-20';
SELECT ip.category, v.fine FROM violation v JOIN inspection i ON v.inspection_id = i.inspection_id JOIN inspection_point ip ON v.point_id = ip.point_id JOIN employee e ON i.employee_id = e.employee_id WHERE e.first_name = 'Lisa' AND e.last_name = 'Tillman' AND i.inspection_date LIKE '2014-01%';
SELECT COUNT(*) FROM inspection JOIN inspection_point ON inspection.inspection_id = inspection_point.inspection_id WHERE inspection_point.category = 'Display of Inspection Report Summary';
SELECT inspection_type, results FROM inspection WHERE license_no IN (     SELECT license_no     FROM establishment     WHERE dba_name = 'Riverwalk café' )
SELECT e.first_name, e.last_name, i.results FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE est.dba_name = 'JEAN SAMOCKI';
SELECT SUM(violation.fine) FROM violation JOIN inspection ON violation.inspection_id = inspection.inspection_id JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.dba_name = 'HACIENDA LOS TORRES' AND establishment.ward = 36 AND inspection.results = 'Fail';
SELECT SUM(violation.fine) FROM violation JOIN inspection_point ON violation.point_id = inspection_point.point_id WHERE inspection_point.category = 'Food Equipment and Utensil';
SELECT e.dba_name, e.latitude, e.longitude FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_date = '2013-07-29' AND i.results = 'Fail';
SELECT     (COUNT(CASE WHEN i.results LIKE '%Pass%' THEN i.inspection_id END) * 100.0 / COUNT(i.inspection_id)) AS pass_percentage,     COUNT(DISTINCT CASE WHEN i.results LIKE '%Pass%' AND e.city = 'CHICAGO' THEN e.license_no END) AS chicago_businesses FROM     inspection i JOIN     establishment e ON i.license_no = e.license_no;
SELECT COUNT(T2.inspection_id) / 8 AS avg_inspections_per_year FROM employee AS T1 JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Jessica' AND T1.last_name = 'Anthony' AND T2.inspection_date >= '2010-01-01' AND T2.inspection_date <= '2017-12-31'
SELECT first_name FROM employee WHERE employee_id = (SELECT employee_id FROM inspection WHERE inspection_id = 48225);
SELECT e.address FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id = 52238;
SELECT e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id = 52238;
SELECT results FROM inspection JOIN employee ON inspection.employee_id = employee.employee_id WHERE first_name = 'Thomas' AND last_name = 'Langley';
SELECT e.address FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_date = '2010-11-05';
SELECT e.phone FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_type = 'Canvass';
SELECT e.title FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id = 52269;
SELECT i.results FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.dba_name = 'XANDO COFFEE & BAR / COSI SANDWICH BAR';
SELECT i.inspection_type FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.dba_name = 'JOHN SCHALLER';
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_type = 'License';
SELECT COUNT(*) FROM inspection JOIN establishment ON inspection.license_no = establishment.license_no WHERE inspection_date LIKE '2010%' AND establishment.risk_level = 3;
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE (i.results = 'Pass' OR i.results = 'Pass w/Conditions');
SELECT SUM(e.salary) FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id BETWEEN 52270 AND 52272;
SELECT AVG(employee.salary) FROM employee JOIN inspection ON employee.employee_id = inspection.employee_id WHERE inspection.inspection_type = 'License Re-Inspection';
SELECT e.results, e.zip FROM establishment AS e JOIN inspection AS i ON e.license_no = i.license_no WHERE e.license_no = 1222441;
SELECT MIN(i.inspection_date) FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.dba_name = 'JOHN SCHALLER' AND i.inspection_date LIKE '2010%';
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.license_no = 1334073;
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN employee em ON i.employee_id = em.employee_id WHERE em.first_name = 'Joshua' AND em.last_name = 'Rosa';
SELECT COUNT(*) FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE e.salary > 70000 AND i.results = 'Fail';
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results = 'Pass' AND i.inspection_date LIKE '2010%';
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN employee em ON i.employee_id = em.employee_id WHERE em.first_name = 'Joshua' AND em.last_name = 'Rosa';
SELECT COUNT(*) FROM inspection JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.facility_type = 'Tavern' AND inspection.results = 'Fail' AND inspection.inspection_date LIKE '2010-07%';
SELECT e.risk_level FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN employee em ON i.employee_id = em.employee_id WHERE em.first_name = 'Bob' AND em.last_name = 'Benson';
SELECT e.dba_name, i.results FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN employee em ON i.employee_id = em.employee_id WHERE em.first_name = 'Bob' AND em.last_name = 'Benson' AND i.inspection_date LIKE '2010%';
SELECT T1.title FROM employee AS T1 JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.license_no = 1576687;
SELECT COUNT(*) FROM inspection_point WHERE point_level = 'Serious ' AND fine = 0;
SELECT (SUM(CASE WHEN v.fine = 250 THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT e.license_no)) AS percentage FROM establishment e JOIN violation v ON e.license_no = (     SELECT i.license_no     FROM inspection i     WHERE i.inspection_id = v.inspection_id ) WHERE e.facility_type = 'Restaurant';
SELECT (COUNT(CASE WHEN e.risk_level = 1 THEN e.license_no END) * 100.0 / COUNT(e.license_no)) AS percentage FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results = 'Pass';
SELECT address, city, state FROM employee WHERE first_name = 'Standard' AND last_name = 'Murray';
SELECT facility_type FROM establishment WHERE dba_name = 'Kinetic Playground';
SELECT salary FROM employee WHERE first_name = 'Jessica' AND last_name = 'Anthony';
SELECT dba_name FROM establishment WHERE latitude = 41.9532864854 AND longitude = -87.7673790701422 AND facility_type = 'Restaurant';
SELECT COUNT(*) FROM employee WHERE title = 'Supervisor';
SELECT address FROM establishment WHERE dba_name = 'OLD TIMERS REST & LOUNGE' AND facility_type = 'Restaurant' AND city = 'CHICAGO';
SELECT COUNT(*) FROM employee WHERE city = 'Hoffman Estates' AND state = 'IL';
SELECT COUNT(*) FROM establishment WHERE risk_level = (SELECT MAX(risk_level) FROM establishment);
SELECT first_name, last_name FROM employee WHERE salary = 82700;
SELECT e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id = 52256;
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN violation v ON i.inspection_id = v.inspection_id WHERE e.facility_type = 'Tavern' AND v.fine = 100;
SELECT T1.point_level FROM inspection_point AS T1 JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.fine = 0;
SELECT establishment.facility_type, establishment.license_no FROM establishment JOIN inspection ON establishment.license_no = inspection.license_no WHERE inspection.results = 'Fail' AND establishment.risk_level = (     SELECT MIN(risk_level) FROM establishment )
SELECT i.results FROM inspection i JOIN employee e ON i.employee_id = e.employee_id WHERE i.inspection_date = '2010-02-24' AND e.first_name = 'Arnold' AND e.last_name = 'Holder';
SELECT COUNT(*) FROM inspection JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.facility_type = 'Restaurant' AND inspection.results = 'Fail' AND inspection.inspection_date LIKE '2010-04%';
SELECT inspection_id FROM inspection WHERE employee_id = (     SELECT employee_id     FROM employee     WHERE first_name = 'Rosemary' AND last_name = 'Kennedy' );
SELECT i.inspection_type FROM inspection i JOIN employee e ON i.employee_id = e.employee_id WHERE e.first_name = 'Lisa' AND e.last_name = 'Tillman' AND i.inspection_date = '2010-07-07';
SELECT inspection_id FROM violation WHERE inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA' AND point_id IN (SELECT point_id FROM inspection_point WHERE code = '7-38-030, 015, 010 (A), 005 (A)')
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results = 'Fail' AND e.risk_level = (     SELECT MAX(risk_level)     FROM establishment )
SELECT i.inspection_id FROM inspection i JOIN employee e ON i.employee_id = e.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE e.first_name = 'David' AND e.last_name = 'Hodges' AND est.dba_name = 'KAMAYAN EXPRESS';
SELECT MIN(T1.salary) AS min_salary, MAX(T1.salary) AS max_salary FROM employee AS T1 JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 58424;
SELECT inspection_id FROM violation WHERE fine IN (     SELECT fine     FROM inspection_point     WHERE category = 'Personnel' ) AND inspector_comment = 'A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served. FOUND NO CITY OF CHICAGO SANITATION CERTIFICATE POSTED OR VALID DOCUMENTATION DURING THIS INSPECTION.'
SELECT COUNT(*) FROM establishment JOIN inspection ON establishment.license_no = inspection.license_no JOIN violation ON inspection.inspection_id = violation.inspection_id WHERE establishment.facility_type = 'Grocery Store' AND violation.fine = 250;
SELECT ip.category FROM inspection_point AS ip JOIN violation AS v ON ip.point_id = v.point_id JOIN inspection AS i ON v.inspection_id = i.inspection_id JOIN establishment AS e ON i.license_no = e.license_no WHERE e.dba_name = 'J & J FOOD';
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.facility_type = 'Tavern' AND i.results = 'Fail' AND i.inspection_date LIKE '2010-01%';
SELECT COUNT(*) FROM inspection i JOIN inspection_point ip ON i.inspection_id = ip.inspection_id WHERE ip.point_level = 'Serious' AND ip.fine = 0;
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN inspection_point ip ON i.inspection_id = ip.point_id WHERE ip.category = 'No Smoking Regulations';
SELECT     (SELECT COUNT(i.inspection_id)      FROM inspection i      JOIN establishment e ON i.license_no = e.license_no      WHERE i.inspection_type = 'Canvass'      AND e.facility_type = 'Restaurant'      AND i.results = 'Pass') -     (SELECT COUNT(i.inspection_id)      FROM inspection i      JOIN establishment e ON i.license_no = e.license_no      WHERE i.inspection_type = 'Canvass'      AND e.facility_type = 'Restaurant'      AND i.results = 'Fail') AS difference;
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.results = 'Fail' AND i.inspection_date LIKE '2010-02%' AND e.salary > (SELECT AVG(salary) * 0.7 FROM employee);
SELECT     (COUNT(CASE WHEN facility_type = 'Restaurant' THEN license_no END) * 100.0 / COUNT(license_no)) AS Percentage FROM     establishment JOIN     violation ON establishment.license_no = violation.license_no WHERE     fine = 500;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE YEAR(h.date) = 2018 GROUP BY c.name ORDER BY MAX(h.market_cap) DESC LIMIT 1;
SELECT h.volume_24h FROM historical h JOIN coins c ON h.coin_id = c.id WHERE c.name = 'Argentum' AND h.date = '2016-10-11';
SELECT     h.date,     h.price FROM     historical h JOIN     coins c ON h.coin_id = c.id WHERE     c.name = 'Zetacoin' AND     h.date BETWEEN '2013-11-01' AND '2013-11-07' UNION ALL SELECT     AVG(price) as average_price FROM     historical h JOIN     coins c ON h.coin_id = c.id WHERE     c.name = 'Zetacoin' AND     h.date BETWEEN '2013-11-01' AND '2013-11-07';
SELECT time_high, time_low FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'WRAP') AND month(date) = 8 AND year(date) = 2016 AND (price = (SELECT MAX(price) FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'WRAP') AND month(date) = 8 AND year(date) = 2016) OR price = (SELECT MIN(price) FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'WRAP') AND month(date) = 8 AND year(date) = 2016));
SELECT historical.date FROM historical JOIN coins ON historical.coin_id = coins.id WHERE coins.name = 'DigixDAO' ORDER BY historical.price DESC LIMIT 1;
SELECT coins.name, historical.date, historical.price FROM coins JOIN historical ON coins.id = historical.coin_id WHERE historical.percent_change_24h = (SELECT MAX(percent_change_24h) FROM historical);
SELECT AVG(circulating_supply) FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Frozen') AND date BETWEEN '2014-01-01' AND '2014-12-31' GROUP BY MONTH(date);
SELECT c.name, MAX(h.date) as last_transaction_date FROM coins c JOIN historical h ON c.id = h.coin_id WHERE c.status = 'inactive' GROUP BY c.name;
SELECT price FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin') AND YEAR(date) = 2016;
SELECT historical.date, historical.price FROM historical JOIN coins ON historical.coin_id = coins.id WHERE coins.name = 'Bitcoin' ORDER BY historical.price LIMIT 1;
SELECT c.status FROM coins c JOIN historical h ON c.id = h.coin_id GROUP BY c.id, c.status HAVING AVG(h.price) > 1000;
SELECT coins.name, historical.date FROM historical JOIN coins ON historical.coin_id = coins.id WHERE historical.percent_change_1h = (     SELECT MIN(percent_change_1h) FROM historical );
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE c.category = 'token' GROUP BY c.name ORDER BY MAX(h.high - h.low) DESC LIMIT 1;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2013-06-22' AND h.percent_change_24h > (SELECT AVG(percent_change_24h) FROM historical WHERE date = '2013-06-22');
SELECT coins.name FROM coins JOIN historical ON coins.id = historical.coin_id WHERE historical.date = '2013-04-28' AND historical.cmc_rank = 1;
SELECT price FROM historical JOIN coins ON historical.coin_id = coins.id WHERE coins.symbol = 'BTC' AND historical.date = '2013-04-28';
SELECT c.name FROM coins c LEFT JOIN historical h ON c.id = h.coin_id WHERE h.date = '2013-05-03' AND h.open IS NULL;
SELECT close FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin') AND date = '2013-04-29';
SELECT time_high FROM historical WHERE date = '2013-04-29' AND coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin') ORDER BY price DESC LIMIT 1;
SELECT (high - low) AS max_profit FROM historical WHERE date = '2013-04-28' AND coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin')
SELECT (h.max_supply - h.total_supply) AS bitcoins_burned FROM historical h JOIN coins c ON h.coin_id = c.id WHERE c.symbol = 'BTC' AND h.date = '2013-04-28'
SELECT coins.name FROM coins JOIN historical ON coins.id = historical.coin_id WHERE historical.date = '2016-01-08' ORDER BY historical.volume_24h DESC LIMIT 1;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2013-04-28' AND h.total_supply > 10000000;
SELECT     CASE         WHEN percent_change_7d > 0 THEN 'Increased'         WHEN percent_change_7d < 0 THEN 'Decreased'     END AS price_trend FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin') AND date = '2013-05-05';
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2013-04-28' AND c.name IN ('Bitcoin', 'Litecoin') ORDER BY h.circulating_supply DESC LIMIT 1;
SELECT price FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin') AND date = '2013-04-28';
SELECT AVG(price) FROM historical JOIN coins ON historical.coin_id = coins.id WHERE coins.name = 'Bitcoin' AND YEAR(historical.date) = 2013;
SELECT ((SELECT SUM(max_supply) FROM historical WHERE coin_id = (SELECT id FROM coins WHERE symbol = 'BTC') AND date < '2018-04-28') - (SELECT SUM(total_supply) FROM historical WHERE coin_id = (SELECT id FROM coins WHERE symbol = 'BTC') AND date < '2018-04-28')) / (SELECT SUM(total_supply) FROM historical WHERE coin_id = (SELECT id FROM coins WHERE symbol = 'BTC') AND date < '2018-04-28') * 100 AS Percentage_Burned;
SELECT name FROM coins WHERE status = 'extinct';
SELECT description FROM coins WHERE name = 'BitBar';
Error: 第 6280 个样本有 2 个SQL。
SELECT name, symbol FROM coins WHERE date_added LIKE '2013-06-14%';
SELECT name FROM coins WHERE status = 'untracked' AND YEAR(date_added) = 2014;
SELECT name FROM coins WHERE LENGTH(tag_names) - LENGTH(REPLACE(tag_names,',','')) = 2;
SELECT name FROM coins WHERE id = (SELECT coin_id FROM historical ORDER BY price DESC LIMIT 1);
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2013-04-29' AND h.cmc_rank = 1;
SELECT historical.date, MIN(historical.low) as lowest_price FROM historical JOIN coins ON historical.coin_id = coins.id WHERE coins.name = 'Bitcoin' GROUP BY historical.date ORDER BY lowest_price ASC LIMIT 1;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = (SELECT MAX(date) FROM historical) ORDER BY h.volume_24h DESC LIMIT 1;
SELECT c.name FROM coins c LEFT JOIN historical h ON c.id = h.coin_id WHERE h.open IS NULL AND YEAR(h.date) = 2013 AND MONTH(h.date) = 5;
Error: 第 6289 个样本有 2 个SQL。
SELECT date FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Peercoin') AND cmc_rank = 5;
SELECT date FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Devcoin') ORDER BY market_cap DESC LIMIT 1;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2014-01-01' AND h.cmc_rank <= 5;
SELECT date FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Lebowskis') AND open IS NULL;
SELECT date FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Terracoin') ORDER BY price DESC LIMIT 1;
SELECT COUNT(*) FROM historical JOIN coins ON historical.coin_id = coins.id WHERE coins.name = 'Bytecoin' AND YEAR(historical.date) = 2013 AND MONTH(historical.date) = 6;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2013-04-28' AND h.price > (SELECT AVG(price) FROM historical WHERE date = '2013-04-28')
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2013-05-29' AND h.percent_change_1h > 0;
SELECT COUNT(*) FROM Employees WHERE TitleOfCourtesy = 'Dr.';
SELECT E.FirstName, E.LastName FROM Employees E WHERE E.EmployeeID = (     SELECT ReportsTo     FROM Employees     WHERE FirstName = 'Nancy' AND LastName = 'Davolio' );
SELECT HomePhone FROM Employees WHERE FirstName = 'Nancy' AND LastName = 'Davolio';
SELECT COUNT(*) FROM Employees WHERE ReportsTo = (SELECT EmployeeID FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew');
SELECT FirstName, LastName FROM Employees WHERE EmployeeID = (SELECT EmployeeID FROM Employees WHERE Salary = (SELECT MAX(Salary) FROM Employees));
SELECT (SELECT Salary FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew') -        (SELECT Salary FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy') AS SalaryDifference;
SELECT COUNT(*) FROM Employees WHERE Title = 'Sales Representative' AND Country = 'UK';
SELECT E.FirstName, E.LastName FROM Employees E JOIN Territories T ON E.EmployeeID = T.EmployeeID WHERE T.TerritoryDescription = 'Hollis';
SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio'
SELECT T3.TerritoryDescription FROM Employees AS T1 JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio';
SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.City = 'London';
SELECT DISTINCT t.TerritoryDescription FROM Territories t JOIN Employees e ON t.EmployeeID = e.EmployeeID WHERE e.ReportsTo = (     SELECT EmployeeID     FROM Employees     WHERE FirstName = 'Andrew' AND LastName = 'Fuller' );
Error: 第 6310 个样本有 2 个SQL。
SELECT COUNT(T1.TerritoryID) FROM Territories T1 JOIN Region T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern';
SELECT t.TerritoryDescription FROM Territories t JOIN Region r ON t.RegionID = r.RegionID WHERE r.RegionDescription = 'Eastern';
Error: 第 6313 个样本有 2 个SQL。
SELECT E.HomePhone FROM Employees E JOIN EmployeeTerritories ET ON E.EmployeeID = ET.EmployeeID JOIN Territories T ON ET.TerritoryID = T.TerritoryID JOIN Region R ON T.RegionID = R.RegionID WHERE R.RegionDescription = 'Eastern'
SELECT     (SELECT COUNT(*) FROM Territories WHERE RegionDescription = 'Eastern') -     (SELECT COUNT(*) FROM Territories WHERE RegionDescription = 'Southern') AS Difference;
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE od.OrderID = 10248;
SELECT od.Quantity FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Ikura' AND od.OrderID = 10273;
SELECT od.Quantity * p.Price AS TotalPrice FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Ikura' AND od.OrderID = 10273;
SELECT SUM(T2.UnitsInStock + T2.UnitsOnOrder) FROM `OrderDetails` AS T1 JOIN `Products` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.OrderID = 10248 GROUP BY T1.ProductID ORDER BY T1.Quantity DESC LIMIT 1;
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE od.OrderID = 10248 ORDER BY p.ReorderLevel DESC LIMIT 1;
SELECT COUNT(*) FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Tofu';
SELECT od.OrderID FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1;
SELECT COUNT(*) FROM `OrderDetails` JOIN `Products` ON `OrderDetails`.`ProductID` = `Products`.`ProductID` WHERE `Products`.`ProductName` = 'Ikura' AND `OrderDetails`.`UnitPrice` < `Products`.`UnitPrice`;
SELECT T2.CompanyName FROM Products AS T1 JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Aniseed Syrup'
SELECT ProductName FROM Products WHERE SupplierID IN (     SELECT SupplierID     FROM Suppliers     WHERE Country = 'Japan' );
SELECT DISTINCT S.Phone FROM Suppliers S JOIN Products P ON S.SupplierID = P.SupplierID WHERE P.UnitsInStock < P.UnitsOnOrder;
SELECT COUNT(*) FROM Products WHERE Discontinued = 1 AND SupplierID IN (     SELECT SupplierID     FROM Suppliers     WHERE Country = 'USA' );
SELECT S.CompanyName FROM Suppliers S JOIN Products P ON S.SupplierID = P.SupplierID WHERE P.UnitPrice = (SELECT MAX(UnitPrice) FROM Products);
SELECT AVG(E.Salary) FROM Employees E WHERE E.EmployeeID IN (     SELECT T.EmployeeID     FROM Territories T     GROUP BY T.EmployeeID     HAVING COUNT(T.TerritoryID) > 4 );
SELECT (100 * (p.UnitPrice - od.UnitPrice) / p.UnitPrice) AS PercentageDifference FROM Products p JOIN `OrderDetails` od ON p.ProductID = od.ProductID WHERE p.ProductName = 'Ikura' AND od.OrderID = 10273;
SELECT AVG(od.Quantity) FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Ikura';
SELECT TOP 1 p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE od.OrderID = 10248 ORDER BY (p.UnitsOnOrder / ISNULL(p.UnitsInStock, 1)) DESC
SELECT FirstName, LastName FROM Employees WHERE BirthDate = (SELECT MAX(BirthDate) FROM Employees);
SELECT FirstName, LastName FROM Employees ORDER BY HireDate DESC LIMIT 1;
SELECT COUNT(*) FROM Orders WHERE EmployeeID = (SELECT EmployeeID FROM Employees WHERE FirstName = 'Michael' AND LastName = 'Suyama');
SELECT T2.TerritoryDescription FROM Employees AS T1 JOIN Territories AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.TitleOfCourtesy = 'Mr.' AND T1.FirstName = 'Robert' AND T1.LastName = 'King';
SELECT T3.TerritoryDescription FROM Employees AS T1 JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.TitleOfCourtesy = 'Ms.' AND T1.FirstName = 'Laura' AND T1.LastName = 'Callahan' AND T1.ReportsTo = T4.EmployeeID;
SELECT E.FirstName, E.LastName FROM Employees E JOIN EmployeeTerritories ET ON E.EmployeeID = ET.EmployeeID JOIN Territories T ON ET.TerritoryID = T.TerritoryID WHERE T.TerritoryDescription = 'Santa Monica';
SELECT E.HomePhone FROM Employees E JOIN EmployeeTerritories ET ON E.EmployeeID = ET.EmployeeID JOIN Territories T ON ET.TerritoryID = T.TerritoryID WHERE T.TerritoryDescription = 'Savannah';
SELECT SUM(od.Quantity) FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID WHERE o.CustomerID = 'HILAA' AND o.OrderDate = '1997-12-25';
SELECT COUNT(T2.ProductID) FROM Orders AS T1 JOIN OrderDetails AS T2 ON T1.OrderID = T2.OrderID WHERE T1.Freight = (SELECT MAX(Freight) FROM Orders);
SELECT Shippers.ShipName FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Orders.OrderID = 10585;
SELECT COUNT(*) FROM Orders WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE CompanyName = 'Federal Shipping');
SELECT COUNT(DISTINCT ProductID) FROM Products JOIN Categories ON Products.CategoryID = Categories.CategoryID WHERE Categories.CategoryName = 'dairy products';
SELECT Categories.CategoryName FROM Categories JOIN Products ON Categories.CategoryID = Products.CategoryID WHERE Products.ProductName = 'Tofu';
SELECT SUM(T1.UnitsInStock + T1.UnitsOnOrder) AS TotalProduction FROM Products AS T1 JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Escargots Nouveaux';
SELECT T1.ReorderLevel FROM Products AS T1 JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Nord-Ost-Fisch Handelsgesellschaft mbH'
SELECT COUNT(DISTINCT p.ProductID) FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.CompanyName = 'Karkki Oy';
SELECT T2.ContactName FROM Products AS T1 JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Gudbrandsdalsost'
SELECT Country FROM Suppliers WHERE SupplierID = (SELECT SupplierID FROM Products WHERE ProductName = 'Scottish Longbreads');
SELECT COUNT(*) FROM Territories WHERE RegionID = (SELECT RegionID FROM Region WHERE RegionDescription = 'Northern')
SELECT RegionID FROM Territories WHERE TerritoryDescription = 'Columbia'
SELECT     (COUNT(CASE WHEN s.ShipperName = 'United Package' THEN o.OrderID ELSE NULL END) * 100.0 / COUNT(o.OrderID)) AS Percentage FROM     Orders o JOIN     Shippers s ON o.ShipperID = s.ShipperID WHERE     o.CustomerID = 'WHITC'
SELECT     ((SELECT COUNT(o.OrderID) FROM Orders o JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.CompanyName = 'United Package') -      (SELECT COUNT(o.OrderID) FROM Orders o JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.CompanyName = 'Speedy Express')) /     (SELECT COUNT(o.OrderID) FROM Orders o JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.CompanyName = 'Speedy Express') * 100 AS PercentMoreOrders;
SELECT     (SELECT COUNT(TerritoryDescription) FROM Territories WHERE RegionDescription = 'Eastern') /     (SELECT COUNT(TerritoryDescription) FROM Territories WHERE RegionDescription = 'Southern') AS Times;
SELECT COUNT(CustomerID) AS NumberOfCustomers FROM Customers WHERE Country = (     SELECT Country     FROM Customers     GROUP BY Country     ORDER BY COUNT(CustomerID) DESC     LIMIT 1 )
SELECT OrderID FROM Orders WHERE Freight > 800;
SELECT Address, City, Region, Country, PostalCode FROM Customers WHERE CompanyName = 'Island Trading';
SELECT ProductName FROM Products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM Products);
SELECT COUNT(*) FROM Suppliers WHERE Country = 'USA';
SELECT ProductName FROM Products WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products);
SELECT FirstName, LastName FROM Employees WHERE Salary = (SELECT MAX(Salary) FROM Employees);
SELECT ProductName FROM Products WHERE Discontinued = 1;
SELECT AVG(Salary) FROM Employees WHERE Title = 'Sales Representative' AND Country = 'UK';
SELECT Shippers.ShipperName FROM Orders JOIN Shippers ON Orders.ShipVia = Shippers.ShipperID WHERE Orders.ShipCountry = 'USA' GROUP BY Shippers.ShipperID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Pavlova, Ltd.');
SELECT COUNT(*) FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Orders.CustomerID = 'GREAL' AND Shippers.CompanyName = 'United Package';
SELECT S.SupplierName FROM Suppliers S JOIN Products P ON S.SupplierID = P.SupplierID WHERE P.ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products);
SELECT COUNT(*) FROM Orders WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE CompanyName = 'United Package');
SELECT COUNT(*) FROM Suppliers JOIN Products ON Suppliers.SupplierID = Products.SupplierID WHERE Suppliers.Country = 'Australia' AND Products.Discontinued = 1;
SELECT SUM(od.UnitPrice * od.Quantity + o.Freight) AS TotalPrice FROM (     SELECT TOP 2 *     FROM Products     ORDER BY UnitPrice DESC ) AS p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID GROUP BY o.Freight
SELECT s.SupplierName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.SupplierName ORDER BY COUNT(p.ProductID) DESC LIMIT 1;
SELECT ProductName FROM Products WHERE ProductID IN (     SELECT ProductID     FROM OrderDetails     WHERE UnitPrice <= 5 );
SELECT E.FirstName, E.LastName FROM Employees E JOIN (     SELECT EmployeeID, COUNT(*) as TerritoryCount     FROM EmployeeTerritories     GROUP BY EmployeeID ) ET ON E.EmployeeID = ET.EmployeeID WHERE ET.TerritoryCount = (     SELECT MAX(TerritoryCount)     FROM (         SELECT COUNT(*) as TerritoryCount         FROM EmployeeTerritories         GROUP BY EmployeeID     ) );
SELECT TOP 1 p.ProductName, SUM(od.Quantity) as TotalQuantity FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalQuantity DESC
SELECT T2.TerritoryDescription FROM Employees AS T1 JOIN EmployeeTerritories AS T3 ON T1.EmployeeID = T3.EmployeeID JOIN Territories AS T2 ON T3.TerritoryID = T2.TerritoryID WHERE T1.TitleOfCourtesy = 'Dr.';
SELECT t.TerritoryDescription FROM Territories t JOIN Region r ON t.RegionID = r.RegionID WHERE r.RegionDescription = 'Eastern';
SELECT COUNT(Territories.TerritoryID) / COUNT(DISTINCT(Employees.EmployeeID)) AS AverageTerritoriesPerSalesRep FROM Employees JOIN EmployeeTerritories ON Employees.EmployeeID = EmployeeTerritories.EmployeeID JOIN Territories ON EmployeeTerritories.TerritoryID = Territories.TerritoryID WHERE Employees.Title = 'Sales Representative';
SELECT p.ProductName FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Beverages' ORDER BY p.ReorderLevel DESC LIMIT 1;
SELECT E.FirstName, E.LastName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID GROUP BY E.EmployeeID, E.FirstName, E.LastName ORDER BY COUNT(O.OrderID) DESC LIMIT 1;
SELECT COUNT(od.ProductID) FROM OrderDetails od JOIN Orders o ON od.OrderID = o.OrderID WHERE o.Freight = (SELECT MAX(Freight) FROM Orders)
SELECT p.ProductName FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Seafood' ORDER BY (p.UnitsInStock + p.UnitsOnOrder) DESC LIMIT 1;
WITH EmployeeTerritories AS (   SELECT EmployeeID, COUNT(TerritoryID) AS NumTerritories   FROM Employees   JOIN EmployeeTerritories ON Employees.EmployeeID = EmployeeTerritories.EmployeeID   GROUP BY EmployeeID ), TopEmployees AS (   SELECT EmployeeID,          Salary,          NumTerritories,          RANK() OVER (ORDER BY NumTerritories DESC) AS Rank   FROM Employees   JOIN EmployeeTerritories ON Employees.EmployeeID = EmployeeTerritories.EmployeeID ) SELECT (SELECT Salary FROM TopEmployees WHERE Rank = 1) -        (SELECT Salary FROM TopEmployees WHERE Rank = 2) AS SalaryDifference;
SELECT AVG(UnitPrice) FROM Products WHERE UnitsInStock > 50;
SELECT T1.CompanyName FROM Customers AS T1 WHERE T1.City = (SELECT T2.City FROM Customers AS T2 GROUP BY T2.City ORDER BY COUNT(T2.CustomerID) DESC LIMIT 1)
SELECT CustomerName, ContactName, ContactTitle FROM Customers WHERE City = 'Madrid';
SELECT CONCAT(FirstName, ' ', LastName) AS FullName, Phone AS ContactNumber FROM Employees ORDER BY BirthDate ASC;
Error: 第 6388 个样本有 2 个SQL。
SELECT T1.ProductName, SUM(T2.Quantity) AS TotalQuantity FROM Products AS T1 JOIN `OrderDetails` AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductName ORDER BY TotalQuantity DESC LIMIT 1;
SELECT DISTINCT s.SupplierName, s.Address, s.Phone FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.UnitPrice > 30;
SELECT Customers.CustomerName, Customers.Address FROM Customers JOIN Orders ON Customers.CustomerID = Orders.CustomerID WHERE Orders.Freight > (SELECT AVG(Freight) FROM Orders)
SELECT E.FirstName, E.LastName FROM Employees E JOIN EmployeeTerritories ET ON E.EmployeeID = ET.EmployeeID JOIN Territories T ON ET.TerritoryID = T.TerritoryID WHERE T.TerritoryDescription = 'Wilton';
Error: 第 6393 个样本有 2 个SQL。
SELECT TOP 5 p.ProductName, SUM(od.Quantity * p.Price) as TotalCost FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON o.OrderID = od.OrderID WHERE o.OrderDate >= '1998-01-01 00:00:00' AND o.OrderDate < '1999-01-01 00:00:00' GROUP BY p.ProductName, p.Price ORDER BY TotalCost DESC;
SELECT COUNT(*) FROM (     SELECT DISTINCT Orders.CustomerID     FROM Orders     JOIN Customers ON Orders.CustomerID = Customers.CustomerID     JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID     WHERE Customers.Country = 'Canada' AND Shippers.ShipperName = 'Federal Shipping' ) AS SubQuery;
SELECT TOP 10 T3.ProductName FROM OrderDetails AS T1 JOIN Products AS T3 ON T1.ProductID = T3.ProductID GROUP BY T3.ProductName ORDER BY COUNT(T1.OrderID) DESC;
SELECT SupplierID, COUNT(ProductID) as ProductCount FROM Products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;
SELECT E.FirstName, E.LastName, T.RegionDescription FROM Employees E LEFT JOIN Territories T ON E.EmployeeID = T.EmployeeID ORDER BY E.FirstName, E.LastName;
SELECT E.FirstName, E.LastName, E.Title, E.Address FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE O.OrderDate >= '1996-01-01 00:00:00' AND O.OrderDate < '1997-01-01 00:00:00' GROUP BY E.EmployeeID, E.FirstName, E.LastName, E.Title, E.Address ORDER BY COUNT(O.OrderID) DESC LIMIT 1;
SELECT AVG(UnitPrice) FROM Products JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID JOIN Orders ON OrderDetails.OrderID = Orders.OrderID JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Shippers.CompanyName = 'United Package' AND Orders.OrderDate >= '1997-01-01 00:00:00' AND Orders.OrderDate < '1998-01-01 00:00:00';
SELECT (COUNT(CASE WHEN Shippers.ShipperName = 'Speedy Express' THEN Orders.OrderID END) * 100.0 / COUNT(Orders.OrderID)) AS Percentage FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID;
Error: 第 6402 个样本有 2 个SQL。
SELECT E.LastName FROM Employees E WHERE E.ReportsTo = (     SELECT E2.EmployeeID     FROM Employees E2     WHERE E2.Title = 'Vice President, Sales' );
SELECT MAX(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalPrice FROM OrderDetails od;
SELECT TOP 3 p.ProductName FROM Products p GROUP BY p.ProductName ORDER BY SUM(p.UnitsInStock + p.UnitsOnOrder) DESC;
SELECT p.ProductID FROM Products p JOIN (     SELECT TOP 10 ProductID     FROM Products     ORDER BY UnitPrice DESC ) top_products ON p.ProductID = top_products.ProductID JOIN (     SELECT ProductID, SUM(Quantity) as total_quantity     FROM OrderDetails     GROUP BY ProductID ) od ON p.ProductID = od.ProductID ORDER BY od.total_quantity / (p.ReorderLevel * 1.0) ASC LIMIT 10;
SELECT COUNT(*) FROM Products WHERE Products.Discontinued = 0 AND Products.CategoryID = (     SELECT Categories.CategoryID     FROM Categories     WHERE Categories.CategoryName = 'Dairy Products' );
SELECT T2.TerritoryDescription FROM Employees AS T1 JOIN EmployeeTerritories AS T3 ON T1.EmployeeID = T3.EmployeeID JOIN Territories AS T2 ON T3.TerritoryID = T2.TerritoryID WHERE T1.Title = 'Inside Sales Coordinator';
SELECT DISTINCT Shippers.ShipperName FROM Shippers JOIN Orders ON Shippers.ShipperID = Orders.ShipVia JOIN `Order Details` ON Orders.OrderID = `Order Details`.OrderID WHERE (Orders.Freight + (SELECT SUM(`Order Details`.UnitPrice * `Order Details`.Quantity)                          FROM `Order Details`                          WHERE `Order Details`.OrderID = Orders.OrderID)) > 2000000;
SELECT s.ShipperName, COUNT(*) as TotalShipments FROM Orders o JOIN Shippers s ON o.ShipVia = s.ShipperID WHERE o.ShipCity = 'Aachen' GROUP BY s.ShipperName ORDER BY TotalShipments DESC LIMIT 1;
Error: 第 6411 个样本有 2 个SQL。
SELECT T2.ContactName FROM Products AS T1 JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Pavlova'
SELECT P.ProductName FROM Products P JOIN OrderDetails OD ON P.ProductID = OD.ProductID JOIN Orders O ON OD.OrderID = O.OrderID WHERE O.ShipCity = 'Paris';
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID WHERE o.ShipPostalCode = '28023' GROUP BY p.ProductName ORDER BY SUM(od.Quantity) ASC LIMIT 1;
SELECT E.FirstName, E.LastName FROM Employees E JOIN EmployeeTerritories ET ON E.EmployeeID = ET.EmployeeID JOIN Territories T ON ET.TerritoryID = T.TerritoryID JOIN Region R ON T.RegionID = R.RegionID WHERE R.RegionDescription = 'Southern' AND E.ReportsTo = (     SELECT EmployeeID     FROM Employees     WHERE FirstName = 'Andrew' AND LastName = 'Fuller' );
SELECT Orders.OrderDate FROM Orders JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID JOIN Products ON OrderDetails.ProductID = Products.ProductID JOIN Customers ON Orders.CustomerID = Customers.CustomerID WHERE Customers.CustomerName = 'Du monde entier' AND Products.ProductName = 'Filo Mix' AND OrderDetails.Quantity = 9;
SELECT Categories.CategoryName FROM Categories JOIN Products ON Categories.CategoryID = Products.CategoryID JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID WHERE OrderDetails.OrderID = 10933;
SELECT E.HomePhone FROM Employees E JOIN EmployeeTerritories ET ON E.EmployeeID = ET.EmployeeID JOIN Territories T ON ET.TerritoryID = T.TerritoryID WHERE T.TerritoryDescription = 'Portsmouth';
SELECT AVG(od.Quantity) FROM OrderDetails od JOIN Orders o ON od.OrderID = o.OrderID JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.CompanyName = 'Federal Shipping' AND DATE(o.ShipDate) >= '1996-11-01' AND DATE(o.ShipDate) < '1996-12-01';
SELECT     (COUNT(CASE WHEN Orders.OrderDate >= '1996-09-01 00:00:00' AND Orders.OrderDate < '1996-10-01 00:00:00' THEN Orders.OrderID ELSE NULL END) * 100.0 /     COUNT(CASE WHEN Orders.OrderDate >= '1996-01-01 00:00:00' AND Orders.OrderDate < '1997-01-01 00:00:00' THEN Orders.OrderID ELSE NULL END)) AS Percentage FROM     Orders JOIN     Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE     Shippers.CompanyName = 'United Package';
SELECT COUNT(*) FROM Suppliers WHERE Country = 'Mexico' AND ContactTitle IS NOT NULL;
SELECT Address, City, PostalCode, Country FROM Customers WHERE ContactName = 'Andr Fonseca';
SELECT CompanyName FROM (     SELECT SupplierName AS CompanyName, Phone     FROM Suppliers     WHERE Phone LIKE '(171)%'     UNION     SELECT ShipperName AS CompanyName, Phone     FROM Shippers     WHERE Phone LIKE '(171)%' ) AS Result
SELECT     (SELECT COUNT(EmployeeID) FROM Employees WHERE Country = 'UK' AND Title = 'Sales Representative') -     (SELECT COUNT(EmployeeID) FROM Employees WHERE Country = 'USA' AND Title = 'Sales Representative')
SELECT COUNT(*) FROM Employees WHERE ContactTitle = 'Sales Associate' AND City = 'Sao Paulo' AND Country = 'Brazil';
SELECT E.LastName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE O.OrderID = 10521 AND O.CustomerID = 'CACTU'
SELECT od.Quantity * p.Price AS ShippingCost FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE o.OrderID = 10692 AND c.CompanyName = 'Alfreds Futterkiste';
SELECT Shippers.ShipperName FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Orders.OrderID = 10558;
SELECT Orders.OrderID FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Shippers.ShipperName = 'Speedy Express' LIMIT 3;
SELECT ProductName FROM Products JOIN Categories ON Products.CategoryID = Categories.CategoryID WHERE Categories.CategoryName = 'beverages';
SELECT Categories.Description FROM Categories JOIN Products ON Categories.CategoryID = Products.CategoryID WHERE Products.ProductName = 'tofu';
SELECT s.CompanyName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.ProductName = 'Gula Malacca';
SELECT ProductName FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Aux joyeux ecclsiastiques');
SELECT UnitPrice FROM Products WHERE ProductName = 'Konbu' AND SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = "Mayumi's");
SELECT Suppliers.ContactName FROM Suppliers JOIN Products ON Suppliers.SupplierID = Products.SupplierID WHERE Products.ProductName = 'Camembert Pierrot';
SELECT ProductName FROM Products WHERE CategoryID = (SELECT CategoryID FROM Categories WHERE CategoryName = 'Meat/Poultry') AND Discontinued = 1 LIMIT 3;
SELECT p.ProductName FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.CompanyName = 'Heli Swaren GmbH & Co. KG' ORDER BY p.ReorderLevel DESC LIMIT 2;
SELECT ContactName FROM Customers WHERE CustomerName = 'Heli Swaren GmbH & Co. KG';
SELECT Country FROM Suppliers WHERE SupplierName = 'Drachenblut Delikatessen';
SELECT COUNT(DISTINCT Territory) FROM Employees;
SELECT MAX(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalPrice FROM OrderDetails od;
SELECT ProductName FROM Products WHERE Price = (SELECT MAX(Price) FROM Products);
SELECT COUNT(*) FROM Orders WHERE ShipCountry = 'France';
SELECT Region.RegionDescription FROM Region JOIN Territories ON Region.RegionID = Territories.RegionID WHERE Territories.TerritoryDescription = 'Hoffman Estates';
SELECT Suppliers.Homepage FROM Suppliers JOIN Products ON Suppliers.SupplierID = Products.SupplierID WHERE Products.ProductName = 'Thringer Rostbratwurst';
SELECT DISTINCT E.FirstName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE O.ShipCity = 'Reims';
SELECT MAX(od.Quantity) FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Manjimup Dried Apples';
SELECT COUNT(*) FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Shippers.ShipperName = 'Speedy Express';
SELECT TerritoryDescription FROM Territories WHERE RegionDescription = 'Southern';
SELECT p.UnitPrice FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.Description = 'Cheeses';
SELECT COUNT(OrderID) FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerName = 'Laughing Bacchus Wine Cellars');
SELECT DISTINCT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE c.Address = 'Starenweg 5';
SELECT ProductName FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Bigfoot Breweries');
SELECT t.TerritoryDescription FROM Territories t JOIN EmployeeTerritories et ON t.TerritoryID = et.TerritoryID JOIN Employees e ON et.EmployeeID = e.EmployeeID WHERE e.LastName = 'King' AND e.FirstName = 'Robert';
SELECT DISTINCT c.ContactName FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE o.ShipCountry = 'Switzerland';
SELECT     (COUNT(CASE WHEN E.Title = 'Sales Representative' THEN O.OrderID END) * 100.0 / COUNT(O.OrderID)) AS Percentage FROM     Orders O JOIN     Employees E ON O.EmployeeID = E.EmployeeID;
SELECT COUNT(*) FROM Employees WHERE Country = 'USA' AND TitleOfCourtesy = 'Dr.';
SELECT AVG(Salary) FROM Employees WHERE EmployeeID BETWEEN 1 AND 9;
SELECT SUM(Salary) AS TotalSalary FROM Employees WHERE Country = 'UK';
SELECT Phone FROM Employees WHERE FirstName = 'Laura' AND LastName = 'Callahan';
SELECT Notes FROM Employees WHERE EmployeeID = (SELECT EmployeeID FROM Employees WHERE Salary = (SELECT MAX(Salary) FROM Employees));
SELECT DISTINCT o.CustomerID FROM Orders o JOIN Employees e ON o.EmployeeID = e.EmployeeID WHERE e.FirstName = 'Michael' AND e.LastName = 'Suyama';
SELECT DISTINCT Orders.ShipCountry FROM Orders JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID WHERE Employees.FirstName = 'Janet' AND Employees.LastName = 'Leverling'
SELECT COUNT(*) FROM Orders WHERE CustomerID = (     SELECT CustomerID     FROM Customers     WHERE ContactName = 'Margaret Peacock' )
SELECT AVG(E.Salary) FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE E.FirstName = 'Andrew' AND E.LastName = 'Fuller';
SELECT ProductName FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Exotic Liquids');
Error: 第 6467 个样本有 2 个SQL。
SELECT COUNT(*) FROM Products WHERE SupplierID = (     SELECT SupplierID     FROM Suppliers     WHERE CompanyName = 'New Orleans Cajun Delights' ) AND Discontinued = 1;
SELECT AVG(UnitPrice) FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Formaggi Fortini s.r.l.')
SELECT COUNT(ProductName) FROM Products WHERE SupplierID IN (     SELECT SupplierID     FROM Suppliers     WHERE Country = 'Japan' );
SELECT T2.ContactName FROM Products AS T1 JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Teatime Chocolate Biscuits'
SELECT SupplierName FROM Suppliers WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM Suppliers);
SELECT T2.ContactTitle FROM Suppliers AS T2 JOIN Products AS T1 ON T1.SupplierID = T2.SupplierID WHERE T1.QuantityPerUnit = '10 boxes x 12 pieces';
SELECT SUM(p.UnitsOnOrder) FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.CompanyName = 'Exotic Liquids';
SELECT (COUNT(CASE WHEN SupplierName = 'Gai pturage' THEN ProductID ELSE NULL END) * 100.0 / COUNT(ProductID)) AS Percentage FROM Products JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID;
SELECT TOP 5 Products.ProductID FROM Products ORDER BY Products.UnitsInStock DESC;
SELECT COUNT(*) FROM Products WHERE Discontinued = 1;
SELECT E.Address, E.HomePhone, E.Salary FROM Employees E WHERE E.Title = 'Sales Manager';
SELECT E.FirstName, E.LastName, E.Photo AS PhotoPath FROM Employees E WHERE E.Title = 'Vice President, Sales';
SELECT TOP 10 c.CompanyName, SUM(od.Quantity * p.Price) AS TotalSales FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID GROUP BY c.CompanyName ORDER BY TotalSales DESC;
SELECT Categories.CategoryName, AVG(OrderDetails.Quantity * Products.Price) as AverageSales FROM Categories JOIN Products ON Categories.CategoryID = Products.CategoryID JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID GROUP BY Categories.CategoryName;
SELECT SUM(od.Quantity) FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Uncle Bob''s Organic Dried Pears';
SELECT COUNT(*) FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE c.CategoryName = 'Seafood' AND od.Quantity > 50;
SELECT ProductID, ReorderLevel FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Pavlova, Ltd');
SELECT DISTINCT S.CompanyName FROM Suppliers S JOIN Products P ON S.SupplierID = P.SupplierID WHERE P.Discontinued = 1;
SELECT FirstName, LastName FROM Employees WHERE EmployeeID IN (     SELECT EmployeeID FROM (         SELECT EmployeeID, COUNT(TerritoryID) as TerritoryCount         FROM EmployeeTerritories         GROUP BY EmployeeID     ) as TerritoryCounts     WHERE TerritoryCount < 4 );
SELECT COUNT(*) FROM Employees JOIN EmployeeTerritories ON Employees.EmployeeID = EmployeeTerritories.EmployeeID JOIN Territories ON EmployeeTerritories.TerritoryID = Territories.TerritoryID JOIN Region ON Territories.RegionID = Region.RegionID WHERE Region.RegionDescription = 'Eastern';
SELECT COUNT(*) FROM Orders WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'Federal Shipping') AND ShippedDate BETWEEN '1997-03-01' AND '1997-10-08';
SELECT COUNT(DISTINCT o.CustomerID) FROM Orders o JOIN Employees e ON o.EmployeeID = e.EmployeeID WHERE o.ShipCountry = 'Brazil' AND e.FirstName = 'Margaret' AND e.LastName = 'Peacock' AND o.ShippedDate BETWEEN '1997-03-31' AND '1997-12-10';
SELECT p.ReorderLevel FROM Products p JOIN `Order Details` od ON p.ProductID = od.ProductID WHERE od.Quantity = 1;
SELECT p.ProductName, p.UnitPrice * p.UnitsInStock AS StockValue FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Condiments';
SELECT COUNT(*) FROM Territories t JOIN Employees e ON t.EmployeeID = e.EmployeeID WHERE e.FirstName = 'Anne' AND e.LastName = 'Dodsworth';
SELECT C.CustomerID, MAX(DATEDIFF(day, o.ShippedDate, o.RequiredDate)) AS LongestDelay FROM Orders o JOIN Customers C ON o.CustomerID = C.CustomerID WHERE C.Country = 'USA' AND o.RequiredDate > o.ShippedDate GROUP BY C.CustomerID ORDER BY LongestDelay DESC;
SELECT C.ContactName, C.Phone FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID JOIN OrderDetails OD ON O.OrderID = OD.OrderID WHERE (OD.Quantity * OD.UnitPrice * (1 - OD.Discount)) IN     (SELECT MAX(OD2.Quantity * OD2.UnitPrice * (1 - OD2.Discount))      FROM OrderDetails OD2      JOIN Orders O2 ON OD2.OrderID = O2.OrderID) GROUP BY C.ContactName, C.Phone ORDER BY SUM(OD.Quantity * OD.UnitPrice * (1 - OD.Discount)) DESC LIMIT 1;
SELECT E.FirstName, E.LastName, E.ReportsTo FROM Employees E INNER JOIN (     SELECT OrderID, MAX(UnitPrice * Quantity * (1 - Discount)) as Payment     FROM OrderDetails     GROUP BY OrderID ) OD ON E.EmployeeID = (     SELECT O.EmployeeID     FROM Orders O     WHERE O.OrderID = OD.OrderID ) WHERE OD.Payment = (     SELECT MAX(Payment)     FROM (         SELECT UnitPrice * Quantity * (1 - Discount) as Payment         FROM OrderDetails     ) AS SubQuery );
SELECT COUNT(*) FROM Customers WHERE City = 'Berlin' AND Country = 'Germany';
SELECT COUNT(*) FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Exotic Liquids');
SELECT T2.SupplierName, T1.ProductName FROM Products AS T1 JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = (SELECT MIN(UnitPrice) FROM Products)
SELECT AVG(UnitPrice) FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Tokyo Traders');
SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern';
SELECT r.RegionDescription FROM Region r JOIN Territories t ON r.RegionID = t.RegionID GROUP BY r.RegionDescription ORDER BY COUNT(t.TerritoryID) DESC LIMIT 1;
SELECT Region.RegionDescription FROM Region JOIN Territories ON Region.RegionID = Territories.RegionID WHERE Territories.TerritoryID = 2116;
SELECT     (COUNT(CASE WHEN c.City = 'Madrid' THEN o.OrderID END) * 100.0 / COUNT(o.OrderID)) AS Percentage FROM     Orders o JOIN     Customers c ON o.CustomerID = c.CustomerID WHERE     YEAR(o.OrderDate) = 1996;
SELECT FirstName, LastName FROM Employees;
SELECT FirstName FROM Employees WHERE Salary = (SELECT MAX(Salary) FROM Employees);
SELECT COUNT(*) FROM Employees WHERE Title = 'Sales Representative' AND Salary > 2000;
SELECT COUNT(*) FROM Orders WHERE YEAR(OrderDate) = 1996 AND CustomerID IN (     SELECT CustomerID     FROM Customers     WHERE Country = 'UK' );
SELECT T2.CompanyName FROM Orders AS T1 JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE YEAR(T1.OrderDate) = 1998 GROUP BY T2.CompanyName ORDER BY COUNT(T1.CustomerID) DESC LIMIT 1;
SELECT COUNT(T1.OrderID), T2.Country FROM Orders AS T1 JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE YEAR(T1.OrderDate) = 1996 GROUP BY T2.Country;
SELECT COUNT(*) FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE CompanyName = 'Hanna Moos') AND YEAR(OrderDate) = 1999;
SELECT MIN(DATEDIFF(T2.ShippedDate, T1.OrderDate)) AS FastestShipping FROM Orders AS T1 JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.CustomerID = 'BERGS'
SELECT Customers.CompanyName FROM Orders JOIN Customers ON Orders.CustomerID = Customers.CustomerID WHERE Orders.OrderID = 10257;
SELECT YEAR(OrderDate) FROM Orders WHERE CustomerID = (     SELECT CustomerID     FROM Customers     WHERE CompanyName = 'Around the Horn' ) GROUP BY YEAR(OrderDate) ORDER BY COUNT(OrderID) DESC LIMIT 1;
SELECT COUNT(EmployeeID) FROM Employees WHERE ReportsTo = (     SELECT EmployeeID     FROM Employees     WHERE FirstName = 'Andrew' AND LastName = 'Fuller' );
SELECT Country, COUNT(SupplierID) as SupplierCount FROM Suppliers GROUP BY Country ORDER BY SupplierCount DESC LIMIT 1;
SELECT E.FirstName, E.LastName FROM Employees E WHERE E.ReportsTo = (     SELECT E2.EmployeeID     FROM Employees E2     WHERE E2.Title = 'Sales Manager' );
SELECT COUNT(OrderID) FROM Orders WHERE OrderDate BETWEEN '1996-08-01' AND '1996-08-31' GROUP BY CustomerID ORDER BY COUNT(OrderID) DESC LIMIT 1;
SELECT Salary FROM Employees WHERE HireDate = (SELECT MIN(HireDate) FROM Employees);
SELECT MAX(YEAR(HireDate) - YEAR(BirthDate)) AS AgeAtHire FROM Employees;
SELECT SUM(od.Quantity * p.UnitPrice) FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1;
SELECT C.CategoryName FROM Categories C JOIN Products P ON C.CategoryID = P.CategoryID WHERE P.Discontinued = 1 GROUP BY C.CategoryName ORDER BY COUNT(P.ProductID) DESC LIMIT 1;
SELECT SUM(od.Quantity) FROM OrderDetails od JOIN Orders o ON od.OrderID = o.OrderID JOIN Products p ON od.ProductID = p.ProductID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Condiments' AND YEAR(o.OrderDate) = 1997;
SELECT TOP 1 c.CustomerName FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID GROUP BY c.CustomerName ORDER BY SUM(od.Quantity) DESC;
Error: 第 6524 个样本有 2 个SQL。
SELECT ProductName FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'G''day, Mate');
SELECT COUNT(*) FROM (   SELECT TerritoryID   FROM Territories   WHERE RegionID = (     SELECT RegionID     FROM (       SELECT RegionID, COUNT(TerritoryID) as TerritoryCount       FROM Territories       GROUP BY RegionID       ORDER BY TerritoryCount DESC       LIMIT 1     ) as RegionWithMostTerritories   ) ) as MostTerritories
SELECT T2.CompanyName FROM Products AS T1 JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = (SELECT MAX(UnitPrice) FROM Products);
SELECT COUNT(*) FROM (     SELECT e.EmployeeID     FROM Employees e     INNER JOIN EmployeeTerritories et ON e.EmployeeID = et.EmployeeID     WHERE (e.TitleOfCourtesy = 'Mrs.' OR e.TitleOfCourtesy = 'Ms.')     GROUP BY e.EmployeeID     HAVING COUNT(et.TerritoryID) >= 3 ) AS subquery;
SELECT TOP 8 s.SupplierName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.ReorderLevel IN (     SELECT MAX(ReorderLevel)     FROM Products     GROUP BY CategoryID ) ORDER BY p.ReorderLevel DESC;
SELECT T3.CompanyName FROM (     SELECT T1.OrderID, SUM(T1.UnitPrice * T1.Quantity) as Total     FROM `OrderDetails` T1     JOIN `Orders` T2 ON T1.OrderID = T2.OrderID     WHERE T1.Discount = 0     GROUP BY T1.OrderID ) T4 JOIN `Orders` T2 ON T4.OrderID = T2.OrderID JOIN `Customers` T3 ON T2.CustomerID = T3.CustomerID WHERE T4.Total = (     SELECT MAX(Total)     FROM (         SELECT T1.OrderID, SUM(T1.UnitPrice * T1.Quantity) as Total         FROM `OrderDetails` T1         JOIN `Orders` T2 ON T1.OrderID = T2.OrderID         WHERE T1.Discount = 0         GROUP BY T1.OrderID     ) T5 );
SELECT SUM(od.UnitPrice * od.Quantity) AS TotalSales FROM Orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN Employees e ON o.EmployeeID = e.EmployeeID WHERE e.FirstName = 'Nancy' AND e.LastName = 'Davolio' AND YEAR(o.OrderDate) = 1996 AND MONTH(o.OrderDate) = 12 AND od.Discount = 0;
SELECT SUM(od.Quantity * p.UnitPrice) AS TotalSales FROM `OrderDetails` od JOIN `Orders` o ON od.OrderID = o.OrderID JOIN `Products` p ON od.ProductID = p.ProductID WHERE YEAR(o.OrderDate) = 1997;
SELECT AVG(AnnualSales) AS AverageAnnualSales FROM (     SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AnnualSales     FROM Orders o     JOIN OrderDetails od ON o.OrderID = od.OrderID     WHERE o.ShippedDate BETWEEN '1997-01-01' AND '1998-12-31'     GROUP BY YEAR(o.ShippedDate) ) AS SalesPerYear
SELECT COUNT(*) FROM Orders WHERE ShipCountry = 'Venezuela' AND YEAR(ShippedDate) = 1996;
SELECT CategoryID, Description FROM Categories WHERE CategoryName = 'Condiments';
SELECT od.OrderID, od.ProductID, p.UnitPrice FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE (od.Quantity * p.UnitPrice) > 15000;
SELECT TerritoryID FROM EmployeeTerritories WHERE EmployeeID = 7;
SELECT SupplierName, NULL AS HomepageAddress FROM Suppliers WHERE City = 'Sydney';
SELECT CONCAT(FirstName, ' ', LastName) AS FullName,        TIMESTAMPDIFF(YEAR, BirthDate, HireDate) AS AgeAtHire FROM Employees WHERE Title = 'Vice President, Sales';
SELECT SupplierName FROM Suppliers WHERE Country = 'Germany';
SELECT CONCAT(FirstName, ' ', LastName) AS FullName, (2022 - YEAR(BirthDate)) AS Age FROM Employees WHERE City = 'London';
SELECT CustomerName, Address, Phone, Fax FROM Customers WHERE City = 'London';
SELECT FirstName, LastName, Title FROM Employees WHERE ReportsTo IN (SELECT EmployeeID FROM Employees WHERE Title = 'Sales Manager');
SELECT CustomerName, City FROM Customers WHERE Country = 'Canada';
SELECT SUM(p.UnitsInStock + p.UnitsOnOrder) AS TotalProductionAmount, p.ProductName FROM Products p WHERE p.Unit = '10 - 500 g pkgs.' GROUP BY p.ProductName;
SELECT ProductName, CategoryName FROM Products JOIN Categories ON Products.CategoryID = Categories.CategoryID WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products);
SELECT DISTINCT s.SupplierName, s.City, p.ProductName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE (p.UnitsInStock + p.UnitsOnOrder) > 120;
SELECT     s.ContactName,     s.ContactTitle,     p.ProductName FROM     Suppliers s JOIN     Products p ON s.SupplierID = p.SupplierID WHERE     s.CompanyName = 'Escargots Nouveaux';
SELECT Territories.TerritoryID, Territories.TerritoryDescription, Region.RegionDescription FROM Territories JOIN Region ON Territories.RegionID = Region.RegionID JOIN Employees ON Territories.EmployeeID = Employees.EmployeeID WHERE Employees.FirstName = 'Margaret' AND Employees.LastName = 'Peacock';
SELECT p.ProductName FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.Country = 'Spain';
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE c.CustomerID = 'WILMK' AND o.RequiredDate = '1998-03-26 00:00:00';
SELECT ProductID, ProductName FROM Products WHERE CategoryID = (     SELECT CategoryID     FROM Categories     WHERE CategoryName = 'Meat/Poultry' );
SELECT COUNT(*) FROM Orders WHERE CustomerID IN (     SELECT CustomerID     FROM Customers     WHERE Country = 'Ireland' );
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE YEAR(o.OrderDate) = 1996 AND c.Country = 'Norway';
SELECT T3.CompanyName FROM `Orders` AS T1 JOIN `OrderDetails` AS T2 ON T1.OrderID = T2.OrderID JOIN `Suppliers` AS T3 ON T3.SupplierID = T2.ProductID JOIN `Employees` AS T4 ON T1.EmployeeID = T4.EmployeeID WHERE T1.ShipCountry = 'Brazil' AND YEAR(T1.OrderDate) = 1996 AND MONTH(T1.OrderDate) = 12 AND T4.FirstName = 'Anne' AND T4.LastName = 'Dodsworth';
SELECT E.FirstName, E.LastName, E.Title, E.Salary, COUNT(O.OrderID) AS NumberOfOrders FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE E.BirthDate = (SELECT MIN(BirthDate) FROM Employees) AND O.ShipCountry = 'USA' GROUP BY E.FirstName, E.LastName, E.Title, E.Salary;
SELECT TerritoryID, TerritoryDescription FROM Territories WHERE RegionID = (     SELECT RegionID     FROM Regions     WHERE RegionDescription = 'Southern' );
SELECT AVG(od.Quantity * p.Price) AS AveragePaymentPerProduct FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Confections';
SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalPayment FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE c.City = 'San Francisco';
SELECT p.ProductName, (p.UnitsInStock + p.UnitsOnOrder) as TotalProduction FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.Country = 'Japan';
SELECT p.ProductName, c.CategoryName FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE p.SupplierID IN (     SELECT s.SupplierID     FROM Suppliers s     WHERE s.Country = 'Australia' ) AND p.Discontinued = 1;
SELECT T3.Country, T2.OrderID FROM (     SELECT T1.OrderID, SUM(T1.UnitPrice * T1.Quantity * (1 - T1.Discount)) as TotalPayment     FROM `OrderDetails` T1     JOIN `Orders` T2 ON T1.OrderID = T2.OrderID     GROUP BY T1.OrderID ) T4 JOIN `OrderDetails` T1 ON T4.OrderID = T1.OrderID JOIN `Products` T3 ON T1.ProductID = T3.ProductID JOIN `Suppliers` T5 ON T3.SupplierID = T5.SupplierID JOIN `Orders` T2 ON T1.OrderID = T2.OrderID WHERE T3.ProductName = 'Ipoh Coffee' GROUP BY T3.Country, T2.OrderID HAVING T4.TotalPayment = (     SELECT MAX(TotalPayment)     FROM (         SELECT SUM(UnitPrice * Quantity * (1 - Discount)) as TotalPayment         FROM `OrderDetails`         GROUP BY OrderID     ) T6 )
SELECT Products.ProductName, SUM(OrderDetails.Quantity * Products.Price) AS TotalPayment FROM OrderDetails JOIN Orders ON OrderDetails.OrderID = Orders.OrderID JOIN Products ON OrderDetails.ProductID = Products.ProductID WHERE Orders.OrderID = 10979 GROUP BY Products.ProductName;
SELECT s.ContactName, s.ContactTitle FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Grains/Cereals' AND s.SupplierID BETWEEN 1 AND 10;
SELECT T1.Phone, COUNT(T2.OrderID) FROM Shippers AS T1 JOIN Orders AS T2 ON T1.ShipperID = T2.ShipperID WHERE T1.CompanyName = 'Speedy Express' AND T2.ShippedDate = '1998-01-30 00:00:00'
SELECT od.ProductID, p.ProductName, MIN(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS OverdueDays FROM OrderDetails od JOIN Orders o ON od.OrderID = o.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE DATEDIFF(o.ShippedDate, o.RequiredDate) < 0 GROUP BY od.ProductID, p.ProductName ORDER BY OverdueDays ASC LIMIT 1;
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Employees e ON o.EmployeeID = e.EmployeeID WHERE e.Title = 'Inside Sales Coordinator' AND o.ShipCountry = 'Mexico' AND YEAR(o.ShippedDate) = 1996;
SELECT p.ProductName FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Dairy Products' ORDER BY (SELECT SUM(od.Quantity) FROM OrderDetails od WHERE od.ProductID = p.ProductID) DESC LIMIT 1;
SELECT SUM(p.UnitsInStock + p.UnitsOnOrder) AS ProductionVolume FROM Products p WHERE p.ProductName = 'Mascarpone Fabioli';
SELECT p1.ProductName AS Most_Expensive_Product, c1.CategoryName AS Most_Expensive_Category, p2.ProductName AS Least_Expensive_Product, c2.CategoryName AS Least_Expensive_Category FROM Products p1 JOIN Categories c1 ON p1.CategoryID = c1.CategoryID JOIN Products p2 ON p1.CategoryID = p2.CategoryID JOIN Categories c2 ON p2.CategoryID = c2.CategoryID WHERE p1.UnitPrice = (SELECT MAX(UnitPrice) FROM Products) AND p2.UnitPrice = (SELECT MIN(UnitPrice) FROM Products);
SELECT c.CustomerName, MAX(od.UnitPrice * od.Quantity) as TotalValue FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN `OrderDetails` od ON o.OrderID = od.OrderID GROUP BY c.CustomerName ORDER BY TotalValue DESC LIMIT 1;
Error: 第 6572 个样本有 2 个SQL。
SELECT AVG(UnitPrice * Quantity) AS AverageSalesOrderValue FROM (     SELECT od.UnitPrice, od.Quantity     FROM OrderDetails od     JOIN Orders o ON od.OrderID = o.OrderID ) subquery
SELECT (COUNT(CASE WHEN Discontinued = 1 THEN 1 END) * 100.0 / COUNT(ProductID)) AS Percentage_Discontinued FROM Products
SELECT E.FirstName, E.LastName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE O.OrderID = 10274;
SELECT COUNT(*) FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE CompanyName = 'GROSELLA-Restaurante');
SELECT T3.ProductName, T4.Quantity FROM Employees AS T1 JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID JOIN Products AS T3 ON T3.ProductID = T4.ProductID JOIN `Order Details` AS T4 ON T2.OrderID = T4.OrderID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio' AND T2.CustomerID = (     SELECT CustomerID     FROM Customers     WHERE CompanyName = 'GROSELLA-Restaurante' );
SELECT COUNT(T2.OrderID) AS TotalOrders, AVG(T3.UnitPrice * T3.Quantity) AS AverageValue FROM Customers T1 JOIN Orders T2 ON T1.CustomerID = T2.CustomerID JOIN `OrderDetails` T3 ON T2.OrderID = T3.OrderID WHERE T1.CompanyName = 'Laughing Bacchus Wine Cellars';
SELECT SUM(od.Quantity) AS TotalQuantity FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Pavlova';
SELECT MIN(Salary) AS MinSalary, MAX(Salary) AS MaxSalary FROM Employees WHERE Title = 'Sales Representative';
SELECT COUNT(*) FROM Suppliers WHERE Country = 'USA';
SELECT ProductName FROM Products WHERE Discontinued = 1;
SELECT E.FirstName, E.LastName FROM Employees E JOIN Customers C ON E.EmployeeID = C.CustomerID WHERE C.CompanyName = 'Eastern Connection' AND C.ContactTitle = 'Sales Agent';
SELECT COUNT(DISTINCT ShipperID) FROM Orders;
SELECT     COUNT(o.OrderID) AS TotalOrders,     (COUNT(CASE WHEN o.ShipCountry = 'Austria' THEN o.OrderID END) * 100.0 / COUNT(o.OrderID)) AS PercentageToAustria FROM     Orders o JOIN     Employees e ON o.EmployeeID = e.EmployeeID WHERE     e.FirstName = 'Andrew' AND e.LastName = 'Fuller';
SELECT CategoryName FROM Categories WHERE Description = 'Soft drinks, coffees, teas, beers, and ales';
SELECT Phone FROM Shippers WHERE ShipperName = 'Around the Horn';
SELECT Fax FROM Customers WHERE CompanyName = 'Blondesddsl pre et fils' AND City = 'Strasbourg';
SELECT COUNT(DISTINCT CompanyName) FROM (     SELECT CompanyName FROM Customers WHERE City = 'London'     UNION ALL     SELECT CompanyName FROM Suppliers WHERE City = 'London' ) AS london_companies;
SELECT Address FROM Customers WHERE CustomerName = 'Eastern Connection' AND ContactName = 'Ann Devon';
SELECT SupplierName AS Company FROM Suppliers WHERE Country = 'France' UNION SELECT CustomerName AS Company FROM Customers WHERE Country = 'France';
SELECT COUNT(ProductName) FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Exotic Liquids');
Error: 第 6593 个样本有 2 个SQL。
SELECT TOP 1 s.SupplierName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE s.City = 'London' GROUP BY s.SupplierName ORDER BY SUM(p.UnitsInStock) DESC
SELECT p.ProductName FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.CompanyName = 'Exotic Liquids' ORDER BY p.ReorderLevel DESC LIMIT 1;
SELECT C.CategoryName FROM Categories C JOIN Products P ON C.CategoryID = P.CategoryID WHERE P.ProductName = 'Chef Anton''s Gumbo Mix' AND P.SupplierID = (     SELECT S.SupplierID     FROM Suppliers S     WHERE S.CompanyName = 'New Orleans Cajun Delights' );
SELECT T2.Country FROM Suppliers AS T1 JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.CompanyName = 'Leka Trading' AND T2.ProductName = 'Ipoh Coffee'
SELECT C.CategoryName FROM Categories C JOIN Products P ON C.CategoryID = P.CategoryID WHERE P.ProductName = (     SELECT ProductName     FROM (         SELECT ProductID, SUM(Quantity) AS TotalQuantity         FROM OrderDetails         GROUP BY ProductID         ORDER BY TotalQuantity DESC         LIMIT 1     ) AS SubQuery     JOIN Products ON SubQuery.ProductID = Products.ProductID )
SELECT     (SELECT UnitPrice FROM Products WHERE ProductName = 'Chef Anton\'s Cajun Seasoning') -     (SELECT UnitPrice FROM Products WHERE ProductName = 'Chef Anton\'s Gumbo Mix') AS PriceDifference WHERE     EXISTS(SELECT * FROM Suppliers WHERE Suppliers.CompanyName = 'New Orleans Cajun Delights' AND Suppliers.SupplierID = Products.SupplierID)
SELECT ProductName FROM Products WHERE SupplierID = (     SELECT SupplierID     FROM Suppliers     WHERE CompanyName = 'Cooperativa de Quesos ''Las Cabras''' ) AND UnitPrice > 20;
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.CompanyName = 'Tokyo Traders' AND od.Quantity > 40;
SELECT Categories.CategoryName FROM Categories JOIN Products ON Categories.CategoryID = Products.CategoryID WHERE Products.SupplierID IN (     SELECT SupplierID     FROM Suppliers     WHERE CompanyName = 'Exotic Liquids' ) AND Products.UnitsInStock > 100;
SELECT     COUNT(DISTINCT P.ProductName) AS NumOfProducts,     (SUM(CASE WHEN OD.Quantity < 50 THEN OD.Quantity ELSE 0 END) * 100 / SUM(OD.Quantity)) AS PercentageLessThan50 FROM     Products P INNER JOIN     OrderDetails OD ON P.ProductID = OD.ProductID;
SELECT     SUM(case when ProductName = 'Geitost' then Quantity else 0 end) as TotalGeitostQuantity,     (SUM(case when ProductName = 'Geitost' then Quantity else 0 end) / SUM(Quantity)) * 100 as PercentageOfTotal FROM     Orders o JOIN     OrderDetails od ON o.OrderID = od.OrderID JOIN     Products p ON od.ProductID = p.ProductID
SELECT Title FROM Employees WHERE FirstName = 'Robert' AND LastName = 'King';
SELECT ShipperName FROM Shippers WHERE Phone = '(503) 555-9931';
SELECT Employees.Address, Employees.HomePhone FROM Employees WHERE Employees.FirstName = 'Margaret' AND Employees.LastName = 'Peacock';
Error: 第 6608 个样本有 3 个SQL。
SELECT ProductName FROM Products WHERE CategoryID = (     SELECT CategoryID     FROM Categories     WHERE CategoryName = 'Confections' );
SELECT Suppliers.CompanyName, Suppliers.ContactName FROM Suppliers JOIN Products ON Suppliers.SupplierID = Products.SupplierID WHERE Products.ProductName = 'Sir Rodney''s Marmalade';
SELECT E.FirstName, E.LastName FROM Employees E JOIN EmployeeTerritories ET ON E.EmployeeID = ET.EmployeeID JOIN Territories T ON ET.TerritoryID = T.TerritoryID WHERE T.TerritoryDescription = 'Denver';
SELECT t.TerritoryDescription FROM Territories t JOIN EmployeeTerritories et ON t.TerritoryID = et.TerritoryID JOIN Employees e ON et.EmployeeID = e.EmployeeID WHERE e.FirstName = 'Laura' AND e.LastName = 'Callahan'
SELECT COUNT(*) FROM Orders WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'Federal Shipping');
SELECT p.ProductName FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.Country = 'Finland';
SELECT Categories.CategoryName, Categories.Description FROM Products JOIN Categories ON Products.CategoryID = Categories.CategoryID WHERE Products.ProductName = 'Mozzarella di Giovanni';
SELECT s.SupplierName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.Description = 'cheeses';
SELECT ProductName FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Zaanse Snoepfabriek');
SELECT ProductName, UnitPrice FROM Products WHERE SupplierID = (     SELECT SupplierID     FROM Suppliers     WHERE CompanyName = 'Plutzer Lebensmittelgromrkte AG' ) AND Discontinued = 1;
SELECT DISTINCT Customers.City FROM Customers JOIN Orders ON Customers.CustomerID = Orders.CustomerID JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID JOIN Products ON OrderDetails.ProductID = Products.ProductID WHERE Products.ProductName = 'Mishi Kobe Niku';
SELECT     (COUNT(CASE WHEN Orders.ShipVia = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'Speedy Express') AND Orders.ShipCountry = 'Sweden' THEN OrderID END) * 100.0 / COUNT(OrderID)) AS Percentage FROM     Orders WHERE     Orders.ShipVia = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'Speedy Express');
SELECT COUNT(*) FROM Territories WHERE RegionID = 1;
SELECT Region, COUNT(TerritoryDescription) AS TotalTerritories FROM Territories GROUP BY Region;
SELECT COUNT(*) FROM Suppliers WHERE Country = 'UK';
SELECT ContactName FROM Suppliers WHERE CompanyName = 'Tokyo Traders';
SELECT COUNT(*) FROM Employees WHERE Country = 'USA' AND Title = 'Sales Representative';
Error: 第 6626 个样本有 2 个SQL。
SELECT COUNT(*) FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Plutzer Lebensmittelgromrkte AG') AND UnitsInStock = 0 AND UnitsOnOrder > 0;
SELECT P.ProductName, SUM(OD.Quantity) as TotalQuantity FROM Products P JOIN OrderDetails OD ON P.ProductID = OD.ProductID WHERE P.UnitPrice = (SELECT MAX(UnitPrice) FROM Products) GROUP BY P.ProductID;
SELECT E.FirstName, E.LastName, E.Title FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE O.OrderID = (     SELECT MIN(OrderID)     FROM Orders )
SELECT T3.ProductName, COUNT(T3.ProductID) AS CommonProduct FROM Orders AS T1 JOIN OrderDetails AS T2 ON T1.OrderID = T2.OrderID JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.CustomerID IN (     SELECT CustomerID     FROM Customers     WHERE Country = 'Germany' ) GROUP BY T3.ProductID ORDER BY CommonProduct DESC LIMIT 1;
SELECT SUM(T3.UnitPrice * T3.Quantity) FROM Orders AS T1 JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID JOIN `Order Details` AS T3 ON T1.OrderID = T3.OrderID WHERE T2.CompanyName = 'Speedy Express' AND T1.ShipCountry = 'Brazil';
SELECT     (SELECT COUNT(*) FROM Employees WHERE ReportsTo = 2) AS SubordinateCount,     (SELECT MAX(od.Quantity * p.Price)      FROM Orders o      JOIN OrderDetails od ON o.OrderID = od.OrderID      JOIN Products p ON od.ProductID = p.ProductID      WHERE o.EmployeeID IN (SELECT EmployeeID FROM Employees WHERE ReportsTo = 2)) AS MaxOrderValue;
SELECT E.FirstName, E.LastName, SUM(P.Price * OD.Quantity) AS TotalSales FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID JOIN OrderDetails OD ON O.OrderID = OD.OrderID JOIN Products P ON OD.ProductID = P.ProductID WHERE E.Title = 'Sales Representative' GROUP BY E.EmployeeID, E.FirstName, E.LastName ORDER BY TotalSales DESC LIMIT 1;
SELECT COUNT(EmployeeID), Region FROM Employees WHERE Country = 'UK' GROUP BY Region;
SELECT     c.CustomerName,     o.ShipCountry FROM     Customers c JOIN     Orders o ON c.CustomerID = o.CustomerID JOIN     OrderDetails od ON o.OrderID = od.OrderID JOIN     Products p ON od.ProductID = p.ProductID WHERE     od.Quantity * p.Price = (         SELECT             MAX(od2.Quantity * p2.Price)         FROM             OrderDetails od2         JOIN             Products p2 ON od2.ProductID = p2.ProductID     ) GROUP BY     c.CustomerName, o.ShipCountry;
SELECT     c.CustomerName,     ct.CategoryName FROM     Customers c JOIN     Orders o ON c.CustomerID = o.CustomerID JOIN     OrderDetails od ON o.OrderID = od.OrderID JOIN     Products p ON od.ProductID = p.ProductID JOIN     Categories ct ON p.CategoryID = ct.CategoryID WHERE     c.CustomerID = (         SELECT             sub_c.CustomerID         FROM             Customers sub_c         JOIN             Orders sub_o ON sub_c.CustomerID = sub_o.CustomerID         GROUP BY             sub_c.CustomerID         ORDER BY             COUNT(sub_c.CustomerID) DESC         LIMIT 1     ) GROUP BY     c.CustomerName, ct.CategoryName ORDER BY     COUNT(ct.CategoryID) DESC LIMIT 1;
WITH ConfectionsSales AS (   SELECT od.ProductID, SUM(od.Quantity * p.Price) AS TotalSales   FROM OrderDetails od   JOIN Products p ON od.ProductID = p.ProductID   JOIN Categories c ON p.CategoryID = c.CategoryID   WHERE c.CategoryName = 'Confections'   GROUP BY od.ProductID ) SELECT p.ProductName, MAX(TotalSales) as TotalSalesGenerated FROM ConfectionsSales cs JOIN Products p ON cs.ProductID = p.ProductID;
SELECT ProductName FROM Products WHERE ProductID = 77;
SELECT SupplierName FROM Suppliers WHERE Country = 'USA';
SELECT Title FROM Employees WHERE FirstName = 'Laura' AND LastName = 'Callahan';
SELECT E.FirstName, E.LastName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID JOIN Customers C ON O.CustomerID = C.CustomerID WHERE C.CompanyName = 'Victuailles en stock'
SELECT COUNT(*) FROM Orders WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE CompanyName = 'Federal Shipping');
SELECT E.FirstName, E.LastName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID JOIN Customers C ON O.CustomerID = C.CustomerID WHERE C.City = 'Morristown';
SELECT TerritoryDescription FROM Territories WHERE RegionID = (     SELECT RegionID     FROM Regions     WHERE RegionDescription = 'Northern' );
SELECT COUNT(OrderID), OrderID FROM Orders JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID WHERE Employees.FirstName = 'Michael' AND Employees.LastName = 'Suyama';
SELECT     (SELECT COUNT(*) FROM Territories WHERE RegionID = 3) /     (SELECT COUNT(*) FROM Territories WHERE RegionID = 2) AS Ratio
SELECT EmployeeID FROM Employees WHERE EXISTS (     SELECT * FROM EmployeeTerritories     WHERE Employees.EmployeeID = EmployeeTerritories.EmployeeID     AND TerritoryID BETWEEN 1000 AND 2000 );
SELECT T3.TerritoryID, T3.TerritoryDescription, T2.RegionDescription FROM Employees AS T1 JOIN EmployeeTerritories AS T4 ON T1.EmployeeID = T4.EmployeeID JOIN Territories AS T3 ON T4.TerritoryID = T3.TerritoryID JOIN Region AS T2 ON T3.RegionID = T2.RegionID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio';
SELECT E.FirstName, E.LastName, COUNT(O.OrderID) as NumberOfOrders FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE E.Title = 'Sales Representative' AND YEAR(E.HireDate) = 1992 GROUP BY E.EmployeeID, E.FirstName, E.LastName ORDER BY NumberOfOrders DESC;
SELECT SUM(od.Quantity * p.UnitPrice * (1 - od.Discount)) AS TotalPayment FROM OrderDetails od JOIN Orders o ON od.OrderID = o.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Vegie-spread';
SELECT DISTINCT Suppliers.SupplierName FROM Suppliers JOIN Products ON Suppliers.SupplierID = Products.SupplierID JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID JOIN Orders ON OrderDetails.OrderID = Orders.OrderID WHERE Orders.OrderDate = '1996-08-14';
SELECT P.ProductName, S.CompanyName FROM Products P JOIN Suppliers S ON P.SupplierID = S.SupplierID WHERE P.ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products WHERE ProductID IN (SELECT ProductID FROM [OrderDetails] WHERE OrderID = 10337)) AND P.ProductID IN (SELECT ProductID FROM [OrderDetails] WHERE OrderID = 10337);
SELECT Shippers.CompanyName FROM Shippers JOIN Orders ON Shippers.ShipperID = Orders.ShipperID WHERE strftime('%Y', Orders.ShippedDate) = '1998' AND strftime('%m', Orders.ShippedDate) BETWEEN '01' AND '03' GROUP BY Shippers.ShipperID ORDER BY COUNT(Orders.OrderID) DESC LIMIT 1;
SELECT COUNT(*) FROM Customers WHERE City = 'London';
SELECT Title FROM Employees WHERE FirstName = 'Michael' AND LastName = 'Suyama'
SELECT FirstName, LastName FROM Employees WHERE BirthDate = '1955-03-04';
SELECT E.FirstName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE O.OrderID = 10250;
SELECT COUNT(*) FROM Orders WHERE EmployeeID IN (     SELECT EmployeeID     FROM Employees     WHERE City = 'Tacoma' );
SELECT Employees.Country FROM Employees JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID WHERE Orders.OrderID = 10257;
SELECT E.FirstName, E.LastName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE O.OrderID = 10270;
SELECT T1.Phone FROM Customers AS T1 JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10264;
SELECT C.Country FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID WHERE O.OrderID = 10276;
Error: 第 6663 个样本有 2 个SQL。
SELECT     (SUM(CASE WHEN EXTRACT(YEAR FROM o.OrderDate) = 1996 THEN e.Salary ELSE 0 END) / SUM(e.Salary)) * 100 AS percentage_salary FROM     Employees e     INNER JOIN Orders o ON e.EmployeeID = o.EmployeeID;
SELECT Employees.HireDate FROM Employees JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID WHERE Orders.OrderID = 10281;
SELECT COUNT(*) FROM Orders WHERE EmployeeID IN (     SELECT EmployeeID     FROM Employees     WHERE ReportsTo = 5 );
SELECT E.FirstName, E.LastName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE O.OrderID = 10280;
SELECT Shippers.CompanyName FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Orders.OrderID = 10260;
SELECT COUNT(*) FROM Orders WHERE ShipVia = (SELECT ShipperID FROM Shippers WHERE CompanyName = 'United Package');
SELECT T2.Phone FROM Orders AS T1 JOIN Shippers AS T2 ON T1.ShipperID = T2.ShipperID WHERE T1.OrderID = 10296;
SELECT COUNT(DISTINCT l_linenumber) FROM lineitem WHERE l_orderkey = 5 AND l_returnflag = 'R';
SELECT MAX(l_shipdate) FROM lineitem WHERE l_orderkey = 1;
SELECT o_orderkey FROM orders WHERE o_orderkey IN (4, 36) ORDER BY o_orderdate LIMIT 1;
SELECT o_comment FROM orders WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders);
SELECT c_phone FROM customer WHERE c_name = 'Customer#000000001'
SELECT COUNT(o_orderkey) FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey WHERE customer.c_mktsegment = 'HOUSEHOLD';
SELECT MAX(o_totalprice) FROM orders WHERE o_custkey IN (SELECT c_custkey FROM customer WHERE c_mktsegment = 'HOUSEHOLD');
SELECT o_comment FROM orders WHERE o_custkey IN (SELECT c_custkey FROM customer WHERE c_mktsegment = 'HOUSEHOLD');
SELECT c_name FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders LIMIT 1);
SELECT o_orderkey FROM orders WHERE o_custkey IN (     SELECT c_custkey     FROM customer     WHERE c_acctbal < 0 );
SELECT COUNT(o_orderkey) FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey WHERE customer.c_mktsegment = 'HOUSEHOLD' AND orders.o_orderpriority = '1-URGENT';
SELECT COUNT(*) FROM customer WHERE c_nationkey IN (     SELECT n_nationkey     FROM nation     WHERE n_name = 'BRAZIL' );
SELECT c_phone FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE customer.c_mktsegment = 'HOUSEHOLD' AND nation.n_name = 'BRAZIL';
SELECT COUNT(*) FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'GERMANY' AND customer.c_acctbal > 1000;
SELECT COUNT(*) FROM orders WHERE o_custkey IN (     SELECT c_custkey     FROM customer     WHERE c_nationkey IN (         SELECT n_nationkey         FROM nation         WHERE n_name = 'GERMANY'     ) );
SELECT SUM(o_totalprice) FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'GERMANY';
Error: 第 6687 个样本有 2 个SQL。
SELECT AVG(o_totalprice) FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'GERMANY';
SELECT (COUNT(c.c_custkey) FILTER (WHERE n.n_name = 'GERMANY')) * 100.0 / COUNT(c.c_custkey) AS percentage FROM customer c JOIN nation n ON c.c_nationkey = n.n_nationkey;
SELECT COUNT(*) FROM nation WHERE n_regionkey = 2;
SELECT n_name FROM nation JOIN supplier ON nation.n_nationkey = supplier.s_nationkey WHERE supplier.s_suppkey = 34;
SELECT r_name FROM region WHERE r_regionkey = (     SELECT n_regionkey     FROM nation     WHERE n_nationkey = (         SELECT s_nationkey         FROM supplier         WHERE s_name = 'Supplier#000000129'     ) );
SELECT n_name FROM nation JOIN customer ON nation.n_nationkey = customer.c_nationkey WHERE customer.c_name = 'Customer#000000055';
SELECT r_name FROM region WHERE r_regionkey = (     SELECT n_regionkey     FROM nation     WHERE n_nationkey = (         SELECT c_nationkey         FROM customer         WHERE c_name = 'Customer#00106936'     ) );
SELECT COUNT(*) FROM customer WHERE c_acctbal < 0 AND c_nationkey IN (     SELECT n_nationkey     FROM nation     WHERE n_name = 'MOROCCO' );
Error: 第 6696 个样本有 3 个SQL。
SELECT T2.l_suppkey FROM orders AS T1 JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_totalprice = 218195.43 AND T2.l_returnflag = 'R'
SELECT MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax)) FROM lineitem WHERE o_clerk = 'Clerk#000000936' AND o_orderstatus = '4-NOT SPECIFIED' AND o_orderdate = '1995-03-13' AND l_shipmode = 'TRUCK';
SELECT MIN(DATEDIFF(l_receiptdate, l_commitdate)) FROM orders JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE o_orderdate = '1996-07-27' AND o_custkey = 129301;
SELECT c_name FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey WHERE orders.o_clerk = 'Clerk#000000803' AND orders.o_orderdate = '1997-12-10';
SELECT (l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity) AS Profit FROM lineitem, partsupp WHERE l_suppkey = 7414 AND l_orderkey = 817154 AND l_suppkey = ps_suppkey AND l_partkey = ps_partkey;
SELECT n_name FROM nation N JOIN supplier S ON N.n_nationkey = S.s_nationkey WHERE S.s_acctbal < 0 GROUP BY n_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT CAST(SUM(CASE WHEN r_name = 'EUROPE' THEN 1 ELSE 0 END) AS REAL) / COUNT(n_nationkey) * 100 AS percentage FROM nation n JOIN region r ON n.n_regionkey = r.r_regionkey;
SELECT CAST(SUM(CASE WHEN s_acctbal < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(s_name) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'JAPAN';
SELECT c_name FROM customer WHERE c_acctbal = (SELECT MIN(c_acctbal) FROM customer);
SELECT COUNT(*) FROM orders WHERE o_orderkey IN (     SELECT l_orderkey     FROM lineitem     WHERE YEAR(l_shipdate) = 1998 );
SELECT COUNT(c_custkey) FROM customer WHERE c_acctbal < 0;
SELECT COUNT(l_linenumber) FROM lineitem WHERE l_returnflag = 'R' AND YEAR(l_shipdate) = 1994 AND l_shipmode = 'AIR';
SELECT COUNT(*) FROM customer WHERE c_mktsegment = 'AUTOMOBILE';
SELECT o_orderkey FROM orders WHERE o_orderkey IN (     SELECT l_orderkey     FROM lineitem     WHERE l_extendedprice = (         SELECT MAX(l_extendedprice)         FROM lineitem     ) ) ORDER BY o_orderkey DESC LIMIT 2;
SELECT o_orderdate FROM orders WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders)
SELECT n.n_name FROM nation n JOIN customer c ON n.n_nationkey = c.c_nationkey GROUP BY n.n_name ORDER BY COUNT(c.c_custkey) DESC LIMIT 1;
SELECT COUNT(*) FROM orders JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE orders.o_orderpriority = '1-URGENT' AND DATEDIFF(lineitem.l_shipdate, orders.o_orderdate) = 1;
SELECT COUNT(*) FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE customer.c_acctbal < 0 AND customer.c_mktsegment = 'HOUSEHOLD' AND nation.n_name = 'RUSSIA';
SELECT COUNT(*) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'JAPAN';
SELECT COUNT(*) FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE l.l_shipmode = 'SHIP' AND o.o_orderpriority = '3-MEDIUM';
SELECT c_mktsegment, COUNT(c_custkey) AS num_customers FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'UNITED STATES' GROUP BY c_mktsegment ORDER BY num_customers DESC LIMIT 1;
SELECT n_name FROM nation JOIN region ON nation.n_regionkey = region.r_regionkey WHERE r_name = 'ASIA';
SELECT p_name FROM part JOIN partsupp ON part.p_partkey = partsupp.ps_partkey WHERE part.p_mfgr = 'Manufacturer#3' AND partsupp.ps_supplycost = 1000;
SELECT COUNT(*) FROM nation WHERE n_regionkey IN (     SELECT r_regionkey     FROM region     WHERE r_comment = 'asymptotes sublate after the r.' );
SELECT COUNT(*) FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN lineitem l ON ps.ps_suppkey = l.l_suppkey WHERE p.p_mfgr = 'Manufacturer#5' AND p.p_retailprice < 1000 AND l.l_shipmode = 'RAIL';
SELECT (l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity) AS Profit FROM lineitem JOIN partsupp ON lineitem.l_suppkey = partsupp.ps_suppkey JOIN part ON lineitem.l_partkey = part.p_partkey WHERE part.p_name = 'smoke turquoise purple blue salmon' AND lineitem.l_receiptdate = '1996-05-07' AND lineitem.l_shipinstruct = 'DELIVER IN PERSON';
Error: 第 6723 个样本有 2 个SQL。
SELECT     c.c_name,     AVG(o.o_totalprice) AS avg_total_price_per_order FROM     customer c JOIN     orders o ON c.c_custkey = o.o_custkey GROUP BY     c.c_custkey, c.c_name ORDER BY     COUNT(o.o_orderkey) DESC LIMIT 3;
SELECT COUNT(l_linenumber) FROM lineitem WHERE l_shipdate = '1993-12-04';
SELECT o_orderdate FROM orders WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders)
SELECT (COUNT(c_custkey WHERE c_acctbal < 0) / COUNT(c_custkey)) * 100 AS percentage FROM customer;
SELECT COUNT(*) FROM partsupp WHERE ps_availqty < 10;
SELECT CAST(SUM(CASE WHEN p_mfgr = 'Manufacturer#3' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(p_partkey) AS percentage FROM part;
SELECT p_name FROM part WHERE p_type = 'MEDIUM PLATED BRASS' LIMIT 5;
SELECT COUNT(*) FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE l.l_shipdate LIKE '1998-11-%' AND l.l_shipmode = 'AIR' AND o.o_orderpriority = '1-URGENT';
SELECT COUNT(*) FROM customer WHERE c_nationkey IN (     SELECT n_nationkey     FROM nation     WHERE n_name = 'INDIA' );
SELECT COUNT(*) FROM customer WHERE c_acctbal < 0 AND c_nationkey IN (     SELECT n_nationkey     FROM nation     WHERE n_name = 'MOROCCO' );
SELECT n_nationkey, n_name FROM nation JOIN region ON nation.n_regionkey = region.r_regionkey WHERE region.r_name = 'Africa';
SELECT SUM(o_totalprice) FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey WHERE customer.c_name = 'Customer#000000013';
SELECT COUNT(l_linenumber), SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) FROM lineitem JOIN orders ON l_orderkey = o_orderkey JOIN customer ON o_custkey = c_custkey WHERE c_name = 'Customer#000021159';
SELECT SUM(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity) FROM lineitem JOIN partsupp ON l_suppkey = ps_suppkey AND l_partkey = ps_partkey JOIN part ON p_partkey = l_partkey WHERE p_name = 'chocolate floral blue coral cyan';
SELECT CAST(SUM(CASE WHEN n_name = 'GERMANY' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(s_suppkey) AS percentage FROM supplier s JOIN nation n ON s.s_nationkey = n.n_nationkey;
SELECT s_name FROM supplier JOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'smoke red pale saddle plum';
SELECT COUNT(s_name) FROM supplier WHERE s_acctbal < 0 AND s_nationkey IN (     SELECT n_nationkey     FROM nation     WHERE n_regionkey IN (         SELECT r_regionkey         FROM region         WHERE r_name = 'MIDDLE EAST'     ) );
SELECT p.p_name FROM part p JOIN lineitem l ON p.p_partkey = l.l_partkey WHERE l.l_shipmode = 'RAIL' AND l.l_shipdate = '1995-12-01' AND l.l_discount = 0.1;
SELECT p.p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN supplier s ON ps.ps_suppkey = s.s_suppkey WHERE s.s_name = 'Supplier#000000018' AND ps.ps_supplycost > 900;
SELECT COUNT(*) FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE EXTRACT(YEAR FROM l.l_shipdate) = 1994;
SELECT COUNT(*) FROM lineitem WHERE l_shipmode = 'RAIL' AND l_quantity < 30;
SELECT COUNT(*) FROM customer WHERE c_mktsegment = 'FURNITURE' AND c_nationkey = 1;
SELECT c_phone FROM customer WHERE c_acctbal = (SELECT MAX(c_acctbal) FROM customer);
SELECT o_orderpriority FROM orders WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders)
SELECT COUNT(*) FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'UNITED STATES';
SELECT COUNT(*) FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'BRAZIL' AND customer.c_mktsegment = 'automobile';
SELECT o_comment FROM orders WHERE o_custkey IN (     SELECT c_custkey     FROM customer     WHERE c_mktsegment = 'Furniture' ) LIMIT 5;
SELECT n_name FROM nation JOIN region ON nation.n_regionkey = region.r_regionkey WHERE r_name = 'ASIA';
SELECT n_name FROM nation WHERE n_regionkey IN (     SELECT r_regionkey     FROM region     WHERE r_comment = 'furiously express accounts wake sly' );
SELECT COUNT(s_suppkey) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'GERMANY';
SELECT COUNT(*) FROM customer c JOIN nation n ON c.c_nationkey = n.n_nationkey JOIN region r ON n.n_regionkey = r.r_regionkey WHERE r.r_name = 'ASIA' AND c.c_acctbal < 0;
SELECT c_phone FROM customer WHERE c_custkey = (     SELECT o_custkey     FROM orders     WHERE o_totalprice = (         SELECT MAX(o_totalprice)         FROM orders     ) );
SELECT COUNT(*) FROM lineitem JOIN part ON lineitem.l_partkey = part.p_partkey WHERE part.p_retailprice > 1000 AND lineitem.l_shipmode = 'SHIP';
SELECT c_name, c_mktsegment FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey WHERE orders.o_totalprice = 199180.63;
SELECT n_name, r_name FROM nation JOIN region ON nation.n_regionkey = region.r_regionkey JOIN customer ON nation.n_nationkey = customer.c_nationkey WHERE customer.c_address = 'wH55UnX7 VI';
SELECT COUNT(*) FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'BRAZIL' AND customer.c_acctbal < 1000;
SELECT n_name FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE customer.c_mktsegment = 'BUILDING' AND customer.c_acctbal > (SELECT AVG(c_acctbal) * 0.8 FROM customer)
SELECT     (COUNT(c.c_custkey) FILTER (WHERE n.n_name = 'United States')) / COUNT(c.c_custkey) * 100 AS percentage FROM     customer c JOIN     nation n ON c.c_nationkey = n.n_nationkey WHERE     c.c_acctbal < 4000;
SELECT c_name, c_phone FROM customer WHERE c_acctbal > 9000;
SELECT AVG(l_linenumber) FROM lineitem WHERE l_shipdate BETWEEN '1994-04-01' AND '1994-04-30';
SELECT o_orderkey FROM orders WHERE o_totalprice BETWEEN 200000 AND 300000;
SELECT p_partkey FROM part WHERE p_retailprice > (SELECT AVG(p_retailprice) FROM part);
SELECT     (COUNT(CASE WHEN ps_supplycost > 500 THEN ps_suppkey END) * 100.0 / COUNT(ps_suppkey)) AS percentage FROM     partsupp;
SELECT s_suppkey, s_acctbal FROM supplier ORDER BY s_acctbal DESC LIMIT 10;
SELECT COUNT(DISTINCT T1.c_custkey) FROM customer AS T1 INNER JOIN orders AS T2 ON T1.c_custkey = T2.o_custkey WHERE T1.c_acctbal > 0 AND T2.o_orderpriority = '1-URGENT'
SELECT c_name, c_phone FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'INDIA' AND customer.c_acctbal > (     SELECT AVG(c_acctbal)     FROM customer     JOIN nation ON customer.c_nationkey = nation.n_nationkey     WHERE nation.n_name = 'INDIA' );
SELECT p.p_partkey, p.p_name, ps.ps_supplycost FROM part AS p JOIN partsupp AS ps ON p.p_partkey = ps.ps_partkey JOIN supplier AS s ON ps.ps_suppkey = s.s_suppkey WHERE s.s_name = 'Supplier#000000654' ORDER BY ps.ps_supplycost DESC LIMIT 5;
SELECT     (COUNT(c.c_name) FILTER (WHERE c.c_mktsegment = 'AUTOMOBILE')) * 100.0 / COUNT(c.c_name) AS percentage FROM     customer c JOIN     nation n ON c.c_nationkey = n.n_nationkey WHERE     n.n_name = 'FRANCE';
SELECT p.p_name, SUM((l.l_extendedprice * (1 - l.l_discount)) - (ps.ps_supplycost * l.l_quantity)) AS profit FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN lineitem l ON ps.ps_suppkey = l.l_suppkey AND p.p_partkey = l.l_partkey GROUP BY p.p_name ORDER BY profit DESC LIMIT 1;
SELECT n.n_name FROM nation n JOIN customer c ON n.n_nationkey = c.c_nationkey GROUP BY n.n_name HAVING COUNT(c.c_name) < (SELECT AVG(cnt) FROM (SELECT COUNT(*) AS cnt FROM customer GROUP BY c_nationkey) sub) ORDER BY COUNT(c.c_name);
SELECT     (COUNT(c.c_custkey) FILTER (WHERE c.c_mktsegment = 'HOUSEHOLD')) * 100.0 / COUNT(c.c_custkey) AS percentage FROM     customer c JOIN     nation n ON c.c_nationkey = n.n_nationkey JOIN     region r ON n.n_regionkey = r.r_regionkey WHERE     r.r_name = 'AFRICA';
SELECT p.p_name FROM partsupp ps JOIN part p ON ps.ps_partkey = p.p_partkey ORDER BY ps.ps_availqty DESC LIMIT 10;
SELECT     (AVG(case when l_shipmode = 'SHIP' then p_retailprice else null end) -      AVG(case when l_shipmode = 'AIR' then p_retailprice else null end)) FROM     part p JOIN     partsupp ps ON p.p_partkey = ps.ps_partkey JOIN     lineitem l ON ps.ps_suppkey = l.l_suppkey AND p.p_partkey = l.l_partkey;
SELECT AVG(l_discount) FROM lineitem l JOIN part p ON l.l_partkey = p.p_partkey WHERE p.p_mfgr = 'Manufacturer#5';
SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.l_orderkey = orders.o_orderkey WHERE lineitem.l_shipmode = 'RAIL' AND orders.o_orderpriority = '3-MEDIUM';
SELECT     (COUNT(CASE WHEN s_acctbal < avg_acctbal THEN s_suppkey END) * 100.0 / COUNT(s_suppkey)) AS percentage FROM     supplier s JOIN     nation n ON s.s_nationkey = n.n_nationkey JOIN     region r ON n.n_regionkey = r.r_regionkey JOIN     (SELECT AVG(s_acctbal) as avg_acctbal FROM supplier) subquery WHERE     r.r_name = 'EUROPE'
Error: 第 6780 个样本有 2 个SQL。
SELECT c_custkey FROM customer WHERE c_acctbal < 0;
SELECT l_orderkey, l_linenumber, l_extendedprice * (1 - l_discount) as discounted_price FROM lineitem ORDER BY discounted_price LIMIT 3;
SELECT COUNT(DISTINCT l_orderkey) FROM lineitem WHERE l_returnflag = 'R' AND l_quantity > 10;
SELECT SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) FROM lineitem WHERE l_shipmode = 'AIR' AND l_shipinstruct = 'NONE';
SELECT COUNT(*) FROM orders WHERE o_orderpriority = '1-URGENT' AND o_orderdate = (SELECT MAX(o_orderdate) FROM orders WHERE o_orderpriority <> '1-URGENT');
SELECT COUNT(*) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'EGYPT' AND supplier.s_acctbal < 0;
SELECT COUNT(l.linenumber) FROM lineitem l JOIN orders o ON l.orderkey = o.orderkey WHERE l.shipmode = 'REG AIR' AND o.orderdate = '1995-03-22';
SELECT COUNT(s_suppkey) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey JOIN region ON nation.n_regionkey = region.r_regionkey WHERE region.r_name = 'EUROPE';
SELECT T3.c_mktsegment FROM (     SELECT T1.c_custkey, COUNT(T2.o_orderkey) as order_count     FROM customer AS T1     JOIN orders AS T2 ON T1.c_custkey = T2.o_custkey     WHERE T2.o_orderdate LIKE '1994-04-%'     GROUP BY T1.c_custkey ) AS T4 JOIN customer AS T3 ON T4.c_custkey = T3.c_custkey ORDER BY T4.order_count DESC LIMIT 1;
SELECT p.p_name FROM part p, partsupp ps, supplier s WHERE p.p_partkey = ps.ps_partkey AND ps.ps_suppkey = s.s_suppkey AND s.s_name = 'Supplier#000000034';
SELECT ps_supplycost FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_type = 'LARGE BURNISHED COPPER';
SELECT COUNT(DISTINCT c.c_custkey) FROM customer c JOIN orders o ON c.c_custkey = o.o_custkey JOIN nation n ON c.c_nationkey = n.n_nationkey WHERE n.n_name = 'MOZAMBIQUE' AND o.o_orderpriority = '5-LOW';
SELECT p.p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey WHERE ps.ps_availqty < 10 ORDER BY ps.ps_supplycost LIMIT 1;
SELECT COUNT(DISTINCT o_clerk) FROM orders WHERE o_custkey IN (     SELECT c_custkey     FROM customer     WHERE c_address = 'uFTe2u518et8Q8UC' );
SELECT DISTINCT p_name FROM part WHERE p_partkey IN (     SELECT l_partkey     FROM lineitem     WHERE l_discount = 0.0000 );
SELECT COUNT(*) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'GERMANY' AND supplier.s_comment LIKE '%carefully regular packages%';
SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.l_orderkey = orders.o_orderkey WHERE lineitem.l_shipdate = '1994-11-19' AND orders.o_orderdate = '1994-09-21';
SELECT SUM(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity) / COUNT(ps_partkey) AS average_profit FROM lineitem JOIN partsupp ON l_partkey = ps_partkey AND l_suppkey = ps_suppkey JOIN part ON l_partkey = p_partkey WHERE p_type = 'PROMO BRUSHED STEEL';
SELECT (COUNT(c.c_custkey) FILTER (WHERE n.n_name = 'IRAN')) * 100.0 / COUNT(c.c_custkey) AS percentage FROM customer c JOIN nation n ON c.c_nationkey = n.n_nationkey WHERE c.c_mktsegment = 'HOUSEHOLD';
SELECT c_mktsegment, c_name, c_address, c_phone FROM customer WHERE c_custkey = 3;
SELECT l_linenumber FROM lineitem WHERE l_discount = 0.1 LIMIT 3;
SELECT COUNT(*) FROM lineitem WHERE l_quantity > 40 AND l_shipmode = 'AIR';
SELECT l_shipmode FROM lineitem WHERE l_shipinstruct = 'DELIVER IN PERSON' GROUP BY l_shipmode ORDER BY COUNT(*) DESC LIMIT 1;
SELECT o_totalprice, o_orderpriority FROM orders WHERE o_orderkey = 33;
SELECT COUNT(*) FROM orders WHERE YEAR(o_orderdate) = '1998' AND o_totalprice < 950;
SELECT c_name FROM customer WHERE c_acctbal < 0 LIMIT 3;
SELECT l_extendedprice * (1 - l_discount) AS discounted_price FROM lineitem WHERE l_linenumber = 1;
SELECT     (SELECT COUNT(l_linenumber) FROM lineitem WHERE l_returnflag IN ('A', 'N') AND l_extendedprice < 16947.7)     -     (SELECT COUNT(l_linenumber) FROM lineitem WHERE l_returnflag = 'R' AND l_extendedprice < 16947.7)     AS difference;
SELECT ps_supplycost FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_type = 'large plated tin'
SELECT p.p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey WHERE ps.ps_availqty > 9998 LIMIT 3;
SELECT p_name FROM part JOIN partsupp ON part.p_partkey = partsupp.ps_partkey WHERE p_container = 'WRAP BAG' AND ps_supplycost < 10 LIMIT 2;
SELECT n_name FROM nation WHERE n_nationkey = (SELECT s_nationkey FROM supplier WHERE s_suppkey = 1)
SELECT n_name FROM nation JOIN region ON nation.n_regionkey = region.r_regionkey WHERE region.r_name = 'AFRICA'
SELECT r_name FROM region JOIN nation ON region.r_regionkey = nation.n_regionkey GROUP BY r_name ORDER BY COUNT(n_name) LIMIT 1;
SELECT COUNT(*) FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE customer.c_mktsegment = 'FURNITURE' AND nation.n_name = 'IRAQ';
SELECT c_name FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey WHERE customer.c_custkey = 93697 AND orders.o_totalprice = 191918.92;
SELECT n.n_name, r.r_name FROM customer AS c JOIN nation AS n ON c.c_nationkey = n.n_nationkey JOIN region AS r ON n.n_regionkey = r.r_regionkey WHERE c.c_name = 'Customer#000000008';
SELECT (lineitem.l_receiptdate - lineitem.l_commitdate) AS delivery_time, orders.o_clerk FROM lineitem JOIN orders ON lineitem.l_orderkey = orders.o_orderkey WHERE lineitem.l_orderkey = 6;
SELECT COUNT(*) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'Japan' AND supplier.s_acctbal < 0;
SELECT c_name FROM customer WHERE c_acctbal = (SELECT MAX(c_acctbal) FROM customer);
SELECT o_orderdate FROM orders WHERE o_orderpriority = '1-URGENT'
SELECT COUNT(*) FROM lineitem WHERE l_shipinstruct = 'DELIVER IN PERSON';
SELECT MAX(s_acctbal) FROM supplier;
SELECT COUNT(*) FROM partsupp WHERE ps_availqty < 10;
SELECT n_name FROM nation WHERE n_regionkey IN (SELECT r_regionkey FROM region WHERE r_name = 'EUROPE')
SELECT ps_supplycost FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'violet olive rose ivory sandy';
SELECT c_phone FROM customer WHERE c_nationkey IN (SELECT n_nationkey FROM nation WHERE n_name = 'Ethiopia');
SELECT SUM(o_totalprice) FROM orders WHERE o_custkey IN (SELECT c_custkey FROM customer WHERE c_phone = '627-220-3983');
SELECT DISTINCT l_shipmode FROM lineitem JOIN orders ON lineitem.l_orderkey = orders.o_orderkey WHERE orders.o_orderdate = '1994-12-31';
SELECT s_acctbal FROM supplier WHERE s_suppkey = (     SELECT ps_suppkey     FROM partsupp     GROUP BY ps_suppkey     ORDER BY COUNT(ps_partkey) DESC     LIMIT 1 )
SELECT n_name FROM nation JOIN supplier ON nation.n_nationkey = supplier.s_nationkey WHERE supplier.s_acctbal = 4393.04;
SELECT r_name FROM region JOIN nation ON region.r_regionkey = nation.n_regionkey JOIN customer ON nation.n_nationkey = customer.c_nationkey GROUP BY r_name ORDER BY COUNT(customer.c_custkey) DESC LIMIT 1;
SELECT DISTINCT c_phone FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey WHERE o_totalprice > 300000;
SELECT DISTINCT o_clerk FROM orders JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE lineitem.l_shipmode = 'MAIL'
SELECT n_name FROM nation JOIN supplier ON nation.n_nationkey = supplier.s_nationkey GROUP BY n_name ORDER BY AVG(supplier.s_acctbal) ASC LIMIT 5;
SELECT s_address FROM supplier JOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_size = (SELECT MAX(p_size) FROM part);
SELECT p.p_name, s.s_name, MAX((l.l_extendedprice * (1 - l.l_discount)) - (ps.ps_supplycost * l.l_quantity)) as profit FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN supplier s ON ps.ps_suppkey = s.s_suppkey JOIN lineitem l ON l.l_partkey = p.p_partkey AND l.l_suppkey = s.s_suppkey GROUP BY p.p_name, s.s_name ORDER BY profit DESC LIMIT 1;
SELECT (COUNT(supplier.s_suppkey) / (SELECT COUNT(*) FROM supplier)) * 100 AS proportion FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey JOIN region ON nation.n_regionkey = region.r_regionkey WHERE region.r_name = 'ASIA'
SELECT o_totalprice FROM orders WHERE o_orderkey = 32;
SELECT COUNT(DISTINCT l_orderkey) FROM lineitem WHERE l_discount = 0;
SELECT l_linenumber FROM lineitem WHERE l_shipmode = 'truck' AND YEAR(l_shipdate) < 1997;
SELECT COUNT(*) FROM lineitem WHERE l_returnflag = 'R' AND EXTRACT(YEAR FROM l_shipdate) = 1998;
SELECT l_linenumber, l_quantity, l_shipmode FROM lineitem WHERE l_shipmode = 'AIR' ORDER BY l_quantity DESC LIMIT 1;
SELECT c_name FROM customer WHERE c_acctbal < 0;
SELECT COUNT(*) FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE customer.c_mktsegment = 'HOUSEHOLD' AND nation.n_name = 'GERMANY';
SELECT c_phone FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey WHERE orders.o_orderpriority = '1-URGENT'
SELECT c_name FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE lineitem.l_discount = (SELECT MAX(l_discount) FROM lineitem)
SELECT o_orderkey, MAX(o_totalprice) as total_price, l_shipdate as delivery_date FROM orders JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey GROUP BY o_orderkey, l_shipdate ORDER BY total_price DESC LIMIT 5;
SELECT o_comment FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey WHERE customer.c_mktsegment = 'FURNITURE'
SELECT c_name FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey WHERE orders.o_totalprice > 300000;
SELECT c_name FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'INDIA' AND customer.c_acctbal > 5000;
SELECT s_phone FROM supplier WHERE s_nationkey IN (SELECT n_nationkey FROM nation WHERE n_name = 'JAPAN');
SELECT s_name FROM supplier WHERE s_acctbal < 0 AND s_nationkey IN (     SELECT n_nationkey     FROM nation     WHERE n_name = 'ARGENTINA' );
SELECT COUNT(*) FROM nation n JOIN region r ON n.n_regionkey = r.r_regionkey WHERE r.r_name = 'ALGERIA';
SELECT DISTINCT c_name FROM customer JOIN orders ON c_custkey = o_custkey JOIN lineitem ON o_orderkey = l_orderkey WHERE l_discount = 0.1 AND o_orderdate BETWEEN '1994-01-01' AND '1995-01-01';
SELECT (COUNT(CASE WHEN r.r_name = 'America' THEN n.n_name END) * 100.0 / COUNT(n.n_name)) AS Percentage FROM nation n JOIN region r ON n.n_regionkey = r.r_regionkey;
SELECT (COUNT(c.custkey) FILTER (WHERE c.mktsegment = 'HOUSEHOLD')) * 100.0 / COUNT(c.custkey) as percentage FROM customer c JOIN nation n ON c.nationkey = n.nationkey WHERE n.name = 'Indonesia';
SELECT p_name FROM part WHERE p_type = 'PROMO BRUSHED STEEL';
SELECT p_comment FROM part WHERE p_name = 'burlywood plum powder puff mint';
SELECT COUNT(*) FROM part WHERE p_retailprice > 1900;
SELECT COUNT(*) FROM part WHERE p_type = 'PROMO BRUSHED STEEL' AND p_mfgr = 'Manufacturer#5';
SELECT DISTINCT p_brand FROM part WHERE p_type = 'PROMO BRUSHED STEEL';
SELECT p_name FROM part WHERE p_retailprice = (SELECT MAX(p_retailprice) FROM part);
SELECT p_name, p_size FROM part WHERE p_name IN ('pink powder drab lawn cyan', 'cornflower sky burlywood green beige') ORDER BY p_size DESC LIMIT 1;
SELECT COUNT(*) FROM part WHERE p_container = 'JUMBO CASE';
SELECT MIN(p_size) FROM part WHERE p_container = 'JUMBO CASE';
SELECT COUNT(*) FROM supplier WHERE s_acctbal < 0;
SELECT s_name FROM supplier ORDER BY s_acctbal DESC LIMIT 3;
SELECT s_phone FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'Germany';
SELECT s_name FROM supplier JOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light';
SELECT MIN(ps_supplycost) FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light';
SELECT s_name FROM supplier JOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light' ORDER BY partsupp.ps_supplycost LIMIT 1;
SELECT SUM(ps_availqty) FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light';
SELECT s_phone FROM supplier JOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light' ORDER BY partsupp.ps_availqty DESC LIMIT 1;
SELECT s_name FROM supplier WHERE s_suppkey IN (     SELECT ps_suppkey     FROM partsupp     WHERE ps_partkey = (         SELECT p_partkey         FROM part         WHERE p_retailprice = (             SELECT MAX(p_retailprice)             FROM part         )     ) );
SELECT COUNT(*) FROM partsupp ps JOIN supplier s ON ps.ps_suppkey = s.s_suppkey JOIN nation n ON s.s_nationkey = n.n_nationkey JOIN part p ON ps.ps_partkey = p.p_partkey WHERE p.p_name = 'hot spring dodger dim light' AND n.n_name = 'VIETNAM';
SELECT COUNT(*) FROM supplier s JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey JOIN part p ON ps.ps_partkey = p.p_partkey WHERE p.p_type = 'PROMO BRUSHED STEEL' AND s.s_acctbal < 0;
SELECT s_name FROM supplier JOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_brand = 'Brand#55'
SELECT COUNT(p_partkey) FROM part JOIN partsupp ON part.p_partkey = partsupp.ps_partkey WHERE p_type = 'PROMO BRUSHED STEEL' GROUP BY p_partkey HAVING SUM(ps_availqty) < 5000;
SELECT COUNT(DISTINCT o.o_orderkey) FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey JOIN part p ON l.l_partkey = p.p_partkey WHERE p.p_name = 'hot spring dodger dim light'
SELECT SUM(l_quantity) FROM lineitem JOIN part ON lineitem.l_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light';
SELECT o_orderkey FROM orders WHERE o_orderkey IN (     SELECT l_orderkey     FROM lineitem     JOIN part ON l_partkey = p_partkey     WHERE p_container = 'JUMBO CASE'     GROUP BY l_orderkey     HAVING COUNT(l_partkey) > 2 )
SELECT COUNT(*) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey JOIN region ON nation.n_regionkey = region.r_regionkey WHERE supplier.s_acctbal < 0 AND region.r_name = 'EUROPE';
SELECT COUNT(*) FROM supplier s JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey JOIN part p ON ps.ps_partkey = p.p_partkey JOIN nation n ON s.s_nationkey = n.n_nationkey JOIN region r ON n.n_regionkey = r.r_regionkey WHERE p.p_name = 'hot spring dodger dim light' AND r.r_name = 'EUROPE'
SELECT s_phone FROM supplier WHERE s_suppkey IN (     SELECT l_suppkey     FROM lineitem     WHERE l_orderkey = 1 )
SELECT COUNT(*) FROM supplier s JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey JOIN lineitem l ON ps.ps_partkey = l.l_partkey AND ps.ps_suppkey = l.l_suppkey WHERE l.l_orderkey = 4 AND s.s_acctbal < 0;
SELECT COUNT(*) FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN supplier s ON ps.ps_suppkey = s.s_suppkey JOIN lineitem l ON p.p_partkey = l.l_partkey AND s.s_suppkey = l.l_suppkey WHERE l.l_returnflag = 'R' AND s.s_acctbal < 0;
SELECT l_shipdate FROM lineitem JOIN part ON lineitem.l_partkey = part.p_partkey WHERE l_orderkey = 1 AND p_name = 'burnished seashell gainsboro navajo chocolate';
SELECT l_quantity FROM lineitem JOIN part ON lineitem.l_partkey = part.p_partkey WHERE lineitem.l_orderkey = 1 AND part.p_name = 'burnished seashell gainsboro navajo chocolate'
SELECT p_name, SUM(l_quantity) as total_quantity FROM part JOIN lineitem ON part.p_partkey = lineitem.l_partkey WHERE lineitem.l_orderkey = 1 AND p_name IN ('burnished seashell gainsboro navajo chocolate', 'salmon white grey tan navy') GROUP BY p_name ORDER BY total_quantity DESC LIMIT 1;
SELECT MAX(l.l_discount) FROM lineitem l JOIN partsupp ps ON l.l_suppkey = ps.ps_suppkey JOIN part p ON ps.ps_partkey = p.p_partkey WHERE p.p_name = 'burnished seashell gainsboro navajo chocolate';
SELECT DISTINCT T2.l_shipmode FROM part AS T1 JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_name = 'burnished seashell gainsboro navajo chocolate'
SELECT AVG(psup.ps_supplycost) FROM partsupp AS psup JOIN part AS p ON psup.ps_partkey = p.p_partkey WHERE p.p_name = 'hot spring dodger dim light';
SELECT ((MAX(ps_supplycost) - MIN(ps_supplycost)) / MIN(ps_supplycost)) * 100 AS Percentage_Higher FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light'
SELECT (l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity) AS Profit FROM lineitem JOIN partsupp ON lineitem.l_suppkey = partsupp.ps_suppkey WHERE lineitem.l_partkey = 98768 AND lineitem.l_orderkey = 1;
SELECT l_extendedprice * (1 - l_discount) AS discounted_price FROM part JOIN lineitem ON part.p_partkey = lineitem.l_partkey WHERE part.p_name = 'burnished seashell gainsboro navajo chocolate' AND lineitem.l_orderkey = 1;
SELECT c_mktsegment FROM customer WHERE c_acctbal = (SELECT MAX(c_acctbal) FROM customer);
SELECT COUNT(*) FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE YEAR(l.l_shipdate) = 1997 AND l.l_shipmode = 'MAIL';
SELECT COUNT(*) FROM customer WHERE c_mktsegment = 'FURNITURE';
SELECT COUNT(*) FROM lineitem WHERE year(l_shipdate) = 1994 AND l_shipmode = 'TRUCK' AND l_returnflag = 'R';
SELECT COUNT(*) FROM customer WHERE c_mktsegment = 'MACHINERY' AND c_acctbal < 0;
SELECT COUNT(*) FROM orders WHERE o_orderpriority = '1-URGENT' AND o_clerk = 'Clerk#000000001' AND YEAR(o_orderdate) = 1997;
SELECT c_name FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE DATEDIFF(l_receiptdate, l_commitdate) = (SELECT MAX(DATEDIFF(l_receiptdate, l_commitdate))  FROM lineitem)
SELECT SUM(o_totalprice) FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'ARGENTINA';
SELECT COUNT(DISTINCT c.c_custkey) FROM customer c JOIN orders o ON c.c_custkey = o.o_custkey WHERE c.c_mktsegment = 'BUILDING' AND o.o_totalprice >= 50000;
SELECT n.n_name FROM nation n JOIN supplier s ON n.n_nationkey = s.s_nationkey GROUP BY n.n_name ORDER BY COUNT(s.s_name) ASC LIMIT 1;
SELECT ps_supplycost FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'medium metallic grey dodger linen';
SELECT TOP 2 T2.n_name AS country FROM supplier AS T1 JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 GROUP BY T2.n_name ORDER BY SUM(T1.s_acctbal) DESC;
SELECT p.p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey WHERE ps.ps_supplycost > 1000;
SELECT n_name FROM nation JOIN supplier ON nation.n_nationkey = supplier.s_nationkey WHERE s_acctbal = (SELECT MIN(s_acctbal) FROM supplier)
SELECT o_clerk FROM orders JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE l_extendedprice = (SELECT MAX(l_extendedprice) FROM lineitem);
SELECT SUM(l_quantity) FROM lineitem l JOIN orders o ON l.l_orderkey = o.o_orderkey WHERE o.o_custkey = 101660 AND o.o_orderdate = '1995-10-05';
SELECT SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE o.o_custkey = 88931 AND o.o_orderdate = '1994-07-13';
SELECT p.p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN lineitem l ON ps.ps_suppkey = l.l_suppkey AND p.p_partkey = l.l_partkey JOIN orders o ON l.l_orderkey = o.o_orderkey WHERE o.o_custkey = 110942;
SELECT p.p_name, l.l_extendedprice * (1 - l.l_discount) AS discounted_price FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN lineitem l ON ps.ps_suppkey = l.l_suppkey AND p.p_partkey = l.l_partkey JOIN orders o ON l.l_orderkey = o.o_orderkey WHERE o.o_custkey = 111511 AND o.o_orderkey = 53159;
SELECT hi.height_in_inch FROM height_info hi JOIN PlayerInfo pi ON pi.height = hi.height_id WHERE pi.PlayerName = 'David Bornhammar';
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE height_info.height_in_inch > 74
SELECT COUNT(*) FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE height_info.height_in_inch > '6\'2"' AND PlayerInfo.nation = 'Sweden';
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE height_info.height_in_cm = (SELECT MAX(height_in_cm) FROM height_info);
SELECT weight_in_kg FROM weight_info JOIN PlayerInfo ON weight_info.weight_id = PlayerInfo.weight WHERE PlayerInfo.PlayerName = 'David Bornhammar';
SELECT COUNT(*) FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE weight_in_kg > 90;
SELECT COUNT(*) FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE weight_in_kg > 90 AND position_info = 'D';
SELECT T3.PlayerName FROM weight_info AS T1 JOIN PlayerInfo AS T3 ON T1.weight_id = T3.weight WHERE T1.weight_in_kg > 90 ORDER BY T3.sum_7yr_GP DESC LIMIT 1;
SELECT wi.weight_in_kg FROM weight_info wi JOIN (   SELECT pi.ELITEID, pi.sum_7yr_TOI   FROM PlayerInfo pi   WHERE pi.sum_7yr_TOI = (     SELECT MAX(sum_7yr_TOI) FROM PlayerInfo   ) ) as subquery ON wi.weight_id = subquery.ELITEID;
SELECT     (SELECT height_in_cm FROM height_info WHERE height_id = (         SELECT height FROM PlayerInfo WHERE PlayerName = 'David Bornhammar'     )) -     (SELECT height_in_cm FROM height_info WHERE height_id = (         SELECT height FROM PlayerInfo WHERE PlayerName = 'Pauli Levokari'     )) AS HeightDifferenceCM
SELECT COUNT(*) FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE PlayerInfo.shoots = 'R' AND weight_info.weight_in_kg > 90;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE weight_info.weight_in_kg > 90 AND PlayerInfo.shoots = 'R';
SELECT     (         SELECT weight_in_kg         FROM weight_info wi         WHERE wi.weight_id = (             SELECT weight             FROM PlayerInfo             WHERE PlayerName = 'David Bornhammar'         )     ) / POWER(         (             SELECT height_in_cm             FROM height_info hi             WHERE hi.height_id = (                 SELECT height                 FROM PlayerInfo                 WHERE PlayerName = 'David Bornhammar'             )         ) / 100,         2     ) AS BMI
SELECT AVG(h.height_in_cm) FROM height_info h JOIN PlayerInfo p ON h.height_id = p.height WHERE p.position_info = 'D';
SELECT weight_in_lbs FROM weight_info ORDER BY weight_in_lbs DESC LIMIT 1;
SELECT COUNT(*) FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE PlayerInfo.shoots = 'R' AND height_info.height_in_inch = '5''7"';
SELECT T1.PlayerName FROM PlayerInfo AS T1 JOIN (     SELECT ELITEID, MAX(PIM) as max_PIM     FROM SeasonStatus     WHERE LEAGUE = 'NHL' AND GP >= 500     GROUP BY ELITEID ) AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.sum_7yr_GP > 500 ORDER BY T2.max_PIM DESC LIMIT 1;
SELECT hi.height_in_cm FROM PlayerInfo pi JOIN height_info hi ON pi.height = hi.height_id WHERE pi.birthplace = 'Edmonton, AB, CAN' ORDER BY hi.height_in_cm DESC LIMIT 1;
SELECT COUNT(*) FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE PlayerInfo.overallby = 'Anaheim Ducks' AND PlayerInfo.draftyear = 2008 AND SeasonStatus.TEAM = 'U.S. National U18 Team';
SELECT wi.weight_in_kg FROM weight_info wi JOIN PlayerInfo pi ON pi.weight = wi.weight_id JOIN (   SELECT ELITEID, MAX(PLUSMINUS) as max_plusminus   FROM SeasonStatus   GROUP BY ELITEID ) ss ON ss.ELITEID = pi.ELITEID WHERE ss.max_plusminus = (   SELECT MAX(PLUSMINUS)   FROM SeasonStatus );
SELECT PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.LEAGUE = 'QMJHL' AND SeasonStatus.SEASON = '2004-2005' ORDER BY SeasonStatus.P DESC LIMIT 1;
SELECT DISTINCT p.PlayerName FROM PlayerInfo p JOIN SeasonStatus s ON p.ELITEID = s.ELITEID WHERE s.TEAM = 'Acadie-Bathurst Titan' AND s.GAMETYPE = 'Regular Season' AND s.SEASON = '1998-1999';
SELECT MAX(T2.GP) FROM PlayerInfo T1 JOIN SeasonStatus T2 ON T1.ELITEID = T2.ELITEID JOIN height_info T3 ON T1.height = T3.height_id WHERE T3.height_in_cm = (SELECT MAX(height_in_cm) FROM height_info);
SELECT PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.SEASON = '1997-1998' AND SeasonStatus.LEAGUE = 'OHL' ORDER BY birthdate DESC LIMIT 1;
SELECT COUNT(*) FROM PlayerInfo WHERE shoots = 'L' AND ELITEID IN (     SELECT ELITEID     FROM SeasonStatus     WHERE GP = 72 );
SELECT ABS(SUM(CASE WHEN GAMETYPE = 'Regular Season' THEN G ELSE 0 END) - SUM(CASE WHEN GAMETYPE = 'Playoffs' THEN G ELSE 0 END)) FROM SeasonStatus WHERE SEASON = '1998-1999' AND PlayerName = 'Pavel Brendl';
SELECT AVG(w.weight_in_lbs) FROM PlayerInfo p JOIN weight_info w ON p.weight = w.weight_id WHERE p.CSS_rank = (SELECT MAX(CSS_rank) FROM PlayerInfo);
SELECT MULTIPLY(DIVIDE(SUM(CASE WHEN GP > 20 THEN 1 ELSE 0 END), COUNT(ELITEID)), 100) FROM SeasonStatus WHERE SEASON = '2007-2008' AND GAMETYPE = 'Playoffs';
SELECT T1.PlayerName FROM PlayerInfo AS T1 JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.LEAGUE = 'WHL' AND T2.SEASON = '2007-2008' GROUP BY T1.PlayerName ORDER BY SUM(T2.G) DESC LIMIT 1;
SELECT T2.PlayerName FROM SeasonStatus AS T1 JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.TEAM = 'Chilliwack Chiefs' AND T1.P > 100;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE weight_info.weight_in_kg = 120;
SELECT T3.PlayerName, T1.height_in_cm FROM height_info AS T1 JOIN PlayerInfo AS T2 ON T1.height_id = T2.height JOIN (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Brian Gionta') AS T4 ON T2.ELITEID = T4.ELITEID WHERE T1.height_in_cm = (SELECT T1.height_in_cm FROM height_info AS T1 JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T2.PlayerName = 'Brian Gionta');
SELECT PlayerName, position_info FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID GROUP BY PlayerInfo.ELITEID ORDER BY SUM(PIM) DESC LIMIT 1;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.SEASON = CONCAT(PlayerInfo.draftyear, "-20") GROUP BY PlayerInfo.PlayerName ORDER BY SUM(SeasonStatus.P) DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN nation IN ('Belarus', 'Bulgaria', 'Czech Republic', 'Hungary', 'Moldova', 'Poland', 'Romania', 'Slovakia', 'Ukraine') THEN ELITEID END) * 100 / COUNT(ELITEID)) AS Percentage_Eastern_Europe FROM     PlayerInfo WHERE     overallby = 'Toronto Maple Leafs';
SELECT PlayerName FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs' AND draftyear = 2008 ORDER BY CSS_rank DESC LIMIT 1;
SELECT T1.PlayerName, T2.TEAM FROM PlayerInfo AS T1 JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON = '2006-2007' AND T2.LEAGUE = 'SuperElit' AND T2.GAMETYPE = 'Playoffs' ORDER BY T2.P DESC LIMIT 1;
SELECT COUNT(*) FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs' AND sum_7yr_GP > 300;
SELECT hi.height_in_cm FROM height_info hi JOIN PlayerInfo pi ON pi.height = hi.height_id JOIN SeasonStatus ss ON ss.ELITEID = pi.ELITEID WHERE ss.TEAM = 'Yale Univ.' AND ss.PIM = '28' AND ss.SEASON = '2005-2006';
SELECT     (SUM(CASE WHEN PlayerName = 'Ian Schultz' THEN G ELSE 0 END) * 100 / SUM(G)) AS Percentage_Goals_Scored FROM     SeasonStatus WHERE     TEAM = 'Calgary Hitmen' AND SEASON = '2007-2008';
SELECT     (SUM(CASE WHEN PlayerName = 'Yevgeni Muratov' THEN PIM ELSE 0 END) * 100.0 / SUM(PIM)) AS Percentage_PIM FROM     SeasonStatus WHERE     TEAM = 'Ak Bars Kazan' AND SEASON = '1999-2000';
SELECT birthplace FROM PlayerInfo WHERE PlayerName = 'Aaron Gagnon';
SELECT weight_in_kg FROM weight_info JOIN PlayerInfo ON weight_info.weight_id = PlayerInfo.weight WHERE PlayerInfo.PlayerName = 'Tony Martensson';
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE weight_info.weight_in_lbs = 190;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id ORDER BY weight_info.weight_in_kg DESC LIMIT 1;
SELECT MULTIPLY(DIVIDE((SELECT COUNT(*) FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE weight_info.weight_in_lbs > 154 AND PlayerInfo.nation = 'Denmark'), (SELECT COUNT(*) FROM PlayerInfo)), 100) as Percentage;
SELECT TEAM FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE PlayerName = 'Andreas Jamtin';
SELECT SEASON FROM SeasonStatus WHERE ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Niklas Eckerblom');
SELECT GAMETYPE FROM SeasonStatus WHERE PlayerInfo.ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Matthias Trattnig') AND SeasonStatus.ELITEID = PlayerInfo.ELITEID;
SELECT DISTINCT T1.nation FROM PlayerInfo AS T1 JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON = '1997-1998';
SELECT MAX(P) FROM SeasonStatus JOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID WHERE PlayerInfo.PlayerName = 'Per Mars' AND SeasonStatus.SEASON = PlayerInfo.draftyear;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE PlayerInfo.nation = 'Italy' ORDER BY height_info.height_in_cm LIMIT 1;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE height_info.height_in_inch = '68';
SELECT COUNT(*) FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE birthyear = 1982 AND height_in_cm > 182;
SELECT MULTIPLY(DIVIDE(SUM(CASE WHEN T3.nation = 'Russia' THEN 1 ELSE 0 END), COUNT(T2.ELITEID)), 100) FROM height_info AS T1 JOIN PlayerInfo AS T2 ON T1.height_id = T2.height JOIN SeasonStatus AS T3 ON T2.ELITEID = T3.ELITEID WHERE T1.height_in_cm < 200;
SELECT T3.PlayerName FROM weight_info AS T1 JOIN PlayerInfo AS T3 ON T1.weight_id = T3.weight WHERE T3.nation = 'USA' ORDER BY T1.weight_in_lbs ASC LIMIT 1;
SELECT PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.SEASON = '2000-2001' ORDER BY SeasonStatus.PIM DESC LIMIT 1;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.TEAM = 'Avangard Omsk' AND SeasonStatus.SEASON = '2000-2001'
SELECT PlayerName FROM PlayerInfo WHERE overallby = 'Arizona Coyotes' AND draftyear = 2000 ORDER BY PIM DESC LIMIT 1;
SELECT COUNT(*) FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE overallby = 'Arizona Coyotes' AND height_in_cm = 195;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.TEAM = 'Avangard Omsk' AND SeasonStatus.GAMETYPE = 'Playoffs' AND SeasonStatus.SEASON = '2000-2001';
SELECT PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.SEASON = '2000-2001' AND SeasonStatus.LEAGUE = 'International' ORDER BY SeasonStatus.P DESC LIMIT 1;
SELECT COUNT(*) FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE birthyear = 1980 AND weight_in_lbs = 185;
SELECT ELITEID, MAX(GP) FROM SeasonStatus WHERE SEASON = '2000-2001' AND LEAGUE = 'International' GROUP BY ELITEID ORDER BY GP DESC LIMIT 1;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.TEAM = 'Avangard Omsk' AND SeasonStatus.LEAGUE = 'International' AND SeasonStatus.G = 0 AND SeasonStatus.SEASON = '2000-2001' AND PlayerInfo.draftyear = 2000;
SELECT T1.PlayerName FROM PlayerInfo AS T1 JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON = '2000-2001' AND T2.GAMETYPE = 'Regular Season' AND T2.TEAM = 'Avangard Omsk' ORDER BY T1.birthdate ASC LIMIT 1;
SELECT T1.PlayerName FROM PlayerInfo AS T1 JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.LEAGUE = 'OHL' AND T2.GAMETYPE = 'Regular Season' AND T2.SEASON = '2007-2008' ORDER BY T2.A DESC LIMIT 1;
SELECT COUNT(DISTINCT T3.TEAM) FROM PlayerInfo AS T1 JOIN weight_info AS T2 ON T1.weight = T2.weight_id JOIN SeasonStatus AS T3 ON T1.ELITEID = T3.ELITEID WHERE T1.overallby = 'Arizona Coyotes' AND T2.weight_in_lbs = (SELECT MAX(weight_in_lbs) FROM weight_info WHERE weight_id IN (SELECT weight FROM PlayerInfo WHERE overallby = 'Arizona Coyotes'))
SELECT AVG(T2.weight_in_lbs) FROM PlayerInfo AS T1 JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.overallby = 'Arizona Coyotes';
SELECT AVG(h.height_in_cm) FROM height_info h JOIN PlayerInfo p ON h.height_id = p.height JOIN SeasonStatus s ON p.ELITEID = s.ELITEID WHERE s.TEAM = 'Acadie-Bathurst Titan' AND s.GAMETYPE = 'Regular Season';
Error: 第 6986 个样本有 2 个SQL。
SELECT weight_in_kg FROM weight_info JOIN PlayerInfo ON weight_info.weight_id = PlayerInfo.weight WHERE PlayerName = 'Matthias Trattnig';
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE height_info.height_in_inch > 69;
SELECT TEAM FROM SeasonStatus WHERE SEASON = '1997-1998' AND ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Niklas Eckerblom');
SELECT TEAM, COUNT(*) AS Swedish_Players FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE nation = 'Sweden' GROUP BY TEAM ORDER BY Swedish_Players DESC LIMIT 1;
SELECT COUNT(*) FROM SeasonStatus WHERE ELITEID IN (     SELECT ELITEID     FROM PlayerInfo     WHERE PlayerName = 'Per Mars' ) AND GAMETYPE = 'Playoffs';
SELECT T2.PlayerName FROM SeasonStatus AS T1 JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.TEAM = 'Rimouski Oceanic' AND T1.GAMETYPE = 'Playoffs' ORDER BY T1.G DESC LIMIT 1;
SELECT nation, COUNT(PlayerName) as player_count FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.TEAM = 'Plymouth Whalers' GROUP BY nation ORDER BY player_count DESC LIMIT 1;
SELECT PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.SEASON = '1999-2000' AND SeasonStatus.TEAM = 'Plymouth Whalers' ORDER BY SeasonStatus.A DESC LIMIT 1;
SELECT hi.height_in_inch FROM height_info hi JOIN PlayerInfo pi ON pi.height = hi.height_id JOIN SeasonStatus ss ON ss.ELITEID = pi.ELITEID WHERE ss.TEAM = 'Oshawa Generals'
SELECT PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE LEAGUE = 'OHL' AND SEASON = '1997-2000' ORDER BY birthdate LIMIT 1;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE PlayerInfo.ELITEID IN (     SELECT SeasonStatus.ELITEID     FROM SeasonStatus     WHERE SeasonStatus.TEAM = 'USA U20' ) ORDER BY height_info.height_in_cm DESC LIMIT 1;
SELECT MULTIPLY(DIVIDE((SELECT COUNT(ELITEID) FROM PlayerInfo INNER JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE nation = 'Sweden' AND SeasonStatus.SEASON IN ('1997-1998', '1998-1999', '1999-2000') AND GAMETYPE = 'Playoffs'), (SELECT COUNT(ELITEID) FROM PlayerInfo INNER JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.SEASON IN ('1997-1998', '1998-1999', '1999-2000') AND GAMETYPE = 'Playoffs')), 100);
SELECT (SUM(case when T3.nation = 'Sweden' then T2.PIM else 0 end) * 100 / SUM(T2.PIM)) as Percentage FROM PlayerInfo as T1 JOIN SeasonStatus as T2 ON T1.ELITEID = T2.ELITEID WHERE T2.LEAGUE = 'OHL';
SELECT AVG(StandardCost) FROM Product WHERE ProductNumber = 'CA-1098';
SELECT p.Name, pc.StartDate FROM Product p JOIN ProductCostHistory pc ON p.ProductID = pc.ProductID WHERE pc.EndDate IS NULL;
SELECT p.Name, p.ProductID, ph.StartDate, ph.EndDate, ph.StandardCost AS PreviousCost, p.StandardCost AS CurrentCost FROM Product AS p JOIN ProductCostHistory AS ph ON p.ProductID = ph.ProductID WHERE (p.StandardCost - ph.StandardCost) > 80 AND ph.EndDate IS NOT NULL ORDER BY p.ProductID, ph.EndDate DESC;
SELECT p.Name, SUM(sci.Quantity) as TotalQuantity FROM ShoppingCartItem sci JOIN Product p ON sci.ProductID = p.ProductID WHERE sci.ShoppingCartID = 14951 GROUP BY p.Name;
SELECT p.Name FROM Product p JOIN ShoppingCartItem sci ON p.ProductID = sci.ProductID WHERE sci.Quantity > 5;
SELECT DISTINCT p.Name FROM Product p JOIN PurchaseOrderDetail pod ON p.ProductID = pod.ProductID WHERE p.Class = 'L';
SELECT p.Name, pd.ListPrice FROM TransactionHistory th JOIN Product p ON th.ProductID = p.ProductID JOIN ProductListPriceHistory pd ON p.ProductID = pd.ProductID WHERE th.Quantity > 10000;
SELECT TOP 1 p.Name, p.Class, MIN(th.Quantity) AS LowestTransactedQuantity FROM Product p JOIN TransactionHistory th ON p.ProductID = th.ProductID WHERE p.Class = 'H' GROUP BY p.Name, p.Class ORDER BY LowestTransactedQuantity ASC
SELECT COUNT(*) FROM TransactionHistory WHERE ProductID IN (     SELECT ProductID     FROM Product     WHERE ProductLine = 'M' );
SELECT SUM((p.ListPrice - p.StandardCost) * sci.Quantity) AS TotalSalesProfit FROM Product p JOIN ShoppingCartItem sci ON p.ProductID = sci.ProductID WHERE sci.ShoppingCartID = 20621;
SELECT ProductName, ListPrice FROM Product WHERE Class = 'H';
SELECT ProductLine, COUNT(*) AS ProductCount FROM Product WHERE FinishedGoodsFlag = 1 GROUP BY ProductLine ORDER BY ProductCount DESC LIMIT 1;
SELECT ProductID, Rating, Comments FROM ProductReview WHERE ReviewerName LIKE 'J%';
SELECT P.Name, P.ProductLine, PR.Rating, P.ListPrice FROM Product AS P JOIN ProductReview AS PR ON P.ProductID = PR.ProductID WHERE PR.Rating = 1 ORDER BY P.ListPrice LIMIT 1;
SELECT     p.Name,     AVG(p.ListPrice - pc.StandardCost) AS Profit FROM     Product p JOIN     ProductCostHistory pc ON p.ProductID = pc.ProductID GROUP BY     p.Name HAVING     AVG(p.ListPrice - pc.StandardCost) > 100;
SELECT P.Name AS ProductName, PR.ReviewerName, PR.Rating, PR.Comments FROM Product AS P JOIN ProductReview AS PR ON P.ProductID = PR.ProductID WHERE P.ProductLine = 'R';
SELECT COUNT(ReviewerName) AS NumberOfReviews, AVG(Rating) AS AverageRating FROM ProductReview JOIN Product ON ProductReview.ProductID = Product.ProductID WHERE Product.Name = 'HL Mountain Pedal';
SELECT poh.PurchaseOrderID, pol.ProductID, pol.ReceivedQty, pol.RejectedQty FROM PurchaseOrderHeader poh JOIN PurchaseOrderDetail pol ON poh.PurchaseOrderID = pol.PurchaseOrderID WHERE pol.ReceivedQty = pol.RejectedQty AND pol.RejectedQty > 0;
SELECT TOP 1 p.Name, sod.UnitPrice FROM Product AS p JOIN SalesOrderDetail AS sod ON p.ProductID = sod.ProductID WHERE sod.RejectedQty = 0 ORDER BY sod.LineTotal DESC;
SELECT P.Name, P.ProductLine FROM PurchaseOrderDetail POD JOIN Product P ON POD.ProductID = P.ProductID WHERE POD.OrderQty >= 5000;
SELECT SUM(OrderQty) AS TotalOrderedQuantity FROM (     SELECT soh.SalesOrderID, sod.OrderQty     FROM SalesOrderHeader soh     INNER JOIN SalesOrderDetail sod ON soh.SalesOrderID = sod.SalesOrderID     INNER JOIN Product p ON sod.ProductID = p.ProductID     WHERE p.ProductLine = 'T' ) AS subquery;
SELECT TOP 1 p.Name, sod.LineTotal FROM SalesOrderDetail sod JOIN Product p ON sod.ProductID = p.ProductID WHERE p.Class = 'L' ORDER BY sod.LineTotal DESC;
SELECT TOP 1 p.Name FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID WHERE (pv.LastReceiptCost - pv.StandardPrice) = (     SELECT MAX(pv.LastReceiptCost - pv.StandardPrice)     FROM ProductVendor pv     JOIN Product p ON p.ProductID = pv.ProductID )
SELECT p.Name FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID WHERE pv.MinOrderQty = 100 ORDER BY p.Name DESC;
SELECT TOP 1 p.Name, (p.ListPrice - pc.StandardCost) AS Profit FROM Product AS p JOIN ProductReview AS pr ON p.ProductID = pr.ProductID JOIN ProductCostHistory AS pc ON p.ProductID = pc.ProductID WHERE pr.Rating = 5 ORDER BY Profit DESC;
SELECT SUM((p.ListPrice - p.StandardCost) * tr.Quantity) AS TotalProfit FROM TransactionHistory tr JOIN Product p ON tr.ProductID = p.ProductID WHERE tr.ProductID = 827;
SELECT FROMCurrencyCode, ToCurrencyCode, AVG(AverageRate) AS AvgRate FROM CurrencyRate GROUP BY FROMCurrencyCode, ToCurrencyCode ORDER BY AvgRate DESC LIMIT 1;
Error: 第 7027 个样本有 2 个SQL。
SELECT T1.Name, MAX(T1.SalesLastYear) AS HighestSalesLastYear FROM SalesTerritory AS T1 JOIN CountryRegion AS T2 ON T1.CountryRegionCode = T2.CountryRegionCode WHERE T2.CountryRegionCode = 'US' AND (T1.Group = 'Northwest' OR T1.Group = 'Southeast') GROUP BY T1.Name ORDER BY HighestSalesLastYear DESC LIMIT 1;
SELECT p.FirstName + p.MiddleName + p.LastName AS FullName FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE p.PersonType = 'EM' AND e.JobTitle = 'Document Control Manager' AND EXISTS (     SELECT 1     FROM Document d     WHERE d.Owner = e.BusinessEntityID     AND d.Status = 2     AND d.DocumentLevel = 1 );
SELECT TOP 1 c.Name FROM Customer c JOIN SalesOrderHeader soh ON c.CustomerID = soh.CustomerID JOIN SalesPerson sp ON soh.SalesPersonID = sp.BusinessEntityID WHERE sp.Bonus = (     SELECT MAX(Bonus)     FROM SalesPerson ) GROUP BY c.Name ORDER BY SUM(soh.SubTotal) DESC;
SELECT SUM(SOD.UnitPrice * SOD.OrderQty) AS TotalPrice FROM SalesOrderDetail SOD JOIN SalesOrderHeader SOH ON SOD.SalesOrderID = SOH.SalesOrderID WHERE SOD.SalesOrderID = 46625 AND SOH.Status = 11 AND SOH.Status <= 14 AND SOD.ProductID = 716;
SELECT COUNT(*) FROM Product WHERE ReorderPoint <= 600 AND MakeFlag = 1 AND DaysToManufacture = 1 AND EXISTS (     SELECT *     FROM BillOfMaterials     WHERE Product.BillOfMaterialsID = BillOfMaterials.BillOfMaterialsID     AND BOMLevel = 4 );
SELECT MAX(SalesPerson.Bonus) FROM SalesPerson JOIN SalesTerritory ON SalesPerson.TerritoryID = SalesTerritory.TerritoryID WHERE SalesTerritory.Name = 'Canada';
SELECT P.Name FROM Product P JOIN ProductReview PR ON P.ProductID = PR.ProductID WHERE PR.Rating = 1 GROUP BY P.Name;
SELECT COUNT(*) FROM Employee AS E JOIN EmployeeDepartmentHistory AS EDH ON E.BusinessEntityID = EDH.BusinessEntityID JOIN Department AS D ON EDH.DepartmentID = D.DepartmentID WHERE EDH.StartDate BETWEEN '2009-01-01' AND '2009-12-31' AND D.Name = 'Production';
SELECT TOP 1 p.FirstName + ' ' + p.MiddleName + ' ' + p.LastName AS FullName, e.JobTitle FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE p.PersonType = 'EM' AND p.NameStyle = 0 AND e.Gender = 'F' AND e.MaritalStatus = 'S' ORDER BY e.Rate DESC;
SELECT p.FirstName + COALESCE(p.MiddleName, '') + ' ' + p.LastName AS FullName, e.HireDate FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE p.Title = 'Vice President of Engineering'
SELECT COUNT(*) FROM Employee JOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID WHERE Employee.CurrentFlag = 1 AND EmployeePayHistory.Rate <= 30;
SELECT TOP 1 Department.Name FROM Department JOIN EmployeeDepartmentHistory ON Department.DepartmentID = EmployeeDepartmentHistory.DepartmentID WHERE EmployeeDepartmentHistory.StartDate = (SELECT MAX(StartDate) FROM EmployeeDepartmentHistory)
SELECT TOP 1 p.FirstName, p.LastName, e.Gender FROM Person AS p JOIN Employee AS e ON p.BusinessEntityID = e.BusinessEntityID WHERE p.PersonType = 'SC' ORDER BY e.HireDate DESC;
SELECT ep.PayFrequency FROM Employee AS e JOIN EmployeePayHistory AS ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE e.SickLeaveHours = (SELECT MIN(SickLeaveHours) FROM Employee) GROUP BY ep.PayFrequency ORDER BY COUNT(*) DESC LIMIT 1;
SELECT TOP 1 JobTitle, MIN(Rate) AS LowestPay FROM Employee JOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID GROUP BY JobTitle ORDER BY LowestPay ASC
SELECT COUNT(*) FROM EmployeeDepartmentHistory WHERE DepartmentID = (SELECT DepartmentID FROM Department WHERE Name = 'Finance') AND EndDate IS NULL;
Error: 第 7044 个样本有 2 个SQL。
SELECT     v.Name AS VendorName,     (pv.LastReceiptCost - pv.StandardPrice) AS NetProfit FROM     Vendor v JOIN     ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID WHERE     v.CreditRating = 3     AND (pv.LastReceiptCost - pv.StandardPrice) > (         SELECT AVG(pv.LastReceiptCost - pv.StandardPrice)         FROM ProductVendor pv         JOIN Vendor v ON v.BusinessEntityID = pv.BusinessEntityID         WHERE v.CreditRating = 3     );
SELECT COUNT(*) FROM Customer WHERE AddressLine2 IS NOT NULL;
SELECT TOP 1 A.PostalCode FROM Address A JOIN BusinessEntityAddress BEA ON A.AddressID = BEA.AddressID WHERE YEAR(BEA.ModifiedDate) = 2022 AND MONTH(BEA.ModifiedDate) = 10 ORDER BY BEA.ModifiedDate DESC;
SELECT MAX(EndDate - StartDate) AS LongestAssemblyDuration FROM BillOfMaterials WHERE ProductAssemblyID IS NOT NULL;
SELECT COUNT(*) FROM BillOfMaterials WHERE ProductAssemblyID IS NOT NULL AND EndDate IS NULL;
SELECT TOP 1 BOM.UnitMeasureCode FROM BillOfMaterials AS BOM WHERE BOM.PerAssemblyQty IN (     SELECT MAX(PerAssemblyQty)     FROM BillOfMaterials )
SELECT COUNT(*) FROM Document WHERE DocumentSummary IS NULL;
SELECT Title FROM Document WHERE Status = 1;
SELECT DISTINCT e.JobTitle FROM Employee e JOIN BusinessEntity b ON e.BusinessEntityID = b.BusinessEntityID JOIN Document d ON b.BusinessEntityID = d.Owner WHERE d.Status = 2;
SELECT EP.PayFrequency FROM Employee AS E JOIN EmployeePayHistory AS EP ON E.BusinessEntityID = EP.BusinessEntityID WHERE E.BirthDate = (SELECT MIN(BirthDate) FROM Employee) ORDER BY EP.RateChangeDate DESC LIMIT 1;
SELECT COUNT(*) FROM Employee WHERE MaritalStatus = 'M' AND PayFrequency = 2;
SELECT TOP 1 e.BusinessEntityID, ep.Rate FROM Employee e JOIN EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE e.HireDate = (SELECT MAX(HireDate) FROM Employee) ORDER BY ep.Rate DESC;
SELECT COUNT(*) FROM Employee JOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID WHERE EmployeePayHistory.Rate > 40 AND Employee.Gender = 'M';
SELECT MAX(EmployeePayHistory.Rate) FROM Employee JOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID WHERE Employee.SalariedFlag = 1;
SELECT e.VacationHours FROM Employee e WHERE e.PayFrequency = 2;
SELECT TOP 1 e.PayFrequency, e.Rate FROM EmployeePayHistory e JOIN Employee e2 ON e.BusinessEntityID = e2.BusinessEntityID WHERE e2.VacationHours = (SELECT MAX(VacationHours) FROM Employee) ORDER BY e.Rate DESC;
SELECT COUNT(*) FROM Employee e JOIN EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE e.SickLeaveHours > 10 AND ep.Rate > 35;
SELECT COUNT(*) FROM Employee WHERE CurrentFlag = 1 AND Gender = 'M' AND PayFrequency = 2;
SELECT COUNT(*) FROM Employee WHERE PersonType = 'SP' AND Gender = 'M';
SELECT JobTitle FROM Employee WHERE BirthDate = (SELECT MIN(BirthDate) FROM Employee);
SELECT P.NameStyle FROM Person AS P JOIN Employee AS E ON P.BusinessEntityID = E.BusinessEntityID JOIN EmployeePayHistory AS EP ON E.BusinessEntityID = EP.BusinessEntityID WHERE EP.Rate = (     SELECT MIN(Rate)     FROM EmployeePayHistory )
SELECT COUNT(*) FROM Employee WHERE MaritalStatus = 'M' AND NameStyle = 0;
SELECT COUNT(*) FROM Employee WHERE SickLeaveHours > 10 AND BusinessEntityID IN (     SELECT BusinessEntityID     FROM Person     WHERE EmailPromotion IN (1, 2) );
SELECT * FROM Employee WHERE VacationHours > 20 AND EmailPromotion IN (1, 2);
SELECT TOP 1 p.AdditionalContactInfo FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE p.PersonType = 'SP' ORDER BY e.BirthDate ASC;
SELECT FirstName FROM Person WHERE Gender = 'M' AND NameStyle = 0 ORDER BY BusinessEntityID LIMIT 1;
SELECT COUNT(*) FROM Employee WHERE CurrentFlag = 1 AND Title = 'Mr';
SELECT p.FirstName, p.LastName, p.Title, e.BirthDate, e.HireDate, e.JobTitle FROM Person AS p JOIN Employee AS e ON p.BusinessEntityID = e.BusinessEntityID JOIN EmployeePayHistory ASeph ON e.BusinessEntityID = eph.BusinessEntityID WHERE e.MaritalStatus = 'M' GROUP BY p.FirstName, p.LastName, p.Title, e.BirthDate, e.HireDate, e.JobTitle ORDER BY MAX(eph.Rate) DESC LIMIT 1;
SELECT p.LastName, p.Suffix FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE p.PersonType = 'SC' ORDER BY e.SickLeaveHours DESC LIMIT 1;
SELECT COUNT(*) FROM Employee WHERE MaritalStatus = 'M' AND NameStyle = 1 AND BusinessEntityID IN (     SELECT BusinessEntityID     FROM EmployeePayHistory     WHERE PayFrequency = (         SELECT MAX(PayFrequency)         FROM EmployeePayHistory     ) );
SELECT COUNT(*) FROM Employee WHERE CurrentFlag = 1 AND EmailPromotion = 0;
Error: 第 7076 个样本有 2 个SQL。
SELECT AVG(VacationHours) FROM Employee WHERE PersonType = 'EM' AND Gender = 'M';
SELECT     (MAX(emp.Rate) - AVG(emp.Rate)) AS PayRateDifference FROM     (     SELECT         ep.BusinessEntityID, ep.Rate     FROM         EmployeePayHistory ep     INNER JOIN         Employee e ON ep.BusinessEntityID = e.BusinessEntityID     WHERE         e.MaritalStatus = 'M' AND e.EmailPromotion = 1     ) AS emp
Error: 第 7079 个样本有 2 个SQL。
SELECT     (COUNT(CASE WHEN VacationHours > 20 THEN BusinessEntityID END) * 100.0 / COUNT(BusinessEntityID)) AS Percentage FROM     Employee WHERE     CurrentFlag = 1 AND SickLeaveHours > 10;
Error: 第 7081 个样本有 2 个SQL。
SELECT AVG(ActualCost) AS AverageCost FROM TransactionHistory WHERE TransactionType = 'P' AND TransactionDate BETWEEN '2012-01-01' AND '2012-06-30';
SELECT     (COUNT(CASE WHEN Gender = 'M' AND YEAR(HireDate) = 2009 AND MaritalStatus = 'M' THEN BusinessEntityID END) * 100.0 / COUNT(CASE WHEN Gender = 'M' AND YEAR(HireDate) = 2009 THEN BusinessEntityID END)) AS PercentageMarriedMaleEmployees2009 FROM     Employee
SELECT     (COUNT(CASE WHEN P.FirstName = 'Mary' AND P.EmailPromotion = 2 THEN P.BusinessEntityID END) * 100.0 / COUNT(P.BusinessEntityID)) AS Percentage FROM     Person P JOIN     BusinessEntityContact BEC ON P.BusinessEntityID = BEC.PersonID WHERE     P.PersonType = 'SC'
SELECT ProductID FROM (     SELECT p.ProductID, p.StandardCost, pr.LastReceiptCost,         (p.StandardCost - pr.LastReceiptCost) as Profit     FROM Product AS p     JOIN ProductVendor AS pv ON p.ProductID = pv.ProductID     JOIN PurchaseOrderDetail AS pod ON pv.BusinessEntityID = pod.VendorID     JOIN PurchaseOrderHeader AS po ON pod.PurchaseOrderID = po.PurchaseOrderID     JOIN ProductReview AS pr ON p.ProductID = pr.ProductID ) AS Subquery WHERE Profit < 0;
SELECT AVG(TotalDue) AS AverageTotalDue FROM SalesOrderHeader WHERE Status = 2;
SELECT     (COUNT(CASE WHEN SO.OrderQty <= 3 AND SO.UnitPriceDiscount = 0.2 THEN SO.SalesOrderID ELSE NULL END) * 100.0 / COUNT(SO.SalesOrderID)) AS Percentage FROM     SalesOrderDetail SO;
SELECT BusinessEntityID FROM SalesPerson WHERE (SalesYTD - SalesLastYear) / SalesLastYear > 0.6 AND Bonus > 3000;
SELECT     COUNT(CASE WHEN AddressTypeID = 2 THEN 1 END) AS HomeAddressCount,     COUNT(CASE WHEN AddressTypeID = 5 THEN 1 END) AS ShippingAddressCount FROM     BusinessEntityAddress WHERE     BusinessEntityID IN (SELECT BusinessEntityID FROM Store)
SELECT soh.CustomerID FROM SalesOrderHeader soh JOIN SalesOrderDetail sod ON soh.SalesOrderID = sod.SalesOrderID WHERE sod.OrderQty = 32 AND sod.UnitPrice = 35;
Error: 第 7091 个样本有 2 个SQL。
SELECT V.CreditRating FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID WHERE PV.AverageLeadTime = 16 AND PV.StandardPrice = 18.9900 AND PV.LastReceiptDate BETWEEN '2011-08-17 00:00:00' AND '2011-08-18 00:00:00';
Error: 第 7093 个样本有 2 个SQL。
SELECT JobTitle FROM Employee WHERE BusinessEntityID IN (     SELECT BusinessEntityID     FROM EmployeeDepartmentHistory     WHERE DepartmentID = 12     ORDER BY StartDate DESC     LIMIT 1 )
SELECT FirstName, LastName FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE e.MaritalStatus = 'S' AND e.Gender = 'M' AND e.JobTitle = 'Production Supervisor';
SELECT COUNT(*) FROM Product WHERE ProductSubcategoryID IN (     SELECT ProductSubcategoryID     FROM ProductSubcategory     WHERE Name = 'Subassembly' );
SELECT SUM(ScrappedQty) FROM WorkOrder WHERE ScrapReasonID IN (     SELECT ScrapReasonID     FROM ScrapReason     WHERE Name = 'Trim length too long' );
SELECT SUM(pod.OrderQty) AS TotalQuantity FROM PurchaseOrderDetail pod JOIN PurchaseOrderHeader po ON pod.PurchaseOrderID = po.PurchaseOrderID WHERE po.Status = 3 AND po.EmployeeID = 257;
Error: 第 7099 个样本有 2 个SQL。
SELECT DISTINCT p.Name, th.TransactionType FROM Product p JOIN ProductInventory pi ON p.ProductID = pi.ProductID JOIN TransactionHistory th ON p.ProductID = th.ProductID WHERE p.Color = 'Yellow' AND p.Size = 62 AND pi.Quantity >= 500;
SELECT ps.Name FROM ProductSubcategory ps JOIN Product p ON ps.ProductSubcategoryID = p.ProductSubcategoryID WHERE p.Color = 'gray' ORDER BY p.SafetyStockLevel LIMIT 1;
SELECT TOP 1 pe.EndDate FROM ProductCostHistory pe JOIN Product p ON pe.ProductID = p.ProductID WHERE p.WeightUnitMeasureCode = 'G' ORDER BY p.Weight DESC;
SELECT     (SUM(CASE WHEN w.ScrappedQty > 0 AND p.Name IN ('Drill size too small', 'Drill size too large') THEN w.OrderQty ELSE 0 END) * 100.0 / SUM(w.OrderQty)) AS PercentageRejectedByDrillSize FROM     WorkOrder w JOIN     Product p ON w.ProductID = p.ProductID;
SELECT AVG(OrderQty) FROM (     SELECT soh.SalesOrderID, sod.OrderQty     FROM SalesOrderHeader soh     JOIN SalesOrderDetail sod ON soh.SalesOrderID = sod.SalesOrderID     JOIN ShipMethod sm ON soh.ShipMethodID = sm.ShipMethodID     WHERE sm.Name = 'Cargo Transport 5' ) AS subquery;
WITH CTE AS (     SELECT         ST.Name,         (SOH.TotalDue - LAG(SOH.TotalDue) OVER (PARTITION BY SOH.CustomerID ORDER BY SOH.OrderDate)) / LAG(SOH.TotalDue) OVER (PARTITION BY SOH.CustomerID ORDER BY SOH.OrderDate) * 100 AS SalesIncrease,         ROW_NUMBER() OVER (ORDER BY (SOH.TotalDue - LAG(SOH.TotalDue) OVER (PARTITION BY SOH.CustomerID ORDER BY SOH.OrderDate)) / LAG(SOH.TotalDue) OVER (PARTITION BY SOH.CustomerID ORDER BY SOH.OrderDate) * 100 DESC) AS RowNum     FROM SalesOrderHeader SOH     JOIN Customer C ON SOH.CustomerID = C.CustomerID     JOIN SalesTerritory ST ON C.TerritoryID = ST.TerritoryID ) SELECT DISTINCT     STR.Name FROM CTE JOIN SalesTaxRate STR ON CTE.Name = STR.Name WHERE CTE.RowNum = 1;
SELECT COUNT(*) FROM Employee e JOIN EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE ep.PayFrequency = 1 AND ep.Rate > 50;
SELECT FirstName + ' ' + ISNULL(MiddleName, '') + ' ' + LastName AS FullName FROM Person WHERE BusinessEntityID = 1 AND PersonType = 'EM';
SELECT Name FROM Vendor WHERE BusinessEntityID = 1492;
SELECT COUNT(*) FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID WHERE pv.MinOrderQty > 500 AND pv.MaxOrderQty < 15000;
SELECT Name FROM Department WHERE GroupName = 'Executive General and Administration';
SELECT LastName FROM works_cycles.Person WHERE PersonType = 'EM' AND MiddleName LIKE 'C%';
SELECT COUNT(DISTINCT pv.BusinessEntityID) AS NumVendors FROM ProductVendor pv WHERE pv.AverageLeadTime = 25 AND pv.OnOrderQty > 0;
SELECT TOP 3 ProductNumber FROM Product ORDER BY StandardCost ASC;
SELECT COUNT(*) FROM Product WHERE Color = 'Black' AND FinishedGoodsFlag = 0;
Error: 第 7115 个样本有 2 个SQL。
SELECT AddressLine1, AddressLine2 FROM Address WHERE AddressID = 11906;
SELECT (SELECT LastReceiptCost FROM ProductVendor WHERE BusinessEntityID = 1580) - (SELECT StandardPrice FROM ProductVendor WHERE BusinessEntityID = 1580) AS NetProfit FROM dual
SELECT SUM(SOD.LineTotal) FROM SalesOrderDetail SOD JOIN Product P ON SOD.ProductID = P.ProductID WHERE P.ProductNumber = '740';
SELECT ReviewerName, COUNT(*) AS BestRatingCount FROM ProductReview WHERE Rating = 5 GROUP BY ReviewerName HAVING COUNT(*) > 0 ORDER BY BestRatingCount DESC;
SELECT BusinessEntityID FROM Vendor WHERE CreditRating = 5;
SELECT FirstName, BirthDate FROM Employee WHERE BusinessEntityID = 18;
SELECT ct.Name AS Job FROM ContactType ct JOIN BusinessEntityContact bec ON ct.ContactTypeID = bec.ContactTypeID WHERE bec.PersonID = 322 AND ct.Name = 'job';
SELECT TOP 3 BE.BusinessEntityID, BE.Name FROM BusinessEntity AS BE JOIN Person AS P ON BE.BusinessEntityID = P.BusinessEntityID JOIN EmailAddress AS EA ON P.BusinessEntityID = EA.BusinessEntityID JOIN PhoneNumberType AS PNT ON PNT.PhoneNumberTypeID = EA.PhoneNumberTypeID WHERE PNT.Name = 'Cell'
SELECT Currency.Name FROM CountryRegionCurrency INNER JOIN Currency ON CountryRegionCurrency.CurrencyCode = Currency.CurrencyCode INNER JOIN CountryRegion ON CountryRegionCurrency.CountryRegionCode = CountryRegion.CountryRegionCode WHERE CountryRegion.Name = 'Brazil';
SELECT COUNT(*) FROM Employee JOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID JOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID WHERE Department.Name = 'Finance';
SELECT AVG(AverageLeadTime) AS Average_Lead_Time, Name FROM ProductVendor JOIN Vendor ON ProductVendor.BusinessEntityID = Vendor.BusinessEntityID WHERE Vendor.BusinessEntityID = 1496;
SELECT     (SELECT COUNT(*) FROM Address WHERE City = 'Bothell') -     (SELECT COUNT(*) FROM Address WHERE City = 'Kenmore') AS Difference,     StateProvince.Name FROM     StateProvince JOIN     Address ON StateProvince.StateProvinceID = Address.StateProvinceID WHERE     City IN ('Bothell', 'Kenmore') GROUP BY     StateProvince.Name;
SELECT pm.Name FROM ProductModel AS pm JOIN ProductModelProductDescriptionCulture AS pmpdc ON pm.ProductModelID = pmpdc.ProductModelID JOIN ProductDescription AS pd ON pmpdc.ProductDescriptionID = pd.ProductDescriptionID JOIN Culture AS c ON pmpdc.CultureID = c.CultureID WHERE c.Name = 'English' AND pd.Description LIKE '%chromoly steel%';
SELECT COUNT(T1.BusinessEntityID) AS TotalCompanies, T2.Group AS GeographicalLocation FROM SalesPerson AS T1 JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.CommissionPct >= 0.018 GROUP BY T2.Group;
SELECT TOP 10 T.PhoneNumberTypeID, T.Name, COUNT(*) AS Count FROM PhoneNumberType T JOIN BusinessEntityAddress BEA ON T.PhoneNumberTypeID = BEA.BusinessEntityID GROUP BY T.PhoneNumberTypeID, T.Name ORDER BY Count DESC;
SELECT TOP 1 ContactType.Name FROM ContactType JOIN BusinessEntityContact ON ContactType.ContactTypeID = BusinessEntityContact.ContactTypeID GROUP BY ContactType.Name ORDER BY COUNT(BusinessEntityContact.BusinessEntityID) DESC;
SELECT EmailAddress.EmailAddress FROM EmailAddress JOIN Person ON EmailAddress.BusinessEntityID = Person.BusinessEntityID WHERE Person.PersonType = 'SP'
SELECT JobTitle FROM Employee WHERE FirstName = 'Suchitra';
SELECT COUNT(*) FROM Person WHERE PersonType = 'EM' AND MaritalStatus = 'S';
SELECT     (SELECT COUNT(*) FROM Culture WHERE Name = 'English') -     (SELECT COUNT(*) FROM Culture WHERE Name = 'Arabic') AS LanguageDifference;
SELECT AddressLine1 FROM Address WHERE AddressID IN (     SELECT AddressID     FROM BusinessEntityAddress     WHERE BusinessEntityID = 1 );
SELECT BusinessEntityID FROM BusinessEntityAddress JOIN Address ON BusinessEntityAddress.AddressID = Address.AddressID WHERE Address.City = 'Duvall';
SELECT (COUNT(*) FILTER (WHERE Culture.Name = 'Thai') * 100.0 / COUNT(*)) AS ThaiPercentage FROM works_cycles.Culture;
SELECT (COUNT(CASE WHEN Gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS MalePercentage FROM [Person] WHERE PersonType = 'EM'
SELECT A.AddressLine1, SP.City, SP.Name AS StateProvinceName FROM Address A JOIN StateProvince SP ON A.StateProvinceID = SP.StateProvinceID WHERE A.AddressID = 15873 AND SP.IsOnlyStateProvinceFlag = 0;
SELECT     AddressLine1 + AddressLine2 AS Full_Address FROM     Address WHERE     AddressID IN (         SELECT             AddressID         FROM             BusinessEntityAddress         WHERE             BusinessEntityID = '24'     )
Error: 第 7142 个样本有 2 个SQL。
SELECT BusinessEntityID FROM Person WHERE FirstName = 'Emma' AND LastName = 'Harris';
SELECT LocationID FROM Location WHERE Name = 'Debur and Polish';
SELECT DepartmentID FROM Department WHERE GroupName = 'Sales and Marketing';
SELECT sp.BusinessEntityID FROM SalesOrderHeader soh JOIN SalesPerson sp ON soh.SalesPersonID = sp.BusinessEntityID WHERE soh.TotalDue = 1635823.3967 AND YEAR(soh.OrderDate) = YEAR(CURRENT_TIMESTAMP) - 1;
SELECT StartTime FROM Shift WHERE ShiftID = 2;
SELECT Name FROM ContactType WHERE ContactTypeID = 16;
SELECT MIN(ShipBase) FROM ShipMethod WHERE Name = 'OVERSEAS - DELUXE';
SELECT Name FROM Culture WHERE CultureID = 'fr';
SELECT CurrencyCode FROM Currency WHERE Name = 'Mauritius Rupee';
SELECT PhoneNumberTypeID FROM PhoneNumberType WHERE Name = 'Cell'
SELECT MIN(BirthDate) AS Birthday FROM Employee WHERE JobTitle = 'Production Technician' AND HireDate = '2008-12-07';
SELECT pm.Name FROM Product p JOIN ProductModel pm ON p.ProductModelID = pm.ProductModelID WHERE p.ProductID = 793;
Error: 第 7155 个样本有 2 个SQL。
SELECT A.AddressLine1, A.AddressLine2, A.City FROM Address AS A JOIN BusinessEntityAddress AS BEA ON A.AddressID = BEA.AddressID WHERE BEA.BusinessEntityID = 4;
SELECT bom.UnitMeasureCode FROM BillOfMaterials bom WHERE bom.ComponentID = 494 AND bom.EndDate IS NULL;
SELECT COUNT(*) FROM Document d JOIN Employee e ON d.Owner = e.BusinessEntityID WHERE e.JobTitle = 'Document Control Assistant' AND e.BirthDate = '1975-12-25' AND d.DocumentSummary IS NULL;
SELECT p.ListPrice FROM Product AS p JOIN ProductCostHistory ASpch ON p.ProductID = pch.ProductID WHERE pch.StartDate >= '2012-10-01' AND p.StandardCost + 21.9037 = p.ListPrice;
SELECT LargePhotoFileName FROM ProductPhoto WHERE ProductPhotoID = (SELECT ProductPhotoID FROM ProductProductPhoto WHERE ProductID = 1)
SELECT LENGTH(p.PasswordHash) FROM Person pe JOIN Password p ON pe.BusinessEntityID = p.BusinessEntityID WHERE pe.FirstName = 'Catherine' AND pe.LastName = 'Ward';
SELECT Rating FROM ProductReview WHERE ReviewerName = 'Jill' AND ProductID = (     SELECT ProductID     FROM Product     WHERE Name = 'HL Mountain Pedal' );
SELECT (StandardPrice - LastReceiptCost) AS Profit FROM ProductVendor JOIN Product ON ProductVendor.ProductID = Product.ProductID WHERE Product.Name = 'Freewheel'
SELECT     CASE         WHEN Bonus > 0 THEN 'Yes'         ELSE 'No'     END AS TaskCompleted FROM     SalesPerson WHERE     PersonID IN (         SELECT             PersonID         FROM             Person         WHERE             FirstName = 'Rachel' AND             LastName = 'Valdez'     );
SELECT COUNT(*) FROM (     SELECT DISTINCT SalesTaxRateID     FROM SalesTaxRate     WHERE Name LIKE '%+%' AND StateProvinceID IN (         SELECT StateProvinceID         FROM StateProvince         WHERE Name = 'Quebec'     ) ) AS TaxTypes
SELECT EmailAddress FROM EmailAddress JOIN Person ON EmailAddress.BusinessEntityID = Person.BusinessEntityID WHERE Person.FirstName = 'Kevin' AND Person.LastName = 'Wright' AND Person.MiddleName = 'A';
SELECT COUNT(*) FROM StateProvince WHERE CountryRegionCode = 'FRA' AND IsOnlyStateProvinceFlag = 1 AND StateProvinceCode IS NULL;
SELECT TransactionType FROM TransactionHistory WHERE ProductID = (SELECT ProductID FROM Product WHERE Name = 'HL Road Frame - Black, 48') AND TransactionDate = '2012-12-13';
SELECT TransactionType FROM TransactionHistory WHERE ProductID = (     SELECT ProductID     FROM Product     WHERE Name = 'LL Road Handlebars' ) AND TransactionDate = '2012-11-03';
SELECT CreditRating FROM Vendor WHERE rowguid = '33671A4E-DF2B-4879-807B-E3F930DD5C0C';
SELECT PreferredVendorStatus FROM Vendor WHERE BusinessEntityID = (     SELECT BusinessEntityID     FROM BusinessEntity     WHERE rowguid = '684F328D-C185-43B9-AF9A-37ACC680D2AF' );
SELECT v.ActiveFlag FROM Vendor v JOIN BusinessEntity be ON v.BusinessEntityID = be.BusinessEntityID WHERE be.PersonID = 2054;
SELECT PhoneNumber FROM Person p JOIN PersonPhone pp ON p.BusinessEntityID = pp.BusinessEntityID JOIN PhoneNumberType ppt ON pp.PhoneNumberTypeID = ppt.PhoneNumberTypeID WHERE p.FirstName = 'Gerald' AND p.LastName = 'Patel';
SELECT PhoneNumberType.Name FROM PhoneNumberType JOIN PersonPhone ON PhoneNumberType.PhoneNumberTypeID = PersonPhone.PhoneNumberTypeID WHERE PersonPhone.BusinessEntityID = 13626;
SELECT JobTitle FROM Employee WHERE FirstName = 'Lynn' AND LastName = 'Tsoflias';
SELECT COUNT(*) FROM ProductSubcategory WHERE ProductCategoryID = 1;
SELECT     (COUNT(CASE WHEN D.DocumentSummary IS NULL THEN 1 END) * 100.0 / COUNT(D.DocumentSummary)) AS PrivateDocumentPercentage FROM     Document D JOIN     Employee E ON D.Owner = E.BusinessEntityID WHERE     E.JobTitle = 'Document Control Assistant' AND E.HireDate = '2009-01-22';
SELECT (hl.LastReceiptCost - hl.StandardPrice) / hl.StandardPrice as profit_ratio FROM ProductVendor pv JOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID JOIN Product p ON pv.ProductID = p.ProductID JOIN (     SELECT ProductID, MAX(LastReceiptDate) as LatestReceiptDate     FROM ProductVendor     GROUP BY ProductID ) AS latest ON latest.ProductID = pv.ProductID AND latest.LatestReceiptDate = pv.LastReceiptDate WHERE p.Name = 'HL Grip Tape' AND pv.BusinessEntityID = v.BusinessEntityID AND pv.ProductID = p.ProductID AND v.Name = 'HL Components' AND pv.LastReceiptDate = (     SELECT MAX(LastReceiptDate)     FROM ProductVendor     WHERE ProductID = p.ProductID );
SELECT     (COUNT(CASE WHEN PhoneNumberTypeID = 1 THEN PhoneNumberTypeID END) * 100.0 / COUNT(PhoneNumberTypeID)) AS PercentageOfCellPhones FROM     PhoneNumberType pnt     JOIN PhoneNumber pn ON pnt.PhoneNumberTypeID = pn.PhoneNumberTypeID;
SELECT ProductAssemblyID FROM BillOfMaterials WHERE UnitMeasureCode = 'EA' AND BOMLevel = 2 AND PerAssemblyQty > 10;
SELECT COUNT(DISTINCT wo.LocationID) FROM WorkOrderRouting wo WHERE wo.ActualResourceHrs = 2;
SELECT StockedQty FROM ProductInventory WHERE LocationID = 40;
SELECT     UnitMeasureCode,     SUM(PerAssemblyQty) AS TotalPerAssemblyQty,     Name FROM     (     SELECT         UnitMeasureCode,         PerAssemblyQty,         Name     FROM         BillOfMaterials b     JOIN         UnitMeasure u ON b.UnitMeasureCode = u.UnitMeasureCode     WHERE         UnitMeasureCode IN ('EA', 'IN', 'OZ')     ) AS t GROUP BY     UnitMeasureCode,     Name;
SELECT ProductID FROM Product WHERE ProductID NOT IN (SELECT ProductID FROM WorkOrder)
SELECT p.Name FROM Product p JOIN TransactionHistory th ON p.ProductID = th.ProductID WHERE th.TransactionType = 'P';
SELECT FirstName, MiddleName, LastName FROM Person INNER JOIN Employee ON Person.BusinessEntityID = Employee.BusinessEntityID WHERE Employee.JobTitle = 'Accountant';
SELECT JobTitle FROM Employee WHERE FirstName = 'Ken' AND LastName = 'Sánchez' AND CurrentFlag = 1;
SELECT COUNT(*) FROM Employee WHERE Gender = 'M' AND EmailPromotion = 0;
SELECT TOP 1 SP.BusinessEntityID, SP.SalesQuota, SUM(SP.SalesLastYear) / SUM(SP.SalesQuota) * 100 as Percentage FROM SalesPerson SP JOIN SalesPersonQuotaHistory SPQH ON SP.BusinessEntityID = SPQH.BusinessEntityID WHERE YEAR(SPQH.QuotaDate) = 2013 GROUP BY SP.BusinessEntityID, SP.SalesQuota ORDER BY Percentage DESC
SELECT COUNT(*) FROM Employee WHERE MaritalStatus = 'M' AND PersonType = 'EM';
SELECT COUNT(*) FROM Employee JOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID WHERE Employee.JobTitle LIKE 'Production Technician%' AND Person.MaritalStatus = 'S' AND Person.PersonType = 'VC';
SELECT SUM(SickLeaveHours) FROM Employee WHERE EmailPromotion = 0;
SELECT BusinessEntityID, FirstName, LastName, HireDate FROM Person WHERE PersonType = 'SP' AND YEAR(HireDate) < 2010;
SELECT TOP 1 sp.BusinessEntityID, sp.SalesQuota FROM SalesPerson AS sp WHERE sp.PersonType = 'SP' AND YEAR(sp.SalesQuota) = 2011 ORDER BY sp.SalesYTD DESC;
SELECT COUNT(*) FROM Person JOIN Employee ON Person.BusinessEntityID = Employee.BusinessEntityID WHERE Person.FirstName = 'Alex' AND Employee.MaritalStatus = 'S' AND Employee.OrganizationLevel = 1;
SELECT AVG(VacationHours) FROM Employee WHERE PersonType = 'SP';
SELECT p.LastName, e.JobTitle FROM Document d JOIN BusinessEntity b ON d.Owner = b.BusinessEntityID JOIN Person p ON b.BusinessEntityID = p.BusinessEntityID JOIN Employee e ON b.BusinessEntityID = e.BusinessEntityID WHERE d.Title = 'Crank Arm and Tire Maintenance'
SELECT COUNT(Employee.BusinessEntityID), Employee.OrganizationLevel FROM Employee WHERE Employee.Suffix IS NULL GROUP BY Employee.OrganizationLevel;
SELECT sp.BusinessEntityID FROM SalesPerson sp JOIN SalesPersonQuotaHistory spqh ON sp.BusinessEntityID = spqh.BusinessEntityID WHERE YEAR(spqh.QuotaDate) = 2013 AND spqh.SalesQuota <= (SELECT SUM(SalesYTD) FROM SalesPerson WHERE BusinessEntityID = sp.BusinessEntityID) AND EXISTS (SELECT * FROM SalesTerritoryHistory sth WHERE sth.BusinessEntityID = sp.BusinessEntityID AND sth.TerritoryID = 1);
SELECT DISTINCT p.LastName FROM Person AS p JOIN Employee AS e ON p.BusinessEntityID = e.BusinessEntityID JOIN JobCandidate AS jc ON jc.BusinessEntityID = e.BusinessEntityID WHERE jc.Resume IS NOT NULL AND jc.BusinessEntityID IS NOT NULL;
SELECT E.EmailAddress FROM EmailAddress E JOIN Employee Emp ON E.BusinessEntityID = Emp.BusinessEntityID WHERE Emp.Gender = 'F' AND Emp.MaritalStatus = 'S';
SELECT DISTINCT p.Color FROM Product AS p JOIN ProductReview AS pr ON p.ProductID = pr.ProductID;
SELECT     SUM(spqh.SalesQuota) AS ProjectedSalesQuota2013,     sp.SalesYTD AS SalesYTD FROM     SalesPersonQuotaHistory spqh JOIN     SalesPerson sp ON spqh.BusinessEntityID = sp.BusinessEntityID WHERE     spqh.BusinessEntityID = 275 AND YEAR(spqh.QuotaDate) = 2013;
SELECT BusinessEntityID FROM SalesPersonQuotaHistory WHERE YEAR(QuotaDate) = 2013 AND SalesQuota > (     SELECT SalesYTD     FROM SalesPerson     WHERE SalesPerson.BusinessEntityID = SalesPersonQuotaHistory.BusinessEntityID )
SELECT     (COUNT(CASE WHEN Gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS PercentageFemale FROM     works_cycles.Person p WHERE     p.EmailPromotion = 1;
SELECT     SUM(CASE WHEN E.MaritalStatus = 'M' THEN 1 ELSE 0 END) AS MarriedCount,     SUM(CASE WHEN E.MaritalStatus = 'S' THEN 1 ELSE 0 END) AS SingleCount,     CAST(SUM(CASE WHEN E.MaritalStatus = 'M' THEN 1 ELSE 0 END) AS FLOAT) /     CAST(SUM(CASE WHEN E.MaritalStatus = 'S' THEN 1 ELSE 0 END) AS FLOAT) * 100 AS Percentage FROM     Employee E WHERE     E.PersonType = 'EM'
SELECT     SUM(SP.Bonus) AS TotalBonus,     (SUM(SP.Bonus) / SUM(Spqh.SalesQuota)) * 100 AS BonusPercentage FROM     SalesPerson SP JOIN     SalesPersonQuotaHistory Spqh ON SP.BusinessEntityID = Spqh.BusinessEntityID WHERE     YEAR(Spqh.QuotaDate) = 2013;
SELECT COUNT(DISTINCT CardType) AS TotalCardTypes,        SUM(CASE WHEN CardType = 'Vista' THEN 1 ELSE 0 END) AS VistaCards FROM CreditCard;
SELECT Name FROM Product WHERE ProductID = 475;
SELECT COUNT(*) FROM Employee WHERE BirthDate < '1980-01-01' AND (MaritalStatus = 'S' OR MaritalStatus IS NULL);
SELECT Store.Name FROM Store JOIN SalesPerson ON Store.SalesPersonID = SalesPerson.BusinessEntityID WHERE SalesPerson.BusinessEntityID = 277;
SELECT SUM(TransactionQuantity) FROM TransactionHistory WHERE ProductID = 989 AND TransactionType = 'S' AND TransactionDate BETWEEN '2013-08-01' AND '2013-08-31';
SELECT CardNumber FROM CreditCard WHERE ExpYear < 2007;
SELECT Rate FROM EmployeePayHistory JOIN Employee ON EmployeePayHistory.BusinessEntityID = Employee.BusinessEntityID WHERE DATEDIFF(year, BirthDate, HireDate) = 20;
SELECT T.Name FROM SalesPerson AS SP JOIN SalesTerritory AS T ON SP.TerritoryID = T.TerritoryID WHERE SP.BusinessEntityID = 277;
SELECT FirstName + ' ' + ISNULL(MiddleName, '') + ' ' + LastName AS FullName FROM Employee WHERE JobTitle = 'Vice President of Production';
SELECT COUNT(*) FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID JOIN Shift s ON e.BusinessEntityID = s.BusinessEntityID WHERE d.Name = 'Information Service' AND s.Name = 'Evening';
SELECT PurchaseOrderID FROM PurchaseOrderHeader WHERE VendorID IN (     SELECT BusinessEntityID     FROM Vendor     WHERE CreditRating = 5 );
SELECT PhoneNumberType.Name FROM PhoneNumberType JOIN EmailAddress ON PhoneNumberType.PhoneNumberTypeID = EmailAddress.BusinessEntityID WHERE EmailAddress.EmailAddress = '114-555-0100';
SELECT SUM(po.Freight) AS TotalShipmentCost FROM PurchaseOrderHeader po JOIN ShipMethod sm ON po.ShipMethodID = sm.ShipMethodID WHERE sm.Name = 'cargo transport 5' AND po.OrderDate = '2011-12-14';
SELECT COUNT(*) FROM SalesOrderHeader WHERE SalesPersonID IN (     SELECT BusinessEntityID     FROM Person     WHERE PersonType = 'SP' AND FirstName = 'David' AND MiddleName = 'R.' AND LastName = 'Campbell' );
SELECT EmailAddress.EmailAddress FROM EmailAddress JOIN Person ON EmailAddress.BusinessEntityID = Person.BusinessEntityID WHERE Person.JobTitle = 'Facilities Manager';
SELECT COUNT(*) FROM Customer c JOIN SalesTerritory st ON c.TerritoryID = st.TerritoryID WHERE st.Name = 'Canada';
SELECT a.AddressLine1, a.AddressLine2, a.City FROM Address AS a JOIN SalesOrderHeader AS soh ON a.AddressID = soh.ShipToAddressID WHERE soh.SalesOrderID = 43873;
Error: 第 7225 个样本有 2 个SQL。
SELECT COUNT(*) FROM Employee e JOIN EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE e.JobTitle = 'Production Technician' AND ep.Rate < (SELECT AVG(Rate) FROM EmployeePayHistory WHERE BusinessEntityID IN (SELECT BusinessEntityID FROM Employee WHERE JobTitle = 'Production Technician'));
SELECT     SUM(CASE WHEN T3.CountryRegionCode = 'UK' THEN 1 ELSE 0 END) * 1.0 / COUNT(T1.SalesOrderID) AS Proportion FROM     SalesOrderHeader AS T1 INNER JOIN     SalesPerson AS T2 ON T1.SalesPersonID = T2.BusinessEntityID INNER JOIN     CountryRegion AS T3 ON T2.TerritoryID = T3.CountryRegionCode;
Error: 第 7228 个样本有 2 个SQL。
SELECT BusinessEntityID FROM SalesPerson WHERE SalesYTD = (SELECT MAX(SalesYTD) FROM SalesPerson)
SELECT * FROM Vendor WHERE ActiveFlag = 1 AND PurchasingWebServiceURL IS NOT NULL;
SELECT T.Name FROM SalesTerritory T JOIN Customer C ON T.TerritoryID = C.TerritoryID WHERE C.ModifiedDate BETWEEN '2014-09-12 00:00:00' AND '2014-09-12 23:59:59' GROUP BY T.Name ORDER BY COUNT(C.CustomerID) DESC LIMIT 1;
SELECT SUM(TotalDue) AS Total_Cost FROM SalesOrderHeader WHERE OrderDate = '2013-05-29';
SELECT TOP 1 FirstName, COUNT(*) AS Count FROM Person WHERE PersonType = 'VC' GROUP BY FirstName ORDER BY Count DESC;
SELECT FirstName + ' ' + ISNULL(MiddleName, '') + ' ' + LastName AS FullName FROM Person WHERE BusinessEntityID IN (     SELECT BusinessEntityID     FROM Employee     WHERE JobTitle = 'Production Technician - WC50' );
SELECT COUNT(*) FROM SalesOrderDetail sod JOIN Product p ON sod.ProductID = p.ProductID WHERE p.Name = 'Minipump';
SELECT BusinessEntityID FROM PersonCreditCard WHERE CreditCardID = (     SELECT CreditCardID     FROM CreditCard     WHERE CardNumber = '11113366963373' );
SELECT a.AddressLine1, a.AddressLine2, a.City FROM Address AS a JOIN BusinessEntityAddress AS bea ON a.AddressID = bea.AddressID JOIN Person AS p ON bea.BusinessEntityID = p.BusinessEntityID JOIN AddressType AS at ON bea.AddressTypeID = at.AddressTypeID WHERE p.BusinessEntityID = 5555 AND at.Name = 'Home';
SELECT p.Name FROM Product p JOIN SpecialOfferProduct sop ON p.ProductID = sop.ProductID WHERE sop.SpecialOfferID = 15;
SELECT cc.CardNumber FROM CreditCard cc JOIN PersonCreditCard pcc ON cc.CreditCardID = pcc.CreditCardID JOIN Person p ON p.BusinessEntityID = pcc.BusinessEntityID WHERE p.FirstName = 'Michelle' AND p.MiddleName = 'E' AND p.LastName = 'Cox';
SELECT sr.Name FROM SalesOrderHeaderSalesReason sohsr JOIN SalesReason sr ON sohsr.SalesReasonID = sr.SalesReasonID WHERE sohsr.SalesOrderID = 51883;
SELECT cc.CardNumber FROM CreditCard cc JOIN SalesOrderHeader soh ON cc.CreditCardID = soh.CreditCardID WHERE soh.SalesOrderID = 45793;
SELECT sp.BusinessEntityID, p.FirstName, p.LastName FROM SalesPerson sp JOIN Person p ON sp.BusinessEntityID = p.BusinessEntityID JOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID WHERE st.Name = 'Northwest' AND st.CountryRegionCode = 'US';
SELECT TOP 1 e.BusinessEntityID, e.JobTitle, ep.Rate FROM Employee AS e JOIN EmployeePayHistory AS ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE e.JobTitle = 'Production Technician' ORDER BY ep.Rate DESC;
SELECT p.FirstName + p.MiddleName + p.LastName AS FullName FROM SalesPerson sp JOIN Person p ON sp.BusinessEntityID = p.BusinessEntityID WHERE sp.TerritoryID = 9;
Error: 第 7245 个样本有 2 个SQL。
Error: 第 7246 个样本有 3 个SQL。
SELECT     (COUNT(CASE WHEN s.Name = 'Night' THEN 1 END) * 100.0 / COUNT(s.ShiftID)) AS Percentage FROM     Employee e JOIN     Shift s ON e.ShiftID = s.ShiftID;
SELECT COUNT(*) FROM Employee WHERE MaritalStatus = 'M' AND Gender = 'M' AND BirthDate <= '1959-12-31';
SELECT TOP 5 p.Name, MAX(plph.ListPrice) as HighestSellingPrice FROM Product p JOIN ProductListPriceHistory plph ON p.ProductID = plph.ProductID GROUP BY p.Name ORDER BY HighestSellingPrice DESC;
SELECT MIN(HireDate) AS FirstHireDate FROM Employee WHERE JobTitle = 'Accountant';
SELECT JobTitle, COUNT(JobTitle) as CountOfJobTitle FROM Employee WHERE HireDate BETWEEN '2007-01-01' AND '2007-12-31' GROUP BY JobTitle ORDER BY CountOfJobTitle DESC LIMIT 1;
SELECT TOP 1 v.Name, (p.LastReceiptCost - p.StandardPrice) AS ProfitOnNet FROM ProductVendor pv JOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID JOIN (     SELECT ProductID, MAX(StandardPrice) AS MaxStandardPrice     FROM ProductVendor     GROUP BY ProductID ) maxpv ON pv.ProductID = maxpv.ProductID AND pv.StandardPrice = maxpv.MaxStandardPrice JOIN Product p ON pv.ProductID = p.ProductID ORDER BY ProfitOnNet DESC
SELECT COUNT(DISTINCT EDH.DepartmentID) FROM EmployeeDepartmentHistory EDH JOIN Employee E ON EDH.BusinessEntityID = E.BusinessEntityID WHERE E.FirstName = 'Sheela' AND E.LastName = 'Ward' AND (EDH.StartDate >= '2011-01-01' AND EDH.EndDate <= '2012-12-31') AND YEAR(EDH.StartDate) BETWEEN 2011 AND 2012 AND YEAR(EDH.EndDate) BETWEEN 2011 AND 2012;
SELECT AVG(DATE_PART('year', AGE(TIMESTAMP '2009-12-31', e.BirthDate))) AS AverageAge FROM Employee e JOIN SalesPerson sp ON e.BusinessEntityID = sp.BusinessEntityID WHERE e.CurrentFlag = 1 AND e.HireDate <= TIMESTAMP '2009-12-31';
SELECT GroupName, Name FROM Department d WHERE d.DepartmentID = (     SELECT DepartmentID     FROM EmployeeDepartmentHistory edh     GROUP BY DepartmentID     ORDER BY COUNT(DepartmentID) ASC     LIMIT 1 );
SELECT MAX(DATEADD(year, -BirthDate, '20151231') - DATEADD(year, YEAR(BirthDate), '0')), Rate FROM Employee WHERE JobTitle = 'Marketing Specialist' ORDER BY DATEADD(year, -BirthDate, '20151231') - DATEADD(year, YEAR(BirthDate), '0') DESC LIMIT 1;
SELECT V.Name, SUM(POD.LineTotal) AS TotalAmountDue FROM Vendor V JOIN PurchaseOrderHeader POH ON V.BusinessEntityID = POH.VendorID JOIN PurchaseOrderDetail POD ON POH.PurchaseOrderID = POD.PurchaseOrderID WHERE V.BusinessEntityID = (     SELECT TOP 1 BusinessEntityID     FROM (         SELECT BusinessEntityID, MIN(UnitPrice) AS MinUnitPrice         FROM PurchaseOrderDetail         GROUP BY BusinessEntityID     ) AS T     ORDER BY MinUnitPrice ) GROUP BY V.Name;
SELECT     poh.EmployeeID,     DATEDIFF(YEAR, e.BirthDate, e.HireDate) AS AgeAtHire FROM     PurchaseOrderHeader poh JOIN     Employee e ON poh.EmployeeID = e.BusinessEntityID WHERE     (poh.TotalDue - poh.Freight) = (         SELECT MAX(poh2.TotalDue - poh2.Freight)         FROM PurchaseOrderHeader poh2     )
SELECT     e.FirstName + ' ' + COALESCE(e.MiddleName, '') + ' ' + e.LastName AS FullName,     ep.Rate AS Salary FROM     Employee e JOIN     EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE     ep.BusinessEntityID IN (         SELECT TOP 10             BusinessEntityID         FROM             EmployeePayHistory         ORDER BY             Rate DESC     ) ORDER BY     ep.Rate DESC OFFSET 9 ROWS FETCH NEXT 1 ROW ONLY;
SELECT P.Name, (P.ListPrice - PC.StandardCost) AS Profit FROM Product P JOIN ProductReview PR ON P.ProductID = PR.ProductID JOIN ProductCostHistory PC ON P.ProductID = PC.ProductID WHERE PR.ReviewerName = 'John Smith' AND PR.Rating = 5 GROUP BY P.Name, (P.ListPrice - PC.StandardCost) ORDER BY (P.ListPrice - PC.StandardCost) DESC LIMIT 1;
SELECT TOP 5 Rate FROM EmployeePayHistory JOIN Employee ON EmployeePayHistory.BusinessEntityID = Employee.BusinessEntityID ORDER BY Employee.HireDate ASC;
SELECT TOP 1 V.Name FROM (     SELECT BusinessEntityID, SUM(LastReceiptCost - StandardPrice) AS ProfitOnNet     FROM ProductVendor     WHERE MaxOrderQty BETWEEN 500 AND 750     GROUP BY BusinessEntityID     ) AS PV JOIN Vendor V ON PV.BusinessEntityID = V.BusinessEntityID ORDER BY ProfitOnNet DESC OFFSET 9 ROWS FETCH NEXT 1 ROW ONLY;
SELECT DATEDIFF(year, E.HireDate, '20111231') AS YearsOfWork FROM Employee E JOIN Document D ON E.BusinessEntityID = D.Owner WHERE D.Status = 1
SELECT TOP 1 p.Name, p.DaysToManufacture FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE pr.Rating = 2 AND p.Class = 'M' AND pr.ReviewerName = 'Jill' ORDER BY pr.Rating DESC, p.DaysToManufacture ASC;
SELECT P.FirstName, P.MiddleName, P.LastName, E.JobTitle FROM Employee AS E JOIN Person AS P ON E.BusinessEntityID = P.BusinessEntityID WHERE E.HireDate = (     SELECT MIN(HireDate)     FROM Employee )
SELECT COUNT(*) FROM WorkOrder WHERE OrderQty BETWEEN 100 AND 250 AND ReorderPoint <= 375;
SELECT     AVG(CASE WHEN Gender = 'F' THEN Rate END) AS AvgFemaleSalary,     AVG(CASE WHEN Gender = 'M' THEN Rate END) AS AvgMaleSalary FROM     EmployeePayHistory EPH JOIN     Employee E ON EPH.BusinessEntityID = E.BusinessEntityID WHERE     E.Gender IN ('F', 'M');
SELECT DISTINCT V.Name FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID JOIN Product P ON PV.ProductID = P.ProductID JOIN ProductSubcategory PS ON P.ProductSubcategoryID = PS.ProductSubcategoryID WHERE P.MakeFlag = 0 AND PS.Name = 'Tights' AND P.Style = 'W';
SELECT EmployeePayHistory.PayFrequency FROM EmployeePayHistory JOIN Employee ON EmployeePayHistory.BusinessEntityID = Employee.BusinessEntityID WHERE Employee.JobTitle = 'Scheduling Assistant' ORDER BY EmployeePayHistory.RateChangeDate LIMIT 1;
SELECT TOP 1 P.Class, PB.Name AS 'Line of Business', P.ListPrice FROM Product AS P JOIN ProductSubcategory AS PS ON P.ProductSubcategoryID = PS.ProductSubcategoryID JOIN ProductCategory AS PB ON PS.ProductCategoryID = PB.ProductCategoryID JOIN ProductDocument AS PD ON P.ProductID = PD.ProductID JOIN Document AS D ON PD.DocumentNode = D.DocumentNode JOIN SalesOrderDetail AS SOD ON P.ProductID = SOD.ProductID JOIN SalesOrderHeader AS SOH ON SOD.SalesOrderID = SOH.SalesOrderID WHERE SOH.OnlineOrderFlag = 1 GROUP BY P.Class, PB.Name, P.ListPrice ORDER BY SUM(SOD.OrderQty) ASC
SELECT TOP 1 p.FirstName + ' ' + p.MiddleName + ' ' + p.LastName AS FullName FROM Person p JOIN SalesPerson sp ON p.BusinessEntityID = sp.BusinessEntityID ORDER BY sp.CommissionPct DESC;
SELECT TOP 1 (p.FirstName + COALESCE(p.MiddleName, '') + ' ' + p.LastName) AS FullName FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE e.HireDate IN (     SELECT TOP 2 HireDate     FROM Employee     ORDER BY HireDate ASC ) ORDER BY e.HireDate DESC;
SELECT TOP 1 p.Name, SUM(sol.Quantity * (p.ListPrice - p.StandardCost)) AS TotalProfit FROM Product AS p JOIN SalesOrderDetail AS sol ON p.ProductID = sol.ProductID JOIN SalesOrderHeader AS soh ON sol.SalesOrderID = soh.SalesOrderID WHERE soh.OnlineOrderFlag = 1 GROUP BY p.Name ORDER BY TotalProfit DESC;
Error: 第 7274 个样本有 2 个SQL。
SELECT     AVG(pv.AverageLeadTime) AS AvgLeadTime,     (pv.LastReceiptCost - pv.StandardPrice) AS ProfitOnNet,     a.AddressLine1 + a.AddressLine2 + a.City + a.PostalCode AS FullLocation FROM     ProductVendor pv JOIN     Vendor v ON pv.BusinessEntityID = v.BusinessEntityID JOIN     Address a ON v.BusinessEntityID = a.BusinessEntityID WHERE     pv.ProductID = 843;
SELECT COUNT(*) FROM SalesPerson WHERE Bonus = 0;
SELECT COUNT(*) FROM SalesTaxRate WHERE Name LIKE '%+%' AND TaxType = 1;
SELECT MAX(ActualCost) FROM TransactionHistory WHERE TransactionType = 'P';
SELECT Status FROM SalesOrderHeader WHERE Freight = (SELECT MAX(Freight) FROM SalesOrderHeader)
SELECT COUNT(*) FROM ProductInventory WHERE OnOrderQty = 0;
SELECT MAX(p.LastReceiptCost - pv.StandardPrice) AS HighestProfitOnNet FROM Product AS p JOIN ProductVendor AS pv ON p.ProductID = pv.ProductID
SELECT ReviewerName FROM ProductReview WHERE Rating = (SELECT MAX(Rating) FROM ProductReview) GROUP BY ReviewerName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ProductID, COUNT(*) AS ReviewCount FROM ProductReview GROUP BY ProductID ORDER BY ReviewCount DESC LIMIT 1;
SELECT COUNT(*) FROM Product p WHERE p.MakeFlag = 0 AND p.ProductID NOT IN (     SELECT pr.ProductID     FROM ProductReview pr     WHERE pr.Rating = 5 );
SELECT MAX(review_count) AS max_reviews FROM (     SELECT COUNT(pr.ProductID) AS review_count     FROM ProductReview pr     JOIN Product p ON pr.ProductID = p.ProductID     WHERE p.FinishedGoodsFlag = 1     GROUP BY pr.ProductID ) subquery;
SELECT COUNT(*) FROM (     SELECT p.ProductID     FROM Product AS p     INNER JOIN ProductReview AS pr ON p.ProductID = pr.ProductID     WHERE p.MakeFlag = 1 AND p.FinishedGoodsFlag = 1     GROUP BY p.ProductID     HAVING COUNT(pr.Comments) > 10 ) AS SubQuery;
SELECT p.Name FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE p.FinishedGoodsFlag = 1 GROUP BY p.ProductID, p.Name HAVING COUNT(pr.Comments) > 10;
Error: 第 7288 个样本有 2 个SQL。
SELECT p.Class FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID GROUP BY p.Class ORDER BY COUNT(pr.Comments) DESC LIMIT 1;
SELECT DISTINCT EmailAddress FROM ProductReview pr JOIN Product p ON pr.ProductID = p.ProductID JOIN EmailAddress ea ON pr.ReviewerName = (SELECT FirstName + ' ' + LastName FROM Person WHERE BusinessEntityID = ea.BusinessEntityID) WHERE p.Class = 'H' AND p.Style = 'M';
SELECT p.Name FROM Product p JOIN ProductListPriceHistory plph ON p.ProductID = plph.ProductID GROUP BY p.Name HAVING COUNT(plph.ListPrice) > 3;
SELECT pd.Description FROM ProductDescription pd JOIN ProductModelProductDescriptionCulture pmpd ON pd.ProductDescriptionID = pmpd.ProductDescriptionID JOIN ProductModel pm ON pmpd.ProductModelID = pm.ProductModelID WHERE pm.Name = 'Headset Ball Bearings'
SELECT MAX(StandardPrice) FROM ProductVendor WHERE ProductID = (SELECT ProductID FROM Product WHERE Name = 'Hex Nut 5');
SELECT pv.StandardPrice FROM ProductVendor pv JOIN Product p ON pv.ProductID = p.ProductID WHERE p.Name = 'Hex Nut 5';
SELECT COUNT(*) FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID JOIN Product p ON pv.ProductID = p.ProductID WHERE p.Name = 'Hex Nut 5' AND v.CreditRating BETWEEN 1 AND 3;
SELECT V.PurchasingWebServiceURL FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID JOIN Product P ON P.ProductID = PV.ProductID WHERE P.Name = 'Hex Nut 5';
SELECT TOP 1 V.Name FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID JOIN Product P ON PV.ProductID = P.ProductID WHERE P.Name = 'Hex Nut 5' ORDER BY PV.StandardPrice ASC;
SELECT COUNT(*) FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID WHERE p.Class = 'H' AND pv.PreferredVendorStatus = 1;
SELECT ListPrice FROM ProductListPriceHistory WHERE ProductID = (     SELECT ProductID     FROM Product     WHERE Name = 'LL Fork' )
SELECT COUNT(DISTINCT p.ProductID) FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID WHERE p.ProductLine = 'M' GROUP BY p.ProductID HAVING COUNT(DISTINCT pv.BusinessEntityID) > 2;
Error: 第 7301 个样本有 2 个SQL。
SELECT EmailAddress FROM ProductReview pr JOIN EmailAddress ea ON pr.ReviewerName = (SELECT pe.FirstName + ' ' + pe.LastName FROM Person pe WHERE pe.BusinessEntityID = ea.BusinessEntityID) WHERE pr.ProductID = (SELECT ProductID FROM Product WHERE Name = 'HL Mountain Pedal') AND pr.Rating = 1;
SELECT COUNT(*) FROM Product WHERE DaysToManufacture > 2 AND (OnOrderQty = 0 OR OnOrderQty IS NULL);
Error: 第 7304 个样本有 2 个SQL。
SELECT COUNT(*) AS ReviewCount FROM (     SELECT p.ProductID     FROM Product p     WHERE p.FinishedGoodsFlag = 1 AND p.ProductLine = 'M' ) AS SalableMountainProducts JOIN ProductReview pr ON SalableMountainProducts.ProductID = pr.ProductID GROUP BY SalableMountainProducts.ProductID ORDER BY ReviewCount DESC LIMIT 1;
SELECT AVG(StandardPrice) as AverageSellingPrice FROM ProductVendor JOIN Product ON ProductVendor.ProductID = Product.ProductID WHERE Product.Name = 'Hex Nut 5';
SELECT p.Name FROM Product p JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID JOIN ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE pc.Name = 'Bikes' AND ps.Name = 'Mountain' GROUP BY p.Name ORDER BY AVG(pr.Rating) DESC LIMIT 1;
SELECT TOP 3 p.Name, AVG(pr.Rating) as AverageRating FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE p.MakeFlag = 1 GROUP BY p.Name ORDER BY AverageRating DESC;
SELECT * FROM Employee WHERE PersonType = 'EM' ORDER BY BusinessEntityID ASC;
SELECT FirstName, MiddleName, LastName FROM Person WHERE PersonType = 'IN' AND LastName = 'Anderson';
SELECT FirstName, LastName, HireDate FROM Employee WHERE EndDate IS NOT NULL;
SELECT FirstName, LastName FROM Employee WHERE SalariedFlag = 1 AND YEAR(HireDate) >= 2007;
SELECT FirstName, LastName FROM Employee WHERE MaritalStatus = 'M' AND VacationHours < 20;
SELECT TOP 1 e.FirstName, e.LastName, 2022 - YEAR(e.BirthDate) + 1 AS Age FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Shift s ON edh.ShiftID = s.ShiftID WHERE s.Name = 'Night' ORDER BY e.BirthDate ASC
SELECT e.BusinessEntityID, e.NationalIDNumber, e.LoginID, e.JobTitle, e.BirthDate, e.MaritalStatus, e.Gender, e.HireDate FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID WHERE d.Name = 'Shipping and Receiving' AND YEAR(e.HireDate) = 2009;
SELECT TOP 1 e.JobTitle, d.Name AS DepartmentName FROM Employee e JOIN Department d ON e.DepartmentID = d.DepartmentID WHERE e.BirthDate = (SELECT MIN(BirthDate) FROM Employee)
SELECT     edh.DepartmentID,     AVG(eph.Rate) AS AverageHourlyPayrate FROM     EmployeeDepartmentHistory edh JOIN     EmployeePayHistory eph ON edh.BusinessEntityID = eph.BusinessEntityID WHERE     eph.RateChangeDate = (         SELECT             MAX(RateChangeDate)         FROM             EmployeePayHistory eph2         WHERE             eph2.BusinessEntityID = eph.BusinessEntityID     ) GROUP BY     edh.DepartmentID;
SELECT TOP 1 e.BusinessEntityID, ep.Rate FROM Employee e JOIN EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE e.JobTitle != 'Chief Executive Officer' ORDER BY ep.Rate DESC;
SELECT TOP 1 V.Name FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID WHERE PV.ProductID = 319 ORDER BY V.AverageLeadTime ASC;
SELECT p.Name FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID JOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID WHERE v.Name = 'Australia Bike Retailer' ORDER BY p.ProductID;
SELECT TOP 1 V.Name, (PV.LastReceiptCost - PV.StandardPrice) AS ProfitOnNet FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID WHERE PV.ProductID = 342 ORDER BY ProfitOnNet DESC;
SELECT     (MAX(ep.Rate) - MIN(ep.Rate)) / MIN(ep.Rate) * 100 AS PercentageIncrement,     MAX(ep.Rate) AS CurrentPayRate FROM     EmployeePayHistory ep JOIN     Employee e ON ep.BusinessEntityID = e.BusinessEntityID WHERE     e.FirstName = 'Rob' AND e.LastName = 'Walters' GROUP BY     ep.BusinessEntityID;
SELECT AVG(DATEPART(YEAR, GETDATE()) - DATEPART(YEAR, HireDate)) AS AvgLengthOfEmployment FROM Employee JOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID JOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID WHERE Department.Name = 'Research and Development' AND EmployeeDepartmentHistory.EndDate IS NULL;
SELECT AVG(DATEDIFF(YEAR, HireDate, GETDATE())) AS AverageAge FROM Employee;
SELECT (COUNT(CASE WHEN JobTitle = 'Sales Representative' THEN 1 END) * 100.0 / COUNT(JobTitle)) AS Percentage_Sales_Representatives FROM Employee;
SELECT p.FirstName, p.LastName, pat.Name AS PhoneType, ph.PhoneNumber FROM Person AS p JOIN Employee AS e ON p.BusinessEntityID = e.BusinessEntityID JOIN BusinessEntityContact AS bec ON e.BusinessEntityID = bec.BusinessEntityID JOIN PhoneNumberType AS pat ON bec.PersonID = pat.BusinessEntityID JOIN PersonPhone AS ph ON pat.PhoneNumberTypeID = ph.PhoneNumberTypeID WHERE e.JobTitle = 'Marketing Manager';
SELECT p.FirstName, p.LastName FROM Person p JOIN PersonCreditCard pcc ON p.BusinessEntityID = pcc.BusinessEntityID JOIN CreditCard cc ON pcc.CreditCardID = cc.CreditCardID WHERE cc.CardType = 'Distinguish';
SELECT sp.FirstName, sp.LastName, st.Name AS TerritoryName FROM SalesPerson sp JOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID JOIN Store s ON sp.BusinessEntityID = s.SalesPersonID WHERE s.Name = 'Area Bike Accessories'
SELECT s.Name AS StoreName, sp.FirstName + ' ' + sp.LastName AS SalesRepresentative FROM Store s JOIN SalesPerson sp ON s.SalesPersonID = sp.BusinessEntityID JOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID WHERE st.Name = 'France';
SELECT p.Name, v.Name as VendorName FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID JOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID WHERE YEAR(p.SellStartDate) = 2013;
SELECT TOP 1 pe.FirstName, pe.LastName FROM SalesPerson sp JOIN Person pe ON sp.BusinessEntityID = pe.BusinessEntityID WHERE sp.SalesYTD = (SELECT MAX(SalesYTD) FROM SalesPerson)
SELECT ProductID, Name, MinOrderQty, StandardCost FROM ProductVendor JOIN Product ON ProductVendor.ProductID = Product.ProductID WHERE MinOrderQty = 1000 AND StandardCost > 17;
SELECT TOP 1 JobTitle FROM Employee WHERE Gender = 'M' AND MaritalStatus = 'M' ORDER BY BirthDate ASC;
SELECT V.Name FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID JOIN Product P ON PV.ProductID = P.ProductID WHERE P.ProductNumber = 'WB-H098';
SELECT TOP 1 V.Name, AVG(PV.AverageLeadTime) as AverageLeadTime FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID WHERE PV.ProductID = 348 GROUP BY V.Name ORDER BY AVG(PV.AverageLeadTime) ASC
SELECT TOP 1 * FROM Employee WHERE YEAR(BirthDate) >= 1970 ORDER BY SickLeaveHours ASC;
SELECT     d.Name AS DepartmentName,     AVG(DATEDIFF(YEAR, e.BirthDate, GETDATE())) AS AverageAge FROM     HumanResources.Employee AS e JOIN     HumanResources.EmployeeDepartmentHistory AS edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN     HumanResources.Department AS d ON edh.DepartmentID = d.DepartmentID WHERE     edh.EndDate IS NULL GROUP BY     d.Name ORDER BY     AverageAge ASC LIMIT 1;
SELECT TOP 3 ProductSubcategoryID FROM ProductSubcategory;
SELECT     SalesPerson.SalesQuota AS PredictedAnnualSales,     SalesPerson.SalesYTD AS ActualSalesThusFar,     (SalesPerson.SalesQuota - SalesPerson.SalesYTD) AS Difference FROM     SalesPerson WHERE     SalesPerson.BusinessEntityID = 288;
Error: 第 7340 个样本有 2 个SQL。
SELECT TOP 3 Name, SalesYTD FROM SalesTerritory ORDER BY SalesYTD DESC;
SELECT so.Description FROM SpecialOffer so WHERE so.Category = 'Reseller' AND so.Type = 'Group Discount'
SELECT MAX(DiscountPct) FROM SpecialOffer WHERE Type = 'Excess Inventory';
SELECT     (SELECT PlannedCost FROM WorkOrder WHERE ProductID = 818) -     (SELECT ActualCost FROM WorkOrder WHERE ProductID = 818) AS CostDifference;
SELECT COUNT(*) FROM BillOfMaterials WHERE EndDate IS NULL AND BOMLevel = 2;
SELECT COUNT(*) FROM Document WHERE Status = 2 AND DocumentSummary IS NULL;
Error: 第 7347 个样本有 2 个SQL。
SELECT TOP 1 wo.WorkOrderID FROM WorkOrder wo JOIN TransactionHistory th ON wo.WorkOrderID = th.ReferenceOrderID WHERE th.TransactionType = 'W' ORDER BY wo.OrderQty DESC;
SELECT TOP 3 Name FROM Vendor WHERE PreferredVendorStatus = 0;
SELECT COUNT(*) FROM Vendor WHERE PreferredVendorStatus = 0 AND ActiveFlag = 1;
SELECT COUNT(*) FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Shift s ON edh.ShiftID = s.ShiftID WHERE e.HireDate >= '2009-01-01' AND s.Name = 'Night';
SELECT TOP 1 Department.Name, COUNT(*) AS NumOfNightShiftEmployees FROM EmployeeDepartmentHistory JOIN Employee ON EmployeeDepartmentHistory.BusinessEntityID = Employee.BusinessEntityID JOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID JOIN Shift ON EmployeeDepartmentHistory.ShiftID = Shift.ShiftID WHERE Shift.Name = 'Night' GROUP BY Department.Name ORDER BY NumOfNightShiftEmployees DESC;
SELECT COUNT(*) FROM SalesOrderHeader JOIN ShipMethod ON SalesOrderHeader.ShipMethodID = ShipMethod.ShipMethodID WHERE ShipMethod.Name = 'XRQ - TRUCK GROUND';
SELECT sr.Name FROM SalesOrderHeaderSalesReason sohsr JOIN SalesReason sr ON sohsr.SalesReasonID = sr.SalesReasonID WHERE sohsr.SalesOrderID = 43718;
SELECT DISTINCT psc.Name FROM ProductSubcategory psc JOIN ProductCategory pc ON psc.ProductCategoryID = pc.ProductCategoryID WHERE pc.Name = 'Bikes';
SELECT TOP 1 s.Name AS SalesArea, MAX(sp.SalesQuota) AS HighestYearlySalesQuota FROM SalesPerson sp JOIN SalesTerritory s ON sp.TerritoryID = s.TerritoryID GROUP BY s.Name ORDER BY HighestYearlySalesQuota DESC;
SELECT p.Name FROM Product p JOIN SalesOrderDetail sod ON p.ProductID = sod.ProductID WHERE sod.SalesOrderID = 43660;
SELECT TOP 5 p.Name, SUM(sod.OrderQty) as TotalOrders FROM Product p JOIN SalesOrderDetail sod ON p.ProductID = sod.ProductID GROUP BY p.Name ORDER BY TotalOrders DESC;
SELECT DISTINCT pi.Shelf FROM ProductInventory pi JOIN Product p ON pi.ProductID = p.ProductID WHERE p.Name = 'Down Tube'
SELECT AT.Name FROM AddressType AS AT JOIN BusinessEntityAddress AS BEA ON AT.AddressTypeID = BEA.AddressTypeID JOIN Store AS S ON S.BusinessEntityID = BEA.BusinessEntityID WHERE S.Name = 'Fun Toys and Bikes';
SELECT p.FirstName, p.LastName FROM Person AS p JOIN BusinessEntityContact AS bec ON p.BusinessEntityID = bec.PersonID JOIN Store AS s ON bec.BusinessEntityID = s.BusinessEntityID WHERE s.Name = 'Next-Door Bike Store';
SELECT ReferenceOrderID FROM TransactionHistory WHERE ProductID = (     SELECT ProductID     FROM Product     WHERE Name = 'Mountain End Caps' )
SELECT TOP 1 AddressLine1 FROM Address JOIN BusinessEntityAddress ON Address.AddressID = BusinessEntityAddress.AddressID WHERE BusinessEntityAddress.BusinessEntityID = 12;
SELECT TOP 3 BusinessEntityID, Name FROM Store WHERE SalesPersonID IN (     SELECT BusinessEntityID     FROM SalesPerson     WHERE TerritoryID IN (         SELECT TerritoryID         FROM SalesTerritory         WHERE Name = 'Dallas'     ) );
SELECT StateProvince.Name FROM StateProvince JOIN City ON StateProvince.StateProvinceID = City.StateProvinceID WHERE City.Name = 'Racine'
SELECT     ((COUNT(CASE WHEN c.Name = 'Arabic' THEN pd.ProductDescriptionID END) / COUNT(pd.ProductDescriptionID)) * 100) -     ((COUNT(CASE WHEN c.Name = 'Thai' THEN pd.ProductDescriptionID END) / COUNT(pd.ProductDescriptionID)) * 100) AS DifferenceInPercentage FROM     ProductDescription pd JOIN     ProductModelProductDescriptionCulture pdpc ON pd.ProductDescriptionID = pdpc.ProductDescriptionID JOIN     Culture c ON pdpc.CultureID = c.CultureID;
SELECT     (COUNT(CASE WHEN s.SalesQuota > 300000 THEN st.TerritoryID END) * 100.0 / COUNT(st.TerritoryID)) AS Percentage FROM     SalesTerritory st JOIN     SalesPerson s ON st.TerritoryID = s.TerritoryID WHERE     st.Name = 'Northwest' AND st.CountryRegionCode = 'US';
SELECT (pv.LastReceiptCost - pv.StandardPrice) AS NetProfit FROM ProductVendor pv JOIN Product p ON pv.ProductID = p.ProductID WHERE p.Name = 'Crankarm';
SELECT TOP 1 p.Name FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE pr.Rating = (SELECT MAX(Rating) - 1 FROM ProductReview) ORDER BY pr.Rating DESC;
SELECT MAX(Rate) AS SecondHighestSalaryPerHour FROM EmployeePayHistory WHERE PayFrequency = 1 AND Rate < (SELECT MAX(Rate) FROM EmployeePayHistory WHERE PayFrequency = 1)
SELECT COUNT(*) FROM CreditCard WHERE CardType = 'Vista' AND ExpYear <= 2006;
SELECT StartTime FROM Shift WHERE Name = 'Night'
SELECT p.Name, p.Weight FROM Product p WHERE p.WeightUnitMeasureCode = 'LB'       AND p.Style = (                         SELECT Style                         FROM Product                         GROUP BY Style                         ORDER BY COUNT(*) DESC                         LIMIT 1                     ) GROUP BY p.Name, p.Weight;
SELECT     T.Name AS TerritoryName,     CR.Name AS CountryName,     ABS(ST.SalesYTD - ST.SalesLastYear) AS SalesDifference FROM     SalesTerritory ST JOIN     CountryRegion CR ON ST.CountryRegionCode = CR.CountryRegionCode WHERE     ABS(ST.SalesYTD - ST.SalesLastYear) = (         SELECT             MAX(ABS(SalesYTD - SalesLastYear))         FROM             SalesTerritory     )
SELECT TOP 6 p.Name, p.ReorderPoint FROM Product p WHERE p.SizeUnitMeasureCode = 'CM' ORDER BY p.Size DESC;
SELECT TOP 1 TotalDue FROM (  SELECT DISTINCT TOP 3 TotalDue  FROM PurchaseOrderHeader  ORDER BY Freight DESC ) AS subquery ORDER BY TotalDue ASC;
SELECT TOP 1 (p.ListPrice - p.StandardCost) * 10 AS Profit FROM Product p WHERE p.Weight = (SELECT MIN(Weight) FROM Product);
SELECT TOP 1 PurchaseOrderID, TaxAmt FROM PurchaseOrderHeader ORDER BY TaxAmt DESC;
SELECT COUNT(*) FROM SalesPerson WHERE SalesQuota <= 50000;
SELECT s.Name FROM Shift s JOIN Employee e ON e.BusinessEntityID = (     SELECT TOP 1 e2.BusinessEntityID     FROM Employee e2     WHERE YEAR(e2.BirthDate) < '1969'     ORDER BY e2.BirthDate DESC     OFFSET 5 ROWS ) WHERE e.OrganizationNode LIKE '%' + s.Name + '%'
SELECT TOP 1 p.Name, p.ListPrice - p.StandardCost AS ProfitPerItem, p.DaysToManufacture AS ManufacturingDays, pr.Rating FROM Product p LEFT JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE p.DaysToManufacture = (SELECT MIN(DaysToManufacture) FROM Product) ORDER BY ProfitPerItem DESC;
SELECT FirstName + ' ' + ISNULL(MiddleName, '') + ' ' + LastName AS FullName FROM Person p JOIN SalesPerson sp ON p.BusinessEntityID = sp.BusinessEntityID WHERE sp.Bonus < 1000;
SELECT TOP 1 e.EndDate FROM EmployeeDepartmentHistory edh JOIN Employee e ON edh.BusinessEntityID = e.BusinessEntityID WHERE e.JobTitle = 'Senior Tool Designer' AND       (YEAR(e.HireDate) - YEAR(e.BirthDate)) = 33 AND       edh.DepartmentID = (SELECT DepartmentID FROM Department WHERE Name = 'Engineering') ORDER BY e.EndDate DESC;
SELECT SUM(poh.TotalDue) FROM PurchaseOrderHeader poh JOIN Vendor v ON poh.VendorID = v.BusinessEntityID WHERE v.CreditRating = 4 AND v.PreferredVendorStatus = 0;
SELECT Department.Name FROM Department JOIN EmployeeDepartmentHistory ON Department.DepartmentID = EmployeeDepartmentHistory.DepartmentID JOIN Shift ON EmployeeDepartmentHistory.ShiftID = Shift.ShiftID WHERE Shift.Name = 'Night' GROUP BY Department.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT 2 * (p.ListPrice - p.StandardCost) AS Profit FROM Product p JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID WHERE ps.Name = 'Road Bikes' AND p.Class = 'H' AND p.Color = 'Black' AND p.Size = 58 LIMIT 1;
SELECT TOP 10 p.FirstName + COALESCE(' ' + p.MiddleName, '') + ' ' + p.LastName AS FullName FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE e.JobTitle = 'Production Technician' AND e.MaritalStatus = 'M' AND e.Gender = 'M' ORDER BY e.BirthDate DESC;
SELECT TOP 1 Vendors.Name, Vendors.CreditRating FROM (     SELECT PV.BusinessEntityID, AVG(PV.AverageLeadTime) AS AvgLeadTime,     SUM(PV.LastReceiptCost - PV.StandardPrice) AS ProfitOnNet     FROM ProductVendor PV     GROUP BY PV.BusinessEntityID     HAVING AVG(PV.AverageLeadTime) = 60 ) AS SubQuery JOIN Vendor Vendors ON SubQuery.BusinessEntityID = Vendors.BusinessEntityID ORDER BY SubQuery.ProfitOnNet DESC;
SELECT V.Name, (P.LastReceiptCost - P.StandardPrice) AS ProfitOnNet FROM ProductVendor PV JOIN Vendor V ON PV.BusinessEntityID = V.BusinessEntityID JOIN Product P ON PV.ProductID = P.ProductID WHERE P.MaxOrderQty = 200;
SELECT TOP 1 p.FirstName + ' ' + p.LastName AS FullName FROM Person AS p JOIN Employee AS e ON p.BusinessEntityID = e.BusinessEntityID JOIN PurchaseOrderHeader AS po ON e.BusinessEntityID = po.EmployeeID WHERE p.PersonType = 'EM' AND po.Status = 3 GROUP BY p.FirstName, p.LastName ORDER BY COUNT(*) DESC;
SELECT TOP 1 V.Name FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID WHERE PV.MinOrderQty = (SELECT MIN(MinOrderQty)                         FROM ProductVendor                         WHERE MinOrderQty > (SELECT MIN(MinOrderQty) FROM ProductVendor)) ORDER BY PV.MinOrderQty;
SELECT MIN(ProductVendor.MinOrderQty) FROM ProductVendor JOIN Vendor ON ProductVendor.BusinessEntityID = Vendor.BusinessEntityID WHERE Vendor.ActiveFlag = 0;
SELECT (YEAR(E.HireDate) - YEAR(E.BirthDate)) AS AgeAtHire, E.FirstName + ' ' + E.MiddleName + ' ' + E.LastName AS FullName FROM Employee E WHERE E.VacationHours <= 10 ORDER BY AgeAtHire DESC LIMIT 1;
SELECT PersonType FROM Employee WHERE MaritalStatus = 'S' AND Gender = 'F' AND HireDate BETWEEN '2008-01-01' AND '2008-12-31';
SELECT TOP 1 (p.ListPrice - p.StandardCost) AS Profit FROM ProductReview pr JOIN Product p ON pr.ProductID = p.ProductID WHERE pr.ReviewerName = 'David' AND pr.Rating = 4 ORDER BY pr.Rating DESC, pr.ProductReviewID DESC;
SELECT TOP 1 st.Name, st.Group FROM StateProvince AS st JOIN SalesTaxRate AS str ON st.StateProvinceID = str.StateProvinceID WHERE str.TaxRate <> (SELECT MIN(TaxRate) FROM SalesTaxRate) ORDER BY str.TaxRate ASC;
SELECT     AVG(p.ListPrice - p.StandardCost) AS AverageProfit,     COUNT(DISTINCT p.Size) AS VarietyOfSize,     GROUP_CONCAT(DISTINCT p.Color ORDER BY p.Color ASC) AS AvailableColors FROM     Product p JOIN     ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID WHERE     ps.Name = 'Road Frames' AND     p.Class = 'L' AND     p.Style = 'U' GROUP BY     p.Class, p.Style ;
SELECT DiscountPct FROM SpecialOffer WHERE Description = 'LL Road Frame Sale';
SELECT COUNT(*) FROM SpecialOffer WHERE Type = 'Excess Inventory';
SELECT TOP 1 Description, MAX(DiscountPct) AS HighestDiscount FROM SpecialOffer WHERE Type = 'Seasonal' GROUP BY Description ORDER BY HighestDiscount DESC;
SELECT TOP 3 Description, DiscountPct FROM SpecialOffer WHERE Type = 'Reseller' ORDER BY DiscountPct DESC;
SELECT Demographics FROM Store WHERE Name = 'Valley Bicycle Specialists';
SELECT COUNT(*) FROM Product WHERE MakeFlag = 1 AND FinishedGoodsFlag = 1;
SELECT MIN(SafetyStockLevel) FROM Product WHERE Name = 'Chainring Bolts';
Error: 第 7405 个样本有 2 个SQL。
SELECT PersonType FROM Person WHERE FirstName = 'David' AND LastName = 'Bradley';
SELECT COUNT(*) FROM Person WHERE PersonType = 'SC' AND Title = 'Mr.';
SELECT a.AddressLine1, a.AddressLine2 FROM Address AS a JOIN Store AS s ON a.AddressID = s.BusinessEntityID WHERE s.Name = 'Valley Bicycle Specialists';
SELECT EmailAddress FROM EmailAddress JOIN Person ON EmailAddress.BusinessEntityID = Person.BusinessEntityID WHERE Person.FirstName = 'David' AND Person.LastName = 'Bradley';
Error: 第 7410 个样本有 2 个SQL。
SELECT PasswordHash FROM Password WHERE BusinessEntityID = (SELECT BusinessEntityID                            FROM Person                            WHERE FirstName = 'David' AND LastName = 'Bradley');
SELECT EmailAddress.EmailAddress FROM EmailAddress JOIN Person ON EmailAddress.BusinessEntityID = Person.BusinessEntityID WHERE Person.EmailPromotion = 2;
SELECT CC.CardNumber FROM CreditCard CC JOIN PersonCreditCard PCC ON CC.CreditCardID = PCC.CreditCardID JOIN Person P ON P.BusinessEntityID = PCC.BusinessEntityID WHERE P.FirstName = 'David' AND P.LastName = 'Bradley';
SELECT ExpYear FROM Person p JOIN PersonCreditCard pcc ON p.BusinessEntityID = pcc.BusinessEntityID JOIN CreditCard cc ON pcc.CreditCardID = cc.CreditCardID WHERE p.FirstName = 'David' AND p.LastName = 'Bradley';
Error: 第 7415 个样本有 2 个SQL。
SELECT COUNT(*) FROM Person p JOIN BusinessEntityContact bec ON p.BusinessEntityID = bec.BusinessEntityID JOIN EmailAddress ea ON p.BusinessEntityID = ea.BusinessEntityID JOIN Store s ON bec.BusinessEntityID = s.BusinessEntityID JOIN PersonCreditCard pcc ON p.BusinessEntityID = pcc.BusinessEntityID JOIN CreditCard cc ON pcc.CreditCardID = cc.CreditCardID WHERE p.PersonType = 'SC' AND cc.CardType = 'Vista';
SELECT COUNT(DISTINCT edh.DepartmentID) FROM EmployeeDepartmentHistory edh JOIN Employee e ON edh.BusinessEntityID = e.BusinessEntityID WHERE e.FirstName = 'David' AND e.LastName = 'Bradley';
SELECT DISTINCT d.Name FROM Department d JOIN EmployeeDepartmentHistory edh ON d.DepartmentID = edh.DepartmentID JOIN Employee e ON edh.BusinessEntityID = e.BusinessEntityID WHERE e.FirstName = 'David' AND e.LastName = 'Bradley';
SELECT COUNT(*) FROM EmployeeDepartmentHistory JOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID WHERE Department.Name = 'Engineering' AND YEAR(EmployeeDepartmentHistory.StartDate) <= 2009 AND (YEAR(EmployeeDepartmentHistory.EndDate) >= 2009 OR EmployeeDepartmentHistory.EndDate IS NULL);
SELECT TOP 1 p.FirstName, p.LastName FROM Person AS p JOIN Employee AS e ON p.BusinessEntityID = e.BusinessEntityID JOIN EmployeeDepartmentHistory AS edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department AS d ON edh.DepartmentID = d.DepartmentID WHERE d.Name = 'Engineering' ORDER BY (SELECT DATEDIFF(day, edh.StartDate, COALESCE(edh.EndDate, GETDATE()))) DESC;
SELECT COUNT(*) FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID JOIN Person p ON e.BusinessEntityID = p.BusinessEntityID WHERE d.Name = 'Manufacturing' AND YEAR(edh.StartDate) < 2007 AND YEAR(edh.EndDate) > 2007 AND p.PersonType = 'SC';
SELECT DISTINCT e.BusinessEntityID, c.CardNumber FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID JOIN PersonCreditCard pcc ON e.BusinessEntityID = pcc.BusinessEntityID JOIN CreditCard c ON pcc.CreditCardID = c.CreditCardID WHERE d.Name = 'Finance' AND edh.EndDate IS NOT NULL;
SELECT COUNT(*) FROM Employee JOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID JOIN CreditCard ON Employee.BusinessEntityID = CreditCard.CreditCardID JOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID WHERE Department.Name = 'Engineering' AND YEAR(EmployeeDepartmentHistory.StartDate) = 2007 AND CreditCard.ExpYear = 2007;
SELECT TOP 1 E.EmailAddress FROM (     SELECT BE.BusinessEntityID, COUNT(EDH.DepartmentID) AS DepartmentChanges     FROM BusinessEntity AS BE     JOIN EmployeeDepartmentHistory AS EDH ON BE.BusinessEntityID = EDH.BusinessEntityID     GROUP BY BE.BusinessEntityID     ORDER BY DepartmentChanges DESC ) AS DM JOIN Employee AS E ON DM.BusinessEntityID = E.BusinessEntityID WHERE DM.DepartmentChanges = (     SELECT MAX(DM2.DepartmentChanges)     FROM (         SELECT BE.BusinessEntityID, COUNT(EDH.DepartmentID) AS DepartmentChanges         FROM BusinessEntity AS BE         JOIN EmployeeDepartmentHistory AS EDH ON BE.BusinessEntityID = EDH.BusinessEntityID         GROUP BY BE.BusinessEntityID     ) AS DM2 )
SELECT COUNT(*) FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID WHERE e.EmailPromotion = 0 AND d.Name = 'Engineering';
SELECT COUNT(*) FROM EmployeeDepartmentHistory JOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID WHERE Department.GroupName = 'Quality Assurance Group' AND YEAR(EmployeeDepartmentHistory.StartDate) = 2007;
SELECT p.Name FROM Product p JOIN SpecialOfferProduct sop ON p.ProductID = sop.ProductID JOIN SpecialOffer so ON sop.SpecialOfferID = so.SpecialOfferID WHERE so.Description = 'LL Road Frame Sale';
SELECT COUNT(*) FROM SalesOrderDetail sod JOIN SalesOrderHeader soh ON sod.SalesOrderID = soh.SalesOrderID JOIN SpecialOfferProduct sop ON sod.SpecialOfferID = sop.SpecialOfferID AND sop.ProductID = sod.ProductID JOIN SpecialOffer so ON sop.SpecialOfferID = so.SpecialOfferID WHERE so.Description = 'LL Road Frame Sale';
SELECT COUNT(*) FROM SalesOrderDetail sod JOIN Product p ON sod.ProductID = p.ProductID WHERE p.Name = 'Chainring Bolts' AND sod.OrderQty > 0;
SELECT COUNT(*) FROM Product p JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID JOIN ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID JOIN SpecialOfferProduct sop ON p.ProductID = sop.ProductID JOIN SpecialOffer so ON sop.SpecialOfferID = so.SpecialOfferID WHERE pc.Name = 'Clothing' AND so.Description = 'LL Road Frame Sale';
SELECT p.Name, p.ProductNumber FROM Product p JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID WHERE ps.Name = 'Clothing' AND p.MakeFlag = 1 AND p.FinishedGoodsFlag = 1;
SELECT AVG(DATEDIFF(year, T1.StartDate, T1.EndDate)) AS AverageStay FROM EmployeeDepartmentHistory T1 JOIN Department T2 ON T1.DepartmentID = T2.DepartmentID WHERE T2.Name = 'Engineering' AND T1.EndDate IS NOT NULL;
SELECT AVG(EmployeePayHistory.Rate) FROM EmployeePayHistory JOIN EmployeeDepartmentHistory ON EmployeePayHistory.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID JOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID WHERE Department.Name = 'Engineering' AND YEAR(EmployeeDepartmentHistory.StartDate) <= 2007 AND YEAR(EmployeeDepartmentHistory.EndDate) >= 2007;
SELECT     ((MAX(p.ListPrice) - MIN(p.ListPrice)) / MIN(p.ListPrice)) * 100 AS PercentageDifference FROM     Product p JOIN     ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID JOIN     ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID WHERE     pc.Name = 'Clothing'
SELECT AVG(p.ListPrice - p.StandardCost) AS AverageProfit FROM Product p JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID JOIN ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID WHERE pc.Name = 'Clothing';
SELECT TOP 1 ProductID, MIN(StandardCost) AS MinCost FROM ProductCostHistory WHERE YEAR(StartDate) = 2013 GROUP BY ProductID ORDER BY MinCost ASC;
SELECT * FROM Product WHERE Color = 'Yellow';
SELECT BusinessEntityID FROM Person WHERE FirstName = 'Hung-Fu' AND LastName = 'Ting';
SELECT PhoneNumber FROM Person p JOIN EmailAddress ea ON p.BusinessEntityID = ea.BusinessEntityID JOIN PhoneNumberType pct ON ea.EmailAddressID = pct.PhoneNumberTypeID WHERE p.BusinessEntityID = 12597;
SELECT ListPrice FROM Product WHERE ProductID = 912;
SELECT * FROM WorkOrderRouting WHERE ActualCost <> PlannedCost;
SELECT p.ThumbnailPhotoFileName FROM ProductPhoto p WHERE p.ProductID = 979;
SELECT Name FROM Product WHERE ListPrice > 1000;
SELECT TOP 1 p.ProductID, p.Name, (pd.ListPrice - pc.StandardCost) as Profit FROM Product p JOIN ProductListPriceHistory pd ON p.ProductID = pd.ProductID JOIN ProductCostHistory pc ON p.ProductID = pc.ProductID ORDER BY Profit DESC;
SELECT p.Name FROM Product p JOIN ProductInventory pi ON p.ProductID = pi.ProductID WHERE pi.LocationID = 1 AND pi.Shelf = 'L' AND pi.Bin = 6;
SELECT DISTINCT L.Name FROM Location L JOIN WorkOrderRouting WOR ON L.LocationID = WOR.LocationID WHERE WOR.WorkOrderID = 35493;
SELECT ProductID, LargePhotoFileName FROM ProductPhoto WHERE LargePhoto IS NOT NULL;
SELECT p.Name FROM Product p JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID WHERE ps.Name = 'Socks';
WITH CableLocks AS (     SELECT         ProductID,         Name,         ListPrice,         COUNT(*) OVER () * (100 / ListPrice) AS NumCableLocksBuyable     FROM         works_cycles.Product     WHERE         Name = 'Cable Lock' ) SELECT     NumCableLocksBuyable FROM     CableLocks;
SELECT T1.Name FROM ScrapReason AS T1 INNER JOIN WorkOrder AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T2.WorkOrderID = 57788;
SELECT StandardCost FROM Product WHERE Name LIKE '%sport%';
SELECT Quantity FROM ProductInventory WHERE ProductID = 476 AND LocationID = (SELECT LocationID FROM Location WHERE Name = 'Metal Storage');
SELECT * FROM Product WHERE StandardCost < (SELECT AVG(StandardCost) FROM Product);
SELECT ((p.ListPrice - p.StandardCost) / p.StandardCost) * 100 AS PercentageOfProfit FROM Product p WHERE p.ProductID = 858;
SELECT COUNT(*) FROM ProductPhoto WHERE ThumbNailPhoto IS NOT NULL;
SELECT DATEDIFF(day, ActualStartDate, ActualEndDate) AS DaysToEndWorkOrder FROM WorkOrder WHERE WorkOrderID = 425;
SELECT TOP 1 p.Name, p.ListPrice FROM Product AS p WHERE YEAR(p.SellStartDate) <= 2012 AND (p.SellEndDate IS NULL OR YEAR(p.SellEndDate) > 2012) ORDER BY p.ListPrice DESC;
SELECT StandardCost FROM Product WHERE ProductID = 847;
SELECT OrganizationLevel FROM Employee WHERE JobTitle = 'Human Resources Manager';
SELECT COUNT(*) FROM WorkOrder WHERE EndDate > DueDate;
SELECT StandardCost, ProductNumber FROM Product WHERE ProductID = 888;
SELECT COUNT(*) FROM ProductPhoto WHERE ThumbnailPhotoFileName = 'roadster_black_small.gif';
SELECT LocationID, Shelf, Bin FROM ProductInventory WHERE ProductID = (     SELECT ProductID     FROM Product     WHERE Name = 'Lock Ring' )
SELECT pc.Name AS ProductCategory FROM ProductSubcategory psc JOIN ProductCategory pc ON psc.ProductCategoryID = pc.ProductCategoryID WHERE psc.Name = 'Road Frames'
SELECT wo.WorkOrderID, wo.ProductID, wo.OrderQty, wo.StockedQty, wo.ScrappedQty, wo.StartDate, wo.EndDate, wo.DueDate, sr.Name AS ScrapReason FROM WorkOrder wo JOIN ScrapReason sr ON wo.ScrapReasonID = sr.ScrapReasonID WHERE sr.Name = 'Handling Damage'
SELECT (p.ListPrice - p.StandardCost) AS Profit FROM Product p WHERE p.ProductID = 792;
SELECT p.FirstName, p.LastName FROM Person p JOIN EmailAddress ea ON p.BusinessEntityID = ea.BusinessEntityID WHERE ea.EmailAddress = 'regina7@adventure-works.com';
SELECT DISTINCT LocationID FROM ProductInventory WHERE ProductID = 810;
SELECT P.Name FROM Product P JOIN WorkOrder WO ON P.ProductID = WO.ProductID WHERE WO.WorkOrderID = 2540;
SELECT ListPrice FROM Product WHERE Name = 'AWC Logo Cap'
SELECT wo.WorkOrderID, wo.ProductID, wo.OrderQty, wo.StockedQty, wo.ScrappedQty, wo.StartDate, wo.EndDate, wo.DueDate FROM WorkOrder AS wo JOIN Product AS p ON wo.ProductID = p.ProductID WHERE p.Name = 'Down Tube';
SELECT AVG((p.ListPrice - p.StandardCost) / p.StandardCost) AS AverageProfitPercentage FROM Product p WHERE p.ListPrice > p.StandardCost;
SELECT     COUNT(CASE WHEN Name = 'Subassembly' THEN WorkOrderID END) / COUNT(WorkOrderID) AS ProportionSubassembly FROM     WorkOrderRouting JOIN     ProductSubcategory ON WorkOrderRouting.ProductID = ProductSubcategory.ProductID WHERE     ProductSubcategory.Name = 'Subassembly';
SELECT COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ WHERE IMG_ID = 1;
SELECT COUNT(DISTINCT IMG_ID) FROM (     SELECT IMG_ID, COUNT(OBJ_SAMPLE_ID) as obj_count     FROM IMG_OBJ     GROUP BY IMG_ID     HAVING obj_count > 20 ) as img_with_more_than_20_objs;
SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID ORDER BY COUNT(OBJ_SAMPLE_ID) DESC LIMIT 1;
SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 1 AND OBJ_CLASS_ID = 297;
SELECT COUNT(*) FROM IMG_REL WHERE IMG_ID = 5 AND OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID;
SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 5 AND OBJ_SAMPLE_ID IN (     SELECT OBJ1_SAMPLE_ID     FROM IMG_REL     WHERE IMG_ID = 5 AND OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID );
SELECT COUNT(*) FROM IMG_OBJ IO, OBJ_CLASSES OC WHERE IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID AND IO.IMG_ID = 1 AND OC.OBJ_CLASS = 'man';
SELECT COUNT(DISTINCT IMG_ID) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'man' GROUP BY IMG_ID HAVING COUNT(*) >= 1;
SELECT OBJ_CLASSES.OBJ_CLASS FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 1;
SELECT P.PRED_CLASS FROM IMG_REL I JOIN PRED_CLASSES P ON I.PRED_CLASS_ID = P.PRED_CLASS_ID WHERE I.IMG_ID = 1 AND I.OBJ1_SAMPLE_ID = 8 AND I.OBJ2_SAMPLE_ID = 4;
SELECT COUNT(*) FROM IMG_REL JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID WHERE IMG_REL.IMG_ID = 1 AND PRED_CLASSES.PRED_CLASS = 'parked on';
SELECT P.PRED_CLASS FROM IMG_REL I JOIN PRED_CLASSES P ON I.PRED_CLASS_ID = P.PRED_CLASS_ID WHERE I.IMG_ID = 1 AND (I.OBJ1_SAMPLE_ID = 14 OR I.OBJ2_SAMPLE_ID = 14);
SELECT COUNT(DISTINCT IMG_ID) FROM IMG_REL JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID WHERE PRED_CLASS = 'parked on' AND OBJ1_SAMPLE_ID != OBJ2_SAMPLE_ID;
SELECT IMG_ID FROM IMG_REL WHERE PRED_CLASS_ID = (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'parked on') GROUP BY IMG_ID HAVING COUNT(*) > 2 AND COUNT(DISTINCT OBJ1_SAMPLE_ID) > 1 AND COUNT(DISTINCT OBJ2_SAMPLE_ID) > 1;
SELECT P.PRED_CLASS FROM IMG_REL I JOIN PRED_CLASSES P ON I.PRED_CLASS_ID = P.PRED_CLASS_ID WHERE I.IMG_ID = 5 AND I.OBJ1_SAMPLE_ID = I.OBJ2_SAMPLE_ID;
SELECT IO.X, IO.Y, IO.W, IO.H FROM IMG_OBJ IO JOIN IMG_REL IR ON IO.IMG_ID = IR.IMG_ID AND IO.OBJ_SAMPLE_ID = IR.OBJ1_SAMPLE_ID JOIN PRED_CLASSES PC ON IR.PRED_CLASS_ID = PC.PRED_CLASS_ID WHERE IO.IMG_ID = 1 AND PC.PRED_CLASS = 'by';
SELECT AVG(ABS(ImgObj1.Y - ImgObj2.Y)) FROM IMG_REL JOIN IMG_OBJ AS ImgObj1 ON IMG_REL.OBJ1_SAMPLE_ID = ImgObj1.OBJ_SAMPLE_ID JOIN IMG_OBJ AS ImgObj2 ON IMG_REL.OBJ2_SAMPLE_ID = ImgObj2.OBJ_SAMPLE_ID JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID WHERE IMG_REL.IMG_ID = 1 AND PRED_CLASSES.PRED_CLASS = 'parked on';
SELECT     (COUNT(CASE WHEN OBJ_CLASS = 'man' THEN OBJ_SAMPLE_ID END) * 100.0 / COUNT(OBJ_SAMPLE_ID)) AS percentage FROM     IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE     IMG_ID = 1;
SELECT COUNT(*) FROM ATT_CLASSES;
SELECT COUNT(*) FROM OBJ_CLASSES;
SELECT COUNT(*) FROM PRED_CLASSES;
SELECT X, Y, W, H FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_ID = 2324765 AND OBJ_CLASS = 'kite';
SELECT COUNT(*) FROM IMG_OBJ io JOIN IMG_OBJ_ATT ioa ON io.IMG_ID = ioa.IMG_ID AND io.OBJ_SAMPLE_ID = ioa.OBJ_SAMPLE_ID JOIN ATT_CLASSES ac ON ioa.ATT_CLASS_ID = ac.ATT_CLASS_ID WHERE io.IMG_ID = 2347915 AND ac.ATT_CLASS = 'white';
SELECT COUNT(*) FROM IMG_OBJ io JOIN IMG_OBJ_ATT ioa ON io.IMG_ID = ioa.IMG_ID AND io.OBJ_SAMPLE_ID = ioa.OBJ_SAMPLE_ID JOIN ATT_CLASSES ac ON ioa.ATT_CLASS_ID = ac.ATT_CLASS_ID WHERE io.IMG_ID = 2377985 AND ac.ATT_CLASS = 'electrical';
SELECT P.PRED_CLASS FROM PRED_CLASSES P JOIN IMG_REL R ON P.PRED_CLASS_ID = R.PRED_CLASS_ID WHERE R.IMG_ID = 2345511 AND R.OBJ1_SAMPLE_ID = 12 AND R.OBJ2_SAMPLE_ID = 8;
SELECT T1.OBJ1_SAMPLE_ID FROM IMG_REL AS T1 JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 2345524 AND T1.OBJ2_SAMPLE_ID = 1 AND T2.PRED_CLASS = 'lying on';
SELECT COUNT(*) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 6 AND OBJ_CLASSES.OBJ_CLASS = 'food';
SELECT COUNT(DISTINCT IMG_ID) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'suit';
SELECT P.PRED_CLASS FROM PRED_CLASSES P JOIN IMG_REL R ON P.PRED_CLASS_ID = R.PRED_CLASS_ID JOIN IMG_OBJ O1 ON R.OBJ1_SAMPLE_ID = O1.OBJ_SAMPLE_ID JOIN OBJ_CLASSES OC1 ON O1.OBJ_CLASS_ID = OC1.OBJ_CLASS_ID JOIN IMG_OBJ O2 ON R.OBJ2_SAMPLE_ID = O2.OBJ_SAMPLE_ID JOIN OBJ_CLASSES OC2 ON O2.OBJ_CLASS_ID = OC2.OBJ_CLASS_ID WHERE OC1.OBJ_CLASS = 'feathers' AND OC2.OBJ_CLASS = 'onion' AND O1.IMG_ID = 2345528;
SELECT att.ATT_CLASS FROM ATT_CLASSES att JOIN IMG_OBJ_ATT ioa ON att.ATT_CLASS_ID = ioa.ATT_CLASS_ID JOIN IMG_OBJ io ON ioa.IMG_ID = io.IMG_ID AND ioa.OBJ_SAMPLE_ID = io.OBJ_SAMPLE_ID JOIN OBJ_CLASSES obj ON io.OBJ_CLASS_ID = obj.OBJ_CLASS_ID WHERE io.IMG_ID = 2377988 AND obj.OBJ_CLASS = 'weeds'
SELECT obj.OBJ_CLASS FROM IMG_OBJ_ATT ioa JOIN ATT_CLASSES att ON ioa.ATT_CLASS_ID = att.ATT_CLASS_ID JOIN IMG_OBJ io ON ioa.IMG_ID = io.IMG_ID AND ioa.OBJ_SAMPLE_ID = io.OBJ_SAMPLE_ID JOIN OBJ_CLASSES obj ON io.OBJ_CLASS_ID = obj.OBJ_CLASS_ID WHERE att.ATT_CLASS = 'blurry' AND ioa.IMG_ID = 2377993;
SELECT COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 2353079 AND OBJ_CLASSES.OBJ_CLASS = 'wall';
SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 2320341 AND T1.OBJ_SAMPLE_ID = 10;
Error: 第 7507 个样本有 2 个SQL。
SELECT COUNT(DISTINCT IMG_ID) FROM (     SELECT IMG_ID, COUNT(ATT_CLASS_ID) as attribute_count     FROM IMG_OBJ_ATT     GROUP BY IMG_ID     HAVING attribute_count >= 25 ) AS subquery;
SELECT DISTINCT IMG_ID FROM IMG_REL WHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID;
SELECT COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ_ATT JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID WHERE ATT_CLASSES.ATT_CLASS_ID = (     SELECT ATT_CLASS_ID     FROM (         SELECT ATT_CLASS_ID, COUNT(*) as cnt         FROM IMG_OBJ_ATT         GROUP BY ATT_CLASS_ID         ORDER BY cnt DESC         LIMIT 1     ) subquery );
SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS IN ('bus', 'train', 'aeroplane', 'car');
SELECT OBJ_CLASSES.OBJ_CLASS FROM OBJ_CLASSES JOIN IMG_OBJ ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID JOIN IMG_OBJ_ATT ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID JOIN ATT_CLASSES ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID WHERE ATT_CLASSES.ATT_CLASS = 'very large' AND OBJ_CLASSES.OBJ_CLASS = 'bike';
SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion';
SELECT ATT_CLASSES.ATT_CLASS FROM ATT_CLASSES JOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID WHERE IMG_OBJ_ATT.IMG_ID = 8;
SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 4 AND OBJ_SAMPLE_ID IN (     SELECT OBJ1_SAMPLE_ID     FROM IMG_REL     WHERE IMG_ID = 4 AND PRED_CLASS_ID = 144 ) OR OBJ_SAMPLE_ID IN (     SELECT OBJ2_SAMPLE_ID     FROM IMG_REL     WHERE IMG_ID = 4 AND PRED_CLASS_ID = 144 );
SELECT COUNT(DISTINCT i.IMG_ID) FROM IMG_OBJ_ATT i JOIN ATT_CLASSES a ON i.ATT_CLASS_ID = a.ATT_CLASS_ID WHERE a.ATT_CLASS = 'black' GROUP BY i.IMG_ID HAVING COUNT(*) >= 5;
SELECT T3.PRED_CLASS_ID FROM IMG_OBJ AS T1 JOIN IMG_REL AS T3 ON T1.OBJ_SAMPLE_ID = T3.OBJ1_SAMPLE_ID JOIN PRED_CLASSES AS T4 ON T3.PRED_CLASS_ID = T4.PRED_CLASS_ID WHERE T1.H = (SELECT MAX(H) FROM IMG_OBJ)
SELECT IO.IMG_ID FROM IMG_OBJ_ATT IOA JOIN ATT_CLASSES AC ON IOA.ATT_CLASS_ID = AC.ATT_CLASS_ID JOIN IMG_OBJ IO ON IOA.IMG_ID = IO.IMG_ID AND IOA.OBJ_SAMPLE_ID = IO.OBJ_SAMPLE_ID WHERE AC.ATT_CLASS = 'white' GROUP BY IO.IMG_ID ORDER BY COUNT(IOA.ATT_CLASS_ID) DESC LIMIT 1;
SELECT IO.X, IO.Y FROM IMG_REL AS IR JOIN IMG_OBJ AS IO ON IR.OBJ1_SAMPLE_ID = IO.OBJ_SAMPLE_ID WHERE IR.PRED_CLASS_ID = 98;
SELECT COUNT(*) FROM IMG_REL JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID WHERE IMG_REL.IMG_ID = 3050 AND PRED_CLASSES.PRED_CLASS = 'has';
SELECT DISTINCT o.OBJ_CLASS FROM OBJ_CLASSES o JOIN IMG_OBJ i ON o.OBJ_CLASS_ID = i.OBJ_CLASS_ID WHERE i.X = 0 AND i.Y = 0;
SELECT P.PRED_CLASS FROM PRED_CLASSES P WHERE EXISTS (     SELECT 1     FROM IMG_REL R     WHERE R.PRED_CLASS_ID = P.PRED_CLASS_ID     AND R.OBJ1_SAMPLE_ID = R.OBJ2_SAMPLE_ID );
SELECT IO.X, IO.Y, IO.W, IO.H FROM IMG_OBJ IO JOIN OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID WHERE IO.IMG_ID = 2222 AND OC.OBJ_CLASS = 'feathers';
SELECT COUNT(DISTINCT T1.IMG_ID) FROM IMG_REL T1 JOIN PRED_CLASSES T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.OBJ1_SAMPLE_ID != T1.OBJ2_SAMPLE_ID AND T2.PRED_CLASS = 'on';
SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 0 AND T1.Y = 0 AND T1.W = 135 AND T1.H = 212
SELECT W, H FROM IMG_OBJ WHERE OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'keyboard') AND IMG_ID = 3;
SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 6 AND OBJ_CLASS_ID = (     SELECT OBJ_CLASS_ID     FROM OBJ_CLASSES     WHERE OBJ_CLASS = 'folk' );
SELECT X, Y, W, H FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'onion' AND IMG_OBJ.IMG_ID = 285930;
SELECT COUNT(OBJ_CLASS_ID), OBJ_CLASS FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_ID = 72 AND X = 341 AND Y = 27 AND W = 42 AND H = 51;
SELECT att.ATT_CLASS FROM (   SELECT IMG_OBJ_ATT.ATT_CLASS_ID, COUNT(*) AS cnt   FROM IMG_OBJ_ATT   JOIN IMG_OBJ AS obj1 ON IMG_OBJ_ATT.IMG_ID = obj1.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = obj1.OBJ_SAMPLE_ID   WHERE IMG_OBJ_ATT.IMG_ID = 5   GROUP BY IMG_OBJ_ATT.ATT_CLASS_ID   HAVING COUNT(*) >= 2 ) AS att_cnt JOIN ATT_CLASSES AS att ON att_cnt.ATT_CLASS_ID = att.ATT_CLASS_ID;
SELECT ATT_CLASSES.ATT_CLASS FROM ATT_CLASSES JOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID JOIN IMG_OBJ ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 27 AND OBJ_CLASSES.OBJ_CLASS = 'wall'
SELECT o.OBJ_CLASS FROM OBJ_CLASSES o JOIN IMG_OBJ i ON o.OBJ_CLASS_ID = i.OBJ_CLASS_ID JOIN IMG_OBJ_ATT ioa ON i.IMG_ID = ioa.IMG_ID AND i.OBJ_SAMPLE_ID = ioa.OBJ_SAMPLE_ID JOIN ATT_CLASSES a ON ioa.ATT_CLASS_ID = a.ATT_CLASS_ID WHERE a.ATT_CLASS = 'scattered' AND i.IMG_ID = 10;
SELECT COUNT(DISTINCT T1.IMG_ID) FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'bridge';
SELECT COUNT(OBJ_CLASS_ID) / COUNT(DISTINCT IMG_ID) AS Average_Objects_Per_Image FROM IMG_OBJ;
SELECT ATT_CLASSES.ATT_CLASS FROM ATT_CLASSES JOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID JOIN IMG_OBJ ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'van' AND IMG_OBJ.IMG_ID = 1;
SELECT     o.OBJ_CLASS AS object,     a.ATT_CLASS AS attribute,     p.PRED_CLASS AS relationship FROM     IMG_OBJ i LEFT JOIN     OBJ_CLASSES o ON i.OBJ_CLASS_ID = o.OBJ_CLASS_ID LEFT JOIN     IMG_OBJ_ATT ia ON i.IMG_ID = ia.IMG_ID AND i.OBJ_SAMPLE_ID = ia.OBJ_SAMPLE_ID LEFT JOIN     ATT_CLASSES a ON ia.ATT_CLASS_ID = a.ATT_CLASS_ID LEFT JOIN     IMG_REL r ON i.IMG_ID = r.IMG_ID AND i.OBJ_SAMPLE_ID = r.OBJ1_SAMPLE_ID LEFT JOIN     PRED_CLASSES p ON r.PRED_CLASS_ID = p.PRED_CLASS_ID WHERE     i.IMG_ID = 1 AND i.X = 388 AND i.Y = 369 AND i.W = 48 AND i.H = 128
SELECT P.PRED_CLASS FROM PRED_CLASSES P JOIN IMG_REL R ON P.PRED_CLASS_ID = R.PRED_CLASS_ID WHERE R.IMG_ID = 1 AND R.OBJ1_SAMPLE_ID = 25 AND R.OBJ2_SAMPLE_ID = 2;
SELECT COUNT(*) FROM IMG_OBJ_ATT WHERE IMG_ID = 4 AND OBJ_SAMPLE_ID = 7;
SELECT COUNT(OBJ_CLASS_ID) FROM IMG_OBJ WHERE IMG_ID = 31;
SELECT ATT_CLASS_ID, COUNT(ATT_CLASS_ID) AS count FROM IMG_OBJ_ATT WHERE IMG_ID = 20 GROUP BY ATT_CLASS_ID ORDER BY count DESC LIMIT 1;
SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 42 AND OBJ_SAMPLE_ID = 7;
SELECT     (COUNT(CASE WHEN ATT_CLASSES.ATT_CLASS = 'white' THEN IMG_OBJ.OBJ_SAMPLE_ID END) * 100.0 / COUNT(IMG_OBJ.OBJ_SAMPLE_ID)) AS percentage FROM     IMG_OBJ JOIN     IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID AND IMG_OBJ.OBJ_SAMPLE_ID = IMG_OBJ_ATT.OBJ_SAMPLE_ID JOIN     ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID WHERE     IMG_OBJ.IMG_ID = 99;
SELECT COUNT(*) FROM IMG_OBJ_ATT JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID WHERE IMG_OBJ_ATT.IMG_ID = 5;
SELECT OBJ_CLASS FROM OBJ_CLASSES WHERE OBJ_CLASS_ID = 10;
SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 422 AND T1.Y = 63 AND T1.W = 77 AND T1.H = 363;
SELECT PRED_CLASS FROM PRED_CLASSES WHERE PRED_CLASS_ID = 12;
SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 8;
SELECT COUNT(*) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 908 AND OBJ_CLASSES.OBJ_CLASS = 'tip';
SELECT COUNT(*) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 41 AND OBJ_CLASSES.OBJ_CLASS = 'kitchen';
SELECT COUNT(DISTINCT IMG_ID) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'paint';
SELECT COUNT(*) FROM IMG_OBJ WHERE IMG_ID = 2315533 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'cloud');
SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion';
SELECT X, Y, W, H FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 1344 AND OBJ_CLASSES.OBJ_CLASS = 'spoon';
SELECT CAST(SUM(CASE WHEN OBJ_CLASSES.OBJ_CLASS = 'surface' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(OBJ_CLASSES.OBJ_CLASS_ID) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 2654;
SELECT COUNT(DISTINCT IMG_OBJ.IMG_ID) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'wood';
SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.H = (SELECT MAX(H) FROM IMG_OBJ)
SELECT     (SUM(CASE WHEN OBJ_CLASS = 'airplane' THEN 1 ELSE 0 END) * 100.0 / COUNT(OBJ_CLASS_ID)) AS percentage FROM     IMG_OBJ IO JOIN     OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID;
SELECT COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'animal' AND IMG_OBJ.IMG_ID = 660;
SELECT COUNT(*) FROM IMG_OBJ WHERE IMG_ID = 1098 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'bed');
SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.H = (SELECT MIN(H) FROM IMG_OBJ)
SELECT X, Y, W, H FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'kitchen' AND IMG_OBJ.IMG_ID = 250;
SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID HAVING COUNT(OBJ_SAMPLE_ID) > 20;
SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 8 ORDER BY W DESC LIMIT 1;
SELECT OBJ_CLASS FROM IMG_OBJ IO JOIN OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID WHERE IO.IMG_ID = 5 AND IO.X = 634 AND IO.Y = 468;
SELECT IO.OBJ_SAMPLE_ID, OC.OBJ_CLASS FROM IMG_OBJ IO JOIN OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID JOIN IMG_OBJ_ATT IOA ON IO.IMG_ID = IOA.IMG_ID AND IO.OBJ_SAMPLE_ID = IOA.OBJ_SAMPLE_ID GROUP BY IO.OBJ_SAMPLE_ID, OC.OBJ_CLASS ORDER BY COUNT(IOA.OBJ_SAMPLE_ID) DESC LIMIT 1;
SELECT CAST(COUNT(CASE WHEN IMG_ID = 1 THEN OBJ_SAMPLE_ID ELSE NULL END) AS REAL) / COUNT(CASE WHEN IMG_ID = 6 THEN OBJ_SAMPLE_ID ELSE NULL END) AS Ratio FROM IMG_OBJ;
SELECT AVG(OBJ_SAMPLE_COUNT) FROM (     SELECT IMG_ID, COUNT(OBJ_SAMPLE_ID) AS OBJ_SAMPLE_COUNT     FROM IMG_OBJ     GROUP BY IMG_ID ) AS OBJ_PER_IMG;
SELECT DISTINCT IO.IMG_ID FROM IMG_OBJ_ATT IOA JOIN ATT_CLASSES AC ON IOA.ATT_CLASS_ID = AC.ATT_CLASS_ID JOIN IMG_OBJ IO ON IOA.IMG_ID = IO.IMG_ID AND IOA.OBJ_SAMPLE_ID = IO.OBJ_SAMPLE_ID WHERE AC.ATT_CLASS = 'wired';
SELECT OBJ_CLASSES.OBJ_CLASS FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 10;
SELECT att.ATT_CLASS FROM ATT_CLASSES att JOIN IMG_OBJ_ATT ioa ON att.ATT_CLASS_ID = ioa.ATT_CLASS_ID JOIN IMG_OBJ io ON ioa.IMG_ID = io.IMG_ID AND ioa.OBJ_SAMPLE_ID = io.OBJ_SAMPLE_ID JOIN OBJ_CLASSES obj ON io.OBJ_CLASS_ID = obj.OBJ_CLASS_ID WHERE io.IMG_ID = 1314 AND obj.OBJ_CLASS = 'tip';
SELECT P.PRED_CLASS FROM PRED_CLASSES P JOIN IMG_REL R ON R.PRED_CLASS_ID = P.PRED_CLASS_ID JOIN IMG_OBJ O1 ON R.OBJ1_SAMPLE_ID = O1.OBJ_SAMPLE_ID AND O1.IMG_ID = 2360078 AND O1.OBJ_CLASS_ID = (     SELECT OC.OBJ_CLASS_ID FROM OBJ_CLASSES OC WHERE OC.OBJ_CLASS = 'chain' ) JOIN IMG_OBJ O2 ON R.OBJ2_SAMPLE_ID = O2.OBJ_SAMPLE_ID AND O2.IMG_ID = 2360078 AND O2.OBJ_CLASS_ID = (     SELECT OC.OBJ_CLASS_ID FROM OBJ_CLASSES OC WHERE OC.OBJ_CLASS = 'label' );
SELECT COUNT(DISTINCT T3.IMG_ID) FROM ATT_CLASSES AS T1 JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID AND T2.OBJ_SAMPLE_ID = T3.OBJ_SAMPLE_ID WHERE T1.ATT_CLASS = 'polka dot';
SELECT att.ATT_CLASS FROM ATT_CLASSES att JOIN IMG_OBJ_ATT ioa ON att.ATT_CLASS_ID = ioa.ATT_CLASS_ID JOIN IMG_OBJ io ON ioa.IMG_ID = io.IMG_ID AND ioa.OBJ_SAMPLE_ID = io.OBJ_SAMPLE_ID WHERE io.IMG_ID = 400 AND io.W = (     SELECT MAX(W)     FROM IMG_OBJ     WHERE IMG_ID = 400 )
SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID GROUP BY T1.OBJ_CLASS_ID ORDER BY COUNT(T1.IMG_ID) DESC LIMIT 1;
SELECT W, H FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 1 AND OBJ_CLASSES.OBJ_CLASS = 'van';
SELECT IO.X, IO.Y FROM IMG_OBJ IO JOIN IMG_OBJ_ATT IOA ON IO.IMG_ID = IOA.IMG_ID AND IO.OBJ_SAMPLE_ID = IOA.OBJ_SAMPLE_ID JOIN ATT_CLASSES AC ON IOA.ATT_CLASS_ID = AC.ATT_CLASS_ID WHERE IO.IMG_ID = 1 AND AC.ATT_CLASS = 'sparse';
SELECT     (COUNT(CASE WHEN OBJ_CLASSES.OBJ_CLASS = 'street lights' THEN IMG_OBJ.OBJ_SAMPLE_ID ELSE NULL END) * 100.0 / COUNT(IMG_OBJ.OBJ_SAMPLE_ID)) AS percentage FROM     IMG_OBJ JOIN     OBJ_CLASSES ON     IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID;
SELECT     (COUNT(CASE WHEN OBJ_CLASSES.OBJ_CLASS = 'windows' THEN IMG_OBJ.OBJ_SAMPLE_ID END) / COUNT(IMG_OBJ.OBJ_SAMPLE_ID)) * 100 as percentage FROM     IMG_OBJ JOIN     OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE     IMG_OBJ.IMG_ID = 5;
SELECT COUNT(DISTINCT IMG_ID) FROM IMG_OBJ WHERE X = 5 AND Y = 5;
SELECT COUNT(DISTINCT IMG_ID) FROM (     SELECT IMG_ID, COUNT(OBJ_SAMPLE_ID) as obj_count     FROM IMG_OBJ     GROUP BY IMG_ID     HAVING obj_count < 15 ) as subquery;
SELECT COUNT(DISTINCT IO.IMG_ID) FROM (     SELECT IO1.IMG_ID, COUNT(IOA.ATT_CLASS_ID) AS num_atts     FROM IMG_OBJ IO1     JOIN IMG_OBJ_ATT IOA ON IO1.IMG_ID = IOA.IMG_ID AND IO1.OBJ_SAMPLE_ID = IOA.OBJ_SAMPLE_ID     GROUP BY IO1.IMG_ID     HAVING COUNT(IOA.ATT_CLASS_ID) = 10 ) IO;
SELECT IMG_ID FROM (   SELECT IMG_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID, COUNT(DISTINCT PRED_CLASS_ID) as rel_count   FROM IMG_REL   GROUP BY IMG_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID ) subquery WHERE rel_count > 1
SELECT COUNT(DISTINCT i.IMG_ID) FROM IMG_OBJ i JOIN OBJ_CLASSES o ON i.OBJ_CLASS_ID = o.OBJ_CLASS_ID WHERE o.OBJ_CLASS IN ('vegetable', 'fruits') GROUP BY i.IMG_ID HAVING COUNT(DISTINCT o.OBJ_CLASS) = 2;
SELECT IMG_ID FROM IMG_REL WHERE PRED_CLASS_ID = (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'parked on');
SELECT DISTINCT oc.OBJ_CLASS FROM OBJ_CLASSES oc JOIN IMG_OBJ io ON oc.OBJ_CLASS_ID = io.OBJ_CLASS_ID WHERE io.X = 5 AND io.Y = 5;
SELECT COUNT(DISTINCT T3.IMG_ID) FROM OBJ_CLASSES AS T1 JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID JOIN (SELECT DISTINCT IMG_ID FROM IMG_OBJ) AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T1.OBJ_CLASS = 'keyboard';
SELECT W, H FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'keyboard' AND IMG_OBJ.X = 5 AND IMG_OBJ.Y = 647;
SELECT DISTINCT IO.IMG_ID FROM IMG_OBJ_ATT IOA JOIN ATT_CLASSES AC ON IOA.ATT_CLASS_ID = AC.ATT_CLASS_ID JOIN IMG_OBJ IO ON IOA.IMG_ID = IO.IMG_ID AND IOA.OBJ_SAMPLE_ID = IO.OBJ_SAMPLE_ID WHERE AC.ATT_CLASS = 'horse';
SELECT IO.X, IO.Y FROM IMG_OBJ IO JOIN IMG_OBJ_ATT IOA ON IO.IMG_ID = IOA.IMG_ID AND IO.OBJ_SAMPLE_ID = IOA.OBJ_SAMPLE_ID JOIN ATT_CLASSES AC ON IOA.ATT_CLASS_ID = AC.ATT_CLASS_ID JOIN OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID WHERE AC.ATT_CLASS = 'horse' AND OC.OBJ_CLASS = 'fur';
SELECT ATT_CLASSES.ATT_CLASS FROM ATT_CLASSES JOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID WHERE IMG_OBJ_ATT.IMG_ID = 15;
SELECT COUNT(DISTINCT T1.IMG_ID) FROM IMG_REL AS T1 JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.PRED_CLASS = 'reading' GROUP BY T1.OBJ1_SAMPLE_ID, T1.OBJ2_SAMPLE_ID HAVING COUNT(T1.PRED_CLASS_ID) > 1;
SELECT COUNT(DISTINCT T3.IMG_ID) FROM ATT_CLASSES AS T1 JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID AND T2.OBJ_SAMPLE_ID = T3.OBJ_SAMPLE_ID WHERE T1.ATT_CLASS = 'picture';
SELECT COUNT(DISTINCT i.IMG_ID) FROM IMG_OBJ i JOIN OBJ_CLASSES o ON i.OBJ_CLASS_ID = o.OBJ_CLASS_ID JOIN IMG_OBJ_ATT ia ON i.IMG_ID = ia.IMG_ID AND i.OBJ_SAMPLE_ID = ia.OBJ_SAMPLE_ID JOIN ATT_CLASSES a ON ia.ATT_CLASS_ID = a.ATT_CLASS_ID WHERE o.OBJ_CLASS = 'bear' AND a.ATT_CLASS = 'picture';
SELECT DISTINCT ATT_CLASSES.ATT_CLASS FROM ATT_CLASSES JOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID JOIN IMG_OBJ ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID WHERE IMG_OBJ.X = 5 AND IMG_OBJ.Y = 5;
SELECT AVG(T1.IMG_ID) FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'keyboard';
SELECT CAST(COUNT(case when OBJ_CLASSES.OBJ_CLASS = 'man' then IMG_OBJ.IMG_ID end) AS REAL) / COUNT(case when OBJ_CLASSES.OBJ_CLASS = 'person' then IMG_OBJ.IMG_ID end) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID GROUP BY IMG_OBJ.IMG_ID;
SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 17 AND X = 0 AND Y = 0;
SELECT W, H FROM IMG_OBJ WHERE OBJ_SAMPLE_ID = 2;
SELECT COUNT(*) FROM IMG_OBJ WHERE IMG_ID = 12 AND Y = 0;
SELECT ATT_CLASSES.ATT_CLASS FROM ATT_CLASSES JOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID WHERE IMG_OBJ_ATT.IMG_ID = 22;
SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 36 AND T1.X = 0 AND T1.Y = 0;
SELECT IO.X, IO.Y, IO.W, IO.H FROM IMG_OBJ IO JOIN OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID WHERE OC.OBJ_CLASS = 'pizza' LIMIT 10;
SELECT O.OBJ_CLASS FROM OBJ_CLASSES O JOIN IMG_OBJ IO ON O.OBJ_CLASS_ID = IO.OBJ_CLASS_ID WHERE IO.X = 126 AND IO.Y = 363;
SELECT OBJ_CLASSES.OBJ_CLASS FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 56 GROUP BY IMG_OBJ.OBJ_CLASS_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT OBJ_CLASSES.OBJ_CLASS, IMG_OBJ.W, IMG_OBJ.H FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 22;
SELECT P.PRED_CLASS FROM IMG_REL I JOIN PRED_CLASSES P ON I.PRED_CLASS_ID = P.PRED_CLASS_ID WHERE I.IMG_ID = 68;
SELECT COUNT(*) FROM IMG_REL JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID WHERE IMG_REL.IMG_ID = 107 AND PRED_CLASSES.PRED_CLASS = 'has';
SELECT PRED_CLASSES.PRED_CLASS FROM PRED_CLASSES JOIN IMG_REL ON PRED_CLASSES.PRED_CLASS_ID = IMG_REL.PRED_CLASS_ID WHERE IMG_REL.IMG_ID = 4434 GROUP BY PRED_CLASSES.PRED_CLASS ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(OBJ_CLASSES.OBJ_CLASS), IMG_OBJ.X, IMG_OBJ.Y FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'dress' AND IMG_OBJ.IMG_ID = 1764;
SELECT X, Y FROM IMG_OBJ JOIN IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID AND IMG_OBJ.OBJ_SAMPLE_ID = IMG_OBJ_ATT.OBJ_SAMPLE_ID JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID WHERE IMG_OBJ.IMG_ID = 23 AND ATT_CLASSES.ATT_CLASS = 'cast';
SELECT COUNT(*) FROM ATT_CLASSES JOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID WHERE ATT_CLASSES.ATT_CLASS = 'blue' AND IMG_OBJ_ATT.IMG_ID = 2355735;
SELECT AVG(W) AS Average_Width, AVG(H) AS Average_Height, OC.OBJ_CLASS FROM IMG_OBJ IO JOIN OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID WHERE IO.IMG_ID = 47 GROUP BY OC.OBJ_CLASS;
SELECT firstName, lastName FROM Master WHERE birthCountry != 'USA' AND birthYear = 1990;
SELECT nameGiven FROM Master WHERE shootCatch IS NULL AND pos = 'F';
SELECT firstName, lastName FROM Master WHERE hofID IS NULL;
SELECT nameGiven, birthYear, birthMon, birthDay FROM Master WHERE deathYear IS NULL ORDER BY birthYear DESC, birthMon DESC, birthDay DESC LIMIT 1;
SELECT firstName, lastName, (deathYear - birthYear) AS Age FROM Master WHERE deathYear IS NOT NULL AND shootCatch IS NULL;
SELECT T1.playerID FROM Goalies AS T1 JOIN Teams AS T2 ON T1.tmID = T2.tmID WHERE T1.year BETWEEN 2000 AND 2005 GROUP BY T1.playerID HAVING COUNT(DISTINCT(T2.tmID)) > 2
SELECT AVG(weight) FROM Master WHERE height > 72;
SELECT T1.nameGiven, T1.birthCountry FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID GROUP BY T1.playerID HAVING SUM(T2.Min) > 5000;
SELECT DISTINCT playerID FROM Goalies WHERE lgID = 'PCHA' INTERSECT SELECT DISTINCT playerID FROM Goalies WHERE lgID = 'NHL';
SELECT T1.lastName, T1.birthYear, T1.deathYear, T2.year, MAX(T2.Min) FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.deathYear IS NOT NULL GROUP BY T1.lastName ORDER BY MAX(T2.Min) DESC;
SELECT Master.nameGiven, Master.height, Master.weight, (YEAR(NOW()) - birthYear) AS Age FROM Master JOIN Goalies ON Master.playerID = Goalies.playerID WHERE Goalies.year BETWEEN 2000 AND 2010 AND Goalies.tmID = 'COL';
SELECT playerID, year FROM Goalies WHERE ENG >= 10;
SELECT playerID, year FROM Goalies WHERE (GA/SA)*100 = (SELECT MIN((GA/SA)*100) FROM Goalies);
SELECT DISTINCT T3.name AS TeamName, T1.firstName, T1.lastName FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID JOIN Teams AS T3 ON T2.tmID = T3.tmID AND T2.year = T3.year WHERE T2.year = 2005 AND T1.height < 72;
SELECT T1.nameNick, T3.tmID, T3.year FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID JOIN Teams AS T3 ON T2.tmID = T3.tmID WHERE T1.playerID = 'aubinje01';
SELECT T1.firstName, T1.lastName, MAX(T2.COUNT_seasons) AS most_seasons, SUM(T2.Min)/T2.COUNT_seasons AS avg_time_per_season FROM Master AS T1 JOIN (     SELECT playerID, COUNT(DISTINCT year) AS COUNT_seasons, SUM(Min) AS Total_Minutes     FROM Goalies     GROUP BY playerID ) AS T2 ON T1.playerID = T2.playerID GROUP BY T1.playerID ORDER BY COUNT_seasons DESC LIMIT 1;
SELECT playerID, year FROM Goalies WHERE CAST(SHO AS FLOAT) / GA * 100 = 5.00;
SELECT firstName, lastName, birthYear FROM Master WHERE deathYear IS NOT NULL AND birthCountry <> deathCountry ORDER BY birthYear;
SELECT nameGiven, firstNHL, firstWHA FROM Master WHERE firstNHL IS NOT NULL AND firstWHA IS NOT NULL;
SELECT T1.nameGiven, T1.pos FROM Master AS T1 JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.deathYear IS NULL GROUP BY T1.playerID HAVING COUNT(T1.pos) > 1;
SELECT nameNick, lastNHL FROM Master WHERE height = (SELECT MAX(height) FROM Master)
SELECT AVG(T1.height) AS avg_height_after_1990, (SELECT AVG(height) FROM Master WHERE birthYear < 1990) AS avg_height_before_1990 FROM Master AS T1 WHERE T1.birthYear >= 1990
SELECT DISTINCT g.playerID, g.tmID FROM Goalies g JOIN Master m ON g.playerID = m.playerID WHERE g.shootCatch = 'L' AND m.pos = 'G' AND m.coachID IS NOT NULL GROUP BY g.playerID, g.tmID;
SELECT DISTINCT g.playerID, g.tmID FROM Goalies g JOIN Master m ON g.playerID = m.playerID WHERE m.pos = 'G' AND m.deathYear IS NOT NULL AND m.birthCountry = 'Canada';
SELECT G.playerID, G.year FROM Goalies AS G JOIN Teams AS T ON G.tmID = T.tmID AND G.year = T.year WHERE T.name = 'Boston Bruins' AND T.rank = 1;
SELECT DISTINCT T2.name FROM Goalies AS T1 JOIN Teams AS T2 ON T1.tmID = T2.tmID JOIN Master AS T3 ON T1.playerID = T3.playerID WHERE T3.firstNHL < 1950 AND T3.deathYear IS NULL
SELECT T3.firstName, T3.lastName, T1.tmID, T1.year FROM Coaches AS T1 JOIN Master AS T2 ON T1.coachID = T2.coachID JOIN Master AS T3 ON T2.playerID = T3.playerID WHERE T2.playerID IS NOT NULL;
SELECT C.firstName, C.lastName, C.coachID, Coaches.tmID, MAX(Cast(Coaches.w As Float) / Cast(Coaches.g As Float) * 100) AS WinPercentage FROM Coaches JOIN Master AS C ON Coaches.coachID = C.coachID WHERE C.playerID IS NULL GROUP BY C.firstName, C.lastName, C.coachID, Coaches.tmID ORDER BY WinPercentage DESC LIMIT 1;
SELECT coachID, year, (w/g)*100 AS Win_Percentage FROM Coaches WHERE tmID = 'DET' ORDER BY (w/g)*100 DESC LIMIT 1;
SELECT mc.nameGiven, mc.birthDay, mc.birthMon, mc.birthYear, GROUP_CONCAT(DISTINCT c.tmID) AS TeamsCoached FROM Master AS mc JOIN Coaches AS c ON mc.coachID = c.coachID WHERE c.tmID IN (SELECT tmID FROM Teams WHERE name = 'MTL') GROUP BY mc.coachID ORDER BY COUNT(DISTINCT c.year) DESC LIMIT 1;
SELECT g.playerID, m.firstName, m.lastName, g.tmID FROM Goalies g JOIN Master m ON g.playerID = m.playerID WHERE g.L > g.W GROUP BY g.playerID, g.tmID HAVING COUNT(DISTINCT g.year) >= 2;
SELECT     playerID,     year,     stint,     tmID,     (CAST(W AS REAL) / GP) * 100 AS win_percentage FROM     Goalies WHERE     playerID IN (         SELECT             playerID         FROM             Master         WHERE             birthYear = 1987 AND shootCatch IS NULL     )
SELECT T1.firstName, T1.lastName, SUM(T2.Min) / SUM(T2.GP) AS avg_time FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = 'aebisda01' AND T2.pos = 'G';
SELECT Master.lastName, Master.firstName FROM Master JOIN Goalies ON Master.playerID = Goalies.playerID WHERE Master.deathYear IS NULL AND (CAST(SUM(Goalies.W) AS REAL) / SUM(Goalies.GP)) * 100 > 50 GROUP BY Master.playerID;
SELECT COUNT(*) AS total_awarded_posthumously FROM (     SELECT * FROM AwardsPlayers WHERE note = 'posthumous'     UNION ALL     SELECT * FROM AwardsCoaches WHERE note = 'posthumous' ) AS combined_awards;
SELECT COUNT(*) FROM AwardsPlayers JOIN Scoring ON AwardsPlayers.playerID = Scoring.playerID WHERE AwardsPlayers.year = 1983 AND Scoring.pos = 'G';
SELECT COUNT(*) FROM Coaches WHERE year = 2007 AND notes = 'interim';
SELECT COUNT(*) FROM CombinedShutouts WHERE year = 1977 AND R_P = 'R';
SELECT COUNT(*) FROM Goalies WHERE year = 2005 AND ENG IS NOT NULL;
SELECT DISTINCT year FROM Goalies WHERE lgID = 'NHL' AND SA IS NOT NULL;
SELECT COUNT(*) FROM TeamsPost WHERE PostW = PostL;
SELECT name FROM HOF WHERE year = 1978;
SELECT COUNT(*) FROM HOF WHERE category = 'Builder'
SELECT COUNT(*) FROM HOF WHERE year > 1980 AND category = 'Player';
SELECT T1.nameNick FROM Master AS T1 JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T2.year = 2007;
SELECT HOF.year FROM HOF JOIN Master ON HOF.hofID = Master.hofID WHERE Master.height = (SELECT MAX(height) FROM Master)
SELECT DISTINCT a.award FROM AwardsCoaches a JOIN Master m ON a.coachID = m.coachID WHERE m.birthCountry = 'Canada'
SELECT COUNT(*) FROM Coaches c JOIN Master m ON c.coachID = m.coachID WHERE c.w > 30 AND m.birthCountry = 'USA';
SELECT COUNT(*) FROM Coaches JOIN Master ON Coaches.coachID = Master.coachID WHERE Coaches.lgID = 'NHL' AND Master.birthCountry = 'Canada';
SELECT AwardsCoaches.award FROM AwardsCoaches JOIN Master ON AwardsCoaches.coachID = Master.coachID WHERE Master.birthYear = '1952';
SELECT COUNT(*) FROM AwardsCoaches ac JOIN Master m ON ac.coachID = m.coachID WHERE ac.year = 1940 AND m.birthCity = 'Toronto';
SELECT COUNT(*) FROM Coaches c JOIN AwardsCoaches ac ON c.coachID = ac.coachID JOIN Master m ON c.coachID = m.coachID WHERE ac.year > 1940 AND m.deathYear IS NOT NULL;
SELECT AwardsCoaches.award FROM AwardsCoaches JOIN Master ON AwardsCoaches.coachID = Master.coachID WHERE Master.deathYear IS NOT NULL AND AwardsCoaches.lgID = 'NHL'
SELECT COUNT(*) FROM Coaches c JOIN Master m ON c.coachID = m.coachID WHERE m.weight > 195 AND c.coachID IN (SELECT hofID FROM HOF);
SELECT firstName FROM Master WHERE playerID IN (     SELECT playerID     FROM Goalies     WHERE shootCatch IS NULL ) AND hofID IS NOT NULL;
SELECT COUNT(*) FROM (   SELECT playerID, coachID   FROM Master   WHERE playerID IS NOT NULL AND coachID IS NOT NULL ) AS m JOIN HOF ON m.playerID = HOF.hofID OR m.coachID = HOF.hofID;
SELECT DISTINCT M.birthCity FROM Master M JOIN AwardsPlayers AP ON M.playerID = AP.playerID WHERE AP.year = 1970;
SELECT COUNT(*) FROM AwardsPlayers ap JOIN Master m ON ap.playerID = m.playerID WHERE m.birthCity = 'Toronto' AND ap.award = 'All-Rookie';
SELECT COUNT(*) FROM Master WHERE playerID IN (SELECT playerID FROM AwardsPlayers WHERE award = 'All-Rookie') AND deathYear IS NOT NULL;
SELECT COUNT(DISTINCT T1.playerID) FROM Master AS T1 JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.deathState = 'Massachusetts';
SELECT AwardsPlayers.award FROM AwardsPlayers JOIN Master ON AwardsPlayers.playerID = Master.playerID WHERE Master.deathCity = 'Arlington'
SELECT nameNick FROM Master WHERE playerID IN (SELECT playerID FROM AwardsPlayers WHERE award = 'All-Rookie') AND birthMon = '3';
SELECT COUNT(*) FROM Master WHERE birthMon IN ('7','8') AND hofID IS NOT NULL;
SELECT T1.birthMon FROM Master AS T1 JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID GROUP BY T1.playerID ORDER BY COUNT(T2.award) DESC LIMIT 1;
SELECT birthYear FROM Master JOIN AwardsPlayers ON Master.playerID = AwardsPlayers.playerID GROUP BY birthYear ORDER BY COUNT(AwardsPlayers.award) DESC LIMIT 1;
SELECT birthCountry, COUNT(award) as AwardCount FROM Master JOIN AwardsPlayers ON Master.playerID = AwardsPlayers.playerID GROUP BY birthCountry ORDER BY AwardCount DESC LIMIT 1;
SELECT birthCountry, COUNT(*) AS num_hof_players FROM Master WHERE hofID IS NOT NULL GROUP BY birthCountry ORDER BY num_hof_players DESC LIMIT 1;
SELECT DISTINCT pos FROM Master JOIN AwardsPlayers ON Master.playerID = AwardsPlayers.playerID WHERE Award = 'All-Rookie' AND birthCountry = 'Canada';
SELECT AVG(T3.weight / (T3.height * T3.height)) FROM HOF AS T1 JOIN Master AS T2 ON T1.hofID = T2.hofID JOIN Master AS T3 ON T2.coachID = T3.playerID WHERE T1.category = 'Builder' OR T1.category = 'Player'
SELECT CAST(SUM(CASE WHEN birthCountry = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(hofID) FROM Master WHERE hofID IS NOT NULL;
SELECT (MAX(year) - MIN(year)) AS Years_Played FROM (     SELECT year     FROM Goalies     WHERE playerID = 'healygl01'     UNION ALL     SELECT year     FROM Scoring     WHERE playerID = 'healygl01' ) AS Combined_Years;
SELECT tmID FROM Scoring WHERE playerID = 'roypa01' AND year = 1992;
SELECT SUM(GP) FROM Goalies WHERE playerID = 'rutlewa01' AND year = 1967;
SELECT Min FROM Goalies WHERE playerID = 'valiqst01' AND year = 2007;
SELECT W FROM Goalies WHERE playerID = 'vanbijo01' AND year = 1990;
SELECT COUNT(*) FROM Goalies WHERE playerID = 'vernomi01' AND year = 1998 AND T/OL > 0;
Error: 第 7689 个样本有 2 个SQL。
SELECT COUNT(*) FROM HOF WHERE hofID = 'P194502' AND note = 'posthumous';
SELECT pos FROM Master WHERE firstName = 'Mike' AND lastName = 'Antonovich';
SELECT T1.birthCountry, T1.birthState, T1.birthCity FROM Master AS T1 JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1998 AND T2.notes = 'co-coach' AND T2.tmID IN (     SELECT tmID FROM Coaches     WHERE coachID = (SELECT coachID FROM Master WHERE name = 'Dave Lewis') );
SELECT M.firstName, M.lastName FROM Goalies G JOIN Master M ON G.playerID = M.playerID WHERE G.stint = 3 ORDER BY M.weight DESC LIMIT 1;
SELECT M.firstName, M.lastName FROM Master M JOIN Goalies G ON M.playerID = G.playerID WHERE G.ENG = 10 ORDER BY M.height DESC LIMIT 1;
SELECT T1.shootCatch FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2010 AND T2.SHO = (SELECT MAX(SHO) FROM Goalies WHERE year = 2010)
SELECT m.nameGiven, m.birthYear, m.birthMon, m.birthDay FROM Master m JOIN Goalies g ON m.playerID = g.playerID WHERE g.year = 2002 AND g.GA > 150 ORDER BY m.birthYear DESC, m.birthMon DESC, m.birthDay DESC LIMIT 1;
SELECT M.firstName, M.lastName FROM Master M JOIN Goalies G ON M.playerID = G.playerID WHERE G.tmID = 'NJD' ORDER BY (G.SA - G.GA) DESC LIMIT 1;
SELECT T1.name FROM Teams AS T1 JOIN Goalies AS T2 ON T1.tmID = T2.tmID WHERE T1.year = 2010 AND T2.PostENG = (SELECT MAX(PostENG) FROM Goalies WHERE year = 2010);
SELECT Teams.Pts FROM Teams JOIN Goalies ON Teams.tmID = Goalies.tmID AND Teams.year = Goalies.year WHERE Goalies.PostSHO = (     SELECT MAX(PostSHO)     FROM Goalies     WHERE year = 1995 ) AND Teams.year = 1995;
SELECT M.nameNick, MAX(CAST(C.w AS REAL) / (C.w + C.l)) as win_rate FROM Coaches C JOIN Master M ON C.coachID = M.coachID WHERE C.year = 2009 GROUP BY C.coachID, M.nameNick ORDER BY win_rate DESC LIMIT 1;
SELECT T3.firstName, T3.lastName FROM (     SELECT T1.tmID, MAX(T1.PPG / T1.PPC) as maxPPP     FROM TeamsPost T1     WHERE T1.year = 2011     GROUP BY T1.tmID ) T2 JOIN TeamsPost T4 ON T4.tmID = T2.tmID AND T4.year = 2011 AND T4.PPG / T4.PPC = T2.maxPPP JOIN Coaches T5 ON T5.tmID = T4.tmID AND T5.year = 2011 JOIN Master T3 ON T5.coachID = T3.coachID;
SELECT ScoringSC.GP FROM ScoringSC WHERE ScoringSC.playerID = 'broadpu01' AND ScoringSC.year = 1922;
SELECT COUNT(DISTINCT year) FROM ScoringSC WHERE playerID = 'cleghsp01';
SELECT G FROM ScoringSC WHERE playerID = 'dyeba01' AND year = 1921;
SELECT playerID, MAX(A) as max_assists FROM ScoringSC WHERE GP = 1 GROUP BY playerID ORDER BY max_assists DESC LIMIT 1;
SELECT lgID FROM Scoring WHERE playerID = 'adamsja01' AND year = 1920;
SELECT pos FROM ScoringSC WHERE playerID = 'hartgi01';
SELECT T1.W FROM Teams AS T1 JOIN (     SELECT tmID     FROM Goalies     WHERE year = 2011 AND PostGP > 0     GROUP BY tmID     HAVING COUNT(DISTINCT playerID) = 3 ) AS T2 ON T1.tmID = T2.tmID AND T1.year = 2011;
SELECT M.birthYear FROM Master M JOIN Goalies G ON M.playerID = G.playerID WHERE G.PostSA = (SELECT MAX(PostSA) FROM Goalies WHERE year = 2008) AND G.year = 2008;
SELECT COUNT(*) FROM (   SELECT MAX(T2.year - T1.lastNHL) AS years   FROM Master AS T1   JOIN Coaches AS T2 ON T1.coachID = T2.coachID   WHERE T1.lastName = 'Waddell' AND T1.firstName = 'Don' ) AS result WHERE result.years > 0;
SELECT M.shootCatch FROM Master AS M JOIN Goalies AS G ON M.playerID = G.playerID WHERE G.year = 1996 AND G.SHO = (SELECT MAX(SHO) FROM Goalies WHERE year = 1996);
SELECT M.birthYear, M.birthMon, M.birthDay FROM Master AS M, Goalies AS G WHERE M.playerID = G.playerID AND G.year = '1965' AND G.GA = (SELECT MAX(GA) FROM Goalies WHERE year = '1965')
SELECT M.firstName, M.lastName FROM Master AS M JOIN Scoring AS S ON M.playerID = S.playerID WHERE S.year = '1981' ORDER BY S.+/- DESC LIMIT 1;
SELECT M.weight FROM Master AS M JOIN (     SELECT playerID, MAX(PPG) AS max_ppg     FROM Scoring     WHERE year > 2000     GROUP BY playerID     ORDER BY max_ppg DESC     LIMIT 1 ) AS T ON M.playerID = T.playerID;
SELECT M.shootCatch FROM Master M JOIN Scoring S ON M.playerID = S.playerID WHERE S.year = 1989 AND S.SHG = 7;
SELECT Master.firstName, Master.lastName FROM Scoring JOIN Master ON Scoring.playerID = Master.playerID WHERE Scoring.year = 1986 ORDER BY Scoring.GWG DESC LIMIT 1;
SELECT SUM(SOG) FROM Scoring WHERE playerID = (SELECT playerID FROM Master WHERE firstName = 'Cam' AND lastName = 'Neely') AND year = 1990;
SELECT C.firstName, C.lastName FROM (     SELECT T.year, T.tmID, MAX(T.BenchMinor) as maxBenchMinor     FROM Teams T     WHERE T.year = 2003     GROUP BY T.year, T.tmID ) AS Tmp JOIN Coaches Co ON Tmp.tmID = Co.tmID AND Tmp.year = Co.year JOIN Master M ON M.coachID = Co.coachID WHERE Tmp.maxBenchMinor = Tmp.BenchMinor
SELECT playerID, MAX(GA) FROM Goalies WHERE year = 1978 AND playerID IN (SELECT playerID FROM Master WHERE weight > 190);
SELECT     ((SELECT CAST(SUM(CASE WHEN C.year = 2006 THEN C.w ELSE 0 END) AS REAL) / NULLIF(SUM(C.w + C.l), 0) -             CAST(SUM(CASE WHEN C.year = 2005 THEN C.w ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN C.year = 2005 THEN C.w + C.l ELSE 0 END), 0)) * 100) AS WinningRateImprovement FROM     Coaches C JOIN     Teams T ON C.tmID = T.tmID AND C.year = T.year WHERE     C.coachID = 'VigneaultAlai01' AND     T.name = 'Vancouver Canucks';
SELECT T1.legendsID FROM Goalies AS T1 JOIN (     SELECT tmID, MAX(SUBTRACT(1, DIVIDE(PostGA, PostSA))) AS max_defensive_success_rate     FROM Goalies     WHERE year = 2011     GROUP BY tmID ) AS T2 ON T1.tmID = T2.tmID AND T1.year = 2011 WHERE SUBTRACT(1, DIVIDE(T1.PostGA, T1.PostSA)) = T2.max_defensive_success_rate;
SELECT COUNT(DISTINCT Master.playerID) FROM Master WHERE EXISTS (   SELECT 1   FROM Coaches   WHERE Master.coachID = Coaches.coachID );
SELECT Teams.name, Teams.BenchMinor FROM Teams WHERE Teams.T = (     SELECT MAX(T) FROM Teams ) ORDER BY Teams.BenchMinor DESC LIMIT 1;
SELECT award FROM AwardsCoaches WHERE coachID = (     SELECT coachID     FROM Coaches     WHERE w = (         SELECT MAX(w)         FROM Coaches     ) ) AND lgID = 'NHL' GROUP BY award ORDER BY COUNT(*) DESC LIMIT 1;
SELECT PPG / PPC * 100 AS PowerPlayPercentage FROM Teams WHERE L = (SELECT MAX(L) FROM Teams)
SELECT AVG(count_hofID) AS Average_HOF_Inductees FROM ( SELECT COUNT(hofID) as count_hofID FROM HOF WHERE year BETWEEN 1950 AND 1980 GROUP BY year ) as yearly_counts
Error: 第 7727 个样本有 2 个SQL。
SELECT T1.tmID, T1.W FROM Teams AS T1 JOIN Goalies AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.SHO = (SELECT MAX(SHO) FROM Goalies) LIMIT 1;
SELECT tmID FROM TeamSplits WHERE year = 2005 ORDER BY rW DESC LIMIT 1;
SELECT pos FROM Master ORDER BY birthYear, birthMon, birthDay LIMIT 8,1;
SELECT SUM(GA) FROM Goalies WHERE year = 1924 AND lgID = 'WCHL' GROUP BY playerID ORDER BY SUM(GA) DESC LIMIT 1;
SELECT tmID, MAX(OctL) as MaxOctL FROM TeamSplits WHERE year = 2006;
SELECT COUNT(*) FROM Master WHERE shootCatch IS NULL AND firstNHL = 2011;
Error: 第 7734 个样本有 2 个SQL。
SELECT T3.tmID, AVG(T1.height) AS avg_height FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID JOIN Teams AS T3 ON T3.tmID = T2.tmID AND T3.year = (     SELECT MAX(year) FROM Teams ) WHERE T1.pos = 'G' AND T1.birthYear BETWEEN 1970 AND 1979 AND T1.shootCatch = 'L' GROUP BY T3.tmID ORDER BY avg_height DESC LIMIT 1;
SELECT M.nameGiven, M.lastName, SUM(S.A) AS TotalAssists FROM Master M JOIN Scoring S ON M.playerID = S.playerID WHERE S.lgID = 'NHL' GROUP BY S.playerID ORDER BY TotalAssists DESC LIMIT 1;
SELECT TeamsPost.tmID, TeamsPost.PPK, TeamsPost.PPC, TeamsPost.PPG,        (TeamsPost.PPG / TeamsPost.PPC) * 100 AS PP_percentage,        SeriesPost.tmIDLoser, SeriesPost.W, SeriesPost.L FROM TeamsPost JOIN SeriesPost ON TeamsPost.tmID = SeriesPost.tmIDWinner WHERE TeamsPost.PKC = (SELECT MIN(PKC) FROM TeamsPost)
SELECT C.coachID FROM Coaches C JOIN (     SELECT coachID     FROM Coaches     GROUP BY coachID     ORDER BY SUM(w) DESC     LIMIT 1 ) MaxWinsCoach ON C.coachID = MaxWinsCoach.coachID JOIN AwardsCoaches AC ON C.coachID = AC.coachID
SELECT tmIDLoser AS team_name FROM SeriesPost WHERE year = 1912 AND note = 'EX'
SELECT (T2.year - T2.firstNHL) AS duration, T1.nameGiven || ' ' || T1.lastName AS fullName FROM Master AS T1 JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID = 'NHL' AND T2.+/- = (SELECT MIN(+/-) FROM Scoring WHERE lgID = 'NHL') LIMIT 1;
SELECT T1.nameGiven FROM Master AS T1 JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year BETWEEN 2003 AND 2005 AND T2.PIM BETWEEN 200 AND 250 GROUP BY T1.playerID ORDER BY SUM(T2.GP) DESC LIMIT 1;
SELECT T1.birthYear - T2.lastNHL AS age_at_retirement FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.GA = (SELECT MIN(GA) FROM Goalies) AND T2.year = (SELECT MAX(year) FROM Goalies WHERE playerID = T2.playerID);
SELECT ap.note AS Award, m.nameGiven || ' ' || m.lastName AS FullName FROM AwardsPlayers ap JOIN Master m ON ap.playerID = m.playerID WHERE ap.pos = (     SELECT pos FROM (         SELECT pos, COUNT(*) AS cnt         FROM AwardsPlayers         GROUP BY pos         ORDER BY cnt DESC         LIMIT 1     ) ) AND ap.year = (     SELECT MAX(year) FROM AwardsPlayers     WHERE pos = (         SELECT pos FROM (             SELECT pos, COUNT(*) AS cnt             FROM AwardsPlayers             GROUP BY pos             ORDER BY cnt DESC             LIMIT 1         )     ) ) LIMIT 1;
SELECT SUM(T2.g) FROM AwardsCoaches AS T1 JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T1.award = 'Second Team All-Star' GROUP BY T1.coachID ORDER BY T1.year LIMIT 1;
SELECT COUNT(T2.oppID), T2.tmID AS TeamWithMostWins, T2.oppID AS OpposingTeams FROM Teams T1 JOIN (   SELECT tmID, MAX(W) AS MaxWins   FROM Teams   WHERE year = 1915   GROUP BY tmID ) T2 ON T1.tmID = T2.tmID AND T1.year = 1915 JOIN TeamVsTeam T3 ON T2.tmID = T3.tmID AND T1.year = T3.year WHERE T1.W = T2.MaxWins GROUP BY T2.tmID, T2.oppID ORDER BY COUNT(T2.oppID) DESC LIMIT 1;
SELECT T1.playerID FROM Scoring AS T1 JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.SHG BETWEEN 1 AND 5 ORDER BY T1.GWG DESC LIMIT 1;
SELECT coachID, SUM(L) as total_losses FROM Coaches WHERE year = 1997 AND tmID = 'TBL' AND notes = 'interim';
SELECT T1.rank, T1.year, T1.name FROM Teams AS T1 JOIN Scoring AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.SHA >= 7 GROUP BY T1.tmID, T1.year ORDER BY SUM(T2.A) DESC LIMIT 1;
SELECT Coaches.coachID, Master.name FROM Coaches JOIN Master ON Coaches.coachID = Master.coachID JOIN Teams ON Coaches.year = Teams.year AND Coaches.tmID = Teams.tmID AND Coaches.lgID = Teams.lgID WHERE Teams.rank = 4 AND Teams.year = 1969;
SELECT name FROM TeamsHalf WHERE year BETWEEN 1917 AND 1920 AND half = 1 AND rank = 1;
SELECT CONCAT(Master.nameGiven, ' ', Master.lastName) AS FullName, Scoring.year, Teams.name AS TeamName FROM Master JOIN Scoring ON Master.playerID = Scoring.playerID JOIN Teams ON Scoring.tmID = Teams.tmID AND Scoring.year = Teams.year WHERE Master.birthCountry = 'Canada' AND (Scoring.year - Master.birthYear) BETWEEN 18 AND 24 AND Scoring.G <= 5;
SELECT SUM(Teams.PIM) FROM Teams WHERE Teams.name = 'St. Louis Blues';
SELECT PPC FROM Teams WHERE name = 'New York Rangers' AND year = 2009;
SELECT MAX(Pts) FROM Teams;
SELECT COUNT(*) FROM Teams WHERE year = 2006 AND W > L AND Pts > 100;
SELECT name FROM Teams WHERE year = 2006 ORDER BY BenchMinor DESC LIMIT 1;
SELECT name FROM Teams WHERE year = 2006 ORDER BY PIM DESC LIMIT 3;
SELECT tmID FROM Teams WHERE year = 1995 AND PKC = (SELECT MAX(PKC) FROM Teams WHERE year = 1995) AND tmID IN ('FLA', 'EDM', 'LAK');
SELECT T1.name FROM Teams AS T1 JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID WHERE T2.year = 1917 AND T2.W > T2.L;
SELECT tmID FROM TeamsSC WHERE year = 1922;
SELECT COUNT(tmID) FROM Teams WHERE year = 1922 AND tmID IN (SELECT tmID FROM TeamsSC WHERE year = 1922) AND Pts > 20;
SELECT PIM FROM TeamsSC WHERE year = 1923 AND rank = 2;
SELECT name FROM TeamsSC WHERE W = (SELECT MAX(W) FROM TeamsSC)
SELECT W FROM TeamVsTeam WHERE year = 1985 AND tmID = 'PHI' AND oppID = 'BOS';
SELECT name FROM Teams WHERE year = 1909 AND T > 0;
SELECT DISTINCT Master.firstName FROM Coaches JOIN Master ON Coaches.coachID = Master.coachID JOIN Teams ON Coaches.tmID = Teams.tmID AND Coaches.year = Teams.year WHERE Teams.name = 'Montreal Canadiens';
SELECT COUNT(*) FROM Coaches c JOIN Teams t ON c.tmID = t.tmID AND c.year = t.year JOIN HOF h ON c.coachID = h.hofID WHERE t.name = 'Montreal Canadiens' AND h.category = 'Builder';
SELECT MAX(Master.height) FROM Master JOIN Coaches ON Master.coachID = Coaches.coachID JOIN Teams ON Coaches.tmID = Teams.tmID AND Coaches.year = Teams.year WHERE Teams.name = 'Montreal Canadiens';
SELECT DISTINCT c.firstName FROM Coaches c JOIN Master m ON c.coachID = m.coachID JOIN TeamsSC t ON c.tmID = t.tmID AND c.year = t.year WHERE c.year = 1922;
SELECT COUNT(*) FROM Coaches JOIN Master ON Coaches.coachID = Master.coachID WHERE Master.birthMon = 3 AND Teams.name = 'Philadelphia Flyers' AND Coaches.tmID = Teams.tmID;
SELECT COUNT(*) FROM Coaches JOIN Master ON Coaches.coachID = Master.coachID JOIN Teams ON Coaches.tmID = Teams.tmID AND Coaches.year = Teams.year WHERE Master.birthCountry = 'USA' AND Teams.name = 'Philadelphia Flyers';
SELECT COUNT(*) FROM Coaches c JOIN Teams t ON c.tmID = t.tmID AND c.year = t.year WHERE t.name = 'Buffalo Sabres' AND c.coachID IN (SELECT coachID FROM Master WHERE deathYear IS NOT NULL);
SELECT DISTINCT m.nameNick FROM Master m JOIN Coaches c ON m.coachID = c.coachID WHERE m.birthCountry = 'USA' AND c.tmID = 'BUF' AND c.lgID = 'NHL';
SELECT COUNT(*) FROM Coaches c JOIN Master m ON c.coachID = m.coachID WHERE c.year = 1922 AND m.birthCountry = 'USA' AND c.tmID IN (     SELECT tmID     FROM TeamsSC     WHERE year = 1922 );
SELECT tmID FROM TeamVsTeam WHERE year = 2000 AND oppID = (SELECT tmID FROM Teams WHERE name = 'Buffalo Sabres' AND year = 2000) GROUP BY tmID ORDER BY SUM(G) DESC LIMIT 1;
SELECT DISTINCT name FROM Teams WHERE tmID IN (SELECT oppID FROM TeamVsTeam WHERE tmID = (SELECT tmID FROM Teams WHERE name = 'Buffalo Sabres'))
SELECT Teams.PIM FROM Teams WHERE Teams.year = 1918 AND Teams.name = 'Montreal Canadiens';
SELECT TeamsSC.W FROM TeamsSC WHERE TeamsSC.PIM = 24 AND TeamsSC.tmID = 'MTL'
SELECT year FROM TeamsSC WHERE tmID = 'MTL' AND PIM = 49;
SELECT T2.firstName FROM Coaches AS T1 JOIN Master AS T2 ON T1.coachID = T2.coachID WHERE T1.tmID = 'MTR' ORDER BY T1.year LIMIT 1;
SELECT AVG(T1.W / T1.G) AS avg_winning_rate FROM Teams AS T1 WHERE T1.year = 2000 AND T1.name = 'Buffalo Sabres'
SELECT AVG(TeamsSC.PIM) FROM TeamsSC WHERE TeamsSC.tmID = (SELECT Master.tmID FROM Master WHERE Master.name = 'Montreal Canadiens');
SELECT AVG(T1.W / T1.G) AS avg_winning_rate FROM TeamsSC AS T1 JOIN abbrev AS T2 ON T1.lgID = T2.Code WHERE T2.Fullname = 'Stanley Cup' AND T1.tmID = 'MTL'
SELECT CAST(SUM(CASE WHEN M.birthCountry = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(C.coachID) AS Percentage FROM Coaches C JOIN Master M ON C.coachID = M.coachID WHERE C.tmID = 'MTL';
SELECT name FROM HOF WHERE category NOT IN ('player', 'builder') ORDER BY year DESC LIMIT 1;
SELECT hofID FROM HOF WHERE category = 'Referees' AND year BETWEEN 1970 AND 1979;
SELECT COUNT(*) FROM HOF WHERE year = 1958 AND category = 'Player';
SELECT COUNT(*) FROM (   SELECT hofID   FROM Master   WHERE playerID IS NOT NULL AND coachID IS NOT NULL ) AS HallOfFamers;
SELECT COUNT(*) FROM Master WHERE lastName = 'Green' AND playerID IS NOT NULL AND coachID IS NULL;
SELECT Teams.BenchMinor FROM Teams JOIN Coaches ON Teams.tmID = Coaches.tmID AND Teams.year = Coaches.year WHERE Coaches.coachID = 'bowmansc01' AND Coaches.year = 1982;
SELECT M.firstName, M.lastName FROM Master M JOIN Goalies G ON M.playerID = G.playerID WHERE G.ENG = 10 ORDER BY M.height DESC LIMIT 1;
SELECT M.nameGiven, M.firstName, M.lastName, M.shootCatch FROM Master M JOIN Goalies G ON M.playerID = G.playerID WHERE G.year = 1973 AND G.tmID = 'QUN' AND G.GP = 32;
SELECT COUNT(DISTINCT tmID) FROM Goalies WHERE playerID IN (SELECT playerID FROM Master WHERE lastName = 'Young');
SELECT Master.firstName, Master.lastName FROM Master JOIN Goalies ON Master.playerID = Goalies.playerID WHERE Goalies.year = 1972 AND Goalies.tmID = 'BOS' AND Master.coachID IS NOT NULL AND Master.hofID IS NULL;
SELECT COUNT(GP) FROM Goalies WHERE legendsID = 'P196402';
SELECT M.firstName, M.lastName FROM Master M JOIN Goalies G ON M.playerID = G.playerID JOIN Teams T ON G.tmID = T.tmID AND G.year = T.year WHERE T.name = 'Quebec Bulldogs' AND M.pos = 'G' GROUP BY M.playerID ORDER BY SUM(G.Min) DESC LIMIT 1;
SELECT COUNT(*) FROM Goalies WHERE tmID = (SELECT tmID FROM Teams WHERE name = 'Calgary Flames');
SELECT playerID FROM Goalies WHERE tmID = 'MNS' ORDER BY GA DESC LIMIT 1;
SELECT COUNT(*) FROM Goalies AS G JOIN Master AS M ON G.playerID = M.playerID JOIN HOF AS H ON M.hofID = H.hofID WHERE G.tmID = 'HAI' AND H.category = 'Player';
SELECT T1.shootCatch FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2010 AND T2.SHO = (SELECT MAX(SHO) FROM Goalies WHERE year = 2010);
SELECT (SUM(CASE WHEN year = 2005 THEN GP ELSE 0 END) - SUM(CASE WHEN year = 2006 THEN GP ELSE 0 END)) / SUM(CASE WHEN year = 2005 THEN GP ELSE 0 END) * 100 AS DecreaseRate FROM Goalies WHERE playerID = 'aebischd01' GROUP BY playerID;
SELECT playerID, coachID FROM Master WHERE playerID IS NOT NULL AND coachID IS NOT NULL;
Error: 第 7803 个样本有 2 个SQL。
SELECT playerID FROM Master ORDER BY weight DESC LIMIT 5;
SELECT firstName, lastName FROM Master WHERE birthCountry = 'Finland';
SELECT playerID FROM Master WHERE deathYear IS NOT NULL;
SELECT DISTINCT Master.firstName FROM Coaches JOIN Master ON Coaches.coachID = Master.coachID WHERE Coaches.year > 2000;
SELECT T1.height, T1.weight FROM Master AS T1 JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1930;
SELECT SUM(T1.G) AS TotalGoals, YEAR(CURDATE()) - T2.birthYear AS Age FROM Scoring AS T1 JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = 'aaltoan01'
SELECT DISTINCT AC.coachID FROM AwardsCoaches AS AC LEFT JOIN Master AS M ON AC.coachID = M.coachID WHERE M.playerID IS NULL;
SELECT playerID FROM Master WHERE pos = 'L' AND weight > 200;
Error: 第 7812 个样本有 2 个SQL。
SELECT Teams.Pts, Coaches.coachID, Coaches.firstName, Coaches.lastName FROM Teams JOIN Coaches ON Teams.tmID = Coaches.tmID AND Teams.year = Coaches.year WHERE Teams.tmID = 'ANA'
SELECT G FROM Teams WHERE year = 1976 AND tmID = 'BIR' AND divID = 'EW';
SELECT L FROM Teams WHERE year = 2010 AND tmID = 'BOS' UNION SELECT SUM(A) FROM Scoring WHERE year = 2010 AND tmID = 'BOS';
SELECT SUM(weight) FROM Master JOIN Scoring ON Master.playerID = Scoring.playerID WHERE Scoring.tmID = 'ANA' AND Scoring.year = 1997;
SELECT playerID, tmID FROM Master JOIN Goalies ON Master.playerID = Goalies.playerID WHERE year BETWEEN 1925 AND 1936 ORDER BY height LIMIT 1;
SELECT T1.tmID, T3.birthCountry FROM (     SELECT tmID, CAST(SUM(w) AS REAL) / (SUM(w) + SUM(l)) AS win_rate     FROM Teams     WHERE year = 2000     GROUP BY tmID     ORDER BY win_rate DESC     LIMIT 1 ) AS T1 JOIN Scoring AS T2 ON T1.tmID = T2.tmID AND T2.year = 2000 JOIN Master AS T3 ON T2.playerID = T3.playerID;
SELECT (T1.W / T1.G) AS WinRatio, T3.playerID FROM Teams AS T1 JOIN TeamVsTeam AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year JOIN Scoring AS T3 ON T2.tmID = T3.tmID AND T1.year = T3.year WHERE T1.year = 1998 AND T1.tmID = 'CAR' GROUP BY T3.playerID ORDER BY SUM(T3.G) DESC LIMIT 1;
SELECT Name FROM Country ORDER BY LifeExpectancy LIMIT 1;
SELECT Country.Name FROM Country JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE CountryLanguage.Language = 'English' AND CountryLanguage.IsOfficial = 'T' LIMIT 5;
SELECT AVG(Population) FROM City WHERE District = 'Karnataka';
SELECT Language FROM CountryLanguage WHERE CountryCode = 'USA';
SELECT COUNT(*) FROM CountryLanguage WHERE Language = 'Portuguese';
SELECT COUNT(*) FROM City WHERE District = 'England';
SELECT COUNT(City.ID) FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM Country);
SELECT T1.Name AS CityName, T1.Population FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'San Marino';
SELECT Language FROM CountryLanguage WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Turkmenistan');
SELECT C.Name, CT.CityName, CL.Language FROM Country AS C JOIN City AS CT ON C.Capital = CT.ID JOIN CountryLanguage AS CL ON C.Code = CL.CountryCode WHERE CL.IsOfficial = 'T' AND C.Code = (     SELECT Code FROM Country     ORDER BY LifeExpectancy DESC     LIMIT 1 )
SELECT Country.Name, CountryLanguage.Language FROM Country JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE Country.Continent = 'Antarctica' AND CountryLanguage.IsOfficial = 'T';
SELECT Country.Name FROM Country JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE CountryLanguage.Language = 'English' AND CountryLanguage.IsOfficial = 'T' LIMIT 5;
SELECT Language FROM CountryLanguage WHERE Percentage > 80 AND CountryCode IN (     SELECT Code     FROM Country     WHERE Region = 'Baltic Countries' );
SELECT Language FROM CountryLanguage WHERE Percentage > 80 AND CountryCode IN (     SELECT Code     FROM Country     WHERE Region = 'Baltic Countries' );
SELECT C.Name AS City_Name, CT.Name AS Country_Name, CT.LifeExpectancy FROM City C JOIN Country CT ON C.CountryCode = CT.Code WHERE C.Population = (SELECT MAX(Population) FROM City);
SELECT C.Name AS Capital_City, CL.Language, CL.IsOfficial FROM Country AS CT JOIN City AS C ON CT.Capital = C.ID JOIN CountryLanguage AS CL ON CT.Code = CL.CountryCode WHERE CT.LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM Country)
SELECT C.Name AS Country,        C.Population,        CT.Name AS CapitalCity,        CL.Language AS OfficialLanguage FROM Country C JOIN City CT ON C.Capital = CT.ID JOIN CountryLanguage CL ON C.Code = CL.CountryCode WHERE C.SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country) AND CL.IsOfficial = 'T';
SELECT     (COUNT(CASE WHEN Language = 'English' THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM     CountryLanguage JOIN     Country ON CountryLanguage.CountryCode = Country.Code WHERE     Continent = 'North America' GROUP BY     Continent;
SELECT District FROM City WHERE Population = (SELECT MIN(Population) FROM City);
SELECT Continent FROM Country WHERE SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country);
SELECT T2.HeadOfState FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Population = (SELECT MAX(Population) FROM City)
SELECT C.Name FROM Country AS C JOIN CountryLanguage AS CL ON C.Code = CL.CountryCode WHERE CL.Language = 'English' AND CL.IsOfficial = 'T' ORDER BY C.Capital DESC LIMIT 1;
SELECT City.Name FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.LifeExpectancy = 66.4;
SELECT T2.HeadOfState FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' ORDER BY T1.Percentage ASC LIMIT 1;
SELECT T2.SurfaceArea FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Sutton Coldfield'
SELECT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE c.Population < 8000;
SELECT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE c.Name = 'Belgium' AND cl.IsOfficial = 'T';
SELECT City.Name, City.District FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.LocalName = 'Hajastan';
SELECT COUNT(*) FROM CountryLanguage WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Cyprus');
SELECT Language FROM CountryLanguage WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Belize');
SELECT City.District FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.HeadOfState = 'Adolf Ogi';
SELECT T2.HeadOfState FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Santa Catarina'
SELECT (COUNT(CASE WHEN CL.Language = 'English' THEN C.Code ELSE NULL END) * 1.0 / COUNT(C.Code)) * 100 AS Percentage FROM Country AS C JOIN CountryLanguage AS CL ON C.Code = CL.CountryCode WHERE C.GNP > 1500;
SELECT     (SELECT COUNT(*) FROM Country AS C JOIN CountryLanguage AS CL ON C.Code = CL.CountryCode WHERE CL.Language = 'English' AND C.GovernmentForm = 'Republic') -     (SELECT COUNT(*) FROM Country AS C JOIN CountryLanguage AS CL ON C.Code = CL.CountryCode WHERE CL.Language = 'English' AND C.GovernmentForm = 'Constitutional Monarchy') AS Difference;
SELECT Name FROM Country WHERE IndepYear = 1994;
SELECT Name FROM Country WHERE Continent = 'Asia';
SELECT Name FROM Country WHERE Continent = 'Asia' ORDER BY GNP DESC LIMIT 1;
SELECT COUNT(*) FROM City WHERE CountryCode = 'PHL';
SELECT T1.LocalName FROM Country AS T1 WHERE T1.Name = 'Ukraine'
SELECT COUNT(*) FROM Country WHERE GovernmentForm = 'Socialistic Republic';
SELECT Language FROM CountryLanguage WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'China') AND IsOfficial = 'T';
SELECT T2.Percentage FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'China' AND T2.Language = 'Chinese';
SELECT T2.GovernmentForm FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Manila';
SELECT T1.Name FROM City AS T1 JOIN Country AS T2 ON T1.ID = T2.Capital WHERE T2.Name = 'Philippines'
SELECT DISTINCT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Europe';
SELECT T2.HeadOfState FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Pyongyang'
SELECT COUNT(*) FROM CountryLanguage WHERE CountryCode IN (SELECT Code FROM Country WHERE Name = 'Italy') AND IsOfficial = 'F';
SELECT City.Name FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.Name = 'Russia' ORDER BY City.Population LIMIT 1;
SELECT City.Name FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.LifeExpectancy = (     SELECT MAX(LifeExpectancy)     FROM Country )
SELECT CL.Language, CL.IsOfficial FROM CountryLanguage AS CL JOIN Country AS C ON CL.CountryCode = C.Code WHERE C.IndepYear = 1830;
SELECT C.Name FROM City C JOIN Country CO ON C.ID = CO.Capital WHERE CO.Population = (SELECT MAX(Population) FROM Country);
SELECT Country.Name FROM Country JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE Country.Continent = 'Asia' AND CountryLanguage.Language = 'English' AND CountryLanguage.IsOfficial = 'F';
SELECT AVG(Country.GNP) FROM Country JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE CountryLanguage.Language = 'Arabic';
SELECT (SUM(CASE WHEN T2.Language = 'Chinese' THEN T1.SurfaceArea ELSE 0 END) * 100) / SUM(T1.SurfaceArea) AS ChinesePercentage FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode;
SELECT Name FROM Country ORDER BY SurfaceArea LIMIT 1;
SELECT Name FROM Country WHERE Population = (SELECT MAX(Population) FROM Country);
SELECT CL.Language FROM CountryLanguage CL JOIN Country C ON CL.CountryCode = C.Code WHERE C.Population = (SELECT MIN(Population) FROM Country)
SELECT cl.CountryCode, c.Name FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE cl.Language = 'English' AND cl.IsOfficial = 'T';
SELECT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE cl.IsOfficial = 'T' AND c.IndepYear > 1990;
SELECT Percentage FROM CountryLanguage WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Australia') AND Language = 'English';
SELECT Language FROM CountryLanguage WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Malaysia');
SELECT C.Name FROM Country AS C JOIN City AS Cy ON C.Code = Cy.CountryCode WHERE Cy.Population = (SELECT MAX(City.Population) FROM City)
SELECT T2.LifeExpectancy FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Population = (SELECT MAX(Population) FROM City);
SELECT T2.GNP FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Population = (SELECT MIN(Population) FROM City);
SELECT T3.Name AS CountryName FROM (     SELECT T1.CountryCode, COUNT(T2.Language) AS LanguageCount     FROM City AS T1     JOIN CountryLanguage AS T2 ON T1.CountryCode = T2.CountryCode     WHERE T1.ID IN (         SELECT ID         FROM City         ORDER BY Population DESC         LIMIT 5     )     GROUP BY T1.CountryCode ) AS T4 JOIN Country AS T3 ON T4.CountryCode = T3.Code ORDER BY T4.LanguageCount DESC LIMIT 1;
SELECT C.Name AS Country_Name, MIN(C.SurfaceArea) AS Smallest_Surface_Area, MAX(Cty.Population) AS Most_Crowded_City_Population FROM Country AS C JOIN City AS Cty ON C.Code = Cty.CountryCode GROUP BY C.Name ORDER BY Smallest_Surface_Area ASC, Most_Crowded_City_Population DESC LIMIT 1;
SELECT City.Name FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.Name = 'China';
SELECT City.Name FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.LocalName = "'Uman";
SELECT AVG(LifeExpectancy) FROM Country WHERE Code IN (     SELECT CountryCode     FROM CountryLanguage     WHERE Language = 'Arabic' );
SELECT (c.GNP - c.GNPOld) / c.GNPOld AS GNP_growth_rate FROM City AS cy JOIN Country AS c ON cy.CountryCode = c.Code WHERE cy.Name = 'Shanghai';
SELECT District FROM City WHERE Name = 'Zaanstad';
SELECT Name FROM City WHERE Population = (SELECT MAX(Population) FROM City);
SELECT District FROM City WHERE Population = 201843;
SELECT Name FROM Country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM Country);
SELECT COUNT(*) FROM Country WHERE LifeExpectancy = 75.1;
SELECT IndepYear FROM Country WHERE Name = 'Brunei';
SELECT COUNT(*) FROM Country WHERE GNP = 0;
SELECT AVG(SurfaceArea) FROM Country;
SELECT COUNT(DISTINCT cl.Language) FROM CountryLanguage cl JOIN City c ON cl.CountryCode = c.CountryCode WHERE c.District = 'Tocantins';
SELECT C.District FROM City C JOIN Country CT ON C.CountryCode = CT.Code WHERE CT.SurfaceArea = (SELECT MAX(SurfaceArea) FROM Country);
SELECT COUNT(T1.Name) FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = 'Kostis Stefanopoulos';
SELECT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE c.Name = 'Greece' AND cl.IsOfficial = 'T';
SELECT T2.Population FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Queimados'
SELECT cl.Language FROM CountryLanguage cl JOIN City c ON cl.CountryCode = c.CountryCode WHERE cl.IsOfficial = 'T' AND c.Population = (SELECT MIN(Population) FROM City);
SELECT T2.SurfaceArea, T2.GNP FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Namibe';
SELECT T1.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T';
SELECT T1.District FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country);
SELECT C.Name FROM Country AS C JOIN CountryLanguage AS CL ON C.Code = CL.CountryCode WHERE C.GNP < 1000 AND CL.Language = 'Dutch';
SELECT T2.GNP FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Entre Rios'
SELECT T2.LocalName FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'The Valley'
SELECT City.Name FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.SurfaceArea > 7000000;
SELECT T1.LifeExpectancy FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Japanese';
SELECT COUNT(T1.Name) FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.SurfaceArea = 652090;
SELECT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE c.IndepYear BETWEEN 1980 AND 1995;
SELECT T2.LifeExpectancy FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Calama'
SELECT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Pierre Buyoya';
SELECT (SUM(CASE WHEN C.District = 'England' THEN 1 ELSE 0 END) * 100 / COUNT(*)) FROM (     SELECT *     FROM City AS CT     JOIN Country AS CO ON CT.CountryCode = CO.Code     WHERE CO.GovernmentForm = 'Constitutional Monarchy' ) AS C
SELECT C.Name FROM Country C JOIN City CT ON C.Code = CT.CountryCode WHERE CT.Population BETWEEN 140000 AND 150000 AND C.LifeExpectancy > (SELECT AVG(LifeExpectancy) * 0.8 FROM Country) GROUP BY C.Name;
SELECT (COUNT(CASE WHEN T2.GovernmentForm = 'Republic' THEN 1 END) * 100 / COUNT(T2.Code)) AS percentage FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Italian';
Error: 第 7919 个样本有 2 个SQL。
SELECT (COUNT(c.podcast_id) FILTER (WHERE c.category_count > 4)) * 100.0 / COUNT(c.podcast_id) AS percentage FROM (   SELECT podcast_id, COUNT(category) as category_count   FROM categories   GROUP BY podcast_id ) c
SELECT itunes_id, itunes_url FROM podcasts WHERE title = 'Brown Suga Diaries';
SELECT podcasts.itunes_url FROM podcasts WHERE podcasts.title LIKE '%Dream%';
SELECT c.category FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id WHERE p.title = 'I Heart My Life Show'
SELECT p.title, p.itunes_url FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'society-culture';
SELECT COUNT(*) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id JOIN categories ON podcasts.podcast_id = categories.podcast_id WHERE podcasts.title LIKE '%spoiler%' AND categories.category = 'art' AND reviews.rating = 5;
SELECT DISTINCT r.author_id FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE p.title = 'Pop Rocket' AND r.created_at LIKE '2016%' AND r.rating < 5;
SELECT p.title, c.category FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id GROUP BY p.podcast_id, c.category HAVING AVG(r.rating) > 3.0;
SELECT p.title, r.content FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'fiction' AND r.rating = 5;
SELECT p.title, r.content, r.rating FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.title = 'Love it!';
SELECT r.author_id, r.rating, r.created_at FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE p.title = 'In The Thick';
SELECT r.created_at, p.title, r.rating FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE r.created_at = (SELECT MAX(created_at) FROM reviews);
SELECT p.title, r.rating, r.content FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.author_id = '76A4C24B6038145';
SELECT p.title AS podcast_title, r.title AS review_title, r.content FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE r.rating = 1;
SELECT p.title, r.rating FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE r.created_at LIKE '2019-05%';
SELECT AVG(rating) FROM (   SELECT podcast_id, rating   FROM reviews   WHERE podcast_id = (     SELECT podcast_id     FROM reviews     GROUP BY podcast_id     ORDER BY COUNT(podcast_id) DESC     LIMIT 1   ) )
SELECT c.category FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id WHERE p.title = 'SciFi Tech Talk';
SELECT p.title, p.itunes_url FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.title = 'Long time listener, calling it quits';
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'true crime';
SELECT content FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'StormCast: The Official Warhammer Age of Sigmar Podcast';
SELECT reviews.title, reviews.content FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'More Stupider: A 90-Day Fiance Podcast' AND reviews.rating = 1;
SELECT COUNT(*) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'LifeAfter/The Message' AND reviews.rating < 3;
SELECT c.category, AVG(r.rating) as average_rating FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id JOIN reviews r ON p.podcast_id = r.podcast_id WHERE p.title = 'More Stupider: A 90-Day Fiance Podcast' GROUP BY c.category;
SELECT     CASE         WHEN COUNT(CASE WHEN T1.category = 'arts-books' THEN 1 END) > COUNT(CASE WHEN T1.category = 'arts-design' THEN 1 END) THEN 'arts-books'         ELSE 'arts-design'     END AS category_with_more_podcasts,     ABS(         COUNT(CASE WHEN T1.category = 'arts-books' THEN 1 END) -         COUNT(CASE WHEN T1.category = 'arts-design' THEN 1 END)     ) AS numerical_difference FROM     categories AS T1 JOIN     podcasts AS T2 ON T1.podcast_id = T2.podcast_id WHERE     T1.category IN ('arts-books', 'arts-design') GROUP BY     T1.category;
Error: 第 7944 个样本有 2 个SQL。
SELECT COUNT(*) FROM reviews WHERE rating = 3 AND created_at BETWEEN '2015-01-01T00:00:00-07:00' AND '2015-03-31T23:59:59-07:00';
SELECT (COUNT(CASE WHEN category = 'fiction-science-fiction' THEN podcast_id END) * 100.0 / COUNT(podcast_id)) AS percentage FROM categories;
SELECT AVG(reviews.rating) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE reviews.created_at BETWEEN '2019-01-01T00:00:00' AND '2019-12-31T23:59:59';
SELECT     SUM(CASE WHEN run_at LIKE '2021%' THEN reviews_added ELSE 0 END) / SUM(reviews_added) * 100 AS '2021_percentage',     SUM(CASE WHEN run_at LIKE '2022%' THEN reviews_added ELSE 0 END) / SUM(reviews_added) * 100 AS '2022_percentage' FROM music_platform_2.runs;
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'fiction';
SELECT reviews.rating, categories.category FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id JOIN categories ON podcasts.podcast_id = categories.podcast_id WHERE podcasts.title = 'Sitcomadon';
SELECT author_id FROM reviews WHERE podcast_id IN (SELECT podcast_id FROM podcasts WHERE itunes_id = 1516665400);
SELECT p.title FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.created_at BETWEEN '2018-08-22T11:53:16-07:00' AND '2018-11-20T11:14:20-07:00';
SELECT DISTINCT c.category FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.author_id = 'EFB34EAC8E9397C';
SELECT p.slug, p.itunes_url FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.content = 'Can''t stop listening';
SELECT reviews.created_at FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Don\'t Lie To Your Life Coach';
SELECT COUNT(DISTINCT c.category) FROM categories c JOIN reviews r ON c.podcast_id = r.podcast_id WHERE r.created_at BETWEEN '2016-07-01T00:00:00-07:00' AND '2016-12-31T23:59:59-07:00';
SELECT AVG(r.rating) FROM reviews r JOIN categories c ON r.podcast_id = c.podcast_id WHERE c.category = 'true-crime';
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'arts';
SELECT AVG(reviews.rating) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id JOIN categories ON podcasts.podcast_id = categories.podcast_id WHERE categories.category = 'arts';
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id JOIN reviews r ON p.podcast_id = r.podcast_id WHERE c.category = 'arts' AND r.created_at LIKE '2018%';
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id JOIN reviews r ON p.podcast_id = r.podcast_id WHERE c.category = 'music' AND r.rating > 3;
SELECT p.title FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id WHERE r.content LIKE '%love%' AND c.category = 'arts' AND YEAR(r.created_at) BETWEEN 2018 AND 2019;
SELECT c.category, p.itunes_url FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id WHERE p.title = 'Scaling Global';
SELECT AVG(reviews.rating) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id JOIN categories ON podcasts.podcast_id = categories.podcast_id WHERE categories.category = 'comedy';
SELECT category FROM categories GROUP BY category ORDER BY COUNT(category) LIMIT 1;
SELECT podcast_id, title, content, rating, author_id, created_at, LENGTH(content) AS length FROM reviews ORDER BY length DESC LIMIT 1;
SELECT p.title FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.title = 'Hosts bring the show down';
SELECT title FROM podcasts WHERE podcast_id IN (SELECT podcast_id FROM categories WHERE category = 'music') ORDER BY LENGTH(title) DESC LIMIT 1;
SELECT c.category FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id WHERE p.title LIKE '%jessica%';
SELECT c.category FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id WHERE p.title = 'Moist Boys';
SELECT r.title, r.content, r.rating, c.category FROM reviews r JOIN categories c ON r.podcast_id = c.podcast_id WHERE r.rating = 2;
SELECT DISTINCT p.title FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.title = 'Inspired & On Fire!';
SELECT p.title, c.category FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id WHERE r.content LIKE '%Absolutely fantastic%';
SELECT c.category FROM categories c JOIN reviews r ON c.podcast_id = r.podcast_id GROUP BY c.category ORDER BY COUNT(r.podcast_id) DESC LIMIT 1;
SELECT p.itunes_url FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'fiction-science-fiction';
SELECT reviews.content FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Stuff You Should Know' ORDER BY reviews.created_at ASC LIMIT 1;
SELECT COUNT(*) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Planet Money';
SELECT AVG(rating) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'crime-junkie';
Error: 第 7979 个样本有 2 个SQL。
SELECT content FROM reviews WHERE title = 'really interesting!' AND created_at = '2018-04-24T12:05:16-07:00';
SELECT c.category FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id WHERE p.title = 'Scaling Global';
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'arts-performing-arts';
SELECT COUNT(*) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Scaling Global';
SELECT COUNT(*) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Please Excuse My Dead Aunt Sally' AND reviews.created_at LIKE '2019%';
SELECT p.title FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.author_id = 'F7E5A318989779D';
SELECT COUNT(*) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Please Excuse My Dead Aunt Sally' AND reviews.rating = 5;
SELECT AVG(rating) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Please Excuse My Dead Aunt Sally';
SELECT COUNT(*) FROM university_year WHERE num_students > 80000 AND year = 2011;
SELECT ranking_system_id FROM ranking_criteria WHERE criteria_name = 'Award';
SELECT COUNT(*) FROM university WHERE university_name LIKE '%State%';
SELECT uy.student_staff_ratio FROM university_year uy JOIN (   SELECT university_id, MAX(student_staff_ratio) as max_ratio   FROM university_year   GROUP BY university_id ) sub ON uy.university_id = sub.university_id AND uy.student_staff_ratio = sub.max_ratio ORDER BY uy.student_staff_ratio DESC LIMIT 1;
SELECT COUNT(*) FROM ranking_criteria WHERE ranking_system_id = 3;
SELECT university_id FROM university_year WHERE pct_international_students = 1 AND year BETWEEN 2011 AND 2015 GROUP BY university_id HAVING COUNT(*) = (SELECT COUNT(*) FROM (SELECT DISTINCT year FROM university_year WHERE year BETWEEN 2011 AND 2015) AS years);
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id GROUP BY c.country_name ORDER BY COUNT(u.id) DESC LIMIT 1;
SELECT u.university_name FROM (     SELECT university_id,            COUNT(DISTINCT YEAR) AS consecutive_years     FROM (         SELECT uy.university_id,                uy.year,                RANK() OVER (PARTITION BY uy.year ORDER BY uy.pct_international_students DESC) as rank         FROM university_year uy     ) ranked_years     WHERE ranked_years.rank = 1     GROUP BY university_id, ranked_years.year - COUNT(DISTINCT ranked_years.year) + 1     HAVING COUNT(DISTINCT ranked_years.year) >= 6 ) consecutive_unis JOIN university u ON u.id = consecutive_unis.university_id GROUP BY u.university_name HAVING MAX(consecutive_years) = 6;
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON rc.id = ury.ranking_criteria_id WHERE ury.year = 2014 AND rc.criteria_name = 'Publications Rank' ORDER BY ury.score DESC LIMIT 1;
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.num_students = (SELECT MIN(num_students) FROM university_year)
SELECT COUNT(*) FROM university WHERE country_id = (SELECT id FROM country WHERE country_name = 'United States of America');
SELECT u.university_name FROM university u JOIN country c ON u.country_id = c.id JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE c.country_name = 'Australia' AND rc.criteria_name = 'Citations' AND ury.year = 2016 GROUP BY u.id ORDER BY ury.score DESC LIMIT 1;
SELECT COUNT(*) FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON rc.id = ury.ranking_criteria_id WHERE rc.criteria_name = 'Award' AND ury.score = 0 AND ury.year BETWEEN 2005 AND 2015;
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id WHERE u.university_name = 'University of Oxford';
SELECT COUNT(*) FROM university AS u JOIN university_ranking_year AS ury ON u.id = ury.university_id JOIN ranking_criteria AS rc ON rc.id = ury.ranking_criteria_id WHERE u.university_name = 'Yale University' AND ury.score >= 10 AND rc.criteria_name = 'Quality of Education Rank';
SELECT rc.criteria_name FROM ranking_criteria rc JOIN ranking_system rs ON rc.ranking_system_id = rs.id WHERE rs.system_name = 'Center for World University Rankings';
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.num_students >= 50000 AND uy.year = 2012;
SELECT DISTINCT c.country_name FROM country c JOIN university u ON c.id = u.country_id JOIN university_year uy ON u.id = uy.university_id WHERE uy.year BETWEEN 2011 AND 2016 AND uy.pct_international_students > 50;
SELECT COUNT(u.id) AS total_universities,        COUNT(CASE WHEN c.country_name = 'United States of America' THEN u.id END) AS usa_universities FROM university u JOIN country c ON u.country_id = c.id JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2016 AND (uy.pct_female_students * uy.num_students / 100) >= 20000;
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = (SELECT MAX(year) FROM university_year) ORDER BY (uy.num_students * uy.pct_international_students / 100) DESC LIMIT 5;
SELECT university_id FROM university_year WHERE student_staff_ratio = (SELECT MAX(student_staff_ratio) FROM university_year);
SELECT year FROM university_year WHERE num_students = (SELECT MIN(num_students) FROM university_year);
SELECT AVG(pct_female_students) FROM university_year;
SELECT     university_year.num_students,     (university_year.pct_international_students * university_year.num_students) / 100 AS num_international_students FROM     university_year WHERE     university_year.university_id = 20 AND     university_year.year = 2013;
SELECT id FROM university WHERE university_name = 'Harvard University';
SELECT university_id FROM university_ranking_year WHERE year = 2011 AND score = 100;
SELECT rs.system_name FROM ranking_system rs JOIN ranking_criteria rc ON rs.id = rc.ranking_system_id WHERE rc.criteria_name = 'Quality of Education Rank';
SELECT uy.student_staff_ratio FROM university_year uy JOIN university u ON uy.university_id = u.id WHERE u.university_name = 'Harvard University' AND uy.year = 2012;
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id WHERE u.id = 112;
SELECT SUM(u_y.num_students) FROM university u JOIN university_year u_y ON u.id = u_y.university_id JOIN country c ON u.country_id = c.id WHERE c.country_name = 'Sweden';
SELECT ury.ranking_criteria_id FROM university_year uy JOIN university u ON uy.university_id = u.id JOIN university_ranking_year ury ON uy.university_id = ury.university_id AND uy.year = ury.year WHERE u.university_name = 'Brown University' AND uy.year = 2014;
SELECT university_name FROM university WHERE country_id = (SELECT id FROM country WHERE country_name = 'Spain');
SELECT rc.criteria_name FROM ranking_criteria rc JOIN university_ranking_year ury ON rc.id = ury.ranking_criteria_id WHERE ury.university_id = 32 AND ury.year = 2015;
SELECT AVG(ur.score) FROM university u JOIN country c ON u.country_id = c.id JOIN university_ranking_year ur ON u.id = ur.university_id WHERE c.country_name = 'Brazil';
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2014 ORDER BY uy.num_students DESC LIMIT 1;
SELECT ury.score, uy.num_students * uy.pct_international_students / 100 AS num_international_students FROM university_ranking_year ury JOIN university_year uy ON ury.university_id = uy.university_id WHERE ury.university_id = 100 AND ury.year = 2015;
SELECT uy.num_students FROM university_year uy JOIN university u ON uy.university_id = u.id JOIN university_ranking_year ury ON u.id = ury.university_id WHERE ury.year = 2013 AND ury.score = 98;
SELECT rc.criteria_name FROM ranking_criteria rc JOIN ranking_system rs ON rc.ranking_system_id = rs.id WHERE rs.system_name = 'Center for World University Rankings';
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id JOIN university_year uy ON u.id = uy.university_id WHERE uy.num_students > (SELECT AVG(uy2.num_students) * 0.98 FROM university_year uy2 WHERE uy2.year = 2013) AND uy.year = 2013;
SELECT     (SUM((u_year.num_students * u_year.pct_international_students) / 100)) / SUM(u_year.num_students) * 100 AS 'pct_international_students' FROM     university u JOIN     university_year u_year ON u.id = u_year.university_id JOIN     university_ranking_year u_rank ON u.id = u_rank.university_id WHERE     u_year.year = 2015     AND u_rank.year = 2015     AND u_rank.score < 80;
SELECT SUM(num_students) FROM university_year WHERE year = 2011;
SELECT SUM(u.num_students * u.pct_female_students / 100) FROM university_year u WHERE u.year = 2011;
SELECT student_staff_ratio FROM university_year WHERE student_staff_ratio = (SELECT MAX(student_staff_ratio) FROM university_year);
SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1;
SELECT COUNT(*) FROM university_year JOIN university ON university.id = university_year.university_id WHERE university_year.num_students > 50000 AND university_year.year = 2011 AND university_year.pct_international_students > 10;
SELECT university_id FROM university_year WHERE year = 2012 ORDER BY pct_female_students DESC LIMIT 1;
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id WHERE ury.year = 2012 AND ury.score = (SELECT MAX(score) FROM university_ranking_year WHERE year = 2012)
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2011 GROUP BY u.university_name ORDER BY SUM(uy.num_students) DESC LIMIT 1;
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON rc.id = ury.ranking_criteria_id WHERE rc.criteria_name = 'Teaching' GROUP BY u.university_name ORDER BY MAX(ury.score) DESC LIMIT 1;
SELECT pct_international_students FROM university_year WHERE university_id = (     SELECT id     FROM university     WHERE university_name = 'Harvard University' ) AND year = 2011;
SELECT (university_year.num_students * university_year.pct_female_students / 100) FROM university_year JOIN university ON university.id = university_year.university_id WHERE university.university_name = 'Stanford University' AND university_year.year = 2011;
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id WHERE u.university_name = 'Harvard University';
SELECT rs.system_name FROM ranking_system rs JOIN ranking_criteria rc ON rs.id = rc.ranking_system_id WHERE rc.criteria_name = 'Teaching'
SELECT u.university_name FROM university u JOIN country c ON u.country_id = c.id JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE c.country_name = 'Argentina' GROUP BY u.university_name ORDER BY SUM(ury.score) DESC LIMIT 1;
SELECT COUNT(*) FROM university WHERE country_id = (SELECT id FROM country WHERE country_name = 'Argentina');
SELECT university_name FROM university JOIN university_year ON university.id = university_year.university_id WHERE year = 2011 AND num_students > 100000;
SELECT COUNT(*) FROM ranking_criteria WHERE ranking_system_id = (     SELECT id     FROM ranking_system     WHERE system_name = 'Center for World University Rankings' );
SELECT SUM(u_y.num_students) FROM university_year u_y JOIN university_ranking_year u_r_y ON u_y.university_id = u_r_y.university_id AND u_y.year = u_r_y.year WHERE u_r_y.score = 90 AND u_y.year = 2011;
SELECT u.university_name, SUM((uy.pct_international_students * uy.num_students) / 100) as total_international_students FROM university u JOIN university_year uy ON u.id = uy.university_id GROUP BY u.university_name ORDER BY total_international_students DESC LIMIT 3;
SELECT     (SELECT SUM(u_y.num_students) FROM university_year u_y WHERE u_y.university_id = (         SELECT u.id FROM university u WHERE u.university_name = 'Harvard University'     ) AND u_y.year BETWEEN 2011 AND 2012) -     (SELECT SUM((u_y.num_students * u_y.pct_international_students) / 100) FROM university_year u_y WHERE u_y.university_id = (         SELECT u.id FROM university u WHERE u.university_name = 'Harvard University'     ) AND u_y.year BETWEEN 2011 AND 2012)
SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 30000;
SELECT country_id FROM university WHERE university_name = 'University of Tokyo';
SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings';
SELECT id FROM ranking_criteria WHERE criteria_name = 'Publications Rank';
SELECT COUNT(*) FROM university_year WHERE pct_international_students > 30 AND year = 2013;
SELECT COUNT(*) FROM university_ranking_year WHERE year = 2011 AND ranking_criteria_id = 6 AND score < 50;
SELECT num_students FROM university_year WHERE university_id = (     SELECT id     FROM university     WHERE university_name = 'Yale University' ) AND year = 2016;
SELECT university_name FROM university WHERE country_id = (SELECT id FROM country WHERE country_name = 'Denmark');
SELECT (uy.num_students / uy.student_staff_ratio) AS num_staff FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE u.university_name = 'University of Auckland' AND uy.year = 2015;
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id WHERE u.university_name = 'University of São Paulo';
SELECT (num_students * pct_international_students) / 100 AS international_students FROM university_year JOIN university ON university.id = university_year.university_id WHERE university.university_name = 'Harvard University' AND year = 2012;
SELECT (university_year.num_students * university_year.pct_female_students / 100) AS num_female_students FROM university_year JOIN university ON university.id = university_year.university_id WHERE university.university_name = 'Arizona State University' AND university_year.year = 2014;
SELECT u.university_name, SUM(ur.score) as total_score FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id GROUP BY u.id ORDER BY total_score DESC LIMIT 1;
SELECT rc.criteria_name FROM ranking_criteria rc JOIN ranking_system rs ON rc.ranking_system_id = rs.id WHERE rs.system_name = 'Shanghai Ranking';
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON rc.id = ury.ranking_criteria_id WHERE ury.year = 2011 AND rc.criteria_name = 'Teaching' GROUP BY u.university_name ORDER BY MIN(ury.score) ASC LIMIT 1;
SELECT rs.system_name FROM ranking_system rs JOIN ranking_criteria rc ON rs.id = rc.ranking_system_id WHERE rc.criteria_name = 'Quality of Education Rank';
WITH international_scores AS (   SELECT     u.university_name,     ury.score   FROM     university u   JOIN     university_ranking_year ury ON u.id = ury.university_id   JOIN     ranking_criteria rc ON ury.ranking_criteria_id = rc.id   WHERE     rc.criteria_name = 'International' AND     ury.year = 2016 AND     ury.score > 80 ), total_universities AS (   SELECT COUNT(*) AS total   FROM university ), international_universities AS (   SELECT COUNT(DISTINCT u.id) AS cnt   FROM university u   JOIN international_scores iscores ON u.id = iscores.university_id ) SELECT   (iu.cnt::float / tu.total * 100) AS percentage_above_80,   u.university_name AS university_with_highest_score FROM   international_scores iscores JOIN   university u ON iscores.university_name = u.university_name JOIN   total_universities tu JOIN   international_universities iu WHERE   iscores.score = (SELECT MAX(score) FROM international_scores) GROUP BY   iu.cnt, tu.total, iscores.score, u.university_name ORDER BY   iscores.score DESC LIMIT 1;
SELECT rc.criteria_name, ury.score FROM university u JOIN university_year uy ON u.id = uy.university_id JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON rc.id = ury.ranking_criteria_id WHERE u.university_name = 'Harvard University' AND uy.year = 2005;
SELECT AVG(score) FROM university_ranking_year JOIN ranking_criteria ON university_ranking_year.ranking_criteria_id = ranking_criteria.id WHERE ranking_criteria.criteria_name = 'Alumni' AND university_ranking_year.year = 2008;
SELECT u.university_name, c.country_name FROM university u JOIN country c ON u.country_id = c.id JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2015 ORDER BY (uy.num_students * uy.pct_international_students) / 100 DESC LIMIT 1;
SELECT num_students FROM university_year WHERE university_id = 1 AND year = 2011;
SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1;
SELECT university_id FROM university_year WHERE year = 2011 AND student_staff_ratio > 15;
SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 20000 AND pct_international_students > 25;
SELECT university_id FROM university_year WHERE year = 2011 ORDER BY pct_female_students DESC LIMIT 3;
SELECT year FROM university_year WHERE university_id = 1 ORDER BY num_students DESC LIMIT 1;
SELECT num_students FROM university_year JOIN university ON university_year.university_id = university.id WHERE university.university_name = 'Harvard University' AND university_year.year = 2011;
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2011 ORDER BY (uy.num_students * uy.pct_international_students) / 100 DESC LIMIT 1;
SELECT university_name FROM university WHERE country_id = (SELECT id FROM country WHERE country_name = 'Australia');
SELECT COUNT(*) FROM university u JOIN country c ON u.country_id = c.id JOIN university_year uy ON u.id = uy.university_id WHERE c.country_name = 'Australia' AND uy.year = 2011 AND uy.num_students > 15000;
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id WHERE u.university_name = 'Harvard University';
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE rc.criteria_name = 'Teaching' AND ury.year = 2011 GROUP BY u.id ORDER BY ury.score DESC LIMIT 1;
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON rc.id = ury.ranking_criteria_id WHERE ury.year = 2011 AND rc.criteria_name = 'Teaching' AND ury.score > 90;
SELECT COUNT(*) FROM university u JOIN country c ON u.country_id = c.id JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE c.country_name = 'United States of America' AND rc.criteria_name = 'Teaching' AND ury.year = 2011 AND ury.score > 90;
SELECT rc.criteria_name FROM ranking_criteria rc JOIN university_ranking_year ury ON rc.id = ury.ranking_criteria_id JOIN university u ON u.id = ury.university_id WHERE u.university_name = 'Harvard University' AND ury.year = 2011;
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON rc.id = ury.ranking_criteria_id WHERE ury.year = 2011 AND ury.score = 98 AND rc.criteria_name = 'Teaching';
SELECT u.university_name FROM university u JOIN country c ON u.country_id = c.id JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE c.country_name = 'United States of America' AND rc.criteria_name = 'Teaching' AND ury.year = 2011 AND ury.score < 60;
SELECT COUNT(*) FROM university u JOIN country c ON u.country_id = c.id JOIN university_year uy ON u.id = uy.university_id WHERE c.country_name = 'Australia' AND uy.year = 2011 AND uy.student_staff_ratio > 15;
SELECT (university_year.num_students * university_year.pct_female_students / 100) FROM university_year JOIN university ON university.id = university_year.university_id WHERE university.university_name = 'Stanford University' AND university_year.year = 2011;
SELECT     (COUNT(CASE WHEN c.country_name = 'United States of America' THEN u.id ELSE NULL END) * 100.0 / COUNT(u.id)) AS percentage FROM     university u JOIN     country c ON u.country_id = c.id JOIN     university_ranking_year ury ON u.id = ury.university_id JOIN     ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE     ury.year = 2011 AND rc.criteria_name = 'Teaching' AND ury.score > 90;
SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings';
SELECT c.id, c.country_name FROM country c JOIN university u ON c.id = u.country_id WHERE u.university_name = 'University of Veterinary Medicine Vienna';
SELECT id FROM ranking_criteria WHERE criteria_name = 'Citations Rank';
SELECT id FROM university WHERE university_name = 'University of Orléans';
SELECT num_students FROM university_year WHERE university_id = 268 AND year = 2013;
SELECT country_name FROM country WHERE id = 66;
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id WHERE u.university_name = 'McMaster University';
SELECT COUNT(*) FROM university WHERE country_id = (SELECT id FROM country WHERE country_name = 'Turkey');
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2011 GROUP BY u.university_name ORDER BY uy.num_students DESC LIMIT 1;
SELECT num_students FROM university_year JOIN university ON university_year.university_id = university.id WHERE university.university_name = 'University of Michigan' AND university_year.year = 2011;
SELECT ury.score FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE u.university_name = 'Chosun University' AND ury.year = 2015 AND rc.criteria_name = 'Influence Rank';
SELECT uy.pct_international_students FROM university_year uy JOIN university u ON uy.university_id = u.id WHERE u.university_name = 'University of Oslo' AND uy.year = 2015;
SELECT rc.criteria_name FROM ranking_criteria rc JOIN university_ranking_year ury ON rc.id = ury.ranking_criteria_id JOIN university u ON u.id = ury.university_id WHERE u.university_name = 'University of Southampton' AND ury.year = 2015 GROUP BY rc.criteria_name ORDER BY ury.score DESC LIMIT 1;
SELECT rs.system_name FROM ranking_system rs JOIN ranking_criteria rc ON rs.id = rc.ranking_system_id WHERE rc.criteria_name = 'Total Shanghai';
SELECT     (uy.num_students * uy.pct_female_students / 100) AS num_female_students FROM     university u JOIN     university_year uy ON u.id = uy.university_id WHERE     u.university_name = 'Pierre and Marie Curie University' AND uy.year = 2015;
SELECT ur.year, ur.score FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE u.university_name = 'University of Florida' AND ur.year = 2014 AND rc.criteria_name = 'N and S';
SELECT (university_year.num_students * university_year.pct_international_students) / 100 AS num_international_students FROM university_year JOIN university ON university.id = university_year.university_id WHERE university.university_name = 'University of Wisconsin-Madison' AND university_year.year = 2013;
SELECT university_name FROM university JOIN university_year ON university.id = university_year.university_id WHERE year = 2015 ORDER BY num_students ASC LIMIT 1;
SELECT     (SELECT SUM(num_students)      FROM university_year      WHERE university_id = (          SELECT id          FROM university          WHERE university_name = 'University of Ottawa'      ) AND year = 2013     ) /     (SELECT SUM(num_students)      FROM university_year      WHERE university_id = (          SELECT id          FROM university          WHERE university_name = 'Joseph Fourier University'      ) AND year = 2013     ) AS times_more
Error: 第 8107 个样本有 2 个SQL。
SELECT AVG(num_students) FROM university_year WHERE year = 2012;
SELECT score FROM university_ranking_year WHERE university_id = 68 AND year = 2015;
SELECT id FROM country WHERE country_name = 'Cyprus';
SELECT university_id FROM university_year WHERE pct_international_students = (SELECT MAX(pct_international_students) FROM university_year);
SELECT criteria_name FROM ranking_criteria WHERE id = 13;
SELECT AVG(score) FROM university_ranking_year WHERE year = 2012;
SELECT SUM((university_year.pct_female_students * university_year.num_students) / 100) FROM university_year WHERE university_year.university_id = 40 AND university_year.year BETWEEN 2011 AND 2013;
SELECT AVG(score) FROM university_ranking_year WHERE university_id = 79 AND year BETWEEN 2013 AND 2015;
SELECT student_staff_ratio FROM university_year WHERE university_id = 35;
SELECT ury.score FROM university_year uy JOIN university u ON uy.university_id = u.id JOIN university_ranking_year ury ON uy.university_id = ury.university_id AND uy.year = ury.year WHERE uy.year = 2011 GROUP BY uy.university_id ORDER BY uy.num_students DESC LIMIT 1;
SELECT rc.criteria_name FROM ranking_criteria rc JOIN university_ranking_year ury ON rc.id = ury.ranking_criteria_id JOIN university u ON u.id = ury.university_id WHERE u.university_name = 'Harvard University' AND ury.score = 100;
SELECT university.university_name, university.id FROM university JOIN country ON university.country_id = country.id WHERE country.country_name = 'Turkey';
SELECT COUNT(*) FROM ranking_criteria WHERE ranking_system_id = (     SELECT id     FROM ranking_system     WHERE system_name = 'Shanghai Ranking' );
SELECT u.university_name, ury.score FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id WHERE u.id = 124;
SELECT (T1.num_students * T1.pct_female_students) / 100 AS num_female_students FROM university_year AS T1 JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'University of Pennsylvania' AND T1.year = 2011;
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id WHERE ury.score < 50 GROUP BY u.university_name;
SELECT COUNT(*) FROM university WHERE country_id IN (SELECT id FROM country WHERE country_name = 'Japan');
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.num_students - (uy.num_students * uy.pct_female_students / 100) = (     SELECT MAX(uy2.num_students - (uy2.num_students * uy2.pct_female_students / 100))     FROM university_year uy2 )
SELECT DISTINCT c.country_name FROM country c JOIN university u ON c.id = u.country_id JOIN university_ranking_year ury ON u.id = ury.university_id WHERE ury.year = 2016 AND ury.score <= 70;
SELECT     (uy.num_students - (uy.num_students * uy.pct_female_students / 100)) AS num_male_students FROM     university_year uy JOIN     university u ON uy.university_id = u.id WHERE     u.university_name = 'Emory University' AND uy.year = 2011;
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id WHERE u.university_name = 'Johns Hopkins University';
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.num_students BETWEEN 400 AND 1000;
SELECT ur.year FROM university_ranking_year ur JOIN university u ON ur.university_id = u.id WHERE u.university_name = 'Brown University' GROUP BY ur.year ORDER BY AVG(ur.score) DESC LIMIT 1;
SELECT AVG(score) FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id WHERE u.university_name = 'Emory University' AND ury.year BETWEEN 2011 AND 2016;
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2015 ORDER BY uy.num_students DESC LIMIT 1;
SELECT c.country_name,        uyr.num_students * uyr.pct_female_students / 100 AS num_female_students FROM university u JOIN country c ON u.country_id = c.id JOIN university_year uyr ON u.id = uyr.university_id WHERE u.id = 23 AND uyr.year = 2011;
SELECT COUNT(*) FROM university_ranking_year ury JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE rc.criteria_name = 'Teaching' AND ury.score = 40;
SELECT SUM(u_y.num_students * u_y.pct_female_students) / (100 * SUM(u_y.num_students)) AS pct_female_students FROM university_year u_y JOIN university u ON u.id = u_y.university_id JOIN country c ON c.id = u.country_id WHERE c.country_name = 'United States of America' AND u_y.year = 2016;
SELECT     SUM(t.num_students) - SUM(CAST(t.num_students * t.pct_international_students AS REAL) / 100) AS diff FROM     (SELECT         uy.num_students,         uy.pct_international_students     FROM         university u     INNER JOIN         university_year uy ON u.id = uy.university_id     WHERE         u.university_name = 'University of Tokyo' AND         uy.year BETWEEN 2011 AND 2014) t
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id WHERE ury.year = 2015 AND ury.score < (SELECT AVG(score) * 0.28 FROM university_ranking_year WHERE year = 2015)
SELECT SUM(units) FROM sales_in_weather WHERE store_nbr = 1 AND item_nbr = 9 AND date = '2012-01-01';
SELECT SUM(units) FROM sales_in_weather WHERE store_nbr = 1 AND item_nbr = 9 AND SUBSTR(date, 1, 7) = '2012-01';
SELECT item_nbr FROM sales_in_weather WHERE date = '2012-01-01' AND store_nbr = 1 ORDER BY units DESC LIMIT 1;
SELECT tmax - tmin AS temperature_range FROM weather WHERE station_nbr = 1 AND date = '2012-01-01';
Error: 第 8142 个样本有 2 个SQL。
SELECT     date FROM     weather WHERE     station_nbr = 1 AND (date = '2012-01-01' OR date = '2012-01-02') ORDER BY     avgspeed DESC LIMIT 1;
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.item_nbr = 5 AND sw.store_nbr = 3 AND SUBSTR(sw.date, 1, 4) = '2012' AND w.depart < 0;
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.item_nbr = 5 AND sw.store_nbr = 3 AND SUBSTR(sw.date, 1, 4) = '2012' AND w.tmax = (SELECT MAX(tmax) FROM weather WHERE SUBSTR(date, 1, 4) = '2012')
SELECT w.dewpoint FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.item_nbr = 5 AND s.store_nbr = 3 AND SUBSTR(s.date, 1, 4) = '2012' ORDER BY s.units DESC LIMIT 1;
SELECT COUNT(DISTINCT sw.date) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.store_nbr = 3 AND sw.item_nbr = 5 AND sw.units > 100 AND w.tmax > 90;
SELECT SUM(units) FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.item_nbr = 5 AND s.store_nbr = 3 GROUP BY s.date ORDER BY (w.tmax - w.tmin) DESC LIMIT 1;
SELECT w.date FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.store_nbr = 3 AND s.item_nbr = 5 AND s.units > 100 ORDER BY (w.tmax - w.tmin) DESC LIMIT 1;
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.item_nbr = 5 AND sw.store_nbr = 3 AND w.preciptotal > 0.05;
SELECT sw.date FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.store_nbr = 3 AND sw.item_nbr = 5 AND sw.units > 100 AND w.avgspeed > 10;
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.store_nbr = 3 AND SUBSTRING(sw.date, 1, 4) = '2012' GROUP BY sw.date ORDER BY w.tmax DESC LIMIT 1;
SELECT     (SELECT SUM(units)      FROM sales_in_weather      WHERE store_nbr = 5 AND item_nbr = 16 AND SUBSTR(date, 1, 4) = '2012'      AND date = (SELECT date                  FROM weather                  WHERE SUBSTR(date, 1, 4) = '2012'                  ORDER BY tmax DESC                  LIMIT 1)     ) -     (SELECT SUM(units)      FROM sales_in_weather      WHERE store_nbr = 10 AND item_nbr = 16 AND SUBSTR(date, 1, 4) = '2012'      AND date = (SELECT date                  FROM weather                  WHERE SUBSTR(date, 1, 4) = '2012'                  ORDER BY tmax DESC                  LIMIT 1)     )
SELECT siw.item_nbr FROM sales_in_weather siw JOIN relation r ON siw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND siw.date = w.date WHERE siw.store_nbr = 3 AND SUBSTRING(siw.date, 1, 4) = '2012' GROUP BY siw.item_nbr ORDER BY w.tmax DESC, siw.units DESC LIMIT 1;
SELECT COUNT(*) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.store_nbr = 3 AND sw.units = 0 AND SUBSTR(sw.date, 1, 4) = '2012' AND w.tmax = (SELECT MAX(tmax) FROM weather WHERE SUBSTR(date, 1, 4) = '2012')
SELECT AVG(s.units) FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.store_nbr = 3 AND s.item_nbr = 5 AND w.tmax > 90;
WITH max_temp_day AS (   SELECT station_nbr, date   FROM weather   WHERE strftime('%Y', date) = '2012'   GROUP BY station_nbr   ORDER BY tmax DESC   LIMIT 1 ), joined_tables AS (   SELECT sw.date, sw.store_nbr, sw.item_nbr, sw.units, w.tmax   FROM sales_in_weather sw   JOIN relation r ON sw.store_nbr = r.store_nbr   JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date   WHERE sw.store_nbr = 3 AND strftime('%Y', sw.date) = '2012' ), item_5_sales AS (   SELECT SUM(units) AS item_5_units   FROM joined_tables   WHERE item_nbr = 5 AND date = (SELECT date FROM max_temp_day) ), total_sales AS (   SELECT SUM(units) AS total_units   FROM joined_tables   WHERE date = (SELECT date FROM max_temp_day) ) SELECT CAST(item_5_units AS REAL) / total_units * 100 AS percentage FROM item_5_sales, total_sales;
SELECT item_nbr FROM sales_in_weather WHERE store_nbr = 1 AND date = '2012-01-01' ORDER BY units DESC LIMIT 1;
SELECT SUM(units) FROM sales_in_weather WHERE item_nbr = 9 AND store_nbr = 11 AND date = '2012-12-07';
SELECT tavg FROM weather WHERE station_nbr = 20 AND date = '2014-10-17';
SELECT resultspeed FROM weather WHERE station_nbr = 9 AND date = '2014-01-15';
SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1;
SELECT station_nbr FROM relation WHERE store_nbr = 20;
SELECT (tmax - tmin) as temperature_range FROM sales_in_weather JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr JOIN weather ON relation.station_nbr = weather.station_nbr AND sales_in_weather.date = weather.date WHERE sales_in_weather.store_nbr = 7 AND sales_in_weather.date = '2014-04-28';
SELECT COUNT(DISTINCT r.store_nbr) FROM relation r JOIN (   SELECT station_nbr   FROM weather   WHERE depart = (     SELECT MAX(depart)     FROM weather   ) ) w ON r.station_nbr = w.station_nbr;
SELECT weather.dewpoint FROM weather JOIN relation ON weather.station_nbr = relation.station_nbr WHERE relation.store_nbr = 15 AND weather.date = '2012-02-18';
SELECT w.wetbulb FROM weather AS w JOIN relation AS r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 6 AND w.date = '2012-02-15';
SELECT COUNT(DISTINCT T1.store_nbr) FROM relation AS T1 JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.avgspeed = (SELECT MAX(avgspeed) FROM weather)
SELECT w.tmax FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 21 AND w.date = '2012-11-09';
SELECT w.sunrise FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 30 AND w.date = '2014-02-21';
SELECT COUNT(store_nbr) FROM relation WHERE station_nbr = (     SELECT station_nbr     FROM weather     WHERE snowfall = (         SELECT MAX(snowfall)         FROM weather     ) );
SELECT w.codesum FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 2 AND w.date = '2013-02-12';
SELECT w.sealevel FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 19 AND w.date = '2013-02-24';
SELECT w.preciptotal FROM weather AS w JOIN relation AS r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 2 AND w.date = '2012-12-25';
SELECT w.stnpressure FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 12 AND w.date = '2012-05-15';
SELECT     (SUM(sales.units) * 100.0 / SUM(total_sales.units)) AS percentage FROM     sales_in_weather sales JOIN     relation r ON sales.store_nbr = r.store_nbr JOIN     weather w ON r.station_nbr = w.station_nbr AND sales.date = w.date LEFT JOIN     sales_in_weather total_sales ON total_sales.date = sales.date AND w.station_nbr = r.station_nbr WHERE     sales.store_nbr = 10 AND     sales.date = '2014-10-31' GROUP BY     w.station_nbr, sales.date
SELECT ((w2.tavg - w1.tavg) / w1.tavg) * 100 AS increase_percentage FROM (   SELECT tavg   FROM weather   WHERE date = '2012-02-02' AND station_nbr IN (     SELECT station_nbr     FROM relation     WHERE store_nbr = 9   ) ) w1, (   SELECT tavg   FROM weather   WHERE date = '2012-02-03' AND station_nbr IN (     SELECT station_nbr     FROM relation     WHERE store_nbr = 9   ) ) w2;
SELECT item_nbr FROM sales_in_weather WHERE store_nbr = 1 AND date = '2012-01-01' ORDER BY units DESC LIMIT 1;
SELECT COUNT(DISTINCT r.store_nbr) FROM relation r WHERE r.station_nbr = 12;
SELECT COUNT(item_nbr) FROM sales_in_weather WHERE store_nbr = 2 AND units = 0 AND date = '2012-01-01';
SELECT date FROM weather WHERE station_nbr = 1 AND SUBSTR(date, 1, 4) BETWEEN '2012' AND '2014' ORDER BY tmax DESC LIMIT 1;
SELECT T2.station_nbr, COUNT(T1.store_nbr) AS store_count FROM relation AS T1 JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr GROUP BY T2.station_nbr ORDER BY store_count DESC LIMIT 1;
SELECT station_nbr, COUNT(date) AS num_days_below_normal FROM weather WHERE SUBSTRING(date, 1, 4) = '2014' AND SUBSTRING(date, 6, 2) = '03' AND depart < 0 GROUP BY station_nbr ORDER BY num_days_below_normal DESC LIMIT 1;
SELECT r.station_nbr FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr WHERE s.item_nbr = 9 GROUP BY r.station_nbr ORDER BY SUM(s.units) DESC LIMIT 1;
SELECT COUNT(DISTINCT r.store_nbr) FROM relation r JOIN weather w ON r.station_nbr = w.station_nbr WHERE w.avgspeed = (SELECT MAX(avgspeed) FROM weather);
SELECT s.store_nbr FROM sales_in_weather AS s JOIN relation AS r ON s.store_nbr = r.store_nbr WHERE r.station_nbr = 14 AND SUBSTRING(s.date, 1, 7) = '2014-02' AND s.item_nbr = 44 AND s.units >= 300 GROUP BY s.store_nbr;
SELECT item_nbr, SUM(units) as total_units FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON s.date = w.date AND r.station_nbr = w.station_nbr WHERE SUBSTR(s.date, 1, 7) = '2013-06' AND w.codesum LIKE '%RA%' AND w.station_nbr = 9 GROUP BY item_nbr ORDER BY total_units DESC LIMIT 1;
SELECT T3.station_nbr FROM sales_in_weather AS T1 JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 5 GROUP BY T3.station_nbr ORDER BY SUM(T1.units) DESC LIMIT 1;
SELECT MIN(w.sunrise) FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE SUBSTR(w.date, 1, 7) = '2012-02' GROUP BY w.station_nbr HAVING COUNT(r.store_nbr) = 1;
SELECT s.store_nbr FROM sales_in_weather AS sw JOIN relation AS r ON sw.store_nbr = r.store_nbr WHERE sw.item_nbr = 45 AND r.station_nbr = 17 AND SUBSTR(sw.date, 1, 7) = '2012-10' GROUP BY s.store_nbr ORDER BY SUM(sw.units) DESC LIMIT 1;
SELECT s.item_nbr FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE w.snowfall = (SELECT MAX(snowfall) FROM weather)
SELECT r.station_nbr, s.date, s.item_nbr, SUM(s.units) as total_units FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr GROUP BY r.station_nbr, s.date, s.item_nbr ORDER BY total_units DESC LIMIT 3;
SELECT COUNT(DISTINCT r.store_nbr) FROM relation r JOIN weather w ON r.station_nbr = w.station_nbr WHERE w.heat = (SELECT MAX(heat) FROM weather);
SELECT w.tmin FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE w.date = '2014-02-08' AND r.store_nbr = 29;
SELECT COUNT(DISTINCT w.station_nbr) FROM relation r JOIN weather w ON r.station_nbr = w.station_nbr AND w.date = '2014-02-18' WHERE (     SELECT COUNT(r2.store_nbr)     FROM relation r2     WHERE r2.station_nbr = r.station_nbr ) = 3 AND w.stnpressure < 30;
WITH station_store_count AS (   SELECT station_nbr, COUNT(store_nbr) as count   FROM relation   GROUP BY station_nbr ), max_station AS (   SELECT station_nbr   FROM station_store_count   WHERE count = (     SELECT MAX(count)     FROM station_store_count   ) ), feb_2012_temp AS (   SELECT tmax   FROM weather   WHERE station_nbr IN (     SELECT station_nbr     FROM max_station   ) AND SUBSTRING(date, 1, 7) = '2012-02' ) SELECT AVG(tmax) as avg_tmax FROM feb_2012_temp
SELECT     (SUM(CASE WHEN s.store_nbr = 10 THEN sw.units ELSE 0 END) * 100 / SUM(sw.units)) AS percentage FROM     sales_in_weather sw JOIN     relation r ON sw.store_nbr = r.store_nbr JOIN     weather w ON sw.date = w.date AND r.station_nbr = w.station_nbr WHERE     w.station_nbr = 12     AND sw.item_nbr = 5     AND SUBSTR(sw.date, 1, 4) = '2014';
SELECT MAX(avgspeed) FROM weather;
SELECT COUNT(*) FROM `sales_in_weather.weather` WHERE `snowfall` > 5;
SELECT COUNT(*) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE w.sunrise < TIME('5:00:00');
SELECT MIN(dewpoint) FROM weather;
SELECT tmax, tmin FROM weather WHERE station_nbr = 1 AND date = '2012-01-15';
SELECT COUNT(DISTINCT r.station_nbr) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr WHERE sw.item_nbr = 5 AND SUBSTRING(sw.date, 1, 7) = '2014-01';
SELECT MIN(tmin) FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.store_nbr = 16 AND SUBSTRING(s.date, 1, 7) = '2012-01';
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.store_nbr = 7 AND sw.item_nbr = 7 AND w.snowfall < 5;
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.store_nbr = 9 AND w.snowfall IS NOT NULL AND w.snowfall <> 0;
SELECT r.station_nbr, s.item_nbr FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr WHERE s.store_nbr = 17;
SELECT DISTINCT sw.date FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.store_nbr = 35 AND w.codesum LIKE '%HZ%'
SELECT T2.sealevel, T2.avgspeed FROM relation AS T1 JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.store_nbr IN (3, 4);
SELECT item_nbr, MAX(units) FROM sales_in_weather WHERE store_nbr = 1 AND date IN (     SELECT date     FROM weather     WHERE codesum LIKE '%RA%' ) GROUP BY item_nbr ORDER BY units DESC LIMIT 1;
SELECT CAST(MAX(tmax) AS FLOAT) / MIN(tmin) AS Ratio FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.store_nbr = 11;
SELECT     (SELECT SUM(units)      FROM sales_in_weather sw      JOIN relation r ON sw.store_nbr = r.store_nbr      WHERE r.station_nbr = 1 AND SUBSTRING(sw.date, 1, 4) = '2012') -     (SELECT SUM(units)      FROM sales_in_weather sw      JOIN relation r ON sw.store_nbr = r.store_nbr      WHERE r.station_nbr = 2 AND SUBSTRING(sw.date, 1, 4) = '2012') AS difference;
SELECT     (SELECT tavg FROM weather WHERE date = '2022-09-16' AND station_nbr IN (SELECT station_nbr FROM relation WHERE store_nbr = 18)) -     (SELECT tavg FROM weather WHERE date = '2022-09-16' AND station_nbr IN (SELECT station_nbr FROM relation WHERE store_nbr = 19)) AS avg_temp_diff
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.item_nbr = 1 AND w.tavg = 83;
SELECT     (SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON w.station_nbr = r.station_nbr AND sw.date = w.date WHERE sw.item_nbr = 1 AND w.sunset = (         SELECT MIN(sunset) FROM weather     )) -     (SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON w.station_nbr = r.station_nbr AND sw.date = w.date WHERE sw.item_nbr = 1 AND w.sunset = (         SELECT MAX(sunset) FROM weather     ))
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.item_nbr = 10 AND w.tavg < (SELECT AVG(tavg) FROM weather)
SELECT     (SUM(CASE WHEN s.store_nbr = 6 THEN w.tavg ELSE 0 END) / COUNT(CASE WHEN s.store_nbr = 6 THEN w.date ELSE NULL END)) -     (SUM(CASE WHEN s.store_nbr = 7 THEN w.tavg ELSE 0 END) / COUNT(CASE WHEN s.store_nbr = 7 THEN w.date ELSE NULL END)) FROM sales_in_weather AS s JOIN relation AS r ON s.store_nbr = r.store_nbr JOIN weather AS w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE SUBSTR(s.date, 1, 7) = '2012-05'
SELECT country.Name FROM country JOIN ethnicGroup ON country.Code = ethnicGroup.Country WHERE ethnicGroup.Name = 'Polish' GROUP BY country.Name ORDER BY SUM(ethnicGroup.Percentage) ASC LIMIT 1;
SELECT c.Name FROM country c JOIN ethnicGroup eg ON c.Code = eg.Country WHERE eg.Name = 'African' AND eg.Percentage > 90;
SELECT T1.Name, T1.Percentage FROM ethnicGroup AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Singapore'
SELECT     COUNT(CASE WHEN politics.Government = 'republic' AND STRFTIME('%Y', politics.Independence) > '1970' THEN 1 END) * 100.0 / COUNT(*) AS Percentage FROM     country JOIN     politics ON country.Code = politics.Country;
SELECT T1.GDP, T2.Government FROM economy AS T1 JOIN politics AS T2 ON T1.Country = T2.Country WHERE T1.Country = 'Bosnia and Herzegovina';
SELECT country.Name, country.Population FROM country JOIN population ON country.Code = population.Country WHERE population.Population_Growth > 2 AND population.Infant_Mortality < 5;
SELECT e.Name FROM ethnicGroup e JOIN country c ON e.Country = c.Code WHERE c.Population > 10000000 ORDER BY e.Percentage DESC LIMIT 1;
SELECT c.Name, e.Name, e.Percentage FROM country AS c JOIN ethnicGroup AS e ON c.Code = e.Country WHERE c.Code = (SELECT Country FROM ethnicGroup GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1) ORDER BY e.Name;
SELECT c.Name FROM country c JOIN ethnicGroup eg ON c.Code = eg.Country WHERE eg.Percentage = 100 AND eg.Name = 'African';
SELECT p.Infant_Mortality FROM population p JOIN country c ON p.Country = c.Code JOIN ethnicGroup eg ON c.Name = eg.Country WHERE eg.Name = 'Amerindian' GROUP BY p.Country ORDER BY SUM(eg.Percentage) ASC LIMIT 1;
SELECT e.Agriculture FROM economy e JOIN country c ON e.Country = c.Code WHERE c.Area > 600000;
SELECT p.Country FROM population p JOIN politics pol ON p.Country = pol.Country WHERE pol.Government = 'republic' ORDER BY p.Population_Growth DESC LIMIT 1;
SELECT Independence FROM politics WHERE Country = 'Bulgaria'
SELECT c.Name, (e.Percentage / 100) * c.Population as Arab_Population FROM country c JOIN ethnicGroup e ON c.Code = e.Country WHERE e.Name = 'Arab'
SELECT ethnicGroup.Percentage * country.Population / 100 AS African_population FROM ethnicGroup JOIN country ON ethnicGroup.Country = country.Code WHERE ethnicGroup.Name = 'African' AND country.Name = 'Turks and Caicos Islands';
Error: 第 8233 个样本有 2 个SQL。
SELECT T1.Capital, T1.Population FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.GDP > 400000;
SELECT T1.Service * T1.GDP AS Service_of_GDP FROM economy AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Brazil'
Error: 第 8236 个样本有 2 个SQL。
SELECT country.Name, population.Population, population.Population_Growth FROM country JOIN population ON country.Code = population.Country WHERE population.Population_Growth < 0;
SELECT country.Name, population.Infant_Mortality FROM country JOIN population ON country.Code = population.Country WHERE country.Area BETWEEN 500000 AND 1000000;
SELECT country.Name, economy.GDP FROM country JOIN population ON country.Code = population.Country JOIN economy ON country.Code = economy.Country WHERE population.Population_Growth > 3;
SELECT Infant_Mortality FROM population WHERE Country = 'Ethiopia';
SELECT e.GDP * e.Industry AS Industry_GDP FROM economy e WHERE e.Country = 'Singapore'
SELECT T1.Agriculture FROM economy AS T1 JOIN country AS T2 ON T1.Country = T2.Code ORDER BY T2.Area ASC LIMIT 1;
SELECT T1.Name FROM country AS T1 JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Albanian' ORDER BY T2.Percentage DESC LIMIT 1;
SELECT COUNT(*) FROM country WHERE Code IN (     SELECT Country     FROM ethnicGroup     WHERE Name = 'African' ) AND Population > 10000000;
SELECT T1.Name FROM country AS T1 JOIN ethnicGroup AS T2 ON T1.Code = T2.Country GROUP BY T1.Name HAVING COUNT(T2.Name) > 5;
SELECT T1.Name FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC LIMIT 1;
SELECT COUNT(*) FROM country c JOIN economy e ON c.Code = e.Country WHERE c.Population > 10000000 AND e.GDP > 500000;
SELECT T1.Capital FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Inflation < 2;
SELECT T1.Name FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.Inflation ASC LIMIT 1;
SELECT COUNT(*) FROM country c JOIN economy e ON c.Code = e.Country WHERE e.Agriculture < 50 AND c.Area > 8000000;
SELECT COUNT(DISTINCT T1.Name) FROM city AS T1 JOIN located AS T2 ON T1.Name = T2.City JOIN lake AS T3 ON T3.Name = T2.Lake WHERE T3.Type = 'salt'
SELECT T1.Depth FROM lake AS T1 JOIN located AS T2 ON T1.Name = T2.Lake JOIN province AS T3 ON T3.Name = T2.Province WHERE T3.Name = 'Albania'
SELECT T3.Name FROM lake AS T1 JOIN located AS T2 ON T1.Name = T2.Lake JOIN city AS T3 ON T3.Name = T2.City ORDER BY T1.Altitude DESC LIMIT 1
SELECT COUNT(*) FROM lake JOIN geo_lake ON geo_lake.Lake = lake.Name JOIN province ON geo_lake.Country = province.Name AND geo_lake.Province = province.CapProv WHERE province.Name = 'Canary Islands' AND lake.Area > 1000000;
SELECT T1.Name FROM country AS T1 JOIN language AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1;
SELECT T1.capital FROM country AS T1 JOIN language AS T2 ON T1.code = T2.country WHERE T2.name = 'Armenian' AND T2.percentage > 90;
SELECT COUNT(DISTINCT c.Name) FROM country c JOIN language l ON c.Code = l.Country WHERE c.Population < 1000000 GROUP BY c.Name HAVING COUNT(*) > 2;
SELECT COUNT(*) FROM organization WHERE Country IN (SELECT Code FROM country WHERE Population < 1000000);
SELECT COUNT(*) FROM organization WHERE Established > '1999-01-01' AND Country IN (SELECT Country FROM economy WHERE GDP < 500000);
SELECT COUNT(*) FROM (   SELECT c.Name   FROM country c   JOIN economy e ON c.Code = e.Country   JOIN (     SELECT Country     FROM isMember     GROUP BY Country     HAVING COUNT(*) > 3   ) im ON c.Name = im.Country   WHERE e.Inflation > 5 ) as result;
SELECT COUNT(*) FROM organization WHERE Country = (     SELECT T1.Country     FROM country AS T1     JOIN ethnicGroup AS T2 ON T1.Code = T2.Country     GROUP BY T1.Country     ORDER BY COUNT(*) DESC     LIMIT 1 )
SELECT o.Name FROM organization o JOIN country c ON o.Country = c.Code JOIN language l ON c.Code = l.Country WHERE l.Name = 'Dutch';
SELECT COUNT(*) FROM organization WHERE Country IN (     SELECT Country     FROM language     WHERE Name = 'Bosnian' );
SELECT MAX(T2.Population_Growth) AS max_infant_mortality_rate FROM economy AS T1 JOIN population AS T2 ON T1.Country = T2.Country WHERE T1.Inflation < 3;
SELECT COUNT(*) FROM country c JOIN economy e ON c.Code = e.Country JOIN population p ON p.Country = c.Name WHERE e.GDP > 1000000 AND p.Population_Growth > 3;
SELECT T1.Name FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country JOIN population AS T3 ON T1.Code = T3.Country ORDER BY T2.GDP / T3.Population DESC LIMIT 1;
SELECT (SUM(l.Area) / c.Area) * 100 AS LakeCoverage FROM lake l JOIN geo_lake gl ON l.Name = gl.Lake JOIN country c ON c.Code = gl.Country GROUP BY c.Code ORDER BY LakeCoverage DESC LIMIT 1;
SELECT AVG(T2.Population_Growth) FROM (     SELECT T1.Country, COUNT(*) AS LanguageCount     FROM language AS T1     JOIN country AS T2 ON T1.Country = T2.Code     GROUP BY T1.Country     HAVING LanguageCount > 3 ) AS T1 JOIN population AS T2 ON T1.Country = T2.Country
SELECT T1.Name FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Inflation > (SELECT AVG(Inflation) * 1.3 FROM economy);
SELECT Country FROM city WHERE Name = 'Baghdad';
SELECT T2.Name FROM province AS T1 JOIN religion AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Martinique' ORDER BY T2.Percentage DESC LIMIT 1;
SELECT country.Name FROM country JOIN religion ON country.Code = religion.Country WHERE religion.Name = 'Christian' AND religion.Percentage = 41;
SELECT T1.Name FROM country AS T1 JOIN geo_river AS T2 ON T1.Code = T2.Country WHERE T2.River = 'Detroit River' GROUP BY T1.Name HAVING COUNT(*) = 1 LIMIT 2;
SELECT T1.Name AS Country1, T2.Name AS Country2 FROM country AS T1 JOIN borders AS T3 ON T1.Code = T3.Country1 JOIN country AS T2 ON T2.Code = T3.Country2 WHERE T3.Length = (SELECT MAX(Length) FROM borders)
SELECT T1.Name, COUNT(T2.Country2) AS NeighborCount FROM country AS T1 JOIN borders AS T2 ON T1.Code = T2.Country1 GROUP BY T1.Name ORDER BY NeighborCount DESC LIMIT 1;
SELECT T1.Name FROM country AS T1 JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T2.Mountain = 'Cerro Chirripo';
SELECT COUNT(*) FROM mountain WHERE Name IN (     SELECT Mountain     FROM geo_mountain     WHERE Country = 'Indonesia' );
SELECT COUNT(*) FROM geo_mountain WHERE Country = 'Japan';
SELECT T3.Latitude FROM geo_mountain AS T1 JOIN mountain AS T2 ON T1.Mountain = T2.Name JOIN island AS T3 ON T3.Name = (SELECT Island FROM mountainOnIsland WHERE Mountain = 'Andrinjitra')
SELECT T1.Name, T1.Code FROM country AS T1 JOIN geo_mountain AS T2 ON T1.Name = T2.Country JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Height = (SELECT MAX(Height) FROM mountain WHERE Height < (SELECT MAX(Height) FROM mountain)) GROUP BY T1.Name, T1.Code HAVING COUNT(*) = 2;
SELECT (e.area * 100 / a.area) AS percentage FROM country e, continent a WHERE e.name = 'Egypt' AND a.name = 'Asia'
SELECT (e.area * 100 / a.area) AS percentage FROM country e, continent a WHERE e.name = 'Egypt' AND a.name = 'Asia'
SELECT Name FROM city WHERE Country = 'Japan' ORDER BY Population DESC LIMIT 1;
SELECT c.Capital FROM city AS cy JOIN country AS c ON cy.Country = c.Code WHERE cy.Name = 'Olsztyn';
SELECT T3.Name FROM mountain AS T1 JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain JOIN province AS T3 ON T3.Name = T2.Province WHERE T1.Type = 'volcano' ORDER BY T1.Height DESC LIMIT 1
SELECT T1.Independence FROM politics AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Uganda'
SELECT T1.Government FROM politics AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Iran'
SELECT country.Name FROM country JOIN province ON country.Code = province.Country WHERE province.Name = 'Bermuda';
SELECT c.Capital, c.Province FROM country c JOIN (     SELECT Country     FROM ethnicGroup     WHERE Name = 'Malay'     ORDER BY Percentage DESC     LIMIT 1 ) as malay_country ON c.Code = malay_country.Country
SELECT T2.Name FROM country AS T1 JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = (SELECT T1.Name FROM country AS T1 JOIN ethnicGroup AS T2 ON T1.Code = T2.Country ORDER BY T1.Area DESC LIMIT 2,1) ORDER BY T2.Percentage DESC LIMIT 1;
SELECT country.Name FROM country JOIN city ON country.Code = city.Country WHERE city.Population = 114339;
SELECT COUNT(*) FROM river r JOIN sea s ON r.Sea = s.Name WHERE s.Depth = 459;
SELECT T1.Area FROM country AS T1 JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Independence = '1921-03-13'
SELECT T1.Population / T1.Area AS population_density FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Petropavl'
SELECT (t1.Percentage - t2.Percentage) * t3.Population FROM language AS t1 JOIN language AS t2 ON t1.Country = t2.Country JOIN country AS t3 ON t1.Country = t3.Code WHERE t1.Name = 'English' AND t2.Name = 'Scottish' AND t1.Country = 'United Kingdom'
SELECT T2.Name FROM (   SELECT Country, Population/Area AS Density   FROM country   ORDER BY Density DESC   LIMIT 1 OFFSET 11 ) AS T1 JOIN city AS T2 ON T1.Country = T2.Country WHERE T2.Population = (   SELECT MAX(Population)   FROM city   WHERE Country = T1.Country )
SELECT MAX(Length) / MIN(Length) AS Ratio FROM borders WHERE Country1 = 'United States' OR Country2 = 'United States'
SELECT T1.Capital FROM country AS T1 JOIN (SELECT Country FROM geo_mountain GROUP BY Country HAVING COUNT(*) > 4) AS T2 ON T1.Code = T2.Country;
SELECT COUNT(*) FROM mountain WHERE Country IN (SELECT Code FROM country ORDER BY Population DESC LIMIT 1);
SELECT COUNT(*) FROM (     SELECT c.Name     FROM country c     JOIN economy e ON c.Code = e.Country     WHERE e.Agriculture > 40 ) AS ctry LEFT JOIN (     SELECT DISTINCT Country     FROM geo_mountain ) AS mtn ON ctry.Name = mtn.Country WHERE mtn.Country IS NULL OR (     SELECT COUNT(*)     FROM geo_mountain     WHERE Country = ctry.Name ) < 2;
SELECT m.Name FROM mountain m JOIN geo_mountain gm ON m.Name = gm.Mountain JOIN country c ON c.Code = gm.Country JOIN economy e ON e.Country = c.Name WHERE e.Inflation = (     SELECT MIN(Inflation)     FROM economy )
Error: 第 8302 个样本有 2 个SQL。
SELECT d.Name FROM desert d JOIN geo_desert gd ON d.Name = gd.Desert JOIN country c ON gd.Country = c.Code WHERE c.Population > 100000 AND c.Area < 500000;
SELECT COUNT(*) FROM desert d JOIN geo_desert gd ON d.Name = gd.Desert JOIN country c ON gd.Country = c.Code JOIN language l ON c.Code = l.Country WHERE l.Name = 'Armenian' AND l.Percentage > 90;
SELECT m.Name FROM mountain m JOIN country c ON m.Country = c.Code WHERE c.Name NOT IN (SELECT p.Dependent FROM politics p) ORDER BY m.Height DESC LIMIT 1;
SELECT COUNT(*) FROM mountain WHERE Type = 'volcanic' AND Country IN (SELECT Name FROM country WHERE Population <= 5000000);
SELECT COUNT(*) FROM country c JOIN geo_mountain gm ON c.Code = gm.Country WHERE c.Name IN (SELECT e.Country FROM economy e WHERE e.GDP > 1000000) AND gm.Mountain IN (SELECT m.Name FROM mountain m WHERE m.Height > 1000);
SELECT MAX(Length) FROM borders WHERE Country1 IN (SELECT Country FROM politics WHERE Dependent = '') AND Country2 IN (SELECT Country FROM politics WHERE Dependent = '');
SELECT COUNT(*) FROM country c JOIN borders b ON c.Code = b.Country1 WHERE c.Government = 'republic' AND b.Length > 200;
SELECT Country1, Country2, Length FROM borders WHERE Length = (SELECT MIN(Length) FROM borders)
SELECT SUM(e.GDP) FROM economy e JOIN country c ON e.Country = c.Code JOIN encompasses ec ON c.Name = ec.Country WHERE ec.Continent = 'Europe'
SELECT COUNT(*) FROM mountain WHERE Name IN (     SELECT T2.Mountain     FROM geo_mountain AS T1     JOIN mountain AS T2 ON T1.Mountain = T2.Name     JOIN country AS T3 ON T1.Country = T3.Code     WHERE T3.Continent = 'Africa' );
SELECT d.Name FROM desert d JOIN geo_desert gd ON d.Name = gd.Desert JOIN country c ON c.Code = gd.Country JOIN encompasses e ON e.Country = c.Code WHERE e.Continent = 'America' ORDER BY d.Area DESC LIMIT 1;
SELECT c.Name FROM country c JOIN encompasses e ON c.Code = e.Country WHERE e.Continent = 'Europe' AND c.Population_Growth > 3;
SELECT COUNT(*) FROM country c JOIN continent co ON c.Continent = co.Name JOIN population p ON c.Code = p.Country WHERE co.Name = 'Europe' AND p.Infant_Mortality > 100;
SELECT COUNT(*) FROM country JOIN language ON country.Code = language.Country JOIN population ON country.Code = population.Country WHERE language.Name = 'Bosnian' AND population.Population_Growth <= 0;
SELECT AVG(e.Agriculture) FROM economy e JOIN country c ON e.Country = c.Code JOIN encompasses ec ON c.Name = ec.Country WHERE ec.Continent = 'Africa';
SELECT COUNT(*) FROM (   SELECT c.Name   FROM country c   LEFT JOIN politics p ON c.Code = p.Country   WHERE p.Independence IS NOT NULL AND c.Code IN (     SELECT e.Country     FROM economy e     WHERE e.GDP / (       SELECT Population       FROM population       WHERE Country = e.Country     ) > 5000   ) ) as independent_rich_countries;
SELECT AVG(e.Inflation) FROM economy e JOIN country c ON e.Country = c.Code JOIN encompasses ec ON c.Name = ec.Country WHERE ec.Continent IN (     SELECT Name     FROM continent     ORDER BY Area DESC     LIMIT 1 );
SELECT T3.Name, T3.Area FROM city AS T1 JOIN locatedOn AS T2 ON T1.Name = T2.City JOIN island AS T3 ON T3.Name = T2.Island WHERE T1.Name = 'Balikpapan'
SELECT city.Name, city.Population FROM city JOIN province ON city.Province = province.Name WHERE province.Name = 'Sumatra';
SELECT T1.Name, T1.Longitude, T1.Latitude FROM island AS T1 JOIN locatedOn AS T2 ON T1.Name = T2.Island JOIN province AS T3 ON T3.Name = T2.Province WHERE T3.Name = 'South Yorkshire';
SELECT i.Name FROM island i WHERE i.Area > (     SELECT i2.Area     FROM island i2     JOIN locatedOn lo ON lo.Island = i2.Name     WHERE lo.Province = 'Warwickshire' )
SELECT T1.Name, T3.City FROM island AS T1 JOIN locatedOn AS T2 ON T1.Name = T2.Island JOIN city AS T3 ON T2.Country = T3.Country AND T2.Province = T3.Province WHERE T1.Area < 200;
SELECT p.Name, c.Capital FROM province p JOIN city c ON p.Name = c.Province WHERE c.Name = 'Glenrothes';
SELECT city.Name, city.Population FROM city JOIN province ON city.Province = province.Name WHERE province.Population > 1000000;
SELECT i.Name, c.Name, p.Name FROM island i JOIN locatedOn lo ON i.Name = lo.Island JOIN city c ON c.Name = lo.City JOIN province p ON p.Name = lo.Province WHERE i.Type = 'coral'
SELECT AVG(T1.Population) FROM city AS T1 JOIN located AS T2 ON T1.Name = T2.City WHERE T2.Sea = 'Baltic Sea';
SELECT (c.Population / p.Population) * 100 AS Percentage FROM city c JOIN province p ON c.Province = p.Name WHERE c.Name = 'Edmonton'
SELECT r.Name FROM river r JOIN sea s ON r.Sea = s.Name WHERE s.Name = 'Black Sea';
SELECT T1.Name, T3.City FROM lake AS T1 JOIN located AS T2 ON T1.Name = T2.Lake JOIN city AS T3 ON T3.Name = T2.City WHERE T2.Country = 'Albania';
SELECT mountain.Name, mountain.Height FROM mountain JOIN mountainOnIsland ON mountain.Name = mountainOnIsland.Mountain JOIN island ON island.Name = mountainOnIsland.Island WHERE island.Mountains = 'Himalaya' ORDER BY mountain.Height DESC LIMIT 1;
SELECT mountain.Name, mountain.Longitude, mountain.Latitude FROM mountain WHERE mountain.Type = 'volcanic';
SELECT mountain.Name FROM mountain WHERE mountain.Type = 'volcano' AND mountain.Height BETWEEN 2000 AND 4000;
SELECT r.Name FROM river r JOIN sea s ON r.Sea = s.Name WHERE s.Name = 'Mediterranean Sea' ORDER BY r.Length DESC LIMIT 1;
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM mountain WHERE Mountains = 'Andes') AS percentage FROM mountain WHERE Mountains = 'Andes' AND Type != 'volcano'
SELECT DISTINCT c.Name, c.Province FROM city c JOIN located l ON c.Name = l.City JOIN river r ON l.River = r.Name WHERE r.Sea = 'Atlantic Ocean';
SELECT r.Name, r.Length FROM river r JOIN located l ON r.Name = l.River JOIN city c ON c.Name = l.City WHERE c.Name = 'Orleans';
SELECT m.Height, m.Longitude, m.Latitude FROM mountain m JOIN mountainOnIsland moi ON m.Name = moi.Mountain JOIN geo_source gs ON moi.Island = gs.Island JOIN river r ON gs.River = r.Name WHERE r.Name = 'Lech'
SELECT r.Name AS River_Name, m.Name AS Mountain_Name FROM river r JOIN geo_source gs ON r.Name = gs.River JOIN mountain m ON m.Name = r.Mountains JOIN province p ON p.Name = gs.Country AND p.Name = 'Lorraine';
SELECT m.Name, m.Height FROM mountain m JOIN geo_source gs ON m.Name = gs.Mountain JOIN river r ON r.Name = gs.River WHERE r.Name = 'Blue Nile';
SELECT r.Name, r.Length FROM river r JOIN city c ON r.Country = c.Country AND r.Province = c.Province WHERE c.Name = 'Little Rock';
SELECT T1.Name, T2.Province FROM `river` AS T1 JOIN `geo_river` AS T2 ON T1.Name = T2.River WHERE T1.Length > 1000;
Error: 第 8344 个样本有 2 个SQL。
SELECT T1.Name, T1.Length FROM river AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'USA';
SELECT AVG(mountain.Height) FROM mountain JOIN geo_mountain ON mountain.Name = geo_mountain.Mountain JOIN country ON country.Code = geo_mountain.Country WHERE country.Name = 'Nepal';
SELECT MAX(c.Population) - MIN(c.Population) AS Population_Disparity FROM city c JOIN located l ON c.Name = l.City AND c.Country = l.Country AND c.Province = l.Province WHERE l.River = 'Seine'
SELECT r1.Name, r2.Name, ABS(r1.Length - r2.Length) AS Difference FROM river r1, river r2, city c WHERE c.Name = 'Belgrade' AND c.City IN (SELECT City FROM located WHERE River = r1.Name) AND c.City IN (SELECT City FROM located WHERE River = r2.Name) AND r1.Length > r2.Length ORDER BY Difference DESC LIMIT 1;
SELECT country.Name FROM country JOIN language ON country.Code = language.Country WHERE language.Name = 'Spanish' AND language.Percentage = 100;
SELECT T1.Name FROM country AS T1 JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Government LIKE '%British Crown%'
SELECT T1.Name FROM river AS T1 JOIN geo_river AS T2 ON T1.Name = T2.River WHERE T2.Country = 'Canada'
SELECT T1.Name FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.Inflation DESC LIMIT 1;
SELECT T2.Province, T2.Population FROM city AS T1 JOIN country AS T2 ON T1.Country = T2.Name WHERE T2.Name = 'United Kingdom' ORDER BY T1.Population DESC LIMIT 3,1;
SELECT T1.Population * T2.Percentage / 100 AS JewishResidents FROM country AS T1 JOIN religion AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Moldova' AND T2.Name = 'Jewish'
SELECT AVG(country.Area) FROM country JOIN encompasses ON country.Code = encompasses.Country WHERE encompasses.Continent = 'Asia';
SELECT T1.Name, T2.Longitude, T2.Latitude FROM country AS T1 JOIN geo_desert AS T2 ON T1.Code = T2.Country JOIN desert AS T3 ON T3.Name = T2.Desert WHERE T3.Area = (SELECT MIN(Area) FROM desert);
SELECT SUM(T2.Percentage * T3.Population) AS NumberOfPeopleSpeakingSerbian FROM language AS T1 JOIN ethnicGroup AS T2 ON T1.Country = T2.Country JOIN country AS T3 ON T1.Country = T3.Code WHERE T1.Name = 'Serbian' AND T3.Name = 'Montenegro';
SELECT COUNT(*) FROM mountain WHERE Country IN (SELECT Code FROM country ORDER BY Area DESC LIMIT 1);
SELECT T1.Name, T2.Country FROM sea AS T1 JOIN geo_sea AS T2 ON T1.Name = T2.Sea ORDER BY T1.Depth ASC LIMIT 1;
SELECT T1.Name FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country JOIN politics AS T3 ON T1.Code = T3.Country WHERE T3.Government = 'Communist' ORDER BY T2.GDP ASC LIMIT 1;
SELECT p.Government FROM politics p JOIN economy e ON p.Country = e.Country ORDER BY e.Inflation DESC LIMIT 1;
SELECT p.Country FROM politics p JOIN population pop ON p.Country = pop.Country WHERE p.Independence = '1960' ORDER BY pop.Infant_Mortality DESC LIMIT 1;
SELECT MIN(b.Length), p1.Government, p2.Government FROM borders b JOIN country p1 ON b.Country1 = p1.Code JOIN country p2 ON b.Country2 = p2.Code GROUP BY b.Length ORDER BY b.Length LIMIT 1;
SELECT c.Name FROM country c JOIN language l ON c.Code = l.Country WHERE l.Name = 'Arabic' AND l.Percentage = 100 ORDER BY c.Population ASC LIMIT 1;
SELECT T3.Province FROM desert AS T1 JOIN geo_desert AS T2 ON T1.Name = T2.Desert JOIN country AS T3 ON T2.Country = T3.Code WHERE T1.Area = (SELECT MAX(Area) FROM desert)
SELECT COUNT(*) FROM lake WHERE Country IN (     SELECT Country     FROM country     WHERE Government = 'republican' AND Country IN (         SELECT Country         FROM politics     ) AND Country IN (         SELECT Country1         FROM encompasses         WHERE Continent = 'Africa'     )     ORDER BY Population DESC     LIMIT 1 OFFSET 3 )
SELECT r.Name FROM religion r JOIN country c ON r.Country = c.Code JOIN encompasses e ON c.Code = e.Country WHERE e.Continent = 'Asia' GROUP BY r.Name ORDER BY SUM(r.Percentage * c.Population) DESC LIMIT 1;
SELECT ABS(C1.Population - C2.Population) AS Pop_Difference FROM (  SELECT M.Country AS C1  FROM mountain M  INNER JOIN (   SELECT MAX(Height) AS MaxHeight   FROM mountain  ) AS MaxH  ON M.Height = MaxH.MaxHeight ) AS T1 JOIN country C1 ON T1.C1 = C1.Code CROSS JOIN (  SELECT M.Country AS C2  FROM mountain M  INNER JOIN (   SELECT MAX(Height) AS MaxHeight   FROM mountain  ) AS MaxH  ON M.Height = MaxH.MaxHeight ) AS T2 JOIN country C2 ON T2.C2 = C2.Code WHERE T1.C1 <> T2.C2
SELECT T3.Name FROM island AS T1 JOIN geo_sea AS T2 ON T1.Name = T2.Island JOIN sea AS T3 ON T3.Name = T2.Sea WHERE T1.Area = (SELECT MAX(Area) FROM island)
SELECT T1.Name FROM country AS T1 JOIN geo_river AS T2 ON T1.Code = T2.Country JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Sea = 'Atlantic Ocean' ORDER BY T3.Length DESC LIMIT 3;
SELECT T3.Population FROM country AS T1 JOIN city AS T2 ON T1.Capital = T2.Name JOIN population AS T3 ON T1.Code = T3.Country WHERE T1.Independence = '1947-08-15'
SELECT SUM(ethnicGroup.Percentage * country.Population) AS Total_Afro_Asian_Population FROM ethnicGroup JOIN country ON ethnicGroup.Country = country.Code WHERE country.Name IN (     SELECT Name     FROM country     WHERE Area IN (         SELECT MAX(Area)         FROM country         WHERE continent.Name = 'Asia'         AND politics.Government LIKE '%monarchy%'     ) ) AND ethnicGroup.Name LIKE '%Afro-Asian%';
SELECT T1.Name AS CityName, T4.Capital AS CapitalCity FROM city AS T1 JOIN located AS T2 ON T1.Name = T2.City JOIN river AS T3 ON T3.Name = T2.River JOIN country AS T4 ON T4.Code = T2.Country WHERE T3.Name = 'Euphrat'
SELECT SUM(T3.Percentage * T2.Population) / SUM(T2.Population) AS Proportion_of_English_speaking_citizens FROM isMember AS T1 JOIN country AS T2 ON T1.Country = T2.Code JOIN language AS T3 ON T2.Code = T3.Country WHERE T1.Organization = 'United States' AND T3.Name = 'English'
SELECT c.Name, COUNT(p.Name) AS NumberOfProvinces, e.Service / e.GDP * 100 AS ServicePercentage, c.Population / c.Area AS PopulationDensity FROM country c JOIN province p ON c.Code = p.Country JOIN politics pol ON c.Code = pol.Country JOIN economy e ON c.Code = e.Country WHERE pol.Government LIKE '%federal republic%' AND c.Continent = 'Europe' GROUP BY c.Name, e.Service, e.GDP, c.Population, c.Area ORDER BY NumberOfProvinces DESC, ServicePercentage DESC LIMIT 1;
SELECT T1.Capital, (T3.Population / T1.Population) * 100 AS Ratio_Percentage FROM (     SELECT Name, Capital, Population     FROM country     WHERE Continent = 'Asia'     ORDER BY Population DESC     LIMIT 2,1 ) AS T1 JOIN city AS T2 ON T2.Name = T1.Capital JOIN (     SELECT Country, SUM(Population) AS Population     FROM city     GROUP BY Country ) AS T3 ON T3.Country = T1.Name;
SELECT Name FROM desert ORDER BY Area DESC LIMIT 1 OFFSET 1;
SELECT T2.Name FROM country AS T1 JOIN language AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'MNE' ORDER BY Percentage DESC LIMIT 1;
SELECT T2.Percentage FROM country AS T1 JOIN language AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Cayman Islands' AND T2.Name = 'English';
SELECT T1.Name FROM country AS T1 JOIN geo_source AS T2 ON T1.Code = T2.Country JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Pjandsh'
SELECT c.Name FROM country c JOIN economy e ON c.Code = e.Country WHERE c.Population > 1000000000 ORDER BY e.GDP LIMIT 1;
SELECT T1.Capital FROM country AS T1 JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T2.Mountain = 'Licancabur'
SELECT SUM(s.Area) FROM sea s JOIN geo_sea gs ON s.Name = gs.Sea JOIN island i ON i.Name = gs.Island JOIN geo_mountain gm ON gm.Country = i.Country AND gm.Province = i.Province WHERE gm.Mountain = 'Kerinci'
SELECT T1.Name FROM country AS T1 JOIN geo_river AS T2 ON T1.Code = T2.Country JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Amazonas' GROUP BY T1.Name LIMIT 3;
SELECT country.Name FROM country JOIN politics ON country.Code = politics.Country WHERE politics.Independence = '1492-01-01';
SELECT COUNT(*) FROM city WHERE Country = 'France' AND Population > 100000;
SELECT r.Name, r.Length FROM river r JOIN sea s ON r.Sea = s.Name WHERE s.Depth = 540 ORDER BY r.Length DESC LIMIT 1;
SELECT T1.Name, T1.Code FROM country AS T1 JOIN geo_mountain AS T2 ON T1.Name = T2.Country JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Type = 'volcano' ORDER BY T3.Height DESC LIMIT 1 OFFSET 1;
SELECT T3.Longitude FROM geo_mountain AS T1 JOIN mountain AS T2 ON T1.Mountain = T2.Name JOIN island AS T3 ON T3.Name = (SELECT Island FROM mountainOnIsland WHERE Mountain = 'Olympos')
SELECT c.Name, e.GDP FROM country AS c JOIN economy AS e ON c.Code = e.Country WHERE c.Area < 100 ORDER BY e.GDP DESC LIMIT 1;
SELECT COUNT(*) FROM city WHERE Country = 'Japan';
SELECT Name, Population FROM city WHERE Country = 'Bangladesh' AND Population = (     SELECT MAX(Population)     FROM city     WHERE Country = 'Bangladesh' AND Name != (         SELECT Capital         FROM country         WHERE Name = 'Bangladesh'     ) );
SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name <> T2.Capital ORDER BY T1.Population DESC LIMIT 1;
SELECT country.Name FROM city JOIN country ON city.Country = country.Code WHERE city.Name = 'Grozny';
SELECT T2.Name FROM country AS T1 JOIN religion AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Japan' ORDER BY T2.Percentage DESC LIMIT 1;
Error: 第 8396 个样本有 2 个SQL。
SELECT SUM(e.Percentage) FROM encompasses e JOIN country c ON e.Country = c.Code WHERE c.Name = 'Russia' AND e.Continent = 'Europe';
SELECT T1.Name FROM country AS T1 JOIN encompasses AS T2 ON T1.Code = T2.Country GROUP BY T1.Name HAVING COUNT(*) > 1
SELECT SUM(country.Population) FROM country JOIN city ON country.Code = city.Country WHERE city.Name = 'Fareham';
SELECT T1.Population_Growth * T2.Infant_Mortality * T1.Population AS Number_of_Infant_Mortality FROM country AS T1 JOIN population AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Switzerland'
SELECT COUNT(*) FROM geo_mountain WHERE Country = 'United States';
SELECT T1.Independence FROM politics AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Equatorial Guinea'
SELECT T1.GDP / T2.Population AS GDPPercapita FROM economy AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Switzerland'
SELECT T2.Service FROM city AS T1 JOIN economy AS T2 ON T1.Country = T2.Country WHERE T1.Name = 'Fuenlabrada'
SELECT (MAX(r.Length) / MIN(r.Length)) AS Times_Longer FROM river r JOIN country c ON r.Country = c.Code WHERE c.Name = 'Tajikistan'
SELECT (c.Population / c.Area) as Population_Density FROM country c JOIN city ci ON c.Code = ci.Country WHERE ci.Name = 'Hanoi';
SELECT eg.Country, eg.Name AS Ethnic_Group, MAX(eg.Percentage) AS Max_Percentage FROM ethnicGroup eg JOIN (   SELECT Country, MAX(Percentage) AS Max_Percentage   FROM ethnicGroup   GROUP BY Country   HAVING COUNT(*) > 1 ) eg_max ON eg.Country = eg_max.Country AND eg.Percentage = eg_max.Max_Percentage GROUP BY eg.Country;
SELECT d.Name FROM desert d WHERE NOT EXISTS (     SELECT 1     FROM geo_desert gd     WHERE gd.Desert = d.Name     GROUP BY gd.Country     HAVING COUNT(*) = 1 );
SELECT COUNT(DISTINCT r.Name) AS NumberOfRivers, r.Province FROM river r JOIN geo_river gr ON r.Name = gr.River GROUP BY r.Province HAVING COUNT(DISTINCT gr.Country) > 1;
SELECT     b.Country2,     (b.Length / (         SELECT SUM(Length)         FROM borders         WHERE Country1 = 'Angola'     )) * 100 AS Percentage FROM     borders b WHERE     b.Country1 = 'Angola';
SELECT     (COUNT(CASE WHEN i.Area <= 300 THEN i.Name END) * 100.0 / COUNT(i.Name)) AS Percentage FROM     island i WHERE     i.Type != 'volcanic' AND i.Islands = 'Lesser Antilles';
SELECT (COUNT(CASE WHEN T2.Percentage = 100 THEN T1.Name END) * 100.0 / COUNT(T1.Name)) AS Percentage_English_Only FROM country AS T1 JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'English'
SELECT T1.Capital FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.Country WHERE T1.Population < (SELECT MAX(Population) FROM country) * 0.0005
SELECT AVG(r.Length) FROM river r WHERE r.Name IN (SELECT r2.River                 FROM river r2                 WHERE r2.EstuaryLongitude = (SELECT Longitude                                              FROM river                                              WHERE Name = 'Donau')                 AND r2.EstuaryLatitude = (SELECT Latitude                                           FROM river                                           WHERE Name = 'Donau'))
SELECT (COUNT(CASE WHEN r.Percentage < 100 THEN 1 END) / COUNT(*)) * 100 AS Non_Christian_Percentage FROM (     SELECT c.Name, SUM(r.Percentage) AS Total_Religion_Percentage     FROM country c     JOIN religion r ON c.Code = r.Country     WHERE r.Name = 'Christian'     GROUP BY c.Name ) AS Christian_Countries JOIN country c ON Christian_Countries.Name = c.Name JOIN religion r ON c.Code = r.Country WHERE Christian_Countries.Total_Religion_Percentage < 100
SELECT c.Name FROM country c JOIN city ci ON c.Code = ci.Country JOIN isMember m ON c.Code = m.Country WHERE ci.Population BETWEEN 50000 AND 300000 AND m.Organization = 'EBRD' AND m.Established BETWEEN '1991-03-01' AND '1991-04-30';
SELECT r.Name FROM river r JOIN geo_river gr ON r.Name = gr.River WHERE r.Length > 500 AND r.River = 'Donau' AND gr.Country = 'Slovenia';
SELECT T3.Name FROM sea AS T1 JOIN geo_sea AS T2 ON T1.Name = T2.Sea JOIN city AS T3 ON T3.Country = T2.Country AND T3.Province = T2.Province WHERE T1.Depth < (SELECT Depth FROM sea WHERE Name = 'Bay of Bengal') AND T1.Name != 'Bay of Bengal'
SELECT T1.Name FROM city AS T1 JOIN located AS T2 ON T1.Name = T2.City WHERE T2.Latitude = 11.6 AND T2.Longitude = -85.35 AND T2.Lake IS NOT NULL;
Error: 第 8420 个样本有 2 个SQL。
SELECT T1.Name AS Country1, T2.Name AS Country2 FROM country AS T1 JOIN borders AS T3 ON T1.Code = T3.Country1 JOIN country AS T2 ON T2.Code = T3.Country2 WHERE T1.Name IN (SELECT Name FROM country WHERE Continent = 'Asia') AND T2.Name IN (SELECT Name FROM country WHERE Continent = 'Asia') AND T3.Length = 1782;
SELECT T1.Name FROM lake AS T1 JOIN geo_lake AS T2 ON T1.Name = T2.Lake WHERE T2.Country = 'Bolivia' ORDER BY T1.Depth DESC LIMIT 1;
SELECT T3.Name FROM river AS T1 JOIN geo_source AS T2 ON T1.Name = T2.River JOIN lake AS T3 ON T3.Name = T2.Lake WHERE T1.Name = 'Manicouagan'
SELECT T3.Islands FROM geo_mountain AS T1 JOIN mountain AS T2 ON T1.Mountain = T2.Name JOIN island AS T3 ON T3.Name = T2.Island WHERE T2.Name = 'Rinjani'
SELECT T2.Name FROM mergesWith AS T1 JOIN sea AS T2 ON T1.Sea2 = T2.Name WHERE T1.Sea1 = (SELECT Name FROM sea ORDER BY Depth DESC LIMIT 1)
SELECT c.Name FROM country c JOIN encompasses e ON c.Code = e.Country GROUP BY c.Name HAVING COUNT(e.Continent) > 1 AND AVG(c.Population / c.Area) <= 10;
SELECT c.Name, (c.Population / c.Area) AS PeoplePerSquareMeter FROM country c JOIN religion r ON c.Code = r.Country WHERE r.Name = 'Hindu' ORDER BY PeoplePerSquareMeter ASC LIMIT 1;
SELECT T2.Independence FROM economy AS T1 JOIN politics AS T2 ON T1.Country = T2.Country WHERE T1.GDP = (SELECT GDP FROM economy WHERE Country = 'Saint Kitts and Nevis') * 5
SELECT AVG(T3.Population / T3.Area) FROM organization AS T1 JOIN country AS T3 ON T1.Country = T3.Code WHERE T1.Established = 1947;
Error: 第 8430 个样本有 2 个SQL。
SELECT T1.Name, T1.Capital, T2.Name AS Capital_Name FROM country AS T1 JOIN city AS T2 ON T1.Capital = T2.Name WHERE T1.Population = (SELECT MIN(Population) FROM country)
SELECT (SELECT Area FROM continent WHERE Name = 'Asia') - (SELECT Area FROM continent WHERE Name = 'Europe') AS SpaceDifference;
SELECT Longitude, Latitude FROM city WHERE Name = 'Aarhus';
SELECT (SELECT Population FROM country WHERE Name = 'United Kingdom') - (SELECT Population FROM country WHERE Name = 'Italy') AS PopulationGap;
SELECT city.Name, province.Name FROM city JOIN province ON city.Country = province.Country JOIN organization ON city.Name = organization.City WHERE organization.Name = 'European Bank for Reconstruction and Development';
SELECT Name FROM lake ORDER BY Area * Depth DESC LIMIT 1;
SELECT Country1, Country2 FROM borders WHERE Length = (SELECT MAX(Length) FROM borders);
SELECT T1.Name FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC LIMIT 1;
SELECT c.Name FROM country c JOIN language l ON c.Code = l.Country WHERE l.Name LIKE '%African%' ORDER BY l.Percentage ASC LIMIT 1;
SELECT c.Name FROM country c JOIN religion r1 ON c.Code = r1.Country JOIN religion r2 ON c.Code = r2.Country JOIN religion r3 ON c.Code = r3.Country JOIN language l ON c.Code = l.Country WHERE r1.Name = 'Anglicanism' AND r2.Name = 'Christianity' AND r3.Name = 'Roman Catholicism' AND l.Name = 'English' AND r1.Percentage + r2.Percentage + r3.Percentage = 100 AND l.Percentage = 100;
SELECT Country FROM economy ORDER BY Inflation DESC LIMIT 3;
SELECT country.Name FROM country JOIN language ON country.Code = language.Country WHERE language.Name = 'English' AND language.Percentage = 100;
SELECT COUNT(*) FROM organization WHERE Established > 1960 AND Country IN (SELECT Country FROM politics WHERE Independence IS NULL);
SELECT T2.Province, T1.Length FROM `river` AS T1 JOIN `geo_river` AS T2 ON T1.Name = T2.River WHERE T1.Name = 'Klaeaelv'
SELECT COUNT(DISTINCT T2.Name), T3.Depth FROM geo_sea AS T1 JOIN province AS T2 ON T1.Country = T2.Country JOIN sea AS T3 ON T1.Sea = T3.Name WHERE T1.Province IN (SELECT Name FROM province WHERE Country = 'Italy') AND T3.Name = 'Mediterranean Sea';
SELECT country.Name FROM country JOIN politics ON country.Code = politics.Country WHERE politics.Government = 'British Overseas Territory';
SELECT T1.Name FROM economy AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Agriculture = (SELECT MIN(Agriculture) FROM economy) ORDER BY T1.GDP DESC LIMIT 3;
SELECT c.Name, c.Area, COUNT(cc.Country) AS NumberOfNations FROM continent c JOIN encompasses cc ON c.Name = cc.Continent WHERE c.Name = 'Africa' GROUP BY c.Name, c.Area;
SELECT T2.Name AS Province, COUNT(T1.City) AS Headquarters FROM organization AS T1 JOIN province AS T2 ON T1.City = T2.Capital AND T1.Province = T2.Name WHERE T1.Country = 'United States' GROUP BY T2.Name ORDER BY Headquarters DESC LIMIT 1;
SELECT Name FROM politics JOIN country ON politics.Country = country.Code WHERE politics.Dependent = '' ORDER BY politics.Independence DESC LIMIT 3;
SELECT T1.Name FROM country AS T1 JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Government LIKE '%republic%' AND T2.Independence >= 1991 LIMIT 3;
SELECT o.Name FROM organization o JOIN isMember m ON o.Abbreviation = m.Organization WHERE m.Type = 'associated'
SELECT DISTINCT T2.Name FROM geo_desert AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Desert = 'Kalahari Desert'
SELECT d.Name FROM desert d JOIN geo_desert gd ON d.Name = gd.Desert JOIN country c ON c.Code = gd.Country WHERE c.Name = 'Kazakhstan' ORDER BY d.Area DESC LIMIT 1;
SELECT T1.Name, T1.Depth FROM sea AS T1 JOIN mergesWith AS T2 ON T1.Name = T2.Sea1 WHERE T2.Sea2 = 'Baltic Sea';
SELECT T1.Name FROM country AS T1 JOIN organization AS T2 ON T1.Code = T2.Country WHERE T1.Government = 'constitutional monarchy' AND T2.Established > 1907 GROUP BY T1.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1;
SELECT m.Type, gm.Province, gm.Country FROM mountain m JOIN geo_mountain gm ON m.Name = gm.Mountain WHERE m.Name = 'Ampato';
SELECT mountain.Name FROM mountain JOIN geo_mountain ON mountain.Name = geo_mountain.Mountain WHERE geo_mountain.Country = 'Ecuador' AND geo_mountain.Province = 'Ecuador' AND mountain.Type = 'volcano';
SELECT     (COUNT(CASE WHEN p.Independence > 1993 AND p.Government = 'parliamentary democracy' THEN c.Name END) / COUNT(c.Name)) * 100 AS Percentage,     GROUP_CONCAT(CASE WHEN p.Independence > 1993 AND p.Government = 'parliamentary democracy' THEN c.Name ELSE NULL END SEPARATOR ', ') AS IndependentParliamentaryDemocracies FROM     country c JOIN     politics p ON c.Code = p.Country LIMIT 3;
SELECT     (COUNT(CASE WHEN Length > 3000 THEN 1 END) * 100.0 / COUNT(*)) AS Proportion,     Name FROM     river WHERE     Length > 3000 AND Country = 'Russia' LIMIT 1;
SELECT organization.Name, organization.Established FROM organization WHERE organization.Abbreviation = 'ABEDA';
SELECT Name FROM organization WHERE Established BETWEEN 1970 AND 1980;
SELECT organization.Name FROM organization WHERE organization.City = 'London';
SELECT organization.Name, city.Name FROM organization JOIN city ON organization.City = city.Name WHERE organization.Country = 'USA';
SELECT o.Abbreviation, o.Name, o.Established FROM organization o JOIN city c ON o.City = c.Name AND o.Country = c.Country WHERE c.Name = 'Paris' ORDER BY o.Established LIMIT 1;
SELECT organization.Name, city.Name FROM organization JOIN city ON organization.City = city.Name WHERE organization.Name LIKE '%United Nation%';
SELECT T1.Name AS Country1, T2.Name AS Country2 FROM country AS T1 JOIN borders AS T3 ON T1.Code = T3.Country1 JOIN country AS T2 ON T2.Code = T3.Country2 ORDER BY T3.Length DESC LIMIT 2;
SELECT T1.Name FROM country AS T1 JOIN borders AS T2 ON T1.Code = T2.Country1 WHERE T2.Country2 = 'Bulgaria' UNION SELECT T1.Name FROM country AS T1 JOIN borders AS T2 ON T1.Code = T2.Country2 WHERE T2.Country1 = 'Bulgaria'
SELECT T1.Name FROM country AS T1 JOIN borders AS T2 ON T1.Code = T2.Country1 WHERE T2.Length > 4000 UNION SELECT T1.Name FROM country AS T1 JOIN borders AS T2 ON T1.Code = T2.Country2 WHERE T2.Length > 4000;
SELECT c.Name, c.Population FROM country c JOIN isMember im ON c.Code = im.Country WHERE im.Organization = 'IOC' ORDER BY c.Population DESC LIMIT 1;
SELECT T1.Name, T2.Type FROM country AS T1 JOIN isMember AS T2 ON T1.Code = T2.Country JOIN organization AS T3 ON T3.Abbreviation = T2.Organization WHERE T3.Name = 'Islamic Development Bank';
SELECT T3.Area, T3.Population FROM organization AS T1 JOIN country AS T3 ON T1.Country = T3.Name JOIN province AS T2 ON T2.Name = T1.Province WHERE T1.Name = 'Asia Pacific Economic Cooperation';
SELECT o.Name FROM organization o JOIN isMember m ON o.Abbreviation = m.Organization WHERE m.Type = 'National Society';
SELECT T1.Name FROM country AS T1 JOIN isMember AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(T2.Organization) ASC LIMIT 1
SELECT c.Name, c.Capital FROM country c JOIN isMember im ON c.Code = im.Country JOIN organization o ON im.Organization = o.Abbreviation WHERE o.Name = 'IFAD' AND im.Type = 'Category III';
SELECT o.Name, COUNT(DISTINCT isMember.Country) AS NumberOfMembers FROM organization o JOIN isMember ON o.Abbreviation = isMember.Organization GROUP BY o.Name ORDER BY NumberOfMembers DESC LIMIT 1;
Error: 第 8477 个样本有 2 个SQL。
SELECT (COUNT(CASE WHEN T2.City = 'Washington' THEN 1 END) * 100.0 / COUNT(T2.City)) AS Percentage FROM organization AS T1 JOIN city AS T2 ON T1.City = T2.Name WHERE T2.Country = 'USA'
SELECT Length FROM borders WHERE Country1 = 'USA' AND Country2 = 'MEX'
SELECT o.Name FROM organization o JOIN isMember m ON o.Abbreviation = m.Organization WHERE m.Country = 'Singapore' ORDER BY o.Established DESC LIMIT 1;
SELECT T1.Population FROM city AS T1 JOIN organization AS T2 ON T1.Name = T2.City WHERE T2.Name = 'World Tourism Organization'
SELECT mountain.Height, geo_mountain.Province FROM mountain JOIN geo_mountain ON mountain.Name = geo_mountain.Mountain WHERE mountain.Name = 'Dhaulagiri';
SELECT mountain.Name, mountain.Height FROM mountain JOIN geo_mountain ON mountain.Name = geo_mountain.Mountain WHERE geo_mountain.Province = 'Alaska';
SELECT T1.Name, T1.Population FROM country AS T1 JOIN population AS T2 ON T1.Code = T2.Country ORDER BY T2.Infant_Mortality DESC LIMIT 1;
SELECT Inflation FROM economy WHERE Country = 'Greece';
SELECT T2.Government FROM economy AS T1 JOIN politics AS T2 ON T1.Country = T2.Country ORDER BY T1.Agriculture DESC LIMIT 1;
SELECT c.Name, c.Capital FROM country c JOIN politics p ON c.Code = p.Country WHERE p.Government = 'parliamentary democracy';
SELECT c.Name, c.Population FROM country c JOIN ethnicGroup eg ON c.Code = eg.Country WHERE eg.Name = 'Chinese' AND eg.Percentage > 70;
SELECT c.Name AS City,        c.Population / co.Population * 100 AS Percentage_of_Country_Population FROM city c JOIN country co ON c.Country = co.Code WHERE c.Population = (SELECT MAX(Population) FROM city)
SELECT Independence FROM politics WHERE Country = 'United States of America'
SELECT Name, Height FROM mountain WHERE Type = 'volcanic' ORDER BY Height DESC LIMIT 1;
SELECT organization.Name FROM organization WHERE organization.Country = 'Saudi Arabia' ORDER BY organization.Established DESC LIMIT 1;
SELECT Country FROM population ORDER BY Infant_Mortality DESC LIMIT 1 OFFSET 4;
SELECT T1.Name FROM country AS T1 JOIN religion AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(DISTINCT T2.Name) DESC LIMIT 1;
SELECT Name, Length FROM river ORDER BY Length DESC LIMIT 16,1;
SELECT T2.Independence FROM country AS T1 JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Capital = 'Nouakchott'
SELECT T1.Name, T2.GDP FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Population = (SELECT MIN(Population) FROM country);
SELECT L.Name, L.Depth FROM lake AS L JOIN country AS C ON L.Country = C.Code WHERE C.Name = 'Zaire' AND L.Depth = (SELECT MAX(Depth) FROM lake WHERE Country = (SELECT Code FROM country WHERE Name = 'Zaire'));
Error: 第 8499 个样本有 2 个SQL。
SELECT c.Name FROM country c JOIN economy e ON c.Code = e.Country WHERE c.Population BETWEEN 60000000 AND 99000000 ORDER BY e.GDP DESC LIMIT 1;
SELECT T1.Name FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name IN (SELECT Name FROM country WHERE continent = 'Asia') ORDER BY T2.Agriculture DESC LIMIT 1;
SELECT p.Government FROM politics p JOIN country c ON p.Country = c.Name JOIN economy e ON e.Country = c.Name WHERE e.GDP = (SELECT MIN(GDP) FROM economy)
SELECT YEAR(Established) AS Year, COUNT(*) AS Num_Organizations FROM organization WHERE Country IN (     SELECT T1.Name     FROM country AS T1     JOIN encompasses AS T2 ON T1.Code = T2.Country     WHERE T2.Continent = 'Europe' ) GROUP BY YEAR(Established) ORDER BY Num_Organizations DESC LIMIT 1;
SELECT T1.Country2, T1.Length FROM borders AS T1 JOIN country AS T2 ON T1.Country1 = T2.Code WHERE T2.Population = (SELECT MAX(Population) FROM country)
SELECT     c.Population / c.Area AS Population_Density,     e.Industry / e.GDP AS Portion_of_GDP_to_Industries FROM     country AS c JOIN     city AS ci ON c.Capital = ci.Name JOIN     economy AS e ON c.Code = e.Country WHERE     ci.Province = 'Distrito Federal'
SELECT DISTINCT p.Government FROM politics p WHERE p.Government LIKE '%parliamentary democracy%' AND p.Independence BETWEEN '1950-01-01' AND '1999-12-31';
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM country) AS Percentage FROM politics WHERE STRFTIME('%Y', Independence) = '1960';
SELECT Name FROM desert WHERE Latitude NOT BETWEEN 30 AND 40;
SELECT d.Latitude, d.Longitude FROM desert d WHERE EXISTS (     SELECT 1     FROM (         SELECT COUNT(DISTINCT gd.Country) AS country_count         FROM geo_desert gd         WHERE gd.Desert = d.Name     ) subquery     WHERE subquery.country_count > 1 );
SELECT CapProv FROM province WHERE Population < 80000 ORDER BY (Population/Area) DESC LIMIT 1;
SELECT COUNT(*) FROM Customers WHERE MARITAL_STATUS = 'Never-married';
SELECT COUNT(*) FROM Customers WHERE age BETWEEN 13 AND 19;
SELECT OCCUPATION FROM Customers WHERE EDUCATIONNUM = 11;
SELECT COUNT(*) FROM (   SELECT m.REFID   FROM mailings3 m   JOIN Customers c ON m.REFID = c.ID   WHERE m.RESPONSE = 'true'   ORDER BY c.ID   LIMIT 60000 ) as subquery;
SELECT COUNT(*) FROM Customers WHERE age > 30 AND OCCUPATION = 'Machine-op-inspct';
SELECT COUNT(*) FROM Customers WHERE SEX = 'Female' AND EDUCATIONNUM > 11;
SELECT COUNT(*) FROM (   SELECT c.ID   FROM Customers c   JOIN (     SELECT m.REFID     FROM (       SELECT m3.REFID, ROW_NUMBER() OVER (ORDER BY m3.REFID) AS row_num       FROM mailings3 m3       WHERE m3.RESPONSE = 'true'       UNION ALL       SELECT m12.REFID       FROM Mailings1_2 m12       WHERE m12.RESPONSE = 'true'     ) m     WHERE m.row_num <= 60000   ) r ON c.ID = r.REFID   WHERE c.SEX = 'Female' ) t;
SELECT C.OCCUPATION FROM Customers C JOIN mailings3 M ON C.ID = M.REFID WHERE C.age > 40 AND M.RESPONSE = 'true';
SELECT COUNT(*) FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.SEX = 'Male' AND Demog.INHABITANTS_K > 30;
SELECT COUNT(*) FROM Customers WHERE GEOID = (     SELECT GEOID     FROM Demog     WHERE INCOME_K/12 = (         SELECT MAX(INCOME_K/12)         FROM Demog     ) );
SELECT COUNT(*) FROM Customers WHERE GEOID IN (SELECT GEOID FROM Demog WHERE INHABITANTS_K BETWEEN 20 AND 30) AND OCCUPATION = 'Machine-op-inspct';
SELECT ID FROM (   SELECT c.ID, d.INHABITANTS_K   FROM Customers c   JOIN Demog d ON c.GEOID = d.GEOID   WHERE c.ID IN (0, 1) ) t ORDER BY INHABITANTS_K DESC LIMIT 1;
SELECT COUNT(*) FROM (   SELECT m.REFID   FROM mailings3 m   JOIN Customers c ON m.REFID = c.ID   JOIN Demog d ON c.GEOID = d.GEOID   WHERE m.RESPONSE = 'true' AND d.INHABITANTS_K > 30   ORDER BY m.REF_DATE   LIMIT 60000 ) as subquery;
SELECT COUNT(*) FROM (   SELECT c.ID   FROM Customers c   JOIN mailings3 m ON c.ID = m.REFID   WHERE m.RESPONSE = 'true'     AND c.SEX = 'Male'     AND c.MARITAL_STATUS = 'Divorced'   ORDER BY c.ID   LIMIT 60000 ) AS subquery;
SELECT COUNT(*) FROM (   SELECT c.ID   FROM Customers c   JOIN Demog d ON c.GEOID = d.GEOID   WHERE d.INCOME_K = (     SELECT MAX(INCOME_K) FROM Demog   )   ORDER BY c.ID   LIMIT 60000 ) AS high_income_customers JOIN mailings3 m ON high_income_customers.ID = m.REFID WHERE m.RESPONSE = 'true';
SELECT d.INHABITANTS_K FROM Demog d JOIN (   SELECT GEOID, COUNT(ID) as customer_count   FROM Customers   GROUP BY GEOID   ORDER BY customer_count DESC   LIMIT 1 ) c ON d.GEOID = c.GEOID;
SELECT COUNT(*) FROM Customers WHERE GEOID = (SELECT GEOID FROM Demog WHERE INHABITANTS_K = 25.746) AND SEX = 'Male';
SELECT COUNT(*) FROM (   SELECT c.ID   FROM Customers c   JOIN (     SELECT m.REFID     FROM mailings3 m     WHERE m.RESPONSE = 'true'     ORDER BY m.REF_DATE     LIMIT 60000   ) AS t ON c.ID = t.REFID   WHERE c.age BETWEEN 13 AND 19 );
SELECT AVG(Customers.EDUCATIONNUM) FROM Customers JOIN (   SELECT Demog.GEOID   FROM Demog   WHERE Demog.INCOME_K = (     SELECT MAX(INCOME_K) FROM Demog   ) ) AS HighIncomePlace ON Customers.GEOID = HighIncomePlace.GEOID;
SELECT AVG(T2.age) FROM (     SELECT T1.REFID     FROM mailings3 AS T1     JOIN Customers AS T2 ON T1.REFID = T2.ID     WHERE T1.RESPONSE = 'true'     ORDER BY T1.REFID     LIMIT 60000 ) AS SubQ JOIN Customers AS T2 ON SubQ.REFID = T2.ID;
SELECT COUNT(*) FROM Customers WHERE SEX = 'Male';
SELECT GEOID FROM Customers WHERE OCCUPATION = 'Handlers-cleaners';
SELECT COUNT(*) FROM Customers WHERE age < 30;
SELECT GEOID FROM Demog WHERE INCOME_K BETWEEN 2100 AND 2500;
SELECT COUNT(*) FROM Demog WHERE GEOID BETWEEN 20 AND 50 AND INHABITANTS_K < 20;
SELECT INHABITANTS_K, INCOME_K FROM software_company.Demog WHERE GEOID = 239;
SELECT Customers.EDUCATIONNUM, Customers.OCCUPATION FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.age BETWEEN 20 AND 35 AND Demog.INCOME_K < 2000;
SELECT Demog.INHABITANTS_K FROM Demog JOIN Customers ON Demog.GEOID = Customers.GEOID WHERE Customers.MARITAL_STATUS = 'Divorced' AND Customers.age > 50;
SELECT c.GEOID, d.INCOME_K FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.age = (SELECT MAX(age) FROM Customers);
SELECT Demog.INCOME_K FROM Demog JOIN Customers ON Demog.GEOID = Customers.GEOID WHERE Customers.SEX = 'Male' AND Customers.EDUCATIONNUM <= 4;
SELECT Customers.OCCUPATION, Demog.INCOME_K FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.SEX = 'Male' AND Customers.EDUCATIONNUM BETWEEN 4 AND 6;
SELECT COUNT(*) FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Male' AND c.age BETWEEN 40 AND 60 AND c.MARITAL_STATUS = 'Widowed' AND d.INCOME_K >= 3000;
SELECT C.OCCUPATION FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID WHERE D.INHABITANTS_K BETWEEN 30 AND 40;
SELECT D.INCOME_K FROM Demog D JOIN Customers C ON D.GEOID = C.GEOID WHERE C.SEX = 'Female' AND C.MARITAL_STATUS = 'Widowed' AND C.EDUCATIONNUM <= 5;
SELECT C.MARITAL_STATUS FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID WHERE C.age BETWEEN 40 AND 60 GROUP BY C.MARITAL_STATUS ORDER BY SUM(D.INCOME_K) DESC LIMIT 1;
SELECT SUM(d.INHABITANTS_K) FROM Demog d JOIN Customers c ON d.GEOID = c.GEOID WHERE c.SEX = 'Male' AND c.age BETWEEN 20 AND 30 AND c.OCCUPATION IN ('Farming-fishing', 'Farming', 'Fishing');
SELECT Demog.INHABITANTS_K, Customers.age FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.MARITAL_STATUS = 'Married-civ-spouse' AND Customers.OCCUPATION = 'Machine-op-inspct';
SELECT COUNT(*) FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Female' AND c.age BETWEEN 50 AND 60 AND d.INHABITANTS_K BETWEEN 19 AND 24;
SELECT D.INCOME_K, D.INHABITANTS_K FROM Demog D JOIN Customers C ON D.GEOID = C.GEOID WHERE C.age > (SELECT AVG(age) * 0.8 FROM Customers);
SELECT     (COUNT(CASE WHEN INCOME_K >= 2500 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM     software_company.Customers WHERE     MARITAL_STATUS = 'Never-married';
SELECT ID, GEOID FROM Customers WHERE age > 65 AND EDUCATIONNUM < 3;
SELECT GEOID FROM Demog WHERE INCOME_K > (SELECT SUM(INCOME_K) / COUNT(GEOID) FROM Demog);
SELECT COUNT(*) FROM Customers c WHERE NOT EXISTS (     SELECT 1     FROM (SELECT * FROM mailings3 UNION ALL SELECT * FROM Mailings1_2) m     WHERE c.ID = m.REFID       AND m.RESPONSE = 'false'       AND m.REF_DATE BETWEEN '2007-02-01 12:00:00.0' AND '2007-02-28 12:00:00.0' );
SELECT COUNT(*) FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age BETWEEN 13 AND 19;
SELECT COUNT(*) FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.OCCUPATION = 'Other-service' AND Demog.INHABITANTS_K > 20;
SELECT COUNT(*) FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Male' AND c.age BETWEEN 20 AND 29 AND d.INCOME_K > 3000;
SELECT     (COUNT(CASE WHEN age > 65 AND MARITAL_STATUS = 'never married' THEN ID END) * 100.0 / COUNT(ID)) AS percentage FROM     Customers WHERE     GEOID = 24;
SELECT     (COUNT(CASE WHEN C.age BETWEEN 80 AND 89 THEN C.ID END) * 100.0 / COUNT(C.ID)) AS percentage FROM     Customers C JOIN     Demog D ON C.GEOID = D.GEOID WHERE     (D.INCOME_K / D.INHABITANTS_K) > 3000;
SELECT COUNT(DISTINCT m.REFID) FROM (SELECT * FROM mailings3 WHERE RESPONSE = TRUE UNION ALL SELECT * FROM Mailings1_2 WHERE RESPONSE = TRUE) m;
SELECT REFID FROM (     SELECT REFID FROM mailings3 WHERE RESPONSE = TRUE     UNION     SELECT REFID FROM Mailings1_2 WHERE RESPONSE = TRUE ) AS combined_results GROUP BY REFID;
SELECT COUNT(*) FROM Customers WHERE MARITAL_STATUS = 'Widowed' AND age < 50;
SELECT GEOID FROM Demog WHERE INHABITANTS_K < 30;
SELECT COUNT(*) FROM Demog WHERE GEOID BETWEEN 10 AND 30 AND INCOME_K < 2000;
SELECT MARITAL_STATUS FROM Customers WHERE age = 62 AND EDUCATIONNUM = 7;
SELECT D.INHABITANTS_K FROM Demog D JOIN Customers C ON D.GEOID = C.GEOID JOIN mailings3 M ON C.ID = M.REFID WHERE C.MARITAL_STATUS = 'Widowed' AND M.RESPONSE = 'false';
SELECT m3.RESPONSE, d.INHABITANTS_K FROM mailings3 m3 JOIN Customers c ON m3.REFID = c.ID JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Female' ORDER BY c.age DESC LIMIT 1;
SELECT c.GEOID, d.INCOME_K FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Female' AND c.EDUCATIONNUM <= 3;
SELECT C.EDUCATIONNUM, D.INCOME_K FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID JOIN (SELECT * FROM mailings3 WHERE RESPONSE = 'true') M ON C.ID = M.REFID WHERE C.age BETWEEN 30 AND 55;
SELECT COUNT(*) FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Male' AND c.age BETWEEN 30 AND 50 AND d.INCOME_K BETWEEN 2000 AND 2300;
SELECT C.EDUCATIONNUM, M.RESPONSE FROM Customers C JOIN mailings3 M ON C.ID = M.REFID JOIN Demog D ON C.GEOID = D.GEOID WHERE C.age BETWEEN 20 AND 30 GROUP BY C.EDUCATIONNUM, M.RESPONSE ORDER BY D.INHABITANTS_K DESC LIMIT 1;
SELECT Demog.INCOME_K FROM Demog JOIN Customers ON Demog.GEOID = Customers.GEOID WHERE Customers.SEX = 'Female' AND Customers.age BETWEEN 30 AND 55 AND Customers.OCCUPATION = 'machine-op-inspct';
SELECT C.MARITAL_STATUS, M.RESPONSE FROM Customers C JOIN mailings3 M ON C.ID = M.REFID WHERE C.SEX = 'Female' AND C.EDUCATIONNUM >= 8;
SELECT c.age FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Female' AND d.INHABITANTS_K < 30;
SELECT Demog.INCOME_K, mailings3.RESPONSE FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID JOIN mailings3 ON Customers.ID = mailings3.REFID WHERE Customers.SEX = 'Male' AND Customers.MARITAL_STATUS = 'Divorced' AND Customers.EDUCATIONNUM >= 6;
SELECT C.OCCUPATION, M.RESPONSE FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID JOIN mailings3 M ON C.ID = M.REFID WHERE C.SEX = 'Female' AND D.INHABITANTS_K BETWEEN 20 AND 25;
SELECT     (COUNT(CASE WHEN c.OCCUPATION = 'Handlers-cleaners' AND c.SEX = 'Male' AND m.RESPONSE = 'true' THEN 1 END) * 100.0 / COUNT(CASE WHEN c.OCCUPATION = 'Handlers-cleaners' AND c.SEX = 'Male' THEN 1 END)) as percentage FROM     Customers c JOIN     (SELECT * FROM mailings3 UNION ALL SELECT * FROM Mailings1_2) m ON c.ID = m.REFID;
SELECT D.INCOME_K, D.INHABITANTS_K FROM Demog D WHERE EXISTS (     SELECT 1     FROM mailings3 M     WHERE M.REFID > (         SELECT AVG(CASE WHEN RESPONSE = 'false' THEN 1 ELSE 0 END) * 0.5         FROM mailings3     )     AND M.REFID = C.REFID ) AND EXISTS (     SELECT 1     FROM Customers C     WHERE C.GEOID = D.GEOID );
SELECT     CAST(SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END) as ratio FROM     Customers WHERE     age BETWEEN 13 AND 19 AND EDUCATIONNUM > 10;
SELECT GEOID, 12 * INHABITANTS_K * INCOME_K AS Total_Income_Per_Year FROM Demog WHERE INCOME_K > 3300;
SELECT     CASE         WHEN COUNT(CASE WHEN RESPONSE = 'true' THEN REFID END) > COUNT(CASE WHEN RESPONSE = 'false' THEN REFID END)         THEN 'More Responders'         ELSE 'More Non-Responders'     END AS ResponseComparison FROM     (SELECT * FROM mailings3     UNION ALL     SELECT * FROM Mailings1_2) T;
SELECT D.GEOID, D.INHABITANTS_K * D.INCOME_K * 12 AS YearlyIncome FROM Demog D JOIN Customers C ON D.GEOID = C.GEOID WHERE C.SEX = 'Female' AND C.OCCUPATION = 'Sales';
SELECT C.EDUCATIONNUM, C.OCCUPATION, C.age FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID WHERE D.INHABITANTS_K = 33.658 AND C.SEX = 'Female' AND C.MARITAL_STATUS = 'Widowed';
SELECT RESPONSE FROM mailings3 WHERE REFID IN (     SELECT ID     FROM Customers     WHERE GEOID = 134 );
SELECT AVG(T1.INCOME_K) AS avg_monthly_income, T1.GEOID, (T1.INHABITANTS_K * T1.INCOME_K * 12) AS yearly_income FROM Demog AS T1 JOIN Customers AS T2 ON T1.GEOID = T2.GEOID WHERE T2.ID IN (209556, 290135) GROUP BY T1.GEOID;
SELECT C.EDUCATIONNUM, COUNT(C.ID) FROM Customers C JOIN mailings3 M ON C.GEOID = M.REFID WHERE M.REFID < 10 AND M.RESPONSE = 'true' GROUP BY C.EDUCATIONNUM;
SELECT COUNT(*) FROM Community_Area WHERE side = 'Central';
SELECT T2.district_name FROM Community_Area AS T1 JOIN District AS T2 ON T1.side = T2.side WHERE T1.community_area_name = 'Lincoln Square'
SELECT T2.district_name, T1.side, COUNT(T1.community_area_no) AS num_of_community_areas FROM Community_Area AS T1 JOIN District AS T2 ON T1.side = T2.district_no GROUP BY T1.side, T2.district_name ORDER BY num_of_community_areas DESC LIMIT 1;
SELECT community_area_name FROM Community_Area WHERE population = (SELECT MIN(population) FROM Community_Area);
SELECT commander FROM District WHERE district_name = 'Central';
SELECT email FROM District WHERE district_name = 'Central';
SELECT ca.community_area_name FROM Community_Area ca JOIN Neighborhood n ON ca.community_area_no = n.community_area_no WHERE n.neighborhood_name = 'Albany Park';
SELECT COUNT(*) FROM Neighborhood WHERE community_area_no IN (     SELECT community_area_no     FROM Community_Area     WHERE community_area_name = 'Lincoln Square' );
SELECT N.neighborhood_name FROM Neighborhood N JOIN Community_Area C ON N.community_area_no = C.community_area_no WHERE C.population = (SELECT MAX(population) FROM Community_Area)
SELECT neighborhood_name FROM Neighborhood JOIN Community_Area ON Neighborhood.community_area_no = Community_Area.community_area_no WHERE Community_Area.side = 'Central';
SELECT latitude, longitude FROM Crime JOIN District ON Crime.district_no = District.district_no WHERE District.district_name = 'Central';
SELECT COUNT(*) FROM Crime WHERE district_no IN (SELECT district_no FROM District WHERE district_name = 'Central');
SELECT COUNT(*) FROM Crime JOIN District ON Crime.district_no = District.district_no WHERE District.district_name = 'Central' AND Crime.domestic = 'TRUE';
SELECT case_number FROM Crime WHERE arrest = 'FALSE' AND district_no IN (     SELECT district_no FROM District     WHERE district_name = 'Central' );
SELECT COUNT(*) FROM Crime WHERE community_area_no = (     SELECT community_area_no     FROM Community_Area     WHERE population = (         SELECT MAX(population)         FROM Community_Area     ) );
SELECT COUNT(*) FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE Community_Area.community_area_name = 'Woodlawn' AND Crime.date LIKE '%1/2018%'
SELECT community_area_name, COUNT(report_no) as num_crimes FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE date LIKE '%1/2018%' AND community_area_name IN ('Woodlawn', 'Lincoln Square') GROUP BY community_area_name ORDER BY num_crimes DESC LIMIT 1;
SELECT T2.fax FROM Crime AS T1 JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.date LIKE '%1/2018%' GROUP BY T1.district_no ORDER BY COUNT(T1.case_number) DESC LIMIT 1
SELECT AVG(crime_count) as average_crimes FROM (     SELECT COUNT(Crime.report_no) as crime_count     FROM Crime     JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no     WHERE Community_Area.side = 'Central'     GROUP BY Crime.community_area_no ) as subquery;
SELECT (COUNT(CASE WHEN D.district_name = 'Central' THEN C.case_number END) * 100.0 / COUNT(C.case_number)) AS percentage FROM Crime AS C JOIN District AS D ON C.district_no = D.district_no;
SELECT COUNT(*) FROM Community_Area WHERE side = 'Far North';
SELECT commander FROM District WHERE district_name = 'Morgan Park';
SELECT D.district_name FROM Crime C JOIN District D ON C.district_no = D.district_no WHERE C.case_number = 'JB100065';
SELECT T2.district_name FROM Crime AS T1 JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.latitude = '41.66236555' AND T1.longitude = '-87.63470194';
SELECT T2.commander FROM Crime AS T1 JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.case_number = 'JB524952'
SELECT COUNT(*) FROM Crime JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE IUCR.primary_description = 'ASSAULT' AND IUCR.secondary_description = 'SIMPLE' AND Crime.date LIKE '%9/8/2018%';
SELECT T2.district_no FROM IUCR AS T1 JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.secondary_description = 'FIRST DEGREE MURDER' GROUP BY T2.district_no ORDER BY COUNT(T2.case_number) DESC LIMIT 1;
SELECT T1.index_code FROM IUCR AS T1 JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.case_number = 'JB296775';
SELECT T1.community_area_name FROM Community_Area AS T1 JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no JOIN IUCR AS T3 ON T2.iucr_no = T3.iucr_no WHERE T3.primary_description = 'THEFT' AND T3.secondary_description = 'POCKET-PICKING' GROUP BY T1.community_area_name ORDER BY COUNT(T2.case_number) DESC LIMIT 1;
Error: 第 8615 个样本有 2 个SQL。
SELECT N.neighborhood_name FROM Neighborhood N JOIN Community_Area C ON N.community_area_no = C.community_area_no WHERE C.community_area_name = 'West Englewood';
SELECT COUNT(DISTINCT T2.neighborhood_name) FROM Community_Area AS T1 JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.community_area_name = 'Roseland';
SELECT T2.description FROM Crime AS T1 JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.case_number = 'JB134191'
SELECT COUNT(T1.case_number) FROM Crime AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.community_area_name = 'North Lawndale' AND T1.arrest = 'TRUE';
SELECT     (COUNT(CASE WHEN C.secondary_description = '$500 AND UNDER' THEN C.case_number END) * 100.0 / COUNT(C.case_number)) AS percentage FROM     Crime C JOIN     IUCR I ON C.iucr_no = I.iucr_no JOIN     Community_Area CA ON C.community_area_no = CA.community_area_no WHERE     I.primary_description = 'THEFT' AND CA.community_area_name = 'West Englewood';
SELECT (COUNT(c.case_number) FILTER (WHERE f.title = 'Larceny') * 100.0 / COUNT(c.case_number)) AS larceny_percentage FROM Crime c JOIN Community_Area ca ON c.community_area_no = ca.community_area_no JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE ca.community_area_name = 'Edgewater';
SELECT COUNT(*) FROM Crime WHERE block = '018XX S KOMENSKY AVE' AND date LIKE '5/%/2018%';
SELECT community_area_name FROM Community_Area ORDER BY population DESC LIMIT 1;
SELECT COUNT(*) FROM Crime WHERE domestic = 'TRUE' AND location_description = 'ABANDONED BUILDING' AND date LIKE '%2018%';
Error: 第 8625 个样本有 2 个SQL。
SELECT COUNT(*) FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE Crime.arrest = 'TRUE' AND Crime.date LIKE '%2018%' AND Crime.location_description = 'ANIMAL HOSPITAL' AND Crime.fbi_code_no = '08B';
SELECT FBI_Code.description FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE FBI_Code.crime_against = 'Society';
SELECT D.commander FROM District D WHERE D.district_no = (     SELECT C.district_no FROM Crime C JOIN FBI_Code F ON C.fbi_code_no = F.fbi_code_no WHERE F.title = 'Disorderly Conduct' GROUP BY C.district_no ORDER BY COUNT(C.district_no) DESC LIMIT 1 );
SELECT T2.title FROM Crime AS T1 JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no GROUP BY T1.fbi_code_no ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM Crime JOIN District ON Crime.district_no = District.district_no WHERE District.district_name = 'Albany Park' AND Crime.location_description = 'APARTMENT' AND Crime.fbi_code_no IN (SELECT FBI_Code.fbi_code_no FROM FBI_Code WHERE FBI_Code.title = 'Criminal Sexual Abuse') AND Crime.arrest = true;
SELECT latitude, longitude FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE Community_Area.community_area_name = 'Rogers Park' AND FBI_Code.title = 'Robbery' AND FBI_Code.fbi_code_no = 3 GROUP BY latitude, longitude ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM Crime JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE IUCR.secondary_description = 'SOLICIT ON PUBLIC WAY' AND IUCR.primary_description = 'PROSTITUTION' AND Crime.arrest = 'TRUE' AND Community_Area.community_area_name = 'West Garfield Park';
SELECT COUNT(*) FROM Crime WHERE domestic = 'TRUE' AND location_description = 'BAR OR TAVERN' AND ward_no = (     SELECT ward_no     FROM Ward     WHERE population = (         SELECT MAX(population)         FROM Ward     ) );
SELECT COUNT(*) FROM Neighborhood WHERE community_area_no IN (     SELECT community_area_no     FROM Community_Area     WHERE community_area_name = 'Near North Side' );
SELECT COUNT(*) FROM Crime WHERE domestic = 'TRUE' AND arrest = 'TRUE' AND ward_no IN (     SELECT ward_no     FROM Ward     WHERE alderman_first_name = 'Walter' AND alderman_last_name = 'Burnett' AND alderman_name_suffix = 'Jr.' );
SELECT T3.title FROM Crime AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no JOIN FBI_Code AS T3 ON T1.fbi_code_no = T3.fbi_code_no WHERE T2.population = (SELECT MIN(population) FROM Community_Area) GROUP BY T3.fbi_code_no ORDER BY COUNT(T1.report_no) DESC LIMIT 1;
SELECT W.ward_office_address FROM Ward W JOIN Crime C ON W.ward_no = C.ward_no WHERE C.block = '010XX W LAKE ST';
SELECT T1.community_area_name FROM Community_Area AS T1 JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no JOIN IUCR AS T3 ON T2.iucr_no = T3.iucr_no WHERE T3.primary_description = 'PROSTITUTION' GROUP BY T1.community_area_name ORDER BY COUNT(T2.case_number) DESC LIMIT 1;
SELECT COUNT(*) FROM Crime JOIN Ward ON Crime.ward_no = Ward.ward_no WHERE Crime.iucr_no IN (SELECT IUCR.iucr_no FROM IUCR WHERE IUCR.primary_description = 'CRIMINAL DAMAGE' AND IUCR.secondary_description = 'VANDALISM') AND Crime.arrest = 'TRUE' AND Ward.alderman_first_name = 'Edward' AND Ward.alderman_last_name = 'Burke';
SELECT COUNT(*) FROM Crime WHERE domestic = 'TRUE' AND date LIKE '5/%/2018%';
SELECT iucr_no, index_code FROM IUCR WHERE primary_description = 'HOMICIDE';
SELECT commander, email FROM District WHERE district_name = 'Chicago Lawn';
Error: 第 8643 个样本有 2 个SQL。
SELECT community_area_name FROM Community_Area WHERE side = 'Northwest';
SELECT T1.title, T1.description FROM FBI_Code AS T1 JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.crime_against = 'Persons';
SELECT T1.secondary_description, T2.latitude, T2.longitude FROM IUCR AS T1 JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.iucr_no = 142;
SELECT COUNT(*) FROM Crime JOIN Ward ON Crime.ward_no = Ward.ward_no WHERE Ward.alderman_first_name = 'Brendan' AND Ward.alderman_last_name = 'Reilly' AND Crime.date LIKE '10/7/2018%';
SELECT COUNT(*) FROM Crime JOIN District ON Crime.district_no = District.district_no WHERE Crime.arrest = 'TRUE' AND District.district_name = 'Englewood' AND Crime.location_description = 'RESTAURANT';
SELECT C.case_number, W.alderman_first_name, W.alderman_last_name, W.alderman_name_suffix, D.district_name FROM Crime AS C JOIN Ward AS W ON C.ward_no = W.ward_no JOIN District AS D ON C.district_no = D.district_no WHERE C.block = '0000X N FRANCISCO AVE';
SELECT COUNT(*) FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE FBI_Code.title = 'Misc Non-Index Offense';
SELECT T2.neighborhood_name FROM Community_Area AS T1 JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.community_area_name = 'Douglas';
SELECT COUNT(T1.report_no) / 12.0 AS avg_crime_rate_per_month FROM Crime T1 JOIN Community_Area T2 ON T1.community_area_no = T2.community_area_no WHERE T2.population = (SELECT MAX(population) FROM Community_Area)
SELECT     (COUNT(CASE WHEN FBI_Code.title = 'Larceny' THEN Crime.report_no END) * 100.0 / COUNT(Crime.report_no)) AS Larceny_Percentage FROM     Crime JOIN     Community_Area ON Crime.community_area_no = Community_Area.community_area_no JOIN     FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE     Community_Area.side = 'Central'
SELECT T5.location_description, T6.alderman_first_name, T6.alderman_last_name, T6.alderman_name_suffix FROM IUCR AS T4 JOIN Crime AS T5 ON T4.iucr_no = T5.iucr_no JOIN Ward AS T6 ON T5.ward_no = T6.ward_no WHERE T4.primary_description = 'ARSON' AND T4.secondary_description = 'BY EXPLOSIVE';
SELECT T1.date, T1.latitude, T1.longitude FROM Crime AS T1 JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.primary_description = 'DECEPTIVE PRACTICE' AND T2.secondary_description = 'UNLAWFUL USE OF RECORDED SOUND'
SELECT COUNT(*) FROM Crime JOIN District ON Crime.district_no = District.district_no JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE District.commander = 'Adnardo Gutierrez' AND IUCR.primary_description = 'CRIMINAL SEXUAL ASSAULT' AND Crime.location_description = 'RESIDENCE';
SELECT (COUNT(CASE WHEN C.arrest = 'TRUE' THEN C.report_no END) * 100.0 / COUNT(C.report_no)) AS Percentage FROM Crime C JOIN Community_Area CA ON C.community_area_no = CA.community_area_no WHERE C.domestic = 'TRUE' AND CA.community_area_name = 'West Pullman'
SELECT     (COUNT(CASE WHEN C.domestic = 'TRUE' THEN C.report_no END) * 100.0 / COUNT(C.report_no)) AS domestic_violence_percentage,     GROUP_CONCAT(C.report_no) AS report_numbers_in_bank FROM     Crime C JOIN     Ward W ON C.ward_no = W.ward_no WHERE     W.alderman_first_name = 'Christopher' AND W.alderman_last_name = 'Taliaferro'     AND C.location_description = 'BANK';
SELECT COUNT(*) FROM Ward WHERE alderman_first_name = 'James';
SELECT COUNT(*) FROM Crime WHERE date LIKE '1/1/2018%';
SELECT AVG(population) FROM Community_Area WHERE side = 'West';
SELECT C.report_no FROM Crime C JOIN Ward W ON C.ward_no = W.ward_no JOIN Community_Area CA ON C.community_area_no = CA.community_area_no WHERE W.alderman_first_name = 'Edward' AND W.alderman_last_name = 'Burke' AND CA.population = (SELECT MAX(population) FROM Community_Area) ORDER BY C.beat DESC LIMIT 1;
SELECT COUNT(*) FROM Crime WHERE location_description = 'STREET' AND fbi_code_no IN (     SELECT fbi_code_no     FROM FBI_Code     WHERE title = 'Homicide 1st & 2nd Degree' );
SELECT W.alderman_first_name, W.alderman_last_name FROM Ward AS W JOIN Crime AS C ON W.ward_no = C.ward_no WHERE C.report_no = 23769;
SELECT T1.case_number FROM Crime AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.community_area_name = 'Lincoln Square' AND T1.domestic = 'TRUE';
SELECT T1.case_number FROM Crime AS T1 JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T2.ward_office_address = '1958 N. Milwaukee Ave.' AND T1.location_description = 'APARTMENT'
SELECT COUNT(*) FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE Community_Area.community_area_name = 'Bridgeport' AND Crime.beat < 1000;
SELECT report_no FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE Community_Area.side = 'Far North' AND Community_Area.population > 60000;
SELECT report_no FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE Community_Area.community_area_name = 'Riverdale' AND FBI_Code.crime_against = 'Property';
SELECT COUNT(*) FROM Crime JOIN Ward ON Crime.ward_no = Ward.ward_no WHERE Ward.ward_email = 'ward13@cityofchicago.org' AND Crime.domestic = 'TRUE';
SELECT T2.address FROM Crime AS T1 JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.case_number = 'JB107731'
SELECT SUM(Crime.beat) FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE Community_Area.side = 'Central' AND Community_Area.population > 50000;
SELECT case_number FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE FBI_Code.crime_against = 'Society' AND Crime.date LIKE '6/%/2018%';
SELECT     (COUNT(CASE WHEN domestic = 'TRUE' THEN 1 END) * 100.0 / COUNT(domestic)) AS Domestic_Violence_Percentage FROM     Crime WHERE     community_area_no = (         SELECT             community_area_no         FROM             Community_Area         WHERE             population = (                 SELECT                     MAX(population)                 FROM                     Community_Area             )     );
SELECT T1.case_number FROM Crime AS T1 JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T2.Population < 52000 AND T1.beat > (SELECT AVG(T3.beat) * 0.9 FROM Crime AS T3)
SELECT community_area_name FROM Community_Area WHERE side = 'Far North' AND population BETWEEN 50000 AND 70000;
SELECT latitude, longitude FROM Crime WHERE location_description = 'ALLEY' AND arrest = 'TRUE'
SELECT commander, email, phone FROM District WHERE district_name = 'Ogden';
SELECT fbi_code_no, description FROM FBI_Code WHERE title = 'Gambling';
SELECT (COUNT(CASE WHEN T1.index_code = 'I' THEN T1.iucr_no END) * 100.0 / COUNT(T1.iucr_no)) AS severe_percentage FROM IUCR AS T1 JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no;
SELECT location_description, COUNT(case_number) as crime_count FROM Crime JOIN District ON Crime.district_no = District.district_no WHERE District.district_name = 'Austin' GROUP BY location_description ORDER BY crime_count DESC LIMIT 1;
Error: 第 8682 个样本有 3 个SQL。
SELECT community_area_no FROM Crime WHERE location_description = 'STREET' GROUP BY community_area_no ORDER BY COUNT(location_description) DESC LIMIT 1;
SELECT AVG(C.Count) as Average_Reckless_Homicides FROM (     SELECT COUNT(Crime.report_no) as Count, Crime.district_no     FROM Crime     INNER JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no     WHERE IUCR.secondary_description = 'RECKLESS HOMICIDE'     GROUP BY Crime.district_no ) C JOIN District ON C.district_no = District.district_no GROUP BY District.district_name;
SELECT T2.ward_office_address, T2.ward_office_phone FROM Crime AS T1 JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T1.arrest = 'FALSE' GROUP BY T1.ward_no ORDER BY COUNT(T1.report_no) DESC LIMIT 1;
SELECT T1.case_number, T1.latitude, T1.longitude FROM Crime AS T1 JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.secondary_description = 'CHILD ABDUCTION';
SELECT IUCR.secondary_description, COUNT(IUCR.secondary_description) as crime_count FROM Crime JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE Community_Area.side = 'Northwest' GROUP BY IUCR.secondary_description ORDER BY crime_count DESC LIMIT 1;
SELECT community_area_no FROM Crime WHERE domestic = 'TRUE' GROUP BY community_area_no ORDER BY COUNT(*) LIMIT 1;
SELECT     (COUNT(CASE WHEN IUCR.secondary_description LIKE '%CANNABIS%' THEN IUCR.iucr_no END) * 100 / COUNT(IUCR.iucr_no)) AS Percentage_Cannabis_Related FROM     IUCR JOIN     FBI_Code ON IUCR.iucr_no = FBI_Code.fbi_code_no WHERE     FBI_Code.title = 'Drug Abuse';
SELECT COUNT(T1.case_number) / 28 AS average_crimes_per_day FROM Crime AS T1 JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.date LIKE '2/%/2018' AND T2.index_code = 'N'
SELECT ca.community_area_name, ca.population FROM Community_Area ca JOIN Crime c ON ca.community_area_no = c.community_area_no JOIN IUCR i ON c.iucr_no = i.iucr_no WHERE i.secondary_description = 'SOLICIT FOR PROSTITUTE' GROUP BY ca.community_area_name, ca.population HAVING COUNT(*) > (     SELECT COUNT(*) / COUNT(DISTINCT c2.iucr_no)     FROM Crime c2     JOIN IUCR i2 ON c2.iucr_no = i2.iucr_no     WHERE i2.secondary_description = 'SOLICIT FOR PROSTITUTE' );
SELECT     (COUNT(CASE WHEN FBI_Code.title = 'Disorderly Conduct' THEN Crime.report_no END) * 100.0 / COUNT(Crime.report_no)) AS Percentage FROM     Crime JOIN     FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no JOIN     District ON Crime.district_no = District.district_no WHERE     District.district_name = 'Harrison';
SELECT     (COUNT(CASE WHEN c.secondary_description = 'VEHICULAR HIJACKING' THEN 1 END) / COUNT(DISTINCT d.district_name)) -     (COUNT(CASE WHEN c.secondary_description = 'AGGRAVATED VEHICULAR HIJACKING' THEN 1 END) / COUNT(DISTINCT d.district_name)) FROM     Crime AS cr JOIN     IUCR AS i ON cr.iucr_no = i.iucr_no JOIN     District AS d ON cr.district_no = d.district_no JOIN     (         SELECT             iucr_no,             secondary_description         FROM             IUCR         WHERE             secondary_description IN ('VEHICULAR HIJACKING', 'AGGRAVATED VEHICULAR HIJACKING')     ) AS c ON cr.iucr_no = c.iucr_no;
SELECT COUNT(*) FROM Crime WHERE longitude = -87.72658001;
SELECT C.crime FROM Crime AS C JOIN IUCR AS I ON C.iucr_no = I.iucr_no WHERE I.primary_description = 'NARCOTICS';
SELECT T1.alderman_first_name FROM Ward AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.population > 50000;
SELECT T1.report_no FROM Crime AS T1 JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.title = 'Drug Abuse';
SELECT COUNT(*) FROM Crime JOIN District ON Crime.district_no = District.district_no JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE District.district_name = 'Calumet' AND IUCR.primary_description = 'WEAPON VIOLATION';
SELECT T1.latitude, T1.longitude FROM Crime AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.community_area_name = 'Belmont Cragin';
SELECT COUNT(DISTINCT T3.primary_description) FROM Neighborhood AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no JOIN IUCR AS T3 ON T3.iucr_no = T1.iucr_no WHERE T1.neighborhood_name = 'Hermosa';
SELECT COUNT(*) FROM Crime JOIN District ON Crime.district_no = District.district_no WHERE District.commander = 'Ronald A. Pontecore Jr.' AND Crime.domestic = 'TRUE';
SELECT COUNT(*) FROM Crime JOIN District ON Crime.district_no = District.district_no JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE District.district_name = 'Wentworth' AND FBI_Code.crime_against = 'Society';
SELECT District.phone FROM District JOIN Ward ON District.district_no = Ward.ward_no WHERE Ward.alderman_first_name = 'Emma' AND Ward.alderman_last_name = 'Mitts';
SELECT COUNT(*) FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE FBI_Code.description = 'The theft of a motor vehicle' AND Community_Area.community_area_name = 'Lake View';
SELECT T2.district_name FROM Crime AS T1 JOIN District AS T2 ON T1.district_no = T2.district_no JOIN IUCR AS T3 ON T1.iucr_no = T3.iucr_no WHERE T3.primary_description = 'INTIMIDATION' GROUP BY T2.district_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T4.primary_description, T4.secondary_description FROM Crime AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no JOIN FBI_Code AS T3 ON T1.fbi_code_no = T3.fbi_code_no JOIN IUCR AS T4 ON T1.iucr_no = T4.iucr_no WHERE T2.community_area_name = 'North Lawndale' AND T1.domestic = 'TRUE' GROUP BY T4.primary_description, T4.secondary_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT W.ward_no, COUNT(C.case_number) as crime_count FROM Ward W JOIN Crime C ON W.ward_no = C.ward_no JOIN IUCR I ON C.iucr_no = I.iucr_no WHERE W.Population > 55000 AND I.primary_description = 'INTIMIDATION' AND I.secondary_description = 'EXTORTION' GROUP BY W.ward_no ORDER BY crime_count DESC LIMIT 1;
SELECT T2.commander FROM IUCR AS T1 JOIN Crime AS T3 ON T1.iucr_no = T3.iucr_no JOIN District AS T2 ON T3.district_no = T2.district_no WHERE T1.secondary_description = 'CRIMINAL SEXUAL ABUSE' GROUP BY T2.commander ORDER BY COUNT(*) DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN C.domestic = 'FALSE') * 100.0 / COUNT(C.case_number)) AS percentage FROM     Crime C JOIN     District D ON C.district_no = D.district_no WHERE     D.district_name = 'Jefferson Park';
SELECT AVG(W.Population) FROM Ward W JOIN Crime C ON W.ward_no = C.ward_no WHERE C.location_description = 'APARTMENT' AND C.arrest = 'FALSE';
SELECT T1.alderman_first_name, T1.alderman_last_name FROM Ward AS T1 JOIN (     SELECT ward_no, MAX(Population) as max_population     FROM Ward     GROUP BY ward_no     ORDER BY max_population DESC     LIMIT 5 ) AS T2 ON T1.ward_no = T2.ward_no ORDER BY T2.max_population DESC;
SELECT COUNT(*) FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE FBI_Code.crime_against = 'Property'
SELECT COUNT(*) FROM District WHERE zip_code = 60608;
SELECT fbi_code_no, crime_against FROM FBI_Code WHERE title = 'Criminal Sexual Abuse';
SELECT community_area_name FROM Community_Area JOIN Neighborhood ON Community_Area.community_area_no = Neighborhood.community_area_no GROUP BY community_area_name ORDER BY COUNT(Neighborhood.community_area_no) DESC LIMIT 1;
SELECT COUNT(*) FROM Crime WHERE latitude = 41.64820151 AND longitude = -87.54430496 AND iucr_no IN (SELECT iucr_no FROM IUCR WHERE index_code = 'I');
SELECT D.commander FROM District D JOIN Crime C ON D.district_no = C.district_no WHERE C.arrest = 'FALSE' GROUP BY D.commander ORDER BY COUNT(C.report_no) DESC LIMIT 1;
SELECT T1.primary_description, T1.secondary_description FROM IUCR AS T1 JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.location_description = 'AIRCRAFT' GROUP BY T1.iucr_no ORDER BY COUNT(T1.iucr_no) DESC LIMIT 1;
SELECT T1.district_name FROM District AS T1 JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.location_description = 'LIBRARY' AND (T1.district_name = 'Deering' OR T1.district_name = 'Near West') GROUP BY T1.district_name ORDER BY COUNT(T2.district_no) DESC LIMIT 1;
SELECT COUNT(*) FROM Crime JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE IUCR.primary_description = 'BURGLARY' AND IUCR.secondary_description = 'FORCIBLE ENTRY' AND Crime.location_description = 'DAY CARE CENTER' AND Crime.arrest = 'TRUE';
SELECT D.district_name FROM District D JOIN Crime C ON D.district_no = C.district_no WHERE C.domestic = 'TRUE' GROUP BY D.district_name ORDER BY COUNT(C.district_no) DESC LIMIT 1;
SELECT T1.location_description FROM Crime AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.population = (     SELECT MIN(population)     FROM Community_Area ) GROUP BY T1.location_description ORDER BY COUNT(T1.location_description) DESC LIMIT 1;
SELECT COUNT(*) FROM Crime WHERE arrest = 'FALSE';
SELECT T1.latitude, T1.longitude FROM Crime AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no JOIN FBI_Code AS T3 ON T1.fbi_code_no = T3.fbi_code_no WHERE T2.community_area_name = 'Chatham' AND T3.title = 'Simple Assault' GROUP BY T1.latitude, T1.longitude ORDER BY COUNT(T1.latitude) DESC LIMIT 1;
SELECT C.community_area_name FROM Crime AS CR JOIN FBI_Code AS F ON CR.fbi_code_no = F.fbi_code_no JOIN Community_Area AS C ON CR.community_area_no = C.community_area_no WHERE F.description = 'Unlawful taking, carrying, leading, or riding away of property from the possession or constructive possession of another person' AND C.side = 'South' GROUP BY C.community_area_name ORDER BY COUNT(F.fbi_code_no) DESC LIMIT 1;
SELECT COUNT(*) FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE Community_Area.community_area_name = 'Englewood' AND FBI_Code.crime_against = 'Society';
WITH FraudIncidents AS (   SELECT     location_description,     COUNT(report_no) as num_incidents   FROM     Crime c   JOIN     FBI_Code f ON c.fbi_code_no = f.fbi_code_no   WHERE     f.title = 'Fraud' AND     SUBSTR(c.date, 1, 1) = '1' AND     SUBSTR(c.date, 5, 4) = '2018'   GROUP BY     location_description ), MaxIncidents AS (   SELECT     MAX(num_incidents) as max_num_incidents   FROM     FraudIncidents ) SELECT   location_description as location_with_majority,   CAST(SUM(num_incidents) / 4.0 AS DECIMAL(10,2)) as avg_weekly_incidents FROM   FraudIncidents JOIN   MaxIncidents WHERE   num_incidents = max_num_incidents GROUP BY   location_with_majority;
SELECT community_area_name FROM Community_Area WHERE population > 50000 LIMIT 3;
SELECT community_area_name FROM Community_Area WHERE side = 'Central';
SELECT     (SELECT COUNT(community_area_no) FROM Community_Area WHERE side = 'South' AND population > 30000) -     (SELECT COUNT(community_area_no) FROM Community_Area WHERE side = 'North' AND population > 30000) AS difference;
SELECT phone, fax, tty, twitter FROM District WHERE district_name = 'Near West';
SELECT commander FROM District WHERE district_name = 'Lincoln';
SELECT T1.primary_description, T1.secondary_description FROM IUCR AS T1 WHERE T1.iucr_no = 275;
SELECT     (COUNT(CASE WHEN IUCR.primary_description = 'CRIME SEXUAL ASSAULT' THEN IUCR.iucr_no END) * 100.0 / COUNT(IUCR.iucr_no)) AS percentage_severe_cases_sexual_assault FROM     IUCR WHERE     IUCR.index_code = 'I';
SELECT n.neighborhood_name FROM Neighborhood n JOIN Community_Area c ON n.community_area_no = c.community_area_no WHERE c.community_area_name = 'North Center';
SELECT COUNT(*) FROM Neighborhood WHERE community_area_no = (SELECT community_area_no FROM Community_Area WHERE community_area_name = 'Forest Glen');
Error: 第 8737 个样本有 2 个SQL。
SELECT COUNT(report_no) FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE FBI_Code.title = 'Weapons Violation';
SELECT case_number FROM Crime WHERE fbi_code_no IN (SELECT fbi_code_no FROM FBI_Code WHERE title = 'Criminal Sexual Assault' AND crime_against = 'Persons') AND arrest = 'TRUE' LIMIT 3;
SELECT T2.district_name FROM Crime AS T1 JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.case_number = 'JB106545'
SELECT T1.primary_description FROM IUCR AS T1 JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.case_number = 'JB106010';
SELECT community_area_name FROM Community_Area WHERE community_area_no IN (     SELECT community_area_no     FROM Crime     WHERE fbi_code_no IN (         SELECT fbi_code_no         FROM FBI_Code         WHERE title = 'Fraud'     )     GROUP BY community_area_no     LIMIT 3 );
SELECT T3.title FROM Crime AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no JOIN FBI_Code AS T3 ON T1.fbi_code_no = T3.fbi_code_no WHERE T2.community_area_name = 'Rogers Park' GROUP BY T3.title ORDER BY COUNT(*) DESC LIMIT 1;
SELECT D.district_name FROM Crime C JOIN District D ON C.district_no = D.district_no WHERE C.case_number = 'JB120039' GROUP BY D.district_name HAVING COUNT(C.case_number) > 1;
SELECT     (COUNT(CASE WHEN C.location_description = 'STREET' THEN C.fbi_code_no END) * 100.0 / COUNT(C.fbi_code_no)) AS Percentage FROM     Crime AS C JOIN     FBI_Code AS F ON C.fbi_code_no = F.fbi_code_no WHERE     F.title = 'Drug Abuse';
SELECT ward_no FROM Ward ORDER BY Population DESC LIMIT 1;
SELECT beat, location_description FROM Crime WHERE case_number = 'JB112212';
SELECT fbi_code_no FROM FBI_Code WHERE description = 'The killing of one human being by another.';
SELECT T1.ward_office_address FROM Ward AS T1 JOIN Crime AS T2 ON T1.ward_no = T2.ward_no JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.community_area_name = 'Montclare' LIMIT 5;
SELECT D.commander FROM Crime C JOIN District D ON C.district_no = D.district_no WHERE C.beat = 532 AND C.location_description = 'YARD';
SELECT N.neighborhood_name FROM Neighborhood N JOIN Community_Area C ON N.community_area_no = C.community_area_no WHERE C.community_area_name = 'Lake View';
SELECT N.neighborhood_name FROM Neighborhood N JOIN Crime C ON N.community_area_no = C.community_area_no WHERE C.report_no = 23843;
SELECT T1.description FROM FBI_Code AS T1 JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.report_no = 23778;
SELECT T3.report_no FROM District AS T1 JOIN Crime AS T3 ON T1.district_no = T3.district_no WHERE T1.commander = 'Jill M. Stevens';
SELECT     (COUNT(CASE WHEN C.location_description = 'HOUSE' THEN C.report_no END) * 100.0 / COUNT(C.report_no)) AS Percentage FROM     Crime C JOIN     Neighborhood N ON C.community_area_no = N.community_area_no WHERE     N.neighborhood_name = 'Avalon Park';
SELECT alderman_first_name, alderman_last_name, alderman_name_suffix FROM Ward WHERE ward_no = 21;
SELECT ward_no FROM Ward ORDER BY Population DESC LIMIT 1;
SELECT COUNT(*) FROM Crime JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE IUCR.primary_description = 'ASSAULT';
SELECT COUNT(*) FROM Crime JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE IUCR.index_code = 'I';
SELECT COUNT(*) FROM Crime JOIN Ward ON Crime.ward_no = Ward.ward_no WHERE Ward.alderman_first_name = 'Pat' AND Ward.alderman_last_name = 'Dowell' AND Crime.arrest = 'FALSE';
SELECT T1.alderman_first_name, T1.alderman_last_name, T1.alderman_name_suffix FROM Ward AS T1 JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE SUBSTR(T2.date, 1, 1) = '1' AND SUBSTR(T2.date, 5, 4) = '2018' GROUP BY T1.ward_no ORDER BY COUNT(T1.ward_no) DESC LIMIT 1;
SELECT COUNT(*) FROM Crime WHERE domestic = 'TRUE' AND ward_no = (     SELECT ward_no     FROM Ward     WHERE Population = (         SELECT MAX(Population)         FROM Ward     ) );
SELECT C.latitude, C.longitude FROM Crime C JOIN Ward W ON C.ward_no = W.ward_no WHERE W.alderman_first_name = 'Pat' AND W.alderman_last_name = 'Dowell';
SELECT T1.alderman_first_name, T1.alderman_last_name, Count(T2.ward_no) as incident_count FROM Ward AS T1 JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE Substr(T2.date, 1, 1) = '1' AND Substr(T2.date, 5, 4) = '2018' AND (T1.alderman_first_name = 'Pat' AND T1.alderman_last_name = 'Dowell' OR T1.alderman_first_name = 'Sophia' AND T1.alderman_last_name = 'King') GROUP BY T1.ward_no ORDER BY incident_count DESC LIMIT 1
SELECT T1.case_number FROM Crime AS T1 JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.primary_description = 'BATTERY';
SELECT COUNT(*) FROM Crime JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE IUCR.primary_description = 'BATTERY' AND Crime.arrest = 'FALSE';
SELECT T1.case_number FROM Crime AS T1 JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.title = 'Homicide 1st & 2nd Degree'
SELECT COUNT(*) FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE Substr(Crime.date, 1, 1) = '1' AND Substr(Crime.date, 5, 4) = '2018' AND FBI_Code.crime_against = 'Property';
SELECT COUNT(*) FROM Crime JOIN District ON Crime.district_no = District.district_no WHERE District.commander = 'Robert A. Rubio' AND SUBSTR(Crime.date, 1, 1) = '1' AND SUBSTR(Crime.date, 5, 4) = '2018';
SELECT T2.commander FROM Crime AS T1 JOIN District AS T2 ON T1.district_no = T2.district_no WHERE Substr(T1.date, 1, 1) = '1' AND Substr(T1.date, 5, 4) = '2018' GROUP BY T2.commander HAVING T2.commander IN ('Robert A. Rubio', 'Glenn White') ORDER BY COUNT(T1.ward_no) DESC LIMIT 1;
SELECT DISTINCT C.block FROM Crime C JOIN District D ON C.district_no = D.district_no WHERE D.commander = 'Robert A. Rubio';
SELECT COUNT(*) / 12 AS Average_Incidents_Per_Month FROM Crime WHERE date LIKE '%2018%' AND ward_no = (     SELECT ward_no     FROM Ward     WHERE Population = (         SELECT MAX(Population)         FROM Ward     ) );
SELECT     (COUNT(CASE WHEN IUCR.primary_description = 'BATTERY' THEN IUCR.iucr_no END) * 100.0 / COUNT(IUCR.iucr_no)) AS Battery_Percentage FROM     Crime JOIN     IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE     Crime.arrest = 'FALSE';
SELECT COUNT(*) FROM businesses WHERE owner_state = 'CA';
SELECT COUNT(*) FROM inspections WHERE score = 100;
SELECT COUNT(*) FROM inspections WHERE YEAR(date) = 2016 AND type = 'Routine - Unscheduled';
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = 100 GROUP BY b.name;
SELECT COUNT(DISTINCT b.business_id) FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE YEAR(i.date) = 2016 AND b.city IN ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO');
SELECT inspections.type FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.name = 'Tiramisu Kitchen' AND inspections.date = '2014-01-14';
SELECT COUNT(*) FROM violations WHERE business_id = (SELECT business_id FROM businesses WHERE name = 'Tiramisu Kitchen') AND date = '2014-01-14' AND risk_category = 'Low Risk';
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'Low Risk' AND YEAR(v.date) = 2014;
SELECT violations.description FROM violations JOIN businesses ON violations.business_id = businesses.business_id WHERE businesses.name = 'Tiramisu Kitchen' AND violations.date = '2014-01-14' AND violations.risk_category = 'Low Risk';
SELECT violations.description FROM violations JOIN businesses ON violations.business_id = businesses.business_id WHERE businesses.name = 'Tiramisu Kitchen' AND violations.risk_category = 'High Risk';
SELECT COUNT(*) FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.name = 'Tiramisu Kitchen' AND inspections.type = 'Routine - Unscheduled';
SELECT COUNT(*) FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.name = 'Tiramisu Kitchen' AND inspections.type = 'Routine - Unscheduled' AND inspections.score > 70;
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE b.name IN ('Tiramisu Kitchen', 'OMNI S.F. Hotel - 2nd Floor Pantry') AND v.risk_category = 'Low Risk' GROUP BY b.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM violations WHERE business_id IN (     SELECT business_id     FROM businesses     WHERE city IN ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO') ) AND risk_category = 'High Risk';
SELECT b.name, COUNT(v.risk_category) AS high_risk_violations FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High Risk' GROUP BY b.name ORDER BY high_risk_violations DESC LIMIT 1;
SELECT AVG(score) FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE name = 'Tiramisu Kitchen';
SELECT business_id FROM inspections GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1;
SELECT business_id FROM violations GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1;
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = 100 AND i.type = 'Routine - Unscheduled' AND i.date = '2016-09-28';
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High' GROUP BY b.name ORDER BY COUNT(v.business_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT v.violation_type_id) FROM violations v JOIN businesses b ON v.business_id = b.business_id WHERE b.name = 'Stacks Restaurant' AND v.date = '2016-10-04';
SELECT violations.description FROM violations JOIN businesses ON violations.business_id = businesses.business_id WHERE businesses.name = 'Chez Fayala, Inc.' AND violations.risk_category = 'Moderate Risk' AND violations.date = '2016-07-01';
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.type = 'Routine - Unscheduled' AND i.date = '2016-09-26' ORDER BY i.score LIMIT 1;
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.type = 'Complaint' GROUP BY b.business_id ORDER BY COUNT(i.business_id) DESC LIMIT 1;
SELECT COUNT(*) FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.name = 'Soma Restaurant And Bar' AND inspections.type = 'Routine - Unscheduled';
SELECT b.address FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'Low Risk' GROUP BY b.business_id ORDER BY COUNT(v.business_id) DESC LIMIT 1;
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'Low Risk' AND v.description = 'Permit license or inspection report not posted' ORDER BY v.date LIMIT 1;
SELECT i.business_id, COUNT(*) as inspection_count FROM inspections i WHERE i.business_id = (     SELECT v.business_id     FROM (         SELECT business_id, COUNT(*) as violation_count         FROM violations         GROUP BY business_id         ORDER BY violation_count DESC         LIMIT 1     ) v ) GROUP BY i.business_id;
SELECT COUNT(*) FROM violations WHERE business_id = (SELECT business_id FROM businesses WHERE business_certificate = 304977) AND date = '2013-10-07';
SELECT AVG(i.score) FROM inspections i JOIN businesses b ON i.business_id = b.business_id WHERE b.name = 'Chairman Bao' AND i.type = 'Routine - Unscheduled';
SELECT     (COUNT(CASE WHEN v.risk_category = 'Moderate Risk' THEN 1 END) * 100.0 / COUNT(v.business_id)) AS percentage FROM     violations v JOIN     businesses b ON v.business_id = b.business_id WHERE     b.name = 'Melody Lounge';
SELECT COUNT(*) FROM businesses WHERE city = 'HAYWARD';
SELECT COUNT(*) FROM inspections WHERE score <= 50;
SELECT COUNT(business_id) FROM businesses WHERE application_date BETWEEN '2012-01-01' AND '2012-12-31';
SELECT COUNT(*) FROM inspections WHERE type = 'Foodborne Illness Investigation' AND date BETWEEN '2014-01-01' AND '2014-12-31';
SELECT COUNT(*) FROM (   SELECT owner_name   FROM businesses   GROUP BY owner_name   HAVING COUNT(business_id) >= 5 )
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = 100 AND YEAR(i.date) = 2013 GROUP BY b.name;
SELECT b.city, COUNT(*) AS num_establishments FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High Risk' AND YEAR(v.date) = 2016 GROUP BY b.city ORDER BY num_establishments DESC LIMIT 1;
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = (SELECT MIN(score) FROM inspections)
SELECT COUNT(*) FROM violations WHERE business_id = (SELECT business_id FROM businesses WHERE name = 'Tiramisu Kitchen') AND risk_category = 'High Risk';
SELECT COUNT(*) FROM (   SELECT i.business_id   FROM inspections i   JOIN businesses b ON i.business_id = b.business_id   WHERE b.tax_code = 'H24' AND i.type = 'Complaint'   GROUP BY i.business_id   HAVING COUNT(i.business_id) >= 5 ) AS subquery;
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.description = 'Contaminated or adulterated food' AND YEAR(v.date) = 2013;
SELECT COUNT(*) FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.postal_code = '94102' AND inspections.score >= 90 AND YEAR(inspections.date) = 2015;
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score >= 90 AND YEAR(i.date) BETWEEN 2015 AND 2018 GROUP BY b.business_id HAVING COUNT(DISTINCT YEAR(i.date)) = 4;
SELECT AVG(i.score) FROM inspections i JOIN businesses b ON i.business_id = b.business_id WHERE b.owner_name = 'Yiu Tim Chan' AND b.address = '808 Pacific Ave' AND b.city = 'San Francisco' AND YEAR(i.date) BETWEEN 2014 AND 2016;
SELECT AVG(i.score) FROM inspections i JOIN businesses b ON i.business_id = b.business_id WHERE b.owner_name = (     SELECT owner_name     FROM businesses     GROUP BY owner_name     ORDER BY COUNT(business_id) DESC     LIMIT 1 );
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'Low Risk' AND YEAR(v.date) = 2014 GROUP BY b.business_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT b.owner_name FROM (   SELECT owner_name, COUNT(business_id) as num_businesses   FROM businesses b   GROUP BY owner_name   ORDER BY num_businesses DESC   LIMIT 5 ) as top_owners JOIN businesses b ON b.owner_name = top_owners.owner_name JOIN violations v ON b.business_id = v.business_id AND v.risk_category = 'High Risk' GROUP BY top_owners.owner_name ORDER BY COUNT(v.business_id) DESC LIMIT 1;
SELECT b.name, AVG(i.score) as average_score FROM businesses b JOIN inspections i ON b.business_id = i.business_id GROUP BY i.business_id ORDER BY COUNT(i.business_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT business_id) FROM inspections WHERE score = 100 AND YEAR(date) = 2013;
SELECT business_id FROM inspections WHERE type = 'Structural Inspection' AND YEAR(date) = 2016 AND MONTH(date) = 2;
SELECT COUNT(*) FROM violations WHERE risk_category = 'Low Risk' AND description = 'Unpermitted food facility';
SELECT businesses.business_id, violations.risk_category, violations.description FROM businesses JOIN violations ON businesses.business_id = violations.business_id WHERE violations.violation_type_id = '103101';
SELECT i.date FROM inspections i JOIN businesses b ON i.business_id = b.business_id WHERE b.owner_city = 'San Bruno' AND i.score = 100 ORDER BY i.date DESC LIMIT 1;
SELECT inspections.type, violations.description FROM inspections JOIN violations ON inspections.business_id = violations.business_id JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.name = 'ART's CAFÉ' AND violations.risk_category = 'Moderate Risk';
SELECT violations.violation_type_id, violations.description FROM violations JOIN businesses ON violations.business_id = businesses.business_id WHERE businesses.name = 'STARBUCKS' AND violations.risk_category = 'High Risk';
SELECT inspections.date, inspections.score, inspections.type FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.tax_code = 'AA';
SELECT businesses.business_id, businesses.name, businesses.address FROM businesses JOIN inspections ON businesses.business_id = inspections.business_id WHERE inspections.date = '2016-07-30';
SELECT violations.date, violations.risk_category, violations.description, businesses.name FROM violations JOIN businesses ON violations.business_id = businesses.business_id WHERE businesses.owner_name = 'Jade Chocolates LLC';
SELECT businesses.name, violations.risk_category, violations.description FROM violations JOIN businesses ON violations.business_id = businesses.business_id WHERE violations.violation_type_id = 103111;
SELECT b.name, b.city, b.tax_code FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.date = '2014-06-03' AND v.risk_category = 'High Risk' LIMIT 5;
SELECT i.type FROM inspections i JOIN businesses b ON i.business_id = b.business_id WHERE b.name = 'El Aji Peruvian Restaurant' ORDER BY i.score DESC LIMIT 1;
SELECT b.owner_name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High Risk' AND v.description = 'Improper cooking time or temperatures';
SELECT b.name, b.address FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.date = '2015-02-02' AND i.type = 'Reinspection/Followup';
SELECT b.name, b.business_certificate FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score < 50;
SELECT COUNT(*) FROM businesses WHERE address = '1825 POST St #223' AND city = 'San Francisco';
SELECT owner_name FROM businesses WHERE owner_zip = '94104';
SELECT COUNT(*) FROM businesses WHERE tax_code = 'H25';
SELECT COUNT(*) FROM violations WHERE YEAR(date) = 2014 AND risk_category = 'Low Risk';
SELECT businesses.business_id, violations.risk_category FROM businesses JOIN violations ON businesses.business_id = violations.business_id WHERE businesses.owner_name = 'San Francisco Madeleine, Inc.';
SELECT b.owner_name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = 100;
SELECT COUNT(DISTINCT b.business_id) FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE b.postal_code = '94117' AND v.risk_category = 'High Risk';
SELECT violations.violation_type_id, violations.risk_category FROM violations INNER JOIN inspections ON violations.business_id = inspections.business_id WHERE inspections.score BETWEEN 70 AND 80;
SELECT b.tax_code, i.type FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE b.name = 'Rue Lepic';
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id JOIN inspections i ON b.business_id = i.business_id WHERE v.violation_type_id = 103157 AND v.date = '2016-05-27' AND i.type = 'Routine - Unscheduled';
SELECT b.owner_name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High Risk' AND v.violation_type_id = 103109 AND v.description = 'Unclean or unsanitary food contact surfaces';
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE b.owner_city = 'Cameron Park' AND i.score = 100;
SELECT violations.violation_type_id FROM violations JOIN businesses ON violations.business_id = businesses.business_id WHERE violations.business_id BETWEEN 30 AND 50 AND businesses.address = '747 IRVING St' AND businesses.city = 'San Francisco';
SELECT b.owner_name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.violation_type_id = 103156 AND v.date = '2014-06-12';
SELECT i.type FROM inspections i JOIN businesses b ON i.business_id = b.business_id WHERE b.owner_address = '500 California St, 2nd Floor' AND b.owner_city = 'SAN FRANCISCO' GROUP BY i.type ORDER BY AVG(i.score) DESC LIMIT 1;
SELECT COUNT(*) FROM violations JOIN inspections ON violations.business_id = inspections.business_id AND violations.date = inspections.date WHERE YEAR(inspections.date) = 2016 AND inspections.type = 'Routine - Unschedule';
SELECT b.name, v.risk_category FROM businesses b JOIN inspections i ON b.business_id = i.business_id JOIN violations v ON b.business_id = v.business_id WHERE i.score > (SELECT AVG(score)*0.8 FROM inspections) GROUP BY b.name, v.risk_category;
SELECT     (COUNT(CASE WHEN v.risk_category = 'Low Risk' THEN b.business_id END) * 100.0 / COUNT(b.business_id)) AS percentage FROM     businesses b JOIN     inspections i ON b.business_id = i.business_id JOIN     violations v ON b.business_id = v.business_id WHERE     i.score < 95 AND b.postal_code = 94110;
SELECT DISTINCT b.state FROM breweries b JOIN beers be ON b.id = be.brewery_id ORDER BY be.ibu LIMIT 1;
SELECT b.name AS brewery_name, b.city FROM breweries b JOIN beers c ON b.id = c.brewery_id WHERE b.state = 'New York' ORDER BY c.ibu DESC LIMIT 1;
SELECT AVG(abv * (12/ounces)) FROM beers JOIN breweries ON beers.brewery_id = breweries.id WHERE breweries.name = 'Boston Beer Company';
SELECT     (COUNT(CASE WHEN b.style = 'American Adjunct Lager' THEN b.id END) / COUNT(b.id)) * 100 AS Percentage FROM     breweries br JOIN     beers b ON br.id = b.brewery_id WHERE     br.name = 'Stevens Point Brewery';
SELECT     b1.city,     b1.state,     b1.name AS most_bitter_beer,     b1.ibu AS highest_ibu,     b2.name AS least_bitter_beer,     b2.ibu AS lowest_ibu,     (b1.ibu - b2.ibu) AS bitterness_difference FROM     (         SELECT             city,             state,             name,             ibu         FROM             breweries             JOIN beers ON breweries.id = beers.brewery_id         WHERE             ibu = (SELECT MAX(ibu) FROM beers)     ) AS b1,     (         SELECT             city,             state,             name,             ibu         FROM             breweries             JOIN beers ON breweries.id = beers.brewery_id         WHERE             ibu = (SELECT MIN(ibu) FROM beers)     ) AS b2;
SELECT     (COUNT(b1.id) * 100.0 / COUNT(b2.id)) AS percentage_wisconsin_blonde_ales FROM     breweries b1 JOIN     beers b ON     b.brewery_id = b1.id WHERE     b.style = 'American Blonde Ale' AND b1.state = 'Wisconsin' CROSS JOIN     (SELECT COUNT(id) as total_breweries FROM breweries b2 JOIN beers b3 ON b3.brewery_id = b2.id WHERE b3.style = 'American Blonde Ale') subquery;
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.total_fat = (SELECT MAX(total_fat) FROM Nutrition);
SELECT (r.total_fat - r.sat_fat) AS unsaturated_fat FROM Nutrition r JOIN Recipe rp ON r.recipe_id = rp.recipe_id WHERE rp.title = 'Raspberry Chiffon Pie';
SELECT title FROM Recipe WHERE recipe_id IN (     SELECT recipe_id     FROM Nutrition     WHERE sodium < 5 );
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.iron > 20;
SELECT title FROM Recipe JOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id WHERE (title = 'Raspberry Chiffon Pie' OR title = 'Fresh Apricot Bavarian') ORDER BY vitamin_c DESC LIMIT 1;
SELECT R.title FROM Recipe R JOIN Nutrition N ON R.recipe_id = N.recipe_id WHERE R.prep_min > 10 ORDER BY N.calories DESC LIMIT 1;
SELECT Nutrition.calories FROM Nutrition JOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id WHERE Recipe.title = 'Raspberry Chiffon Pie';
SELECT optional FROM Quantity JOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id JOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id WHERE name = 'graham cracker crumbs' AND title = 'Raspberry Chiffon Pie';
SELECT COUNT(*) FROM Quantity q JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE r.title = 'Raspberry Chiffon Pie' AND q.max_qty = q.min_qty;
SELECT I.name FROM Ingredient I JOIN Quantity Q ON I.ingredient_id = Q.ingredient_id JOIN Recipe R ON Q.recipe_id = R.recipe_id WHERE R.title = 'Raspberry Chiffon Pie' AND Q.preparation IS NULL;
SELECT COUNT(*) FROM Recipe JOIN Quantity ON Recipe.recipe_id = Quantity.recipe_id JOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id WHERE Ingredient.name = 'graham cracker crumbs';
SELECT MIN(q.min_qty) FROM Quantity q JOIN Ingredient i ON q.ingredient_id = i.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE i.name = 'graham cracker crumbs' AND r.title = 'Raspberry Chiffon Pie' AND q.unit = 'cups';
SELECT (N.calories * N.pcnt_cal_fat / 100) AS calories_from_fat FROM Nutrition N JOIN Recipe R ON N.recipe_id = R.recipe_id WHERE R.title = 'Raspberry Chiffon Pie';
SELECT AVG(N.calories) FROM Nutrition N JOIN Recipe R ON N.recipe_id = R.recipe_id WHERE R.source = 'Produce for Better Health Foundation and 5 a Day';
SELECT Nutrition.calories FROM Nutrition JOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id WHERE Recipe.title = 'turkey tenderloin bundles';
SELECT q.min_qty FROM Quantity q JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = '1% lowfat milk' AND q.recipe_id = 1436 AND q.max_qty = q.min_qty;
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.total_fat = (SELECT MAX(total_fat) FROM Nutrition);
SELECT COUNT(*) FROM Quantity q JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'seedless red grapes';
SELECT i.name FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id WHERE q.recipe_id = 1397 AND q.optional = 'TRUE';
SELECT r.title FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'frozen raspberries in light syrup' AND q.max_qty = q.min_qty ORDER BY q.max_qty DESC LIMIT 1;
SELECT i.name, COUNT(*) as usage_count FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id GROUP BY i.ingredient_id, i.name ORDER BY usage_count DESC LIMIT 1;
SELECT q.preparation FROM Quantity q JOIN Ingredient i ON q.ingredient_id = i.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE i.name = 'apple juice' AND r.title = 'raspberry-pear couscous cake';
SELECT SUM(q.min_qty) FROM Quantity q JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'almonds' AND q.unit = 'cups' AND q.recipe_id IN (     SELECT r.recipe_id     FROM Recipe r     WHERE r.title = 'chicken pocket sandwich' );
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.vitamin_c = (SELECT MAX(vitamin_c) FROM Nutrition);
SELECT T3.vitamin_a FROM Recipe AS T1 JOIN Nutrition AS T3 ON T1.recipe_id = T3.recipe_id WHERE T1.title = 'Sherried Beef';
SELECT r.title FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id GROUP BY r.recipe_id, r.title ORDER BY COUNT(DISTINCT q.ingredient_id) DESC LIMIT 1;
SELECT     SUM(CASE WHEN r.title = 'Lasagne-Spinach Spirals' THEN n.sodium ELSE 0 END) /     SUM(CASE WHEN r.title = 'Beef and Spinach Pita Pockets' THEN n.sodium ELSE 0 END) AS sodium_ratio FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id
SELECT AVG(N.calories) FROM Nutrition N JOIN Recipe R ON N.recipe_id = R.recipe_id JOIN Quantity Q ON R.recipe_id = Q.recipe_id JOIN Ingredient I ON Q.ingredient_id = I.ingredient_id WHERE I.name = 'coarsely ground black pepper';
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.iron > 20;
SELECT COUNT(*) FROM Quantity q JOIN Ingredient i ON q.ingredient_id = i.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE r.title = 'Apricot Yogurt Parfaits';
SELECT Ingredient.name FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id WHERE Quantity.preparation = 'cook in beef broth';
SELECT COUNT(*) FROM (   SELECT q.ingredient_id   FROM Quantity q   JOIN Recipe r ON q.recipe_id = r.recipe_id   JOIN Nutrition n ON r.recipe_id = n.recipe_id   WHERE n.vitamin_a = (     SELECT MAX(vitamin_a)     FROM Nutrition   ) ) as temp;
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.vitamin_c IS NOT NULL ORDER BY n.vitamin_c DESC LIMIT 5;
SELECT Ingredient.name FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id GROUP BY Ingredient.ingredient_id ORDER BY COUNT(*) LIMIT 1;
SELECT COUNT(*) FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE i.category = 'baking product' AND r.title = 'No-Bake Chocolate Cheesecake';
SELECT Ingredient.name FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id JOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id WHERE Recipe.title = 'Strawberry Sorbet';
SELECT i.name FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE r.title = 'Warm Chinese Chicken Salad' AND q.optional = 'TRUE';
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.alcohol > 10 ORDER BY r.prep_min DESC LIMIT 1;
SELECT r.servings FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.total_fat - n.sat_fat = (     SELECT MAX(n2.total_fat - n2.sat_fat)     FROM Nutrition n2 );
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE r.source = 'National Potato Board' ORDER BY n.calories DESC LIMIT 1;
SELECT r.title, (r.prep_min + r.cook_min + r.stnd_min) as total_time FROM Recipe r JOIN (     SELECT recipe_id, COUNT(DISTINCT ingredient_id) as ingredient_count     FROM Quantity     GROUP BY recipe_id     ORDER BY ingredient_count DESC     LIMIT 1 ) q ON r.recipe_id = q.recipe_id;
SELECT Ingredient.name,        (COUNT(Quantity.ingredient_id) * 100.0 / (SELECT COUNT(*) FROM Quantity)) AS percentage FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id GROUP BY Quantity.ingredient_id, Ingredient.name ORDER BY COUNT(Quantity.ingredient_id) DESC LIMIT 1;
SELECT R.title, (R.prep_min + R.cook_min + R.stnd_min) as total_time FROM Recipe R JOIN Nutrition N ON R.recipe_id = N.recipe_id WHERE N.total_fat = (SELECT MAX(total_fat) FROM Nutrition)
SELECT r.title FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'almond extract';
SELECT Ingredient.name FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id JOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id WHERE Recipe.title = 'Tomato-Cucumber Relish';
SELECT COUNT(*) FROM Quantity q JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE r.title = 'Idaho Potato Supreme';
SELECT I.name FROM Ingredient I JOIN Quantity Q ON I.ingredient_id = Q.ingredient_id JOIN (     SELECT R.recipe_id     FROM Recipe R     JOIN Nutrition N ON R.recipe_id = N.recipe_id     WHERE N.carbo = (         SELECT MAX(carbo)         FROM Nutrition     ) ) AS MaxCarboRecipe ON Q.recipe_id = MaxCarboRecipe.recipe_id;
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.iron > 20;
SELECT I.name FROM Ingredient I JOIN Quantity Q ON I.ingredient_id = Q.ingredient_id JOIN Recipe R ON Q.recipe_id = R.recipe_id JOIN Nutrition N ON R.recipe_id = N.recipe_id WHERE N.vitamin_a = (SELECT MAX(vitamin_a) FROM Nutrition) GROUP BY I.ingredient_id;
SELECT i.name, q.max_qty, q.unit FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id JOIN Recipe r ON r.recipe_id = q.recipe_id WHERE r.servings = 7;
SELECT     (COUNT(CASE WHEN N.sodium BETWEEN 0 AND 5 THEN R.recipe_id END) * 100 / COUNT(R.recipe_id)) AS sodium_free_percentage FROM     Recipe R JOIN     Nutrition N ON R.recipe_id = N.recipe_id WHERE     R.source = 'The California Tree Fruit Agreement';
SELECT i.name FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id WHERE q.unit = 'slice(s)';
SELECT COUNT(*) FROM Recipe WHERE recipe_id IN (     SELECT recipe_id     FROM Quantity     WHERE ingredient_id IN (         SELECT ingredient_id         FROM Ingredient         WHERE category = 'canned dairy'     ) );
SELECT Recipe.title, (Recipe.prep_min + Recipe.cook_min + Recipe.stnd_min) AS total_time FROM Recipe JOIN Quantity ON Recipe.recipe_id = Quantity.recipe_id JOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id WHERE Ingredient.name = 'lima beans' GROUP BY Recipe.recipe_id HAVING COUNT(DISTINCT Ingredient.ingredient_id) = 1;
SELECT     (COUNT(CASE WHEN R.servings >= 10 THEN R.recipe_id END) * 100 / COUNT(R.recipe_id)) AS percentage FROM     Recipe R JOIN     Quantity Q ON R.recipe_id = Q.recipe_id JOIN     Ingredient I ON Q.ingredient_id = I.ingredient_id WHERE     I.name = 'sea bass'
SELECT total_fat FROM Nutrition WHERE recipe_id = (SELECT recipe_id FROM Recipe WHERE title = 'Raspberry Chiffon Pie');
SELECT Nutrition.pcnt_cal_prot FROM Nutrition JOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id WHERE Recipe.title = 'Raspberry Chiffon Pie';
SELECT COUNT(*) FROM Quantity WHERE recipe_id = (SELECT recipe_id FROM Recipe WHERE title = 'Raspberry Chiffon Pie');
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.alcohol = 0;
SELECT AVG(N.vitamin_c) FROM Nutrition N JOIN Recipe R ON N.recipe_id = R.recipe_id WHERE R.title LIKE '%cake%';
SELECT COUNT(*) FROM Recipe WHERE servings > 10 AND EXISTS (     SELECT *     FROM Ingredient     WHERE Ingredient.category = 'dairy' AND Recipe.recipe_id IN (         SELECT Quantity.recipe_id         FROM Quantity         WHERE Quantity.ingredient_id = Ingredient.ingredient_id     ) );
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.iron > 20;
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.calories = (SELECT MAX(calories) FROM Nutrition);
SELECT COUNT(*) FROM Recipe WHERE recipe_id NOT IN (     SELECT recipe_id     FROM Quantity     JOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id     WHERE Ingredient.category LIKE '%dairy%' );
SELECT Ingredient.name FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id JOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id WHERE Recipe.title = 'Apricot Yogurt Parfaits';
SELECT DISTINCT Recipe.title FROM Recipe JOIN Quantity ON Recipe.recipe_id = Quantity.recipe_id WHERE Quantity.max_qty <> Quantity.min_qty;
SELECT i.name FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE r.cook_min = (SELECT MAX(cook_min) FROM Recipe)
Error: 第 8930 个样本有 2 个SQL。
SELECT     (COUNT(CASE WHEN N.calories > 200 THEN R.recipe_id END) * 100 / COUNT(R.recipe_id)) AS percentage FROM     Recipe R JOIN     Quantity Q ON R.recipe_id = Q.recipe_id JOIN     Ingredient I ON Q.ingredient_id = I.ingredient_id JOIN     Nutrition N ON R.recipe_id = N.recipe_id WHERE     I.category = 'cheese';
SELECT firstname, lastname FROM employee WHERE salary = (SELECT MAX(salary) FROM employee);
SELECT COUNT(*) FROM employee WHERE performance = 'Good';
SELECT ssn FROM employee WHERE gender = 'M' AND salary > 70000;
SELECT educationrequired FROM position WHERE positiontitle = 'Regional Manager';
SELECT positiontitle, MIN(minsalary) FROM position WHERE positiontitle IN ('Account Representative', 'Trainee') GROUP BY positiontitle ORDER BY MIN(minsalary) LIMIT 1;
SELECT T1.locationcity FROM location AS T1 JOIN employee AS T2 ON T1.locationID = T2.locationID WHERE T2.firstname = 'Sandy' AND T2.lastname = 'Adams'
SELECT COUNT(*) FROM employee JOIN location ON employee.locationID = location.locationID WHERE location.state = 'NY' AND employee.performance = 'Good';
SELECT l.officephone FROM location l JOIN employee e ON l.locationID = e.locationID WHERE e.firstname = 'Sandy' AND e.lastname = 'Adams';
SELECT COUNT(*) FROM employee WHERE gender = 'M' AND locationID IN (     SELECT locationID     FROM location     WHERE address = '450 Peachtree Rd' );
SELECT COUNT(*) FROM employee JOIN position ON employee.positionID = position.positionID WHERE position.positiontitle = 'Account Representative';
SELECT (e.salary - p.minsalary) AS SalaryDifference FROM employee e JOIN position p ON e.positionID = p.positionID WHERE e.firstname = 'James' AND e.lastname = 'Johnson';
SELECT COUNT(*) FROM employee e JOIN position p ON e.positionID = p.positionID JOIN location l ON e.locationID = l.locationID WHERE p.positiontitle = 'Trainees' AND l.state = 'NY';
SELECT e.firstname, e.lastname FROM employee e JOIN position p ON e.positionID = p.positionID WHERE p.positiontitle = 'Trainee';
SELECT e.firstname, e.lastname, p.educationrequired FROM employee e JOIN position p ON e.positionID = p.positionID WHERE (e.firstname, e.lastname) IN ('Jose', 'Rodriguez', 'Sandy', 'Adams') ORDER BY p.educationrequired DESC LIMIT 1;
SELECT DISTINCT l.zipcode FROM location l JOIN employee e ON l.locationID = e.locationID WHERE e.gender = 'M' AND e.performance = 'Good';
SELECT e.ssn FROM employee e JOIN location l ON e.locationID = l.locationID WHERE l.state = 'CA';
SELECT COUNT(*) FROM employee JOIN position ON employee.positionID = position.positionID WHERE position.positiontitle = 'Trainee' AND employee.salary > 20000;
SELECT AVG(employee.salary) FROM employee JOIN position ON employee.positionID = position.positionID WHERE position.positiontitle = 'Trainee';
SELECT ((AVG(e.salary) - p.minsalary) / p.minsalary) * 100 AS Percentage_Higher FROM employee e JOIN position p ON e.positionID = p.positionID WHERE p.positiontitle = 'Trainee' GROUP BY p.positiontitle;
SELECT COUNT(*) FROM employee WHERE gender = 'F';
SELECT T3.locationcity FROM employee AS T1 JOIN location AS T3 ON T1.locationID = T3.locationID WHERE T1.firstname = 'Jose' AND T1.lastname = 'Rodriguez'
SELECT l.state FROM location l JOIN employee e ON l.locationID = e.locationID WHERE e.firstname = 'Emily' AND e.lastname = 'Wood';
SELECT p.educationrequired FROM position p JOIN employee e ON p.positionID = e.positionID WHERE e.firstname = 'David' AND e.lastname = 'Whitehead';
SELECT COUNT(*) FROM employee JOIN location ON employee.locationID = location.locationID WHERE location.locationcity = 'Miami';
SELECT e.firstname, e.lastname FROM employee e JOIN location l ON e.locationID = l.locationID WHERE l.locationcity = 'Boston' ORDER BY e.salary DESC LIMIT 1;
SELECT e.ssn FROM employee e JOIN location l ON e.locationID = l.locationID WHERE l.locationcity = 'New York City' AND e.performance = 'Good';
SELECT COUNT(*) FROM employee e JOIN position p ON e.positionID = p.positionID JOIN location l ON e.locationID = l.locationID WHERE p.positiontitle = 'Account Representative' AND l.locationcity = 'Chicago' AND e.performance = 'Good';
SELECT p.positiontitle FROM position p JOIN employee e ON p.positionID = e.positionID WHERE e.firstname = 'Kenneth' AND e.lastname = 'Charles';
SELECT l.address FROM location l JOIN position p ON l.locationID = p.positionID JOIN employee e ON p.positionID = e.positionID WHERE p.positiontitle = 'manager' ORDER BY e.salary DESC LIMIT 1;
SELECT p.maxsalary FROM position p JOIN employee e ON p.positionID = e.positionID WHERE e.firstname = 'Tracy' AND e.lastname = 'Coulter';
SELECT (h.maxsalary - e.salary) / e.salary * 100 AS Percentage_Raise FROM human_resources.employee e JOIN human_resources.position h ON e.positionID = h.positionID WHERE e.firstname = 'Jose' AND e.lastname = 'Rodriguez';
SELECT COUNT(*) FROM employee WHERE performance = 'Poor' AND salary > 50000;
SELECT firstname, lastname FROM employee WHERE salary = (SELECT MAX(salary) FROM employee);
SELECT COUNT(*) FROM position WHERE maxsalary <= 100000;
SELECT salary FROM employee ORDER BY hiredate ASC LIMIT 1;
SELECT p.minsalary FROM position p WHERE p.educationrequired = (SELECT MAX(educationrequired) FROM position);
SELECT T1.address, T1.locationcity, T1.state, T1.zipcode FROM location AS T1 JOIN employee AS T2 ON T1.locationID = T2.locationID GROUP BY T1.locationID ORDER BY COUNT(T2.ssn) DESC LIMIT 1;
SELECT AVG(employee.salary) FROM employee JOIN position ON employee.positionID = position.positionID WHERE position.educationrequired = '2 year degree';
SELECT COUNT(*) FROM employee e JOIN position p ON e.positionID = p.positionID WHERE e.gender = 'M' AND p.positiontitle = 'Regional Managers';
SELECT T2.positiontitle, COUNT(*) AS count FROM employee AS T1 JOIN position AS T2 ON T1.positionID = T2.positionID WHERE T1.performance = 'Poor' GROUP BY T2.positiontitle ORDER BY count DESC LIMIT 1;
SELECT p.positiontitle FROM position p JOIN employee e ON p.positionID = e.positionID WHERE p.educationrequired = '2 year degree' AND e.gender = 'F' GROUP BY p.positiontitle ORDER BY COUNT(e.ssn) DESC LIMIT 1;
SELECT COUNT(*) FROM employee e JOIN position p ON e.positionID = p.positionID JOIN location l ON e.locationID = l.locationID WHERE p.positiontitle = 'Account Representative' AND l.state = 'Illinois' AND e.performance = 'satisfying';
SELECT AVG(salary) FROM employee JOIN position ON employee.positionID = position.positionID WHERE position.positiontitle = 'Manager' AND employee.performance = 'Poor';
SELECT state FROM location JOIN employee ON location.locationID = employee.locationID JOIN position ON employee.positionID = position.positionID WHERE position.positiontitle = 'Account Representatives' AND employee.performance = 'Good' GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT e.firstname, e.lastname, e.performance FROM employee e WHERE e.salary = (SELECT MIN(salary) FROM employee)
SELECT locationcity FROM location WHERE state IN ('CO', 'UT', 'CA');
SELECT locationcity, address FROM location WHERE zipcode > 90000;
SELECT positiontitle FROM position WHERE educationrequired = '4 year degree';
SELECT maxsalary FROM position WHERE positiontitle = 'Trainer';
SELECT e.firstname, e.lastname, e.ssn FROM employee e JOIN position p ON e.positionID = p.positionID WHERE p.positiontitle = 'Account Representative' AND e.performance = 'Average';
SELECT e.hiredate, p.positiontitle, e.salary FROM employee e JOIN position p ON e.positionID = p.positionID WHERE e.firstname = 'Emily' AND e.lastname = 'Wood';
SELECT p.positiontitle, p.minsalary, p.maxsalary FROM position p JOIN employee e ON p.positionID = e.positionID WHERE e.firstname = 'Bill' AND e.lastname = 'Marlin';
SELECT e.firstname, e.lastname, e.gender, p.positiontitle FROM employee e JOIN position p ON e.positionID = p.positionID JOIN location l ON e.locationID = l.locationID WHERE l.locationcity = 'New York City';
SELECT e.firstname, e.lastname, e.hiredate, e.performance FROM employee e JOIN location l ON e.locationID = l.locationID WHERE l.state = 'UT';
Error: 第 8986 个样本有 3 个SQL。
SELECT e.firstname, e.lastname, e.salary, p.educationrequired FROM employee e JOIN position p ON e.positionID = p.positionID WHERE p.positiontitle = 'Account Representative' AND e.performance = 'Poor';
SELECT e.firstname, e.lastname, e.performance, l.locationcity FROM employee e JOIN location l ON e.locationID = l.locationID WHERE e.ssn = '767-74-7373';
SELECT e.firstname, e.lastname, p.positiontitle, l.locationcity, l.officephone FROM employee e JOIN position p ON e.positionID = p.positionID JOIN location l ON e.locationID = l.locationID WHERE l.state = 'CO';
SELECT     e.firstname,     e.lastname,     p.positiontitle,     l.locationcity,     (MAX(e.salary) / 12) as monthly_averagesalary FROM     employee e JOIN     position p ON e.positionID = p.positionID JOIN     location l ON e.locationID = l.locationID GROUP BY     e.firstname,     e.lastname,     p.positiontitle,     l.locationcity ORDER BY     e.salary DESC LIMIT 1;
Error: 第 8991 个样本有 2 个SQL。
SELECT (COUNT(CASE WHEN subscription_type = 'Subscriber' THEN id END) * 100.0 / COUNT(id)) AS percentage FROM trip;
SELECT end_station_name, city FROM trip JOIN station ON trip.end_station_id = station.id WHERE bike_id = 13 ORDER BY end_date DESC LIMIT 1;
SELECT T1.id, T1.end_station_name, S.city FROM trip AS T1 JOIN station AS S ON T1.end_station_id = S.id WHERE DATE(T1.start_date) != DATE(T1.end_date);
SELECT s.name, s.lat, s.long FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available = 0 AND st.time = '2013-11-03 02:01:01';
SELECT s.name, s.city FROM station s JOIN trip t ON s.id = t.start_station_id GROUP BY s.id, s.name, s.city ORDER BY COUNT(t.bike_id) DESC LIMIT 1;
SELECT w.max_temperature_f FROM trip t JOIN weather w ON t.start_date = w.date AND t.zip_code = w.zip_code WHERE t.id = 4080;
SELECT T.time, T.bikes_available FROM (     SELECT station_id, time, bikes_available     FROM status     WHERE station_id = (         SELECT id         FROM station         WHERE name = 'San Jose Diridon Caltrain Station'     ) ) AS T WHERE T.bikes_available = (     SELECT MAX(bikes_available)     FROM status     WHERE station_id = (         SELECT id         FROM station         WHERE name = 'San Jose Diridon Caltrain Station'     ) );
SELECT trip.id, trip.duration FROM trip JOIN weather ON DATE(trip.start_date) = weather.date AND trip.zip_code = weather.zip_code WHERE weather.events = 'Rain';
SELECT trip.start_date FROM trip JOIN station ON trip.end_station_id = station.id WHERE station.lat = 37.331415 AND station.long = -121.8932;
SELECT COUNT(*) FROM trip WHERE start_date LIKE '8%2013%' AND start_station_name IN (     SELECT name     FROM station     WHERE city = 'Redwood City' );
Error: 第 9002 个样本有 2 个SQL。
SELECT     T3.date,     AVG(T3.min_temperature_f) AS avg_min_temperature FROM     trip AS T1 JOIN     station AS T2 ON T1.start_station_id = T2.id JOIN     weather AS T3 ON T3.zip_code = T2.zip_code AND DATE(T1.start_date) = T3.date WHERE     T1.start_date IN (         SELECT             start_date         FROM             trip         GROUP BY             DATE(start_date)         ORDER BY             COUNT(*) DESC         LIMIT 1     ) GROUP BY     T3.date
SELECT     AVG(T1.duration) AS avg_bike_usage,     AVG(T2.wind_dir_degrees) AS avg_wind_direction FROM     (SELECT bike_id, SUM(duration) AS total_duration, COUNT(bike_id) AS total_trips      FROM trip      WHERE start_date BETWEEN '2013-07-01' AND '2013-09-30'      GROUP BY bike_id) T1,     (SELECT SUM(wind_dir_degrees) AS total_wind_dir, COUNT(date) AS total_days      FROM weather      WHERE date BETWEEN '2013-07-01' AND '2013-09-30') T2;
SELECT COUNT(*), name FROM station WHERE city = 'San Jose' AND installation_date BETWEEN '2014-01-01' AND '2014-12-31';
SELECT MAX(duration) FROM trip WHERE start_date = '2013-08-29' AND end_date = '2013-08-29';
SELECT DIV(duration, 60) AS duration_in_minutes FROM trip WHERE bike_id = 426 AND start_station_name = 'Market at 4th' AND end_station_name = '2nd at South Park' AND start_date = '2013-08-29' AND end_date = '2013-08-29';
Error: 第 9008 个样本有 2 个SQL。
SELECT COUNT(*) FROM station WHERE city = 'San Francisco' AND dock_count > 20;
SELECT date FROM weather WHERE max_temperature_f = (SELECT MAX(max_temperature_f) FROM weather)
SELECT MAX(max_dew_point_f) FROM weather WHERE date = '2014-07-15' AND zip_code = 94301;
SELECT YEAR(date), SUM(precipitation_inches) AS total_rain FROM weather WHERE events = 'Rain' GROUP BY YEAR(date) ORDER BY total_rain DESC LIMIT 1;
SELECT MIN(duration), bike_id FROM trip WHERE start_station_id = (     SELECT id     FROM station     WHERE lat = 37.789625 AND long = -122.400811 ) AND start_date LIKE '10/20/2014%';
SELECT end_station_name, MIN(trip.duration), s.dock_count FROM trip JOIN station AS s ON s.name = 'South Van Ness at Market' AND trip.start_station_name = s.name WHERE trip.start_date LIKE '12/1/2013%' AND trip.subscription_type = 'Subscriber' GROUP BY end_station_name ORDER BY MIN(trip.duration) ASC LIMIT 1;
SELECT MAX(w.mean_humidity) FROM weather w JOIN trip t ON w.zip_code = t.zip_code AND w.date = t.start_date WHERE t.start_station_name = 'Powell Street BART' AND t.bike_id = '496' AND t.start_date = '2013-08-29';
SELECT w.date, COUNT(t.id) as total_bikes_borrowed FROM weather w JOIN trip t ON w.zip_code = t.zip_code AND DATE(t.start_date) = w.date WHERE w.events LIKE '%Fog%' AND t.subscription_type = 'Subscriber' AND w.zip_code = 94301 AND w.date BETWEEN '2014-11-01' AND '2014-11-30' GROUP BY w.date HAVING total_bikes_borrowed > 0;
SELECT s.name, s.installation_date FROM station s JOIN (     SELECT start_station_id, COUNT(*) as cnt     FROM trip     WHERE subscription_type = 'Customer'     GROUP BY start_station_id     ORDER BY cnt ASC     LIMIT 1 ) t ON s.id = t.start_station_id;
SELECT s.name FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available = 0 AND DATE(st.time) = '2013-11-03' GROUP BY s.name ORDER BY COUNT(*) DESC;
SELECT AVG(trip.duration) FROM trip JOIN station ON trip.start_station_id = station.id WHERE station.city = 'Palo Alto';
SELECT T1.city, T3.start_station_name, T3.end_station_name, MAX(T3.duration) FROM station AS T1 JOIN trip AS T3 ON T1.id = T3.start_station_id GROUP BY T1.city, T3.start_station_name, T3.end_station_name ORDER BY MAX(T3.duration) DESC LIMIT 1;
SELECT name, installation_date, city FROM station WHERE installation_date BETWEEN '2013-08-05' AND '2013-12-31';
SELECT AVG(duration) FROM trip WHERE start_station_name = 'Adobe on Almaden' AND end_station_name = 'Ryland Park';
SELECT s.name, s.lat, s.long FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available = 0;
SELECT t.id AS trip_id, s.lat, s.long FROM trip t JOIN station s ON t.start_station_name = s.name AND t.end_station_name = s.name;
SELECT (s.dock_count - st.bikes_available) AS bikes_borrowed FROM station s JOIN status st ON s.id = st.station_id WHERE s.name = 'San Jose Diridon Caltrain Station' AND st.time = '2013-08-29 18:14:01';
SELECT t.id FROM trip t JOIN status s ON t.start_station_id = s.station_id JOIN weather w ON t.start_date::DATE = w.date WHERE t.bike_id = '10' AND t.subscription_type = 'Subscriber' AND w.mean_temperature_f >= 62;
SELECT w.max_gust_speed_mph, w.cloud_cover FROM trip t JOIN weather w ON t.start_date::DATE = w.date WHERE t.bike_id = 10 AND t.duration = 386 AND t.start_station_name = 'MLK Library' AND t.end_station_name = 'San Salvador at 1st';
SELECT COUNT(*) FROM trip t JOIN weather w ON DATE(t.start_date) = w.date AND t.zip_code = w.zip_code WHERE t.subscription_type = 'Subscriber' AND t.duration < 490 AND t.start_station_name = '2nd at Folsom' AND t.end_station_name = 'Civic Center BART (7th at Market)' AND w.min_visibility_miles >= 4;
SELECT s.docks_available FROM status s JOIN trip t ON s.station_id = t.start_station_id WHERE t.id = 912900;
SELECT t.id FROM trip t JOIN weather w ON DATE(t.end_date) = w.date AND t.zip_code = w.zip_code WHERE w.min_temperature_f < 45;
WITH SubscriberTrips AS (   SELECT     t.duration,     w.date,     w.min_temperature_f,     w.max_gust_speed_mph,     w.events   FROM     trip t   JOIN     station s ON t.start_station_name = s.name   JOIN     weather w ON DATE(t.start_date) = w.date AND t.zip_code = w.zip_code   WHERE     t.subscription_type = 'Subscriber'     AND t.start_station_name = '2nd at Folsom'     AND t.end_station_name = '5th at Howard'     AND YEAR(t.start_date) = 2014 ), AvgDuration AS (   SELECT AVG(duration) AS AvgDuration   FROM SubscriberTrips ) SELECT   MIN(duration) AS ShortestDuration,   (SELECT AvgDuration FROM AvgDuration) - MIN(duration) AS DifferenceFromAverage,   min_temperature_f,   max_gust_speed_mph,   events FROM   SubscriberTrips;
SELECT AVG(duration) FROM trip WHERE start_station_name = 'Steuart at Market' AND end_station_name = 'Embarcadero at Sansome' AND start_date >= '2014-07-01 00:00:00' AND end_date <= '2014-07-31 23:59:59';
SELECT AVG(max_temperature_f) AS avg_max_temp, AVG(min_temperature_f) AS avg_min_temp FROM weather WHERE date BETWEEN '2015-05-01' AND '2015-05-31' AND mean_humidity BETWEEN 65 AND 75;
SELECT     (SELECT COUNT(*) FROM trip WHERE subscription_type = 'Subscriber' AND start_date BETWEEN '2013-06-01 00:00:00' AND '2013-06-30 23:59:59') -     (SELECT COUNT(*) FROM trip WHERE subscription_type = 'Customer' AND start_date BETWEEN '2013-06-01 00:00:00' AND '2013-06-30 23:59:59') AS difference;
SELECT DISTINCT T3.bike_id FROM (     SELECT date     FROM weather     WHERE YEAR(date) = 2013 AND events LIKE '%Fog-Rain%' ) AS T1 JOIN status AS T2 ON DATE(T2.time) = T1.date JOIN trip AS T3 ON T2.station_id = T3.start_station_id AND DATE(T3.start_date) = T1.date;
SELECT T3.mean_visibility_miles, T3.mean_wind_speed_mph, T3.events, T1.lat AS start_lat, T1.long AS start_long, T1.name AS start_station_name, T2.lat AS end_lat, T2.long AS end_long, T2.name AS end_station_name FROM trip AS T JOIN station AS T1 ON T.start_station_id = T1.id JOIN station AS T2 ON T.end_station_id = T2.id JOIN weather AS T3 ON T.start_date::DATE = T3.date AND T.zip_code = T3.zip_code WHERE T3.events LIKE '%fog%' ORDER BY T.duration DESC LIMIT 1;
SELECT date FROM (   SELECT t.start_date AS start_date, w.date AS date, w.min_temperature_f AS min_temperature_f   FROM trip t   JOIN weather w ON DATE(t.start_date) = w.date AND t.zip_code = w.zip_code   WHERE t.start_station_name = 'Market at 10th'     AND t.end_station_name = 'South Van Ness at Market'     AND t.start_date BETWEEN '2013-08-01 00:00:00' AND '2013-08-31 23:59:59' ) AS daily_min_temp WHERE min_temperature_f = (   SELECT MIN(min_temperature_f)   FROM (     SELECT w.min_temperature_f     FROM trip t     JOIN weather w ON DATE(t.start_date) = w.date AND t.zip_code = w.zip_code     WHERE t.start_station_name = 'Market at 10th'       AND t.end_station_name = 'South Van Ness at Market'       AND t.start_date BETWEEN '2013-08-01 00:00:00' AND '2013-08-31 23:59:59'   ) )
SELECT start_station_name, end_station_name, MAX(duration) FROM trip JOIN weather ON trip.zip_code = weather.zip_code AND DATE(start_date) = weather.date WHERE weather.events LIKE '%rain%' ORDER BY duration DESC LIMIT 1;
SELECT AVG(trip.duration) FROM trip JOIN weather ON DATE(trip.start_date) = weather.date AND trip.zip_code = weather.zip_code WHERE weather.events = 'Rain' AND weather.precipitation_inches > 0.8;
SELECT T1.name, T1.city FROM station AS T1 JOIN (     SELECT start_station_name, AVG(duration) as avg_duration     FROM trip     GROUP BY start_station_name     HAVING AVG(duration) > (         SELECT AVG(duration)         FROM trip     ) ) AS T2 ON T1.name = T2.start_station_name;
SELECT COUNT(*) FROM station WHERE city = 'San Francisco' AND installation_date LIKE '%2014%';
SELECT COUNT(*) FROM trip JOIN station ON trip.end_station_id = station.id WHERE trip.start_date LIKE '%2006%' AND station.city = 'Mountain View';
SELECT id FROM trip WHERE start_station_name IN (     SELECT name     FROM station     WHERE city = 'Redwood City' ) ORDER BY duration DESC LIMIT 1;
SELECT DISTINCT t.bike_id FROM trip t JOIN station s ON t.start_station_name = s.name WHERE s.installation_date LIKE '%2013%';
SELECT COUNT(*) FROM trip JOIN station ON trip.end_station_id = station.id WHERE station.city = 'San Jose' AND trip.subscription_type = 'Subscriber';
SELECT trip.id, trip.duration FROM trip JOIN station ON trip.start_station_name = station.name WHERE station.dock_count = 15 ORDER BY trip.duration LIMIT 1;
SELECT EXTRACT(YEAR FROM start_date) AS trip_year, COUNT(*) AS trip_count FROM trip JOIN station ON trip.start_station_name = station.name WHERE station.city = 'San Francisco' GROUP BY trip_year ORDER BY trip_count DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN t.start_station_id IN                 (SELECT s.id FROM station AS s WHERE s.city = 'San Jose')                 AND t.duration > 800             THEN 1 END) * 100.0 / COUNT(t.id)) as percentage FROM     trip AS t
SELECT COUNT(*) FROM trip WHERE start_date LIKE '%2013%' AND duration > 1000;
SELECT AVG(duration) FROM trip WHERE start_station_name = 'South Van Ness at Market' AND start_date LIKE '2015%';
SELECT COUNT(*) FROM trip WHERE start_station_id = end_station_id;
SELECT t.id FROM trip t JOIN (   SELECT w.zip_code, MAX(w.max_temperature_f) as max_temp   FROM weather w   GROUP BY w.zip_code ) max_temp ON max_temp.zip_code = t.zip_code JOIN weather w ON w.date = t.start_date AND w.zip_code = t.zip_code AND w.max_temperature_f = max_temp.max_temp;
SELECT trip.id FROM trip JOIN status ON trip.start_station_id = status.station_id AND trip.start_date = status.time JOIN weather ON trip.end_date = weather.date AND trip.zip_code = weather.zip_code WHERE trip.start_station_name = 'Mountain View City Hall' AND weather.events LIKE '%rain%';
SELECT AVG(trip.duration) FROM trip JOIN weather ON DATE(trip.end_date) = weather.date AND trip.zip_code = weather.zip_code WHERE weather.events LIKE '%fog%';
SELECT MAX(t.duration) FROM trip t JOIN weather w ON DATE(t.start_date) = w.date AND t.zip_code = w.zip_code WHERE w.max_wind_speed_mph = 30;
SELECT AVG(w.mean_temperature_f) FROM trip t JOIN weather w ON t.start_date = w.date WHERE t.start_station_name = 'Market at 4th' AND t.start_date LIKE '%2013%';
SELECT w.mean_humidity FROM weather w JOIN trip t ON w.zip_code = t.zip_code AND w.date = t.start_date WHERE t.id = 4275;
SELECT     (COUNT(CASE WHEN T4.events LIKE '%Rain%' THEN 1 END) * 100.0 / COUNT(T3.id)) AS percentage FROM     trip AS T3 JOIN     station AS T1 ON T1.id = T3.end_station_id JOIN     status AS T2 ON T2.station_id = T1.id AND T2.time = T3.end_date JOIN     weather AS T4 ON T4.zip_code = T1.zip_code AND T4.date = DATE(T3.end_date) WHERE     T3.subscription_type = 'Customer' AND     T3.end_date LIKE '%2015%'
SELECT COUNT(*) FROM station WHERE year(installation_date) > 2013 AND city = 'San Jose';
SELECT mean_temperature_f FROM weather WHERE date = '2013-08-29' AND zip_code = 94107;
SELECT (max_temperature_f - min_temperature_f) AS temperature_difference FROM weather WHERE date = '2013-08-29' AND zip_code = 94107;
SELECT s.bikes_available FROM status s JOIN station st ON s.station_id = st.id WHERE st.name = 'San Jose Diridon Caltrain Station' AND s.time = '2013-08-29 12:06:01'
SELECT s.city FROM station s JOIN trip t ON s.id = t.start_station_id WHERE t.id = 4069;
SELECT COUNT(*) FROM trip JOIN weather ON DATE_FORMAT(trip.start_date, '%Y-%m') = DATE_FORMAT(weather.date, '%Y-%m') WHERE trip.start_date LIKE '2013-09%' AND weather.zip_code = 94107 AND weather.max_temperature_f > 70;
SELECT DISTINCT t.start_station_name FROM trip t JOIN weather w ON DATE(t.start_date) = w.date AND t.zip_code = w.zip_code WHERE w.max_humidity > 80 AND w.zip_code = 94107 AND YEAR(t.start_date) = 2013;
SELECT COUNT(*) FROM trip JOIN station ON trip.start_station_id = station.id WHERE trip.subscription_type = 'Subscriber' AND trip.start_date LIKE '8%' AND trip.start_date LIKE '%2013%' AND station.dock_count > 20;
SELECT s.lat, s.long FROM station s JOIN trip t ON s.id = t.start_station_id WHERE t.duration = (     SELECT MAX(duration) FROM trip )
SELECT s.docks_available FROM status s JOIN trip t ON s.station_id = t.end_station_id WHERE t.id = 4069;
SELECT COUNT(*) FROM trip JOIN weather ON DATE(trip.start_date) = weather.date WHERE weather.events LIKE '%fog%' AND SUBSTR(weather.date, -4) = '2013' AND trip.start_station_name = '2nd at Townsend';
SELECT MAX(trip.duration) FROM trip JOIN weather ON trip.start_date LIKE Concat('%', weather.date, '%') WHERE weather.events LIKE '%fog%' AND weather.date LIKE '%2013%';
SELECT s.installation_date FROM trip t JOIN station s ON t.start_station_id = s.id WHERE t.id = 4069;
SELECT COUNT(*) FROM trip JOIN station ON trip.start_station_id = station.id WHERE station.city = 'San Francisco' AND trip.subscription_type = 'Subscriber';
SELECT COUNT(*) FROM trip WHERE start_station_name = '2nd at Folsom' AND id IN (     SELECT trip_id     FROM (         SELECT trip.id AS trip_id, weather.date         FROM trip         JOIN weather ON trip.zip_code = weather.zip_code         WHERE weather.date LIKE '%2014%'         AND start_station_name = '2nd at Folsom'     ) subquery     WHERE subquery.date = (         SELECT date         FROM weather         WHERE max_temperature_f = (             SELECT MAX(max_temperature_f)             FROM weather             WHERE date LIKE '%2014%'         )     ) );
SELECT AVG(T1.duration) FROM trip AS T1 JOIN weather AS T2 ON DATE(T1.start_date) = T2.date WHERE T2.max_temperature_f = (     SELECT MAX(max_temperature_f)     FROM weather     WHERE weather.date LIKE "%2014" ) AND T2.date LIKE "%2014";
SELECT DISTINCT end_station_name FROM trip WHERE start_station_name = '2nd at South Park';
SELECT COUNT(*) FROM weather WHERE events = 'rain' AND zip_code = 94041;
SELECT SUM(dock_count) AS total_bikes_hold FROM station WHERE city = 'Redwood City' AND YEAR(installation_date) < 2014;
SELECT MAX(duration) / 86400 AS longest_trip_in_days FROM trip;
SELECT     (max_temperature_f - 32) / 1.8 AS Celsius1,     (mean_temperature_f - 32) / 1.8 AS Celsius2,     (min_temperature_f - 32) / 1.8 AS Celsius3 FROM     weather WHERE     date LIKE '8/%/2013' AND     zip_code IN (         SELECT             zip_code         FROM             station         WHERE             city = 'San Francisco'     )
SELECT     SUM(CASE WHEN subscription_type = 'Subscriber' THEN 1 ELSE 0 END) /     SUM(CASE WHEN subscription_type = 'Customer' THEN 1 ELSE 0 END) AS ratio_subscriber_to_customer FROM     trip WHERE     start_station_name = '2nd at South Park' AND     end_station_name = '2nd at South Park';
Error: 第 9081 个样本有 4 个SQL。
SELECT DISTINCT s.name FROM station s JOIN status st ON s.id = st.station_id JOIN weather w ON st.time = w.date WHERE w.mean_temperature_f - 32 = 20 * 1.8 AND w.date LIKE '%2014%';
SELECT COUNT(*) FROM trip WHERE start_station_id IN (     SELECT id     FROM station     WHERE city = 'San Jose' ) AND start_date LIKE '8/%/2013%';
SELECT T1.start_station_name, T1.end_station_name FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id JOIN station AS T3 ON T1.end_station_id = T3.id WHERE T1.start_date LIKE '%2014%' AND T2.city != T3.city;
SELECT     SUM(trip.duration) / 3600 AS total_duration_hour FROM     bike_share_1.trip JOIN     bike_share_1.station AS start_station ON trip.start_station_name = start_station.name JOIN     bike_share_1.station AS end_station ON trip.end_station_name = end_station.name WHERE     trip.bike_id = 16 AND start_station.city != end_station.city;
SELECT     (COUNT(CASE WHEN t.subscription_type = 'customer' THEN 1 END) * 1.0) /     COUNT(CASE WHEN t.subscription_type = 'subscriber' THEN 1 END) AS ratio FROM     trip t JOIN     station s ON t.start_station_name = s.name WHERE     s.city = 'Mountain View';
SELECT SUM(trip.duration) / 3600 AS total_duration_in_hours FROM trip JOIN station ON trip.start_station_name = station.name WHERE station.city = 'Palo Alto';
SELECT     T1.bike_id,     T3.city,     SUM(CAST(T1.duration AS FLOAT)/3600) AS total_duration_hours FROM     trip AS T1 JOIN     station AS T2 ON T1.start_station_name = T2.name JOIN     station AS T3 ON T1.end_station_name = T3.name WHERE     T2.city = T3.city AND     T1.bike_id IN (         SELECT             bike_id         FROM             trip         GROUP BY             bike_id         HAVING             COUNT(id) = (                 SELECT                     MIN(cnt)                 FROM                     (SELECT COUNT(id) AS cnt FROM trip GROUP BY bike_id) AS subquery             )     ) GROUP BY     T1.bike_id, T3.city ORDER BY     total_duration_hours DESC LIMIT 1;
SELECT COUNT(*) FROM trip WHERE subscription_type = 'Subscriber' AND start_station_name = 'Market at 4th';
SELECT name FROM station WHERE city = 'Mountain View' AND installation_date = '12/31/2013';
SELECT T1.city, T1.dock_count AS bikes_can_hold FROM station AS T1 WHERE T1.name = 'Townsend at 7th'
SELECT     (SELECT SUM(dock_count) FROM station WHERE name = 'Evelyn Park and Ride') AS bikes_hold,     (SELECT COUNT(*) FROM trip WHERE start_station_name = 'Evelyn Park and Ride' AND subscription_type = 'Subscriber') AS subscriber_users
SELECT COUNT(DISTINCT T1.bike_id), MAX(T2.max_temperature_f) FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 94301 AND T1.subscription_type = 'Subscriber';
SELECT     (COUNT(CASE WHEN trip.subscription_type = 'customer' THEN 1 END) * 100.0 /      (COUNT(CASE WHEN trip.subscription_type = 'subscriber' THEN 1 END) +       COUNT(CASE WHEN trip.subscription_type = 'customer' THEN 1 END))) AS percentage FROM     trip JOIN     station ON trip.start_station_id = station.id WHERE     station.city = 'San Francisco';
SELECT AVG(t.duration) AS average_duration, s.lat, s.long FROM trip t JOIN station s ON t.start_station_name = s.name WHERE s.name = 'Santa Clara at Almaden';
SELECT MIN(t.duration) AS shortest_trip, w.max_wind_Speed_mph FROM trip t JOIN status s ON t.start_station_id = s.station_id JOIN station st ON st.id = t.start_station_id JOIN weather w ON DATE(t.start_date) = w.date AND t.zip_code = w.zip_code WHERE st.name = 'Franklin at Maple' GROUP BY w.max_wind_Speed_mph ORDER BY shortest_trip ASC LIMIT 1;
SELECT SUM(T2.bikes_available), T1.lat, T1.long FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.time = '10/20/2013 8:11:01 AM'
SELECT s.city, s.installation_date FROM station s JOIN trip t ON s.id = t.start_station_id WHERE t.id = 585842;
SELECT COUNT(DISTINCT s.id) AS total_stations, COUNT(DISTINCT t.bike_id) AS total_customers FROM station s JOIN trip t ON s.id = t.start_station_id WHERE s.installation_date = '2013-08-16' AND t.subscription_type = 'customer';
SELECT end_station_name, s.lat, s.long FROM trip t JOIN station s ON t.end_station_id = s.id WHERE t.start_station_name = 'Market at 4th' AND t.start_date = '2013-08-29 12:45:00';
SELECT COUNT(t.trip_id) AS num_subscribers, s.dock_count FROM trip t JOIN station s ON t.end_station_id = s.id WHERE t.subscription_type = 'Subscriber' AND t.end_station_name = 'MLK Library';
SELECT AVG(min_temperature_f) AS avg_min_temp, s.name AS station_name, s.lat AS latitude, s.long AS longitude FROM weather w JOIN station s ON w.zip_code = s.zip_code WHERE w.zip_code = 94301 GROUP BY s.name, s.lat, s.long;
SELECT AVG(t.duration) AS average_duration, s.installation_date FROM trip t JOIN station s ON t.start_station_name = s.name AND t.end_station_name = s.name WHERE t.subscription_type = 'Subscriber' AND t.start_station_name = 'Mountain View City Hall' AND t.end_station_name = 'Mountain View City Hall';
SELECT description FROM film_text WHERE title = 'ACADEMY DINOSAUR';
SELECT COUNT(*) FROM film WHERE rental_duration > 6;
SELECT title FROM film WHERE release_year = 2006 AND rental_rate = 2.99;
SELECT title FROM film WHERE length = (SELECT MAX(length) FROM film);
SELECT title FROM film WHERE title IN ('ACE GOLDFINGER', 'ACADEMY DINOSAUR') ORDER BY replacement_cost DESC LIMIT 1;
SELECT COUNT(*) FROM film WHERE release_year = 2006 AND rating = 'NC-17';
SELECT COUNT(*) FROM film WHERE rental_rate = 2.99 AND special_features LIKE '%Deleted Scenes%';
Error: 第 9111 个样本有 3 个SQL。
SELECT email FROM staff WHERE first_name = 'Jon' AND last_name = 'Stephens';
SELECT first_name, last_name FROM staff WHERE active = 1;
SELECT release_year FROM film WHERE replacement_cost = (SELECT MAX(replacement_cost) FROM film)
SELECT title FROM film ORDER BY replacement_cost DESC LIMIT 3;
SELECT language.name FROM film JOIN language ON film.language_id = language.language_id WHERE film.title = 'ACADEMY DINOSAUR';
SELECT COUNT(*) FROM film WHERE language_id = (SELECT language_id FROM language WHERE name = 'English');
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS';
SELECT COUNT(*) FROM film_actor fa JOIN film f ON fa.film_id = f.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE f.title = 'ACADEMY DINOSAUR';
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'ACADEMY DINOSAUR';
SELECT COUNT(*) FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE actor.first_name = 'PENELOPE' AND actor.last_name = 'GUINESS' AND film.release_year = 2006;
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' ORDER BY f.replacement_cost DESC LIMIT 1;
SELECT A.first_name, A.last_name FROM actor A JOIN film_actor FA ON A.actor_id = FA.actor_id JOIN (     SELECT film_id, MAX(replacement_cost) AS max_replacement_cost     FROM film     GROUP BY film_id ) F ON FA.film_id = F.film_id WHERE F.max_replacement_cost = (     SELECT MAX(replacement_cost)     FROM film );
SELECT COUNT(*) FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id JOIN language ON film.language_id = language.language_id WHERE actor.first_name = 'PENELOPE' AND actor.last_name = 'GUINESS' AND language.name = 'English';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' ORDER BY f.length DESC LIMIT 1;
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror';
SELECT COUNT(film_id) FROM film_category JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Horror';
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror' AND f.rental_rate = 2.99;
SELECT COUNT(T2.rental_id) FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ';
SELECT COUNT(film.film_id) FROM film JOIN inventory ON film.film_id = inventory.film_id JOIN rental ON inventory.inventory_id = rental.inventory_id JOIN customer ON rental.customer_id = customer.customer_id WHERE film.release_year = 2006 AND customer.first_name = 'RUTH' AND customer.last_name = 'MARTINEZ';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ' ORDER BY f.replacement_cost DESC LIMIT 1;
SELECT c.first_name, c.last_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE f.replacement_cost = (SELECT MAX(replacement_cost) FROM film) GROUP BY c.customer_id, c.first_name, c.last_name;
SELECT COUNT(*) FROM rental JOIN customer ON rental.customer_id = customer.customer_id WHERE customer.first_name = 'RUTH' AND customer.last_name = 'MARTINEZ' AND YEAR(rental.return_date) = 2005 AND MONTH(rental.return_date) = 8;
SELECT c.first_name, c.last_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT COUNT(*) FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE f.title = 'ACADEMY DINOSAUR' AND c.active = 1;
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.title ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT     c.first_name,     c.last_name,     COUNT(r.rental_id) as total_rentals FROM     customer c JOIN     rental r ON c.customer_id = r.customer_id WHERE     (c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ') OR     (c.first_name = 'LINDA' AND c.last_name = 'WILLIAMS') GROUP BY     c.customer_id ORDER BY     total_rentals DESC LIMIT 1;
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' ORDER BY (f.rental_rate / f.rental_duration) DESC LIMIT 1;
SELECT AVG(f.replacement_cost) FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror';
Error: 第 9141 个样本有 2 个SQL。
SELECT AVG(film.length) FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE actor.first_name = 'PENELOPE' AND actor.last_name = 'GUINESS';
SELECT email FROM customer WHERE first_name = 'Diane' AND last_name = 'Collins';
SELECT COUNT(*) FROM customer WHERE active = 0;
SELECT first_name, last_name FROM customer WHERE email = 'JEREMY.HURTADO@sakilacustomer.org';
SELECT postal_code FROM address WHERE address_id = 65;
SELECT COUNT(address_id) FROM address WHERE district = 'Nordrhein-Westfalen';
SELECT phone FROM address WHERE address_id = 72;
SELECT COUNT(*) FROM film WHERE length = 178;
SELECT special_features FROM film WHERE title = 'UPRISING UPTOWN';
SELECT description FROM film_text WHERE title = 'ARTIST COLDBLOODED';
SELECT T2.address, T2.address2, T2.district FROM store AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.store_id = 2;
SELECT c.country FROM city AS ct JOIN country AS c ON ct.city_id = c.country_id WHERE ct.city = 'Clarksville'
SELECT COUNT(T2.actor_id) FROM film AS T1 JOIN film_actor AS T2 ON T1.film_id = T2.film_id WHERE T1.release_year = 2006 AND T1.rental_duration = 7 AND T1.rental_rate = 4.99 AND T1.length = 98;
SELECT f.rating FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Dan' AND a.last_name = 'Harris' AND f.length = 77 AND f.replacement_cost = 9.99;
SELECT COUNT(film_id) FROM film_actor WHERE actor_id = (SELECT actor_id FROM actor WHERE first_name = 'Daryl' AND last_name = 'Wahlberg');
SELECT T1.return_date FROM rental AS T1 JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'SHERRI' AND T2.last_name = 'RHODES' AND T1.rental_date = '2005-07-28 12:27:27'
SELECT first_name, last_name FROM staff WHERE store_id = 1;
SELECT T2.address, T2.address2, T2.district FROM store AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.store_id = 1;
SELECT T1.address, T1.address2, T1.district FROM address AS T1 JOIN staff AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'Jon' AND T2.last_name = 'Stephens';
SELECT COUNT(*) FROM address WHERE city_id IN (SELECT city_id FROM city WHERE city = 'Woodridge');
SELECT COUNT(*) FROM film WHERE language_id = (SELECT language_id FROM language WHERE name = 'English');
SELECT address.address FROM address JOIN customer ON address.address_id = customer.address_id WHERE customer.first_name = 'Heather' AND customer.last_name = 'Morris';
SELECT customer.email FROM customer JOIN address ON customer.address_id = address.address_id WHERE address.address = '1411 Lillydale Drive';
SELECT p.amount FROM payment p JOIN rental r ON p.rental_id = r.rental_id WHERE p.customer_id = 297 AND r.rental_date = '2005-07-28 12:27:27';
SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'WORKING MICROCOSMOS';
SELECT COUNT(film_id) FROM film_category JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Documentary';
SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id GROUP BY c.name ORDER BY COUNT(fc.film_id) DESC LIMIT 1;
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id WHERE i.inventory_id = 3479;
SELECT ((SUM(case when store_id = 2 then amount else 0 end) - SUM(case when store_id = 1 then amount else 0 end)) / SUM(case when store_id = 1 then amount else 0 end)) * 100 AS Percentage_more FROM payment;
SELECT COUNT(T1.city) * 1.0 / (SELECT COUNT(T1.city) FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.country = 'Italy') FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.country = 'India'
SELECT     COUNT(CASE WHEN a.first_name = 'GINA' AND a.last_name = 'DEGENERES' THEN fa.film_id END) /     COUNT(CASE WHEN a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' THEN fa.film_id END) AS times_number_of_films FROM     actor a JOIN     film_actor fa ON     a.actor_id = fa.actor_id;
SELECT COUNT(*) FROM film WHERE rating = 'R' AND release_year = 2006;
SELECT COUNT(*) FROM film_actor WHERE film_id = 508;
SELECT special_features FROM film WHERE title = 'Smoochy Control';
SELECT COUNT(DISTINCT customer_id) FROM payment WHERE amount > 10 AND payment_date LIKE '2005-08-%';
SELECT title FROM film WHERE length > 180;
SELECT SUM(amount) FROM payment WHERE rental_id BETWEEN 1 AND 10;
SELECT first_name, last_name FROM staff WHERE active = 1;
SELECT s.first_name, s.last_name FROM staff s WHERE s.staff_id = (SELECT st.manager_staff_id FROM store st WHERE st.store_id = 2);
SELECT COUNT(rental_id) FROM rental WHERE return_date = '2005-05-27';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Laura' AND a.last_name = 'Brody';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id WHERE i.store_id = 2 GROUP BY f.film_id HAVING COUNT(i.inventory_id) = 1;
SELECT c.first_name, c.last_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id WHERE DATEDIFF(r.return_date, r.rental_date) = 7 GROUP BY c.customer_id, c.first_name, c.last_name;
SELECT COUNT(film_id) FROM film_category JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Horror';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.title ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT T3.special_features FROM film AS T1 JOIN film_category AS T2 ON T1.film_id = T2.film_id JOIN (SELECT film_id, special_features, COUNT(*) AS cnt       FROM film       GROUP BY special_features) AS T3 ON T1.film_id = T3.film_id JOIN category AS T4 ON T2.category_id = T4.category_id WHERE T4.name = 'Science Fiction' GROUP BY T3.special_features ORDER BY SUM(T3.cnt) DESC LIMIT 1;
SELECT a.first_name, a.last_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id ORDER BY COUNT(fa.film_id) DESC LIMIT 1;
SELECT COUNT(*) FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE film.rental_duration = 7 AND category.name = 'Comedy';
SELECT s.manager_staff_id, s.store_id, COUNT(c.customer_id) as non_active_customers FROM store s JOIN customer c ON s.store_id = c.store_id WHERE c.active = 0 GROUP BY s.manager_staff_id, s.store_id ORDER BY non_active_customers DESC LIMIT 1;
SELECT MAX(f.rental_rate / f.rental_duration) AS rental_price_per_day FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Children'
SELECT T1.address, T1.address2, T1.district FROM address AS T1 JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 1;
SELECT COUNT(*) FROM customer JOIN address ON customer.address_id = address.address_id JOIN city ON address.city_id = city.city_id WHERE city.city = 'Lethbridge';
SELECT COUNT(*) FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'United States');
SELECT c.first_name, c.last_name FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id JOIN country co ON ci.country_id = co.country_id WHERE co.country = 'India';
SELECT COUNT(film_id) FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Classics' AND film.rental_rate < 1;
SELECT c.first_name, c.last_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT COUNT(r.rental_id) FROM rental r JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE f.title = 'BLANKET BEVERLY';
SELECT A.first_name, A.last_name FROM actor A JOIN film_actor FA ON A.actor_id = FA.actor_id JOIN film F ON FA.film_id = F.film_id WHERE F.rating = 'R' GROUP BY A.actor_id ORDER BY COUNT(F.film_id) DESC LIMIT 1;
SELECT     a.first_name,     a.last_name,     COUNT(fa.film_id) AS number_of_films,     (COUNT(fa.film_id) / 5.0) AS average_number_of_films FROM     actor a JOIN     film_actor fa ON a.actor_id = fa.actor_id GROUP BY     a.actor_id, a.first_name, a.last_name ORDER BY     number_of_films DESC LIMIT 5;
SELECT actor_id FROM actor WHERE last_name = 'KILMER';
Error: 第 9202 个样本有 2 个SQL。
SELECT title, description, special_features FROM film WHERE length = (SELECT MAX(length) FROM film) LIMIT 5;
SELECT COUNT(rental_id) FROM rental WHERE rental_date = '2005-05-26' AND return_date = '2005-05-30';
SELECT AVG(amount) AS average_payment, customer_id FROM payment GROUP BY customer_id;
SELECT first_name, last_name, email FROM staff WHERE store_id = 2;
Error: 第 9207 个样本有 2 个SQL。
SELECT description, title FROM film_text WHERE film_id = 996;
SELECT SUM(amount) FROM payment WHERE payment_date LIKE '2005-08%';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Emily' AND a.last_name = 'Dee';
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'CHOCOLATE DUCK';
SELECT COUNT(film_id) FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Horror' AND film.rating = 'PG-13';
SELECT c.name AS category, f.title AS film_title FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Judy' AND a.last_name = 'Dean' GROUP BY c.name, f.title;
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Documentary' LIMIT 5;
SELECT T3.name, T1.rental_rate / T1.rental_duration AS rental_cost_per_day FROM film AS T1 JOIN language AS T3 ON T1.language_id = T3.language_id WHERE T1.title = 'UNTOUCHABLES SUNRISE'
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id WHERE r.rental_date LIKE '2005-05-24%';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'BRIAN' AND c.last_name = 'WYMAN' AND YEAR(r.rental_date) = 2005 AND MONTH(r.rental_date) = 7;
SELECT i.inventory_id, a.first_name, a.last_name FROM inventory i JOIN film f ON i.film_id = f.film_id JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE f.title = 'STREETCAR INTENTIONS';
SELECT f.title, c.name FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer cu ON r.customer_id = cu.customer_id WHERE cu.first_name = 'Natalie' AND cu.last_name = 'Meyer' AND YEAR(r.rental_date) = 2006 AND MONTH(r.rental_date) = 2;
SELECT COUNT(T2.rental_id) FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Eleanor' AND T1.last_name = 'Hunt';
Error: 第 9221 个样本有 2 个SQL。
SELECT (COUNT(CASE WHEN T3.country = 'India' THEN T1.customer_id END) * 100.0 / COUNT(T1.customer_id)) AS percentage FROM customer AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id JOIN city AS T4 ON T2.city_id = T4.city_id JOIN country AS T3 ON T4.country_id = T3.country_id;
SELECT     ((SUM(CASE WHEN a.first_name = 'Mary' AND a.last_name = 'Keitel' THEN 1 ELSE 0 END) *         (SELECT COUNT(*) FROM film_actor fa2 WHERE fa2.actor_id = a2.actor_id)     ) -     (SUM(CASE WHEN a.first_name = 'Angela' AND a.last_name = 'Witherspoon' THEN 1 ELSE 0 END) *         (SELECT COUNT(*) FROM film_actor fa3 WHERE fa3.actor_id = a3.actor_id)     )) /     (SUM(CASE WHEN a.first_name = 'Angela' AND a.last_name = 'Witherspoon' THEN 1 ELSE 0 END) *         (SELECT COUNT(*) FROM film_actor fa4 WHERE fa4.actor_id = a4.actor_id)     ) * 100 AS Percentage FROM     actor a LEFT JOIN     film_actor fa ON a.actor_id = fa.actor_id JOIN     actor a2 ON a2.actor_id = fa.actor_id JOIN     actor a3 ON a3.actor_id = fa.actor_id JOIN     actor a4 ON a4.actor_id = fa.actor_id WHERE     (a.first_name = 'Mary' AND a.last_name = 'Keitel') OR     (a.first_name = 'Angela' AND a.last_name = 'Witherspoon')
SELECT c.email, a.address, ci.city, co.country FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id JOIN country co ON ci.country_id = co.country_id WHERE c.first_name = 'Lillie' AND c.last_name = 'Kim';
SELECT c.first_name, c.last_name FROM customer AS c JOIN rental AS r ON c.customer_id = r.customer_id JOIN staff AS s ON r.staff_id = s.staff_id WHERE s.first_name = 'Mike' AND s.last_name = 'Hillyer' LIMIT 5;
SELECT SUM(amount) FROM payment JOIN customer ON payment.customer_id = customer.customer_id WHERE customer.first_name = 'Diane' AND customer.last_name = 'Collins';
SELECT c.first_name, c.last_name, c.email FROM customer c JOIN payment p ON c.customer_id = p.customer_id WHERE p.amount > (SELECT AVG(amount) * 0.7 FROM payment) GROUP BY c.customer_id, c.first_name, c.last_name, c.email;
SELECT COUNT(*) FROM film WHERE rental_rate = 0.99;
SELECT COUNT(*) FROM customer WHERE customer_id < 100 AND last_name = 'Thomas';
SELECT actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id JOIN film_text ON film.film_id = film_text.film_id WHERE film_text.description = 'A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Liza' AND a.last_name = 'Bergman' ORDER BY f.replacement_cost DESC LIMIT 1;
Error: 第 9232 个样本有 2 个SQL。
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Angelina' AND a.last_name = 'Astaire' AND f.replacement_cost = 27.99;
SELECT i.inventory_id FROM inventory i JOIN film f ON i.film_id = f.film_id WHERE f.title = 'African Egg';
SELECT COUNT(*) FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE film.length = 113 AND actor.first_name = 'Kirk' AND actor.last_name = 'Jovovich';
SELECT COUNT(*) FROM film JOIN inventory ON film.film_id = inventory.film_id WHERE inventory.inventory_id BETWEEN 20 AND 60 AND film.rating = 'G';
SELECT COUNT(film.film_id) FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE film.rental_rate = 4.99 AND actor.first_name = 'Bob' AND actor.last_name = 'Fawcett';
SELECT i.inventory_id FROM inventory i JOIN film f ON i.film_id = f.film_id JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Russell' AND a.last_name = 'Close' AND f.length BETWEEN 110 AND 150;
SELECT s.store_id, i.inventory_id FROM inventory i JOIN store s ON i.store_id = s.store_id JOIN film f ON i.film_id = f.film_id WHERE f.length = (SELECT MAX(length) FROM film);
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Elvis' AND a.last_name = 'Marx';
SELECT i.inventory_id FROM inventory i JOIN film f ON i.film_id = f.film_id JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE f.rental_rate = 4.99 AND a.first_name = 'Lucille' AND a.last_name = 'Dee';
SELECT DISTINCT s.store_id FROM store s JOIN inventory i ON s.store_id = i.store_id JOIN film f ON i.film_id = f.film_id WHERE f.rental_rate > (SELECT AVG(rental_rate) * 0.6 FROM film);
SELECT     (COUNT(CASE WHEN f.rating = 'G' THEN 1 END) * 100.0 / COUNT(*)) FROM     film f JOIN     film_actor fa ON f.film_id = fa.film_id JOIN     actor a ON fa.actor_id = a.actor_id WHERE     a.first_name = 'Nick' AND a.last_name = 'Wahlberg';
SELECT address FROM address WHERE district = 'Texas' ORDER BY city_id ASC;
SELECT first_name, last_name, email FROM customer WHERE active = 0 AND YEAR(create_date) = 2006;
SELECT (COUNT(CASE WHEN rating = 'PG-13' THEN film_id END) * 100.0 / COUNT(film_id)) AS Percentage_PG13 FROM film;
SELECT title, rental_rate FROM film ORDER BY rental_rate / LEAST(rental_duration, 3) DESC LIMIT 10;
SELECT AVG(amount) FROM payment WHERE customer_id = 15;
SELECT COUNT(*) FROM (   SELECT rental_id   FROM rental   WHERE TIMESTAMPDIFF(DAY, rental_date, return_date) >     (SELECT AVG(TIMESTAMPDIFF(DAY, rental_date, return_date))      FROM rental) ) AS T;
SELECT (COUNT(CASE WHEN c.name = 'horror' THEN fc.film_id END) * 100 / COUNT(fc.film_id)) AS horror_percentage FROM film_category fc JOIN category c ON fc.category_id = c.category_id;
SELECT A.first_name, A.last_name FROM actor A JOIN film_actor FA ON A.actor_id = FA.actor_id GROUP BY A.actor_id, A.first_name, A.last_name ORDER BY COUNT(FA.film_id) DESC LIMIT 1;
SELECT T1.first_name, T1.last_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id JOIN film_category AS T3 ON T2.film_id = T3.film_id JOIN category AS T4 ON T3.category_id = T4.category_id WHERE T4.name = 'drama' GROUP BY T1.actor_id ORDER BY COUNT(T2.film_id) DESC LIMIT 1;
SELECT     (AVG(CASE WHEN c.country = 'Australia' THEN rental_count ELSE 0 END) -      AVG(CASE WHEN c.country = 'Canada' THEN rental_count ELSE 0 END)) AS diff_avg_rentals_per_day FROM (     SELECT         ci.city_id,         COUNT(r.rental_id) / DATEDIFF(MAX(r.rental_date), MIN(r.rental_date)) AS rental_count     FROM rental r     JOIN inventory i ON r.inventory_id = i.inventory_id     JOIN store s ON i.store_id = s.store_id     JOIN address a ON s.address_id = a.address_id     JOIN city ci ON a.city_id = ci.city_id     JOIN country c ON ci.country_id = c.country_id     GROUP BY ci.city_id ) AS subquery JOIN country c ON subquery.city_id IN (     SELECT city_id FROM city WHERE country_id IN (         SELECT country_id FROM country WHERE country IN ('Australia', 'Canada')     ) ) GROUP BY c.country ;
SELECT (COUNT(case when c.name = 'action' then fc.film_id end) * 100.0 / COUNT(fc.film_id)) AS percentage FROM film_actor fa JOIN actor a ON fa.actor_id = a.actor_id JOIN film_category fc ON fa.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE a.first_name = 'Reese' AND a.last_name = 'Kilmer';
SELECT SUM(p.amount) FROM payment p JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE f.title = 'Clockwork Paradice';
SELECT c.first_name, c.last_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film_category fc ON i.film_id = fc.film_id GROUP BY c.customer_id HAVING COUNT(DISTINCT fc.category_id) > 5;
SELECT AVG(actor_num) AS avg_actors_in_comedies FROM (   SELECT COUNT(DISTINCT fa.actor_id) AS actor_num   FROM film_actor fa   JOIN film_category fc ON fa.film_id = fc.film_id   JOIN category c ON fc.category_id = c.category_id   WHERE c.name = 'Comedy'   GROUP BY fa.film_id ) as t;
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id WHERE c.name = 'Children' GROUP BY f.title ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN p.amount > (SELECT AVG(amount) FROM payment WHERE store_id = 1) THEN 1 END) * 100 / COUNT(p.customer_id)) AS Percentage FROM     payment p WHERE     p.store_id = 1;
SELECT c.first_name, c.last_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film_category fc ON i.film_id = fc.film_id JOIN category cat ON fc.category_id = cat.category_id WHERE cat.name IN ('Family', 'Sci-Fi') GROUP BY c.customer_id, c.first_name, c.last_name HAVING COUNT(cASE WHEN cat.name = 'Family' THEN 1 END) > COUNT(CASE WHEN cat.name = 'Sci-Fi' THEN 1 END);
SELECT title FROM film WHERE rating = 'NC-17';
SELECT COUNT(*) FROM actor WHERE last_name = 'Kilmer';
SELECT COUNT(*) FROM film WHERE length > 100;
SELECT COUNT(*) FROM payment WHERE payment_date LIKE '2005-08%';
SELECT country.country FROM country JOIN city ON country.country_id = city.country_id JOIN address ON city.city_id = address.city_id WHERE address.address = '1386 Nakhon Sawan Boulevard'
SELECT T2.name FROM film AS T1 JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.release_year = 2006 GROUP BY T1.language_id ORDER BY COUNT(T1.film_id) DESC LIMIT 1;
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Classics';
SELECT COUNT(*) FROM rental JOIN customer ON rental.customer_id = customer.customer_id WHERE customer.first_name = 'Ella' AND customer.last_name = 'Oliver' AND rental.rental_date BETWEEN '2016-06-01' AND '2016-06-30';
SELECT COUNT(DISTINCT c.customer_id) FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN staff s ON r.staff_id = s.staff_id WHERE c.first_name = 'JON' AND c.last_name = 'STEVENS';
Error: 第 9270 个样本有 2 个SQL。
SELECT first_name FROM customer WHERE address_id IN (     SELECT address_id     FROM address     WHERE postal_code LIKE '76%' );
SELECT T3.return_date FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id WHERE T1.title = 'BLOOD ARGONAUTS'
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Cuba' AND a.last_name = 'Allen';
SELECT COUNT(DISTINCT a.actor_id) FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Music';
SELECT a.first_name, a.last_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Comedy' GROUP BY a.actor_id, a.first_name, a.last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM customer WHERE customer_id NOT IN (     SELECT customer_id     FROM rental     WHERE staff_id IN (         SELECT staff_id         FROM staff         WHERE first_name = 'Mike'     ) );
SELECT A.first_name, A.last_name FROM actor A JOIN film_actor FA ON A.actor_id = FA.actor_id JOIN film F ON FA.film_id = F.film_id WHERE F.rating = 'PG-13' AND F.replacement_cost = (     SELECT MAX(replacement_cost)     FROM film     WHERE rating = 'PG-13' );
SELECT c.first_name, c.last_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id WHERE r.return_date IS NULL GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id WHERE ci.city = 'Miyakonojo';
SELECT COUNT(*) FROM customer c JOIN rental r ON c.customer_id = r.customer_id WHERE c.active = 0 AND r.return_date IS NULL;
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Animation' ORDER BY f.length ASC LIMIT 1;
SELECT c.country FROM country c JOIN city ci ON c.country_id = ci.country_id JOIN address a ON ci.city_id = a.city_id JOIN store s ON a.address_id = s.address_id JOIN staff st ON s.store_id = st.store_id JOIN rental r ON st.staff_id = r.staff_id JOIN customer cu ON r.customer_id = cu.customer_id WHERE cu.first_name = 'Hector' AND cu.last_name = 'Poinexter'
SELECT AVG(p.amount) FROM payment p JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film_category fc ON i.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror';
SELECT AVG(amount) FROM payment WHERE customer_id IN (     SELECT customer_id     FROM customer     WHERE first_name = 'Christy' AND last_name = 'Vargas' );
SELECT (COUNT(CASE WHEN T1.length < 100 AND T3.name = 'Drama' THEN T1.film_id ELSE NULL END) * 100 / COUNT(T1.film_id)) AS percentage FROM film AS T1 JOIN film_category AS T2 ON T1.film_id = T2.film_id JOIN category AS T3 ON T2.category_id = T3.category_id;
Error: 第 9286 个样本有 2 个SQL。
SELECT address_id FROM address WHERE district = 'Gansu';
SELECT c.name, c.category_id, c.last_update FROM category c ORDER BY c.last_update DESC LIMIT 3;
SELECT first_name, last_name FROM customer WHERE active = 0 LIMIT 3;
SELECT film.rental_rate / film.rental_duration AS rental_price_per_day FROM film WHERE film.title = 'Airplane Sierra'
SELECT T1.address, T1.address2, T1.district FROM address AS T1 JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 2;
SELECT T2.city FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.address = '1623 Kingstown Drive'
SELECT city FROM city JOIN country ON city.country_id = country.country_id WHERE country.country = 'Algeria' LIMIT 3;
SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'Agent Truman'
SELECT title FROM film WHERE film_id IN (     SELECT film_id     FROM film_category     WHERE category_id = (         SELECT category_id         FROM category         WHERE name = 'action'     )     LIMIT 3 );
SELECT     (SELECT COUNT(*) FROM film_category fc INNER JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Children') -     (SELECT COUNT(*) FROM film_category fc INNER JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Action')
SELECT T2.district FROM customer AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller';
SELECT first_name, last_name FROM customer WHERE active = 1 AND address_id IN (     SELECT address_id     FROM address     WHERE address = '1795 Santiago de Compostela Way' AND district = 'Texas' );
SELECT COUNT(*) FROM film WHERE language_id = (SELECT language_id FROM language WHERE name = 'English') AND length > 50 AND replacement_cost < 10.99;
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'ACADEMY DINOSAUR';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Penelope' AND a.last_name = 'Guiness' LIMIT 2;
SELECT (COUNT(CASE WHEN c.name = 'Documentary' THEN 1 END) * 100.0 / COUNT(fc.film_id)) AS documentary_percentage FROM film_category fc JOIN category c ON fc.category_id = c.category_id;
SELECT COUNT(*) FROM film WHERE language_id = (SELECT language_id FROM language WHERE name = 'English') AND rating = 'NC-17';
SELECT title, MAX(length) FROM film ORDER BY length DESC LIMIT 1;
SELECT COUNT(*) FROM actor WHERE first_name = 'Dan';
SELECT first_name, COUNT(first_name) as count FROM customer GROUP BY first_name ORDER BY count DESC LIMIT 1;
SELECT DISTINCT f.rating FROM film f WHERE f.special_features LIKE '%Behind the Scenes%';
SELECT customer_id, COUNT(rental_id) AS num_rentals FROM rental GROUP BY customer_id ORDER BY num_rentals DESC LIMIT 1;
SELECT title FROM film_text WHERE description LIKE '%Lacklusture%';
SELECT COUNT(*) FROM rental r JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'Francis' AND c.last_name = 'Sikes';
SELECT s.manager_staff_id, st.first_name, st.last_name FROM store s JOIN staff st ON s.manager_staff_id = st.staff_id JOIN inventory i ON s.store_id = i.store_id GROUP BY s.manager_staff_id ORDER BY COUNT(i.film_id) DESC LIMIT 1;
SELECT T2.address FROM customer AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.active = 0;
SELECT category.name, COUNT(*) as count FROM film_category JOIN category ON film_category.category_id = category.category_id GROUP BY category.name ORDER BY count DESC LIMIT 1;
SELECT a.first_name, a.last_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id WHERE f.title = 'Jason trap';
SELECT c.first_name, c.last_name FROM customer c JOIN payment p ON c.customer_id = p.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY SUM(p.amount) DESC LIMIT 1;
SELECT f.title, COUNT(i.inventory_id) as rental_count FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.title ORDER BY rental_count DESC LIMIT 5;
SELECT country.country FROM country JOIN city ON country.country_id = city.country_id WHERE city.city = 'Sasebo';
SELECT T1.address FROM address AS T1 JOIN store AS T2 ON T1.address_id = T2.address_id;
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Animation';
SELECT T3.city FROM customer AS T1 JOIN store AS T2 ON T1.store_id = T2.store_id JOIN city AS T3 ON T2.address_id = T3.city_id GROUP BY T3.city ORDER BY COUNT(T1.customer_id) DESC LIMIT 1;
SELECT a.first_name, a.last_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id, a.first_name, a.last_name ORDER BY COUNT(fa.film_id) DESC LIMIT 1;
SELECT (COUNT(CASE WHEN c.name = 'Horror' THEN 1 END) * 100.0 / COUNT(f.film_id)) AS horror_percentage FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id;
SELECT first_name, last_name FROM actor WHERE actor_id = 5;
SELECT COUNT(film_id) FROM film_category WHERE category_id = 11;
SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'BABY HALL'
SELECT A.first_name, A.last_name FROM actor A JOIN film_actor FA ON A.actor_id = FA.actor_id JOIN film F ON FA.film_id = F.film_id WHERE F.rental_rate = (SELECT MAX(rental_rate) FROM film)
SELECT ft.description FROM film_text ft JOIN film_actor fa ON ft.film_id = fa.film_id JOIN actor a ON a.actor_id = fa.actor_id WHERE a.first_name = 'JENNIFER' AND a.last_name = 'DAVIS';
SELECT c.first_name, c.last_name FROM customer AS c JOIN payment AS p ON c.customer_id = p.customer_id WHERE p.amount > 10;
SELECT address.address FROM address JOIN customer ON address.address_id = customer.address_id WHERE customer.first_name = 'SUSAN' AND address.postal_code = '77948';
Error: 第 9330 个样本有 2 个SQL。
SELECT first_name, last_name FROM customer JOIN address ON customer.address_id = address.address_id WHERE address = '692 Joliet Street';
SELECT film.title FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE film.length > 120 AND category.name = 'action';
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'ANONYMOUS HUMAN';
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror' ORDER BY f.rental_rate ASC LIMIT 1;
SELECT film_text.description FROM film_text JOIN film_category ON film_text.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Travel';
SELECT SUM(p.amount) FROM payment p JOIN customer c ON p.customer_id = c.customer_id JOIN address a ON c.address_id = a.address_id WHERE a.district = 'Nagasaki';
SELECT (SUM(p.amount) FILTER (WHERE c.first_name = 'MARGARET' AND c.last_name = 'MOORE') / SUM(p.amount)) * 100 AS percentage FROM payment p JOIN customer c ON p.customer_id = c.customer_id;
SELECT (COUNT(film.title) FILTER (WHERE film.length > 120 AND fc.category_id = c.category_id) * 100.0 / COUNT(film.title)) AS percentage FROM film JOIN film_category fc ON film.film_id = fc.film_id JOIN category c ON c.category_id = fc.category_id WHERE c.name = 'Horror';
SELECT COUNT(*) FROM film WHERE release_year = 2006;
SELECT title FROM film WHERE film_id BETWEEN 1 AND 10;
SELECT film_id, rental_duration FROM film WHERE rental_duration = (SELECT MAX(rental_duration) FROM film);
SELECT title FROM film WHERE rental_rate = (SELECT MAX(rental_rate) FROM film);
SELECT title FROM film WHERE rating = 'G';
SELECT T2.name FROM film AS T1 JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'CHILL LUCK'
SELECT f.title, f.last_update FROM film f JOIN language l ON f.language_id = l.language_id WHERE l.name = 'English' AND f.release_year = 2006;
SELECT COUNT(*) FROM film WHERE language_id = (SELECT language_id FROM language WHERE name = 'Italian') AND special_features LIKE '%deleted scenes%';
SELECT COUNT(film.title) FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Animation' AND film.rating = 'NC-17';
SELECT DISTINCT f.rating FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'action';
SELECT f.film_id FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Comedy';
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Documentary' ORDER BY f.length DESC LIMIT 1;
SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'BLADE POLISH';
SELECT rental_id FROM rental JOIN customer ON rental.customer_id = customer.customer_id WHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith';
SELECT first_name, last_name FROM customer WHERE customer_id IN (     SELECT customer_id     FROM rental     WHERE staff_id = 1 );
SELECT DISTINCT c.email FROM customer c JOIN rental r ON c.customer_id = r.customer_id WHERE r.staff_id = 2;
SELECT actor_id FROM film_actor WHERE film_id = (     SELECT film_id     FROM film     WHERE title = 'BOUND CHEAPER' );
SELECT inventory_id FROM rental WHERE customer_id = (     SELECT customer_id     FROM customer     WHERE first_name = 'KAREN' AND last_name = 'JACKSON' );
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Jane' AND a.last_name = 'Jackman';
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'BIRD INDEPENDENCE';
SELECT SUM(f.rental_rate) FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Animation';
SELECT AVG(film.rental_rate) FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Sci-Fi';
SELECT     (COUNT(CASE WHEN c.name = 'Horror' THEN f.film_id END) / COUNT(f.film_id)) * 100 AS Horror_Film_Percentage FROM     film f JOIN     film_category fc ON f.film_id = fc.film_id JOIN     category c ON fc.category_id = c.category_id JOIN     language l ON f.language_id = l.language_id WHERE     l.name = 'English'
SELECT COUNT(*) FROM film WHERE rating = 'NC-17' AND rental_duration < 4;
SELECT title FROM film WHERE rating = 'R' AND length = 71 AND replacement_cost = 29.99;
SELECT c.email FROM customer c JOIN rental r ON c.customer_id = r.customer_id WHERE c.active = 1 AND r.rental_date BETWEEN '2005-05-25 19:37:47' AND '2005-05-26 10:06:49';
SELECT SUM(amount) FROM payment JOIN customer ON payment.customer_id = customer.customer_id WHERE customer.first_name = 'Sarah' AND customer.last_name = 'Lewis';
SELECT COUNT(*) FROM payment WHERE payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 10:08:29' AND customer_id IN (SELECT customer_id FROM customer WHERE first_name = 'SUSAN' AND last_name = 'WILSON');
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'ALABAMA DEVIL';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Sandra' AND a.last_name = 'Kilmer';
SELECT COUNT(film.film_id) FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'documentary' AND film.rating = 'PG-13';
SELECT f.title, c.name, f.special_features FROM film AS f JOIN film_category AS fc ON f.film_id = fc.film_id JOIN category AS c ON fc.category_id = c.category_id WHERE f.rental_duration * f.rental_rate > 30;
SELECT T2.first_name, T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.title = 'AFRICAN EGG'
SELECT COUNT(*) FROM rental r JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'Maria' AND c.last_name = 'Miller';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'Dorothy' AND c.last_name = 'Taylor' ORDER BY r.rental_date DESC LIMIT 1;
Error: 第 9374 个样本有 2 个SQL。
SELECT address.address, film.rental_rate FROM film JOIN inventory ON film.film_id = inventory.film_id JOIN store ON inventory.store_id = store.store_id JOIN address ON store.address_id = address.address_id WHERE film.title = 'WYOMING STORM';
SELECT TIMESTAMPDIFF(DAY, T1.rental_date, T1.return_date) AS Difference FROM rental AS T1 JOIN inventory AS T2 ON T1.inventory_id = T2.inventory_id JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'DESTINY SATURDAY' AND T1.customer_id = (SELECT customer_id FROM customer WHERE first_name = 'AUSTIN' AND last_name = 'CINTRON')
SELECT COUNT(film_id) FROM film_actor WHERE actor_id = (     SELECT actor_id     FROM actor     WHERE first_name = 'Nick' AND last_name = 'Stallone' );
SELECT f.title FROM film f JOIN (   SELECT film_id, MIN(length) as min_length   FROM film   GROUP BY film_id ) AS shortest_film ON f.film_id = shortest_film.film_id JOIN (   SELECT film_id, MAX(rental_duration * rental_rate) as max_revenue   FROM film   GROUP BY film_id ) AS max_revenue_film ON f.film_id = max_revenue_film.film_id WHERE f.length = shortest_film.min_length AND f.rental_duration * f.rental_rate = max_revenue_film.max_revenue;
SELECT SUM(amount) FROM payment WHERE customer_id IN (     SELECT customer_id     FROM customer     WHERE first_name = 'Stephanie' AND last_name = 'Mitchell' ) AND payment_date LIKE '2005-06%';
SELECT AVG(replacement_cost) FROM film WHERE rental_rate = 4.99;
SELECT AVG(rental_rate) FROM film WHERE rating = 'PG-13';
SELECT (COUNT(CASE WHEN active = 0 THEN customer_id END) * 100.0 / COUNT(customer_id)) AS percentage_inactive_customers FROM customer WHERE store_id = 1;
SELECT rental_duration FROM film WHERE title = 'DIRTY ACE'
SELECT first_name, last_name FROM customer WHERE email = 'SHEILA.WELLS@sakilacustomer.org';
SELECT title FROM film WHERE length = (SELECT MAX(length) FROM film) ORDER BY title;
SELECT COUNT(*) FROM film_category;
WITH MaryRentals AS (   SELECT COUNT(*) AS TotalRentals,          EXTRACT(MONTH FROM rental_date) AS RentalMonth,          EXTRACT(YEAR FROM rental_date) AS RentalYear   FROM rental r   JOIN customer c ON r.customer_id = c.customer_id   WHERE c.first_name = 'MARY' AND c.last_name = 'SMITH' ), JuneRentals AS (   SELECT COUNT(*) AS JuneRentals   FROM MaryRentals   WHERE RentalMonth = 6 AND RentalYear = 2005 ) SELECT TotalRentals,        JuneRentals,        (JuneRentals::NUMERIC / TotalRentals::NUMERIC) * 100 AS PercentageJuneRentals FROM MaryRentals CROSS JOIN JuneRentals;
SELECT COUNT(*) FROM customer WHERE active = 1;
SELECT title FROM film WHERE rating = 'PG-13';
SELECT title FROM film WHERE rental_duration > 5 LIMIT 10;
SELECT city FROM city JOIN country ON city.country_id = country.country_id WHERE country.country = 'United Arab Emirates';
SELECT c.first_name, c.last_name FROM customer AS c JOIN payment AS p ON c.customer_id = p.customer_id WHERE p.amount > 10 LIMIT 5;
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Burt' AND a.last_name = 'Dukakis';
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'ENDING CROWDS';
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'BOUND CHEAPER';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Karl' AND a.last_name = 'Berr' AND f.rating = 'PG';
SELECT city FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'Philippines') LIMIT 3;
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.title ORDER BY COUNT(r.rental_id) LIMIT 1;
SELECT ft.description FROM film_text ft JOIN film_actor fa ON ft.film_id = fa.film_id JOIN actor a ON a.actor_id = fa.actor_id WHERE a.first_name = 'Lucille' AND a.last_name = 'Tracy';
SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'BEACH Heartbreakers'
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror' LIMIT 10;
SELECT DISTINCT actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.rating = 'NC-17';
SELECT AVG(film.rental_rate) FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE actor.first_name = 'Lucille' AND actor.last_name = 'Tracy';
SELECT COUNT(*) FROM film WHERE length BETWEEN 100 AND 110;
SELECT actor_id FROM actor WHERE last_name = 'Dee';
SELECT COUNT(*) FROM customer WHERE first_name = 'Nina' AND active = 1;
SELECT COUNT(*) FROM film JOIN inventory ON film.film_id = inventory.film_id WHERE film.rating = 'R' AND inventory.store_id = 2;
SELECT DISTINCT s.store_id FROM store s JOIN inventory i ON s.store_id = i.store_id JOIN film f ON i.film_id = f.film_id JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Reese' AND a.last_name = 'West' AND f.length < 100;
SELECT f.length FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Nick' AND a.last_name = 'Wahlberg' ORDER BY f.rental_rate DESC LIMIT 1;
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Russell' AND a.last_name = 'Close';
SELECT s.store_id FROM store s JOIN inventory i ON s.store_id = i.store_id JOIN film f ON i.film_id = f.film_id WHERE f.title = 'Amadeus Holy';
SELECT COUNT(*) FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE film.rental_rate = 2.99 AND actor.first_name = 'Nina' AND actor.last_name = 'Soto';
(SELECT COUNT(film_id) FROM film_actor fa JOIN actor a ON fa.actor_id = a.actor_id JOIN film f ON fa.film_id = f.film_id JOIN inventory i ON f.film_id = i.film_id WHERE a.first_name = 'Reese' AND a.last_name = 'West' AND i.store_id = 1) - (SELECT COUNT(film_id) FROM film_actor fa JOIN actor a ON fa.actor_id = a.actor_id JOIN film f ON fa.film_id = f.film_id JOIN inventory i ON f.film_id = i.film_id WHERE a.first_name = 'Reese' AND a.last_name = 'West' AND i.store_id = 2)
SELECT postal_code FROM address WHERE address = '692 Joliet Street';
SELECT COUNT(*) FROM customer WHERE active = 1;
SELECT COUNT(*) FROM customer WHERE store_id = 1 AND active = 1;
SELECT T1.address FROM address AS T1 JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'Mary' AND T2.last_name = 'Smith';
SELECT COUNT(*) FROM customer JOIN address ON customer.address_id = address.address_id JOIN city ON address.city_id = city.city_id WHERE customer.active = 1 AND city.city = 'Arlington';
SELECT c.first_name, c.last_name FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id JOIN country co ON ci.country_id = co.country_id WHERE co.country = 'Italy';
SELECT c.country FROM country c JOIN city ci ON c.country_id = ci.country_id JOIN address a ON ci.city_id = a.city_id JOIN customer cu ON a.address_id = cu.address_id WHERE cu.first_name = 'Mary' AND cu.last_name = 'Smith'
SELECT MAX(amount) FROM payment WHERE customer_id = (SELECT customer_id                      FROM customer                      WHERE first_name = 'Mary' AND last_name = 'Smith');
SELECT COUNT(*) FROM rental r JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'Mary' AND c.last_name = 'Smith';
SELECT SUM(amount) FROM payment JOIN customer ON payment.customer_id = customer.customer_id WHERE customer.first_name = 'MARY' AND customer.last_name = 'SMITH';
SELECT COUNT(*) FROM payment JOIN customer ON payment.customer_id = customer.customer_id WHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith' AND YEAR(payment.payment_date) = 2005 AND MONTH(payment.payment_date) = 6;
SELECT c.first_name, c.last_name FROM customer c JOIN payment p ON c.customer_id = p.customer_id WHERE p.amount = (     SELECT MAX(amount)     FROM payment ) GROUP BY c.customer_id, c.first_name, c.last_name;
SELECT SUM(p.amount) AS Total_Spent FROM payment p JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN store s ON i.store_id = s.store_id JOIN address a ON s.address_id = a.address_id JOIN city c ON a.city_id = c.city_id JOIN country co ON c.country_id = co.country_id WHERE co.country = 'Italy'
SELECT COUNT(*) FROM payment WHERE amount > 4.99 AND customer_id IN (     SELECT customer_id     FROM customer     WHERE first_name = 'MARY' AND last_name = 'SMITH' );
SELECT AVG(p.amount) FROM payment p JOIN customer c ON p.customer_id = c.customer_id JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id JOIN country co ON ci.country_id = co.country_id WHERE co.country = 'Italy';
SELECT MAX(frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)`) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Alameda';
SELECT     School_Name,     (`Free Meal Count (Ages 5-17)`) / (`Enrollment (Ages 5-17)`) AS Eligible_Free_Rate FROM     frpm WHERE     School_Type = 'Continuation' ORDER BY     Eligible_Free_Rate ASC LIMIT 3;
SELECT schools.Zip FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`Charter School (Y/N)` = 'Y' AND schools.County = 'Fresno' AND schools.District = 'Fresno County Office of Education';
SELECT schools.MailStreet, schools.MailCity, schools.MailZip, schools.MailState FROM schools JOIN frpm ON schools.CDSCode = frpm.'School Code' WHERE frpm.'FRPM Count (K-12)' = (     SELECT MAX('FRPM Count (K-12)')     FROM frpm )
SELECT schools.Phone FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`Charter School (Y/N)` = 'Y' AND frpm.Charter Funding Type = 'Direct' AND schools.OpenDate > '2000-01-01';
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE AvgScrMath < 400 AND schools.Virtual = 'F';
SELECT schools.School FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr > 500 AND schools.Magnet = 1;
SELECT schools.Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumGE1500 = (SELECT MAX(satscores.NumGE1500) FROM satscores) AND satscores.AvgScrMath + satscores.AvgScrRead + satscores.AvgScrWrite > 1500;
SELECT T2.NumTstTakr FROM ( SELECT CDSCode, MAX(`FRPM Count (K-12)`) as MaxFRPM FROM frpm GROUP BY CDSCode ORDER BY MaxFRPM DESC LIMIT 1 ) AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds;
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE AvgScrMath > 560 AND schools.FundingType = 'Directly Charter-Funded';
SELECT frpm."FRPM Count (Ages 5-17)" FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE satscores.AvgScrRead = (     SELECT MAX(AvgScrRead)     FROM satscores )
SELECT CDSCode FROM frpm WHERE (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500;
SELECT MAX(f.frpm.`Percent (%) Eligible Free (Ages 5-17)`) FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE (satscores.NumGE1500 / satscores.NumTstTakr) > 0.3;
SELECT schools.Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr > 0 ORDER BY (satscores.NumGE1500 / satscores.NumTstTakr) DESC LIMIT 3;
SELECT NCESSchool FROM frpm ORDER BY Enrollment (Ages 5-17) DESC LIMIT 5;
SELECT     s.district,     AVG(s.AvgScrRead) as avg_reading_score FROM     satscores s JOIN     schools sc ON s.cds = sc.CDSCode WHERE     sc.StatusType = 'Active' GROUP BY     s.district ORDER BY     avg_reading_score DESC LIMIT 1;
SELECT COUNT(*) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Alameda' AND ss.NumTstTakr < 100;
SELECT schools.CharterSchoolNumber FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrWrite = 499;
SELECT COUNT(*) FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds WHERE f.County_Name = 'Contra Costa' AND f.District_Type = 'Directly Funded' AND ss.NumTstTakr <= 250;
SELECT schools.Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores);
SELECT COUNT(*) FROM frpm WHERE County_Name = 'Amador' AND Low_Grade = 9 AND High_Grade = 12;
SELECT COUNT(*) FROM frpm WHERE `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)` < 700 AND `District Name` = 'Los Angeles'
SELECT s.sname, MAX(ss.NumTstTakr) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Contra Costa' GROUP BY s.sname ORDER BY ss.NumTstTakr DESC LIMIT 1;
SELECT schools.School, schools.Street, schools.City, schools.Zip FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE ABS(frpm."Enrollment (K-12)" - frpm."Enrollment (Ages 5-17)") > 30;
SELECT s.School FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds WHERE f."Percent (%) Eligible Free (K-12)" > 10 AND ss.NumGE1500 > 0;
SELECT schools.School, schools.FundingType FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Riverside' GROUP BY schools.CDSCode, schools.School, schools.FundingType HAVING AVG(satscores.AvgScrMath) > 400;
SELECT schools.School, schools.Street, schools.City, schools.Zip, schools.State FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'Monterey' AND schools.GSoffered LIKE '%High%' AND frpm.FRPMCount('Ages 5-17') > 800;
SELECT     s.sname AS School_Name,     ss.AvgScrWrite AS Average_Writing_Score,     s.Phone AS Communication_Number FROM     satscores ss JOIN     schools s ON ss.cds = s.CDSCode WHERE     (s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-01-01') AND     ss.rtype = 'school' ORDER BY     s.sname;
SELECT s.School, s.DOCType FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.Charter Funding Type = 'Locally Funded' AND (f.Enrollment (K-12) - f.Enrollment (Ages 5-17)) >     (SELECT AVG(f.Enrollment (K-12) - f.Enrollment (Ages 5-17))      FROM frpm f      WHERE f.Charter Funding Type = 'Locally Funded')
SELECT OpenDate FROM schools WHERE GSoffered = 'K-12' ORDER BY Enrollment (K-12) DESC LIMIT 1;
SELECT City, MIN(Enrollment) as Min_Enrollment FROM (   SELECT City, Enrollment(K_12) as Enrollment   FROM schools   INNER JOIN frpm ON schools.CDSCode = frpm.School Code   WHERE Low Grade >= 1 AND High Grade <= 12 ) as subquery GROUP BY City ORDER BY Min_Enrollment ASC LIMIT 5;
SELECT     frpm.School Name,     frpm.`Percent (%) Eligible Free (K-12)` AS Eligible_Free_Rate FROM     frpm JOIN     schools ON frpm.CDSCode = schools.CDSCode WHERE     frpm.`Low Grade` <= 1 AND frpm.`High Grade` >= 12 ORDER BY     frpm.`Enrollment (K-12)` DESC LIMIT 10, 2;
SELECT     s.SchoolName,     (f.FRPMCountK12 / f.EnrollmentK12) * 100 AS EligibleFreeReducedMealRate FROM     frpm f JOIN     schools s ON f.CDSCode = s.CDSCode WHERE     f.LowGrade >= 1 AND f.HighGrade <= 12 AND s.SOC = 66 ORDER BY     f.FRPMCountK12 DESC LIMIT 5;
Error: 第 9462 个样本有 2 个SQL。
SELECT (`Free Meal Count (Ages 5-17)`) / (`Enrollment (Ages 5-17)`) AS FreeRate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Kacey' AND schools.AdmLName1 = 'Gibson'
SELECT T3.AdmEmail1 FROM ( (SELECT T1.CDSCode, MIN(T1.Enrollment) AS MinEnrollment FROM frpm T1 WHERE T1.`Charter School (Y/N)` = 'Y' GROUP BY T1.CDSCode) T2 JOIN schools T3 ON T2.CDSCode = T3.CDSCode WHERE T3.Enrollment = T2.MinEnrollment )
SELECT T3.AdmFName1, T3.AdmLName1 FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode JOIN (     SELECT CDSCode, MAX(NumTstTakr) AS MaxTestTakers     FROM satscores     WHERE NumGE1500 >= 1500     GROUP BY CDSCode ) AS T4 ON T1.cds = T4.CDSCode AND T1.NumTstTakr = T4.MaxTestTakers WHERE T1.NumGE1500 >= 1500 ORDER BY T1.NumTstTakr DESC LIMIT 1;
SELECT schools.Street, schools.City, schools.Zip, schools.State FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumGE1500 / satscores.NumTstTakr = (     SELECT MIN(excellence_rate)     FROM (         SELECT satscores.NumGE1500 / satscores.NumTstTakr AS excellence_rate         FROM satscores     ) AS subquery );
SELECT schools.Website FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Los Angeles' AND satscores.NumTstTakr BETWEEN 2000 AND 3000;
SELECT AVG(s.NumTstTakr) FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE sc.City = 'Fresno' AND sc.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';
SELECT schools.Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.District = 'Fresno Unified' ORDER BY satscores.AvgScrRead ASC LIMIT 1;
SELECT satscores.sname, satscores.AvgScrRead FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.Virtual = 'F' ORDER BY satscores.AvgScrRead DESC LIMIT 5;
SELECT schools.SchoolType FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)
Error: 第 9472 个样本有 2 个SQL。
SELECT s.city, AVG(sats.AvgScrWrite) FROM schools s JOIN satscores sats ON s.CDSCode = sats.cds WHERE sats.NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 > 0) GROUP BY s.city;
SELECT schools.School, AVG(satscores.AvgScrWrite) AS AvgWritingScore FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.AdmFName1 = 'Ricci' AND schools.AdmLName1 = 'Ulrich' GROUP BY schools.School;
SELECT s.School, s.Enroll12 FROM schools AS s JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE f.DOC = 31 ORDER BY s.Enroll12 DESC LIMIT 1;
SELECT COUNT(*) / 12 AS Monthly_Average FROM schools WHERE County = 'Alameda' AND DOC = 52 AND OpenDate LIKE '1980%';
SELECT     (COUNT(CASE WHEN DOC = 54 THEN CDSCode END) / COUNT(CASE WHEN DOC = 52 THEN CDSCode END)) as ratio FROM     schools WHERE     County = 'Orange'     AND Charter = 'Merged';
SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1;
SELECT schools.MailStreet, schools.School FROM schools JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.AvgScrMath DESC LIMIT 5,1;
SELECT T3.MailStreet, T3.sname FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode JOIN schools AS T3 ON T2.CDSCode = T3.CDSCode WHERE T1.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores)
SELECT COUNT(schools.CDSCode) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.MailCity = 'Lakeport' AND (satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite) >= 1500;
SELECT SUM(satscores.NumTstTakr) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.MailCity = 'Fresno'
SELECT schools.School, schools.MailZip FROM schools WHERE (schools.AdmFName1 = 'Avetik' AND schools.AdmLName1 = 'Atoian') OR (schools.AdmFName2 = 'Avetik' AND schools.AdmLName2 = 'Atoian') OR (schools.AdmFName3 = 'Avetik' AND schools.AdmLName3 = 'Atoian');
SELECT     (SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND County = 'Colusa') /     (SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND County = 'Humboldt') AS Ratio;
SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND County = 'San Joaquin' AND StatusType = 'Active';
SELECT schools.Phone, schools.Ext FROM schools JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.AvgScrWrite DESC LIMIT 1 OFFSET 332;
SELECT schools.School, schools.Phone, schools.Ext FROM schools WHERE schools.Zip = '95203-3704';
SELECT schools.Website FROM schools JOIN (   SELECT CDSCode   FROM schools   WHERE AdmFName1 = 'Mike' AND AdmLName1 = 'Larson'   UNION   SELECT CDSCode   FROM schools   WHERE AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez' ) AS admins ON schools.CDSCode = admins.CDSCode;
SELECT Website FROM schools WHERE Charter = 1 AND Virtual = 'P' AND County = 'San Joaquin';
SELECT COUNT(*) FROM schools WHERE City = 'Hickman' AND DOC = 52 AND Charter = 1;
SELECT COUNT(*) FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Los Angeles' AND f.`Percent (%) Eligible Free (K-12)` < 0.18 AND f.Charter School (Y/N) = 0;
SELECT schools.School, schools.City,        schools.AdmFName1 || ' ' || schools.AdmLName1 AS Administrator1,        schools.AdmFName2 || ' ' || schools.AdmLName2 AS Administrator2,        schools.AdmFName3 || ' ' || schools.AdmLName3 AS Administrator3 FROM schools WHERE schools.Charter = 1 AND schools.CharterNum = '00D2';
SELECT COUNT(*) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4';
SELECT     (COUNT(CASE WHEN FundingType = 'Local' THEN 1 END) * 100.0 / COUNT(*)) AS Local_Funding_Ratio_Percentage FROM     california_schools.frpm WHERE     County_Name = 'Santa Clara'     AND LENGTH(Charter_School_Number) > 0;
SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly Funded' AND County = 'Stanislaus' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';
SELECT SUM(Enrollment (K-12)) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.City = 'San Francisco' AND schools.StatusType = 'Closed' AND schools.ClosedDate = '1989' AND frpm.District Type = 'Community College District';
SELECT County, COUNT(*) AS ClosureCount FROM schools WHERE substr(ClosedDate, 1, 4) BETWEEN '1980' AND '1989' AND SOC = '11' GROUP BY County ORDER BY ClosureCount DESC LIMIT 1;
SELECT NCESDist FROM schools WHERE SOC = 31;
SELECT COUNT(*) FROM schools WHERE County = 'Alpine' AND District LIKE '%Community Day%' AND StatusType IN ('Active', 'Closed');
SELECT District Code FROM schools WHERE Magnet = 0 AND City = 'Fresno';
SELECT COUNT(*) FROM frpm WHERE School_Name = 'State Special School' AND County_Name = 'Fremont' AND Academic_Year = '2014-2015' AND EdOpsCode = 'SSS' AND Enrollment (Ages 5-17);
SELECT frpm."FRPM Count (Ages 5-17)" FROM frpm JOIN schools ON frpm."CDSCode" = schools."CDSCode" WHERE schools."School" = 'Youth Authority School' AND schools."MailStreet" = 'PO Box 1040';
SELECT LOW GRADE FROM frpm WHERE EdOpsCode = 'SPECON' AND NCESDist = 613360 ORDER BY LOW GRADE LIMIT 1;
SELECT schools.School, frpm.Educational_Option_Type FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.County_Code = 37 AND frpm.NSLP_Provision_Status = 'Breakfast Provision 2';
SELECT schools.City FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.County_Name = 'Merced' AND frpm.NSLP_Provision_Status = '2' AND frpm.Low_Grade = '9' AND frpm.High_Grade = '12' AND schools.EILCode = 'HS';
SELECT schools.School, (frpm."Free Meal Count (Ages 5-17)" / frpm."Enrollment (Ages 5-17)" * 100) AS "Percent (%) Eligible FRPM (Ages 5-17)" FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm."County Name" = 'Los Angeles' AND frpm."Low Grade" = 'KG' AND frpm."High Grade" = '09'
SELECT GSserved, COUNT(*) as count FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY count DESC LIMIT 1;
SELECT County, COUNT(*) AS Num_Schools FROM schools WHERE Virtual = 'F' AND County IN ('San Diego', 'Santa Barbara') GROUP BY County ORDER BY Num_Schools DESC LIMIT 1;
SELECT schools.School, schools.Latitude, schools.SchoolType FROM schools WHERE schools.Latitude = (SELECT MAX(Latitude) FROM schools);
SELECT schools.City, schools.School, schools.LowGrade FROM schools WHERE schools.State = 'CA' AND schools.Latitude = (SELECT MIN(Latitude) FROM schools WHERE State = 'CA');
SELECT GSoffered FROM schools WHERE Longitude = (SELECT MAX(Longitude) FROM schools)
SELECT COUNT(schools.CDSCode), schools.City, COUNT(schools.CDSCode) as School_Count FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.Magnet = 1 AND schools.GSoffered = 'K-8' GROUP BY schools.City;
SELECT AdmFName1, COUNT(*) as count, District FROM schools GROUP BY AdmFName1, District ORDER BY count DESC LIMIT 2;
SELECT T1.DistrictCode, (T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` * 100) AS Percent_Eligible_Free_K_12 FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine' OR T2.AdmFName2 = 'Alusine' OR T2.AdmFName3 = 'Alusine';
SELECT schools.District, california_schools.County, schools.School, AdmLName1 FROM schools JOIN california_schools ON schools.CDSCode = california_schools.CDSCode WHERE california_schools."Charter School Number" = '40';
SELECT AdmEmail1, AdmEmail2, AdmEmail3 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND (SOC = 62 OR DOC = 54) AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31'
SELECT schools.AdmEmail1, schools.School FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores)
SELECT COUNT(*) FROM account JOIN disp ON account.account_id = disp.account_id JOIN card ON disp.disp_id = card.disp_id JOIN district ON account.district_id = district.district_id WHERE card.type = 'POPLATEK PO OBRATU' AND district.A3 = 'East Bohemia';
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague';
Error: 第 9520 个样本有 2 个SQL。
SELECT COUNT(*) FROM (   SELECT district_id   FROM client   WHERE gender = 'F'   GROUP BY district_id   HAVING AVG(A11) BETWEEN 6000 AND 10000 ) AS result;
SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.A3 = 'North Bohemia' AND district.A11 > 8000;
WITH OldestFemaleClients AS (     SELECT c.client_id, MAX(c.birth_date) AS OldestBirthDate     FROM client c     WHERE c.gender = 'F'     GROUP BY c.client_id ), AverageSalary AS (     SELECT d.client_id, AVG(d.A11) AS AvgSalary     FROM district d     JOIN OldestFemaleClients o ON d.district_id = o.client_id     GROUP BY d.client_id ), MinAvgSalary AS (     SELECT MIN(AvgSalary) AS MinSalary     FROM AverageSalary ), MaxAvgSalary AS (     SELECT MAX(AvgSalary) AS MaxSalary     FROM AverageSalary ), GapCalculation AS (     SELECT (MaxAvgSalary.MaxSalary - MinAvgSalary.MinSalary) AS SalaryGap     FROM MaxAvgSalary, MinAvgSalary ) SELECT a.account_id, GapCalculation.SalaryGap FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN district dis ON c.district_id = dis.district_id JOIN AverageSalary av ON c.client_id = av.client_id JOIN GapCalculation g WHERE c.gender = 'F' AND av.AvgSalary = (SELECT MinAvgSalary.MinSalary FROM MinAvgSalary);
SELECT a.account_id FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN district ds ON c.district_id = ds.district_id WHERE c.birth_date = (     SELECT MAX(birth_date) FROM client ) AND ds.A11 = (     SELECT MAX(A11) FROM district ) GROUP BY a.account_id;
SELECT COUNT(*) FROM client c JOIN disp d ON c.client_id = d.client_id WHERE d.type = 'POPLATEK TYDNE' AND c.gender = 'Owner';
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id WHERE d.type = 'POPLATEK PO OBRATU';
SELECT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.date LIKE '1997%' AND l.status = 'approved' AND a.frequency = 'POPLATEK TYDNE' ORDER BY l.amount ASC LIMIT 1;
SELECT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 AND YEAR(a.date) = 1993 ORDER BY l.amount DESC LIMIT 1;
SELECT COUNT(*) FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND district.A2 = 'Slokolov';
SELECT account_id FROM trans WHERE date LIKE '1995%' GROUP BY account_id ORDER BY MIN(date) LIMIT 1;
SELECT DISTINCT a.account_id FROM account a JOIN trans t ON a.account_id = t.account_id WHERE a.date < '1997-01-01' AND t.balance > 3000;
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE ca.issued = '1994-03-03';
SELECT a.date FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.amount = 840 AND t.date = '1998-10-14';
SELECT d.district_id FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.date = '1994-08-25' AND l.status = 'approved';
SELECT MAX(t.amount) FROM trans t JOIN account a ON t.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN card c ON d.disp_id = c.disp_id WHERE c.issued = '1996-10-21'
SELECT c.gender FROM client c JOIN disp d ON c.client_id = d.client_id JOIN district dt ON c.district_id = dt.district_id WHERE c.birth_date = (     SELECT MIN(birth_date)     FROM client     WHERE district_id IN (         SELECT district_id         FROM district         ORDER BY A11 DESC         LIMIT 1     ) ) LIMIT 1;
SELECT t.trans_id, t.amount FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.client_id = c.client_id JOIN loan l ON a.account_id = l.account_id WHERE c.client_id = (     SELECT c1.client_id     FROM client c1     JOIN loan l1 ON c1.client_id = l1.client_id     GROUP BY c1.client_id     ORDER BY SUM(l1.amount) DESC     LIMIT 1 ) AND t.date > a.date ORDER BY t.date LIMIT 1;
SELECT COUNT(c.client_id) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN district dis ON c.district_id = dis.district_id WHERE dis.A2 = 'Jesenik' AND c.gender = 'F';
SELECT disp.disp_id FROM disp JOIN account ON disp.account_id = account.account_id JOIN trans ON account.account_id = trans.account_id WHERE trans.amount = 5100 AND trans.date = '1998-09-02' AND trans.currency = 'USD';
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Litomerice' AND YEAR(account.date) = 1996;
Error: 第 9541 个样本有 2 个SQL。
SELECT T1.birth_date FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.account_id IN (SELECT account_id FROM loan WHERE date = '1996-01-03' AND amount = 98832);
SELECT account.account_id FROM account JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague' ORDER BY account.date LIMIT 1;
SELECT     (COUNT(CASE WHEN c.gender = 'M' THEN 1 END) * 100.0 / COUNT(c.client_id)) AS male_percentage FROM     client c JOIN     disp d ON c.client_id = d.client_id JOIN     district dt ON d.disp_id = dt.district_id WHERE     dt.A3 = 'south Bohemia' GROUP BY     dt.A4 ORDER BY     dt.A4 DESC LIMIT 1;
SELECT     ((t2.balance - t1.balance) / t1.balance) * 100 AS increase_rate FROM     trans t1 JOIN     trans t2 ON t2.account_id = t1.account_id JOIN     account a ON a.account_id = t1.account_id JOIN     loan l ON l.account_id = a.account_id JOIN     client c ON c.client_id = (SELECT disp.client_id FROM disp WHERE disp.account_id = a.account_id) WHERE     c.client_id = (         SELECT             c.client_id         FROM             client c         JOIN             disp d ON c.client_id = d.client_id         JOIN             account a ON a.account_id = d.account_id         JOIN             loan l ON l.account_id = a.account_id         WHERE             l.date = '1993-07-05'     ) AND     t1.date = '1993-03-22' AND     t2.date = '1998-12-27';
SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) / SUM(amount)) * 100 AS percentage FROM loan;
SELECT     (COUNT(CASE WHEN l.status = 'C' THEN l.loan_id END) * 100.0 / COUNT(l.loan_id)) AS percentage_running_loans FROM     loan l JOIN     account a ON l.account_id = a.account_id WHERE     l.amount < 100000;
SELECT     a.account_id,     d.A2 AS district_name,     d.A3 AS district_region FROM     account a JOIN     district d ON a.district_id = d.district_id JOIN     trans t ON a.account_id = t.account_id JOIN     card c ON a.account_id = c.disp_id WHERE     YEAR(a.date) = 1993 AND     c.type = 'POPLATEK PO OBRATU' GROUP BY     a.account_id,     d.A2,     d.A3;
SELECT account.account_id, account.frequency FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE district.A2 = 'east Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31';
SELECT account_id, date FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Prachatice';
Error: 第 9551 个样本有 2 个SQL。
SELECT account.account_id, district.A2 AS District, district.A3 AS Region FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000;
SELECT loan.loan_id, district.A3, AVG(district.A11) as average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.duration = 60 GROUP BY loan.loan_id, district.A3;
SELECT     d.district_id,     ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_rate_increment FROM     loan l JOIN     account a ON l.account_id = a.account_id JOIN     disp d1 ON a.account_id = d1.account_id JOIN     client c ON d1.client_id = c.client_id JOIN     district d ON c.district_id = d.district_id WHERE     l.status = 'D' AND     a.date <= '1996-12-31' AND     a.date >= '1995-01-01';
SELECT     COUNT(a.account_id) * 100.0 / (SELECT COUNT(*) FROM account) AS percentage FROM     account a JOIN     district d ON a.district_id = d.district_id WHERE     d.A2 = 'Decin' AND     EXTRACT(YEAR FROM a.date) = 1993;
SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE';
SELECT d.A2, COUNT(c.client_id) AS num_female_account_holders FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'F' GROUP BY d.A2 ORDER BY num_female_account_holders DESC LIMIT 10;
SELECT d.A2, SUM(t.amount) as total_withdrawals FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' GROUP BY d.A2 ORDER BY total_withdrawals DESC LIMIT 10;
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id LEFT JOIN disp dp ON c.client_id = dp.client_id LEFT JOIN card cr ON dp.disp_id = cr.disp_id AND cr.type = 'credit' WHERE d.A3 = 'South Bohemia' AND cr.card_id IS NULL;
SELECT d.A3 FROM district d JOIN (     SELECT l.district_id     FROM loan l     JOIN account a ON l.account_id = a.account_id     WHERE (l.status = 'C' OR l.status = 'D')     GROUP BY l.district_id     ORDER BY SUM(l.amount) DESC     LIMIT 1 ) as subquery ON subquery.district_id = d.district_id;
SELECT AVG(loan.amount) FROM loan JOIN account ON loan.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M';
SELECT A2, A13 FROM district WHERE A13 = (SELECT MAX(A13) FROM district)
SELECT COUNT(*) AS num_accounts_opened FROM account WHERE district_id = (     SELECT district_id     FROM district     WHERE A16 = (         SELECT MAX(A16)         FROM district     ) );
SELECT COUNT(*) FROM (   SELECT t1.account_id   FROM trans t1   JOIN account t2 ON t1.account_id = t2.account_id   WHERE t1.operation = 'VYBER KARTOU' AND t1.balance < 0 AND t2.frequency = 'POPLATEK MESICNE' ) AS result
SELECT COUNT(*) FROM loan JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND loan.amount >= 250000 AND loan.date BETWEEN '1995-01-01' AND '1997-12-31' AND loan.status = 'approved';
SELECT COUNT(*) FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'C' OR l.status = 'D' AND a.district_id = 1;
SELECT COUNT(*) FROM client WHERE gender = 'M' AND district_id = (     SELECT district_id     FROM district     ORDER BY A15 DESC     LIMIT 1 OFFSET 1 );
SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'disponent';
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Pisek';
SELECT d.district_id FROM district d JOIN disp dp ON d.district_id = dp.district_id JOIN account a ON dp.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.date LIKE '1997%' AND t.amount > 10000 GROUP BY d.district_id;
SELECT DISTINCT a.account_id FROM account a JOIN order o ON a.account_id = o.account_id WHERE o.k_symbol = 'SIPO' AND a.district_id IN (     SELECT d.district_id     FROM district d     WHERE d.A2 = 'Pisek' );
SELECT a1.account_id FROM account a1 JOIN disp d1 ON a1.account_id = d1.account_id JOIN card c1 ON d1.disp_id = c1.disp_id AND c1.type = 'gold' JOIN disp d2 ON a1.account_id = d2.account_id JOIN card c2 ON d2.disp_id = c2.disp_id AND c2.type = 'junior' GROUP BY a1.account_id;
SELECT AVG(amount) FROM (     SELECT t.amount     FROM trans t     JOIN account a ON t.account_id = a.account_id     WHERE t.operation = 'VYBER KARTOU'     AND t.date >= '2021-01-01'     AND t.date <= '2021-12-31' ) as subquery;
SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.operation = 'VYBER KARTOU' AND YEAR(t.date) = 1998 GROUP BY MONTH(t.date), c.client_id HAVING SUM(t.amount) < (     SELECT AVG(amount)     FROM trans     WHERE YEAR(date) = 1998     AND operation = 'VYBER KARTOU' )
SELECT DISTINCT c.client_id, c.gender, a.account_id, l.loan_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN card cr ON d.disp_id = cr.disp_id JOIN loan l ON a.account_id = l.account_id WHERE c.gender = 'F' AND cr.type = 'credit';
SELECT COUNT(*) FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN district dis ON c.district_id = dis.district_id WHERE c.gender = 'F' AND dis.A3 = 'south Bohemia';
SELECT account.account_id FROM account JOIN district ON account.district_id = district.district_id JOIN disp ON account.account_id = disp.account_id WHERE district.A2 = 'Tabor' AND disp.type = 'OWNER';
SELECT     T1.type FROM     disp AS T1 JOIN     account AS T2 ON T1.account_id = T2.account_id JOIN     district AS T3 ON T2.district_id = T3.district_id WHERE     T1.type != 'OWNER' AND     T3.A11 > 8000 AND     T3.A11 <= 9000;
SELECT COUNT(*) FROM account a JOIN district d ON a.district_id = d.district_id JOIN trans t ON a.account_id = t.account_id WHERE d.A3 = 'North Bohemia' AND t.bank = 'AB';
SELECT DISTINCT d.A2 FROM district d JOIN disp dp ON d.district_id = dp.district_id JOIN account a ON dp.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.type = 'VYDAJ';
SELECT AVG(T2.A15) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.date >= '1997-01-01' AND T2.A15 > 4000;
SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN account ON disp.account_id = account.account_id WHERE card.type = 'classic' AND account.type = 'OWNER';
SELECT COUNT(*) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A2 = 'Hl.m. Praha';
SELECT (COUNT(CASE WHEN type = 'Gold' AND issued < '1998-01-01' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM card;
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN loan l ON a.account_id = l.account_id WHERE l.amount = (SELECT MAX(amount) FROM loan)
SELECT T1.A15 FROM district AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532;
SELECT district_id FROM account WHERE account_id = (SELECT account_id FROM order WHERE order_id = 33333);
SELECT * FROM trans WHERE operation = 'VYBER' AND account_id IN (     SELECT account_id FROM disp     WHERE client_id = 3356 );
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000;
SELECT type FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 13539;
SELECT T1.A3 AS region FROM district AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541;
SELECT d.district_id FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY COUNT(l.loan_id) DESC LIMIT 1;
SELECT c.client_id, c.gender, c.birth_date FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN order o ON a.account_id = o.account_id WHERE o.order_id = 32423;
SELECT trans.* FROM trans JOIN account ON trans.account_id = account.account_id WHERE account.district_id = 5;
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Jesenik';
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE ca.type = 'junior' AND ca.issued >= '1997-01-01'
SELECT     (COUNT(CASE WHEN c.gender = 'F' THEN c.client_id END) * 100.0 / COUNT(c.client_id)) AS percentage_women FROM     client c JOIN     disp d ON c.client_id = d.client_id JOIN     account a ON d.account_id = a.account_id JOIN     district dis ON c.district_id = dis.district_id WHERE     dis.A11 > 10000;
SELECT ((SELECT SUM(l.amount)          FROM loan l          JOIN account a ON l.account_id = a.account_id          JOIN client c ON a.district_id = c.district_id          WHERE YEAR(l.date) = 1997 AND c.gender = 'M') -         (SELECT SUM(l.amount)          FROM loan l          JOIN account a ON l.account_id = a.account_id          JOIN client c ON a.district_id = c.district_id          WHERE YEAR(l.date) = 1996 AND c.gender = 'M')) /        (SELECT SUM(l.amount)         FROM loan l         JOIN account a ON l.account_id = a.account_id         JOIN client c ON a.district_id = c.district_id         WHERE YEAR(l.date) = 1996 AND c.gender = 'M') * 100 AS growth_rate
SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';
SELECT     (SELECT SUM(A16) FROM district WHERE A3 = 'North Bohemia') -     (SELECT SUM(A16) FROM district WHERE A3 = 'East Bohemia') AS Difference_in_Crimes;
SELECT COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type = 'owner' UNION ALL SELECT COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type = 'disponent';
SELECT     COUNT(*) AS statement_requests,     SUM(CASE WHEN t.k_symbol = 'Debit' AND t.amount = 3539 THEN 1 ELSE 0 END) AS debit_3539_total FROM     trans t JOIN     account a ON t.account_id = a.account_id WHERE     a.account_id = 3 AND     t.type = 'statement' ;
SELECT EXTRACT(YEAR FROM birth_date) FROM client WHERE client_id = (SELECT client_id FROM disp WHERE account_id = 130);
SELECT COUNT(*) FROM account JOIN disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'OWNER';
SELECT l.amount, l.status FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE c.client_id = 992;
SELECT     SUM(t.amount) AS total_amount,     c.gender FROM     trans t JOIN     account a ON t.account_id = a.account_id JOIN     disp d ON a.account_id = d.account_id JOIN     client c ON d.client_id = c.client_id WHERE     t.trans_id = 851 AND     c.client_id = 4;
SELECT type FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 9;
SELECT SUM(amount) FROM trans WHERE account_id IN (     SELECT account_id     FROM disp     WHERE client_id = 617 ) AND YEAR(date) = 1998 AND operation = 'payment';
SELECT client.client_id, client.gender, client.birth_date FROM client JOIN district ON client.district_id = district.district_id JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.A3 = 'East Bohemia';
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN loan l ON a.account_id = l.account_id WHERE c.gender = 'F' GROUP BY c.client_id ORDER BY SUM(l.amount) DESC LIMIT 3;
SELECT COUNT(c.client_id) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE c.gender = 'M' AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND t.k_symbol = 'SIPO' AND t.amount > 4000;
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Beroun' AND STRFTIME('%Y', account.date) > '1996';
SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'F' AND card.type = 'junior';
SELECT     (COUNT(CASE WHEN c.gender = 'F' THEN c.client_id END) * 100.0 / COUNT(c.client_id)) AS percentage_female FROM     client c JOIN     disp d ON c.client_id = d.client_id JOIN     account a ON d.account_id = a.account_id JOIN     district dt ON a.district_id = dt.district_id WHERE     dt.A3 = 'Prague';
SELECT     (COUNT(CASE WHEN c.gender = 'M' THEN c.client_id END) * 100.0 / COUNT(c.client_id)) AS percentage_male_clients FROM     client c JOIN     disp d ON c.client_id = d.client_id WHERE     d.type = 'POPLATEK TYDNE';
SELECT COUNT(*) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND client.gender = 'U';
SELECT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 24 AND a.date < '1997-01-01' ORDER BY l.amount ASC LIMIT 1;
SELECT T1.account_id FROM account AS T1 JOIN disp AS T2 ON T1.district_id = T2.disp_id JOIN client AS T3 ON T2.client_id = T3.client_id JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T3.gender = 'F' GROUP BY T1.account_id ORDER BY T3.birth_date ASC, AVG(T4.A11) DESC LIMIT 1;
SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE client.birth_date BETWEEN '1920-01-01' AND '1920-12-31' AND district.A3 = 'East Bohemia';
SELECT COUNT(*) FROM loan WHERE duration = 24 AND       account_id IN (SELECT account_id                      FROM account                      WHERE frequency = 'POPLATEK TYDNE');
Error: 第 9621 个样本有 2 个SQL。
SELECT c.client_id, d.district_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE d.type = 'owner' GROUP BY c.client_id, d.district_id;
SELECT c.client_id, TIMESTAMPDIFF(YEAR, c.birth_date, CURDATE()) AS age FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card cr ON d.disp_id = cr.disp_id JOIN loan l ON c.client_id = l.account_id WHERE cr.type = 'gold' AND l.status = 'eligible';
SELECT bond_type, COUNT(*) as count FROM bond GROUP BY bond_type ORDER BY count DESC LIMIT 1;
SELECT COUNT(*) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-' AND a.element = 'Cl';
SELECT AVG(oxygen_atoms) as average_oxygen_atoms FROM (     SELECT COUNT(a.atom_id) as oxygen_atoms     FROM atom a     INNER JOIN connected c ON a.atom_id = c.atom_id     INNER JOIN bond b ON c.bond_id = b.bond_id AND b.bond_type = '-'     WHERE a.element = 'O'     GROUP BY c.bond_id ) as subquery;
SELECT AVG(c.single_bond_count) FROM (     SELECT m.label, COUNT(*) as single_bond_count     FROM molecule m     JOIN bond b ON m.molecule_id = b.molecule_id     WHERE b.bond_type = '-' AND m.label = '+'     GROUP BY m.label, m.molecule_id ) c;
SELECT COUNT(*) FROM molecule WHERE label = '-' AND molecule_id IN (     SELECT molecule_id     FROM atom     WHERE element = 'na' );
SELECT molecule_id FROM bond WHERE bond_type = '#' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY molecule_id HAVING COUNT(bond_id) >= 3;
SELECT (SUM(CASE WHEN a.element = 'C' THEN 1 ELSE 0 END) * 100 / COUNT(a.atom_id)) AS percentage FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE b.bond_type = 'double' AND m.label = 'toxicology';
SELECT COUNT(*) FROM bond WHERE bond_type = '#';
SELECT COUNT(*) FROM atom WHERE element != 'Br'
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';
SELECT DISTINCT molecule_id FROM atom WHERE element = 'Si';
Error: 第 9635 个样本有 2 个SQL。
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = ' = ';
SELECT T4.label, COUNT(*) as num_atoms FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T1.element = 'H' GROUP BY T4.label ORDER BY num_atoms DESC LIMIT 1;
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element = 'Te' GROUP BY b.bond_type;
SELECT a1.atom_id, a2.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '-';
SELECT a1.atom_id, a2.atom_id FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN molecule m ON a1.molecule_id = m.molecule_id WHERE m.label = '-';
SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY element ORDER BY COUNT(*) LIMIT 1;
SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20';
SELECT DISTINCT m.label FROM molecule m WHERE m.molecule_id NOT IN (     SELECT a.molecule_id     FROM atom a     WHERE a.element = 'Sn' );
SELECT COUNT(*) FROM (     SELECT a.atom_id     FROM atom a     JOIN connected c ON a.atom_id = c.atom_id     JOIN bond b ON c.bond_id = b.bond_id     AND b.bond_type = '-'     JOIN molecule m ON a.molecule_id = m.molecule_id     WHERE a.element IN ('i', 's') ) AS result;
SELECT a1.atom_id, a2.atom_id2 FROM connected AS c JOIN bond AS b ON c.bond_id = b.bond_id JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '#';
SELECT a1.atom_id FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id WHERE c.atom_id2 IN (     SELECT a2.atom_id     FROM atom a2     JOIN molecule m ON a2.molecule_id = m.molecule_id     WHERE m.label = 'TR181' ) AND a1.molecule_id <> (     SELECT m2.molecule_id     FROM molecule m2     WHERE m2.label = 'TR181' );
SELECT 100 * (1 - SUM(CASE WHEN a.element = 'F' THEN 1 ELSE 0 END) / COUNT(DISTINCT m.molecule_id)) AS percent FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+'
Error: 第 9648 个样本有 2 个SQL。
SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR000' GROUP BY element ORDER BY element ASC LIMIT 3;
SELECT a1.atom_id, a2.atom_id FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id = 'TR001_2_6' AND a1.molecule_id = 'TR001' AND a2.molecule_id = 'TR001';
SELECT     (SELECT COUNT(*) FROM molecule WHERE label = '+') -     (SELECT COUNT(*) FROM molecule WHERE label = '-') AS difference;
SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR_000_2_5';
SELECT c.bond_id FROM connected c WHERE c.atom_id2 = 'TR000_2';
SELECT molecule.label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY molecule.label LIMIT 5;
SELECT     (COUNT(CASE WHEN bond_type = ' = ' THEN bond_id END) * 100.0 / COUNT(bond_id)) AS percent FROM     bond WHERE     molecule_id = 'TR008';
SELECT (COUNT(CASE WHEN label = '+' THEN molecule_id END) * 100.0 / COUNT(molecule_id)) AS percent FROM molecule;
SELECT (SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) * 100.0 / COUNT(atom_id)) AS percent FROM atom WHERE molecule_id = 'TR206';
SELECT DISTINCT b.bond_type FROM bond AS b JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR000';
Error: 第 9659 个样本有 2 个SQL。
SELECT     b.bond_type,     COUNT(*) AS count,     (SELECT molecule.label FROM molecule WHERE molecule.molecule_id = 'TR018') AS carcinogenic FROM     bond b JOIN     connected c ON b.bond_id = c.bond_id WHERE     b.molecule_id = 'TR018' GROUP BY     b.bond_type ORDER BY     count DESC LIMIT 1;
Error: 第 9661 个样本有 2 个SQL。
SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR006' ORDER BY b.bond_type ASC LIMIT 2;
SELECT COUNT(*) FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.molecule_id = 'TR009' AND (c.atom_id = 'TR009_12' OR c.atom_id2 = 'TR009_12');
SELECT COUNT(DISTINCT molecule.molecule_id) FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'Br';
SELECT bond_type, atom_id, atom_id2 FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond_id = 'TR001_6_9'
SELECT molecule.label, molecule.label = '+' AS is_carcinogenic FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_10';
SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#';
SELECT COUNT(*) FROM connected WHERE atom_id = 'TR%_19' OR atom_id2 = 'TR%_19';
SELECT DISTINCT atom.element FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = 'TR004';
SELECT COUNT(*) FROM molecule WHERE label = '-';
SELECT DISTINCT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE SUBSTRING(a.atom_id, 7, 2) BETWEEN 21 AND 25 AND m.label = '+';
SELECT DISTINCT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE (a1.element = 'p' AND a2.element = 'n') OR (a1.element = 'n' AND a2.element = 'p');
SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' GROUP BY m.molecule_id ORDER BY COUNT(b.bond_id) DESC LIMIT 1;
Error: 第 9674 个样本有 2 个SQL。
SELECT T2.bond_type, T2.bond_id FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T1.atom_id, 7, 2) + 0 = 45
SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected) AND atom_id NOT IN (SELECT atom_id2 FROM connected);
SELECT a1.atom_id, a2.atom_id FROM atom AS a1 JOIN connected AS c ON a1.atom_id = c.atom_id JOIN bond AS b ON c.bond_id = b.bond_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id JOIN molecule AS m ON a1.molecule_id = m.molecule_id WHERE b.bond_type = '#' AND m.label = 'TR447'
SELECT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR144_8_19';
SELECT m.label, COUNT(b.bond_id) as double_bonds_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+' AND b.bond_type = ' = ' GROUP BY m.label ORDER BY double_bonds_count DESC LIMIT 1;
SELECT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' GROUP BY a.element ORDER BY COUNT(*) ASC LIMIT 1;
SELECT a1.atom_id FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id2 JOIN atom a2 ON a2.atom_id = c.atom_id WHERE a2.element = 'pb' AND a1.atom_id != a2.atom_id;
Error: 第 9682 个样本有 2 个SQL。
WITH atom_counts AS (   SELECT     a1.element AS element1,     a2.element AS element2,     COUNT(*) AS count   FROM     connected c   JOIN     atom a1 ON c.atom_id = a1.atom_id   JOIN     atom a2 ON c.atom_id2 = a2.atom_id   GROUP BY     a1.element, a2.element ), max_count AS (   SELECT     MAX(count) AS max_element_pair_count   FROM     atom_counts ) SELECT   (COUNT(c.bond_id) * 100.0 / SUM(ac.count) OVER ()) AS percentage FROM   connected c JOIN   atom a1 ON c.atom_id = a1.atom_id JOIN   atom a2 ON c.atom_id2 = a2.atom_id JOIN   bond b ON c.bond_id = b.bond_id JOIN   atom_counts ac ON (a1.element = ac.element1 AND a2.element = ac.element2) JOIN   max_count mc WHERE   ac.count = mc.max_element_pair_count;
SELECT     SUM(CASE WHEN t_molecule.label = '+' THEN 1 ELSE 0 END) / COUNT(t_bond.bond_id) AS proportion FROM     bond AS t_bond JOIN     connected AS t_connected ON t_bond.bond_id = t_connected.bond_id JOIN     atom AS t_atom ON t_connected.atom_id = t_atom.atom_id OR t_connected.atom_id2 = t_atom.atom_id JOIN     molecule AS t_molecule ON t_bond.molecule_id = t_molecule.molecule_id WHERE     t_bond.bond_type = '-';
SELECT COUNT(*) FROM atom WHERE element IN ('C', 'H');
SELECT atom_id2 FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 's';
SELECT DISTINCT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element = 'Sn';
SELECT COUNT(DISTINCT a.element) FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '-';
SELECT COUNT(*) FROM (   SELECT a.atom_id   FROM atom a   JOIN connected c ON a.atom_id = c.atom_id   JOIN bond b ON c.bond_id = b.bond_id   WHERE (a.element = 'p' OR a.element = 'br')   AND b.bond_type = '#'   GROUP BY a.atom_id ) as temp;
SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+';
Error: 第 9691 个样本有 3 个SQL。
SELECT     (SUM(CASE WHEN a.element = 'Cl' THEN 1 ELSE 0 END) * 100 / COUNT(a.atom_id)) AS percent FROM     atom a JOIN     connected c ON a.atom_id = c.atom_id JOIN     bond b ON c.bond_id = b.bond_id JOIN     molecule m ON a.molecule_id = m.molecule_id WHERE     b.bond_type = '-';
SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');
SELECT molecule_id FROM molecule WHERE label = '-';
SELECT COUNT(*) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030';
SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR050';
Error: 第 9697 个样本有 2 个SQL。
SELECT COUNT(DISTINCT b.bond_id) FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element = 'I';
SELECT     CASE         WHEN COUNT(CASE WHEN m.label = '+' THEN 1 END) > COUNT(CASE WHEN m.label = '-' THEN 1 END) THEN 'Carcinogenic'         ELSE 'Non Carcinogenic'     END AS Majority FROM     molecule m JOIN     atom a ON m.molecule_id = a.molecule_id WHERE     a.element = 'Ca'
SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom AS atom1 ON connected.atom_id = atom1.atom_id JOIN atom AS atom2 ON connected.atom_id2 = atom2.atom_id WHERE bond.bond_id = 'TR001_1_8' AND (atom1.element = 'cl' OR atom2.element = 'cl') AND (atom1.element = 'c' OR atom2.element = 'c');
SELECT molecule_id FROM bond WHERE bond_type = '#' AND molecule_id IN (     SELECT molecule_id     FROM atom     WHERE element = 'c' ) AND molecule_id IN (     SELECT molecule_id     FROM molecule     WHERE label = '-' ) GROUP BY molecule_id ORDER BY COUNT(*) DESC LIMIT 2;
SELECT (COUNT(CASE WHEN a.element = 'cl' THEN 1 ELSE NULL END) * 100.0 / COUNT(a.atom_id)) AS percentage FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+';
SELECT DISTINCT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR001';
SELECT molecule_id FROM bond WHERE bond_type = ' = ';
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#'
SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR005_16_26';
SELECT COUNT(*) FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-';
SELECT molecule.label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_10_11';
SELECT bond.bond_id, molecule.label AS carcinogenicity FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND (molecule.label = '+' OR molecule.label = '-');
Error: 第 9710 个样本有 2 个SQL。
SELECT     molecule.label,     SUM(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) * 1.0 / COUNT(atom.atom_id) AS hydrogen_ratio FROM     atom JOIN     molecule ON atom.molecule_id = molecule.molecule_id WHERE     atom.molecule_id = 'TR006' GROUP BY     molecule.label;
SELECT molecule.label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'Ca' AND molecule.label = '+';
SELECT DISTINCT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element = 'Te';
SELECT DISTINCT a1.element, a2.element FROM bond b JOIN connected c1 ON b.bond_id = c1.bond_id JOIN connected c2 ON b.bond_id = c2.bond_id JOIN atom a1 ON c1.atom_id = a1.atom_id JOIN atom a2 ON c2.atom_id = a2.atom_id WHERE b.bond_id = 'TR001_10_11'
SELECT     COUNT(CASE WHEN b.bond_type = '#' THEN m.molecule_id END) * 100.0 / COUNT(m.molecule_id) AS percentage FROM     molecule m LEFT JOIN     bond b ON m.molecule_id = b.molecule_id WHERE     EXISTS (         SELECT 1         FROM connected c         WHERE c.bond_id = b.bond_id         AND EXISTS (             SELECT 1             FROM connected c2             WHERE c2.atom_id = c.atom_id2             AND c2.bond_id <> b.bond_id             AND c2.bond_id IN (                 SELECT bond_id                 FROM bond                 WHERE bond_type = '#'             )         )     );
SELECT     (COUNT(CASE WHEN bond.bond_type = ' = ' THEN bond.bond_id END) * 1.0 / COUNT(bond.bond_id)) * 100 AS percent FROM     molecule JOIN     connected ON molecule.molecule_id = connected.molecule_id JOIN     bond ON connected.bond_id = bond.bond_id WHERE     molecule.label = 'TR047';
SELECT molecule.label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR001_1' AND molecule.label = '+';
Error: 第 9718 个样本有 3 个SQL。
SELECT DISTINCT atom.element FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = 'TR151' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');
SELECT COUNT(*) FROM molecule WHERE label = '+';
SELECT atom.atom_id, atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND SUBSTR(molecule.molecule_id, 3, 3) BETWEEN 10 AND 50;
SELECT COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';
SELECT bond.bond_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+';
SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'h' AND molecule.label = '+';
SELECT molecule_id FROM bond WHERE bond_id = (SELECT bond_id FROM connected WHERE atom_id = (SELECT atom_id FROM atom WHERE element = 'TR00_1_2') AND atom_id2 = (SELECT atom_id FROM atom WHERE element = 'TR00_1'))
SELECT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND m.label = '-'
SELECT (SUM(CASE WHEN t1.element = 'h' AND t4.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(t4.molecule_id)) AS percentage FROM atom AS t1 JOIN connected AS t2 ON t1.atom_id = t2.atom_id JOIN bond AS t3 ON t2.bond_id = t3.bond_id JOIN molecule AS t4 ON t1.molecule_id = t4.molecule_id;
Error: 第 9728 个样本有 4 个SQL。
SELECT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR186';
SELECT bond.bond_type FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR007_4_19';
SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_2_4';
SELECT COUNT(b.bond_id) AS double_bonds, m.label AS carcinogenicity FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = ' = ' AND m.label = '+' AND m.molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR006') GROUP BY m.label;
SELECT m.label, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+';
SELECT b.bond_id, b.bond_type, c.atom_id, c.atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '-'
SELECT DISTINCT m.label, a.element FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE b.bond_type = '#' ORDER BY m.label, a.element;
SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = 'TR000_2_3'
SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom AS atom1 ON connected.atom_id = atom1.atom_id JOIN atom AS atom2 ON connected.atom_id2 = atom2.atom_id WHERE atom1.element = 'Cl' OR atom2.element = 'Cl';
SELECT atom.atom_id, COUNT(DISTINCT bond.bond_type) AS unique_bond_types FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.label = 'TR346' GROUP BY atom.atom_id;
SELECT COUNT(DISTINCT m.molecule_id) AS total_molecules_with_double_bond,        COUNT(DISTINCT CASE WHEN m.label = '+' THEN m.molecule_id END) AS carcinogenic_molecules FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = '
SELECT COUNT(*) FROM molecule WHERE molecule_id NOT IN (     SELECT molecule_id     FROM atom     WHERE element = 's' ) AND molecule_id NOT IN (     SELECT molecule_id     FROM bond     WHERE bond_type = ' = ' );
SELECT molecule.label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_2_4' AND molecule.label = '+';
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005';
SELECT COUNT(*) FROM bond WHERE bond_type = '-';
SELECT molecule.label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'Cl' AND molecule.label = '+';
SELECT molecule.label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-';
SELECT     (COUNT(CASE WHEN t4.label = '+' AND t1.element = 'Cl' THEN 1 END) * 100.0 / COUNT(t4.molecule_id)) AS percentage FROM     atom AS t1 JOIN     connected AS t2 ON t1.atom_id = t2.atom_id JOIN     bond AS t3 ON t2.bond_id = t3.bond_id JOIN     molecule AS t4 ON t1.molecule_id = t4.molecule_id WHERE     t4.label = '+'
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'
SELECT COUNT(DISTINCT a.element) FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR001_3_4';
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id = 'TR000_1' AND c.atom_id2 = 'TR000_2';
SELECT m.label FROM molecule m JOIN atom a1 ON m.molecule_id = a1.molecule_id JOIN atom a2 ON m.molecule_id = a2.molecule_id WHERE a1.atom_id = 'TR000_2' AND a2.atom_id = 'TR000_4';
SELECT element FROM atom WHERE atom_id = 'TR000_1';
SELECT label FROM molecule WHERE molecule_id = 'TR000';
Error: 第 9753 个样本有 2 个SQL。
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'N' AND m.label = '+';
SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'S' AND b.bond_type = ' = '
Error: 第 9756 个样本有 2 个SQL。
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE b.bond_type = '=' AND m.label = 'TR024';
SELECT m.label, m.molecule_id, COUNT(a.atom_id) AS num_atoms FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' GROUP BY m.molecule_id ORDER BY num_atoms DESC LIMIT 1;
SELECT (COUNT(CASE WHEN t5.label = '+' THEN t5.molecule_id END) * 100.0 / COUNT(t5.molecule_id)) as percentage FROM (     SELECT t4.molecule_id     FROM (         SELECT t3.atom_id, t3.bond_id, t3.atom_id2, t1.molecule_id         FROM atom AS t1         JOIN connected AS t3 ON t1.atom_id = t3.atom_id         WHERE t1.element = 'h'     ) AS t4     JOIN bond AS t2 ON t4.bond_id = t2.bond_id     WHERE t2.bond_type = '#' ) AS t5 JOIN molecule AS t6 ON t5.molecule_id = t6.molecule_id;
SELECT COUNT(*) FROM molecule WHERE label = '+';
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.molecule_id BETWEEN 'TR004' AND 'TR010' AND b.bond_type = '-';
SELECT COUNT(*) FROM atom WHERE element = 'c' AND molecule_id IN (     SELECT molecule_id     FROM molecule     WHERE label = 'TR008' );
SELECT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR004_7' AND molecule.label = '-';
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE a.element = 'O' AND b.bond_type = '=';
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '-';
SELECT atom.element, bond.bond_type FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.molecule_id = 'TR016' AND connected.atom_id2 IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR016');
SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND b.bond_type = '=' AND m.label = 'TR012';
SELECT atom.atom_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'o';
SELECT name FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT name, id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL);
SELECT name FROM cards WHERE faceConvertedManaCost = (     SELECT MAX(faceConvertedManaCost) FROM cards );
SELECT c.name FROM cards c WHERE c.frameVersion = 2015 AND c.edhrecRank < 100;
SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator';
SELECT l.status FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE c.types = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';
SELECT c.id, c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE (c.power = '*' OR c.power IS NULL) AND l.format = 'commander' AND l.status = 'Legal';
SELECT c.name, r.text, c.hasContentWarning FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniele';
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';
SELECT c.name, c.artist, s.isPromo FROM cards c JOIN rulings r ON c.uuid = r.uuid JOIN sets s ON c.setCode = s.code WHERE s.isPromo = 1 GROUP BY c.uuid ORDER BY COUNT(r.uuid) DESC LIMIT 1;
SELECT fd.language FROM foreign_data AS fd JOIN cards AS c ON fd.uuid = c.uuid WHERE c.name = 'Annul' AND c.number = '29';
SELECT c.name FROM cards c JOIN foreign_data fd ON c.id = fd.uuid WHERE fd.language = 'Japanese';
SELECT (COUNT(CASE WHEN language = 'Chinese Simplified' THEN id ELSE NULL END) * 100.0 / COUNT(id)) AS percentage FROM foreign_data;
SELECT s.name, s.totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian'
Error: 第 9783 个样本有 2 个SQL。
SELECT keywords FROM cards WHERE name = 'Angel of Mercy';
SELECT COUNT(*) FROM cards WHERE power = '*';
SELECT promoTypes FROM cards WHERE name = 'Duress';
SELECT borderColor FROM cards WHERE name = 'Ancestor's Chosen';
SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen';
SELECT DISTINCT fd.language FROM cards c JOIN sets s ON c.setCode = s.code JOIN set_translations st ON s.setCode = st.setCode JOIN foreign_data fd ON c.id = fd.uuid WHERE c.name = 'Angel of Mercy';
SELECT COUNT(*) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'restricted' AND c.isTextless = 0;
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Condemn';
SELECT COUNT(c.id) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'restricted' AND c.isStarter = 1;
SELECT l.status FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE c.name = 'Cloudchaser Eagle';
SELECT type FROM cards WHERE name = 'Benalish Knight';
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Benalish Knight';
SELECT DISTINCT c.artist FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.language = 'Phyrexian';
SELECT (COUNT(CASE WHEN borderColor = 'borderless' THEN id END) * 100.0 / COUNT(id)) AS percentage FROM card_games.cards;
SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1;
SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.borderColor = 'borderless' AND foreign_data.language = 'Russian';
SELECT (COUNT(CASE WHEN f.language = 'French' THEN c.id ELSE NULL END) * 100.0 / COUNT(c.id)) AS percentage FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.isStorySpotlight = 1;
SELECT COUNT(*) FROM cards WHERE toughness = 99;
SELECT name FROM cards WHERE artist = 'Aaron Boyd';
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';
SELECT id FROM cards WHERE convertedManaCost = 0;
SELECT c.layout FROM cards c WHERE c.keywords LIKE '%flying%'
SELECT COUNT(*) FROM cards WHERE originalType LIKE '%Summon - Angel%' AND subtypes NOT LIKE '%Angel%';
SELECT c1.cardKingdomFoilId FROM cards c1 JOIN cards c2 ON c1.name = c2.name AND c1.setCode = c2.setCode AND c1.isFoil = 1 AND c2.isFoil = 0 WHERE c1.cardKingdomId IS NOT NULL AND c2.cardKingdomId IS NOT NULL;
SELECT id FROM cards WHERE duelDeck = 'a';
SELECT edhrecRank FROM cards WHERE frameVersion = '2015';
SELECT DISTINCT c.artist FROM cards c JOIN foreign_data fd ON c.id = fd.uuid WHERE fd.language = 'Chinese Simplified';
SELECT c.name FROM cards c JOIN foreign_data fd ON c.id = fd.uuid WHERE c.availability = 'paper' AND fd.language = 'Japanese';
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.borderColor = 'white';
SELECT c.uuid, fd.language FROM cards c JOIN legalities l ON c.uuid = l.uuid JOIN foreign_data fd ON c.uuid = fd.uuid WHERE l.format = 'legacy';
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Beacon of Immortality';
SELECT COUNT(c.id), l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = 'future' GROUP BY l.status;
SELECT c.name, c.colors FROM cards c WHERE c.setCode = 'OGW';
SELECT c.name, s.translation, s.language FROM cards c JOIN set_translations s ON c.setCode = s.setCode WHERE c.setCode = '10E' AND c.convertedManaCost = 5;
Error: 第 9818 个样本有 2 个SQL。
Error: 第 9819 个样本有 2 个SQL。
SELECT c.name, c.id, f.language, f.name FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.types LIKE '%Artifact%' AND c.colors LIKE '%B%' AND f.language != 'en';
SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'uncommon' ORDER BY r.date ASC LIMIT 3;
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1;
SELECT COUNT(*) FROM cards WHERE hasContentWarning = 1 AND availability = 'paper' AND frameVersion = '1993';
SELECT manaCost FROM card_games.cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability LIKE '%paper%' AND availability LIKE '%mtgo%';
SELECT SUM(cards.convertedManaCost) FROM cards WHERE cards.artist = 'Rob Alexander';
SELECT DISTINCT types, subtypes, supertypes FROM cards WHERE availability = 'arena';
SELECT DISTINCT s.setCode FROM sets s JOIN set_translations st ON s.setCode = st.setCode WHERE st.language = 'Spanish';
SELECT (COUNT(CASE WHEN hand = '+3' THEN id END) * 100.0 / COUNT(id)) AS percentage FROM cards WHERE frameEffects = 'legendary';
Error: 第 9831 个样本有 2 个SQL。
Error: 第 9832 个样本有 2 个SQL。
SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.baseSetSize = 309;
SELECT COUNT(*) FROM sets s JOIN set_translations st ON s.setCode = st.setCode WHERE s.block = 'Commander' AND st.language = 'Portuguese (Brasil)';
SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types LIKE '%Creature%' AND l.status = 'Legal'
SELECT DISTINCT c.subtypes, c.supertypes FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE f.language = 'German' AND c.subtypes IS NOT NULL AND c.supertypes IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE power IS NULL AND text LIKE '%triggered ability%';
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid JOIN rulings ON cards.uuid = rulings.uuid WHERE legalities.format = 'premodern' AND rulings.text = 'This is a triggered mana ability' AND cards.side IS NULL;
SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Erica Yang' AND l.format = 'pauper' AND l.status = 'legal' AND c.availability = 'paper';
SELECT c.artist FROM cards c JOIN foreign_data f ON c.id = f.uuid WHERE f.text = "Das perfekte Gegenmittel zu einer dichten Formation"
SELECT fd.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.type = 'Creature' AND c.layout = 'normal' AND c.borderColor = 'black' AND c.artist = 'Matthew D. Wilson' AND fd.language = 'French';
SELECT COUNT(c.id) FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'rare' AND r.date = '2009-10-01';
SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.baseSetSize = 180 AND s.block = 'Ravnica';
SELECT (COUNT(c.id) FILTER (WHERE c.hasContentWarning = 0)) * 100.0 / COUNT(c.id) AS percentage FROM cards c JOIN legalities l ON c.id = l.uuid WHERE l.format = 'commander' AND l.status = 'legal';
SELECT (COUNT(case when T2.language = 'French' and (T1.power IS NULL OR T1.power = '*') then T1.id end) * 100.0 / COUNT(case when T1.power IS NULL OR T1.power = '*' then T1.id end)) as Percentage FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*';
SELECT (COUNT(CASE WHEN language = 'Japanese' AND type = 'expansion' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM (   SELECT s.type, st.language   FROM sets s   JOIN set_translations st ON s.code = st.setCode   WHERE st.language = 'Japanese' )
SELECT DISTINCT c.availability FROM cards c WHERE c.artist = 'Daren Bader';
SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000 AND colors IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;
SELECT c.name FROM cards c JOIN (     SELECT uuid     FROM cards     WHERE power IS NULL OR power = '*' ) AS upc ON c.uuid = upc.uuid WHERE c.promoTypes LIKE '%arenaleague%' ORDER BY c.name LIMIT 3;
SELECT language FROM foreign_data WHERE multiverseid = 149934;
SELECT     c1.cardKingdomFoilId,     c2.cardKingdomId FROM     cards c1 JOIN     cards c2 ON c1.id = c2.cardKingdomFoilId WHERE     c1.cardKingdomFoilId IS NOT NULL AND     c2.cardKingdomId IS NOT NULL ORDER BY     c1.cardKingdomFoilId ASC LIMIT 3;
SELECT     (COUNT(CASE WHEN c.isTextless = 1 AND c.layout = 'normal' THEN 1 END) * 100.0 / COUNT(c.id)) AS proportion_textless_normal_layout FROM     card_games.cards c;
SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%';
SELECT s.name FROM sets s WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;
SELECT DISTINCT fd.language FROM set_translations st JOIN sets s ON st.setCode = s.code JOIN foreign_data fd ON st.id = fd.id WHERE s.setCode = 'ARC' AND s.mcmName = 'Archenemy';
SELECT s.name, st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.id = 5;
SELECT s.name, s.type FROM sets s WHERE s.id = 206;
SELECT s.code, s.id FROM sets s JOIN cards c ON s.code = c.setCode JOIN foreign_data fd ON c.id = fd.uuid WHERE s.block = 'Shadowmoor' AND fd.language = 'Italian' GROUP BY s.code, s.id ORDER BY s.name ASC LIMIT 2;
SELECT s.id AS set_id FROM sets s JOIN cards c ON s.code = c.setCode JOIN foreign_data fd ON c.id = fd.uuid WHERE s.isForeignOnly = 1 AND c.hasFoil = 1 AND fd.language = 'Japanese'
SELECT st.setCode, st.name, st.baseSetSize FROM sets AS st JOIN set_translations AS stt ON st.code = stt.setCode WHERE stt.language = 'Russian' ORDER BY st.baseSetSize DESC LIMIT 1;
SELECT (COUNT(c.id) FILTER (WHERE c.isOnlineOnly = 1 AND st.isOnlineOnly = 1)) * 100.0 / COUNT(c.id) AS percentage FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.language = 'Chinese Simplified'
SELECT COUNT(*) FROM sets s WHERE NOT EXISTS (     SELECT *     FROM set_translations st     WHERE s.code = st.setCode AND st.language = 'English'   ) AND EXISTS (     SELECT *     FROM set_translations st     WHERE s.code = st.setCode AND st.language = 'Japanese'   ) AND (s.mtgoCode IS NULL OR s.mtgoCode = '');
SELECT COUNT(*) AS numCards, id FROM cards WHERE borderColor = 'black';
SELECT COUNT(*) AS total, GROUP_CONCAT(id) AS card_ids FROM cards WHERE frameEffects = 'extendedart';
SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1;
SELECT st.language FROM set_translations AS st WHERE st.id = 174;
SELECT name FROM sets WHERE code = 'ALL';
SELECT fd.language FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE c.name = 'A Pedra Fellwar'
SELECT setCode FROM sets WHERE releaseDate = '2007-07-13';
SELECT T1.baseSetSize, T1.code FROM sets AS T1 JOIN (   SELECT DISTINCT block   FROM sets   WHERE block IN ("Masques", "Mirage") ) AS T2 ON T1.block = T2.block;
SELECT setCode FROM sets WHERE type = 'expansion';
SELECT fd.name, c.type FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.watermark = 'boros';
SELECT T2.language, T2.flavorText, T1.type FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'colorpie';
SELECT (COUNT(CASE WHEN convertedManaCost = 10 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards WHERE name = 'Abyssal Horror' AND setCode IN (     SELECT setCode     FROM sets     WHERE name = 'Abyssal Horror' );
SELECT setCode FROM sets WHERE type = 'expansion commander';
SELECT T2.name, T1.type FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'abzan';
SELECT T1.type, T2.language FROM cards AS T1 JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.watermark = 'azorius';
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand = '+';
SELECT name FROM cards WHERE isTextless = 0;
SELECT convertedManaCost FROM cards WHERE name = 'Ancestor\'s Chosen';
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL);
SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;
SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';
SELECT DISTINCT c.purchaseUrls FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.promoTypes LIKE '%bundle%';
SELECT COUNT(DISTINCT c.artist) FROM cards c WHERE c.borderColor = 'black' AND c.availability LIKE '%arena,mtgo%';
SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1;
SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;
SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code JOIN cards c ON c.setCode = s.code WHERE st.language = 'Italian' AND c.name = 'Ancestor''s Chosen'
SELECT COUNT(*) FROM set_translations st JOIN cards c ON st.setCode = c.setCode WHERE c.name = 'Angel of Mercy';
SELECT c.name FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition'
SELECT COUNT(*) FROM cards c JOIN foreign_data fd ON c.id = fd.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Korean';
SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.setCode = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';
SELECT s.baseSetSize FROM sets s JOIN set_translations st ON s.setCode = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition';
SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.name = 'Eighth Edition' AND st.language = 'Simplified Chinese';
SELECT s.name FROM sets s JOIN cards c ON s.setCode = c.setCode WHERE c.name = 'Angel of Mercy' AND s.mtgoCode IS NOT NULL;
SELECT s.releaseDate FROM sets s JOIN cards c ON s.setCode = c.setCode WHERE c.name = 'Ancestor''s Chosen'
SELECT type FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition'
SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian';
SELECT COUNT(*) > 0 AS is_only_outside_us FROM cards WHERE name = 'Adarkar Valkyrie' AND EXISTS (SELECT * FROM sets WHERE sets.setCode = cards.setCode AND sets.isForeignOnly = 1);
SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND sets.baseSetSize < 10;
Error: 第 9904 个样本有 2 个SQL。
SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' ORDER BY c.convertedManaCost DESC LIMIT 1;
SELECT DISTINCT c.artist FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND c.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');
SELECT * FROM cards WHERE setCode = 'Coldsnap' AND number = 4;
SELECT COUNT(*) FROM cards WHERE convertedManaCost > 5 AND (power = '*' OR power IS NULL) AND setCode = 'Coldsnap';
SELECT fd.flavorText FROM foreign_data AS fd JOIN cards AS c ON fd.uuid = c.uuid WHERE fd.language = 'Italian' AND c.name = 'Ancestor''s Chosen';
SELECT DISTINCT language FROM foreign_data WHERE name = 'Ancestor''s Chosen' AND flavorText IS NOT NULL;
SELECT fd.type FROM foreign_data AS fd JOIN cards AS c ON fd.uuid = c.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'German'
Error: 第 9912 个样本有 3 个SQL。
SELECT fd.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND fd.language = 'Italian' ORDER BY c.convertedManaCost DESC LIMIT 1;
SELECT r.date FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Reminisce'
SELECT (COUNT(*) FILTER (WHERE c.convertedManaCost = 7) * 100.0 / COUNT(c.id)) AS percentage FROM cards AS c JOIN sets AS s ON c.setCode = s.code WHERE s.name = 'Coldsnap';
SELECT (SUM(CASE WHEN t1.cardKingdomFoilId = t1.cardKingdomId AND t1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) * 100 / COUNT(*)) AS percentage_incredibly_powerful FROM cards AS t1 JOIN sets AS t2 ON t1.setCode = t2.code WHERE t2.name = 'Coldsnap';
SELECT code FROM sets WHERE releaseDate = '2017-07-14';
SELECT keyruneCode FROM sets WHERE code = 'PKHC';
SELECT mcmId FROM sets WHERE code = 'SS2';
SELECT s.mcmName FROM sets s WHERE s.releaseDate = '2017-06-09';
SELECT type FROM sets WHERE name = 'From the Vault: Lore';
SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';
SELECT c.name, r.text, CASE WHEN c.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END as MissingOrDegraded FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Jim Pavelec';
SELECT s.releaseDate FROM sets s JOIN cards c ON s.setCode = c.setCode WHERE c.name = 'Evacuation';
SELECT baseSetSize FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Rinascita di Alara'
SELECT s.type FROM sets s JOIN set_translations st ON s.setCode = st.setCode WHERE st.translation = 'Huitième édition';
SELECT st.translation FROM set_translations st JOIN cards c ON st.setCode = c.setCode WHERE c.name = 'Tendo Ice Bridge' AND st.language = 'French'
SELECT COUNT(*) FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE name = 'Salvat 2011') AND translation IS NOT NULL;
SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code JOIN cards c ON c.setCode = s.code WHERE st.language = 'Japanese' AND c.name = 'Fellwar Stone'
SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Journey into Nyx Hero''s Path' ORDER BY c.convertedManaCost DESC LIMIT 1;
SELECT s.releaseDate FROM sets s JOIN set_translations st ON s.setCode = st.setCode WHERE st.translation = 'Ola de frío'
SELECT s.type FROM sets s JOIN cards c ON s.setCode = c.setCode WHERE c.name = 'Samite Pilgrim';
SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedManaCost = 3;
SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE st.language = 'Chinese Simplified' AND s.name = 'Mirrodin';
SELECT     (SUM(CASE WHEN s.isNonFoilOnly = 1 THEN 1 ELSE 0 END) * 100 / COUNT(*)) AS percentage_non_foil FROM     sets s JOIN     set_translations st ON s.code = st.setCode WHERE     st.language = 'Japanese';
SELECT     (SUM(CASE WHEN s.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS online_percentage FROM     cards c JOIN     sets s ON c.setCode = s.code JOIN     set_translations st ON s.code = st.setCode AND st.language = 'Portuguese (Brazil)'
Error: 第 9937 个样本有 2 个SQL。
SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets);
SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1;
SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a';
SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1;
SELECT c.name, c.manaCost FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'duel' ORDER BY c.convertedManaCost DESC LIMIT 10;
SELECT s.releaseDate, l.format FROM cards c JOIN sets s ON c.setCode = s.code JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' GROUP BY s.releaseDate, l.format ORDER BY s.releaseDate ASC LIMIT 1;
SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.id = foreign_data.uuid WHERE cards.artist = 'Volkan Baga' AND foreign_data.language = 'French';
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'Rare' AND cards.types LIKE '%Enchantment%' AND cards.name = 'Abundance' AND legalities.status = 'Legal';
Error: 第 9947 个样本有 2 个SQL。
SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.name = 'Battlebond';
SELECT T3.format FROM ( SELECT T1.artist, COUNT(T1.id) AS num_cards FROM cards AS T1 GROUP BY T1.artist ORDER BY num_cards LIMIT 1) AS T2 JOIN cards AS T1 ON T1.artist = T2.artist JOIN legalities AS T3 ON T1.uuid = T3.uuid GROUP BY T3.format;
SELECT L.status FROM cards C JOIN legalities L ON C.uuid = L.uuid WHERE C.frameVersion = '1997' AND C.artist = 'D. Alexander Gregory' AND (C.hasContentWarning = 1 OR C.asciiName = 'Wizards of the Coast') AND L.format = 'legacy';
SELECT c.name, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.edhrecRank = 1 AND l.status = 'banned';
SELECT AVG(T1.id), T2.language FROM (     SELECT COUNT(id) AS id     FROM sets     WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31'     GROUP BY YEAR(releaseDate) ) AS T1, (     SELECT language, COUNT(language) AS count_language     FROM set_translations     GROUP BY language     ORDER BY count_language DESC     LIMIT 1 ) AS T2
SELECT DISTINCT c.artist FROM cards c WHERE c.borderColor = 'black' AND c.availability = 'arena'
SELECT c.uuid FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'oldschool' AND (l.status = 'banned' OR l.status = 'restricted');
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.artist = 'Kev Walker' ORDER BY r.date DESC;
SELECT DISTINCT c.name, l.format FROM cards c JOIN sets s ON c.setCode = s.code JOIN legalities l ON c.uuid = l.uuid WHERE s.name = 'Hour of Devastation' AND l.status = 'Legal';
SELECT s.name FROM sets s WHERE NOT EXISTS (     SELECT st.id     FROM set_translations st     WHERE st.setCode = s.code AND st.language = 'Japanese' ) AND EXISTS (     SELECT st.id     FROM set_translations st     WHERE st.setCode = s.code AND st.language = 'Korean' );
Error: 第 9959 个样本有 2 个SQL。
SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1;
SELECT DisplayName FROM users WHERE YEAR(CreationDate) = 2014;
SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1;
SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1;
SELECT COUNT(*) FROM users WHERE Views > 10 AND YEAR(CreationDate) > 2013;
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';
SELECT p.OwnerUserId, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Eliciting priors from experts';
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1;
SELECT U.DisplayName FROM users U JOIN posts P ON U.Id = P.OwnerUserId WHERE P.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)
SELECT SUM(p.CommentCount) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';
SELECT p.AnswerCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.AnswerCount DESC LIMIT 1;
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.LastEditorUserId WHERE p.Title = 'Examples for teaching: Correlation does not mean causation' ORDER BY p.LastEditDate DESC LIMIT 1;
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL;
SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ClosedDate IS NOT NULL;
SELECT COUNT(*) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age > 65 AND p.Score >= 20;
SELECT U.Location FROM users U JOIN posts P ON U.Id = P.OwnerUserId WHERE P.Title = 'Eliciting priors from experts';
SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'bayesian';
SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags)
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND YEAR(Date) = 2011;
SELECT U.DisplayName FROM users U JOIN badges B ON U.Id = B.UserId GROUP BY U.DisplayName ORDER BY COUNT(B.Id) DESC LIMIT 1;
SELECT AVG(p.Score) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';
Error: 第 9985 个样本有 2 个SQL。
SELECT     (COUNT(CASE WHEN u.Age > 65 THEN p.Id END) * 100.0 / COUNT(p.Id)) AS Percentage_Elder_Users FROM     posts p JOIN     users u ON p.OwnerUserId = u.Id WHERE     p.Score > 20;
SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';
SELECT CreationDate, COUNT(Id) AS VoteCount FROM votes GROUP BY CreationDate ORDER BY VoteCount DESC LIMIT 1;
SELECT COUNT(Id) FROM badges WHERE Name = 'Revival';
SELECT p.Title FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score = (SELECT MAX(Score) FROM comments)
SELECT COUNT(c.Id) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount = 1910;
SELECT p.FavoriteCount FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 3025 AND c.CreationDate = '2014-04-23 20:29:39'
SELECT Text FROM comments WHERE PostId = 107829 LIMIT 1;
SELECT p.Id, p.Title, p.ClosedDate FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = '23853' AND c.CreationDate = '2013-07-12 09:08:18.0' AND (p.ClosedDate IS NULL OR p.ClosedDate != '2013-07-12 09:08:18.0');
SELECT u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 65041;
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini');
SELECT U.DisplayName FROM users U JOIN votes V ON U.Id = V.UserId WHERE V.Id = 6347;
SELECT COUNT(*) FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%';
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';
SELECT     COUNT(p.Id) AS NumberOfPosts,     COUNT(v.Id) AS NumberOfVotes,     COUNT(p.Id) / COUNT(v.Id) AS PostsToVotesRatio FROM     posts p LEFT JOIN     votes v ON p.Id = v.PostId WHERE     p.OwnerUserId = 24 GROUP BY     p.OwnerUserId;
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';
SELECT Text FROM comments WHERE Score = 17;
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'SilentGhost';
SELECT u.DisplayName FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text LIKE '%thank you user93%'
SELECT Text FROM comments WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'A Lion');
SELECT users.DisplayName, users.Reputation FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Title = 'Understanding what Dassault iSight is doing?';
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?';
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Necromancer' LIMIT 10;
SELECT p.LastEditorUserId, u.DisplayName FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Title = 'Open source tools for visualizing multi-dimensional data?';
SELECT p.Title FROM posts p JOIN postHistory ph ON p.Id = ph.PostId WHERE ph.UserId = (     SELECT u.Id     FROM users u     WHERE u.DisplayName = 'Vebjorn Ljosa' ) AND ph.PostHistoryTypeId IN (4,5,6) -- assuming these are the types for editing ORDER BY p.LastEditDate DESC;
SELECT SUM(p.Score) as TotalScore, u.WebsiteUrl FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Yevgeny' GROUP BY u.WebsiteUrl;
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND ph.UserId = c.UserId AND ph.PostHistoryTypeId IN (4,5,6) -- assuming that 4,5,6 are the types for editing a post, this might need to be adjusted based on your actual data model
SELECT SUM(v.BountyAmount) FROM votes v JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%data%' AND v.VoteTypeId = 8;
SELECT u.DisplayName FROM users u JOIN votes v ON u.Id = v.UserId JOIN posts p ON p.Id = v.PostId WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%';
SELECT p.Title, AVG(p.ViewCount) AS AverageViewCount, c.Text, p.Score FROM posts p JOIN tags t ON FIND_IN_SET(t.Id, p.Tags) LEFT JOIN comments c ON c.PostId = p.Id WHERE t.TagName = 'humor' GROUP BY p.Id, p.Title, p.Score, c.Text;
SELECT COUNT(*) FROM comments WHERE UserId = 13;
SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)
SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users);
SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND YEAR(Date) = 2011;
SELECT COUNT(*) FROM (   SELECT UserId   FROM badges   GROUP BY UserId   HAVING COUNT(*) > 5 ) AS users_with_badges
SELECT COUNT(*) FROM (   SELECT u.Id AS userId   FROM users u   INNER JOIN badges b1 ON u.Id = b1.UserId AND b1.Name = 'Teacher'   INNER JOIN badges b2 ON u.Id = b2.UserId AND b2.Name = 'Supporter'   WHERE u.Location LIKE '%New York%' ) AS result
SELECT u.DisplayName, u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 1;
SELECT u.Id, u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN (     SELECT PostId     FROM postHistory     GROUP BY PostId     HAVING COUNT(PostId) = 1 ) ph ON p.Id = ph.PostId WHERE p.ViewCount >= 1000 GROUP BY u.Id, u.DisplayName HAVING COUNT(p.Id) > 0;
SELECT u.DisplayName, COUNT(c.Id) as CommentCount, b.Name as BadgeName FROM users u JOIN comments c ON u.Id = c.UserId JOIN badges b ON u.Id = b.UserId GROUP BY u.DisplayName, b.Name ORDER BY CommentCount DESC;
SELECT COUNT(*) FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location LIKE '%India%' AND b.Name = 'Teacher';
SELECT     ((COUNT(CASE WHEN YEAR(Date) = 2010 THEN Id END) * 100.0 / COUNT(Id)) -      (COUNT(CASE WHEN YEAR(Date) = 2011 THEN Id END) * 100.0 / COUNT(Id))) AS Percentage_Difference FROM badges WHERE Name = 'Student'
Error: 第 10028 个样本有 3 个SQL。
SELECT p.Id, p.ViewCount AS Popularity FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.RelatedPostId = 61217;
SELECT Score, LinkTypeId FROM posts LEFT JOIN postLinks ON posts.Id = postLinks.PostId WHERE posts.Id = 395;
SELECT p.Id AS PostID, p.OwnerUserId AS UserID FROM posts p WHERE p.Score > 60;
SELECT SUM(FavoriteCount) FROM posts WHERE OwnerUserId = 686 AND YEAR(CreationDate) = 2011;
SELECT     AVG(u.UpVotes) AS Avg_UpVotes,     AVG(u.Age) AS Avg_Age FROM     users u JOIN     (SELECT         OwnerUserId,         COUNT(Id) AS NumPosts      FROM         posts      GROUP BY         OwnerUserId      HAVING         COUNT(Id) > 10) p ON u.Id = p.OwnerUserId WHERE     u.UpVotes IS NOT NULL AND u.Age IS NOT NULL;
SELECT COUNT(*) FROM badges WHERE Name = 'Announcer';
SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08';
SELECT COUNT(*) FROM comments WHERE Score > 60;
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47';
SELECT COUNT(Id) FROM posts WHERE Score = 10;
SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users)
SELECT u.Reputation FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0';
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Pierre'
SELECT DISTINCT b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY' ORDER BY b.Date;
Error: 第 10043 个样本有 2 个SQL。
SELECT     (COUNT(CASE WHEN u.Age BETWEEN 13 AND 18 THEN u.Id ELSE NULL END) * 100.0 / COUNT(u.Id)) AS PercentageTeenagers FROM     badges b JOIN     users u ON b.UserId = u.Id WHERE     b.Name = 'Organizer';
SELECT c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:19:56.0'
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:37:33.0'
SELECT u.Age FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'Vienna, Austria'
SELECT COUNT(*) FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age BETWEEN 19 AND 65;
Error: 第 10049 个样本有 3 个SQL。
SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users)
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Sharpie';
SELECT COUNT(*) FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age > 65;
SELECT DisplayName FROM users WHERE Id = 30;
SELECT COUNT(*) FROM users WHERE Location LIKE '%New York%';
SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2010;
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65;
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1;
SELECT CAST(COUNT(CASE WHEN YEAR(CreationDate) = 2010 THEN Id END) AS FLOAT) / COUNT(CASE WHEN YEAR(CreationDate) = 2011 THEN Id END) FROM votes;
SELECT t.TagName FROM tags t JOIN posts p ON t.Id = p.Tags JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'John Stauffer';
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (     SELECT Id     FROM users     WHERE DisplayName = 'Daniel Vassallo' );
SELECT COUNT(*) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'Harlan');
SELECT p.Id AS PostID FROM posts p WHERE p.OwnerUserId = (     SELECT u.Id     FROM users u     WHERE u.DisplayName = 'slashnick' ) AND p.AnswerCount = (     SELECT MAX(p2.AnswerCount)     FROM posts p2     WHERE p2.OwnerUserId = (         SELECT u.Id         FROM users u         WHERE u.DisplayName = 'slashnick'     ) )
SELECT     p.OwnerUserId,     u.DisplayName,     SUM(p.ViewCount) AS TotalViews FROM     posts p JOIN     users u ON p.OwnerUserId = u.Id WHERE     u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY     p.OwnerUserId,     u.DisplayName ORDER BY     TotalViews DESC LIMIT 1;
SELECT COUNT(*) FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN votes v ON p.Id = v.PostId WHERE u.DisplayName = 'Matt Parker' GROUP BY p.Id HAVING COUNT(v.Id) > 4;
SELECT COUNT(*) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score < 0 AND p.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Neil McGuigan');
Error: 第 10066 个样本有 2 个SQL。
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer'
SELECT     COUNT(CASE WHEN t.TagName = 'r' THEN p.Id END) * 100.0 / COUNT(p.Id) AS Percentage FROM     posts p JOIN     postTags pt ON p.Id = pt.PostId JOIN     tags t ON pt.TagId = t.Id WHERE     p.OwnerUserId = -1;
SELECT     (SELECT SUM(ViewCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Mornington')) -     (SELECT SUM(ViewCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Amos')) AS ViewDifference;
SELECT COUNT(*) FROM badges WHERE Name = 'commentator' AND YEAR(Date) = 2014;
SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';
SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users);
SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images';
SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 0;
SELECT p.Title, c.UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score > 60;
SELECT Name FROM badges WHERE YEAR(Date) = 2011 AND UserId IN (     SELECT Id     FROM users     WHERE Location LIKE '%North Pole%' );
SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.FavoriteCount > 150;
SELECT COUNT(ph.Id) AS PostHistoryCount, MAX(ph.LastEditDate) AS LastEditDate FROM postHistory ph JOIN posts p ON ph.PostId = p.Id WHERE p.Title = 'What is the best introductory Bayesian statistics textbook?';
SELECT U.LastAccessDate, U.Location FROM users U JOIN badges B ON U.Id = B.UserId WHERE B.Name = 'Outliers' ORDER BY U.LastAccessDate DESC;
SELECT p.Title FROM postLinks pl JOIN posts p ON pl.RelatedPostId = p.Id WHERE pl.PostId = (SELECT Id FROM posts WHERE Title = 'How to tell if something happened in a data set which monitors a value over time') AND pl.LinkTypeId = 3;
SELECT p.Id AS PostID, b.Name AS BadgeName FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN badges b ON u.Id = b.UserId WHERE u.DisplayName = 'Samuel' AND YEAR(p.CreationDate) = 2013 AND YEAR(b.Date) = 2013;
Error: 第 10082 个样本有 2 个SQL。
Error: 第 10083 个样本有 2 个SQL。
SELECT pl.RelatedPostId, p.Title, pl.LinkTypeId FROM postLinks AS pl JOIN posts AS p ON pl.RelatedPostId = p.Id WHERE pl.PostId = (     SELECT Id FROM posts WHERE Title = 'What are principal component scores?' );
SELECT p.ParentId, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ParentId IS NOT NULL AND p.Score = (     SELECT MAX(Score)     FROM posts     WHERE ParentId = p.ParentId ) GROUP BY p.ParentId, u.DisplayName;
SELECT U.DisplayName, U.WebsiteUrl FROM users U JOIN votes V ON U.Id = V.UserId WHERE V.VoteTypeId = 8 GROUP BY U.Id, U.DisplayName, U.WebsiteUrl ORDER BY SUM(V.BountyAmount) DESC LIMIT 1;
SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5;
SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000;
SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts) LIMIT 1;
SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)
SELECT COUNT(*) FROM posts p JOIN votes v ON p.Id = v.PostId WHERE YEAR(p.CreationDate) = 2011 AND v.BountyAmount = 50;
SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users);
SELECT p.Score FROM posts p JOIN postTags pt ON p.Id = pt.PostId JOIN tags t ON pt.TagId = t.Id WHERE t.Count = (SELECT MAX(Count) FROM tags) ORDER BY p.ViewCount DESC LIMIT 1;
Error: 第 10094 个样本有 2 个SQL。
SELECT p.Id FROM posts p JOIN votes v ON p.Id = v.PostId WHERE v.UserId = 1465 AND p.FavoriteCount = (     SELECT MAX(FavoriteCount)     FROM posts     WHERE Id IN (         SELECT PostId         FROM votes         WHERE UserId = 1465     ) ) LIMIT 1;
SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.CreationDate = (SELECT MIN(CreationDate) FROM postLinks)
SELECT U.DisplayName FROM users U JOIN badges B ON U.Id = B.UserId GROUP BY U.DisplayName ORDER BY COUNT(B.Name) DESC LIMIT 1;
SELECT MIN(v.CreationDate) FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl';
SELECT MIN(p.CreationDate) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age = (SELECT MIN(Age) FROM users);
SELECT U.DisplayName FROM users U JOIN badges B ON U.Id = B.UserId WHERE B.Name = 'Autobiographer' ORDER BY B.Date LIMIT 1;
SELECT COUNT(DISTINCT u.Id) FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' GROUP BY u.Id HAVING SUM(p.FavoriteCount) >= 4;
SELECT AVG(v.PostId) as AveragePostsVoted FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.Age = (SELECT MAX(Age) FROM users)
SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);
SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;
SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65;
SELECT COUNT(*) FROM posts WHERE YEAR(CreationDate) = 2010 AND OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Jay Stevens');
SELECT Id, Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky') ORDER BY ViewCount DESC LIMIT 1;
SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score = (SELECT MAX(Score) FROM posts)
SELECT AVG(Score) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Stephen Turner');
SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ViewCount > 20000 AND YEAR(p.CreationDate) = 2011;
SELECT p.Id, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE YEAR(p.CreationDate) = 2010 ORDER BY p.FavoriteCount DESC LIMIT 1;
SELECT     (COUNT(p.Id) FILTER (WHERE u.Reputation > 1000 AND YEAR(p.CreationDate) = 2011)) * 100.0 / COUNT(p.Id) AS percentage FROM     posts p JOIN     users u ON p.OwnerUserId = u.Id WHERE     YEAR(p.CreationDate) = 2011;
SELECT (COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN Id END) * 100.0 / COUNT(Id)) AS Percentage FROM users;
SELECT p.ViewCount, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Computer Game Datasets' ORDER BY p.LastActivityDate DESC LIMIT 1;
SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);
SELECT COUNT(*) FROM comments WHERE PostId = (     SELECT Id     FROM posts     WHERE Score = (         SELECT MAX(Score)         FROM posts     )     ORDER BY Id LIMIT 1 );
SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;
SELECT U.DisplayName, U.Location FROM users U JOIN posts P ON U.Id = P.LastEditorUserId WHERE P.Id = 183 ORDER BY P.LastEditDate DESC LIMIT 1;
SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett') ORDER BY Date DESC LIMIT 1;
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;
SELECT DATEDIFF(b.Date, u.CreationDate) AS DaysToBadge FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Zolomon'
SELECT     COUNT(p.Id) AS NumberOfPosts,     COUNT(c.Id) AS NumberOfComments FROM     posts p RIGHT JOIN     comments c ON p.OwnerUserId = c.UserId WHERE     p.OwnerUserId = (         SELECT             u.Id         FROM             users u         WHERE             u.CreationDate = (                 SELECT                     MAX(CreationDate)                 FROM                     users             )     ) GROUP BY     p.OwnerUserId;
SELECT c.Text, c.UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Analysing wind data with R' ORDER BY c.CreationDate DESC LIMIT 1;
SELECT COUNT(*) FROM badges WHERE Name = 'Citizen Patrol';
SELECT COUNT(*) FROM posts p JOIN postTags pt ON p.Id = pt.PostId JOIN tags t ON pt.TagId = t.Id WHERE t.TagName = 'careers';
Error: 第 10126 个样本有 2 个SQL。
SELECT     COUNT(DISTINCT c.Id) AS NumComments,     COUNT(DISTINCT p.Id) AS NumAnswers FROM     comments c LEFT JOIN     posts p ON p.ParentId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data') WHERE     c.PostId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data') GROUP BY     c.PostId, p.ParentId;
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';
Error: 第 10129 个样本有 2 个SQL。
SELECT     CAST(SUM(CASE WHEN p.Score >= 50 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(p.Id) * 100 as percentage FROM     posts p JOIN     users u ON p.OwnerUserId = u.Id WHERE     u.Reputation = (SELECT MAX(Reputation) FROM users)
SELECT COUNT(*) FROM posts WHERE Score < 20;
SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';
SELECT U.Reputation, U.UpVotes FROM users U JOIN comments C ON U.Id = C.UserId WHERE C.Text = 'fine, you win :)';
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How can I adapt ANOVA for binary data?';
SELECT c.Text, c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;
SELECT comments.CreationDate, users.Age FROM comments JOIN users ON comments.UserId = users.Id WHERE users.WebsiteUrl LIKE '%http://%';
SELECT COUNT(*) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.ViewCount < 5;
Error: 第 10139 个样本有 2 个SQL。
SELECT COUNT(DISTINCT u.Age) FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score = 0 AND u.Age = 40;
SELECT p.Id AS PostID, c.Text AS Comments FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item';
SELECT COUNT(v.Id) AS UpVotes FROM votes v JOIN comments c ON v.PostId = c.PostId WHERE c.Text LIKE '%R is also lazy evaluated.%' AND v.VoteTypeId = 2;
SELECT Text FROM comments WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky');
SELECT DISTINCT c.UserDisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 1 AND 5 AND u.DownVotes = 0;
SELECT     (COUNT(CASE WHEN u.UpVotes = 0 THEN c.UserId END) * 100.0 / COUNT(c.UserId)) AS percentage FROM     comments c JOIN     users u ON c.UserId = u.Id WHERE     c.Score BETWEEN 5 AND 10;
SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = '3-D Man';
SELECT COUNT(*) FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength';
SELECT COUNT(*) FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;
SELECT s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.full_name HAVING COUNT(hp.power_id) > 15;
SELECT COUNT(*) FROM superhero WHERE eye_colour_id IN (SELECT id FROM colour WHERE colour = 'Blue');
SELECT c.colour FROM colour c JOIN superhero s ON s.skin_colour_id = c.id WHERE s.superhero_name = 'Apocalypse';
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';
SELECT superhero.superhero_name FROM superhero JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Blue' AND hair_colour.colour = 'Blond';
SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT s.superhero_name, s.full_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' ORDER BY s.height_cm DESC LIMIT 1;
SELECT p.publisher_name FROM publisher p JOIN superhero s ON p.id = s.publisher_id WHERE s.superhero_name = 'Sauron';
SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue';
SELECT AVG(height_cm) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT (COUNT(CASE WHEN hp.power_id IN (SELECT id FROM superpower WHERE power_name = 'Super Strength') THEN 1 END) * 100 / COUNT(s.id)) AS percentage FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics'
SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics');
SELECT p.publisher_name FROM publisher p JOIN superhero s ON p.id = s.publisher_id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' GROUP BY p.publisher_name ORDER BY MIN(ha.attribute_value) ASC LIMIT 1;
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics';
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II';
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Intelligence' ORDER BY ha.attribute_value LIMIT 1;
SELECT r.race FROM race r JOIN superhero s ON r.id = s.race_id WHERE s.superhero_name = 'Copycat';
SELECT COUNT(*) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50;
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Death Touch';
SELECT COUNT(*) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100;
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.superhero_name ORDER BY COUNT(hp.power_id) DESC LIMIT 1;
SELECT COUNT(*) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');
SELECT     (COUNT(CASE WHEN s.alignment_id = a.id AND a.alignment = 'Bad' AND s.publisher_id = p.id AND p.publisher_name = 'Marvel Comics' THEN s.id ELSE NULL END) * 100 / COUNT(s.id)) AS percentage_bad,     COUNT(CASE WHEN s.alignment_id = a.id AND a.alignment = 'Bad' AND s.publisher_id = p.id AND p.publisher_name = 'Marvel Comics' THEN s.id ELSE NULL END) AS num_bad_marvel FROM     superhero s JOIN     alignment a ON s.alignment_id = a.id JOIN     publisher p ON s.publisher_id = p.id;
SELECT     (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) -     (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) AS difference;
SELECT id FROM publisher WHERE publisher_name = 'Star Trek';
SELECT AVG(attribute_value) FROM hero_attribute;
SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;
SELECT colour.colour FROM colour JOIN superhero ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75;
SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON sh.id = hp.hero_id WHERE sh.superhero_name = 'Deathlok';
SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2;
SELECT p.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower p ON hp.power_id = p.id JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Male' GROUP BY p.power_name LIMIT 5;
SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');
SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1;
SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id WHERE hp.hero_id = 56;
SELECT full_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Demi-God') LIMIT 5;
SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');
SELECT r.race FROM race r JOIN superhero s ON r.id = s.race_id WHERE s.weight_kg = 169;
SELECT c.colour FROM colour AS c JOIN superhero AS s ON s.hair_colour_id = c.id JOIN race AS r ON s.race_id = r.id WHERE s.height_cm = 185 AND r.race = 'human';
SELECT c.colour FROM colour AS c JOIN superhero AS s ON s.eye_colour_id = c.id WHERE s.weight_kg = (     SELECT MAX(weight_kg) FROM superhero );
SELECT     (COUNT(CASE WHEN p.id = 13 THEN sh.id END) * 100.0 / COUNT(sh.id)) AS Marvel_Percentage FROM     superhero sh JOIN     publisher p ON sh.publisher_id = p.id WHERE     sh.height_cm BETWEEN 150 AND 180;
SELECT s.superhero_name, s.full_name FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'male' AND s.weight_kg > (SELECT AVG(s.weight_kg) * 0.79 FROM superhero s) ;
SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id GROUP BY sp.power_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ha.attribute_value FROM hero_attribute ha JOIN superhero s ON s.id = ha.hero_id WHERE s.superhero_name = 'Abomination';
SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id WHERE hp.hero_id = 1;
SELECT COUNT(*) FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'stealth';
SELECT s.superhero_name, s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'strength' ORDER BY ha.attribute_value DESC LIMIT 1;
Error: 第 10196 个样本有 2 个SQL。
SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN publisher p ON s.publisher_id = p.id WHERE a.attribute_name = 'durability' AND p.publisher_name = 'Dark Horse Comics' GROUP BY s.superhero_name ORDER BY ha.attribute_value DESC LIMIT 1;
SELECT c.colour FROM colour AS c JOIN superhero AS s ON s.eye_colour_id = c.id WHERE s.full_name = 'Abraham Sapien';
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Flight';
SELECT c1.colour AS eye_colour, c2.colour AS hair_colour, c3.colour AS skin_colour FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id JOIN colour c1 ON s.eye_colour_id = c1.id JOIN colour c2 ON s.hair_colour_id = c2.id JOIN colour c3 ON s.skin_colour_id = c3.id WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics';
SELECT s.superhero_name, p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.eye_colour_id = s.hair_colour_id AND s.hair_colour_id = s.skin_colour_id;
SELECT r.race FROM race r JOIN superhero s ON r.id = s.race_id WHERE s.superhero_name = 'A-Bomb';
SELECT (COUNT(CASE WHEN s.eye_colour_id = c.id AND c.colour = 'Blue' THEN 1 END) * 100.0 / COUNT(s.id)) AS percentage FROM superhero s JOIN colour c ON s.eye_colour_id = c.id JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Female';
SELECT superhero.superhero_name, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler'
SELECT gender.gender FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Adaptation';
SELECT COUNT(*) FROM hero_power hp JOIN superhero sh ON hp.hero_id = sh.id WHERE sh.superhero_name = 'Amazo';
SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON sh.id = hp.hero_id WHERE sh.full_name = 'Hunter Zolomon';
SELECT height_cm FROM superhero WHERE eye_colour_id IN (SELECT id FROM colour WHERE colour = 'Amber');
SELECT s.superhero_name FROM superhero s JOIN colour c1 ON s.eye_colour_id = c1.id JOIN colour c2 ON s.hair_colour_id = c2.id WHERE c1.colour = 'Black' AND c2.colour = 'Black';
SELECT c.colour FROM colour AS c JOIN superhero AS s ON s.eye_colour_id = c.id WHERE s.skin_colour_id IN (     SELECT c2.id     FROM colour AS c2     WHERE c2.colour = 'Gold' );
SELECT full_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');
SELECT superhero_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';
SELECT COUNT(*) FROM (   SELECT ha.hero_id   FROM hero_attribute ha   JOIN attribute a ON ha.attribute_id = a.id   WHERE a.attribute_name = 'Strength'   GROUP BY ha.hero_id   HAVING ha.attribute_value = (     SELECT MAX(attribute_value)     FROM hero_attribute     WHERE attribute_id = (       SELECT id       FROM attribute       WHERE attribute_name = 'Strength'     )   ) ) as t;
SELECT race.race, alignment.alignment FROM superhero JOIN race ON superhero.race_id = race.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';
SELECT MULTIPLY(DIVIDE((SELECT COUNT(*) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')), (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'))), 100) AS Percentage;
SELECT AVG(weight_kg) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');
SELECT ABS((SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') - (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler'))
SELECT AVG(height_cm) AS average_height FROM superhero;
SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Abomination';
SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' ORDER BY ha.attribute_value DESC LIMIT 1;
SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;
SELECT attribute.attribute_name, hero_attribute.attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';
SELECT superhero_name FROM superhero WHERE eye_colour_id = 7 AND hair_colour_id = 9;
SELECT T.publisher_name FROM (     SELECT publisher_id     FROM superhero     WHERE superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy') ) AS S JOIN publisher AS T ON S.publisher_id = T.id GROUP BY T.publisher_name;
SELECT COUNT(*) FROM superhero WHERE publisher_id = 1;
SELECT (COUNT(CASE WHEN s.eye_colour_id = 7 THEN s.id END) * 100.0 / COUNT(s.id)) AS percentage_of_blue_eyed_superheroes FROM superhero s;
SELECT     CAST(COUNT(CASE WHEN gender_id = 1 THEN 1 END) AS FLOAT) /     COUNT(CASE WHEN gender_id = 2 THEN 1 END) AS ratio FROM     superhero;
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT id FROM superpower WHERE power_name = 'cryokinesis';
SELECT superhero_name FROM superhero WHERE id = 294;
SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;
SELECT c.colour FROM colour AS c JOIN superhero AS s ON s.eye_colour_id = c.id WHERE s.full_name = 'Karen Beecher-Duncan';
SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON sh.id = hp.hero_id WHERE sh.full_name = 'Helen Parr';
SELECT T.race FROM (     SELECT race_id     FROM superhero     WHERE height_cm = 188 AND weight_kg = 108 ) AS S JOIN race AS T ON S.race_id = T.id;
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;
SELECT r.race FROM race r JOIN superhero s ON r.id = s.race_id JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute) GROUP BY r.race ORDER BY ha.attribute_value DESC LIMIT 1;
SELECT a.alignment, sp.power_name FROM superhero sh JOIN alignment a ON sh.alignment_id = a.id JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Atom IV';
SELECT superhero.full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5;
SELECT AVG(attribute_value) FROM hero_attribute WHERE hero_id IN (     SELECT id     FROM superhero     WHERE alignment_id = 3 );
Error: 第 10243 个样本有 3 个SQL。
SELECT COUNT(*) FROM superhero WHERE alignment_id = 1 AND gender_id = 2;
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_value BETWEEN 75 AND 80;
SELECT r.race FROM superhero s JOIN race r ON s.race_id = r.id JOIN colour c ON s.hair_colour_id = c.id JOIN gender g ON s.gender_id = g.id WHERE c.colour = 'blue' AND g.gender = 'male';
SELECT MULTIPLY(DIVIDE(SUM(T2.gender_id = 2 AND T1.alignment_id = 2), COUNT(T1.alignment_id = 2)), 100.0) FROM superhero AS T1 JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.alignment_id = 2;
SELECT     (SELECT COUNT(*)      FROM superhero      JOIN colour ON superhero.eye_colour_id = colour.id      WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL        AND colour.id = 7) -     (SELECT COUNT(*)      FROM superhero      JOIN colour ON superhero.eye_colour_id = colour.id      WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL        AND colour.id = 1)
SELECT ha.attribute_value FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id JOIN superhero sh ON ha.hero_id = sh.id WHERE a.attribute_name = 'Strength' AND sh.superhero_name = 'Hulk';
SELECT p.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower p ON hp.power_id = p.id WHERE s.superhero_name = 'Ajax';
SELECT COUNT(*) FROM superhero WHERE skin_colour_id IN (SELECT id FROM colour WHERE colour = 'Green') AND alignment_id IN (SELECT id FROM alignment WHERE alignment = 'Bad');
SELECT COUNT(*) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Wind Control' ORDER BY s.superhero_name ASC;
SELECT gender.gender FROM gender JOIN superhero ON superhero.gender_id = gender.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Phoenix Force';
SELECT superhero_name FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics') ORDER BY weight_kg DESC LIMIT 1;
SELECT AVG(T1.height_cm) FROM superhero AS T1 JOIN race AS T2 ON T1.race_id = T2.id JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.race <> 'Human' AND T3.publisher_name = 'Dark Horse Comics';
SELECT COUNT(*) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' AND ha.attribute_value = 100;
SELECT     (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) -     (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS difference;
SELECT attribute.attribute_name FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value LIMIT 1;
SELECT c.colour FROM colour AS c JOIN superhero AS s ON s.eye_colour_id = c.id WHERE s.superhero_name = 'Abomination';
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';
SELECT     (COUNT(CASE WHEN s.gender_id = g.id AND g.gender = 'Female' THEN 1 END) * 100.0 / COUNT(s.id)) AS female_percentage FROM     superhero s JOIN     gender g ON s.gender_id = g.id JOIN     publisher p ON s.publisher_id = p.id WHERE     p.publisher_name = 'George Lucas';
SELECT MULTIPLY(DIVIDE((SELECT COUNT(*) FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Good' AND superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')), (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'))), 100.0) AS percentage_good_superheroes;
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';
SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute);
SELECT full_name FROM superhero WHERE superhero_name = 'Alien';
SELECT s.superhero_name, s.full_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.weight_kg < 100 AND c.colour = 'brown';
SELECT ha.attribute_value FROM hero_attribute ha JOIN superhero s ON s.id = ha.hero_id WHERE s.superhero_name = 'Aquababy';
Error: 第 10270 个样本有 2 个SQL。
SELECT AVG(height_cm) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'neutral');
SELECT DISTINCT hp.hero_id FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Intelligence';
SELECT c.colour FROM colour AS c JOIN superhero AS s ON s.eye_colour_id = c.id WHERE s.superhero_name = 'Blackwulf';
SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON hp.hero_id = sh.id WHERE sh.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero);
SELECT d.driverRef FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 18 ORDER BY q.q1 DESC LIMIT 5;
SELECT d.surname FROM drivers d JOIN (     SELECT q.driverId, MIN(q.q2) as best_q2     FROM qualifying q     WHERE q.raceId = 19     GROUP BY q.driverId     ORDER BY best_q2     LIMIT 1 ) subq ON d.driverId = subq.driverId;
SELECT DISTINCT r.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.location LIKE '%Shanghai%';
SELECT url FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya';
SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Germany';
SELECT c.position FROM circuits c JOIN constructors co ON c.circuitId = co.constructorId WHERE co.name = 'Renault';
Error: 第 10281 个样本有 2 个SQL。
SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Spain';
SELECT c.lat, c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.name LIKE '%Australian Grand Prix%' AND c.country = 'Australia';
SELECT r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit';
SELECT T2.time FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Sepang International Circuit'
SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Abu Dhabi Grand Prix';
SELECT c.country FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE cr.raceId = 24 AND cr.points = 1;
SELECT q.q1 FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 354 AND d.forename = 'Bruno' AND d.surname = 'Senna';
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 355 AND q.q2 = '01:40';
Error: 第 10290 个样本有 2 个SQL。
SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007) AND statusId IN (SELECT statusId FROM status WHERE status != 'Finished')
SELECT s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;
SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId IN (     SELECT raceId     FROM races     WHERE date = '2015-11-29' ) AND positionOrder IS NOT NULL;
SELECT d.surname, d.forename, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 592 AND r.time IS NOT NULL ORDER BY d.dob ASC LIMIT 1;
SELECT d.url FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE l.raceId = 161 AND l.time = '0:01:27';
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 933 AND r.fastestLapSpeed = (     SELECT MAX(fastestLapSpeed)     FROM results     WHERE raceId = 933 );
SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Malaysian Grand Prix';
SELECT c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE cr.raceId = 9 ORDER BY cr.points DESC LIMIT 1;
SELECT q.q1 FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE d.forename = 'Lucas' AND d.surname = 'di Grassi' AND q.raceId = 345;
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 347 AND q.q2 = '01:15';
SELECT d.code FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 45 AND q.q3 = '01:33'
SELECT T1.time FROM results AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 743 AND T2.forename = 'Bruce' AND T2.surname = 'McLaren';
SELECT d.surname, d.forename FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = (     SELECT raceId     FROM races     WHERE name = 'San Marino Grand Prix' AND year = 2006 ) AND r.position = 2;
SELECT s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;
SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND positionOrder IS NOT NULL;
SELECT d.driverRef, d.surname, d.forename, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 872 AND r.time IS NOT NULL ORDER BY d.dob DESC LIMIT 1;
SELECT d.forename, d.surname FROM drivers d JOIN (     SELECT driverId, MIN(time) as best_lap_time     FROM lapTimes     WHERE raceId = 348     GROUP BY driverId     ORDER BY best_lap_time     LIMIT 1 ) lt ON d.driverId = lt.driverId;
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results)
SELECT     ((t1.fastestLapSpeed - t2.fastestLapSpeed) / t1.fastestLapSpeed) * 100 AS Percentage_Faster FROM     (     SELECT         AVG(results.fastestLapSpeed) AS fastestLapSpeed     FROM         results     JOIN         drivers ON results.driverId = drivers.driverId     WHERE         results.raceId = 853 AND         drivers.forename = 'Paul' AND         drivers.surname = 'di Resta'     ) t1,     (     SELECT         AVG(results.fastestLapSpeed) AS fastestLapSpeed     FROM         results     WHERE         results.raceId = 854     ) t2;
SELECT     (COUNT(CASE WHEN T1.time IS NOT NULL AND T1.date = '1983-07-16' THEN T1.driverId END) * 100.0 /     COUNT(CASE WHEN T1.date = '1983-07-16' THEN T1.driverId END)) AS completion_rate FROM     results AS T1 JOIN     races AS T2 ON T1.raceId = T2.raceId WHERE     T2.date = '1983-07-16';
SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix';
Error: 第 10312 个样本有 2 个SQL。
WITH first_race AS (   SELECT year, month   FROM races   WHERE date = (SELECT MIN(date) FROM races) ), same_month_year_races AS (   SELECT name, date   FROM races   WHERE year = (SELECT year FROM first_race) AND month = (SELECT month FROM first_race) ) SELECT * FROM same_month_year_races;
SELECT T2.name, T2.date FROM races AS T2 JOIN seasons AS T1 ON T2.year = T1.year WHERE T1.year = 1999 ORDER BY T2.round DESC LIMIT 1;
SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1;
SELECT name FROM races WHERE year = 2017 AND raceId NOT IN (SELECT raceId FROM races WHERE year = 2000);
SELECT T1.country, T1.name, T1.location FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year LIMIT 1;
SELECT MAX(seasons.year) FROM seasons JOIN races ON seasons.year = races.year JOIN circuits ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix';
SELECT COUNT(DISTINCT T2.year) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Silverstone' AND T2.name = 'British Grand Prix';
SELECT d.surname, d.forename, ds.position FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN driverStandings ds ON r.raceId = ds.raceId AND r.driverId = ds.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Singapore Grand Prix' AND ra.year = 2010 ORDER BY ds.position;
SELECT d.forename, d.surname, MAX(r.points) FROM drivers d JOIN results r ON d.driverId = r.driverId GROUP BY d.driverId ORDER BY r.points DESC LIMIT 1;
SELECT d.surname, d.forename, ds.points FROM driverStandings ds JOIN drivers d ON ds.driverId = d.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.year = 2017 AND r.name = 'Chinese Grand Prix' ORDER BY ds.points DESC LIMIT 3;
SELECT T1.driverId, T4.name AS driver_name, T3.raceId, T5.name AS race_name FROM lapTimes AS T1 JOIN races AS T3 ON T1.raceId = T3.raceId JOIN (   SELECT raceId, MIN(time) as best_time   FROM lapTimes   GROUP BY raceId ) AS T2 ON T1.raceId = T2.raceId AND T1.time = T2.best_time JOIN drivers AS T4 ON T1.driverId = T4.driverId JOIN races AS T5 ON T3.raceId = T5.raceId LIMIT 1;
SELECT AVG(lapTimes.time) FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.forename = 'Sebastian' AND drivers.surname = 'Vettel' AND races.name = 'Chinese Grand Prix' AND races.year = 2009;
SELECT     (COUNT(CASE WHEN r.position > 1 THEN 1 END) * 100.0 / COUNT(r.resultId)) AS percentage FROM     results r JOIN     races ra ON r.raceId = ra.raceId JOIN     drivers d ON r.driverId = d.driverId WHERE     d.surname = 'Hamilton' AND ra.year >= 2010;
SELECT d.surname, d.nationality, AVG(ds.points) as avg_points FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.wins = (SELECT MAX(wins) FROM driverStandings) GROUP BY d.driverId ORDER BY avg_points DESC LIMIT 1;
SELECT driverRef, MAX(2022 - YEAR(dob)) as age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;
SELECT c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE YEAR(r.date) BETWEEN 1990 AND 2000 GROUP BY c.name HAVING COUNT(r.raceId) = 4;
SELECT circuits.name, circuits.location, races.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'USA' AND races.year = 2006;
SELECT races.name, circuits.name, circuits.location FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE YEAR(races.date) = 2005 AND MONTH(races.date) = 9;
SELECT r.name FROM races r JOIN results rs ON r.raceId = rs.raceId JOIN drivers d ON rs.driverId = d.driverId WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND rs.position < 10;
SELECT COUNT(*) FROM (   SELECT r.name AS race_name, d.surname AS driver, MAX(cr.points) AS max_points   FROM races r   JOIN results rs ON r.raceId = rs.raceId   JOIN drivers d ON rs.driverId = d.driverId   JOIN constructorResults cr ON cr.raceId = r.raceId AND cr.constructorId = rs.constructorId   JOIN circuits c ON r.circuitId = c.circuitId   WHERE c.name = 'Sepang International Circuit' AND d.surname = 'Schumacher'   GROUP BY r.raceId   HAVING MAX(cr.points) = (     SELECT MAX(points)     FROM constructorResults     WHERE raceId = r.raceId   ) ) AS subquery;
SELECT r.name, r.year FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher' AND res.fastestLap = (SELECT MIN(fastestLap)                       FROM results                       WHERE driverId = (SELECT driverId                                         FROM drivers                                         WHERE forename = 'Michael' AND surname = 'Schumacher'));
SELECT AVG(results.points) FROM results JOIN races ON results.raceId = races.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND races.year = 2000;
SELECT races.name, results.points FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY races.year LIMIT 1;
SELECT races.name, circuits.country FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date;
SELECT r.name AS race_name, r.year, c.location FROM races r JOIN circuits c ON r.circuitId = c.circuitId JOIN results res ON r.raceId = res.raceId WHERE res.laps = (SELECT MAX(laps) FROM results)
SELECT     (COUNT(CASE WHEN c.country = 'Germany' THEN r.raceId END) * 100.0 / COUNT(r.raceId)) AS percentage FROM     races r JOIN     circuits c ON r.circuitId = c.circuitId WHERE     r.name = 'European Grand Prix';
SELECT lat, lng FROM circuits WHERE name = 'Silverstone';
SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1;
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';
SELECT country FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits);
SELECT COUNT(*) FROM drivers WHERE code IS NULL;
SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers);
SELECT surname FROM drivers WHERE nationality = 'Italian';
SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';
SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';
SELECT c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year = 2009 AND r.name = 'Spanish Grand Prix';
SELECT DISTINCT T2.year FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Silverstone'
SELECT r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone';
SELECT T1.time FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Abu Dhabi' AND T1.year BETWEEN 2010 AND 2019;
SELECT COUNT(*) FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Italy';
SELECT races.date FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Circuit de Barcelona-Catalunya';
SELECT circuits.url FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;
SELECT MIN(T2.fastestLapTime) FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton';
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.fastestLapSpeed = (SELECT MAX(results.fastestLapSpeed) FROM results);
SELECT d.driverRef FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON ra.raceId = r.raceId WHERE ra.name = 'Australian Grand Prix' AND ra.year = 2008 AND r.position = 1;
SELECT r.name FROM races r JOIN results rs ON r.raceId = rs.raceId JOIN drivers d ON rs.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';
SELECT r.name FROM results rs JOIN races r ON rs.raceId = r.raceId JOIN drivers d ON rs.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' GROUP BY r.name ORDER BY MIN(rs.rank) ASC LIMIT 1;
SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2009 AND name = 'Spanish Grand Prix');
SELECT DISTINCT T2.year FROM drivers AS T1 JOIN results AS T3 ON T1.driverId = T3.driverId JOIN races AS T2 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton';
SELECT T1.positionOrder FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton';
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE r.grid = 4 AND ra.name = 'Australian Grand Prix' AND ra.year = 2008;
SELECT COUNT(*) FROM results JOIN races ON results.raceId = races.raceId WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 AND results.time IS NOT NULL;
SELECT T1.milliseconds, T1.time FROM lapTimes AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.milliseconds ASC LIMIT 1;
SELECT T1.time FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.rank = 2;
SELECT d.surname, d.url FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = (     SELECT raceId     FROM races     WHERE year = 2008 AND name = 'Australian Grand Prix' ) AND r.positionOrder = 1;
SELECT COUNT(*) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON ra.raceId = r.raceId JOIN circuits c ON c.circuitId = ra.circuitId WHERE d.nationality = 'American' AND ra.name = 'Australian Grand Prix' AND ra.year = 2008;
SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 AND T3.name = 'Australian Grand Prix' AND T2.time IS NOT NULL;
SELECT SUM(T1.points) FROM results AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton';
SELECT AVG(TIME_TO_SEC(replace(replace(replace(results.fastestLapTime, ':', ' '), '.', ''), ' ', '.'))) as AvgFastestLapInSeconds FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT     (COUNT(CASE WHEN T2.time IS NOT NULL THEN T1.raceId END) * 1.0 / COUNT(T1.raceId)) AS rate FROM     races AS T1     INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE     T1.year = 2008 AND T1.name = 'Australian Grand Prix'
WITH ChampionTime AS (   SELECT r.raceId,          MIN(l.time) AS ChampionTime   FROM results r   JOIN lapTimes l ON r.resultId = l.driverId   WHERE r.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)   AND r.position = 1   GROUP BY r.raceId ), LastDriverTime AS (   SELECT r.raceId,          SUM(l.time) AS LastDriverTime   FROM results r   JOIN lapTimes l ON r.resultId = l.driverId   WHERE r.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)   AND r.position = (SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008))   GROUP BY r.raceId ) SELECT ((ChampionTime.ChampionTime - LastDriverTime.LastDriverTime) / LastDriverTime.LastDriverTime) * 100 AS PercentageFaster FROM ChampionTime, LastDriverTime;
SELECT COUNT(*) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia';
SELECT lat, lng FROM circuits WHERE country = 'USA';
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND YEAR(dob) > 1980;
SELECT AVG(cs.points) FROM constructorStandings cs JOIN constructors c ON cs.constructorId = c.constructorId WHERE c.nationality = 'British';
SELECT c.name, MAX(cs.points) FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId GROUP BY c.name ORDER BY MAX(cs.points) DESC LIMIT 1;
SELECT c.name FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE cr.raceId = 291 AND cr.points = 0;
SELECT COUNT(*) FROM (   SELECT c.constructorId   FROM constructors c   JOIN constructorResults cr ON c.constructorId = cr.constructorId   JOIN races r ON cr.raceId = r.raceId   WHERE c.nationality = 'Japanese' AND cr.points = 0   GROUP BY c.constructorId   HAVING COUNT(r.raceId) = 2 ) as temp;
SELECT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.position = 1;
SELECT COUNT(DISTINCT c.constructorId) FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN results r ON cr.raceId = r.raceId JOIN lapTimes lt ON r.resultId = lt.driverId AND r.raceId = lt.raceId WHERE c.nationality = 'French' AND lt.lap > 50;
SELECT     (COUNT(CASE WHEN T2.time IS NOT NULL THEN T1.driverId END) * 100.0 / COUNT(T1.driverId)) AS completion_percentage FROM     drivers T1 JOIN     results T2 ON T1.driverId = T2.driverId WHERE     T1.nationality = 'Japanese' AND     T2.raceId IN (SELECT raceId FROM races WHERE year BETWEEN 2007 AND 2009);
SELECT     T1.year,     AVG(T2.time) AS average_time FROM     races AS T1 JOIN     results AS T2 ON T1.raceId = T2.raceId WHERE     T2.position = 1 AND T2.time IS NOT NULL GROUP BY     T1.year;
SELECT d.forename, d.surname FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE YEAR(d.dob) > 1975 AND ds.position = '2';
SELECT COUNT(*) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON ra.raceId = r.raceId WHERE d.nationality = 'Italian' AND r.time IS NULL;
SELECT d.forename, d.surname FROM drivers d JOIN (     SELECT driverId, MIN(milliseconds) as min_milliseconds     FROM lapTimes     GROUP BY driverId ) lt ON d.driverId = lt.driverId ORDER BY lt.min_milliseconds ASC LIMIT 1;
SELECT T3.fastestLap FROM (     SELECT T1.driverId, T1.raceId     FROM results AS T1     JOIN races AS T2 ON T1.raceId = T2.raceId     WHERE T2.year = 2009     AND T1.position = 1 ) AS T1 JOIN results AS T3 ON T1.raceId = T3.raceId AND T1.driverId = T3.driverId ORDER BY T3.milliseconds ASC LIMIT 1;
SELECT AVG(T2.fastestLapSpeed) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009;
SELECT T1.name, T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.time IS NOT NULL AND T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds LIMIT 1;
SELECT     (COUNT(CASE WHEN d.dob < '1985-01-01' AND r.laps > 50 THEN d.driverId END) * 100.0 /      COUNT(CASE WHEN EXTRACT(YEAR FROM s.year) BETWEEN 2000 AND 2005 THEN d.driverId END)) AS percentage FROM     races r JOIN     results res ON r.raceId = res.raceId JOIN     drivers d ON res.driverId = d.driverId JOIN     seasons s ON r.year = s.year WHERE     EXTRACT(YEAR FROM s.year) BETWEEN 2000 AND 2005
Error: 第 10392 个样本有 2 个SQL。
SELECT code FROM drivers WHERE nationality = 'America';
SELECT raceId FROM races WHERE year = 2009;
SELECT COUNT(driverId) FROM results WHERE raceId = 18;
SELECT     T1.code,     COUNT(CASE WHEN T1.nationality = 'Dutch' THEN 1 END) AS DutchDrivers FROM     drivers T1 WHERE     T1.dob IS NOT NULL ORDER BY     YEAR(T1.dob) ASC LIMIT 3;
SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';
SELECT COUNT(*) FROM drivers WHERE nationality = 'Australian' AND YEAR(dob) = 1980;
SELECT d.surname, MIN(l.time) as earliest_lap_time FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE d.nationality = 'German' AND YEAR(d.dob) BETWEEN 1980 AND 1990 GROUP BY d.driverId ORDER BY earliest_lap_time LIMIT 3;
SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY STRFTIME('%Y', dob) ASC LIMIT 1;
SELECT d.driverId, d.code FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON ra.raceId = r.raceId WHERE YEAR(d.dob) = 1971 AND r.fastestLapTime IS NOT NULL;
SELECT d.surname, MAX(lt.time) AS latest_lap_time FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'Spanish' AND YEAR(d.dob) < 1982 GROUP BY d.driverId ORDER BY latest_lap_time DESC LIMIT 10;
SELECT T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results)
SELECT YEAR FROM (     SELECT raceId, MAX(milliseconds) AS MaxTime     FROM lapTimes     GROUP BY raceId ) AS T1 JOIN races ON T1.raceId = races.raceId ORDER BY YEAR LIMIT 1
SELECT driverId FROM (   SELECT driverId, MIN(time) AS min_time   FROM lapTimes   WHERE lap = 1   GROUP BY driverId ) AS subquery ORDER BY min_time LIMIT 5;
SELECT COUNT(*) FROM results JOIN status ON results.statusId = status.statusId WHERE results.raceId BETWEEN 50 AND 100 AND status.status = 'Disqualified' AND results.time IS NOT NULL;
SELECT location, lat, lng, COUNT(*) as times_held FROM circuits WHERE country = 'Austria' GROUP BY circuitId;
SELECT T2.raceId, T2.name, COUNT(*) AS Finishers FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL GROUP BY T2.raceId ORDER BY Finishers DESC LIMIT 1;
SELECT d.driverRef, d.nationality, d.dob FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 23 AND q.q2 IS NOT NULL;
Error: 第 10410 个样本有 2 个SQL。
SELECT COUNT(*) FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN status ON results.statusId = status.statusId WHERE status.status = 'Disqualified' AND drivers.nationality = 'American';
SELECT c.name, c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE c.nationality = 'Italian' ORDER BY cs.points DESC LIMIT 1;
SELECT c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId GROUP BY c.constructorId, c.url ORDER BY SUM(cs.wins) DESC LIMIT 1;
SELECT T1.driverId, T1.time FROM (     SELECT driverId, MAX(time) as time     FROM lapTimes     WHERE raceId = (SELECT raceId FROM races WHERE name = 'French Grand Prix') AND lap = 3     GROUP BY driverId ) T1 WHERE T1.time = (     SELECT MAX(time)     FROM (         SELECT MAX(time) as time         FROM lapTimes         WHERE raceId = (SELECT raceId FROM races WHERE name = 'French Grand Prix') AND lap = 3         GROUP BY driverId     ) T2 );
SELECT r.name, MIN(l.time) as fastest_time FROM races r JOIN lapTimes l ON r.raceId = l.raceId WHERE l.lap = 1 GROUP BY r.name ORDER BY fastest_time LIMIT 1;
SELECT AVG(T1.fastestLapTime) FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'United States Grand Prix' AND T2.year = 2006 AND T1.rank < 11;
SELECT d.surname, AVG(ps.duration) as avg_duration FROM drivers d JOIN pitStops ps ON d.driverId = ps.driverId WHERE d.nationality = 'German' AND EXTRACT(YEAR FROM d.dob) BETWEEN 1980 AND 1985 GROUP BY d.driverId, d.surname ORDER BY avg_duration ASC LIMIT 5;
SELECT T1.driverId, T1.time FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.position = 1;
SELECT c.constructorRef, c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.year = 2009 AND r.name = 'Singapore Grand Prix' ORDER BY cr.points DESC LIMIT 1;
SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND YEAR(dob) BETWEEN 1981 AND 1991;
SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND YEAR(dob) BETWEEN 1971 AND 1985 ORDER BY dob DESC;
SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring';
SELECT MAX(T3.points) AS Score, T2.name, T2.nationality FROM races AS T1 JOIN constructorResults AS T3 ON T1.raceId = T3.raceId JOIN constructors AS T2 ON T3.constructorId = T2.constructorId WHERE T1.name = 'Monaco Grand Prix' AND T1.year BETWEEN 1980 AND 2010 GROUP BY T2.constructorId ORDER BY Score DESC LIMIT 1;
SELECT AVG(results.points) FROM results JOIN races ON results.raceId = races.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Turkish Grand Prix';
SELECT AVG(total_races) as avg_races FROM (     SELECT COUNT(*) as total_races     FROM races     WHERE date BETWEEN '2000-01-01' AND '2010-12-31'     GROUP BY year ) as yearly_races;
SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
Error: 第 10427 个样本有 2 个SQL。
SELECT r.name FROM races r JOIN results res ON r.raceId = res.raceId WHERE res.fastestLapTime = (     SELECT MIN(fastestLapTime)     FROM results )
SELECT T1.location || ', ' || T1.country AS Full_Location FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.date = (SELECT MAX(date) FROM races)
SELECT d.forename, d.surname FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2008 AND c.name = 'Marina Bay Street Circuit' AND q.position = 1 AND q.q3 IS NOT NULL ORDER BY q.q3 ASC LIMIT 1;
SELECT d.forename, d.surname, d.nationality, r.name AS race_name FROM drivers d JOIN results res ON d.driverId = res.driverId JOIN races r ON res.raceId = r.raceId WHERE d.dob = (SELECT MAX(dob) FROM drivers) GROUP BY d.driverId ORDER BY r.date ASC LIMIT 1;
SELECT COUNT(*) FROM results JOIN races ON results.raceId = races.raceId JOIN status ON results.statusId = status.statusId WHERE races.name = 'Canadian Grand Prix' AND status.status = 'Accident' GROUP BY results.driverId ORDER BY COUNT(*) DESC LIMIT 1;
SELECT d.forename, d.surname, COUNT(rs.wins) AS total_wins FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN (     SELECT raceId, MAX(position) AS max_position     FROM driverStandings     GROUP BY raceId ) m ON ds.raceId = m.raceId AND ds.position = m.max_position JOIN races r ON ds.raceId = r.raceId WHERE d.dob = (     SELECT MIN(dob)     FROM drivers ) GROUP BY d.driverId, d.forename, d.surname;
SELECT MAX(duration) FROM pitStops;
SELECT MIN(time) FROM lapTimes;
SELECT MAX(duration) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');
SELECT T2.lap FROM pitStops AS T2 JOIN races AS T1 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2011 AND T1.name = 'Australian Grand Prix' AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
SELECT pitStops.duration FROM pitStops JOIN races ON pitStops.raceId = races.raceId WHERE races.year = 2011 AND races.name = 'Australian Grand Prix';
SELECT lt.time FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY lt.milliseconds ASC LIMIT 1;
SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time = (     SELECT MIN(time)     FROM lapTimes )
SELECT c.name, lt.position FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId JOIN drivers d ON lt.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' GROUP BY lt.raceId HAVING lt.time = MIN(lt.time);
SELECT MIN(lt.time) FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId WHERE r.name = 'Austrian Grand Prix'
SELECT c.name, MIN(l.time) as lap_record FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN lapTimes l ON r.raceId = l.raceId WHERE c.country = 'Italy' GROUP BY c.name;
SELECT r.name FROM races r JOIN lapTimes l ON r.raceId = l.raceId WHERE r.circuitId = (SELECT c.circuitId FROM circuits c WHERE c.name = 'Austrian Grand Prix') GROUP BY r.name ORDER BY MIN(l.time) ASC LIMIT 1;
SELECT pitStops.duration FROM pitStops JOIN races ON pitStops.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId JOIN (     SELECT raceId, driverId, MIN(milliseconds) as min_lap_time     FROM lapTimes     WHERE raceId = (         SELECT raceId         FROM races         WHERE name = 'Austrian Grand Prix'     )     GROUP BY raceId, driverId ) AS fastest_laps ON pitStops.raceId = fastest_laps.raceId AND pitStops.driverId = fastest_laps.driverId WHERE circuits.name = 'Austrian Grand Prix' AND fastest_laps.min_lap_time = (     SELECT MIN(milliseconds)     FROM lapTimes     WHERE raceId = (         SELECT raceId         FROM races         WHERE name = 'Austrian Grand Prix'     ) );
SELECT c.lat, c.lng FROM circuits c JOIN (     SELECT raceId, MIN(milliseconds) as min_time     FROM lapTimes     WHERE time = '01:29.488'     GROUP BY raceId ) lt ON c.circuitId = (     SELECT circuitId     FROM races     WHERE raceId = lt.raceId ) WHERE lt.min_time = (     SELECT MIN(milliseconds)     FROM lapTimes     WHERE raceId = lt.raceId );
SELECT AVG(pitStops.milliseconds) FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT AVG(lt.milliseconds) FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Italy';
SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
Error: 第 10450 个样本有 2 个SQL。
SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes);
SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low';
Error: 第 10453 个样本有 3 个SQL。
SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1;
SELECT T1.team_long_name FROM Team AS T1 JOIN (     SELECT home_team_api_id, COUNT(*) as lost_matches     FROM Match     WHERE season = '2015/2016' AND home_team_goal < away_team_goal     GROUP BY home_team_api_id ) AS T2 ON T1.team_api_id = T2.home_team_api_id ORDER BY lost_matches ASC LIMIT 1;
SELECT p.player_name, pa.penalties FROM Player AS p JOIN Player_Attributes AS pa ON p.player_api_id = pa.player_api_id WHERE pa.penalties IS NOT NULL GROUP BY p.player_api_id ORDER BY SUM(pa.penalties) DESC LIMIT 10;
SELECT T1.team_long_name FROM Team AS T1 JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id JOIN League AS T3 ON T2.league_id = T3.id WHERE T3.name = 'Scotland Premier League' AND T2.season = '2009/2010' AND (T2.away_team_goal - T2.home_team_goal) > 0 GROUP BY T1.team_api_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT team_long_name, buildUpPlaySpeed FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE buildUpPlaySpeed IN (     SELECT buildUpPlaySpeed     FROM Team_Attributes     ORDER BY buildUpPlaySpeed DESC     LIMIT 4 ) ORDER BY buildUpPlaySpeed DESC;
SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' AND M.home_team_goal = M.away_team_goal GROUP BY L.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT     (strftime('%Y', 'now') - strftime('%Y', P.birthday)) as age FROM     Player_Attributes PA JOIN     Player P ON PA.player_api_id = P.player_api_id WHERE     PA.sprint_speed >= 97 AND     PA.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00';
SELECT L.name, COUNT(M.id) AS total_matches FROM Match M JOIN League L ON M.league_id = L.id GROUP BY L.name ORDER BY total_matches DESC LIMIT 1;
SELECT AVG(height) FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';
SELECT player_api_id FROM Player_Attributes WHERE substr(date,1,4) = '2010' GROUP BY player_api_id HAVING AVG(overall_rating) > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date,1,4) = '2010') ORDER BY AVG(overall_rating) DESC LIMIT 1;
SELECT T1.team_fifa_api_id FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed BETWEEN 51 AND 59;
SELECT T1.team_long_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE strftime('%Y', T2.date) = '2012' AND T2.buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL);
SELECT (COUNT(CASE WHEN preferred_foot = 'left' THEN 1 END) * 1.0 / COUNT(*)) * 100 AS leftFootPercentage FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00';
SELECT L.name, SUM(M.home_team_goal + M.away_team_goal) as total_goals FROM League L JOIN Match M ON L.id = M.league_id GROUP BY L.name ORDER BY total_goals ASC LIMIT 5;
SELECT AVG(T1.long_shots) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Ahmed Samir Farag';
SELECT p.player_name, AVG(pa.heading_accuracy) as avg_heading_accuracy FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.height > 180 GROUP BY p.player_name ORDER BY avg_heading_accuracy DESC LIMIT 10;
SELECT T3.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T3 ON T1.team_api_id = T3.team_api_id WHERE T1.buildUpPlayDribblingClass = 'Normal' AND T1.date BETWEEN '2014-01-01 00:00:00' AND '2014-12-31 00:00:00' AND T1.chanceCreationPassing < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE date BETWEEN '2014-01-01 00:00:00' AND '2014-12-31 00:00:00') ORDER BY T1.chanceCreationPassing DESC;
SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal);
SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';
SELECT player_name FROM Player WHERE SUBSTR(birthday,1,4) = '1970' AND SUBSTR(birthday,6,2) = '10';
SELECT attacking_work_rate FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Franco Zennaro') LIMIT 1;
SELECT ta.buildUpPlayPositioningClass FROM Team_Attributes ta JOIN Team t ON ta.team_api_id = t.team_api_id WHERE t.team_long_name = 'ADO Den Haag';
SELECT pa.heading_accuracy FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Francois Affolter' AND pa.date = '2014-09-18 00:00:00';
SELECT overall_rating FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Gabriel Tamas') AND strftime('%Y', date) = '2011';
SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Scotland Premier League' AND Match.season = '2015/2016';
SELECT pa.preferred_foot FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.birthday = (SELECT MAX(birthday) FROM Player)
SELECT player_name FROM Player WHERE player_api_id IN (     SELECT player_api_id     FROM Player_Attributes     WHERE potential = (         SELECT MAX(potential)         FROM Player_Attributes     ) );
SELECT COUNT(*) FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.weight < 130 AND Player_Attributes.preferred_foot = 'left';
SELECT T1.team_short_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Risky';
SELECT pa.defensive_work_rate FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'David Wilson';
SELECT p.birthday FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
SELECT League.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Netherlands';
SELECT AVG(Match.home_team_goal) FROM Match JOIN Country ON Match.country_id = Country.id WHERE Country.name = 'Poland' AND Match.season = '2010/2011';
SELECT     p.player_name,     AVG(pa.finishing) AS avg_finishing FROM     Player_Attributes pa JOIN     Player p ON pa.player_api_id = p.player_api_id WHERE     p.height = (SELECT MAX(height) FROM Player)     OR p.height = (SELECT MIN(height) FROM Player) GROUP BY     p.player_api_id ORDER BY     avg_finishing DESC LIMIT 1;
SELECT player_name FROM Player WHERE height > 180;
SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170;
SELECT DISTINCT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.overall_rating > 80 AND strftime('%Y', pa.date) BETWEEN '2008' AND '2010';
SELECT pa.potential FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Aaron Doran';
SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'left');
SELECT T1.team_long_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Fast';
SELECT ta.buildUpPlayPassingClass FROM Team_Attributes ta JOIN Team t ON ta.team_api_id = t.team_api_id WHERE t.team_short_name = 'CLB'
SELECT T1.team_short_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayPassing > 70;
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T1.date) BETWEEN '2010' AND '2015' AND T2.height > 170;
SELECT player_name FROM Player WHERE height = (SELECT MIN(height) FROM Player);
SELECT Country.name FROM Country JOIN League ON Country.id = League.country_id WHERE League.name = 'Italy Serie A';
SELECT T1.team_short_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed = 31 AND T2.buildUpPlayDribbling = 53 AND T2.buildUpPlayPassing = 32;
SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Aaron Doran');
SELECT COUNT(*) FROM Match WHERE country_id IN (SELECT id FROM Country WHERE name = 'Germany') AND league_id IN (SELECT id FROM League WHERE name = '1. Bundesliga' AND country_id IN (SELECT id FROM Country WHERE name = 'Germany')) AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';
SELECT T1.team_short_name FROM Team AS T1 JOIN Match AS T2 ON T1.team_api_id = T2.home_team_api_id WHERE T2.home_team_goal = 10;
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61) AND pa.potential = 61;
SELECT     (SELECT AVG(ball_control) FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Abdou Diallo') -     (SELECT AVG(ball_control) FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Aaron Appindangoye')
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';
SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1;
SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);
SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';
SELECT Country.name FROM Country JOIN League ON Country.id = League.country_id WHERE League.name = 'Belgium Jupiler League';
SELECT League.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Germany';
SELECT player_name FROM Player WHERE player_api_id = (     SELECT player_api_id     FROM Player_Attributes     WHERE overall_rating = (         SELECT MAX(overall_rating)         FROM Player_Attributes     ) );
SELECT COUNT(*) FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE strftime('%Y', Player.birthday)<'1986' AND Player_Attributes.defensive_work_rate = 'high';
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY pa.crossing DESC LIMIT 1;
SELECT pa.heading_accuracy FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Ariel Borysiuk' ORDER BY pa.date DESC LIMIT 1;
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.height > 180 AND pa.volleys > 70;
SELECT DISTINCT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.volleys > 70 AND pa.dribbling > 70;
SELECT COUNT(*) FROM Match JOIN Country ON Match.country_id = Country.id WHERE Country.name = 'Belgium' AND Match.season = '2008/2009';
SELECT pa.long_passing FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.birthday = (SELECT MIN(birthday) FROM Player) ORDER BY pa.date DESC LIMIT 1;
SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Belgium Jupiler League' AND strftime('%Y', Match.date) = '2009' AND strftime('%m', Match.date) = '04';
SELECT League.name FROM League JOIN Match ON League.id = Match.league_id WHERE Match.season = '2008/2009' GROUP BY League.name ORDER BY COUNT(Match.id) DESC LIMIT 1;
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T2.birthday) < '1986';
SELECT     ((pa1.overall_rating - pa2.overall_rating) / pa2.overall_rating) * 100 AS percentage_difference FROM     Player_Attributes pa1 JOIN     Player p1 ON pa1.player_api_id = p1.player_api_id JOIN     Player_Attributes pa2 JOIN     Player p2 ON pa2.player_api_id = p2.player_api_id WHERE     p1.player_name = 'Ariel Borysiuk' AND     p2.player_name = 'Paulin Puel';
SELECT AVG(T2.buildUpPlaySpeed) FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Heart of Midlothian';
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino'
SELECT SUM(T1.crossing) FROM `Player_Attributes` AS T1 JOIN `Player` AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Lennox';
SELECT MAX(T2.chanceCreationPassing), T2.chanceCreationPassingClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Ajax'
SELECT preferred_foot FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Abdou Diallo') LIMIT 1;
SELECT MAX(T1.overall_rating) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Dorlan Pabon';
SELECT AVG(Match.away_team_goal) FROM Match JOIN Team ON Match.away_team_api_id = Team.team_api_id JOIN Country ON Match.country_id = Country.id WHERE Team.team_long_name = 'Parma' AND Country.name = 'Italy';
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = 77 AND pa.date = '2016-06-23' ORDER BY p.birthday LIMIT 1;
SELECT pa.overall_rating FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Aaron Mooy' AND pa.date = '2016-02-04 00:00:00';
SELECT potential FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Francesco Parravicini') AND date = '2010-08-30 00:00:00';
SELECT attacking_work_rate FROM Player_Attributes WHERE player_fifa_api_id = (     SELECT player_fifa_api_id     FROM Player     WHERE player_name = 'Francesco Migliore' ) AND date = '2015-05-01 00:00:00';
SELECT pa.defensive_work_rate FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Kevin Berigaud' AND pa.date = '2013-02-22 00:00:00';
SELECT pa.date FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Kevin Constant' AND pa.crossing = (     SELECT MAX(crossing)     FROM Player_Attributes     WHERE player_api_id = (         SELECT player_api_id         FROM Player         WHERE player_name = 'Kevin Constant'     ) ) ORDER BY pa.date ASC LIMIT 1;
SELECT ta.buildUpPlaySpeedClass FROM Team_Attributes ta JOIN Team t ON ta.team_api_id = t.team_api_id WHERE t.team_long_name = 'Willem II' AND ta.date = '2012-02-22 00:00:00';
SELECT buildUpPlayDribblingClass FROM Team_Attributes WHERE team_api_id = (     SELECT id     FROM Team     WHERE team_short_name = 'LEI' ) AND date = '2015-09-10 00:00:00';
SELECT ta.buildUpPlayPassingClass FROM Team_Attributes ta JOIN Team t ON ta.team_api_id = t.team_api_id WHERE t.team_long_name = 'FC Lorient' AND ta.date = '2010-02-22';
SELECT TA.chanceCreationPassingClass FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'PEC Zwolle' AND TA.date = '2013-09-20 00:00:00';
SELECT TA.chanceCreationCrossingClass FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'Hull City' AND TA.date = '2010-02-22 00:00:00'
SELECT ta.defenceAggressionClass FROM Team_Attributes ta JOIN Team t ON ta.team_api_id = t.team_api_id WHERE t.team_long_name = 'Hannover 96' AND ta.date = '2015-09-10 00:00:00';
SELECT AVG(T2.overall_rating) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Marko Arnautovic' AND T2.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'
SELECT     ((         SELECT overall_rating         FROM Player_Attributes         INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id         WHERE Player.player_name = 'Landon Donovan' AND Player_Attributes.date = '2013-07-12'     ) - (         SELECT overall_rating         FROM Player_Attributes         INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id         WHERE Player.player_name = 'Jordan Bowery' AND Player_Attributes.date = '2013-07-12'     )) / (         SELECT overall_rating         FROM Player_Attributes         INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id         WHERE Player.player_name = 'Landon Donovan' AND Player_Attributes.date = '2013-07-12'     ) * 100 AS percentage
SELECT player_name FROM Player ORDER BY height DESC LIMIT 5;
SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10;
SELECT player_name FROM Player WHERE datetime('now') - datetime(birthday) > '34 years'
SELECT COUNT(Match.home_team_goal) FROM Match JOIN Team ON Match.home_team_api_id = Team.team_api_id JOIN Player ON Team.id = Player.team_id WHERE Player.player_name = 'Aaron Lennon';
SELECT SUM(Match.away_team_goal) FROM Match JOIN Team AS HomeTeam ON Match.home_team_api_id = HomeTeam.team_api_id JOIN Team AS AwayTeam ON Match.away_team_api_id = AwayTeam.team_api_id JOIN Player AS HomePlayer ON HomePlayer.player_api_id = HomeTeam.team_api_id JOIN Player AS AwayPlayer ON AwayPlayer.player_api_id = AwayTeam.team_api_id WHERE (HomePlayer.player_name = 'Daan Smith' OR HomePlayer.player_name = 'Filipe Ferreira') AND (AwayPlayer.player_name = 'Daan Smith' OR AwayPlayer.player_name = 'Filipe Ferreira') AND Match.away_team_api_id = AwayTeam.team_api_id;
Error: 第 10550 个样本有 2 个SQL。
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) LIMIT 10;
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.potential = (SELECT MAX(potential) FROM Player_Attributes);
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.attacking_work_rate = 'high';
SELECT T2.player_name, MAX(T2.birthday) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.finishing = 1 GROUP BY T2.player_name ORDER BY T2.birthday ASC LIMIT 1;
SELECT p.player_name FROM Player p JOIN Country c ON p.player_api_id = c.id WHERE c.name = 'Belgium';
SELECT p.player_name, c.name AS country FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id JOIN Team t ON p.team_api_id = t.team_api_id JOIN Country c ON t.country_id = c.id WHERE pa.vision > 89;
Error: 第 10557 个样本有 2 个SQL。
SELECT T1.team_long_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Slow';
SELECT T1.team_short_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Safe'
SELECT AVG(T2.height) FROM Country AS T1 JOIN Team AS T2 ON T1.id = T2.country_id JOIN Player AS T3 ON T2.id = T3.id WHERE T1.name = 'Italy'
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3;
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-01-01';
SELECT     (SELECT jumping FROM Player_Attributes WHERE player_fifa_api_id = 6) -     (SELECT jumping FROM Player_Attributes WHERE player_fifa_api_id = 23) AS Jumping_Difference;
SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 3;
SELECT COUNT(*) FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes WHERE preferred_foot = 'left') AND crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE preferred_foot = 'left') AND preferred_foot = 'left';
SELECT CAST(SUM(CASE WHEN pa.stamina > 80 AND pa.strength > 80 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*) * 100 FROM Player_Attributes pa;
SELECT Country.name FROM Country JOIN League ON Country.id = League.country_id WHERE League.name = 'Poland Ekstraklasa';
SELECT home_team_goal, away_team_goal FROM Match WHERE date LIKE '2008-09-24%' AND country_id = (SELECT id FROM Country WHERE name = 'Belgium') AND league_id = (SELECT id FROM League WHERE name = 'Jupiler League');
SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_fifa_api_id = (     SELECT player_fifa_api_id     FROM Player     WHERE player_name = 'Alexis Blin' );
SELECT team_long_name, buildUpPlaySpeedClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE team_long_name = 'KSV Cercle Brugge';
SELECT COUNT(*) FROM Match WHERE season = '2015/2016' AND country_id = (SELECT id FROM Country WHERE name = 'Italy') AND league_id = (SELECT id FROM League WHERE name = 'Serie A');
SELECT MAX(Match.home_team_goal) FROM Match JOIN League ON Match.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Netherlands' AND League.name = 'Eredivisie';
SELECT pa.finishing, pa.curve FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.weight = (SELECT MAX(weight) FROM Player)
SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY COUNT(M.id) DESC LIMIT 1;
SELECT T2.team_long_name FROM Match AS T1 JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T1.away_team_goal = (SELECT MAX(away_team_goal) FROM Match)
SELECT player_name FROM Player WHERE player_api_id = (     SELECT player_api_id     FROM Player_Attributes     WHERE overall_rating = (         SELECT MAX(overall_rating)         FROM Player_Attributes     ) );
SELECT (COUNT(P1.id) FILTER (WHERE P.Player.height < 180 AND PA.overall_rating > 70) * 100 / COUNT(P1.id)) AS Percentage FROM Player P, Player_Attributes PA, Player P1 WHERE P.player_api_id = PA.player_api_id AND P1.player_api_id = PA.player_api_id;
SELECT     (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID END) -      COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID END)) /     (COUNT(CASE WHEN SEX = 'M' THEN ID END)) * 100 AS Deviation_Percentage FROM     Patient
SELECT     (COUNT(CASE WHEN YEAR(Birthday) > 1930 THEN ID END) * 100.0 / COUNT(ID)) AS Percentage_Female_Born_After_1930 FROM     Patient WHERE     SEX = 'F';
SELECT     COUNT(CASE WHEN Admission = '+' THEN ID END) * 100.0 / COUNT(ID) AS Inpatient_Percentage FROM     Patient WHERE     YEAR(Birthday) BETWEEN 1930 AND 1940;
Error: 第 10581 个样本有 2 个SQL。
SELECT Patient.Diagnosis, Laboratory.Date FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.ID = '30609';
SELECT p.SEX, p.Birthday, e.Examination_Date, e.Symptoms FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.ID = '163109';
SELECT Patient.ID, SEX, Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH > 500;
SELECT P.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS Age FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.RVVT = '+'
SELECT P.ID, P.SEX, P.Diagnosis FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID WHERE E.Thrombosis = 2;
SELECT p.ID, p.SEX, p.Birthday, p.Description, p.First_Date, p.Admission, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE YEAR(p.Birthday) = 1937 AND l.T_CHO >= 250;
SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALB < 3.5;
SELECT (COUNT(CASE WHEN P.SEX = 'F' AND L.TP < '6.0' OR L.TP > '8.5' THEN P.ID END) * 100.0 / COUNT(P.ID)) AS Percentage FROM Patient P JOIN Laboratory L ON P.ID = L.ID;
SELECT AVG(e.aCL_IgG) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Admission = '+' AND (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) >= 50;
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND YEAR(Description) = 1997 AND Admission = '-';
SELECT MIN(YEAR(First_Date) - YEAR(Birthday)) AS Age FROM Patient;
SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.Thrombosis = '1' AND p.SEX = 'F' AND YEAR(e.Examination_Date) = 1997;
SELECT     MAX(YEAR(CURRENT_DATE) - YEAR(P.Birthday)) - MIN(YEAR(CURRENT_DATE) - YEAR(P.Birthday)) AS AgeGap FROM     Patient P JOIN     Laboratory L ON P.ID = L.ID WHERE     L.TG >= 200
SELECT E.Symptoms, P.Diagnosis FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Birthday = (     SELECT MIN(Birthday)     FROM Patient     WHERE ID IN (         SELECT ID         FROM Examination     ) );
SELECT COUNT(DISTINCT T1.ID) / 12 AS Average_Male_Patients_Per_Month FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.Date BETWEEN '1998-01-01' AND '1998-12-31';
SELECT T3.Date, (YEAR(T2.First_Date) - YEAR(T2.Birthday)) AS Age FROM (     SELECT T1.ID, T1.First_Date, T1.Birthday     FROM Patient T1     WHERE T1.Diagnosis = 'SJS'     ORDER BY T1.Birthday ASC     LIMIT 1 ) T2 JOIN Laboratory T3 ON T2.ID = T3.ID WHERE T3.Date = (     SELECT MIN(Date)     FROM Laboratory     WHERE ID = T2.ID );
SELECT     SUM(CASE WHEN Patient.SEX = 'M' AND Laboratory.UA <= 8.0 THEN 1 ELSE 0 END) /     SUM(CASE WHEN Patient.SEX = 'F' AND Laboratory.UA <= 6.5 THEN 1 ELSE 0 END) AS Ratio FROM     Patient JOIN     Laboratory ON Patient.ID = Laboratory.ID;
SELECT COUNT(DISTINCT P.ID) FROM Patient P LEFT JOIN Examination E ON P.ID = E.ID WHERE E.ID IS NULL OR DATEDIFF(E.Examination_Date, P.First_Date) >= 365;
SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE YEAR(P.Birthday) + 18 <= YEAR('1990-01-01') AND E.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.T_BIL > 2.0;
SELECT Diagnosis, COUNT(Diagnosis) as count FROM Examination WHERE Examination_Date BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY count DESC LIMIT 1;
SELECT AVG(TIMESTAMPDIFF(YEAR, Birthday, '1991-10-01')) AS Average_Age FROM Patient WHERE ID IN (     SELECT ID     FROM Laboratory     WHERE Date BETWEEN '1991-10-01' AND '1991-10-31' )
SELECT     (YEAR(E.Examination_Date) - YEAR(P.Birthday)) AS Age,     P.Diagnosis FROM     Examination E JOIN     Patient P ON E.ID = P.ID WHERE     E.HGB = (SELECT MAX(HGB) FROM Examination)
SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';
SELECT     CASE         WHEN T-CHO < 250 THEN 'Normal'         ELSE 'Not Normal'     END AS Cholesterol_Status FROM     Laboratory WHERE     ID = 2927464 AND     Date = '1995-09-04';
SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' ORDER BY ID LIMIT 1;
SELECT E.aCL_IgM FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Diagnosis = 'SLE' AND P.Description = '1994-02-19' AND E.Examination_Date = '1993-11-12';
SELECT P.SEX FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GPT = '9' AND L.Date = '1992-06-12';
SELECT     TIMESTAMPDIFF(YEAR, P.Birthday, L.Date) - IF(DAYOFYEAR(P.Birthday) > DAYOFYEAR(L.Date), 1, 0) AS Age FROM     Laboratory L JOIN     Patient P ON L.ID = P.ID WHERE     L.UA = 8.4 AND L.Date = '1991-10-21';
SELECT COUNT(L.ID) FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.First_Date = '1991-06-13' AND P.Diagnosis = 'SJS' AND YEAR(L.Date) = 1995;
SELECT p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Diagnosis = 'SLE' AND e."Examination Date" = '1997-01-27' AND p."First Date" = (SELECT MIN("First Date") FROM Patient WHERE ID = p.ID);
SELECT E.Symptoms FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Birthday = '1959-03-01' AND E.Examination_Date = '1993-09-27';
SELECT (SUM(case when T.Birthday = '1959-02-18' and T.Date like '1981-11-%' then T.`T-CHO` else 0 end) - SUM(case when T.Birthday = '1959-02-18' and T.Date like '1981-12-%' then T.`T-CHO` else 0 end)) / SUM(case when T.Birthday = '1959-02-18' and T.Date like '1981-11-%' then T.`T-CHO` else 0 end) as decrease_rate FROM Laboratory T;
SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Diagnosis = 'Behcet' AND Examination.Examination_Date BETWEEN '1997-01-01' AND '1997-12-31';
Error: 第 10616 个样本有 2 个SQL。
Error: 第 10617 个样本有 2 个SQL。
SELECT COUNT(*) FROM `Examination` JOIN `Patient` ON `Examination`.`ID` = `Patient`.`ID` WHERE `Examination`.`Thrombosis` = 2 AND `Examination`.`ANA Pattern` = 'S' AND `Examination`.`aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM `Examination`)
SELECT     (COUNT(CASE WHEN UA <= 6.5 THEN 1 END) * 100 / COUNT(*)) AS Percentage FROM     Laboratory WHERE     U_PRO > 0 AND U_PRO < 30;
SELECT (SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) * 100 / COUNT(*)) AS Percentage FROM Patient WHERE SEX = 'M' AND YEAR(First_Date) = 1981;
SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Admission = '-' AND L.Date LIKE '1991-10%' AND L.T-BIL < 2.0;
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND BIRTHDAY BETWEEN '1980-01-01' AND '1989-12-31' AND ID NOT IN (SELECT ID FROM Examination WHERE `ANA Pattern` = 'p');
SELECT p.SEX FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.Diagnosis = 'PSS' AND l.CRP > 2 AND l.CRE = 1 AND l.LDH = 123;
SELECT AVG(Laboratory.ALB) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND Laboratory.PLT > 400 AND Patient.Diagnosis = 'SLE';
SELECT MAX(E.Symptoms) AS Most_Common_Sign FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Diagnosis = 'SLE';
SELECT Patient.Description, Patient.Diagnosis, MIN(Patient.First_Date) FROM Patient WHERE Patient.ID = 48473;
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE YEAR(T2.Date) = '1997' AND (T2.TP < 6 OR T2.TP > 8.5);
SELECT (COUNT(DISTINCT CASE WHEN E.Symptoms LIKE '%thrombocytopenia%' AND P.Diagnosis LIKE '%SLE%' THEN E.ID END) * 100.0 / COUNT(DISTINCT CASE WHEN P.Diagnosis LIKE '%SLE%' THEN E.ID END)) AS Proportion FROM Examination E JOIN Patient P ON E.ID = P.ID;
SELECT (COUNT(CASE WHEN SEX = 'F' THEN 1 END) * 100 / COUNT(ID)) FROM Patient WHERE YEAR(Birthday) = 1980 AND Diagnosis = 'RA';
SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND e.Examination_Date BETWEEN '1995' AND '1997' AND p.Diagnosis = 'BEHCET' AND p.Admission = '-';
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'F' AND l.WBC < 3.5;
SELECT DATEDIFF(e.ExaminationDate, p.FirstDate) AS WaitingTime FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.ID = 821298 LIMIT 1;
SELECT     CASE         WHEN T2.SEX = 'M' AND T1.UA > 8.0 THEN 'Yes'         WHEN T2.SEX = 'F' AND T1.UA > 6.5 THEN 'Yes'         ELSE 'No'     END AS Normal_Uric_Acid FROM     Laboratory AS T1 JOIN     Patient AS T2 ON T1.ID = T2.ID WHERE     T2.ID = 57266;
SELECT Laboratory.Date FROM Laboratory WHERE Laboratory.ID = '48473' AND Laboratory.GOT >= 60;
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GOT < 60 AND YEAR(Laboratory.Date) = 1994;
SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND MAX(Laboratory.GPT) >= 60;
SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GPT > 60 ORDER BY P.Birthday ASC;
SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500;
SELECT P.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS Age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.LDH BETWEEN 600 AND 800;
Error: 第 10641 个样本有 3 个SQL。
SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = '1982-04-01' AND l.ALP < 300;
SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TP < 6.0;
SELECT (TP - 8.5) AS Deviation FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND Laboratory.TP > 8.5;
SELECT Patient.ID, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND (Laboratory.ALB <= 3.5 OR Laboratory.ALB >= 5.5) ORDER BY Patient.Birthday DESC;
SELECT Patient.ID, Patient.SEX, Laboratory.ALB FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE YEAR(Patient.Birthday) = '1982' AND Laboratory.ALB BETWEEN 3.5 AND 5.5;
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') AS Percentage FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'F' AND l.UA > 6.5;
SELECT AVG(l-UA) AS Average_UA_Index FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.UA < CASE WHEN p.SEX = 'M' THEN 8.0 ELSE 6.5 END GROUP BY l.ID HAVING COUNT(*) = (SELECT COUNT(*) FROM Laboratory WHERE ID = l.ID GROUP BY ID ORDER BY Date DESC LIMIT 1)
SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.UN = 29;
SELECT P.ID, P.SEX, P.Birthday FROM Patient P WHERE P.Diagnosis = 'RA' AND EXISTS (     SELECT 1     FROM Laboratory L     WHERE L.ID = P.ID     AND L.UN < 30 );
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.CRE >= 1.5;
SELECT     (SELECT COUNT(*) FROM Patient WHERE SEX = 'M' AND ID IN (SELECT ID FROM Laboratory WHERE CRE >= 1.5)) >     (SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND ID IN (SELECT ID FROM Laboratory WHERE CRE >= 1.5)) AS Result;
SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.T-BIL = (SELECT MAX(T-BIL) FROM Laboratory);
SELECT P.SEX, COUNT(P.ID) AS Num_Patients FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.T_BIL >= 2.0 GROUP BY P.SEX;
SELECT P.ID, L.T_CHO FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Birthday = (SELECT MIN(Birthday) FROM Patient) AND L.T_CHO = (SELECT MAX(T_CHO) FROM Laboratory);
SELECT AVG(DATEDIFF(CURRENT_DATE, Birthday) / 365) AS Average_Age FROM Patient WHERE SEX = 'M' AND ID IN (     SELECT ID FROM Laboratory WHERE T-CHO >= 250 );
SELECT P.ID, P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TG > 300;
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TG >= 200 AND (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) > 50;
SELECT DISTINCT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Admission = '-' AND L.CPK < 250;
SELECT COUNT(*) FROM Patient WHERE SEX = 'M' AND YEAR(Birthday) BETWEEN 1936 AND 1956 AND ID IN (     SELECT ID FROM Laboratory WHERE CPK >= 250 );
SELECT P.ID, P.SEX, (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS Age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU >= 180 AND L.T_CHO < 250;
SELECT P.ID, L.GLU FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Description >= '1991-01-01' AND L.GLU < 180 GROUP BY P.ID;
SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.WBC <= 3.5 OR L.WBC >= 9.0 GROUP BY P.SEX, P.ID, P.Birthday ORDER BY DATE_PART('year', AGE(P.Birthday)) ASC;
SELECT Patient.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday)) AS Age, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RBC < 3.5;
SELECT P.ID, P.Admission FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F' AND TIMESTAMPDIFF(YEAR, P.Birthday, CURRENT_TIMESTAMP) >= 50 AND (L.RBC <= 3.5 OR L.RBC >= 6.0);
SELECT Patient.ID, Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Admission = '-' AND Examination.HGB < 10;
SELECT P.ID, P.SEX FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.HGB > 10 AND L.HGB < 17 ORDER BY P.Birthday LIMIT 1;
SELECT P.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS Age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.HCT >= 52 GROUP BY P.ID HAVING COUNT(P.ID) > 2;
SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;
SELECT     (SELECT COUNT(*)      FROM Laboratory      WHERE PLT < 100) AS LowerThanNormal,     (SELECT COUNT(*)      FROM Laboratory      WHERE PLT > 400) AS HigherThanNormal
SELECT p.ID, p.SEX, p.Birthday, p.Description, l.Date, l.PLT FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.Date LIKE '1984%' AND (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) < 50 AND l.PLT BETWEEN 100 AND 400;
SELECT     (COUNT(CASE WHEN E.PT >= 14 AND P.SEX = 'F' THEN 1 END) * 1.0 / COUNT(CASE WHEN E.PT >= 14 THEN 1 END)) * 100 AS Percentage_Female_Abnormal_PT FROM     Examination E JOIN     Patient P ON E.ID = P.ID WHERE     DATE_PART('year', AGE(P.Birthday, CURRENT_TIMESTAMP)) > 55;
SELECT p.ID, p.SEX, p.Birthday, p.Description, p.First_Date, p.Admission, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE YEAR(p.First_Date) > 1992 AND l.PT < 14;
SELECT COUNT(*) FROM Examination WHERE `Examination Date` > '1997-01-01' AND APTT >= 45;
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE E.Thrombosis = 3 AND L.APTT > 45;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.WBC BETWEEN 3.5 AND 9.0 AND (l.FG <= 150 OR l.FG >= 450);
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday > '1980-01-01' AND (T2.FG < 150 OR T2.FG > 450);
SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.U_PRO >= 30;
SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.U_PRO BETWEEN 0 AND 30 AND Patient.Diagnosis = 'SLE';
SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.aCL_IgG < 900 AND e.Symptoms = 'abortion';
SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.IGG BETWEEN 900 AND 2000 AND e.Symptoms IS NOT NULL;
SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.IGA BETWEEN 80 AND 500 GROUP BY P.ID, P.Diagnosis ORDER BY MAX(L.IGA) DESC LIMIT 1;
SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE IGA BETWEEN 80 AND 500 AND YEAR(Patient.`First Date`) >= 1990;
SELECT Patient.Diagnosis, COUNT(Patient.ID) as NumOfPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.IGM NOT BETWEEN 40 AND 400 GROUP BY Patient.Diagnosis ORDER BY NumOfPatients DESC LIMIT 1;
SELECT COUNT(*) FROM Patient WHERE ID IN (     SELECT ID     FROM Laboratory     WHERE (CRP LIKE '+' OR CRP LIKE '-' OR CRP < 1.0) ) AND Description IS NULL;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.CRP NOT IN ('+-', '-') AND l.CRP >= 1.0 AND TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) < 18;
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE E.KCT = '+' AND L.RF IN ('-', '+-');
SELECT p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE YEAR(p.Birthday) > 1995 AND l.RA IN ('-', '+-');
SELECT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.RF < 20 AND (YEAR(CURDATE()) - YEAR(P.Birthday)) > 60;
SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.ID IN (SELECT ID FROM Laboratory WHERE RF < 20) AND e.Thrombosis = '0';
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.ANA_Pattern = 'P' AND P.C3 > 35;
SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.HCT < 29 OR E.HCT > 52 ORDER BY E.`aCL IgA` DESC LIMIT 1;
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE E.Diagnosis = 'Blood Clots in veins' AND L.C4 > 10;
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND (T2.RNP = '-' OR T2.RNP = '+-');
SELECT P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.RNP NOT IN ('-', '+-') ORDER BY P.Birthday DESC LIMIT 1;
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE (P.SM IN ('-', '+-') OR P.SM = 'negative' OR P.SM = '0' OR P.SM = '+-') AND E.Thrombosis = '1';
SELECT P.ID FROM Patient P JOIN (     SELECT ID     FROM Laboratory     WHERE SM NOT IN ('-', '+-')     GROUP BY ID ) L ON P.ID = L.ID ORDER BY P.Birthday DESC LIMIT 3;
SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Examination_Date >= '1997-01-01' AND Examination.SC170 IN ('-', '+-');
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.Symptoms = 'vertigo' AND P.SEX = 'M' AND E.SC170 IN ('-', '+-');
SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.SSA IN ('-','+-') AND YEAR(P.`First Date`) < 1990;
SELECT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.SSA NOT IN ('-', '+-') ORDER BY P.`First Date` LIMIT 1;
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.SSB IN ('-', '0') AND P.Diagnosis = 'SLE';
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.Symptoms IS NOT NULL AND P.SSB IN ('-', '+-');
SELECT COUNT(*) FROM Patient WHERE SEX = 'M' AND ID IN (     SELECT ID     FROM Laboratory     WHERE CENTROMEA IN ('-', '+-') AND SSB IN ('-', '+-') );
SELECT DISTINCT p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.DNA >= 8;
SELECT COUNT(DISTINCT ID) FROM Patient WHERE DNA < 8 AND Description IS NULL;
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.DNA-II >= 8 AND p.Admission = '+';
SELECT MULTIPLY(DIVIDE((SELECT COUNT(T1.ID) FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.GOT >= 60 AND T2.Diagnosis = 'SLE'), (SELECT COUNT(T1.ID) FROM Examination AS T1 WHERE T1.GOT >= 60)), 1.0);
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.GOT < 60;
SELECT MIN(P.Birthday) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GOT >= 60;
SELECT TOP 3 Birthday FROM (     SELECT ID, GPT, Birthday     FROM Laboratory     JOIN Patient ON Laboratory.ID = Patient.ID     WHERE GPT < 60 ) AS SubQuery WHERE GPT = (SELECT MAX(GPT) FROM (     SELECT ID, MAX(GPT) AS GPT     FROM Laboratory     WHERE GPT < 60     GROUP BY ID ) AS GPTMax) ORDER BY GPT DESC;
SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE GOT < 60 AND SEX = 'M';
SELECT MIN(P.First_Date) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.LDH < 500 GROUP BY P.ID ORDER BY MAX(L.LDH) DESC LIMIT 1;
SELECT Lab.ID, Lab.Date FROM Laboratory AS Lab JOIN Patient AS Pat ON Lab.ID = Pat.ID WHERE Lab.LDH >= 500 AND Pat.First_Date = (SELECT MAX(First_Date) FROM Patient)
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.ALP >= 300 AND p.Admission = '+';
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.ALP < 300;
SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TP < 6.0;
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Diagnosis = 'SJS' AND l.TP >= 6.0 AND l.TP <= 8.5;
SELECT E.Examination_Date FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE L.ALB >= 3.5 AND L.ALB <= 5.5 ORDER BY L.ALB DESC LIMIT 1;
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.ALB BETWEEN 3.5 AND 5.5 AND l.TP BETWEEN 6.0 AND 8.5;
SELECT E.aCL_IgG, E.aCL_IgM, E.aCL_Iga FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE P.SEX = 'F' AND L.UA > 6.50 ORDER BY L.UA DESC LIMIT 1;
SELECT MAX(examination.ANA) FROM Examination examination JOIN Laboratory laboratory ON examination.ID = laboratory.ID WHERE laboratory.CRE < 1.5;
SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.CRE < 1.5 ORDER BY Examination.aCL_IgA DESC LIMIT 1;
SELECT COUNT(*) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE e.ANA LIKE '%P%' AND l.T_BIL >= 2.0;
SELECT E.ANA FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE L.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0);
Error: 第 10726 个样本有 2 个SQL。
Error: 第 10727 个样本有 2 个SQL。
SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.TG < 200 AND e.Symptoms IS NOT NULL;
SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TG < 200 GROUP BY P.ID, P.Diagnosis ORDER BY MAX(L.TG) DESC LIMIT 1;
SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Thrombosis = 0 AND Laboratory.CPK < 250;
SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.KCT = '+' OR e.RVVT = '+' OR e.LAC = '+' AND p.ID IN (SELECT ID FROM Laboratory WHERE CPK < 250);
SELECT MIN(P.Birthday) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU > 180;
SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.ID IN (SELECT ID FROM Laboratory WHERE GLU < 180) AND e.Thrombosis = 0;
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '+' AND l.WBC BETWEEN 3.5 AND 9.0;
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Diagnosis = 'SLE' AND l.WBC BETWEEN 3.5 AND 9.0;
SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE (RBC <= 3.5 OR RBC >= 6.0) AND Admission = '-';
SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Diagnosis IS NOT NULL AND e.PLT > 100 AND e.PLT < 400;
SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.First_Date, Patient.Admission, Patient.Diagnosis, Laboratory.PLT FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.PLT > 100 AND Laboratory.PLT < 400 AND Patient.Diagnosis = 'MCTD';
SELECT AVG(PT) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'M' AND Examination.PT < 14;
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.Thrombosis IN (1, 2) AND E.PT < 14;
SELECT T2.major_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'College of Engineering';
SELECT member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design';
SELECT COUNT(*) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';
SELECT member.phone FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women\'s Soccer';
SELECT COUNT(*) FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women\'s Soccer' AND member.t_shirt_size = 'Medium';
SELECT e.event_name, COUNT(a.link_to_event) as attendance FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_name ORDER BY attendance DESC LIMIT 1;
Error: 第 10748 个样本有 2 个SQL。
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean';
SELECT COUNT(*) FROM attendance JOIN event ON attendance.link_to_event = event.event_id JOIN member ON attendance.link_to_member = member.member_id WHERE YEAR(event.event_date) = 2019 AND member.first_name = 'Sacha' AND member.last_name = 'Harrison';
SELECT COUNT(event.event_id) FROM event JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.type = 'Meeting' GROUP BY event.event_id HAVING COUNT(attendance.link_to_member) > 10;
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id, e.event_name HAVING COUNT(a.link_to_member) > 20;
SELECT AVG(attendance_count) AS average_attendance FROM (     SELECT COUNT(a.link_to_member) AS attendance_count     FROM event e     JOIN attendance a ON e.event_id = a.link_to_event     WHERE e.type = 'Meeting' AND YEAR(e.event_date) = 2020     GROUP BY e.event_id ) subquery;
SELECT e.expense_description FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.link_to_event IN (SELECT event_id FROM event) ORDER BY e.cost DESC LIMIT 1;
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud';
SELECT last_name FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Law and Constitutional Studies');
SELECT T3.county FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code JOIN zip_code AS T3 ON T2.state = T3.state WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'
SELECT T2.college FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt';
SELECT SUM(amount) FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President';
SELECT SUM(budget.spent) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food' AND event.event_name = 'September Meeting';
SELECT T2.city, T2.state FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President';
SELECT member.first_name, member.last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';
SELECT budget.spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Advertisement';
SELECT T2.department FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Pierce' AND T1.last_name = 'Guidi'
SELECT SUM(budget.amount) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';
SELECT e.expense_id, e.expense_description, e.approved FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08';
SELECT AVG(T.cost) AS average_cost FROM (     SELECT e.cost     FROM expense e     JOIN member m ON e.link_to_member = m.member_id     WHERE m.first_name = 'Elijah' AND m.last_name = 'Allen'     AND (MONTH(e.expense_date) = 9 OR MONTH(e.expense_date) = 10) ) T;
SELECT     (SELECT SUM(spent) FROM budget      JOIN event ON budget.link_to_event = event.event_id      WHERE YEAR(event.event_date) = 2019) -     (SELECT SUM(spent) FROM budget      JOIN event ON budget.link_to_event = event.event_id      WHERE YEAR(event.event_date) = 2020)
SELECT location FROM event WHERE event_name = 'Spring Budget Review';
SELECT cost FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event_name = 'Posters' AND event_date = '2019-09-04';
WITH BiggestBudget AS (     SELECT budget_id, remaining     FROM budget     WHERE category = 'Food'     ORDER BY amount DESC     LIMIT 1 ) SELECT remaining FROM BiggestBudget;
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';
Error: 第 10774 个样本有 2 个SQL。
SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';
SELECT zip_code.county FROM zip_code JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Adela' AND member.last_name = 'O'Gallagher';
SELECT COUNT(*) FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'November Meeting') AND remaining < 0;
SELECT SUM(amount) FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'September Speaker');
SELECT e.status FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE ex.expense_description = 'Post Cards, Posters' AND ex.expense_date = '2019-08-20';
SELECT T2.major_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Human Development and Family Studies' AND member.t_shirt_size = 'Large';
SELECT T2.type FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson';
SELECT m.major_name FROM member AS m JOIN major AS ma ON m.link_to_major = ma.major_id WHERE m.position = 'Vice President'
SELECT T1.state FROM zip_code AS T1 JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison';
Error: 第 10785 个样本有 2 个SQL。
SELECT i.date_received FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.first_name = 'Connor' AND m.last_name = 'Hilton' AND i.source = 'Dues';
SELECT m.first_name, m.last_name FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.source = 'Dues' ORDER BY i.date_received LIMIT 1;
SELECT     CASE         WHEN (SELECT SUM(amount) FROM budget WHERE category = 'Advertisement' AND link_to_event IN (SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff')) >            (SELECT SUM(amount) FROM budget WHERE category = 'Advertisement' AND link_to_event IN (SELECT event_id FROM event WHERE event_name = 'October Meeting')) THEN 1         ELSE 0     END;
Error: 第 10789 个样本有 2 个SQL。
Error: 第 10790 个样本有 2 个SQL。
SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange' AND state = 'Virginia';
SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT T3.city, T3.county, T3.state FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code JOIN (     SELECT zip_code, city, county, state     FROM zip_code     GROUP BY zip_code ) AS T3 ON T2.zip_code = T3.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth';
SELECT e.expense_description FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.remaining = (     SELECT MIN(remaining)     FROM budget );
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';
SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY COUNT(member.member_id) DESC LIMIT 1;
SELECT T2.major_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event GROUP BY e.event_name ORDER BY SUM(b.amount) DESC LIMIT 1;
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position = 'Vice President';
SELECT COUNT(*) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';
SELECT income.date_received FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason';
SELECT COUNT(*) FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland';
SELECT COUNT(*) FROM attendance WHERE link_to_member IN (     SELECT member_id     FROM member     WHERE phone = "954-555-6240" );
SELECT first_name, last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' GROUP BY e.event_name ORDER BY SUM(b.spent) / SUM(b.amount) DESC LIMIT 1;
SELECT COUNT(*) FROM member WHERE position = 'President';
SELECT MAX(spent) FROM budget;
SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;
SELECT SUM(spent) FROM budget WHERE category = 'Food';
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member GROUP BY m.member_id HAVING COUNT(a.link_to_event) > 7;
SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE ma.major_name = 'Interior Design' AND e.event_name = 'Community Theater';
SELECT first_name, last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';
SELECT SUM(income.amount) FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';
SELECT m.first_name, m.last_name FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.amount > 40;
SELECT SUM(cost) FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff';
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id JOIN budget b ON e.event_id = b.link_to_event WHERE e.event_name = 'Yearly Kickoff';
Error: 第 10817 个样本有 2 个SQL。
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.spent IS NOT NULL GROUP BY e.event_name ORDER BY SUM(b.spent) ASC LIMIT 1;
SELECT (SUM(case when T1.event_name = 'Yearly Kickoff' then T5.cost else 0 end) / SUM(T5.cost)) * 100 as Percentage FROM event AS T1 JOIN budget AS T4 ON T1.event_id = T4.link_to_event JOIN expense AS T5 ON T4.budget_id = T5.link_to_budget
SELECT     (SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Finance') /     (SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics')
SELECT source, SUM(amount) as total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY total_amount DESC LIMIT 1;
SELECT first_name, last_name, email FROM member WHERE position = 'Secretary';
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';
SELECT COUNT(*) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND YEAR(event.event_date) = 2019;
SELECT COUNT(event.event_id), major.major_name FROM attendance JOIN event ON attendance.link_to_event = event.event_id JOIN member ON attendance.link_to_member = member.member_id JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi';
SELECT AVG(budget.spent) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food' AND event.event_status = 'Closed';
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Advertisement' GROUP BY e.event_name ORDER BY SUM(b.spent) DESC LIMIT 1;
SELECT COUNT(*) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND attendance.link_to_member IN (     SELECT member_id     FROM member     WHERE first_name = 'Maya' AND last_name = 'Mclean' );
SELECT (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) * 100 / COUNT(event_id)) AS percentage FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31';
SELECT e.cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'September Speaker' AND e.expense_description = 'Posters';
SELECT t_shirt_size, COUNT(t_shirt_size) as count FROM member GROUP BY t_shirt_size ORDER BY count DESC LIMIT 1;
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' AND b.remaining < 0 GROUP BY e.event_name ORDER BY MIN(b.remaining) ASC LIMIT 1;
SELECT e.expense_description, SUM(e.cost) as total_value FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND e.approved = true GROUP BY e.expense_description;
SELECT category, amount FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'April Speaker') ORDER BY amount ASC;
Error: 第 10835 个样本有 2 个SQL。
SELECT link_to_event, amount FROM budget WHERE category = 'Advertising' ORDER BY amount DESC LIMIT 3;
SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking';
SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20';
SELECT m.first_name, m.last_name, SUM(e.cost) AS total_cost FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN expense e ON a.link_to_event = e.link_to_budget WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.first_name, m.last_name;
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';
SELECT DISTINCT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.t_shirt_size = 'X-Large';
SELECT T1.zip FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50;
SELECT T2.major_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Phillip' AND T1.last_name = 'Cullen';
SELECT member.position FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';
SELECT DISTINCT e.type FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 30;
SELECT DISTINCT e.category FROM event e WHERE e.location = 'MU 215';
SELECT type FROM event WHERE event_date = '2020-03-24T12:00:00';
SELECT m.major_name FROM major m JOIN member mb ON m.major_id = mb.link_to_major WHERE mb.position = 'Vice President';
SELECT (SUM(CASE WHEN m.position = 'Member' AND ma.major_name = 'Mathematics' THEN 1 ELSE 0 END) * 100 / COUNT(m.member_id)) AS Percentage_Mathematics_Members FROM member m JOIN major ma ON m.link_to_major = ma.major_id;
SELECT e.category FROM event e WHERE e.location = 'MU 215';
SELECT COUNT(*) FROM income WHERE amount = 50;
SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';
SELECT COUNT(*) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences';
SELECT member.last_name, major.department, major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215' AND e.type = 'Guest Speaker' AND b.spent = 0;
SELECT T3.city, T3.state FROM major AS T1 JOIN member AS T2 ON T1.major_id = T2.link_to_major JOIN zip_code AS T3 ON T2.zip = T3.zip_code WHERE T1.department = 'Electrical and Computer Engineering Department' AND T2.position = 'Member';
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE e.type = 'Social' AND m.position = 'Vice President' AND m.zip = (     SELECT z.zip_code     FROM zip_code z     WHERE z.city = 'Washington' AND z.state = 'IN' AND z.short_state = 'IN' AND z.county = 'Marion' AND z.type = 'STANDARD' ) AND e.location = '900 E. Washington St.';
SELECT member.last_name, member.position FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10';
SELECT m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE m.position = 'Member' AND e.event_name = 'Women''s Soccer';
SELECT (COUNT(CASE WHEN i.amount = 50 THEN 1 END) * 100 / COUNT(m.member_id)) AS percentage FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE m.t_shirt_size = 'Medium' AND m.position = 'Member';
SELECT DISTINCT state FROM student_club.zip_code WHERE type = 'PO Box';
SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND state = 'Puerto Rico' AND county = 'San Juan Municipio'
SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';
SELECT DISTINCT m.first_name, m.last_name, e.event_name, e.event_date FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id JOIN income i ON m.member_id = i.link_to_member WHERE i.amount > 50;
SELECT member.first_name, member.last_name, attendance.link_to_event FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19';
SELECT T2.college FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Katy' AND T1.link_to_major = 'rec1N0upiVLy5esTO';
SELECT member.phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND major.college = 'College of Agriculture and Applied Sciences';
Error: 第 10869 个样本有 2 个SQL。
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'education' AND major.department = 'College of Education & Human Services';
SELECT (COUNT(CASE WHEN b.remaining < 0 THEN b.budget_id END) * 100.0 / COUNT(b.budget_id)) AS Percentage_Over_Budget FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.status = 'completed';
SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';
SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50;
SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';
SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0 / COUNT(zip_code)) AS Percentage_PO_Boxes FROM zip_code;
SELECT e.event_name, e.location FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 0;
SELECT e.event_name, e.event_date FROM event e JOIN expense ex ON e.event_id = ex.link_to_event WHERE ex.expense_description = 'Pizza' AND ex.cost > 50 AND ex.cost < 100;
SELECT m.first_name, m.last_name, ma.major_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > 100;
SELECT T1.city, T1.county FROM zip_code AS T1 JOIN event AS T2 ON T1.city = T2.location WHERE (SELECT COUNT(*) FROM income WHERE link_to_event = T2.event_id) > 40;
SELECT m.first_name, m.last_name, SUM(e.cost) as total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY e.link_to_member HAVING COUNT(DISTINCT e.link_to_budget) > 1 ORDER BY total_cost DESC LIMIT 1;
Error: 第 10881 个样本有 2 个SQL。
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Parking' AND b.spent < (SELECT AVG(spent) FROM budget WHERE category = 'Parking')
Error: 第 10883 个样本有 2 个SQL。
SELECT b.budget_id, b.category, b.spent, b.remaining, b.amount, b.event_status FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description = 'Water, chips, cookies' GROUP BY b.budget_id ORDER BY b.amount DESC LIMIT 1;
SELECT m.first_name, m.last_name FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id, m.first_name, m.last_name ORDER BY SUM(e.cost) DESC LIMIT 5;
SELECT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense) GROUP BY m.member_id HAVING COUNT(*) > 1;
Error: 第 10887 个样本有 2 个SQL。
SELECT T1.major_name, T1.department FROM major AS T1 JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Garrett' AND T2.last_name = 'Gerke';
SELECT m.first_name, m.last_name, e.cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Water, Veggie tray, supplies';
SELECT member.last_name, member.phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';
SELECT T1.category, T1.amount FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'January Speaker';
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Food';
SELECT member.first_name, member.last_name, income.amount FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.date_received = '2019-09-09';
SELECT b.category FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description = 'Posters';
SELECT member.first_name, member.last_name, major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';
SELECT e.event_name, SUM(b.spent) as total_spent FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name;
Error: 第 10897 个样本有 2 个SQL。
SELECT member.first_name, member.last_name, member.position FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND zip_code.zip_code = 28092;
SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium';
SELECT     (SELECT COUNT(*) FROM customers WHERE Currency = 'EUR') /     (SELECT COUNT(*) FROM customers WHERE Currency = 'CZK') AS Ratio_EUR_to_CZK;
SELECT CustomerID, SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE Date BETWEEN 201201 AND 201212 AND SUBSTRING(CustomerID,1,3) = 'LAM' GROUP BY CustomerID ORDER BY TotalConsumption ASC LIMIT 1;
SELECT AVG(t.Consumption) / 12 AS Average_Monthly_Consumption FROM (     SELECT CustomerID, SUM(Amount * Price) AS Consumption     FROM transactions_1k     WHERE Date BETWEEN '20130101' AND '20131231'     GROUP BY CustomerID ) t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Segment = 'SME';
SELECT c.CustomerID FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Currency = 'CZK' AND t.Date BETWEEN '20110101' AND '20111231' GROUP BY c.CustomerID ORDER BY SUM(t.Amount) DESC LIMIT 1;
SELECT COUNT(*) FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Segment = 'KAM' AND y.Date BETWEEN 201201 AND 201212 AND y.Consumption < 30000;
SELECT     (SELECT SUM(t.Amount)      FROM transactions_1k t      JOIN customers c ON t.CustomerID = c.CustomerID      WHERE c.Currency = 'CZK' AND            t.Date BETWEEN '20120101' AND '20121231'     ) -     (SELECT SUM(t.Amount)      FROM transactions_1k t      JOIN customers c ON t.CustomerID = c.CustomerID      WHERE c.Currency = 'EUR' AND            t.Date BETWEEN '20120101' AND '20121231'     ) AS DifferenceInConsumption;
SELECT     YEAR(t.Date) AS Year,     SUM(t.Amount * t.Price) AS TotalGasUseEUR FROM     transactions_1k t JOIN     customers c ON t.CustomerID = c.CustomerID WHERE     c.Currency = 'EUR' GROUP BY     YEAR(t.Date) ORDER BY     TotalGasUseEUR DESC LIMIT 1;
SELECT Segment, SUM(Consumption) as TotalConsumption FROM (     SELECT c.Segment, ym.Consumption     FROM customers c     JOIN yearmonth ym ON c.CustomerID = ym.CustomerID ) as subquery GROUP BY Segment ORDER BY TotalConsumption ASC LIMIT 1;
SELECT SUBSTRING(Date, 1, 4) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE CustomerID IN (     SELECT CustomerID     FROM customers     WHERE Currency = 'CZK' ) GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1;
SELECT Date FROM yearmonth WHERE SUBSTRING(Date, 1, 4) = '2013' AND     CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME') GROUP BY Date ORDER BY SUM(Consumption) DESC LIMIT 1;
WITH min_consumption_customers AS (     SELECT         ym.CustomerID,         c.Segment,         SUM(ym.Consumption) AS total_consumption     FROM yearmonth ym     JOIN customers c ON ym.CustomerID = c.CustomerID     WHERE SUBSTRING(ym.Date, 1, 4) = '2013'     GROUP BY ym.CustomerID, c.Segment ), min_consumption_per_segment AS (     SELECT         Segment,         MIN(total_consumption) AS min_consumption     FROM min_consumption_customers     GROUP BY Segment ), customers_with_min_consumption AS (     SELECT         mcs.Segment,         mcc.CustomerID,         mcc.total_consumption     FROM min_consumption_per_segment mcs     JOIN min_consumption_customers mcc ON mcc.Segment = mcs.Segment AND mcc.total_consumption = mcs.min_consumption ), consumption_per_segment AS (     SELECT         Segment,         AVG(total_consumption) AS avg_consumption     FROM customers_with_min_consumption     GROUP BY Segment ) SELECT     COALESCE(SME.avg_consumption, 0) - COALESCE(LAM.avg_consumption, 0) AS SME_LAM_difference,     COALESCE(LAM.avg_consumption, 0) - COALESCE(KAM.avg_consumption, 0) AS LAM_KAM_difference,     COALESCE(KAM.avg_consumption, 0) - COALESCE(SME.avg_consumption, 0) AS KAM_SME_difference FROM     (SELECT * FROM consumption_per_segment WHERE Segment = 'SME') SME,     (SELECT * FROM consumption_per_segment WHERE Segment = 'LAM') LAM,     (SELECT * FROM consumption_per_segment WHERE Segment = 'KAM') KAM;
WITH YearlyConsumption AS (     SELECT         CustomerID,         Segment,         SUM(CASE WHEN SUBSTRING(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END) AS Consumption2012,         SUM(CASE WHEN SUBSTRING(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END) AS Consumption2013     FROM         customers c     JOIN         yearmonth y ON c.CustomerID = y.CustomerID     WHERE         Date BETWEEN '201201' AND '201312'     GROUP BY         CustomerID,         Segment ), SegmentIncrease AS (     SELECT         Segment,         AVG(Consumption2013 - Consumption2012) AS IncreaseAmount,         AVG((Consumption2013 - Consumption2012) / Consumption2013 * 100) AS IncreasePercentage     FROM         YearlyConsumption     GROUP BY         Segment ) SELECT     Segment,     IncreaseAmount,     IncreasePercentage FROM     SegmentIncrease WHERE     Segment IN ('SME', 'LAM', 'KAM') ORDER BY     IncreasePercentage DESC;
SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311';
SELECT     (SELECT COUNT(*) FROM gasstations WHERE Country = 'Czech Republic' AND Segment = 'discount') -     (SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia' AND Segment = 'discount')
SELECT     (SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 7 AND Date = 201304) -     (SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 5 AND Date = 201304) AS Difference
SELECT     (SELECT COUNT(DISTINCT c.CustomerID) FROM customers c WHERE c.Segment = 'SME' AND c.Currency = 'CZK') -     (SELECT COUNT(DISTINCT c.CustomerID) FROM customers c WHERE c.Segment = 'SME' AND c.Currency = 'EUR') AS More_SMEs_in_CZK
SELECT c.CustomerID FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Currency = 'Euro' AND c.Segment = 'LAM' AND ym.Date = '201310' ORDER BY ym.Consumption DESC LIMIT 1;
SELECT c.CustomerID, SUM(y.Consumption) as TotalConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Segment = 'KAM' GROUP BY c.CustomerID ORDER BY TotalConsumption DESC LIMIT 1;
SELECT SUM(yearmonth.Consumption) FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'KAM' AND yearmonth.Date = 201305;
SELECT     (COUNT(CASE WHEN y.Consumption > 46.73 THEN y.CustomerID END) * 100.0 / COUNT(y.CustomerID)) AS Percentage_LAM_Customers FROM     yearmonth y JOIN     customers c ON y.CustomerID = c.CustomerID WHERE     c.Segment = 'LAM';
SELECT gs.Country, COUNT(gs.GasStationID) AS Num_ValueForMoney_GasStations FROM gasstations gs JOIN (     SELECT t1k.GasStationID     FROM transactions_1k t1k     WHERE t1k.Amount / t1k.Price <= ALL (         SELECT t1k_2.Amount / t1k_2.Price         FROM transactions_1k t1k_2         WHERE t1k.GasStationID = t1k_2.GasStationID     )     GROUP BY t1k.GasStationID ) t ON gs.GasStationID = t.GasStationID GROUP BY gs.Country ORDER BY Num_ValueForMoney_GasStations DESC;
SELECT     (COUNT(CASE WHEN c.Currency = 'EUR' THEN c.CustomerID END) * 100.0 / COUNT(c.CustomerID)) AS Percentage_EUR_Paying_KAM_Customers FROM     customers c WHERE     c.Segment = 'KAM';
SELECT     (COUNT(CASE WHEN y.Consumption > 528.3 THEN y.CustomerID END) * 100.0 / COUNT(y.CustomerID)) AS Percentage FROM     yearmonth y WHERE     y.Date = '201202'
SELECT     (SELECT COUNT(*)      FROM gasstations      WHERE Segment = 'Premium' AND Country = 'Slovakia') * 100.0 /     (SELECT COUNT(*)      FROM gasstations      WHERE Country = 'Slovakia') AS Percentage_Premium_Gas_Stations;
SELECT CustomerID, SUM(Consumption) as TotalConsumption FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID ORDER BY TotalConsumption DESC LIMIT 1;
SELECT c.Segment, SUM(y.Consumption) as TotalConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date = '201309' GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1;
SELECT c.CustomerID, SUM(t.Amount * t.Price) as TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Segment = 'SME' AND ym.Date = '201206' GROUP BY c.CustomerID ORDER BY TotalConsumption ASC LIMIT 1;
SELECT MAX(Consumption) FROM yearmonth WHERE SUBSTRING(Date, 1, 4) = '2012';
SELECT MAX(YM.Consumption) FROM (     SELECT CustomerID, SUM(Consumption) AS Consumption     FROM yearmonth YM     JOIN customers C ON YM.CustomerID = C.CustomerID     WHERE C.Currency = 'Euro'     GROUP BY YM.CustomerID, DATE_FORMAT(YM.Date, '%Y-%m') ) AS MonthlyConsumption
SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE t.Date LIKE '201309%';
SELECT DISTINCT gs.Country FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID WHERE strftime('%Y%m', t.Date) = '201306';
SELECT DISTINCT gs.ChainID FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'euro';
SELECT DISTINCT p.Description FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID JOIN products p ON t.ProductID = p.ProductID WHERE c.Currency = 'Euro';
SELECT AVG(t.Amount * t.Price) AS AverageTotalPrice FROM transactions_1k t WHERE t.Date LIKE '2012-01%';
SELECT COUNT(DISTINCT c.CustomerID) FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Currency = 'Euro' AND ym.Consumption > 1000;
SELECT p.Description FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE g.Country = 'CZE'
SELECT DISTINCT Time FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.ChainID = 11;
SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Price > 1000;
SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01';
SELECT AVG(t.Amount * t.Price) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE';
SELECT AVG(t.Amount * t.Price) FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'Euro';
SELECT c.CustomerID FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-25' GROUP BY c.CustomerID ORDER BY SUM(t.Amount * t.Price) DESC LIMIT 1;
SELECT gs.Country FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID WHERE t.Date = '2012-08-25' ORDER BY t.Time LIMIT 1;
SELECT c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-24' AND t.Time = '16:25:00';
SELECT T1.Segment FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-23' AND T2.Time = '21:20:00';
SELECT COUNT(*) FROM transactions_1k WHERE Date = '2012-08-26' AND Time < '13:00:00' AND Currency = 'EUR';
SELECT Segment FROM customers ORDER BY CustomerID LIMIT 1;
SELECT T2.Country FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00';
SELECT T1.ProductID FROM transactions_1k AS T1 WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'
SELECT ym.Date, ym.Consumption FROM yearmonth ym JOIN (     SELECT t1k.CustomerID     FROM transactions_1k t1k     WHERE t1k.Amount = 124.05 AND t1k.Date = '2012-08-24' ) sub ON ym.CustomerID = sub.CustomerID WHERE DATE_FORMAT(ym.Date, '%Y-%m') = '2012-01';
SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Date = '2012-08-26' AND transactions_1k.Time BETWEEN '08:00' AND '09:00' AND gasstations.Country = 'CZE';
SELECT c.Currency FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date LIKE '201306%' AND ym.Consumption = 214582.17;
SELECT gasstations.Country FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.CardID = 667467 LIMIT 1;
Error: 第 10953 个样本有 2 个SQL。
SELECT     COUNT(DISTINCT CASE WHEN Currency = 'EUR' THEN customers.CustomerID END) * 100 / COUNT(DISTINCT customers.CustomerID) AS Percentage FROM     customers JOIN     transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE     transactions_1k.Date = '2012-08-25';
SELECT     ((y2012.Consumption - y2013.Consumption) / y2012.Consumption) AS Consumption_Decrease_Rate FROM     (     SELECT         CustomerID, SUM(Consumption) AS Consumption     FROM         yearmonth     WHERE         Date LIKE '2012-%'     GROUP BY         CustomerID     ) y2012,     (     SELECT         CustomerID, SUM(Consumption) AS Consumption     FROM         yearmonth     WHERE         Date LIKE '2013-%'     GROUP BY         CustomerID     ) y2013 WHERE     y2012.CustomerID = y2013.CustomerID     AND EXISTS(     SELECT         1     FROM         transactions_1k t     WHERE         t.Amount = 634.8         AND t.Date = '2012-08-25'         AND t.CustomerID = y2012.CustomerID     )
SELECT gs.GasStationID, SUM(t.Amount * t.Price) as Revenue FROM transactions_1k t JOIN gasstations gs ON t.GasStationID = gs.GasStationID GROUP BY gs.GasStationID ORDER BY Revenue DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN gs.Segment = 'premium' THEN gs.GasStationID ELSE NULL END) * 100 / COUNT(gs.GasStationID)) AS PremiumPercentage FROM     gasstations gs WHERE     gs.Country = 'SVK';
SELECT SUM(Amount) AS TotalSpent FROM transactions_1k WHERE CustomerID = 38508 UNION SELECT SUM(t.Amount * t.Price) AS Jan2012Spent FROM transactions_1k t JOIN yearmonth y ON t.CustomerID = y.CustomerID WHERE t.CustomerID = 38508 AND y.Date = '201201'
SELECT p.Description, SUM(t.Amount) as TotalSales FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID GROUP BY p.Description ORDER BY TotalSales DESC LIMIT 5;
SELECT     c.CustomerID,     c.Currency,     SUM(t.Price) AS Total_Spent,     (SUM(t.Price) / SUM(t.Amount)) AS Average_Price_Per_Item FROM     customers c JOIN     transactions_1k t ON c.CustomerID = t.CustomerID GROUP BY     c.CustomerID, c.Currency ORDER BY     Total_Spent DESC LIMIT 1;
SELECT gs.Country FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE p.ProductID = 2 AND t.Amount = 1 GROUP BY gs.Country ORDER BY SUM(t.Price) DESC LIMIT 1;
SELECT y.ConsumerStatus FROM (     SELECT t.CustomerID, SUM(t.Amount) AS ConsumerStatus     FROM transactions_1k t     JOIN products p ON t.ProductID = p.ProductID     WHERE p.ProductID = 5 AND (t.Price / t.Amount) > 29.00 AND t.Date LIKE '201208%'     GROUP BY t.CustomerID ) AS y JOIN yearmonth m ON y.CustomerID = m.CustomerID WHERE m.Date LIKE '201208%';
