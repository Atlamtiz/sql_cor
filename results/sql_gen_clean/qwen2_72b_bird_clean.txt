SELECT movie_title FROM movies WHERE movie_release_year = 1945 ORDER BY movie_popularity DESC;
SELECT     movie_title,     movie_release_year,     director_name FROM     movies WHERE     movie_popularity = (SELECT MAX(movie_popularity) FROM movies);
SELECT movie_title, movie_release_year FROM movies ORDER BY LENGTH(movie_title) DESC LIMIT 1;
SELECT m.movie_title, SUM(r.rating_score) as total_rating FROM movies m JOIN ratings r ON m.movie_id = r.movie_id GROUP BY m.movie_title ORDER BY total_rating DESC LIMIT 1;
SELECT AVG(m.movie_popularity) FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.director_name = 'Stanley Kubrick';
SELECT AVG(rating_score) FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'When Will I Be Loved';
SELECT lu.user_avatar_image_url, m.movie_title FROM lists_users AS lu JOIN ratings AS r ON lu.user_id = r.user_id JOIN movies AS m ON r.movie_id = m.movie_id WHERE lu.user_id = 41579158 ORDER BY r.rating_timestamp_utc DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN ru.user_subscriber = 1 THEN 1 END) * 100.0 / COUNT(r.rating_id)) AS percent FROM     ratings r JOIN     ratings_users ru ON r.user_id = ru.user_id;
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id JOIN ratings_users ru ON r.user_id = ru.user_id WHERE r.rating_timestamp_utc LIKE '%2020-04-%' AND ru.user_trialist = 1;
SELECT ratings_users.user_id FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id JOIN ratings_users ON ratings.user_id = ratings_users.user_id WHERE movies.movie_title = 'Love Will Tear Us Apart' AND ratings.rating_score = 1;
SELECT m.movie_title, m.movie_popularity FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.rating_score = 5 ORDER BY m.movie_popularity DESC;
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.rating_timestamp_utc LIKE '%2020%' AND r.rating_score >= 4;
SELECT m.movie_title, r.user_id, r.rating_score, r.critic_comments FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.critic IS NOT NULL;
SELECT     (COUNT(CASE WHEN rating_score = 5 THEN 1 END) * 100.0 / COUNT(rating_id)) AS percentage_highest_score FROM     ratings JOIN     movies ON ratings.movie_id = movies.movie_id WHERE     movie_title = 'Welcome to the Dollhouse';
SELECT     (COUNT(CASE WHEN m.movie_release_year = 2021 THEN 1 END) * 100.0 / COUNT(r.rating_id)) AS percent_2021_movies FROM     ratings r JOIN     movies m ON r.movie_id = m.movie_id;
SELECT director_name FROM movies WHERE movie_title = 'Sex, Drink and Bloodshed';
SELECT list_title FROM lists WHERE list_followers = (SELECT MAX(list_followers) FROM lists);
SELECT list_url FROM lists WHERE list_followers IN (1, 2) AND list_update_timestamp_utc BETWEEN '2012-01-01' AND '2012-12-31';
SELECT list_id FROM lists WHERE user_id = 85981819 ORDER BY list_creation_timestamp_utc LIMIT 1;
SELECT COUNT(*) FROM ratings JOIN ratings_users ON ratings.user_id = ratings_users.user_id WHERE ratings.movie_id = 1269 AND ratings_users.user_has_payment_method = 1 AND ratings_users.user_eligible_for_trial = 1 AND ratings.rating_score <= 2;
SELECT movie_title, movie_popularity FROM movies WHERE movie_release_year = 2021 AND director_name = 'Steven Spielberg';
SELECT movie_release_year, director_name FROM movies ORDER BY movie_release_year ASC LIMIT 1;
SELECT user_id FROM (   SELECT user_id,          list_creation_date_utc,          LEAD(list_creation_date_utc, 9) OVER (PARTITION BY user_id ORDER BY list_creation_date_utc) as lead_date   FROM lists_users   WHERE user_subscriber = 1 ) subquery WHERE DATE_PART('year', lead_date) - DATE_PART('year', list_creation_date_utc) = 10 GROUP BY user_id;
SELECT COUNT(*) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'Pavee Lackeen: The Traveller Girl' AND r.rating_score = 4;
SELECT lu.user_eligible_for_trial, l.list_followers FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE l.list_title = 'World War 2 and Kids' AND l.list_creation_timestamp_utc = lu.list_creation_date_utc;
SELECT m.movie_release_year, r.user_id FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.director_name = 'Quentin Tarantino' AND r.rating_score = 4 ORDER BY m.movie_release_year LIMIT 1 OFFSET 2;
SELECT T3.director_url FROM ratings AS T1 JOIN movies AS T2 ON T1.movie_id = T2.movie_id JOIN directors AS T3 ON T2.director_id = T3.director_id WHERE T1.user_id = 2452551 AND T1.critic_likes = 39;
SELECT AVG(rating_score), director_name FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movie_title = 'When Will I Be Loved';
SELECT     L.list_movie_number,     LU.user_has_payment_method FROM     lists L JOIN     lists_users LU ON L.list_id = LU.list_id WHERE     L.list_movie_number = (SELECT MAX(list_movie_number) FROM lists)
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.critic_likes = (     SELECT MAX(critic_likes)     FROM ratings )
SELECT     m.movie_popularity AS max_popularity,     MIN(r.rating_timestamp_utc) AS first_rating_of_1 FROM     movies m JOIN     ratings r ON m.movie_id = r.movie_id WHERE     m.movie_release_year BETWEEN 1920 AND 1929     AND r.rating_score = 1     AND r.user_has_payment_method = 1 GROUP BY     m.movie_id ORDER BY     m.movie_popularity DESC,     r.rating_timestamp_utc LIMIT 1;
Error: 第 32 个样本有 2 个SQL。
SELECT ru.user_avatar_image_url FROM ratings r JOIN ratings_users ru ON r.user_id = ru.user_id WHERE r.movie_id = 1103 AND r.rating_score = 5 AND r.rating_timestamp_utc = '2020-04-19';
SELECT l.list_title, l.list_followers, lu.user_subscriber FROM lists AS l JOIN lists_users AS lu ON l.list_id = lu.list_id AND l.user_id = lu.user_id WHERE l.user_id = 4208563 ORDER BY l.list_followers DESC LIMIT 1;
SELECT     m.movie_release_year,     m.movie_title FROM     movies m JOIN     ratings r ON m.movie_id = r.movie_id WHERE     r.rating_score = 1 GROUP BY     m.movie_release_year,     m.movie_title HAVING     m.movie_release_year = (         SELECT             MIN(movie_release_year)         FROM             movies     ) ORDER BY     COUNT(r.rating_id) DESC LIMIT 1;
SELECT COUNT(*) FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id JOIN ratings_users ON ratings.user_id = ratings_users.user_id WHERE movies.movie_release_year = 1924 AND movies.director_name = 'Erich von Stroheim' AND ratings.rating_score = 5 AND ratings_users.user_has_payment_method = 1;
SELECT AVG(l.list_movie_number), u.user_avatar_image_url FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id JOIN ratings_users u ON u.user_id = lu.user_id WHERE u.user_id = 8516503;
Error: 第 38 个样本有 2 个SQL。
Error: 第 39 个样本有 4 个SQL。
SELECT r.rating_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'Riff-Raff' AND r.user_id = 22030372 ORDER BY r.rating_score DESC LIMIT 1;
SELECT     d.director_name,     m.movie_title FROM     (SELECT         director_name,         COUNT(movie_id) AS num_movies     FROM         movies     WHERE         movie_release_year BETWEEN 1960 AND 1985     GROUP BY         director_name     HAVING         COUNT(movie_id) >= 10) d JOIN     movies m ON m.director_name = d.director_name JOIN     ratings r ON r.movie_id = m.movie_id WHERE     r.rating_score = 5 GROUP BY     d.director_name,     m.movie_title ORDER BY     COUNT(r.rating_id) DESC;
SELECT COUNT(*) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id JOIN ratings_users ru ON r.user_id = ru.user_id WHERE m.movie_title = 'The South' AND r.rating_score <= 2 AND ru.user_trialist = 0;
SELECT SUM(critic_likes) FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'Apocalypse Now' AND ratings.rating_score = 5;
SELECT AVG(r.rating_score), m.director_name FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'The Crowd';
SELECT     MIN(m.movie_release_year) AS first_movie_release_year,     r.user_id AS user_id_with_most_comments FROM     movies m JOIN     ratings r ON m.movie_id = r.movie_id JOIN     ratings_users ru ON r.user_id = ru.user_id WHERE     m.director_id = (         SELECT             director_id         FROM             (                 SELECT                     director_id,                     COUNT(*) AS num_movies                 FROM                     movies                 GROUP BY                     director_id                 ORDER BY                     num_movies DESC                 LIMIT 1             ) subquery     ) AND     ru.user_id = (         SELECT             user_id         FROM             ratings         GROUP BY             user_id         ORDER BY             SUM(critic_comments) DESC         LIMIT 1     ) GROUP BY     r.user_id;
SELECT m.movie_title, MAX(r.rating_score) as max_rating FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_popularity BETWEEN 400 AND 500 GROUP BY m.movie_id, m.movie_title;
SELECT ratings.rating_url FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE ratings.user_id = 45579900 AND movies.movie_title = 'The Vertical Ray of the Sun' AND ratings.critic_likes = 20;
SELECT     m.movie_title,     AVG(m.movie_popularity) as avg_popularity,     COUNT(CASE WHEN r.rating_score = 5 THEN 1 END) as five_star_ratings FROM     movies m JOIN     ratings r ON m.movie_id = r.movie_id WHERE     m.director_name = 'Christopher Nolan' GROUP BY     m.movie_title ORDER BY     five_star_ratings DESC;
SELECT AVG(r.rating_score) as average_rating, m.movie_title FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE r.rating_timestamp_utc BETWEEN '2013-01-01' AND '2013-12-31' AND r.user_id IN (     SELECT lu.user_id     FROM lists_users lu     JOIN lists l ON lu.list_id = l.list_id     WHERE l.list_title = '100 Greatest Living American Filmmakers' ) GROUP BY m.movie_title;
SELECT AVG(rating_score) as average_rating, movie_release_year FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movie_title = 'Pavee Lackeen: The Traveller Girl';
SELECT COUNT(*) FROM lists WHERE list_update_timestamp_utc > DATE_ADD(list_creation_timestamp_utc, INTERVAL 10 YEAR);
SELECT list_description FROM lists WHERE list_title = 'Short and pretty damn sweet';
SELECT list_url FROM movie_platform.lists WHERE list_title = 'Short and pretty damn sweet';
SELECT COUNT(*) FROM lists WHERE list_update_timestamp_utc > '2010-01-01' AND list_followers > 200;
SELECT COUNT(*) FROM lists JOIN lists_users ON lists.list_id = lists_users.list_id WHERE lists.user_id = 83373278 AND lists_users.user_subscriber = 1;
SELECT movie_release_year FROM movies WHERE movie_title = 'La Antena';
SELECT movie_url FROM movies WHERE movie_title = 'La Antena';
SELECT movie_title, movie_popularity FROM movies WHERE movie_title IN ('The General', 'Il grido') ORDER BY movie_popularity DESC LIMIT 1;
SELECT COUNT(*) FROM movies WHERE director_name = 'Hong Sang-soo';
SELECT lu.user_trialist FROM lists_users lu JOIN lists l ON lu.list_id = l.list_id WHERE l.list_title = '250 Favourite Films'
SELECT l.list_title FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE l.user_id = 32172230 AND lu.user_eligible_for_trial = 1;
SELECT COUNT(*) FROM lists WHERE user_id = 85981819 AND list_movie_number > 100 AND EXISTS (SELECT 1 FROM lists_users WHERE lists.list_id = lists_users.list_id AND user_id = 85981819 AND user_has_payment_method = 1);
SELECT T1.list_description FROM lists AS T1 JOIN lists_users AS T2 ON T1.list_id = T2.list_id WHERE T2.user_id = 85981819 ORDER BY T1.list_followers DESC LIMIT 1;
SELECT list_update_timestamp_utc FROM lists WHERE list_title = '250 Favourite Films' ORDER BY list_update_timestamp_utc DESC LIMIT 1;
SELECT lu.user_avatar_image_url FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE l.list_title = '250 Favourite Films';
SELECT COUNT(*) - 1 FROM lists WHERE user_id = (SELECT user_id FROM lists WHERE list_title = '250 Favourite Films') AND list_creation_timestamp_utc > (SELECT list_creation_timestamp_utc FROM lists WHERE list_title = '250 Favourite Films');
SELECT COUNT(*) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'A Way of Life' AND r.rating_score = 5;
SELECT r.critic FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'A Way of Life';
SELECT COUNT(*) FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'Imitation of Life') AND critic_likes > 1;
SELECT ratings.user_id FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'When Will I Be Loved' AND ratings.critic_comments = 2;
SELECT ratings.rating_timestamp_utc FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'A Way of Life' AND ratings.user_id = 39115684;
SELECT r.rating_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'When Will I Be Loved' AND r.user_id = 39115684;
SELECT ratings_users.user_trialist FROM ratings JOIN ratings_users ON ratings.user_id = ratings_users.user_id JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'A Way of Life' AND ratings_users.user_id = 39115684;
SELECT COUNT(*) FROM ratings_users ru JOIN ratings r ON ru.user_id = r.user_id JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'A Way of Life' AND ru.user_trialist = 1;
SELECT r.rating_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'A Way of Life' AND r.critic IS NOT NULL;
SELECT COUNT(ratings.user_id) FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_popularity = (SELECT MAX(movie_popularity) FROM movies);
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.user_id = 58149469 AND r.critic_likes = 1 AND r.critic_comments = 2;
SELECT COUNT(*) FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id JOIN ratings_users ON ratings.user_id = ratings_users.user_id WHERE movies.movie_title = 'When Will I Be Loved' AND ratings_users.user_trialist = 1 AND ratings.rating_score = 1;
SELECT COUNT(*) FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'A Way of Life' AND ratings.rating_timestamp_utc > '2011-12-31 23:59:59';
SELECT r.rating_score FROM ratings r JOIN movies m ON r.movie_id = m.movie_id JOIN lists l ON r.user_id = l.user_id WHERE m.movie_title = 'Innocence Unprotected' AND l.list_title = '250 Favourite Films';
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id JOIN lists l ON l.user_id = r.user_id WHERE l.list_title = '250 Favourite Films';
SELECT AVG(rating_score) FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movie_title = 'A Way of Life';
SELECT (COUNT(CASE WHEN r.rating_score = 1 THEN r.rating_id END) * 100.0 / COUNT(r.rating_id)) AS percentage FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'When Will I Be Loved';
SELECT     (AVG CASE WHEN r.movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'Innocence Unprotected') THEN r.rating_score END) -     (AVG CASE WHEN r.movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'When Will I Be Loved') THEN r.rating_score END) AS rating_difference FROM     ratings r JOIN     movies m ON r.movie_id = m.movie_id;
SELECT director_name FROM movies WHERE movie_title = 'Tokyo Eyes';
SELECT COUNT(*) FROM movies WHERE movie_release_year = 2007;
SELECT m.movie_title FROM movies m WHERE m.movie_release_year = 2006 ORDER BY m.movie_popularity DESC LIMIT 1;
SELECT COUNT(*) FROM movies WHERE director_name = 'Åke Sandgren';
SELECT m.movie_title, m.movie_popularity FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.director_name = 'Álex de la Iclesia' GROUP BY m.movie_id, m.movie_title, m.movie_popularity ORDER BY m.movie_popularity DESC LIMIT 1;
SELECT movie_release_year FROM movies WHERE movie_title = 'Cops';
SELECT director_id FROM movies WHERE movie_title = 'It\'s Winter';
SELECT user_id FROM lists WHERE list_followers = (SELECT MAX(list_followers) FROM lists);
SELECT list_title FROM lists WHERE list_comments = (SELECT MAX(list_comments) FROM lists);
SELECT m.movie_title, MAX(r.rating_score) as max_rating FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_release_year = 2008 GROUP BY m.movie_title ORDER BY max_rating DESC LIMIT 1;
SELECT m.movie_title, SUM(r.critic_likes) as total_likes FROM movies m JOIN ratings r ON m.movie_id = r.movie_id GROUP BY m.movie_title ORDER BY total_likes DESC LIMIT 3;
SELECT COUNT(DISTINCT lu.user_id) FROM lists_users lu JOIN lists l ON lu.list_id = l.list_id WHERE l.list_followers > 100 AND YEAR(lu.list_creation_date_utc) = 2009;
SELECT COUNT(*) FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'White Night Wedding' AND ratings.rating_score = 5;
SELECT lu.user_cover_image_url FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id WHERE l.list_title = 'Georgia related films';
Error: 第 99 个样本有 3 个SQL。
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.user_id = 94978 AND r.rating_score = 5;
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_release_year = 2003 AND r.user_id = 2941;
SELECT COUNT(DISTINCT ru.user_id) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id JOIN ratings_users ru ON r.user_id = ru.user_id WHERE m.movie_title = 'Patti Smith: Dream of Life' AND ru.user_trialist = 0;
SELECT m.movie_title, AVG(r.rating_score) as average_score FROM movies m JOIN ratings r ON m.movie_id = r.movie_id GROUP BY m.movie_title ORDER BY average_score DESC LIMIT 1;
SELECT m.movie_title, SUM(r.critic_comments) as total_comments FROM movies m JOIN ratings r ON m.movie_id = r.movie_id GROUP BY m.movie_title ORDER BY total_comments DESC LIMIT 3;
SELECT lists.list_title, ratings_users.user_avatar_image_url FROM lists JOIN ratings_users ON lists.user_id = ratings_users.user_id WHERE lists.user_id = 85981819 ORDER BY lists.list_creation_timestamp_utc ASC LIMIT 1;
SELECT m.movie_title, COUNT(r.movie_id) as rating_count FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.rating_timestamp_utc LIKE '2020%' GROUP BY m.movie_title ORDER BY rating_count DESC LIMIT 10;
SELECT AVG(rating_score) FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movie_title = 'Versailles Rive-Gauche';
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.user_id = 59988436 AND r.critic_comments = 21;
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.critic_likes > 20;
SELECT AVG(rating_score) FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'The Fall of Berlin' AND YEAR(rating_timestamp_utc) = 2019;
SELECT     (COUNT(CASE WHEN r.rating_score > 3 THEN 1 END) * 100.0 / COUNT(r.rating_id)) AS percentage FROM     ratings r JOIN     movies m ON r.movie_id = m.movie_id WHERE     m.movie_title = 'Patti Smith: Dream of Life'
SELECT m.movie_title, AVG(r.rating_score) as average_score FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.director_name = 'Abbas Kiarostami' GROUP BY m.movie_title ORDER BY average_score DESC LIMIT 1;
SELECT movie_release_year, COUNT(movie_id) as movie_count FROM movies GROUP BY movie_release_year ORDER BY movie_count DESC LIMIT 1;
SELECT director_id FROM movies GROUP BY director_id ORDER BY COUNT(movie_id) DESC LIMIT 1;
SELECT COUNT(*) FROM movies WHERE director_id = (     SELECT director_id     FROM movies     WHERE movie_popularity = (         SELECT MAX(movie_popularity)         FROM movies     ) );
SELECT COUNT(*) FROM ratings JOIN ratings_users ON ratings.user_id = ratings_users.user_id WHERE ratings.rating_timestamp_utc > '2014-01-01 00:00:00' AND ratings_users.user_has_payment_method = 1;
SELECT user_id FROM lists WHERE list_followers = 0 ORDER BY list_creation_timestamp_utc LIMIT 1;
SELECT lu.user_subscriber FROM (   SELECT user_id, COUNT(list_id) as list_count   FROM lists   GROUP BY user_id ) l JOIN lists_users lu ON l.user_id = lu.user_id WHERE l.list_count = (   SELECT MAX(list_count)   FROM (     SELECT COUNT(list_id) as list_count     FROM lists     GROUP BY user_id   ) subquery )
SELECT lists.list_followers FROM lists WHERE lists.list_title = 'Non-American Films about World War II';
SELECT COUNT(*) FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'Downfall' AND ratings.rating_score = 4;
SELECT m.movie_title, COUNT(r.rating_id) as num_five_star_ratings FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.rating_score = 5 GROUP BY m.movie_title ORDER BY num_five_star_ratings DESC LIMIT 1;
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.critic_comments = (SELECT MAX(critic_comments) FROM ratings);
SELECT user_avatar_image_url FROM ratings WHERE rating_timestamp_utc = '2019-10-17 01:36:36';
SELECT user_avatar_image_url FROM lists JOIN lists_users ON lists.user_id = lists_users.user_id WHERE list_title = 'Vladimir Vladimirovich Nabokov';
SELECT     lu.user_subscriber,     lu.user_has_payment_method FROM     lists l JOIN     lists_users lu ON l.list_id = lu.list_id WHERE     l.list_movie_number = (SELECT MAX(list_movie_number) FROM lists)
SELECT T1.user_avatar_image_url FROM ratings_users AS T1 JOIN ratings AS T2 ON T1.user_id = T2.user_id WHERE T2.rating_score = 5 GROUP BY T1.user_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(ratings.critic) FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_popularity = (SELECT MAX(movie_popularity) FROM movies);
SELECT user_id FROM ratings WHERE movie_id = (SELECT movie_id FROM movies WHERE movie_title = 'Freaks') AND rating_score = 4 AND rating_timestamp_utc = '2013-05-04 06:33:32';
SELECT m.movie_url FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.rating_score = 5 AND r.rating_timestamp_utc = '2013-05-03 05:11:17';
SELECT COUNT(*) FROM ratings WHERE movie_id = (     SELECT movie_id     FROM movies     WHERE movie_release_year = '1998'     ORDER BY movie_popularity DESC     LIMIT 1 ) AND rating_score = 4;
SELECT m.movie_title, MIN(r.rating_score) as min_rating FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_popularity > 13000 GROUP BY m.movie_title ORDER BY min_rating LIMIT 1;
SELECT COUNT(*) FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id JOIN ratings_users ON ratings.user_id = ratings_users.user_id WHERE movies.movie_title = 'One Flew Over the Cuckoo''s Nest' AND ratings_users.user_has_payment_method = 1;
SELECT COUNT(*) FROM (   SELECT lu.user_id   FROM lists l   JOIN lists_users lu ON l.list_id = lu.list_id   WHERE l.list_followers > 3000 AND lu.user_has_payment_method = 1 ) AS result;
SELECT m.movie_title, COUNT(r.rating_id) as rating_count FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_release_year = 1988 GROUP BY m.movie_title ORDER BY rating_count DESC LIMIT 1;
SELECT COUNT(r.rating_id) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_release_year = '1995' AND r.rating_score < 3 AND m.movie_popularity = (     SELECT MAX(popularity)     FROM movies     WHERE movie_release_year = '1995' );
SELECT (COUNT(CASE WHEN r.rating_score = 5 THEN 1 END) * 100.0 / COUNT(r.rating_score)) AS percentage FROM ratings AS r JOIN movies AS m ON r.movie_id = m.movie_id WHERE m.movie_title = 'Go Go Tales';
SELECT     (COUNT(CASE WHEN ru.user_subscriber = 1 THEN 1 END) * 100.0 / COUNT(ru.user_subscriber)) AS subscriber_percentage FROM     ratings r JOIN     ratings_users ru ON r.user_id = ru.user_id JOIN     movies m ON r.movie_id = m.movie_id WHERE     m.movie_title = 'G.I. Jane'
SELECT     (COUNT(CASE WHEN ru.user_has_payment_method = 1 THEN 1 END) * 100.0 / COUNT(ru.user_has_payment_method)) AS paying_subscriber_percentage FROM     ratings r JOIN     ratings_users ru ON r.user_id = ru.user_id JOIN     movies m ON r.movie_id = m.movie_id WHERE     m.movie_title = 'A Shot in the Dark'
SELECT list_title FROM lists WHERE user_id = 4208563;
Error: 第 140 个样本有 2 个SQL。
SELECT     (COUNT(CASE WHEN lu.user_subscriber = 1 THEN lu.list_id END) * 100.0 / COUNT(lu.list_id)) AS subscriber_list_percentage FROM     lists_users lu
SELECT l.list_title FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id AND l.user_id = lu.user_id WHERE lu.user_subscriber = 1 AND l.list_creation_timestamp_utc = lu.list_creation_date_utc;
SELECT l.list_title FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id AND l.user_id = lu.user_id WHERE lu.user_eligible_for_trial = 1 AND l.list_creation_timestamp_utc = lu.list_creation_date_utc;
SELECT COUNT(*) FROM lists JOIN lists_users ON lists.list_id = lists_users.list_id WHERE lists.list_followers >= 1 AND lists_users.user_subscriber = 1;
SELECT AVG(list_followers) FROM lists WHERE list_movie_number > 200;
SELECT l.list_title FROM lists l JOIN lists_users lu ON l.list_id = lu.list_id AND l.user_id = lu.user_id WHERE l.list_movie_number < 50 AND lu.user_subscriber = 1;
SELECT     list_title,     TIMESTAMPDIFF(DAY, list_update_timestamp_utc, CURRENT_TIMESTAMP) AS days_since_last_update FROM     lists WHERE     list_update_timestamp_utc = (         SELECT             MIN(list_update_timestamp_utc)         FROM             lists     );
SELECT lu.user_id, lu.user_subscriber FROM lists_users AS lu JOIN lists AS l ON lu.list_id = l.list_id WHERE l.list_title = 'Sound and Vision' GROUP BY lu.user_id, lu.user_subscriber;
SELECT     list_title,     TIMESTAMPDIFF(YEAR, list_creation_timestamp_utc, CURRENT_TIMESTAMP) AS Years_Since_Creation FROM     lists WHERE     list_followers > 200;
Error: 第 150 个样本有 2 个SQL。
SELECT m.movie_title, r.rating_timestamp_utc, r.rating_score FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.user_id = 39115684;
SELECT COUNT(*) FROM movies WHERE movie_release_year BETWEEN 1970 AND 1980 AND movie_popularity > 11000;
SELECT COUNT(*) FROM movies WHERE director_name = 'Felipe Cazals' AND movie_release_year = 1976;
SELECT director_url FROM movies WHERE movie_title = 'Red Blooded American Girl'
SELECT list_title FROM lists WHERE list_update_timestamp_utc = (SELECT MAX(list_update_timestamp_utc) FROM lists);
SELECT user_id FROM lists WHERE list_comments = 142 LIMIT 1;
SELECT m.movie_title, AVG(r.rating_score) as average_rating FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.director_name = 'Jeannot Szwarc' GROUP BY m.movie_id, m.movie_title ORDER BY m.movie_popularity DESC LIMIT 1;
SELECT T2.director_name, MAX(T3.rating_score) AS max_rating FROM movies AS T1 JOIN director AS T2 ON T1.director_id = T2.director_id JOIN ratings AS T3 ON T1.movie_id = T3.movie_id WHERE T1.movie_release_year BETWEEN 1970 AND 1979 GROUP BY T2.director_name HAVING COUNT(T1.movie_id) = (     SELECT COUNT(movie_id)     FROM movies     WHERE movie_release_year BETWEEN 1970 AND 1979     GROUP BY director_id     ORDER BY COUNT(movie_id) DESC     LIMIT 1 ) ORDER BY max_rating DESC;
SELECT COUNT(DISTINCT r.user_id) FROM ratings r JOIN movies m ON r.movie_id = m.movie_id JOIN ratings_users ru ON r.user_id = ru.user_id WHERE m.movie_title = 'The Secret Life of Words' AND r.rating_score = 3 AND ru.user_trialist = 1 AND r.rating_timestamp_utc BETWEEN '2010-01-01%' AND '2020-12-31%';
SELECT m.movie_title, r.rating_url FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.critic_likes = (SELECT MAX(critic_likes) FROM ratings);
SELECT m.movie_title, COUNT(r.rating_id) as num_ratings_of_5 FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE m.movie_release_year >= 2000 AND r.rating_score = 5 GROUP BY m.movie_id, m.movie_title ORDER BY m.movie_popularity DESC LIMIT 5;
Error: 第 162 个样本有 2 个SQL。
SELECT COUNT(ratings.user_id), movies.movie_image_url FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE ratings.rating_timestamp_utc BETWEEN '2017-01-01 00:00:00' AND '2017-12-31 23:59:59' AND movies.movie_title = 'Patti Smith: Dream of Life' AND ratings.user_eligible_for_trial = 1;
Error: 第 164 个样本有 2 个SQL。
SELECT     d.director_name AS Director,     m.movie_release_year AS Release_Year,     AVG(r.rating_score) AS Average_Rating_Score FROM     movies m JOIN     ratings r ON m.movie_id = r.movie_id JOIN     ratings_users ru ON r.user_id = ru.user_id JOIN     directors d ON m.director_id = d.director_id WHERE     m.movie_popularity = (SELECT MAX(movie_popularity) FROM movies) AND     ru.user_trialist = 1 GROUP BY     d.director_name,     m.movie_release_year;
SELECT m.movie_title FROM movies m JOIN ratings r ON m.movie_id = r.movie_id WHERE r.user_id = 57756708 ORDER BY r.rating_timestamp_utc DESC LIMIT 1;
SELECT T1.movie_title, T1.director_name, T1.movie_release_year, AVG(T2.rating_score) as avg_rating_score FROM movies AS T1 JOIN ratings AS T2 ON T1.movie_id = T2.movie_id GROUP BY T1.movie_id ORDER BY T1.movie_release_year ASC LIMIT 10;
SELECT ord_date, SUM(qty) as total_quantity FROM sales GROUP BY ord_date ORDER BY total_quantity DESC LIMIT 1;
SELECT t.title FROM titles t JOIN sales s ON t.title_id = s.title_id WHERE YEAR(s.ord_date) = 1992 GROUP BY t.title ORDER BY SUM(s.qty) DESC LIMIT 1;
SELECT t.title, t.price, t.pubdate FROM titles t JOIN sales s ON t.title_id = s.title_id WHERE s.payterms = 'ON invoice';
SELECT T1.title FROM titles AS T1 JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.lorange IS NULL OR T2.lorange = 0 AND T2.royalty >= 10;
SELECT T1.title, T2.royalty FROM titles AS T1 JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T1.title_id = 'BU2075' AND T2.lorange > 10000 AND T2.hirange < 50000;
SELECT T1.title, T2.lorange FROM titles AS T1 JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.hirange IS NULL OR T2.hirange >= T1.ytd_sales ORDER BY T2.royalty DESC LIMIT 1;
SELECT t.title, p.pub_name FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE p.country = 'USA';
SELECT rs.royalty FROM roysched rs JOIN titles t ON rs.title_id = t.title_id WHERE t.ytd_sales = (SELECT MAX(ytd_sales) FROM titles WHERE title_id IN (SELECT title_id FROM roysched WHERE hirange < 20000)) AND rs.hirange < 20000;
SELECT t.title, t.notes, p.pub_name FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE YEAR(t.pubdate) = 1991;
SELECT t.title FROM titles t JOIN sales s ON t.title_id = s.title_id JOIN stores st ON s.stor_id = st.stor_id WHERE s.qty > 20 AND st.state = 'CA';
SELECT     s.stor_name,     t.title,     MIN(sales.qty) as least_quantity FROM     sales JOIN     stores s ON sales.stor_id = s.stor_id JOIN     titles t ON sales.title_id = t.title_id WHERE     sales.stor_id = (         SELECT             stor_id         FROM             sales         GROUP BY             stor_id         ORDER BY             SUM(qty) DESC         LIMIT 1     ) GROUP BY     s.stor_name, t.title ORDER BY     sales.qty ASC LIMIT 1;
SELECT t.title, p.pub_name, rs.royalty FROM titles t JOIN publishers p ON t.pub_id = p.pub_id JOIN roysched rs ON t.title_id = rs.title_id WHERE t.title_id = 'BU 2075';
SELECT     s.stor_name,     (SUM(CASE WHEN sa.payterms = 'Net 30' THEN sa.qty ELSE 0 END) * 100.0 / SUM(sa.qty)) AS Net30_Percentage FROM     stores s JOIN     sales sa ON s.stor_id = sa.stor_id WHERE     s.stor_id = 7066;
SELECT AVG(titles.ytd_sales), publishers.pub_name FROM titles JOIN publishers ON titles.pub_id = publishers.pub_id WHERE publishers.pub_id = 877;
SELECT fname, lname FROM employee WHERE YEAR(hire_date) < 1990;
SELECT fname, lname, hire_date FROM employee WHERE job_lvl = (SELECT MIN(job_LVL) FROM employee);
SELECT YEAR(hire_date) AS hire_year, COUNT(emp_id) AS num_hired FROM employee GROUP BY YEAR(hire_date) ORDER BY num_hired DESC LIMIT 1;
SELECT e.* FROM employee e JOIN jobs j ON e.job_id = j.job_id WHERE e.job_LVL = j.max_LVL;
SELECT E.fname, E.lname, E.hire_date FROM employee E JOIN jobs J ON E.job_id = J.job_id WHERE J.job_desc = 'Chief Executive Officer';
SELECT e.fname, e.lname, p.pub_name FROM employee e JOIN publishers p ON e.pub_id = p.pub_id WHERE p.country != 'USA';
SELECT e.fname, e.lname, j.job_desc FROM employee e JOIN jobs j ON e.job_id = j.job_id JOIN publishers p ON e.pub_id = p.pub_id WHERE p.pub_name = 'GGG&G';
SELECT p.pub_name, t.type FROM publishers p JOIN titles t ON p.pub_id = t.pub_id ORDER BY p.pub_name;
SELECT p.pub_name FROM publishers p JOIN titles t ON p.pub_id = t.pub_id WHERE YEAR(t.pubdate) = 1991 GROUP BY p.pub_name ORDER BY COUNT(t.title_id) DESC LIMIT 1;
SELECT title FROM titles JOIN publishers ON titles.pub_id = publishers.pub_id WHERE publishers.pub_name = 'Binnet & Hardley' ORDER BY titles.price DESC LIMIT 1;
SELECT e.fname, e.lname, j.job_desc FROM employee e JOIN jobs j ON e.job_id = j.job_id WHERE e.job_LVL > 200;
SELECT a.au_fname, a.au_lname FROM authors a JOIN titleauthor ta ON a.au_id = ta.au_id JOIN titles t ON ta.title_id = t.title_id WHERE t.type = 'business';
SELECT t.title, t.ytd_sales FROM titles t JOIN titleauthor ta ON t.title_id = ta.title_id JOIN authors a ON a.au_id = ta.au_id WHERE a.contract = 0;
SELECT T3.title FROM authors AS T1 JOIN titleauthor AS T2 ON T1.au_id = T2.au_id JOIN titles AS T3 ON T2.title_id = T3.title_id WHERE T1.state = 'CA' AND T1.contract = 0 ORDER BY T3.ytd_sales DESC LIMIT 1;
SELECT T2.au_fname, T2.au_lname FROM titleauthor AS T1 JOIN authors AS T2 ON T1.au_id = T2.au_id JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T3.title = 'Sushi, Anyone?';
SELECT (COUNT(CASE WHEN j.job_desc IN ('Editor', 'Designer') THEN e.emp_id END) * 100.0 / COUNT(e.emp_id)) AS Percentage_Editor_Designer FROM employee e JOIN jobs j ON e.job_id = j.job_id;
SELECT t.title FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE t.ytd_sales > (SELECT AVG(ytd_sales) FROM titles) ORDER BY p.pub_name;
SELECT COUNT(*) FROM publishers WHERE country = 'USA';
SELECT pub_info.* FROM pub_info, publishers WHERE pub_info.pub_id = publishers.pub_id AND publishers.pub_name = 'New Moon Books';
SELECT e.fname FROM employee e JOIN jobs j ON e.job_id = j.job_id WHERE j.job_desc = 'Managing Editor';
SELECT MAX(job_lvl) FROM employee WHERE hire_date = (SELECT MIN(hire_date) FROM employee);
SELECT T2.city FROM sales AS T1 JOIN stores AS T2 ON T1.stor_id = T2.stor_id GROUP BY T2.city ORDER BY SUM(T1.qty) DESC LIMIT 1;
SELECT t.price FROM titles t JOIN sales s ON t.title_id = s.title_id GROUP BY t.title_id ORDER BY SUM(s.qty) DESC LIMIT 1;
SELECT s.stor_name FROM stores s JOIN sales sa ON s.stor_id = sa.stor_id JOIN titles t ON sa.title_id = t.title_id WHERE t.title = 'Life Without Fear';
SELECT COUNT(*) FROM stores s JOIN sales sa ON s.stor_id = sa.stor_id JOIN titles t ON sa.title_id = t.title_id WHERE t.title = 'Life Without Fear' AND s.state = 'Massachusetts';
SELECT publishers.country FROM publishers JOIN titles ON publishers.pub_id = titles.pub_id WHERE titles.title = 'Life Without Fear';
SELECT p.pub_name FROM publishers p JOIN titles t ON p.pub_id = t.pub_id WHERE t.price = (SELECT MAX(price) FROM titles);
SELECT COUNT(DISTINCT T2.pub_id) FROM publishers AS T1 JOIN titles AS T2 ON T1.pub_id = T2.pub_id WHERE T1.country = 'USA' AND T2.price > 15;
SELECT t1.title, t1.price, t1.ytd_sales, t1.pubdate, t2.au_fname, t2.au_lname FROM (     SELECT title, SUM(qty) as total_qty, price, ytd_sales, pubdate     FROM sales     JOIN titles ON sales.title_id = titles.title_id     GROUP BY sales.title_id     ORDER BY total_qty DESC     LIMIT 3 ) as t1 JOIN titleauthor ON t1.title_id = titleauthor.title_id JOIN authors as t2 ON titleauthor.au_id = t2.au_id;
SELECT COUNT(*) FROM sales s JOIN titles t ON s.title_id = t.title_id JOIN stores st ON s.stor_id = st.stor_id WHERE t.type = 'business' AND st.state = 'Massachusetts';
SELECT AVG(qty) FROM sales JOIN titles ON sales.title_id = titles.title_id WHERE titles.title = 'Life Without Fear';
SELECT     (SELECT AVG(job_LVL) FROM employee     JOIN jobs ON employee.job_id = jobs.job_id     WHERE jobs.job_desc = 'Managing Editor') AS avg_level,     (SELECT MAX(job_lvl) FROM employee     JOIN jobs ON employee.job_id = jobs.job_id     WHERE jobs.job_desc = 'Managing Editor') -     (SELECT AVG(job_LVL) FROM employee     JOIN jobs ON employee.job_id = jobs.job_id     WHERE jobs.job_desc = 'Managing Editor') AS levels_between_avg_and_highest FROM     dual;
SELECT title FROM titles WHERE type = 'business' ORDER BY price LIMIT 1;
SELECT type FROM titles WHERE advance = (SELECT MAX(advance) FROM titles);
SELECT T3.royalty FROM sales AS T1 JOIN titles AS T2 ON T1.title_id = T2.title_id JOIN roysched AS T3 ON T2.title_id = T3.title_id WHERE T1.qty = (SELECT MAX(qty) FROM sales)
SELECT job_lvl FROM employee WHERE lname = 'O''Rourke';
SELECT emp_id FROM employee WHERE minit IS NULL OR minit = '' ORDER BY job_lvl DESC LIMIT 1;
SELECT authors.contract FROM authors JOIN titleauthor ON authors.au_id = titleauthor.au_id JOIN titles ON titleauthor.title_id = titles.title_id WHERE titles.title = 'Sushi, Anyone?';
Error: 第 220 个样本有 2 个SQL。
SELECT j.job_desc FROM jobs j JOIN employee e ON j.job_id = e.job_id WHERE e.fname = 'Pedro' AND e.lname = 'S Afonso';
SELECT (T2.max_lvl - T1.job_LVL) AS levels_left FROM employee AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.fname = 'Diego' AND T1.minit = 'W' AND T1.lname = 'Roel';
SELECT T1.notes FROM titles AS T1 JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE T2.ord_date = '1994-09-14';
SELECT T1.type FROM titles AS T1 JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE T2.ord_date = '1993-05-29';
SELECT pub_name, city, state, country FROM publishers WHERE country = 'France';
SELECT p.pub_name FROM publishers p JOIN titles t ON p.pub_id = t.pub_id WHERE t.title = 'Silicon Valley Gastronomic Treats';
SELECT city FROM employee JOIN publishers ON employee.pub_id = publishers.pub_id WHERE fname = 'Victoria' AND lname = 'Ashworth';
SELECT COUNT(s.ord_num) FROM sales s JOIN stores st ON s.stor_id = st.stor_id WHERE st.city = 'Remulade';
SELECT     (SUM(case when S.city = 'Fremont' and YEAR(S.ord_date) = 1993 then S.qty else 0 end) -      SUM(case when S.city = 'Portland' and YEAR(S.ord_date) = 1993 then S.qty else 0 end)) /     SUM(case when S.city = 'Fremont' and YEAR(S.ord_date) = 1993 then S.qty else 0 end) * 100 AS PercentMore FROM sales SA JOIN stores S ON SA.stor_id = S.stor_id WHERE YEAR(SA.ord_date) = 1993;
SELECT     100 * (SUM(CASE WHEN job_desc = 'publisher' THEN 1 ELSE 0 END) - SUM(CASE WHEN job_desc = 'designer' THEN 1 ELSE 0 END)) /     SUM(CASE WHEN job_desc = 'designer' THEN 1 ELSE 0 END) AS percentage_more FROM     employee JOIN     jobs ON employee.job_id = jobs.job_id;
Error: 第 231 个样本有 2 个SQL。
SELECT T1.title, T1.type, T1.price FROM titles AS T1 JOIN roysched AS T2 ON T1.title_id = T2.title_id WHERE T2.royalty > (SELECT AVG(royalty) FROM roysched) GROUP BY T1.title_id;
SELECT T1.title, T1.type, T1.price FROM titles AS T1 JOIN (     SELECT title_id, AVG(ord_num) as avg_ord_num     FROM sales     WHERE YEAR(ord_date) = 1994     GROUP BY title_id ) AS T2 ON T1.title_id = T2.title_id WHERE T2.avg_ord_num < (     SELECT AVG(ord_num)     FROM sales     WHERE YEAR(ord_date) = 1994 );
SELECT title, type, price FROM titles WHERE pub_id = (SELECT pub_id FROM publishers WHERE pub_name = 'New Moon Books') ORDER BY price ASC;
SELECT t1.title, MAX(t2.royalty) as MaxRoyalty FROM titles AS t1 JOIN roysched AS t2 ON t1.title_id = t2.title_id JOIN publishers AS t3 ON t1.pub_id = t3.pub_id WHERE t3.country = 'USA' GROUP BY t1.title ORDER BY MaxRoyalty DESC;
SELECT     (SELECT AVG(t.royalty) FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE p.country = 'USA') -     (SELECT AVG(t.royalty) FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE p.country != 'USA') AS royalty_difference;
SELECT     AVG(e1.job_LVL) - AVG(e2.job_LVL) AS avg_level_diff FROM     employee e1 JOIN     publishers p1 ON e1.pub_id = p1.pub_id JOIN     jobs j1 ON e1.job_id = j1.job_id JOIN     employee e2 JOIN     publishers p2 ON e2.pub_id = p2.pub_id JOIN     jobs j2 ON e2.job_id = j2.job_id WHERE     j1.job_desc = 'Marketing manager' AND p1.country = 'USA'     AND j2.job_desc = 'Marketing manager' AND p2.country != 'USA';
SELECT t.title, p.pub_name, t.price FROM titles t JOIN publishers p ON t.pub_id = p.pub_id WHERE t.notes LIKE '%helpful hints%electronic resources%';
SELECT T1.title, T2.pub_name, T1.ytd_sales FROM titles AS T1 JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.notes LIKE '%Carefully researched study of the effects of strong emotions on the body%' AND T2.state IS NOT NULL;
SELECT T3.title FROM sales AS T1 JOIN stores AS T2 ON T1.stor_id = T2.stor_id JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'CA' GROUP BY T3.title HAVING SUM(T1.qty) > (SELECT AVG(qty) FROM sales) ORDER BY SUM(T1.qty) DESC LIMIT 5;
SELECT Date_received FROM callcenterlogs WHERE ser_time = (SELECT MAX(ser_time) FROM callcenterlogs)
SELECT ser_start FROM callcenterlogs WHERE Date_received = '2017-03-22' ORDER BY ser_start ASC LIMIT 1;
SELECT     ComplaintID,     priority FROM     callcenterlogs WHERE     ComplaintID IN ('CR2400594', 'CR2405641') ORDER BY     priority DESC LIMIT 1;
SELECT first, middle, last FROM client WHERE sex = 'Male' AND year > 1990;
SELECT COUNT(*) FROM events JOIN client ON events.Client_ID = client.client_id WHERE client.first = 'Diesel' AND client.last = 'Galloway';
SELECT T1.Sub-product FROM events AS T1 JOIN client AS T2 ON T1.Client_ID = T2.client_id WHERE T2.first = 'Diesel' AND T2.last = 'Galloway' AND T1.`Date received` = '2014-07-03';
SELECT e.Tags FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE e.Date_received = '2016-10-28' AND c.first = 'Matthew' AND c.last = 'Pierce' AND e."Consumer consent provided?" NOT IN (NULL, 'N/A', 'Empty');
SELECT     TIMESTAMPDIFF(DAY, e."Date received", e."Date sent to company") AS Delay FROM     events e JOIN     client c ON e.Client_ID = c.client_id WHERE     c.first = 'Matthew' AND c.last = 'Pierce' AND e."Date received" = '2016-10-28';
SELECT c.first, c.middle, c.last FROM client c JOIN callcenterlogs l ON c.client_id = l.rand_client WHERE l.Date_received = '2017-03-27' AND l.server = 'MICHAL';
SELECT cc.ser_time FROM callcenterlogs cc JOIN client cl ON cc.rand_client = cl.client_id WHERE cc.Date_received = '2017-03-27' AND cl.first = 'Rachel' AND cl.last = 'Hicks'
SELECT COUNT(*) FROM events JOIN client ON events.Client_ID = client.client_id WHERE client.city = 'New York' AND events.Issue = 'Deposits and withdrawals';
SELECT c.first, c.middle, c.last FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.`Company response to consumer` = 'In progress';
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e."Timely response?" = 'Yes' AND c.city = 'New York';
SELECT COUNT(*) FROM events JOIN client ON events.Client_ID = client.client_id WHERE events.Product = 'Credit card' AND YEAR(events.`Date received`) = 2016 AND client.sex = 'Male';
SELECT d.division FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.first = 'Diesel' AND c.last = 'Galloway';
SELECT first, middle, last FROM client WHERE sex = 'Male' AND district_id IN (     SELECT district_id     FROM district     WHERE division = 'Pacific' );
Error: 第 257 个样本有 2 个SQL。
SELECT     ((SUM(CASE WHEN YEAR(events."Date received") = 2017 THEN 1 ELSE 0 END) -       SUM(CASE WHEN YEAR(events."Date received") = 2016 THEN 1 ELSE 0 END)) /      (SUM(CASE WHEN YEAR(events."Date received") = 2016 THEN 1 ELSE 0 END))) * 100 AS Percentage_Increase FROM     events JOIN     client ON events.Client_ID = client.client_id JOIN     district ON client.district_id = district.district_id WHERE     district.city = 'New York' AND     YEAR(events."Date received") BETWEEN 2016 AND 2017;
SELECT ser_time FROM callcenterlogs WHERE `Date received` = '2017-02-22' AND rand_client = 'C00007127';
SELECT state.State FROM state JOIN client ON state.StateCode = client.state WHERE client.email = 'wyatt.collins@gmail.com';
SELECT e.Sub_product FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Lennox' AND c.middle = 'Oliver' AND c.last = 'Drake' AND c.sex = 'Male';
SELECT e.Sub_issue FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Gunner' AND c.middle = 'Omer' AND c.last = 'Fuller' AND c.sex = 'Male';
SELECT     CASE         WHEN e."Consumer consent provided?" NOT IN (NULL, 'N/A', 'Empty') THEN 'Yes'         ELSE 'No'     END AS ConsentProvided FROM     events e JOIN     client c ON e.Client_ID = c.client_id WHERE     c.first = 'Lyric' AND     c.middle = 'Emely' AND     c.last = 'Taylor' AND     c.sex = 'Female' AND     e."Date received" = '2016-05-20';
SELECT DATEDIFF(TIME_TO_SEC(events.`Date sent to company`), TIME_TO_SEC(events.`Date received`)) AS Delay_Days FROM events JOIN client ON events.Client_ID = client.client_id WHERE client.first = 'Brantley' AND client.middle = 'Julian' AND client.last = 'Stanley' AND client.sex = 'Male' AND events.`Date received` = '2012-05-18'
SELECT d.city FROM reviews r JOIN district d ON r.district_id = d.district_id WHERE r.Date = '2018-09-11';
SELECT Reviews FROM reviews JOIN district ON reviews.district_id = district.district_id WHERE district.city = 'Jacksonville' AND reviews.Date = '2017-07-22';
SELECT T3.Product FROM district AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id JOIN reviews AS T3 ON T3.district_id = T2.district_id WHERE T1.city = 'Indianapolis' AND T3.Date = '2016-10-07'
Error: 第 268 个样本有 2 个SQL。
SELECT c.year, c.month, c.day FROM client c JOIN callcenterlogs cl ON c.client_id = cl.rand_client WHERE cl.Complaint_ID = 'CR0217298';
SELECT T1.phone FROM client AS T1 JOIN callcenterlogs AS T2 ON T1.client_id = T2.rand_client WHERE T2.Complaint_ID = 'CR0100432';
SELECT MULTIPLY(DIVIDE(SUM(CASE WHEN c.sex = 'Female' THEN 1 ELSE 0 END), COUNT(c.client_id)), 1.0) AS FemalePercentage FROM callcenterlogs cl JOIN client c ON cl.rand_client = c.client_id WHERE cl.Date_received = '2017-03-27'
SELECT     (COUNT(CASE WHEN e."Consumer consent provided?" = 'Consent provided' THEN 1 END) * 1.0 / COUNT(e.client_id)) * 100 AS Percentage FROM     events e JOIN     client c ON e.client_id = c.client_id WHERE     c.first = 'Mason' AND c.middle = 'Javen' AND c.last = 'Lopez' AND c.sex = 'Male';
SELECT COUNT(*), Complaint_ID FROM callcenterlogs WHERE priority = 2 AND Date_received BETWEEN '2017-03-01' AND '2017-03-31';
SELECT first, middle, last, year, month, day, email FROM client WHERE age > 65 ORDER BY age DESC;
SELECT Product, COUNT(*) AS CountOfFiveStars FROM reviews WHERE Stars = 5 GROUP BY Product ORDER BY CountOfFiveStars DESC LIMIT 1;
SELECT State FROM state WHERE Region = 'South';
SELECT c.email FROM client c JOIN callcenterlogs l ON c.client_id = l.rand_client WHERE l.outcome = 'Hang';
SELECT AVG(age) FROM client JOIN state ON client.state = state.StateCode WHERE state.Region = 'Midwest';
SELECT c.first, c.middle, c.last, c.phone FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e."Submitted via" = 'fax';
SELECT d.city, d.state_abbrev, d.division FROM district d JOIN reviews r ON d.district_id = r.district_id WHERE r.Product = 'Eagle Capital' AND r.Stars < (SELECT AVG(Stars) FROM reviews WHERE Product = 'Eagle Capital') GROUP BY d.district_id;
SELECT COUNT(*) FROM callcenterlogs c JOIN client cl ON c.rand_client = cl.client_id JOIN district d ON cl.district_id = d.district_id WHERE cl.age BETWEEN 12 AND 20 AND d.division = 'Mountain';
SELECT COUNT(*) FROM events JOIN client ON events.Client_ID = client.client_id WHERE events.Product = 'Credit card' AND client.sex = 'female';
SELECT c.first, c.middle, c.last FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE c.year BETWEEN 1980 AND 2000 AND c.sex = 'Male' AND e."Submitted via" = 'referral';
SELECT Submitted_via, COUNT(Complaint_ID) as Num_Complaints FROM events JOIN state ON events.state_abbrev = state.StateCode WHERE state.State = 'Florida' GROUP BY Submitted_via ORDER BY Num_Complaints DESC LIMIT 1;
SELECT AVG(count) AS average_complaints FROM (     SELECT COUNT(DISTINCT c.Complaint_ID) AS count     FROM events e     JOIN client cl ON e.Client_ID = cl.client_id     WHERE e.Company_response_to_consumer = 'Closed with explanation'     AND cl.city = 'New Bedford'     GROUP BY YEAR(e.Date_received) ) as yearly_complaints;
SELECT (COUNT(CASE WHEN T1.Consumer disputed? = 'Yes' AND T3.city = 'Houston' THEN 1 END) * 1.0 / COUNT(T1.client_id)) * 100 AS Percentage FROM events AS T1 JOIN client AS T2 ON T1.Client_ID = T2.client_id JOIN district AS T3 ON T2.district_id = T3.district_id;
SELECT COUNT(client.client_id) FROM client JOIN events ON client.client_id = events.Client_ID JOIN district ON client.district_id = district.district_id WHERE district.city = 'Syracuse';
SELECT (COUNT(case when priority = 1 then 'Complaint ID' end) * 1.0 / COUNT('Complaint ID')) * 100 as Percentage FROM callcenterlogs JOIN client ON callcenterlogs.rand_client = client.client_id JOIN state ON client.state = state.StateCode WHERE state.State = 'California';
SELECT     (AVG(c.age) FILTER (WHERE c.age > 65) -      AVG(c.age) FILTER (WHERE c.age BETWEEN 35 AND 55)) as age_difference FROM     client c JOIN     state s ON c.state = s.StateCode WHERE     s.Region = 'Northeast';
SELECT Complaint_ID FROM callcenterlogs ORDER BY ser_time DESC LIMIT 3;
SELECT COUNT(*) FROM client WHERE email NOT LIKE '%@gmail.com';
SELECT client_id FROM events WHERE Consumer_consent_provided IS NULL OR Consumer_consent_provided = 'N/A' OR Consumer_consent_provided = ''
SELECT e.Complaint_ID FROM events e JOIN callcenterlogs c ON e.Complaint_ID = c."Complaint ID" WHERE e."Date sent to company" = '2014-09-25' GROUP BY e.Complaint_ID ORDER BY (julianday(e."Date sent to company") - julianday(c."Date received")) DESC LIMIT 1;
SELECT Date_received, Complaint_ID FROM callcenterlogs WHERE priority = 2 ORDER BY Date_received;
SELECT COUNT(*) FROM callcenterlogs WHERE outcome != 'AGENT';
SELECT COUNT(*) FROM callcenterlogs JOIN events ON callcenterlogs.Complaint ID = events.Complaint ID WHERE callcenterlogs.server = 'SHARON' AND events.Product = 'Credit Card';
SELECT T3.Region FROM reviews AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T1.Stars = 1 GROUP BY T3.Region ORDER BY COUNT(*) DESC LIMIT 1;
SELECT YEAR(year) FROM client WHERE client_id IN (     SELECT Client_ID     FROM events     WHERE "Sub-product" = '(CD) Certificate of deposit'     GROUP BY Client_ID     ORDER BY COUNT(*) DESC     LIMIT 1 )
SELECT COUNT(*) FROM events JOIN district ON events.district_id = district.district_id WHERE events.Issue = 'Billing disputes' AND district.division = 'Mountain';
SELECT COUNT(*) FROM client WHERE state = 'Massachusetts' AND sex = 'Male';
SELECT DISTINCT c.last FROM client c JOIN callcenterlogs cl ON c.client_id = cl.rand_client WHERE cl.type = 'PS' AND cl.server = 'TOVA';
SELECT COUNT(*) FROM client c JOIN reviews r ON c.client_id = r.Client_ID WHERE c.age < 35 AND r.Product = 'Eagle National Mortgage' AND r.Stars = 1;
SELECT COUNT(*) FROM client c JOIN callcenterlogs l ON c.client_id = l.rand_client WHERE c.sex = 'Male' AND c.year = 1977 AND l.priority = 0;
SELECT c.first FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e."Consumer consent provided?" NOT IN ('N/A', NULL, '') AND e.Tags = 'Older American';
SELECT T1.State FROM state AS T1 JOIN callcenterlogs AS T2 ON T1.StateCode = T2.rand_client WHERE T2.priority = 0 GROUP BY T1.State ORDER BY COUNT(T2.ComplaintID) DESC LIMIT 1;
SELECT COUNT(*) FROM callcenterlogs c JOIN client cl ON c.rand_client = cl.client_id JOIN events e ON c.Complaint_ID = e.Complaint_ID WHERE cl.sex = 'Female' AND c.ser_time BETWEEN '15:00:01' AND '23:59:59' AND e."Timely response?" = 'Yes';
SELECT COUNT(*) FROM callcenterlogs c JOIN events e ON c.Complaint ID = e.Complaint ID WHERE c.ser_time < '00:05:00' AND c.server = 'DORIT' AND e."Company response to consumer" = 'Closed with explanation' AND e."Submitted via" = 'Phone';
Error: 第 308 个样本有 2 个SQL。
SELECT COUNT(*) FROM reviews JOIN client ON reviews.Client_ID = client.client_id WHERE client.age BETWEEN 30 AND 50 AND reviews.Reviews LIKE '%Great%';
SELECT c.address_1, c.address_2 FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e."Timely response?" = 'Yes' AND e."Consumer disputed?" = 'Yes';
SELECT COUNT(*) FROM events JOIN client ON events.Client_ID = client.client_id WHERE client.sex = 'Female' AND client.year = 2000 AND events.Submitted_via != 'Web';
SELECT events.Consumer_complaint_narrative FROM events JOIN client ON events.Client_ID = client.client_id WHERE client.first = 'Brenda' AND client.last = 'Mayer';
SELECT COUNT(*) FROM callcenterlogs c JOIN client cl ON c.rand_client = cl.client_id JOIN events e ON c.Complaint_ID = e.Complaint_ID WHERE cl.email LIKE '%gmail.com' AND e."Date received" BETWEEN '2017-02-01' AND '2017-02-28';
SELECT AVG(Stars) FROM reviews JOIN district ON reviews.district_id = district.district_id JOIN state ON district.state_abbrev = state.StateCode WHERE state.State = 'Oregon';
SELECT     (COUNT(CASE WHEN e.Submitted_via = 'Postal mail' AND c.age >= 50 THEN c.client_id END) * 1.0 / COUNT(c.client_id)) * 100 AS percentage FROM     events e JOIN     client c ON e.Client_ID = c.client_id WHERE     e.Submitted_via = 'Postal mail' AND c.age >= 50;
SELECT AVG(age) FROM client WHERE city = 'Norwalk';
SELECT COUNT(*) FROM client c JOIN reviews r ON c.client_id = r.Client_ID JOIN district d ON c.district_id = d.district_id WHERE c.city = 'Kansas City' AND r.Stars = 1;
SELECT state.State FROM state JOIN client ON state.StateCode = client.state JOIN reviews ON client.client_id = reviews.Client_ID WHERE reviews.Stars = 5 GROUP BY state.State ORDER BY COUNT(client.client_id) DESC LIMIT 1;
SELECT T1.Region FROM state AS T1 JOIN client AS T2 ON T1.StateCode = T2.state WHERE T2.first = 'Noah' AND T2.last = 'Thompson';
SELECT e.Submitted_via FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Kyran' AND c.last = 'Muller';
SELECT DISTINCT e.Product FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.year > 2005;
SELECT cc.ser_time FROM callcenterlogs cc JOIN events e ON cc.Complaint ID = e.Complaint ID JOIN client c ON cc.rand_client = c.client_id WHERE c.first = 'Kendall' AND c.last = 'Allen' AND e.Product = 'Credit Card';
SELECT e.Issue FROM events e JOIN callcenterlogs c ON e.Complaint_ID = c.Complaint_ID WHERE c.ser_time = (SELECT MAX(ser_time) FROM callcenterlogs);
SELECT COUNT(*) FROM events JOIN client ON events.Client_ID = client.client_id WHERE events.Submitted_via = 'Fax' AND client.city = 'New York City';
SELECT     (COUNT(CASE WHEN c.sex = 'Male' THEN c.client_id END) * 100 / COUNT(c.client_id)) AS Percentage_Male_Clients FROM     client c JOIN     events e ON c.client_id = e.Client_ID WHERE     e.Product = 'Credit card';
SELECT first, middle, last FROM client JOIN events ON client.client_id = events.Client_ID WHERE events.Tags LIKE '%Older American%' AND (events."Consumer consent provided?" IS NULL OR events."Consumer consent provided?" = 'N/A' OR events."Consumer consent provided?" = '');
SELECT day, month, year FROM client ORDER BY year DESC, month DESC, day DESC LIMIT 1;
SELECT COUNT(*) FROM events WHERE `Consumer disputed?` = 'No' AND `Timely response?` = 'No';
SELECT COUNT(*) FROM callcenterlogs WHERE ser_time > '00:15:00';
SELECT e.Issue FROM events e JOIN callcenterlogs c ON e.Complaint_ID = c.Complaint_ID WHERE c.priority = 2 GROUP BY e.Issue ORDER BY COUNT(e.Issue) DESC LIMIT 1;
SELECT c.first, c.last FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.division = 'Pacific';
SELECT c.social FROM client c JOIN events e ON c.client_id = e.Client_ID GROUP BY c.social ORDER BY COUNT(e.Client_ID) DESC LIMIT 1;
SELECT d.city FROM district d JOIN reviews r ON d.district_id = r.district_id WHERE r.Stars = 1 GROUP BY d.city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT c.address_1, c.address_2 FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Submitted_via = 'Postal mail' AND e.Date_received = '2012-03-14';
SELECT COUNT(*) FROM client JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client WHERE client.sex = 'Female' AND callcenterlogs.priority = 1;
SELECT DISTINCT c.server FROM callcenterlogs c JOIN events e ON c.Complaint ID = e.Complaint ID WHERE e.Submitted via = 'Phone' AND e.Timely response? = 'No';
SELECT e.Issue FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Kaitlyn' AND c.middle = 'Eliza' AND c.last = 'Elliott';
SELECT state.State FROM state JOIN client ON state.StateCode = client.state WHERE client.email = 'skylar.ramirez@gmail.com'
SELECT T1.Region FROM state AS T1 JOIN district AS T2 ON T1.StateCode = T2.state_abbrev JOIN client AS T3 ON T3.district_id = T2.district_id GROUP BY T1.Region ORDER BY COUNT(T3.client_id) DESC LIMIT 1 OFFSET 1;
SELECT c.first, c.middle, c.last FROM client c JOIN callcenterlogs l ON c.client_id = l.rand_client WHERE l.server = 'MORIAH' AND l.Date_received = '2013-09-11';
SELECT     CASE         WHEN c.age BETWEEN 13 AND 19 THEN 'Teenager'         WHEN c.age BETWEEN 20 AND 65 THEN 'Adult'         ELSE 'Elder'     END AS Age_Group,     AVG(c.ser_time) AS Average_Time_in_Minutes FROM     callcenterlogs c JOIN     client cl ON c.rand_client = cl.client_id GROUP BY     Age_Group;
SELECT (COUNT(CASE WHEN c.age <= 65 THEN c.client_id END) * 100.0 / COUNT(c.client_id)) AS Elderly_Complaints_Percentage FROM client c JOIN events e ON c.client_id = e.Client_ID;
SELECT (COUNT(c.client_id) FILTER (WHERE c.sex = 'Male'))*100.0 / COUNT(c.client_id) AS percentage FROM client c WHERE c.city = 'Indianapolis';
SELECT     CASE         WHEN email LIKE '%@gmail.com' THEN 'Google'         WHEN email LIKE '%@outlook.com' THEN 'Microsoft'     END AS Account_Type,     COUNT(client_id) AS Client_Count FROM     retail_complains.client WHERE     age > 13 AND age <= 19 GROUP BY     Account_Type ORDER BY     Client_Count DESC;
SELECT first, middle, last FROM client WHERE email = 'emily.garcia43@outlook.com';
SELECT c.first FROM client c JOIN callcenterlogs l ON c.client_id = l.rand_client WHERE l.priority = 2 GROUP BY c.first ORDER BY COUNT(*) DESC LIMIT 1;
SELECT client.email FROM client JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client WHERE callcenterlogs.type = 'PS';
SELECT c.last FROM client c JOIN callcenterlogs l ON c.client_id = l.rand_client WHERE c.age >= 65 AND l.server = 'YIFAT'
Error: 第 349 个样本有 2 个SQL。
SELECT c.first, c.middle, c.last FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e."Consumer disputed?" = 'Yes';
SELECT cc.ComplaintID FROM callcenterlogs cc JOIN client c ON cc.rand_client = c.client_id WHERE c.year = 1931;
SELECT     (COUNT(CASE WHEN c.email LIKE '%@gmail.com' THEN e.Complaint_ID END) * 100.0 / COUNT(e.Complaint_ID)) AS Percentage FROM     events e JOIN     client c ON e.Client_ID = c.client_id JOIN     callcenterlogs cl ON e.Complaint_ID = cl.Complaint_ID WHERE     cl.server = 'ZOHARI';
SELECT c.first, c.middle, c.last FROM client c JOIN callcenterlogs l ON c.client_id = l.rand_client WHERE l.ser_time >= '00:20:00';
SELECT last FROM client WHERE client_id IN (     SELECT rand_client     FROM callcenterlogs     WHERE priority = 0 ) LIMIT 5;
SELECT cc.call_id FROM callcenterlogs cc JOIN client c ON cc.rand_client = c.client_id WHERE c.first LIKE 'B%';
SELECT e.Product FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.first = 'Alexander' AND c.middle = 'Bronx' AND c.last = 'Lewis';
Error: 第 357 个样本有 2 个SQL。
SELECT e.Product, COUNT(e.Client_ID) as NumComplaints FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.age > 65 GROUP BY e.Product ORDER BY NumComplaints DESC LIMIT 1;
SELECT     CASE         WHEN c.age BETWEEN 13 AND 19 THEN 'teenager'         WHEN c.age BETWEEN 20 AND 64 THEN 'adult'         WHEN c.age >= 65 THEN 'elder'     END AS AgeGroup,     COUNT(e.ComplaintID) AS Complaints FROM     events e JOIN     client c ON e.Client_ID = c.client_id WHERE     e.Product = 'Credit Card' GROUP BY     AgeGroup ORDER BY     Complaints DESC;
SELECT e.Issue FROM events e JOIN callcenterlogs c ON e.Complaint_ID = c.Complaint_ID WHERE c.ser_time < '00:10:00';
SELECT Date_received FROM events WHERE Submitted_via = 'Fax';
SELECT c.first, c.middle, c.last FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Issue = 'Balance transfer';
SELECT T1.email FROM client AS T1 JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Submitted_via = 'Postal mail'
SELECT AVG(T1.age) FROM client AS T1 JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Company response to consumer` = 'Closed with relief';
SELECT AVG(T1.age) FROM client AS T1 JOIN callcenterlogs AS T2 ON T1.client_id = T2.rand_client WHERE T2.type = 'TT';
SELECT Complaint_ID, call_id, phonefinal FROM callcenterlogs WHERE Date_received BETWEEN '2014-01-01' AND '2014-12-30' AND server = 'AVIDAN';
SELECT AVG(ser_time) FROM callcenterlogs WHERE Date_received BETWEEN '2017-01-01' AND '2017-04-01' AND server = 'DARMON';
SELECT COUNT(*) AS OverlimitComplaints, EXTRACT(YEAR FROM events."Date received") AS Year FROM events JOIN client ON events."Client_ID" = client.client_id WHERE events."Product" = 'Credit card' AND events."Issue" = 'Overlimit fee' GROUP BY Year;
SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE district.division = 'Middle Atlantic' AND client.sex = 'Female' AND client.age < 18;
SELECT day, month, year, email, phone FROM client WHERE city = 'Indianapolis' ORDER BY year DESC, month DESC, day DESC LIMIT 1;
SELECT d.city, COUNT(r.Stars) as NumOf5StarReviews FROM reviews r JOIN district d ON r.district_id = d.district_id WHERE r.Date LIKE '2016%' AND r.Stars = 5 GROUP BY d.city ORDER BY NumOf5StarReviews DESC LIMIT 5;
SELECT MAX(cc.ser_time) FROM callcenterlogs cc JOIN events e ON cc.Complaint ID = e.Complaint ID WHERE e.Issue = 'arbitration';
SELECT social, state FROM client WHERE phone = '100-121-8371';
SELECT first, middle, last, phone FROM client JOIN district ON client.district_id = district.district_id WHERE district.division = 'Pacific';
SELECT c.social, MAX(DATEDIFF(cc.Date sent to company, cc.Date received)) AS Delay_Days, e.Company_response_to_consumer FROM client c JOIN events e ON c.client_id = e.Client_ID JOIN callcenterlogs cc ON e.Complaint ID = cc.Complaint ID GROUP BY c.social, e.Company_response_to_consumer ORDER BY Delay_Days DESC LIMIT 1;
SELECT COUNT(*) FROM client WHERE sex = 'Female' AND age > 30;
SELECT first, last FROM client WHERE city = 'New York City';
SELECT MAX(age) FROM client WHERE sex = 'Male';
SELECT d.division, COUNT(c.client_id) as num_clients FROM client c JOIN district d ON c.district_id = d.district_id GROUP BY d.division;
SELECT     (COUNT(CASE WHEN c.sex = 'Female' THEN c.client_id END) * 100.0 / COUNT(c.client_id)) AS percentage FROM     client c JOIN     district d ON c.district_id = d.district_id WHERE     d.division = 'Middle Atlantic';
SELECT AVG(age) FROM client JOIN district ON client.district_id = district.district_id WHERE district.division = 'South Atlantic';
SELECT city FROM district WHERE district_id IN (     SELECT district_id     FROM client     GROUP BY district_id     ORDER BY COUNT(client_id)     LIMIT 1 ) AND state_abbrev IN (     SELECT StateCode     FROM state     WHERE Region = 'Midwest' )
SELECT COUNT(*) FROM client WHERE state IN (     SELECT StateCode     FROM state     WHERE Region = 'Northeast' ) AND email LIKE '%@outlook.com';
SELECT city FROM district WHERE district_id IN (     SELECT district_id     FROM client     WHERE age > 60 AND state IN (         SELECT StateCode         FROM state         WHERE Region = 'West North Central'     )     GROUP BY district_id     ORDER BY COUNT(client_id) DESC     LIMIT 1 )
SELECT (COUNT(case when T2.priority = 2 then T1.ComplaintID end) * 100.0 / COUNT(T1.ComplaintID)) as Percentage FROM events AS T1 JOIN callcenterlogs AS T2 ON T1.ComplaintID = T2.ComplaintID WHERE T1.Issue = 'Late Fee' AND YEAR(T1.`Date received`) = 2017;
SELECT state, COUNT(DISTINCT city) AS city_count FROM district GROUP BY state ORDER BY city_count DESC LIMIT 1;
SELECT first, phone FROM client WHERE client_id = (SELECT Client_ID FROM events WHERE Complaint_ID = 'CR0922485');
SELECT client.email FROM client JOIN events ON client.client_id = events.Client_ID WHERE events.`Date received` = '2014-07-03';
SELECT COUNT(*) FROM events JOIN client ON events.Client_ID = client.client_id WHERE events.Date received LIKE '2012%' AND client.city = 'Omaha' AND events.Product = 'Credit card';
SELECT COUNT(*) FROM callcenterlogs JOIN client ON callcenterlogs.rand_client = client.client_id JOIN events ON callcenterlogs.Complaint_ID = events.Complaint_ID WHERE client.sex = 'Female' AND events.Submitted_via = 'Email' AND strftime('%Y', callcenterlogs.`Date received`) BETWEEN '2012' AND '2015';
SELECT client.phone, events.Complaint_ID FROM client JOIN events ON client.client_id = events.Client_ID WHERE events.Company_response_to_consumer = 'In progress';
Error: 第 392 个样本有 2 个SQL。
SELECT     (COUNT(CASE WHEN DATEDIFF(day, e.`Date received`, e.`Date sent to company`) > 5 THEN e.ComplaintID END) * 100 / COUNT(e.ComplaintID)) AS Percentage FROM     events e JOIN     client c ON e.Client_ID = c.client_id JOIN     district d ON c.district_id = d.district_id WHERE     e.`Date received` LIKE '2014%' AND     d.city = 'Houston'
SELECT COUNT(*) FROM events WHERE Date_received LIKE '2012%' AND Submitted_via = 'Email';
SELECT client_id FROM events WHERE `Date received` = '2014-04-16' AND `Submitted via` = 'Fax';
SELECT Date FROM reviews JOIN client ON reviews.Client_ID = client.client_id JOIN district ON client.district_id = district.district_id WHERE Product = 'Eagle Capital' AND district.city = 'Indianapolis' AND district.state_abbrev = 'IN'
SELECT COUNT(*) FROM events WHERE Date_received LIKE '2015%' AND `Timely response?` = 'Yes' AND `Company response to consumer` = 'Closed with explanation';
SELECT cc.Date_received FROM callcenterlogs cc JOIN client cl ON cc.rand_client = cl.client_id WHERE cl.sex = 'Female' AND cl.age BETWEEN 20 AND 40;
SELECT Product FROM reviews JOIN district ON reviews.district_id = district.district_id WHERE Date = '2016-03-14' AND Stars = 1 AND district.city = 'Newton' AND district.state_abbrev = 'MA'
SELECT COUNT(*) FROM reviews JOIN district ON reviews.district_id = district.district_id WHERE reviews.Product = 'Eagle National Bank' AND reviews.Stars = 5 AND district.city = 'Nashville' AND district.state_abbrev = 'TN';
SELECT e.Issue FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.sex = 'Male' AND c.age < 25;
SELECT DISTINCT p.Product FROM reviews r JOIN district d ON r.district_id = d.district_id JOIN state s ON d.state_abbrev = s.StateCode WHERE r.Stars = 1 AND s.Region = 'Midwest';
SELECT DISTINCT events.Product FROM events JOIN callcenterlogs ON events.Complaint_ID = callcenterlogs.Complaint_ID WHERE callcenterlogs.server = 'TOVA' AND events.Date_received LIKE '%03%' AND events.Date_received LIKE '2017%';
SELECT d.division FROM reviews r JOIN district d ON r.district_id = d.district_id WHERE r.Date = '2017-12-17' AND r.Stars = 5 AND r.Product = 'Eagle National Mortgage';
SELECT c.phone FROM client c JOIN events e ON c.client_id = e.Client_ID WHERE e.Product = 'Credit Card' ORDER BY c.year ASC LIMIT 1;
SELECT COUNT(*) FROM events WHERE Date_received LIKE '2014%' AND Submitted_via = 'Phone';
SELECT e.Product, e.Issue FROM events e JOIN client c ON e.Client_ID = c.client_id WHERE c.age > (SELECT AVG(age)*0.6 FROM client);
SELECT     (COUNT(CASE WHEN d.division = 'East North Central' THEN r.Complaint_ID END) * 100.0 / COUNT(r.Complaint_ID)) AS Percentage_East_North_Central FROM     reviews r JOIN     district d ON r.district_id = d.district_id WHERE     r.Stars = 5;
SELECT pc.company_name FROM production_company pc JOIN movie_company mc ON pc.company_id = mc.company_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Four Rooms';
SELECT COUNT(T2.company_id) FROM movie AS T1 JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Four Rooms'
SELECT m.title FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Universal Pictures';
SELECT T1.title FROM movie AS T1 JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id JOIN production_company AS T3 ON T2.company_id = T3.company_id WHERE T3.company_name = 'Universal Pictures' ORDER BY T1.release_date DESC LIMIT 1;
SELECT T3.person_name FROM movie AS T1 JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Pirates of the Caribbean: At World''s End' AND T2.job = 'Director of Photography'
Error: 第 414 个样本有 2 个SQL。
SELECT p.person_name FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Pirates of the Caribbean: At World''s End'
SELECT COUNT(*) FROM movie JOIN movie_crew ON movie.movie_id = movie_crew.movie_id JOIN department ON movie_crew.department_id = department.department_id WHERE movie.title = 'Pirates of the Caribbean: At World''s End' AND department.department_name = 'Producer'
SELECT p.person_name FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE mc.job = 'Producer' AND m.title = 'Pirates of the Caribbean: At World''s End'
SELECT COUNT(*) FROM movie_crew WHERE person_id = (SELECT person_id FROM person WHERE person_name = 'Dariusz Wolski') AND job = 'Director of Photography';
SELECT m.title, AVG(mc.vote_average) as avg_vote FROM movie m JOIN movie_crew mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE mc.job = 'Director of Photography' AND p.person_name = 'Dariusz Wolski' GROUP BY m.movie_id ORDER BY avg_vote DESC LIMIT 1;
SELECT MAX(mc.release_date) FROM movie AS m JOIN movie_crew AS mc ON m.movie_id = mc.movie_id JOIN person AS p ON mc.person_id = p.person_id WHERE p.person_name = 'Dariusz Wolski';
SELECT CAST(SUM(CASE WHEN m.vote_average > 5.0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(m.movie_id) AS percentage FROM movie AS m JOIN movie_crew AS mc ON m.movie_id = mc.movie_id JOIN person AS p ON mc.person_id = p.person_id WHERE p.person_name = 'Dariusz Wolski' AND mc.job = 'Director of Photography'
SELECT AVG(T1.revenue) FROM movie AS T1 JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography';
SELECT title FROM movie WHERE revenue = 559852396;
SELECT mc.job FROM movie_cast AS mc JOIN person AS p ON mc.person_id = p.person_id JOIN movie AS m ON mc.movie_id = m.movie_id WHERE m.title = 'Days of Thunder' AND p.person_name = 'David Rubin';
SELECT COUNT(*) FROM movie m JOIN movie_crew mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE mc.job = 'Director' AND p.person_name = 'Michael Bay';
SELECT COUNT(*) FROM movie_keywords JOIN movie ON movie_keywords.movie_id = movie.movie_id WHERE movie.title = 'I Hope They Serve Beer in Hell'
SELECT p.person_name FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Land of the Dead' AND mc.job = 'Director';
SELECT COUNT(*) FROM movie_company mc JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Paramount Animation';
SELECT COUNT(*) FROM movie_cast mc JOIN gender g ON mc.gender_id = g.gender_id JOIN movie m ON mc.movie_id = m.movie_id WHERE g.gender = 'Female' AND m.title = 'Spider-Man 3';
SELECT T2.keyword_name FROM movie_keywords AS T1 JOIN keyword AS T2 ON T1.keyword_id = T2.keyword_id GROUP BY T2.keyword_name ORDER BY COUNT(T2.keyword_name) DESC LIMIT 1;
SELECT COUNT(*) FROM movie JOIN movie_crew ON movie.movie_id = movie_crew.movie_id JOIN person ON movie_crew.person_id = person.person_id WHERE movie.title = 'The Amityville Horror' AND movie_crew.job = 'Producer'
SELECT pc.company_name FROM production_company pc JOIN movie_company mc ON pc.company_id = mc.company_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Crazy Heart';
SELECT COUNT(*) FROM movie_keywords mk JOIN keyword k ON mk.keyword_id = k.keyword_id WHERE k.keyword_name = 'saving the world';
SELECT m.title, m.popularity FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Cruel and Unusual Films' ORDER BY m.popularity DESC LIMIT 1;
SELECT d.department_name FROM department d JOIN movie_crew mc ON d.department_id = mc.department_id JOIN movie m ON mc.movie_id = m.movie_id JOIN person p ON mc.person_id = p.person_id WHERE m.title = 'Reign of Fire' AND p.person_name = 'Marcia Ross'
SELECT AVG(T1.budget) FROM movie AS T1 JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jaume Collet-Serra' AND T2.job = 'Director';
SELECT (SUM(CASE WHEN T3.gender = 'Male' THEN 1 ELSE 0 END) * 100 / COUNT(T3.gender)) AS Percentage FROM movie AS T1 JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Bride Wars'
SELECT title FROM movie WHERE budget = (SELECT MAX(budget) FROM movie);
SELECT COUNT(*) FROM movie WHERE revenue > 1000000000;
SELECT MIN(release_date) FROM movie;
SELECT COUNT(*) FROM movie_crew JOIN person ON movie_crew.person_id = person.person_id WHERE person.person_name = 'John Young';
SELECT title FROM movie WHERE popularity = (SELECT MAX(popularity) FROM movie);
SELECT person_name FROM person WHERE person_id = 1325273;
SELECT T2.company_name FROM production_country AS T1 JOIN production_company AS T2 ON T1.company_id = T2.company_id GROUP BY T2.company_name ORDER BY COUNT(T2.company_name) DESC LIMIT 1
SELECT person_name FROM movie_cast JOIN person ON movie_cast.person_id = person.person_id JOIN movie ON movie_cast.movie_id = movie.movie_id WHERE character_name = 'Captain Jack Sparrow' AND title LIKE 'Pirates of the Caribbean%';
SELECT m.title, m.popularity FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Walt Disney Pictures' ORDER BY m.popularity DESC LIMIT 1;
SELECT COUNT(*) FROM movie_company JOIN production_company ON movie_company.company_id = production_company.company_id WHERE production_company.company_name = 'Universal Studios';
SELECT pc.company_name FROM production_company pc JOIN movie_company mc ON pc.company_id = mc.company_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.revenue = (SELECT MAX(revenue) FROM movie)
SELECT COUNT(*) FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id JOIN gender g ON mc.gender_id = g.gender_id WHERE mc.movie_id = (SELECT movie_id FROM movie WHERE title = 'Mr. Smith Goes to Washington') AND g.gender = 'Female'
SELECT T1.company_name FROM production_company AS T1 JOIN movie_company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_name HAVING COUNT(T1.company_name) >= 200;
SELECT COUNT(*) FROM movie_cast WHERE person_id = (SELECT person_id FROM person WHERE person_name = 'Harrison Ford');
SELECT m.title FROM movie m JOIN movie_cast mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Jamie Foxx' ORDER BY m.release_date DESC LIMIT 1;
SELECT COUNT(*) FROM movie m JOIN movie_cast mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE m.release_date LIKE '1995%' AND p.person_name = 'Quentin Tarantino';
SELECT T1.title FROM movie AS T1 JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Crime' ORDER BY T1.release_date ASC LIMIT 1;
SELECT COUNT(*) FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'Horror';
SELECT person_id FROM movie_crew WHERE movie_id = 12 AND job = 'Second Film Editor';
SELECT COUNT(*) FROM movie_crew WHERE movie_id = 129 AND job = 'Animation';
SELECT COUNT(mc.person_id), mc.job FROM movie_crew AS mc WHERE mc.movie_id = 19 AND mc.department_id = 7;
SELECT person_id, character_name FROM movie_cast WHERE movie_id = 285 AND cast_order BETWEEN 1 AND 10;
SELECT COUNT(*) FROM movie_cast JOIN person ON movie_cast.person_id = person.person_id WHERE person.person_name = 'Bob Peterson';
SELECT mc.movie_id, mc.character_name FROM movie_cast AS mc JOIN person AS p ON mc.person_id = p.person_id WHERE p.person_name = 'Jim Carrey';
SELECT T3.person_name FROM movie_cast AS T1 JOIN gender AS T2 ON T1.gender_id = T2.gender_id JOIN person AS T3 ON T1.person_id = T3.person_id WHERE T1.movie_id = 1865 AND T2.gender = 'Female'
SELECT m.title FROM movie m JOIN movie_cast mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Jim Carrey';
SELECT p.person_name FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE mc.job = 'Director' AND m.release_date BETWEEN '1916-01-01' AND '1925-12-31';
SELECT COUNT(*) FROM movie m JOIN movie_cast mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE m.release_date BETWEEN '1990-01-02' AND '2000-12-30' AND p.person_name = 'Uma Thurman';
SELECT m.title FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'Horror' AND m.vote_average > 7;
SELECT g.genre_name, m.popularity FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.revenue >= 120000000 AND m.release_date BETWEEN '2012-01-01' AND '2015-12-31';
SELECT COUNT(*) FROM movie JOIN production_country ON movie.movie_id = production_country.movie_id JOIN country ON production_country.country_id = country.country_id WHERE country.country_name = 'India' AND movie.release_date BETWEEN '1990-01-02' AND '2003-12-30' AND movie.revenue > 75000000 AND movie.popularity >= 20;
SELECT m.title, m.revenue, c.country_name FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE m.budget = (SELECT MAX(budget) FROM movie)
SELECT m.title FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE l.language_name = 'Latin' AND m.release_date BETWEEN '1990-01-01' AND '1995-12-31';
SELECT AVG(T1.revenue) FROM movie AS T1 JOIN production_country AS T2 ON T1.movie_id = T2.movie_id JOIN country AS T3 ON T2.country_id = T3.country_id WHERE T3.country_name = 'United States of America' AND T1.release_date LIKE '2006%';
SELECT     (AVG(CASE WHEN pc.country_name = 'United States of America' THEN m.revenue ELSE 0 END) -      AVG(CASE WHEN pc.country_name = 'India' THEN m.revenue ELSE 0 END)) AS revenue_gap FROM     movie m JOIN     production_country pc ON m.movie_id = pc.movie_id WHERE     m.release_date LIKE '2016%' GROUP BY     pc.country_name;
SELECT (COUNT(CASE WHEN mg.genre_id = (     SELECT g.genre_id FROM genre g WHERE g.genre_name = 'Romance' ) THEN m.movie_id ELSE NULL END) * 100.0 / COUNT(m.movie_id)) AS percentage FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE c.country_name = 'India' AND m.release_date BETWEEN '2015-01-01' AND '2015-12-31';
SELECT person_name FROM person JOIN movie_cast ON person.person_id = movie_cast.person_id WHERE character_name = 'Optimus Prime (voice)'
SELECT gender.gender FROM gender JOIN movie_cast ON gender.gender_id = movie_cast.gender_id WHERE movie_cast.character_name = 'USAF Master Sgt. Epps'
SELECT pc.company_name FROM production_company pc JOIN movie_company mc ON pc.company_id = mc.company_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Ultramarines: A Warhammer 40,000 Movie'
SELECT m.title FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Radiant Film GmbH';
SELECT g.genre_name FROM genre g JOIN movie_genres mg ON mg.genre_id = g.genre_id JOIN movie m ON m.movie_id = mg.movie_id WHERE m.title = 'Sky Captain and the World of Tomorrow'
SELECT k.keyword_name FROM keyword k JOIN movie_keywords mk ON k.keyword_id = mk.keyword_id JOIN movie m ON mk.movie_id = m.movie_id WHERE m.title = 'Sky Captain and the World of Tomorrow'
SELECT c.country_name FROM country c JOIN production_country pc ON c.country_id = pc.country_id JOIN movie m ON m.movie_id = pc.movie_id WHERE m.title = 'Gojira ni-sen mireniamu'
SELECT m.title FROM movie m JOIN movie_keywords mk ON m.movie_id = mk.movie_id JOIN keyword k ON mk.keyword_id = k.keyword_id WHERE k.keyword_name = 'extremis';
SELECT m.title FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE c.country_name = 'France' LIMIT 10;
SELECT p.person_name FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Transformers' AND mc.job = 'Director';
SELECT p.person_name, mc.job FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Mad Max: Fury Road' LIMIT 10;
SELECT     SUM(CASE WHEN mg.genre_id = (SELECT genre_id FROM genre WHERE genre_name = 'animation') THEN 1 ELSE 0 END) * 100 / COUNT(m.movie_id) AS percentage FROM     movie m JOIN     production_country pc ON m.movie_id = pc.movie_id JOIN     country c ON pc.country_id = c.country_id JOIN     movie_genres mg ON m.movie_id = mg.movie_id WHERE     c.country_name = 'Japan';
SELECT     SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) /     SUM(CASE WHEN g.gender = 'Male' THEN 1 ELSE 0 END) AS gender_ratio,     COUNT(CASE WHEN g.gender IS NULL THEN 1 ELSE NULL END) AS unspecified_genders FROM     movie m JOIN     movie_cast mc ON m.movie_id = mc.movie_id JOIN     gender g ON mc.gender_id = g.gender_id WHERE     m.title = 'Iron Man';
SELECT title FROM movie WHERE release_date < '2000-01-01' LIMIT 5;
SELECT mk.keyword_id FROM movie AS m JOIN movie_keywords AS mk ON m.movie_id = mk.movie_id WHERE m.title = 'Sin City';
SELECT m.title FROM movie m JOIN movie_keywords mk ON m.movie_id = mk.movie_id JOIN keyword k ON mk.keyword_id = k.keyword_id WHERE k.keyword_name = 'angel';
Error: 第 490 个样本有 2 个SQL。
SELECT mg.genre_id FROM movie_genres mg JOIN movie m ON mg.movie_id = m.movie_id WHERE m.title = 'The Dark Knight'
SELECT m.title FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'Thriller';
SELECT m.title FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE m.movie_status = 'rumoured' AND g.genre_name = 'Drama' LIMIT 5;
SELECT g.genre_name FROM genre g JOIN movie_genres mg ON g.genre_id = mg.genre_id JOIN movie m ON mg.movie_id = m.movie_id WHERE m.revenue = (SELECT MIN(revenue) FROM movie) GROUP BY g.genre_name;
SELECT g.genre_name FROM genre g JOIN movie_genres mg ON g.genre_id = mg.genre_id JOIN movie m ON mg.movie_id = m.movie_id WHERE m.runtime = 14;
SELECT g.genre_name FROM genre g JOIN movie_genres mg ON mg.genre_id = g.genre_id JOIN movie m ON m.movie_id = mg.movie_id WHERE m.vote_average = (     SELECT MAX(vote_average)     FROM movie ) AND m.revenue = (     SELECT MIN(revenue)     FROM movie ) GROUP BY g.genre_name;
SELECT g.genre_name FROM genre g JOIN movie_genres mg ON g.genre_id = mg.genre_id JOIN movie m ON mg.movie_id = m.movie_id WHERE m.tagline = 'A long time ago in a galaxy far, far away…'
SELECT T2.country_id FROM movie AS T1 JOIN production_country AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Pirates of the Caribbean: Dead Man''s Chest'
SELECT m.title FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE c.country_name = 'Canada'
SELECT SUM(m.budget) FROM movie m JOIN movie_keywords mk ON m.movie_id = mk.movie_id JOIN keyword k ON mk.keyword_id = k.keyword_id WHERE k.keyword_name = 'video game';
SELECT AVG(m.revenue) FROM movie m JOIN movie_keywords mk ON m.movie_id = mk.movie_id JOIN keyword k ON mk.keyword_id = k.keyword_id WHERE k.keyword_name = 'civil war';
SELECT title, popularity FROM movie WHERE vote_count = (SELECT MAX(vote_count) FROM movie);
SELECT title FROM movie WHERE budget = 0 ORDER BY revenue DESC LIMIT 1;
SELECT mc.company_id FROM movie AS m JOIN movie_company AS mc ON m.movie_id = mc.movie_id WHERE m.title = 'Gladiator';
SELECT DISTINCT pc.company_id FROM production_company pc JOIN production_country pc_movie ON pc.company_id = pc_movie.company_id JOIN movie m ON pc_movie.movie_id = m.movie_id WHERE m.release_date LIKE '1916%';
SELECT m.title FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Lucasfilm';
SELECT m.title, m.revenue FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Warner Bros. Pictures' ORDER BY m.revenue DESC LIMIT 1;
SELECT m.release_date FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Twentieth Century Fox Film Corporation'
SELECT ml.language_id FROM movie_languages ml JOIN movie m ON ml.movie_id = m.movie_id WHERE m.title = 'Walk the Line';
SELECT ml.language_id FROM movie_languages ml JOIN movie m ON ml.movie_id = m.movie_id WHERE m.popularity = (SELECT MAX(popularity) FROM movie)
SELECT T3.language_name FROM `movie` AS T1 JOIN `movie_languages` AS T2 ON T1.movie_id = T2.movie_id JOIN `language` AS T3 ON T2.language_id = T3.language_id WHERE T1.title = 'C''era una volta il West'
SELECT COUNT(*) FROM movie JOIN movie_languages ON movie.movie_id = movie_languages.movie_id JOIN language ON movie_languages.language_id = language.language_id WHERE movie_status = 'Post Production' AND language_name = 'Nederlands';
SELECT DISTINCT m.tagline FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE l.language_name = 'Polski';
SELECT T1.homepage FROM `movie` AS T1 JOIN `movie_languages` AS T2 ON T1.movie_id = T2.movie_id JOIN `language` AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Bahasa indonesia'
SELECT     (SELECT SUM(revenue) FROM movie JOIN movie_languages ON movie.movie_id = movie_languages.movie_id JOIN language ON movie_languages.language_id = language.language_id WHERE language.language_name = 'English') -     (SELECT SUM(revenue) FROM movie JOIN movie_languages ON movie.movie_id = movie_languages.movie_id JOIN language ON movie_languages.language_id = language.language_id WHERE language.language_name = 'Latin')
SELECT SUM(m.revenue) FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE (pc.company_name = 'Fantasy Films' OR pc.company_name = 'Live Entertainment') AND g.genre_name = 'Fantasy';
SELECT AVG(T1.revenue) FROM movie AS T1 JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin'
SELECT person_name, COUNT(person_name) as count FROM person GROUP BY person_name ORDER BY count DESC LIMIT 1;
SELECT AVG(crew_count) AS average_crews_per_movie FROM (   SELECT movie_id, COUNT(person_id) AS crew_count   FROM movie_crew   GROUP BY movie_id ) AS subquery;
SELECT keyword_name FROM keyword WHERE keyword_name LIKE '%christmas%';
SELECT MAX(runtime) FROM movie;
SELECT country_iso_code FROM country WHERE country_name = 'Kyrgyz Republic';
SELECT overview FROM movie WHERE title = 'The Pacifier';
SELECT COUNT(*) FROM movie_company JOIN production_company ON movie_company.company_id = production_company.company_id WHERE production_company.company_name = 'Eddie Murphy Productions';
SELECT DISTINCT p.person_name FROM person p JOIN movie_cast mc ON p.person_id = mc.person_id WHERE mc.character_name LIKE '%captain%';
SELECT k.keyword_name FROM keyword k JOIN movie_keywords mk ON k.keyword_id = mk.keyword_id JOIN movie m ON mk.movie_id = m.movie_id WHERE m.release_date LIKE '%2006%' GROUP BY k.keyword_name ORDER BY COUNT(k.keyword_name) DESC LIMIT 1;
SELECT COUNT(*) FROM movie JOIN movie_languages ON movie.movie_id = movie_languages.movie_id JOIN language ON movie_languages.language_id = language.language_id WHERE language.language_code = 'vi';
SELECT genre_name FROM (   SELECT genre_id, COUNT(*) AS cnt   FROM movie_genres   GROUP BY genre_id ) AS t1 JOIN genre ON t1.genre_id = genre.genre_id ORDER BY t1.cnt LIMIT 1 OFFSET 2
SELECT T3.language_name FROM movie AS T1 JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T1.tagline = "An offer you can't refuse." AND T2.language_role_id = (SELECT role_id FROM language_role WHERE language_role = 'Original')
SELECT AVG(T1.revenue) FROM movie AS T1 JOIN production_country AS T2 ON T1.movie_id = T2.movie_id JOIN country AS T3 ON T2.country_id = T3.country_id WHERE T3.country_name = 'France'
SELECT mc.character_name FROM movie_cast AS mc JOIN gender AS g ON mc.gender_id = g.gender_id WHERE g.gender = 'Unspecified';
SELECT p.person_name, m.popularity FROM movie m JOIN movie_crew mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE mc.job = 'Director' ORDER BY m.popularity DESC LIMIT 5;
SELECT m.title, g.genre_name, MAX(m.budget) as max_budget FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id GROUP BY g.genre_name, m.title HAVING m.budget = (SELECT MAX(budget) FROM movie WHERE movie_id IN (SELECT movie_id FROM movie_genres WHERE genre_id = g.genre_id)) ;
SELECT m.title FROM movie m JOIN movie_keywords mk ON m.movie_id = mk.movie_id GROUP BY m.movie_id, m.title ORDER BY COUNT(mk.keyword_id) DESC LIMIT 1;
SELECT d.department_name FROM department d JOIN movie_crew mc ON d.department_id = mc.department_id GROUP BY d.department_id ORDER BY COUNT(mc.person_id) DESC LIMIT 1;
SELECT (SUM(CASE WHEN c.country_iso_code = 'US' THEN 1 ELSE 0 END) * 100 / COUNT(c.country_id)) AS percentage FROM production_country pc JOIN country c ON pc.country_id = c.country_id;
Error: 第 537 个样本有 2 个SQL。
SELECT title FROM movie WHERE release_date LIKE '1945%';
SELECT country_id, country_iso_code FROM country WHERE country_name = 'Belgium';
SELECT mc.character_name FROM movie_cast AS mc JOIN person AS p ON mc.person_id = p.person_id WHERE p.person_name = 'Catherine Deneuve';
SELECT m.title FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE l.language_name = 'Somali';
SELECT m.release_date, l.language_name FROM movie m JOIN movie_languages ml ON m.movie_id = ml.movie_id JOIN language l ON ml.language_id = l.language_id WHERE m.popularity = (SELECT MAX(popularity) FROM movie) GROUP BY m.release_date, l.language_name LIMIT 1;
SELECT T3.language_name FROM `movie` AS T1 JOIN `movie_languages` AS T2 ON T1.movie_id = T2.movie_id JOIN `language` AS T3 ON T2.language_id = T3.language_id JOIN `language_role` AS T4 ON T2.language_role_id = T4.role_id WHERE T1.title = 'Four Rooms' AND T4.language_role = 'Original'
SELECT mc.character_name FROM movie_cast AS mc JOIN movie AS m ON mc.movie_id = m.movie_id WHERE m.title = 'Open Water';
SELECT T3.person_name FROM movie AS T1 JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Pirates of the Caribbean: At World''s End' AND T2.cast_order = (SELECT MIN(T2.cast_order) FROM movie AS T1 JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Pirates of the Caribbean: At World''s End')
SELECT p.person_name FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id WHERE mc.job = 'Camera Supervisor';
SELECT DISTINCT d.department_name FROM department d JOIN movie_crew mc ON d.department_id = mc.department_id JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Sally Menke'
SELECT p.person_name, d.department_name FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id JOIN department d ON mc.department_id = d.department_id JOIN movie m ON mc.movie_id = m.movie_id WHERE mc.job = 'Music Editor' AND m.title = 'Pirates of the Caribbean: At World''s End'
SELECT T1.title, T1.revenue FROM movie AS T1 JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id JOIN production_company AS T3 ON T2.company_id = T3.company_id WHERE T3.company_name = 'DreamWorks'
SELECT COUNT(*) FROM movie JOIN production_country ON movie.movie_id = production_country.movie_id JOIN country ON production_country.country_id = country.country_id WHERE country.country_name = 'Canada';
SELECT g.genre_name FROM genre g JOIN movie_genres mg ON mg.genre_id = g.genre_id JOIN movie m ON m.movie_id = mg.movie_id WHERE m.title = 'Forrest Gump';
SELECT pc.company_name FROM production_company pc JOIN movie_company mc ON pc.company_id = mc.company_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.release_date LIKE '2016%' AND (m.runtime - (SELECT AVG(runtime) FROM movie WHERE release_date LIKE '2016%')) / (SELECT AVG(runtime) FROM movie WHERE release_date LIKE '2016%') * 100 > 35;
SELECT     ((COUNT(CASE WHEN kw.keyword_name = 'woman director' THEN m.movie_id END) -       COUNT(CASE WHEN kw.keyword_name = 'independent film' THEN m.movie_id END)) * 100 /      COUNT(m.movie_id)) AS percentage_difference FROM     movie m JOIN     movie_keywords mk ON m.movie_id = mk.movie_id JOIN     keyword kw ON mk.keyword_id = kw.keyword_id GROUP BY     m.movie_id ;
SELECT g.genre_name FROM genre g JOIN movie_genres mg ON mg.genre_id = g.genre_id JOIN movie m ON m.movie_id = mg.movie_id WHERE m.title = 'Dancer in the Dark'
SELECT COUNT(*) FROM movie JOIN movie_genres ON movie.movie_id = movie_genres.movie_id JOIN genre ON movie_genres.genre_id = genre.genre_id WHERE genre.genre_name = 'Adventure' AND movie.release_date LIKE '2000%';
SELECT m.title FROM movie m JOIN movie_company mc ON m.movie_id = mc.movie_id JOIN production_company pc ON mc.company_id = pc.company_id WHERE pc.company_name = 'Paramount Pictures' AND m.release_date LIKE '2000%';
SELECT k.keyword_name FROM keyword k JOIN movie_keywords mk ON k.keyword_id = mk.keyword_id JOIN movie m ON mk.movie_id = m.movie_id WHERE m.title = 'Finding Nemo';
SELECT m.title FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'horror' AND m.vote_average > 7;
Error: 第 559 个样本有 2 个SQL。
SELECT job FROM movie_crew JOIN person ON movie_crew.person_id = person.person_id WHERE person_name = 'Mark Hammel';
SELECT COUNT(*) FROM (   SELECT mc.person_id   FROM movie_cast AS mc   JOIN movie AS m ON mc.movie_id = m.movie_id   JOIN gender AS g ON mc.gender_id = g.gender_id   WHERE m.title = 'Pirates of the Caribbean: At World''s End' AND g.gender = 'male'   GROUP BY mc.person_id   HAVING MIN(mc.cast_order) ) AS main_actors;
SELECT m.title FROM movie m JOIN movie_cast mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Harrison Ford';
SELECT mc.character_name FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE p.person_name = 'Orlando Bloom' AND m.title = 'Pirates of the Caribbean: The Curse of the Black Pearl'
SELECT AVG(CASE WHEN T2.genre_name = 'horror' THEN 1 ELSE 0 END) AS avg_horror_movies FROM movie_genres AS T1 JOIN genre AS T2 ON T1.genre_id = T2.genre_id;
SELECT p.person_name FROM person p JOIN movie_crew mc ON p.person_id = mc.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE mc.job = 'Producer' AND m.title = 'Pirates of the Caribbean: At World''s End'
Error: 第 566 个样本有 2 个SQL。
SELECT COUNT(*) FROM Method WHERE Lang = 'en' AND CommentIsXml = 1;
SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(Method.Name, '.', -2), '.', 1) AS Task FROM Method WHERE Method.NameTokenized = 'online median filter test median window filling'
SELECT Id FROM Solution WHERE SampledAt = (SELECT MAX(SampledAt) FROM Solution);
Error: 第 570 个样本有 2 个SQL。
SELECT R.Id FROM Repo R JOIN Solution S ON R.Id = S.RepoId GROUP BY R.Id ORDER BY COUNT(S.Path) DESC LIMIT 1;
Error: 第 572 个样本有 2 个SQL。
SELECT Path FROM Solution WHERE ProcessedTime = (SELECT MAX(ProcessedTime) FROM Solution);
SELECT MAX(ProcessedTime) FROM Repo ORDER BY Watchers DESC LIMIT 1;
SELECT R.Url FROM Repo R JOIN Solution S ON R.Id = S.RepoId WHERE S.Path = 'nofear_Mara\Mara.sln'
SELECT R.Url, S.WasCompiled FROM Repo R JOIN Solution S ON R.Id = S.RepoId WHERE R.ProcessedTime = (SELECT MAX(ProcessedTime) FROM Repo)
SELECT M.NameTokenized FROM Method M JOIN Solution S ON M.SolutionId = S.Id WHERE S.Path = 'maravillas_linq-to-delicious\tasty.sln'
SELECT R.Url, COUNT(S.Path) as SolutionPaths, SUM(CASE WHEN S.WasCompiled = 0 THEN 1 ELSE 0 END) as NeedsCompilation FROM Repo R JOIN Solution S ON R.Id = S.RepoId WHERE R.Stars BETWEEN 6000 AND 9000 GROUP BY R.Url ORDER BY SolutionPaths DESC LIMIT 1;
SELECT M.ApiCalls FROM Method AS M JOIN Solution AS S ON M.SolutionId = S.Id JOIN Repo AS R ON S.RepoId = R.Id WHERE R.Url = 'https://github.com/wallerdev/htmlsharp.git'
SELECT COUNT(DISTINCT s.Path) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Watchers = (     SELECT MAX(Watchers)     FROM Repo     WHERE Watchers < (         SELECT MAX(Watchers) FROM Repo     ) )
SELECT AVG(s.ProcessedTime) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Url = 'https://github.com/zphingphong/DiscardCustomerApp.git';
SELECT m.FullComment FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.Path = 'bmatzelle_nini\Source\Nini.sln' AND m.NameTokenized = 'alias text add alias';
SELECT Method.ApiCalls FROM Method JOIN Solution ON Method.SolutionId = Solution.Id WHERE Solution.Path = 'mauriciodeamorim_tdd.encontro2\Tdd.Encontro2.sln';
SELECT COUNT(*) FROM Solution WHERE WasCompiled = 0 AND       RepoId = (SELECT Id FROM Repo WHERE Url = 'https://github.com/jeffdik/tachy.git');
Error: 第 585 个样本有 2 个SQL。
SELECT Method.SampledAt FROM Method JOIN Solution ON Method.SolutionId = Solution.Id WHERE Solution.Path = 'maxild_playground\Playground.sln' AND Method.Name = 'GitHubRepo.Cli.GitHubClientWrapper.GetReleases';
SELECT M.Lang FROM Method M JOIN Solution S ON M.SolutionId = S.Id WHERE S.Path = 'opendns_diagnosticapp\windows\OpenDnsDiagnostic.sln'
SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(Method.Name, '.', -2), '.', 1) AS Task FROM Method WHERE Method.NameTokenized = 'html parser feed'
SELECT CommentIsXml FROM Method WHERE Name = 'HtmlSharp.HtmlParser.Feed';
SELECT m.Name FROM Method m WHERE m.Summary = 'Write a command to the log';
SELECT COUNT(*) FROM Solution WHERE RepoId = (     SELECT Id     FROM Repo     WHERE Stars = (         SELECT MAX(Stars)         FROM Repo     ) );
SELECT Path FROM Solution WHERE RepoId = (SELECT Id FROM Repo ORDER BY Stars DESC LIMIT 1);
SELECT R.Url FROM Repo R JOIN Solution S ON R.Id = S.RepoId WHERE S.Id = 12;
SELECT COUNT(*) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Forks > 1000 AND s.WasCompiled = 1;
SELECT s.Id FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Watchers = (     SELECT MAX(r2.Watchers)     FROM Solution s2     JOIN Repo r2 ON s2.RepoId = r2.Id     WHERE s2.Id IN (18, 19) )
SELECT COUNT(*) FROM Solution WHERE WasCompiled = 0 AND ProcessedTime = (SELECT MAX(ProcessedTime) FROM Solution s JOIN Repo r ON s.RepoId = r.Id);
SELECT Repo.ProcessedTime FROM Solution JOIN Repo ON Solution.RepoId = Repo.Id WHERE Solution.Path = 'jeffdik_tachy\src\Tachy.sln';
SELECT R.Url FROM Repo R JOIN Solution S ON R.Id = S.RepoId WHERE S.Id = 9;
SELECT s.Path FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Url = 'https://github.com/maxild/playground.git';
SELECT COUNT(*) FROM Repo WHERE Id IN (     SELECT RepoId     FROM Solution     WHERE ProcessedTime < 636439500080712000 ) AND Stars > 200;
SELECT S.Id FROM Solution S JOIN Repo R ON S.RepoId = R.Id WHERE R.Forks IN (     SELECT Forks     FROM (         SELECT Forks, DENSE_RANK() OVER (ORDER BY Forks DESC) as rank         FROM Repo     ) AS T     WHERE T.rank <= 3 )
SELECT AVG(S.ProcessedTime) FROM Solution S JOIN Repo R ON S.RepoId = R.Id WHERE R.Url = 'https://github.com/jeffdik/tachy.git';
SELECT ((r1.Forks - r2.Forks) / r2.Forks * 100) AS PercentageDifference FROM Repo r1, Repo r2, Solution s1, Solution s2 WHERE s1.Id = 18 AND s2.Id = 19 AND s1.RepoId = r1.Id AND s2.RepoId = r2.Id;
SELECT M.Lang FROM Method M WHERE M.Name = 'PixieTests.SqlConnectionLayerTests.TestSqlCreateGuidColumn'
SELECT FullComment FROM Method WHERE Name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows';
SELECT Summary FROM Method WHERE Name = 'Castle.MonoRail.Framework.Test.StubViewComponentContext.RenderSection';
SELECT TokenizedName FROM Method WHERE Name = 'Supay.Irc.Messages.KnockMessage.GetTokens';
SELECT R.Stars FROM Repo R JOIN Solution S ON R.Id = S.RepoId WHERE S.Id = 45997;
SELECT COUNT(*) FROM Solution WHERE RepoId = (SELECT Id FROM Repo WHERE Stars = 8094);
SELECT s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally';
SELECT s.ProcessedTime FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.NameTokenized = 'interp parser expr';
SELECT Repo.Id FROM Repo JOIN Solution ON Repo.Id = Solution.RepoId JOIN Method ON Solution.Id = Method.SolutionId WHERE Method.Name = 'SCore.Poisson.ngtIndex';
SELECT S.Path FROM Solution S JOIN Method M ON S.Id = M.SolutionId WHERE M.Name = 'ExportToRTF.RTFStyleSheet.H6Write';
SELECT COUNT(Solution.Id) FROM Solution JOIN Repo ON Solution.RepoId = Repo.Id WHERE Repo.Watchers = 8094;
SELECT R.Url FROM Repo R JOIN Solution S ON R.Id = S.RepoId GROUP BY R.Url ORDER BY COUNT(S.Id) DESC LIMIT 1;
SELECT COUNT(Solution.Id) FROM Solution JOIN Repo ON Solution.RepoId = Repo.Id WHERE Repo.Forks = 1445;
SELECT Path, COUNT(Path) as PathCount FROM Solution JOIN Method ON Solution.Id = Method.SolutionId WHERE Method.Lang = 'zh-cn' GROUP BY Path ORDER BY PathCount DESC LIMIT 1;
SELECT R.Watchers FROM Repo R JOIN Solution S ON R.Id = S.RepoId WHERE S.Id = 338082;
SELECT COUNT(*) FROM Solution WHERE WasCompiled = 0 AND RepoId IN (     SELECT Id     FROM Repo     WHERE Stars = 189 );
SELECT s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy';
SELECT S.ProcessedTime FROM Solution S JOIN Method M ON S.Id = M.SolutionId WHERE M.NameTokenized = 't jadwal entity get single mpic';
SELECT Repo.Id FROM Repo JOIN Solution ON Repo.Id = Solution.RepoId JOIN Method ON Solution.Id = Method.SolutionId WHERE Method.Name = 'Kalibrasi.Data.EntityClasses.THistoryJadwalEntity.GetSingleTjadwal';
SELECT S.Path FROM Solution S JOIN Method M ON S.Id = M.SolutionId WHERE M.Summary = "Refetches the Entity from the persistent storage. Refetch is used to re-load an Entity which is marked ""Out-of-sync"", due to a save action. Refetching an empty Entity has no effect."
SELECT COUNT(Solution.Id) FROM Solution JOIN Repo ON Solution.RepoId = Repo.Id WHERE Repo.Stars = 3060;
SELECT s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.Lang = 'sw' GROUP BY s.Id, s.Path ORDER BY COUNT(m.Id) DESC LIMIT 1;
SELECT     (SUM(CASE WHEN s.Id = 83855 THEN r.Watchers ELSE 0 END) - SUM(CASE WHEN s.Id = 1502 THEN r.Watchers ELSE 0 END)) * 100 / SUM(CASE WHEN s.Id = 1502 THEN r.Watchers ELSE 0 END) AS Percentage FROM Solution s JOIN Repo r ON s.RepoId = r.Id;
SELECT     (SUM(CASE WHEN s.Id = 51424 THEN r.Stars ELSE 0 END) - SUM(CASE WHEN s.Id = 167053 THEN r.Stars ELSE 0 END)) * 100.0 / SUM(CASE WHEN s.Id = 167053 THEN r.Stars ELSE 0 END) AS percentage FROM     Solution s JOIN     Repo r ON s.RepoId = r.Id
SELECT     (SUM(CASE WHEN s.Id = 53546 THEN r.Forks ELSE 0 END) - SUM(CASE WHEN s.Id = 1502 THEN r.Forks ELSE 0 END)) * 100 / SUM(CASE WHEN s.Id = 1502 THEN r.Forks ELSE 0 END) AS Percentage FROM Solution s JOIN Repo r ON s.RepoId = r.Id
SELECT Method.Name FROM Method JOIN Solution ON Method.SolutionId = Solution.Id WHERE Solution.ProcessedTime = '636449700980488000';
SELECT COUNT(*) FROM Solution WHERE RepoId = (SELECT Id FROM Repo WHERE Url = 'https://github.com/derickbailey/presentations-and-training.git');
SELECT SUM(s.ProcessedTime) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Forks = (SELECT MAX(Forks) FROM Repo)
SELECT s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.Lang = 'it';
SELECT s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.Name = 'spinachLexer.mT__55'
SELECT Method.Name FROM Method JOIN Solution ON Method.SolutionId = Solution.Id JOIN Repo ON Solution.RepoId = Repo.Id WHERE Method.Lang = 'en' AND Repo.Id = 1093;
SELECT S.Path FROM Solution S JOIN Repo R ON S.RepoId = R.Id WHERE R.Url = 'https://github.com/ecoffey/Bebop.git'
SELECT DISTINCT r.Id FROM Repo r JOIN Solution s ON r.Id = s.RepoId JOIN Method m ON s.Id = m.SolutionId WHERE m.Lang = 'ro';
SELECT RepoId FROM Solution WHERE Id IN (SELECT SolutionId FROM Method WHERE NameTokenized = 'crc parameters get hash code');
SELECT COUNT(*) FROM Method WHERE SolutionId IN (     SELECT Id     FROM Solution     WHERE Path = 'maravillas_linq-to-delicious\tasty.sln' );
SELECT s.Id FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.ProcessedTime = '636430969128176000';
SELECT R.Url FROM Repo R JOIN Solution S ON R.Id = S.RepoId WHERE S.ProcessedTime = (SELECT MAX(ProcessedTime) FROM Solution);
SELECT s.Id FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Forks > (r.Watchers / 2);
SELECT (Forks / Stars * 100) AS Percentage FROM codebase_comments.Repo WHERE Id = (SELECT RepoId FROM codebase_comments.Solution WHERE Id = 104086);
SELECT Id FROM Repo ORDER BY Stars DESC LIMIT 1;
SELECT s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.Name = 'HtmlSharp.HtmlParser.Feed';
SELECT R.Forks FROM Solution S JOIN Repo R ON S.RepoId = R.Id WHERE S.Id = 35;
SELECT S.Id FROM Solution S JOIN Repo R ON S.RepoId = R.Id WHERE R.Watchers = (SELECT MAX(Watchers) FROM Repo)
SELECT R.Stars FROM Repo R JOIN Solution S ON R.Id = S.RepoId WHERE S.Id = 20;
SELECT COUNT(Method.Id), Solution.WasCompiled FROM Method JOIN Solution ON Method.SolutionId = Solution.Id WHERE Solution.Id = 1;
SELECT MULTIPLY(DIVIDE(SUM(CASE WHEN T2.WasCompiled = 0 THEN 1 ELSE 0 END), COUNT(T2.Id)), 100) FROM Method AS T1 JOIN Solution AS T2 ON T1.SolutionId = T2.Id WHERE T1.CommentIsXml = 1;
SELECT Method.Name FROM Method JOIN Solution ON Method.SolutionId = Solution.Id WHERE Solution.Path = 'wallerdev_htmlsharp\HtmlSharp.sln';
SELECT CAST(SUM(CASE WHEN Stars > 2000 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) AS Percentage FROM Repo;
SELECT R.Url FROM Solution S JOIN Repo R ON S.RepoId = R.Id WHERE S.Id = 1;
SELECT Id FROM Repo WHERE Stars = 21 ORDER BY Forks DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN M.Lang = 'en' THEN 1 END) * 100.0 / COUNT(M.Id)) AS Percentage FROM     Method M WHERE     M.CommentIsXml = 1;
SELECT S.Path FROM Solution S JOIN Method M ON S.Id = M.SolutionId WHERE M.NameTokenized = 'html parser feed';
SELECT s.Id FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Forks = 238;
SELECT m.Name, m.NameTokenized FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE m.Lang = 'en' AND s.WasCompiled = 0;
Error: 第 658 个样本有 2 个SQL。
SELECT S.Path FROM Solution S JOIN Method M ON S.Id = M.SolutionId WHERE M.FullComment = 'Feeds data into the parser'
SELECT COUNT(Method.Name) FROM Method JOIN Solution ON Method.SolutionId = Solution.Id WHERE Solution.RepoId = 3 AND Method.CommentIsXml = 1;
SELECT MULTIPLY(DIVIDE(SUM(CASE WHEN T2.WasCompiled = 0 THEN 1 ELSE 0 END), COUNT(T2.Id)), 100) AS Percentage FROM Method AS T1 JOIN Solution AS T2 ON T1.SolutionId = T2.Id WHERE T1.Lang = 'en';
SELECT (SUM(CASE WHEN S.Id = 1 THEN R.Stars ELSE 0 END) - SUM(CASE WHEN S.Id = 2 THEN R.Stars ELSE 0 END)) * 100.0 / SUM(CASE WHEN S.Id = 2 THEN R.Stars ELSE 0 END) AS PercentageDifference FROM Solution S JOIN Repo R ON S.RepoId = R.Id WHERE S.Id IN (1, 2) GROUP BY S.Id;
SELECT COUNT(*) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Stars > r.Forks / 3;
SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(Method.Name, '.', -1), '.', 1) AS Task FROM Method WHERE Method.Id = 2;
SELECT CommentIsXml FROM codebase_comments.Method WHERE Id = 8;
SELECT Url FROM Repo ORDER BY Watchers DESC LIMIT 1;
SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(Method.Name, '.', -1), '.', 1) AS Task FROM Method WHERE Method.Lang = 'cs'
SELECT s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.Id = 3;
SELECT M.Lang FROM Method M JOIN Solution S ON M.SolutionId = S.Id JOIN Repo R ON S.RepoId = R.Id WHERE M.Id = 28 AND R.Id = 3;
SELECT S.ProcessedTime, COUNT(M.Id) FROM Solution S JOIN Method M ON S.Id = M.SolutionId WHERE S.Id = 1;
SELECT COUNT(*) FROM (   SELECT m1.Id   FROM Method m1   JOIN Solution s1 ON m1.SolutionId = s1.Id   JOIN Repo r ON s1.RepoId = r.Id   WHERE m1.NameTokenized LIKE 'query language%'   AND EXISTS (     SELECT 1     FROM Method m2     WHERE m2.NameTokenized LIKE 'query language%'     AND m2.SolutionId = m1.SolutionId     AND m2.Id != m1.Id   ) ) as sharing_methods;
SELECT Method.ApiCalls, Solution.Path FROM Method JOIN Solution ON Method.SolutionId = Solution.Id WHERE Method.Id = 10;
SELECT COUNT(*) FROM Method WHERE SolutionId IN (SELECT Id FROM Solution WHERE RepoId = 150) AND FullComment IS NULL AND Summary IS NULL;
SELECT Method.CommentIsXml FROM Method JOIN Solution ON Method.SolutionId = Solution.Id WHERE Method.Id = 50 AND Solution.Path = 'managedfusion_managedfusion\ManagedFusion.sln';
SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(m.Name, '.', -1), ' ', 1) AS Task FROM Method m WHERE m.NameTokenized = 'string extensions to pascal case'
SELECT NameTokenized FROM Method WHERE NameTokenized = 'Sky.Excel.ExcelBook.TypeConvert';
SELECT COUNT(s.Path) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Url = 'https://github.com/jeffdik/tachy.git'
SELECT R.Watchers FROM Repo R JOIN Solution S ON R.Id = S.RepoId WHERE S.Path = 'maff_se3ue7\US7.sln'
SELECT TOP 5 R.Url FROM Repo R JOIN Solution S ON R.Id = S.RepoId WHERE S.WasCompiled = 1;
SELECT s.Path FROM Solution s JOIN Method m ON s.Id = m.SolutionId WHERE m.NameTokenized = 'matrix multiply';
SELECT COUNT(*) FROM Method JOIN Solution ON Method.SolutionId = Solution.Id JOIN Repo ON Solution.RepoId = Repo.Id WHERE Repo.Url = 'https://github.com/dogeth/vss2git.git' AND Method.CommentIsXml = 1;
SELECT Path FROM Solution WHERE SampledAt = 636431758961741000 LIMIT 5;
SELECT R.Url FROM Repo R JOIN Solution S ON R.Id = S.RepoId WHERE S.Path = 'joeyrobert_bloomfilter\DataTypes.BloomFilter.sln'
SELECT m.Name FROM Method m JOIN Solution s ON m.SolutionId = s.Id WHERE s.Path = 'graffen_NLog.Targets.Syslog\src\NLog.Targets.Syslog.sln';
SELECT Method.NameTokenized FROM Method JOIN Solution ON Method.SolutionId = Solution.Id WHERE Solution.Path = 'jurney_P4Backup\P4Backup\P4Backup.sln';
SELECT R.Url FROM Repo R JOIN Solution S ON R.Id = S.RepoId JOIN Method M ON S.Id = M.SolutionId WHERE M.Summary = 'A test for Decompose' AND M.Name = 'Decompose';
SELECT R.Stars FROM Repo R JOIN Solution S ON R.Id = S.RepoId WHERE S.Path = 'ninject_Ninject\Ninject.sln';
SELECT COUNT(s.Path) FROM Solution s JOIN Repo r ON s.RepoId = r.Id WHERE r.Stars = 111 AND r.Forks = 58 AND r.Watchers = 111;
SELECT AVG(S.ProcessedTime) FROM Solution S JOIN Repo R ON S.RepoId = R.Id WHERE R.Stars = 254 AND R.Forks = 88 AND R.Watchers = 254;
SELECT COUNT(DISTINCT m.Lang) FROM Method m JOIN Solution s ON m.SolutionId = s.Id JOIN Repo r ON s.RepoId = r.Id WHERE r.Url = 'https://github.com/managedfusion/managedfusion.git';
SELECT COUNT(*) FROM trains WHERE direction = 'east';
SELECT COUNT(*) FROM cars WHERE train_id = 1;
SELECT c.shape FROM cars c JOIN trains t ON c.train_id = t.id WHERE c.position = 4 AND c.train_id = 1;
SELECT DISTINCT t.id FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.shape IN ('elipse', 'bucket');
SELECT COUNT(*) FROM cars WHERE train_id = 1 AND roof = 'none';
SELECT id FROM cars WHERE train_id = 1 AND wheels = 2;
SELECT COUNT(DISTINCT t.id) FROM trains t JOIN cars c ON t.id = c.train_id WHERE t.direction = 'east' AND c.shape IN ('elipse', 'bucket');
SELECT t.id FROM trains t LEFT JOIN (     SELECT train_id, COUNT(*) as carsNum     FROM cars     GROUP BY train_id ) c ON t.id = c.train_id WHERE t.direction = 'east' AND c.carsNum < 4;
SELECT c.id FROM cars c JOIN trains t ON c.train_id = t.id WHERE c.sides = 'double' AND t.direction = 'west';
SELECT COUNT(*) FROM (   SELECT t.id   FROM trains t   JOIN cars c ON t.id = c.train_id   WHERE t.direction = 'east' AND c.len > SOME_VALUE_FOR_LONG_CAR   GROUP BY t.id   HAVING COUNT(*) > 2 ) as result;
SELECT DISTINCT t.direction FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.load_num = 0;
SELECT t.direction FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.shape = 'ellipse';
SELECT COUNT(*) FROM cars JOIN trains ON cars.train_id = trains.id WHERE cars.len = 'short' AND trains.direction = 'east';
SELECT c.shape FROM cars c JOIN trains t ON c.train_id = t.id WHERE c.position = 1 AND t.direction = 'east';
SELECT COUNT(*) FROM cars JOIN trains ON cars.train_id = trains.id WHERE trains.direction = 'east' AND cars.roof = 'flat';
SELECT COUNT(*) FROM cars JOIN trains ON cars.train_id = trains.id WHERE trains.direction = 'east' AND cars.roof = 'flat' AND cars.load_shape = 'circle';
SELECT T1.direction, COUNT(*) as rectCarsNum FROM trains AS T1 JOIN cars AS T2 ON T1.id = T2.train_id WHERE T2.shape = 'rectangle' GROUP BY T1.direction ORDER BY rectCarsNum DESC LIMIT 1;
SELECT t.direction FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.len = 'short' GROUP BY t.id HAVING COUNT(c.position) = 4;
Error: 第 709 个样本有 2 个SQL。
SELECT     (COUNT(CASE WHEN T2.direction = 'east' THEN T1.train_id END) * 100 / COUNT(T1.train_id)) AS percentage FROM     cars T1 JOIN     trains T2 ON T1.train_id = T2.id WHERE     T1.shape IN ('bucket', 'ellipse') GROUP BY     T2.direction;
SELECT COUNT(*) FROM cars WHERE len = 'short' AND shape = 'hexagon';
SELECT COUNT(*) FROM trains WHERE direction = 'west';
SELECT c.load_shape FROM cars c WHERE c.shape = 'ellipse' AND c.len = 'short';
SELECT id FROM trains WHERE direction = 'east';
SELECT SUM(wheels) FROM cars WHERE len = 'long';
SELECT direction FROM trains GROUP BY direction ORDER BY COUNT(id) DESC LIMIT 1;
SELECT COUNT(*) FROM (   SELECT t.id   FROM trains t   JOIN cars c ON t.id = c.train_id   WHERE t.direction = 'east'   GROUP BY t.id   HAVING COUNT(c.id) >= 4 ) as result;
SELECT T2.direction FROM cars AS T1 JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'rectangle' GROUP BY T2.direction ORDER BY COUNT(T2.id) DESC LIMIT 1;
SELECT COUNT(*) FROM trains t JOIN cars c ON t.id = c.train_id WHERE t.direction = 'west' AND c.position = 3 AND c.sides = 'double';
SELECT COUNT(*) FROM trains t JOIN cars c ON t.id = c.train_id WHERE t.direction = 'east' AND c.position = 1 AND c.shape = 'rectangular';
SELECT COUNT(t.id) FROM trains t WHERE t.direction = 'west' AND (     SELECT COUNT(c.id)     FROM cars c     WHERE c.train_id = t.id AND c.roof = 'none' ) <= 1;
SELECT T1.direction FROM trains AS T1 JOIN (   SELECT train_id   FROM cars   GROUP BY train_id   HAVING COUNT(id) = 3 ) AS T2 ON T1.id = T2.train_id GROUP BY T1.direction ORDER BY COUNT(T1.id) DESC LIMIT 1;
SELECT COUNT(*) FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.load_num = 3 AND c.position = 1 AND t.direction = 'east';
SELECT COUNT(*) FROM cars c JOIN trains t ON c.train_id = t.id WHERE t.direction = 'east' AND c.sides = 'double' AND c.position = 'trailPosi';
SELECT DISTINCT t.direction FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.load_num = 0;
SELECT t.direction FROM trains t JOIN cars c ON t.id = c.train_id WHERE c.position = 2 AND c.load_shape = 'diamond' LIMIT 1;
SELECT COUNT(*) FROM trains t JOIN cars c ON t.id = c.train_id WHERE t.direction = 'west' AND c.wheels = 3 AND c.roof = 'jagged';
SELECT t.direction FROM trains t JOIN (   SELECT train_id   FROM cars   GROUP BY train_id   HAVING COUNT(*) <= 2 ) c ON t.id = c.train_id;
Error: 第 729 个样本有 2 个SQL。
SELECT     c1.load_shape,     COUNT(c1.id) AS num_of_trains,     (COUNT(c1.id) * 100.0 / (SELECT COUNT(*) FROM cars WHERE position = 1 AND load_shape = c1.load_shape)) AS percentage_east FROM     cars c1 JOIN     trains t ON c1.train_id = t.id WHERE     c1.position = 1 AND     t.direction = 'east' GROUP BY     c1.load_shape ORDER BY     num_of_trains DESC LIMIT 1;
SELECT T3.CharacterName FROM movie AS T1 JOIN characters AS T3 ON T1.MovieID = T3.MovieID WHERE T1.Title = 'Look Who\'s Talking'
SELECT c.CharacterName FROM characters c JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Batman' ORDER BY c.screentime DESC LIMIT 1;
SELECT actor.Name FROM actor JOIN characters ON actor.ActorID = characters.ActorID JOIN movie ON characters.MovieID = movie.MovieID WHERE characters.Character_Name = 'Joker' AND movie.Title = 'Batman'
SELECT actor.Name FROM actor JOIN characters ON actor.ActorID = characters.ActorID JOIN movie ON characters.MovieID = movie.MovieID WHERE movie.Title = 'Batman';
SELECT T1.Title FROM movie AS T1 JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.CharacterName = 'Dr. Archibald ''Moonlight'' Graham'
SELECT m.Title FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Name = 'Tom Cruise';
SELECT COUNT(*) FROM movie JOIN characters ON movie.MovieID = characters.MovieID JOIN actor ON characters.ActorID = actor.ActorID WHERE actor.Name = 'Morgan Freeman' AND movie.mpaa_rating = 'PG';
SELECT m.Title, m.Rating FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE a.Name = 'Tom Cruise' ORDER BY m.Rating DESC LIMIT 1;
SELECT T3.CharacterName FROM movie AS T1 JOIN characters AS T3 ON T1.MovieID = T3.MovieID JOIN actor AS T2 ON T2.ActorID = T3.ActorID WHERE T2.Name = 'Tom Cruise' AND T1.Title = 'Born on the Fourth of July'
SELECT C.CharacterName FROM characters AS C JOIN actor AS A ON C.ActorID = A.ActorID WHERE A.Name = 'Tom Cruise';
SELECT actor.Name FROM actor JOIN characters ON actor.ActorID = characters.ActorID JOIN movie ON characters.MovieID = movie.MovieID WHERE movie.Title = 'Batman' ORDER BY actor.Height DESC LIMIT 1;
SELECT COUNT(DISTINCT m.MovieID) FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON a.ActorID = c.ActorID WHERE a.Gender = 'Male' AND a.Ethnicity = 'African American';
SELECT AVG(movie.Rating) FROM movie JOIN characters ON movie.MovieID = characters.MovieID JOIN actor ON actor.ActorID = characters.ActorID WHERE actor.Name = 'Tom Cruise';
SELECT ((MAX(c.screentime) - MIN(c.screentime)) / MIN(c.screentime)) * 100 AS Percentage_Difference FROM characters c JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Batman'
SELECT Title FROM movie WHERE Budget = (SELECT MAX(Budget) FROM movie);
SELECT m.MPAA_Rating FROM movie m JOIN characters c ON m.MovieID = c.MovieID WHERE c.Character_Name = 'Peter Quill';
SELECT c.CharacterName FROM characters c JOIN movie m ON c.MovieID = m.MovieID WHERE m.Genre = 'Thriller' AND c.creditOrder = '1' ORDER BY m.Rating DESC LIMIT 1;
SELECT actor.Name FROM actor JOIN characters ON actor.ActorID = characters.ActorID JOIN movie ON characters.MovieID = movie.MovieID WHERE movie.Title = 'Batman' ORDER BY characters.screentime DESC LIMIT 1;
SELECT COUNT(*) FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON a.ActorID = c.ActorID WHERE a.NetWorth = (SELECT MAX(NetWorth) FROM actor);
SELECT actor.Name FROM actor JOIN characters ON actor.ActorID = characters.ActorID WHERE characters.CharacterName = 'Chanice Kobolowski';
SELECT actor.Date_of_Birth FROM actor JOIN characters ON actor.ActorID = characters.ActorID WHERE characters.Character_Name = 'Sully';
SELECT actor.BirthCity FROM actor JOIN characters ON actor.ActorID = characters.ActorID WHERE characters.CharacterName = 'Gabriel Martin';
SELECT actor.Biography FROM actor JOIN characters ON actor.ActorID = characters.ActorID WHERE characters.CharacterName = 'Michael Moscovitz';
SELECT actor.Height_Inches FROM actor JOIN characters ON actor.ActorID = characters.ActorID WHERE characters.Character_Name = 'Lurch';
SELECT T3.CharacterName FROM movie AS T1 JOIN characters AS T3 ON T1.MovieID = T3.MovieID WHERE T1.Title = 'G.I. Joe: The Rise of Cobra' AND T3.creditOrder = '3'
SELECT actor.Name FROM actor JOIN characters ON actor.ActorID = characters.ActorID JOIN movie ON characters.MovieID = movie.MovieID WHERE movie.Title = 'American Hustle' AND characters.creditOrder = '2';
SELECT actor.Name FROM actor JOIN characters ON actor.ActorID = characters.ActorID JOIN movie ON characters.MovieID = movie.MovieID WHERE characters.creditOrder = '1' AND movie.Release_Date = '2015-10-26';
SELECT     (COUNT(CASE WHEN a.BirthCountry = 'USA' THEN a.ActorID END) * 100.0 / COUNT(a.ActorID)) AS PercentageOfUSAActors FROM     actor a JOIN     characters c ON a.ActorID = c.ActorID JOIN     movie m ON m.MovieID = c.MovieID WHERE     m.Title = 'Mrs. Doubtfire';
SELECT (COUNT(CASE WHEN a.Date_of_Birth > '1970-01-01' THEN a.ActorID END) * 100.0 / COUNT(a.ActorID)) AS Percentage FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE m.Title = 'Dawn of the Planet of the Apes';
SELECT MovieID FROM movie WHERE Budget = 15000000 AND Rating BETWEEN 7 AND 8;
SELECT COUNT(*) FROM movie WHERE MPAA_Rating = 'PG' AND Release_Date BETWEEN '1990-06-01' AND '1990-06-30';
SELECT Name FROM actor WHERE ActorID = 439 AND Gender = 'Male' AND Ethnicity = 'White';
SELECT DISTINCT m.Genre FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON c.MovieID = m.MovieID WHERE a.BirthCity = 'New York City' AND m.Rating > 5;
SELECT COUNT(*) FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE m.Genre = 'Romance' AND a.Name = 'John Travolta';
SELECT actor.Height, actor.NetWorth FROM actor JOIN characters ON actor.ActorID = characters.ActorID JOIN movie ON characters.MovieID = movie.MovieID WHERE movie.Title = 'Three Men and a Little Lady';
SELECT T2.Genre FROM actor AS T1 JOIN characters AS T3 ON T1.ActorID = T3.ActorID JOIN movie AS T2 ON T3.MovieID = T2.MovieID WHERE T2.`MPAA Rating` = 'PG' ORDER BY T1.NetWorth DESC LIMIT 1;
SELECT actor.NetWorth FROM actor JOIN characters ON actor.ActorID = characters.ActorID JOIN movie ON movie.MovieID = characters.MovieID WHERE movie.Title = 'Misery' AND actor.Height BETWEEN 60 AND 70;
SELECT COUNT(*) FROM actor a JOIN characters c ON a.ActorID = c.ActorID JOIN movie m ON m.MovieID = c.MovieID WHERE a.Gender = 'Male' AND a.`Birth Country` = 'USA' AND m.Title = 'Ghost';
SELECT T2.MPAA_Rating, T2.Title FROM actor AS T1 JOIN movie AS T2 ON T1.ActorID = T2.MovieID JOIN characters AS T3 ON T1.ActorID = T3.ActorID AND T2.MovieID = T3.MovieID WHERE T1.Name = 'Leonardo DiCaprio' GROUP BY T2.MPAA_Rating, T2.Title ORDER BY T2.Budget DESC LIMIT 1;
SELECT actor.Name, actor.Date_of_Birth, actor.NetWorth FROM actor JOIN characters ON actor.ActorID = characters.ActorID JOIN movie ON characters.MovieID = movie.MovieID WHERE movie.Title = 'Die Hard 2' AND actor.Height BETWEEN 60 AND 65;
SELECT T2.Runtime FROM characters AS T1 JOIN movie AS T2 ON T1.MovieID = T2.MovieID JOIN actor AS T3 ON T1.ActorID = T3.ActorID WHERE T3.Ethnicity = 'African American' AND T3.DateOfBirth = '1954-12-28'
SELECT T1.Name FROM actor AS T1 JOIN characters AS T2 ON T1.ActorID = T2.ActorID JOIN movie AS T3 ON T2.MovieID = T3.MovieID WHERE T2.CharacterName = 'Don Altobello' AND T3.Genre = 'Drama' AND T3.Gross = 136766062;
SELECT m.Gross FROM movie m JOIN characters c ON m.MovieID = c.MovieID JOIN actor a ON c.ActorID = a.ActorID WHERE m.Genre = 'Comedy' AND m.Rating < 7 AND a.NetWorth > '$375,000,000.00';
SELECT T2.Runtime FROM characters AS T1 JOIN movie AS T2 ON T1.MovieID = T2.MovieID JOIN actor AS T3 ON T1.ActorID = T3.ActorID WHERE T3.Name = 'Jackie Chan' AND T2.Rating > 7;
SELECT     (COUNT(CASE WHEN a.NetWorth > 400000000 THEN a.ActorID END) * 100.0 / COUNT(a.ActorID)) AS Percentage FROM     actor a JOIN     characters c ON a.ActorID = c.ActorID JOIN     movie m ON m.MovieID = c.MovieID WHERE     m.Genre = 'Drama'
SELECT C.Character_Name FROM characters AS C JOIN actor AS A ON C.ActorID = A.ActorID JOIN movie AS M ON C.MovieID = M.MovieID WHERE A.Gender = 'Female' AND A.Birth_City = 'Sherman Oaks' AND M.Title = 'Bruce Almighty' AND A.Height > (SELECT AVG(Height) * 0.5 FROM actor)
SELECT COUNT(*) FROM twitter WHERE Lang = 'en';
SELECT text FROM twitter WHERE IsReshare = 'TRUE';
SELECT COUNT(*) FROM twitter WHERE Reach > 1000;
SELECT COUNT(*) FROM twitter WHERE Sentiment > 0 AND Weekday = 'Thursday';
SELECT text FROM twitter WHERE Likes = (SELECT MAX(Likes) FROM twitter);
SELECT City FROM location WHERE Country = 'Argentina';
SELECT COUNT(*) FROM twitter JOIN location ON twitter.LocationID = location.LocationID WHERE location.Country = 'Argentina';
SELECT l.City FROM location l JOIN twitter t ON l.LocationID = t.LocationID WHERE l.Country = 'Argentina' GROUP BY l.City ORDER BY COUNT(t.TweetID) DESC LIMIT 1;
SELECT COUNT(*) FROM twitter WHERE IsReshare = 'TRUE' AND LocationID IN (SELECT LocationID FROM location WHERE City = 'Buenos Aires');
SELECT text FROM twitter WHERE LocationID IN (SELECT LocationID FROM location WHERE City = 'Buenos Aires') AND Sentiment > 0;
SELECT l.Country FROM location l JOIN twitter t ON l.LocationID = t.LocationID WHERE t.Likes = (SELECT MAX(Likes) FROM twitter)
SELECT T2.Country FROM (     SELECT LocationID, COUNT(TweetID) AS NumOfTweets     FROM twitter     WHERE Sentiment > 0     GROUP BY LocationID ) AS T1 JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Country IN ('Argentina', 'Australia') GROUP BY T2.Country ORDER BY SUM(T1.NumOfTweets) DESC LIMIT 1
SELECT COUNT(*) FROM twitter WHERE LocationID = (SELECT LocationID FROM location WHERE City = 'Buenos Aires') AND Weekday = 'Thursday';
SELECT COUNT(*) FROM user WHERE Gender = 'Male' AND UserID IN (     SELECT UserID     FROM twitter     WHERE Likes > 1000 );
SELECT COUNT(t.TweetID) FROM twitter t JOIN user u ON t.UserID = u.UserID WHERE u.Gender = 'Male';
SELECT U.Gender FROM user U JOIN twitter T ON U.UserID = T.UserID WHERE T.Reach = (SELECT MAX(Reach) FROM twitter)
SELECT COUNT(*) FROM twitter JOIN user ON twitter.UserID = user.UserID JOIN location ON twitter.LocationID = location.LocationID WHERE location.Country = 'Argentina' AND user.Gender = 'Male';
SELECT twitter.text FROM twitter JOIN user ON twitter.UserID = user.UserID JOIN location ON twitter.LocationID = location.LocationID WHERE user.Gender = 'Male' AND location.City = 'Buenos Aires';
SELECT AVG(City_Tweet_Count) AS Average_Tweets_Per_City FROM (     SELECT City, COUNT(DISTINCT TweetID) AS City_Tweet_Count     FROM twitter     JOIN location ON twitter.LocationID = location.LocationID     WHERE location.Country = 'Argentina'     GROUP BY City ) AS City_Tweet_Counts
SELECT     (COUNT(CASE WHEN u.Gender = 'Male' THEN t.TweetID END) * 100.0 / COUNT(t.TweetID)) AS Percentage FROM     twitter t JOIN     user u ON t.UserID = u.UserID WHERE     t.Sentiment > 0;
SELECT COUNT(*) FROM user WHERE Gender = 'Unknown';
SELECT COUNT(DISTINCT State) FROM location WHERE Country = 'United Kingdom';
SELECT StateCode FROM location WHERE State = 'Gwynedd';
SELECT LocationID FROM location WHERE State = 'West Sussex';
SELECT COUNT(*) FROM twitter WHERE IsReshare = 'TRUE' AND LocationID IN (SELECT LocationID FROM location WHERE State = 'Texas');
SELECT l.Country FROM location l JOIN twitter t ON l.LocationID = t.LocationID WHERE t.Reach = 547851;
SELECT COUNT(*) FROM twitter JOIN location ON twitter.LocationID = location.LocationID WHERE location.State = 'Ha Noi' AND twitter.Sentiment > 0;
SELECT twitter.text FROM twitter JOIN location ON twitter.LocationID = location.LocationID WHERE location.State = 'Connecticut' ORDER BY twitter.Klout DESC LIMIT 1;
Error: 第 805 个样本有 2 个SQL。
SELECT user.Gender FROM user JOIN twitter ON user.UserID = twitter.UserID WHERE twitter.TweetID = 'tw-715909161071091712';
SELECT l.City FROM location l JOIN user u ON l.LocationID = u.LocationID JOIN twitter t ON u.UserID = t.UserID WHERE t.text = 'One of our favorite stories is @FINRA_News''s move to the cloud with AWS Enterprise Support! https://amp.twimg.com/v/991837f1-4815-4edc-a88f-e68ded09a02a';
SELECT user.Gender FROM user JOIN twitter ON user.UserID = twitter.UserID WHERE twitter.RetweetCount = 535;
Error: 第 809 个样本有 2 个SQL。
SELECT user.Gender FROM user JOIN twitter ON user.UserID = twitter.UserID WHERE twitter.Likes = (SELECT MAX(Likes) FROM twitter);
SELECT COUNT(T.tweetid) FROM twitter T JOIN location L ON T.LocationID = L.LocationID WHERE L.State = 'Michigan' AND T.Weekday = 'Thursday';
SELECT StateCode FROM location WHERE LocationID = (SELECT LocationID FROM twitter WHERE TweetID = 'tw-685681052912873473');
SELECT     (COUNT(u.UserID) FILTER (WHERE u.Gender = 'Male') * 100.0 / COUNT(u.UserID)) AS Percentage_Male_Users FROM     user u JOIN     location l ON u.LocationID = l.LocationID WHERE     l.State = 'Florida';
SELECT     (COUNT(CASE WHEN t.Sentiment > 0 THEN t.TweetID END) * 100.0 / COUNT(t.TweetID)) AS PositiveTweetPercentage FROM     twitter t JOIN     location l ON t.LocationID = l.LocationID WHERE     l.State = 'California';
SELECT Weekday FROM twitter WHERE TweetID = 'tw-682712873332805633';
SELECT COUNT(DISTINCT T.Reach) FROM twitter T WHERE T.text = 'Happy New Year to all those AWS instances of ours!';
SELECT COUNT(TweetID) FROM twitter WHERE Lang = 'en';
SELECT LocationID FROM twitter WHERE TweetID = 'tw-682714048199311366'
SELECT COUNT(*) FROM twitter WHERE Weekday = 'Wednesday';
SELECT text FROM twitter WHERE Weekday = 'Thursday';
SELECT user.Gender FROM user JOIN twitter ON user.UserID = twitter.UserID WHERE twitter.TweetID = 'tw-682714583044243456';
SELECT twitter.text FROM twitter JOIN user ON twitter.UserID = user.UserID WHERE user.Gender = 'Unknown';
SELECT COUNT(twitter.TweetID) FROM twitter JOIN user ON twitter.UserID = user.UserID WHERE user.Gender = 'Male';
SELECT user.Gender, COUNT(twitter.text) as NumOfTweets FROM twitter JOIN user ON twitter.UserID = user.UserID WHERE twitter.Lang = 'en' GROUP BY user.Gender ORDER BY NumOfTweets DESC LIMIT 1;
SELECT U.Gender, COUNT(U.UserID) FROM user U JOIN twitter T ON U.UserID = T.UserID WHERE T.RetweetCount > 30 GROUP BY U.Gender;
SELECT COUNT(*) FROM twitter t JOIN user u ON t.UserID = u.UserID WHERE u.Gender = 'Female' AND t.IsReshare = 'TRUE';
SELECT T1.Country FROM location AS T1 JOIN twitter AS T2 ON T1.LocationID = T2.LocationID GROUP BY T1.Country ORDER BY SUM(T2.Likes) DESC LIMIT 1;
SELECT l.Country FROM location l JOIN twitter t ON l.LocationID = t.LocationID WHERE t.TweetID = 'tw-682723090279841798';
SELECT twitter.text FROM twitter JOIN location ON twitter.LocationID = location.LocationID WHERE location.Country = 'Australia';
SELECT twitter.text FROM twitter JOIN location ON twitter.LocationID = location.LocationID WHERE location.City = 'Rawang' AND location.State = 'Selangor' AND location.Country = 'Malaysia';
SELECT DISTINCT Lang FROM twitter WHERE LocationID IN (SELECT LocationID FROM location WHERE Country = 'Brazil');
SELECT T1.Country FROM location AS T1 JOIN twitter AS T2 ON T1.LocationID = T2.LocationID WHERE T2.Sentiment > 0 GROUP BY T1.Country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT SUM(Likes) FROM twitter JOIN user ON twitter.UserID = user.UserID WHERE twitter.Lang = 'ru' AND user.Gender = 'Male';
SELECT AVG(Weekly_Tweets) AS Average_Male_User_Tweets_Per_Week FROM (     SELECT UserID, COUNT(DISTINCT TweetID) / (31 / 7) AS Weekly_Tweets     FROM twitter     JOIN user ON twitter.UserID = user.UserID     WHERE user.Gender = 'Male'     GROUP BY UserID ) AS Subquery;
SELECT COUNT(*) FROM twitter WHERE Klout > 50;
SELECT text FROM twitter WHERE Lang <> 'en';
SELECT UserID FROM twitter GROUP BY UserID ORDER BY COUNT(TweetID) DESC LIMIT 1;
SELECT COUNT(*) FROM twitter WHERE Weekday = 'Monday' AND IsReshare = 'TRUE';
SELECT t.text FROM twitter t JOIN (   SELECT LocationID, UserID, MAX(Reach) as max_reach   FROM twitter   GROUP BY LocationID, UserID   ORDER BY max_reach DESC   LIMIT 3 ) sub ON t.Reach = sub.max_reach AND t.LocationID = sub.LocationID AND t.UserID = sub.UserID ORDER BY t.Reach DESC;
SELECT COUNT(*) FROM twitter WHERE Likes > 100 AND IsReshare = 'TRUE';
SELECT COUNT(T.tweetid) FROM twitter T JOIN user U ON T.userid = U.userid WHERE U.gender = 'Male' AND T.weekday = 'Monday';
SELECT U.Gender FROM user U JOIN twitter T ON U.UserID = T.UserID WHERE T.Likes = (SELECT MAX(Likes) FROM twitter);
SELECT t.text FROM twitter t JOIN user u ON t.UserID = u.UserID WHERE t.Lang = 'fr' AND u.Gender = 'Male';
SELECT COUNT(*) FROM twitter JOIN location ON twitter.LocationID = location.LocationID WHERE location.Country = 'Australia' AND twitter.Lang = 'fr';
SELECT COUNT(*) FROM twitter t JOIN user u ON t.UserID = u.UserID JOIN location l ON t.LocationID = l.LocationID WHERE t.Sentiment > 0 AND u.Gender = 'Male' AND l.Country = 'Australia';
SELECT     (SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Sentiment > 0) -     (SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male' AND T1.Sentiment = 0)
SELECT l.City FROM location l JOIN twitter t ON l.LocationID = t.LocationID WHERE t.RetweetCount = (SELECT MAX(RetweetCount) FROM twitter)
SELECT City FROM (   SELECT City, COUNT(TweetID) AS TweetCount   FROM twitter   JOIN location ON twitter.LocationID = location.LocationID   WHERE City IN ('Bangkok', 'Chiang Mai')   GROUP BY City ) AS SubQuery ORDER BY TweetCount DESC LIMIT 1;
SELECT COUNT(*) FROM twitter WHERE LocationID IN (SELECT LocationID FROM location WHERE State = 'Santa Fe' AND Country = 'Argentina') AND Day = 31;
SELECT l.City, COUNT(t.TweetID) as NumOfTweets FROM location l JOIN twitter t ON l.LocationID = t.LocationID WHERE l.Country = 'Canada' GROUP BY l.City ORDER BY NumOfTweets DESC LIMIT 3;
SELECT DISTINCT l.City FROM location l JOIN twitter t ON l.LocationID = t.LocationID WHERE t.Sentiment = 0;
SELECT T3.text FROM user AS T1 JOIN twitter AS T3 ON T1.UserID = T3.UserID JOIN location AS T2 ON T2.LocationID = T3.LocationID WHERE T1.Gender = 'Male' AND T2.Country = 'Argentina' ORDER BY T3.Likes DESC LIMIT 1;
SELECT AVG(Likes) FROM twitter WHERE UserID IN (SELECT UserID FROM user WHERE Gender = 'Male') AND Weekday = 'Monday';
Error: 第 854 个样本有 2 个SQL。
SELECT name FROM course WHERE name IN ('Intro to BlockChain', 'Computer Network') ORDER BY diff DESC LIMIT 1;
SELECT name FROM course WHERE credit < (SELECT credit FROM course WHERE name = 'Machine Learning Theory');
SELECT COUNT(*) FROM prof WHERE popularity > (SELECT popularity FROM prof WHERE first_name = 'Zhou' AND last_name = 'Zhihua');
SELECT phone_number FROM student WHERE f_name = 'Kerry' AND l_name = 'Pryor';
SELECT p.first_name, p.last_name FROM prof p JOIN RA r ON p.prof_id = r.prof_id JOIN student s ON r.student_id = s.student_id WHERE s.f_name = 'Faina' AND s.l_name = 'Mallinar';
SELECT COUNT(*) FROM RA JOIN prof ON RA.prof_id = prof.prof_id WHERE prof.first_name = 'Sauveur' AND prof.last_name = 'Skyme';
SELECT s.f_name, s.l_name FROM student s JOIN RA r ON s.student_id = r.student_id WHERE r.capability = 5;
SELECT COUNT(*) FROM (   SELECT r.student_id   FROM RA r   JOIN prof p ON r.prof_id = p.prof_id   WHERE p.first_name = 'Ogdon' AND p.last_name = 'Zywicki' AND r.salary = 'med' ) as T
SELECT s.f_name, s.l_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Machine Learning Theory';
SELECT COUNT(*) FROM student JOIN registration ON student.student_id = registration.student_id JOIN course ON registration.course_id = course.course_id WHERE registration.grade = 'B' AND course.name = 'Machine Learning Theory' AND student.gpa > 3;
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.f_name = 'Laughton' AND s.l_name = 'Antonio';
SELECT s.f_name, s.l_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Intro to Database 2' AND r.grade IS NULL;
SELECT s.f_name, s.l_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Machine Learning Theory' AND (s.f_name = 'Willie' AND s.l_name = 'Rechert') OR (s.f_name = 'Laughton' AND s.l_name = 'Antonio') ORDER BY r.sat DESC LIMIT 1;
SELECT COUNT(*) FROM (   SELECT prof_id   FROM RA   GROUP BY prof_id   HAVING COUNT(student_id) > 3 ) AS T1 JOIN prof ON T1.prof_id = prof.prof_id WHERE prof.gender = 'M';
SELECT COUNT(*) FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Machine Learning Theory' AND s.type = 'UG';
SELECT p.first_name, p.last_name FROM prof p JOIN RA r ON p.prof_id = r.prof_id JOIN student s ON r.student_id = s.student_id WHERE s.f_name = 'Willie' AND s.l_name = 'Rechert';
SELECT AVG(student.gpa) FROM student JOIN RA ON student.student_id = RA.student_id JOIN prof ON RA.prof_id = prof.prof_id WHERE prof.first_name = 'Ogdon' AND prof.last_name = 'Zywicki';
SELECT AVG(registration.sat) FROM registration JOIN course ON registration.course_id = course.course_id WHERE course.name = 'Machine Learning Theory';
SELECT COUNT(*) FROM student WHERE type = 'RPG';
SELECT f_name, l_name FROM student WHERE gpa = (SELECT MAX(gpa) FROM student);
SELECT COUNT(*) FROM registration WHERE course_id IN (     SELECT course_id     FROM course     WHERE credit = 3 AND diff = 1 ) AND grade = 'A';
SELECT COUNT(*) FROM registration r JOIN course c ON r.course_id = c.course_id WHERE c.diff = 5;
SELECT p.first_name, p.last_name FROM prof p JOIN RA r ON p.prof_id = r.prof_id JOIN student s ON r.student_id = s.student_id WHERE s.f_name = 'Oliy' AND s.l_name = 'Spratling';
SELECT T1.popularity FROM prof AS T1 JOIN RA AS T2 ON T1.prof_id = T2.prof_id JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Harrietta' AND T3.l_name = 'Lydford';
SELECT COUNT(*) FROM RA WHERE prof_id = (     SELECT prof_id     FROM prof     WHERE gender = 'F' AND teachingability = (SELECT MIN(teachingability) FROM prof) );
SELECT p.first_name, p.last_name FROM prof p JOIN RA r ON p.prof_id = r.prof_id GROUP BY p.prof_id, p.first_name, p.last_name HAVING COUNT(r.student_id) > 2 AND p.teachingability = (     SELECT MAX(teachingability)     FROM prof     WHERE prof_id IN (         SELECT prof_id         FROM RA         GROUP BY prof_id         HAVING COUNT(student_id) > 2     ) );
SELECT grade FROM registration JOIN student ON registration.student_id = student.student_id JOIN course ON registration.course_id = course.course_id WHERE student.f_name = 'Rik' AND student.l_name = 'Unsworth' AND course.name = 'Computer Network';
SELECT COUNT(*) FROM registration r JOIN student s ON r.student_id = s.student_id JOIN course c ON r.course_id = c.course_id WHERE s.f_name = 'Alvera' AND s.l_name = 'McQuillin';
SELECT s.f_name, s.l_name FROM student s JOIN RA r ON s.student_id = r.student_id WHERE r.prof_id IN (SELECT p.prof_id FROM prof p WHERE p.first_name = 'Zhihua' AND p.last_name = 'Zhou') AND s.type = 'RPG';
SELECT COUNT(*) FROM registration JOIN course ON registration.course_id = course.course_id WHERE course.name = 'Statistical Learning';
SELECT s.f_name, s.l_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Applied Deep Learning' AND (r.grade IS NULL OR r.grade = '');
SELECT T3.phone_number FROM registration AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T2.name = 'Intro to BlockChain' AND T1.grade = 'A';
SELECT     (COUNT(T3.student_id) FILTER (WHERE T3.type = 'TPG') * 100.0 / COUNT(T3.student_id)) AS percentage FROM     RA AS T1 JOIN     prof AS T2 ON T1.prof_id = T2.prof_id JOIN     student AS T3 ON T1.student_id = T3.student_id WHERE     T2.first_name = 'Ogdon' AND T2.last_name = 'Zywicki';
SELECT (COUNT(registration.student_id) FILTER (WHERE registration.grade = 'B' AND course.name = 'Computer Network')) * 100.0 / COUNT(registration.student_id) FILTER (WHERE course.name = 'Computer Network') AS percentage FROM registration JOIN course ON registration.course_id = course.course_id;
SELECT COUNT(*) FROM course WHERE diff = (SELECT MAX(diff) FROM course);
SELECT first_name, last_name FROM prof WHERE graduate_from IN ('Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University');
SELECT name FROM course WHERE credit = (SELECT MAX(credit) FROM course) AND diff = (SELECT MAX(diff) FROM course);
SELECT COUNT(*) FROM student WHERE type = 'UG' AND intelligence = (SELECT MAX(intelligence) FROM student WHERE type = 'UG');
SELECT COUNT(*) FROM prof WHERE gender = 'female' AND popularity = (SELECT MAX(popularity) FROM prof);
SELECT COUNT(*) FROM student WHERE type = 'RPG';
SELECT COUNT(*) FROM registration JOIN course ON registration.course_id = course.course_id WHERE course.name = 'Applied Deep Learning' AND registration.grade = 'A';
SELECT s.gpa FROM student s JOIN RA r ON s.student_id = r.student_id WHERE r.salary = 'free';
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id WHERE c.diff = 1 AND r.grade = 'A' GROUP BY c.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM registration WHERE student_id = (     SELECT student_id     FROM student     WHERE gpa = (         SELECT MAX(gpa)         FROM student     ) );
SELECT COUNT(*) FROM RA WHERE prof_id = (SELECT prof_id FROM prof WHERE first_name = 'Ogdon' AND last_name = 'Zywicki');
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id WHERE r.sat = 5 GROUP BY c.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.intelligence = 1 AND r.sat = 1;
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id WHERE c.name IN ('Advanced Operating System', 'Intro to BlockChain') AND r.grade = 'A' GROUP BY c.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.popularity FROM prof AS T1 JOIN RA AS T2 ON T1.prof_id = T2.prof_id WHERE T2.capability = (SELECT MAX(capability) FROM RA) GROUP BY T1.prof_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1;
SELECT AVG(student_count) FROM (     SELECT COUNT(registration.student_id) AS student_count     FROM registration     JOIN course ON registration.course_id = course.course_id     WHERE course.diff = 4     GROUP BY registration.course_id ) as subquery;
SELECT COUNT(*) FROM student s JOIN registration r ON s.student_id = r.student_id WHERE s.gpa BETWEEN 3 AND 4 AND (r.grade IS NULL OR r.grade = '');
SELECT COUNT(DISTINCT T1.student_id) FROM student AS T1 JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T1.type = 'UG' AND T2.grade = 'A' GROUP BY T1.student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM registration WHERE student_id = T1.student_id);
SELECT AVG(student.gpa), student.f_name, student.l_name FROM student JOIN RA ON student.student_id = RA.student_id WHERE RA.capability = 5 AND RA.salary = 'high' GROUP BY student.student_id, student.f_name, student.l_name;
SELECT T1.prof_id, T2.student_id FROM RA AS T1 JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.capability = (SELECT MIN(capability) FROM RA)
SELECT first_name, last_name FROM prof WHERE graduate_from = 'University of Boston';
SELECT course_id, student_id FROM registration WHERE grade IS NULL OR grade = ''
SELECT     (COUNT(CASE WHEN gender = 'Male' THEN prof_id END) /      COUNT(CASE WHEN gender = 'Female' THEN prof_id END)) as male_to_female_ratio FROM     prof
SELECT name, credit FROM course WHERE diff = (SELECT MIN(diff) FROM course);
SELECT s.f_name, s.l_name, s.gpa FROM student s JOIN RA r ON s.student_id = r.student_id JOIN prof p ON r.prof_id = p.prof_id WHERE p.popularity = (SELECT MAX(popularity) FROM prof);
SELECT s.f_name, s.l_name, s.email FROM student s JOIN RA r ON s.student_id = r.student_id WHERE r.salary = 'free';
SELECT s.f_name, s.l_name, s.gpa, ra.capability FROM student s JOIN RA ra ON s.student_id = ra.student_id JOIN prof p ON ra.prof_id = p.prof_id WHERE p.first_name = 'Merwyn' AND p.last_name = 'Conkay';
SELECT s.f_name, s.l_name, r.grade FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Intro to BlockChain';
SELECT s.f_name, s.l_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.diff = (SELECT MAX(diff) FROM course) AND r.grade = 'A';
SELECT p.first_name, p.last_name, p.graduate_from FROM prof p JOIN RA r ON p.prof_id = r.prof_id JOIN student s ON r.student_id = s.student_id WHERE s.f_name = 'Olia' AND s.l_name = 'Rabier';
SELECT s.f_name, s.l_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Advanced Database Systems' AND r.sat = (SELECT MAX(sat) FROM registration WHERE course_id = c.course_id);
SELECT     SUM(CASE         WHEN T1.grade = 'A' THEN 4 * T2.credit         WHEN T1.grade = 'B' THEN 3 * T2.credit         WHEN T1.grade = 'C' THEN 2 * T2.credit         WHEN T1.grade = 'D' THEN 1 * T2.credit         ELSE 0     END) / SUM(T2.credit) AS semester_gpa FROM     registration AS T1 JOIN     course AS T2 ON T1.course_id = T2.course_id JOIN     student AS T3 ON T1.student_id = T3.student_id WHERE     T3.f_name = 'Laughton' AND T3.l_name = 'Antonio';
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.type = 'UG' AND s.gpa >= 3.7;
SELECT s.f_name, s.l_name, ra.capability FROM student s JOIN RA ra ON s.student_id = ra.student_id JOIN prof p ON ra.prof_id = p.prof_id WHERE p.graduate_from = 'University of Washington';
SELECT s.f_name, s.l_name, s.email, s.intelligence FROM student s JOIN RA r ON s.student_id = r.student_id WHERE r.capability = (SELECT MAX(capability) FROM RA) AND r.salary = 'high';
SELECT c.name, c.credit FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id JOIN RA ra ON s.student_id = ra.student_id JOIN prof p ON ra.prof_id = p.prof_id WHERE p.gender = 'Female' AND p.teachingability = (SELECT MAX(teachingability) FROM prof WHERE gender = 'Female')
SELECT COUNT(*) FROM prof WHERE gender = 'Female';
SELECT name FROM course WHERE diff = (SELECT MAX(diff) FROM course);
SELECT COUNT(*) FROM student WHERE gpa BETWEEN 3.1 AND 3.7 AND type = 'UG';
SELECT credit FROM course WHERE name = 'Computer Vision';
SELECT s.student_id FROM student s JOIN registration r ON s.student_id = r.student_id WHERE s.gpa = 2.5 AND r.grade = 'C' AND r.course_id IN (SELECT course_id FROM course WHERE name = 'Programmers')
SELECT s.l_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Intro to Database 2' ORDER BY r.sat DESC LIMIT 1;
SELECT COUNT(*) FROM student s JOIN RA r ON s.student_id = r.student_id WHERE r.salary = 'high' AND s.gpa > 3;
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.type = 'UG' GROUP BY c.name ORDER BY AVG(r.sat) DESC LIMIT 1;
SELECT RA.capability FROM RA JOIN student ON RA.student_id = student.student_id WHERE student.type = 'RPG' AND student.intelligence >= 4;
SELECT COUNT(*) FROM student s JOIN registration r ON s.student_id = r.student_id WHERE r.grade = 'B' AND s.intelligence = 3;
SELECT c.diff FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.intelligence = 5 AND r.grade = 'A';
SELECT COUNT(*) FROM (   SELECT T1.student_id   FROM RA AS T1   JOIN prof AS T2 ON T1.prof_id = T2.prof_id   WHERE T2.popularity = (SELECT MAX(popularity) FROM prof) AND T1.capability = 5 ) AS temp;
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id WHERE r.grade = 'D';
SELECT RA.capability FROM RA JOIN student ON RA.student_id = student.student_id WHERE student.f_name = 'Alvera' AND student.l_name = 'McQuillin';
SELECT COUNT(*) FROM course JOIN registration ON course.course_id = registration.course_id JOIN student ON registration.student_id = student.student_id WHERE course.credit = 3 AND student.gpa = 3.2;
SELECT COUNT(*) FROM student s JOIN RA r ON s.student_id = r.student_id WHERE r.salary = 'low' AND s.gpa = 3.5;
SELECT s.email FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE r.grade = 'B' AND c.diff > (SELECT AVG(diff)*0.8 FROM course);
SELECT     (COUNT(CASE WHEN RA.salary = 'low' THEN 1 END) * 1.0 / COUNT(RA.salary)) * 100 AS percentage FROM     prof JOIN     RA ON prof.prof_id = RA.prof_id WHERE     prof.teachingability <= 3;
SELECT name AS course_name, credit AS course_credit, diff AS course_difficulty FROM course WHERE credit = (SELECT MAX(credit) FROM course) AND diff = (SELECT MAX(diff) FROM course);
SELECT AVG(teachingability) FROM prof WHERE popularity = (SELECT MAX(popularity) FROM prof);
SELECT AVG(registration.sat) FROM registration JOIN student ON registration.student_id = student.student_id WHERE student.gpa > 3.0 AND registration.grade = 'B';
SELECT f_name, l_name, phone_number FROM student WHERE intelligence < 4 AND gpa > 3;
SELECT s.f_name, s.l_name FROM student s, RA r WHERE s.student_id = r.student_id AND r.capability > (SELECT AVG(capability) FROM RA);
SELECT s.f_name, s.l_name, c.name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE s.intelligence = 5 AND s.gpa < 3;
SELECT AVG(RA.capability) FROM RA JOIN student ON RA.student_id = student.student_id WHERE student.gpa < 2.5;
SELECT p.first_name, p.last_name FROM prof p JOIN RA r ON p.prof_id = r.prof_id JOIN student s ON r.student_id = s.student_id WHERE s.intelligence = 1;
SELECT     (SELECT AVG(s.gpa) FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.diff = (SELECT MAX(diff) FROM course)) -     (SELECT AVG(s.gpa) FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE c.diff = (SELECT MIN(diff) FROM course)) AS difference_in_avg_gpa;
SELECT s.f_name, s.l_name, ra.capability FROM student s JOIN registration r ON s.student_id = r.student_id LEFT JOIN RA ra ON s.student_id = ra.student_id WHERE r.grade IS NULL;
SELECT COUNT(*) FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id JOIN RA ra ON s.student_id = ra.student_id WHERE c.name = 'computer vision' AND ra.salary = 'High';
SELECT p.first_name, p.last_name, p.popularity FROM prof p JOIN RA r ON p.prof_id = r.prof_id GROUP BY p.prof_id, p.first_name, p.last_name, p.popularity ORDER BY COUNT(r.student_id) DESC LIMIT 1;
SELECT c.name, s.f_name, s.l_name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE r.grade = 'A' GROUP BY c.course_id, c.name, s.f_name, s.l_name HAVING COUNT(r.student_id) = (     SELECT COUNT(r2.student_id)     FROM registration r2     WHERE r2.grade = 'A'     GROUP BY r2.course_id     ORDER BY COUNT(r2.student_id) DESC     LIMIT 1 );
SELECT     AVG CASE         WHEN T3.salary = 'high' THEN T2.sat     END - AVG CASE         WHEN T3.salary = 'free' THEN T2.sat     END AS Average_Satisfaction_Difference FROM     course AS T1     JOIN registration AS T2 ON T1.course_id = T2.course_id     JOIN RA AS T3 ON T2.student_id = T3.student_id;
SELECT T2.graduate_from FROM RA AS T1 JOIN prof AS T2 ON T1.prof_id = T2.prof_id JOIN student AS T3 ON T1.student_id = T3.student_id WHERE T3.type = 'UG' GROUP BY T2.prof_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.first_name, p.last_name, p.email FROM prof p JOIN RA r ON p.prof_id = r.prof_id GROUP BY p.prof_id, p.first_name, p.last_name, p.email HAVING COUNT(r.student_id) >= 2 AND p.teachingability > (SELECT AVG(teachingability) FROM prof);
SELECT MULTIPLY(DIVIDE((SELECT COUNT(*) FROM registration WHERE sat = (SELECT MAX(sat) FROM registration) AND course_id = (SELECT course_id FROM course WHERE name = 'Intro to Database 2')), (SELECT COUNT(student_id) FROM registration WHERE course_id = (SELECT course_id FROM course WHERE name = 'Intro to Database 2'))), 1.0) as Percentage;
SELECT f_name, l_name FROM student WHERE gpa = (SELECT MAX(gpa) FROM student);
SELECT COUNT(*) FROM (   SELECT T1.student_id   FROM RA AS T1   JOIN prof AS T2 ON T1.prof_id = T2.prof_id   WHERE T2.teachingability = (SELECT MAX(teachingability) FROM prof)   AND T1.salary = 'high' );
SELECT MIN(RA.salary) AS min_salary, MAX(RA.salary) AS max_salary FROM RA JOIN student ON RA.student_id = student.student_id WHERE student.email = 'grosellg@hku.hk';
SELECT COUNT(*) FROM student JOIN registration ON student.student_id = registration.student_id JOIN course ON registration.course_id = course.course_id WHERE registration.sat = 4 AND course.name = 'Statistical Learning' AND student.gpa = 3.8;
SELECT COUNT(*) FROM registration r JOIN course c ON r.course_id = c.course_id JOIN student s ON r.student_id = s.student_id WHERE c.diff = 3 AND s.intelligence = 2;
SELECT s.f_name, s.l_name FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE r.grade = 'C' AND c.name = 'Applied Deep Learning';
SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.type = 'RPG' AND r.sat = 1;
SELECT     (SELECT COUNT(*) FROM RA JOIN student ON RA.student_id = student.student_id WHERE capability < 3 AND type = 'UG') -     (SELECT COUNT(*) FROM RA JOIN student ON RA.student_id = student.student_id WHERE capability < 3 AND type = 'RPG')
SELECT AVG(student_count) AS average_students_per_advisor FROM (   SELECT p_id_dummy, COUNT(p_id) AS student_count   FROM advisedBy   GROUP BY p_id_dummy ) AS subquery;
SELECT COUNT(*) FROM taughtBy WHERE course_id = 18;
SELECT course_id FROM course WHERE courseLevel = 'Level_500';
SELECT COUNT(course_id) FROM course WHERE courseLevel = 'Level_300';
SELECT p.p_id, tb.course_id FROM person p JOIN taughtBy tb ON p.p_id = tb.p_id WHERE p.hasPosition = 0 AND p.professor = 1;
SELECT DISTINCT tb.p_id FROM taughtBy tb JOIN course c ON tb.course_id = c.course_id WHERE c.courseLevel = 'Level_400';
SELECT c.course_id FROM course AS c JOIN taughtBy AS tb ON c.course_id = tb.course_id JOIN advisedBy AS ab ON tb.p_id = ab.p_id_dummy WHERE ab.p_id = 376;
SELECT advisedBy.p_id_dummy FROM advisedBy JOIN person ON advisedBy.p_id = person.p_id WHERE person.yearsInProgram = 'Year_3';
SELECT course.courseLevel FROM course JOIN taughtBy ON course.course_id = taughtBy.course_id WHERE taughtBy.p_id = 297;
SELECT course.courseLevel, taughtBy.p_id FROM course JOIN taughtBy ON course.course_id = taughtBy.course_id WHERE course.course_id = 165;
SELECT person.p_id, person.yearsInProgram FROM person JOIN taughtBy ON person.p_id = taughtBy.p_id JOIN advisedBy ON person.p_id = advisedBy.p_id WHERE advisedBy.p_id_dummy = 5;
SELECT c.course_id, c.courseLevel FROM course c JOIN taughtBy tb ON c.course_id = tb.course_id JOIN person p ON tb.p_id = p.p_id WHERE p.professor = 1 AND p.hasPosition = 'Faculty_eme';
SELECT T3.courseLevel FROM advisedBy AS T1 JOIN person AS T2 ON T1.p_id_dummy = T2.p_id JOIN taughtBy AS T4 ON T2.p_id = T4.p_id JOIN course AS T3 ON T3.course_id = T4.course_id WHERE T1.p_id = 80;
SELECT p_id FROM taughtBy WHERE course_id IN (     SELECT course_id     FROM course     WHERE courseLevel = 'Level_400' ) INTERSECT SELECT p_id FROM taughtBy WHERE course_id IN (     SELECT course_id     FROM course     WHERE courseLevel = 'Level_500' );
SELECT T1.p_id AS ProfessorID, T2.p_id AS StudentID FROM advisedBy AS T1 JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_12';
SELECT c.course_id, c.courseLevel FROM course c JOIN taughtBy tb ON c.course_id = tb.course_id GROUP BY c.course_id, c.courseLevel HAVING COUNT(tb.p_id) = (     SELECT COUNT(p_id) AS prof_count     FROM taughtBy     GROUP BY course_id     ORDER BY prof_count DESC     LIMIT 1 )
Error: 第 984 个样本有 2 个SQL。
SELECT COUNT(*) FROM taughtBy WHERE course_id = 11;
SELECT     CASE         WHEN (SELECT COUNT(*) FROM taughtBy WHERE course_id = 16) > (SELECT COUNT(*) FROM taughtBy WHERE course_id = 18) THEN 'Course 16'         ELSE 'Course 18'     END AS Course_With_More_Teachers;
SELECT COUNT(*) FROM person WHERE professor = 1 AND hasPosition = 'Faculty_eme';
SELECT p_id_dummy FROM advisedBy GROUP BY p_id_dummy HAVING COUNT(p_id) > 4;
SELECT COUNT(*) FROM course JOIN taughtBy ON course.course_id = taughtBy.course_id JOIN person ON taughtBy.p_id = person.p_id WHERE course.courseLevel = 'Level_300' AND person.professor = 1;
SELECT taughtBy.p_id FROM taughtBy JOIN course ON taughtBy.course_id = course.course_id JOIN person ON taughtBy.p_id = person.p_id WHERE course.courseLevel IN ('Level_300') AND person.hasPosition = 'Faculty_eme';
SELECT COUNT(*) > 0 AS IsFacultyMember FROM computer_student.taughtBy tb JOIN computer_student.person p ON tb.p_id = p.p_id WHERE tb.course_id = 9 AND p.hasPosition != 0;
SELECT DISTINCT c.courseLevel FROM course c JOIN taughtBy tb ON c.course_id = tb.course_id WHERE tb.p_id = 79;
SELECT advisedBy.p_id_dummy FROM advisedBy JOIN person ON advisedBy.p_id = person.p_id WHERE person.yearsInProgram = 'Year_5';
SELECT COUNT(*) FROM advisedBy JOIN taughtBy ON advisedBy.p_id_dummy = taughtBy.p_id JOIN course ON taughtBy.course_id = course.course_id WHERE course.courseLevel = 'Level_300' AND advisedBy.p_id IN (SELECT p_id FROM person WHERE student = 1);
SELECT COUNT(*) FROM course JOIN taughtBy ON course.course_id = taughtBy.course_id JOIN person ON taughtBy.p_id = person.p_id WHERE course.courseLevel = 'Level_300' AND person.hasPosition != 0;
SELECT taughtBy.course_id FROM taughtBy WHERE taughtBy.p_id IN (     SELECT advisedBy.p_id_dummy     FROM advisedBy     WHERE advisedBy.p_id = 6 );
SELECT c.courseLevel FROM course c JOIN taughtBy tb ON c.course_id = tb.course_id GROUP BY c.course_id ORDER BY COUNT(tb.p_id) DESC LIMIT 1;
SELECT p_id FROM taughtBy WHERE p_id IN (SELECT p_id FROM taughtBy GROUP BY p_id HAVING COUNT(course_id) > 3) AND p_id IN (SELECT p_id FROM person WHERE professor = 1);
SELECT p_id FROM taughtBy WHERE professor = 1 GROUP BY p_id ORDER BY COUNT(course_id) DESC LIMIT 3;
SELECT COUNT(DISTINCT advisedBy.p_id_dummy) FROM advisedBy JOIN person ON advisedBy.p_id = person.p_id WHERE person.yearsInProgram = 'Year_3';
SELECT AVG(subquery.count_of_courses) FROM (     SELECT COUNT(taughtBy.course_id) as count_of_courses     FROM taughtBy     JOIN person ON taughtBy.p_id = person.p_id     WHERE person.professor = 1     GROUP BY taughtBy.p_id ) AS subquery;
SELECT     COUNT(CASE WHEN professor = 1 THEN p_id END) / COUNT(CASE WHEN student = 1 THEN p_id END) AS ratio FROM     person;
SELECT     (COUNT(CASE WHEN course.courseLevel = 'Level_400' THEN course.course_id END) * 100.0 / COUNT(course.course_id)) AS Percentage_High_Level_Undergraduate_Course FROM     course;
SELECT p_id FROM taughtBy WHERE course_id = 18;
SELECT person.hasPosition, advisedBy.p_id_dummy FROM person JOIN advisedBy ON person.p_id = advisedBy.p_id_dummy WHERE advisedBy.p_id = 303;
SELECT T1.p_id, T3.courseLevel FROM person AS T1 JOIN taughtBy AS T2 ON T1.p_id = T2.p_id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.professor = 1 AND T1.hasPosition = 'Faculty_aff';
SELECT T1.yearsInProgram, T1.inPhase FROM person T1 JOIN (   SELECT p_id, COUNT(p_id_dummy) as num_advisor   FROM advisedBy   GROUP BY p_id   ORDER BY num_advisor DESC   LIMIT 1 ) T2 ON T1.p_id = T2.p_id WHERE T1.student = 1;
SELECT person.p_id, advisedBy.p_id_dummy FROM person JOIN advisedBy ON person.p_id = advisedBy.p_id WHERE person.hasPosition = 'Faculty_eme';
SELECT course.course_id, course.courseLevel FROM course JOIN taughtBy ON course.course_id = taughtBy.course_id WHERE taughtBy.p_id BETWEEN 40 AND 50;
SELECT course.courseLevel, taughtBy.p_id FROM course JOIN taughtBy ON course.course_id = taughtBy.course_id WHERE course.course_id = 147;
SELECT T2.p_id, T1.courseLevel FROM course AS T1 JOIN taughtBy AS T2 ON T1.course_id = T2.course_id JOIN person AS T3 ON T2.p_id = T3.p_id WHERE T1.course_id = 104 AND T3.professor = 1 AND T3.hasPosition != 0;
SELECT person.p_id, person.hasPosition FROM person JOIN taughtBy ON person.p_id = taughtBy.p_id JOIN course ON taughtBy.course_id = course.course_id WHERE course.courseLevel = 'Level_400' AND course.course_id < 10 AND person.professor = 1;
SELECT taughtBy.p_id FROM taughtBy JOIN course ON taughtBy.course_id = course.course_id WHERE course.courseLevel = 'Level_300' AND course.course_id BETWEEN 121 AND 130;
SELECT advisedBy.p_id_dummy, person.hasPosition FROM advisedBy JOIN person ON advisedBy.p_id = person.p_id WHERE person.yearsInProgram = 'Year_8' AND person.hasPosition = 1 AND person.professor = 1;
SELECT course.course_id, taughtBy.p_id FROM course JOIN taughtBy ON course.course_id = taughtBy.course_id WHERE course.courseLevel = 'Level_500' LIMIT 5;
SELECT COUNT(*) FROM person p JOIN advisedBy ab ON p.p_id = ab.p_id WHERE ab.p_id_dummy = 415 AND p.student = TRUE;
SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_500';
SELECT COUNT(*) FROM person WHERE hasPosition = 0 AND inPhase = 0;
SELECT taughtBy.p_id FROM taughtBy GROUP BY taughtBy.p_id ORDER BY COUNT(taughtBy.course_id) LIMIT 1;
SELECT COUNT(*) FROM person p JOIN advisedBy ab ON p.p_id = ab.p_id WHERE ab.p_id_dummy = 5 AND p.yearsInProgram = 'Year_5';
SELECT T3.professor FROM taughtBy AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id JOIN person AS T3 ON T1.p_id = T3.p_id WHERE T2.courseLevel IN ('Level_500', 'Level_600') GROUP BY T3.professor ORDER BY COUNT(T1.course_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT t1.p_id) FROM person t1 JOIN taughtBy t2 ON t1.p_id = t2.p_id JOIN course t3 ON t2.course_id = t3.course_id WHERE t1.professor = 1 AND t1.hasPosition = 'Faculty_aff' AND t3.courseLevel = 'Level_500'
SELECT T3.professor FROM course AS T1 JOIN taughtBy AS T2 ON T1.course_id = T2.course_id JOIN person AS T3 ON T2.p_id = T3.p_id WHERE T1.courseLevel = 'Level_500' GROUP BY T3.professor ORDER BY COUNT(T1.course_id) DESC LIMIT 5;
SELECT COUNT(DISTINCT advisedBy.p_id_dummy) FROM advisedBy JOIN person ON advisedBy.p_id = person.p_id WHERE person.student = 1 AND person.yearsInProgram = 'Year_1';
SELECT COUNT(DISTINCT t1.p_id) FROM taughtBy AS t1 JOIN course AS t2 ON t1.course_id = t2.course_id WHERE t2.courseLevel = 'Level_400' GROUP BY t1.p_id HAVING COUNT(t1.course_id) <= 2;
SELECT p.p_id FROM person p JOIN taughtBy tb ON p.p_id = tb.p_id JOIN course c ON tb.course_id = c.course_id WHERE p.hasPosition = 'Faculty_eme' AND p.professor = 1 AND c.courseLevel = 'Level_400';
SELECT T1.hasPosition FROM person AS T1 JOIN taughtBy AS T2 ON T1.p_id = T2.p_id GROUP BY T2.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1;
SELECT T1.yearsInProgram FROM person AS T1 JOIN advisedBy AS T2 ON T1.p_id = T2.p_id WHERE T1.student = 1 GROUP BY T1.p_id HAVING COUNT(T2.p_id_dummy) > 2;
SELECT COUNT(DISTINCT T2.p_id) FROM course AS T1 JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_300';
SELECT p1.yearsInProgram FROM person p1 JOIN advisedBy ab ON p1.p_id = ab.p_id_dummy JOIN person p2 ON ab.p_id = p2.p_id GROUP BY p1.yearsInProgram ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM person JOIN advisedBy ON person.p_id = advisedBy.p_id WHERE person.student = 1 AND person.inPhase = 'Pre-Quals';
SELECT AVG(count) FROM (   SELECT COUNT(course_id) as count, p_id   FROM taughtBy   JOIN course ON taughtBy.course_id = course.course_id   WHERE courseLevel = 'Level_500'   GROUP BY p_id ) as subquery;
SELECT COUNT(*) FROM (   SELECT course_id   FROM taughtBy   GROUP BY course_id   HAVING COUNT(p_id) > 4 ) as result;
SELECT course_id FROM course WHERE courseLevel = 'Level_500';
SELECT SUM(CASE WHEN yearsInProgram = 'Year_1' THEN 1 ELSE 0 END) +        SUM(CASE WHEN yearsInProgram = 'Year_2' THEN 1 ELSE 0 END) AS SumOfYears1And2 FROM   computer_student.person WHERE  student = 1;
SELECT COUNT(*) FROM taughtBy tb JOIN person p ON tb.p_id = p.p_id WHERE p.professor = 1 AND p.hasPosition <> 0;
SELECT T1.professor, T1.hasPosition FROM person AS T1 JOIN (   SELECT p_id, COUNT(*) AS num_courses   FROM taughtBy   GROUP BY p_id   ORDER BY num_courses DESC   LIMIT 1 ) AS T2 ON T1.p_id = T2.p_id;
SELECT c.course_id FROM course c JOIN taughtBy tb ON c.course_id = tb.course_id JOIN person p ON tb.p_id = p.p_id WHERE p.professor = 1 AND p.hasPosition = 0;
SELECT T1.p_id, MAX(T3.courseLevel) as General_Course_Level FROM person AS T1 JOIN taughtBy AS T2 ON T1.p_id = T2.p_id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.hasPosition <> 0 GROUP BY T1.p_id ORDER BY COUNT(T2.course_id) DESC LIMIT 1;
SELECT device_id FROM gender_age_train WHERE age = (SELECT MAX(age) FROM gender_age_train);
SELECT COUNT(*) FROM events WHERE longitude = 97 AND latitude = 40;
SELECT COUNT(*) FROM gender_age WHERE gender = 'M' AND `group` = 'M32-38';
SELECT COUNT(*) FROM gender_age WHERE gender = 'F' AND age > 50;
SELECT COUNT(*) FROM app_events WHERE event_id = 2 AND is_active = 1;
SELECT gender FROM gender_age WHERE age = (SELECT MIN(age) FROM gender_age);
SELECT lc.category FROM label_categories lc JOIN app_labels al ON lc.label_id = al.label_id GROUP BY lc.category ORDER BY COUNT(al.app_id) DESC LIMIT 1;
SELECT pb.device_model FROM phone_brand_device_model2 pb JOIN gender_age ga ON pb.device_id = ga.device_id WHERE ga.age = (SELECT MAX(age) FROM gender_age)
SELECT COUNT(DISTINCT app_all.app_id) FROM app_all JOIN app_labels ON app_all.app_id = app_labels.app_id JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE label_categories.category = 'Home Decoration';
SELECT COUNT(*) FROM events JOIN gender_age ON events.device_id = gender_age.device_id JOIN app_events ON events.event_id = app_events.event_id WHERE gender_age.gender = 'M' AND app_events.is_active = 1 AND events.timestamp LIKE '2016-05-01%';
SELECT COUNT(*) FROM gender_age_train JOIN phone_brand_device_model2 ON gender_age_train.device_id = phone_brand_device_model2.device_id WHERE gender_age_train.gender = 'F' AND phone_brand_device_model2.device_model = 'ZenFone 5';
SELECT MAX(ga.age) FROM gender_age ga JOIN events e ON ga.device_id = e.device_id JOIN app_events ae ON e.event_id = ae.event_id WHERE ae.is_active = 1 AND e.timestamp LIKE '2016-05-06%' AND e.longitude = 121 AND e.latitude = 31;
SELECT pb.device_model, COUNT(pb.device_id) as count FROM phone_brand_device_model2 pb JOIN gender_age ga ON pb.device_id = ga.device_id WHERE ga.gender = 'F' AND ga.group = 'F27-28' GROUP BY pb.device_model ORDER BY count DESC LIMIT 1;
SELECT lc.category FROM label_categories lc JOIN app_labels al ON lc.label_id = al.label_id JOIN app_events ae ON al.app_id = ae.app_id JOIN events e ON ae.event_id = e.event_id WHERE e.timestamp IN (     SELECT MIN(timestamp)     FROM events     ORDER BY timestamp ASC     LIMIT 2 ) GROUP BY lc.category;
SELECT T1.gender FROM gender_age AS T1 JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo' GROUP BY T1.gender ORDER BY COUNT(*) DESC LIMIT 1;
SELECT label_categories.category, COUNT(app_all.app_id) AS user_count FROM app_all JOIN app_labels ON app_all.app_id = app_labels.app_id JOIN label_categories ON app_labels.label_id = label_categories.label_id GROUP BY label_categories.category ORDER BY user_count DESC LIMIT 1;
SELECT COUNT(DISTINCT ga.device_id) AS num_users FROM gender_age_train ga JOIN events e ON ga.device_id = e.device_id JOIN app_events ae ON e.event_id = ae.event_id JOIN app_labels al ON ae.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'MOBA'
SELECT     CONCAT(ROUND((COUNT(CASE WHEN gender = 'F' THEN device_id END) / (COUNT(CASE WHEN phone_brand = 'OPPO' THEN device_id END))) * 100, 2), '%') AS 'Percentage of Female OPPO Users',     CONCAT(ROUND((COUNT(CASE WHEN gender = 'M' THEN device_id END) / (COUNT(CASE WHEN phone_brand = 'OPPO' THEN device_id END))) * 100, 2), '%') AS 'Percentage of Male OPPO Users' FROM     gender_age_train JOIN     phone_brand_device_model2 ON gender_age_train.device_id = phone_brand_device_model2.device_id WHERE     phone_brand = 'OPPO';
SELECT longitude, latitude FROM events WHERE timestamp LIKE '2016-05-08%';
SELECT app_id, is_installed FROM app_events WHERE event_id = 844;
SELECT COUNT(*) FROM events WHERE timestamp LIKE '2016-04-30%';
SELECT COUNT(*) FROM phone_brand_device_model2 WHERE phone_brand = 'vivo' AND device_model = 'Xplay3S';
Error: 第 1062 个样本有 2 个SQL。
SELECT label_id FROM label_categories WHERE category IN ('online shopping', 'online malls');
SELECT pb.device_model, pb.phone_brand FROM phone_brand_device_model2 pb JOIN events e ON pb.device_id = e.device_id WHERE e.timestamp LIKE '2016-05-05%' AND e.longitude = 112 AND e.latitude = 44;
SELECT ae.app_id, e.timestamp FROM app_events ae JOIN events e ON ae.event_id = e.event_id WHERE ae.event_id = 82;
SELECT ga.gender, ga.age FROM gender_age ga JOIN events e ON ga.device_id = e.device_id WHERE e.event_id = 15251;
SELECT COUNT(*) FROM events e JOIN gender_age g ON e.device_id = g.device_id WHERE g.age = 88 AND g.gender = 'M' AND e.timestamp LIKE '2016-05-04%';
SELECT     ga.gender,     ga.age,     COUNT(e.event_id) as num_events FROM     gender_age ga JOIN     events e ON ga.device_id = e.device_id WHERE     e.longitude = -102 AND e.latitude = 38 GROUP BY     ga.gender,     ga.age;
SELECT pb.device_model, pb.phone_brand FROM phone_brand_device_model2 pb JOIN events e ON pb.device_id = e.device_id WHERE e.longitude = 80 AND e.latitude = 44;
SELECT label_categories.category FROM app_events JOIN app_labels ON app_events.app_id = app_labels.app_id JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE app_events.event_id = 155;
SELECT ga.device_id FROM gender_age ga JOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id WHERE pbdm.phone_brand = 'HTC' AND pbdm.device_model = 'Butterfly' AND ga.gender = 'F' LIMIT 5;
SELECT COUNT(DISTINCT app_id) FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE label_categories.category = 'science fiction';
SELECT ga.gender, ga.age FROM gender_age ga JOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id WHERE pbdm.phone_brand = 'LG' AND pbdm.device_model = 'L70';
SELECT CONCAT(ROUND((COUNT(case when lc.category = 'Industry tag' then al.app_id end) * 100.0 / COUNT(al.app_id)),2), '%') AS percentage FROM app_labels al JOIN label_categories lc ON al.label_id = lc.label_id;
SELECT     CONCAT(ROUND((COUNT(CASE WHEN T2.device_model = 'Nexus 5' THEN T2.device_id END) * 100 / COUNT(T2.device_id)), 2), '%') AS Nexus_5_percentage,     COUNT(CASE WHEN T2.device_model = 'Nexus 5' AND T1.gender = 'M' THEN T2.device_id END) / COUNT(CASE WHEN T2.device_model = 'Nexus 5' AND T1.gender = 'F' THEN T2.device_id END) AS Gender_ratio FROM gender_age_train T1 JOIN phone_brand_device_model2 T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'LG'
SELECT COUNT(*) FROM app_events WHERE event_id = 2 AND is_active = 0;
SELECT COUNT(*) FROM events WHERE timestamp LIKE '2016%';
SELECT COUNT(*) FROM events WHERE device_id = 29182687948017100 AND timestamp LIKE '2016%';
SELECT COUNT(*) FROM gender_age WHERE gender = 'M';
SELECT MAX(age) FROM gender_age;
SELECT COUNT(*) FROM gender_age WHERE gender = 'F' AND age < 30;
SELECT COUNT(*) FROM gender_age_train JOIN phone_brand_device_model2 ON gender_age_train.device_id = phone_brand_device_model2.device_id WHERE phone_brand_device_model2.device_model = 'Galaxy Note 2' AND gender_age_train.gender = 'F';
SELECT ga.age FROM gender_age ga JOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id WHERE pbdm.device_model = 'Galaxy Note 2'
SELECT pbdm.device_model FROM phone_brand_device_model2 pbdm JOIN gender_age ga ON pbdm.device_id = ga.device_id WHERE ga.age = (SELECT MAX(age) FROM gender_age)
SELECT ga.group FROM (   SELECT gb.device_id, gb.group   FROM (     SELECT pb.device_id     FROM phone_brand_device_model2 pb     WHERE pb.phone_brand = 'vivo'   ) AS v   JOIN gender_age ga ON v.device_id = ga.device_id   GROUP BY ga.group ) AS gb GROUP BY gb.group ORDER BY COUNT(gb.group) DESC LIMIT 1;
SELECT COUNT(DISTINCT app_all.app_id) FROM app_all JOIN app_labels ON app_all.app_id = app_labels.app_id JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE label_categories.category = 'Securities';
SELECT label_categories.category FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE app_labels.app_id = 1977658975649780000;
SELECT lc.category FROM label_categories lc JOIN app_labels al ON lc.label_id = al.label_id JOIN app_events ae ON al.app_id = ae.app_id WHERE ae.event_id = 2 AND ae.is_active = 0;
SELECT e.longitude, e.latitude FROM events e JOIN app_events ae ON e.event_id = ae.event_id WHERE ae.is_active = 0 AND e.event_id = 2;
SELECT MIN(events.timestamp) FROM events JOIN app_events ON events.event_id = app_events.event_id WHERE app_events.event_id = 2 AND app_events.is_active = 0;
SELECT e.event_id FROM events e JOIN phone_brand_device_model2 pd ON e.device_id = pd.device_id WHERE pd.phone_brand = 'vivo';
SELECT COUNT(*) FROM events_relevant JOIN phone_brand_device_model2 ON events_relevant.device_id = phone_brand_device_model2.device_id WHERE events_relevant.event_id = 2 AND phone_brand_device_model2.phone_brand = 'vivo';
SELECT timestamp FROM events WHERE event_id = '2' AND device_id IN (     SELECT device_id     FROM phone_brand_device_model2     WHERE phone_brand = 'vivo' );
SELECT COUNT(*) FROM events JOIN phone_brand_device_model2 ON events.device_id = phone_brand_device_model2.device_id WHERE phone_brand_device_model2.phone_brand = 'vivo' AND YEAR(events.timestamp) = 2016;
SELECT COUNT(*) FROM gender_age_train gat JOIN phone_brand_device_model2 pbdm ON gat.device_id = pbdm.device_id WHERE pbdm.phone_brand = 'vivo' AND gat.gender = 'F' AND gat.age < 30;
SELECT lc.category FROM (   SELECT al.label_id, COUNT(aa.app_id) AS user_count   FROM app_labels al   JOIN app_all aa ON al.app_id = aa.app_id   GROUP BY al.label_id ) l JOIN label_categories lc ON l.label_id = lc.label_id WHERE l.user_count = (   SELECT MAX(user_count)   FROM (     SELECT COUNT(aa.app_id) AS user_count     FROM app_labels al     JOIN app_all aa ON al.app_id = aa.app_id     GROUP BY al.label_id   ) t ) LIMIT 1;
SELECT pb.phone_brand FROM phone_brand_device_model2 pb JOIN gender_age ga ON pb.device_id = ga.device_id WHERE ga.gender = 'F' ORDER BY ga.age ASC LIMIT 1;
SELECT COUNT(*) FROM gender_age_train JOIN phone_brand_device_model2 ON gender_age_train.device_id = phone_brand_device_model2.device_id WHERE gender_age_train.group = 'M23-26' AND phone_brand_device_model2.phone_brand = 'vivo';
SELECT     (COUNT(CASE WHEN T2.group = 'M23-26' THEN T1.device_id END) * 100 / COUNT(T1.device_id)) AS percentage FROM     phone_brand_device_model2 AS T1 JOIN     gender_age AS T2 ON T1.device_id = T2.device_id WHERE     T1.phone_brand = 'vivo'
SELECT SUM(CASE WHEN T2.phone_brand = 'vivo' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.device_id) FROM events AS T1 JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.event_id = '2';
SELECT AVG(ga.age) FROM gender_age ga JOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id WHERE pbdm.phone_brand = 'vivo';
SELECT COUNT(*) FROM gender_age WHERE gender = 'F' AND `group` = 'F27-28';
SELECT MAX(age) FROM gender_age WHERE gender = 'M';
SELECT COUNT(*) FROM app_events WHERE is_installed = 1 AND is_active = 0;
SELECT MIN(age) FROM gender_age WHERE device_id IN (     SELECT device_id     FROM app_events     WHERE app_id = 'target_app_id' ) AND gender = 'F';
SELECT COUNT(DISTINCT device_model) FROM phone_brand_device_model2 WHERE phone_brand = 'VIVO';
SELECT device_model FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO' LIMIT 15;
SELECT pb.device_model, COUNT(*) as frequency FROM (     SELECT ga.device_id     FROM gender_age_train ga     WHERE ga.gender = 'M' AND ga.group = 'M39+' ) ma JOIN events e ON ma.device_id = e.device_id JOIN phone_brand_device_model2 pb ON e.device_id = pb.device_id GROUP BY pb.device_model ORDER BY frequency DESC LIMIT 10;
SELECT pb.device_model, COUNT(DISTINCT e.device_id) AS user_count FROM (     SELECT ae.event_id     FROM app_events ae     WHERE ae.is_installed = 1 AND ae.is_active = 1     LIMIT 5 ) AS subq JOIN events e ON subq.event_id = e.event_id JOIN phone_brand_device_model2 pb ON e.device_id = pb.device_id GROUP BY pb.device_model ORDER BY user_count DESC LIMIT 5;
SELECT COUNT(DISTINCT ga.device_id) AS Num_Users FROM gender_age_train ga JOIN events e ON ga.device_id = e.device_id JOIN app_events ae ON e.event_id = ae.event_id JOIN app_labels al ON ae.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'Financial Information';
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age_train ga JOIN events e ON ga.device_id = e.device_id JOIN app_events ae ON e.event_id = ae.event_id JOIN app_labels al ON ae.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id WHERE lc.category = 'game-Art Style';
SELECT COUNT(*) FROM gender_age JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE gender_age.gender = 'M' AND phone_brand_device_model2.phone_brand = 'OPPO';
SELECT pb.phone_brand FROM phone_brand_device_model2 pb JOIN gender_age ga ON pb.device_id = ga.device_id WHERE ga.age = (SELECT MIN(age) FROM gender_age)
SELECT category FROM (   SELECT label_categories.category, COUNT(app_labels.label_id) AS user_count   FROM app_labels   JOIN label_categories ON app_labels.label_id = label_categories.label_id   GROUP BY label_categories.category ) AS subquery ORDER BY user_count ASC LIMIT 3;
SELECT COUNT(*) FROM gender_age_train JOIN phone_brand_device_model2 ON gender_age_train.device_id = phone_brand_device_model2.device_id WHERE gender_age_train.gender = 'M' AND phone_brand_device_model2.device_model = 'Galaxy Ace Plus';
SELECT ga.group FROM (   SELECT pbdm.device_id, pbdm.phone_brand, ga.group   FROM phone_brand_device_model2 pbdm   JOIN gender_age ga ON pbdm.device_id = ga.device_id   WHERE pbdm.phone_brand = 'OPPO' ) AS temp GROUP BY temp.group ORDER BY COUNT(temp.group) DESC LIMIT 1;
SELECT pb.device_model, COUNT(*) AS count FROM phone_brand_device_model2 pb JOIN gender_age ga ON pb.device_id = ga.device_id WHERE ga.gender = 'F' GROUP BY pb.device_model ORDER BY count DESC LIMIT 5;
SELECT     (SUM(CASE WHEN lc.category = '80s Japanese comic' THEN 1 ELSE 0 END) / COUNT(ae.app_id)) * 100 AS '80s_ratio',     (SUM(CASE WHEN lc.category = '90s Japanese comic' THEN 1 ELSE 0 END) / COUNT(ae.app_id)) * 100 AS '90s_ratio' FROM     app_events ae JOIN     app_labels al ON ae.app_id = al.app_id JOIN     label_categories lc ON al.label_id = lc.label_id;
SELECT     SUM(CASE WHEN T3.phone_brand = 'OPPO' THEN 1 ELSE 0 END) * 100 / SUM(CASE WHEN T3.device_model = 'R815T' THEN 1 ELSE 0 END) AS percentage FROM     gender_age_train T1 JOIN     events T2 ON T1.device_id = T2.device_id JOIN     phone_brand_device_model2 T3 ON T2.device_id = T3.device_id WHERE     T1.gender = 'F'
SELECT phone_brand FROM phone_brand_device_model2 WHERE device_model = '坚果手机'
SELECT COUNT(*) FROM phone_brand_device_model2 WHERE phone_brand = '中兴' GROUP BY device_model;
SELECT `group` FROM gender_age WHERE age = 24;
SELECT timestamp FROM events WHERE event_id = '887711';
SELECT COUNT(*) FROM events WHERE DATE(timestamp) = '2016-05-06';
SELECT T1.device_id, T2.device_model FROM events AS T1 JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.timestamp = '2016/5/7 23:55:16' AND T1.longitude = 113 AND T1.latitude = 28;
SELECT COUNT(*) FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE label_categories.category = 'game-Fishing';
SELECT COUNT(*) FROM gender_age_test JOIN phone_brand_device_model2 ON gender_age_test.device_id = phone_brand_device_model2.device_id WHERE phone_brand_device_model2.device_model = '魅蓝Note 2' AND gender_age_test.device_id IN (SELECT device_id FROM gender_age WHERE `group` = 'F29-32');
SELECT COUNT(*) FROM events JOIN gender_age ON events.device_id = gender_age.device_id JOIN app_events ON events.event_id = app_events.event_id WHERE gender_age.age = '30' AND app_events.is_active = 1 AND events.timestamp LIKE '2016-05-02%';
SELECT COUNT(*) FROM app_events JOIN events ON app_events.event_id = events.event_id WHERE events.timestamp = '2016-05-06 23:33:34' AND app_events.is_installed = 1;
SELECT COUNT(*) FROM gender_age_train JOIN phone_brand_device_model2 ON gender_age_train.device_id = phone_brand_device_model2.device_id WHERE gender_age_train.gender = 'F' AND phone_brand_device_model2.phone_brand = 'E派';
SELECT COUNT(*) FROM gender_age_train JOIN phone_brand_device_model2 ON gender_age_train.device_id = phone_brand_device_model2.device_id WHERE gender_age_train.gender = 'M' AND phone_brand_device_model2.device_model = 'Galaxy S5';
SELECT COUNT(DISTINCT ga.device_id) FROM gender_age ga JOIN events e ON ga.device_id = e.device_id JOIN app_events ae ON e.event_id = ae.event_id WHERE ga.group = 'F29-32' AND ae.is_active = '1' AND DATE(e.timestamp) = '2016-05-07';
SELECT label_categories.category FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE app_labels.app_id = 894384172610331000;
SELECT COUNT(DISTINCT app_events.app_id) FROM app_events JOIN events ON app_events.event_id = events.event_id WHERE events.timestamp = '2016-05-06 14:09:49' AND events.longitude = 116 AND events.latitude = 40 AND app_events.is_active = 1;
SELECT     (SELECT COUNT(*) FROM app_events ae INNER JOIN events e ON ae.event_id = e.event_id WHERE ae.is_active = 1 AND e.timestamp = '2016-05-02 07:50:28') /     (SELECT COUNT(*) FROM app_events ae INNER JOIN events e ON ae.event_id = e.event_id WHERE ae.is_active = 1 AND e.timestamp = '2016-05-02 07:41:03')
SELECT COUNT(*) FROM phone_brand_device_model2 WHERE phone_brand = 'vivo';
SELECT (SUM(CASE WHEN phone_brand = 'vivo' THEN 1 ELSE 0 END) - SUM(CASE WHEN phone_brand = 'LG' THEN 1 ELSE 0 END)) AS Difference FROM phone_brand_device_model2
SELECT device_id FROM gender_age WHERE age = (SELECT MIN(age) FROM gender_age);
SELECT COUNT(*) FROM gender_age WHERE gender = 'F' AND age > 30;
SELECT gender FROM gender_age WHERE age = (SELECT MAX(age) FROM gender_age)
SELECT MIN(age) FROM gender_age WHERE gender = 'F';
SELECT MIN(ga.age) FROM gender_age ga JOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id WHERE pbdm.phone_brand = 'vivo';
SELECT DISTINCT app_id FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE category = 'Securities';
SELECT ga.gender FROM gender_age ga JOIN events e ON ga.device_id = e.device_id WHERE e.timestamp = '2016-05-01 00:55:25';
SELECT COUNT(DISTINCT e.device_id) FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE YEAR(e.timestamp) = 2016 AND ga.group = 'M23-26';
SELECT T3.phone_brand FROM gender_age AS T1 JOIN events AS T2 ON T1.device_id = T2.device_id JOIN phone_brand_device_model2 AS T3 ON T2.device_id = T3.device_id WHERE T1.group = 'M23-26' GROUP BY T3.phone_brand ORDER BY COUNT(*) DESC LIMIT 1;
SELECT longitude, latitude FROM events WHERE device_id IN (     SELECT device_id     FROM phone_brand_device_model2     WHERE device_model = 'Galaxy Note 2' );
SELECT DISTINCT pbdm.device_model FROM phone_brand_device_model2 AS pbdm JOIN gender_age AS ga ON pbdm.device_id = ga.device_id WHERE ga.gender = 'F';
SELECT label_categories.category FROM label_categories JOIN app_labels ON label_categories.label_id = app_labels.label_id WHERE app_labels.app_id = 7324884708820020000;
SELECT COUNT(*) FROM app_events JOIN app_labels ON app_events.app_id = app_labels.app_id JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE app_events.event_id = 2 AND app_events.is_active = 0 AND label_categories.category = 'Property Industry 1.0';
SELECT COUNT(DISTINCT label_categories.category) FROM app_events JOIN app_labels ON app_events.app_id = app_labels.app_id JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE app_events.event_id = 2 AND app_events.is_active = 0;
SELECT pb.device_model FROM (     SELECT ga.device_id     FROM gender_age AS ga     WHERE ga.gender = 'F' AND ga.age > 30 ) AS f_users JOIN phone_brand_device_model2 AS pb ON f_users.device_id = pb.device_id GROUP BY pb.device_model ORDER BY COUNT(f_users.device_id) DESC LIMIT 1;
SELECT DISTINCT pbdm.device_model FROM phone_brand_device_model2 pbdm JOIN events e ON pbdm.device_id = e.device_id WHERE e.longitude = 121 AND e.latitude = 31;
SELECT lc.category, COUNT(DISTINCT ae.app_id) AS app_users FROM app_events ae JOIN app_labels al ON ae.app_id = al.app_id JOIN label_categories lc ON al.label_id = lc.label_id GROUP BY lc.category ORDER BY app_users DESC LIMIT 3;
SELECT e.event_id FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE ga.age = (SELECT MAX(age) FROM gender_age)
SELECT COUNT(e.event_id) FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE ga.gender = 'F' AND ga.age = (SELECT MIN(age) FROM gender_age WHERE gender = 'F');
SELECT COUNT(DISTINCT e.device_id) FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE e.timestamp LIKE '2016-05-01%' AND ga.gender = 'M';
SELECT     IF(         (SELECT COUNT(*) FROM (             SELECT DISTINCT app_id FROM app_labels             WHERE label_id IN (                 SELECT label_id FROM label_categories                 WHERE category = 'Securities'             )         ) AS SecuritiesApps) -         (SELECT COUNT(*) FROM (             SELECT DISTINCT app_id FROM app_labels             WHERE label_id IN (                 SELECT label_id FROM label_categories                 WHERE category = 'Finance'             )         ) AS FinanceApps) > 0,         'Securities',         'Finance'     ) AS more;
SELECT DISTINCT pbdm.device_model FROM phone_brand_device_model2 AS pbdm JOIN gender_age AS ga ON pbdm.device_id = ga.device_id WHERE ga.group = 'M23-26';
SELECT AVG(ga.age) FROM gender_age ga JOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id WHERE ga.gender = 'F' AND pbdm.phone_brand = 'vivo';
SELECT     CAST(SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) as ratio FROM     gender_age JOIN     phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE     phone_brand = 'vivo';
SELECT     COUNT(CASE WHEN lc.category = 'Securities' THEN 1 END) /     COUNT(CASE WHEN lc.category = 'Finance' THEN 1 END) as ratio FROM     app_all aa JOIN     app_labels al ON aa.app_id = al.app_id JOIN     label_categories lc ON al.label_id = lc.label_id;
SELECT label_id FROM label_categories WHERE category = 'Third-party card management';
SELECT     SUM(CASE WHEN is_active = 1 THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN is_active = 0 THEN 1 ELSE 0 END), 0) AS ratio FROM     app_events WHERE     event_id = '58';
SELECT COUNT(*) FROM events WHERE device_id = '3915082290673130000';
SELECT SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) * 100.0 / COUNT(device_id) AS male_percentage FROM gender_age;
SELECT COUNT(*) FROM events WHERE longitude = -156;
SELECT COUNT(*) FROM app_labels WHERE label_id = 48;
SELECT COUNT(*) FROM label_categories WHERE category LIKE 'game%';
SELECT COUNT(event_id) FROM events WHERE longitude = 80 AND latitude = 37;
SELECT label_id, category FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE app_id = 5758400314709850000;
SELECT app_id FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE category = 'game-Rowing';
SELECT app_labels.label_id, app_labels.app_id FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE label_categories.category = 'Chinese Classical Mythology';
SELECT COUNT(app_id), longitude, latitude FROM app_events JOIN events ON app_events.event_id = events.event_id WHERE event_id = '79641';
SELECT longitude, latitude, timestamp FROM events JOIN app_events ON events.event_id = app_events.event_id WHERE app_events.app_id = '8715964299802120000';
SELECT COUNT(*) FROM events_relevant JOIN phone_brand_device_model2 ON events_relevant.device_id = phone_brand_device_model2.device_id WHERE phone_brand_device_model2.phone_brand = 'OPPO' AND events_relevant.timestamp LIKE '2016-05-01 00:%';
SELECT     SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) /     SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) as ratio FROM     gender_age_train ga JOIN     phone_brand_device_model2 pbdm ON     ga.device_id = pbdm.device_id WHERE     pbdm.phone_brand = 'vivo' AND pbdm.device_model = 'X5Pro';
SELECT COUNT(*) FROM gender_age JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE gender_age.gender = 'F' AND phone_brand_device_model2.phone_brand = 'ZUK' AND phone_brand_device_model2.device_model = 'Z1' AND gender_age.group = 'F23-';
SELECT pb.device_model, pb.phone_brand FROM phone_brand_device_model2 pb JOIN gender_age ga ON pb.device_id = ga.device_id WHERE ga.age < 10;
SELECT     SUM(CASE WHEN gender='F' AND age>80 THEN 1 ELSE 0 END) * 100.0 / COUNT(device_id) AS Percentage FROM     gender_age ga JOIN     phone_brand_device_model2 pb ON ga.device_id=pb.device_id WHERE     pb.phone_brand='HTC'
SELECT pbdm.phone_brand, pbdm.device_model FROM phone_brand_device_model2 AS pbdm JOIN events AS e ON pbdm.device_id = e.device_id WHERE e.event_id = '6701';
SELECT ga.age, ga.gender FROM gender_age ga JOIN (   SELECT er.device_id, COUNT(er.event_id) as event_count   FROM events_relevant er   WHERE er.device_id BETWEEN '-9215352913819630000' AND '-9222956879900150000'   GROUP BY er.device_id ) subquery ON ga.device_id = subquery.device_id WHERE subquery.event_count = (   SELECT MAX(event_count)   FROM (     SELECT COUNT(er.event_id) as event_count     FROM events_relevant er     WHERE er.device_id BETWEEN '-9215352913819630000' AND '-9222956879900150000'     GROUP BY er.device_id   ) t );
SELECT timestamp FROM events WHERE event_id = 12;
SELECT COUNT(DISTINCT device_id) FROM events WHERE event_id IN (SELECT event_id                   FROM app_events                   WHERE is_active = 1);
SELECT COUNT(*) FROM phone_brand_device_model2 WHERE device_model = 'A51';
SELECT gender FROM gender_age WHERE device_id = '-9222956879900150000';
SELECT COUNT(*) FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE label_categories.category = 'game-card';
SELECT ga.group FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE pb.phone_brand = 'vivo';
SELECT COUNT(*) FROM gender_age_train gat JOIN phone_brand_device_model2 pbdm ON gat.device_id = pbdm.device_id WHERE gat.age < 30 AND pbdm.device_model = 'Galaxy Note 2';
SELECT     (SUM(CASE WHEN T2.age < 50 THEN 1 ELSE 0 END) * 1.0 / COUNT(T1.device_id)) * 100 AS Percentage_Under_50 FROM     phone_brand_device_model2 AS T1 JOIN     gender_age_train AS T2 ON T1.device_id = T2.device_id WHERE     T1.phone_brand = 'OPPO';
SELECT AVG(ga.age) FROM gender_age ga JOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id WHERE pbdm.device_model = 'R7';
SELECT lc.category FROM label_categories lc JOIN app_labels al ON lc.label_id = al.label_id WHERE al.app_id = 5902120154267990000;
SELECT ga.group FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE pb.phone_brand = 'LG' GROUP BY ga.group;
SELECT lc.category FROM label_categories lc JOIN app_labels al ON lc.label_id = al.label_id WHERE al.app_id = 4955831798976240000;
SELECT COUNT(*) FROM gender_age_train gat JOIN phone_brand_device_model2 pbdm ON gat.device_id = pbdm.device_id WHERE gat.gender = 'F' AND pbdm.device_model = 'MI 3';
SELECT COUNT(*) FROM gender_age_train JOIN phone_brand_device_model2 ON gender_age_train.device_id = phone_brand_device_model2.device_id WHERE gender_age_train.gender = 'M' AND phone_brand_device_model2.device_model = 'Desire 820';
SELECT COUNT(*) FROM gender_age_train gat JOIN phone_brand_device_model2 pbdm ON gat.device_id = pbdm.device_id WHERE gat.age > 20 AND pbdm.device_model = 'ELIFE E7 Mini';
SELECT COUNT(*) FROM gender_age_train JOIN phone_brand_device_model2 ON gender_age_train.device_id = phone_brand_device_model2.device_id WHERE gender_age_train.age BETWEEN 20 AND 50 AND phone_brand_device_model2.device_model = 'Galaxy Premier';
SELECT COUNT(*) FROM gender_age JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE gender_age.gender = 'M' AND phone_brand_device_model2.phone_brand = 'HTC';
SELECT COUNT(*) FROM (     SELECT ga.device_id     FROM gender_age ga     JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id     WHERE ga.age BETWEEN 20 AND 60     AND pb.phone_brand = 'TCL' ) AS user_count
SELECT     (COUNT(CASE WHEN T2.age > 20 THEN T1.device_id END) * 1.0 / COUNT(T1.device_id)) * 100 AS percentage_above_20 FROM     phone_brand_device_model2 AS T1 JOIN     gender_age AS T2 ON T1.device_id = T2.device_id WHERE     T1.phone_brand = 'SUGAR'
SELECT longitude, latitude FROM events WHERE timestamp BETWEEN '2016-04-30 00:00:00' AND '2016-04-30 23:59:59';
SELECT COUNT(DISTINCT device_model) FROM phone_brand_device_model2 WHERE phone_brand = 'HTC';
SELECT app_id FROM app_events WHERE is_installed = 1 AND is_active = 1;
SELECT COUNT(*) FROM app_labels WHERE label_id = 7;
SELECT device_id FROM gender_age WHERE gender = 'F' AND age BETWEEN 29 AND 31;
SELECT app_id FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE category = 'game-stress reliever';
SELECT DATE(events.timestamp) AS date FROM events JOIN gender_age ON events.device_id = gender_age.device_id WHERE gender_age.age = 40 AND gender_age.gender = 'M' GROUP BY DATE(events.timestamp) ORDER BY COUNT(events.event_id) DESC LIMIT 1;
SELECT T.phone_brand, COUNT(*) AS app_count FROM (     SELECT DISTINCT e.device_id     FROM app_events ae     INNER JOIN events e ON ae.event_id = e.event_id     WHERE ae.is_installed = 1 ) AS installed_apps INNER JOIN phone_brand_device_model2 T ON installed_apps.device_id = T.device_id GROUP BY T.phone_brand ORDER BY app_count DESC LIMIT 1;
SELECT COUNT(*) FROM gender_age JOIN events_relevant ON gender_age.device_id = events_relevant.device_id JOIN app_events_relevant ON events_relevant.event_id = app_events_relevant.event_id WHERE gender_age.gender = 'M' AND gender_age.age < 23 AND app_events_relevant.is_installed = 1 AND app_events_relevant.is_active = 0;
SELECT COUNT(DISTINCT ga.device_id) AS Num_Women FROM gender_age AS ga JOIN events_relevant AS e ON ga.device_id = e.device_id JOIN app_events_relevant AS ae ON e.event_id = ae.event_id JOIN app_labels AS al ON ae.app_id = al.app_id JOIN label_categories AS lc ON al.label_id = lc.label_id WHERE ga.gender = 'F' AND ae.is_installed = 1 AND lc.category = 'game-Finding fault';
SELECT gender, COUNT(gender) as login_count FROM events JOIN gender_age ON events.device_id = gender_age.device_id WHERE timestamp BETWEEN '2016-05-01 00:00:00' AND '2016-05-10 23:59:59' GROUP BY gender ORDER BY login_count DESC LIMIT 1;
SELECT ga.group, COUNT(*) as count FROM gender_age ga JOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id WHERE pb.device_model = 'SM-T2558' GROUP BY ga.group ORDER BY count DESC LIMIT 1;
SELECT COUNT(*) FROM gender_age WHERE device_id NOT IN (     SELECT device_id     FROM phone_brand_device_model2     WHERE phone_brand = 'HTC' AND device_model = 'One M8 Eye' ) AND age > 50;
SELECT e.event_id, e.longitude, e.latitude FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE ga.gender = 'F' AND ga.age < 30;
Error: 第 1216 个样本有 2 个SQL。
SELECT AVG(ga.age) FROM gender_age ga JOIN events e ON ga.device_id = e.device_id JOIN app_events ae ON e.event_id = ae.event_id WHERE ae.is_installed = 1 AND ae.is_active = 0;
SELECT event_id, device_id, timestamp, longitude, latitude FROM events WHERE timestamp LIKE '2016-05-01%' AND latitude = 31 LIMIT 3;
SELECT event_id FROM events WHERE longitude = 0 AND latitude = 0 LIMIT 3;
SELECT     (SELECT COUNT(*) FROM events WHERE device_id = '-9222956879900150000' AND latitude != 0 AND longitude != 0) -     (SELECT COUNT(*) FROM events WHERE device_id = '-9222956879900150000' AND latitude = 0 AND longitude = 0) AS difference;
SELECT device_id FROM gender_age WHERE gender = 'F' LIMIT 3;
SELECT label_id, category FROM label_categories WHERE category LIKE '%game%' LIMIT 5;
SELECT device_model FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO' LIMIT 3;
SELECT MULTIPLY(DIVIDE(SUM(CASE WHEN T1.is_installed = 1 AND T1.is_active = 0 THEN 1 ELSE 0 END), COUNT(T1.app_id)), 1.0) FROM app_events AS T1 JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T2.event_id = 6;
SELECT     CASE         WHEN SUM(CASE WHEN ga.gender = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN ga.gender = 'F' THEN 1 ELSE 0 END) THEN 'M'         ELSE 'F'     END AS majority_gender FROM     gender_age ga JOIN     phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id WHERE     pbdm.device_model = 'Galaxy Note 2';
SELECT timestamp, COUNT(*) as active_users FROM events e JOIN app_events ae ON e.event_id = ae.event_id WHERE e.event_id = 2 AND ae.is_active = 1;
SELECT lc.category FROM label_categories lc JOIN app_labels al ON lc.label_id = al.label_id WHERE al.app_id = 5902120154267990000;
SELECT COUNT(DISTINCT app_labels.app_id) FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE label_categories.category = 'comics';
SELECT ga.gender, ga.age FROM gender_age ga JOIN events e ON ga.device_id = e.device_id WHERE ga.device_id = '29182687948017100' AND e.event_id = '1';
SELECT COUNT(*) FROM gender_age JOIN events ON gender_age.device_id = events.device_id WHERE gender_age.gender = 'M' AND events.longitude = 114;
SELECT timestamp FROM events WHERE event_id = 7 AND device_id IN (SELECT device_id FROM app_events WHERE app_id = -8022267440849930000);
SELECT lc.category FROM label_categories lc JOIN app_labels al ON lc.label_id = al.label_id WHERE al.app_id = -9222198347540750000;
SELECT ga.group FROM gender_age ga JOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id WHERE pbdm.phone_brand = 'LG' AND pbdm.device_model = 'Nexus 4';
SELECT gender FROM gender_age WHERE device_id IN (     SELECT device_id     FROM phone_brand_device_model2     WHERE phone_brand = 'HTC' AND device_model = 'Desire 826' ) LIMIT 1;
SELECT     (SUM(CASE WHEN lc.category = 'Academic Information' THEN 1 ELSE 0 END) * 1.0 / COUNT(al.app_id)) * 100 AS percentage FROM     app_labels al JOIN     label_categories lc ON al.label_id = lc.label_id;
SELECT     (SUM(CASE WHEN ga.group = 'F27-28' THEN 1 ELSE 0 END) * 1.0 / COUNT(ga.device_id)) * 100 AS percentage FROM     gender_age ga JOIN     events e ON ga.device_id = e.device_id WHERE     e.timestamp LIKE '2016-05-03%' GROUP BY     ga.group;
SELECT COUNT(*) FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO';
SELECT `group` FROM gender_age GROUP BY `group` ORDER BY COUNT(`group`) DESC LIMIT 1;
SELECT COUNT(*) FROM events WHERE device_id = '4069764298338760000';
SELECT COUNT(*) FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE label_categories.category = 'Equity Fund';
SELECT e.longitude, e.latitude FROM events e JOIN gender_age ga ON e.device_id = ga.device_id WHERE ga.gender = 'F' AND ga.group = 'F24-26';
SELECT COUNT(*) FROM gender_age_train JOIN phone_brand_device_model2 ON gender_age_train.device_id = phone_brand_device_model2.device_id WHERE gender_age_train.gender = 'M' AND phone_brand_device_model2.device_model = 'Galaxy Note 3';
SELECT pb.device_model, pb.phone_brand FROM phone_brand_device_model2 pb JOIN events e ON pb.device_id = e.device_id WHERE e.timestamp = '2016-05-07 06:03:22';
SELECT T3.phone_brand, COUNT(T3.phone_brand) FROM gender_age AS T1 JOIN events AS T2 ON T1.device_id = T2.device_id JOIN phone_brand_device_model2 AS T3 ON T2.device_id = T3.device_id WHERE T1.age BETWEEN 20 AND 30 GROUP BY T3.phone_brand ORDER BY COUNT(T3.phone_brand) DESC LIMIT 1;
SELECT     (SUM(CASE WHEN T2.gender IS NULL AND T2.age IS NULL AND T2.group IS NULL THEN 1 ELSE 0 END) * 1.0 / COUNT(*)) * 100 AS percentage FROM     phone_brand_device_model2 AS T1 JOIN     gender_age AS T2 ON T1.device_id = T2.device_id WHERE     T1.phone_brand = 'vivo';
SELECT T2.keyword FROM Episode AS T1 JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Refuge: Part 1'
SELECT COUNT(*) FROM Keyword WHERE episode_id IN (     SELECT episode_id     FROM Episode     WHERE series = 'law_and_order' AND season = 9 AND episode = 23 );
SELECT e.title FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id WHERE k.keyword = 'laundering money';
SELECT T2.keyword FROM Episode AS T1 JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.rating > 8;
SELECT COUNT(*) FROM Vote WHERE episode_id IN (SELECT episode_id FROM Episode WHERE title = 'Cherished') AND stars = 10;
SELECT SUM(Vote.votes) FROM Episode JOIN Vote ON Episode.episode_id = Vote.episode_id WHERE Episode.title = 'Cherished'
SELECT E.title FROM Episode E JOIN Vote V ON E.episode_id = V.episode_id WHERE V.stars = 10 ORDER BY V.votes DESC LIMIT 1;
SELECT T3.role FROM Episode AS T1 JOIN Credit AS T2 ON T1.episode_id = T2.episode_id JOIN Person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Cherished' AND T3.name = 'Park Dietz' AND T2.credited = 'true'
SELECT COUNT(*) FROM Credit WHERE episode_id IN (SELECT episode_id FROM Episode WHERE title = 'Cherished') AND credited = '' ;
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id JOIN Episode e ON c.episode_id = e.episode_id WHERE c.credited = 'true' AND c.role = 'technical advisor' AND e.title = 'Cherished';
SELECT COUNT(*) FROM Credit WHERE person_id = (SELECT person_id FROM Person WHERE name = 'Park Dietz') AND credited = 'true';
SELECT E.title FROM Episode E JOIN Credit C ON E.episode_id = C.episode_id JOIN Person P ON C.person_id = P.person_id WHERE P.name = 'Park Dietz' AND C.credited = 'true';
SELECT COUNT(*) FROM Credit WHERE episode_id = 'tt0629204' AND person_id IN (SELECT person_id FROM Person WHERE name = 'Anthony Azzara') AND credited = 'true';
SELECT COUNT(T2.keyword) FROM Episode AS T1 JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Disciple';
SELECT E.title FROM Episode E JOIN Vote V ON E.episode_id = V.episode_id WHERE V.stars = '1' GROUP BY E.title ORDER BY SUM(V.votes) DESC LIMIT 1;
SELECT COUNT(*) FROM Award WHERE series = 'Law and Order' AND episode_id IN (     SELECT episode_id     FROM Episode     WHERE series = 'Law and Order' AND season = 9 AND episode = 20 ) AND result = 'Nominee';
SELECT COUNT(*) FROM Credit WHERE episode_id IN (     SELECT episode_id     FROM Episode     WHERE series = 'Law and Order' AND season = 9 AND episode = 17 ) AND credited = 'true';
SELECT E.summary FROM Episode E JOIN Award A ON E.episode_id = A.episode_id WHERE A.award_id = '296'
SELECT T3.role FROM Person AS T1 JOIN Credit AS T3 ON T1.person_id = T3.person_id WHERE T1.name = 'Joseph Blair'
SELECT COUNT(*) FROM Award WHERE person_id = (SELECT person_id FROM Person WHERE name = 'Rene Balcer') AND result = 'Nominee';
SELECT E.air_date FROM Episode E JOIN Vote V ON E.episode_id = V.episode_id WHERE V.votes = (SELECT MAX(votes) FROM Vote)
SELECT P.name FROM Person P JOIN Award A ON P.person_id = A.person_id WHERE A.award_id = '313';
SELECT COUNT(*) FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'J.K. Simmons';
SELECT COUNT(*) FROM Vote JOIN Episode ON Vote.episode_id = Episode.episode_id WHERE Episode.title = 'Sideshow' AND Vote.stars = 9;
SELECT     (SELECT COUNT(k.keyword) FROM Keyword k JOIN Episode e ON k.episode_id = e.episode_id WHERE e.title = 'Refuge: Part 1') /     (SELECT COUNT(k.keyword) FROM Keyword k JOIN Episode e ON k.episode_id = e.episode_id WHERE e.title = 'Shield')
Error: 第 1271 个样本有 2 个SQL。
SELECT T2.name FROM Credit AS T1 JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.episode_id = 'tt0629391' AND T1.credited = ''
SELECT COUNT(*) FROM (   SELECT person_id   FROM Award   WHERE result = 'Winner'   GROUP BY person_id   HAVING COUNT(*) >= 3 ) AS temp;
SELECT T2.name FROM Credit AS T1 JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.role = 'script supervisor' AND T1.episode_id = 'tt0629204'
SELECT COUNT(*) FROM Award WHERE person_id = (SELECT person_id FROM Person WHERE name = 'Julia Roberts') AND result = 'Nominee';
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.role = 'camera operator' ORDER BY p.height_meters DESC LIMIT 1;
SELECT COUNT(*) FROM Person p JOIN Award a ON p.person_id = a.person_id WHERE p.birth_country = 'Canada' AND a.year = 1999 AND a.result = 'Winner';
SELECT COUNT(*) FROM Vote WHERE episode_id = (     SELECT episode_id     FROM Episode     WHERE rating = (         SELECT MAX(rating)         FROM Episode     ) ) AND stars = 10;
SELECT T2.keyword FROM Episode AS T1 JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Shield'
SELECT (COUNT(CASE WHEN V.stars = 1 THEN V.episode_id END) / COUNT(V.episode_id)) * 100 AS percentage FROM Vote V JOIN Episode E ON V.episode_id = E.episode_id WHERE E.title = 'True North'
SELECT E.title FROM Episode E JOIN Keyword K ON E.episode_id = K.episode_id GROUP BY E.episode_id ORDER BY COUNT(K.keyword) DESC LIMIT 1;
SELECT COUNT(*) FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE e.air_date LIKE '1998%' AND a.result = 'Winner' AND a.organization = 'International Monitor Awards';
SELECT COUNT(*) FROM Award WHERE episode_id IN (SELECT episode_id FROM Episode WHERE title = 'Agony') AND result = 'Winner';
SELECT COUNT(E.episode_id) AS num_episodes_9th_season,        AVG(CastCount) AS avg_casts_per_season FROM (   SELECT COUNT(C.person_id) AS CastCount, E.episode_id   FROM Episode E   JOIN Credit C ON E.episode_id = C.episode_id AND C.category = 'Cast'   WHERE E.series = 'Law and Order' AND E.season = 9   GROUP BY E.episode_id ) AS CastCountsPerEpisode, Episode E WHERE E.series = 'Law and Order' AND E.season = 9;
SELECT K.keyword FROM Keyword K JOIN Episode E ON K.episode_id = E.episode_id JOIN (     SELECT episode_id, MAX(votes) AS SecondMaxVotes     FROM (         SELECT episode_id, votes         FROM Vote         WHERE votes < (             SELECT MAX(votes)             FROM Vote         )     )     GROUP BY episode_id ) V ON E.episode_id = V.episode_id WHERE E.votes = V.SecondMaxVotes;
SELECT COUNT(*) FROM Award WHERE episode_id IN (SELECT episode_id FROM Episode WHERE title = 'Agony') AND result = 'Winner';
SELECT P.name FROM Person P JOIN Credit C ON P.person_id = C.person_id JOIN Episode E ON C.episode_id = E.episode_id WHERE E.title = 'Flight' AND C.role = 'Narrator';
SELECT organization FROM Award WHERE result = 'Winner' AND person_id = (SELECT person_id FROM Person WHERE name = 'Constantine Makris') GROUP BY organization ORDER BY COUNT(award_id) DESC LIMIT 1;
SELECT T2.name FROM Credit AS T1 JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.role = 'stunt coordinator' AND T1.episode_id = 3;
SELECT COUNT(*) FROM Credit JOIN Episode ON Credit.episode_id = Episode.episode_id WHERE Episode.title = 'Admissions' AND Credit.credited = '';
SELECT E.title FROM Episode E JOIN Credit C ON E.episode_id = C.episode_id WHERE C.category = 'Art Department' GROUP BY E.episode_id ORDER BY COUNT(C.person_id) DESC LIMIT 1;
SELECT COUNT(*) FROM Credit JOIN Person ON Credit.person_id = Person.person_id WHERE Person.name = 'Julia Roberts';
SELECT E.title FROM Episode E JOIN Vote V ON E.episode_id = V.episode_id WHERE V.stars = 10 AND V.votes >= 30 ORDER BY E.rating DESC LIMIT 3;
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.role = 'Clerk' ORDER BY p.birthdate DESC LIMIT 1;
SELECT COUNT(*) FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE episode = 24) AND stars = 1;
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.category = 'Cast';
SELECT P.name, (COUNT(C.person_id) * 100.0 / (SELECT COUNT(*) FROM Credit)) as Percentage FROM Credit C JOIN Person P ON C.person_id = P.person_id GROUP BY C.person_id ORDER BY COUNT(C.person_id) DESC LIMIT 1;
SELECT e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.award_category LIKE 'Primetime Emmy' AND e.series = 'Law & Order';
SELECT COUNT(*) FROM Episode WHERE episode_id NOT IN (     SELECT episode_id     FROM Award     WHERE result = 'Nominee' AND series = 'Law & Order' );
SELECT DISTINCT C.role FROM Credit AS C WHERE C.credited = ''
SELECT title FROM Episode ORDER BY rating LIMIT 3;
SELECT birth_place, birth_region FROM Person WHERE birth_name = 'Rene Chenevert Balcer';
SELECT name FROM Person WHERE birth_country = 'USA';
SELECT E.title FROM Episode E JOIN Vote V ON E.episode_id = V.episode_id WHERE V.stars = 1 GROUP BY E.title ORDER BY COUNT(*) DESC LIMIT 1;
Error: 第 1305 个样本有 2 个SQL。
SELECT votes FROM Episode WHERE title = 'Juvenile';
SELECT E.title FROM Episode E LEFT JOIN Credit C ON E.episode_id = C.episode_id WHERE C.person_id = (SELECT person_id FROM Person WHERE name = 'Anthony Azzara') AND C.credited = '' GROUP BY E.title;
SELECT DISTINCT T1.year FROM Award AS T1 JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.title = 'DWB' AND T1.result = 'Winner';
SELECT T1.birth_region FROM Person AS T1 JOIN Credit AS T2 ON T1.person_id = T2.person_id WHERE T2.role = 'assistant location manager';
SELECT SUM(V.stars * V.percent) / 100.0 AS weighted_stars FROM Vote V JOIN Credit C ON V.episode_id = C.episode_id WHERE C.person_id = (SELECT person_id FROM Person WHERE name = 'Donna Villella') GROUP BY V.episode_id;
SELECT C.role FROM Credit AS C JOIN Person AS P ON C.person_id = P.person_id JOIN Award AS A ON C.episode_id = A.episode_id AND C.person_id = A.person_id WHERE P.name = 'Julia Roberts' AND A.result = 'Nominee';
SELECT C.category, C.role FROM Credit AS C JOIN Person AS P ON C.person_id = P.person_id WHERE P.height_meters = (SELECT MAX(height_meters) FROM Person)
SELECT E.title FROM Episode E JOIN Award A ON E.episode_id = A.episode_id WHERE A.result = 'Nominee' GROUP BY E.episode_id ORDER BY COUNT(A.episode_id) DESC LIMIT 1;
SELECT Episode.rating FROM Episode JOIN Credit ON Episode.episode_id = Credit.episode_id JOIN Person ON Credit.person_id = Person.person_id WHERE Person.name = 'Jace Alexander';
SELECT T3.name FROM Episode AS T1 JOIN Credit AS T2 ON T1.episode_id = T2.episode_id JOIN Person AS T3 ON T2.person_id = T3.person_id WHERE T1.season = 9 AND T1.episode = 19
SELECT AVG(V.stars) FROM Vote V JOIN Credit C ON V.episode_id = C.episode_id JOIN Person P ON C.person_id = P.person_id WHERE P.name = 'Jim Bracchitta';
SELECT (COUNT(CASE WHEN C.role = 'Additional Crew' THEN C.episode_id END) * 100.0 / COUNT(C.episode_id)) AS percentage FROM Credit AS C JOIN Episode AS E ON C.episode_id = E.episode_id WHERE E.title = 'True North';
SELECT e.title, e.summary, e.air_date FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 10 AND v.votes = 72;
SELECT T1.air_date, T1.rating, T2.votes FROM Episode AS T1 JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode = 12 AND T2.stars = 6;
SELECT P.name, A.role FROM Person AS P JOIN Award AS A ON P.person_id = A.person_id WHERE A.award = 'Best Television Episode' AND A.award_category = 'Edgar' AND A.year = 2000 AND A.result = 'Winner';
SELECT organization, year, award, award_category FROM Award WHERE person_id = (SELECT person_id FROM Person WHERE name = 'Rene Balcer') AND result = 'Winner';
SELECT T1.year, T1.episode_id FROM ( SELECT A.year, A.episode_id,        LAG(A.year) OVER (ORDER BY A.year) as prev_year FROM Award A JOIN Person P ON A.person_id = P.person_id WHERE A.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' AND A.award_category = 'Silver Gavel Award' AND A.award = 'Television' AND A.result = 'Winner' AND P.name = 'Constantine Makris' ) T1 WHERE T1.year = T1.prev_year + 1;
SELECT p.name FROM Person p JOIN Award a ON p.person_id = a.person_id WHERE p.name IN (     SELECT DISTINCT p2.name     FROM Person p2     JOIN Award a2 ON p2.person_id = a2.person_id     WHERE a2.award = 'Television'         AND a2.award_category = 'Silver Gavel Award'         AND a2.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'         AND a2.result = 'Winner'         AND EXISTS (             SELECT 1             FROM Episode e             JOIN Credit c ON e.episode_id = c.episode_id             WHERE c.person_id = p2.person_id                 AND c.category = 'writer'                 AND e.series = 'Law and Order'         ) ) AND (     SELECT COUNT(*)     FROM Award a3     WHERE a3.person_id = p.person_id         AND a3.award = 'Television'         AND a3.award_category = 'Silver Gavel Award'         AND a3.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'         AND a3.result = 'Winner' ) >= 2 ORDER BY p.name;
SELECT COUNT(*) FROM Award WHERE result = 'nominee' AND series = 'Law and Order' AND organization = 'Primetime Emmy Awards' AND year = 1999 AND episode_id IN (SELECT episode_id FROM Episode WHERE episode = 20);
SELECT E.title, A.role FROM Episode E JOIN Award A ON E.episode_id = A.episode_id JOIN Person P ON A.person_id = P.person_id WHERE A.award = 'Outstanding Guest Actress in a Drama Series' AND A.year = 1999 AND A.organization = 'Primetime Emmy Awards' AND P.name = 'Julia Roberts' AND A.result = 'Winner';
SELECT E.title, E.air_date FROM Episode E JOIN Credit C ON E.episode_id = C.episode_id JOIN Person P ON C.person_id = P.person_id WHERE C.role = 'producer' AND P.name = 'Billy Fox';
SELECT COUNT(*) FROM Credit JOIN Person ON Credit.person_id = Person.person_id WHERE Credit.episode_id = 'tt0629228' AND Person.birth_country = 'USA' AND Credit.category = 'Cast' AND Credit.credited = '';
SELECT c.role FROM Credit c JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'Jason Kuschner' AND c.episode_id = (SELECT episode_id FROM Episode WHERE episode = 9);
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.role = 'president of NBC West Coast' AND c.episode_id IN (     SELECT e.episode_id     FROM Episode e     WHERE e.episode = 1 );
SELECT E.title, SUM(V.stars * V.percent) / 100 AS weighted_stars FROM Episode E JOIN Vote V ON E.episode_id = V.episode_id GROUP BY E.episode_id, E.title ORDER BY weighted_stars DESC LIMIT 3;
SELECT     c.role,     COUNT(c.person_id) / (SELECT COUNT(*) FROM Credit WHERE episode_id = 2 AND category = 'Cast') AS ratio FROM     Credit c JOIN     Person p ON c.person_id = p.person_id WHERE     c.episode_id = 2 AND c.category = 'Cast' AND p.birth_country = 'USA' GROUP BY     c.role;
SELECT COUNT(*) FROM Person p JOIN Award a ON p.person_id = a.person_id WHERE p.birth_country = 'Canada' AND a.award IS NOT NULL;
SELECT COUNT(*) FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id JOIN Person p ON c.person_id = p.person_id WHERE p.name = 'Jerry Orbach' AND c.credited = 1;
SELECT T2.name FROM Credit AS T1 JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.episode_id = 9;
SELECT Award.award FROM Award WHERE Award.episode_id = 20 AND (Award.result = 'Winner' OR Award.result = 'Nominee');
Error: 第 1336 个样本有 2 个SQL。
SELECT T3.name, T1.episode FROM Episode AS T1 JOIN Credit AS T2 ON T1.episode_id = T2.episode_id JOIN Person AS T3 ON T2.person_id = T3.person_id JOIN Award AS T4 ON T2.episode_id = T4.episode_id AND T2.person_id = T4.person_id WHERE T2.role = 'director' AND T4.result = 'Winner';
SELECT e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.result = 'Nominee';
SELECT AVG(rating) as average_rating FROM Episode WHERE season = 9;
SELECT     (SELECT votes FROM Vote WHERE episode_id IN (SELECT episode_id FROM Episode WHERE episode = 1) AND stars = 10) -     (SELECT votes FROM Vote WHERE episode_id IN (SELECT episode_id FROM Episode WHERE episode = 24) AND stars = 10)
SELECT E.rating FROM Episode E JOIN Award A ON E.episode_id = A.episode_id WHERE A.result = 'Winner' GROUP BY E.episode_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM Credit WHERE episode_id BETWEEN 1 AND 10 AND credited = 'true';
SELECT e.title FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id WHERE k.keyword = 'mafia';
SELECT AVG(V.stars) FROM Vote V JOIN Episode E ON V.episode_id = E.episode_id JOIN Award A ON E.episode_id = A.episode_id WHERE A.result = 'Winner' GROUP BY V.episode_id ORDER BY SUM(V.percent) DESC LIMIT 1;
SELECT AVG(Episode.rating) FROM Episode JOIN Award ON Episode.episode_id = Award.episode_id WHERE Award.result = 'Nominated';
SELECT COUNT(*) FROM Award WHERE result = 'Winner' AND award = 'Television' AND organization = 'American Bar Association Silver Gavel Awards for Media and the Arts';
Error: 第 1347 个样本有 2 个SQL。
SELECT p.name FROM Person p JOIN Award a ON p.person_id = a.person_id WHERE a.result = 'Nominee' AND a.role = 'Katrina Ludlow' AND a.series = 'Law & Order';
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id JOIN Award a ON c.episode_id = a.episode_id WHERE c.role = 'teleplay' AND a.result = 'Winner' AND a.award = 'Best Television Episode';
SELECT T2.birthdate FROM Credit AS T1 JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.role = 'writer'
SELECT E.title FROM Episode E JOIN Award A ON E.episode_id = A.episode_id WHERE A.award = 'Outstanding Costume Design for a Series';
SELECT E.title, SUM(V.votes) as total_votes FROM Episode E JOIN Vote V ON E.episode_id = V.episode_id GROUP BY E.episode_id, E.title ORDER BY total_votes DESC LIMIT 1;
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id WHERE c.role = 'Alex Brown' AND c.credited = 'true'
SELECT T1.birth_place FROM Person AS T1 JOIN Credit AS T2 ON T1.person_id = T2.person_id WHERE T1.person_id = 'nm0007064' AND T2.credited = '' AND T2.role = 'Narrator'
SELECT T2.keyword FROM Episode AS T1 JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Shield'
SELECT p.name FROM Person p JOIN Credit c ON p.person_id = c.person_id JOIN Episode e ON c.episode_id = e.episode_id JOIN Award a ON e.episode_id = a.episode_id WHERE p.height_meters > 1.80 AND a.result = 'Winner';
SELECT e.title FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id WHERE k.keyword IN ('nun', 'priest') GROUP BY e.title HAVING COUNT(DISTINCT k.keyword) = 2;
SELECT E.episode_id FROM Episode E JOIN Award A ON E.episode_id = A.episode_id WHERE A.award = 'Best Television Episode' AND A.result = 'Winner' AND E.rating = (     SELECT MAX(rating)     FROM Episode     WHERE rating < (         SELECT MAX(rating)         FROM Episode         WHERE episode_id IN (             SELECT episode_id             FROM Award             WHERE award = 'Best Television Episode' AND result = 'Winner'         )     ) )
SELECT e.title FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 10 GROUP BY e.title ORDER BY COUNT(v.stars) DESC LIMIT 3;
SELECT VALUE, UNITS FROM observations WHERE DATE = '2008-03-11' AND PATIENT IN (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss') AND DESCRIPTION = 'Body Height';
SELECT     (MAX(obs1.VALUE) - MIN(obs2.VALUE)) AS weight_increase FROM     observations obs1 JOIN     observations obs2 ON obs1.PATIENT = obs2.PATIENT WHERE     obs1.PATIENT = 'Elly Koss'     AND obs1.DESCRIPTION = 'Body Weight'     AND obs1.DATE LIKE '2009%'     AND obs2.DATE LIKE '2008%';
SELECT MAX(o.VALUE) FROM observations o JOIN patients p ON o.PATIENT = p.patient WHERE p.first = 'Elly' AND p.last = 'Koss' AND o.DESCRIPTION = 'Systolic Blood Pressure';
SELECT COUNT(*) FROM observations WHERE observations.patient = (SELECT patients.patient FROM patients WHERE patients.first = 'Elly' AND patients.last = 'Koss') AND observations.DESCRIPTION = 'Systolic Blood Pressure';
SELECT p.first, p.last FROM patients p JOIN observations o ON p.patient = o.PATIENT WHERE o.DESCRIPTION = 'Systolic Blood Pressure' ORDER BY o.VALUE DESC LIMIT 1;
SELECT SUM(MULTIPLY(365, SUBTRACT(strftime('%Y', STOP), strftime('%Y', START))), MULTIPLY(30, SUBTRACT(strftime('%m', STOP), strftime('%m', START))), SUBTRACT(strftime('%d', STOP), strftime('%d', START))) FROM medications WHERE DESCRIPTION LIKE 'Acetaminophen%' AND patient = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss');
SELECT m.DESCRIPTION FROM medications m JOIN patients p ON m.PATIENT = p.patient WHERE p.first = 'Elly' AND p.last = 'Koss';
SELECT m.REASONDESCRIPTION FROM medications m JOIN patients p ON m.PATIENT = p.patient WHERE p.first = 'Elly' AND p.last = 'Koss' AND m.DESCRIPTION LIKE 'Acetaminophen%';
SELECT m.DESCRIPTION FROM medications m JOIN patients p ON m.PATIENT = p.patient WHERE p.first = 'Elly' AND p.last = 'Koss' AND m.REASONDESCRIPTION LIKE 'Streptococcal sore throat%';
SELECT p.first, p.last FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE m.DESCRIPTION LIKE 'Acetaminophen%';
SELECT DESCRIPTION FROM conditions WHERE START = '2009-01-08' AND PATIENT = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss');
SELECT SUM(MULTIPLY(365, SUBTRACT(strftime('%Y', STOP), strftime('%Y', START))), MULTIPLY(30, SUBTRACT(strftime('%m', STOP), strftime('%m', START))), SUBTRACT(strftime('%d', STOP), strftime('%d', START))) FROM conditions WHERE patient = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss') AND DESCRIPTION = 'Cystitis';
SELECT AVG(observations.VALUE) FROM observations WHERE observations.DESCRIPTION = 'Body Weight' AND observations.PATIENT = (SELECT patients.patient FROM patients WHERE patients.first = 'Elly' AND patients.last = 'Koss');
SELECT (COUNT(CASE WHEN p.marital = 'M' THEN 1 END) * 100 / COUNT(p.patient)) as percentage FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Cystitis'
SELECT o.VALUE, o.UNITS FROM observations o JOIN patients p ON o.PATIENT = p.patient WHERE p.first = 'Vincent' AND p.last = 'Wyman' AND p.prefix = 'Mr.' AND o.DATE = '2010-08-02' AND o.DESCRIPTION = 'Body Height';
SELECT COUNT(*) FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.first = 'Norman' AND patients.last = 'Berge' AND patients.marital = 'M' ;
SELECT m.REASONDESCRIPTION FROM medications m JOIN patients p ON m.PATIENT = p.patient WHERE p.first = 'Annabelle' AND p.last = 'Pouros' AND p.prefix = 'Mrs.' AND m.DESCRIPTION = 'Leucovorin 100 MG Injection' AND m.START = '1970-12-19';
SELECT PREVALENCE_PERCENTAGE FROM all_prevalences WHERE ITEM = 'Condition' AND CODE = '64859006';
SELECT prevalence_rate FROM all_prevalences WHERE ITEM = 'conditions' AND CODE = '368581000119106';
SELECT procedures.DESCRIPTION FROM procedures JOIN patients ON procedures.PATIENT = patients.patient WHERE patients.first = 'Jacquelyn' AND patients.last = 'Shanahan' AND procedures.DATE = '2009-08-09';
SELECT COUNT(*) FROM claims WHERE PATIENT IN (     SELECT patient     FROM patients     WHERE first = 'Abbie' AND last = 'Cole' AND prefix = 'Ms.' ) AND BILLABLEPERIOD BETWEEN '2010-12-31' AND '2012-01-01';
SELECT COUNT(*) FROM allergies WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Saundra' AND last = 'Monahan' AND prefix = 'Mrs.');
SELECT p.first, p.last FROM patients p JOIN claims c ON p.patient = c.PATIENT WHERE c.BILLABLEPERIOD = '1947-09-11';
SELECT DESCRIPTION FROM encounters WHERE DATE = '2008-10-25' AND PATIENT = (SELECT patient FROM patients WHERE first = 'Hubert' AND last = 'Baumbach');
SELECT DESCRIPTION FROM conditions WHERE START = '2016-09-24' AND STOP = '2016-10-10' AND PATIENT = (SELECT patient FROM patients WHERE first = 'Keven' AND last = 'Kuhn');
SELECT procedures.DATE FROM procedures JOIN patients ON procedures.PATIENT = patients.patient WHERE patients.first = 'Ira' AND patients.prefix = 'Mrs.' AND procedures.DESCRIPTION = 'Standard pregnancy test';
SELECT AVG(julianday(T2.STOP) - julianday(T2.START)) AS avg_period FROM patients AS T1 JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Wesley' AND T1.last = 'Lemke';
SELECT AVG(julianday(T2.stop) - julianday(T2.start)) AS avg_period FROM (     SELECT DISTINCT patient     FROM encounters     WHERE description = 'Normal pregnancy'     AND patient IN (         SELECT DISTINCT patient         FROM patients         WHERE first = 'Angelena' AND last = 'Kertzmann'     ) ) AS T1 JOIN (     SELECT DISTINCT patient, start, stop     FROM conditions     WHERE description = 'Normal pregnancy' ) AS T2 ON T1.patient = T2.patient;
SELECT PATIENT FROM allergies WHERE STOP IS NOT NULL AND (SUBSTR(STOP, -2, 1) != '9' OR SUBSTR(STOP, -4, 4)) - (SUBSTR(START, -2, 1) = '9' AND SUBSTR(START, -4, 4) + 1900 OR SUBSTR(START, -4, 4) + 2000) = (SELECT MAX((SUBSTR(T1.STOP, -2, 1) != '9' OR SUBSTR(T1.STOP, -4, 4)) - (SUBSTR(T1.START, -2, 1) = '9' AND SUBSTR(T1.START, -4, 4) + 1900 OR SUBSTR(T1.START, -4, 4) + 2000)) FROM allergies T1 WHERE T1.STOP IS NOT NULL)
SELECT COUNT(DISTINCT c.PATIENT) FROM conditions c WHERE c.DESCRIPTION = 'Diabetes' AND c.START LIKE '1988%';
SELECT COUNT(DISTINCT PATIENT) FROM allergies WHERE DESCRIPTION = 'Allergy to eggs';
SELECT PATIENT FROM conditions WHERE DESCRIPTION = 'Hypertension' ORDER BY START DESC LIMIT 1;
SELECT DESCRIPTION, COUNT(DESCRIPTION) AS allergy_count FROM allergies GROUP BY DESCRIPTION ORDER BY allergy_count DESC LIMIT 1;
SELECT patient FROM observations WHERE description = 'Body Height' AND value = (SELECT MAX(value) FROM observations WHERE description = 'Body Height');
SELECT c.DESCRIPTION, COUNT(c.DESCRIPTION) as count FROM conditions c JOIN patients p ON c.PATIENT = p.patient WHERE p.gender = 'F' AND p.ethnicity = 'american' GROUP BY c.DESCRIPTION ORDER BY count DESC LIMIT 1;
SELECT COUNT(*) FROM medications WHERE DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet' AND strftime('%Y', START) = '2016' AND (SUBSTR(STOP, 1, 7) - SUBSTR(START, 1, 7)) = 1 AND PATIENT IN (SELECT patient FROM patients WHERE ethnicity = 'dominican');
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE p.birthdate LIKE '192%' AND c.DESCRIPTION = 'Pneumonia';
SELECT p.first, p.last FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE m.DESCRIPTION = 'Yaz 28 Day Pack' AND m.START LIKE '2011%';
SELECT COUNT(*) FROM patients p JOIN immunizations i ON p.patient = i.PATIENT WHERE p.race = 'black' AND i.DESCRIPTION = 'DTaP' AND i.DATE LIKE '2013%';
SELECT COUNT(i.DATE) FROM immunizations i JOIN conditions c ON i.PATIENT = c.PATIENT WHERE c.START = (SELECT MAX(START) FROM conditions) AND c.PATIENT = (SELECT c2.PATIENT FROM conditions c2 JOIN all_prevalences ap ON c2.CODE = ap.ITEM WHERE ap.PREVALENCE RATE = (SELECT MAX(ap2.PREVALENCE RATE) FROM all_prevalences ap2))
SELECT COUNT(DISTINCT c.PATIENT) FROM conditions c JOIN all_prevalences ap ON c.DESCRIPTION = ap.ITEM WHERE ap.PREVALENCE RATE = (SELECT MAX(PREVALENCE_RATE) FROM all_prevalences);
SELECT c.DESCRIPTION FROM conditions c JOIN patients p ON c.PATIENT = p.patient JOIN immunizations i ON p.patient = i.PATIENT WHERE i.DESCRIPTION = 'Influenza seasonal injectable preservative free' GROUP BY c.DESCRIPTION ORDER BY COUNT(c.DESCRIPTION) DESC LIMIT 1;
SELECT c.PATIENT FROM conditions c JOIN all_prevalences ap ON c.DESCRIPTION = ap.ITEM WHERE ap.PREVALENCE PERCENTAGE = 18.8;
SELECT COUNT(*) FROM conditions WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Tyree' AND last = 'Eichmann');
SELECT COUNT(c.PATIENT) FROM conditions c JOIN immunizations i ON c.PATIENT = i.PATIENT AND c.DATE > i.DATE WHERE c.DESCRIPTION = 'Viral sinusitis (disorder)' AND i.DESCRIPTION = 'meningococcal MCV4P';
SELECT COUNT(*) FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Prediabetes' AND p.gender = 'F';
SELECT p.first, p.last FROM patients p JOIN observations o ON p.patient = o.PATIENT WHERE o.DESCRIPTION = 'Body Mass Index' AND o.UNITS = 'kg/m2' ORDER BY o.VALUE LIMIT 1;
SELECT (strftime('%Y', deathdate) - strftime('%Y', birthdate)) AS age FROM patients JOIN conditions ON patients.patient = conditions.PATIENT WHERE conditions.DESCRIPTION = 'Hypertension' AND patients.first = 'Giovanni' AND patients.last = 'Russel';
SELECT COUNT(*) FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE p.gender = 'F' AND p.race = 'asian' AND m.DESCRIPTION = 'oxaliplatin 5 MG/ML [Eloxatin]';
SELECT COUNT(*) FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Stroke' AND p.deathdate IS NULL;
SELECT COUNT(*) FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE p.race LIKE 'asian%' AND a.DESCRIPTION = 'Allergy to peanuts';
SELECT AVG(o.VALUE) FROM observations o JOIN conditions c ON o.PATIENT = c.PATIENT WHERE c.DESCRIPTION = 'Hypertension' AND o.DESCRIPTION = 'Diastolic Blood Pressure';
SELECT m.DESCRIPTION FROM medications m JOIN patients p ON m.PATIENT = p.patient WHERE p.ssn = '999-94-3751';
SELECT p.ssn FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE p.gender = 'F' AND p.ethnicity = 'irish' AND a.DESCRIPTION = 'Allergy to grass pollen';
SELECT patients.first, patients.last FROM patients JOIN careplans ON patients.patient = careplans.PATIENT WHERE careplans.CODE = 311791003;
SELECT c.DESCRIPTION FROM conditions c JOIN patients p ON c.PATIENT = p.patient WHERE p.deathdate IS NOT NULL ORDER BY (strftime('%Y', p.deathdate) - strftime('%Y', p.birthdate)) DESC LIMIT 1;
SELECT ITEM FROM all_prevalences WHERE POPULATION TYPE = 'Disease' ORDER BY OCCURRENCES DESC LIMIT 1;
SELECT o.VALUE, o.UNITS FROM observations o JOIN patients p ON o.PATIENT = p.patient WHERE p.address = '365 Della Crossroad Suite 202 Deerfield MA 01342 US' AND o.DESCRIPTION = 'Glucose';
SELECT p.ssn FROM patients p JOIN conditions c ON p.patient = c.PATIENT JOIN all_prevalences ap ON ap.ITEM = c.DESCRIPTION WHERE ap.PREVALENCE PERCENTAGE < (SELECT 0.3 * AVG(PREVALENCE PERCENTAGE) FROM all_prevalences) GROUP BY p.ssn LIMIT 5;
SELECT     (COUNT(CASE WHEN p.gender = 'F' AND p.race = 'asian' THEN p.patient END) * 100 / COUNT(p.patient)) AS percentage FROM     conditions c JOIN     patients p ON c.PATIENT = p.patient WHERE     c.DESCRIPTION = 'Acute bronchitis (disorder)';
SELECT COUNT(*) FROM encounters WHERE PATIENT = 'Major D'Amore';
SELECT procedures.DESCRIPTION FROM procedures JOIN patients ON procedures.PATIENT = patients.patient WHERE patients.first = 'Emmy' AND patients.last = 'Waelchi';
SELECT p.first, p.last FROM patients p JOIN procedures pr ON p.patient = pr.PATIENT WHERE pr.DESCRIPTION = 'Extraction of wisdom tooth';
SELECT VALUE, UNITS FROM observations WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Elly' AND last = 'Koss') AND DESCRIPTION = 'Body Weight';
SELECT p.first, p.last FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE a.DESCRIPTION = 'Allergy to soya';
SELECT COUNT(*) FROM immunizations WHERE DESCRIPTION = 'DTaP' AND PATIENT = (SELECT patient FROM patients WHERE first = 'Keven' AND last = 'Kuhn');
SELECT p.first, p.last FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE m.DESCRIPTION = 'Clopidogrel 75 MG Oral Tablet' AND (julianday(m.STOP) - julianday(m.START))/365 > 10;
SELECT p.DESCRIPTION AS procedure_description, m.DESCRIPTION AS medication_description FROM procedures p JOIN conditions c ON p.PATIENT = c.PATIENT AND p.ENCOUNTER = c.ENCOUNTER JOIN medications m ON m.PATIENT = c.PATIENT AND m.ENCOUNTER = c.ENCOUNTER WHERE c.DESCRIPTION = 'Third degree burn';
SELECT m.DESCRIPTION FROM medications m JOIN allergies a ON m.PATIENT = a.PATIENT AND m.START = a.START WHERE a.DESCRIPTION = 'Allergy to mould' AND m.START = '2016-06-06';
SELECT cp.DESCRIPTION FROM careplans cp JOIN conditions c ON cp.PATIENT = c.PATIENT AND cp.ENCOUNTER = c.ENCOUNTER WHERE c.DESCRIPTION = 'Secondary malignant neoplasm of colon';
SELECT p.PREVALENCE_RATE FROM all_prevalences p JOIN conditions c ON p.ITEM = c.DESCRIPTION WHERE c.START = '2014-05-09';
SELECT p.first, p.last, CASE WHEN p.deathdate IS NULL THEN strftime('%Y', o.DATE) - strftime('%Y', p.birthdate) END AS age FROM observations o JOIN patients p ON p.patient = o.PATIENT WHERE o.DESCRIPTION = 'Systolic Blood Pressure' AND o.VALUE = 200 AND o.UNITS = 'mmHg' AND strftime('%Y', o.DATE) = '2011'
SELECT     (COUNT(CASE WHEN i.DESCRIPTION = 'Influenza seasonal injectable preservative free' THEN p.patient END) * 100.0 / COUNT(p.patient)) AS percentage,     COUNT(DISTINCT CASE WHEN p.ethnicity = 'english' AND i.DESCRIPTION = 'Influenza seasonal injectable preservative free' THEN p.patient END) AS english_patients FROM     immunizations i JOIN     patients p ON i.PATIENT = p.patient WHERE     strftime('%Y', i.DATE) = '2017';
SELECT p.first FROM patients p JOIN encounters e ON p.patient = e.PATIENT WHERE e.REASONDESCRIPTION = 'Normal pregnancy';
SELECT p.birthdate FROM patients p JOIN careplans c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Outpatient Encounter';
SELECT p.first FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Cystitis';
SELECT COUNT(*) FROM conditions JOIN patients ON conditions.PATIENT = patients.patient WHERE conditions.DESCRIPTION = 'Stroke' AND patients.marital = 'M';
SELECT DISTINCT p.address FROM patients p JOIN claims c ON p.patient = c.PATIENT WHERE YEAR(c.billableperiod) = 2010;
SELECT p.last FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE a.DESCRIPTION = 'Allergy to dairy product';
SELECT START FROM allergies WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Angelo' AND last = 'Buckridge');
SELECT COUNT(*) FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE p.gender = 'M' AND a.DESCRIPTION = 'House dust mite allergy';
SELECT allergies.DESCRIPTION, COUNT(allergies.DESCRIPTION) AS allergy_count FROM allergies JOIN patients ON allergies.PATIENT = patients.patient WHERE patients.race = 'white' GROUP BY allergies.DESCRIPTION ORDER BY allergy_count DESC LIMIT 1;
SELECT p.first FROM patients p JOIN immunizations i ON p.patient = i.PATIENT WHERE i.DESCRIPTION = 'Influenza seasonal injectable preservative free';
SELECT COUNT(*) FROM patients p JOIN immunizations i ON p.patient = i.PATIENT WHERE p.gender = 'F' AND i.DESCRIPTION = 'HPV quadrivalent';
SELECT DISTINCT e.DESCRIPTION FROM encounters e JOIN patients p ON e.PATIENT = p.patient WHERE p.birthplace = 'Pittsfield MA US';
SELECT COUNT(DISTINCT a.DESCRIPTION) AS TotalAllergyTypes FROM allergies a JOIN patients p ON a.PATIENT = p.patient WHERE p.ethnicity = 'german';
SELECT AVG(DATE_PART('year', AGE(T2.deathdate, T2.birthdate))) FROM careplans AS T1 JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.REASONDESCRIPTION = 'Prediabetes';
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE m.REASONDESCRIPTION = 'Coronary Heart Disease' AND m.STOP IS NOT NULL AND p.deathdate IS NULL;
SELECT COUNT(*) FROM patients p JOIN procedures pr ON p.patient = pr.PATIENT WHERE pr.DESCRIPTION = 'Bone immobilization' AND p.drivers IS NOT NULL;
SELECT p.first, p.last FROM patients p JOIN allergies a ON p.patient = a.PATIENT GROUP BY p.patient, p.first, p.last HAVING COUNT(DISTINCT a.DESCRIPTION) = 3;
SELECT COUNT(DISTINCT p.patient) FROM patients p JOIN allergies a ON p.patient = a.PATIENT JOIN immunizations i ON p.patient = i.PATIENT WHERE a.DESCRIPTION = 'Allergy to eggs' AND i.DESCRIPTION = 'Td (adult) preservative free';
SELECT COUNT(DISTINCT patients.patient) FROM patients JOIN careplans ON patients.patient = careplans.PATIENT JOIN observations ON patients.patient = observations.PATIENT WHERE careplans.DESCRIPTION = 'Diabetes self management plan' AND observations.DESCRIPTION = 'Body Weight' AND observations.VALUE > 100 AND observations.UNITS = 'kg';
SELECT T2.gender, COUNT(T2.gender) AS count FROM allergies AS T1 JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Dander (animal) allergy' GROUP BY T2.gender ORDER BY count DESC LIMIT 1;
SELECT claims.BILLABLEPERIOD FROM claims JOIN patients ON claims.PATIENT = patients.patient WHERE patients.last = 'Dickinson';
SELECT p.first, p.last FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Otitis media';
SELECT COUNT(DISTINCT patients.patient) FROM patients JOIN medications ON patients.patient = medications.PATIENT WHERE patients.ethnicity = 'irish' AND medications.REASONDESCRIPTION = 'Myocardial Infarction';
SELECT COUNT(DISTINCT patients.patient) FROM patients JOIN careplans ON patients.patient = careplans.PATIENT WHERE careplans.DESCRIPTION = 'Concussion with loss of consciousness' AND patients.marital = 'M';
SELECT COUNT(DISTINCT patients.patient) FROM patients JOIN immunizations ON patients.patient = immunizations.PATIENT JOIN careplans ON patients.patient = careplans.PATIENT WHERE immunizations.DESCRIPTION = 'rotavirus monovalent' AND careplans.STOP = '2013-11-23';
SELECT COUNT(*) FROM medications JOIN patients ON medications.PATIENT = patients.patient WHERE medications.DESCRIPTION = 'Nitroglycerin 0.4 MG/ACTUAT [Nitrolingual]' AND patients.gender = 'F';
SELECT (COUNT(T2.patient) * 100.0 / (SELECT COUNT(patient) FROM patients WHERE birthplace = 'Pembroke MA US')) AS percentage FROM allergies AS T1 JOIN patients AS T2 ON T1.patient = T2.patient WHERE T1.DESCRIPTION = 'Allergy to grass pollen' AND T2.birthplace = 'Pembroke MA US';
SELECT AVG(o.VALUE) FROM observations o JOIN patients p ON o.PATIENT = p.patient WHERE o.DESCRIPTION = 'Body Weight' AND o.UNITS = 'kg' AND p.race = 'asian';
SELECT patients.ssn FROM patients JOIN allergies ON patients.patient = allergies.PATIENT WHERE allergies.DESCRIPTION = 'Latex allergy';
SELECT     TIMESTAMPDIFF(DAY, allergies.START, allergies.STOP) AS allergy_duration,     allergies.DESCRIPTION AS allergy_type FROM     allergies JOIN     patients ON allergies.PATIENT = patients.patient WHERE     patients.first = 'Isadora' AND patients.last = 'Moen';
SELECT COUNT(*) FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.first = 'Elly' AND patients.last = 'Koss' AND careplans.START BETWEEN '2009-01-11' AND '2010-10-23';
SELECT DISTINCT p.first, p.last FROM patients p JOIN careplans c ON p.patient = c.PATIENT WHERE YEAR(c.START) = 2009 AND p.marital = 'M' AND DATEDIFF(c.STOP, c.START) > 60;
SELECT immunizations.DATE FROM immunizations JOIN patients ON immunizations.PATIENT = patients.patient WHERE patients.first = 'Elly' AND patients.last = 'Koss' AND immunizations.DESCRIPTION = 'Influenza seasonal injectable preservative free';
SELECT COUNT(*) FROM patients p JOIN immunizations i ON p.patient = i.PATIENT WHERE p.race = 'black' AND i.DESCRIPTION = 'meningococcal MCV4P' AND i.DATE BETWEEN '2010-07-09' AND '2013-10-29';
SELECT CODE, DATE FROM immunizations WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Jacquelyn' AND last = 'Shanahan') AND DESCRIPTION = 'Influenza seasonal injectable preservative free';
SELECT TIMESTAMPDIFF(DAY, medications.START, medications.STOP) AS Duration FROM medications JOIN patients ON medications.PATIENT = patients.patient WHERE medications.DESCRIPTION = 'Acetaminophen 160 MG' AND medications.REASONDESCRIPTION = 'Acute bronchitis (disorder)' AND patients.first = 'Berry' AND patients.last = 'Keebler';
SELECT COUNT(*) FROM medications JOIN patients ON medications.PATIENT = patients.patient WHERE substr(medications.START, 1, 4) = '2010' AND substr(medications.STOP, 1, 4) = '2010' AND medications.DESCRIPTION = 'Nitrofurantoin 5 MG/ML [Furadantin]' AND medications.REASONDESCRIPTION = 'Cystitis' AND patients.marital = 'S'
SELECT encounters.REASONDESCRIPTION FROM encounters WHERE encounters.PATIENT = (SELECT patients.patient FROM patients WHERE patients.first = 'Lavelle' AND patients.last = 'Vandervort') AND encounters.DATE = '2013-11-20';
SELECT COUNT(*) FROM encounters JOIN patients ON encounters.PATIENT = patients.patient WHERE encounters.DATE BETWEEN '2011-09-01' AND '2012-08-29' AND patients.ethnicity = 'german' AND encounters.DESCRIPTION = 'Outpatient Encounter';
SELECT patients.ssn, patients.address FROM patients JOIN encounters ON patients.patient = encounters.PATIENT WHERE encounters.REASONDESCRIPTION = 'Viral sinusitis (disorder)' AND encounters.DATE = '2008-06-13';
SELECT     m.REASONDESCRIPTION AS Reason,     m.DESCRIPTION AS Drug_Name,     strftime('%j', m.STOP) - strftime('%j', m.START) AS Duration,     CASE         WHEN p.deathdate IS NULL THEN 'Alive'         ELSE 'Not Alive'     END AS Status FROM medications m JOIN patients p ON m.PATIENT = p.patient WHERE m.ENCOUNTER = '23c293ec-dbae-4a22-896e-f12cf3c8bac3';
SELECT COUNT(T1.first || ' ' || T1.last) FROM patients AS T1 JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Shellfish allergy' AND       (strftime('%Y', T1.deathdate) - strftime('%Y', T1.birthdate)) < 12;
SELECT strftime('%j', STOP) - strftime('%j', START) AS duration FROM medications WHERE DESCRIPTION = 'Amoxicillin 250 MG / Clavulanate 125 MG [Augmentin]' AND PATIENT IN (SELECT patient FROM patients WHERE first = 'Major' AND last = 'D''Amore');
SELECT COUNT(DISTINCT medications.DESCRIPTION) FROM medications JOIN patients ON medications.PATIENT = patients.patient WHERE patients.first = 'Major' AND patients.last = 'D'Amore' AND medications.START >= (     SELECT MIN(encounters.DATE)     FROM encounters     WHERE encounters.PATIENT = patients.patient );
SELECT DESCRIPTION, VALUE, UNITS FROM observations WHERE PATIENT = (SELECT patient FROM patients WHERE first = 'Bella' AND last = 'Rolfson');
SELECT p.first, p.last FROM patients p JOIN observations o ON p.patient = o.PATIENT WHERE o.DESCRIPTION = 'Calcium' AND o.VALUE < 8.6;
SELECT c.DESCRIPTION, COUNT(c.DESCRIPTION) as count FROM conditions c JOIN observations o ON c.PATIENT = o.PATIENT WHERE o.DESCRIPTION = 'Body Mass Index' AND o.VALUE < 18.5 GROUP BY c.DESCRIPTION ORDER BY count DESC LIMIT 5;
SELECT COUNT(DISTINCT patients.patient) FROM patients JOIN encounters ON patients.patient = encounters.PATIENT JOIN immunizations ON encounters.ID = immunizations.ENCOUNTER WHERE encounters.REASONDESCRIPTION = 'Normal pregnancy';
SELECT cp.DESCRIPTION FROM careplans cp JOIN patients p ON cp.PATIENT = p.patient WHERE p.first = 'Elly' AND p.last = 'Koss' AND substr(cp.START, 1, 4) = '1970' AND substr(cp.STOP, 1, 4) = '1970';
SELECT     cp.DESCRIPTION AS care_plan,     pr.DESCRIPTION AS procedure,     med.DESCRIPTION AS medication,     p.first || ' ' || p.last AS full_name FROM     careplans cp,     procedures pr,     medications med,     patients p,     encounters e WHERE     e.ID = '6f2e3935-b203-493e-a9c0-f23e847b9798'     AND cp.ENCOUNTER = e.ID     AND pr.ENCOUNTER = e.ID     AND med.ENCOUNTER = e.ID     AND p.patient = e.PATIENT
SELECT     SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) AS Male_Patients,     SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) AS Female_Patients FROM     patients p JOIN     conditions c ON p.patient = c.PATIENT WHERE     c.DESCRIPTION = 'Hypertension';
SELECT COUNT(*) FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE p.marital = 'S' AND p.gender = 'F' AND c.DESCRIPTION = 'normal pregnancy';
SELECT procedures.DESCRIPTION AS Procedure, medications.DESCRIPTION AS Medicine_Prescribed FROM procedures JOIN medications ON procedures.ENCOUNTER = medications.ENCOUNTER JOIN encounters ON procedures.ENCOUNTER = encounters.ID AND medications.ENCOUNTER = encounters.ID WHERE encounters.REASONDESCRIPTION = 'Drug overdose';
SELECT AVG(obs_bmi.VALUE) FROM (     SELECT o1.PATIENT, o1.VALUE     FROM observations o1     WHERE o1.DESCRIPTION = 'Body Mass Index' ) obs_bmi JOIN (     SELECT o2.PATIENT     FROM observations o2     WHERE o2.DESCRIPTION = 'Total Cholesterol' AND o2.VALUE >= 200 ) obs_chol ON obs_bmi.PATIENT = obs_chol.PATIENT;
SELECT     (SUM(CASE WHEN EXTRACT(YEAR FROM t2.DATE) - EXTRACT(YEAR FROM t1.birthdate) BETWEEN 20 AND 29 THEN t2.VALUE ELSE 0 END) /      COUNT(CASE WHEN EXTRACT(YEAR FROM t2.DATE) - EXTRACT(YEAR FROM t1.birthdate) BETWEEN 20 AND 29 THEN t2.PATIENT ELSE NULL END)) -     (SUM(CASE WHEN EXTRACT(YEAR FROM t2.DATE) - EXTRACT(YEAR FROM t1.birthdate) BETWEEN 50 AND 59 THEN t2.VALUE ELSE 0 END) /      COUNT(CASE WHEN EXTRACT(YEAR FROM t2.DATE) - EXTRACT(YEAR FROM t1.birthdate) BETWEEN 50 AND 59 THEN t2.PATIENT ELSE NULL END)) FROM patients t1 JOIN observations t2 ON t1.patient = t2.PATIENT WHERE t2.DESCRIPTION = 'Glucose'
WITH AgeCondition AS (   SELECT     c.DESCRIPTION,     COUNT(c.DESCRIPTION) AS ConditionCount,     SUM(CASE WHEN TIMESTAMP_DIFF(c.START, p.birthdate, YEAR) >= 60 THEN 1 ELSE 0 END) AS Age60PlusCount,     COUNT(p.patient) AS TotalPatientWithCondition   FROM     conditions c   JOIN     patients p ON c.PATIENT = p.patient   GROUP BY     c.DESCRIPTION ), MaxCondition AS (   SELECT     MAX(ConditionCount) AS MaxConditionCount   FROM     AgeCondition ) SELECT   (SUM(Age60PlusCount) / SUM(TotalPatientWithCondition)) * 100 AS PercentageAge60Plus FROM   AgeCondition JOIN   MaxCondition WHERE   ConditionCount = MaxConditionCount;
SELECT encounters.REASONDESCRIPTION FROM encounters JOIN patients ON encounters.PATIENT = patients.patient WHERE patients.first = 'Walter' AND patients.last = 'Bahringer' AND substr(encounters.DATE, 1, 7) = '2009-07'
SELECT TIMESTAMPDIFF(YEAR, patients.birthdate, MIN(encounters.DATE)) AS age_at_first_overdose FROM patients JOIN encounters ON patients.patient = encounters.PATIENT WHERE patients.first = 'Stacy' AND patients.last = 'Morar' AND encounters.REASONDESCRIPTION = 'Drug overdose' GROUP BY patients.patient;
SELECT m.DESCRIPTION, COUNT(*) as frequency FROM medications m WHERE m.REASONDESCRIPTION = 'Child attention deficit disorder' GROUP BY m.DESCRIPTION ORDER BY frequency DESC LIMIT 1;
SELECT patients.first, patients.last FROM patients JOIN procedures ON patients.patient = procedures.PATIENT WHERE procedures.DESCRIPTION = 'Transplant of lung (procedure)';
SELECT AVG(counts) FROM (SELECT COUNT(DISTINCT procedures.PATIENT) as counts FROM procedures WHERE procedures.DESCRIPTION = 'Combined chemotherapy and radiation therapy (procedure)' GROUP BY substr(procedures.DATE, 1, 4)) as yearly_counts
SELECT careplans.DESCRIPTION, careplans.START, careplans.STOP FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.first = 'Jacquelyn' AND patients.last = 'Shanahan' ORDER BY careplans.START DESC LIMIT 1;
SELECT allergies.START, allergies.STOP, allergies.DESCRIPTION FROM allergies JOIN patients ON allergies.PATIENT = patients.patient WHERE patients.first = 'Isadora' AND patients.last = 'Moen';
SELECT DATEDIFF(YEAR, p.birthdate, MIN(e.DATE)) AS Age FROM patients p JOIN encounters e ON p.patient = e.PATIENT WHERE p.first = 'Laronda' AND p.last = 'Bernier' AND p.prefix = 'Mrs.' GROUP BY p.patient
SELECT conditions.DESCRIPTION FROM conditions JOIN patients ON conditions.PATIENT = patients.patient WHERE patients.first = 'Joye' AND patients.last = 'Homenick' AND substr(conditions.START, 1, 4) = '2017'
SELECT MAX(i.DATE) FROM immunizations i JOIN patients p ON i.PATIENT = p.patient WHERE p.first = 'Joye' AND p.last = 'Homenick' AND i.DESCRIPTION = 'Influenza seasonal injectable preservative free';
SELECT JULIANDAY(T2.STOP) - JULIANDAY(T2.START) AS Duration FROM patients AS T1 JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.DESCRIPTION = 'Acetaminophen 160 MG'
SELECT COUNT(DISTINCT patients.patient) as num_patients, careplans.DESCRIPTION as care_plan FROM patients JOIN encounters ON patients.patient = encounters.PATIENT JOIN careplans ON patients.patient = careplans.PATIENT WHERE encounters.REASONDESCRIPTION = 'Second degree burn' GROUP BY careplans.DESCRIPTION;
SELECT MULTIPLY(DIVIDE(COUNT(p.gender WHERE p.gender = 'F'), COUNT(e.PATIENT)), 1.0) FROM encounters e JOIN patients p ON e.PATIENT = p.patient WHERE substr(e.DATE, 1, 4) = '2010' AND e.REASONDESCRIPTION = 'Contact dermatitis';
SELECT     COUNT(*) AS total_interactions,     (COUNT(CASE WHEN encounters.DESCRIPTION = 'Prenatal visit' THEN encounters.ID END) * 100.0 / COUNT(encounters.ID)) AS prenatal_encounters_percentage FROM     encounters WHERE     substr(encounters.DATE, 1, 4) BETWEEN '2010' AND '2017' AND     encounters.PATIENT = (SELECT patients.patient FROM patients WHERE patients.first = 'Lorri' AND patients.last = 'Simons');
SELECT medications.DESCRIPTION FROM medications JOIN patients ON medications.PATIENT = patients.patient WHERE patients.first = 'Joe' AND patients.last = 'Homenick';
SELECT careplans.START FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.maiden = 'Adams';
SELECT patients.first, patients.last FROM patients JOIN careplans ON patients.patient = careplans.PATIENT WHERE patients.gender = 'M' ORDER BY careplans.START LIMIT 1;
SELECT MULTIPLY(DIVIDE(COUNT(t1.PATIENT), (SELECT COUNT(PATIENT) FROM patients WHERE ethnicity = 'hispanic')), 1.0) AS percentage FROM careplans t1 JOIN patients t2 ON t1.PATIENT = t2.patient WHERE substr(t1.STOP, 1, 4) = '2011' AND t2.ethnicity = 'hispanic'
SELECT careplans.REASONDESCRIPTION FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.first = 'Angelo' AND patients.last = 'Buckridge';
SELECT DISTINCT cp.DESCRIPTION FROM careplans cp JOIN patients p ON cp.PATIENT = p.patient WHERE p.ethnicity = 'american';
SELECT DISTINCT c.ID FROM careplans c JOIN patients p ON c.PATIENT = p.patient WHERE p.birthplace = 'Pembroke MA US';
SELECT DISTINCT careplans.START FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.deathdate IS NULL;
SELECT COUNT(*) FROM patients p JOIN careplans cp ON p.patient = cp.PATIENT WHERE p.race = 'white' AND cp.REASONCODE = '10509002';
SELECT p.first, p.last FROM patients p JOIN careplans c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Diabetic diet';
SELECT DISTINCT careplans.STOP FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.deathdate IS NOT NULL;
SELECT COUNT(*) FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.ethnicity = 'italian' AND careplans.CODE = '304510005';
SELECT MULTIPLY(DIVIDE((SELECT COUNT(*) FROM patients WHERE gender = 'F' AND patient IN (SELECT DISTINCT PATIENT FROM careplans WHERE SUBSTR(START, 1, 4) = '2010')), (SELECT COUNT(*) FROM patients WHERE patient IN (SELECT DISTINCT PATIENT FROM careplans WHERE SUBSTR(START, 1, 4) = '2010'))), 100);
SELECT COUNT(*) FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.race = 'black' AND substr(careplans.STOP, 1, 4) = '2017';
SELECT COUNT(*) FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE p.gender = 'M' AND c.DESCRIPTION = 'Prediabetes';
SELECT p.first, p.last FROM patients p JOIN allergies a ON p.patient = a.PATIENT WHERE a.DESCRIPTION = 'Allergy to nut';
SELECT conditions.DESCRIPTION FROM conditions JOIN patients ON conditions.PATIENT = patients.patient WHERE patients.first = 'Wilmer' AND patients.last = 'Koepp';
Error: 第 1520 个样本有 2 个SQL。
SELECT p.first, p.last FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE m.DESCRIPTION = 'Penicillin V Potassium 250 MG' AND substr(m.START, 1, 4) >= '1948';
SELECT COUNT(*) FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE p.race = 'white' AND SUBSTR(p.birthdate, 1, 4) = '1935' AND c.DESCRIPTION = 'Stroke';
SELECT c.DESCRIPTION FROM conditions c JOIN immunizations i ON c.PATIENT = i.PATIENT AND c.START = i.DATE WHERE i.DESCRIPTION = 'IPV';
SELECT p.patient FROM patients p JOIN conditions c ON p.patient = c.PATIENT JOIN all_prevalences ap ON c.DESCRIPTION = ap.ITEM WHERE ap.OCCURRENCES = (SELECT MAX(OCCURRENCES) FROM all_prevalences) GROUP BY p.patient;
SELECT p.first, p.last FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Cystitis';
SELECT COUNT(*) FROM patients p JOIN immunizations i ON p.patient = i.PATIENT WHERE p.gender = 'M' AND i.DESCRIPTION = 'HPV quadrivalent';
SELECT careplans.START FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.first = 'Walter' AND patients.last = 'Bahringer';
SELECT careplans.DESCRIPTION FROM careplans JOIN patients ON careplans.PATIENT = patients.patient WHERE patients.first = 'Major' AND patients.last = 'D'Amore';
SELECT (COUNT(p.patient WHERE p.gender = 'M') * 100.0 / COUNT(p.patient)) AS percentage FROM patients p JOIN conditions c ON p.patient = c.PATIENT WHERE c.DESCRIPTION = 'Viral sinusitis (disorder)';
SELECT (COUNT(CASE WHEN p.gender = 'F' THEN 1 END) * 100 / COUNT(p.patient)) AS female_percentage FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE m.DESCRIPTION = 'Penicillin V Potassium 250 MG';
SELECT AVG(o.VALUE) FROM observations o JOIN patients p ON o.PATIENT = p.patient WHERE p.race = 'white' AND o.DESCRIPTION = 'Body Height';
SELECT cp.DESCRIPTION FROM careplans cp JOIN patients p ON cp.PATIENT = p.patient WHERE p.address = '179 Sydni Roads Taunton MA 02780 US';
SELECT allergies.DESCRIPTION FROM allergies JOIN patients ON allergies.PATIENT = patients.patient WHERE patients.first = 'Dirk' AND patients.last = 'Languish' AND patients.ethnicity = 'dominican';
SELECT COUNT(DISTINCT patients.patient) FROM patients JOIN allergies ON patients.patient = allergies.PATIENT JOIN conditions ON patients.patient = conditions.PATIENT WHERE allergies.DESCRIPTION = 'Allergy to peanuts' AND conditions.DESCRIPTION = 'Asthma';
SELECT patients.first, patients.last FROM patients JOIN conditions ON patients.patient = conditions.PATIENT WHERE conditions.DESCRIPTION = 'Drug overdose' AND (julianday(conditions.START) - julianday(patients.birthdate)) / 365 = 44;
SELECT patients.ssn FROM patients JOIN observations ON patients.patient = observations.PATIENT WHERE observations.DESCRIPTION = 'Systolic Blood Pressure' ORDER BY observations.VALUE DESC LIMIT 1;
SELECT cp.DESCRIPTION FROM careplans cp JOIN patients p ON cp.PATIENT = p.patient JOIN (     SELECT AP.ITEM     FROM all_prevalences AP     WHERE AP.PREVALENCE PERCENTAGE = (         SELECT MAX(AP2.PREVALENCE PERCENTAGE)         FROM all_prevalences AP2     ) ) ap ON p.patient = ap.ITEM WHERE cp.REASONDESCRIPTION IN (     SELECT c.DESCRIPTION     FROM conditions c     WHERE c.PATIENT = p.patient ) LIMIT 1;
SELECT cp.DESCRIPTION FROM careplans cp JOIN patients p ON cp.PATIENT = p.patient WHERE p.ssn = '999-15-3685';
SELECT AVG((julianday(COALESCE(deathdate, datetime('now'))) - julianday(birthdate)) / 365) as average_age FROM patients WHERE gender = 'M' AND patient IN (     SELECT patient     FROM conditions     WHERE description = 'Hypertension' );
SELECT p.first, p.last FROM patients p JOIN medications m ON p.patient = m.PATIENT WHERE m.REASONDESCRIPTION = 'Streptococcal sore throat (disorder)' LIMIT 5;
SELECT patients.first, patients.last FROM patients JOIN observations ON patients.patient = observations.PATIENT WHERE observations.DESCRIPTION = 'Body Weight' AND observations.VALUE = 61.97 AND observations.UNITS = 'kg';
SELECT patients.birthdate FROM patients JOIN medications ON patients.patient = medications.PATIENT WHERE patients.gender = 'M' AND medications.DESCRIPTION = 'Penicillin V Potassium 250 MG' LIMIT 5;
SELECT p.first, p.last FROM patients p JOIN conditions c ON p.patient = c.PATIENT JOIN all_prevalences ap ON c.DESCRIPTION = ap.ITEM WHERE p.ethnicity = 'irish' AND ap.OCCURRENCES > (SELECT AVG(OCCURRENCES * 0.96) FROM all_prevalences)
SELECT     (SELECT COUNT(patient) FROM patients WHERE marital = 'M' AND patient IN (SELECT DISTINCT PATIENT FROM conditions WHERE description = 'Diabetes')) -     (SELECT COUNT(patient) FROM patients WHERE marital = 'S' AND patient IN (SELECT DISTINCT PATIENT FROM conditions WHERE description = 'Diabetes'))
SELECT country, COUNT(*) AS numberOfCustomers FROM customers GROUP BY country;
SELECT p.productVendor, SUM(od.quantityOrdered) as TotalOrders, SUM((p.MSRP - p.buyPrice) * od.quantityOrdered) as EstimatedEarnings FROM orderdetails od JOIN products p ON od.productCode = p.productCode GROUP BY p.productVendor ORDER BY TotalOrders DESC LIMIT 1;
SELECT e.firstName, e.lastName FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE c.customerNumber IN (     SELECT p.customerNumber     FROM payments p     WHERE YEAR(p.paymentDate) = 2004     GROUP BY p.customerNumber     HAVING SUM(p.amount) = (         SELECT MAX(totalPayments)         FROM (             SELECT SUM(amount) AS totalPayments             FROM payments             WHERE YEAR(paymentDate) = 2004             GROUP BY customerNumber         ) AS subquery     ) );
SELECT SUM(od.quantityOrdered * od.priceEach) AS TotalPrice FROM orderdetails od JOIN orders o ON od.orderNumber = o.orderNumber WHERE o.customerNumber = (     SELECT customerNumber FROM customers WHERE customerName = 'Rovelli Gifts Distributors Ltd.' ) AND o.shippedDate BETWEEN '2003-01-01' AND '2003-12-31';
SELECT COUNT(*) FROM employees WHERE city = 'Sydney';
SELECT employeeNumber FROM employees WHERE reportsTo = 1143 AND city = 'New York';
SELECT     SUM(amount) / 3 AS average_annual_payments,     MAX(amount) AS highest_payment,     MIN(amount) AS lowest_payment FROM     payments WHERE     paymentDate BETWEEN '2003-01-01' AND '2005-12-31';
Error: 第 1552 个样本有 2 个SQL。
SELECT COUNT(checkNumber) FROM payments WHERE customerNumber IN (     SELECT customerNumber     FROM customers     WHERE customerName = 'Euro+ Shopping Channel' ) AND YEAR(paymentDate) = 2004;
SELECT p.productName, SUM(od.quantityOrdered) as totalQuantity FROM orderdetails od JOIN products p ON od.productCode = p.productCode WHERE p.productLine = 'Classic Cars' AND p.productScale = '1:18' GROUP BY p.productName ORDER BY totalQuantity DESC LIMIT 1;
SELECT     c.customerName,     SUM(p.amount) AS TotalPayment FROM     customers c JOIN     payments p ON c.customerNumber = p.customerNumber WHERE     c.creditLimit <= 100000 AND YEAR(p.paymentDate) = 2004 GROUP BY     c.customerName ORDER BY     TotalPayment DESC LIMIT 1;  SELECT COUNT(*) FROM     customers WHERE     creditLimit <= 100000;
SELECT     c.customerName,     c.contactFirstName,     c.contactLastName,     SUM(p.amount) as totalPayments FROM     customers c JOIN     employees e ON c.salesRepEmployeeNumber = e.employeeNumber JOIN     payments p ON c.customerNumber = p.customerNumber WHERE     e.reportsTo = 1056 AND e.officeCode IN (         SELECT             o.officeCode         FROM             offices o         WHERE             o.city = 'Tokyo'     ) GROUP BY     c.customerNumber, c.customerName, c.contactFirstName, c.contactLastName ORDER BY     totalPayments DESC LIMIT 1;
WITH Profit_Calculation AS (     SELECT         productCode,         productName,         (MSRP - buyPrice) * MAX(quantityOrdered) OVER (PARTITION BY productCode) * priceEach AS Total_Price     FROM         products p     INNER JOIN         orderdetails od ON p.productCode = od.productCode ), Max_Min_Profit AS (     SELECT         productCode,         productName,         Total_Price,         ROW_NUMBER() OVER (ORDER BY Total_Price DESC) AS rn     FROM         Profit_Calculation ) SELECT     productName,     Total_Price FROM     Max_Min_Profit WHERE     rn = 1 OR rn = (SELECT COUNT(*) FROM Max_Min_Profit) ;
SELECT COUNT(*) FROM (     SELECT orderNumber     FROM orderdetails     GROUP BY orderNumber     HAVING SUM(priceEach * quantityOrdered) > 4000 ) AS t1 JOIN orders ON t1.orderNumber = orders.orderNumber WHERE orders.status = 'Cancelled';
SELECT COUNT(DISTINCT orderNumber) FROM orders JOIN orderdetails ON orders.orderNumber = orderdetails.orderNumber WHERE YEAR(orders.orderDate) = 2003 AND orderdetails.quantityOrdered < 30;
SELECT SUM(od.quantityOrdered * od.priceEach) AS TotalValue FROM orderdetails od JOIN orders o ON od.orderNumber = o.orderNumber WHERE o.status = 'Cancelled';
SELECT SUM(od.quantityOrdered * od.priceEach) AS TotalValue FROM orderdetails od JOIN products p ON od.productCode = p.productCode WHERE p.productLine = 'Motorcycles';
SELECT COUNT(*) FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE p.productLine = 'Planes';
SELECT COUNT(*) FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE (p.MSRP - p.buyPrice) > 100;
SELECT AVG(od.quantityOrdered * od.priceEach) AS average_total_price FROM orderdetails od JOIN orders o ON od.orderNumber = o.orderNumber JOIN products p ON od.productCode = p.productCode WHERE YEAR(o.orderDate) = 2005 AND p.productVendor = 'Exoto Designs';
SELECT COUNT(*) FROM employees WHERE jobTitle = 'Sales Rep' AND officeCode = 1;
SELECT DISTINCT c.customerName FROM customers c JOIN payments p ON c.customerNumber = p.customerNumber WHERE p.amount > 50000;
SELECT SUM(amount) FROM payments WHERE customerNumber IN (     SELECT customerNumber     FROM customers     WHERE country = 'USA' );
SELECT SUM(p.amount) FROM payments p JOIN customers c ON p.customerNumber = c.customerNumber WHERE c.creditLimit IS NULL AND YEAR(p.paymentDate) = 2003;
SELECT c.customerName, c.phone FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE o.status = 'Cancelled';
SELECT COUNT(DISTINCT c.customerNumber) FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE c.country = 'France' AND o.status = 'Cancelled' GROUP BY c.customerNumber HAVING COUNT(o.orderNumber) = 2;
SELECT AVG(od.quantityOrdered * od.priceEach) FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN customers c ON o.customerNumber = c.customerNumber WHERE o.status = 'Shipped' AND c.country = 'Germany';
SELECT e.firstName, e.lastName FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE o.city = 'Tokyo';
SELECT e.email, CONCAT(e.firstName, ' ', e.lastName) AS fullName FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE o.city = 'Tokyo' AND e.jobTitle = 'Sales Rep';
SELECT e.email FROM employees e WHERE e.reportsTo = 1002 AND e.officeCode IN (     SELECT o.officeCode     FROM offices o     WHERE o.city = 'San Francisco' );
SELECT email, employeeNumber FROM employees WHERE officeCode IN (     SELECT officeCode     FROM offices     WHERE country = 'USA' AND state = 'MA' );
SELECT e.email FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE e.jobTitle = 'Sales Manager' AND o.city = 'Sydney';
SELECT e.email, o.country FROM employees e JOIN offices o ON e.officeCode = o.officeCode JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE o.country = 'Australia' AND c.creditLimit < 200000;
SELECT e.email FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE e.jobTitle = 'Sales Rep' AND c.country = 'UK' ORDER BY c.creditLimit ASC LIMIT 10;
SELECT COUNT(*) FROM customers WHERE country = 'Australia' AND creditLimit < 220000;
SELECT customerNumber FROM payments GROUP BY customerNumber ORDER BY SUM(amount) DESC LIMIT 3;
Error: 第 1581 个样本有 2 个SQL。
Error: 第 1582 个样本有 2 个SQL。
SELECT TOP 3 e.email FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE e.jobTitle = 'Sales Rep' AND c.country = 'UK' GROUP BY e.email ORDER BY SUM(c.creditLimit) DESC;
SELECT COUNT(*) FROM customers WHERE country = 'Norway' AND creditLimit < 220000;
Error: 第 1585 个样本有 2 个SQL。
SELECT productCode, quantityInStock FROM products WHERE productLine = 'Motorcycles' ORDER BY quantityInStock DESC LIMIT 5;
SELECT COUNT(*) FROM customers WHERE country = 'Germany' AND creditLimit = 0;
SELECT COUNT(DISTINCT customerNumber) FROM (     SELECT customerNumber, COUNT(customerNumber) as payment_count     FROM payments     WHERE paymentDate BETWEEN '2003-01-01' AND '2004-12-31'     GROUP BY customerNumber ) as subquery WHERE payment_count > 3;
SELECT AVG(od.priceEach - p.buyPrice) AS average_actual_profit FROM orderdetails od JOIN products p ON od.productCode = p.productCode WHERE p.productName = '1937 Lincoln Berline';
SELECT p.productName, SUM(od.quantityOrdered) as totalQuantity FROM products p JOIN orderdetails od ON p.productCode = od.productCode JOIN orders o ON od.orderNumber = o.orderNumber JOIN customers c ON o.customerNumber = c.customerNumber WHERE p.productLine = 'Motorcycles' AND p.productScale = '1:10' AND c.country = 'USA' GROUP BY p.productName ORDER BY totalQuantity DESC LIMIT 1;
SELECT checkNumber FROM payments WHERE paymentDate BETWEEN '2003-08-01' AND '2004-08-30' AND customerNumber IN (     SELECT customerNumber     FROM customers     WHERE customerName = 'Mini Gifts Distributors Ltd.' );
SELECT     (MAX(od.quantityOrdered * od.priceEach) - AVG(od.priceEach)) as Exceeds_Average FROM     orderdetails od JOIN     products p ON od.productCode = p.productCode WHERE     p.productLine = 'Planes' GROUP BY     p.productLine ORDER BY     (od.quantityOrdered * od.priceEach) DESC LIMIT 1;
SELECT SUM(od.quantityOrdered * od.priceEach) AS TotalValue FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE p.productLine = 'Vintage Cars' AND o.status = 'Shipped' AND YEAR(o.orderDate) BETWEEN 2003 AND 2004;
SELECT E.firstName || ' ' || E.lastName AS EmployeeName, E2.firstName || ' ' || E2.lastName AS SupervisorName FROM employees E JOIN (     SELECT P.customerNumber, MAX(P.amount) as MaxPayment     FROM payments P     GROUP BY P.customerNumber     ORDER BY MaxPayment DESC     LIMIT 1 ) C ON E.employeeNumber = C.customerNumber JOIN customers CU ON CU.salesRepEmployeeNumber = E.employeeNumber JOIN employees E2 ON E.reportsTo = E2.employeeNumber;
SELECT p.productName, od.quantityOrdered * od.priceEach AS Amount FROM orderdetails od JOIN orders o ON od.orderNumber = o.orderNumber JOIN customers c ON o.customerNumber = c.customerNumber JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber JOIN products p ON od.productCode = p.productCode WHERE e.officeCode IN (SELECT officeCode FROM offices WHERE city = 'Boston') ORDER BY Amount DESC LIMIT 1;
SELECT SUM(od.priceEach - p.buyPrice) AS total_actual_profit FROM orderdetails od JOIN orders o ON od.orderNumber = o.orderNumber JOIN customers c ON o.customerNumber = c.customerNumber JOIN products p ON od.productCode = p.productCode WHERE c.country = 'USA' AND o.orderDate BETWEEN '2003-01-06' AND '2005-05-09';
SELECT o.addressLine1, o.addressLine2, o.city, o.state, o.country, o.postalCode, o.phone FROM offices o JOIN employees e ON o.officeCode = e.officeCode JOIN (     SELECT c.salesRepEmployeeNumber, SUM(p.amount) as total_sales     FROM customers c     JOIN orders o ON c.customerNumber = o.customerNumber     JOIN payments p ON c.customerNumber = p.customerNumber     WHERE o.orderDate BETWEEN '2005-01-01' AND '2005-12-31'     GROUP BY c.salesRepEmployeeNumber     ORDER BY total_sales DESC     LIMIT 1 ) subq ON e.employeeNumber = subq.salesRepEmployeeNumber;
SELECT phone FROM customers WHERE contactLastName LIKE 'M%' AND country <> 'Germany';
SELECT AVG(amount) FROM payments WHERE paymentDate >= '2004-01-01' AND paymentDate < '2004-07-01';
SELECT     (COUNT(CASE WHEN o.customerNumber = 186 THEN o.orderNumber END) * 100 / COUNT(o.orderNumber)) AS percentage FROM     orders o WHERE     o.status = 'Shipped' AND YEAR(o.shippedDate) = 2005;
SELECT COUNT(*) FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE o.status = 'Cancelled' AND c.creditLimit > 115000;
SELECT p.paymentDate FROM payments p JOIN customers c ON p.customerNumber = c.customerNumber JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber WHERE e.firstName = 'Barry' AND e.lastName = 'Jones' AND c.creditLimit = (     SELECT MIN(creditLimit)     FROM customers     WHERE salesRepEmployeeNumber = (         SELECT employeeNumber         FROM employees         WHERE firstName = 'Barry' AND lastName = 'Jones'     ) ) ORDER BY p.paymentDate ASC LIMIT 1;
SELECT e1.reportsTo FROM employees e1 JOIN customers c ON e1.employeeNumber = c.salesRepEmployeeNumber WHERE c.country = 'France' GROUP BY e1.reportsTo;
SELECT c.addressLine1 + c.addressLine2 AS full_address FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE o.comments LIKE '%DHL%' AND o.shippedDate = '2005-04-04';
Error: 第 1605 个样本有 2 个SQL。
Error: 第 1606 个样本有 2 个SQL。
SELECT SUM(p.MSRP - p.buyPrice) AS Profit FROM products p WHERE p.productVendor = 'Carousel DieCast Legends' AND p.productDescription = 'The perfect holiday or anniversary gift for executives';
SELECT     c.customerName,     AVG(p.amount) as avg_payment FROM     customers c JOIN     payments p ON c.customerNumber = p.customerNumber WHERE     c.city = 'Boston' GROUP BY     c.customerName ORDER BY     avg_payment DESC LIMIT 1;
SELECT SUM(od.quantityOrdered) AS TotalQuantity, AVG(od.priceEach) AS AveragePrice FROM orderdetails od JOIN products p ON od.productCode = p.productCode WHERE p.productName = '18th Century Vintage Horse Carriage';
SELECT COUNT(DISTINCT od.productCode) FROM orderdetails od WHERE od.orderNumber = 10252;
Error: 第 1611 个样本有 3 个SQL。
SELECT T1.addressLine1, T1.addressLine2 FROM offices AS T1 JOIN employees AS T2 ON T1.officeCode = T2.officeCode WHERE T2.firstName = 'Foon' AND T2.lastName = 'Yue Tseng';
SELECT     CASE         WHEN SUM(CASE WHEN T1.orderDate = '2005-04-08' THEN T1.quantityOrdered * T2.priceEach ELSE 0 END) >            SUM(CASE WHEN T1.orderDate = '2005-04-10' THEN T1.quantityOrdered * T2.priceEach ELSE 0 END)         THEN '2005-04-08'         ELSE '2005-04-10'     END AS HigherValueDay FROM     orders AS T1 JOIN     orderdetails AS T2 ON T1.orderNumber = T2.orderNumber;
SELECT SUM(od.quantityOrdered) FROM orderdetails od JOIN products p ON od.productCode = p.productCode WHERE (p.MSRP - p.buyPrice) = (     SELECT MAX(profit) FROM (         SELECT (MSRP - buyPrice) AS profit FROM products     ) AS subquery );
SELECT SUM(amount) FROM payments WHERE customerNumber IN (     SELECT customerNumber     FROM customers     WHERE customerName = 'Petit Auto' ) AND paymentDate = '2004-08-09';
SELECT c.customerName FROM customers c JOIN payments p ON c.customerNumber = p.customerNumber WHERE p.checkNumber = 'NR157385';
SELECT c.contactFirstName, c.contactLastName FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE o.orderNumber = 10160;
SELECT c.addressLine1, c.addressLine2 FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE o.orderNumber = 10383;
SELECT T2.textDescription FROM products AS T1 JOIN productlines AS T2 ON T1.productLine = T2.productLine WHERE T1.productCode = 'S18_2949'
SELECT e.email FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE c.customerName = 'Dragon Souveniers, Ltd.';
SELECT COUNT(*) FROM customers c JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber WHERE c.country = 'France' AND e.firstName = 'Gerard' AND e.lastName = 'Hernandez';
SELECT p.productName FROM products p JOIN orderdetails od ON p.productCode = od.productCode JOIN (   SELECT o.customerNumber, o.orderNumber, o.orderDate   FROM orders o   WHERE o.customerNumber = 114   ORDER BY o.orderDate DESC   LIMIT 1 ) latest_order ON latest_order.orderNumber = od.orderNumber;
SELECT ((p.MSRP - od.priceEach) / p.MSRP) AS Discount FROM products p JOIN orderdetails od ON p.productCode = od.productCode WHERE p.productCode = 'S18_3482' AND od.orderNumber = 10108;
Error: 第 1624 个样本有 3 个SQL。
SELECT e.firstName, e.lastName, o.phone FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE e.jobTitle = 'President';
SELECT e.firstName, e.lastName FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE c.customerName = 'Muscle Machine Inc' AND e.jobTitle = 'Sales Rep';
SELECT e.email FROM employees e JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber WHERE c.customerName = 'Muscle Machine Inc' AND e.employeeNumber IN (     SELECT reportsTo     FROM employees     WHERE employeeNumber = (         SELECT salesRepEmployeeNumber         FROM customers         WHERE customerName = 'Muscle Machine Inc'     ) );
SELECT c.customerName FROM customers c JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber WHERE e.firstName = 'Steve' AND e.lastName = 'Patterson';
SELECT COUNT(*) FROM customers WHERE salesRepEmployeeNumber IN (     SELECT employeeNumber     FROM employees     WHERE reportsTo = (         SELECT employeeNumber         FROM employees         WHERE firstName = 'William' AND lastName = 'Patterson'     ) );
SELECT c.phone FROM customers c JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber WHERE e.firstName = 'Leslie' AND e.lastName = 'Jennings' ORDER BY c.creditLimit DESC LIMIT 3;
SELECT COUNT(*) FROM employees WHERE jobTitle = 'Sales Rep' AND officeCode IN (SELECT officeCode FROM offices WHERE country = 'USA');
SELECT addressLine1, addressLine2 FROM offices WHERE officeCode = (     SELECT officeCode     FROM employees     WHERE jobTitle = 'President' );
SELECT o.postalCode FROM offices o JOIN employees e ON o.officeCode = e.officeCode WHERE e.jobTitle = 'VP Sales';
SELECT SUM(od.quantityOrdered * od.priceEach) FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN customers c ON o.customerNumber = c.customerNumber WHERE o.orderDate = '2003-03-03' AND c.customerName = 'Cruz & Sons Co.';
SELECT p.productName FROM products p JOIN orderdetails od ON p.productCode = od.productCode JOIN orders o ON od.orderNumber = o.orderNumber JOIN customers c ON o.customerNumber = c.customerNumber WHERE c.customerName = 'Cruz & Sons Co.' AND o.orderDate = '2003-03-03';
SELECT p.productName FROM products p JOIN orderdetails od ON p.productCode = od.productCode JOIN orders o ON od.orderNumber = o.orderNumber JOIN customers c ON o.customerNumber = c.customerNumber WHERE c.customerName = 'Cruz & Sons Co.' ORDER BY od.quantityOrdered DESC LIMIT 1;
SELECT o.shippedDate FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber WHERE c.customerName = 'Cruz & Sons Co.' AND o.orderDate = '2003-03-03';
SELECT COUNT(c.customerNumber) AS NumberOfCustomers FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE p.productName = '1957 Chevy Pickup' AND MONTH(o.orderDate) = [SpecificMonth] AND YEAR(o.orderDate) = [SpecificYear];
SELECT p.productName FROM products p WHERE p.productLine = 'Classic Cars' ORDER BY (p.MSRP - p.buyPrice) DESC LIMIT 1;
SELECT DISTINCT c.customerName FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE o.status = 'In Process';
SELECT     (COUNT(CASE WHEN DATEDIFF(day, requiredDate, shippedDate) >= 3 THEN orderNumber END) * 100.0 / COUNT(orderNumber)) AS Percentage_Early_Shipped FROM     orders WHERE     status = 'Shipped';
SELECT c.customerName FROM customers c JOIN payments p ON c.customerNumber = p.customerNumber WHERE YEAR(p.paymentDate) = 2005 GROUP BY c.customerName ORDER BY SUM(p.amount) DESC LIMIT 1;
SELECT p.productName, (p.MSRP - p.buyPrice) as profitMarginPerPiece FROM products p JOIN (     SELECT productCode, SUM(quantityOrdered) as totalQuantity     FROM orderdetails     GROUP BY productCode ) od ON p.productCode = od.productCode WHERE od.totalQuantity = (     SELECT MAX(totalQuantity)     FROM (         SELECT SUM(quantityOrdered) as totalQuantity         FROM orderdetails         GROUP BY productCode     ) ) LIMIT 1;
SELECT c.customerName FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber WHERE od.orderNumber = (     SELECT orderNumber     FROM (         SELECT orderNumber, SUM(quantityOrdered * priceEach) as total_price         FROM orderdetails         GROUP BY orderNumber         ORDER BY total_price DESC         LIMIT 1     ) as subquery );
SELECT DISTINCT c.customerName FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE o.status = 'Disputed';
SELECT     (COUNT(CASE WHEN city = 'Paris' THEN employeeNumber END) * 100.0 / COUNT(employeeNumber)) AS percentage FROM     employees JOIN     offices ON employees.officeCode = offices.officeCode;
SELECT e.firstName, e.lastName, o.city AS officeCity FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE e.jobTitle = 'Sales Manager' AND o.territory = 'EMEA';
Error: 第 1648 个样本有 2 个SQL。
SELECT c.customerName FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE p.productName = '1939 Chevrolet Deluxe Coupe' GROUP BY c.customerName ORDER BY od.priceEach DESC LIMIT 1;
SELECT     (SUM(CASE WHEN customers.customerName = 'Atelier graphique' THEN payments.amount ELSE 0 END) / SUM(payments.amount)) * 100 AS percentage FROM     payments JOIN     customers ON payments.customerNumber = customers.customerNumber WHERE     YEAR(payments.paymentDate) = 2004;
SELECT SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)) AS ActualProfit FROM orderdetails od JOIN products p ON od.productCode = p.productCode WHERE od.orderNumber = 10100;
SELECT SUM(amount) FROM payments WHERE customerNumber = 103;
SELECT SUM(od.quantityOrdered * od.priceEach) FROM orderdetails od WHERE od.orderNumber = 10100;
SELECT TOP 3 products.productName FROM products JOIN orderdetails ON products.productCode = orderdetails.productCode ORDER BY orderdetails.priceEach DESC;
SELECT c.contactFirstName, c.contactLastName FROM customers c JOIN employees e ON c.salesRepEmployeeNumber = e.employeeNumber WHERE e.employeeNumber = '1370' ORDER BY c.creditLimit DESC LIMIT 1;
SELECT SUM(od.quantityOrdered) FROM orderdetails od JOIN products p ON od.productCode = p.productCode WHERE p.productName = '2003 Harley-Davidson Eagle Drag Bike';
SELECT o.shippedDate FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber WHERE od.priceEach = (SELECT MAX(priceEach) FROM orderdetails)
SELECT COUNT(*) FROM orders JOIN orderdetails ON orders.orderNumber = orderdetails.orderNumber JOIN products ON orderdetails.productCode = products.productCode WHERE products.productLine = 'Motorcycles' AND YEAR(orders.orderDate) = 2004;
SELECT orders.orderNumber FROM orders JOIN customers ON orders.customerNumber = customers.customerNumber WHERE customers.creditLimit = 45300;
SELECT c.customerName, (od.quantityOrdered * (od.priceEach - p.buyPrice)) AS Profit FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE (od.quantityOrdered * (od.priceEach - p.buyPrice)) = (SELECT MAX(od2.quantityOrdered * (od2.priceEach - p2.buyPrice)) FROM orderdetails od2 JOIN products p2 ON od2.productCode = p2.productCode);
SELECT COUNT(*) AS transactionCount, YEAR(paymentDate) AS paymentYear FROM payments WHERE amount < 10000 GROUP BY paymentYear;
SELECT TOP 3 p.productName, SUM(od.quantityOrdered) as totalQuantitySold FROM products p JOIN orderdetails od ON p.productCode = od.productCode JOIN orders o ON od.orderNumber = o.orderNumber WHERE YEAR(o.orderDate) = 2003 GROUP BY p.productName ORDER BY totalQuantitySold DESC;
SELECT e.firstName, e.lastName, SUM(od.quantityOrdered) as totalQuantitySold FROM employees e JOIN orders o ON e.employeeNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode WHERE p.productName = '1969 Harley Davidson Ultimate Chopper' AND YEAR(o.orderDate) = 2003 GROUP BY e.employeeNumber;
SELECT e.firstName, e.lastName FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE o.city = 'NYC' AND e.jobTitle = 'Sales Rep';
SELECT customers.customerName, customers.country FROM customers JOIN payments ON customers.customerNumber = payments.customerNumber WHERE payments.checkNumber = 'GG31455';
SELECT COUNT(*) FROM orderdetails JOIN products ON orderdetails.productCode = products.productCode WHERE products.productName = '2001 Ferrari Enzo';
SELECT p.productName FROM products p JOIN orderdetails od ON p.productCode = od.productCode GROUP BY p.productName ORDER BY SUM(od.quantityOrdered) ASC LIMIT 5;
SELECT DISTINCT c.customerName FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber WHERE o.status = 'Disputed';
Error: 第 1669 个样本有 2 个SQL。
SELECT SUM(od.quantityOrdered * od.priceEach) FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber JOIN products p ON od.productCode = p.productCode JOIN customers c ON o.customerNumber = c.customerNumber WHERE p.productLine = 'Classic Cars' AND o.status = 'Shipped' AND c.customerName = 'Land of Toys Inc.';
SELECT COUNT(*) FROM generalinfo WHERE review < 3;
SELECT food_type FROM generalinfo WHERE review = 4 ORDER BY id_restaurant LIMIT 4;
SELECT COUNT(*) FROM generalinfo WHERE city = 'Richmond' AND food_type = 'mediterranean';
SELECT DISTINCT city FROM geographic WHERE county = 'Sonoma';
SELECT DISTINCT county FROM geographic WHERE region != 'bay area';
SELECT DISTINCT city FROM geographic WHERE region = 'Northern California';
SELECT l.id_restaurant FROM location l WHERE l.street_name = '11th street' AND l.city = 'oakland'
SELECT COUNT(*) FROM location WHERE street_num = 871;
SELECT T2.street_num FROM location AS T2 JOIN geographic AS T1 ON T1.city = T2.city WHERE T1.city = 'san francisco' AND T2.street_name = '9th avenue'
SELECT T2.food_type FROM location AS T1 JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'adeline st' AND T1.city = 'berkeley'
SELECT DISTINCT r.region FROM restaurant.geographic r WHERE NOT EXISTS (     SELECT 1     FROM restaurant.generalinfo g     WHERE g.city = r.city AND g.food_type = 'african' );
SELECT DISTINCT g.county FROM geographic g JOIN generalinfo gi ON g.city = gi.city WHERE gi.label = 'a & w root beer';
SELECT T2.street_name, T2.street_num FROM generalinfo AS T1 JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.label = 'Adelitas Taqueria';
SELECT T2.food_type FROM location AS T1 JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_num = 3140 AND T1.street_name = 'alpine rd' AND T2.county = 'san mateo county';
SELECT T2.street_name FROM generalinfo AS T1 JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'San Francisco' AND T1.food_type = 'seafood';
SELECT DISTINCT T1.county FROM geographic AS T1 WHERE NOT EXISTS (     SELECT *     FROM generalinfo AS T2     WHERE T1.city = T2.city AND T2.label = 'bakers square restaurant & pie shop' );
SELECT COUNT(DISTINCT T1.county) FROM geographic AS T1 JOIN location AS T2 ON T1.city = T2.city WHERE T2.street_name = 'Appian Way';
SELECT T2.review FROM location AS T1 JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'Atlantic Ave';
SELECT generalinfo.id_restaurant FROM generalinfo JOIN geographic ON generalinfo.city = geographic.city WHERE geographic.county = 'Contra Costa County';
SELECT g.label FROM generalinfo g JOIN geographic geo ON g.city = geo.city WHERE geo.county = 'Yolo County';
SELECT gi.label FROM generalinfo gi JOIN location l ON gi.id_restaurant = l.id_restaurant WHERE l.street_name = 'drive' AND gi.city = 'san rafael' AND gi.food_type <> 'american';
SELECT T2.street_name FROM generalinfo AS T1 JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.review = 1.7 AND T1.city = 'San Francisco';
SELECT T2.label FROM location AS T1 JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'Alameda de las Pulgas' AND T2.city = 'Menlo Park' ORDER BY T2.review ASC LIMIT 1;
SELECT l.street_name FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant JOIN geographic geo ON geo.city = g.city WHERE g.label = 'Good Heavens' AND geo.county = 'Tuolumne';
SELECT T2.street_num FROM generalinfo AS T1 JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.label = 'aux delices vietnamese restaurant'
Error: 第 1696 个样本有 2 个SQL。
SELECT DISTINCT r.region FROM restaurant.geographic r WHERE NOT EXISTS (     SELECT 1     FROM restaurant.generalinfo g     WHERE g.city = r.city AND g.food_type = 'pizza' );
SELECT AVG(review) FROM generalinfo WHERE city IN (     SELECT city     FROM geographic     WHERE county = 'Santa Cruz County' );
SELECT (COUNT(CASE WHEN T2.food_type = 'mexican' THEN T1.id_restaurant END) * 100.0 / COUNT(T1.id_restaurant)) AS percentage FROM location AS T1 JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant JOIN geographic AS T3 ON T2.city = T3.city WHERE T3.county = 'monterey county';
SELECT (COUNT(T2.street_name) FILTER (WHERE T2.street_name = '11th st') * 100.0 / COUNT(T2.street_name)) AS percentage FROM location AS T1 JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'alameda county';
SELECT g.label FROM generalinfo g WHERE g.food_type = 'european';
SELECT DISTINCT city FROM geographic WHERE region = 'northern california';
SELECT label FROM generalinfo WHERE food_type = '24 hour diner';
SELECT city FROM geographic WHERE county = 'unknown' AND region = 'unknown' LIMIT 5;
SELECT county, region FROM geographic WHERE city = 'Davis City';
SELECT T2.street_name FROM location AS T2 JOIN geographic AS T1 ON T1.city = T2.city WHERE T1.city = 'Clayton'
SELECT g.label, MAX(r.review) FROM generalinfo g JOIN geographic geo ON g.city = geo.city JOIN location l ON g.id_restaurant = l.id_restaurant WHERE geo.city = 'San Francisco' GROUP BY g.label ORDER BY MAX(r.review) DESC LIMIT 1;
SELECT COUNT(*) FROM generalinfo WHERE food_type = 'american' AND city = 'Carmel' AND review = (SELECT MIN(review) FROM generalinfo WHERE city = 'Carmel');
SELECT (COUNT(CASE WHEN food_type = 'american food' THEN id_restaurant END) * 100.0 / COUNT(id_restaurant)) AS percentage FROM generalinfo WHERE city = 'dublin';
SELECT T2.street_num, T2.street_name, T1.city FROM generalinfo AS T1 JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.label = 'Albert''s Café';
SELECT generalinfo.label FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE location.street_name = '19th St' AND location.city = 'Oakland';
SELECT T2.food_type FROM location AS T1 JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_num = 106 AND T1.street_name = 'e 25th ave'
SELECT g.label FROM generalinfo g LEFT JOIN geographic geo ON g.city = geo.city WHERE geo.region = 'unknown' LIMIT 3;
SELECT g.label FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE g.food_type = 'chinese' AND l.street_num = 104 AND l.street_name = 'san tomas aquino road' AND l.city = 'campbell';
SELECT COUNT(*) FROM generalinfo AS T1 JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.food_type = 'thai' AND T2.street_name = 'san pablo ave' AND T1.city = 'albany';
SELECT g.county, g.region FROM geographic g JOIN generalinfo gi ON g.city = gi.city WHERE gi.label = 'plearn-thai cuisine';
SELECT g.label FROM generalinfo g JOIN geographic geo ON g.city = geo.city WHERE geo.county = 'El Dorado' AND geo.region = 'Lake Tahoe';
SELECT g.county, g.region FROM geographic g JOIN location l ON g.city = l.city WHERE l.street_name = 'E. El Camino Real';
SELECT g.label FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE g.food_type = 'Indian restaurant' AND l.street_name = 'shattuck ave' AND l.city = 'berkeley' ORDER BY g.review LIMIT 1;
SELECT (COUNT(generalinfo.id_restaurant) FILTER (WHERE geographic.region = 'Bay Area' AND generalinfo.review > 4)) * 100.0 / COUNT(generalinfo.id_restaurant) FILTER (WHERE geographic.region = 'Bay Area') AS percentage FROM geographic JOIN generalinfo ON geographic.city = generalinfo.city;
SELECT DISTINCT city FROM geographic WHERE county = 'San Mateo';
SELECT COUNT(*) FROM generalinfo WHERE review > 4;
SELECT T2.street_name, COUNT(T2.street_name) AS count_street FROM restaurant.location AS T2 GROUP BY T2.street_name ORDER BY count_street DESC LIMIT 1;
SELECT gi.label, MAX(gi.review) FROM generalinfo gi WHERE gi.food_type = 'chicken' GROUP BY gi.label ORDER BY gi.review DESC LIMIT 1;
SELECT T1.county FROM geographic AS T1 JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.city = 'el cerrito'
SELECT COUNT(*) FROM location WHERE street_name = 'Irving';
SELECT g.label FROM generalinfo g JOIN geographic geo ON g.city = geo.city WHERE geo.county = 'Marin';
SELECT T2.street_num, T2.street_name FROM generalinfo AS T1 JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.label = 'Peking Duck restaurant';
SELECT T3.street_name FROM geographic AS T1 JOIN location AS T3 ON T1.city = T3.city WHERE T1.county = 'Alameda' GROUP BY T3.street_name HAVING COUNT(T3.id_restaurant) > 10;
SELECT DISTINCT g.region FROM geographic g JOIN generalinfo gi ON g.city = gi.city WHERE gi.food_type = 'greek';
SELECT T3.street_num, T3.street_name FROM geographic AS T1 JOIN generalinfo AS T2 ON T1.city = T2.city JOIN location AS T3 ON T2.id_restaurant = T3.id_restaurant WHERE T1.region = 'unknown';
SELECT generalinfo.review FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE location.street_num = 8440 AND location.street_name = 'murray ave';
SELECT T1.food_type FROM generalinfo AS T1 JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'Monterey' GROUP BY T1.food_type ORDER BY COUNT(T1.food_type) DESC LIMIT 1;
SELECT T3.street_name, COUNT(T3.street_name) AS count_street FROM generalinfo AS T1 JOIN location AS T3 ON T1.id_restaurant = T3.id_restaurant WHERE T1.city = 'san francisco' AND T1.food_type = 'burgers' GROUP BY T3.street_name ORDER BY count_street DESC LIMIT 1;
SELECT T1.region FROM geographic AS T1 JOIN location AS T2 ON T1.city = T2.city WHERE T2.street_num = 1149 AND T2.street_name = 'el camino real';
SELECT T1.county FROM geographic AS T1 JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.label = 'sankee';
SELECT COUNT(DISTINCT T1.street_name) FROM location AS T1 JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.region = 'Northern California';
SELECT r.label FROM generalinfo r JOIN location l ON r.id_restaurant = l.id_restaurant WHERE l.street_name = 'Park St';
SELECT (COUNT(T1.id_restaurant) * 100.0 / (SELECT COUNT(*) FROM generalinfo)) AS Percentage FROM generalinfo AS T1 JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.region = 'bay area';
SELECT AVG(generalinfo.review) as average_review, geographic.county FROM generalinfo JOIN geographic ON generalinfo.city = geographic.city WHERE generalinfo.food_type = 'chinese' GROUP BY geographic.county ORDER BY average_review DESC;
SELECT T1.street_name FROM location AS T1 JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.city = 'San Francisco';
SELECT id_restaurant FROM location WHERE city = 'Danville';
SELECT COUNT(DISTINCT city) FROM geographic WHERE region = 'bay area';
SELECT COUNT(generalinfo.label) FROM generalinfo JOIN geographic ON generalinfo.city = geographic.city WHERE geographic.county = 'unknown';
SELECT T2.street_name FROM generalinfo AS T1 JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.food_type = 'American';
SELECT DISTINCT g.label FROM generalinfo g JOIN geographic geo ON g.city = geo.city WHERE geo.county = 'Santa Cruz county';
SELECT generalinfo.review FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE location.street_num = 430 AND location.street_name = 'Broadway';
SELECT l.street_num, l.street_name FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.review = (SELECT MAX(review) FROM generalinfo);
SELECT T1.country FROM geographic AS T1 JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'Italian' GROUP BY T1.country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT (COUNT(T1.id_restaurant) * 100.0 / (SELECT COUNT(*) FROM generalinfo)) as Percentage FROM generalinfo T1 JOIN geographic T2 ON T1.city = T2.city WHERE T2.region = 'Napa Valley';
SELECT COUNT(DISTINCT T1.city) FROM geographic AS T1 WHERE T1.region = 'bay area';
SELECT DISTINCT city FROM geographic WHERE county = 'unknown';
SELECT city FROM restaurant.geographic WHERE region = 'bay area' AND county = 'santa clara county';
SELECT id_restaurant FROM location WHERE city = 'Sunnyvale';
SELECT COUNT(*) FROM location WHERE street_num < 1000 AND street_name = 'Railroad';
SELECT T1.label FROM generalinfo AS T1 WHERE T1.food_type = '24 hour diner' AND T1.city = 'San Francisco'
SELECT gi.review FROM generalinfo gi JOIN location l ON gi.id_restaurant = l.id_restaurant WHERE l.street_name = 'ocean st' AND gi.city = 'santa cruz';
SELECT T3.street_num FROM generalinfo AS T1 JOIN location AS T3 ON T1.id_restaurant = T3.id_restaurant WHERE T1.food_type = 'bar' AND T1.city = 'oakland' AND T1.review = 2.7;
SELECT COUNT(*) FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE generalinfo.food_type = 'bakery' AND location.street_name = 'university ave.' AND location.city = 'palo alto';
SELECT T3.street_num FROM generalinfo AS T1 JOIN location AS T3 ON T1.id_restaurant = T3.id_restaurant WHERE T1.food_type = 'winery' AND T1.label = 'Tulocay Winery';
SELECT generalinfo.review, generalinfo.label FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE location.street_name = 'mission blvd' AND location.city = 'hayward';
SELECT COUNT(*) FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE generalinfo.food_type = 'indian' AND location.street_name = 'castro st' AND generalinfo.city = 'mountainview' AND generalinfo.label LIKE '%cookhouse%';
SELECT COUNT(*) FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE generalinfo.review = 2 AND location.street_num < 500;
SELECT COUNT(*) FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE generalinfo.food_type = 'asian' AND location.street_name = 'n milpitas blvd' AND location.city = 'milpitas' AND generalinfo.id_restaurant > 385;
SELECT generalinfo.label, generalinfo.id_restaurant FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE location.street_name = 'ocean avenue' AND location.city = 'san francisco';
SELECT l.street_num, l.street_name, g.city FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.label = 'Sanuki Restaurant';
SELECT T2.food_type FROM location AS T1 JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_num = 22779 AND T1.street_name = '6th St.' AND T1.city = 'Hayward City';
SELECT COUNT(*) FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE generalinfo.food_type = 'american' AND location.street_name = 'front' AND generalinfo.city = 'san francisco';
SELECT T1.id_restaurant FROM generalinfo AS T1 JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.food_type = 'american' AND T2.street_num > 2000 HAVING T1.review > (SELECT AVG(review)*0.7 FROM generalinfo WHERE food_type = 'american')
SELECT     (COUNT(CASE WHEN T2.food_type = 'afghani' THEN T1.id_restaurant END) * 100.0 / COUNT(T1.id_restaurant)) AS percentage FROM     location AS T1 JOIN     generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE     T1.street_num BETWEEN 1000 AND 2000;
SELECT gi.label, MAX(gi.review) AS max_review FROM generalinfo gi WHERE gi.food_type = 'asian' AND gi.city = 'san francisco' GROUP BY gi.label ORDER BY max_review DESC LIMIT 1;
SELECT COUNT(DISTINCT city) FROM geographic WHERE region = 'monterey';
SELECT COUNT(*) FROM generalinfo WHERE food_type = 'deli' AND city = 'Belmont' AND review > 2;
SELECT county FROM geographic WHERE region = 'northern california' GROUP BY county ORDER BY COUNT(city) DESC LIMIT 1;
Error: 第 1775 个样本有 2 个SQL。
SELECT r.region FROM (   SELECT g.city, MAX(generalinfo.review) AS max_review   FROM generalinfo   JOIN geographic AS g ON generalinfo.city = g.city   GROUP BY g.city   ORDER BY max_review DESC   LIMIT 4 ) AS t JOIN geographic AS r ON t.city = r.city GROUP BY r.region ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE generalinfo.food_type = 'chinese' AND location.street_name = '1st st' AND generalinfo.city = 'livermore';
SELECT COUNT(*) FROM generalinfo JOIN geographic ON generalinfo.city = geographic.city WHERE generalinfo.food_type = 'indian' AND geographic.region = 'los angeles area';
SELECT T2.food_type, COUNT(T2.food_type) AS count FROM geographic AS T1 JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'bay area' GROUP BY T2.food_type ORDER BY count DESC LIMIT 1;
SELECT COUNT(*) FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE l.street_name = 'broadway' AND g.city = 'oakland' AND g.review < 3;
SELECT T1.region FROM geographic AS T1 JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.label = 'baskin robbins' GROUP BY T1.region ORDER BY COUNT(T2.city) DESC LIMIT 1;
SELECT T3.street_name FROM generalinfo AS T1 JOIN location AS T3 ON T1.id_restaurant = T3.id_restaurant WHERE T1.food_type = 'pizza' AND T1.city = 'san jose';
SELECT COUNT(DISTINCT food_type) FROM generalinfo JOIN geographic ON generalinfo.city = geographic.city WHERE geographic.county IN ('Yosemite', 'Mono Lake');
SELECT l.street_num, l.street_name, l.city FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.review = (SELECT MAX(review) FROM generalinfo)
SELECT T1.county FROM geographic AS T1 JOIN (   SELECT city, COUNT(*) as branch_count   FROM generalinfo   GROUP BY city ) AS T2 ON T1.city = T2.city WHERE T2.branch_count = (   SELECT MAX(branch_count)   FROM (     SELECT city, COUNT(*) as branch_count     FROM generalinfo     GROUP BY city   ) )
SELECT T1.region FROM geographic AS T1 JOIN generalinfo AS T2 ON T1.city = T2.city GROUP BY T1.region ORDER BY COUNT(T2.id_restaurant) DESC LIMIT 1;
SELECT l.street_num, l.street_name, l.city FROM location l JOIN generalinfo g ON l.id_restaurant = g.id_restaurant WHERE g.food_type = 'american' AND g.review >= 4;
SELECT COUNT(*) FROM Player WHERE SUBSTR(DOB, 1, 4) > '1985';
SELECT COUNT(*) FROM Match WHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 6, 2) = '05';
SELECT COUNT(*) FROM Match WHERE Man_of_the_Match = 41;
SELECT Match_Id FROM Match WHERE SUBSTR(Match_Date, 1, 4) = '2008'
SELECT COUNT(*) FROM Player WHERE Country_Name = 'Australia';
SELECT Country_Name FROM Player JOIN Country ON Player.Country_Name = Country.Country_Name WHERE Player.DOB = (SELECT MIN(DOB) FROM Player)
SELECT Bowling_skill FROM Player WHERE Player_Name = 'SC Ganguly';
SELECT COUNT(*) FROM Player WHERE Batting_hand = 'Right-hand bat' AND SUBSTR(DOB, 1, 4) > '1985';
SELECT p.Player_Name FROM Player p JOIN Batting_Style bs ON p.Batting_hand = bs.Batting_Id JOIN Country c ON p.Country_Name = c.Country_Id WHERE bs.Batting_hand = 'Right-hand bat' AND c.Country_Name = 'Australia';
SELECT DISTINCT Bowling_skill FROM Bowling_Style JOIN Player ON Bowling_Style.Bowling_Id = Player.Bowling_skill WHERE Player.Country_Name = 'Australia';
SELECT MIN(DOB) FROM Player WHERE Bowling_skill = 'Legbreak';
SELECT Bowling_Skill, COUNT(Bowling_Skill) AS Skill_Count FROM Player GROUP BY Bowling_Skill ORDER BY Skill_Count DESC LIMIT 1;
SELECT p.Player_Name FROM Player p JOIN Match m ON p.Player_Id = m.Man_of_the_Match WHERE m.Match_Date = '2008-04-18';
SELECT COUNT(*) FROM Player_Match pm JOIN Player p ON pm.Player_Id = p.Player_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id WHERE p.Player_Name = 'SC Ganguly' AND r.Role_Desc = 'Captain';
SELECT r.Role_Desc FROM Rolee r JOIN Player_Match pm ON r.Role_Id = pm.Role_Id JOIN Player p ON pm.Player_Id = p.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id WHERE p.Player_Name = 'SC Ganguly' AND m.Match_Date = '2008-04-18';
SELECT MAX(M.Win_Margin) FROM Match M JOIN Player_Match PM ON M.Match_Id = PM.Match_Id JOIN Player P ON PM.Player_Id = P.Player_Id WHERE P.Player_Name = 'SC Ganguly';
SELECT AVG(Win_Margin) FROM Match WHERE Match_Id IN (     SELECT Match_Id     FROM Player_Match     WHERE Player_Id = (         SELECT Player_Id         FROM Player         WHERE Player_Name = 'SC Ganguly'     ) );
SELECT (COUNT(CASE WHEN Batting_Hand = 'Right-hand bat' THEN Player_Id ELSE NULL END) * 100.0 / COUNT(Player_Id)) AS Percentage FROM Player WHERE SUBSTR(DOB, 1, 4) > '1985';
SELECT Player_Name FROM Player WHERE DOB = (SELECT MAX(DOB) FROM Player)
SELECT COUNT(*) FROM Match WHERE Toss_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Sunrisers Hyderabad');
SELECT P.Player_Name FROM Player AS P JOIN Ball_by_Ball AS B ON P.Player_Id = B.Striker WHERE B.Match_Id = 419169 AND B.Over_Id = 3 AND B.Ball_Id = 2 AND B.Innings_No = 2;
SELECT V.Venue_Name FROM Venue V JOIN Match M ON V.Venue_Id = M.Venue_Id WHERE M.Win_Margin = 138;
SELECT m.Man_of_the_Match FROM Match m WHERE m.Match_Date = '2008-05-12';
SELECT P.Player_Name FROM Player AS P JOIN Player_Match AS PM ON P.Player_Id = PM.Player_Id JOIN Rolee AS R ON PM.Role_Id = R.Role_Id WHERE PM.Match_Id = 419117 AND R.Role_Desc = 'CaptainKeeper'
SELECT Player_Name FROM Player WHERE Player_Id = (SELECT Man_of_the_Series FROM Season WHERE Season_Year = 2013);
SELECT Player.DOB FROM Player JOIN Season ON Player.Player_Id = Season.Man_of_the_Series WHERE Season.Season_Year = 2014 AND Season.Orange_Cap IS NOT NULL;
Error: 第 1814 个样本有 2 个SQL。
SELECT Country_Name FROM Country JOIN City ON Country.Country_Id = City.Country_id WHERE City_Name = 'Ranchi';
SELECT COUNT(*) FROM City WHERE Country_id IN (SELECT Country_Id FROM Country WHERE Country_Name = 'India');
SELECT C.City_Name FROM City C JOIN Venue V ON C.City_Id = V.City_Id GROUP BY C.City_Name ORDER BY COUNT(V.Venue_Id) DESC LIMIT 1;
SELECT Batting_hand FROM Player WHERE Player_Name = 'MK Pandey';
SELECT     (SELECT COUNT(City_Id) FROM City WHERE Country_id IN (SELECT Country_Id FROM Country WHERE Country_Name = 'India')) /     (SELECT COUNT(City_Id) FROM City WHERE Country_id IN (SELECT Country_Id FROM Country WHERE Country_Name = 'South Africa'))
SELECT     (SELECT COUNT(Match_Id) FROM Match WHERE Venue_Id IN (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'M Chinnaswamy Stadium')) /     (SELECT COUNT(Match_Id) FROM Match WHERE Venue_Id IN (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'Maharashtra Cricket Association Stadium'))
SELECT Player_Name FROM Player WHERE DOB = (SELECT MIN(DOB) FROM Player)
SELECT COUNT(*) FROM Match WHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 6, 2) = '05';
SELECT COUNT(*) FROM Player WHERE DOB >= '1990-01-01' AND DOB <= '1999-12-31';
SELECT COUNT(*) FROM Match WHERE (Team_1 = 10 OR Team_2 = 10) AND SUBSTR(Match_Date, 1, 4) = '2012';
SELECT Orange_Cap FROM Season GROUP BY Orange_Cap HAVING COUNT(Season_Year) > 1 AND (MAX(Season_Year) - MIN(Season_Year)) = 1;
SELECT COUNT(*) FROM Match WHERE Season_Id = 7;
SELECT COUNT(*) FROM Umpire JOIN Country ON Umpire.Umpire_Country = Country.Country_Id WHERE Country.Country_Name = 'South Africa';
SELECT P.Player_Name FROM Player P JOIN (     SELECT Player_Id, COUNT(Man_of_the_Match) AS Award_Count     FROM Player_Match PM     JOIN Match M ON PM.Match_Id = M.Match_Id     WHERE M.Man_of_the_Match = PM.Player_Id     GROUP BY Player_Id     ORDER BY Award_Count DESC     LIMIT 1 ) AS Subquery ON P.Player_Id = Subquery.Player_Id;
SELECT Country_Name, COUNT(Country_Name) AS NumPlayers FROM Player GROUP BY Country_Name ORDER BY NumPlayers DESC LIMIT 1;
SELECT COUNT(*) FROM Season WHERE Man_of_the_Series = (SELECT Player_Id FROM Player WHERE Player_Name = 'CH Gayle');
SELECT s.Season_Year, COUNT(m.Match_Id) AS NumberOfMatches FROM Match m JOIN Season s ON m.Season_Id = s.Season_Id JOIN Venue v ON m.Venue_Id = v.Venue_Id WHERE v.Venue_Name = 'M Chinnaswamy Stadium' GROUP BY s.Season_Year ORDER BY NumberOfMatches DESC LIMIT 1;
SELECT T1.Team_Name FROM Team AS T1 JOIN (     SELECT Match_Winner, COUNT(Match_Winner) as win_count     FROM Match     WHERE Season_Id = 1     GROUP BY Match_Winner     ORDER BY win_count DESC     LIMIT 1 ) AS T2 ON T1.Team_Id = T2.Match_Winner;
SELECT V.Venue_Name FROM `Match` M JOIN Venue V ON M.Venue_Id = V.Venue_Id WHERE M.Team_1 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Kolkata Knight Riders') GROUP BY V.Venue_Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T.Team_Name, COUNT(*) AS Losses FROM (     SELECT M.Match_Id, M.Team_1 AS Team_Id     FROM Match M     WHERE M.Team_1 <> M.Match_Winner     UNION ALL     SELECT M.Match_Id, M.Team_2 AS Team_Id     FROM Match M     WHERE M.Team_2 <> M.Match_Winner ) AS L JOIN Team T ON L.Team_Id = T.Team_Id GROUP BY T.Team_Id ORDER BY Losses DESC LIMIT 1;
SELECT P.Player_Name FROM Player P JOIN Match M ON P.Player_Id = M.Man_of_the_Match WHERE M.Match_Date = (SELECT MIN(Match_Date) FROM Match)
SELECT MIN(Match_Date) FROM Match JOIN Team ON Match.Team_1 = Team.Team_Id OR Match.Team_2 = Team.Team_Id WHERE Team_Name = 'Chennai Super Kings'
SELECT COUNT(*) FROM Player WHERE Batting_hand = 'Left-hand bat' AND Country_Name = 'India';
SELECT P.Player_Name FROM Player P JOIN Player_Match PM ON P.Player_Id = PM.Player_Id JOIN Rolee R ON PM.Role_Id = R.Role_Id JOIN Team T ON PM.Team_Id = T.Team_Id WHERE R.Role_Desc = 'Captain' AND T.Team_Name = 'Deccan Chargers' GROUP BY P.Player_Name ORDER BY COUNT(R.Role_Id) DESC LIMIT 1;
SELECT (COUNT(CASE WHEN Batting_hand = 'Right-hand bat' THEN Player_Id ELSE NULL END) * 100.0 / COUNT(Player_Id)) AS Percentage_Right_Handed_Batting_Players FROM Player;
SELECT Player_Name FROM Player WHERE DOB = '1981-07-07';
SELECT COUNT(*) FROM Player_Match WHERE Player_Id = 2;
SELECT T1.Team_Name FROM Team AS T1 JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 WHERE T2.Win_Margin = (SELECT MAX(Win_Margin) FROM Match)
SELECT Country.Country_Name FROM Country JOIN City ON Country.Country_Id = City.Country_id JOIN Venue ON City.City_Id = Venue.City_Id WHERE Venue.Venue_Name = 'St George''s Park'
SELECT Player.Player_Name FROM Player JOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id JOIN Team ON Team.Team_Id = Player_Match.Team_Id WHERE Team.Team_Name = 'Mumbai Indians' AND Player_Match.Match_Id = 335990;
SELECT T1.Team_Name FROM Team AS T1 JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Win_Margin = 7 AND T2.Match_Date = '2009-05-07';
SELECT COUNT(*) FROM Match JOIN Outcome ON Match.Outcome_type = Outcome.Outcome_Id WHERE Outcome.Outcome_Type = 'Superover';
SELECT City_Name FROM City WHERE Country_id IN (SELECT Country_Id FROM Country WHERE Country_Name = 'U.A.E')
SELECT COUNT(*) FROM `soccer_2016.Match` AS M JOIN `soccer_2016.Team` AS T ON T.Team_Id = M.Match_Winner WHERE T.Team_Name = 'Pune Warriors';
SELECT Team_Name FROM Match JOIN Team ON Match.Match_Winner = Team.Team_Id WHERE Match_Id = 829768 AND Match_Date LIKE '2015%';
SELECT R.Role_Desc FROM Rolee R JOIN Player_Match PM ON R.Role_Id = PM.Role_Id JOIN Player P ON PM.Player_Id = P.Player_Id WHERE P.Player_Name = 'K Goel' AND PM.Match_Id = 335992;
SELECT COUNT(*) FROM City JOIN Country ON City.Country_id = Country.Country_Id WHERE Country.Country_Name = 'South Africa';
SELECT COUNT(*) FROM Match JOIN Venue ON Match.Venue_Id = Venue.Venue_Id WHERE Venue.Venue_Name = 'Newlands';
SELECT Win_Margin FROM Match WHERE (Team_1 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Mumbai Indians') OR Team_2 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Mumbai Indians')) AND (Team_1 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Royal Challengers Bangalore') OR Team_2 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Royal Challengers Bangalore')) AND Match_Date = '2008-05-28';
SELECT T1.Team_Name AS Team1, T2.Team_Name AS Team2 FROM `Match` M JOIN Team T1 ON T1.Team_Id = M.Team_1 JOIN Team T2 ON T2.Team_Id = M.Team_2 WHERE M.Win_Margin < (SELECT AVG(Win_Margin) * 0.3 FROM `Match` WHERE Match_Date LIKE '2011%') AND M.Match_Date LIKE '2011%';
SELECT     (COUNT(CASE WHEN R.Role_Desc = 'Captain' THEN PM.Player_Id END) * 100.0 / COUNT(PM.Player_Id)) AS Captain_Percentage FROM     Player P JOIN     Player_Match PM ON P.Player_Id = PM.Player_Id JOIN     Rolee R ON PM.Role_Id = R.Role_Id WHERE     P.DOB LIKE '1977%';
SELECT COUNT(DISTINCT Over_Id) FROM Ball_by_Ball WHERE Match_Id = 335996 AND Innings_No = 1;
SELECT Over_Id, Ball_Id, Innings_No FROM Batsman_Scored WHERE Match_Id = 336004 AND Runs_Scored = (SELECT MAX(Runs_Scored) FROM Batsman_Scored WHERE Match_Id = 336004)
SELECT Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler FROM Ball_by_Ball WHERE Over_Id > 20 LIMIT 5;
SELECT COUNT(*) FROM Wicket_Taken WHERE Match_Id = 548335 AND Innings_No = 1;
SELECT Player_Name FROM Player WHERE DOB LIKE '1971%';
SELECT Match_Id FROM Match WHERE DATE(Match_Date) = '2015-04-18'
SELECT DISTINCT Match_Id FROM Wicket_Taken JOIN Out_Type ON Wicket_Taken.Kind_Out = Out_Type.Out_Id WHERE Out_Name = 'hit wicket';
SELECT COUNT(*) FROM Wicket_Taken JOIN Out_Type ON Wicket_Taken.Kind_Out = Out_Type.Out_Id WHERE Out_Type.Out_Name = 'stumped' AND Wicket_Taken.Innings_No = 2;
SELECT COUNT(*) FROM Player JOIN Match ON Player.Player_Id = Match.Man_of_the_Match WHERE Player.Player_Name = 'Yuvraj Singh';
SELECT Player_Name, DOB FROM Player WHERE DOB LIKE '1977%' AND Country_Name = 'England';
SELECT p.Player_Name FROM Player p JOIN Season s ON p.Player_Id = s.Man_of_the_Series WHERE s.Season_Year = 2010;
SELECT (COUNT(CASE WHEN M.Match_Winner = T.Team_Id THEN 1 END) * 100.0 / COUNT(M.Match_Id)) AS Win_Rate FROM Match M JOIN Team T ON T.Team_Name = 'Chennai Super Kings' WHERE T.Team_Id = M.Match_Winner OR T.Team_Id = M.Team_1 OR T.Team_Id = M.Team_2;
SELECT p.Player_Name, p.Country_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Team t ON pm.Team_Id = t.Team_Id WHERE t.Team_Name = 'Gujarat Lions' AND m.Match_Date = '2016-04-11';
SELECT Player_Name, DOB FROM Player WHERE Bowling_skill = 'Left-arm fast';
SELECT Country_Name FROM Country JOIN Umpire ON Country.Country_Id = Umpire.Umpire_Country WHERE Umpire_Name = 'BR Doctrove';
SELECT p.Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id JOIN Match m ON pm.Match_Id = m.Match_Id WHERE m.Match_Date = '2008-06-01' AND m.Match_Winner = pm.Team_Id AND r.Role_Desc = 'Captain';
SELECT T1.Team_Name, COUNT(DISTINCT T3.Match_Id) AS Matches_Played FROM Team AS T1 JOIN Player_Match AS T2 ON T1.Team_Id = T2.Team_Id JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id JOIN Player AS T4 ON T2.Player_Id = T4.Player_Id WHERE T4.Player_Name = 'CK Kapugedera' GROUP BY T1.Team_Name;
SELECT     (COUNT(CASE WHEN V.Venue_Name = 'Wankhede Stadium' THEN M.Match_Id ELSE NULL END) * 100 / COUNT(M.Match_Id)) AS Percentage FROM     Match M JOIN     Venue V ON M.Venue_Id = V.Venue_Id JOIN     City C ON V.City_Id = C.City_Id WHERE     C.City_Name = 'Mumbai';
SELECT     (COUNT(CASE WHEN Out_Type.Out_Name = 'bowled' THEN Wicket_Taken.Player_Out END) * 100.0 / COUNT(Wicket_Taken.Player_Out)) AS Bowl_Percentage FROM     Wicket_Taken JOIN     Out_Type ON Wicket_Taken.Kind_Out = Out_Type.Out_Id WHERE     Wicket_Taken.Match_Id = 392187;
SELECT (COUNT(CASE WHEN Toss_Decision.Toss_Name = 'field' THEN Toss_Decision.Toss_Id ELSE NULL END) * 100 / COUNT(Toss_Decision.Toss_Id)) AS Percentage FROM Match JOIN Toss_Decision ON Match.Toss_Decide = Toss_Decision.Toss_Id WHERE Match.Match_Date BETWEEN '2010-01-01' AND '2016-12-31';
SELECT Toss_Winner FROM Match WHERE Toss_Decide = 2;
SELECT m.Match_Id FROM Match m JOIN Player p ON m.Man_of_the_Match = p.Player_Name WHERE p.Player_Name = 'BB McCullum';
SELECT P.Player_Name, P.DOB FROM Player P JOIN Match M ON P.Player_Id = M.Man_of_the_Match;
SELECT T.Team_Name FROM `Match` M JOIN Team T ON M.Toss_Winner = T.Team_Id WHERE M.Match_Id BETWEEN 336010 AND 336020;
SELECT COUNT(*) FROM Match WHERE Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Mumbai Indians');
SELECT t1.Team_Name FROM Team t1 JOIN Match m ON t1.Team_Id = m.Team_2 WHERE m.Team_1 IN (SELECT Team_Id FROM Team WHERE Team_Name = 'Pune Warriors') GROUP BY t1.Team_Name;
SELECT T1.Team_Name FROM Team AS T1 JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Match_Id = 336000;
SELECT Match_Id FROM Match WHERE Venue_Id = (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'Brabourne Stadium');
SELECT V.Venue_Name FROM Venue V JOIN Match M ON V.Venue_Id = M.Venue_Id WHERE M.Season_Id = 2;
SELECT City_Name FROM City JOIN Venue ON City.City_Id = Venue.City_Id WHERE Venue_Name = 'M Chinnaswamy Stadium'
SELECT Venue_Name FROM Venue WHERE City_Id IN (SELECT City_Id FROM City WHERE City_Name = 'Mumbai');
SELECT m.Match_Winner FROM Match m JOIN Venue v ON m.Venue_Id = v.Venue_Id WHERE v.Venue_Name LIKE 'St George%';
SELECT     CASE         WHEN (SELECT V.Venue_Name FROM Venue V JOIN City C ON V.City_Id = C.City_Id WHERE V.Venue_Name = 'SuperSport Park' AND C.City_Name = 'Centurion') IS NOT NULL THEN 'Yes'         ELSE 'No'     END AS Is_SuperSport_Park_at_Centurion;
SELECT COUNT(*) FROM Match WHERE Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Deccan Chargers');
SELECT COUNT(*) FROM Venue WHERE City_Id IN (SELECT City_Id FROM City WHERE City_Name = 'Pune');
SELECT Non_Striker, COUNT(*) as total_balls FROM Ball_by_Ball WHERE Match_Id = 501219 GROUP BY Non_Striker ORDER BY total_balls DESC LIMIT 1;
SELECT SUM(Runs_Scored) / COUNT(Over_Id) AS Average_Runs_First_Half FROM Batsman_Scored WHERE Over_Id > 1 AND Over_Id <= 25 AND Innings_No = 1;
SELECT AVG(Extra_Runs) FROM (     SELECT Extra_Runs     FROM Extra_Runs     WHERE Innings_No = 2 ) as subquery;
SELECT (COUNT(CASE WHEN Win_Margin > 100 THEN Match_Id END) * 100.0 / COUNT(Match_Id)) AS Percentage FROM Match;
SELECT Player_Name FROM Player WHERE DOB BETWEEN '1970-01-01' AND '1990-12-31' ORDER BY DOB ASC;
SELECT COUNT(*) FROM Wicket_Taken WHERE Over_Id = 3 AND Fielders = '';
SELECT Country_Name, COUNT(Umpire_Id) AS Num_Umpires FROM Country JOIN Umpire ON Country.Country_Id = Umpire.Umpire_Country GROUP BY Country_Name ORDER BY Num_Umpires DESC LIMIT 1;
Error: 第 1898 个样本有 2 个SQL。
SELECT COUNT(*) FROM Player p JOIN Wicket_Taken wt ON p.Player_Id = wt.Player_Out JOIN Out_Type ot ON wt.Kind_Out = ot.Out_Id WHERE ot.Out_Name = 'hit wicket';
SELECT Country_Name, AVG(CASE WHEN Batting_hand = 'Right-hand bat' THEN 1 ELSE 0 END) as Right_Hand_Bat_Average FROM (     SELECT c.Country_Name, p.Player_Id, p.Batting_hand     FROM Player p     JOIN Country c ON p.Country_Name = c.Country_Name ) GROUP BY Country_Name;
SELECT (COUNT(CASE WHEN Bowling_skill = 'Legbreak' THEN Player_Id ELSE NULL END) * 100.0 / COUNT(Player_Id)) AS Percentage FROM Player JOIN Bowling_Style ON Player.Bowling_skill = Bowling_Style.Bowling_Id WHERE Bowling_skill = 'Legbreak';
SELECT COUNT(*) FROM Match WHERE Win_Type = 'wickets' AND Win_Margin < 50;
SELECT COUNT(DISTINCT Venue_Id) FROM Match WHERE Toss_Winner = Team_2 AND Match_Winner = Team_1;
SELECT p.Player_Name, c.Country_Name FROM Player p JOIN Country c ON p.Country_Name = c.Country_Id WHERE p.Player_Id = (     SELECT s.Man_of_the_Series     FROM Season s     WHERE s.Season_Year = 2012 );
SELECT V.Venue_Name FROM Venue V JOIN Match M ON V.Venue_Id = M.Venue_Id GROUP BY V.Venue_Id ORDER BY COUNT(M.Match_Id) DESC LIMIT 1;
SELECT C.City_Name FROM City C JOIN Venue V ON C.City_Id = V.City_Id JOIN Match M ON V.Venue_Id = M.Venue_Id JOIN Win_By W ON M.Win_Id = W.Win_Id WHERE W.Win_Type = 'NoResult' GROUP BY C.City_Name ORDER BY COUNT(*) LIMIT 1;
SELECT P.Player_Name FROM Player AS P JOIN Season AS S ON P.Player_Id = S.Man_of_the_Series GROUP BY S.Man_of_the_Series HAVING COUNT(S.Man_of_the_Series) > 1;
SELECT P.Player_Name, C.Country_Name FROM Player P JOIN Country C ON P.Country_Name = C.Country_Id JOIN (     SELECT PM.Player_Id, COUNT(WT.Player_Out) AS catches     FROM Player_Match PM     JOIN Wicket_Taken WT ON PM.Match_Id = WT.Match_Id AND PM.Player_Id = WT.Fielders     WHERE WT.Kind_Out = 'caught'     GROUP BY PM.Player_Id ) AS subquery ON P.Player_Id = subquery.Player_Id WHERE subquery.catches > (SELECT AVG(catches) FROM (     SELECT COUNT(WT.Player_Out) AS catches     FROM Player_Match PM     JOIN Wicket_Taken WT ON PM.Match_Id = WT.Match_Id AND PM.Player_Id = WT.Fielders     WHERE WT.Kind_Out = 'caught'     GROUP BY PM.Player_Id ) AS avg_catches) ORDER BY subquery.catches ASC;
SELECT     COUNT(CASE WHEN m.Match_Winner = m.Team_1 AND m.Toss_Winner = m.Team_1 AND t.Toss_Name = 'field' THEN 1 END) * 100 /     COUNT(CASE WHEN m.Win_Type = 'runs' AND m.Match_Winner = m.Team_1 THEN 1 END) AS Percentage FROM     Match m JOIN     Toss_Decision t ON m.Toss_Decide = t.Toss_Id WHERE     m.Win_Type = 'runs' AND m.Match_Winner = m.Team_1;
SELECT     (SELECT AVG(CASE WHEN WT.Out_Id = 4 THEN 1 ELSE 0 END) FROM Wicket_Taken WT WHERE WT.Kind_Out = 'lbw') -     (SELECT AVG(CASE WHEN WT.Out_Id = 3 THEN 1 ELSE 0 END) FROM Wicket_Taken WT WHERE WT.Kind_Out = 'run out') AS Difference_in_Average_Out;
SELECT DISTINCT Over_Id FROM Ball_by_Ball WHERE Striker = 7;
SELECT COUNT(*) FROM Match WHERE Toss_Winner = Team_1 AND Toss_Decide = 2;
SELECT COUNT(*) FROM Match WHERE Match_Date LIKE '2010-03%';
SELECT COUNT(*) FROM Player WHERE DOB < '1990-06-29' AND Player_Name != 'Gurkeerat Singh';
SELECT COUNT(*) FROM Match WHERE Man_of_the_Match = 'SR Watson';
SELECT P.Player_Name, COUNT(DISTINCT PM.Role_Id) AS Versatility FROM Player AS P JOIN Player_Match AS PM ON P.Player_Id = PM.Player_Id JOIN Team AS T ON PM.Team_Id = T.Team_Id WHERE T.Team_Name = 'Delhi Daredevils' GROUP BY P.Player_Id ORDER BY Versatility DESC LIMIT 1;
SELECT P.Player_Name FROM Player AS P JOIN Season AS S ON P.Player_Id = S.Man_of_the_Series GROUP BY P.Player_Name ORDER BY COUNT(S.Season_Id) DESC LIMIT 1;
SELECT Season_Year FROM Season WHERE Orange_Cap = 'SP Narine'
SELECT T1.Team_Name FROM Team T1 JOIN Player P1 ON T1.Team_Id = P1.Player_Id JOIN Season S1 ON S1.Season_Year = YEAR(P1.DOB) JOIN Player P2 ON P2.Country_Name = P1.Country_Name AND S1.Season_Year = YEAR(P2.DOB) WHERE P1.Player_Name = S1.Purple_Cap AND P2.Player_Name = S1.Orange_Cap;
SELECT Player_Name FROM Player WHERE Country_Name = 'Zimbabwe';
SELECT COUNT(*) FROM Player WHERE Batting_hand = 'Left-hand bat';
SELECT COUNT(*) FROM Match WHERE Win_Type != 'runs';
SELECT Umpire_Name FROM Umpire JOIN Country ON Umpire.Umpire_Country = Country.Country_Id WHERE Country_Name = 'New Zealand';
SELECT Country_Name FROM Country WHERE Country_Id = (     SELECT Country_id     FROM Player     WHERE Bowling_skill = 'Slow left-arm chinaman'     GROUP BY Country_id     ORDER BY COUNT(Player_Id) DESC     LIMIT 1 )
SELECT V.Venue_Name, COUNT(*) AS Total_Matches FROM `Match` M JOIN Team T ON T.Team_Id = M.Team_1 OR T.Team_Id = M.Team_2 JOIN Venue V ON V.Venue_Id = M.Venue_Id WHERE T.Team_Name = 'Kochi Tuskers Kerala' GROUP BY V.Venue_Id ORDER BY Total_Matches DESC LIMIT 1;
SELECT COUNT(*) FROM (     SELECT Match_Id     FROM Ball_by_Ball     WHERE Team_Batting IN (         SELECT Team_Id         FROM Team         WHERE Team_Name = 'Delhi Daredevils'     ) AND Runs_Scored = 0     GROUP BY Match_Id ) AS NoRunsScoredMatches WHERE Match_Id IN (     SELECT Match_Id     FROM Ball_by_Ball     GROUP BY Match_Id     HAVING COUNT(DISTINCT CASE WHEN Runs_Scored > 0 THEN (Match_Id, Over_Id, Ball_Id) END) = 0 );
SELECT (COUNT(CASE WHEN M.Win_Margin < 10 THEN M.Venue_Id END) * 100.0 / COUNT(M.Venue_Id)) AS Percentage FROM Match M JOIN Venue V ON M.Venue_Id = V.Venue_Id WHERE V.Venue_Name = 'Dr DY Patil Sports Academy';
SELECT AVG(Extra_Runs) FROM (     SELECT Extra_Runs     FROM Extra_Runs     JOIN Extra_Type ON Extra_Runs.Extra_Type_Id = Extra_Type.Extra_Id     WHERE Extra_Type.Extra_Name = 'noballs' ) AS subquery;
Error: 第 1929 个样本有 2 个SQL。
SELECT COUNT(*) FROM Player WHERE DOB < '1975-10-16' AND Bowling_skill < 3;
SELECT Player_Name FROM Player WHERE DOB = (SELECT MAX(DOB) FROM Player)
SELECT Man_of_the_Series FROM Season WHERE Season_Year BETWEEN 2011 AND 2015;
SELECT SUM(Runs_Scored) FROM Batsman_Scored WHERE Match_Id = 335988 AND Innings_No = 2;
SELECT COUNT(*) FROM Batsman_Scored WHERE Match_Id BETWEEN 335989 AND 337000 AND Runs_Scored > 3 AND Over_Id = 1 AND Ball_Id = 1 AND Innings_No = 1;
SELECT m.Match_Id, m.Match_Date FROM Match m JOIN Venue v ON m.Venue_Id = v.Venue_Id WHERE v.Venue_Name = 'Kingsmead' GROUP BY m.Match_Date HAVING COUNT(m.Match_Id) > 2 AND DATEDIFF(day, LAG(m.Match_Date) OVER (ORDER BY m.Match_Date), m.Match_Date) = 1 AND DATEDIFF(day, LEAD(m.Match_Date) OVER (ORDER BY m.Match_Date), m.Match_Date) = 1;
SELECT COUNT(*) FROM Match JOIN Venue ON Match.Venue_Id = Venue.Venue_Id WHERE Venue.Venue_Name = 'MA Chidambaram Stadium' AND Match_Date BETWEEN '2009-05-09' AND '2011-08-08';
SELECT V.Venue_Name, C.City_Name FROM Venue AS V JOIN City AS C ON V.City_Id = C.City_Id JOIN Match AS M ON V.Venue_Id = M.Venue_Id WHERE M.Match_Id = 336005;
SELECT Toss_Winner, Toss_Name FROM Match WHERE Match_Id = 336011;
SELECT COUNT(*) FROM Player WHERE Country_Name = 'South Africa' AND DOB < '1980-04-11';
SELECT Player_Name FROM Player WHERE Bowling_skill = 'Legbreak';
SELECT MIN(M.Match_Date) AS FirstMatchDate, R.Role_Desc AS Role FROM Player P JOIN Player_Match PM ON P.Player_Id = PM.Player_Id JOIN Match M ON PM.Match_Id = M.Match_Id JOIN Rolee R ON PM.Role_Id = R.Role_Id WHERE P.DOB = (SELECT MAX(DOB) FROM Player) GROUP BY R.Role_Id ORDER BY M.Match_Date ASC LIMIT 1;
SELECT Match_Id FROM Match WHERE Man_of_the_Match = 'V Kohli';
SELECT COUNT(*) FROM `soccer_2016`.Match m JOIN `soccer_2016`.Player p ON m.`Man_of_the_Match` = p.Player_Id JOIN `soccer_2016`.Country c ON p.Country_Name = c.Country_Name WHERE m.Match_Date BETWEEN '2011%' AND '2012%' AND c.Country_Name = 'Australia';
SELECT p.Player_Name FROM Player p JOIN Season s ON p.Player_Id = s.Man_of_the_Series WHERE s.Orange_Cap = p.Player_Id;
SELECT MIN(M.Match_Date) FROM Match M JOIN Team T ON M.Match_Winner = T.Team_Id WHERE T.Team_Name = 'Sunrisers Hyderabad';
SELECT Player.Player_Name, Player.Player_Id FROM Player JOIN Country ON Player.Country_Name = Country.Country_Name JOIN Umpire ON Player.Player_Id = Umpire.Umpire_Id WHERE Country.Country_Name = 'England';
SELECT SUM(b.Batsman_Scored) / COUNT(DISTINCT CASE WHEN t.Toss_Name = 'field' THEN o.Over_Id END) AS Run_Rate FROM Batsman_Scored b JOIN Ball_by_Ball bb ON b.Match_Id = bb.Match_Id AND b.Over_Id = bb.Over_Id AND b.Ball_Id = bb.Ball_Id JOIN Toss_Decision td ON td.Toss_Id = bb.Toss_Decide JOIN Match m ON m.Match_Id = b.Match_Id JOIN Over o ON o.Over_Id = b.Over_Id WHERE m.Match_Id = 335987 AND m.Match_Date = '2008-04-18' AND o.Over_Id <= 17;
SELECT     (SUM(CASE WHEN b.Toss_Name = 'bat' THEN bs.Runs_Scored ELSE 0 END) / COUNT(DISTINCT CASE WHEN t.Toss_Name = 'field' THEN ma.Over_Id ELSE NULL END)) AS Run_Rate,     p.Player_Name AS Man_of_the_Match FROM     Bat_by_Ball bb     JOIN Batsman_Scored bs ON bb.Match_Id = bs.Match_Id AND bb.Over_Id = bs.Over_Id AND bb.Ball_Id = bs.Ball_Id     JOIN Match m ON bb.Match_Id = m.Match_Id     JOIN Toss_Decision t ON m.Toss_Decide = t.Toss_Id     JOIN Player p ON m.Man_of_the_Match = p.Player_Id WHERE     bb.Match_Id = 335999     AND bb.Over_Id <= 16 GROUP BY     p.Player_Name;
SELECT Team_Id, COUNT(Match_Winner) as Matches_Won FROM Match GROUP BY Match_Winner ORDER BY Matches_Won DESC LIMIT 1;
SELECT YEAR(DOB) AS Birth_Year, COUNT(Player_Id) AS Players_Count FROM Player GROUP BY YEAR(DOB) ORDER BY Players_Count DESC LIMIT 1;
SELECT Match_Date FROM Match WHERE Win_Margin = (SELECT MAX(Win_Margin) FROM Match);
SELECT Season_Year FROM (     SELECT Season_Id, COUNT(Match_Id) AS Matches_Count     FROM Match     GROUP BY Season_Id ) AS SubQuery JOIN Season ON SubQuery.Season_Id = Season.Season_Id ORDER BY Matches_Count LIMIT 1
SELECT COUNT(DISTINCT Player_Id) FROM (     SELECT Player_Id, COUNT(Match_Id) as Man_of_the_Match_Awards     FROM Match     WHERE Man_of_the_Match IN (SELECT Player_Id FROM Player)     GROUP BY Player_Id ) subquery WHERE Man_of_the_Match_Awards >= 5;
SELECT P.Player_Name FROM Player P JOIN Match M ON P.Player_Id = M.Man_of_the_Match WHERE M.Season_Id = 9 AND M.Match_Date = (SELECT MAX(Match_Date) FROM Match WHERE Season_Id = 9);
SELECT T1.Team_Name FROM `Team` AS T1 JOIN `Match` AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Match_Date = (SELECT MIN(Match_Date) FROM `Match`)
SELECT COUNT(*) FROM City WHERE Country_id IN (SELECT Country_Id FROM Country WHERE Country_Name = 'U.A.E');
SELECT Umpire_Name FROM Umpire JOIN Country ON Umpire.Umpire_Country = Country.Country_Id WHERE Country_Name = 'England';
SELECT COUNT(*) FROM Player JOIN Bowling_Style ON Player.Bowling_skill = Bowling_Style.Bowling_Id WHERE Bowling_Style.Bowling_skill = 'Legbreak';
SELECT COUNT(*) FROM Match WHERE Season_Id = 8 AND (Team_1 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Rajasthan Royals') OR Team_2 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Rajasthan Royals'));
SELECT Country_Name FROM Country JOIN Umpire ON Country.Country_Id = Umpire.Umpire_Country WHERE Umpire_Name = 'TH Wijewardene';
SELECT V.Venue_Name FROM Venue V JOIN City C ON V.City_Id = C.City_Id WHERE C.City_Name = 'Abu Dhabi'
SELECT Country_Name FROM Player JOIN Country ON Player.Country_Name = Country.Country_Name ORDER BY DOB DESC LIMIT 1;
SELECT P.Player_Name FROM Player P JOIN Player_Match PM ON P.Player_Id = PM.Player_Id JOIN Match M ON PM.Match_Id = M.Match_Id WHERE M.Season_Id = 1 AND M.Match_Date = (     SELECT MIN(Match_Date) FROM Match WHERE Season_Id = 1 ) AND PM.Team_Id = M.Match_Winner;
SELECT p.Player_Name FROM Player p JOIN Season s ON p.Player_Id = s.Purple_Cap ORDER BY (s.Season_Year - DATE_FORMAT(p.DOB, '%Y')) ASC LIMIT 1;
SELECT V.Venue_Name, C.City_Name, CT.Country_Name FROM Venue V JOIN City C ON V.City_Id = C.City_Id JOIN Country CT ON C.Country_id = CT.Country_Id JOIN Match M ON V.Venue_Id = M.Venue_Id WHERE M.Match_Date = (SELECT MAX(Match_Date) FROM Match)
SELECT Innings_No, COUNT(DISTINCT Over_Id) FROM Ball_by_Ball WHERE Match_Id = 336011 GROUP BY Innings_No;
SELECT Ball_ID, Runs_Scored, Innings_No FROM Batsman_Scored WHERE Match_Id = 335988 AND Over_Id = 20;
SELECT COUNT(*) FROM Match WHERE Match_Date LIKE '2011%';
SELECT 2022 - substr(DOB, 1, 4) AS Age FROM Player WHERE Player_Name = 'Ishan Kishan';
SELECT     COUNT(CASE WHEN Toss_Winner = Match_Winner THEN 1 END) / COUNT(*) AS WinRate FROM     Match WHERE     Match_Date LIKE '2012%';
SELECT COUNT(*) FROM Match WHERE Match_Date LIKE '2009%' AND Win_Margin < 10;
SELECT Player.Player_Name FROM Player JOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id JOIN Match ON Player_Match.Match_Id = Match.Match_Id WHERE (SUBSTR(Match.Match_Date, 7, 1) = '6' AND SUBSTR(Match.Match_Date, 1, 4) = '2014') AND (Match.Team_1 = Player_Match.Team_Id OR Match.Team_2 = Player_Match.Team_Id) GROUP BY Player.Player_Name;
SELECT COUNT(*) FROM Player_Match pm JOIN Player p ON pm.Player_Id = p.Player_Id WHERE p.Player_Name = 'Mohammad Hafeez';
SELECT Player_Name FROM Player WHERE Country_Name = 'South Africa' AND DOB LIKE '1984%';
SELECT (COUNT(CASE WHEN M.Match_Winner = T.Team_Id THEN 1 END) * 100.0 / COUNT(M.Match_Id)) AS Win_Percentage FROM Match M JOIN Team T ON M.Team_1 = T.Team_Id OR M.Team_2 = T.Team_Id WHERE T.Team_Name = 'Mumbai Indians' AND strftime('%Y', M.Match_Date) = '2009';
SELECT CAST(SUM(CASE WHEN Batting_hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Batting_hand = 'Left-hand bat' THEN 1 ELSE 0 END) AS Ratio FROM Player;
SELECT Player_Name, Country_Name FROM Player WHERE DOB = (SELECT MIN(DOB) FROM Player);
SELECT DISTINCT Bowling_Style.Bowling_skill FROM Bowling_Style JOIN Player ON Bowling_Style.Bowling_Id = Player.Bowling_skill JOIN Country ON Player.Country_Name = Country.Country_Name WHERE Country.Country_Name = 'Zimbabwea';
SELECT Umpire_Id, Umpire_Name FROM Umpire JOIN Country ON Umpire.Umpire_Country = Country.Country_Id WHERE Country_Name = 'New Zealand';
SELECT p.Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Team t ON pm.Team_Id = t.Team_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id WHERE r.Role_Desc = 'CaptainKeeper' AND t.Team_Name = 'Rising Pune Supergiants' GROUP BY p.Player_Name LIMIT 1;
SELECT COUNT(*) FROM Match WHERE Match_Date LIKE '2013%' AND Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Sunrisers Hyderabad');
SELECT Extra_Runs.Match_Id FROM Extra_Runs JOIN Extra_Type ON Extra_Runs.Extra_Type_Id = Extra_Type.Extra_Id WHERE Extra_Type.Extra_Name = 'penalty';
SELECT Team_1, Team_2 FROM Match WHERE Win_Type = 'Tie' AND SUBSTR(Match_Date, 1, 4) = '2015';
SELECT AVG(count_out) AS average_out, COUNT(*) AS lbw_out FROM (     SELECT Match_Id, COUNT(Player_Out) AS count_out     FROM Wicket_Taken     WHERE Innings_No = 1 AND Kind_Out IN (         SELECT Out_Id         FROM Out_Type         WHERE Out_Name = 'lbw'     )     GROUP BY Match_Id ) AS subquery;
SELECT COUNT(*) FROM Match WHERE Match_Date LIKE '2008%';
SELECT COUNT(*) FROM Match WHERE Match_Id IN (     SELECT Match_Id     FROM Ball_by_Ball     GROUP BY Match_Id     HAVING COUNT(DISTINCT Innings_No) = 2 )
SELECT Country_Name FROM Country JOIN City ON Country.Country_Id = City.Country_id WHERE City_Name = 'Rajkot';
Error: 第 1988 个样本有 2 个SQL。
SELECT T1.Team_Name FROM Team AS T1 JOIN Match AS T2 ON T1.Team_Id IN (T2.Team_1, T2.Team_2) WHERE T2.Win_Margin = 38 AND T2.Match_Date = '2009-04-30';
SELECT T3.Team_Name FROM Player_Match AS T1 JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id JOIN Team AS T3 ON T1.Team_Id = T3.Team_Id WHERE T2.Player_Name = 'T Kohli' AND T1.Match_Id = 335989;
SELECT COUNT(*) FROM Venue JOIN City ON Venue.City_Id = City.City_Id JOIN Country ON City.Country_id = Country.Country_Id WHERE City.City_Name = 'Centurion' AND Country.Country_Name = 'South Africa';
SELECT COUNT(*) FROM Match WHERE (Team_1 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Delhi Daredevils') OR Team_2 = (SELECT Team_Id FROM Team WHERE Team_Name = 'Delhi Daredevils')) AND Match_Date LIKE '%2014%' AND Match_Winner IN (SELECT Team_Id FROM Team WHERE Team_Name = 'Delhi Daredevils');
SELECT Match_Id FROM (   SELECT Match_Id, Win_Margin   FROM Match   WHERE Team_1 = 'Royal Challengers Bangalore' OR Team_2 = 'Royal Challengers Bangalore' ) subquery ORDER BY Win_Margin DESC LIMIT 1;
SELECT COUNT(*) FROM Player_Match pm JOIN Player p ON pm.Player_Id = p.Player_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id WHERE p.Player_Name = 'K Goel' AND r.Role_Id = 3;
SELECT AVG(M.Win_Margin) FROM Match M JOIN Venue V ON M.Venue_Id = V.Venue_Id WHERE V.Venue_Name = 'Newlands';
SELECT t1.Team_Name FROM Team t1 JOIN (     SELECT Team_1 AS TeamId     FROM Match     WHERE Match_Id = 336039 AND Team_1 != Match_Winner     UNION     SELECT Team_2     FROM Match     WHERE Match_Id = 336039 AND Team_2 != Match_Winner ) t2 ON t2.TeamId = t1.Team_Id;
SELECT V.Venue_Name FROM Venue V JOIN Match M ON V.Venue_Id = M.Venue_Id WHERE M.Match_Id = 829768;
SELECT T2.Team_Name FROM `Match` AS T1 JOIN Team AS T2 ON T1.Team_2 = T2.Team_Id WHERE T1.Win_Margin = (SELECT MIN(Win_Margin) FROM `Match`) LIMIT 1;
SELECT     (COUNT(CASE WHEN Match_Winner = 7 THEN 1 END) * 100.0 / COUNT(Match_Winner)) AS Winning_Percentage FROM     Match WHERE     Match_Date LIKE '2013%';
SELECT     (SELECT COUNT(*) FROM Player_Match WHERE Player_Id = (SELECT Player_Id FROM Player WHERE Player_Name = 'SC Ganguly') AND Role_Id = 1) -     (SELECT COUNT(*) FROM Player_Match WHERE Player_Id = (SELECT Player_Id FROM Player WHERE Player_Name = 'SC Ganguly') AND Role_Id > 1)
SELECT COUNT(*) FROM Player JOIN Bowling_Style ON Player.Bowling_skill = Bowling_Style.Bowling_Id WHERE Bowling_Style.Bowling_skill > 2;
SELECT COUNT(*) FROM Player WHERE DOB LIKE '1970%';
SELECT COUNT(*) FROM Player WHERE DOB LIKE '198%' AND Bowling_skill = 2;
SELECT COUNT(*) FROM Match WHERE Match_Date LIKE '2008-04%';
SELECT City_Name FROM City WHERE Country_id = 3;
SELECT COUNT(*) FROM Match WHERE Match_Date LIKE '2008%';
SELECT City_Id FROM City WHERE City_Name = 'East London';
SELECT 2008 - strftime('%Y',DOB) AS Age FROM Player WHERE Player_Name = 'SC Ganguly';
SELECT Player_Name FROM Player WHERE Batting_hand = 'Left-hand bat';
SELECT COUNT(*) FROM Player WHERE Country_Name = 'India';
SELECT Player_Name FROM Player WHERE Country_Name = 'England';
SELECT V.Venue_Name FROM Venue V JOIN City C ON V.City_Id = C.City_Id WHERE C.City_Name = 'Bangalore';
SELECT DISTINCT p.Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Season s ON m.Season_Id = s.Season_Id WHERE s.Season_Year = 2008;
SELECT DISTINCT p.Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Batsman_Scored bs ON pm.Match_Id = bs.Match_Id AND pm.Team_Id = (     SELECT Team_Batting FROM Ball_by_Ball WHERE Match_Id = bs.Match_Id AND Innings_No = bs.Innings_No ) WHERE bs.Runs_Scored < 3;
SELECT Rolee.Role_Desc FROM Player JOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id JOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id WHERE Player.Player_Name = 'SC Ganguly';
SELECT p.Player_Name FROM Player p JOIN Player_Match pm ON p.Player_Id = pm.Player_Id JOIN Rolee r ON pm.Role_Id = r.Role_Id WHERE r.Role_Desc = 'Keeper';
SELECT Player_Name FROM Player JOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id WHERE Player_Match.Team_Id = 1;
SELECT COUNT(DISTINCT pm.Player_Id) FROM Player_Match pm JOIN Rolee r ON pm.Role_Id = r.Role_Id JOIN Match m ON pm.Match_Id = m.Match_Id JOIN Season s ON m.Season_Id = s.Season_Id WHERE r.Role_Desc = 'Captain' AND s.Season_Year = 2008;
SELECT T3.Team_Name FROM Player AS T1 JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id JOIN Team AS T3 ON T2.Team_Id = T3.Team_Id JOIN Season AS T4 ON T2.Match_Id = T4.Season_Id WHERE T1.Player_Name = 'SC Ganguly' AND T4.Season_Year = 2008;
Error: 第 2020 个样本有 2 个SQL。
SELECT Country_Name FROM Player JOIN Country ON Player.Country_Name = Country.Country_Name WHERE Player_Name = 'SB Joshi';
SELECT COUNT(*) FROM Player WHERE Bowling_skill = 'Left-arm fast';
SELECT Outcome_type FROM Match WHERE Match_Id = 392195;
SELECT p.Player_Name, c.City_Name FROM Player p JOIN Country co ON p.Country_Name = co.Country_Name JOIN City c ON co.Country_Id = c.Country_id WHERE p.DOB = (SELECT MIN(DOB) FROM Player);
SELECT COUNT(*) FROM Match WHERE Match_Winner = (SELECT Team_Id FROM Team WHERE Team_Name = 'Kings XI Punjab') AND Season_Id = (SELECT Season_Id FROM Season WHERE Season_Year = 2008);
SELECT COUNT(DISTINCT Season.Season_Id) FROM Season JOIN Match ON Season.Season_Id = Match.Season_Id JOIN Team ON (Match.Team_1 = Team.Team_Id OR Match.Team_2 = Team.Team_Id) WHERE Team.Team_Name = 'Pune Warriors';
Error: 第 2027 个样本有 2 个SQL。
SELECT COUNT(*) FROM Match WHERE Man_of_the_Match = (SELECT Player_Id FROM Player WHERE Player_Name = 'SC Ganguly');
SELECT COUNT(*) FROM Match WHERE Match_Date LIKE '2008%' AND Match_Winner = (     SELECT Team_Id     FROM Team     WHERE Team_Name = 'Mumbai Indians' );
SELECT Team_Name FROM Team WHERE Team_Id = (     SELECT Match_Winner     FROM Match     WHERE Match_Id = 335993 AND Win_Type = 'wickets' );
SELECT COUNT(*) FROM Match WHERE Win_Type = 'wickets';
SELECT Rolee.Role_Desc FROM Player_Match JOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id JOIN Player ON Player_Match.Player_Id = Player.Player_Id JOIN Season ON Player_Match.Match_Id IN (SELECT Match.Match_Id FROM Match JOIN Season ON Match.Season_Id = Season.Season_Id WHERE Season.Season_Year = 2012) WHERE Player.Player_Name = 'W Jaffer';
SELECT P.Player_Name FROM Player AS P JOIN (     SELECT Man_of_the_Match, COUNT(Man_of_the_Match) as MoMCount     FROM Match     WHERE Season_Id IN (         SELECT S.Season_Id         FROM Season AS S         WHERE S.Season_Year = 2008     )     GROUP BY Man_of_the_Match ) AS Mom ON P.Player_Id = Mom.Man_of_the_Match WHERE Mom.MoMCount > 5;
SELECT CAST(SUM(CASE WHEN T1.Country_Name = 'India' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Player_Id) FROM Player AS T1 WHERE strftime('%Y', T1.DOB) BETWEEN '1975' AND '1985';
SELECT (COUNT(CASE WHEN Batting_hand = 'Left-hand bat' THEN Player_Id END) * 100.0 / COUNT(Player_Id)) AS Percentage FROM Player
SELECT (COUNT(CASE WHEN Win_By.Win_Id = 1 THEN 1 END) / COUNT(Win_By.Win_Id)) * 100 AS Percentage_Won_By_Runs FROM Match JOIN Win_By ON Match.Win_Id = Win_By.Win_Id WHERE Win_By.Win_Type = 'runs';
SELECT COUNT(*) FROM Match WHERE Win_Margin = 7;
SELECT COUNT(*) FROM Player WHERE strftime('%Y',DOB) BETWEEN '1970' AND '1975';
SELECT Match_Winner FROM Match WHERE Match_Date = '2009-04-26' AND Win_Margin = 6;
SELECT T1.Team_Name AS Team1Name, T2.Team_Name AS Team2Name, T3.Team_Name AS WinnerTeamName, M.Win_Margin FROM `Match` M JOIN `Team` T1 ON T1.Team_Id = M.Team_1 JOIN `Team` T2 ON T2.Team_Id = M.Team_2 JOIN `Team` T3 ON T3.Team_Id = M.Match_Winner WHERE M.Match_Id = 419135 AND M.Win_Type = 'runs';
SELECT Match_Id FROM Match WHERE Venue_Id = (SELECT Venue_Id FROM Venue WHERE Venue_Name = 'St George''s Park') ORDER BY Win_Margin DESC LIMIT 1;
SELECT COUNT(*) FROM Player WHERE Country_Name = 'Sri Lanka';
SELECT Player.Player_Name FROM Player JOIN Player_Match ON Player.Player_Id = Player_Match.Player_Id JOIN Rolee ON Player_Match.Role_Id = Rolee.Role_Id WHERE Rolee.Role_Desc = 'captain' GROUP BY Player.Player_Name;
SELECT V.Venue_Name, M.Match_Winner FROM Match AS M JOIN Venue AS V ON M.Venue_Id = V.Venue_Id WHERE M.Match_Id = 392194;
SELECT     (COUNT(CASE WHEN M.Win_Type = 'wickets' THEN 1 END) * 100.0 / COUNT(M.Match_Id)) AS win_by_wickets_percentage FROM     `Match` M JOIN     Team T ON (T.Team_Id = M.Match_Winner) JOIN     Season S ON (S.Season_Id = M.Season_Id) WHERE     T.Team_Name = 'Delhi Daredevils' AND     S.Season_Year LIKE '2009%';
SELECT groupName FROM torrents WHERE artist = 'Ron Hunt' AND groupYear = 1979 AND releaseType = 'single' AND totalSnatched = 239;
SELECT SUM(totalSnatched) FROM torrents WHERE artist = 'blowfly' AND groupYear = 1980 AND releaseType = 'album';
SELECT t.tag FROM tags t JOIN torrents tor ON t.id = tor.id WHERE tor.releaseType = 'album' AND tor.totalSnatched = (SELECT MAX(totalSnatched) FROM torrents WHERE releaseType = 'album');
SELECT t.tag, SUM(tr.totalSnatched) as TotalDownloads FROM tags t JOIN torrents tr ON t.id = tr.id GROUP BY t.tag ORDER BY TotalDownloads DESC LIMIT 5;
SELECT t1.groupName FROM torrents t1 JOIN tags t2 ON t1.id = t2.id WHERE t2.tag = 'funk' AND t1.releaseType = 'single' ORDER BY t1.groupYear LIMIT 1;
SELECT t.groupName FROM torrents t JOIN tags tg ON t.id = tg.id WHERE tg.tag = 'alternative' AND t.releaseType = 'ep';
SELECT T2.tag FROM torrents AS T1 JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'album' ORDER BY T1.totalSnatched ASC LIMIT 5;
SELECT t2.tag, t1.artist FROM torrents AS t1 JOIN tags AS t2 ON t1.id = t2.id WHERE t1.releaseType = 'single' ORDER BY t1.totalSnatched DESC LIMIT 1;
SELECT COUNT(*) FROM torrents t JOIN tags tg ON t.id = tg.id WHERE tg.tag = '1980s';
SELECT totalSnatched FROM torrents WHERE groupName = 'city funk';
SELECT groupName FROM torrents WHERE totalSnatched > 20000;
SELECT t.tag FROM tags t JOIN torrents tor ON t.id = tor.id WHERE tor.groupName = 'sugarhill gang';
SELECT COUNT(*) FROM tags WHERE id IN (SELECT id FROM torrents WHERE groupName = 'city funk');
SELECT t.groupName FROM torrents t JOIN tags tg ON t.id = tg.id WHERE tg.tag = '1980s';
SELECT t.groupName FROM torrents t JOIN tags tg ON t.id = tg.id WHERE tg.tag = '1980s' ORDER BY t.totalSnatched DESC LIMIT 1;
SELECT COUNT(*) FROM torrents JOIN tags ON torrents.id = tags.id WHERE torrents.artist = 'michael jackson' AND tags.tag = 'pop';
SELECT COUNT(*) FROM torrents JOIN tags ON torrents.id = tags.id WHERE torrents.groupYear = 2000 AND torrents.releaseType = 'album' AND tags.tag = 'pop';
SELECT AVG(torrents.totalSnatched) FROM torrents JOIN tags ON torrents.id = tags.id WHERE tags.tag = '1980s';
SELECT groupName FROM torrents ORDER BY totalSnatched DESC LIMIT 3;
SELECT groupName, artist FROM torrents WHERE groupYear = 2012 AND releaseType = 'single' ORDER BY totalSnatched DESC LIMIT 1;
SELECT COUNT(*) AS albums,        (SELECT COUNT(*)         FROM torrents         WHERE artist = '50 cent'         AND releaseType = 'single'         AND groupYear BETWEEN 2010 AND 2015) AS singles FROM torrents WHERE artist = '50 cent' AND releaseType = 'album' AND groupYear BETWEEN 2010 AND 2015;
SELECT ABS(MIN(t.groupYear) - 1991) AS Years_Passed FROM torrents t WHERE t.artist = '2Pac' AND t.releaseType = 'album' AND t.groupYear > 1991 LIMIT 1;
SELECT AVG(totalSnatched) FROM torrents WHERE artist = '2Pac' AND releaseType = 'single' AND groupYear BETWEEN 2001 AND 2013;
SELECT t.groupName, t.groupYear, tg.tag FROM torrents t JOIN (     SELECT id, tag     FROM tags     WHERE id IN (         SELECT id         FROM torrents         WHERE releaseType = 'live album'     ) ) tg ON t.id = tg.id WHERE t.releaseType = 'live album' AND t.totalSnatched = (     SELECT MAX(totalSnatched)     FROM torrents     WHERE releaseType = 'live album' );
SELECT artist FROM torrents WHERE groupYear = 2016 AND releaseType = 'bootleg' GROUP BY artist HAVING COUNT(*) >= 2;
SELECT artist FROM music_tracker.torrents WHERE releaseType = 'single' AND groupYear BETWEEN 1980 AND 1982;
SELECT groupName FROM torrents WHERE id BETWEEN 10 AND 20 AND totalSnatched >= 20 AND releaseType = 'single';
SELECT t1.artist FROM torrents t1 JOIN tags t2 ON t1.id = t2.id WHERE t1.groupYear BETWEEN 1980 AND 1982 AND t2.tag = 'disco';
SELECT t1.artist FROM torrents t1 JOIN tags t2 ON t1.id = t2.id WHERE t1.totalSnatched <= 100 AND t1.groupYear = 1980 AND t2.tag = 'funk';
SELECT t1.artist FROM torrents t1 JOIN tags t2 ON t1.id = t2.id WHERE t1.releaseType = 'single' AND t2.tag = 'soul' GROUP BY t1.artist ORDER BY COUNT(t1.id) DESC LIMIT 1;
SELECT t1.artist FROM torrents t1 JOIN tags t2 ON t1.id = t2.id WHERE t1.groupYear = 1980 AND t2.tag = 'funk' AND t1.id BETWEEN 10 AND 30;
SELECT groupName FROM torrents WHERE groupId IN (     SELECT id     FROM tags     WHERE tag = 'jazz' ) AND groupYear >= 1982 ORDER BY totalSnatched DESC LIMIT 1;
SELECT t2.tag FROM torrents AS t1 JOIN tags AS t2 ON t1.id = t2.id WHERE t1.id = 16;
SELECT t1.artist, MAX(t1.totalSnatched) FROM torrents t1 JOIN tags t2 ON t1.id = t2.id WHERE t2.tag = 'new.york' AND t1.id BETWEEN 10 AND 50 GROUP BY t1.artist ORDER BY t1.totalSnatched DESC LIMIT 1;
SELECT DISTINCT t.artist FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.releaseType IN ('album', 'mixtape') AND t.groupYear BETWEEN 1980 AND 1985 AND tg.tag = 'dance';
SELECT COUNT(*) FROM torrents JOIN tags ON torrents.id = tags.id WHERE torrents.releaseType = 'single' AND torrents.groupYear BETWEEN 1979 AND 1981 AND tags.tag = 'soul';
SELECT COUNT(*) FROM torrents WHERE releaseType = 'single' AND groupYear = 1979;
SELECT COUNT(*) FROM torrents WHERE artist = 'sugar daddy' AND releaseType = 'single' AND groupYear = 1980;
SELECT COUNT(*) FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.releaseType = 'album' AND t.groupYear = 2004 AND tg.tag = 'christmas';
SELECT t.tag FROM tags t JOIN torrents tor ON t.id = tor.id WHERE tor.artist = 'kurtis blow' AND tor.groupYear BETWEEN 2000 AND 2010;
SELECT t.groupName, ta.tag FROM torrents t JOIN tags ta ON t.id = ta.id WHERE t.artist = 'millie jackson' AND t.releaseType = 'album' AND t.groupYear = 1980;
SELECT t.groupName FROM torrents t JOIN tags tg ON t.id = tg.id WHERE tg.tag = 'jazz' AND t.groupYear = 2005;
SELECT t1.artist FROM torrents t1 JOIN tags t2 ON t1.id = t2.id WHERE t1.groupYear BETWEEN 1980 AND 2000 AND t2.tag = 'disco' GROUP BY t1.artist ORDER BY COUNT(t1.id) DESC LIMIT 1;
SELECT t1.artist FROM torrents AS t1 JOIN tags AS t2 ON t1.id = t2.id WHERE t1.releaseType = 'single' AND t2.tag = '1970s';
SELECT     (COUNT(CASE WHEN t.releaseType = 'album' AND t.groupYear BETWEEN 1979 AND 1982 AND tt.tag = 'united.states' THEN 1 END) * 100.0 / COUNT(CASE WHEN t.releaseType = 'album' AND t.groupYear BETWEEN 1979 AND 1982 THEN 1 END)) AS percentage FROM torrents t JOIN tags tt ON t.id = tt.id;
SELECT COUNT(*) FROM Country WHERE OtherGroups = 'HIPC' AND LendingCategory = 'IDA';
SELECT ShortName FROM Country WHERE lendingCategory = 'IDA' AND ExternalDebtReportingStatus = 'Estimate';
SELECT CN.Description FROM CountryNotes CN JOIN Country C ON CN.Countrycode = C.CountryCode WHERE C.ShortName = 'Aruba' AND CN.Seriescode = 'SM.POP.TOTL';
SELECT c.ShortName, cn.Description FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE c.Region = 'Latin America & Caribbean' AND cn.Seriescode = 'SM.POP.TOTL';
SELECT COUNT(*) FROM Country AS c JOIN CountryNotes AS cn ON c.CountryCode = cn.Countrycode WHERE cn.Seriescode = 'SM.POP.TOTL' AND c.IncomeGroup = 'Low income' AND cn.Description IS NOT NULL;
SELECT CN.Description FROM CountryNotes CN JOIN Country C ON CN.Countrycode = C.CountryCode WHERE CN.Seriescode = 'SM.POP.TOTL' AND C.LendingCategory = 'IDA';
SELECT COUNT(*) FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE c.IncomeGroup = 'Low income' AND c.LendingCategory = 'IDA' AND cn.Seriescode = 'SM.POP.TOTL';
SELECT COUNT(*) FROM Country AS c JOIN CountryNotes AS cn ON c.CountryCode = cn.Countrycode WHERE c.IncomeGroup = 'High income: OECD' AND c.CurrencyUnit = 'Euro' AND cn.Seriescode = 'SP.DYN.AMRT.FE';
SELECT c.LongName FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE cn.Description = "Estimates are derived from data on foreign-born population." AND cn.Seriescode = "SM.POP.TOTL"
SELECT f.Description FROM Footnotes f JOIN Country c ON f.Countrycode = c.CountryCode WHERE f.Seriescode = 'AG.LND.FRST.K2' AND f.Year = 1990 AND c.ShortName = 'Aruba';
SELECT Year FROM Footnotes WHERE Countrycode = (SELECT CountryCode FROM Country WHERE ShortName = 'Aruba') AND Seriescode = 'AG.LND.FRST.K2';
SELECT c.CountryName FROM Country c JOIN Footnotes f ON c.CountryCode = f.Countrycode WHERE f.Description = 'Data are classified as official aid.' AND f.Seriescode = 'DC.DAC.AUSL.CD' AND f.Year = 2002;
SELECT COUNT(*) FROM Footnotes WHERE Countrycode = (SELECT CountryCode FROM Country WHERE ShortName = 'Aruba') AND Year = 2002;
SELECT COUNT(*) AS Consecutive_Years FROM (     SELECT Year,            LAG(Year, 1) OVER (ORDER BY Year) AS Prev_Year     FROM Footnotes     WHERE Countrycode = (         SELECT CountryCode         FROM Country         WHERE ShortName = 'Aruba'     )     AND Seriescode = 'BX.KLT.DINV.CD.WD'     ORDER BY Year ) AS SubQuery WHERE Year = Prev_Year + 1;
SELECT AVG(Value) FROM Indicators WHERE CountryCode = (SELECT CountryCode FROM Country WHERE Alpha2Code = '1A') AND IndicatorName LIKE '%adolescent fertility rate%';
SELECT c.SpecialNotes FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorName LIKE '%adolescent fertility rate%' GROUP BY c.CountryCode, c.SpecialNotes HAVING SUM(i.Value) / COUNT(i.IndicatorName) = (     SELECT MAX(SUM(Value) / COUNT(IndicatorName))     FROM Indicators     WHERE IndicatorName LIKE '%adolescent fertility rate%'     GROUP BY CountryCode )
SELECT CountryCode, Alpha2Code FROM Country WHERE Region = 'East Asia & Pacific' AND IncomeGroup = 'High income: nonOECD';
SELECT LongName, Alpha2Code FROM Country WHERE LatestTradeData = 2013 AND LatestWaterWithdrawalData = 2013;
SELECT AVG(Value) FROM Indicators WHERE CountryName = 'Algeria' AND IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)' AND Year BETWEEN 1975 AND 1980;
SELECT IndicatorName, AggregationMethod FROM Series WHERE Topic = 'Economic Policy & Debt: Balance of payments: Capital & financial account';
SELECT s.SeriesCode, c.Alpha2Code FROM Series s JOIN Country c ON s.SeriesCode = c.CountryCode WHERE s.Topic = 'Environment: Emissions' AND s.LicenseType = 'restricted';
SELECT COUNT(*) FROM Indicators JOIN Country ON Indicators.CountryCode = Country.CountryCode WHERE Indicators.Year = 1970 AND Country.Region = 'Middle East & North Africa' AND Indicators.IndicatorName = 'CO2 emissions from gaseous fuel consumption (kt)' AND Indicators.Value > 600;
SELECT TOP 3     i.CountryName,     MAX(i.Value) AS HighestValue,     i.Year FROM     Indicators i JOIN     Country c ON i.CountryCode = c.CountryCode WHERE     c.Region = 'Latin America & Caribbean' AND     i.IndicatorName = 'CO2 emissions (kt)' AND     i.Year > 1965 GROUP BY     i.CountryName, i.Year ORDER BY     AVG(i.Value) DESC;
SELECT sn.Description FROM SeriesNotes sn JOIN Series s ON sn.Seriescode = s.SeriesCode WHERE s.SeriesCode = 'SP.DYN.TO65.MA.ZS' AND sn.Year = 'YR1967';
SELECT Description FROM Footnotes WHERE Countrycode = (SELECT CountryCode FROM Country WHERE Country = 'Albania') AND Year = '1981';
SELECT Description FROM Footnotes WHERE Countrycode = (SELECT CountryCode FROM Country WHERE Country = 'The Bahamas') AND Seriescode = 'SH.DTH.IMRT' AND Year = 1984;
SELECT Country.ShortName FROM Indicators JOIN Country ON Indicators.CountryCode = Country.CountryCode WHERE Indicators.IndicatorName = 'Net bilateral aid flows from DAC donors, Sweden (current US$)' AND Indicators.Year = 1970 AND Indicators.Value = 570000;
SELECT c.Wb2Code, c.LendingCategory FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE cn.Description = 'Data source : Human Mortality Database by University of California, Berkeley, and Max Planck Institute for Demographic Research.'
SELECT s.Topic, s.SeriesCode, s.LicenseType FROM Series s JOIN Indicators i ON s.IndicatorName = i.IndicatorName AND s.SeriesCode = i.IndicatorCode WHERE i.CountryName = 'Haiti' AND i.Year = 1961 AND i.Value = 3000000 AND i.IndicatorName = 'Total reserves minus gold (current US$)';
SELECT COUNT(*) FROM (   SELECT i.CountryCode   FROM Indicators i   INNER JOIN Country c ON i.CountryCode = c.CountryCode   WHERE i.IndicatorName = 'Adjusted net national income per capita (constant 2005 US$)'     AND i.Value > 1000     AND c.ExternalDebtReportingStatus = 'Preliminary' ) as temp;
SELECT CountryName FROM Indicators WHERE Year = 1979 AND IndicatorName = 'Fertility rate, total (births per woman)' AND Value BETWEEN 4 AND 5;
SELECT c.TableName, c.SpecialNotes FROM Country c WHERE c.Region = 'South Asia' AND c.IncomeGroup = 'Low income';
SELECT DISTINCT s.Source FROM Series s JOIN Indicators i ON s.IndicatorName = i.IndicatorName AND s.SeriesCode = i.IndicatorCode WHERE s.IndicatorName = 'Out-of-school children of primary school age, both sexes (number)' AND i.CountryName IN (     SELECT c.LongName     FROM Country c     WHERE c.Region = 'Latin America & Caribbean' )
SELECT DISTINCT ft.Description AS Source FROM Footnotes ft JOIN Indicators i ON ft.Countrycode = i.CountryCode AND ft.Seriescode = i.IndicatorCode JOIN Country c ON c.CountryCode = i.CountryCode WHERE c.Region = 'South America' AND i.Year = 2002 AND i.IndicatorName = 'Net migration';
SELECT DISTINCT s.Source FROM Series s JOIN Indicators i ON s.SeriesCode = i.IndicatorCode JOIN Country c ON i.CountryCode = c.CountryCode WHERE s.IndicatorName = 'Out-of-school children of primary school age, both sexes (number)' AND c.Region = 'North America';
SELECT i.CountryName, i.Value AS GDP_Growth_2014 FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE c.LatestTradeData = '2013' AND i.IndicatorName = 'GDP growth (annual %)' AND i.Year = 2014 ORDER BY i.Value ASC;
SELECT TOP 10 T1.CountryName, T1.Value, T3.Description AS Source FROM Indicators AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode JOIN Series AS T3 ON T1.IndicatorName = T3.IndicatorName AND T1.IndicatorCode = T3.SeriesCode WHERE T1.Year = 2005 AND T1.IndicatorName = 'Out-of-pocket health expenditure (% of private expenditure on health)' AND T2.Region = 'Europe' ORDER BY T1.Value DESC;
SELECT COUNT(*) FROM Country WHERE Region = 'South Asia' AND IncomeGroup = 'Low income';
SELECT ShortName FROM Country WHERE LatestTradeData > 2010;
SELECT     (COUNT(CASE WHEN SystemOfTrade = 'Special trade system' THEN CountryCode END) * 100.0 / COUNT(CountryCode)) AS Percentage FROM     Country WHERE     Region = 'Sub-Saharan Africa';
SELECT AVG(Ind.Value) FROM Indicators Ind JOIN Country Ctry ON Ind.CountryCode = Ctry.CountryCode WHERE Ind.IndicatorName = 'Arms imports (SIPRI trend indicator values)' AND Ctry.Region = 'European & Central Asian';
SELECT CountryName, MIN(Value) FROM Indicators WHERE IndicatorName = 'CO2 emissions (kt)' AND CountryCode IN (     SELECT CountryCode     FROM Country     WHERE IncomeGroup = 'Upper middle income' ) GROUP BY CountryName ORDER BY Value ASC LIMIT 1;
SELECT MIN(i.Value) FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'International migrant stock, total' AND c.OtherGroups LIKE '%HIPC%'
SELECT IndicatorName FROM Indicators JOIN Series ON Indicators.IndicatorCode = Series.SeriesCode WHERE Series.Topic = 'Education: Inputs' AND Indicators.Year = 'YR2000';
SELECT COUNT(*) FROM Indicators JOIN Series ON Indicators.IndicatorName = Series.IndicatorName WHERE Series.Periodicity = 'Annual' AND Series.AggregationMethod = 'Sum' AND Indicators.Year IN ('YR2001', 'YR2002', 'YR2003');
Error: 第 2136 个样本有 2 个SQL。
SELECT     (COUNT(CASE WHEN i.IndicatorName = 'Life expectancy at birth, female (years)' AND i.Value > 50 THEN c.CountryCode END) * 100.0 / COUNT(c.CountryCode)) AS percentage FROM     Country c     JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE     c.Region = 'South Asia';
SELECT CountryName, MAX(Value) as MaxDeathRate FROM Indicators WHERE IndicatorName = 'Death rate, crude (per 1,000 people)' AND Year BETWEEN '1960' AND '1965' GROUP BY CountryName ORDER BY MaxDeathRate DESC LIMIT 1;
SELECT IndicatorName FROM Indicators WHERE CountryName = 'Arab World' AND Year = 1960 AND Value > 50;
SELECT CountryName FROM Indicators WHERE IndicatorName = 'Merchandise imports by the reporting economy (current US$)' ORDER BY Value DESC LIMIT 1;
SELECT DISTINCT i.IndicatorName FROM Indicators i JOIN Series s ON i.IndicatorName = s.IndicatorName WHERE i.Year = '1965' AND i.Value > 100 AND s.Periodicity = 'Annual';
SELECT DISTINCT i.IndicatorName FROM Indicators i JOIN Series s ON i.IndicatorName = s.IndicatorName WHERE i.Year BETWEEN '1968' AND '1970' AND i.Value < 100 AND s.LicenseType = 'Open';
SELECT T1.CountryName, T1.IndicatorName FROM Indicators T1 JOIN Series T2 ON T1.IndicatorName = T2.IndicatorName WHERE T2.Topic = 'Private Sector & Trade: Exports' ORDER BY T1.Value DESC LIMIT 1;
SELECT i.IndicatorName, MIN(i.Value) FROM Indicators i JOIN Series s ON i.IndicatorName = s.IndicatorName WHERE s.AggregationMethod = 'Weighted average' GROUP BY i.IndicatorName ORDER BY MIN(i.Value) ASC LIMIT 1;
SELECT DISTINCT Indicators.IndicatorName FROM Indicators JOIN Country ON Indicators.CountryCode = Country.CountryCode WHERE Country.ShortName = 'Sudan' AND Indicators.Year = 1961 AND Series.Periodicity = 'Annual' JOIN Series ON Indicators.IndicatorName = Series.IndicatorName;
SELECT CountryName, MIN(Value) FROM Indicators WHERE Year BETWEEN '1960' AND '1965' AND IndicatorName IN (     SELECT IndicatorName     FROM Series     WHERE Topic LIKE '%Health: Population: Structure%' ) GROUP BY CountryName ORDER BY Value ASC LIMIT 1;
SELECT     (COUNT(CASE WHEN i.IndicatorName = 'CO2 emissions from liquid fuel consumption (% of total)' AND i.Value < 80 THEN c.CountryCode END) * 100.0 /     COUNT(CASE WHEN c.IncomeGroup = 'Upper middle income' THEN c.CountryCode END)) as Percentage FROM     Indicators i JOIN     Country c ON i.CountryCode = c.CountryCode WHERE     c.IncomeGroup = 'Upper middle income'
SELECT IndicatorCode FROM Indicators WHERE IndicatorName = 'Rural population';
Error: 第 2149 个样本有 2 个SQL。
SELECT DISTINCT Series.SeriesCode FROM Series INNER JOIN Indicators ON Series.SeriesCode = Indicators.IndicatorCode INNER JOIN Country ON Country.CountryCode = Indicators.CountryCode WHERE Country.CurrencyUnit = 'Euro';
SELECT c.LongName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorCode IN (     SELECT s.SeriesCode     FROM Series s     WHERE s.SeriesCode = 'DT.DOD.DSTC.CD' );
Error: 第 2152 个样本有 3 个SQL。
SELECT DISTINCT c.TableName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorCode = 'SP.DYN.TO65.MA.ZS'
SELECT CountryName FROM Country WHERE IncomeGroup = 'Low income';
SELECT CountryNotes.Seriescode, CountryNotes.Countrycode FROM CountryNotes JOIN Country ON CountryNotes.Countrycode = Country.CountryCode WHERE Country.Region = 'Latin American & Caribbean' AND Country.IncomeGroup = 'Low income';
Error: 第 2156 个样本有 2 个SQL。
SELECT Country.LongName, Country.Region FROM Country WHERE Country.IncomeGroup = 'Upper middle income' ORDER BY Country.NationalAccountsBaseYear LIMIT 1;
SELECT CountryCode, CountryName FROM Country WHERE IncomeGroup = 'High income' AND CurrencyUnit = 'Euro';
Error: 第 2159 个样本有 2 个SQL。
SELECT CountryName, IndicatorCode FROM Indicators JOIN Country ON Indicators.CountryCode = Country.CountryCode WHERE Country.IncomeGroup = 'High income: nonOECD';
Error: 第 2161 个样本有 2 个SQL。
SELECT CountryCode, ShortName FROM Country LIMIT 10;
SELECT Alpha2Code FROM Country WHERE ShortName LIKE 'A%';
SELECT TableName FROM Country WHERE CurrencyUnit = 'Euro';
SELECT LongName FROM Country WHERE SpecialNotes IS NULL;
SELECT CountryCode, ShortName FROM Country WHERE Region = 'Asia' AND IncomeGroup = 'High income';
SELECT LongName FROM Country WHERE NationalAccountsBaseYear < 1980;
SELECT CountryCode FROM Indicators JOIN Country ON Indicators.CountryCode = Country.CountryCode WHERE IndicatorCode = 'DT.DOD.DECT.CD' AND Country.IncomeGroup = 'Low income';
SELECT T1.TableName FROM Country AS T1 JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = "Covers mainland Tanzania only"
SELECT CN.Description, CN.Seriescode FROM CountryNotes CN JOIN Country C ON CN.Countrycode = C.CountryCode WHERE C.ShortName = 'Benin' AND CN.Year = 'YR2005';
SELECT f.Description FROM Footnotes f JOIN Country c ON f.Countrycode = c.CountryCode WHERE c.ShortName = 'Finland' AND f.Year = 'YR2000';
SELECT DISTINCT Indicators.Year, Country.TableName FROM Indicators JOIN Country ON Indicators.CountryCode = Country.CountryCode WHERE Indicators.IndicatorName = 'Air transport, passengers carried';
SELECT c.LongName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorName IS NOT NULL AND i.Year = '1980';
SELECT c.CurrencyUnit, i.IndicatorCode FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE c.ShortName = 'Malaysia' AND i.Year = '1970';
Error: 第 2175 个样本有 2 个SQL。
SELECT COUNT(*) AS num_countries, c.CurrencyUnit FROM Country AS c JOIN CountryNotes AS cn ON c.CountryCode = cn.Countrycode WHERE cn.Description = 'Sources: UN Energy Statistics (2014)' GROUP BY c.CurrencyUnit;
SELECT COUNT(f.Description) AS NumberOfFootnotes, c.TableName FROM Footnotes f JOIN Country c ON f.Countrycode = c.CountryCode WHERE f.Year = 'YR1980' GROUP BY c.TableName;
SELECT CNTRY.SeriesCode, CTRY.Wb2Code FROM CountryNotes CNTRY JOIN Country CTRY ON CNTRY.Countrycode = CTRY.CountryCode WHERE CNTRY.Description = 'Data sources : Eurostat';
SELECT i.CountryName, i.Value FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND c.IncomeGroup = 'Low income' ORDER BY i.Value ASC LIMIT 1;
SELECT SUM(Value) FROM Indicators WHERE CountryCode IN (     SELECT CountryCode     FROM Country     WHERE IncomeGroup = 'Middle income' ) AND IndicatorName = 'Urban population' AND Year = 1960;
SELECT T1.CountryName, T1.CurrencyUnit FROM Country AS T1 JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Adjusted net national income (annual % growth)' AND T2.Year = 1980 ORDER BY T2.Value DESC LIMIT 1;
SELECT COUNT(*) FROM Country WHERE SystemOfNationalAccounts = '1993 System of National Accounts methodology'
SELECT ShortName FROM Country WHERE VitalRegistrationComplete = 'Yes';
SELECT ShortName, LongName FROM Country WHERE LatestPopulationCensus BETWEEN '2010' AND '2012' AND VitalRegistrationComplete = 'Yes';
SELECT CountryName FROM Indicators WHERE IndicatorName = 'CO2 emissions (metric tons per capita)' AND Year = '1960' ORDER BY Value DESC LIMIT 1;
WITH MaxMinInfantDeaths AS (   SELECT     MAX(Value) AS MaxInfantDeaths,     MIN(Value) AS MinInfantDeaths   FROM Indicators   WHERE IndicatorName = 'Number of infant deaths' AND Year = '1971' ), MaxCountry AS (   SELECT CountryName   FROM Indicators   WHERE IndicatorName = 'Number of infant deaths' AND Year = '1971'   ORDER BY Value DESC   LIMIT 1 ), MinCountry AS (   SELECT CountryName   FROM Indicators   WHERE IndicatorName = 'Number of infant deaths' AND Year = '1971'   ORDER BY Value ASC   LIMIT 1 ) SELECT   (SELECT MaxInfantDeaths FROM MaxMinInfantDeaths) / (SELECT MinInfantDeaths FROM MaxMinInfantDeaths) AS Ratio,   (SELECT CountryName FROM MaxCountry) AS CountryWithHighestInfantDeaths,   (SELECT CountryName FROM MinCountry) AS CountryWithLowestInfantDeaths;
SELECT c.ShortName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorCode = 'SP.DYN.CBRT.IN'
SELECT c.ShortName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE s.Description = 'Data are classified as official aid.'
SELECT Country.LongName FROM Country JOIN CountryNotes ON Country.CountryCode = CountryNotes.Countrycode WHERE CountryNotes.Description = 'Estimates are based on regression.'
SELECT c.LongName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE c.Region = 'East Asia & Pacific' AND i.IndicatorName = 'Urban population' AND i.Year = 1970 AND i.Value > 2000000;
SELECT CountryName, Value FROM Indicators WHERE Year = '1960' AND IndicatorName = 'Population, total' AND CountryCode IN (SELECT CountryCode FROM Country WHERE IncomeGroup = 'Upper middle income') ORDER BY Value DESC LIMIT 1;
SELECT COUNT(*) FROM Country WHERE SystemOfNationalAccounts = '1968 System of National Accounts methodology';
SELECT c.ShortName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN Series s ON i.IndicatorName = s.IndicatorName WHERE c.IncomeGroup = 'Upper middle income' AND c.Region = 'East Asia & Pacific' AND s.Topic = 'Social Protection & Labor: Migration';
SELECT c.LongName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE s.Topic = 'Poverty: Shared Prosperity'
SELECT T1.TableName FROM Country AS T1 JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorCode = 'SP.DYN.CDRT.IN' AND T1.LatestTradeData = '2013'
Error: 第 2196 个样本有 2 个SQL。
Error: 第 2197 个样本有 3 个SQL。
SELECT LongName FROM Country WHERE Region = 'South Asia' AND IncomeGroup = 'Low income';
SELECT LongName FROM Country WHERE SystemOfTrade = 'Special trade system' LIMIT 2;
SELECT CountryName, MAX(Value) as MaxCO2EmissionsFromTransport FROM Indicators WHERE IndicatorName = 'CO2 emissions from transport (% of total fuel combustion)' GROUP BY CountryName ORDER BY MaxCO2EmissionsFromTransport DESC LIMIT 1;
SELECT CountryName FROM Indicators WHERE IndicatorName = 'Arable land (% of land area)' ORDER BY Value ASC LIMIT 1;
SELECT DISTINCT Topic FROM Series WHERE LicenseType = 'Restricted';
SELECT CountryCode FROM Country WHERE IncomeGroup = 'Upper middle income' AND ExternalDebtReportingStatus = 'Preliminary';
SELECT     (COUNT(CASE WHEN c.ExternalDebtReportingStatus = 'Actual' THEN c.CountryCode END) * 100.0 / COUNT(c.CountryCode)) AS Percentage FROM     Country c WHERE     c.Region = 'Middle East & North Africa';
SELECT     gac.GovernmentAccountingConcept,     COUNT(DISTINCT c.CountryCode) AS NumberOfCountries FROM     Country c JOIN     (SELECT         CountryCode,         CASE             WHEN GovernmentAccountingConcept = 'Budgetary central government' THEN 'Budgetary'             WHEN GovernmentAccountingConcept = 'Consolidated central government' THEN 'Consolidated'         END AS GovernmentAccountingConcept     FROM         Country     WHERE         ExternalDebtReportingStatus = 'Actual') gac ON     c.CountryCode = gac.CountryCode GROUP BY     gac.GovernmentAccountingConcept;
SELECT COUNT(*) FROM Country WHERE Region = 'East Asia & Pacific' AND ExternalDebtReportingStatus = 'Estimate';
SELECT (COUNT(CASE WHEN IncomeGroup = 'Lower middle income' THEN CountryCode END) * 100.0 / COUNT(CountryCode)) AS Proportion FROM Country WHERE Region = 'Sub-Saharan Africa';
SELECT MAX(Value) FROM Indicators WHERE Year BETWEEN '1961' AND '1980' AND IndicatorName = 'Agricultural land (% of land area)' AND CountryLongName = 'Republic of Benin';
SELECT c.LongName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode JOIN Series s ON i.IndicatorName = s.IndicatorName JOIN SeriesNotes sn ON s.SeriesCode = sn.Seriescode WHERE sn.Year = 2014 AND sn.Description = 'UN Energy Statistics' LIMIT 3;
SELECT Value FROM Indicators JOIN Country ON Indicators.CountryCode = Country.CountryCode WHERE IndicatorName = 'Deposit interest rate (%)' AND Country.LongName = 'Commonwealth of Australia' AND Year = '1979';
SELECT c.CountryCode, cn.SeriesCode, cn.Description FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE c.ShortName = 'Germany';
SELECT Series.Topic FROM Country JOIN Indicators ON Country.CountryCode = Indicators.CountryCode JOIN Series ON Series.SeriesCode = Indicators.IndicatorCode WHERE Country.ShortName = 'Austria' GROUP BY Series.Topic;
SELECT s.Topic, cn.Description FROM Series s JOIN CountryNotes cn ON s.SeriesCode = cn.Seriescode WHERE s.SeriesCode = 'SP.DYN.AMRT.MA';
Error: 第 2214 个样本有 2 个SQL。
SELECT c.CountryName FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE c.ExternalDebtReportingStatus = 'Actual' AND i.Year = 1980 AND i.Value = 3018500 AND i.IndicatorName = 'Land under cereal production';
SELECT (COUNT(I.CountryCode) * 100.0 / (SELECT COUNT(*) FROM Country WHERE Region = 'Latin America & Caribbean')) AS portion FROM Country C JOIN Indicators I ON C.CountryCode = I.CountryCode WHERE C.Region = 'Latin America & Caribbean' AND I.IndicatorName = 'Agricultural land (% of land area)' AND I.Year = '1961' AND I.Value > 50;
SELECT LongName FROM Country WHERE Region = 'South Asia' AND IncomeGroup = 'Low income';
SELECT IndicatorCode FROM Indicators WHERE CountryName = 'Brazil' AND IndicatorName = 'Mobile cellular subscriptions';
SELECT COUNT(*) AS country_count, GROUP_CONCAT(LongName) AS countries FROM Country WHERE Region = 'Europe & Central Asia' AND CurrencyUnit = 'Danish krone';
SELECT CountryName, Value FROM Indicators WHERE IndicatorName = 'Rural population (% of total population)' ORDER BY Value DESC LIMIT 1;
SELECT LongName FROM Country WHERE LatestPopulationCensus = '2011';
SELECT Value FROM Indicators WHERE CountryName = 'Italy' AND IndicatorName = 'Agricultural land (sq. km)' AND Year = '1968';
SELECT i.Year, MAX(i.Value) as MaxFemaleOutOfSchool FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'Out-of-school children of primary school age, female (number)' AND c.Region = 'Sub-Saharan Africa' GROUP BY i.Year ORDER BY MaxFemaleOutOfSchool DESC LIMIT 1;
SELECT i.IndicatorCode FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'Number of infant deaths' AND i.Year = 1965 AND c.LongName = 'Islamic State of Afghanistan'
SELECT COUNT(*) AS num_countries, MAX(i.Value) AS max_co2_emissions, c.ShortName AS country_name FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE c.SystemOfNationalAccounts = '1968 System of National Accounts methodology' AND c.Region = 'Middle East & North Africa' AND i.IndicatorName = 'CO2 emissions from solid fuel consumption (kt)' GROUP BY c.ShortName ORDER BY i.Value DESC LIMIT 1;
SELECT IndicatorCode FROM Indicators WHERE CountryName = 'Republic of Albania' AND Year = '1960';
SELECT T1.LendingCategory FROM Country AS T1 JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Cereal production (metric tons)' AND T2.Year = '1966' AND T2.Value = 6140000;
SELECT T1.CountryName, T1.Region FROM Country AS T1 JOIN (     SELECT CountryCode, MAX(Value) AS MaxPop     FROM Indicators     WHERE IndicatorName = 'Population in largest city'     AND Year BETWEEN '1960' AND '1979'     GROUP BY CountryCode ) AS T2 ON T1.CountryCode = T2.CountryCode WHERE (     SELECT COUNT(*)     FROM Indicators AS T3     WHERE T3.CountryCode = T2.CountryCode     AND T3.IndicatorName = 'Population in largest city'     AND T3.Value = T2.MaxPop     AND T3.Year BETWEEN '1960' AND '1979' ) = 19 ORDER BY T2.MaxPop DESC LIMIT 1;
SELECT Year, SUM(Value) as Total_CO2_Emmisions FROM Indicators WHERE IndicatorName LIKE 'CO2%' AND Year BETWEEN 1975 AND 1980 GROUP BY Year ORDER BY Total_CO2_Emmisions DESC LIMIT 1;
SELECT     I1.CountryName,     I1.Value AS LandArea,     C.IncomeGroup FROM     Indicators I1 JOIN     Country C ON I1.CountryCode = C.CountryCode WHERE     I1.IndicatorName = 'Land area (sq. km)'     AND I1.Year BETWEEN 1961 AND 1979     AND NOT EXISTS (         SELECT 1 FROM Indicators I2         WHERE             I2.IndicatorName = 'Land area (sq. km)'             AND I2.Year BETWEEN 1961 AND 1979             AND I2.CountryCode = I1.CountryCode             AND I2.Value < I1.Value     ) GROUP BY     I1.CountryName,     C.IncomeGroup HAVING     COUNT(*) = 19
SELECT AVG(i.Value), c.SystemOfTrade FROM Indicators i JOIN Country c ON i.CountryCode = c.CountryCode WHERE i.IndicatorName = 'Air transport, passengers carried' AND i.CountryName = 'Bulgaria' AND i.Year BETWEEN 1970 AND 1980;
SELECT PppSurveyYear FROM Country WHERE ShortName = 'Angola';
SELECT COUNT(*) FROM Country WHERE Region = 'North America' AND VitalRegistrationComplete = 'Yes';
SELECT Year FROM Indicators WHERE CountryCode = (SELECT CountryCode FROM Country WHERE Alpha2Code = '1A') AND IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)';
SELECT C.LongName FROM Country C JOIN Indicators I ON C.CountryCode = I.CountryCode WHERE I.IndicatorName = 'Arms exports (SIPRI trend indicator values)' AND I.Year = 1960 AND I.Value = 3000000;
SELECT DISTINCT c.Alpha2Code FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorName = 'Rural population' AND i.Year = '1960';
SELECT c.SpecialNotes FROM Country c JOIN Indicators i ON c.CountryCode = i.CountryCode WHERE i.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND i.Year = 1960 ORDER BY i.Value DESC LIMIT 1;
SELECT (SELECT Value FROM Indicators WHERE CountryCode = (SELECT CountryCode FROM Country WHERE Alpha2Code = '1A') AND IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%' AND Year = 1961) - (SELECT Value FROM Indicators WHERE CountryCode = (SELECT CountryCode FROM Country WHERE Alpha2Code = '1A') AND IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%' AND Year = 1960) AS Increase_in_Adol_Fert_Rate;
SELECT CN.Description FROM CountryNotes CN JOIN Country C ON CN.Countrycode = C.CountryCode WHERE C.ShortName = 'Australia' AND CN.Seriescode = 'SP.ADO.TFRT';
SELECT cn.Description FROM CountryNotes cn JOIN Country c ON cn.Countrycode = c.CountryCode JOIN Series s ON cn.Seriescode = s.SeriesCode WHERE c.ShortName = 'Aruba' AND s.Topic = 'Environment: Energy production & use'
SELECT DISTINCT c.CountryName FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode WHERE cn.Seriescode = 'BX.KLT.DINV.CD.WD';
SELECT c.Region FROM Country c JOIN CountryNotes cn ON c.CountryCode = cn.Countrycode JOIN Indicators i ON c.CountryCode = i.CountryCode AND i.IndicatorName = 'Inflation, consumer prices (annual %)' WHERE cn.Seriescode = i.IndicatorCode
SELECT COUNT(*) FROM CountryNotes JOIN Indicators ON CountryNotes.Countrycode = Indicators.CountryCode WHERE Indicators.IndicatorName = 'Stocks traded, turnover ratio of domestic shares (%)'
SELECT s.AggregationMethod FROM Indicators i JOIN Series s ON i.IndicatorCode = s.SeriesCode WHERE i.CountryName = 'Arab World' AND i.Year = 1960 AND i.Value = 133;
SELECT Value FROM Indicators WHERE IndicatorName = (     SELECT IndicatorName     FROM Series     WHERE LongDefinition = "Adolescent fertility rate is the number of births per 1,000 women ages 15-19." ) AND CountryName = 'Arab World' AND Year = 1960;
SELECT ((t2.Value - t1.Value) / t1.Value * 100) AS PercentageIncrease FROM (     SELECT Value     FROM Indicators     WHERE CountryCode = '1A' AND IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND Year = 1960 ) t1, (     SELECT Value     FROM Indicators     WHERE CountryCode = '1A' AND IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND Year = 1961 ) t2;
SELECT AVG(Value) FROM Indicators WHERE IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND CountryCode = (SELECT CountryCode FROM Country WHERE Alpha2Code = '1A')
SELECT DISTINCT T2.directorid FROM u2base AS T1 JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating > 4
SELECT COUNT(*) FROM users WHERE userid IN (SELECT userid FROM u2base WHERE rating = 5) AND u_gender = 'M';
SELECT T3.genre FROM movies2actors AS T1 JOIN movies AS T2 ON T1.movieid = T2.movieid JOIN movies2directors AS T3 ON T2.movieid = T3.movieid WHERE T1.actorid = 851 AND T1.cast_num = 1;
SELECT COUNT(*) FROM movies m JOIN u2base u ON m.movieid = u.movieid WHERE m.country = 'USA' AND u.rating < 3;
SELECT COUNT(*) FROM movies m JOIN movies2directors md ON m.movieid = md.movieid WHERE m.country = 'France' AND md.genre = 'drama';
SELECT AVG(u_occupation) FROM users WHERE userid IN (     SELECT userid     FROM u2base     WHERE rating <= 2 );
SELECT m.movieid, AVG(u2b.rating) as avg_rating FROM movies m JOIN u2base u2b ON m.movieid = u2b.movieid WHERE m.country = 'USA' GROUP BY m.movieid ORDER BY avg_rating DESC LIMIT 10;
SELECT AVG(T3.cast_num) FROM movies AS T1 JOIN movies2actors AS T3 ON T1.movieid = T3.movieid WHERE T1.country = 'USA';
SELECT m.movieid, m.country FROM movies m WHERE m.isEnglish = 'F' AND m.country <> 'USA' ORDER BY m.movieid LIMIT 5;
SELECT COUNT(*) FROM (   SELECT a.actorid   FROM actors a   JOIN movies2actors m2a ON a.actorid = m2a.actorid   JOIN u2base u ON m2a.movieid = u.movieid   WHERE a.a_quality = 'best' AND u.rating = 5 ) as t;
SELECT AVG(u2base.rating) FROM u2base JOIN movies ON u2base.movieid = movies.movieid WHERE movies.country = 'France' AND movies.year = 4;
SELECT COUNT(*) FROM (   SELECT movieid   FROM u2base   GROUP BY movieid   ORDER BY COUNT(rating) DESC ) AS most_rated_movies JOIN movies ON most_rated_movies.movieid = movies.movieid WHERE country = 'UK' AND runningtime < 2;
SELECT u.userid FROM users u JOIN u2base ub ON u.userid = ub.userid JOIN movies m ON ub.movieid = m.movieid WHERE u.u_gender = 'M' AND ub.rating < 3 AND m.country = 'France' AND m.runningtime = 2;
SELECT COUNT(*) FROM (   SELECT A.actorid   FROM actors A   INNER JOIN movies2actors M2A ON A.actorid = M2A.actorid   INNER JOIN u2base U ON M2A.movieid = U.movieid   WHERE A.a_quality = (SELECT MIN(a_quality) FROM actors)   AND U.rating > 3 ) AS T;
SELECT userid FROM u2base WHERE rating = 5 GROUP BY userid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T3.actorid, T2.genre FROM movies2directors AS T1 JOIN movies2actors AS T3 ON T1.movieid = T3.movieid JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T1.directorid = 22397;
SELECT DISTINCT a.actorid, d.directorid FROM actors a JOIN movies2actors m2a ON a.actorid = m2a.actorid JOIN movies2directors m2d ON m2a.movieid = m2d.movieid JOIN directors d ON m2d.directorid = d.directorid WHERE m2d.genre = 'action';
SELECT COUNT(*) FROM actors JOIN movies2actors ON actors.actorid = movies2actors.actorid JOIN movies ON movies.movieid = movies2actors.movieid WHERE actors.a_gender = 'F' AND movies.year = 4;
SELECT a.actorid FROM actors a JOIN movies2actors ma ON a.actorid = ma.actorid JOIN movies m ON ma.movieid = m.movieid WHERE a.a_quality = 3 AND m.isEnglish = 'T' AND m.country = 'USA';
SELECT m.movieid FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN directors d ON md.directorid = d.directorid WHERE m.runningtime = 3 AND d.avg_revenue = 1;
SELECT DISTINCT m.genre FROM movies m JOIN movies2directors md ON m.movieid = md.movieid WHERE m.country = 'UK'
SELECT T3.genre, AVG(T5.rating) as average_rating FROM movies AS T1 JOIN movies2directors AS T2 ON T1.movieid = T2.movieid JOIN directors AS T3 ON T2.directorid = T3.directorid JOIN u2base AS T4 ON T1.movieid = T4.movieid JOIN users AS T5 ON T4.userid = T5.userid WHERE T5.age = 18 GROUP BY T3.genre ORDER BY average_rating DESC LIMIT 1;
SELECT T3.actorid FROM (     SELECT T1.userid, COUNT(T1.movieid) as view_count     FROM u2base AS T1     WHERE T1.userid IN (         SELECT userid FROM users WHERE occupation = 5     )     GROUP BY T1.userid ) AS T2 JOIN u2base AS T4 ON T2.userid = T4.userid JOIN movies2actors AS T3 ON T4.movieid = T3.movieid GROUP BY T3.actorid ORDER BY COUNT(T3.movieid) DESC LIMIT 1;
SELECT DISTINCT u.age FROM users u JOIN u2base ub ON u.userid = ub.userid JOIN movies m ON ub.movieid = m.movieid WHERE ub.rating = 3;
SELECT T3.country, COUNT(*) AS num_action_movies FROM movies2directors AS T1 JOIN directors AS T2 ON T1.directorid = T2.directorid JOIN movies AS T3 ON T1.movieid = T3.movieid WHERE T3.genre = 'Action' GROUP BY T3.country ORDER BY num_action_movies DESC LIMIT 1;
SELECT m.movieid FROM (     SELECT actorid, AVG(rating) as actor_rating     FROM u2base     JOIN movies2actors m2a ON u2base.movieid = m2a.movieid     GROUP BY actorid     ORDER BY actor_rating DESC     LIMIT 5) top_actors JOIN movies2actors m2a ON top_actors.actorid = m2a.actorid JOIN movies m ON m2a.movieid = m.movieid GROUP BY m.movieid;
SELECT m.movieid FROM movies m JOIN movies2directors md ON m.movieid = md.movieid WHERE m.country = 'UK' AND m.isEnglish = 'F' AND md.genre = 'Adventure' LIMIT 5;
SELECT     (COUNT(CASE WHEN u.u_gender = 'F' THEN 1 END) * 100.0 / COUNT(u.userid)) AS female_audience_percentage FROM     u2base ub JOIN     users u ON ub.userid = u.userid WHERE     ub.rating = 2;
SELECT     (SELECT COUNT(u_userid) FROM u2base JOIN users ON u2base.u_userid = users.userid WHERE u_movieid IN (SELECT m2d_movieid FROM movies2directors WHERE m2d_genre = 'horror') AND users.u_gender = 'F') -     (SELECT COUNT(u_userid) FROM u2base JOIN users ON u2base.u_userid = users.userid WHERE u_movieid IN (SELECT m2d_movieid FROM movies2directors WHERE m2d_genre = 'horror') AND users.u_gender = 'M')
Error: 第 2277 个样本有 2 个SQL。
SELECT COUNT(*) FROM movies WHERE country = 'USA' AND isEnglish = 'F' AND movieid IN (     SELECT movieid     FROM movies2directors     WHERE genre = 'action' );
SELECT COUNT(*) FROM u2base ub JOIN users u ON ub.userid = u.userid WHERE u.u_gender = 'M' AND u.age <= 18 AND ub.rating = (SELECT MAX(rating) FROM u2base);
SELECT T2.movieid FROM u2base AS T1 JOIN movies AS T2 ON T1.movieid = T2.movieid JOIN users AS T3 ON T1.userid = T3.userid WHERE T3.u_gender = 'F' GROUP BY T2.movieid ORDER BY COUNT(T1.rating) DESC LIMIT 1;
SELECT COUNT(*) FROM (   SELECT m.movieid   FROM movies m   JOIN movies2directors md ON m.movieid = md.movieid   JOIN u2base r ON m.movieid = r.movieid   WHERE m.country = 'UK' AND m.year IN (     SELECT year     FROM movies     WHERE genre = 'divergent'   )   GROUP BY m.movieid   HAVING AVG(r.rating) = (     SELECT MAX(avg_rating)     FROM (       SELECT AVG(rating) as avg_rating       FROM u2base       JOIN movies ON u2base.movieid = movies.movieid       WHERE genre = 'divergent'       GROUP BY year     ) t   ) ) t;
SELECT DISTINCT m.movieid FROM movies m JOIN u2base ub ON m.movieid = ub.movieid WHERE m.year = 4 AND ub.rating = 1;
SELECT COUNT(*) FROM (   SELECT movieid   FROM movies   WHERE isEnglish = 'T' AND year = 1 ) AS oldest_english_movies JOIN u2base ON oldest_english_movies.movieid = u2base.movieid WHERE u2base.rating = 1;
SELECT COUNT(DISTINCT u.userid) FROM users u JOIN u2base ub ON u.userid = ub.userid JOIN movies m ON ub.movieid = m.movieid WHERE u.u_gender = 'F' AND m.country = 'France';
SELECT COUNT(DISTINCT T1.directorid) FROM directors AS T1 JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 4 AND T2.genre = 'action';
SELECT T3.genre FROM directors AS T1 JOIN movies2directors AS T2 ON T1.directorid = T2.directorid JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.avg_revenue = (SELECT MAX(avg_revenue) FROM directors)
SELECT COUNT(DISTINCT T3.movieid) FROM actors AS T1 JOIN movies2actors AS T2 ON T1.actorid = T2.actorid JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.a_gender = 'M' AND T1.a_quality = (SELECT MAX(a_quality) FROM actors WHERE a_gender = 'M') AND T3.isEnglish = 'T'
SELECT DISTINCT T3.country FROM actors AS T1 JOIN movies2actors AS T2 ON T1.actorid = T2.actorid JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.a_gender = 'F' AND T1.a_quality = 0;
SELECT AVG(T3.rating) AS average_rating FROM movies AS T1 JOIN movies2directors AS T2 ON T1.movieid = T2.movieid JOIN u2base AS T3 ON T1.movieid = T3.movieid WHERE T1.country = 'USA' AND T2.genre = 'action' GROUP BY T1.movieid ORDER BY average_rating DESC LIMIT 1
SELECT COUNT(*) FROM (     SELECT m.movieid     FROM movies m     INNER JOIN movies2directors md ON m.movieid = md.movieid     INNER JOIN directors d ON md.directorid = d.directorid     INNER JOIN u2base u ON m.movieid = u.movieid     WHERE d.d_quality = 5     GROUP BY m.movieid     HAVING AVG(u.rating) > 3.5 ) as T;
SELECT m.movieid, AVG(u2b.rating) as avg_rating FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN u2base u2b ON m.movieid = u2b.movieid WHERE m.country = 'USA' AND m.runningtime > 120 AND m.year = 2000 AND md.genre = 'adventure' GROUP BY m.movieid ORDER BY avg_rating DESC LIMIT 1;
SELECT COUNT(*) FROM users u JOIN u2base ub ON u.userid = ub.userid WHERE ub.movieid = 2462959 AND u.u_gender = 'F';
SELECT m.movieid FROM movies m JOIN u2base u ON m.movieid = u.movieid WHERE m.runningtime = 0 GROUP BY m.movieid ORDER BY COUNT(DISTINCT u.rating) DESC LIMIT 1
SELECT T3.actorid, T4.rating FROM movies2actors AS T1 JOIN movies AS T2 ON T1.movieid = T2.movieid JOIN actors AS T3 ON T1.actorid = T3.actorid JOIN u2base AS T4 ON T4.movieid = T2.movieid WHERE T2.movieid = 1722327;
SELECT d.directorid, d.d_quality, COUNT(m.movieid) as total_movies FROM directors d JOIN movies2directors md ON d.directorid = md.directorid JOIN movies m ON md.movieid = m.movieid WHERE d.d_quality = 5 GROUP BY d.directorid ORDER BY total_movies DESC LIMIT 1;
Error: 第 2296 个样本有 2 个SQL。
SELECT COUNT(*) FROM u2base ub JOIN movies m ON ub.movieid = m.movieid JOIN users u ON ub.userid = u.userid WHERE ub.rating = 5 AND u.age BETWEEN 25 AND 35;
SELECT m.movieid, m.title FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN u2base u ON m.movieid = u.movieid WHERE md.genre = 'horror' AND u.rating = 1;
SELECT DISTINCT d.directorid FROM movies2directors d JOIN movies m ON d.movieid = m.movieid WHERE m.country = 'France';
SELECT users.userid, users.age FROM users JOIN u2base ON users.userid = u2base.userid WHERE u2base.movieid = 1695219;
SELECT T.genre, COUNT(*) AS num_movies FROM (     SELECT m.movieid, m2d.genre     FROM movies m     JOIN movies2directors m2d ON m.movieid = m2d.movieid     WHERE m.isEnglish = 'F' ) T GROUP BY T.genre ORDER BY num_movies DESC LIMIT 1;
SELECT T3.actorid, T4.directorid FROM movies AS T1 JOIN movies2actors AS T2 ON T1.movieid = T2.movieid JOIN actors AS T3 ON T2.actorid = T3.actorid JOIN movies2directors AS T5 ON T1.movieid = T5.movieid JOIN directors AS T4 ON T5.directorid = T4.directorid WHERE T1.movieid = 1949144;
SELECT     COUNT(CASE WHEN T5.rating >= 3 THEN 1 END) * 100.0 / COUNT(T5.actorid) AS percentage FROM     actors AS T1 JOIN     movies2actors AS T2 ON T1.actorid = T2.actorid JOIN     movies AS T3 ON T2.movieid = T3.movieid JOIN     u2base AS T5 ON T3.movieid = T5.movieid WHERE     T3.country = 'UK'
SELECT     COUNT(*) * 100.0 / (SELECT COUNT(*) FROM directors) AS proportion FROM     directors WHERE     directorid IN (         SELECT             directorid         FROM             movies2directors         WHERE             genre = 'action'     ) AND avg_revenue > d_quality;
SELECT actorid FROM movies2actors WHERE movieid IN (     SELECT movieid     FROM movies     WHERE year = 4 ) GROUP BY actorid;
SELECT T3.actorid FROM movies AS T1 JOIN movies2actors AS T2 ON T1.movieid = T2.movieid JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T1.isEnglish = 'T' AND T1.runningtime = 2;
SELECT actorid FROM movies2actors WHERE movieid IN (     SELECT movieid     FROM movies     WHERE country = 'France' ) GROUP BY actorid HAVING COUNT(movieid) >= 2;
SELECT COUNT(*) FROM movies m JOIN movies2actors ma ON m.movieid = ma.movieid WHERE m.country = 'USA' AND ma.cast_num > 1;
Error: 第 2309 个样本有 2 个SQL。
SELECT COUNT(DISTINCT actorid) FROM (     SELECT actorid     FROM movies2actors m2a     JOIN movies m ON m2a.movieid = m.movieid     WHERE m.country = 'US'     INTERSECT     SELECT actorid     FROM movies2actors m2a     JOIN movies m ON m2a.movieid = m.movieid     WHERE m.country = 'UK' ) AS result;
SELECT COUNT(DISTINCT d.directorid) FROM directors d JOIN movies2directors m2d ON d.directorid = m2d.directorid JOIN movies m ON m2d.movieid = m.movieid WHERE d.avg_revenue = 4 AND (m.genre = 'action' OR m.genre = 'adventure');
SELECT T1.directorid FROM directors AS T1 JOIN movies2directors AS T2 ON T1.directorid = T2.directorid GROUP BY T1.directorid HAVING COUNT(DISTINCT T2.genre) >= 2 AND T1.d_quality >= 3;
SELECT COUNT(*) FROM movies m JOIN movies2directors md ON m.movieid = md.movieid WHERE m.country = 'USA' AND md.genre = 'comedy';
SELECT COUNT(*) FROM (   SELECT movieid   FROM movies   WHERE year = (SELECT MAX(year) FROM movies)   AND movieid IN (     SELECT movieid     FROM movies2directors     WHERE genre = 'Drama'     UNION     SELECT movieid     FROM movies2directors     WHERE genre = 'Action'   ) )
Error: 第 2315 个样本有 2 个SQL。
SELECT     (COUNT(CASE WHEN u2base.rating = 1 THEN 1 END) / COUNT(u2base.movieid)) * 100 AS NegativeCriticalReception FROM     u2base JOIN     movies ON u2base.movieid = movies.movieid WHERE     movies.country = 'USA';
SELECT COUNT(DISTINCT m.movieid) FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN u2base ub ON m.movieid = ub.movieid WHERE md.genre = 'comedy' AND ub.rating = 1;
SELECT AVG(T2.avg_revenue) AS diff_avg_revenue FROM (   SELECT T5.directorid   FROM u2base AS T1   JOIN movies AS T3 ON T1.movieid = T3.movieid   JOIN movies2directors AS T4 ON T3.movieid = T4.movieid   JOIN directors AS T2 ON T4.directorid = T2.directorid   WHERE T1.rating = 1   GROUP BY T5.directorid   ORDER BY COUNT(*) DESC   LIMIT 1 ) AS T6 JOIN directors AS T2 ON T6.directorid = T2.directorid
SELECT COUNT(*) FROM (   SELECT m.movieid   FROM movies m   WHERE m.country = 'France'   GROUP BY m.movieid   HAVING MAX(u2b.rating) = (     SELECT MAX(rating)     FROM u2base   ) ) AS french_movies_with_highest_ranking;
SELECT m.movieid, COUNT(u2b.rating) as rating_count FROM u2base u2b JOIN movies m ON u2b.movieid = m.movieid JOIN users u ON u2b.userid = u.userid WHERE u.age = 25 GROUP BY m.movieid ORDER BY rating_count DESC LIMIT 1;
SELECT COUNT(DISTINCT u.userid) FROM users u JOIN u2base ub ON u.userid = ub.userid JOIN movies m ON ub.movieid = m.movieid WHERE u.age = 35 AND m.country = 'UK';
SELECT U.userid, U.age FROM users U JOIN u2base UB ON U.userid = UB.userid WHERE UB.movieid = 2409051 AND UB.rating = 2;
SELECT T1.movieid FROM (     SELECT movieid, MIN(year) as min_year FROM movies WHERE year >= 1 GROUP BY year ) AS T1 JOIN u2base AS T2 ON T1.movieid = T2.movieid GROUP BY T1.movieid ORDER BY COUNT(T2.rating) DESC LIMIT 1;
SELECT DISTINCT m.movieid, m.title FROM movies m JOIN u2base u ON m.movieid = u.movieid WHERE m.country = 'France' GROUP BY m.movieid, m.title ORDER BY AVG(u.rating) ASC LIMIT 1;
SELECT COUNT(*) FROM actors JOIN movies2actors ON actors.actorid = movies2actors.actorid JOIN movies ON movies.movieid = movies2actors.movieid WHERE actors.a_gender = 'F' AND (movies.country = 'France' OR movies.country = 'USA');
SELECT COUNT(DISTINCT T3.actorid) FROM u2base AS T1 JOIN movies AS T2 ON T1.movieid = T2.movieid JOIN movies2actors AS T3 ON T2.movieid = T3.movieid WHERE T1.rating = 5 GROUP BY T2.movieid ORDER BY COUNT(DISTINCT T3.actorid) DESC LIMIT 1;
SELECT T1.movieid, AVG(T3.rating) as avg_rating FROM movies AS T1 JOIN movies2directors AS T2 ON T1.movieid = T2.movieid JOIN u2base AS T3 ON T1.movieid = T3.movieid WHERE T2.genre = 'Crime' GROUP BY T1.movieid ORDER BY avg_rating ASC LIMIT 1;
SELECT     (COUNT(CASE WHEN a.a_gender = 'M' THEN 1 END) * 1.0) /     COUNT(CASE WHEN a.a_gender = 'F' THEN 1 END) AS gender_ratio FROM     actors a JOIN     movies2actors ma ON a.actorid = ma.actorid JOIN     movies m ON ma.movieid = m.movieid WHERE     m.country = 'UK';
SELECT COUNT(*) FROM u2base ub JOIN users u ON ub.userid = u.userid WHERE u.age = 35 AND u.u_gender = 'F' AND ub.movieid = 1711133 AND ub.rating = 3;
SELECT COUNT(*) FROM u2base ub JOIN movies m ON ub.movieid = m.movieid WHERE ub.rating = 1 AND m.country = 'UK' AND m.runningtime = 2 AND m.year = (SELECT MIN(year) + 1 FROM movies WHERE country = 'UK' AND runningtime = 2);
SELECT COUNT(DISTINCT T1.directorid) FROM directors AS T1 JOIN movies2directors AS T2 ON T1.directorid = T2.directorid JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.avg_revenue = 2 AND T1.d_quality = 3 AND T3.genre != 'comedy'
SELECT     (COUNT(CASE WHEN ma.cast_num = 2 AND a.a_quality = 2 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM     movies2actors ma JOIN     actors a ON ma.actorid = a.actorid WHERE     ma.movieid = 1672580 AND a.a_gender = 'F';
Error: 第 2333 个样本有 2 个SQL。
SELECT actorid FROM movies2actors GROUP BY actorid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T3.genre, COUNT(T3.genre) AS count_genre FROM movies2directors AS T1 JOIN movies AS T2 ON T1.movieid = T2.movieid JOIN (     SELECT movieid, directorid     FROM movies2directors     GROUP BY directorid ) AS T4 ON T1.movieid = T4.movieid AND T1.directorid = T4.directorid JOIN (     SELECT directorid, genre     FROM movies2directors     JOIN movies ON movies2directors.movieid = movies.movieid     GROUP BY directorid, genre ) AS T3 ON T4.directorid = T3.directorid GROUP BY T3.genre ORDER BY count_genre DESC LIMIT 1;
SELECT genre, COUNT(*) as count FROM movies2directors JOIN directors ON movies2directors.directorid = directors.directorid JOIN movies ON movies2directors.movieid = movies.movieid WHERE directors.d_quality = 0 GROUP BY genre ORDER BY count DESC LIMIT 1;
SELECT T1.movieid, MIN(T3.rating) AS min_rating FROM movies AS T1 JOIN u2base AS T3 ON T1.movieid = T3.movieid WHERE T1.country = 'USA' AND T1.isEnglish = 'F' GROUP BY T1.movieid ORDER BY min_rating ASC LIMIT 1;
SELECT AVG(T3.rating) FROM (     SELECT T1.movieid     FROM movies2directors AS T1     JOIN directors AS T2 ON T1.directorid = T2.directorid     WHERE T2.d_quality = 4 AND T2.avg_revenue = 4 ) AS T3 JOIN u2base AS T4 ON T3.movieid = T4.movieid;
SELECT m.movieid, m.title FROM movies m JOIN u2base ub ON m.movieid = ub.movieid JOIN users u ON ub.userid = u.userid WHERE u.u_gender = 'F' AND u.occupation = 3 GROUP BY m.movieid ORDER BY AVG(ub.rating) DESC LIMIT 10;
SELECT COUNT(*), T4.country, T4.runningtime FROM actors AS T1 JOIN movies2actors AS T2 ON T1.actorid = T2.actorid JOIN movies AS T4 ON T2.movieid = T4.movieid WHERE T1.a_gender = 'F' AND T2.movieid = 2312852;
SELECT COUNT(*) FROM movies m JOIN movies2directors md ON m.movieid = md.movieid JOIN directors d ON md.directorid = d.directorid WHERE genre = 'horror' AND d_quality = 0;
SELECT DISTINCT m2d.genre FROM movies AS m JOIN movies2directors AS m2d ON m.movieid = m2d.movieid WHERE m.isEnglish = 'T' AND m.runningtime <= 120 AND m.country <> 'USA';
Error: 第 2343 个样本有 2 个SQL。
SELECT     ((SUM(CASE WHEN m.isEnglish = 'T' THEN 1 ELSE 0 END) - SUM(CASE WHEN m.isEnglish = 'F' THEN 1 ELSE 0 END)) / COUNT(m.movieid)) * 100 AS percentage_difference FROM     movies m JOIN     movies2directors md ON m.movieid = md.movieid WHERE     m.year = 3 AND m.country != 'US' AND md.genre = 'Crime';
SELECT     SUM(CASE WHEN a_gender = 'F' THEN 1 ELSE 0 END) AS Total_Female_Actors,     SUM(CASE WHEN a_gender = 'M' THEN 1 ELSE 0 END) AS Total_Male_Actors,     (SUM(CASE WHEN a_quality = 5 THEN 1 ELSE 0 END) * 100.0 /      SUM(CASE WHEN a_quality = 0 THEN 1 ELSE 0 END)) AS Proportion_Best_to_Worst_Actors,     d_quality,     genre FROM     movies2actors m2a JOIN     actors a ON m2a.actorid = a.actorid JOIN     movies2directors m2d ON m2a.movieid = m2d.movieid JOIN     directors d ON m2d.directorid = d.directorid WHERE     m2a.movieid = 1684910;
SELECT p.Product_Name FROM product p JOIN central_superstore cs ON p.Product_ID = cs.Product_ID WHERE cs.Order_ID = 'CA-2011-112326' AND cs.Region = 'Central';
SELECT MAX(strftime('%j', T.Ship_Date) - strftime('%j', T.Order_Date)) AS LongestShipmentTime FROM (     SELECT * FROM central_superstore     UNION ALL     SELECT * FROM east_superstore     UNION ALL     SELECT * FROM south_superstore     UNION ALL     SELECT * FROM west_superstore ) AS T JOIN people ON T.Customer_ID = people.Customer_ID WHERE people.Customer_Name = 'Aimee Bixby'
SELECT COUNT(*) FROM (     SELECT *     FROM central_superstore     UNION ALL     SELECT *     FROM east_superstore     UNION ALL     SELECT *     FROM south_superstore     UNION ALL     SELECT *     FROM west_superstore ) AS combined_superstore JOIN people ON combined_superstore.Customer_ID = people.Customer_ID WHERE people.Customer_Name = 'Aimee Bixby' AND combined_superstore.Ship_Mode = 'Standard Class'
SELECT COUNT(DISTINCT T1.Order_ID) FROM (     SELECT * FROM central_superstore     UNION     SELECT * FROM east_superstore     UNION     SELECT * FROM south_superstore     UNION     SELECT * FROM west_superstore ) AS T1 JOIN people AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.`Customer Name` = 'Aimee Bixby';
SELECT T1.OrderID FROM (     SELECT OrderID, COUNT(DISTINCT ProductID) as ProductCount     FROM (         SELECT cs.OrderID, p.ProductID         FROM (             SELECT OrderID             FROM central_superstore             UNION             SELECT OrderID             FROM east_superstore             UNION             SELECT OrderID             FROM south_superstore             UNION             SELECT OrderID             FROM west_superstore         ) AS all_orders         JOIN people AS p ON all_orders.CustomerID = p.CustomerID         WHERE p.CustomerName = 'Aimee Bixby'     ) AS joined_table     GROUP BY OrderID ) AS T1 WHERE T1.ProductCount > 3;
SELECT COUNT(DISTINCT T3.OrderID) FROM people AS T1 JOIN central_superstore AS T3 ON T1.CustomerID = T3.CustomerID JOIN product AS T2 ON T2.ProductID = T3.ProductID WHERE T1.CustomerName = 'Aimee Bixby' AND T2.Category = 'Furniture' UNION SELECT COUNT(DISTINCT T3.OrderID) FROM people AS T1 JOIN east_superstore AS T3 ON T1.CustomerID = T3.CustomerID JOIN product AS T2 ON T2.ProductID = T3.ProductID WHERE T1.CustomerName = 'Aimee Bixby' AND T2.Category = 'Furniture' UNION SELECT COUNT(DISTINCT T3.OrderID) FROM people AS T1 JOIN south_superstore AS T3 ON T1.CustomerID = T3.CustomerID JOIN product AS T2 ON T2.ProductID = T3.ProductID WHERE T1.CustomerName = 'Aimee Bixby' AND T2.Category = 'Furniture' UNION SELECT COUNT(DISTINCT T3.OrderID) FROM people AS T1 JOIN west_superstore AS T3 ON T1.CustomerID = T3.CustomerID JOIN product AS T2 ON T2.ProductID = T3.ProductID WHERE T1.CustomerName = 'Aimee Bixby' AND T2.Category = 'Furniture';
SELECT p.Product_Name FROM people p JOIN central_superstore cs ON p.Customer_ID = cs.Customer_ID JOIN product pr ON cs.Product_ID = pr.Product_ID WHERE p.Customer_Name = 'Aimee Bixby' AND strftime('%Y', cs.Order_Date) = '2016' UNION SELECT p.Product_Name FROM people p JOIN east_superstore es ON p.Customer_ID = es.Customer_ID JOIN product pr ON es.Product_ID = pr.Product_ID WHERE p.Customer_Name = 'Aimee Bixby' AND strftime('%Y', es.Order_Date) = '2016' UNION SELECT p.Product_Name FROM people p JOIN south_superstore ss ON p.Customer_ID = ss.Customer_ID JOIN product pr ON ss.Product_ID = pr.Product_ID WHERE p.Customer_Name = 'Aimee Bixby' AND strftime('%Y', ss.Order_Date) = '2016' UNION SELECT p.Product_Name FROM people p JOIN west_superstore ws ON p.Customer_ID = ws.Customer_ID JOIN product pr ON ws.Product_ID = pr.Product_ID WHERE p.Customer_Name = 'Aimee Bixby' AND strftime('%Y', ws.Order_Date) = '2016';
SELECT SUM(T1.Quantity) FROM central_superstore AS T1 JOIN product AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_Name = 'Telescoping Adjustable Floor Lamp' AND T2.Region = 'Central';
SELECT p."Customer Name" FROM people p JOIN central_superstore cs ON p."Customer ID" = cs."Customer ID" WHERE cs."Product ID" IN (     SELECT "Product ID"     FROM product     WHERE "Product Name" = 'Telescoping Adjustable Floor Lamp' );
SELECT COUNT(DISTINCT p.`Customer ID`) FROM `people` p JOIN `product` pr ON p.`Region` = pr.`Region` JOIN `central_superstore` cs ON p.`Customer ID` = cs.`Customer ID` AND pr.`Product ID` = cs.`Product ID` WHERE pr.`Product Name` = 'Telescoping Adjustable Floor Lamp' AND p.Segment = 'Consumer' UNION ALL SELECT COUNT(DISTINCT p.`Customer ID`) FROM `people` p JOIN `product` pr ON p.`Region` = pr.`Region` JOIN `east_superstore` es ON p.`Customer ID` = es.`Customer ID` AND pr.`Product ID` = es.`Product ID` WHERE pr.`Product Name` = 'Telescoping Adjustable Floor Lamp' AND p.Segment = 'Consumer' UNION ALL SELECT COUNT(DISTINCT p.`Customer ID`) FROM `people` p JOIN `product` pr ON p.`Region` = pr.`Region` JOIN `south_superstore` ss ON p.`Customer ID` = ss.`Customer ID` AND pr.`Product ID` = ss.`Product ID` WHERE pr.`Product Name` = 'Telescoping Adjustable Floor Lamp' AND p.Segment = 'Consumer' UNION ALL SELECT COUNT(DISTINCT p.`Customer ID`) FROM `people` p JOIN `product` pr ON p.`Region` = pr.`Region` JOIN `west_superstore` ws ON p.`Customer ID` = ws.`Customer ID` AND pr.`Product ID` = ws.`Product ID` WHERE pr.`Product Name` = 'Telescoping Adjustable Floor Lamp' AND p.Segment = 'Consumer';
SELECT Quantity FROM (     SELECT Quantity     FROM central_superstore     WHERE ProductID = (SELECT ProductID FROM product WHERE ProductName = 'Xerox 1952')     AND CustomerID = (SELECT CustomerID FROM people WHERE CustomerName = 'Aimee Bixby')     AND OrderDate = date('2014-09-10')     UNION ALL     SELECT Quantity     FROM east_superstore     WHERE ProductID = (SELECT ProductID FROM product WHERE ProductName = 'Xerox 1952')     AND CustomerID = (SELECT CustomerID FROM people WHERE CustomerName = 'Aimee Bixby')     AND OrderDate = date('2014-09-10')     UNION ALL     SELECT Quantity     FROM south_superstore     WHERE ProductID = (SELECT ProductID FROM product WHERE ProductName = 'Xerox 1952')     AND CustomerID = (SELECT CustomerID FROM people WHERE CustomerName = 'Aimee Bixby')     AND OrderDate = date('2014-09-10')     UNION ALL     SELECT Quantity     FROM west_superstore     WHERE ProductID = (SELECT ProductID FROM product WHERE ProductName = 'Xerox 1952')     AND CustomerID = (SELECT CustomerID FROM people WHERE CustomerName = 'Aimee Bixby')     AND OrderDate = date('2014-09-10') ) as result;
SELECT COUNT(*) FROM (     SELECT *     FROM central_superstore     UNION ALL     SELECT *     FROM east_superstore     UNION ALL     SELECT *     FROM south_superstore     UNION ALL     SELECT *     FROM west_superstore ) AS combined_superstore JOIN people ON combined_superstore.Customer_ID = people.Customer_ID JOIN product ON combined_superstore.Product_ID = product.Product_ID WHERE people.Customer_Name = 'Aimee Bixby' AND product.Product_Name = 'Xerox 1952';
SELECT (T3.Sales / (1 - T3.Discount)) AS Original_Price FROM people AS T1 JOIN product AS T2 ON T1.Region = T2.Region JOIN (     SELECT *     FROM central_superstore     UNION ALL     SELECT *     FROM east_superstore     UNION ALL     SELECT *     FROM south_superstore     UNION ALL     SELECT *     FROM west_superstore ) AS T3 ON T1.Customer ID = T3.Customer ID AND T2.Product ID = T3.Product ID WHERE T1."Customer Name" = 'Aimee Bixby' AND T2."Product Name" = 'Xerox 1952' AND T3."Order Date" = DATE '2014-09-10';
SELECT     (central.Sales / (1 - central.Discount)) * central.Quantity - central.Profit AS total_cost FROM     central_superstore AS central JOIN     people AS ppl ON central.Customer_ID = ppl.Customer_ID JOIN     product AS prod ON central.Product_ID = prod.Product_ID WHERE     prod.Product_Name = 'Xerox 1952'     AND ppl.Customer_Name = 'Aimee Bixby'     AND central.Order_Date = DATE('2014-09-10');
SELECT COUNT(*) FROM east_superstore es JOIN product p ON es.Product_ID = p.Product_ID WHERE strftime('%Y', es.Order_Date) = '2013' AND p.Sub_Category = 'Art';
SELECT p.Customer_Name, s.Order_ID FROM people p JOIN (     SELECT c.Customer_ID, c.Region, s.Order_ID, SUM((s.Sales / (1 - s.Discount)) * s.Quantity - s.Profit) as Total_Cost     FROM (         SELECT * FROM central_superstore         UNION ALL         SELECT * FROM east_superstore         UNION ALL         SELECT * FROM south_superstore         UNION ALL         SELECT * FROM west_superstore     ) s     JOIN people c ON s.Customer_ID = c.Customer_ID     GROUP BY c.Customer_ID, c.Region, s.Order_ID ) sq ON p.Customer_ID = sq.Customer_ID WHERE sq.Total_Cost = (     SELECT MAX(Total_Cost)     FROM (         SELECT SUM((s.Sales / (1 - s.Discount)) * s.Quantity - s.Profit) as Total_Cost         FROM (             SELECT * FROM central_superstore             UNION ALL             SELECT * FROM east_superstore             UNION ALL             SELECT * FROM south_superstore             UNION ALL             SELECT * FROM west_superstore         ) s         JOIN people c ON s.Customer_ID = c.Customer_ID         GROUP BY c.Customer_ID, c.Region, s.Order_ID     ) );
SELECT p."Product Name" FROM product p JOIN (     SELECT MAX(sales / (1 - discount)) as max_price, Product_ID     FROM (         SELECT *         FROM central_superstore         UNION ALL         SELECT *         FROM east_superstore         UNION ALL         SELECT *         FROM south_superstore         UNION ALL         SELECT *         FROM west_superstore     ) subquery     GROUP BY Product_ID ) subquery2 ON p."Product ID" = subquery2.Product_ID WHERE subquery2.max_price = (     SELECT MAX(max_price)     FROM (         SELECT sales / (1 - discount) as max_price         FROM (             SELECT *             FROM central_superstore             UNION ALL             SELECT *             FROM east_superstore             UNION ALL             SELECT *             FROM south_superstore             UNION ALL             SELECT *             FROM west_superstore         ) subquery     ) max_subquery )
SELECT p."Product Name" FROM people AS pe JOIN central_superstore AS cs ON pe."Customer ID" = cs."Customer ID" JOIN product AS p ON cs."Product ID" = p."Product ID" WHERE pe."Customer Name" = 'Darren Powers' ORDER BY cs."Order Date" DESC LIMIT 1;
SELECT SUM(quantity) FROM (     SELECT quantity FROM central_superstore WHERE product_id = (         SELECT product_id FROM product WHERE product_name = 'Advantus plastic paper clips'     )     UNION ALL     SELECT quantity FROM east_superstore WHERE product_id = (         SELECT product_id FROM product WHERE product_name = 'Advantus plastic paper clips'     )     UNION ALL     SELECT quantity FROM south_superstore WHERE product_id = (         SELECT product_id FROM product WHERE product_name = 'Advantus plastic paper clips'     )     UNION ALL     SELECT quantity FROM west_superstore WHERE product_id = (         SELECT product_id FROM product WHERE product_name = 'Advantus plastic paper clips'     ) )
SELECT T3.OrderID FROM product AS T1 JOIN central_superstore AS T3 ON T1.ProductID = T3.ProductID WHERE T1.ProductName = 'Logitech G600 MMO Gaming Mouse' ORDER BY ((T3.Sales / (1 - T3.Discount)) * T3.Quantity - T3.Profit) DESC LIMIT 1
SELECT p."Product Name" FROM people p JOIN central_superstore cs ON p."Customer ID" = cs."Customer ID" WHERE p."Customer Name" = 'Alejandro Grove' UNION SELECT p."Product Name" FROM people p JOIN east_superstore es ON p."Customer ID" = es."Customer ID" WHERE p."Customer Name" = 'Alejandro Grove' UNION SELECT p."Product Name" FROM people p JOIN south_superstore ss ON p."Customer ID" = ss."Customer ID" WHERE p."Customer Name" = 'Alejandro Grove' UNION SELECT p."Product Name" FROM people p JOIN west_superstore ws ON p."Customer ID" = ws."Customer ID" WHERE p."Customer Name" = 'Alejandro Grove'
SELECT COUNT(DISTINCT T1.CustomerID) FROM people AS T1 JOIN central_superstore AS T2 ON T1.CustomerID = T2.CustomerID JOIN product AS T3 ON T3.ProductID = T2.ProductID WHERE T1.City = 'Chicago' AND T3.ProductName = 'Cardinal EasyOpen D-Ring Binders' AND T2.Quantity >= 10;
SELECT T2.Product_Name FROM (     SELECT Product_ID, SUM(Profit) as total_profit     FROM central_superstore     GROUP BY Product_ID     HAVING total_profit >= 1000     UNION ALL     SELECT Product_ID, SUM(Profit) as total_profit     FROM east_superstore     GROUP BY Product_ID     HAVING total_profit >= 1000     UNION ALL     SELECT Product_ID, SUM(Profit) as total_profit     FROM south_superstore     GROUP BY Product_ID     HAVING total_profit >= 1000     UNION ALL     SELECT Product_ID, SUM(Profit) as total_profit     FROM west_superstore     GROUP BY Product_ID     HAVING total_profit >= 1000 ) AS T1 JOIN product AS T2 ON T1.Product_ID = T2.Product_ID
SELECT p.Product_Name FROM product p JOIN east_superstore es ON p.Product_ID = es.Product_ID WHERE es.Ship_Mode = 'First Class' AND p.Region = 'East' LIMIT 10;
SELECT p."Product Name" FROM central_superstore cs JOIN people pe ON cs."Customer ID" = pe."Customer ID" JOIN product p ON cs."Product ID" = p."Product ID" WHERE pe."Customer Name" = 'Becky Martin' AND p.Region = 'Central';
SELECT people.Customer Name FROM people JOIN west_superstore ON people.Customer ID = west_superstore.Customer ID WHERE west_superstore.Ship Mode = 'Second Class' AND people.Region = 'West' LIMIT 5;
SELECT SUM(T3.Profit) FROM people AS T1 JOIN central_superstore AS T3 ON T1.Customer ID = T3.Customer ID WHERE T1.Customer Name = 'Patrick Gardner' AND T1.Region = 'Central';
SELECT p."Product Name" FROM south_superstore ss JOIN product p ON ss."Product ID" = p."Product ID" WHERE ss."Order Date" = DATE('2013-03-04') AND ss."Ship Mode" = 'Same Day';
SELECT SUM(Sales) FROM central_superstore cs JOIN product p ON cs.ProductID = p.ProductID WHERE p.ProductName = 'Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack' AND cs.Region = 'Central';
SELECT p."Product Name" FROM people pe JOIN east_superstore es ON pe."Customer ID" = es."Customer ID" JOIN product p ON es."Product ID" = p."Product ID" WHERE pe."Customer Name" = 'Jonathan Doherty' AND pe.Region = 'East' ORDER BY es.Quantity DESC LIMIT 1;
SELECT SUM(east_superstore.Quantity) AS Total_Quantity, product.Product_Name FROM east_superstore JOIN product ON east_superstore.Product_ID = product.Product_ID WHERE east_superstore.Ship_Date = DATE('2015-03-25') AND product.Region = 'East';
SELECT people.Customer Name FROM people JOIN east_superstore ON people.Customer ID = east_superstore.Customer ID JOIN product ON east_superstore.Product ID = product.Product ID WHERE product.Product Name = 'Global High-Back Leather Tilter, Burgundy' AND east_superstore.Order Date = DATE('2013-10-13') AND people.Region = 'East';
SELECT p.Category FROM people ppl JOIN south_superstore ss ON ppl.Customer ID = ss.Customer ID JOIN product pr ON ss.Product ID = pr.Product ID WHERE ppl.Customer Name = 'Katherine Murray' AND ss.Order Date = DATE('2018-11-04') AND p.Region = 'South';
SELECT     (SUM(CASE WHEN p.Category = 'Furniture' THEN ws.Quantity ELSE 0 END) / SUM(ws.Quantity)) * 1.0 AS Percentage FROM     west_superstore ws JOIN     product p ON ws.Product_ID = p.Product_ID WHERE     ws.Ship_Mode = 'Standard Class' AND ws.Region = 'West';
SELECT Ship_Date FROM central_superstore cs JOIN people p ON cs.Customer_ID = p.Customer_ID WHERE p.Customer_Name = 'Ann Chong' AND p.Region = 'Central';
SELECT p.Segment FROM people p JOIN west_superstore ws ON p.Customer ID = ws.Customer ID WHERE ws.Order ID = 'CA-2011-108189' AND p.Region = 'West'
SELECT SUM(west_superstore.Sales) FROM west_superstore JOIN product ON west_superstore.Product_ID = product.Product_ID WHERE product.Product_Name = 'Hon Valutask Swivel Chairs' AND product.Region = 'West';
SELECT `Order ID` FROM south_superstore JOIN people ON south_superstore.`Customer ID` = people.`Customer ID` WHERE people.`Customer Name` = 'Frank Olsen' AND people.Region = 'South';
SELECT p.ProductName FROM central_superstore cs JOIN product p ON cs.ProductID = p.ProductID WHERE cs.OrderDate = date('2018-04-26') AND cs.ShipDate = date('2018-04-27') AND p.Region = 'Central';
SELECT p.City, p.State FROM people p JOIN (     SELECT Customer ID, MAX(Sales) as max_sales     FROM (         SELECT Customer ID, Sales         FROM central_superstore         UNION ALL         SELECT Customer ID, Sales         FROM east_superstore         UNION ALL         SELECT Customer ID, Sales         FROM south_superstore         UNION ALL         SELECT Customer ID, Sales         FROM west_superstore     ) t     GROUP BY Customer ID ) t2 ON p.Customer ID = t2."Customer ID" WHERE t2.max_sales = (     SELECT MAX(Sales)     FROM (         SELECT Sales         FROM central_superstore         UNION ALL         SELECT Sales         FROM east_superstore         UNION ALL         SELECT Sales         FROM south_superstore         UNION ALL         SELECT Sales         FROM west_superstore     ) t3 )
SELECT p."Customer Name" FROM people p JOIN east_superstore es ON p."Customer ID" = es."Customer ID" WHERE p.Region = 'East' ORDER BY es.Profit DESC LIMIT 1;
SELECT MAX(ss.Quantity) FROM (     SELECT Quantity     FROM central_superstore     WHERE City = 'Chicago' AND State = 'Illinois'     UNION ALL     SELECT Quantity     FROM east_superstore     WHERE City = 'Chicago' AND State = 'Illinois'     UNION ALL     SELECT Quantity     FROM south_superstore     WHERE City = 'Chicago' AND State = 'Illinois'     UNION ALL     SELECT Quantity     FROM west_superstore     WHERE City = 'Chicago' AND State = 'Illinois' ) ss
SELECT central_superstore.Order_Date, product.Product_Name FROM central_superstore JOIN product ON central_superstore.Product_ID = product.Product_ID WHERE central_superstore.Order_ID = 'CA-2011-137274' AND product.Region = 'Central';
SELECT DISTINCT p."Customer Name" FROM south_superstore s JOIN product p ON s."Product ID" = p."Product ID" WHERE p."Product Name" = 'Xerox 23' AND s.Region = 'South';
SELECT p.ProductName FROM product p JOIN central_superstore cs ON p.ProductID = cs.ProductID WHERE p.Category = 'Office Supplies' AND p.Region = 'Central' GROUP BY p.ProductName ORDER BY SUM(cs.Sales) DESC LIMIT 1;
SELECT p."Customer Name" FROM people p JOIN west_superstore ws ON p."Customer ID" = ws."Customer ID" WHERE p.Region = 'West' ORDER BY ws.Discount DESC LIMIT 1;
SELECT p."Product Name" FROM product p JOIN east_superstore es ON p."Product ID" = es."Product ID" WHERE p.Region = 'East' AND es.Profit > (SELECT AVG(Profit) * 0.98 FROM east_superstore) GROUP BY p."Product Name";
SELECT p."Customer Name" FROM people p JOIN east_superstore es ON p."Customer ID" = es."Customer ID" WHERE p.Region = 'East' AND ((es.Sales / (1 - es.Discount)) * es.Quantity - es.Profit) > 80000;
SELECT COUNT(*) FROM (     SELECT *     FROM central_superstore     UNION ALL     SELECT *     FROM east_superstore     UNION ALL     SELECT *     FROM south_superstore     UNION ALL     SELECT *     FROM west_superstore ) AS combined_superstore JOIN people ON combined_superstore.Customer_ID = people.Customer_ID WHERE people.Customer_Name = 'Maxwell Schwartz' AND strftime('%Y', combined_superstore.Order_Date) = '2015'
SELECT people.CustomerName FROM people JOIN central_superstore ON people.CustomerID = central_superstore.CustomerID JOIN product ON central_superstore.ProductID = product.ProductID WHERE product.ProductName = 'Bush Mission Pointe Library' AND product.Region = 'Central';
Error: 第 2396 个样本有 2 个SQL。
SELECT p."Product Name" FROM people p JOIN west_superstore ws ON p."Customer ID" = ws."Customer ID" WHERE p."Customer Name" = 'Anne McFarland'
SELECT p."Product Name" FROM people AS pe JOIN central_superstore AS cs ON pe."Customer ID" = cs."Customer ID" JOIN product AS p ON cs."Product ID" = p."Product ID" WHERE pe.City = 'Coachella';
Error: 第 2399 个样本有 2 个SQL。
SELECT p.ProductName FROM west_superstore ws JOIN people pe ON ws.CustomerID = pe.CustomerID JOIN product p ON ws.ProductID = p.ProductID WHERE pe.CustomerName = 'Matt Abelman' AND ws.OrderDate LIKE '2013%';
SELECT SUM((central_superstore.Sales / (1 - central_superstore.Discount)) * central_superstore.Quantity - central_superstore.Profit) FROM central_superstore JOIN people ON central_superstore.CustomerID = people.CustomerID WHERE people.CustomerName = 'Brad Thomas' AND strftime('%Y', central_superstore.OrderDate) = '2016' UNION ALL SELECT SUM((east_superstore.Sales / (1 - east_superstore.Discount)) * east_superstore.Quantity - east_superstore.Profit) FROM east_superstore JOIN people ON east_superstore.CustomerID = people.CustomerID WHERE people.CustomerName = 'Brad Thomas' AND strftime('%Y', east_superstore.OrderDate) = '2016' UNION ALL SELECT SUM((south_superstore.Sales / (1 - south_superstore.Discount)) * south_superstore.Quantity - south_superstore.Profit) FROM south_superstore JOIN people ON south_superstore.CustomerID = people.CustomerID WHERE people.CustomerName = 'Brad Thomas' AND strftime('%Y', south_superstore.OrderDate) = '2016' UNION ALL SELECT SUM((west_superstore.Sales / (1 - west_superstore.Discount)) * west_superstore.Quantity - west_superstore.Profit) FROM west_superstore JOIN people ON west_superstore.CustomerID = people.CustomerID WHERE people.CustomerName = 'Brad Thomas' AND strftime('%Y', west_superstore.OrderDate) = '2016'
SELECT p."Customer Name", p."City", p."Country" FROM people p JOIN central_superstore cs ON p."Customer ID" = cs."Customer ID" JOIN product pr ON cs."Product ID" = pr."Product ID" WHERE pr."Product Name" = 'Plantronics Single Ear Headset' UNION SELECT p."Customer Name", p."City", p."Country" FROM people p JOIN east_superstore es ON p."Customer ID" = es."Customer ID" JOIN product pr ON es."Product ID" = pr."Product ID" WHERE pr."Product Name" = 'Plantronics Single Ear Headset' UNION SELECT p."Customer Name", p."City", p."Country" FROM people p JOIN south_superstore ss ON p."Customer ID" = ss."Customer ID" JOIN product pr ON ss."Product ID" = pr."Product ID" WHERE pr."Product Name" = 'Plantronics Single Ear Headset' UNION SELECT p."Customer Name", p."City", p."Country" FROM people p JOIN west_superstore ws ON p."Customer ID" = ws."Customer ID" JOIN product pr ON ws."Product ID" = pr."Product ID" WHERE pr."Product Name" = 'Plantronics Single Ear Headset';
SELECT T3.Ship_Date, T2.Product_Name FROM people AS T1 JOIN central_superstore AS T3 ON T1.Customer_ID = T3.Customer_ID JOIN product AS T2 ON T2.Product_ID = T3.Product_ID WHERE T1.Customer_Name = 'Gene Hale' UNION SELECT T3.Ship_Date, T2.Product_Name FROM people AS T1 JOIN east_superstore AS T3 ON T1.Customer_ID = T3.Customer_ID JOIN product AS T2 ON T2.Product_ID = T3.Product_ID WHERE T1.Customer_Name = 'Gene Hale' UNION SELECT T3.Ship_Date, T2.Product_Name FROM people AS T1 JOIN south_superstore AS T3 ON T1.Customer_ID = T3.Customer_ID JOIN product AS T2 ON T2.Product_ID = T3.Product_ID WHERE T1.Customer_Name = 'Gene Hale' UNION SELECT T3.Ship_Date, T2.Product_Name FROM people AS T1 JOIN west_superstore AS T3 ON T1.Customer_ID = T3.Customer_ID JOIN product AS T2 ON T2.Product_ID = T3.Product_ID WHERE T1.Customer_Name = 'Gene Hale';
SELECT COUNT(DISTINCT T1.OrderID) FROM south_superstore AS T1 JOIN product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ShipMode = 'First Class' AND T2.Category = 'Furniture';
SELECT COUNT(*) FROM south_superstore s JOIN people p ON s.CustomerID = p.CustomerID JOIN product pr ON s.ProductID = pr.ProductID WHERE p.CustomerName = 'Cindy Stewart' AND pr.Category = 'Office Supplies';
SELECT p.Category FROM south_superstore ss JOIN product p ON ss.Product_ID = p.Product_ID WHERE ss.Region = 'South' GROUP BY p.Category ORDER BY SUM(ss.Profit) DESC LIMIT 1;
SELECT p."Product Name" FROM east_superstore es JOIN people pe ON es."Customer ID" = pe."Customer ID" JOIN product p ON es."Product ID" = p."Product ID" WHERE pe."Customer Name" = 'Cindy Stewart';
SELECT p.Product_Name FROM west_superstore ws JOIN product p ON ws.Product_ID = p.Product_ID WHERE ws.Ship_Mode = 'Same Day' AND ws.Ship_Date BETWEEN '2013-01-01' AND '2013-12-31';
SELECT DISTINCT p.Category FROM product p JOIN central_superstore cs ON p.Product ID = cs.Product ID JOIN people pe ON cs.Customer ID = pe.Customer ID WHERE pe.Customer Name = 'Sam Craven' UNION SELECT DISTINCT p.Category FROM product p JOIN east_superstore es ON p.Product ID = es.Product ID JOIN people pe ON es.Customer ID = pe.Customer ID WHERE pe.Customer Name = 'Sam Craven';
SELECT SUM(south_superstore.Quantity) FROM south_superstore JOIN people ON south_superstore.Customer_ID = people.Customer_ID JOIN product ON south_superstore.Product_ID = product.Product_ID WHERE people.Customer_Name = 'Cindy Stewart' AND product.Product_Name = 'Lexmark X 9575 Professional All-in-One Color Printer';
SELECT p."Product Name" FROM central_superstore cs JOIN product p ON cs."Product ID" = p."Product ID" WHERE cs."Quantity" >= 10 AND cs."Ship Mode" = 'Standard Class' GROUP BY p."Product Name" ;
SELECT p.Category FROM west_superstore ws JOIN product p ON ws.Product_ID = p.Product_ID WHERE ws.Region = 'West' GROUP BY p.Category ORDER BY SUM(ws.Sales) ASC LIMIT 1;
SELECT SUM(Profit) FROM south_superstore JOIN product ON south_superstore.Product_ID = product.Product_ID WHERE product.Product_Name = 'Memorex Froggy Flash Drive 8 GB';
SELECT SUM(Sales) FROM east_superstore JOIN product ON east_superstore.Product_ID = product.Product_ID WHERE product.Category = 'Furnitures' AND east_superstore.Order_Date BETWEEN '2016-01-01' AND '2016-12-31';
SELECT AVG(e.Sales) AS East_Avg_Sales, AVG(w.Sales) AS West_Avg_Sales FROM (     SELECT *     FROM east_superstore     WHERE Product_Name = 'Sharp AL-1530CS Digital Copier' ) e, (     SELECT *     FROM west_superstore     WHERE Product_Name = 'Sharp AL-1530CS Digital Copier' ) w;
SELECT     (SUM(CASE WHEN T2.Category = 'Office Supplies' THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.Product ID)) AS Percentage FROM     ((SELECT * FROM central_superstore WHERE T1.Region = 'Central')     UNION ALL     (SELECT * FROM south_superstore WHERE T1.Region = 'South')) AS T1 JOIN     product AS T2 ON T1.Product ID = T2.Product ID;
SELECT     (COUNT(CASE WHEN State = 'Texas' THEN Customer ID END) * 1.0) /     COUNT(CASE WHEN State = 'Indiana' THEN Customer ID END) AS Ratio FROM     people
SELECT p.Product_Name FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE p.Sub_Category = 'Art' GROUP BY cs.Product_ID, p.Product_Name ORDER BY COUNT(cs.Order_ID) DESC LIMIT 1;
SELECT p.Customer_Name FROM people p JOIN south_superstore s ON p.Customer_ID = s.Customer_ID WHERE s.Order_Date BETWEEN '2015-01-01' AND '2015-12-31' GROUP BY p.Customer_ID, p.Customer_Name HAVING COUNT(s.Order_ID) > 3;
SELECT MAX(cs.Profit) FROM central_superstore cs JOIN people p ON cs.Customer_ID = p.Customer_ID WHERE p.Customer_Name = 'Anna Chung';
SELECT COUNT(DISTINCT T3.OrderID) FROM people AS T1 JOIN central_superstore AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerName = 'Corey Roper' AND YEAR(T3.OrderDate) = 2015 UNION ALL SELECT COUNT(DISTINCT T4.OrderID) FROM people AS T1 JOIN east_superstore AS T4 ON T1.CustomerID = T4.CustomerID WHERE T1.CustomerName = 'Corey Roper' AND YEAR(T4.OrderDate) = 2015 UNION ALL SELECT COUNT(DISTINCT T5.OrderID) FROM people AS T1 JOIN south_superstore AS T5 ON T1.CustomerID = T5.CustomerID WHERE T1.CustomerName = 'Corey Roper' AND YEAR(T5.OrderDate) = 2015 UNION ALL SELECT COUNT(DISTINCT T6.OrderID) FROM people AS T1 JOIN west_superstore AS T6 ON T1.CustomerID = T6.CustomerID WHERE T1.CustomerName = 'Corey Roper' AND YEAR(T6.OrderDate) = 2015;
(SELECT SUM(Sales) FROM east_superstore WHERE Region = 'East') - (SELECT SUM(Sales) FROM west_superstore WHERE Region = 'West')
SELECT p.ProductName FROM product p JOIN central_superstore cs ON p.ProductID = cs.ProductID WHERE cs.Profit < 0;
SELECT p."Product Name", ws."Ship Mode" FROM west_superstore ws JOIN product p ON ws."Product ID" = p."Product ID" WHERE ws."Region" = 'West' ORDER BY (ws."Ship Date" - ws."Order Date") LIMIT 1;
SELECT COUNT(*) FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE p.Product_Name = 'O''Sullivan Plantations 2-Door Library in Landvery Oak' AND cs.Ship_Mode = 'First Class';
SELECT p."Customer Name" FROM people p JOIN east_superstore es ON p."Customer ID" = es."Customer ID" WHERE p.Segment = 'Corporate' AND p.State = 'Rhode Island' AND es."Region" = 'East' AND es."Order Date" BETWEEN '2016-01-01' AND '2016-12-31' GROUP BY p."Customer Name" ORDER BY COUNT(es."Order ID") DESC LIMIT 1;
SELECT COUNT(*) FROM west_superstore JOIN people ON west_superstore.Customer_ID = people.Customer_ID WHERE west_superstore.Sales >= 5000 AND people.State = 'California';
SELECT p.Segment FROM people p JOIN east_superstore es ON p.Customer ID = es.Customer ID WHERE es.Discount < 1 AND es.Sales / (1 - es.Discount) = (     SELECT MAX(es2.Sales / (1 - es2.Discount))     FROM east_superstore es2 )
SELECT     (julianday(Ship_Date) - julianday(Order_Date)) as Shipment_Duration FROM     central_superstore WHERE     Order_ID = 'CA-2011-134103';
SELECT COUNT(*) FROM (     SELECT *     FROM central_superstore     UNION ALL     SELECT *     FROM east_superstore     UNION ALL     SELECT *     FROM south_superstore     UNION ALL     SELECT *     FROM west_superstore ) AS combined_superstore WHERE Quantity > 5 AND Ship_Mode = 'First Class';
SELECT OrderID FROM (   SELECT OrderID, Profit   FROM central_superstore   WHERE Profit < 0   UNION ALL   SELECT OrderID, Profit   FROM east_superstore   WHERE Profit < 0   UNION ALL   SELECT OrderID, Profit   FROM south_superstore   WHERE Profit < 0   UNION ALL   SELECT OrderID, Profit   FROM west_superstore   WHERE Profit < 0 ) AS combined_orders WHERE Profit < 0 ORDER BY Profit LIMIT 3;
SELECT p."Product Name" FROM people pl JOIN central_superstore cs ON pl."Customer ID" = cs."Customer ID" JOIN product p ON cs."Product ID" = p."Product ID" WHERE pl."Customer Name" = 'Phillina Ober'
SELECT p."Customer Name" FROM people p JOIN south_superstore ss ON p."Customer ID" = ss."Customer ID" JOIN product pr ON ss."Product ID" = pr."Product ID" WHERE pr."Product Name" = 'Hon Multipurpose Stacking Arm Chairs' AND p.Region = 'South' ORDER BY ss.Quantity DESC LIMIT 1;
SELECT SUM(profit) FROM (     SELECT * FROM central_superstore     UNION ALL     SELECT * FROM east_superstore     UNION ALL     SELECT * FROM south_superstore     UNION ALL     SELECT * FROM west_superstore ) AS all_stores JOIN product ON all_stores.Product_ID = product.Product_ID WHERE product.Product_Name = 'O'Sullivan Living Dimensions 2-Shelf Bookcases'
SELECT SUM(s.west_superstore.Quantity) FROM west_superstore JOIN product ON west_superstore.Product_ID = product.Product_ID WHERE product.Product_Name = 'Hon Pagoda Stacking Chairs' AND product.Region = 'West';
Error: 第 2436 个样本有 2 个SQL。
SELECT (Sales / (1 - Discount)) AS Original_Price FROM product p JOIN central_superstore cs ON p.Product ID = cs.Product ID WHERE p.Product_Name = 'Black Avery Flip-Chart Easel Binder'
SELECT p."Product Name" FROM people AS pe JOIN central_superstore AS cs ON pe."Customer ID" = cs."Customer ID" JOIN product AS p ON cs."Product ID" = p."Product ID" WHERE pe."Customer Name" = 'Aimee Bixby';
SELECT p.Profit FROM product p JOIN central_superstore cs ON p.ProductID = cs.ProductID WHERE p.ProductName = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish' UNION ALL SELECT p.Profit FROM product p JOIN east_superstore es ON p.ProductID = es.ProductID WHERE p.ProductName = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish' UNION ALL SELECT p.Profit FROM product p JOIN south_superstore ss ON p.ProductID = ss.ProductID WHERE p.ProductName = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish' UNION ALL SELECT p.Profit FROM product p JOIN west_superstore ws ON p.ProductID = ws.ProductID WHERE p.ProductName = 'Sauder Camden County Barrister Bookcase, Planked Cherry Finish';
SELECT COUNT(*) FROM east_superstore es JOIN product p ON es.Product_ID = p.Product_ID WHERE p.Category = 'Furniture' AND es.Ship_Mode = 'Standard Class';
SELECT e.OrderID, MAX(e.Profit) as HighestProfit FROM east_superstore e JOIN people p ON e.CustomerID = p.CustomerID WHERE p.City = 'Houston' AND p.State = 'Texas' GROUP BY e.OrderID ORDER BY HighestProfit DESC LIMIT 1;
SELECT COUNT(*) FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE p.Category = 'Furniture';
SELECT p.Product_Name FROM central_superstore cs JOIN product p ON cs.Product_ID = p.Product_ID WHERE cs.Ship_Date LIKE '2013-03%';
SELECT COUNT(DISTINCT T3.OrderID) FROM people AS T1 JOIN central_superstore AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.State = 'Texas';
SELECT COUNT(DISTINCT T3.OrderID) FROM people AS T1 JOIN central_superstore AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerName = 'Alan Barnes' AND strftime('%Y', T3.OrderDate) = '2015';
SELECT p.Product_Name FROM product p JOIN east_superstore es ON p.Product_ID = es.Product_ID WHERE es.Order_ID = 'CA-2011-115791';
SELECT     (COUNT(CASE WHEN central_superstore.Discount = 0.2 THEN central_superstore.Order_ID END) * 100.0 / COUNT(central_superstore.Order_ID)) AS Percentage FROM     central_superstore JOIN     people ON central_superstore.Customer_ID = people.Customer_ID WHERE     people.State = 'Texas';
SELECT     (COUNT(CASE WHEN T2.Category = 'Furniture' AND T1.Ship_Mode = 'First Class' AND YEAR(T1.Ship_Date) = 2013 THEN T1.Order_ID END) * 100.0 / COUNT(T1.Order_ID)) AS Percentage FROM     central_superstore T1 JOIN     product T2 ON T1.Product_ID = T2.Product_ID WHERE     YEAR(T1.Ship_Date) = 2013;
SELECT people."Customer Name" FROM people JOIN west_superstore ON people."Customer ID" = west_superstore."Customer ID" WHERE west_superstore."Order Date" = '2013-08-12' AND west_superstore."Discount" = 0.2;
SELECT "Order ID" FROM central_superstore WHERE "Product ID" = (     SELECT "Product ID"     FROM product     WHERE "Product Name" = 'Security-Tint Envelopes' ) AND "Order Date" = '2013-06-03';
SELECT p.Product_Name FROM people pe JOIN central_superstore cs ON pe.Customer_ID = cs.Customer_ID JOIN product p ON cs.Product_ID = p.Product_ID WHERE pe.Customer_Name = 'Bill Shonely' AND pe.Region = 'Central';
SELECT p."Customer Name" FROM people p JOIN west_superstore ws ON p."Customer ID" = ws."Customer ID" WHERE p.Region = 'West' AND ws.Quantity = 8;
SELECT SUM(T3.Profit) FROM people AS T1 JOIN central_superstore AS T3 ON T1.Customer ID = T3.Customer ID WHERE T1.City = 'Houston' AND T1.State = 'Texas' AND T1.Region = 'Central';
SELECT p.Customer Name FROM people p JOIN east_superstore es ON p.Customer ID = es.Customer ID WHERE es.Ship Date = '2013-03-05' AND p.Region = 'East';
SELECT p."Product Name" FROM central_superstore cs JOIN product p ON cs."Product ID" = p."Product ID" WHERE cs."Region" = 'Central' AND EXTRACT(YEAR FROM cs."Order Date") = 2016 ORDER BY cs.Profit LIMIT 1;
SELECT p."Customer Name" FROM people p JOIN east_superstore es ON p."Customer ID" = es."Customer ID" WHERE es."Order ID" = 'CA-2011-118976' AND es.Region = 'East'
SELECT p.Product_Name FROM product p JOIN south_superstore s ON p.Product_ID = s.Product_ID WHERE p.Region = 'South' GROUP BY p.Product_ID, p.Product_Name ORDER BY SUM(s.Sales) DESC LIMIT 1;
SELECT e.Sales, e.Profit, p."Sub-Category" FROM east_superstore e JOIN product p ON e.Product_ID = p.Product_ID WHERE e.Order_ID = 'US-2011-126571' AND e.Region = 'East';
SELECT p."Product Name" FROM product p JOIN (     SELECT "Product ID", MAX("Quantity") as max_quantity     FROM (         SELECT "Product ID", "Quantity"         FROM central_superstore         UNION ALL         SELECT "Product ID", "Quantity"         FROM east_superstore         UNION ALL         SELECT "Product ID", "Quantity"         FROM south_superstore         UNION ALL         SELECT "Product ID", "Quantity"         FROM west_superstore     ) subquery     GROUP BY "Product ID" ) sq ON p."Product ID" = sq."Product ID" WHERE sq.max_quantity = (     SELECT MAX(max_quantity)     FROM (         SELECT MAX("Quantity") as max_quantity         FROM central_superstore         UNION ALL         SELECT MAX("Quantity") as max_quantity         FROM east_superstore         UNION ALL         SELECT MAX("Quantity") as max_quantity         FROM south_superstore         UNION ALL         SELECT MAX("Quantity") as max_quantity         FROM west_superstore     ) subquery2 );
SELECT p."Customer Name" FROM people p JOIN south_superstore ss ON p."Customer ID" = ss."Customer ID" WHERE ss."Ship Mode" = 'Standard Class' AND ss.Sales > (SELECT AVG(Sales) * 0.88 FROM central_superstore UNION ALL SELECT AVG(Sales) FROM east_superstore UNION ALL SELECT AVG(Sales) FROM south_superstore UNION ALL SELECT AVG(Sales) FROM west_superstore) AND p.Region = 'South'
SELECT     (SUM(CASE WHEN T3.Discount = 0 THEN 1 ELSE 0 END) * 100 / COUNT(T3.Discount)) AS percentage FROM     people AS T1 JOIN     central_superstore AS T3 ON T1.Customer ID = T3.Customer ID WHERE     T1.State = 'Indiana' AND     T1.Region = 'Central'
SELECT (COUNT(*) FILTER (WHERE race = 'W') * 100.0 / COUNT(*)) AS white_percentage FROM officers WHERE gender = 'M';
SELECT     (COUNT(CASE WHEN officer_count > 3 THEN case_number END) * 100.0 / COUNT(case_number)) AS percentage FROM     incidents WHERE     date BETWEEN '2010-01-01' AND '2015-12-31';
SELECT YEAR(date) FROM incidents WHERE subject_weapon = 'Handgun' GROUP BY YEAR(date) ORDER BY COUNT(case_number) DESC LIMIT 1;
SELECT     (COUNT(I.case_number) FILTER (WHERE I.subject_statuses = 'injured') * 100.0 / COUNT(I.case_number)) AS percentage FROM     incidents I WHERE     I.grand_jury_disposition = 'No Bill';
SELECT     (SELECT COUNT(case_number) FROM incidents WHERE subject_weapon = 'Vehicle' AND date BETWEEN '2008-01-01' AND '2008-12-31') -     (SELECT COUNT(case_number) FROM incidents WHERE subject_weapon = 'Vehicle' AND date BETWEEN '2007-01-01' AND '2007-12-31') AS difference;
SELECT (COUNT(I.case_number) FILTER (WHERE I.subject_statuses = 'Shoot and Miss')) * 100.0 / COUNT(I.case_number) FROM incidents I WHERE I.subject_weapon = 'Handgun';
SELECT o.last_name, o.gender FROM officers o JOIN incidents i ON o.case_number = i.case_number WHERE i.grand_jury_disposition = 'No Bill';
SELECT incidents.case_number, incidents.subject_statuses, incidents.subject_weapon FROM incidents JOIN subjects ON incidents.case_number = subjects.case_number WHERE subjects.gender = 'F';
SELECT incidents.case_number, incidents.location, incidents.subject_statuses FROM incidents JOIN subjects ON incidents.case_number = subjects.case_number WHERE subjects.gender = 'M';
SELECT incidents.case_number, incidents.officers FROM incidents JOIN officers ON incidents.case_number = officers.case_number WHERE officers.full_name = 'Evenden, George';
SELECT o.last_name, i.subject_statuses FROM incidents i JOIN officers o ON i.case_number = o.case_number WHERE i.case_number = '134472-2015';
SELECT subjects.last_name, subjects.gender, subjects.race, incidents.case_number FROM incidents JOIN subjects ON incidents.case_number = subjects.case_number WHERE incidents.subject_statuses = 'Deceased';
SELECT (COUNT(CASE WHEN t1.subject_weapon = 'Vehicle' THEN t1.case_number END) * 100.0 / COUNT(t1.case_number)) AS percentage FROM incidents t1 JOIN subjects t2 ON t1.case_number = t2.case_number WHERE t2.gender = 'F';
Error: 第 2475 个样本有 2 个SQL。
SELECT i.case_number FROM incidents i WHERE i.date BETWEEN '2012-01-01' AND '2012-12-31' AND i.subject_statuses = 'Deceased'
SELECT (COUNT(CASE WHEN race = 'B' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM officers WHERE gender = 'M'
SELECT COUNT(*) FROM incidents JOIN officers ON incidents.case_number = officers.case_number WHERE incidents.subject_weapon = 'Vehicle' AND officers.gender = 'F';
SELECT COUNT(*) FROM incidents WHERE subject_statuses = 'Deceased' AND EXISTS (     SELECT 1     FROM subjects     WHERE incidents.case_number = subjects.case_number AND subjects.gender = 'F' );
SELECT COUNT(*) FROM incidents i JOIN officers o ON i.case_number = o.case_number WHERE o.race = 'B' AND i.date BETWEEN '2010-01-01' AND '2015-12-31';
SELECT COUNT(case_number) FROM incidents WHERE date BETWEEN '2015-06-01' AND '2015-06-30';
SELECT COUNT(*) FROM incidents JOIN subjects ON incidents.case_number = subjects.case_number WHERE incidents.date BETWEEN '2006-01-01' AND '2013-12-31' AND subjects.subject_statuses = 'injured' AND subjects.subject_weapon = 'handgun';
SELECT subject_weapon FROM incidents WHERE subject_statuses = 'Deceased' GROUP BY subject_weapon ORDER BY COUNT(subject_weapon) DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN race = 'W' AND gender = 'M' THEN 1 END) / COUNT(*) * 100) AS White_Males_Proportion,     (COUNT(CASE WHEN race = 'W' AND gender = 'F' THEN 1 END) / COUNT(*) * 100) AS White_Females_Proportion FROM     officers;
SELECT     (SELECT COUNT(*) FROM subjects WHERE race = 'B' AND gender = 'F') -     (SELECT COUNT(*) FROM subjects WHERE race = 'W' AND gender = 'F') AS result;
SELECT     (COUNT(CASE WHEN i.subject_weapon = 'rifles' THEN i.case_number END) * 100.0 / COUNT(i.case_number)) as percentage FROM     incidents i WHERE     i.subject_statuses = 'Deceased'
SELECT subjects.race, subjects.gender, incidents.subject_weapon FROM incidents JOIN subjects ON incidents.case_number = subjects.case_number WHERE incidents.case_number = '031347-2015';
SELECT incidents.case_number, subjects.race, subjects.gender FROM incidents JOIN officers ON incidents.case_number = officers.case_number JOIN subjects ON incidents.case_number = subjects.case_number WHERE officers.full_name = 'Ruben Fredirick' AND incidents.subject_statuses = 'Deceased Injured';
SELECT     (COUNT(DISTINCT o.case_number) / COUNT(DISTINCT i.case_number)) * 100 AS proportion FROM     incidents i JOIN     officers o ON i.case_number = o.case_number WHERE     i.subject_statuses = 'Injured' AND o.gender = 'M';
Error: 第 2490 个样本有 2 个SQL。
SELECT COUNT(*) FROM Genes JOIN Classification ON Genes.GeneID = Classification.GeneID WHERE Genes.Essential = 'No' AND Classification.Localization = 'Nucleus';
SELECT COUNT(*) FROM Classification JOIN Genes ON Classification.GeneID = Genes.GeneID WHERE Genes.Phenotype = 'nucleic acid metabolism defects' AND Classification.Localization = 'vacuole';
SELECT T1.Localization FROM Classification AS T1 JOIN Genes AS T2 ON T1.GeneID = T2.GeneID GROUP BY T1.Localization ORDER BY AVG(T2.Chromosome) DESC LIMIT 1;
SELECT MAX(i.Expression_Corr) FROM Interactions i JOIN Classification c1 ON i.GeneID1 = c1.GeneID JOIN Classification c2 ON i.GeneID2 = c2.GeneID WHERE c1.Localization = 'nucleus' AND c2.Localization = 'nucleus';
SELECT G1.Function, G2.Function FROM Genes G1 JOIN Genes G2 ON G1.GeneID < G2.GeneID JOIN Interactions I ON (G1.GeneID = I.GeneID1 AND G2.GeneID = I.GeneID2) WHERE I.Expression_Corr = (SELECT MIN(Expression_Corr) FROM Interactions)
SELECT COUNT(*) FROM Interactions JOIN Genes g1 ON Interactions.GeneID1 = g1.GeneID JOIN Genes g2 ON Interactions.GeneID2 = g2.GeneID WHERE g1.Class != 'motorproteins' AND g2.Class != 'motorproteins' AND Interactions.Expression_Corr < 0;
SELECT MAX(i.Expression_Corr) FROM Interactions i JOIN Genes g1 ON i.GeneID1 = g1.GeneID JOIN Genes g2 ON i.GeneID2 = g2.GeneID WHERE g1.Chromosome = 8 AND g2.Chromosome = 6 OR (g1.Chromosome = 6 AND g2.Chromosome = 8);
SELECT G.Motif FROM Genes G JOIN Classification C ON G.GeneID = C.GeneID WHERE C.Localization = 'cytoplasm' AND G.Chromosome = 7;
SELECT COUNT(*) FROM Genes JOIN Classification ON Genes.GeneID = Classification.GeneID WHERE Genes.Essential = 'non-essential' AND Genes.Function = 'transcription' AND Classification.Localization != 'cytoplasm';
SELECT COUNT(*) FROM Interactions JOIN Genes g1 ON Interactions.GeneID1 = g1.GeneID JOIN Genes g2 ON Interactions.GeneID2 = g2.GeneID WHERE g1.Essential = 'Non-Essential' AND g2.Essential = 'Non-Essential' AND Interactions.Expression_Corr > 0;
SELECT     COUNT(CASE WHEN T1.Chromosome > 10 AND T2.Chromosome > 10 THEN 1 END) * 1.0 / COUNT(*) AS Possibility FROM     Interactions I JOIN     Genes T1 ON I.GeneID1 = T1.GeneID JOIN     Genes T2 ON I.GeneID2 = T2.GeneID WHERE     I.Expression_Corr > 0;
SELECT AVG(Interactions.Expression_Corr) FROM Interactions JOIN Genes AS Gene1 ON Interactions.GeneID1 = Gene1.GeneID JOIN Genes AS Gene2 ON Interactions.GeneID2 = Gene2.GeneID WHERE Gene1.Class = 'ATPases' AND Gene2.Class = 'ATPases';
SELECT Genes.GeneID FROM Genes JOIN Classification ON Genes.GeneID = Classification.GeneID WHERE Classification.Localization = 'cytoplasm' AND Genes.Function = 'metabolism';
SELECT COUNT(DISTINCT GeneID) FROM Classification WHERE Localization IN ('plasma', 'nucleus');
SELECT     Type,     AVG(CASE WHEN Expression_Corr < 0 THEN 1 ELSE 0 END) * 100 AS Negative_Correlation_Percentage FROM     Interactions WHERE     Type = 'physical' GROUP BY     Type;
SELECT     (COUNT(CASE WHEN G.Class = 'unknown' THEN G.GeneID END) * 100.0 / COUNT(G.GeneID)) AS Percentage_Unknown_Class,     COUNT(CASE WHEN G.Class = 'unknown' AND G.Phenotype != 'conditional' THEN G.GeneID END) AS Non_Conditional_Phenotype_Count FROM     Genes G JOIN     Classification C ON G.GeneID = C.GeneID WHERE     C.Localization = 'cytoskeleton';
SELECT i.Type FROM Interactions i JOIN Genes g ON i.GeneID1 = g.GeneID OR i.GeneID2 = g.GeneID WHERE g.Function = 'cellular transport' AND g.Phenotype = 'transport medicine' AND g.Essential = 'non-essential';
SELECT G.GeneID, G.Class, G.Complex, G.Phenotype, G.Motif, G.Chromosome, G.Function, G.Localization FROM Genes G JOIN Interactions I ON G.GeneID = I.GeneID1 JOIN Classification C ON G.GeneID = C.GeneID WHERE C.Localization = 'nucleus' AND I.Expression_Corr > 0;
SELECT COUNT(*) AS Num_Interaction, G.GeneID, G.Function FROM Genes G JOIN Classification C ON G.GeneID = C.GeneID JOIN Interactions I ON G.GeneID = I.GeneID1 OR G.GeneID = I.GeneID2 WHERE G.Essential = 'Yes' AND G.Class = 'transcription factors' AND C.Localization = 'nucleus' AND I.Type = 'genetic' GROUP BY G.GeneID;
Error: 第 2510 个样本有 2 个SQL。
SELECT     (COUNT(CASE WHEN I.Type = 'positive' THEN 1 END) * 100.0 / COUNT(I.GeneID1)) AS Positive_Interaction_Percentage FROM     Genes G JOIN     Interactions I ON G.GeneID = I.GeneID1 WHERE     G.Phenotype = 'nucleic acid metabolism defects' AND G.Motif = 'PS00107';
WITH NonEssentialNegCorr AS (     SELECT COUNT(*) AS NonEssentialCount     FROM Genes g     JOIN Interactions i ON g.GeneID = i.GeneID1     WHERE g.Essential = 'No' AND i.Expression_Corr < 0 ), EssentialNegCorr AS (     SELECT COUNT(*) AS EssentialCount     FROM Genes g     JOIN Interactions i ON g.GeneID = i.GeneID1     WHERE g.Essential = 'Yes' AND i.Expression_Corr < 0 ) SELECT     (NonEssentialNegCorr.NonEssentialCount::float /      (NonEssentialNegCorr.NonEssentialCount + EssentialNegCorr.EssentialCount)) * 100 AS PercentageOfNonEssential FROM NonEssentialNegCorr, EssentialNegCorr;
SELECT p.App, MIN(ur.Translated_Review) AS Positive_Review FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.Last_Updated BETWEEN '2018-01-01' AND '2018-01-31' AND ur.Sentiment = 'Positive' GROUP BY p.App;
SELECT COUNT(*), MAX(playstore.Last_Updated) FROM user_reviews JOIN playstore ON user_reviews.App = playstore.App WHERE user_reviews.Sentiment_Polarity >= 0 AND user_reviews.Sentiment_Polarity < 0.5 AND playstore.App = '7 Minute Workout';
SELECT COUNT(*), p.Rating FROM user_reviews AS ur JOIN playstore AS p ON ur.App = p.App WHERE ur.Sentiment = 'Neutral' AND ur.App = 'HTC Weather';
SELECT p.App, p.Category FROM playstore p JOIN user_reviews r ON p.App = r.App WHERE r.Sentiment_Polarity = -1 GROUP BY p.App, p.Category ORDER BY COUNT(r.Sentiment_Polarity) DESC LIMIT 1;
SELECT AVG(Sentiment_Polarity), Content_Rating FROM user_reviews JOIN playstore ON user_reviews.App = playstore.App WHERE user_reviews.App = 'Cooking Fever';
SELECT MIN(ur.Sentiment_Polarity), ps.Installs FROM user_reviews ur JOIN playstore ps ON ur.App = ps.App WHERE ur.App = 'Basketball Stars' AND ur.Sentiment_Polarity < -0.5;
SELECT COUNT(T1.Reviews), T1.Current_Ver FROM app_store.playstore AS T1 JOIN app_store.user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Akinator' AND T2.Sentiment_Subjectivity <= 0.5;
SELECT COUNT(*) FROM playstore WHERE Rating = 5;
SELECT App, Installs FROM playstore WHERE Type = 'Free' AND Price = 0 ORDER BY Installs DESC LIMIT 5;
SELECT App FROM playstore ORDER BY Reviews DESC LIMIT 10;
SELECT COUNT(ur.App), ps.Category FROM user_reviews ur JOIN playstore ps ON ur.App = ps.App WHERE ur.Sentiment = 'Neutral' AND ur.App = '10 Best Foods for You';
SELECT p.App, p.Installs FROM playstore p JOIN user_reviews r ON p.App = r.App WHERE r.Sentiment_Polarity = 'Positive';
SELECT playstore.App, user_reviews.Translated_Review FROM playstore JOIN user_reviews ON playstore.App = user_reviews.App WHERE playstore.Rating = 3.9;
Error: 第 2526 个样本有 2 个SQL。
SELECT playstore.App, SUM(user_reviews.Sentiment_Subjectivity) as Total_Sentiment_Subjectivity FROM playstore JOIN user_reviews ON playstore.App = user_reviews.App WHERE playstore.Genres > 1 GROUP BY playstore.App;
SELECT ur.App, ur.Sentiment FROM user_reviews ur JOIN playstore ps ON ur.App = ps.App WHERE ps.`Last Updated` < '2015-01-01';
SELECT SUM(p.Installs) AS total_installs, ur.Translated_Review FROM app_store.playstore p JOIN app_store.user_reviews ur ON p.App = ur.App WHERE p.`Content Rating` = 'Adults only 18+' GROUP BY ur.Translated_Review;
SELECT p.App, ur.Sentiment_Polarity FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.Price * CAST(REPLACE(p.Installs, '+', '') AS SIGNED) = (SELECT MAX(Price * CAST(REPLACE(Installs, '+', '') AS SIGNED)) FROM playstore)
SELECT AVG(T1.Rating) AS Average_Rating, COUNT(T2.Sentiment) AS Positive_Users FROM app_store.playstore AS T1 JOIN app_store.user_reviews AS T2 ON T1.App = T2.App WHERE T1.Category = 'COMICS' AND T2.Sentiment = 'Positive';
SELECT Rating FROM app_store.playstore WHERE App = 'Draw A Stickman';
SELECT COUNT(*) FROM user_reviews WHERE App = 'Brit + Co' AND Translated_Review IS NOT NULL;
SELECT App FROM playstore WHERE Genres = 'Shopping' ORDER BY Reviews DESC LIMIT 5;
SELECT COUNT(*) FROM user_reviews WHERE App = 'Dino War: Rise of Beasts' AND Sentiment = 'Neutral';
SELECT App FROM app_store.playstore WHERE Installs = '5,000+';
SELECT Translated_Review FROM user_reviews WHERE App = 'Dog Run - Pet Dog Simulator' AND Sentiment = 'Negative';
SELECT T1.App FROM playstore AS T1 JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Type = 'Free' AND T2.Sentiment = 'Negative' GROUP BY T1.App ORDER BY COUNT(T2.Sentiment) DESC LIMIT 1;
SELECT COUNT(*) FROM user_reviews JOIN playstore ON user_reviews.App = playstore.App WHERE playstore.Installs = '100,000,000+' AND user_reviews.Sentiment = 'Negative';
SELECT DISTINCT pr.Content_Rating FROM playstore pr JOIN user_reviews ur ON pr.App = ur.App WHERE ur.Translated_Review LIKE '%gr8%';
SELECT SUM(T2.Sentiment_Polarity) FROM playstore AS T1 JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Price = (SELECT MAX(Price) FROM playstore);
SELECT playstore.Rating, user_reviews.Translated_Review FROM playstore JOIN user_reviews ON playstore.App = user_reviews.App WHERE playstore.App = 'Garden Coloring Book';
SELECT T1.App, SUM(T2.Sentiment_Subjectivity) as total_subjectivity FROM app_store.playstore AS T1 JOIN app_store.user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres LIKE '%Photography%' GROUP BY T1.App ORDER BY total_subjectivity DESC LIMIT 1;
SELECT user_reviews.Translated_Review FROM user_reviews JOIN playstore ON user_reviews.App = playstore.App WHERE playstore.Content_Rating = 'Mature 17+' AND playstore.Rating = 1;
SELECT Installs FROM playstore WHERE App = (     SELECT App     FROM (         SELECT App, SUM(Sentiment_Polarity) as Total_Sentiment_Polarity         FROM user_reviews         GROUP BY App     )     ORDER BY Total_Sentiment_Polarity DESC     LIMIT 1 )
SELECT COUNT(*) FROM user_reviews JOIN playstore ON user_reviews.App = playstore.App WHERE playstore.Genres LIKE '%Weather%' AND user_reviews.Sentiment = 'Neutral';
SELECT playstore.App, COUNT(user_reviews.Translated_Review) AS NoCommentReviews FROM playstore JOIN user_reviews ON playstore.App = user_reviews.App WHERE playstore.Installs >= 1000000000 AND user_reviews.Translated_Review = 'nan' GROUP BY playstore.App ORDER BY NoCommentReviews DESC LIMIT 1;
SELECT playstore.Rating, SUM(user_reviews.Sentiment_Subjectivity) FROM playstore JOIN user_reviews ON playstore.App = user_reviews.App WHERE user_reviews.App = 'Onefootball - Soccer Scores';
SELECT     (COUNT(CASE WHEN T1.Content_Rating = 'Teen' AND T2.Translated_Review = 'nan' THEN 1 END) * 100.0 / COUNT(T2.Translated_Review)) AS Percentage FROM     playstore AS T1 JOIN     user_reviews AS T2 ON T1.App = T2.App WHERE     T2.Translated_Review = 'nan';
SELECT App FROM app_store.playstore WHERE Rating = 5;
SELECT App FROM playstore WHERE Reviews > 75000000 AND Content Rating = 'Teen';
SELECT Genre FROM playstore WHERE Installs = '1,000,000,000+';
SELECT AVG(Price) FROM playstore WHERE Genres = 'Dating';
SELECT AVG(Installs) FROM playstore WHERE Category = 'ENTERTAINMENT' AND Size <= '1.0 M';
SELECT AVG(Reviews) FROM playstore WHERE Rating = 5;
SELECT T1.Genres, COUNT(*) as Review_Count FROM app_store.playstore AS T1 JOIN app_store.user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment_Polarity > 0.5 GROUP BY T1.Genres ORDER BY Review_Count DESC LIMIT 3;
SELECT     (COUNT(CASE WHEN T2.Sentiment = 'Positive' THEN 1 END) * 100 /      (COUNT(CASE WHEN T2.Sentiment = 'Positive' THEN 1 END) +       COUNT(CASE WHEN T2.Sentiment = 'Negative' THEN 1 END))) AS percentage FROM     app_store.playstore AS T1 JOIN     app_store.user_reviews AS T2 ON T1.App = T2.App WHERE     T1.Rating = 4.7 AND     COUNT(CASE WHEN T2.Sentiment = 'Positive' THEN 1 END) >     COUNT(CASE WHEN T2.Sentiment = 'Negative' THEN 1 END) GROUP BY     T1.App;
SELECT playstore.App, AVG(playstore.Rating) as Average_Rating FROM playstore JOIN user_reviews ON playstore.App = user_reviews.App WHERE user_reviews.Sentiment != 'Negative' GROUP BY playstore.App;
SELECT     App,     (COUNT(CASE WHEN Sentiment = 'Negative' THEN 1 END) * 100 /      (COUNT(CASE WHEN Sentiment = 'Positive' THEN 1 END) + COUNT(CASE WHEN Sentiment = 'Negative' THEN 1 END))) AS Negative_Percentage FROM     app_store.playstore p JOIN     app_store.user_reviews r ON p.App = r.App WHERE     p."Last Updated" < '2015-12-31' GROUP BY     App;
SELECT     CAST(SUM(CASE WHEN Type = 'Free' AND Rating >= 4.5 AND SUBSTR(`Last Updated`,-4) < '2018' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage FROM     app_store.playstore WHERE     Rating >= 4.5 AND `Last Updated` <= '2018-12-31'
SELECT Genres FROM app_store.playstore WHERE App = 'Honkai Impact 3rd';
SELECT Rating FROM app_store.playstore WHERE App = 'Learn C++';
SELECT AVG(Price) FROM playstore WHERE Category = 'GAME' AND Genres LIKE '%Arcade%' AND `Content Rating` = 'Everyone 10+';
SELECT playstore.Size, COUNT(user_reviews.App) FROM playstore JOIN user_reviews ON playstore.App = user_reviews.App WHERE playstore.App = 'Browser 4G' AND user_reviews.Sentiment_Polarity = 0.5;
SELECT playstore.App, playstore.Installs FROM playstore JOIN user_reviews ON playstore.App = user_reviews.App WHERE user_reviews.Sentiment_Subjectivity = 0.3;
SELECT AVG(user_reviews.Sentiment_Polarity), playstore.Rating FROM user_reviews JOIN playstore ON user_reviews.App = playstore.App WHERE user_reviews.App = 'Golf GPS Rangefinder: Golf Pad';
SELECT p.App, p.Rating, COUNT(ur.Sentiment) as Negative_Sentiments FROM playstore p JOIN user_reviews ur ON p.App = ur.App WHERE p.Genres LIKE '%Puzzle%' AND ur.Sentiment = 'Negative' GROUP BY p.App, p.Rating ORDER BY p.Rating ASC LIMIT 5;
SELECT     App,     (SUM(CASE WHEN Sentiment = 'Positive' THEN 1 ELSE 0 END) * 100 / SUM(CASE WHEN Sentiment = 'Negative' THEN 1 ELSE 0 END)) AS Positive_to_Negative_Ratio,     MAX(CASE WHEN Sentiment = 'Positive' THEN Sentiment_Polarity ELSE NULL END) AS Max_Positive_Polarity,     MAX(CASE WHEN Sentiment = 'Negative' THEN Sentiment_Polarity ELSE NULL END) AS Max_Negative_Polarity FROM     app_store.user_reviews WHERE     App = 'Fate/Grand Order' GROUP BY     App;
SELECT playstore.Installs,        (SUM(CASE WHEN user_reviews.Sentiment = 'Positive' THEN 1 ELSE 0 END) * 100 / COUNT(user_reviews.Sentiment)) AS Positive_Sentiment_Percentage FROM app_store.playstore JOIN app_store.user_reviews ON playstore.App = user_reviews.App WHERE playstore.App = 'FREEDOME VPN Unlimited anonymous Wifi Security';
SELECT MAX(ur.Sentiment_Polarity), p.Genres FROM user_reviews ur JOIN playstore p ON ur.App = p.App WHERE p.App = 'Honkai Impact 3rd';
SELECT playstore.Rating, COUNT(user_reviews.Sentiment_Polarity) FROM playstore JOIN user_reviews ON playstore.App = user_reviews.App WHERE playstore.App = 'Dragon Ball Legends' AND user_reviews.Sentiment_Polarity < -0.5;
SELECT playstore.App, playstore.Rating, user_reviews.Translated_Review FROM playstore LEFT JOIN user_reviews ON playstore.App = user_reviews.App WHERE playstore.Category = 'EDUCATION' AND playstore.Rating = 1;
SELECT playstore.App, user_reviews.Translated_Review FROM playstore JOIN user_reviews ON playstore.App = user_reviews.App WHERE playstore.Type = 'Free' AND playstore.Category = 'SPORTS';
SELECT COUNT(DISTINCT p.App), AVG(ur.Sentiment_Polarity) FROM playstore AS p JOIN user_reviews AS ur ON p.App = ur.App WHERE p.Genres LIKE '%Role Playing%' AND p.Content_Rating = 'Teen';
SELECT AVG(playstore.Rating) AS avg_rating,        (SUM(CASE WHEN user_reviews.Sentiment = 'Positive' THEN 1 ELSE 0 END) / COUNT(user_reviews.Sentiment)) * 100 AS pos_sentiment_percentage FROM app_store.playstore JOIN app_store.user_reviews ON playstore.App = user_reviews.App WHERE playstore.Genres LIKE '%Racing%'
SELECT Region FROM (   SELECT Region, COUNT(SalesTeamID) as SalesTeamCount   FROM Sales Team   GROUP BY Region ) as T WHERE T.SalesTeamCount = (   SELECT MAX(SalesTeamCount)   FROM (     SELECT COUNT(SalesTeamID) as SalesTeamCount     FROM Sales Team     GROUP BY Region   ) )
SELECT * FROM Customers WHERE CustomerNames LIKE '%Group%';
SELECT AVG(MedianIncome) FROM StoreLocations WHERE Type = 'City';
SELECT SalesTeam, Region FROM Sales Team JOIN Sales Orders ON Sales Orders._SalesTeamID = Sales Team.SalesTeamID WHERE Sales Orders.OrderNumber = 'SO - 000137';
SELECT so.OrderNumber, p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE st.SalesTeam = 'Douglas Tucker';
SELECT Customers.CustomerNames FROM SalesOrders JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID JOIN Products ON SalesOrders._ProductID = Products.ProductID WHERE Products.ProductName = 'Cocktail Glasses' AND SalesOrders.OrderDate BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY Customers.CustomerNames ORDER BY MAX(SalesOrders.DiscountApplied) DESC LIMIT 1;
SELECT so.OrderNumber, sl.CityName FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE so.SalesChannel = 'In-Store';
SELECT Customers.CustomerNames, SalesOrders.OrderDate FROM SalesOrders JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID JOIN Products ON SalesOrders._ProductID = Products.ProductID WHERE SalesOrders.UnitCost = (SELECT MAX(UnitCost) FROM SalesOrders)
SELECT SO.OrderNumber FROM SalesOrders SO JOIN Customers C ON SO._CustomerID = C.CustomerID WHERE C.CustomerNames = 'Rochester Ltd' AND SUBSTR(SO.OrderDate, -2) = '18';
SELECT so.OrderNumber, p.ProductName, st.SalesTeam FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE so.WarehouseCode = 'WARE-NMK1003';
SELECT Customers.CustomerNames FROM Customers JOIN SalesOrders ON Customers.CustomerID = SalesOrders._CustomerID WHERE SalesOrders.SalesChannel = 'Online';
SELECT AVG((so.UnitPrice - so.UnitCost) * so.OrderQuantity) AS AvgNetProfit FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE p.ProductName = 'Bakeware';
SELECT T2.SalesTeam FROM ( SELECT _SalesTeamID, SUM((UnitPrice - UnitCost) * OrderQuantity) AS NetProfit FROM SalesOrders WHERE OrderDate LIKE '%/2020' GROUP BY _SalesTeamID ) AS T1 JOIN SalesTeam AS T2 ON T1._SalesTeamID = T2.SalesTeamID ORDER BY T1.NetProfit DESC LIMIT 1;
SELECT     SalesOrders.OrderNumber,     (SalesOrders.UnitPrice - SalesOrders.UnitCost) * SalesOrders.OrderQuantity AS NetProfit FROM     SalesOrders JOIN     SalesTeam ON SalesOrders._SalesTeamID = SalesTeam.SalesTeamID WHERE     SalesTeam.SalesTeam = 'Joshua Bennett';
SELECT     (COUNT(CASE WHEN Products.ProductName = 'Home Fragrances' THEN Sales_Orders.OrderNumber ELSE NULL END) * 100 / COUNT(Sales_Orders.OrderNumber)) AS Percentage FROM     Sales_Orders JOIN     Products ON Sales_Orders._ProductID = Products.ProductID WHERE     SUBSTR(Sales_Orders.ShipDate, 1, 2) = '07' AND     SUBSTR(Sales_Orders.ShipDate, -4) = '2018'
SELECT CustomerID, CustomerNames FROM Customers WHERE CustomerNames LIKE 'W%';
SELECT ProductID, ProductName FROM Products WHERE ProductName LIKE '%Outdoor%';
SELECT COUNT(*) FROM Sales_Orders WHERE Discount_Applied = 0.4 AND Sales_Channel = 'In-Store' AND WarehouseCode = 'WARE-NMK1003';
SELECT T1.CityName, T1.MedianIncome FROM `Store Locations` AS T1 JOIN `Regions` AS T2 ON T1.StateCode = T2.StateCode WHERE T2.State = 'Florida' ORDER BY T1.Population DESC LIMIT 1;
SELECT StoreID, City_Name, Region FROM Store_Locations WHERE County = 'Allen';
SELECT StoreID, CityName, State, Region FROM (     SELECT Type, COUNT(StoreID) as StoreCount     FROM Store_Locations     GROUP BY Type ) AS T WHERE Type IN ('Borough', 'CDP') AND StoreCount < (     SELECT COUNT(StoreID)     FROM Store_Locations     WHERE Type = (         SELECT Type         FROM (             SELECT Type, COUNT(StoreID) as StoreCount             FROM Store_Locations             GROUP BY Type         )         WHERE Type IN ('Borough', 'CDP')         ORDER BY StoreCount DESC         LIMIT 1     ) )
SELECT     R.Region,     ST."Sales Team" FROM     Sales Team ST JOIN     Regions R ON ST._Region = R._Region WHERE     ST.SalesTeamID = 18 GROUP BY     R.Region,     ST."Sales Team" HAVING     SUM(CASE WHEN S."Sales Channel" = 'In-Store' THEN 1 ELSE 0 END) >     SUM(CASE WHEN S."Sales Channel" = 'Online' THEN 1 ELSE 0 END)
SELECT     (COUNT(CASE WHEN Sales_Channel = 'In-Store' THEN OrderNumber END) * 100.0 / COUNT(OrderNumber)) AS percentage FROM     Sales_Orders JOIN     Customers ON Sales_Orders._CustomerID = Customers.CustomerID WHERE     Customers.CustomerNames = 'Medline';
SELECT     c.CustomerNames,     (s.DeliveryDate - s.OrderDate) as DeliveryPeriod FROM     Customers c JOIN     SalesOrders s ON c.CustomerID = s._CustomerID JOIN     Products p ON s._ProductID = p.ProductID WHERE     p.ProductName = 'Bedroom Furniture' AND     s.SalesChannel = 'Wholesale' AND     SUBSTR(s.OrderDate, -2) = '19'
SELECT Customers.CustomerNames, Products.ProductName FROM SalesOrders JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID JOIN Products ON SalesOrders._ProductID = Products.ProductID WHERE (SalesOrders.UnitPrice - SalesOrders.UnitCost) * SalesOrders.OrderQuantity > 3800;
SELECT     sl.City_Name, r.Region FROM     Store_Locations sl JOIN     Regions r ON sl.StateCode = r.StateCode WHERE     sl.Water_Area = 0 AND sl.State = 'California';
SELECT     (COUNT(CASE WHEN st.SalesTeam = 'Carlos Miller' THEN so.OrderNumber END) * 100.0 / COUNT(so.OrderNumber)) as percentage FROM     Sales_Orders so JOIN     Sales_Team st ON so._SalesTeamID = st.SalesTeamID;
SELECT     COUNT(CASE WHEN p.ProductName = 'Platters' THEN so.OrderNumber END) AS PlattersOrders,     COUNT(CASE WHEN p.ProductName = 'Serveware' THEN so.OrderNumber END) AS ServewareOrders FROM     Sales_Orders so JOIN     Products p ON so._ProductID = p.ProductID GROUP BY     p.ProductName;
SELECT SUM((so.UnitPrice - so.UnitCost) * so.OrderQuantity) AS TotalNetProfit FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE sl.MedianIncome = (SELECT MAX(MedianIncome) FROM StoreLocations)
SELECT COUNT(OrderNumber), _SalesTeamID FROM Sales Orders JOIN Sales Team ON Sales Orders._SalesTeamID = Sales Team.SalesTeamID WHERE Sales Team.Region = 'South' AND _SalesTeamID BETWEEN 1 AND 9 GROUP BY _SalesTeamID;
SELECT COUNT(OrderNumber) FROM Sales_Orders WHERE OrderDate = '2018-05-31';
SELECT `OrderNumber` FROM `Sales Orders` WHERE `DeliveryDate` = '2018-06-13';
SELECT COUNT(*) FROM Sales_Orders WHERE `Order Quantity` > 5;
SELECT State FROM Regions WHERE StateCode = 'GA';
SELECT COUNT(DISTINCT State) FROM Regions WHERE Region = 'Midwest';
SELECT Products.ProductName FROM SalesOrders JOIN Products ON SalesOrders._ProductID = Products.ProductID WHERE SalesOrders.UnitCost = 781.22;
SELECT so.DeliveryDate FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE p.ProductName = 'Cookware';
SELECT COUNT(Sales_Orders.OrderNumber) FROM Sales_Orders JOIN Products ON Sales_Orders._ProductID = Products.ProductID WHERE Products.Product_Name = 'Furniture Cushions' AND SUBSTR(Sales_Orders.OrderDate, -2) = '18';
SELECT DISTINCT p.ProductName FROM Products p JOIN SalesOrders so ON p.ProductID = so._ProductID WHERE so.DiscountApplied = 0.1;
SELECT AVG((SO.UnitPrice - SO.UnitCost)) FROM SalesOrders SO JOIN Products P ON SO._ProductID = P.ProductID WHERE P.ProductName = 'Phones' AND SO.SalesChannel = 'Distributor';
SELECT AVG((so.UnitPrice - so.UnitCost) * so.OrderQuantity) AS AvgNetProfit FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE p.ProductName = 'Bar Tools' AND so.OrderQuantity > 5;
SELECT DISTINCT Store Locations.City Name FROM Store Locations JOIN Regions ON Store Locations.StateCode = Regions.StateCode WHERE Regions.Region = 'South';
SELECT DISTINCT R.Region FROM Regions R JOIN Store_Locations SL ON R.StateCode = SL.StateCode WHERE SL.Type = 'Town';
SELECT COUNT(OrderNumber) FROM Sales_Orders WHERE _CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerNames = 'Medsep Group');
SELECT DISTINCT `Discount Applied` FROM `Sales Orders` WHERE `_CustomerID` = (SELECT `CustomerID` FROM `Customers` WHERE `Customer Names` = 'Ole Group');
SELECT Customers.CustomerNames FROM SalesOrders JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID WHERE SalesOrders.ShipDate = '2018-07-08';
SELECT COUNT(*) FROM Sales Orders JOIN Customers ON Sales Orders._CustomerID = Customers.CustomerID WHERE Customers.Customer Names = 'Ei' AND Sales Orders.Order Quantity > 4;
SELECT COUNT(OrderNumber) FROM Sales Orders JOIN Customers ON Sales Orders._CustomerID = Customers.CustomerID WHERE Customers.Customer Names = 'Pacific Ltd' AND Sales Orders.Discount Applied = 0.05;
SELECT Customers.CustomerNames FROM SalesOrders JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID WHERE SalesOrders.UnitCost > 4000;
SELECT StoreID, Latitude, Longitude FROM Store Locations WHERE City Name = 'Birmingham';
SELECT City_Name FROM Store_Locations WHERE Population = (SELECT MAX(Population) FROM Store_Locations);
SELECT COUNT(*) FROM Store_Locations WHERE State = 'California' AND Type = 'CDP';
SELECT so.OrderNumber, p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.UnitPrice = (SELECT MIN(UnitPrice) FROM SalesOrders);
SELECT p.ProductName, SUM((so.UnitPrice - so.UnitCost) * so.OrderQuantity) AS NetProfit FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE YEAR(so.OrderDate) = 2019 GROUP BY p.ProductName ORDER BY NetProfit DESC LIMIT 1;
Error: 第 2630 个样本有 2 个SQL。
SELECT DISTINCT st.SalesTeam FROM SalesTeam st JOIN SalesOrders so ON st.SalesTeamID = so._SalesTeamID WHERE so.OrderDate = '2018-05-31';
SELECT T2.SalesTeam FROM Sales_Orders AS T1 JOIN Sales_Team AS T2 ON T1._SalesTeamID = T2.SalesTeamID WHERE SUBSTR(T1.OrderDate, -2) = '19' GROUP BY T2.SalesTeam ORDER BY COUNT(T1.OrderNumber) LIMIT 1;
SELECT SUBSTR(OrderDate, -2) AS Year, COUNT(OrderNumber) AS NumberOfOrders FROM Sales Orders JOIN Sales Team ON Sales Orders._SalesTeamID = Sales Team.SalesTeamID WHERE Sales Team.Sales Team = 'George Lewis' AND SUBSTR(OrderDate, -2) IN ('18', '19', '20') GROUP BY SUBSTR(OrderDate, -2) ORDER BY NumberOfOrders DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN sl.County = 'Orange County' THEN so.OrderNumber END) * 100 / COUNT(so.OrderNumber)) AS percentage FROM     Sales_Orders so JOIN     Store_Locations sl ON so._StoreID = sl.StoreID WHERE     SUBSTR(so.OrderDate, -2) = '18'
SELECT OrderNumber FROM Sales_Orders WHERE Unit_Price = (SELECT MAX(Unit_Price) FROM Sales_Orders);
SELECT _SalesTeamID FROM Sales_Orders WHERE SUBSTR(OrderDate, -2) = '18' GROUP BY _SalesTeamID ORDER BY COUNT(OrderNumber) DESC LIMIT 1;
SELECT UnitCost FROM Sales_Orders WHERE OrderNumber = 'SO - 000103';
SELECT COUNT(OrderNumber) FROM Sales_Orders JOIN Store_Locations ON Sales_Orders._StoreID = Store_Locations.StoreID WHERE SUBSTR(OrderDate, -4) = '2020' AND Store_Locations.County = 'Maricopa County';
SELECT sl.Latitude, sl.Longitude FROM Store Locations sl JOIN Sales Orders so ON sl.StoreID = so._StoreID WHERE so.OrderNumber = 'SO - 000115';
SELECT COUNT(so.OrderNumber) AS TotalOrders, sl.CityName FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE so.OrderDate BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY sl.CityName;
SELECT Customers.Customer Names FROM Customers JOIN Sales Orders ON Customers.CustomerID = Sales Orders._CustomerID WHERE SUBSTR(Sales Orders.OrderDate, -2) = '18' GROUP BY Customers.CustomerID HAVING COUNT(Sales Orders.OrderNumber) > 3;
SELECT COUNT(OrderNumber) FROM Sales_Orders JOIN Customers ON Sales_Orders._CustomerID = Customers.CustomerID WHERE Customers.CustomerNames = 'Medsep Group' AND SUBSTR(OrderDate, -2) IN ('18', '19', '20');
SELECT Customers.CustomerNames FROM SalesOrders JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID WHERE SalesOrders.OrderDate = '2018-06-01' AND SalesOrders.OrderQuantity > 5;
SELECT     (COUNT(CASE WHEN (s.UnitPrice - s.UnitCost) > 1000 THEN so.OrderNumber END) * 100 / COUNT(so.OrderNumber)) AS PercentageOfOrdersOver1000 FROM     SalesOrders so JOIN     SalesTeam s ON so._SalesTeamID = s.SalesTeamID JOIN     (         SELECT             so2._ProductID,             so2.UnitPrice,             so2.UnitCost         FROM             SalesOrders so2     ) s ON so._ProductID = s._ProductID WHERE     s.SalesTeam = 'Stephen Payne';
SELECT COUNT(*) FROM Sales Team WHERE Region = 'Northeast';
SELECT City_Name, Latitude, Longitude FROM Store_Locations WHERE County = 'Maricopa';
Error: 第 2647 个样本有 2 个SQL。
SELECT ProductName FROM Products WHERE ProductID BETWEEN 30 AND 40;
SELECT CAST(MAX(Unit_Cost) AS FLOAT) / MIN(Unit_Cost) AS Ratio FROM `regional_sales.Sales Orders`;
SELECT p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE SUBSTR(so.OrderDate, -2) = '18' GROUP BY so._ProductID, p.ProductName ORDER BY COUNT(so.OrderNumber) DESC LIMIT 1;
SELECT SUM(so.Order Quantity) FROM Sales Orders so JOIN Sales Team st ON so._SalesTeamID = st.SalesTeamID WHERE st.SalesTeam = 'Adam Hernandez';
SELECT so.OrderNumber FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE sl.CityName = 'Daly City';
SELECT COUNT(OrderNumber) FROM Sales_Orders WHERE _CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerNames = 'Rochester Ltd');
SELECT so.OrderNumber FROM SalesOrders so JOIN Customers c ON so._CustomerID = c.CustomerID WHERE c.CustomerNames = 'Qualitest' ORDER BY so.OrderQuantity DESC LIMIT 1;
SELECT so.OrderNumber, p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.SalesChannel = 'In-Store';
SELECT COUNT(*) FROM Sales_Orders WHERE Sales_Channel = 'Online' AND OrderDate LIKE '5/%/18' AND _StoreID IN (SELECT StoreID FROM Store_Locations WHERE City_Name = 'Norman');
SELECT p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE sl.County = 'Maricopa' GROUP BY so._ProductID, p.ProductName HAVING so.OrderQuantity = (     SELECT MIN(OrderQuantity)     FROM SalesOrders     WHERE _StoreID IN (         SELECT StoreID         FROM StoreLocations         WHERE County = 'Maricopa'     ) );
SELECT so.OrderNumber FROM Sales Orders so JOIN Sales Team st ON so._SalesTeamID = st.SalesTeamID WHERE st.SalesTeam = 'Samuel Fowler';
SELECT COUNT(*) FROM Sales_Orders JOIN Products ON Sales_Orders._ProductID = Products.ProductID WHERE Products.ProductName = 'Baseball' AND Sales_Orders.OrderDate LIKE '12/%/17';
SELECT AVG(ornaments_sold) AS Average_Ornaments_Sold_Per_Month FROM (     SELECT COUNT(OrderQuantity) AS ornaments_sold     FROM Sales_Orders     JOIN Products ON Sales_Orders._ProductID = Products.ProductID     WHERE Products.ProductName = 'Ornaments'     AND YEAR(OrderDate) = 2018     GROUP BY MONTH(OrderDate) ) AS monthly_sales;
SELECT     (SUM(CASE WHEN sl.City_Name = 'Burbank' THEN so.Order_Quantity ELSE 0 END) * 100 / SUM(so.Order_Quantity)) AS percentage FROM     Sales_Orders so JOIN     Store_Locations sl ON so._StoreID = sl.StoreID WHERE     SUBSTR(so.OrderDate, -2) = '18';
SELECT     (SELECT COUNT(OrderNumber) FROM Sales_Orders WHERE WarehouseCode = 'WARE-MKL1006') -     (SELECT COUNT(OrderNumber) FROM Sales_Orders WHERE WarehouseCode = 'WARE-NBV1002') AS Difference_in_Order_Number;
SELECT p.ProductName FROM SalesOrders so JOIN Customers c ON c.CustomerID = so._CustomerID JOIN Products p ON p.ProductID = so._ProductID WHERE c.CustomerNames = 'Sundial' AND YEAR(DeliveryDate) = 2021;
SELECT StoreLocations.StoreID, Regions.Region FROM StoreLocations JOIN Regions ON StoreLocations.StateCode = Regions.StateCode WHERE Regions.State = 'Michigan';
SELECT     CustomerNames,     COUNT(OrderNumber) AS TotalOrders FROM     Customers JOIN     Sales_Orders ON Customers.CustomerID = Sales_Orders._CustomerID WHERE     CustomerNames IN ('Apollo Ltd', 'Pacific Ltd') GROUP BY     CustomerNames;
SELECT sl.StoreID FROM Sales_Orders so JOIN Store_Locations sl ON so._StoreID = sl.StoreID WHERE sl.City_Name = 'Aurora (Township)' OR sl.City_Name = 'Babylon (Town)' GROUP BY sl.StoreID ORDER BY COUNT(so.OrderNumber) DESC LIMIT 1;
SELECT Customers.CustomerNames, Products.ProductName FROM SalesOrders JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID JOIN Products ON SalesOrders._ProductID = Products.ProductID JOIN SalesTeam ON SalesOrders._SalesTeamID = SalesTeam.SalesTeamID WHERE SalesTeam.SalesTeam = 'Anthony Torres' AND SalesOrders.SalesChannel = 'Distributor';
SELECT Customers.CustomerID, Customers.CustomerNames FROM Customers JOIN SalesOrders ON Customers.CustomerID = SalesOrders._CustomerID WHERE SalesOrders.SalesChannel = 'Online' GROUP BY Customers.CustomerID, Customers.CustomerNames HAVING SUM(SalesOrders.UnitPrice - SalesOrders.UnitCost) > 5000;
SELECT SUM((SO.UnitPrice - SO.UnitCost) * SO.OrderQuantity) AS NetProfit FROM SalesOrders SO JOIN Products P ON SO._ProductID = P.ProductID WHERE P.ProductName = 'Floral' AND YEAR(SO.DeliveryDate) = 2021;
SELECT COUNT(OrderNumber) FROM Sales Orders JOIN Store Locations ON Sales Orders._StoreID = Store Locations.StoreID WHERE Store Locations.Population BETWEEN 3000000 AND 4000000;
SELECT p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE so.SalesChannel = 'Wholesale' AND sl.TimeZone = 'Pacific/Honolulu';
SELECT so.OrderNumber, p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.OrderDate = '2018-06-06';
Error: 第 2673 个样本有 2 个SQL。
SELECT     COUNT(s.OrderNumber) / 12 AS avg_monthly_orders,     (COUNT(CASE WHEN s.WarehouseCode = 'WARE-NMK1003' THEN s.OrderNumber END) / COUNT(s.OrderNumber)) * 100 AS warehouse_percentage,     COUNT(CASE WHEN p.ProductName = 'Floor Lamps' THEN s.OrderNumber END) AS floor_lamp_orders FROM Sales_Orders s JOIN Products p ON s._ProductID = p.ProductID WHERE SUBSTR(s.OrderDate, -2) = '19' GROUP BY s.WarehouseCode;
SELECT ProcuredDate FROM Sales_Orders WHERE _CustomerID = 11;
Error: 第 2676 个样本有 3 个SQL。
SELECT DISTINCT st.SalesTeamID FROM SalesOrders so JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE so.DiscountApplied = 0.1 AND so.SalesChannel = 'In-Store';
SELECT COUNT(*) FROM Store_Locations WHERE City_Name = 'Brooklyn' AND Population < 3000000 AND Type = 'Borough';
SELECT COUNT(DISTINCT State) FROM Regions WHERE Region = 'Midwest';
SELECT TOP 10 p.ProductName, SUM((so.UnitPrice - so.UnitCost) * so.OrderQuantity) as NetProfit FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID GROUP BY p.ProductName ORDER BY NetProfit DESC;
SELECT C.CustomerNames FROM Customers C JOIN SalesOrders SO ON C.CustomerID = SO._CustomerID WHERE SO.OrderQuantity = 3 AND SO.OrderDate LIKE '2/%/18';
SELECT st.Sales_Team FROM Sales_Orders so JOIN Sales_Team st ON so._SalesTeamID = st.SalesTeamID JOIN Customers c ON so._CustomerID = c.CustomerID WHERE c.Customer_Names = 'Apotheca, Ltd'
SELECT DISTINCT R.Region FROM Regions R JOIN Store Locations SL ON R.StateCode = SL.StateCode JOIN Sales Orders SO ON SL.StoreID = SO._StoreID WHERE SO.WarehouseCode = 'WARE-UHY1004';
SELECT DISTINCT Store_Locations.City_Name FROM Sales_Orders JOIN Sales_Team ON Sales_Orders._SalesTeamID = Sales_Team.SalesTeamID JOIN Products ON Sales_Orders._ProductID = Products.ProductID JOIN Store_Locations ON Sales_Orders._StoreID = Store_Locations.StoreID WHERE Sales_Team.Sales_Team = 'Shawn Torres' AND Products.Product_Name = 'Audio';
SELECT Customers.CustomerNames, Products.ProductName FROM SalesOrders JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID JOIN Products ON SalesOrders._ProductID = Products.ProductID WHERE SalesOrders.OrderDate = '10/21/18' AND SalesOrders.DeliveryDate = '11/21/19';
SELECT COUNT(DISTINCT s.StoreID) FROM SalesOrders so JOIN StoreLocations s ON so._StoreID = s.StoreID WHERE so.ProcuredDate = '2018-10-27' AND s.State = 'Oregon';
SELECT Sales_Channel, COUNT(*) as Channel_Usage FROM Sales_Orders WHERE _StoreID IN (     SELECT StoreID     FROM (         SELECT StoreID, Median_Income,                DENSE_RANK() OVER (ORDER BY Median_Income DESC) as Median_Income_Rank         FROM Store_Locations     ) subquery     WHERE Median_Income_Rank <= 3 ) GROUP BY Sales_Channel ORDER BY Channel_Usage DESC;
SELECT TOP 5     st.SalesTeam,     SUM(so.UnitPrice - so.UnitCost) AS NetProfit FROM     SalesOrders so JOIN     SalesTeam st ON so._SalesTeamID = st.SalesTeamID GROUP BY     st.SalesTeam ORDER BY     NetProfit DESC;
SELECT MAX(Sales_Orders.Discount_Applied) FROM Sales_Orders JOIN Store_Locations ON Sales_Orders._StoreID = Store_Locations.StoreID WHERE Store_Locations.State = 'Colorado' AND Store_Locations.Land_Area = 111039036;
Error: 第 2690 个样本有 2 个SQL。
SELECT T1.Type, COUNT(T1.Type) as StoreCount FROM `Store Locations` AS T1 JOIN `Regions` AS T2 ON T1.StateCode = T2.StateCode WHERE T2.Region = 'South' GROUP BY T1.Type ORDER BY StoreCount DESC LIMIT 1;
SELECT R.Region FROM (   SELECT S._SalesTeamID, COUNT(*) as cnt   FROM SalesOrders S   WHERE S.WarehouseCode = 'WARE-MKL1006'   GROUP BY S._SalesTeamID ) AS T JOIN SalesTeam ST ON T._SalesTeamID = ST.SalesTeamID JOIN Regions R ON ST.Region = R.Region ORDER BY T.cnt DESC LIMIT 1;
SELECT sl.CityName FROM Store_Locations sl JOIN Sales_Orders so ON sl.StoreID = so._StoreID WHERE so.Unit_Price = (SELECT MAX(Unit_Price) FROM Sales_Orders)
SELECT COUNT(*) FROM Sales_Orders JOIN Customers ON Sales_Orders._CustomerID = Customers.CustomerID WHERE Customers.CustomerNames = 'Ole Group' AND Sales_Orders.Sales_Channel = 'Online' AND Sales_Orders.OrderDate LIKE '5/%/19'
SELECT COUNT(*) FROM Store_Locations sl JOIN Sales_Orders so ON sl.StoreID = so._StoreID WHERE so.Order_Quantity = 1 AND so.Sales_Channel = 'Distributor' AND sl.County = 'Washtenaw County';
SELECT p.ProductName FROM Products p JOIN SalesOrders so ON p.ProductID = so._ProductID JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE sl.CityName = 'Santa Clarita' GROUP BY p.ProductName ORDER BY COUNT(p.ProductName) ASC LIMIT 1;
SELECT sl.Latitude, sl.Longitude FROM Store_Locations sl JOIN Sales_Orders so ON sl.StoreID = so._StoreID WHERE so.WarehouseCode = 'WARE-PUJ1005' GROUP BY sl.StoreID, sl.Latitude, sl.Longitude ORDER BY COUNT(so.WarehouseCode) LIMIT 1;
SELECT     (COUNT(CASE WHEN sl.City_Name = 'New York' THEN so.OrderNumber END) * 100.0 / COUNT(so.OrderNumber)) AS NY_Sales_Percentage FROM     Sales_Orders so JOIN     Store_Locations sl ON so._StoreID = sl.StoreID WHERE     so.OrderDate = '2020-04-04';
SELECT AVG(Store_Locations.Land_Area) FROM Sales_Orders JOIN Store_Locations ON Sales_Orders._StoreID = Store_Locations.StoreID WHERE Sales_Orders.Unit_Price = 998.30;
SELECT AVG(HouseholdIncome) FROM StoreLocations WHERE State = 'New Hampshire' AND Type = 'City';
SELECT COUNT(*) FROM Sales Team WHERE Region = 'Midwest';
SELECT OrderNumber FROM Sales Orders WHERE OrderDate > '2018-01-01';
SELECT COUNT(DISTINCT SalesChannel) FROM Sales_Orders JOIN Sales_Team ON Sales_Orders._SalesTeamID = Sales_Team.SalesTeamID JOIN Regions ON Sales_Team.Region = Regions.Region WHERE Regions.Region = 'Midwest';
SELECT st.SalesTeam FROM SalesOrders so JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE so.UnitPrice = (SELECT MAX(UnitPrice) FROM SalesOrders)
SELECT R.Region FROM Regions R JOIN Sales Team ST ON R.StateCode = ST.Region JOIN Sales Orders SO ON ST.SalesTeamID = SO._SalesTeamID WHERE SO.Sales_Channel = 'Online' GROUP BY R.Region ORDER BY MAX(SO.Discount_Applied) DESC LIMIT 1;
SELECT Customers.CustomerNames, SalesOrders.OrderNumber, SalesOrders.OrderDate, MAX(SalesOrders.UnitPrice) as MostExpensiveUnitPrice FROM SalesOrders INNER JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID WHERE Customers.CustomerNames = 'Apollo Ltd' GROUP BY Customers.CustomerNames, SalesOrders.OrderNumber, SalesOrders.OrderDate ORDER BY MostExpensiveUnitPrice DESC LIMIT 1;
SELECT SO.OrderNumber, SO.WarehouseCode FROM SalesOrders AS SO JOIN Customers AS C ON SO._CustomerID = C.CustomerID WHERE C.CustomerNames = 'Elorac, Corp';
SELECT Customers.CustomerNames FROM SalesOrders JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID JOIN Products ON SalesOrders._ProductID = Products.ProductID WHERE Products.ProductName = 'Cocktail Glasses' AND SalesOrders.SalesChannel = 'Online';
SELECT sl.StoreID, SUM((so.UnitPrice - so.UnitCost) * so.OrderQuantity) as NetProfit FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE sl.State = 'Arizona' GROUP BY sl.StoreID ORDER BY NetProfit DESC LIMIT 1;
SELECT     (SELECT AVG(UnitPrice)      FROM SalesOrders      INNER JOIN StoreLocations ON SalesOrders._StoreID = StoreLocations.StoreID      INNER JOIN Products ON SalesOrders._ProductID = Products.ProductID      WHERE StoreLocations.State = 'Florida' AND Products.ProductName = 'Computers') -     (SELECT AVG(UnitPrice)      FROM SalesOrders      INNER JOIN StoreLocations ON SalesOrders._StoreID = StoreLocations.StoreID      INNER JOIN Products ON SalesOrders._ProductID = Products.ProductID      WHERE StoreLocations.State = 'Texas' AND Products.ProductName = 'Computers') AS PriceDifference;
SELECT st.SalesTeam FROM SalesOrders so JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID JOIN Regions r ON st.Region = r.Region WHERE r.Region = 'Midwest' AND so.OrderQuantity > 5 GROUP BY st.SalesTeam;
SELECT sl.StoreID FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID WHERE sl.State = 'California' AND so.SalesChannel = 'In-Store' AND so.DiscountApplied = 0.2;
SELECT C.CustomerNames FROM Customers C JOIN SalesOrders SO ON C.CustomerID = SO._CustomerID WHERE SO.OrderDate BETWEEN '2018-01-01' AND '2020-12-31' GROUP BY C.CustomerNames ORDER BY SUM(SO.OrderQuantity) DESC LIMIT 1;
SELECT     SUM(CASE WHEN p.ProductName = 'Candles' THEN so.OrderQuantity ELSE 0 END) AS TotalCandlesQuantity,     (SUM(CASE WHEN p.ProductName = 'Candles' THEN so.OrderQuantity ELSE 0 END) / SUM(so.OrderQuantity)) * 100 AS PercentageOfCandles FROM     Sales_Orders so JOIN     Products p ON so._ProductID = p.ProductID;
SELECT R.Region FROM Sales Team ST JOIN Regions R ON ST.Region = R.StateCode WHERE ST.`Sales Team` = 'Joshua Bennett';
SELECT StoreID FROM Store_Locations WHERE Population = (SELECT MAX(Population) FROM Store_Locations);
SELECT COUNT(*) FROM Sales Team WHERE Region = 'Midwest';
SELECT T1.Type FROM Store_Locations AS T1 JOIN (     SELECT MAX(Water_Area) AS MaxWaterArea     FROM Store_Locations     WHERE Type = 'City' ) AS T2 ON T1.Water_Area = T2.MaxWaterArea
SELECT COUNT(*) FROM Sales_Orders WHERE Sales_Channel = 'Online' AND SUBSTR(ShipDate, 1, 1) = '6' AND SUBSTR(ShipDate,-4) = '2018';
SELECT DiscountApplied FROM SalesOrders WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM SalesOrders);
SELECT p.ProductName FROM Products p JOIN SalesOrders so ON p.ProductID = so._ProductID WHERE (so.UnitPrice - so.UnitCost) = (     SELECT MAX(so2.UnitPrice - so2.UnitCost)     FROM SalesOrders so2 );
SELECT     City_Name,     AVG(Household_Income) as Average_Household_Income FROM     (     SELECT         City_Name,         Household_Income,         StateCode,         COUNT(StoreID) as Store_Count     FROM         Store_Locations     WHERE         Region = 'Northeast'     GROUP BY         City_Name,         Household_Income,         StateCode     HAVING         Store_Count = (             SELECT                 MAX(Count_Store)             FROM                 (                 SELECT                     StateCode,                     COUNT(StoreID) as Count_Store                 FROM                     Store_Locations                 WHERE                     Region = 'Northeast'                 GROUP BY                     StateCode                 ) as Store_Counts         )     ) GROUP BY     City_Name;
SELECT DISTINCT R.Region FROM Regions R JOIN Store_Locations SL ON R.StateCode = SL.StateCode WHERE SL.MedianIncome < 30000;
SELECT COUNT(*) FROM Store_Locations WHERE Region = 'West' AND Land_Area < 20000000;
SELECT C.CustomerNames FROM Customers C JOIN SalesOrders SO ON C.CustomerID = SO._CustomerID JOIN Products P ON P.ProductID = SO._ProductID WHERE (P.UnitPrice - P.UnitCost) = (     SELECT MAX(UnitPrice - UnitCost)     FROM Products )
SELECT T2.SalesTeam, COUNT(T1.OrderNumber) AS NumberOfOrders FROM `Sales Orders` AS T1 JOIN `Sales Team` AS T2 ON T1._SalesTeamID = T2.SalesTeamID WHERE SUBSTR(T1.ShipDate, -2) = '19' AND SUBSTR(T1.OrderDate, -2) = '19' GROUP BY T2.SalesTeam ORDER BY NumberOfOrders DESC LIMIT 1;
SELECT P.ProductName FROM SalesOrders SO JOIN Products P ON SO._ProductID = P.ProductID WHERE SO.OrderQuantity >= 5 AND SO.ShipDate LIKE '5/%/19' GROUP BY P.ProductName, (SO.UnitPrice - SO.UnitCost) ORDER BY (SO.UnitPrice - SO.UnitCost) ASC LIMIT 1;
SELECT sl.Latitude, sl.Longitude FROM StoreLocations sl JOIN SalesOrders so ON sl.StoreID = so._StoreID JOIN Products p ON p.ProductID = so._ProductID WHERE p.ProductID = (     SELECT ProductID     FROM (         SELECT ProductID, (UnitPrice - UnitCost) as NetProfit,         ROW_NUMBER() OVER (ORDER BY (UnitPrice - UnitCost) DESC) as ProfitRank         FROM SalesOrders     ) tmp     WHERE ProfitRank = 4 )
SELECT T1.SalesTeam, COUNT(T2.OrderNumber) AS NumberOfOrders FROM `Sales Team` AS T1 JOIN `Sales Orders` AS T2 ON T1.SalesTeamID = T2._SalesTeamID WHERE SUBSTR(T2.ShipDate, -2) = '20' GROUP BY T1.SalesTeam ORDER BY NumberOfOrders DESC LIMIT 1;
SELECT AVG(Shipped_Orders_Count) AS Average_Shipped_Orders_Per_Year FROM (     SELECT COUNT(DISTINCT OrderNumber) AS Shipped_Orders_Count     FROM Sales_Orders     WHERE SUBSTR(ShipDate, -2) IN ('18', '19', '20') AND _SalesTeamID = (         SELECT SalesTeamID         FROM Sales_Team         WHERE `Sales Team` = 'Carl Nguyen'     )     GROUP BY YEAR(ShipDate) ) AS SubQuery
SELECT p.ProductName, sa.DiscountApplied FROM (     SELECT so._ProductID, MAX(so.UnitPrice - so.UnitCost) as NetProfit     FROM SalesOrders so     GROUP BY so._ProductID ) as np JOIN Products p ON np._ProductID = p.ProductID JOIN SalesOrders so ON np._ProductID = so._ProductID AND np.NetProfit = (so.UnitPrice - so.UnitCost) WHERE np.NetProfit = (     SELECT MAX(NetProfit)     FROM (         SELECT so._ProductID, MAX(so.UnitPrice - so.UnitCost) as NetProfit         FROM SalesOrders so         GROUP BY so._ProductID     ) as t )
Error: 第 2732 个样本有 2 个SQL。
SELECT Sales_Channel, COUNT(OrderNumber) as Total_Orders FROM Sales_Orders WHERE SUBSTR(OrderDate, 7, 2) = '01' AND SUBSTR(OrderDate, -2) = '20' GROUP BY Sales_Channel ORDER BY Total_Orders DESC LIMIT 1;
SELECT p.ProductName FROM SalesOrders so JOIN Products p ON so._ProductID = p.ProductID WHERE so.OrderNumber = 'SO - 0005951';
SELECT sl.CityName, st.SalesTeam FROM SalesOrders so JOIN StoreLocations sl ON so._StoreID = sl.StoreID JOIN SalesTeam st ON so._SalesTeamID = st.SalesTeamID WHERE so.OrderNumber = 'SO - 0001004';
SELECT Customers.CustomerNames, SUM((SalesOrders.UnitPrice - SalesOrders.UnitCost) * SalesOrders.OrderQuantity) AS NetProfit FROM SalesOrders JOIN Customers ON SalesOrders._CustomerID = Customers.CustomerID JOIN StoreLocations ON SalesOrders._StoreID = StoreLocations.StoreID WHERE StoreLocations.CityName = 'Gilbert' AND StoreLocations.State = 'Arizona' AND SalesOrders.ProcuredDate LIKE '%/19' GROUP BY Customers.CustomerNames ORDER BY NetProfit DESC LIMIT 1;
SELECT COUNT(*) FROM Sales_Orders JOIN Store_Locations ON Sales_Orders._StoreID = Store_Locations.StoreID WHERE Store_Locations.City_Name = 'Chandler' AND Substr(Sales_Orders.OrderDate, -4) = '2020';
SELECT AVG(HouseholdIncome) FROM StoreLocations WHERE CityName = 'Glendale';
Error: 第 2739 个样本有 2 个SQL。
WITH RECURSIVE TiedGames AS (   SELECT     AwayTeam,     FTR,     Date,     LAG(Date) OVER (PARTITION BY AwayTeam ORDER BY Date) PrevDate,     ROW_NUMBER() OVER (PARTITION BY AwayTeam ORDER BY Date) -       ROW_NUMBER() OVER (PARTITION BY AwayTeam, FTR ORDER BY Date) Grp   FROM     matchs   WHERE     AwayTeam = 'Ebbsfleet' AND     FTR = 'D' AND     season = 2008 ) SELECT   COUNT(*) MaxTies FROM   TiedGames tg WHERE   tg.PrevDate = DATE_SUB(tg.Date, INTERVAL 1 DAY) GROUP BY   Grp ORDER BY   MaxTies DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN country = 'England' THEN division END) * 100 / COUNT(division)) AS percentage FROM     divisions;
SELECT     (COUNT(CASE WHEN FTR = 'H' THEN 1 END) * 100.0 / COUNT(*)) AS Win_Percentage,     (COUNT(CASE WHEN FTR = 'A' THEN 1 END) * 100.0 / COUNT(*)) AS Loss_Percentage,     (COUNT(CASE WHEN FTR = 'D' THEN 1 END) * 100.0 / COUNT(*)) AS Draw_Percentage FROM matchs WHERE HomeTeam = 'Cittadella';
SELECT AwayTeam,        COUNT(CASE WHEN FTR = 'A' THEN 1 END) * 1.0 / COUNT(*) AS percentage FROM matchs WHERE HomeTeam = 'Caen' AND season = '2010' GROUP BY AwayTeam ORDER BY percentage DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN Div = 'F1' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM     matchs WHERE     Date = '2005-07-30';
SELECT     (COUNT(CASE WHEN FTR = 'D' AND (HomeTeam = 'Sassuolo' OR AwayTeam = 'Sassuolo') THEN 1 END) * 100.0 / COUNT(*) OVER (PARTITION BY HomeTeam, AwayTeam)) AS percentage FROM     matchs WHERE     HomeTeam = 'Sassuolo' OR AwayTeam = 'Sassuolo';
SELECT     (COUNT(CASE WHEN FTAG = 2 THEN Div END) * 100.0 / COUNT(Div)) AS percentage FROM     matchs WHERE     season = 2017;
Error: 第 2747 个样本有 2 个SQL。
SELECT COUNT(DISTINCT HomeTeam) FROM matchs WHERE Div IN (SELECT division FROM divisions WHERE country = 'Greece') AND FTHG >= 4 UNION SELECT COUNT(DISTINCT AwayTeam) FROM matchs WHERE Div IN (SELECT division FROM divisions WHERE country = 'Greece') AND FTAG >= 4;
SELECT COUNT(*) FROM matchs WHERE Div = (SELECT division FROM divisions WHERE name = 'Scottish Championship') AND season = '2019' AND FTHG = 2 AND FTAG = 2;
SELECT HomeTeam, season FROM matchs JOIN divisions ON matchs.Div = divisions.division WHERE divisions.country = 'Scotland' AND matchs.FTHG = 10;
SELECT HomeTeam,        COUNT(*) * 100.0 / (SELECT COUNT(*) FROM matchs WHERE Div IN (SELECT division FROM divisions WHERE name = 'LaLiga' AND country = 'Spain') AND season = 2017) AS percentage FROM matchs WHERE Div IN (SELECT division FROM divisions WHERE name = 'LaLiga' AND country = 'Spain') AND season = 2017 AND FTR = 'H' GROUP BY HomeTeam ORDER BY COUNT(*) DESC LIMIT 1;
SELECT     d.division,     COUNT(DISTINCT CASE WHEN m.HomeTeam <> m.AwayTeam THEN m.HomeTeam ELSE NULL END) +     COUNT(DISTINCT CASE WHEN m.HomeTeam <> m.AwayTeam THEN m.AwayTeam ELSE NULL END) AS TotalTeams,     (COUNT(DISTINCT CASE WHEN m.HomeTeam <> m.AwayTeam AND d.division = m.Div THEN m.HomeTeam ELSE NULL END) +     COUNT(DISTINCT CASE WHEN m.HomeTeam <> m.AwayTeam AND d.division = m.Div THEN m.AwayTeam ELSE NULL END)) /     (COUNT(DISTINCT CASE WHEN m.HomeTeam <> m.AwayTeam THEN m.HomeTeam ELSE NULL END) +     COUNT(DISTINCT CASE WHEN m.HomeTeam <> m.AwayTeam THEN m.AwayTeam ELSE NULL END)) * 100 AS Percentage FROM     divisions d JOIN     matchs m ON d.division = m.Div WHERE     d.country = 'England' AND m.season = '2012' GROUP BY     d.division;
SELECT MAX(FTHG + FTAG) AS TotalScore, HomeTeam AS ScoringTeam FROM matchs WHERE season = 2021 UNION ALL SELECT MAX(FTHG + FTAG) AS TotalScore, AwayTeam AS ScoringTeam FROM matchs WHERE season = 2021 ORDER BY TotalScore DESC LIMIT 1;
SELECT HomeTeam FROM matchs WHERE Div = 'P1' ORDER BY FTHG DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN FTR = 'H' AND season = 2010 THEN 1 END) * 1.0 / COUNT(*) -      COUNT(CASE WHEN FTR = 'A' AND season = 2010 THEN 1 END) * 1.0 / COUNT(*)) * 100 as percentage FROM matchs WHERE season = 2010;
SELECT Div FROM matchs WHERE season = '2008' AND FTR = 'D' GROUP BY Div ORDER BY COUNT(Div) DESC LIMIT 1;
SELECT HomeTeam FROM matchs WHERE Div='EC' AND Date='2008-01-20' AND FTR='H';
SELECT d.name FROM divisions d JOIN matchs m ON d.division = m.Div WHERE m.Date = '2009-09-13' AND m.HomeTeam = 'Club Brugge' AND m.AwayTeam = 'Genk';
SELECT COUNT(*) FROM matchs WHERE Div = 'Scottish Premiership' AND season BETWEEN 2006 AND 2008;
SELECT d.division, d.country FROM divisions d JOIN matchs m ON d.division = m.Div WHERE m.AwayTeam = 'Hibernian' AND m.HomeTeam = 'Hearts';
SELECT AwayTeam FROM matchs WHERE Div = 'Bundesliga' GROUP BY AwayTeam ORDER BY SUM(FTAG) DESC LIMIT 1;
SELECT AwayTeam FROM matchs WHERE Div IN (SELECT division FROM divisions WHERE country = 'Italy') LIMIT 3;
SELECT d.name FROM divisions d JOIN matchs m ON d.division = m.Div WHERE m.FTR = 'D' AND m.season = '2019' GROUP BY d.name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(*) FROM matchs JOIN divisions ON matchs.Div = divisions.division WHERE divisions.name = 'LaLiga' AND matchs.HomeTeam = 'Valencia' AND matchs.FTR = 'H';
SELECT COUNT(*) FROM matchs WHERE Div = (SELECT division FROM divisions WHERE name = 'Seria A') AND FTR = 'D';
SELECT COUNT(*) FROM divisions WHERE country = 'England';
SELECT name FROM divisions WHERE country = 'Netherlands';
SELECT * FROM matchs WHERE Date = '2009/10/10' AND HomeTeam = 'East Fife' AND AwayTeam = 'Dumbarton' AND FTR = 'A';
SELECT FTHG, FTAG FROM matchs WHERE HomeTeam = 'Bursaspor' AND AwayTeam = 'Denizlispor' AND Date = '2009-04-26';
SELECT MIN(Date) FROM matchs WHERE (FTHG + FTAG) > 10;
Error: 第 2771 个样本有 2 个SQL。
SELECT COUNT(*) FROM matchs JOIN divisions ON matchs.Div = divisions.division WHERE divisions.name = 'LaLiga 2' AND matchs.FTR = 'A' AND matchs.Date = '2016-03-27';
Error: 第 2773 个样本有 2 个SQL。
SELECT d.country FROM divisions d JOIN matchs m ON d.division = m.Div WHERE m.FTAG = (SELECT MAX(FTAG) FROM matchs)
SELECT d.name FROM divisions d JOIN matchs m ON d.division = m.Div WHERE m.FTHG = 1 AND m.FTAG = 8 AND m.season = '2011';
SELECT d.name FROM divisions d JOIN (     SELECT Div     FROM matchs     WHERE Date = '2020-02-22' AND (FTHG + FTAG) > 5     GROUP BY Div     ORDER BY COUNT(*) DESC     LIMIT 1 ) m ON d.division = m.Div
SELECT d.name FROM divisions d JOIN (     SELECT Div, COUNT(*) as num_zero_zero     FROM matchs     WHERE FTHG = 0 AND FTAG = 0     GROUP BY Div ) m ON d.division = m.Div WHERE m.num_zero_zero = (     SELECT MAX(num_zero_zero)     FROM (         SELECT COUNT(*) as num_zero_zero         FROM matchs         WHERE FTHG = 0 AND FTAG = 0         GROUP BY Div     ) as subquery )
SELECT COUNT(*) FROM matchs m JOIN divisions d ON m.Div = d.division WHERE d.name = 'Scottish League One' AND m.Date = (     SELECT Date     FROM matchs     WHERE HomeTeam = 'Pro Vercelli'     AND AwayTeam = 'Pescara'     AND FTHG = 5     AND FTAG = 2 );
SELECT COUNT(*) FROM matchs JOIN divisions ON matchs.Div = divisions.division WHERE FTHG = 5 AND FTAG = 0 AND divisions.name = 'Greece';
SELECT d.country FROM divisions d JOIN matchs m ON d.division = m.Div WHERE m.HomeTeam = 'Bradford' OR m.AwayTeam = 'Bradford' LIMIT 1;
SELECT COUNT(DISTINCT HomeTeam) FROM matchs WHERE Div = 'Eredivisie' AND season = '2008';
SELECT     (COUNT(CASE WHEN FTR = 'H' THEN 1 END) * 100.0 / COUNT(*)) AS HomeWinRatio FROM     matchs m JOIN     divisions d ON m.Div = d.division WHERE     m.season = '2021' AND d.name = 'Bundesliga';
SELECT     (COUNT(CASE WHEN m.FTHG = 1 AND m.FTAG = 1 AND d.name = 'Liga NOS' THEN m.Div END) * 100.0 / COUNT(CASE WHEN m.FTHG = 1 AND m.FTAG = 1 THEN m.Div END)) AS percentage FROM     matchs m JOIN     divisions d ON m.Div = d.division;
SELECT COUNT(*) FROM matchs WHERE Div = 'Premier League' AND season = '2021';
SELECT HomeTeam FROM matchs WHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga') AND Date = '2020/10/2'
SELECT HomeTeam AS Winner FROM european_football_1.matchs WHERE Div = (SELECT division FROM european_football_1.divisions WHERE name = 'Bundesliga') AND Date = '2020/10/2' AND FTR = 'H' UNION SELECT AwayTeam AS Winner FROM european_football_1.matchs WHERE Div = (SELECT division FROM european_football_1.divisions WHERE name = 'Bundesliga') AND Date = '2020/10/2' AND FTR = 'A';
SELECT HomeTeam FROM matchs WHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga') AND FTR = 'H' GROUP BY HomeTeam ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM matchs JOIN divisions ON matchs.Div = divisions.division WHERE divisions.name = 'Bundesliga' AND matchs.AwayTeam = 'Werder Bremen' AND matchs.FTR = 'A';
SELECT COUNT(*) FROM matchs WHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga') AND FTR = 'A' AND season = 2021;
SELECT COUNT(*) FROM matchs WHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga') AND FTR = 'D';
SELECT     (SELECT COUNT(*) FROM matchs m1 JOIN divisions d1 ON m1.Div = d1.division WHERE m1.FTR = 'H' AND m1.season = 2021 AND d1.name = 'Bundesliga') -     (SELECT COUNT(*) FROM matchs m2 JOIN divisions d2 ON m2.Div = d2.division WHERE m2.FTR = 'H' AND m2.season = 2021 AND d2.name = 'Premier League')
SELECT HomeTeam FROM matchs WHERE Div = 'Bundesliga' AND FTR = 'H' AND season = '2021';
SELECT HomeTeam, COUNT(*) as Victories FROM matchs WHERE Div=(SELECT division FROM divisions WHERE name='Bundesliga') AND season='2021' AND FTR='H' AND HomeTeam IN ('Augsburg', 'Mainz') GROUP BY HomeTeam ORDER BY Victories DESC LIMIT 1;
SELECT HomeTeam FROM matchs WHERE Div = (SELECT division FROM divisions WHERE name = 'Bundesliga') AND season = 2021 ORDER BY FTHG DESC LIMIT 1;
SELECT SUM(FTHG) FROM matchs WHERE Div = 'Bundesliga' AND season = '2021';
SELECT     SUM(CASE WHEN HomeTeam = 'Club Brugge' AND FTR = 'H' THEN 1 ELSE 0 END +              CASE WHEN AwayTeam = 'Club Brugge' AND FTR = 'A' THEN 1 ELSE 0 END) AS Wins,     COUNT(*) AS TotalMatches,     (SUM(CASE WHEN HomeTeam = 'Club Brugge' AND FTR = 'H' THEN 1 ELSE 0 END +               CASE WHEN AwayTeam = 'Club Brugge' AND FTR = 'A' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS WinningRate FROM     matchs m JOIN     divisions d ON m.Div = d.division WHERE     d.name = 'Premier League' AND     m.season = 2021;
SELECT (homeWon / won) * 100 AS percentage_home_winning FROM teams;
SELECT tmID FROM (   SELECT tmID, CAST(lost AS FLOAT) / (won + lost) AS loss_percentage   FROM teams ) subquery WHERE loss_percentage > 0.75;
SELECT T1.name, T2.won FROM teams AS T1 JOIN (   SELECT tmID, won   FROM teams   WHERE year = 2005 ) AS T2 ON T1.tmID = T2.tmID JOIN (   SELECT tmID, won   FROM teams   WHERE year = 2004 ) AS T3 ON T2.tmID = T3.tmID WHERE T2.won > T3.won AND T2.year = 2005;
SELECT name, o_fgm FROM teams WHERE (homeWon - homeLost) / games > 0.8;
SELECT (COUNT(CASE WHEN rank = 1 THEN tmID END) * 100.0 / COUNT(tmID)) AS Percentage FROM teams WHERE playoff IS NOT NULL;
SELECT coachID, won, lost FROM coaches WHERE year = 1950 AND tmID = 'BOS';
SELECT coachID, GROUP_CONCAT(tmID) AS Teams_Served FROM coaches WHERE year BETWEEN 1970 AND 1980 GROUP BY coachID ORDER BY COUNT(year) DESC LIMIT 1;
SELECT c.coachID, t.name, c.homeWon FROM coaches c JOIN teams t ON c.tmID = t.tmID AND c.year = t.year WHERE c.year = 2000 AND c.won > 50;
SELECT c.coachID, t.name, c.year FROM coaches c JOIN teams t ON c.tmID = t.tmID AND c.year = t.year WHERE c.year BETWEEN 2000 AND 2010 AND c.lost > c.won;
SELECT teams.name, teams.year, teams.o_fgm FROM teams JOIN coaches ON teams.tmID = coaches.tmID AND teams.year = coaches.year WHERE coaches.coachID = 'adelmri01' AND teams.year BETWEEN 1990 AND 1995;
SELECT tmID, coachID, year FROM (   SELECT tmID, coachID, year, CAST(won AS FLOAT) / games AS win_percentage   FROM teams   JOIN coaches ON teams.tmID = coaches.tmID AND teams.year = coaches.year ) subquery WHERE win_percentage > 0.9;
SELECT (COUNT(CASE WHEN players.birthState = 'NY' THEN awards_players.playerID END) * 100.0 / COUNT(awards_players.playerID)) AS percentage FROM awards_players JOIN players ON awards_players.playerID = players.playerID WHERE awards_players.award = 'All-Defensive First Team' AND awards_players.year BETWEEN 1980 AND 2000;
SELECT T3.divID FROM awards_coaches AS T1 JOIN coaches AS T2 ON T1.coachID = T2.coachID JOIN teams AS T3 ON T2.tmID = T3.tmID WHERE T1.award = 'NBA Coach of the Year' AND T1.year = 1977 AND T3.year = 1976
SELECT c.coachID FROM coaches c JOIN awards_coaches ac ON c.coachID = ac.coachID WHERE c.tmID = 'CHI' AND c.year = 1981 AND ac.award = 'NBA Coach of the Year' AND ac.year BETWEEN 1970 AND 1979;
SELECT p.nameNick FROM players p JOIN players_teams pt ON p.playerID = pt.playerID WHERE pt.season_id = 2006 AND pt.conference = 'West' AND pt.blocks = 2;
Error: 第 2812 个样本有 2 个SQL。
SELECT p.birthDate FROM players p JOIN player_allstar pas ON p.playerID = pas.playerID WHERE pas.season_id = 1985 ORDER BY pas.assists DESC LIMIT 1;
SELECT playerID, first_name, last_name FROM player_allstar JOIN players ON player_allstar.playerID = players.playerID WHERE birthCity = 'Winter Haven' AND season_id BETWEEN 1980 AND 1989 AND minutes = 12;
SELECT COUNT(*) FROM player_allstar WHERE conference = 'East' AND minutes < 5 AND college = 'Illinois';
SELECT COUNT(*) FROM (   SELECT playerID   FROM player_allstar   WHERE season_id BETWEEN 1990 AND 2007   GROUP BY playerID   HAVING (SUM(d_rebounds) * 100 / SUM(rebounds)) > 75 ) as result;
SELECT year FROM coaches WHERE coachID = 'costela01' ORDER BY CAST(won AS REAL) / (won + lost) DESC LIMIT 1;
Error: 第 2818 个样本有 2 个SQL。
SELECT teams.name FROM teams JOIN coaches ON teams.tmID = coaches.tmID AND teams.year = coaches.year WHERE coaches.award = 'NBA Coach of the Year' AND coaches.year = 1994 ORDER BY teams.homeLost DESC LIMIT 1;
SELECT teams.name FROM series_post JOIN teams ON series_post.tmIDWinner = teams.tmID WHERE series_post.round = 'CSF' AND series_post.tmIDLoser = 'LAL' AND teams.lgID = 'NBA' AND teams.year = 1996 AND teams.won > 60;
Error: 第 2821 个样本有 2 个SQL。
SELECT coachID FROM coaches WHERE lgID = 'NBA' GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2;
Error: 第 2823 个样本有 2 个SQL。
SELECT c.coachID, MIN(c.post_losses) FROM (     SELECT coachID, COUNT(DISTINCT tmID) AS teams_count     FROM coaches     GROUP BY coachID     HAVING teams_count >= 2 ) AS m JOIN coaches c ON m.coachID = c.coachID WHERE c.post_losses IS NOT NULL GROUP BY c.coachID ORDER BY MIN(c.post_losses) ASC LIMIT 1;
SELECT COUNT(*) FROM players WHERE lgID = 'ABA' AND (pos = 'C' OR pos = 'F-C');
SELECT firstName FROM players WHERE pos IN ('F', 'F-C') AND lgID = 'NBA';
Error: 第 2827 个样本有 2 个SQL。
SELECT DISTINCT p.college FROM players AS p JOIN player_allstar AS pa ON p.playerID = pa.playerID WHERE pa.conference = 'East'
SELECT COUNT(*) FROM players WHERE lgID = 'NBL' AND birthCity = 'Spencer';
SELECT p.birthDate FROM players p JOIN awards_players ap ON p.playerID = ap.playerID WHERE ap.award = 'Most Valuable Player' GROUP BY p.playerID ORDER BY COUNT(ap.award) DESC LIMIT 1;
SELECT COUNT(*) FROM players AS p JOIN awards_players AS ap ON p.playerID = ap.playerID WHERE p.birthCity = 'Whitestone' AND ap.award = 'Most Valuable Player';
SELECT MAX(p.height) FROM players p JOIN awards_players ap ON p.playerID = ap.playerID WHERE ap.award = 'Rookie of the Year';
SELECT AVG(players.weight) FROM players JOIN awards_players ON players.playerID = awards_players.playerID WHERE awards_players.award = 'Rookie of the Year';
SELECT AVG(players.height) FROM players JOIN awards_players ON players.playerID = awards_players.playerID WHERE players.highSchool LIKE '%New York%' AND awards_players.award = 'Most Valuable Player';
SELECT name, o_fgm FROM teams WHERE year = 2000 ORDER BY o_fgm DESC LIMIT 10;
SELECT name FROM teams WHERE CAST(won AS REAL) / CAST((won + lost) AS REAL) < 0.5;
SELECT coachID FROM coaches WHERE CAST(won AS FLOAT) / CAST((won + lost) AS FLOAT) > 0.8;
SELECT coachID FROM coaches WHERE lgID = 'NBA' GROUP BY coachID HAVING MAX(year) - MIN(year) > 10;
SELECT COUNT(DISTINCT T1.tmID) FROM teams AS T1 JOIN player_allstar AS T2 ON T1.tmID = T2.playerID JOIN awards_players AS T3 ON T2.playerID = T3.playerID WHERE T1.o_pts + T1.d_pts > 3800 AND T3.award = 'Most Valuable Player';
SELECT players.playerID, players.firstName, players.lastName, MAX(players.height) FROM players JOIN players_teams ON players.playerID = players_teams.playerID WHERE players_teams.tmID = 'AFS' GROUP BY players.playerID, players.firstName, players.lastName ORDER BY players.height DESC LIMIT 1;
SELECT players.lastName FROM players JOIN players_teams ON players.playerID = players_teams.playerID WHERE players_teams.tmID = 'BLB';
SELECT COUNT(*) FROM awards_coaches WHERE year BETWEEN 1962 AND 1975;
SELECT coachID FROM awards_coaches WHERE year BETWEEN 1970 AND 1990 GROUP BY coachID HAVING COUNT(coachID) = 2;
SELECT COUNT(DISTINCT coachID) FROM (     SELECT coachID     FROM awards_coaches     WHERE year BETWEEN 1962 AND 2011 AND award LIKE 'NBA%'     INTERSECT     SELECT coachID     FROM awards_coaches     WHERE year BETWEEN 1962 AND 2011 AND award LIKE 'ABA%' ) AS both_awards;
Error: 第 2845 个样本有 2 个SQL。
SELECT pa.last_name, pa.first_name FROM player_allstar pa JOIN players p ON pa.playerID = p.playerID WHERE p.height > 75;
SELECT MIN(T1.weight) FROM players AS T1 JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'UCLA';
SELECT MAX(weight) FROM players WHERE birthCountry = 'USA' AND playerID IN (SELECT playerID FROM player_allstar);
SELECT SUM(points) FROM player_allstar JOIN players ON player_allstar.playerID = players.playerID WHERE season_id BETWEEN 1960 AND 1970 AND players.deathDate = '0000-00-00';
SELECT p.lastName, p.firstName FROM players AS p JOIN player_allstar AS pa ON p.playerID = pa.playerID WHERE p.birthDate >= '1950-01-01' AND CAST(pa.o_rebounds AS REAL) / pa.rebounds > 0.3 GROUP BY p.playerID;
SELECT COUNT(*) FROM awards_players WHERE year BETWEEN 1969 AND 2010 AND award = 'Rookie of the Year';
SELECT teams.name FROM teams JOIN players_teams ON teams.tmID = players_teams.tmID JOIN player_allstar ON players_teams.playerID = player_allstar.playerID GROUP BY teams.tmID HAVING COUNT(player_allstar.playerID) >= 3;
SELECT MAX(players_teams.points) FROM players_teams JOIN teams ON players_teams.tmID = teams.tmID AND players_teams.year = teams.year WHERE teams.rank = 1 AND players_teams.year BETWEEN 1950 AND 1970;
SELECT DISTINCT p.lastName, p.firstName FROM (     SELECT tmID     FROM (         SELECT tmID, COUNT(*) as rank1_count         FROM teams         WHERE year BETWEEN 1937 AND 1940 AND rank = 1         GROUP BY tmID         HAVING COUNT(*) >= 3     ) as sub1 ) as sub2 JOIN players_teams pt ON sub2.tmID = pt.tmID JOIN player_allstar pa ON pa.playerID = pt.playerID JOIN players p ON p.playerID = pa.playerID WHERE pt.year BETWEEN 1937 AND 1940;
SELECT T1.name FROM teams AS T1 JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.rank = 3 AND T1.year BETWEEN 1937 AND 1940 GROUP BY T1.tmID ORDER BY SUM(T2.points) DESC LIMIT 1
Error: 第 2856 个样本有 2 个SQL。
SELECT COUNT(DISTINCT pt.playerID) FROM players_teams pt JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year WHERE pt.year = 1990 AND (t.won / (t.won + t.lost)) > 0.75;
SELECT firstName, lastName, height FROM players WHERE race = 'B' ORDER BY height LIMIT 3;
SELECT COUNT(*) FROM draft WHERE draftYear = 1970 AND firstName = 'Joe';
SELECT SUM(fg_made) FROM player_allstar WHERE playerID = (SELECT playerID FROM players WHERE first_name = 'George' AND last_name = 'Mikan') AND season_id BETWEEN 1951 AND 1953;
SELECT     (weight * 703) / (height * height) AS BMI,     playerID,     firstName,     lastName FROM     players
SELECT name FROM teams WHERE (homeLost / (homeWon + homeLost)) = (SELECT MAX(homeLost / (homeWon + homeLost)) FROM teams);
SELECT draftYear - EXTRACT(YEAR FROM birthDate) AS Age_when_drafted FROM draft JOIN players ON draft.playerID = players.playerID WHERE firstName = 'Alexis' AND lastName = 'Ajinca' ORDER BY draftYear LIMIT 1;
SELECT p.firstName, p.lastName, p.height FROM players p JOIN players_teams pt ON p.playerID = pt.playerID JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year WHERE t.name = 'Denver Nuggets' AND pt.year > 1980 ORDER BY p.height DESC LIMIT 1;
SELECT p.firstName, p.lastName, COUNT(ap.award) as award_count FROM players p JOIN awards_players ap ON p.playerID = ap.playerID WHERE p.deathDate IS NOT NULL GROUP BY p.playerID ORDER BY award_count DESC LIMIT 1;
SELECT T2.tmID, COUNT(T1.playerID) AS count_players FROM draft AS T1 JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE T1.college = 'UCLA' GROUP BY T2.tmID ORDER BY count_players DESC LIMIT 1;
SELECT AVG((weight / (height * height)) * 703) AS average_BMI FROM (     SELECT pa.weight, pa.height     FROM player_allstar pa     JOIN players p ON pa.playerID = p.playerID )
SELECT T1.name FROM teams AS T1 JOIN (     SELECT tmID,            ((CAST(T3.won AS REAL) / (T3.won + T3.lost)) - (CAST(T2.won AS REAL) / (T2.won + T2.lost))) AS win_rate_growth     FROM teams AS T2 JOIN teams AS T3 ON T2.tmID = T3.tmID     WHERE T2.year = 1972 AND T3.year = 1973 AND T2.lgID = 'ABA' ) AS T4 ON T1.tmID = T4.tmID WHERE T4.win_rate_growth = (     SELECT MAX(win_rate_growth)     FROM (         SELECT            ((CAST(T3.won AS REAL) / (T3.won + T3.lost)) - (CAST(T2.won AS REAL) / (T2.won + T2.lost))) AS win_rate_growth         FROM teams AS T2 JOIN teams AS T3 ON T2.tmID = T3.tmID         WHERE T2.year = 1972 AND T3.year = 1973 AND T2.lgID = 'ABA'     ) )
SELECT T1.firstName FROM players AS T1 JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.league_id = 'NBL' GROUP BY T1.playerID ORDER BY COUNT(T2.personal_fouls) DESC LIMIT 1;
SELECT AVG(T2.height) FROM player_allstar AS T1 JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.conference = 'East'
SELECT coachID, MAX(won) as max_won FROM awards_coaches ac JOIN coaches c ON ac.coachID = c.coachID WHERE ac.award = 'ABA Coach of the Year' GROUP BY coachID ORDER BY max_won DESC LIMIT 1;
SELECT T3.name FROM awards_coaches AS T1 JOIN coaches AS T2 ON T1.coachID = T2.coachID JOIN teams AS T3 ON T2.tmID = T3.tmID AND T2.year = T3.year WHERE T1.award = 'NBA Coach of the Year' AND T1.year = 1992;
SELECT first_name, last_name FROM player_allstar WHERE season_id = 1973 ORDER BY divide(fg_made, fg_attempted) DESC LIMIT 1;
SELECT teams.name FROM teams JOIN draft ON teams.tmID = draft.tmID WHERE draft.firstName = 'Mike' AND draft.lastName = 'Lynn'
SELECT COUNT(*) FROM awards_players JOIN players ON awards_players.playerID = players.playerID WHERE awards_players.award = 'Most Improved Player' AND awards_players.year BETWEEN 1985 AND 1990 AND players.birthCountry = 'USA';
SELECT pa.first_name, pa.last_name FROM player_allstar pa JOIN players p ON pa.playerID = p.playerID WHERE p.college = 'California';
SELECT COUNT(*) FROM (   SELECT coachID   FROM awards_coaches   WHERE year BETWEEN 1950 AND 1970   GROUP BY coachID   HAVING COUNT(award) > 3 ) as temp;
SELECT COUNT(*) FROM awards_players WHERE award = 'Most Valuable Player' AND year BETWEEN 1969 AND 1975;
SELECT T1.name FROM teams AS T1 JOIN players_teams AS T2 ON T1.tmID = T2.tmID JOIN players AS T3 ON T2.playerID = T3.playerID GROUP BY T1.name, T3.birthState HAVING COUNT(T3.playerID) >= 5;
SELECT COUNT(DISTINCT pa.tmID) FROM (     SELECT playerID, tmID     FROM player_allstar     WHERE league_id = 'NBA'     GROUP BY playerID, tmID ) AS pa GROUP BY pa.tmID HAVING COUNT(pa.playerID) >= 3;
SELECT birthState, COUNT(playerID) AS num_of_all_stars FROM players JOIN player_allstar ON players.playerID = player_allstar.playerID GROUP BY birthState ORDER BY num_of_all_stars DESC LIMIT 1;
SELECT COUNT(*) FROM players_teams pt JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year WHERE t.rank = 6 AND t.year = 1937;
SELECT COUNT(*) FROM (   SELECT pt.playerID   FROM players_teams pt   JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year   WHERE pt.year = 1950 AND (t.lost / (t.won + t.lost)) * 100 < 20 ) as result;
SELECT CONCAT(firstName, ' ', middleName, ' ', lastName) AS fullName FROM players WHERE birthCountry != 'USA';
SELECT coachID FROM coaches GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2;
SELECT coachID FROM coaches WHERE year = 1988 ORDER BY (won - lost) DESC LIMIT 1;
SELECT T1.name FROM teams AS T1 JOIN awards_coaches AS T2 ON T1.tmID = T2.coachID WHERE T2.award = 'NBA Coach of the Year' AND T2.year = 2010
SELECT first_name, last_name, height, weight FROM players WHERE playerID IN (     SELECT playerID     FROM player_allstar     WHERE ft_attempted > 0 AND ft_attempted = ft_made )
SELECT p.firstName, p.lastName, t.name FROM draft d JOIN players p ON d.playerID = p.playerID JOIN teams t ON d.tmID = t.tmID WHERE d.draftFrom = 'Seattle' AND d.draftYear BETWEEN 1965 AND 1970;
SELECT (T1.firstName || ' ' || T1.middleName || ' ' || T1.lastName) AS fullName, 2003 - strftime('%Y', T1.birthDate) AS age FROM players AS T1 JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Finals MVP' AND T2.year = 2003;
SELECT teams.name, series_post.year FROM series_post JOIN teams ON teams.tmID = series_post.tmIDWinner WHERE series_post.round = 'F' AND series_post.year BETWEEN 1950 AND 1960;
SELECT DISTINCT teams.name, coaches.coachID FROM teams JOIN series_post ON teams.tmID = series_post.tmIDWinner JOIN coaches ON teams.tmID = coaches.tmID AND teams.year = coaches.year WHERE series_post.round = 'QF' AND teams.year = 1946;
SELECT p.firstName, p.middleName, p.lastName FROM players AS p JOIN players_teams AS pt ON p.playerID = pt.playerID JOIN series_post AS sp ON pt.tmID = sp.tmIDWinner AND pt.year = sp.year WHERE sp.year = 1970 AND sp.round = 'F';
SELECT p.college FROM players p JOIN awards_players ap ON p.playerID = ap.playerID WHERE ap.year = 1970 GROUP BY p.college ORDER BY COUNT(ap.award) DESC LIMIT 1;
SELECT p.firstName, p.lastName FROM players p JOIN awards_players ap ON p.playerID = ap.playerID WHERE ap.award = 'Rookie of the Year' ORDER BY p.birthDate DESC LIMIT 1;
SELECT p.firstName, p.middleName, p.lastName FROM players p JOIN draft d ON p.playerID = d.playerID WHERE d.draftYear = 1973 AND d.draftRound = 1 AND p.birthCountry != 'USA';
SELECT (SUM(T1.o_rebounds) / SUM(T1.rebounds)) * 100 AS Percentage_Offense_Rebounds FROM player_allstar T1 WHERE T1.season_id = 2000;
SELECT     t.year,     t.name AS team,     c.coachID AS coach FROM     teams t JOIN     coaches c ON t.tmID = c.tmID AND t.year = c.year WHERE     CAST(c.won AS REAL) / (c.won + c.lost) > 0.75;
SELECT c.coachID FROM coaches c JOIN teams t ON c.tmID = t.tmID AND c.year = t.year WHERE t.name = 'Oklahoma City Thunder'
SELECT COUNT(*) FROM player_allstar WHERE season_id = 1990 AND o_rebounds <= d_rebounds * 0.5;
SELECT COUNT(*) FROM player_allstar WHERE season_id BETWEEN 2000 AND 2005 AND steals <= 10;
SELECT dp.playerID FROM draft dp JOIN awards_players ap ON dp.playerID = ap.playerID WHERE dp.tmID = 'Portland' AND dp.draftRound = 2 AND dp.draftYear = 1971 AND ap.award = 'Rookie of the Year';
SELECT COUNT(*) FROM player_allstar pa JOIN players p ON pa.playerID = p.playerID WHERE pa.season_id = 1973 AND p.race = 'B';
SELECT teams.name FROM teams JOIN series_post ON teams.tmID = series_post.tmIDWinner AND teams.year = series_post.year WHERE series_post.year = 1947 AND series_post.round = 'QF' AND teams.d_pts >= 3513;
SELECT (SUM(T1.lost) / SUM(T1.games)) * 100 AS Percentage_Lost FROM teams T1 WHERE T1.name = 'Houston Mavericks';
SELECT playerID, player FROM awards_players WHERE award = 'Most Valuable Player' AND year > 1990 AND lgID = 'NBA';
SELECT COUNT(*) FROM players_teams WHERE year BETWEEN 1975 AND 1980 AND playerID = 'abdulka01' AND tmID = 'LAL';
SELECT (COUNT(CASE WHEN award = 'NBA Coach of the Year' THEN coachID END) * 100.0 / COUNT(coachID)) AS percentage FROM coaches JOIN awards_coaches ON coaches.coachID = awards_coaches.coachID AND coaches.year = awards_coaches.year WHERE coaches.year = 1969;
SELECT     ((COUNT(CASE WHEN sp.year = 1947 AND sp.tmIDWinner = 'CHS' THEN 1 END) / COUNT(CASE WHEN sp.year = 1947 THEN 1 END)) -      (COUNT(CASE WHEN sp.year = 1946 AND sp.tmIDWinner = 'CHS' THEN 1 END) / COUNT(CASE WHEN sp.year = 1946 THEN 1 END))) * 100 AS win_rate_difference FROM     series_post sp WHERE     sp.year IN (1946, 1947) GROUP BY     sp.year;
SELECT COUNT(*) FROM awards_players JOIN players ON awards_players.playerID = players.playerID WHERE awards_players.year = 2010 AND players.hsCity = 'Chicago';
SELECT (COUNT(CASE WHEN ap.award = 'All-Defensive Second Team' THEN ap.playerID END) * 100.0 / COUNT(ap.playerID)) AS percentage FROM players p JOIN awards_players ap ON p.playerID = ap.playerID WHERE p.college = 'Auburn';
SELECT p.firstName, p.middleName, p.lastName FROM players AS p JOIN player_allstar AS pa ON p.playerID = pa.playerID WHERE pa.season_id = 1997 ORDER BY pa.steals DESC LIMIT 5;
SELECT T5.highSchool FROM awards_players AS T1 JOIN players AS T5 ON T1.playerID = T5.playerID JOIN draft AS T2 ON T5.playerID = T2.playerID WHERE T1.award = 'Finals MVP' AND T1.year = 1990 AND T2.draftYear = 1990 AND T1.lgID = 'NBA'
SELECT playerID FROM player_allstar WHERE season_id = 1996 AND ft_attempted > 0 AND ft_made >= ft_attempted * 0.7;
SELECT COUNT(*) FROM player_allstar WHERE season_id BETWEEN 1980 AND 1983 AND league_id = 'NBA' AND three_attempted > 0 AND (three_made / three_attempted) > 0.6;
SELECT coachID FROM coaches WHERE lgID = 'NBA' AND tmID = 'STL' AND won > lost;
SELECT COUNT(*) FROM awards_coaches AS T1 JOIN coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.tmID = 'CHI' AND T1.award = 'Coach of the Year' AND T1.lgID = 'NBA'
SELECT T3.first_name, T3.last_name FROM draft AS T1 JOIN player_allstar AS T2 ON T1.playerID = T2.playerID JOIN players AS T3 ON T1.playerID = T3.playerID WHERE T1.draftYear BETWEEN 1990 AND 2000 AND T1.lgID = 'NBA' GROUP BY T1.playerID ORDER BY SUM(T2.points) DESC LIMIT 1;
SELECT p.firstName, p.middleName, p.lastName FROM players AS p JOIN player_allstar AS pa ON p.playerID = pa.playerID WHERE p.college = 'Wake Forest' GROUP BY p.playerID ORDER BY SUM(pa.o_rebounds) - SUM(pa.d_rebounds) DESC LIMIT 1;
SELECT p.firstName, p.middleName, p.lastName, pt.tmID FROM players AS p JOIN player_allstar AS pa ON p.playerID = pa.playerID JOIN players_teams AS pt ON p.playerID = pt.playerID WHERE p.birthCity = 'Atlanta' GROUP BY p.playerID, pt.tmID ORDER BY SUM(pa.blocks) DESC LIMIT 1;
SELECT T1.name FROM teams AS T1 JOIN (     SELECT tmID, COUNT(CASE WHEN rank = 1 THEN 1 END) AS first_rank_count, SUM(lost) AS total_lost     FROM teams     WHERE year BETWEEN 1980 AND 2000     GROUP BY tmID ) AS T2 ON T1.tmID = T2.tmID WHERE T2.first_rank_count >= 5 AND T2.total_lost >= 2
SELECT ptm.tmID, MAX(p_points / p_minutes) AS point_per_minute FROM (     SELECT pt.playerID, pt.tmID, SUM(pt.points) AS p_points, SUM(pt.minutes) AS p_minutes     FROM players_teams pt     WHERE pt.lgID = 'NBA' AND pt.year BETWEEN 1991 AND 2000     GROUP BY pt.playerID, pt.tmID ) AS ptm GROUP BY ptm.tmID ORDER BY point_per_minute DESC LIMIT 1;
SELECT     (SELECT AVG(1970 - YEAR(birthDate))      FROM draft      JOIN players ON draft.playerID = players.playerID      WHERE draftYear BETWEEN 1970 AND 1970 AND lgID = 'ABA') -     (SELECT AVG(1970 - YEAR(birthDate))      FROM draft      JOIN players ON draft.playerID = players.playerID      WHERE draftYear BETWEEN 1970 AND 1970 AND lgID = 'NBA')
SELECT playerID, MAX(GP) FROM players_teams WHERE year = 2011 AND lgID = 'NBA' GROUP BY playerID ORDER BY GP DESC LIMIT 1;
SELECT COUNT(*) FROM draft AS D JOIN player_allstar AS PA ON D.playerID = PA.playerID WHERE D.draftRound = 1 AND D.draftYear = 1996 AND D.lgID = 'NBA';
SELECT teams.name FROM teams JOIN awards_players ON teams.tmID = awards_players.playerID WHERE awards_players.award LIKE '%MVP%' AND awards_players.year = 1997 AND awards_players.lgID = 'NBA';
SELECT T1.won FROM teams AS T1 JOIN (   SELECT playerID, SUM(points) as total_points   FROM player_allstar   WHERE season_id = 2001 AND league_id = 'NBA'   GROUP BY playerID   ORDER BY total_points DESC   LIMIT 1 ) AS T2 ON T1.tmID = T2.playerID WHERE T1.year = 2001 AND T1.lgID = 'NBA'
SELECT AVG(T1.turnovers) AS avg_turnovers FROM player_allstar AS T1 JOIN (SELECT playerID FROM player_allstar WHERE season_id = 2003 AND lgID = 'NBA' GROUP BY playerID ORDER BY SUM(assists) DESC LIMIT 1) AS T2 ON T1.playerID = T2.playerID WHERE T1.season_id = 2003 AND T1.lgID = 'NBA'
SELECT COUNT(*) FROM series_post WHERE tmIDWinner IN (     SELECT tmID     FROM players_teams     WHERE playerID = 'allenray01' AND lgID = 'NBA' ) AND year BETWEEN (     SELECT firstseason     FROM players     WHERE playerID = 'allenray01' ) AND (     SELECT lastseason     FROM players     WHERE playerID = 'allenray01' );
SELECT     (SELECT SUM(won) / (SUM(won) + SUM(lost)) FROM teams WHERE year = 2004 AND tmID IN (         SELECT tmID FROM draft WHERE draftYear = 2003 AND draftRound = 1     )) -     (SELECT SUM(won) / (SUM(won) + SUM(lost)) FROM teams WHERE year = 2003 AND tmID IN (         SELECT tmID FROM draft WHERE draftYear = 2003 AND draftRound = 1     ))
SELECT COUNT(*) FROM awards_coaches WHERE award = 'NBA Coach of the Year' AND year BETWEEN 1971 AND 1975 AND coachID IN (SELECT coachID FROM coaches WHERE tmID = 'POR');
SELECT (COUNT(CASE WHEN pt.steals > 0 THEN pt.playerID END) * 100.0 / COUNT(pt.playerID)) AS percentage FROM players_teams AS pt JOIN teams AS t ON pt.tmID = t.tmID AND pt.year = t.year WHERE t.lgID = 'NBA' AND t.tmID = 'LAL'
SELECT p.first_name, p.middleName, p.last_name FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE pa.season_id = 1996 AND pa.steals = (     SELECT MAX(pa2.steals)     FROM player_allstar pa2     WHERE pa2.season_id = 1996 AND NOT EXISTS (         SELECT *         FROM players_teams pt         WHERE pt.playerID = pa2.playerID AND pt.year = 1996 AND pt.playoff IS NOT NULL     ) ) AND NOT EXISTS (     SELECT *     FROM players_teams pt     WHERE pt.playerID = p.playerID AND pt.year = 1996 AND pt.playoff IS NOT NULL );
SELECT pt.playerID FROM players_teams pt JOIN teams t ON pt.tmID = t.tmID AND pt.year = t.year WHERE pt.year = 1988 AND t.PostGP = 0 ORDER BY pt.turnovers DESC LIMIT 1;
SELECT teams.name, MAX(CAST(teams.won AS REAL) / (teams.won + teams.lost)) as winning_rate FROM teams WHERE teams.year = 2000 AND teams.lgID = 'NBA' AND teams.post_wins = 0 GROUP BY teams.tmID ORDER BY winning_rate DESC LIMIT 1;
SELECT teams.name FROM teams WHERE teams.year = 1998 AND teams.playoff = 'N' ORDER BY teams.o_pts DESC LIMIT 1;
SELECT T1.name FROM teams AS T1 WHERE T1.year = 2001 AND T1.PostGP = 0 ORDER BY T1.won DESC LIMIT 1;
SELECT teams.name FROM teams JOIN players_teams ON teams.tmID = players_teams.tmID AND teams.year = players_teams.year WHERE teams.year = 1997 AND players_teams.PostGP = 0 GROUP BY teams.name ORDER BY SUM(players_teams.rebounds) DESC LIMIT 1;
SELECT T2.tmID FROM draft AS T1 JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.draftYear = 1976 AND T1.draftRound = 1 AND T1.draftSelection = 6;
SELECT t.homeWon FROM teams t JOIN draft d ON t.tmID = d.tmID AND t.year = d.draftYear WHERE d.draftRound = 1 AND d.draftSelection = 12 AND t.year = 1998;
SELECT p.weight, p.height FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE pa.rebounds = (SELECT MAX(rebounds) FROM player_allstar) LIMIT 1;
SELECT p.highSchool FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE pa.rebounds = (SELECT MAX(rebounds) FROM player_allstar) LIMIT 1;
SELECT pt.tmID FROM players_teams pt JOIN player_allstar pa ON pt.playerID = pa.playerID WHERE pt.year = 1997 AND pa.season_id = 1997 GROUP BY pt.tmID ORDER BY SUM(pa.rebounds) DESC LIMIT 1;
SELECT SUM(players_teams.points) FROM players JOIN players_teams ON players.playerID = players_teams.playerID WHERE (players.pos LIKE '%C%' OR players.pos LIKE '%F%' OR players.pos LIKE '%G%') GROUP BY players.playerID ORDER BY players.lastseason DESC LIMIT 1;
SELECT teams.name FROM teams JOIN players ON players.playerID = teams.tmID WHERE players.pos LIKE '%F-%G' OR players.pos LIKE '%G-%F' AND players.firstseason IN (     SELECT MIN(firstseason)     FROM players     WHERE pos LIKE '%F-%G' OR pos LIKE '%G-%F'     AND lgID = 'NBA' ) AND teams.lgID = 'NBA';
SELECT p.firstName, p.lastName FROM players p JOIN players_teams pt ON p.playerID = pt.playerID WHERE p.college = 'Central Missouri State' GROUP BY p.playerID ORDER BY SUM(pt.GP) DESC LIMIT 1;
SELECT T2.name FROM players_teams AS T1 JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 2000 AND T1.GP = 82 ORDER BY T1.minutes ASC LIMIT 1;
SELECT P.firstName, P.lastName FROM players AS P JOIN players_teams AS PT ON P.playerID = PT.playerID WHERE PT.year = 1995 AND PT.GP = 82 ORDER BY PT.turnovers DESC LIMIT 1;
SELECT pt.tmID FROM players_teams pt WHERE pt.year = 2011 AND pt.GP = pt.GS ORDER BY pt.steals DESC LIMIT 1;
SELECT T1.name FROM teams AS T1 JOIN (     SELECT tmID, COUNT(*) AS same_starting_players     FROM (         SELECT playerID, tmID, COUNT(*) AS starts         FROM players_teams         WHERE GP = GS         GROUP BY playerID, tmID     ) AS inner_query     GROUP BY tmID ) AS T2 ON T1.tmID = T2.tmID ORDER BY T2.same_starting_players DESC LIMIT 1;
SELECT p.birthDate FROM players p JOIN player_allstar pa ON p.playerID = pa.playerID WHERE pa.season_id = 2001 ORDER BY pa.rebounds DESC LIMIT 1;
SELECT T3.name FROM player_allstar AS T1 JOIN players_teams AS T2 ON T1.playerID = T2.playerID JOIN teams AS T3 ON T2.tmID = T3.tmID AND T2.year = T3.year WHERE T2.year = 1997 AND T1.rebounds = (SELECT MAX(rebounds) FROM player_allstar WHERE season_id = 1997)
SELECT teams.name FROM teams JOIN players_teams ON teams.tmID = players_teams.tmID AND teams.year = players_teams.year JOIN player_allstar ON players_teams.playerID = player_allstar.playerID AND players_teams.year = player_allstar.season_id WHERE player_allstar.rebounds > 600 AND teams.year = 2011 GROUP BY teams.name HAVING COUNT(DISTINCT players_teams.playerID) > 1;
SELECT COUNT(*) FROM works WHERE Date < 1602;
SELECT COUNT(*) FROM chapters WHERE Act = 1 AND work_id = (SELECT id FROM works WHERE Title = 'Twelfth Night');
SELECT chapters.Description FROM chapters JOIN works ON chapters.work_id = works.id WHERE works.Title = 'Twelfth Night' AND chapters.Act = 1 AND chapters.Scene = 2;
SELECT (SELECT COUNT(*) FROM chapters WHERE work_id = (SELECT id FROM works WHERE Title = 'Twelfth Night') AND Act = 1) - (SELECT COUNT(*) FROM chapters WHERE work_id = (SELECT id FROM works WHERE Title = 'Twelfth Night') AND Act = 5)
SELECT w.Title FROM works w JOIN characters c ON w.id = c.work_id WHERE c.CharName = 'Lord Abergavenny';
SELECT DISTINCT c.CharName FROM characters c JOIN paragraphs p ON c.id = p.character_id JOIN chapters ch ON p.chapter_id = ch.id JOIN works w ON ch.work_id = w.id WHERE w.Title = 'Twelfth Night';
SELECT COUNT(*) FROM paragraphs JOIN chapters ON paragraphs.chapter_id = chapters.id JOIN works ON chapters.work_id = works.id WHERE chapters.Act = 1 AND chapters.Scene = 1 AND works.Title = 'Twelfth Night';
SELECT p.PlainText FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id JOIN works w ON c.work_id = w.id WHERE w.Title = 'Twelfth Night' AND c.Act = 1 AND c.Scene = 1;
SELECT COUNT(*) FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE c.CharName = 'Lord Abergavenny';
SELECT p.id FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE c.Description = 'son to Tamora';
SELECT COUNT(*) FROM chapters JOIN works ON chapters.work_id = works.id WHERE chapters.Description = 'OLIVIA’S house.' AND works.Title = 'Twelfth Night';
SELECT COUNT(*) FROM characters WHERE id IN (     SELECT character_id     FROM paragraphs     WHERE chapter_id IN (         SELECT id         FROM chapters         WHERE work_id IN (             SELECT id             FROM works             WHERE Title = 'Twelfth Night'         )     ) );
SELECT w.Title FROM works w JOIN chapters c ON w.id = c.work_id JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id GROUP BY w.Title ORDER BY COUNT(ch.id) DESC LIMIT 1;
Error: 第 2967 个样本有 2 个SQL。
SELECT SUM(t.Scene) / COUNT(DISTINCT t.Act) AS AverageScenesPerAct FROM (     SELECT c.Scene, c.Act     FROM chapters c     JOIN works w ON c.work_id = w.id     WHERE w.Title = 'Twelfth Night' ) t
SELECT COUNT(*) FROM works WHERE GenreType = 'Comedy';
SELECT MIN(Date) FROM works WHERE GenreType = 'Poem';
SELECT Abbrev FROM characters WHERE CharName = 'Earl of Westmoreland';
SELECT c.Description FROM chapters c JOIN (   SELECT chapter_id, COUNT(*) as paragraph_count   FROM paragraphs   GROUP BY chapter_id ) p ON c.id = p.chapter_id WHERE p.paragraph_count = (   SELECT MAX(paragraph_count)   FROM (     SELECT COUNT(*) as paragraph_count     FROM paragraphs     GROUP BY chapter_id   ) ) LIMIT 1;
SELECT characters.CharName FROM characters JOIN paragraphs ON characters.id = paragraphs.character_id WHERE paragraphs.PlainText = 'Would he do so, I''ld beg your precious mistress, Which he counts but a trifle.';
SELECT COUNT(DISTINCT c.id) FROM characters c JOIN paragraphs p ON c.id = p.character_id JOIN chapters ch ON p.chapter_id = ch.id JOIN works w ON ch.work_id = w.id WHERE w.Title = 'Titus Andronicus';
SELECT COUNT(DISTINCT ch.Act) FROM chapters ch JOIN works w ON ch.work_id = w.id WHERE w.LongTitle = 'Two Gentlemen of Verona';
SELECT characters.Description FROM characters JOIN paragraphs ON characters.id = paragraphs.character_id WHERE paragraphs.id = 640171;
SELECT w.Title FROM works w JOIN chapters c ON w.id = c.work_id JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE ch.CharName = 'Shylock' GROUP BY w.Title;
SELECT COUNT(*) FROM chapters WHERE chapters.work_id = (SELECT id FROM works WHERE Title = 'King John') AND chapters.Act IS NOT NULL AND chapters.Scene IS NOT NULL;
SELECT COUNT(*) FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE ch.CharName = 'Demetrius';
SELECT w.Title, c.Description FROM works w JOIN chapters ch ON w.id = ch.work_id JOIN paragraphs p ON ch.id = p.chapter_id JOIN characters c ON p.character_id = c.id WHERE c.id = 324 AND c.Description = 'this friend of Caesar';
SELECT chapters.Description FROM chapters JOIN works ON chapters.work_id = works.id WHERE chapters.Act = '2' AND chapters.Scene = '2' AND works.Title = 'Midsummer Night''s Dream';
SELECT w.LongTitle FROM works w JOIN chapters c ON w.id = c.work_id WHERE w.GenreType = 'Tragedy' GROUP BY w.LongTitle ORDER BY COUNT(c.Scene) DESC LIMIT 1;
SELECT COUNT(*) FROM paragraphs JOIN chapters ON paragraphs.chapter_id = chapters.id WHERE chapters.Description = "A Sea-port in Cyprus. An open place near the quay.";
SELECT (COUNT(CASE WHEN w.GenreType = 'Tragedy' THEN c.Scene END) * 100.0 / COUNT(c.Scene)) AS percentage FROM chapters c JOIN works w ON c.work_id = w.id WHERE w.Date = '1594';
SELECT COUNT(chapters.id) / COUNT(DISTINCT works.id) AS avg_chapters FROM chapters JOIN works ON chapters.work_id = works.id WHERE works.Date = '1599';
SELECT COUNT(*) FROM characters WHERE Description = 'servant to Timon';
SELECT Title FROM works WHERE Date = (SELECT MIN(Date) FROM works);
SELECT COUNT(*) FROM works WHERE GenreType = 'Poem';
SELECT COUNT(*) FROM chapters WHERE work_id = 7 AND Act = 1;
SELECT COUNT(*) FROM works WHERE Date BETWEEN 1500 AND 1599 AND GenreType = 'Tragedy';
SELECT CharName FROM characters WHERE Description = 'Daughter to Capulet';
SELECT COUNT(*) FROM paragraphs WHERE PlainText = 'Ay, surely, mere the truth: I know his lady.'
SELECT w.LongTitle FROM works w JOIN chapters c ON w.id = c.work_id WHERE c.Act = 1 GROUP BY w.LongTitle ORDER BY COUNT(c.Scene) DESC LIMIT 1;
SELECT c.Description FROM chapters c JOIN (   SELECT chapter_id, COUNT(*) AS paragraph_count   FROM paragraphs   GROUP BY chapter_id ) p ON c.id = p.chapter_id WHERE p.paragraph_count = (   SELECT MAX(paragraph_count)   FROM (     SELECT COUNT(*) AS paragraph_count     FROM paragraphs     GROUP BY chapter_id   ) ) LIMIT 1;
SELECT chapters.Description FROM chapters JOIN works ON chapters.work_id = works.id WHERE works.LongTitle = 'Twelfth Night, Or What You Will' AND chapters.Scene = 2 AND chapters.Act = 2;
SELECT DISTINCT c.Description FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id WHERE p.ParagraphNum < 150;
SELECT w.Title FROM works w JOIN chapters c ON w.id = c.work_id WHERE c.Description = 'A field near Windsor';
Error: 第 2998 个样本有 2 个SQL。
SELECT c.CharName FROM characters c JOIN paragraphs p ON c.id = p.character_id JOIN chapters ch ON p.chapter_id = ch.id WHERE ch.Description = 'The sea-coast.' AND c.CharName != '(stage directions)' GROUP BY c.id HAVING COUNT(p.character_id) = 5;
Error: 第 3000 个样本有 2 个SQL。
SELECT c.id FROM characters c JOIN paragraphs p ON c.id = p.character_id JOIN chapters ch ON p.chapter_id = ch.id WHERE ch.Description = 'Florence. Without the walls. A tucket afar off.' AND p.PlainText = 'His name, I pray you.';
SELECT COUNT(*) FROM characters WHERE id IN (     SELECT character_id     FROM paragraphs     WHERE chapter_id IN (         SELECT id         FROM chapters         WHERE work_id IN (             SELECT id             FROM works             WHERE Title = 'Hamlet'         )     ) );
SELECT COUNT(*) FROM chapters WHERE Act = 5 AND work_id = (SELECT id FROM works WHERE LongTitle = 'History of Henry VIII');
SELECT COUNT(*) FROM (   SELECT w.id   FROM works w   JOIN chapters c ON w.id = c.work_id   WHERE w.GenreType = 'History'   AND c.Act = 1   GROUP BY w.id   HAVING COUNT(DISTINCT c.Scene) < 2 ) as subquery;
SELECT COUNT(DISTINCT ch.Act) FROM chapters ch JOIN works w ON ch.work_id = w.id WHERE w.Title = 'Sonnets';
SELECT c.Description FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE ch.Abbrev = '1Play' ORDER BY c.id LIMIT 1;
SELECT Title, GenreType FROM works WHERE id IN (     SELECT work_id     FROM chapters     GROUP BY work_id     HAVING COUNT(DISTINCT Act) = 1 );
Error: 第 3008 个样本有 2 个SQL。
SELECT chapters.Description FROM chapters JOIN works ON chapters.work_id = works.id WHERE works.Title = 'A Lover''s Complaint' AND chapters.Act = 1 AND chapters.Scene = 1;
SELECT w.Date FROM works w JOIN chapters c ON w.id = c.work_id GROUP BY w.Date, w.id HAVING COUNT(c.Scene) = 154;
Error: 第 3011 个样本有 2 个SQL。
WITH Romeo_Juliet AS (     SELECT p.character_id, COUNT(p.id) as count     FROM paragraphs p     JOIN chapters c ON p.chapter_id = c.id     JOIN works w ON c.work_id = w.id     JOIN characters ch ON p.character_id = ch.id     WHERE w.LongTitle = 'The Tragedy of Romeo and Juliet'     GROUP BY p.character_id ), Total_Characters AS (     SELECT SUM(count) as total     FROM Romeo_Juliet ), Romeo_Count AS (     SELECT count     FROM Romeo_Juliet rj     JOIN characters ch ON rj.character_id = ch.id     WHERE ch.CharName = 'Romeo' ), Juliet_Count AS (     SELECT count     FROM Romeo_Juliet rj     JOIN characters ch ON rj.character_id = ch.id     WHERE ch.CharName = 'Juliet' ) SELECT     (SELECT count FROM Romeo_Count) * 100.0 / (SELECT total FROM Total_Characters) as Romeo_Percentage,     (SELECT count FROM Juliet_Count) * 100.0 / (SELECT total FROM Total_Characters) as Juliet_Percentage;
SELECT p.ParagraphNum FROM paragraphs p WHERE p.PlainText = 'This is Illyria, lady';
SELECT COUNT(ParagraphNum) FROM paragraphs WHERE chapter_id = 18881;
SELECT Title FROM works WHERE GenreType = 'History' LIMIT 5;
SELECT COUNT(*) FROM chapters WHERE Act = 5 AND work_id = 9;
SELECT characters.CharName, characters.Description FROM characters JOIN paragraphs ON characters.id = paragraphs.character_id WHERE paragraphs.chapter_id = 18710;
SELECT COUNT(*) FROM chapters WHERE work_id = (SELECT id FROM works WHERE Title = 'Midsummer Night\'s Dream');
SELECT COUNT(*) FROM paragraphs JOIN chapters ON paragraphs.chapter_id = chapters.id WHERE chapters.Act = 5 AND chapters.Scene = 1 AND chapters.work_id = (SELECT id FROM works WHERE Title = 'Comedy of Errors');
SELECT characters.CharName, characters.Description FROM characters JOIN paragraphs ON characters.id = paragraphs.character_id JOIN chapters ON paragraphs.chapter_id = chapters.id JOIN works ON chapters.work_id = works.id WHERE works.Title = 'Venus and Adonis';
SELECT w.Title FROM works w JOIN chapters c ON w.id = c.work_id JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE ch.CharName = 'Froth' GROUP BY w.Title;
SELECT COUNT(*) FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE ch.CharName = 'First Witch';
SELECT chapters.Scene, chapters.Description FROM chapters JOIN works ON chapters.work_id = works.id WHERE works.LongTitle = 'Pericles, Prince of Tyre' AND chapters.Act = 1;
SELECT w.LongTitle FROM works w JOIN chapters c ON w.id = c.work_id JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE ch.Description = 'Servant to Montague';
SELECT chapters.Scene, chapters.Act, works.Title FROM chapters JOIN works ON chapters.work_id = works.id WHERE chapters.Description = "The house of ANTIPHOLUS of Ephesus";
SELECT c.CharName, p.ParagraphNum, p.PlainText FROM characters c JOIN paragraphs p ON c.id = p.character_id WHERE c.Description = 'cousin to the king';
SELECT AVG(chapters.Scene) FROM chapters JOIN works ON chapters.work_id = works.id WHERE works.Title = 'Antony and Cleopatra' GROUP BY chapters.Act;
SELECT     (COUNT(CASE WHEN w.Title = 'All''s Well That Ends Well' THEN p.id ELSE NULL END) * 100.0 / COUNT(p.id)) AS percentage FROM     paragraphs p JOIN     chapters c ON p.chapter_id = c.id JOIN     works w ON c.work_id = w.id;
SELECT COUNT(CharName) FROM characters WHERE Abbrev = 'all';
SELECT Title FROM works WHERE GenreType = 'comedy' LIMIT 3;
SELECT     (SELECT COUNT(*) FROM works WHERE Date > 1593 AND GenreType = 'comedy') -     (SELECT COUNT(*) FROM works WHERE Date > 1593 AND GenreType = 'History') AS Difference
SELECT w.LongTitle FROM works w WHERE w.GenreType = 'History' ORDER BY w.Date DESC LIMIT 1;
SELECT id FROM works WHERE Title LIKE '%Henry%';
SELECT CharName FROM characters WHERE Description = 'a senator of Venice';
SELECT c.CharName FROM characters c JOIN paragraphs p ON c.id = p.character_id WHERE p.ParagraphNum = 8 AND p.chapter_id = 18820;
SELECT c.Description FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE c.id = 18704 AND ch.CharName = 'Orsino';
SELECT COUNT(*) FROM chapters WHERE work_id = (SELECT id FROM works WHERE LongTitle = 'Twelfth Night, Or What You Will');
SELECT c.Description FROM characters c JOIN paragraphs p ON c.id = p.character_id WHERE p.ParagraphNum = 20;
Error: 第 3039 个样本有 2 个SQL。
SELECT c.Description FROM chapters c JOIN works w ON c.work_id = w.id WHERE c.id = 18706 AND w.Title = 'All''s Well That Ends Well'
SELECT c.CharName FROM characters c JOIN paragraphs p ON c.id = p.character_id WHERE p.ParagraphNum = 3;
SELECT p.PlainText FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE c.CharName = 'Aedile';
SELECT characters.CharName FROM characters JOIN paragraphs ON characters.id = paragraphs.character_id WHERE paragraphs.chapter_id = 18708 LIMIT 2;
SELECT COUNT(DISTINCT ch.Act) FROM chapters ch JOIN works w ON ch.work_id = w.id WHERE w.GenreType = 'comedy' AND w.Title = 'Two Gentlemen of Verona';
SELECT     (COUNT(CASE WHEN w.GenreType = 'history' AND                 (SELECT COUNT(s.Scene) FROM chapters s WHERE s.work_id = w.id) >= 5                 AND w.Date BETWEEN 1500 AND 1599          THEN w.id END) * 100.0 /      COUNT(CASE WHEN w.GenreType = 'history' THEN w.id END)) AS percentage FROM works w;
SELECT (COUNT(CASE WHEN ch.Act = 5 THEN 1 END) * 100 / COUNT(ch.Act)) AS percentage FROM chapters ch JOIN works w ON ch.work_id = w.id WHERE w.Title = 'Titus Andronicus';
SELECT COUNT(*) FROM works WHERE GenreType = 'Tragedy';
SELECT COUNT(*) FROM works WHERE Title LIKE '%Henry%';
SELECT character_id FROM paragraphs WHERE PlainText = 'O my poor brother! and so perchance may he be.'
SELECT p.ParagraphNum, p.PlainText FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE c.CharName = 'Sir Andrew Aguecheek';
Error: 第 3051 个样本有 2 个SQL。
SELECT p.PlainText FROM paragraphs p JOIN characters c ON p.character_id = c.id WHERE p.ParagraphNum BETWEEN 1900 AND 1950 AND c.Description = 'a sea captain, friend to Sebastian';
SELECT w.LongTitle FROM works w JOIN chapters c ON w.id = c.work_id WHERE c.Act = 4 AND c.Scene = 5 AND c.Description = 'Mytilene. A street before the brothel.';
SELECT c.CharName FROM characters c JOIN paragraphs p ON c.id = p.character_id WHERE p.PlainText = 'This is Illyria, lady.';
SELECT COUNT(DISTINCT w.id) FROM works w JOIN chapters c ON w.id = c.work_id JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE w.Date BETWEEN 1600 AND 1610 AND ch.CharName = 'Third Servingman';
SELECT c.Description FROM chapters c JOIN works w ON c.work_id = w.id WHERE w.Title = 'Venus and Adonis' ORDER BY c.Scene DESC LIMIT 1;
SELECT COUNT(p.character_id) FROM paragraphs p JOIN chapters c ON p.chapter_id = c.id JOIN works w ON c.work_id = w.id JOIN characters ch ON p.character_id = ch.id WHERE c.Act = 1 AND c.Scene = 2 AND w.Title = 'Twelfth Night' AND ch.CharName = 'Viola';
Error: 第 3058 个样本有 2 个SQL。
SELECT c.Description FROM chapters c JOIN paragraphs p ON c.id = p.chapter_id WHERE p.PlainText = 'What, wilt thou hear some music, my sweet love?';
SELECT DISTINCT ch.Scene FROM chapters ch JOIN paragraphs p ON ch.id = p.chapter_id JOIN characters c ON p.character_id = c.id JOIN works w ON ch.work_id = w.id WHERE c.CharName = 'Sir Toby Belch' AND w.Title = 'Twelfth Night';
SELECT w.Title FROM works w JOIN chapters c ON w.id = c.work_id JOIN paragraphs p ON c.id = p.chapter_id JOIN characters ch ON p.character_id = ch.id WHERE w.Date < 1600 AND w.GenreType = 'Tragedy' AND ch.CharName = 'Tybalt';
SELECT DISTINCT c.id FROM chapters c JOIN works w ON c.work_id = w.id WHERE w.Date > (SELECT AVG(w2.Date)*0.89 FROM works w2)
Error: 第 3063 个样本有 2 个SQL。
SELECT d.car_name FROM data d JOIN price p ON d.ID = p.ID WHERE d.cylinders = 8 ORDER BY p.price DESC LIMIT 1;
SELECT COUNT(*) FROM data JOIN price ON data.ID = price.ID WHERE data.weight > 3000 AND price.price < 30000;
SELECT d.acceleration FROM data d JOIN price p ON d.ID = p.ID WHERE p.price = (SELECT MAX(price) FROM price);
SELECT price.price FROM price JOIN data ON price.ID = data.ID WHERE data.car_name = 'ford torino'
SELECT T3.origin FROM cars.data AS T1 JOIN cars.production AS T2 ON T1.ID = T2.ID JOIN cars.country AS T3 ON T2.country = T3.country WHERE T1.car_name = 'ford torino' AND T2.model_year = 1970;
SELECT COUNT(*) FROM production JOIN country ON production.country = country.origin WHERE production.model_year = 1970 AND country.country = 'USA';
SELECT d.car_name FROM data d JOIN country c ON d.ID = c.origin WHERE c.country = 'USA';
SELECT d.car_name FROM data d JOIN price p ON d.ID = p.ID ORDER BY p.price DESC LIMIT 3;
SELECT T1.model_year FROM production AS T1 JOIN data AS T2 ON T1.ID = T2.ID WHERE T2.car_name = 'chevrolet impala'
SELECT COUNT(*) FROM data d JOIN price p ON d.ID = p.ID WHERE d.acceleration > 10 AND p.price > 20000 AND p.price < 30000;
SELECT d.weight FROM data d JOIN price p ON d.ID = p.ID WHERE p.price > 40000;
SELECT MAX(d.acceleration) FROM data d JOIN price p ON d.ID = p.ID WHERE p.price > 40000;
SELECT AVG(p.price) FROM price p JOIN data d ON p.ID = d.ID WHERE d.cylinders = 8;
SELECT MAX(data.displacement / data.cylinders) AS max_sweep_volume FROM data JOIN price ON data.ID = price.ID WHERE price.price < 30000;
Error: 第 3078 个样本有 2 个SQL。
SELECT T1.origin FROM cars.country AS T1 JOIN cars.data AS T2 ON T1.country = T2.ID WHERE T2.car_name = 'chevrolet malibu';
SELECT d.mpg FROM data d JOIN price p ON d.ID = p.ID WHERE p.price = (SELECT MAX(price) FROM price);
SELECT T1.origin FROM country AS T1 JOIN production AS T2 ON T1.country = T2.country WHERE T2.ID = 382;
SELECT c.country FROM country c JOIN price p ON c.ID = p.ID WHERE p.price = 44274.40748;
SELECT p.price FROM cars.price p JOIN cars.data d ON p.ID = d.ID WHERE d.car_name = 'volkswagen dasher' AND d.acceleration = 14.1;
SELECT data.displacement FROM data JOIN price ON data.ID = price.ID WHERE price.price = 37443.85589;
SELECT p.model_year AS year FROM production p JOIN price pr ON p.ID = pr.ID WHERE pr.price = 32650.65157;
SELECT price.price FROM cars.data JOIN cars.price ON data.ID = price.ID WHERE data.car_name = 'toyota corona hardtop'
SELECT T1.cylinders FROM data AS T1 JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = (SELECT MIN(price) FROM price);
SELECT d.car_name, p.price FROM data d JOIN price p ON d.ID = p.ID WHERE d.weight = (SELECT MAX(weight) FROM data)
SELECT T1.origin FROM cars.country AS T1 JOIN cars.data AS T2 ON T1.country = T2.ID ORDER BY T2.horsepower DESC LIMIT 1;
SELECT (COUNT(c.ID) FILTER (WHERE p.country = 'Japan')) * 100.0 / COUNT(c.ID) AS Japanese_Car_Percentage FROM cars.data c JOIN cars.production p ON c.ID = p.ID;
SELECT (data.displacement / data.cylinders) AS swept_volume FROM data JOIN price ON data.ID = price.ID WHERE price.price = 34538.97449;
SELECT d.car_name FROM data d JOIN price p ON d.ID = p.ID WHERE p.price = (SELECT MAX(price) FROM price);
SELECT COUNT(*) FROM production JOIN country ON production.country = country.origin WHERE country.country = 'USA' AND production.model_year = 1981;
SELECT p.price FROM price p JOIN data d ON p.ID = d.ID WHERE d.displacement / d.cylinders = (     SELECT MAX(d2.displacement / d2.cylinders)     FROM data d2 );
SELECT d.car_name, MAX(d.horsepower) FROM data d JOIN production p ON d.ID = p.ID WHERE p.country = 'Japan' GROUP BY d.car_name ORDER BY d.horsepower DESC LIMIT 1;
SELECT COUNT(*) FROM data WHERE car_name = 'ford maverick';
SELECT T3.origin FROM data AS T1 JOIN production AS T2 ON T1.ID = T2.ID JOIN country AS T3 ON T2.country = T3.country WHERE T1.mpg = (SELECT MAX(mpg) FROM data)
SELECT d.car_name FROM cars.data d JOIN cars.price p ON d.ID = p.ID WHERE d.car_name LIKE 'dodge%' ORDER BY p.price LIMIT 1;
SELECT d.car_name FROM data d JOIN price p ON d.ID = p.ID JOIN production pr ON d.ID = pr.ID JOIN country c ON pr.country = c.origin WHERE c.country = 'USA' GROUP BY d.car_name ORDER BY p.price DESC LIMIT 1;
SELECT COUNT(*) FROM data JOIN price ON data.ID = price.ID WHERE data.displacement > 400 AND price.price >= 30000;
SELECT model_year FROM production WHERE country = 'Europe' GROUP BY model_year ORDER BY COUNT(ID) DESC LIMIT 1;
SELECT price FROM data JOIN price ON data.ID = price.ID WHERE car_name = 'peugeot 505s turbo diesel'
SELECT d.acceleration FROM data d JOIN price p ON d.ID = p.ID JOIN production pr ON d.ID = pr.ID JOIN country c ON pr.country = c.origin WHERE c.country = 'USA' ORDER BY p.price LIMIT 1;
SELECT T1.country, COUNT(T1.ID) / COUNT(DISTINCT T1.model_year) AS avg_annual_production FROM production AS T1 JOIN country AS T2 ON T1.country = T2.origin GROUP BY T1.country ORDER BY COUNT(T1.ID) DESC LIMIT 1;
SELECT (COUNT(c.ID) FILTER (WHERE p.country = 'Japan')) * 100.0 / COUNT(c.ID) AS percentage FROM cars.data c JOIN cars.production p ON c.model = p.model_year WHERE (c.displacement / c.cylinders) >= 30;
SELECT data.car_name FROM data JOIN production ON data.ID = production.ID WHERE production.model_year = 1975;
SELECT AVG(price) FROM price JOIN production ON price.ID = production.ID JOIN country ON production.country = country.origin WHERE country.country = 'Europe'
SELECT price FROM price WHERE ID = 15;
SELECT COUNT(*) FROM data JOIN country ON data.ID = country.origin WHERE country.country = 'Japan' AND data.weight < 3000;
SELECT COUNT(*) FROM production JOIN data ON production.ID = data.ID WHERE production.model_year = 1973 AND data.horsepower < 100;
SELECT data.ID FROM data JOIN price ON data.ID = price.ID JOIN production ON data.ID = production.ID WHERE production.country = 'Japan' AND price.price > 35000 AND data.acceleration = 14;
SELECT p.model_year FROM production p JOIN data d ON p.ID = d.ID WHERE d.weight = (SELECT MAX(weight) FROM data);
SELECT d.horsepower, p.model_year FROM data d JOIN production p ON d.ID = p.ID WHERE d.car_name = 'subaru dl';
SELECT d.car_name FROM data d JOIN country c ON d.ID = c.origin JOIN price p ON d.ID = p.ID WHERE c.country = 'Japan' ORDER BY p.price DESC LIMIT 1;
SELECT d.car_name FROM data d JOIN price p ON d.ID = p.ID WHERE p.price = 20000;
SELECT COUNT(*) FROM cars.price AS p JOIN cars.production AS prod ON p.ID = prod.ID JOIN cars.country AS ctry ON prod.country = ctry.origin WHERE p.price > 40000 AND ctry.country = 'USA';
SELECT price.price, country.origin FROM cars.data JOIN cars.price ON data.ID = price.ID JOIN cars.country ON data.car_name = country.origin JOIN cars.production ON data.ID = production.ID WHERE data.car_name = 'Ford Maverick';
SELECT d.car_name FROM data d JOIN price p ON d.ID = p.ID WHERE p.price > (SELECT AVG(price)*0.85 FROM price)
SELECT     (SELECT COUNT(D.ID) FROM data D JOIN production P ON D.ID = P.ID WHERE D.horsepower = 130 AND P.model_year = 1970) -     (SELECT COUNT(D.ID) FROM data D JOIN production P ON D.ID = P.ID WHERE D.horsepower = 130 AND P.model_year = 1976) AS Difference;
SELECT p.ID FROM production p JOIN country c ON p.country = c.origin WHERE c.country = 'Japan' AND p.model_year = 1979;
SELECT T1.country FROM country AS T1 JOIN data AS T2 ON T1.origin = T2.ID WHERE T2.mpg = (SELECT MIN(mpg) FROM data)
SELECT T3.car_name, T3.model, (T3.displacement / T3.cylinders) AS sweep_volume, T2.model_year FROM (     SELECT ID, MAX(weight) AS max_weight     FROM data     GROUP BY ID ) AS T1 JOIN production AS T2 ON T1.ID = T2.ID JOIN data AS T3 ON T1.ID = T3.ID WHERE T1.max_weight = T3.weight;
SELECT data.car_name, data.horsepower FROM data JOIN production ON data.ID = production.ID JOIN country ON production.country = country.origin WHERE production.model_year = 1977 AND country.country = 'Europe';
SELECT data.car_name, data.model FROM data JOIN price ON data.ID = price.ID ORDER BY price.price DESC LIMIT 1;
SELECT price.price FROM cars.data AS data JOIN cars.price AS price ON data.ID = price.ID WHERE data.car_name = 'chevrolet bel air';
SELECT AVG(p.price) FROM price p JOIN production pr ON p.ID = pr.ID WHERE pr.country = 'Japan';
SELECT T3.country FROM price AS T1 JOIN production AS T2 ON T1.ID = T2.ID JOIN country AS T3 ON T3.origin = T2.country WHERE T1.price = (SELECT MIN(price) FROM price)
SELECT d.ID, d.car_name, p.country FROM data d JOIN production p ON d.ID = p.ID WHERE p.model_year = 1975 AND d.cylinders = (     SELECT MAX(cylinders) FROM data     WHERE ID IN (         SELECT ID FROM production         WHERE model_year = 1975     ) );
SELECT d.cylinders, d.acceleration, p.model_year FROM cars.price AS pr JOIN cars.data AS d ON pr.ID = d.ID JOIN cars.production AS p ON d.ID = p.ID WHERE pr.price = (SELECT MIN(price) FROM cars.price)
SELECT data.car_name, price.price FROM data JOIN price ON data.ID = price.ID WHERE data.model = 82 AND data.mpg > 30;
SELECT COUNT(*) FROM production JOIN data ON production.ID = data.ID WHERE data.car_name = 'ford maverick';
SELECT (COUNT(cars.ID) FILTER (WHERE production.country = 'USA')) * 100.0 / COUNT(cars.ID) AS Percentage_USA_Cars FROM cars.production;
SELECT AVG(p_count) as avg_production_rate, d.car_name FROM (   SELECT model_year, COUNT(ID) as p_count   FROM production   WHERE model_year BETWEEN 1971 AND 1980   GROUP BY model_year ) as subquery JOIN data d ON production.ID = d.ID WHERE d.weight < 1800 GROUP BY d.car_name;
SELECT AVG(price) FROM price JOIN data ON price.ID = data.ID WHERE data.model = 70;
SELECT price.price FROM cars.data AS data JOIN cars.price AS price ON data.ID = price.ID WHERE data.car_name = 'chevrolet vega 2300'
SELECT T1.country FROM country AS T1 JOIN data AS T2 ON T1.origin = T2.ID WHERE T2.car_name = 'chevy c20'
SELECT p.price FROM price p JOIN data d ON p.ID = d.ID JOIN production pr ON p.ID = pr.ID WHERE d.car_name LIKE 'ford%' AND pr.model_year BETWEEN 1970 AND 1980;
SELECT d.car_name FROM data d JOIN production p ON d.ID = p.ID WHERE p.model_year = 1975 ORDER BY d.mpg DESC LIMIT 1;
SELECT d.car_name, p.price FROM data d JOIN price p ON d.ID = p.ID WHERE d.mpg = (SELECT MIN(mpg) FROM data) AND p.price = (SELECT MAX(price) FROM price);
SELECT COUNT(*) FROM data JOIN country ON data.ID = country.origin WHERE country.country = 'USA' AND data.acceleration < 12;
SELECT COUNT(*) FROM data d JOIN production p ON d.ID = p.ID JOIN country c ON p.country = c.origin WHERE c.country = 'Japan' AND d.weight > 2000;
SELECT d.car_name FROM data d JOIN price p ON d.ID = p.ID WHERE p.price = (SELECT MAX(price) FROM price);
SELECT T1.model_year FROM production AS T1 JOIN data AS T2 ON T1.ID = T2.ID WHERE T2.car_name = 'buick skylark 320'
SELECT p.country FROM production p JOIN price pr ON p.ID = pr.ID WHERE p.model_year = 1970 GROUP BY p.country ORDER BY MAX(pr.price) DESC LIMIT 1;
SELECT COUNT(*) FROM production JOIN data ON production.ID = data.ID WHERE data.horsepower > 200 AND production.model_year = 1975;
SELECT (COUNT(cars.ID) FILTER (WHERE production.country = 'USA')) * 100.0 / COUNT(cars.ID) AS percentage FROM cars.production JOIN cars.country ON TRUE WHERE cars.ID IN (SELECT ID FROM cars.price) AND cars.ID IN (SELECT ID FROM cars.data);
SELECT AVG(data.weight) FROM data JOIN production ON data.ID = production.ID JOIN country ON production.country = country.origin WHERE country.country = 'Japan' AND data.cylinders = 4 AND production.model_year BETWEEN 1975 AND 1980;
SELECT SUM(donation_total) FROM donations WHERE donation_timestamp LIKE '2012%';
Error: 第 3149 个样本有 3 个SQL。
SELECT SUM(donation_total) FROM donations WHERE donation_timestamp LIKE '2011%' AND for_honoree = 't' AND via_giving_page = 't';
SELECT     donor_acctid,     (donation_optional_support / donation_total) * 100 AS percentage_of_optional_support FROM     donations WHERE     is_teacher_acct = 'f';
SELECT title FROM essays JOIN projects ON essays.projectid = projects.projectid WHERE projects.primary_focus_subject = 'Literacy';
SELECT title FROM essays JOIN projects ON essays.projectid = projects.projectid WHERE projects.poverty_level = 'highest poverty';
SELECT p.primary_focus_subject, p.projectid FROM projects p WHERE p.primary_focus_subject = (     SELECT e.primary_focus_subject     FROM essays e     WHERE e.title = 'Toot Your Flute!' ) AND p.projectid != (     SELECT e.projectid     FROM essays e     WHERE e.title = 'Toot Your Flute!' );
SELECT essays.title FROM essays JOIN projects ON essays.projectid = projects.projectid WHERE projects.teacher_prefix = 'Dr.';
SELECT p.title, p.total_price_excluding_optional_support AS project_cost FROM projects p JOIN essays e ON p.projectid = e.projectid WHERE p.students_reached = 320;
SELECT d.donation_message, e.title FROM donations d JOIN essays e ON d.projectid = e.projectid WHERE d.donor_city = 'Texas City';
SELECT r.vendor_name, r.item_name, r.item_unit_price FROM resources r JOIN essays e ON r.projectid = e.projectid WHERE e.title = 'Lights, Camera, Action!';
SELECT SUM(donation_to_project) FROM donations JOIN projects ON donations.projectid = projects.projectid WHERE projects.title = 'Whistle While We Work!';
Error: 第 3160 个样本有 2 个SQL。
Error: 第 3161 个样本有 3 个SQL。
SELECT     (SUM(donations.donation_to_project) FILTER (WHERE projects.school_metro = 'rural')) * 100.0 / SUM(donations.donation_to_project) AS RuralDonationPercentage FROM     donations JOIN     projects ON donations.projectid = projects.projectid;
SELECT     e.title AS Project_Name,     p.total_price_excluding_optional_support AS Project_Cost,     SUM(d.donation_to_project) AS Amount_Collected,     ((p.total_price_excluding_optional_support - SUM(d.donation_to_project)) / p.total_price_excluding_optional_support * 100) AS Percentage_Lacking FROM     essays e JOIN     projects p ON e.projectid = p.projectid JOIN     donations d ON p.projectid = d.projectid GROUP BY     e.title, p.total_price_excluding_optional_support ORDER BY     p.total_price_excluding_optional_support DESC LIMIT 1;
SELECT COUNT(DISTINCT schoolid) FROM projects WHERE school_district = 'West New York School District' AND poverty_level = 'highest poverty';
SELECT COUNT(*) FROM donations WHERE is_teacher_acct = 't' AND donor_state = 'CO';
SELECT projectid FROM projects WHERE total_price_including_optional_support = (     SELECT MAX(total_price_including_optional_support)     FROM projects );
SELECT donor_state, COUNT(donor_state) AS Num_Donations FROM donations WHERE payment_method = 'paypal' AND for_honoree = 't' AND payment_included_campaign_gift_card = 't' GROUP BY donor_state ORDER BY Num_Donations DESC LIMIT 1;
SELECT donationid, donation_total FROM donations WHERE donation_total = (SELECT MAX(donation_total) FROM donations);
SELECT p.projectid, r.item_name FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE p.total_price_including_optional_support - p.total_price_excluding_optional_support = (     SELECT MAX(total_price_including_optional_support - total_price_excluding_optional_support)     FROM projects )
SELECT r.item_name, r.item_quantity, p.teacher_prefix FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE r.projectid = 'd6ef27c07c30c81f0c16c32b6acfa2ff';
SELECT SUM(p.total_price_including_optional_support) FROM projects p JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Recording Rockin' Readers';
SELECT school_latitude, school_longitude FROM projects WHERE projectid IN (     SELECT projectid     FROM essays     WHERE title = 'Smile for the Camera!!!' );
SELECT e.title, SUM(d.donation_total) as total_donations FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid WHERE d.donor_acctid = (     SELECT d2.donor_acctid     FROM donations d2     ORDER BY d2.donation_total DESC     LIMIT 1 ) GROUP BY e.title ORDER BY total_donations DESC LIMIT 1;
SELECT     d.donor_acctid,     r.project_resource_type,     SUM(d.donation_total) as total_donated FROM     donations d JOIN     resources r ON d.projectid = r.projectid GROUP BY     d.donor_acctid, r.project_resource_type ORDER BY     total_donated DESC LIMIT 10;
SELECT p.projectid, p.date_posted, r.item_name FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE p.date_posted = (     SELECT MIN(date_posted)     FROM projects ) GROUP BY p.projectid, p.date_posted, r.item_name;
SELECT r.vendor_name FROM resources r JOIN projects p ON r.projectid = p.projectid JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'iMath' GROUP BY r.vendor_name;
SELECT p.date_posted, p.grade_level FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE r.item_quantity = (SELECT MAX(item_quantity) FROM resources)
Error: 第 3178 个样本有 2 个SQL。
SELECT e.title, d.donor_acctid, (d.donation_to_project / p.total_price_excluding_optional_support) * 100 AS donation_percentage FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid WHERE p.total_price_excluding_optional_support = (SELECT MAX(total_price_excluding_optional_support) FROM projects) AND d.donation_to_project = (SELECT MAX(donation_to_project) FROM donations WHERE projectid = p.projectid)
SELECT     d.donor_state,     d.donor_acctid,     AVG(d.donation_optional_support) AS avg_optional_support,     r.project_resource_type FROM     donations d JOIN     resources r ON d.projectid = r.projectid GROUP BY     d.donor_acctid,     d.donor_state,     r.project_resource_type ORDER BY     SUM(d.donation_optional_support) DESC LIMIT 5;
SELECT T2.projectid, T1.item_name FROM resources AS T1 JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_city = 'Brooklyn' GROUP BY T2.projectid, T1.item_name ORDER BY COUNT(T1.item_name) DESC LIMIT 1;
SELECT COUNT(DISTINCT T2.schoolid) FROM resources AS T1 JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_metro = 'urban' AND T1.project_resource_type = 'Books';
Error: 第 3183 个样本有 2 个SQL。
SELECT COUNT(DISTINCT d.donor_acctid) FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE d.donor_city = 'Los Angeles' AND p.school_city != 'Los Angeles';
SELECT p.teacher_prefix FROM projects p JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Reading About Other Cultures';
Error: 第 3186 个样本有 2 个SQL。
SELECT essays.title, donations.donor_acctid FROM essays JOIN projects ON essays.projectid = projects.projectid JOIN donations ON projects.projectid = donations.projectid WHERE projects.school_city = 'Chicago';
SELECT p.projectid, e.title FROM projects p JOIN essays e ON p.projectid = e.projectid WHERE p.teacher_prefix = 'Dr.' AND p.students_reached > 300;
SELECT DISTINCT r.vendor_name FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.primary_focus_subject = 'Literacy' AND r.project_resource_type = 'book';
SELECT e.title FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN resources r ON p.projectid = r.projectid GROUP BY e.title ORDER BY SUM(r.item_unit_price * r.item_quantity) DESC LIMIT 1;
SELECT COUNT(*) FROM donations WHERE donor_city = 'New York' AND is_teacher_acct = 't';
SELECT COUNT(DISTINCT donor_acctid) FROM donations WHERE donor_state = 'NJ' AND for_honoree = 't';
SELECT donation_message FROM donations WHERE donationid = 'a84dace1ff716f6f0c7af8ef9090a5d5';
SELECT DISTINCT project_resource_type FROM resources WHERE vendor_name = 'Lakeshore Learning Materials';
SELECT item_name FROM resources WHERE vendor_name = 'Lakeshore Learning Materials' ORDER BY item_quantity DESC LIMIT 1;
SELECT COUNT(*) FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE p.teacher_ny_teaching_fellow = 't' AND d.donor_city = 'New York';
SELECT COUNT(*) FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE r.vendor_name = 'Lakeshore Learning Materials' AND p.teacher_prefix = 'Dr.';
SELECT DISTINCT r.vendor_name FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.poverty_level = 'highest poverty';
SELECT p.schoolid FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE r.vendor_name = 'Lakeshore Learning Materials' ORDER BY p.fulfillment_labor_materials DESC LIMIT 1;
SELECT r.vendor_name FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.total_price_including_optional_support - p.total_price_excluding_optional_support = (     SELECT MAX(p2.total_price_including_optional_support - p2.total_price_excluding_optional_support)     FROM projects p2 )
SELECT SUM(donation_total) FROM donations JOIN projects ON donations.projectid = projects.projectid WHERE projects.school_city = 'Brooklyn';
SELECT d.donation_message FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.school_city = 'Brooklyn' AND p.school_magnet = 't';
SELECT COUNT(*) FROM donations JOIN projects ON donations.projectid = projects.projectid WHERE payment_included_acct_credit = 't' AND projects.school_year_round = 't';
SELECT SUM(d.dollar_amount) FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.primary_focus_area = 'Literacy & Language';
SELECT d.donor_acctid FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.primary_focus_area = 'Literacy & Language' GROUP BY d.donor_acctid ORDER BY SUM(d.donation_total) DESC LIMIT 1;
SELECT r.item_name, MAX(r.item_quantity) FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.primary_focus_area = 'Literacy & Language' AND r.project_resource_type = 'Supplies' GROUP BY r.item_name ORDER BY SUM(r.item_quantity) DESC LIMIT 1;
SELECT r.item_name, MAX(r.item_unit_price) FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.primary_focus_area = 'Literacy & Language' GROUP BY r.item_name ORDER BY r.item_unit_price DESC LIMIT 1;
SELECT AVG(d.donation_total) FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.school_city = 'Brooklyn';
SELECT donor_city FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5';
SELECT is_teacher_acct FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5';
SELECT teacher_prefix FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973';
SELECT teacher_ny_teaching_fellow FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973';
SELECT essays.title FROM essays JOIN projects ON essays.projectid = projects.projectid WHERE projects.school_city = 'Abington';
SELECT r.item_name FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e';
SELECT COUNT(DISTINCT p.schoolid) FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.payment_included_acct_credit = 'f' AND p.school_magnet = 't';
SELECT pr.project_resource_type FROM resources pr JOIN donations d ON pr.projectid = d.projectid WHERE d.donationid = 'b39547f29dfc25fb13c6e9e8d940dc43';
SELECT     (COUNT(CASE WHEN resources.project_resource_type = 'Books' THEN projects.projectid END) * 100.0 / COUNT(projects.projectid)) AS Percentage_Books FROM     projects JOIN     resources ON projects.projectid = resources.projectid WHERE     projects.school_magnet = 't';
SELECT COUNT(DISTINCT T2.schoolid) FROM resources AS T1 JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name = 'ABC School Supply' AND T2.school_magnet = 't';
SELECT COUNT(DISTINCT p.schoolid) FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.donor_acctid = '000eebf28658900e63b538cf8a73afbd' AND p.poverty_level = 'highest poverty';
SELECT e.short_description FROM essays e JOIN projects p ON e.projectid = p.projectid WHERE p.schoolid = '301c9bf0a45d159d162b65a93fddd74e';
SELECT school_city FROM projects WHERE projectid = (SELECT projectid FROM essays WHERE title = 'iMath');
SELECT d.payment_method FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e';
SELECT SUM(donations.donation_total) FROM donations JOIN projects ON donations.projectid = projects.projectid WHERE projects.teacher_acctid = '822b7b8768c17456fdce78b65abcc18e';
SELECT d.is_teacher_acct FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.schoolid = 'd4af834b1d3fc8061e1ee1b3f1a77b85' LIMIT 1;
SELECT     (COUNT(CASE WHEN T2.school_city = 'Brooklyn' THEN T2.schoolid END) * 100.0 / COUNT(T2.schoolid)) AS Brooklyn_School_Percentage FROM     donations AS T1 JOIN     projects AS T2 ON T1.projectid = T2.projectid WHERE     T1.is_teacher_acct = 't';
SELECT     (COUNT(CASE WHEN p.students_reached > 30 THEN p.projectid END) * 100.0 / COUNT(p.projectid)) AS percentage FROM     projects p JOIN     donations d ON p.projectid = d.projectid WHERE     d.is_teacher_acct = 't';
SELECT COUNT(DISTINCT schoolid) FROM projects WHERE school_city = 'Bethlehem' AND school_metro = 'suburban';
SELECT COUNT(*) FROM projects WHERE school_city = 'Los Angeles' AND school_year_round = 't';
SELECT COUNT(*) FROM projects WHERE school_magnet = 't' AND school_city = 'New York' AND school_county = 'Manhattan';
SELECT COUNT(DISTINCT teacher_acctid) FROM projects WHERE school_city = 'Twin Falls' AND primary_focus_area = 'Math & Science';
SELECT COUNT(*) FROM projects WHERE primary_focus_subject = 'Literature & Writing' AND teacher_prefix = 'Mr';
SELECT COUNT(*) FROM projects WHERE school_district = 'Boston Public School District' AND grade_level = 'Grades 3-5';
SELECT school_city FROM projects WHERE projectid = (SELECT projectid FROM essays WHERE title = 'ABC Read');
SELECT teacher_prefix FROM projects WHERE projectid = (SELECT projectid FROM essays WHERE title = 'Creating Memories and Inspiring Dreams');
SELECT d.is_teacher_acct FROM donations d JOIN essays e ON d.projectid = e.projectid WHERE e.title = 'Calculate, Financial Security For Tomorrow Starts Today!';
SELECT e.title FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid WHERE d.donation_message = 'Donation on behalf of Matt Carpenter because I''m a strong believer in education';
SELECT COUNT(*) FROM donations JOIN projects ON donations.projectid = projects.projectid JOIN essays ON projects.projectid = essays.projectid WHERE essays.title = 'A Rug For Reaching Readers';
SELECT SUM(donations.donation_to_project + donations.donation_optional_support) FROM donations JOIN essays ON donations.projectid = essays.projectid WHERE essays.title = 'Engaging Young Readers with a Leveled Classroom Library';
SELECT d.donation_optional_support FROM donations d JOIN projects p ON d.projectid = p.projectid JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Armenian Genocide';
SELECT e.short_description FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid WHERE d.donation_timestamp = '2012-09-06 14:44:29';
SELECT d.donationid, d.donation_to_project, d.donation_included_optional_support FROM donations d JOIN essays e ON d.projectid = e.projectid WHERE e.title = 'I Can''t See It...Can You Help Me???' AND d.donation_included_optional_support = true;
SELECT p.teacher_acctid FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.donation_timestamp = '2008-07-29 11:38:43';
SELECT schoolid FROM projects WHERE title = 'Virtual Aquarium Needs Help!';
SELECT e.title FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid WHERE d.donation_total = (SELECT MAX(donation_total) FROM donations);
SELECT (d.donation_optional_support / d.donation_total) * 100 AS tip_percentage FROM donations d JOIN projects p ON d.projectid = p.projectid JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Awesome Audiobooks Make Avid Readers';
SELECT (COUNT(CASE WHEN d.payment_method = 'creditcard' THEN d.projectid END) * 100 / COUNT(d.projectid)) AS CreditCardPercentage FROM donations AS d JOIN essays AS e ON d.projectid = e.projectid WHERE e.title = 'Bringing Drama to Life';
SELECT short_description FROM essays WHERE title = 'Future Einsteins Of America';
Error: 第 3248 个样本有 2 个SQL。
SELECT COUNT(*) FROM projects WHERE school_district = 'Livingston Parish School District' AND school_metro = 'suburban';
SELECT vendor_name FROM resources WHERE item_name = 'Classroom Keepers Management Center';
SELECT DISTINCT project_resource_type FROM resources WHERE vendor_name = 'Sax Arts & Crafts';
SELECT school_county, COUNT(*) as num_projects FROM projects WHERE school_state = 'NY' AND poverty_level = 'low poverty' GROUP BY school_county ORDER BY num_projects DESC LIMIT 1;
SELECT school_district FROM projects WHERE projectid = (SELECT projectid FROM essays WHERE title = 'Future Einsteins Of America');
SELECT d.payment_method FROM donations d JOIN projects p ON d.projectid = p.projectid JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Needed Resource Materials For My Students';
SELECT COUNT(*) FROM donations JOIN projects ON donations.projectid = projects.projectid WHERE projects.school_district = 'Memphis City School District' AND donations.payment_method = 'creditcard';
SELECT DISTINCT p.school_district FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE r.vendor_name = 'Barnes and Noble';
SELECT essays.projectid, essays.teacher_acctid, essays.title, essays.short_description, essays.need_statement, essays.essay, projects.school_latitude, projects.school_longitude FROM essays JOIN projects ON essays.projectid = projects.projectid JOIN resources ON projects.projectid = resources.projectid WHERE resources.item_name = 'R & A Plant Genetics' AND resources.vendor_name = 'Benchmark Education';
SELECT payment_method, COUNT(*) as count FROM donations JOIN projects ON donations.projectid = projects.projectid WHERE projects.school_state = 'GA' GROUP BY payment_method ORDER BY count DESC LIMIT 1;
SELECT p.school_latitude, p.school_longitude, p.resource_type FROM projects p JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Look, Look, We Need a Nook!'
SELECT d.donation_message FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.school_district = 'Newark School District' AND p.school_latitude = 40.735332 AND p.school_longitude = -74.196014;
SELECT p.date_posted FROM projects p JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Lets Share Ideas'
SELECT d.donation_message FROM donations d JOIN projects p ON d.projectid = p.projectid JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Lets Share Ideas' AND d.payment_method = 'credit card';
SELECT T4.project_resource_type, COUNT(T4.project_resource_type) AS frequency FROM projects AS T1 JOIN resources AS T4 ON T1.projectid = T4.projectid WHERE T1.school_district = 'Los Angeles Unif Sch Dist' GROUP BY T4.project_resource_type ORDER BY frequency DESC LIMIT 1;
SELECT DISTINCT school_city FROM projects JOIN resources ON projects.projectid = resources.projectid WHERE school_district = 'Los Angeles Unified School District' AND vendor_name = 'Quill.com' AND project_resource_type = 'supplies';
SELECT SUM(r.item_unit_price * r.item_quantity) AS total_price, d.school_latitude, d.school_longitude, d.school_district FROM resources r JOIN projects d ON r.projectid = d.projectid WHERE r.vendor_name = 'ABC School Supply' AND r.project_resource_type = 'Other' GROUP BY d.school_latitude, d.school_longitude, d.school_district;
SELECT SUM(d.donation_total) AS total_donated, e.school_city, p.poverty_level FROM essays e JOIN projects p ON e.projectid = p.projectid JOIN donations d ON p.projectid = d.projectid WHERE e.title = 'Lets Share Ideas' AND d.payment_method = 'paypal' GROUP BY e.school_city, p.poverty_level;
SELECT COUNT(*) FROM donations WHERE donor_city = 'Pocatello' AND is_teacher_acct = 'f';
SELECT COUNT(DISTINCT schoolid) FROM projects WHERE school_county = 'Suffolk' AND teacher_prefix = 'Dr.';
SELECT SUM(donation_to_project + donation_optional_support) FROM donations WHERE payment_method = 'Amazon';
Error: 第 3270 个样本有 2 个SQL。
SELECT vendorid, COUNT(*) as resource_count FROM resources WHERE item_unit_price < 15 AND project_resource_type != 'technology' GROUP BY vendorid;
SELECT COUNT(*) FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE r.item_quantity BETWEEN 5 AND 10 AND r.vendor_name = 'Quill.com';
SELECT projects.projectid FROM projects WHERE projects.school_district = 'Union Pub School District I-9' AND projects.teacher_ny_teaching_fellow = 't';
SELECT DISTINCT school_city FROM projects WHERE school_county = 'Los Angeles' AND school_metro = 'Suburban';
SELECT projectid, vendor_name FROM resources WHERE project_resource_type = 'Books';
SELECT     (COUNT(DISTINCT CASE WHEN d.payment_included_campaign_gift_card = 't' THEN p.projectid ELSE NULL END) * 100 / COUNT(DISTINCT p.projectid)) AS percentage FROM     projects p LEFT JOIN     donations d ON p.projectid = d.projectid WHERE     d.payment_method = 'no_cash_received'
SELECT     (COUNT(CASE WHEN school_metro = 'suburban' THEN projectid END) * 100.0 / COUNT(projectid)) AS percentage_suburban FROM     projects WHERE     school_city = 'Santa Barbara';
SELECT     payment_method,     (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM donations WHERE substr(donation_timestamp,1,7) = '2013-03')) AS Percentage FROM     donations WHERE     substr(donation_timestamp,1,7) = '2013-03' GROUP BY     payment_method;
SELECT AVG(item_unit_price) FROM resources WHERE vendor_name = 'AKJ Books';
SELECT COUNT(DISTINCT p.schoolid) FROM projects p JOIN donations d ON p.projectid = d.projectid JOIN resources r ON p.projectid = r.projectid WHERE p.school_city = 'Brooklyn' AND p.school_metro = 'urban' AND d.for_honoree = 't' AND r.item_name = 'TT992 - Refill Pack for Safety Name Tags';
SELECT COUNT(DISTINCT p.schoolid) FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE p.poverty_level = 'highest' AND d.payment_included_campaign_gift_card = 't';
SELECT T2.school_city, COUNT(*) AS num_schools FROM donations AS T1 JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.dollar_amount = 'under_10' GROUP BY T2.school_city ORDER BY num_schools DESC LIMIT 1;
SELECT e.title FROM essays e JOIN projects p ON e.projectid = p.projectid WHERE p.school_latitude = 42003718 AND p.school_longitude = -87668289;
SELECT     CASE         WHEN teacher_ny_teaching_fellow = 't' THEN 'Yes'         ELSE 'No'     END AS Is_NY_Teaching_Fellow FROM essays JOIN projects ON essays.projectid = projects.projectid WHERE essays.title = 'Team More Books!';
SELECT DISTINCT r.vendor_name FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.primary_focus_area = 'Literature';
SELECT DISTINCT vendor_name FROM resources JOIN projects ON resources.projectid = projects.projectid WHERE projects.grade_level = 'Grades 9-12';
SELECT COUNT(DISTINCT d.donor_acctid) FROM donations d JOIN projects p ON d.projectid = p.projectid WHERE p.school_city = 'Chicago' AND d.is_teacher_acct = 't';
SELECT COUNT(*) FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE p.school_city = 'Rock Hill' AND d.is_teacher_acct = 't';
SELECT SUM(donation_total) FROM donations JOIN projects ON donations.projectid = projects.projectid WHERE donation_included_optional_support = 't' AND projects.students_reached > 300;
SELECT SUM(item_quantity) FROM resources JOIN projects ON resources.projectid = projects.projectid WHERE projects.school_district = 'Onslow Co School District' AND projects.school_metro = 'urban';
SELECT AVG(donation_to_project + donation_optional_support) AS average_donation FROM donations JOIN projects ON donations.projectid = projects.projectid WHERE projects.school_county = 'Fresno' GROUP BY projects.projectid;
SELECT     (COUNT(CASE WHEN e.title = 'ABC Read' THEN p.school_county ELSE NULL END) / COUNT(p.school_county)) * 100 AS percentage_of_counties_with_ABC_Read FROM     essays e JOIN     projects p ON e.projectid = p.projectid;
Error: 第 3293 个样本有 2 个SQL。
SELECT date_posted FROM projects JOIN essays ON projects.projectid = essays.projectid WHERE title = 'Photojournalists Want to Exhibit Their Best Works';
SELECT r.item_name, MAX(r.item_unit_price) FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE p.primary_focus_subject = 'Mathematics' GROUP BY r.item_name ORDER BY MAX(r.item_unit_price) DESC LIMIT 1;
SELECT school_latitude, school_longitude FROM resources JOIN projects ON resources.projectid = projects.projectid WHERE item_name = 'Viewscreen LCD from Texas Instruments, TI-84 Plus';
SELECT COUNT(*) FROM donations JOIN projects ON donations.projectid = projects.projectid WHERE projects.title = 'Look, Look, We Need a Nook!';
SELECT DISTINCT p.poverty_level FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.donor_zip = '7079';
SELECT r.vendor_name FROM resources r JOIN projects p ON r.projectid = p.projectid JOIN essays e ON p.projectid = e.projectid WHERE e.title = 'Bloody Times' GROUP BY r.vendor_name;
SELECT r.item_name, p.school_zip FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE r.vendor_name = 'Sax Arts & Crafts';
SELECT school_longitude, school_latitude FROM essays JOIN projects ON essays.projectid = projects.projectid WHERE title = 'Wiping Away Bad Grades';
SELECT p.primary_focus_subject FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.payment_included_campaign_gift_card = 't';
SELECT r.item_name, r.item_unit_price, p.short_description FROM resources r JOIN projects p ON r.projectid = p.projectid WHERE r.project_resource_type = 'Books' ORDER BY r.item_unit_price DESC LIMIT 1;
SELECT grade_level FROM essays JOIN projects ON essays.projectid = projects.projectid WHERE title = 'Too Close for Comfort';
SELECT SUM(p.students_reached) FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.donor_zip = '22205';
SELECT     (COUNT(CASE WHEN d.via_giving_page = 't' THEN d.donationid ELSE NULL END) * 100 / COUNT(d.donationid)) AS percentage,     p.primary_focus_area FROM     donations d JOIN     projects p ON d.projectid = p.projectid GROUP BY     p.primary_focus_area;
SELECT     (COUNT(CASE WHEN r.vendor_name = 'Best Buy for Business' THEN r.resourceid ELSE NULL END) / COUNT(r.resourceid)) * 100 AS percentage_bestbuy,     p.date_posted FROM     resources r JOIN     projects p ON r.projectid = p.projectid WHERE     r.project_resource_type = 'Technology' GROUP BY     p.date_posted;
SELECT     (SELECT SUM(num_sales) FROM region_sales WHERE game_platform_id = 50 AND region_id = 1) -     (SELECT SUM(num_sales) FROM region_sales WHERE game_platform_id = 51 AND region_id = 1) AS result;
Error: 第 3309 个样本有 2 个SQL。
SELECT COUNT(*) FROM game WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'Action');
SELECT g.genre_name FROM genre g JOIN game gm ON g.id = gm.genre_id WHERE gm.game_name = '3D Lemmings';
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id WHERE g.game_name = '3D Lemmings';
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = '10TACLE Studios';
SELECT COUNT(*) FROM game JOIN game_publisher ON game.id = game_publisher.game_id JOIN publisher ON game_publisher.publisher_id = publisher.id JOIN genre ON game.genre_id = genre.id WHERE publisher.publisher_name = '10TACLE Studios' AND genre.genre_name = 'Puzzle';
SELECT g.game_name FROM game g JOIN genre ge ON g.genre_id = ge.id JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = '10TACLE Studios' AND ge.genre_name = 'Puzzle';
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id GROUP BY p.publisher_name ORDER BY COUNT(gp.game_id) DESC LIMIT 1;
SELECT p.platform_name FROM platform p JOIN game_platform gp ON p.id = gp.platform_id JOIN game g ON gp.game_publisher_id = g.id WHERE g.game_name = 'Panzer Tactics' AND gp.release_year = 2007;
SELECT gp.release_year FROM game_platform gp JOIN game g ON gp.game_publisher_id = (SELECT id FROM game_publisher WHERE game_id = (SELECT id FROM game WHERE game_name = 'Panzer Tactics')) JOIN platform p ON gp.platform_id = p.id WHERE p.platform_name = 'DS';
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN genre ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Puzzle';
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN genre ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Puzzle' GROUP BY p.publisher_name ORDER BY COUNT(g.game_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT T3.publisher_id) FROM genre AS T1 JOIN game AS T2 ON T1.id = T2.genre_id JOIN game_publisher AS T3 ON T2.id = T3.game_id WHERE T1.genre_name = 'Puzzle' GROUP BY T3.publisher_id HAVING COUNT(T2.id) > 3;
SELECT (COUNT(T3.id) * 100 / COUNT(T2.id)) AS percentage FROM publisher AS T1 JOIN game_publisher AS T2 ON T1.id = T2.publisher_id JOIN game AS T3 ON T2.game_id = T3.id JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T1.publisher_name = 'Nintendo' AND T4.genre_name = 'Sports';
SELECT SUM(rs.num_sales * 100000) / 4 AS average_sales FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN platform p ON gp.platform_id = p.id WHERE p.platform_name = 'DS'
SELECT COUNT(*) FROM game WHERE id IN (SELECT game_id FROM game_publisher WHERE publisher_id = 352);
SELECT T.genre_id FROM game AS T WHERE T.game_name = 'Pro Evolution Soccer 2012';
SELECT id FROM region WHERE region_name = 'Japan';
SELECT gp.id FROM game_platform gp JOIN region_sales rs ON gp.id = rs.game_platform_id WHERE rs.region_id = 2 GROUP BY gp.id ORDER BY SUM(rs.num_sales) DESC LIMIT 1;
SELECT T1.id FROM genre AS T1 JOIN game AS T2 ON T1.id = T2.genre_id GROUP BY T1.id ORDER BY COUNT(T2.game_name) DESC LIMIT 1;
SELECT id FROM game WHERE game_name = 'Resident Evil Archives: Resident Evil';
SELECT COUNT(*) FROM game_platform JOIN platform ON game_platform.platform_id = platform.id WHERE platform.platform_name = 'X360' AND game_platform.release_year = 2010;
SELECT publisher_name FROM publisher JOIN game_publisher ON publisher.id = game_publisher.publisher_id JOIN game ON game_publisher.game_id = game.id WHERE game.game_name = 'ModNation Racers';
SELECT gp.id FROM game_platform gp JOIN region_sales rs ON gp.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Japan' GROUP BY gp.id ORDER BY SUM(rs.num_sales) DESC LIMIT 1;
SELECT COUNT(DISTINCT T3.platform_id) FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T1.game_name = 'Pro Evolution Soccer 2016'
SELECT COUNT(*) FROM game WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'Sports');
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id WHERE gp.game_id = '10031';
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id GROUP BY p.publisher_name ORDER BY COUNT(gp.game_id) DESC LIMIT 1;
SELECT     (SELECT COUNT(*) FROM game AS g JOIN genre AS ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Sports') -     (SELECT COUNT(*) FROM game AS g JOIN genre AS ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Simulation')
SELECT g.genre_name FROM genre g JOIN game gm ON g.id = gm.genre_id WHERE gm.game_name = 'Resident Evil: Revelations'
SELECT SUM(rs.num_sales * 100000) AS total_sales FROM region_sales rs JOIN region r ON rs.region_id = r.id JOIN game_platform gp ON rs.game_platform_id = gp.id WHERE gp.id = 3871 AND r.region_name = 'Europe';
SELECT COUNT(*) FROM game JOIN game_publisher ON game.id = game_publisher.game_id JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE publisher.publisher_name = 'Ascaron Entertainment GmbH';
SELECT T1.platform_name FROM platform AS T1 JOIN game_platform AS T2 ON T1.id = T2.platform_id WHERE T2.release_year = (SELECT MIN(release_year) FROM game_platform)
SELECT (COUNT(CASE WHEN g.genre_name = 'Adventure' THEN 1 ELSE NULL END) * 100 / COUNT(gg.game_id)) AS Percentage FROM (     SELECT gp.game_id     FROM game_publisher gp     JOIN publisher p ON gp.publisher_id = p.id     WHERE p.publisher_name = 'Namco Bandai Games' ) gg JOIN game g ON gg.game_id = g.id JOIN genre gr ON g.genre_id = gr.id
SELECT     SUM(CASE WHEN p.publisher_name = 'Atari' THEN 1 ELSE 0 END) /     SUM(CASE WHEN p.publisher_name = 'Athena' THEN 1 ELSE 0 END) AS times_more FROM     game_publisher gp JOIN     publisher p ON gp.publisher_id = p.id;
SELECT COUNT(*) FROM game JOIN game_publisher ON game.id = game_publisher.game_id JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE publisher.publisher_name = 'Electronic Arts';
SELECT g.genre_name FROM genre g JOIN game gm ON g.id = gm.genre_id WHERE gm.game_name = 'Advent Rising';
SELECT COUNT(*) FROM game JOIN genre ON game.genre_id = genre.id JOIN game_publisher ON game.id = game_publisher.game_id JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE genre.genre_name = 'Role-Playing' AND publisher.publisher_name = 'Microsoft Game Studios';
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id GROUP BY p.publisher_name ORDER BY COUNT(gp.game_id) DESC LIMIT 1;
SELECT T3.platform_name FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id JOIN publisher AS T4 ON T2.publisher_id = T4.id WHERE T4.publisher_name = 'Codemasters' AND T3.release_year = 2004;
SELECT COUNT(*) FROM game_platform JOIN platform ON game_platform.platform_id = platform.id WHERE platform.platform_name = 'PS4' AND game_platform.release_year = 2014;
SELECT DISTINCT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game_platform gp2 ON gp2.game_publisher_id = gp.id WHERE gp2.release_year = (     SELECT MIN(release_year)     FROM game_platform );
SELECT COUNT(DISTINCT gp.publisher_id) FROM game_platform AS gp JOIN platform AS p ON gp.platform_id = p.id JOIN game_publisher AS gpub ON gp.game_publisher_id = gpub.id JOIN publisher AS pub ON gpub.publisher_id = pub.id JOIN region_sales AS rs ON gp.id = rs.game_platform_id JOIN region AS r ON rs.region_id = r.id WHERE p.platform_name = 'X360' AND gp.release_year = 2011 AND r.region_name = 'Japan';
SELECT gp.platform_id, gp.game_id FROM (     SELECT rs.game_platform_id, SUM(rs.num_sales) as total_sales     FROM region_sales rs     JOIN region r ON rs.region_id = r.id     WHERE r.region_name = 'Europe'     GROUP BY rs.game_platform_id ) sub JOIN game_platform gp ON sub.game_platform_id = gp.id ORDER BY sub.total_sales DESC LIMIT 1;
Error: 第 3353 个样本有 2 个SQL。
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id GROUP BY p.id HAVING COUNT(gp.game_id) = 1;
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = '505 Games';
SELECT T1.genre_id FROM game AS T1 WHERE T1.game_name = '25 to Life'
SELECT game.id FROM game WHERE game.genre_id = 2;
SELECT gp.release_year FROM game_platform gp JOIN game g ON gp.game_publisher_id = (SELECT id FROM game_publisher WHERE game_id = g.id) WHERE g.id BETWEEN 1 AND 10;
SELECT game_publisher_id FROM game_platform WHERE platform_id = 15;
SELECT game.id FROM game JOIN game_platform ON game_platform.game_publisher_id = game_publisher.id JOIN game_publisher ON game_publisher.game_id = game.id WHERE game_platform.release_year BETWEEN 2000 AND 2003;
SELECT region_sales.num_sales * 100000 AS number_of_sales FROM region_sales JOIN game_platform ON game_platform.id = region_sales.game_platform_id WHERE region_sales.region_id = 2 AND game_platform.id = 9615;
SELECT DISTINCT p.platform_name FROM platform p JOIN game_platform gp ON p.id = gp.platform_id WHERE gp.release_year = 2016;
SELECT gp.release_year FROM game_platform gp JOIN game g ON gp.game_publisher_id = (SELECT id FROM game_publisher WHERE game_id = (SELECT id FROM game WHERE game_name = '3DS Classic Collection'))
SELECT AVG(rs.num_sales) * 100000 AS avg_sales_in_japan FROM region_sales rs JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Japan';
SELECT DISTINCT g.genre_name FROM genre g JOIN game gg ON g.id = gg.genre_id JOIN game_publisher gp ON gg.id = gp.game_id JOIN game_platform gp2 ON gp.id = gp2.game_publisher_id WHERE gp2.release_year BETWEEN 2000 AND 2002;
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = '3DO';
SELECT COUNT(*) FROM game WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'Role-Playing');
SELECT DISTINCT r.region_name FROM region r JOIN region_sales rs ON r.id = rs.region_id JOIN game_platform gp ON rs.game_platform_id = gp.id WHERE rs.num_sales * 100000 >= 300000;
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN game_platform gp2 ON gp.id = gp2.game_publisher_id JOIN region_sales rs ON gp2.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'North America' GROUP BY p.publisher_name ORDER BY SUM(rs.num_sales) DESC LIMIT 1;
SELECT gp.release_year FROM game_platform gp JOIN game_publisher gpublisher ON gp.game_publisher_id = gpublisher.id JOIN game g ON gpublisher.game_id = g.id JOIN region_sales rs ON gp.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'North America' AND rs.num_sales = 3.5;
SELECT p.platform_name FROM platform p JOIN game_platform gp ON p.id = gp.platform_id JOIN game g ON gp.game_publisher_id = g.id WHERE g.game_name = '15 Days';
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id WHERE gp.game_id = 75;
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gp2 ON gp.id = gp2.game_publisher_id JOIN region_sales rs ON rs.game_platform_id = gp2.id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Japan' GROUP BY g.game_name ORDER BY SUM(rs.num_sales) DESC LIMIT 1;
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game_platform gp_platform ON gp.id = gp_platform.game_publisher_id JOIN region_sales rs ON gp_platform.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Japan' AND rs.num_sales > (SELECT AVG(num_sales) * 0.9 FROM region_sales WHERE region_id = (SELECT id FROM region WHERE region_name = 'Japan')) GROUP BY p.publisher_name;
SELECT     (COUNT(CASE WHEN p.platform_name = 'PSP' THEN gp.id ELSE NULL END) * 100 / COUNT(gp.id)) AS percentage FROM     game_platform gp JOIN     platform p ON gp.platform_id = p.id WHERE     gp.release_year = 2004;
SELECT COUNT(*) FROM game_platform WHERE release_year = 1981;
SELECT genre_id FROM game WHERE game_name = '2Xtreme';
SELECT r.region_name, SUM(rs.num_sales * 100000) as total_sales FROM region r JOIN region_sales rs ON r.id = rs.region_id JOIN game_platform gp ON rs.game_platform_id = gp.id WHERE gp.id = 9658 GROUP BY r.region_name;
SELECT id FROM publisher WHERE publisher_name = '1C Company';
SELECT genre_name FROM genre WHERE id = 3;
SELECT game.id FROM game JOIN game_platform ON game_platform.game_publisher_id = game_publisher.id JOIN game_publisher ON game_publisher.game_id = game.id WHERE game_platform.release_year = 2017;
SELECT gp.release_year FROM game_platform gp JOIN game g ON gp.game_publisher_id = g.id WHERE g.game_name = 'Adventure Island'
SELECT COUNT(*) FROM game WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'Puzzle');
SELECT g.game_name FROM game g JOIN game_platform gp ON g.id = gp.game_id JOIN platform p ON gp.platform_id = p.id WHERE p.platform_name = 'SCD';
SELECT COUNT(*) FROM game JOIN game_publisher ON game.id = game_publisher.game_id JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE publisher.publisher_name = 'Acclaim Entertainment';
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id WHERE g.game_name = 'Chronicles of the Sword';
SELECT SUM(rs.num_sales * 100000) FROM region_sales rs JOIN region r ON rs.region_id = r.id JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN platform p ON gp.platform_id = p.id WHERE r.region_name = 'North America' AND p.platform_name = 'PS4';
SELECT gp.platform_id FROM (     SELECT rs.game_platform_id, SUM(rs.num_sales) as total_sales     FROM region_sales rs     JOIN region r ON rs.region_id = r.id     WHERE r.region_name = 'Europe'     GROUP BY rs.game_platform_id ) AS subquery JOIN game_platform gp ON subquery.game_platform_id = gp.id ORDER BY subquery.total_sales DESC LIMIT 1;
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gp2 ON gp.id = gp2.game_publisher_id WHERE gp2.release_year = 2011;
SELECT COUNT(*) FROM game JOIN game_publisher ON game.id = game_publisher.game_id JOIN game_platform ON game_publisher.id = game_platform.game_publisher_id JOIN platform ON game_platform.platform_id = platform.id WHERE platform.platform_name = 'Wii';
Error: 第 3391 个样本有 2 个SQL。
SELECT g.genre_name FROM genre g JOIN game gm ON g.id = gm.genre_id WHERE gm.game_name = '2Xtreme';
SELECT T3.platform_name FROM game AS T1 JOIN game_platform AS T2 ON T1.id = T2.game_id JOIN platform AS T3 ON T2.platform_id = T3.id WHERE T1.game_name = 'Panzer Tactics'
SELECT     ((SUM(rs.num_sales) FILTER (WHERE gp.game_platform_id = 9577 AND r.region_name = 'North America') -     AVG(rs.num_sales)) /     AVG(rs.num_sales)) * 100 AS percent_above_avg FROM     region_sales rs JOIN     region r ON rs.region_id = r.id JOIN     game_platform gp ON rs.game_platform_id = gp.id WHERE     gp.platform_id = 9577;
SELECT game_name FROM game ORDER BY LENGTH(game_name) DESC LIMIT 1;
SELECT COUNT(*) FROM game_platform WHERE release_year = 2001;
SELECT SUM(num_sales) AS total_sales FROM region_sales;
SELECT AVG(num_of_games) FROM (     SELECT COUNT(DISTINCT T1.game_id) as num_of_games     FROM game_publisher AS T1     JOIN publisher AS T2 ON T1.publisher_id = T2.id     GROUP BY T1.publisher_id ) as T3
SELECT MIN(release_year) FROM game_platform;
SELECT g.genre_name FROM genre g JOIN game gb ON g.id = gb.genre_id GROUP BY gb.genre_id ORDER BY COUNT(gb.genre_id) LIMIT 1;
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id WHERE g.game_name = 'Prism: Light the Way';
Error: 第 3402 个样本有 2 个SQL。
SELECT COUNT(DISTINCT g.id) FROM game g WHERE NOT EXISTS (     SELECT 1     FROM region_sales rs     JOIN region r ON rs.region_id = r.id     WHERE r.region_name = 'Europe'     AND rs.game_platform_id IN (         SELECT gp.id         FROM game_platform gp         WHERE gp.game_publisher_id IN (             SELECT g_pub.id             FROM game_publisher g_pub             WHERE g_pub.game_id = g.id         )     )     AND rs.num_sales > 0 );
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gp2 ON gp.id = gp2.game_publisher_id WHERE gp2.release_year = 2006;
SELECT g.genre_name FROM genre g JOIN game gm ON g.id = gm.genre_id WHERE gm.game_name = 'Mario vs. Donkey Kong'
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id GROUP BY p.publisher_name ORDER BY COUNT(gp.game_id) DESC LIMIT 1;
SELECT game.game_name FROM game JOIN genre ON game.genre_id = genre.id WHERE genre.genre_name = 'Platform';
SELECT DISTINCT gp.release_year FROM game_platform gp JOIN platform p ON gp.platform_id = p.id WHERE p.platform_name = 'WiiU' ORDER BY gp.release_year;
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gp2 ON gp.id = gp2.game_publisher_id JOIN region_sales rs ON gp2.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Japan' GROUP BY g.game_name ORDER BY SUM(rs.num_sales) DESC LIMIT 1;
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'Activision';
SELECT COUNT(DISTINCT T3.publisher_id) FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name LIKE 'Marvel%';
SELECT     (COUNT(CASE WHEN g.genre_name = 'sports' THEN 1 END) * 100.0 / COUNT(g.game_name)) AS percentage FROM     game AS ga JOIN     genre AS g ON ga.genre_id = g.id;
SELECT     DIVIDE(         (SELECT SUM(rs.num_sales) FROM region_sales rs JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'North America'),         (SELECT SUM(rs.num_sales) FROM region_sales rs JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Japan')     ) AS ratio;
SELECT release_year, COUNT(release_year) as release_count FROM game_platform GROUP BY release_year ORDER BY release_count DESC LIMIT 1;
SELECT COUNT(*) FROM publisher WHERE publisher_name LIKE '%Interactive%';
SELECT p.platform_name FROM platform p JOIN game_platform gp ON p.id = gp.platform_id JOIN region_sales rs ON gp.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'North America' GROUP BY p.platform_name ORDER BY SUM(rs.num_sales) DESC LIMIT 2;
SELECT COUNT(*) FROM game JOIN game_publisher ON game.id = game_publisher.game_id JOIN publisher ON game_publisher.publisher_id = publisher.id JOIN game_platform ON game_publisher.id = game_platform.game_publisher_id WHERE publisher.publisher_name = 'BMG Interactive Entertainment' AND game_platform.release_year = 2012;
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game_platform gp2 ON gp.id = gp2.game_publisher_id WHERE gp2.release_year = 2007 GROUP BY p.publisher_name ORDER BY COUNT(gp.game_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT T3.publisher_id) FROM game AS T1 JOIN game_publisher AS T2 ON T1.id = T2.game_id JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Minecraft'
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN genre ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Action' GROUP BY p.publisher_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM game JOIN genre ON game.genre_id = genre.id JOIN game_publisher ON game.id = game_publisher.game_id JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE genre.genre_name = 'Sports' AND publisher.publisher_name = 'Nintendo';
SELECT g.genre_name FROM genre g JOIN game ge ON g.id = ge.genre_id WHERE ge.game_name = '2 Games in 1: Sonic Advance & ChuChu Rocket!';
SELECT COUNT(*) FROM (   SELECT rs.game_platform_id   FROM region_sales rs   JOIN region r ON rs.region_id = r.id   JOIN game_platform gp ON rs.game_platform_id = gp.id   JOIN platform p ON gp.platform_id = p.id   WHERE r.region_name = 'Other' AND rs.num_sales > 0 AND p.platform_name = 'DS' ) as T;
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'American Softworks';
SELECT COUNT(*) FROM game WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'Strategy');
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id WHERE g.game_name = 'Overwatch';
SELECT g.genre_name FROM genre g JOIN game gm ON g.id = gm.genre_id GROUP BY g.genre_name ORDER BY COUNT(gm.game_name) DESC LIMIT 1;
SELECT SUM(region_sales.num_sales * 100000) AS total_games_sold FROM region_sales JOIN region ON region.id = region_sales.region_id WHERE region.region_name = 'Europe' AND region_sales.game_platform_id = 26;
SELECT COUNT(*) FROM game_platform WHERE release_year = 2001;
SELECT COUNT(*) FROM game WHERE game_name LIKE '%Box%';
SELECT T3.game_name, SUM(T4.num_sales) AS total_sales FROM region_sales AS T1 JOIN game_platform AS T2 ON T1.game_platform_id = T2.id JOIN game AS T3 ON T2.game_publisher_id = T3.id GROUP BY T3.game_name ORDER BY total_sales DESC LIMIT 3;
SELECT MIN(release_year) FROM game_platform;
SELECT publisher_name FROM publisher WHERE publisher_name LIKE '%Entertainment%';
SELECT g.game_name FROM game g JOIN genre ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Adventure';
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'Pioneer LDC';
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gp2 ON gp.id = gp2.game_publisher_id JOIN platform p ON gp2.platform_id = p.id WHERE p.platform_name = 'SCD';
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gp_platform ON gp.id = gp_platform.game_publisher_id JOIN region r ON r.id = gp_platform.region_id WHERE r.region_name = 'Japan';
SELECT g.genre_name FROM genre g JOIN game gr ON g.id = gr.genre_id JOIN game_publisher gp ON gr.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'Agatsuma Entertainment';
SELECT COUNT(*) FROM game WHERE genre_id NOT IN (     SELECT id     FROM genre     WHERE genre_name IN ('Role-Playing', 'Shooter', 'Simulation') );
Error: 第 3440 个样本有 2 个SQL。
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id JOIN genre ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Puzzle' GROUP BY p.publisher_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT g.game_name FROM game g JOIN game_platform gp ON g.id = gp.game_id JOIN region_sales rs ON gp.id = rs.game_platform_id GROUP BY g.game_name ORDER BY SUM(rs.num_sales) LIMIT 1;
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id WHERE g.game_name = 'Pachi-Slot Kanzen Kouryaku 3: Universal Koushiki Gaido Volume 3'
SELECT r.region_name FROM region r JOIN region_sales rs ON r.id = rs.region_id JOIN game_platform gp ON gp.id = rs.game_platform_id JOIN game g ON g.id = gp.game_publisher_id WHERE g.game_name = 'Pengo'
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gp2 ON gp.id = gp2.game_publisher_id WHERE gp2.release_year = 2010;
SELECT AVG(region_sales.num_sales * 100000) FROM region_sales JOIN game_platform ON region_sales.game_platform_id = game_platform.id JOIN platform ON game_platform.platform_id = platform.id WHERE platform.platform_name = 'PS2';
SELECT (COUNT(CASE WHEN p.publisher_name = 'Brash Entertainment' THEN gp.game_id ELSE NULL END) * 100.0 / COUNT(gp.game_id)) AS percentage FROM game_publisher gp JOIN publisher p ON gp.publisher_id = p.id;
SELECT SUM(rs.num_sales * 100000) AS total_games_sold FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id WHERE rs.region_id = 1;
SELECT COUNT(*) FROM game WHERE game_name LIKE '%FIFA%';
SELECT p.platform_name FROM platform p JOIN game_platform gp ON p.id = gp.platform_id JOIN region_sales rs ON gp.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Europe' GROUP BY p.platform_name ORDER BY SUM(rs.num_sales) DESC LIMIT 1;
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id WHERE g.game_name = '2002 FIFA World Cup';
SELECT platform.platform_name FROM platform JOIN game_platform ON platform.id = game_platform.platform_id JOIN game_publisher ON game_platform.game_publisher_id = game_publisher.id JOIN game ON game_publisher.game_id = game.id WHERE game.game_name = '3Xtreme';
SELECT T3.genre_name FROM game AS T1 JOIN genre AS T3 ON T1.genre_id = T3.id WHERE T1.game_name = '2010 FIFA World Cup South Africa'
SELECT r.region_name FROM region r JOIN region_sales rs ON r.id = rs.region_id GROUP BY r.region_name ORDER BY SUM(rs.num_sales) DESC LIMIT 1;
SELECT SUM(region_sales.num_sales * 100000) AS total_games_sold FROM region_sales JOIN game_platform ON game_platform.id = region_sales.game_platform_id JOIN platform ON platform.id = game_platform.platform_id JOIN region ON region.id = region_sales.region_id WHERE platform.platform_name = 'PS3' AND region.region_name = 'Japan';
SELECT T3.game_name FROM game_platform AS T1 JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2007;
SELECT COUNT(*) FROM game JOIN game_publisher ON game.id = game_publisher.game_id JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE publisher.publisher_name = 'Activision';
SELECT gp.release_year FROM game_platform gp JOIN game_publisher gpublisher ON gp.game_publisher_id = gpublisher.id JOIN game g ON gpublisher.game_id = g.id JOIN region_sales rs ON gp.id = rs.game_platform_id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Japan' GROUP BY gp.release_year HAVING SUM(rs.num_sales) > 200000;
SELECT COUNT(*) FROM game_platform gp JOIN game_publisher gpublisher ON gp.game_publisher_id = gpublisher.id JOIN game g ON gpublisher.game_id = g.id JOIN platform p ON gp.platform_id = p.id WHERE p.platform_name = 'PS3' AND gp.release_year = 2010;
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id GROUP BY p.publisher_name ORDER BY COUNT(gp.game_id) DESC LIMIT 1;
SELECT COUNT(*) FROM game WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'shooter');
SELECT     (SUM(CASE WHEN p.platform_name = 'PS4' THEN 1 ELSE 0 END) * 100 / COUNT(gp.game_id)) AS percentage FROM     game_platform gp JOIN     platform p ON gp.platform_id = p.id WHERE     gp.release_year = 2014;
SELECT SUM(rs.num_sales) FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id WHERE rs.region_id = 4;
SELECT gs.game_platform_id FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id WHERE rs.region_id = 1;
SELECT     (SELECT SUM(rs.num_sales) FROM region_sales rs WHERE rs.region_id = 2) -     (SELECT SUM(rs.num_sales) FROM region_sales rs WHERE rs.region_id = 3) AS difference;
SELECT platform_id FROM game_platform WHERE release_year = 2007;
SELECT gp.publisher_id FROM game_platform gp WHERE gp.platform_id = 16;
SELECT COUNT(DISTINCT gp.publisher_id) FROM game_platform gp WHERE gp.release_year = 1984;
SELECT gp.platform_id FROM game_platform gp JOIN region_sales rs ON gp.id = rs.game_platform_id WHERE rs.region_id = 3;
SELECT SUM(rs.num_sales) FROM region_sales rs JOIN region r ON rs.region_id = r.id JOIN game_platform gp ON rs.game_platform_id = gp.id WHERE r.region_name = 'Japan';
SELECT COUNT(DISTINCT gp.publisher_id) FROM game_platform gp JOIN platform p ON gp.platform_id = p.id WHERE p.platform_name = 'X360';
SELECT DISTINCT p.platform_name FROM platform p JOIN game_platform gp ON p.id = gp.platform_id WHERE gp.release_year = 2000;
SELECT     ABS(         (SELECT COUNT(DISTINCT gp.publisher_id)          FROM game_platform AS gp          JOIN platform AS p ON gp.platform_id = p.id          WHERE p.platform_name = 'PS3') -         (SELECT COUNT(DISTINCT gp.publisher_id)          FROM game_platform AS gp          JOIN platform AS p ON gp.platform_id = p.id          WHERE p.platform_name = 'X360')     ) AS difference;
SELECT gp.game_id FROM game_publisher gp JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name = 'Bethesda Softworks';
SELECT COUNT(gp.game_id) FROM game_publisher gp JOIN publisher p ON gp.publisher_id = p.id WHERE p.publisher_name IN ('Capcom', 'Sony Computer Entertainment');
SELECT g.genre_name FROM genre g JOIN game gm ON g.id = gm.genre_id WHERE gm.game_name = 'Grand Theft Auto V';
SELECT game.game_name FROM game JOIN genre ON game.genre_id = genre.id WHERE genre.genre_name = 'Racing';
SELECT COUNT(*) FROM game WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'Fighting');
SELECT DISTINCT g.genre_name FROM genre g JOIN game ga ON g.id = ga.genre_id JOIN game_publisher gp ON ga.id = gp.game_id WHERE gp.publisher_id = 464;
SELECT p.platform_name FROM platform p JOIN game_platform gp ON p.id = gp.platform_id JOIN game g ON gp.game_publisher_id = g.id WHERE g.game_name = 'Final Fantasy XIII-2';
SELECT SUM(rs.num_sales) FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id WHERE gp.release_year = 2000;
SELECT     (SELECT SUM(rs.num_sales) FROM region_sales rs     JOIN game_platform gp ON rs.game_platform_id = gp.id     WHERE gp.release_year = 2000) -     (SELECT SUM(rs.num_sales) FROM region_sales rs     JOIN game_platform gp ON rs.game_platform_id = gp.id     WHERE gp.release_year = 1990) AS difference;
SELECT platform_id FROM game_platform WHERE release_year = 2006;
SELECT AVG(num_sales * 100000) FROM region_sales WHERE region_id = 3;
SELECT release_year FROM game_platform WHERE id = 19 AND game_publisher_id = 6657;
SELECT SUM(num_sales) * 100000 AS total_sales FROM region_sales WHERE game_platform_id = 66;
SELECT game_name FROM game WHERE id = 44;
SELECT g.game_name FROM game g JOIN game_platform gp ON g.id = gp.game_id JOIN platform p ON gp.platform_id = p.id WHERE p.platform_name = 'Wii';
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gp2 ON gp.id = gp2.game_publisher_id WHERE gp2.release_year = 2015;
SELECT COUNT(*) FROM game JOIN game_publisher ON game.id = game_publisher.game_id JOIN game_platform ON game_publisher.id = game_platform.game_publisher_id JOIN genre ON game.genre_id = genre.id WHERE genre.genre_name = 'Adventure' AND game_platform.release_year = 2005;
SELECT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game g ON gp.game_id = g.id WHERE g.game_name = 'Adventure Time: Explore the Dungeon Because I Don''t Know!';
SELECT gp.id AS game_platform_id, r.region_name FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN region r ON rs.region_id = r.id WHERE rs.num_sales <= 0.2;
SELECT g.game_name FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN publisher p ON gp.publisher_id = p.id JOIN game_platform gp2 ON gp.id = gp2.game_publisher_id WHERE p.publisher_name = '505 Games' AND gp2.release_year = 2006;
SELECT genre.genre_name FROM genre JOIN game ON genre.id = game.genre_id WHERE game.id = 119;
SELECT game_id FROM game_publisher WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Abylight');
SELECT r.region_name FROM region r JOIN region_sales rs ON r.id = rs.region_id GROUP BY r.region_name ORDER BY MIN(rs.num_sales) ASC LIMIT 1;
SELECT g.game_name FROM game g JOIN genre ge ON g.genre_id = ge.id WHERE ge.genre_name = 'Strategy';
SELECT platform.platform_name FROM platform JOIN game_platform ON platform.id = game_platform.platform_id WHERE game_platform.game_id = 178;
SELECT g.genre_name FROM genre g JOIN game gm ON g.id = gm.genre_id WHERE gm.game_name IN ('Airlock', 'Airline Tycoon', 'Airblade');
SELECT SUM(rs.num_sales * 100000) AS total_sales FROM region_sales rs JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'North America';
SELECT DISTINCT p.publisher_name FROM publisher p JOIN game_publisher gp ON p.id = gp.publisher_id JOIN game_platform gp2 ON gp.id = gp2.game_publisher_id JOIN region_sales rs ON gp2.id = rs.game_platform_id WHERE rs.num_sales < 0.1 LIMIT 5;
SELECT gp.platform_id FROM game_platform gp JOIN game g ON gp.game_publisher_id = (SELECT id FROM game_publisher WHERE game_id = (SELECT id FROM game WHERE game_name = 'Airborne Troops: Countdown to D-Day')) LIMIT 1;
SELECT COUNT(*) FROM game_platform JOIN platform ON game_platform.platform_id = platform.id WHERE platform.platform_name = 'PSP' AND game_platform.release_year = 2004;
SELECT T2.genre_name FROM game AS T1 JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '999: Nine Hours, Nine Persons, Nine Doors'
SELECT gp.release_year FROM game_platform gp JOIN game_publisher gpublisher ON gp.game_publisher_id = gpublisher.id WHERE gpublisher.game_id = 156;
SELECT     ABS(SUM(case when p.platform_name = 'SNES' then 1 else 0 end) -     SUM(case when p.platform_name = 'DS' then 1 else 0 end)) as difference FROM     game_platform gp JOIN     platform p on gp.platform_id = p.id JOIN     game_publisher gp2 on gp.game_publisher_id = gp2.id JOIN     publisher pu on gp2.publisher_id = pu.id WHERE     pu.publisher_name = 'Culture Brain';
SELECT     (COUNT(CASE WHEN gp.release_year = 2007 THEN gp.id END) * 100.0 / COUNT(gp.id)) AS percentage FROM     game_platform gp JOIN     platform p ON gp.platform_id = p.id WHERE     p.platform_name = 'Wii';
SELECT DISTINCT gp.platform_id FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id JOIN region r ON rs.region_id = r.id WHERE r.region_name = 'Europe' AND       rs.num_sales < (SELECT AVG(num_sales) * 0.3 FROM region_sales WHERE region_id = (SELECT id FROM region WHERE region_name = 'Europe'))
SELECT COUNT(*) FROM Author WHERE Affiliation = 'University of California Berkeley';
SELECT p.Keyword FROM Paper p WHERE p.Title = 'Stitching videos streamed by mobile phones in real-time';
SELECT p.Title FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE j.FullName = 'Concepts in Magnetic Resonance Part A' AND p.Year = 2008;
SELECT COUNT(*) FROM Paper WHERE JournalId = (SELECT Id FROM Journal WHERE FullName = 'Concepts in Magnetic Resonance Part A');
SELECT J.HomePage FROM Journal AS J JOIN Paper AS P ON J.Id = P.JournalId WHERE P.Title = 'Area Effects in Cepaea';
SELECT COUNT(*) FROM Paper JOIN Journal ON Paper.JournalId = Journal.Id WHERE Journal.FullName = 'Molecular Brain' AND Paper.Year = 2011;
SELECT COUNT(*) FROM Paper JOIN Journal ON Paper.JournalId = Journal.Id WHERE Paper.Year = 2011 AND Journal.ShortName = 'Mol Brain';
SELECT COUNT(*) FROM PaperAuthor WHERE PaperId = (SELECT Id FROM Paper WHERE Title = 'Equation Solving in Geometrical Theories');
SELECT T3.Name FROM Paper AS T1 JOIN PaperAuthor AS T3 ON T1.Id = T3.PaperId WHERE T1.Title = 'Area Effects in Cepaea'
SELECT COUNT(*) FROM Paper JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId JOIN Author ON PaperAuthor.AuthorId = Author.Id WHERE Paper.Title = 'Stitching videos streamed by mobile phones in real-time' AND Author.Affiliation = 'Cairo Microsoft Innovation Lab';
SELECT p.Title FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name = 'Klaus Zimmermann';
SELECT A.Name FROM Author A JOIN PaperAuthor PA ON A.Id = PA.AuthorId JOIN Paper P ON PA.PaperId = P.Id WHERE P.Title = 'Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web' AND A.Affiliation = 'National Taiwan University Department of Computer Science and Information Engineering Taiwan';
SELECT p.Title FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Year = 1995 AND pa.Name = 'Thomas Wiegand';
SELECT COUNT(*) FROM Paper JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId WHERE Paper.Year = 1995 AND PaperAuthor.Name = 'Thomas Wiegand';
Error: 第 3523 个样本有 2 个SQL。
SELECT ((SELECT COUNT(p.Id) FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE j.FullName = 'Cases Journal') - (SELECT COUNT(p.Id) FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE j.FullName = 'Molecular Brain')) / (SELECT COUNT(p.Id) FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE j.FullName = 'Molecular Brain') * 100 AS PercentageMorePapers
SELECT COUNT(*) FROM Journal WHERE FullName LIKE '%computing%';
SELECT p.Id AS PaperID, pa.AuthorId FROM PaperAuthor pa JOIN Paper p ON pa.PaperId = p.Id WHERE pa.Affiliation = 'Cairo Microsoft Innovation Lab';
SELECT ShortName, FullName FROM Conference WHERE HomePage = 'http://www.informatik.uni-trier.de/~ley/db/conf/ices/index.html';
SELECT Id FROM Author WHERE Name = 'Peter';
SELECT P.Title, C.ShortName FROM Paper P JOIN Conference C ON P.ConferenceId = C.Id WHERE P.ConferenceId BETWEEN 160 AND 170;
SELECT P.Title, J.HomePage FROM Paper P JOIN Journal J ON P.JournalId = J.Id WHERE P.Year = (SELECT MAX(Year) FROM Paper);
SELECT P.Title, C.ShortName FROM Paper P JOIN PaperAuthor PA ON P.Id = PA.PaperId JOIN Conference C ON P.ConferenceId = C.Id WHERE P.Year = 1999 AND PA.Name LIKE 'Philip%';
SELECT COUNT(Paper.Id), Conference.HomePage FROM Paper JOIN Conference ON Paper.ConferenceId = Conference.Id WHERE Paper.ConferenceId = 187 AND Paper.Year BETWEEN 1990 AND 2000;
SELECT p.Title FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Year = 2003 AND pa.Affiliation = 'Department of Network Science, Graduate School of Information Systems, The University of Electro-Communications';
SELECT DISTINCT A.Name, J.ShortName FROM Author A JOIN PaperAuthor PA ON A.Id = PA.AuthorId JOIN Paper P ON PA.PaperId = P.Id JOIN Journal J ON P.JournalId = J.Id WHERE P.Title LIKE '%chemiluminescence%' AND P.JournalId BETWEEN 245 AND 250;
SELECT DISTINCT A.Name FROM Author A JOIN PaperAuthor PA ON A.Id = PA.AuthorId JOIN Paper P ON PA.PaperId = P.Id WHERE P.ConferenceId = 0 AND P.JournalId < 100;
SELECT T1.Title, T2.AuthorId FROM Paper AS T1 JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.ConferenceId < 100 AND T1.Year = 2006;
SELECT p.Id FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id WHERE c.HomePage LIKE 'http://www.informatik.uni-trier.de/~ley/db/conf/%';
SELECT J.HomePage, A.Id FROM Journal J JOIN Paper P ON J.Id = P.JournalId JOIN PaperAuthor PA ON P.Id = PA.PaperId JOIN Author A ON PA.AuthorId = A.Id WHERE P.Year BETWEEN 2000 AND 2005 AND P.Title LIKE '%SOCIAL%';
SELECT Author.Id, Author.Affiliation FROM Author JOIN PaperAuthor ON Author.Id = PaperAuthor.AuthorId JOIN Paper ON PaperAuthor.PaperId = Paper.Id WHERE Paper.JournalId = 0 AND Paper.Year = 2009;
SELECT     (COUNT(CASE WHEN P.ConferenceId = 0 THEN P.Id END) * 100.0 / COUNT(P.Id)) AS Percentage FROM     Paper P JOIN     Journal J ON P.JournalId = J.Id WHERE     P.JournalId BETWEEN 200 AND 300 AND J.ShortName LIKE 'A%'
SELECT     (COUNT(CASE WHEN P.Year = 2001 THEN P.Id END) * 100.0 / COUNT(P.Id)) AS PublicationRate2001 FROM     Paper P WHERE     P.Year BETWEEN 2001 AND 2010;
SELECT FullName, HomePage FROM Conference WHERE ShortName = 'ICWE';
SELECT Affiliation, COUNT(Id) as AuthorCount FROM Author WHERE Affiliation IN ('Standford University', 'Massachusetts Institute of Technology') GROUP BY Affiliation ORDER BY AuthorCount DESC LIMIT 1;
SELECT     CAST(SUM(CASE WHEN Affiliation IS NOT NULL THEN 1 ELSE 0 END) AS FLOAT) /     SUM(CASE WHEN Affiliation IS NULL THEN 1 ELSE 0 END) AS Ratio FROM     authors.Author;
SELECT Id, Name FROM Author WHERE Affiliation = 'University of Oulu';
SELECT P.Title, PA.Affiliation FROM Paper AS P JOIN PaperAuthor AS PA ON P.Id = PA.PaperId WHERE PA.Name = 'Roger J. Marshall' AND P.ConferenceId = 0 AND P.JournalId = 0;
SELECT P.Id, P.Title, P.Year, J.FullName FROM Paper P JOIN Journal J ON P.JournalId = J.Id JOIN PaperAuthor PA ON P.Id = PA.PaperId WHERE (P.Id, COUNT(PA.AuthorId)) IN (SELECT PaperId, MAX(AuthorCount) FROM (  SELECT PaperId, COUNT(*) as AuthorCount  FROM PaperAuthor  GROUP BY PaperId ) AS SubQuery) GROUP BY P.Id, P.Title, P.Year, J.FullName;
SELECT P.Title, P.Year, C.ShortName, GROUP_CONCAT(DISTINCT PA.Name) as AuthorNames FROM Paper P JOIN Conference C ON P.ConferenceId = C.Id JOIN PaperAuthor PA ON P.Id = PA.PaperId WHERE P.Id = 15 GROUP BY P.Id;
SELECT p.Id AS PaperID, p.Year, p.Keyword FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Author a ON pa.AuthorId = a.Id WHERE a.Id < 1000 AND a.Affiliation = 'Zurich, ETH';
SELECT A.Name, A.Id FROM Author A JOIN PaperAuthor PA ON A.Id = PA.AuthorId JOIN Paper P ON PA.PaperId = P.Id WHERE P.Title = 'Inspection resistant memory: Architectural support for security from physical examination' AND A.Affiliation = 'Microsoft Research, USA';
SELECT     A.Name AS AuthorName,     A.Affiliation AS AuthorAffiliation,     J.ShortName AS JournalShortName,     J.FullName AS JournalFullName FROM     Paper P JOIN     PaperAuthor PA ON P.Id = PA.PaperId JOIN     Author A ON PA.AuthorId = A.Id JOIN     Journal J ON P.JournalId = J.Id WHERE     P.Title = 'Decreased Saliva Secretion and Down-Regulation of AQP5 in Submandibular Gland in Irradiated Rats';
SELECT T3.Title, T3.JournalId FROM Conference AS T1 JOIN Paper AS T3 ON T1.Id = T3.ConferenceId WHERE T1.FullName = 'International Symposium of Robotics Research';
SELECT p.Title, p.Year, p.Keyword FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.AuthorId = 661002 AND pa.Affiliation = 'Scientific Computing and Imaging Institute, University of Utah, UT 84112, USA';
SELECT     ABS((SELECT COUNT(*) FROM Paper          JOIN Journal ON Paper.JournalId = Journal.Id          WHERE Journal.ShortName = 'IWC' AND Paper.Year = 2000) -         (SELECT COUNT(*) FROM Paper          JOIN Journal ON Paper.JournalId = Journal.Id          WHERE Journal.ShortName = 'IWC' AND Paper.Year = 2010)) AS Difference;
SELECT J.Id, J.ShortName, J.FullName FROM Journal AS J JOIN Paper AS P ON J.Id = P.JournalId WHERE J.Id != 0 AND J.Id != -1 AND P.Year = 2013 LIMIT 4;
WITH Papers_1971_1980 AS (     SELECT COUNT(Paper.Id) AS PaperCount_1971_1980     FROM Paper     JOIN Conference ON Paper.ConferenceId = Conference.Id     WHERE Conference.ShortName = 'MICRO'     AND Paper.Year BETWEEN 1971 AND 1980 ), Papers_1991_2000 AS (     SELECT COUNT(Paper.Id) AS PaperCount_1991_2000     FROM Paper     JOIN Conference ON Paper.ConferenceId = Conference.Id     WHERE Conference.ShortName = 'MICRO'     AND Paper.Year BETWEEN 1991 AND 2000 ) SELECT     (Papers_1991_2000.PaperCount_1991_2000 - Papers_1971_1980.PaperCount_1971_1980) / 10 AS AverageNeededPapers,     Paper.Title,     Author.Name FROM Papers_1971_1980 CROSS JOIN Papers_1991_2000 JOIN Paper ON Paper.Year BETWEEN 1971 AND 1980 JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId JOIN Author ON PaperAuthor.AuthorId = Author.Id WHERE Paper.ConferenceId IN (     SELECT Id FROM Conference WHERE ShortName = 'MICRO' );
SELECT COUNT(*) FROM Paper WHERE Year = 0;
SELECT C.FullName FROM Conference AS C JOIN Paper AS P ON C.Id = P.ConferenceId WHERE P.Title = 'The Dissimilarity Representation as a Tool for Three-Way Data Classification: A 2D Measure';
SELECT T2.HomePage FROM Paper AS T1 JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Energy-efficiency bounds for noise-tolerant dynamic circuits'
SELECT DISTINCT A.Name FROM Author A, PaperAuthor PA, Paper P WHERE PA.AuthorId = A.Id AND PA.PaperId = P.Id AND P.Id BETWEEN 101 AND 105;
SELECT DISTINCT Conference.ShortName FROM Paper JOIN Conference ON Paper.ConferenceId = Conference.Id WHERE Paper.Year = 2009 LIMIT 10;
SELECT J.HomePage FROM Journal AS J JOIN Paper AS P ON J.Id = P.JournalId WHERE P.Title = '364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results';
SELECT p.Title FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id WHERE c.FullName = 'International Conference on Internet Computing';
SELECT DISTINCT A.Name FROM Author A, Paper P, PaperAuthor PA WHERE P.Year = '2005' AND P.Keyword = 'LOAD; IDE; SNP; haplotype; association studies' AND P.Id = PA.PaperId AND PA.AuthorId = A.Id;
SELECT COUNT(DISTINCT pa.AuthorId) FROM PaperAuthor pa JOIN Paper p ON pa.PaperId = p.Id WHERE p.Title LIKE '%145 GROWTH HORMONE RECEPTORS AND THE ONSET OF HYPERINSULINEMIA IN THE OBESE ZUCKER RAT:%';
SELECT DISTINCT pa2.Name, p.Title FROM PaperAuthor pa1 JOIN PaperAuthor pa2 ON pa1.PaperId = pa2.PaperId JOIN Paper p ON pa1.PaperId = p.Id WHERE pa1.Name = 'Jei Keon Chae' AND pa1.AuthorId <> pa2.AuthorId;
SELECT     c.FullName AS ConferenceName,     j.FullName AS JournalName,     p.Title AS PaperTitle,     pa.Name AS CoAuthorName FROM     Paper p JOIN     PaperAuthor pa ON p.Id = pa.PaperId JOIN     Conference c ON p.ConferenceId = c.Id JOIN     Journal j ON p.JournalId = j.Id WHERE     pa.Name = 'Shueh-Lin Yau' OR     pa.Name IN (         SELECT             pa2.Name         FROM             PaperAuthor pa2         WHERE             pa2.PaperId = p.Id         AND             pa2.Name != 'Shueh-Lin Yau'     );
SELECT COUNT(Paper.Id) FROM Paper WHERE Paper.Year BETWEEN 1990 AND 2000 AND Paper.ConferenceId IS NULL AND Paper.JournalId IS NULL;
SELECT Name FROM Author WHERE Affiliation = 'Birkbeck University of London';
SELECT ShortName FROM Conference WHERE FullName LIKE 'International Symposium%';
SELECT COUNT(*) FROM Journal WHERE HomePage = ''
SELECT DISTINCT A.Name FROM Author A JOIN PaperAuthor PA ON A.Id = PA.AuthorId JOIN Paper P ON PA.PaperId = P.Id WHERE P.Year = 0;
SELECT DISTINCT A.Affiliation FROM Author A JOIN PaperAuthor PA ON A.Id = PA.AuthorId JOIN Paper P ON PA.PaperId = P.Id WHERE P.Keyword = 'Quantum Physics';
SELECT p.Id, p.Title, c.FullName AS ConferenceName FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id WHERE p.JournalId = 0 AND p.ConferenceId != 0 AND p.Year != 0;
SELECT DISTINCT p.Title FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id WHERE c.HomePage IS NULL OR c.HomePage = ''
SELECT DISTINCT p.Year, j.FullName FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE j.ShortName IS NULL OR j.ShortName = '' ORDER BY p.Year;
SELECT DISTINCT A.Affiliation FROM Author A JOIN PaperAuthor PA ON A.Id = PA.AuthorId JOIN Paper P ON PA.PaperId = P.Id JOIN Journal J ON P.JournalId = J.Id WHERE P.Title = 'A combined search for the standard model Higgs boson at s = 1.96 Â TeV';
SELECT J.FullName FROM Journal AS J JOIN Paper AS P ON J.Id = P.JournalId WHERE P.Year = 2001;
SELECT DISTINCT pa2.Name FROM PaperAuthor pa1 JOIN Paper p ON p.Id = pa1.PaperId JOIN PaperAuthor pa2 ON pa2.PaperId = p.Id WHERE p.Title = 'Particle identification using the time-over-threshold method in the ATLAS Transition Radiation Tracker' AND pa1.AuthorId <> pa2.AuthorId
SELECT COUNT(p.Id), p.Year FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id WHERE c.FullName = 'International Conference on Database Theory' AND p.Year != 0 GROUP BY p.Year;
SELECT J.FullName FROM Journal AS J JOIN Paper AS P ON J.Id = P.JournalId WHERE P.Keyword = 'Sustainability';
SELECT DISTINCT A.Name FROM Author A JOIN PaperAuthor PA ON A.Id = PA.AuthorId JOIN Paper P ON PA.PaperId = P.Id JOIN Conference C ON P.ConferenceId = C.Id WHERE C.FullName LIKE '%Workshop%';
SELECT     (COUNT(CASE WHEN pa.Affiliation LIKE '%INFN%' THEN pa.AuthorId ELSE NULL END) * 100.0 / COUNT(pa.AuthorId)) AS Percentage FROM     Paper p JOIN     PaperAuthor pa ON p.Id = pa.PaperId WHERE     p.Title LIKE '%Charged particle multiplicity%';
SELECT (COUNT(J.ShortName) * 100 / (SELECT COUNT(*) FROM Paper WHERE Year = 1989)) AS Percentage FROM Journal J, Paper P WHERE J.Id = P.JournalId AND J.ShortName LIKE 'ANN%' AND P.Year = 1989;
SELECT COUNT(*) FROM PaperAuthor WHERE PaperId = 1 AND Affiliation LIKE '%Microsoft Research%';
SELECT Keyword, Year FROM Paper WHERE Title = 'A Formal Approach to Service Component Architecture';
SELECT (COUNT(CASE WHEN p.ConferenceId = 0 AND p.JournalId = 0 AND p.Year > 2000 THEN p.Id END) * 100.0 / COUNT(p.Id)) AS PercentagePreprinted FROM Paper p;
SELECT T3.Name FROM Paper AS T1 JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId JOIN Author AS T3 ON T2.AuthorId = T3.Id WHERE T1.Title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers'
SELECT J.FullName FROM Journal AS J JOIN Paper AS P ON J.Id = P.JournalId WHERE P.Title = 'Multiple paternity in a natural population of a salamander with long-term sperm storage';
SELECT COUNT(JournalId) FROM Paper JOIN Journal ON Paper.JournalId = Journal.Id WHERE Journal.FullName = 'Iet Software/iee Proceedings - Software';
SELECT C.FullName FROM Conference AS C JOIN Paper AS P ON C.Id = P.ConferenceId WHERE P.Id = 5;
SELECT p.Title FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name LIKE '%Jun du%' LIMIT 2;
SELECT p.Title FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name = 'Cheng Huang' AND pa.Affiliation LIKE 'Microsoft %';
SELECT C.FullName FROM Conference AS C JOIN Paper AS P ON C.Id = P.ConferenceId JOIN PaperAuthor AS PA ON P.Id = PA.PaperId WHERE PA.Name = 'Jean-luc Hainaut' LIMIT 1;
SELECT DISTINCT J.FullName FROM Journal J JOIN Paper P ON J.Id = P.JournalId JOIN PaperAuthor PA ON P.Id = PA.PaperId WHERE PA.Name = 'Andrew Cain' LIMIT 3;
SELECT DISTINCT Author.Affiliation FROM Author JOIN PaperAuthor ON Author.Id = PaperAuthor.AuthorId JOIN Paper ON PaperAuthor.PaperId = Paper.Id WHERE Paper.Title = 'FIBER: A Generalized Framework for Auto-tuning Software';
SELECT p.Title, j.FullName FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE p.Year = 0 LIMIT 2;
SELECT J.ShortName, J.FullName FROM Journal J JOIN Paper P ON J.Id = P.JournalId WHERE P.Keyword = 'Materials';
SELECT Name FROM Author WHERE Affiliation = 'University of Oxford' ORDER BY Name ASC;
SELECT ShortName, HomePage FROM Conference WHERE FullName LIKE 'International Conference on Artificial Intelligence%';
SELECT p.Title FROM Paper p WHERE p.Year = 1996;
SELECT Paper.Title, Author.Name FROM Paper JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId JOIN Author ON PaperAuthor.AuthorId = Author.Id JOIN Journal ON Paper.JournalId = Journal.Id WHERE Paper.Year = 2007 AND Journal.FullName = 'Neoplasia';
SELECT Author.Name, Paper.Title FROM Author JOIN PaperAuthor ON Author.Id = PaperAuthor.AuthorId JOIN Paper ON PaperAuthor.PaperId = Paper.Id WHERE Author.Affiliation = 'Soongsil University' AND Paper.Year = 2000;
SELECT DISTINCT Paper.Title, Author.Name FROM Paper JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId JOIN Author ON Author.Id = PaperAuthor.AuthorId WHERE Paper.Year BETWEEN 2000 AND 2005 AND Paper.Keyword LIKE '%optical properties%';
SELECT AVG(paper_count) AS average_papers FROM (     SELECT COUNT(p.Id) AS paper_count     FROM Paper p     JOIN Conference c ON p.ConferenceId = c.Id     WHERE c.FullName = 'World Computer Congress'     GROUP BY p.Year ) AS yearly_counts;
SELECT P.Title, A.Name FROM Paper P JOIN PaperAuthor PA ON P.Id = PA.PaperId JOIN Author A ON PA.AuthorId = A.Id WHERE P.Year = 1997 AND P.ConferenceId = 0 AND P.JournalId = 0;
SELECT DISTINCT Paper.Title, Journal.FullName FROM Paper JOIN PaperAuthor ON Paper.Id = PaperAuthor.PaperId JOIN Journal ON Paper.JournalId = Journal.Id WHERE PaperAuthor.Name = 'Adam Jones' AND Paper.Year BETWEEN 2005 AND 2010;
SELECT COUNT(*) FROM Author WHERE Affiliation = 'Otterbein University';
SELECT COUNT(DISTINCT pa.AuthorId) FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Title = 'Subcellular localization of nuclease in barley aleurone';
SELECT C.FullName FROM Conference AS C JOIN Paper AS P ON C.Id = P.ConferenceId WHERE P.Title = 'Extended Fuzzy Regression Models';
SELECT COUNT(*) FROM Paper JOIN Conference ON Paper.ConferenceId = Conference.Id WHERE Conference.FullName = 'Mathematics of Program Construction';
SELECT pa.Name FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Title = 'Open Sourcing Social Solutions (Building Communities of Change)'
SELECT p.Title FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name = 'Jianli Hua';
SELECT pa.Name FROM PaperAuthor pa JOIN Paper p ON pa.PaperId = p.Id WHERE p.Title = 'Testing timed automata';
SELECT COUNT(Paper.Id) FROM Paper JOIN Conference ON Paper.ConferenceId = Conference.Id WHERE Conference.ShortName = 'SSPR' AND Paper.Year = 2000;
SELECT p.Title FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE j.FullName = 'Theoretical Computer Science' AND p.Year = 2003;
SELECT C.HomePage FROM Conference AS C JOIN Paper AS P ON C.Id = P.ConferenceId WHERE P.Title = 'Quality evaluation of long duration audiovisual content';
SELECT pa.Name FROM PaperAuthor pa JOIN Paper p ON pa.PaperId = p.Id JOIN Author a ON pa.AuthorId = a.Id WHERE p.Title = 'A Randomized Comparison of Sirolimus- Versus Paclitaxel-Eluting Stent Implantation in Patients With Diabetes Mellitus' AND a.Affiliation = 'Asan Medical Center, University of Ulsan College of Medicine, Seoul, Korea';
SELECT COUNT(Paper.Id) FROM Paper JOIN Journal ON Paper.JournalId = Journal.Id WHERE Journal.FullName = 'Software - Practice and Experience';
SELECT p.Title FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id WHERE c.HomePage = 'http://www.irma-international.org/';
SELECT COUNT(Paper.Id) / 9 AS AveragePapers FROM Paper JOIN Conference ON Paper.ConferenceId = Conference.Id WHERE Conference.FullName = 'Information and Knowledge Engineering' AND Paper.Year BETWEEN 2002 AND 2010;
SELECT     (SELECT COUNT(p.Id)      FROM Paper p      JOIN Conference c ON p.ConferenceId = c.Id      WHERE c.FullName = 'International Conference on Supercomputing' AND p.Year BETWEEN 1991 AND 2000     ) -     (SELECT COUNT(p.Id)      FROM Paper p      JOIN Conference c ON p.ConferenceId = c.Id      WHERE c.FullName = 'Informatik & Schule' AND p.Year BETWEEN 1991 AND 2000     ) AS Difference;
SELECT ShortName FROM Journal WHERE FullName = 'Software - Concepts and Tools / Structured Programming';
SELECT J.FullName FROM Journal AS J JOIN Paper AS P ON J.Id = P.JournalId WHERE P.Title = 'Education, democracy and growth';
SELECT COUNT(Paper.Id) FROM Paper JOIN Journal ON Paper.JournalId = Journal.Id WHERE Journal.FullName = 'IEEE Transactions on Nuclear Science' AND Paper.Year = 1999;
SELECT p.Title FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE j.FullName = 'IEEE Transactions on Pattern Analysis and Machine Intelligence' AND p.Year = 2011;
SELECT T1.Keyword FROM Paper AS T1 JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T2.FullName = 'Modeling Identification and Control' AND T1.Year = 1994;
SELECT (p.Year = 0) AS IsPreprint FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name = 'Zvezdan Protić'
SELECT Conference.FullName FROM Conference JOIN Paper ON Conference.Id = Paper.ConferenceId WHERE Paper.Title = 'Skew-Circulant Preconditioners for Systems of LMF-Based ODE Codes'
SELECT COUNT(Paper.Id) FROM Paper JOIN Conference ON Paper.ConferenceId = Conference.Id WHERE Conference.FullName = 'International Symposium on Software Testing and Analysis';
SELECT C.HomePage FROM Conference AS C JOIN Paper AS P ON C.Id = P.ConferenceId WHERE P.Title = 'Increasing the Concurrency in Estelle';
SELECT COUNT(DISTINCT pa.AuthorId) FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE p.Title = 'An Improved Active Suspension Model for Attitude Control of Electric Vehicles';
SELECT C.ShortName, COUNT(P.Id) AS PaperCount FROM Conference C JOIN Paper P ON C.Id = P.ConferenceId WHERE YEAR = 2012 GROUP BY C.Id ORDER BY PaperCount DESC LIMIT 1;
SELECT COUNT(*) FROM Paper JOIN Conference ON Paper.ConferenceId = Conference.Id WHERE Conference.ShortName = 'ECSQARU' AND Paper.Year = 2003;
SELECT p.Keyword FROM Paper p JOIN Conference c ON p.ConferenceId = c.Id WHERE c.FullName = 'International Radar Symposium' AND p.Year = 2012;
SELECT     (SELECT COUNT(p1.Id) FROM Paper p1     INNER JOIN Conference c1 ON p1.ConferenceId = c1.Id     WHERE c1.FullName = 'International Conference on Thermoelectrics') -     (SELECT COUNT(p2.Id) FROM Paper p2     INNER JOIN Conference c2 ON p2.ConferenceId = c2.Id     WHERE c2.FullName = 'International Conference on Wireless Networks, Communications and Mobile Computing') AS Difference;
SELECT     (COUNT(CASE WHEN P.Year = 0 THEN P.Id END) * 100.0 / COUNT(P.Id)) AS PreprintPercentage FROM     Paper P JOIN     PaperAuthor PA ON P.Id = PA.PaperId WHERE     PA.Name = 'John Van Reenen';
SELECT Title FROM Paper WHERE Year = (SELECT MIN(Year) FROM Paper);
SELECT FullName FROM Conference ORDER BY LENGTH(FullName) DESC LIMIT 1;
SELECT COUNT(*) FROM Author WHERE Affiliation = 'NASA Langley Research Center';
SELECT COUNT(*) FROM Journal WHERE ShortName IS NULL;
SELECT COUNT(*) FROM Paper WHERE Year = 0;
SELECT p.Title FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId GROUP BY p.Id, p.Title ORDER BY COUNT(pa.AuthorId) DESC LIMIT 1;
SELECT p.Title FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE j.ShortName = 'TUBERCLE LUNG DIS' ORDER BY p.Year LIMIT 1;
SELECT p.Title FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name = 'Karin Rengefors';
SELECT COUNT(*) FROM Paper JOIN Conference ON Paper.ConferenceId = Conference.Id WHERE Conference.FullName = 'Virtual Reality, IEEE Annual International Symposium' AND Paper.Year = 2012;
SELECT J.ShortName FROM Journal J JOIN Paper P ON J.Id = P.JournalId WHERE P.Title = 'A Case of Unilateral Ashy Dermatosis';
Error: 第 3648 个样本有 2 个SQL。
SELECT T3.Name, T3.Affiliation FROM Paper AS T1 JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId JOIN Author AS T3 ON T2.AuthorId = T3.Id WHERE T1.Title = 'Determination of Planetary Meteorology from Aerobot Flight Sensors';
SELECT p.Title, j.FullName FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE p.Year BETWEEN 1960 AND 1969;
SELECT Year, COUNT(Year) as PaperCount FROM Paper JOIN Conference ON Paper.ConferenceId = Conference.Id WHERE Conference.FullName = 'Internet, Multimedia Systems and Applications' GROUP BY Year ORDER BY PaperCount DESC LIMIT 1;
SELECT DISTINCT pa.Name FROM PaperAuthor pa JOIN Author a ON pa.AuthorId = a.Id WHERE a.Name = 'Randall Davis';
SELECT DISTINCT Conference.FullName FROM Conference JOIN Paper ON Conference.Id = Paper.ConferenceId WHERE Paper.Year = 2008;
SELECT J.HomePage FROM Journal J JOIN Paper P ON J.Id = P.JournalId GROUP BY J.Id ORDER BY COUNT(P.Id) DESC LIMIT 1;
Error: 第 3655 个样本有 2 个SQL。
SELECT Name FROM Author WHERE Id = 1722;
SELECT COUNT(*) FROM Paper WHERE Year = 0;
SELECT Name FROM Author WHERE Affiliation = 'University of Illinois Chicago';
SELECT     (SELECT COUNT(*) FROM Paper WHERE Year = 2005) AS PapersIn2005,     (SELECT COUNT(*) FROM Paper WHERE Year = 2005) -     (SELECT COUNT(*) FROM Paper WHERE Year = 2004) AS Difference
SELECT p.Title FROM Paper p JOIN Journal j ON p.JournalId = j.Id WHERE j.FullName = 'Ibm Journal of Research and Development';
SELECT T3.Name, T3.Affiliation FROM Paper AS T1 JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId JOIN Author AS T3 ON T2.AuthorId = T3.Id WHERE T1.Title = 'Education, democracy and growth';
SELECT COUNT(DISTINCT pa.Name) FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId JOIN Journal j ON p.JournalId = j.Id WHERE j.FullName = 'IEEE Computer';
SELECT Conference.FullName FROM Paper JOIN Conference ON Paper.ConferenceId = Conference.Id WHERE Paper.Title = 'A context-based navigation paradigm for accessing Web data'
SELECT COUNT(Paper.Id) FROM Paper JOIN Conference ON Paper.ConferenceId = Conference.Id WHERE Conference.FullName = 'International Workshop on Inductive Logic Programming' AND Paper.Year BETWEEN 2001 AND 2009;
SELECT AVG(count_authors) AS average_authors_per_paper FROM (     SELECT COUNT(DISTINCT pa.AuthorId) as count_authors, p.Id as paper_id     FROM Paper p     JOIN PaperAuthor pa ON p.Id = pa.PaperId     WHERE p.Year BETWEEN 1990 AND 2000     GROUP BY p.Id ) subquery;
SELECT T1.Year, T2.FullName FROM Paper AS T1 JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = 'Area Effects in Cepaea';
SELECT A.Name FROM Author A JOIN PaperAuthor PA ON A.Id = PA.AuthorId JOIN Paper P ON PA.PaperId = P.Id WHERE P.Title = 'Real-Time Automata';
SELECT Name FROM Author WHERE Affiliation = 'ABB Electrical Machines';
SELECT COUNT(*) FROM Paper JOIN Journal ON Paper.JournalId = Journal.Id WHERE Journal.FullName = 'Academic Medicine' AND Paper.Year BETWEEN 2005 AND 2010;
SELECT p.Title FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name = 'Zuliang Du' ORDER BY p.Year DESC LIMIT 1;
SELECT COUNT(*) FROM Paper JOIN Conference ON Paper.ConferenceId = Conference.Id WHERE Conference.FullName = 'Adaptive Multimedia Retrieval' AND Paper.Year = 2007;
SELECT AVG(paper_count) AS average_papers FROM (     SELECT COUNT(p.Id) AS paper_count, p.Year     FROM Paper p     JOIN Journal j ON p.JournalId = j.Id     WHERE j.FullName = 'Information Sciences'     GROUP BY p.Year ) as yearly_counts;
SELECT COUNT(*) FROM PaperAuthor JOIN Paper ON PaperAuthor.PaperId = Paper.Id WHERE PaperAuthor.Name = 'Howard F. Lipson';
SELECT     (COUNT(CASE WHEN j.FullName = 'Physics of Fluids' THEN p.Id END) * 100.0 / COUNT(p.Id)) as percentage FROM     Paper p JOIN     Journal j ON p.JournalId = j.Id JOIN     PaperAuthor pa ON p.Id = pa.PaperId WHERE     p.Keyword = 'Turbulent Fluids';
SELECT COUNT(*) FROM Author WHERE Affiliation = 'Arizona State University';
SELECT FullName, HomePage FROM Conference WHERE ShortName = 'ICCI';
SELECT p.Title FROM Paper p JOIN PaperAuthor pa ON p.Id = pa.PaperId WHERE pa.Name = 'Joe Lograsso';
Error: 第 3678 个样本有 2 个SQL。
SELECT T3.Year, T3.Title FROM PaperAuthor AS T1 JOIN Author AS T2 ON T1.AuthorId = T2.Id JOIN Paper AS T3 ON T1.PaperId = T3.Id WHERE T2.Name = 'Barrasa';
SELECT T3.Name, T2.Year FROM Paper AS T1 JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId JOIN Author AS T3 ON T2.AuthorId = T3.Id WHERE T1.Id = 2;
SELECT Author.Name, Paper.Keyword FROM Author JOIN PaperAuthor ON Author.Id = PaperAuthor.AuthorId JOIN Paper ON PaperAuthor.PaperId = Paper.Id WHERE Paper.Id = 5;
SELECT C.FullName FROM Conference AS C JOIN Paper AS P ON C.Id = P.ConferenceId WHERE P.Title = '2004 YD5';
SELECT i.chronname FROM institution_details i JOIN institution_grads g ON i.unitid = g.unitid WHERE g.year = 2007 AND g.race = 'Ai' GROUP BY i.unitid, i.chronname ORDER BY COUNT(*) DESC LIMIT 1;
SELECT t1.chronname, t1.site FROM institution_details AS t1 JOIN institution_grads AS t2 ON t1.unitid = t2.unitid WHERE t2.year = 2011 AND t2.grad_cohort = 209;
SELECT SUM(t2.grad_cohort) FROM institution_details AS t1 JOIN institution_grads AS t2 ON t1.unitid = t2.unitid WHERE t2.gender = 'F' AND t2.year BETWEEN 2011 AND 2013 AND t1.chronname = 'Gateway Community College';
SELECT SUM(i.grad_cohort) FROM institution_grads i JOIN institution_details d ON i.unitid = d.unitid WHERE i.gender = 'M' AND i.year = 2012 AND d.state IN (     SELECT d.state     FROM institution_details d     WHERE d.aid_value = (         SELECT MAX(aid_value)         FROM institution_details     ) )
SELECT AVG(i.med_sat_value) FROM institution_details i JOIN (   SELECT unitid, COUNT(grad_cohort) as male_grad_count   FROM institution_grads   WHERE year = 2013 AND gender = 'M'   GROUP BY unitid   ORDER BY male_grad_count DESC   LIMIT 1 ) ig ON i.unitid = ig.unitid
Error: 第 3688 个样本有 2 个SQL。
SELECT i.chronname FROM institution_details i JOIN (     SELECT s.state,            MIN(g.grad_cohort) AS min_grad_cohort     FROM state_sector_grads g     JOIN state_sector_details s ON g.stateid = s.stateid     WHERE g.year = 2013 AND g.control = 'Public'     GROUP BY s.state ) AS subquery ON i.state = subquery.state WHERE i.control = 'Public' AND i.state IN (     SELECT s.state     FROM state_sector_grads g     JOIN state_sector_details s ON g.stateid = s.stateid     WHERE g.year = 2013 AND g.control = 'Public'     GROUP BY s.state     HAVING MIN(g.grad_cohort) = subquery.min_grad_cohort );
SELECT i.chronname, i.fte_value FROM institution_details i JOIN institution_grads g ON i.unitid = g.unitid WHERE g.year = 2013 AND g.race = 'X' AND g.gender = 'B' AND g.grad_cohort < 200;
SELECT SUM(t2.grad_cohort) FROM institution_details AS t1 JOIN institution_grads AS t2 ON t1.unitid = t2.unitid WHERE t1.chronname = 'Oakwood University' AND t2.year = 2013 AND t2.gender = 'F' AND t2.race = 'X'
SELECT COUNT(*) FROM institution_grads WHERE year = 2012 AND race = 'A' AND gender = 'F' AND cohort = '4y other' AND unitid IN (     SELECT unitid     FROM institution_details     WHERE chronname = 'University of Alaska at Anchorage' );
SELECT year, grad_cohort FROM institution_grads WHERE unitid = (     SELECT unitid     FROM institution_details     WHERE chronname = 'Auburn University' ) AND gender = 'B' AND race = 'X' AND cohort IN ('4y other', '4y bach') AND year IN (2011, 2012, 2013);
SELECT (SUM(CASE WHEN race = 'B' THEN grad_cohort ELSE 0 END) * 100.0 / SUM(grad_cohort)) AS black_student_percentage FROM institution_grads JOIN institution_details ON institution_grads.unitid = institution_details.unitid WHERE control = 'Private for-profit';
SELECT     (SUM(CASE WHEN race = 'A' THEN grad_100 ELSE 0 END) * 100.0 / SUM(grad_100)) AS asian_percentage FROM     institution_grads WHERE     unitid IN (         SELECT             unitid         FROM             institution_details         WHERE             state = 'Alabama'     ) AND year = 2013;
SELECT     (SUM(i.grad_cohort) FILTER (WHERE i.gender = 'M')) /     (SUM(i.grad_cohort) FILTER (WHERE i.gender = 'F')) AS ratio FROM     institution_grads i JOIN     institution_details d ON i.unitid = d.unitid WHERE     i.year = 2013 AND     i.race = 'A' AND     d.chronname = 'Harvard University';
SELECT chronname FROM institution_details WHERE (chronname = 'Amridge University' OR chronname = 'Auburn University') AND grad_100_value = (     SELECT MIN(grad_100_value)     FROM institution_details     WHERE chronname IN ('Amridge University', 'Auburn University') )
SELECT COUNT(*) FROM institution_details WHERE control = 'Private not-for-profit';
SELECT SUM(T2.grad_cohort) FROM institution_details AS T1 JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Amridge University' AND T2.race = 'H' AND T2.gender = 'M';
SELECT COUNT(*) FROM institution_grads WHERE unitid = (SELECT unitid FROM institution_details WHERE chronname = 'Lincoln College') AND year = 2011 AND cohort = '4y bach';
SELECT COUNT(*) FROM institution_grads WHERE unitid = (SELECT unitid FROM institution_details WHERE chronname = 'Central Alabama Community College') AND year = 2011 AND gender = 'M' AND race = 'H' AND grad_100 > 0;
SELECT SUM(grad_cohort) FROM institution_grads JOIN institution_details ON institution_grads.unitid = institution_details.unitid WHERE institution_details.chronname = 'Central Alabama Community College' AND institution_grads.year = 2011;
SELECT     CASE         WHEN (SUM(i.grad_150) FILTER (WHERE i.gender = 'F') / SUM(i.grad_cohort) FILTER (WHERE i.gender = 'F')) > (SUM(i.grad_150) FILTER (WHERE i.gender = 'M') / SUM(i.grad_cohort) FILTER (WHERE i.gender = 'M')) THEN 'Female White Students'         ELSE 'Male White Students'     END AS higher_percentage_cohort FROM     institution_grads i JOIN     institution_details d ON i.unitid = d.unitid WHERE     d.chronname = 'Central Alabama Community College'     AND i.year = 2011     AND i.race = 'W' GROUP BY     i.unitid;
SELECT T1.chronname FROM institution_details AS T1 JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' ORDER BY T2.grad_150_rate DESC LIMIT 1;
SELECT i.chronname FROM institution_details i JOIN institution_grads g ON i.unitid = g.unitid WHERE g.year = 2011 AND g.gender = 'M' AND g.race = 'w' AND g.grad_150 > 20;
SELECT SUM(T2.grad_cohort) FROM institution_details AS T1 JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2011 AND T2.cohort = '2y all' AND T1.state = 'Alabama' AND T2.gender = 'B';
SELECT (SELECT SUM(grad_cohort) FROM institution_grads WHERE chronname = 'Central Alabama Community College' AND year = 2012) - (SELECT SUM(grad_cohort) FROM institution_grads WHERE chronname = 'Central Alabama Community College' AND year = 2011)
SELECT COUNT(i.unitid) FROM institution_details i JOIN institution_grads g ON i.unitid = g.unitid WHERE i.state = 'Alabama' AND i.med_sat_percentile = 77 AND g.year = 2011 GROUP BY i.unitid HAVING SUM(g.grad_cohort) > 500;
SELECT COUNT(i.unitid) FROM institution_details i JOIN institution_grads g ON i.unitid = g.unitid WHERE i.control = 'Public' AND i.state = 'Alabama' AND g.year = 2011 AND g.grad_100 > 30;
SELECT i.chronname FROM institution_details i JOIN institution_grads g ON i.unitid = g.unitid WHERE i.state = 'Alabama' AND g.year = 2011 AND g.race = 'X' GROUP BY i.unitid, i.chronname HAVING SUM(g.grad_cohort) > 500;
SELECT AVG(grad_cohort) FROM (     SELECT grad_cohort     FROM institution_grads     JOIN institution_details ON institution_grads.unitid = institution_details.unitid     WHERE chronname = 'Central Alabama Community College' AND year BETWEEN 2011 AND 2013 ) as subquery
SELECT AVG(i.grad_100_rate) FROM institution_details i INNER JOIN institution_grads g ON i.unitid = g.unitid WHERE i.chronname = 'Central Alabama Community College';
SELECT site FROM institution_details WHERE chronname = 'Swarthmore College';
SELECT state FROM institution_details WHERE chronname = 'Mercer University';
SELECT city FROM institution_details WHERE chronname = 'Rensselaer Polytechnic Institute';
SELECT state_abbr FROM state_sector_grads WHERE state = 'Delaware';
SELECT COUNT(*) FROM institution_details WHERE state = 'California' AND level = '2-year' AND control = 'Public';
SELECT state_post FROM state_sector_details WHERE state = 'Idaho'
SELECT chronname FROM institution_details WHERE state = 'NJ' AND level = '4-year' ORDER BY student_count DESC LIMIT 1;
SELECT site FROM institution_details WHERE state = 'PA' ORDER BY lat_y DESC LIMIT 1;
SELECT COUNT(*) FROM institution_details WHERE state_abbr = 'UT' AND level = '4-year' AND control = 'Public' AND awards_per_value > awards_per_state_value;
SELECT COUNT(*) FROM institution_details JOIN state_sector_details ON institution_details.state = state_sector_details.state AND institution_details.level = state_sector_details.level AND institution_details.control = state_sector_details.control WHERE institution_details.level = '2-year' AND institution_details.control = 'Private not-for-profit' AND institution_details.state = 'CT' AND institution_details.awards_per_value < state_sector_details.awards_per_natl_value;
SELECT chronname FROM institution_details WHERE state_abbr = 'ID' AND level = '4-year' AND control = 'Public' ORDER BY grad_100_value LIMIT 1;
SELECT unitid FROM institution_details WHERE state = 'KY' AND level = '4-year' AND control = 'Private for-profit' ORDER BY grad_150_value DESC LIMIT 1;
SELECT T2.grad_100 FROM institution_details AS T1 JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Pennsylvania State University-Altoona' AND T2.gender = 'F' AND T2.race = 'H';
SELECT T1.cohort FROM institution_details AS T1 JOIN (   SELECT unitid, MAX(cohort_size) as max_cohort_size   FROM institution_details ) AS T2 ON T1.unitid = T2.unitid AND T1.cohort_size = T2.max_cohort_size;
SELECT COUNT(*) FROM institution_details WHERE state = (SELECT state FROM institution_details WHERE chronname = 'Brevard Community College') AND level = '4-year' AND control = 'Private not-for-profit';
SELECT SUM(grad_cohort) FROM institution_grads JOIN institution_details ON institution_grads.unitid = institution_details.unitid WHERE institution_details.level = '2-year' AND institution_details.control = 'Public' AND institution_details.state = 'Alabama' AND institution_grads.year = 2011 AND institution_grads.race = 'X';
SELECT COUNT(*) FROM state_sector_grads JOIN state_sector_details ON state_sector_grads.stateid = state_sector_details.stateid WHERE state_sector_details.schools_count = 113 AND state_sector_grads.level = '2-year' AND state_sector_grads.control = 'public' AND state_sector_grads.race = 'A' AND state_sector_grads.cohort = '2y all' AND state_sector_grads.year = 2013;
SELECT     (SUM(CASE WHEN i.chronname = 'Madison Area Technical College' AND i.level = '4-year' AND i.control = 'Public' THEN 1 ELSE 0 END) /      SUM(CASE WHEN s.state = 'Alabama' AND i.level = '4-year' AND i.control = 'Public' THEN 1 ELSE 0 END)) * 100 AS percentage FROM     institution_details i JOIN     state_sector_details s ON i.state = s.state WHERE     i.state = s.state;
SELECT i.state, i.chronname FROM institution_details i JOIN institution_grads g ON i.unitid = g.unitid WHERE g.year BETWEEN 2010 AND 2012 AND g.race = 'B';
SELECT state FROM state_sector_details WHERE year = '2011' AND awards_per_natl_value < 20;
SELECT T1.control, T1.level FROM institution_details AS T1 JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.race = 'X' ORDER BY T1.student_count DESC LIMIT 1;
SELECT DISTINCT race FROM state_sector_grads WHERE stateid IN (     SELECT stateid     FROM state_sector_details     WHERE control = 'Public' AND schools_count <= 20 );
SELECT i.basic FROM institution_details i JOIN institution_grads g ON i.unitid = g.unitid WHERE g.year = '2012' AND g.gender = 'M' AND g.race = 'X' GROUP BY i.basic;
SELECT SUM(grad_cohort) FROM state_sector_grads WHERE state = 'Alaska' AND year BETWEEN 2011 AND 2013 AND race = 'W';
SELECT i.chronname FROM institution_details i JOIN institution_grads g ON i.unitid = g.unitid WHERE g.race = 'Ai' AND g.grad_cohort BETWEEN 1 AND 3;
SELECT SUM(grad_cohort) FROM state_sector_grads JOIN state_sector_details ON state_sector_grads.stateid = state_sector_details.stateid WHERE state_sector_details.state LIKE 'A%' AND state_sector_details.awards_per_natl_value = 16.5 AND state_sector_grads.year = 2012;
SELECT site FROM institution_details WHERE student_count BETWEEN 500 AND 1000 AND year = (SELECT MAX(year) FROM institution_details);
SELECT state FROM state_sector_grads JOIN institution_details ON state_sector_grads.unitid = institution_details.unitid WHERE year = '2011' AND gender = 'M' AND race = 'B' AND control = 'Private for-profit';
SELECT i.site, i.chronname FROM institution_details i JOIN institution_grads g ON i.unitid = g.unitid WHERE g.year = 2011 AND g.race = 'B' AND g.grad_cohort BETWEEN 20 AND 30;
SELECT COUNT(*) FROM institution_grads ig JOIN state_sector_details ssd ON ig.stateid = ssd.stateid WHERE ig.year = 2012 AND ig.gender = 'F' AND ssd.schools_count BETWEEN 10 AND 20;
SELECT T1.race FROM institution_grads AS T1 JOIN institution_details AS T2 ON T1.unitid = T2.unitid WHERE T2.state = 'Alabama' AND T2.student_count > (SELECT AVG(student_count) * 0.9 FROM institution_details) GROUP BY T1.race;
Error: 第 3744 个样本有 2 个SQL。
SELECT chronname FROM institution_details WHERE state = 'Connecticut' ORDER BY retain_percentile DESC LIMIT 1;
SELECT t1.site FROM institution_details AS t1 JOIN institution_grads AS t2 ON t1.unitid = t2.unitid WHERE t2.year = 2008 AND t2.race = 'W' AND t2.cohort = '2y all' ORDER BY t2.grad_cohort DESC LIMIT 1;
SELECT year FROM institution_grads WHERE unitid = (SELECT unitid FROM institution_details WHERE chronname = 'Harvard University') AND cohort = 'FTF' ORDER BY grad_cohort DESC LIMIT 1;
SELECT i.chronname, i.student_count FROM institution_details i JOIN (     SELECT ssd.stateid     FROM state_sector_details ssd     WHERE ssd.state_appr_value = (         SELECT MAX(state_appr_value)         FROM state_sector_details         WHERE year = 2011     ) ) ss ON i.state = ss.stateid WHERE i.year = 2010 ORDER BY i.student_count LIMIT 1;
SELECT AVG(grad_cohort) AS avg_black_students FROM institution_grads WHERE unitid = (     SELECT unitid     FROM institution_details     WHERE chronname = 'Yale University' ) AND race = 'B' AND cohort = '4y bach' AND year BETWEEN 2002 AND 2005;
SELECT i.chronname, SUM(g.grad_cohort) AS total_hispanic_grads FROM institution_details i JOIN institution_grads g ON i.unitid = g.unitid WHERE i.chronname IN ('Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University') AND g.race = 'H' GROUP BY i.unitid ORDER BY total_hispanic_grads DESC LIMIT 1;
SELECT COUNT(*) AS num_institutions, chronname FROM institution_details WHERE state = 'Florida' AND level = '4-year' AND control = 'Public'
SELECT state, MIN(state_appr_value) as min_state_appr_value FROM state_sector_details WHERE state IN (     SELECT DISTINCT state     FROM institution_details     WHERE chronname IN ('Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University') ) GROUP BY state ORDER BY min_state_appr_value ASC LIMIT 1;
SELECT chronname FROM institution_details WHERE ft_pct >= 90 AND state IN (     SELECT state     FROM state_sector_details     WHERE schools_count = (         SELECT MAX(schools_count)         FROM state_sector_details     ) );
SELECT AVG(i.med_sat_value) FROM institution_details i JOIN (     SELECT ss.state     FROM state_sector_details ss     WHERE ss.state_appr_value = (         SELECT MIN(state_appr_value)         FROM state_sector_details         WHERE state_appr_value IS NOT NULL     ) ) AS lowest_state ON i.state = lowest_state.state WHERE i.med_sat_value IS NOT NULL;
SELECT chronname FROM institution_details JOIN institution_grads ON institution_details.unitid = institution_grads.unitid WHERE institution_grads.gender = 'F' AND institution_grads.cohort != '4y other' GROUP BY institution_details.chronname ORDER BY SUM(institution_grads.grad_cohort) DESC LIMIT 1;
SELECT i.chronname, i.grad_150_value FROM institution_details i JOIN institution_grads g ON i.unitid = g.unitid WHERE i.chronname IN ('Brown University', 'Columbia University', 'Cornell University', 'Dartmouth College', 'Harvard University', 'Princeton University', 'University of Pennsylvania', 'Yale University') AND g.year = 2013 AND g.race = 'B' AND g.cohort = '4y bach' ORDER BY i.grad_150_value DESC LIMIT 1;
SELECT AVG(i.grad_150) FROM institution_grads i JOIN institution_details d ON i.unitid = d.unitid WHERE i.year BETWEEN 2011 AND 2013 AND i.gender = 'M' AND i.race = 'H' AND d.level = '2' AND d.chronname = 'United Education Institute-Huntington Park Campus';
SELECT d.chronname, d.state, e.state_appr_value FROM (     SELECT unitid, MAX(awards_per_value - awards_per_natl_value) AS diff     FROM institution_details     GROUP BY unitid ) AS a JOIN institution_details AS d ON a.unitid = d.unitid JOIN state_sector_details AS e ON d.state = e.state AND d.control = e.control AND d.level = e.level WHERE a.diff = (     SELECT MAX(awards_per_value - awards_per_natl_value)     FROM institution_details )
SELECT COUNT(*) FROM Business WHERE state = 'AZ' AND stars < 3;
SELECT COUNT(*) FROM Business WHERE active = 'False' AND state = 'AZ';
SELECT COUNT(*) FROM Reviews WHERE user_id = 36139 AND review_length = 'long';
SELECT COUNT(*) FROM Users WHERE user_fans = 'uber';
SELECT COUNT(*) FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON a.attribute_id = ba.attribute_id WHERE a.attribute_name = 'Open 24 Hours' AND ba.attribute_value = 'true';
SELECT attribute_value FROM Business_Attributes JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE business_id = 10172 AND attribute_name = 'Wi-Fi';
SELECT COUNT(*) FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Bars';
SELECT     (SELECT COUNT(*) FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Buffets') -     (SELECT COUNT(*) FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Gyms') AS difference;
SELECT C.category_name FROM Categories C JOIN Business_Categories BC ON C.category_id = BC.category_id JOIN Business B ON BC.business_id = B.business_id JOIN Reviews R ON B.business_id = R.business_id WHERE R.review_stars = 5 GROUP BY C.category_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT U.user_yelping_since_year FROM Users U JOIN Reviews R ON U.user_id = R.user_id WHERE R.review_stars = 5 GROUP BY U.user_yelping_since_year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AVG(review_stars) FROM Reviews WHERE user_id = (     SELECT user_id     FROM Reviews     WHERE review_length = 'long'     GROUP BY user_id     ORDER BY COUNT(*) DESC     LIMIT 1 )
SELECT c.category_name FROM Categories c JOIN Business_Categories bc ON c.category_id = bc.category_id JOIN (     SELECT b.business_id     FROM Business b     JOIN Reviews r ON b.business_id = r.business_id     WHERE r.review_length = 'long'     GROUP BY b.business_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) sub ON sub.business_id = bc.business_id;
SELECT c.category_name FROM Categories c JOIN Business_Categories bc ON c.category_id = bc.category_id JOIN (     SELECT t.business_id     FROM Tips t     WHERE t.tip_length = 'short'     GROUP BY t.business_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) tb ON tb.business_id = bc.business_id LIMIT 1;
SELECT U.user_yelping_since_year FROM Users U JOIN (     SELECT T.user_id, COUNT(*) AS cnt     FROM Tips T     WHERE T.tip_length = 'Short'     GROUP BY T.user_id ) AS Tmp ON U.user_id = Tmp.user_id WHERE Tmp.cnt = (     SELECT MAX(cnt)     FROM (         SELECT COUNT(*) AS cnt         FROM Tips         WHERE tip_length = 'Short'         GROUP BY user_id     ) AS Sub )
SELECT c.category_name FROM Categories c JOIN Business_Categories bc ON c.category_id = bc.category_id JOIN Business b ON bc.business_id = b.business_id JOIN Tips t ON b.business_id = t.business_id WHERE t.user_id = 70271 AND b.business_id IN (     SELECT business_id     FROM Tips     WHERE user_id = 70271     GROUP BY business_id     HAVING COUNT(*) = 1 );
SELECT b.stars FROM Business b JOIN Tips t ON b.business_id = t.business_id WHERE t.user_id = 69722 AND t.tip_length = 'short' GROUP BY b.business_id HAVING COUNT(t.business_id) = 1;
SELECT (COUNT(CASE WHEN c.category_name = 'Automotive' THEN bc.business_id END) * 1.0 / COUNT(bc.business_id)) * 100 AS percentage FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id;
SELECT     ((SELECT COUNT(*) FROM Business_Categories AS T1 JOIN Categories AS T2 ON T1.category_id = T2.category_id WHERE T2.category_name = 'Women''s Clothing') -      (SELECT COUNT(*) FROM Business_Categories AS T1 JOIN Categories AS T2 ON T1.category_id = T2.category_id WHERE T2.category_name = 'Men''s Clothing')) * 100.0 /     (SELECT COUNT(*) FROM Business)
SELECT COUNT(*) FROM Users WHERE user_yelping_since_year = 2004;
SELECT COUNT(*) FROM Users WHERE user_yelping_since_year = 2005 AND user_fans = 0;
SELECT COUNT(*) FROM Business WHERE active = 'TRUE' AND city = 'Tolleson';
SELECT COUNT(*) FROM Reviews WHERE user_id = '21679';
SELECT COUNT(*) FROM Reviews WHERE business_id = 10682 AND review_stars = 5;
SELECT b.business_id FROM Business b JOIN Reviews r ON b.business_id = r.business_id WHERE b.active = 'False' AND b.city = 'Sun City' GROUP BY b.business_id ORDER BY COUNT(r.user_id) DESC LIMIT 1;
SELECT COUNT(*) FROM Reviews WHERE business_id IN (     SELECT business_id     FROM Business     WHERE city = 'Yuma' ) AND review_length = 'Medium';
SELECT COUNT(*) FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE ba.business_id = '4960' AND a.attribute_name = 'Has TV' AND ba.attribute_value = true;
SELECT COUNT(Business.business_id) FROM Business JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE Attributes.attribute_name = 'Dogs Allowed' AND Business_Attributes.attribute_value = 'true';
SELECT ABS(     EXTRACT(HOUR FROM (         SELECT closing_time         FROM Business_Hours         WHERE business_id = '5734'         AND day_id = (             SELECT day_id             FROM Days             WHERE day_of_week = 'Saturday'         )     ) - EXTRACT(HOUR FROM (         SELECT opening_time         FROM Business_Hours         WHERE business_id = '5734'         AND day_id = (             SELECT day_id             FROM Days             WHERE day_of_week = 'Saturday'         )     )) ) AS hours_open_on_saturday
SELECT COUNT(*) FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Hair Removal';
SELECT     (SELECT COUNT(*) FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Chinese') -     (SELECT COUNT(*) FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Filipino') AS difference;
SELECT B.city FROM Tips T JOIN Business B ON T.business_id = B.business_id WHERE T.user_id = 63469 AND T.likes = 1;
SELECT COUNT(*) FROM Attributes JOIN Business_Attributes ON Attributes.attribute_id = Business_Attributes.attribute_id WHERE Business_Attributes.business_id = '1141' AND Attributes.attribute_name LIKE '%music%' AND Business_Attributes.attribute_value = 'true';
SELECT COUNT(*) FROM Users_Compliments JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id WHERE Users_Compliments.user_id = 57400 AND Compliments.compliment_type = 'cute';
SELECT user_id FROM Users_Compliments JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id WHERE Compliments.compliment_type = 'funny' GROUP BY user_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(Business.business_id) FROM Business JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE Attributes.attribute_name = 'Drive-Thru' AND Business_Attributes.attribute_value = 'true' AND Business.city = 'Scottsdale' AND Business.business_id < 1000;
SELECT AVG(B.stars) FROM Business B JOIN Business_Attributes BA ON B.business_id = BA.business_id JOIN Attributes A ON BA.attribute_id = A.attribute_id WHERE A.attribute_name = 'Open 24 Hours' AND BA.attribute_value = 'true';
SELECT MULTIPLY(DIVIDE((SELECT COUNT(*) FROM Business WHERE city = 'Phoenix' AND business_id IN (SELECT business_id FROM Business_Attributes WHERE attribute_id = (SELECT attribute_id FROM Attributes WHERE attribute_name = 'BYOB') AND attribute_value = 'TRUE')), (SELECT COUNT(*) FROM Business WHERE business_id IN (SELECT business_id FROM Business_Attributes WHERE attribute_id = (SELECT attribute_id FROM Attributes WHERE attribute_name = 'BYOB') AND attribute_value = 'TRUE'))), 1.0)
SELECT T1.business_id FROM Business AS T1 WHERE T1.state = 'AZ' AND T1.stars = 5;
SELECT COUNT(*) FROM Business WHERE active = 'true' AND review_count = 'Low';
SELECT COUNT(user_id) FROM Users WHERE user_id BETWEEN 1 AND 20 AND user_fans = 0 AND user_review_count = 'Low';
SELECT bh.opening_time, b.business_id FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'fashion';
SELECT COUNT(*) FROM Business_Hours bh JOIN Business_Categories bc ON bh.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Shopping' AND bh.opening_time < '08:00:00';
SELECT B.business_id, B.city, B.state FROM Business AS B JOIN Business_Categories AS BC ON B.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id JOIN Business_Hours AS BH ON B.business_id = BH.business_id JOIN Days AS D ON BH.day_id = D.day_id WHERE C.category_name = 'pets' AND BH.closing_time > '21:00' GROUP BY B.business_id, B.city, B.state;
SELECT COUNT(DISTINCT b.business_id) FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE c.category_name = 'your_category' AND d.day_of_week BETWEEN 'Monday' AND 'Thursday' AND bh.day_id BETWEEN 2 AND 5;
SELECT COUNT(r.review_length) AS total_review_count FROM Reviews r JOIN Business b ON r.business_id = b.business_id JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Active Life' AND b.city = 'Phoenix';
SELECT b.business_id FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.stars < 5 AND c.category_name = 'men''s clothing';
SELECT b.business_id, b.city, b.state, b.stars, b.review_count FROM Business b JOIN Reviews r ON b.business_id = r.business_id WHERE b.active = 'False' AND r.review_votes_useful = 'Low';
SELECT B.business_id, B.city AS business_names FROM Business AS B JOIN Reviews AS R ON B.business_id = R.business_id WHERE R.review_length = 'Long' AND B.business_id BETWEEN 1 AND 20;
SELECT ba.attribute_value FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE c.category_name = 'Fashion' AND b.city = 'Scottsdale';
Error: 第 3808 个样本有 2 个SQL。
SELECT b.business_id FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id JOIN Days d ON bh.day_id = d.day_id WHERE bh.opening_time < '8AM' AND b.city = 'Tempe';
SELECT COUNT(*) FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE b.active = 'true' AND b.city = 'Glendale' AND bh.opening_time = '8AM' AND bh.closing_time = '6PM';
SELECT     (COUNT(CASE WHEN city = 'Phoenix' THEN business_id END) * 1.0 / COUNT(business_id)) * 100 AS percentage FROM     Business
SELECT     COUNT(DISTINCT b.city) AS Num_Cities,     (SELECT         COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Business WHERE review_count = 'LOW')     FROM         Business b     JOIN         Business_Categories bc ON b.business_id = bc.business_id     JOIN         Categories c ON bc.category_id = c.category_id     WHERE         c.category_name = 'Active Life' AND b.review_count = 'LOW') AS Percentage_Low_Review_City FROM     Business b JOIN     Business_Categories bc ON b.business_id = bc.business_id JOIN     Categories c ON bc.category_id = c.category_id WHERE     c.category_name = 'Active Life';
SELECT COUNT(*) FROM Business WHERE active = 'true' AND city = 'Phoenix';
SELECT COUNT(*) FROM Business WHERE city = 'Scottsdale' AND stars > 3;
SELECT AVG(stars) AS average_rating FROM Business WHERE active = 'False';
SELECT COUNT(*) FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON a.attribute_id = ba.attribute_id WHERE a.attribute_name = 'beer_and_wine' AND ba.attribute_value = 'true' AND b.state = 'AZ';
SELECT T3.city FROM Business_Attributes AS T1 JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.attribute_name = 'full_bar' AND T1.attribute_value = 'true' GROUP BY T3.city ORDER BY COUNT(T1.business_id) DESC LIMIT 1;
SELECT COUNT(*) FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Fashion' AND b.stars = 5;
SELECT T3.city FROM (     SELECT T1.business_id     FROM Business_Categories AS T1     JOIN Categories AS T2 ON T1.category_id = T2.category_id     WHERE T2.category_name = 'Food' ) AS T1 JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T3.review_count = 'High' GROUP BY T3.city ORDER BY COUNT(T1.business_id) DESC LIMIT 1;
SELECT business_id FROM Business WHERE city = 'Mesa' AND stars > 3;
SELECT T3.city FROM Reviews AS T1 JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T1.review_votes_funny = 'Low' GROUP BY T3.city ORDER BY COUNT(T3.business_id) LIMIT 1;
SELECT MULTIPLY(100, DIVIDE(SUM(CASE WHEN T1.category_name = 'Real Estate' AND T3.stars = 5 THEN 1 ELSE 0 END), COUNT(T2.business_id))) AS percentage FROM Categories AS T1 JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T3.city = 'Chandler'
Error: 第 3823 个样本有 2 个SQL。
SELECT SUM(review_votes_useful) FROM Reviews WHERE user_id = 52592 AND business_id = 2;
SELECT attribute_id FROM Attributes WHERE attribute_name LIKE '%payment%';
SELECT review_length FROM Reviews WHERE business_id = 2 AND user_id = 612;
SELECT COUNT(*) FROM Business WHERE active = 'true' AND city = 'Gilbert';
SELECT COUNT(*) FROM Business WHERE state = 'AZ' AND review_count = 'low';
SELECT b.business_id FROM Business b JOIN Reviews r ON b.business_id = r.business_id WHERE b.state = 'AZ' AND r.review_stars = 5 LIMIT 3;
Error: 第 3830 个样本有 2 个SQL。
SELECT COUNT(*) FROM Users_Compliments JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id WHERE Users_Compliments.user_id = 33 AND Compliments.compliment_type = 'cool';
SELECT BH.opening_time FROM Business_Hours BH JOIN Days D ON BH.day_id = D.day_id WHERE BH.business_id = 53 AND D.day_of_week = 'Friday';
SELECT Attributes.attribute_name FROM Attributes JOIN Business_Attributes ON Attributes.attribute_id = Business_Attributes.attribute_id WHERE Business_Attributes.business_id = 56 AND Business_Attributes.attribute_value = 'true';
SELECT C.category_name FROM Categories C JOIN Business_Categories BC ON C.category_id = BC.category_id WHERE BC.business_id = 15;
SELECT COUNT(*) FROM Business JOIN Business_Categories ON Business.business_id = Business_Categories.business_id JOIN Categories ON Business_Categories.category_id = Categories.category_id WHERE Business.city = 'Scottsdale' AND Categories.category_name = 'Beauty & Spas';
SELECT user_id FROM Users_Compliments JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id WHERE Compliments.compliment_type = 'cute' AND number_of_compliments = 'Uber' LIMIT 2;
SELECT COUNT(business_id) FROM Business_Categories JOIN Categories ON Business_Categories.category_id = Categories.category_id JOIN Business ON Business.business_id = Business_Categories.business_id JOIN Reviews ON Reviews.business_id = Business.business_id WHERE Categories.category_name = 'Accessories' AND Reviews.review_stars > 3;
SELECT Business_Hours.closing_time - Business_Hours.opening_time AS hours_open FROM Business_Hours JOIN Days ON Business_Hours.day_id = Days.day_id JOIN Business ON Business.business_id = Business_Hours.business_id WHERE Business.business_id = 12 AND Business.city = 'Scottsdale' AND Days.day_id = 3;
SELECT COUNT(*) FROM Business b WHERE b.state = 'AZ' AND b.business_id NOT IN (     SELECT Business_Hours.business_id     FROM Business_Hours     JOIN Days ON Business_Hours.day_id = Days.day_id     WHERE Days.day_of_week = 'Thursday'     AND Business_Hours.opening_time IS NULL );
SELECT COUNT(*) FROM Business WHERE city = 'Scottsdale';
SELECT COUNT(*) FROM Business WHERE state = 'AZ' AND active = 'true';
SELECT COUNT(*) FROM Business WHERE city = 'Scottsdale' AND stars > 3;
SELECT city FROM Business WHERE review_count = (     SELECT MAX(review_count)     FROM Business     WHERE city IN ('Scottsdale', 'Anthem') ) AND city IN ('Scottsdale', 'Anthem');
SELECT COUNT(*) FROM Business WHERE state = 'AZ' AND stars > 4;
SELECT COUNT(*) FROM Business WHERE state = 'AZ';
SELECT city FROM Business WHERE stars = 5;
SELECT COUNT(*) FROM Reviews WHERE user_id = 3;
SELECT COUNT(*) FROM Reviews WHERE user_id = 3 AND review_length = 'Long';
SELECT COUNT(*) FROM Reviews WHERE user_id = 3 AND review_length = 'Long' AND review_votes_useful = 'medium';
SELECT COUNT(*) FROM Users WHERE user_yelping_since_year >= '2012';
SELECT user_id FROM Users WHERE user_fans = 'High';
SELECT COUNT(*) FROM Business b LEFT JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'Alcohol' AND ba.attribute_value = 'none';
SELECT COUNT(*) FROM Business b LEFT JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.state = 'AZ' AND a.attribute_name = 'Alcohol' AND ba.attribute_value = 'none';
SELECT ba.business_id FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'Good for Kids' AND ba.attribute_value = 'true';
SELECT COUNT(*) FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Shopping';
SELECT C.category_name FROM Categories C JOIN Business_Categories BC ON C.category_id = BC.category_id WHERE BC.business_id = 1;
SELECT COUNT(*) FROM Business WHERE active = 'true' AND business_id IN (     SELECT business_id     FROM Business_Categories     WHERE category_id IN (         SELECT category_id         FROM Categories         WHERE category_name = 'Food'     ) );
SELECT COUNT(*) FROM Business JOIN Business_Categories ON Business.business_id = Business_Categories.business_id JOIN Categories ON Business_Categories.category_id = Categories.category_id WHERE Business.city = 'Anthem' AND Categories.category_name = 'Food';
SELECT T1.business_id FROM Business AS T1 JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Food' ORDER BY T1.stars DESC LIMIT 1;
SELECT COUNT(Business.business_id) FROM Business JOIN Business_Categories ON Business.business_id = Business_Categories.business_id JOIN Categories ON Business_Categories.category_id = Categories.category_id JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE Categories.category_name = 'Food' AND Attributes.attribute_name = 'Good for Kids' AND Business_Attributes.attribute_value = 'true';
SELECT COUNT(*) FROM Business b JOIN Reviews r ON b.business_id = r.business_id WHERE b.state = 'AZ' AND r.user_id = 3;
SELECT C.category_name FROM Categories AS C JOIN Business_Categories AS BC ON C.category_id = BC.category_id JOIN Business AS B ON BC.business_id = B.business_id WHERE B.state = 'AZ'
SELECT     T2.closing_time - T2.opening_time AS business_hours FROM     Business_Hours AS T1 JOIN     Days AS T2 ON T1.day_id = T2.day_id WHERE     T1.business_id = 1 AND T2.day_of_week = 'Tuesday'
SELECT BH.opening_time FROM Business_Hours BH JOIN Days D ON BH.day_id = D.day_id WHERE BH.business_id = 1 AND D.day_of_week = 'Tuesday';
SELECT COUNT(*) FROM Business_Hours JOIN Days ON Business_Hours.day_id = Days.day_id WHERE Days.day_of_week = 'Monday' AND (Business_Hours.closing_time = '9PM' OR Business_Hours.closing_time = '10PM' OR Business_Hours.closing_time = '11PM' OR Business_Hours.closing_time = '12PM');
SELECT BH.opening_time FROM Business_Hours BH JOIN Days D ON BH.day_id = D.day_id JOIN Business B ON BH.business_id = B.business_id WHERE D.day_of_week = 'Monday' AND B.city = 'Anthem' AND B.active = 'true';
SELECT COUNT(*) FROM Business_Hours JOIN Days ON Business_Hours.day_id = Days.day_id JOIN Business ON Business.business_id = Business_Hours.business_id WHERE Days.day_of_week = 'Sunday' AND Business_Hours.closing_time = '12PM' AND Business.state = 'AZ';
SELECT C.category_name FROM Categories C JOIN Business_Categories BC ON C.category_id = BC.category_id JOIN Business_Hours BH ON BC.business_id = BH.business_id JOIN Days D ON BH.day_id = D.day_id WHERE D.day_of_week = 'Sunday' AND BH.closing_time = '12PM';
SELECT COUNT(DISTINCT b.business_id) FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'Good for Kids' AND ba.attribute_value = 'true' AND (     SELECT COUNT(DH.day_id)     FROM Business_Hours DH     WHERE DH.business_id = b.business_id ) = 7;
SELECT COUNT(*) FROM Users u JOIN Elite e ON u.user_id = e.user_id WHERE u.user_yelping_since_year = e.year_id;
SELECT MAX(TIMESTAMPDIFF(HOUR, Business_Hours.opening_time, Business_Hours.closing_time)) AS longest_business_time FROM Business_Hours JOIN Days ON Business_Hours.day_id = Days.day_id JOIN Business_Categories ON Business_Hours.business_id = Business_Categories.business_id JOIN Categories ON Business_Categories.category_id = Categories.category_id WHERE Days.day_of_week = 'Monday' AND Categories.category_name = 'Shopping'
SELECT bh.business_id FROM Business_Hours bh JOIN Days d ON bh.day_id = d.day_id WHERE d.day_of_week = 'Sunday' AND (bh.closing_time - bh.opening_time) > 12;
SELECT COUNT(DISTINCT r.user_id) FROM Reviews r JOIN Elite e ON r.user_id = e.user_id WHERE r.business_id = 1;
SELECT COUNT(DISTINCT u.user_id) FROM Users u JOIN Reviews r ON u.user_id = r.user_id WHERE u.user_review_count > 10 AND EXISTS (     SELECT 1     FROM Elite e     WHERE e.user_id = u.user_id );
SELECT B.business_id, B.city FROM Business AS B JOIN Reviews AS R ON B.business_id = R.business_id WHERE B.state = 'AZ' GROUP BY B.business_id, B.city ORDER BY COUNT(R.business_id) DESC LIMIT 1;
SELECT AVG(T2.review_stars) FROM Business AS T1 JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Anthem';
SELECT AVG(T2.review_stars) FROM Business AS T1 JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state = 'AZ' AND T2.user_id = 3;
SELECT AVG(TIMESTAMPDIFF(HOUR, Business_Hours.opening_time, Business_Hours.closing_time)) FROM Business_Hours JOIN Days ON Business_Hours.day_id = Days.day_id WHERE Business_Hours.business_id = 1 AND (Days.day_of_week = 'Saturday' OR Days.day_of_week = 'Sunday')
SELECT AVG(b.stars) FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE d.day_of_week = 'Sunday' AND bh.closing_time = '12PM';
SELECT COUNT(*) FROM Business WHERE city = 'Casa Grande';
SELECT COUNT(*) FROM Business WHERE active = 'true' AND state = 'AZ' AND review_count < (SELECT AVG(review_count) FROM Business WHERE state = 'AZ');
SELECT business_id FROM Business WHERE stars >= 2 AND stars < 4 AND city = 'Mesa'
SELECT COUNT(*) FROM Users WHERE user_yelping_since_year >= 2011 AND user_yelping_since_year < 2014 AND user_fans > (SELECT AVG(user_fans) FROM Users);
SELECT review_length FROM Reviews WHERE user_id = 35026 AND business_id = 2;
Error: 第 3885 个样本有 2 个SQL。
SELECT COUNT(*) FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Mexican' AND b.stars < 4;
SELECT b.business_id, b.stars FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.active = 'true' AND c.category_name = 'Fashion';
SELECT c.category_name FROM Categories c JOIN Business_Categories bc ON c.category_id = bc.category_id JOIN Business b ON bc.business_id = b.business_id WHERE b.stars = (SELECT MAX(stars) FROM Business) GROUP BY c.category_name;
SELECT C.category_name FROM Categories C JOIN Business_Categories BC ON C.category_id = BC.category_id JOIN (     SELECT B.business_id, R.review_stars, R.review_length     FROM Business B     JOIN Reviews R ON B.business_id = R.business_id     WHERE B.business_id BETWEEN 6 AND 9 AND R.review_length = 'Medium' ) AS SubQuery ON SubQuery.business_id = BC.business_id WHERE SubQuery.review_stars = (     SELECT MAX(review_stars)     FROM Reviews     WHERE business_id BETWEEN 6 AND 9 AND review_length = 'Medium' );
SELECT COUNT(*) FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.active = 'true' AND a.attribute_name = 'Caters' AND b.review_count < (SELECT AVG(review_count) FROM Business);
SELECT bh.opening_time, bh.closing_time FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id WHERE b.city = 'Tempe' AND b.stars = (SELECT MAX(stars) FROM Business WHERE city = 'Tempe')
SELECT C.category_name, A.attribute_name FROM Business B JOIN Business_Categories BC ON B.business_id = BC.business_id JOIN Categories C ON BC.category_id = C.category_id JOIN Business_Attributes BA ON B.business_id = BA.business_id JOIN Attributes A ON BA.attribute_id = A.attribute_id WHERE B.active = 'true' AND B.city = 'Chandler' AND B.state = 'AZ' AND B.review_count = (     SELECT AVG(review_count)     FROM Business     WHERE active = 'true' AND city = 'Chandler' AND state = 'AZ' );
SELECT C.category_name FROM Categories C JOIN Business_Categories BC ON C.category_id = BC.category_id JOIN Business B ON BC.business_id = B.business_id WHERE B.active = 'true' AND B.city = 'Surprise' AND B.state = 'AZ';
SELECT B.city, B.state FROM Business B JOIN Business_Hours BH ON B.business_id = BH.business_id JOIN Days D ON BH.day_id = D.day_id WHERE BH.opening_time = '8AM' AND BH.closing_time = '9PM' AND D.day_of_week = 'Friday';
SELECT ba.attribute_value FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id WHERE b.active = 'true' AND b.city = 'Mesa' AND b.state = 'AZ' AND b.stars = 3 AND b.review_count = (     SELECT MAX(review_count)     FROM Business     WHERE active = 'true' AND city = 'Mesa' AND state = 'AZ' AND stars = 3 );
SELECT bh.opening_time FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id WHERE b.active = 'true' AND b.city = 'Chandler' AND b.review_count = 'medium';
SELECT (COUNT(CASE WHEN b.stars < 4 THEN b.business_id END) * 100.0 / COUNT(b.business_id)) AS percentage FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Accessories';
SELECT BH.closing_time, D.day_of_week FROM Business AS B JOIN Business_Hours AS BH ON B.business_id = BH.business_id JOIN Days AS D ON BH.day_id = D.day_id WHERE B.active = 'true' AND B.city = 'Tempe' AND B.stars > (SELECT AVG(stars) FROM Business) * 0.7
SELECT COUNT(*) FROM Business WHERE city = 'Phoenix' AND state = 'Arizona' AND active = 'true';
SELECT COUNT(*) FROM Business WHERE review_count = 'High';
SELECT COUNT(business_id) FROM Business_Attributes WHERE attribute_id = (SELECT attribute_id FROM Attributes WHERE attribute_name = 'Sells alcohol') AND attribute_value = 'beer_and_wine';
SELECT COUNT(attribute_id) FROM Business_Attributes WHERE business_id = 2;
SELECT COUNT(*) FROM Users_Compliments JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id WHERE Compliments.compliment_type = 'photo' AND Users_Compliments.number_of_compliments = 'High';
SELECT COUNT(*) FROM Business JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE Business.city = 'Phoenix' AND Business.state = 'AZ' AND Attributes.attribute_name = 'waiter_services' AND Business_Attributes.attribute_value = TRUE;
SELECT ba.attribute_name, b.business_id FROM Business_Hours bh JOIN Days d ON bh.day_id = d.day_id JOIN Business b ON bh.business_id = b.business_id JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE bh.opening_time = bh.closing_time GROUP BY b.business_id, ba.attribute_name HAVING COUNT(d.day_id) = 7;
SELECT b.business_id, COUNT(r.user_id) AS review_count FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id JOIN Business b ON bc.business_id = b.business_id JOIN Reviews r ON b.business_id = r.business_id WHERE c.category_name = 'Fashion' GROUP BY b.business_id ORDER BY review_count DESC LIMIT 1;
SELECT C.category_name, AVG(B.review_count) as avg_review_count FROM Business B JOIN Business_Categories BC ON B.business_id = BC.business_id JOIN Categories C ON BC.category_id = C.category_id WHERE B.state = 'AZ' AND B.review_count >= 3 GROUP BY C.category_name ORDER BY avg_review_count DESC;
SELECT     CAST(SUM(CASE WHEN u.user_average_stars = 5 THEN 1 ELSE 0 END) AS REAL) /     SUM(CASE WHEN u.user_average_stars = 1 THEN 1 ELSE 0 END) AS ratio FROM     Elite e JOIN     Users u ON e.user_id = u.user_id JOIN     Years y ON e.year_id = y.year_id WHERE     y.actual_year = 2013;
WITH user_counts AS (   SELECT year_id,          COUNT(user_id) as count_users   FROM Elite   WHERE year_id BETWEEN 2005 AND 2014   GROUP BY year_id ), lag_user_counts AS (   SELECT year_id,          count_users,          LAG(count_users) OVER (ORDER BY year_id) as prev_year_users   FROM user_counts ) SELECT year_id,        ((count_users - prev_year_users) / prev_year_users) * 100 as increment_percentage FROM lag_user_counts WHERE year_id > 2005;
SELECT COUNT(business_id) AS num_business_reviewed,        (EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - u.user_yelping_since_year) AS years_with_yelp FROM Reviews r JOIN Users u ON r.user_id = u.user_id WHERE r.user_id = 3 GROUP BY u.user_yelping_since_year;
SELECT AVG(T2.review_stars) AS yearly_avg_review FROM (     SELECT YEAR(review_date) AS review_year, COUNT(*) AS review_count     FROM Reviews     WHERE user_id = 3     GROUP BY YEAR(review_date) ) AS T1 JOIN (     SELECT YEAR(review_date) AS review_year, AVG(review_stars) AS avg_review_stars     FROM Reviews     WHERE user_id = 3     GROUP BY YEAR(review_date) ) AS T2 ON T1.review_year = T2.review_year WHERE T1.review_year BETWEEN Users.user_yelping_since_year AND YEAR(CURRENT_TIMESTAMP()) GROUP BY T1.review_year;
Error: 第 3912 个样本有 2 个SQL。
SELECT U.user_id, U.user_average_stars, SUM(T.likes) AS total_likes FROM Users U JOIN Elite E ON U.user_id = E.user_id JOIN Tips T ON U.user_id = T.user_id GROUP BY U.user_id, U.user_average_stars HAVING COUNT(DISTINCT E.year_id) >= 5 ORDER BY total_likes DESC;
SELECT     b.business_id,     b.city,     b.state,     COUNT(r.review_stars) AS review_count,     STDDEV(r.review_stars) AS review_star_stddev FROM     Business b JOIN     Business_Categories bc ON b.business_id = bc.business_id JOIN     Categories c ON bc.category_id = c.category_id JOIN     Reviews r ON b.business_id = r.business_id WHERE     c.category_name = 'Hotel & Travel' GROUP BY     b.business_id,     b.city,     b.state ORDER BY     review_count DESC LIMIT 1;
SELECT CORR(Business.stars, Reviews.review_stars) as correlation FROM Business JOIN Reviews ON Business.business_id = Reviews.business_id;
SELECT COUNT(*) FROM Business WHERE active = 'true';
SELECT business_id FROM Business WHERE city = 'Phoenix' AND review_count = 'Low';
SELECT COUNT(*) FROM Business WHERE active = 'true' AND state = 'AZ' AND review_count = 'High';
SELECT business_id FROM Business WHERE stars BETWEEN 3 AND 4 AND city = 'Tempe';
SELECT COUNT(*) FROM Users WHERE user_yelping_since_year >= 2010 AND user_yelping_since_year < 2013 AND user_fans = 'Low';
SELECT review_length FROM Reviews WHERE business_id = 1 AND user_id = 60776;
SELECT A.attribute_name FROM Attributes A JOIN Business_Attributes BA ON A.attribute_id = BA.attribute_id JOIN Business B ON BA.business_id = B.business_id WHERE B.city = 'Scottsdale' AND B.review_count = 'High';
SELECT COUNT(*) FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Automotive' AND b.stars < 3;
SELECT b.business_id, b.stars FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.active = 'true' AND c.category_name = 'Pets';
SELECT A.attribute_name FROM Attributes A JOIN Business_Attributes BA ON A.attribute_id = BA.attribute_id JOIN Business B ON BA.business_id = B.business_id WHERE B.stars = (SELECT MAX(stars) FROM Business)
SELECT C.category_name FROM (     SELECT B.business_id, MAX(R.review_stars) AS max_review_stars     FROM Business B     JOIN Reviews R ON B.business_id = R.business_id     WHERE R.review_length = 'Short' AND B.business_id BETWEEN 5 AND 10     GROUP BY B.business_id ) AS MaxReviewStars JOIN Business_Categories BC ON MaxReviewStars.business_id = BC.business_id JOIN Categories C ON BC.category_id = C.category_id WHERE MaxReviewStars.max_review_stars = (     SELECT MAX(max_review_stars)     FROM (         SELECT B.business_id, MAX(R.review_stars) AS max_review_stars         FROM Business B         JOIN Reviews R ON B.business_id = R.business_id         WHERE R.review_length = 'Short' AND B.business_id BETWEEN 5 AND 10         GROUP BY B.business_id     ) AS SubQuery )
SELECT COUNT(*) FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON a.attribute_id = ba.attribute_id WHERE b.active = 'true' AND a.attribute_name = 'Wi-Fi' AND b.review_count = 'Medium';
SELECT bh.opening_time, bh.closing_time FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id WHERE b.city = 'Gilbert' AND b.stars = (SELECT MAX(stars) FROM Business WHERE city = 'Gilbert')
SELECT C.category_name, A.attribute_name FROM Business B JOIN Business_Categories BC ON B.business_id = BC.business_id JOIN Categories C ON BC.category_id = C.category_id JOIN Business_Attributes BA ON B.business_id = BA.business_id JOIN Attributes A ON BA.attribute_id = A.attribute_id WHERE B.active = 'true' AND B.city = 'Mesa' AND B.state = 'AZ' AND B.review_count = 'Low';
SELECT C.category_name FROM Categories C JOIN Business_Categories BC ON C.category_id = BC.category_id JOIN Business B ON BC.business_id = B.business_id WHERE B.active = 'FALSE' AND B.state = 'AZ';
SELECT B.city FROM Business_Hours BH JOIN Business B ON BH.business_id = B.business_id JOIN Days D ON BH.day_id = D.day_id WHERE D.day_of_week = 'Saturday' AND BH.opening_time = '9AM' AND BH.closing_time = '9PM';
SELECT ba.attribute_value FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id WHERE b.active = 'FALSE' AND b.city = 'Phoenix' AND b.state = 'AZ' AND b.review_count = 'Medium' AND b.stars = 3.5;
SELECT bh.opening_time FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id WHERE b.active = 'true' AND b.city = 'Surprise' AND b.review_count = 'Low';
SELECT     (COUNT(CASE WHEN b.stars < 3 THEN b.business_id END) * 100.0 / COUNT(b.business_id)) AS percentage FROM     Business b JOIN     Business_Categories bc ON b.business_id = bc.business_id JOIN     Categories c ON bc.category_id = c.category_id WHERE     c.category_name = 'Local Services'
SELECT BH.closing_time, D.day_of_week FROM Business AS B JOIN Business_Hours AS BH ON B.business_id = BH.business_id JOIN Days AS D ON BH.day_id = D.day_id WHERE B.active = 'true' AND B.city = 'Scottsdale' AND B.stars > (SELECT AVG(stars) * 0.6 FROM Business)
SELECT COUNT(*) FROM Users WHERE user_yelping_since_year = 2014 AND user_fans = 0;
SELECT U.user_id FROM Users U JOIN Users_Compliments UC ON U.user_id = UC.user_id JOIN Compliments C ON UC.compliment_id = C.compliment_id WHERE C.compliment_type = 'low' AND UC.number_of_compliments < 5 LIMIT 5;
SELECT user_id FROM Users WHERE user_average_stars = 4 LIMIT 10;
SELECT B.city FROM Business_Hours BH JOIN Business B ON BH.business_id = B.business_id JOIN Days D ON BH.day_id = D.day_id WHERE D.day_of_week = 'Sunday' AND BH.opening_time = '10AM' AND BH.closing_time = '12PM';
SELECT COUNT(*) FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON a.attribute_id = ba.attribute_id WHERE a.attribute_name = 'Open 24 Hours' AND ba.attribute_value = 'true';
SELECT ba.business_id FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name IN ('Good for Groups', 'Good for Dancing') AND ba.attribute_value = 'true' GROUP BY ba.business_id HAVING COUNT(DISTINCT a.attribute_name) = 2 LIMIT 5;
SELECT b.business_id FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE b.active = 'true' AND b.city = 'Ahwatukee' AND d.day_of_week = 'Sunday' AND bh.closing_time > bh.opening_time;
SELECT C.category_name FROM Categories C JOIN Business_Categories BC ON C.category_id = BC.category_id JOIN Business B ON BC.business_id = B.business_id WHERE B.active = 'true' AND B.state != 'AZ';
SELECT C.category_name FROM Categories C JOIN Business_Categories BC ON C.category_id = BC.category_id JOIN Business B ON BC.business_id = B.business_id WHERE B.review_count = 'High' AND B.stars = 2;
SELECT COUNT(*) FROM Business_Attributes JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE Attributes.attribute_name = 'ambience_romantic' AND Business_Attributes.attribute_value = 'true';
SELECT B.city FROM Business B JOIN Business_Hours BH ON B.business_id = BH.business_id JOIN Days D ON BH.day_id = D.day_id WHERE D.day_of_week = 'Saturday' AND BH.opening_time = '1PM' AND BH.closing_time = '6PM';
SELECT U.user_id, U.user_fans FROM Users U JOIN (   SELECT T.user_id, MAX(T.likes) AS max_likes   FROM Tips T   GROUP BY T.user_id ) T_max_likes ON U.user_id = T_max_likes.user_id WHERE T_max_likes.max_likes = (   SELECT MAX(likes)   FROM Tips )
SELECT B.city FROM Business B JOIN Business_Hours BH ON B.business_id = BH.business_id JOIN Days D ON BH.day_id = D.day_id JOIN Checkins C ON B.business_id = C.business_id WHERE D.day_of_week = 'Saturday' AND C.label_time_0 > 0 AND C.label_time_1 > 0 AND BH.opening_time = '12AM' AND BH.closing_time = '1AM'
SELECT COUNT(*) FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Shopping Centers' AND b.review_count = 'High';
SELECT COUNT(*) FROM Business_Attributes JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE Attributes.attribute_name = 'Accepts Insurance' AND Business_Attributes.attribute_value = 'true';
SELECT AVG(T1.review_stars) FROM Reviews AS T1 JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.state IN ('SC', 'CA');
SELECT     (SELECT COUNT(DISTINCT bh.business_id) FROM Business_Hours bh JOIN Days d ON bh.day_id = d.day_id WHERE d.day_of_week = 'Monday' AND bh.opening_time = '10AM' AND bh.closing_time = '9PM') -     (SELECT COUNT(DISTINCT bh.business_id) FROM Business_Hours bh JOIN Days d ON bh.day_id = d.day_id WHERE d.day_of_week = 'Tuesday' AND bh.opening_time = '10AM' AND bh.closing_time = '9PM') AS Difference;
SELECT attribute_id FROM Attributes WHERE attribute_name = "Accepts Insurance";
SELECT COUNT(*) FROM Business WHERE active = 'true' AND city = 'Phoenix';
SELECT COUNT(*) FROM Business WHERE stars = '4' AND city = 'Mesa';
SELECT COUNT(*) FROM Business WHERE city = 'Gilbert' AND review_count = 'High';
SELECT b.business_id FROM Business b WHERE b.active = 'true' AND b.city = 'Gilbert' ORDER BY b.review_count DESC LIMIT 1;
SELECT COUNT(*) FROM Reviews JOIN Business ON Reviews.business_id = Business.business_id WHERE Business.city = 'Tempe' AND Business.stars = 3.5 AND Business.review_count = 'Uber' AND Reviews.review_length = 'Long';
SELECT ba.attribute_value FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.city = 'Mesa' AND a.attribute_name = 'Noise Level' AND b.review_count = 'Uber'
SELECT BA.attribute_value FROM Business_Attributes AS BA JOIN Attributes AS A ON BA.attribute_id = A.attribute_id WHERE BA.business_id = 14033 AND A.attribute_name = 'good_for_dinner';
SELECT Business_Hours.closing_time - Business_Hours.opening_time AS hours_open FROM Business_Hours JOIN Days ON Business_Hours.day_id = Days.day_id WHERE Business_Hours.business_id = '15098' AND Days.day_of_week = 'Monday'
SELECT b.business_id FROM Business b JOIN Reviews r ON b.business_id = r.business_id WHERE b.city = 'Phoenix' AND r.review_stars = 5 AND r.review_votes_funny = 'Uber';
SELECT T1.city FROM Business AS T1 JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T2.tip_length = 'Medium' AND T2.likes = 3;
SELECT COUNT(uc.number_of_compliments) FROM Users u JOIN Users_Compliments uc ON u.user_id = uc.user_id JOIN Compliments c ON uc.compliment_id = c.compliment_id WHERE u.user_yelping_since_year = 2010 AND u.user_average_stars = 4.5 AND u.user_fans = (SELECT MAX(user_fans) FROM Users) AND c.compliment_type = 'funny';
SELECT COUNT(*) FROM Users_Compliments JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id WHERE Compliments.compliment_type = 'cool' AND Users_Compliments.user_id = 41717;
SELECT attribute_value FROM Business_Attributes JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE business_id = '12476' AND attribute_name = 'parking_lot';
SELECT attribute_value FROM Business_Attributes JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE business_id = '12476' AND attribute_name = 'payment_types_mastercard';
SELECT (COUNT(CASE WHEN bc.category_id IN (SELECT c.category_id FROM Categories c WHERE c.category_name = 'Pets') THEN bc.business_id END) * 100.0 / COUNT(bc.business_id)) AS Pets_Percentage FROM Business_Categories bc;
SELECT     (SELECT COUNT(*) FROM Business_Categories AS T1 JOIN Categories AS T2 ON T1.category_id = T2.category_id WHERE T2.category_name = 'Women''s Clothing') /     (SELECT COUNT(*) FROM Business_Categories AS T1 JOIN Categories AS T2 ON T1.category_id = T2.category_id WHERE T2.category_name = 'Men''s Clothing')
SELECT business_id, active, city FROM Business WHERE state = 'CA';
SELECT (COUNT(CASE WHEN active = 'true' THEN business_id END) / COUNT(business_id)) * 100 AS Percentage_Running_Business FROM Business;
SELECT attribute_id, attribute_name FROM Attributes WHERE attribute_name LIKE 'music%';
SELECT year_id FROM Elite WHERE year_id BETWEEN 2006 AND 2007 GROUP BY year_id ORDER BY COUNT(user_id) DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN number_of_compliments = 'Low' THEN user_id END) * 100.0 / COUNT(user_id)) AS Low_Compliments_Percentage FROM     Users_Compliments;
SELECT business_id, user_id FROM Reviews WHERE review_votes_cool = 'Uber'
SELECT U.user_id, T.business_id, T.tip_length FROM Users U JOIN Tips T ON U.user_id = T.user_id WHERE U.user_yelping_since_year = '2004' AND U.user_fans = 'High';
SELECT B.business_id, B.active, R.user_id, U.user_yelping_since_year FROM Reviews R JOIN Business B ON R.business_id = B.business_id JOIN Users U ON R.user_id = U.user_id WHERE R.review_votes_funny = 'Uber' AND R.review_votes_cool = 'Uber' AND R.review_length = 'Long'
SELECT Attributes.attribute_id, Business.business_id, Business.city, Business.active FROM Attributes JOIN Business_Attributes ON Attributes.attribute_id = Business_Attributes.attribute_id JOIN Business ON Business.business_id = Business_Attributes.business_id WHERE Attributes.attribute_name = 'music_playlist' AND Business.active = 'false';
SELECT (COUNT(CASE WHEN Attributes.attribute_name = 'Accepts Credit Cards' THEN Business.business_id END) / COUNT(Business.business_id)) * 100 AS percentage FROM Business JOIN Business_Attributes ON Business.business_id = Business_Attributes.business_id JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id;
SELECT U.user_id, R.review_length FROM Business B JOIN Reviews R ON B.business_id = R.business_id JOIN Users U ON R.user_id = U.user_id WHERE B.active = 'false' AND B.city = 'San Tan Valley' AND R.review_stars = 5;
SELECT U.user_average_stars, E.year_id, C.compliment_type FROM Users AS U JOIN Elite AS E ON U.user_id = E.user_id JOIN Users_Compliments AS UC ON U.user_id = UC.user_id JOIN Compliments AS C ON UC.compliment_id = C.compliment_id WHERE U.user_id = 6027 AND UC.number_of_compliments = 'Uber';
SELECT Business.business_id, Business.state, Business.city FROM Business JOIN Business_Categories ON Business.business_id = Business_Categories.business_id JOIN Categories ON Business_Categories.category_id = Categories.category_id WHERE Categories.category_name = 'Coffee & Tea' LIMIT 5;
SELECT c.category_name FROM Categories c JOIN Business_Categories bc ON c.category_id = bc.category_id GROUP BY c.category_name HAVING (COUNT(bc.business_id) * 100 / (SELECT COUNT(*) FROM Business_Categories)) > 10;
SELECT U.user_id, U.user_fans FROM Users U JOIN Reviews R ON U.user_id = R.user_id JOIN Business B ON R.business_id = B.business_id WHERE B.stars = 5 AND B.city = 'Sun Lakes';
SELECT     c.category_name,     COUNT(b.business_id) as num_business FROM     Business_Categories bc JOIN     Categories c ON bc.category_id = c.category_id JOIN     Business b ON bc.business_id = b.business_id WHERE     c.category_name IN ('Men''s Clothing', 'Women''s Clothing') GROUP BY     c.category_name;
SELECT U.user_id, C.compliment_type, UC.number_of_compliments, U.user_fans FROM Users AS U JOIN Users_Compliments AS UC ON U.user_id = UC.user_id JOIN Compliments AS C ON UC.compliment_id = C.compliment_id WHERE U.user_id < 100 AND UC.number_of_compliments = (     SELECT MAX(number_of_compliments) FROM Users_Compliments WHERE user_id < 100 ) ORDER BY UC.number_of_compliments DESC, U.user_fans DESC LIMIT 1;
SELECT b.business_id FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id WHERE bh.closing_time = '8PM'
SELECT COUNT(*) FROM Business WHERE stars = 2 AND city = 'Phoenix' AND state = 'AZ';
SELECT COUNT(*) FROM Business WHERE city = 'Tempe' AND stars > 3;
SELECT user_id FROM Users WHERE user_average_stars < 3 AND user_yelping_since_year = 2012;
SELECT (COUNT(CASE WHEN stars = 5 THEN business_id END) / COUNT(business_id)) * 100 AS Percentage_5_Stars FROM Business;
SELECT (MAX(review_count) - MIN(review_count)) AS Review_Difference FROM Business;
SELECT b.business_id FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE c.category_name = 'Tires' GROUP BY b.business_id HAVING COUNT(DISTINCT d.day_of_week) = 7;
SELECT user_id FROM Elite WHERE year_id = (SELECT year_id FROM Years WHERE actual_year = 2012);
SELECT T1.business_id FROM Business AS T1 JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Shopping' AND T1.stars = 4
SELECT COUNT(*) FROM Business b JOIN Checkins c ON b.business_id = c.business_id JOIN Days d ON c.day_id = d.day_id WHERE d.day_of_week = 'Sunday' AND c.label_time_10 = 'Low';
SELECT COUNT(*) FROM Business b JOIN Reviews r ON b.business_id = r.business_id WHERE b.city = 'Glendale' AND r.user_id = 20241;
SELECT B.city FROM Business AS B JOIN Business_Categories AS BC ON B.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id WHERE C.category_name = 'Pet Services';
SELECT COUNT(*) FROM Compliments c JOIN Users_Compliments uc ON c.compliment_id = uc.compliment_id JOIN Users u ON uc.user_id = u.user_id WHERE c.compliment_type = 'photos' AND u.user_votes_cool = 'High';
SELECT COUNT(*) FROM (   SELECT business_id   FROM Business_Attributes   GROUP BY business_id   HAVING COUNT(attribute_id) > 10 ) as temp JOIN Business ON temp.business_id = Business.business_id WHERE Business.active = 'false';
SELECT b.business_id FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.city = 'Mesa' AND a.attribute_name = 'Alcohol';
SELECT     (COUNT(CASE WHEN r.review_votes_funny < 3 THEN b.business_id END) * 100.0 / COUNT(b.business_id)) AS percentage_low_funny_votes FROM     Business b JOIN     Reviews r ON b.business_id = r.business_id WHERE     b.city = 'Phoenix'
SELECT     COUNT(CASE WHEN c.category_name = 'Shopping' THEN bc.business_id END) /     COUNT(CASE WHEN c.category_name = 'Pets' THEN bc.business_id END) AS ratio FROM     Business_Categories bc JOIN     Categories c ON bc.category_id = c.category_id;
SELECT COUNT(*) FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Banks & Credit Unions';
SELECT COUNT(*) FROM Business WHERE active = 'true' AND city = 'Casa Grande';
SELECT BH.opening_time FROM Business_Hours BH JOIN Days D ON BH.day_id = D.day_id WHERE BH.business_id = 12 AND D.day_of_week = 'Monday';
SELECT COUNT(*) FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'Good for Kids' AND ba.attribute_value = 'true';
SELECT business_id, stars, review_count FROM Business WHERE active = 'true' AND city = 'Gilbert' ORDER BY review_count DESC, stars DESC LIMIT 1;
SELECT bc.category_name FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.stars = 5 AND b.city = 'Ahwatukee' AND b.state = 'AZ' GROUP BY bc.category_name LIMIT 5;
SELECT     (COUNT(CASE WHEN B.stars > 3 THEN B.business_id END) * 100.0 / COUNT(B.business_id)) AS percentage FROM     Business B WHERE     B.active = 'false' AND B.city = 'Avondale';
SELECT U.user_id, E.year_id IS NOT NULL AS is_elite FROM Users U LEFT JOIN Elite E ON U.user_id = E.user_id WHERE U.user_yelping_since_year = 2004;
SELECT (COUNT(CASE WHEN R.review_length = 'Long' AND R.review_stars = 5 THEN R.business_id END) * 100.0 / COUNT(R.business_id)) AS percentage FROM Reviews R WHERE R.review_stars = 5;
SELECT     (COUNT(CASE WHEN u.user_fans = 0 THEN u.user_id END) * 100.0 / COUNT(u.user_id)) AS percentage FROM     Users u WHERE     u.user_average_stars >= 4;
SELECT COUNT(*) FROM Tips WHERE business_id = 2 AND tip_length = 'Short';
SELECT user_id FROM Users WHERE user_average_stars = 5 ORDER BY user_yelping_since_year ASC LIMIT 1;
SELECT T3.day_of_week, T2.opening_time, T2.closing_time FROM Business AS T1 JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Black Canyon City' AND T1.review_count > (SELECT AVG(review_count) FROM Business)
SELECT     (SELECT COUNT(T1.user_id)      FROM Users_Compliments AS T1      JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id      WHERE T2.compliment_type = 'cute' AND T1.number_of_compliments = 'High') * 100.0 /     (SELECT COUNT(T1.user_id)      FROM Users_Compliments AS T1      WHERE T1.number_of_compliments = 'High') AS percentage
SELECT COUNT(*) FROM Business WHERE business_id NOT IN (SELECT business_id FROM Business_Attributes WHERE attribute_value IN ('none', 'no', 'false'))
SELECT opening_time, closing_time FROM Business_Hours WHERE business_id = 1 AND day_id = 2;
SELECT T1.city FROM Business AS T1 JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T2.review_length = 'Medium';
SELECT BH.closing_time FROM Business_Hours BH JOIN Days D ON BH.day_id = D.day_id WHERE BH.business_id = 4 AND D.day_of_week = 'Sunday';
SELECT b.business_id FROM Business b JOIN Reviews r ON b.business_id = r.business_id WHERE r.review_length = 'Short' AND b.city = 'Phoenix';
SELECT COUNT(*) FROM Users u JOIN Users_Compliments uc ON u.user_id = uc.user_id WHERE u.user_fans = 'Medium' AND uc.number_of_compliments = 'High';
SELECT U.user_id FROM Users U JOIN Users_Compliments UC ON U.user_id = UC.user_id WHERE UC.number_of_compliments = 'Low' AND U.user_yelping_since_year = 2012;
Error: 第 4025 个样本有 2 个SQL。
Error: 第 4026 个样本有 2 个SQL。
SELECT DISTINCT B.state FROM Business AS B JOIN Business_Hours AS BH ON B.business_id = BH.business_id JOIN Days AS D ON BH.day_id = D.day_id WHERE BH.opening_time = '1AM';
SELECT T2.category_name FROM Business_Categories AS T1 JOIN Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.business_id = 5
SELECT uc.user_id FROM Users_Compliments uc JOIN Compliments c ON uc.compliment_id = c.compliment_id WHERE c.compliment_type = 'photos';
SELECT     (COUNT(CASE WHEN T1.tip_length = 'Medium' THEN 1 END) / COUNT(T1.tip_length)) * 100 AS percentage,     T2.user_yelping_since_year FROM     Tips AS T1 JOIN     Users AS T2 ON T1.user_id = T2.user_id WHERE     T1.tip_length = 'Medium' GROUP BY     T2.user_yelping_since_year;
SELECT     (COUNT(CASE WHEN B.city = 'Mesa' THEN B.business_id END) * 100.0 / COUNT(B.business_id)) AS percentage,     BA.attribute_value FROM     Business B JOIN     Business_Attributes BA ON B.business_id = BA.business_id WHERE     B.city = 'Mesa' GROUP BY     BA.attribute_value;
SELECT DISTINCT B.state FROM Business AS B JOIN Business_Hours AS BH ON B.business_id = BH.business_id JOIN Days AS D ON BH.day_id = D.day_id WHERE BH.closing_time = '12AM';
SELECT COUNT(*) FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON a.attribute_id = ba.attribute_id WHERE a.attribute_name = 'beer_and_wine' AND ba.attribute_value = 'true' AND b.city = 'Peoria';
SELECT U.user_id, U.user_yelping_since_year FROM Users U JOIN Users_Compliments UC ON U.user_id = UC.user_id WHERE UC.number_of_compliments = 'High' ORDER BY U.user_yelping_since_year ASC LIMIT 1;
SELECT business_id, COUNT(user_id) AS review_count FROM Reviews GROUP BY business_id ORDER BY review_count DESC LIMIT 1;
SELECT Y.year_id FROM Years Y JOIN Elite E ON Y.year_id = E.year_id GROUP BY Y.year_id ORDER BY COUNT(E.user_id) DESC LIMIT 1;
SELECT COUNT(*) FROM Business b JOIN Reviews r ON b.business_id = r.business_id WHERE b.stars = 5.0 AND r.review_votes_funny = 'uber';
SELECT COUNT(*) FROM Users WHERE user_votes_funny = 'uber';
SELECT business_id FROM (   SELECT business_id,          SUM(TIME_TO_SEC(TIMEDIFF(closing_time, opening_time))) as total_seconds   FROM Business_Hours   GROUP BY business_id ) as operating_hours ORDER BY total_seconds ASC LIMIT 1;
SELECT business_id FROM Business_Hours WHERE day_id BETWEEN 1 AND 7 AND opening_time = closing_time GROUP BY business_id HAVING COUNT(day_id) = 7;
SELECT T3.tip_length, COUNT(T3.likes) AS total_likes FROM (     SELECT T1.business_id     FROM Business_Categories AS T1     INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id     WHERE T2.category_name = 'Hotels & Travel' ) AS T4 INNER JOIN Tips AS T3 ON T4.business_id = T3.business_id GROUP BY T3.tip_length ORDER BY T3.tip_length;
SELECT U.user_id, U.user_average_stars FROM Users AS U JOIN Reviews AS R ON U.user_id = R.user_id WHERE R.review_votes_funny = 'uber' AND R.review_votes_useful = 'uber' AND R.review_votes_cool = 'uber' GROUP BY U.user_id, U.user_average_stars;
SELECT     SUM(CASE WHEN b.stars BETWEEN 3.5 AND 5 THEN 1 ELSE 0 END) /     SUM(CASE WHEN b.stars BETWEEN 1 AND 2.5 THEN 1 ELSE 0 END) AS star_ratio FROM     Business b WHERE     b.business_id IN (         SELECT             bh.business_id         FROM             Business_Hours bh         WHERE             bh.day_id BETWEEN 1 AND 7 AND bh.opening_time = bh.closing_time         GROUP BY             bh.business_id         HAVING             COUNT(*) = 7     );
Error: 第 4044 个样本有 2 个SQL。
SELECT COUNT(*) FROM Business b JOIN Reviews r ON b.business_id = r.business_id WHERE b.state = 'Arizona' GROUP BY b.business_id HAVING AVG(r.review_stars) < 3.0;
SELECT (COUNT(Users.user_id) - COUNT(Elite.user_id)) * 100 / COUNT(Users.user_id) AS percentage FROM Users LEFT JOIN Elite ON Users.user_id = Elite.user_id;
SELECT C.compliment_type, COUNT(C.compliment_id) AS compliment_count FROM Users_Compliments UC JOIN Compliments C ON UC.compliment_id = C.compliment_id JOIN Users U ON UC.user_id = U.user_id WHERE U.user_fans = 'uber' GROUP BY C.compliment_type ORDER BY compliment_count DESC LIMIT 1;
SELECT AVG(u.user_yelping_since_year) FROM Users u JOIN Elite e ON u.user_id = e.user_id WHERE u.user_fans = 'Uber';
SELECT AVG(U.user_yelping_since_year) FROM Elite E JOIN Users U ON E.user_id = U.user_id;
SELECT COUNT(b.business_id) AS num_business_opened_more_than_8_hours,        (COUNT(CASE WHEN b.active = 'true' THEN b.business_id END) * 100.0 / COUNT(b.business_id)) AS percentage_active_businesses FROM Business b JOIN Business_Hours bh ON b.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE b.city = 'Mesa' AND TIMESTAMPDIFF(HOUR, bh.opening_time, bh.closing_time) > 8 GROUP BY b.city;
SELECT     c.category_name,     COUNT(b.business_id) AS num_businesses FROM     Business b JOIN     Business_Hours bh ON b.business_id = bh.business_id JOIN     Days d ON bh.day_id = d.day_id JOIN     Business_Categories bc ON b.business_id = bc.business_id JOIN     Categories c ON bc.category_id = c.category_id WHERE     b.active = 'true' AND     b.city = 'Phoenix' AND     bh.opening_time >= '17:00' AND     bh.closing_time > bh.opening_time GROUP BY     c.category_name ORDER BY     num_businesses DESC LIMIT 3;
SELECT U.user_id, COUNT(*) as review_count FROM Reviews R JOIN Business B ON R.business_id = B.business_id JOIN Business_Attributes BA ON B.business_id = BA.business_id JOIN Attributes A ON BA.attribute_id = A.attribute_id JOIN Users U ON R.user_id = U.user_id WHERE A.attribute_name = 'Delivery' GROUP BY U.user_id ORDER BY review_count DESC LIMIT 1;
SELECT AVG(T2.user_id) FROM (     SELECT T1.business_id, SUM(T1.closing_time - T1.opening_time) AS total_hours     FROM Business_Hours AS T1     JOIN Days AS T3 ON T1.day_id = T3.day_id     WHERE T3.day_of_week IN ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')     GROUP BY T1.business_id ) AS T4 JOIN Reviews AS T2 ON T2.business_id = T4.business_id JOIN Business AS T5 ON T5.business_id = T4.business_id WHERE T5.active = 'true' AND T4.total_hours <= 30 GROUP BY T4.business_id;
SELECT COUNT(DISTINCT business_id) FROM Business_Hours WHERE opening_time = '8AM' AND closing_time = '6PM';
SELECT business_id FROM Business_Hours WHERE opening_time = '10AM' AND day_id = 6;
SELECT BH.business_id, D.day_of_week FROM Business_Hours BH JOIN Days D ON BH.day_id = D.day_id WHERE BH.opening_time = '8AM' AND BH.closing_time = '6PM';
SELECT COUNT(business_id) FROM Business WHERE stars > 4;
SELECT C.category_name FROM Categories C JOIN Business_Categories BC ON C.category_id = BC.category_id JOIN Business_Hours BH ON BC.business_id = BH.business_id JOIN Days D ON BH.day_id = D.day_id WHERE D.day_of_week = 'Sunday'
SELECT DH.day_of_week FROM Business_Hours BH JOIN Days DH ON BH.day_id = DH.day_id JOIN Business_Categories BC ON BH.business_id = BC.business_id JOIN Categories C ON BC.category_id = C.category_id WHERE C.category_name = 'Pets' AND BH.opening_time IS NOT NULL;
SELECT BH.closing_time, D.day_of_week FROM Business_Hours BH JOIN Days D ON BH.day_id = D.day_id JOIN Business_Categories BC ON BH.business_id = BC.business_id JOIN Categories C ON BC.category_id = C.category_id WHERE C.category_name = 'Doctors';
SELECT bc.business_id, c.category_name FROM Business_Categories bc JOIN Categories c ON bc.category_id = c.category_id JOIN Business_Hours bh ON bc.business_id = bh.business_id JOIN Days d ON bh.day_id = d.day_id WHERE d.day_id BETWEEN 2 AND 7 GROUP BY bc.business_id, c.category_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT bh.business_id FROM Business_Hours bh JOIN Days d ON bh.day_id = d.day_id JOIN Business_Categories bc ON bh.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE d.day_of_week = 'Sunday' AND c.category_name = 'Arts & Entertainment';
SELECT COUNT(business_id) FROM Business WHERE stars < 5 AND business_id IN (SELECT business_id FROM Business_Categories WHERE category_id = (SELECT category_id FROM Categories WHERE category_name = 'DJs'));
SELECT bh.business_id FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id WHERE bh.opening_time = '7AM' AND bh.closing_time = '8PM' AND b.active = 'true';
SELECT COUNT(*) FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Stadiums & Arenas' AND b.stars = (SELECT MAX(stars) FROM Business);
SELECT COUNT(c.category_id) FROM Categories c JOIN Business_Categories bc ON c.category_id = bc.category_id JOIN Business b ON bc.business_id = b.business_id WHERE b.review_count < (     SELECT AVG(review_count)     FROM Business ) AND b.stars > 2;
SELECT b.business_id FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id JOIN Days d ON bh.day_id = d.day_id JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE bh.opening_time < '7AM' AND c.category_name = 'Accessories';
SELECT COUNT(*) FROM Business_Hours JOIN Business ON Business.business_id = Business_Hours.business_id WHERE Business.state = 'Arizona' AND Business.active = 'true' AND Business_Hours.closing_time > '12PM';
SELECT C.category_name FROM Business AS B JOIN Business_Categories AS BC ON B.business_id = BC.business_id JOIN Categories AS C ON BC.category_id = C.category_id WHERE B.business_id IN (     SELECT R.business_id     FROM Reviews AS R     WHERE R.user_id = '16328' );
SELECT COUNT(b.business_id) AS total_food_businesses,        (SELECT COUNT(b_inner.business_id)         FROM Business b_inner         JOIN Business_Categories bc_inner ON b_inner.business_id = bc_inner.business_id         JOIN Categories c_inner ON bc_inner.category_id = c_inner.category_id         WHERE c_inner.category_name = 'Food' AND b_inner.stars < 2        ) / COUNT(b.business_id) * 100 AS percentage_less_than_2_stars FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Food';
SELECT     (COUNT(CASE WHEN bc.category_id IN (SELECT c.category_id FROM Categories c WHERE c.category_name = 'Food') THEN b.business_id END) / COUNT(b.business_id)) * 100 as percentage FROM     Business_Hours bh JOIN     Business b ON bh.business_id = b.business_id JOIN     Business_Categories bc ON b.business_id = bc.business_id JOIN     Days d ON bh.day_id = d.day_id WHERE     bh.opening_time = '7AM' AND bh.closing_time = '8PM';
SELECT T1.review_count, COUNT(T1.business_id) FROM Business AS T1 WHERE T1.active = 'true' AND T1.city = 'Cave Creek' GROUP BY T1.review_count;
SELECT AVG(user_id) FROM Users WHERE user_yelping_since_year BETWEEN '2005' AND '2014';
SELECT     (COUNT(CASE WHEN b.review_count = 'Low' AND b.active = 'true' THEN b.business_id END) * 1.0 /      COUNT(CASE WHEN b.review_count = 'Low' AND b.active = 'false' THEN b.business_id END)) as active_to_inactive_ratio FROM     Business b;
SELECT user_id FROM Elite WHERE year_id = '2006' LIMIT 5;
SELECT category_id, category_name FROM Categories WHERE category_name LIKE 'P%' LIMIT 5;
SELECT user_id, review_stars FROM Reviews WHERE business_id = 35 AND review_length = 'medium';
SELECT ba.business_id, ba.attribute_value FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE a.attribute_name = 'payment_types_visa';
SELECT Business.business_id, Business.active FROM Business JOIN Business_Categories ON Business.business_id = Business_Categories.business_id JOIN Categories ON Business_Categories.category_id = Categories.category_id WHERE Categories.category_name = 'Diagnostic Imaging';
SELECT U.user_id, U.user_yelping_since_year FROM Users U JOIN Reviews R ON U.user_id = R.user_id WHERE R.business_id = 143 AND R.review_stars = 5;
SELECT U.user_id, U.user_yelping_since_year FROM Users_Compliments UC JOIN Users U ON UC.user_id = U.user_id JOIN Compliments C ON UC.compliment_id = C.compliment_id WHERE C.compliment_type = 'profile' AND UC.number_of_compliments = 'Uber' LIMIT 5;
SELECT R.user_id, R.business_id, R.review_length FROM Reviews R WHERE R.business_id = (     SELECT T.business_id     FROM Tips T     GROUP BY T.business_id     ORDER BY SUM(T.likes) DESC     LIMIT 1 )
SELECT U.user_id, COUNT(*) AS num_compliments_on_photos FROM (     SELECT E.user_id     FROM Elite E     JOIN Years Y ON E.year_id = Y.year_id     WHERE Y.actual_year BETWEEN 2005 AND 2014     GROUP BY E.user_id     HAVING COUNT(DISTINCT Y.actual_year) = 10 ) U JOIN Users_Compliments UC ON U.user_id = UC.user_id JOIN Compliments C ON UC.compliment_id = C.compliment_id WHERE C.compliment_type = 'photos' GROUP BY U.user_id;
SELECT     (COUNT(CASE WHEN BH.opening_time = '9AM' AND BH.closing_time = '9PM' THEN BH.business_id END) * 100.0 / COUNT(BH.business_id)) AS percentage FROM     Business_Hours BH JOIN     Days D ON BH.day_id = D.day_id WHERE     D.day_of_week = 'Sunday'
SELECT B.business_id, D.day_of_week FROM Business AS B JOIN Business_Hours AS BH ON B.business_id = BH.business_id JOIN Days AS D ON BH.day_id = D.day_id WHERE B.active = 'true' AND B.city = 'Black Canyon City' AND BH.opening_time IS NOT NULL;
SELECT U.user_id, R.review_length FROM Users U JOIN Reviews R ON U.user_id = R.user_id WHERE U.user_yelping_since_year = 2004 AND U.user_average_stars = 5;
SELECT B.business_id, B.active, B.city FROM Business B JOIN Reviews R ON B.business_id = R.business_id GROUP BY B.business_id, B.active, B.city HAVING AVG(CASE WHEN R.review_stars > 4 THEN 1 ELSE 0 END) >= 0.65;
SELECT     SUM(CASE WHEN B.city = 'Glendale' THEN 1 ELSE 0 END) - SUM(CASE WHEN B.city = 'Mesa' THEN 1 ELSE 0 END) AS diff_businesses FROM     Business B WHERE     B.active = 'true';
SELECT SUM(T.likes) FROM Tips T JOIN Users U ON T.user_id = U.user_id WHERE T.tip_length = 'Short' AND U.user_yelping_since_year = 2010;
SELECT T2.tip_length, COUNT(T1.user_id) AS count FROM Users AS T1 JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_average_stars = 3 GROUP BY T2.tip_length ORDER BY count DESC LIMIT 1;
Error: 第 4091 个样本有 2 个SQL。
SELECT B.state FROM Business B WHERE B.business_id IN (     SELECT R.business_id     FROM Reviews R     WHERE R.review_length = 'Long' );
SELECT AVG(     TIMEDIFF(        (SELECT MAX(closing_time) FROM Business_Hours WHERE business_id = b.business_id AND day_id IN (SELECT day_id FROM Days)),         (SELECT MIN(opening_time) FROM Business_Hours WHERE business_id = b.business_id AND day_id IN (SELECT day_id FROM Days))     ) ) FROM Business b WHERE b.city = 'El Mirage' AND b.state = 'AZ';
SELECT Days.day_of_week AS closing_day FROM Business JOIN Business_Hours ON Business.business_id = Business_Hours.business_id JOIN Days ON Business_Hours.day_id <> Days.day_id WHERE Business.state = 'SC' GROUP BY Business.business_id, Days.day_id HAVING COUNT(Days.day_id) = 1;
SELECT C.category_name FROM Categories C JOIN Business_Categories BC ON C.category_id = BC.category_id JOIN Business B ON BC.business_id = B.business_id WHERE B.stars = 5;
SELECT T3.state FROM Business_Attributes AS T1 JOIN Business AS T3 ON T1.business_id = T3.business_id JOIN Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_name = 'beer_and_wine' AND T1.attribute_value = 'true';
SELECT COUNT(*) FROM Users_Compliments JOIN Compliments ON Users_Compliments.compliment_id = Compliments.compliment_id WHERE Compliments.compliment_type = 'photo' AND Users_Compliments.number_of_compliments = 'Medium';
SELECT ba.business_id FROM Business_Attributes ba JOIN Attributes a ON ba.attribute_id = a.attribute_id JOIN Business b ON ba.business_id = b.business_id WHERE a.attribute_name = 'Wi-Fi' AND a.attribute_value = 'true' AND b.state = 'SC';
SELECT COUNT(*) FROM Business_Attributes JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE Attributes.attribute_name = 'ambience_romantic' AND Business_Attributes.attribute_value = 'true';
SELECT     (COUNT(CASE WHEN attribute_name = 'Good for Kids' AND attribute_value = 'true' THEN business_id END) * 100.0 / COUNT(business_id)) AS percentage FROM     Business_Attributes JOIN     Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id;
SELECT COUNT(*) FROM Business WHERE active = 'true' AND city = 'Mesa';
SELECT COUNT(*) FROM Business WHERE stars IN (1, 2);
SELECT b.business_id FROM Business b JOIN Reviews r ON b.business_id = r.business_id WHERE b.city = 'Paradise Valley' AND r.review_count = 'Low' AND r.review_stars > 3;
SELECT COUNT(*) FROM (   SELECT business_id   FROM Business_Attributes   GROUP BY business_id   HAVING COUNT(attribute_id) > 1 ) as businesses_with_multiple_attributes;
Error: 第 4105 个样本有 2 个SQL。
SELECT COUNT(*) FROM Reviews JOIN Business ON Reviews.business_id = Business.business_id WHERE Business.active = 'true' AND Reviews.review_votes_funny = 'Uber';
SELECT COUNT(*) FROM (     SELECT u.user_id     FROM Users u     JOIN Users_Compliments uc ON u.user_id = uc.user_id     WHERE u.user_fans = 0 AND uc.number_of_compliments = 'High' ) as temp;
SELECT C.compliment_type, COUNT(C.compliment_type) AS compliment_count FROM Compliments C JOIN Users_Compliments UC ON C.compliment_id = UC.compliment_id GROUP BY C.compliment_type ORDER BY compliment_count DESC LIMIT 1;
SELECT U.user_average_stars FROM (     SELECT R.user_id, COUNT(R.review_stars) * SUM(R.review_votes_funny + R.review_votes_useful + R.review_votes_cool) AS total_likes     FROM Reviews R     GROUP BY R.user_id     ORDER BY total_likes DESC     LIMIT 3 ) AS TopUsers JOIN Users U ON TopUsers.user_id = U.user_id;
SELECT c.category_name FROM Categories c JOIN Business_Categories bc ON c.category_id = bc.category_id JOIN Business b ON bc.business_id = b.business_id WHERE b.city = 'Arcadia' GROUP BY c.category_name HAVING COUNT(b.business_id) = 1;
Error: 第 4111 个样本有 2 个SQL。
SELECT COUNT(*) FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON a.attribute_id = ba.attribute_id WHERE a.attribute_name = 'music_karaoke' AND ba.attribute_value = 'true' AND b.active = 'false';
SELECT COUNT(*) FROM Business AS B JOIN Reviews AS R ON B.business_id = R.business_id WHERE B.active = 'true' AND B.city = 'Phoenix' AND R.review_length = 'Long';
SELECT COUNT(DISTINCT u.user_id) FROM Users u JOIN Reviews r ON u.user_id = r.user_id WHERE u.user_votes_cool = 'Low' AND r.review_votes_cool = 'Low' GROUP BY u.user_id HAVING COUNT(*) >= 1;
SELECT COUNT(*) FROM (   SELECT u.user_id   FROM Users u   JOIN Tips t ON u.user_id = t.user_id   WHERE t.tip_length = 'Long' AND t.likes = 2 AND u.user_fans = 'High' ) as subquery;
SELECT COUNT(*) FROM Business_Attributes JOIN Attributes ON Business_Attributes.attribute_id = Attributes.attribute_id WHERE Attributes.attribute_name = 'ambience_trendy' AND Business_Attributes.attribute_value = 'true';
SELECT COUNT(*) FROM Business_Hours JOIN Days ON Business_Hours.day_id = Days.day_id JOIN Business ON Business.business_id = Business_Hours.business_id WHERE Days.day_of_week = 'Sunday' AND Business_Hours.opening_time = '12PM' AND Business.city = 'Scottsdale';
SELECT AVG(b.stars) FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Obstetricians & Gynecologists';
SELECT     (COUNT(CASE WHEN u.user_fans = 'High' THEN u.user_id END) * 100 / COUNT(u.user_id)) AS percentage_high_fans_elite_2011 FROM     Elite e JOIN     Users u ON e.user_id = u.user_id JOIN     Years y ON e.year_id = y.year_id WHERE     y.actual_year = 2011;
SELECT COUNT(*) FROM Business WHERE city = 'Surprise';
SELECT business_id FROM Business WHERE city = 'Tempe' AND review_count = 'High';
SELECT COUNT(*) FROM Business WHERE active = 'true' AND state = 'AZ' AND review_count = 'Medium';
SELECT business_id FROM Business WHERE stars BETWEEN 3 AND 5 AND city = 'Chandler';
SELECT COUNT(*) FROM Users WHERE user_yelping_since_year BETWEEN 2009 AND 2011 AND user_fans = 'Low';
SELECT review_length FROM Reviews WHERE user_id = 11021 AND business_id = 3;
SELECT Attributes.attribute_name FROM Attributes JOIN Business_Attributes ON Attributes.attribute_id = Business_Attributes.attribute_id JOIN Business ON Business.business_id = Business_Attributes.business_id WHERE Business.city = 'Tempe' AND Business.review_count = 'Medium';
SELECT COUNT(*) FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Food' AND b.stars < 3;
SELECT b.business_id, b.stars FROM Business b JOIN Business_Categories bc ON b.business_id = bc.business_id JOIN Categories c ON bc.category_id = c.category_id WHERE b.active = 'true' AND c.category_name = 'Food';
SELECT C.category_name, A.attribute_name FROM Categories C JOIN Business_Categories BC ON C.category_id = BC.category_id JOIN Business B ON BC.business_id = B.business_id JOIN Business_Attributes BA ON BA.business_id = B.business_id JOIN Attributes A ON BA.attribute_id = A.attribute_id WHERE B.stars = (SELECT MAX(stars) FROM Business) GROUP BY C.category_name, A.attribute_name;
SELECT C.category_name FROM Categories C JOIN Business_Categories BC ON C.category_id = BC.category_id JOIN (     SELECT B.business_id, MAX(B.stars) as max_stars     FROM Business B     JOIN Reviews R ON B.business_id = R.business_id     WHERE R.review_length = 'Short' AND B.business_id BETWEEN 7 AND 14     GROUP BY B.business_id ) AS BS ON BC.business_id = BS.business_id WHERE BS.max_stars = (     SELECT MAX(max_stars)     FROM (         SELECT MAX(stars) as max_stars         FROM Business         WHERE business_id BETWEEN 7 AND 14         GROUP BY business_id     ) AS tmp );
SELECT COUNT(*) FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id JOIN Attributes a ON ba.attribute_id = a.attribute_id WHERE b.active = 'true' AND a.attribute_name = 'BYOB' AND b.review_count = 'High';
SELECT bh.opening_time, bh.closing_time FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id WHERE b.city = 'Glendale' AND b.stars = (SELECT MAX(stars) FROM Business WHERE city = 'Glendale')
SELECT C.category_name, A.attribute_name FROM Business B JOIN Business_Categories BC ON B.business_id = BC.business_id JOIN Categories C ON BC.category_id = C.category_id JOIN Business_Attributes BA ON B.business_id = BA.business_id JOIN Attributes A ON BA.attribute_id = A.attribute_id WHERE B.active = 'true' AND B.city = 'Goodyear' AND B.state = 'AZ' AND B.review_count = 'High';
SELECT C.category_name FROM Business B JOIN Business_Categories BC ON B.business_id = BC.business_id JOIN Categories C ON BC.category_id = C.category_id WHERE B.active = 'true' AND B.city = 'Glendale' AND B.state = 'AZ';
SELECT B.city FROM Business_Hours BH JOIN Business B ON BH.business_id = B.business_id JOIN Days D ON BH.day_id = D.day_id WHERE D.day_of_week = 'Wednesday' AND BH.opening_time = '7AM' AND BH.closing_time = '7PM';
SELECT ba.attribute_value FROM Business b JOIN Business_Attributes ba ON b.business_id = ba.business_id WHERE b.active = 'true' AND b.review_count = 'Low' AND b.stars = 3 AND b.city = 'Goodyear' AND b.state = 'AZ';
SELECT bh.opening_time FROM Business_Hours bh JOIN Business b ON bh.business_id = b.business_id WHERE b.active = 'true' AND b.city = 'Glendale' AND b.review_count = 'Medium';
SELECT     COUNT(CASE WHEN b.stars > 3 THEN b.business_id END) * 100.0 / COUNT(b.business_id) AS percentage FROM     Business b JOIN     Business_Categories bc ON b.business_id = bc.business_id JOIN     Categories c ON bc.category_id = c.category_id WHERE     c.category_name = 'Food'
SELECT BH.closing_time, D.day_of_week FROM Business AS B JOIN Business_Hours AS BH ON B.business_id = BH.business_id JOIN Days AS D ON BH.day_id = D.day_id WHERE B.active = 'true' AND B.city = 'Goodyear' AND B.stars > (SELECT AVG(stars) * 0.8 FROM Business)
SELECT (COUNT(p.paper_id) FILTER (WHERE p.class_label = 'Agents') * 100.0 / COUNT(p.paper_id)) AS percentage FROM paper p JOIN cites c ON p.paper_id = c.citing_paper_id;
SELECT content.word_cited_id, COUNT(DISTINCT paper.paper_id) as paper_count FROM content JOIN paper ON content.paper_id = paper.paper_id JOIN cites ON paper.paper_id = cites.citing_paper_id GROUP BY content.word_cited_id ORDER BY paper_count DESC LIMIT 1;
SELECT COUNT(*) FROM content JOIN paper ON content.paper_id = paper.paper_id WHERE paper.class_label = 'AI';
SELECT p.paper_id, p.class_label FROM paper p JOIN content c1 ON p.paper_id = c1.paper_id JOIN content c2 ON c1.word_cited_id = c2.word_cited_id WHERE c2.paper_id = 315017 AND p.paper_id != 315017;
SELECT c.word_cited_id, COUNT(c.word_cited_id) as frequency FROM cites AS ci JOIN paper AS p ON ci.citing_paper_id = p.paper_id JOIN content AS c ON ci.cited_paper_id = c.paper_id WHERE p.class_label = 'DB' GROUP BY c.word_cited_id ORDER BY frequency DESC LIMIT 1;
SELECT (COUNT(c1.word_cited_id) FILTER (WHERE p.class_label = 'Agents')) * 100.0 / COUNT(c1.word_cited_id) FROM content c1 JOIN paper p ON c1.paper_id = p.paper_id;
SELECT p.paper_id, p.class_label FROM paper p WHERE p.paper_id = (     SELECT c.citing_paper_id     FROM cites c     JOIN content con ON c.cited_paper_id = con.paper_id     GROUP BY c.citing_paper_id     ORDER BY SUM(con.word_cited_id) DESC     LIMIT 1 )
Error: 第 4147 个样本有 3 个SQL。
SELECT content.word_cited_id FROM content JOIN paper ON content.paper_id = paper.paper_id WHERE paper.class_label = 'AI';
SELECT p.class_label, COUNT(c.word_cited_id) FROM paper p JOIN content c ON p.paper_id = c.paper_id WHERE p.paper_id = 'chakrabarti01integrating';
SELECT p.paper_id, p.class_label FROM paper p JOIN content c ON p.paper_id = c.paper_id GROUP BY p.paper_id, p.class_label HAVING COUNT(c.word_cited_id) > 20;
SELECT DISTINCT c1.word_cited_id FROM content c1 JOIN paper p1 ON c1.paper_id = p1.paper_id WHERE p1.class_label = 'AI' AND c1.word_cited_id IN (     SELECT DISTINCT c2.word_cited_id     FROM content c2     JOIN paper p2 ON c2.paper_id = p2.paper_id     WHERE p2.class_label = 'IR' );
Error: 第 4152 个样本有 2 个SQL。
Error: 第 4153 个样本有 2 个SQL。
SELECT c.word_cited_id FROM cites AS ci JOIN paper AS p ON ci.cited_paper_id = p.paper_id JOIN content AS c ON p.paper_id = c.paper_id WHERE ci.citing_paper_id = 'sima01computational';
SELECT COUNT(*) FROM cites WHERE citing_paper_id = 'schmidt99advanced' AND cited_paper_id IN (     SELECT paper_id     FROM content     WHERE word_cited_id = 3555 );
SELECT p.class_label FROM paper p JOIN cites c ON p.paper_id = c.citing_paper_id JOIN content ct ON c.cited_paper_id = ct.paper_id WHERE ct.word_cited_id = 1163;
SELECT p.paper_id, COUNT(c.word_cited_id) as num_words_cited FROM paper p JOIN cites ci ON p.paper_id = ci.cited_paper_id JOIN content c ON p.paper_id = c.paper_id WHERE p.class_label = 'DB' GROUP BY p.paper_id ORDER BY num_words_cited DESC LIMIT 1;
SELECT COUNT(*) FROM cites JOIN paper ON paper.paper_id = cites.cited_paper_id WHERE paper.class_label = 'ML' AND cites.citing_paper_id = 'butz01algorithmic';
SELECT p.name FROM Person p JOIN Credit c ON p.name = c.person WHERE c.category = 'crew' AND c.episode_id IN (     SELECT e.episode_id     FROM Episode e     WHERE e.season = '20' ) ORDER BY p.birthdate LIMIT 1;
SELECT nickname FROM Person WHERE name = 'Dan Castellaneta';
SELECT COUNT(*) FROM Person WHERE birth_region = 'New York' AND strftime('%Y', birthdate) > '1970';
SELECT T2.birth_country FROM Award AS T1 JOIN Person AS T2 ON T1.person = T2.name WHERE T1.award = 'Outstanding Voice-Over Performance' AND T1.year = 2009 AND T1.result = 'Winner'
SELECT T1.award FROM Award AS T1 JOIN Person AS T2 ON T1.person = T2.name WHERE T2.nickname = 'Doofus' AND T1.result = 'Winner';
SELECT COUNT(*) FROM Person p JOIN Award a ON p.name = a.person WHERE p.birth_country = 'USA' AND a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND a.year = 2009 AND a.result = 'Nominee';
SELECT ca.character FROM Character_Award ca JOIN Award a ON ca.award_id = a.award_id WHERE a.award = 'Outstanding Voice-Over Performance' AND a.year = 2009 AND a.result = 'Winner';
SELECT T2.keyword FROM Episode AS T1 JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Lost Verizon'
SELECT COUNT(*) FROM Keyword WHERE episode_id IN (     SELECT episode_id     FROM Episode     WHERE air_date = '2008-10-19' );
SELECT E.rating FROM Episode E JOIN Award A ON E.episode_id = A.episode_id WHERE A.person = 'Dan Castellaneta' AND A.year = 2009 AND A.result = 'Winner' AND A.award = 'Outstanding Voice-Over Performance';
SELECT COUNT(*) FROM Vote JOIN Episode ON Vote.episode_id = Episode.episode_id WHERE Episode.title = 'Lost Verizon' AND Vote.stars = 7;
SELECT stars FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'Lost Verizon') ORDER BY votes DESC LIMIT 1;
SELECT e.title FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 10 AND v.votes > 200;
SELECT COUNT(*) FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE e.air_date LIKE '2009%' AND v.stars = 10 AND v.percent > 15;
SELECT E.title FROM Episode E JOIN Vote V ON E.episode_id = V.episode_id WHERE V.stars = 7 GROUP BY E.title ORDER BY SUM(V.votes) DESC LIMIT 1;
SELECT SUM(T2.stars * T2.votes) / SUM(T2.votes) AS avg_stars FROM Episode AS T1 JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Lost Verizon'
SELECT     (COUNT(CASE WHEN A.award_category = 'Primetime Emmy' THEN E.episode_id END) * 100.0 / COUNT(E.episode_id)) AS Percentage FROM     Episode E LEFT JOIN     Award A ON E.episode_id = A.episode_id WHERE     E.rating > 7 AND A.result = 'Nominee'
SELECT E.title FROM Episode E JOIN Credit C ON E.episode_id = C.episode_id WHERE C.person = 'Pamela Hayden' AND C.role = 'Ruthie';
SELECT c.role, e.episode, e.number_in_series FROM Credit c JOIN Episode e ON c.episode_id = e.episode_id WHERE c.person = 'Matt Groening' AND e.title = 'In the Name of the Grandfather';
SELECT title, summary FROM Episode JOIN Keyword ON Episode.episode_id = Keyword.episode_id WHERE Keyword.keyword = 'eviction';
SELECT AVG(V.stars) FROM Vote V JOIN Episode E ON V.episode_id = E.episode_id WHERE E.title = 'Wedding for Disaster';
SELECT E.title, K.keyword FROM Episode E JOIN Keyword K ON E.episode_id = K.episode_id WHERE E.air_date = '2009-03-22';
SELECT T2.birth_name FROM Credit AS T1 JOIN Person AS T2 ON T1.person = T2.name WHERE T1.role = 'Helen Lovejoy';
SELECT E.title, P.name, C.role,        (CAST(COUNT(CASE WHEN C.credited = '' THEN 1 END) AS REAL) / COUNT(CASE WHEN C.credited = 'true' THEN 1 END)) * 100 as Uncredited_Credited_Ratio_Percentage FROM Episode E JOIN Credit C ON E.episode_id = C.episode_id JOIN Person P ON C.person = P.name JOIN Award A ON E.episode_id = A.episode_id WHERE A.award_category = 'Jupiter Award' AND A.award = 'Best International TV Series' AND A.year = 2017 AND A.result = 'Winner' GROUP BY E.title, P.name, C.role HAVING COUNT(C.credited = '') > 0;
SELECT COUNT(*) FROM Episode WHERE votes > 1000;
SELECT COUNT(*) FROM Person WHERE birth_place = "New York" AND birth_region = "USA";
SELECT Award.award, Award.award_category FROM Award JOIN Person ON Award.person = Person.name WHERE Person.name = 'Marc Wilmore';
SELECT name, nickname FROM Person WHERE nickname IS NOT NULL;
SELECT AVG(height_meters) as average_height FROM Person;
SELECT (MAX(v.votes) - MIN(v.votes)) AS vote_difference FROM Vote v;
SELECT T2.character FROM Award AS T1 JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.year = 2009 AND T1.award = 'Outstanding Voice-Over Performance'
SELECT COUNT(*) FROM Person p JOIN Award a ON p.name = a.person WHERE a.result = 'Nominee' AND a.award = 'Comedy Series' AND a.year = 2009 AND p.birth_place = 'California';
SELECT E.title FROM Episode E JOIN Award A ON E.episode_id = A.episode_id WHERE A.result = 'Winner' AND A.year = 2017 AND A.award = 'Best International TV Series';
SELECT T2.name FROM Episode AS T1 JOIN Credit AS T3 ON T1.episode_id = T3.episode_id JOIN Person AS T2 ON T2.name = T3.person WHERE T1.title = 'How the Test Was Won' AND T3.credited = 'false' EXCEPT SELECT T2.name FROM Episode AS T1 JOIN Credit AS T3 ON T1.episode_id = T3.episode_id JOIN Person AS T2 ON T2.name = T3.person WHERE T1.title = 'How the Test Was Won';
SELECT e.title FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id WHERE k.keyword = 'riot' INTERSECT SELECT e.title FROM Episode e JOIN Keyword k ON e.episode_id = k.episode_id WHERE k.keyword = 'cake';
SELECT E.title FROM Episode E JOIN Vote V ON E.episode_id = V.episode_id WHERE V.stars = 10 GROUP BY E.title ORDER BY SUM(V.votes) DESC LIMIT 1;
SELECT DISTINCT p.name FROM Person p JOIN Credit c ON p.name = c.person JOIN Episode e ON c.episode_id = e.episode_id WHERE e.season = '20' AND strftime('%m', e.air_date) BETWEEN '10' AND '11';
SELECT T2.name FROM Episode AS T1 JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Treehouse of Horror XIX' AND T2.role = 'director'
SELECT COUNT(*) FROM Credit WHERE episode_id IN (SELECT episode_id FROM Episode WHERE episode = 5 AND season = 20);
SELECT T2.keyword FROM Episode AS T1 JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please'
SELECT     COUNT(T1.episode_id) AS Num_Episodes,     (COUNT(T3.award_id) / COUNT(T1.episode_id)) * 100 AS Percentage FROM     Episode T1 JOIN     Vote T2 ON T1.episode_id = T2.episode_id JOIN     Award T3 ON T1.episode_id = T3.episode_id WHERE     T2.votes > 950 AND     T3.year = 2009 AND     T3.award = 'Outstanding Voice-Over Performance' AND     T3.result = 'Nominee';
SELECT     CAST(SUM(CASE WHEN E.title = 'No Loan Again, Naturally' AND V.stars = 5 THEN V.votes ELSE 0 END) AS REAL) /     SUM(CASE WHEN E.title = 'Coming to Homerica' AND V.stars = 5 THEN V.votes ELSE 0 END) FROM Episode E JOIN Vote V ON E.episode_id = V.episode_id;
SELECT COUNT(*) FROM Award WHERE person = 'Ian Maxtone-Graham' AND result = 'Nominee' AND organization = 'Writers Guild of America, USA';
SELECT P.name FROM Person P JOIN Award A ON P.name = A.person WHERE A.result = 'Nominee' GROUP BY P.name ORDER BY COUNT(P.name) DESC LIMIT 1;
SELECT title FROM Episode ORDER BY rating LIMIT 1;
SELECT MIN(A.year) FROM Award A WHERE A.award = 'Favorite Animated Comedy' AND A.award_category = 'People's Choice Award' AND A.result = 'Winner';
SELECT COUNT(*) FROM Episode WHERE episode_id NOT IN (SELECT episode_id FROM Credit WHERE person = 'Dell Hake' AND credited = '')
SELECT T2.name, MIN(T1.year) - SUBSTR(T2.birthdate, 1, 4) AS Age_at_the_time FROM Award AS T1 JOIN Person AS T2 ON T1.person = T2.name WHERE T1.award = 'Outstanding Voice-Over Performance' AND T1.organization = 'Primetime Emmy Awards' AND T1.result = 'Winner' GROUP BY T2.name ORDER BY MIN(T1.year) ASC LIMIT 1;
SELECT CA.character FROM Character_Award CA JOIN Award A ON CA.award_id = A.award_id WHERE A.person = 'Dan Castellaneta' AND A.result = 'Winner' AND A.award = 'Outstanding Voice-Over Performance' AND A.organization = 'Primetime Emmy Awards' AND A.year = 2009
SELECT COUNT(*) FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE SUBSTR(e.air_date, 6, 2) = '04' AND SUBSTR(e.air_date, 1, 4) = '2009' AND a.result = 'winner';
SELECT T2.birth_place FROM `Award` AS T1 JOIN `Person` AS T2 ON T1.person = T2.name WHERE T1.award = 'Best Voice-Over Performance' AND T1.organization = 'Online Film & Television Association' AND T1.year = 2009 AND T1.result = 'Winner'
SELECT SUM(Vote.votes) FROM Episode JOIN Vote ON Episode.episode_id = Vote.episode_id WHERE Vote.stars = 10 AND Episode.rating IN (     SELECT rating     FROM Episode     ORDER BY rating DESC     LIMIT 4 );
Error: 第 4211 个样本有 2 个SQL。
SELECT COUNT(*) FROM Award JOIN Person ON Award.person = Person.name WHERE result = 'Winner' AND birth_country = 'USA';
SELECT COUNT(*) FROM Credit JOIN Person ON Credit.person = Person.name WHERE Credit.episode_id = 'S20-E11' AND Person.nickname = 'Doofus' AND Credit.credited = 'true';
SELECT P.name FROM Person P JOIN Award A ON P.name = A.person WHERE A.result = 'Winner' ORDER BY A.year LIMIT 1;
SELECT percent FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'Sex, Pies and Idiot Scrapes') AND stars = 9;
SELECT Award.award, Person.name FROM Award JOIN Person ON Award.person = Person.name WHERE Award.result = 'Winner' AND Award.year = 2009;
SELECT name, birthdate FROM Person WHERE birth_place = 'Los Angeles' AND height_meters >= 1.8;
SELECT episode, title, rating FROM Episode WHERE SUBSTR(air_date, 6, 2) = '10' AND SUBSTR(air_date, 1, 4) = '2008';
SELECT Award.award_id, Award.award, Award.result FROM Award JOIN Character_Award ON Award.award_id = Character_Award.award_id WHERE Character_Award.character = 'Homer simpson 20' AND Award.result = 'Winner';
SELECT A.award, A.result, C.category, C.credited FROM Award A JOIN Credit C ON A.episode_id = C.episode_id WHERE A.person = 'Billy Kimball' AND C.person = 'Billy Kimball';
SELECT Person.name, Award.award, Award.organization, Award.result, Credit.credited FROM Person JOIN Award ON Person.name = Award.person JOIN Credit ON Person.name = Credit.person WHERE Award.episode_id = 'S20-E13' AND Credit.role = 'assistant director' AND Credit.episode_id = 'S20-E13';
SELECT p.birth_country, p.height_meters, p.name FROM Person p WHERE NOT EXISTS (     SELECT 1     FROM Credit c     WHERE c.category = 'Casting Department' AND c.person = p.name AND c.credited = '' );
SELECT T3.person, T5.keyword, T1.episode_id FROM Episode AS T1 JOIN Credit AS T2 ON T1.episode_id = T2.episode_id JOIN Award AS T3 ON T3.episode_id = T1.episode_id JOIN Keyword AS T5 ON T5.episode_id = T1.episode_id WHERE T1.title = 'The Good, the Sad and the Drugly' AND T3.result = 'Nominee';
SELECT votes, percent FROM Vote WHERE episode_id IN (     SELECT episode_id FROM Keyword     WHERE keyword = 'arab stereotype' ) AND stars = 10;
SELECT e.title, e.air_date, e.rating FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.organization = 'Jupiter Award' AND a.result = 'Winner';
SELECT e.episode_id, e.title, k1.keyword, k2.keyword, k3.keyword FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id JOIN Keyword k1 ON e.episode_id = k1.episode_id JOIN Keyword k2 ON e.episode_id = k2.episode_id JOIN Keyword k3 ON e.episode_id = k3.episode_id WHERE v.stars = 1 GROUP BY e.episode_id, e.title, k1.keyword, k2.keyword, k3.keyword ORDER BY SUM(v.votes) DESC LIMIT 1;
SELECT E.title, E.episode_image, A.award, P.name FROM Episode E JOIN Award A ON E.episode_id = A.episode_id JOIN Person P ON A.person = P.name WHERE E.rating BETWEEN 7 AND 10 AND SUBSTR(E.air_date, 1, 4) = '2008' AND A.result = 'Nominee';
SELECT Award.award, Person.name, Character_Award.character FROM Award JOIN Person ON Award.person = Person.name JOIN Character_Award ON Award.award_id = Character_Award.award_id WHERE Award.award_id = 326;
SELECT T1.name, T1.birth_country, T3.role, (2022 - SUBSTR(T1.birthdate, 1, 4)) AS age FROM Person AS T1 JOIN Credit AS T3 ON T1.name = T3.person WHERE T1.birthdate = (SELECT MIN(birthdate) FROM Person)
SELECT COUNT(Credit.credited) AS num_credits, Credit.category, Credit.role, Person.birth_place FROM Credit JOIN Person ON Credit.person = Person.name WHERE Person.birth_country = 'North Korea' GROUP BY Credit.category, Credit.role, Person.birth_place;
SELECT     A.person AS Winner_Name,     A.award AS Award_Name,     E.title AS Episode_Title,     C.role AS Role_in_Episode FROM     Award A JOIN     Episode E ON A.episode_id = E.episode_id JOIN     Credit C ON E.episode_id = C.episode_id AND A.person = C.person WHERE     A.year = 2010 AND A.result = 'winner' ; WITH Award_Winners_2010 AS (     SELECT         COUNT(*) AS Total_Awards,         SUM(CASE WHEN result = 'winner' THEN 1 ELSE 0 END) AS Winners     FROM         Award     WHERE         year = 2010 ) SELECT     Winners / CAST(Total_Awards AS REAL) * 100 AS Winning_Rate FROM     Award_Winners_2010 ;
SELECT E.title FROM Episode E JOIN Vote V ON E.episode_id = V.episode_id WHERE V.stars = (SELECT MAX(stars) FROM Vote) AND V.votes = (SELECT MAX(votes) FROM Vote) GROUP BY E.title;
SELECT COUNT(*) FROM Award WHERE result = 'Winner' AND season = 20;
SELECT E.title FROM Episode E JOIN Award A ON E.episode_id = A.episode_id WHERE A.result = 'Nominee' AND A.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND A.organization = 'Primetime Emmy Awards' GROUP BY E.episode_id HAVING COUNT(E.episode_id) = 21;
SELECT AVG(V.stars), E.summary FROM Vote V JOIN Episode E ON V.episode_id = E.episode_id WHERE E.episode_id = 'S20-E12';
SELECT Person.name FROM Person JOIN Award ON Person.name = Award.person JOIN Character_Award ON Award.award_id = Character_Award.award_id WHERE Award.organization = 'Primetime Emmy Awards' AND Award.award = 'Outstanding Voice-Over Performance' AND Award.result = 'Winner' AND Character_Award.character = 'Homer simpson 20';
SELECT p.birth_name, c.role FROM Person p JOIN Credit c ON p.name = c.person WHERE p.name = 'Al Jean' AND c.episode_id IN (     SELECT e.episode_id     FROM Episode e     WHERE e.season = 20 );
SELECT COUNT(*) FROM Award WHERE person = 'Billy Kimball' AND year = 2010 AND result = 'Nominee';
SELECT T2.keyword FROM Episode AS T1 JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please'
SELECT T1.award, T1.award_category FROM Award AS T1 WHERE T1.result = 'Winner' ORDER BY T1.year DESC LIMIT 1;
SELECT AVG(CASE WHEN T1.result = 'winner' THEN 1 ELSE 0 END) FROM Award AS T1 WHERE T1.season = 20;
SELECT COUNT(*) FROM Episode WHERE air_date BETWEEN '2008-10-01' AND '2008-11-30';
SELECT title, rating FROM Episode WHERE YEAR(air_date) = 2009 ORDER BY rating LIMIT 1;
SELECT C.category, C.role FROM Credit AS C JOIN Person AS P ON C.person = P.name WHERE P.name = 'Bonita Pietila';
SELECT p.name FROM Person p JOIN Credit c ON p.name = c.person WHERE c.episode_id IN (     SELECT e.episode_id     FROM Episode e     WHERE e.season = 20 ) AND p.birthdate = '1957-10-29' AND p.birth_place = 'Chicago' AND p.birth_region = 'Illinois';
SELECT Person.name FROM Person JOIN Credit ON Credit.person = Person.name WHERE Credit.role = 'producer' AND Credit.episode_id IN (     SELECT Episode.episode_id     FROM Episode     WHERE Episode.season = 20 );
SELECT T2.name, 2009 - YEAR(T2.birthdate) AS age FROM Award AS T1 JOIN Person AS T2 ON T1.person = T2.name WHERE T1.organization = 'Primetime Emmy Awards' AND T1.result = 'Nominee' AND T1.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND T1.year = 2009 AND T2.role = 'composer';
SELECT E.title FROM Episode E JOIN Award A ON E.episode_id = A.episode_id WHERE E.season = 20 GROUP BY E.episode_id ORDER BY COUNT(A.award_id) DESC LIMIT 1;
SELECT birth_place FROM Person WHERE name = 'Dan Castellaneta';
SELECT COUNT(*) FROM Person WHERE birth_country = 'USA';
SELECT name FROM Person WHERE birthdate < '1970-01-01';
SELECT name FROM Person WHERE birth_place = 'California' AND birth_country = 'USA' AND birthdate BETWEEN '1958-01-01' AND '1969-12-31'
SELECT episode_id FROM Vote WHERE stars = 5 AND votes > 100;
SELECT T2.keyword FROM Episode AS T1 JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Double, Double, Boy in Trouble'
SELECT title FROM Episode WHERE episode BETWEEN 10 AND 20 AND votes > 200;
SELECT T1.keyword FROM Keyword AS T1 JOIN Episode AS T2 ON T1.episode_id = T2.episode_id JOIN Award AS T3 ON T2.episode_id = T3.episode_id WHERE T3.award_category = 'Primetime Emmy'
SELECT p.name FROM Person p JOIN Award a ON p.name = a.person WHERE a.award_category = 'Primetime Emmy' ORDER BY a.votes DESC LIMIT 1;
SELECT e.episode_id FROM Episode e JOIN Award a ON e.episode_id = a.episode_id JOIN Vote v ON e.episode_id = v.episode_id WHERE a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND v.stars = 10;
SELECT T3.name FROM Award AS T1 JOIN Episode AS T2 ON T1.episode_id = T2.episode_id JOIN Credit AS T3 ON T2.episode_id = T3.episode_id WHERE T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.title = 'No Loan Again, Naturally' AND T3.role = 'director';
SELECT DISTINCT p.name FROM Person p JOIN Credit c ON p.name = c.person JOIN Episode e ON c.episode_id = e.episode_id JOIN Vote v ON e.episode_id = v.episode_id WHERE c.category = 'Writing' AND c.credited = 'true' AND c.role = 'writer' AND v.stars > 5 AND YEAR(e.air_date) = 2009;
SELECT COUNT(DISTINCT p.name) FROM Person p JOIN Award a ON p.name = a.person WHERE a.award_category = 'WGA Award (TV)' AND p.birth_country = 'USA' AND a.year BETWEEN 2009 AND 2010;
SELECT E.title FROM Episode E JOIN Award A ON E.episode_id = A.episode_id JOIN Vote V ON E.episode_id = V.episode_id WHERE A.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND A.role = 'composer' AND V.votes > 200;
SELECT e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.person = 'Al Jean' AND a.award_category = 'Primetime Emmy' AND a.year = 2009;
Error: 第 4264 个样本有 2 个SQL。
SELECT A.award FROM Award A JOIN Character_Award C ON A.award_id = C.award_id WHERE C.character = 'Homer simpson 20' AND A.year = 2009;
WITH Award_Winning_Episodes AS (     SELECT e.episode_id     FROM Episode e     JOIN Award a ON e.episode_id = a.episode_id     WHERE a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'     AND a.result = 'Winner' ), Votes_Less_Than_100 AS (     SELECT episode_id     FROM Vote     WHERE votes < 100 ), Episodes_With_Less_100_Votes AS (     SELECT aep.episode_id     FROM Award_Winning_Episodes aep     JOIN Votes_Less_Than_100 vlt100 ON aep.episode_id = vlt100.episode_id ) SELECT     COUNT(DISTINCT eep.episode_id) AS Episodes_With_Award_and_Less_100_Votes,     (COUNT(DISTINCT eep.episode_id) / (SELECT COUNT(*) FROM Episode) * 100) AS Percentage_of_Episodes_with_Less_100_Votes FROM Episodes_With_Less_100_Votes eep;
SELECT     COUNT(T2.person) AS American_Recipients,     (COUNT(T2.person) * 100.0 / (SELECT COUNT(*) FROM Award WHERE award_category = 'Primetime Emmy')) AS Percentage_of_Americans FROM     Award AS T1 JOIN     Person AS T2 ON T1.person = T2.name WHERE     T1.award_category = 'Primetime Emmy' AND T2.birth_country = 'USA';
SELECT DISTINCT p.name FROM Person p JOIN Award a ON p.name = a.person WHERE a.award = 'Outstanding Voice-Over Performance' AND a.season = 20 LIMIT 2;
SELECT COUNT(*) FROM Award WHERE result = 'Nominee' AND award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND role = 'executive producer';
SELECT name FROM Person WHERE YEAR(birthdate) = 1962 AND birth_region = 'California' AND name IN (SELECT DISTINCT person FROM Credit WHERE category = 'Crew');
SELECT COUNT(*) FROM Person WHERE height_meters > 1.70 AND birth_country = 'Canada';
SELECT COUNT(DISTINCT Person.name) FROM Person JOIN Award ON Award.person = Person.name WHERE Award.award = 'Animation' AND Award.result = 'Nominee';
SELECT title FROM Episode WHERE rating > 7 AND rating <= 10 LIMIT 3;
SELECT e.title, e.votes FROM Episode e ORDER BY e.votes DESC LIMIT 5;
SELECT e.title, v.votes FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 1 GROUP BY e.title, v.votes ORDER BY v.votes DESC LIMIT 3;
SELECT ca.character FROM Character_Award ca JOIN Award a ON ca.award_id = a.award_id WHERE a.person = 'Dan Castellaneta' AND a.award LIKE '%Voice-Over%';
SELECT e.title, e.episode_id, v.votes FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE e.air_date LIKE '2008%' AND v.stars = 10 GROUP BY e.title, e.episode_id, v.votes HAVING v.votes = (SELECT MAX(votes) FROM Vote WHERE stars = 10);
SELECT T2.keyword FROM Episode AS T1 JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please'
SELECT e1.title, e2.title FROM Episode e1 JOIN Keyword k1 ON e1.episode_id = k1.episode_id JOIN Episode e2 JOIN Keyword k2 ON e2.episode_id = k2.episode_id WHERE k1.keyword = '1930s to 2020s' AND k2.keyword = '1930s to 2020s' AND e1.episode_id != e2.episode_id LIMIT 2;
SELECT e.title FROM Episode e JOIN Award a ON e.episode_id = a.episode_id WHERE a.person = 'Joel H. Cohen' AND a.year = 2010;
SELECT votes FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'Lisa the Drama Queen') AND stars = 5;
SELECT COUNT(v.votes) FROM Vote v JOIN Keyword k ON v.episode_id = k.episode_id WHERE v.stars = 10 AND k.keyword = 'reference to the fantastic four';
SELECT     (SELECT votes FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'The Burns and the Bees') AND stars = 1) -     (SELECT votes FROM Vote WHERE episode_id = (SELECT episode_id FROM Episode WHERE title = 'The Burns and the Bees') AND stars = 10)
SELECT T1.keyword FROM Keyword AS T1 JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.votes = (SELECT MIN(votes) FROM Episode)
SELECT e.title FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 2 AND v.votes > 20 AND e.rating BETWEEN 5 AND 7 GROUP BY e.title HAVING COUNT(v.episode_id) > 20;
SELECT e.title, e.votes FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id GROUP BY e.title, e.votes ORDER BY e.votes DESC LIMIT 1;
SELECT name FROM Person WHERE birthdate = (SELECT MIN(birthdate) FROM Person);
SELECT e.title FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id WHERE c.person = 'Oscar Cervantes' AND c.credited = 'true';
SELECT DISTINCT C.role FROM Credit AS C JOIN Person AS P ON C.person = P.name WHERE P.birth_country != 'USA';
SELECT COUNT(*) FROM Vote WHERE episode_id = (     SELECT episode_id     FROM Episode     WHERE rating = (         SELECT MIN(rating)         FROM Episode         WHERE season = (             SELECT season             FROM Episode             WHERE episode_id = Vote.episode_id         )     ) ) AND stars = 1;
SELECT ca.character FROM Character_Award ca JOIN Award a ON ca.award_id = a.award_id WHERE a.award = 'Outstanding Voice-Over Performance' AND a.result = 'Winner';
SELECT E.summary FROM Episode E JOIN Credit C ON E.episode_id = C.episode_id WHERE C.person = 'Emily Blunt';
SELECT role FROM Person JOIN Credit ON Person.name = Credit.person WHERE nickname = 'The Tiny Canadian';
SELECT e.title, MAX(v.percent) as max_percent FROM Episode e JOIN Award a ON e.episode_id = a.episode_id JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 5 GROUP BY e.title ORDER BY max_percent DESC LIMIT 1;
SELECT T2.person FROM Credit AS T1 JOIN Person AS T2 ON T1.person = T2.name WHERE T1.category = 'Cast' AND T1.credited = 'true' AND Episode.title = 'In the Name of the Grandfather';
SELECT DISTINCT T2.birthdate FROM Award AS T1 JOIN Person AS T2 ON T1.person = T2.name WHERE T1.result = 'Winner';
SELECT T3.person FROM Episode AS T1 JOIN Credit AS T2 ON T1.episode_id = T2.episode_id JOIN Person AS T3 ON T2.person = T3.name WHERE T2.role = 'Writer' AND T2.category = 'Writing' ORDER BY (SELECT votes FROM Vote WHERE episode_id = T1.episode_id AND stars = 10) DESC LIMIT 1;
SELECT A.award FROM Award AS A JOIN Episode AS E ON A.episode_id = E.episode_id WHERE E.air_date = '2008-11-30' AND A.result = 'Winner';
SELECT * FROM Credit WHERE category = 'Music Department';
SELECT T2.keyword FROM simpson_episodes.Keyword AS T2 JOIN simpson_episodes.Episode AS T1 ON T1.episode_id = T2.episode_id WHERE T1.number_in_series = 426
SELECT E.title FROM Episode E JOIN Vote V ON E.episode_id = V.episode_id WHERE V.stars = 7 GROUP BY E.episode_id HAVING SUM(V.votes) > (     SELECT AVG(season_avg)     FROM (         SELECT E.season, AVG(V.votes) as season_avg         FROM Episode E         JOIN Vote V ON E.episode_id = V.episode_id         WHERE V.stars = 7         GROUP BY E.season     ) AS subquery )
Error: 第 4302 个样本有 2 个SQL。
SELECT name FROM Person WHERE nickname IS NOT NULL;
SELECT birth_country FROM Person WHERE height_meters = (SELECT MAX(height_meters) FROM Person)
SELECT AVG(height_meters) FROM Person WHERE birth_country = 'USA';
SELECT (COUNT(CASE WHEN birthdate > 1970 AND birth_region = 'California' THEN name END) * 100.0 / COUNT(name)) AS percentage FROM Person;
SELECT COUNT(*) FROM Person WHERE birth_region != 'Connecticut' AND birth_country != 'USA';
SELECT title FROM Episode WHERE episode_id IN ('S20-E1', 'S20-E2', 'S20-E3');
SELECT episode_image FROM Episode WHERE episode_id = 5;
SELECT COUNT(votes) FROM Episode WHERE rating > 7.0;
SELECT COUNT(*) FROM Credit WHERE category = 'Casting Department';
SELECT COUNT(*) FROM Person WHERE birth_country = 'USA' AND name IN (SELECT DISTINCT person FROM Credit WHERE role = 'additional timer');
SELECT COUNT(*) FROM Person p JOIN Credit c ON p.name = c.person WHERE p.birthdate > 1970 AND c.role = 'animation executive producer';
SELECT E.summary FROM Episode E WHERE NOT EXISTS (     SELECT 1     FROM Credit C     WHERE E.episode_id = C.episode_id AND C.credited = '' );
SELECT E.rating FROM Episode E JOIN Credit C ON E.episode_id = C.episode_id WHERE C.person = 'Jason Bikowski' AND C.category = 'Producer';
SELECT AVG(Person.height_meters) FROM Person JOIN Credit ON Person.name = Credit.person WHERE Credit.category = 'Animation Department';
SELECT ca.character FROM Character_Award ca JOIN Award a ON ca.award_id = a.award_id WHERE a.award_category = 'Primetime Emmy' AND a.year = 2009 AND a.result = 'Winner';
SELECT ca.character FROM Character_Award ca JOIN Award a ON ca.award_id = a.award_id WHERE a.award_category = 'Primetime Emmy' AND a.year BETWEEN '2009' AND '2010' AND a.result = 'Nominee';
SELECT SUM(Vote.votes) FROM Episode JOIN Credit ON Episode.episode_id = Credit.episode_id JOIN Vote ON Episode.episode_id = Vote.episode_id WHERE Credit.person = 'Adam Kuhlman';
SELECT T3.keyword, T4.person FROM Episode AS T1 JOIN Credit AS T4 ON T1.episode_id = T4.episode_id JOIN Keyword AS T3 ON T1.episode_id = T3.episode_id WHERE T1.episode_id = 'S20-E1';
SELECT T1.keyword FROM Keyword AS T1 JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 AND T2.percent > 29;
SELECT (SUM(CASE WHEN v.stars = 5 THEN v.votes ELSE 0 END) / SUM(v.votes)) * 100 AS percentage FROM Vote v JOIN Episode e ON v.episode_id = e.episode_id WHERE e.title = 'Sex, Pies and Idiot Scrapes';
SELECT COUNT(*) FROM Keyword k JOIN Episode e ON k.episode_id = e.episode_id WHERE k.keyword = 'limbo dancing' AND e.title = 'Dangerous Curves';
SELECT E.title FROM Episode E JOIN Award A ON E.episode_id = A.episode_id WHERE A.result = 'Winner' AND A.award = 'Best International TV Series' AND A.year = 2017;
SELECT T5.keyword FROM Award AS T1 JOIN Character_Award AS T2 ON T1.award_id = T2.award_id JOIN Episode AS T3 ON T1.episode_id = T3.episode_id JOIN Credit AS T4 ON T3.episode_id = T4.episode_id JOIN Keyword AS T5 ON T3.episode_id = T5.episode_id WHERE T1.award_category = 'WGA Award (TV)' AND T1.result = 'Winner'
SELECT T2.birth_place FROM Credit AS T1 JOIN Person AS T2 ON T1.person = T2.name JOIN Award AS T3 ON T1.episode_id = T3.episode_id WHERE T1.role = 'co-executive producer' AND T3.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T3.result = 'Nominee'
SELECT SUM(votes) FROM Vote WHERE episode_id IN (     SELECT episode_id     FROM Award     WHERE result IN ('Winner', 'Nominee') AND award = 'Blimp Award' ) AND stars BETWEEN 1 AND 5;
SELECT SUM(E.rating) FROM Episode E JOIN Award A ON E.episode_id = A.episode_id WHERE A.result = 'Winner' AND (A.award = 'OFTA Television Award' OR A.award = 'WGA Award (TV)')
SELECT SUM(percent) FROM Vote WHERE episode_id = (     SELECT episode_id     FROM Episode     WHERE title = "No Loan Again, Naturally" AND rating = 6.8 ) AND stars BETWEEN 5 AND 10
SELECT COUNT(*) FROM Episode WHERE rating > 8;
SELECT e.title, v.stars FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.votes = (SELECT MAX(votes) FROM Vote)
SELECT COUNT(*) FROM Keyword WHERE keyword = '2d animation';
SELECT organization FROM Award WHERE award_id = 328;
SELECT COUNT(*) FROM Award WHERE year = 2009;
SELECT COUNT(*) FROM Award WHERE award_category = 'Primetime Emmy';
SELECT p.birth_name FROM Person p JOIN Credit c ON p.name = c.person WHERE c.role = 'co-executive producer' AND p.height_meters > 1.60;
SELECT (SUM(CASE WHEN T3.birth_country = 'USA' THEN 1 ELSE 0 END) * 100 / COUNT(T1.person)) AS percentage FROM Award AS T1 JOIN Person AS T3 ON T1.person = T3.name WHERE T1.result = 'Nominee';
SELECT (COUNT(CASE WHEN A.result = 'Winner' AND P.height_meters > 1.75 THEN 1 END) * 100 / COUNT(CASE WHEN A.result = 'Winner' THEN 1 END)) AS Percentage FROM Award A JOIN Person P ON A.person = P.name WHERE A.result = 'Winner';
SELECT e.title FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE v.stars = 2;
SELECT Vote.stars FROM Vote INNER JOIN Episode ON Vote.episode_id = Episode.episode_id WHERE Episode.title = 'How the Test Was Won';
SELECT COUNT(*) FROM Episode JOIN Vote ON Episode.episode_id = Vote.episode_id WHERE Episode.air_date LIKE '2008%' AND Vote.stars > 5;
SELECT ca.character FROM Character_Award ca JOIN Award a ON ca.award_id = a.award_id WHERE a.year = 2009;
SELECT DISTINCT T2.year FROM Character_Award AS T1 JOIN Award AS T2 ON T1.award_id = T2.award_id WHERE T1.character = 'Mr. Burns' AND T2.result = 'Winner';
SELECT a.award_category FROM Award a JOIN Character_Award ca ON a.award_id = ca.award_id WHERE ca.character = 'Lenny' AND a.result = 'Winner';
SELECT p.name FROM Person p JOIN Credit c ON p.name = c.person WHERE c.role = 'Smithers'
SELECT T2.keyword FROM Episode AS T1 JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Dangerous Curves'
SELECT T2.keyword FROM Episode AS T1 JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date LIKE '2008%';
SELECT COUNT(*) FROM Episode JOIN Vote ON Episode.episode_id = Vote.episode_id WHERE Vote.stars < 8 AND Episode.air_date LIKE '2009%';
SELECT T2.birth_name FROM Credit AS T1 JOIN Person AS T2 ON T1.person = T2.name WHERE T1.role = 'director' AND T2.birth_country = 'South Korea'
SELECT COUNT(*) FROM Award WHERE result = 'Winner' AND year = 2009;
SELECT COUNT(*) FROM Episode WHERE rating < 7;
SELECT name FROM Person WHERE birth_region = 'California' AND birth_country = 'USA';
Error: 第 4353 个样本有 2 个SQL。
SELECT episode_id FROM Vote WHERE stars = 2 AND votes = 9;
SELECT E.title FROM Episode E JOIN Award A ON E.episode_id = A.episode_id WHERE A.result = 'Winner' AND A.organization = 'Primetime Emmy Awards' AND A.year = 2009;
SELECT e.episode_id FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id WHERE e.air_date LIKE '2008%' AND v.stars < 5;
SELECT C.category FROM Credit AS C JOIN Episode AS E ON C.episode_id = E.episode_id JOIN Vote AS V ON V.episode_id = E.episode_id WHERE C.person = 'Carlton Batten' AND V.votes = (SELECT MAX(votes) FROM Vote)
SELECT percent FROM Vote WHERE episode_id IN (     SELECT episode_id     FROM Episode     WHERE air_date LIKE '2008%' AND votes BETWEEN 920 AND 950 );
SELECT E.episode_id, E.title FROM Episode AS E JOIN Credit AS C ON E.episode_id = C.episode_id WHERE C.person = 'Bonita Pietila' AND C.credited = 'true';
SELECT COUNT(*) FROM Episode e JOIN Award a ON e.episode_id = a.episode_id JOIN Vote v ON e.episode_id = v.episode_id WHERE a.organization = 'Annie Awards' AND a.result = 'Nominee' AND v.percent > 6;
SELECT E.title FROM Episode E JOIN Award A ON E.episode_id = A.episode_id WHERE A.result = 'Nominee' AND A.award_category = 'WGA Award (TV)' AND E.votes > 1000;
SELECT DISTINCT p.name FROM Person p JOIN Credit c ON p.name = c.person WHERE c.category = 'Animation Department' AND c.credited = 'true' AND c.role = 'additional timer' AND c.episode_id IN (     SELECT e.episode_id     FROM Episode e     WHERE e.title = 'How the Test Was Won' );
SELECT V.stars FROM Episode E JOIN Vote V ON E.episode_id = V.episode_id WHERE E.air_date LIKE '2008-11%';
SELECT e.title FROM Episode e JOIN Vote v ON e.episode_id = v.episode_id JOIN Award a ON e.episode_id = a.episode_id WHERE v.stars = 5 AND a.result = 'Nominee' AND a.award_category = 'Prism Award' AND e.air_date = '2009-04-19';
SELECT a.award_category FROM Award a JOIN Episode e ON a.episode_id = e.episode_id WHERE a.result = 'Nominee' AND e.votes = (SELECT MAX(votes) FROM Episode)
SELECT COUNT(*) FROM Episode e JOIN Credit c ON e.episode_id = c.episode_id WHERE e.air_date LIKE '2009%' AND c.person = 'Sam Im' AND c.role = 'additional timer' AND c.credited = 'true';
SELECT T1.title FROM Episode AS T1 JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars > (SELECT AVG(stars) * 0.7 FROM Vote) GROUP BY T1.title;
SELECT (COUNT(CASE WHEN A.result = 'Nominee' THEN 1 END) * 100.0 / COUNT(A.result)) AS Nomination_Percentage FROM Award AS A JOIN Episode AS E ON A.episode_id = E.episode_id WHERE E.title = 'Gone Maggie Gone' AND A.year = 2009;
SELECT COUNT(*) FROM student_loan.person WHERE name NOT IN (SELECT name FROM student_loan.longest_absense_from_school WHERE month > 0);
SELECT MAX(month) FROM longest_absense_from_school;
SELECT COUNT(*) FROM enlist WHERE organ = 'navy';
SELECT COUNT(*) FROM longest_absense_from_school las JOIN male m ON las.name = m.name WHERE las.month >= 5;
SELECT m.name FROM male m JOIN enlist e ON m.name = e.name WHERE e.organ = 'navy';
SELECT COUNT(*) FROM filed_for_bankrupcy f JOIN longest_absense_from_school l ON f.name = l.name WHERE l.month > 5;
SELECT COUNT(*) FROM enlist JOIN no_payment_due ON enlist.name = no_payment_due.name WHERE enlist.organ = 'navy' AND no_payment_due.bool = 'pos';
SELECT m.name FROM male m JOIN disabled d ON m.name = d.name JOIN filed_for_bankruptcy f ON m.name = f.name;
SELECT COUNT(DISTINCT d.name) FROM disabled d LEFT JOIN male m ON d.name = m.name WHERE m.name IS NULL;
SELECT COUNT(*) FROM unemployed WHERE name NOT IN (SELECT name FROM no_payment_due WHERE bool = 'true')
SELECT MAX(longest_absense_from_school.month) FROM longest_absense_from_school JOIN enlist ON longest_absense_from_school.name = enlist.name WHERE enlist.organ = 'navy';
SELECT COUNT(*) FROM disabled WHERE name NOT IN (SELECT name FROM longest_absense_from_school WHERE month > 0);
SELECT T2.school FROM longest_absense_from_school AS T1 JOIN enrolled AS T2 ON T1.name = T2.name WHERE T1.month = 9;
SELECT T2.organ FROM disabled AS T1 JOIN enlist AS T2 ON T1.name = T2.name GROUP BY T2.organ ORDER BY COUNT(T1.name) DESC LIMIT 1;
SELECT f.name FROM filed_for_bankrupcy f WHERE f.name NOT IN (SELECT m.name FROM male m)
SELECT COUNT(T2.name) * 100 / COUNT(T1.name) AS percentage FROM enlist AS T1 JOIN male AS T2 ON T1.name = T2.name WHERE T1.organ = 'navy';
SELECT AVG(longest_absense_from_school.month) FROM longest_absense_from_school JOIN disabled ON longest_absense_from_school.name = disabled.name;
SELECT name FROM enlist WHERE organ = 'foreign_legion';
SELECT bool FROM no_payment_due WHERE name = 'student348';
SELECT school FROM enrolled WHERE name = 'student829';
SELECT month FROM longest_absense_from_school WHERE name = 'student217';
SELECT name FROM longest_absense_from_school WHERE month = 6;
SELECT organ FROM enlist WHERE name = 'student285'
SELECT disabled.name, enrolled.school FROM disabled JOIN enrolled ON disabled.name = enrolled.name WHERE disabled.name = 'student281';
SELECT e.name, e.school FROM enrolled e JOIN enlist l ON e.name = l.name WHERE l.organ = 'air_force';
SELECT TOP 10 npd.name FROM no_payment_due npd WHERE npd.bool = 'neg' AND npd.name NOT IN (SELECT name FROM male)
Error: 第 4395 个样本有 2 个SQL。
SELECT disabled.name FROM disabled JOIN enrolled ON disabled.name = enrolled.name WHERE enrolled.school = 'smc';
SELECT f.name FROM filed_for_bankruptcy AS f JOIN enlist AS e ON f.name = e.name WHERE e.organ = 'foreign_legion';
SELECT COUNT(*) FROM male m JOIN no_payment_due npd ON m.name = npd.name WHERE npd.bool = 'neg';
SELECT e.name FROM enlist e JOIN longest_absense_from_school l ON e.name = l.name WHERE e.organ = 'marines' AND l.month = 6;
SELECT COUNT(*) FROM unemployed u JOIN enrolled e ON u.name = e.name WHERE e.school = 'SMC';
SELECT COUNT(*) FROM unemployed WHERE name IN (SELECT name FROM longest_absense_from_school WHERE month = 6);
SELECT COUNT(*) FROM enlist JOIN enrolled ON enlist.name = enrolled.name WHERE organ = 'peace_corps' AND school = 'ucsd';
SELECT T1.organ, T2.month FROM enlist AS T1 JOIN longest_absense_from_school AS T2 ON T1.name = T2.name WHERE T1.name = 'Student21';
SELECT (COUNT(CASE WHEN E.bool = 'pos' THEN 1 END) * 100.0 / COUNT(E.name)) AS percentage_ratio FROM enlist AS L JOIN no_payment_due AS E ON L.name = E.name WHERE L.organ = 'foreign_legion';
SELECT     (COUNT(T1.name) * 100.0 / (SELECT COUNT(*) FROM enrolled WHERE school = 'OCC')) AS percentage FROM     enlist AS T1 JOIN     enrolled AS T2 ON     T1.name = T2.name WHERE     T1.organ = 'navy' AND     T2.school = 'OCC';
SELECT name FROM longest_absense_from_school WHERE month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT COUNT(DISTINCT name) FROM enrolled
SELECT MAX(month) FROM longest_absense_from_school;
SELECT COUNT(*) FROM longest_absense_from_school WHERE month = 4;
SELECT COUNT(*) FROM unemployed JOIN filed_for_bankruptcy ON unemployed.name = filed_for_bankruptcy.name;
SELECT d.name, e.organ FROM disabled d JOIN enlist e ON d.name = e.name;
SELECT COUNT(*) FROM unemployed JOIN filed_for_bankruptcy ON unemployed.name = filed_for_bankruptcy.name JOIN no_payment_due ON unemployed.name = no_payment_due.name WHERE no_payment_due.bool = 'pos';
SELECT COUNT(*) FROM disabled JOIN male ON disabled.name = male.name WHERE disabled.name = '124';
SELECT     CASE         WHEN p.name IN (SELECT name FROM male) THEN 'Male'         ELSE 'Female'     END AS Gender,     CASE         WHEN p.name IN (SELECT name FROM disabled) THEN 'Disabled'         ELSE 'Not Disabled'     END AS Disability,     CASE         WHEN p.name IN (SELECT name FROM unemployed) THEN 'Unemployed'         ELSE 'Employed'     END AS Employment,     CASE         WHEN npd.bool = 'pos' THEN 'Has Payment Due'         ELSE 'No Payment Due'     END AS SchoolDebtStatus FROM     person p LEFT JOIN     no_payment_due npd ON p.name = npd.name WHERE     p.name IN ('student180', 'student117');
SELECT COUNT(*) FROM enlist WHERE organ IN ('marines', 'air_force') AND name NOT IN (SELECT name FROM male);
SELECT T1.organ, T2.school FROM enlist AS T1 JOIN enrolled AS T2 ON T1.name = T2.name WHERE T1.name IN ('student27', 'student17', 'student101');
SELECT COUNT(disabled.name) / COUNT(male.name) AS ratio_of_disabled_female_to_male FROM disabled LEFT JOIN male ON disabled.name = male.name WHERE disabled.name NOT IN (SELECT name FROM male)
Error: 第 4418 个样本有 2 个SQL。
SELECT p.name FROM person p JOIN filed_for_bankrupcy f ON p.name = f.name JOIN no_payment_due n ON p.name = n.name WHERE n.bool = 'neg';
SELECT AVG(longest_absense_from_school.month) FROM longest_absense_from_school;
SELECT AVG(longest_absense_from_school.month) FROM longest_absense_from_school WHERE NOT EXISTS (     SELECT *     FROM unemployed     WHERE unemployed.name = longest_absense_from_school.name );
SELECT AVG(longest_absense_from_school.month) FROM longest_absense_from_school JOIN disabled ON longest_absense_from_school.name = disabled.name;
SELECT organ FROM enlist WHERE name = '313';
SELECT COUNT(*) FROM enlist WHERE organ = 'fire_department';
SELECT COUNT(*) FROM student_loan.person WHERE name NOT IN (SELECT name FROM student_loan.longest_absense_from_school WHERE month > 0);
SELECT COUNT(*) FROM longest_absense_from_school WHERE month > 2;
SELECT COUNT(*) FROM no_payment_due WHERE bool = 'neg';
SELECT COUNT(*) FROM no_payment_due WHERE bool = 'pos';
SELECT disabled.name FROM disabled WHERE disabled.name NOT IN (     SELECT longest_absense_from_school.name     FROM longest_absense_from_school     WHERE longest_absense_from_school.month > 0 );
SELECT COUNT(*) FROM unemployed JOIN enlist ON unemployed.name = enlist.name WHERE enlist.organ = 'navy';
SELECT COUNT(*) FROM male JOIN enlist ON male.name = enlist.name WHERE enlist.organ = 'foreign_legion';
SELECT COUNT(*) FROM enlist WHERE organ = 'air_force' AND name NOT IN (SELECT name FROM male)
SELECT disabled.name FROM disabled JOIN longest_absense_from_school ON disabled.name = longest_absense_from_school.name WHERE longest_absense_from_school.month = (     SELECT MAX(month)     FROM longest_absense_from_school );
SELECT e.name FROM unemployed u JOIN enlist e ON u.name = e.name WHERE e.organ = 'marines';
SELECT AVG(longest_absense_from_school.month) FROM longest_absense_from_school JOIN disabled ON longest_absense_from_school.name = disabled.name;
SELECT CAST(SUM(CASE WHEN t2.month > 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(t2.month) FROM unemployed AS t1 JOIN longest_absense_from_school AS t2 ON t1.name = t2.name;
SELECT COUNT(*) FROM unemployed JOIN disabled ON unemployed.name = disabled.name JOIN longest_absense_from_school ON unemployed.name = longest_absense_from_school.name WHERE longest_absense_from_school.month = 8;
SELECT unemployed.name FROM unemployed JOIN longest_absense_from_school ON unemployed.name = longest_absense_from_school.name WHERE longest_absense_from_school.month = (     SELECT MAX(month)     FROM longest_absense_from_school );
SELECT unemployed.name FROM unemployed LEFT JOIN longest_absense_from_school ON unemployed.name = longest_absense_from_school.name WHERE longest_absense_from_school.month = 0 OR longest_absense_from_school.month IS NULL;
SELECT COUNT(*) FROM disabled WHERE name IN (     SELECT name     FROM longest_absense_from_school     WHERE month = 3 );
Error: 第 4441 个样本有 2 个SQL。
SELECT longest_absense_from_school.name FROM longest_absense_from_school JOIN filed_for_bankrupcy ON longest_absense_from_school.name = filed_for_bankrupcy.name WHERE longest_absense_from_school.month = (SELECT MAX(month) FROM longest_absense_from_school)
SELECT     'male' AS gender FROM     male WHERE     name = 'student1000' UNION ALL SELECT     'female' AS gender FROM     person WHERE     name = 'student1000' AND     name NOT IN (SELECT name FROM male)
SELECT COUNT(*) FROM disabled;
SELECT COUNT(*) FROM longest_absense_from_school WHERE month > 6;
SELECT name FROM longest_absense_from_school WHERE month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT COUNT(*) FROM enlist WHERE organ = 'army';
SELECT AVG(month) FROM longest_absense_from_school;
SELECT COUNT(*) FROM enlist WHERE organ IN ('foreign_legion', 'peace_corps', 'army');
SELECT COUNT(*) FROM enlist JOIN disabled ON enlist.name = disabled.name WHERE enlist.organ = 'marines';
SELECT COUNT(*) FROM unemployed WHERE name NOT IN (SELECT name FROM no_payment_due WHERE bool = 'pos');
SELECT p.name FROM person p WHERE p.name NOT IN (     SELECT las.name     FROM longest_absense_from_school las     WHERE las.month > 0 ) AND p.name NOT IN (     SELECT m.name     FROM male m )
SELECT T2.school, COUNT(T1.name) AS count_disabled FROM disabled AS T1 JOIN enrolled AS T2 ON T1.name = T2.name GROUP BY T2.school ORDER BY count_disabled DESC LIMIT 1;
SELECT T2.organ FROM filed_for_bankruptcy AS T1 JOIN enlist AS T2 ON T1.name = T2.name;
SELECT COUNT(T1.name) FROM male AS T1 JOIN enlist AS T2 ON T1.name = T2.name GROUP BY T1.name HAVING COUNT(T2.organ) > 1;
SELECT enlist.name FROM enlist JOIN disabled ON enlist.name = disabled.name WHERE enlist.organ = 'navy';
SELECT COUNT(*) FROM longest_absense_from_school las JOIN enrolled e ON las.name = e.name WHERE e.school = 'smc' AND las.month = 7;
SELECT p.name FROM person p JOIN disabled d ON p.name = d.name WHERE p.name NOT IN (SELECT name FROM male)
Error: 第 4459 个样本有 2 个SQL。
Error: 第 4460 个样本有 2 个SQL。
SELECT COUNT(*) FROM longest_absense_from_school WHERE month = 5;
SELECT COUNT(*) FROM enlist WHERE organ = 'army';
SELECT COUNT(*) FROM enrolled WHERE school = 'ucla';
SELECT name FROM longest_absense_from_school ORDER BY month DESC LIMIT 5;
SELECT COUNT(name) FROM (     SELECT name     FROM enlist     GROUP BY name     HAVING COUNT(DISTINCT organ) >= 2 )
SELECT COUNT(*) FROM enlist WHERE organ = 'navy';
SELECT COUNT(*) FROM male m JOIN no_payment_due npd ON m.name = npd.name WHERE npd.bool = 'neg';
SELECT COUNT(*) FROM enlist JOIN enrolled ON enlist.name = enrolled.name WHERE enlist.organ = 'peace_corps' AND enrolled.school = 'ucsd';
SELECT COUNT(*) FROM unemployed JOIN no_payment_due ON unemployed.name = no_payment_due.name WHERE no_payment_due.bool = 'neg';
SELECT COUNT(*) FROM no_payment_due WHERE bool = 'neg' AND name NOT IN (SELECT name FROM male)
SELECT COUNT(*) FROM unemployed WHERE name NOT IN (SELECT name FROM longest_absense_from_school WHERE month > 0);
SELECT e.name FROM enlist e JOIN no_payment_due npd ON e.name = npd.name WHERE e.organ = 'fire_department' AND npd.bool = 'neg' LIMIT 10;
SELECT COUNT(*) FROM enlist WHERE organ = 'navy' AND name NOT IN (SELECT name FROM male);
SELECT COUNT(*) FROM unemployed JOIN enlist ON unemployed.name = enlist.name WHERE enlist.organ = 'army';
SELECT COUNT(*) FROM unemployed WHERE name IN (SELECT name FROM no_payment_due WHERE bool = 'pos');
SELECT p.name FROM person p JOIN no_payment_due npd ON p.name = npd.name JOIN enlist e ON p.name = e.name WHERE npd.bool = 'pos' AND e.organ = 'Peace Corps' LIMIT 5;
SELECT COUNT(*) FROM disabled WHERE name NOT IN (SELECT name FROM male);
SELECT COUNT(*) FROM disabled WHERE name IN (SELECT name FROM no_payment_due WHERE bool = 'pos');
SELECT AVG(count_females) as average_female_disabled_in_foreign_legion FROM (     SELECT COUNT(DISTINCT disabled.name) as count_females     FROM disabled     LEFT JOIN male ON disabled.name = male.name     LEFT JOIN enlist ON disabled.name = enlist.name     WHERE male.name IS NULL AND enlist.organ = 'foreign_legion' ) as subquery;
SELECT     CONCAT(ROUND((COUNT(CASE WHEN e.name NOT IN (SELECT m.name FROM male m) THEN e.name END) / COUNT(e.name)) * 100, 2), '%') AS FEMALE,     CONCAT(ROUND((COUNT(CASE WHEN e.name IN (SELECT m.name FROM male m) THEN e.name END) / COUNT(e.name)) * 100, 2), '%') AS MALE FROM     enlist e WHERE     e.organ = 'fire_department';
SELECT COUNT(*) FROM enlist WHERE organ = 'navy';
SELECT CONCAT(ROUND((COUNT(CASE WHEN l.month = 0 THEN l.name END) * 100 / COUNT(l.name)),2), '%') AS percentage FROM longest_absense_from_school l;
SELECT CAST(SUM(CASE WHEN b.bool = 'pos' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN b.bool = 'neg' THEN 1 ELSE 0 END) as ratio FROM (     SELECT name, bool     FROM student_loan.no_payment_due ) as b;
SELECT name, school FROM enrolled WHERE month = 15;
SELECT COUNT(name) / COUNT(DISTINCT organ) AS average_enlisted_students_per_organization FROM enlist
SELECT school, month FROM enrolled WHERE name = 'student214';
SELECT CONCAT(ROUND((COUNT(disabled.name) * 100) / COUNT(person.name), 2), '%') AS Percentage FROM person LEFT JOIN disabled ON person.name = disabled.name;
SELECT COUNT(*) FROM longest_absense_from_school las JOIN disabled d ON las.name = d.name WHERE las.month = 9;
SELECT person.name FROM person WHERE person.name NOT IN (SELECT filed_for_bankruptcy.name FROM filed_for_bankruptcy);
SELECT e.name FROM enlist e LEFT JOIN male m ON e.name = m.name WHERE e.organ = 'air_force' AND m.name IS NULL LIMIT 5;
SELECT COUNT(*) FROM person WHERE name NOT IN (SELECT name FROM disabled);
Error: 第 4492 个样本有 2 个SQL。
SELECT disabled.name FROM disabled WHERE disabled.name IN (SELECT name FROM unemployed) LIMIT 5;
SELECT COUNT(*) FROM unemployed WHERE name IN (SELECT name FROM filed_for_bankrupcy);
SELECT e.name, e.organ FROM longest_absense_from_school AS l JOIN enlist AS e ON l.name = e.name WHERE l.month = 4 LIMIT 5;
SELECT COUNT(*) FROM unemployed WHERE name IN (SELECT name FROM no_payment_due WHERE bool = 'pos');
SELECT e.organ, np.bool FROM enlist AS e JOIN no_payment_due AS np ON e.name = np.name WHERE e.name = 'student160';
SELECT m.name FROM male m JOIN enlist e ON m.name = e.name WHERE e.organ = 'foreign_legion' LIMIT 10;
SELECT CONCAT(ROUND((COUNT(p.name) - COUNT(m.name)) * 100.0 / COUNT(p.name), 2), '%') AS Percentage_Female_Students FROM person p LEFT JOIN male m ON p.name = m.name;
SELECT COUNT(*) FROM filed_for_bankrupcy;
SELECT COUNT(*) FROM enrolled WHERE school = 'smc' AND month = 1;
SELECT COUNT(*) FROM enlist WHERE organ = 'air_force';
SELECT organ FROM enlist WHERE name = 'student168';
SELECT COUNT(*) FROM disabled JOIN male ON disabled.name = male.name JOIN enlist ON disabled.name = enlist.name;
SELECT d.school, COUNT(d.name) AS disabled_count FROM disabled d JOIN enrolled e ON d.name = e.name GROUP BY d.school;
SELECT     COUNT(DISTINCT CASE WHEN m.name IS NOT NULL THEN m.name END) AS male_count,     COUNT(DISTINCT CASE WHEN e.name NOT IN (SELECT name FROM male) THEN e.name END) AS female_count,     e.organ FROM     enlist e LEFT JOIN     male m ON e.name = m.name GROUP BY     e.organ;
SELECT name FROM (     SELECT name, COUNT(DISTINCT school) as school_count, COUNT(DISTINCT organ) as org_count     FROM (         SELECT e.name, e.school, l.organ         FROM enrolled e         LEFT JOIN enlist l ON e.name = l.name         WHERE e.month = l.month     ) sub     GROUP BY name ) result WHERE school_count = 2 AND org_count = 2;
SELECT CONCAT(     (COUNT(CASE WHEN las.month = 0 THEN las.name END) - COUNT(CASE WHEN las.month = 9 THEN las.name END)) * 100 /     COUNT(CASE WHEN las.month = 0 THEN las.name END),     '%' ) AS Percentage_Difference FROM longest_absense_from_school las;
SELECT enrolled.school, COUNT(enrolled.name) AS enrollment_count, COUNT(filed_for_bankrupcy.name) AS bankruptcy_count FROM enrolled LEFT JOIN filed_for_bankrupcy ON enrolled.name = filed_for_bankrupcy.name GROUP BY enrolled.school ORDER BY enrollment_count DESC LIMIT 1;
SELECT COUNT(*) FROM disabled JOIN unemployed ON disabled.name = unemployed.name;
SELECT e.name FROM enrolled e JOIN enlist l ON e.name = l.name WHERE e.school = 'occ' AND l.organ = 'fire_department'
SELECT m.name FROM male m JOIN disabled d ON m.name = d.name JOIN unemployed u ON m.name = u.name JOIN longest_absense_from_school las ON m.name = las.name WHERE las.month = 5;
SELECT e.name FROM enrolled e WHERE e.school IN ('occ', 'ulca') AND e.name NOT IN (SELECT m.name FROM male m);
SELECT e.school, el.organ FROM enrolled e JOIN enlist el ON e.name = el.name WHERE e.name = 'student211';
SELECT     (SELECT COUNT(DISTINCT fm.name) FROM filed_for_bankrupcy AS fm WHERE fm.name IN (SELECT name FROM male)) -     (SELECT COUNT(DISTINCT ff.name) FROM filed_for_bankrupcy AS ff WHERE ff.name NOT IN (SELECT name FROM male))
SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 JOIN unemployed AS T2 ON T1.name = T2.name JOIN male AS T3 ON T2.name = T3.name;
WITH disabled_count AS (   SELECT COUNT(*) AS disabled_attendance   FROM longest_absense_from_school las   JOIN disabled d ON las.name = d.name ), non_disabled_count AS (   SELECT COUNT(*) AS non_disabled_attendance   FROM longest_absense_from_school las   LEFT JOIN disabled d ON las.name = d.name   WHERE d.name IS NULL ) SELECT   (disabled_count.disabled_attendance - non_disabled_count.non_disabled_attendance) * 100.0 / non_disabled_count.non_disabled_attendance AS percentage_difference,   CASE     WHEN disabled_count.disabled_attendance < non_disabled_count.non_disabled_attendance THEN 'Disabled students have better attendance'     ELSE 'Non-disabled students have better or equal attendance'   END AS attendance_comparison FROM disabled_count, non_disabled_count;
SELECT AVG(T3.month) FROM disabled JOIN male ON disabled.name = male.name JOIN longest_absense_from_school T3 ON disabled.name = T3.name;
SELECT CONCAT(ROUND((SELECT COUNT(*) FROM unemployed WHERE name IN (SELECT name FROM longest_absense_from_school WHERE month = 0)) * 100 / (SELECT COUNT(*) FROM unemployed), 2), '%') AS ratio;
SELECT COUNT(*) FROM male WHERE name IN (SELECT name FROM no_payment_due WHERE bool = 'neg');
SELECT COUNT(*) FROM filed_for_bankrupcy JOIN no_payment_due ON filed_for_bankrupcy.name = no_payment_due.name WHERE no_payment_due.bool = 'pos';
SELECT bool FROM no_payment_due WHERE name = 'student124';
SELECT COUNT(*) FROM disabled WHERE name IN (SELECT name FROM no_payment_due WHERE bool = 'pos');
SELECT ls.name FROM longest_absense_from_school ls JOIN no_payment_due npd ON ls.name = npd.name WHERE npd.bool = 'neg' AND ls.month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT longest_absense_from_school.name FROM longest_absense_from_school JOIN no_payment_due ON longest_absense_from_school.name = no_payment_due.name WHERE longest_absense_from_school.month = 5 AND no_payment_due.bool = 'neg';
SELECT COUNT(*) FROM disabled JOIN enlist ON disabled.name = enlist.name WHERE enlist.organ = 'marines';
SELECT COUNT(*) FROM longest_absense_from_school JOIN enlist ON longest_absense_from_school.name = enlist.name WHERE longest_absense_from_school.month = (SELECT MAX(month) FROM longest_absense_from_school) AND enlist.organ = 'peace_corps';
SELECT COUNT(*) FROM filed_for_bankrupcy AS fb JOIN enlist AS e ON fb.name = e.name WHERE e.organ = 'navy';
Error: 第 4529 个样本有 2 个SQL。
SELECT     (COUNT(DISTINCT d.name) * 100 / (SELECT COUNT(*) FROM disabled)) AS ratio FROM     disabled d WHERE     d.name NOT IN (SELECT las.name FROM longest_absense_from_school las WHERE las.month > 0);
SELECT COUNT(*) FROM enlist WHERE organ = 'air_force';
SELECT COUNT(*) FROM longest_absense_from_school WHERE month < 4;
SELECT COUNT(*) FROM enlist WHERE organ = 'marines' AND name NOT IN (SELECT name FROM male);
SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 LEFT JOIN male AS T2 ON T1.name = T2.name WHERE T2.name IS NULL;
SELECT f.name FROM filed_for_bankrupcy f WHERE f.name NOT IN (SELECT m.name FROM male m);
SELECT bool FROM no_payment_due WHERE name = 'student299';
SELECT COUNT(*) FROM enlist WHERE organ = 'air_force';
SELECT COUNT(*) FROM longest_absense_from_school WHERE month > 1;
SELECT name FROM enlist WHERE organ = 'fire_department';
SELECT COUNT(*) FROM disabled WHERE name IN (SELECT name FROM no_payment_due WHERE bool = 'pos');
SELECT COUNT(*) FROM filed_for_bankrupcy JOIN enrolled ON filed_for_bankrupcy.name = enrolled.name WHERE enrolled.school = 'OCC';
SELECT COUNT(*) FROM disabled JOIN male ON disabled.name = male.name;
SELECT disabled.name FROM disabled JOIN enlist ON disabled.name = enlist.name WHERE enlist.organ = 'navy';
SELECT m.name FROM male m WHERE NOT EXISTS (     SELECT 1     FROM no_payment_due npd     WHERE npd.name = m.name AND npd.bool = 'pos' );
SELECT     CASE         WHEN u.name IS NOT NULL THEN 'Unemployed'         ELSE 'Employed'     END AS Employment_Status,     CASE         WHEN npd.bool = 'pos' THEN 'Payment Due'         ELSE 'No Payment Due'     END AS Payment_Status FROM     unemployed u     FULL OUTER JOIN no_payment_due npd ON npd.name = 'student110' WHERE     u.name = 'student110' OR npd.name = 'student110';
Error: 第 4546 个样本有 2 个SQL。
SELECT     enrolled.school,     CASE         WHEN male.name IS NOT NULL THEN 'Male'         ELSE 'Female'     END as Gender FROM     enrolled LEFT JOIN     male ON enrolled.name = male.name WHERE     enrolled.name = 'student34';
SELECT MAX(longest_absense_from_school.month) FROM longest_absense_from_school JOIN enlist ON longest_absense_from_school.name = enlist.name WHERE enlist.organ = 'fire_department';
SELECT COUNT(*) FROM longest_absense_from_school las JOIN enlist e ON las.name = e.name WHERE las.month = 1 AND e.organ = 'air_force';
SELECT unemployed.name FROM unemployed JOIN male ON unemployed.name = male.name JOIN disabled ON unemployed.name = disabled.name;
SELECT COUNT(*) FROM male JOIN enrolled ON male.name = enrolled.name WHERE enrolled.school = 'OCC';
Error: 第 4552 个样本有 2 个SQL。
Error: 第 4553 个样本有 2 个SQL。
SELECT COUNT(*) FROM student_loan.person WHERE name NOT IN (SELECT name FROM student_loan.longest_absense_from_school WHERE month > 0);
SELECT name FROM enlist WHERE organ = 'marines';
SELECT COUNT(*) FROM enlist WHERE organ = 'navy';
SELECT name FROM longest_absense_from_school WHERE month = (SELECT MAX(month) FROM longest_absense_from_school);
SELECT organ FROM enlist GROUP BY organ ORDER BY COUNT(organ) DESC LIMIT 1;
SELECT COUNT(*) FROM longest_absense_from_school WHERE month < 3;
SELECT COUNT(*) FROM unemployed WHERE name IN (SELECT name FROM no_payment_due WHERE bool = 'pos');
SELECT COUNT(*) FROM enlist WHERE organ = 'army' AND name NOT IN (SELECT name FROM male)
SELECT T2.organ FROM male AS T1 JOIN enlist AS T2 ON T1.name = T2.name GROUP BY T2.organ ORDER BY COUNT(T1.name) LIMIT 1;
SELECT COUNT(*) FROM disabled WHERE name IN (     SELECT name     FROM longest_absense_from_school     WHERE month = 0 );
SELECT COUNT(*) FROM unemployed JOIN disabled ON unemployed.name = disabled.name;
SELECT disabled.name FROM disabled JOIN longest_absense_from_school ON disabled.name = longest_absense_from_school.name WHERE longest_absense_from_school.month > 5;
SELECT COUNT(*) FROM enlist WHERE name IN (SELECT name FROM filed_for_bankrupcy) AND organ = 'marines';
SELECT COUNT(*) FROM disabled WHERE name IN (SELECT name FROM filed_for_bankrupcy);
Error: 第 4568 个样本有 2 个SQL。
SELECT COUNT(*) FROM enlist WHERE name IN (     SELECT name     FROM filed_for_bankruptcy     WHERE name IN (         SELECT name         FROM longest_absense_from_school         WHERE month < 6     ) ) AND organ = 'fire_department';
SELECT COUNT(*) FROM disabled WHERE name NOT IN (SELECT name FROM unemployed) AND name IN (SELECT name FROM longest_absense_from_school WHERE month = 0);
SELECT e.school,        COUNT(m.name) AS num_males,        (COUNT(m.name) * 100.0 / COUNT(p.name)) AS male_percentage FROM enrolled e JOIN male m ON e.name = m.name JOIN person p ON e.name = p.name GROUP BY e.school ORDER BY num_males DESC LIMIT 1;
SELECT COUNT(*) FROM Answer JOIN Question ON Answer.QuestionID = Question.QuestionID WHERE Answer.AnswerText = 'No' AND Question.QuestionID = 19;
SELECT COUNT(DISTINCT a.UserID), s.SurveyID FROM Answer a JOIN Survey s ON a.SurveyID = s.SurveyID WHERE a.QuestionID = 13 AND s.SurveyID BETWEEN 2016 AND 2019 GROUP BY s.SurveyID;
SELECT COUNT(DISTINCT A.UserID) FROM Answer A JOIN Question Q ON A.QuestionID = Q.QuestionID JOIN Survey S ON A.SurveyID = S.SurveyID WHERE Q.questionid = 1 AND A.AnswerText BETWEEN 27 AND 35 AND S.Description LIKE '%2018%';
SELECT COUNT(DISTINCT a.UserID) FROM Answer a JOIN Question q1 ON a.QuestionID = 3 AND q1.questiontext = 'Country' JOIN Answer a1 ON a1.SurveyID = a.SurveyID AND a1.UserID = a.UserID AND a1.QuestionID = 6 JOIN Question q2 ON a1.QuestionID = 6 AND q2.questiontext = 'Family History of Mental Illness' WHERE a.AnswerText = 'United States' AND a1.AnswerText = 'Yes' AND a.SurveyID IN (SELECT s.SurveyID FROM Survey s WHERE s.Description LIKE '%2019%');
SELECT YEAR, COUNT(*) AS NumOfPeopleWithMentalIllness FROM (     SELECT EXTRACT(YEAR FROM s.Description) AS YEAR, a.UserID     FROM Answer a     JOIN Survey s ON a.SurveyID = s.SurveyID     WHERE a.AnswerText = 'Yes' AND a.QuestionID = 34     AND s.SurveyID BETWEEN 2016 AND 2019 ) subquery GROUP BY YEAR ORDER BY NumOfPeopleWithMentalIllness DESC LIMIT 1;
SELECT COUNT(*) FROM Answer JOIN Survey ON Answer.SurveyID = Survey.SurveyID WHERE Answer.AnswerText = 'Female' AND QuestionID = 2 AND EXISTS (SELECT 1 FROM Answer WHERE Answer.UserID = Survey.UserID AND AnswerText = 'Yes' AND QuestionID = 1) AND EXISTS (SELECT 1 FROM Answer WHERE Answer.UserID = Survey.UserID AND AnswerText = 'Nebraska' AND QuestionID = 4) AND Survey.Description LIKE '%2017%';
SELECT COUNT(*) FROM Answer JOIN Question ON Answer.QuestionID = Question.questionid WHERE Question.questionid = 54 AND Answer.AnswerText = 'Yes';
SELECT     (SELECT UserID FROM Answer WHERE QuestionID = 1 AND AnswerText = (         SELECT MAX(CAST(AnswerText AS INT)) FROM Answer WHERE QuestionID = 1     )) AS OldestUserID,     (SELECT UserID FROM Answer WHERE QuestionID = 1 AND AnswerText = (         SELECT MIN(CAST(AnswerText AS INT)) FROM Answer WHERE QuestionID = 1     )) AS YoungestUserID
SELECT Q.questiontext, COUNT(A.UserID) as UserCount FROM Answer A JOIN Question Q ON A.QuestionID = Q.questionid WHERE Q.questionid = 3 GROUP BY Q.questiontext HAVING COUNT(A.UserID) = (     SELECT COUNT(A2.UserID) as UserCount     FROM Answer A2     JOIN Question Q2 ON A2.QuestionID = Q2.questionid     WHERE Q2.questionid = 3     GROUP BY Q2.questiontext     ORDER BY UserCount ASC     LIMIT 1 )
Error: 第 4581 个样本有 2 个SQL。
SELECT (SUM(CASE WHEN Answer.AnswerText IN ('Yes', 'Maybe') THEN 1 ELSE 0 END) * 100.0 / COUNT(Answer.AnswerText)) AS Percentage FROM Answer JOIN Question ON Answer.QuestionID = Question.QuestionID WHERE Question.questiontext LIKE '%bring up a mental health issue with a potential employer in an interview%' AND Question.QuestionID = 12;
SELECT COUNT(q.questionid) FROM Question q JOIN Survey s ON q.SurveyID = s.SurveyID JOIN Answer a ON q.questionid = a.QuestionID AND s.SurveyID = a.SurveyID WHERE s.SurveyID = 2014 GROUP BY q.questionid HAVING COUNT(a.AnswerText) > 200;
SELECT MAX(CAST(A.AnswerText AS INT)) AS OldestAge FROM Answer A JOIN Question Q ON A.QuestionID = Q.QuestionID JOIN Survey S ON A.SurveyID = S.SurveyID WHERE Q.questiontext = 'what is your age?' AND S.SurveyID = 2014;
SELECT COUNT(*) FROM Answer JOIN Question ON Answer.QuestionID = Question.questionid JOIN Survey ON Answer.SurveyID = Survey.SurveyID WHERE Survey.Description = '2014' AND Question.questiontext = 'Would you bring up a mental health issue with a potential employer in an interview?' AND Answer.AnswerText = 'No';
SELECT Answer.UserID FROM Answer JOIN Question ON Answer.QuestionID = Question.questionid JOIN Survey ON Answer.SurveyID = Survey.SurveyID WHERE Question.questiontext = 'Do you think that discussing a physical health issue with your employer would have negative consequences?' AND Answer.AnswerText = 'Yes' AND Survey.Description LIKE '%2014%';
SELECT COUNT(DISTINCT UserID) FROM Answer WHERE SurveyID = 2014;
SELECT A.AnswerText FROM Answer A JOIN Question Q ON A.QuestionID = Q.questionid JOIN Survey S ON A.SurveyID = S.SurveyID WHERE Q.questiontext = 'Any additional notes or comments' AND S.Description LIKE '2014%' AND A.AnswerText IS NOT NULL;
SELECT q.questiontext FROM Question q WHERE EXISTS (     SELECT 1     FROM Answer a1     WHERE a1.QuestionID = q.questionid     AND EXISTS (         SELECT 1         FROM Survey s1         WHERE s1.SurveyID = a1.SurveyID         AND YEAR(s1.Description) = 2014     ) ) AND EXISTS (     SELECT 1     FROM Answer a2     WHERE a2.QuestionID = q.questionid     AND EXISTS (         SELECT 1         FROM Survey s2         WHERE s2.SurveyID = a2.SurveyID         AND YEAR(s2.Description) = 2016     ) ) GROUP BY q.questiontext;
SELECT COUNT(DISTINCT a.UserID) FROM Answer a JOIN Question q ON a.QuestionID = q.QuestionID WHERE q.questionid = 3 AND a.AnswerText = 'Canada' AND a.SurveyID IN (     SELECT s.SurveyID     FROM Survey s     WHERE s.Description LIKE '%2018%')
SELECT q.questiontext FROM Question q JOIN Answer a ON q.questionid = a.QuestionID JOIN Survey s ON a.SurveyID = s.SurveyID WHERE s.SurveyID = 2014;
SELECT COUNT(*) FROM Answer JOIN Survey ON Answer.SurveyID = Survey.SurveyID WHERE Survey.Description = '2016''s survey' AND Answer.AnswerText = 'Yes' AND Answer.QuestionID = 32;
SELECT COUNT(DISTINCT a.UserID) FROM Answer a JOIN Question q ON a.QuestionID = q.questionid JOIN Survey s ON a.SurveyID = s.SurveyID WHERE q.questiontext = 'Have you had a mental health disorder in the past?' AND a.AnswerText = 'Yes' AND s.SurveyID IN (2016, 2017, 2018);
SELECT AVG(CAST(A.AnswerText AS FLOAT)) FROM Answer A JOIN Question Q ON A.QuestionID = Q.QuestionID JOIN Survey S ON A.SurveyID = S.SurveyID WHERE Q.questiontext = 'What is your age?' AND YEAR(S.Date) = 2014;
SELECT     (COUNT(CASE WHEN A.SurveyID = 2019 AND Q.QuestionID = 33 AND A.AnswerText = 'Yes' THEN 1 END) / COUNT(CASE WHEN A.SurveyID = 2019 AND Q.QuestionID = 33 THEN 1 END)) -     (COUNT(CASE WHEN A.SurveyID = 2016 AND Q.QuestionID = 33 AND A.AnswerText = 'Yes' THEN 1 END) / COUNT(CASE WHEN A.SurveyID = 2016 AND Q.QuestionID = 33 THEN 1 END)) FROM     Answer A JOIN     Question Q ON A.QuestionID = Q.QuestionID;
SELECT questionid FROM Question WHERE questiontext = 'Would you bring up a physical health issue with a potential employer in an interview?';
SELECT COUNT(DISTINCT UserID) FROM Answer WHERE QuestionID = 20;
SELECT COUNT(*) FROM Answer WHERE UserID = 5;
SELECT COUNT(DISTINCT UserID) FROM Answer WHERE SurveyID = 2016;
Error: 第 4600 个样本有 2 个SQL。
SELECT COUNT(*) FROM Survey JOIN Question ON Survey.SurveyID = Answer.SurveyID JOIN Answer ON Answer.QuestionID = Question.QuestionID WHERE Question.questiontext = 'What country do you work in?';
SELECT Answer.AnswerText FROM Answer JOIN Question ON Answer.QuestionID = Question.questionid WHERE Answer.UserID = 2681 AND Question.questiontext = 'Do you currently have a mental health disorder?';
SELECT COUNT(DISTINCT UserID) FROM Answer WHERE SurveyID = 2016;
SELECT AnswerText FROM Answer WHERE QuestionID = (SELECT questionid FROM Question WHERE questiontext = "What country do you work in?") GROUP BY AnswerText ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT a.AnswerText) FROM Answer a JOIN Question q ON a.QuestionID = q.questionid WHERE q.questiontext = 'Describe the conversation you had with your previous employer about your mental health, including their reactions and actions taken to address your mental health issue/questions.';
SELECT COUNT(*) FROM Answer JOIN Question ON Answer.QuestionID = Question.questionid WHERE Question.questiontext = 'What US state or territory do you work in?' AND Answer.AnswerText = 'Kansas';
SELECT COUNT(*) FROM Answer JOIN Question ON Answer.QuestionID = Question.QuestionID WHERE Question.questiontext = 'Any additional notes or comments.' AND Answer.AnswerText IS NOT NULL;
SELECT COUNT(*) FROM Answer JOIN Question ON Answer.QuestionID = Question.questionid WHERE Question.questiontext = 'Have you ever been diagnosed with a mental health disorder?' AND Answer.AnswerText = 'Yes';
SELECT COUNT(DISTINCT UserID) FROM Answer WHERE SurveyID = 2018;
SELECT COUNT(*) FROM Answer JOIN Question ON Answer.QuestionID = Question.questionid WHERE Question.questiontext = 'Overall, how much importance does your employer place on physical health?';
SELECT q.questiontext FROM Question q JOIN Answer a ON q.questionid = a.QuestionID WHERE a.UserID = 2183 AND a.AnswerText = 'Mood Disorder (Depression, Bipolar Disorder, etc)';
SELECT (COUNT(CASE WHEN A.AnswerText = 'Yes' AND Q.QuestionID = 15 THEN 1 END) * 100.0 / COUNT(Q.QuestionID)) AS Percentage FROM Answer A JOIN Question Q ON A.QuestionID = Q.QuestionID WHERE Q.questiontext = 'Has your employer ever formally discussed mental health (for example, as part of a wellness campaign or other official communication)?';
SELECT     (COUNT(CASE WHEN s.SurveyID = 2017 THEN a.UserID END) /      COUNT(CASE WHEN s.SurveyID = 2018 THEN a.UserID END)) as TimesMore FROM     Answer a JOIN     Survey s ON a.SurveyID = s.SurveyID;
SELECT (COUNT(CASE WHEN A.AnswerText = 'Yes' AND Q.QuestionID = 32 AND S.SurveyID = 2016 THEN A.SurveyID END) * 100.0 / COUNT(CASE WHEN Q.QuestionID = 32 AND S.SurveyID = 2016 THEN A.SurveyID END)) AS percentage FROM Answer A JOIN Question Q ON A.QuestionID = Q.QuestionID JOIN Survey S ON A.SurveyID = S.SurveyID WHERE S.SurveyID = 2016 AND Q.QuestionID = 32;
Error: 第 4615 个样本有 2 个SQL。
SELECT AVG(respondent_count) AS average_respondents FROM (     SELECT COUNT(DISTINCT UserID) AS respondent_count, SurveyID     FROM Answer     WHERE SurveyID BETWEEN 2014 AND 2019     GROUP BY SurveyID ) AS subquery
SELECT COUNT(*) FROM Answer JOIN Survey ON Answer.SurveyID = Survey.SurveyID WHERE Survey.Description LIKE '%2019%' AND Answer.QuestionID = 7 AND Answer.AnswerText = 1;
SELECT COUNT(*) FROM Answer WHERE AnswerText = 'Yes' AND SurveyID = 2014 AND QuestionID = 93;
SELECT COUNT(*) FROM Question WHERE questionid IN (     SELECT QuestionID     FROM Answer     WHERE SurveyID IN (         SELECT SurveyID         FROM Survey         WHERE Description = 'mental health survey'     ) );
SELECT COUNT(*) FROM Answer JOIN Question ON Answer.QuestionID = Question.QuestionID WHERE Question.questiontext = 'Have you ever been diagnosed with Substance Use Disorder?' AND Answer.AnswerText = 'Yes';
SELECT AnswerText, COUNT(AnswerText) AS ResponseCount FROM Answer WHERE SurveyID = 2017 AND QuestionID = 85 GROUP BY AnswerText ORDER BY ResponseCount DESC LIMIT 3;
SELECT (SUM(case when Year = 1998 then Studio_Entertainment end) - SUM(case when Year = 1997 then Studio_Entertainment end)) as difference FROM revenue;
SELECT     CASE         WHEN `Studio Entertainment[NI 1]` > `Disney Media Networks` THEN 'Studio Entertainment'         ELSE 'Disney Media Networks'     END AS Bigger_Revenue_Segment FROM     disney.revenue WHERE     Year = 1998;
Error: 第 4624 个样本有 2 个SQL。
SELECT c.villian FROM characters c JOIN director d ON c.movie_title = d.movie_title WHERE d.director = 'Wolfgang Reitherman';
SELECT COUNT(*) FROM characters JOIN director ON characters.movie_title = director.name WHERE director.director = 'Wolfgang Reitherman' AND SUBSTR(characters.release_date, INSTR(characters.release_date, '-') + 1, 3) = 'Dec';
SELECT d.name FROM director d JOIN characters c ON d.movie_title = c.movie_title WHERE c.song = 'Once Upon a Dream';
SELECT T2.voice_actor FROM characters AS T1 JOIN voice_actors AS T2 ON T1.movie_title = T2.movie AND T1.villian = T2.character WHERE T1.movie_title = 'Alice in Wonderland'
SELECT characters.release_date FROM characters JOIN voice_actors ON characters.movie_title = voice_actors.movie WHERE voice_actors.voice_actor = 'Alan Tudyk';
Error: 第 4630 个样本有 2 个SQL。
SELECT COUNT(*) FROM movies_total_gross JOIN director ON movies_total_gross.movie_title = director.name WHERE director.director = 'Wolfgang Reitherman' AND movies_total_gross.genre = 'Comedy';
SELECT T1.movie_title FROM movies_total_gross AS T1 JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' ORDER BY T1.total_gross DESC LIMIT 1;
SELECT mtg.movie_title FROM movies_total_gross mtg JOIN director d ON mtg.movie_title = d.name WHERE d.director = 'Wolfgang Reitherman' AND mtg.MPAA_rating = 'G';
SELECT c.villian AS villain_character FROM characters c JOIN movies_total_gross m ON c.movie_title = m.movie_title WHERE m.total_gross = (SELECT MAX(total_gross) FROM movies_total_gross)
SELECT genre FROM movies_total_gross WHERE movie_title = (     SELECT movie_title     FROM characters     WHERE villian = 'Commander Rourke' )
SELECT villian FROM characters WHERE movie_title = 'Beauty and the Beast';
SELECT movie_title FROM characters WHERE hero = 'Robin Hood';
SELECT movie_title FROM characters WHERE song = 'I Thought I Lost You';
SELECT voice_actor FROM voice_actors WHERE character = 'Binkie Muddlefoot';
SELECT c.hero FROM characters c JOIN movies_total_gross m ON c.movie_title = m.movie_title WHERE m.total_gross = '222,527,828'
SELECT c.song FROM characters c JOIN movies_total_gross m ON c.movie_title = m.movie_title WHERE CAST(SUBSTR(m.release_date, INSTR(m.release_date, ', ') + 1) AS INT) BETWEEN 1970 AND 1979 ORDER BY m.total_gross DESC LIMIT 1;
SELECT c.hero FROM characters c JOIN director d ON c.movie_title = d.movie_title WHERE d.director = 'Will Finn';
SELECT va.voice_actor FROM voice_actors va JOIN characters c ON va.character = c.hero WHERE c.movie_title = 'The Little Mermaid';
SELECT d.name FROM director d JOIN movies_total_gross m ON d.director = m.movie_title JOIN voice_actors v ON m.movie_title = v.movie WHERE v.voice_actor = 'Verna Felton' AND v.character = 'Aunt Sarah';
SELECT characters.release_date FROM characters JOIN voice_actors ON characters.movie_title = voice_actors.movie WHERE voice_actors.character = 'Hyacinth Hippo' AND voice_actors.voice_actor = 'Tress MacNeille';
SELECT d.name FROM director d JOIN movies_total_gross m ON d.director = m.movie_title WHERE m.release_date = 'Mar 30, 2007' AND m.genre = 'Adventure'
SELECT mtg.movie_title, MAX(mtg.inflation_adjusted_gross) FROM movies_total_gross mtg JOIN director d ON mtg.movie_title = d.name WHERE d.director = 'Wolfgang Reitherman';
SELECT hero FROM characters JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title WHERE movies_total_gross.release_date = '2016-03-04' AND movies_total_gross.genre = 'Adventure';
SELECT mtg.movie_title FROM movies_total_gross mtg JOIN characters c ON mtg.movie_title = c.movie_title WHERE c.hero = 'Donald Duck' ORDER BY mtg.total_gross DESC LIMIT 1;
SELECT COUNT(*) FROM director WHERE name = 'Wolfgang Reitherman';
SELECT name, COUNT(name) as num_movies FROM director GROUP BY name ORDER BY num_movies DESC LIMIT 1;
SELECT COUNT(*) FROM movies_total_gross WHERE MPAA_rating = 'R' AND genre = 'Horror' AND CAST(SUBSTR(release_date, INSTR(release_date, ', ') + 1) AS INT) BETWEEN 1990 AND 2015;
SELECT character FROM voice_actors WHERE voice_actor = 'Frank Welker';
SELECT mtg.total_gross FROM movies_total_gross mtg JOIN characters c ON mtg.movie_title = c.movie_title WHERE c.song = 'Little Wonders';
SELECT T1.MPAA_rating FROM `movies_total_gross` AS T1 JOIN `characters` AS T2 ON T1.movie_title = T2.movie_title WHERE T2.villian = 'Turbo';
SELECT COUNT(*) FROM voice_actors va JOIN movies_total_gross mtg ON va.movie = mtg.movie_title WHERE va.voice_actor = 'Bill Thompson' AND (mtg.MPAA_rating = 'PG' OR mtg.MPAA_rating = 'Mature Audiences');
SELECT COUNT(*) FROM movies_total_gross mtg JOIN director d ON mtg.movie_title = d.name WHERE d.director = 'Gary Trousdale' AND mtg.genre = 'Adventure';
SELECT d.name FROM (   SELECT director, COUNT(*) as cnt   FROM voice_actors va   JOIN characters c ON va.movie = c.movie_title   WHERE va.voice_actor = 'Bill Thompson'   GROUP BY director ) t JOIN director d ON t.director = d.name ORDER BY t.cnt DESC LIMIT 1;
SELECT mtg.movie_title FROM movies_total_gross mtg JOIN director d ON mtg.movie_title = d.name WHERE d.director = 'Ron Clements' ORDER BY mtg.total_gross DESC LIMIT 1;
SELECT va.voice_actor FROM voice_actors va JOIN characters c ON va.movie = c.movie_title JOIN director d ON c.movie_title = d.movie WHERE d.director = 'Ben Sharpsteen' AND c.release_date = 'Feb 9, 1940';
SELECT COUNT(*) FROM movies_total_gross JOIN director ON movies_total_gross.movie_title = director.name WHERE director.director = 'Ron Clements' AND movies_total_gross.MPAA_rating = 'PG' AND movies_total_gross.genre = 'Adventure';
SELECT COUNT(*) FROM movies_total_gross WHERE genre = 'Horror';
SELECT villian FROM characters WHERE movie_title = 'The Great Mouse Detective';
SELECT voice_actor FROM voice_actors WHERE movie = 'Meet the Robinsons';
SELECT director.name, COUNT(*) as num_movies FROM characters JOIN director ON characters.movie_title = director.movie_title GROUP BY director.name ORDER BY num_movies DESC LIMIT 1;
SELECT Year FROM revenue WHERE Year BETWEEN 2000 AND 2010 ORDER BY `Studio Entertainment[NI 1]` DESC LIMIT 1;
SELECT c.song FROM characters c JOIN movies_total_gross m ON c.movie_title = m.movie_title AND c.release_date = m.release_date WHERE m.genre = 'Drama';
SELECT va.voice_actor FROM voice_actors va JOIN characters c ON va.character = c.hero;
SELECT director FROM director JOIN characters ON director.name = characters.director WHERE CAST(SUBSTR(characters.release_date, INSTR(characters.release_date, ', ') + 1) AS INT) BETWEEN 1990 AND 2000;
SELECT va.voice_actor FROM voice_actors va JOIN characters c ON va.character = c.villian AND va.movie = c.movie_title WHERE c.movie_title = 'The Rescuers';
SELECT c.movie_title, va.voice_actor FROM characters c JOIN voice_actors va ON c.movie_title = va.movie JOIN director d ON d.director = 'Wolfgang Reitherman' AND c.movie_title = d.name;
SELECT characters.character FROM characters JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title WHERE movies_total_gross.MPAA_rating = 'PG';
SELECT movie_title, MAX(total_gross) FROM movies_total_gross WHERE movie_title NOT IN (SELECT movie_title FROM characters WHERE song IS NOT NULL) GROUP BY movie_title ORDER BY total_gross DESC LIMIT 1;
SELECT d.name FROM director d JOIN (     SELECT va.movie, COUNT(*) as num_voice_actors     FROM voice_actors va     GROUP BY va.movie     ORDER BY num_voice_actors DESC     LIMIT 1 ) m ON d.movie_title = m.movie;
SELECT va.voice_actor FROM voice_actors va JOIN characters c ON va.movie = c.movie_title WHERE c.release_date = 'Nov 24, 2010';
SELECT director.name FROM director JOIN characters ON director.director = characters.movie_title WHERE characters.song IS NOT NULL;
SELECT mtg.total_gross FROM movies_total_gross mtg JOIN voice_actors va ON mtg.movie_title = va.movie WHERE va.voice_actor = 'Jim Cummings';
SELECT T1.movie_title FROM movies_total_gross AS T1 JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Ron Clements' ORDER BY T1.total_gross DESC LIMIT 1;
SELECT AVG(movies_total_gross.total_gross) FROM movies_total_gross JOIN voice_actors ON movies_total_gross.movie_title = voice_actors.movie WHERE voice_actors.voice_actor = 'Sterling Holloway';
SELECT     SUM(CASE WHEN characters.song IS NOT NULL THEN movies_total_gross.total_gross ELSE 0 END) / SUM(movies_total_gross.total_gross) * 100 AS percentage FROM     disney.characters JOIN     disney.movies_total_gross ON characters.movie_title = movies_total_gross.movie_title;
SELECT movie_title, genre FROM movies_total_gross WHERE substr(release_date, length(release_date) - 3, length(release_date)) = '2016';
SELECT villian FROM characters WHERE movie_title = 'Little Mermaid';
SELECT movie_title FROM characters JOIN director ON characters.movie_title = director.name WHERE director.director = 'Jack Kinney';
SELECT movie_title, (inflation_adjusted_gross / total_gross) AS inflation_rate FROM movies_total_gross WHERE total_gross = (SELECT MAX(total_gross) FROM movies_total_gross);
SELECT movie_title, release_date FROM movies_total_gross WHERE MPAA_rating = 'PG-13' AND genre = 'Romantic Comedy';
SELECT movie_title, character FROM voice-actors WHERE voice-actor = 'Bill Thompson';
SELECT c.movie_title, c.song FROM characters c JOIN director d ON c.movie_title = d.name WHERE d.director = 'Ron Clements';
SELECT c.movie_title, c.hero, c.song FROM characters c JOIN director d ON c.movie_title = d.name WHERE d.director = 'Wolfgang Reitherman' AND substr(c.release_date, length(c.release_date) - 3, length(c.release_date)) = '1977';
SELECT c.movie_title, d.director FROM characters c JOIN director d ON c.movie_title = d.name WHERE c.hero = 'Donald Duck';
SELECT characters.hero, director.name, characters.release_date FROM characters JOIN director ON characters.movie_title = director.movie_title WHERE characters.movie_title = 'Mulan';
SELECT movie_title, total_gross, MPAA_rating FROM movies_total_gross WHERE movie_title IN (     SELECT movie_title     FROM characters     WHERE hero = 'Elsa' );
SELECT c.movie_title, d.name AS director, c.release_date FROM characters c JOIN director d ON c.movie_title = d.name JOIN voice_actors va ON c.movie_title = va.movie AND c.hero = va.character WHERE va.voice_actor = 'Freddie Jones';
SELECT movies_total_gross.movie_title, movies_total_gross.total_gross FROM movies_total_gross JOIN voice_actors ON movies_total_gross.movie_title = voice_actors.movie WHERE voice_actors.voice_actor = 'Frank Welker' AND (inflation_adjusted_gross / total_gross) * 100 < 2;
SELECT d.name FROM director d JOIN movies_total_gross m ON d.director = m.movie_title WHERE m.total_gross = (SELECT MAX(total_gross) FROM movies_total_gross);
SELECT voice_actors.voice_actor, characters.villian FROM voice_actors JOIN characters ON voice_actors.movie = characters.movie_title WHERE characters.movie_title = 'Cinderella';
SELECT va.voice_actor FROM voice_actors va JOIN characters c ON va.character = c.hero AND va.movie = c.movie_title WHERE c.movie_title = 'Lion King';
SELECT director, MPAA_rating FROM movies_total_gross JOIN director ON movies_total_gross.movie_title = director.name WHERE genre = 'Musical' AND substr(release_date, length(release_date) - 3, length(release_date)) = '1993';
SELECT     (COUNT(CASE WHEN genre = 'Comedy' THEN movie_title END) * 100.0 / COUNT(movie_title)) AS percentage,     GROUP_CONCAT(DISTINCT movie_title ORDER BY RAND() LIMIT 5 SEPARATOR ', ') AS movie_titles,     GROUP_CONCAT(DISTINCT director ORDER BY RAND() LIMIT 5 SEPARATOR ', ') AS directors FROM     disney.movies_total_gross mtg JOIN     disney.director d ON mtg.movie_title = d.movie_title WHERE     SUBSTR(release_date, LENGTH(release_date) - 3, LENGTH(release_date)) BETWEEN '1991' AND '2000';
SELECT m.movie_title, d.name FROM movies_total_gross m JOIN director d ON m.movie_title = d.movie_title WHERE m.release_date BETWEEN '2001-01-01' AND '2005-12-31' AND m.total_gross > (SELECT AVG(total_gross)*2 FROM movies_total_gross WHERE release_date BETWEEN '2001-01-01' AND '2005-12-31');
SELECT voice_actor FROM voice_actors WHERE character = 'Calliope' AND movie = 'Hercules';
SELECT COUNT(*) FROM voice_actors WHERE movie = 'Aladdin';
SELECT movie_title FROM voice_actors WHERE voice_actor = 'Jeff Bennett';
Error: 第 4703 个样本有 2 个SQL。
SELECT movie_title FROM director WHERE name = 'Jack Kinney';
SELECT COUNT(*) FROM characters WHERE SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) BETWEEN '37' AND '50';
SELECT c.song FROM characters c JOIN director d ON c.movie_title = d.movie_title WHERE d.name = 'Ben Sharpsteen';
SELECT release_date FROM disney.characters JOIN disney.director ON characters.movie_title = director.movie_title WHERE characters.movie_title = 'The Lion King' AND director.name = 'Roger Allers';
SELECT c.villian FROM characters c JOIN voice_actors va ON c.movie_title = va.movie WHERE va.voice_actor IN ('Scott Weinger', 'Brad Kane') GROUP BY c.villian HAVING COUNT(*) = 2;
SELECT mtg.movie_title FROM movies_total_gross mtg LEFT JOIN characters c ON mtg.movie_title = c.movie_title WHERE c.villian IS NULL AND mtg.movie_title IN (     SELECT d.name     FROM director d     WHERE d.director = 'Wolfgang Reitherman' );
SELECT movie_title FROM characters JOIN director ON characters.movie_title = director.name WHERE director.director = 'Jack Kinney' AND SUBSTR(characters.release_date, LENGTH(characters.release_date) - 1, LENGTH(characters.release_date)) < '47';
SELECT d.name FROM director d JOIN movies_total_gross m ON d.director = m.movie_title WHERE m.total_gross > 100000000;
SELECT T1.movie_title, T1.song FROM disney.characters AS T1 JOIN disney.movies_total_gross AS T2 ON T1.movie_title = T2.movie_title WHERE T2.total_gross = (SELECT MAX(total_gross) FROM disney.movies_total_gross)
SELECT d.name FROM director d JOIN movies_total_gross m ON d.director = m.movie_title WHERE substr(m.release_date, length(m.release_date) - 3, length(m.release_date)) BETWEEN '1937' AND '1990' GROUP BY d.name ORDER BY SUM(m.total_gross) DESC LIMIT 1;
SELECT c.hero FROM characters c JOIN movies_total_gross m ON c.movie_title = m.movie_title WHERE m.genre = 'Comedy';
Error: 第 4715 个样本有 2 个SQL。
SELECT mtg.genre FROM movies_total_gross mtg JOIN characters c ON mtg.movie_title = c.movie_title WHERE c.hero = 'Taran';
Error: 第 4717 个样本有 2 个SQL。
SELECT     (COUNT(DISTINCT d.name) FILTER (WHERE mtg.total_gross > 100000000)) * 100.0 / COUNT(DISTINCT d.name) AS percentage FROM     director d JOIN     movies_total_gross mtg ON d.name = mtg.director;
SELECT     (COUNT(CASE WHEN mtg.genre = 'Drama' THEN va.voice_actor END) * 100.0 / COUNT(va.voice_actor)) AS percentage FROM     voice_actors va JOIN     characters ch ON va.character = ch.hero OR va.character = ch.villian JOIN     movies_total_gross mtg ON ch.movie_title = mtg.movie_title;
SELECT movie_title FROM characters ORDER BY SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) ASC LIMIT 1;
SELECT COUNT(movie_title) FROM characters WHERE SUBSTR(release_date, LENGTH(release_date) - 1, LENGTH(release_date)) BETWEEN '10' AND '16';
SELECT `villian` FROM `characters` ORDER BY STRFTIME('%Y', `release_date`) ASC LIMIT 1;
Error: 第 4723 个样本有 2 个SQL。
SELECT voice_actor FROM voice_actors WHERE character = 'Akela' AND movie = 'The Jungle Book';
Error: 第 4725 个样本有 2 个SQL。
SELECT C.hero FROM characters C JOIN movies_total_gross M ON C.movie_title = M.movie_title WHERE M.genre = 'Adventure' ORDER BY M.inflation_adjusted_gross DESC LIMIT 1;
Error: 第 4727 个样本有 2 个SQL。
Error: 第 4728 个样本有 2 个SQL。
SELECT AVG(total_gross) FROM movies_total_gross WHERE genre = 'Action' AND MPAA_rating = 'PG-13';
SELECT COUNT(DISTINCT voice_actor) FROM voice_actors WHERE movie = 'Bambi';
SELECT (inflation_adjusted_gross / total_gross) as inflation_rate FROM movies_total_gross WHERE substr(release_date, length(release_date) - 3, length(release_date)) = '1995';
SELECT     ABS(T1.inflation_adjusted_gross - T2.inflation_adjusted_gross) AS difference,     CASE         WHEN T1.inflation_adjusted_gross > T2.inflation_adjusted_gross THEN T1.movie_title         ELSE T2.movie_title     END AS more_popular_movie FROM     movies_total_gross T1 JOIN     movies_total_gross T2 ON     T1.movie_title = 'Cars' AND T2.movie_title = 'Cars 2';
SELECT     c1.movie_title AS "Most Recent Movie",     c2.movie_title AS "Most Successful Movie" FROM     director d JOIN     (SELECT movie_title, release_date      FROM movies_total_gross      WHERE movie_title IN (SELECT movie_title FROM director WHERE director = 'Chris Buck')      ORDER BY release_date DESC LIMIT 1) c1 ON d.name = 'Chris Buck' JOIN     (SELECT movie_title      FROM movies_total_gross      WHERE movie_title IN (SELECT movie_title FROM director WHERE director = 'Chris Buck')      ORDER BY inflation_adjusted_gross DESC LIMIT 1) c2 ON d.name = 'Chris Buck';
SELECT voice_actor FROM voice_actors GROUP BY voice_actor HAVING COUNT(character) > 5;
SELECT     movie_title,     inflation_adjusted_gross,     (SUM(inflation_adjusted_gross) OVER () * 100 / (SELECT SUM(inflation_adjusted_gross) FROM movies_total_gross)) as percentage_contribution FROM     movies_total_gross ORDER BY     inflation_adjusted_gross DESC LIMIT 5;
Error: 第 4736 个样本有 2 个SQL。
SELECT COUNT(*) FROM current WHERE ballotpedia_id IS NULL OR ballotpedia_id = ''
SELECT official_full_name FROM current WHERE cspan_id IS NULL OR cspan_id = '';
SELECT COUNT(*) FROM current WHERE birthday_bio > '1960-01-01';
SELECT COUNT(*) FROM current WHERE gender_bio = 'F' AND fec_id IS NULL;
SELECT google_entity_id_id FROM current WHERE official_full_name = 'Sherrod Brown';
SELECT official_full_name, birthday_bio FROM legislator.current WHERE official_full_name IN ('Sherrod Brown', 'Maria Cantwell') ORDER BY birthday_bio ASC LIMIT 1;
SELECT sm.facebook FROM social_media sm JOIN current c ON sm.bioguide = c.bioguide_id WHERE c.official_full_name = 'Todd Young'
SELECT COUNT(*) FROM current WHERE bioguide_id NOT IN (SELECT bioguide FROM social_media WHERE instagram IS NOT NULL)
SELECT t1.official_full_name FROM current AS t1 JOIN social_media AS t2 ON t1.bioguide_id = t2.bioguide WHERE t2.twitter_id = 'ID234128524';
SELECT T1.youtube FROM social_media AS T1 JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.gender_bio = 'F'
SELECT T2.facebook FROM current AS T1 JOIN social_media AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = (SELECT MIN(birthday_bio) FROM current)
SELECT COUNT(*) FROM current c LEFT JOIN social_media sm ON c.bioguide_id = sm.bioguide WHERE c.opensecrets_id IS NULL OR c.opensecrets_id = '' AND (sm.instagram IS NULL OR sm.instagram = '');
SELECT COUNT(*) FROM current AS c JOIN current_terms AS ct ON c.bioguide_id = ct.bioguide WHERE c.official_full_name = 'Roger F. Wicker' AND (ct.district IS NULL OR ct.district = '')
SELECT COUNT(*) FROM current AS c JOIN current_terms AS ct ON c.bioguide_id = ct.bioguide WHERE c.official_full_name = 'Sherrod Brown';
SELECT ct.official_full_name FROM current AS ct JOIN current-terms AS cter ON ct.bioguide_id = cter.bioguide WHERE cter.state_rank IS NOT NULL;
SELECT ct.state FROM current AS cu JOIN current_terms AS ct ON cu.bioguide_id = ct.bioguide WHERE cu.official_full_name = 'Sherrod Brown' AND ct.start = '1993-01-05';
SELECT COUNT(*) FROM (   SELECT c.bioguide_id   FROM current AS c   JOIN current_terms AS ct ON c.bioguide_id = ct.bioguide   WHERE c.gender_bio = 'F'   GROUP BY c.bioguide_id   HAVING COUNT(DISTINCT ct.type) > 4 ) AS result;
SELECT COUNT(*) FROM (   SELECT c.bioguide_id   FROM current c   JOIN current_terms ct ON c.bioguide_id = ct.bioguide   WHERE c.birthday_bio >= '1960-01-01'   GROUP BY c.bioguide_id   HAVING COUNT(ct.bioguide) > 6 )
SELECT COUNT(T2.bioguide) / COUNT(DISTINCT T1.bioguide_id) AS avg_terms FROM current AS T1 JOIN current-terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' GROUP BY T1.bioguide_id;
SELECT CAST(COUNT(CASE WHEN T2.instagram IS NULL THEN T1.bioguide_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bioguide_id) FROM current AS T1 JOIN social_media AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Roman Catholic'
SELECT COUNT(*) FROM current WHERE gender_bio = 'M';
SELECT COUNT(*) FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE ct.party = 'Republican';
SELECT COUNT(*) FROM social_media WHERE instagram IS NOT NULL AND instagram <> '';
SELECT COUNT(*) FROM historical WHERE gender_bio = 'F';
Error: 第 4761 个样本有 2 个SQL。
SELECT T2.party FROM current AS T1 JOIN current-terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Sherrod' AND T1.last_name = 'Brown' AND T2.start = '2005'
SELECT T1.official_full_name FROM current AS T1 JOIN current-terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state_rank = 'senior' AND T2.type = 'sen' AND T2.start LIKE '2013%';
SELECT T2.youtube FROM current AS T1 JOIN social_media AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Chris Van Hollen'
SELECT COUNT(*) FROM social_media JOIN current ON social_media.bioguide = current.bioguide_id WHERE current.first_name = 'Mark' AND current.last_name = 'Warner' AND (social_media.facebook IS NOT NULL OR social_media.instagram IS NOT NULL OR social_media.twitter IS NOT NULL OR social_media.youtube IS NOT NULL);
SELECT last_name FROM current JOIN current-terms ON current.bioguide_id = current-terms.bioguide WHERE current-terms.state = 'CA';
SELECT official_full_name FROM current WHERE gender_bio = 'F' AND bioguide_id IN (     SELECT bioguide     FROM current-terms     WHERE type = 'sen' );
SELECT govtrack_id FROM legislator.current WHERE official_full_name = 'Chris Van Hollen'
SELECT twitter FROM social_media JOIN current ON social_media.bioguide = current.bioguide_id WHERE current.official_full_name = 'Roger F. Wicker';
SELECT h.official_full_name FROM historical AS h JOIN historical-terms AS ht ON h.bioguide_id = ht.bioguide WHERE ht.party = 'Pro-Administration' AND ht.start <= 1791 AND ht.end >= 1791;
SELECT T1.first_name, T1.last_name FROM current AS T1 JOIN current-terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND T2.party = 'Republican' AND T2.end > CURDATE();
SELECT ct.district FROM current AS cu JOIN current_terms AS ct ON cu.bioguide_id = ct.bioguide WHERE cu.official_full_name = 'Chris Van Hollen';
SELECT COUNT(*) FROM current_terms WHERE name = 'Richard Durbin' AND district = 20;
SELECT COUNT(c.bioguide_id) / 22 AS avg_number_of_male_democrats FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE c.gender_bio = 'M' AND ct.party = 'Democrat' AND ct.start >= 2000 AND ct.end <= 2021;
WITH current_female AS (   SELECT COUNT(*) AS current_females   FROM legislator.current   WHERE gender_bio = 'F' ), historical_female AS (   SELECT COUNT(*) AS historical_females   FROM legislator.historical   WHERE gender_bio = 'F' ), total_current AS (   SELECT COUNT(*) AS total_current   FROM legislator.current ), total_historical AS (   SELECT COUNT(*) AS total_historical   FROM legislator.historical ) SELECT   (CAST(current_females.current_females AS FLOAT) / total_current.total_current) * 100 AS current_percentage,   (CAST(historical_females.historical_females AS FLOAT) / total_historical.total_historical) * 100 AS historical_percentage,   CASE     WHEN (CAST(current_females.current_females AS FLOAT) / total_current.total_current) > (CAST(historical_females.historical_females AS FLOAT) / total_historical.total_historical)     THEN 'Current has the highest percentage'     ELSE 'Historical has the highest percentage'   END AS highest_percentage FROM current_female, historical_female, total_current, total_historical;
SELECT youtube_id FROM social_media WHERE youtube = 'RepWassermanSchultz';
SELECT sm.facebook, sm.twitter, sm.youtube FROM current AS c JOIN social_media AS sm ON c.bioguide_id = sm.bioguide WHERE c.official_full_name = 'Adam Kinzinger';
SELECT ct.party FROM current AS c JOIN current_terms AS ct ON c.bioguide_id = ct.bioguide WHERE c.first_name = 'Christopher' AND c.middle_name = 'Henderson' AND c.last_name = 'Clark';
Error: 第 4779 个样本有 2 个SQL。
Error: 第 4780 个样本有 2 个SQL。
SELECT first_name, last_name FROM historical JOIN historical_terms ON historical.bioguide_id = historical_terms.bioguide WHERE party = 'National Greenbacker';
SELECT official_full_name FROM current WHERE bioguide_id IN (     SELECT bioguide     FROM social_media     WHERE youtube = 'RoskamIL06' );
SELECT T1.official_full_name FROM current AS T1 JOIN social_media AS T2 ON T1.bioguide_id = T2.bioguide WHERE (T2.youtube IS NULL OR T2.youtube = '') AND (T2.instagram IS NULL OR T2.instagram = '') AND (T2.twitter IS NULL OR T2.twitter = '') AND T2.facebook IS NOT NULL AND T2.facebook != '' LIMIT 10;
Error: 第 4784 个样本有 2 个SQL。
SELECT ct.contact_form FROM current AS c JOIN current_terms AS ct ON c.bioguide_id = ct.bioguide WHERE c.official_full_name = 'Claire McCaskill'
SELECT wikipedia_id FROM historical JOIN historical_terms ON historical.bioguide_id = historical_terms.bioguide WHERE party = 'Readjuster Democrat'
Error: 第 4787 个样本有 2 个SQL。
Error: 第 4788 个样本有 2 个SQL。
Error: 第 4789 个样本有 2 个SQL。
Error: 第 4790 个样本有 2 个SQL。
SELECT COUNT(*) FROM current_terms WHERE end = '2009' AND party = 'Republican';
Error: 第 4792 个样本有 2 个SQL。
SELECT CAST(COUNT(CASE WHEN class = 1 THEN bioguide END) AS REAL) * 100 / COUNT(bioguide) FROM current_terms WHERE type = 'sen' AND class IS NOT NULL;
SELECT official_full_name FROM current JOIN current-terms ON current.bioguide_id = current-terms.bioguide WHERE party = 'Independent';
SELECT SUM(     (SELECT STRFTIME('%Y', end) FROM current_terms WHERE bioguide = (         SELECT bioguide_id FROM legislator.current WHERE official_full_name = 'Jr. John Conyers'     ) ) -     STRFTIME('%Y', start) ) as years_served FROM current_terms WHERE bioguide = (     SELECT bioguide_id FROM legislator.current WHERE official_full_name = 'Jr. John Conyers' );
Error: 第 4796 个样本有 2 个SQL。
SELECT ct.official_full_name, ct.religion_bio, ctt.party FROM current AS ct JOIN current-terms AS ctt ON ct.bioguide_id = ctt.bioguide WHERE ctt.state = 'ME';
Error: 第 4798 个样本有 2 个SQL。
SELECT MAX(current_terms.end) AS last_serving_date FROM current_terms JOIN current ON current_terms.bioguide = current.bioguide_id WHERE current.official_full_name = 'Matt Salmon'
SELECT T2.party, T2.state FROM historical AS T1 JOIN historical-terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.house_history_id IS NOT NULL AND YEAR(T1.birthday_bio) = 1738;
SELECT current.bioguide_id, current.official_full_name FROM current JOIN current_terms ON current.bioguide_id = current_terms.bioguide WHERE current_terms.party = 'Liberal Republican';
SELECT COUNT(*) FROM current AS C JOIN current-terms AS CT ON C.bioguide_id = CT.bioguide WHERE CT.start = '1793-12-02' AND C.gender_bio = 'M';
SELECT     SUM(CASE WHEN start LIKE '1875%' THEN 1 ELSE 0 END) AS num_1875,     SUM(CASE WHEN start LIKE '2005%' THEN 1 ELSE 0 END) AS num_2005 FROM     (SELECT * FROM `legislator.current-terms`     UNION ALL     SELECT * FROM `legislator.historical-terms`) AS terms;
SELECT official_full_name, twitter, youtube FROM legislator.current JOIN legislator.social_media ON legislator.current.bioguide_id = legislator.social_media.bioguide WHERE first_name = 'Richard';
SELECT ct.start, ct.end, ct.party FROM current_terms AS ct JOIN current AS c ON ct.bioguide = c.bioguide_id WHERE c.first_name = 'Pearl' AND c.middle_name = 'Peden' AND c.last_name = 'Oldfield';
SELECT birthday_bio FROM legislator.current WHERE first_name = 'Amy' AND last_name = 'Klobuchar';
SELECT COUNT(*) FROM (   SELECT *   FROM current   UNION   SELECT *   FROM historical ) AS combined WHERE fec_id IS NULL OR fec_id = '';
SELECT COUNT(*) FROM current WHERE gender_bio = 'F';
SELECT first_name, last_name FROM legislator.current WHERE opensecrets_id IS NOT NULL AND opensecrets_id <> '' UNION SELECT first_name, last_name FROM legislator.historical WHERE opensecrets_id IS NOT NULL AND opensecrets_id <> '';
SELECT middle_name FROM legislator.current WHERE birthday_bio = '1956-08-24';
SELECT COUNT(*) FROM current_terms WHERE title = 'Majority Leader';
Error: 第 4812 个样本有 2 个SQL。
SELECT T1.gender_bio FROM current AS T1 JOIN current-terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.address = '317 Russell Senate Office Building Washington DC 20510'
SELECT first_name FROM current JOIN current-terms ON current.bioguide_id = current-terms.bioguide WHERE state_rank = 'senior' AND chamber = 'senate';
SELECT COUNT(*) FROM current WHERE gender_bio = 'M' AND (current_terms.class IS NULL OR current_terms.class = '') AND current.bioguide_id = current_terms.bioguide;
SELECT (COUNT(c.bioguide_id) * 1.0 / (SELECT COUNT(*) FROM current WHERE YEAR(birthday_bio) = 1964)) * 100 AS percentage FROM current c JOIN current_terms ct ON c.bioguide_id = ct.bioguide WHERE YEAR(c.birthday_bio) = 1964 AND ct.class IS NOT NULL;
SELECT (COUNT(CASE WHEN T2.class IS NULL AND T1.birthday_bio <= 1975 THEN T1.bioguide_id END) * 1.0 / COUNT(T1.bioguide_id)) * 100 AS percentage FROM `legislator.current` T1 JOIN `legislator.current-terms` T2 ON T1.bioguide_id = T2.bioguide;
SELECT T2.twitter FROM current AS T1 JOIN social_media AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = '1946-05-27'
SELECT T1.opensecrets_id FROM legislator.current AS T1 JOIN legislator.social-media AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.youtube = 'Bluetkemeyer'
SELECT T1.facebook FROM social_media AS T1 JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T2.first_name = 'Ralph' AND T2.last_name = 'Abraham'
SELECT T1.first_name FROM current AS T1 JOIN current-terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.address = '1005 Longworth HOB; Washington DC 20515-1408'
Error: 第 4822 个样本有 2 个SQL。
SELECT COUNT(*) FROM current JOIN current_terms ON current.bioguide_id = current_terms.bioguide WHERE current.gender_bio = 'F' AND (current_terms.class IS NULL OR current_terms.class = '');
SELECT T1.religion_bio FROM legislator.current AS T1 JOIN legislator.social_media AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.youtube = 'MaxineWaters'
SELECT COUNT(*) FROM (   SELECT ct.bioguide   FROM current_terms ct   JOIN current c ON ct.bioguide = c.bioguide_id   WHERE ct.title LIKE '%Minority Leader%' AND (c.fec_id IS NULL OR c.fec_id = '') ) as minority_leaders_not_registered_fec;
Error: 第 4826 个样本有 2 个SQL。
SELECT facebook_id FROM social_media WHERE facebook = "RepWilson";
SELECT COUNT(*) FROM (   SELECT first_name   FROM current   WHERE first_name = 'John'   UNION ALL   SELECT first_name   FROM historical   WHERE first_name = 'John' ) AS combined_names;
SELECT district FROM current_terms WHERE party = 'Anti-Administration';
Error: 第 4830 个样本有 2 个SQL。
SELECT google_entity_id_id FROM legislator.current WHERE first_name = 'Benjamin' AND last_name = 'Hawkins';
SELECT h.last_name, h.first_name FROM historical AS h JOIN historical_terms AS ht ON h.bioguide_id = ht.bioguide WHERE ht.type = 'sen' AND ht.party = 'Pro-Administration' AND ht.start = '1789-03-04' AND ht.end = '1791-12-31';
Error: 第 4833 个样本有 2 个SQL。
SELECT T1.official_full_name FROM current AS T1 JOIN current_terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Independent' UNION SELECT T3.official_full_name FROM historical AS T3 JOIN historical_terms AS T4 ON T3.bioguide_id = T4.bioguide WHERE T4.party = 'Independent';
SELECT ct.opensecrets_id, ct.thomas_id FROM current AS c JOIN current-terms AS ct ON c.bioguide_id = ct.bioguide WHERE ct.party = 'Democrat' AND ct.type = 'sen' AND ct.state = 'NJ';
SELECT T1.google_entity_id_id FROM current AS T1 JOIN current_terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.type = 'sen' AND T2.state = 'NY';
SELECT T1.religion_bio FROM current AS T1 JOIN current-terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.rss_url = 'http://www.corker.senate.gov/public/index.cfm/rss/feed'
SELECT T2.party FROM current AS T1 JOIN current-terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Susan M. Collins'
SELECT T2.district FROM current AS T1 JOIN current-terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Jonathan' AND T1.last_name = 'Grout' AND T2.type = 'rep';
SELECT T2.party, T2.state FROM current AS T1 JOIN current_terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.opensecrets_id = 'N00003689' AND T1.thomas_id = '186';
Error: 第 4841 个样本有 2 个SQL。
Error: 第 4842 个样本有 2 个SQL。
Error: 第 4843 个样本有 2 个SQL。
SELECT     (SELECT COUNT(*) FROM current AS c JOIN current-terms AS ct ON c.bioguide_id = ct.bioguide WHERE c.gender_bio = 'F' AND strftime('%Y', c.birthday_bio) BETWEEN '1930' AND '1970' AND ct.type = 'sen') -     (SELECT COUNT(*) FROM current AS c JOIN current-terms AS ct ON c.bioguide_id = ct.bioguide WHERE c.gender_bio = 'F' AND strftime('%Y', c.birthday_bio) BETWEEN '1930' AND '1970' AND ct.type = 'rep') AS difference;
SELECT     CAST(SUM(CASE WHEN T2.party = 'Independent' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.party) FROM     (SELECT * FROM current WHERE gender_bio = 'M' AND strftime('%Y', birthday_bio) BETWEEN '1955' AND '1965') AS T1 JOIN     (SELECT * FROM current-terms WHERE relation = 'member') AS T2 ON     T1.bioguide_id = T2.bioguide;
SELECT first_name, last_name FROM current WHERE bioguide_id = 'W000059';
SELECT CASE          WHEN (first_name = 'Thomas' AND last_name = 'Carnes' AND ballotpedia_id IS NULL) THEN 'No Ballotpedia Account'          WHEN (first_name = 'Thomas' AND last_name = 'Carnes' AND ballotpedia_id IS NOT NULL) THEN 'Has Ballotpedia Account'        END AS Ballotpedia_Account_Status FROM legislator.current;
Error: 第 4848 个样本有 2 个SQL。
SELECT * FROM current WHERE gender_bio = 'F' UNION SELECT * FROM historical WHERE gender_bio = 'F';
SELECT COUNT(DISTINCT district) FROM current_terms WHERE state = 'ID';
Error: 第 4851 个样本有 2 个SQL。
SELECT     CAST(COUNT(CASE WHEN gender_bio = 'M' THEN 1 END) AS FLOAT) /     COUNT(CASE WHEN gender_bio = 'F' THEN 1 END) AS ratio FROM     legislator.current
Error: 第 4853 个样本有 2 个SQL。
Error: 第 4854 个样本有 2 个SQL。
SELECT historical_terms.name, historical_terms.district, historical_terms.state FROM historical_terms JOIN historical ON historical_terms.bioguide = historical.bioguide_id WHERE historical_terms.type = 'rep' AND historical_terms.start LIKE '1789%';
SELECT T2.district FROM historical AS T1 JOIN historical_terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Benjamin' AND T1.last_name = 'Contee'
SELECT address FROM current_terms WHERE bioguide = (SELECT bioguide_id FROM current WHERE first_name = 'Amy' AND last_name = 'Klobuchar') AND start = '2001-04-01';
SELECT ct.name FROM current_terms AS ct WHERE ct.state_rank = 'junior' AND ct.start LIKE '1997%';
SELECT COUNT(*) FROM current AS c JOIN current-terms AS ct ON c.bioguide_id = ct.bioguide WHERE c.gender_bio = 'F' AND ct.state = 'CA' AND ct.type = 'rep' AND YEAR(ct.start) = 2015;
SELECT twitter_id FROM social_media WHERE bioguide = 'C001056';
SELECT T1.facebook_id FROM current AS T1 JOIN current-terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Democrat';
SELECT historical.bioguide_id, historical.first_name, historical.last_name FROM historical JOIN historical_terms ON historical.bioguide_id = historical_terms.bioguide WHERE historical.gender_bio = 'F' AND historical_terms.end = '1791-03-03';
SELECT c.first_name, c.last_name, ct.state, c.religion_bio FROM current AS c JOIN current_terms AS ct ON c.bioguide_id = ct.bioguide WHERE c.religion_bio = 'Jewish' AND ct.state = 'FL'
Error: 第 4864 个样本有 2 个SQL。
SELECT     (COUNT(CASE WHEN strftime('%Y', T2.start) BETWEEN '2000' AND '2017' THEN T1.bioguide_id END) * 100.0 / COUNT(T1.bioguide_id)) AS percentage_21st_century FROM     current AS T1 JOIN     current-terms AS T2 ON T1.bioguide_id = T2.bioguide;
Error: 第 4866 个样本有 2 个SQL。
SELECT COUNT(*) FROM current_terms WHERE type = 'sen' AND class = 1 AND party = 'Republican';
Error: 第 4868 个样本有 3 个SQL。
SELECT COUNT(*) FROM historical_terms WHERE state = 'CA' AND type = 'rep' AND end LIKE '1995%';
SELECT first_name, last_name FROM legislator.current WHERE birthday_bio = (SELECT MIN(birthday_bio) FROM legislator.current);
SELECT ct.bioguide FROM current_terms AS ct WHERE ct.type = 'rep' AND ct.party = 'Democrat' AND ct.district = 13 AND ct.end = '2019-01-03';
SELECT twitter FROM social_media WHERE bioguide = (SELECT bioguide_id FROM current WHERE first_name = 'Jason' AND last_name = 'Lewis');
SELECT ct.name FROM current AS c JOIN current-terms AS ct ON c.bioguide_id = ct.bioguide WHERE ct.party = 'Independent' AND ct.type = 'sen' AND strftime('%Y', ct.start) >= '2011' AND ct.caucus = 'Democrat';
SELECT COUNT(*) FROM (   SELECT *   FROM current   UNION   SELECT *   FROM historical ) AS combined_legislators JOIN social_media ON combined_legislators.bioguide_id = social_media.bioguide WHERE combined_legislators.religion_bio = 'Jewish' AND social_media.facebook IS NULL;
SELECT T2.party FROM legislator.current AS T1 JOIN legislator.current_terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Baptist' GROUP BY T2.party ORDER BY COUNT(T2.party) DESC LIMIT 1;
SELECT T1.official_full_name FROM legislator.current AS T1 JOIN legislator.social_media AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook IS NOT NULL AND T2.instagram IS NOT NULL AND T2.twitter IS NOT NULL AND T2.youtube IS NOT NULL;
SELECT COUNT(DISTINCT T2.district) FROM current AS T1 JOIN current-terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'John' AND T1.last_name = 'Conyers' AND T1.suffix_name = 'Jr.'
SELECT T1.wikipedia_id FROM current AS T1 JOIN current-terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.party = 'Anti-Administration' AND T2.type = 'sen';
SELECT ct.name FROM current AS c JOIN current_terms AS ct ON c.bioguide_id = ct.bioguide WHERE (SELECT COUNT(*) FROM historical_terms WHERE bioguide = c.bioguide_id AND district != ct.district) = 0 AND (strftime('%Y', ct.end) - strftime('%Y', ct.start)) = 26;
SELECT COUNT(*) FROM current AS c JOIN current-terms AS ct ON c.bioguide_id = ct.bioguide WHERE c.first_name = 'Benjamin' AND ct.party = 'Federalist' AND ct.type = 'rep';
SELECT COUNT(*) FROM (   SELECT c.bioguide_id   FROM current AS c   JOIN current_terms AS ct ON c.bioguide_id = ct.bioguide   WHERE c.gender_bio = 'F' AND ct.type = 'rep' AND ct.state = 'CA'   GROUP BY c.bioguide_id   HAVING SUM(julianday(ct.end) - julianday(ct.start))/365 > 10 );
Error: 第 4882 个样本有 2 个SQL。
SELECT ct.name FROM current AS c JOIN current_terms AS ct ON c.bioguide_id = ct.bioguide WHERE c.religion_bio = 'Lutheran' AND ct.type = 'rep' AND ct.state = 'OH' AND (strftime('%Y', ct.end) - strftime('%Y', ct.start)) = 14;
SELECT COUNT(*) FROM current WHERE strftime('%Y', birthday_bio) > '1960' AND google_entity_id_id IS NULL;
SELECT official_full_name FROM current WHERE house_history_id IS NOT NULL;
SELECT COUNT(*) FROM current WHERE icpsr_id IS NOT NULL AND maplight_id IS NOT NULL;
SELECT COUNT(*) FROM current WHERE gender_bio = 'F' AND lis_id IS NOT NULL;
SELECT religion_bio FROM current WHERE first_name = 'Sherrod' AND last_name = 'Brown';
SELECT religion_bio, COUNT(*) as count FROM `legislator.current` GROUP BY religion_bio ORDER BY count DESC LIMIT 1;
SELECT sm.instagram FROM social_media sm JOIN current c ON sm.bioguide = c.bioguide_id WHERE c.first_name = 'Bob' AND c.last_name = 'Corker';
SELECT COUNT(*) FROM current c JOIN social_media sm ON c.bioguide_id = sm.bioguide WHERE c.thomas_id IS NOT NULL AND sm.instagram IS NOT NULL;
SELECT sm.facebook FROM current c JOIN social_media sm ON c.bioguide_id = sm.bioguide WHERE c.wikipedia_id IS NOT NULL;
SELECT COUNT(*) FROM (   SELECT c.bioguide_id, COUNT(ct.term_id) AS term_count   FROM current c   JOIN current_terms ct ON c.bioguide_id = ct.bioguide   WHERE c.birthday_bio = (SELECT MIN(birthday_bio) FROM current)   GROUP BY c.bioguide_id ) AS subquery;
SELECT t2.phone FROM current AS t1 JOIN current-terms AS t2 ON t1.bioguide_id = t2.bioguide WHERE t1.first_name = 'Sherrod' AND t1.last_name = 'Brown' AND t2.start = '2013-01-03';
SELECT COUNT(*) FROM current AS c JOIN current_terms AS ct ON c.bioguide_id = ct.bioguide WHERE c.first_name = 'Sherrod' AND c.last_name = 'Brown' AND ct.party = 'Democrat';
SELECT ct.name FROM current AS cu JOIN current_terms AS ct ON cu.bioguide_id = ct.bioguide WHERE ct.start = '2013-01-03';
SELECT COUNT(*) FROM current AS c JOIN current_terms AS ct ON c.bioguide_id = ct.bioguide WHERE ct.start = '2013-01-03' AND c.gender_bio = 'F';
SELECT T1.official_full_name FROM current AS T1 JOIN current_terms AS T2 ON T1.bioguide_id = T2.bioguide GROUP BY T1.bioguide_id ORDER BY COUNT(T2.bioguide) DESC LIMIT 1;
SELECT COUNT(*) FROM current AS c JOIN current_terms AS ct ON c.bioguide_id = ct.bioguide WHERE c.first_name = 'Sherrod' AND c.last_name = 'Brown' AND ct.district = 13;
SELECT T1.official_full_name FROM current AS T1 JOIN social_media AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook = 'senjoniernst'
SELECT     ct1.official_full_name,     COUNT(*) AS total_terms FROM     current AS c JOIN     current_terms AS ct1 ON c.bioguide_id = ct1.bioguide WHERE     c.official_full_name IN ('Sherrod Brown', 'Maria Cantwell') GROUP BY     ct1.official_full_name HAVING     total_terms = (SELECT                     MAX(t2.total_terms)                 FROM                     (SELECT                         ct2.official_full_name,                         COUNT(*) AS total_terms                     FROM                         current AS c2                     JOIN                         current_terms AS ct2 ON c2.bioguide_id = ct2.bioguide                     WHERE                         c2.official_full_name IN ('Sherrod Brown', 'Maria Cantwell')                     GROUP BY                         ct2.official_full_name) t2);
SELECT MULTIPLY(DIVIDE(SUM(IIF(T1.gender_bio = 'F', 1, 0)), COUNT(DISTINCT T2.bioguide)), 100.0) FROM `current` AS T1 JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide GROUP BY T1.bioguide_id HAVING COUNT(DISTINCT T2.type) > 4;
SELECT AVG(count_terms) FROM (     SELECT COUNT(t.bioguide) as count_terms     FROM current c     JOIN current_terms t ON c.bioguide_id = t.bioguide     WHERE c.wikipedia_id IS NOT NULL     GROUP BY t.bioguide ) as subquery;
Error: 第 4904 个样本有 2 个SQL。
Error: 第 4905 个样本有 2 个SQL。
SELECT address FROM current-terms WHERE contact_form = 'http://www.carper.senate.gov/contact/';
SELECT sm.instagram FROM social_media sm JOIN current c ON sm.bioguide = c.bioguide_id WHERE c.first_name = 'Benjamin' AND c.last_name = 'Hawkins';
SELECT ct.bioguide FROM current AS c JOIN current_terms AS ct ON c.bioguide_id = ct.bioguide WHERE c.religion_bio = 'Catholic' AND ct.state = 'NE';
SELECT t1.maplight_id FROM current AS t1 JOIN current-terms AS t2 ON t1.bioguide_id = t2.bioguide WHERE t2.state = 'ME' AND t2.type = 'rep';
Error: 第 4910 个样本有 2 个SQL。
SELECT ct.contact_form FROM current AS c JOIN current_terms AS ct ON c.bioguide_id = ct.bioguide WHERE c.first_name = 'Rick' AND c.last_name = 'Crawford';
SELECT COUNT(*) FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE c.gender_bio = 'F' AND ct.type = 'rep' AND ct.state = 'MI';
SELECT MULTIPLY(DIVIDE((SELECT COUNT(*) FROM current AS C JOIN current_terms AS CT ON C.bioguide_id = CT.bioguide WHERE C.gender_bio = 'F' AND CT.type = 'sen' AND CT.state = 'ME'), (SELECT COUNT(*) FROM current AS C JOIN current_terms AS CT ON C.bioguide_id = CT.bioguide WHERE C.gender_bio = 'F' AND CT.state = 'ME')), 100.0);
SELECT g.games_name FROM games g JOIN games_competitor gc ON g.id = gc.games_id JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'John Aalberg';
SELECT T3.games_name FROM person AS T1 JOIN games_competitor AS T2 ON T1.id = T2.person_id JOIN games AS T3 ON T2.games_id = T3.id WHERE T1.full_name = 'John Aalberg' AND T2.age = 31;
SELECT gc.age FROM games_competitor gc JOIN person p ON gc.person_id = p.id JOIN games g ON gc.games_id = g.id WHERE p.full_name = 'John Aalberg' AND g.games_name = '1994 Winter';
SELECT COUNT(*) FROM person_region pr JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Finland';
SELECT p.full_name FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Finland';
Error: 第 4919 个样本有 2 个SQL。
SELECT T3.noc FROM person AS T1 JOIN person_region AS T2 ON T1.id = T2.person_id JOIN noc_region AS T3 ON T2.region_id = T3.id WHERE T1.gender = 'M' ORDER BY T1.height DESC LIMIT 1;
SELECT COUNT(*) FROM person JOIN person_region ON person.id = person_region.person_id JOIN noc_region ON person_region.region_id = noc_region.id WHERE noc_region.region_name = 'Finland' AND person.gender = 'F';
SELECT T2.city_name FROM games_city AS T1 JOIN city AS T2 ON T1.city_id = T2.id JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1992 Summer'
SELECT g.games_name FROM games AS g JOIN games_city AS gc ON g.id = gc.games_id JOIN city AS c ON gc.city_id = c.id WHERE c.city_name = 'London';
SELECT MIN(g.games_year) FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON c.id = gc.city_id WHERE c.city_name = 'London';
SELECT COUNT(gc.games_id) FROM games_city AS gc JOIN city AS c ON gc.city_id = c.id WHERE c.city_name = 'London';
SELECT AVG(p.height) FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Finland' AND p.gender = 'M';
SELECT     (COUNT(CASE WHEN pr.region_name = 'Finland' THEN pc.person_id END) * 100 / COUNT(pc.person_id)) AS percentage FROM     games_competitor gc JOIN     games g ON gc.games_id = g.id JOIN     person_region pr ON gc.person_id = pr.person_id JOIN     noc_region nr ON pr.region_id = nr.id WHERE     g.games_name = '1994 Winter';
SELECT T1.sport_name FROM sport AS T1 JOIN event AS T2 ON T1.id = T2.sport_id WHERE T2.event_name = 'Shooting Women''s Trap'
SELECT T2.city_name FROM games_city AS T1 JOIN city AS T2 ON T1.city_id = T2.id JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '1936 Winter'
SELECT COUNT(*) FROM games JOIN games_city ON games.id = games_city.games_id JOIN city ON games_city.city_id = city.id WHERE city.city_name = 'London';
SELECT COUNT(*) FROM event WHERE sport_id = (SELECT id FROM sport WHERE sport_name = 'Swimming');
SELECT r.region_name FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region r ON pr.region_id = r.id WHERE p.full_name = 'Peter Kohnke';
SELECT gc.games_id FROM games_competitor gc JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'Jessica Carolina Aguilera Aguilera';
SELECT T1.sport_name FROM sport AS T1 JOIN event AS T2 ON T1.id = T2.sport_id GROUP BY T1.id ORDER BY COUNT(T2.id) DESC LIMIT 1;
SELECT p.full_name FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Sweden' AND p.height = (     SELECT MAX(height)     FROM person     JOIN person_region ON person.id = person_region.person_id     JOIN noc_region ON person_region.region_id = noc_region.id     WHERE noc_region.region_name = 'Sweden' );
SELECT COUNT(*) FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Guatemala';
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id GROUP BY p.id, p.full_name ORDER BY COUNT(gc.games_id) DESC LIMIT 1;
SELECT p.full_name FROM person p WHERE p.id = 90991;
SELECT COUNT(ce.competitor_id) FROM competitor_event ce JOIN games_competitor gc ON ce.competitor_id = gc.person_id JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'Martina Kohlov';
SELECT (weight / (height * height)) as bmi FROM person WHERE id = 147420;
SELECT     (COUNT(CASE WHEN p.gender = 'M' THEN p.id END) * 100.0 / COUNT(p.id)) AS percentage FROM     person AS p JOIN     person_region AS pr ON p.id = pr.person_id JOIN     noc_region AS nr ON pr.region_id = nr.id WHERE     nr.region_name = 'Estonia';
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id ORDER BY gc.age ASC LIMIT 1;
SELECT COUNT(*) FROM games_competitor gc JOIN person p ON gc.person_id = p.id JOIN competitor_event ce ON gc.person_id = ce.competitor_id JOIN event e ON ce.event_id = e.id WHERE gc.age = 24 AND e.event_name = 'Basketball Men''s Basketball';
SELECT e.event_name FROM event e JOIN sport s ON e.sport_id = s.id WHERE s.sport_name = 'Art Competitions';
SELECT COUNT(*) FROM competitor_event ce JOIN medal m ON ce.medal_id = m.id JOIN event e ON ce.event_id = e.id JOIN games_competitor gc ON ce.competitor_id = gc.person_id JOIN person p ON gc.person_id = p.id WHERE m.medal_name = 'Gold' AND p.full_name = 'Henk Jan Zwolle';
SELECT e.event_name FROM event e JOIN competitor_event ce ON e.id = ce.event_id JOIN medal m ON m.id = ce.medal_id WHERE m.medal_name = 'Gold' GROUP BY e.event_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM person JOIN person_region ON person.id = person_region.person_id JOIN noc_region ON person_region.region_id = noc_region.id WHERE noc_region.region_name = 'Australia';
SELECT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id GROUP BY c.city_name HAVING COUNT(gc.games_id) >= 3;
SELECT COUNT(*) FROM games JOIN games_city ON games.id = games_city.games_id JOIN city ON city.id = games_city.city_id WHERE games.season = 'Summer' AND city.city_name = 'Stockholm';
SELECT r.region_name FROM noc_region r JOIN person_region pr ON r.id = pr.region_id GROUP BY r.region_name ORDER BY COUNT(pr.person_id) DESC LIMIT 1;
SELECT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id WHERE g.games_year = (SELECT MIN(games_year) FROM games);
SELECT g.games_name FROM games g JOIN games_competitor gc ON g.id = gc.games_id WHERE gc.person_id = (     SELECT pc.person_id     FROM games_competitor pc     WHERE pc.age = (         SELECT MAX(age)         FROM games_competitor     ) )
SELECT COUNT(*) FROM games_competitor JOIN games ON games_competitor.games_id = games.id WHERE games.games_name = '1992 Summer';
SELECT     (SELECT COUNT(*) FROM competitor_event ce INNER JOIN games_competitor gc ON ce.competitor_id = gc.person_id INNER JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'Michael Fred Phelps, II') AS total_events,     (SELECT DIVIDE(COUNT(*), (SELECT COUNT(*) FROM competitor_event ce INNER JOIN games_competitor gc ON ce.competitor_id = gc.person_id INNER JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'Michael Fred Phelps, II')) * 100 FROM competitor_event ce INNER JOIN games_competitor gc ON ce.competitor_id = gc.person_id INNER JOIN person p ON gc.person_id = p.id INNER JOIN medal m ON ce.medal_id = m.id WHERE p.full_name = 'Michael Fred Phelps, II' AND m.medal_name = 'Gold') AS gold_percentage;
Error: 第 4955 个样本有 2 个SQL。
SELECT age, COUNT(person_id) as num_competitors FROM games_competitor GROUP BY age ORDER BY num_competitors DESC LIMIT 1;
SELECT city.city_name FROM city JOIN games_city ON city.id = games_city.city_id WHERE city.city_name LIKE 'M%';
SELECT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id WHERE g.games_name IN ('1976 Winter', '1976 Summer');
SELECT m.medal_name FROM medal m JOIN competitor_event ce ON ce.medal_id = m.id JOIN person p ON p.id = ce.competitor_id WHERE p.full_name = 'Coleen Dufresne';
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id GROUP BY p.full_name ORDER BY COUNT(ce.medal_id) DESC LIMIT 1;
SELECT r.region_name FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region r ON pr.region_id = r.id WHERE p.full_name = 'Estelle Nze Minko';
SELECT DISTINCT s.sport_name FROM sport s JOIN event e ON s.id = e.sport_id JOIN competitor_event ce ON e.id = ce.event_id JOIN games_competitor gc ON gc.id = ce.competitor_id JOIN person p ON p.id = gc.person_id WHERE p.full_name = 'Chin Eei Hui';
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id WHERE gc.age = (SELECT MAX(age) FROM games_competitor);
Error: 第 4964 个样本有 2 个SQL。
SELECT COUNT(*) FROM games_competitor gc JOIN person p ON gc.person_id = p.id JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE p.gender = 'M' AND nr.region_name = 'Belgium';
SELECT COUNT(*) FROM games_competitor WHERE games_id IN (     SELECT games_id     FROM games_city     WHERE city_id IN (         SELECT id         FROM city         WHERE city_name = 'Sapporo'     ) );
SELECT games_year FROM games JOIN games_competitor ON games.id = games_competitor.games_id JOIN person ON games_competitor.person_id = person.id WHERE person.full_name = 'Morten Aleksander Djupvik';
Error: 第 4968 个样本有 2 个SQL。
SELECT COUNT(DISTINCT event.event_name) FROM event JOIN sport ON event.sport_id = sport.id WHERE sport.sport_name = 'Modern Pentathlon';
SELECT     (COUNT(CASE WHEN p.gender = 'F' THEN p.id END) * 100.0 / COUNT(p.id)) AS percentage FROM     person AS p JOIN     person_region AS pr ON p.id = pr.person_id JOIN     competitor_event AS ce ON p.id = ce.competitor_id JOIN     event AS e ON ce.event_id = e.id WHERE     e.event_name = 'Equestrianism Mixed Three-Day Event, Individual';
SELECT AVG(gc.age) FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_name = '1992 Summer';
SELECT games_year FROM games WHERE season = 'Summer' GROUP BY games_year HAVING COUNT(games_name) = 1;
SELECT COUNT(*) FROM games WHERE games_year BETWEEN 1990 AND 1999;
SELECT COUNT(person_id) FROM games_competitor WHERE games_id = (SELECT id FROM games WHERE games_name = '2014 Winter');
SELECT COUNT(*) FROM (   SELECT ce.competitor_id   FROM competitor_event ce   JOIN person_region pr ON ce.competitor_id = pr.person_id   WHERE pr.region_id = 151 AND ce.medal_id <> 4 ) as subquery;
SELECT COUNT(*) FROM games_competitor gc JOIN person_region pr ON gc.person_id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id JOIN games g ON gc.games_id = g.id WHERE nr.region_name = 'China' AND g.games_name = '2016 Summer';
SELECT COUNT(*) FROM competitor_event ce JOIN medal m ON ce.medal_id = m.id JOIN event e ON ce.event_id = e.id WHERE m.medal_name = 'Gold' AND e.event_name = 'Ice Hockey Men''s Ice Hockey';
SELECT r.region_name FROM noc_region r JOIN person_region pr ON r.id = pr.region_id JOIN games_competitor gc ON pr.person_id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id WHERE ce.medal_id <> 4 GROUP BY r.region_name ORDER BY COUNT(ce.medal_id) DESC LIMIT 1;
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id JOIN event e ON ce.event_id = e.id JOIN sport s ON e.sport_id = s.id JOIN medal m ON ce.medal_id = m.id WHERE s.sport_name = 'Cycling' AND m.medal_name = 'Gold';
SELECT m.medal_name FROM medal m JOIN competitor_event ce ON ce.medal_id = m.id JOIN games_competitor gc ON gc.id = ce.competitor_id JOIN person p ON p.id = gc.person_id WHERE p.full_name = 'Lee Chong Wei' AND m.id <> 4;
SELECT     (COUNT(CASE WHEN pc.gender = 'F' AND gc.age < 20 THEN pc.id END) * 100.0 / COUNT(pc.id)) AS percentage FROM     person pc JOIN     games_competitor gc ON pc.id = gc.person_id JOIN     games g ON gc.games_id = g.id WHERE     g.games_name = '2002 Winter'
SELECT CAST(SUM(CASE WHEN p.gender = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN p.gender = 'F' THEN 1 ELSE 0 END) FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN games g ON gc.games_id = g.id WHERE g.games_name = '2012 Summer';
SELECT     g.games_name,     COUNT(p.person_id) AS participants FROM     games g JOIN     games_competitor gc ON g.id = gc.games_id JOIN     person p ON gc.person_id = p.id WHERE     g.season = 'Summer' GROUP BY     g.games_name ORDER BY     participants DESC, g.games_year LIMIT 1 UNION SELECT     g.games_name,     COUNT(p.person_id) AS participants FROM     games g JOIN     games_competitor gc ON g.id = gc.games_id JOIN     person p ON gc.person_id = p.id WHERE     g.season = 'Summer' GROUP BY     g.games_name ORDER BY     participants ASC, g.games_year LIMIT 1;
SELECT COUNT(*) FROM (   SELECT ce.competitor_id   FROM competitor_event ce   JOIN event e ON ce.event_id = e.id   JOIN sport s ON e.sport_id = s.id   JOIN person_region pr ON ce.competitor_id = pr.person_id   JOIN noc_region nr ON pr.region_id = nr.id   WHERE nr.region_name = 'Malaysia' AND ce.medal_id <> 4 ) AS subquery;
SELECT COUNT(*) FROM (   SELECT pc.person_id   FROM person p   JOIN games_competitor gc ON p.id = gc.person_id   JOIN games g ON gc.games_id = g.id   JOIN competitor_event ce ON gc.person_id = ce.competitor_id   JOIN event e ON ce.event_id = e.id   JOIN sport s ON e.sport_id = s.id   JOIN person_region pr ON p.id = pr.person_id   JOIN noc_region nr ON pr.region_id = nr.id   WHERE g.games_name = '2008 Summer'   AND s.sport_name = 'Canoeing'   AND p.weight / POWER(p.height, 2) >= 30 ) pc ;
SELECT AVG(p.height) FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id JOIN event e ON ce.event_id = e.id JOIN sport s ON e.sport_id = s.id WHERE s.sport_name = 'Basketball' AND e.event_name = 'Basketball Men''s';
SELECT COUNT(*) FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE p.gender = 'F' AND nr.region_name = 'Philippines';
SELECT r.region_name FROM noc_region r JOIN person_region pr ON r.id = pr.region_id JOIN person p ON pr.person_id = p.id WHERE p.full_name = 'Yao Ming';
SELECT MIN(gc.age) FROM games_competitor gc JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'Michael Fred Phelps, II';
SELECT COUNT(*) FROM person WHERE id IN (     SELECT person_id     FROM person_region     WHERE region_id = (         SELECT region_id         FROM person_region         WHERE person_id = (             SELECT id             FROM person             WHERE full_name = 'Clara Hughes'         )     ) );
SELECT COUNT(*) FROM competitor_event ce JOIN event e ON ce.event_id = e.id JOIN games_competitor gc ON ce.competitor_id = gc.person_id JOIN person p ON gc.person_id = p.id WHERE e.event_name = 'Swimming Men''s 200 metres Freestyle' AND p.full_name = 'Ian James Thorpe';
SELECT COUNT(*) FROM (   SELECT ce.competitor_id   FROM competitor_event ce   JOIN event e ON ce.event_id = e.id   JOIN games_competitor gc ON ce.competitor_id = gc.id   JOIN person p ON gc.person_id = p.id   WHERE e.event_name = 'Gymnastics Women''s Individual All-Around' AND ce.medal_id = 1 AND p.full_name = 'Larysa Semenivna Latynina (Diriy-)' ) as t;
SELECT DISTINCT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id JOIN games_competitor gc2 ON g.id = gc2.games_id JOIN person p ON gc2.person_id = p.id JOIN person_region pr ON p.id = pr.person_id WHERE p.full_name = 'Carl Lewis Borack';
SELECT COUNT(*) FROM games JOIN games_city ON games.id = games_city.games_id JOIN city ON games_city.city_id = city.id WHERE city.city_name = 'London';
SELECT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id WHERE g.games_name = '1992 Summer';
SELECT COUNT(*) FROM games_competitor gc JOIN person p ON gc.person_id = p.id JOIN games g ON gc.games_id = g.id WHERE g.games_name = '2016 Summer' AND gc.age > 59;
SELECT g.games_name FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id JOIN games_competitor gc2 ON g.id = gc2.games_id WHERE c.city_name = 'Los Angeles' GROUP BY g.games_name ORDER BY COUNT(gc2.person_id) DESC LIMIT 1;
SELECT COUNT(*) FROM games_competitor gc JOIN competitor_event ce ON gc.id = ce.competitor_id JOIN event e ON ce.event_id = e.id JOIN person p ON gc.person_id = p.id WHERE gc.age = 10 AND e.event_name = 'Gymnastics Men''s Parallel Bars, Teams';
SELECT AVG(gc.age) FROM games_competitor gc JOIN games g ON gc.games_id = g.id JOIN person_region pr ON gc.person_id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE g.games_name = '2016 Summer' AND nr.region_name = 'United States of America';
SELECT region_name FROM noc_region WHERE noc = 'COL';
SELECT sport_name FROM sport WHERE id = 19;
SELECT id FROM event WHERE event_name = 'Shooting Mixed Skeet';
SELECT id FROM sport WHERE sport_name = 'hockey';
SELECT p.weight FROM person p WHERE p.full_name = 'Dagfinn Sverre Aarskog';
SELECT id FROM city WHERE city_name = 'Rio de Janeiro';
SELECT COUNT(*) FROM competitor_event ce JOIN event e ON ce.event_id = e.id JOIN medal m ON ce.medal_id = m.id WHERE e.event_name = 'Rowing Women''s Coxed Eights' AND m.medal_name = 'Gold';
SELECT COUNT(DISTINCT event_name) FROM event WHERE sport_id = (SELECT id FROM sport WHERE sport_name = 'Cycling');
SELECT r.region_name FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region r ON pr.region_id = r.id WHERE p.full_name = 'Vijay Singh Chauhan'
SELECT games_year FROM games JOIN games_city ON games.id = games_city.games_id JOIN city ON games_city.city_id = city.id WHERE city_name = 'Roma';
SELECT COUNT(*) FROM games_competitor JOIN person ON games_competitor.person_id = person.id JOIN games ON games_competitor.games_id = games.id WHERE games.name = '1984 Summer' AND games_competitor.age = 20;
SELECT COUNT(*) FROM games_competitor gc JOIN person p ON gc.person_id = p.id WHERE p.full_name = 'Prithipal Singh';
SELECT COUNT(*) FROM games_competitor JOIN games ON games_competitor.games_id = games.id JOIN person ON games_competitor.person_id = person.id WHERE games.games_name = '1984 Summer' AND games_competitor.age > 50;
SELECT COUNT(DISTINCT event_name) FROM event WHERE sport_id = (SELECT id FROM sport WHERE sport_name = 'Athletics');
SELECT p.full_name FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Russia' ORDER BY p.weight DESC LIMIT 1;
SELECT p.height FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Portugal' ORDER BY p.height DESC LIMIT 1;
SELECT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id WHERE g.games_name = '1968 Winter';
SELECT T2.region_name, COUNT(T2.region_name) AS AthleteCount FROM person_region AS T1 JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY AthleteCount DESC LIMIT 1;
SELECT     (COUNT(p.id WHERE p.height > 175) / COUNT(p.id)) * 100 AS percentage FROM     person p JOIN     person_region pr ON p.id = pr.person_id JOIN     noc_region nr ON pr.region_id = nr.id WHERE     nr.region_name = 'Vanuatu';
SELECT AVG(p.weight) FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Tonga' AND p.gender = 'M';
SELECT T3.city_name FROM games AS T1 JOIN games_city AS T2 ON T1.id = T2.games_id JOIN city AS T3 ON T2.city_id = T3.id WHERE T1.games_name = '1920 Summer'
SELECT COUNT(*) FROM games JOIN games_city ON games.id = games_city.games_id JOIN city ON games_city.city_id = city.id WHERE games_year BETWEEN 1900 AND 1992 AND city_name = 'London';
SELECT COUNT(*) FROM games AS g JOIN games_city AS gc ON g.id = gc.games_id JOIN city AS c ON gc.city_id = c.id WHERE g.season = 'Summer' AND c.city_name = 'Paris';
SELECT g.games_name FROM games AS g JOIN games_city AS gc ON g.id = gc.games_id JOIN city AS c ON gc.city_id = c.id WHERE c.city_name = 'Los Angeles';
SELECT c.city_name, COUNT(gc.games_id) as game_count FROM city c JOIN games_city gc ON c.id = gc.city_id GROUP BY c.city_name ORDER BY game_count DESC LIMIT 1;
SELECT T2.games_name FROM games_city AS T1 JOIN games AS T2 ON T1.games_id = T2.id JOIN city AS T3 ON T1.city_id = T3.id WHERE T3.city_name = 'Beijing' AND T2.games_year = 2008;
SELECT     (COUNT(CASE WHEN gc.age > 30 THEN ce.competitor_id END) / COUNT(ce.competitor_id)) * 100 as percentage FROM     competitor_event ce JOIN     games_competitor gc ON ce.competitor_id = gc.person_id JOIN     medal m ON ce.medal_id = m.id WHERE     m.medal_name = 'Gold' ;
SELECT gc.age FROM games_competitor gc JOIN person p ON gc.person_id = p.id JOIN games g ON gc.games_id = g.id WHERE g.games_name = '2012 Summer' AND p.full_name = 'A Lamusi'
SELECT COUNT(*) FROM games_competitor JOIN games ON games_competitor.games_id = games.id WHERE games.games_name = '2000 Summer' AND games_competitor.age = 31;
SELECT COUNT(*) FROM games_competitor gc JOIN person p ON gc.person_id = p.id JOIN games g ON gc.games_id = g.id WHERE p.gender = 'M' AND g.games_name = '1948 Summer';
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN games g ON gc.games_id = g.id WHERE g.games_name = '1936 Summer';
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN games g ON gc.games_id = g.id WHERE g.games_name = '2014 Winter' ORDER BY gc.age ASC LIMIT 1;
SELECT AVG(gc.age) FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_name = '1988 Winter';
SELECT     (COUNT(CASE WHEN p.gender = 'F' AND p.height > 170 THEN p.id ELSE NULL END) * 100 / COUNT(p.id)) AS percentage FROM     person p JOIN     games_competitor gc ON p.id = gc.person_id JOIN     games g ON gc.games_id = g.id WHERE     g.games_year = 1988;
SELECT T1.sport_name FROM sport AS T1 JOIN event AS T2 ON T1.id = T2.sport_id WHERE T2.event_name = 'Cross Country Skiing Men''s 10/15 kilometres Pursuit';
SELECT (COUNT(CASE WHEN g.season = 'Winter' AND gc.age > 24 THEN 1 END) * 100.0 / COUNT(gc.person_id)) AS percentage FROM games AS g JOIN games_competitor AS gc ON g.id = gc.games_id;
SELECT pr.region_id FROM person p JOIN person_region pr ON p.id = pr.person_id WHERE p.full_name = 'Christine Jacoba Aaftink';
SELECT p.height FROM person p JOIN person_region pr ON p.id = pr.person_id WHERE pr.region_id = 7;
SELECT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id WHERE gc.games_id = 3;
SELECT gc.games_id FROM games_city AS gc JOIN city AS c ON gc.city_id = c.id WHERE c.city_name = 'London';
SELECT COUNT(*) FROM (     SELECT gc.person_id     FROM games_competitor gc     JOIN games g ON gc.games_id = g.id     WHERE g.season = 'Summer'     AND gc.age < 30 ) as subquery;
SELECT g.games_name FROM games AS g JOIN games_competitor AS gc ON g.id = gc.games_id WHERE gc.games_id = 13;
SELECT AVG(gc.age) FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.season = 'Winter';
SELECT (COUNT(CASE WHEN gc.age < 35 THEN 1 END) * 100.0 / COUNT(gc.person_id)) AS percentage FROM games_competitor AS gc JOIN games AS g ON gc.games_id = g.id WHERE g.season = 'Summer';
SELECT event_name FROM event WHERE sport_id = (SELECT id FROM sport WHERE sport_name = 'Basketball')
SELECT m.medal_name FROM medal m JOIN competitor_event ce ON m.id = ce.medal_id WHERE ce.competitor_id = 9;
SELECT ce.event_id FROM competitor_event ce JOIN medal m ON ce.medal_id = m.id WHERE m.medal_name = 'Gold';
SELECT full_name FROM person WHERE weight = (SELECT MAX(weight) FROM person);
SELECT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id WHERE g.games_year = 1992;
SELECT T2.region_name FROM person_region AS T1 JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1;
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id WHERE gc.age = (SELECT MAX(age) FROM games_competitor);
SELECT DISTINCT s.sport_name FROM sport s JOIN event e ON s.id = e.sport_id JOIN competitor_event ce ON e.id = ce.event_id JOIN games_competitor gc ON gc.id = ce.competitor_id JOIN person p ON p.id = gc.person_id WHERE p.full_name = 'John Aalberg';
SELECT COUNT(*) FROM games_competitor gc JOIN person p ON gc.person_id = p.id JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE p.gender = 'M' AND nr.region_name = 'Belgium';
Error: 第 5053 个样本有 2 个SQL。
SELECT COUNT(DISTINCT event_name) FROM event WHERE sport_id = (SELECT id FROM sport WHERE sport_name = 'Football');
SELECT DISTINCT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id JOIN games_competitor gc2 ON g.id = gc2.games_id JOIN person p ON gc2.person_id = p.id WHERE p.full_name = 'John Aalberg';
SELECT COUNT(*) FROM games JOIN games_city ON games.id = games_city.games_id JOIN city ON games_city.city_id = city.id WHERE city.city_name = 'Barcelona';
SELECT COUNT(*) FROM games_competitor JOIN games ON games_competitor.games_id = games.id WHERE games_competitor.age > 30 AND games.games_name = '1992 Winter';
SELECT g.games_name FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id JOIN games_competitor gc2 ON g.id = gc2.games_id WHERE c.city_name = 'Barcelona' GROUP BY g.games_name ORDER BY COUNT(gc2.person_id) DESC LIMIT 1;
SELECT p.full_name FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Argentina';
SELECT AVG(gc.age) FROM games_competitor gc JOIN games g ON gc.games_id = g.id JOIN person_region pr ON gc.person_id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE g.games_name = '2012 Summer' AND nr.region_name = 'Argentina';
SELECT     (COUNT(CASE WHEN m.medal_name = 'Bronze' THEN ce.competitor_id END) * 100.0 / COUNT(ce.competitor_id)) AS percentage FROM     competitor_event ce     JOIN event e ON ce.event_id = e.id     JOIN sport s ON e.sport_id = s.id     JOIN games_competitor gc ON ce.competitor_id = gc.person_id     JOIN person p ON gc.person_id = p.id     JOIN medal m ON ce.medal_id = m.id WHERE     e.event_name = 'Basketball Men''s Basketball'     AND p.gender = 'M';
SELECT g.games_name FROM games AS g JOIN games_competitor AS gc ON g.id = gc.games_id JOIN person AS p ON gc.person_id = p.id WHERE p.full_name = 'Georgios Abaris';
SELECT p.full_name FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE nr.region_name = 'Greece';
SELECT AVG(gc.age) FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_name = '1924 Winter';
SELECT T2.noc FROM person AS T1 JOIN person_region AS T2 ON T1.id = T2.person_id WHERE T1.weight = 77;
SELECT g.games_name FROM games AS g JOIN games_city AS gc ON g.id = gc.games_id JOIN city AS c ON gc.city_id = c.id WHERE c.city_name = 'Paris';
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN games g ON gc.games_id = g.id WHERE g.games_name = '2000 Summer';
SELECT c.city_name FROM city c JOIN games_city gc ON c.id = gc.city_id JOIN games g ON gc.games_id = g.id JOIN games_competitor gc2 ON g.id = gc2.games_id JOIN person p ON gc2.person_id = p.id WHERE gc2.age = (SELECT MAX(age) FROM games_competitor)
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id ORDER BY gc.age LIMIT 1;
SELECT gc.games_id FROM games_city gc JOIN city c ON gc.city_id = c.id WHERE c.city_name = 'Tokyo';
SELECT T2.noc, T3.region_name FROM person AS T1 JOIN person_region AS T2 ON T1.id = T2.person_id JOIN noc_region AS T3 ON T2.region_id = T3.id WHERE T1.weight = (SELECT MAX(weight) FROM person)
SELECT games_year, season FROM games JOIN games_competitor ON games.id = games_competitor.games_id JOIN person ON person.id = games_competitor.person_id WHERE full_name = 'Sohail Abbas';
SELECT AVG(p.weight) FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id JOIN medal m ON m.id = ce.medal_id WHERE m.medal_name = 'Silver';
SELECT T3.city_name FROM games AS T1 JOIN games_city AS T2 ON T1.id = T2.games_id JOIN city AS T3 ON T2.city_id = T3.id WHERE T1.games_name = '2004 Summer'
SELECT g.season FROM games AS g JOIN games_competitor AS gc ON g.id = gc.games_id JOIN person AS p ON gc.person_id = p.id WHERE p.weight = 73 AND p.height = 180;
SELECT p.full_name FROM person p JOIN games_competitor gc ON p.id = gc.person_id JOIN competitor_event ce ON gc.id = ce.competitor_id JOIN medal m ON ce.medal_id = m.id WHERE m.medal_name = 'Gold';
SELECT AVG(p.height) FROM person p JOIN games_competitor gc ON p.id = gc.person_id WHERE gc.age BETWEEN 22 AND 28;
SELECT COUNT(*) FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region nr ON pr.region_id = nr.id WHERE p.gender = 'F' AND nr.region_name = 'Iran';
SELECT gc.age FROM games_competitor gc JOIN person p ON gc.person_id = p.id WHERE p.height = (SELECT MAX(height) FROM person)
SELECT     (SELECT COUNT(*) FROM games_competitor gc JOIN person p ON gc.person_id = p.id WHERE gc.age <= 24 AND p.weight > 70) -     (SELECT COUNT(*) FROM games_competitor gc JOIN person p ON gc.person_id = p.id WHERE gc.age <= 24 AND p.weight < 70)
SELECT (COUNT(CASE WHEN gc.age = 28 THEN 1 END) * 100 / COUNT(gc.id)) AS percentage FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_name = '2014 Winter';
SELECT DISTINCT r.region_name FROM person p JOIN person_region pr ON p.id = pr.person_id JOIN noc_region r ON pr.region_id = r.id WHERE p.gender = 'M' AND p.height > (SELECT AVG(height) * 0.87 FROM person);
SELECT SUM(t.households) FROM zip_data t JOIN country c ON t.zip_code = c.zip_code WHERE c.county = 'ARECIBO';
SELECT zip_code FROM zip_data WHERE county = 'ARECIBO' ORDER BY avg_house_value DESC LIMIT 1;
SELECT SUM(male_population) FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code WHERE country.county = 'ARECIBO';
SELECT COUNT(*) FROM zip_data JOIN state ON zip_data.state = state.abbreviation WHERE state.name = 'Delaware' AND zip_data.daylight_savings = 'Yes';
SELECT z.zip_code FROM zip_data z JOIN country c ON z.zip_code = c.zip_code WHERE c.county = 'ARECIBO' ORDER BY z.white_population DESC LIMIT 1;
SELECT county FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code WHERE avg_income_per_household = (SELECT MAX(avg_income_per_household) FROM zip_data)
SELECT DISTINCT country.county FROM country JOIN zip_data ON country.zip_code = zip_data.zip_code WHERE zip_data.daylight_savings = 'Yes';
SELECT zip_code FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code WHERE country.county = 'HUNTINGDON' AND zip_data.employees > 30;
SELECT T1.asian_population FROM zip_data AS T1 JOIN alias AS T2 ON T1.zip_code = T2.zip_code JOIN avoid AS T3 ON T2.zip_code = T3.zip_code WHERE T3.bad_alias = 'URB San Joaquin';
SELECT COUNT(*) FROM avoid JOIN zip_data ON avoid.zip_code = zip_data.zip_code WHERE avoid.bad_alias = 'Internal Revenue Service' AND zip_data.time_zone = 'Eastern';
SELECT a.bad_alias FROM avoid a JOIN zip_data z ON a.zip_code = z.zip_code WHERE z.avg_house_value = (SELECT MAX(avg_house_value) FROM zip_data)
SELECT a.bad_alias FROM avoid a JOIN zip_data z ON a.zip_code = z.zip_code WHERE z.median_female_age > 32;
Error: 第 5095 个样本有 2 个SQL。
SELECT AVG(zip_data.female_median_age) FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code WHERE country.county = 'ARECIBO';
SELECT T2.area_code FROM zip_data AS T1 JOIN area_code AS T2 ON T1.zip_code = T2.zip_code WHERE T1.female_median_age > 32
SELECT alias.alias FROM alias WHERE alias.zip_code IN (SELECT zip_data.zip_code FROM zip_data WHERE zip_data.city = 'Hartford');
SELECT COUNT(DISTINCT county) FROM country WHERE state = 'AL';
SELECT COUNT(*) FROM zip_data WHERE state = 'NY' AND type = 'Post Office';
SELECT zd.latitude, zd.longitude FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE ac.area_code = 787;
SELECT T1.total_delivery_receptacles FROM zip_data AS T1 JOIN state AS T2 ON T1.state = T2.abbreviation WHERE T2.name = 'California' AND T1.type = 'Community Post Office' ORDER BY T1.total_delivery_receptacles DESC LIMIT 1;
SELECT T3.county FROM zip_data AS T1 JOIN country AS T3 ON T1.zip_code = T3.zip_code WHERE T1.female_population = (SELECT MAX(female_population) FROM zip_data)
SELECT DISTINCT state.name FROM state JOIN zip_data ON state.abbreviation = zip_data.state WHERE zip_data.organization IS NULL;
SELECT (MAX(zd.population_2020) - MAX(zd.population_2010)) AS Population_Difference FROM zip_data zd JOIN cbsa cb ON zd.CBSA = cb.CBSA WHERE cb.CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ';
SELECT zip_code FROM country WHERE county = 'NEW CASTLE' AND state = 'DE';
SELECT COUNT(c.congress_rep_id) FROM congress c JOIN (     SELECT state     FROM zip_data     GROUP BY state     ORDER BY SUM(monthly_benefits_retired_workers) DESC     LIMIT 1 ) z ON c.state = z.state
SELECT COUNT(zip_data.city) FROM zip_data JOIN state ON zip_data.state = state.abbreviation JOIN congress ON state.abbreviation = congress.abbreviation WHERE congress.first_name = 'Lisa' AND congress.last_name = 'Murkowski' AND zip_data.employees = 0;
SELECT s.name AS State_Name, c.first_name, c.last_name FROM (     SELECT state, SUM(asian_population) as Total_Asian_Population     FROM zip_data     GROUP BY state     ORDER BY Total_Asian_Population DESC     LIMIT 3 ) z JOIN state s ON z.state = s.abbreviation JOIN congress c ON c.state = z.state ORDER BY Total_Asian_Population DESC;
SELECT T.name FROM country AS T WHERE T.county = 'OUTAGAMIE'
SELECT T3.party FROM zip_data AS T1 JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.zip_code = 91701
SELECT SUM(male_population) FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code WHERE country.county = 'NEW HAVEN';
SELECT alias.alias FROM alias JOIN zip_data ON alias.zip_code = zip_data.zip_code WHERE zip_data.latitude = 18.090875 AND zip_data.longitude = -66.867756;
SELECT ac.area_code FROM area_code ac JOIN zip_data zd ON ac.zip_code = zd.zip_code ORDER BY zd.over_65 DESC LIMIT 1;
SELECT COUNT(a.bad_alias) FROM avoid a JOIN zip_data z ON a.zip_code = z.zip_code JOIN zip_congresszc ON z.zip_code = zc.zip_code JOIN congress c ON zc.district = c.cognress_rep_id WHERE c.first_name = 'Thompson' AND c.last_name = 'Bennie G'
SELECT zip_data.latitude, zip_data.longitude FROM area_code JOIN zip_data ON area_code.zip_code = zip_data.zip_code WHERE area_code.area_code = 636;
SELECT zip_code FROM zip_congress JOIN congress ON zip_congress.district = congress.District WHERE congress.first_name = 'Buchanan' AND congress.last_name = 'Vernon';
SELECT state.name FROM state JOIN area_code ON state.abbreviation = area_code.state WHERE area_code.area_code = 878;
SELECT COUNT(DISTINCT county) FROM country WHERE state = 'VA';
SELECT CBSA_name, latitude, longitude FROM CBSA JOIN zip_data ON CBSA.CBSA = zip_data.CBSA WHERE zip_data.zip_code = 45503;
SELECT T3.county FROM congress AS T1 JOIN country AS T3 ON T1.state = T3.state WHERE T1.first_name = 'Hartzler' AND T1.last_name = 'Vicky'
SELECT AVG(T1.male_median_age) FROM zip_data AS T1 JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'WINDHAM';
SELECT AVG(t1.female_median_age) FROM zip_data AS t1 JOIN congress AS t2 ON t1.state = t2.abbreviation WHERE t2.first_name = 'DeSantis' AND t2.last_name = 'Ron' GROUP BY t1.county
SELECT area_code FROM area_code JOIN alias ON area_code.zip_code = alias.zip_code WHERE alias.alias = 'Bishopville' AND alias.state = 'SC';
SELECT bad_alias FROM avoid WHERE zip_code IN (SELECT zip_code FROM zip_data WHERE city = 'Geneva' AND state = 'AL');
Error: 第 5126 个样本有 2 个SQL。
SELECT alias.alias, avoid.bad_alias FROM alias JOIN avoid ON alias.zip_code = avoid.zip_code WHERE alias.zip_code = 38015;
SELECT zip_code FROM zip_congress JOIN congress ON zip_congress.district = congress.cognress_rep_id WHERE congress.first_name = 'Steven' AND congress.last_name = 'King';
SELECT T1.CBSA_name, T1.CBSA_type FROM CBSA AS T1 JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.city = 'York' AND T2.state = 'ME';
SELECT zd.zip_code, zd.city, ac.area_code FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE zd.median_age > 40 LIMIT 10;
SELECT T1.county FROM country AS T1 JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T2.bad_alias = 'Druid Hills'
SELECT area_code FROM area_code JOIN country ON area_code.zip_code = country.zip_code WHERE country.county = 'PHILLIPS' AND country.state = 'Montana';
SELECT c.first_name, c.last_name, z.zip_code FROM congress c JOIN zip_congress zc ON c.cognress_rep_id = zc.district JOIN zip_data z ON zc.zip_code = z.zip_code WHERE c.state = 'Wisconsin' GROUP BY c.cognress_rep_id, z.zip_code ORDER BY SUM(z.land_area) DESC LIMIT 1;
SELECT COUNT(*) AS num_states, GROUP_CONCAT(name SEPARATOR ', ') AS state_names FROM state JOIN zip_data ON state.abbreviation = zip_data.state WHERE zip_data.time_zone = 'Central' GROUP BY state.abbreviation;
SELECT city, state FROM zip_data WHERE CBSA = (     SELECT CBSA     FROM CBSA     WHERE CBSA_name = 'Lexington-Fayette, KY' ) LIMIT 10;
WITH DemCount AS (   SELECT COUNT(*) AS DemTotal   FROM congress   WHERE party = 'Democrat' AND state = 'Indiana' ), RepCount AS (   SELECT COUNT(*) AS RepTotal   FROM congress   WHERE party = 'Republican' AND state = 'Indiana' ), Ratio AS (   SELECT     (DemTotal * 100.0 / RepTotal) AS Ratio   FROM DemCount, RepCount ) SELECT ZipCodes.zip_code FROM congress JOIN zip_congress ON congress.cognress_rep_id = zip_congress.district WHERE congress.party = 'Democrat' AND congress.state = 'Indiana';
SELECT     COUNT(CASE WHEN t.state = 'Alabama' THEN 1 END) / COUNT(CASE WHEN t.state = 'Illinois' THEN 1 END) AS ratio FROM     congress t;
Error: 第 5138 个样本有 2 个SQL。
SELECT z.zip_code, z.male_population FROM zip_data z JOIN CBSA c ON z.CBSA = c.CBSA WHERE c.CBSA_name = 'Berlin, NH';
SELECT CBSA, COUNT(CBSA) as num_zip_codes FROM zip_data GROUP BY CBSA HAVING COUNT(CBSA) > 10;
SELECT bad_alias FROM avoid WHERE zip_code IN (     SELECT zip_code     FROM country     WHERE state = 'PR' );
SELECT zip_data.longitude, zip_data.latitude FROM zip_data JOIN zip_congress ON zip_data.zip_code = zip_congress.zip_code JOIN congress ON zip_congress.district = congress.cognress_rep_id WHERE congress.first_name = 'Grayson' AND congress.last_name = 'Alan';
SELECT state FROM area_code JOIN state ON area_code.state = state.abbreviation WHERE area_code.area_code = 787;
SELECT c.first_name, c.last_name FROM congress c JOIN zip_congress zc ON c.cognress_rep_id = zc.district JOIN zip_data zd ON zc.zip_code = zd.zip_code WHERE zd.population_2020 > 30000;
SELECT a.zip_code FROM (     SELECT zip_code, COUNT(*) as cnt     FROM area_code     WHERE zip_code IN (         SELECT zip_code         FROM state         WHERE name = 'Massachusetts'     )     GROUP BY zip_code ) a WHERE a.cnt > 1
SELECT county FROM country WHERE city = 'Arecibo'
SELECT COUNT(*) FROM zip_data JOIN CBSA ON zip_data.CBSA = CBSA.CBSA WHERE CBSA_name = 'Barre, VT';
SELECT zip_code FROM country WHERE county = 'SAINT CROIX' ORDER BY land_area DESC LIMIT 1;
SELECT SUM(zip_data.population_2020 - zip_data.population_2010) FROM zip_data JOIN zip_congress ON zip_data.zip_code = zip_congress.zip_code JOIN congress ON zip_congress.district = congress.District WHERE congress.first_name = 'Griffin' AND congress.last_name = 'Tim';
SELECT (T1.asian_population / T1.population_2020 * 100) AS asian_percentage FROM zip_data AS T1 JOIN CBSA AS T2 ON T1.CBSA = T2.CBSA WHERE T2.CBSA_name = 'Atmore, AL'
SELECT zd.city, zd.asian_population FROM zip_data zd JOIN area_code ac ON zd.zip_code = ac.zip_code WHERE ac.area_code = 939 ORDER BY zd.asian_population DESC LIMIT 1;
SELECT country.county, state.name FROM country JOIN state ON country.state = state.abbreviation JOIN zip_data ON country.zip_code = zip_data.zip_code WHERE zip_data.elevation = 1039;
SELECT alias.alias, zip_data.elevation FROM alias JOIN zip_data ON alias.zip_code = zip_data.zip_code WHERE alias.zip_code = 1028;
SELECT ac.area_code FROM area_code ac JOIN zip_data zd ON ac.zip_code = zd.zip_code WHERE zd.land_area = (SELECT MAX(land_area) FROM zip_data)
SELECT ac.area_code FROM area_code ac JOIN zip_data zd ON ac.zip_code = zd.zip_code WHERE zd.white_population BETWEEN 1700 AND 2000;
SELECT asian_population FROM zip_data JOIN alias ON zip_data.zip_code = alias.zip_code WHERE alias.alias = 'Leeds';
SELECT area_code, country FROM area_code ac JOIN country c ON ac.zip_code = c.zip_code JOIN zip_data zd ON ac.zip_code = zd.zip_code WHERE zd.city = 'Savoy';
SELECT alias.alias FROM alias JOIN zip_data ON alias.zip_code = zip_data.zip_code WHERE zip_data.population_2010 = 0;
SELECT COUNT(DISTINCT zip_data.city) FROM zip_data JOIN area_code ON zip_data.zip_code = area_code.zip_code WHERE area_code.area_code = 608 AND zip_data.daylight_savings = 'Yes';
SELECT AVG(zip_data.elevation) FROM zip_data JOIN alias ON zip_data.zip_code = alias.zip_code WHERE alias.alias = 'Amherst';
SELECT T1.county, T1.state FROM country AS T1 JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Dalton'
SELECT alias.alias FROM alias JOIN zip_data ON alias.zip_code = zip_data.zip_code WHERE zip_data.type = 'Post Office' GROUP BY alias.zip_code HAVING COUNT(alias.zip_code) >= 5 LIMIT 5;
SELECT     (SELECT COUNT(*) FROM zip_data WHERE type = 'P.O. Box Only' AND zip_code IN (SELECT zip_code FROM area_code WHERE area_code = 787))     -     (SELECT COUNT(*) FROM zip_data WHERE type = 'Post Office' AND zip_code IN (SELECT zip_code FROM area_code WHERE area_code = 787));
SELECT (SUM(zip_data.population_2020) - SUM(zip_data.population_2010)) * 100 / SUM(zip_data.population_2010) as percentage_increase FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code WHERE country.county = 'ARROYO';
SELECT zip_code, city FROM zip_data WHERE state = 'TX' AND total_beneficiaries > 10000;
SELECT COUNT(*) FROM zip_data WHERE black_population > 20000 AND zip_code IN (     SELECT zip_code     FROM country     WHERE county = 'DISTRICT OF COLUMBIA' );
SELECT city, alias.alias FROM zip_data JOIN alias ON zip_data.zip_code = alias.zip_code WHERE zip_data.zip_code = 19019;
SELECT bad_alias FROM avoid WHERE zip_code IN (SELECT zip_code FROM zip_data WHERE city = 'Camuy');
SELECT zd.zip_code, zd.city, c.first_name, c.last_name FROM zip_data zd JOIN zip_congress zc ON zd.zip_code = zc.zip_code JOIN congress c ON zc.district = c.cognress_rep_id WHERE zd.population_2020 = (SELECT MAX(population_2020) FROM zip_data)
SELECT COUNT(zip_code) FROM zip_data WHERE state = 'IL' AND region = 'Midwest' AND daylight_savings = 'Yes';
SELECT T1.zip_code, T2.country FROM zip_data AS T1 JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.state = 'Virgin Islands';
SELECT alias.alias, zip_data.zip_code FROM alias JOIN zip_data ON alias.zip_code = zip_data.zip_code WHERE zip_data.city = 'Greeneville';
SELECT     (SELECT COUNT(DISTINCT z.zip_code) FROM zip_data z JOIN congress c ON z.state = c.abbreviation WHERE c.first_name = 'Smith' AND c.last_name = 'Adrian') >     (SELECT COUNT(DISTINCT z.zip_code) FROM zip_data z JOIN congress c ON z.state = c.abbreviation WHERE c.first_name = 'Heck' AND c.last_name = 'Joe');
SELECT zip_data.zip_code, CBSA.CBSA_name FROM zip_data JOIN CBSA ON zip_data.CBSA = CBSA.CBSA WHERE zip_data.city = 'Oxford';
SELECT zip_data.zip_code, zip_data.organization FROM zip_data JOIN CBSA ON zip_data.CBSA = CBSA.CBSA WHERE CBSA.CBSA_name = 'Kingsport-Bristol, TN-VA';
SELECT zd.zip_code, cr.first_name, cr.last_name FROM zip_data zd JOIN zip_congress zc ON zd.zip_code = zc.zip_code JOIN congress cr ON zc.district = cr.cognress_rep_id WHERE zd.organization = 'Readers Digest';
SELECT     (COUNT(CASE WHEN type = 'Post Office' THEN zip_code END) * 100.0 / COUNT(zip_code)) AS percentage FROM     zip_data JOIN     state ON zip_data.state = state.abbreviation WHERE     name = 'California';
SELECT DISTINCT zip_code FROM zip_congress JOIN congress ON zip_congress.district = congress.District WHERE congress.House = 'Senate';
SELECT T1.city FROM zip_data AS T1 JOIN avoid AS T2 ON T1.zip_code = T2.zip_code GROUP BY T1.city ORDER BY COUNT(T2.bad_alias) DESC LIMIT 1;
SELECT county FROM country WHERE state = 'Georgia';
SELECT latitude, longitude FROM zip_data JOIN area_code ON zip_data.zip_code = area_code.zip_code WHERE area_code.area_code = '410';
SELECT T1.CBSA_name FROM CBSA AS T1 JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA ORDER BY T2.avg_house_value DESC LIMIT 1;
SELECT a.bad_alias FROM avoid a JOIN zip_data z ON a.zip_code = z.zip_code WHERE z.city = 'East Setauket';
SELECT SUM(population_2010) FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code WHERE country.county = 'WILCOX';
SELECT ac.area_code FROM area_code ac JOIN zip_data zd ON ac.zip_code = zd.zip_code WHERE zd.asian_population = (SELECT MAX(asian_population) FROM zip_data)
SELECT DISTINCT zip_data.city FROM zip_data JOIN CBSA ON zip_data.CBSA = CBSA.CBSA WHERE CBSA.CBSA_type = 'Micro';
SELECT T1.name FROM state AS T1 JOIN country AS T2 ON T1.abbreviation = T2.state GROUP BY T1.abbreviation ORDER BY COUNT(T2.county) DESC LIMIT 1;
SELECT SUM(zip_data.households) FROM zip_data JOIN zip_congress ON zip_data.zip_code = zip_congress.zip_code JOIN congress ON zip_congress.district = congress.CID WHERE congress.District = 'FL-10';
SELECT avg_income_per_household FROM zip_data JOIN alias ON zip_data.zip_code = alias.zip_code WHERE alias.alias = 'Danzig';
SELECT state FROM zip_data GROUP BY state HAVING AVG(female_population) > (SELECT AVG(female_population) FROM zip_data) ;
SELECT (SUM(case when T3.county = 'CORYELL' then T1.households else 0 end) * 100.0 / SUM(T1.households)) as percentage FROM zip_data AS T1 JOIN country AS T3 ON T1.zip_code = T3.zip_code GROUP BY T1.state;
SELECT T1.CBSA_name, T1.CBSA_type FROM CBSA AS T1 JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.city = 'Cabo Rojo'
SELECT T1.name FROM country AS T1 JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Las Marias'
SELECT COUNT(DISTINCT T3.city) FROM congress AS T1 JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T1.first_name = 'Pierluisi' AND T1.last_name = 'Pedro';
SELECT T1.bad_alias FROM avoid AS T1 JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.city = 'Aguadilla'
SELECT c.first_name, c.last_name FROM congress c JOIN zip_congress zc ON c.cognress_rep_id = zc.district JOIN zip_data zd ON zc.zip_code = zd.zip_code WHERE zd.city = 'Guanica';
SELECT state FROM (   SELECT state, COUNT(bad_alias) AS num_bad_aliases   FROM avoid   GROUP BY state ) ORDER BY num_bad_aliases DESC LIMIT 1;
SELECT     (SELECT COUNT(bad_alias) FROM avoid WHERE zip_code IN (SELECT zip_code FROM zip_data WHERE city = 'Aguada')) -     (SELECT COUNT(bad_alias) FROM avoid WHERE zip_code IN (SELECT zip_code FROM zip_data WHERE city = 'Aguadilla'))
SELECT state FROM CBSA WHERE CBSA_type = 'Metro' GROUP BY state HAVING COUNT(*) > 50;
SELECT SUM(population_2020) FROM zip_data WHERE city = 'ARECIBO';
SELECT T3.name FROM zip_data AS T1 JOIN country AS T2 ON T1.zip_code = T2.zip_code JOIN state AS T3 ON T1.state = T3.abbreviation WHERE T1.population_2010 > 10000;
SELECT T1.country FROM country AS T1 JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.type = 'Residential' ORDER BY T2.households DESC LIMIT 1;
SELECT (SUM(CASE WHEN households > 10000 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM (     SELECT *     FROM zip_data     WHERE EXISTS (         SELECT 1         FROM country         WHERE zip_data.zip_code = country.zip_code     ) ) WHERE households IS NOT NULL;
SELECT (COUNT(CASE WHEN type = 'Post Office' THEN 1 END) * 100 / COUNT(*)) as percentage FROM zip_data WHERE county = 'SAINT CROIX';
SELECT c.country FROM country c JOIN area_code ac ON c.zip_code = ac.zip_code JOIN zip_data zd ON ac.zip_code = zd.zip_code WHERE ac.area_code = 787 AND zd.type = 'Unique Post Office';
SELECT T1.elevation FROM zip_data AS T1 JOIN alias AS T2 ON T1.zip_code = T2.zip_code WHERE T2.alias = 'East Longmeadow'
SELECT COUNT(*) FROM zip_data WHERE daylight_savings = 'No';
SELECT country.county, area_code.area_code FROM country JOIN area_code ON country.zip_code = area_code.zip_code WHERE country.zip_code = 1116;
SELECT type FROM zip_data JOIN alias ON zip_data.zip_code = alias.zip_code WHERE alias.alias = 'St Thomas';
Error: 第 5210 个样本有 2 个SQL。
SELECT ac.area_code FROM area_code ac JOIN zip_data zd ON ac.zip_code = zd.zip_code WHERE zd.water_area = (SELECT MAX(water_area) FROM zip_data)
SELECT a.alias FROM alias a JOIN zip_data z ON a.zip_code = z.zip_code WHERE z.population_2020 = (SELECT MAX(population_2020) FROM zip_data);
SELECT zip_data.elevation FROM zip_data JOIN state ON zip_data.state = state.abbreviation WHERE state.name = 'Massachusetts' AND zip_data.city IN (     SELECT city     FROM zip_data     JOIN country ON zip_data.zip_code = country.zip_code     WHERE country.county = 'Hampden' );
SELECT T2.area_code FROM zip_data AS T1 JOIN area_code AS T2 ON T1.zip_code = T2.zip_code WHERE T1.hispanic_population = (SELECT MAX(hispanic_population) FROM zip_data)
SELECT alias.alias FROM alias JOIN zip_data ON alias.zip_code = zip_data.zip_code WHERE zip_data.asian_population = 7;
SELECT AVG(zip_data.white_population) FROM zip_data JOIN area_code ON zip_data.zip_code = area_code.zip_code WHERE area_code.area_code = 920;
SELECT (COUNT(CASE WHEN c.state_fips < 20 THEN 1 END) * 100 / COUNT(c.zip_code)) AS percentage FROM country c JOIN alias a ON c.zip_code = a.zip_code WHERE a.alias = 'Ponce';
SELECT DISTINCT c.country FROM country c JOIN zip_data z ON c.zip_code = z.zip_code WHERE z.population_2020 > (SELECT AVG(population_2020)*0.97 FROM zip_data);
SELECT COUNT(zip_code) FROM zip_congress WHERE district IN (     SELECT district     FROM congress     WHERE first_name = 'Kirkpatrick' AND last_name = 'Ann' );
SELECT zip_data.zip_code, zip_data.latitude, zip_data.longitude FROM zip_data JOIN CBSA ON zip_data.CBSA = CBSA.CBSA WHERE CBSA.CBSA_name = 'Allentown-Bethlehem-Easton, PA-NJ';
SELECT zip_code, city, latitude, longitude FROM zip_data JOIN avoid ON zip_data.zip_code = avoid.zip_code WHERE bad_alias = 'Shared Reshipper';
SELECT c.first_name, c.last_name FROM congress c JOIN zip_data zd ON c.abbreviation = zd.state JOIN alias a ON zd.zip_code = a.zip_code WHERE a.alias = 'Garfield';
SELECT COUNT(zip_data.zip_code) FROM zip_data JOIN CBSA ON zip_data.CBSA = CBSA.CBSA WHERE CBSA.CBSA_name = 'New York-Newark-Jersey City, NY-NJ-PA';
SELECT COUNT(DISTINCT zip_data.zip_code) FROM zip_data JOIN congress ON zip_data.state = congress.abbreviation WHERE congress.state = 'Puerto Rico';
SELECT COUNT(zip_code), country FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code WHERE country.state IN (SELECT abbreviation FROM state WHERE name = 'West Virginia')
SELECT zip_data.zip_code, area_code.area_code FROM zip_data JOIN area_code ON zip_data.zip_code = area_code.zip_code WHERE zip_data.type = 'Community Post Office' AND zip_data.elevation > 6000;
SELECT COUNT(DISTINCT z.zip_code) FROM zip_congress zc JOIN congress c ON zc.district = c.District JOIN state s ON c.state = s.abbreviation JOIN zip_data z ON zc.zip_code = z.zip_code WHERE s.name = 'Mississippi' AND c.House = 'House of Representatives';
SELECT T1.CID FROM congress AS T1 JOIN zip_data AS T2 ON T1.state = T2.state WHERE T2.city = 'East Springfield'
SELECT T1.CBSA_name FROM CBSA AS T1 JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.employees = (SELECT MAX(employees) FROM zip_data)
SELECT COUNT(*) FROM zip_data WHERE state = 'OH' AND type = 'Unique Post Office';
SELECT SUM(total_beneficiaries) / COUNT(zip_code) AS avg_beneficiaries_per_postal_point FROM zip_data JOIN state ON zip_data.state = state.abbreviation WHERE state.name = 'Guam';
SELECT     (COUNT(CASE WHEN party = 'Democrat' THEN cognress_rep_id END) * 100.0 / COUNT(cognress_rep_id)) AS percentage,     (SELECT COUNT(DISTINCT zip_code) FROM zip_data WHERE state = 'HI') AS postal_points_in_hawaii FROM     congress WHERE     party = 'Democrat';
SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear = (SELECT MIN(FirstBrewedYear) FROM rootbeerbrand);
Error: 第 5234 个样本有 2 个SQL。
SELECT BrandName FROM rootbeerbrand WHERE FacebookPage IS NOT NULL;
SELECT rb.BrandName FROM rootbeerbrand rb ORDER BY (rb.CurrentRetailPrice - rb.WholesaleCost) ASC LIMIT 1;
SELECT Description FROM rootbeerbrand WHERE BrandName = 'A&W';
SELECT City FROM rootbeerbrand WHERE BreweryName = 'AJ Stephans Beverages';
SELECT COUNT(*) FROM transaction WHERE CustomerID = (SELECT CustomerID FROM customers WHERE First = 'Frank-Paul' AND Last = 'Santangelo') AND SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07';
SELECT COUNT(*) FROM transaction JOIN customers ON transaction.CustomerID = customers.CustomerID WHERE SUBSTR(transaction.TransactionDate, 1, 4) = '2014' AND SUBSTR(transaction.TransactionDate, 6, 2) = '07' AND customers.Gender = 'M';
SELECT COUNT(DISTINCT t.CustomerID) FROM transaction t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.SubscribedToEmailList = 'TRUE' AND t.CreditCardType = 'Visa' AND SUBSTR(t.TransactionDate, 1, 4) = '2014' AND SUBSTR(t.TransactionDate, 6, 2) = '07';
SELECT c.First, c.Last FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID WHERE SUBSTR(t.TransactionDate, 1, 4) = '2014' AND SUBSTR(t.TransactionDate, 6, 2) = '08' GROUP BY c.CustomerID, c.First, c.Last ORDER BY COUNT(t.TransactionID) DESC LIMIT 1;
SELECT rb.BrandName FROM rootbeer AS rb JOIN transaction AS t ON rb.RootBeerID = t.RootBeerID JOIN customers AS c ON c.CustomerID = t.CustomerID WHERE c.First = 'Frank-Paul' AND c.Last = 'Santangelo' AND t.TransactionDate = '2014-07-07';
SELECT COUNT(*) FROM transaction t JOIN rootbeer r ON t.RootBeerID = r.RootBeerID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.First = 'Frank-Paul' AND c.Last = 'Santangelo' AND t.TransactionDate = '2014-07-07' AND r.ContainerType = 'Can';
SELECT COUNT(*) FROM transaction JOIN rootbeer ON transaction.RootBeerID = rootbeer.RootBeerID JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID WHERE rootbeerbrand.BrandName = 'Bulldog' AND SUBSTR(transaction.TransactionDate, 1, 4) = '2014' AND SUBSTR(transaction.TransactionDate, 6, 2) = '08';
SELECT c.First, c.Last FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID JOIN rootbeer rb ON t.RootBeerID = rb.RootBeerID JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID WHERE rbb.BreweryName = 'AJ Stephans Beverages';
SELECT COUNT(DISTINCT rb.BrandID) FROM rootbeerbrand rb JOIN rootbeer r ON rb.BrandID = r.BrandID JOIN transaction t ON r.RootBeerID = t.RootBeerID WHERE rb.Twitter IS NULL AND SUBSTR(t.TransactionDate, 1, 4) = '2014' AND SUBSTR(t.TransactionDate, 6, 2) = '08';
SELECT t.TransactionID, t.CreditCardNumber FROM transaction t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.First = 'Frank-Paul' AND c.Last = 'Santangelo' AND t.TransactionDate = '2014-07-07';
SELECT COUNT(*) FROM rootbeer JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID JOIN customers ON customers.CustomerID = rootbeer.CustomerID WHERE customers.First = 'Frank-Paul' AND customers.Last = 'Santangelo' AND rootbeerbrand.Honey = 'FALSE' AND rootbeerbrand.ArtificialSweetener = 'FALSE';
SELECT T.transactiondate FROM (     SELECT customerID, transactiondate     FROM transaction     JOIN customers ON transaction.customerid = customers.customerid     WHERE customers.gender = 'M' ) AS T JOIN rootbeer ON T.rootbeerid = rootbeer.rootbeerid GROUP BY T.transactiondate HAVING COUNT(T.customerid) > 3;
SELECT AVG(count_rootbeers) FROM (SELECT COUNT(RootBeerID) as count_rootbeers FROM rootbeer rb JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID JOIN transaction t ON rb.RootBeerID = t.RootBeerID WHERE rbb.BrandName = 'A&W' AND SUBSTR(t.TransactionDate, 1, 4) = '2014' AND SUBSTR(t.TransactionDate, 6, 2) = '08' GROUP BY t.TransactionDate) as daily_sales
SELECT     (COUNT(CASE WHEN rb.BreweryName = 'AJ Stephans Beverages' THEN tr.RootBeerID END) * 1.0 / COUNT(tr.RootBeerID)) * 100 AS Percentage FROM     transaction tr JOIN     rootbeer rbv ON tr.RootBeerID = rbv.RootBeerID JOIN     rootbeerbrand rb ON rbv.BrandID = rb.BrandID WHERE     SUBSTR(tr.TransactionDate, 1, 4) = '2014'
SELECT COUNT(*) FROM rootbeerreview JOIN customers ON rootbeerreview.CustomerID = customers.CustomerID WHERE customers.First = 'James' AND customers.Last = 'House';
SELECT t1.CreditCardNumber FROM transaction AS t1 JOIN customers AS t2 ON t1.CustomerID = t2.CustomerID WHERE t2.First = 'Lisa' AND t2.Last = 'Ling';
SELECT g.Latitude, g.Longitude FROM geolocation g JOIN location l ON g.LocationID = l.LocationID WHERE l.LocationName = 'Sac State American River Courtyard';
SELECT T2.LocationName FROM transaction AS T1 JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TransactionID = 100885;
SELECT c.City FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID WHERE t.TransactionID = 103545;
SELECT customers.PhoneNumber FROM customers JOIN transaction ON customers.CustomerID = transaction.CustomerID WHERE transaction.CreditCardNumber = 6011179359005380;
SELECT First, Last FROM customers WHERE CustomerID = (SELECT CustomerID FROM rootbeerreview GROUP BY CustomerID ORDER BY COUNT(*) DESC LIMIT 1);
SELECT c.FirstPurchaseDate FROM customers c JOIN rootbeerreview rbr ON c.CustomerID = rbr.CustomerID WHERE rbr.Review = 'Tastes like Australia.';
Error: 第 5261 个样本有 2 个SQL。
SELECT rb.BreweryName FROM rootbeerbrand rb JOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID WHERE rbr.StarRating = 5 GROUP BY rb.BrandID, rb.BreweryName HAVING COUNT(rbr.StarRating) = (     SELECT COUNT(StarRating)     FROM rootbeerreview     WHERE StarRating = 5     GROUP BY BrandID     ORDER BY COUNT(StarRating) DESC     LIMIT 1 )
SELECT c.SubscribedToEmailList FROM customers c JOIN rootbeerreview rbr ON c.CustomerID = rbr.CustomerID JOIN rootbeerbrand rbb ON rbr.BrandID = rbb.BrandID WHERE rbr.StarRating = 3 AND rbb.BrandName = 'Frostie' AND rbr.ReviewDate = '2014-04-24';
SELECT rb.CurrentRetailPrice FROM rootbeerbrand rbb JOIN rootbeer rb ON rbb.BrandID = rb.BrandID JOIN rootbeerreview rbr ON rbb.BrandID = rbr.BrandID WHERE rbr.Review = 'The quintessential dessert root beer. No ice cream required.';
SELECT     (COUNT(CASE WHEN rb.BrandID = rbr.BrandID AND rbr.StarRating = 5 THEN 1 END) * 1.0 / COUNT(rbr.BrandID)) * 100 AS Percentage FROM     rootbeerbrand rb JOIN     rootbeerreview rbr ON rb.BrandID = rbr.BrandID WHERE     rb.BrandName = 'River City'
SELECT AVG(review_count) AS average_reviews FROM (   SELECT COUNT(T1.CustomerID) AS review_count, T2.BrandID   FROM rootbeerreview AS T1   JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID   WHERE T2.State = 'CA'   GROUP BY T2.BrandID ) AS temp
SELECT COUNT(*) FROM customers WHERE Gender = 'F' AND SubscribedToEmailList = 'TRUE';
SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear = (SELECT MAX(FirstBrewedYear) FROM rootbeerbrand);
SELECT First, Last FROM customers ORDER BY FirstPurchaseDate ASC LIMIT 10;
SELECT COUNT(DISTINCT BreweryName) FROM rootbeerbrand WHERE Country = 'Australia';
SELECT COUNT(*) FROM customers WHERE First = 'Charles' AND City = 'Sacramento';
SELECT COUNT(*) FROM transaction WHERE CreditCardType = 'MasterCard' AND TransactionDate BETWEEN '2014-01-01' AND '2014-12-31';
SELECT rb.BrandName FROM rootbeerreview rbr JOIN customers c ON rbr.CustomerID = c.CustomerID JOIN rootbeerbrand rb ON rbr.BrandID = rb.BrandID WHERE c.First = 'Jayne' AND c.Last = 'Collins' ORDER BY rbr.StarRating LIMIT 1;
SELECT COUNT(*) FROM rootbeer JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID JOIN location ON rootbeer.LocationID = location.LocationID WHERE rootbeerbrand.Honey = 'TRUE' AND rootbeerbrand.CaneSugar = 'FALSE' AND rootbeer.ContainerType = 'Bottle' AND rootbeer.PurchaseDate BETWEEN '2015-01-01' AND '2015-12-31' AND location.LocationName = 'Sac State American River Courtyard';
SELECT rb.BreweryName FROM rootbeer AS rt JOIN rootbeerbrand AS rb ON rt.BrandID = rb.BrandID WHERE rt.PurchaseDate BETWEEN '2016-01-01' AND '2016-12-31' GROUP BY rb.BrandID ORDER BY COUNT(rt.BrandID) DESC LIMIT 1;
SELECT c.First, c.Last FROM customers c JOIN rootbeerreview rbr ON c.CustomerID = rbr.CustomerID JOIN rootbeerbrand rbb ON rbr.BrandID = rbb.BrandID WHERE rbb.BrandName = 'River City' AND rbr.StarRating = 5;
SELECT COUNT(*) FROM transaction JOIN customers ON transaction.CustomerID = customers.CustomerID JOIN rootbeer ON transaction.RootBeerID = rootbeer.RootBeerID WHERE customers.First = 'Tom' AND customers.Last = 'Hanks' AND transaction.TransactionDate >= '2015-01-01' AND transaction.TransactionDate < '2017-01-01';
SELECT rb.BrandName FROM rootbeerreview rbr JOIN rootbeerbrand rb ON rbr.BrandID = rb.BrandID WHERE rbr.StarRating = 5 GROUP BY rb.BrandName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM transaction JOIN rootbeer ON transaction.RootBeerID = rootbeer.RootBeerID JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID JOIN customers ON transaction.CustomerID = customers.CustomerID WHERE rootbeerbrand.BrandName = 'Henry Weinhard''s' AND customers.First = 'Nicholas' AND customers.Last = 'Sparks';
SELECT rb.BrandName, COUNT(t.RootBeerID) AS PurchaseCount FROM rootbeerbrand rb LEFT JOIN rootbeer rb ON rb.BrandID = rb.BrandID LEFT JOIN transaction t ON t.RootBeerID = rb.RootBeerID WHERE rb.FacebookPage IS NULL AND rb.Twitter IS NULL GROUP BY rb.BrandName ORDER BY PurchaseCount DESC LIMIT 1;
SELECT T3.LocationName, COUNT(T2.BrandID) AS SoldCount FROM rootbeer AS T1 JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID JOIN location AS T3 ON T1.LocationID = T3.LocationID WHERE T2.BrandName = 'Dog n Suds' AND T3.LocationName IN('Sac State American River Courtyard', 'Sac State Union') GROUP BY T3.LocationName ORDER BY SoldCount DESC LIMIT 1;
SELECT COUNT(*) FROM rootbeer JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID WHERE rootbeer.ContainerType = 'Can' AND rootbeerbrand.BrandName = 'A&W' AND rootbeer.PurchaseDate BETWEEN '2016-01-01' AND '2016-12-31';
SELECT Latitude, Longitude FROM location JOIN geolocation ON location.LocationID = geolocation.LocationID WHERE LocationName = 'Sac State Union';
SELECT rb.BrandName FROM rootbeerbrand rb JOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID GROUP BY rb.BrandID, rb.BrandName HAVING COUNT(rbr.CustomerID) >= 5 AND MIN(rbr.StarRating) = 5;
SELECT     rb.BrandName,     (SUM(CASE WHEN t.PurchaseDate BETWEEN '2014-01-01' AND '2016-12-31' THEN 1 ELSE 0 END) * 100 / COUNT(t.BrandID)) AS PercentageOfPurchases FROM     rootbeerbrand rb JOIN     rootbeer rb2 ON rb.BrandID = rb2.BrandID JOIN     transaction t ON rb2.RootBeerID = t.RootBeerID WHERE     rb.BreweryName = 'Dr Pepper Snapple Group' GROUP BY     rb.BrandName;
SELECT rb.BrandName, t.CustomerID FROM (     SELECT BrandID, MIN(CurrentRetailPrice - WholesaleCost) AS MinProfit     FROM rootbeerbrand     GROUP BY BrandID ) AS minprofit JOIN rootbeerbrand rb ON rb.BrandID = minprofit.BrandID JOIN rootbeer r ON r.BrandID = rb.BrandID JOIN transaction t ON t.RootBeerID = r.RootBeerID WHERE (rb.CurrentRetailPrice - rb.WholesaleCost) = minprofit.MinProfit GROUP BY rb.BrandName, t.CustomerID ORDER BY COUNT(t.CustomerID) DESC LIMIT 1;
SELECT First, Last, PhoneNumber FROM customers WHERE Gender = 'M' AND City = 'Fair Oaks' AND SubscribedToEmailList = 'TRUE';
SELECT     (COUNT(CASE WHEN ContainerType = 'Can' THEN RootBeerID END) * 100.0 / COUNT(RootBeerID)) AS PercentageInCans FROM     rootbeer WHERE     PurchaseDate BETWEEN '2014-01-01' AND '2014-12-31';
SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear BETWEEN 1996 AND 2000 ORDER BY FirstBrewedYear DESC;
SELECT rb.BrandID FROM rootbeerreview rbr JOIN rootbeerbrand rb ON rbr.BrandID = rb.BrandID WHERE rbr.StarRating = 1 GROUP BY rb.BrandID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT MULTIPLY(DIVIDE(SUM(CASE WHEN CreditCardType = 'Visa' THEN 1 ELSE 0 END), COUNT(TransactionID)), 1.0) AS VisaPercentage FROM transaction;
SELECT COUNT(*) FROM rootbeerbrand WHERE AvailableInCans = 'TRUE' AND CornSyrup = 'TRUE' AND ArtificialSweetener = 'TRUE';
SELECT (SUM(CASE WHEN l.LocationName = 'Sac State American River Courtyard' THEN t.PurchasePrice ELSE 0 END) / SUM(t.PurchasePrice)) * 100 AS PercentageOfSales FROM transaction t JOIN location l ON t.LocationID = l.LocationID;
SELECT AVG(daily_sales) AS average_caffeinated_sales FROM (     SELECT COUNT(rb.RootBeerID) AS daily_sales     FROM rootbeer rb     INNER JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID     WHERE rbb.Caffeinated = 'TRUE'     GROUP BY DATE(rb.PurchaseDate) ) AS daily_sales_count;
SELECT     rb.BrandID,     rb.ContainerType,     CASE         WHEN profit = (SELECT MAX(profit) FROM (             SELECT                 WholesaleCost,                 CurrentRetailPrice,                 (CurrentRetailPrice - WholesaleCost) as profit             FROM                 rootbeerbrand         ) subquery) THEN 'Most Profitable'         WHEN profit = (SELECT MIN(profit) FROM (             SELECT                 WholesaleCost,                 CurrentRetailPrice,                 (CurrentRetailPrice - WholesaleCost) as profit             FROM                 rootbeerbrand         ) subquery) THEN 'Least Profitable'         ELSE 'Neither'     END as ProfitStatus FROM     rootbeer rb JOIN     rootbeerbrand rbb ON     rb.BrandID = rbb.BrandID WHERE     (rb.BrandID, rb.ContainerType) IN (         SELECT             BrandID,             ContainerType         FROM             (                 SELECT                     BrandID,                     ContainerType,                     (SELECT CurrentRetailPrice - WholesaleCost FROM rootbeerbrand WHERE BrandID = rb.BrandID) as profit                 FROM                     rootbeer rb                 GROUP BY                     BrandID,                     ContainerType             ) subquery2         WHERE             profit = (                 SELECT                     MAX(profit)                 FROM                     (                         SELECT                             BrandID,                             ContainerType,                             (SELECT CurrentRetailPrice - WholesaleCost FROM rootbeerbrand WHERE BrandID = rb.BrandID) as profit                         FROM                             rootbeer rb                         GROUP BY                             BrandID,                             ContainerType                     ) subquery3                 UNION ALL                 SELECT                     MIN(profit)                 FROM                     (                         SELECT                             BrandID,                             ContainerType,                             (SELECT CurrentRetailPrice - WholesaleCost FROM rootbeerbrand WHERE BrandID = rb.BrandID) as profit                         FROM                             rootbeer rb                         GROUP BY                             BrandID,                             ContainerType                     ) subquery4             )     );
SELECT AVG(t.PurchasePrice) FROM transaction t JOIN rootbeer r ON t.RootBeerID = r.RootBeerID WHERE t.PurchasePrice > 2 AND r.ContainerType = 'Bottle';
SELECT COUNT(*) FROM rootbeer JOIN location ON rootbeer.LocationID = location.LocationID JOIN geolocation ON location.LocationID = geolocation.LocationID WHERE rootbeer.ContainerType = 'Bottle' AND geolocation.Latitude = 38.559615 AND geolocation.Longitude = -121.42243;
SELECT     (COUNT(CASE WHEN rb.StarRating >= 3 THEN c.CustomerID END) * 1.0 / COUNT(c.CustomerID)) * 100 AS Percentage FROM     customers c LEFT JOIN     rootbeerreview rb ON c.CustomerID = rb.CustomerID WHERE     c.SubscribedToEmailList = 'FALSE' GROUP BY     c.SubscribedToEmailList;
SELECT rb.BrandName FROM rootbeerreview rbr JOIN rootbeerbrand rb ON rbr.BrandID = rb.BrandID WHERE rbr.StarRating = 5 AND YEAR(rbr.ReviewDate) = 2012 GROUP BY rb.BrandName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID JOIN rootbeer rb ON t.RootBeerID = rb.RootBeerID JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID WHERE c.Gender = 'F' AND rbb.ArtificialSweetener = 'TRUE';
SELECT     (SELECT COUNT(*) FROM rootbeer rb JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID WHERE rbb.CaneSugar = 'TRUE') -     (SELECT COUNT(*) FROM rootbeer rb JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID WHERE rbb.CornSyrup = 'TRUE')
SELECT rb.BreweryName FROM rootbeer AS rbr JOIN rootbeerbrand AS rb ON rbr.BrandID = rb.BrandID JOIN transaction AS t ON rbr.RootBeerID = t.RootBeerID WHERE t.TransactionDate BETWEEN '2015-01-01' AND '2015-12-31' GROUP BY rb.BreweryName ORDER BY COUNT(rbr.BrandID) DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN rb.BrandID = rbb.BrandID AND rbb.BrandName = 'Dominion' THEN 1 END) * 1.0 / COUNT(rb.BrandID)) * 100 AS Percentage FROM     transaction t JOIN     customers c ON t.CustomerID = c.CustomerID JOIN     rootbeer rb ON t.RootBeerID = rb.RootBeerID JOIN     rootbeerbrand rbb ON rb.BrandID = rbb.BrandID WHERE     c.Gender = 'M' AND c.City = 'Sacramento' AND     t.TransactionDate BETWEEN '2013-01-01' AND '2013-12-31'
(SELECT COUNT(T1.TransactionID) / COUNT(DISTINCT T1.TransactionDate) AS AvgSalesPerDay_Honey FROM transaction T1 JOIN rootbeer T2 ON T1.RootBeerID = T2.RootBeerID JOIN rootbeerbrand T3 ON T2.BrandID = T3.BrandID WHERE T3.Honey = 'TRUE') - (SELECT COUNT(T1.TransactionID) / COUNT(DISTINCT T1.TransactionDate) AS AvgSalesPerDay_NoHoney FROM transaction T1 JOIN rootbeer T2 ON T1.RootBeerID = T2.RootBeerID JOIN rootbeerbrand T3 ON T2.BrandID = T3.BrandID WHERE T3.Honey = 'FALSE');
SELECT c.First, c.Last, c.Email FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID JOIN location l ON t.LocationID = l.LocationID WHERE t.CreditCardType = 'American Express' AND l.LocationName = 'Sac State Union';
SELECT rb.BrandName, MAX(rbr.StarRating) as HighestRating FROM rootbeerreview rbr JOIN rootbeerbrand rb ON rbr.BrandID = rb.BrandID WHERE rbr.ReviewDate LIKE '2014-09%' GROUP BY rb.BrandName ORDER BY HighestRating DESC LIMIT 1;
SELECT g.Latitude, g.Longitude FROM geolocation g JOIN location l ON g.LocationID = l.LocationID JOIN transaction t ON l.LocationID = t.LocationID WHERE t.CreditCardType = 'American Express';
SELECT COUNT(*) FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID WHERE c.City = 'Folsom' AND t.CreditCardType = 'Visa';
SELECT DISTINCT c.City FROM customers c JOIN rootbeerreview rbr ON c.CustomerID = rbr.CustomerID WHERE rbr.StarRating = 5 AND rbr.ReviewDate LIKE '2012-11%';
SELECT DISTINCT rb.BrandName FROM rootbeerbrand rb JOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID JOIN customers c ON c.CustomerID = rbr.CustomerID WHERE c.First = 'Peg' AND c.Last = 'Winchester';
SELECT rb.BrandName FROM rootbeerreview rbr JOIN rootbeerbrand rb ON rbr.BrandID = rb.BrandID WHERE rbr.StarRating = 1 GROUP BY rb.BrandName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT CreditCardType, COUNT(*) as CardUsage FROM transaction JOIN rootbeer USING (RootBeerID) JOIN rootbeerbrand USING (BrandID) WHERE Alcoholic = 'FALSE' GROUP BY CreditCardType ORDER BY CardUsage DESC LIMIT 1;
SELECT c.First, c.Last FROM customers c JOIN rootbeerreview rbr ON c.CustomerID = rbr.CustomerID WHERE rbr.StarRating = 5;
SELECT g.Latitude FROM geolocation g JOIN location l ON g.LocationID = l.LocationID JOIN rootbeer r ON l.LocationID = r.LocationID JOIN rootbeerbrand b ON r.BrandID = b.BrandID WHERE b.BrandName = 'Thomas Kemper' GROUP BY g.Latitude ORDER BY COUNT(*) DESC LIMIT 1;
SELECT StarRating, COUNT(StarRating) as RatingCount FROM rootbeerreview JOIN rootbeerbrand ON rootbeerreview.BrandID = rootbeerbrand.BrandID WHERE rootbeerbrand.CornSyrup = 'TRUE' GROUP BY StarRating ORDER BY RatingCount DESC LIMIT 1;
SELECT g.Latitude, g.Longitude FROM geolocation g JOIN location l ON g.LocationID = l.LocationID WHERE l.ZipCode = 95819;
SELECT rb.BrandName FROM rootbeerbrand rb JOIN location l ON rb.City = l.City AND rb.State = l.State JOIN geolocation gl ON l.LocationID = gl.LocationID WHERE gl.Latitude = 38.566129 AND gl.Longitude = -121.426432;
SELECT AVG(rootbeerbrand.CurrentRetailPrice - rootbeerbrand.WholesaleCost) FROM rootbeer JOIN rootbeerbrand ON rootbeer.BrandID = rootbeerbrand.BrandID WHERE rootbeer.ContainerType = 'Can';
SELECT     (COUNT(T1.CustomerID) * 100 / (         SELECT COUNT(T1.CustomerID)         FROM transaction AS T1         INNER JOIN rootbeer AS T2 ON T1.RootBeerID = T2.RootBeerID         WHERE T1.CreditCardType = 'Discover'     )) as Percentage FROM     transaction AS T1 INNER JOIN rootbeer AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerreview AS T3 ON T2.BrandID = T3.BrandID WHERE     T1.CreditCardType = 'Discover' AND T3.StarRating = 3;
SELECT DISTINCT BrandID FROM rootbeerreview WHERE StarRating > 3;
SELECT COUNT(DISTINCT rb.BrandID) FROM rootbeer rb JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID WHERE rb.ContainerType = 'Bottle' AND rb.PurchaseDate BETWEEN '2015-04-03' AND '2015-10-26';
SELECT c.First, c.Last FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID WHERE r.StarRating = 5 AND r.Review = 'The quintessential dessert root beer. No ice cream required.';
SELECT c.Email, c.PhoneNumber FROM customers c JOIN rootbeerreview rbr ON c.CustomerID = rbr.CustomerID WHERE c.City = 'Sacramento' AND rbr.StarRating > 3 AND strftime('%Y', rbr.ReviewDate) = '2014';
SELECT COUNT(*) FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID WHERE c.Gender = 'F' AND c.SubscribedToEmailList = 'TRUE' AND c.City = 'Sacramento' AND r.StarRating = 4 AND r.ReviewDate BETWEEN '2016-01-03' AND '2016-10-26';
SELECT rb.BreweryName, rbb.BrandName FROM rootbeer AS rb JOIN rootbeerbrand AS rbb ON rb.BrandID = rbb.BrandID WHERE rb.ContainerType = 'Can' AND rb.PurchaseDate < '2015-06-06';
SELECT rb.BrandName FROM rootbeer AS rb JOIN rootbeerbrand AS rbb ON rb.BrandID = rbb.BrandID WHERE rb.ContainerType = 'Bottle' AND rbb.FirstBrewedYear <= 1930;
SELECT COUNT(*) FROM transaction WHERE CreditCardType = 'MasterCard' AND TransactionDate BETWEEN '2014-12-25' AND '2016-05-20' AND CustomerID = (SELECT CustomerID FROM customers WHERE First = 'Anna' AND Last = 'Himes');
SELECT AVG(StarRating) FROM rootbeerreview JOIN customers ON rootbeerreview.CustomerID = customers.CustomerID WHERE customers.Gender = 'F' AND rootbeerreview.BrandID = 10018 AND rootbeerreview.ReviewDate BETWEEN '2015-01-25' AND '2015-03-10';
SELECT rb.BrandName FROM rootbeerbrand rb JOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID WHERE rbr.CustomerID = 331115 AND rbr.StarRating = 1 AND rbr.Review = 'Yuk, more like licorice soda';
SELECT SUM(t.PurchasePrice) FROM transaction t JOIN location l ON t.LocationID = l.LocationID WHERE t.CreditCardType = 'Visa' AND l.LocationName = 'Sac State American River Courtyard' AND t.TransactionDate BETWEEN '2014-06-03' AND '2015-11-27';
SELECT COUNT(*) FROM transaction JOIN location ON transaction.LocationID = location.LocationID WHERE location.LocationName = 'Sac State Union' AND transaction.CreditCardType = 'American Express' AND transaction.TransactionDate LIKE '2014%';
SELECT Latitude, Longitude FROM location JOIN geolocation ON location.LocationID = geolocation.LocationID WHERE LocationName = 'Sac State Union';
SELECT Review FROM rootbeerreview WHERE BrandID = (SELECT BrandID FROM rootbeerbrand WHERE BrandName = 'Bulldog') AND ReviewDate = '2013-07-26';
SELECT rb.BrandName, (rb.CurrentRetailPrice - rb.WholesaleCost) AS UnitProfit FROM rootbeerbrand rb JOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID WHERE rbr.StarRating = 5 AND rbr.ReviewDate LIKE '2013%' GROUP BY rb.BrandID, rb.BrandName, rb.CurrentRetailPrice, rb.WholesaleCost;
SELECT c.First, c.Last, TIMESTAMPDIFF(YEAR, c.FirstPurchaseDate, r.ReviewDate) AS YearsSinceFirstPurchase FROM customers c JOIN rootbeerreview r ON c.CustomerID = r.CustomerID WHERE c.CustomerID = (SELECT MIN(CustomerID) FROM customers) ORDER BY r.ReviewDate ASC LIMIT 1;
SELECT T1.CreditCardType FROM transaction AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.First = 'Kenneth' AND T2.Last = 'Walton';
SELECT rb.ContainerType, rbb.BrandName, rbr.StarRating FROM rootbeer AS rb JOIN rootbeerbrand AS rbb ON rb.BrandID = rbb.BrandID JOIN rootbeerreview AS rbr ON rbb.BrandID = rbr.BrandID WHERE rb.RootBeerID = 10054;
SELECT rb.RootBeerID, rbb.BrandName FROM rootbeer AS rb JOIN rootbeerbrand AS rbb ON rb.BrandID = rbb.BrandID JOIN transaction AS t ON rb.RootBeerID = t.RootBeerID JOIN customers AS c ON t.CustomerID = c.CustomerID WHERE (c.First = 'Tim' AND c.Last = 'Ocel') OR (c.First = 'Dawn' AND c.Last = 'Childress');
SELECT rb.RootBeerID FROM rootbeer rb JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID WHERE rbb.BrandName IN('Bulldog', 'Bundaberg', 'Dad''s', 'Dog n Suds', 'Virgil''s');
SELECT COUNT(*) FROM transaction JOIN rootbeer ON transaction.RootBeerID = rootbeer.RootBeerID JOIN customers ON transaction.CustomerID = customers.CustomerID WHERE rootbeer.ContainerType = 'Bottle' AND customers.First = 'Jim' AND customers.Last = 'Breech';
SELECT COUNT(*) FROM transaction t JOIN rootbeer r ON t.RootBeerID = r.RootBeerID JOIN rootbeerbrand rb ON r.BrandID = rb.BrandID WHERE rb.State = 'CA';
SELECT AVG(rootbeerreview.StarRating) FROM rootbeerreview JOIN customers ON rootbeerreview.CustomerID = customers.CustomerID WHERE customers.SubscribedToEmailList = 'TRUE';
SELECT     (SELECT COUNT(r.ContainerType) FROM rootbeer r     INNER JOIN rootbeerbrand b ON r.BrandID = b.BrandID     WHERE b.State = 'LA' AND r.ContainerType = 'Bottle') -     (SELECT COUNT(r.ContainerType) FROM rootbeer r     INNER JOIN rootbeerbrand b ON r.BrandID = b.BrandID     WHERE b.State = 'MO' AND r.ContainerType = 'Bottle') AS Difference;
Error: 第 5344 个样本有 2 个SQL。
SELECT T1.First, T1.Last, T3.CreditCardType FROM customers AS T1 JOIN transaction AS T3 ON T1.CustomerID = T3.CustomerID ORDER BY T3.PurchasePrice DESC LIMIT 10;
SELECT rb.BrandName, SUM(t.PurchasePrice) as TotalAmountSold FROM rootbeerbrand rb JOIN rootbeer rbk ON rb.BrandID = rbk.BrandID JOIN transaction t ON rbk.RootBeerID = t.RootBeerID WHERE rb.Caffeinated = 'FALSE' AND rb.CaneSugar = 'FALSE' GROUP BY rb.BrandName;
SELECT rb.BrandName FROM rootbeer rb JOIN rootbeerbrand rbb ON rb.BrandID = rbb.BrandID GROUP BY rb.BrandID, rbb.BrandName ORDER BY COUNT(*) ASC LIMIT 1;
SELECT rb.BrandName, AVG(rbr.StarRating) as AverageRating FROM rootbeer AS rb JOIN rootbeerreview AS rbr ON rb.BrandID = rbr.BrandID JOIN (     SELECT BrandID     FROM rootbeer     GROUP BY BrandID     ORDER BY COUNT(BrandID) DESC     LIMIT 1 ) AS b ON rb.BrandID = b.BrandID GROUP BY rb.BrandID;
SELECT     (SUM(T1.PurchasePrice * (T3.BrandName = 'River City')) - SUM(T1.PurchasePrice * (T3.BrandName = 'Frostie'))) * 100 / SUM(T1.PurchasePrice * (T3.BrandName = 'Frostie')) AS PercentageDifference FROM     transaction T1 JOIN     rootbeer T2 ON T1.RootBeerID = T2.RootBeerID JOIN     rootbeerbrand T3 ON T2.BrandID = T3.BrandID;
SELECT DISTINCT City FROM location WHERE State = 'CA';
SELECT (COUNT(c.CustomerID) FILTER (WHERE c.Gender = 'F') * 100.0 / COUNT(c.CustomerID)) AS Percentage FROM customers c WHERE c.SubscribedToEmailList = 'TRUE';
SELECT T1.CreditCardType FROM transaction AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.First = 'Dick' AND T2.Last = 'Ruthven' GROUP BY T1.CreditCardType;
SELECT COUNT(*) FROM transaction t JOIN location l ON t.LocationID = l.LocationID WHERE l.LocationName = 'Sac State Union';
SELECT rbv.StarRating FROM rootbeerreview rbv JOIN customers c ON rbv.CustomerID = c.CustomerID JOIN rootbeerbrand rbb ON rbv.BrandID = rbb.BrandID WHERE c.First = 'Urijah' AND c.Last = 'Faber' AND rbb.BrandName = 'Frostie';
SELECT rb.BrandName FROM rootbeerbrand rb JOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID WHERE rbr.Review = 'Too Spicy!' GROUP BY rb.BrandID, rb.BrandName HAVING rbr.StarRating = (     SELECT MIN(StarRating)     FROM rootbeerreview     WHERE Review = 'Too Spicy!' );
SELECT COUNT(*) FROM transaction WHERE LocationID = (SELECT LocationID FROM location WHERE LocationName = 'Sac State American River Courtyard') AND CreditCardType = 'MasterCard';
SELECT rb.BrandName FROM rootbeerbrand rb JOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID WHERE rb.CaneSugar = 'TRUE' AND rb.Honey = 'TRUE' AND YEAR(rbr.ReviewDate) = 2012 GROUP BY rb.BrandID, rb.BrandName ORDER BY AVG(rbr.StarRating) ASC LIMIT 1;
SELECT l.Latitude, l.Longitude FROM location l JOIN transaction t ON l.LocationID = t.LocationID JOIN customers c ON c.CustomerID = t.CustomerID WHERE c.First = 'Tommy' AND c.Last = 'Kono' AND t.TransactionDate LIKE '2014%';
SELECT c.Email FROM customers c JOIN transaction t ON c.CustomerID = t.CustomerID WHERE t.TransactionID = 100016;
SELECT COUNT(*) FROM transaction WHERE CreditCardType = 'American Express' AND RootBeerID IN (     SELECT RootBeerID     FROM rootbeer     WHERE ContainerType = 'Bottle' );
SELECT T3.LocationName FROM rootbeer AS T1 JOIN transaction AS T2 ON T1.RootBeerID = T2.RootBeerID JOIN location AS T3 ON T2.LocationID = T3.LocationID WHERE T1.ContainerType = 'Bottle' GROUP BY T3.LocationName ORDER BY COUNT(T1.ContainerType) DESC LIMIT 1;
SELECT rb.BrandName FROM rootbeerbrand rb JOIN rootbeerreview rbr ON rb.BrandID = rbr.BrandID WHERE rbr.StarRating = 5 GROUP BY rb.BrandName ORDER BY COUNT(*) DESC LIMIT 3;
SELECT Latitude, Longitude FROM location JOIN geolocation ON location.LocationID = geolocation.LocationID WHERE LocationName = 'Sac State American River Courtyard';
SELECT COUNT(SalesID) FROM Sales WHERE CustomerID = 80;
SELECT SUM(Quantity) FROM Sales WHERE SalesID BETWEEN 1 AND 10;
SELECT AVG(Quantity) FROM Sales WHERE SalesID BETWEEN 20 AND 30;
SELECT ProductID FROM Sales WHERE Quantity = (SELECT MAX(Quantity) FROM Sales);
SELECT COUNT(DISTINCT ProductID) FROM Products WHERE Price = (SELECT MIN(Price) FROM Products);
SELECT Name FROM Products WHERE Price = 0;
SELECT Name FROM Products WHERE ProductID BETWEEN 1 AND 10;
SELECT p.Name FROM Products p JOIN Sales s ON p.ProductID = s.ProductID WHERE s.Quantity = (     SELECT MIN(Quantity)     FROM Sales )
SELECT COUNT(DISTINCT s.CustomerID) FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Hex Nut 9';
SELECT COUNT(Sales.SalesID) FROM Sales JOIN Products ON Sales.ProductID = Products.ProductID WHERE Products.Name = 'Flat Washer 8';
SELECT DISTINCT p.Name FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.SalesPersonID = 10;
SELECT Customers.FirstName FROM Customers JOIN Sales ON Customers.CustomerID = Sales.CustomerID WHERE Sales.ProductID = 1;
SELECT Customers.LastName FROM Customers JOIN Sales ON Customers.CustomerID = Sales.CustomerID WHERE Sales.SalesID = 178;
SELECT DISTINCT p.ProductID FROM Products p JOIN Sales s ON p.ProductID = s.ProductID JOIN Customers c ON s.CustomerID = c.CustomerID WHERE c.FirstName = 'Abby';
SELECT DISTINCT p.ProductID FROM Products p JOIN Sales s ON p.ProductID = s.ProductID JOIN Employees e ON s.SalesPersonID = e.EmployeeID WHERE e.FirstName = 'Meander';
SELECT Employees.LastName FROM Employees JOIN Sales ON Employees.EmployeeID = Sales.SalesPersonID WHERE Sales.SalesID = 100;
SELECT E.FirstName FROM Employees E JOIN Sales S ON E.EmployeeID = S.SalesPersonID JOIN Customers C ON S.CustomerID = C.CustomerID WHERE C.FirstName = 'Abigail' GROUP BY E.FirstName;
SELECT COUNT(*) FROM Sales S JOIN Products P ON S.ProductID = P.ProductID WHERE S.CustomerID = 11782 AND P.Price = 0;
SELECT C.FirstName, C.MiddleInitial, C.LastName FROM Customers C JOIN Sales S ON C.CustomerID = S.CustomerID WHERE S.SalesPersonID = 5;
SELECT Sales.SalesID FROM Sales JOIN Employees ON Sales.SalesPersonID = Employees.EmployeeID WHERE Employees.FirstName LIKE 's%';
SELECT MAX(p.Price) FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID JOIN Products p ON s.ProductID = p.ProductID WHERE c.CustomerID BETWEEN 1 AND 100;
SELECT C.FirstName, C.MiddleInitial, C.LastName, SUM(S.Quantity) as TotalQuantity FROM Customers C JOIN Sales S ON C.CustomerID = S.CustomerID WHERE C.LastName = 'Valdez' GROUP BY C.CustomerID, C.FirstName, C.MiddleInitial, C.LastName ORDER BY TotalQuantity DESC LIMIT 1;
SELECT SUM(T1.SalesID) FROM Sales T1 JOIN Employees T2 ON T1.SalesPersonID = T2.EmployeeID WHERE T2.FirstName IN ('Morningstar', 'Heather', 'Dean');
SELECT COUNT(*) > 0 AS HasAlexPurchasedProduct498 FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID WHERE s.ProductID = 498 AND c.FirstName = 'Alex';
SELECT SUM(p.Price * s.Quantity) AS TotalPrice FROM Sales s JOIN Products p ON s.ProductID = p.ProductID JOIN Customers c ON s.CustomerID = c.CustomerID WHERE c.FirstName = 'Adam';
SELECT SUM(p.Price * s.Quantity) AS TotalPrice FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.ProductID BETWEEN 400 AND 500;
SELECT SUM(s.Quantity) FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name LIKE 'C%';
SELECT SUM(S.Quantity) FROM Sales S JOIN Customers C ON S.CustomerID = C.CustomerID WHERE C.FirstName = 'Adrian';
SELECT ProductID FROM Products ORDER BY Price DESC LIMIT 5;
SELECT COUNT(*) FROM Products WHERE Price = 0;
SELECT p.Name FROM Products p JOIN Sales s ON p.ProductID = s.ProductID WHERE s.Quantity > 950;
SELECT E.FirstName, E.MiddleInitial, E.LastName FROM Employees E JOIN Sales S ON E.EmployeeID = S.SalesPersonID WHERE S.Quantity = 1000;
SELECT p.Name, s.Quantity FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.SalesID BETWEEN 1 AND 10;
SELECT SUM(p.Price * s.Quantity) AS TotalSalesAmount FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Reflector';
SELECT     CASE         WHEN (SELECT SUM(s.Quantity) FROM Sales s INNER JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'HL Mountain Frame - Silver, 42') >            (SELECT SUM(s.Quantity) FROM Sales s INNER JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'HL Mountain Frame - Black, 42')         THEN 'Silver'         ELSE 'Black'     END AS BestSellingColour
SELECT ABS(     (SELECT Price FROM Products WHERE Name = 'HL Mountain Frame - Black, 42') -     (SELECT Price FROM Products WHERE Name = 'LL Mountain Frame - Black, 42') ) AS PriceDifference;
SELECT COUNT(*) AS TotalSales FROM Sales s JOIN Employees e ON s.SalesPersonID = e.EmployeeID WHERE e.FirstName = 'Michel' AND e.MiddleInitial = 'E.' AND e.LastName = 'DeFrance';
Error: 第 5401 个样本有 2 个SQL。
SELECT COUNT(*) FROM Sales s JOIN Customers c ON s.CustomerID = c.CustomerID JOIN Employees e ON s.SalesPersonID = e.EmployeeID JOIN Products p ON s.ProductID = p.ProductID WHERE e.FirstName = 'Innes' AND e.MiddleInitial = 'E.' AND e.LastName = 'del Castillo' AND p.Name = 'Short-Sleeve Classic Jersey, L';
SELECT E.FirstName, E.MiddleInitial, E.LastName FROM Employees E JOIN Sales S ON E.EmployeeID = S.SalesPersonID JOIN Customers C ON S.CustomerID = C.CustomerID JOIN Products P ON S.ProductID = P.ProductID WHERE C.FirstName = 'Elizabeth' AND C.MiddleInitial = 'A.' AND C.LastName = 'White' AND P.Name = 'Road-250 Black, 48';
SELECT COUNT(DISTINCT E.EmployeeID) FROM Sales S JOIN Employees E ON S.SalesPersonID = E.EmployeeID JOIN Products P ON S.ProductID = P.ProductID WHERE P.Name = 'Headlights - Weatherproof';
SELECT SUM(S.Quantity * P.Price) AS Revenue FROM Sales S JOIN Products P ON S.ProductID = P.ProductID WHERE P.Name = 'HL Road Frame - Red, 56';
SELECT COUNT(SalesID) FROM Sales JOIN Customers ON Sales.CustomerID = Customers.CustomerID WHERE Customers.FirstName = 'Joe' AND Customers.MiddleInitial = 'L.' AND Customers.LastName = 'Lopez';
SELECT C.FirstName, C.MiddleInitial, C.LastName FROM Customers C JOIN Sales S ON C.CustomerID = S.CustomerID JOIN Products P ON S.ProductID = P.ProductID WHERE P.Name = 'Touring Rim' AND S.Quantity > 0;
SELECT E.FirstName, E.LastName, COUNT(DISTINCT C.CustomerID) as NumberOfCustomers FROM Employees E JOIN Sales S ON E.EmployeeID = S.SalesPersonID JOIN Customers C ON C.CustomerID = S.CustomerID GROUP BY E.EmployeeID, E.FirstName, E.LastName;
Error: 第 5409 个样本有 3 个SQL。
SELECT FirstName, MiddleInitial, LastName FROM Employees WHERE EmployeeID = 7;
SELECT     (SELECT Name FROM Products WHERE Price = (SELECT MAX(Price) FROM Products WHERE Price > 0)) AS Most_Expensive_Product,     (SELECT Name FROM Products WHERE Price = (SELECT MIN(Price) FROM Products WHERE Price > 0)) AS Least_Expensive_Product
SELECT     (COUNT(CASE WHEN E.FirstName = 'Albert' AND E.MiddleInitial = 'I' AND E.LastName = 'Ringer' THEN S.SalesID ELSE NULL END) * 100.0 / COUNT(S.SalesID)) AS PercentageOfSalesByAlbert FROM     Sales S JOIN     Employees E ON S.SalesPersonID = E.EmployeeID JOIN     Customers C ON S.CustomerID = C.CustomerID JOIN     Products P ON S.ProductID = P.ProductID WHERE     P.Name = 'ML Bottom Bracket';
SELECT COUNT(*) FROM Customers WHERE FirstName = 'Abigail';
SELECT SUM(S.Quantity) FROM Sales S JOIN Products P ON S.ProductID = P.ProductID WHERE P.Name = 'Blade';
SELECT E.FirstName, E.LastName FROM Employees E JOIN Sales S ON E.EmployeeID = S.SalesPersonID GROUP BY E.EmployeeID, E.FirstName, E.LastName ORDER BY SUM(S.Quantity) DESC LIMIT 1;
SELECT C.FirstName, C.LastName FROM Customers C JOIN Sales S ON C.CustomerID = S.CustomerID WHERE S.Quantity = (SELECT MAX(Quantity) FROM Sales) GROUP BY C.CustomerID, C.FirstName, C.LastName;
SELECT P.Name FROM Products P JOIN Sales S ON P.ProductID = S.ProductID WHERE S.SalesPersonID = 20 GROUP BY P.Name ORDER BY SUM(S.Quantity) DESC LIMIT 1;
SELECT E.FirstName FROM Employees E JOIN Sales S ON E.EmployeeID = S.SalesPersonID WHERE S.Quantity > 500;
SELECT DISTINCT Customers.FirstName FROM Customers JOIN Sales ON Customers.CustomerID = Sales.CustomerID WHERE Sales.SalesPersonID = 1;
SELECT SUM(S.Quantity) FROM Sales S JOIN Employees E ON S.SalesPersonID = E.EmployeeID JOIN Customers C ON S.CustomerID = C.CustomerID WHERE E.FirstName = 'Abraham' AND C.FirstName = 'Aaron' AND C.LastName = 'Alexander';
SELECT C.FirstName, C.LastName FROM Customers C JOIN Sales S ON C.CustomerID = S.CustomerID WHERE S.Quantity > 600;
SELECT C.FirstName, C.LastName FROM Customers C JOIN Sales S ON C.CustomerID = S.CustomerID JOIN Products P ON S.ProductID = P.ProductID WHERE C.FirstName = 'Cameron' GROUP BY C.FirstName, C.LastName ORDER BY SUM(S.Quantity) DESC LIMIT 1;
SELECT s.SalesID FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'Hex Nut' AND p.Price > 100;
SELECT DISTINCT c.CustomerID FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID JOIN Products p ON s.ProductID = p.ProductID WHERE p.Price BETWEEN 1000 AND 2000;
SELECT SUM(s.Quantity) FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Price = 0;
SELECT     (SUM(CASE WHEN p.Price = 0 THEN s.Quantity ELSE 0 END) * 1.0 / SUM(s.Quantity)) * 100 AS PercentageOfGifts FROM     Sales s JOIN     Products p ON s.ProductID = p.ProductID;
SELECT (SUM(CASE WHEN p.Name = 'Blade' THEN s.Quantity ELSE 0 END) * 1.0 / SUM(s.Quantity)) * 100 AS PercentageOfBladesSold FROM Sales s JOIN Products p ON s.ProductID = p.ProductID;
SELECT COUNT(*) FROM Employees WHERE LastName = 'Ringer';
SELECT COUNT(*) FROM Products WHERE ProductID < 15 AND Price <= 10;
SELECT p.Name FROM Products p JOIN Sales s ON p.ProductID = s.ProductID JOIN Customers c ON s.CustomerID = c.CustomerID WHERE c.FirstName = 'Aaron' AND c.LastName = 'Alexander';
SELECT p.ProductID, p.Name FROM Products p JOIN Sales s ON p.ProductID = s.ProductID WHERE s.Quantity BETWEEN 400 AND 500 GROUP BY p.ProductID, p.Name HAVING p.Price = (SELECT MAX(Price) FROM Products);
SELECT C.FirstName, C.LastName, SUM(S.Quantity) as TotalQuantity FROM Customers C JOIN Sales S ON C.CustomerID = S.CustomerID WHERE C.FirstName = 'Kate' GROUP BY C.CustomerID, C.FirstName, C.LastName ORDER BY TotalQuantity DESC LIMIT 1;
SELECT Customers.CustomerID, Sales.SalesID FROM Sales JOIN Customers ON Sales.CustomerID = Customers.CustomerID JOIN Products ON Sales.ProductID = Products.ProductID WHERE Products.Price BETWEEN 100 AND 150 AND Sales.Quantity < 25;
SELECT s.Quantity, p.Price FROM Sales s JOIN Products p ON s.ProductID = p.ProductID JOIN Customers c ON s.CustomerID = c.CustomerID WHERE c.FirstName = 'Abigail' AND c.LastName = 'Henderson';
SELECT COUNT(*) FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.Quantity = 60 AND p.Price <= 500;
SELECT COUNT(DISTINCT c.CustomerID) FROM Customers c JOIN Sales s ON c.CustomerID = s.CustomerID WHERE c.FirstName = 'Erica' AND s.Quantity < 200;
SELECT p.Name FROM Products p JOIN Sales s ON p.ProductID = s.ProductID JOIN Customers c ON s.CustomerID = c.CustomerID WHERE c.FirstName = 'Kathryn' AND c.LastName = 'Ashe' GROUP BY p.Name ORDER BY SUM(s.Quantity) DESC LIMIT 1;
SELECT p.Price, s.Quantity FROM Products p JOIN Sales s ON p.ProductID = s.ProductID WHERE p.Name = 'Seat Tube';
SELECT p.Name, p.Price FROM Products p JOIN Sales s ON p.ProductID = s.ProductID JOIN Customers c ON s.CustomerID = c.CustomerID WHERE c.FirstName = 'Erica' AND c.LastName = 'Xu';
SELECT s.SalesID FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name = 'External Lock Washer 7' AND s.Quantity = 590;
SELECT C.FirstName, C.LastName FROM Customers C JOIN Sales S ON C.CustomerID = S.CustomerID WHERE S.SalesID BETWEEN 30 AND 40 GROUP BY C.CustomerID, C.FirstName, C.LastName HAVING SUM(S.Quantity) = 403;
SELECT C.CustomerID, C.LastName FROM Customers C JOIN Sales S ON C.CustomerID = S.CustomerID WHERE S.Quantity > (SELECT AVG(Quantity) * 0.9 FROM Sales) GROUP BY C.CustomerID, C.LastName;
SELECT MULTIPLY(DIVIDE((SELECT COUNT(*) FROM (SELECT DISTINCT Sales.SalesID FROM Sales JOIN Products ON Sales.ProductID = Products.ProductID WHERE Sales.SalesID BETWEEN 1 AND 200 AND Products.Price BETWEEN 200 AND 300) AS SubQuery1), (SELECT COUNT(*) FROM Sales WHERE Sales.SalesID BETWEEN 1 AND 200)), 1.0);
SELECT Name FROM Products WHERE Price = (SELECT MAX(Price) FROM Products);
SELECT COUNT(*) FROM Customers WHERE FirstName = 'Madison';
SELECT COUNT(DISTINCT Name) FROM Products WHERE Name LIKE '%HL Touring Frame%';
SELECT COUNT(CustomerID) FROM Customers WHERE LastName = (     SELECT LastName     FROM Customers     GROUP BY LastName     ORDER BY COUNT(*) DESC     LIMIT 1 );
SELECT COUNT(*) FROM Products WHERE Price = 0;
SELECT E.FirstName, E.MiddleInitial, E.LastName FROM Employees E JOIN Sales S ON E.EmployeeID = S.SalesPersonID GROUP BY E.EmployeeID, E.FirstName, E.MiddleInitial, E.LastName ORDER BY COUNT(S.SalesID) DESC LIMIT 1;
SELECT C.FirstName, C.MiddleInitial, C.LastName FROM Customers C JOIN Sales S ON C.CustomerID = S.CustomerID JOIN Products P ON S.ProductID = P.ProductID WHERE S.Quantity * P.Price = (     SELECT MAX(S1.Quantity * P1.Price)     FROM Sales S1     JOIN Products P1 ON S1.ProductID = P1.ProductID )
SELECT SUM(S.Quantity) FROM Sales S JOIN Products P ON S.ProductID = P.ProductID WHERE P.Name = 'Mountain-500 Black 42';
SELECT SUM(S.Quantity * P.Price) AS TotalAmountOfSales FROM Sales S JOIN Products P ON S.ProductID = P.ProductID JOIN Employees E ON S.SalesPersonID = E.EmployeeID WHERE E.FirstName = 'Heather' AND E.LastName = 'McBadden';
SELECT SUM(S.Quantity) FROM Sales S JOIN Products P ON S.ProductID = P.ProductID JOIN Employees E ON S.SalesPersonID = E.EmployeeID WHERE P.Name = 'Mountain-100 Silver, 38' AND E.FirstName = 'Stearns' AND E.MiddleInitial = 'M' AND E.LastName = 'MacFeather';
SELECT COUNT(DISTINCT p.ProductID) FROM Sales s JOIN Products p ON s.ProductID = p.ProductID JOIN Customers c ON s.CustomerID = c.CustomerID WHERE c.FirstName = 'Dalton' AND c.MiddleInitial = 'M' AND c.LastName = 'Coleman';
SELECT E.FirstName, E.MiddleInitial, E.LastName FROM Employees E JOIN Sales S ON E.EmployeeID = S.SalesPersonID GROUP BY E.EmployeeID, E.FirstName, E.MiddleInitial, E.LastName ORDER BY COUNT(S.SalesID) DESC LIMIT 3;
SELECT p.Name, SUM(s.Quantity) as TotalQuantity FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE p.Name LIKE 'Mountain-500 Black%' GROUP BY p.Name ORDER BY TotalQuantity DESC LIMIT 1;
SELECT COUNT(DISTINCT E.EmployeeID) FROM Employees E JOIN Sales S ON E.EmployeeID = S.SalesPersonID JOIN Products P ON S.ProductID = P.ProductID WHERE P.Name = 'ML Road Frame-W - Yellow, 40';
SELECT SUM(Quantity) FROM Sales JOIN Products ON Sales.ProductID = Products.ProductID WHERE Sales.SalesID = 551971 AND Products.Name = 'Chainring Bolts';
SELECT COUNT(DISTINCT E.EmployeeID) FROM Employees E JOIN Sales S ON E.EmployeeID = S.SalesPersonID JOIN Products P ON S.ProductID = P.ProductID WHERE P.Name = 'Touring-2000 Blue, 50' AND S.Quantity > 20000;
SELECT SUM(S.Quantity * P.Price) AS TotalCost FROM Sales S JOIN Products P ON S.ProductID = P.ProductID JOIN Employees E ON S.SalesPersonID = E.EmployeeID WHERE P.Name = 'Road-650, Red, 60' AND E.FirstName = 'Abraham' AND E.MiddleInitial = 'E.' AND E.LastName = 'Bennet';
SELECT p.Name, SUM(s.Quantity * p.Price) as TotalPrice FROM Sales s JOIN Products p ON s.ProductID = p.ProductID GROUP BY p.ProductID, p.Name ORDER BY SUM(s.Quantity) DESC, TotalPrice DESC LIMIT 1;
SELECT FirstName FROM Customers WHERE LastName = 'Chen';
SELECT MiddleInitial, COUNT(MiddleInitial) as InitialCount FROM Employees GROUP BY MiddleInitial ORDER BY InitialCount DESC LIMIT 1;
SELECT AVG(Price) FROM Products WHERE Price BETWEEN 100 AND 200;
SELECT C.FirstName, C.MiddleInitial, C.LastName FROM Customers C JOIN Sales S ON C.CustomerID = S.CustomerID WHERE S.Quantity > (SELECT AVG(Quantity) FROM Sales) GROUP BY C.CustomerID, C.FirstName, C.MiddleInitial, C.LastName;
SELECT C.FirstName, C.MiddleInitial, C.LastName FROM Customers C JOIN Sales S ON C.CustomerID = S.CustomerID JOIN Products P ON S.ProductID = P.ProductID GROUP BY C.CustomerID, C.FirstName, C.MiddleInitial, C.LastName ORDER BY SUM(S.Quantity * P.Price) DESC LIMIT 1;
SELECT E.FirstName, E.MiddleInitial, E.LastName FROM Employees E JOIN Sales S ON E.EmployeeID = S.SalesPersonID JOIN Products P ON S.ProductID = P.ProductID WHERE P.Name = 'Blade' GROUP BY E.EmployeeID, E.FirstName, E.MiddleInitial, E.LastName ORDER BY SUM(S.Quantity * P.Price) DESC LIMIT 1;
SELECT C.FirstName, C.MiddleInitial, C.LastName FROM Customers C JOIN Sales S ON C.CustomerID = S.CustomerID JOIN Products P ON S.ProductID = P.ProductID GROUP BY C.CustomerID, C.FirstName, C.MiddleInitial, C.LastName HAVING SUM(S.Quantity * P.Price) > 50000 ORDER BY SUM(S.Quantity * P.Price) DESC;
SELECT p.Name FROM Products p JOIN Sales s ON p.ProductID = s.ProductID WHERE s.Quantity = (     SELECT MAX(Quantity)     FROM Sales )
SELECT p.Name FROM Products p JOIN Sales s ON p.ProductID = s.ProductID WHERE s.Quantity < (SELECT AVG(Quantity) FROM Sales) GROUP BY p.Name;
SELECT COUNT(*) FROM Dish WHERE first_appeared < 1851 OR first_appeared > 2012;
SELECT     CASE         WHEN (SELECT DATEDIFF(last_appeared, first_appeared) FROM Dish WHERE name = 'Anchovies') >            (SELECT DATEDIFF(last_appeared, first_appeared) FROM Dish WHERE name = 'Fresh lobsters in every style')         THEN 'Anchovies'         ELSE 'Fresh lobsters in every style'     END AS Longer_Dish FROM Dish LIMIT 1;
SELECT d.name FROM Dish d WHERE d.lowest_price = 0 ORDER BY d.menus_appeared DESC LIMIT 1;
SELECT COUNT(*) FROM Menu WHERE name = 'Waldorf Astoria' AND page_count = 4;
SELECT D.name FROM Dish D JOIN MenuItem MI ON D.id = MI.dish_id WHERE MI.xpos < 0.25 AND MI.ypos < 0.25 AND MI.menu_page_id = 1389 LIMIT 1;
Error: 第 5476 个样本有 2 个SQL。
SELECT COUNT(*) FROM MenuPage mp JOIN MenuItem mi ON mp.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Clear green turtle' AND d.highest_price IS NULL;
SELECT MAX(mi.price) FROM MenuItem mi JOIN Dish d ON mi.dish_id = d.id JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE d.name = 'Clear green turtle';
Error: 第 5479 个样本有 2 个SQL。
Error: 第 5480 个样本有 2 个SQL。
SELECT COUNT(DISTINCT m.id) FROM Menu m JOIN MenuItem mi ON m.id = mi.menu_page_id JOIN Dish d ON d.id = mi.dish_id WHERE d.name = 'Clear green turtle' AND m.call_number IS NULL;
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE m.name = 'Zentral Theater Terrace';
SELECT D.name FROM Dish D JOIN MenuItem MI ON D.id = MI.dish_id JOIN MenuPage MP ON MI.menu_page_id = MP.id JOIN Menu M ON MP.menu_id = M.id WHERE M.name = 'Zentral Theater Terrace' GROUP BY D.name ORDER BY D.highest_price DESC LIMIT 1;
SELECT COUNT(Dish.id) FROM Dish JOIN MenuItem ON Dish.id = MenuItem.dish_id JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id JOIN Menu ON MenuPage.menu_id = Menu.id WHERE Menu.name = 'Zentral Theater Terrace';
SELECT COUNT(DISTINCT d.id) FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE m.name = 'Waldorf Astoria';
SELECT m.id FROM Menu m JOIN MenuItem mi ON m.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE m.sponsor IS NULL AND d.name = 'Clear green turtle';
SELECT AVG(mp.page_number) FROM MenuPage mp JOIN MenuItem mi ON mp.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Clear green turtle';
SELECT AVG(MenuItem.price) FROM MenuItem JOIN Dish ON MenuItem.dish_id = Dish.id JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id JOIN Menu ON MenuPage.menu_id = Menu.id WHERE Menu.name = 'Zentral Theater Terrace';
SELECT COUNT(*) FROM MenuItem WHERE created_at LIKE '2011-03-28%';
SELECT COUNT(*) FROM MenuItem WHERE menu_page_id = 144;
SELECT COUNT(*) FROM Menu WHERE location = 'Dutcher House';
SELECT COUNT(*) FROM Dish WHERE times_appeared > menus_appeared;
SELECT COUNT(*) FROM Menu WHERE venue = 'STEAMSHIP';
SELECT COUNT(*) FROM MenuPage WHERE menu_id IN (     SELECT id     FROM Menu     WHERE date = '1898-11-17' );
SELECT D.name FROM Dish D JOIN MenuItem MI ON D.id = MI.dish_id JOIN MenuPage MP ON MI.menu_page_id = MP.id WHERE MP.id = 174;
SELECT d.name, mi.menu_page_id FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id WHERE d.first_appeared = 1861;
SELECT D.name, MAX(MI.price) AS highest_price FROM MenuItem MI JOIN Dish D ON MI.dish_id = D.id WHERE MI.created_at LIKE '2011-05-23%' AND MI.menu_page_id = 7610 GROUP BY D.name;
SELECT D.name FROM Dish D JOIN MenuItem MI ON D.id = MI.dish_id JOIN MenuPage MP ON MI.menu_page_id = MP.id WHERE MP.page_number = 30 AND MP.full_height = (     SELECT MIN(full_height)     FROM MenuPage     WHERE page_number = 30 )
SELECT MenuPage.page_number, Menu.name FROM Menu JOIN MenuPage ON Menu.id = MenuPage.menu_id WHERE Menu.page_count = (SELECT MAX(page_count) FROM Menu);
SELECT COUNT(Dish.id) FROM Dish JOIN MenuItem ON Dish.id = MenuItem.dish_id JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id JOIN Menu ON MenuPage.menu_id = Menu.id WHERE Menu.id = (     SELECT Menu.id     FROM Menu     JOIN MenuPage ON Menu.id = MenuPage.menu_id     JOIN MenuItem ON MenuPage.id = MenuItem.menu_page_id     GROUP BY Menu.id     ORDER BY COUNT(Dish.id) DESC     LIMIT 1 ) AND MenuPage.page_number = 2;
SELECT MenuItem.id, MenuItem.xpos, MenuItem.ypos FROM MenuItem JOIN Dish ON MenuItem.dish_id = Dish.id WHERE Dish.name = 'Fresh lobsters in every style';
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE m.sponsor = 'CHAS.BRADLEY''S OYSTER & DINING ROOM' AND mi.xpos < 0.25 AND mi.ypos < 0.25;
SELECT Menu.sponsor, Menu.event FROM Menu JOIN MenuPage ON Menu.id = MenuPage.menu_id JOIN MenuItem ON MenuPage.id = MenuItem.menu_page_id JOIN Dish ON MenuItem.dish_id = Dish.id WHERE Dish.name = 'Cerealine with Milk';
SELECT MULTIPLY(DIVIDE((SELECT COUNT(*) FROM MenuItem mi JOIN Dish d ON mi.dish_id = d.id WHERE d.name LIKE '%Bluefish%' AND mi.xpos BETWEEN 0.25 AND 0.75 AND mi.ypos BETWEEN 0.25 AND 0.75), (SELECT COUNT(*) FROM MenuItem mi JOIN Dish d ON mi.dish_id = d.id WHERE d.name LIKE '%Bluefish%')), 1.0) AS percentage;
SELECT sponsor FROM Menu WHERE id = 12463;
SELECT event FROM Menu WHERE sponsor = 'REPUBLICAN HOUSE';
SELECT T1.place FROM Menu AS T1 WHERE T1.id = 12472;
SELECT physical_description FROM Menu WHERE sponsor = 'Noviomagus';
SELECT occasion FROM Menu WHERE id = 12463;
SELECT location FROM Menu WHERE sponsor = 'Norddeutscher Lloyd Bremen';
SELECT mp.id FROM MenuPage mp JOIN Menu m ON mp.menu_id = m.id WHERE m.sponsor = 'Occidental & Oriental';
SELECT MenuPage.image_id FROM MenuPage JOIN Menu ON MenuPage.menu_id = Menu.id WHERE Menu.location = 'Manhattan Hotel';
SELECT mp.full_height, mp.full_width FROM MenuPage mp JOIN Menu m ON mp.menu_id = m.id WHERE m.name = 'El Fuerte Del Palmar';
SELECT EXISTS(     SELECT 1     FROM Menu m     JOIN MenuPage mp ON m.id = mp.menu_id     WHERE m.name = 'The Biltmore' AND mp.uuid = 'c02c9a3b-6881-7080-e040-e00a180631aa' );
SELECT m.name FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id WHERE mp.full_height = (SELECT MAX(full_height) FROM MenuPage)
SELECT T2.page_count FROM MenuPage AS T1 JOIN Menu AS T2 ON T1.menu_id = T2.id WHERE T1.id = 130;
SELECT MenuItem.price FROM MenuItem JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id WHERE MenuPage.image_id = 4000009194;
SELECT mp.page_number FROM MenuPage mp JOIN MenuItem mi ON mp.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE mi.xpos > 0.75 AND mi.ypos < 0.25;
SELECT Dish.name FROM Dish JOIN MenuItem ON Dish.id = MenuItem.dish_id JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id JOIN Menu ON MenuPage.menu_id = Menu.id WHERE SUBSTR(Menu.created_at, 7, 1) = '04';
SELECT Dish.name FROM Dish JOIN MenuItem ON Dish.id = MenuItem.dish_id WHERE MenuItem.menu_page_id = 1389;
SELECT MAX(mi.price) FROM MenuItem mi WHERE mi.id BETWEEN 1 AND 5;
SELECT D.name FROM Dish D JOIN MenuItem MI ON D.id = MI.dish_id WHERE MI.xpos < 0.25 AND MI.ypos < 0.25;
Error: 第 5523 个样本有 2 个SQL。
SELECT SUM(MenuItem.price) FROM MenuItem JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id WHERE MenuPage.menu_id = 12882;
SELECT name FROM Dish ORDER BY highest_price DESC LIMIT 5;
SELECT COUNT(*) FROM Dish WHERE lowest_price = 0;
SELECT name FROM Dish WHERE first_appeared = 1855 AND last_appeared = 1900;
SELECT m.name, m.dish_count FROM Menu m ORDER BY m.dish_count DESC LIMIT 10;
SELECT COUNT(*) FROM MenuItem WHERE xpos > 0.75 AND ypos < 0.25;
SELECT     D.name,     TIMESTAMPDIFF(YEAR, D.first_appeared, D.last_appeared) AS duration_on_menu,     MAX(MI.updated_at) AS latest_update FROM     Dish D JOIN     MenuItem MI ON D.id = MI.dish_id WHERE     D.name = 'Clear Green Turtle' GROUP BY     D.name;
Error: 第 5531 个样本有 2 个SQL。
SELECT COUNT(*) FROM Dish WHERE TIMESTAMPDIFF(YEAR, first_appeared, last_appeared) < 5;
SELECT D.name, MI.price FROM Dish D JOIN MenuItem MI ON D.id = MI.dish_id WHERE D.lowest_price = 0;
SELECT mi.price FROM MenuItem mi JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE mp.page_number = 2 AND mp.menu_id = 12474;
Error: 第 5535 个样本有 2 个SQL。
SELECT T2.sponsor FROM MenuPage AS T1 JOIN Menu AS T2 ON T1.menu_id = T2.id WHERE T1.full_height > 10000;
SELECT MenuPage.image_id, MenuPage.full_height, MenuPage.full_width FROM MenuPage JOIN Menu ON MenuPage.menu_id = Menu.id WHERE Menu.event = '100TH ANNIVERSARY OF BIRTH OF DANIEL WEBSTER';
SELECT T1.event FROM Menu AS T1 JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.full_width < 2000;
SELECT Dish.name FROM Dish JOIN MenuItem ON Dish.id = MenuItem.dish_id WHERE MenuItem.price = 180000;
SELECT mi.xpos, mi.ypos, DATEDIFF(d.last_appeared, d.first_appeared) as appeared_duration FROM MenuItem mi JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Small Hominy';
SELECT MenuPage.page_number, MenuPage.image_id, (MenuPage.full_height * MenuPage.full_width) as image_area FROM MenuItem JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id JOIN Dish ON MenuItem.dish_id = Dish.id WHERE Dish.name = 'Baked Stuffed Mullet & Sauce Pomard';
SELECT COUNT(*) FROM Dish WHERE times_appeared > menus_appeared;
SELECT COUNT(*) FROM Menu WHERE sponsor = 'Krogs Fiskerestaurant' AND date LIKE '2015-04%';
SELECT name FROM Dish ORDER BY SUBTRACT(last_appeared, first_appeared) DESC LIMIT 1;
SELECT event FROM Menu WHERE id = 21380 AND date = '1887-07-21';
SELECT COUNT(*) FROM MenuPage WHERE menu_id = (SELECT id FROM Menu WHERE name = 'Emil Kuehn');
Error: 第 5547 个样本有 2 个SQL。
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id WHERE mi.high_price IS NULL AND SUBSTR(mi.created_at,1,4) = '2011' AND SUBSTR(mi.created_at, 7, 1) = '4';
SELECT m.name FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id GROUP BY m.id, m.name ORDER BY COUNT(mp.page_number) DESC LIMIT 1;
SELECT MenuPage.id FROM MenuPage JOIN MenuItem ON MenuPage.id = MenuItem.menu_page_id JOIN Dish ON MenuItem.dish_id = Dish.id WHERE Dish.name = 'mashed potatoes';
SELECT COUNT(*) FROM (   SELECT m.id   FROM Menu m   JOIN MenuPage mp ON m.id = mp.menu_id   WHERE m.sponsor = 'PACIFIC MAIL STEAMSHIP COMPANY'   GROUP BY m.id   HAVING COUNT(mp.page_number) <= 2 ) AS subquery;
SELECT mp.id FROM MenuPage mp JOIN MenuItem mi ON mp.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'milk' GROUP BY mp.id ORDER BY mi.price DESC LIMIT 1;
SELECT T1.id FROM Menu AS T1 JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.sponsor = 'OCCIDENTAL & ORIENTAL STEAMSHIP COMPANY' GROUP BY T1.id ORDER BY COUNT(T2.page_number) DESC LIMIT 1;
Error: 第 5554 个样本有 2 个SQL。
SELECT D.name FROM Dish D JOIN MenuItem MI ON D.id = MI.dish_id JOIN MenuPage MP ON MI.menu_page_id = MP.id WHERE MP.page_number = 48706 AND MI.xpos > 0.75 AND MI.ypos > 0.75;
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id JOIN Menu m ON mp.menu_id = m.id WHERE m.sponsor = 'THE SOCIETY OF THE CUMBERLAND' AND m.event = '19NTH REUNION' AND m.place = 'GRAND PACIFIC HOTEL, CHICAGO, ILL';
SELECT m.sponsor FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id JOIN MenuItem mi ON mp.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'baked apples with cream' GROUP BY m.sponsor ORDER BY mi.price DESC LIMIT 1;
SELECT     AVG(dish_count) AS avg_dishes_per_menu,     max_dish.name AS most_common_dish FROM (     SELECT         m.id AS menu_id,         COUNT(mi.dish_id) AS dish_count     FROM         Menu m     JOIN         MenuPage mp ON m.id = mp.menu_id     JOIN         MenuItem mi ON mp.id = mi.menu_page_id     WHERE         m.name = 'Souper de Luxe'     GROUP BY         m.id ) AS subquery CROSS JOIN (     SELECT         d.name,         COUNT(mi.dish_id) AS appearance_count     FROM         Menu m     JOIN         MenuPage mp ON m.id = mp.menu_id     JOIN         MenuItem mi ON mp.id = mi.menu_page_id     JOIN         Dish d ON mi.dish_id = d.id     WHERE         m.name = 'Souper de Luxe'     GROUP BY         d.name     ORDER BY         appearance_count DESC     LIMIT 1 ) AS max_dish
SELECT id FROM Menu WHERE sponsor IS NULL;
SELECT COUNT(*) FROM Menu WHERE event = 'LUNCH';
SELECT COUNT(*) FROM Menu WHERE page_count > 10 AND dish_count > 20;
SELECT m.id FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id JOIN MenuItem mi ON mp.id = mi.menu_page_id GROUP BY m.id ORDER BY COUNT(mi.dish_id) DESC LIMIT 1;
SELECT COUNT(Dish.id) FROM Dish JOIN MenuItem ON Dish.id = MenuItem.dish_id JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id JOIN Menu ON MenuPage.menu_id = Menu.id WHERE Menu.name = 'Zentral Theater Terrace';
SELECT COUNT(*) FROM Menu WHERE call_number IS NULL AND strftime('%Y', date) < '1950';
SELECT mp.image_id FROM MenuPage mp JOIN Menu m ON mp.menu_id = m.id WHERE m.name = 'Zentral Theater Terrace' AND mp.page_number = 1;
SELECT m.name FROM Menu m JOIN MenuPage mp ON m.id = mp.menu_id WHERE mp.image_id = 5189412;
SELECT     CASE         WHEN (SELECT SUM(full_width) FROM MenuPage INNER JOIN Menu ON MenuPage.menu_id = Menu.id WHERE page_number = 1 AND Menu.name = 'Zentral Theater Terrace') >            (SELECT SUM(full_width) FROM MenuPage INNER JOIN Menu ON MenuPage.menu_id = Menu.id WHERE page_number = 1 AND Menu.name = 'Young''s Hotel')         THEN 'Zentral Theater Terrace'         ELSE 'Young''s Hotel'     END AS Bigger_Width_Menu_Page
SELECT mp.page_number, mp.full_height FROM MenuPage mp JOIN Menu m ON mp.menu_id = m.id WHERE m.name = 'Ritz Carlton' ORDER BY mp.full_height DESC LIMIT 1;
SELECT COUNT(*) FROM MenuPage JOIN Menu ON MenuPage.menu_id = Menu.id WHERE Menu.name = 'Ritz Carlton' AND MenuPage.full_width > 1000;
SELECT COUNT(*) FROM MenuItem JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id WHERE MenuPage.page_number = 1 AND MenuPage.menu_id = 12882;
SELECT d.name FROM Dish d JOIN MenuItem mi ON d.id = mi.dish_id JOIN MenuPage mp ON mi.menu_page_id = mp.id WHERE mp.menu_id = 12882 AND mp.page_number = 1;
SELECT MenuPage.page_number FROM MenuPage JOIN MenuItem ON MenuPage.id = MenuItem.menu_page_id JOIN Dish ON MenuItem.dish_id = Dish.id WHERE Dish.name = 'Chicken gumbo';
SELECT mp.menu_id FROM MenuPage mp JOIN MenuItem mi ON mp.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Chicken gumbo' ORDER BY mp.full_width DESC LIMIT 1;
SELECT COUNT(*) FROM MenuItem JOIN Dish ON MenuItem.dish_id = Dish.id WHERE Dish.name = 'Chicken gumbo';
SELECT COUNT(*) FROM MenuPage mp JOIN MenuItem mi ON mp.id = mi.menu_page_id JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Paysanne Soup' AND mi.high_price IS NULL;
SELECT MAX(mi.price) FROM MenuItem mi JOIN Dish d ON mi.dish_id = d.id WHERE d.name = 'Chicken gumbo';
SELECT (full_height * full_width) AS space_covered FROM MenuPage JOIN Menu ON MenuPage.menu_id = Menu.id WHERE Menu.name = 'Zentral Theater Terrace' AND MenuPage.page_number = 1;
SELECT COUNT(MenuItem.dish_id) / COUNT(DISTINCT MenuPage.id) AS average_dishes_per_page FROM MenuItem JOIN MenuPage ON MenuItem.menu_page_id = MenuPage.id WHERE MenuPage.menu_id = 12882;
SELECT COUNT(*) FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id WHERE customer.cust_name = 'S K L Enterprises Inc' AND YEAR(shipment.ship_date) = 2017;
SELECT SUM(s.weight) FROM shipment s JOIN customer c ON s.cust_id = c.cust_id WHERE c.cust_name = 'S K L Enterprises Inc';
SELECT COUNT(*) FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id JOIN driver ON shipment.driver_id = driver.driver_id WHERE customer.cust_name = 'S K L Enterprises Inc' AND driver.first_name = 'Sue' AND driver.last_name = 'Newell';
SELECT COUNT(*) FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id WHERE customer.state = 'FL';
SELECT s.ship_id FROM shipment s JOIN customer c ON s.cust_id = c.cust_id WHERE c.cust_type = 'retailer';
SELECT COUNT(DISTINCT c.cust_id) FROM customer c JOIN shipment s ON c.cust_id = s.cust_id WHERE CAST(s.ship_date AS YEAR) = 2017 AND c.annual_revenue > 30000000;
SELECT COUNT(*) FROM shipment JOIN driver ON shipment.driver_id = driver.driver_id WHERE driver.first_name = 'Sue' AND driver.last_name = 'Newell' AND CAST(shipment.ship_date AS YEAR) = 2017;
SELECT d.first_name, d.last_name FROM driver d JOIN shipment s ON d.driver_id = s.driver_id WHERE Cast(s.ship_date AS YEAR) = 2017 GROUP BY d.driver_id, d.first_name, d.last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE YEAR(s.ship_date) = 2017 AND c.state = 'New Jersey';
SELECT MAX(s.weight) FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE c.city_name = 'New York';
SELECT     (SELECT SUM(shipment.weight) FROM shipment JOIN city ON shipment.city_id = city.city_id WHERE city.city_name = 'New York') -     (SELECT SUM(shipment.weight) FROM shipment JOIN city ON shipment.city_id = city.city_id WHERE city.city_name = 'Chicago') AS Difference_in_Pounds;
SELECT c.city_name FROM city c JOIN shipment s ON c.city_id = s.city_id JOIN customer cu ON cu.cust_id = s.cust_id WHERE cu.cust_name = 'S K L Enterprises Inc' ORDER BY c.city_name;
SELECT AVG(shipment.weight) FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id WHERE customer.cust_name = 'S K L Enterprises Inc';
SELECT     (COUNT(CASE WHEN s.city_id = c.city_id AND c.city_name = 'Jacksonville') * 100.0 / COUNT(s.ship_id)) AS Percentage FROM     shipment s JOIN     city c ON s.city_id = c.city_id WHERE     c.state = 'Florida';
SELECT     CASE         WHEN T3.make = 'Peterbit' THEN 'Texas(TX)'         WHEN T3.make = 'Mack' THEN 'North Carolina (NC)'         WHEN T3.make = 'Kenworth' THEN 'Washington (WA)'     END AS headquarter FROM shipment AS T1 JOIN truck AS T3 ON T1.truck_id = T3.truck_id WHERE T1.ship_id = 1045;
SELECT COUNT(*) FROM shipment WHERE truck_id = (     SELECT truck_id     FROM truck     WHERE model_year = (         SELECT MIN(model_year)         FROM truck     ) );
SELECT c.cust_name FROM customer c JOIN shipment s ON c.cust_id = s.cust_id WHERE s.ship_id = 1275;
SELECT city_name FROM city WHERE city_id = (SELECT city_id FROM shipment WHERE ship_id = 1701);
SELECT D.first_name, D.last_name FROM driver D JOIN shipment S ON D.driver_id = S.driver_id WHERE S.ship_id = 1021;
SELECT d.first_name, d.last_name FROM driver d JOIN shipment s ON d.driver_id = s.driver_id WHERE s.ship_date = '2017-11-05';
SELECT city.population FROM city JOIN shipment ON city.city_id = shipment.city_id WHERE shipment.ship_id = 1398;
SELECT MIN(ship_date) FROM shipment WHERE cust_id IN (     SELECT cust_id     FROM customer     WHERE state = 'SC' );
SELECT weight FROM shipment WHERE ship_date = '2017-09-25' AND driver_id = (     SELECT driver_id     FROM driver     WHERE first_name = 'Leszek' AND last_name = 'Kieltyka' );
SELECT city.area FROM city JOIN shipment ON city.city_id = shipment.city_id WHERE shipment.ship_id = 1346;
SELECT shipment.weight FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id WHERE customer.cust_name = 'U-haul Center Of N Syracuse' AND shipment.ship_date = '2016-09-21';
SELECT d.first_name, d.last_name FROM driver d JOIN shipment s ON d.driver_id = s.driver_id WHERE s.truck_id = 3 AND s.ship_date = '2016-09-19';
SELECT city.population / city.area AS population_density FROM shipping.shipment JOIN shipping.city ON shipment.city_id = city.city_id WHERE shipment.ship_id = 1369;
SELECT AVG(subq1.ship_count) FROM (     SELECT COUNT(s.ship_id) as ship_count     FROM shipment s     JOIN truck t ON s.truck_id = t.truck_id     WHERE t.make = 'Kenworth'     GROUP BY s.truck_id ) subq1;
SELECT T3.weight FROM driver AS T1 JOIN shipment AS T3 ON T1.driver_id = T3.driver_id WHERE T1.first_name = 'Sue' AND T1.last_name = 'Newell' ORDER BY T3.ship_date LIMIT 1;
SELECT c.cust_name FROM customer c JOIN shipment s ON c.cust_id = s.cust_id WHERE s.weight = (SELECT MAX(weight) FROM shipment);
SELECT d.first_name, d.last_name FROM driver d JOIN shipment s ON d.driver_id = s.driver_id WHERE s.ship_date = (SELECT MIN(ship_date) FROM shipment);
SELECT COUNT(*) FROM shipment WHERE cust_id = (SELECT cust_id FROM customer WHERE cust_name = 'Olympic Camper Sales Inc');
SELECT COUNT(*) FROM shipment s JOIN customer c ON s.cust_id = c.cust_id JOIN city ci ON s.city_id = ci.city_id WHERE ci.city_name = 'New York' AND c.cust_name = 'Harry''s Hot Rod Auto & Truck Accessories';
Error: 第 5612 个样本有 2 个SQL。
SELECT D.first_name, D.last_name FROM driver D JOIN shipment S ON D.driver_id = S.driver_id JOIN city C ON S.city_id = C.city_id GROUP BY D.driver_id, D.first_name, D.last_name, C.population HAVING C.population = (SELECT MIN(population) FROM city) ORDER BY COUNT(S.ship_id) DESC LIMIT 1;
SELECT COUNT(*) FROM shipment JOIN truck ON shipment.truck_id = truck.truck_id WHERE shipment.weight < 1000 AND truck.model_year = (SELECT MIN(model_year) FROM truck);
SELECT c.annual_revenue FROM customer c JOIN shipment s ON c.cust_id = s.cust_id GROUP BY c.cust_id ORDER BY COUNT(s.ship_id) DESC LIMIT 1;
SELECT COUNT(*) FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE c.city_name = 'Downey' AND c.state = 'CA' AND YEAR(s.ship_date) = 2016;
SELECT COUNT(*) FROM shipment JOIN driver ON shipment.driver_id = driver.driver_id JOIN city ON shipment.city_id = city.city_id WHERE driver.first_name = 'Holger' AND driver.last_name = 'Nohr' AND city.city_name = 'North Las Vegas';
SELECT COUNT(*) FROM shipment WHERE city_id = (     SELECT city_id     FROM city     WHERE population / area = (         SELECT MAX(population / area)         FROM city     ) );
SELECT     (COUNT(CASE WHEN c.state = 'TX' AND c.cust_type = 'manufacturer' THEN c.cust_id END) * 100.0 / COUNT(c.cust_id)) AS Percentage_Manufacturers_in_Texas FROM     customer c WHERE     c.cust_name = 'Lorenzo';
SELECT SUM(shipment.weight) FROM shipment JOIN city ON shipment.city_id = city.city_id WHERE city.city_name = 'San Mateo' AND city.state = 'California' AND CAST(shipment.ship_date AS DATE) BETWEEN '2016-01-01' AND '2016-12-31';
SELECT SUM(shipment.weight) FROM shipment JOIN truck ON shipment.truck_id = truck.truck_id WHERE truck.make = 'Peterbilt' AND CAST(shipment.ship_date AS YEAR) = 2016 AND truck.model_year = (SELECT MAX(model_year) FROM truck WHERE make = 'Peterbilt');
SELECT MAX(s.weight), c.cust_name FROM shipment s JOIN customer c ON s.cust_id = c.cust_id JOIN city cy ON s.city_id = cy.city_id WHERE cy.city_name = 'Boston' GROUP BY c.cust_name ORDER BY s.weight DESC LIMIT 1;
SELECT city_name FROM city JOIN shipment ON city.city_id = shipment.city_id WHERE shipment.ship_id = 1002;
SELECT AVG(shipment.weight) FROM shipment JOIN truck ON shipment.truck_id = truck.truck_id WHERE truck.make = 'Mack' AND truck.model_year = (SELECT MIN(model_year) FROM truck WHERE make = 'Mack')
SELECT d.first_name, d.last_name FROM driver d JOIN shipment s ON d.driver_id = s.driver_id JOIN city c ON c.city_id = s.city_id WHERE c.city_name = 'New York' AND strftime('%Y-%m', s.ship_date) = '2016-02';
SELECT c.cust_name FROM customer c JOIN shipment s ON c.cust_id = s.cust_id JOIN city ci ON s.city_id = ci.city_id WHERE ci.city_name = 'Oak Park';
Error: 第 5627 个样本有 2 个SQL。
SELECT     d.driver_id,     d.first_name,     d.last_name,     COUNT(s.ship_id) / 24 AS avg_shipments_per_month FROM     shipment s JOIN     driver d ON s.driver_id = d.driver_id GROUP BY     d.driver_id,     d.first_name,     d.last_name;
SELECT     (COUNT(CASE WHEN s.weight >= 10000 THEN 1 END) * 100.0 / COUNT(s.ship_id)) as percentage FROM     shipment s JOIN     customer c ON s.cust_id = c.cust_id WHERE     c.cust_name = 'Sunguard Window Tinting & Truck Accessories'     AND YEAR(s.ship_date) = 2017;
SELECT     (COUNT(CASE WHEN c.cust_name = 'Autoware Inc.' THEN s.ship_id ELSE NULL END) * 100.0 / COUNT(s.ship_id)) AS Percentage FROM     shipment s JOIN     customer c ON s.cust_id = c.cust_id JOIN     driver d ON s.driver_id = d.driver_id WHERE     d.first_name = 'Sue' AND d.last_name = 'Newel';
SELECT COUNT(DISTINCT c.city_id) FROM city c JOIN shipment s ON c.city_id = s.city_id WHERE c.state = 'New Jersey' GROUP BY c.city_id HAVING SUM(s.weight) > 20000;
SELECT COUNT(DISTINCT c.city_id) FROM city c JOIN shipment s ON c.city_id = s.city_id WHERE c.population > 50000 AND YEAR(s.ship_date) = 2017;
SELECT shipment.weight FROM shipment JOIN truck ON shipment.truck_id = truck.truck_id WHERE truck.make = 'Peterbilt';
SELECT T2.model_year FROM shipment AS T1 JOIN truck AS T2 ON T1.truck_id = T2.truck_id WHERE T1.ship_id = 1003;
SELECT T2.make FROM shipment AS T1 JOIN truck AS T2 ON T1.truck_id = T2.truck_id WHERE T1.ship_id = 1011;
SELECT driver.first_name FROM driver JOIN shipment ON driver.driver_id = shipment.driver_id WHERE shipment.ship_id = 1028;
SELECT d.state FROM driver d JOIN shipment s ON d.driver_id = s.driver_id WHERE s.ship_id = 1055;
SELECT D.address FROM driver D JOIN shipment S ON D.driver_id = S.driver_id WHERE S.weight > 50000;
SELECT D.first_name, D.last_name FROM driver AS D JOIN shipment AS S ON D.driver_id = S.driver_id WHERE S.ship_date = '2016-03-02';
SELECT AVG(T2.annual_revenue) FROM shipment AS T1 JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.weight < 65000;
SELECT     (COUNT(CASE WHEN c.cust_type = 'wholesaler' AND s.weight < 70000 THEN c.cust_id END) * 100.0 / COUNT(c.cust_id)) AS Percentage FROM     customer c JOIN     shipment s ON c.cust_id = s.cust_id WHERE     s.weight < 70000;
SELECT driver.last_name FROM driver JOIN shipment ON driver.driver_id = shipment.driver_id WHERE shipment.ship_id = 1088;
SELECT DISTINCT d.phone FROM driver d JOIN shipment s ON d.driver_id = s.driver_id WHERE s.weight > 20000;
SELECT T2.make, T2.model_year FROM shipment AS T1 JOIN truck AS T2 ON T1.truck_id = T2.truck_id WHERE T1.ship_id = 1055;
SELECT COUNT(*) FROM truck WHERE model_year = 2009;
SELECT COUNT(*) FROM customer WHERE cust_type = 'manufacturer';
SELECT COUNT(*) FROM customer WHERE state = 'CA' AND cust_type = 'retailer';
SELECT COUNT(*) FROM city WHERE state = 'Connecticut';
SELECT city_name FROM city WHERE state = 'CA' ORDER BY population DESC LIMIT 1;
SELECT annual_revenue FROM customer WHERE cust_name = 'Klett & Sons Repair';
SELECT D.first_name, D.last_name FROM driver D JOIN shipment S ON D.driver_id = S.driver_id WHERE S.weight = (SELECT MIN(weight) FROM shipment);
SELECT COUNT(*) FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id WHERE customer.state = 'CA' AND YEAR(shipment.ship_date) = 2016;
SELECT t.make FROM truck t JOIN shipment s ON t.truck_id = s.truck_id JOIN driver d ON d.driver_id = s.driver_id WHERE d.first_name = 'Zachery' AND d.last_name = 'Hicks';
SELECT DISTINCT c.cust_name FROM shipment s JOIN customer c ON s.cust_id = c.cust_id WHERE s.ship_date LIKE '2017-02-%';
SELECT t.make AS truck_brand, d.first_name, d.last_name FROM shipment s JOIN truck t ON s.truck_id = t.truck_id JOIN driver d ON s.driver_id = d.driver_id JOIN customer c ON s.cust_id = c.cust_id WHERE c.cust_name = 'Klett & Sons Repair';
SELECT s.ship_id FROM shipment s JOIN driver d ON s.driver_id = d.driver_id WHERE d.first_name = 'Zachery' AND d.last_name = 'Hicks' ORDER BY s.weight DESC LIMIT 1;
SELECT COUNT(*) FROM shipment s JOIN driver d ON s.driver_id = d.driver_id JOIN city c ON s.city_id = c.city_id WHERE d.first_name = 'Zachery' AND d.last_name = 'Hicks' AND c.city_name = 'New York' AND YEAR(s.ship_date) = 2016;
SELECT     CASE         WHEN t.make = 'Peterbilt' THEN 'Texas (TX)'         WHEN t.make = 'Mack' THEN 'North Carolina (NC)'         WHEN t.make = 'Kenworth' THEN 'Washington (WA)'     END AS headquarter,     COUNT(s.ship_id) AS shipment_count FROM     shipment s JOIN     truck t ON s.truck_id = t.truck_id WHERE     YEAR(s.ship_date) = 2016 GROUP BY     t.make ORDER BY     shipment_count DESC LIMIT 1;
SELECT COUNT(*) FROM shipment WHERE city_id = (     SELECT city_id     FROM city     WHERE state = 'California'     ORDER BY population ASC     LIMIT 1 );
SELECT c.city_name FROM city c JOIN shipment s ON c.city_id = s.city_id WHERE s.weight = (SELECT MAX(weight) FROM shipment);
SELECT DISTINCT c.city_name FROM city c JOIN shipment s ON c.city_id = s.city_id JOIN driver d ON s.driver_id = d.driver_id WHERE d.first_name = 'Zachery' AND d.last_name = 'Hicks';
SELECT AVG(ship_count) FROM (     SELECT COUNT(shipment.ship_id) as ship_count     FROM shipment     JOIN driver ON shipment.driver_id = driver.driver_id     WHERE driver.first_name = 'Zachery'     AND driver.last_name = 'Hicks'     AND YEAR(shipment.ship_date) = 2017     GROUP BY shipment.driver_id ) as subquery;
SELECT     (SUM(CASE WHEN s.driver_id IN                 (SELECT d.driver_id                  FROM driver d                  WHERE d.first_name = 'Zachery' AND d.last_name = 'Hicks')             AND c.state = 'California'             AND YEAR(s.ship_date) = 2016 THEN s.weight         ELSE 0 END) /     SUM(s.weight)) * 100 as Percentage FROM     shipment s JOIN     customer c ON s.cust_id = c.cust_id WHERE     YEAR(s.ship_date) = 2016;
SELECT COUNT(*) FROM shipment JOIN driver ON shipment.driver_id = driver.driver_id WHERE driver.first_name = 'Zachary' AND driver.last_name = 'Hicks';
SELECT s.ship_id FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE c.area = (SELECT MAX(area) FROM city);
SELECT d.first_name, d.last_name FROM driver d JOIN shipment s ON d.driver_id = s.driver_id JOIN city c ON s.city_id = c.city_id WHERE c.population = (     SELECT MIN(population)     FROM city ) GROUP BY d.driver_id, d.first_name, d.last_name;
SELECT COUNT(*) FROM shipment JOIN city ON shipment.city_id = city.city_id WHERE city.city_name = 'Cicero' AND city.state = 'Illinois' AND shipment.weight BETWEEN 9000 AND 15000;
SELECT T1.model_year FROM truck AS T1 JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = 1233;
SELECT d.address FROM driver d JOIN shipment s ON d.driver_id = s.driver_id JOIN customer c ON s.cust_id = c.cust_id WHERE c.address = '7052 Carroll Road' AND c.city = 'San Diego' AND c.state = 'California';
Error: 第 5670 个样本有 2 个SQL。
SELECT T.truck_id, T.make, T.model_year FROM truck T JOIN shipment S ON T.truck_id = S.truck_id WHERE S.ship_id = 1245;
SELECT driver.address FROM driver JOIN shipment ON driver.driver_id = shipment.driver_id WHERE shipment.ship_id = 1127;
SELECT T1.annual_revenue FROM customer AS T1 JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.ship_id = 1047;
SELECT shipment.weight FROM shipment JOIN driver ON shipment.driver_id = driver.driver_id WHERE driver.first_name = 'Andrea' AND driver.last_name = 'Simons' AND shipment.ship_date = '2016-03-07';
SELECT c.city_name FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE s.ship_date = '2017-01-16';
SELECT COUNT(*) FROM shipment JOIN customer ON shipment.cust_id = customer.cust_id WHERE customer.state = 'NY';
SELECT c.cust_name FROM customer c JOIN shipment s ON c.cust_id = s.cust_id WHERE s.ship_id = 1147;
SELECT s.ship_id FROM shipment s JOIN city c ON s.city_id = c.city_id WHERE c.population = (SELECT MAX(population) FROM city)
SELECT driver.first_name, driver.last_name FROM shipment JOIN driver ON shipment.driver_id = driver.driver_id WHERE shipment.ship_date = '2016-02-22';
SELECT s.weight FROM shipment s JOIN customer c ON s.cust_id = c.cust_id WHERE c.annual_revenue = 39448581;
SELECT T2.address FROM shipment AS T1 JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = 1117;
SELECT     (COUNT(CASE WHEN EXTRACT(YEAR FROM s.ship_date) = 2017 THEN s.ship_id END) * 100.0 / COUNT(s.ship_id)) AS percentage FROM     shipment s JOIN     customer c ON s.cust_id = c.cust_id WHERE     c.state = 'TX'
SELECT     (SELECT COUNT(*) FROM shipment s1 JOIN truck t1 ON s1.truck_id = t1.truck_id WHERE t1.model_year = 2005) -     (SELECT COUNT(*) FROM shipment s2 JOIN truck t2 ON s2.truck_id = t2.truck_id WHERE t2.model_year = 2006) AS difference;
SELECT D.first_name, D.last_name FROM shipment S JOIN driver D ON S.driver_id = D.driver_id WHERE S.weight > (SELECT AVG(weight) * 0.95 FROM shipment);
SELECT p.title, COUNT(DISTINCT pw.wid) as num_diff_words FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN langs l ON p.lid = l.lid WHERE l.lang = 'Catalan' GROUP BY p.pid ORDER BY LENGTH(p.title) DESC LIMIT 1;
SELECT p.title FROM pages p JOIN langs l ON p.lid = l.lid WHERE l.lang = 'Catalan' AND p.words < 10;
SELECT pid AS page_number FROM pages WHERE title LIKE '% Art %' AND lid = (SELECT lid FROM langs WHERE lang = 'Catalan');
SELECT title FROM pages WHERE pid = 16203226 AND lid IN (SELECT lid FROM langs WHERE lang = 'Catalan');
SELECT title FROM pages WHERE pid BETWEEN 106600 AND 106700 AND lid = (     SELECT lid     FROM langs     WHERE lang = 'Catalan' );
Error: 第 5690 个样本有 2 个SQL。
SELECT p.pid FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE p.lid = (SELECT lid FROM langs WHERE lang = 'Catalan') AND w.word = 'decimal';
SELECT w.word FROM words w JOIN pages_words pw ON w.wid = pw.wid JOIN pages p ON pw.pid = p.pid JOIN langs l ON p.lid = l.lid WHERE l.lang = 'Catalan' GROUP BY w.word ORDER BY SUM(pw.occurrences) DESC LIMIT 1;
SELECT w1st.word FROM biwords JOIN words AS w1st ON biwords.w1st = w1st.wid JOIN words AS w2nd ON biwords.w2nd = w2nd.wid WHERE w2nd.word = 'antic';
SELECT p.title, pw.occurrences FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE w.word = 'quipu';
SELECT AVG(occurrences) FROM (     SELECT occurrences     FROM biwords     WHERE w1st = 'system' ) as subquery;
SELECT SUM(pages) FROM langs WHERE lang = 'ca'
SELECT w1st.word, w2nd.word, MAX(biwords.occurrences) FROM biwords JOIN words AS w1st ON biwords.w1st = w1st.wid JOIN words AS w2nd ON biwords.w2nd = w2nd.wid WHERE biwords.lid = (SELECT lid FROM langs WHERE lang = 'Catalan') GROUP BY w1st.word, w2nd.word ORDER BY biwords.occurrences DESC LIMIT 1;
SELECT lw.wid FROM langs_words lw JOIN langs l ON lw.lid = l.lid WHERE l.lang = 'catalan' AND lw.occurrences <= 10;
SELECT p.title FROM pages p JOIN langs l ON p.lid = l.lid WHERE l.lang = 'Catalan' ORDER BY p.words DESC LIMIT 1;
SELECT pid FROM pages WHERE title = 'Arqueozoologia';
SELECT w.wid, MAX(lw.occurrences) FROM langs AS l JOIN langs_words AS lw ON l.lid = lw.lid JOIN words AS w ON lw.wid = w.wid WHERE l.lang = 'Catalan' AND w.word IN (     SELECT pw.word     FROM pages AS p     JOIN pages_words AS pw ON p.pid = pw.pid     WHERE p.title = 'Abadia' ) GROUP BY w.wid ORDER BY lw.occurrences DESC LIMIT 1;
SELECT p.title, w.wid FROM (     SELECT pid, MIN(words) as min_words     FROM pages     GROUP BY pid     ORDER BY min_words ASC     LIMIT 5 ) as p_min_words JOIN pages p ON p.pid = p_min_words.pid JOIN pages_words pw ON pw.pid = p.pid JOIN words w ON w.wid = pw.wid WHERE p.lid = (SELECT lid FROM langs WHERE lang = 'Catalan') GROUP BY p.pid ORDER BY MAX(pw.occurrences) DESC;
SELECT SUM(occurrences) FROM biwords WHERE w1st = (SELECT wid FROM words WHERE word = 'i') AND w2nd = (SELECT wid FROM words WHERE word = 'a') AND lid = (SELECT lid FROM langs WHERE lang = 'Catalan');
SELECT w1st, w2nd FROM biwords WHERE occurrences = 2;
SELECT w1st.word, w2nd.word, MAX(biwords.occurrences) FROM biwords JOIN words AS w1st ON biwords.w1st = w1st.wid JOIN words AS w2nd ON biwords.w2nd = w2nd.wid JOIN langs_words ON langs_words.lid = biwords.lid WHERE langs_words.lid IN (     SELECT pid FROM pages     WHERE title = 'Addicio' ) GROUP BY w1st.word, w2nd.word ORDER BY biwords.occurrences DESC LIMIT 1;
Error: 第 5706 个样本有 2 个SQL。
SELECT pid FROM pages WHERE title LIKE 'Aigua dolÃ§a%';
SELECT title FROM pages WHERE pid = (SELECT pid              FROM pages_words              GROUP BY pid              ORDER BY SUM(occurrences) DESC              LIMIT 1)
SELECT AVG(words) FROM (   SELECT words   FROM pages   WHERE words >= 10   ORDER BY words ASC   LIMIT 10 ) as temp;
SELECT pid FROM pages WHERE words < 10 ORDER BY revision DESC LIMIT 5;
SELECT pid FROM pages WHERE title LIKE 'b%';
SELECT p.title FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE w.word = 'desena';
SELECT pw.wid FROM pages_words pw JOIN pages p ON pw.pid = p.pid WHERE p.title = 'Sometent';
SELECT COUNT(*) FROM words w JOIN pages_words pw ON w.wid = pw.wid JOIN pages p ON pw.pid = p.pid WHERE w.wid = 88 AND p.title = 'Animals';
SELECT pw.occurrences FROM pages_words pw JOIN words w ON pw.wid = w.wid JOIN pages p ON pw.pid = p.pid WHERE w.word = 'del' AND p.title = 'Any anomalÃ­stic';
Error: 第 5716 个样本有 2 个SQL。
SELECT SUM(biwords.occurrences) FROM biwords JOIN words AS w1st ON biwords.w1st = w1st.wid JOIN words AS w2nd ON biwords.w2nd = w2nd.wid WHERE w1st.word = 'nombre' OR w2nd.word = 'nombre';
SELECT     CASE         WHEN bw.w1st = (SELECT w.wid FROM words w WHERE w.word = 'John') THEN w2.word         WHEN bw.w2nd = (SELECT w.wid FROM words w WHERE w.word = 'John') THEN w1.word     END as paired_word FROM     biwords bw JOIN     words w1 ON bw.w1st = w1.wid JOIN     words w2 ON bw.w2nd = w2.wid WHERE     bw.w1st = (SELECT w.wid FROM words w WHERE w.word = 'John') OR     bw.w2nd = (SELECT w.wid FROM words w WHERE w.word = 'John') LIMIT 10;
SELECT pages.revision, pages.pid FROM pages JOIN pages_words ON pages.pid = pages_words.pid JOIN words ON pages_words.wid = words.wid WHERE words.word = 'fresc';
SELECT w1.wid, w1.word, w2.word AS paired_word FROM words w1 JOIN biwords b ON w1.wid = b.w1st JOIN words w2 ON w2.wid = b.w2nd WHERE w1.wid BETWEEN 1 AND 10;
Error: 第 5721 个样本有 2 个SQL。
SELECT word FROM words WHERE occurrences = (SELECT MAX(occurrences) FROM words);
SELECT pid FROM pages WHERE lid = (SELECT lid FROM langs WHERE lang = 'Catalan') AND title LIKE '%0%' OR title LIKE '%1%' OR title LIKE '%2%' OR title LIKE '%3%' OR title LIKE '%4%' OR title LIKE '%5%' OR title LIKE '%6%' OR title LIKE '%7%' OR title LIKE '%8%' OR title LIKE '%9%';
SELECT title FROM pages ORDER BY words LIMIT 1;
SELECT w1st, w2nd FROM biwords WHERE occurrences = (SELECT MAX(occurrences) FROM biwords);
SELECT SUM(occurrences) FROM words WHERE LENGTH(word) = 3;
SELECT AVG(DISTINCT words) FROM (     SELECT COUNT(DISTINCT pw.wid) as words     FROM pages p     JOIN pages_words pw ON p.pid = pw.pid     WHERE p.title LIKE 'A%'     GROUP BY p.pid ) as subquery;
SELECT SUM(occurrences) / COUNT(occurrences) FROM biwords WHERE w1st = 34;
SELECT (COUNT(CASE WHEN p.words = 1500 THEN 1 END) * 100.0 / COUNT(p.pid)) AS percentage FROM pages p;
SELECT     (COUNT(CASE WHEN w1st = w2nd THEN occurrences END) * 100.0 / COUNT(occurrences)) AS percentage FROM     biwords;
SELECT p.title FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE w.word = 'comunitat';
SELECT COUNT(DISTINCT pid) FROM pages_words WHERE wid = (SELECT wid FROM words WHERE word = 'ripoll');
SELECT SUM(occurrences) FROM pages_words WHERE pid = (SELECT pid FROM pages WHERE title = 'Llista de conflictes armats');
SELECT COUNT(*) FROM biwords JOIN words AS w1 ON biwords.w1st = w1.wid JOIN words AS w2 ON biwords.w2nd = w2.wid WHERE (w1.word = 'fukunaga' AND w2.word = 'd''egees') OR (w1.word = 'd''egees' AND w2.word = 'fukunaga');
SELECT SUM pw.occurrences / COUNT(p.page) AS percentage FROM pages p JOIN pages_words pw ON p.pid = pw.pid WHERE p.words = 100 GROUP BY p.pid
SELECT p.page FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid JOIN langs l ON p.lid = l.lid WHERE w.word = 'Acampada' AND l.lang = 'Catalan';
SELECT title FROM pages WHERE words > 300 LIMIT 3;
SELECT occurrences FROM words WHERE wid = 8;
SELECT wid, word, occurrences FROM words ORDER BY occurrences DESC LIMIT 3;
SELECT occurrences FROM biwords WHERE (w1st = 1 AND w2nd = 25) OR (w1st = 25 AND w2nd = 1);
SELECT COUNT(words.wid) FROM words JOIN pages_words ON words.wid = pages_words.wid WHERE pages_words.pid = 27457362;
SELECT     (COUNT(CASE WHEN lw.occurrences > 16000 THEN lw.wid END) * 100.0 / COUNT(lw.wid)) AS percentage FROM     langs_words lw WHERE     lw.lid = 1;
SELECT pid, title, words FROM pages WHERE lid = 1 ORDER BY words DESC LIMIT 1;
SELECT     COUNT(*) FILTER (WHERE b.occurrences < 80) AS num_pairs_less_than_80,     COUNT(*) AS total_pairs,     (COUNT(*) FILTER (WHERE b.occurrences < 80) * 100.0 / COUNT(*)) AS percentage FROM     biwords b JOIN     langs l ON b.lid = l.lid WHERE     l.lang = 'Catalan' ;
SELECT COUNT(*) FROM pages WHERE lid IN (SELECT lid FROM langs WHERE lang = 'ca');
SELECT p.page, p.title, p.revision FROM pages AS p JOIN langs AS l ON p.lid = l.lid WHERE l.lang = 'Catalan' LIMIT 3;
SELECT L.lang FROM langs L JOIN biwords B ON L.lid = B.lid WHERE B.w1st = 1 AND B.w2nd = 616;
Error: 第 5748 个样本有 2 个SQL。
SELECT words.word FROM words JOIN biwords ON words.wid = biwords.w2nd WHERE biwords.w1st = 1 AND biwords.w2nd = 8968;
SELECT w.word FROM words w JOIN langs_words lw ON w.wid = lw.wid WHERE lw.lid = 1 ORDER BY lw.occurrences DESC LIMIT 1;
SELECT occurrences FROM pages_words WHERE pid = 44 AND wid = (     SELECT wid     FROM words     WHERE word = 'votives' );
SELECT occurrences FROM biwords WHERE lid IN (     SELECT lid     FROM pages     WHERE pid = 16 ) AND w1st = 1 AND w2nd = 109;
SELECT     (COUNT(wid) FILTER (WHERE occurrences < 180)) * 100.0 / COUNT(wid) AS percentage FROM     words JOIN     langs_words ON words.wid = langs_words.wid JOIN     langs ON langs_words.lid = langs.lid WHERE     langs.lang = 'ca'
SELECT     (COUNT(p.pid) * 100.0 / (SELECT COUNT(*) FROM pages p INNER JOIN langs l ON p.lid = l.lid WHERE l.lang = 'ca')) AS percentage FROM     pages p INNER JOIN     langs l ON     p.lid = l.lid WHERE     p.words > 10000 AND     l.lang = 'ca';
Error: 第 5755 个样本有 3 个SQL。
SELECT COUNT(*) FROM words WHERE occurrences > 10;
Error: 第 5757 个样本有 2 个SQL。
SELECT COUNT(*) FROM words WHERE occurrences > 2000 AND occurrences < 5000;
SELECT title FROM pages WHERE pid = (SELECT pid FROM pages WHERE revision = 106601 AND lid = (SELECT lid FROM langs WHERE lang = 'Catalan'));
SELECT title FROM pages WHERE pid = 28040864;
SELECT occurrences FROM biwords WHERE (w1st = (SELECT wid FROM words WHERE word = 'barcelona') AND w2nd = (SELECT wid FROM words WHERE word = 'precolombina')) OR (w1st = (SELECT wid FROM words WHERE word = 'precolombina') AND w2nd = (SELECT wid FROM words WHERE word = 'barcelona'));
SELECT T1.locale FROM langs AS T1 JOIN pages AS T2 ON T1.lid = T2.lid WHERE T2.title = 'Anys 90';
SELECT w.word FROM words w JOIN langs_words lw ON w.wid = lw.wid JOIN langs l ON lw.lid = l.lid WHERE l.lang = 'Catalan' AND lw.occurrences = 71303;
SELECT T3.locale FROM pages AS T1 JOIN langs AS T3 ON T1.lid = T3.lid WHERE T1.title = 'Abril'
SELECT SUM(occurrences) FROM pages_words WHERE pid IN (     SELECT pid     FROM biwords     WHERE w1st = 100 AND w2nd = 317 );
SELECT SUM(p.pages) FROM pages p JOIN pages_words pw ON p.pid = pw.pid WHERE pw.occurrences = 2593;
SELECT title FROM pages JOIN pages_words ON pages.pid = pages_words.pid JOIN words ON pages_words.wid = words.wid WHERE words.wid < 20;
SELECT COUNT(*) FROM (   SELECT wid   FROM langs_words   GROUP BY lid, wid   HAVING COUNT(DISTINCT wid) = 3 ) as temp;
Error: 第 5769 个样本有 2 个SQL。
SELECT AVG(T2.occurrences/T3.words)*100 AS percentage FROM pages AS T1 JOIN pages_words AS T2 ON T1.pid = T2.pid JOIN langs AS T3 ON T1.lid = T3.lid WHERE T1.revision < 106680;
Error: 第 5771 个样本有 2 个SQL。
SELECT w1.word, w2.word FROM biwords JOIN words AS w1 ON biwords.w1st = w1.wid JOIN words AS w2 ON biwords.w2nd = w2.wid WHERE w1.wid = 20 AND w2.wid = 50;
Error: 第 5773 个样本有 2 个SQL。
SELECT title FROM pages WHERE pid IN (SELECT pid FROM pages_words GROUP BY pid HAVING SUM(occurrences) > 4000) AND lid = 1;
Error: 第 5775 个样本有 2 个SQL。
SELECT title, COUNT(words) as word_count FROM pages WHERE title IN ('Afluent', 'Asclepi') GROUP BY title ORDER BY word_count DESC LIMIT 1;
SELECT occurrences FROM words WHERE word = 'nombre';
SELECT w.word FROM words w JOIN langs_words lw ON w.wid = lw.wid JOIN langs l ON lw.lid = l.lid WHERE l.lang = 'Catalan' AND w.occurrences > 200000;
SELECT T3.locale FROM pages AS T1 JOIN langs AS T3 ON T1.lid = T3.lid WHERE T1.title = 'Asclepi'
SELECT SUM(occurrences) FROM pages_words JOIN words ON pages_words.wid = words.wid JOIN pages ON pages_words.pid = pages.pid WHERE pages.title = 'Àbac' AND words.word = 'grec';
SELECT p.title FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE w.word = 'grec' AND pw.occurrences > 20;
Error: 第 5782 个样本有 2 个SQL。
SELECT occurrences FROM biwords WHERE w1st = (SELECT wid FROM words WHERE word = 'àbac') AND w2nd = (SELECT wid FROM words WHERE word = 'xinès');
SELECT     CASE         WHEN (SELECT occurrences FROM biwords WHERE w1st = (SELECT wid FROM words WHERE word = 'àbac') AND w2nd = (SELECT wid FROM words WHERE word = 'xinès') AND lid = (SELECT lid FROM langs WHERE word = 'àbac')) >            (SELECT occurrences FROM biwords WHERE w1st = (SELECT wid FROM words WHERE word = 'àbac') AND w2nd = (SELECT wid FROM words WHERE word = 'grec') AND lid = (SELECT lid FROM langs WHERE word = 'àbac')) THEN 'àbac-xinès'         ELSE 'àbac-grec'     END AS higher_occurrence_pair FROM     langs LIMIT 1;
SELECT (w1.occurrences - b.occurrences) AS diff FROM words w1 JOIN biwords b ON w1.wid = b.w1st WHERE w1.word = 'àbac' AND b.w2nd IN (SELECT wid FROM words WHERE word = 'xinès');
SELECT w2nd FROM biwords WHERE w1st = (SELECT wid FROM words WHERE word = 'àbac');
SELECT SUM(occurrences) FROM biwords WHERE w1st = (SELECT wid FROM words WHERE word = 'àbac');
SELECT COUNT(DISTINCT p.pid) FROM pages p JOIN pages_words pw1 ON p.pid = pw1.pid JOIN words w1 ON pw1.wid = w1.wid AND w1.word = 'àbac' JOIN pages_words pw2 ON p.pid = pw2.pid JOIN words w2 ON pw2.wid = w2.wid AND w2.word = 'xinès' WHERE p.lid IN (     SELECT bi.lid     FROM biwords bi     WHERE bi.w1st = (         SELECT w.wid         FROM words w         WHERE w.word = 'àbac'     )     AND bi.w2nd = (         SELECT w.wid         FROM words w         WHERE w.word = 'xinès'     ) );
SELECT     ((         SELECT             SUM(occurrences)         FROM             pages_words pw1         JOIN             words w1 ON pw1.wid = w1.wid         WHERE             w1.word = 'grec' AND pw1.pid IN (                 SELECT                     pid                 FROM                     pages                 WHERE                     title = 'Àbac'             )     ) - (         SELECT             SUM(occurrences)         FROM             pages_words pw2         JOIN             words w2 ON pw2.wid = w2.wid         WHERE             w2.word = 'grec' AND pw2.pid IN (                 SELECT                     pid                 FROM                     pages                 WHERE                     title = 'Astronomia'             )     )) / (         SELECT             SUM(occurrences)         FROM             pages_words pw3         JOIN             words w3 ON pw3.wid = w3.wid         WHERE             w3.word = 'grec' AND pw3.pid IN (                 SELECT                     pid                 FROM                     pages                 WHERE                     title = 'Astronomia'             )     ) * 100 AS percentage;
SELECT COUNT(*) FROM pages WHERE lid IN (SELECT lid FROM langs WHERE lang = 'ca');
SELECT lw.wid FROM langs_words lw JOIN langs l ON lw.lid = l.lid WHERE l.lang = 'Catalan' ORDER BY lw.occurrences DESC LIMIT 1;
SELECT w2nd AS word_id FROM biwords WHERE occurrences = (SELECT MAX(occurrences) FROM biwords) LIMIT 1;
SELECT SUM(occurrences) FROM words WHERE word = 'panajot';
SELECT word FROM words WHERE occurrences = 340691;
SELECT wid FROM words WHERE word = 'periodograma';
SELECT w2nd FROM biwords WHERE occurrences = 116430;
SELECT SUM(occurrences) FROM biwords WHERE w1st = (SELECT wid FROM words WHERE word = 'riu') OR w2nd = (SELECT wid FROM words WHERE word = 'riu');
SELECT pw.wid FROM pages_words pw JOIN pages p ON pw.pid = p.pid WHERE p.title = 'Agricultura' ORDER BY pw.occurrences DESC LIMIT 1;
SELECT occurrences FROM pages_words WHERE pid = (SELECT pid FROM pages WHERE title = 'Astre') AND wid = 2823;
SELECT title FROM pages JOIN pages_words ON pages.pid = pages_words.pid WHERE wid = 174 ORDER BY occurrences DESC LIMIT 1;
SELECT SUM(occurrences) FROM pages_words JOIN words ON pages_words.wid = words.wid WHERE words.word = 'heròdot';
SELECT wid FROM pages_words WHERE pid = (SELECT pid FROM pages WHERE revision = 28278070) ORDER BY occurrences DESC LIMIT 1;
SELECT occurrences FROM biwords WHERE w1st = (SELECT wid FROM words WHERE word = 'que') AND w2nd = (SELECT wid FROM words WHERE word = 'gregorio');
SELECT COUNT(*) FROM biwords b JOIN words w ON b.w1st = w.wid WHERE w.word = 'base' AND b.w2nd IN (SELECT wid FROM words WHERE word = 'base')
SELECT SUM(lw.occurrences) FROM langs_words lw JOIN words w ON lw.wid = w.wid JOIN langs l ON lw.lid = l.lid WHERE w.word = 'exemple' AND l.lang = 'Catalan';
SELECT w.word FROM words w JOIN langs_words lw ON w.wid = lw.wid WHERE lw.lid = 1 AND lw.occurrences = 274499;
SELECT     (b1.occurrences - b2.occurrences) / b2.occurrences AS difference_ratio FROM     biwords b1,     biwords b2 WHERE     b1.lid = b2.lid AND     b1.w1st = b2.w1st AND     b1.w1st = (SELECT wid FROM words WHERE word = 'a') AND     b1.w2nd = (SELECT wid FROM words WHERE word = 'base') AND     b2.w2nd = (SELECT wid FROM words WHERE word = 'decimal')
SELECT (SUM(pw.occurrences) * 100.0 / SUM(lw.occurrences)) FROM (     SELECT pw1.occurrences     FROM pages_words AS pw1     JOIN pages AS p ON pw1.pid = p.pid     WHERE p.title = 'Art' AND pw1.wid = (         SELECT w.wid         FROM words AS w         WHERE w.word = 'grec'     ) ) AS art_occurrences JOIN (     SELECT lw1.occurrences     FROM langs_words AS lw1     JOIN words AS w1 ON lw1.wid = w1.wid     WHERE w1.word = 'grec' ) AS total_occurrences;
SELECT COUNT(*) FROM pages WHERE pid IN (     SELECT pid     FROM pages_words     GROUP BY pid     HAVING COUNT(DISTINCT wid) > 4000 ) AND lid = 1;
SELECT title FROM pages WHERE lid = 1 AND words = 10;
SELECT w.word FROM words w JOIN langs_words lw ON w.wid = lw.wid WHERE lw.lid = (     SELECT l.lid     FROM langs l     WHERE l.lang = 'Catalan' ) ORDER BY lw.occurrences DESC LIMIT 1;
SELECT title FROM pages WHERE pid IN (     SELECT pid     FROM pages_words     GROUP BY pid     ORDER BY COUNT(DISTINCT wid) DESC     LIMIT 3 ) AND lid = 1;
Error: 第 5813 个样本有 2 个SQL。
SELECT COUNT(*) FROM pages WHERE pid IN (     SELECT pid     FROM pages_words     GROUP BY pid     HAVING COUNT(wid) > 300 ) AND revision > 28330000 AND lid = 1;
SELECT pid FROM pages_words WHERE wid = (SELECT wid FROM words WHERE word = 'nombre');
SELECT COUNT(*) FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN langs l ON p.lid = l.lid WHERE l.lang = 'Catalan' AND pw.wid = (SELECT wid FROM words WHERE word = 'nombre') AND pw.occurrences > 5;
SELECT COUNT(*) FROM biwords WHERE w2nd = (SELECT wid FROM words WHERE word = 'grec');
SELECT p.title FROM pages p JOIN pages_words pw ON p.pid = pw.pid JOIN words w ON pw.wid = w.wid WHERE w.word = 'grec' AND pw.occurrences = 52;
SELECT COUNT(*) FROM biwords WHERE w1st = (SELECT wid FROM words WHERE word = 'àbac') AND occurrences > 10;
SELECT AVG(pw.occurrences) FROM pages_words pw JOIN words w ON pw.wid = w.wid WHERE w.word = 'grec';
SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018-08-01';
SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018-08-01' AND ORIGIN = 'JFK';
SELECT DISTINCT DEST FROM Airlines WHERE FL_DATE = '2018-08-01' AND CANCELLED = 1;
SELECT FL_DATE FROM Airlines WHERE CANCELLED = 1 AND CANCELLATION_CODE = 'A'
SELECT DISTINCT origin FROM Airlines WHERE FL_DATE = '2018-08-01' AND DEP_DELAY > 0;
SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018-08-01' AND ORIGIN IN (     SELECT Code     FROM Airports     WHERE Description = 'New York, NY: John F. Kennedy International' );
SELECT DEST FROM Airlines WHERE FL_DATE = '2018-08-01' ORDER BY DEP_DELAY DESC LIMIT 1;
SELECT COUNT(*) FROM Airlines WHERE ORIGIN IN (     SELECT Code     FROM Airports     WHERE Description = 'New York, NY: John F. Kennedy International' ) AND ARR_DELAY < 0;
SELECT MIN(a.Airlines.DEP_TIME) FROM Airlines JOIN Airports ON Airlines.ORIGIN = Airports.Code WHERE Airports.Description = 'New York, NY: John F. Kennedy International' AND Airlines.FL_DATE = '2018/8/1';
SELECT COUNT(*) FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code WHERE FL_DATE = '2018-08-01' AND Air Carriers.Description = 'American Airlines Inc.: AA';
SELECT OP_CARRIER_FL_NUM FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code JOIN Airports ON Airlines.ORIGIN_AIRPORT_ID = Airports.Code WHERE Air Carriers.Description = 'American Airlines Inc.: AA' AND Airports.Description = 'New York, NY: John F. Kennedy International';
SELECT COUNT(*) FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code WHERE Air Carriers.Description = 'American Airlines Inc.: AA' AND Airlines.FL_DATE = '2018/8/1' AND Airlines.ACTUAL_ELAPSED_TIME < Airlines.CRS_ELAPSED_TIME;
SELECT OP_CARRIER_FL_NUM FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code WHERE Air Carriers.Description = 'American Airlines Inc.: AA' ORDER BY DEP_DELAY DESC LIMIT 1;
SELECT COUNT(*) FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code JOIN Airports ON Airlines.DEST_AIRPORT_ID = Airports.Code WHERE Air Carriers.Description = 'American Airlines Inc.: AA' AND Airports.Description = 'JFK';
SELECT COUNT(*) FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code WHERE Air Carriers.Description = 'American Airlines Inc.: AA' AND Airlines.FL_DATE = '2018/8/1' AND Airlines.CANCELLED = 1;
SELECT     AC.Description,     COUNT(*) AS FlightCount FROM     Air Carriers AC JOIN     Airlines AL ON AC.Code = AL.OP_CARRIER_AIRLINE_ID WHERE     AL.FL_DATE = '2018-08-01' GROUP BY     AC.Description HAVING     AC.Description IN ('American Airlines Inc.: AA', 'Endeavor Air Inc.: 9E') ORDER BY     FlightCount DESC LIMIT 1;
SELECT AVG(T1.DEP_DELAY) FROM Airlines AS T1 JOIN Air Carriers AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T2.Description = 'American Airlines Inc.: AA';
SELECT COUNT(*) / 31 AS Average_Flights_Per_Day FROM Airlines JOIN Air_Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_Carriers.Code WHERE Air_Carriers.Description = 'American Airlines Inc.: AA' AND Airlines.FL_DATE LIKE '2018-08-%';
SELECT COUNT(*) FROM Air_Carriers;
SELECT COUNT(*) FROM Airlines JOIN Airports ON Airlines.ORIGIN = Airports.Code WHERE Airports.Description = 'Los Angeles, CA: Los Angeles International' AND Airlines.FL_DATE = '2018-08-27';
SELECT COUNT(*) FROM Airlines JOIN Airports ON Airlines.DEST = Airports.Code WHERE Airports.Description LIKE '%Oakland%' AND Airlines.FL_DATE = '2018-08-07';
SELECT COUNT(*) FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code WHERE Air Carriers.Description = 'Alaska Airlines Inc.: AS' AND Airlines.DEP_DELAY > 0 AND Airlines.FL_DATE = '2018/8/2';
SELECT COUNT(*) FROM Airlines WHERE DEST = 'MIA' AND ARR_DELAY < 0 AND FL_DATE = '2018-08-12';
SELECT COUNT(*) FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code WHERE Air Carriers.Description = 'American Airlines Inc.: AA' AND Airlines.Cancelled = 1 AND Airlines.CANCELLATION_CODE = 'A';
SELECT COUNT(*) FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code WHERE Air Carriers.Description = 'Endeavor Air Inc.: 9E' AND Airlines.FL_DATE = '2018-08-31' AND Airlines.ACTUAL_ELAPSED_TIME < Airlines.CRS_ELAPSED_TIME;
SELECT COUNT(*) FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code WHERE Air Carriers.Description = 'Spirit Air Lines: NK' AND Airlines.FL_DATE = '2018-08-07';
SELECT ac.Description FROM Air Carriers ac JOIN Airlines al ON ac.Code = al.OP_CARRIER_AIRLINE_ID WHERE al.TAIL_NUM = 'N702SK' LIMIT 1;
SELECT A.Description FROM Airports AS A JOIN Airlines AS B ON A.Code = B.DEST WHERE B.FL_DATE = '2018-08-15' GROUP BY A.Description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ac.Description FROM Airlines al JOIN Air Carriers ac ON al.OP_CARRIER_AIRLINE_ID = ac.Code WHERE al.FL_DATE = '2018-08-01' AND al.ORIGIN = 'ATL' AND al.DEST = 'PHL' AND al.CRS_DEP_TIME = 2040;
SELECT COUNT(*) FROM Airlines JOIN Airports ON Airlines.DEST = Airports.Code WHERE Airports.Description = 'Lake Charles, LA: Lake Charles Regional' AND Airlines.FL_DATE = '2018-08-15';
SELECT COUNT(*) FROM Airlines JOIN Airports ON Airlines.ORIGIN = Airports.Code JOIN Airports AS Dest_Airports ON Airlines.DEST = Dest_Airports.Code WHERE Airports.Description = 'San Diego, CA: San Diego International' AND Dest_Airports.Description = 'Los Angeles, CA: Los Angeles International' AND Airlines.FL_DATE LIKE '2018/8%';
SELECT MULTIPLY(DIVIDE(SUM(CASE WHEN T3.CANCELLATION_CODE = 'C' THEN 1 ELSE 0 END), COUNT(T3.Code)), 100) FROM Airlines AS T3 JOIN Airports AS T1 ON T1.Code = T3.ORIGIN WHERE T1.Description = 'Los Angeles, CA: Los Angeles International' AND T3.Cancelled = 1;
SELECT CAST(SUM(CASE WHEN T1.ACTUAL_ELAPSED_TIME < T1.CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Code) FROM Airlines AS T1 JOIN Airports AS T2 ON T1.DEST = T2.Code WHERE T2.Description LIKE '%Pittsburgh%';
SELECT Description FROM Air_Carriers WHERE Code = 19049;
SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018-08-01' AND DEP_DELAY <= 0;
SELECT Code FROM Airports WHERE Description LIKE '%Ankara, Turkey%';
SELECT MAX(WEATHER_DELAY) FROM Airlines WHERE ORIGIN_AIRPORT_ID = 12264;
SELECT Code FROM Airports WHERE Description = 'Anita Bay, AK: Anita Bay Airport'
SELECT ORIGIN_AIRPORT_ID FROM Airlines WHERE LATE_AIRCRAFT_DELAY = (SELECT MAX(LATE_AIRCRAFT_DELAY) FROM Airlines);
SELECT COUNT(*) FROM Airlines a JOIN Airports o ON a.ORIGIN = o.Code JOIN Airports d ON a.DEST = d.Code WHERE o.Description = 'Chicago, IL: Chicago O''Hare International' AND d.Description = 'Atlanta, GA: Hartsfield-Jackson Atlanta International';
SELECT COUNT(TAIL_NUM) FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code WHERE Air Carriers.Description = 'Southwest Airlines Co.: WN';
SELECT FL_DATE, COUNT(*) as num_cancellations FROM Airlines JOIN Airports ON Airlines.ORIGIN = Airports.Code WHERE FL_DATE LIKE '2018/8%' AND CANCELLATION_CODE = 'A' AND Airports.Description = 'Dallas/Fort Worth, TX: Dallas/Fort Worth International' GROUP BY FL_DATE ORDER BY num_cancellations DESC LIMIT 1;
SELECT T3.TAIL_NUM FROM Airlines AS T1 JOIN Airports AS T2 ON T1.DEST = T2.Code JOIN (     SELECT DISTINCT TAIL_NUM     FROM Airlines     WHERE FL_DATE LIKE '2018/8%' AND ARR_DELAY <= 0 ) AS T3 ON T1.TAIL_NUM = T3.TAIL_NUM WHERE T2.Description = 'Bakersfield, CA: Meadows Field' GROUP BY T3.TAIL_NUM;
SELECT AC.OP_CARRIER_AIRLINE_ID FROM Airlines AS AC JOIN Airports AS AP ON AC.DEST = AP.Code WHERE AP.Description = 'Boston, MA: Logan International' AND AC.SECURITY_DELAY = (     SELECT MAX(SD.SECURITY_DELAY)     FROM Airlines AS SD     JOIN Airports AS SAP ON SD.DEST = SAP.Code     WHERE SAP.Description = 'Boston, MA: Logan International' )
SELECT AC.Description, COUNT(T.TAIL_NUM) AS AircraftCount FROM Airlines AS T JOIN AirCarriers AS AC ON T.OP_CARRIER_AIRLINE_ID = AC.Code GROUP BY AC.Description ORDER BY AircraftCount DESC LIMIT 5;
SELECT AC.Description FROM Air Carriers AC JOIN Airlines AL ON AC.Code = AL.OP_CARRIER_AIRLINE_ID WHERE AL.CANCELLED = 0 GROUP BY AC.Description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AC.Description FROM Air Carriers AC JOIN Airlines AL ON AC.Code = AL.OP_CARRIER_AIRLINE_ID WHERE AL.TAIL_NUM = 'N202NN'
SELECT AC.Description FROM Air Carriers AC JOIN Airlines AL ON AC.Code = AL.OP_CARRIER_AIRLINE_ID JOIN Airports AP ON AP.Code = AL.DEST_AIRPORT_ID WHERE AP.Description = 'Chicago, IL: Chicago Midway International' GROUP BY AC.Description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T3.TAIL_NUM FROM Air_carriers AS T1 JOIN Airlines AS T3 ON T1.Code = T3.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Compass Airlines: CP' AND T3.ORIGIN = 'LAX' AND T3.DEST = 'ABQ' GROUP BY T3.TAIL_NUM ORDER BY COUNT(T3.OP_CARRIER_AIRLINE_ID) DESC LIMIT 1;
SELECT A.Description AS Airport FROM Airports A JOIN Airlines B ON A.Code = B.ORIGIN JOIN Air Carriers C ON B.OP_CARRIER_AIRLINE_ID = C.Code WHERE C.Description = 'Republic Airline: YX' GROUP BY A.Description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ac.Description FROM Air Carriers ac JOIN Airlines al ON ac.Code = al.OP_CARRIER_AIRLINE_ID WHERE al.ACTUAL_ELAPSED_TIME - al.CRS_ELAPSED_TIME = (     SELECT MIN(a2.ACTUAL_ELAPSED_TIME - a2.CRS_ELAPSED_TIME)     FROM Airlines a2 )
SELECT     SUM(LATE_AIRCRAFT_DELAY) / 60 AS Total_Hours_Delayed,     TAIL_NUM FROM     Airlines a JOIN     Air_Carriers c ON a.OP_CARRIER_AIRLINE_ID = c.Code WHERE     c.Description = 'Delta Air Lines Inc.: DL' AND     a.FL_DATE LIKE '2018/8/%' AND     a.LATE_AIRCRAFT_DELAY IS NOT NULL GROUP BY     TAIL_NUM ORDER BY     Total_Hours_Delayed DESC LIMIT 1;
SELECT Code, Description FROM Airports LIMIT 3;
SELECT Code FROM Air_Carriers WHERE Description LIKE 'Mississippi Valley Airlines%';
SELECT CRS_DEP_TIME, DEP_TIME FROM Airlines WHERE ORIGIN = 'PHL' AND DEST = 'MDT' AND TAIL_NUM = 'N627AE' AND FL_DATE = '2018-08-13';
SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018-08-01' AND ORIGIN = 'ABE';
SELECT DEST FROM Airlines WHERE ORIGIN = 'ABY' GROUP BY DEST
SELECT COUNT(*) FROM Airlines WHERE ORIGIN = 'DFW' AND DEST = 'SNA' AND DEP_DELAY = 0;
SELECT COUNT(*) FROM Airlines JOIN Airports ON Airlines.ORIGIN = Airports.Code JOIN Airports AS Dest_Airports ON Airlines.DEST = Dest_Airports.Code WHERE Airports.Description = 'Charlotte, NC: Charlotte Douglas International' AND Dest_Airports.Description = 'Austin, TX: Austin - Bergstrom International' AND Airlines.CANCELLATION_CODE = 'A';
SELECT OP_CARRIER_AIRLINE_ID FROM Airlines WHERE CANCELLED = 1 GROUP BY OP_CARRIER_AIRLINE_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DEP_TIME FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code JOIN Airports ON Airlines.DEST_AIRPORT_ID = Airports.Code WHERE Air Carriers.Description LIKE '%JetBlue Airways%' AND Airlines.TAIL_NUM = 'N903JB' AND Airports.Description LIKE '%Fort Lauderdale-Hollywood%' AND Airlines.FL_DATE = '2018-08-20';
SELECT ac.Description FROM Airlines a JOIN Air Carriers ac ON a.OP_CARRIER_AIRLINE_ID = ac.Code WHERE a.ORIGIN = 'ACY' AND a.DEST = 'FLL';
SELECT Description FROM Airports WHERE Code = 'A11'
SELECT COUNT(*) FROM Airlines WHERE Origin = 'OKC';
SELECT COUNT(*) FROM Airports WHERE Code LIKE 'C%';
SELECT DISTINCT DEST FROM Airlines WHERE OP_CARRIER_FL_NUM = 1596;
SELECT Description FROM Airports WHERE Code LIKE '%3';
SELECT Code FROM Airports WHERE Description = 'Driftwood Bay, AK: Driftwood Bay Airport';
SELECT COUNT(*) FROM Airlines WHERE CANCELLED = 1;
SELECT TAIL_NUM FROM Airlines WHERE FL_DATE = '2018-08-17';
SELECT ORIGIN FROM Airlines WHERE ACTUAL_ELAPSED_TIME = (SELECT MIN(ACTUAL_ELAPSED_TIME) FROM Airlines);
SELECT FL_DATE, TAIL_NUM FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code WHERE Air Carriers.Description = 'Ross Aviation Inc.: GWE';
SELECT AC.Description, AC.Code FROM Air Carriers AC JOIN Airlines AL ON AC.Code = AL.OP_CARRIER_AIRLINE_ID WHERE AL.ARR_TIME = (SELECT MIN(ARR_TIME) FROM Airlines);
SELECT COUNT(*) FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code WHERE Air Carriers.Description LIKE '%JetBlue Airways%' AND Airlines.ARR_DELAY_NEW = 0;
SELECT ac.Description FROM Airlines al JOIN Air Carriers ac ON al.OP_CARRIER_AIRLINE_ID = ac.Code WHERE al.DEST = 'MIA';
SELECT AC.Description FROM Airlines AS AL JOIN Air Carriers AS AC ON AL.OP_CARRIER_AIRLINE_ID = AC.Code WHERE AL.CANCELLED = 1;
SELECT ACTUAL_ELAPSED_TIME FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code WHERE Air Carriers.Description = 'Semo Aviation Inc.: SEM';
SELECT T2.TAIL_NUM FROM Air_Carriers AS T1 JOIN Airlines AS T2 ON T2.OP_CARRIER_AIRLINE_ID = T1.Code WHERE T1.Description = 'Asap Air Inc.: ASP' ORDER BY T2.DEP_DELAY DESC LIMIT 1;
SELECT AC.Description FROM Air Carriers AC JOIN Airlines AL ON AC.Code = AL.OP_CARRIER_AIRLINE_ID WHERE AL.DEP_DELAY = 0;
SELECT AC.Description FROM Air Carriers AC JOIN Airlines AL ON AC.Code = AL.OP_CARRIER_AIRLINE_ID WHERE AL.ACTUAL_ELAPSED_TIME = (     SELECT MAX(ACTUAL_ELAPSED_TIME) FROM Airlines )
SELECT DISTINCT DEST FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code WHERE Air Carriers.Description = 'Southeast Alaska Airlines: WEB';
SELECT COUNT(*) FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code WHERE FL_DATE BETWEEN '2018-08-10' AND '2018-08-20' AND CANCELLED = 1 AND Air Carriers.Description = 'Spirit Air Lines: NK';
SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018-08-02' AND OP_CARRIER_AIRLINE_ID IN (     SELECT Code     FROM Air_Carriers     WHERE Description LIKE '%Horizon Air%' );
SELECT T3.TAIL_NUM FROM Air_Carriers AS T1 JOIN Airlines AS T3 ON T1.Code = T3.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Iscargo Hf: ICQ' AND T3.ARR_TIME <= 1000;
SELECT FL_DATE FROM Airlines JOIN Air Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air Carriers.Code WHERE Air Carriers.Description = 'Profit Airlines Inc.: XBH' AND Airlines.ACTUAL_ELAPSED_TIME < 100;
SELECT COUNT(*) FROM Airlines a JOIN Air Carriers c ON a.OP_CARRIER_AIRLINE_ID = c.Code WHERE c.Description LIKE '%Republic Airline%' AND a.DEP_DELAY >= 30;
SELECT ac.Description FROM Air Carriers ac JOIN Airlines al ON ac.Code = al.OP_CARRIER_AIRLINE_ID WHERE al.FL_DATE = '2018-08-25' AND al.DEP_DELAY = -5;
SELECT ac.Description FROM Airlines al JOIN Air Carriers ac ON al.OP_CARRIER_AIRLINE_ID = ac.Code JOIN Airports ap ON al.ORIGIN = ap.Code WHERE al.TAIL_NUM = 'N922US' AND ap.Description = 'Phoenix'
SELECT ac.Description FROM Airlines al JOIN Air_Carriers ac ON al.OP_CARRIER_AIRLINE_ID = ac.Code WHERE al.ARR_DELAY < 0 AND al.DEP_DELAY < 0;
SELECT T1.TAIL_NUM FROM Airlines AS T1 JOIN Air Carriers AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T2.Description = 'Southwest Airlines Co.: WN' AND T1.ACTUAL_ELAPSED_TIME < (SELECT AVG(ACTUAL_ELAPSED_TIME) * 0.8 FROM Airlines WHERE OP_CARRIER_AIRLINE_ID = (SELECT Code FROM Air Carriers WHERE Description = 'Southwest Airlines Co.: WN'))
Error: 第 5911 个样本有 2 个SQL。
SELECT     (SUM(CASE WHEN Airlines.DEP_DELAY < 0 THEN 1 ELSE 0 END) * 1.0 / COUNT(Airlines.DEP_DELAY)) * 100 AS Percentage_Early_Departure FROM     Airlines JOIN     Air_Carriers ON Airlines.OP_CARRIER_AIRLINE_ID = Air_Carriers.Code WHERE     Air_Carriers.Description LIKE '%American Airlines%';
SELECT COUNT(*) FROM book WHERE publisher_id = 1929 AND num_pages > 500;
SELECT publication_date FROM book WHERE num_pages = (SELECT MAX(num_pages) FROM book);
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id WHERE b.title = 'The Illuminati';
SELECT COUNT(*) FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Thomas Nelson');
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id GROUP BY p.publisher_name ORDER BY COUNT(b.book_id) DESC LIMIT 1;
SELECT title FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Thomas Nelson') ORDER BY publication_date LIMIT 1;
SELECT COUNT(*) FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Thomas Nelson') AND num_pages > 300;
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id WHERE b.num_pages = (SELECT MAX(num_pages) FROM book);
SELECT COUNT(*) FROM book JOIN book_language ON book.language_id = book_language.language_id WHERE book_language.language_name = 'English';
SELECT b.title FROM book b JOIN book_language bl ON b.language_id = bl.language_id WHERE bl.language_name = 'British English';
SELECT MIN(ol.price) FROM order_line ol JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'The Little House'
SELECT b.title FROM book b JOIN order_line ol ON b.book_id = ol.book_id JOIN cust_order co ON ol.order_id = co.order_id JOIN customer c ON c.customer_id = co.customer_id WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';
SELECT COUNT(*) FROM (   SELECT ol.book_id   FROM order_line ol   JOIN cust_order co ON co.order_id = ol.order_id   JOIN customer c ON c.customer_id = co.customer_id   JOIN book b ON b.book_id = ol.book_id   WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore' AND b.num_pages > 300 ) as T;
SELECT SUM(ol.price) FROM order_line ol JOIN cust_order co ON ol.order_id = co.order_id JOIN customer c ON co.customer_id = c.customer_id WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';
SELECT AVG(ol.price) FROM order_line ol JOIN cust_order co ON ol.order_id = co.order_id JOIN customer c ON co.customer_id = c.customer_id WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';
SELECT     (COUNT(CASE WHEN ol.price > 13 THEN ol.order_id END) * 100 / COUNT(ol.order_id)) AS Percentage FROM     order_line ol JOIN     cust_order co ON ol.order_id = co.order_id JOIN     customer cu ON co.customer_id = cu.customer_id WHERE     cu.first_name = 'Lucas' AND cu.last_name = 'Wyldbore';
SELECT city FROM address WHERE address_id = 547;
SELECT COUNT(*) FROM cust_order WHERE customer_id = (SELECT customer_id FROM customer WHERE first_name = 'Cordy' AND last_name = 'Dumbarton');
SELECT title FROM book JOIN book_language ON book.language_id = book_language.language_id WHERE language_name = 'Japanese' ORDER BY publication_date LIMIT 1;
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id GROUP BY p.publisher_name ORDER BY COUNT(b.book_id) DESC LIMIT 1;
SELECT COUNT(*) FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Kensington');
SELECT bl.language_name FROM book b JOIN book_language bl ON b.language_id = bl.language_id WHERE b.book_id = 1405;
SELECT c.first_name, c.last_name FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT b.title FROM book b JOIN order_line ol ON b.book_id = ol.book_id GROUP BY b.title ORDER BY COUNT(ol.order_id) DESC LIMIT 1;
SELECT COUNT(*) FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'David Foster Wallace';
SELECT COUNT(*) FROM order_line ol JOIN cust_order co ON ol.order_id = co.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'O Xará';
SELECT c.country_name FROM country c JOIN address a ON c.country_id = a.country_id JOIN customer_address ca ON a.address_id = ca.address_id JOIN customer cu ON cu.customer_id = ca.customer_id WHERE cu.first_name = 'Malina' AND cu.last_name = 'Johnson';
SELECT COUNT(*) FROM address JOIN country ON address.country_id = country.country_id WHERE country.country_name = 'Ukraine';
SELECT c.country_name FROM country c JOIN address a ON c.country_id = a.country_id WHERE a.city = 'Žirovnica';
SELECT     (COUNT(CASE WHEN sm.method_name = 'International' THEN co.order_id END) * 100.0 / COUNT(co.order_id)) AS percentage FROM     cust_order co JOIN     shipping_method sm ON co.shipping_method_id = sm.method_id WHERE     co.order_date LIKE '2022-11-10%';
SELECT AVG(b.num_pages) FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'David Coward';
SELECT cost FROM shipping_method WHERE method_name = 'Standard'
SELECT title FROM book WHERE publication_date LIKE '1900%' ORDER BY publication_date LIMIT 1;
SELECT first_name, last_name FROM customer WHERE email = 'aalleburtonkc@yellowbook.com';
SELECT COUNT(*) FROM cust_order JOIN address ON cust_order.dest_address_id = address.address_id JOIN country ON address.country_id = country.country_id WHERE country.country_name = 'Iran' AND cust_order.order_date LIKE '2022%';
SELECT COUNT(*) FROM cust_order co JOIN customer c ON co.customer_id = c.customer_id JOIN shipping_method sm ON co.shipping_method_id = sm.method_id WHERE c.first_name = 'Daisey' AND c.last_name = 'Lamball' AND sm.method_name = 'International';
SELECT c.first_name, c.last_name FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY COUNT(ol.line_id) DESC LIMIT 1;
SELECT COUNT(*) FROM cust_order co JOIN order_history oh ON co.order_id = oh.order_id JOIN order_status os ON oh.status_id = os.status_id WHERE co.customer_id = (SELECT customer_id FROM customer WHERE first_name = 'Antonia' AND last_name = 'Poltun') AND os.status_value = 'Returned';
SELECT sm.method_name FROM shipping_method sm JOIN cust_order co ON sm.method_id = co.shipping_method_id GROUP BY sm.method_id ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT COUNT(*) FROM order_history JOIN order_status ON order_history.status_id = order_status.status_id WHERE order_status.status_value = 'Delivered' AND order_history.status_date LIKE '2021%';
SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'J.K Rowling' ORDER BY b.publication_date LIMIT 1;
SELECT COUNT(*) FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'A.R. Braunmuller';
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Agatha Christie' ORDER BY b.publication_date LIMIT 1;
SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Danielle Steel';
SELECT COUNT(*) FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE author.author_name = 'William Shakespeare' AND publisher.publisher_name = 'Penguin Classics';
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id GROUP BY p.publisher_name ORDER BY COUNT(b.book_id) DESC LIMIT 1;
SELECT SUM(sm.cost) AS Total_Shipping_Cost, COUNT(co.order_id) AS Orders_in_2022 FROM cust_order co JOIN shipping_method sm ON co.shipping_method_id = sm.method_id JOIN customer c ON co.customer_id = c.customer_id WHERE c.first_name = 'Page' AND c.last_name = 'Holsey' AND co.order_date LIKE '2022%'
SELECT publisher_name FROM publisher WHERE publisher_id = 22;
SELECT COUNT(*) FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Al Gore' AND b.num_pages < 400;
SELECT T2.author_name, T4.publisher_name FROM book AS T1 JOIN book_author AS T2_1 ON T1.book_id = T2_1.book_id JOIN author AS T2 ON T2_1.author_id = T2.author_id JOIN publisher AS T4 ON T1.publisher_id = T4.publisher_id WHERE T1.publication_date = '1997-07-10';
SELECT bl.language_name FROM book b JOIN book_language bl ON b.language_id = bl.language_id WHERE b.isbn13 = '23755004321';
SELECT b.title FROM book b JOIN order_line ol ON b.book_id = ol.book_id WHERE ol.price = (SELECT MAX(price) FROM order_line)
SELECT SUM(ol.price) FROM order_line ol JOIN cust_order co ON ol.order_id = co.order_id JOIN customer c ON co.customer_id = c.customer_id WHERE c.first_name = 'Lucas' AND c.last_name = 'Wyldbore';
SELECT b.isbn13 FROM book b JOIN book_language bl ON b.language_id = bl.language_id WHERE bl.language_name = 'Spanish';
Error: 第 5967 个样本有 2 个SQL。
SELECT b.title FROM book b JOIN order_line ol ON b.book_id = ol.book_id JOIN cust_order co ON ol.order_id = co.order_id JOIN customer c ON c.customer_id = co.customer_id WHERE c.first_name = 'Zia' AND c.last_name = 'Roizin';
SELECT T2.author_name FROM book AS T1 JOIN book_author AS T2 ON T1.book_id = T2.book_id JOIN author AS T3 ON T2.author_id = T3.author_id WHERE T1.num_pages = (SELECT MAX(num_pages) FROM book);
SELECT DISTINCT c.email FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'Switch on the Night';
SELECT DISTINCT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id JOIN publisher p ON b.publisher_id = p.publisher_id WHERE p.publisher_name = 'Abrams';
SELECT publisher_name FROM publisher JOIN book ON publisher.publisher_id = book.publisher_id WHERE book.title = 'The Illuminati';
SELECT     (COUNT(CASE WHEN b.publication_date LIKE '1992%' THEN b.book_id ELSE NULL END) * 100.0 / COUNT(b.book_id)) AS percentage FROM     book b JOIN     book_author ba ON b.book_id = ba.book_id JOIN     author a ON a.author_id = ba.author_id WHERE     a.author_name = 'Abraham Lincoln'
SELECT DISTINCT p.publisher_name FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id WHERE b.publication_date LIKE '2004%' AND b.num_pages > (SELECT AVG(num_pages) * 0.7 FROM book);
SELECT c.email FROM customer AS c JOIN customer_address AS ca ON c.customer_id = ca.customer_id JOIN address AS a ON ca.address_id = a.address_id JOIN address_status AS as_ ON ca.status_id = as_.status_id WHERE c.first_name = 'Moss' AND c.last_name = 'Zarb' AND as_.address_status = 'primary';
SELECT street_name FROM address WHERE city = 'Dallas';
SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Orson Scott Card' AND b.publication_date LIKE '2001%';
SELECT COUNT(*) FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'Orson Scott Card';
SELECT author.author_name, book.title FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id WHERE book.num_pages > 3000;
SELECT author_name FROM author JOIN book_author ON author.author_id = book_author.author_id JOIN book ON book.book_id = book_author.book_id WHERE book.title = 'The Prophet';
SELECT COUNT(*) FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Ace Hardcover');
SELECT p.publisher_name FROM publisher p JOIN book b ON b.publisher_id = p.publisher_id JOIN book_author ba ON ba.book_id = b.book_id JOIN author a ON a.author_id = ba.author_id WHERE a.author_name = 'Barry Eisler'
SELECT COUNT(*) FROM book JOIN book_language ON book.language_id = book_language.language_id WHERE book_language.language_name = 'Japanese';
SELECT SUM(ol.price) FROM order_line ol JOIN cust_order co ON ol.order_id = co.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'The Prophet';
Error: 第 5985 个样本有 2 个SQL。
SELECT COUNT(*) FROM customer JOIN customer_address ON customer.customer_id = customer_address.customer_id JOIN address ON customer_address.address_id = address.address_id JOIN country ON address.country_id = country.country_id WHERE country.country_name = 'Australia';
SELECT COUNT(*) FROM order_history JOIN order_status ON order_history.status_id = order_status.status_id WHERE order_status.status_value = 'Delivered' AND order_history.status_date LIKE '2019-12%';
SELECT c.first_name, c.last_name FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'Fantasmas';
SELECT     (COUNT(CASE WHEN s.method_name = 'International' THEN c.order_id END) * 100.0 / COUNT(c.order_id)) AS percentage FROM     cust_order c JOIN     shipping_method s ON c.shipping_method_id = s.method_id WHERE     c.order_date LIKE '2020%';
SELECT * FROM author WHERE author_name LIKE 'George%';
SELECT YEAR(order_date) AS OrderYear, COUNT(order_id) AS OrderCount FROM cust_order GROUP BY YEAR(order_date) ORDER BY OrderCount DESC LIMIT 1;
SELECT AVG(price) FROM order_line;
SELECT title FROM book WHERE publication_date LIKE '1995%';
SELECT SUBSTRING_INDEX(email, '@', -1) AS domain FROM customer GROUP BY domain ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM publisher WHERE publisher_name LIKE '%book%';
SELECT bl.language_name FROM book_language bl JOIN book b ON bl.language_id = b.language_id GROUP BY bl.language_name ORDER BY COUNT(b.book_id) LIMIT 1;
SELECT cust_order.order_date FROM cust_order JOIN customer ON cust_order.customer_id = customer.customer_id WHERE customer.first_name = 'Adrian' AND customer.last_name = 'Kunzelmann';
SELECT COUNT(*) FROM address JOIN country ON address.country_id = country.country_id WHERE country.country_name = 'Philippines';
SELECT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id GROUP BY a.author_name ORDER BY COUNT(ba.book_id) DESC LIMIT 1;
SELECT title FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Harper Collins');
SELECT COUNT(*) FROM order_history JOIN order_status ON order_history.status_id = order_status.status_id WHERE order_status.status_value = 'Returned' AND YEAR(order_history.status_date) = 2020;
SELECT sm.method_name FROM shipping_method sm JOIN (     SELECT shipping_method_id, COUNT(*) as cnt     FROM cust_order     GROUP BY shipping_method_id ) co ON sm.method_id = co.shipping_method_id GROUP BY sm.method_id ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 1;
SELECT COUNT(*) FROM customer_address JOIN address_status ON customer_address.status_id = address_status.status_id WHERE address_status.address_status = 'Inactive';
SELECT b.title FROM book b JOIN order_line ol ON b.book_id = ol.book_id GROUP BY b.title ORDER BY COUNT(ol.order_id) DESC LIMIT 1;
SELECT T2.street_name, T2.city FROM cust_order AS T1 JOIN address AS T2 ON T1.dest_address_id = T2.address_id GROUP BY T1.dest_address_id ORDER BY COUNT(T1.dest_address_id) DESC LIMIT 1;
SELECT     strftime('%Y', oh.status_date) - strftime('%Y', co.order_date) AS "year",     strftime('%m', oh.status_date) - strftime('%m', co.order_date) AS "month",     strftime('%d', oh.status_date) - strftime('%d', co.order_date) AS "day" FROM     order_history oh JOIN     cust_order co ON oh.order_id = co.order_id WHERE     oh.order_id = 2398;
SELECT c.first_name, c.last_name, COUNT(ca.address_id) AS num_addresses FROM customer c JOIN customer_address ca ON c.customer_id = ca.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY num_addresses DESC LIMIT 1;
SELECT (SUM(case when s.method_name = 'International' then ol.price else 0 end) * 100.0 / SUM(ol.price)) AS percentage FROM order_line ol JOIN cust_order co ON ol.order_id = co.order_id JOIN shipping_method s ON co.shipping_method_id = s.method_id;
SELECT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id WHERE b.num_pages < (SELECT AVG(num_pages) FROM book) GROUP BY a.author_name;
SELECT MIN(price) FROM order_line WHERE price != 0;
SELECT COUNT(DISTINCT c.customer_id) FROM customer AS c JOIN customer_address AS ca ON c.customer_id = ca.customer_id JOIN address AS a ON ca.address_id = a.address_id WHERE a.city = 'Villeneuve-la-Garenne';
SELECT COUNT(*) FROM author WHERE author_name LIKE 'Adam';
SELECT COUNT(*) FROM customer WHERE email LIKE '%@yahoo.com';
SELECT T3.city FROM customer AS T1 JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id JOIN address AS T3 ON T2.address_id = T3.address_id JOIN country AS T4 ON T3.country_id = T4.country_id WHERE T4.country_name = 'United States of America';
SELECT COUNT(*) FROM cust_order co JOIN customer c ON co.customer_id = c.customer_id JOIN shipping_method sm ON co.shipping_method_id = sm.method_id WHERE c.first_name = 'Marcelia' AND c.last_name = 'Goering' AND substr(co.order_date, 1, 4) = '2021' AND sm.method_name = 'Priority Shipping';
SELECT b.title, MAX(ol.price) as max_price FROM book b JOIN order_line ol ON b.book_id = ol.book_id GROUP BY b.title ORDER BY max_price DESC LIMIT 1;
SELECT COUNT(DISTINCT c.customer_id) FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'Anleitung zum Zickigsein'
SELECT MAX(ol.price) FROM order_line ol JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'Bite Me If You Can (Argeneau #6)'
SELECT COUNT(DISTINCT co.customer_id) FROM cust_order co JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.publication_date = (     SELECT MIN(publication_date)     FROM book );
SELECT b.title FROM book b JOIN book_language bl ON b.language_id = bl.language_id JOIN publisher p ON b.publisher_id = p.publisher_id WHERE bl.language_name = 'Spanish' AND p.publisher_name = 'Alfaguara';
SELECT COUNT(DISTINCT c.customer_id) FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Stephen King' AND b.publication_date = (     SELECT MIN(publication_date)     FROM book     WHERE book_id IN (         SELECT book_id         FROM book_author         WHERE author_id = (             SELECT author_id             FROM author             WHERE author_name = 'Stephen King'         )     ) );
SELECT bl.language_name FROM book b JOIN book_language bl ON b.language_id = bl.language_id ORDER BY b.publication_date LIMIT 2;
SELECT publisher_name FROM publisher JOIN book ON publisher.publisher_id = book.publisher_id WHERE book.title = 'The Secret Garden';
SELECT COUNT(*) FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE author.author_name = 'J.K Rowling' AND publisher.publisher_name = 'Scholastic';
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id GROUP BY p.publisher_id, p.publisher_name HAVING COUNT(b.book_id) >= 30;
SELECT DISTINCT SUBSTR(street_number, -1) AS last_number, street_name FROM address;
SELECT a.street_number, a.street_name, a.city, c.country_name FROM address a JOIN country c ON a.country_id = c.country_id WHERE a.city = 'Lazaro Cardenas';
SELECT isbn13 FROM book WHERE num_pages > 135 AND num_pages < 140;
SELECT title FROM book ORDER BY publication_date LIMIT 6;
SELECT COUNT(*) FROM order_line ol JOIN cust_order co ON ol.order_id = co.order_id WHERE Substr(co.order_date, 1, 7) = '2020-12';
SELECT first_name, last_name FROM customer WHERE last_name LIKE 'K%';
SELECT DISTINCT city FROM address WHERE country_id IN (     SELECT country_id     FROM country     WHERE country_name = 'Costa Rica' ) AND address_id IN (     SELECT address_id     FROM customer_address     WHERE customer_id IN (         SELECT customer_id         FROM customer     ) );
SELECT a.street_number, a.street_name, a.city FROM address a JOIN customer_address ca ON a.address_id = ca.address_id JOIN address_status as ON as.status_id = ca.status_id WHERE as.address_status = 'Inactive';
SELECT c.first_name, c.last_name FROM customer c JOIN customer_address ca ON c.customer_id = ca.customer_id JOIN address a ON ca.address_id = a.address_id WHERE a.city = 'Baiyin';
SELECT DISTINCT c.email FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN shipping_method sm ON co.shipping_method_id = sm.method_id WHERE sm.method_name = 'Priority';
SELECT CO.order_date FROM cust_order CO JOIN customer_address CA ON CO.customer_id = CA.customer_id JOIN address A ON CA.address_id = A.address_id WHERE A.street_number = '460';
Error: 第 6037 个样本有 2 个SQL。
SELECT os.status_value FROM order_status os JOIN order_history oh ON os.status_id = oh.status_id JOIN cust_order co ON oh.order_id = co.order_id WHERE SUBSTR(co.order_date, 1, 10) = '2022-04-10' GROUP BY os.status_value;
SELECT MAX(ol.price) FROM order_line ol JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'The Prophet';
SELECT T1.order_date FROM cust_order AS T1 JOIN order_line AS T2 ON T1.order_id = T2.order_id WHERE T2.price = 16.54;
SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Peter H. Smith';
SELECT COUNT(*) FROM book WHERE num_pages < 300 AND publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'HarperCollins Publishers');
SELECT COUNT(*) FROM book JOIN book_language ON book.language_id = book_language.language_id WHERE book_language.language_name = 'Japanese';
SELECT AVG(b.num_pages) FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON a.author_id = ba.author_id WHERE a.author_name = 'Jennifer Crusie';
SELECT     (SUM(CASE WHEN sm.method_name = 'International' THEN 1 ELSE 0 END) * 100 / COUNT(co.order_id)) AS percentage FROM     cust_order co JOIN     shipping_method sm ON co.shipping_method_id = sm.method_id JOIN     customer c ON co.customer_id = c.customer_id WHERE     c.first_name = 'Kaleena';
SELECT c.first_name, c.last_name FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'The Sorrows of Young Werther';
SELECT b.title FROM book b JOIN order_line ol ON b.book_id = ol.book_id JOIN cust_order co ON ol.order_id = co.order_id JOIN customer c ON c.customer_id = co.customer_id WHERE c.first_name = 'Ursola' AND c.last_name = 'Purdy';
SELECT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id WHERE b.num_pages = (SELECT MAX(num_pages) FROM book);
SELECT COUNT(*) FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'Akira Watanabe';
SELECT a.street_number, a.street_name, a.city, c.country_name FROM address a JOIN country c ON a.country_id = c.country_id JOIN customer_address ca ON a.address_id = ca.address_id JOIN customer cu ON ca.customer_id = cu.customer_id WHERE cu.first_name = 'Ursola' AND cu.last_name = 'Purdy';
SELECT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id WHERE b.title = 'The Mystery in the Rocky Mountains';
SELECT publisher_name FROM publisher JOIN book ON publisher.publisher_id = book.publisher_id WHERE book.title = 'Girls'' Night In';
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id WHERE b.publication_date = (SELECT MIN(publication_date) FROM book);
SELECT     (SELECT SUM(cost) FROM shipping_method WHERE method_name = 'Express') -     (SELECT SUM(cost) FROM shipping_method WHERE method_name = 'Priority') AS cost_difference;
SELECT COUNT(*) FROM order_history JOIN order_status ON order_history.status_id = order_status.status_id WHERE order_status.status_value = 'Cancelled' AND SUBSTR(order_history.status_date, 1, 4) = '2022';
SELECT b.title FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id WHERE p.publisher_name = 'BBC Audiobooks';
SELECT COUNT(*) FROM book WHERE SUBSTR(publication_date, 1, 4) = '2017';
SELECT isbn13 FROM book WHERE title = 'The Mystery in the Rocky Mountains';
SELECT     (COUNT(CASE WHEN oh.status_value = 'Returned' THEN oh.history_id END) * 100.0 / COUNT(oh.history_id)) AS return_percentage FROM     order_history oh WHERE     SUBSTR(oh.status_date, 1, 4) = '2022';
SELECT     (COUNT(CASE WHEN a.status_id = (SELECT status_id FROM address_status WHERE address_status = 'Inactive') THEN a.address_id END) * 100.0 / COUNT(a.address_id)) AS percentage_inactive FROM     address a JOIN     customer_address ca ON a.address_id = ca.address_id JOIN     address_status as1 ON ca.status_id = as1.status_id;
SELECT num_pages FROM book WHERE title = 'Seaward';
SELECT author_name FROM author JOIN book_author ON author.author_id = book_author.author_id JOIN book ON book.book_id = book_author.book_id WHERE title = 'First Things First';
SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Tom Clancy';
SELECT title FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'Hirohiko Araki' AND book.publication_date = '2006-06-06';
SELECT publisher_name FROM publisher JOIN book ON publisher.publisher_id = book.publisher_id WHERE book.title = 'Hitchhiker\'s Guide To The Galaxy: The Filming of the Douglas Adams classic'
SELECT title FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'ADV Manga');
SELECT c.first_name, c.last_name FROM customer c JOIN customer_address ca ON c.customer_id = ca.customer_id JOIN address a ON ca.address_id = a.address_id WHERE a.street_number = '55' AND a.street_name = 'Dorton Pass' AND a.city = 'Huangqiao';
SELECT c.country_name FROM country c JOIN address a ON c.country_id = a.country_id WHERE a.street_number = '9' AND a.street_name = 'Green Ridge Point' AND a.city = 'Arendal'
SELECT a.street_number, a.street_name, a.city FROM address a JOIN country c ON a.country_id = c.country_id WHERE c.country_name = 'Poland' LIMIT 10;
SELECT sm.method_name FROM cust_order co JOIN shipping_method sm ON co.shipping_method_id = sm.method_id JOIN customer c ON co.customer_id = c.customer_id WHERE c.first_name = 'Nicolette' AND c.last_name = 'Sadler' AND co.order_date = '2020-06-29 19:40:07';
SELECT title FROM book JOIN book_language ON book.language_id = book_language.language_id WHERE book_language.language_name = 'Arabic';
SELECT bl.language_name FROM book b JOIN book_language bl ON b.language_id = bl.language_id WHERE b.title = 'El plan infinito';
SELECT     (COUNT(CASE WHEN bau.author_id = au.author_id AND pub.publisher_name = 'Viz Media' THEN ba.book_id END) * 100.0 / COUNT(DISTINCT ba.book_id)) AS percentage FROM     book_author ba     INNER JOIN author au ON ba.author_id = au.author_id     INNER JOIN book b ON ba.book_id = b.book_id     INNER JOIN publisher pub ON b.publisher_id = pub.publisher_id WHERE     au.author_name = 'Hirohiko Araki';
SELECT AVG(b.num_pages) FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON a.author_id = ba.author_id WHERE a.author_name = 'Zilpha Keatley Snyder';
SELECT first_name, last_name FROM customer WHERE email = 'ckupis4@tamu.edu';
SELECT title FROM book WHERE num_pages = (SELECT MAX(num_pages) FROM book);
SELECT COUNT(*) FROM book JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'A.J. Ayer';
SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON a.author_id = ba.author_id WHERE a.author_name = 'A.J. Ayer';
SELECT b.publisher_id, p.publisher_name FROM book AS b JOIN publisher AS p ON b.publisher_id = p.publisher_id WHERE b.title = 'The Season: A Candid Look at Broadway';
SELECT COUNT(b.book_id) / (SELECT COUNT(*) FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Carole Marsh Mysteries')) AS average_english_books FROM book b JOIN book_language bl ON b.language_id = bl.language_id JOIN publisher p ON b.publisher_id = p.publisher_id WHERE bl.language_name = 'English' AND p.publisher_name = 'Carole Marsh Mysteries';
SELECT b.title FROM book b JOIN publisher p ON b.publisher_id = p.publisher_id WHERE b.num_pages = (SELECT MAX(num_pages) FROM book WHERE SUBSTR(publication_date, 1, 4) BETWEEN '1990' AND '2000') AND p.publisher_name = 'Free Press' AND SUBSTR(b.publication_date, 1, 4) BETWEEN '1990' AND '2000';
SELECT ol.price FROM order_line ol JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'The Servant Leader' AND SUBSTR(b.publication_date, 1, 4) = '2003'
SELECT a.street_number, a.street_name, a.city FROM address AS a JOIN customer_address AS ca ON a.address_id = ca.address_id JOIN address_status AS as ON ca.status_id = as.status_id JOIN customer AS c ON ca.customer_id = c.customer_id WHERE c.first_name = 'Kandy' AND as.address_status = 1;
SELECT COUNT(*) FROM (     SELECT ol.book_id     FROM order_line ol     JOIN cust_order co ON ol.order_id = co.order_id     JOIN customer c ON co.customer_id = c.customer_id     WHERE c.first_name = 'Kandy' AND c.last_name = 'Adamec' ) as T;
SELECT COUNT(*) FROM order_history JOIN order_status ON order_history.status_id = order_status.status_id WHERE order_status.status_value = 'Returned' AND SUBSTR(order_history.status_date, 1, 4) = '2022';
SELECT T3.country_name FROM customer AS T1 JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id JOIN country AS T3 ON T2.country_id = T3.country_id WHERE T1.email = 'rturbitt2@geocities.jp'
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id GROUP BY p.publisher_name ORDER BY COUNT(b.book_id) DESC LIMIT 1;
SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON a.author_id = ba.author_id WHERE a.author_name = 'A.J. Ayer' ORDER BY b.publication_date ASC LIMIT 1;
SELECT     (COUNT(CASE WHEN ol.price > 10 THEN b.book_id END) * 100.0 / COUNT(b.book_id)) AS percentage FROM     book b JOIN     order_line ol ON b.book_id = ol.book_id JOIN     cust_order co ON co.order_id = ol.order_id JOIN     customer c ON c.customer_id = co.customer_id WHERE     c.first_name || ' ' || c.last_name = 'Ruthanne Vatini';
SELECT title FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'AK Press');
SELECT c.first_name, c.last_name FROM customer AS c JOIN cust_order AS co ON c.customer_id = co.customer_id JOIN order_line AS ol ON co.order_id = ol.order_id WHERE ol.price = (SELECT MIN(price) FROM order_line) LIMIT 1;
SELECT b.isbn13 FROM book b JOIN order_line ol ON b.book_id = ol.book_id JOIN cust_order co ON ol.order_id = co.order_id JOIN customer c ON co.customer_id = c.customer_id WHERE c.email = 'fsier3e@ihg.com';
SELECT DISTINCT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id JOIN order_line ol ON b.book_id = ol.book_id WHERE ol.price >= 19;
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id WHERE b.isbn13 = '76092025986';
SELECT COUNT(*) FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Birlinn') AND num_pages BETWEEN 600 AND 700 AND SUBSTR(publication_date, 1, 4) = '2008';
SELECT ol.price FROM order_line ol JOIN book b ON ol.book_id = b.book_id WHERE b.isbn13 = '9780763628321';
SELECT b.num_pages FROM book b JOIN order_line ol ON b.book_id = ol.book_id WHERE ol.order_id = 1167;
SELECT title FROM book WHERE language_id IN (     SELECT language_id     FROM book_language     WHERE language_name = 'British English' );
SELECT COUNT(*) FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Brava') AND SUBSTR(publication_date, 1, 4) = '2006';
SELECT b.isbn13, ol.price FROM book b JOIN order_line ol ON b.book_id = ol.book_id WHERE b.book_id = 7160;
SELECT b.title FROM book b JOIN order_line ol ON b.book_id = ol.book_id WHERE ol.order_id = 931;
SELECT bl.language_name FROM book b JOIN book_language bl ON b.language_id = bl.language_id WHERE b.title = 'Zorro';
SELECT DISTINCT c.email FROM customer c JOIN cust_order co ON c.customer_id = co.customer_id JOIN order_line ol ON co.order_id = ol.order_id WHERE ol.price BETWEEN 3 AND 5;
SELECT b.isbn13 FROM book b JOIN order_line ol ON b.book_id = ol.book_id WHERE ol.price = 7.5;
SELECT p.publisher_name FROM publisher p JOIN book b ON p.publisher_id = b.publisher_id JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON a.author_id = ba.author_id WHERE a.author_name = 'Alan Lee';
SELECT SUM(b.num_pages) FROM book b JOIN order_line ol ON b.book_id = ol.book_id JOIN cust_order co ON ol.order_id = co.order_id JOIN customer c ON co.customer_id = c.customer_id WHERE c.first_name = 'Mick' AND c.last_name = 'Sever';
SELECT a.author_name FROM author a JOIN book_author ba ON a.author_id = ba.author_id JOIN book b ON ba.book_id = b.book_id WHERE b.publication_date = (SELECT MAX(publication_date) FROM book);
SELECT     (COUNT(CASE WHEN b.language_id = bl.language_id AND bl.language_name = 'English' THEN b.book_id END) * 100.0 / COUNT(b.book_id)) AS percentage FROM     book b JOIN     publisher p ON b.publisher_id = p.publisher_id JOIN     book_language bl ON b.language_id = bl.language_id WHERE     p.publisher_name = 'Ace Book';
SELECT     (SELECT COUNT(b.book_id) FROM book b JOIN order_line ol ON b.book_id = ol.book_id WHERE b.num_pages < 500 AND ol.price < 1) -     (SELECT COUNT(b.book_id) FROM book b JOIN order_line ol ON b.book_id = ol.book_id WHERE b.num_pages > 500 AND ol.price < 1)
SELECT bl.language_name, b.title FROM book b JOIN book_language bl ON b.language_id = bl.language_id JOIN order_line ol ON b.book_id = ol.book_id WHERE ol.price < (SELECT AVG(price) * 0.2 FROM order_line)
SELECT first_name, last_name FROM employee WHERE title = 'sanitarian' AND supervisor = 'Darlisha Jacobs';
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE e.title = 'Sanitarian' AND i.inspection_date LIKE '2010-05%';
SELECT COUNT(*) FROM inspection JOIN employee ON inspection.employee_id = employee.employee_id WHERE employee.first_name = 'Joshua' AND employee.last_name = 'Rosa' AND inspection.inspection_date LIKE '2010%';
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN employee em ON i.employee_id = em.employee_id WHERE em.first_name = 'Joshua' AND em.last_name = 'Rosa';
SELECT COUNT(DISTINCT e.license_no) FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_date LIKE '2010%' AND (e.facility_type = 'Restaurant' OR e.facility_type = 'Cafeteria');
SELECT e.latitude, e.longitude FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_date = '2010-05-11';
SELECT COUNT(DISTINCT e.license_no) FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_date LIKE '2010%' AND e.ward = 42;
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE est.dba_name = 'Burbank';
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results = 'Fail' AND i.inspection_date LIKE '2010%';
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE est.dba_name = 'AMUNDSEN HIGH SCHOOL' AND i.inspection_date = '2010-05-11';
SELECT COUNT(*) FROM inspection WHERE results = 'Pass' AND employee_id IN (     SELECT employee_id     FROM employee     WHERE first_name = 'Joshua' AND last_name = 'Rosa' AND title = 'sanitarian' );
SELECT i.inspection_date FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.dba_name = 'Azha Restaurant Inc.' AND i.followup_to = (SELECT inspection_id FROM inspection WHERE inspection_date = '2010-01-21' AND license_no = (SELECT license_no FROM establishment WHERE dba_name = 'Azha Restaurant Inc.'))
SELECT COUNT(DISTINCT e.license_no) FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN violation v ON i.inspection_id = v.inspection_id WHERE i.inspection_date LIKE '2010%' AND e.risk_level = 3;
SELECT COUNT(i.inspection_id) / COUNT(DISTINCT e.employee_id) AS average_inspections FROM inspection i JOIN employee e ON i.employee_id = e.employee_id WHERE i.inspection_date LIKE '2010%' AND e.salary > 70000;
SELECT point_level FROM inspection_point WHERE Description = 'Refrigeration and metal stem thermometers provided and conspicuous';
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id = 48224;
SELECT COUNT(*) FROM inspection JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.dba_name = 'All Style Buffet' AND establishment.facility_type = 'Restaurant';
SELECT MIN(i.inspection_date) FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.aka_name = 'WING HUNG CHOP SUEY RESTAURANT';
SELECT COUNT(*) FROM establishment JOIN inspection ON establishment.license_no = inspection.license_no WHERE establishment.facility_type = 'Restaurant' AND inspection.inspection_date = '2015-05-08';
SELECT COUNT(*) FROM violation JOIN inspection_point ON violation.point_id = inspection_point.point_id WHERE inspection_point.category = 'Food Maintenance' AND violation.inspection_id = 1454071;
SELECT COUNT(*) FROM violation JOIN inspection ON violation.inspection_id = inspection.inspection_id JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.dba_name = 'ROYAL THAI CUISINE' AND inspection.inspection_date = '2015-05-08';
SELECT COUNT(*) FROM inspection WHERE license_no IN (     SELECT license_no     FROM establishment     WHERE address = '3635 W DIVERSEY AVE' AND facility_type = 'Grocery Store' );
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id GROUP BY e.employee_id, e.first_name, e.last_name ORDER BY COUNT(i.inspection_id) DESC LIMIT 1;
SELECT COUNT(*) FROM inspection JOIN employee ON inspection.employee_id = employee.employee_id WHERE employee.first_name = 'Lisa' AND employee.last_name = 'Tillman' AND inspection.results = 'Out of Business';
SELECT COUNT(*) FROM inspection JOIN employee ON inspection.employee_id = employee.employee_id WHERE employee.title = 'Sanitarian' AND employee.address = '5000 N Wolcott Ave' AND inspection.inspection_date BETWEEN '2011-05-01' AND '2011-05-31';
SELECT e.phone FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id = 634597 AND e.title = 'Sanitarian';
SELECT e.salary FROM employee e JOIN inspection i ON e.employee_id = i.employee_id GROUP BY e.employee_id, e.salary ORDER BY COUNT(i.inspection_id) DESC LIMIT 1;
SELECT COUNT(i.inspection_id) / COUNT(DISTINCT e.license_no) AS average_inspections FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.risk_level = '3' AND e.facility_type = 'TAVERN' GROUP BY e.risk_level, e.facility_type;
Error: 第 6139 个样本有 2 个SQL。
SELECT COUNT(*) FROM employee WHERE title = 'Sanitarian' AND city = 'Chicago' AND zip = 60617;
SELECT dba_name FROM establishment WHERE address = '2903 W IRVING PARK RD ';
SELECT first_name, last_name FROM employee WHERE salary = (SELECT MIN(salary) FROM employee);
SELECT COUNT(*) FROM establishment WHERE dba_name = 'HOMEMADE PIZZA' AND risk_level = 2;
SELECT COUNT(*) FROM inspection JOIN violation ON inspection.inspection_id = violation.inspection_id WHERE violation.point_id = 3 AND violation.fine = 500;
SELECT COUNT(*) FROM employee WHERE supervisor = 'Gregory Cardenas';
SELECT MIN(i.inspection_date) FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.dba_name = 'RENALDI''S PIZZA';
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_date LIKE '2016-03%' GROUP BY e.employee_id ORDER BY COUNT(i.inspection_id) DESC LIMIT 1;
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results = 'Pass w/ Conditions' AND i.inspection_date LIKE '2012-05%';
SELECT COUNT(*) FROM inspection WHERE inspection_type = 'Short Form Complaint' AND results = 'Pass' AND employee_id IN (SELECT employee_id FROM employee WHERE first_name = 'David' AND last_name = 'Hodges');
SELECT COUNT(DISTINCT e.license_no) FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.ward = 42 AND i.results = 'Fail' AND i.inspection_date BETWEEN '2010-01-01' AND '2015-12-31' GROUP BY e.license_no HAVING COUNT(i.inspection_id) >= 5;
SELECT e.salary FROM employee e JOIN inspection i ON e.employee_id = i.employee_id GROUP BY e.employee_id, e.salary ORDER BY COUNT(i.inspection_id) DESC LIMIT 1;
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN violation v ON i.inspection_id = v.inspection_id WHERE i.inspection_date LIKE '2014%' GROUP BY e.dba_name ORDER BY SUM(v.fine) DESC LIMIT 1;
SELECT e.latitude, e.longitude FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results = 'Fail' GROUP BY e.license_no ORDER BY COUNT(*) DESC LIMIT 1;
SELECT v.inspector_comment FROM violation v JOIN inspection i ON v.inspection_id = i.inspection_id JOIN establishment e ON i.license_no = e.license_no WHERE e.dba_name = 'TAQUERIA LA FIESTA' AND i.inspection_date = '2010-01-25';
SELECT SUM(violation.fine) AS total_fine FROM violation JOIN inspection ON violation.inspection_id = inspection.inspection_id JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.dba_name = 'RON OF JAPAN INC' AND inspection.inspection_date LIKE '2014-02%';
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE est.dba_name = 'TAQUERIA LA PAZ';
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN violation v ON i.inspection_id = v.inspection_id GROUP BY e.employee_id, e.first_name, e.last_name ORDER BY SUM(v.fine) DESC LIMIT 1;
SELECT AVG(t2.cnt) AS average_inspections, t1.first_name, t1.last_name FROM (     SELECT e.employee_id, e.first_name, e.last_name, e.salary     FROM employee e     ORDER BY e.salary DESC     LIMIT 5 ) t1 JOIN (     SELECT i.employee_id, COUNT(i.inspection_id) as cnt     FROM inspection i     GROUP BY i.employee_id ) t2 ON t1.employee_id = t2.employee_id;
WITH inspections_count AS (   SELECT     e.dba_name,     COUNT(i.inspection_id) as total_inspections,     SUM(CASE WHEN i.results = 'Pass' THEN 1 ELSE 0 END) as pass_inspections,     SUM(CASE WHEN i.results = 'Fail' THEN 1 ELSE 0 END) as fail_inspections   FROM     food_inspection_2.inspection i   JOIN     food_inspection_2.establishment e ON i.license_no = e.license_no   GROUP BY     e.dba_name ), max_inspections AS (   SELECT     MAX(total_inspections) as max_inspections   FROM     inspections_count ) SELECT   ic.dba_name,   ic.total_inspections,   (ic.pass_inspections * 100.0 / ic.total_inspections) as pass_percentage,   (ic.fail_inspections * 100.0 / ic.total_inspections) as fail_percentage FROM   inspections_count ic JOIN   max_inspections mi WHERE   ic.total_inspections = mi.max_inspections;
SELECT e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE est.address = '7211 S Hermitage Ave' AND est.city = 'Chicago' AND est.state = 'IL';
SELECT e.first_name, e.last_name, est.dba_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE i.inspection_id = 44256 AND i.inspection_date = '2010-05-05';
SELECT e.address FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.facility_type = 'School' AND i.results = 'Pass' AND i.inspection_date LIKE '2010-03%';
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_type = 'Canvass' AND i.inspection_date = '2010-03-09';
SELECT i.inspection_id FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.dba_name = 'PIZZA RUSTICA, INC.';
SELECT COUNT(*) FROM (   SELECT i.inspection_id   FROM inspection i   JOIN establishment e ON i.license_no = e.license_no   WHERE e.facility_type = 'Restaurant'   AND e.risk_level = (SELECT MAX(risk_level) FROM establishment WHERE facility_type = 'Restaurant')   AND i.results = 'Pass' ) as subquery;
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN violation v ON i.inspection_id = v.inspection_id JOIN inspection_point ip ON v.point_id = ip.point_id WHERE ip.category = 'Display of Inspection Report Summary';
SELECT T1.title FROM employee AS T1 JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 60332;
SELECT COUNT(*) FROM inspection JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.facility_type = 'Restaurant' AND establishment.risk_level = (SELECT MIN(risk_level) FROM establishment WHERE facility_type = 'Restaurant') AND inspection.results = 'Fail' AND inspection.inspection_type = 'Complaint';
SELECT e.state, e.city, e.address, v.fine FROM violation v JOIN inspection i ON v.inspection_id = i.inspection_id JOIN establishment e ON i.license_no = e.license_no WHERE v.inspection_id = 48216;
SELECT inspection_id FROM violation WHERE fine = 500 AND point_id IN (SELECT point_id FROM inspection_point WHERE point_level = 'Critical') AND inspector_comment = 'CDI ON 5-17-10';
SELECT ip.Description, v.inspector_comment FROM inspection AS i JOIN inspection_point AS ip ON i.inspection_id = ip.inspection_id JOIN violation AS v ON i.inspection_id = v.inspection_id WHERE i.inspection_id = 164795;
SELECT violation.inspector_comment, inspection_point.code FROM violation JOIN inspection_point ON violation.point_id = inspection_point.point_id WHERE violation.inspection_id = 54216 AND violation.point_id = 34;
SELECT     (COUNT(CASE WHEN e.risk_level = (         SELECT MAX(risk_level) FROM establishment     ) THEN e.license_no END) / COUNT(e.license_no) * 100) AS percentage FROM     inspection i JOIN     establishment e ON i.license_no = e.license_no WHERE     i.results = 'Fail';
SELECT     (SELECT COUNT(DISTINCT e.employee_id)      FROM employee e      JOIN inspection i ON e.employee_id = i.employee_id      JOIN violation v ON i.inspection_id = v.inspection_id      WHERE e.salary BETWEEN 75000 AND 85000 AND v.fine = 100)     -     (SELECT COUNT(DISTINCT e.employee_id)      FROM employee e      JOIN inspection i ON e.employee_id = i.employee_id      JOIN violation v ON i.inspection_id = v.inspection_id      WHERE e.salary BETWEEN 75000 AND 85000 AND v.fine = 500) AS Difference;
SELECT COUNT(*) FROM inspection WHERE inspection_date LIKE '2011-01%';
SELECT COUNT(*) FROM inspection WHERE results = 'Fail' AND inspection_date LIKE '2014%';
SELECT (COUNT(v.inspection_id) * 100.0 / (SELECT COUNT(*) FROM inspection)) AS percentage FROM violation v JOIN inspection_point ip ON v.point_id = ip.point_id WHERE ip.fine = 100;
SELECT point_id, fine FROM violation JOIN inspection ON violation.inspection_id = inspection.inspection_id WHERE inspection.inspection_date = '2010-08-07';
SELECT COUNT(*) FROM inspection JOIN inspection_point ON inspection.inspection_id = inspection_point.inspection_id WHERE inspection_point.category = 'Personnel';
SELECT e.dba_name, i.results FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.city = 'BURNHAM';
SELECT     (SELECT COUNT(*)      FROM inspection i      JOIN inspection_point ip ON i.inspection_id = ip.point_id      WHERE ip.category = 'Toxic Items') AS Toxic_Items_Count,     (SELECT COUNT(*)      FROM inspection i      JOIN inspection_point ip ON i.inspection_id = ip.point_id      WHERE ip.category = 'No Smoking Regulations') AS No_Smoking_Regulations_Count;
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN employee em ON i.employee_id = em.employee_id WHERE em.first_name = 'Sarah' AND em.last_name = 'Lindsey' AND i.inspection_date = '2012-11-20';
SELECT ip.category, v.fine FROM violation v JOIN inspection i ON v.inspection_id = i.inspection_id JOIN employee e ON i.employee_id = e.employee_id JOIN inspection_point ip ON v.point_id = ip.point_id WHERE e.first_name = 'Lisa' AND e.last_name = 'Tillman' AND i.inspection_date LIKE '2014-01%';
SELECT COUNT(*) FROM inspection JOIN inspection_point ON inspection.inspection_id = inspection_point.inspection_id WHERE inspection_point.category = 'Display of Inspection Report Summary';
SELECT inspection_type, results FROM inspection WHERE license_no IN (     SELECT license_no     FROM establishment     WHERE dba_name = 'Riverwalk café' )
SELECT e.first_name, e.last_name, i.results FROM employee e JOIN inspection i ON e.employee_id = i.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE est.dba_name = 'JEAN SAMOCKI';
SELECT SUM(violation.fine) FROM violation JOIN inspection ON violation.inspection_id = inspection.inspection_id JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.dba_name = 'HACIENDA LOS TORRES' AND establishment.ward = 36 AND inspection.results = 'Fail';
SELECT SUM(violation.fine) FROM violation JOIN inspection_point ON violation.point_id = inspection_point.point_id WHERE inspection_point.category = 'Food Equipment and Utensil';
SELECT e.dba_name, e.latitude, e.longitude FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_date = '2013-07-29' AND i.results = 'Fail';
SELECT     (COUNT(CASE WHEN i.results LIKE '%Pass%' THEN i.inspection_id END) * 100.0 / COUNT(i.inspection_id)) AS pass_percentage,     COUNT(DISTINCT CASE WHEN i.results LIKE '%Pass%' AND e.city = 'CHICAGO' THEN e.license_no END) AS chicago_businesses FROM     inspection i JOIN     establishment e ON i.license_no = e.license_no;
SELECT COUNT(T2.inspection_id) / 8 AS avg_inspections_per_year FROM employee AS T1 JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Jessica' AND T1.last_name = 'Anthony' AND T2.inspection_date >= '2010-01-01' AND T2.inspection_date <= '2017-12-31'
SELECT first_name FROM employee WHERE employee_id = (SELECT employee_id FROM inspection WHERE inspection_id = 48225);
SELECT e.address FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id = 52238;
SELECT e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id = 52238;
SELECT results FROM inspection JOIN employee ON inspection.employee_id = employee.employee_id WHERE first_name = 'Thomas' AND last_name = 'Langley';
SELECT e.address FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_date = '2010-11-05';
SELECT e.phone FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_type = 'Canvass';
SELECT e.title FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id = 52269;
SELECT i.results FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.dba_name = 'XANDO COFFEE & BAR / COSI SANDWICH BAR';
SELECT i.inspection_type FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.dba_name = 'JOHN SCHALLER';
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.inspection_type = 'License';
SELECT COUNT(*) FROM inspection JOIN establishment ON inspection.license_no = establishment.license_no WHERE inspection_date LIKE '2010%' AND establishment.risk_level = 3;
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE (i.results = 'Pass' OR i.results = 'Pass w/Conditions');
SELECT SUM(e.salary) FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id BETWEEN 52270 AND 52272;
SELECT AVG(e.salary) FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_type = 'License Re-Inspection';
SELECT e.results, e.zip FROM establishment AS e JOIN inspection AS i ON e.license_no = i.license_no WHERE e.license_no = 1222441;
SELECT MIN(i.inspection_date) FROM inspection i JOIN establishment e ON i.license_no = e.license_no WHERE e.dba_name = 'JOHN SCHALLER' AND i.inspection_date LIKE '2010%';
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.license_no = 1334073;
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN employee em ON i.employee_id = em.employee_id WHERE em.first_name = 'Joshua' AND em.last_name = 'Rosa';
SELECT COUNT(*) FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE e.salary > 70000 AND i.results = 'Fail';
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results = 'Pass' AND i.inspection_date LIKE '2010%';
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN employee em ON i.employee_id = em.employee_id WHERE em.first_name = 'Joshua' AND em.last_name = 'Rosa';
SELECT COUNT(*) FROM inspection JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.facility_type = 'Tavern' AND inspection.results = 'Fail' AND inspection.inspection_date LIKE '2010-07%';
SELECT e.risk_level FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN employee em ON i.employee_id = em.employee_id WHERE em.first_name = 'Bob' AND em.last_name = 'Benson';
SELECT e.dba_name, i.results FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN employee em ON i.employee_id = em.employee_id WHERE em.first_name = 'Bob' AND em.last_name = 'Benson' AND i.inspection_date LIKE '2010%';
SELECT T1.title FROM employee AS T1 JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.license_no = 1576687;
SELECT COUNT(*) FROM inspection_point WHERE point_level = 'Serious ' AND fine = 0;
SELECT (SUM(CASE WHEN v.fine = 250 THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT e.license_no)) AS percentage FROM establishment e JOIN violation v ON e.license_no = (     SELECT i.license_no     FROM inspection i     WHERE i.inspection_id = v.inspection_id ) WHERE e.facility_type = 'Restaurant';
SELECT (COUNT(CASE WHEN e.risk_level = 1 THEN e.license_no END) * 100.0 / COUNT(e.license_no)) AS percentage FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results = 'Pass';
SELECT address, city, state FROM employee WHERE first_name = 'Standard' AND last_name = 'Murray';
SELECT facility_type FROM establishment WHERE dba_name = 'Kinetic Playground';
SELECT salary FROM employee WHERE first_name = 'Jessica' AND last_name = 'Anthony';
SELECT dba_name FROM establishment WHERE latitude = 41.9532864854 AND longitude = -87.7673790701422 AND facility_type = 'Restaurant';
SELECT COUNT(*) FROM employee WHERE title = 'Supervisor';
SELECT address FROM establishment WHERE dba_name = 'OLD TIMERS REST & LOUNGE' AND facility_type = 'Restaurant' AND city = 'CHICAGO';
SELECT COUNT(*) FROM employee WHERE city = 'Hoffman Estates' AND state = 'IL';
SELECT COUNT(*) FROM establishment WHERE risk_level = (SELECT MAX(risk_level) FROM establishment);
SELECT first_name, last_name FROM employee WHERE salary = 82700;
SELECT e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id = 52256;
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN violation v ON i.inspection_id = v.inspection_id WHERE e.facility_type = 'Tavern' AND v.fine = 100;
SELECT T1.point_level FROM inspection_point AS T1 JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.fine = 0;
SELECT establishment.facility_type, establishment.license_no FROM establishment JOIN inspection ON establishment.license_no = inspection.license_no WHERE inspection.results = 'Fail' AND establishment.risk_level = (     SELECT MIN(risk_level) FROM establishment )
SELECT i.results FROM inspection i JOIN employee e ON i.employee_id = e.employee_id WHERE i.inspection_date = '2010-02-24' AND e.first_name = 'Arnold' AND e.last_name = 'Holder';
SELECT COUNT(*) FROM inspection JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.facility_type = 'Restaurant' AND inspection.results = 'Fail' AND inspection.inspection_date LIKE '2010-04%';
SELECT inspection_id FROM inspection WHERE employee_id = (     SELECT employee_id     FROM employee     WHERE first_name = 'Rosemary' AND last_name = 'Kennedy' );
SELECT i.inspection_type FROM inspection i JOIN employee e ON i.employee_id = e.employee_id WHERE e.first_name = 'Lisa' AND e.last_name = 'Tillman' AND i.inspection_date = '2010-07-07';
SELECT inspection_id FROM violation WHERE inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA' AND point_id IN (SELECT point_id FROM inspection_point WHERE code = '7-38-030, 015, 010 (A), 005 (A)');
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results = 'Fail' AND e.risk_level = (     SELECT MAX(risk_level)     FROM establishment )
SELECT i.inspection_id FROM inspection i JOIN employee e ON i.employee_id = e.employee_id JOIN establishment est ON i.license_no = est.license_no WHERE e.first_name = 'David' AND e.last_name = 'Hodges' AND est.dba_name = 'KAMAYAN EXPRESS';
SELECT MIN(T1.salary) AS min_salary, MAX(T1.salary) AS max_salary FROM employee AS T1 JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 58424;
SELECT inspection_id FROM violation WHERE fine IN (     SELECT fine     FROM inspection_point     WHERE category = 'Personnel' ) AND inspector_comment = 'A certified food service manager must be present in all establishments at which potentially hazardous food is prepared or served. FOUND NO CITY OF CHICAGO SANITATION CERTIFICATE POSTED OR VALID DOCUMENTATION DURING THIS INSPECTION.'
SELECT COUNT(*) FROM establishment JOIN inspection ON establishment.license_no = inspection.license_no JOIN violation ON inspection.inspection_id = violation.inspection_id WHERE establishment.facility_type = 'Grocery Store' AND violation.fine = 250;
SELECT ip.category FROM inspection_point AS ip JOIN violation AS v ON ip.point_id = v.point_id JOIN inspection AS i ON v.inspection_id = i.inspection_id JOIN establishment AS e ON i.license_no = e.license_no WHERE e.dba_name = 'J & J FOOD';
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE e.facility_type = 'Tavern' AND i.results = 'Fail' AND i.inspection_date LIKE '2010-01%';
SELECT COUNT(*) FROM inspection i JOIN inspection_point ip ON i.inspection_id = ip.inspection_id WHERE ip.point_level = 'Serious' AND ip.fine = 0;
SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN inspection_point ip ON i.inspection_id = ip.point_id WHERE ip.category = 'No Smoking Regulations';
SELECT     (SELECT COUNT(i.inspection_id)      FROM inspection i      JOIN establishment e ON i.license_no = e.license_no      WHERE i.inspection_type = 'Canvass'      AND e.facility_type = 'Restaurant'      AND i.results = 'Pass') -     (SELECT COUNT(i.inspection_id)      FROM inspection i      JOIN establishment e ON i.license_no = e.license_no      WHERE i.inspection_type = 'Canvass'      AND e.facility_type = 'Restaurant'      AND i.results = 'Fail') AS difference;
SELECT e.first_name, e.last_name FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.results = 'Fail' AND i.inspection_date LIKE '2010-02%' AND e.salary > (SELECT AVG(salary) * 0.7 FROM employee);
SELECT     (COUNT(CASE WHEN facility_type = 'Restaurant' THEN license_no END) * 100.0 / COUNT(license_no)) AS Percentage FROM     establishment JOIN     violation ON establishment.license_no = violation.license_no WHERE     fine = 500;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE YEAR(h.date) = 2018 GROUP BY c.name ORDER BY MAX(h.market_cap) DESC LIMIT 1;
SELECT h.volume_24h FROM historical h JOIN coins c ON h.coin_id = c.id WHERE c.name = 'Argentum' AND h.date = '2016-10-11';
SELECT     h.date,     h.price FROM     historical h JOIN     coins c ON h.coin_id = c.id WHERE     c.name = 'Zetacoin' AND     h.date BETWEEN '2013-11-01' AND '2013-11-07' UNION ALL SELECT     AVG(price) as average_price FROM     historical h JOIN     coins c ON h.coin_id = c.id WHERE     c.name = 'Zetacoin' AND     h.date BETWEEN '2013-11-01' AND '2013-11-07';
SELECT time_high, time_low FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'WRAP') AND month(date) = 8 AND year(date) = 2016 AND (price = (SELECT MAX(price) FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'WRAP') AND month(date) = 8 AND year(date) = 2016) OR price = (SELECT MIN(price) FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'WRAP') AND month(date) = 8 AND year(date) = 2016));
SELECT historical.date FROM historical JOIN coins ON historical.coin_id = coins.id WHERE coins.name = 'DigixDAO' ORDER BY historical.price DESC LIMIT 1;
SELECT coins.name, historical.date, historical.price FROM coins JOIN historical ON coins.id = historical.coin_id WHERE historical.percent_change_24h = (SELECT MAX(percent_change_24h) FROM historical);
SELECT AVG(circulating_supply) FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Frozen') AND date BETWEEN '2014-01-01' AND '2014-12-31' GROUP BY MONTH(date);
SELECT c.name, MAX(h.date) as last_transaction_date FROM coins c JOIN historical h ON c.id = h.coin_id WHERE c.status = 'inactive' GROUP BY c.name;
SELECT price FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin') AND YEAR(date) = 2016;
SELECT historical.date, historical.price FROM historical JOIN coins ON historical.coin_id = coins.id WHERE coins.name = 'Bitcoin' ORDER BY historical.price LIMIT 1;
SELECT c.status FROM coins c JOIN historical h ON c.id = h.coin_id GROUP BY c.id, c.status HAVING AVG(h.price) > 1000;
SELECT coins.name, historical.date FROM historical JOIN coins ON historical.coin_id = coins.id WHERE historical.percent_change_1h = (     SELECT MIN(percent_change_1h) FROM historical );
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE c.category = 'token' GROUP BY c.name ORDER BY MAX(h.high - h.low) DESC LIMIT 1;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2013-06-22' AND h.percent_change_24h > (     SELECT AVG(percent_change_24h)     FROM historical     WHERE date = '2013-06-22' );
SELECT coins.name FROM coins JOIN historical ON coins.id = historical.coin_id WHERE historical.date = '2013-04-28' AND historical.cmc_rank = 1;
SELECT price FROM historical JOIN coins ON historical.coin_id = coins.id WHERE coins.symbol = 'BTC' AND historical.date = '2013-04-28';
SELECT c.name FROM coins c LEFT JOIN historical h ON c.id = h.coin_id WHERE h.date = '2013-05-03' AND h.open IS NULL;
SELECT close FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin') AND date = '2013-04-29';
SELECT time_high FROM historical WHERE date = '2013-04-29' AND coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin') ORDER BY price DESC LIMIT 1;
SELECT (high - low) AS max_profit FROM historical WHERE date = '2013-04-28' AND coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin')
SELECT (h.max_supply - h.total_supply) AS bitcoins_burned FROM historical h JOIN coins c ON h.coin_id = c.id WHERE c.symbol = 'BTC' AND h.date = '2013-04-28'
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2016-01-08' ORDER BY h.volume_24h DESC LIMIT 1;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2013-04-28' AND h.total_supply > 10000000;
SELECT     CASE         WHEN percent_change_7d > 0 THEN 'Increased'         WHEN percent_change_7d < 0 THEN 'Decreased'     END AS price_trend FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin') AND date = '2013-05-05';
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2013-04-28' AND c.name IN ('Bitcoin', 'Litecoin') ORDER BY h.circulating_supply DESC LIMIT 1;
SELECT price FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin') AND date = '2013-04-28';
SELECT AVG(price) FROM historical JOIN coins ON historical.coin_id = coins.id WHERE coins.name = 'Bitcoin' AND YEAR(historical.date) = 2013;
SELECT ((SELECT SUM(max_supply) FROM historical WHERE coin_id = (SELECT id FROM coins WHERE symbol = 'BTC') AND date < '2018-04-28') - (SELECT SUM(total_supply) FROM historical WHERE coin_id = (SELECT id FROM coins WHERE symbol = 'BTC') AND date < '2018-04-28')) / (SELECT SUM(total_supply) FROM historical WHERE coin_id = (SELECT id FROM coins WHERE symbol = 'BTC') AND date < '2018-04-28') * 100 AS percentage_burned;
SELECT name FROM coins WHERE status = 'extinct';
SELECT description FROM coins WHERE name = 'BitBar';
Error: 第 6280 个样本有 2 个SQL。
SELECT name, symbol FROM coins WHERE date_added LIKE '2013-06-14%';
SELECT name FROM coins WHERE status = 'untracked' AND YEAR(date_added) = 2014;
SELECT name FROM coins WHERE LENGTH(tag_names) - LENGTH(REPLACE(tag_names,',','')) = 2;
SELECT name FROM coins WHERE id = (SELECT coin_id FROM historical ORDER BY price DESC LIMIT 1);
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2013-04-29' AND h.cmc_rank = 1;
SELECT historical.date, MIN(historical.low) as lowest_price FROM historical JOIN coins ON historical.coin_id = coins.id WHERE coins.name = 'Bitcoin' GROUP BY historical.date ORDER BY lowest_price ASC LIMIT 1;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = (SELECT MAX(date) FROM historical) ORDER BY h.volume_24h DESC LIMIT 1;
SELECT c.name FROM coins c LEFT JOIN historical h ON c.id = h.coin_id WHERE h.open IS NULL AND YEAR(h.date) = 2013 AND MONTH(h.date) = 5;
Error: 第 6289 个样本有 2 个SQL。
SELECT date FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Peercoin') AND cmc_rank = 5;
SELECT date FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Devcoin') ORDER BY market_cap DESC LIMIT 1;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2014-01-01' AND h.cmc_rank <= 5;
SELECT date FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Lebowskis') AND open IS NULL;
SELECT date FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Terracoin') ORDER BY price DESC LIMIT 1;
SELECT COUNT(*) FROM historical JOIN coins ON historical.coin_id = coins.id WHERE coins.name = 'Bytecoin' AND YEAR(historical.date) = 2013 AND MONTH(historical.date) = 6;
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2013-04-28' AND h.price > (SELECT AVG(price) FROM historical WHERE date = '2013-04-28')
SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = '2013-05-29' AND h.percent_change_1h > 0;
SELECT COUNT(*) FROM Employees WHERE TitleOfCourtesy = 'Dr.';
SELECT E.FirstName, E.LastName FROM Employees E WHERE E.EmployeeID = (     SELECT ReportsTo     FROM Employees     WHERE FirstName = 'Nancy' AND LastName = 'Davolio' );
SELECT HomePhone FROM Employees WHERE FirstName = 'Nancy' AND LastName = 'Davolio';
SELECT COUNT(*) FROM Employees WHERE ReportsTo = (SELECT EmployeeID FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew');
SELECT FirstName, LastName FROM Employees WHERE EmployeeID = (SELECT EmployeeID FROM Employees WHERE Salary = (SELECT MAX(Salary) FROM Employees));
SELECT (SELECT Salary FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew') -        (SELECT Salary FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy') AS SalaryDifference;
SELECT COUNT(*) FROM Employees WHERE Title = 'Sales Representative' AND Country = 'UK';
SELECT E.FirstName, E.LastName FROM Employees E JOIN Territories T ON E.EmployeeID = T.EmployeeID WHERE T.TerritoryDescription = 'Hollis';
SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio'
SELECT T3.TerritoryDescription FROM Employees AS T1 JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio';
SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.City = 'London';
SELECT DISTINCT t.TerritoryDescription FROM Territories t JOIN Employees e ON t.EmployeeID = e.EmployeeID WHERE e.ReportsTo = (     SELECT EmployeeID     FROM Employees     WHERE FirstName = 'Andrew' AND LastName = 'Fuller' );
Error: 第 6310 个样本有 2 个SQL。
SELECT COUNT(T1.TerritoryID) FROM Territories T1 JOIN Region T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern';
SELECT t.TerritoryDescription FROM Territories t JOIN Region r ON t.RegionID = r.RegionID WHERE r.RegionDescription = 'Eastern';
Error: 第 6313 个样本有 2 个SQL。
SELECT E.HomePhone FROM Employees E JOIN EmployeeTerritories ET ON E.EmployeeID = ET.EmployeeID JOIN Territories T ON ET.TerritoryID = T.TerritoryID JOIN Region R ON T.RegionID = R.RegionID WHERE R.RegionDescription = 'Eastern'
SELECT     (SELECT COUNT(*) FROM Territories WHERE RegionDescription = 'Eastern') -     (SELECT COUNT(*) FROM Territories WHERE RegionDescription = 'Southern') AS Difference;
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE od.OrderID = 10248;
SELECT od.Quantity FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Ikura' AND od.OrderID = 10273;
SELECT od.Quantity * p.Price AS TotalPrice FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Ikura' AND od.OrderID = 10273;
SELECT SUM(T2.UnitsInStock + T2.UnitsOnOrder) AS TotalProduction FROM `OrderDetails` T1 JOIN `Products` T2 ON T1.ProductID = T2.ProductID WHERE T1.OrderID = 10248 GROUP BY T1.ProductID ORDER BY T1.Quantity DESC LIMIT 1;
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE od.OrderID = 10248 ORDER BY p.ReorderLevel DESC LIMIT 1;
SELECT COUNT(*) FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Tofu';
SELECT od.OrderID FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1;
SELECT COUNT(*) FROM `OrderDetails` JOIN `Products` ON `OrderDetails`.`ProductID` = `Products`.`ProductID` WHERE `Products`.`ProductName` = 'Ikura' AND `OrderDetails`.`UnitPrice` < `Products`.`Price`;
SELECT T2.CompanyName FROM Products AS T1 JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Aniseed Syrup'
SELECT ProductName FROM Products WHERE SupplierID IN (     SELECT SupplierID     FROM Suppliers     WHERE Country = 'Japan' );
SELECT DISTINCT S.Phone FROM Suppliers S JOIN Products P ON S.SupplierID = P.SupplierID WHERE P.UnitsInStock < P.UnitsOnOrder;
SELECT COUNT(*) FROM Products WHERE Discontinued = 1 AND SupplierID IN (     SELECT SupplierID     FROM Suppliers     WHERE Country = 'USA' );
SELECT S.CompanyName FROM Suppliers S JOIN Products P ON S.SupplierID = P.SupplierID WHERE P.UnitPrice = (SELECT MAX(UnitPrice) FROM Products);
SELECT AVG(E.Salary) FROM Employees E WHERE E.EmployeeID IN (     SELECT T.EmployeeID     FROM Territories T     GROUP BY T.EmployeeID     HAVING COUNT(T.TerritoryID) > 4 );
SELECT (100 * (p.UnitPrice - od.UnitPrice) / p.UnitPrice) AS PercentageDifference FROM Products p JOIN `OrderDetails` od ON p.ProductID = od.ProductID WHERE p.ProductName = 'Ikura' AND od.OrderID = 10273;
SELECT AVG(od.Quantity) FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Ikura';
SELECT TOP 1 p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE od.OrderID = 10248 ORDER BY (p.UnitsOnOrder / ISNULL(p.UnitsInStock, 1)) DESC
SELECT FirstName, LastName FROM Employees WHERE BirthDate = (SELECT MAX(BirthDate) FROM Employees);
SELECT FirstName, LastName FROM Employees ORDER BY HireDate DESC LIMIT 1;
SELECT COUNT(*) FROM Orders WHERE EmployeeID = (SELECT EmployeeID FROM Employees WHERE FirstName = 'Michael' AND LastName = 'Suyama');
SELECT T2.TerritoryDescription FROM Employees AS T1 JOIN Territories AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.TitleOfCourtesy = 'Mr.' AND T1.FirstName = 'Robert' AND T1.LastName = 'King';
Error: 第 6337 个样本有 2 个SQL。
SELECT E.FirstName, E.LastName FROM Employees E JOIN EmployeeTerritories ET ON E.EmployeeID = ET.EmployeeID JOIN Territories T ON ET.TerritoryID = T.TerritoryID WHERE T.TerritoryDescription = 'Santa Monica';
SELECT E.HomePhone FROM Employees E JOIN EmployeeTerritories ET ON E.EmployeeID = ET.EmployeeID JOIN Territories T ON ET.TerritoryID = T.TerritoryID WHERE T.TerritoryDescription = 'Savannah';
SELECT SUM(od.Quantity) FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID WHERE o.CustomerID = 'HILAA' AND o.OrderDate = '1997-12-25';
SELECT COUNT(T2.ProductID) FROM Orders AS T1 JOIN OrderDetails AS T2 ON T1.OrderID = T2.OrderID WHERE T1.Freight = (SELECT MAX(Freight) FROM Orders);
SELECT Shippers.ShipName FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Orders.OrderID = 10585;
SELECT COUNT(*) FROM Orders WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE CompanyName = 'Federal Shipping');
SELECT COUNT(DISTINCT ProductID) FROM Products JOIN Categories ON Products.CategoryID = Categories.CategoryID WHERE Categories.CategoryName = 'dairy products';
SELECT Categories.CategoryName FROM Categories JOIN Products ON Categories.CategoryID = Products.CategoryID WHERE Products.ProductName = 'Tofu';
SELECT SUM(T1.UnitsInStock + T1.UnitsOnOrder) AS TotalProduction FROM Products AS T1 JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Escargots Nouveaux';
SELECT T1.ReorderLevel FROM Products AS T1 JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Nord-Ost-Fisch Handelsgesellschaft mbH'
SELECT COUNT(DISTINCT p.ProductID) FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.CompanyName = 'Karkki Oy';
SELECT T2.ContactName FROM Products AS T1 JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Gudbrandsdalsost'
SELECT Country FROM Suppliers WHERE SupplierID = (SELECT SupplierID FROM Products WHERE ProductName = 'Scottish Longbreads');
SELECT COUNT(*) FROM Territories WHERE RegionID = (SELECT RegionID FROM Region WHERE RegionDescription = 'Northern')
SELECT RegionID FROM Territories WHERE TerritoryDescription = 'Columbia'
SELECT     (COUNT(CASE WHEN s.ShipperName = 'United Package' THEN o.OrderID ELSE NULL END) * 100.0 / COUNT(o.OrderID)) AS Percentage FROM     Orders o JOIN     Shippers s ON o.ShipperID = s.ShipperID WHERE     o.CustomerID = 'WHITC'
SELECT     ((SELECT COUNT(o.OrderID) FROM Orders o JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.CompanyName = 'United Package') -      (SELECT COUNT(o2.OrderID) FROM Orders o2 JOIN Shippers s2 ON o2.ShipperID = s2.ShipperID WHERE s2.CompanyName = 'Speedy Express')) * 100.0 /      (SELECT COUNT(o3.OrderID) FROM Orders o3 JOIN Shippers s3 ON o3.ShipperID = s3.ShipperID WHERE s3.CompanyName = 'Speedy Express') AS PercentageMoreOrders
SELECT     (SELECT COUNT(TerritoryDescription) FROM Territories WHERE RegionDescription = 'Eastern') /     (SELECT COUNT(TerritoryDescription) FROM Territories WHERE RegionDescription = 'Southern') AS Times;
SELECT COUNT(CustomerID) AS NumberOfCustomers FROM Customers WHERE Country = (     SELECT Country     FROM Customers     GROUP BY Country     ORDER BY COUNT(CustomerID) DESC     LIMIT 1 )
SELECT OrderID FROM Orders WHERE Freight > 800;
SELECT Address, City, Region, Country, PostalCode FROM Customers WHERE CompanyName = 'Island Trading';
SELECT ProductName FROM Products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM Products);
SELECT COUNT(*) FROM Suppliers WHERE Country = 'USA';
SELECT ProductName FROM Products WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products);
SELECT FirstName, LastName FROM Employees WHERE Salary = (SELECT MAX(Salary) FROM Employees);
SELECT ProductName FROM Products WHERE Discontinued = 1;
SELECT AVG(Salary) FROM Employees WHERE Title = 'Sales Representative' AND Country = 'UK';
SELECT Shippers.ShipperName FROM Orders JOIN Shippers ON Orders.ShipVia = Shippers.ShipperID WHERE Orders.ShipCountry = 'USA' GROUP BY Shippers.ShipperID ORDER BY COUNT(Orders.OrderID) DESC LIMIT 1;
SELECT COUNT(*) FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Pavlova, Ltd.');
SELECT COUNT(*) FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Orders.CustomerID = 'GREAL' AND Shippers.CompanyName = 'United Package';
SELECT S.SupplierName FROM Suppliers S JOIN Products P ON S.SupplierID = P.SupplierID WHERE P.ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products);
SELECT COUNT(*) FROM Orders WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE CompanyName = 'United Package');
SELECT COUNT(*) FROM Suppliers JOIN Products ON Suppliers.SupplierID = Products.SupplierID WHERE Suppliers.Country = 'Australia' AND Products.Discontinued = 1;
SELECT SUM(od.UnitPrice * od.Quantity + o.Freight) AS TotalPrice FROM (     SELECT TOP 2 *     FROM Products     ORDER BY UnitPrice DESC ) AS p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON o.OrderID = od.OrderID GROUP BY o.Freight;
SELECT s.SupplierName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.SupplierName ORDER BY COUNT(p.ProductID) DESC LIMIT 1;
SELECT ProductName FROM Products WHERE ProductID IN (     SELECT ProductID     FROM OrderDetails     WHERE UnitPrice <= 5 );
SELECT E.FirstName, E.LastName FROM Employees E JOIN (     SELECT EmployeeID, COUNT(*) as TerritoryCount     FROM EmployeeTerritories     GROUP BY EmployeeID ) ET ON E.EmployeeID = ET.EmployeeID WHERE ET.TerritoryCount = (     SELECT MAX(TerritoryCount)     FROM (         SELECT COUNT(*) as TerritoryCount         FROM EmployeeTerritories         GROUP BY EmployeeID     ) );
SELECT TOP 1 p.ProductName, SUM(od.Quantity) as TotalQuantity FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalQuantity DESC
SELECT T2.TerritoryDescription FROM Employees AS T1 JOIN EmployeeTerritories AS T3 ON T1.EmployeeID = T3.EmployeeID JOIN Territories AS T2 ON T3.TerritoryID = T2.TerritoryID WHERE T1.TitleOfCourtesy = 'Dr.';
SELECT t.TerritoryDescription FROM Territories t JOIN Region r ON t.RegionID = r.RegionID WHERE r.RegionDescription = 'Eastern';
SELECT COUNT(Territories.TerritoryID) / COUNT(DISTINCT(Employees.EmployeeID)) AS AverageTerritoriesPerSalesRep FROM Employees JOIN EmployeeTerritories ON Employees.EmployeeID = EmployeeTerritories.EmployeeID JOIN Territories ON EmployeeTerritories.TerritoryID = Territories.TerritoryID WHERE Employees.Title = 'Sales Representative';
SELECT p.ProductName FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Beverages' ORDER BY p.ReorderLevel DESC LIMIT 1;
SELECT E.FirstName, E.LastName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID GROUP BY E.EmployeeID, E.FirstName, E.LastName ORDER BY COUNT(O.OrderID) DESC LIMIT 1;
SELECT COUNT(od.ProductID) FROM OrderDetails od JOIN Orders o ON od.OrderID = o.OrderID WHERE o.Freight = (SELECT MAX(Freight) FROM Orders)
SELECT p.ProductName FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Seafood' ORDER BY (p.UnitsInStock + p.UnitsOnOrder) DESC LIMIT 1;
WITH EmployeeTerritories AS (   SELECT EmployeeID, COUNT(TerritoryID) AS NumTerritories   FROM Employees   JOIN EmployeeTerritories ON Employees.EmployeeID = EmployeeTerritories.EmployeeID   GROUP BY EmployeeID ), TopEmployees AS (   SELECT EmployeeID   FROM EmployeeTerritories   ORDER BY NumTerritories DESC   LIMIT 2 ) SELECT (SELECT Salary FROM Employees WHERE EmployeeID = TopEmployees.EmployeeID ORDER BY NumTerritories DESC LIMIT 1)        - (SELECT Salary FROM Employees WHERE EmployeeID = TopEmployees.EmployeeID ORDER BY NumTerritories DESC LIMIT 1 OFFSET 1) FROM TopEmployees;
SELECT AVG(UnitPrice) FROM Products WHERE UnitsInStock > 50;
SELECT T1.CompanyName FROM Customers AS T1 WHERE T1.City = (SELECT T2.City FROM Customers AS T2 GROUP BY T2.City ORDER BY COUNT(T2.CustomerID) DESC LIMIT 1)
SELECT CustomerName, ContactName, ContactTitle FROM Customers WHERE City = 'Madrid';
SELECT CONCAT(FirstName, ' ', LastName) AS FullName, Phone AS ContactNumber FROM Employees ORDER BY BirthDate ASC;
Error: 第 6388 个样本有 2 个SQL。
SELECT T3.ProductName, SUM(T2.Quantity) AS TotalQuantity FROM Orders AS T1 JOIN OrderDetails AS T2 ON T1.OrderID = T2.OrderID JOIN Products AS T3 ON T2.ProductID = T3.ProductID GROUP BY T3.ProductName ORDER BY TotalQuantity DESC LIMIT 1;
SELECT DISTINCT s.SupplierName, s.Address, s.Phone FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.UnitPrice > 30;
SELECT c.CustomerName, c.Address FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE o.Freight > (SELECT AVG(Freight) FROM Orders) GROUP BY c.CustomerName, c.Address;
SELECT E.FirstName, E.LastName FROM Employees E JOIN EmployeeTerritories ET ON E.EmployeeID = ET.EmployeeID JOIN Territories T ON ET.TerritoryID = T.TerritoryID WHERE T.TerritoryDescription = 'Wilton';
Error: 第 6393 个样本有 2 个SQL。
SELECT TOP 5 p.ProductName, SUM(od.Quantity * p.Price) as TotalCost FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON o.OrderID = od.OrderID WHERE o.OrderDate >= '1998-01-01 00:00:00' AND o.OrderDate < '1999-01-01 00:00:00' GROUP BY p.ProductName, p.Price ORDER BY TotalCost DESC;
SELECT COUNT(*) FROM (     SELECT DISTINCT Orders.CustomerID     FROM Orders     JOIN Customers ON Orders.CustomerID = Customers.CustomerID     JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID     WHERE Customers.Country = 'Canada' AND Shippers.ShipperName = 'Federal Shipping' ) AS SubQuery;
SELECT TOP 10 T3.ProductName FROM OrderDetails AS T1 JOIN Products AS T3 ON T1.ProductID = T3.ProductID GROUP BY T3.ProductName ORDER BY COUNT(T1.OrderID) DESC;
SELECT SupplierID, COUNT(ProductID) as ProductCount FROM Products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;
SELECT E.FirstName, E.LastName, T.RegionDescription FROM Employees E LEFT JOIN Territories T ON E.EmployeeID = T.EmployeeID ORDER BY E.FirstName, E.LastName;
SELECT E.FirstName, E.LastName, E.Title, E.Address FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE O.OrderDate >= '1996-01-01 00:00:00' AND O.OrderDate < '1997-01-01 00:00:00' GROUP BY E.EmployeeID, E.FirstName, E.LastName, E.Title, E.Address ORDER BY COUNT(O.OrderID) DESC LIMIT 1;
SELECT AVG(UnitPrice) FROM Products JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID JOIN Orders ON OrderDetails.OrderID = Orders.OrderID JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Shippers.CompanyName = 'United Package' AND Orders.OrderDate >= '1997-01-01 00:00:00' AND Orders.OrderDate < '1998-01-01 00:00:00';
SELECT (COUNT(CASE WHEN Shippers.ShipperName = 'Speedy Express' THEN Orders.OrderID END) * 100.0 / COUNT(Orders.OrderID)) AS Percentage FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID;
SELECT TitleOfCourtesy FROM Employees ORDER BY Salary LIMIT 3;
SELECT E.LastName FROM Employees E WHERE E.ReportsTo = (     SELECT E2.EmployeeID     FROM Employees E2     WHERE E2.Title = 'Vice President, Sales' );
SELECT MAX(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalPrice FROM OrderDetails od;
SELECT TOP 3 p.ProductName FROM Products p GROUP BY p.ProductName ORDER BY SUM(p.UnitsInStock + p.UnitsOnOrder) DESC;
SELECT p.ProductID FROM Products p JOIN (     SELECT TOP 10 ProductID     FROM Products     ORDER BY UnitPrice DESC ) top_products ON p.ProductID = top_products.ProductID JOIN (     SELECT ProductID, SUM(Quantity) as total_quantity     FROM OrderDetails     GROUP BY ProductID ) od ON p.ProductID = od.ProductID ORDER BY od.total_quantity / (p.ReorderLevel * 1.0) ASC LIMIT 10;
SELECT COUNT(*) FROM Products JOIN Categories ON Products.CategoryID = Categories.CategoryID WHERE Categories.CategoryName = 'Dairy Products' AND Products.Discontinued = 0;
SELECT T2.TerritoryDescription FROM Employees AS T1 JOIN EmployeeTerritories AS T3 ON T1.EmployeeID = T3.EmployeeID JOIN Territories AS T2 ON T3.TerritoryID = T2.TerritoryID WHERE T1.Title = 'Inside Sales Coordinator';
SELECT DISTINCT Shippers.ShipperName FROM Shippers JOIN Orders ON Shippers.ShipperID = Orders.ShipVia JOIN `Order Details` ON Orders.OrderID = `Order Details`.OrderID WHERE (Orders.Freight + (SELECT SUM(`Order Details`.UnitPrice * `Order Details`.Quantity)                          FROM `Order Details`                          WHERE `Order Details`.OrderID = Orders.OrderID)) > 2000000;
SELECT s.ShipperName, COUNT(*) as TotalShipments FROM Orders o JOIN Shippers s ON o.ShipVia = s.ShipperID WHERE o.ShipCity = 'Aachen' GROUP BY s.ShipperName ORDER BY TotalShipments DESC LIMIT 1;
Error: 第 6411 个样本有 2 个SQL。
SELECT T2.ContactName FROM Suppliers AS T2 JOIN Products AS T1 ON T2.SupplierID = T1.SupplierID WHERE T1.ProductName = 'Pavlova'
SELECT P.ProductName FROM Products P JOIN OrderDetails OD ON P.ProductID = OD.ProductID JOIN Orders O ON OD.OrderID = O.OrderID WHERE O.ShipCity = 'Paris';
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID WHERE o.ShipPostalCode = '28023' GROUP BY p.ProductName ORDER BY SUM(od.Quantity) ASC LIMIT 1;
SELECT E.FirstName, E.LastName FROM Employees E JOIN EmployeeTerritories ET ON E.EmployeeID = ET.EmployeeID JOIN Territories T ON ET.TerritoryID = T.TerritoryID JOIN Region R ON T.RegionID = R.RegionID WHERE R.RegionDescription = 'Southern' AND E.ReportsTo = (     SELECT EmployeeID     FROM Employees     WHERE FirstName = 'Andrew' AND LastName = 'Fuller' );
SELECT Orders.OrderDate FROM Orders JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID JOIN Products ON OrderDetails.ProductID = Products.ProductID JOIN Customers ON Orders.CustomerID = Customers.CustomerID WHERE Customers.CustomerName = 'Du monde entier' AND Products.ProductName = 'Filo Mix' AND OrderDetails.Quantity = 9;
SELECT Categories.CategoryName FROM Categories JOIN Products ON Categories.CategoryID = Products.CategoryID JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID WHERE OrderDetails.OrderID = 10933;
SELECT E.HomePhone FROM Employees E JOIN EmployeeTerritories ET ON E.EmployeeID = ET.EmployeeID JOIN Territories T ON ET.TerritoryID = T.TerritoryID WHERE T.TerritoryDescription = 'Portsmouth';
SELECT AVG(od.Quantity) FROM OrderDetails od JOIN Orders o ON od.OrderID = o.OrderID JOIN Shippers s ON o.ShipperID = s.ShipperID WHERE s.CompanyName = 'Federal Shipping' AND DATE(o.ShipDate) >= '1996-11-01' AND DATE(o.ShipDate) < '1996-12-01';
SELECT     (COUNT(CASE WHEN Orders.OrderDate >= '1996-09-01 00:00:00' AND Orders.OrderDate < '1996-10-01 00:00:00' THEN Orders.OrderID ELSE NULL END) * 100.0 /     COUNT(CASE WHEN Orders.OrderDate >= '1996-01-01 00:00:00' AND Orders.OrderDate < '1997-01-01 00:00:00' THEN Orders.OrderID ELSE NULL END)) AS Percentage FROM     Orders JOIN     Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE     Shippers.CompanyName = 'United Package';
SELECT COUNT(*) FROM Suppliers WHERE Country = 'Mexico' AND ContactTitle = 'owner';
SELECT Address, City, PostalCode, Country FROM Customers WHERE ContactName = 'Andr Fonseca';
SELECT CompanyName FROM (     SELECT SupplierName AS CompanyName, Phone FROM Suppliers     UNION ALL     SELECT ShipperName AS CompanyName, Phone FROM Shippers ) AS AllCompanies WHERE Phone LIKE '(171)%';
SELECT     (SELECT COUNT(EmployeeID) FROM Employees WHERE Country = 'UK' AND Title = 'Sales Representative') -     (SELECT COUNT(EmployeeID) FROM Employees WHERE Country = 'USA' AND Title = 'Sales Representative')
SELECT COUNT(*) FROM Employees WHERE ContactTitle = 'Sales Associate' AND City = 'Sao Paulo' AND Country = 'Brazil';
SELECT E.LastName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE O.OrderID = 10521 AND O.CustomerID = 'CACTU';
SELECT od.Quantity * p.Price AS ShippingCost FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE o.OrderID = 10692 AND c.CompanyName = 'Alfreds Futterkiste';
SELECT Shippers.ShipperName FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Orders.OrderID = 10558;
SELECT Orders.OrderID FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Shippers.ShipperName = 'Speedy Express' LIMIT 3;
SELECT ProductName FROM Products JOIN Categories ON Products.CategoryID = Categories.CategoryID WHERE Categories.CategoryName = 'beverages';
SELECT Categories.Description FROM Categories JOIN Products ON Categories.CategoryID = Products.CategoryID WHERE Products.ProductName = 'tofu';
SELECT s.CompanyName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.ProductName = 'Gula Malacca';
SELECT ProductName FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Aux joyeux ecclsiastiques');
SELECT UnitPrice FROM Products WHERE ProductName = 'Konbu' AND SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = "Mayumi's");
SELECT Suppliers.ContactName FROM Suppliers JOIN Products ON Suppliers.SupplierID = Products.SupplierID WHERE Products.ProductName = 'Camembert Pierrot';
SELECT ProductName FROM Products WHERE CategoryID = (SELECT CategoryID FROM Categories WHERE CategoryName = 'Meat/Poultry') AND Discontinued = 1 LIMIT 3;
SELECT p.ProductName FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.CompanyName = 'Heli Swaren GmbH & Co. KG' ORDER BY p.ReorderLevel DESC LIMIT 2;
SELECT ContactName FROM Customers WHERE CustomerName = 'Heli Swaren GmbH & Co. KG';
SELECT Country FROM Suppliers WHERE SupplierName = 'Drachenblut Delikatessen';
SELECT COUNT(DISTINCT Territory) FROM Employees;
SELECT MAX(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalPrice FROM OrderDetails od;
SELECT ProductName FROM Products WHERE Price = (SELECT MAX(Price) FROM Products);
SELECT COUNT(*) FROM Orders WHERE ShipCountry = 'France';
SELECT Region.RegionDescription FROM Region JOIN Territories ON Region.RegionID = Territories.RegionID WHERE Territories.TerritoryDescription = 'Hoffman Estates';
SELECT Suppliers.Homepage FROM Suppliers JOIN Products ON Suppliers.SupplierID = Products.SupplierID WHERE Products.ProductName = 'Thringer Rostbratwurst';
SELECT DISTINCT E.FirstName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE O.ShipCity = 'Reims';
SELECT MAX(od.Quantity) FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Manjimup Dried Apples';
SELECT COUNT(*) FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Shippers.ShipperName = 'Speedy Express';
SELECT TerritoryDescription FROM Territories WHERE RegionID = (     SELECT RegionID     FROM Regions     WHERE RegionDescription = 'Southern' );
SELECT p.UnitPrice FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.Description = 'Cheeses';
SELECT COUNT(OrderID) FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE CustomerName = 'Laughing Bacchus Wine Cellars');
SELECT DISTINCT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE c.Address = 'Starenweg 5';
SELECT ProductName FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Bigfoot Breweries');
SELECT t.TerritoryDescription FROM Territories t JOIN EmployeeTerritories et ON t.TerritoryID = et.TerritoryID JOIN Employees e ON et.EmployeeID = e.EmployeeID WHERE e.LastName = 'King' AND e.FirstName = 'Robert';
SELECT DISTINCT c.ContactName FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE o.ShipCountry = 'Switzerland';
SELECT     (COUNT(CASE WHEN E.Title = 'Sales Representative' THEN O.OrderID END) * 100.0 / COUNT(O.OrderID)) AS Percentage FROM     Orders O JOIN     Employees E ON O.EmployeeID = E.EmployeeID;
SELECT COUNT(*) FROM Employees WHERE Country = 'USA' AND TitleOfCourtesy = 'Dr.';
SELECT AVG(Salary) FROM Employees WHERE EmployeeID BETWEEN 1 AND 9;
SELECT SUM(Salary) AS TotalSalary FROM Employees WHERE Country = 'UK';
SELECT Phone FROM Employees WHERE FirstName = 'Laura' AND LastName = 'Callahan';
SELECT Notes FROM Employees WHERE EmployeeID = (SELECT EmployeeID FROM Employees WHERE Salary = (SELECT MAX(Salary) FROM Employees));
SELECT DISTINCT o.CustomerID FROM Orders o JOIN Employees e ON o.EmployeeID = e.EmployeeID WHERE e.FirstName = 'Michael' AND e.LastName = 'Suyama';
SELECT DISTINCT Orders.ShipCountry FROM Orders JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID WHERE Employees.FirstName = 'Janet' AND Employees.LastName = 'Leverling'
SELECT COUNT(*) FROM Orders WHERE CustomerID = (     SELECT CustomerID     FROM Customers     WHERE ContactName = 'Margaret Peacock' )
SELECT AVG(E.Salary) FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE E.FirstName = 'Andrew' AND E.LastName = 'Fuller';
SELECT ProductName FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Exotic Liquids');
Error: 第 6467 个样本有 2 个SQL。
SELECT COUNT(*) FROM Products WHERE SupplierID = (     SELECT SupplierID     FROM Suppliers     WHERE CompanyName = 'New Orleans Cajun Delights' ) AND Discontinued = 1;
SELECT AVG(UnitPrice) FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Formaggi Fortini s.r.l.')
SELECT COUNT(ProductName) FROM Products WHERE SupplierID IN (     SELECT SupplierID     FROM Suppliers     WHERE Country = 'Japan' );
SELECT T2.ContactName FROM Products AS T1 JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Teatime Chocolate Biscuits';
SELECT SupplierName FROM Suppliers WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM Suppliers);
SELECT T2.ContactTitle FROM Suppliers AS T2 INNER JOIN Products AS T1 ON T2.SupplierID = T1.SupplierID WHERE T1.QuantityPerUnit = '10 boxes x 12 pieces'
SELECT SUM(p.UnitsOnOrder) FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.CompanyName = 'Exotic Liquids';
SELECT (COUNT(CASE WHEN SupplierName = 'Gai pturage' THEN ProductID ELSE NULL END) * 100.0 / COUNT(ProductID)) AS Percentage FROM Products JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID;
SELECT TOP 5 ProductID FROM Products ORDER BY UnitsInStock DESC;
SELECT COUNT(*) FROM Products WHERE Discontinued = 1;
SELECT E.Address, E.HomePhone, E.Salary FROM Employees E WHERE E.Title = 'Sales Manager';
SELECT E.FirstName, E.LastName, E.Photo AS PhotoPath FROM Employees E WHERE E.Title = 'Vice President, Sales';
SELECT TOP 10 c.CompanyName, SUM(od.Quantity * p.Price) AS TotalSales FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Products p ON od.ProductID = p.ProductID GROUP BY c.CompanyName ORDER BY TotalSales DESC;
SELECT Categories.CategoryName, AVG(OrderDetails.Quantity * Products.Price) as AverageSales FROM Categories JOIN Products ON Categories.CategoryID = Products.CategoryID JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID GROUP BY Categories.CategoryName;
SELECT SUM(od.Quantity) FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Uncle Bob''s Organic Dried Pears';
SELECT COUNT(*) FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID JOIN OrderDetails od ON p.ProductID = od.ProductID WHERE c.CategoryName = 'Seafood' AND od.Quantity > 50;
SELECT ProductID, ReorderLevel FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Pavlova, Ltd');
SELECT DISTINCT S.CompanyName FROM Suppliers S JOIN Products P ON S.SupplierID = P.SupplierID WHERE P.Discontinued = 1;
SELECT FirstName, LastName FROM Employees WHERE EmployeeID IN (     SELECT EmployeeID FROM (         SELECT EmployeeID, COUNT(TerritoryID) as TerritoryCount         FROM EmployeeTerritories         GROUP BY EmployeeID     ) as TerritoryCounts     WHERE TerritoryCount < 4 );
SELECT COUNT(*) FROM Employees JOIN EmployeeTerritories ON Employees.EmployeeID = EmployeeTerritories.EmployeeID JOIN Territories ON EmployeeTerritories.TerritoryID = Territories.TerritoryID JOIN Region ON Territories.RegionID = Region.RegionID WHERE Region.RegionDescription = 'Eastern';
SELECT COUNT(*) FROM Orders WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'Federal Shipping') AND ShippedDate BETWEEN '1997-03-01' AND '1997-10-08';
SELECT COUNT(DISTINCT o.CustomerID) FROM Orders o JOIN Employees e ON o.EmployeeID = e.EmployeeID WHERE o.ShipCountry = 'Brazil' AND e.FirstName = 'Margaret' AND e.LastName = 'Peacock' AND o.ShippedDate BETWEEN '1997-03-31' AND '1997-12-10';
SELECT p.ReorderLevel FROM Products p JOIN `Order Details` od ON p.ProductID = od.ProductID WHERE od.Quantity = 1;
SELECT p.ProductName, p.UnitPrice * p.UnitsInStock AS StockValue FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Condiments';
SELECT COUNT(*) FROM Territories t JOIN Employees e ON t.EmployeeID = e.EmployeeID WHERE e.FirstName = 'Anne' AND e.LastName = 'Dodsworth';
SELECT C.CustomerID, MAX(DATEDIFF(day, o.ShippedDate, o.RequiredDate)) AS LongestDelay FROM Orders o JOIN Customers C ON o.CustomerID = C.CustomerID WHERE C.Country = 'USA' AND o.RequiredDate > o.ShippedDate GROUP BY C.CustomerID ORDER BY LongestDelay DESC;
SELECT C.ContactName, C.Phone FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID JOIN OrderDetails OD ON O.OrderID = OD.OrderID WHERE OD.Quantity * OD.UnitPrice * (1 - OD.Discount) = (SELECT MAX(OD2.Quantity * OD2.UnitPrice * (1 - OD2.Discount)) FROM OrderDetails OD2 JOIN Orders O2 ON OD2.OrderID = O2.OrderID JOIN Customers C2 ON O2.CustomerID = C2.CustomerID);
SELECT E.FirstName, E.LastName, E.ReportsTo FROM Employees E INNER JOIN (     SELECT OrderID, MAX(UnitPrice * Quantity * (1 - Discount)) as Payment     FROM OrderDetails     GROUP BY OrderID ) OD ON E.EmployeeID = (     SELECT O.EmployeeID     FROM Orders O     WHERE O.OrderID = OD.OrderID ) WHERE OD.Payment = (     SELECT MAX(Payment)     FROM (         SELECT UnitPrice * Quantity * (1 - Discount) as Payment         FROM OrderDetails     ) AS P );
SELECT COUNT(*) FROM Customers WHERE City = 'Berlin' AND Country = 'Germany';
SELECT COUNT(*) FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Exotic Liquids');
SELECT T2.SupplierName, T1.ProductName FROM Products AS T1 JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = (SELECT MIN(UnitPrice) FROM Products)
SELECT AVG(UnitPrice) FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Tokyo Traders');
SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern';
SELECT r.RegionDescription FROM Region r JOIN Territories t ON r.RegionID = t.RegionID GROUP BY r.RegionDescription ORDER BY COUNT(t.TerritoryID) DESC LIMIT 1;
SELECT Region.RegionDescription FROM Region JOIN Territories ON Region.RegionID = Territories.RegionID WHERE Territories.TerritoryID = 2116;
SELECT     (COUNT(CASE WHEN c.City = 'Madrid' THEN o.OrderID END) * 100.0 / COUNT(o.OrderID)) AS Percentage FROM     Orders o JOIN     Customers c ON o.CustomerID = c.CustomerID WHERE     YEAR(o.OrderDate) = 1996;
SELECT FirstName, LastName FROM Employees;
SELECT FirstName FROM Employees WHERE Salary = (SELECT MAX(Salary) FROM Employees);
SELECT COUNT(*) FROM Employees WHERE Title = 'Sales Representative' AND Salary > 2000;
SELECT COUNT(*) FROM Orders WHERE YEAR(OrderDate) = 1996 AND CustomerID IN (     SELECT CustomerID     FROM Customers     WHERE Country = 'UK' );
SELECT T2.CompanyName FROM Orders AS T1 JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE YEAR(T1.OrderDate) = 1998 GROUP BY T2.CompanyName ORDER BY COUNT(T1.CustomerID) DESC LIMIT 1;
SELECT COUNT(T1.OrderID), T2.Country FROM Orders AS T1 JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE YEAR(T1.OrderDate) = 1996 GROUP BY T2.Country;
SELECT COUNT(*) FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE CompanyName = 'Hanna Moos') AND YEAR(OrderDate) = 1999;
SELECT MIN(DATEDIFF(T2.ShippedDate, T1.OrderDate)) AS FastestShipping FROM Orders AS T1 JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.CustomerID = 'BERGS'
SELECT Customers.CompanyName FROM Orders JOIN Customers ON Orders.CustomerID = Customers.CustomerID WHERE Orders.OrderID = 10257;
SELECT YEAR(OrderDate) FROM Orders WHERE CustomerID = (     SELECT CustomerID     FROM Customers     WHERE CompanyName = 'Around the Horn' ) GROUP BY YEAR(OrderDate) ORDER BY COUNT(OrderID) DESC LIMIT 1;
SELECT COUNT(EmployeeID) FROM Employees WHERE ReportsTo = (     SELECT EmployeeID     FROM Employees     WHERE FirstName = 'Andrew' AND LastName = 'Fuller' );
SELECT Country, COUNT(SupplierID) as SupplierCount FROM Suppliers GROUP BY Country ORDER BY SupplierCount DESC LIMIT 1;
SELECT E.FirstName, E.LastName FROM Employees E WHERE E.ReportsTo = (     SELECT E2.EmployeeID     FROM Employees E2     WHERE E2.Title = 'Sales Manager' );
SELECT COUNT(OrderID) FROM Orders WHERE OrderDate BETWEEN '1996-08-01' AND '1996-08-31' GROUP BY CustomerID ORDER BY COUNT(OrderID) DESC LIMIT 1;
SELECT Salary FROM Employees WHERE HireDate = (SELECT MIN(HireDate) FROM Employees);
SELECT MAX(TIMESTAMPDIFF(YEAR, BirthDate, HireDate)) AS AgeAtHire FROM Employees;
SELECT SUM(od.Quantity * p.UnitPrice) FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1;
SELECT C.CategoryName FROM Categories C JOIN Products P ON C.CategoryID = P.CategoryID WHERE P.Discontinued = 1 GROUP BY C.CategoryName ORDER BY COUNT(P.ProductID) DESC LIMIT 1;
SELECT SUM(od.Quantity) FROM OrderDetails od JOIN Orders o ON od.OrderID = o.OrderID JOIN Products p ON od.ProductID = p.ProductID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Condiments' AND YEAR(o.OrderDate) = 1997;
SELECT TOP 1 c.CustomerName FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN OrderDetails od ON o.OrderID = od.OrderID GROUP BY c.CustomerName ORDER BY SUM(od.Quantity) DESC;
Error: 第 6524 个样本有 2 个SQL。
SELECT ProductName FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'G''day, Mate');
SELECT COUNT(*) FROM (   SELECT TerritoryID   FROM Territories   WHERE RegionID = (     SELECT RegionID     FROM (       SELECT RegionID, COUNT(*) as num_territories       FROM Territories       GROUP BY RegionID       ORDER BY num_territories DESC       LIMIT 1     ) as subquery   ) ) as inner_query;
SELECT T2.CompanyName FROM Products AS T1 JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = (SELECT MAX(UnitPrice) FROM Products);
SELECT COUNT(*) FROM (     SELECT e.EmployeeID     FROM Employees e     INNER JOIN EmployeeTerritories et ON e.EmployeeID = et.EmployeeID     WHERE (e.TitleOfCourtesy = 'Mrs.' OR e.TitleOfCourtesy = 'Ms.')     GROUP BY e.EmployeeID     HAVING COUNT(et.TerritoryID) >= 3 ) AS SubQuery;
SELECT TOP 8 s.SupplierName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE p.ReorderLevel IN (     SELECT MAX(ReorderLevel)     FROM Products     GROUP BY CategoryID ) ORDER BY p.ReorderLevel DESC;
SELECT T3.CompanyName FROM ( SELECT T2.OrderID, SUM(T2.UnitPrice * T2.Quantity) AS TotalAmount FROM `Order Details` AS T2 JOIN Orders AS T1 ON T1.OrderID = T2.OrderID WHERE T1.Discount = 0 GROUP BY T2.OrderID ORDER BY TotalAmount DESC LIMIT 1) AS T4 JOIN Orders AS T1 ON T1.OrderID = T4.OrderID JOIN Customers AS T3 ON T3.CustomerID = T1.CustomerID;
SELECT SUM(od.UnitPrice * od.Quantity) AS TotalSales FROM Orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN Employees e ON o.EmployeeID = e.EmployeeID WHERE e.FirstName = 'Nancy' AND e.LastName = 'Davolio' AND YEAR(o.OrderDate) = 1996 AND MONTH(o.OrderDate) = 12 AND od.Discount = 0;
SELECT SUM(od.Quantity * p.UnitPrice) AS TotalSales FROM `OrderDetails` od JOIN `Orders` o ON od.OrderID = o.OrderID JOIN `Products` p ON od.ProductID = p.ProductID WHERE YEAR(o.OrderDate) = 1997;
SELECT AVG(AnnualSales) AS AverageAnnualSales FROM (     SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AnnualSales     FROM Orders o     JOIN OrderDetails od ON o.OrderID = od.OrderID     WHERE o.ShippedDate BETWEEN '1997-01-01' AND '1998-12-31'     GROUP BY YEAR(o.ShippedDate) ) AS SalesPerYear
SELECT COUNT(*) FROM Orders WHERE ShipCountry = 'Venezuela' AND YEAR(ShippedDate) = 1996;
SELECT CategoryID, Description FROM Categories WHERE CategoryName = 'Condiments';
SELECT od.OrderID, od.ProductID, p.UnitPrice FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE (od.Quantity * p.UnitPrice) > 15000;
SELECT TerritoryID FROM EmployeeTerritories WHERE EmployeeID = 7;
SELECT SupplierName, NULL AS HomepageAddress FROM Suppliers WHERE City = 'Sydney';
SELECT CONCAT(Employee.FirstName, ' ', Employee.LastName) AS FullName,        YEAR(Employee.BirthDate) - YEAR(CURRENT_DATE()) AS AgeWhenHired FROM Employees WHERE Title = 'Vice President, Sales';
SELECT SupplierName FROM Suppliers WHERE Country = 'Germany';
SELECT CONCAT(FirstName, ' ', LastName) AS FullName, (2022 - YEAR(BirthDate)) AS Age FROM Employees WHERE City = 'London';
SELECT CustomerName, Address, Phone, Fax FROM Customers WHERE City = 'London';
SELECT FirstName, LastName, Title FROM Employees WHERE ReportsTo IN (SELECT EmployeeID FROM Employees WHERE Title = 'Sales Manager');
SELECT CustomerName, City FROM Customers WHERE Country = 'Canada';
SELECT SUM(p.UnitsInStock + p.UnitsOnOrder) AS TotalProductionAmount, p.ProductName FROM Products p WHERE p.Unit = '10 - 500 g pkgs.' GROUP BY p.ProductName;
SELECT ProductName, CategoryName FROM Products JOIN Categories ON Products.CategoryID = Categories.CategoryID WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products);
SELECT DISTINCT S.SupplierName, S.City, P.ProductName FROM Suppliers S JOIN Products P ON S.SupplierID = P.SupplierID WHERE (P.UnitsInStock + P.UnitsOnOrder) > 120;
SELECT     s.ContactName,     s.ContactTitle,     p.ProductName FROM     Suppliers s JOIN     Products p ON s.SupplierID = p.SupplierID WHERE     s.CompanyName = 'Escargots Nouveaux';
SELECT Territories.TerritoryID, Territories.TerritoryDescription, Region.RegionDescription FROM Territories JOIN Region ON Territories.RegionID = Region.RegionID JOIN Employees ON Territories.EmployeeID = Employees.EmployeeID WHERE Employees.FirstName = 'Margaret' AND Employees.LastName = 'Peacock';
SELECT p.ProductName FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.Country = 'Spain';
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE c.CustomerID = 'WILMK' AND o.RequiredDate = '1998-03-26 00:00:00';
SELECT ProductID, ProductName FROM Products WHERE CategoryID = (     SELECT CategoryID     FROM Categories     WHERE CategoryName = 'Meat/Poultry' );
SELECT COUNT(*) FROM Orders WHERE CustomerID IN (     SELECT CustomerID     FROM Customers     WHERE Country = 'Ireland' );
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE YEAR(o.OrderDate) = 1996 AND c.Country = 'Norway';
SELECT T3.CompanyName FROM `Orders` AS T1 JOIN `OrderDetails` AS T2 ON T1.OrderID = T2.OrderID JOIN `Suppliers` AS T3 ON T3.SupplierID = T2.ProductID JOIN `Employees` AS T4 ON T1.EmployeeID = T4.EmployeeID WHERE T1.ShipCountry = 'Brazil' AND YEAR(T1.OrderDate) = 1996 AND MONTH(T1.OrderDate) = 12 AND T4.FirstName = 'Anne' AND T4.LastName = 'Dodsworth';
SELECT E.FirstName, E.LastName, E.Title, E.Salary, COUNT(O.OrderID) AS NumberOfOrders FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE E.BirthDate = (SELECT MIN(BirthDate) FROM Employees) AND O.ShipCountry = 'USA' GROUP BY E.FirstName, E.LastName, E.Title, E.Salary;
SELECT TerritoryID, TerritoryDescription FROM Territories WHERE RegionID = (     SELECT RegionID     FROM Regions     WHERE RegionDescription = 'Southern' );
SELECT AVG(od.Quantity * p.Price) AS AveragePaymentPerProduct FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Confections';
SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalPayment FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID WHERE c.City = 'San Francisco';
SELECT p.ProductName, (p.UnitsInStock + p.UnitsOnOrder) as TotalProduction FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.Country = 'Japan';
SELECT p.ProductName, c.CategoryName FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE p.SupplierID IN (     SELECT s.SupplierID     FROM Suppliers s     WHERE s.Country = 'Australia' ) AND p.Discontinued = 1;
SELECT T3.Country, T2.OrderID FROM (     SELECT T1.OrderID, SUM(T1.UnitPrice * T1.Quantity * (1 - T1.Discount)) as TotalPayment     FROM `OrderDetails` T1     JOIN `Orders` T2 ON T1.OrderID = T2.OrderID     GROUP BY T1.OrderID ) AS PaymentSummary JOIN `OrderDetails` T1 ON PaymentSummary.OrderID = T1.OrderID JOIN `Products` T3 ON T1.ProductID = T3.ProductID JOIN `Suppliers` T4 ON T3.SupplierID = T4.SupplierID WHERE T3.ProductName = 'Ipoh Coffee' GROUP BY T3.Country, T2.OrderID HAVING TotalPayment = (SELECT MAX(Payment) FROM PaymentSummary)
SELECT Products.ProductName, SUM(OrderDetails.Quantity * Products.Price) AS TotalPayment FROM OrderDetails JOIN Orders ON OrderDetails.OrderID = Orders.OrderID JOIN Products ON OrderDetails.ProductID = Products.ProductID WHERE Orders.OrderID = 10979 GROUP BY Products.ProductName;
SELECT s.ContactName, s.ContactTitle FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Grains/Cereals' AND s.SupplierID BETWEEN 1 AND 10;
SELECT T1.Phone, COUNT(T2.OrderID) FROM Shippers AS T1 JOIN Orders AS T2 ON T1.ShipperID = T2.ShipperID WHERE T1.CompanyName = 'Speedy Express' AND T2.ShippedDate = '1998-01-30 00:00:00'
SELECT od.ProductID, p.ProductName, MIN(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS OverdueDays FROM OrderDetails od JOIN Orders o ON od.OrderID = o.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE DATEDIFF(o.ShippedDate, o.RequiredDate) < 0 GROUP BY od.ProductID, p.ProductName ORDER BY OverdueDays ASC LIMIT 1;
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Orders o ON od.OrderID = o.OrderID JOIN Employees e ON o.EmployeeID = e.EmployeeID WHERE e.Title = 'Inside Sales Coordinator' AND o.ShipCountry = 'Mexico' AND YEAR(o.ShippedDate) = 1996;
SELECT p.ProductName FROM Products p JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Dairy Products' ORDER BY (SELECT SUM(od.Quantity) FROM OrderDetails od WHERE od.ProductID = p.ProductID) DESC LIMIT 1;
SELECT SUM(p.UnitsInStock + p.UnitsOnOrder) AS ProductionVolume FROM Products p WHERE p.ProductName = 'Mascarpone Fabioli';
SELECT p1.ProductName AS Most_Expensive_Product, c1.CategoryName AS Most_Expensive_Category, p2.ProductName AS Least_Expensive_Product, c2.CategoryName AS Least_Expensive_Category FROM Products p1 JOIN Categories c1 ON p1.CategoryID = c1.CategoryID JOIN Products p2 ON p1.CategoryID = p2.CategoryID JOIN Categories c2 ON p2.CategoryID = c2.CategoryID WHERE p1.UnitPrice = (SELECT MAX(UnitPrice) FROM Products) AND p2.UnitPrice = (SELECT MIN(UnitPrice) FROM Products);
SELECT c.CustomerName, MAX(od.UnitPrice * od.Quantity) as MaxValue FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN `OrderDetails` od ON o.OrderID = od.OrderID GROUP BY c.CustomerName ORDER BY MaxValue DESC LIMIT 1;
Error: 第 6572 个样本有 2 个SQL。
Error: 第 6573 个样本有 2 个SQL。
SELECT (COUNT(CASE WHEN Discontinued = 1 THEN 1 END) * 100.0 / COUNT(ProductID)) AS Percentage_Discontinued FROM Products
SELECT E.FirstName, E.LastName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE O.OrderID = 10274;
SELECT COUNT(*) FROM Orders WHERE CustomerID = (SELECT CustomerID FROM Customers WHERE CompanyName = 'GROSELLA-Restaurante');
SELECT T3.ProductName, T4.Quantity FROM Employees AS T1 JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID JOIN Products AS T3 ON T3.ProductID = T4.ProductID JOIN `Order Details` AS T4 ON T2.OrderID = T4.OrderID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio' AND T2.CustomerID = (     SELECT CustomerID     FROM Customers     WHERE CompanyName = 'GROSELLA-Restaurante' );
SELECT COUNT(T2.OrderID) AS TotalOrders, AVG(T3.UnitPrice * T3.Quantity) AS AverageValue FROM Customers T1 JOIN Orders T2 ON T1.CustomerID = T2.CustomerID JOIN `OrderDetails` T3 ON T2.OrderID = T3.OrderID WHERE T1.CompanyName = 'Laughing Bacchus Wine Cellars';
SELECT SUM(od.Quantity) AS TotalQuantity FROM OrderDetails od JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Pavlova';
SELECT MIN(Salary) AS MinSalary, MAX(Salary) AS MaxSalary FROM Employees WHERE Title = 'Sales Representative';
SELECT COUNT(*) FROM Suppliers WHERE Country = 'USA';
SELECT ProductName FROM Products WHERE Discontinued = 1;
SELECT E.FirstName, E.LastName FROM Employees E JOIN Customers C ON E.EmployeeID = C.CustomerID WHERE C.CompanyName = 'Eastern Connection' AND C.ContactTitle = 'Sales Agent';
SELECT COUNT(DISTINCT ShipperID) FROM Orders;
SELECT     COUNT(o.OrderID) AS TotalOrders,     (COUNT(CASE WHEN o.ShipCountry = 'Austria' THEN o.OrderID END) * 100.0 / COUNT(o.OrderID)) AS PercentageToAustria FROM     Orders o JOIN     Employees e ON o.EmployeeID = e.EmployeeID WHERE     e.FirstName = 'Andrew' AND e.LastName = 'Fuller';
SELECT CategoryName FROM Categories WHERE Description = 'Soft drinks, coffees, teas, beers, and ales';
SELECT Phone FROM Shippers WHERE ShipperName = 'Around the Horn';
SELECT Fax FROM Customers WHERE CompanyName = 'Blondesddsl pre et fils' AND City = 'Strasbourg';
SELECT COUNT(DISTINCT CompanyName) FROM (     SELECT CompanyName FROM Customers WHERE City = 'London'     UNION ALL     SELECT CompanyName FROM Suppliers WHERE City = 'London' ) AS london_companies;
SELECT Address FROM Customers WHERE CustomerName = 'Eastern Connection' AND ContactName = 'Ann Devon';
SELECT SupplierName AS Company FROM Suppliers WHERE Country = 'France' UNION SELECT CustomerName AS Company FROM Customers WHERE Country = 'France';
SELECT COUNT(ProductName) FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Exotic Liquids');
Error: 第 6593 个样本有 2 个SQL。
SELECT TOP 1 s.SupplierName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID WHERE s.City = 'London' GROUP BY s.SupplierName ORDER BY SUM(p.UnitsInStock) DESC
SELECT p.ProductName FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.CompanyName = 'Exotic Liquids' AND p.ReorderLevel = (     SELECT MAX(ReorderLevel)     FROM Products     WHERE SupplierID = (         SELECT SupplierID         FROM Suppliers         WHERE CompanyName = 'Exotic Liquids'     ) );
SELECT Categories.CategoryName FROM Categories JOIN Products ON Categories.CategoryID = Products.CategoryID JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID WHERE Products.ProductName = 'Chef Anton''s Gumbo Mix' AND Suppliers.CompanyName = 'New Orleans Cajun Delights';
SELECT T2.Country FROM Suppliers AS T1 JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.CompanyName = 'Leka Trading' AND T2.ProductName = 'Ipoh Coffee'
SELECT C.CategoryName FROM Categories C JOIN Products P ON C.CategoryID = P.CategoryID WHERE P.ProductName = (     SELECT ProductName     FROM (         SELECT ProductID, SUM(Quantity) AS TotalQuantity         FROM OrderDetails         GROUP BY ProductID         ORDER BY TotalQuantity DESC         LIMIT 1     ) AS SubQuery     JOIN Products ON SubQuery.ProductID = Products.ProductID )
SELECT     (SELECT UnitPrice FROM Products WHERE ProductName = 'Chef Anton\'s Cajun Seasoning') -     (SELECT UnitPrice FROM Products WHERE ProductName = 'Chef Anton\'s Gumbo Mix') AS PriceDifference WHERE     EXISTS(SELECT * FROM Suppliers WHERE Suppliers.CompanyName = 'New Orleans Cajun Delights' AND Suppliers.SupplierID = Products.SupplierID)
SELECT ProductName FROM Products WHERE SupplierID = (     SELECT SupplierID     FROM Suppliers     WHERE CompanyName = 'Cooperativa de Quesos ''Las Cabras''' ) AND UnitPrice > 20;
SELECT p.ProductName FROM Products p JOIN OrderDetails od ON p.ProductID = od.ProductID JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.CompanyName = 'Tokyo Traders' AND od.Quantity > 40;
SELECT Categories.CategoryName FROM Categories JOIN Products ON Categories.CategoryID = Products.CategoryID WHERE Products.SupplierID IN (     SELECT SupplierID     FROM Suppliers     WHERE CompanyName = 'Exotic Liquids' ) AND Products.UnitsInStock > 100;
SELECT     COUNT(DISTINCT P.ProductName) AS NumOfProducts,     (SUM(CASE WHEN OD.Quantity < 50 THEN OD.Quantity ELSE 0 END) * 100 / SUM(OD.Quantity)) AS PercentageLessThan50 FROM     Products P INNER JOIN     OrderDetails OD ON P.ProductID = OD.ProductID;
SELECT     SUM(case when ProductName = 'Geitost' then Quantity else 0 end) as TotalGeitostQuantity,     (SUM(case when ProductName = 'Geitost' then Quantity else 0 end) / SUM(Quantity)) * 100 as PercentageOfTotal FROM     Orders o JOIN     OrderDetails od ON o.OrderID = od.OrderID JOIN     Products p ON od.ProductID = p.ProductID
SELECT Title FROM Employees WHERE FirstName = 'Robert' AND LastName = 'King';
SELECT ShipperName FROM Shippers WHERE Phone = '(503) 555-9931';
SELECT Employees.Address, Employees.HomePhone FROM Employees WHERE Employees.FirstName = 'Margaret' AND Employees.LastName = 'Peacock';
Error: 第 6608 个样本有 3 个SQL。
SELECT ProductName FROM Products WHERE CategoryID = (     SELECT CategoryID     FROM Categories     WHERE CategoryName = 'Confections' );
SELECT Suppliers.CompanyName, Suppliers.ContactName FROM Suppliers JOIN Products ON Suppliers.SupplierID = Products.SupplierID WHERE Products.ProductName = 'Sir Rodney''s Marmalade';
SELECT E.FirstName, E.LastName FROM Employees E JOIN EmployeeTerritories ET ON E.EmployeeID = ET.EmployeeID JOIN Territories T ON ET.TerritoryID = T.TerritoryID WHERE T.TerritoryDescription = 'Denver';
SELECT t.TerritoryDescription FROM Territories t JOIN EmployeeTerritories et ON t.TerritoryID = et.TerritoryID JOIN Employees e ON et.EmployeeID = e.EmployeeID WHERE e.FirstName = 'Laura' AND e.LastName = 'Callahan'
SELECT COUNT(*) FROM Orders WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'Federal Shipping');
SELECT p.ProductName FROM Products p JOIN Suppliers s ON p.SupplierID = s.SupplierID WHERE s.Country = 'Finland';
SELECT Categories.CategoryName, Categories.Description FROM Products JOIN Categories ON Products.CategoryID = Categories.CategoryID WHERE Products.ProductName = 'Mozzarella di Giovanni';
SELECT s.SupplierName FROM Suppliers s JOIN Products p ON s.SupplierID = p.SupplierID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.Description = 'cheeses';
SELECT ProductName FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE CompanyName = 'Zaanse Snoepfabriek');
SELECT ProductName, UnitPrice FROM Products WHERE SupplierID = (     SELECT SupplierID     FROM Suppliers     WHERE CompanyName = 'Plutzer Lebensmittelgromrkte AG' ) AND Discontinued = 1;
SELECT DISTINCT Customers.City FROM Customers JOIN Orders ON Customers.CustomerID = Orders.CustomerID JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID JOIN Products ON OrderDetails.ProductID = Products.ProductID WHERE Products.ProductName = 'Mishi Kobe Niku';
SELECT     (COUNT(CASE WHEN Orders.ShipVia = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'Speedy Express') AND Orders.ShipCountry = 'Sweden' THEN OrderID END) * 100.0 / COUNT(OrderID)) AS Percentage FROM     Orders WHERE     Orders.ShipVia = (SELECT ShipperID FROM Shippers WHERE ShipperName = 'Speedy Express');
SELECT COUNT(*) FROM Territories WHERE RegionID = 1;
SELECT Region, COUNT(TerritoryDescription) AS TotalTerritories FROM Territories GROUP BY Region;
SELECT COUNT(*) FROM Suppliers WHERE Country = 'UK';
SELECT ContactName FROM Suppliers WHERE CompanyName = 'Tokyo Traders';
SELECT COUNT(*) FROM Employees WHERE Country = 'USA' AND Title = 'Sales Representative';
Error: 第 6626 个样本有 2 个SQL。
SELECT COUNT(*) FROM Products WHERE SupplierID = (SELECT SupplierID FROM Suppliers WHERE SupplierName = 'Plutzer Lebensmittelgromrkte AG') AND UnitsInStock = 0 AND UnitsOnOrder > 0;
SELECT P.ProductName, SUM(OD.Quantity) as TotalQuantity FROM Products P JOIN OrderDetails OD ON P.ProductID = OD.ProductID WHERE P.UnitPrice = (SELECT MAX(UnitPrice) FROM Products) GROUP BY P.ProductID;
SELECT E.FirstName, E.LastName, E.Title FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID GROUP BY E.EmployeeID, E.FirstName, E.LastName, E.Title HAVING COUNT(O.OrderID) = (     SELECT MIN(NumOrders)     FROM (         SELECT COUNT(OrderID) AS NumOrders         FROM Orders         GROUP BY EmployeeID     ) AS T );
SELECT T3.ProductName, COUNT(T3.ProductID) AS CommonProduct FROM Orders AS T1 JOIN OrderDetails AS T2 ON T1.OrderID = T2.OrderID JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.CustomerID IN (     SELECT CustomerID     FROM Customers     WHERE Country = 'Germany' ) GROUP BY T3.ProductID ORDER BY CommonProduct DESC LIMIT 1;
SELECT SUM(od.UnitPrice * od.Quantity) FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID WHERE o.ShipCountry = 'Brazil' AND (    SELECT s.CompanyName    FROM Shippers s    WHERE s.ShipperID = o.ShipVia ) = 'Speedy Express';
SELECT     (SELECT COUNT(*) FROM Employees WHERE ReportsTo = 2) AS NumberOfSubordinates,     (SELECT MAX(od.Quantity * p.Price) FROM OrderDetails od      JOIN Orders o ON od.OrderID = o.OrderID      JOIN Employees e ON o.EmployeeID = e.EmployeeID      JOIN Products p ON od.ProductID = p.ProductID      WHERE e.ReportsTo = 2) AS BiggestOrderValue
SELECT E.FirstName, E.LastName, SUM(P.Price * OD.Quantity) AS TotalSales FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID JOIN OrderDetails OD ON O.OrderID = OD.OrderID JOIN Products P ON OD.ProductID = P.ProductID WHERE E.Title = 'Sales Representative' GROUP BY E.EmployeeID, E.FirstName, E.LastName ORDER BY TotalSales DESC LIMIT 1;
SELECT COUNT(EmployeeID), Region FROM Employees WHERE Country = 'UK' GROUP BY Region;
SELECT     c.CustomerName,     o.ShipCountry FROM     Customers c JOIN     Orders o ON c.CustomerID = o.CustomerID JOIN     OrderDetails od ON o.OrderID = od.OrderID JOIN     Products p ON od.ProductID = p.ProductID WHERE     od.Quantity * p.Price = (         SELECT             MAX(od2.Quantity * p2.Price)         FROM             OrderDetails od2         JOIN             Products p2 ON od2.ProductID = p2.ProductID     ) GROUP BY     c.CustomerName, o.ShipCountry;
SELECT     c.CustomerName,     ct.CategoryName FROM     Customers c JOIN     Orders o ON c.CustomerID = o.CustomerID JOIN     OrderDetails od ON o.OrderID = od.OrderID JOIN     Products p ON od.ProductID = p.ProductID JOIN     Categories ct ON p.CategoryID = ct.CategoryID WHERE     c.CustomerID = (         SELECT             sub_c.CustomerID         FROM             Customers sub_c         JOIN             Orders sub_o ON sub_c.CustomerID = sub_o.CustomerID         GROUP BY             sub_c.CustomerID         ORDER BY             COUNT(sub_c.CustomerID) DESC         LIMIT 1     ) GROUP BY     c.CustomerName, ct.CategoryName ORDER BY     COUNT(ct.CategoryID) DESC LIMIT 1;
WITH ConfectionsSales AS (   SELECT od.ProductID, SUM(od.Quantity * p.Price) AS TotalSales   FROM OrderDetails od   JOIN Products p ON od.ProductID = p.ProductID   JOIN Categories c ON p.CategoryID = c.CategoryID   WHERE c.CategoryName = 'Confections'   GROUP BY od.ProductID ) SELECT p.ProductName, MAX(TotalSales) as TotalSales FROM ConfectionsSales cs JOIN Products p ON cs.ProductID = p.ProductID;
SELECT ProductName FROM Products WHERE ProductID = 77;
SELECT SupplierName FROM Suppliers WHERE Country = 'USA';
SELECT Title FROM Employees WHERE FirstName = 'Laura' AND LastName = 'Callahan';
SELECT E.FirstName, E.LastName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID JOIN Customers C ON O.CustomerID = C.CustomerID WHERE C.CompanyName = 'Victuailles en stock'
SELECT COUNT(*) FROM Orders WHERE ShipperID = (SELECT ShipperID FROM Shippers WHERE CompanyName = 'Federal Shipping');
SELECT E.FirstName, E.LastName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID JOIN Customers C ON O.CustomerID = C.CustomerID WHERE C.City = 'Morristown';
SELECT TerritoryDescription FROM Territories WHERE RegionID = (     SELECT RegionID     FROM Regions     WHERE RegionDescription = 'Northern' );
SELECT COUNT(OrderID), OrderID FROM Orders JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID WHERE Employees.FirstName = 'Michael' AND Employees.LastName = 'Suyama';
SELECT     (SELECT COUNT(*) FROM Territories WHERE RegionID = 3) /     (SELECT COUNT(*) FROM Territories WHERE RegionID = 2) AS Ratio
SELECT EmployeeID FROM Employees WHERE EXISTS (     SELECT * FROM EmployeeTerritories     WHERE Employees.EmployeeID = EmployeeTerritories.EmployeeID     AND TerritoryID BETWEEN 1000 AND 2000 );
SELECT T3.TerritoryID, T3.TerritoryDescription, T2.RegionDescription FROM Employees AS T1 JOIN EmployeeTerritories AS T4 ON T1.EmployeeID = T4.EmployeeID JOIN Territories AS T3 ON T4.TerritoryID = T3.TerritoryID JOIN Region AS T2 ON T3.RegionID = T2.RegionID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio';
SELECT E.FirstName, E.LastName, COUNT(O.OrderID) as NumberOfOrders FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE E.Title = 'Sales Representative' AND YEAR(E.HireDate) = 1992 GROUP BY E.EmployeeID, E.FirstName, E.LastName ORDER BY NumberOfOrders DESC;
SELECT SUM(od.Quantity * p.UnitPrice * (1 - od.Discount)) AS TotalPayment FROM OrderDetails od JOIN Orders o ON od.OrderID = o.OrderID JOIN Products p ON od.ProductID = p.ProductID WHERE p.ProductName = 'Vegie-spread';
SELECT DISTINCT Suppliers.SupplierName FROM Suppliers JOIN Products ON Suppliers.SupplierID = Products.SupplierID JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID JOIN Orders ON OrderDetails.OrderID = Orders.OrderID WHERE Orders.OrderDate = '1996-08-14';
SELECT P.ProductName, S.CompanyName FROM Products P JOIN Suppliers S ON P.SupplierID = S.SupplierID WHERE P.ReorderLevel = (SELECT MAX(ReorderLevel) FROM Products WHERE ProductID IN (SELECT ProductID FROM [OrderDetails] WHERE OrderID = 10337)) AND P.ProductID IN (SELECT ProductID FROM [OrderDetails] WHERE OrderID = 10337);
SELECT Shippers.CompanyName FROM Orders JOIN Shippers ON Orders.ShipVia = Shippers.ShipperID WHERE DATEPART(quarter, Orders.ShippedDate) = 1 AND YEAR(Orders.ShippedDate) = 1998 GROUP BY Shippers.CompanyName ORDER BY COUNT(Orders.OrderID) DESC LIMIT 1;
SELECT COUNT(*) FROM Customers WHERE City = 'London';
SELECT Title FROM Employees WHERE FirstName = 'Michael' AND LastName = 'Suyama'
SELECT FirstName, LastName FROM Employees WHERE BirthDate = '1955-03-04';
SELECT E.FirstName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE O.OrderID = 10250;
SELECT COUNT(*) FROM Orders WHERE EmployeeID IN (     SELECT EmployeeID     FROM Employees     WHERE City = 'Tacoma' );
SELECT Employees.Country FROM Employees JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID WHERE Orders.OrderID = 10257;
SELECT E.FirstName, E.LastName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE O.OrderID = 10270;
SELECT T1.Phone FROM Customers AS T1 JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10264;
SELECT C.Country FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID WHERE O.OrderID = 10276;
SELECT e.EmployeeID, e.LastName, e.FirstName, MAX(e.Salary) AS HighestSalary, AVG(e.Salary) AS AverageSalary FROM Employees e INNER JOIN Orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShipCountry = 'Brazil' GROUP BY e.EmployeeID, e.LastName, e.FirstName ORDER BY e.Salary DESC LIMIT 1;
SELECT     (SUM(CASE WHEN EXTRACT(YEAR FROM o.OrderDate) = 1996 THEN e.Salary ELSE 0 END) / SUM(e.Salary)) * 100 AS percentage_salary FROM     Employees e     INNER JOIN Orders o ON e.EmployeeID = o.EmployeeID;
SELECT Employees.HireDate FROM Employees JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID WHERE Orders.OrderID = 10281;
SELECT COUNT(*) FROM Orders WHERE EmployeeID IN (     SELECT EmployeeID     FROM Employees     WHERE ReportsTo = 5 );
SELECT E.FirstName, E.LastName FROM Employees E JOIN Orders O ON E.EmployeeID = O.EmployeeID WHERE O.OrderID = 10280;
SELECT Shippers.CompanyName FROM Orders JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID WHERE Orders.OrderID = 10260;
SELECT COUNT(*) FROM Orders WHERE ShipVia = (SELECT ShipperID FROM Shippers WHERE CompanyName = 'United Package');
SELECT T2.Phone FROM Orders AS T1 JOIN Shippers AS T2 ON T1.ShipperID = T2.ShipperID WHERE T1.OrderID = 10296;
SELECT COUNT(DISTINCT l_linenumber) FROM lineitem WHERE l_orderkey = 5 AND l_returnflag = 'R';
SELECT MAX(l_shipdate) FROM lineitem WHERE l_orderkey = 1;
SELECT o_orderkey FROM orders WHERE o_orderkey IN (4, 36) ORDER BY o_orderdate LIMIT 1;
SELECT o_comment FROM orders WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders);
SELECT c_phone FROM customer WHERE c_name = 'Customer#000000001'
SELECT COUNT(o_orderkey) FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey WHERE customer.c_mktsegment = 'HOUSEHOLD';
SELECT MAX(o_totalprice) FROM orders WHERE o_custkey IN (SELECT c_custkey FROM customer WHERE c_mktsegment = 'HOUSEHOLD');
SELECT o_comment FROM orders WHERE o_custkey IN (SELECT c_custkey FROM customer WHERE c_mktsegment = 'HOUSEHOLD');
SELECT c_name FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders LIMIT 1);
SELECT o_orderkey FROM orders WHERE o_custkey IN (     SELECT c_custkey     FROM customer     WHERE c_acctbal < 0 );
SELECT COUNT(o_orderkey) FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey WHERE customer.c_mktsegment = 'HOUSEHOLD' AND orders.o_orderpriority = '1-URGENT';
SELECT COUNT(*) FROM customer WHERE c_nationkey IN (     SELECT n_nationkey     FROM nation     WHERE n_name = 'BRAZIL' );
SELECT c_phone FROM customer WHERE c_mktsegment = 'HOUSEHOLD' AND c_nationkey IN (     SELECT n_nationkey     FROM nation     WHERE n_name = 'BRAZIL' );
SELECT COUNT(*) FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'GERMANY' AND customer.c_acctbal > 1000;
SELECT COUNT(*) FROM orders WHERE o_custkey IN (     SELECT c_custkey     FROM customer     WHERE c_nationkey IN (         SELECT n_nationkey         FROM nation         WHERE n_name = 'GERMANY'     ) );
SELECT SUM(o_totalprice) FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'GERMANY';
Error: 第 6687 个样本有 2 个SQL。
SELECT AVG(o_totalprice) FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'GERMANY';
SELECT (COUNT(c.c_custkey) FILTER (WHERE n.n_name = 'GERMANY')) * 100.0 / COUNT(c.c_custkey) AS percentage FROM customer c JOIN nation n ON c.c_nationkey = n.n_nationkey;
SELECT COUNT(*) FROM nation WHERE n_regionkey = 2;
SELECT n_name FROM nation JOIN supplier ON nation.n_nationkey = supplier.s_nationkey WHERE supplier.s_suppkey = 34;
SELECT r_name FROM region WHERE r_regionkey = (     SELECT n_regionkey     FROM nation     WHERE n_nationkey = (         SELECT s_nationkey         FROM supplier         WHERE s_name = 'Supplier#000000129'     ) );
SELECT n_name FROM nation JOIN customer ON nation.n_nationkey = customer.c_nationkey WHERE customer.c_name = 'Customer#000000055';
SELECT r_name FROM region WHERE r_regionkey = (     SELECT n_regionkey     FROM nation     WHERE n_nationkey = (         SELECT c_nationkey         FROM customer         WHERE c_name = 'Customer#00106936'     ) );
SELECT COUNT(*) FROM customer WHERE c_acctbal < 0 AND c_nationkey IN (     SELECT n_nationkey     FROM nation     WHERE n_name = 'MOROCCO' );
Error: 第 6696 个样本有 3 个SQL。
SELECT T2.l_suppkey FROM orders AS T1 JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_totalprice = 218195.43 AND T2.l_returnflag = 'R'
Error: 第 6698 个样本有 2 个SQL。
SELECT MIN(DATEDIFF(l_receiptdate, l_commitdate)) FROM orders JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE o_orderdate = '1996-07-27' AND o_custkey = 129301;
SELECT c_name FROM customer JOIN orders ON c_custkey = o_custkey WHERE o_clerk = 'Clerk#000000803' AND o_orderdate = '1997-12-10'
SELECT (l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity) AS Profit FROM lineitem, partsupp WHERE l_suppkey = 7414 AND l_orderkey = 817154 AND l_suppkey = ps_suppkey AND l_partkey = ps_partkey;
SELECT n_name FROM nation N JOIN supplier S ON N.n_nationkey = S.s_nationkey WHERE S.s_acctbal < 0 GROUP BY n_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT CAST(SUM(CASE WHEN r_name = 'EUROPE' THEN 1 ELSE 0 END) AS REAL) / COUNT(n_nationkey) * 100 AS percentage FROM nation n JOIN region r ON n.n_regionkey = r.r_regionkey;
SELECT CAST(SUM(CASE WHEN s_acctbal < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(s_name) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'JAPAN';
SELECT c_name FROM customer WHERE c_acctbal = (SELECT MIN(c_acctbal) FROM customer);
SELECT COUNT(*) FROM orders WHERE o_orderkey IN (     SELECT l_orderkey     FROM lineitem     WHERE YEAR(l_shipdate) = 1998 );
SELECT COUNT(c_custkey) FROM customer WHERE c_acctbal < 0;
SELECT COUNT(l_linenumber) FROM lineitem WHERE l_returnflag = 'R' AND YEAR(l_shipdate) = 1994 AND l_shipmode = 'AIR';
SELECT COUNT(*) FROM customer WHERE c_mktsegment = 'AUTOMOBILE';
SELECT o_orderkey FROM orders WHERE o_orderkey IN (     SELECT l_orderkey     FROM lineitem     WHERE l_extendedprice = (         SELECT MAX(l_extendedprice)         FROM lineitem     ) ) ORDER BY o_orderkey DESC LIMIT 2;
SELECT o_orderdate FROM orders WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders)
SELECT n.n_name FROM nation n JOIN customer c ON n.n_nationkey = c.c_nationkey GROUP BY n.n_name ORDER BY COUNT(c.c_custkey) DESC LIMIT 1;
SELECT COUNT(*) FROM orders JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE orders.o_orderpriority = '1-URGENT' AND DATEDIFF(lineitem.l_shipdate, orders.o_orderdate) = 1;
SELECT COUNT(*) FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE customer.c_acctbal < 0 AND customer.c_mktsegment = 'HOUSEHOLD' AND nation.n_name = 'RUSSIA';
SELECT COUNT(*) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'JAPAN';
SELECT COUNT(*) FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE l.l_shipmode = 'SHIP' AND o.o_orderpriority = '3-MEDIUM';
SELECT c_mktsegment, COUNT(c_custkey) AS num_customers FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'UNITED STATES' GROUP BY c_mktsegment ORDER BY num_customers DESC LIMIT 1;
SELECT n_name FROM nation JOIN region ON nation.n_regionkey = region.r_regionkey WHERE r_name = 'ASIA';
SELECT p_name FROM part JOIN partsupp ON part.p_partkey = partsupp.ps_partkey WHERE part.p_mfgr = 'Manufacturer#3' AND partsupp.ps_supplycost = 1000;
SELECT COUNT(*) FROM nation WHERE n_regionkey IN (     SELECT r_regionkey     FROM region     WHERE r_comment = 'asymptotes sublate after the r' );
SELECT COUNT(*) FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN lineitem l ON ps.ps_suppkey = l.l_suppkey WHERE p.p_mfgr = 'Manufacturer#5' AND p.p_retailprice < 1000 AND l.l_shipmode = 'RAIL';
SELECT (l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity) AS Profit FROM lineitem JOIN partsupp ON lineitem.l_suppkey = partsupp.ps_suppkey JOIN part ON lineitem.l_partkey = part.p_partkey WHERE part.p_name = 'smoke turquoise purple blue salmon' AND lineitem.l_receiptdate = '1996-05-07' AND lineitem.l_shipinstruct = 'DELIVER IN PERSON';
Error: 第 6723 个样本有 2 个SQL。
SELECT     c.c_name,     AVG(o.o_totalprice) AS avg_total_price_per_order FROM     customer c JOIN     orders o ON c.c_custkey = o.o_custkey GROUP BY     c.c_custkey, c.c_name ORDER BY     COUNT(o.o_orderkey) DESC LIMIT 3;
SELECT COUNT(l_linenumber) FROM lineitem WHERE l_shipdate = '1993-12-04';
SELECT o_orderdate FROM orders WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders)
SELECT (COUNT(c_custkey WHERE c_acctbal < 0) / COUNT(c_custkey)) * 100 AS percentage FROM customer;
SELECT COUNT(*) FROM partsupp WHERE ps_availqty < 10;
SELECT CAST(SUM(CASE WHEN p_mfgr = 'Manufacturer#3' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(p_partkey) AS percentage FROM part;
SELECT p_name FROM part WHERE p_type = 'MEDIUM PLATED BRASS' LIMIT 5;
SELECT COUNT(*) FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE l.l_shipdate LIKE '1998-11-%' AND l.l_shipmode = 'AIR' AND o.o_orderpriority = '1-URGENT';
SELECT COUNT(*) FROM customer WHERE c_nationkey IN (     SELECT n_nationkey     FROM nation     WHERE n_name = 'INDIA' );
SELECT COUNT(*) FROM customer WHERE c_acctbal < 0 AND c_nationkey IN (     SELECT n_nationkey     FROM nation     WHERE n_name = 'MOROCCO' );
SELECT n_nationkey, n_name FROM nation JOIN region ON nation.n_regionkey = region.r_regionkey WHERE region.r_name = 'Africa';
SELECT SUM(o_totalprice) FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey WHERE customer.c_name = 'Customer#000000013';
SELECT COUNT(l_linenumber), SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) FROM lineitem JOIN orders ON l_orderkey = o_orderkey JOIN customer ON o_custkey = c_custkey WHERE c_name = 'Customer#000021159';
SELECT SUM(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity) FROM lineitem JOIN partsupp ON l_suppkey = ps_suppkey AND l_partkey = ps_partkey JOIN part ON p_partkey = l_partkey WHERE p_name = 'chocolate floral blue coral cyan';
SELECT CAST(SUM(CASE WHEN n_name = 'GERMANY' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(s_suppkey) AS percentage FROM supplier s JOIN nation n ON s.s_nationkey = n.n_nationkey;
SELECT s_name FROM supplier JOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'smoke red pale saddle plum';
SELECT COUNT(s_name) FROM supplier WHERE s_acctbal < 0 AND s_nationkey IN (     SELECT n_nationkey     FROM nation     WHERE n_regionkey IN (         SELECT r_regionkey         FROM region         WHERE r_name = 'MIDDLE EAST'     ) );
SELECT p.p_name FROM part p JOIN lineitem l ON p.p_partkey = l.l_partkey WHERE l.l_shipmode = 'RAIL' AND l.l_shipdate = '1995-12-01' AND l.l_discount = 0.1;
SELECT p.p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN supplier s ON ps.ps_suppkey = s.s_suppkey WHERE s.s_name = 'Supplier#000000018' AND ps.ps_supplycost > 900;
SELECT COUNT(*) FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE EXTRACT(YEAR FROM l.l_shipdate) = 1994;
SELECT COUNT(*) FROM lineitem WHERE l_shipmode = 'RAIL' AND l_quantity < 30;
SELECT COUNT(*) FROM customer WHERE c_mktsegment = 'FURNITURE' AND c_nationkey = 1;
SELECT c_phone FROM customer WHERE c_acctbal = (SELECT MAX(c_acctbal) FROM customer);
SELECT o_orderpriority FROM orders WHERE o_totalprice = (SELECT MAX(o_totalprice) FROM orders)
SELECT COUNT(*) FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'UNITED STATES';
SELECT COUNT(*) FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'BRAZIL' AND customer.c_mktsegment = 'automobile';
SELECT o_comment FROM orders WHERE o_custkey IN (     SELECT c_custkey     FROM customer     WHERE c_mktsegment = 'Furniture' ) LIMIT 5;
SELECT n_name FROM nation WHERE n_regionkey IN (     SELECT r_regionkey     FROM region     WHERE r_name = 'ASIA' );
SELECT n_name FROM nation WHERE n_regionkey IN (     SELECT r_regionkey     FROM region     WHERE r_comment = 'furiously express accounts wake sly' );
SELECT COUNT(s_suppkey) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'GERMANY';
SELECT COUNT(*) FROM customer c JOIN nation n ON c.c_nationkey = n.n_nationkey JOIN region r ON n.n_regionkey = r.r_regionkey WHERE r.r_name = 'ASIA' AND c.c_acctbal < 0;
SELECT c_phone FROM customer WHERE c_custkey = (     SELECT o_custkey     FROM orders     WHERE o_totalprice = (         SELECT MAX(o_totalprice)         FROM orders     ) );
SELECT COUNT(*) FROM lineitem JOIN part ON lineitem.l_partkey = part.p_partkey WHERE part.p_retailprice > 1000 AND lineitem.l_shipmode = 'SHIP';
SELECT c_name, c_mktsegment FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey WHERE orders.o_totalprice = 199180.63;
SELECT n_name, r_name FROM nation JOIN region ON nation.n_regionkey = region.r_regionkey JOIN customer ON nation.n_nationkey = customer.c_nationkey WHERE customer.c_address = 'wH55UnX7 VI';
SELECT COUNT(*) FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'BRAZIL' AND customer.c_acctbal < 1000;
SELECT n_name FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE customer.c_mktsegment = 'BUILDING' AND customer.c_acctbal > (SELECT AVG(c_acctbal) * 0.8 FROM customer)
SELECT     (COUNT(c.c_custkey) FILTER (WHERE n.n_name = 'United States')) / COUNT(c.c_custkey) * 100 AS percentage FROM     customer c JOIN     nation n ON c.c_nationkey = n.n_nationkey WHERE     c.c_acctbal < 4000;
SELECT c_name, c_phone FROM customer WHERE c_acctbal > 9000;
SELECT AVG(l_linenumber) FROM lineitem WHERE l_shipdate BETWEEN '1994-04-01' AND '1994-04-30';
SELECT o_orderkey FROM orders WHERE o_totalprice BETWEEN 200000 AND 300000;
SELECT p_partkey FROM part WHERE p_retailprice > (SELECT AVG(p_retailprice) FROM part);
SELECT     (COUNT(CASE WHEN ps_supplycost > 500 THEN ps_suppkey END) * 100.0 / COUNT(ps_suppkey)) AS percentage FROM     partsupp;
SELECT s_suppkey, s_acctbal FROM supplier ORDER BY s_acctbal DESC LIMIT 10;
SELECT COUNT(DISTINCT T1.c_custkey) FROM customer AS T1 INNER JOIN orders AS T2 ON T1.c_custkey = T2.o_custkey WHERE T1.c_acctbal > 0 AND T2.o_orderpriority = '1-URGENT'
SELECT c_name, c_phone FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'INDIA' AND customer.c_acctbal > (     SELECT AVG(c_acctbal)     FROM customer     JOIN nation ON customer.c_nationkey = nation.n_nationkey     WHERE nation.n_name = 'INDIA' );
SELECT p.p_partkey, p.p_name, ps.ps_supplycost FROM part AS p JOIN partsupp AS ps ON p.p_partkey = ps.ps_partkey JOIN supplier AS s ON ps.ps_suppkey = s.s_suppkey WHERE s.s_name = 'Supplier#000000654' ORDER BY ps.ps_supplycost DESC LIMIT 5;
SELECT     (COUNT(c.c_name) FILTER (WHERE c.c_mktsegment = 'AUTOMOBILE')) * 100.0 / COUNT(c.c_name) AS percentage FROM     customer c JOIN     nation n ON c.c_nationkey = n.n_nationkey WHERE     n.n_name = 'FRANCE';
SELECT p.p_name, SUM((l.l_extendedprice * (1 - l.l_discount)) - (ps.ps_supplycost * l.l_quantity)) AS profit FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN lineitem l ON ps.ps_suppkey = l.l_suppkey AND p.p_partkey = l.l_partkey GROUP BY p.p_name ORDER BY profit DESC LIMIT 1;
SELECT n.n_name FROM nation n JOIN customer c ON n.n_nationkey = c.c_nationkey GROUP BY n.n_name HAVING COUNT(c.c_name) < (SELECT AVG(cnt) FROM (SELECT COUNT(*) AS cnt FROM customer GROUP BY c_nationkey) sub) ORDER BY COUNT(c.c_name);
SELECT     (COUNT(c.c_custkey) FILTER (WHERE c.c_mktsegment = 'HOUSEHOLD')) * 100.0 / COUNT(c.c_custkey) AS percentage FROM     customer c JOIN     nation n ON c.c_nationkey = n.n_nationkey JOIN     region r ON n.n_regionkey = r.r_regionkey WHERE     r.r_name = 'AFRICA';
SELECT p.p_name FROM partsupp ps JOIN part p ON ps.ps_partkey = p.p_partkey ORDER BY ps.ps_availqty DESC LIMIT 10;
SELECT     (AVG(case when l_shipmode = 'SHIP' then p_retailprice else null end) -      AVG(case when l_shipmode = 'AIR' then p_retailprice else null end)) FROM     part p JOIN     partsupp ps ON p.p_partkey = ps.ps_partkey JOIN     lineitem l ON ps.ps_suppkey = l.l_suppkey AND p.p_partkey = l.l_partkey;
SELECT AVG(l_discount) FROM lineitem li JOIN part p ON li.l_partkey = p.p_partkey WHERE p.p_mfgr = 'Manufacturer#5';
SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.l_orderkey = orders.o_orderkey WHERE lineitem.l_shipmode = 'RAIL' AND orders.o_orderpriority = '3-MEDIUM';
SELECT     (COUNT(CASE WHEN s_acctbal < avg_acctbal THEN s_suppkey END) * 100.0 / COUNT(s_suppkey)) AS percentage FROM     supplier s JOIN     nation n ON s.s_nationkey = n.n_nationkey JOIN     region r ON n.n_regionkey = r.r_regionkey JOIN     (SELECT AVG(s_acctbal) as avg_acctbal FROM supplier) subquery WHERE     r.r_name = 'EUROPE'
Error: 第 6780 个样本有 2 个SQL。
SELECT c_custkey FROM customer WHERE c_acctbal < 0;
SELECT l_orderkey, l_linenumber, l_extendedprice * (1 - l_discount) as discounted_price FROM lineitem ORDER BY discounted_price LIMIT 3;
SELECT COUNT(DISTINCT l_orderkey) FROM lineitem WHERE l_returnflag = 'R' AND l_quantity > 10;
SELECT SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) FROM lineitem WHERE l_shipmode = 'AIR' AND l_shipinstruct = 'NONE';
SELECT COUNT(*) FROM orders WHERE o_orderpriority = '1-URGENT' AND o_orderdate = (SELECT MAX(o_orderdate) FROM orders WHERE o_orderpriority <> '1-URGENT');
SELECT COUNT(*) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'EGYPT' AND supplier.s_acctbal < 0;
SELECT COUNT(l.linenumber) FROM lineitem l JOIN orders o ON l.orderkey = o.orderkey WHERE l.shipmode = 'REG AIR' AND o.orderdate = '1995-03-22';
SELECT COUNT(s_suppkey) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey JOIN region ON nation.n_regionkey = region.r_regionkey WHERE region.r_name = 'EUROPE';
SELECT T3.c_mktsegment FROM (     SELECT T1.c_custkey, COUNT(T2.o_orderkey) as order_count     FROM customer AS T1     JOIN orders AS T2 ON T1.c_custkey = T2.o_custkey     WHERE T2.o_orderdate LIKE '1994-04-%'     GROUP BY T1.c_custkey ) AS T4 JOIN customer AS T3 ON T4.c_custkey = T3.c_custkey ORDER BY T4.order_count DESC LIMIT 1;
SELECT p.p_name FROM part p, partsupp ps, supplier s WHERE p.p_partkey = ps.ps_partkey AND ps.ps_suppkey = s.s_suppkey AND s.s_name = 'Supplier#000000034';
SELECT ps_supplycost FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_type = 'LARGE BURNISHED COPPER';
SELECT COUNT(DISTINCT c.c_custkey) FROM customer c JOIN orders o ON c.c_custkey = o.o_custkey JOIN nation n ON c.c_nationkey = n.n_nationkey WHERE n.n_name = 'MOZAMBIQUE' AND o.o_orderpriority = '5-LOW';
SELECT p.p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey WHERE ps.ps_availqty < 10 ORDER BY ps.ps_supplycost LIMIT 1;
SELECT COUNT(DISTINCT o_clerk) FROM orders WHERE o_custkey IN (     SELECT c_custkey     FROM customer     WHERE c_address = 'uFTe2u518et8Q8UC' );
SELECT DISTINCT p_name FROM part WHERE p_partkey IN (     SELECT l_partkey     FROM lineitem     WHERE l_discount = 0.0000 );
SELECT COUNT(*) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'GERMANY' AND supplier.s_comment LIKE '%carefully regular packages%';
SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.l_orderkey = orders.o_orderkey WHERE lineitem.l_shipdate = '1994-11-19' AND orders.o_orderdate = '1994-09-21';
SELECT SUM(l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity) / COUNT(ps_partkey) AS average_profit FROM lineitem JOIN partsupp ON l_partkey = ps_partkey AND l_suppkey = ps_suppkey JOIN part ON l_partkey = p_partkey WHERE p_type = 'PROMO BRUSHED STEEL'
SELECT (COUNT(c.c_custkey) FILTER (WHERE n.n_name = 'IRAN')) * 100.0 / COUNT(c.c_custkey) AS percentage FROM customer c JOIN nation n ON c.c_nationkey = n.n_nationkey WHERE c.c_mktsegment = 'HOUSEHOLD';
SELECT c_mktsegment, c_name, c_address, c_phone FROM customer WHERE c_custkey = 3;
SELECT l_linenumber FROM lineitem WHERE l_discount = 0.1 LIMIT 3;
SELECT COUNT(*) FROM lineitem WHERE l_quantity > 40 AND l_shipmode = 'AIR';
SELECT l_shipmode FROM lineitem WHERE l_shipinstruct = 'DELIVER IN PERSON' GROUP BY l_shipmode ORDER BY COUNT(*) DESC LIMIT 1;
SELECT o_totalprice, o_orderpriority FROM orders WHERE o_orderkey = 33;
SELECT COUNT(*) FROM orders WHERE YEAR(o_orderdate) = '1998' AND o_totalprice < 950;
SELECT c_name FROM customer WHERE c_acctbal < 0 LIMIT 3;
SELECT l_extendedprice * (1 - l_discount) AS discounted_price FROM lineitem WHERE l_linenumber = 1;
SELECT     (SELECT COUNT(l_linenumber) FROM lineitem WHERE l_returnflag IN ('A', 'N') AND l_extendedprice < 16947.7)     -     (SELECT COUNT(l_linenumber) FROM lineitem WHERE l_returnflag = 'R' AND l_extendedprice < 16947.7)     AS difference;
SELECT ps_supplycost FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_type = 'large plated tin'
SELECT p.p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey WHERE ps.ps_availqty > 9998 LIMIT 3;
SELECT p_name FROM part JOIN partsupp ON part.p_partkey = partsupp.ps_partkey WHERE p_container = 'WRAP BAG' AND ps_supplycost < 10 LIMIT 2;
SELECT n_name FROM nation WHERE n_nationkey = (SELECT s_nationkey FROM supplier WHERE s_suppkey = 1)
SELECT n_name FROM nation JOIN region ON nation.n_regionkey = region.r_regionkey WHERE region.r_name = 'AFRICA'
SELECT r_name FROM region JOIN nation ON region.r_regionkey = nation.n_regionkey GROUP BY r_name ORDER BY COUNT(n_name) LIMIT 1;
SELECT COUNT(*) FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE customer.c_mktsegment = 'FURNITURE' AND nation.n_name = 'IRAQ';
SELECT c_name FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey WHERE customer.c_custkey = 93697 AND orders.o_totalprice = 191918.92;
SELECT n.n_name, r.r_name FROM customer AS c JOIN nation AS n ON c.c_nationkey = n.n_nationkey JOIN region AS r ON n.n_regionkey = r.r_regionkey WHERE c.c_name = 'Customer#000000008';
SELECT (lineitem.l_receiptdate - lineitem.l_commitdate) AS delivery_time, orders.o_clerk FROM lineitem JOIN orders ON lineitem.l_orderkey = orders.o_orderkey WHERE lineitem.l_orderkey = 6;
SELECT COUNT(*) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'Japan' AND supplier.s_acctbal < 0;
SELECT c_name FROM customer WHERE c_acctbal = (SELECT MAX(c_acctbal) FROM customer);
SELECT o_orderdate FROM orders WHERE o_orderpriority = '1-URGENT'
SELECT COUNT(*) FROM lineitem WHERE l_shipinstruct = 'DELIVER IN PERSON';
SELECT MAX(s_acctbal) FROM supplier;
SELECT COUNT(*) FROM partsupp WHERE ps_availqty < 10;
SELECT n_name FROM nation WHERE n_regionkey IN (SELECT r_regionkey FROM region WHERE r_name = 'EUROPE');
SELECT ps_supplycost FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'violet olive rose ivory sandy';
SELECT c_phone FROM customer WHERE c_nationkey IN (SELECT n_nationkey FROM nation WHERE n_name = 'Ethiopia');
SELECT SUM(o_totalprice) FROM orders WHERE o_custkey IN (SELECT c_custkey FROM customer WHERE c_phone = '627-220-3983');
SELECT DISTINCT l_shipmode FROM lineitem JOIN orders ON lineitem.l_orderkey = orders.o_orderkey WHERE orders.o_orderdate = '1994-12-31';
SELECT s_acctbal FROM supplier JOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey GROUP BY supplier.s_suppkey, s_acctbal ORDER BY COUNT(partsupp.ps_suppkey) DESC LIMIT 1;
SELECT n_name FROM nation JOIN supplier ON nation.n_nationkey = supplier.s_nationkey WHERE supplier.s_acctbal = 4393.04;
SELECT r_name FROM region JOIN nation ON region.r_regionkey = nation.n_regionkey JOIN customer ON nation.n_nationkey = customer.c_nationkey GROUP BY r_name ORDER BY COUNT(customer.c_custkey) DESC LIMIT 1;
SELECT DISTINCT c_phone FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey WHERE o_totalprice > 300000;
SELECT DISTINCT o_clerk FROM orders JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE lineitem.l_shipmode = 'MAIL'
SELECT n_name FROM nation JOIN supplier ON nation.n_nationkey = supplier.s_nationkey GROUP BY n_name ORDER BY AVG(supplier.s_acctbal) ASC LIMIT 5;
SELECT s_address FROM supplier JOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_size = (SELECT MAX(p_size) FROM part);
SELECT p.p_name, s.s_name, MAX((l.l_extendedprice * (1 - l.l_discount)) - (ps.ps_supplycost * l.l_quantity)) as profit FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN supplier s ON ps.ps_suppkey = s.s_suppkey JOIN lineitem l ON l.l_partkey = p.p_partkey AND l.l_suppkey = s.s_suppkey GROUP BY p.p_name, s.s_name ORDER BY profit DESC LIMIT 1;
SELECT (COUNT(supplier.s_suppkey) / (SELECT COUNT(*) FROM supplier)) * 100 AS proportion FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey JOIN region ON nation.n_regionkey = region.r_regionkey WHERE region.r_name = 'ASIA'
SELECT o_totalprice FROM orders WHERE o_orderkey = 32;
SELECT COUNT(DISTINCT l_orderkey) FROM lineitem WHERE l_discount = 0;
SELECT l_linenumber FROM lineitem WHERE l_shipmode = 'truck' AND YEAR(l_shipdate) < 1997;
SELECT COUNT(*) FROM lineitem WHERE l_returnflag = 'R' AND EXTRACT(YEAR FROM l_shipdate) = 1998;
SELECT l_linenumber, l_quantity, l_shipmode FROM lineitem WHERE l_shipmode = 'AIR' ORDER BY l_quantity DESC LIMIT 1;
SELECT c_name FROM customer WHERE c_acctbal < 0;
SELECT COUNT(*) FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE customer.c_mktsegment = 'HOUSEHOLD' AND nation.n_name = 'GERMANY';
SELECT c_phone FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey WHERE orders.o_orderpriority = '1-URGENT'
SELECT c_name FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE lineitem.l_discount = (SELECT MAX(l_discount) FROM lineitem)
SELECT o_orderkey, MAX(o_totalprice) as total_price, l_shipdate as delivery_date FROM orders JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey GROUP BY o_orderkey, l_shipdate ORDER BY total_price DESC LIMIT 5;
SELECT o_comment FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey WHERE customer.c_mktsegment = 'FURNITURE'
SELECT c_name FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey WHERE orders.o_totalprice > 300000;
SELECT c_name FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'INDIA' AND customer.c_acctbal > 5000;
SELECT s_phone FROM supplier WHERE s_nationkey IN (SELECT n_nationkey FROM nation WHERE n_name = 'JAPAN');
SELECT s_name FROM supplier WHERE s_acctbal < 0 AND s_nationkey IN (     SELECT n_nationkey     FROM nation     WHERE n_name = 'ARGENTINA' );
SELECT COUNT(*) FROM nation n JOIN region r ON n.n_regionkey = r.r_regionkey WHERE r.r_name = 'ALGERIA';
SELECT DISTINCT c_name FROM customer JOIN orders ON c_custkey = o_custkey JOIN lineitem ON o_orderkey = l_orderkey WHERE l_discount = 0.1 AND o_orderdate BETWEEN '1994-01-01' AND '1995-01-01';
SELECT (COUNT(CASE WHEN r.r_name = 'America' THEN n.n_name END) * 100.0 / COUNT(n.n_name)) AS Percentage FROM nation n JOIN region r ON n.n_regionkey = r.r_regionkey;
SELECT (COUNT(c.custkey) FILTER (WHERE c.mktsegment = 'HOUSEHOLD')) * 100.0 / COUNT(c.custkey) as percentage FROM customer c JOIN nation n ON c.nationkey = n.nationkey WHERE n.name = 'Indonesia';
SELECT p_name FROM part WHERE p_type = 'PROMO BRUSHED STEEL';
SELECT p_comment FROM part WHERE p_name = 'burlywood plum powder puff mint';
SELECT COUNT(*) FROM part WHERE p_retailprice > 1900;
SELECT COUNT(*) FROM part WHERE p_type = 'PROMO BRUSHED STEEL' AND p_mfgr = 'Manufacturer#5';
SELECT DISTINCT p_brand FROM part WHERE p_type = 'PROMO BRUSHED STEEL';
SELECT p_name FROM part WHERE p_retailprice = (SELECT MAX(p_retailprice) FROM part);
SELECT p_name, p_size FROM part WHERE p_name IN ('pink powder drab lawn cyan', 'cornflower sky burlywood green beige') ORDER BY p_size DESC LIMIT 1;
SELECT COUNT(*) FROM part WHERE p_container = 'JUMBO CASE';
SELECT MIN(p_size) FROM part WHERE p_container = 'JUMBO CASE';
SELECT COUNT(*) FROM supplier WHERE s_acctbal < 0;
SELECT s_name FROM supplier ORDER BY s_acctbal DESC LIMIT 3;
SELECT s_phone FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'Germany';
SELECT s_name FROM supplier JOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light';
SELECT MIN(ps_supplycost) FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light';
SELECT s_name FROM supplier JOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light' ORDER BY partsupp.ps_supplycost LIMIT 1;
SELECT SUM(ps_availqty) FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light';
SELECT s_phone FROM supplier JOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light' ORDER BY partsupp.ps_availqty DESC LIMIT 1;
SELECT s_name FROM supplier WHERE s_suppkey IN (     SELECT ps_suppkey     FROM partsupp     WHERE ps_partkey = (         SELECT p_partkey         FROM part         WHERE p_retailprice = (             SELECT MAX(p_retailprice)             FROM part         )     ) );
SELECT COUNT(*) FROM partsupp ps JOIN supplier s ON ps.ps_suppkey = s.s_suppkey JOIN nation n ON s.s_nationkey = n.n_nationkey JOIN part p ON ps.ps_partkey = p.p_partkey WHERE p.p_name = 'hot spring dodger dim light' AND n.n_name = 'VIETNAM';
SELECT COUNT(*) FROM supplier s JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey JOIN part p ON ps.ps_partkey = p.p_partkey WHERE p.p_type = 'PROMO BRUSHED STEEL' AND s.s_acctbal < 0;
SELECT s_name FROM supplier JOIN partsupp ON supplier.s_suppkey = partsupp.ps_suppkey JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_brand = 'Brand#55'
SELECT COUNT(p_partkey) FROM part JOIN partsupp ON part.p_partkey = partsupp.ps_partkey WHERE p_type = 'PROMO BRUSHED STEEL' GROUP BY p_partkey HAVING SUM(ps_availqty) < 5000;
SELECT COUNT(DISTINCT o.o_orderkey) FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey JOIN part p ON l.l_partkey = p.p_partkey WHERE p.p_name = 'hot spring dodger dim light'
SELECT SUM(l_quantity) FROM lineitem JOIN part ON lineitem.l_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light';
SELECT o_orderkey FROM orders WHERE o_orderkey IN (     SELECT l_orderkey     FROM lineitem     JOIN part ON l_partkey = p_partkey     WHERE p_container = 'JUMBO CASE'     GROUP BY l_orderkey     HAVING COUNT(l_partkey) > 2 )
SELECT COUNT(*) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey JOIN region ON nation.n_regionkey = region.r_regionkey WHERE supplier.s_acctbal < 0 AND region.r_name = 'EUROPE';
SELECT COUNT(*) FROM supplier s JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey JOIN part p ON ps.ps_partkey = p.p_partkey JOIN nation n ON s.s_nationkey = n.n_nationkey JOIN region r ON n.n_regionkey = r.r_regionkey WHERE p.p_name = 'hot spring dodger dim light' AND r.r_name = 'EUROPE'
SELECT s_phone FROM supplier WHERE s_suppkey IN (     SELECT l_suppkey     FROM lineitem     WHERE l_orderkey = 1 )
SELECT COUNT(*) FROM supplier s JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey JOIN lineitem l ON ps.ps_partkey = l.l_partkey AND ps.ps_suppkey = l.l_suppkey WHERE l.l_orderkey = 4 AND s.s_acctbal < 0;
SELECT COUNT(*) FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN supplier s ON ps.ps_suppkey = s.s_suppkey JOIN lineitem l ON p.p_partkey = l.l_partkey AND s.s_suppkey = l.l_suppkey WHERE l.l_returnflag = 'R' AND s.s_acctbal < 0;
SELECT l_shipdate FROM lineitem JOIN part ON lineitem.l_partkey = part.p_partkey WHERE l_orderkey = 1 AND p_name = 'burnished seashell gainsboro navajo chocolate';
SELECT l_quantity FROM lineitem JOIN part ON lineitem.l_partkey = part.p_partkey WHERE lineitem.l_orderkey = 1 AND part.p_name = 'burnished seashell gainsboro navajo chocolate'
SELECT p_name, SUM(l_quantity) as total_quantity FROM part JOIN lineitem ON part.p_partkey = lineitem.l_partkey WHERE lineitem.l_orderkey = 1 AND p_name IN ('burnished seashell gainsboro navajo chocolate', 'salmon white grey tan navy') GROUP BY p_name ORDER BY total_quantity DESC LIMIT 1;
SELECT MAX(l.l_discount) FROM lineitem l JOIN partsupp ps ON l.l_suppkey = ps.ps_suppkey JOIN part p ON ps.ps_partkey = p.p_partkey WHERE p.p_name = 'burnished seashell gainsboro navajo chocolate';
SELECT DISTINCT T2.l_shipmode FROM part AS T1 JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_name = 'burnished seashell gainsboro navajo chocolate'
SELECT AVG(psup.ps_supplycost) FROM partsupp AS psup JOIN part AS p ON psup.ps_partkey = p.p_partkey WHERE p.p_name = 'hot spring dodger dim light';
SELECT ((MAX(ps_supplycost) - MIN(ps_supplycost)) / MIN(ps_supplycost)) * 100 AS Percentage_Higher FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light'
SELECT (l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity) AS Profit FROM lineitem JOIN partsupp ON lineitem.l_suppkey = partsupp.ps_suppkey WHERE lineitem.l_partkey = 98768 AND lineitem.l_orderkey = 1;
SELECT l_extendedprice * (1 - l_discount) AS discounted_price FROM part JOIN lineitem ON part.p_partkey = lineitem.l_partkey WHERE part.p_name = 'burnished seashell gainsboro navajo chocolate' AND lineitem.l_orderkey = 1;
SELECT c_mktsegment FROM customer WHERE c_acctbal = (SELECT MAX(c_acctbal) FROM customer);
SELECT COUNT(*) FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE YEAR(l.l_shipdate) = 1997 AND l.l_shipmode = 'MAIL';
SELECT COUNT(*) FROM customer WHERE c_mktsegment = 'FURNITURE';
SELECT COUNT(*) FROM lineitem WHERE year(l_shipdate) = 1994 AND l_shipmode = 'TRUCK' AND l_returnflag = 'R';
SELECT COUNT(*) FROM customer WHERE c_mktsegment = 'MACHINERY' AND c_acctbal < 0;
SELECT COUNT(*) FROM orders WHERE o_orderpriority = '1-URGENT' AND o_clerk = 'Clerk#000000001' AND YEAR(o_orderdate) = 1997;
SELECT c_name FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE DATEDIFF(l_receiptdate, l_commitdate) = (SELECT MAX(DATEDIFF(l_receiptdate, l_commitdate))  FROM lineitem)
SELECT SUM(o_totalprice) FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'ARGENTINA';
SELECT COUNT(DISTINCT c.c_custkey) FROM customer c JOIN orders o ON c.c_custkey = o.o_custkey WHERE c.c_mktsegment = 'BUILDING' AND o.o_totalprice >= 50000;
SELECT n.n_name FROM nation n JOIN supplier s ON n.n_nationkey = s.s_nationkey GROUP BY n.n_name ORDER BY COUNT(s.s_name) ASC LIMIT 1;
SELECT ps_supplycost FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'medium metallic grey dodger linen';
SELECT TOP 2 T2.n_name AS country FROM supplier AS T1 JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 GROUP BY T2.n_name ORDER BY SUM(T1.s_acctbal) DESC;
SELECT p.p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey WHERE ps.ps_supplycost > 1000;
SELECT n_name FROM nation JOIN supplier ON nation.n_nationkey = supplier.s_nationkey WHERE s_acctbal = (SELECT MIN(s_acctbal) FROM supplier)
SELECT o_clerk FROM orders JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE l_extendedprice = (SELECT MAX(l_extendedprice) FROM lineitem);
SELECT SUM(l_quantity) FROM lineitem l JOIN orders o ON l.l_orderkey = o.o_orderkey WHERE o.o_custkey = 101660 AND o.o_orderdate = '1995-10-05';
SELECT SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) FROM orders o JOIN lineitem l ON o.o_orderkey = l.l_orderkey WHERE o.o_custkey = 88931 AND o.o_orderdate = '1994-07-13';
SELECT p.p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN lineitem l ON ps.ps_suppkey = l.l_suppkey AND p.p_partkey = l.l_partkey JOIN orders o ON l.l_orderkey = o.o_orderkey WHERE o.o_custkey = 110942;
SELECT p.p_name, l.l_extendedprice * (1 - l.l_discount) AS discounted_price FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey JOIN lineitem l ON ps.ps_suppkey = l.l_suppkey AND p.p_partkey = l.l_partkey JOIN orders o ON l.l_orderkey = o.o_orderkey WHERE o.o_custkey = 111511 AND o.o_orderkey = 53159;
SELECT hi.height_in_inch FROM height_info hi JOIN PlayerInfo pi ON pi.height = hi.height_id WHERE pi.PlayerName = 'David Bornhammar';
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE height_info.height_in_inch > 74
SELECT COUNT(*) FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE height_info.height_in_inch > '6\'2"' AND PlayerInfo.nation = 'Sweden';
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE height_info.height_in_cm = (SELECT MAX(height_in_cm) FROM height_info);
SELECT weight_in_kg FROM weight_info JOIN PlayerInfo ON weight_info.weight_id = PlayerInfo.weight WHERE PlayerInfo.PlayerName = 'David Bornhammar';
SELECT COUNT(*) FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE weight_in_kg > 90;
SELECT COUNT(*) FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE weight_in_kg > 90 AND position_info = 'D';
SELECT T3.PlayerName FROM weight_info AS T1 JOIN PlayerInfo AS T3 ON T1.weight_id = T3.weight WHERE T1.weight_in_kg > 90 ORDER BY T3.sum_7yr_GP DESC LIMIT 1;
SELECT wi.weight_in_kg FROM weight_info wi JOIN PlayerInfo pi ON pi.weight = wi.weight_id WHERE pi.sum_7yr_TOI = (SELECT MAX(p2.sum_7yr_TOI) FROM PlayerInfo p2)
SELECT     (SELECT height_in_cm FROM height_info WHERE height_id = (         SELECT height FROM PlayerInfo WHERE PlayerName = 'David Bornhammar'     )) -     (SELECT height_in_cm FROM height_info WHERE height_id = (         SELECT height FROM PlayerInfo WHERE PlayerName = 'Pauli Levokari'     )) AS HeightDifferenceCM
SELECT COUNT(*) FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE PlayerInfo.shoots = 'R' AND weight_info.weight_in_kg > 90;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE weight_info.weight_in_kg > 90 AND PlayerInfo.shoots = 'R';
SELECT     (weight.weight_in_kg / POWER((height.height_in_cm / 100), 2)) AS BMI FROM     PlayerInfo JOIN     height_info AS height ON PlayerInfo.height = height.height_id JOIN     weight_info AS weight ON PlayerInfo.weight = weight.weight_id WHERE     PlayerInfo.PlayerName = 'David Bornhammar';
SELECT AVG(h.height_in_cm) FROM height_info h JOIN PlayerInfo p ON h.height_id = p.height WHERE p.position_info = 'D';
SELECT weight_in_lbs FROM weight_info ORDER BY weight_in_lbs DESC LIMIT 1;
SELECT COUNT(*) FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE PlayerInfo.shoots = 'R' AND height_info.height_in_inch = '5''7"';
SELECT T1.PlayerName FROM PlayerInfo AS T1 JOIN (     SELECT ELITEID, MAX(PIM) as max_PIM     FROM SeasonStatus     WHERE LEAGUE = 'NHL' AND GP >= 500     GROUP BY ELITEID ) AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.sum_7yr_GP > 500 ORDER BY T2.max_PIM DESC LIMIT 1;
SELECT hi.height_in_cm FROM PlayerInfo pi JOIN height_info hi ON pi.height = hi.height_id WHERE pi.birthplace = 'Edmonton, AB, CAN' ORDER BY hi.height_in_cm DESC LIMIT 1;
SELECT COUNT(*) FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE PlayerInfo.overallby = 'Anaheim Ducks' AND PlayerInfo.draftyear = 2008 AND SeasonStatus.TEAM = 'U.S. National U18 Team';
SELECT wi.weight_in_kg FROM weight_info wi JOIN PlayerInfo pi ON pi.weight = wi.weight_id JOIN (   SELECT ELITEID, MAX(PLUSMINUS) as max_plusminus   FROM SeasonStatus   GROUP BY ELITEID ) ss ON ss.ELITEID = pi.ELITEID WHERE ss.max_plusminus = (   SELECT MAX(PLUSMINUS)   FROM SeasonStatus );
SELECT PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.LEAGUE = 'QMJHL' AND SeasonStatus.SEASON = '2004-2005' ORDER BY SeasonStatus.P DESC LIMIT 1;
SELECT DISTINCT p.PlayerName FROM PlayerInfo p JOIN SeasonStatus s ON p.ELITEID = s.ELITEID WHERE s.TEAM = 'Acadie-Bathurst Titan' AND s.GAMETYPE = 'Regular Season' AND s.SEASON = '1998-1999';
SELECT MAX(T2.GP) FROM PlayerInfo T1 JOIN SeasonStatus T2 ON T1.ELITEID = T2.ELITEID JOIN height_info T3 ON T1.height = T3.height_id WHERE T3.height_in_cm = (SELECT MAX(height_in_cm) FROM height_info);
SELECT PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.SEASON = '1997-1998' AND SeasonStatus.LEAGUE = 'OHL' ORDER BY birthdate DESC LIMIT 1;
SELECT COUNT(*) FROM PlayerInfo WHERE shoots = 'L' AND ELITEID IN (     SELECT ELITEID     FROM SeasonStatus     WHERE GP = 72 );
SELECT ABS(SUM(CASE WHEN GAMETYPE = 'Regular Season' THEN G ELSE 0 END) - SUM(CASE WHEN GAMETYPE = 'Playoffs' THEN G ELSE 0 END)) FROM SeasonStatus WHERE SEASON = '1998-1999' AND PlayerName = 'Pavel Brendl';
SELECT AVG(w.weight_in_lbs) FROM PlayerInfo p JOIN weight_info w ON p.weight = w.weight_id WHERE p.CSS_rank = (SELECT MAX(CSS_rank) FROM PlayerInfo);
SELECT MULTIPLY(DIVIDE(SUM(CASE WHEN GP > 20 THEN 1 ELSE 0 END), COUNT(ELITEID)), 100) FROM SeasonStatus WHERE SEASON = '2007-2008' AND GAMETYPE = 'Playoffs';
SELECT T1.PlayerName FROM PlayerInfo AS T1 JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.LEAGUE = 'WHL' AND T2.SEASON = '2007-2008' GROUP BY T1.PlayerName ORDER BY SUM(T2.G) DESC LIMIT 1;
SELECT T2.PlayerName FROM SeasonStatus AS T1 JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.TEAM = 'Chilliwack Chiefs' AND T1.P > 100;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE weight_info.weight_in_kg = 120;
SELECT T3.PlayerName, T1.height_in_cm FROM height_info AS T1 JOIN PlayerInfo AS T2 ON T1.height_id = T2.height JOIN (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Brian Gionta') AS T4 ON T2.ELITEID = T4.ELITEID WHERE T1.height_in_cm = (SELECT T1.height_in_cm FROM height_info AS T1 JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T2.PlayerName = 'Brian Gionta');
SELECT PlayerName, position_info FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID GROUP BY PlayerInfo.ELITEID ORDER BY SUM(PIM) DESC LIMIT 1;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.SEASON = CONCAT(PlayerInfo.draftyear, "-20") GROUP BY PlayerInfo.PlayerName ORDER BY SUM(SeasonStatus.P) DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN nation IN ('Belarus', 'Bulgaria', 'Czech Republic', 'Hungary', 'Moldova', 'Poland', 'Romania', 'Slovakia', 'Ukraine') THEN ELITEID END) * 100 / COUNT(ELITEID)) AS Percentage_Eastern_Europe FROM     PlayerInfo WHERE     overallby = 'Toronto Maple Leafs';
SELECT PlayerName FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs' AND draftyear = 2008 ORDER BY CSS_rank DESC LIMIT 1;
SELECT T1.PlayerName, T2.TEAM FROM PlayerInfo AS T1 JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON = '2006-2007' AND T2.LEAGUE = 'SuperElit' AND T2.GAMETYPE = 'Playoffs' ORDER BY T2.P DESC LIMIT 1;
SELECT COUNT(*) FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs' AND sum_7yr_GP > 300;
SELECT hi.height_in_cm FROM height_info hi JOIN PlayerInfo pi ON pi.height = hi.height_id JOIN SeasonStatus ss ON ss.ELITEID = pi.ELITEID WHERE ss.TEAM = 'Yale Univ.' AND ss.PIM = '28' AND ss.SEASON = '2005-2006';
SELECT     (SUM(CASE WHEN PlayerName = 'Ian Schultz' THEN G ELSE 0 END) * 100 / SUM(G)) AS Percentage_Goals_Scored FROM     SeasonStatus WHERE     TEAM = 'Calgary Hitmen' AND SEASON = '2007-2008';
SELECT     (SUM(CASE WHEN PlayerName = 'Yevgeni Muratov' THEN PIM ELSE 0 END) * 100.0 / SUM(PIM)) AS Percentage_PIM FROM     SeasonStatus WHERE     TEAM = 'Ak Bars Kazan' AND SEASON = '1999-2000';
SELECT birthplace FROM PlayerInfo WHERE PlayerName = 'Aaron Gagnon';
SELECT weight_in_kg FROM weight_info JOIN PlayerInfo ON weight_info.weight_id = PlayerInfo.weight WHERE PlayerInfo.PlayerName = 'Tony Martensson';
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE weight_info.weight_in_lbs = 190;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id ORDER BY weight_info.weight_in_kg DESC LIMIT 1;
SELECT MULTIPLY(DIVIDE((SELECT COUNT(*) FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE weight_info.weight_in_lbs > 154 AND PlayerInfo.nation = 'Denmark'), (SELECT COUNT(*) FROM PlayerInfo)), 100) as Percentage;
SELECT TEAM FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE PlayerName = 'Andreas Jamtin';
SELECT SEASON FROM SeasonStatus WHERE ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Niklas Eckerblom');
SELECT GAMETYPE FROM SeasonStatus WHERE PlayerInfo.ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Matthias Trattnig') AND SeasonStatus.ELITEID = PlayerInfo.ELITEID;
SELECT DISTINCT T1.nation FROM PlayerInfo AS T1 JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON = '1997-1998';
SELECT MAX(P) FROM SeasonStatus JOIN PlayerInfo ON SeasonStatus.ELITEID = PlayerInfo.ELITEID WHERE PlayerInfo.PlayerName = 'Per Mars' AND SeasonStatus.SEASON = PlayerInfo.draftyear;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE PlayerInfo.nation = 'Italy' ORDER BY height_info.height_in_cm LIMIT 1;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE height_info.height_in_inch = '68';
SELECT COUNT(*) FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE birthyear = 1982 AND height_in_cm > 182;
SELECT MULTIPLY(DIVIDE(SUM(CASE WHEN T3.nation = 'Russia' THEN 1 ELSE 0 END), COUNT(T2.ELITEID)), 100) FROM height_info AS T1 JOIN PlayerInfo AS T2 ON T1.height_id = T2.height JOIN SeasonStatus AS T3 ON T2.ELITEID = T3.ELITEID WHERE T1.height_in_cm < 200;
SELECT T3.PlayerName FROM weight_info AS T1 JOIN PlayerInfo AS T3 ON T1.weight_id = T3.weight WHERE T3.nation = 'USA' ORDER BY T1.weight_in_lbs ASC LIMIT 1;
SELECT PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.SEASON = '2000-2001' ORDER BY SeasonStatus.PIM DESC LIMIT 1;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.TEAM = 'Avangard Omsk' AND SeasonStatus.SEASON = '2000-2001'
SELECT PlayerName FROM PlayerInfo WHERE overallby = 'Arizona Coyotes' AND draftyear = 2000 ORDER BY PIM DESC LIMIT 1;
SELECT COUNT(*) FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE overallby = 'Arizona Coyotes' AND height_in_cm = 195;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.TEAM = 'Avangard Omsk' AND SeasonStatus.GAMETYPE = 'Playoffs' AND SeasonStatus.SEASON = '2000-2001';
SELECT PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.SEASON = '2000-2001' AND SeasonStatus.LEAGUE = 'International' ORDER BY SeasonStatus.P DESC LIMIT 1;
SELECT COUNT(*) FROM PlayerInfo JOIN weight_info ON PlayerInfo.weight = weight_info.weight_id WHERE birthyear = 1980 AND weight_in_lbs = 185;
SELECT ELITEID, MAX(GP) FROM SeasonStatus WHERE SEASON = '2000-2001' AND LEAGUE = 'International' GROUP BY ELITEID ORDER BY GP DESC LIMIT 1;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.TEAM = 'Avangard Omsk' AND SeasonStatus.LEAGUE = 'International' AND SeasonStatus.G = 0 AND SeasonStatus.SEASON = '2000-2001' AND PlayerInfo.draftyear = 2000;
SELECT T1.PlayerName FROM PlayerInfo AS T1 JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON = '2000-2001' AND T2.GAMETYPE = 'Regular Season' AND T2.TEAM = 'Avangard Omsk' ORDER BY T1.birthdate ASC LIMIT 1;
SELECT T1.PlayerName FROM PlayerInfo AS T1 JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.LEAGUE = 'OHL' AND T2.GAMETYPE = 'Regular Season' AND T2.SEASON = '2007-2008' ORDER BY T2.A DESC LIMIT 1;
SELECT COUNT(DISTINCT T3.TEAM) FROM PlayerInfo AS T1 JOIN weight_info AS T2 ON T1.weight = T2.weight_id JOIN SeasonStatus AS T3 ON T1.ELITEID = T3.ELITEID WHERE T1.overallby = 'Arizona Coyotes' AND T2.weight_in_lbs = (SELECT MAX(weight_in_lbs) FROM weight_info WHERE weight_id IN (SELECT weight FROM PlayerInfo WHERE overallby = 'Arizona Coyotes'))
SELECT AVG(T2.weight_in_lbs) FROM PlayerInfo AS T1 JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.overallby = 'Arizona Coyotes';
SELECT AVG(h.height_in_cm) FROM height_info h JOIN PlayerInfo p ON h.height_id = p.height JOIN SeasonStatus s ON p.ELITEID = s.ELITEID WHERE s.TEAM = 'Acadie-Bathurst Titan' AND s.GAMETYPE = 'Regular Season';
Error: 第 6986 个样本有 2 个SQL。
SELECT weight_in_kg FROM weight_info JOIN PlayerInfo ON weight_info.weight_id = PlayerInfo.weight WHERE PlayerName = 'Matthias Trattnig';
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE height_info.height_in_inch > 69;
SELECT TEAM FROM SeasonStatus WHERE SEASON = '1997-1998' AND ELITEID = (SELECT ELITEID FROM PlayerInfo WHERE PlayerName = 'Niklas Eckerblom');
SELECT TEAM, COUNT(*) AS Swedish_Players FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE nation = 'Sweden' GROUP BY TEAM ORDER BY Swedish_Players DESC LIMIT 1;
SELECT COUNT(*) FROM SeasonStatus WHERE ELITEID IN (     SELECT ELITEID     FROM PlayerInfo     WHERE PlayerName = 'Per Mars' ) AND GAMETYPE = 'Playoffs';
SELECT T2.PlayerName FROM SeasonStatus AS T1 JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.TEAM = 'Rimouski Oceanic' AND T1.GAMETYPE = 'Playoffs' ORDER BY T1.G DESC LIMIT 1;
SELECT nation, COUNT(PlayerName) as player_count FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.TEAM = 'Plymouth Whalers' GROUP BY nation ORDER BY player_count DESC LIMIT 1;
SELECT PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.SEASON = '1999-2000' AND SeasonStatus.TEAM = 'Plymouth Whalers' ORDER BY SeasonStatus.A DESC LIMIT 1;
SELECT hi.height_in_inch FROM height_info hi JOIN PlayerInfo pi ON pi.height = hi.height_id JOIN SeasonStatus ss ON ss.ELITEID = pi.ELITEID WHERE ss.TEAM = 'Oshawa Generals'
SELECT PlayerName FROM PlayerInfo JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE LEAGUE = 'OHL' AND SEASON = '1997-2000' ORDER BY birthdate LIMIT 1;
SELECT PlayerInfo.PlayerName FROM PlayerInfo JOIN height_info ON PlayerInfo.height = height_info.height_id WHERE PlayerInfo.ELITEID IN (     SELECT SeasonStatus.ELITEID     FROM SeasonStatus     WHERE SeasonStatus.TEAM = 'USA U20' ) ORDER BY height_info.height_in_cm DESC LIMIT 1;
SELECT MULTIPLY(DIVIDE((SELECT COUNT(ELITEID) FROM PlayerInfo INNER JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE nation = 'Sweden' AND SeasonStatus.SEASON IN ('1997-1998', '1998-1999', '1999-2000') AND GAMETYPE = 'Playoffs'), (SELECT COUNT(ELITEID) FROM PlayerInfo INNER JOIN SeasonStatus ON PlayerInfo.ELITEID = SeasonStatus.ELITEID WHERE SeasonStatus.SEASON IN ('1997-1998', '1998-1999', '1999-2000') AND GAMETYPE = 'Playoffs')), 100);
SELECT (SUM(case when T3.nation = 'Sweden' then T2.PIM else 0 end) * 100 / SUM(T2.PIM)) as Percentage FROM PlayerInfo as T1 JOIN SeasonStatus as T2 ON T1.ELITEID = T2.ELITEID WHERE T2.LEAGUE = 'OHL';
SELECT AVG(StandardCost) FROM Product WHERE ProductNumber = 'CA-1098';
SELECT p.Name, pc.StartDate FROM Product p JOIN ProductCostHistory pc ON p.ProductID = pc.ProductID WHERE pc.EndDate IS NULL;
SELECT p.Name, p.ProductID, ph.StartDate, ph.EndDate, ph.StandardCost AS PreviousCost, p.StandardCost AS CurrentCost FROM Product AS p JOIN ProductCostHistory AS ph ON p.ProductID = ph.ProductID WHERE (p.StandardCost - ph.StandardCost) > 80 AND ph.EndDate IS NOT NULL ORDER BY p.ProductID, ph.EndDate DESC;
SELECT p.Name, SUM(sci.Quantity) as TotalQuantity FROM ShoppingCartItem sci JOIN Product p ON sci.ProductID = p.ProductID WHERE sci.ShoppingCartID = 14951 GROUP BY p.Name;
SELECT p.Name FROM Product p JOIN ShoppingCartItem sci ON p.ProductID = sci.ProductID WHERE sci.Quantity > 5;
SELECT DISTINCT p.Name FROM Product p JOIN PurchaseOrderDetail pod ON p.ProductID = pod.ProductID WHERE p.Class = 'L';
SELECT p.Name, pd.ListPrice FROM TransactionHistory th JOIN Product p ON th.ProductID = p.ProductID JOIN ProductListPriceHistory pd ON p.ProductID = pd.ProductID WHERE th.Quantity > 10000;
SELECT TOP 1 p.Name, p.Class, MIN(th.Quantity) AS LowestTransactedQuantity FROM Product p JOIN TransactionHistory th ON p.ProductID = th.ProductID WHERE p.Class = 'H' GROUP BY p.Name, p.Class ORDER BY LowestTransactedQuantity ASC
SELECT COUNT(*) FROM TransactionHistory WHERE ProductID IN (     SELECT ProductID     FROM Product     WHERE ProductLine = 'M' );
SELECT SUM((p.ListPrice - p.StandardCost) * sci.Quantity) AS TotalSalesProfit FROM Product p JOIN ShoppingCartItem sci ON p.ProductID = sci.ProductID WHERE sci.ShoppingCartID = 20621;
SELECT ProductName, ListPrice FROM Product WHERE Class = 'H';
SELECT ProductLine, COUNT(*) AS ProductCount FROM Product WHERE FinishedGoodsFlag = 1 GROUP BY ProductLine ORDER BY ProductCount DESC LIMIT 1;
SELECT ProductID, Rating, Comments FROM ProductReview WHERE ReviewerName LIKE 'J%';
SELECT P.Name, P.ProductLine, PR.Rating, P.ListPrice FROM Product AS P JOIN ProductReview AS PR ON P.ProductID = PR.ProductID WHERE PR.Rating = 1 ORDER BY P.ListPrice LIMIT 1;
SELECT     p.Name,     AVG(p.ListPrice - pc.StandardCost) AS Profit FROM     Product p JOIN     ProductCostHistory pc ON p.ProductID = pc.ProductID GROUP BY     p.Name HAVING     AVG(p.ListPrice - pc.StandardCost) > 100;
SELECT P.Name AS ProductName, PR.ReviewerName, PR.Rating, PR.Comments FROM Product AS P JOIN ProductReview AS PR ON P.ProductID = PR.ProductID WHERE P.ProductLine = 'R';
SELECT COUNT(ReviewerName) AS NumberOfReviews, AVG(Rating) AS AverageRating FROM ProductReview JOIN Product ON ProductReview.ProductID = Product.ProductID WHERE Product.Name = 'HL Mountain Pedal';
SELECT poh.PurchaseOrderID, pol.ProductID, pol.ReceivedQty, pol.RejectedQty FROM PurchaseOrderHeader poh JOIN PurchaseOrderDetail pol ON poh.PurchaseOrderID = pol.PurchaseOrderID WHERE pol.ReceivedQty = pol.RejectedQty AND pol.RejectedQty > 0;
SELECT TOP 1 p.Name, sod.UnitPrice FROM Product AS p JOIN SalesOrderDetail AS sod ON p.ProductID = sod.ProductID WHERE sod.RejectedQty = 0 ORDER BY sod.LineTotal DESC;
SELECT P.Name, P.ProductLine FROM PurchaseOrderDetail POD JOIN Product P ON POD.ProductID = P.ProductID WHERE POD.OrderQty >= 5000;
SELECT SUM(SalesOrderDetail.OrderQty) AS TotalOrderedQuantity FROM SalesOrderDetail JOIN Product ON SalesOrderDetail.ProductID = Product.ProductID WHERE Product.ProductLine = 'T';
SELECT TOP 1 p.Name, sod.LineTotal FROM SalesOrderDetail sod JOIN Product p ON sod.ProductID = p.ProductID WHERE p.Class = 'L' ORDER BY sod.LineTotal DESC;
SELECT TOP 1 p.Name FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID WHERE (pv.LastReceiptCost - pv.StandardPrice) = (     SELECT MAX(pv.LastReceiptCost - pv.StandardPrice)     FROM ProductVendor pv     JOIN Product p ON p.ProductID = pv.ProductID )
SELECT p.Name FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID WHERE pv.MinOrderQty = 100 ORDER BY p.Name DESC;
SELECT TOP 1 p.Name, (p.ListPrice - pc.StandardCost) AS Profit FROM Product AS p JOIN ProductReview AS pr ON p.ProductID = pr.ProductID JOIN ProductCostHistory AS pc ON p.ProductID = pc.ProductID WHERE pr.Rating = 5 ORDER BY Profit DESC;
SELECT SUM((p.ListPrice - p.StandardCost) * tr.Quantity) AS TotalProfit FROM TransactionHistory tr JOIN Product p ON tr.ProductID = p.ProductID WHERE tr.ProductID = 827;
SELECT FROMCurrencyCode, ToCurrencyCode, AVG(AverageRate) AS AvgRate FROM CurrencyRate GROUP BY FROMCurrencyCode, ToCurrencyCode ORDER BY AvgRate DESC LIMIT 1;
Error: 第 7027 个样本有 2 个SQL。
SELECT T1.Name, MAX(T1.SalesLastYear) AS MaxSalesLastYear FROM SalesTerritory AS T1 JOIN CountryRegion AS T2 ON T1.CountryRegionCode = T2.CountryRegionCode WHERE T2.CountryRegionCode = 'US' AND (T1.Group = 'Northwest' OR T1.Group = 'Southeast') GROUP BY T1.Name ORDER BY MaxSalesLastYear DESC LIMIT 1;
SELECT p.FirstName + p.MiddleName + p.LastName AS FullName FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE p.PersonType = 'EM' AND e.JobTitle = 'Document Control Manager' AND EXISTS (     SELECT 1     FROM Document d     WHERE d.Owner = e.BusinessEntityID     AND d.Status = 2     AND d.DocumentLevel = 1 );
SELECT TOP 1 c.Name FROM Customer c JOIN SalesOrderHeader soh ON c.CustomerID = soh.CustomerID JOIN SalesPerson sp ON soh.SalesPersonID = sp.BusinessEntityID WHERE sp.Bonus = (     SELECT MAX(Bonus)     FROM SalesPerson ) GROUP BY c.Name ORDER BY SUM(soh.SubTotal) DESC;
SELECT SUM(SOD.UnitPrice * SOD.OrderQty) AS TotalPrice FROM SalesOrderDetail SOD JOIN SalesOrderHeader SOH ON SOD.SalesOrderID = SOH.SalesOrderID WHERE SOD.SalesOrderID = 46625 AND SOH.Status = 11 AND SOH.Status <= 14 AND SOD.ProductID = 716;
SELECT COUNT(*) FROM Product WHERE ReorderPoint <= 600 AND MakeFlag = 1 AND DaysToManufacture = 1 AND EXISTS (     SELECT *     FROM BillOfMaterials     WHERE Product.BillOfMaterialsID = BillOfMaterials.BillOfMaterialsID     AND BOMLevel = 4 );
SELECT MAX(SalesPerson.Bonus) FROM SalesPerson JOIN SalesTerritory ON SalesPerson.TerritoryID = SalesTerritory.TerritoryID WHERE SalesTerritory.Name = 'Canada';
SELECT P.Name FROM Product P JOIN ProductReview PR ON P.ProductID = PR.ProductID WHERE PR.Rating = 1 GROUP BY P.Name;
SELECT COUNT(*) FROM Employee AS E JOIN EmployeeDepartmentHistory AS EDH ON E.BusinessEntityID = EDH.BusinessEntityID JOIN Department AS D ON EDH.DepartmentID = D.DepartmentID WHERE EDH.StartDate BETWEEN '2009-01-01' AND '2009-12-31' AND D.Name = 'Production';
SELECT TOP 1 p.FirstName + ' ' + p.MiddleName + ' ' + p.LastName AS FullName, e.JobTitle FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE p.PersonType = 'EM' AND p.NameStyle = 0 AND e.Gender = 'F' AND e.MaritalStatus = 'S' ORDER BY e.Rate DESC;
SELECT p.FirstName + COALESCE(p.MiddleName, '') + ' ' + p.LastName AS FullName, e.HireDate FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE p.Title = 'Vice President of Engineering'
SELECT COUNT(*) FROM Employee JOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID WHERE Employee.CurrentFlag = 1 AND EmployeePayHistory.Rate <= 30;
SELECT TOP 1 Department.Name FROM Department JOIN EmployeeDepartmentHistory ON Department.DepartmentID = EmployeeDepartmentHistory.DepartmentID WHERE EmployeeDepartmentHistory.StartDate = (SELECT MAX(StartDate) FROM EmployeeDepartmentHistory)
SELECT TOP 1 p.FirstName, p.LastName, e.Gender FROM Person AS p JOIN Employee AS e ON p.BusinessEntityID = e.BusinessEntityID WHERE p.PersonType = 'SC' ORDER BY e.HireDate DESC;
SELECT ep.PayFrequency FROM Employee AS e JOIN EmployeePayHistory AS ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE e.SickLeaveHours = (SELECT MIN(SickLeaveHours) FROM Employee) GROUP BY ep.PayFrequency ORDER BY COUNT(*) DESC LIMIT 1;
SELECT TOP 1 JobTitle, MIN(Rate) AS LowestPay FROM Employee JOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID GROUP BY JobTitle ORDER BY LowestPay ASC
SELECT COUNT(*) FROM EmployeeDepartmentHistory WHERE DepartmentID = (SELECT DepartmentID FROM Department WHERE Name = 'Finance') AND EndDate IS NULL;
Error: 第 7044 个样本有 2 个SQL。
SELECT     v.Name AS VendorName,     (pv.LastReceiptCost - pv.StandardPrice) AS NetProfit FROM     Vendor v JOIN     ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID WHERE     v.CreditRating = 3     AND (pv.LastReceiptCost - pv.StandardPrice) > (         SELECT AVG(pv.LastReceiptCost - pv.StandardPrice)         FROM ProductVendor pv         JOIN Vendor v ON v.BusinessEntityID = pv.BusinessEntityID         WHERE v.CreditRating = 3     );
SELECT COUNT(*) FROM Customer WHERE AddressLine2 IS NOT NULL;
SELECT TOP 1 A.PostalCode FROM Address A JOIN BusinessEntityAddress BEA ON A.AddressID = BEA.AddressID WHERE YEAR(BEA.ModifiedDate) = 2022 AND MONTH(BEA.ModifiedDate) = 10 ORDER BY BEA.ModifiedDate DESC;
SELECT MAX(EndDate - StartDate) AS LongestAssemblyDuration FROM BillOfMaterials WHERE ProductAssemblyID IS NOT NULL;
SELECT COUNT(*) FROM BillOfMaterials WHERE ProductAssemblyID IS NOT NULL AND EndDate IS NULL;
SELECT TOP 1 BOM.UnitMeasureCode FROM BillOfMaterials AS BOM WHERE BOM.PerAssemblyQty IN (     SELECT MAX(PerAssemblyQty)     FROM BillOfMaterials )
SELECT COUNT(*) FROM Document WHERE DocumentSummary IS NULL;
SELECT Title FROM Document WHERE Status = 1;
SELECT DISTINCT e.JobTitle FROM Employee e JOIN BusinessEntity b ON e.BusinessEntityID = b.BusinessEntityID JOIN Document d ON b.BusinessEntityID = d.Owner WHERE d.Status = 2;
SELECT EP.PayFrequency FROM Employee AS E JOIN EmployeePayHistory AS EP ON E.BusinessEntityID = EP.BusinessEntityID WHERE E.BirthDate = (SELECT MIN(BirthDate) FROM Employee)
SELECT COUNT(*) FROM Employee WHERE MaritalStatus = 'M' AND PayFrequency = 2;
SELECT TOP 1 e.BusinessEntityID, ep.Rate FROM Employee e JOIN EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE e.HireDate = (SELECT MAX(HireDate) FROM Employee) ORDER BY ep.Rate DESC;
SELECT COUNT(*) FROM Employee JOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID WHERE EmployeePayHistory.Rate > 40 AND Employee.Gender = 'M';
SELECT MAX(EmployeePayHistory.Rate) FROM Employee JOIN EmployeePayHistory ON Employee.BusinessEntityID = EmployeePayHistory.BusinessEntityID WHERE Employee.SalariedFlag = 1;
SELECT e.VacationHours FROM Employee e WHERE e.PayFrequency = 2;
SELECT TOP 1 e.PayFrequency, e.Rate FROM EmployeePayHistory e JOIN Employee e2 ON e.BusinessEntityID = e2.BusinessEntityID WHERE e2.VacationHours = (SELECT MAX(VacationHours) FROM Employee) ORDER BY e.Rate DESC;
SELECT COUNT(*) FROM Employee e JOIN EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE e.SickLeaveHours > 10 AND ep.Rate > 35;
SELECT COUNT(*) FROM Employee WHERE CurrentFlag = 1 AND Gender = 'M' AND PayFrequency = 2;
SELECT COUNT(*) FROM Employee WHERE PersonType = 'SP' AND Gender = 'M';
SELECT JobTitle FROM Employee WHERE BirthDate = (SELECT MIN(BirthDate) FROM Employee);
SELECT P.NameStyle FROM Person AS P JOIN Employee AS E ON P.BusinessEntityID = E.BusinessEntityID JOIN EmployeePayHistory AS EP ON E.BusinessEntityID = EP.BusinessEntityID WHERE EP.Rate = (     SELECT MIN(Rate)     FROM EmployeePayHistory )
SELECT COUNT(*) FROM Employee WHERE MaritalStatus = 'M' AND NameStyle = 0;
SELECT COUNT(*) FROM Employee WHERE SickLeaveHours > 10 AND BusinessEntityID IN (     SELECT BusinessEntityID     FROM Person     WHERE EmailPromotion IN (1, 2) );
SELECT * FROM Employee WHERE VacationHours > 20 AND EmailPromotion IN (1, 2);
SELECT TOP 1 p.AdditionalContactInfo FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE p.PersonType = 'SP' ORDER BY e.BirthDate ASC;
SELECT FirstName FROM Person WHERE Gender = 'M' AND NameStyle = 0 ORDER BY BusinessEntityID LIMIT 1;
SELECT COUNT(*) FROM Employee WHERE CurrentFlag = 1 AND Title = 'Mr';
SELECT p.FirstName, p.LastName, p.Title, e.BirthDate, e.HireDate, e.JobTitle FROM Person AS p JOIN Employee AS e ON p.BusinessEntityID = e.BusinessEntityID JOIN EmployeePayHistory ASeph ON e.BusinessEntityID = eph.BusinessEntityID WHERE e.MaritalStatus = 'M' GROUP BY p.FirstName, p.LastName, p.Title, e.BirthDate, e.HireDate, e.JobTitle ORDER BY MAX(eph.Rate) DESC LIMIT 1;
SELECT p.LastName, p.Suffix FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE p.PersonType = 'SC' ORDER BY e.SickLeaveHours DESC LIMIT 1;
SELECT COUNT(*) FROM Employee WHERE MaritalStatus = 'M' AND NameStyle = 1 AND BusinessEntityID IN (     SELECT BusinessEntityID     FROM EmployeePayHistory     WHERE PayFrequency = (         SELECT MAX(PayFrequency)         FROM EmployeePayHistory     ) );
SELECT COUNT(*) FROM Employee WHERE CurrentFlag = 1 AND EmailPromotion = 0;
Error: 第 7076 个样本有 2 个SQL。
SELECT AVG(VacationHours) FROM Employee WHERE PersonType = 'EM' AND Gender = 'M';
SELECT     (MAX(emp.Rate) - AVG(emp.Rate)) AS PayRateDifference FROM     (     SELECT         ep.BusinessEntityID, ep.Rate     FROM         EmployeePayHistory ep     INNER JOIN         Employee e ON ep.BusinessEntityID = e.BusinessEntityID     WHERE         e.MaritalStatus = 'M' AND e.EmailPromotion = 1     ) AS emp
SELECT     COUNT(CASE WHEN p.PersonType = 'SC' THEN 1 END) / COUNT(p.BusinessEntityID) AS Probability FROM     Person p WHERE     p.MaritalStatus = 'M' AND p.NameStyle = 0;
SELECT     (COUNT(CASE WHEN VacationHours > 20 THEN BusinessEntityID END) * 100.0 / COUNT(BusinessEntityID)) AS Percentage FROM     Employee WHERE     CurrentFlag = 1 AND SickLeaveHours > 10;
Error: 第 7081 个样本有 3 个SQL。
SELECT AVG(ActualCost) AS AverageCost FROM TransactionHistory WHERE TransactionType = 'P' AND TransactionDate BETWEEN '2012-01-01' AND '2012-06-30';
SELECT     (COUNT(CASE WHEN Gender = 'M' AND YEAR(HireDate) = 2009 AND MaritalStatus = 'M' THEN BusinessEntityID END) * 100.0 / COUNT(CASE WHEN Gender = 'M' AND YEAR(HireDate) = 2009 THEN BusinessEntityID END)) AS PercentageMarriedMaleEmployees2009 FROM     Employee
SELECT     (COUNT(CASE WHEN P.FirstName = 'Mary' AND P.EmailPromotion = 2 THEN P.BusinessEntityID END) * 100.0 / COUNT(P.BusinessEntityID)) AS Percentage FROM     Person P JOIN     BusinessEntityContact BEC ON P.BusinessEntityID = BEC.PersonID WHERE     P.PersonType = 'SC'
SELECT ProductID FROM (     SELECT p.ProductID, p.StandardCost, pr.LastReceiptCost,         (p.StandardCost - pr.LastReceiptCost) as Profit     FROM Product AS p     JOIN ProductVendor AS pv ON p.ProductID = pv.ProductID     JOIN PurchaseOrderDetail AS pod ON pv.BusinessEntityID = pod.VendorID     JOIN PurchaseOrderHeader AS po ON pod.PurchaseOrderID = po.PurchaseOrderID     JOIN ProductReview AS pr ON p.ProductID = pr.ProductID ) AS Subquery WHERE Profit < 0;
SELECT AVG(TotalDue) AS AverageTotalDue FROM SalesOrderHeader WHERE Status = 2;
SELECT     (COUNT(CASE WHEN SO.OrderQty <= 3 AND SO.UnitPriceDiscount = 0.2 THEN SO.SalesOrderID ELSE NULL END) * 100.0 / COUNT(SO.SalesOrderID)) AS Percentage FROM     SalesOrderDetail SO;
SELECT BusinessEntityID FROM SalesPerson WHERE (SalesYTD - SalesLastYear) / SalesLastYear > 0.6 AND Bonus > 3000;
SELECT     COUNT(CASE WHEN AddressTypeID = 2 THEN 1 END) AS HomeAddressCount,     COUNT(CASE WHEN AddressTypeID = 5 THEN 1 END) AS ShippingAddressCount FROM     BusinessEntityAddress WHERE     BusinessEntityID IN (SELECT BusinessEntityID FROM Store)
SELECT soh.CustomerID FROM SalesOrderHeader soh JOIN SalesOrderDetail sod ON soh.SalesOrderID = sod.SalesOrderID WHERE sod.OrderQty = 32 AND sod.UnitPrice = 35;
Error: 第 7091 个样本有 2 个SQL。
SELECT V.CreditRating FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID WHERE PV.AverageLeadTime = 16 AND PV.StandardPrice = 18.9900 AND PV.LastReceiptDate BETWEEN '2011-08-17 00:00:00' AND '2011-08-18 00:00:00';
Error: 第 7093 个样本有 2 个SQL。
SELECT JobTitle FROM Employee WHERE BusinessEntityID IN (     SELECT BusinessEntityID     FROM EmployeeDepartmentHistory     WHERE DepartmentID = 12     ORDER BY StartDate DESC     LIMIT 1 )
SELECT FirstName, LastName FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE e.MaritalStatus = 'S' AND e.Gender = 'M' AND e.JobTitle = 'Production Supervisor';
SELECT COUNT(*) FROM Product WHERE ProductSubcategoryID IN (     SELECT ProductSubcategoryID     FROM ProductSubcategory     WHERE Name = 'Subassembly' );
SELECT SUM(ScrappedQty) FROM WorkOrder WHERE ScrapReasonID IN (     SELECT ScrapReasonID     FROM ScrapReason     WHERE Name = 'Trim length too long' );
SELECT SUM(pod.OrderQty) AS TotalQuantity FROM PurchaseOrderDetail pod JOIN PurchaseOrderHeader po ON pod.PurchaseOrderID = po.PurchaseOrderID WHERE po.Status = 3 AND po.EmployeeID = 257;
SELECT COUNT(DISTINCT sod.ProductID) FROM SalesOrderDetail sod JOIN Product p ON sod.ProductID = p.ProductID LEFT JOIN SpecialOfferProduct sop ON p.ProductID = sop.ProductID WHERE sop.SpecialOfferID IS NULL AND sod.OrderQty > 2;
SELECT DISTINCT p.Name, th.TransactionType FROM Product p JOIN ProductInventory pi ON p.ProductID = pi.ProductID JOIN TransactionHistory th ON p.ProductID = th.ProductID WHERE p.Color = 'Yellow' AND p.Size = 62 AND pi.Quantity >= 500;
SELECT ps.Name FROM ProductSubcategory ps JOIN Product p ON ps.ProductSubcategoryID = p.ProductSubcategoryID WHERE p.Color = 'gray' ORDER BY p.SafetyStockLevel LIMIT 1;
SELECT TOP 1 pe.EndDate FROM ProductCostHistory pe JOIN Product p ON pe.ProductID = p.ProductID WHERE p.WeightUnitMeasureCode = 'G' ORDER BY p.Weight DESC;
SELECT     (SUM(CASE WHEN w.ScrappedQty > 0 AND p.Name IN ('Drill size too small', 'Drill size too large') THEN w.OrderQty ELSE 0 END) * 100.0 / SUM(w.OrderQty)) AS PercentageRejectedByDrillSize FROM     WorkOrder w JOIN     Product p ON w.ProductID = p.ProductID;
SELECT AVG(OrderQty) FROM (     SELECT soh.SalesOrderID, sod.OrderQty     FROM SalesOrderHeader soh     JOIN SalesOrderDetail sod ON soh.SalesOrderID = sod.SalesOrderID     JOIN ShipMethod sm ON soh.ShipMethodID = sm.ShipMethodID     WHERE sm.Name = 'Cargo Transport 5' ) AS subquery;
WITH CTE AS (     SELECT         ST.Name AS TerritoryName,         ST.SalesYTD,         ST.SalesLastYear,         ((ST.SalesYTD - ST.SalesLastYear) / ST.SalesLastYear) * 100 AS IncreaseInSales     FROM SalesTerritory ST ), CTE2 AS (     SELECT         TerritoryName,         IncreaseInSales,         RANK() OVER (ORDER BY IncreaseInSales DESC) AS SalesIncreaseRank     FROM CTE ) SELECT     STR.Name FROM CTE2 JOIN StateProvince SP ON CTE2.TerritoryName = SP.Name JOIN SalesTaxRate STR ON SP.StateProvinceID = STR.StateProvinceID WHERE CTE2.SalesIncreaseRank = 1;
SELECT COUNT(*) FROM Employee e JOIN EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE ep.PayFrequency = 1 AND ep.Rate > 50;
SELECT FirstName + ' ' + ISNULL(MiddleName, '') + ' ' + LastName AS FullName FROM Person WHERE BusinessEntityID = 1 AND PersonType = 'EM';
SELECT Name FROM Vendor WHERE BusinessEntityID = 1492;
SELECT COUNT(*) FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID WHERE pv.MinOrderQty > 500 AND pv.MaxOrderQty < 15000;
SELECT Name FROM Department WHERE GroupName = 'Executive General and Administration';
SELECT LastName FROM works_cycles.Person WHERE PersonType = 'EM' AND MiddleName LIKE 'C%';
SELECT COUNT(DISTINCT pv.BusinessEntityID) AS NumVendors FROM ProductVendor pv WHERE pv.AverageLeadTime = 25 AND pv.OnOrderQty > 0;
SELECT TOP 3 ProductNumber FROM Product ORDER BY StandardCost ASC;
SELECT COUNT(*) FROM Product WHERE Color = 'Black' AND FinishedGoodsFlag = 0;
Error: 第 7115 个样本有 2 个SQL。
SELECT AddressLine1, AddressLine2 FROM Address WHERE AddressID = 11906;
SELECT (SELECT LastReceiptCost FROM ProductVendor WHERE BusinessEntityID = 1580) - (SELECT StandardPrice FROM ProductVendor WHERE BusinessEntityID = 1580) AS NetProfit FROM dual
SELECT SUM(soh.TotalDue) as SalesRevenue FROM SalesOrderHeader soh JOIN SalesOrderDetail sod ON soh.SalesOrderID = sod.SalesOrderID WHERE sod.ProductID = (SELECT ProductID FROM Product WHERE ProductNumber = '740')
SELECT ReviewerName, COUNT(*) AS BestRatingCount FROM ProductReview WHERE Rating = 5 GROUP BY ReviewerName HAVING COUNT(*) > 0 ORDER BY BestRatingCount DESC;
SELECT BusinessEntityID FROM Vendor WHERE CreditRating = 5;
SELECT FirstName, BirthDate FROM Employee WHERE BusinessEntityID = 18;
SELECT ct.Name AS Job FROM ContactType ct JOIN BusinessEntityContact bec ON ct.ContactTypeID = bec.ContactTypeID WHERE bec.PersonID = 322 AND ct.Name = 'job';
SELECT TOP 3 BE.BusinessEntityID, BE.Name FROM BusinessEntity AS BE JOIN Person AS P ON BE.BusinessEntityID = P.BusinessEntityID JOIN EmailAddress AS EA ON P.BusinessEntityID = EA.BusinessEntityID JOIN PhoneNumberType AS PNT ON PNT.PhoneNumberTypeID = EA.PhoneNumberTypeID WHERE PNT.Name = 'Cell'
SELECT Currency.Name FROM CountryRegionCurrency INNER JOIN Currency ON CountryRegionCurrency.CurrencyCode = Currency.CurrencyCode INNER JOIN CountryRegion ON CountryRegionCurrency.CountryRegionCode = CountryRegion.CountryRegionCode WHERE CountryRegion.Name = 'Brazil';
SELECT COUNT(*) FROM Employee JOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID JOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID WHERE Department.Name = 'Finance';
SELECT AVG(AverageLeadTime) AS Average_Lead_Time, Name FROM ProductVendor JOIN Vendor ON ProductVendor.BusinessEntityID = Vendor.BusinessEntityID WHERE Vendor.BusinessEntityID = 1496;
SELECT     (SELECT COUNT(*) FROM Address WHERE City = 'Bothell') -     (SELECT COUNT(*) FROM Address WHERE City = 'Kenmore') AS Difference,     StateProvince.Name FROM     StateProvince JOIN     Address ON StateProvince.StateProvinceID = Address.StateProvinceID WHERE     City IN ('Bothell', 'Kenmore') GROUP BY     StateProvince.Name;
SELECT pm.Name FROM ProductModel AS pm JOIN ProductModelProductDescriptionCulture AS pmpdc ON pm.ProductModelID = pmpdc.ProductModelID JOIN ProductDescription AS pd ON pmpdc.ProductDescriptionID = pd.ProductDescriptionID JOIN Culture AS c ON pmpdc.CultureID = c.CultureID WHERE pd.Description LIKE '%chromoly steel%' AND c.Name = 'English';
SELECT COUNT(T1.BusinessEntityID) AS TotalCompanies, T2.Group AS GeographicalLocation FROM SalesPerson AS T1 JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.CommissionPct >= 0.018 GROUP BY T2.Group;
SELECT TOP 10 T.Name AS 'Phone Number Type', COUNT(*) AS 'Count' FROM PhoneNumberType T JOIN BusinessEntity BE ON BE.PhoneNumberTypeID = T.PhoneNumberTypeID GROUP BY T.Name ORDER BY COUNT(*) DESC;
SELECT TOP 1 ContactType.Name FROM ContactType JOIN BusinessEntityContact ON ContactType.ContactTypeID = BusinessEntityContact.ContactTypeID GROUP BY ContactType.Name ORDER BY COUNT(BusinessEntityContact.BusinessEntityID) DESC;
SELECT EmailAddress.EmailAddress FROM EmailAddress JOIN Person ON EmailAddress.BusinessEntityID = Person.BusinessEntityID WHERE Person.PersonType = 'SP'
SELECT JobTitle FROM Employee WHERE FirstName = 'Suchitra';
SELECT COUNT(*) FROM Person WHERE PersonType = 'EM' AND MaritalStatus = 'S';
SELECT     (SELECT COUNT(*) FROM Culture WHERE Name = 'English') -     (SELECT COUNT(*) FROM Culture WHERE Name = 'Arabic') AS LanguageDifference;
SELECT AddressLine1 FROM Address WHERE AddressID IN (     SELECT AddressID     FROM BusinessEntityAddress     WHERE BusinessEntityID = 1 );
SELECT BusinessEntityID FROM BusinessEntityAddress JOIN Address ON BusinessEntityAddress.AddressID = Address.AddressID WHERE Address.City = 'Duvall';
SELECT (COUNT(*) FILTER (WHERE Culture.Name = 'Thai') * 100.0 / COUNT(*)) AS ThaiPercentage FROM works_cycles.Culture;
SELECT (COUNT(CASE WHEN Gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS MalePercentage FROM [Person] WHERE PersonType = 'EM'
SELECT A.AddressLine1, SP.City, SP.Name AS StateProvinceName FROM Address A JOIN StateProvince SP ON A.StateProvinceID = SP.StateProvinceID WHERE A.AddressID = 15873 AND SP.IsOnlyStateProvinceFlag = 0;
SELECT     AddressLine1 + AddressLine2 AS Full_Address FROM     Address WHERE     AddressID IN (         SELECT             AddressID         FROM             BusinessEntityAddress         WHERE             BusinessEntityID = '24'     )
Error: 第 7142 个样本有 2 个SQL。
SELECT BusinessEntityID FROM Person WHERE FirstName = 'Emma' AND LastName = 'Harris';
SELECT LocationID FROM Location WHERE Name = 'Debur and Polish';
SELECT DepartmentID FROM Department WHERE GroupName = 'Sales and Marketing';
SELECT sp.BusinessEntityID FROM SalesOrderHeader soh JOIN SalesPerson sp ON soh.SalesPersonID = sp.BusinessEntityID WHERE soh.TotalDue = 1635823.3967 AND YEAR(soh.OrderDate) = YEAR(CURRENT_TIMESTAMP) - 1;
SELECT StartTime FROM Shift WHERE ShiftID = 2;
SELECT Name FROM ContactType WHERE ContactTypeID = 16;
SELECT MIN(ShipBase) FROM ShipMethod WHERE Name = 'OVERSEAS - DELUXE';
SELECT Name FROM Culture WHERE CultureID = 'fr';
SELECT CurrencyCode FROM Currency WHERE Name = 'Mauritius Rupee';
SELECT PhoneNumberTypeID FROM PhoneNumberType WHERE Name = 'Cell'
SELECT MIN(BirthDate) AS Birthday FROM Employee WHERE JobTitle = 'Production Technician' AND HireDate = '2008-12-07';
SELECT pm.Name FROM Product p JOIN ProductModel pm ON p.ProductModelID = pm.ProductModelID WHERE p.ProductID = 793;
Error: 第 7155 个样本有 2 个SQL。
SELECT A.AddressLine1, A.AddressLine2, A.City FROM Address AS A JOIN BusinessEntityAddress AS BEA ON A.AddressID = BEA.AddressID WHERE BEA.BusinessEntityID = 4;
SELECT bom.UnitMeasureCode FROM BillOfMaterials bom WHERE bom.ComponentID = 494 AND bom.EndDate IS NULL;
SELECT COUNT(*) FROM Document d JOIN Employee e ON d.Owner = e.BusinessEntityID WHERE e.JobTitle = 'Document Control Assistant' AND e.BirthDate = '1975-12-25' AND d.DocumentSummary IS NULL;
SELECT p.ListPrice FROM Product AS p JOIN ProductCostHistory ASpch ON p.ProductID = pch.ProductID WHERE pch.StartDate >= '2012-10-01' AND p.StandardCost + 21.9037 = p.ListPrice;
SELECT LargePhotoFileName FROM ProductPhoto WHERE ProductPhotoID = (SELECT ProductPhotoID FROM ProductProductPhoto WHERE ProductID = 1)
SELECT LENGTH(p.PasswordHash) FROM Person pe JOIN Password p ON pe.BusinessEntityID = p.BusinessEntityID WHERE pe.FirstName = 'Catherine' AND pe.LastName = 'Ward';
SELECT Rating FROM ProductReview WHERE ReviewerName = 'Jill' AND ProductID = (     SELECT ProductID     FROM Product     WHERE Name = 'HL Mountain Pedal' );
SELECT (StandardPrice - LastReceiptCost) AS Profit FROM ProductVendor JOIN Product ON ProductVendor.ProductID = Product.ProductID WHERE Product.Name = 'Freewheel'
SELECT     CASE         WHEN Bonus > 0 THEN 'Yes'         ELSE 'No'     END AS TaskCompleted FROM     SalesPerson WHERE     PersonID IN (         SELECT             PersonID         FROM             Person         WHERE             FirstName = 'Rachel' AND             LastName = 'Valdez'     );
SELECT COUNT(*) FROM (     SELECT DISTINCT SalesTaxRateID     FROM SalesTaxRate     WHERE Name LIKE '%+%' AND StateProvinceID IN (         SELECT StateProvinceID         FROM StateProvince         WHERE Name = 'Quebec'     ) ) AS T;
SELECT EmailAddress FROM EmailAddress JOIN Person ON EmailAddress.BusinessEntityID = Person.BusinessEntityID WHERE Person.FirstName = 'Kevin' AND Person.LastName = 'Wright' AND Person.MiddleName = 'A';
SELECT COUNT(*) FROM StateProvince WHERE CountryRegionCode = 'FRA' AND IsOnlyStateProvinceFlag = 1 AND StateProvinceCode IS NULL;
SELECT TransactionType FROM TransactionHistory WHERE ProductID = (SELECT ProductID FROM Product WHERE Name = 'HL Road Frame - Black, 48') AND TransactionDate = '2012-12-13';
SELECT TransactionType FROM TransactionHistory WHERE ProductID = (SELECT ProductID FROM Product WHERE Name = 'LL Road Handlebars') AND TransactionDate = '2012-11-03';
SELECT CreditRating FROM Vendor WHERE rowguid = '33671A4E-DF2B-4879-807B-E3F930DD5C0C';
SELECT PreferredVendorStatus FROM Vendor WHERE BusinessEntityID = (     SELECT BusinessEntityID     FROM BusinessEntity     WHERE rowguid = '684F328D-C185-43B9-AF9A-37ACC680D2AF' );
SELECT v.ActiveFlag FROM Vendor v JOIN BusinessEntity be ON v.BusinessEntityID = be.BusinessEntityID WHERE be.PersonID = 2054;
SELECT PhoneNumber FROM Person p JOIN PersonPhone pp ON p.BusinessEntityID = pp.BusinessEntityID JOIN PhoneNumberType pnt ON pp.PhoneNumberTypeID = pnt.PhoneNumberTypeID WHERE p.FirstName = 'Gerald' AND p.LastName = 'Patel';
SELECT PhoneNumberType.Name FROM PhoneNumberType JOIN PersonPhone ON PhoneNumberType.PhoneNumberTypeID = PersonPhone.PhoneNumberTypeID WHERE PersonPhone.BusinessEntityID = 13626;
SELECT JobTitle FROM Employee WHERE FirstName = 'Lynn' AND LastName = 'Tsoflias';
SELECT COUNT(*) FROM ProductSubcategory WHERE ProductCategoryID = 1;
SELECT     (COUNT(CASE WHEN D.DocumentSummary IS NULL THEN 1 END) * 100.0 / COUNT(D.DocumentSummary)) AS PrivateDocumentPercentage FROM     Document D JOIN     Employee E ON D.Owner = E.BusinessEntityID WHERE     E.JobTitle = 'Document Control Assistant' AND E.HireDate = '2009-01-22';
SELECT (hl.LastReceiptCost - hl.StandardPrice) / hl.StandardPrice as profit_ratio FROM ProductVendor pv JOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID JOIN Product p ON pv.ProductID = p.ProductID JOIN (     SELECT ProductID, MAX(LastReceiptDate) as LatestReceiptDate     FROM ProductVendor     GROUP BY ProductID ) maxReceipt ON pv.ProductID = maxReceipt.ProductID AND pv.LastReceiptDate = maxReceipt.LatestReceiptDate WHERE p.Name = 'HL Grip Tape' AND pv.BusinessEntityID = v.BusinessEntityID AND pv.ProductID = p.ProductID AND pv.LastReceiptDate = (     SELECT MAX(LastReceiptDate)     FROM ProductVendor     WHERE ProductID = p.ProductID ) AND v.Name = 'HL Components'
SELECT     (COUNT(CASE WHEN PhoneNumberTypeID = 1 THEN PhoneNumberTypeID END) * 100.0 / COUNT(PhoneNumberTypeID)) AS PercentageOfCellPhones FROM     PhoneNumberType pnt     JOIN PhoneNumber pn ON pnt.PhoneNumberTypeID = pn.PhoneNumberTypeID;
SELECT ProductAssemblyID FROM BillOfMaterials WHERE UnitMeasureCode = 'EA' AND BOMLevel = 2 AND PerAssemblyQty > 10;
SELECT COUNT(DISTINCT wo.LocationID) FROM WorkOrderRouting wo WHERE wo.ActualResourceHrs = 2;
SELECT StockedQty FROM ProductInventory WHERE LocationID = 40;
SELECT     UnitMeasureCode,     SUM(PerAssemblyQty) AS TotalPerAssemblyQty,     Name FROM     (     SELECT         UnitMeasureCode,         PerAssemblyQty,         Name     FROM         BillOfMaterials b     JOIN         UnitMeasure u ON b.UnitMeasureCode = u.UnitMeasureCode     WHERE         UnitMeasureCode IN ('EA', 'IN', 'OZ')     ) AS t GROUP BY     UnitMeasureCode,     Name;
SELECT ProductID FROM Product WHERE ProductID NOT IN (SELECT ProductID FROM WorkOrder)
SELECT p.Name FROM Product p JOIN TransactionHistory th ON p.ProductID = th.ProductID WHERE th.TransactionType = 'P';
SELECT FirstName, MiddleName, LastName FROM Person JOIN Employee ON Person.BusinessEntityID = Employee.BusinessEntityID WHERE Employee.JobTitle = 'Accountant';
SELECT JobTitle FROM Employee WHERE FirstName = 'Ken' AND LastName = 'Sánchez' AND CurrentFlag = 1;
SELECT COUNT(*) FROM Employee WHERE Gender = 'M' AND EmailPromotion = 0;
SELECT TOP 1 SP.BusinessEntityID, SP.SalesQuota, SUM(SP.SalesLastYear) / SUM(SP.SalesQuota) * 100 as Percentage FROM SalesPerson SP JOIN SalesPersonQuotaHistory SPQH ON SP.BusinessEntityID = SPQH.BusinessEntityID WHERE YEAR(SPQH.QuotaDate) = 2013 GROUP BY SP.BusinessEntityID, SP.SalesQuota ORDER BY Percentage DESC
SELECT COUNT(*) FROM Employee WHERE MaritalStatus = 'M' AND PersonType = 'EM';
SELECT COUNT(*) FROM Employee JOIN Person ON Employee.BusinessEntityID = Person.BusinessEntityID WHERE Employee.JobTitle LIKE 'Production Technician%' AND Person.MaritalStatus = 'S' AND Person.PersonType = 'VC';
SELECT SUM(SickLeaveHours) FROM Employee WHERE EmailPromotion = 0;
SELECT BusinessEntityID, FirstName, LastName, HireDate FROM Person WHERE PersonType = 'SP' AND YEAR(HireDate) < 2010;
SELECT TOP 1 sp.BusinessEntityID, sp.SalesQuota FROM SalesPerson AS sp WHERE sp.PersonType = 'SP' AND YEAR(sp.SalesQuota) = 2011 ORDER BY sp.SalesYTD DESC;
SELECT COUNT(*) FROM Person JOIN Employee ON Person.BusinessEntityID = Employee.BusinessEntityID WHERE Person.FirstName = 'Alex' AND Employee.MaritalStatus = 'S' AND Employee.OrganizationLevel = 1;
SELECT AVG(VacationHours) FROM Employee WHERE PersonType = 'SP';
SELECT p.LastName, e.JobTitle FROM Document d JOIN BusinessEntity b ON d.Owner = b.BusinessEntityID JOIN Person p ON b.BusinessEntityID = p.BusinessEntityID JOIN Employee e ON b.BusinessEntityID = e.BusinessEntityID WHERE d.Title = 'Crank Arm and Tire Maintenance'
SELECT COUNT(Employee.BusinessEntityID), Employee.OrganizationLevel FROM Employee WHERE Employee.Suffix IS NULL GROUP BY Employee.OrganizationLevel;
SELECT sp.BusinessEntityID FROM SalesPerson sp JOIN SalesPersonQuotaHistory spqh ON sp.BusinessEntityID = spqh.BusinessEntityID WHERE YEAR(spqh.QuotaDate) = 2013 AND spqh.SalesQuota <= (     SELECT SUM(SalesYTD)     FROM SalesPerson     WHERE BusinessEntityID = sp.BusinessEntityID ) AND EXISTS (     SELECT 1     FROM SalesTerritoryHistory sth     WHERE sth.BusinessEntityID = sp.BusinessEntityID     AND sth.TerritoryID = 1 );
SELECT DISTINCT p.LastName FROM Person AS p JOIN Employee AS e ON p.BusinessEntityID = e.BusinessEntityID JOIN JobCandidate AS jc ON jc.BusinessEntityID = e.BusinessEntityID WHERE jc.Resume IS NOT NULL AND jc.BusinessEntityID IS NOT NULL;
SELECT E.EmailAddress FROM EmailAddress E JOIN Person P ON E.BusinessEntityID = P.BusinessEntityID JOIN Employee EM ON P.BusinessEntityID = EM.BusinessEntityID WHERE EM.Gender = 'F' AND EM.MaritalStatus = 'S';
SELECT DISTINCT p.Color FROM Product p JOIN ProductProductPhoto pp ON p.ProductID = pp.ProductID JOIN ProductPhoto pf ON pp.ProductPhotoID = pf.ProductPhotoID JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE pr.Comments IS NOT NULL;
SELECT     SUM(spqh.SalesQuota) AS ProjectedSalesQuota2013,     sp.SalesYTD AS SalesYTD FROM     SalesPersonQuotaHistory spqh JOIN     SalesPerson sp ON spqh.BusinessEntityID = sp.BusinessEntityID WHERE     spqh.BusinessEntityID = 275 AND YEAR(spqh.QuotaDate) = 2013;
SELECT BusinessEntityID FROM SalesPersonQuotaHistory WHERE YEAR(QuotaDate) = 2013 AND SalesQuota > (     SELECT SalesYTD     FROM SalesPerson     WHERE SalesPerson.BusinessEntityID = SalesPersonQuotaHistory.BusinessEntityID )
SELECT     (COUNT(CASE WHEN Gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS PercentageFemale FROM     works_cycles.Person p WHERE     p.EmailPromotion = 1;
SELECT     SUM(CASE WHEN E.MaritalStatus = 'M' THEN 1 ELSE 0 END) AS MarriedCount,     SUM(CASE WHEN E.MaritalStatus = 'S' THEN 1 ELSE 0 END) AS SingleCount,     CAST(SUM(CASE WHEN E.MaritalStatus = 'M' THEN 1 ELSE 0 END) AS FLOAT) /     CAST(SUM(CASE WHEN E.MaritalStatus = 'S' THEN 1 ELSE 0 END) AS FLOAT) * 100 AS Percentage FROM     Employee E WHERE     E.PersonType = 'EM' AND E.SalariedFlag = 1;
SELECT     SUM(SP.Bonus) AS TotalBonus,     (SUM(SP.Bonus) / SUM(Spqh.SalesQuota)) * 100 AS BonusPercentage FROM     SalesPerson SP JOIN     SalesPersonQuotaHistory Spqh ON SP.BusinessEntityID = Spqh.BusinessEntityID WHERE     YEAR(Spqh.QuotaDate) = 2013;
SELECT COUNT(DISTINCT CardType) AS TotalCardTypes,        SUM(CASE WHEN CardType = 'Vista' THEN 1 ELSE 0 END) AS VistaCards FROM CreditCard;
SELECT Name FROM Product WHERE ProductID = 475;
SELECT COUNT(*) FROM Employee WHERE BirthDate < '1980-01-01' AND (MaritalStatus = 'S' OR MaritalStatus IS NULL);
SELECT Store.Name FROM Store JOIN SalesPerson ON Store.SalesPersonID = SalesPerson.BusinessEntityID WHERE SalesPerson.BusinessEntityID = 277;
SELECT SUM(TransactionQuantity) FROM TransactionHistory WHERE ProductID = 989 AND TransactionType = 'S' AND TransactionDate BETWEEN '2013-08-01' AND '2013-08-31';
SELECT CardNumber FROM CreditCard WHERE ExpYear < 2007;
SELECT Rate FROM EmployeePayHistory JOIN Employee ON EmployeePayHistory.BusinessEntityID = Employee.BusinessEntityID WHERE DATEDIFF(year, BirthDate, HireDate) = 20;
SELECT T.Name FROM SalesPerson AS SP JOIN SalesTerritory AS T ON SP.TerritoryID = T.TerritoryID WHERE SP.BusinessEntityID = 277;
SELECT FirstName + ' ' + ISNULL(MiddleName, '') + ' ' + LastName AS FullName FROM Employee WHERE JobTitle = 'Vice President of Production';
SELECT COUNT(*) FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID JOIN Shift s ON e.BusinessEntityID = s.BusinessEntityID WHERE d.Name = 'Information Service' AND s.Name = 'Evening';
SELECT PurchaseOrderID FROM PurchaseOrderHeader WHERE VendorID IN (     SELECT VendorID     FROM Vendor     WHERE CreditRating = 5 );
SELECT PhoneNumberType.Name FROM PhoneNumberType JOIN EmailAddress ON PhoneNumberType.PhoneNumberTypeID = EmailAddress.BusinessEntityID WHERE EmailAddress.EmailAddress = '114-555-0100';
SELECT SUM(po.Freight) AS TotalShipmentCost FROM PurchaseOrderHeader po JOIN ShipMethod sm ON po.ShipMethodID = sm.ShipMethodID WHERE sm.Name = 'cargo transport 5' AND po.OrderDate = '2011-12-14';
SELECT COUNT(*) FROM SalesOrderHeader WHERE SalesPersonID IN (     SELECT BusinessEntityID     FROM Person     WHERE PersonType = 'SP' AND FirstName = 'David' AND MiddleName = 'R.' AND LastName = 'Campbell' );
SELECT EmailAddress.EmailAddress FROM EmailAddress JOIN Person ON EmailAddress.BusinessEntityID = Person.BusinessEntityID WHERE Person.JobTitle = 'Facilities Manager';
SELECT COUNT(*) FROM Customer c JOIN SalesTerritory st ON c.TerritoryID = st.TerritoryID WHERE st.Name = 'Canada';
SELECT a.AddressLine1, a.AddressLine2, a.City FROM Address AS a JOIN SalesOrderHeader AS soh ON a.AddressID = soh.ShipToAddressID WHERE soh.SalesOrderID = 43873;
Error: 第 7225 个样本有 2 个SQL。
SELECT COUNT(*) FROM Employee e JOIN EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE e.JobTitle = 'Production Technician' AND ep.Rate < (SELECT AVG(Rate) FROM EmployeePayHistory WHERE BusinessEntityID IN (SELECT BusinessEntityID FROM Employee WHERE JobTitle = 'Production Technician'));
SELECT     SUM(CASE WHEN T3.CountryRegionCode = 'UK' THEN 1 ELSE 0 END) * 1.0 / COUNT(T1.SalesOrderID) AS Proportion FROM     SalesOrderHeader AS T1 INNER JOIN     SalesPerson AS T2 ON T1.SalesPersonID = T2.BusinessEntityID INNER JOIN     CountryRegion AS T3 ON T2.TerritoryID = T3.CountryRegionCode;
SELECT ModifiedDate FROM EmailAddress WHERE EmailAddress = '1500 555-0143';
SELECT BusinessEntityID FROM SalesPerson WHERE SalesYTD = (SELECT MAX(SalesYTD) FROM SalesPerson)
SELECT * FROM Vendor WHERE ActiveFlag = 1 AND PurchasingWebServiceURL IS NOT NULL;
SELECT T.Name FROM SalesTerritory T JOIN Customer C ON T.TerritoryID = C.TerritoryID WHERE C.ModifiedDate BETWEEN '2014-09-12 00:00:00' AND '2014-09-12 23:59:59' GROUP BY T.Name ORDER BY COUNT(C.CustomerID) DESC LIMIT 1;
SELECT SUM(TotalDue) AS Total_Cost FROM SalesOrderHeader WHERE OrderDate = '2013-05-29';
SELECT TOP 1 FirstName, COUNT(*) AS Count FROM Person WHERE PersonType = 'VC' GROUP BY FirstName ORDER BY Count DESC;
SELECT FirstName + ' ' + ISNULL(MiddleName, '') + ' ' + LastName AS FullName FROM Person WHERE BusinessEntityID IN (     SELECT BusinessEntityID     FROM Employee     WHERE JobTitle = 'Production Technician - WC50' );
SELECT COUNT(*) FROM SalesOrderDetail sod JOIN Product p ON sod.ProductID = p.ProductID WHERE p.Name = 'Minipump';
SELECT BusinessEntityID FROM PersonCreditCard WHERE CreditCardID = (     SELECT CreditCardID     FROM CreditCard     WHERE CardNumber = '11113366963373' );
SELECT a.AddressLine1, a.AddressLine2, a.City FROM Address AS a JOIN BusinessEntityAddress AS bea ON a.AddressID = bea.AddressID JOIN Person AS p ON bea.BusinessEntityID = p.BusinessEntityID JOIN AddressType AS at ON bea.AddressTypeID = at.AddressTypeID WHERE p.BusinessEntityID = 5555 AND at.Name = 'Home';
SELECT p.Name FROM Product p JOIN SpecialOfferProduct sop ON p.ProductID = sop.ProductID WHERE sop.SpecialOfferID = 15;
SELECT cc.CardNumber FROM CreditCard cc JOIN PersonCreditCard pcc ON cc.CreditCardID = pcc.CreditCardID JOIN Person p ON p.BusinessEntityID = pcc.BusinessEntityID WHERE p.FirstName = 'Michelle' AND p.MiddleName = 'E' AND p.LastName = 'Cox';
SELECT sr.Name FROM SalesOrderHeaderSalesReason sohsr JOIN SalesReason sr ON sohsr.SalesReasonID = sr.SalesReasonID WHERE sohsr.SalesOrderID = 51883;
SELECT cc.CardNumber FROM CreditCard cc JOIN SalesOrderHeader soh ON cc.CreditCardID = soh.CreditCardID WHERE soh.SalesOrderID = 45793;
SELECT sp.BusinessEntityID, p.FirstName, p.LastName FROM SalesPerson sp JOIN Person p ON sp.BusinessEntityID = p.BusinessEntityID JOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID WHERE st.Name = 'Northwest' AND st.CountryRegionCode = 'US';
SELECT TOP 1 pe.FirstName, pe.LastName, ep.Rate FROM Employee AS e JOIN Person AS pe ON e.BusinessEntityID = pe.BusinessEntityID JOIN EmployeePayHistory AS ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE e.JobTitle = 'Production Technician' ORDER BY ep.Rate DESC;
SELECT p.FirstName + p.MiddleName + p.LastName AS FullName FROM SalesPerson sp JOIN Person p ON sp.BusinessEntityID = p.BusinessEntityID WHERE sp.TerritoryID = 9;
SELECT p.Description FROM ProductDescription AS p JOIN ProductModelProductDescriptionCulture AS pd ON p.ProductDescriptionID = pd.ProductDescriptionID WHERE pd.ProductModelID = (     SELECT pm.ProductModelID     FROM Product AS pr     JOIN ProductSubcategory AS ps ON pr.ProductSubcategoryID = ps.ProductSubcategoryID     JOIN ProductCategory AS pc ON ps.ProductCategoryID = pc.ProductCategoryID     JOIN ProductModel AS pm ON pr.ProductModelID = pm.ProductModelID     WHERE pr.ProductID = 762 )
Error: 第 7246 个样本有 2 个SQL。
SELECT     (COUNT(CASE WHEN s.Name = 'Night' THEN 1 END) * 100.0 / COUNT(s.ShiftID)) AS percentage FROM     Employee e JOIN     Shift s ON e.ShiftID = s.ShiftID;
SELECT COUNT(*) FROM Employee WHERE MaritalStatus = 'M' AND Gender = 'M' AND BirthDate <= '1959-12-31';
SELECT TOP 5 p.Name, MAX(plph.ListPrice) as HighestSellingPrice FROM Product p JOIN ProductListPriceHistory plph ON p.ProductID = plph.ProductID GROUP BY p.Name ORDER BY HighestSellingPrice DESC;
SELECT MIN(HireDate) AS FirstHireDate FROM Employee WHERE JobTitle = 'Accountant';
SELECT JobTitle, COUNT(JobTitle) as CountOfJobTitle FROM Employee WHERE HireDate BETWEEN '2007-01-01' AND '2007-12-31' GROUP BY JobTitle ORDER BY CountOfJobTitle DESC LIMIT 1;
SELECT TOP 1 v.Name, (p.LastReceiptCost - p.StandardPrice) AS ProfitOnNet FROM ProductVendor pv JOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID JOIN (     SELECT ProductID, MAX(StandardPrice) AS MaxStandardPrice     FROM ProductVendor     GROUP BY ProductID ) maxpv ON pv.ProductID = maxpv.ProductID AND pv.StandardPrice = maxpv.MaxStandardPrice JOIN PurchaseOrderHeader po ON po.VendorID = v.BusinessEntityID JOIN PurchaseOrderDetail pd ON pd.PurchaseOrderID = po.PurchaseOrderID JOIN Product p ON pd.ProductID = p.ProductID WHERE pv.StandardPrice = (     SELECT MAX(StandardPrice)     FROM ProductVendor )
SELECT COUNT(DISTINCT EDH.DepartmentID) FROM EmployeeDepartmentHistory EDH JOIN Employee E ON EDH.BusinessEntityID = E.BusinessEntityID WHERE E.FirstName = 'Sheela' AND E.LastName = 'Ward' AND (EDH.StartDate >= '2011-01-01' AND EDH.EndDate <= '2012-12-31') AND YEAR(EDH.StartDate) BETWEEN 2011 AND 2012 AND YEAR(EDH.EndDate) BETWEEN 2011 AND 2012;
SELECT AVG(DATE_PART('year', AGE(TIMESTAMP '2009-12-31', e.BirthDate))) AS AverageAge FROM Employee e WHERE e.JobTitle = 'Sales Agent';
SELECT GroupName, Name FROM Department d WHERE d.DepartmentID = (     SELECT DepartmentID     FROM EmployeeDepartmentHistory edh     GROUP BY DepartmentID     ORDER BY COUNT(DepartmentID) ASC     LIMIT 1 );
SELECT MAX(DATEADD(year, -BirthDate, '20151231') - DATEADD(year, YEAR(BirthDate), '0')), Rate FROM Employee WHERE JobTitle = 'Marketing Specialist' ORDER BY DATEADD(year, -BirthDate, '20151231') - DATEADD(year, YEAR(BirthDate), '0') DESC LIMIT 1;
SELECT V.Name, SUM(POD.LineTotal) AS TotalAmountDue FROM Vendor V JOIN PurchaseOrderHeader POH ON V.BusinessEntityID = POH.VendorID JOIN PurchaseOrderDetail POD ON POH.PurchaseOrderID = POD.PurchaseOrderID WHERE V.BusinessEntityID = (     SELECT TOP 1 BusinessEntityID     FROM (         SELECT BusinessEntityID, MIN(UnitPrice) AS MinUnitPrice         FROM PurchaseOrderDetail         GROUP BY BusinessEntityID     ) AS T     ORDER BY MinUnitPrice ASC ) GROUP BY V.Name;
SELECT     poh.EmployeeID,     DATEDIFF(YEAR, e.BirthDate, e.HireDate) AS AgeAtHire FROM     PurchaseOrderHeader poh JOIN     Employee e ON poh.EmployeeID = e.BusinessEntityID WHERE     (poh.TotalDue - poh.Freight) = (         SELECT MAX(poh2.TotalDue - poh2.Freight)         FROM PurchaseOrderHeader poh2     )
SELECT     e.FirstName + ' ' + COALESCE(e.MiddleName, '') + ' ' + e.LastName AS FullName,     ep.Rate AS Salary FROM     Employee e JOIN     EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE     ep.BusinessEntityID IN (         SELECT TOP 10             BusinessEntityID         FROM             EmployeePayHistory         ORDER BY             Rate DESC     ) ORDER BY     ep.Rate DESC OFFSET 9 ROWS FETCH NEXT 1 ROW ONLY;
SELECT P.Name, (P.ListPrice - PC.StandardCost) AS Profit FROM Product P JOIN ProductReview PR ON P.ProductID = PR.ProductID JOIN ProductCostHistory PC ON P.ProductID = PC.ProductID WHERE PR.ReviewerName = 'John Smith' AND PR.Rating = 5 GROUP BY P.Name, (P.ListPrice - PC.StandardCost) ORDER BY (P.ListPrice - PC.StandardCost) DESC LIMIT 1;
SELECT TOP 5 Rate FROM EmployeePayHistory JOIN Employee ON EmployeePayHistory.BusinessEntityID = Employee.BusinessEntityID ORDER BY Employee.HireDate ASC;
SELECT TOP 1 V.Name FROM (     SELECT BusinessEntityID, SUM(LastReceiptCost - StandardPrice) AS ProfitOnNet     FROM ProductVendor     WHERE MaxOrderQty BETWEEN 500 AND 750     GROUP BY BusinessEntityID     ) AS PV JOIN Vendor V ON PV.BusinessEntityID = V.BusinessEntityID ORDER BY ProfitOnNet DESC OFFSET 9 ROWS FETCH NEXT 1 ROW ONLY;
SELECT DATEDIFF(year, E.HireDate, '2011-12-31') AS YearsOfWork FROM Employee E WHERE E.BusinessEntityID IN (     SELECT DISTINCT BE.BusinessEntityID     FROM BusinessEntity BE     JOIN Document D ON BE.BusinessEntityID = D.Owner     WHERE D.Status = 1 )
SELECT TOP 1 p.Name, p.DaysToManufacture FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE pr.Rating = 2 AND p.Class = 'M' AND pr.ReviewerName = 'Jill' ORDER BY pr.Rating DESC, p.DaysToManufacture ASC;
SELECT P.FirstName, P.MiddleName, P.LastName, E.JobTitle FROM Employee AS E JOIN Person AS P ON E.BusinessEntityID = P.BusinessEntityID WHERE E.HireDate = (     SELECT MIN(HireDate)     FROM Employee )
SELECT COUNT(*) FROM WorkOrder WHERE OrderQty BETWEEN 100 AND 250 AND ReorderPoint <= 375;
SELECT     AVG(CASE WHEN Gender = 'F' THEN Rate END) AS AvgFemaleSalary,     AVG(CASE WHEN Gender = 'M' THEN Rate END) AS AvgMaleSalary FROM     EmployeePayHistory EPH JOIN     Employee E ON EPH.BusinessEntityID = E.BusinessEntityID WHERE     E.Gender IN ('F', 'M');
SELECT DISTINCT V.Name FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID JOIN Product P ON PV.ProductID = P.ProductID JOIN ProductSubcategory PS ON P.ProductSubcategoryID = PS.ProductSubcategoryID WHERE P.MakeFlag = 0 AND PS.Name = 'Tights' AND P.Style = 'W';
SELECT EmployeePayHistory.PayFrequency FROM EmployeePayHistory JOIN Employee ON EmployeePayHistory.BusinessEntityID = Employee.BusinessEntityID WHERE Employee.JobTitle = 'Scheduling Assistant' ORDER BY EmployeePayHistory.RateChangeDate LIMIT 1;
SELECT TOP 1 P.Class, PB.Name AS 'Line of Business', P.ListPrice FROM Product AS P JOIN ProductSubcategory AS PS ON P.ProductSubcategoryID = PS.ProductSubcategoryID JOIN ProductCategory AS PB ON PS.ProductCategoryID = PB.ProductCategoryID JOIN ProductDocument AS PD ON P.ProductID = PD.ProductID JOIN Document AS D ON PD.DocumentNode = D.DocumentNode JOIN SalesOrderDetail AS SOD ON P.ProductID = SOD.ProductID JOIN SalesOrderHeader AS SOH ON SOD.SalesOrderID = SOH.SalesOrderID WHERE SOH.OnlineOrderFlag = 1 GROUP BY P.Class, PB.Name, P.ListPrice ORDER BY SUM(SOD.OrderQty) ASC
SELECT TOP 1 p.FirstName + ' ' + p.MiddleName + ' ' + p.LastName AS FullName FROM Person p JOIN SalesPerson sp ON p.BusinessEntityID = sp.BusinessEntityID ORDER BY sp.CommissionPct DESC;
SELECT TOP 1 (p.FirstName + COALESCE(p.MiddleName, '') + ' ' + p.LastName) AS FullName FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE e.HireDate IN (     SELECT TOP 2 HireDate     FROM Employee     ORDER BY HireDate ASC ) ORDER BY e.HireDate DESC;
SELECT TOP 1 p.Name, SUM(sol.Quantity * (p.ListPrice - p.StandardCost)) AS TotalProfit FROM Product AS p JOIN SalesOrderDetail AS sol ON p.ProductID = sol.ProductID JOIN SalesOrderHeader AS soh ON sol.SalesOrderID = soh.SalesOrderID WHERE soh.OnlineOrderFlag = 1 GROUP BY p.Name ORDER BY TotalProfit DESC;
SELECT TOP 1 po.VendorID, MAX(po.OrderQty - po.ReceivedQty) AS Difference FROM PurchaseOrderDetail po GROUP BY po.VendorID ORDER BY Difference DESC
SELECT     AVG(pv.AverageLeadTime) AS AvgLeadTime,     (pv.LastReceiptCost - pv.StandardPrice) AS ProfitOnNet,     a.AddressLine1 + a.AddressLine2 + a.City + a.PostalCode AS FullLocation FROM     ProductVendor pv JOIN     Vendor v ON pv.BusinessEntityID = v.BusinessEntityID JOIN     Address a ON v.BusinessEntityID = a.BusinessEntityID WHERE     pv.ProductID = 843;
SELECT COUNT(*) FROM SalesPerson WHERE Bonus = 0;
SELECT COUNT(*) FROM SalesTaxRate WHERE Name LIKE '%+%' AND TaxType = 1;
SELECT MAX(ActualCost) FROM TransactionHistory WHERE TransactionType = 'P';
SELECT Status FROM SalesOrderHeader WHERE Freight = (SELECT MAX(Freight) FROM SalesOrderHeader)
SELECT COUNT(*) FROM ProductInventory WHERE OnOrderQty = 0;
SELECT MAX(p.LastReceiptCost - pv.StandardPrice) AS HighestProfitOnNet FROM Product AS p JOIN ProductVendor AS pv ON p.ProductID = pv.ProductID
SELECT ReviewerName FROM ProductReview WHERE Rating = (SELECT MAX(Rating) FROM ProductReview) GROUP BY ReviewerName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ProductID, COUNT(*) AS ReviewCount FROM ProductReview GROUP BY ProductID ORDER BY ReviewCount DESC LIMIT 1;
SELECT COUNT(*) FROM Product p WHERE p.MakeFlag = 0 AND p.ProductID NOT IN (     SELECT pr.ProductID     FROM ProductReview pr     WHERE pr.Rating = 5 );
SELECT MAX(review_count) AS max_reviews FROM (     SELECT COUNT(pr.ProductID) AS review_count     FROM ProductReview pr     JOIN Product p ON pr.ProductID = p.ProductID     WHERE p.FinishedGoodsFlag = 1     GROUP BY pr.ProductID ) subquery;
SELECT COUNT(*) FROM (     SELECT p.ProductID     FROM Product AS p     INNER JOIN ProductReview AS pr ON p.ProductID = pr.ProductID     WHERE p.MakeFlag = 1 AND p.FinishedGoodsFlag = 1     GROUP BY p.ProductID     HAVING COUNT(pr.Comments) > 10 ) AS SubQuery;
SELECT p.Name FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE p.FinishedGoodsFlag = 1 GROUP BY p.ProductID, p.Name HAVING COUNT(pr.Comments) > 10;
Error: 第 7288 个样本有 2 个SQL。
SELECT p.Class FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID GROUP BY p.Class ORDER BY COUNT(pr.Comments) DESC LIMIT 1;
SELECT DISTINCT EmailAddress FROM ProductReview pr JOIN Product p ON pr.ProductID = p.ProductID JOIN EmailAddress ea ON pr.ReviewerName = (SELECT FirstName + ' ' + LastName FROM Person WHERE BusinessEntityID = ea.BusinessEntityID) WHERE p.Class = 'H' AND p.Style = 'M';
SELECT p.Name FROM Product p JOIN ProductListPriceHistory plph ON p.ProductID = plph.ProductID GROUP BY p.Name HAVING COUNT(plph.ListPrice) > 3;
SELECT pd.Description FROM ProductDescription pd JOIN ProductModelProductDescriptionCulture pmpd ON pd.ProductDescriptionID = pmpd.ProductDescriptionID JOIN ProductModel pm ON pmpd.ProductModelID = pm.ProductModelID WHERE pm.Name = 'Headset Ball Bearings'
SELECT MAX(StandardPrice) FROM ProductVendor WHERE ProductID = (SELECT ProductID FROM Product WHERE Name = 'Hex Nut 5');
SELECT pv.StandardPrice FROM ProductVendor pv JOIN Product p ON pv.ProductID = p.ProductID WHERE p.Name = 'Hex Nut 5';
SELECT COUNT(*) FROM Vendor v JOIN ProductVendor pv ON v.BusinessEntityID = pv.BusinessEntityID JOIN Product p ON pv.ProductID = p.ProductID WHERE p.Name = 'Hex Nut 5' AND v.CreditRating BETWEEN 1 AND 3;
SELECT V.PurchasingWebServiceURL FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID JOIN Product P ON P.ProductID = PV.ProductID WHERE P.Name = 'Hex Nut 5';
SELECT TOP 1 V.Name FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID JOIN Product P ON PV.ProductID = P.ProductID WHERE P.Name = 'Hex Nut 5' ORDER BY PV.StandardPrice ASC;
SELECT COUNT(*) FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID WHERE p.Class = 'H' AND pv.PreferredVendorStatus = 1;
SELECT ListPrice FROM ProductListPriceHistory WHERE ProductID = (     SELECT ProductID     FROM Product     WHERE Name = 'LL Fork' )
SELECT COUNT(DISTINCT p.ProductID) FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID WHERE p.ProductLine = 'M' GROUP BY p.ProductID HAVING COUNT(DISTINCT pv.BusinessEntityID) > 2;
Error: 第 7301 个样本有 2 个SQL。
SELECT EmailAddress FROM ProductReview pr JOIN EmailAddress ea ON pr.ReviewerName = (SELECT p.FirstName + ' ' + p.LastName FROM Person p WHERE p.BusinessEntityID = ea.BusinessEntityID) WHERE pr.Rating = 1 AND pr.ProductID = (SELECT ProductID FROM Product WHERE Name = 'HL Mountain Pedal');
SELECT COUNT(*) FROM Product WHERE DaysToManufacture > 2 AND (OnOrderQty = 0 OR OnOrderQty IS NULL);
SELECT p.Name, p.ProductID FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID WHERE p.MakeFlag = 1 AND (pv.OnOrderQty = 0 OR pv.OnOrderQty IS NULL) AND p.DaysToManufacture > 2;
SELECT COUNT(*) AS ReviewCount FROM (     SELECT p.ProductID     FROM Product p     WHERE p.FinishedGoodsFlag = 1 AND p.ProductLine = 'M' ) AS SalableMountainProducts JOIN ProductReview pr ON SalableMountainProducts.ProductID = pr.ProductID GROUP BY SalableMountainProducts.ProductID ORDER BY ReviewCount DESC LIMIT 1;
SELECT AVG(StandardPrice) as AverageSellingPrice FROM ProductVendor JOIN Product ON ProductVendor.ProductID = Product.ProductID WHERE Product.Name = 'Hex Nut 5';
SELECT p.Name FROM Product p JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID JOIN ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE pc.Name = 'Bikes' AND ps.Name = 'Mountain' GROUP BY p.Name ORDER BY AVG(pr.Rating) DESC LIMIT 1;
SELECT TOP 3 p.Name, AVG(pr.Rating) as AverageRating FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE p.MakeFlag = 1 GROUP BY p.Name ORDER BY AverageRating DESC;
SELECT * FROM Employee WHERE PersonType = 'EM' ORDER BY BusinessEntityID ASC;
SELECT FirstName, MiddleName, LastName FROM Person WHERE PersonType = 'IN' AND LastName = 'Anderson';
SELECT FirstName, LastName, HireDate FROM Employee WHERE EndDate IS NOT NULL;
SELECT FirstName, LastName FROM Employee WHERE SalariedFlag = 1 AND YEAR(HireDate) >= 2007;
SELECT FirstName, LastName FROM Employee WHERE MaritalStatus = 'M' AND VacationHours < 20;
SELECT TOP 1 e.FirstName, e.LastName, 2022 - YEAR(e.BirthDate) + 1 AS Age FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Shift s ON edh.ShiftID = s.ShiftID WHERE s.Name = 'Night' ORDER BY e.BirthDate ASC
SELECT e.BusinessEntityID, e.NationalIDNumber, e.LoginID, e.JobTitle, e.BirthDate, e.MaritalStatus, e.Gender, e.HireDate FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID WHERE d.Name = 'Shipping and Receiving' AND YEAR(e.HireDate) = 2009;
SELECT TOP 1 e.JobTitle, d.Name AS DepartmentName FROM Employee e JOIN Department d ON e.DepartmentID = d.DepartmentID WHERE e.BirthDate = (SELECT MIN(BirthDate) FROM Employee)
SELECT     edh.DepartmentID,     AVG(eph.Rate) AS AverageHourlyPayrate FROM     EmployeeDepartmentHistory edh JOIN     EmployeePayHistory eph ON     edh.BusinessEntityID = eph.BusinessEntityID WHERE     eph.RateChangeDate = (         SELECT             MAX(RateChangeDate)         FROM             EmployeePayHistory eph2         WHERE             eph2.BusinessEntityID = eph.BusinessEntityID     ) GROUP BY     edh.DepartmentID;
SELECT TOP 1 e.BusinessEntityID, ep.Rate FROM Employee e JOIN EmployeePayHistory ep ON e.BusinessEntityID = ep.BusinessEntityID WHERE e.JobTitle != 'Chief Executive Officer' ORDER BY ep.Rate DESC;
SELECT TOP 1 V.Name FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID WHERE PV.ProductID = 319 ORDER BY V.AverageLeadTime ASC;
SELECT p.Name FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID JOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID WHERE v.Name = 'Australia Bike Retailer' ORDER BY p.ProductID;
SELECT TOP 1 V.Name, (PV.LastReceiptCost - PV.StandardPrice) AS ProfitOnNet FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID WHERE PV.ProductID = 342 ORDER BY ProfitOnNet DESC;
SELECT     (MAX(ep.Rate) - MIN(ep.Rate)) / MIN(ep.Rate) * 100 AS PercentageIncrement,     MAX(ep.Rate) AS CurrentPayRate FROM     EmployeePayHistory ep JOIN     Employee e ON ep.BusinessEntityID = e.BusinessEntityID WHERE     e.FirstName = 'Rob' AND e.LastName = 'Walters' GROUP BY     ep.BusinessEntityID;
SELECT AVG(DATEPART(YEAR, GETDATE()) - DATEPART(YEAR, HireDate)) AS AvgLengthOfEmployment FROM Employee JOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID JOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID WHERE Department.Name = 'Research and Development' AND EmployeeDepartmentHistory.EndDate IS NULL;
SELECT AVG(DATEDIFF(YEAR, HireDate, GETDATE())) AS AverageAge FROM Employee;
SELECT (COUNT(CASE WHEN JobTitle = 'Sales Representative' THEN 1 END) * 100.0 / COUNT(JobTitle)) AS Percentage_Sales_Representatives FROM Employee;
SELECT p.FirstName, p.LastName, pat.Name AS PhoneType, ph.PhoneNumber FROM Person AS p JOIN Employee AS e ON p.BusinessEntityID = e.BusinessEntityID JOIN BusinessEntityContact AS bec ON e.BusinessEntityID = bec.BusinessEntityID JOIN PhoneNumberType AS pat ON bec.PersonID = pat.BusinessEntityID JOIN PersonPhone AS ph ON pat.PhoneNumberTypeID = ph.PhoneNumberTypeID WHERE e.JobTitle = 'Marketing Manager';
SELECT p.FirstName, p.LastName FROM Person p JOIN PersonCreditCard pcc ON p.BusinessEntityID = pcc.BusinessEntityID JOIN CreditCard cc ON pcc.CreditCardID = cc.CreditCardID WHERE cc.CardType = 'Distinguish';
SELECT sp.FirstName, sp.LastName, st.Name AS TerritoryName FROM SalesPerson sp JOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID JOIN Store s ON sp.BusinessEntityID = s.SalesPersonID WHERE s.Name = 'Area Bike Accessories'
SELECT s.Name AS StoreName, sp.FirstName + ' ' + sp.LastName AS SalesRepresentative FROM Store s JOIN SalesPerson sp ON s.SalesPersonID = sp.BusinessEntityID JOIN SalesTerritory st ON sp.TerritoryID = st.TerritoryID WHERE st.Name = 'France';
SELECT p.Name, v.Name as VendorName FROM Product p JOIN ProductVendor pv ON p.ProductID = pv.ProductID JOIN Vendor v ON pv.BusinessEntityID = v.BusinessEntityID WHERE YEAR(p.SellStartDate) = 2013;
SELECT TOP 1 pe.FirstName, pe.LastName FROM SalesPerson sp JOIN Person pe ON sp.BusinessEntityID = pe.BusinessEntityID WHERE sp.SalesYTD = (SELECT MAX(SalesYTD) FROM SalesPerson)
SELECT ProductID, Name, MinOrderQty, StandardCost FROM ProductVendor JOIN Product ON ProductVendor.ProductID = Product.ProductID WHERE MinOrderQty = 1000 AND StandardCost > 17;
SELECT TOP 1 JobTitle FROM Employee WHERE Gender = 'M' AND MaritalStatus = 'M' ORDER BY BirthDate ASC;
SELECT V.Name FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID JOIN Product P ON PV.ProductID = P.ProductID WHERE P.ProductNumber = 'WB-H098';
SELECT TOP 1 V.Name, AVG(PV.AverageLeadTime) as AverageLeadTime FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID WHERE PV.ProductID = 348 GROUP BY V.Name ORDER BY AVG(PV.AverageLeadTime) ASC
SELECT TOP 1 * FROM Employee WHERE YEAR(BirthDate) >= 1970 ORDER BY SickLeaveHours ASC;
SELECT     d.Name AS DepartmentName,     AVG(DATEDIFF(YEAR, e.BirthDate, GETDATE())) AS AverageAge FROM     HumanResources.Employee AS e JOIN     HumanResources.EmployeeDepartmentHistory AS edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN     HumanResources.Department AS d ON edh.DepartmentID = d.DepartmentID WHERE     edh.EndDate IS NULL GROUP BY     d.Name ORDER BY     AverageAge ASC LIMIT 1;
SELECT TOP 3 ProductSubcategoryID FROM ProductSubcategory;
SELECT     SalesPerson.SalesQuota AS PredictedAnnualSales,     SalesPerson.SalesYTD AS ActualSalesThusFar,     (SalesPerson.SalesQuota - SalesPerson.SalesYTD) AS Difference FROM     SalesPerson WHERE     SalesPerson.BusinessEntityID = 288;
Error: 第 7340 个样本有 2 个SQL。
SELECT TOP 3 Name, SalesYTD FROM SalesTerritory ORDER BY SalesYTD DESC;
SELECT so.Description FROM SpecialOffer so WHERE so.Category = 'Reseller' AND so.Type = 'Group Discount'
SELECT MAX(DiscountPct) FROM SpecialOffer WHERE Type = 'Excess Inventory';
SELECT     (SELECT PlannedCost FROM WorkOrder WHERE ProductID = 818) -     (SELECT ActualCost FROM WorkOrder WHERE ProductID = 818) AS CostDifference;
SELECT COUNT(*) FROM BillOfMaterials WHERE EndDate IS NULL AND BOMLevel = 2;
SELECT COUNT(*) FROM Document WHERE Status = 2 AND DocumentSummary IS NULL;
Error: 第 7347 个样本有 3 个SQL。
SELECT TOP 1 wo.WorkOrderID FROM WorkOrder wo JOIN TransactionHistory th ON wo.WorkOrderID = th.ReferenceOrderID WHERE th.TransactionType = 'W' ORDER BY wo.OrderQty DESC;
SELECT TOP 3 Name FROM Vendor WHERE PreferredVendorStatus = 0;
SELECT COUNT(*) FROM Vendor WHERE PreferredVendorStatus = 0 AND ActiveFlag = 1;
SELECT COUNT(*) FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Shift s ON edh.ShiftID = s.ShiftID WHERE e.HireDate >= '2009-01-01' AND s.Name = 'Night';
SELECT TOP 1 Department.Name, COUNT(*) AS NumOfNightShiftEmployees FROM EmployeeDepartmentHistory JOIN Employee ON EmployeeDepartmentHistory.BusinessEntityID = Employee.BusinessEntityID JOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID JOIN Shift ON EmployeeDepartmentHistory.ShiftID = Shift.ShiftID WHERE Shift.Name = 'Night' GROUP BY Department.Name ORDER BY NumOfNightShiftEmployees DESC;
SELECT COUNT(*) FROM SalesOrderHeader JOIN ShipMethod ON SalesOrderHeader.ShipMethodID = ShipMethod.ShipMethodID WHERE ShipMethod.Name = 'XRQ - TRUCK GROUND';
SELECT sr.Name FROM SalesOrderHeaderSalesReason sohsr JOIN SalesReason sr ON sohsr.SalesReasonID = sr.SalesReasonID WHERE sohsr.SalesOrderID = 43718;
SELECT DISTINCT psc.Name FROM ProductSubcategory psc JOIN ProductCategory pc ON psc.ProductCategoryID = pc.ProductCategoryID WHERE pc.Name = 'Bikes';
SELECT TOP 1 s.Name AS SalesArea, MAX(sp.SalesQuota) AS HighestYearlySalesQuota FROM SalesPerson sp JOIN SalesTerritory s ON sp.TerritoryID = s.TerritoryID GROUP BY s.Name ORDER BY HighestYearlySalesQuota DESC;
SELECT p.Name FROM Product p JOIN SalesOrderDetail sod ON p.ProductID = sod.ProductID WHERE sod.SalesOrderID = 43660;
SELECT TOP 5 p.ProductID, p.Name, SUM(sod.OrderQty) as TotalOrders FROM Product p JOIN SalesOrderDetail sod ON p.ProductID = sod.ProductID GROUP BY p.ProductID, p.Name ORDER BY TotalOrders DESC LIMIT 5;
SELECT DISTINCT pi.Shelf FROM ProductInventory pi JOIN Product p ON pi.ProductID = p.ProductID WHERE p.Name = 'Down Tube'
SELECT AT.Name FROM AddressType AS AT JOIN BusinessEntityAddress AS BEA ON AT.AddressTypeID = BEA.AddressTypeID JOIN Store AS S ON S.BusinessEntityID = BEA.BusinessEntityID WHERE S.Name = 'Fun Toys and Bikes';
SELECT p.FirstName, p.LastName FROM Person AS p JOIN BusinessEntityContact AS bec ON p.BusinessEntityID = bec.PersonID JOIN Store AS s ON bec.BusinessEntityID = s.BusinessEntityID WHERE s.Name = 'Next-Door Bike Store';
SELECT ReferenceOrderID FROM TransactionHistory WHERE ProductID = (     SELECT ProductID     FROM Product     WHERE Name = 'Mountain End Caps' )
SELECT TOP 1 AddressLine1 FROM Address JOIN BusinessEntityAddress ON Address.AddressID = BusinessEntityAddress.AddressID WHERE BusinessEntityAddress.BusinessEntityID = 12;
SELECT TOP 3 BusinessEntityID, Name FROM Store WHERE SalesPersonID IN (     SELECT BusinessEntityID     FROM SalesPerson     WHERE TerritoryID IN (         SELECT TerritoryID         FROM SalesTerritory         WHERE Name = 'Dallas'     ) );
SELECT StateProvince.Name FROM StateProvince JOIN City ON StateProvince.StateProvinceID = City.StateProvinceID WHERE City.Name = 'Racine'
SELECT     ((COUNT(CASE WHEN c.Name = 'Arabic' THEN pd.ProductDescriptionID END) / COUNT(pd.ProductDescriptionID)) * 100) -     ((COUNT(CASE WHEN c.Name = 'Thai' THEN pd.ProductDescriptionID END) / COUNT(pd.ProductDescriptionID)) * 100) AS DifferenceInPercentage FROM     ProductDescription pd JOIN     ProductModelProductDescriptionCulture pdpc ON pd.ProductDescriptionID = pdpc.ProductDescriptionID JOIN     Culture c ON pdpc.CultureID = c.CultureID;
SELECT     (COUNT(CASE WHEN s.SalesQuota > 300000 THEN s.TerritoryID END) * 100.0 / COUNT(s.TerritoryID)) AS Percentage FROM     SalesTerritory st JOIN     SalesPerson s ON st.TerritoryID = s.TerritoryID WHERE     st.Name = 'Northwest' AND st.CountryRegionCode = 'US';
SELECT (pv.LastReceiptCost - pv.StandardPrice) AS NetProfit FROM ProductVendor pv JOIN Product p ON pv.ProductID = p.ProductID WHERE p.Name = 'Crankarm';
SELECT TOP 1 p.Name FROM Product p JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE pr.Rating = (SELECT MAX(Rating) - 1 FROM ProductReview) ORDER BY pr.Rating DESC;
SELECT MAX(Rate) AS SecondHighestSalaryPerHour FROM EmployeePayHistory WHERE PayFrequency = 1 AND Rate < (SELECT MAX(Rate) FROM EmployeePayHistory WHERE PayFrequency = 1)
SELECT COUNT(*) FROM CreditCard WHERE CardType = 'Vista' AND ExpYear <= 2006;
SELECT StartTime FROM Shift WHERE Name = 'Night'
SELECT p.Name, p.Weight FROM Product p WHERE p.WeightUnitMeasureCode = 'LB'       AND p.Style = (                         SELECT Style                         FROM Product                         GROUP BY Style                         ORDER BY COUNT(*) DESC                         LIMIT 1                     ) GROUP BY p.Name, p.Weight;
SELECT     T.Name AS TerritoryName,     CR.Name AS CountryName,     ABS(ST.SalesYTD - ST.SalesLastYear) AS SalesDifference FROM     SalesTerritory ST JOIN     CountryRegion CR ON ST.CountryRegionCode = CR.CountryRegionCode WHERE     ABS(ST.SalesYTD - ST.SalesLastYear) = (         SELECT             MAX(ABS(SalesYTD - SalesLastYear))         FROM             SalesTerritory     )
SELECT TOP 6 p.Name, p.ReorderPoint FROM Product p WHERE p.SizeUnitMeasureCode = 'CM' ORDER BY p.Size DESC;
SELECT TOP 1 TotalDue FROM (  SELECT DISTINCT TOP 3 TotalDue  FROM PurchaseOrderHeader  ORDER BY Freight DESC ) AS subquery ORDER BY TotalDue ASC
SELECT TOP 1 (p.ListPrice - p.StandardCost) * 10 AS Profit FROM Product p WHERE p.Weight = (SELECT MIN(Weight) FROM Product);
SELECT TOP 1 PurchaseOrderID, TaxAmt FROM PurchaseOrderHeader ORDER BY TaxAmt DESC;
SELECT COUNT(*) FROM SalesPerson WHERE SalesQuota <= 50000;
SELECT s.Name FROM Shift s JOIN Employee e ON e.BusinessEntityID = (     SELECT TOP 1 e2.BusinessEntityID     FROM Employee e2     WHERE YEAR(e2.BirthDate) < '1969'     ORDER BY e2.BirthDate DESC     OFFSET 5 ROWS ) WHERE e.OrganizationNode LIKE '%' + s.Name + '%'
SELECT TOP 1 p.Name, p.ListPrice - p.StandardCost AS ProfitPerItem, p.DaysToManufacture AS ManufacturingDays, pr.Rating FROM Product p LEFT JOIN ProductReview pr ON p.ProductID = pr.ProductID WHERE p.DaysToManufacture = (SELECT MIN(DaysToManufacture) FROM Product) ORDER BY ProfitPerItem DESC;
SELECT FirstName + ' ' + ISNULL(MiddleName, '') + ' ' + LastName AS FullName FROM Person p JOIN SalesPerson sp ON p.BusinessEntityID = sp.BusinessEntityID WHERE sp.Bonus < 1000;
SELECT MAX(Employee.EndDate) FROM Employee JOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID JOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID WHERE Employee.JobTitle = 'Senior Tool Designer' AND Department.Name = 'Engineering' AND DATEDIFF(year, Employee.BirthDate, Employee.HireDate) = 33;
SELECT SUM(poh.TotalDue) FROM PurchaseOrderHeader poh JOIN Vendor v ON poh.VendorID = v.BusinessEntityID WHERE v.CreditRating = 4 AND v.PreferredVendorStatus = 0;
SELECT Department.Name FROM Department JOIN EmployeeDepartmentHistory ON Department.DepartmentID = EmployeeDepartmentHistory.DepartmentID JOIN Shift ON EmployeeDepartmentHistory.ShiftID = Shift.ShiftID WHERE Shift.Name = 'Night' GROUP BY Department.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT 2 * (p.ListPrice - p.StandardCost) AS Profit FROM Product p JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID WHERE ps.Name = 'Road Bikes' AND p.Class = 'H' AND p.Color = 'Black' AND p.Size = 58 LIMIT 1;
SELECT TOP 10 p.FirstName + COALESCE(' ' + p.MiddleName, '') + ' ' + p.LastName AS FullName FROM Person p JOIN Employee e ON p.BusinessEntityID = e.BusinessEntityID WHERE e.JobTitle = 'Production Technician' AND e.MaritalStatus = 'M' AND e.Gender = 'M' ORDER BY e.BirthDate DESC;
SELECT TOP 1 Vendors.Name, Vendors.CreditRating FROM (     SELECT PV.BusinessEntityID, AVG(PV.AverageLeadTime) AS AvgLeadTime,     SUM(PV.LastReceiptCost - PV.StandardPrice) AS NetProfit     FROM ProductVendor PV     GROUP BY PV.BusinessEntityID     HAVING AVG(PV.AverageLeadTime) = 60 ) AS SubQuery JOIN Vendor Vendors ON SubQuery.BusinessEntityID = Vendors.BusinessEntityID ORDER BY NetProfit DESC;
SELECT V.Name, (P.LastReceiptCost - P.StandardPrice) AS ProfitOnNet FROM ProductVendor PV JOIN Vendor V ON PV.BusinessEntityID = V.BusinessEntityID JOIN Product P ON PV.ProductID = P.ProductID WHERE P.MaxOrderQty = 200;
SELECT TOP 1 p.FirstName + ' ' + p.LastName AS FullName FROM Person AS p WHERE p.PersonType = 'EM' AND EXISTS (     SELECT *     FROM PurchaseOrderHeader AS po     WHERE po.Status = 3     AND po.EmployeeID = p.BusinessEntityID ) GROUP BY p.BusinessEntityID, p.FirstName, p.LastName ORDER BY COUNT(*) DESC;
SELECT TOP 1 V.Name FROM Vendor V JOIN ProductVendor PV ON V.BusinessEntityID = PV.BusinessEntityID WHERE PV.MinOrderQty = (SELECT MIN(MinOrderQty)                         FROM ProductVendor                         WHERE MinOrderQty > (SELECT MIN(MinOrderQty) FROM ProductVendor)) ORDER BY PV.MinOrderQty;
SELECT MIN(ProductVendor.MinOrderQty) FROM ProductVendor JOIN Vendor ON ProductVendor.BusinessEntityID = Vendor.BusinessEntityID WHERE Vendor.ActiveFlag = 0;
SELECT (YEAR(E.HireDate) - YEAR(E.BirthDate)) AS AgeAtHire, E.FirstName + ' ' + E.MiddleName + ' ' + E.LastName AS FullName FROM Employee E WHERE E.VacationHours <= 10 ORDER BY AgeAtHire DESC LIMIT 1;
SELECT PersonType FROM Employee WHERE MaritalStatus = 'S' AND Gender = 'F' AND HireDate BETWEEN '2008-01-01' AND '2008-12-31';
SELECT TOP 1 (p.ListPrice - p.StandardCost) AS Profit FROM ProductReview pr JOIN Product p ON pr.ProductID = p.ProductID WHERE pr.ReviewerName = 'David' AND pr.Rating = 4 ORDER BY pr.Rating DESC, pr.ProductReviewID DESC;
SELECT TOP 1 st.Name, st.Group FROM SalesTaxRate str JOIN StateProvince st ON str.StateProvinceID = st.StateProvinceID WHERE str.SalesTaxRateID NOT IN (SELECT TOP 1 SalesTaxRateID FROM SalesTaxRate ORDER BY TaxRate ASC) ORDER BY TaxRate ASC;
SELECT     AVG(p.ListPrice - p.StandardCost) AS AverageProfit,     COUNT(DISTINCT p.Size) AS VarietyOfSize,     GROUP_CONCAT(DISTINCT p.Color ORDER BY p.Color ASC) AS AvailableColors FROM     Product p JOIN     ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID WHERE     ps.Name = 'Road Frames' AND     p.Class = 'L' AND     p.Style = 'U' GROUP BY     p.Class, p.Style ;
SELECT DiscountPct FROM SpecialOffer WHERE Description = 'LL Road Frame Sale';
SELECT COUNT(*) FROM SpecialOffer WHERE Type = 'Excess Inventory';
SELECT TOP 1 Description, MAX(DiscountPct) AS HighestDiscount FROM SpecialOffer WHERE Type = 'Seasonal' GROUP BY Description ORDER BY HighestDiscount DESC;
SELECT TOP 3 Description, DiscountPct FROM SpecialOffer WHERE Type = 'Reseller' ORDER BY DiscountPct DESC;
SELECT Demographics FROM Store WHERE Name = 'Valley Bicycle Specialists';
SELECT COUNT(*) FROM Product WHERE MakeFlag = 1 AND FinishedGoodsFlag = 1;
SELECT MIN(SafetyStockLevel) FROM Product WHERE Name = 'Chainring Bolts';
Error: 第 7405 个样本有 2 个SQL。
SELECT PersonType FROM Person WHERE FirstName = 'David' AND LastName = 'Bradley';
SELECT COUNT(*) FROM Person WHERE PersonType = 'SC' AND Title = 'Mr.';
SELECT a.AddressLine1, a.AddressLine2 FROM Address AS a JOIN Store AS s ON a.AddressID = s.BusinessEntityID WHERE s.Name = 'Valley Bicycle Specialists';
SELECT EmailAddress FROM EmailAddress JOIN Person ON EmailAddress.BusinessEntityID = Person.BusinessEntityID WHERE Person.FirstName = 'David' AND Person.LastName = 'Bradley';
SELECT PhoneNumber FROM (     SELECT p.BusinessEntityID, pe.EmailAddressID, pe.EmailAddress     FROM Person AS p     JOIN BusinessEntityContact AS bec ON p.BusinessEntityID = bec.BusinessEntityID     JOIN ContactType AS ct ON bec.ContactTypeID = ct.ContactTypeID     WHERE p.PersonType = 'SC' ) AS subquery JOIN EmailAddress AS ea ON subquery.EmailAddressID = ea.EmailAddressID;
SELECT PasswordHash FROM Password WHERE BusinessEntityID = (SELECT BusinessEntityID                            FROM Person                            WHERE FirstName = 'David' AND LastName = 'Bradley');
SELECT EmailAddress.EmailAddress FROM EmailAddress JOIN Person ON EmailAddress.BusinessEntityID = Person.BusinessEntityID WHERE Person.EmailPromotion = 2;
SELECT CC.CardNumber FROM CreditCard CC JOIN PersonCreditCard PCC ON CC.CreditCardID = PCC.CreditCardID JOIN Person P ON P.BusinessEntityID = PCC.BusinessEntityID WHERE P.FirstName = 'David' AND P.LastName = 'Bradley';
SELECT ExpYear FROM Person p JOIN PersonCreditCard pcc ON p.BusinessEntityID = pcc.BusinessEntityID JOIN CreditCard cc ON pcc.CreditCardID = cc.CreditCardID WHERE p.FirstName = 'David' AND p.LastName = 'Bradley';
SELECT p.FirstName, p.LastName FROM Person p JOIN PersonCreditCard pcc ON p.BusinessEntityID = pcc.BusinessEntityID JOIN CreditCard cc ON pcc.CreditCardID = cc.CreditCardID WHERE p.PersonType = 'SC' AND YEAR(cc.ExpYear) = 2007;
SELECT COUNT(*) FROM Person p JOIN BusinessEntityContact bec ON p.BusinessEntityID = bec.BusinessEntityID JOIN EmailAddress ea ON p.BusinessEntityID = ea.BusinessEntityID JOIN Store s ON bec.BusinessEntityID = s.BusinessEntityID JOIN PersonCreditCard pcc ON p.BusinessEntityID = pcc.BusinessEntityID JOIN CreditCard cc ON pcc.CreditCardID = cc.CreditCardID WHERE p.PersonType = 'SC' AND cc.CardType = 'Vista';
SELECT COUNT(DISTINCT edh.DepartmentID) FROM EmployeeDepartmentHistory edh JOIN Employee e ON edh.BusinessEntityID = e.BusinessEntityID WHERE e.FirstName = 'David' AND e.LastName = 'Bradley';
SELECT DISTINCT d.Name FROM Department d JOIN EmployeeDepartmentHistory edh ON d.DepartmentID = edh.DepartmentID JOIN Employee e ON edh.BusinessEntityID = e.BusinessEntityID WHERE e.FirstName = 'David' AND e.LastName = 'Bradley';
SELECT COUNT(*) FROM EmployeeDepartmentHistory JOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID WHERE Department.Name = 'Engineering' AND YEAR(EmployeeDepartmentHistory.StartDate) <= 2009 AND (YEAR(EmployeeDepartmentHistory.EndDate) >= 2009 OR EmployeeDepartmentHistory.EndDate IS NULL);
SELECT TOP 1 p.FirstName, p.LastName FROM Person AS p JOIN Employee AS e ON p.BusinessEntityID = e.BusinessEntityID JOIN EmployeeDepartmentHistory AS edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department AS d ON edh.DepartmentID = d.DepartmentID WHERE d.Name = 'Engineering' ORDER BY (SELECT DATEDIFF(day, edh.StartDate, COALESCE(edh.EndDate, GETDATE()))) DESC;
SELECT COUNT(*) FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID JOIN Person p ON e.BusinessEntityID = p.BusinessEntityID WHERE d.Name = 'Manufacturing' AND YEAR(edh.StartDate) < 2007 AND YEAR(edh.EndDate) > 2007 AND p.PersonType = 'SC';
SELECT DISTINCT e.BusinessEntityID, c.CardNumber FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID JOIN PersonCreditCard pcc ON e.BusinessEntityID = pcc.BusinessEntityID JOIN CreditCard c ON pcc.CreditCardID = c.CreditCardID WHERE d.Name = 'Finance' AND edh.EndDate IS NOT NULL;
SELECT COUNT(*) FROM Employee JOIN EmployeeDepartmentHistory ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID JOIN CreditCard ON Employee.BusinessEntityID = CreditCard.CreditCardID JOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID WHERE Department.Name = 'Engineering' AND YEAR(EmployeeDepartmentHistory.StartDate) = 2007 AND CreditCard.ExpYear = 2007;
SELECT TOP 1 E.EmailAddress FROM (     SELECT BE.BusinessEntityID, COUNT(EDH.DepartmentID) AS DepartmentChanges     FROM BusinessEntity AS BE     JOIN EmployeeDepartmentHistory AS EDH ON BE.BusinessEntityID = EDH.BusinessEntityID     GROUP BY BE.BusinessEntityID     ORDER BY DepartmentChanges DESC ) AS DM JOIN Employee AS E ON DM.BusinessEntityID = E.BusinessEntityID WHERE DM.DepartmentChanges = (     SELECT MAX(DepartmentChanges)     FROM (         SELECT COUNT(EDH.DepartmentID) AS DepartmentChanges         FROM EmployeeDepartmentHistory AS EDH         GROUP BY EDH.BusinessEntityID     ) AS DMCount )
SELECT COUNT(*) FROM Employee e JOIN EmployeeDepartmentHistory edh ON e.BusinessEntityID = edh.BusinessEntityID JOIN Department d ON edh.DepartmentID = d.DepartmentID WHERE e.EmailPromotion = 0 AND d.Name = 'Engineering';
SELECT COUNT(*) FROM EmployeeDepartmentHistory JOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID WHERE Department.GroupName = 'Quality Assurance Group' AND YEAR(EmployeeDepartmentHistory.StartDate) = 2007;
SELECT p.Name FROM Product p JOIN SpecialOfferProduct sop ON p.ProductID = sop.ProductID JOIN SpecialOffer so ON sop.SpecialOfferID = so.SpecialOfferID WHERE so.Description = 'LL Road Frame Sale';
SELECT COUNT(*) FROM SalesOrderDetail sod JOIN SpecialOfferProduct sop ON sod.SpecialOfferID = sop.SpecialOfferID JOIN SpecialOffer so ON sop.SpecialOfferID = so.SpecialOfferID WHERE so.Description = 'LL Road Frame Sale';
SELECT COUNT(*) FROM SalesOrderDetail sod JOIN Product p ON sod.ProductID = p.ProductID WHERE p.Name = 'Chainring Bolts' AND sod.OrderQty > 0;
SELECT COUNT(*) FROM Product p JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID JOIN ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID JOIN SpecialOfferProduct sop ON p.ProductID = sop.ProductID JOIN SpecialOffer so ON sop.SpecialOfferID = so.SpecialOfferID WHERE pc.Name = 'Clothing' AND so.Description = 'LL Road Frame Sale';
SELECT p.Name, p.ProductNumber FROM Product p JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID WHERE ps.Name = 'Clothing' AND p.MakeFlag = 1 AND p.FinishedGoodsFlag = 1;
SELECT AVG(DATEDIFF(year, T1.StartDate, T1.EndDate)) AS AverageStay FROM EmployeeDepartmentHistory T1 JOIN Department T2 ON T1.DepartmentID = T2.DepartmentID WHERE T2.Name = 'Engineering' AND T1.EndDate IS NOT NULL;
SELECT AVG(EmployeePayHistory.Rate) FROM EmployeePayHistory JOIN EmployeeDepartmentHistory ON EmployeePayHistory.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID JOIN Department ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID WHERE Department.Name = 'Engineering' AND YEAR(EmployeeDepartmentHistory.StartDate) <= 2007 AND YEAR(EmployeeDepartmentHistory.EndDate) >= 2007;
SELECT     ((MAX(p.ListPrice) - MIN(p.ListPrice)) / MIN(p.ListPrice)) * 100 AS PercentageDifference FROM     Product p JOIN     ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID JOIN     ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID WHERE     pc.Name = 'Clothing'
SELECT AVG(p.ListPrice - p.StandardCost) AS AverageProfit FROM Product p JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID JOIN ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID WHERE pc.Name = 'Clothing';
SELECT TOP 1 ProductID, MIN(StandardCost) AS MinCost FROM ProductCostHistory WHERE YEAR(StartDate) = 2013 GROUP BY ProductID ORDER BY MinCost ASC;
SELECT * FROM Product WHERE Color = 'Yellow';
SELECT BusinessEntityID FROM Person WHERE FirstName = 'Hung-Fu' AND LastName = 'Ting';
Error: 第 7439 个样本有 2 个SQL。
SELECT ListPrice FROM Product WHERE ProductID = 912;
SELECT * FROM WorkOrderRouting WHERE ActualCost <> PlannedCost;
SELECT p.ThumbnailPhotoFileName FROM ProductPhoto p JOIN ProductProductPhoto pp ON p.ProductPhotoID = pp.ProductPhotoID WHERE pp.ProductID = 979;
SELECT Name FROM Product WHERE ListPrice > 1000;
SELECT TOP 1 p.ProductID, p.Name, (pd.ListPrice - pc.StandardCost) as Profit FROM Product p JOIN ProductListPriceHistory pd ON p.ProductID = pd.ProductID JOIN ProductCostHistory pc ON p.ProductID = pc.ProductID ORDER BY Profit DESC;
SELECT p.Name FROM Product p JOIN ProductInventory pi ON p.ProductID = pi.ProductID WHERE pi.LocationID = 1 AND pi.Shelf = 'L' AND pi.Bin = 6;
SELECT DISTINCT L.Name FROM Location L JOIN WorkOrderRouting WOR ON L.LocationID = WOR.LocationID WHERE WOR.WorkOrderID = 35493;
SELECT ProductID, LargePhotoFileName FROM ProductPhoto WHERE LargePhoto IS NOT NULL;
SELECT p.Name FROM Product p JOIN ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID WHERE ps.Name = 'Socks';
WITH CableLocks AS (     SELECT         ProductID,         Name,         ListPrice,         COUNT(*) OVER () * (100 / ListPrice) AS NumCableLocksBuyable     FROM         works_cycles.Product     WHERE         Name = 'Cable Lock' ) SELECT     NumCableLocksBuyable FROM     CableLocks;
SELECT T1.Name FROM ScrapReason AS T1 INNER JOIN WorkOrder AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T2.WorkOrderID = 57788;
SELECT StandardCost FROM Product WHERE Name LIKE '%sport%';
SELECT Quantity FROM ProductInventory WHERE ProductID = 476 AND LocationID = (SELECT LocationID FROM Location WHERE Name = 'Metal Storage');
SELECT * FROM Product WHERE StandardCost < (SELECT AVG(StandardCost) FROM Product);
SELECT ((p.ListPrice - p.StandardCost) / p.StandardCost) * 100 AS PercentageOfProfit FROM Product p WHERE p.ProductID = 858;
SELECT COUNT(*) FROM ProductPhoto WHERE ThumbNailPhoto IS NOT NULL;
SELECT DATEDIFF(day, ActualStartDate, ActualEndDate) AS DaysToEndWorkOrder FROM WorkOrder WHERE WorkOrderID = 425;
SELECT TOP 1 p.Name, p.ListPrice FROM Product AS p WHERE YEAR(p.SellStartDate) <= 2012 AND (p.SellEndDate IS NULL OR YEAR(p.SellEndDate) > 2012) ORDER BY p.ListPrice DESC;
SELECT StandardCost FROM Product WHERE ProductID = 847;
SELECT OrganizationLevel FROM Employee WHERE JobTitle = 'Human Resources Manager';
SELECT COUNT(*) FROM WorkOrder WHERE EndDate > DueDate;
SELECT StandardCost, ProductNumber FROM Product WHERE ProductID = 888;
SELECT COUNT(*) FROM ProductPhoto WHERE ThumbnailPhotoFileName = 'roadster_black_small.gif';
SELECT LocationID, Shelf, Bin FROM ProductInventory WHERE ProductID = (     SELECT ProductID     FROM Product     WHERE Name = 'Lock Ring' )
SELECT pc.Name AS ProductCategory FROM ProductSubcategory psc JOIN ProductCategory pc ON psc.ProductCategoryID = pc.ProductCategoryID WHERE psc.Name = 'Road Frames'
SELECT wo.WorkOrderID, wo.ProductID, wo.OrderQty, wo.StockedQty, wo.ScrappedQty, wo.StartDate, wo.EndDate, wo.DueDate, sr.Name AS ScrapReason FROM WorkOrder wo JOIN ScrapReason sr ON wo.ScrapReasonID = sr.ScrapReasonID WHERE sr.Name = 'Handling Damage'
SELECT (p.ListPrice - p.StandardCost) AS Profit FROM Product AS p WHERE p.ProductID = 792;
SELECT p.FirstName, p.LastName FROM Person p JOIN EmailAddress ea ON p.BusinessEntityID = ea.BusinessEntityID WHERE ea.EmailAddress = 'regina7@adventure-works.com';
SELECT DISTINCT LocationID FROM ProductInventory WHERE ProductID = 810;
SELECT P.Name FROM Product P JOIN WorkOrder WO ON P.ProductID = WO.ProductID WHERE WO.WorkOrderID = 2540;
SELECT ListPrice FROM Product WHERE Name = 'AWC Logo Cap'
SELECT wo.WorkOrderID, wo.ProductID, wo.OrderQty, wo.StockedQty, wo.ScrappedQty, wo.StartDate, wo.EndDate, wo.DueDate FROM WorkOrder AS wo JOIN Product AS p ON wo.ProductID = p.ProductID WHERE p.Name = 'Down Tube';
SELECT AVG((p.ListPrice - p.StandardCost) / p.StandardCost) AS AverageProfitPercentage FROM Product p WHERE p.ListPrice > p.StandardCost;
SELECT     COUNT(CASE WHEN Name = 'Subassembly' THEN WorkOrderID END) / COUNT(WorkOrderID) AS ProportionSubassembly FROM     WorkOrderRouting JOIN     ProductSubcategory ON WorkOrderRouting.ProductID = ProductSubcategory.ProductID WHERE     ProductSubcategory.Name = 'Subassembly';
SELECT COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ WHERE IMG_ID = 1;
SELECT COUNT(DISTINCT IMG_ID) FROM (     SELECT IMG_ID, COUNT(OBJ_SAMPLE_ID) as obj_count     FROM IMG_OBJ     GROUP BY IMG_ID     HAVING obj_count > 20 ) as img_with_more_than_20_objs;
SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID ORDER BY COUNT(OBJ_SAMPLE_ID) DESC LIMIT 1;
SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 1 AND OBJ_CLASS_ID = 297;
SELECT COUNT(*) FROM IMG_REL WHERE IMG_ID = 5 AND OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID;
SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 5 AND OBJ_SAMPLE_ID IN (     SELECT OBJ1_SAMPLE_ID     FROM IMG_REL     WHERE IMG_ID = 5 AND OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID );
SELECT COUNT(*) FROM IMG_OBJ IO, OBJ_CLASSES OC WHERE IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID AND IO.IMG_ID = 1 AND OC.OBJ_CLASS = 'man';
SELECT COUNT(DISTINCT IMG_ID) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'man' GROUP BY IMG_ID HAVING COUNT(*) >= 1;
SELECT OBJ_CLASSES.OBJ_CLASS FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 1;
SELECT P.PRED_CLASS FROM IMG_REL I JOIN PRED_CLASSES P ON I.PRED_CLASS_ID = P.PRED_CLASS_ID WHERE I.IMG_ID = 1 AND I.OBJ1_SAMPLE_ID = 8 AND I.OBJ2_SAMPLE_ID = 4;
SELECT COUNT(*) FROM IMG_REL JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID WHERE IMG_REL.IMG_ID = 1 AND PRED_CLASSES.PRED_CLASS = 'parked on';
SELECT P.PRED_CLASS FROM IMG_REL I JOIN PRED_CLASSES P ON I.PRED_CLASS_ID = P.PRED_CLASS_ID WHERE I.IMG_ID = 1 AND (I.OBJ1_SAMPLE_ID = 14 OR I.OBJ2_SAMPLE_ID = 14);
SELECT COUNT(DISTINCT IMG_ID) FROM IMG_REL JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID WHERE PRED_CLASS = 'parked on' AND OBJ1_SAMPLE_ID != OBJ2_SAMPLE_ID;
SELECT IMG_ID FROM IMG_REL WHERE PRED_CLASS_ID = (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'parked on') GROUP BY IMG_ID HAVING COUNT(*) > 2 AND COUNT(DISTINCT OBJ1_SAMPLE_ID) > 1 AND COUNT(DISTINCT OBJ2_SAMPLE_ID) > 1;
SELECT P.PRED_CLASS FROM IMG_REL I JOIN PRED_CLASSES P ON I.PRED_CLASS_ID = P.PRED_CLASS_ID WHERE I.IMG_ID = 5 AND I.OBJ1_SAMPLE_ID = I.OBJ2_SAMPLE_ID;
SELECT IO.X, IO.Y, IO.W, IO.H FROM IMG_OBJ IO JOIN IMG_REL IR ON IO.IMG_ID = IR.IMG_ID AND IO.OBJ_SAMPLE_ID = IR.OBJ1_SAMPLE_ID JOIN PRED_CLASSES PC ON IR.PRED_CLASS_ID = PC.PRED_CLASS_ID WHERE IO.IMG_ID = 1 AND PC.PRED_CLASS = 'by';
SELECT AVG(ABS(ImgObj1.Y - ImgObj2.Y)) FROM IMG_REL JOIN IMG_OBJ AS ImgObj1 ON IMG_REL.OBJ1_SAMPLE_ID = ImgObj1.OBJ_SAMPLE_ID JOIN IMG_OBJ AS ImgObj2 ON IMG_REL.OBJ2_SAMPLE_ID = ImgObj2.OBJ_SAMPLE_ID JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID WHERE IMG_REL.IMG_ID = 1 AND PRED_CLASSES.PRED_CLASS = 'parked on';
SELECT     (COUNT(CASE WHEN OBJ_CLASS = 'man' THEN OBJ_SAMPLE_ID END) * 100.0 / COUNT(OBJ_SAMPLE_ID)) AS percentage FROM     IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE     IMG_ID = 1;
SELECT COUNT(*) FROM ATT_CLASSES;
SELECT COUNT(*) FROM OBJ_CLASSES;
SELECT COUNT(*) FROM PRED_CLASSES;
SELECT X, Y, W, H FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_ID = 2324765 AND OBJ_CLASS = 'kite';
SELECT COUNT(*) FROM IMG_OBJ io JOIN IMG_OBJ_ATT ioa ON io.IMG_ID = ioa.IMG_ID AND io.OBJ_SAMPLE_ID = ioa.OBJ_SAMPLE_ID JOIN ATT_CLASSES ac ON ioa.ATT_CLASS_ID = ac.ATT_CLASS_ID WHERE io.IMG_ID = 2347915 AND ac.ATT_CLASS = 'white';
SELECT COUNT(*) FROM IMG_OBJ io JOIN IMG_OBJ_ATT ioa ON io.IMG_ID = ioa.IMG_ID AND io.OBJ_SAMPLE_ID = ioa.OBJ_SAMPLE_ID JOIN ATT_CLASSES ac ON ioa.ATT_CLASS_ID = ac.ATT_CLASS_ID WHERE io.IMG_ID = 2377985 AND ac.ATT_CLASS = 'electrical';
SELECT P.PRED_CLASS FROM PRED_CLASSES P JOIN IMG_REL R ON P.PRED_CLASS_ID = R.PRED_CLASS_ID WHERE R.IMG_ID = 2345511 AND R.OBJ1_SAMPLE_ID = 12 AND R.OBJ2_SAMPLE_ID = 8;
SELECT T1.OBJ1_SAMPLE_ID FROM IMG_REL AS T1 JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 2345524 AND T1.OBJ2_SAMPLE_ID = 1 AND T2.PRED_CLASS = 'lying on';
SELECT COUNT(*) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 6 AND OBJ_CLASSES.OBJ_CLASS = 'food';
SELECT COUNT(DISTINCT IMG_ID) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'suit';
SELECT P.PRED_CLASS FROM PRED_CLASSES P JOIN IMG_REL R ON P.PRED_CLASS_ID = R.PRED_CLASS_ID JOIN IMG_OBJ O1 ON R.OBJ1_SAMPLE_ID = O1.OBJ_SAMPLE_ID JOIN OBJ_CLASSES OC1 ON O1.OBJ_CLASS_ID = OC1.OBJ_CLASS_ID JOIN IMG_OBJ O2 ON R.OBJ2_SAMPLE_ID = O2.OBJ_SAMPLE_ID JOIN OBJ_CLASSES OC2 ON O2.OBJ_CLASS_ID = OC2.OBJ_CLASS_ID WHERE OC1.OBJ_CLASS = 'feathers' AND OC2.OBJ_CLASS = 'onion' AND O1.IMG_ID = 2345528;
SELECT att.ATT_CLASS FROM ATT_CLASSES att JOIN IMG_OBJ_ATT ioa ON att.ATT_CLASS_ID = ioa.ATT_CLASS_ID JOIN IMG_OBJ io ON ioa.IMG_ID = io.IMG_ID AND ioa.OBJ_SAMPLE_ID = io.OBJ_SAMPLE_ID JOIN OBJ_CLASSES obj ON io.OBJ_CLASS_ID = obj.OBJ_CLASS_ID WHERE io.IMG_ID = 2377988 AND obj.OBJ_CLASS = 'weeds'
SELECT obj.OBJ_CLASS FROM IMG_OBJ_ATT ioa JOIN ATT_CLASSES att ON ioa.ATT_CLASS_ID = att.ATT_CLASS_ID JOIN IMG_OBJ io ON ioa.IMG_ID = io.IMG_ID AND ioa.OBJ_SAMPLE_ID = io.OBJ_SAMPLE_ID JOIN OBJ_CLASSES obj ON io.OBJ_CLASS_ID = obj.OBJ_CLASS_ID WHERE att.ATT_CLASS = 'blurry' AND ioa.IMG_ID = 2377993;
SELECT COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 2353079 AND OBJ_CLASSES.OBJ_CLASS = 'wall';
SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 2320341 AND T1.OBJ_SAMPLE_ID = 10;
SELECT     (SELECT COUNT(OBJ_SAMPLE_ID)      FROM IMG_OBJ IO JOIN OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID      WHERE OC.OBJ_CLASS = 'broccoli') /     (SELECT COUNT(OBJ_SAMPLE_ID)      FROM IMG_OBJ IO JOIN OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID      WHERE OC.OBJ_CLASS = 'tomato')
SELECT COUNT(DISTINCT IMG_ID) FROM (     SELECT IMG_ID, COUNT(ATT_CLASS_ID) as attribute_count     FROM IMG_OBJ_ATT     GROUP BY IMG_ID     HAVING attribute_count >= 25 ) AS subquery;
SELECT DISTINCT IMG_ID FROM IMG_REL WHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID;
SELECT COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ_ATT JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID WHERE ATT_CLASSES.ATT_CLASS_ID = (     SELECT ATT_CLASS_ID     FROM (         SELECT ATT_CLASS_ID, COUNT(*) as cnt         FROM IMG_OBJ_ATT         GROUP BY ATT_CLASS_ID         ORDER BY cnt DESC         LIMIT 1     ) subquery );
SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS IN ('bus', 'train', 'aeroplane', 'car');
SELECT OBJ_CLASSES.OBJ_CLASS FROM OBJ_CLASSES JOIN IMG_OBJ ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID JOIN IMG_OBJ_ATT ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID JOIN ATT_CLASSES ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID WHERE ATT_CLASSES.ATT_CLASS = 'very large' AND OBJ_CLASSES.OBJ_CLASS = 'bike';
SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion';
SELECT ATT_CLASSES.ATT_CLASS FROM ATT_CLASSES JOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID WHERE IMG_OBJ_ATT.IMG_ID = 8;
SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 4 AND OBJ_SAMPLE_ID IN (     SELECT OBJ1_SAMPLE_ID     FROM IMG_REL     WHERE IMG_ID = 4 AND PRED_CLASS_ID = 144 ) OR OBJ_SAMPLE_ID IN (     SELECT OBJ2_SAMPLE_ID     FROM IMG_REL     WHERE IMG_ID = 4 AND PRED_CLASS_ID = 144 );
SELECT COUNT(DISTINCT i.IMG_ID) FROM IMG_OBJ_ATT i JOIN ATT_CLASSES a ON i.ATT_CLASS_ID = a.ATT_CLASS_ID WHERE a.ATT_CLASS = 'black' GROUP BY i.IMG_ID HAVING COUNT(*) >= 5;
SELECT T3.PRED_CLASS_ID FROM IMG_OBJ AS T1 JOIN IMG_REL AS T2 ON T1.OBJ_SAMPLE_ID = T2.OBJ1_SAMPLE_ID JOIN PRED_CLASSES AS T3 ON T2.PRED_CLASS_ID = T3.PRED_CLASS_ID WHERE T1.H = (SELECT MAX(H) FROM IMG_OBJ)
SELECT IO.IMG_ID FROM IMG_OBJ_ATT IOA JOIN ATT_CLASSES AC ON IOA.ATT_CLASS_ID = AC.ATT_CLASS_ID JOIN IMG_OBJ IO ON IOA.IMG_ID = IO.IMG_ID AND IOA.OBJ_SAMPLE_ID = IO.OBJ_SAMPLE_ID WHERE AC.ATT_CLASS = 'white' GROUP BY IO.IMG_ID ORDER BY COUNT(IOA.ATT_CLASS_ID) DESC LIMIT 1;
SELECT IO.X, IO.Y FROM IMG_REL AS IR JOIN IMG_OBJ AS IO ON IR.OBJ1_SAMPLE_ID = IO.OBJ_SAMPLE_ID WHERE IR.PRED_CLASS_ID = 98;
SELECT COUNT(*) FROM IMG_REL JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID WHERE IMG_REL.IMG_ID = 3050 AND PRED_CLASSES.PRED_CLASS = 'has';
SELECT DISTINCT o.OBJ_CLASS FROM OBJ_CLASSES o JOIN IMG_OBJ i ON o.OBJ_CLASS_ID = i.OBJ_CLASS_ID WHERE i.X = 0 AND i.Y = 0;
SELECT P.PRED_CLASS FROM PRED_CLASSES P WHERE EXISTS (     SELECT 1     FROM IMG_REL R     WHERE R.PRED_CLASS_ID = P.PRED_CLASS_ID     AND R.OBJ1_SAMPLE_ID = R.OBJ2_SAMPLE_ID );
SELECT IO.X, IO.Y, IO.W, IO.H FROM IMG_OBJ IO JOIN OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID WHERE IO.IMG_ID = 2222 AND OC.OBJ_CLASS = 'feathers';
SELECT COUNT(DISTINCT T1.IMG_ID) FROM IMG_REL T1 JOIN PRED_CLASSES T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.OBJ1_SAMPLE_ID != T1.OBJ2_SAMPLE_ID AND T2.PRED_CLASS = 'on';
SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 0 AND T1.Y = 0 AND T1.W = 135 AND T1.H = 212
SELECT W, H FROM IMG_OBJ WHERE OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'keyboard') AND IMG_ID = 3;
SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 6 AND OBJ_CLASS_ID = (     SELECT OBJ_CLASS_ID     FROM OBJ_CLASSES     WHERE OBJ_CLASS = 'folk' );
SELECT X, Y, W, H FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'onion' AND IMG_OBJ.IMG_ID = 285930;
SELECT COUNT(OBJ_CLASS_ID), OBJ_CLASS FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_ID = 72 AND X = 341 AND Y = 27 AND W = 42 AND H = 51;
SELECT att.ATT_CLASS FROM (   SELECT IMG_OBJ_ATT.ATT_CLASS_ID, COUNT(*) AS cnt   FROM IMG_OBJ_ATT   JOIN IMG_OBJ AS obj1 ON IMG_OBJ_ATT.IMG_ID = obj1.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = obj1.OBJ_SAMPLE_ID   WHERE IMG_OBJ_ATT.IMG_ID = 5   GROUP BY IMG_OBJ_ATT.ATT_CLASS_ID   HAVING COUNT(*) >= 2 ) AS multi_att JOIN ATT_CLASSES AS att ON multi_att.ATT_CLASS_ID = att.ATT_CLASS_ID;
SELECT ATT_CLASSES.ATT_CLASS FROM ATT_CLASSES JOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID JOIN IMG_OBJ ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 27 AND OBJ_CLASSES.OBJ_CLASS = 'wall'
SELECT o.OBJ_CLASS FROM OBJ_CLASSES o JOIN IMG_OBJ i ON o.OBJ_CLASS_ID = i.OBJ_CLASS_ID JOIN IMG_OBJ_ATT ioa ON i.IMG_ID = ioa.IMG_ID AND i.OBJ_SAMPLE_ID = ioa.OBJ_SAMPLE_ID JOIN ATT_CLASSES a ON ioa.ATT_CLASS_ID = a.ATT_CLASS_ID WHERE a.ATT_CLASS = 'scattered' AND i.IMG_ID = 10;
SELECT COUNT(DISTINCT T1.IMG_ID) FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'bridge';
SELECT COUNT(OBJ_CLASS_ID) / COUNT(DISTINCT IMG_ID) AS Average_Objects_Per_Image FROM IMG_OBJ;
SELECT ATT_CLASSES.ATT_CLASS FROM ATT_CLASSES JOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID JOIN IMG_OBJ ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 1 AND OBJ_CLASSES.OBJ_CLASS = 'van'
SELECT     o.OBJ_CLASS AS object,     a.ATT_CLASS AS attribute,     p.PRED_CLASS AS relationship FROM     IMG_OBJ i LEFT JOIN     OBJ_CLASSES o ON i.OBJ_CLASS_ID = o.OBJ_CLASS_ID LEFT JOIN     IMG_OBJ_ATT ia ON i.IMG_ID = ia.IMG_ID AND i.OBJ_SAMPLE_ID = ia.OBJ_SAMPLE_ID LEFT JOIN     ATT_CLASSES a ON ia.ATT_CLASS_ID = a.ATT_CLASS_ID LEFT JOIN     IMG_REL r ON i.IMG_ID = r.IMG_ID AND i.OBJ_SAMPLE_ID = r.OBJ1_SAMPLE_ID LEFT JOIN     PRED_CLASSES p ON r.PRED_CLASS_ID = p.PRED_CLASS_ID WHERE     i.IMG_ID = 1 AND i.X = 388 AND i.Y = 369 AND i.W = 48 AND i.H = 128
SELECT P.PRED_CLASS FROM PRED_CLASSES P JOIN IMG_REL R ON P.PRED_CLASS_ID = R.PRED_CLASS_ID WHERE R.IMG_ID = 1 AND R.OBJ1_SAMPLE_ID = 25 AND R.OBJ2_SAMPLE_ID = 2;
SELECT COUNT(*) FROM IMG_OBJ_ATT WHERE IMG_ID = 4 AND OBJ_SAMPLE_ID = 7;
SELECT COUNT(OBJ_CLASS_ID) FROM IMG_OBJ WHERE IMG_ID = 31;
SELECT ATT_CLASS_ID, COUNT(ATT_CLASS_ID) AS count FROM IMG_OBJ_ATT WHERE IMG_ID = 20 GROUP BY ATT_CLASS_ID ORDER BY count DESC LIMIT 1;
SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 42 AND OBJ_SAMPLE_ID = 7;
SELECT     (COUNT(CASE WHEN ATT_CLASSES.ATT_CLASS = 'white' THEN IMG_OBJ.OBJ_SAMPLE_ID END) * 100.0 / COUNT(IMG_OBJ.OBJ_SAMPLE_ID)) AS percentage FROM     IMG_OBJ JOIN     IMG_OBJ_ATT ON IMG_OBJ.IMG_ID = IMG_OBJ_ATT.IMG_ID AND IMG_OBJ.OBJ_SAMPLE_ID = IMG_OBJ_ATT.OBJ_SAMPLE_ID JOIN     ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID WHERE     IMG_OBJ.IMG_ID = 99;
SELECT COUNT(*) FROM IMG_OBJ_ATT JOIN ATT_CLASSES ON IMG_OBJ_ATT.ATT_CLASS_ID = ATT_CLASSES.ATT_CLASS_ID WHERE IMG_OBJ_ATT.IMG_ID = 5;
SELECT OBJ_CLASS FROM OBJ_CLASSES WHERE OBJ_CLASS_ID = 10;
SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 422 AND T1.Y = 63 AND T1.W = 77 AND T1.H = 363;
SELECT PRED_CLASS FROM PRED_CLASSES WHERE PRED_CLASS_ID = 12;
SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 8;
SELECT COUNT(*) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 908 AND OBJ_CLASSES.OBJ_CLASS = 'tip';
SELECT COUNT(*) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 41 AND OBJ_CLASSES.OBJ_CLASS = 'kitchen';
SELECT COUNT(DISTINCT IMG_ID) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'paint';
SELECT COUNT(*) FROM IMG_OBJ WHERE IMG_ID = 2315533 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'cloud');
SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion';
SELECT X, Y, W, H FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 1344 AND OBJ_CLASSES.OBJ_CLASS = 'spoon';
SELECT CAST(SUM(CASE WHEN OBJ_CLASSES.OBJ_CLASS = 'surface' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(OBJ_CLASSES.OBJ_CLASS_ID) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 2654;
SELECT COUNT(DISTINCT IMG_OBJ.IMG_ID) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'wood';
SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.H = (SELECT MAX(H) FROM IMG_OBJ)
SELECT     (SUM(CASE WHEN OBJ_CLASS = 'airplane' THEN 1 ELSE 0 END) * 100.0 / COUNT(OBJ_CLASS_ID)) AS percentage FROM     IMG_OBJ IO JOIN     OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID;
SELECT COUNT(OBJ_SAMPLE_ID) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_ID = 660 AND OBJ_CLASS = 'animal';
SELECT COUNT(*) FROM IMG_OBJ WHERE IMG_ID = 1098 AND OBJ_CLASS_ID = (SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'bed');
SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.H = (SELECT MIN(H) FROM IMG_OBJ)
SELECT X, Y, W, H FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'kitchen' AND IMG_OBJ.IMG_ID = 250;
SELECT IMG_ID FROM IMG_OBJ GROUP BY IMG_ID HAVING COUNT(OBJ_SAMPLE_ID) > 20;
SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 8 ORDER BY W DESC LIMIT 1;
SELECT OBJ_CLASS FROM IMG_OBJ IO JOIN OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID WHERE IO.IMG_ID = 5 AND IO.X = 634 AND IO.Y = 468;
SELECT IO.OBJ_SAMPLE_ID, OC.OBJ_CLASS FROM IMG_OBJ IO JOIN OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID JOIN IMG_OBJ_ATT IOA ON IO.IMG_ID = IOA.IMG_ID AND IO.OBJ_SAMPLE_ID = IOA.OBJ_SAMPLE_ID GROUP BY IO.OBJ_SAMPLE_ID, OC.OBJ_CLASS ORDER BY COUNT(IOA.OBJ_SAMPLE_ID) DESC LIMIT 1;
SELECT CAST(COUNT(CASE WHEN IMG_ID = 1 THEN OBJ_SAMPLE_ID ELSE NULL END) AS REAL) / COUNT(CASE WHEN IMG_ID = 6 THEN OBJ_SAMPLE_ID ELSE NULL END) AS Ratio FROM IMG_OBJ;
SELECT AVG(OBJ_SAMPLE_COUNT) FROM (     SELECT IMG_ID, COUNT(OBJ_SAMPLE_ID) AS OBJ_SAMPLE_COUNT     FROM IMG_OBJ     GROUP BY IMG_ID ) AS OBJ_PER_IMG;
SELECT DISTINCT IO.IMG_ID FROM IMG_OBJ_ATT IOA JOIN ATT_CLASSES AC ON IOA.ATT_CLASS_ID = AC.ATT_CLASS_ID JOIN IMG_OBJ IO ON IOA.IMG_ID = IO.IMG_ID AND IOA.OBJ_SAMPLE_ID = IO.OBJ_SAMPLE_ID WHERE AC.ATT_CLASS = 'wired';
SELECT OBJ_CLASSES.OBJ_CLASS FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 10;
SELECT att.ATT_CLASS FROM ATT_CLASSES att JOIN IMG_OBJ_ATT ioa ON att.ATT_CLASS_ID = ioa.ATT_CLASS_ID JOIN IMG_OBJ io ON ioa.IMG_ID = io.IMG_ID AND ioa.OBJ_SAMPLE_ID = io.OBJ_SAMPLE_ID JOIN OBJ_CLASSES obj ON io.OBJ_CLASS_ID = obj.OBJ_CLASS_ID WHERE io.IMG_ID = 1314 AND obj.OBJ_CLASS = 'tip';
SELECT P.PRED_CLASS FROM PRED_CLASSES P JOIN IMG_REL R ON R.PRED_CLASS_ID = P.PRED_CLASS_ID JOIN IMG_OBJ O1 ON R.OBJ1_SAMPLE_ID = O1.OBJ_SAMPLE_ID AND O1.IMG_ID = 2360078 AND O1.OBJ_CLASS_ID = (     SELECT OC.OBJ_CLASS_ID FROM OBJ_CLASSES OC WHERE OC.OBJ_CLASS = 'chain' ) JOIN IMG_OBJ O2 ON R.OBJ2_SAMPLE_ID = O2.OBJ_SAMPLE_ID AND O2.IMG_ID = 2360078 AND O2.OBJ_CLASS_ID = (     SELECT OC.OBJ_CLASS_ID FROM OBJ_CLASSES OC WHERE OC.OBJ_CLASS = 'label' );
SELECT COUNT(DISTINCT T3.IMG_ID) FROM ATT_CLASSES AS T1 JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID AND T2.OBJ_SAMPLE_ID = T3.OBJ_SAMPLE_ID WHERE T1.ATT_CLASS = 'polka dot';
SELECT att.ATT_CLASS FROM ATT_CLASSES att JOIN IMG_OBJ_ATT ioa ON att.ATT_CLASS_ID = ioa.ATT_CLASS_ID JOIN IMG_OBJ io ON ioa.IMG_ID = io.IMG_ID AND ioa.OBJ_SAMPLE_ID = io.OBJ_SAMPLE_ID WHERE io.IMG_ID = 400 ORDER BY io.W DESC LIMIT 1;
SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID GROUP BY T1.OBJ_CLASS_ID ORDER BY COUNT(T1.IMG_ID) DESC LIMIT 1;
SELECT W, H FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 1 AND OBJ_CLASSES.OBJ_CLASS = 'van';
SELECT IO.X, IO.Y FROM IMG_OBJ IO JOIN IMG_OBJ_ATT IOA ON IO.IMG_ID = IOA.IMG_ID AND IO.OBJ_SAMPLE_ID = IOA.OBJ_SAMPLE_ID JOIN ATT_CLASSES AC ON IOA.ATT_CLASS_ID = AC.ATT_CLASS_ID WHERE IO.IMG_ID = 1 AND AC.ATT_CLASS = 'sparse';
SELECT     (COUNT(CASE WHEN OBJ_CLASSES.OBJ_CLASS = 'street lights' THEN IMG_OBJ.OBJ_SAMPLE_ID ELSE NULL END) * 100.0 / COUNT(IMG_OBJ.OBJ_SAMPLE_ID)) AS percentage FROM     IMG_OBJ JOIN     OBJ_CLASSES ON     IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID;
SELECT     (COUNT(CASE WHEN OBJ_CLASSES.OBJ_CLASS = 'windows' THEN IMG_OBJ.OBJ_SAMPLE_ID END) / COUNT(IMG_OBJ.OBJ_SAMPLE_ID)) * 100 as percentage FROM     IMG_OBJ JOIN     OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE     IMG_OBJ.IMG_ID = 5;
SELECT COUNT(DISTINCT IMG_ID) FROM IMG_OBJ WHERE X = 5 AND Y = 5;
SELECT COUNT(DISTINCT IMG_ID) FROM (     SELECT IMG_ID, COUNT(OBJ_SAMPLE_ID) as obj_count     FROM IMG_OBJ     GROUP BY IMG_ID     HAVING obj_count < 15 ) as img_with_less_obj
SELECT COUNT(DISTINCT IO.IMG_ID) FROM (     SELECT IO1.IMG_ID, COUNT(IOA.ATT_CLASS_ID) AS num_atts     FROM IMG_OBJ IO1     JOIN IMG_OBJ_ATT IOA ON IO1.IMG_ID = IOA.IMG_ID AND IO1.OBJ_SAMPLE_ID = IOA.OBJ_SAMPLE_ID     GROUP BY IO1.IMG_ID     HAVING COUNT(IOA.ATT_CLASS_ID) = 10 ) IO;
SELECT IMG_ID FROM (   SELECT IMG_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID, COUNT(DISTINCT PRED_CLASS_ID) as rel_count   FROM IMG_REL   GROUP BY IMG_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID ) as subquery WHERE rel_count > 1
SELECT COUNT(DISTINCT i.IMG_ID) FROM IMG_OBJ i JOIN OBJ_CLASSES o ON i.OBJ_CLASS_ID = o.OBJ_CLASS_ID WHERE o.OBJ_CLASS IN ('vegetable', 'fruits') GROUP BY i.IMG_ID HAVING COUNT(*) = 2;
SELECT IMG_ID FROM IMG_REL WHERE PRED_CLASS_ID = (SELECT PRED_CLASS_ID FROM PRED_CLASSES WHERE PRED_CLASS = 'parked on');
SELECT DISTINCT oc.OBJ_CLASS FROM OBJ_CLASSES oc JOIN IMG_OBJ io ON oc.OBJ_CLASS_ID = io.OBJ_CLASS_ID WHERE io.X = 5 AND io.Y = 5;
SELECT COUNT(DISTINCT T3.IMG_ID) FROM OBJ_CLASSES AS T1 JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID JOIN (SELECT DISTINCT IMG_ID FROM IMG_OBJ) AS T3 ON T2.IMG_ID = T3.IMG_ID WHERE T1.OBJ_CLASS = 'keyboard';
SELECT W, H FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'keyboard' AND IMG_OBJ.X = 5 AND IMG_OBJ.Y = 647;
SELECT DISTINCT IO.IMG_ID FROM IMG_OBJ_ATT IOA JOIN ATT_CLASSES AC ON IOA.ATT_CLASS_ID = AC.ATT_CLASS_ID JOIN IMG_OBJ IO ON IOA.IMG_ID = IO.IMG_ID AND IOA.OBJ_SAMPLE_ID = IO.OBJ_SAMPLE_ID WHERE AC.ATT_CLASS = 'horse';
SELECT IO.X, IO.Y FROM IMG_OBJ IO JOIN IMG_OBJ_ATT IOA ON IO.IMG_ID = IOA.IMG_ID AND IO.OBJ_SAMPLE_ID = IOA.OBJ_SAMPLE_ID JOIN ATT_CLASSES AC ON IOA.ATT_CLASS_ID = AC.ATT_CLASS_ID JOIN OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID WHERE AC.ATT_CLASS = 'horse' AND OC.OBJ_CLASS = 'fur';
SELECT ATT_CLASSES.ATT_CLASS FROM ATT_CLASSES JOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID WHERE IMG_OBJ_ATT.IMG_ID = 15;
SELECT COUNT(DISTINCT T1.IMG_ID) FROM IMG_REL AS T1 JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.PRED_CLASS = 'reading' GROUP BY T1.OBJ1_SAMPLE_ID, T1.OBJ2_SAMPLE_ID HAVING COUNT(T1.PRED_CLASS_ID) > 1;
SELECT COUNT(DISTINCT T3.IMG_ID) FROM ATT_CLASSES AS T1 JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID JOIN IMG_OBJ AS T3 ON T2.IMG_ID = T3.IMG_ID AND T2.OBJ_SAMPLE_ID = T3.OBJ_SAMPLE_ID WHERE T1.ATT_CLASS = 'picture';
SELECT COUNT(DISTINCT i.IMG_ID) FROM IMG_OBJ i JOIN OBJ_CLASSES o ON i.OBJ_CLASS_ID = o.OBJ_CLASS_ID JOIN IMG_OBJ_ATT ia ON i.IMG_ID = ia.IMG_ID AND i.OBJ_SAMPLE_ID = ia.OBJ_SAMPLE_ID JOIN ATT_CLASSES a ON ia.ATT_CLASS_ID = a.ATT_CLASS_ID WHERE o.OBJ_CLASS = 'bear' AND a.ATT_CLASS = 'picture';
SELECT DISTINCT ATT_CLASSES.ATT_CLASS FROM ATT_CLASSES JOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID JOIN IMG_OBJ ON IMG_OBJ_ATT.IMG_ID = IMG_OBJ.IMG_ID AND IMG_OBJ_ATT.OBJ_SAMPLE_ID = IMG_OBJ.OBJ_SAMPLE_ID WHERE IMG_OBJ.X = 5 AND IMG_OBJ.Y = 5;
SELECT AVG(T1.IMG_ID) FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'keyboard';
SELECT CAST(COUNT(case when OBJ_CLASSES.OBJ_CLASS = 'man' then IMG_OBJ.IMG_ID end) AS REAL) / COUNT(case when OBJ_CLASSES.OBJ_CLASS = 'person' then IMG_OBJ.IMG_ID end) FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID GROUP BY IMG_OBJ.IMG_ID;
SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 17 AND X = 0 AND Y = 0;
SELECT W, H FROM IMG_OBJ WHERE OBJ_SAMPLE_ID = 2;
SELECT COUNT(*) FROM IMG_OBJ WHERE IMG_ID = 12 AND Y = 0;
SELECT ATT_CLASSES.ATT_CLASS FROM ATT_CLASSES JOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID WHERE IMG_OBJ_ATT.IMG_ID = 22;
SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 36 AND T1.X = 0 AND T1.Y = 0;
SELECT IO.X, IO.Y, IO.W, IO.H FROM IMG_OBJ IO JOIN OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID WHERE OC.OBJ_CLASS = 'pizza' LIMIT 10;
SELECT O.OBJ_CLASS FROM OBJ_CLASSES O JOIN IMG_OBJ IO ON O.OBJ_CLASS_ID = IO.OBJ_CLASS_ID WHERE IO.X = 126 AND IO.Y = 363;
SELECT OBJ_CLASSES.OBJ_CLASS FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 56 GROUP BY IMG_OBJ.OBJ_CLASS_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT OBJ_CLASSES.OBJ_CLASS, IMG_OBJ.W, IMG_OBJ.H FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE IMG_OBJ.IMG_ID = 22;
SELECT P.PRED_CLASS FROM IMG_REL I JOIN PRED_CLASSES P ON I.PRED_CLASS_ID = P.PRED_CLASS_ID WHERE I.IMG_ID = 68;
SELECT COUNT(*) FROM IMG_REL JOIN PRED_CLASSES ON IMG_REL.PRED_CLASS_ID = PRED_CLASSES.PRED_CLASS_ID WHERE IMG_REL.IMG_ID = 107 AND PRED_CLASSES.PRED_CLASS = 'has';
SELECT PRED_CLASSES.PRED_CLASS FROM PRED_CLASSES JOIN IMG_REL ON PRED_CLASSES.PRED_CLASS_ID = IMG_REL.PRED_CLASS_ID WHERE IMG_REL.IMG_ID = 4434 GROUP BY PRED_CLASSES.PRED_CLASS ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(OBJ_CLASSES.OBJ_CLASS), IMG_OBJ.X, IMG_OBJ.Y FROM IMG_OBJ JOIN OBJ_CLASSES ON IMG_OBJ.OBJ_CLASS_ID = OBJ_CLASSES.OBJ_CLASS_ID WHERE OBJ_CLASSES.OBJ_CLASS = 'dress' AND IMG_OBJ.IMG_ID = 1764;
SELECT X, Y FROM IMG_OBJ io JOIN IMG_OBJ_ATT ioa ON io.IMG_ID = ioa.IMG_ID AND io.OBJ_SAMPLE_ID = ioa.OBJ_SAMPLE_ID JOIN ATT_CLASSES ac ON ioa.ATT_CLASS_ID = ac.ATT_CLASS_ID WHERE io.IMG_ID = 23 AND ac.ATT_CLASS = 'cast';
SELECT COUNT(*) FROM ATT_CLASSES JOIN IMG_OBJ_ATT ON ATT_CLASSES.ATT_CLASS_ID = IMG_OBJ_ATT.ATT_CLASS_ID WHERE ATT_CLASSES.ATT_CLASS = 'blue' AND IMG_OBJ_ATT.IMG_ID = 2355735;
SELECT AVG(W) AS Average_Width, AVG(H) AS Average_Height, OC.OBJ_CLASS FROM IMG_OBJ IO JOIN OBJ_CLASSES OC ON IO.OBJ_CLASS_ID = OC.OBJ_CLASS_ID WHERE IO.IMG_ID = 47 GROUP BY OC.OBJ_CLASS;
SELECT firstName, lastName FROM Master WHERE birthCountry != 'USA' AND birthYear = 1990;
SELECT nameGiven FROM Master WHERE shootCatch IS NULL AND pos = 'F';
SELECT firstName, lastName FROM Master WHERE hofID IS NULL;
SELECT nameGiven, birthYear, birthMon, birthDay FROM Master WHERE deathYear IS NULL ORDER BY birthYear DESC, birthMon DESC, birthDay DESC LIMIT 1;
SELECT firstName, lastName, (deathYear - birthYear) AS Age FROM Master WHERE deathYear IS NOT NULL AND shootCatch IS NULL;
SELECT T1.playerID FROM Goalies AS T1 JOIN Teams AS T2 ON T1.tmID = T2.tmID WHERE T1.year BETWEEN 2000 AND 2005 GROUP BY T1.playerID HAVING COUNT(DISTINCT(T2.tmID)) > 2
SELECT AVG(weight) FROM Master WHERE height > 72;
SELECT T1.nameGiven, T1.birthCountry FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID GROUP BY T1.playerID HAVING SUM(T2.Min) > 5000;
SELECT DISTINCT playerID FROM Goalies WHERE lgID = 'PCHA' INTERSECT SELECT DISTINCT playerID FROM Goalies WHERE lgID = 'NHL';
SELECT T1.lastName, T1.birthYear, T1.deathYear, T2.year, MAX(T2.Min) FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.deathYear IS NOT NULL GROUP BY T1.lastName ORDER BY MAX(T2.Min) DESC;
SELECT Master.nameGiven, Master.height, Master.weight, (YEAR(NOW()) - birthYear) AS Age FROM Master JOIN Goalies ON Master.playerID = Goalies.playerID WHERE Goalies.year BETWEEN 2000 AND 2010 AND Goalies.tmID = 'COL';
SELECT playerID, year FROM Goalies WHERE ENG >= 10;
Error: 第 7625 个样本有 2 个SQL。
SELECT DISTINCT T3.name AS TeamName, T1.firstName, T1.lastName FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID JOIN Teams AS T3 ON T2.tmID = T3.tmID AND T2.year = T3.year WHERE T2.year = 2005 AND T1.height < 72;
SELECT T1.nameNick, T3.tmID, T3.year FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID JOIN Teams AS T3 ON T2.tmID = T3.tmID WHERE T1.playerID = 'aubinje01';
SELECT T1.firstName, T1.lastName, MAX(T2.COUNT_seasons) AS most_seasons, SUM(T2.Min)/T2.COUNT_seasons AS avg_time_per_season FROM Master AS T1 JOIN (     SELECT playerID, COUNT(DISTINCT year) AS COUNT_seasons, SUM(Min) AS Total_Minutes     FROM Goalies     GROUP BY playerID ) AS T2 ON T1.playerID = T2.playerID GROUP BY T1.playerID ORDER BY COUNT_seasons DESC LIMIT 1;
SELECT playerID, year FROM Goalies WHERE CAST(SHO AS FLOAT) / GA * 100 = 5.00;
SELECT firstName, lastName, birthYear FROM Master WHERE deathYear IS NOT NULL AND birthCountry <> deathCountry ORDER BY birthYear;
SELECT nameGiven, firstNHL, firstWHA FROM Master WHERE firstNHL IS NOT NULL AND firstWHA IS NOT NULL;
SELECT T1.nameGiven, T1.pos FROM Master AS T1 JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.deathYear IS NULL GROUP BY T1.playerID HAVING COUNT(T2.pos) > 1;
SELECT nameNick, lastNHL FROM Master WHERE height = (SELECT MAX(height) FROM Master)
SELECT AVG(T1.height) AS avg_height_after_1990, (SELECT AVG(height) FROM Master WHERE birthYear < 1990) AS avg_height_before_1990 FROM Master AS T1 WHERE T1.birthYear >= 1990
SELECT DISTINCT g.playerID, g.tmID FROM Goalies g JOIN Master m ON g.playerID = m.playerID WHERE g.shootCatch = 'L' AND m.pos = 'G' AND m.coachID IS NOT NULL GROUP BY g.playerID, g.tmID;
SELECT DISTINCT g.playerID, g.tmID FROM Goalies g JOIN Master m ON g.playerID = m.playerID WHERE m.pos = 'G' AND m.deathYear IS NOT NULL AND m.birthCountry = 'Canada';
SELECT G.playerID, G.year FROM Goalies AS G JOIN Teams AS T ON G.tmID = T.tmID AND G.year = T.year WHERE T.name = 'Boston Bruins' AND T.rank = 1;
SELECT DISTINCT T2.name FROM Goalies AS T1 JOIN Teams AS T2 ON T1.tmID = T2.tmID JOIN Master AS T3 ON T1.playerID = T3.playerID WHERE T3.firstNHL < 1950 AND T3.deathYear IS NULL;
SELECT T3.firstName, T3.lastName, T1.tmID, T1.year FROM Coaches AS T1 JOIN Master AS T2 ON T1.coachID = T2.coachID JOIN Master AS T3 ON T2.playerID = T3.playerID WHERE T2.playerID IS NOT NULL;
SELECT C.nameGiven, T.name FROM Coaches AS CO JOIN Master AS M ON CO.coachID = M.coachID JOIN Teams AS T ON CO.tmID = T.tmID AND CO.year = T.year WHERE M.playerID IS NULL GROUP BY CO.coachID ORDER BY (CO.w / CO.g) * 100 DESC LIMIT 1;
SELECT coachID, year, (w/g)*100 AS Win_Percentage FROM Coaches WHERE tmID = 'DET' ORDER BY (w/g)*100 DESC LIMIT 1;
SELECT mc.nameGiven, mc.birthDay, mc.birthMon, mc.birthYear, GROUP_CONCAT(DISTINCT c.tmID) AS TeamsCoached FROM Master AS mc JOIN Coaches AS c ON mc.coachID = c.coachID WHERE c.tmID IN (SELECT tmID FROM Teams WHERE name = 'MTL') GROUP BY mc.coachID ORDER BY COUNT(DISTINCT c.year) DESC LIMIT 1;
SELECT g.playerID, m.firstName, m.lastName, g.tmID FROM Goalies g JOIN Master m ON g.playerID = m.playerID WHERE g.L > g.W GROUP BY g.playerID, g.tmID HAVING COUNT(DISTINCT g.year) >= 2 ORDER BY m.firstName, m.lastName;
SELECT     playerID,     year,     stint,     tmID,     (CAST(W AS REAL) / GP) * 100 AS WinningPercentage FROM     Goalies WHERE     playerID IN (         SELECT             playerID         FROM             Master         WHERE             birthYear = 1987 AND shootCatch IS NULL     )
SELECT T1.firstName, T1.lastName, SUM(T2.Min) / SUM(T2.GP) AS avg_time FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = 'aebisda01' AND T2.lgID = 'NHL' AND T2.pos = 'G'
SELECT Master.lastName, Master.firstName FROM Master JOIN Goalies ON Master.playerID = Goalies.playerID WHERE Master.deathYear IS NULL AND (CAST(SUM(Goalies.W) AS REAL) / SUM(Goalies.GP)) * 100 > 50 GROUP BY Master.playerID;
SELECT COUNT(*) AS total_awarded_posthumously FROM (     SELECT * FROM AwardsPlayers WHERE note = 'posthumous'     UNION ALL     SELECT * FROM AwardsCoaches WHERE note = 'posthumous' ) AS combined_awards;
SELECT COUNT(*) FROM AwardsPlayers JOIN Scoring ON AwardsPlayers.playerID = Scoring.playerID WHERE AwardsPlayers.year = 1983 AND Scoring.pos = 'G';
SELECT COUNT(*) FROM Coaches WHERE year = 2007 AND notes = 'interim';
SELECT COUNT(*) FROM CombinedShutouts WHERE year = 1977 AND `R/P` = 'R';
SELECT COUNT(*) FROM Goalies WHERE year = 2005 AND ENG IS NOT NULL;
SELECT DISTINCT year FROM Goalies WHERE lgID = 'NHL' AND SA IS NOT NULL;
SELECT COUNT(*) FROM TeamsPost WHERE PostW = PostL;
SELECT name FROM HOF WHERE year = 1978;
SELECT COUNT(*) FROM HOF WHERE category = 'Builder'
SELECT COUNT(*) FROM HOF WHERE year > 1980 AND category = 'Player';
SELECT T1.nameNick FROM Master AS T1 JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T2.year = 2007;
SELECT HOF.year FROM HOF JOIN Master ON HOF.hofID = Master.hofID WHERE Master.height = (SELECT MAX(height) FROM Master)
SELECT DISTINCT a.award FROM AwardsCoaches a JOIN Master m ON a.coachID = m.coachID WHERE m.birthCountry = 'Canada'
SELECT COUNT(*) FROM Coaches c JOIN Master m ON c.coachID = m.coachID WHERE c.w > 30 AND m.birthCountry = 'USA';
SELECT COUNT(*) FROM Coaches JOIN Master ON Coaches.coachID = Master.coachID WHERE Coaches.lgID = 'NHL' AND Master.birthCountry = 'Canada';
SELECT AwardsCoaches.award FROM AwardsCoaches JOIN Master ON AwardsCoaches.coachID = Master.coachID WHERE Master.birthYear = '1952';
SELECT COUNT(*) FROM AwardsCoaches ac JOIN Master m ON ac.coachID = m.coachID WHERE ac.year = 1940 AND m.birthCity = 'Toronto';
SELECT COUNT(*) FROM Coaches c JOIN AwardsCoaches ac ON c.coachID = ac.coachID JOIN Master m ON c.coachID = m.coachID WHERE ac.year > 1940 AND m.deathYear IS NOT NULL;
SELECT AwardsCoaches.award FROM AwardsCoaches JOIN Master ON AwardsCoaches.coachID = Master.coachID WHERE Master.deathYear IS NOT NULL AND AwardsCoaches.lgID = 'NHL'
SELECT COUNT(*) FROM Coaches c JOIN Master m ON c.coachID = m.coachID WHERE m.weight > 195 AND c.coachID IN (SELECT hofID FROM HOF);
SELECT firstName FROM Master WHERE playerID IN (     SELECT playerID     FROM Goalies     WHERE shootCatch IS NULL ) AND hofID IS NOT NULL;
SELECT COUNT(*) FROM (   SELECT playerID, coachID   FROM Master   WHERE playerID IS NOT NULL AND coachID IS NOT NULL ) AS m JOIN HOF ON m.playerID = HOF.hofID OR m.coachID = HOF.hofID;
SELECT DISTINCT M.birthCity FROM Master M JOIN AwardsPlayers AP ON M.playerID = AP.playerID WHERE AP.year = 1970;
SELECT COUNT(*) FROM AwardsPlayers ap JOIN Master m ON ap.playerID = m.playerID WHERE m.birthCity = 'Toronto' AND ap.award = 'All-Rookie';
SELECT COUNT(*) FROM Master WHERE playerID IN (SELECT playerID FROM AwardsPlayers WHERE award = 'All-Rookie') AND deathYear IS NOT NULL;
SELECT COUNT(DISTINCT T1.playerID) FROM Master AS T1 JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.deathState = 'Massachusetts';
SELECT AwardsPlayers.award FROM AwardsPlayers JOIN Master ON AwardsPlayers.playerID = Master.playerID WHERE Master.deathCity = 'Arlington'
SELECT nameNick FROM Master WHERE playerID IN (SELECT playerID FROM AwardsPlayers WHERE award = 'All-Rookie') AND birthMon = '3';
SELECT COUNT(*) FROM Master WHERE birthMon IN ('7', '8') AND hofID IS NOT NULL;
SELECT T1.birthMon FROM Master AS T1 JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID GROUP BY T1.playerID ORDER BY COUNT(T2.award) DESC LIMIT 1;
SELECT birthYear FROM Master JOIN AwardsPlayers ON Master.playerID = AwardsPlayers.playerID GROUP BY birthYear ORDER BY COUNT(AwardsPlayers.award) DESC LIMIT 1;
SELECT birthCountry, COUNT(award) as AwardCount FROM Master JOIN AwardsPlayers ON Master.playerID = AwardsPlayers.playerID GROUP BY birthCountry ORDER BY AwardCount DESC LIMIT 1;
SELECT birthCountry, COUNT(*) AS count FROM Master WHERE hofID IS NOT NULL GROUP BY birthCountry ORDER BY count DESC LIMIT 1;
SELECT DISTINCT pos FROM Master JOIN AwardsPlayers ON Master.playerID = AwardsPlayers.playerID WHERE Award = 'All-Rookie' AND birthCountry = 'Canada';
SELECT AVG(T3.weight / (T3.height * T3.height)) FROM HOF AS T1 JOIN Master AS T2 ON T1.hofID = T2.hofID JOIN Master AS T3 ON T2.coachID = T3.playerID WHERE T1.category = 'Builder' OR T1.category = 'Player'
SELECT CAST(SUM(CASE WHEN birthCountry = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(hofID) FROM Master WHERE hofID IS NOT NULL;
SELECT (MAX(year) - MIN(year)) AS Years_Played FROM (     SELECT year     FROM Goalies     WHERE playerID = 'healygl01'     UNION ALL     SELECT year     FROM Scoring     WHERE playerID = 'healygl01' ) AS Combined_Years;
SELECT tmID FROM Scoring WHERE playerID = 'roypa01' AND year = 1992;
SELECT SUM(GP) FROM Goalies WHERE playerID = 'rutlewa01' AND year = 1967;
SELECT Min FROM Goalies WHERE playerID = 'valiqst01' AND year = 2007;
SELECT W FROM Goalies WHERE playerID = 'vanbijo01' AND year = 1990;
SELECT COUNT(*) FROM Goalies WHERE playerID = 'vernomi01' AND year = 1998 AND T/OL > 0;
Error: 第 7689 个样本有 2 个SQL。
SELECT COUNT(*) FROM HOF WHERE hofID = 'P194502' AND note = 'posthumous';
SELECT pos FROM Master WHERE firstName = 'Mike' AND lastName = 'Antonovich';
SELECT T1.birthCountry, T1.birthState, T1.birthCity FROM Master AS T1 JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1998 AND T2.notes = 'co-coach' AND T2.tmID IN (     SELECT tmID FROM Coaches WHERE coachID = 'lewisda01' );
SELECT M.firstName, M.lastName FROM Goalies G JOIN Master M ON G.playerID = M.playerID WHERE G.stint = 3 ORDER BY M.weight DESC LIMIT 1;
SELECT M.firstName, M.lastName FROM Master M JOIN Goalies G ON M.playerID = G.playerID WHERE G.ENG = 10 ORDER BY M.height DESC LIMIT 1;
SELECT T1.shootCatch FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2010 AND T2.SHO = (SELECT MAX(SHO) FROM Goalies WHERE year = 2010)
SELECT m.nameGiven, m.firstName, m.lastName, m.birthYear, m.birthMon, m.birthDay FROM Master m JOIN Goalies g ON m.playerID = g.playerID WHERE g.year = 2002 AND g.GA > 150 ORDER BY m.birthYear DESC, m.birthMon DESC, m.birthDay DESC LIMIT 1;
SELECT M.firstName, M.lastName FROM Master M JOIN Goalies G ON M.playerID = G.playerID WHERE G.tmID = 'NJD' ORDER BY (G.SA - G.GA) DESC LIMIT 1;
SELECT T1.name FROM Teams AS T1 JOIN Goalies AS T2 ON T1.tmID = T2.tmID WHERE T1.year = 2010 AND T2.PostENG = (SELECT MAX(PostENG) FROM Goalies WHERE year = 2010);
SELECT Teams.Pts FROM Teams JOIN Goalies ON Teams.tmID = Goalies.tmID AND Teams.year = Goalies.year WHERE Teams.year = 1995 AND Goalies.PostSHO = (     SELECT MAX(PostSHO)     FROM Goalies     WHERE year = 1995 )
SELECT M.nameNick, MAX(CAST(C.w AS REAL) / (C.w + C.l)) as win_rate FROM Coaches C JOIN Master M ON C.coachID = M.coachID WHERE C.year = 2009 GROUP BY C.coachID, M.nameNick ORDER BY win_rate DESC LIMIT 1;
SELECT T3.firstName, T3.lastName FROM (     SELECT T1.tmID, T1.PPG, T1.PPC, T2.coachID     FROM TeamsPost AS T1     JOIN Coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year     WHERE T1.year = 2011) AS T4 JOIN Master AS T3 ON T4.coachID = T3.coachID WHERE (T4.PPG / T4.PPC) = (     SELECT MAX(T1.PPG / T1.PPC)     FROM TeamsPost AS T1     WHERE T1.year = 2011)
SELECT ScoringSC.GP FROM ScoringSC WHERE ScoringSC.playerID = 'broadpu01' AND ScoringSC.year = 1922;
SELECT COUNT(DISTINCT year) FROM ScoringSC WHERE playerID = 'cleghsp01';
SELECT G FROM ScoringSC WHERE playerID = 'dyeba01' AND year = 1921;
SELECT playerID, MAX(A) as max_assists FROM ScoringSC WHERE GP = 1 GROUP BY playerID ORDER BY max_assists DESC LIMIT 1;
SELECT lgID FROM Scoring WHERE playerID = 'adamsja01' AND year = 1920;
SELECT pos FROM ScoringSC WHERE playerID = 'hartgi01';
SELECT T1.W FROM Teams AS T1 JOIN (     SELECT tmID     FROM Goalies     WHERE year = 2011 AND PostGP > 0     GROUP BY tmID     HAVING COUNT(DISTINCT playerID) = 3 ) AS T2 ON T1.tmID = T2.tmID AND T1.year = 2011;
SELECT T2.birthYear FROM Goalies AS T1 JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.PostSA = (SELECT MAX(PostSA) FROM Goalies WHERE year = 2008) AND T1.year = 2008;
SELECT COUNT(*) FROM (   SELECT MAX(T2.year - T1.lastNHL) AS years   FROM Master AS T1   JOIN Coaches AS T2 ON T1.coachID = T2.coachID   WHERE T1.lastName = 'Waddell' AND T1.firstName = 'Don' ) AS result WHERE result.years > 0;
SELECT M.shootCatch FROM Master AS M JOIN Goalies AS G ON M.playerID = G.playerID WHERE G.year = 1996 AND G.SHO = (SELECT MAX(SHO) FROM Goalies WHERE year = 1996);
SELECT M.birthYear, M.birthMon, M.birthDay FROM Master AS M, Goalies AS G WHERE M.playerID = G.playerID AND G.year = '1965' AND G.GA = (SELECT MAX(GA) FROM Goalies WHERE year = '1965')
SELECT M.firstName, M.lastName FROM Master AS M JOIN Scoring AS S ON M.playerID = S.playerID WHERE S.year = '1981' ORDER BY S.+/- DESC LIMIT 1;
SELECT M.weight FROM Master AS M JOIN (     SELECT playerID, MAX(PPG) AS max_ppg     FROM Scoring     WHERE year > 2000     GROUP BY playerID     ORDER BY max_ppg DESC     LIMIT 1 ) AS T ON M.playerID = T.playerID;
SELECT M.shootCatch FROM Master M JOIN Scoring S ON M.playerID = S.playerID WHERE S.year = 1989 AND S.SHG = 7;
SELECT Master.firstName, Master.lastName FROM Scoring JOIN Master ON Scoring.playerID = Master.playerID WHERE Scoring.year = 1986 ORDER BY Scoring.GWG DESC LIMIT 1;
SELECT SUM(SOG) FROM Scoring WHERE playerID = (SELECT playerID FROM Master WHERE firstName = 'Cam' AND lastName = 'Neely') AND year = 1990;
SELECT C.firstName, C.lastName FROM (     SELECT T.year, T.tmID, MAX(T.BenchMinor) as maxBenchMinor     FROM Teams T     WHERE T.year = 2003     GROUP BY T.year, T.tmID ) AS Tmp JOIN Coaches Co ON Tmp.tmID = Co.tmID AND Tmp.year = Co.year JOIN Master M ON M.coachID = Co.coachID WHERE Tmp.maxBenchMinor = Tmp.BenchMinor
SELECT playerID, MAX(GA) FROM Goalies WHERE year = 1978 AND playerID IN (SELECT playerID FROM Master WHERE weight > 190);
SELECT     ((SELECT CAST(SUM(CASE WHEN C.year = 2006 THEN C.w ELSE 0 END) AS REAL) / NULLIF(SUM(C.w + C.l), 0) -             CAST(SUM(CASE WHEN C.year = 2005 THEN C.w ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN C.year = 2005 THEN C.w + C.l ELSE 0 END), 0)) * 100) AS WinningRateImprovement FROM     Coaches C JOIN     Teams T ON C.tmID = T.tmID AND C.year = T.year WHERE     C.coachID = 'VigneaultAlai01' AND     T.name = 'Vancouver Canucks';
SELECT T1.legendsID FROM Goalies AS T1 JOIN (     SELECT tmID, MAX((1 - (PostGA / PostSA)) * 100) as max_defensive_success_rate     FROM Goalies     WHERE year = 2011 AND PostSA > 0 ) AS T2 ON T1.tmID = T2.tmID AND (1 - (T1.PostGA / T1.PostSA)) * 100 = T2.max_defensive_success_rate WHERE T1.year = 2011;
SELECT COUNT(DISTINCT Master.playerID) FROM Master WHERE EXISTS (   SELECT 1   FROM Coaches   WHERE Master.coachID = Coaches.coachID );
SELECT Teams.name, Teams.BenchMinor FROM Teams WHERE Teams.T = (     SELECT MAX(T) FROM Teams ) ORDER BY Teams.BenchMinor DESC LIMIT 1;
SELECT award FROM AwardsCoaches WHERE coachID = (     SELECT coachID     FROM Coaches     WHERE w = (         SELECT MAX(w)         FROM Coaches     ) ) AND lgID = 'NHL' GROUP BY award ORDER BY COUNT(*) DESC LIMIT 1;
SELECT PPG / PPC * 100 AS PowerPlayPercentage FROM Teams WHERE L = (SELECT MAX(L) FROM Teams)
SELECT AVG(count_hofID) AS Average_HOF_Inductees FROM ( SELECT COUNT(hofID) as count_hofID FROM HOF WHERE year BETWEEN 1950 AND 1980 GROUP BY year ) as yearly_hof_counts
Error: 第 7727 个样本有 2 个SQL。
SELECT T1.tmID, T1.W FROM Teams AS T1 JOIN Goalies AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.SHO = (SELECT MAX(SHO) FROM Goalies) LIMIT 1;
SELECT tmID FROM TeamSplits WHERE year = 2005 ORDER BY rW DESC LIMIT 1;
SELECT pos FROM Master ORDER BY birthYear, birthMon, birthDay LIMIT 8,1;
SELECT SUM(GA) FROM Goalies WHERE year = 1924 AND lgID = 'WCHL' GROUP BY playerID ORDER BY SUM(GA) DESC LIMIT 1;
SELECT tmID, MAX(OctL) as MaxOctL FROM TeamSplits WHERE year = 2006;
SELECT COUNT(*) FROM Master WHERE shootCatch IS NULL AND firstNHL = 2011;
Error: 第 7734 个样本有 2 个SQL。
SELECT T3.tmID, AVG(T1.height) AS avg_height FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID JOIN Teams AS T3 ON T3.tmID = T2.tmID AND T3.year = (     SELECT MAX(year) FROM Teams ) WHERE T1.pos = 'G' AND T1.birthYear BETWEEN 1970 AND 1979 AND T1.shootCatch = 'L' GROUP BY T3.tmID ORDER BY avg_height DESC LIMIT 1;
SELECT M.nameGiven, M.lastName, SUM(S.A) as TotalAssists FROM Master M JOIN Scoring S ON M.playerID = S.playerID WHERE S.lgID = 'NHL' GROUP BY S.playerID ORDER BY TotalAssists DESC LIMIT 1;
SELECT TeamsPost.tmID, TeamsPost.PPK, TeamsPost.PPC, TeamsPost.PPG,        (TeamsPost.PPG / TeamsPost.PPC) * 100 AS PP_percentage,        SeriesPost.tmIDLoser, SeriesPost.W, SeriesPost.L FROM TeamsPost JOIN SeriesPost ON TeamsPost.tmID = SeriesPost.tmIDWinner WHERE TeamsPost.PKC = (SELECT MIN(PKC) FROM TeamsPost)
SELECT C.coachID FROM Coaches C JOIN (     SELECT coachID     FROM Coaches     GROUP BY coachID     ORDER BY SUM(w) DESC     LIMIT 1 ) MaxWinsCoach ON C.coachID = MaxWinsCoach.coachID JOIN AwardsCoaches AC ON C.coachID = AC.coachID
SELECT tmIDLoser AS team_name FROM SeriesPost WHERE year = 1912 AND note = 'EX'
SELECT (T2.year - T2.firstNHL) AS duration, T1.nameGiven || ' ' || T1.lastName AS fullName FROM Master AS T1 JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID = 'NHL' AND T2.+/- = (SELECT MIN(+/-) FROM Scoring WHERE lgID = 'NHL') LIMIT 1;
SELECT T1.nameGiven FROM Master AS T1 JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year BETWEEN 2003 AND 2005 AND T2.PIM BETWEEN 200 AND 250 GROUP BY T1.playerID ORDER BY SUM(T2.GP) DESC LIMIT 1;
SELECT T1.birthYear - T2.lastNHL AS age_at_retirement FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.GA = (SELECT MIN(GA) FROM Goalies) AND T2.year = (SELECT MAX(year) FROM Goalies WHERE playerID = T2.playerID);
SELECT ap.note AS Award, m.nameGiven || ' ' || m.lastName AS FullName FROM AwardsPlayers ap JOIN Master m ON ap.playerID = m.playerID WHERE ap.pos = (     SELECT pos FROM (         SELECT pos, COUNT(*) AS cnt         FROM AwardsPlayers         GROUP BY pos         ORDER BY cnt DESC         LIMIT 1     ) ) AND ap.year = (     SELECT MAX(year) FROM AwardsPlayers     WHERE pos = (         SELECT pos FROM (             SELECT pos, COUNT(*) AS cnt             FROM AwardsPlayers             GROUP BY pos             ORDER BY cnt DESC             LIMIT 1         )     ) ) LIMIT 1;
SELECT SUM(T2.g) FROM (     SELECT MIN(year) AS min_year, coachID     FROM AwardsCoaches     WHERE award = 'Second Team All-Star' ) AS T1 JOIN Coaches AS T2 ON T1.coachID = T2.coachID AND T2.year <= T1.min_year WHERE T2.lgID IS NOT NULL;
SELECT COUNT(T2.oppID), T2.tmID AS TeamWithMostWins, T2.oppID AS OpposingTeams FROM Teams T1 JOIN (   SELECT tmID, MAX(W) AS MaxWins   FROM Teams   WHERE year = 1915   GROUP BY tmID ) T2 ON T1.tmID = T2.tmID AND T1.year = 1915 JOIN TeamVsTeam T3 ON T2.tmID = T3.tmID AND T1.year = T3.year WHERE T1.W = T2.MaxWins GROUP BY T2.tmID, T2.oppID ORDER BY COUNT(T2.oppID) DESC LIMIT 1;
SELECT T1.playerID FROM Scoring AS T1 JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.SHG BETWEEN 1 AND 5 ORDER BY T1.GWG DESC LIMIT 1;
SELECT coachID, SUM(L) as total_losses FROM Coaches WHERE year = 1997 AND tmID = 'TBL' AND notes = 'interim';
SELECT T1.rank, T1.year, T1.name FROM Teams AS T1 JOIN Scoring AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.SHA >= 7 GROUP BY T1.tmID, T1.year ORDER BY SUM(T2.A) DESC LIMIT 1;
SELECT Coaches.coachID, Coaches.name FROM Coaches JOIN Teams ON Coaches.tmID = Teams.tmID AND Coaches.year = Teams.year WHERE Teams.year = 1969 AND Teams.rank = 4;
SELECT name FROM TeamsHalf WHERE year BETWEEN 1917 AND 1920 AND half = 1 AND rank = 1;
SELECT CONCAT(M.nameGiven, ' ', M.lastName) AS FullName, S.year, T.name AS TeamName FROM Master M JOIN Scoring S ON M.playerID = S.playerID JOIN Teams T ON S.tmID = T.tmID AND S.year = T.year WHERE M.birthCountry = 'Canada' AND TIMESTAMPDIFF(YEAR, M.birthYear, S.year) BETWEEN 18 AND 24 AND S.G <= 5 GROUP BY M.playerID, S.year;
SELECT SUM(Teams.PIM) FROM Teams WHERE Teams.name = 'St. Louis Blues';
SELECT PPC FROM Teams WHERE name = 'New York Rangers' AND year = 2009;
SELECT MAX(Pts) FROM Teams;
SELECT COUNT(*) FROM Teams WHERE year = 2006 AND W > L AND Pts > 100;
SELECT name FROM Teams WHERE year = 2006 ORDER BY BenchMinor DESC LIMIT 1;
SELECT name FROM Teams WHERE year = 2006 ORDER BY PIM DESC LIMIT 3;
SELECT tmID FROM Teams WHERE year = 1995 AND PKC = (SELECT MAX(PKC) FROM Teams WHERE year = 1995) AND tmID IN ('FLA', 'EDM', 'LAK');
SELECT T1.name FROM Teams AS T1 JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID WHERE T2.year = 1917 AND T2.W > T2.L;
SELECT tmID FROM TeamsSC WHERE year = 1922;
SELECT COUNT(tmID) FROM Teams WHERE year = 1922 AND tmID IN (SELECT tmID FROM TeamsSC WHERE year = 1922) AND Pts > 20;
SELECT PIM FROM TeamsSC WHERE year = 1923 AND rank = 2;
SELECT name FROM TeamsSC WHERE W = (SELECT MAX(W) FROM TeamsSC)
SELECT W FROM TeamVsTeam WHERE year = 1985 AND tmID = 'PHI' AND oppID = 'BOS';
SELECT name FROM Teams WHERE year = 1909 AND T > 0;
SELECT DISTINCT Master.firstName FROM Coaches JOIN Master ON Coaches.coachID = Master.coachID JOIN Teams ON Coaches.tmID = Teams.tmID AND Coaches.year = Teams.year WHERE Teams.name = 'Montreal Canadiens';
SELECT COUNT(*) FROM Coaches c JOIN Teams t ON c.tmID = t.tmID AND c.year = t.year JOIN HOF h ON c.coachID = h.hofID WHERE t.name = 'Montreal Canadiens' AND h.category = 'Builder';
SELECT MAX(Master.height) FROM Master JOIN Coaches ON Master.coachID = Coaches.coachID JOIN Teams ON Coaches.tmID = Teams.tmID AND Coaches.year = Teams.year WHERE Teams.name = 'Montreal Canadiens';
SELECT DISTINCT c.firstName FROM Coaches c JOIN Master m ON c.coachID = m.coachID JOIN TeamsSC t ON c.tmID = t.tmID AND c.year = t.year WHERE c.year = 1922;
SELECT COUNT(*) FROM Coaches JOIN Master ON Coaches.coachID = Master.coachID WHERE Master.birthMon = 3 AND Coaches.tmID = 'PHI';
SELECT COUNT(*) FROM Coaches JOIN Master ON Coaches.coachID = Master.coachID JOIN Teams ON Coaches.tmID = Teams.tmID AND Coaches.year = Teams.year WHERE Master.birthCountry = 'USA' AND Teams.name = 'Philadelphia Flyers';
SELECT COUNT(*) FROM Coaches c JOIN Teams t ON c.tmID = t.tmID AND c.year = t.year WHERE t.name = 'Buffalo Sabres' AND c.coachID IN (SELECT coachID FROM Master WHERE deathYear IS NOT NULL);
SELECT DISTINCT m.nameNick FROM Master m JOIN Coaches c ON m.coachID = c.coachID WHERE m.birthCountry = 'USA' AND c.tmID = 'BUF' AND c.lgID = 'NHL';
SELECT COUNT(*) FROM Coaches c JOIN Master m ON c.coachID = m.coachID WHERE c.year = 1922 AND m.birthCountry = 'USA' AND c.tmID IN (     SELECT tmID     FROM TeamsSC     WHERE year = 1922 );
SELECT tmID FROM TeamVsTeam WHERE year = 2000 AND oppID = (SELECT tmID FROM Teams WHERE name = 'Buffalo Sabres' AND year = 2000) GROUP BY tmID ORDER BY SUM(G) DESC LIMIT 1;
SELECT DISTINCT name FROM Teams WHERE tmID IN (SELECT oppID FROM TeamVsTeam WHERE tmID = (SELECT tmID FROM Teams WHERE name = 'Buffalo Sabres'))
SELECT Teams.PIM FROM Teams WHERE Teams.year = 1918 AND Teams.name = 'Montreal Canadiens';
SELECT TeamsSC.W FROM TeamsSC WHERE TeamsSC.PIM = 24 AND TeamsSC.tmID = 'MTL'
SELECT year FROM TeamsSC WHERE tmID = 'MTL' AND PIM = 49;
SELECT T2.firstName FROM Coaches AS T1 JOIN Master AS T2 ON T1.coachID = T2.coachID WHERE T1.tmID = 'MTR' ORDER BY T1.year LIMIT 1;
SELECT AVG(T1.W / T1.G) AS avg_winning_rate FROM Teams AS T1 WHERE T1.year = 2000 AND T1.name = 'Buffalo Sabres'
SELECT AVG(TeamsSC.PIM) FROM TeamsSC WHERE TeamsSC.tmID = (SELECT Master.tmID FROM Master WHERE Master.name = 'Montreal Canadiens');
SELECT AVG(T1.W / (T1.W + T1.L)) AS avg_winning_rate FROM TeamsSC AS T1 JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.name = 'Montreal Canadiens';
SELECT CAST(SUM(CASE WHEN M.birthCountry = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(C.coachID) AS Percentage FROM Coaches C JOIN Master M ON C.coachID = M.coachID WHERE C.tmID = 'MTL';
SELECT name FROM HOF WHERE category NOT IN ('player', 'builder') ORDER BY year DESC LIMIT 1;
SELECT hofID FROM HOF WHERE category = 'referees' AND year BETWEEN 1970 AND 1979;
SELECT COUNT(*) FROM HOF WHERE year = 1958 AND category = 'Player';
SELECT COUNT(*) FROM Master WHERE playerID IS NOT NULL AND coachID IS NOT NULL;
SELECT COUNT(*) FROM Master WHERE lastName = 'Green' AND playerID IS NOT NULL AND coachID IS NULL;
SELECT Teams.BenchMinor FROM Teams JOIN Coaches ON Teams.tmID = Coaches.tmID AND Teams.year = Coaches.year WHERE Coaches.coachID = 'bowmansc01' AND Coaches.year = 1982;
SELECT M.firstName, M.lastName FROM Master M JOIN Goalies G ON M.playerID = G.playerID WHERE G.ENG = 10 ORDER BY M.height DESC LIMIT 1;
SELECT M.nameGiven, M.firstName, M.lastName, M.shootCatch FROM Master M JOIN Goalies G ON M.playerID = G.playerID WHERE G.year = 1973 AND G.tmID = 'QUN' AND G.GP = 32;
SELECT COUNT(DISTINCT tmID) FROM Goalies WHERE playerID IN (SELECT playerID FROM Master WHERE lastName = 'Young');
SELECT Master.firstName, Master.lastName FROM Master JOIN Goalies ON Master.playerID = Goalies.playerID WHERE Goalies.year = 1972 AND Goalies.tmID = 'BOS' AND Master.coachID IS NOT NULL AND Master.hofID IS NULL;
SELECT COUNT(GP) FROM Goalies WHERE legendsID = 'P196402';
SELECT M.firstName, M.lastName FROM Master M JOIN Goalies G ON M.playerID = G.playerID JOIN Teams T ON G.tmID = T.tmID AND G.year = T.year WHERE T.name = 'Quebec Bulldogs' AND M.pos = 'G' GROUP BY M.playerID ORDER BY SUM(G.Min) DESC LIMIT 1;
SELECT COUNT(*) FROM Goalies WHERE tmID = (SELECT tmID FROM Teams WHERE name = 'Calgary Flames');
SELECT playerID FROM Goalies WHERE tmID = 'MNS' ORDER BY GA DESC LIMIT 1;
SELECT COUNT(*) FROM Goalies AS G JOIN Master AS M ON G.playerID = M.playerID JOIN HOF AS H ON M.hofID = H.hofID WHERE G.tmID = 'HAI' AND H.category = 'Player';
SELECT T1.shootCatch FROM Master AS T1 JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2010 AND T2.SHO = (SELECT MAX(SHO) FROM Goalies WHERE year = 2010);
SELECT (SUM(CASE WHEN year = 2005 THEN GP ELSE 0 END) - SUM(CASE WHEN year = 2006 THEN GP ELSE 0 END)) / SUM(CASE WHEN year = 2005 THEN GP ELSE 0 END) * 100 AS DecreaseRate FROM Goalies WHERE playerID = 'aebischd01' GROUP BY playerID;
SELECT playerID, coachID FROM Master WHERE playerID IS NOT NULL AND coachID IS NOT NULL;
Error: 第 7803 个样本有 2 个SQL。
SELECT playerID FROM Master ORDER BY weight DESC LIMIT 5;
SELECT firstName, lastName FROM Master WHERE birthCountry = 'Finland';
SELECT playerID FROM Master WHERE deathYear IS NOT NULL;
SELECT DISTINCT Master.firstName FROM Coaches JOIN Master ON Coaches.coachID = Master.coachID WHERE Coaches.year > 2000;
SELECT T1.height, T1.weight FROM Master AS T1 JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1930;
SELECT SUM(T1.G) AS TotalGoals, YEAR(CURDATE()) - T2.birthYear AS Age FROM Scoring AS T1 JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = 'aaltoan01'
SELECT DISTINCT AC.coachID FROM AwardsCoaches AS AC LEFT JOIN Master AS M ON AC.coachID = M.coachID WHERE M.playerID IS NULL;
SELECT playerID FROM Master WHERE pos = 'L' AND weight > 200;
Error: 第 7812 个样本有 2 个SQL。
SELECT Teams.Pts, Coaches.coachID, Coaches.firstName, Coaches.lastName FROM Teams JOIN Coaches ON Teams.tmID = Coaches.tmID AND Teams.year = Coaches.year JOIN Master ON Coaches.coachID = Master.coachID WHERE Teams.tmID = 'ANA'
SELECT G FROM Teams WHERE year = 1976 AND tmID = 'BIR' AND divID = 'EW';
SELECT L FROM Teams WHERE year = 2010 AND tmID = 'BOS' UNION SELECT SUM(A) FROM Scoring WHERE year = 2010 AND tmID = 'BOS';
SELECT SUM(weight) FROM Master JOIN Scoring ON Master.playerID = Scoring.playerID WHERE Scoring.tmID = 'ANA' AND Scoring.year = 1997;
Error: 第 7817 个样本有 3 个SQL。
SELECT T1.tmID, T3.birthCountry FROM (     SELECT tmID, CAST(SUM(w) AS REAL) / (SUM(w) + SUM(l)) AS win_rate     FROM Teams     WHERE year = 2000     GROUP BY tmID     ORDER BY win_rate DESC     LIMIT 1 ) AS T1 JOIN Scoring AS T2 ON T1.tmID = T2.tmID AND T2.year = 2000 JOIN Master AS T3 ON T2.playerID = T3.playerID;
SELECT (T1.W / T1.G) AS WinRatio, T3.playerID, MAX(T3.G) AS MaxGoals FROM Teams AS T1 JOIN Goalies AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year JOIN Scoring AS T3 ON T1.tmID = T3.tmID AND T1.year = T3.year WHERE T1.year = 1998 AND T1.tmID = 'CAR' GROUP BY T3.playerID ORDER BY T3.G DESC LIMIT 1;
SELECT Name FROM Country ORDER BY LifeExpectancy LIMIT 1;
SELECT Country.Name FROM Country JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE CountryLanguage.Language = 'English' AND CountryLanguage.IsOfficial = 'T' LIMIT 5;
SELECT AVG(Population) FROM City WHERE District = 'Karnataka';
SELECT Language FROM CountryLanguage WHERE CountryCode = 'USA';
SELECT COUNT(*) FROM CountryLanguage WHERE Language = 'Portuguese';
SELECT COUNT(*) FROM City WHERE District = 'England';
SELECT COUNT(City.Name) FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM Country);
SELECT T1.Name, T1.Population FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'San Marino';
SELECT Language FROM CountryLanguage WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Turkmenistan');
SELECT C.Name, CT.CityName, CL.Language FROM Country AS C JOIN City AS CT ON C.Capital = CT.ID JOIN CountryLanguage AS CL ON C.Code = CL.CountryCode WHERE CL.IsOfficial = 'T' AND C.Code = (     SELECT Code FROM Country     ORDER BY LifeExpectancy DESC     LIMIT 1 )
SELECT Country.Name, CountryLanguage.Language FROM Country JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE Country.Continent = 'Antarctica' AND CountryLanguage.IsOfficial = 'T';
SELECT Country.Name FROM Country JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE CountryLanguage.Language = 'English' AND CountryLanguage.IsOfficial = 'T' LIMIT 5;
SELECT Language FROM CountryLanguage WHERE Percentage > 80 AND CountryCode IN (     SELECT Code     FROM Country     WHERE Region = 'Baltic Countries' );
SELECT Language FROM CountryLanguage WHERE Percentage > 80 AND CountryCode IN (     SELECT Code     FROM Country     WHERE Region = 'Baltic Countries' );
SELECT C.Name AS City_Name, CT.Name AS Country_Name, CT.LifeExpectancy FROM City C JOIN Country CT ON C.CountryCode = CT.Code WHERE C.Population = (SELECT MAX(Population) FROM City);
SELECT C.Name AS Capital_City, CL.Language, CL.IsOfficial FROM Country AS CT INNER JOIN City AS C ON CT.Capital = C.ID LEFT JOIN CountryLanguage AS CL ON CT.Code = CL.CountryCode WHERE CT.LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM Country)
SELECT C.Name AS Country,        C.Population,        CT.Name AS CapitalCity,        CL.Language AS OfficialLanguage FROM Country C JOIN City CT ON C.Capital = CT.ID JOIN CountryLanguage CL ON C.Code = CL.CountryCode WHERE C.SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country) AND CL.IsOfficial = 'T';
SELECT     (COUNT(CASE WHEN Language = 'English' THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM     CountryLanguage JOIN     Country ON CountryLanguage.CountryCode = Country.Code WHERE     Continent = 'North America' GROUP BY     Continent;
SELECT District FROM City WHERE Population = (SELECT MIN(Population) FROM City);
SELECT Continent FROM Country WHERE SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country);
SELECT T2.HeadOfState FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Population = (SELECT MAX(Population) FROM City)
SELECT C.Name FROM Country AS C JOIN CountryLanguage AS CL ON C.Code = CL.CountryCode WHERE CL.Language = 'English' AND CL.IsOfficial = 'T' ORDER BY C.Capital DESC LIMIT 1;
SELECT City.Name FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.LifeExpectancy = 66.4;
SELECT T2.HeadOfState FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' ORDER BY T1.Percentage ASC LIMIT 1;
SELECT T2.SurfaceArea FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Sutton Coldfield'
SELECT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE c.Population < 8000;
SELECT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE c.Name = 'Belgium' AND cl.IsOfficial = 'T';
SELECT City.Name, City.District FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.LocalName = 'Hajastan';
SELECT COUNT(*) FROM CountryLanguage WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Cyprus');
SELECT Language FROM CountryLanguage WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Belize');
SELECT City.District FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.HeadOfState = 'Adolf Ogi';
SELECT T2.HeadOfState FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Santa Catarina'
SELECT (COUNT(CASE WHEN CL.Language = 'English' THEN C.Code ELSE NULL END) * 1.0 / COUNT(C.Code)) * 100 AS Percentage FROM Country AS C JOIN CountryLanguage AS CL ON C.Code = CL.CountryCode WHERE C.GNP > 1500;
SELECT     (SELECT COUNT(*) FROM Country AS C JOIN CountryLanguage AS CL ON C.Code = CL.CountryCode WHERE CL.Language = 'English' AND C.GovernmentForm = 'Republic') -     (SELECT COUNT(*) FROM Country AS C JOIN CountryLanguage AS CL ON C.Code = CL.CountryCode WHERE CL.Language = 'English' AND C.GovernmentForm = 'Constitutional Monarchy') AS Difference;
SELECT Name FROM Country WHERE IndepYear = 1994;
SELECT Name FROM Country WHERE Continent = 'Asia';
SELECT Name FROM Country WHERE Continent = 'Asia' ORDER BY GNP DESC LIMIT 1;
SELECT COUNT(*) FROM City WHERE CountryCode = 'PHL';
SELECT T1.LocalName FROM Country AS T1 WHERE T1.Name = 'Ukraine'
SELECT COUNT(*) FROM Country WHERE GovernmentForm = 'Socialistic Republic';
SELECT Language FROM CountryLanguage WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'China') AND IsOfficial = 'T';
SELECT T2.Percentage FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'China' AND T2.Language = 'Chinese';
SELECT T2.GovernmentForm FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Manila';
SELECT T1.Name FROM City AS T1 JOIN Country AS T2 ON T1.ID = T2.Capital WHERE T2.Name = 'Philippines'
SELECT DISTINCT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Europe';
SELECT T2.HeadOfState FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Pyongyang'
SELECT COUNT(*) FROM CountryLanguage WHERE CountryCode IN (SELECT Code FROM Country WHERE Name = 'Italy') AND IsOfficial = 'F';
SELECT City.Name FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.Name = 'Russia' ORDER BY City.Population LIMIT 1;
SELECT City.Name FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.LifeExpectancy = (     SELECT MAX(LifeExpectancy)     FROM Country )
SELECT CL.Language, CL.IsOfficial FROM CountryLanguage AS CL JOIN Country AS C ON CL.CountryCode = C.Code WHERE C.IndepYear = 1830;
SELECT C.Name FROM City C JOIN Country CO ON C.ID = CO.Capital WHERE CO.Population = (SELECT MAX(Population) FROM Country);
SELECT Country.Name FROM Country JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE Country.Continent = 'Asia' AND CountryLanguage.Language = 'English' AND CountryLanguage.IsOfficial = 'F';
SELECT AVG(Country.GNP) FROM Country JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE CountryLanguage.Language = 'Arabic';
SELECT (SUM(CASE WHEN T2.Language = 'Chinese' THEN T1.SurfaceArea ELSE 0 END) * 100) / SUM(T1.SurfaceArea) AS ChinesePercentage FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode;
SELECT Name FROM Country ORDER BY SurfaceArea LIMIT 1;
SELECT Name FROM Country WHERE Population = (SELECT MAX(Population) FROM Country);
SELECT CL.Language FROM CountryLanguage CL JOIN Country C ON CL.CountryCode = C.Code WHERE C.Population = (SELECT MIN(Population) FROM Country)
SELECT cl.CountryCode, c.Name FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE cl.Language = 'English' AND cl.IsOfficial = 'T';
SELECT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE cl.IsOfficial = 'T' AND c.IndepYear > 1990;
SELECT Percentage FROM CountryLanguage WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Australia') AND Language = 'English';
SELECT Language FROM CountryLanguage WHERE CountryCode = (SELECT Code FROM Country WHERE Name = 'Malaysia');
SELECT C.Name FROM Country AS C JOIN City AS Cy ON C.Code = Cy.CountryCode WHERE Cy.Population = (SELECT MAX(City.Population) FROM City)
SELECT T2.LifeExpectancy FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Population = (SELECT MAX(Population) FROM City);
SELECT T2.GNP FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Population = (SELECT MIN(Population) FROM City);
SELECT CL.CountryCode, COUNT(DISTINCT CL.Language) AS LanguagesCount FROM City C JOIN Country CO ON C.CountryCode = CO.Code JOIN CountryLanguage CL ON CO.Code = CL.CountryCode WHERE C.Name IN (     SELECT Name     FROM City     ORDER BY Population DESC     LIMIT 5 ) GROUP BY CL.CountryCode ORDER BY LanguagesCount DESC LIMIT 1;
SELECT C.Name AS Country_Name, MIN(C.SurfaceArea) AS Smallest_Surface_Area, MAX(Cty.Population) AS Most_Crowded_City_Population FROM Country AS C JOIN City AS Cty ON C.Code = Cty.CountryCode GROUP BY C.Name ORDER BY Smallest_Surface_Area ASC, Most_Crowded_City_Population DESC LIMIT 1;
SELECT City.Name FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.Name = 'China';
SELECT City.Name FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.LocalName = "'Uman";
SELECT AVG(LifeExpectancy) FROM Country WHERE Code IN (     SELECT CountryCode     FROM CountryLanguage     WHERE Language = 'Arabic' );
SELECT (c.GNP - c.GNPOld) / c.GNPOld AS GNP_growth_rate FROM City AS cy JOIN Country AS c ON cy.CountryCode = c.Code WHERE cy.Name = 'Shanghai';
SELECT District FROM City WHERE Name = 'Zaanstad';
SELECT Name FROM City WHERE Population = (SELECT MAX(Population) FROM City);
SELECT District FROM City WHERE Population = 201843;
SELECT Name FROM Country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM Country);
SELECT COUNT(*) FROM Country WHERE LifeExpectancy = 75.1;
SELECT IndepYear FROM Country WHERE Name = 'Brunei';
SELECT COUNT(*) FROM Country WHERE GNP = 0;
SELECT AVG(SurfaceArea) FROM Country;
SELECT COUNT(DISTINCT cl.Language) FROM CountryLanguage cl JOIN City c ON cl.CountryCode = c.CountryCode WHERE c.District = 'Tocantins';
SELECT C.District FROM City C JOIN Country CT ON C.CountryCode = CT.Code WHERE CT.SurfaceArea = (SELECT MAX(SurfaceArea) FROM Country);
SELECT COUNT(T1.Name) FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = 'Kostis Stefanopoulos';
SELECT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE c.Name = 'Greece' AND cl.IsOfficial = 'T';
SELECT T2.Population FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Queimados'
SELECT cl.Language FROM CountryLanguage cl JOIN City c ON cl.CountryCode = c.CountryCode WHERE cl.IsOfficial = 'T' AND c.Population = (SELECT MIN(Population) FROM City);
SELECT T2.SurfaceArea, T2.GNP FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Namibe';
SELECT T1.Name FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T';
SELECT T1.District FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.SurfaceArea = (SELECT MIN(SurfaceArea) FROM Country);
SELECT C.Name FROM Country AS C JOIN CountryLanguage AS CL ON C.Code = CL.CountryCode WHERE C.GNP < 1000 AND CL.Language = 'Dutch';
SELECT T2.GNP FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Entre Rios'
SELECT T2.LocalName FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'The Valley'
SELECT City.Name FROM City JOIN Country ON City.CountryCode = Country.Code WHERE Country.SurfaceArea > 7000000;
SELECT T1.LifeExpectancy FROM Country AS T1 JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Japanese';
SELECT COUNT(T1.Name) FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.SurfaceArea = 652090;
SELECT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE c.IndepYear BETWEEN 1980 AND 1995;
SELECT T2.LifeExpectancy FROM City AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Calama'
SELECT cl.Language FROM CountryLanguage cl JOIN Country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Pierre Buyoya';
SELECT     (SUM(CASE WHEN C.District = 'England' THEN 1 ELSE 0 END) * 100 / COUNT(C.Name)) AS percentage FROM     City AS C JOIN     Country AS CO ON C.CountryCode = CO.Code WHERE     CO.GovernmentForm = 'Constitutional Monarchy';
SELECT C.Name FROM Country C JOIN City CT ON C.Code = CT.CountryCode WHERE CT.Population BETWEEN 140000 AND 150000 AND C.LifeExpectancy > (SELECT AVG(LifeExpectancy) * 0.8 FROM Country) GROUP BY C.Name;
SELECT (COUNT(CASE WHEN T2.GovernmentForm = 'Republic' THEN 1 END) * 100 / COUNT(T2.Code)) AS percentage FROM CountryLanguage AS T1 JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Italian';
Error: 第 7919 个样本有 2 个SQL。
SELECT (COUNT(c.podcast_id) FILTER (WHERE c.category_count > 4)) * 100.0 / COUNT(c.podcast_id) AS percentage FROM (   SELECT podcast_id, COUNT(category) as category_count   FROM categories   GROUP BY podcast_id ) c
SELECT itunes_id, itunes_url FROM podcasts WHERE title = 'Brown Suga Diaries';
SELECT podcasts.itunes_url FROM podcasts WHERE podcasts.title LIKE '%Dream%';
SELECT c.category FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id WHERE p.title = 'I Heart My Life Show'
SELECT p.title, p.itunes_url FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'society-culture';
SELECT COUNT(*) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id JOIN categories ON podcasts.podcast_id = categories.podcast_id WHERE podcasts.title LIKE '%spoiler%' AND categories.category = 'art' AND reviews.rating = 5;
SELECT DISTINCT r.author_id FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE p.title = 'Pop Rocket' AND r.created_at LIKE '2016%' AND r.rating < 5;
SELECT p.title, c.category FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id GROUP BY p.podcast_id, c.category HAVING AVG(r.rating) > 3.0;
SELECT p.title, r.content FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'fiction' AND r.rating = 5;
SELECT p.title, r.content, r.rating FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.title = 'Love it!';
SELECT r.author_id, r.rating, r.created_at FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE p.title = 'In The Thick';
SELECT r.created_at, p.title, r.rating FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE r.created_at = (SELECT MAX(created_at) FROM reviews);
SELECT p.title, r.rating, r.content FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.author_id = '76A4C24B6038145';
SELECT p.title AS podcast_title, r.title AS review_title, r.content FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE r.rating = 1;
SELECT p.title, r.rating FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE r.created_at LIKE '2019-05%';
SELECT AVG(rating) FROM (   SELECT podcast_id, rating   FROM reviews   WHERE podcast_id = (     SELECT podcast_id     FROM reviews     GROUP BY podcast_id     ORDER BY COUNT(podcast_id) DESC     LIMIT 1   ) )
SELECT c.category FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id WHERE p.title = 'SciFi Tech Talk';
SELECT p.title, p.itunes_url FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.title = 'Long time listener, calling it quits';
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'true crime';
SELECT content FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'StormCast: The Official Warhammer Age of Sigmar Podcast';
SELECT reviews.title, reviews.content FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'More Stupider: A 90-Day Fiance Podcast' AND reviews.rating = 1;
SELECT COUNT(*) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'LifeAfter/The Message' AND reviews.rating < 3;
SELECT c.category, AVG(r.rating) as average_rating FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id JOIN reviews r ON p.podcast_id = r.podcast_id WHERE p.title = 'More Stupider: A 90-Day Fiance Podcast' GROUP BY c.category;
SELECT     CASE         WHEN COUNT(CASE WHEN T1.category = 'arts-books' THEN T1.podcast_id END) > COUNT(CASE WHEN T1.category = 'arts-design' THEN T1.podcast_id END) THEN 'arts-books'         ELSE 'arts-design'     END AS category_with_more_podcasts,     ABS(         COUNT(CASE WHEN T1.category = 'arts-books' THEN T1.podcast_id END) -         COUNT(CASE WHEN T1.category = 'arts-design' THEN T1.podcast_id END)     ) AS numerical_difference FROM     categories AS T1 GROUP BY     T1.category
Error: 第 7944 个样本有 2 个SQL。
SELECT COUNT(*) FROM reviews WHERE rating = 3 AND created_at BETWEEN '2015-01-01T00:00:00-07:00' AND '2015-03-31T23:59:59-07:00';
SELECT (COUNT(CASE WHEN category = 'fiction-science-fiction' THEN podcast_id END) * 100.0 / COUNT(podcast_id)) AS percentage FROM categories;
SELECT AVG(reviews.rating) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE reviews.created_at BETWEEN '2019-01-01T00:00:00' AND '2019-12-31T23:59:59';
SELECT     SUM(CASE WHEN run_at LIKE '2021%' THEN reviews_added ELSE 0 END) / SUM(reviews_added) * 100 AS '2021_percentage',     SUM(CASE WHEN run_at LIKE '2022%' THEN reviews_added ELSE 0 END) / SUM(reviews_added) * 100 AS '2022_percentage' FROM music_platform_2.runs;
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'fiction';
SELECT reviews.rating, categories.category FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id JOIN categories ON podcasts.podcast_id = categories.podcast_id WHERE podcasts.title = 'Sitcomadon';
SELECT author_id FROM reviews WHERE podcast_id IN (SELECT podcast_id FROM podcasts WHERE itunes_id = 1516665400);
SELECT p.title FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.created_at BETWEEN '2018-08-22T11:53:16-07:00' AND '2018-11-20T11:14:20-07:00';
SELECT DISTINCT c.category FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.author_id = 'EFB34EAC8E9397C';
SELECT p.slug, p.itunes_url FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.content = 'Can''t stop listening';
SELECT reviews.created_at FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Don\'t Lie To Your Life Coach';
SELECT COUNT(DISTINCT c.category) FROM categories c JOIN reviews r ON c.podcast_id = r.podcast_id WHERE r.created_at BETWEEN '2016-07-01T00:00:00-07:00' AND '2016-12-31T23:59:59-07:00';
SELECT AVG(rating) FROM (   SELECT r.rating   FROM reviews r   JOIN categories c ON r.podcast_id = c.podcast_id   WHERE c.category = 'true-crime' )
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'arts';
SELECT AVG(reviews.rating) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id JOIN categories ON podcasts.podcast_id = categories.podcast_id WHERE categories.category = 'arts';
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id JOIN reviews r ON p.podcast_id = r.podcast_id WHERE c.category = 'arts' AND r.created_at LIKE '2018%';
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id JOIN reviews r ON p.podcast_id = r.podcast_id WHERE c.category = 'music' AND r.rating > 3;
SELECT p.title FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id WHERE r.content LIKE '%love%' AND c.category = 'arts' AND YEAR(r.created_at) BETWEEN 2018 AND 2019;
SELECT c.category, p.itunes_url FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id WHERE p.title = 'Scaling Global';
SELECT AVG(reviews.rating) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id JOIN categories ON podcasts.podcast_id = categories.podcast_id WHERE categories.category = 'comedy';
SELECT category FROM categories GROUP BY category ORDER BY COUNT(category) LIMIT 1;
SELECT podcast_id, title, content, rating, author_id, created_at, LENGTH(content) AS length FROM reviews ORDER BY length DESC LIMIT 1;
SELECT p.title FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.title = 'Hosts bring the show down';
SELECT title FROM podcasts WHERE podcast_id IN (SELECT podcast_id FROM categories WHERE category = 'music') ORDER BY LENGTH(title) DESC LIMIT 1;
SELECT c.category FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id WHERE p.title LIKE '%jessica%';
SELECT c.category FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id WHERE p.title = 'Moist Boys';
SELECT r.title, r.content, r.rating, c.category FROM reviews r JOIN categories c ON r.podcast_id = c.podcast_id WHERE r.rating = 2;
SELECT DISTINCT p.title FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.title = 'Inspired & On Fire!';
SELECT p.title, c.category FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id JOIN categories c ON p.podcast_id = c.podcast_id WHERE r.content LIKE '%Absolutely fantastic%';
SELECT c.category FROM categories c JOIN reviews r ON c.podcast_id = r.podcast_id GROUP BY c.category ORDER BY COUNT(r.podcast_id) DESC LIMIT 1;
SELECT p.itunes_url FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'fiction-science-fiction';
SELECT reviews.content FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Stuff You Should Know' ORDER BY reviews.created_at ASC LIMIT 1;
SELECT COUNT(*) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Planet Money';
SELECT AVG(rating) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'crime-junkie';
Error: 第 7979 个样本有 2 个SQL。
SELECT content FROM reviews WHERE title = 'really interesting!' AND created_at = '2018-04-24T12:05:16-07:00';
SELECT c.category FROM categories c JOIN podcasts p ON c.podcast_id = p.podcast_id WHERE p.title = 'Scaling Global';
SELECT p.title FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE c.category = 'arts-performing-arts';
SELECT COUNT(*) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Scaling Global';
SELECT COUNT(*) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Please Excuse My Dead Aunt Sally' AND reviews.created_at LIKE '2019%';
SELECT p.title FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.author_id = 'F7E5A318989779D';
SELECT COUNT(*) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Please Excuse My Dead Aunt Sally' AND reviews.rating = 5;
SELECT AVG(rating) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Please Excuse My Dead Aunt Sally';
SELECT COUNT(*) FROM university_year WHERE num_students > 80000 AND year = 2011;
SELECT ranking_system_id FROM ranking_criteria WHERE criteria_name = 'Award';
SELECT COUNT(*) FROM university WHERE university_name LIKE '%State%';
SELECT uy.student_staff_ratio FROM university_year uy JOIN (   SELECT university_id, MAX(student_staff_ratio) as max_ratio   FROM university_year   GROUP BY university_id ) sub ON uy.university_id = sub.university_id AND uy.student_staff_ratio = sub.max_ratio ORDER BY uy.student_staff_ratio DESC LIMIT 1;
SELECT COUNT(*) FROM ranking_criteria WHERE ranking_system_id = 3;
SELECT university_id FROM university_year WHERE pct_international_students = 1 AND year BETWEEN 2011 AND 2015 GROUP BY university_id HAVING COUNT(*) = (SELECT COUNT(*) FROM (SELECT DISTINCT year FROM university_year WHERE year BETWEEN 2011 AND 2015) AS years);
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id GROUP BY c.country_name ORDER BY COUNT(u.id) DESC LIMIT 1;
SELECT u.university_name FROM (     SELECT university_id,            COUNT(DISTINCT YEAR) AS consecutive_years     FROM (         SELECT university_id,                YEAR,                ROW_NUMBER() OVER (PARTITION BY university_id ORDER BY YEAR) AS row_num,                pct_international_students         FROM university_year         WHERE pct_international_students = (             SELECT MAX(pct_international_students)             FROM university_year uy2             WHERE uy2.year = university_year.year         )     ) subquery     GROUP BY university_id,              (YEAR - row_num + 1)     HAVING COUNT(*) >= 6 ) subquery2 JOIN university u ON subquery2.university_id = u.id GROUP BY u.university_name;
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON rc.id = ury.ranking_criteria_id WHERE ury.year = 2014 AND rc.criteria_name = 'Publications Rank' ORDER BY ury.score DESC LIMIT 1;
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.num_students = (SELECT MIN(num_students) FROM university_year)
SELECT COUNT(*) FROM university WHERE country_id = (SELECT id FROM country WHERE country_name = 'United States of America');
SELECT u.university_name FROM university u JOIN country c ON u.country_id = c.id JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE c.country_name = 'Australia' AND rc.criteria_name = 'Citations' AND ury.year = 2016 GROUP BY u.id ORDER BY ury.score DESC LIMIT 1;
SELECT COUNT(*) FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON rc.id = ury.ranking_criteria_id WHERE rc.criteria_name = 'Award' AND ury.score = 0 AND ury.year BETWEEN 2005 AND 2015;
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id WHERE u.university_name = 'University of Oxford';
SELECT COUNT(*) FROM university AS u JOIN university_ranking_year AS ury ON u.id = ury.university_id JOIN ranking_criteria AS rc ON rc.id = ury.ranking_criteria_id WHERE u.university_name = 'Yale University' AND ury.score >= 10 AND rc.criteria_name = 'Quality of Education Rank';
SELECT rc.criteria_name FROM ranking_criteria rc JOIN ranking_system rs ON rc.ranking_system_id = rs.id WHERE rs.system_name = 'Center for World University Rankings';
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.num_students >= 50000 AND uy.year = 2012;
SELECT DISTINCT c.country_name FROM country c JOIN university u ON c.id = u.country_id JOIN university_year uy ON u.id = uy.university_id WHERE uy.year BETWEEN 2011 AND 2016 AND uy.pct_international_students > 50;
SELECT COUNT(u.id) AS total_universities,        COUNT(CASE WHEN c.country_name = 'United States of America' THEN u.id END) AS usa_universities FROM university u JOIN country c ON u.country_id = c.id JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2016 AND (uy.pct_female_students * uy.num_students / 100) >= 20000;
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = (SELECT MAX(year) FROM university_year) ORDER BY (uy.num_students * uy.pct_international_students / 100) DESC LIMIT 5;
SELECT university_id FROM university_year WHERE student_staff_ratio = (SELECT MAX(student_staff_ratio) FROM university_year);
SELECT year FROM university_year WHERE num_students = (SELECT MIN(num_students) FROM university_year);
SELECT AVG(pct_female_students) FROM university_year;
SELECT     university_year.num_students,     (university_year.pct_international_students * university_year.num_students) / 100 AS num_international_students FROM     university_year WHERE     university_year.university_id = 20 AND     university_year.year = 2013;
SELECT id FROM university WHERE university_name = 'Harvard University';
SELECT university_id FROM university_ranking_year WHERE year = 2011 AND score = 100;
SELECT rs.system_name FROM ranking_system rs JOIN ranking_criteria rc ON rs.id = rc.ranking_system_id WHERE rc.criteria_name = 'Quality of Education Rank';
SELECT uy.student_staff_ratio FROM university_year uy JOIN university u ON uy.university_id = u.id WHERE u.university_name = 'Harvard University' AND uy.year = 2012;
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id WHERE u.id = 112;
SELECT SUM(u_y.num_students) FROM university u JOIN university_year u_y ON u.id = u_y.university_id JOIN country c ON u.country_id = c.id WHERE c.country_name = 'Sweden';
SELECT ury.ranking_criteria_id FROM university_year uy JOIN university u ON uy.university_id = u.id JOIN university_ranking_year ury ON uy.university_id = ury.university_id AND uy.year = ury.year WHERE u.university_name = 'Brown University' AND uy.year = 2014;
SELECT university_name FROM university WHERE country_id = (SELECT id FROM country WHERE country_name = 'Spain');
SELECT rc.criteria_name FROM ranking_criteria rc JOIN university_ranking_year ury ON rc.id = ury.ranking_criteria_id WHERE ury.university_id = 32 AND ury.year = 2015;
SELECT AVG(ur.score) FROM university u JOIN country c ON u.country_id = c.id JOIN university_ranking_year ur ON u.id = ur.university_id WHERE c.country_name = 'Brazil';
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2014 ORDER BY uy.num_students DESC LIMIT 1;
SELECT ury.score, uy.num_students * uy.pct_international_students / 100 AS num_international_students FROM university_ranking_year ury JOIN university_year uy ON ury.university_id = uy.university_id WHERE ury.university_id = 100 AND ury.year = 2015;
SELECT uy.num_students FROM university_year uy JOIN university u ON uy.university_id = u.id JOIN university_ranking_year ury ON u.id = ury.university_id WHERE ury.year = 2013 AND ury.score = 98;
SELECT rc.criteria_name FROM ranking_criteria rc JOIN ranking_system rs ON rc.ranking_system_id = rs.id WHERE rs.system_name = 'Center for World University Rankings';
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id JOIN university_year uy ON u.id = uy.university_id WHERE uy.num_students > (SELECT AVG(uy2.num_students) * 0.98 FROM university_year uy2 WHERE uy2.year = 2013) AND uy.year = 2013;
SELECT     (SUM((u_year.num_students * u_year.pct_international_students) / 100)) / SUM(u_year.num_students) * 100 AS 'pct_international_students' FROM     university u JOIN     university_year u_year ON u.id = u_year.university_id JOIN     university_ranking_year u_rank_year ON u.id = u_rank_year.university_id WHERE     u_rank_year.year = 2015 AND u_rank_year.score < 80 AND u_year.year = 2015;
SELECT SUM(num_students) FROM university_year WHERE year = 2011;
SELECT SUM(u.num_students * u.pct_female_students / 100) FROM university_year u WHERE u.year = 2011;
SELECT student_staff_ratio FROM university_year WHERE student_staff_ratio = (SELECT MAX(student_staff_ratio) FROM university_year);
SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1;
SELECT COUNT(*) FROM university_year JOIN university ON university.id = university_year.university_id WHERE university_year.num_students > 50000 AND university_year.year = 2011 AND university_year.pct_international_students > 10;
SELECT university_id FROM university_year WHERE year = 2012 ORDER BY pct_female_students DESC LIMIT 1;
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id WHERE ury.year = 2012 AND ury.score = (SELECT MAX(score) FROM university_ranking_year WHERE year = 2012)
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2011 GROUP BY u.university_name ORDER BY SUM(uy.num_students) DESC LIMIT 1;
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON rc.id = ury.ranking_criteria_id WHERE rc.criteria_name = 'Teaching' GROUP BY u.university_name ORDER BY MAX(ury.score) DESC LIMIT 1;
SELECT pct_international_students FROM university_year WHERE university_id = (     SELECT id     FROM university     WHERE university_name = 'Harvard University' ) AND year = 2011;
SELECT (university_year.num_students * university_year.pct_female_students / 100) FROM university_year JOIN university ON university.id = university_year.university_id WHERE university.university_name = 'Stanford University' AND university_year.year = 2011;
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id WHERE u.university_name = 'Harvard University';
SELECT rs.system_name FROM ranking_system rs JOIN ranking_criteria rc ON rs.id = rc.ranking_system_id WHERE rc.criteria_name = 'Teaching'
SELECT u.university_name FROM university u JOIN country c ON u.country_id = c.id JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE c.country_name = 'Argentina' GROUP BY u.university_name ORDER BY SUM(ury.score) DESC LIMIT 1;
SELECT COUNT(*) FROM university WHERE country_id = (SELECT id FROM country WHERE country_name = 'Argentina');
SELECT university_name FROM university JOIN university_year ON university.id = university_year.university_id WHERE year = 2011 AND num_students > 100000;
SELECT COUNT(*) FROM ranking_criteria WHERE ranking_system_id = (     SELECT id     FROM ranking_system     WHERE system_name = 'Center for World University Rankings' );
SELECT SUM(u_y.num_students) FROM university_year u_y JOIN university_ranking_year u_r_y ON u_y.university_id = u_r_y.university_id AND u_y.year = u_r_y.year WHERE u_r_y.score = 90 AND u_y.year = 2011;
SELECT u.university_name, SUM((uy.pct_international_students * uy.num_students) / 100) as total_international_students FROM university u JOIN university_year uy ON u.id = uy.university_id GROUP BY u.university_name ORDER BY total_international_students DESC LIMIT 3;
SELECT     (SELECT SUM(u_y.num_students) FROM university_year u_y WHERE u_y.university_id = (         SELECT u.id FROM university u WHERE u.university_name = 'Harvard University'     ) AND u_y.year BETWEEN 2011 AND 2012) -     (SELECT SUM((u_y.num_students * u_y.pct_international_students) / 100) FROM university_year u_y WHERE u_y.university_id = (         SELECT u.id FROM university u WHERE u.university_name = 'Harvard University'     ) AND u_y.year BETWEEN 2011 AND 2012)
SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 30000;
SELECT country_id FROM university WHERE university_name = 'University of Tokyo';
SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings';
SELECT id FROM ranking_criteria WHERE criteria_name = 'Publications Rank';
SELECT COUNT(*) FROM university_year WHERE pct_international_students > 30 AND year = 2013;
SELECT COUNT(*) FROM university_ranking_year WHERE ranking_criteria_id = 6 AND year = 2011 AND score < 50;
SELECT num_students FROM university_year WHERE university_id = (     SELECT id     FROM university     WHERE university_name = 'Yale University' ) AND year = 2016;
SELECT university_name FROM university WHERE country_id = (SELECT id FROM country WHERE country_name = 'Denmark');
SELECT (uy.num_students / uy.student_staff_ratio) AS num_staff FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE u.university_name = 'University of Auckland' AND uy.year = 2015;
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id WHERE u.university_name = 'University of São Paulo';
SELECT (num_students * pct_international_students) / 100 AS int_students FROM university_year JOIN university ON university.id = university_year.university_id WHERE university.university_name = 'Harvard University' AND year = 2012;
SELECT (university_year.num_students * university_year.pct_female_students / 100) AS num_female_students FROM university_year JOIN university ON university.id = university_year.university_id WHERE university.university_name = 'Arizona State University' AND university_year.year = 2014;
SELECT u.university_name, SUM(ur.score) as total_score FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id GROUP BY u.id ORDER BY total_score DESC LIMIT 1;
SELECT rc.criteria_name FROM ranking_criteria rc JOIN ranking_system rs ON rc.ranking_system_id = rs.id WHERE rs.system_name = 'Shanghai Ranking';
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON rc.id = ury.ranking_criteria_id WHERE ury.year = 2011 AND rc.criteria_name = 'Teaching' GROUP BY u.university_name ORDER BY ury.score ASC LIMIT 1;
SELECT rs.system_name FROM ranking_system rs JOIN ranking_criteria rc ON rs.id = rc.ranking_system_id WHERE rc.criteria_name = 'Quality of Education Rank';
WITH international_scores AS (   SELECT     u.university_name,     ury.score   FROM     university u   JOIN     university_ranking_year ury ON u.id = ury.university_id   JOIN     ranking_criteria rc ON ury.ranking_criteria_id = rc.id   WHERE     rc.criteria_name = 'International' AND     ury.year = 2016 AND     ury.score > 80 ), total_universities AS (   SELECT COUNT(*) AS total   FROM university ), international_universities AS (   SELECT COUNT(DISTINCT u.id) AS cnt   FROM university u   JOIN international_scores iscores ON u.id = iscores.university_id ) SELECT   (iu.cnt::float / tu.total * 100) AS percentage_above_80,   u.university_name AS university_with_highest_score FROM   international_scores iscores JOIN   university u ON iscores.university_id = u.id JOIN   international_universities iu ON TRUE JOIN   total_universities tu ON TRUE WHERE   iscores.score = (SELECT MAX(score) FROM international_scores) GROUP BY   tu.total, iu.cnt, iscores.score, u.university_name;
SELECT rc.criteria_name, ury.score FROM university u JOIN university_year uy ON u.id = uy.university_id JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON rc.id = ury.ranking_criteria_id WHERE u.university_name = 'Harvard University' AND uy.year = 2005;
SELECT AVG(score) FROM university_ranking_year JOIN ranking_criteria ON university_ranking_year.ranking_criteria_id = ranking_criteria.id WHERE ranking_criteria.criteria_name = 'Alumni' AND university_ranking_year.year = 2008;
SELECT u.university_name, c.country_name FROM university u JOIN country c ON u.country_id = c.id JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2015 ORDER BY (uy.num_students * uy.pct_international_students) / 100 DESC LIMIT 1;
SELECT num_students FROM university_year WHERE university_id = 1 AND year = 2011;
SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1;
SELECT university_id FROM university_year WHERE year = 2011 AND student_staff_ratio > 15;
SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 20000 AND pct_international_students > 25;
SELECT university_id FROM university_year WHERE year = 2011 ORDER BY pct_female_students DESC LIMIT 3;
SELECT year FROM university_year WHERE university_id = 1 ORDER BY num_students DESC LIMIT 1;
SELECT num_students FROM university_year JOIN university ON university_year.university_id = university.id WHERE university.university_name = 'Harvard University' AND university_year.year = 2011;
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2011 ORDER BY (uy.num_students * uy.pct_international_students) / 100 DESC LIMIT 1;
SELECT university_name FROM university WHERE country_id = (SELECT id FROM country WHERE country_name = 'Australia');
SELECT COUNT(*) FROM university u JOIN country c ON u.country_id = c.id JOIN university_year uy ON u.id = uy.university_id WHERE c.country_name = 'Australia' AND uy.year = 2011 AND uy.num_students > 15000;
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id WHERE u.university_name = 'Harvard University';
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE rc.criteria_name = 'Teaching' AND ury.year = 2011 ORDER BY ury.score DESC LIMIT 1;
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON rc.id = ury.ranking_criteria_id WHERE ury.year = 2011 AND rc.criteria_name = 'Teaching' AND ury.score > 90;
SELECT COUNT(*) FROM university u JOIN country c ON u.country_id = c.id JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE c.country_name = 'United States of America' AND rc.criteria_name = 'Teaching' AND ury.year = 2011 AND ury.score > 90;
SELECT rc.criteria_name FROM ranking_criteria rc JOIN university_ranking_year ury ON rc.id = ury.ranking_criteria_id JOIN university u ON u.id = ury.university_id WHERE u.university_name = 'Harvard University' AND ury.year = 2011;
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON rc.id = ury.ranking_criteria_id WHERE ury.year = 2011 AND ury.score = 98 AND rc.criteria_name = 'Teaching';
SELECT u.university_name FROM university u JOIN country c ON u.country_id = c.id JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE c.country_name = 'United States of America' AND rc.criteria_name = 'Teaching' AND ury.year = 2011 AND ury.score < 60;
SELECT COUNT(*) FROM university u JOIN country c ON u.country_id = c.id JOIN university_year uy ON u.id = uy.university_id WHERE c.country_name = 'Australia' AND uy.year = 2011 AND uy.student_staff_ratio > 15;
SELECT (university_year.num_students * university_year.pct_female_students / 100) FROM university_year JOIN university ON university.id = university_year.university_id WHERE university.university_name = 'Stanford University' AND university_year.year = 2011;
SELECT     (COUNT(CASE WHEN c.country_name = 'United States of America' THEN u.id ELSE NULL END) * 100.0 / COUNT(u.id)) AS percentage FROM     university u JOIN     country c ON u.country_id = c.id JOIN     university_ranking_year ury ON u.id = ury.university_id JOIN     ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE     ury.year = 2011 AND rc.criteria_name = 'Teaching' AND ury.score > 90;
SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings';
SELECT c.id, c.country_name FROM country c JOIN university u ON c.id = u.country_id WHERE u.university_name = 'University of Veterinary Medicine Vienna';
SELECT id FROM ranking_criteria WHERE criteria_name = 'Citations Rank';
SELECT id FROM university WHERE university_name = 'University of Orléans';
SELECT num_students FROM university_year WHERE university_id = 268 AND year = 2013;
SELECT country_name FROM country WHERE id = 66;
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id WHERE u.university_name = 'McMaster University';
SELECT COUNT(*) FROM university WHERE country_id = (SELECT id FROM country WHERE country_name = 'Turkey');
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2011 GROUP BY u.university_name ORDER BY uy.num_students DESC LIMIT 1;
SELECT num_students FROM university_year JOIN university ON university_year.university_id = university.id WHERE university.university_name = 'University of Michigan' AND university_year.year = 2011;
SELECT ury.score FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE u.university_name = 'Chosun University' AND ury.year = 2015 AND rc.criteria_name = 'Influence Rank';
SELECT uy.pct_international_students FROM university_year uy JOIN university u ON uy.university_id = u.id WHERE u.university_name = 'University of Oslo' AND uy.year = 2015;
SELECT rc.criteria_name FROM ranking_criteria rc JOIN university_ranking_year ury ON rc.id = ury.ranking_criteria_id JOIN university u ON u.id = ury.university_id WHERE u.university_name = 'University of Southampton' AND ury.year = 2015 GROUP BY rc.criteria_name ORDER BY ury.score DESC LIMIT 1;
SELECT rs.system_name FROM ranking_system rs JOIN ranking_criteria rc ON rs.id = rc.ranking_system_id WHERE rc.criteria_name = 'Total Shanghai';
SELECT     (uy.num_students * uy.pct_female_students / 100) AS num_female_students FROM     university u JOIN     university_year uy ON u.id = uy.university_id WHERE     u.university_name = 'Pierre and Marie Curie University' AND uy.year = 2015;
SELECT ur.year, ur.score FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE u.university_name = 'University of Florida' AND ur.year = 2014 AND rc.criteria_name = 'N and S';
SELECT (university_year.num_students * university_year.pct_international_students) / 100 AS num_international_students FROM university_year JOIN university ON university.id = university_year.university_id WHERE university.university_name = 'University of Wisconsin-Madison' AND university_year.year = 2013;
SELECT university_name FROM university JOIN university_year ON university.id = university_year.university_id WHERE year = 2015 ORDER BY num_students ASC LIMIT 1;
SELECT     (SELECT SUM(num_students)      FROM university_year      WHERE university_id = (          SELECT id          FROM university          WHERE university_name = 'University of Ottawa'      ) AND year = 2013     ) /     (SELECT SUM(num_students)      FROM university_year      WHERE university_id = (          SELECT id          FROM university          WHERE university_name = 'Joseph Fourier University'      ) AND year = 2013     ) AS times_more
Error: 第 8107 个样本有 2 个SQL。
SELECT AVG(num_students) FROM university_year WHERE year = 2012;
SELECT score FROM university_ranking_year WHERE university_id = 68 AND year = 2015;
SELECT id FROM country WHERE country_name = 'Cyprus';
SELECT university_id FROM university_year WHERE pct_international_students = (SELECT MAX(pct_international_students) FROM university_year);
SELECT criteria_name FROM ranking_criteria WHERE id = 13;
SELECT AVG(score) FROM university_ranking_year WHERE year = 2012;
SELECT SUM((university_year.pct_female_students * university_year.num_students) / 100) FROM university_year WHERE university_year.university_id = 40 AND university_year.year BETWEEN 2011 AND 2013;
SELECT AVG(score) FROM university_ranking_year WHERE university_id = 79 AND year BETWEEN 2013 AND 2015;
SELECT student_staff_ratio FROM university_year WHERE university_id = 35;
SELECT ury.score FROM university_year uy JOIN university u ON uy.university_id = u.id JOIN university_ranking_year ury ON uy.university_id = ury.university_id AND uy.year = ury.year WHERE uy.year = 2011 GROUP BY uy.university_id ORDER BY uy.num_students DESC LIMIT 1;
SELECT rc.criteria_name FROM ranking_criteria rc JOIN university_ranking_year ury ON rc.id = ury.ranking_criteria_id JOIN university u ON u.id = ury.university_id WHERE u.university_name = 'Harvard University' AND ury.score = 100;
SELECT university.university_name, university.id FROM university JOIN country ON university.country_id = country.id WHERE country.country_name = 'Turkey';
SELECT COUNT(*) FROM ranking_criteria WHERE ranking_system_id = (     SELECT id     FROM ranking_system     WHERE system_name = 'Shanghai Ranking' );
SELECT u.university_name, ury.score FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id WHERE u.id = 124;
SELECT (num_students * pct_female_students / 100) AS female_students FROM university JOIN university_year ON university.id = university_year.university_id WHERE university_name = 'University of Pennsylvania' AND year = 2011;
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id WHERE ury.score < 50 GROUP BY u.university_name;
SELECT COUNT(*) FROM university WHERE country_id = (SELECT id FROM country WHERE country_name = 'Japan');
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.num_students - (uy.num_students * uy.pct_female_students / 100) = (     SELECT MAX(uy2.num_students - (uy2.num_students * uy2.pct_female_students / 100))     FROM university_year uy2 )
SELECT DISTINCT c.country_name FROM country c JOIN university u ON c.id = u.country_id JOIN university_ranking_year ury ON u.id = ury.university_id WHERE ury.year = 2016 AND ury.score <= 70;
SELECT     (uy.num_students - (uy.num_students * uy.pct_female_students / 100)) AS num_male_students FROM     university_year uy JOIN     university u ON uy.university_id = u.id WHERE     u.university_name = 'Emory University' AND uy.year = 2011;
SELECT c.country_name FROM country c JOIN university u ON c.id = u.country_id WHERE u.university_name = 'Johns Hopkins University';
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.num_students BETWEEN 400 AND 1000;
SELECT ur.year FROM university_ranking_year ur JOIN university u ON ur.university_id = u.id WHERE u.university_name = 'Brown University' GROUP BY ur.year ORDER BY AVG(ur.score) DESC LIMIT 1;
SELECT AVG(score) FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id WHERE u.university_name = 'Emory University' AND ury.year BETWEEN 2011 AND 2016;
SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2015 ORDER BY uy.num_students DESC LIMIT 1;
SELECT c.country_name,        uyr.num_students * uyr.pct_female_students / 100 AS num_female_students FROM university u JOIN country c ON u.country_id = c.id JOIN university_year uyr ON u.id = uyr.university_id WHERE u.id = 23 AND uyr.year = 2011;
SELECT COUNT(*) FROM university_ranking_year ury JOIN ranking_criteria rc ON ury.ranking_criteria_id = rc.id WHERE rc.criteria_name = 'Teaching' AND ury.score = 40;
SELECT SUM(u_y.num_students * u_y.pct_female_students) / (100 * SUM(u_y.num_students)) AS pct_female_students FROM university_year u_y JOIN university u ON u.id = u_y.university_id JOIN country c ON c.id = u.country_id WHERE c.country_name = 'United States of America' AND u_y.year = 2016;
SELECT     SUM(t.num_students) - SUM(CAST(t.num_students * t.pct_international_students AS REAL) / 100) AS diff FROM     (SELECT         uy.num_students,         uy.pct_international_students     FROM         university u     INNER JOIN         university_year uy ON u.id = uy.university_id     WHERE         u.university_name = 'University of Tokyo' AND         uy.year BETWEEN 2011 AND 2014) t
SELECT u.university_name FROM university u JOIN university_ranking_year ury ON u.id = ury.university_id WHERE ury.year = 2015 AND ury.score < (SELECT AVG(score) * 0.28 FROM university_ranking_year WHERE year = 2015)
SELECT SUM(units) FROM sales_in_weather WHERE store_nbr = 1 AND item_nbr = 9 AND date = '2012-01-01';
SELECT SUM(units) FROM sales_in_weather WHERE store_nbr = 1 AND item_nbr = 9 AND SUBSTR(date, 1, 7) = '2012-01';
SELECT item_nbr FROM sales_in_weather WHERE date = '2012-01-01' AND store_nbr = 1 ORDER BY units DESC LIMIT 1;
SELECT tmax - tmin AS temperature_range FROM weather WHERE station_nbr = 1 AND date = '2012-01-01';
Error: 第 8142 个样本有 2 个SQL。
SELECT     date FROM     weather WHERE     station_nbr = 1 AND (date = '2012-01-01' OR date = '2012-01-02') ORDER BY     avgspeed DESC LIMIT 1;
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.item_nbr = 5 AND sw.store_nbr = 3 AND SUBSTR(sw.date, 1, 4) = '2012' AND w.depart < 0;
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.item_nbr = 5 AND sw.store_nbr = 3 AND SUBSTR(sw.date, 1, 4) = '2012' AND w.tmax = (SELECT MAX(tmax) FROM weather WHERE SUBSTR(date, 1, 4) = '2012')
SELECT w.dewpoint FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.item_nbr = 5 AND s.store_nbr = 3 AND SUBSTR(s.date, 1, 4) = '2012' ORDER BY s.units DESC LIMIT 1;
SELECT COUNT(DISTINCT sw.date) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.store_nbr = 3 AND sw.item_nbr = 5 AND sw.units > 100 AND w.tmax > 90;
SELECT SUM(units) FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.item_nbr = 5 AND s.store_nbr = 3 GROUP BY s.date ORDER BY (w.tmax - w.tmin) DESC LIMIT 1;
SELECT w.date FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.store_nbr = 3 AND s.item_nbr = 5 AND s.units > 100 ORDER BY (w.tmax - w.tmin) DESC LIMIT 1;
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.item_nbr = 5 AND sw.store_nbr = 3 AND w.preciptotal > 0.05;
SELECT sw.date FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.store_nbr = 3 AND sw.item_nbr = 5 AND sw.units > 100 AND w.avgspeed > 10;
Error: 第 8152 个样本有 2 个SQL。
SELECT     (SELECT SUM(units)      FROM sales_in_weather      WHERE store_nbr = 5 AND item_nbr = 16 AND SUBSTR(date, 1, 4) = '2012'      AND date = (SELECT date                  FROM weather                  WHERE SUBSTR(date, 1, 4) = '2012'                  ORDER BY tmax DESC                  LIMIT 1)     ) -     (SELECT SUM(units)      FROM sales_in_weather      WHERE store_nbr = 10 AND item_nbr = 16 AND SUBSTR(date, 1, 4) = '2012'      AND date = (SELECT date                  FROM weather                  WHERE SUBSTR(date, 1, 4) = '2012'                  ORDER BY tmax DESC                  LIMIT 1)     )
SELECT siw.item_nbr FROM sales_in_weather siw JOIN relation r ON siw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND siw.date = w.date WHERE siw.store_nbr = 3 AND SUBSTRING(siw.date, 1, 4) = '2012' GROUP BY siw.item_nbr ORDER BY w.tmax DESC, siw.units DESC LIMIT 1;
SELECT COUNT(*) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.store_nbr = 3 AND sw.units = 0 AND SUBSTR(sw.date, 1, 4) = '2012' AND w.tmax = (SELECT MAX(tmax) FROM weather WHERE SUBSTR(date, 1, 4) = '2012')
SELECT AVG(s.units) FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.store_nbr = 3 AND s.item_nbr = 5 AND w.tmax > 90;
WITH max_temp_day AS (   SELECT station_nbr, date   FROM weather   WHERE strftime('%Y', date) = '2012'   GROUP BY station_nbr   ORDER BY tmax DESC   LIMIT 1 ), joined_tables AS (   SELECT sw.date, sw.store_nbr, sw.item_nbr, sw.units, w.tmax   FROM sales_in_weather sw   JOIN relation r ON sw.store_nbr = r.store_nbr   JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date   WHERE sw.store_nbr = 3 AND strftime('%Y', sw.date) = '2012' ), item_5_sales AS (   SELECT SUM(units) AS item_5_units   FROM joined_tables   WHERE item_nbr = 5 AND date = (SELECT date FROM max_temp_day) ), total_sales AS (   SELECT SUM(units) AS total_units   FROM joined_tables   WHERE date = (SELECT date FROM max_temp_day) ) SELECT CAST(item_5_units AS REAL) / total_units * 100 AS percentage FROM item_5_sales, total_sales;
SELECT item_nbr FROM sales_in_weather WHERE store_nbr = 1 AND date = '2012-01-01' ORDER BY units DESC LIMIT 1;
SELECT SUM(units) FROM sales_in_weather WHERE item_nbr = 9 AND store_nbr = 11 AND date = '2012-12-07';
SELECT tavg FROM weather WHERE station_nbr = 20 AND date = '2014-10-17';
SELECT resultspeed FROM weather WHERE station_nbr = 9 AND date = '2014-01-15';
SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1;
SELECT station_nbr FROM relation WHERE store_nbr = 20;
SELECT (tmax - tmin) as temperature_range FROM sales_in_weather JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr JOIN weather ON relation.station_nbr = weather.station_nbr AND sales_in_weather.date = weather.date WHERE sales_in_weather.store_nbr = 7 AND sales_in_weather.date = '2014-04-28';
SELECT COUNT(DISTINCT r.store_nbr) FROM relation r JOIN (   SELECT station_nbr   FROM weather   WHERE depart = (     SELECT MAX(depart)     FROM weather   ) ) w ON r.station_nbr = w.station_nbr;
SELECT weather.dewpoint FROM weather JOIN relation ON weather.station_nbr = relation.station_nbr WHERE relation.store_nbr = 15 AND weather.date = '2012-02-18';
SELECT w.wetbulb FROM weather AS w JOIN relation AS r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 6 AND w.date = '2012-02-15';
SELECT COUNT(DISTINCT T1.store_nbr) FROM relation AS T1 JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.avgspeed = (SELECT MAX(avgspeed) FROM weather)
SELECT w.tmax FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 21 AND w.date = '2012-11-09';
SELECT w.sunrise FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 30 AND w.date = '2014-02-21';
SELECT COUNT(DISTINCT r.store_nbr) FROM relation r JOIN weather w ON r.station_nbr = w.station_nbr WHERE w.snowfall = (SELECT MAX(snowfall) FROM weather);
SELECT w.codesum FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 2 AND w.date = '2013-02-12';
SELECT w.sealevel FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 19 AND w.date = '2013-02-24';
SELECT w.preciptotal FROM weather AS w JOIN relation AS r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 2 AND w.date = '2012-12-25';
SELECT w.stnpressure FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE r.store_nbr = 12 AND w.date = '2012-05-15';
SELECT     (SUM(sales.units) * 100 / SUM(total_sales.total_units)) AS Percentage FROM     sales_in_weather sales JOIN     relation r ON sales.store_nbr = r.store_nbr JOIN     weather w ON r.station_nbr = w.station_nbr AND sales.date = w.date JOIN     (         SELECT             SUM(sales_in_weather.units) AS total_units         FROM             sales_in_weather         JOIN             relation ON sales_in_weather.store_nbr = relation.store_nbr         WHERE             sales_in_weather.date = '2014-10-31'     ) total_sales WHERE     sales.store_nbr = 10 AND sales.date = '2014-10-31';
SELECT ((w2.tavg - w1.tavg) / w1.tavg) * 100 AS increase_percentage FROM (   SELECT tavg   FROM weather   WHERE date = '2012-02-02' AND station_nbr IN (     SELECT station_nbr     FROM relation     WHERE store_nbr = 9   ) ) w1, (   SELECT tavg   FROM weather   WHERE date = '2012-02-03' AND station_nbr IN (     SELECT station_nbr     FROM relation     WHERE store_nbr = 9   ) ) w2;
SELECT item_nbr FROM sales_in_weather WHERE store_nbr = 1 AND date = '2012-01-01' ORDER BY units DESC LIMIT 1;
SELECT COUNT(DISTINCT r.store_nbr) FROM relation r WHERE r.station_nbr = 12;
SELECT COUNT(item_nbr) FROM sales_in_weather WHERE store_nbr = 2 AND units = 0 AND date = '2012-01-01';
SELECT date FROM weather WHERE station_nbr = 1 AND SUBSTR(date, 1, 4) BETWEEN '2012' AND '2014' ORDER BY tmax DESC LIMIT 1;
SELECT T2.station_nbr, COUNT(T1.store_nbr) AS store_count FROM relation AS T1 JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr GROUP BY T2.station_nbr ORDER BY store_count DESC LIMIT 1;
SELECT station_nbr, COUNT(date) AS num_days_below_normal FROM weather WHERE SUBSTRING(date, 1, 4) = '2014' AND SUBSTRING(date, 6, 2) = '03' AND depart < 0 GROUP BY station_nbr ORDER BY num_days_below_normal DESC LIMIT 1;
SELECT r.station_nbr FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr WHERE s.item_nbr = 9 GROUP BY r.station_nbr ORDER BY SUM(s.units) DESC LIMIT 1;
SELECT COUNT(DISTINCT r.store_nbr) FROM relation r JOIN weather w ON r.station_nbr = w.station_nbr WHERE w.avgspeed = (SELECT MAX(avgspeed) FROM weather);
SELECT s.store_nbr FROM sales_in_weather AS s JOIN relation AS r ON s.store_nbr = r.store_nbr WHERE r.station_nbr = 14 AND SUBSTRING(s.date, 1, 7) = '2014-02' AND s.item_nbr = 44 AND s.units >= 300 GROUP BY s.store_nbr;
SELECT item_nbr, SUM(units) as total_units FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON sw.date = w.date AND r.station_nbr = w.station_nbr WHERE SUBSTR(sw.date, 1, 7) = '2013-06' AND w.codesum LIKE '%RA%' AND w.station_nbr = 9 GROUP BY item_nbr ORDER BY total_units DESC LIMIT 1;
SELECT T3.station_nbr FROM sales_in_weather AS T1 JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 5 GROUP BY T3.station_nbr ORDER BY SUM(T1.units) DESC LIMIT 1;
SELECT MIN(w.sunrise) FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE SUBSTR(w.date, 1, 7) = '2012-02' GROUP BY w.station_nbr HAVING COUNT(r.store_nbr) = 1;
SELECT s.store_nbr FROM sales_in_weather AS sw JOIN relation AS r ON sw.store_nbr = r.store_nbr WHERE sw.item_nbr = 45 AND r.station_nbr = 17 AND SUBSTR(sw.date, 1, 7) = '2012-10' GROUP BY s.store_nbr ORDER BY SUM(sw.units) DESC LIMIT 1;
SELECT s.item_nbr FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE w.snowfall = (SELECT MAX(snowfall) FROM weather)
SELECT r.station_nbr, s.date, s.item_nbr, SUM(s.units) as total_units FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr GROUP BY r.station_nbr, s.date, s.item_nbr ORDER BY total_units DESC LIMIT 3;
SELECT COUNT(DISTINCT r.store_nbr) FROM relation r JOIN weather w ON r.station_nbr = w.station_nbr WHERE w.heat = (SELECT MAX(heat) FROM weather);
SELECT w.tmin FROM weather w JOIN relation r ON w.station_nbr = r.station_nbr WHERE w.date = '2014-02-08' AND r.store_nbr = 29;
SELECT COUNT(DISTINCT w.station_nbr) FROM relation r JOIN weather w ON r.station_nbr = w.station_nbr AND w.date = '2014-02-18' WHERE (     SELECT COUNT(r2.store_nbr)     FROM relation r2     WHERE r2.station_nbr = r.station_nbr ) = 3 AND w.stnpressure < 30;
WITH station_store_count AS (   SELECT station_nbr, COUNT(store_nbr) as count   FROM relation   GROUP BY station_nbr ), max_station AS (   SELECT station_nbr   FROM station_store_count   WHERE count = (     SELECT MAX(count)     FROM station_store_count   ) ), feb_2012_temp AS (   SELECT tmax   FROM weather   WHERE station_nbr IN (     SELECT station_nbr     FROM max_station   ) AND SUBSTRING(date, 1, 7) = '2012-02' ) SELECT AVG(tmax) as avg_tmax FROM feb_2012_temp
SELECT     (SUM(CASE WHEN s.store_nbr = 10 THEN sw.units ELSE 0 END) * 100 / SUM(sw.units)) AS percentage FROM     sales_in_weather sw JOIN     relation r ON sw.store_nbr = r.store_nbr JOIN     weather w ON sw.date = w.date AND r.station_nbr = w.station_nbr WHERE     w.station_nbr = 12     AND sw.item_nbr = 5     AND SUBSTR(sw.date, 1, 4) = '2014';
SELECT MAX(avgspeed) FROM weather;
SELECT COUNT(*) FROM `sales_in_weather.weather` WHERE `snowfall` > 5;
SELECT COUNT(*) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE w.sunrise < TIME('5:00:00');
SELECT MIN(dewpoint) FROM weather;
SELECT tmax, tmin FROM weather WHERE station_nbr = 1 AND date = '2012-01-15';
SELECT COUNT(DISTINCT r.station_nbr) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr WHERE sw.item_nbr = 5 AND SUBSTRING(sw.date, 1, 7) = '2014-01';
SELECT MIN(tmin) FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.store_nbr = 16 AND SUBSTRING(s.date, 1, 7) = '2012-01';
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.store_nbr = 7 AND sw.item_nbr = 7 AND w.snowfall < 5;
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.store_nbr = 9 AND w.snowfall IS NOT NULL AND w.snowfall <> 0;
SELECT r.station_nbr, s.item_nbr FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr WHERE s.store_nbr = 17;
SELECT DISTINCT sw.date FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.store_nbr = 35 AND w.codesum LIKE '%HZ%'
SELECT T2.sealevel, T2.avgspeed FROM relation AS T1 JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.store_nbr IN (3, 4);
SELECT item_nbr, MAX(units) FROM sales_in_weather WHERE store_nbr = 1 AND date IN (     SELECT date     FROM weather     WHERE codesum LIKE '%RA%' ) GROUP BY item_nbr ORDER BY units DESC LIMIT 1;
SELECT CAST(MAX(tmax) AS FLOAT) / MIN(tmin) AS Ratio FROM sales_in_weather s JOIN relation r ON s.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE s.store_nbr = 11;
SELECT     (SELECT SUM(units)      FROM sales_in_weather sw      JOIN relation r ON sw.store_nbr = r.store_nbr      WHERE r.station_nbr = 1 AND SUBSTRING(sw.date, 1, 4) = '2012') -     (SELECT SUM(units)      FROM sales_in_weather sw      JOIN relation r ON sw.store_nbr = r.store_nbr      WHERE r.station_nbr = 2 AND SUBSTRING(sw.date, 1, 4) = '2012') AS difference;
SELECT     (SELECT tavg FROM weather WHERE date = '2022-09-16' AND station_nbr IN (SELECT station_nbr FROM relation WHERE store_nbr = 18)) -     (SELECT tavg FROM weather WHERE date = '2022-09-16' AND station_nbr IN (SELECT station_nbr FROM relation WHERE store_nbr = 19)) AS avg_temp_diff
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.item_nbr = 1 AND w.tavg = 83;
SELECT     (SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON w.station_nbr = r.station_nbr AND sw.date = w.date WHERE sw.item_nbr = 1 AND w.sunset = (         SELECT MIN(sunset) FROM weather     )) -     (SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON w.station_nbr = r.station_nbr AND sw.date = w.date WHERE sw.item_nbr = 1 AND w.sunset = (         SELECT MAX(sunset) FROM weather     ))
SELECT SUM(units) FROM sales_in_weather sw JOIN relation r ON sw.store_nbr = r.store_nbr JOIN weather w ON r.station_nbr = w.station_nbr AND sw.date = w.date WHERE sw.item_nbr = 10 AND w.tavg < (SELECT AVG(tavg) FROM weather)
SELECT     (SUM(CASE WHEN s.store_nbr = 6 THEN w.tavg ELSE 0 END) / COUNT(CASE WHEN s.store_nbr = 6 THEN w.date ELSE NULL END)) -     (SUM(CASE WHEN s.store_nbr = 7 THEN w.tavg ELSE 0 END) / COUNT(CASE WHEN s.store_nbr = 7 THEN w.date ELSE NULL END)) FROM sales_in_weather AS s JOIN relation AS r ON s.store_nbr = r.store_nbr JOIN weather AS w ON r.station_nbr = w.station_nbr AND s.date = w.date WHERE SUBSTR(s.date, 1, 7) = '2012-05'
SELECT country.Name FROM country JOIN ethnicGroup ON country.Code = ethnicGroup.Country WHERE ethnicGroup.Name = 'Polish' GROUP BY country.Name ORDER BY SUM(ethnicGroup.Percentage) ASC LIMIT 1;
SELECT c.Name FROM country c JOIN ethnicGroup eg ON c.Code = eg.Country WHERE eg.Name = 'African' AND eg.Percentage > 90;
SELECT T1.Name, T1.Percentage FROM ethnicGroup AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Singapore'
SELECT     COUNT(CASE WHEN politics.Government = 'republic' AND STRFTIME('%Y', politics.Independence) > '1970' THEN 1 END) * 100.0 / COUNT(*) AS Percentage FROM     country JOIN     politics ON country.Code = politics.Country;
SELECT T1.GDP, T2.Government FROM economy AS T1 JOIN politics AS T2 ON T1.Country = T2.Country WHERE T1.Country = 'Bosnia and Herzegovina';
SELECT country.Name, country.Population FROM country JOIN population ON country.Code = population.Country WHERE population.Population_Growth > 2 AND population.Infant_Mortality < 5;
SELECT e.Name FROM ethnicGroup e JOIN country c ON e.Country = c.Code WHERE c.Population > 10000000 ORDER BY e.Percentage DESC LIMIT 1;
SELECT c.Name, e.Name, e.Percentage FROM country AS c JOIN ethnicGroup AS e ON c.Code = e.Country WHERE c.Code = (SELECT Country FROM ethnicGroup GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1) ORDER BY e.Name;
SELECT c.Name FROM country c JOIN ethnicGroup eg ON c.Code = eg.Country WHERE eg.Percentage = 100 AND eg.Name = 'African';
SELECT p.Infant_Mortality FROM population p JOIN country c ON p.Country = c.Code JOIN ethnicGroup eg ON c.Name = eg.Country WHERE eg.Name = 'Amerindian' GROUP BY p.Country ORDER BY SUM(eg.Percentage) ASC LIMIT 1;
SELECT e.Agriculture FROM economy e JOIN country c ON e.Country = c.Code WHERE c.Area > 600000;
SELECT p.Country FROM population p JOIN politics pol ON p.Country = pol.Country WHERE pol.Government = 'republic' ORDER BY p.Population_Growth DESC LIMIT 1;
SELECT Independence FROM politics WHERE Country = 'Bulgaria'
SELECT c.Name, (e.Percentage / 100) * c.Population as Arab_Population FROM country c JOIN ethnicGroup e ON c.Code = e.Country WHERE e.Name = 'Arab'
SELECT ethnicGroup.Percentage * country.Population / 100 AS African_population FROM ethnicGroup JOIN country ON ethnicGroup.Country = country.Code WHERE ethnicGroup.Name = 'African' AND country.Name = 'Turks and Caicos Islands';
Error: 第 8233 个样本有 2 个SQL。
SELECT T1.Capital, T1.Population FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.GDP > 400000;
SELECT T1.Service * T1.GDP AS Service_of_GDP FROM economy AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Brazil'
Error: 第 8236 个样本有 2 个SQL。
SELECT country.Name, population.Population, population.Population_Growth FROM country JOIN population ON country.Code = population.Country WHERE population.Population_Growth < 0;
SELECT country.Name, population.Infant_Mortality FROM country JOIN population ON country.Code = population.Country WHERE country.Area BETWEEN 500000 AND 1000000;
SELECT country.Name, economy.GDP FROM country JOIN population ON country.Code = population.Country JOIN economy ON country.Code = economy.Country WHERE population.Population_Growth > 3;
SELECT Infant_Mortality FROM population WHERE Country = 'Ethiopia';
SELECT e.GDP * e.Industry AS Industry_GDP FROM economy e WHERE e.Country = 'Singapore'
SELECT T1.Agriculture FROM economy AS T1 JOIN country AS T2 ON T1.Country = T2.Code ORDER BY T2.Area ASC LIMIT 1;
SELECT T1.Name FROM country AS T1 JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Albanian' ORDER BY T2.Percentage DESC LIMIT 1;
SELECT COUNT(*) FROM country WHERE Code IN (     SELECT Country     FROM ethnicGroup     WHERE Name = 'African' ) AND Population > 10000000;
SELECT T1.Name FROM country AS T1 JOIN ethnicGroup AS T2 ON T1.Code = T2.Country GROUP BY T1.Name HAVING COUNT(T2.Name) > 5;
SELECT country.Name FROM country JOIN economy ON country.Code = economy.Country ORDER BY economy.GDP DESC LIMIT 1;
SELECT COUNT(*) FROM country c JOIN economy e ON c.Code = e.Country WHERE c.Population > 10000000 AND e.GDP > 500000;
SELECT T1.Capital FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Inflation < 2;
SELECT T1.Name FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.Inflation ASC LIMIT 1;
SELECT COUNT(*) FROM country c JOIN economy e ON c.Code = e.Country WHERE e.Agriculture < 50 AND c.Area > 8000000;
SELECT COUNT(DISTINCT T1.Name) FROM city AS T1 JOIN located AS T2 ON T1.Name = T2.City JOIN lake AS T3 ON T3.Name = T2.Lake WHERE T3.Type = 'Salt'
SELECT T1.Depth FROM lake AS T1 JOIN located AS T2 ON T1.Name = T2.Lake JOIN province AS T3 ON T3.Name = T2.Province WHERE T3.Name = 'Albania'
SELECT T3.Name FROM lake AS T1 JOIN located AS T2 ON T1.Name = T2.Lake JOIN city AS T3 ON T3.Name = T2.City ORDER BY T1.Altitude DESC LIMIT 1
SELECT COUNT(*) FROM lake JOIN geo_lake ON geo_lake.Lake = lake.Name JOIN province ON geo_lake.Country = province.Name AND geo_lake.Province = province.CapProv WHERE province.Name = 'Canary Islands' AND lake.Area > 1000000;
SELECT T1.Name FROM country AS T1 JOIN language AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1;
SELECT T1.capital FROM country AS T1 JOIN language AS T2 ON T1.code = T2.country WHERE T2.name = 'Armenian' AND T2.percentage > 90;
SELECT COUNT(DISTINCT c.Name) FROM country c JOIN language l ON c.Code = l.Country WHERE c.Population < 1000000 GROUP BY c.Code HAVING COUNT(*) > 2;
SELECT COUNT(*) FROM organization WHERE Country IN (SELECT Code FROM country WHERE Population < 1000000);
SELECT COUNT(*) FROM organization WHERE Established > '1999-01-01' AND Country IN (SELECT Country FROM economy WHERE GDP < 500000);
SELECT COUNT(*) FROM (   SELECT c.Name   FROM country c   JOIN economy e ON c.Code = e.Country   JOIN (     SELECT Country     FROM isMember     GROUP BY Country     HAVING COUNT(*) > 3   ) im ON c.Name = im.Country   WHERE e.Inflation > 5 ) as result;
SELECT COUNT(*) FROM organization WHERE Country = (     SELECT T1.Country     FROM country AS T1     JOIN ethnicGroup AS T2 ON T1.Code = T2.Country     GROUP BY T1.Country     ORDER BY COUNT(*) DESC     LIMIT 1 )
SELECT o.Name FROM organization o JOIN country c ON o.Country = c.Code JOIN language l ON c.Code = l.Country WHERE l.Name = 'Dutch';
SELECT COUNT(*) FROM organization WHERE Country IN (     SELECT Country     FROM language     WHERE Name = 'Bosnian' );
SELECT MAX(T2.Population_Growth) AS max_infant_mortality_rate FROM economy AS T1 JOIN population AS T2 ON T1.Country = T2.Country WHERE T1.Inflation < 3;
SELECT COUNT(*) FROM country c JOIN economy e ON c.Code = e.Country JOIN population p ON p.Country = c.Name WHERE e.GDP > 1000000 AND p.Population_Growth > 3;
SELECT T1.Name FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country JOIN population AS T3 ON T1.Code = T3.Country ORDER BY T2.GDP / T3.Population DESC LIMIT 1;
SELECT (SUM(l.Area) / c.Area) * 100 AS LakeCoverage FROM `lake` l JOIN `country` c ON l.Country = c.Code GROUP BY l.Country ORDER BY LakeCoverage DESC LIMIT 1;
SELECT AVG(T2.Population_Growth) FROM (     SELECT T1.Country, COUNT(*) AS LanguageCount     FROM language AS T1     JOIN country AS T2 ON T1.Country = T2.Code     GROUP BY T1.Country     HAVING LanguageCount > 3 ) AS T1 JOIN population AS T2 ON T1.Country = T2.Country
SELECT T1.Name FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Inflation > (SELECT AVG(Inflation) * 1.3 FROM economy);
SELECT Country FROM city WHERE Name = 'Baghdad';
SELECT T2.Name FROM province AS T1 JOIN religion AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Martinique' ORDER BY T2.Percentage DESC LIMIT 1;
SELECT country.Name FROM country JOIN religion ON country.Code = religion.Country WHERE religion.Name = 'Christian' AND religion.Percentage = 41;
SELECT T1.Name FROM country AS T1 JOIN geo_river AS T2 ON T1.Code = T2.Country WHERE T2.River = 'Detroit River' GROUP BY T1.Name HAVING COUNT(*) = 1 LIMIT 2;
SELECT T1.Name AS Country1, T2.Name AS Country2 FROM country AS T1 JOIN borders AS T3 ON T1.Code = T3.Country1 JOIN country AS T2 ON T2.Code = T3.Country2 WHERE T3.Length = (SELECT MAX(Length) FROM borders)
SELECT T1.Name, COUNT(T2.Country2) AS NeighborCount FROM country AS T1 JOIN borders AS T2 ON T2.Country1 = T1.Code GROUP BY T1.Name ORDER BY NeighborCount DESC LIMIT 1;
SELECT T1.Name FROM country AS T1 JOIN geo_mountain AS T2 ON T1.Code = T2.Country JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Name = 'Cerro Chirripo';
SELECT COUNT(*) FROM mountain WHERE Name IN (     SELECT Mountain     FROM geo_mountain     WHERE Country = 'Indonesia' );
SELECT COUNT(*) FROM geo_mountain WHERE Country = 'Japan';
SELECT T3.Latitude FROM geo_mountain AS T1 JOIN mountain AS T2 ON T1.Mountain = T2.Name JOIN island AS T3 ON T3.Name = (SELECT Island FROM mountainOnIsland WHERE Mountain = 'Andrinjitra')
SELECT T1.Name, T1.Code FROM country AS T1 JOIN geo_mountain AS T2 ON T1.Name = T2.Country JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Height = (SELECT MAX(Height) FROM mountain WHERE Height < (SELECT MAX(Height) FROM mountain)) GROUP BY T1.Name, T1.Code HAVING COUNT(*) > 1;
SELECT (e.area * 100 / a.area) AS percentage FROM country e, continent a WHERE e.name = 'Egypt' AND a.name = 'Asia'
SELECT (e.area * 100 / a.area) AS percentage FROM country e, continent a WHERE e.name = 'Egypt' AND a.name = 'Asia'
SELECT Name FROM city WHERE Country = 'Japan' ORDER BY Population DESC LIMIT 1;
SELECT c.Capital FROM city AS cy JOIN country AS c ON cy.Country = c.Code WHERE cy.Name = 'Olsztyn';
SELECT T3.Name FROM mountain AS T1 JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain JOIN province AS T3 ON T3.Name = T2.Province WHERE T1.Type = 'volcano' ORDER BY T1.Height DESC LIMIT 1
SELECT T1.Independence FROM politics AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Uganda'
SELECT T1.Government FROM politics AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Iran'
SELECT country.Name FROM country JOIN province ON country.Code = province.Country WHERE province.Name = 'Bermuda';
SELECT c.Capital, c.Province FROM country c JOIN (     SELECT Country     FROM ethnicGroup     WHERE Name = 'Malay'     ORDER BY Percentage DESC     LIMIT 1 ) as malay_country ON c.Code = malay_country.Country
SELECT T2.Name FROM country AS T1 JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = (SELECT T1.Name FROM country AS T1 JOIN ethnicGroup AS T2 ON T1.Code = T2.Country ORDER BY T1.Area DESC LIMIT 2,1) ORDER BY T2.Percentage DESC LIMIT 1;
SELECT country.Name FROM country JOIN city ON country.Code = city.Country WHERE city.Population = 114339;
SELECT COUNT(*) FROM river r JOIN sea s ON r.Sea = s.Name WHERE s.Depth = 459;
SELECT T1.Area FROM country AS T1 JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Independence = '1921-03-13'
SELECT T1.Population / T1.Area AS population_density FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Petropavl'
SELECT (t1.Percentage - t2.Percentage) * t3.Population FROM language AS t1 JOIN language AS t2 ON t1.Country = t2.Country JOIN country AS t3 ON t1.Country = t3.Code WHERE t1.Name = 'English' AND t2.Name = 'Scottish' AND t1.Country = 'United Kingdom'
SELECT T2.Name FROM (   SELECT Country, Population/Area AS Density   FROM country   ORDER BY Density DESC   LIMIT 1 OFFSET 11 ) AS T1 JOIN city AS T2 ON T1.Country = T2.Country WHERE T2.Population = (   SELECT MAX(Population)   FROM city   WHERE Country = T1.Country )
SELECT MAX(Length) / MIN(Length) AS Ratio FROM borders WHERE Country1 = 'United States' OR Country2 = 'United States'
SELECT T1.Capital FROM country AS T1 JOIN (SELECT Country FROM geo_mountain GROUP BY Country HAVING COUNT(*) > 4) AS T2 ON T1.Code = T2.Country;
SELECT COUNT(*) FROM mountain WHERE Country IN (SELECT Code FROM country ORDER BY Population DESC LIMIT 1);
SELECT COUNT(*) FROM (     SELECT c.Name     FROM country c     JOIN economy e ON c.Code = e.Country     WHERE e.Agriculture > 40 ) AS ctry LEFT JOIN (     SELECT DISTINCT Country     FROM geo_mountain ) AS mtn ON ctry.Name = mtn.Country WHERE mtn.Country IS NULL OR (     SELECT COUNT(*)     FROM geo_mountain     WHERE Country = ctry.Name ) < 2;
SELECT m.Name FROM mountain m JOIN geo_mountain gm ON m.Name = gm.Mountain JOIN country c ON c.Code = gm.Country JOIN economy e ON e.Country = c.Name WHERE e.Inflation = (     SELECT MIN(Inflation)     FROM economy )
Error: 第 8302 个样本有 2 个SQL。
SELECT d.Name FROM desert d JOIN geo_desert gd ON d.Name = gd.Desert JOIN country c ON gd.Country = c.Code WHERE c.Population > 100000 AND c.Area < 500000;
SELECT COUNT(*) FROM desert d JOIN geo_desert gd ON d.Name = gd.Desert JOIN country c ON gd.Country = c.Code JOIN language l ON c.Code = l.Country WHERE l.Name = 'Armenian' AND l.Percentage > 90;
SELECT m.Name FROM mountain m JOIN country c ON m.Country = c.Code WHERE c.Name NOT IN (SELECT p.Dependent FROM politics p) ORDER BY m.Height DESC LIMIT 1;
SELECT COUNT(*) FROM mountain WHERE Type = 'volcanic' AND Country IN (SELECT Name FROM country WHERE Population <= 5000000);
SELECT COUNT(*) FROM country c JOIN geo_mountain gm ON c.Code = gm.Country WHERE c.Name IN (SELECT e.Country FROM economy e WHERE e.GDP > 1000000) AND gm.Mountain IN (SELECT m.Name FROM mountain m WHERE m.Height > 1000);
SELECT MAX(Length) FROM borders WHERE Country1 IN (SELECT Country FROM politics WHERE Dependent = '') AND Country2 IN (SELECT Country FROM politics WHERE Dependent = '');
SELECT COUNT(*) FROM country c JOIN borders b ON c.Code = b.Country1 WHERE c.Government = 'republic' AND b.Length > 200;
SELECT Country1, Country2, Length FROM borders WHERE Length = (SELECT MIN(Length) FROM borders)
SELECT SUM(e.GDP) FROM economy e JOIN country c ON e.Country = c.Code JOIN encompasses ec ON c.Name = ec.Country WHERE ec.Continent = 'Europe'
SELECT COUNT(*) FROM mountain WHERE Name IN (     SELECT T2.Mountain     FROM geo_mountain AS T1     JOIN mountain AS T2 ON T1.Mountain = T2.Name     JOIN country AS T3 ON T1.Country = T3.Code     WHERE T3.Continent = 'Africa' );
SELECT d.Name FROM desert d JOIN geo_desert gd ON d.Name = gd.Desert JOIN country c ON c.Code = gd.Country JOIN encompasses e ON e.Country = c.Code WHERE e.Continent = 'America' ORDER BY d.Area DESC LIMIT 1;
SELECT c.Name FROM country c JOIN encompasses e ON c.Code = e.Country WHERE e.Continent = 'Europe' AND c.Population_Growth > 3;
SELECT COUNT(*) FROM country c JOIN continent co ON c.Continent = co.Name JOIN population p ON c.Code = p.Country WHERE co.Name = 'Europe' AND p.Infant_Mortality > 100;
SELECT COUNT(*) FROM country JOIN language ON country.Code = language.Country JOIN population ON country.Code = population.Country WHERE language.Name = 'Bosnian' AND population.Population_Growth <= 0;
SELECT AVG(e.Agriculture) FROM economy e JOIN country c ON e.Country = c.Code JOIN encompasses ec ON c.Name = ec.Country WHERE ec.Continent = 'Africa';
SELECT COUNT(*) FROM (   SELECT c.Name   FROM country c   LEFT JOIN politics p ON c.Code = p.Country   WHERE p.Independence IS NOT NULL AND c.Code IN (     SELECT e.Country     FROM economy e     WHERE e.GDP / (       SELECT Population       FROM population       WHERE Country = e.Country     ) > 5000   ) ) as independent_rich_countries;
SELECT AVG(e.Inflation) FROM economy e JOIN country c ON e.Country = c.Code JOIN encompasses ec ON c.Name = ec.Country WHERE ec.Continent IN (     SELECT Name     FROM continent     ORDER BY Area DESC     LIMIT 1 );
SELECT T3.Name, T3.Area FROM city AS T1 JOIN locatedOn AS T2 ON T1.Name = T2.City JOIN island AS T3 ON T3.Name = T2.Island WHERE T1.Name = 'Balikpapan'
SELECT city.Name, city.Population FROM city JOIN province ON city.Province = province.Name WHERE province.Name = 'Sumatra';
SELECT T1.Name, T1.Longitude, T1.Latitude FROM island AS T1 JOIN locatedOn AS T2 ON T1.Name = T2.Island JOIN province AS T3 ON T3.Name = T2.Province WHERE T3.Name = 'South Yorkshire';
SELECT i.Name FROM island i WHERE i.Area > (     SELECT i2.Area     FROM island i2     JOIN locatedOn lo ON lo.Island = i2.Name     WHERE lo.Province = 'Warwickshire' )
SELECT T1.Name, T3.City FROM island AS T1 JOIN locatedOn AS T2 ON T1.Name = T2.Island JOIN city AS T3 ON T2.Country = T3.Country AND T2.Province = T3.Province WHERE T1.Area < 200;
SELECT p.Name, c.Capital FROM province p JOIN city c ON p.Name = c.Province WHERE c.Name = 'Glenrothes';
SELECT city.Name, city.Population FROM city JOIN province ON city.Province = province.Name WHERE province.Population > 1000000;
SELECT i.Name, c.Name, p.Name FROM island i JOIN locatedOn lo ON i.Name = lo.Island JOIN city c ON c.Name = lo.City JOIN province p ON p.Name = lo.Province WHERE i.Type = 'coral'
SELECT AVG(T1.Population) FROM city AS T1 JOIN located AS T2 ON T1.Name = T2.City WHERE T2.Sea = 'Baltic Sea';
SELECT (c.Population / p.Population) * 100 AS Percentage FROM city c JOIN province p ON c.Province = p.Name WHERE c.Name = 'Edmonton'
SELECT r.Name FROM river r JOIN sea s ON r.Sea = s.Name WHERE s.Name = 'Black Sea';
SELECT T1.Name, T3.City FROM lake AS T1 JOIN located AS T2 ON T1.Name = T2.Lake JOIN city AS T3 ON T3.Name = T2.City WHERE T2.Country = 'Albania';
SELECT mountain.Name, mountain.Height FROM mountain JOIN mountainOnIsland ON mountain.Name = mountainOnIsland.Mountain JOIN island ON island.Name = mountainOnIsland.Island WHERE island.Name = 'Himalaya' ORDER BY mountain.Height DESC LIMIT 1;
SELECT mountain.Name, mountain.Longitude, mountain.Latitude FROM mountain WHERE mountain.Type = 'volcanic';
SELECT mountain.Name FROM mountain WHERE mountain.Type = 'volcano' AND mountain.Height BETWEEN 2000 AND 4000;
SELECT r.Name FROM river r JOIN sea s ON r.Sea = s.Name WHERE s.Name = 'Mediterranean Sea' ORDER BY r.Length DESC LIMIT 1;
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM mountain WHERE Mountains = 'Andes') AS percentage FROM mountain WHERE Mountains = 'Andes' AND Type != 'volcano'
SELECT DISTINCT c.Name, c.Province FROM city c JOIN located l ON c.Name = l.City JOIN river r ON l.River = r.Name WHERE r.Sea = 'Atlantic Ocean';
SELECT r.Name, r.Length FROM river r JOIN located l ON r.Name = l.River JOIN city c ON c.Name = l.City WHERE c.Name = 'Orleans';
SELECT m.Height, m.Longitude, m.Latitude FROM mountain m JOIN mountainOnIsland moi ON m.Name = moi.Mountain JOIN geo_source gs ON moi.Island = gs.Island JOIN river r ON gs.River = r.Name WHERE r.Name = 'Lech'
SELECT r.Name AS River_Name, m.Name AS Mountain_Name FROM river r JOIN geo_source gs ON r.Name = gs.River JOIN mountain m ON m.Name = r.Mountains JOIN province p ON p.Name = gs.Country AND p.Name = 'Lorraine';
SELECT m.Name, m.Height FROM mountain m JOIN geo_source gs ON m.Name = gs.Mountain JOIN river r ON r.Name = gs.River WHERE r.Name = 'Blue Nile';
SELECT r.Name, r.Length FROM river r JOIN city c ON r.Country = c.Country AND r.Province = c.Province WHERE c.Name = 'Little Rock';
SELECT T1.Name, T2.Province FROM river AS T1 JOIN geo_river AS T2 ON T1.Name = T2.River WHERE T1.Length > 1000;
SELECT T2.Province, T3.Name AS Country, T1.Height FROM mountain AS T1 JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain JOIN country AS T3 ON T2.Country = T3.Code WHERE T1.Name = 'Moldoveanu';
SELECT T1.Name, T1.Length FROM river AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'USA';
SELECT AVG(mountain.Height) FROM mountain JOIN geo_mountain ON mountain.Name = geo_mountain.Mountain JOIN country ON country.Code = geo_mountain.Country WHERE country.Name = 'Nepal';
SELECT MAX(c.Population) - MIN(c.Population) AS Population_Disparity FROM city c JOIN located l ON c.Name = l.City AND c.Country = l.Country AND c.Province = l.Province JOIN river r ON l.River = r.Name WHERE r.Name = 'Seine'
SELECT r1.Name, r2.Name, ABS(r1.Length - r2.Length) AS Difference FROM river r1, river r2, city c WHERE c.Name = 'Belgrade' AND c.City IN (SELECT City FROM located WHERE River = r1.Name) AND c.City IN (SELECT City FROM located WHERE River = r2.Name) AND r1.Length > r2.Length ORDER BY Difference DESC LIMIT 1;
SELECT country.Name FROM country JOIN language ON country.Code = language.Country WHERE language.Name = 'Spanish' AND language.Percentage = 100;
SELECT T1.Name FROM country AS T1 JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Government LIKE '%British Crown%'
SELECT T1.Name FROM river AS T1 JOIN geo_river AS T2 ON T1.Name = T2.River WHERE T2.Country = 'Canada'
SELECT T1.Name FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.Inflation DESC LIMIT 1;
SELECT T2.Province, T2.Population FROM city AS T1 JOIN country AS T2 ON T1.Country = T2.Name WHERE T2.Name = 'United Kingdom' ORDER BY T1.Population DESC LIMIT 3,1;
SELECT T1.Population * T2.Percentage / 100 AS JewishResidents FROM country AS T1 JOIN religion AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Moldova' AND T2.Name = 'Jewish'
SELECT AVG(country.Area) FROM country JOIN encompasses ON country.Code = encompasses.Country WHERE encompasses.Continent = 'Asia';
SELECT T1.Name, T2.Longitude, T2.Latitude FROM country AS T1 JOIN geo_desert AS T2 ON T1.Code = T2.Country JOIN desert AS T3 ON T3.Name = T2.Desert WHERE T3.Area = (SELECT MIN(Area) FROM desert);
SELECT SUM(T2.Percentage * T3.Population) AS NumberOfPeopleSpeakingSerbian FROM language AS T1 JOIN ethnicGroup AS T2 ON T1.Country = T2.Country JOIN country AS T3 ON T1.Country = T3.Code WHERE T1.Name = 'Serbian' AND T3.Name = 'Montenegro';
SELECT COUNT(*) FROM mountain WHERE Country IN (SELECT Code FROM country ORDER BY Area DESC LIMIT 1);
SELECT T1.Name, T3.Name FROM sea AS T1 JOIN geo_sea AS T2 ON T1.Name = T2.Sea JOIN country AS T3 ON T3.Code = T2.Country ORDER BY T1.Depth ASC LIMIT 1;
SELECT T1.Name FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country JOIN politics AS T3 ON T1.Code = T3.Country WHERE T3.Government = 'Communist' ORDER BY T2.GDP ASC LIMIT 1;
SELECT p.Government FROM politics p JOIN economy e ON p.Country = e.Country ORDER BY e.Inflation DESC LIMIT 1;
SELECT p.Country FROM politics p JOIN population pop ON p.Country = pop.Country WHERE p.Independence = '1960' ORDER BY pop.Infant_Mortality DESC LIMIT 1;
SELECT MIN(b.Length), p1.Government, p2.Government FROM borders b JOIN country p1 ON b.Country1 = p1.Code JOIN country p2 ON b.Country2 = p2.Code GROUP BY b.Length ORDER BY b.Length LIMIT 1;
SELECT c.Name FROM country c JOIN language l ON c.Code = l.Country WHERE l.Name = 'Arabic' AND l.Percentage = 100 ORDER BY c.Population ASC LIMIT 1;
SELECT T3.Province FROM desert AS T1 JOIN geo_desert AS T2 ON T1.Name = T2.Desert JOIN country AS T3 ON T2.Country = T3.Code WHERE T1.Area = (SELECT MAX(Area) FROM desert)
SELECT COUNT(*) FROM lake WHERE Country IN (     SELECT Country     FROM country     WHERE Government = 'republican' AND Country IN (         SELECT Country         FROM politics     ) AND Country IN (         SELECT Country1         FROM encompasses         WHERE Continent = 'Africa'     )     ORDER BY Population DESC     LIMIT 1 OFFSET 3 )
SELECT r.Name FROM religion r JOIN country c ON r.Country = c.Code JOIN encompasses e ON c.Code = e.Country WHERE e.Continent = 'Asia' GROUP BY r.Name ORDER BY SUM(r.Percentage * c.Population) DESC LIMIT 1;
SELECT ABS(C1.Population - C2.Population) AS Pop_Difference FROM (  SELECT M.Country AS C1  FROM mountain M  INNER JOIN (   SELECT MAX(Height) AS MaxHeight   FROM mountain  ) AS MaxH  ON M.Height = MaxH.MaxHeight ) AS T1 JOIN country C1 ON T1.C1 = C1.Code CROSS JOIN (  SELECT M.Country AS C2  FROM mountain M  INNER JOIN (   SELECT MAX(Height) AS MaxHeight   FROM mountain  ) AS MaxH  ON M.Height = MaxH.MaxHeight ) AS T2 JOIN country C2 ON T2.C2 = C2.Code WHERE T1.C1 <> T2.C2
SELECT T3.Name FROM island AS T1 JOIN geo_sea AS T2 ON T1.Name = T2.Island JOIN sea AS T3 ON T3.Name = T2.Sea WHERE T1.Area = (SELECT MAX(Area) FROM island)
SELECT T1.Name FROM country AS T1 JOIN geo_river AS T2 ON T1.Code = T2.Country JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Sea = 'Atlantic Ocean' ORDER BY T3.Length DESC LIMIT 3;
SELECT T3.Population FROM country AS T1 JOIN city AS T2 ON T1.Capital = T2.Name JOIN population AS T3 ON T1.Code = T3.Country WHERE T1.Independence = '1947-08-15'
SELECT SUM(ethnicGroup.Percentage * country.Population) AS Total_Afro_Asian_Population FROM ethnicGroup JOIN country ON ethnicGroup.Country = country.Code WHERE country.Name IN (     SELECT Name     FROM country     WHERE Area IN (         SELECT MAX(Area)         FROM country         WHERE continent.Name = 'Asia'         AND politics.Government LIKE '%monarchy%'     ) ) AND ethnicGroup.Name LIKE '%Afro-Asian%';
SELECT T1.Name AS CityName, T4.Capital AS CapitalCity FROM city AS T1 JOIN located AS T2 ON T1.Name = T2.City JOIN river AS T3 ON T2.River = T3.Name JOIN country AS T4 ON T2.Country = T4.Code WHERE T3.Name = 'Euphrat'
SELECT SUM(T3.Percentage * T2.Population) / SUM(T2.Population) AS Proportion_of_English_speaking_citizens FROM isMember AS T1 JOIN country AS T2 ON T1.Country = T2.Code JOIN language AS T3 ON T2.Code = T3.Country WHERE T1.Organization = 'United States' AND T3.Name = 'English'
SELECT c.Name, COUNT(p.Name) AS NumberOfProvinces, e.Service / e.GDP * 100 AS ServicePercentage, c.Population / c.Area AS PopulationDensity FROM country c JOIN province p ON c.Code = p.Country JOIN politics pol ON c.Code = pol.Country JOIN economy e ON c.Code = e.Country WHERE pol.Government LIKE '%federal republic%' AND c.Continent = 'Europe' GROUP BY c.Name, e.Service, e.GDP, c.Population, c.Area ORDER BY NumberOfProvinces DESC, ServicePercentage DESC LIMIT 1;
SELECT T1.Capital, (T3.Population / T1.Population) * 100 AS Ratio_Percentage FROM (     SELECT Name, Capital, Population     FROM country     WHERE Continent = 'Asia'     ORDER BY Population DESC     LIMIT 2,1 ) AS T1 JOIN city AS T2 ON T2.Name = T1.Capital JOIN (     SELECT Country, SUM(Population) AS Population     FROM city     GROUP BY Country ) AS T3 ON T3.Country = T1.Name;
SELECT Name FROM desert ORDER BY Area DESC LIMIT 1 OFFSET 1;
SELECT T2.Name FROM country AS T1 JOIN language AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'MNE' ORDER BY Percentage DESC LIMIT 1;
SELECT T2.Percentage FROM country AS T1 JOIN language AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Cayman Islands' AND T2.Name = 'English';
SELECT T1.Name FROM country AS T1 JOIN geo_source AS T2 ON T1.Code = T2.Country JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Pjandsh'
SELECT c.Name FROM country c JOIN economy e ON c.Code = e.Country WHERE c.Population > 1000000000 ORDER BY e.GDP LIMIT 1;
SELECT T1.Capital FROM country AS T1 JOIN geo_mountain AS T2 ON T1.Code = T2.Country WHERE T2.Mountain = 'Licancabur'
SELECT SUM(s.Area) FROM sea s JOIN geo_sea gs ON s.Name = gs.Sea JOIN island i ON i.Name = gs.Island JOIN geo_mountain gm ON gm.Country = i.Country AND gm.Province = i.Province WHERE gm.Mountain = 'Kerinci';
SELECT T1.Name FROM country AS T1 JOIN geo_river AS T2 ON T1.Code = T2.Country JOIN river AS T3 ON T3.Name = T2.River WHERE T3.Name = 'Amazonas' GROUP BY T1.Name LIMIT 3;
SELECT country.Name FROM country JOIN politics ON country.Code = politics.Country WHERE politics.Independence = '1492-01-01';
SELECT COUNT(*) FROM city WHERE Country = 'France' AND Population > 100000;
SELECT r.Name, r.Length FROM river r JOIN sea s ON r.Sea = s.Name WHERE s.Depth = 540 ORDER BY r.Length DESC LIMIT 1;
SELECT T1.Name FROM country AS T1 JOIN geo_mountain AS T2 ON T1.Code = T2.Country JOIN mountain AS T3 ON T3.Name = T2.Mountain WHERE T3.Type = 'volcanic' ORDER BY T3.Height DESC LIMIT 1 OFFSET 1;
SELECT T3.Longitude FROM geo_mountain AS T1 JOIN mountain AS T2 ON T1.Mountain = T2.Name JOIN island AS T3 ON T3.Name = (SELECT Island FROM mountainOnIsland WHERE Mountain = 'Olympos')
SELECT c.Name, e.GDP FROM country AS c JOIN economy AS e ON c.Code = e.Country WHERE c.Area < 100 ORDER BY e.GDP DESC LIMIT 1;
SELECT COUNT(*) FROM city WHERE Country = 'Japan';
SELECT Name, Population FROM city WHERE Country = 'Bangladesh' AND Population = (     SELECT MAX(Population)     FROM city     WHERE Country = 'Bangladesh' AND Name != (         SELECT Capital         FROM country         WHERE Name = 'Bangladesh'     ) );
SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name <> T2.Capital ORDER BY T1.Population DESC LIMIT 1;
SELECT country.Name FROM city JOIN country ON city.Country = country.Code WHERE city.Name = 'Grozny';
SELECT T2.Name FROM country AS T1 JOIN religion AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Japan' ORDER BY T2.Percentage DESC LIMIT 1;
Error: 第 8396 个样本有 2 个SQL。
SELECT SUM(e.Percentage) FROM encompasses e JOIN country c ON e.Country = c.Code WHERE c.Name = 'Russia' AND e.Continent = 'Europe';
SELECT T1.Name FROM country AS T1 JOIN encompasses AS T2 ON T1.Code = T2.Country GROUP BY T1.Name HAVING COUNT(*) > 1
SELECT SUM(country.Population) FROM country JOIN city ON country.Code = city.Country WHERE city.Name = 'Fareham';
SELECT T1.Population_Growth * T2.Infant_Mortality * T1.Population AS Number_of_Infant_Mortality FROM country AS T1 JOIN population AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Switzerland'
SELECT COUNT(*) FROM geo_mountain WHERE Country = 'United States';
SELECT T1.Independence FROM politics AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Equatorial Guinea'
SELECT T1.GDP / T2.Population AS GDP_per_capita FROM economy AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Switzerland'
SELECT T2.Service FROM city AS T1 JOIN economy AS T2 ON T1.Country = T2.Country WHERE T1.Name = 'Fuenlabrada'
SELECT (MAX(r.Length) / MIN(r.Length)) AS Times_Longer FROM river r JOIN country c ON r.Country = c.Code WHERE c.Name = 'Tajikistan'
SELECT (c.Population / c.Area) as Population_Density FROM country c JOIN city ci ON c.Code = ci.Country WHERE ci.Name = 'Hanoi'
SELECT eg.Name AS Ethnic_Group, c.Name AS Country, MAX(eg.Percentage) as Max_Percentage FROM ethnicGroup eg JOIN country c ON eg.Country = c.Code WHERE eg.Percentage IN (     SELECT MAX(Percentage)     FROM ethnicGroup     GROUP BY Country     HAVING COUNT(*) > 1 ) GROUP BY eg.Country ORDER BY Max_Percentage DESC;
SELECT d.Name FROM desert d WHERE NOT EXISTS (     SELECT 1     FROM geo_desert gd     WHERE gd.Desert = d.Name     GROUP BY gd.Country     HAVING COUNT(*) = 1 );
SELECT COUNT(DISTINCT r.Name) AS NumberOfRivers, r.Province FROM river r JOIN geo_river gr ON r.Name = gr.River GROUP BY r.Province HAVING COUNT(DISTINCT gr.Country) > 1;
SELECT     b.Country2,     (b.Length / (         SELECT SUM(Length)         FROM borders         WHERE Country1 = 'Angola'     )) * 100 AS Percentage FROM     borders b WHERE     b.Country1 = 'Angola';
SELECT     (COUNT(CASE WHEN i.Area <= 300 THEN i.Name END) * 100.0 / COUNT(i.Name)) AS Percentage FROM     island i WHERE     i.Type != 'volcanic' AND i.Islands = 'Lesser Antilles'
SELECT (COUNT(CASE WHEN T2.Percentage = 100 THEN T1.Name END) * 100.0 / COUNT(T1.Name)) AS Percentage_English_Only FROM country AS T1 JOIN language AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'English'
SELECT T1.Capital FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.Country WHERE T1.Population < (SELECT MAX(Population) FROM country) * 0.0005
SELECT AVG(r.Length) FROM river r WHERE r.Name IN (SELECT r2.River                 FROM river r2                 WHERE r2.EstuaryLongitude = (SELECT Longitude                                              FROM river                                              WHERE Name = 'Donau')                 AND r2.EstuaryLatitude = (SELECT Latitude                                           FROM river                                           WHERE Name = 'Donau'))
SELECT (COUNT(CASE WHEN r.Percentage = 0 THEN 1 END) * 100 / COUNT(*)) AS Non_Christian_Percentage FROM (     SELECT c.Name, r.Percentage     FROM country c     JOIN religion r ON c.Code = r.Country     WHERE r.Name = 'Christian' ) AS christian_countries JOIN country c ON c.Name = christian_countries.Name JOIN religion r ON r.Country = c.Code WHERE r.Name != 'Christian';
SELECT c.Name FROM country c JOIN city ci ON c.Code = ci.Country JOIN isMember m ON c.Code = m.Country WHERE ci.Population BETWEEN 50000 AND 300000 AND m.Organization = 'EBRD' AND m.Established BETWEEN '1991-03-01' AND '1991-04-30';
SELECT r.Name FROM river r JOIN geo_river gr ON r.Name = gr.River WHERE r.Length > 500 AND r.River = 'Donau' AND gr.Country = 'Slovenia';
SELECT T3.Name FROM sea AS T1 JOIN geo_sea AS T2 ON T1.Name = T2.Sea JOIN city AS T3 ON T3.Country = T2.Country AND T3.Province = T2.Province WHERE T1.Depth < (SELECT Depth FROM sea WHERE Name = 'Bay of Bengal') AND T1.Name != 'Bay of Bengal'
SELECT T1.Name FROM city AS T1 JOIN located AS T2 ON T1.Name = T2.City WHERE T2.Latitude = 11.6 AND T2.Longitude = -85.35;
SELECT c.Continent FROM country AS c JOIN economy AS e ON c.Code = e.Country WHERE e.Inflation = (SELECT MAX(Inflation) FROM economy)
SELECT T1.Name AS Country1, T2.Name AS Country2 FROM country AS T1 JOIN borders AS T3 ON T1.Code = T3.Country1 JOIN country AS T2 ON T2.Code = T3.Country2 WHERE T1.Name IN (SELECT Name FROM country WHERE Continent = 'Asia') AND T2.Name IN (SELECT Name FROM country WHERE Continent = 'Asia') AND T3.Length = 1782;
SELECT T1.Name FROM lake AS T1 JOIN geo_lake AS T2 ON T1.Name = T2.Lake WHERE T2.Country = 'Bolivia' ORDER BY T1.Depth DESC LIMIT 1;
SELECT T3.Name FROM river AS T1 JOIN geo_source AS T2 ON T1.Name = T2.River JOIN lake AS T3 ON T3.Name = T2.Lake WHERE T1.Name = 'Manicouagan'
SELECT T3.Islands FROM geo_mountain AS T1 JOIN mountain AS T2 ON T1.Mountain = T2.Name JOIN island AS T3 ON T3.Name = T2.Island WHERE T2.Name = 'Rinjani'
SELECT T2.Name FROM mergesWith AS T1 JOIN sea AS T2 ON T1.Sea2 = T2.Name WHERE T1.Sea1 = (SELECT Name FROM sea ORDER BY Depth DESC LIMIT 1)
SELECT c.Name FROM country c JOIN encompasses e ON c.Code = e.Country GROUP BY c.Name HAVING COUNT(e.Continent) > 1 AND AVG(c.Population / c.Area) <= 10
SELECT c.Name, (c.Population / c.Area) AS PeoplePerSquareMeter FROM country c JOIN religion r ON c.Code = r.Country WHERE r.Name = 'Hindu' ORDER BY PeoplePerSquareMeter ASC LIMIT 1;
SELECT T2.Independence FROM economy AS T1 JOIN politics AS T2 ON T1.Country = T2.Country WHERE T1.GDP = (SELECT GDP FROM economy WHERE Country = 'Saint Kitts and Nevis') * 5
SELECT AVG(T3.Population / T3.Area) FROM organization AS T1 JOIN country AS T3 ON T1.Country = T3.Code WHERE T1.Established = 1947;
Error: 第 8430 个样本有 2 个SQL。
SELECT T1.Name, T1.Capital, T2.Name AS Capital_Name FROM country AS T1 JOIN city AS T2 ON T1.Capital = T2.Name WHERE T1.Population = (SELECT MIN(Population) FROM country)
SELECT (SELECT Area FROM continent WHERE Name = 'Asia') - (SELECT Area FROM continent WHERE Name = 'Europe') AS SpaceDifference;
SELECT Longitude, Latitude FROM city WHERE Name = 'Aarhus';
SELECT (SELECT Population FROM country WHERE Name = 'United Kingdom') - (SELECT Population FROM country WHERE Name = 'Italy') AS PopulationGap;
SELECT T1.Name, T1.Province FROM city AS T1 JOIN organization AS T2 ON T1.Name = T2.City WHERE T2.Name = 'European Bank for Reconstruction and Development';
SELECT `Name` FROM `lake` ORDER BY `Area` * `Depth` DESC LIMIT 1;
SELECT Country1, Country2 FROM borders WHERE Length = (SELECT MAX(Length) FROM borders);
SELECT T1.Name FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC LIMIT 1;
SELECT c.Name FROM country c JOIN language l ON c.Code = l.Country WHERE l.Name LIKE '%African%' ORDER BY l.Percentage ASC LIMIT 1;
SELECT c.Name FROM country c JOIN religion r1 ON c.Code = r1.Country JOIN religion r2 ON c.Code = r2.Country JOIN religion r3 ON c.Code = r3.Country JOIN language l ON c.Code = l.Country WHERE r1.Name = 'Anglicanism' AND r2.Name = 'Christianity' AND r3.Name = 'Roman Catholicism' AND l.Name = 'English' AND r1.Percentage + r2.Percentage + r3.Percentage = 100 AND l.Percentage = 100;
SELECT Country FROM economy ORDER BY Inflation DESC LIMIT 3;
SELECT country.Name FROM country JOIN language ON country.Code = language.Country WHERE language.Name = 'English' AND language.Percentage = 100;
SELECT COUNT(*) FROM organization WHERE Established > 1960 AND Country IN (SELECT Country FROM politics WHERE Independence IS NULL);
SELECT T2.Province, T1.Length FROM `river` AS T1 JOIN `geo_river` AS T2 ON T1.Name = T2.River WHERE T1.Name = 'Klaeaelv'
SELECT COUNT(DISTINCT T2.Name), T3.Depth FROM geo_sea AS T1 JOIN province AS T2 ON T1.Country = T2.Country JOIN sea AS T3 ON T1.Sea = T3.Name WHERE T1.Province IN (SELECT Name FROM province WHERE Country = 'Italy') AND T3.Name = 'Mediterranean Sea';
SELECT country.Name FROM country JOIN politics ON country.Code = politics.Country WHERE politics.Government = 'British Overseas Territory';
SELECT T1.Name FROM economy AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Agriculture = (SELECT MIN(Agriculture) FROM economy) ORDER BY T1.GDP DESC LIMIT 3;
SELECT c.Name, c.Area, COUNT(cc.Country) AS NumberOfNations FROM continent c JOIN encompasses cc ON c.Name = cc.Continent WHERE c.Name = 'Africa' GROUP BY c.Name, c.Area;
SELECT T2.Name AS Province, COUNT(T1.City) AS Headquarters FROM target AS T1 JOIN province AS T2 ON T1.Target = T2.Name WHERE T2.Country = 'United States' GROUP BY T2.Name ORDER BY Headquarters DESC LIMIT 1;
SELECT Name FROM politics JOIN country ON politics.Country = country.Code WHERE politics.Dependent = '' ORDER BY politics.Independence DESC LIMIT 3;
SELECT T1.Name FROM country AS T1 JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Government LIKE '%republic%' AND T2.Independence >= 1991 LIMIT 3;
SELECT o.Name FROM organization o JOIN isMember m ON o.Abbreviation = m.Organization WHERE m.Type = 'associated'
SELECT DISTINCT T2.Name FROM geo_desert AS T1 JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Desert = 'Kalahari Desert'
SELECT d.Name FROM desert d JOIN geo_desert gd ON d.Name = gd.Desert JOIN country c ON c.Code = gd.Country WHERE c.Name = 'Kazakhstan' ORDER BY d.Area DESC LIMIT 1;
SELECT T1.Name, T1.Depth FROM sea AS T1 JOIN mergesWith AS T2 ON T1.Name = T2.Sea1 WHERE T2.Sea2 = 'Baltic Sea';
SELECT T1.Name FROM country AS T1 JOIN organization AS T2 ON T1.Code = T2.Country WHERE T1.Government = 'constitutional monarchy' AND T2.Established > 1907 GROUP BY T1.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1;
SELECT m.Type, gm.Province, gm.Country FROM mountain m JOIN geo_mountain gm ON m.Name = gm.Mountain WHERE m.Name = 'Ampato';
SELECT mountain.Name FROM mountain JOIN geo_mountain ON mountain.Name = geo_mountain.Mountain WHERE geo_mountain.Country = 'Ecuador' AND geo_mountain.Province = 'Ecuador' AND mountain.Type = 'volcano';
SELECT     (COUNT(CASE WHEN p.Independence > 1993 AND p.Government = 'parliamentary democracy' THEN c.Name END) / COUNT(c.Name)) * 100 AS Percentage,     GROUP_CONCAT(CASE WHEN p.Independence > 1993 AND p.Government = 'parliamentary democracy' THEN c.Name ELSE NULL END SEPARATOR ', ') AS IndependentParliamentaryDemocracies FROM     country c JOIN     politics p ON c.Code = p.Country LIMIT 3;
SELECT     (COUNT(CASE WHEN Length > 3000 THEN 1 END) * 100.0 / COUNT(*)) AS Proportion,     Name AS Russian_River FROM     river WHERE     Length > 3000 AND Country = 'Russia' LIMIT 1;
SELECT organization.Name, organization.Established FROM organization WHERE organization.Abbreviation = 'ABEDA';
SELECT Name FROM organization WHERE Established BETWEEN 1970 AND 1980;
SELECT organization.Name FROM organization WHERE organization.City = 'London';
SELECT organization.Name, city.Name FROM organization JOIN city ON organization.City = city.Name WHERE organization.Country = 'USA';
SELECT o.Abbreviation, o.Name, o.Established FROM organization o JOIN city c ON o.City = c.Name AND o.Country = c.Country AND o.Province = c.Province WHERE c.Name = 'Paris' AND c.Country = 'France' ORDER BY o.Established ASC LIMIT 1;
SELECT organization.Name, city.Name FROM organization JOIN city ON organization.City = city.Name WHERE organization.Name LIKE '%United Nation%';
SELECT T1.Name AS Country1, T2.Name AS Country2 FROM country AS T1 JOIN borders AS T3 ON T1.Code = T3.Country1 JOIN country AS T2 ON T2.Code = T3.Country2 ORDER BY T3.Length DESC LIMIT 2;
SELECT T1.Name FROM country AS T1 JOIN borders AS T2 ON T1.Code = T2.Country1 WHERE T2.Country2 = 'Bulgaria' UNION SELECT T1.Name FROM country AS T1 JOIN borders AS T2 ON T1.Code = T2.Country2 WHERE T2.Country1 = 'Bulgaria'
SELECT T1.Name FROM country AS T1 JOIN borders AS T2 ON T1.Code = T2.Country1 WHERE T2.Length > 4000 UNION SELECT T1.Name FROM country AS T1 JOIN borders AS T2 ON T1.Code = T2.Country2 WHERE T2.Length > 4000;
SELECT c.Name, c.Population FROM country c JOIN isMember im ON c.Code = im.Country WHERE im.Organization = 'IOC' ORDER BY c.Population DESC LIMIT 1;
SELECT T1.Name, T2.Type FROM country AS T1 JOIN isMember AS T2 ON T1.Code = T2.Country JOIN organization AS T3 ON T3.Abbreviation = T2.Organization WHERE T3.Name = 'Islamic Development Bank';
SELECT T3.Area, T3.Population FROM organization AS T1 JOIN country AS T3 ON T1.Country = T3.Name WHERE T1.Name = 'Asia Pacific Economic Cooperation';
SELECT o.Name FROM organization o JOIN isMember m ON o.Abbreviation = m.Organization WHERE m.Type = 'National Society';
SELECT T1.Name FROM country AS T1 JOIN isMember AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(T2.Organization) ASC LIMIT 1
SELECT c.Name, c.Capital FROM country c JOIN isMember im ON c.Code = im.Country JOIN organization o ON im.Organization = o.Abbreviation WHERE o.Name = 'IFAD' AND im.Type = 'Category III';
SELECT o.Name, COUNT(DISTINCT isMember.Country) AS NumberOfMembers FROM organization o JOIN isMember ON o.Abbreviation = isMember.Organization GROUP BY o.Name ORDER BY NumberOfMembers DESC LIMIT 1;
Error: 第 8477 个样本有 2 个SQL。
SELECT (COUNT(CASE WHEN T2.City = 'Washington' THEN 1 END) * 100.0 / COUNT(T2.City)) AS Percentage FROM organization AS T1 JOIN city AS T2 ON T1.City = T2.Name WHERE T2.Country = 'USA'
SELECT Length FROM borders WHERE Country1 = 'USA' AND Country2 = 'MEX'
SELECT o.Name FROM organization o JOIN isMember m ON o.Abbreviation = m.Organization WHERE m.Country = 'Singapore' ORDER BY o.Established DESC LIMIT 1;
SELECT T1.Population FROM city AS T1 JOIN organization AS T2 ON T1.Name = T2.City WHERE T2.Name = 'World Tourism Organization'
SELECT mountain.Height, geo_mountain.Province FROM mountain JOIN geo_mountain ON mountain.Name = geo_mountain.Mountain WHERE mountain.Name = 'Dhaulagiri'
SELECT mountain.Name, mountain.Height FROM mountain JOIN geo_mountain ON mountain.Name = geo_mountain.Mountain WHERE geo_mountain.Province = 'Alaska';
SELECT T1.Name, T1.Population FROM country AS T1 JOIN population AS T2 ON T1.Code = T2.Country ORDER BY T2.Infant_Mortality DESC LIMIT 1;
SELECT Inflation FROM economy WHERE Country = 'Greece';
SELECT T2.Government FROM economy AS T1 JOIN politics AS T2 ON T1.Country = T2.Country ORDER BY T1.Agriculture DESC LIMIT 1;
SELECT c.Name, c.Capital FROM country c JOIN politics p ON c.Code = p.Country WHERE p.Government = 'parliamentary democracy';
SELECT c.Name, c.Population FROM country c JOIN ethnicGroup eg ON c.Code = eg.Country WHERE eg.Name = 'Chinese' AND eg.Percentage > 70;
SELECT c.Name AS City,        c.Population / co.Population * 100 AS Percentage_of_Country_Population FROM city c JOIN country co ON c.Country = co.Code WHERE c.Population = (SELECT MAX(Population) FROM city)
SELECT Independence FROM politics WHERE Country = 'United States of America'
SELECT Name, Height FROM mountain WHERE Type = 'volcanic' ORDER BY Height DESC LIMIT 1;
SELECT organization.Name FROM organization WHERE organization.Country = 'Saudi Arabia' ORDER BY organization.Established DESC LIMIT 1;
SELECT Country FROM population ORDER BY Infant_Mortality DESC LIMIT 1 OFFSET 4;
SELECT T1.Name FROM country AS T1 JOIN religion AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(DISTINCT T2.Name) DESC LIMIT 1;
SELECT Name, Length FROM river ORDER BY Length DESC LIMIT 16,1;
SELECT T2.Independence FROM country AS T1 JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Capital = 'Nouakchott'
SELECT T1.Name, T2.GDP FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Population = (SELECT MIN(Population) FROM country);
SELECT L.Name, L.Depth FROM lake AS L JOIN country AS C ON L.Country = C.Code WHERE C.Name = 'Zaire' AND L.Depth = (SELECT MAX(Depth) FROM lake WHERE Country = (SELECT Code FROM country WHERE Name = 'Zaire'));
SELECT m.Height, m.Type FROM mountain m JOIN mountainOnIsland mi ON m.Name = mi.Mountain JOIN island i ON mi.Island = i.Name WHERE i.Name = 'Madagaskar' ORDER BY m.Height DESC, m.Name LIMIT 1;
SELECT c.Name FROM country c JOIN economy e ON c.Code = e.Country WHERE c.Population BETWEEN 60000000 AND 99000000 ORDER BY e.GDP DESC LIMIT 1;
SELECT T1.Name FROM country AS T1 JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name IN (SELECT Name FROM country WHERE continent = 'Asia') ORDER BY T2.Agriculture DESC LIMIT 1;
SELECT p.Government FROM politics p JOIN country c ON p.Country = c.Name JOIN economy e ON e.Country = c.Name WHERE e.GDP = (SELECT MIN(GDP) FROM economy)
SELECT YEAR(Established) AS Year, COUNT(*) AS Num_Organizations FROM organization WHERE Country IN (     SELECT T1.Name     FROM country AS T1     JOIN encompasses AS T2 ON T1.Code = T2.Country     WHERE T2.Continent = 'Europe' ) GROUP BY YEAR(Established) ORDER BY Num_Organizations DESC LIMIT 1;
SELECT T1.Country2, T1.Length FROM borders AS T1 JOIN country AS T2 ON T1.Country1 = T2.Code WHERE T2.Population = (SELECT MAX(Population) FROM country)
SELECT     c.Population / c.Area AS Population_Density,     e.Industry AS GDP_Industry_Portion FROM     country c JOIN     city ci ON c.Capital = ci.Name JOIN     economy e ON c.Code = e.Country WHERE     ci.Province = 'Distrito Federal';
SELECT DISTINCT p.Government FROM politics p WHERE p.Government LIKE '%parliamentary democracy%' AND p.Independence BETWEEN '1950-01-01' AND '1999-12-31';
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM country) AS Percentage FROM politics WHERE STRFTIME('%Y', Independence) = '1960';
SELECT Name FROM desert WHERE Latitude NOT BETWEEN 30 AND 40;
SELECT d.Latitude, d.Longitude FROM desert d WHERE EXISTS (     SELECT 1     FROM (         SELECT COUNT(DISTINCT gd.Country) AS country_count         FROM geo_desert gd         WHERE gd.Desert = d.Name         GROUP BY gd.Desert     ) subquery     WHERE subquery.country_count > 1 );
SELECT CapProv FROM province WHERE Population < 80000 ORDER BY (Population/Area) DESC LIMIT 1;
SELECT COUNT(*) FROM Customers WHERE MARITAL_STATUS = 'Never-married';
SELECT COUNT(*) FROM Customers WHERE age BETWEEN 13 AND 19;
SELECT OCCUPATION FROM Customers WHERE EDUCATIONNUM = 11;
SELECT COUNT(*) FROM (   SELECT m.REFID   FROM mailings3 m   JOIN Customers c ON m.REFID = c.ID   WHERE m.RESPONSE = 'true'   ORDER BY c.ID   LIMIT 60000 ) as subquery;
SELECT COUNT(*) FROM Customers WHERE age > 30 AND OCCUPATION = 'Machine-op-inspct';
SELECT COUNT(*) FROM Customers WHERE SEX = 'Female' AND EDUCATIONNUM > 11;
SELECT COUNT(*) FROM (   SELECT c.ID   FROM Customers c   JOIN (     SELECT m.REFID     FROM mailings3 m     WHERE m.RESPONSE = 'true'     ORDER BY m.REF_DATE     LIMIT 60000   ) AS t ON c.ID = t.REFID   WHERE c.SEX = 'Female' ) AS result;
SELECT C.OCCUPATION FROM Customers C JOIN mailings3 M ON C.ID = M.REFID WHERE C.age > 40 AND M.RESPONSE = 'true';
SELECT COUNT(*) FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.SEX = 'Male' AND Demog.INHABITANTS_K > 30;
SELECT COUNT(*) FROM Customers WHERE GEOID = (     SELECT GEOID     FROM Demog     WHERE INCOME_K / 12 = (         SELECT MAX(INCOME_K / 12)         FROM Demog     ) );
SELECT COUNT(*) FROM Customers WHERE GEOID IN (SELECT GEOID FROM Demog WHERE INHABITANTS_K BETWEEN 20 AND 30) AND OCCUPATION = 'Machine-op-inspct';
SELECT ID FROM (   SELECT c.ID, d.INHABITANTS_K   FROM Customers c   JOIN Demog d ON c.GEOID = d.GEOID   WHERE c.ID IN (0, 1) ) t ORDER BY INHABITANTS_K DESC LIMIT 1;
SELECT COUNT(*) FROM (   SELECT m.REFID   FROM mailings3 m   JOIN Customers c ON m.REFID = c.ID   JOIN Demog d ON c.GEOID = d.GEOID   WHERE m.RESPONSE = 'true' AND d.INHABITANTS_K > 30   ORDER BY m.REF_DATE   LIMIT 60000 ) as subquery;
SELECT COUNT(*) FROM (   SELECT c.ID   FROM Customers c   JOIN mailings3 m ON c.ID = m.REFID   WHERE m.RESPONSE = 'true'     AND c.SEX = 'Male'     AND c.MARITAL_STATUS = 'Divorced'   ORDER BY c.ID   LIMIT 60000 ) AS subquery;
SELECT COUNT(*) FROM (   SELECT c.ID   FROM Customers c   JOIN Demog d ON c.GEOID = d.GEOID   WHERE d.INCOME_K = (     SELECT MAX(INCOME_K) FROM Demog   )   AND c.ID IN (     SELECT ID FROM Customers LIMIT 60000   ) ) cust_with_max_income JOIN mailings3 m ON cust_with_max_income.ID = m.REFID WHERE m.RESPONSE = 'true';
SELECT d.INHABITANTS_K FROM Demog d JOIN (   SELECT GEOID, COUNT(ID) as customer_count   FROM Customers   GROUP BY GEOID   ORDER BY customer_count DESC   LIMIT 1 ) c ON d.GEOID = c.GEOID;
SELECT COUNT(*) FROM Customers WHERE GEOID = (SELECT GEOID FROM Demog WHERE INHABITANTS_K = 25.746) AND SEX = 'Male';
SELECT COUNT(*) FROM (   SELECT c.ID   FROM Customers c   JOIN (     SELECT m.REFID     FROM mailings3 m     WHERE m.RESPONSE = 'true'     ORDER BY m.REF_DATE     LIMIT 60000   ) AS t ON c.ID = t.REFID   WHERE c.age BETWEEN 13 AND 19 );
SELECT AVG(Customers.EDUCATIONNUM) FROM Customers JOIN (   SELECT Demog.GEOID   FROM Demog   WHERE Demog.INCOME_K = (     SELECT MAX(INCOME_K) FROM Demog   ) ) AS HighIncomePlace ON Customers.GEOID = HighIncomePlace.GEOID;
SELECT AVG(T2.age) FROM (     SELECT T1.REFID     FROM (         SELECT REFID, RESPONSE,             ROW_NUMBER() OVER (ORDER BY REFID) AS row_num         FROM (             SELECT REFID, RESPONSE             FROM mailings3             UNION ALL             SELECT REFID, RESPONSE             FROM Mailings1_2         ) subquery         WHERE RESPONSE = 'true'     ) T1     WHERE row_num <= 60000 ) T3 JOIN Customers T2 ON T3.REFID = T2.ID WHERE EXISTS (     SELECT 1     FROM Sales T4     WHERE T4.REFID = T3.REFID );
SELECT COUNT(*) FROM Customers WHERE SEX = 'Male';
SELECT GEOID FROM Customers WHERE OCCUPATION = 'Handlers-cleaners';
SELECT COUNT(*) FROM Customers WHERE age < 30;
SELECT GEOID FROM Demog WHERE INCOME_K BETWEEN 2100 AND 2500;
SELECT COUNT(*) FROM Demog WHERE GEOID BETWEEN 20 AND 50 AND INHABITANTS_K < 20;
SELECT INHABITANTS_K, INCOME_K FROM software_company.Demog WHERE GEOID = 239;
SELECT Customers.EDUCATIONNUM, Customers.OCCUPATION FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.age BETWEEN 20 AND 35 AND Demog.INCOME_K < 2000;
SELECT Demog.INHABITANTS_K FROM Demog JOIN Customers ON Demog.GEOID = Customers.GEOID WHERE Customers.MARITAL_STATUS = 'Divorced' AND Customers.age > 50;
SELECT c.GEOID, d.INCOME_K FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.age = (SELECT MAX(age) FROM Customers);
SELECT Demog.INCOME_K FROM Demog JOIN Customers ON Demog.GEOID = Customers.GEOID WHERE Customers.SEX = 'Male' AND Customers.EDUCATIONNUM <= 4;
SELECT Customers.OCCUPATION, Demog.INCOME_K FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.SEX = 'Male' AND Customers.EDUCATIONNUM BETWEEN 4 AND 6;
SELECT COUNT(*) FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Male' AND c.age BETWEEN 40 AND 60 AND c.MARITAL_STATUS = 'Widowed' AND d.INCOME_K >= 3000;
SELECT C.OCCUPATION FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID WHERE D.INHABITANTS_K BETWEEN 30 AND 40;
SELECT D.INCOME_K FROM Demog D JOIN Customers C ON D.GEOID = C.GEOID WHERE C.SEX = 'Female' AND C.MARITAL_STATUS = 'Widowed' AND C.EDUCATIONNUM <= 5;
SELECT C.MARITAL_STATUS FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID WHERE C.age BETWEEN 40 AND 60 GROUP BY C.MARITAL_STATUS ORDER BY SUM(D.INCOME_K) DESC LIMIT 1;
SELECT SUM(d.INHABITANTS_K) FROM Demog d JOIN Customers c ON d.GEOID = c.GEOID WHERE c.SEX = 'Male' AND c.age BETWEEN 20 AND 30 AND c.OCCUPATION IN ('Farming-fishing', 'Farming', 'Fishing');
SELECT Demog.INHABITANTS_K, Customers.age FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.MARITAL_STATUS = 'Married-civ-spouse' AND Customers.OCCUPATION = 'Machine-op-inspct';
SELECT COUNT(*) FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Female' AND c.age BETWEEN 50 AND 60 AND d.INHABITANTS_K BETWEEN 19 AND 24;
SELECT D.INCOME_K, D.INHABITANTS_K FROM Demog D JOIN Customers C ON D.GEOID = C.GEOID WHERE C.age > (SELECT AVG(age) * 0.8 FROM Customers);
SELECT     (COUNT(CASE WHEN INCOME_K >= 2500 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM     software_company.Customers WHERE     MARITAL_STATUS = 'Never-married';
SELECT ID, GEOID FROM Customers WHERE age > 65 AND EDUCATIONNUM < 3;
SELECT GEOID FROM Demog WHERE INCOME_K > (SELECT SUM(INCOME_K) / COUNT(GEOID) FROM Demog);
SELECT COUNT(*) FROM Customers c WHERE NOT EXISTS (     SELECT 1     FROM (SELECT * FROM mailings3 UNION ALL SELECT * FROM Mailings1_2) m     WHERE c.ID = m.REFID       AND m.RESPONSE = 'false'       AND m.REF_DATE BETWEEN '2007-02-01 12:00:00.0' AND '2007-02-28 12:00:00.0' );
SELECT COUNT(*) FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age BETWEEN 13 AND 19;
SELECT COUNT(*) FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID WHERE Customers.OCCUPATION = 'Other-service' AND Demog.INHABITANTS_K > 20;
SELECT COUNT(*) FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Male' AND c.age BETWEEN 20 AND 29 AND d.INCOME_K > 3000;
SELECT     (COUNT(CASE WHEN age > 65 AND MARITAL_STATUS = 'never married' THEN ID END) * 100.0 / COUNT(ID)) AS percentage FROM     Customers WHERE     GEOID = 24;
SELECT     (COUNT(CASE WHEN C.age BETWEEN 80 AND 89 THEN C.ID END) * 100.0 / COUNT(C.ID)) AS percentage FROM     Customers C JOIN     Demog D ON C.GEOID = D.GEOID WHERE     (D.INCOME_K / D.INHABITANTS_K) > 3000;
SELECT COUNT(DISTINCT m.REFID) FROM (SELECT * FROM mailings3 WHERE RESPONSE = TRUE UNION ALL SELECT * FROM Mailings1_2 WHERE RESPONSE = TRUE) m;
SELECT REFID FROM (     SELECT REFID FROM mailings3 WHERE RESPONSE = TRUE     UNION     SELECT REFID FROM Mailings1_2 WHERE RESPONSE = TRUE ) AS combined_results GROUP BY REFID;
SELECT COUNT(*) FROM Customers WHERE MARITAL_STATUS = 'Widowed' AND age < 50;
SELECT GEOID FROM Demog WHERE INHABITANTS_K < 30;
SELECT COUNT(*) FROM Demog WHERE GEOID BETWEEN 10 AND 30 AND INCOME_K < 2000;
SELECT MARITAL_STATUS FROM Customers WHERE age = 62 AND EDUCATIONNUM = 7;
SELECT D.INHABITANTS_K FROM Demog D JOIN Customers C ON D.GEOID = C.GEOID JOIN mailings3 M ON C.ID = M.REFID WHERE C.MARITAL_STATUS = 'Widowed' AND M.RESPONSE = 'false';
SELECT mailings3.RESPONSE, d.INHABITANTS_K FROM mailings3 JOIN Customers c ON mailings3.REFID = c.ID JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Female' ORDER BY c.age DESC LIMIT 1;
SELECT c.GEOID, d.INCOME_K FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Female' AND c.EDUCATIONNUM <= 3;
SELECT C.EDUCATIONNUM, D.INCOME_K FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID JOIN (SELECT * FROM mailings3 WHERE RESPONSE = 'true') M ON C.ID = M.REFID WHERE C.age BETWEEN 30 AND 55;
SELECT COUNT(*) FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Male' AND c.age BETWEEN 30 AND 50 AND d.INCOME_K BETWEEN 2000 AND 2300;
SELECT C.EDUCATIONNUM, M.RESPONSE FROM Customers C JOIN mailings3 M ON C.ID = M.REFID JOIN Demog D ON C.GEOID = D.GEOID WHERE C.age BETWEEN 20 AND 30 GROUP BY C.EDUCATIONNUM, M.RESPONSE ORDER BY D.INHABITANTS_K DESC LIMIT 1;
SELECT Demog.INCOME_K FROM Demog JOIN Customers ON Demog.GEOID = Customers.GEOID WHERE Customers.SEX = 'Female' AND Customers.age BETWEEN 30 AND 55 AND Customers.OCCUPATION = 'machine-op-inspct';
SELECT C.MARITAL_STATUS, M.RESPONSE FROM Customers C JOIN mailings3 M ON C.ID = M.REFID WHERE C.SEX = 'Female' AND C.EDUCATIONNUM >= 8;
SELECT c.age FROM Customers c JOIN Demog d ON c.GEOID = d.GEOID WHERE c.SEX = 'Female' AND d.INHABITANTS_K < 30;
SELECT Demog.INCOME_K, mailings3.RESPONSE FROM Customers JOIN Demog ON Customers.GEOID = Demog.GEOID JOIN mailings3 ON Customers.ID = mailings3.REFID WHERE Customers.SEX = 'Male' AND Customers.MARITAL_STATUS = 'Divorced' AND Customers.EDUCATIONNUM >= 6;
SELECT C.OCCUPATION, M.RESPONSE FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID JOIN mailings3 M ON C.ID = M.REFID WHERE C.SEX = 'Female' AND D.INHABITANTS_K BETWEEN 20 AND 25;
SELECT     (COUNT(CASE WHEN c.OCCUPATION = 'Handlers-cleaners' AND c.SEX = 'Male' AND m.RESPONSE = 'true' THEN 1 END) * 100.0 / COUNT(CASE WHEN c.OCCUPATION = 'Handlers-cleaners' AND c.SEX = 'Male' THEN 1 END)) as percentage FROM     Customers c JOIN     mailings3 m ON c.ID = m.REFID;
SELECT D.INCOME_K, D.INHABITANTS_K FROM Demog D WHERE EXISTS (     SELECT 1     FROM mailings3 M     WHERE M.REFID > (         SELECT AVG(CASE WHEN RESPONSE = 'false' THEN 1 ELSE 0 END) * 0.5         FROM mailings3     )     AND M.REFID = C.REFID ) AND EXISTS (     SELECT 1     FROM Customers C     WHERE C.GEOID = D.GEOID     AND C.REFID = M.REFID )
SELECT     CAST(SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END) AS FLOAT) /     SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END) as ratio FROM     software_company.Customers WHERE     age BETWEEN 13 AND 19 AND EDUCATIONNUM > 10;
SELECT GEOID, 12 * INHABITANTS_K * INCOME_K AS Total_Income_Per_Year FROM software_company.Demog WHERE INCOME_K > 3300;
SELECT     CASE         WHEN COUNT(CASE WHEN RESPONSE = 'true' THEN REFID END) > COUNT(CASE WHEN RESPONSE = 'false' THEN REFID END)         THEN 'More Responders'         ELSE 'More Non-Responders'     END AS ResponseComparison FROM     (SELECT * FROM mailings3     UNION ALL     SELECT * FROM Mailings1_2) T;
SELECT D.GEOID, D.INHABITANTS_K * D.INCOME_K * 12 AS YearlyIncome FROM Demog D JOIN Customers C ON D.GEOID = C.GEOID WHERE C.SEX = 'Female' AND C.OCCUPATION = 'Sales';
SELECT C.EDUCATIONNUM, C.OCCUPATION, C.age FROM Customers C JOIN Demog D ON C.GEOID = D.GEOID WHERE D.INHABITANTS_K = 33.658 AND C.SEX = 'Female' AND C.MARITAL_STATUS = 'Widowed';
SELECT RESPONSE FROM mailings3 WHERE REFID IN (     SELECT ID     FROM Customers     WHERE GEOID = 134 );
SELECT AVG(T1.INCOME_K) AS avg_monthly_income, T1.GEOID, (T1.INHABITANTS_K * T1.INCOME_K * 12) AS yearly_income FROM Demog AS T1 JOIN Customers AS T2 ON T1.GEOID = T2.GEOID WHERE T2.ID IN (209556, 290135) GROUP BY T1.GEOID;
SELECT C.EDUCATIONNUM, COUNT(C.ID) FROM Customers C JOIN mailings3 M ON C.GEOID = M.REFID WHERE M.REFID < 10 AND M.RESPONSE = 'true' GROUP BY C.EDUCATIONNUM;
SELECT COUNT(*) FROM Community_Area WHERE side = 'Central';
SELECT T2.district_name FROM Community_Area AS T1 JOIN District AS T2 ON T1.side = T2.side WHERE T1.community_area_name = 'Lincoln Square'
SELECT T2.district_name, T1.side, COUNT(T1.community_area_no) AS num_of_community_areas FROM Community_Area AS T1 JOIN District AS T2 ON T1.side = T2.district_no GROUP BY T1.side, T2.district_name ORDER BY num_of_community_areas DESC LIMIT 1;
SELECT community_area_name FROM Community_Area WHERE population = (SELECT MIN(population) FROM Community_Area);
SELECT commander FROM District WHERE district_name = 'Central';
SELECT email FROM District WHERE district_name = 'Central';
SELECT ca.community_area_name FROM Community_Area ca JOIN Neighborhood n ON ca.community_area_no = n.community_area_no WHERE n.neighborhood_name = 'Albany Park';
SELECT COUNT(*) FROM Neighborhood WHERE community_area_no IN (     SELECT community_area_no     FROM Community_Area     WHERE community_area_name = 'Lincoln Square' );
SELECT N.neighborhood_name FROM Neighborhood N JOIN Community_Area C ON N.community_area_no = C.community_area_no WHERE C.population = (SELECT MAX(population) FROM Community_Area)
SELECT neighborhood_name FROM Neighborhood JOIN Community_Area ON Neighborhood.community_area_no = Community_Area.community_area_no WHERE Community_Area.side = 'Central';
SELECT latitude, longitude FROM Crime JOIN District ON Crime.district_no = District.district_no WHERE District.district_name = 'Central';
SELECT COUNT(*) FROM Crime WHERE district_no IN (SELECT district_no FROM District WHERE district_name = 'Central');
SELECT COUNT(*) FROM Crime JOIN District ON Crime.district_no = District.district_no WHERE District.district_name = 'Central' AND Crime.domestic = 'TRUE';
SELECT case_number FROM Crime WHERE arrest = 'FALSE' AND district_no IN (     SELECT district_no FROM District     WHERE district_name = 'Central' );
SELECT COUNT(*) FROM Crime WHERE community_area_no = (     SELECT community_area_no     FROM Community_Area     WHERE population = (         SELECT MAX(population)         FROM Community_Area     ) );
SELECT COUNT(*) FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE Community_Area.community_area_name = 'Woodlawn' AND Crime.date LIKE '%1/2018%';
SELECT community_area_name, COUNT(report_no) as num_crimes FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE date LIKE '%1/2018%' AND community_area_name IN ('Woodlawn', 'Lincoln Square') GROUP BY community_area_name ORDER BY num_crimes DESC LIMIT 1;
SELECT T2.fax FROM Crime AS T1 JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.date LIKE '%1/2018%' GROUP BY T1.district_no ORDER BY COUNT(T1.case_number) DESC LIMIT 1
SELECT AVG(crime_count) as average_crimes FROM (     SELECT COUNT(Crime.report_no) as crime_count     FROM Crime     JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no     WHERE Community_Area.side = 'Central'     GROUP BY Crime.community_area_no ) as subquery;
SELECT (COUNT(CASE WHEN D.district_name = 'Central' THEN C.case_number END) * 100.0 / COUNT(C.case_number)) AS percentage FROM Crime AS C JOIN District AS D ON C.district_no = D.district_no;
SELECT COUNT(*) FROM Community_Area WHERE side = 'Far North';
SELECT commander FROM District WHERE district_name = 'Morgan Park';
SELECT D.district_name FROM Crime C JOIN District D ON C.district_no = D.district_no WHERE C.case_number = 'JB100065';
SELECT T2.district_name FROM Crime AS T1 JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.latitude = '41.66236555' AND T1.longitude = '-87.63470194';
SELECT T2.commander FROM Crime AS T1 JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.case_number = 'JB524952'
SELECT COUNT(*) FROM Crime JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE IUCR.primary_description = 'ASSAULT' AND IUCR.secondary_description = 'SIMPLE' AND Crime.date LIKE '%9/8/2018%';
SELECT T2.district_no FROM IUCR AS T1 JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.secondary_description = 'FIRST DEGREE MURDER' GROUP BY T2.district_no ORDER BY COUNT(T2.case_number) DESC LIMIT 1;
SELECT T1.index_code FROM IUCR AS T1 JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.case_number = 'JB296775';
SELECT T1.community_area_name FROM Community_Area AS T1 JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no JOIN IUCR AS T3 ON T2.iucr_no = T3.iucr_no WHERE T3.primary_description = 'THEFT' AND T3.secondary_description = 'POCKET-PICKING' GROUP BY T1.community_area_name ORDER BY COUNT(T2.case_number) DESC LIMIT 1;
Error: 第 8615 个样本有 2 个SQL。
SELECT N.neighborhood_name FROM Neighborhood N JOIN Community_Area C ON N.community_area_no = C.community_area_no WHERE C.community_area_name = 'West Englewood';
SELECT COUNT(DISTINCT T2.neighborhood_name) FROM Community_Area AS T1 JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.community_area_name = 'Roseland';
SELECT T2.description FROM Crime AS T1 JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.case_number = 'JB134191'
SELECT COUNT(T1.case_number) FROM Crime AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.community_area_name = 'North Lawndale' AND T1.arrest = 'TRUE';
SELECT     (COUNT(CASE WHEN C.secondary_description = '$500 AND UNDER' THEN C.case_number END) * 100.0 / COUNT(C.case_number)) AS percentage FROM     Crime C JOIN     IUCR I ON C.iucr_no = I.iucr_no JOIN     Community_Area CA ON C.community_area_no = CA.community_area_no WHERE     I.primary_description = 'THEFT' AND CA.community_area_name = 'West Englewood';
SELECT (COUNT(c.case_number) FILTER (WHERE f.title = 'Larceny') * 100.0 / COUNT(c.case_number)) AS larceny_percentage FROM Crime c JOIN Community_Area ca ON c.community_area_no = ca.community_area_no JOIN FBI_Code f ON c.fbi_code_no = f.fbi_code_no WHERE ca.community_area_name = 'Edgewater';
SELECT COUNT(*) FROM Crime WHERE block = '018XX S KOMENSKY AVE' AND date LIKE '5/%/2018%';
SELECT community_area_name FROM Community_Area ORDER BY population DESC LIMIT 1;
SELECT COUNT(*) FROM Crime WHERE domestic = 'TRUE' AND location_description = 'ABANDONED BUILDING' AND date LIKE '%2018%';
Error: 第 8625 个样本有 2 个SQL。
SELECT COUNT(*) FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE Crime.arrest = 'TRUE' AND Crime.date LIKE '%2018%' AND Crime.location_description = 'ANIMAL HOSPITAL' AND Crime.fbi_code_no = '08B';
SELECT FBI_Code.description FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE FBI_Code.crime_against = 'Society';
SELECT D.commander FROM District D WHERE D.district_no = (     SELECT C.district_no FROM Crime C JOIN FBI_Code F ON C.fbi_code_no = F.fbi_code_no WHERE F.title = 'Disorderly Conduct' GROUP BY C.district_no ORDER BY COUNT(C.district_no) DESC LIMIT 1 );
SELECT T2.title FROM Crime AS T1 JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no GROUP BY T1.fbi_code_no ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM Crime JOIN District ON Crime.district_no = District.district_no WHERE District.district_name = 'Albany Park' AND Crime.location_description = 'APARTMENT' AND Crime.fbi_code_no IN (SELECT FBI_Code.fbi_code_no FROM FBI_Code WHERE FBI_Code.title = 'Criminal Sexual Abuse') AND Crime.arrest = true;
SELECT latitude, longitude FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE Community_Area.community_area_name = 'Rogers Park' AND FBI_Code.title = 'Robbery' AND FBI_Code.fbi_code_no = 3 GROUP BY latitude, longitude ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM Crime JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE IUCR.secondary_description = 'SOLICIT ON PUBLIC WAY' AND IUCR.primary_description = 'PROSTITUTION' AND Crime.arrest = 'TRUE' AND Community_Area.community_area_name = 'West Garfield Park';
SELECT COUNT(*) FROM Crime WHERE domestic = 'TRUE' AND location_description = 'BAR OR TAVERN' AND ward_no = (     SELECT ward_no     FROM Ward     WHERE Population = (         SELECT MAX(Population)         FROM Ward     ) );
SELECT COUNT(*) FROM Neighborhood WHERE community_area_no IN (     SELECT community_area_no     FROM Community_Area     WHERE community_area_name = 'Near North Side' );
SELECT COUNT(*) FROM Crime WHERE domestic = 'TRUE' AND arrest = 'TRUE' AND ward_no IN (     SELECT ward_no     FROM Ward     WHERE alderman_first_name = 'Walter' AND alderman_last_name = 'Burnett' AND alderman_name_suffix = 'Jr.' );
SELECT T3.title FROM Crime AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no JOIN FBI_Code AS T3 ON T1.fbi_code_no = T3.fbi_code_no WHERE T2.population = (SELECT MIN(population) FROM Community_Area) GROUP BY T3.fbi_code_no ORDER BY COUNT(T1.report_no) DESC LIMIT 1;
SELECT W.ward_office_address FROM Ward W JOIN Crime C ON W.ward_no = C.ward_no WHERE C.block = '010XX W LAKE ST';
SELECT T1.community_area_name FROM Community_Area AS T1 JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no JOIN IUCR AS T3 ON T2.iucr_no = T3.iucr_no WHERE T3.primary_description = 'PROSTITUTION' GROUP BY T1.community_area_name ORDER BY COUNT(T2.case_number) DESC LIMIT 1;
SELECT COUNT(*) FROM Crime JOIN Ward ON Crime.ward_no = Ward.ward_no WHERE Crime.iucr_no IN (SELECT IUCR.iucr_no FROM IUCR WHERE IUCR.primary_description = 'CRIMINAL DAMAGE' AND IUCR.secondary_description = 'VANDALISM') AND Crime.arrest = 'TRUE' AND Ward.alderman_first_name = 'Edward' AND Ward.alderman_last_name = 'Burke';
SELECT COUNT(*) FROM Crime WHERE domestic = 'TRUE' AND date LIKE '5/%/2018%';
SELECT iucr_no, index_code FROM IUCR WHERE primary_description = 'HOMICIDE';
SELECT commander, email FROM District WHERE district_name = 'Chicago Lawn';
SELECT T1.alderman_first_name, T1.alderman_last_name, T1.alderman_name_suffix FROM Ward AS T1 JOIN (SELECT ward_no, MAX(Population) as max_population FROM Ward) AS T2 ON T1.ward_no = T2.ward_no;
SELECT community_area_name FROM Community_Area WHERE side = 'Northwest';
SELECT T1.title, T1.description FROM FBI_Code AS T1 JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.crime_against = 'Persons';
SELECT T1.secondary_description, T2.latitude, T2.longitude FROM IUCR AS T1 JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.iucr_no = 142;
SELECT COUNT(*) FROM Crime JOIN Ward ON Crime.ward_no = Ward.ward_no WHERE Ward.alderman_first_name = 'Brendan' AND Ward.alderman_last_name = 'Reilly' AND Crime.date LIKE '10/7/2018%';
SELECT COUNT(*) FROM Crime JOIN District ON Crime.district_no = District.district_no WHERE Crime.arrest = 'TRUE' AND District.district_name = 'Englewood' AND Crime.location_description = 'RESTAURANT';
SELECT C.case_number, W.alderman_first_name, W.alderman_last_name, W.alderman_name_suffix, D.district_name FROM Crime AS C JOIN Ward AS W ON C.ward_no = W.ward_no JOIN District AS D ON C.district_no = D.district_no WHERE C.block = '0000X N FRANCISCO AVE';
SELECT COUNT(*) FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE FBI_Code.title = 'Misc Non-Index Offense';
SELECT T2.neighborhood_name FROM Community_Area AS T1 JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE T1.community_area_name = 'Douglas';
SELECT COUNT(T2.report_no) / 12.0 AS avg_crime_rate_per_month FROM Community_Area T1 JOIN Crime T2 ON T1.community_area_no = T2.community_area_no WHERE T1.population = (SELECT MAX(population) FROM Community_Area) GROUP BY T1.community_area_no
SELECT     (COUNT(CASE WHEN FBI_Code.title = 'Larceny' THEN Crime.report_no END) * 100.0 / COUNT(Crime.report_no)) AS Larceny_Percentage FROM     Crime JOIN     Community_Area ON Crime.community_area_no = Community_Area.community_area_no JOIN     FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE     Community_Area.side = 'Central';
SELECT T5.location_description, T6.alderman_first_name, T6.alderman_last_name, T6.alderman_name_suffix FROM IUCR AS T4 JOIN Crime AS T5 ON T4.iucr_no = T5.iucr_no JOIN Ward AS T6 ON T5.ward_no = T6.ward_no WHERE T4.primary_description = 'ARSON' AND T4.secondary_description = 'BY EXPLOSIVE';
SELECT T1.date, T1.latitude, T1.longitude FROM Crime AS T1 JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.primary_description = 'DECEPTIVE PRACTICE' AND T2.secondary_description = 'UNLAWFUL USE OF RECORDED SOUND'
SELECT COUNT(*) FROM Crime JOIN District ON Crime.district_no = District.district_no JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE District.commander = 'Adnardo Gutierrez' AND IUCR.primary_description = 'CRIMINAL SEXUAL ASSAULT' AND Crime.location_description = 'RESIDENCE';
SELECT (COUNT(CASE WHEN C.arrest = 'TRUE' THEN C.report_no END) * 100.0 / COUNT(C.report_no)) FROM Crime AS C JOIN Community_Area AS CA ON C.community_area_no = CA.community_area_no WHERE C.domestic = 'TRUE' AND CA.community_area_name = 'West Pullman';
SELECT     (COUNT(CASE WHEN C.domestic = 'TRUE' THEN C.report_no END) * 100.0 / COUNT(C.report_no)) AS domestic_violence_percentage,     GROUP_CONCAT(C.report_no) AS report_numbers_in_bank FROM     Crime C JOIN     Ward W ON C.ward_no = W.ward_no WHERE     W.alderman_first_name = 'Christopher' AND W.alderman_last_name = 'Taliaferro'     AND C.location_description = 'BANK';
SELECT COUNT(*) FROM Ward WHERE alderman_first_name = 'James';
SELECT COUNT(*) FROM Crime WHERE date LIKE '1/1/2018%';
SELECT AVG(population) FROM Community_Area WHERE side = 'West';
SELECT C.report_no FROM Crime C JOIN Ward W ON C.ward_no = W.ward_no JOIN Community_Area CA ON C.community_area_no = CA.community_area_no WHERE W.alderman_first_name = 'Edward' AND W.alderman_last_name = 'Burke' AND CA.population = (SELECT MAX(population) FROM Community_Area) ORDER BY C.beat DESC LIMIT 1;
SELECT COUNT(*) FROM Crime WHERE location_description = 'STREET' AND fbi_code_no IN (     SELECT fbi_code_no     FROM FBI_Code     WHERE title = 'Homicide 1st & 2nd Degree' );
SELECT W.alderman_first_name, W.alderman_last_name FROM Ward AS W JOIN Crime AS C ON W.ward_no = C.ward_no WHERE C.report_no = 23769;
SELECT T1.case_number FROM Crime AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.community_area_name = 'Lincoln Square' AND T1.domestic = 'TRUE';
SELECT T1.case_number FROM Crime AS T1 JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T2.ward_office_address = '1958 N. Milwaukee Ave.' AND T1.location_description = 'APARTMENT'
SELECT COUNT(*) FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE Community_Area.community_area_name = 'Bridgeport' AND Crime.beat < 1000;
SELECT report_no FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE Community_Area.side = 'Far North' AND Community_Area.population > 60000;
SELECT report_no FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE Community_Area.community_area_name = 'Riverdale' AND FBI_Code.crime_against = 'Property';
SELECT COUNT(*) FROM Crime JOIN Ward ON Crime.ward_no = Ward.ward_no WHERE Ward.ward_email = 'ward13@cityofchicago.org' AND Crime.domestic = 'TRUE';
SELECT T2.address FROM Crime AS T1 JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.case_number = 'JB107731'
SELECT SUM(Crime.beat) FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE Community_Area.side = 'Central' AND Community_Area.population > 50000;
SELECT case_number FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE FBI_Code.crime_against = 'Society' AND Crime.date LIKE '6/%/2018%';
SELECT     (COUNT(CASE WHEN domestic = 'TRUE' THEN 1 END) * 100.0 / COUNT(domestic)) AS Domestic_Violence_Percentage FROM     Crime WHERE     community_area_no = (         SELECT             community_area_no         FROM             Community_Area         WHERE             population = (                 SELECT                     MAX(population)                 FROM                     Community_Area             )     );
SELECT T1.case_number FROM Crime AS T1 JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T2.Population < 52000 AND T1.beat > (SELECT AVG(T3.beat) * 0.9 FROM Crime AS T3)
SELECT community_area_name FROM Community_Area WHERE side = 'Far North' AND population BETWEEN 50000 AND 70000;
SELECT latitude, longitude FROM Crime WHERE location_description = 'ALLEY' AND arrest = 'TRUE'
SELECT commander, email, phone FROM District WHERE district_name = 'Ogden';
SELECT fbi_code_no, description FROM FBI_Code WHERE title = 'Gambling';
SELECT (COUNT(CASE WHEN T1.index_code = 'I' THEN T1.iucr_no END) * 100.0 / COUNT(T1.iucr_no)) AS severe_percentage FROM IUCR AS T1 JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no;
SELECT location_description, COUNT(case_number) as crime_count FROM Crime JOIN District ON Crime.district_no = District.district_no WHERE District.district_name = 'Austin' GROUP BY location_description ORDER BY crime_count DESC LIMIT 1;
Error: 第 8682 个样本有 3 个SQL。
SELECT community_area_no FROM Crime WHERE location_description = 'STREET' GROUP BY community_area_no ORDER BY COUNT(location_description) DESC LIMIT 1;
SELECT AVG(C.Count) as Average_Reckless_Homicides FROM (     SELECT COUNT(Crime.report_no) as Count, Crime.district_no     FROM Crime     INNER JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no     WHERE IUCR.secondary_description = 'RECKLESS HOMICIDE'     GROUP BY Crime.district_no ) C JOIN District ON C.district_no = District.district_no GROUP BY District.district_name;
SELECT T2.ward_office_address, T2.ward_office_phone FROM Crime AS T1 JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T1.arrest = 'FALSE' GROUP BY T1.ward_no ORDER BY COUNT(T1.report_no) DESC LIMIT 1;
SELECT T1.case_number, T1.latitude, T1.longitude FROM Crime AS T1 JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.secondary_description = 'CHILD ABDUCTION';
SELECT IUCR.secondary_description, COUNT(IUCR.secondary_description) as crime_count FROM Crime JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE Community_Area.side = 'Northwest' GROUP BY IUCR.secondary_description ORDER BY crime_count DESC LIMIT 1;
SELECT community_area_no FROM Crime WHERE domestic = 'TRUE' GROUP BY community_area_no ORDER BY COUNT(*) LIMIT 1;
SELECT     (COUNT(CASE WHEN IUCR.secondary_description LIKE '%CANNABIS%' THEN IUCR.iucr_no END) * 100 / COUNT(IUCR.iucr_no)) AS Percentage_Cannabis_Related FROM     IUCR JOIN     FBI_Code ON IUCR.iucr_no = FBI_Code.iucr_no WHERE     FBI_Code.title = 'Drug Abuse';
SELECT COUNT(T1.case_number) / 28 AS average_crimes_per_day FROM Crime AS T1 JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.date LIKE '2/%/2018' AND T2.index_code = 'N'
SELECT ca.community_area_name, ca.population FROM Community_Area ca JOIN Crime c ON ca.community_area_no = c.community_area_no JOIN IUCR i ON c.iucr_no = i.iucr_no WHERE i.secondary_description = 'SOLICIT FOR PROSTITUTE' GROUP BY ca.community_area_name, ca.population HAVING COUNT(*) > (     SELECT COUNT(*) / COUNT(DISTINCT c2.iucr_no)     FROM Crime c2     JOIN IUCR i2 ON c2.iucr_no = i2.iucr_no     WHERE i2.secondary_description = 'SOLICIT FOR PROSTITUTE' );
SELECT     (COUNT(CASE WHEN FBI_Code.title = 'Disorderly Conduct' THEN Crime.report_no END) * 100.0 / COUNT(Crime.report_no)) AS Percentage FROM     Crime JOIN     FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no JOIN     District ON Crime.district_no = District.district_no WHERE     District.district_name = 'Harrison';
SELECT     (COUNT(CASE WHEN c.secondary_description = 'VEHICULAR HIJACKING' THEN 1 END) / COUNT(DISTINCT d.district_name)) -     (COUNT(CASE WHEN c.secondary_description = 'AGGRAVATED VEHICULAR HIJACKING' THEN 1 END) / COUNT(DISTINCT d.district_name)) FROM     Crime AS cr JOIN     IUCR AS i ON cr.iucr_no = i.iucr_no JOIN     District AS d ON cr.district_no = d.district_no JOIN     (         SELECT             iucr_no,             secondary_description         FROM             IUCR         WHERE             secondary_description IN ('VEHICULAR HIJACKING', 'AGGRAVATED VEHICULAR HIJACKING')     ) AS c ON cr.iucr_no = c.iucr_no;
SELECT COUNT(*) FROM Crime WHERE longitude = -87.72658001;
SELECT C.crime FROM Crime AS C JOIN IUCR AS I ON C.iucr_no = I.iucr_no WHERE I.primary_description = 'NARCOTICS';
SELECT T1.alderman_first_name FROM Ward AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.population > 50000;
SELECT T1.report_no FROM Crime AS T1 JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.title = 'Drug Abuse';
SELECT COUNT(*) FROM Crime JOIN District ON Crime.district_no = District.district_no JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE District.district_name = 'Calumet' AND IUCR.primary_description = 'WEAPON VIOLATION';
SELECT T1.latitude, T1.longitude FROM Crime AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.community_area_name = 'Belmont Cragin';
SELECT COUNT(DISTINCT T3.primary_description) FROM Neighborhood AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no JOIN IUCR AS T3 ON T3.iucr_no = T1.iucr_no WHERE T1.neighborhood_name = 'Hermosa';
SELECT COUNT(*) FROM Crime JOIN District ON Crime.district_no = District.district_no WHERE District.commander = 'Ronald A. Pontecore Jr.' AND Crime.domestic = 'TRUE';
SELECT COUNT(*) FROM Crime JOIN District ON Crime.district_no = District.district_no JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE District.district_name = 'Wentworth' AND FBI_Code.crime_against = 'Society';
SELECT District.phone FROM District JOIN Ward ON District.district_no = Ward.ward_no WHERE Ward.alderman_first_name = 'Emma' AND Ward.alderman_last_name = 'Mitts';
SELECT COUNT(*) FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no WHERE FBI_Code.description = 'The theft of a motor vehicle' AND Community_Area.community_area_name = 'Lake View';
SELECT T2.district_name FROM Crime AS T1 JOIN District AS T2 ON T1.district_no = T2.district_no JOIN IUCR AS T3 ON T1.iucr_no = T3.iucr_no WHERE T3.primary_description = 'INTIMIDATION' GROUP BY T2.district_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T4.primary_description, T4.secondary_description FROM Crime AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no JOIN FBI_Code AS T3 ON T1.fbi_code_no = T3.fbi_code_no JOIN IUCR AS T4 ON T1.iucr_no = T4.iucr_no WHERE T2.community_area_name = 'North Lawndale' AND T1.domestic = 'TRUE' GROUP BY T4.primary_description, T4.secondary_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT W.ward_no, COUNT(C.case_number) as crime_count FROM Ward W JOIN Crime C ON W.ward_no = C.ward_no JOIN IUCR I ON C.iucr_no = I.iucr_no WHERE W.Population > 55000 AND I.primary_description = 'INTIMIDATION' AND I.secondary_description = 'EXTORTION' GROUP BY W.ward_no ORDER BY crime_count DESC LIMIT 1;
SELECT T2.commander FROM IUCR AS T1 JOIN Crime AS T3 ON T1.iucr_no = T3.iucr_no JOIN District AS T2 ON T3.district_no = T2.district_no WHERE T1.secondary_description = 'CRIMINAL SEXUAL ABUSE' GROUP BY T2.commander ORDER BY COUNT(*) DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN T2.domestic = 'FALSE' THEN T1.case_number END) * 100.0 / COUNT(T1.case_number)) AS Percentage FROM     Crime AS T1 JOIN     District AS T2 ON T1.district_no = T2.district_no WHERE     T2.district_name = 'Jefferson Park';
SELECT AVG(W.Population) FROM Ward W JOIN Crime C ON W.ward_no = C.ward_no WHERE C.location_description = 'APARTMENT' AND C.arrest = 'FALSE';
SELECT T1.alderman_first_name, T1.alderman_last_name FROM Ward AS T1 JOIN (     SELECT ward_no, MAX(Population) as max_population     FROM Ward     GROUP BY ward_no ) AS T2 ON T1.ward_no = T2.ward_no ORDER BY T2.max_population DESC LIMIT 5;
SELECT COUNT(*) FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE FBI_Code.crime_against = 'Property'
SELECT COUNT(*) FROM District WHERE zip_code = 60608;
SELECT fbi_code_no, crime_against FROM FBI_Code WHERE title = 'Criminal Sexual Abuse';
SELECT community_area_name FROM Community_Area JOIN Neighborhood ON Community_Area.community_area_no = Neighborhood.community_area_no GROUP BY community_area_name ORDER BY COUNT(Neighborhood.community_area_no) DESC LIMIT 1;
SELECT COUNT(*) FROM Crime WHERE latitude = 41.64820151 AND longitude = -87.54430496 AND iucr_no IN (SELECT iucr_no FROM IUCR WHERE index_code = 'I');
SELECT D.commander FROM District D JOIN Crime C ON D.district_no = C.district_no WHERE C.arrest = 'FALSE' GROUP BY D.commander ORDER BY COUNT(C.report_no) DESC LIMIT 1;
SELECT T1.primary_description, T1.secondary_description FROM IUCR AS T1 JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.location_description = 'AIRCRAFT' GROUP BY T1.iucr_no ORDER BY COUNT(T1.iucr_no) DESC LIMIT 1;
SELECT T1.district_name FROM District AS T1 JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.location_description = 'LIBRARY' AND (T1.district_name = 'Deering' OR T1.district_name = 'Near West') GROUP BY T1.district_name ORDER BY COUNT(T2.district_no) DESC LIMIT 1;
SELECT COUNT(*) FROM Crime JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE IUCR.primary_description = 'BURGLARY' AND IUCR.secondary_description = 'FORCIBLE ENTRY' AND Crime.location_description = 'DAY CARE CENTER' AND Crime.arrest = 'TRUE';
SELECT D.district_name FROM District D JOIN Crime C ON D.district_no = C.district_no WHERE C.domestic = 'TRUE' GROUP BY D.district_name ORDER BY COUNT(C.district_no) DESC LIMIT 1;
SELECT T1.location_description FROM Crime AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.population = (     SELECT MIN(population)     FROM Community_Area ) GROUP BY T1.location_description ORDER BY COUNT(T1.location_description) DESC LIMIT 1;
SELECT COUNT(*) FROM Crime WHERE arrest = 'FALSE';
SELECT T1.latitude, T1.longitude FROM Crime AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no JOIN FBI_Code AS T3 ON T1.fbi_code_no = T3.fbi_code_no WHERE T2.community_area_name = 'Chatham' AND T3.title = 'Simple Assault' GROUP BY T1.latitude, T1.longitude ORDER BY COUNT(T1.latitude) DESC LIMIT 1;
SELECT C.community_area_name FROM Crime AS CR JOIN FBI_Code AS F ON CR.fbi_code_no = F.fbi_code_no JOIN Community_Area AS C ON CR.community_area_no = C.community_area_no WHERE F.description = 'Unlawful taking, carrying, leading, or riding away of property from the possession or constructive possession of another person' AND C.side = 'South' GROUP BY C.community_area_name ORDER BY COUNT(F.fbi_code_no) DESC LIMIT 1;
SELECT COUNT(*) FROM Crime JOIN Community_Area ON Crime.community_area_no = Community_Area.community_area_no JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE Community_Area.community_area_name = 'Englewood' AND FBI_Code.crime_against = 'Society';
WITH FraudIncidents AS (   SELECT     location_description,     COUNT(report_no) as num_incidents   FROM     Crime c   JOIN     FBI_Code f ON c.fbi_code_no = f.fbi_code_no   WHERE     f.title = 'Fraud' AND     SUBSTR(c.date, 1, 1) = '1' AND     SUBSTR(c.date, 5, 4) = '2018'   GROUP BY     location_description ), MaxIncidents AS (   SELECT     MAX(num_incidents) as max_num_incidents   FROM     FraudIncidents ) SELECT   location_description as location_with_majority,   CAST(COUNT(report_no) / 4.0 AS DECIMAL) as weekly_avg FROM   FraudIncidents JOIN   MaxIncidents WHERE   FraudIncidents.num_incidents = MaxIncidents.max_num_incidents;
SELECT community_area_name FROM Community_Area WHERE population > 50000 LIMIT 3;
SELECT community_area_name FROM Community_Area WHERE side = 'Central';
SELECT     (SELECT COUNT(community_area_no) FROM Community_Area WHERE side = 'South' AND population > 30000) -     (SELECT COUNT(community_area_no) FROM Community_Area WHERE side = 'North' AND population > 30000) AS difference;
SELECT phone, fax, tty, twitter FROM District WHERE district_name = 'Near West';
SELECT commander FROM District WHERE district_name = 'Lincoln';
SELECT T1.primary_description, T1.secondary_description FROM IUCR AS T1 WHERE T1.iucr_no = 275;
SELECT     (COUNT(CASE WHEN IUCR.primary_description = 'CRIME SEXUAL ASSAULT' THEN IUCR.iucr_no END) * 100.0 / COUNT(IUCR.iucr_no)) AS percentage_severe_cases_sexual_assault FROM     IUCR WHERE     IUCR.index_code = 'I';
SELECT n.neighborhood_name FROM Neighborhood n JOIN Community_Area c ON n.community_area_no = c.community_area_no WHERE c.community_area_name = 'North Center';
SELECT COUNT(*) FROM Neighborhood WHERE community_area_no = (SELECT community_area_no FROM Community_Area WHERE community_area_name = 'Forest Glen');
SELECT SUM(Neighborhood.population) FROM Neighborhood WHERE Neighborhood.neighborhood_name IN ('Avondale Gardens', 'Irving Park', 'Kilbourn Park', 'Merchant Park', 'Old Irving Park', 'The Villa');
SELECT COUNT(report_no) FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE FBI_Code.title = 'Weapons Violation';
SELECT case_number FROM Crime WHERE fbi_code_no IN (SELECT fbi_code_no FROM FBI_Code WHERE title = 'Criminal Sexual Assault' AND crime_against = 'Persons') AND arrest = 'TRUE' LIMIT 3;
SELECT T2.district_name FROM Crime AS T1 JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T1.case_number = 'JB106545'
SELECT T1.primary_description FROM IUCR AS T1 JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.case_number = 'JB106010';
SELECT community_area_name FROM Community_Area WHERE community_area_no IN (     SELECT community_area_no     FROM Crime     WHERE fbi_code_no IN (         SELECT fbi_code_no         FROM FBI_Code         WHERE title = 'Fraud'     )     GROUP BY community_area_no     LIMIT 3 );
SELECT T3.title FROM Crime AS T1 JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no JOIN FBI_Code AS T3 ON T1.fbi_code_no = T3.fbi_code_no WHERE T2.community_area_name = 'Rogers Park' GROUP BY T3.title ORDER BY COUNT(*) DESC LIMIT 1;
SELECT D.district_name FROM Crime C JOIN District D ON C.district_no = D.district_no WHERE C.case_number = 'JB120039' GROUP BY D.district_name HAVING COUNT(C.case_number) > 1;
SELECT     (COUNT(CASE WHEN C.location_description = 'STREET' THEN C.fbi_code_no END) * 100.0 / COUNT(C.fbi_code_no)) AS Percentage FROM     Crime AS C JOIN     FBI_Code AS F ON C.fbi_code_no = F.fbi_code_no WHERE     F.title = 'Drug Abuse';
SELECT ward_no FROM Ward ORDER BY Population DESC LIMIT 1;
SELECT beat, location_description FROM Crime WHERE case_number = 'JB112212';
SELECT fbi_code_no FROM FBI_Code WHERE description = "The killing of one human being by another.";
SELECT T1.ward_office_address FROM Ward AS T1 JOIN Crime AS T2 ON T1.ward_no = T2.ward_no JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.community_area_name = 'Montclare' LIMIT 5;
SELECT D.commander FROM Crime C JOIN District D ON C.district_no = D.district_no WHERE C.beat = 532 AND C.location_description = 'YARD';
SELECT N.neighborhood_name FROM Neighborhood N JOIN Community_Area C ON N.community_area_no = C.community_area_no WHERE C.community_area_name = 'Lake View';
SELECT N.neighborhood_name FROM Neighborhood N JOIN Crime C ON N.community_area_no = C.community_area_no WHERE C.report_no = 23843;
SELECT T1.description FROM FBI_Code AS T1 JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.report_no = 23778;
SELECT T3.report_no FROM District AS T1 JOIN Crime AS T3 ON T1.district_no = T3.district_no WHERE T1.commander = 'Jill M. Stevens';
SELECT     (COUNT(CASE WHEN C.location_description = 'HOUSE' THEN C.report_no END) * 100.0 / COUNT(C.report_no)) AS Percentage FROM     Crime C JOIN     Neighborhood N ON C.community_area_no = N.community_area_no WHERE     N.neighborhood_name = 'Avalon Park';
SELECT alderman_first_name, alderman_last_name, alderman_name_suffix FROM Ward WHERE ward_no = 21;
SELECT ward_no FROM Ward ORDER BY Population DESC LIMIT 1;
SELECT COUNT(*) FROM Crime JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE IUCR.primary_description = 'ASSAULT';
SELECT COUNT(*) FROM Crime JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE IUCR.index_code = 'I';
SELECT COUNT(*) FROM Crime JOIN Ward ON Crime.ward_no = Ward.ward_no WHERE Ward.alderman_first_name = 'Pat' AND Ward.alderman_last_name = 'Dowell' AND Crime.arrest = 'FALSE';
SELECT T1.alderman_first_name, T1.alderman_last_name, T1.alderman_name_suffix FROM Ward AS T1 JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE Substr(T2.date, 1, 1) = '1' AND Substr(T2.date, 5, 4) = '2018' GROUP BY T1.ward_no ORDER BY COUNT(T1.ward_no) DESC LIMIT 1;
SELECT COUNT(*) FROM Crime WHERE domestic = 'TRUE' AND ward_no = (     SELECT ward_no     FROM Ward     WHERE Population = (         SELECT MAX(Population)         FROM Ward     ) );
SELECT C.latitude, C.longitude FROM Crime C JOIN Ward W ON C.ward_no = W.ward_no WHERE W.alderman_first_name = 'Pat' AND W.alderman_last_name = 'Dowell';
SELECT T1.alderman_first_name, T1.alderman_last_name, Count(T2.ward_no) as incident_count FROM Ward AS T1 JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE Substr(T2.date, 1, 1) = '1' AND Substr(T2.date, 5, 4) = '2018' AND (T1.alderman_first_name = 'Pat' AND T1.alderman_last_name = 'Dowell' OR T1.alderman_first_name = 'Sophia' AND T1.alderman_last_name = 'King') GROUP BY T1.ward_no ORDER BY incident_count DESC LIMIT 1
SELECT case_number FROM Crime WHERE iucr_no IN (SELECT iucr_no FROM IUCR WHERE primary_description = 'BATTERY');
SELECT COUNT(*) FROM Crime JOIN IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE IUCR.primary_description = 'BATTERY' AND Crime.arrest = 'FALSE';
SELECT T1.case_number FROM Crime AS T1 JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.title = 'Homicide 1st & 2nd Degree'
SELECT COUNT(*) FROM Crime JOIN FBI_Code ON Crime.fbi_code_no = FBI_Code.fbi_code_no WHERE Substr(Crime.date, 1, 1) = '1' AND Substr(Crime.date, 5, 4) = '2018' AND FBI_Code.crime_against = 'Property'
SELECT COUNT(*) FROM Crime JOIN District ON Crime.district_no = District.district_no WHERE District.commander = 'Robert A. Rubio' AND SUBSTR(Crime.date, 1, 1) = '1' AND SUBSTR(Crime.date, 5, 4) = '2018';
SELECT T2.commander FROM Crime AS T1 JOIN District AS T2 ON T1.district_no = T2.district_no WHERE Substr(T1.date, 1, 1) = '1' AND Substr(T1.date, 5, 4) = '2018' GROUP BY T2.commander HAVING T2.commander IN ('Robert A. Rubio', 'Glenn White') ORDER BY COUNT(T1.ward_no) DESC LIMIT 1;
SELECT DISTINCT C.block FROM Crime C JOIN District D ON C.district_no = D.district_no WHERE D.commander = 'Robert A. Rubio';
SELECT COUNT(*) / 12 AS Average_Incidents_Per_Month FROM Crime WHERE date LIKE '%2018%' AND ward_no = (     SELECT ward_no     FROM Ward     WHERE Population = (         SELECT MAX(Population)         FROM Ward     ) );
SELECT     (COUNT(CASE WHEN IUCR.primary_description = 'BATTERY' THEN IUCR.iucr_no END) * 100.0 / COUNT(IUCR.iucr_no)) AS Battery_Percentage FROM     Crime JOIN     IUCR ON Crime.iucr_no = IUCR.iucr_no WHERE     Crime.arrest = 'FALSE';
SELECT COUNT(*) FROM businesses WHERE owner_state = 'CA';
SELECT COUNT(*) FROM inspections WHERE score = 100;
SELECT COUNT(*) FROM inspections WHERE YEAR(date) = 2016 AND type = 'Routine - Unscheduled';
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = 100 GROUP BY b.name;
SELECT COUNT(DISTINCT b.business_id) FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE YEAR(i.date) = 2016 AND b.city IN ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO');
SELECT type FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.name = 'Tiramisu Kitchen' AND inspections.date = '2014-01-14';
SELECT COUNT(*) FROM violations WHERE business_id = (SELECT business_id FROM businesses WHERE name = 'Tiramisu Kitchen') AND date = '2014-01-14' AND risk_category = 'Low Risk';
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'Low Risk' AND YEAR(v.date) = 2014;
SELECT violations.description FROM violations JOIN businesses ON violations.business_id = businesses.business_id WHERE businesses.name = 'Tiramisu Kitchen' AND violations.date = '2014-01-14' AND violations.risk_category = 'Low Risk';
SELECT violations.description FROM violations JOIN businesses ON violations.business_id = businesses.business_id WHERE businesses.name = 'Tiramisu Kitchen' AND violations.risk_category = 'High Risk';
SELECT COUNT(*) FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.name = 'Tiramisu Kitchen' AND inspections.type = 'Routine - Unscheduled';
SELECT COUNT(*) FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.name = 'Tiramisu Kitchen' AND inspections.type = 'Routine - Unscheduled' AND inspections.score > 70;
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE b.name IN ('Tiramisu Kitchen', 'OMNI S.F. Hotel - 2nd Floor Pantry') AND v.risk_category = 'Low Risk' GROUP BY b.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM violations WHERE business_id IN (     SELECT business_id     FROM businesses     WHERE city IN ('San Francisco', 'SF', 'S.F.', 'SAN FRANCISCO') ) AND risk_category = 'High Risk';
SELECT b.name, COUNT(v.risk_category) AS high_risk_violations FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High Risk' GROUP BY b.name ORDER BY high_risk_violations DESC LIMIT 1;
SELECT AVG(score) FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE name = 'Tiramisu Kitchen';
SELECT business_id FROM inspections GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1;
SELECT business_id FROM violations GROUP BY business_id ORDER BY COUNT(business_id) DESC LIMIT 1;
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = 100 AND i.type = 'Routine - Unscheduled' AND i.date = '2016-09-28';
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High' GROUP BY b.business_id, b.name ORDER BY COUNT(v.business_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT v.violation_type_id) FROM violations v JOIN businesses b ON v.business_id = b.business_id WHERE b.name = 'Stacks Restaurant' AND v.date = '2016-10-04';
SELECT violations.description FROM violations JOIN businesses ON violations.business_id = businesses.business_id WHERE businesses.name = 'Chez Fayala, Inc.' AND violations.risk_category = 'Moderate Risk' AND violations.date = '2016-07-01';
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.type = 'Routine - Unscheduled' AND i.date = '2016-09-26' ORDER BY i.score LIMIT 1;
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.type = 'Complaint' GROUP BY b.business_id ORDER BY COUNT(i.business_id) DESC LIMIT 1;
SELECT COUNT(*) FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.name = 'Soma Restaurant And Bar' AND inspections.type = 'Routine - Unscheduled';
SELECT b.address FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'Low Risk' GROUP BY b.address ORDER BY COUNT(v.business_id) DESC LIMIT 1;
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'Low Risk' AND v.description = 'Permit license or inspection report not posted' ORDER BY v.date LIMIT 1;
SELECT i.business_id, COUNT(*) as inspection_count FROM inspections i WHERE i.business_id = (     SELECT v.business_id     FROM (         SELECT business_id, COUNT(*) as violation_count         FROM violations         GROUP BY business_id         ORDER BY violation_count DESC         LIMIT 1     ) v ) GROUP BY i.business_id;
SELECT COUNT(*) FROM violations WHERE business_id = (SELECT business_id FROM businesses WHERE business_certificate = 304977) AND date = '2013-10-07';
SELECT AVG(i.score) FROM inspections i JOIN businesses b ON i.business_id = b.business_id WHERE b.name = 'Chairman Bao' AND i.type = 'Routine - Unscheduled';
SELECT     (COUNT(CASE WHEN v.risk_category = 'Moderate Risk' THEN 1 END) * 100.0 / COUNT(v.business_id)) AS percentage FROM     violations v JOIN     businesses b ON v.business_id = b.business_id WHERE     b.name = 'Melody Lounge';
SELECT COUNT(*) FROM businesses WHERE city = 'HAYWARD';
SELECT COUNT(*) FROM inspections WHERE score <= 50;
SELECT COUNT(business_id) FROM businesses WHERE application_date BETWEEN '2012-01-01' AND '2012-12-31';
SELECT COUNT(*) FROM inspections WHERE type = 'Foodborne Illness Investigation' AND date BETWEEN '2014-01-01' AND '2014-12-31';
SELECT COUNT(*) FROM (   SELECT owner_name   FROM businesses   GROUP BY owner_name   HAVING COUNT(business_id) >= 5 )
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = 100 AND YEAR(i.date) = 2013 GROUP BY b.name;
SELECT b.city, COUNT(*) AS num_establishments FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High Risk' AND YEAR(v.date) = 2016 GROUP BY b.city ORDER BY num_establishments DESC LIMIT 1;
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = (SELECT MIN(score) FROM inspections)
SELECT COUNT(*) FROM violations WHERE business_id = (SELECT business_id FROM businesses WHERE name = 'Tiramisu Kitchen') AND risk_category = 'High Risk';
SELECT COUNT(*) FROM (   SELECT i.business_id   FROM inspections i   JOIN businesses b ON i.business_id = b.business_id   WHERE b.tax_code = 'H24' AND i.type = 'Complaint'   GROUP BY i.business_id   HAVING COUNT(i.business_id) >= 5 ) AS subquery;
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.description = 'Contaminated or adulterated food' AND YEAR(v.date) = 2013;
SELECT COUNT(*) FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.postal_code = '94102' AND inspections.score >= 90 AND YEAR(inspections.date) = 2015;
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score >= 90 AND YEAR(i.date) BETWEEN 2015 AND 2018 GROUP BY b.business_id HAVING COUNT(DISTINCT YEAR(i.date)) = 4;
SELECT AVG(i.score) FROM inspections i JOIN businesses b ON i.business_id = b.business_id WHERE b.owner_name = 'Yiu Tim Chan' AND b.address = '808 Pacific Ave' AND b.city = 'San Francisco' AND YEAR(i.date) BETWEEN 2014 AND 2016;
SELECT AVG(i.score) FROM inspections i JOIN businesses b ON i.business_id = b.business_id WHERE b.owner_name = (     SELECT owner_name     FROM businesses     GROUP BY owner_name     ORDER BY COUNT(business_id) DESC     LIMIT 1 );
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'Low Risk' AND YEAR(v.date) = 2014 GROUP BY b.business_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT b.owner_name FROM (   SELECT owner_name, COUNT(business_id) as num_businesses   FROM businesses b   GROUP BY owner_name   ORDER BY num_businesses DESC   LIMIT 5 ) as top_owners JOIN businesses b ON b.owner_name = top_owners.owner_name JOIN violations v ON b.business_id = v.business_id AND v.risk_category = 'High Risk' GROUP BY top_owners.owner_name ORDER BY COUNT(v.business_id) DESC LIMIT 1;
SELECT b.name, AVG(i.score) as average_score FROM businesses b JOIN inspections i ON b.business_id = i.business_id GROUP BY i.business_id ORDER BY COUNT(i.business_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT business_id) FROM inspections WHERE score = 100 AND YEAR(date) = 2013;
SELECT business_id FROM inspections WHERE type = 'Structural Inspection' AND YEAR(date) = 2016 AND MONTH(date) = 2;
SELECT COUNT(*) FROM violations WHERE risk_category = 'Low Risk' AND description = 'Unpermitted food facility';
SELECT businesses.business_id, violations.risk_category, violations.description FROM businesses JOIN violations ON businesses.business_id = violations.business_id WHERE violations.violation_type_id = '103101';
SELECT i.date FROM inspections i JOIN businesses b ON i.business_id = b.business_id WHERE b.owner_city = 'San Bruno' AND i.score = 100 ORDER BY i.date DESC LIMIT 1;
SELECT inspections.type, violations.description FROM inspections JOIN violations ON inspections.business_id = violations.business_id JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.name = 'ART's CAFÉ' AND violations.risk_category = 'Moderate Risk';
SELECT violations.violation_type_id, violations.description FROM violations JOIN businesses ON violations.business_id = businesses.business_id WHERE businesses.name = 'STARBUCKS' AND violations.risk_category = 'High Risk';
SELECT inspections.date, inspections.score, inspections.type FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.tax_code = 'AA';
SELECT businesses.business_id, businesses.name, businesses.address FROM businesses JOIN inspections ON businesses.business_id = inspections.business_id WHERE inspections.date = '2016-07-30';
SELECT violations.date, violations.risk_category, violations.description, businesses.name FROM violations JOIN businesses ON violations.business_id = businesses.business_id WHERE businesses.owner_name = 'Jade Chocolates LLC';
SELECT businesses.name, violations.risk_category, violations.description FROM violations JOIN businesses ON violations.business_id = businesses.business_id WHERE violations.violation_type_id = 103111;
SELECT b.name, b.city, b.tax_code FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.date = '2014-06-03' AND v.risk_category = 'High Risk' LIMIT 5;
SELECT i.type FROM inspections i JOIN businesses b ON i.business_id = b.business_id WHERE b.name = 'El Aji Peruvian Restaurant' ORDER BY i.score DESC LIMIT 1;
SELECT b.owner_name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High Risk' AND v.description = 'Improper cooking time or temperatures';
SELECT b.name, b.address FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.date = '2015-02-02' AND i.type = 'Reinspection/Followup';
SELECT b.name, b.business_certificate FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score < 50;
SELECT COUNT(*) FROM businesses WHERE address = '1825 POST St #223' AND city = 'San Francisco';
SELECT owner_name FROM businesses WHERE owner_zip = '94104';
SELECT COUNT(*) FROM businesses WHERE tax_code = 'H25';
SELECT COUNT(*) FROM violations WHERE YEAR(date) = 2014 AND risk_category = 'Low Risk';
SELECT businesses.business_id, violations.risk_category FROM businesses JOIN violations ON businesses.business_id = violations.business_id WHERE businesses.owner_name = 'San Francisco Madeleine, Inc.';
SELECT b.owner_name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.score = 100;
SELECT COUNT(DISTINCT b.business_id) FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE b.postal_code = '94117' AND v.risk_category = 'High Risk';
SELECT violations.violation_type_id, violations.risk_category FROM violations INNER JOIN inspections ON violations.business_id = inspections.business_id WHERE inspections.score BETWEEN 70 AND 80;
SELECT b.tax_code, i.type FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE b.name = 'Rue Lepic';
SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id JOIN inspections i ON b.business_id = i.business_id WHERE v.violation_type_id = 103157 AND v.date = '2016-05-27' AND i.type = 'Routine - Unscheduled';
SELECT b.owner_name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High Risk' AND v.violation_type_id = 103109 AND v.description = 'Unclean or unsanitary food contact surfaces';
SELECT b.name FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE b.owner_city = 'Cameron Park' AND i.score = 100;
SELECT violations.violation_type_id FROM violations JOIN businesses ON violations.business_id = businesses.business_id WHERE violations.business_id BETWEEN 30 AND 50 AND businesses.address = '747 IRVING St' AND businesses.city = 'San Francisco';
SELECT b.owner_name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.violation_type_id = 103156 AND v.date = '2014-06-12';
SELECT i.type FROM inspections i JOIN businesses b ON i.business_id = b.business_id WHERE b.owner_address = '500 California St, 2nd Floor' AND b.owner_city = 'SAN FRANCISCO' GROUP BY i.type ORDER BY AVG(i.score) DESC LIMIT 1;
SELECT COUNT(*) FROM violations JOIN inspections ON violations.business_id = inspections.business_id AND violations.date = inspections.date WHERE YEAR(inspections.date) = 2016 AND inspections.type = 'Routine - Unschedule';
SELECT b.name, v.risk_category FROM businesses b JOIN inspections i ON b.business_id = i.business_id JOIN violations v ON b.business_id = v.business_id WHERE i.score > (SELECT AVG(score)*0.8 FROM inspections) GROUP BY b.name, v.risk_category;
SELECT     (COUNT(CASE WHEN v.risk_category = 'Low Risk' THEN b.business_id END) * 100.0 / COUNT(b.business_id)) AS percentage FROM     businesses b JOIN     inspections i ON b.business_id = i.business_id JOIN     violations v ON b.business_id = v.business_id WHERE     i.score < 95 AND b.postal_code = 94110;
SELECT DISTINCT b.state FROM breweries b JOIN beers be ON b.id = be.brewery_id ORDER BY be.ibu LIMIT 1;
SELECT b.name AS brewery_name, b.city FROM breweries b JOIN beers c ON b.id = c.brewery_id WHERE b.state = 'New York' ORDER BY c.ibu DESC LIMIT 1;
SELECT AVG(abv * (12/ounces)) FROM beers JOIN breweries ON beers.brewery_id = breweries.id WHERE breweries.name = 'Boston Beer Company';
SELECT     (COUNT(CASE WHEN b.style = 'American Adjunct Lager' THEN b.id END) / COUNT(b.id)) * 100 AS Percentage FROM     breweries br JOIN     beers b ON br.id = b.brewery_id WHERE     br.name = 'Stevens Point Brewery';
SELECT     b1.city,     b1.state,     b1.name AS most_bitter_beer,     b1.ibu AS highest.ibu,     b2.name AS least_bitter_beer,     b2.ibu AS lowest.ibu,     b1.ibu - b2.ibu AS bitterness_difference FROM     (SELECT         city,         state,         name,         ibu      FROM          beers      JOIN          breweries ON beers.brewery_id = breweries.id      ORDER BY          ibu DESC      LIMIT 1) b1,     (SELECT         city,         state,         name,         ibu      FROM          beers      JOIN          breweries ON beers.brewery_id = breweries.id      ORDER BY          ibu ASC      LIMIT 1) b2;
SELECT     (COUNT(b1.id) * 100.0 / COUNT(b2.id)) AS percentage_wisconsin_blonde_ales FROM     breweries b1 JOIN     beers b ON     b.brewery_id = b1.id WHERE     b.style = 'American Blonde Ale' AND b1.state = 'Wisconsin' CROSS JOIN     (SELECT COUNT(id) as total_breweries FROM breweries b2 JOIN beers b3 ON b3.brewery_id = b2.id WHERE b3.style = 'American Blonde Ale') subquery;
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.total_fat = (SELECT MAX(total_fat) FROM Nutrition);
SELECT (r.total_fat - r.sat_fat) AS unsaturated_fat FROM Nutrition r JOIN Recipe rp ON r.recipe_id = rp.recipe_id WHERE rp.title = 'Raspberry Chiffon Pie';
SELECT title FROM Recipe WHERE recipe_id IN (     SELECT recipe_id     FROM Nutrition     WHERE sodium < 5 );
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.iron > 20;
SELECT title FROM Recipe JOIN Nutrition ON Recipe.recipe_id = Nutrition.recipe_id WHERE (title = 'Raspberry Chiffon Pie' OR title = 'Fresh Apricot Bavarian') ORDER BY vitamin_c DESC LIMIT 1;
SELECT R.title FROM Recipe R JOIN Nutrition N ON R.recipe_id = N.recipe_id WHERE R.prep_min > 10 ORDER BY N.calories DESC LIMIT 1;
SELECT Nutrition.calories FROM Nutrition JOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id WHERE Recipe.title = 'Raspberry Chiffon Pie';
SELECT optional FROM Quantity JOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id JOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id WHERE name = 'graham cracker crumbs' AND title = 'Raspberry Chiffon Pie';
SELECT COUNT(*) FROM Quantity q JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE r.title = 'Raspberry Chiffon Pie' AND q.max_qty = q.min_qty;
SELECT I.name FROM Ingredient I JOIN Quantity Q ON I.ingredient_id = Q.ingredient_id JOIN Recipe R ON Q.recipe_id = R.recipe_id WHERE R.title = 'Raspberry Chiffon Pie' AND Q.preparation IS NULL;
SELECT COUNT(*) FROM Recipe JOIN Quantity ON Recipe.recipe_id = Quantity.recipe_id JOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id WHERE Ingredient.name = 'graham cracker crumbs';
SELECT MIN(q.min_qty) FROM Quantity q JOIN Ingredient i ON q.ingredient_id = i.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE i.name = 'graham cracker crumbs' AND r.title = 'Raspberry Chiffon Pie' AND q.unit = 'cups';
SELECT (N.calories * N.pcnt_cal_fat / 100) AS calories_from_fat FROM Nutrition N JOIN Recipe R ON N.recipe_id = R.recipe_id WHERE R.title = 'Raspberry Chiffon Pie';
SELECT AVG(N.calories) FROM Nutrition N JOIN Recipe R ON N.recipe_id = R.recipe_id WHERE R.source = 'Produce for Better Health Foundation and 5 a Day';
SELECT Nutrition.calories FROM Nutrition JOIN Recipe ON Nutrition.recipe_id = Recipe.recipe_id WHERE Recipe.title = 'turkey tenderloin bundles';
SELECT q.min_qty FROM Quantity q JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = '1% lowfat milk' AND q.recipe_id = 1436 AND q.max_qty = q.min_qty;
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.total_fat = (SELECT MAX(total_fat) FROM Nutrition);
SELECT COUNT(*) FROM Quantity q JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'seedless red grapes';
SELECT i.name FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id WHERE q.recipe_id = 1397 AND q.optional = 'TRUE';
SELECT r.title FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'frozen raspberries in light syrup' AND q.max_qty = q.min_qty ORDER BY q.max_qty DESC LIMIT 1;
SELECT i.name, COUNT(*) as usage_count FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id GROUP BY i.ingredient_id, i.name ORDER BY usage_count DESC LIMIT 1;
SELECT q.preparation FROM Quantity q JOIN Ingredient i ON q.ingredient_id = i.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE i.name = 'apple juice' AND r.title = 'raspberry-pear couscous cake';
SELECT SUM(q.min_qty) FROM Quantity q JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'almonds' AND q.unit = 'cups' AND q.recipe_id IN (     SELECT r.recipe_id     FROM Recipe r     WHERE r.title = 'chicken pocket sandwich' );
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.vitamin_c = (SELECT MAX(vitamin_c) FROM Nutrition);
SELECT T3.vitamin_a FROM Recipe AS T1 JOIN Nutrition AS T3 ON T1.recipe_id = T3.recipe_id WHERE T1.title = 'Sherried Beef';
SELECT r.title FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id GROUP BY r.recipe_id, r.title ORDER BY COUNT(DISTINCT q.ingredient_id) DESC LIMIT 1;
SELECT     SUM(CASE WHEN r.title = 'Lasagne-Spinach Spirals' THEN n.sodium ELSE 0 END) /     SUM(CASE WHEN r.title = 'Beef and Spinach Pita Pockets' THEN n.sodium ELSE 0 END) AS sodium_ratio FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id
SELECT AVG(N.calories) FROM Nutrition N JOIN Recipe R ON N.recipe_id = R.recipe_id JOIN Quantity Q ON R.recipe_id = Q.recipe_id JOIN Ingredient I ON Q.ingredient_id = I.ingredient_id WHERE I.name = 'coarsely ground black pepper';
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.iron > 20;
SELECT COUNT(*) FROM Quantity q JOIN Ingredient i ON q.ingredient_id = i.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE r.title = 'Apricot Yogurt Parfaits';
SELECT Ingredient.name FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id WHERE Quantity.preparation = 'cook in beef broth';
SELECT COUNT(*) FROM (   SELECT q.ingredient_id   FROM Quantity q   JOIN Recipe r ON q.recipe_id = r.recipe_id   JOIN Nutrition n ON r.recipe_id = n.recipe_id   WHERE n.vitamin_a = (     SELECT MAX(vitamin_a)     FROM Nutrition   ) ) as result;
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.vitamin_c IS NOT NULL ORDER BY n.vitamin_c DESC LIMIT 5;
SELECT Ingredient.name FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id GROUP BY Ingredient.ingredient_id ORDER BY COUNT(*) LIMIT 1;
SELECT COUNT(*) FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE i.category = 'baking product' AND r.title = 'No-Bake Chocolate Cheesecake';
SELECT Ingredient.name FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id JOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id WHERE Recipe.title = 'Strawberry Sorbet';
SELECT i.name FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE r.title = 'Warm Chinese Chicken Salad' AND q.optional = 'TRUE';
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.alcohol > 10 ORDER BY r.prep_min DESC LIMIT 1;
SELECT r.servings FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.total_fat - n.sat_fat = (     SELECT MAX(n2.total_fat - n2.sat_fat)     FROM Nutrition n2 );
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE r.source = 'National Potato Board' ORDER BY n.calories DESC LIMIT 1;
SELECT r.title, (r.prep_min + r.cook_min + r.stnd_min) as total_time FROM Recipe r JOIN (     SELECT recipe_id, COUNT(DISTINCT ingredient_id) as ingredient_count     FROM Quantity     GROUP BY recipe_id     ORDER BY ingredient_count DESC     LIMIT 1 ) q ON r.recipe_id = q.recipe_id;
SELECT Ingredient.name,        (COUNT(Quantity.ingredient_id) * 100.0 / (SELECT COUNT(*) FROM Quantity)) AS percentage FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id GROUP BY Quantity.ingredient_id, Ingredient.name ORDER BY COUNT(Quantity.ingredient_id) DESC LIMIT 1;
SELECT R.title, (R.prep_min + R.cook_min + R.stnd_min) as total_time FROM Recipe R JOIN Nutrition N ON R.recipe_id = N.recipe_id WHERE N.total_fat = (SELECT MAX(total_fat) FROM Nutrition)
SELECT r.title FROM Recipe r JOIN Quantity q ON r.recipe_id = q.recipe_id JOIN Ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'almond extract';
SELECT Ingredient.name FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id JOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id WHERE Recipe.title = 'Tomato-Cucumber Relish';
SELECT COUNT(*) FROM Quantity q JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE r.title = 'Idaho Potato Supreme';
SELECT I.name FROM Ingredient I JOIN Quantity Q ON I.ingredient_id = Q.ingredient_id JOIN (     SELECT R.recipe_id     FROM Recipe R     JOIN Nutrition N ON R.recipe_id = N.recipe_id     WHERE N.carbo = (         SELECT MAX(carbo)         FROM Nutrition     ) ) AS MaxCarboRecipe ON Q.recipe_id = MaxCarboRecipe.recipe_id;
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.iron > 20;
SELECT I.name FROM Ingredient I JOIN Quantity Q ON I.ingredient_id = Q.ingredient_id JOIN Recipe R ON Q.recipe_id = R.recipe_id JOIN Nutrition N ON R.recipe_id = N.recipe_id WHERE N.vitamin_a = (SELECT MAX(vitamin_a) FROM Nutrition) GROUP BY I.name;
SELECT i.name, q.max_qty, q.unit FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id JOIN Recipe r ON r.recipe_id = q.recipe_id WHERE r.servings = 7;
SELECT     (COUNT(CASE WHEN N.sodium BETWEEN 0 AND 5 THEN R.recipe_id END) * 100 / COUNT(R.recipe_id)) AS sodium_free_percentage FROM     Recipe R JOIN     Nutrition N ON R.recipe_id = N.recipe_id WHERE     R.source = 'The California Tree Fruit Agreement';
SELECT i.name FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id WHERE q.unit = 'slice(s)';
SELECT COUNT(*) FROM Recipe WHERE recipe_id IN (     SELECT recipe_id     FROM Quantity     WHERE ingredient_id IN (         SELECT ingredient_id         FROM Ingredient         WHERE category = 'canned dairy'     ) );
SELECT Recipe.title, (Recipe.prep_min + Recipe.cook_min + Recipe.stnd_min) AS total_time FROM Recipe JOIN Quantity ON Recipe.recipe_id = Quantity.recipe_id JOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id WHERE Ingredient.name = 'lima beans' GROUP BY Recipe.recipe_id HAVING COUNT(DISTINCT Ingredient.ingredient_id) = 1;
SELECT     (COUNT(CASE WHEN R.servings >= 10 THEN R.recipe_id END) * 100 / COUNT(R.recipe_id)) AS percentage FROM     Recipe R JOIN     Quantity Q ON R.recipe_id = Q.recipe_id JOIN     Ingredient I ON Q.ingredient_id = I.ingredient_id WHERE     I.name = 'sea bass'
SELECT total_fat FROM Nutrition WHERE recipe_id = (SELECT recipe_id FROM Recipe WHERE title = 'Raspberry Chiffon Pie');
SELECT N.pcnt_cal_prot FROM Nutrition N JOIN Recipe R ON N.recipe_id = R.recipe_id WHERE R.title = 'Raspberry Chiffon Pie';
SELECT COUNT(*) FROM Quantity WHERE recipe_id = (SELECT recipe_id FROM Recipe WHERE title = 'Raspberry Chiffon Pie');
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.alcohol = 0;
SELECT AVG(N.vitamin_c) FROM Nutrition N JOIN Recipe R ON N.recipe_id = R.recipe_id WHERE R.title LIKE '%cake%';
SELECT COUNT(*) FROM Recipe WHERE servings > 10 AND EXISTS (     SELECT *     FROM Ingredient     WHERE Ingredient.category = 'dairy' AND Recipe.recipe_id IN (         SELECT Quantity.recipe_id         FROM Quantity         WHERE Quantity.ingredient_id = Ingredient.ingredient_id     ) );
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.iron > 20;
SELECT r.title FROM Recipe r JOIN Nutrition n ON r.recipe_id = n.recipe_id WHERE n.calories = (SELECT MAX(calories) FROM Nutrition);
SELECT COUNT(*) FROM Recipe WHERE recipe_id NOT IN (     SELECT recipe_id     FROM Quantity     JOIN Ingredient ON Quantity.ingredient_id = Ingredient.ingredient_id     WHERE Ingredient.category LIKE '%dairy%' );
SELECT Ingredient.name FROM Ingredient JOIN Quantity ON Ingredient.ingredient_id = Quantity.ingredient_id JOIN Recipe ON Quantity.recipe_id = Recipe.recipe_id WHERE Recipe.title = 'Apricot Yogurt Parfaits';
SELECT DISTINCT Recipe.title FROM Recipe JOIN Quantity ON Recipe.recipe_id = Quantity.recipe_id WHERE Quantity.max_qty <> Quantity.min_qty;
SELECT i.name FROM Ingredient i JOIN Quantity q ON i.ingredient_id = q.ingredient_id JOIN Recipe r ON q.recipe_id = r.recipe_id WHERE r.cook_min = (SELECT MAX(cook_min) FROM Recipe)
Error: 第 8930 个样本有 2 个SQL。
SELECT     (COUNT(CASE WHEN N.calories > 200 THEN R.recipe_id END) * 100 / COUNT(R.recipe_id)) AS percentage FROM     Recipe R JOIN     Quantity Q ON R.recipe_id = Q.recipe_id JOIN     Ingredient I ON Q.ingredient_id = I.ingredient_id JOIN     Nutrition N ON R.recipe_id = N.recipe_id WHERE     I.category = 'cheese'
SELECT firstname, lastname FROM employee WHERE salary = (SELECT MAX(salary) FROM employee);
SELECT COUNT(*) FROM employee WHERE performance = 'Good';
SELECT ssn FROM employee WHERE gender = 'M' AND salary > 70000;
SELECT educationrequired FROM position WHERE positiontitle = 'Regional Manager';
SELECT positiontitle, MIN(minsalary) FROM position WHERE positiontitle IN ('Account Representative', 'Trainee') GROUP BY positiontitle ORDER BY MIN(minsalary) LIMIT 1;
SELECT T1.locationcity FROM location AS T1 JOIN employee AS T2 ON T1.locationID = T2.locationID WHERE T2.firstname = 'Sandy' AND T2.lastname = 'Adams'
SELECT COUNT(*) FROM employee JOIN location ON employee.locationID = location.locationID WHERE location.state = 'NY' AND employee.performance = 'Good';
SELECT l.officephone FROM location l JOIN employee e ON l.locationID = e.locationID WHERE e.firstname = 'Sandy' AND e.lastname = 'Adams';
SELECT COUNT(*) FROM employee WHERE gender = 'M' AND locationID IN (     SELECT locationID     FROM location     WHERE address = '450 Peachtree Rd' );
SELECT COUNT(*) FROM employee JOIN position ON employee.positionID = position.positionID WHERE position.positiontitle = 'Account Representative';
SELECT (e.salary - p.minsalary) AS SalaryDifference FROM employee e JOIN position p ON e.positionID = p.positionID WHERE e.firstname = 'James' AND e.lastname = 'Johnson';
SELECT COUNT(*) FROM employee e JOIN position p ON e.positionID = p.positionID JOIN location l ON e.locationID = l.locationID WHERE p.positiontitle = 'Trainees' AND l.state = 'NY';
SELECT e.firstname, e.lastname FROM employee e JOIN position p ON e.positionID = p.positionID WHERE p.positiontitle = 'Trainee';
SELECT e.firstname, e.lastname, p.educationrequired FROM employee e JOIN position p ON e.positionID = p.positionID WHERE (e.firstname, e.lastname) IN ('Jose', 'Rodriguez', 'Sandy', 'Adams') ORDER BY p.educationrequired DESC LIMIT 1;
SELECT DISTINCT l.zipcode FROM location l JOIN employee e ON l.locationID = e.locationID WHERE e.gender = 'M' AND e.performance = 'Good';
SELECT e.ssn FROM employee e JOIN location l ON e.locationID = l.locationID WHERE l.state = 'CA';
SELECT COUNT(*) FROM employee JOIN position ON employee.positionID = position.positionID WHERE position.positiontitle = 'Trainee' AND employee.salary > 20000;
SELECT AVG(employee.salary) FROM employee JOIN position ON employee.positionID = position.positionID WHERE position.positiontitle = 'Trainee';
SELECT ((AVG(e.salary) - p.minsalary) / p.minsalary) * 100 AS Percentage_Higher FROM employee e JOIN position p ON e.positionID = p.positionID WHERE p.positiontitle = 'Trainee' GROUP BY p.positiontitle;
SELECT COUNT(*) FROM employee WHERE gender = 'F';
SELECT T3.locationcity FROM employee AS T1 JOIN location AS T3 ON T1.locationID = T3.locationID WHERE T1.firstname = 'Jose' AND T1.lastname = 'Rodriguez'
SELECT l.state FROM location l JOIN employee e ON l.locationID = e.locationID WHERE e.firstname = 'Emily' AND e.lastname = 'Wood';
SELECT p.educationrequired FROM position p JOIN employee e ON p.positionID = e.positionID WHERE e.firstname = 'David' AND e.lastname = 'Whitehead';
SELECT COUNT(*) FROM employee JOIN location ON employee.locationID = location.locationID WHERE location.locationcity = 'Miami';
SELECT e.firstname, e.lastname FROM employee e JOIN location l ON e.locationID = l.locationID WHERE l.locationcity = 'Boston' ORDER BY e.salary DESC LIMIT 1;
SELECT e.ssn FROM employee e JOIN location l ON e.locationID = l.locationID WHERE l.locationcity = 'New York City' AND e.performance = 'Good';
SELECT COUNT(*) FROM employee e JOIN position p ON e.positionID = p.positionID JOIN location l ON e.locationID = l.locationID WHERE p.positiontitle = 'Account Representative' AND l.locationcity = 'Chicago' AND e.performance = 'Good';
SELECT p.positiontitle FROM position p JOIN employee e ON p.positionID = e.positionID WHERE e.firstname = 'Kenneth' AND e.lastname = 'Charles';
SELECT l.address, l.locationcity, l.state, l.zipcode FROM location l JOIN position p ON l.locationID = p.positionID JOIN employee e ON p.positionID = e.positionID AND l.locationID = e.locationID WHERE p.positiontitle = 'manager' AND e.salary = (SELECT MAX(salary) FROM employee WHERE positionID = (SELECT positionID FROM position WHERE positiontitle = 'manager'));
SELECT p.maxsalary FROM position p JOIN employee e ON p.positionID = e.positionID WHERE e.firstname = 'Tracy' AND e.lastname = 'Coulter';
SELECT (h.maxsalary - e.salary) / e.salary * 100 AS Percentage_Raise FROM human_resources.employee e JOIN human_resources.position h ON e.positionID = h.positionID WHERE e.firstname = 'Jose' AND e.lastname = 'Rodriguez';
SELECT COUNT(*) FROM employee WHERE performance = 'Poor' AND salary > 50000;
SELECT firstname, lastname FROM employee WHERE salary = (SELECT MAX(salary) FROM employee);
SELECT COUNT(*) FROM position WHERE maxsalary <= 100000;
SELECT salary FROM employee ORDER BY hiredate ASC LIMIT 1;
SELECT p.minsalary FROM position p WHERE p.educationrequired = (SELECT MAX(educationrequired) FROM position);
SELECT T1.address, T1.locationcity, T1.state, T1.zipcode FROM location AS T1 JOIN employee AS T2 ON T1.locationID = T2.locationID GROUP BY T1.locationID ORDER BY COUNT(T2.ssn) DESC LIMIT 1;
SELECT AVG(employee.salary) FROM employee JOIN position ON employee.positionID = position.positionID WHERE position.educationrequired = '2 year degree';
SELECT COUNT(*) FROM employee e JOIN position p ON e.positionID = p.positionID WHERE e.gender = 'M' AND p.positiontitle = 'Regional Managers';
SELECT p.positiontitle, COUNT(e.ssn) AS PoorPerformersCount FROM position p JOIN employee e ON p.positionID = e.positionID WHERE e.performance = 'Poor' GROUP BY p.positiontitle ORDER BY PoorPerformersCount DESC LIMIT 1;
SELECT p.positiontitle FROM position p JOIN employee e ON p.positionID = e.positionID WHERE p.educationrequired = '2 year degree' AND e.gender = 'F' GROUP BY p.positiontitle ORDER BY COUNT(e.ssn) DESC LIMIT 1;
SELECT COUNT(*) FROM employee e JOIN position p ON e.positionID = p.positionID JOIN location l ON e.locationID = l.locationID WHERE p.positiontitle = 'Account Representative' AND l.state = 'Illinois' AND e.performance = 'satisfying';
SELECT AVG(salary) FROM employee JOIN position ON employee.positionID = position.positionID WHERE position.positiontitle = 'Manager' AND employee.performance = 'Poor';
SELECT state FROM location JOIN employee ON location.locationID = employee.locationID JOIN position ON employee.positionID = position.positionID WHERE position.positiontitle = 'Account Representatives' AND employee.performance = 'Good' GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT e.firstname, e.lastname, e.performance FROM employee e WHERE e.salary = (SELECT MIN(salary) FROM employee)
SELECT locationcity FROM location WHERE state IN ('CO', 'UT', 'CA');
SELECT locationcity, address FROM location WHERE zipcode > 90000;
SELECT positiontitle FROM position WHERE educationrequired = '4 year degree';
SELECT maxsalary FROM position WHERE positiontitle = 'Trainer';
SELECT e.firstname, e.lastname, e.ssn FROM employee e JOIN position p ON e.positionID = p.positionID WHERE p.positiontitle = 'Account Representative' AND e.performance = 'Average';
SELECT e.hiredate, p.positiontitle, e.salary FROM employee e JOIN position p ON e.positionID = p.positionID WHERE e.firstname = 'Emily' AND e.lastname = 'Wood';
SELECT p.positiontitle, p.minsalary, p.maxsalary FROM position p JOIN employee e ON p.positionID = e.positionID WHERE e.firstname = 'Bill' AND e.lastname = 'Marlin';
SELECT e.firstname, e.lastname, e.gender, p.positiontitle FROM employee e JOIN position p ON e.positionID = p.positionID JOIN location l ON e.locationID = l.locationID WHERE l.locationcity = 'New York City';
SELECT e.firstname, e.lastname, e.hiredate, e.performance FROM employee e JOIN location l ON e.locationID = l.locationID WHERE l.state = 'UT';
Error: 第 8986 个样本有 2 个SQL。
SELECT e.firstname, e.lastname, e.salary, p.educationrequired FROM employee e JOIN position p ON e.positionID = p.positionID WHERE p.positiontitle = 'Account Representative' AND e.performance = 'Poor';
SELECT e.firstname, e.lastname, e.performance, l.locationcity FROM employee e JOIN location l ON e.locationID = l.locationID WHERE e.ssn = '767-74-7373';
SELECT e.firstname, e.lastname, p.positiontitle, l.locationcity, l.officephone FROM employee e JOIN position p ON e.positionID = p.positionID JOIN location l ON e.locationID = l.locationID WHERE l.state = 'CO';
SELECT     e.firstname,     e.lastname,     p.positiontitle,     l.locationcity,     (MAX(e.salary) / 12) as monthly_averagesalary FROM     employee e JOIN     position p ON e.positionID = p.positionID JOIN     location l ON e.locationID = l.locationID GROUP BY     e.firstname,     e.lastname,     p.positiontitle,     l.locationcity ORDER BY     e.salary DESC LIMIT 1;
Error: 第 8991 个样本有 2 个SQL。
SELECT (COUNT(CASE WHEN subscription_type = 'Subscriber' THEN id END) * 100.0 / COUNT(id)) AS percentage FROM trip;
SELECT end_station_name, city FROM trip JOIN station ON trip.end_station_id = station.id WHERE bike_id = 13 ORDER BY end_date DESC LIMIT 1;
SELECT T1.id, T1.end_station_name, S.city FROM trip AS T1 JOIN station AS S ON T1.end_station_id = S.id WHERE DATE(T1.start_date) != DATE(T1.end_date);
SELECT s.name, s.lat, s.long FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available = 0 AND st.time = '2013-11-03 02:01:01';
SELECT s.name, s.city FROM station s JOIN trip t ON s.id = t.start_station_id GROUP BY s.id, s.name, s.city ORDER BY COUNT(t.bike_id) DESC LIMIT 1;
SELECT w.max_temperature_f FROM trip t JOIN weather w ON t.start_date = w.date AND t.zip_code = w.zip_code WHERE t.id = 4080;
SELECT T.time FROM bike_share_1.status AS T WHERE T.station_id = (SELECT S.id FROM bike_share_1.station AS S WHERE S.name = 'San Jose Diridon Caltrain Station') ORDER BY T.bikes_available DESC LIMIT 1;
SELECT trip.id, trip.duration FROM trip JOIN weather ON DATE(trip.start_date) = weather.date AND trip.zip_code = weather.zip_code WHERE weather.events = 'Rain';
SELECT trip.start_date FROM trip JOIN station ON trip.end_station_id = station.id WHERE station.lat = 37.331415 AND station.long = -121.8932;
SELECT COUNT(*) FROM trip WHERE start_date LIKE '8%2013%' AND start_station_name IN (     SELECT name     FROM station     WHERE city = 'Redwood City' );
Error: 第 9002 个样本有 2 个SQL。
SELECT     T3.date,     AVG(T3.min_temperature_f) AS avg_min_temperature FROM     trip AS T1 JOIN     station AS T2 ON T1.start_station_id = T2.id JOIN     weather AS T3 ON T3.zip_code = T2.zip_code AND DATE(T1.start_date) = T3.date WHERE     T1.start_date IN (         SELECT             start_date         FROM             trip         GROUP BY             DATE(start_date)         ORDER BY             COUNT(*) DESC         LIMIT 1     ) GROUP BY     T3.date
Error: 第 9004 个样本有 2 个SQL。
SELECT COUNT(*), name FROM station WHERE city = 'San Jose' AND installation_date BETWEEN '2014-01-01' AND '2014-12-31';
SELECT MAX(duration) FROM trip WHERE start_date = '2013-08-29' AND end_date = '2013-08-29';
SELECT DIV(duration, 60) AS duration_in_minutes FROM trip WHERE bike_id = 426 AND start_station_name = 'Market at 4th' AND end_station_name = '2nd at South Park' AND start_date = '2013-08-29' AND end_date = '2013-08-29';
Error: 第 9008 个样本有 2 个SQL。
SELECT COUNT(*) FROM station WHERE city = 'San Francisco' AND dock_count > 20;
SELECT date FROM weather WHERE max_temperature_f = (SELECT MAX(max_temperature_f) FROM weather)
SELECT MAX(max_dew_point_f) FROM weather WHERE date = '2014-07-15' AND zip_code = 94301;
SELECT YEAR(date), SUM(precipitation_inches) AS total_rain FROM weather WHERE events = 'Rain' GROUP BY YEAR(date) ORDER BY total_rain DESC LIMIT 1;
SELECT MIN(duration), bike_id FROM trip WHERE start_station_id = (     SELECT id     FROM station     WHERE lat = 37.789625 AND long = -122.400811 ) AND start_date LIKE '10/20/2014%';
SELECT end_station_name, MIN(trip.duration), s.dock_count FROM trip JOIN station AS s ON s.name = 'South Van Ness at Market' AND trip.start_station_name = s.name WHERE trip.start_date LIKE '12/1/2013%' AND trip.subscription_type = 'Subscriber' GROUP BY end_station_name ORDER BY MIN(trip.duration) ASC LIMIT 1;
SELECT MAX(w.mean_humidity) FROM weather w JOIN trip t ON w.zip_code = t.zip_code AND w.date = t.start_date WHERE t.start_station_name = 'Powell Street BART' AND t.bike_id = '496' AND t.start_date = '2013-08-29';
SELECT w.date, COUNT(t.id) as total_bikes_borrowed FROM weather w JOIN trip t ON w.zip_code = t.zip_code AND DATE(t.start_date) = w.date WHERE w.events LIKE '%Fog%' AND t.subscription_type = 'Subscriber' AND w.zip_code = 94301 AND w.date BETWEEN '2014-11-01' AND '2014-11-30' GROUP BY w.date ORDER BY total_bikes_borrowed DESC;
SELECT s.name, s.installation_date FROM station s JOIN (     SELECT start_station_id, COUNT(*) as cnt     FROM trip     WHERE subscription_type = 'Customer'     GROUP BY start_station_id     ORDER BY cnt ASC     LIMIT 1 ) t ON s.id = t.start_station_id;
SELECT s.name FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available = 0 AND DATE(st.time) = '2013-11-03' GROUP BY s.name ORDER BY COUNT(*) DESC;
SELECT AVG(trip.duration) FROM trip JOIN station ON trip.start_station_id = station.id WHERE station.city = 'Palo Alto';
SELECT T1.city, T3.start_station_name, T3.end_station_name, MAX(T3.duration) FROM station AS T1 JOIN trip AS T3 ON T1.id = T3.start_station_id GROUP BY T1.city, T3.start_station_name, T3.end_station_name ORDER BY MAX(T3.duration) DESC LIMIT 1;
SELECT name, installation_date, city FROM station WHERE installation_date BETWEEN '2013-08-05' AND '2013-12-31';
SELECT AVG(duration) FROM trip WHERE start_station_name = 'Adobe on Almaden' AND end_station_name = 'Ryland Park';
SELECT s.name, s.lat, s.long FROM station s JOIN status st ON s.id = st.station_id WHERE st.bikes_available = 0;
SELECT t.id, s.lat, s.long FROM trip t JOIN station s ON t.start_station_name = s.name WHERE t.start_station_name = t.end_station_name;
SELECT (s.dock_count - st.bikes_available) AS bikes_borrowed FROM station s JOIN status st ON s.id = st.station_id WHERE s.name = 'San Jose Diridon Caltrain Station' AND st.time = '2013-08-29 18:14:01';
SELECT t.id FROM trip t JOIN status s ON t.start_station_id = s.station_id JOIN weather w ON t.start_date::DATE = w.date WHERE t.bike_id = '10' AND t.subscription_type = 'Subscriber' AND w.mean_temperature_f >= 62;
SELECT w.max_gust_speed_mph, w.cloud_cover FROM trip t JOIN weather w ON t.start_date::DATE = w.date WHERE t.bike_id = 10 AND t.duration = 386 AND t.start_station_name = 'MLK Library' AND t.end_station_name = 'San Salvador at 1st';
SELECT COUNT(*) FROM trip t JOIN weather w ON DATE(t.start_date) = w.date AND t.zip_code = w.zip_code WHERE t.subscription_type = 'Subscriber' AND t.duration < 490 AND t.start_station_name = '2nd at Folsom' AND t.end_station_name = 'Civic Center BART (7th at Market)' AND w.min_visibility_miles >= 4;
SELECT s.docks_available FROM status s JOIN trip t ON s.station_id = t.start_station_id WHERE t.id = 912900;
SELECT t.id FROM trip t JOIN weather w ON DATE(t.end_date) = w.date AND t.zip_code = w.zip_code WHERE w.min_temperature_f < 45;
WITH SubscriberTrips AS (   SELECT     t.duration,     w.date,     w.min_temperature_f,     w.max_gust_speed_mph,     w.events   FROM     trip t   JOIN     station s ON t.start_station_name = s.name   JOIN     weather w ON DATE(t.start_date) = w.date AND t.zip_code = w.zip_code   WHERE     t.subscription_type = 'Subscriber'     AND t.start_station_name = '2nd at Folsom'     AND t.end_station_name = '5th at Howard'     AND YEAR(t.start_date) = 2014 ), AvgDuration AS (   SELECT     AVG(duration) as AverageDuration   FROM     SubscriberTrips ) SELECT   MIN(SubscriberTrips.duration) as ShortestTripDuration,   AvgDuration.AverageDuration - MIN(SubscriberTrips.duration) as ShorterThanAverageBy,   MIN(SubscriberTrips.min_temperature_f) as MinTemperature,   MAX(SubscriberTrips.max_gust_speed_mph) as MaxGustSpeed,   GROUP_CONCAT(DISTINCT SubscriberTrips.events) as WeatherEvents FROM   SubscriberTrips,   AvgDuration;
SELECT AVG(duration) FROM trip WHERE start_station_name = 'Steuart at Market' AND end_station_name = 'Embarcadero at Sansome' AND start_date >= '2014-07-01 00:00:00' AND end_date <= '2014-07-31 23:59:59';
SELECT AVG(max_temperature_f) AS avg_max_temp, AVG(min_temperature_f) AS avg_min_temp FROM weather WHERE date BETWEEN '2015-05-01' AND '2015-05-31' AND mean_humidity BETWEEN 65 AND 75;
SELECT     (SELECT COUNT(*) FROM trip WHERE subscription_type = 'Subscriber' AND start_date BETWEEN '2013-06-01 00:00:00' AND '2013-06-30 23:59:59') -     (SELECT COUNT(*) FROM trip WHERE subscription_type = 'Customer' AND start_date BETWEEN '2013-06-01 00:00:00' AND '2013-06-30 23:59:59') AS difference;
SELECT DISTINCT T3.bike_id FROM (     SELECT date     FROM weather     WHERE YEAR(date) = 2013 AND events LIKE '%Fog-Rain%' ) AS T1 JOIN status AS T2 ON DATE(T2.time) = T1.date JOIN trip AS T3 ON T2.station_id = T3.start_station_id AND DATE(T3.start_date) = T1.date;
SELECT T3.mean_visibility_miles, T3.mean_wind_speed_mph, T3.events, T1.lat AS start_lat, T1.long AS start_long, T1.name AS start_station_name, T2.lat AS end_lat, T2.long AS end_long, T2.name AS end_station_name FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id JOIN weather AS T3 ON T2.start_date = T3.date JOIN station AS T4 ON T2.end_station_id = T4.id WHERE T3.events = 'fog' ORDER BY T2.duration DESC LIMIT 1;
SELECT date FROM (   SELECT t.start_date AS trip_start_date, w.date, w.min_temperature_f   FROM trip t   JOIN weather w ON DATE(t.start_date) = w.date AND t.zip_code = w.zip_code   WHERE t.start_station_name = 'Market at 10th'     AND t.end_station_name = 'South Van Ness at Market'     AND t.start_date BETWEEN '2013-08-01 00:00:00' AND '2013-08-31 23:59:59' ) AS subquery WHERE min_temperature_f = (   SELECT MIN(min_temperature_f)   FROM (     SELECT t.start_date AS trip_start_date, w.min_temperature_f     FROM trip t     JOIN weather w ON DATE(t.start_date) = w.date AND t.zip_code = w.zip_code     WHERE t.start_station_name = 'Market at 10th'       AND t.end_station_name = 'South Van Ness at Market'       AND t.start_date BETWEEN '2013-08-01 00:00:00' AND '2013-08-31 23:59:59'   ) AS subquery2 )
SELECT start_station_name, end_station_name, MAX(duration) FROM trip JOIN weather ON trip.zip_code = weather.zip_code AND DATE(start_date) = weather.date WHERE weather.events LIKE '%rain%' ORDER BY duration DESC LIMIT 1;
SELECT AVG(trip.duration) FROM trip JOIN weather ON DATE(trip.start_date) = weather.date AND trip.zip_code = weather.zip_code WHERE weather.events = 'Rain' AND weather.precipitation_inches > 0.8;
SELECT T1.name, T1.city FROM station AS T1 JOIN (     SELECT start_station_name, AVG(duration) as avg_duration     FROM trip     GROUP BY start_station_name     HAVING AVG(duration) > (         SELECT AVG(duration)         FROM trip     ) ) AS T2 ON T1.name = T2.start_station_name;
SELECT COUNT(*) FROM station WHERE city = 'San Francisco' AND installation_date LIKE '%2014%';
SELECT COUNT(*) FROM trip JOIN station ON trip.end_station_id = station.id WHERE trip.start_date LIKE '%2006%' AND station.city = 'Mountain View';
SELECT id FROM trip WHERE start_station_name IN (SELECT name FROM station WHERE city = 'Redwood City') ORDER BY duration DESC LIMIT 1;
SELECT DISTINCT t.bike_id FROM trip t JOIN station s ON t.start_station_name = s.name WHERE s.installation_date LIKE '%2013%';
SELECT COUNT(*) FROM trip JOIN station ON trip.end_station_id = station.id WHERE station.city = 'San Jose' AND trip.subscription_type = 'Subscriber';
SELECT trip.id, trip.duration FROM trip JOIN station ON trip.start_station_name = station.name WHERE station.dock_count = 15 ORDER BY trip.duration LIMIT 1;
SELECT EXTRACT(YEAR FROM start_date) AS trip_year, COUNT(*) AS trip_count FROM trip JOIN station ON trip.start_station_name = station.name WHERE station.city = 'San Francisco' GROUP BY trip_year ORDER BY trip_count DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN t.start_station_id IN                 (SELECT s.id FROM station AS s WHERE s.city = 'San Jose')                 AND t.duration > 800             THEN 1 END) * 100.0 / COUNT(t.id)) as percentage FROM     trip AS t
SELECT COUNT(*) FROM trip WHERE start_date LIKE '%2013%' AND duration > 1000;
SELECT AVG(duration) FROM trip WHERE start_station_name = 'South Van Ness at Market' AND start_date LIKE '2015%';
SELECT COUNT(*) FROM trip WHERE start_station_id = end_station_id;
SELECT t.id FROM trip t JOIN (   SELECT w.zip_code, MAX(w.max_temperature_f) as max_temp   FROM weather w   GROUP BY w.zip_code ) max_temp ON max_temp.zip_code = t.zip_code JOIN weather w ON w.date = t.start_date AND w.zip_code = t.zip_code AND w.max_temperature_f = max_temp.max_temp;
SELECT trip.id FROM trip JOIN status ON trip.start_station_id = status.station_id AND trip.start_date = status.time JOIN weather ON trip.end_date = weather.date AND trip.zip_code = weather.zip_code WHERE trip.start_station_name = 'Mountain View City Hall' AND weather.events LIKE '%rain%';
SELECT AVG(trip.duration) FROM trip JOIN weather ON DATE(trip.end_date) = weather.date AND trip.zip_code = weather.zip_code WHERE weather.events LIKE '%fog%';
SELECT MAX(t.duration) FROM trip t JOIN weather w ON DATE(t.start_date) = w.date AND t.zip_code = w.zip_code WHERE w.max_wind_speed_mph = 30;
SELECT AVG(w.mean_temperature_f) FROM trip t JOIN weather w ON t.start_date = w.date WHERE t.start_station_name = 'Market at 4th' AND t.start_date LIKE '%2013%';
SELECT w.mean_humidity FROM weather w JOIN trip t ON w.zip_code = t.zip_code AND w.date = t.start_date WHERE t.id = 4275;
SELECT     (COUNT(CASE WHEN T4.events LIKE '%Rain%' THEN 1 END) * 100.0 / COUNT(T3.id)) AS percentage FROM     trip AS T3 JOIN     station AS T1 ON T1.id = T3.end_station_id JOIN     status AS T2 ON T2.station_id = T1.id AND T2.time LIKE CONCAT(date(T3.end_date), '%') JOIN     weather AS T4 ON T4.zip_code = T1.zip_code AND date(T4.date) = date(T3.end_date) WHERE     T3.subscription_type = 'Customer'     AND T3.end_date LIKE '%2015%'
Error: 第 9059 个样本有 3 个SQL。
SELECT mean_temperature_f FROM weather WHERE date = '2013-08-29' AND zip_code = 94107;
SELECT (max_temperature_f - min_temperature_f) AS temperature_difference FROM weather WHERE date = '2013-08-29' AND zip_code = 94107;
SELECT s.bikes_available FROM status s JOIN station st ON s.station_id = st.id WHERE st.name = 'San Jose Diridon Caltrain Station' AND s.time = '2013-08-29 12:06:01'
SELECT s.city FROM station s JOIN trip t ON s.id = t.start_station_id WHERE t.id = 4069;
SELECT COUNT(*) FROM trip JOIN weather ON DATE_FORMAT(trip.start_date, '%Y-%m') = DATE_FORMAT(weather.date, '%Y-%m') WHERE trip.start_date LIKE '2013-09%' AND weather.zip_code = 94107 AND weather.max_temperature_f > 70;
SELECT DISTINCT t.start_station_name FROM trip t JOIN weather w ON DATE(t.start_date) = w.date AND t.zip_code = w.zip_code WHERE w.max_humidity > 80 AND w.zip_code = 94107 AND YEAR(t.start_date) = 2013;
SELECT COUNT(*) FROM trip JOIN station ON trip.start_station_id = station.id WHERE trip.subscription_type = 'Subscriber' AND trip.start_date LIKE '8%' AND trip.start_date LIKE '%2013%' AND station.dock_count > 20;
SELECT s.lat, s.long FROM station s JOIN trip t ON s.id = t.start_station_id WHERE t.duration = (     SELECT MAX(duration) FROM trip )
SELECT s.docks_available FROM status s JOIN trip t ON s.station_id = t.end_station_id WHERE t.id = 4069;
SELECT COUNT(*) FROM trip JOIN weather ON DATE(trip.start_date) = weather.date WHERE weather.events LIKE '%fog%' AND SUBSTR(weather.date, -4) = '2013' AND trip.start_station_name = '2nd at Townsend';
SELECT MAX(trip.duration) FROM trip JOIN weather ON trip.start_date LIKE Concat('%', weather.date, '%') WHERE weather.events LIKE '%fog%' AND weather.date LIKE '%2013%';
SELECT s.installation_date FROM trip t JOIN station s ON t.start_station_id = s.id WHERE t.id = 4069;
SELECT COUNT(*) FROM trip JOIN station ON trip.start_station_id = station.id WHERE station.city = 'San Francisco' AND trip.subscription_type = 'Subscriber';
SELECT COUNT(*) FROM trip WHERE start_station_name = '2nd at Folsom' AND id IN (     SELECT trip_id     FROM (         SELECT trip.id AS trip_id, weather.date         FROM trip         JOIN weather ON trip.zip_code = weather.zip_code         WHERE weather.date LIKE '%2014%'         AND start_station_name = '2nd at Folsom'     ) subquery     WHERE subquery.date = (         SELECT date         FROM weather         WHERE max_temperature_f = (             SELECT MAX(max_temperature_f)             FROM weather             WHERE date LIKE '%2014%'         )     ) );
SELECT AVG(T1.duration) FROM trip AS T1 JOIN weather AS T2 ON DATE(T1.start_date) = T2.date WHERE T2.max_temperature_f = (     SELECT MAX(max_temperature_f)     FROM weather     WHERE weather.date LIKE "%2014%" ) AND T2.date LIKE "%2014%";
SELECT DISTINCT end_station_name FROM trip WHERE start_station_name = '2nd at South Park';
SELECT COUNT(*) FROM weather WHERE events = 'rain' AND zip_code = 94041;
SELECT SUM(dock_count) AS total_bikes_hold FROM station WHERE city = 'Redwood City' AND YEAR(installation_date) < 2014;
SELECT MAX(duration) / 86400 AS longest_trip_in_days FROM trip;
SELECT     (max_temperature_f - 32) / 1.8 AS Celsius1,     (mean_temperature_f - 32) / 1.8 AS Celsius2,     (min_temperature_f - 32) / 1.8 AS Celsius3 FROM     weather WHERE     date LIKE '8/%/2013' AND     zip_code IN (         SELECT             zip_code         FROM             station         WHERE             city = 'San Francisco'     );
SELECT     SUM(CASE WHEN subscription_type = 'Subscriber' THEN 1 ELSE 0 END) /     SUM(CASE WHEN subscription_type = 'Customer' THEN 1 ELSE 0 END) AS ratio_subscriber_to_customer FROM     trip WHERE     start_station_name = '2nd at South Park' AND     end_station_name = '2nd at South Park';
Error: 第 9081 个样本有 3 个SQL。
SELECT DISTINCT s.name FROM station s JOIN status st ON s.id = st.station_id JOIN weather w ON st.time = w.date WHERE (w.mean_temperature_f - 32) / 1.8 = 20 AND w.date LIKE '%2014%';
SELECT COUNT(*) FROM trip WHERE start_station_id IN (     SELECT id     FROM station     WHERE city = 'San Jose' ) AND start_date LIKE '8/%/2013%';
SELECT T1.start_station_name, T1.end_station_name FROM trip AS T1 JOIN station AS T2 ON T1.start_station_name = T2.name JOIN station AS T3 ON T1.end_station_name = T3.name WHERE T1.start_date LIKE '%2014%' AND T2.city != T3.city;
SELECT     SUM(trip.duration) / 3600 AS total_duration_hour FROM     bike_share_1.trip WHERE     trip.bike_id = 16 AND     trip.start_station_name != trip.end_station_name;
SELECT     (COUNT(CASE WHEN t.subscription_type = 'customer' THEN 1 END) * 1.0) /     COUNT(CASE WHEN t.subscription_type = 'subscriber' THEN 1 END) AS ratio FROM     trip t JOIN     station s ON t.start_station_name = s.name WHERE     s.city = 'Mountain View';
SELECT SUM(trip.duration) / 3600 AS total_duration_in_hours FROM trip JOIN station ON trip.start_station_name = station.name WHERE station.city = 'Palo Alto';
SELECT     T1.bike_id,     T3.city,     SUM(CAST(T1.duration AS FLOAT)/3600) AS total_duration_hours FROM     trip AS T1 JOIN     station AS T2 ON T1.start_station_name = T2.name JOIN     station AS T3 ON T1.end_station_name = T3.name WHERE     T2.city = T3.city AND     T1.bike_id IN (         SELECT             bike_id         FROM             trip         GROUP BY             bike_id         HAVING             COUNT(id) = (                 SELECT                     MIN(cnt)                 FROM                     (SELECT COUNT(id) AS cnt FROM trip GROUP BY bike_id) AS subquery             )     ) GROUP BY     T1.bike_id, T3.city ORDER BY     total_duration_hours DESC LIMIT 1;
SELECT COUNT(*) FROM trip WHERE subscription_type = 'Subscriber' AND start_station_name = 'Market at 4th';
SELECT name FROM station WHERE city = 'Mountain View' AND installation_date = '12/31/2013';
SELECT T1.city, T1.dock_count AS bikes_can_hold FROM station AS T1 WHERE T1.name = 'Townsend at 7th'
SELECT     (SELECT SUM(dock_count) FROM station WHERE name = 'Evelyn Park and Ride') AS bikes_hold,     (SELECT COUNT(*) FROM trip WHERE start_station_name = 'Evelyn Park and Ride' AND subscription_type = 'Subscriber') AS subscriber_users
SELECT COUNT(DISTINCT T1.bike_id), MAX(T2.max_temperature_f) FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 94301 AND T1.subscription_type = 'Subscriber';
SELECT     (COUNT(CASE WHEN subscription_type = 'customer' THEN 1 END) * 100.0 /      COUNT(CASE WHEN subscription_type = 'subscriber' THEN 1 END)) AS percentage FROM     trip JOIN     station ON trip.start_station_id = station.id WHERE     station.city = 'San Francisco';
SELECT AVG(t.duration) AS average_duration, s.lat, s.long FROM trip t JOIN station s ON t.start_station_name = s.name WHERE s.name = 'Santa Clara at Almaden';
SELECT MIN(t.duration) AS shortest_trip, w.max_wind_Speed_mph FROM trip t JOIN status s ON t.start_station_id = s.station_id JOIN station st ON st.id = t.start_station_id JOIN weather w ON DATE(t.start_date) = w.date AND t.zip_code = w.zip_code WHERE st.name = 'Franklin at Maple' GROUP BY w.max_wind_Speed_mph ORDER BY shortest_trip ASC LIMIT 1;
SELECT SUM(T2.bikes_available), T1.lat, T1.long FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.time = '10/20/2013 8:11:01 AM'
SELECT s.city, s.installation_date FROM station s JOIN trip t ON s.id = t.start_station_id WHERE t.id = 585842;
SELECT COUNT(DISTINCT s.id) AS total_stations, COUNT(DISTINCT t.bike_id) AS total_customers FROM station s JOIN trip t ON s.id = t.start_station_id WHERE s.installation_date = '2013-08-16' AND t.subscription_type = 'customer';
SELECT end_station_name, s.lat, s.long FROM trip t JOIN station s ON t.end_station_id = s.id WHERE t.start_station_name = 'Market at 4th' AND t.start_date = '2013-08-29 12:45:00';
SELECT COUNT(t.trip_id) AS num_subscribers, s.dock_count FROM trip t JOIN station s ON t.end_station_id = s.id WHERE t.subscription_type = 'Subscriber' AND t.end_station_name = 'MLK Library';
SELECT AVG(w.min_temperature_f) AS avg_coldest_temp, s.name, s.lat, s.long FROM weather w JOIN station s ON w.zip_code = s.zip_code WHERE w.zip_code = 94301 GROUP BY s.name, s.lat, s.long;
SELECT AVG(t.duration) AS average_duration, s.installation_date FROM trip t JOIN station s ON t.start_station_name = s.name AND t.end_station_name = s.name WHERE t.subscription_type = 'Subscriber' AND t.start_station_name = 'Mountain View City Hall' AND t.end_station_name = 'Mountain View City Hall';
SELECT description FROM film_text WHERE title = 'ACADEMY DINOSAUR';
SELECT COUNT(*) FROM film WHERE rental_duration > 6;
SELECT title FROM film WHERE release_year = 2006 AND rental_rate = 2.99;
SELECT title FROM film WHERE length = (SELECT MAX(length) FROM film);
SELECT title FROM film WHERE title IN ('ACE GOLDFINGER', 'ACADEMY DINOSAUR') ORDER BY replacement_cost DESC LIMIT 1;
SELECT COUNT(*) FROM film WHERE release_year = 2006 AND rating = 'NC-17';
SELECT COUNT(*) FROM film WHERE rental_rate = 2.99 AND special_features LIKE '%Deleted Scenes%';
Error: 第 9111 个样本有 3 个SQL。
SELECT email FROM staff WHERE first_name = 'Jon' AND last_name = 'Stephens';
SELECT first_name, last_name FROM staff WHERE active = 1;
SELECT release_year FROM film WHERE replacement_cost = (SELECT MAX(replacement_cost) FROM film)
SELECT title FROM film ORDER BY replacement_cost DESC LIMIT 3;
SELECT language.name FROM film JOIN language ON film.language_id = language.language_id WHERE film.title = 'ACADEMY DINOSAUR';
SELECT COUNT(*) FROM film WHERE language_id = (SELECT language_id FROM language WHERE name = 'English');
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS';
SELECT COUNT(*) FROM film_actor fa JOIN film f ON fa.film_id = f.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE f.title = 'ACADEMY DINOSAUR';
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'ACADEMY DINOSAUR';
SELECT COUNT(*) FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE actor.first_name = 'PENELOPE' AND actor.last_name = 'GUINESS' AND film.release_year = 2006;
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' ORDER BY f.replacement_cost DESC LIMIT 1;
SELECT A.first_name, A.last_name FROM actor A JOIN film_actor FA ON A.actor_id = FA.actor_id JOIN (     SELECT film_id, MAX(replacement_cost) AS max_replacement_cost     FROM film     GROUP BY film_id ) F ON FA.film_id = F.film_id WHERE F.max_replacement_cost = (     SELECT MAX(replacement_cost)     FROM film );
SELECT COUNT(*) FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id JOIN language ON film.language_id = language.language_id WHERE actor.first_name = 'PENELOPE' AND actor.last_name = 'GUINESS' AND language.name = 'English';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' ORDER BY f.length DESC LIMIT 1;
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror';
SELECT COUNT(film_id) FROM film_category JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Horror';
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror' AND f.rental_rate = 2.99;
SELECT COUNT(T2.rental_id) FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ';
SELECT COUNT(film.film_id) FROM film JOIN inventory ON film.film_id = inventory.film_id JOIN rental ON inventory.inventory_id = rental.inventory_id JOIN customer ON rental.customer_id = customer.customer_id WHERE film.release_year = 2006 AND customer.first_name = 'RUTH' AND customer.last_name = 'MARTINEZ';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ' ORDER BY f.replacement_cost DESC LIMIT 1;
SELECT c.first_name, c.last_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE f.replacement_cost = (SELECT MAX(replacement_cost) FROM film) GROUP BY c.customer_id, c.first_name, c.last_name;
SELECT COUNT(*) FROM rental JOIN customer ON rental.customer_id = customer.customer_id WHERE customer.first_name = 'RUTH' AND customer.last_name = 'MARTINEZ' AND YEAR(rental.return_date) = 2005 AND MONTH(rental.return_date) = 8;
SELECT c.first_name, c.last_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT COUNT(*) FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE f.title = 'ACADEMY DINOSAUR' AND c.active = 1;
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.title ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT     c.first_name,     c.last_name,     COUNT(r.rental_id) AS total_rentals FROM     customer c JOIN     rental r ON c.customer_id = r.customer_id WHERE     (c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ') OR     (c.first_name = 'LINDA' AND c.last_name = 'WILLIAMS') GROUP BY     c.customer_id ORDER BY     total_rentals DESC LIMIT 1;
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' ORDER BY (f.rental_rate / f.rental_duration) DESC LIMIT 1;
SELECT AVG(f.replacement_cost) FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror';
Error: 第 9141 个样本有 2 个SQL。
SELECT AVG(film.length) FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE actor.first_name = 'PENELOPE' AND actor.last_name = 'GUINESS';
SELECT email FROM customer WHERE first_name = 'Diane' AND last_name = 'Collins';
SELECT COUNT(*) FROM customer WHERE active = 0;
SELECT first_name, last_name FROM customer WHERE email = 'JEREMY.HURTADO@sakilacustomer.org';
SELECT postal_code FROM address WHERE address_id = 65;
SELECT COUNT(address_id) FROM address WHERE district = 'Nordrhein-Westfalen';
SELECT phone FROM address WHERE address_id = 72;
SELECT COUNT(*) FROM film WHERE length = 178;
SELECT special_features FROM film WHERE title = 'UPRISING UPTOWN';
SELECT description FROM film_text WHERE title = 'ARTIST COLDBLOODED';
SELECT T2.address, T2.address2, T2.district FROM store AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.store_id = 2;
SELECT c.country FROM city AS ct JOIN country AS c ON ct.city_id = c.country_id WHERE ct.city = 'Clarksville'
SELECT COUNT(T2.actor_id) FROM film AS T1 JOIN film_actor AS T2 ON T1.film_id = T2.film_id WHERE T1.release_year = 2006 AND T1.rental_duration = 7 AND T1.rental_rate = 4.99 AND T1.length = 98;
SELECT f.rating FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Dan' AND a.last_name = 'Harris' AND f.length = 77 AND f.replacement_cost = 9.99;
SELECT COUNT(film_id) FROM film_actor WHERE actor_id = (SELECT actor_id FROM actor WHERE first_name = 'Daryl' AND last_name = 'Wahlberg');
SELECT T1.return_date FROM rental AS T1 JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'SHERRI' AND T2.last_name = 'RHODES' AND T1.rental_date = '2005-07-28 12:27:27'
SELECT first_name, last_name FROM staff WHERE store_id = 1;
SELECT T2.address, T2.address2, T2.district FROM store AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.store_id = 1;
SELECT T1.address, T1.address2, T1.district FROM address AS T1 JOIN staff AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'Jon' AND T2.last_name = 'Stephens';
SELECT COUNT(*) FROM address WHERE city_id IN (SELECT city_id FROM city WHERE city = 'Woodridge');
SELECT COUNT(*) FROM film WHERE language_id = (SELECT language_id FROM language WHERE name = 'English');
SELECT address.address FROM address JOIN customer ON address.address_id = customer.address_id WHERE customer.first_name = 'Heather' AND customer.last_name = 'Morris';
SELECT customer.email FROM customer JOIN address ON customer.address_id = address.address_id WHERE address.address = '1411 Lillydale Drive';
SELECT p.amount FROM payment p JOIN rental r ON p.rental_id = r.rental_id WHERE p.customer_id = 297 AND r.rental_date = '2005-07-28 12:27:27';
SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'WORKING MICROCOSMOS';
SELECT COUNT(film_id) FROM film_category JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Documentary';
SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id GROUP BY c.name ORDER BY COUNT(fc.film_id) DESC LIMIT 1;
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id WHERE i.inventory_id = 3479;
SELECT ((SUM(case when store_id = 2 then amount else 0 end) - SUM(case when store_id = 1 then amount else 0 end)) / SUM(case when store_id = 1 then amount else 0 end)) * 100 AS Percentage_more FROM payment;
SELECT COUNT(T1.city) / (SELECT COUNT(city) FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.country = 'Italy') AS Times FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.country = 'India'
SELECT     COUNT(CASE WHEN a.first_name = 'GINA' AND a.last_name = 'DEGENERES' THEN fa.film_id END) /     COUNT(CASE WHEN a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' THEN fa.film_id END) AS times_number_of_films FROM     actor a JOIN     film_actor fa ON a.actor_id = fa.actor_id;
SELECT COUNT(*) FROM film WHERE rating = 'R' AND release_year = 2006;
SELECT COUNT(*) FROM film_actor WHERE film_id = 508;
SELECT special_features FROM film WHERE title = 'Smoochy Control';
SELECT COUNT(DISTINCT customer_id) FROM payment WHERE amount > 10 AND payment_date LIKE '2005-08-%';
SELECT title FROM film WHERE length > 180;
SELECT SUM(amount) FROM payment WHERE rental_id BETWEEN 1 AND 10;
SELECT first_name, last_name FROM staff WHERE active = 1;
SELECT s.first_name, s.last_name FROM staff s WHERE s.staff_id = (SELECT st.manager_staff_id FROM store st WHERE st.store_id = 2);
SELECT COUNT(rental_id) FROM rental WHERE return_date = '2005-05-27';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Laura' AND a.last_name = 'Brody';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id WHERE i.store_id = 2 GROUP BY f.film_id HAVING COUNT(i.inventory_id) = 1;
SELECT c.first_name, c.last_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id WHERE DATEDIFF(r.return_date, r.rental_date) = 7 GROUP BY c.customer_id, c.first_name, c.last_name;
SELECT COUNT(film_id) FROM film_category JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Horror';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.title ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT T3.special_features FROM film AS T1 JOIN film_category AS T2 ON T1.film_id = T2.film_id JOIN (SELECT film_id, special_features, COUNT(*) AS frequency       FROM film       GROUP BY special_features) AS T3 ON T1.film_id = T3.film_id JOIN category AS T4 ON T2.category_id = T4.category_id WHERE T4.name = 'Science Fiction' GROUP BY T3.special_features ORDER BY SUM(T3.frequency) DESC LIMIT 1;
SELECT a.first_name, a.last_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id ORDER BY COUNT(fa.film_id) DESC LIMIT 1;
SELECT COUNT(*) FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE film.rental_duration = 7 AND category.name = 'Comedy';
SELECT s.manager_staff_id, s.store_id, COUNT(c.customer_id) as non_active_customers FROM store s JOIN customer c ON s.store_id = c.store_id WHERE c.active = 0 GROUP BY s.manager_staff_id, s.store_id ORDER BY non_active_customers DESC LIMIT 1;
SELECT MAX(f.rental_rate / f.rental_duration) AS rental_price_per_day FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Children'
SELECT T1.address, T1.address2, T1.district FROM address AS T1 JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 1;
SELECT COUNT(*) FROM customer JOIN address ON customer.address_id = address.address_id JOIN city ON address.city_id = city.city_id WHERE city.city = 'Lethbridge';
SELECT COUNT(*) FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'United States');
SELECT c.first_name, c.last_name FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id JOIN country co ON ci.country_id = co.country_id WHERE co.country = 'India';
SELECT COUNT(film_id) FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Classics' AND film.rental_rate < 1;
SELECT c.first_name, c.last_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT COUNT(r.rental_id) FROM rental r JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE f.title = 'BLANKET BEVERLY';
SELECT A.first_name, A.last_name FROM actor A JOIN film_actor FA ON A.actor_id = FA.actor_id JOIN film F ON FA.film_id = F.film_id WHERE F.rating = 'R' GROUP BY A.actor_id ORDER BY COUNT(F.film_id) DESC LIMIT 1;
SELECT a.first_name, a.last_name, COUNT(fa.film_id) AS num_films,        CAST(COUNT(fa.film_id) AS DECIMAL) / 5 AS avg_films FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id, a.first_name, a.last_name ORDER BY num_films DESC LIMIT 5;
SELECT actor_id FROM actor WHERE last_name = 'KILMER';
Error: 第 9202 个样本有 2 个SQL。
SELECT title, description, special_features FROM film WHERE length = (SELECT MAX(length) FROM film) LIMIT 5;
SELECT COUNT(rental_id) FROM rental WHERE rental_date = '2005-05-26' AND return_date = '2005-05-30';
SELECT AVG(amount) AS average_payment, customer_id FROM payment GROUP BY customer_id;
SELECT first_name, last_name, email FROM staff WHERE store_id = 2;
Error: 第 9207 个样本有 2 个SQL。
SELECT description, title FROM film_text WHERE film_id = 996;
SELECT SUM(amount) FROM payment WHERE payment_date LIKE '2005-08%';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Emily' AND a.last_name = 'Dee';
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'CHOCOLATE DUCK';
SELECT COUNT(film_id) FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Horror' AND film.rating = 'PG-13';
SELECT c.name AS category, f.title AS film_title FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Judy' AND a.last_name = 'Dean' GROUP BY c.name, f.title;
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Documentary' LIMIT 5;
SELECT T3.name, T1.rental_rate / T1.rental_duration AS rental_cost_per_day FROM film AS T1 JOIN language AS T3 ON T1.language_id = T3.language_id WHERE T1.title = 'UNTOUCHABLES SUNRISE'
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id WHERE r.rental_date LIKE '2005-05-24%';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'BRIAN' AND c.last_name = 'WYMAN' AND YEAR(r.rental_date) = 2005 AND MONTH(r.rental_date) = 7;
SELECT i.inventory_id, a.first_name, a.last_name FROM inventory i JOIN film f ON i.film_id = f.film_id JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE f.title = 'STREETCAR INTENTIONS';
SELECT f.title, c.name FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer cu ON r.customer_id = cu.customer_id WHERE cu.first_name = 'Natalie' AND cu.last_name = 'Meyer' AND YEAR(r.rental_date) = 2006 AND MONTH(r.rental_date) = 2;
SELECT COUNT(T2.rental_id) FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Eleanor' AND T1.last_name = 'Hunt';
Error: 第 9221 个样本有 2 个SQL。
SELECT (COUNT(CASE WHEN T3.country = 'India' THEN T1.customer_id END) * 100.0 / COUNT(T1.customer_id)) AS percentage FROM customer AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id JOIN city AS T4 ON T2.city_id = T4.city_id JOIN country AS T3 ON T4.country_id = T3.country_id;
SELECT     ((SUM(CASE WHEN a.first_name = 'Mary' AND a.last_name = 'Keitel' THEN 1 ELSE 0 END) *         (SELECT COUNT(*) FROM film_actor fa2 WHERE fa2.actor_id = a2.actor_id)     ) -     (SUM(CASE WHEN a.first_name = 'Angela' AND a.last_name = 'Witherspoon' THEN 1 ELSE 0 END) *         (SELECT COUNT(*) FROM film_actor fa3 WHERE fa3.actor_id = a3.actor_id)     )) /     (SUM(CASE WHEN a.first_name = 'Angela' AND a.last_name = 'Witherspoon' THEN 1 ELSE 0 END) *         (SELECT COUNT(*) FROM film_actor fa4 WHERE fa4.actor_id = a4.actor_id)     ) * 100 AS Percentage FROM     actor a LEFT JOIN     film_actor fa ON a.actor_id = fa.actor_id JOIN     actor a2 ON a2.actor_id = fa.actor_id JOIN     actor a3 ON a3.actor_id = fa.actor_id JOIN     actor a4 ON a4.actor_id = fa.actor_id WHERE     (a.first_name = 'Mary' AND a.last_name = 'Keitel') OR     (a.first_name = 'Angela' AND a.last_name = 'Witherspoon')
SELECT c.email, a.address, ci.city, co.country FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id JOIN country co ON ci.country_id = co.country_id WHERE c.first_name = 'Lillie' AND c.last_name = 'Kim';
SELECT c.first_name, c.last_name FROM customer AS c JOIN rental AS r ON c.customer_id = r.customer_id JOIN staff AS s ON r.staff_id = s.staff_id WHERE s.first_name = 'Mike' AND s.last_name = 'Hillyer' LIMIT 5;
SELECT SUM(amount) FROM payment JOIN customer ON payment.customer_id = customer.customer_id WHERE customer.first_name = 'Diane' AND customer.last_name = 'Collins';
SELECT c.first_name, c.last_name, c.email FROM customer c JOIN payment p ON c.customer_id = p.customer_id WHERE p.amount > (SELECT AVG(amount) * 0.7 FROM payment) GROUP BY c.customer_id, c.first_name, c.last_name, c.email;
SELECT COUNT(*) FROM film WHERE rental_rate = 0.99;
SELECT COUNT(*) FROM customer WHERE customer_id < 100 AND last_name = 'Thomas';
SELECT actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id JOIN film_text ON film.film_id = film_text.film_id WHERE film_text.description = 'A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Liza' AND a.last_name = 'Bergman' ORDER BY f.replacement_cost DESC LIMIT 1;
Error: 第 9232 个样本有 2 个SQL。
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Angelina' AND a.last_name = 'Astaire' AND f.replacement_cost = 27.99;
SELECT i.inventory_id FROM inventory i JOIN film f ON i.film_id = f.film_id WHERE f.title = 'African Egg';
SELECT COUNT(*) FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE film.length = 113 AND actor.first_name = 'Kirk' AND actor.last_name = 'Jovovich';
SELECT COUNT(*) FROM film JOIN inventory ON film.film_id = inventory.film_id WHERE inventory.inventory_id BETWEEN 20 AND 60 AND film.rating = 'G';
SELECT COUNT(film.film_id) FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE film.rental_rate = 4.99 AND actor.first_name = 'Bob' AND actor.last_name = 'Fawcett';
SELECT i.inventory_id FROM inventory i JOIN film f ON i.film_id = f.film_id JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Russell' AND a.last_name = 'Close' AND f.length BETWEEN 110 AND 150;
SELECT s.store_id, i.inventory_id FROM inventory i JOIN store s ON i.store_id = s.store_id JOIN film f ON i.film_id = f.film_id WHERE f.length = (SELECT MAX(length) FROM film);
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Elvis' AND a.last_name = 'Marx';
SELECT i.inventory_id FROM inventory i JOIN film f ON i.film_id = f.film_id JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE f.rental_rate = 4.99 AND a.first_name = 'Lucille' AND a.last_name = 'Dee';
SELECT T3.store_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN store AS T3 ON T2.store_id = T3.store_id WHERE T1.rental_rate > (SELECT AVG(rental_rate) * 0.6 FROM film)
SELECT     (COUNT(CASE WHEN f.rating = 'G' THEN 1 END) * 100.0 / COUNT(*)) FROM     film f JOIN     film_actor fa ON f.film_id = fa.film_id JOIN     actor a ON fa.actor_id = a.actor_id WHERE     a.first_name = 'Nick' AND a.last_name = 'Wahlberg';
SELECT address FROM address WHERE district = 'Texas' ORDER BY city_id ASC;
SELECT first_name, last_name, email FROM customer WHERE active = 0 AND YEAR(create_date) = 2006;
SELECT (COUNT(CASE WHEN rating = 'PG-13' THEN film_id END) * 100.0 / COUNT(film_id)) AS Percentage_PG13 FROM film;
SELECT title, rental_rate FROM film ORDER BY rental_rate / LEAST(rental_duration, 3) DESC LIMIT 10;
SELECT AVG(amount) FROM payment WHERE customer_id = 15;
SELECT COUNT(*) FROM (   SELECT rental_id   FROM rental   WHERE TIMESTAMPDIFF(DAY, rental_date, return_date) >     (SELECT AVG(TIMESTAMPDIFF(DAY, rental_date, return_date))      FROM rental) ) AS T;
SELECT (COUNT(CASE WHEN c.name = 'horror' THEN fc.film_id END) * 100 / COUNT(fc.film_id)) AS horror_percentage FROM film_category fc JOIN category c ON fc.category_id = c.category_id;
SELECT A.first_name, A.last_name FROM actor A JOIN film_actor FA ON A.actor_id = FA.actor_id GROUP BY A.actor_id, A.first_name, A.last_name ORDER BY COUNT(FA.film_id) DESC LIMIT 1;
SELECT T1.first_name, T1.last_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id JOIN film_category AS T3 ON T2.film_id = T3.film_id JOIN category AS T4 ON T3.category_id = T4.category_id WHERE T4.name = 'drama' GROUP BY T1.actor_id ORDER BY COUNT(T2.film_id) DESC LIMIT 1;
SELECT     (AVG(CASE WHEN c.country = 'Australia' THEN rental_count ELSE 0 END) -      AVG(CASE WHEN c.country = 'Canada' THEN rental_count ELSE 0 END)) AS diff_avg_rentals_per_day FROM (     SELECT         ci.city_id,         COUNT(r.rental_id) / DATEDIFF(MAX(r.rental_date), MIN(r.rental_date)) AS rental_count     FROM rental r     JOIN inventory i ON r.inventory_id = i.inventory_id     JOIN store s ON i.store_id = s.store_id     JOIN address a ON s.address_id = a.address_id     JOIN city ci ON a.city_id = ci.city_id     JOIN country c ON ci.country_id = c.country_id     GROUP BY ci.city_id ) AS subquery JOIN country c ON c.country_id = subquery.city_id;
SELECT (COUNT(case when c.name = 'action' then fc.film_id end) * 100.0 / COUNT(fc.film_id)) AS percentage FROM film_actor fa JOIN actor a ON fa.actor_id = a.actor_id JOIN film_category fc ON fa.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE a.first_name = 'Reese' AND a.last_name = 'Kilmer';
SELECT SUM(p.amount) FROM payment p JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id WHERE f.title = 'Clockwork Paradice';
SELECT c.first_name, c.last_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film_category fc ON i.film_id = fc.film_id GROUP BY c.customer_id HAVING COUNT(DISTINCT fc.category_id) > 5;
SELECT AVG(actor_num) AS avg_actors_in_comedies FROM (   SELECT COUNT(DISTINCT fa.actor_id) AS actor_num   FROM film_actor fa   JOIN film_category fc ON fa.film_id = fc.film_id   JOIN category c ON fc.category_id = c.category_id   WHERE c.name = 'Comedy'   GROUP BY fa.film_id ) as t;
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id WHERE c.name = 'Children' GROUP BY f.title ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN p.amount > (SELECT AVG(amount) FROM payment WHERE store_id = 1) THEN 1 END) * 100 / COUNT(p.customer_id)) AS Percentage FROM     payment p WHERE     p.store_id = 1;
SELECT c.first_name, c.last_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film_category fc ON i.film_id = fc.film_id JOIN category cat ON fc.category_id = cat.category_id WHERE cat.name IN ('Family', 'Sci-Fi') GROUP BY c.customer_id, c.first_name, c.last_name HAVING COUNT(cASE WHEN cat.name = 'Family' THEN 1 END) > COUNT(CASE WHEN cat.name = 'Sci-Fi' THEN 1 END);
SELECT title FROM film WHERE rating = 'NC-17';
SELECT COUNT(*) FROM actor WHERE last_name = 'Kilmer';
SELECT COUNT(*) FROM film WHERE length > 100;
SELECT COUNT(*) FROM payment WHERE payment_date LIKE '2005-08%';
SELECT country.country FROM country JOIN city ON country.country_id = city.country_id JOIN address ON city.city_id = address.city_id WHERE address.address = '1386 Nakhon Sawan Boulevard';
SELECT T2.name FROM film AS T1 JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.release_year = 2006 GROUP BY T1.language_id ORDER BY COUNT(T1.film_id) DESC LIMIT 1;
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Classics';
SELECT COUNT(*) FROM rental JOIN customer ON rental.customer_id = customer.customer_id WHERE customer.first_name = 'Ella' AND customer.last_name = 'Oliver' AND rental.rental_date BETWEEN '2016-06-01' AND '2016-06-30';
SELECT COUNT(DISTINCT c.customer_id) FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN staff s ON r.staff_id = s.staff_id WHERE c.first_name = 'JON' AND c.last_name = 'STEVENS';
Error: 第 9270 个样本有 2 个SQL。
SELECT first_name FROM customer WHERE address_id IN (     SELECT address_id     FROM address     WHERE postal_code LIKE '76%' );
SELECT T3.return_date FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id WHERE T1.title = 'BLOOD ARGONAUTS'
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Cuba' AND a.last_name = 'Allen';
SELECT COUNT(DISTINCT a.actor_id) FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Music';
SELECT a.first_name, a.last_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Comedy' GROUP BY a.actor_id, a.first_name, a.last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM customer WHERE customer_id NOT IN (     SELECT customer_id     FROM rental     WHERE staff_id IN (         SELECT staff_id         FROM staff         WHERE first_name = 'Mike'     ) );
SELECT A.first_name, A.last_name FROM actor A JOIN film_actor FA ON A.actor_id = FA.actor_id JOIN film F ON FA.film_id = F.film_id WHERE F.rating = 'PG-13' AND F.replacement_cost = (     SELECT MAX(replacement_cost)     FROM film     WHERE rating = 'PG-13' );
SELECT c.first_name, c.last_name FROM customer AS c JOIN rental AS r ON c.customer_id = r.customer_id WHERE r.return_date IS NULL GROUP BY c.customer_id ORDER BY COUNT(r.rental_id) DESC LIMIT 1;
SELECT COUNT(*) FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id WHERE ci.city = 'Miyakonojo';
SELECT COUNT(*) FROM customer c JOIN rental r ON c.customer_id = r.customer_id WHERE c.active = 0 AND r.return_date IS NULL;
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Animation' ORDER BY f.length ASC LIMIT 1;
SELECT c.country FROM country c JOIN city ci ON c.country_id = ci.country_id JOIN address a ON ci.city_id = a.city_id JOIN store s ON a.address_id = s.address_id JOIN staff st ON s.store_id = st.store_id JOIN rental r ON st.staff_id = r.staff_id JOIN customer cu ON r.customer_id = cu.customer_id WHERE cu.first_name = 'Hector' AND cu.last_name = 'Poinexter'
SELECT AVG(p.amount) FROM payment p JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film_category fc ON i.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror';
SELECT AVG(amount) FROM payment WHERE customer_id IN (     SELECT customer_id     FROM customer     WHERE first_name = 'Christy' AND last_name = 'Vargas' );
SELECT (COUNT(CASE WHEN T1.length < 100 AND T3.name = 'Drama' THEN T1.film_id ELSE NULL END) * 100 / COUNT(T1.film_id)) AS percentage FROM film AS T1 JOIN film_category AS T2 ON T1.film_id = T2.film_id JOIN category AS T3 ON T2.category_id = T3.category_id;
Error: 第 9286 个样本有 2 个SQL。
SELECT address_id FROM address WHERE district = 'Gansu';
SELECT c.name, c.category_id, c.last_update FROM category c ORDER BY c.last_update DESC LIMIT 3;
SELECT first_name, last_name FROM customer WHERE active = 0 LIMIT 3;
SELECT film.rental_rate / film.rental_duration AS rental_price_per_day FROM film WHERE film.title = 'Airplane Sierra'
SELECT T1.address, T1.address2, T1.district FROM address AS T1 JOIN store AS T2 ON T1.address_id = T2.address_id WHERE T2.store_id = 2;
SELECT city.city FROM city JOIN address ON city.city_id = address.city_id WHERE address.address = '1623 Kingstown Drive'
SELECT city FROM city JOIN country ON city.country_id = country.country_id WHERE country.country = 'Algeria' LIMIT 3;
SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'Agent Truman'
SELECT title FROM film WHERE film_id IN (     SELECT film_id     FROM film_category     WHERE category_id = (         SELECT category_id         FROM category         WHERE name = 'action'     )     LIMIT 3 );
SELECT     (SELECT COUNT(*) FROM film_category fc INNER JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Children') -     (SELECT COUNT(*) FROM film_category fc INNER JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Action')
SELECT T2.district FROM customer AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller';
SELECT first_name, last_name FROM customer WHERE active = 1 AND address_id IN (     SELECT address_id     FROM address     WHERE address = '1795 Santiago de Compostela Way' AND district = 'Texas' );
SELECT COUNT(*) FROM film WHERE language_id = (SELECT language_id FROM language WHERE name = 'English') AND length > 50 AND replacement_cost < 10.99;
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'ACADEMY DINOSAUR';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Penelope' AND a.last_name = 'Guiness' LIMIT 2;
SELECT (COUNT(CASE WHEN c.name = 'Documentary' THEN 1 END) * 100.0 / COUNT(fc.film_id)) AS documentary_percentage FROM film_category fc JOIN category c ON fc.category_id = c.category_id;
SELECT COUNT(*) FROM film WHERE language_id = (SELECT language_id FROM language WHERE name = 'English') AND rating = 'NC-17';
SELECT title, MAX(length) FROM film ORDER BY length DESC LIMIT 1;
SELECT COUNT(*) FROM actor WHERE first_name = 'Dan';
SELECT first_name, COUNT(first_name) as count FROM customer GROUP BY first_name ORDER BY count DESC LIMIT 1;
SELECT DISTINCT f.rating FROM film f WHERE f.special_features LIKE '%Behind the Scenes%';
SELECT customer_id, COUNT(rental_id) AS num_rentals FROM rental GROUP BY customer_id ORDER BY num_rentals DESC LIMIT 1;
SELECT title FROM film_text WHERE description LIKE '%Lacklusture%';
SELECT COUNT(*) FROM rental r JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'Francis' AND c.last_name = 'Sikes';
SELECT s.manager_staff_id, st.first_name, st.last_name FROM store s JOIN staff st ON s.manager_staff_id = st.staff_id JOIN inventory i ON s.store_id = i.store_id GROUP BY s.manager_staff_id ORDER BY COUNT(i.film_id) DESC LIMIT 1;
SELECT T2.address FROM customer AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.active = 0;
SELECT category.name, COUNT(*) as count FROM film_category JOIN category ON film_category.category_id = category.category_id GROUP BY category.name ORDER BY count DESC LIMIT 1;
SELECT a.first_name, a.last_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id JOIN film f ON fa.film_id = f.film_id WHERE f.title = 'Jason trap';
SELECT c.first_name, c.last_name FROM customer c JOIN payment p ON c.customer_id = p.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY SUM(p.amount) DESC LIMIT 1;
SELECT f.title, COUNT(i.inventory_id) as rental_count FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.title ORDER BY rental_count DESC LIMIT 5;
SELECT country.country FROM country JOIN city ON country.country_id = city.country_id WHERE city.city = 'Sasebo';
SELECT T1.address FROM address AS T1 JOIN store AS T2 ON T1.address_id = T2.address_id;
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Animation';
SELECT T3.city FROM customer AS T1 JOIN store AS T2 ON T1.store_id = T2.store_id JOIN city AS T3 ON T2.address_id = T3.city_id GROUP BY T3.city ORDER BY COUNT(T1.customer_id) DESC LIMIT 1;
SELECT a.first_name, a.last_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id, a.first_name, a.last_name ORDER BY COUNT(fa.film_id) DESC LIMIT 1;
SELECT (COUNT(CASE WHEN c.name = 'Horror' THEN 1 END) * 100.0 / COUNT(f.film_id)) AS horror_percentage FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id;
SELECT first_name, last_name FROM actor WHERE actor_id = 5;
SELECT COUNT(film_id) FROM film_category WHERE category_id = 11;
SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'BABY HALL'
SELECT A.first_name, A.last_name FROM actor A JOIN film_actor FA ON A.actor_id = FA.actor_id JOIN film F ON FA.film_id = F.film_id WHERE F.rental_rate = (SELECT MAX(rental_rate) FROM film)
SELECT ft.description FROM film_text ft JOIN film_actor fa ON ft.film_id = fa.film_id JOIN actor a ON a.actor_id = fa.actor_id WHERE a.first_name = 'JENNIFER' AND a.last_name = 'DAVIS';
SELECT c.first_name, c.last_name FROM customer AS c JOIN payment AS p ON c.customer_id = p.customer_id WHERE p.amount > 10 GROUP BY c.customer_id;
SELECT address.address FROM address JOIN customer ON address.address_id = customer.address_id WHERE customer.first_name = 'SUSAN' AND address.postal_code = '77948';
Error: 第 9330 个样本有 2 个SQL。
SELECT first_name, last_name FROM customer JOIN address ON customer.address_id = address.address_id WHERE address = '692 Joliet Street';
SELECT film.title FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE film.length > 120 AND category.name = 'action';
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'ANONYMOUS HUMAN';
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror' ORDER BY f.rental_rate ASC LIMIT 1;
SELECT film_text.description FROM film_text JOIN film_category ON film_text.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Travel';
SELECT SUM(p.amount) FROM payment p JOIN customer c ON p.customer_id = c.customer_id JOIN address a ON c.address_id = a.address_id WHERE a.district = 'Nagasaki';
SELECT (SUM(p.amount) FILTER (WHERE c.first_name = 'MARGARET' AND c.last_name = 'MOORE') / SUM(p.amount)) * 100 AS percentage FROM payment p JOIN customer c ON p.customer_id = c.customer_id;
SELECT (COUNT(film.title) FILTER (WHERE film.length > 120 AND fc.category_id = c.category_id) * 100.0 / COUNT(film.title)) AS percentage FROM film JOIN film_category fc ON film.film_id = fc.film_id JOIN category c ON c.category_id = fc.category_id WHERE c.name = 'Horror';
SELECT COUNT(*) FROM film WHERE release_year = 2006;
SELECT title FROM film WHERE film_id BETWEEN 1 AND 10;
SELECT film_id, rental_duration FROM film WHERE rental_duration = (SELECT MAX(rental_duration) FROM film);
SELECT title FROM film WHERE rental_rate = (SELECT MAX(rental_rate) FROM film);
SELECT title FROM film WHERE rating = 'G';
SELECT T2.name FROM film AS T1 JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'CHILL LUCK'
SELECT f.title, f.last_update FROM film f JOIN language l ON f.language_id = l.language_id WHERE l.name = 'English' AND f.release_year = 2006;
SELECT COUNT(*) FROM film WHERE language_id = (SELECT language_id FROM language WHERE name = 'Italian') AND special_features LIKE '%deleted scenes%';
SELECT COUNT(film.title) FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Animation' AND film.rating = 'NC-17';
SELECT DISTINCT f.rating FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'action';
SELECT f.film_id FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Comedy';
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Documentary' ORDER BY f.length DESC LIMIT 1;
SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'BLADE POLISH';
SELECT rental_id FROM rental JOIN customer ON rental.customer_id = customer.customer_id WHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith';
SELECT first_name, last_name FROM customer WHERE customer_id IN (     SELECT customer_id     FROM rental     WHERE staff_id = 1 );
SELECT DISTINCT c.email FROM customer c JOIN rental r ON c.customer_id = r.customer_id WHERE r.staff_id = 2;
SELECT actor_id FROM film_actor WHERE film_id = (     SELECT film_id     FROM film     WHERE title = 'BOUND CHEAPER' );
SELECT inventory_id FROM rental WHERE customer_id = (     SELECT customer_id     FROM customer     WHERE first_name = 'KAREN' AND last_name = 'JACKSON' );
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Jane' AND a.last_name = 'Jackman';
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'BIRD INDEPENDENCE';
SELECT SUM(f.rental_rate) FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Animation';
SELECT AVG(film.rental_rate) FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Sci-Fi';
SELECT     (COUNT(CASE WHEN c.name = 'Horror' THEN f.film_id END) / COUNT(f.film_id)) * 100 AS Horror_Film_Percentage FROM     film f JOIN     film_category fc ON f.film_id = fc.film_id JOIN     category c ON fc.category_id = c.category_id JOIN     language l ON f.language_id = l.language_id WHERE     l.name = 'English'
SELECT COUNT(*) FROM film WHERE rating = 'NC-17' AND rental_duration < 4;
SELECT title FROM film WHERE rating = 'R' AND length = 71 AND replacement_cost = 29.99;
SELECT c.email FROM customer c JOIN rental r ON c.customer_id = r.customer_id WHERE c.active = 1 AND r.rental_date BETWEEN '2005-05-25 19:37:47' AND '2005-05-26 10:06:49';
SELECT SUM(amount) FROM payment JOIN customer ON payment.customer_id = customer.customer_id WHERE customer.first_name = 'SARAH' AND customer.last_name = 'LEWIS';
SELECT COUNT(*) FROM payment WHERE payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 10:08:29' AND customer_id IN (SELECT customer_id FROM customer WHERE first_name = 'SUSAN' AND last_name = 'WILSON');
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'ALABAMA DEVIL';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Sandra' AND a.last_name = 'Kilmer';
SELECT COUNT(film.film_id) FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'documentary' AND film.rating = 'PG-13';
SELECT f.title, c.name, f.special_features FROM film AS f JOIN film_category AS fc ON f.film_id = fc.film_id JOIN category AS c ON fc.category_id = c.category_id WHERE f.rental_duration * f.rental_rate > 30;
SELECT T2.first_name, T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.title = 'AFRICAN EGG'
SELECT COUNT(*) FROM rental r JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'Maria' AND c.last_name = 'Miller';
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'Dorothy' AND c.last_name = 'Taylor' ORDER BY r.rental_date DESC LIMIT 1;
Error: 第 9374 个样本有 2 个SQL。
SELECT address.address, film.rental_rate FROM film JOIN inventory ON film.film_id = inventory.film_id JOIN store ON inventory.store_id = store.store_id JOIN address ON store.address_id = address.address_id WHERE film.title = 'WYOMING STORM';
SELECT TIMESTAMPDIFF(DAY, T1.rental_date, T1.return_date) AS Difference FROM rental AS T1 JOIN inventory AS T2 ON T1.inventory_id = T2.inventory_id JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'DESTINY SATURDAY' AND T1.customer_id = (SELECT customer_id FROM customer WHERE first_name = 'AUSTIN' AND last_name = 'CINTRON')
SELECT COUNT(film_id) FROM film_actor WHERE actor_id = (     SELECT actor_id     FROM actor     WHERE first_name = 'Nick' AND last_name = 'Stallone' );
SELECT f.title FROM film f JOIN (   SELECT film_id, MIN(length) as min_length   FROM film   GROUP BY film_id ) AS shortest_film ON f.film_id = shortest_film.film_id JOIN (   SELECT film_id, MAX(rental_duration * rental_rate) as max_revenue   FROM film   GROUP BY film_id ) AS max_revenue_film ON f.film_id = max_revenue_film.film_id WHERE f.length = shortest_film.min_length AND f.rental_duration * f.rental_rate = max_revenue_film.max_revenue;
SELECT SUM(amount) FROM payment WHERE customer_id IN (     SELECT customer_id     FROM customer     WHERE first_name = 'Stephanie' AND last_name = 'Mitchell' ) AND payment_date LIKE '2005-06%';
SELECT AVG(replacement_cost) FROM film WHERE rental_rate = 4.99;
SELECT AVG(rental_rate) FROM film WHERE rating = 'PG-13';
SELECT (COUNT(CASE WHEN active = 0 THEN customer_id END) * 100.0 / COUNT(customer_id)) AS percentage_inactive_customers FROM customer WHERE store_id = 1;
SELECT rental_duration FROM film WHERE title = 'DIRTY ACE'
SELECT first_name, last_name FROM customer WHERE email = 'SHEILA.WELLS@sakilacustomer.org';
SELECT title FROM film WHERE length = (SELECT MAX(length) FROM film) ORDER BY title;
SELECT COUNT(*) FROM film_category;
WITH MaryRentals AS (   SELECT COUNT(*) AS TotalRentals,          EXTRACT(MONTH FROM rental_date) AS RentalMonth,          EXTRACT(YEAR FROM rental_date) AS RentalYear   FROM rental r   JOIN customer c ON r.customer_id = c.customer_id   WHERE c.first_name = 'MARY' AND c.last_name = 'SMITH' ), JuneRentals AS (   SELECT COUNT(*) AS JuneRentals   FROM MaryRentals   WHERE RentalMonth = 6 AND RentalYear = 2005 ) SELECT TotalRentals,        JuneRentals,        (JuneRentals::NUMERIC / TotalRentals::NUMERIC) * 100 AS PercentageJuneRentals FROM MaryRentals CROSS JOIN JuneRentals;
SELECT COUNT(*) FROM customer WHERE active = 1;
SELECT title FROM film WHERE rating = 'PG-13';
SELECT title FROM film WHERE rental_duration > 5 LIMIT 10;
SELECT city FROM city JOIN country ON city.country_id = country.country_id WHERE country.country = 'United Arab Emirates';
SELECT c.first_name, c.last_name FROM customer AS c JOIN payment AS p ON c.customer_id = p.customer_id WHERE p.amount > 10 LIMIT 5;
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Burt' AND a.last_name = 'Dukakis';
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'ENDING CROWDS';
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'BOUND CHEAPER';
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Karl' AND a.last_name = 'Berr' AND f.rating = 'PG';
SELECT city FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'Philippines') LIMIT 3;
SELECT f.title FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id GROUP BY f.title ORDER BY COUNT(r.rental_id) LIMIT 1;
SELECT ft.description FROM film_text ft JOIN film_actor fa ON ft.film_id = fa.film_id JOIN actor a ON a.actor_id = fa.actor_id WHERE a.first_name = 'Lucille' AND a.last_name = 'Tracy';
SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'BEACH HEARTBREAKERS'
SELECT f.title FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE c.name = 'Horror' LIMIT 10;
SELECT DISTINCT actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.rating = 'NC-17';
SELECT AVG(film.rental_rate) FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE actor.first_name = 'Lucille' AND actor.last_name = 'Tracy';
SELECT COUNT(*) FROM film WHERE length BETWEEN 100 AND 110;
SELECT actor_id FROM actor WHERE last_name = 'Dee';
SELECT COUNT(*) FROM customer WHERE first_name = 'Nina' AND active = 1;
SELECT COUNT(*) FROM film JOIN inventory ON film.film_id = inventory.film_id WHERE film.rating = 'R' AND inventory.store_id = 2;
SELECT DISTINCT s.store_id FROM store s JOIN inventory i ON s.store_id = i.store_id JOIN film f ON i.film_id = f.film_id JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Reese' AND a.last_name = 'West' AND f.length < 100;
SELECT f.length FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Nick' AND a.last_name = 'Wahlberg' ORDER BY f.rental_rate DESC LIMIT 1;
SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Russell' AND a.last_name = 'Close';
SELECT s.store_id FROM store s JOIN inventory i ON s.store_id = i.store_id JOIN film f ON i.film_id = f.film_id WHERE f.title = 'Amadeus Holy';
SELECT COUNT(*) FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE film.rental_rate = 2.99 AND actor.first_name = 'Nina' AND actor.last_name = 'Soto';
(SELECT COUNT(film_id) FROM film_actor fa JOIN actor a ON fa.actor_id = a.actor_id JOIN film f ON fa.film_id = f.film_id JOIN inventory i ON f.film_id = i.film_id WHERE a.first_name = 'Reese' AND a.last_name = 'West' AND i.store_id = 1) - (SELECT COUNT(film_id) FROM film_actor fa JOIN actor a ON fa.actor_id = a.actor_id JOIN film f ON fa.film_id = f.film_id JOIN inventory i ON f.film_id = i.film_id WHERE a.first_name = 'Reese' AND a.last_name = 'West' AND i.store_id = 2)
SELECT postal_code FROM address WHERE address = '692 Joliet Street';
SELECT COUNT(*) FROM customer WHERE active = 1;
SELECT COUNT(*) FROM customer WHERE store_id = 1 AND active = 1;
SELECT T1.address FROM address AS T1 JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'Mary' AND T2.last_name = 'Smith';
SELECT COUNT(*) FROM customer JOIN address ON customer.address_id = address.address_id JOIN city ON address.city_id = city.city_id WHERE customer.active = 1 AND city.city = 'Arlington';
SELECT c.first_name, c.last_name FROM customer c JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id JOIN country co ON ci.country_id = co.country_id WHERE co.country = 'Italy';
SELECT c.country FROM country c JOIN city ci ON c.country_id = ci.country_id JOIN address a ON ci.city_id = a.city_id JOIN customer cu ON a.address_id = cu.address_id WHERE cu.first_name = 'Mary' AND cu.last_name = 'Smith'
SELECT MAX(amount) FROM payment WHERE customer_id = (SELECT customer_id                      FROM customer                      WHERE first_name = 'Mary' AND last_name = 'Smith');
SELECT COUNT(*) FROM rental r JOIN customer c ON r.customer_id = c.customer_id WHERE c.first_name = 'Mary' AND c.last_name = 'Smith';
SELECT SUM(amount) FROM payment JOIN customer ON payment.customer_id = customer.customer_id WHERE customer.first_name = 'MARY' AND customer.last_name = 'SMITH';
SELECT COUNT(*) FROM payment JOIN customer ON payment.customer_id = customer.customer_id WHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith' AND YEAR(payment.payment_date) = 2005 AND MONTH(payment.payment_date) = 6;
SELECT c.first_name, c.last_name FROM customer c JOIN payment p ON c.customer_id = p.customer_id WHERE p.amount = (     SELECT MAX(amount)     FROM payment ) GROUP BY c.customer_id, c.first_name, c.last_name;
SELECT SUM(p.amount) AS Total_Spent FROM payment p JOIN rental r ON p.rental_id = r.rental_id JOIN inventory i ON r.inventory_id = i.inventory_id JOIN store s ON i.store_id = s.store_id JOIN address a ON s.address_id = a.address_id JOIN city c ON a.city_id = c.city_id JOIN country co ON c.country_id = co.country_id WHERE co.country = 'Italy'
SELECT COUNT(*) FROM payment WHERE amount > 4.99 AND customer_id IN (     SELECT customer_id     FROM customer     WHERE first_name = 'MARY' AND last_name = 'SMITH' );
SELECT AVG(p.amount) FROM payment p JOIN customer c ON p.customer_id = c.customer_id JOIN address a ON c.address_id = a.address_id JOIN city ci ON a.city_id = ci.city_id JOIN country co ON ci.country_id = co.country_id WHERE co.country = 'Italy';
SELECT MAX(frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)`) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Alameda';
SELECT     School_Name,     (`Free Meal Count (Ages 5-17)`) / (`Enrollment (Ages 5-17)`) AS Eligible_Free_Rate FROM     frpm WHERE     School_Type = 'Continuation' ORDER BY     Eligible_Free_Rate ASC LIMIT 3;
SELECT schools.Zip FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`Charter School (Y/N)` = 'Y' AND schools.County = 'Fresno' AND schools.District = 'Fresno County Office of Education';
SELECT schools.MailStreet, schools.MailCity, schools.MailZip, schools.MailState FROM schools JOIN frpm ON schools.CDSCode = frpm.'School Code' WHERE frpm.'FRPM Count (K-12)' = (     SELECT MAX('FRPM Count (K-12)')     FROM frpm )
SELECT schools.Phone FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`Charter School (Y/N)` = 'Y' AND frpm.Charter Funding Type = 'Direct' AND schools.OpenDate > '2000-01-01';
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE AvgScrMath < 400 AND schools.Virtual = 'F';
SELECT schools.School FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr > 500 AND schools.Magnet = 1;
SELECT schools.Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumGE1500 = (SELECT MAX(satscores.NumGE1500) FROM satscores) AND satscores.AvgScrMath + satscores.AvgScrRead + satscores.AvgScrWrite > 1500;
SELECT T2.NumTstTakr FROM ( SELECT CDSCode, MAX(`FRPM Count (K-12)`) as MaxFRPM FROM frpm GROUP BY CDSCode ORDER BY MaxFRPM DESC LIMIT 1 ) AS T1 JOIN satscores AS T2 ON T1.CDSCode = T2.cds;
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE AvgScrMath > 560 AND schools.FundingType = 'Directly Charter-Funded';
SELECT frpm."FRPM Count (Ages 5-17)" FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE satscores.AvgScrRead = (     SELECT MAX(AvgScrRead)     FROM satscores )
SELECT CDSCode FROM frpm WHERE (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500;
SELECT MAX(f.frpm.`Percent (%) Eligible Free (Ages 5-17)`) FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds WHERE (satscores.NumGE1500 / satscores.NumTstTakr) > 0.3;
SELECT schools.Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr > 0 ORDER BY (satscores.NumGE1500 / satscores.NumTstTakr) DESC LIMIT 3;
SELECT NCESSchool FROM frpm ORDER BY Enrollment (Ages 5-17) DESC LIMIT 5;
SELECT     s.district,     AVG(s.AvgScrRead) as avg_reading_score FROM     satscores s JOIN     schools sc ON s.cds = sc.CDSCode WHERE     sc.StatusType = 'Active' GROUP BY     s.district ORDER BY     avg_reading_score DESC LIMIT 1;
SELECT COUNT(*) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Alameda' AND ss.NumTstTakr < 100;
SELECT schools.CharterSchoolNumber FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrWrite = 499;
SELECT COUNT(*) FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds WHERE f.County_Name = 'Contra Costa' AND f.District_Type = 'Directly Funded' AND ss.NumTstTakr <= 250;
SELECT schools.Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)
SELECT COUNT(*) FROM frpm WHERE County_Name = 'Amador' AND Low_Grade = 9 AND High_Grade = 12;
SELECT COUNT(*) FROM frpm WHERE `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)` < 700 AND `District Name` = 'Los Angeles'
SELECT s.sname, MAX(ss.NumTstTakr) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Contra Costa' GROUP BY s.sname ORDER BY ss.NumTstTakr DESC LIMIT 1;
SELECT schools.School, schools.Street, schools.City, schools.Zip FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE ABS(frpm."Enrollment (K-12)" - frpm."Enrollment (Ages 5-17)") > 30;
SELECT s.School FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds WHERE f."Percent (%) Eligible Free (K-12)" > 10 AND ss.NumGE1500 > 0;
SELECT schools.School, schools.FundingType FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Riverside' GROUP BY schools.CDSCode, schools.School, schools.FundingType HAVING AVG(satscores.AvgScrMath) > 400;
SELECT schools.School, schools.Street, schools.City, schools.Zip, schools.State FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'Monterey' AND schools.GSoffered LIKE '%High%' AND frpm.FRPMCount('Ages 5-17') > 800;
SELECT     s.sname AS School_Name,     ss.AvgScrWrite AS Average_Writing_Score,     s.Phone AS Communication_Number FROM     satscores ss JOIN     schools s ON ss.cds = s.CDSCode WHERE     (s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-01-01') AND     ss.rtype = 'school' ORDER BY     s.sname;
SELECT s.School, s.DOCType FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.Charter Funding Type = 'Locally Funded' AND (f.Enrollment (K-12) - f.Enrollment (Ages 5-17)) >     (SELECT AVG(f.Enrollment (K-12) - f.Enrollment (Ages 5-17))      FROM frpm f      WHERE f.Charter Funding Type = 'Locally Funded')
Error: 第 9458 个样本有 2 个SQL。
SELECT City, MIN(Enrollment) as Min_Enrollment FROM (   SELECT City, Enrollment(K_12) as Enrollment   FROM schools   INNER JOIN frpm ON schools.CDSCode = frpm.School Code   WHERE Low Grade >= 1 AND High Grade <= 12 ) as subquery GROUP BY City ORDER BY Min_Enrollment ASC LIMIT 5;
SELECT     frpm.School Name,     frpm.`Percent (%) Eligible Free (K-12)` AS Eligible_Free_Rate FROM     frpm JOIN     schools ON frpm.CDSCode = schools.CDSCode WHERE     schools.GSoffered LIKE '%1-%12%' ORDER BY     frpm.`Enrollment (K-12)` DESC LIMIT 10, 2;
SELECT     s.SchoolName,     (f.FRPMCountK12 / f.EnrollmentK12) * 100 AS EligibleFreeReducedMealRate FROM     frpm f JOIN     schools s ON f.CDSCode = s.CDSCode WHERE     f.LowGrade <= 1 AND f.HighGrade >= 12 AND s.SOC = 66 ORDER BY     f.FRPMCountK12 DESC LIMIT 5;
Error: 第 9462 个样本有 2 个SQL。
SELECT (`Free Meal Count (Ages 5-17)`) / (`Enrollment (Ages 5-17)`) AS FreeRate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Kacey' AND schools.AdmLName1 = 'Gibson'
SELECT T3.AdmEmail1 FROM frpm AS T1 JOIN schools AS T3 ON T1.CDSCode = T3.CDSCode WHERE T1.`Charter School (Y/N)` = 'Y' ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 1;
SELECT T3.AdmFName1, T3.AdmLName1 FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode JOIN (     SELECT CDSCode, MAX(NumTstTakr) AS MaxTestTakers     FROM satscores     WHERE NumGE1500 >= 1500     GROUP BY CDSCode ) AS T4 ON T1.cds = T4.CDSCode AND T1.NumTstTakr = T4.MaxTestTakers WHERE T1.NumGE1500 >= 1500 ORDER BY T1.NumTstTakr DESC LIMIT 1;
SELECT schools.Street, schools.City, schools.Zip, schools.State FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumGE1500 / satscores.NumTstTakr = (     SELECT MIN(excellence_rate)     FROM (         SELECT satscores.NumGE1500 / satscores.NumTstTakr AS excellence_rate         FROM satscores     ) AS subquery );
SELECT schools.Website FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Los Angeles' AND satscores.NumTstTakr BETWEEN 2000 AND 3000;
SELECT AVG(s.NumTstTakr) FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE sc.City = 'Fresno' AND sc.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';
SELECT schools.Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.District = 'Fresno Unified' ORDER BY satscores.AvgScrRead ASC LIMIT 1;
SELECT satscores.sname, satscores.AvgScrRead FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.Virtual = 'F' ORDER BY satscores.AvgScrRead DESC LIMIT 5;
SELECT schools.SchoolType FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)
Error: 第 9472 个样本有 2 个SQL。
SELECT s.city, AVG(sats.AvgScrWrite) FROM schools s JOIN satscores sats ON s.CDSCode = sats.cds WHERE sats.NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 > 0) GROUP BY s.city;
SELECT schools.School, AVG(satscores.AvgScrWrite) AS AvgWritingScore FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.AdmFName1 = 'Ricci' AND schools.AdmLName1 = 'Ulrich' GROUP BY schools.School;
SELECT s.School, s.Enroll12 FROM schools AS s JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE f.DOC = 31 ORDER BY s.Enroll12 DESC LIMIT 1;
SELECT COUNT(*) / 12 AS Monthly_Average FROM schools WHERE County = 'Alameda' AND DOC = 52 AND OpenDate LIKE '1980%';
SELECT     (COUNT(CASE WHEN DOC = 54 THEN CDSCode END) / COUNT(CASE WHEN DOC = 52 THEN CDSCode END)) as ratio FROM     schools WHERE     County = 'Orange'     AND Charter = 'Merged';
SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1;
SELECT schools.MailStreet, schools.School FROM schools JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.AvgScrMath DESC LIMIT 5,1;
SELECT T3.MailStreet, T3.sname FROM satscores AS T1 JOIN schools AS T2 ON T1.cds = T2.CDSCode JOIN schools AS T3 ON T2.CDSCode = T3.CDSCode WHERE T1.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores)
SELECT COUNT(schools.CDSCode) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.MailCity = 'Lakeport' AND (satscores.AvgScrRead + satscores.AvgScrMath + satscores.AvgScrWrite) >= 1500;
SELECT SUM(satscores.NumTstTakr) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.MailCity = 'Fresno'
SELECT schools.School, schools.MailZip FROM schools WHERE (schools.AdmFName1 = 'Avetik' AND schools.AdmLName1 = 'Atoian') OR (schools.AdmFName2 = 'Avetik' AND schools.AdmLName2 = 'Atoian') OR (schools.AdmFName3 = 'Avetik' AND schools.AdmLName3 = 'Atoian');
SELECT     (SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND County = 'Colusa') /     (SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND County = 'Humboldt') AS Ratio;
SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND County = 'San Joaquin' AND StatusType = 'Active';
SELECT schools.Phone, schools.Ext FROM schools JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.AvgScrWrite DESC LIMIT 1 OFFSET 332;
SELECT schools.School, schools.Phone, schools.Ext FROM schools WHERE schools.Zip = '95203-3704';
SELECT schools.Website FROM schools JOIN (   SELECT CDSCode   FROM schools   WHERE AdmFName1 = 'Mike' AND AdmLName1 = 'Larson'   UNION   SELECT CDSCode   FROM schools   WHERE AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez' ) AS admins ON schools.CDSCode = admins.CDSCode;
SELECT Website FROM schools WHERE Charter = 1 AND Virtual = 'P' AND County = 'San Joaquin';
SELECT COUNT(*) FROM schools WHERE City = 'Hickman' AND DOC = 52 AND Charter = 1;
SELECT COUNT(*) FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Los Angeles' AND f.`Percent (%) Eligible Free (K-12)` < 0.18 AND f.Charter School (Y/N) = 0;
SELECT schools.School, schools.City,        schools.AdmFName1 || ' ' || schools.AdmLName1 AS Administrator1,        schools.AdmFName2 || ' ' || schools.AdmLName2 AS Administrator2,        schools.AdmFName3 || ' ' || schools.AdmLName3 AS Administrator3 FROM schools WHERE schools.Charter = 1 AND schools.CharterNum = '00D2';
SELECT COUNT(*) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4';
SELECT     (COUNT(CASE WHEN FundingType = 'Local' THEN 1 END) * 100.0 / COUNT(*)) AS Ratio_Percentage FROM     california_schools.frpm WHERE     County_Name = 'Santa Clara' AND     Charter_School = 'Y';
SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly Funded' AND County = 'Stanislaus' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';
SELECT SUM(Enrollment (K-12)) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.City = 'San Francisco' AND schools.StatusType = 'Closed' AND schools.ClosedDate = '1989' AND frpm.District Type = 'Community College District';
SELECT County, COUNT(*) AS ClosureCount FROM schools WHERE substr(ClosedDate, 1, 4) BETWEEN '1980' AND '1989' AND SOC = '11' GROUP BY County ORDER BY ClosureCount DESC LIMIT 1;
SELECT NCESDist FROM schools WHERE SOC = 31;
SELECT COUNT(*) FROM schools WHERE County = 'Alpine' AND District LIKE '%Community Day%' AND StatusType IN ('Active', 'Closed');
SELECT District Code FROM schools WHERE Magnet = 0 AND City = 'Fresno';
SELECT COUNT(*) FROM frpm WHERE School_Name = 'State Special School' AND County_Name = 'Fremont' AND Academic_Year = '2014-2015' AND EdOpsCode = 'SSS' AND Enrollment (Ages 5-17);
SELECT frpm."FRPM Count (Ages 5-17)" FROM frpm JOIN schools ON frpm."CDSCode" = schools."CDSCode" WHERE schools."School" = 'Youth Authority School' AND schools."MailStreet" = 'PO Box 1040';
SELECT LOW GRADE FROM frpm WHERE EdOpsCode = 'SPECON' AND NCESDist = 613360 ORDER BY LOW GRADE LIMIT 1;
SELECT schools.School, frpm.Educational_Option_Type FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.County_Code = 37 AND frpm.NSLP_Provision_Status = 'Breakfast Provision 2';
SELECT schools.City FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.County_Name = 'Merced' AND frpm.NSLP_Provision_Status = '2' AND frpm.Low_Grade = '9' AND frpm.High_Grade = '12' AND schools.EILCode = 'HS';
SELECT schools.School, (frpm.`Free Meal Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)` * 100) AS 'Percent (%) Eligible FRPM (Ages 5-17)' FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.County Name = 'Los Angeles' AND frpm.Low Grade = 'KG' AND frpm.High Grade = '09'
SELECT GSserved, COUNT(*) as count FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY count DESC LIMIT 1;
SELECT County, COUNT(*) AS Num_Schools FROM schools WHERE Virtual = 'F' AND County IN ('San Diego', 'Santa Barbara') GROUP BY County ORDER BY Num_Schools DESC LIMIT 1;
SELECT schools.School, schools.Latitude, schools.SchoolType FROM schools WHERE schools.Latitude = (SELECT MAX(Latitude) FROM schools);
SELECT schools.City, schools.School, schools.LowGrade FROM schools WHERE schools.Latitude = (SELECT MIN(Latitude) FROM schools WHERE State = 'CA') AND schools.State = 'CA';
SELECT GSoffered FROM schools WHERE Longitude = (SELECT MAX(Longitude) FROM schools);
SELECT COUNT(schools.CDSCode), schools.City, COUNT(schools.City) as School_Count FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.Magnet = 1 AND frpm.LowGrade = 'K' AND frpm.HighGrade = '8' GROUP BY schools.City;
SELECT AdmFName1, COUNT(*) as count, District FROM schools GROUP BY AdmFName1, District ORDER BY count DESC LIMIT 2;
SELECT T1.DistrictCode, (T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` * 100) AS Percent_Eligible_Free_K_12 FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine' OR T2.AdmFName2 = 'Alusine' OR T2.AdmFName3 = 'Alusine';
SELECT schools.District, california_schools.County, schools.School, AdmLName1 FROM schools JOIN california_schools ON schools.CDSCode = california_schools.CDSCode WHERE california_schools."Charter School Number" = '40';
SELECT AdmEmail1, AdmEmail2, AdmEmail3 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND (SOC = 62 OR DOC = 54) AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31'
SELECT schools.AdmEmail1, schools.School FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores)
SELECT COUNT(*) FROM account JOIN disp ON account.account_id = disp.account_id JOIN card ON disp.disp_id = card.disp_id JOIN district ON account.district_id = district.district_id WHERE card.type = 'POPLATEK PO OBRATU' AND district.A3 = 'East Bohemia';
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague';
SELECT     AVG(A13) AS Unemployment_1996,     AVG(A12) AS Unemployment_1995 FROM     district;
SELECT COUNT(*) FROM (   SELECT district_id   FROM client   WHERE gender = 'F'   GROUP BY district_id   HAVING AVG(A11) BETWEEN 6000 AND 10000 ) AS result;
SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.A3 = 'North Bohemia' AND district.A11 > 8000;
WITH OldestFemaleClients AS (     SELECT c.client_id, MAX(c.birth_date) AS OldestBirthDate     FROM client c     WHERE c.gender = 'F'     GROUP BY c.client_id ), AverageSalary AS (     SELECT d.client_id, AVG(d.A11) AS AvgSalary     FROM district d     JOIN OldestFemaleClients o ON d.district_id = o.client_id     GROUP BY d.client_id ), MinAvgSalary AS (     SELECT MIN(AvgSalary) AS MinSalary     FROM AverageSalary ), MaxAvgSalary AS (     SELECT MAX(AvgSalary) AS MaxSalary     FROM AverageSalary ), GapCalculation AS (     SELECT (MaxAvgSalary.MaxSalary - MinAvgSalary.MinSalary) AS SalaryGap     FROM MaxAvgSalary, MinAvgSalary ) SELECT a.account_id, GapCalculation.SalaryGap FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN district dt ON c.district_id = dt.district_id JOIN AverageSalary av ON c.client_id = av.client_id JOIN GapCalculation g ON true WHERE c.gender = 'F' AND c.birth_date = (SELECT OldestBirthDate FROM OldestFemaleClients) AND av.AvgSalary = (SELECT MinSalary FROM MinAvgSalary);
SELECT a.account_id FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN district ds ON c.district_id = ds.district_id WHERE c.birth_date = (     SELECT MAX(birth_date) FROM client ) AND ds.A11 = (     SELECT MAX(A11) FROM district ) GROUP BY a.account_id;
SELECT COUNT(*) FROM client c JOIN disp d ON c.client_id = d.client_id WHERE d.type = 'POPLATEK TYDNE' AND c.gender = 'Owner';
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id WHERE d.type = 'POPLATEK PO OBRATU';
SELECT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.date LIKE '1997%' AND l.status = 'approved' AND a.frequency = 'POPLATEK TYDNE' ORDER BY l.amount ASC LIMIT 1;
SELECT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 12 AND YEAR(a.date) = 1993 ORDER BY l.amount DESC LIMIT 1;
SELECT COUNT(*) FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND district.A2 = 'Slokolov';
SELECT account_id FROM trans WHERE date LIKE '1995%' GROUP BY account_id ORDER BY MIN(date) LIMIT 1;
SELECT DISTINCT a.account_id FROM account a JOIN trans t ON a.account_id = t.account_id WHERE a.date < '1997-01-01' AND t.balance > 3000;
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE ca.issued = '1994-03-03';
SELECT a.date FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.amount = 840 AND t.date = '1998-10-14';
SELECT d.district_id FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.date = '1994-08-25' AND l.status = 'approved';
SELECT MAX(t.amount) FROM trans t JOIN account a ON t.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN card c ON d.disp_id = c.disp_id WHERE c.issued = '1996-10-21'
SELECT c.gender FROM client c JOIN disp d ON c.client_id = d.client_id JOIN district dt ON c.district_id = dt.district_id WHERE c.birth_date = (     SELECT MIN(birth_date)     FROM client     WHERE district_id IN (         SELECT district_id         FROM district         ORDER BY A11 DESC         LIMIT 1     ) ) LIMIT 1;
SELECT t.trans_id, t.amount FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.client_id = c.client_id JOIN loan l ON a.account_id = l.account_id WHERE c.client_id = (     SELECT c1.client_id     FROM client c1     JOIN loan l1 ON c1.client_id = l1.client_id     GROUP BY c1.client_id     ORDER BY SUM(l1.amount) DESC     LIMIT 1 ) AND t.date > a.date ORDER BY t.date LIMIT 1;
SELECT COUNT(c.client_id) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN district dis ON c.district_id = dis.district_id WHERE dis.A2 = 'Jesenik' AND c.gender = 'F';
SELECT disp.disp_id FROM disp JOIN account ON disp.account_id = account.account_id JOIN trans ON account.account_id = trans.account_id WHERE trans.amount = 5100 AND trans.date = '1998-09-02' AND trans.currency = 'USD';
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Litomerice' AND YEAR(account.date) = 1996;
Error: 第 9541 个样本有 2 个SQL。
SELECT T1.birth_date FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.account_id IN (SELECT account_id FROM loan WHERE date = '1996-01-03' AND amount = 98832);
SELECT account.account_id FROM account JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague' ORDER BY account.date LIMIT 1;
SELECT     (COUNT(CASE WHEN c.gender = 'M' THEN 1 END) * 100.0 / COUNT(c.client_id)) AS male_percentage FROM     client c JOIN     disp d ON c.client_id = d.client_id JOIN     district dt ON d.disp_id = dt.district_id WHERE     dt.A3 = 'south Bohemia' GROUP BY     dt.A3 HAVING     dt.A4 = (SELECT MAX(A4) FROM district WHERE A3 = 'south Bohemia');
SELECT     ((t2.balance - t1.balance) / t1.balance) * 100 AS Increase_Rate FROM     (SELECT          trans.account_id,          trans.balance      FROM          trans      JOIN          account ON trans.account_id = account.account_id      JOIN          disp ON account.account_id = disp.account_id      JOIN          client ON disp.client_id = client.client_id      WHERE          client.client_id =              (SELECT                   client.client_id               FROM                   client               JOIN                   disp ON client.client_id = disp.client_id               JOIN                   account ON disp.account_id = account.account_id               JOIN                   loan ON account.account_id = loan.account_id               WHERE                   loan.date = '1993-07-05'              LIMIT 1)      AND          trans.date = '1993-03-22') t1,     (SELECT          trans.account_id,          trans.balance      FROM          trans      JOIN          account ON trans.account_id = account.account_id      JOIN          disp ON account.account_id = disp.account_id      JOIN          client ON disp.client_id = client.client_id      WHERE          client.client_id =              (SELECT                   client.client_id               FROM                   client               JOIN                   disp ON client.client_id = disp.client_id               JOIN                   account ON disp.account_id = account.account_id               JOIN                   loan ON account.account_id = loan.account_id               WHERE                   loan.date = '1993-07-05'              LIMIT 1)      AND          trans.date = '1998-12-27') t2 WHERE     t1.account_id = t2.account_id;
SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) / SUM(amount)) * 100 AS percentage FROM loan;
SELECT     (COUNT(CASE WHEN l.status = 'C' THEN l.loan_id END) * 100.0 / COUNT(l.loan_id)) AS percentage_running_loans FROM     loan l JOIN     account a ON l.account_id = a.account_id WHERE     l.amount < 100000;
SELECT     a.account_id,     d.A2 AS district_name,     d.A3 AS district_region FROM     account a JOIN     district d ON a.district_id = d.district_id JOIN     trans t ON a.account_id = t.account_id JOIN     card c ON a.account_id = c.disp_id WHERE     YEAR(a.date) = 1993 AND     c.type = 'POPLATEK PO OBRATU' GROUP BY     a.account_id,     d.A2,     d.A3;
SELECT account.account_id, account.frequency FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE district.A2 = 'east Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31';
SELECT account_id, date FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Prachatice';
Error: 第 9551 个样本有 2 个SQL。
SELECT account.account_id, district.A2 AS District, district.A3 AS Region FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000;
SELECT loan.loan_id, district.A3, AVG(district.A11) as average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.duration = 60 GROUP BY loan.loan_id, district.A3;
SELECT     d.district_id,     ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_rate_increment FROM     district d JOIN     disp dp ON d.district_id = dp.district_id JOIN     account a ON dp.account_id = a.account_id JOIN     loan l ON a.account_id = l.account_id WHERE     l.status = 'D' AND     l.date <= '1996-12-31' AND     l.date >= '1995-01-01';
SELECT     COUNT(a.account_id) * 100.0 / (SELECT COUNT(*) FROM account) AS percentage FROM     account a JOIN     district d ON a.district_id = d.district_id WHERE     d.A2 = 'Decin' AND     EXTRACT(YEAR FROM a.date) = 1993;
SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE';
SELECT d.A2, COUNT(c.client_id) AS num_female_account_holders FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'F' GROUP BY d.A2 ORDER BY num_female_account_holders DESC LIMIT 10;
SELECT d.A2, SUM(t.amount) as total_withdrawals FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' GROUP BY d.A2 ORDER BY total_withdrawals DESC LIMIT 10;
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id LEFT JOIN disp dp ON c.client_id = dp.client_id LEFT JOIN card cr ON dp.disp_id = cr.disp_id AND cr.type = 'credit' WHERE d.A3 = 'South Bohemia' AND cr.card_id IS NULL;
SELECT d.A3 FROM district d JOIN (     SELECT l.district_id     FROM loan l     JOIN account a ON l.account_id = a.account_id     WHERE (l.status = 'C' OR l.status = 'D')     GROUP BY l.district_id     ORDER BY SUM(l.amount) DESC     LIMIT 1 ) as subquery ON subquery.district_id = d.district_id;
SELECT AVG(loan.amount) FROM loan JOIN account ON loan.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M';
SELECT A2, A13 FROM district WHERE A13 = (SELECT MAX(A13) FROM district)
SELECT COUNT(*) AS num_accounts_opened FROM account WHERE district_id = (     SELECT district_id     FROM district     WHERE A16 = (         SELECT MAX(A16)         FROM district     ) );
SELECT COUNT(*) FROM (   SELECT t1.account_id   FROM trans t1   JOIN account t2 ON t1.account_id = t2.account_id   WHERE t1.operation = 'VYBER KARTOU'   AND t1.balance < 0   AND t2.frequency = 'POPLATEK MESICNE' ) AS temp
SELECT COUNT(*) FROM loan JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND loan.amount >= 250000 AND loan.date BETWEEN '1995-01-01' AND '1997-12-31' AND loan.status = 'approved';
SELECT COUNT(*) FROM account JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'C' OR loan.status = 'D' AND account.district_id = 1;
SELECT COUNT(*) FROM client WHERE gender = 'M' AND district_id = (     SELECT district_id     FROM district     ORDER BY A15 DESC     LIMIT 1 OFFSET 1 );
SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'disponent';
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Pisek';
SELECT d.district_id FROM district d JOIN disp dp ON d.district_id = dp.district_id JOIN account a ON dp.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.date LIKE '1997%' AND t.amount > 10000 GROUP BY d.district_id;
SELECT DISTINCT a.account_id FROM account a JOIN order o ON a.account_id = o.account_id WHERE o.k_symbol = 'SIPO' AND a.district_id IN (     SELECT d.district_id     FROM district d     WHERE d.A2 = 'Pisek' );
SELECT a1.account_id FROM account a1 JOIN disp d1 ON a1.account_id = d1.account_id JOIN card c1 ON d1.disp_id = c1.disp_id AND c1.type = 'gold' JOIN disp d2 ON a1.account_id = d2.account_id JOIN card c2 ON d2.disp_id = c2.disp_id AND c2.type = 'junior' GROUP BY a1.account_id
SELECT AVG(amount) FROM (     SELECT t.amount     FROM trans t     JOIN account a ON t.account_id = a.account_id     WHERE t.operation = 'VYBER KARTOU'     AND t.date >= '2021-01-01'     AND t.date <= '2021-12-31' ) as subquery;
SELECT DISTINCT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.operation = 'VYBER KARTOU' AND YEAR(t.date) = 1998 GROUP BY c.client_id HAVING SUM(t.amount) / 12 < (     SELECT AVG(amount_per_month)     FROM (         SELECT account_id, SUM(amount) / 12 AS amount_per_month         FROM trans         WHERE operation = 'VYBER KARTOU'         AND YEAR(date) = 1998         GROUP BY account_id     ) subquery );
SELECT DISTINCT c.client_id, c.gender, a.account_id, l.loan_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN card cr ON d.disp_id = cr.disp_id JOIN loan l ON a.account_id = l.account_id WHERE c.gender = 'F' AND cr.type = 'credit';
SELECT COUNT(*) FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN district dis ON c.district_id = dis.district_id WHERE c.gender = 'F' AND dis.A3 = 'south Bohemia';
SELECT account.account_id FROM account JOIN district ON account.district_id = district.district_id JOIN disp ON account.account_id = disp.account_id WHERE district.A2 = 'Tabor' AND disp.type = 'OWNER';
SELECT     T1.type FROM     disp AS T1 JOIN     account AS T2 ON T1.account_id = T2.account_id JOIN     district AS T3 ON T2.district_id = T3.district_id WHERE     T1.type != 'OWNER' AND     T3.A11 > 8000 AND     T3.A11 <= 9000;
SELECT COUNT(*) FROM account a JOIN district d ON a.district_id = d.district_id JOIN trans t ON a.account_id = t.account_id WHERE d.A3 = 'North Bohemia' AND t.bank = 'AB';
SELECT DISTINCT d.A2 FROM district d JOIN disp dp ON d.district_id = dp.district_id JOIN account a ON dp.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE t.type = 'VYDAJ';
SELECT AVG(T2.A15) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.date >= '1997-01-01' AND T2.A15 > 4000;
SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN account ON disp.account_id = account.account_id WHERE card.type = 'classic' AND account.type = 'OWNER';
SELECT COUNT(*) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A2 = 'Hl.m. Praha';
SELECT (COUNT(CASE WHEN type = 'Gold' AND issued < '1998-01-01' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM card;
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN loan l ON a.account_id = l.account_id WHERE l.amount = (SELECT MAX(amount) FROM loan)
SELECT T1.A15 FROM district AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532;
SELECT district_id FROM account WHERE account_id = (SELECT account_id FROM order WHERE order_id = 33333);
SELECT * FROM trans WHERE operation = 'VYBER' AND account_id IN (     SELECT account_id FROM disp     WHERE client_id = 3356 );
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000;
SELECT type FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE disp.client_id = 13539;
SELECT T1.A3 AS region FROM district AS T1 JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541;
SELECT d.district_id FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY COUNT(l.loan_id) DESC LIMIT 1;
SELECT c.client_id, c.gender, c.birth_date FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN order o ON a.account_id = o.account_id WHERE o.order_id = 32423;
SELECT trans.* FROM trans JOIN account ON trans.account_id = account.account_id WHERE account.district_id = 5;
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Jesenik';
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE ca.type = 'junior' AND ca.issued >= '1997-01-01'
SELECT     (COUNT(CASE WHEN c.gender = 'F' THEN c.client_id END) * 100.0 / COUNT(c.client_id)) AS percentage_women FROM     client c JOIN     disp d ON c.client_id = d.client_id JOIN     account a ON d.account_id = a.account_id JOIN     district dis ON c.district_id = dis.district_id WHERE     dis.A11 > 10000;
SELECT ((SELECT SUM(l.amount)          FROM loan l          JOIN account a ON l.account_id = a.account_id          JOIN client c ON a.district_id = c.district_id          WHERE YEAR(l.date) = 1997 AND c.gender = 'M') -         (SELECT SUM(l.amount)          FROM loan l          JOIN account a ON l.account_id = a.account_id          JOIN client c ON a.district_id = c.district_id          WHERE YEAR(l.date) = 1996 AND c.gender = 'M')) /        (SELECT SUM(l.amount)         FROM loan l         JOIN account a ON l.account_id = a.account_id         JOIN client c ON a.district_id = c.district_id         WHERE YEAR(l.date) = 1996 AND c.gender = 'M') * 100 AS growth_rate
SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';
SELECT     (SELECT SUM(A16) FROM district WHERE A3 = 'North Bohemia') -     (SELECT SUM(A16) FROM district WHERE A3 = 'East Bohemia') AS Difference_in_crimes;
SELECT COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type = 'owner' UNION ALL SELECT COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type = 'disponent';
SELECT     COUNT(*) AS statement_requests,     SUM(CASE WHEN operation = 'debit' THEN amount ELSE 0 END) AS total_debits FROM     trans JOIN     account ON trans.account_id = account.account_id WHERE     account_id = 3 AND     k_symbol = 'statement release' AND     amount = 3539;
SELECT EXTRACT(YEAR FROM birth_date) FROM client WHERE client_id = (SELECT client_id FROM disp WHERE account_id = 130);
SELECT COUNT(*) FROM account JOIN disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'OWNER';
SELECT l.amount, l.status FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE c.client_id = 992;
SELECT     SUM(t.amount) AS total_amount,     c.gender FROM     trans t JOIN     account a ON t.account_id = a.account_id JOIN     disp d ON a.account_id = d.account_id JOIN     client c ON d.client_id = c.client_id WHERE     t.trans_id = 851 AND     c.client_id = 4;
SELECT type FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 9;
SELECT SUM(amount) FROM trans WHERE account_id IN (     SELECT account_id     FROM disp     WHERE client_id = 617 ) AND YEAR(date) = 1998 AND operation = 'payment';
SELECT client.client_id, client.gender, client.birth_date FROM client JOIN district ON client.district_id = district.district_id JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.A3 = 'East Bohemia';
SELECT c.client_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN loan l ON a.account_id = l.account_id WHERE c.gender = 'F' GROUP BY c.client_id ORDER BY SUM(l.amount) DESC LIMIT 3;
SELECT COUNT(c.client_id) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE c.gender = 'M' AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND t.k_symbol = 'SIPO' AND t.amount > 4000;
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Beroun' AND STRFTIME('%Y', account.date) > '1996';
SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'F' AND card.type = 'junior';
SELECT     (COUNT(CASE WHEN c.gender = 'F' THEN c.client_id END) * 100.0 / COUNT(c.client_id)) AS percentage_female FROM     client c JOIN     disp d ON c.client_id = d.client_id JOIN     account a ON d.account_id = a.account_id JOIN     district dt ON a.district_id = dt.district_id WHERE     dt.A3 = 'Prague';
SELECT     (COUNT(CASE WHEN c.gender = 'M' THEN 1 END) * 100.0 / COUNT(c.client_id)) AS Percentage_Male_Clients_Weekly_Statements FROM     client c JOIN     disp d ON c.client_id = d.client_id WHERE     d.type = 'POPLATEK TYDNE'
SELECT COUNT(*) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND client.gender = 'U';
SELECT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 24 AND a.date < '1997-01-01' ORDER BY l.amount ASC LIMIT 1;
SELECT T1.account_id FROM account AS T1 JOIN disp AS T2 ON T1.district_id = T2.disp_id JOIN client AS T3 ON T2.client_id = T3.client_id JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T3.gender = 'F' GROUP BY T1.account_id ORDER BY T3.birth_date ASC, AVG(T4.A11) DESC LIMIT 1;
SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE client.birth_date BETWEEN '1920-01-01' AND '1920-12-31' AND district.A3 = 'East Bohemia';
SELECT COUNT(*) FROM loan WHERE duration = 24 AND       account_id IN (SELECT account_id                      FROM account                      WHERE frequency = 'POPLATEK TYDNE');
Error: 第 9621 个样本有 2 个SQL。
SELECT c.client_id, d.district_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE d.type = 'owner' GROUP BY c.client_id, d.district_id;
SELECT c.client_id, TIMESTAMPDIFF(YEAR, c.birth_date, CURDATE()) AS age FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card cr ON d.disp_id = cr.disp_id WHERE cr.type = 'gold' AND EXISTS (     SELECT *     FROM loan l     WHERE l.account_id IN (         SELECT account_id         FROM disp         WHERE disp_id = d.disp_id     ) );
SELECT bond_type, COUNT(*) as count FROM bond GROUP BY bond_type ORDER BY count DESC LIMIT 1;
SELECT COUNT(*) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-' AND a.element = 'Cl';
Error: 第 9626 个样本有 2 个SQL。
SELECT AVG(c.single_bond_count) FROM (     SELECT m.label, COUNT(*) as single_bond_count     FROM molecule m     JOIN bond b ON m.molecule_id = b.molecule_id     WHERE b.bond_type = '-' AND m.label = '+'     GROUP BY m.label, m.molecule_id ) c;
SELECT COUNT(*) FROM molecule WHERE label = '-' AND molecule_id IN (     SELECT molecule_id     FROM atom     WHERE element = 'na' );
SELECT molecule_id FROM bond WHERE bond_type = '#' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY molecule_id HAVING COUNT(bond_id) >= 3;
SELECT     (COUNT(CASE WHEN a.element = 'C' THEN a.atom_id END) * 100.0 / COUNT(a.atom_id)) AS percentage FROM     atom a     JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2     JOIN bond b ON c.bond_id = b.bond_id     JOIN molecule m ON a.molecule_id = m.molecule_id WHERE     b.bond_type = 'double' GROUP BY     m.molecule_id;
SELECT COUNT(*) FROM bond WHERE bond_type = '#';
SELECT COUNT(*) FROM atom WHERE element != 'Br'
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';
SELECT DISTINCT molecule_id FROM atom WHERE element = 'Si';
Error: 第 9635 个样本有 2 个SQL。
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = ' = ';
SELECT T4.label, COUNT(*) as num_atoms FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T1.element = 'H' GROUP BY T4.label ORDER BY num_atoms DESC LIMIT 1;
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element = 'Te' GROUP BY b.bond_type;
SELECT a1.atom_id, a2.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '-';
SELECT a1.atom_id, a2.atom_id FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN molecule m ON a1.molecule_id = m.molecule_id WHERE m.label = '-';
SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY element ORDER BY COUNT(*) LIMIT 1;
SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20';
SELECT DISTINCT m.label FROM molecule m WHERE m.molecule_id NOT IN (     SELECT a.molecule_id     FROM atom a     WHERE a.element = 'Sn' );
Error: 第 9644 个样本有 2 个SQL。
SELECT a1.atom_id, a2.atom_id2 FROM connected AS c JOIN bond AS b ON c.bond_id = b.bond_id JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '#';
SELECT a1.atom_id FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id WHERE c.atom_id2 IN (     SELECT a2.atom_id     FROM atom a2     JOIN molecule m ON a2.molecule_id = m.molecule_id     WHERE m.label = 'TR181' ) AND a1.molecule_id <> (     SELECT m2.molecule_id     FROM molecule m2     WHERE m2.label = 'TR181' );
SELECT 100 * (1 - SUM(CASE WHEN a.element = 'F' THEN 1 ELSE 0 END) / COUNT(DISTINCT m.molecule_id)) AS percent FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+'
Error: 第 9648 个样本有 2 个SQL。
SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR000' GROUP BY element ORDER BY element ASC LIMIT 3;
SELECT a1.atom_id, a2.atom_id FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id = 'TR001_2_6' AND a1.molecule_id = 'TR001' AND a2.molecule_id = 'TR001';
SELECT     (SELECT COUNT(*) FROM molecule WHERE label = '+') -     (SELECT COUNT(*) FROM molecule WHERE label = '-') AS difference;
SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR_000_2_5'
SELECT c.bond_id FROM connected c WHERE c.atom_id2 = 'TR000_2';
SELECT molecule.label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY molecule.label LIMIT 5;
SELECT     (COUNT(CASE WHEN bond_type = ' = ' THEN bond_id END) * 100.0 / COUNT(bond_id)) AS percent FROM     bond WHERE     molecule_id = 'TR008';
SELECT (COUNT(CASE WHEN label = '+' THEN molecule_id END) * 100.0 / COUNT(molecule_id)) AS percent FROM molecule;
SELECT (SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) * 100.0 / COUNT(atom_id)) AS percent FROM atom WHERE molecule_id = 'TR206';
SELECT DISTINCT b.bond_type FROM bond AS b JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR000';
SELECT atom.element, molecule.label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';
SELECT     b.bond_type,     COUNT(b.bond_type) AS count,     (SELECT m.label FROM molecule m WHERE m.molecule_id = 'TR018') AS carcinogenicity FROM     bond b JOIN     connected c ON b.bond_id = c.bond_id WHERE     b.molecule_id = 'TR018' GROUP BY     b.bond_type ORDER BY     count DESC LIMIT 1;
Error: 第 9661 个样本有 2 个SQL。
SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR006' ORDER BY b.bond_type ASC LIMIT 2;
SELECT COUNT(*) FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.molecule_id = 'TR009' AND (c.atom_id = 'TR009_12' OR c.atom_id2 = 'TR009_12');
SELECT COUNT(DISTINCT molecule.molecule_id) FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'Br';
SELECT bond_type, atom_id, atom_id2 FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond_id = 'TR001_6_9'
SELECT molecule.label, molecule.label = '+' AS is_carcinogenic FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_10';
SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#';
SELECT COUNT(*) FROM connected WHERE atom_id = 'TR%_19' OR atom_id2 = 'TR%_19';
SELECT DISTINCT atom.element FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = 'TR004';
SELECT COUNT(*) FROM molecule WHERE label = '-';
SELECT DISTINCT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE SUBSTRING(a.atom_id, 7, 2) BETWEEN 21 AND 25 AND m.label = '+';
SELECT DISTINCT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE (a1.element = 'p' AND a2.element = 'n') OR (a1.element = 'n' AND a2.element = 'p');
SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' GROUP BY m.molecule_id ORDER BY COUNT(b.bond_id) DESC LIMIT 1;
Error: 第 9674 个样本有 2 个SQL。
SELECT T2.bond_type, T2.bond_id FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T1.atom_id, 7, 2) + 0 = 45
SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected) AND atom_id NOT IN (SELECT atom_id2 FROM connected);
SELECT a1.atom_id, a2.atom_id FROM atom AS a1 JOIN connected AS c ON a1.atom_id = c.atom_id JOIN bond AS b ON c.bond_id = b.bond_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id JOIN molecule AS m ON a1.molecule_id = m.molecule_id WHERE b.bond_type = '#' AND m.label = 'TR447'
SELECT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR144_8_19';
SELECT m.label, COUNT(b.bond_id) as double_bonds_count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.label = '+' AND b.bond_type = ' = ' GROUP BY m.label ORDER BY double_bonds_count DESC LIMIT 1;
SELECT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' GROUP BY a.element ORDER BY COUNT(*) ASC LIMIT 1;
SELECT a1.atom_id FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id2 JOIN atom a2 ON a2.atom_id = c.atom_id WHERE a2.element = 'pb' AND a1.atom_id != a2.atom_id;
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';
WITH atom_counts AS (   SELECT     a1.element AS element1,     a2.element AS element2,     COUNT(*) AS count   FROM     connected c   JOIN     atom a1 ON c.atom_id = a1.atom_id   JOIN     atom a2 ON c.atom_id2 = a2.atom_id   GROUP BY     a1.element, a2.element ), max_count AS (   SELECT     MAX(count) AS max_element_pair_count   FROM     atom_counts ) SELECT   (COUNT(c.bond_id) * 100.0 / SUM(ac.count) OVER ()) AS percentage FROM   connected c JOIN   atom a1 ON c.atom_id = a1.atom_id JOIN   atom a2 ON c.atom_id2 = a2.atom_id JOIN   bond b ON c.bond_id = b.bond_id JOIN   atom_counts ac ON (a1.element = ac.element1 AND a2.element = ac.element2) JOIN   max_count mc WHERE   ac.count = mc.max_element_pair_count;
SELECT     SUM(CASE WHEN t_mol.label = '+' THEN 1 ELSE 0 END) / COUNT(t_bond.bond_id) AS proportion FROM     bond AS t_bond JOIN     connected AS t_conn ON t_bond.bond_id = t_conn.bond_id JOIN     molecule AS t_mol ON t_bond.molecule_id = t_mol.molecule_id WHERE     t_bond.bond_type = '-';
SELECT COUNT(*) FROM atom WHERE element IN ('C', 'H');
SELECT atom_id2 FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 's';
SELECT DISTINCT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element = 'Sn';
SELECT COUNT(DISTINCT a.element) FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '-';
SELECT COUNT(*) FROM (   SELECT a.atom_id   FROM atom a   JOIN connected c ON a.atom_id = c.atom_id   JOIN bond b ON c.bond_id = b.bond_id   WHERE (a.element = 'p' OR a.element = 'br')   AND b.bond_type = '#'   GROUP BY a.atom_id ) as temp;
SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = '+';
Error: 第 9691 个样本有 3 个SQL。
SELECT     (SUM(CASE WHEN a.element = 'Cl' THEN 1 ELSE 0 END) * 100 / COUNT(a.atom_id)) AS percent FROM     atom a JOIN     connected c ON a.atom_id = c.atom_id JOIN     bond b ON c.bond_id = b.bond_id JOIN     molecule m ON a.molecule_id = m.molecule_id WHERE     b.bond_type = '-';
SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');
SELECT molecule_id FROM molecule WHERE label = '-';
SELECT COUNT(*) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030';
SELECT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id BETWEEN 'TR000' AND 'TR050';
SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_10_11';
SELECT COUNT(DISTINCT b.bond_id) FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element = 'I';
SELECT     CASE         WHEN COUNT(CASE WHEN m.label = '+' THEN 1 END) > COUNT(CASE WHEN m.label = '-' THEN 1 END) THEN 'Carcinogenic'         ELSE 'Non Carcinogenic'     END AS Majority FROM     molecule m JOIN     atom a ON m.molecule_id = a.molecule_id WHERE     a.element = 'Ca'
SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom AS atom1 ON connected.atom_id = atom1.atom_id JOIN atom AS atom2 ON connected.atom_id2 = atom2.atom_id WHERE bond.bond_id = 'TR001_1_8' AND (atom1.element = 'cl' OR atom2.element = 'cl') AND (atom1.element = 'c' OR atom2.element = 'c');
SELECT molecule_id FROM bond WHERE bond_type = '#' AND molecule_id IN (     SELECT molecule_id     FROM atom     WHERE element = 'c' ) AND molecule_id IN (     SELECT molecule_id     FROM molecule     WHERE label = '-' ) GROUP BY molecule_id ORDER BY COUNT(*) DESC LIMIT 2;
SELECT SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(a.atom_id) AS percentage FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+';
SELECT DISTINCT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR001';
SELECT molecule_id FROM bond WHERE bond_type = ' = ';
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#'
SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR005_16_26';
SELECT COUNT(*) FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-';
SELECT molecule.label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_10_11';
SELECT bond.bond_id, molecule.label AS carcinogenicity FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND (molecule.label = '+' OR molecule.label = '-');
SELECT COUNT(*) FROM (   SELECT a.element   FROM atom a   JOIN molecule m ON a.molecule_id = m.molecule_id   WHERE m.label = '+' AND SUBSTR(a.atom_id, 7, 1) = '4' ) AS subquery WHERE subquery.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')
SELECT     molecule.label,     SUM(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) * 1.0 / COUNT(atom.atom_id) AS hydrogen_ratio FROM     atom JOIN     molecule ON atom.molecule_id = molecule.molecule_id WHERE     atom.molecule_id = 'TR006' GROUP BY     molecule.label;
SELECT molecule.label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'Ca' AND molecule.label = '+';
SELECT DISTINCT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element = 'Te';
SELECT DISTINCT a1.element, a2.element FROM bond b JOIN connected c1 ON b.bond_id = c1.bond_id JOIN connected c2 ON b.bond_id = c2.bond_id JOIN atom a1 ON c1.atom_id = a1.atom_id JOIN atom a2 ON c2.atom_id = a2.atom_id WHERE b.bond_id = 'TR001_10_11'
SELECT     COUNT(CASE WHEN b.bond_type = '#' THEN m.molecule_id END) * 100.0 / COUNT(m.molecule_id) AS percentage FROM     molecule m LEFT JOIN     bond b ON m.molecule_id = b.molecule_id WHERE     EXISTS (         SELECT 1         FROM connected c         WHERE c.bond_id = b.bond_id         AND EXISTS (             SELECT 1             FROM connected c2             WHERE c2.atom_id = c.atom_id2             AND c2.bond_id <> b.bond_id             AND c2.bond_id IN (                 SELECT bond_id                 FROM bond                 WHERE bond_type = '#'             )         )     );
SELECT     (COUNT(CASE WHEN bond.bond_type = ' = ' THEN bond.bond_id END) * 1.0 / COUNT(bond.bond_id)) * 100 AS percent FROM     molecule JOIN     bond ON molecule.molecule_id = bond.molecule_id WHERE     molecule.molecule_id = 'TR047'
SELECT molecule.label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR001_1' AND molecule.label = '+';
Error: 第 9718 个样本有 2 个SQL。
SELECT DISTINCT atom.element FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = 'TR151' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');
SELECT COUNT(*) FROM molecule WHERE label = '+';
SELECT atom.atom_id, atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND SUBSTR(molecule.molecule_id, 3, 3) BETWEEN 10 AND 50;
SELECT COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';
SELECT bond.bond_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' AND molecule.label = '+';
SELECT COUNT(*) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'h' AND molecule.label = '+';
SELECT molecule_id FROM bond WHERE bond_id = (SELECT bond_id FROM connected WHERE atom_id = (SELECT atom_id FROM atom WHERE element = 'TR00_1_2') AND atom_id2 = (SELECT atom_id FROM atom WHERE element = 'TR00_1'))
SELECT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND m.label = '-';
SELECT (SUM(CASE WHEN t1.element = 'h' AND t4.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(t4.molecule_id)) AS percentage FROM atom AS t1 JOIN connected AS t2 ON t1.atom_id = t2.atom_id JOIN bond AS t3 ON t2.bond_id = t3.bond_id JOIN molecule AS t4 ON t1.molecule_id = t4.molecule_id;
Error: 第 9728 个样本有 4 个SQL。
SELECT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR186';
SELECT bond.bond_type FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR007_4_19';
SELECT DISTINCT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_2_4';
SELECT COUNT(b.bond_id) AS double_bonds, m.label AS carcinogenicity FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = ' = ' AND m.label = '+' AND m.molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR006') GROUP BY m.label;
SELECT m.label, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+';
SELECT b.bond_id, b.bond_type, c.atom_id, c.atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '-'
SELECT DISTINCT m.label, a.element FROM molecule m JOIN connected c ON m.molecule_id = c.molecule_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE b.bond_type = '#' ORDER BY m.label, a.element;
SELECT atom.element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = 'TR000_2_3'
SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom AS atom1 ON connected.atom_id = atom1.atom_id JOIN atom AS atom2 ON connected.atom_id2 = atom2.atom_id WHERE atom1.element = 'Cl' OR atom2.element = 'Cl';
SELECT atom.atom_id, COUNT(DISTINCT bond.bond_type) AS unique_bond_types FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.label = 'TR346' GROUP BY atom.atom_id;
SELECT COUNT(DISTINCT m.molecule_id) AS total_molecules_with_double_bond,        COUNT(DISTINCT CASE WHEN m.label = '+' THEN m.molecule_id END) AS carcinogenic_molecules FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = '
SELECT COUNT(*) FROM molecule WHERE molecule_id NOT IN (     SELECT molecule_id     FROM atom     WHERE element = 's' ) AND molecule_id NOT IN (     SELECT molecule_id     FROM bond     WHERE bond_type = ' = ' );
SELECT molecule.label FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_2_4' AND molecule.label = '+';
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005';
SELECT COUNT(*) FROM bond WHERE bond_type = '-';
SELECT molecule.label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'Cl' AND molecule.label = '+';
SELECT molecule.label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-';
SELECT     (COUNT(CASE WHEN t4.label = '+' AND t1.element = 'Cl' THEN 1 END) * 100.0 / COUNT(t4.molecule_id)) AS percentage FROM     atom AS t1 JOIN     connected AS t2 ON t1.atom_id = t2.atom_id JOIN     bond AS t3 ON t2.bond_id = t3.bond_id JOIN     molecule AS t4 ON t1.molecule_id = t4.molecule_id WHERE     t4.label = '+'
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'
SELECT COUNT(DISTINCT a.element) FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR001_3_4';
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id = 'TR000_1' AND c.atom_id2 = 'TR000_2';
SELECT m.label FROM molecule m JOIN atom a1 ON m.molecule_id = a1.molecule_id JOIN atom a2 ON m.molecule_id = a2.molecule_id WHERE a1.atom_id = 'TR000_2' AND a2.atom_id = 'TR000_4';
SELECT element FROM atom WHERE atom_id = 'TR000_1';
SELECT label FROM molecule WHERE molecule_id = 'TR000';
Error: 第 9753 个样本有 2 个SQL。
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'N' AND m.label = '+';
SELECT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'S' AND b.bond_type = ' = '
SELECT molecule.label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id GROUP BY molecule.molecule_id, molecule.label HAVING COUNT(atom.atom_id) > 5 AND molecule.label = '-'
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE b.bond_type = '=' AND m.label = 'TR024';
SELECT m.label, m.molecule_id, COUNT(a.atom_id) AS atom_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' GROUP BY m.molecule_id ORDER BY atom_count DESC LIMIT 1;
SELECT (COUNT(CASE WHEN t5.label = '+' THEN t5.molecule_id END) * 100.0 / COUNT(t5.molecule_id)) as percentage FROM (     SELECT t4.molecule_id     FROM (         SELECT t3.atom_id, t3.bond_id, t3.atom_id2, t1.molecule_id         FROM atom AS t1         JOIN connected AS t3 ON t1.atom_id = t3.atom_id         WHERE t1.element = 'h'     ) AS t4     JOIN bond AS t2 ON t4.bond_id = t2.bond_id     WHERE t2.bond_type = '#' ) AS t5 JOIN molecule AS t6 ON t5.molecule_id = t6.molecule_id;
SELECT COUNT(*) FROM molecule WHERE label = '+';
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.molecule_id BETWEEN 'TR004' AND 'TR010' AND b.bond_type = '-';
SELECT COUNT(*) FROM atom WHERE element = 'c' AND molecule_id IN (     SELECT molecule_id     FROM molecule     WHERE label = 'TR008' );
SELECT atom.element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR004_7' AND molecule.label = '-';
Error: 第 9764 个样本有 2 个SQL。
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '-';
SELECT a.element, b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.molecule_id = 'TR016' AND c.atom_id2 IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR016')
SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND b.bond_type = '=' AND m.label = 'TR012';
SELECT atom.atom_id FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'o';
SELECT name FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT name, id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL);
SELECT name FROM cards WHERE faceConvertedManaCost = (     SELECT MAX(faceConvertedManaCost) FROM cards );
SELECT c.name FROM cards c WHERE c.frameVersion = 2015 AND c.edhrecRank < 100;
SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator';
SELECT l.status FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE c.types = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';
SELECT c.id, c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE (c.power = '*' OR c.power IS NULL) AND l.format = 'commander' AND l.status = 'Legal';
SELECT c.name, r.text, c.hasContentWarning FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniele';
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';
SELECT c.name, c.artist, s.isPromo FROM cards c JOIN rulings r ON c.uuid = r.uuid JOIN sets s ON c.setCode = s.code WHERE s.isPromo = 1 GROUP BY c.uuid ORDER BY COUNT(r.uuid) DESC LIMIT 1;
SELECT fd.language FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE c.name = 'Annul' AND c.number = '29';
SELECT c.name FROM cards c JOIN foreign_data fd ON c.id = fd.uuid WHERE fd.language = 'Japanese';
SELECT (COUNT(CASE WHEN language = 'Chinese Simplified' THEN id ELSE NULL END) * 100.0 / COUNT(id)) AS percentage FROM foreign_data;
SELECT s.name, s.totalSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Italian'
Error: 第 9783 个样本有 2 个SQL。
SELECT keywords FROM cards WHERE name = 'Angel of Mercy';
SELECT COUNT(*) FROM cards WHERE power = '*';
SELECT promoTypes FROM cards WHERE name = 'Duress';
SELECT borderColor FROM cards WHERE name = 'Ancestor's Chosen';
SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen';
SELECT DISTINCT fd.language FROM cards c JOIN sets s ON c.setCode = s.code JOIN set_translations st ON s.setCode = st.setCode JOIN foreign_data fd ON c.id = fd.uuid WHERE c.name = 'Angel of Mercy';
SELECT COUNT(*) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'restricted' AND c.isTextless = 0;
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Condemn';
SELECT COUNT(c.id) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'restricted' AND c.isStarter = 1;
SELECT l.status FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE c.name = 'Cloudchaser Eagle';
SELECT type FROM cards WHERE name = 'Benalish Knight';
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Benalish Knight';
SELECT DISTINCT c.artist FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.language = 'Phyrexian';
SELECT (COUNT(CASE WHEN borderColor = 'borderless' THEN id END) * 100.0 / COUNT(id)) AS percentage FROM card_games.cards;
SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1;
SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.borderColor = 'borderless' AND foreign_data.language = 'Russian';
SELECT (COUNT(CASE WHEN f.language = 'French' THEN c.id ELSE NULL END) * 100.0 / COUNT(c.id)) AS percentage FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.isStorySpotlight = 1;
SELECT COUNT(*) FROM cards WHERE toughness = 99;
SELECT name FROM cards WHERE artist = 'Aaron Boyd';
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';
SELECT id FROM cards WHERE convertedManaCost = 0;
SELECT c.layout FROM cards c WHERE c.keywords LIKE '%flying%'
SELECT COUNT(*) FROM cards WHERE originalType LIKE '%Summon - Angel%' AND subtypes NOT LIKE '%Angel%';
SELECT c1.cardKingdomFoilId FROM cards c1 JOIN cards c2 ON c1.name = c2.name AND c1.setCode = c2.setCode AND c1.isFoil = 1 AND c2.isFoil = 0 WHERE c1.cardKingdomId IS NOT NULL AND c2.cardKingdomId IS NOT NULL;
SELECT id FROM cards WHERE duelDeck = 'a';
SELECT edhrecRank FROM cards WHERE frameVersion = '2015';
SELECT DISTINCT c.artist FROM cards c JOIN foreign_data fd ON c.id = fd.uuid WHERE fd.language = 'Chinese Simplified';
SELECT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.availability = 'paper' AND fd.language = 'Japanese';
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.borderColor = 'white';
SELECT c.uuid, fd.language FROM cards c JOIN legalities l ON c.uuid = l.uuid JOIN foreign_data fd ON c.uuid = fd.uuid WHERE l.format = 'legacy';
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Beacon of Immortality';
SELECT COUNT(c.id), l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = 'future' GROUP BY l.status;
SELECT c.name, c.colors FROM cards c WHERE c.setCode = 'OGW';
SELECT c.name, s.translation, s.language FROM cards c JOIN set_translations s ON c.setCode = s.setCode WHERE c.setCode = '10E' AND c.convertedManaCost = 5;
SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType LIKE '%Creature - Elf%';
Error: 第 9819 个样本有 2 个SQL。
SELECT c.name, c.id, f.language, f.name FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.types LIKE '%Artifact%' AND c.colors LIKE '%B%' AND f.language != 'en';
SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'uncommon' ORDER BY r.date ASC LIMIT 3;
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1;
SELECT COUNT(*) FROM cards WHERE hasContentWarning = 1 AND availability = 'paper' AND frameVersion = '1993';
SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability LIKE '%paper%' AND availability LIKE '%mtgo%';
SELECT SUM(cards.convertedManaCost) FROM cards WHERE cards.artist = 'Rob Alexander';
SELECT DISTINCT types, subtypes, supertypes FROM cards WHERE availability = 'arena';
SELECT DISTINCT s.setCode FROM sets s JOIN set_translations st ON s.setCode = st.setCode WHERE st.language = 'Spanish';
SELECT (COUNT(CASE WHEN hand = '+3' THEN id END) * 100.0 / COUNT(id)) AS percentage FROM cards WHERE frameEffects = 'legendary';
SELECT     (COUNT(CASE WHEN c.isStorySpotlight = 1 AND c.text IS NOT NULL THEN c.id END) * 100 / COUNT(c.id)) AS percentage,     c.id FROM     cards c WHERE     c.isStorySpotlight = 1 AND c.text IS NOT NULL GROUP BY     c.id;
Error: 第 9832 个样本有 2 个SQL。
SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.baseSetSize = 309;
SELECT COUNT(*) FROM sets s JOIN set_translations st ON s.setCode = st.setCode WHERE s.block = 'Commander' AND st.language = 'Portuguese (Brasil)';
SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types LIKE '%Creature%' AND l.status = 'Legal'
SELECT DISTINCT c.subtypes, c.supertypes FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE f.language = 'German' AND c.subtypes IS NOT NULL AND c.supertypes IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE power IS NULL AND text LIKE '%triggered ability%';
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid JOIN rulings ON cards.uuid = rulings.uuid WHERE legalities.format = 'premodern' AND rulings.text = 'This is a triggered mana ability' AND cards.side IS NULL;
SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Erica Yang' AND l.format = 'pauper' AND l.status = 'legal' AND c.availability = 'paper';
SELECT c.artist FROM cards c JOIN foreign_data fd ON c.id = fd.uuid WHERE fd.text = "Das perfekte Gegenmittel zu einer dichten Formation"
SELECT fd.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.type = 'Creature' AND c.layout = 'normal' AND c.borderColor = 'black' AND c.artist = 'Matthew D. Wilson' AND fd.language = 'French';
SELECT COUNT(c.id) FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'rare' AND r.date = '2009-10-01';
SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.baseSetSize = 180 AND s.block = 'Ravnica';
SELECT (COUNT(c.id) FILTER (WHERE c.hasContentWarning = 0)) * 100.0 / COUNT(c.id) AS percentage FROM cards c JOIN legalities l ON c.id = l.uuid WHERE l.format = 'commander' AND l.status = 'legal';
SELECT (COUNT(case WHEN T2.language = 'French' THEN T1.id END) * 100.0 / COUNT(T1.id)) AS percentage FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'
SELECT (COUNT(CASE WHEN language = 'Japanese' AND type = 'expansion' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM (   SELECT s.type, st.language   FROM sets s   JOIN set_translations st ON s.code = st.setCode   WHERE st.language = 'Japanese' )
SELECT DISTINCT c.availability FROM cards c WHERE c.artist = 'Daren Bader';
SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000 AND colors IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;
SELECT c.name FROM cards c JOIN (     SELECT uuid     FROM cards     WHERE power IS NULL OR power = '*' ) AS upc ON c.uuid = upc.uuid WHERE c.promoTypes LIKE '%arenaleague%' ORDER BY c.name LIMIT 3;
SELECT language FROM foreign_data WHERE multiverseid = 149934;
SELECT     c1.cardKingdomFoilId,     c2.cardKingdomId FROM     cards c1 JOIN     cards c2 ON c1.id = c2.cardKingdomFoilId WHERE     c1.cardKingdomFoilId IS NOT NULL AND     c2.cardKingdomId IS NOT NULL ORDER BY     c1.cardKingdomFoilId ASC LIMIT 3;
SELECT     (COUNT(CASE WHEN c.isTextless = 1 AND c.layout = 'normal' THEN 1 END) * 100.0 / COUNT(c.id)) AS proportion_textless_normal_layout FROM     card_games.cards c;
SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%';
SELECT s.name FROM sets s WHERE s.mtgoCode IS NULL OR s.mtgoCode = '' ORDER BY s.name ASC LIMIT 3;
SELECT DISTINCT fd.language FROM set_translations st JOIN sets s ON st.setCode = s.code JOIN foreign_data fd ON st.id = fd.id WHERE s.setCode = 'ARC' AND s.mcmName = 'Archenemy';
SELECT s.name, st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.id = 5;
Error: 第 9858 个样本有 2 个SQL。
SELECT s.code, s.id FROM sets s JOIN cards c ON s.code = c.setCode JOIN foreign_data fd ON c.id = fd.uuid WHERE s.block = 'Shadowmoor' AND fd.language = 'Italian' GROUP BY s.code, s.id ORDER BY s.name ASC LIMIT 2;
SELECT s.id AS set_id FROM sets s JOIN cards c ON s.code = c.setCode JOIN foreign_data fd ON c.id = fd.uuid WHERE s.isForeignOnly = 1 AND c.hasFoil = 1 AND fd.language = 'Japanese'
SELECT st.setCode, st.name, st.baseSetSize FROM sets AS st JOIN set_translations AS stt ON st.code = stt.setCode WHERE stt.language = 'Russian' ORDER BY st.baseSetSize DESC LIMIT 1;
SELECT (COUNT(c.id) FILTER (WHERE c.isOnlineOnly = 1 AND st.isOnlineOnly = 1)) * 100.0 / COUNT(c.id) AS percentage FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.language = 'Chinese Simplified'
SELECT COUNT(*) FROM sets s WHERE NOT EXISTS (     SELECT *     FROM set_translations st     WHERE s.code = st.setCode AND st.language = 'English'   ) AND EXISTS (     SELECT *     FROM set_translations st     WHERE s.code = st.setCode AND st.language = 'Japanese'   ) AND (s.mtgoCode IS NULL OR s.mtgoCode = '');
SELECT COUNT(*) AS numCards, id FROM cards WHERE borderColor = 'black';
SELECT COUNT(*) AS total, GROUP_CONCAT(id) AS card_ids FROM cards WHERE frameEffects = 'extendedart';
SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1;
SELECT st.language FROM set_translations AS st WHERE st.id = 174;
SELECT name FROM sets WHERE code = 'ALL';
SELECT fd.language FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE c.name = 'A Pedra Fellwar'
SELECT setCode FROM sets WHERE releaseDate = '2007-07-13';
SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage');
SELECT setCode FROM sets WHERE type = 'expansion';
SELECT fd.name, c.type FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.watermark = 'boros';
SELECT T2.language, T2.flavorText, T1.type FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'colorpie';
SELECT (COUNT(CASE WHEN convertedManaCost = 10 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards WHERE name = 'Abyssal Horror' AND setCode IN (     SELECT setCode     FROM sets     WHERE name = 'Abyssal Horror' );
SELECT setCode FROM sets WHERE type = 'expansion commander';
SELECT T2.name, T1.type FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'abzan';
SELECT T1.type, T2.language FROM cards AS T1 JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.watermark = 'azorius';
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand = '+';
SELECT name FROM cards WHERE isTextless = 0;
SELECT convertedManaCost FROM cards WHERE name = 'Ancestor\'s Chosen';
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL);
SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;
SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';
SELECT DISTINCT c.purchaseUrls FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.promoTypes LIKE '%bundle%';
SELECT COUNT(DISTINCT c.artist) FROM cards c WHERE c.borderColor = 'black' AND c.availability LIKE '%arena,mtgo%';
SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1;
SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;
SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code JOIN cards c ON c.setCode = s.code WHERE st.language = 'Italian' AND c.name = 'Ancestor''s Chosen'
SELECT COUNT(*) FROM set_translations st JOIN cards c ON st.setCode = c.setCode WHERE c.name = 'Angel of Mercy';
SELECT c.name FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition'
SELECT COUNT(*) FROM cards c JOIN foreign_data fd ON c.id = fd.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Korean';
SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.setCode = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';
SELECT s.baseSetSize FROM sets s JOIN set_translations st ON s.setCode = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition';
SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.name = 'Eighth Edition' AND st.language = 'Simplified Chinese';
SELECT s.name FROM sets s JOIN cards c ON s.setCode = c.setCode WHERE c.name = 'Angel of Mercy' AND s.mtgoCode IS NOT NULL;
SELECT s.releaseDate FROM sets s JOIN cards c ON s.setCode = c.setCode WHERE c.name = 'Ancestor''s Chosen'
SELECT type FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition'
SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian';
SELECT COUNT(*) > 0 AS is_only_outside_us FROM cards WHERE name = 'Adarkar Valkyrie' AND EXISTS (SELECT * FROM sets WHERE sets.setCode = cards.setCode AND sets.isForeignOnly = 1);
SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND sets.baseSetSize < 10;
Error: 第 9904 个样本有 2 个SQL。
SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' ORDER BY c.convertedManaCost DESC LIMIT 1;
SELECT DISTINCT c.artist FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND c.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');
SELECT * FROM cards WHERE setCode = 'Coldsnap' AND number = 4;
SELECT COUNT(*) FROM cards WHERE convertedManaCost > 5 AND (power = '*' OR power IS NULL) AND setCode = 'Coldsnap';
SELECT fd.flavorText FROM foreign_data AS fd JOIN cards AS c ON fd.uuid = c.uuid WHERE fd.language = 'Italian' AND c.name = 'Ancestor''s Chosen';
SELECT DISTINCT language FROM foreign_data WHERE name = 'Ancestor''s Chosen' AND flavorText IS NOT NULL;
SELECT fd.type FROM foreign_data AS fd JOIN cards AS c ON fd.uuid = c.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'German';
Error: 第 9912 个样本有 3 个SQL。
SELECT fd.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND fd.language = 'Italian' ORDER BY c.convertedManaCost DESC LIMIT 1;
SELECT r.date FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Reminisce'
SELECT (COUNT(*) FILTER (WHERE c.convertedManaCost = 7) * 100.0 / COUNT(c.id)) AS percentage FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap';
SELECT (SUM(CASE WHEN t1.cardKingdomFoilId = t1.cardKingdomId AND t1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) * 100 / COUNT(*)) AS percentage_incredibly_powerful FROM cards AS t1 JOIN sets AS t2 ON t1.setCode = t2.code WHERE t2.name = 'Coldsnap';
SELECT code FROM sets WHERE releaseDate = '2017-07-14';
SELECT keyruneCode FROM sets WHERE code = 'PKHC';
SELECT mcmId FROM sets WHERE code = 'SS2';
SELECT s.mcmName FROM sets s WHERE s.releaseDate = '2017-06-09';
SELECT type FROM sets WHERE name = 'From the Vault: Lore';
SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';
SELECT c.name, r.text, CASE WHEN c.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END as MissingOrDegraded FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Jim Pavelec';
SELECT s.releaseDate FROM sets s JOIN cards c ON s.setCode = c.setCode WHERE c.name = 'Evacuation';
SELECT baseSetSize FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE translation = 'Rinascita di Alara');
SELECT s.type FROM sets s JOIN set_translations st ON s.setCode = st.setCode WHERE st.translation = 'Huitième édition';
SELECT st.translation FROM set_translations st JOIN cards c ON st.setCode = c.setCode WHERE c.name = 'Tendo Ice Bridge' AND st.language = 'French'
SELECT COUNT(*) FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE name = 'Salvat 2011') AND translation IS NOT NULL;
SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code JOIN cards c ON c.setCode = s.code WHERE st.language = 'Japanese' AND c.name = 'Fellwar Stone'
SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Journey into Nyx Hero''s Path' ORDER BY c.convertedManaCost DESC LIMIT 1;
SELECT s.releaseDate FROM sets s JOIN set_translations st ON s.setCode = st.setCode WHERE st.translation = 'Ola de frío'
SELECT s.type FROM sets s JOIN cards c ON s.setCode = c.setCode WHERE c.name = 'Samite Pilgrim'
SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedManaCost = 3;
SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE st.language = 'Chinese Simplified' AND s.name = 'Mirrodin';
SELECT     (SUM(CASE WHEN s.isNonFoilOnly = 1 THEN 1 ELSE 0 END) * 100 / COUNT(*)) AS percentage_non_foil FROM     sets s JOIN     set_translations st ON s.code = st.setCode WHERE     st.language = 'Japanese';
SELECT     (SUM(CASE WHEN s.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100 / COUNT(s.id)) AS online_percentage FROM     sets s JOIN     set_translations st ON s.code = st.setCode WHERE     st.language = 'Portuguese (Brazil)'
Error: 第 9937 个样本有 2 个SQL。
SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets);
SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1;
SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM cards WHERE power IN (NULL, '*') AND hasFoil = 0 AND duelDeck = 'a';
SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1;
SELECT c.name, c.manaCost FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'duel' ORDER BY c.convertedManaCost DESC LIMIT 10;
SELECT s.releaseDate, l.format FROM cards c JOIN sets s ON c.setCode = s.code JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' GROUP BY s.releaseDate, l.format ORDER BY s.releaseDate ASC LIMIT 1;
SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.id = foreign_data.uuid WHERE cards.artist = 'Volkan Baga' AND foreign_data.language = 'French';
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'Rare' AND cards.types LIKE '%Enchantment%' AND cards.name = 'Abundance' AND legalities.status = 'Legal';
SELECT L.format, C.name FROM legalities L JOIN cards C ON L.uuid = C.uuid WHERE L.status = 'banned' GROUP BY L.format, C.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.name = 'Battlebond';
SELECT T3.format FROM ( SELECT T1.artist, COUNT(T1.id) AS num_cards FROM cards AS T1 GROUP BY T1.artist ORDER BY num_cards LIMIT 1) AS T2 JOIN cards AS T1 ON T1.artist = T2.artist JOIN legalities AS T3 ON T1.uuid = T3.uuid GROUP BY T3.format
SELECT L.status FROM cards C JOIN legalities L ON C.uuid = L.uuid WHERE C.frameVersion = '1997' AND C.artist = 'D. Alexander Gregory' AND (C.hasContentWarning = 1 OR C.asciiName = 'Wizards of the Coast') AND L.format = 'legacy';
SELECT c.name, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.edhrecRank = 1 AND l.status = 'banned';
Error: 第 9952 个样本有 2 个SQL。
SELECT DISTINCT c.artist FROM cards c WHERE c.borderColor = 'black' AND c.availability = 'arena'
SELECT c.uuid FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'oldschool' AND (l.status = 'banned' OR l.status = 'restricted');
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.artist = 'Kev Walker' ORDER BY r.date DESC;
SELECT DISTINCT c.name, l.format FROM cards c JOIN sets s ON c.setCode = s.code JOIN legalities l ON c.uuid = l.uuid WHERE s.name = 'Hour of Devastation' AND l.status = 'Legal';
SELECT s.name FROM sets s WHERE NOT EXISTS (     SELECT st.id     FROM set_translations st     WHERE st.setCode = s.code AND st.language = 'Japanese' ) AND EXISTS (     SELECT st.id     FROM set_translations st     WHERE st.setCode = s.code AND st.language = 'Korean' );
Error: 第 9959 个样本有 2 个SQL。
SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1;
SELECT DisplayName FROM users WHERE YEAR(CreationDate) = 2014;
SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1;
SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1;
SELECT COUNT(*) FROM users WHERE Views > 10 AND YEAR(CreationDate) > 2013;
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';
SELECT p.OwnerUserId, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Eliciting priors from experts';
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1;
SELECT U.DisplayName FROM users U JOIN posts P ON U.Id = P.OwnerUserId WHERE P.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)
SELECT SUM(p.CommentCount) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';
SELECT p.AnswerCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.AnswerCount DESC LIMIT 1;
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.LastEditorUserId WHERE p.Title = 'Examples for teaching: Correlation does not mean causation' ORDER BY p.LastEditDate DESC LIMIT 1;
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL;
SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ClosedDate IS NOT NULL;
SELECT COUNT(*) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age > 65 AND p.Score >= 20;
SELECT U.Location FROM users U JOIN posts P ON U.Id = P.OwnerUserId WHERE P.Title = 'Eliciting priors from experts';
SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'bayesian';
SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.Count = (SELECT MAX(Count) FROM tags)
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND YEAR(Date) = 2011;
SELECT U.DisplayName FROM users U JOIN badges B ON U.Id = B.UserId GROUP BY U.DisplayName ORDER BY COUNT(B.Id) DESC LIMIT 1;
SELECT AVG(p.Score) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';
SELECT AVG(badge_count) AS average_badges FROM (     SELECT COUNT(b.Id) AS badge_count     FROM badges b     JOIN users u ON b.UserId = u.Id     WHERE u.Views > 200     GROUP BY b.UserId ) as badge_user_count;
SELECT     (COUNT(CASE WHEN u.Age > 65 THEN p.Id END) * 100.0 / COUNT(p.Id)) AS Percentage_Elder_Owned FROM     posts p JOIN     users u ON p.OwnerUserId = u.Id WHERE     p.Score > 20;
SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';
SELECT CreationDate, COUNT(Id) AS VoteCount FROM votes GROUP BY CreationDate ORDER BY VoteCount DESC LIMIT 1;
SELECT COUNT(Id) FROM badges WHERE Name = 'Revival';
SELECT p.Title FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score = (SELECT MAX(Score) FROM comments)
SELECT COUNT(c.Id) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount = 1910;
SELECT p.FavoriteCount FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 3025 AND c.CreationDate = '2014-04-23 20:29:39'
SELECT Text FROM comments WHERE PostId = 107829 LIMIT 1;
SELECT p.Id, p.Title, p.ClosedDate FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = '23853' AND c.CreationDate = '2013-07-12 09:08:18.0' AND (p.ClosedDate IS NULL OR p.ClosedDate != '2013-07-12 09:08:18.0');
SELECT users.Reputation FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Id = 65041;
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini');
SELECT U.DisplayName FROM users U JOIN votes V ON U.Id = V.UserId WHERE V.Id = 6347;
SELECT COUNT(*) FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%';
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';
SELECT     COUNT(p.Id) AS NumberOfPosts,     COUNT(v.Id) AS NumberOfVotes,     COUNT(p.Id) / COUNT(v.Id) AS PostsToVotesRatio FROM     posts p LEFT JOIN     votes v ON p.Id = v.PostId WHERE     p.OwnerUserId = 24 GROUP BY     p.OwnerUserId;
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';
SELECT Text FROM comments WHERE Score = 17;
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'SilentGhost';
SELECT u.DisplayName FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text LIKE '%thank you user93%'
SELECT Text FROM comments WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'A Lion');
SELECT users.DisplayName, users.Reputation FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Title = 'Understanding what Dassault iSight is doing?';
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?';
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Necromancer' LIMIT 10;
SELECT p.LastEditorUserId, u.DisplayName FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Title = 'Open source tools for visualizing multi-dimensional data?';
SELECT p.Title FROM posts p JOIN postHistory ph ON p.Id = ph.PostId WHERE ph.UserId = (     SELECT u.Id     FROM users u     WHERE u.DisplayName = 'Vebjorn Ljosa' ) AND ph.PostHistoryTypeId IN (4,5,6) -- assuming these are the types for editing ORDER BY p.LastEditDate DESC;
SELECT SUM(p.Score) as TotalScore, u.WebsiteUrl FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Yevgeny' GROUP BY u.WebsiteUrl;
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND ph.UserId = c.UserId;
SELECT SUM(v.BountyAmount) FROM votes v JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%data%' AND v.VoteTypeId = 8;
SELECT u.DisplayName FROM users u JOIN votes v ON u.Id = v.UserId JOIN posts p ON p.Id = v.PostId WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%';
SELECT p.Title, AVG(p.ViewCount) AS AverageViewCount, c.Text, p.Score FROM posts p JOIN tags t ON t.Id = ANY (SELECT * FROM json_array_elements_text(p.Tags)) LEFT JOIN comments c ON c.PostId = p.Id WHERE t.TagName = 'humor' GROUP BY p.Title, c.Text, p.Score
SELECT COUNT(*) FROM comments WHERE UserId = 13;
SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)
SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users);
SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND YEAR(Date) = 2011;
SELECT COUNT(DISTINCT UserId) FROM badges GROUP BY UserId HAVING COUNT(*) > 5;
SELECT COUNT(*) FROM (   SELECT u.Id AS userId   FROM users u   INNER JOIN badges b1 ON u.Id = b1.UserId AND b1.Name = 'Teacher'   INNER JOIN badges b2 ON u.Id = b2.UserId AND b2.Name = 'Supporter'   WHERE u.Location LIKE '%New York%' ) AS result
SELECT u.DisplayName, u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 1;
SELECT u.Id, u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN (     SELECT PostId, COUNT(*) as post_history_count     FROM postHistory     GROUP BY PostId ) ph ON p.Id = ph.PostId WHERE ph.post_history_count = 1 AND p.ViewCount >= 1000;
SELECT u.DisplayName, COUNT(c.Id) as CommentCount, b.Name as BadgeName FROM users u JOIN comments c ON u.Id = c.UserId JOIN badges b ON u.Id = b.UserId GROUP BY u.DisplayName, b.Name ORDER BY CommentCount DESC;
SELECT COUNT(*) FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location LIKE '%India%' AND b.Name = 'Teacher';
SELECT     ((COUNT(CASE WHEN YEAR(Date) = 2010 THEN Id END) * 100.0 / COUNT(Id)) -      (COUNT(CASE WHEN YEAR(Date) = 2011 THEN Id END) * 100.0 / COUNT(Id))) AS Percentage_Difference FROM badges WHERE Name = 'Student'
Error: 第 10028 个样本有 3 个SQL。
Error: 第 10029 个样本有 2 个SQL。
SELECT Score, LinkTypeId FROM posts LEFT JOIN postLinks ON posts.Id = postLinks.PostId WHERE posts.Id = 395;
SELECT p.Id AS PostID, p.OwnerUserId AS UserID FROM posts p WHERE p.Score > 60;
SELECT SUM(FavoriteCount) FROM posts WHERE OwnerUserId = 686 AND YEAR(CreationDate) = 2011;
SELECT     AVG(u.UpVotes) AS Avg_UpVotes,     AVG(u.Age) AS Avg_Age FROM     users u JOIN     (SELECT         OwnerUserId,         COUNT(Id) AS NumPosts      FROM         posts      GROUP BY         OwnerUserId      HAVING         COUNT(Id) > 10) p ON u.Id = p.OwnerUserId WHERE     u.UpVotes IS NOT NULL AND u.Age IS NOT NULL;
SELECT COUNT(*) FROM badges WHERE Name = 'Announcer';
SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08';
SELECT COUNT(*) FROM comments WHERE Score > 60;
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47';
SELECT COUNT(Id) FROM posts WHERE Score = 10;
SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users)
SELECT u.Reputation FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0';
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Pierre'
SELECT DISTINCT b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY' ORDER BY b.Date;
SELECT     (COUNT(CASE WHEN b.Name = 'Teacher' THEN b.UserId END) * 100.0 / COUNT(DISTINCT u.Id)) AS TeacherBadgePercentage FROM     badges b JOIN     users u ON b.UserId = u.Id;
SELECT     (COUNT(CASE WHEN u.Age BETWEEN 13 AND 18 THEN u.Id ELSE NULL END) * 100.0 / COUNT(u.Id)) AS PercentageTeenagers FROM     badges b JOIN     users u ON b.UserId = u.Id WHERE     b.Name = 'Organizer';
SELECT c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:19:56.0'
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreationDate = '2010-07-19 19:37:33.0'
SELECT u.Age FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'Vienna, Austria'
SELECT COUNT(*) FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age BETWEEN 19 AND 65;
Error: 第 10049 个样本有 3 个SQL。
SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users)
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Sharpie';
SELECT COUNT(*) FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age > 65;
SELECT DisplayName FROM users WHERE Id = 30;
SELECT COUNT(*) FROM users WHERE Location LIKE '%New York%';
SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2010;
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65;
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1;
SELECT CAST(COUNT(CASE WHEN YEAR(CreationDate) = 2010 THEN Id END) AS FLOAT) / COUNT(CASE WHEN YEAR(CreationDate) = 2011 THEN Id END) FROM votes;
Error: 第 10059 个样本有 2 个SQL。
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (     SELECT Id     FROM users     WHERE DisplayName = 'Daniel Vassallo' );
SELECT COUNT(*) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'Harlan');
SELECT p.Id AS PostID FROM posts p WHERE p.OwnerUserId = (     SELECT u.Id     FROM users u     WHERE u.DisplayName = 'slashnick' ) AND p.AnswerCount = (     SELECT MAX(p2.AnswerCount)     FROM posts p2     WHERE p2.OwnerUserId = (         SELECT u.Id         FROM users u         WHERE u.DisplayName = 'slashnick'     ) )
SELECT     p.OwnerUserId,     u.DisplayName,     SUM(p.ViewCount) AS TotalViews FROM     posts p JOIN     users u ON p.OwnerUserId = u.Id WHERE     u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY     p.OwnerUserId,     u.DisplayName ORDER BY     TotalViews DESC LIMIT 1;
SELECT COUNT(*) FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN votes v ON p.Id = v.PostId WHERE u.DisplayName = 'Matt Parker' GROUP BY p.Id HAVING COUNT(v.Id) > 4;
SELECT COUNT(*) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score < 0 AND p.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Neil McGuigan');
Error: 第 10066 个样本有 2 个SQL。
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer'
SELECT     COUNT(CASE WHEN t.TagName = 'r' THEN p.Id END) * 100.0 / COUNT(p.Id) AS Percentage FROM     posts p JOIN     postTags pt ON p.Id = pt.PostId JOIN     tags t ON pt.TagId = t.Id WHERE     p.OwnerUserId = -1;
SELECT     (SELECT SUM(ViewCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Mornington')) -     (SELECT SUM(ViewCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Amos')) AS ViewDifference;
SELECT COUNT(*) FROM badges WHERE Name = 'commentator' AND YEAR(Date) = 2014;
SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';
SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users);
SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images';
SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 0;
SELECT p.Title, c.UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score > 60;
SELECT Name FROM badges WHERE YEAR(Date) = 2011 AND UserId IN (     SELECT Id     FROM users     WHERE Location LIKE '%North Pole%' );
SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.FavoriteCount > 150;
Error: 第 10078 个样本有 2 个SQL。
SELECT u.LastAccessDate, u.Location FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Outliers' ORDER BY u.LastAccessDate DESC;
SELECT p.Title FROM postLinks pl JOIN posts p ON pl.RelatedPostId = p.Id WHERE pl.PostId = (SELECT Id FROM posts WHERE Title = 'How to tell if something happened in a data set which monitors a value over time') AND pl.LinkTypeId = 3;
SELECT p.Id AS PostID, b.Name AS BadgeName FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN badges b ON u.Id = b.UserId WHERE u.DisplayName = 'Samuel' AND YEAR(p.CreationDate) = 2013 AND YEAR(b.Date) = 2013;
Error: 第 10082 个样本有 2 个SQL。
Error: 第 10083 个样本有 2 个SQL。
SELECT pl.RelatedPostId, p.Title, pl.LinkTypeId FROM postLinks AS pl JOIN posts AS p ON pl.RelatedPostId = p.Id WHERE pl.PostId = (     SELECT Id FROM posts WHERE Title = 'What are principal component scores?' );
SELECT p.ParentId, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.ParentId IS NOT NULL AND p.Score = (     SELECT MAX(Score)     FROM posts     WHERE ParentId = p.ParentId ) GROUP BY p.ParentId, u.DisplayName;
SELECT U.DisplayName, U.WebsiteUrl FROM users U JOIN votes V ON U.Id = V.UserId WHERE V.VoteTypeId = 8 GROUP BY U.Id, U.DisplayName, U.WebsiteUrl ORDER BY SUM(V.BountyAmount) DESC LIMIT 1;
SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5;
SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000;
SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts) LIMIT 1;
SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)
SELECT COUNT(*) FROM posts p JOIN votes v ON p.Id = v.PostId WHERE YEAR(p.CreationDate) = 2011 AND v.BountyAmount = 50;
SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users);
SELECT p.Score FROM posts p JOIN postTags pt ON p.Id = pt.PostId JOIN tags t ON pt.TagId = t.Id WHERE t.Count = (SELECT MAX(Count) FROM tags) ORDER BY p.ViewCount DESC LIMIT 1;
Error: 第 10094 个样本有 2 个SQL。
SELECT p.Id FROM posts p JOIN votes v ON p.Id = v.PostId WHERE v.UserId = 1465 AND p.FavoriteCount = (     SELECT MAX(FavoriteCount)     FROM posts     WHERE Id IN (         SELECT PostId         FROM votes         WHERE UserId = 1465     ) ) LIMIT 1;
SELECT p.Title FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.CreationDate = (SELECT MIN(CreationDate) FROM postLinks)
SELECT U.DisplayName FROM users U JOIN badges B ON U.Id = B.UserId GROUP BY U.DisplayName ORDER BY COUNT(B.Name) DESC LIMIT 1;
SELECT MIN(v.CreationDate) FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl';
SELECT MIN(p.CreationDate) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age = (     SELECT MIN(Age)     FROM users );
SELECT U.DisplayName FROM users U JOIN badges B ON U.Id = B.UserId WHERE B.Name = 'Autobiographer' ORDER BY B.Date LIMIT 1;
SELECT COUNT(DISTINCT u.Id) FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' GROUP BY u.Id HAVING SUM(p.FavoriteCount) >= 4;
SELECT AVG(v.PostId) as AveragePostsVoted FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.Age = (SELECT MAX(Age) FROM users)
SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);
SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;
SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65;
SELECT COUNT(*) FROM posts WHERE YEAR(CreationDate) = 2010 AND OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Jay Stevens');
SELECT Id, Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky') ORDER BY ViewCount DESC LIMIT 1;
SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score = (SELECT MAX(Score) FROM posts)
SELECT AVG(Score) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Stephen Turner');
SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ViewCount > 20000 AND YEAR(p.CreationDate) = 2011;
SELECT p.Id, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE YEAR(p.CreationDate) = 2010 ORDER BY p.FavoriteCount DESC LIMIT 1;
SELECT     (COUNT(p.Id) FILTER (WHERE u.Reputation > 1000 AND YEAR(p.CreationDate) = 2011)) * 100.0 / COUNT(p.Id) AS percentage FROM     posts p JOIN     users u ON p.OwnerUserId = u.Id WHERE     YEAR(p.CreationDate) = 2011;
SELECT (COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN Id END) * 100.0 / COUNT(Id)) AS Percentage FROM users;
SELECT p.ViewCount, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Computer Game Datasets' ORDER BY p.LastActivityDate DESC LIMIT 1;
SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);
SELECT COUNT(*) FROM comments WHERE PostId = (     SELECT Id     FROM posts     WHERE Score = (         SELECT MAX(Score)         FROM posts     )     ORDER BY Id LIMIT 1 );
SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;
SELECT U.DisplayName, U.Location FROM users U JOIN posts P ON U.Id = P.LastEditorUserId WHERE P.Id = 183 ORDER BY P.LastEditDate DESC LIMIT 1;
SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett') ORDER BY Date DESC LIMIT 1;
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;
SELECT DATEDIFF(b.Date, u.CreationDate) AS DaysToBadge FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Zolomon'
SELECT     COUNT(p.Id) AS NumberOfPosts,     COUNT(c.Id) AS NumberOfComments FROM     posts p LEFT JOIN     comments c ON p.OwnerUserId = c.UserId WHERE     p.OwnerUserId = (         SELECT             u.Id         FROM             users u         WHERE             u.CreationDate = (                 SELECT                     MAX(CreationDate)                 FROM                     users             )     ) GROUP BY     p.OwnerUserId;
SELECT c.Text, c.UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Analysing wind data with R' ORDER BY c.CreationDate DESC LIMIT 1;
SELECT COUNT(*) FROM badges WHERE Name = 'Citizen Patrol';
SELECT COUNT(*) FROM posts p JOIN postTags pt ON p.Id = pt.PostId JOIN tags t ON pt.TagId = t.Id WHERE t.TagName = 'careers';
Error: 第 10126 个样本有 2 个SQL。
SELECT     COUNT(DISTINCT c.Id) AS NumComments,     COUNT(DISTINCT p.Id) AS NumAnswers FROM     comments c LEFT JOIN     posts p ON p.ParentId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data') WHERE     c.PostId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data') GROUP BY     c.PostId, p.ParentId;
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';
Error: 第 10129 个样本有 2 个SQL。
SELECT     CAST(SUM(CASE WHEN p.Score >= 50 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(p.Id) * 100 as percentage FROM     posts p JOIN     users u ON p.OwnerUserId = u.Id WHERE     u.Reputation = (SELECT MAX(Reputation) FROM users)
SELECT COUNT(*) FROM posts WHERE Score < 20;
SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';
SELECT U.Reputation, U.UpVotes FROM users U JOIN comments C ON U.Id = C.UserId WHERE C.Text = 'fine, you win :)';
Error: 第 10135 个样本有 2 个SQL。
SELECT c.Text, c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;
SELECT comments.CreationDate, users.Age FROM comments JOIN users ON comments.UserId = users.Id WHERE users.WebsiteUrl LIKE '%http://%';
SELECT COUNT(*) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.ViewCount < 5;
Error: 第 10139 个样本有 2 个SQL。
SELECT COUNT(DISTINCT u.Age) FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score = 0 AND u.Age = 40;
SELECT p.Id AS PostID, c.Text AS Comments FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Title = 'Group differences on a five point Likert item';
SELECT COUNT(v.Id) AS UpVotes FROM votes v JOIN comments c ON v.PostId = c.PostId WHERE c.Text LIKE '%R is also lazy evaluated.%' AND v.VoteTypeId = 2;
SELECT Text FROM comments WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky');
SELECT DISTINCT c.UserDisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 1 AND 5 AND u.DownVotes = 0;
SELECT     (COUNT(CASE WHEN u.UpVotes = 0 THEN c.UserId END) * 100.0 / COUNT(c.UserId)) AS percentage FROM     comments c JOIN     users u ON c.UserId = u.Id WHERE     c.Score BETWEEN 5 AND 10;
SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = '3-D Man';
SELECT COUNT(*) FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength';
SELECT COUNT(*) FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;
SELECT s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.full_name HAVING COUNT(hp.power_id) > 15;
SELECT COUNT(*) FROM superhero WHERE eye_colour_id IN (SELECT id FROM colour WHERE colour = 'Blue');
SELECT c.colour FROM colour c JOIN superhero s ON s.skin_colour_id = c.id WHERE s.superhero_name = 'Apocalypse';
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';
SELECT superhero.superhero_name FROM superhero JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Blue' AND hair_colour.colour = 'Blond';
SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT s.superhero_name, s.full_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' ORDER BY s.height_cm DESC LIMIT 1;
SELECT p.publisher_name FROM publisher p JOIN superhero s ON p.id = s.publisher_id WHERE s.superhero_name = 'Sauron';
SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue';
SELECT AVG(height_cm) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT (COUNT(CASE WHEN hp.power_id IN (SELECT id FROM superpower WHERE power_name = 'Super Strength') THEN 1 END) * 100 / COUNT(s.id)) AS percentage FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics'
SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics');
SELECT p.publisher_name FROM publisher p JOIN superhero s ON p.id = s.publisher_id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' GROUP BY p.publisher_name ORDER BY MIN(ha.attribute_value) ASC LIMIT 1;
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics';
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II';
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Intelligence' ORDER BY ha.attribute_value LIMIT 1;
SELECT r.race FROM race r JOIN superhero s ON r.id = s.race_id WHERE s.superhero_name = 'Copycat';
SELECT COUNT(*) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50;
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Death Touch';
SELECT COUNT(*) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100;
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.superhero_name ORDER BY COUNT(hp.power_id) DESC LIMIT 1;
SELECT COUNT(*) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');
SELECT     (COUNT(CASE WHEN s.alignment_id = a.id AND a.alignment = 'Bad' AND s.publisher_id = p.id AND p.publisher_name = 'Marvel Comics' THEN s.id ELSE NULL END) * 100 / COUNT(s.id)) AS percentage_bad,     COUNT(CASE WHEN s.alignment_id = a.id AND a.alignment = 'Bad' AND s.publisher_id = p.id AND p.publisher_name = 'Marvel Comics' THEN s.id ELSE NULL END) AS num_bad_marvel FROM     superhero s JOIN     alignment a ON s.alignment_id = a.id JOIN     publisher p ON s.publisher_id = p.id;
SELECT     (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) -     (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) AS difference;
SELECT id FROM publisher WHERE publisher_name = 'Star Trek';
SELECT AVG(attribute_value) FROM hero_attribute;
SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;
SELECT colour.colour FROM colour JOIN superhero ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75;
SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON sh.id = hp.hero_id WHERE sh.superhero_name = 'Deathlok';
SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2;
SELECT p.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower p ON hp.power_id = p.id JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Male' GROUP BY p.power_name LIMIT 5;
SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');
SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1;
SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id WHERE hp.hero_id = 56;
SELECT full_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Demi-God') LIMIT 5;
SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');
SELECT r.race FROM race r JOIN superhero s ON r.id = s.race_id WHERE s.weight_kg = 169;
SELECT c.colour FROM colour AS c JOIN superhero AS s ON s.hair_colour_id = c.id JOIN race AS r ON s.race_id = r.id WHERE s.height_cm = 185 AND r.race = 'human';
SELECT c.colour FROM colour AS c JOIN superhero AS s ON s.eye_colour_id = c.id WHERE s.weight_kg = (     SELECT MAX(weight_kg) FROM superhero );
SELECT     (COUNT(CASE WHEN p.id = 13 THEN sh.id END) * 100.0 / COUNT(sh.id)) AS Marvel_Percentage FROM     superhero sh JOIN     publisher p ON sh.publisher_id = p.id WHERE     sh.height_cm BETWEEN 150 AND 180;
SELECT s.superhero_name, s.full_name FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'male' AND s.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero) ;
SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id GROUP BY sp.power_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ha.attribute_value FROM hero_attribute ha JOIN superhero s ON s.id = ha.hero_id WHERE s.superhero_name = 'Abomination';
SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id WHERE hp.hero_id = 1;
SELECT COUNT(*) FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'stealth';
SELECT s.superhero_name, s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'strength' ORDER BY ha.attribute_value DESC LIMIT 1;
Error: 第 10196 个样本有 3 个SQL。
SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN publisher p ON s.publisher_id = p.id WHERE a.attribute_name = 'durability' AND p.publisher_name = 'Dark Horse Comics' GROUP BY s.superhero_name ORDER BY ha.attribute_value DESC LIMIT 1;
SELECT c.colour FROM colour AS c JOIN superhero AS s ON s.eye_colour_id = c.id WHERE s.full_name = 'Abraham Sapien';
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Flight';
SELECT c1.colour AS eye_colour, c2.colour AS hair_colour, c3.colour AS skin_colour FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id JOIN colour c1 ON s.eye_colour_id = c1.id JOIN colour c2 ON s.hair_colour_id = c2.id JOIN colour c3 ON s.skin_colour_id = c3.id WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics';
SELECT s.superhero_name, p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.eye_colour_id = s.hair_colour_id AND s.hair_colour_id = s.skin_colour_id;
SELECT r.race FROM race r JOIN superhero s ON r.id = s.race_id WHERE s.superhero_name = 'A-Bomb';
SELECT (COUNT(CASE WHEN s.eye_colour_id = c.id AND c.colour = 'Blue' THEN 1 END) * 100.0 / COUNT(s.id)) AS percentage FROM superhero s JOIN colour c ON s.eye_colour_id = c.id JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Female';
SELECT superhero.superhero_name, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler'
SELECT gender.gender FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Adaptation';
SELECT COUNT(*) FROM hero_power hp JOIN superhero sh ON hp.hero_id = sh.id WHERE sh.superhero_name = 'Amazo';
SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON sh.id = hp.hero_id WHERE sh.full_name = 'Hunter Zolomon';
SELECT height_cm FROM superhero WHERE eye_colour_id IN (SELECT id FROM colour WHERE colour = 'Amber');
SELECT s.superhero_name FROM superhero s JOIN colour c1 ON s.eye_colour_id = c1.id JOIN colour c2 ON s.hair_colour_id = c2.id WHERE c1.colour = 'Black' AND c2.colour = 'Black';
SELECT c.colour FROM colour AS c JOIN superhero AS s ON s.eye_colour_id = c.id WHERE s.skin_colour_id IN (     SELECT c2.id     FROM colour AS c2     WHERE c2.colour = 'Gold' );
SELECT full_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');
SELECT superhero_name FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';
SELECT COUNT(*) FROM (   SELECT ha.hero_id   FROM hero_attribute ha   JOIN attribute a ON ha.attribute_id = a.id   WHERE a.attribute_name = 'Strength'   GROUP BY ha.hero_id   HAVING ha.attribute_value = (     SELECT MAX(attribute_value)     FROM hero_attribute     WHERE attribute_id = (       SELECT id       FROM attribute       WHERE attribute_name = 'Strength'     )   ) ) as t;
SELECT race.race, alignment.alignment FROM superhero JOIN race ON superhero.race_id = race.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';
SELECT MULTIPLY(DIVIDE((SELECT COUNT(*) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')), (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'))), 100) AS Percentage;
SELECT AVG(weight_kg) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien');
SELECT ABS((SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') - (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler'))
SELECT AVG(height_cm) AS average_height FROM superhero;
SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Abomination';
SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' ORDER BY ha.attribute_value DESC LIMIT 1;
SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;
SELECT attribute.attribute_name, hero_attribute.attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';
SELECT superhero_name FROM superhero WHERE eye_colour_id = 7 AND hair_colour_id = 9;
SELECT T.publisher_name FROM (     SELECT publisher_id     FROM superhero     WHERE superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy') ) AS S JOIN publisher AS T ON S.publisher_id = T.id GROUP BY T.publisher_name;
SELECT COUNT(*) FROM superhero WHERE publisher_id = 1;
SELECT (COUNT(CASE WHEN s.eye_colour_id = 7 THEN s.id END) * 100.0 / COUNT(s.id)) AS percentage_of_blue_eyed_superheroes FROM superhero s;
SELECT     CAST(COUNT(CASE WHEN gender_id = 1 THEN 1 END) AS FLOAT) /     COUNT(CASE WHEN gender_id = 2 THEN 1 END) AS ratio FROM     superhero;
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT id FROM superpower WHERE power_name = 'cryokinesis';
SELECT superhero_name FROM superhero WHERE id = 294;
SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;
SELECT c.colour FROM colour AS c JOIN superhero AS s ON s.eye_colour_id = c.id WHERE s.full_name = 'Karen Beecher-Duncan';
SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON sh.id = hp.hero_id WHERE sh.full_name = 'Helen Parr';
SELECT T.race FROM (     SELECT race_id     FROM superhero     WHERE weight_kg = 108 AND height_cm = 188 ) AS S JOIN race T ON S.race_id = T.id;
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;
SELECT r.race FROM race r JOIN superhero s ON r.id = s.race_id JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute) GROUP BY r.race ORDER BY ha.attribute_value DESC LIMIT 1;
SELECT a.alignment, sp.power_name FROM superhero sh JOIN alignment a ON sh.alignment_id = a.id JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Atom IV';
SELECT superhero.full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5;
SELECT AVG(attribute_value) FROM hero_attribute WHERE hero_id IN (     SELECT id     FROM superhero     WHERE alignment_id = 3 );
SELECT c.colour FROM colour AS c JOIN superhero AS s ON s.skin_colour_id = c.id JOIN hero_attribute AS ha ON s.id = ha.hero_id WHERE ha.attribute_value = 100;
SELECT COUNT(*) FROM superhero WHERE alignment_id = 1 AND gender_id = 2;
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_value BETWEEN 75 AND 80;
SELECT r.race FROM superhero s JOIN race r ON s.race_id = r.id JOIN colour c ON s.hair_colour_id = c.id JOIN gender g ON s.gender_id = g.id WHERE c.colour = 'blue' AND g.gender = 'male';
SELECT MULTIPLY(DIVIDE(SUM(T2.gender_id = 2 AND T1.alignment_id = 2), COUNT(T1.alignment_id = 2)), 100.0) FROM superhero AS T1 JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.alignment_id = 2;
SELECT     (SELECT COUNT(*)      FROM superhero      JOIN colour ON superhero.eye_colour_id = colour.id      WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL        AND colour.id = 7) -     (SELECT COUNT(*)      FROM superhero      JOIN colour ON superhero.eye_colour_id = colour.id      WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL        AND colour.id = 1)
SELECT ha.attribute_value FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id JOIN superhero sh ON ha.hero_id = sh.id WHERE a.attribute_name = 'Strength' AND sh.superhero_name = 'Hulk';
SELECT p.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower p ON hp.power_id = p.id WHERE s.superhero_name = 'Ajax';
SELECT COUNT(*) FROM superhero WHERE skin_colour_id IN (SELECT id FROM colour WHERE colour = 'Green') AND alignment_id IN (SELECT id FROM alignment WHERE alignment = 'Bad');
SELECT COUNT(*) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Wind Control' ORDER BY s.superhero_name ASC;
SELECT gender.gender FROM gender JOIN superhero ON superhero.gender_id = gender.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Phoenix Force';
SELECT superhero_name FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics') ORDER BY weight_kg DESC LIMIT 1;
SELECT AVG(T1.height_cm) FROM superhero AS T1 JOIN race AS T2 ON T1.race_id = T2.id JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.race <> 'Human' AND T3.publisher_name = 'Dark Horse Comics';
SELECT COUNT(*) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' AND ha.attribute_value = 100;
SELECT     (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) -     (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS difference;
SELECT attribute.attribute_name FROM attribute JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value LIMIT 1;
SELECT c.colour FROM colour AS c JOIN superhero AS s ON s.eye_colour_id = c.id WHERE s.superhero_name = 'Abomination';
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';
SELECT     (COUNT(CASE WHEN s.gender_id = g.id AND g.gender = 'Female' THEN 1 END) * 100.0 / COUNT(s.id)) AS female_percentage FROM     superhero s JOIN     gender g ON s.gender_id = g.id JOIN     publisher p ON s.publisher_id = p.id WHERE     p.publisher_name = 'George Lucas';
SELECT MULTIPLY(DIVIDE((SELECT COUNT(*) FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Good' AND superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')), (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics'))), 100.0) AS percentage_good_superheroes;
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';
SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute);
SELECT full_name FROM superhero WHERE superhero_name = 'Alien';
SELECT s.superhero_name, s.full_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.weight_kg < 100 AND c.colour = 'brown';
SELECT ha.attribute_value FROM hero_attribute ha JOIN superhero s ON s.id = ha.hero_id WHERE s.superhero_name = 'Aquababy';
Error: 第 10270 个样本有 2 个SQL。
SELECT AVG(height_cm) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'neutral');
SELECT DISTINCT hp.hero_id FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Intelligence';
SELECT c.colour FROM colour AS c JOIN superhero AS s ON s.eye_colour_id = c.id WHERE s.superhero_name = 'Blackwulf';
SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id JOIN superhero sh ON hp.hero_id = sh.id WHERE sh.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero);
SELECT d.driverRef FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 18 ORDER BY q.q1 DESC LIMIT 5;
SELECT d.surname FROM drivers d JOIN (     SELECT q.driverId, MIN(q.q2) as best_q2     FROM qualifying q     WHERE q.raceId = 19     GROUP BY q.driverId     ORDER BY best_q2     LIMIT 1 ) subq ON d.driverId = subq.driverId;
SELECT DISTINCT r.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.location LIKE '%Shanghai%';
SELECT url FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya';
SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Germany';
SELECT c.position FROM circuits c JOIN constructors co ON c.circuitId = co.constructorId WHERE co.name = 'Renault';
Error: 第 10281 个样本有 2 个SQL。
SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Spain';
SELECT c.lat, c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.name LIKE '%Australian Grand Prix%' AND c.country = 'Australia';
SELECT r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit';
SELECT T2.time FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Sepang International Circuit'
SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Abu Dhabi Grand Prix';
SELECT c.country FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE cr.raceId = 24 AND cr.points = 1;
SELECT q.q1 FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 354 AND d.forename = 'Bruno' AND d.surname = 'Senna';
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 355 AND q.q2 = '01:40';
Error: 第 10290 个样本有 2 个SQL。
Error: 第 10291 个样本有 2 个SQL。
SELECT s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;
SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId IN (     SELECT raceId     FROM races     WHERE date = '2015-11-29' ) AND positionOrder IS NOT NULL;
SELECT d.surname, d.forename, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 592 AND r.time IS NOT NULL ORDER BY d.dob ASC LIMIT 1;
SELECT d.url FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE l.raceId = 161 AND l.time = '0:01:27';
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 933 AND r.fastestLapSpeed = (     SELECT MAX(fastestLapSpeed)     FROM results     WHERE raceId = 933 );
SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Malaysian Grand Prix';
SELECT c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE cr.raceId = 9 ORDER BY cr.points DESC LIMIT 1;
SELECT q.q1 FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE d.forename = 'Lucas' AND d.surname = 'di Grassi' AND q.raceId = 345;
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 347 AND q.q2 = '01:15';
SELECT d.code FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 45 AND q.q3 = '01:33'
SELECT T1.time FROM results AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 743 AND T2.forename = 'Bruce' AND T2.surname = 'McLaren';
SELECT d.surname, d.forename FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = (     SELECT raceId     FROM races     WHERE name = 'San Marino Grand Prix' AND year = 2006 ) AND r.position = 2;
SELECT s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;
SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND positionOrder IS NOT NULL;
SELECT d.driverRef, d.surname, d.forename, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 872 AND r.time IS NOT NULL ORDER BY d.dob DESC LIMIT 1;
SELECT d.forename, d.surname FROM drivers d JOIN (     SELECT driverId, MIN(time) as best_lap_time     FROM lapTimes     WHERE raceId = 348     GROUP BY driverId     ORDER BY best_lap_time     LIMIT 1 ) lt ON d.driverId = lt.driverId;
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results)
SELECT     ((t1.fastestLapSpeed - t2.fastestLapSpeed) / t1.fastestLapSpeed) * 100 AS percentage_faster FROM     (     SELECT         AVG(results.fastestLapSpeed) AS fastestLapSpeed     FROM         results     JOIN         drivers ON results.driverId = drivers.driverId     WHERE         results.raceId = 853 AND         drivers.forename = 'Paul' AND         drivers.surname = 'di Resta'     ) t1,     (     SELECT         AVG(results.fastestLapSpeed) AS fastestLapSpeed     FROM         results     WHERE         results.raceId = 854     ) t2;
SELECT     (COUNT(CASE WHEN T1.time IS NOT NULL AND T1.date = '1983-07-16' THEN T1.driverId END) * 100.0 /     COUNT(CASE WHEN T1.date = '1983-07-16' THEN T1.driverId END)) AS completion_rate FROM     results AS T1 JOIN     races AS T2 ON T1.raceId = T2.raceId WHERE     T2.date = '1983-07-16';
SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix';
Error: 第 10312 个样本有 2 个SQL。
WITH first_race AS (   SELECT year, month   FROM races   WHERE date = (SELECT MIN(date) FROM races) ), same_month_year_races AS (   SELECT name, date   FROM races   WHERE year = (SELECT year FROM first_race) AND month = (SELECT month FROM first_race) ) SELECT * FROM same_month_year_races;
SELECT T2.name, T2.date FROM races AS T2 JOIN seasons AS T1 ON T2.year = T1.year WHERE T1.year = 1999 ORDER BY T2.round DESC LIMIT 1;
SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1;
SELECT name FROM races WHERE year = 2017 AND raceId NOT IN (SELECT raceId FROM races WHERE year = 2000);
SELECT T1.country, T1.name, T1.location FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year LIMIT 1;
SELECT MAX(seasons.year) FROM seasons JOIN races ON seasons.year = races.year JOIN circuits ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix';
SELECT COUNT(DISTINCT T2.year) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Silverstone' AND T2.name = 'British Grand Prix';
SELECT d.surname, d.forename, ds.position FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN driverStandings ds ON d.driverId = ds.driverId AND r.raceId = ds.raceId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Singapore Grand Prix' AND ra.year = 2010 ORDER BY ds.position;
SELECT d.forename, d.surname, MAX(r.points) FROM drivers d JOIN results r ON d.driverId = r.driverId GROUP BY d.driverId ORDER BY r.points DESC LIMIT 1;
SELECT d.surname, d.forename, ds.points FROM driverStandings ds JOIN drivers d ON ds.driverId = d.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.year = 2017 AND r.name = 'Chinese Grand Prix' ORDER BY ds.points DESC LIMIT 3;
SELECT T1.driverId, T4.name AS driver_name, T3.raceId, T5.name AS race_name FROM lapTimes AS T1 JOIN races AS T3 ON T1.raceId = T3.raceId JOIN (   SELECT raceId, MIN(time) as best_time   FROM lapTimes   GROUP BY raceId ) AS T2 ON T1.raceId = T2.raceId AND T1.time = T2.best_time JOIN drivers AS T4 ON T1.driverId = T4.driverId JOIN races AS T5 ON T3.raceId = T5.raceId LIMIT 1;
SELECT AVG(lapTimes.time) FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.forename = 'Sebastian' AND drivers.surname = 'Vettel' AND races.name = 'Chinese Grand Prix' AND races.year = 2009;
SELECT     (COUNT(CASE WHEN r.position > 1 THEN 1 END) * 100.0 / COUNT(r.resultId)) AS percentage FROM     results r JOIN     races ra ON r.raceId = ra.raceId JOIN     drivers d ON r.driverId = d.driverId WHERE     d.surname = 'Hamilton' AND ra.year >= 2010;
SELECT d.surname, d.nationality, AVG(ds.points) as avg_points FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.wins = (SELECT MAX(wins) FROM driverStandings) GROUP BY d.driverId ORDER BY avg_points DESC LIMIT 1;
SELECT driverRef, MAX(2022 - YEAR(dob)) as age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;
SELECT c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE YEAR(r.date) BETWEEN 1990 AND 2000 GROUP BY c.name HAVING COUNT(r.raceId) = 4;
SELECT circuits.name, circuits.location, races.name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'USA' AND races.year = 2006;
SELECT races.name, circuits.name, circuits.location FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE YEAR(races.date) = 2005 AND MONTH(races.date) = 9;
SELECT r.name FROM races r JOIN results rs ON r.raceId = rs.raceId JOIN drivers d ON rs.driverId = d.driverId WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND rs.position < 10;
SELECT COUNT(*) FROM (   SELECT r.name AS race_name, d.surname AS driver, MAX(cr.points) AS max_points   FROM races r   JOIN results rs ON r.raceId = rs.raceId   JOIN drivers d ON rs.driverId = d.driverId   JOIN constructorResults cr ON cr.raceId = r.raceId AND cr.constructorId = rs.constructorId   JOIN circuits c ON r.circuitId = c.circuitId   WHERE c.name = 'Sepang International Circuit' AND d.surname = 'Schumacher'   GROUP BY r.raceId   HAVING MAX(cr.points) = (     SELECT MAX(points)     FROM constructorResults     WHERE raceId = r.raceId   ) ) as subquery;
SELECT r.name, r.year FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher' AND res.fastestLap = (SELECT MIN(fastestLap)                       FROM results                       WHERE driverId = (SELECT driverId                                         FROM drivers                                         WHERE forename = 'Michael' AND surname = 'Schumacher'));
SELECT AVG(results.points) FROM results JOIN races ON results.raceId = races.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND races.year = 2000;
SELECT races.name, results.points FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY races.year LIMIT 1;
SELECT races.name, circuits.country FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date;
SELECT r.name AS race_name, r.year, c.location FROM races r JOIN circuits c ON r.circuitId = c.circuitId JOIN results res ON r.raceId = res.raceId WHERE res.laps = (SELECT MAX(laps) FROM results)
SELECT     (COUNT(CASE WHEN c.country = 'Germany' THEN r.raceId END) * 100.0 / COUNT(r.raceId)) AS percentage FROM     races r JOIN     circuits c ON r.circuitId = c.circuitId WHERE     r.name = 'European Grand Prix';
SELECT lat, lng FROM circuits WHERE name = 'Silverstone';
SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1;
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';
SELECT country FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits);
SELECT COUNT(*) FROM drivers WHERE code IS NULL;
SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers);
SELECT surname FROM drivers WHERE nationality = 'Italian';
SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';
SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';
SELECT c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year = 2009 AND r.name = 'Spanish Grand Prix';
SELECT DISTINCT T2.year FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Silverstone'
SELECT r.url FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone';
SELECT T1.time FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Abu Dhabi' AND T1.year BETWEEN 2010 AND 2019;
SELECT COUNT(*) FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Italy';
SELECT races.date FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Circuit de Barcelona-Catalunya';
SELECT circuits.url FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;
SELECT MIN(results.fastestLapTime) FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.fastestLapSpeed = (SELECT MAX(results.fastestLapSpeed) FROM results);
SELECT d.driverRef FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON ra.raceId = r.raceId WHERE ra.name = 'Australian Grand Prix' AND ra.year = 2008 AND r.position = 1;
SELECT r.name FROM races r JOIN results rs ON r.raceId = rs.raceId JOIN drivers d ON rs.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';
SELECT r.name FROM results AS res JOIN races AS r ON res.raceId = r.raceId JOIN drivers AS d ON res.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY res.rank LIMIT 1;
SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2009 AND name = 'Spanish Grand Prix');
SELECT DISTINCT T2.year FROM drivers AS T1 JOIN results AS T3 ON T1.driverId = T3.driverId JOIN races AS T2 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton';
SELECT T1.positionOrder FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton';
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE r.grid = 4 AND ra.name = 'Australian Grand Prix' AND ra.year = 2008;
SELECT COUNT(*) FROM results JOIN races ON results.raceId = races.raceId WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 AND results.time IS NOT NULL;
SELECT T1.milliseconds, T1.time FROM lapTimes AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.milliseconds ASC LIMIT 1;
SELECT T1.time FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.rank = 2;
SELECT d.surname, d.url FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = (     SELECT raceId     FROM races     WHERE year = 2008 AND name = 'Australian Grand Prix' ) AND r.positionOrder = 1;
SELECT COUNT(*) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON ra.raceId = r.raceId JOIN circuits c ON c.circuitId = ra.circuitId WHERE d.nationality = 'American' AND ra.name = 'Australian Grand Prix' AND ra.year = 2008;
SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 AND T3.name = 'Australian Grand Prix' AND T2.time IS NOT NULL;
SELECT SUM(T1.points) FROM results AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton';
SELECT AVG(TIME_TO_SEC(replace(replace(replace(results.fastestLapTime, ':', ' '), '.', ''), ' ', '.'))) as AvgFastestLapInSeconds FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT     (COUNT(CASE WHEN T2.time IS NOT NULL THEN T1.raceId END) * 1.0 / COUNT(T1.raceId)) AS rate FROM     races AS T1     INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE     T1.year = 2008 AND T1.name = 'Australian Grand Prix'
WITH ChampionTime AS (   SELECT r.raceId,          MIN(l.time) AS ChampionTime   FROM results r   JOIN lapTimes l ON r.resultId = l.driverId   WHERE r.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)   AND r.position = 1   GROUP BY r.raceId ), LastDriverTime AS (   SELECT r.raceId,          SUM(l.time) AS LastDriverTime   FROM results r   JOIN lapTimes l ON r.resultId = l.driverId   WHERE r.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)   AND r.position = (SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008))   GROUP BY r.raceId ) SELECT ((ChampionTime.ChampionTime - LastDriverTime.LastDriverTime) / LastDriverTime.LastDriverTime) * 100 AS PercentageFaster FROM ChampionTime, LastDriverTime;
SELECT COUNT(*) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia';
SELECT lat, lng FROM circuits WHERE country = 'USA';
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND YEAR(dob) > 1980;
SELECT AVG(cs.points) FROM constructorStandings cs JOIN constructors c ON cs.constructorId = c.constructorId WHERE c.nationality = 'British';
SELECT c.name, MAX(cs.points) FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId GROUP BY c.name ORDER BY MAX(cs.points) DESC LIMIT 1;
SELECT c.name FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE cr.raceId = 291 AND cr.points = 0;
SELECT COUNT(*) FROM (   SELECT c.constructorId   FROM constructors c   JOIN constructorResults cr ON c.constructorId = cr.constructorId   JOIN races r ON cr.raceId = r.raceId   WHERE c.nationality = 'Japanese' AND cr.points = 0   GROUP BY c.constructorId   HAVING COUNT(r.raceId) = 2 ) as temp;
SELECT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.position = 1;
SELECT COUNT(DISTINCT c.constructorId) FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN results r ON cr.raceId = r.raceId JOIN lapTimes lt ON r.resultId = lt.driverId AND r.raceId = lt.raceId WHERE c.nationality = 'French' AND lt.lap > 50;
SELECT     (COUNT(CASE WHEN T2.time IS NOT NULL THEN T1.driverId END) * 100.0 / COUNT(T1.driverId)) AS completion_percentage FROM     drivers T1 JOIN     results T2 ON T1.driverId = T2.driverId WHERE     T1.nationality = 'Japanese' AND     T2.raceId IN (SELECT raceId FROM races WHERE year BETWEEN 2007 AND 2009);
SELECT     T1.year,     AVG(T2.time) AS average_time FROM     races AS T1 JOIN     results AS T2 ON T1.raceId = T2.raceId WHERE     T2.position = 1 AND T2.time IS NOT NULL GROUP BY     T1.year;
SELECT d.forename, d.surname FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE YEAR(d.dob) > 1975 AND ds.position = '2';
SELECT COUNT(*) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON ra.raceId = r.raceId WHERE d.nationality = 'Italian' AND r.time IS NULL;
SELECT d.forename, d.surname FROM drivers d JOIN (     SELECT driverId, MIN(milliseconds) as min_milliseconds     FROM lapTimes     GROUP BY driverId ) lt ON d.driverId = lt.driverId ORDER BY lt.min_milliseconds ASC LIMIT 1;
SELECT T3.fastestLap FROM (     SELECT T1.driverId, T1.raceId     FROM results AS T1     JOIN races AS T2 ON T1.raceId = T2.raceId     WHERE T2.year = 2009     AND T1.position = 1 ) AS T1 JOIN results AS T3 ON T1.raceId = T3.raceId AND T1.driverId = T3.driverId ORDER BY T3.milliseconds ASC LIMIT 1;
SELECT AVG(T2.fastestLapSpeed) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009;
SELECT T1.name, T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.time IS NOT NULL AND T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds LIMIT 1;
SELECT     (COUNT(CASE WHEN d.dob < '1985-01-01' AND r.laps > 50 THEN d.driverId END) * 100.0 /      COUNT(CASE WHEN EXTRACT(YEAR FROM s.year) BETWEEN 2000 AND 2005 THEN d.driverId END)) AS percentage FROM     races r JOIN     results res ON r.raceId = res.raceId JOIN     drivers d ON res.driverId = d.driverId JOIN     seasons s ON r.year = s.year WHERE     EXTRACT(YEAR FROM s.year) BETWEEN 2000 AND 2005;
SELECT COUNT(*) FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.nationality = 'French' AND lapTimes.time < '02:00.00';
SELECT code FROM drivers WHERE nationality = 'America';
SELECT raceId FROM races WHERE year = 2009;
SELECT COUNT(driverId) FROM results WHERE raceId = 18;
SELECT     T1.code,     COUNT(CASE WHEN T1.nationality = 'Dutch' THEN 1 END) AS DutchDrivers FROM     drivers T1 WHERE     T1.dob IS NOT NULL ORDER BY     YEAR(T1.dob) ASC LIMIT 3;
SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';
SELECT COUNT(*) FROM drivers WHERE nationality = 'Australian' AND YEAR(dob) = 1980;
SELECT d.surname, MIN(l.time) as earliest_lap_time FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE d.nationality = 'German' AND YEAR(d.dob) BETWEEN 1980 AND 1990 GROUP BY d.driverId ORDER BY earliest_lap_time LIMIT 3;
SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY STRFTIME('%Y', dob) ASC LIMIT 1;
SELECT d.driverId, d.code FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON ra.raceId = r.raceId WHERE YEAR(d.dob) = 1971 AND r.fastestLapTime IS NOT NULL;
SELECT d.surname, MAX(lt.time) AS latest_lap_time FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'Spanish' AND YEAR(d.dob) < 1982 GROUP BY d.driverId ORDER BY latest_lap_time DESC LIMIT 10;
SELECT T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results)
SELECT YEAR FROM (     SELECT raceId, MAX(milliseconds) AS MaxTime     FROM lapTimes     GROUP BY raceId ) AS T1 JOIN races ON T1.raceId = races.raceId ORDER BY YEAR LIMIT 1
SELECT driverId FROM (   SELECT driverId, MIN(time) AS min_time   FROM lapTimes   WHERE lap = 1   GROUP BY driverId ) AS subquery ORDER BY min_time LIMIT 5;
SELECT COUNT(*) FROM results JOIN status ON results.statusId = status.statusId WHERE results.raceId BETWEEN 50 AND 100 AND status.status = 'Disqualified' AND results.time IS NOT NULL;
SELECT location, lat, lng, COUNT(*) as times_held FROM circuits WHERE country = 'Austria' GROUP BY circuitId;
SELECT T2.raceId, T2.name, COUNT(*) AS Finishers FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL GROUP BY T2.raceId ORDER BY Finishers DESC LIMIT 1;
SELECT d.driverRef, d.nationality, d.dob FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 23 AND q.q2 IS NOT NULL;
SELECT T3.year, T3.name, T3.date, T3.time FROM (     SELECT MIN(year(dob)) AS youngest, driverId     FROM drivers ) AS T1 JOIN qualifying AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.youngest = T3.year ORDER BY T3.year LIMIT 1;
SELECT COUNT(*) FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN status ON results.statusId = status.statusId WHERE status.status = 'Disqualified' AND drivers.nationality = 'American';
SELECT c.name, c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE c.nationality = 'Italian' ORDER BY cs.points DESC LIMIT 1;
SELECT c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId GROUP BY c.constructorId, c.url ORDER BY SUM(cs.wins) DESC LIMIT 1;
SELECT T3.surname, T3.forename, MAX(T1.time) FROM lapTimes AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 GROUP BY T3.driverId ORDER BY MAX(T1.time) DESC LIMIT 1;
SELECT r.name, MIN(l.time) as fastest_time FROM races r JOIN lapTimes l ON r.raceId = l.raceId WHERE l.lap = 1 GROUP BY r.name ORDER BY fastest_time LIMIT 1;
SELECT AVG(T1.fastestLapTime) FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2006 AND T2.name = 'United States Grand Prix' AND T1.rank < 11;
SELECT d.surname, AVG(ps.duration) as avg_duration FROM drivers d JOIN pitStops ps ON d.driverId = ps.driverId WHERE d.nationality = 'German' AND EXTRACT(YEAR FROM d.dob) BETWEEN 1980 AND 1985 GROUP BY d.driverId, d.surname ORDER BY avg_duration ASC LIMIT 5;
SELECT T1.driverId, T1.time FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.position = 1;
SELECT c.constructorRef, c.url FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.year = 2009 AND r.name = 'Singapore Grand Prix' ORDER BY cr.points DESC LIMIT 1;
SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND YEAR(dob) BETWEEN 1981 AND 1991;
SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND YEAR(dob) BETWEEN 1971 AND 1985 ORDER BY dob DESC;
SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring';
SELECT MAX(T3.points) AS Score, T2.name, T2.nationality FROM races AS T1 JOIN constructorResults AS T3 ON T1.raceId = T3.raceId JOIN constructors AS T2 ON T3.constructorId = T2.constructorId WHERE T1.name = 'Monaco Grand Prix' AND T1.year BETWEEN 1980 AND 2010 GROUP BY T2.constructorId ORDER BY Score DESC LIMIT 1;
SELECT AVG(r.points) FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND ra.name = 'Turkish Grand Prix';
Error: 第 10425 个样本有 3 个SQL。
SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
Error: 第 10427 个样本有 2 个SQL。
SELECT r.name FROM races r JOIN results res ON r.raceId = res.raceId WHERE res.fastestLapTime = (     SELECT MIN(fastestLapTime)     FROM results )
SELECT c.name, c.location, c.country FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.date = (SELECT MAX(date) FROM races)
SELECT d.forename, d.surname FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2008 AND c.name = 'Marina Bay Street Circuit' AND q.position = 1 AND q.q3 IS NOT NULL ORDER BY q.q3 ASC LIMIT 1;
SELECT d.forename, d.surname, d.nationality, r.name AS race_name FROM drivers d JOIN results res ON d.driverId = res.driverId JOIN races r ON res.raceId = r.raceId WHERE d.dob = (SELECT MAX(dob) FROM drivers) GROUP BY d.driverId ORDER BY r.date ASC LIMIT 1;
SELECT COUNT(*) FROM results JOIN races ON results.raceId = races.raceId JOIN status ON results.statusId = status.statusId WHERE races.name = 'Canadian Grand Prix' AND status.status = 'Accident' GROUP BY results.driverId ORDER BY COUNT(*) DESC LIMIT 1;
SELECT d.forename, d.surname, COUNT(rs.wins) AS total_wins FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN (     SELECT raceId, MAX(position) AS max_position     FROM driverStandings     GROUP BY raceId ) m ON ds.raceId = m.raceId AND ds.position = m.max_position JOIN races r ON ds.raceId = r.raceId WHERE d.dob = (     SELECT MIN(dob)     FROM drivers ) GROUP BY d.driverId, d.forename, d.surname;
SELECT MAX(duration) FROM pitStops;
SELECT MIN(time) FROM lapTimes;
SELECT MAX(duration) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton');
SELECT T2.lap FROM pitStops AS T2 JOIN races AS T1 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2011 AND T1.name = 'Australian Grand Prix' AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
SELECT pitStops.duration FROM pitStops JOIN races ON pitStops.raceId = races.raceId WHERE races.year = 2011 AND races.name = 'Australian Grand Prix';
SELECT lt.time FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY lt.milliseconds ASC LIMIT 1;
SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.time = (     SELECT MIN(time)     FROM lapTimes )
SELECT c.name, lt.position FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId JOIN drivers d ON lt.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' GROUP BY lt.raceId HAVING lt.time = MIN(lt.time);
SELECT MIN(lt.time) FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId WHERE r.name = 'Austrian Grand Prix'
SELECT c.name, MIN(l.time) as lap_record FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN lapTimes l ON r.raceId = l.raceId WHERE c.country = 'Italy' GROUP BY c.name;
SELECT r.name FROM races r JOIN lapTimes l ON r.raceId = l.raceId WHERE r.circuitId = (SELECT c.circuitId FROM circuits c WHERE c.name = 'Austrian Grand Prix') GROUP BY r.name ORDER BY MIN(l.time) ASC LIMIT 1;
SELECT pitStops.duration FROM pitStops JOIN races ON pitStops.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId JOIN (     SELECT raceId, driverId, MIN(milliseconds) as min_lap_time     FROM lapTimes     WHERE raceId = (         SELECT raceId         FROM races         WHERE name = 'Austrian Grand Prix'     )     GROUP BY raceId, driverId ) AS fastest_laps ON pitStops.raceId = fastest_laps.raceId AND pitStops.driverId = fastest_laps.driverId WHERE circuits.name = 'Austrian Grand Prix' AND fastest_laps.min_lap_time = (     SELECT MIN(milliseconds)     FROM lapTimes     WHERE raceId = (         SELECT raceId         FROM races         WHERE name = 'Austrian Grand Prix'     ) );
SELECT c.lat, c.lng FROM circuits c JOIN (     SELECT raceId, MIN(milliseconds) as min_time     FROM lapTimes     WHERE time = '01:29.488'     GROUP BY raceId ) lt ON c.circuitId = (     SELECT circuitId     FROM races     WHERE raceId = lt.raceId ) WHERE lt.min_time = (     SELECT MIN(milliseconds)     FROM lapTimes     WHERE raceId = lt.raceId );
SELECT AVG(pitStops.milliseconds) FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT AVG(lt.milliseconds) FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Italy';
SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
Error: 第 10450 个样本有 2 个SQL。
SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes);
SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low';
Error: 第 10453 个样本有 3 个SQL。
SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1;
SELECT T1.team_long_name FROM Team AS T1 JOIN (     SELECT home_team_api_id, COUNT(*) as lost_matches     FROM Match     WHERE season = '2015/2016' AND home_team_goal < away_team_goal     GROUP BY home_team_api_id ) AS T2 ON T1.team_api_id = T2.home_team_api_id ORDER BY lost_matches ASC LIMIT 1;
SELECT p.player_name, pa.penalties FROM Player AS p JOIN Player_Attributes AS pa ON p.player_api_id = pa.player_api_id WHERE pa.penalties IS NOT NULL GROUP BY p.player_api_id ORDER BY SUM(pa.penalties) DESC LIMIT 10;
SELECT T1.team_long_name FROM Team AS T1 JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id JOIN League AS T3 ON T2.league_id = T3.id WHERE T3.name = 'Scotland Premier League' AND T2.season = '2009/2010' AND (T2.away_team_goal - T2.home_team_goal) > 0 GROUP BY T1.team_api_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT team_long_name, buildUpPlaySpeed FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE buildUpPlaySpeed IN (     SELECT buildUpPlaySpeed     FROM Team_Attributes     ORDER BY buildUpPlaySpeed DESC     LIMIT 4 ) ORDER BY buildUpPlaySpeed DESC;
SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' AND M.home_team_goal = M.away_team_goal GROUP BY L.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT     (strftime('%Y', 'now') - strftime('%Y', P.birthday)) as age FROM     Player_Attributes PA JOIN     Player P ON PA.player_api_id = P.player_api_id WHERE     PA.sprint_speed >= 97 AND     PA.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00';
SELECT L.name, COUNT(M.id) AS total_matches FROM Match M JOIN League L ON M.league_id = L.id GROUP BY L.name ORDER BY total_matches DESC LIMIT 1;
SELECT AVG(height) FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';
SELECT player_api_id FROM Player_Attributes WHERE substr(date,1,4) = '2010' GROUP BY player_api_id HAVING AVG(overall_rating) > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date,1,4) = '2010') ORDER BY AVG(overall_rating) DESC LIMIT 1;
SELECT T1.team_fifa_api_id FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed BETWEEN 51 AND 59;
SELECT T1.team_long_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE strftime('%Y', T2.date) = '2012' AND T2.buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL);
SELECT (COUNT(CASE WHEN preferred_foot = 'left' THEN 1 END) * 1.0 / COUNT(*)) * 100 AS leftFootPercentage FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00';
SELECT L.name, SUM(M.home_team_goal + M.away_team_goal) as total_goals FROM League L JOIN Match M ON L.id = M.league_id GROUP BY L.name ORDER BY total_goals ASC LIMIT 5;
SELECT AVG(long_shots) FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Ahmed Samir Farag');
SELECT p.player_name, AVG(pa.heading_accuracy) as avg_heading_accuracy FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.height > 180 GROUP BY p.player_name ORDER BY avg_heading_accuracy DESC LIMIT 10;
SELECT T3.team_long_name FROM Team_Attributes AS T1 JOIN Team AS T3 ON T1.team_api_id = T3.team_api_id WHERE T1.buildUpPlayDribblingClass = 'Normal' AND T1.date BETWEEN '2014-01-01 00:00:00' AND '2014-12-31 00:00:00' AND T1.chanceCreationPassing < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE date BETWEEN '2014-01-01 00:00:00' AND '2014-12-31 00:00:00') ORDER BY T1.chanceCreationPassing DESC;
SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal);
SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';
SELECT player_name FROM Player WHERE SUBSTR(birthday,1,4) = '1970' AND SUBSTR(birthday,6,2) = '10';
SELECT attacking_work_rate FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Franco Zennaro') ORDER BY date DESC LIMIT 1;
SELECT ta.buildUpPlayPositioningClass FROM Team_Attributes ta JOIN Team t ON ta.team_api_id = t.team_api_id WHERE t.team_long_name = 'ADO Den Haag';
SELECT pa.heading_accuracy FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Francois Affolter' AND pa.date = '2014-09-18 00:00:00';
SELECT overall_rating FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Gabriel Tamas') AND strftime('%Y', date) = '2011';
SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Scotland Premier League' AND Match.season = '2015/2016';
SELECT pa.preferred_foot FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.birthday = (SELECT MAX(birthday) FROM Player)
SELECT player_name FROM Player WHERE player_api_id IN (     SELECT player_api_id     FROM Player_Attributes     WHERE potential = (         SELECT MAX(potential)         FROM Player_Attributes     ) );
Error: 第 10481 个样本有 2 个SQL。
SELECT T1.team_short_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Risky';
SELECT pa.defensive_work_rate FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'David Wilson';
SELECT p.birthday FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
SELECT League.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Netherlands';
SELECT AVG(Match.home_team_goal) FROM Match JOIN Country ON Match.country_id = Country.id WHERE Country.name = 'Poland' AND Match.season = '2010/2011';
SELECT     p.player_name,     AVG(pa.finishing) AS avg_finishing FROM     Player_Attributes pa JOIN     Player p ON pa.player_api_id = p.player_api_id WHERE     p.height = (SELECT MAX(height) FROM Player)     OR p.height = (SELECT MIN(height) FROM Player) GROUP BY     p.player_api_id ORDER BY     avg_finishing DESC LIMIT 1;
SELECT player_name FROM Player WHERE height > 180;
SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170;
SELECT DISTINCT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.overall_rating > 80 AND strftime('%Y', pa.date) BETWEEN '2008' AND '2010';
SELECT pa.potential FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Aaron Doran';
SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'left');
SELECT T1.team_long_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Fast';
SELECT ta.buildUpPlayPassingClass FROM Team_Attributes ta JOIN Team t ON ta.team_api_id = t.team_api_id WHERE t.team_short_name = 'CLB'
SELECT T1.team_short_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayPassing > 70;
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T1.date) BETWEEN '2010' AND '2015' AND T2.height > 170;
SELECT player_name FROM Player WHERE height = (SELECT MIN(height) FROM Player);
SELECT Country.name FROM Country JOIN League ON Country.id = League.country_id WHERE League.name = 'Italy Serie A';
SELECT T1.team_short_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed = 31 AND T2.buildUpPlayDribbling = 53 AND T2.buildUpPlayPassing = 32;
SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Aaron Doran');
SELECT COUNT(*) FROM Match WHERE country_id IN (SELECT id FROM Country WHERE name = 'Germany') AND league_id IN (SELECT id FROM League WHERE name = '1. Bundesliga' AND country_id IN (SELECT id FROM Country WHERE name = 'Germany')) AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';
SELECT T1.team_short_name FROM Team AS T1 JOIN Match AS T2 ON T1.team_api_id = T2.home_team_api_id WHERE T2.home_team_goal = 10;
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61) AND pa.potential = 61;
SELECT     (SELECT AVG(ball_control) FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Abdou Diallo') -     (SELECT AVG(ball_control) FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Aaron Appindangoye')
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';
SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1;
SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);
SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';
SELECT Country.name FROM Country JOIN League ON Country.id = League.country_id WHERE League.name = 'Belgium Jupiler League';
SELECT League.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Germany';
SELECT player_name FROM Player WHERE player_api_id = (     SELECT player_api_id     FROM Player_Attributes     WHERE overall_rating = (         SELECT MAX(overall_rating)         FROM Player_Attributes     ) );
SELECT COUNT(*) FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE strftime('%Y', Player.birthday)<'1986' AND Player_Attributes.defensive_work_rate = 'high';
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY pa.crossing DESC LIMIT 1;
SELECT pa.heading_accuracy FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Ariel Borysiuk' ORDER BY pa.date DESC LIMIT 1;
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.height > 180 AND pa.volleys > 70;
SELECT DISTINCT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.volleys > 70 AND pa.dribbling > 70;
SELECT COUNT(*) FROM Match JOIN Country ON Match.country_id = Country.id WHERE Country.name = 'Belgium' AND Match.season = '2008/2009';
SELECT pa.long_passing FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.birthday = (SELECT MIN(birthday) FROM Player) ORDER BY pa.date DESC LIMIT 1;
SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Belgium Jupiler League' AND strftime('%Y', Match.date) = '2009' AND strftime('%m', Match.date) = '04';
SELECT League.name FROM League JOIN Match ON League.id = Match.league_id WHERE Match.season = '2008/2009' GROUP BY League.name ORDER BY COUNT(Match.id) DESC LIMIT 1;
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T2.birthday) < '1986';
SELECT     ((pa1.overall_rating - pa2.overall_rating) / pa2.overall_rating) * 100 AS percentage_difference FROM     Player_Attributes pa1 JOIN     Player p1 ON pa1.player_api_id = p1.player_api_id JOIN     Player_Attributes pa2 JOIN     Player p2 ON pa2.player_api_id = p2.player_api_id WHERE     p1.player_name = 'Ariel Borysiuk' AND     p2.player_name = 'Paulin Puel';
SELECT AVG(T2.buildUpPlaySpeed) FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Heart of Midlothian';
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino'
SELECT SUM(T1.crossing) FROM `Player_Attributes` AS T1 JOIN `Player` AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Lennox';
SELECT MAX(T2.chanceCreationPassing), T2.chanceCreationPassingClass FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Ajax'
SELECT preferred_foot FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Abdou Diallo') LIMIT 1;
SELECT MAX(T1.overall_rating) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Dorlan Pabon';
SELECT AVG(Match.away_team_goal) FROM Match JOIN Team ON Match.away_team_api_id = Team.team_api_id JOIN Country ON Match.country_id = Country.id WHERE Team.team_long_name = 'Parma' AND Country.name = 'Italy';
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = 77 AND pa.date = '2016-06-23' ORDER BY p.birthday LIMIT 1;
SELECT pa.overall_rating FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Aaron Mooy' AND pa.date = '2016-02-04 00:00:00';
SELECT potential FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Francesco Parravicini') AND date = '2010-08-30 00:00:00';
SELECT attacking_work_rate FROM Player_Attributes WHERE player_fifa_api_id = (     SELECT player_fifa_api_id     FROM Player     WHERE player_name = 'Francesco Migliore' ) AND date = '2015-05-01 00:00:00';
SELECT pa.defensive_work_rate FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Kevin Berigaud' AND pa.date = '2013-02-22 00:00:00';
SELECT pa.date FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Kevin Constant' AND pa.crossing = (     SELECT MAX(crossing)     FROM Player_Attributes     WHERE player_api_id = (         SELECT player_api_id         FROM Player         WHERE player_name = 'Kevin Constant'     ) ) ORDER BY pa.date ASC LIMIT 1;
SELECT ta.buildUpPlaySpeedClass FROM Team_Attributes ta JOIN Team t ON ta.team_api_id = t.team_api_id WHERE t.team_long_name = 'Willem II' AND ta.date = '2012-02-22 00:00:00';
SELECT buildUpPlayDribblingClass FROM Team_Attributes WHERE team_api_id = (     SELECT id     FROM Team     WHERE team_short_name = 'LEI' ) AND date = '2015-09-10 00:00:00';
SELECT ta.buildUpPlayPassingClass FROM Team_Attributes ta JOIN Team t ON ta.team_api_id = t.team_api_id WHERE t.team_long_name = 'FC Lorient' AND ta.date = '2010-02-22';
SELECT TA.chanceCreationPassingClass FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'PEC Zwolle' AND TA.date = '2013-09-20 00:00:00';
SELECT TA.chanceCreationCrossingClass FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'Hull City' AND TA.date = '2010-02-22 00:00:00'
SELECT ta.defenceAggressionClass FROM Team_Attributes ta JOIN Team t ON ta.team_api_id = t.team_api_id WHERE t.team_long_name = 'Hannover 96' AND ta.date = '2015-09-10 00:00:00';
SELECT AVG(T2.overall_rating) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Marko Arnautovic' AND T2.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'
SELECT     ((         SELECT overall_rating         FROM Player_Attributes         INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id         WHERE Player.player_name = 'Landon Donovan' AND Player_Attributes.date = '2013-07-12'     ) - (         SELECT overall_rating         FROM Player_Attributes         INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id         WHERE Player.player_name = 'Jordan Bowery' AND Player_Attributes.date = '2013-07-12'     )) / (         SELECT overall_rating         FROM Player_Attributes         INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id         WHERE Player.player_name = 'Landon Donovan' AND Player_Attributes.date = '2013-07-12'     ) * 100 AS percentage
SELECT player_name FROM Player ORDER BY height DESC LIMIT 5;
SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10;
SELECT player_name FROM Player WHERE datetime('now') - datetime(birthday) > '34 years'
SELECT COUNT(Match.home_team_goal) FROM Match JOIN Team ON Match.home_team_api_id = Team.team_api_id JOIN Player ON Team.id = Player.team_id WHERE Player.player_name = 'Aaron Lennon';
SELECT SUM(Match.away_team_goal) FROM Match JOIN Team AS HomeTeam ON Match.home_team_api_id = HomeTeam.team_api_id JOIN Team AS AwayTeam ON Match.away_team_api_id = AwayTeam.team_api_id JOIN Player AS HomePlayer ON HomePlayer.player_api_id = HomeTeam.team_api_id JOIN Player AS AwayPlayer ON AwayPlayer.player_api_id = AwayTeam.team_api_id WHERE (HomePlayer.player_name = 'Daan Smith' OR HomePlayer.player_name = 'Filipe Ferreira') AND (AwayPlayer.player_name = 'Daan Smith' OR AwayPlayer.player_name = 'Filipe Ferreira') AND Match.away_team_api_id = AwayTeam.team_api_id;
SELECT SUM(Match.home_team_goal) FROM Match JOIN Player ON Match.home_team_api_id = Player.team_api_id WHERE (datetime('now') - datetime(Player.birthday)) / 365 <= 30;
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) LIMIT 10;
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.potential = (SELECT MAX(potential) FROM Player_Attributes);
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.attacking_work_rate = 'high';
SELECT T2.player_name, MAX(T2.birthday) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.finishing = 1 GROUP BY T2.player_name ORDER BY T2.birthday ASC LIMIT 1;
Error: 第 10555 个样本有 2 个SQL。
SELECT p.player_name, c.name AS country FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id JOIN Team t ON p.team_api_id = t.team_api_id JOIN Country c ON t.country_id = c.id WHERE pa.vision > 89;
Error: 第 10557 个样本有 2 个SQL。
SELECT T1.team_long_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Slow';
SELECT T1.team_short_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Safe'
SELECT AVG(T2.height) FROM Country AS T1 JOIN Team AS T2 ON T1.id = T2.country_id JOIN Player AS T3 ON T2.id = T3.id WHERE T1.name = 'Italy'
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3;
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-01-01';
SELECT     (SELECT jumping FROM Player_Attributes WHERE player_fifa_api_id = 6) -     (SELECT jumping FROM Player_Attributes WHERE player_fifa_api_id = 23) AS Jumping_Difference;
SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 3;
SELECT COUNT(*) FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes) AND preferred_foot = 'left' AND crossing = (SELECT MAX(crossing) FROM Player_Attributes);
SELECT CAST(SUM(CASE WHEN pa.stamina > 80 AND pa.strength > 80 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*) * 100 FROM Player_Attributes pa;
SELECT Country.name FROM Country JOIN League ON Country.id = League.country_id WHERE League.name = 'Poland Ekstraklasa';
SELECT home_team_goal, away_team_goal FROM Match WHERE date LIKE '2008-09-24%' AND country_id = (SELECT id FROM Country WHERE name = 'Belgium') AND league_id = (SELECT id FROM League WHERE name = 'Jupiler League');
SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_fifa_api_id = (     SELECT player_fifa_api_id     FROM Player     WHERE player_name = 'Alexis Blin' );
SELECT team_long_name, buildUpPlaySpeedClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE team_long_name = 'KSV Cercle Brugge';
SELECT COUNT(*) FROM Match WHERE season = '2015/2016' AND country_id = (SELECT id FROM Country WHERE name = 'Italy') AND league_id = (SELECT id FROM League WHERE name = 'Serie A');
SELECT MAX(Match.home_team_goal) FROM Match JOIN League ON Match.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Netherlands' AND League.name = 'Eredivisie';
SELECT pa.finishing, pa.curve FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.weight = (SELECT MAX(weight) FROM Player)
SELECT L.name FROM League L JOIN Match M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY COUNT(M.id) DESC LIMIT 1;
SELECT T2.team_long_name FROM Match AS T1 JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T1.away_team_goal = (SELECT MAX(away_team_goal) FROM Match)
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) LIMIT 1;
SELECT (COUNT(P1.player_api_id) FILTER (WHERE P.Player_height < 180 AND PA.overall_rating > 70) / COUNT(P1.player_api_id) * 100) as Percentage FROM Player_Attributes PA JOIN Player P ON P.player_api_id = PA.player_api_id JOIN (   SELECT player_api_id   FROM Player_Attributes   WHERE date = (SELECT MAX(date) FROM Player_Attributes WHERE player_api_id = Player_Attributes.player_api_id) ) P1 ON P1.player_api_id = PA.player_api_id;
SELECT     (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID END) -      COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID END)) /     (COUNT(CASE WHEN SEX = 'M' THEN ID END)) * 100 AS Deviation_Percentage FROM     Patient
SELECT     (COUNT(CASE WHEN YEAR(Birthday) > 1930 THEN ID END) * 100.0 / COUNT(ID)) AS Percentage_Female_Born_After_1930 FROM     Patient WHERE     SEX = 'F';
SELECT     COUNT(CASE WHEN Admission = '+' THEN ID END) * 100.0 / COUNT(ID) AS Inpatient_Percentage FROM     Patient WHERE     YEAR(Birthday) BETWEEN 1930 AND 1940;
SELECT     (COUNT(CASE WHEN Admission = '+' THEN ID END) * 1.0 / COUNT(CASE WHEN Admission = '-' THEN ID END)) AS Outpatient_Inpatient_Ratio FROM     Patient WHERE     Diagnosis = 'SLE';
SELECT Patient.Diagnosis, Laboratory.Date FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.ID = '30609';
SELECT p.SEX, p.Birthday, e.Examination_Date, e.Symptoms FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.ID = '163109';
SELECT Patient.ID, SEX, Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH > 500;
SELECT P.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS Age FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.RVVT = '+'
SELECT P.ID, P.SEX, P.Diagnosis FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID WHERE E.Thrombosis = 2;
SELECT p.ID, p.SEX, p.Birthday, p.Description, p.First_Date, p.Admission, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE YEAR(p.Birthday) = 1937 AND l.T_CHO >= 250;
SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALB < 3.5;
SELECT (COUNT(CASE WHEN P.SEX = 'F' AND L.TP < '6.0' OR L.TP > '8.5' THEN P.ID END) * 100.0 / COUNT(P.ID)) AS Percentage FROM Patient P JOIN Laboratory L ON P.ID = L.ID;
SELECT AVG(e.aCL_IgG) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Admission = '+' AND (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) >= 50;
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND YEAR(Description) = 1997 AND Admission = '-';
SELECT MIN(YEAR(First_Date) - YEAR(Birthday)) AS Age FROM Patient;
SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.Thrombosis = '1' AND p.SEX = 'F' AND YEAR(e.Examination_Date) = 1997;
SELECT     MAX(DATEDIFF(CURRENT_DATE, Birthday)) - MIN(DATEDIFF(CURRENT_DATE, Birthday)) AS AgeGap FROM     Patient WHERE     ID IN (         SELECT             ID         FROM             Laboratory         WHERE             TG >= 200     );
SELECT E.Symptoms, P.Diagnosis FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Birthday = (     SELECT MIN(Birthday)     FROM Patient     WHERE ID IN (         SELECT ID         FROM Examination     ) );
SELECT COUNT(DISTINCT T1.ID) / 12 AS Average_Male_Patients_Per_Month FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.Date BETWEEN '1998-01-01' AND '1998-12-31';
SELECT T3.Date, (YEAR(T2.First_Date) - YEAR(T2.Birthday)) AS Age FROM (     SELECT T1.ID, T1.First_Date, T1.Birthday     FROM Patient T1     WHERE T1.Diagnosis = 'SJS'     ORDER BY T1.Birthday ASC     LIMIT 1 ) T2 JOIN Laboratory T3 ON T2.ID = T3.ID WHERE T3.Date = (     SELECT MIN(Date)     FROM Laboratory     WHERE ID = T2.ID );
SELECT     SUM(CASE WHEN Patient.SEX = 'M' AND Laboratory.UA <= 8.0 THEN 1 ELSE 0 END) /     SUM(CASE WHEN Patient.SEX = 'F' AND Laboratory.UA <= 6.5 THEN 1 ELSE 0 END) AS Ratio FROM     Patient JOIN     Laboratory ON Patient.ID = Laboratory.ID;
SELECT COUNT(DISTINCT P.ID) FROM Patient P LEFT JOIN Examination E ON P.ID = E.ID WHERE E.ID IS NULL OR DATEDIFF(E.Examination_Date, P.First_Date) >= 365;
SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE YEAR(P.Birthday) + 18 <= YEAR('1990-01-01') AND E.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.T_BIL > 2.0;
SELECT Diagnosis, COUNT(Diagnosis) as count FROM Examination WHERE Examination_Date BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY count DESC LIMIT 1;
SELECT AVG(TIMESTAMPDIFF(YEAR, Birthday, '1991-10-01')) AS Average_Age FROM Patient WHERE ID IN (     SELECT ID     FROM Laboratory     WHERE Date BETWEEN '1991-10-01' AND '1991-10-31' )
SELECT     (YEAR(E.Examination_Date) - YEAR(P.Birthday)) AS Age,     P.Diagnosis FROM     Examination E JOIN     Patient P ON E.ID = P.ID WHERE     E.HGB = (SELECT MAX(HGB) FROM Examination)
SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02';
SELECT     CASE         WHEN T-CHO < 250 THEN 'Normal'         ELSE 'Not Normal'     END AS Cholesterol_Status FROM     Laboratory WHERE     ID = 2927464 AND     Date = '1995-09-04';
SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' ORDER BY ID LIMIT 1;
SELECT E.aCL_IgM FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Diagnosis = 'SLE' AND P.Description = '1994-02-19' AND E.Examination_Date = '1993-11-12';
SELECT P.SEX FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GPT = '9' AND L.Date = '1992-06-12';
SELECT     TIMESTAMPDIFF(YEAR, P.Birthday, L.Date) - IF(DAYOFYEAR(P.Birthday) > DAYOFYEAR(L.Date), 1, 0) AS Age FROM     Laboratory L JOIN     Patient P ON L.ID = P.ID WHERE     L.UA = 8.4 AND L.Date = '1991-10-21';
SELECT COUNT(L.ID) FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.First_Date = '1991-06-13' AND P.Diagnosis = 'SJS' AND YEAR(L.Date) = 1995;
SELECT p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Diagnosis = 'SLE' AND e.Examination_Date = '1997-01-27' AND p.First_Date = (SELECT MIN(First_Date) FROM Patient WHERE ID = p.ID);
SELECT E.Symptoms FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Birthday = '1959-03-01' AND E.Examination_Date = '1993-09-27';
SELECT (SUM(case when T.Birthday = '1959-02-18' and T.Date like '1981-11-%' then T.`T-CHO` else 0 end) - SUM(case when T.Birthday = '1959-02-18' and T.Date like '1981-12-%' then T.`T-CHO` else 0 end)) / SUM(case when T.Birthday = '1959-02-18' and T.Date like '1981-11-%' then T.`T-CHO` else 0 end) as decrease_rate FROM Laboratory T;
SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Diagnosis = 'Behcet' AND Examination.Examination_Date BETWEEN '1997-01-01' AND '1997-12-31';
SELECT COUNT(Patient.ID) FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Date BETWEEN '1987-07-06' AND '1996-01-31' AND Laboratory.GPT > 30 AND Laboratory.ALB < 4;
Error: 第 10617 个样本有 2 个SQL。
SELECT COUNT(*) FROM (   SELECT E.ID   FROM Examination E   JOIN Patient P ON E.ID = P.ID   WHERE E.Thrombosis = 2 AND E.ANA = 'S' AND E.`aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination) ) AS Result
SELECT     (COUNT(CASE WHEN UA <= 6.5 THEN 1 END) * 100 / COUNT(*)) AS Percentage FROM     Laboratory WHERE     U_PRO > 0 AND U_PRO < 30;
SELECT (SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) * 100 / COUNT(*)) AS Percentage FROM Patient WHERE SEX = 'M' AND YEAR(First_Date) = 1981;
SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE P.Admission = '-' AND L.Date LIKE '1991-10%' AND L.T-BIL < 2.0;
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND BIRTHDAY BETWEEN '1980-01-01' AND '1989-12-31' AND ID NOT IN (SELECT ID FROM Examination WHERE `ANA Pattern` = 'p');
SELECT Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Diagnosis = 'PSS' AND Laboratory.CRP > 2 AND Laboratory.CRE = 1 AND Laboratory.LDH = 123;
SELECT AVG(Laboratory.ALB) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND Laboratory.PLT > 400 AND Patient.Diagnosis = 'SLE';
SELECT MAX(E.Symptoms) AS Most_Common_Sign FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Diagnosis = 'SLE';
SELECT Patient.Description, Patient.Diagnosis, MIN(Patient.First_Date) FROM Patient WHERE Patient.ID = 48473;
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE YEAR(T2.Date) = '1997' AND (T2.TP < 6 OR T2.TP > 8.5);
SELECT (COUNT(DISTINCT CASE WHEN E.Symptoms LIKE '%thrombocytopenia%' AND P.Diagnosis LIKE '%SLE%' THEN E.ID END) * 100.0 / COUNT(DISTINCT CASE WHEN P.Diagnosis LIKE '%SLE%' THEN E.ID END)) AS Proportion FROM Examination E JOIN Patient P ON E.ID = P.ID;
SELECT (COUNT(CASE WHEN SEX = 'F' THEN 1 END) * 100 / COUNT(ID)) FROM Patient WHERE YEAR(Birthday) = 1980 AND Diagnosis = 'RA';
SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND e.Examination_Date BETWEEN '1995' AND '1997' AND p.Diagnosis = 'BEHCET' AND p.Admission = '-';
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'F' AND l.WBC < 3.5;
SELECT DATEDIFF(e.ExaminationDate, p.FirstDate) AS WaitingTime FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.ID = 821298 LIMIT 1;
SELECT     CASE         WHEN T2.UA > CASE WHEN T1.SEX = 'M' THEN 8.0 ELSE 6.5 END THEN 'Yes'         ELSE 'No'     END AS Is_Uric_Acid_Normal FROM     Patient AS T1 JOIN     Laboratory AS T2 ON T1.ID = T2.ID WHERE     T1.ID = 57266;
SELECT Laboratory.Date FROM Laboratory WHERE Laboratory.ID = '48473' AND Laboratory.GOT >= 60;
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GOT < 60 AND YEAR(Laboratory.Date) = 1994;
SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND MAX(Laboratory.GPT) >= 60;
SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GPT > 60 ORDER BY P.Birthday ASC;
SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500;
SELECT P.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS Age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.LDH BETWEEN 600 AND 800;
Error: 第 10641 个样本有 3 个SQL。
SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = '1982-04-01' AND l.ALP < 300;
SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TP < 6.0;
SELECT (TP - 8.5) AS Deviation FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND Laboratory.TP > 8.5;
SELECT Patient.ID, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND (Laboratory.ALB <= 3.5 OR Laboratory.ALB >= 5.5) ORDER BY Patient.Birthday DESC;
SELECT Patient.ID, Patient.SEX, Laboratory.ALB FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE YEAR(Patient.Birthday) = '1982' AND Laboratory.ALB BETWEEN 3.5 AND 5.5;
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') AS Percentage FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'F' AND l.UA > 6.5;
SELECT AVG(l-UA) AS Average_UA_Index FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.UA < CASE WHEN p.SEX = 'M' THEN 8.0 ELSE 6.5 END GROUP BY l.ID HAVING COUNT(*) = (SELECT COUNT(*) FROM Laboratory WHERE ID = l.ID GROUP BY ID ORDER BY Date DESC LIMIT 1)
SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.UN = 29;
SELECT P.ID, P.SEX, P.Birthday FROM Patient P WHERE P.Diagnosis = 'RA' AND EXISTS (     SELECT 1     FROM Laboratory L     WHERE L.ID = P.ID     AND L.UN < 30 );
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.CRE >= 1.5;
SELECT     (SELECT COUNT(*) FROM Patient WHERE SEX = 'M' AND ID IN (SELECT ID FROM Laboratory WHERE CRE >= 1.5)) >     (SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND ID IN (SELECT ID FROM Laboratory WHERE CRE >= 1.5)) AS Result;
SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.T-BIL = (SELECT MAX(T-BIL) FROM Laboratory);
SELECT P.SEX, COUNT(P.ID) AS Num_Patients FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.T_BIL >= 2.0 GROUP BY P.SEX;
SELECT P.ID, L.T_CHO FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Birthday = (SELECT MIN(Birthday) FROM Patient) AND L.T_CHO = (SELECT MAX(T_CHO) FROM Laboratory);
SELECT AVG(DATEDIFF(CURRENT_DATE, Birthday) / 365) AS Average_Age FROM Patient WHERE SEX = 'M' AND ID IN (     SELECT ID FROM Laboratory WHERE T-CHO >= 250 );
SELECT P.ID, P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TG > 300;
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TG >= 200 AND (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) > 50;
SELECT DISTINCT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Admission = '-' AND L.CPK < 250;
SELECT COUNT(*) FROM Patient WHERE SEX = 'M' AND YEAR(Birthday) BETWEEN 1936 AND 1956 AND ID IN (     SELECT ID FROM Laboratory WHERE CPK >= 250 );
SELECT P.ID, P.SEX, (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS Age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU >= 180 AND L.T_CHO < 250;
SELECT P.ID, L.GLU FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Description >= '1991-01-01' AND L.GLU < 180 GROUP BY P.ID;
SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.WBC <= 3.5 OR L.WBC >= 9.0 GROUP BY P.SEX, P.ID, P.Birthday ORDER BY DATE_PART('year', AGE(P.Birthday)) ASC;
SELECT Patient.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday)) AS Age, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RBC < 3.5;
SELECT P.ID, P.Admission FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F' AND TIMESTAMPDIFF(YEAR, P.Birthday, CURRENT_TIMESTAMP) >= 50 AND (L.RBC <= 3.5 OR L.RBC >= 6.0);
SELECT Patient.ID, Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Admission = '-' AND Examination.HGB < 10;
SELECT P.ID, P.SEX FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.HGB > 10 AND L.HGB < 17 ORDER BY P.Birthday LIMIT 1;
SELECT P.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS Age FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.HCT >= 52 GROUP BY P.ID HAVING COUNT(P.ID) > 2;
SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;
SELECT     (SELECT COUNT(*)      FROM Laboratory      WHERE PLT < 100) AS LowerThanNormal,     (SELECT COUNT(*)      FROM Laboratory      WHERE PLT > 400) AS HigherThanNormal
SELECT p.ID, p.SEX, p.Birthday, p.Description, l.Date, l.PLT FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.Date LIKE '1984%' AND (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) < 50 AND l.PLT BETWEEN 100 AND 400;
SELECT     (COUNT(CASE WHEN E.PT >= 14 AND P.SEX = 'F' THEN 1 END) * 1.0 / COUNT(CASE WHEN E.PT >= 14 THEN 1 END)) * 100 AS Percentage_Female_Abnormal_PT FROM     Examination E JOIN     Patient P ON E.ID = P.ID WHERE     DATE_PART('year', AGE(P.Birthday, CURRENT_TIMESTAMP)) > 55;
SELECT p.ID, p.SEX, p.Birthday, p.Description, p.First_Date, p.Admission, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE YEAR(p.First_Date) > 1992 AND l.PT < 14;
SELECT COUNT(*) FROM Examination WHERE `Examination Date` > '1997-01-01' AND APTT >= 45;
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.APTT > 45 AND E.Thrombosis = 3;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.WBC BETWEEN 3.5 AND 9.0 AND (l.FG <= 150 OR l.FG >= 450);
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday > '1980-01-01' AND (T2.FG < 150 OR T2.FG > 450);
SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.U_PRO >= 30;
SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.U_PRO BETWEEN 0 AND 30 AND Patient.Diagnosis = 'SLE';
SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.aCL_IgG < 900 AND e.Symptoms = 'abortion';
SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.IGG BETWEEN 900 AND 2000 AND e.Symptoms IS NOT NULL;
SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.IGA BETWEEN 80 AND 500 GROUP BY P.ID, P.Diagnosis ORDER BY MAX(L.IGA) DESC LIMIT 1;
SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE IGA BETWEEN 80 AND 500 AND YEAR(Patient.`First Date`) >= 1990;
SELECT Patient.Diagnosis, COUNT(Patient.ID) as NumOfPatients FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.IGM NOT BETWEEN 40 AND 400 GROUP BY Patient.Diagnosis ORDER BY NumOfPatients DESC LIMIT 1;
SELECT COUNT(*) FROM Patient WHERE ID IN (     SELECT ID     FROM Laboratory     WHERE (CRP LIKE '+' OR CRP LIKE '-' OR CRP < 1.0) ) AND Description IS NULL;
SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.CRP NOT IN ('+-', '-') AND L.CRP >= 1.0 AND TIMESTAMPDIFF(YEAR, P.Birthday, CURDATE()) < 18;
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE E.KCT = '+' AND L.RF IN ('-', '+-');
SELECT p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE YEAR(p.Birthday) > 1995 AND l.RA IN ('-', '+-');
SELECT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.RF < 20 AND (YEAR(CURDATE()) - YEAR(P.Birthday)) > 60;
SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.ID IN (SELECT ID FROM Laboratory WHERE RF < 20) AND e.Thrombosis = '0';
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.ANA_Pattern = 'P' AND P.C3 > 35;
SELECT P.ID FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.HCT < 29 OR E.HCT > 52 ORDER BY E.`aCL IgA` DESC LIMIT 1;
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE E.Diagnosis = 'Blood Clots in veins' AND L.C4 > 10;
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND (T2.RNP = '-' OR T2.RNP = '+-');
SELECT P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.RNP NOT IN ('-', '+-') ORDER BY P.Birthday DESC LIMIT 1;
SELECT COUNT(*) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE (P.SM IN ('-', '+-') OR P.SM = 'negative' OR P.SM = '0' OR P.SM = '+-') AND E.Thrombosis = '1';
SELECT P.ID FROM Patient P JOIN (     SELECT ID     FROM Laboratory     WHERE SM NOT IN ('-', '+-')     GROUP BY ID ) L ON P.ID = L.ID ORDER BY P.Birthday DESC LIMIT 3;
SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Examination_Date >= '1997-01-01' AND Examination.SC170 IN ('-', '+-');
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.Symptoms = 'vertigo' AND P.SEX = 'M' AND E.SC170 IN ('-', '+-');
SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.SSA IN ('-','+-') AND YEAR(P.`First Date`) < 1990;
SELECT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.SSA NOT IN ('-', '+-') ORDER BY P.`First Date` LIMIT 1;
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.SSB IN ('-', '0') AND P.Diagnosis = 'SLE';
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.Symptoms IS NOT NULL AND P.SSB IN ('-', '+-');
SELECT COUNT(*) FROM Patient WHERE SEX = 'M' AND ID IN (     SELECT ID     FROM Laboratory     WHERE CENTROMEA IN ('-', '+-') AND SSB IN ('-', '+-') );
SELECT DISTINCT p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.DNA >= 8;
SELECT COUNT(DISTINCT ID) FROM Patient WHERE DNA < 8 AND Description IS NULL;
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.DNA-II >= 8 AND p.Admission = '+';
SELECT MULTIPLY(DIVIDE((SELECT COUNT(T1.ID) FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.GOT >= 60 AND T2.Diagnosis = 'SLE'), (SELECT COUNT(T1.ID) FROM Examination AS T1 WHERE T1.GOT >= 60)), 1.0);
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.GOT < 60;
SELECT MIN(P.Birthday) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GOT >= 60;
SELECT TOP 3 Birthday FROM (     SELECT ID, GPT, Birthday     FROM Laboratory     JOIN Patient ON Laboratory.ID = Patient.ID     WHERE GPT < 60 ) AS SubQuery WHERE GPT = (     SELECT MAX(GPT)     FROM (         SELECT ID, MAX(GPT) AS GPT         FROM Laboratory         WHERE GPT < 60         GROUP BY ID     ) AS SQ     WHERE SubQuery.ID = SQ.ID ) ORDER BY GPT DESC;
SELECT COUNT(*) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE GOT < 60 AND SEX = 'M';
SELECT MIN(P.First_Date) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.LDH < 500 GROUP BY P.ID ORDER BY MAX(L.LDH) DESC LIMIT 1;
SELECT Lab.ID, Lab.Date FROM Laboratory AS Lab JOIN Patient AS Pat ON Lab.ID = Pat.ID WHERE Lab.LDH >= 500 AND Pat.First_Date = (SELECT MAX(First_Date) FROM Patient)
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.ALP >= 300 AND p.Admission = '+';
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.ALP < 300;
SELECT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0;
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Diagnosis = 'SJS' AND l.TP >= 6.0 AND l.TP <= 8.5;
SELECT E.Examination_Date FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE L.ALB >= 3.5 AND L.ALB <= 5.5 ORDER BY L.ALB DESC LIMIT 1;
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.ALB BETWEEN 3.5 AND 5.5 AND l.TP BETWEEN 6.0 AND 8.5;
SELECT E.aCL_IgG, E.aCL_IgM, E.aCL_Iga FROM Examination E JOIN Patient P ON E.ID = P.ID JOIN Laboratory L ON E.ID = L.ID WHERE P.SEX = 'F' AND L.UA > 6.50 ORDER BY L.UA DESC LIMIT 1;
SELECT MAX(examination.ANA) FROM Examination examination JOIN Laboratory laboratory ON examination.ID = laboratory.ID WHERE laboratory.CRE < 1.5;
SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.CRE < 1.5 ORDER BY Examination.aCL_IgA DESC LIMIT 1;
SELECT COUNT(*) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE e.ANA LIKE '%P%' AND l.T_BIL >= 2.0;
SELECT E.ANA FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE L.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0);
Error: 第 10726 个样本有 2 个SQL。
Error: 第 10727 个样本有 2 个SQL。
SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.TG < 200 AND e.Symptoms IS NOT NULL;
SELECT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.TG < 200 GROUP BY P.ID, P.Diagnosis ORDER BY MAX(L.TG) DESC LIMIT 1;
SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Examination.Thrombosis = 0 AND Laboratory.CPK < 250;
SELECT COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.KCT = '+' OR e.RVVT = '+' OR e.LAC = '+' AND p.ID IN (SELECT ID FROM Laboratory WHERE CPK < 250);
SELECT MIN(P.Birthday) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GLU > 180;
SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.ID IN (SELECT ID FROM Laboratory WHERE GLU < 180) AND e.Thrombosis = 0;
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '+' AND l.WBC BETWEEN 3.5 AND 9.0;
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Diagnosis = 'SLE' AND l.WBC BETWEEN 3.5 AND 9.0;
SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE (RBC <= 3.5 OR RBC >= 6.0) AND Admission = '-';
SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Diagnosis IS NOT NULL AND e.PLT > 100 AND e.PLT < 400;
SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.First_Date, Patient.Admission, Patient.Diagnosis, Laboratory.PLT FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.PLT > 100 AND Laboratory.PLT < 400 AND Patient.Diagnosis = 'MCTD';
SELECT AVG(PT) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.SEX = 'M' AND Examination.PT < 14;
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.Thrombosis IN (1, 2) AND E.PT < 14;
SELECT T2.major_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'College of Engineering';
SELECT member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design';
SELECT COUNT(*) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';
SELECT member.phone FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women\'s Soccer';
SELECT COUNT(*) FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women\'s Soccer' AND member.t_shirt_size = 'Medium';
SELECT e.event_name, COUNT(a.link_to_event) as attendance FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_name ORDER BY attendance DESC LIMIT 1;
Error: 第 10748 个样本有 2 个SQL。
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean';
SELECT COUNT(*) FROM attendance JOIN event ON attendance.link_to_event = event.event_id JOIN member ON attendance.link_to_member = member.member_id WHERE YEAR(event.event_date) = 2019 AND member.first_name = 'Sacha' AND member.last_name = 'Harrison';
SELECT COUNT(event.event_id) FROM event JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.type = 'Meeting' GROUP BY event.event_id HAVING COUNT(attendance.link_to_member) > 10;
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id, e.event_name HAVING COUNT(a.link_to_member) > 20;
SELECT AVG(attendance_count) AS average_attendance FROM (     SELECT COUNT(a.link_to_member) AS attendance_count     FROM event e     JOIN attendance a ON e.event_id = a.link_to_event     WHERE e.type = 'Meeting' AND YEAR(e.event_date) = 2020     GROUP BY e.event_id ) subquery;
SELECT e.expense_description FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.link_to_event IN (SELECT event_id FROM event) ORDER BY e.cost DESC LIMIT 1;
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud';
SELECT last_name FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Law and Constitutional Studies');
SELECT T3.county FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code JOIN zip_code AS T3 ON T2.state = T3.state WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'
SELECT T2.college FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt';
SELECT SUM(amount) FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President';
SELECT SUM(budget.spent) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food' AND event.event_name = 'September Meeting';
SELECT T2.city, T2.state FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President';
SELECT member.first_name, member.last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';
SELECT budget.spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Advertisement';
SELECT T2.department FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Pierce' AND T1.last_name = 'Guidi'
SELECT SUM(budget.amount) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';
SELECT e.expense_id, e.expense_description, e.approved FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08';
SELECT AVG(T.cost) AS average_cost FROM (     SELECT e.cost     FROM expense e     JOIN member m ON e.link_to_member = m.member_id     WHERE m.first_name = 'Elijah' AND m.last_name = 'Allen'     AND (MONTH(e.expense_date) = 9 OR MONTH(e.expense_date) = 10) ) T;
SELECT     (SELECT SUM(spent) FROM budget      JOIN event ON budget.link_to_event = event.event_id      WHERE YEAR(event.event_date) = 2019) -     (SELECT SUM(spent) FROM budget      JOIN event ON budget.link_to_event = event.event_id      WHERE YEAR(event.event_date) = 2020)
SELECT location FROM event WHERE event_name = 'Spring Budget Review';
SELECT cost FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event_name = 'Posters' AND event_date = '2019-09-04'
WITH BiggestBudget AS (     SELECT budget_id, remaining     FROM budget     WHERE category = 'Food'     ORDER BY amount DESC     LIMIT 1 ) SELECT remaining FROM BiggestBudget;
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';
Error: 第 10774 个样本有 2 个SQL。
SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';
SELECT zip_code.county FROM zip_code JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Adela' AND member.last_name = 'O'Gallagher';
SELECT COUNT(*) FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'November Meeting') AND remaining < 0;
SELECT SUM(amount) FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'September Speaker');
SELECT e.status FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE ex.expense_description = 'Post Cards, Posters' AND ex.expense_date = '2019-08-20';
SELECT T2.major_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Human Development and Family Studies' AND member.t_shirt_size = 'Large';
SELECT T2.type FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson';
SELECT m.major_name FROM member AS m JOIN major AS ma ON m.link_to_major = ma.major_id WHERE m.position = 'Vice President'
SELECT T1.state FROM zip_code AS T1 JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison';
Error: 第 10785 个样本有 2 个SQL。
SELECT i.date_received FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.first_name = 'Connor' AND m.last_name = 'Hilton' AND i.source = 'Dues';
SELECT m.first_name, m.last_name FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.source = 'Dues' ORDER BY i.date_received LIMIT 1;
SELECT     CASE         WHEN (SELECT SUM(amount) FROM budget WHERE category = 'Advertisement' AND link_to_event IN (SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff')) >            (SELECT SUM(amount) FROM budget WHERE category = 'Advertisement' AND link_to_event IN (SELECT event_id FROM event WHERE event_name = 'October Meeting')) THEN 1         ELSE 0     END;
Error: 第 10789 个样本有 3 个SQL。
Error: 第 10790 个样本有 2 个SQL。
SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange' AND state = 'Virginia';
SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT T3.city, T3.county, T3.state FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code JOIN (     SELECT zip_code, city, county, state     FROM zip_code     GROUP BY zip_code ) AS T3 ON T2.zip_code = T3.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth';
SELECT e.expense_description FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.remaining = (     SELECT MIN(remaining)     FROM budget );
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';
SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY COUNT(member.member_id) DESC LIMIT 1;
SELECT T2.major_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event GROUP BY e.event_name ORDER BY SUM(b.amount) DESC LIMIT 1;
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position = 'Vice President';
SELECT COUNT(*) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';
SELECT income.date_received FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason';
SELECT COUNT(*) FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland';
SELECT COUNT(*) FROM attendance WHERE link_to_member IN (     SELECT member_id     FROM member     WHERE phone = "954-555-6240" );
SELECT member.first_name, member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' GROUP BY e.event_name ORDER BY SUM(b.spent) / SUM(b.amount) DESC LIMIT 1;
SELECT COUNT(*) FROM member WHERE position = 'President';
SELECT MAX(spent) FROM budget;
SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;
SELECT SUM(spent) FROM budget WHERE category = 'Food';
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member GROUP BY m.member_id HAVING COUNT(a.link_to_event) > 7;
SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE ma.major_name = 'Interior Design' AND e.event_name = 'Community Theater';
SELECT first_name, last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';
SELECT SUM(income.amount) FROM income JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';
SELECT m.first_name, m.last_name FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE i.amount > 40;
SELECT SUM(cost) FROM expense JOIN budget ON expense.link_to_budget = budget.budget_id JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff';
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id JOIN budget b ON e.event_id = b.link_to_event WHERE e.event_name = 'Yearly Kickoff';
Error: 第 10817 个样本有 2 个SQL。
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.spent IS NOT NULL GROUP BY e.event_name ORDER BY SUM(b.spent) ASC LIMIT 1;
SELECT (SUM(case when T1.event_name = 'Yearly Kickoff' then T5.cost else 0 end) / SUM(T5.cost)) * 100 as Percentage FROM event AS T1 JOIN budget AS T4 ON T1.event_id = T4.link_to_event JOIN expense AS T5 ON T4.budget_id = T5.link_to_budget
SELECT     (SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Finance') /     (SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics')
SELECT source, SUM(amount) as total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY total_amount DESC LIMIT 1;
SELECT first_name, last_name, email FROM member WHERE position = 'Secretary';
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';
SELECT COUNT(*) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND YEAR(event.event_date) = 2019;
SELECT COUNT(event.event_id), major.major_name FROM attendance JOIN event ON attendance.link_to_event = event.event_id JOIN member ON attendance.link_to_member = member.member_id JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi';
SELECT AVG(budget.spent) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food' AND event.event_status = 'Closed';
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Advertisement' GROUP BY e.event_name ORDER BY SUM(b.spent) DESC LIMIT 1;
SELECT COUNT(*) FROM attendance JOIN event ON attendance.link_to_event = event.event_id JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer' AND member.first_name = 'Maya' AND member.last_name = 'Mclean';
SELECT (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) * 100 / COUNT(event_id)) AS percentage FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31';
SELECT e.cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'September Speaker' AND e.expense_description = 'Posters';
SELECT t_shirt_size, COUNT(t_shirt_size) as count FROM member GROUP BY t_shirt_size ORDER BY count DESC LIMIT 1;
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' AND b.remaining < 0 GROUP BY e.event_name ORDER BY MIN(b.remaining) ASC LIMIT 1;
SELECT e.expense_description, SUM(e.cost) as total_value FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND e.approved = true GROUP BY e.expense_description;
SELECT category, amount FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'April Speaker') ORDER BY amount ASC;
Error: 第 10835 个样本有 2 个SQL。
SELECT link_to_event, amount FROM budget WHERE category = 'Advertising' ORDER BY amount DESC LIMIT 3;
SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking';
SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20';
SELECT m.first_name, m.last_name, SUM(e.cost) AS total_cost FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN expense e ON a.link_to_event = e.link_to_budget WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.first_name, m.last_name;
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';
SELECT DISTINCT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.t_shirt_size = 'X-Large';
SELECT T1.zip FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50;
SELECT T2.major_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Phillip' AND T1.last_name = 'Cullen';
SELECT member.position FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';
SELECT DISTINCT e.type FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 30;
SELECT DISTINCT e.category FROM event e WHERE e.location = 'MU 215';
SELECT type FROM event WHERE event_date = '2020-03-24T12:00:00'
SELECT m.major_name FROM major m JOIN member mb ON m.major_id = mb.link_to_major WHERE mb.position = 'Vice President';
SELECT (SUM(CASE WHEN m.position = 'Member' AND ma.major_name = 'Mathematics' THEN 1 ELSE 0 END) * 100 / COUNT(m.member_id)) AS Percentage_Mathematics_Members FROM member m JOIN major ma ON m.link_to_major = ma.major_id;
SELECT e.category FROM event e WHERE e.location = 'MU 215';
SELECT COUNT(*) FROM income WHERE amount = 50;
SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';
SELECT COUNT(*) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences';
SELECT member.last_name, major.department, major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215' AND e.type = 'Guest Speaker' AND b.spent = 0;
SELECT T3.city, T3.state FROM major AS T1 JOIN member AS T2 ON T1.major_id = T2.link_to_major JOIN zip_code AS T3 ON T2.zip = T3.zip_code WHERE T1.department = 'Electrical and Computer Engineering Department' AND T2.position = 'Member';
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE e.type = 'Social' AND m.position = 'Vice President' AND m.zip = (     SELECT z.zip_code     FROM zip_code z     WHERE z.city = 'Washington' AND z.state = 'IN' AND z.short_state = 'IN' AND z.county = 'Marion' AND z.type = 'STANDARD' ) AND e.location = '900 E. Washington St.';
SELECT member.last_name, member.position FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10';
SELECT m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE m.position = 'Member' AND e.event_name = 'Women''s Soccer';
SELECT (COUNT(CASE WHEN i.amount = 50 THEN 1 END) * 100 / COUNT(m.member_id)) AS percentage FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE m.t_shirt_size = 'Medium' AND m.position = 'Member';
SELECT DISTINCT state FROM student_club.zip_code WHERE type = 'PO Box';
SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND state = 'Puerto Rico' AND county = 'San Juan Municipio'
SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';
SELECT DISTINCT m.first_name, m.last_name, e.event_name, e.event_date FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id JOIN income i ON m.member_id = i.link_to_member WHERE i.amount > 50;
SELECT member.first_name, member.last_name, attendance.link_to_event FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19';
SELECT T2.college FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Katy' AND T1.link_to_major = 'rec1N0upiVLy5esTO';
SELECT member.phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND major.college = 'College of Agriculture and Applied Sciences';
Error: 第 10869 个样本有 2 个SQL。
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'education' AND major.department = 'College of Education & Human Services';
SELECT (COUNT(CASE WHEN b.remaining < 0 THEN b.budget_id END) * 100.0 / COUNT(b.budget_id)) AS Percentage_Over_Budget FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.status = 'completed';
SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';
SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50;
SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';
SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0 / COUNT(zip_code)) AS Percentage_PO_Boxes FROM zip_code;
SELECT e.event_name, e.location FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 0;
SELECT e.event_name, e.event_date FROM event e JOIN expense ex ON e.event_id = ex.link_to_event WHERE ex.expense_description = 'Pizza' AND ex.cost > 50 AND ex.cost < 100;
SELECT m.first_name, m.last_name, ma.major_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > 100;
SELECT T1.city, T1.county FROM zip_code AS T1 JOIN event AS T2 ON T1.city = T2.location WHERE (SELECT COUNT(*) FROM income WHERE link_to_event = T2.event_id) > 40;
SELECT m.first_name, m.last_name, SUM(e.cost) as total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY e.link_to_member HAVING COUNT(DISTINCT e.link_to_budget) > 1 ORDER BY total_cost DESC LIMIT 1;
Error: 第 10881 个样本有 2 个SQL。
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Parking' AND b.spent < (SELECT AVG(spent) FROM budget WHERE category = 'Parking')
SELECT (SUM(case when e.type = 'Game' then e.cost else 0 end) / SUM(e.cost)) * 100 as Percentage FROM (     SELECT b.cost, e.event_id     FROM budget b     JOIN event e ON b.link_to_event = e.event_id     WHERE e.type = 'Game' ) e;
SELECT b.budget_id, b.category, b.spent, b.remaining, b.amount, b.event_status FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description = 'Water, chips, cookies' GROUP BY b.budget_id ORDER BY b.amount DESC LIMIT 1;
SELECT m.first_name, m.last_name FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id, m.first_name, m.last_name ORDER BY SUM(e.cost) DESC LIMIT 5;
SELECT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense) GROUP BY m.member_id HAVING COUNT(*) > 1;
(SELECT COUNT(*) FROM (   SELECT m.member_id   FROM member m   JOIN zip_code z ON m.zip = z.zip_code   WHERE z.state = 'ME' ) AS maine_members) * 100 / (SELECT COUNT(*) FROM member WHERE position = 'Member') - (SELECT COUNT(*) FROM (   SELECT m.member_id   FROM member m   JOIN zip_code z ON m.zip = z.zip_code   WHERE z.state = 'VT' ) AS vermont_members) * 100 / (SELECT COUNT(*) FROM member WHERE position = 'Member')
SELECT T1.major_name, T1.department FROM major AS T1 JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Garrett' AND T2.last_name = 'Gerke';
SELECT m.first_name, m.last_name, e.cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Water, Veggie tray, supplies';
SELECT member.last_name, member.phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';
SELECT b.category, b.amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'January Speaker';
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Food';
SELECT member.first_name, member.last_name, income.amount FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.date_received = '2019-09-09';
SELECT b.category FROM budget b JOIN expense e ON b.budget_id = e.link_to_budget WHERE e.expense_description = 'Posters';
SELECT member.first_name, member.last_name, major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';
SELECT e.event_name, SUM(b.spent) as total_spent FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name;
Error: 第 10897 个样本有 2 个SQL。
SELECT member.first_name, member.last_name, member.position FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND zip_code.zip_code = 28092;
SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium';
SELECT     (SELECT COUNT(*) FROM customers WHERE Currency = 'EUR') /     (SELECT COUNT(*) FROM customers WHERE Currency = 'CZK') AS Ratio_EUR_to_CZK;
SELECT CustomerID, SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE Date BETWEEN 201201 AND 201212 AND SUBSTRING(CustomerID,1,3) = 'LAM' GROUP BY CustomerID ORDER BY TotalConsumption ASC LIMIT 1;
SELECT AVG(t.Consumption) / 12 AS Average_Monthly_Consumption FROM yearmonth t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Segment = 'SME' AND t.Date BETWEEN 201301 AND 201312;
SELECT c.CustomerID FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Currency = 'CZK' AND t.Date BETWEEN '20110101' AND '20111231' GROUP BY c.CustomerID ORDER BY SUM(t.Amount) DESC LIMIT 1;
SELECT COUNT(*) FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Segment = 'KAM' AND y.Date BETWEEN 201201 AND 201212 AND y.Consumption < 30000;
SELECT     (SELECT SUM(t.Amount)      FROM transactions_1k t      JOIN customers c ON t.CustomerID = c.CustomerID      WHERE c.Currency = 'CZK' AND            t.Date BETWEEN '20120101' AND '20121231') -     (SELECT SUM(t.Amount)      FROM transactions_1k t      JOIN customers c ON t.CustomerID = c.CustomerID      WHERE c.Currency = 'EUR' AND            t.Date BETWEEN '20120101' AND '20121231') AS Difference_in_Consumption;
SELECT     YEAR(t.Date) AS Year,     SUM(t.Amount * t.Price) AS TotalGasUseEUR FROM     transactions_1k t JOIN     customers c ON t.CustomerID = c.CustomerID WHERE     c.Currency = 'EUR' GROUP BY     YEAR(t.Date) ORDER BY     TotalGasUseEUR DESC LIMIT 1;
SELECT Segment, SUM(Consumption) as TotalConsumption FROM (     SELECT c.Segment, ym.Consumption     FROM customers c     JOIN yearmonth ym ON c.CustomerID = ym.CustomerID ) as subquery GROUP BY Segment ORDER BY TotalConsumption ASC LIMIT 1;
SELECT SUBSTRING(Date, 1, 4) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE CustomerID IN (     SELECT CustomerID     FROM customers     WHERE Currency = 'CZK' ) GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1;
SELECT Date FROM yearmonth WHERE SUBSTRING(Date, 1, 4) = '2013' AND     CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME') GROUP BY Date ORDER BY SUM(Consumption) DESC LIMIT 1;
WITH min_consumption_customers AS (     SELECT         ym.CustomerID,         c.Segment,         SUM(ym.Consumption) AS total_consumption     FROM yearmonth ym     JOIN customers c ON ym.CustomerID = c.CustomerID     WHERE SUBSTRING(ym.Date, 1, 4) = '2013'     GROUP BY ym.CustomerID, c.Segment ), min_consumption_per_segment AS (     SELECT         Segment,         MIN(total_consumption) AS min_consumption     FROM min_consumption_customers     GROUP BY Segment ), customers_with_min_consumption AS (     SELECT         mcs.Segment,         mcc.CustomerID,         mcc.total_consumption     FROM min_consumption_per_segment mcs     JOIN min_consumption_customers mcc ON mcc.Segment = mcs.Segment AND mcc.total_consumption = mcs.min_consumption ), consumption_per_segment AS (     SELECT         Segment,         AVG(total_consumption) AS avg_consumption     FROM (         SELECT             c.Currency,             mcc.Segment,             mcc.total_consumption         FROM customers_with_min_consumption mcc         JOIN customers c ON c.CustomerID = mcc.CustomerID         WHERE c.Currency = 'CZK'     ) t     GROUP BY Segment ) SELECT     CASE         WHEN c1.Segment = 'SME' THEN 'SME-LAM'         WHEN c1.Segment = 'LAM' THEN 'LAM-KAM'         ELSE 'KAM-SME'     END AS comparison,     (c1.avg_consumption - c2.avg_consumption) AS diff_avg_consumption FROM consumption_per_segment c1 JOIN consumption_per_segment c2 ON c1.Segment < c2.Segment;
WITH YearlyConsumption AS (     SELECT         CustomerID,         Segment,         SUM(CASE WHEN SUBSTRING(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END) AS Consumption2012,         SUM(CASE WHEN SUBSTRING(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END) AS Consumption2013     FROM         customers c     JOIN         yearmonth y ON c.CustomerID = y.CustomerID     WHERE         Date BETWEEN '201201' AND '201312'     GROUP BY         CustomerID,         Segment ), SegmentIncrease AS (     SELECT         Segment,         AVG(Consumption2013 - Consumption2012) AS IncreaseAmount,         AVG((Consumption2013 - Consumption2012) / Consumption2013 * 100) AS IncreasePercentage     FROM         YearlyConsumption     GROUP BY         Segment ) SELECT     Segment,     IncreaseAmount,     IncreasePercentage FROM     SegmentIncrease WHERE     Segment IN ('SME', 'LAM', 'KAM') ORDER BY     IncreasePercentage DESC;
SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311';
SELECT     (SELECT COUNT(*) FROM gasstations WHERE Country = 'Czech Republic' AND Segment = 'discount') -     (SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia' AND Segment = 'discount')
SELECT     (SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 7 AND Date = 201304) -     (SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 5 AND Date = 201304) AS Difference
SELECT     (SELECT COUNT(DISTINCT c.CustomerID) FROM customers c WHERE c.Segment = 'SME' AND c.Currency = 'CZK') -     (SELECT COUNT(DISTINCT c.CustomerID) FROM customers c WHERE c.Segment = 'SME' AND c.Currency = 'EUR') AS More_SMEs_in_CZK
SELECT c.CustomerID FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Currency = 'Euro' AND c.Segment = 'LAM' AND ym.Date = '201310' ORDER BY ym.Consumption DESC LIMIT 1;
SELECT c.CustomerID, SUM(y.Consumption) as TotalConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Segment = 'KAM' GROUP BY c.CustomerID ORDER BY TotalConsumption DESC LIMIT 1;
SELECT SUM(yearmonth.Consumption) FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'KAM' AND yearmonth.Date = 201305;
SELECT     (COUNT(CASE WHEN y.Consumption > 46.73 THEN y.CustomerID END) * 100.0 / COUNT(y.CustomerID)) AS Percentage_LAM_Customers FROM     yearmonth y JOIN     customers c ON y.CustomerID = c.CustomerID WHERE     c.Segment = 'LAM';
SELECT gs.Country, COUNT(gs.GasStationID) AS Num_ValueForMoney_GasStations FROM gasstations gs JOIN (     SELECT t1k.GasStationID     FROM transactions_1k t1k     WHERE t1k.Amount / t1k.Price <= ALL (         SELECT t1k_2.Amount / t1k_2.Price         FROM transactions_1k t1k_2         WHERE t1k.GasStationID = t1k_2.GasStationID     )     GROUP BY t1k.GasStationID ) t ON gs.GasStationID = t.GasStationID GROUP BY gs.Country ORDER BY Num_ValueForMoney_GasStations DESC;
SELECT     (COUNT(CASE WHEN c.Currency = 'EUR' THEN c.CustomerID END) * 100.0 / COUNT(c.CustomerID)) AS Percentage_EUR_KAM_Customers FROM     customers c WHERE     c.Segment = 'KAM';
SELECT     (COUNT(CASE WHEN y.Consumption > 528.3 THEN y.CustomerID END) * 100.0 / COUNT(y.CustomerID)) AS Percentage FROM     yearmonth y WHERE     y.Date = '201202'
SELECT     (SELECT COUNT(*)      FROM gasstations      WHERE Segment = 'Premium' AND Country = 'Slovakia') * 100 /     (SELECT COUNT(*)      FROM gasstations      WHERE Country = 'Slovakia') AS Percentage_of_Premium_Gas_Stations
SELECT CustomerID, SUM(Consumption) as TotalConsumption FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID ORDER BY TotalConsumption DESC LIMIT 1;
SELECT c.Segment, SUM(y.Consumption) as TotalConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date = '201309' GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1;
SELECT c.CustomerID, SUM(t.Amount * t.Price) as TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Segment = 'SME' AND ym.Date = '201206' GROUP BY c.CustomerID ORDER BY TotalConsumption ASC LIMIT 1;
SELECT MAX(Consumption) FROM yearmonth WHERE SUBSTRING(Date, 1, 4) = '2012'
SELECT MAX(YM.Consumption) FROM (     SELECT CustomerID, SUM(Consumption) AS Consumption     FROM yearmonth YM     JOIN customers C ON YM.CustomerID = C.CustomerID     WHERE C.Currency = 'Euro'     GROUP BY YM.CustomerID, DATE_FORMAT(YM.Date, '%Y-%m') ) AS MonthlyConsumption
SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE t.Date LIKE '201309%';
SELECT DISTINCT gs.Country FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID WHERE strftime('%Y%m', t.Date) = '201306';
SELECT DISTINCT gs.ChainID FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'euro';
SELECT DISTINCT p.Description FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID JOIN products p ON t.ProductID = p.ProductID WHERE c.Currency = 'Euro';
SELECT AVG(t.Amount * t.Price) AS AverageTotalPrice FROM transactions_1k t WHERE t.Date LIKE '2012-01%';
SELECT COUNT(DISTINCT c.CustomerID) FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Currency = 'Euro' AND ym.Consumption > 1000;
SELECT p.Description FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE g.Country = 'CZE'
SELECT DISTINCT Time FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.ChainID = 11;
SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Price > 1000;
SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01';
SELECT AVG(t.Amount * t.Price) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE';
SELECT AVG(t.Amount * t.Price) FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'Euro';
SELECT c.CustomerID FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-25' GROUP BY c.CustomerID ORDER BY SUM(t.Amount * t.Price) DESC LIMIT 1;
SELECT gs.Country FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID WHERE t.Date = '2012-08-25' ORDER BY t.Time LIMIT 1;
SELECT c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-24' AND t.Time = '16:25:00';
SELECT T1.Segment FROM customers AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-23' AND T2.Time = '21:20:00';
SELECT COUNT(*) FROM transactions_1k WHERE Date = '2012-08-26' AND Time < '13:00:00' AND Currency = 'EUR';
SELECT Segment FROM customers ORDER BY CustomerID LIMIT 1;
SELECT T2.Country FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00';
SELECT T1.ProductID FROM transactions_1k AS T1 WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'
SELECT ym.Date, ym.Consumption FROM yearmonth ym JOIN (     SELECT t1k.CustomerID     FROM transactions_1k t1k     WHERE t1k.Amount = 124.05 AND t1k.Date = '2012-08-24' ) sub ON ym.CustomerID = sub.CustomerID WHERE DATE_FORMAT(ym.Date, '%Y-%m') = '2012-01';
SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Date = '2012-08-26' AND transactions_1k.Time BETWEEN '08:00' AND '09:00' AND gasstations.Country = 'CZE';
SELECT c.Currency FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Date LIKE '201306%' AND ym.Consumption = 214582.17;
SELECT gasstations.Country FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.CardID = 667467 LIMIT 1;
Error: 第 10953 个样本有 2 个SQL。
SELECT     COUNT(DISTINCT CASE WHEN Currency = 'EUR' THEN customers.CustomerID END) * 100 / COUNT(DISTINCT customers.CustomerID) AS Percentage FROM     customers JOIN     transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE     transactions_1k.Date = '2012-08-25';
SELECT     ((y2012.Consumption - y2013.Consumption) / y2012.Consumption) AS Consumption_Decrease_Rate FROM     (         SELECT             CustomerID, SUM(Consumption) AS Consumption         FROM             yearmonth         WHERE             Date LIKE '2012-%'         GROUP BY             CustomerID     ) y2012,     (         SELECT             CustomerID, SUM(Consumption) AS Consumption         FROM             yearmonth         WHERE             Date LIKE '2013-%'         GROUP BY             CustomerID     ) y2013,     (         SELECT             t.CustomerID         FROM             transactions_1k t         WHERE             t.Date = '2012-08-25' AND t.Amount = 634.8     ) cust WHERE     y2012.CustomerID = cust.CustomerID AND y2013.CustomerID = cust.CustomerID
SELECT gs.GasStationID, SUM(t.Amount * t.Price) as Revenue FROM transactions_1k t JOIN gasstations gs ON t.GasStationID = gs.GasStationID GROUP BY gs.GasStationID ORDER BY Revenue DESC LIMIT 1;
SELECT     (COUNT(CASE WHEN gs.Segment = 'premium' THEN gs.GasStationID ELSE NULL END) * 100 / COUNT(gs.GasStationID)) AS PremiumPercentage FROM     gasstations gs WHERE     gs.Country = 'SVK';
SELECT SUM(Amount) AS TotalSpent FROM transactions_1k WHERE CustomerID = 38508 UNION SELECT SUM(t.Amount * t.Price) AS Jan2012Spent FROM transactions_1k t JOIN yearmonth y ON t.CustomerID = y.CustomerID WHERE t.CustomerID = 38508 AND y.Date = '201201'
SELECT p.Description, SUM(t.Amount) as TotalSales FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID GROUP BY p.Description ORDER BY TotalSales DESC LIMIT 5;
SELECT     c.CustomerID,     c.Currency,     SUM(t.Price) AS Total_Spent,     (SUM(t.Price) / SUM(t.Amount)) AS Average_Price_Per_Item FROM     customers c JOIN     transactions_1k t ON c.CustomerID = t.CustomerID GROUP BY     c.CustomerID, c.Currency ORDER BY     Total_Spent DESC LIMIT 1;
SELECT gs.Country FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE p.ProductID = 2 AND t.Amount = 1 GROUP BY gs.Country ORDER BY SUM(t.Price) DESC LIMIT 1;
SELECT y.ConsumerStatus FROM (     SELECT t.CustomerID, SUM(t.Amount) as ConsumerStatus     FROM transactions_1k t     JOIN products p ON t.ProductID = p.ProductID     WHERE p.ProductID = 5 AND (t.Price / t.Amount) > 29.00 AND t.Date LIKE '2012-08-%'     GROUP BY t.CustomerID ) y JOIN yearmonth m ON y.CustomerID = m.CustomerID AND m.Date LIKE '201208%'
